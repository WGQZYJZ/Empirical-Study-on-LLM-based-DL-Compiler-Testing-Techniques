==========mod==========
#[version = "0.0.5"]
def @func_3830(%var_3782: Tensor[(2145), float32]) -> (Tensor[(5, 12, 9), float32], float32, Tensor[(2145), float32], Tensor[(7, 10, 12), bool], Tensor[(1, 840), int16], Tensor[(13, 7, 8), float32], Tensor[(728), int64], Tensor[(14, 9, 13), float32], Tensor[(1638), float64]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 840), int16] */, dtype="int16") /* ty=Tensor[(1, 840), int16] */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 840), int16] */, dtype="int16") /* ty=Tensor[(1, 840), int16] */;
  %2 = reshape(%0, newshape=[7, 10, 12]) /* ty=Tensor[(7, 10, 12), int16] */;
  %3 = reshape(%1, newshape=[7, 10, 12]) /* ty=Tensor[(7, 10, 12), int16] */;
  %4 = @func_3583(%2, %3) /* ty=(Tensor[(7, 10, 12), bool],) */;
  %5 = cast(meta[relay.Constant][1] /* ty=Tensor[(728), int64] */, dtype="int64") /* ty=Tensor[(728), int64] */;
  %6 = reshape(%5, newshape=[13, 7, 8]) /* ty=Tensor[(13, 7, 8), int64] */;
  %7 = @func_2303(%6) /* ty=(Tensor[(13, 7, 8), bool], Tensor[(13, 7, 8), int8], Tensor[(13, 7, 8), float32], float32, Tensor[(693), int32], Tensor[(2145), float32], Tensor[(13, 7, 8), float32]) */;
  %8 = cast(4.894f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %9 = cast(%var_3782, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %10 = reshape(%8, newshape=[]) /* ty=float32 */;
  %11 = reshape(%9, newshape=[2145]) /* ty=Tensor[(2145), float32] */;
  %12 = @func_1491(%10, %11) /* ty=(Tensor[(12, 10, 15), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(14, 9, 13), float32], float32, Tensor[(2145), float32]) */;
  %13 = cast(4.894f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %14 = cast(%var_3782, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %15 = reshape(%13, newshape=[]) /* ty=float32 */;
  %16 = reshape(%14, newshape=[13, 11, 15]) /* ty=Tensor[(13, 11, 15), float32] */;
  %17 = @func_665(%15, %16) /* ty=(Tensor[(13, 11, 15), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(14, 9, 13), float32]) */;
  %18 = %17.2;
  %19 = cast(%18, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %20 = cos(%19) /* ty=Tensor[(1638), float64] */;
  %21 = cast(%20, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %22 = @func_3462() /* ty=Tensor[(5, 12, 9), float32] */;
  %23 = %4.0;
  %24 = %7.2;
  %25 = %12.1;
  %26 = sigmoid(%21) /* ty=Tensor[(1638), float64] */;
  (%22, 4.894f /* ty=float32 */, %var_3782, %23, meta[relay.Constant][0] /* ty=Tensor[(1, 840), int16] */, %24, meta[relay.Constant][1] /* ty=Tensor[(728), int64] */, %25, %26)
}

def @func_2585(%var_2577: Tensor[(3, 8, 16), float32]) -> (Tensor[(3, 8, 16), bool],) {
  %27 = cast(%var_2577, dtype="float32") /* ty=Tensor[(3, 8, 16), float32] */;
  %28 = tan(%27) /* ty=Tensor[(3, 8, 16), float32] */;
  %29 = cast(%var_2577, dtype="bool") /* ty=Tensor[(3, 8, 16), bool] */;
  %30 = shape_of(%28, dtype="int32") /* ty=Tensor[(3), int32] */;
  %31 = cast(%28, dtype="bool") /* ty=Tensor[(3, 8, 16), bool] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %33 = greater(%31, %32) /* ty=Tensor[(3, 8, 16), bool] */;
  (%33,)
}

def @func_4873() -> (Tensor[(5, 12, 9), float64], Tensor[(2145), float32], Tensor[(5, 12, 9), float64]) {
  %34 = @func_3990() /* ty=(Tensor[(5, 12, 9), float64],) */;
  %35 = @func_4184() /* ty=(Tensor[(5, 12, 9), float32], Tensor[(12, 10, 15), float32], float32, Tensor[(2145), float32]) */;
  %36 = %34.0;
  %37 = %35.3;
  %38 = @func_4232() /* ty=Tensor[(5, 12, 9), float64] */;
  (%36, %37, %38)
}

def @func_3462() -> Tensor[(5, 12, 9), float32] {
  %39 = @func_3329() /* ty=(Tensor[(5, 12, 9), float64], Tensor[(5, 12, 9), float32]) */;
  %39.1
}

def @func_3329() -> (Tensor[(5, 12, 9), float64], Tensor[(5, 12, 9), float32]) {
  %40 = cast(meta[relay.Constant][2] /* ty=Tensor[(5, 12, 9), float64] */, dtype="float64") /* ty=Tensor[(5, 12, 9), float64] */;
  %41 = cast(meta[relay.Constant][2] /* ty=Tensor[(5, 12, 9), float64] */, dtype="float32") /* ty=Tensor[(5, 12, 9), float32] */;
  %42 = log2(%40) /* ty=Tensor[(5, 12, 9), float64] */;
  %43 = tan(%41) /* ty=Tensor[(5, 12, 9), float32] */;
  (%42, %43)
}

def @func_4144() -> Tensor[(5, 12, 9), float32] {
  %44 = @func_3397() /* ty=Tensor[(5, 12, 9), float64] */;
  %45 = cast(%44, dtype="float32") /* ty=Tensor[(5, 12, 9), float32] */;
  acos(%45) /* ty=Tensor[(5, 12, 9), float32] */
}

def @func_6958(%var_6939: Tensor[(2, 3), float64], %var_6940: Tensor[(2, 3), float64]) -> (Tensor[(2, 3), float64],) {
  %46 = cast(%var_6940, dtype="float64") /* ty=Tensor[(2, 3), float64] */;
  %47 = shape_of(%var_6939, dtype="int32") /* ty=Tensor[(2), int32] */;
  %48 = cast(%var_6939, dtype="float64") /* ty=Tensor[(2, 3), float64] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %50 = maximum(%48, %49) /* ty=Tensor[(2, 3), float64] */;
  (%50,)
}

def @func_5051(%var_4956: uint8, %var_4957: Tensor[(3, 10, 14), uint8], %var_4966: Tensor[(715, 3), float32], %var_5009: Tensor[(1638), float32], %var_5031: Tensor[(1, 15), int32]) -> (Tensor[(6, 260), float64], Tensor[(432), float32], Tensor[(1100), uint32], Tensor[(715, 3), float32], Tensor[(8, 5, 16), int16], Tensor[(864), float32], Tensor[(640), int16], Tensor[(5, 12, 9), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(3, 10, 14), float32], Tensor[(11, 10, 10), uint8], Tensor[(5, 3, 7), float64], Tensor[(1, 15), int32], Tensor[(195), int32], Tensor[(300), float64], Tensor[(3, 10, 14), float32]) {
  %51 = cast(meta[relay.Constant][6] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %52 = cast(meta[relay.Constant][7] /* ty=Tensor[(640), int16] */, dtype="int16") /* ty=Tensor[(640), int16] */;
  %53 = reshape(%51, newshape=[12, 12, 6]) /* ty=Tensor[(12, 12, 6), float32] */;
  %54 = reshape(%52, newshape=[40, 16]) /* ty=Tensor[(40, 16), int16] */;
  %55 = @func_3921(%53, %54) /* ty=(Tensor[(12, 12, 6), float32], Tensor[(8, 5, 16), int16], Tensor[(40, 16), int16], Tensor[(5, 12, 9), float32]) */;
  %56 = cast(%var_5009, dtype="float32") /* ty=Tensor[(1638), float32] */;
  %57 = reshape(%56, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float32] */;
  %58 = cast(%var_4956, dtype="uint8") /* ty=uint8 */;
  %59 = cast(%var_4957, dtype="uint8") /* ty=Tensor[(3, 10, 14), uint8] */;
  %60 = bitwise_xor(%58, %59) /* ty=Tensor[(3, 10, 14), uint8] */;
  %61 = cast(%60, dtype="float64") /* ty=Tensor[(3, 10, 14), float64] */;
  %62 = tan(%61) /* ty=Tensor[(3, 10, 14), float64] */;
  %63 = cast(%var_4957, dtype="float32") /* ty=Tensor[(3, 10, 14), float32] */;
  %64 = shape_of(%62, dtype="int32") /* ty=Tensor[(3), int32] */;
  %65 = cast(%62, dtype="float32") /* ty=Tensor[(3, 10, 14), float32] */;
  %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %67 = cast(%var_4956, dtype="float64") /* ty=float64 */;
  %68 = cast(meta[relay.Constant][3] /* ty=Tensor[(6, 260), float64] */, dtype="float64") /* ty=Tensor[(6, 260), float64] */;
  %69 = cast(meta[relay.Constant][4] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %70 = cast(meta[relay.Constant][5] /* ty=Tensor[(1100), uint32] */, dtype="uint32") /* ty=Tensor[(1100), uint32] */;
  %71 = cast(%var_4966, dtype="float32") /* ty=Tensor[(715, 3), float32] */;
  %72 = reshape(%67, newshape=[]) /* ty=float64 */;
  %73 = reshape(%68, newshape=[10, 12, 13]) /* ty=Tensor[(10, 12, 13), float64] */;
  %74 = reshape(%69, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %75 = reshape(%70, newshape=[1100]) /* ty=Tensor[(1100), uint32] */;
  %76 = reshape(%71, newshape=[2145]) /* ty=Tensor[(2145), float32] */;
  %77 = @func_1366(%72, %73, %74, %75, %76) /* ty=(Tensor[(10, 12, 13), float64], Tensor[(14, 9, 13), float32], Tensor[(9, 4, 12), float32], Tensor[(11, 10, 10), bool], Tensor[(1100), uint32], Tensor[(13, 11, 15), float32], Tensor[(2145), float32], Tensor[(11, 10, 10), bool], Tensor[(1638), float32], Tensor[(1638, 432), uint8]) */;
  %78 = %77.7;
  %79 = cast(%78, dtype="uint8") /* ty=Tensor[(11, 10, 10), uint8] */;
  %80 = cast(%var_4956, dtype="uint8") /* ty=uint8 */;
  %81 = cast(%var_5031, dtype="int32") /* ty=Tensor[(1, 15), int32] */;
  %82 = cast(meta[relay.Constant][8] /* ty=Tensor[(195), int32] */, dtype="int32") /* ty=Tensor[(195), int32] */;
  %83 = reshape(%81, newshape=[3, 1, 5]) /* ty=Tensor[(3, 1, 5), int32] */;
  %84 = reshape(%82, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), int32] */;
  %85 = @func_4369(%83, %84) /* ty=(Tensor[(3, 13, 5), int32], Tensor[(5, 3, 7), float64]) */;
  %86 = @func_4144() /* ty=Tensor[(5, 12, 9), float32] */;
  %87 = cast(%86, dtype="float64") /* ty=Tensor[(5, 12, 9), float64] */;
  %88 = reshape(%87, newshape=[5, 12, 9]) /* ty=Tensor[(5, 12, 9), float64] */;
  %89 = @func_4440(%88) /* ty=(Tensor[(5, 12, 9), bool], Tensor[(5, 12, 9), float64], Tensor[(4, 5, 15), int32], Tensor[(300), float64], Tensor[(2145), float32], Tensor[(5, 3, 7), float64], Tensor[(14, 9, 13), float32]) */;
  %90 = cast(%60, dtype="uint64") /* ty=Tensor[(3, 10, 14), uint64] */;
  %91 = shape_of(%62, dtype="int32") /* ty=Tensor[(3), int32] */;
  %92 = cast(%62, dtype="uint64") /* ty=Tensor[(3, 10, 14), uint64] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %94 = left_shift(%92, %93) /* ty=Tensor[(3, 10, 14), uint64] */;
  %95 = cast(%60, dtype="uint8") /* ty=Tensor[(3, 10, 14), uint8] */;
  %96 = shape_of(%94, dtype="int32") /* ty=Tensor[(3), int32] */;
  %97 = cast(%94, dtype="uint8") /* ty=Tensor[(3, 10, 14), uint8] */;
  %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %99 = multiply(%97, %98) /* ty=Tensor[(3, 10, 14), uint8] */;
  %100 = cast(%99, dtype="float32") /* ty=Tensor[(3, 10, 14), float32] */;
  %101 = log10(%100) /* ty=Tensor[(3, 10, 14), float32] */;
  %102 = cast(%101, dtype="float32") /* ty=Tensor[(3, 10, 14), float32] */;
  %103 = %55.1;
  %104 = @func_418(%57) /* ty=Tensor[(14, 9, 13), float32] */;
  %105 = add(%65, %66) /* ty=Tensor[(3, 10, 14), float32] */;
  %106 = minimum(%79, %80) /* ty=Tensor[(11, 10, 10), uint8] */;
  %107 = %85.1;
  %108 = %89.3;
  %109 = sinh(%102) /* ty=Tensor[(3, 10, 14), float32] */;
  (meta[relay.Constant][3] /* ty=Tensor[(6, 260), float64] */, meta[relay.Constant][4] /* ty=Tensor[(432), float32] */, meta[relay.Constant][5] /* ty=Tensor[(1100), uint32] */, %var_4966, %103, meta[relay.Constant][6] /* ty=Tensor[(864), float32] */, meta[relay.Constant][7] /* ty=Tensor[(640), int16] */, %86, %104, %var_5009, %105, %106, %107, %var_5031, meta[relay.Constant][8] /* ty=Tensor[(195), int32] */, %108, %109)
}

def @func_6657() -> (Tensor[(5, 12, 9), float64], Tensor[(4, 108), float32], Tensor[(2080), float32]) {
  %110 = @func_4144() /* ty=Tensor[(5, 12, 9), float32] */;
  %111 = cast(%110, dtype="float64") /* ty=Tensor[(5, 12, 9), float64] */;
  %112 = cast(meta[relay.Constant][9] /* ty=Tensor[(2080), float32] */, dtype="float32") /* ty=Tensor[(2080), float32] */;
  %113 = reshape(%112, newshape=[2080]) /* ty=Tensor[(2080), float32] */;
  %114 = @func_6453(%113) /* ty=(Tensor[(5, 3, 7), float64], Tensor[(5, 12, 9), float64], Tensor[(2145), float32], Tensor[(693), int32], Tensor[(1560), float64], float64, Tensor[(4, 108), float32], Tensor[(5, 12, 9), float64], Tensor[(2080), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32]) */;
  %115 = erf(%111) /* ty=Tensor[(5, 12, 9), float64] */;
  %116 = %114.6;
  (%115, %116, meta[relay.Constant][9] /* ty=Tensor[(2080), float32] */)
}

def @func_3990() -> (Tensor[(5, 12, 9), float64],) {
  %117 = @func_3462() /* ty=Tensor[(5, 12, 9), float32] */;
  %118 = cast(%117, dtype="float64") /* ty=Tensor[(5, 12, 9), float64] */;
  %119 = atan(%118) /* ty=Tensor[(5, 12, 9), float64] */;
  (%119,)
}

def @func_5883(%var_5857: Tensor[(12, 3, 11), bool], %var_5858: Tensor[(12, 3, 11), bool], %var_5873: Tensor[(12, 3, 11), bool]) -> (Tensor[(12, 3, 11), bool], Tensor[(12, 3, 11), bool]) {
  %120 = cast(%var_5858, dtype="bool") /* ty=Tensor[(12, 3, 11), bool] */;
  %121 = shape_of(%var_5857, dtype="int32") /* ty=Tensor[(3), int32] */;
  %122 = cast(%var_5857, dtype="bool") /* ty=Tensor[(12, 3, 11), bool] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %124 = cast(%var_5873, dtype="bool") /* ty=Tensor[(12, 3, 11), bool] */;
  %125 = shape_of(%var_5858, dtype="int32") /* ty=Tensor[(3), int32] */;
  %126 = cast(%var_5858, dtype="bool") /* ty=Tensor[(12, 3, 11), bool] */;
  %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %128 = logical_and(%122, %123) /* ty=Tensor[(12, 3, 11), bool] */;
  %129 = equal(%126, %127) /* ty=Tensor[(12, 3, 11), bool] */;
  (%128, %129)
}

def @func_4111() -> (Tensor[(5, 3, 7), float64],) {
  %130 = @func_4075() /* ty=(Tensor[(5, 3, 7), float64],) */;
  %131 = %130.0;
  (%131,)
}

def @func_4930(%var_4894: Tensor[(6, 14, 11), bool], %var_4895: Tensor[(6, 14, 11), bool]) -> (Tensor[(6, 14, 11), bool], Tensor[(6, 14, 11), float64], Tensor[(5, 12, 9), float64], Tensor[(5, 12, 9), float64], Tensor[(5, 3, 7), float64]) {
  %132 = cast(%var_4895, dtype="bool") /* ty=Tensor[(6, 14, 11), bool] */;
  %133 = shape_of(%var_4894, dtype="int32") /* ty=Tensor[(3), int32] */;
  %134 = cast(%var_4894, dtype="bool") /* ty=Tensor[(6, 14, 11), bool] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %136 = cast(%var_4894, dtype="float64") /* ty=Tensor[(6, 14, 11), float64] */;
  %137 = @func_3990() /* ty=(Tensor[(5, 12, 9), float64],) */;
  %138 = @func_4275() /* ty=(Tensor[(5, 3, 7), float64], Tensor[(5, 3, 7), bool], Tensor[(5, 12, 9), float64]) */;
  %139 = logical_and(%134, %135) /* ty=Tensor[(6, 14, 11), bool] */;
  %140 = log2(%136) /* ty=Tensor[(6, 14, 11), float64] */;
  %141 = %137.0;
  %142 = %138.2;
  %143 = @func_3939() /* ty=Tensor[(5, 3, 7), float64] */;
  (%139, %140, %141, %142, %143)
}

def @func_5830(%var_5820: Tensor[(432), float32], %var_5821: Tensor[(2145), float32]) -> (Tensor[(5, 3, 7), float64], Tensor[(7, 10, 12), bool], Tensor[(840), int16], Tensor[(5, 3, 7), float64], Tensor[(2145), float32], float64, Tensor[(432), float32], Tensor[(2145), float32]) {
  %144 = @func_4732() /* ty=(Tensor[(5, 3, 7), float64],) */;
  %145 = cast(meta[relay.Constant][10] /* ty=Tensor[(840), int16] */, dtype="int16") /* ty=Tensor[(840), int16] */;
  %146 = cast(meta[relay.Constant][10] /* ty=Tensor[(840), int16] */, dtype="int16") /* ty=Tensor[(840), int16] */;
  %147 = reshape(%145, newshape=[7, 10, 12]) /* ty=Tensor[(7, 10, 12), int16] */;
  %148 = reshape(%146, newshape=[7, 10, 12]) /* ty=Tensor[(7, 10, 12), int16] */;
  %149 = @func_3583(%147, %148) /* ty=(Tensor[(7, 10, 12), bool],) */;
  %150 = @func_5332() /* ty=(Tensor[(5, 3, 7), float64],) */;
  %151 = cast(2.78793f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %152 = cast(%var_5820, dtype="float32") /* ty=Tensor[(432), float32] */;
  %153 = cast(%var_5821, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %154 = reshape(%151, newshape=[]) /* ty=float64 */;
  %155 = reshape(%152, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %156 = reshape(%153, newshape=[2145]) /* ty=Tensor[(2145), float32] */;
  %157 = @func_4831(%154, %155, %156) /* ty=(Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(5, 12, 9), int32], Tensor[(5, 12, 9), float64], Tensor[(9, 4, 12), float32], Tensor[(432), float32], Tensor[(1100), uint32], Tensor[(2145), float32], Tensor[(5, 3, 7), float64], Tensor[(1560), float64], Tensor[(5, 12, 9), float64], Tensor[(1560), float32]) */;
  %158 = %144.0;
  %159 = %149.0;
  %160 = %150.0;
  %161 = %157.7;
  (%158, %159, meta[relay.Constant][10] /* ty=Tensor[(840), int16] */, %160, %161, 2.78793f64 /* ty=float64 */, %var_5820, %var_5821)
}

def @func_2003(%var_1923: Tensor[(4, 5, 15), float64], %var_1952: Tensor[(2145), float32]) -> (Tensor[(1638), float32], Tensor[(2145), float32], Tensor[(4, 5, 15), int32], Tensor[(5, 12), uint32], Tensor[(2145), uint16]) {
  %162 = cast(0.285167f64 /* ty=float64 */, dtype="float32") /* ty=float32 */;
  %163 = cast(meta[relay.Constant][11] /* ty=Tensor[(2145), float32] */, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %164 = reshape(%162, newshape=[]) /* ty=float32 */;
  %165 = reshape(%163, newshape=[13, 11, 15]) /* ty=Tensor[(13, 11, 15), float32] */;
  %166 = @func_665(%164, %165) /* ty=(Tensor[(13, 11, 15), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(14, 9, 13), float32]) */;
  %167 = cast(%var_1952, dtype="float64") /* ty=Tensor[(2145), float64] */;
  %168 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(2145), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %169 = cast(meta[relay.Constant][11] /* ty=Tensor[(2145), float32] */, dtype="float64") /* ty=Tensor[(2145), float64] */;
  %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?), float64] */;
  %171 = add(%169, %170) /* ty=Tensor[(2145), float64] */;
  %172 = cast(0.285167f64 /* ty=float64 */, dtype="float32") /* ty=float32 */;
  %173 = cast(%171, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %174 = cast(0.285167f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %175 = cast(%var_1923, dtype="float64") /* ty=Tensor[(4, 5, 15), float64] */;
  %176 = subtract(%174, %175) /* ty=Tensor[(4, 5, 15), float64] */;
  %177 = cast(%var_1923, dtype="int32") /* ty=Tensor[(4, 5, 15), int32] */;
  %178 = shape_of(%176, dtype="int32") /* ty=Tensor[(3), int32] */;
  %179 = cast(%176, dtype="int32") /* ty=Tensor[(4, 5, 15), int32] */;
  %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %181 = cast(0.285167f64 /* ty=float64 */, dtype="uint32") /* ty=uint32 */;
  %182 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 12), float64] */, dtype="uint32") /* ty=Tensor[(5, 12), uint32] */;
  %183 = cast(meta[relay.Constant][11] /* ty=Tensor[(2145), float32] */, dtype="float64") /* ty=Tensor[(2145), float64] */;
  %184 = atanh(%183) /* ty=Tensor[(2145), float64] */;
  %185 = cast(%184, dtype="float64") /* ty=Tensor[(2145), float64] */;
  %186 = tan(%185) /* ty=Tensor[(2145), float64] */;
  %187 = cast(%171, dtype="uint16") /* ty=Tensor[(2145), uint16] */;
  %188 = shape_of(%186, dtype="int32") /* ty=Tensor[(1), int32] */;
  %189 = cast(%186, dtype="uint16") /* ty=Tensor[(2145), uint16] */;
  %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %191 = %166.2;
  %192 = floor_divide(%172, %173) /* ty=Tensor[(2145), float32] */;
  %193 = maximum(%179, %180) /* ty=Tensor[(4, 5, 15), int32] */;
  %194 = right_shift(%181, %182) /* ty=Tensor[(5, 12), uint32] */;
  %195 = left_shift(%189, %190) /* ty=Tensor[(2145), uint16] */;
  (%191, %192, %193, %194, %195)
}

def @func_6453(%var_6445: Tensor[(2080), float32]) -> (Tensor[(5, 3, 7), float64], Tensor[(5, 12, 9), float64], Tensor[(2145), float32], Tensor[(693), int32], Tensor[(1560), float64], float64, Tensor[(4, 108), float32], Tensor[(5, 12, 9), float64], Tensor[(2080), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32]) {
  %196 = cast(meta[relay.Constant][13] /* ty=Tensor[(2145), float32] */, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %197 = cast(meta[relay.Constant][14] /* ty=Tensor[(693), int32] */, dtype="int32") /* ty=Tensor[(693), int32] */;
  %198 = reshape(%196, newshape=[2145]) /* ty=Tensor[(2145), float32] */;
  %199 = reshape(%197, newshape=[693]) /* ty=Tensor[(693), int32] */;
  %200 = @func_4680(%198, %199) /* ty=(Tensor[(5, 3, 7), float64], Tensor[(143, 15), float32], Tensor[(2145), float32], Tensor[(693), uint16], Tensor[(5, 12, 9), float64], Tensor[(5, 12, 9), float32], Tensor[(5, 3, 7), float64]) */;
  %201 = cast(-2.6043f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %202 = cast(meta[relay.Constant][15] /* ty=Tensor[(4, 108), float32] */, dtype="float32") /* ty=Tensor[(4, 108), float32] */;
  %203 = cast(meta[relay.Constant][13] /* ty=Tensor[(2145), float32] */, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %204 = reshape(%201, newshape=[]) /* ty=float64 */;
  %205 = reshape(%202, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %206 = reshape(%203, newshape=[2145]) /* ty=Tensor[(2145), float32] */;
  %207 = @func_4831(%204, %205, %206) /* ty=(Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(5, 12, 9), int32], Tensor[(5, 12, 9), float64], Tensor[(9, 4, 12), float32], Tensor[(432), float32], Tensor[(1100), uint32], Tensor[(2145), float32], Tensor[(5, 3, 7), float64], Tensor[(1560), float64], Tensor[(5, 12, 9), float64], Tensor[(1560), float32]) */;
  %208 = cast(%var_6445, dtype="float32") /* ty=Tensor[(2080), float32] */;
  %209 = reshape(%208, newshape=[13, 16, 10]) /* ty=Tensor[(13, 16, 10), float32] */;
  %210 = @func_4566(%209) /* ty=(Tensor[(13, 16, 10), float32], Tensor[(5, 12, 9), float64]) */;
  %211 = cast(meta[relay.Constant][16] /* ty=Tensor[(1638), float32] */, dtype="float32") /* ty=Tensor[(1638), float32] */;
  %212 = reshape(%211, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float32] */;
  %213 = @func_3971() /* ty=Tensor[(5, 3, 7), float64] */;
  %214 = %200.4;
  %215 = %207.9;
  %216 = %210.1;
  %217 = @func_418(%212) /* ty=Tensor[(14, 9, 13), float32] */;
  (%213, %214, meta[relay.Constant][13] /* ty=Tensor[(2145), float32] */, meta[relay.Constant][14] /* ty=Tensor[(693), int32] */, %215, -2.6043f64 /* ty=float64 */, meta[relay.Constant][15] /* ty=Tensor[(4, 108), float32] */, %216, %var_6445, %217, meta[relay.Constant][16] /* ty=Tensor[(1638), float32] */)
}

def @func_3671(%var_3654: Tensor[(1, 429), float64], %var_3655: Tensor[(640), int16], %var_3656: Tensor[(432), float32]) -> (Tensor[(5, 12, 9), float32], Tensor[(432), float32], Tensor[(1, 429), float64], Tensor[(640), int16], Tensor[(432), float32], float32, Tensor[(1, 2145), float32]) {
  %218 = cast(%var_3654, dtype="float64") /* ty=Tensor[(1, 429), float64] */;
  %219 = cast(%var_3655, dtype="int16") /* ty=Tensor[(640), int16] */;
  %220 = cast(%var_3656, dtype="float32") /* ty=Tensor[(432), float32] */;
  %221 = cast(-3.00718f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %222 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 2145), float32] */, dtype="float32") /* ty=Tensor[(1, 2145), float32] */;
  %223 = reshape(%218, newshape=[13, 3, 11]) /* ty=Tensor[(13, 3, 11), float64] */;
  %224 = reshape(%219, newshape=[640]) /* ty=Tensor[(640), int16] */;
  %225 = reshape(%220, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %226 = reshape(%221, newshape=[]) /* ty=float32 */;
  %227 = reshape(%222, newshape=[715, 3]) /* ty=Tensor[(715, 3), float32] */;
  %228 = @func_2834(%223, %224, %225, %226, %227) /* ty=(Tensor[(8, 5, 16), int16], Tensor[(640), int16], Tensor[(13, 3, 11), float32], Tensor[(9, 4, 12), float32], Tensor[(432), float32], Tensor[(2145), float32], Tensor[(715, 3), float32], Tensor[(13, 3, 11), bool]) */;
  %229 = @func_3554() /* ty=Tensor[(5, 12, 9), float32] */;
  %230 = %228.4;
  (%229, %230, %var_3654, %var_3655, %var_3656, -3.00718f /* ty=float32 */, meta[relay.Constant][17] /* ty=Tensor[(1, 2145), float32] */)
}

def @func_6839(%var_6797: Tensor[(5, 3, 7), float64], %var_6812: Tensor[(432), float32]) -> (Tensor[(5, 3, 7), uint32], Tensor[(9, 4, 12), float32], float64, Tensor[(432), float32], Tensor[(2145), float32], Tensor[(5, 12, 9), float64], Tensor[(13, 7, 8), float32], Tensor[(728), int64]) {
  %231 = @func_4111() /* ty=(Tensor[(5, 3, 7), float64],) */;
  %232 = %231.0;
  %233 = cast(%var_6797, dtype="uint32") /* ty=Tensor[(5, 3, 7), uint32] */;
  %234 = shape_of(%232, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(%232, dtype="uint32") /* ty=Tensor[(5, 3, 7), uint32] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %237 = cast(6.65979f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %238 = cast(%var_6812, dtype="float32") /* ty=Tensor[(432), float32] */;
  %239 = cast(meta[relay.Constant][18] /* ty=Tensor[(2145), float32] */, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %240 = reshape(%237, newshape=[]) /* ty=float64 */;
  %241 = reshape(%238, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %242 = reshape(%239, newshape=[2145]) /* ty=Tensor[(2145), float32] */;
  %243 = @func_4831(%240, %241, %242) /* ty=(Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(5, 12, 9), int32], Tensor[(5, 12, 9), float64], Tensor[(9, 4, 12), float32], Tensor[(432), float32], Tensor[(1100), uint32], Tensor[(2145), float32], Tensor[(5, 3, 7), float64], Tensor[(1560), float64], Tensor[(5, 12, 9), float64], Tensor[(1560), float32]) */;
  %244 = @func_4484() /* ty=(Tensor[(5, 12, 9), float64],) */;
  %245 = cast(meta[relay.Constant][19] /* ty=Tensor[(728), int64] */, dtype="int64") /* ty=Tensor[(728), int64] */;
  %246 = reshape(%245, newshape=[13, 7, 8]) /* ty=Tensor[(13, 7, 8), int64] */;
  %247 = @func_2303(%246) /* ty=(Tensor[(13, 7, 8), bool], Tensor[(13, 7, 8), int8], Tensor[(13, 7, 8), float32], float32, Tensor[(693), int32], Tensor[(2145), float32], Tensor[(13, 7, 8), float32]) */;
  %248 = left_shift(%235, %236) /* ty=Tensor[(5, 3, 7), uint32] */;
  %249 = %243.4;
  %250 = %244.0;
  %251 = %247.2;
  (%248, %249, 6.65979f64 /* ty=float64 */, %var_6812, meta[relay.Constant][18] /* ty=Tensor[(2145), float32] */, %250, %251, meta[relay.Constant][19] /* ty=Tensor[(728), int64] */)
}

def @func_7156(%var_7119: float64) -> (Tensor[(5, 3, 7), bool], Tensor[(5, 12, 9), float64], float64, Tensor[(432), float32], Tensor[(2145), float32]) {
  %252 = @func_6308() /* ty=(Tensor[(5, 3, 7), bool], Tensor[(5, 3, 7), float64]) */;
  %253 = cast(%var_7119, dtype="float64") /* ty=float64 */;
  %254 = cast(meta[relay.Constant][20] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %255 = cast(meta[relay.Constant][21] /* ty=Tensor[(2145), float32] */, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %256 = reshape(%253, newshape=[]) /* ty=float64 */;
  %257 = reshape(%254, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %258 = reshape(%255, newshape=[2145]) /* ty=Tensor[(2145), float32] */;
  %259 = @func_4831(%256, %257, %258) /* ty=(Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(5, 12, 9), int32], Tensor[(5, 12, 9), float64], Tensor[(9, 4, 12), float32], Tensor[(432), float32], Tensor[(1100), uint32], Tensor[(2145), float32], Tensor[(5, 3, 7), float64], Tensor[(1560), float64], Tensor[(5, 12, 9), float64], Tensor[(1560), float32]) */;
  %260 = %252.0;
  %261 = %259.3;
  (%260, %261, %var_7119, meta[relay.Constant][20] /* ty=Tensor[(432), float32] */, meta[relay.Constant][21] /* ty=Tensor[(2145), float32] */)
}

def @main(%var_7204: Tensor[(6, 13, 12), float32]) -> (Tensor[(6, 13, 12), float32],) {
  %262 = cast(%var_7204, dtype="float32") /* ty=Tensor[(6, 13, 12), float32] */;
  %263 = log(%262) /* ty=Tensor[(6, 13, 12), float32] */;
  (%263,)
}

def @func_1366(%var_1303: float64, %var_1304: Tensor[(10, 12, 13), float64], %var_1333: Tensor[(432), float32], %var_1341: Tensor[(1100), uint32], %var_1346: Tensor[(2145), float32]) -> (Tensor[(10, 12, 13), float64], Tensor[(14, 9, 13), float32], Tensor[(9, 4, 12), float32], Tensor[(11, 10, 10), bool], Tensor[(1100), uint32], Tensor[(13, 11, 15), float32], Tensor[(2145), float32], Tensor[(11, 10, 10), bool], Tensor[(1638), float32], Tensor[(1638, 432), uint8]) {
  %264 = cast(%var_1303, dtype="float64") /* ty=float64 */;
  %265 = cast(%var_1304, dtype="float64") /* ty=Tensor[(10, 12, 13), float64] */;
  %266 = divide(%264, %265) /* ty=Tensor[(10, 12, 13), float64] */;
  %267 = cast(%266, dtype="float64") /* ty=Tensor[(10, 12, 13), float64] */;
  %268 = cast(meta[relay.Constant][22] /* ty=Tensor[(1638, 1), float32] */, dtype="float32") /* ty=Tensor[(1638, 1), float32] */;
  %269 = reshape(%268, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float32] */;
  %270 = cast(%var_1333, dtype="float32") /* ty=Tensor[(432), float32] */;
  %271 = reshape(%270, newshape=[9, 4, 12]) /* ty=Tensor[(9, 4, 12), float32] */;
  %272 = @func_1019(%271) /* ty=(Tensor[(9, 4, 12), float32],) */;
  %273 = cast(%var_1341, dtype="uint32") /* ty=Tensor[(1100), uint32] */;
  %274 = cast(%var_1341, dtype="uint32") /* ty=Tensor[(1100), uint32] */;
  %275 = reshape(%273, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), uint32] */;
  %276 = reshape(%274, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), uint32] */;
  %277 = cast(%var_1303, dtype="float32") /* ty=float32 */;
  %278 = cast(%var_1346, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %279 = reshape(%277, newshape=[]) /* ty=float32 */;
  %280 = reshape(%278, newshape=[13, 11, 15]) /* ty=Tensor[(13, 11, 15), float32] */;
  %281 = @func_665(%279, %280) /* ty=(Tensor[(13, 11, 15), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(14, 9, 13), float32]) */;
  %282 = cast(%var_1341, dtype="uint32") /* ty=Tensor[(1100), uint32] */;
  %283 = @func_1062(%275, %276) /* ty=Tensor[(11, 10, 10), bool] */;
  %284 = cast(%283, dtype="uint32") /* ty=Tensor[(11, 10, 10), uint32] */;
  %285 = reshape(%282, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), uint32] */;
  %286 = reshape(%284, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), uint32] */;
  %287 = cast(%var_1303, dtype="float32") /* ty=float32 */;
  %288 = %281.0;
  %289 = cast(%288, dtype="float32") /* ty=Tensor[(13, 11, 15), float32] */;
  %290 = reshape(%287, newshape=[]) /* ty=float32 */;
  %291 = reshape(%289, newshape=[13, 11, 15]) /* ty=Tensor[(13, 11, 15), float32] */;
  %292 = @func_665(%290, %291) /* ty=(Tensor[(13, 11, 15), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(14, 9, 13), float32]) */;
  %293 = cast(%var_1333, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %294 = cast(meta[relay.Constant][22] /* ty=Tensor[(1638, 1), float32] */, dtype="uint8") /* ty=Tensor[(1638, 1), uint8] */;
  %295 = cosh(%267) /* ty=Tensor[(10, 12, 13), float64] */;
  %296 = @func_418(%269) /* ty=Tensor[(14, 9, 13), float32] */;
  %297 = %272.0;
  %298 = @func_1062(%285, %286) /* ty=Tensor[(11, 10, 10), bool] */;
  %299 = %292.2;
  %300 = multiply(%293, %294) /* ty=Tensor[(1638, 432), uint8] */;
  (%295, %296, %297, %283, %var_1341, %288, %var_1346, %298, %299, %300)
}

def @func_665(%var_639: float32, %var_640: Tensor[(13, 11, 15), float32]) -> (Tensor[(13, 11, 15), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(14, 9, 13), float32]) {
  %301 = cast(%var_639, dtype="float32") /* ty=float32 */;
  %302 = cast(%var_640, dtype="float32") /* ty=Tensor[(13, 11, 15), float32] */;
  %303 = cast(meta[relay.Constant][23] /* ty=Tensor[(1638), float32] */, dtype="float32") /* ty=Tensor[(1638), float32] */;
  %304 = reshape(%303, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float32] */;
  %305 = cast(meta[relay.Constant][23] /* ty=Tensor[(1638), float32] */, dtype="float32") /* ty=Tensor[(1638), float32] */;
  %306 = reshape(%305, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float32] */;
  %307 = divide(%301, %302) /* ty=Tensor[(13, 11, 15), float32] */;
  %308 = @func_418(%304) /* ty=Tensor[(14, 9, 13), float32] */;
  %309 = @func_418(%306) /* ty=Tensor[(14, 9, 13), float32] */;
  (%307, %308, meta[relay.Constant][23] /* ty=Tensor[(1638), float32] */, %309)
}

def @func_4093(%var_4087: Tensor[(5, 12, 9), float64]) -> (Tensor[(5, 12, 9), int16],) {
  %310 = @func_3433() /* ty=Tensor[(5, 12, 9), float64] */;
  %311 = cast(%var_4087, dtype="int16") /* ty=Tensor[(5, 12, 9), int16] */;
  %312 = shape_of(%310, dtype="int32") /* ty=Tensor[(3), int32] */;
  %313 = cast(%310, dtype="int16") /* ty=Tensor[(5, 12, 9), int16] */;
  %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %315 = bitwise_or(%313, %314) /* ty=Tensor[(5, 12, 9), int16] */;
  (%315,)
}

def @func_4741(%var_4737: Tensor[(10, 13, 9), float32]) -> Tensor[(10, 13, 9), float32] {
  %316 = cast(%var_4737, dtype="float32") /* ty=Tensor[(10, 13, 9), float32] */;
  tan(%316) /* ty=Tensor[(10, 13, 9), float32] */
}

def @func_3397() -> Tensor[(5, 12, 9), float64] {
  %317 = @func_3329() /* ty=(Tensor[(5, 12, 9), float64], Tensor[(5, 12, 9), float32]) */;
  %317.0
}

def @func_4831(%var_4786: float64, %var_4788: Tensor[(432), float32], %var_4790: Tensor[(2145), float32]) -> (Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(5, 12, 9), int32], Tensor[(5, 12, 9), float64], Tensor[(9, 4, 12), float32], Tensor[(432), float32], Tensor[(1100), uint32], Tensor[(2145), float32], Tensor[(5, 3, 7), float64], Tensor[(1560), float64], Tensor[(5, 12, 9), float64], Tensor[(1560), float32]) {
  %318 = cast(meta[relay.Constant][24] /* ty=Tensor[(1638), float32] */, dtype="float32") /* ty=Tensor[(1638), float32] */;
  %319 = reshape(%318, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float32] */;
  %320 = @func_3397() /* ty=Tensor[(5, 12, 9), float64] */;
  %321 = @func_4275() /* ty=(Tensor[(5, 3, 7), float64], Tensor[(5, 3, 7), bool], Tensor[(5, 12, 9), float64]) */;
  %322 = %321.2;
  %323 = cast(%322, dtype="int32") /* ty=Tensor[(5, 12, 9), int32] */;
  %324 = shape_of(%320, dtype="int32") /* ty=Tensor[(3), int32] */;
  %325 = cast(%320, dtype="int32") /* ty=Tensor[(5, 12, 9), int32] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %327 = @func_4484() /* ty=(Tensor[(5, 12, 9), float64],) */;
  %328 = cast(%var_4786, dtype="float64") /* ty=float64 */;
  %329 = cast(meta[relay.Constant][25] /* ty=Tensor[(1560), float64] */, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %330 = cast(%var_4788, dtype="float32") /* ty=Tensor[(432), float32] */;
  %331 = cast(meta[relay.Constant][26] /* ty=Tensor[(1100), uint32] */, dtype="uint32") /* ty=Tensor[(1100), uint32] */;
  %332 = cast(%var_4790, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %333 = reshape(%328, newshape=[]) /* ty=float64 */;
  %334 = reshape(%329, newshape=[10, 12, 13]) /* ty=Tensor[(10, 12, 13), float64] */;
  %335 = reshape(%330, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %336 = reshape(%331, newshape=[1100]) /* ty=Tensor[(1100), uint32] */;
  %337 = reshape(%332, newshape=[2145]) /* ty=Tensor[(2145), float32] */;
  %338 = @func_1366(%333, %334, %335, %336, %337) /* ty=(Tensor[(10, 12, 13), float64], Tensor[(14, 9, 13), float32], Tensor[(9, 4, 12), float32], Tensor[(11, 10, 10), bool], Tensor[(1100), uint32], Tensor[(13, 11, 15), float32], Tensor[(2145), float32], Tensor[(11, 10, 10), bool], Tensor[(1638), float32], Tensor[(1638, 432), uint8]) */;
  %339 = left_shift(%325, %326) /* ty=Tensor[(5, 12, 9), int32] */;
  %340 = cast(%339, dtype="float64") /* ty=Tensor[(5, 12, 9), float64] */;
  %341 = reshape(%340, newshape=[5, 12, 9]) /* ty=Tensor[(5, 12, 9), float64] */;
  %342 = @func_4440(%341) /* ty=(Tensor[(5, 12, 9), bool], Tensor[(5, 12, 9), float64], Tensor[(4, 5, 15), int32], Tensor[(300), float64], Tensor[(2145), float32], Tensor[(5, 3, 7), float64], Tensor[(14, 9, 13), float32]) */;
  %343 = cast(meta[relay.Constant][25] /* ty=Tensor[(1560), float64] */, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %344 = cast(meta[relay.Constant][25] /* ty=Tensor[(1560), float64] */, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %345 = cast(%var_4786, dtype="uint32") /* ty=uint32 */;
  %346 = maximum(%344, %345) /* ty=Tensor[(1560), uint32] */;
  %347 = cast(%346, dtype="float32") /* ty=Tensor[(1560), float32] */;
  %348 = @func_418(%319) /* ty=Tensor[(14, 9, 13), float32] */;
  %349 = %327.0;
  %350 = %338.2;
  %351 = %342.5;
  %352 = cosh(%343) /* ty=Tensor[(1560), float64] */;
  %353 = @func_4232() /* ty=Tensor[(5, 12, 9), float64] */;
  %354 = log(%347) /* ty=Tensor[(1560), float32] */;
  (%348, meta[relay.Constant][24] /* ty=Tensor[(1638), float32] */, %339, %349, %350, %var_4788, meta[relay.Constant][26] /* ty=Tensor[(1100), uint32] */, %var_4790, %351, %352, %353, %354)
}

def @func_6059() -> (Tensor[(5, 3, 7), float64], Tensor[(5, 12, 9), bool], Tensor[(540), float64], Tensor[(5, 3, 7), float64]) {
  %355 = cast(meta[relay.Constant][27] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
  %356 = reshape(%355, newshape=[5, 12, 9]) /* ty=Tensor[(5, 12, 9), float64] */;
  %357 = @func_5619() /* ty=Tensor[(5, 3, 7), float64] */;
  %358 = @func_4514(%356) /* ty=Tensor[(5, 12, 9), bool] */;
  %359 = @func_3971() /* ty=Tensor[(5, 3, 7), float64] */;
  (%357, %358, meta[relay.Constant][27] /* ty=Tensor[(540), float64] */, %359)
}

def @func_4548() -> (Tensor[(5, 3, 7), float64],) {
  %360 = @func_3939() /* ty=Tensor[(5, 3, 7), float64] */;
  %361 = cast(%360, dtype="float64") /* ty=Tensor[(5, 3, 7), float64] */;
  %362 = cos(%361) /* ty=Tensor[(5, 3, 7), float64] */;
  (%362,)
}

def @func_7098(%var_7076: Tensor[(6), float64], %var_7091: Tensor[(3, 7, 16), float32]) -> (Tensor[(15, 10, 3), int32], Tensor[(2, 3), float64], Tensor[(6), float64], Tensor[(3, 7, 16), float32]) {
  %363 = @func_4184() /* ty=(Tensor[(5, 12, 9), float32], Tensor[(12, 10, 15), float32], float32, Tensor[(2145), float32]) */;
  %364 = %363.2;
  %365 = cast(%364, dtype="int32") /* ty=int32 */;
  %366 = reshape(%365, newshape=[]) /* ty=int32 */;
  %367 = @func_4016(%366) /* ty=(Tensor[(15, 10, 3), int32],) */;
  %368 = cast(%var_7076, dtype="float64") /* ty=Tensor[(6), float64] */;
  %369 = cast(%var_7076, dtype="float64") /* ty=Tensor[(6), float64] */;
  %370 = reshape(%368, newshape=[2, 3]) /* ty=Tensor[(2, 3), float64] */;
  %371 = reshape(%369, newshape=[2, 3]) /* ty=Tensor[(2, 3), float64] */;
  %372 = @func_6958(%370, %371) /* ty=(Tensor[(2, 3), float64],) */;
  %373 = cast(%364, dtype="float32") /* ty=float32 */;
  %374 = cast(%var_7091, dtype="float32") /* ty=Tensor[(3, 7, 16), float32] */;
  %375 = %367.0;
  %376 = %372.0;
  %377 = mod(%373, %374) /* ty=Tensor[(3, 7, 16), float32] */;
  (%375, %376, %var_7076, %377)
}

def @func_6020(%var_6015: Tensor[(15, 4, 12), float32]) -> (Tensor[(15, 4, 12), float32],) {
  %378 = @func_4184() /* ty=(Tensor[(5, 12, 9), float32], Tensor[(12, 10, 15), float32], float32, Tensor[(2145), float32]) */;
  %379 = %378.2;
  %380 = cast(%379, dtype="float32") /* ty=float32 */;
  %381 = cast(%var_6015, dtype="float32") /* ty=Tensor[(15, 4, 12), float32] */;
  %382 = mod(%380, %381) /* ty=Tensor[(15, 4, 12), float32] */;
  (%382,)
}

def @func_7199() -> Tensor[(5, 3, 7), float64] {
  @func_6497() /* ty=Tensor[(5, 3, 7), float64] */
}

def @func_5142(%var_5130: Tensor[(15, 2, 6), float64]) -> (Tensor[(15, 2, 6), float64], Tensor[(15, 2, 6), float32]) {
  %383 = cast(%var_5130, dtype="float64") /* ty=Tensor[(15, 2, 6), float64] */;
  %384 = cast(%var_5130, dtype="float64") /* ty=Tensor[(15, 2, 6), float64] */;
  %385 = acosh(%384) /* ty=Tensor[(15, 2, 6), float64] */;
  %386 = cast(%385, dtype="float32") /* ty=Tensor[(15, 2, 6), float32] */;
  %387 = asin(%383) /* ty=Tensor[(15, 2, 6), float64] */;
  %388 = erf(%386) /* ty=Tensor[(15, 2, 6), float32] */;
  (%387, %388)
}

def @func_1491(%var_1480: float32, %var_1481: Tensor[(2145), float32]) -> (Tensor[(12, 10, 15), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(14, 9, 13), float32], float32, Tensor[(2145), float32]) {
  %389 = cast(meta[relay.Constant][28] /* ty=Tensor[(12, 10, 15), float64] */, dtype="float64") /* ty=Tensor[(12, 10, 15), float64] */;
  %390 = cos(%389) /* ty=Tensor[(12, 10, 15), float64] */;
  %391 = cast(%390, dtype="float32") /* ty=Tensor[(12, 10, 15), float32] */;
  %392 = cast(meta[relay.Constant][29] /* ty=Tensor[(1638), float32] */, dtype="float32") /* ty=Tensor[(1638), float32] */;
  %393 = reshape(%392, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float32] */;
  %394 = cast(%var_1480, dtype="float32") /* ty=float32 */;
  %395 = cast(%var_1481, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %396 = reshape(%394, newshape=[]) /* ty=float32 */;
  %397 = reshape(%395, newshape=[13, 11, 15]) /* ty=Tensor[(13, 11, 15), float32] */;
  %398 = @func_665(%396, %397) /* ty=(Tensor[(13, 11, 15), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(14, 9, 13), float32]) */;
  %399 = rsqrt(%391) /* ty=Tensor[(12, 10, 15), float32] */;
  %400 = @func_418(%393) /* ty=Tensor[(14, 9, 13), float32] */;
  %401 = %398.1;
  (%399, %400, meta[relay.Constant][29] /* ty=Tensor[(1638), float32] */, %401, %var_1480, %var_1481)
}

def @func_6927() -> (Tensor[(5, 12, 9), float64], Tensor[(5, 12, 9), float32]) {
  %402 = @func_4484() /* ty=(Tensor[(5, 12, 9), float64],) */;
  %403 = %402.0;
  %404 = cast(%403, dtype="float64") /* ty=Tensor[(5, 12, 9), float64] */;
  %405 = log(%404) /* ty=Tensor[(5, 12, 9), float64] */;
  %406 = @func_3554() /* ty=Tensor[(5, 12, 9), float32] */;
  (%405, %406)
}

def @func_2834(%var_2749: Tensor[(13, 3, 11), float64], %var_2774: Tensor[(640), int16], %var_2790: Tensor[(432), float32], %var_2812: float32, %var_2813: Tensor[(715, 3), float32]) -> (Tensor[(8, 5, 16), int16], Tensor[(640), int16], Tensor[(13, 3, 11), float32], Tensor[(9, 4, 12), float32], Tensor[(432), float32], Tensor[(2145), float32], Tensor[(715, 3), float32], Tensor[(13, 3, 11), bool]) {
  %407 = cast(%var_2774, dtype="int16") /* ty=Tensor[(640), int16] */;
  %408 = cast(%var_2774, dtype="int16") /* ty=Tensor[(640), int16] */;
  %409 = reshape(%407, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), int16] */;
  %410 = reshape(%408, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), int16] */;
  %411 = cast(meta[relay.Constant][30] /* ty=Tensor[(13, 3, 11), float64] */, dtype="float64") /* ty=Tensor[(13, 3, 11), float64] */;
  %412 = rsqrt(%411) /* ty=Tensor[(13, 3, 11), float64] */;
  %413 = cast(%412, dtype="float32") /* ty=Tensor[(13, 3, 11), float32] */;
  %414 = cast(%var_2790, dtype="float32") /* ty=Tensor[(432), float32] */;
  %415 = reshape(%414, newshape=[9, 4, 12]) /* ty=Tensor[(9, 4, 12), float32] */;
  %416 = @func_1019(%415) /* ty=(Tensor[(9, 4, 12), float32],) */;
  %417 = cast(%var_2812, dtype="float32") /* ty=float32 */;
  %418 = cast(%var_2813, dtype="float32") /* ty=Tensor[(715, 3), float32] */;
  %419 = reshape(%417, newshape=[]) /* ty=float32 */;
  %420 = reshape(%418, newshape=[2145]) /* ty=Tensor[(2145), float32] */;
  %421 = @func_1491(%419, %420) /* ty=(Tensor[(12, 10, 15), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(14, 9, 13), float32], float32, Tensor[(2145), float32]) */;
  %422 = cast(%var_2749, dtype="float64") /* ty=Tensor[(13, 3, 11), float64] */;
  %423 = shape_of(%412, dtype="int32") /* ty=Tensor[(3), int32] */;
  %424 = cast(%412, dtype="float64") /* ty=Tensor[(13, 3, 11), float64] */;
  %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %426 = floor_divide(%424, %425) /* ty=Tensor[(13, 3, 11), float64] */;
  %427 = cast(%426, dtype="bool") /* ty=Tensor[(13, 3, 11), bool] */;
  %428 = cast(%var_2812, dtype="bool") /* ty=bool */;
  %429 = @func_2343(%409, %410) /* ty=Tensor[(8, 5, 16), int16] */;
  %430 = asin(%413) /* ty=Tensor[(13, 3, 11), float32] */;
  %431 = %416.0;
  %432 = %421.5;
  %433 = logical_or(%427, %428) /* ty=Tensor[(13, 3, 11), bool] */;
  (%429, %var_2774, %430, %431, %var_2790, %432, %var_2813, %433)
}

def @func_4232() -> Tensor[(5, 12, 9), float64] {
  @func_3433() /* ty=Tensor[(5, 12, 9), float64] */
}

def @func_2946(%var_2909: Tensor[(15, 11, 16), float32], %var_2930: float32, %var_2931: Tensor[(1, 2145), float32], %var_2934: Tensor[(1100), uint32]) -> (Tensor[(15, 11, 16), uint32], Tensor[(13, 3, 11), float32], Tensor[(429), float64], Tensor[(640), int16], Tensor[(432), float32], float32, Tensor[(1, 2145), float32], Tensor[(11, 10, 10), bool], Tensor[(1100), uint32]) {
  %434 = cast(%var_2909, dtype="float32") /* ty=Tensor[(15, 11, 16), float32] */;
  %435 = sqrt(%434) /* ty=Tensor[(15, 11, 16), float32] */;
  %436 = cast(%var_2909, dtype="uint32") /* ty=Tensor[(15, 11, 16), uint32] */;
  %437 = shape_of(%435, dtype="int32") /* ty=Tensor[(3), int32] */;
  %438 = cast(%435, dtype="uint32") /* ty=Tensor[(15, 11, 16), uint32] */;
  %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %440 = cast(meta[relay.Constant][31] /* ty=Tensor[(429), float64] */, dtype="float64") /* ty=Tensor[(429), float64] */;
  %441 = cast(meta[relay.Constant][32] /* ty=Tensor[(640), int16] */, dtype="int16") /* ty=Tensor[(640), int16] */;
  %442 = cast(meta[relay.Constant][33] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %443 = cast(%var_2930, dtype="float32") /* ty=float32 */;
  %444 = cast(%var_2931, dtype="float32") /* ty=Tensor[(1, 2145), float32] */;
  %445 = reshape(%440, newshape=[13, 3, 11]) /* ty=Tensor[(13, 3, 11), float64] */;
  %446 = reshape(%441, newshape=[640]) /* ty=Tensor[(640), int16] */;
  %447 = reshape(%442, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %448 = reshape(%443, newshape=[]) /* ty=float32 */;
  %449 = reshape(%444, newshape=[715, 3]) /* ty=Tensor[(715, 3), float32] */;
  %450 = @func_2834(%445, %446, %447, %448, %449) /* ty=(Tensor[(8, 5, 16), int16], Tensor[(640), int16], Tensor[(13, 3, 11), float32], Tensor[(9, 4, 12), float32], Tensor[(432), float32], Tensor[(2145), float32], Tensor[(715, 3), float32], Tensor[(13, 3, 11), bool]) */;
  %451 = cast(%var_2934, dtype="uint32") /* ty=Tensor[(1100), uint32] */;
  %452 = cast(%var_2934, dtype="uint32") /* ty=Tensor[(1100), uint32] */;
  %453 = reshape(%451, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), uint32] */;
  %454 = reshape(%452, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), uint32] */;
  %455 = add(%438, %439) /* ty=Tensor[(15, 11, 16), uint32] */;
  %456 = %450.2;
  %457 = @func_1062(%453, %454) /* ty=Tensor[(11, 10, 10), bool] */;
  (%455, %456, meta[relay.Constant][31] /* ty=Tensor[(429), float64] */, meta[relay.Constant][32] /* ty=Tensor[(640), int16] */, meta[relay.Constant][33] /* ty=Tensor[(432), float32] */, %var_2930, %var_2931, %457, %var_2934)
}

def @func_3433() -> Tensor[(5, 12, 9), float64] {
  @func_3397() /* ty=Tensor[(5, 12, 9), float64] */
}

def @func_4440(%var_4385: Tensor[(5, 12, 9), float64]) -> (Tensor[(5, 12, 9), bool], Tensor[(5, 12, 9), float64], Tensor[(4, 5, 15), int32], Tensor[(300), float64], Tensor[(2145), float32], Tensor[(5, 3, 7), float64], Tensor[(14, 9, 13), float32]) {
  %458 = @func_3397() /* ty=Tensor[(5, 12, 9), float64] */;
  %459 = cast(%var_4385, dtype="bool") /* ty=Tensor[(5, 12, 9), bool] */;
  %460 = shape_of(%458, dtype="int32") /* ty=Tensor[(3), int32] */;
  %461 = cast(%458, dtype="bool") /* ty=Tensor[(5, 12, 9), bool] */;
  %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %463 = cast(%458, dtype="float32") /* ty=Tensor[(5, 12, 9), float32] */;
  %464 = shape_of(%var_4385, dtype="int32") /* ty=Tensor[(3), int32] */;
  %465 = cast(%var_4385, dtype="float32") /* ty=Tensor[(5, 12, 9), float32] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %467 = divide(%465, %466) /* ty=Tensor[(5, 12, 9), float32] */;
  %468 = cast(%467, dtype="float64") /* ty=Tensor[(5, 12, 9), float64] */;
  %469 = cast(meta[relay.Constant][34] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %470 = cast(meta[relay.Constant][35] /* ty=Tensor[(2145), float32] */, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %471 = reshape(%469, newshape=[4, 5, 15]) /* ty=Tensor[(4, 5, 15), float64] */;
  %472 = reshape(%470, newshape=[2145]) /* ty=Tensor[(2145), float32] */;
  %473 = @func_2003(%471, %472) /* ty=(Tensor[(1638), float32], Tensor[(2145), float32], Tensor[(4, 5, 15), int32], Tensor[(5, 12), uint32], Tensor[(2145), uint16]) */;
  %474 = @func_3971() /* ty=Tensor[(5, 3, 7), float64] */;
  %475 = cast(%474, dtype="float64") /* ty=Tensor[(5, 3, 7), float64] */;
  %476 = cast(meta[relay.Constant][35] /* ty=Tensor[(2145), float32] */, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %477 = reshape(%476, newshape=[2145]) /* ty=Tensor[(2145), float32] */;
  %478 = @func_3830(%477) /* ty=(Tensor[(5, 12, 9), float32], float32, Tensor[(2145), float32], Tensor[(7, 10, 12), bool], Tensor[(1, 840), int16], Tensor[(13, 7, 8), float32], Tensor[(728), int64], Tensor[(14, 9, 13), float32], Tensor[(1638), float64]) */;
  %479 = less_equal(%461, %462) /* ty=Tensor[(5, 12, 9), bool] */;
  %480 = sqrt(%468) /* ty=Tensor[(5, 12, 9), float64] */;
  %481 = %473.2;
  %482 = sin(%475) /* ty=Tensor[(5, 3, 7), float64] */;
  %483 = %478.7;
  (%479, %480, %481, meta[relay.Constant][34] /* ty=Tensor[(300), float64] */, meta[relay.Constant][35] /* ty=Tensor[(2145), float32] */, %482, %483)
}

def @func_4369(%var_4361: Tensor[(3, 1, 5), int32], %var_4362: Tensor[(3, 13, 5), int32]) -> (Tensor[(3, 13, 5), int32], Tensor[(5, 3, 7), float64]) {
  %484 = cast(%var_4361, dtype="int32") /* ty=Tensor[(3, 1, 5), int32] */;
  %485 = cast(%var_4362, dtype="int32") /* ty=Tensor[(3, 13, 5), int32] */;
  %486 = @func_4075() /* ty=(Tensor[(5, 3, 7), float64],) */;
  %487 = bitwise_or(%484, %485) /* ty=Tensor[(3, 13, 5), int32] */;
  %488 = %486.0;
  (%487, %488)
}

def @func_4184() -> (Tensor[(5, 12, 9), float32], Tensor[(12, 10, 15), float32], float32, Tensor[(2145), float32]) {
  %489 = cast(-4.75688f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %490 = cast(meta[relay.Constant][36] /* ty=Tensor[(2145), float32] */, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %491 = reshape(%489, newshape=[]) /* ty=float32 */;
  %492 = reshape(%490, newshape=[2145]) /* ty=Tensor[(2145), float32] */;
  %493 = @func_1491(%491, %492) /* ty=(Tensor[(12, 10, 15), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(14, 9, 13), float32], float32, Tensor[(2145), float32]) */;
  %494 = @func_3462() /* ty=Tensor[(5, 12, 9), float32] */;
  %495 = %493.0;
  (%494, %495, -4.75688f /* ty=float32 */, meta[relay.Constant][36] /* ty=Tensor[(2145), float32] */)
}

def @func_6184(%var_6174: Tensor[(11, 15, 13), uint32], %var_6175: Tensor[(11, 15, 13), uint32]) -> (Tensor[(11, 15, 13), bool], Tensor[(924), bool], Tensor[(924), bool]) {
  %496 = cast(%var_6175, dtype="bool") /* ty=Tensor[(11, 15, 13), bool] */;
  %497 = shape_of(%var_6174, dtype="int32") /* ty=Tensor[(3), int32] */;
  %498 = cast(%var_6174, dtype="bool") /* ty=Tensor[(11, 15, 13), bool] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %500 = cast(meta[relay.Constant][37] /* ty=Tensor[(924), bool] */, dtype="bool") /* ty=Tensor[(924), bool] */;
  %501 = reshape(%500, newshape=[924]) /* ty=Tensor[(924), bool] */;
  %502 = @func_5942(%501) /* ty=(Tensor[(5, 12, 9), float32], Tensor[(5, 12, 9), float64], Tensor[(924), bool]) */;
  %503 = greater_equal(%498, %499) /* ty=Tensor[(11, 15, 13), bool] */;
  %504 = %502.2;
  (%503, %504, meta[relay.Constant][37] /* ty=Tensor[(924), bool] */)
}

def @func_6388() -> Tensor[(5, 12, 9), float64] {
  @func_3397() /* ty=Tensor[(5, 12, 9), float64] */
}

def @func_5423() -> (Tensor[(5, 3, 7), float64],) {
  %505 = @func_5332() /* ty=(Tensor[(5, 3, 7), float64],) */;
  %506 = %505.0;
  %507 = cast(%506, dtype="float64") /* ty=Tensor[(5, 3, 7), float64] */;
  %508 = sigmoid(%507) /* ty=Tensor[(5, 3, 7), float64] */;
  (%508,)
}

def @func_1019(%var_1006: Tensor[(9, 4, 12), float32]) -> (Tensor[(9, 4, 12), float32],) {
  %509 = cast(%var_1006, dtype="float32") /* ty=Tensor[(9, 4, 12), float32] */;
  %510 = atan(%509) /* ty=Tensor[(9, 4, 12), float32] */;
  (%510,)
}

def @func_3583(%var_3577: Tensor[(7, 10, 12), int16], %var_3578: Tensor[(7, 10, 12), int16]) -> (Tensor[(7, 10, 12), bool],) {
  %511 = cast(%var_3578, dtype="bool") /* ty=Tensor[(7, 10, 12), bool] */;
  %512 = shape_of(%var_3577, dtype="int32") /* ty=Tensor[(3), int32] */;
  %513 = cast(%var_3577, dtype="bool") /* ty=Tensor[(7, 10, 12), bool] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %515 = equal(%513, %514) /* ty=Tensor[(7, 10, 12), bool] */;
  (%515,)
}

def @func_4047(%var_4042: Tensor[(5, 3, 7), float64]) -> (Tensor[(5, 3, 7), bool],) {
  %516 = @func_3971() /* ty=Tensor[(5, 3, 7), float64] */;
  %517 = cast(%var_4042, dtype="bool") /* ty=Tensor[(5, 3, 7), bool] */;
  %518 = shape_of(%516, dtype="int32") /* ty=Tensor[(3), int32] */;
  %519 = cast(%516, dtype="bool") /* ty=Tensor[(5, 3, 7), bool] */;
  %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %521 = greater_equal(%519, %520) /* ty=Tensor[(5, 3, 7), bool] */;
  (%521,)
}

def @func_3554() -> Tensor[(5, 12, 9), float32] {
  @func_3462() /* ty=Tensor[(5, 12, 9), float32] */
}

def @func_6041() -> Tensor[(5, 12, 9), float64] {
  @func_3433() /* ty=Tensor[(5, 12, 9), float64] */
}

def @func_5370(%var_5342: Tensor[(2, 15, 9), bool], %var_5343: Tensor[(2, 15, 9), bool], %var_5365: float32, %var_5367: Tensor[(1100), uint32]) -> (Tensor[(2, 15, 9), bool], Tensor[(2, 15, 9), float64], Tensor[(432), float32], Tensor[(2640), float32], float32, Tensor[(2145), float32], Tensor[(1100), uint32]) {
  %522 = cast(%var_5343, dtype="bool") /* ty=Tensor[(2, 15, 9), bool] */;
  %523 = shape_of(%var_5342, dtype="int32") /* ty=Tensor[(3), int32] */;
  %524 = cast(%var_5342, dtype="bool") /* ty=Tensor[(2, 15, 9), bool] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %526 = cast(%var_5343, dtype="float64") /* ty=Tensor[(2, 15, 9), float64] */;
  %527 = shape_of(%var_5342, dtype="int32") /* ty=Tensor[(3), int32] */;
  %528 = cast(%var_5342, dtype="float64") /* ty=Tensor[(2, 15, 9), float64] */;
  %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %530 = cast(meta[relay.Constant][38] /* ty=Tensor[(2640), float32] */, dtype="float32") /* ty=Tensor[(2640), float32] */;
  %531 = cast(%var_5365, dtype="float32") /* ty=float32 */;
  %532 = cast(meta[relay.Constant][39] /* ty=Tensor[(2145), float32] */, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %533 = cast(%var_5367, dtype="uint32") /* ty=Tensor[(1100), uint32] */;
  %534 = reshape(%530, newshape=[15, 11, 16]) /* ty=Tensor[(15, 11, 16), float32] */;
  %535 = reshape(%531, newshape=[]) /* ty=float32 */;
  %536 = reshape(%532, newshape=[1, 2145]) /* ty=Tensor[(1, 2145), float32] */;
  %537 = reshape(%533, newshape=[1100]) /* ty=Tensor[(1100), uint32] */;
  %538 = @func_2946(%534, %535, %536, %537) /* ty=(Tensor[(15, 11, 16), uint32], Tensor[(13, 3, 11), float32], Tensor[(429), float64], Tensor[(640), int16], Tensor[(432), float32], float32, Tensor[(1, 2145), float32], Tensor[(11, 10, 10), bool], Tensor[(1100), uint32]) */;
  %539 = logical_or(%524, %525) /* ty=Tensor[(2, 15, 9), bool] */;
  %540 = floor_mod(%528, %529) /* ty=Tensor[(2, 15, 9), float64] */;
  %541 = %538.4;
  (%539, %540, %541, meta[relay.Constant][38] /* ty=Tensor[(2640), float32] */, %var_5365, meta[relay.Constant][39] /* ty=Tensor[(2145), float32] */, %var_5367)
}

def @func_5332() -> (Tensor[(5, 3, 7), float64],) {
  %542 = @func_3971() /* ty=Tensor[(5, 3, 7), float64] */;
  (%542,)
}

def @func_4275() -> (Tensor[(5, 3, 7), float64], Tensor[(5, 3, 7), bool], Tensor[(5, 12, 9), float64]) {
  %543 = @func_4111() /* ty=(Tensor[(5, 3, 7), float64],) */;
  %544 = %543.0;
  %545 = cast(%544, dtype="float64") /* ty=Tensor[(5, 3, 7), float64] */;
  %546 = reshape(%545, newshape=[5, 3, 7]) /* ty=Tensor[(5, 3, 7), float64] */;
  %547 = @func_4047(%546) /* ty=(Tensor[(5, 3, 7), bool],) */;
  %548 = %547.0;
  %549 = @func_3397() /* ty=Tensor[(5, 12, 9), float64] */;
  (%544, %548, %549)
}

def @func_4075() -> (Tensor[(5, 3, 7), float64],) {
  %550 = @func_3939() /* ty=Tensor[(5, 3, 7), float64] */;
  (%550,)
}

def @func_1844(%var_1838: Tensor[(1638), float32]) -> (Tensor[(2, 5, 14), float64], Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(2, 5, 14), uint64]) {
  %551 = cast(meta[relay.Constant][40] /* ty=Tensor[(2, 5, 14), float32] */, dtype="float64") /* ty=Tensor[(2, 5, 14), float64] */;
  %552 = cast(%var_1838, dtype="float32") /* ty=Tensor[(1638), float32] */;
  %553 = reshape(%552, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float32] */;
  %554 = cast(meta[relay.Constant][40] /* ty=Tensor[(2, 5, 14), float32] */, dtype="float32") /* ty=Tensor[(2, 5, 14), float32] */;
  %555 = log10(%554) /* ty=Tensor[(2, 5, 14), float32] */;
  %556 = cast(%555, dtype="float32") /* ty=Tensor[(2, 5, 14), float32] */;
  %557 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(2, 5, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %558 = cast(meta[relay.Constant][40] /* ty=Tensor[(2, 5, 14), float32] */, dtype="float32") /* ty=Tensor[(2, 5, 14), float32] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %560 = subtract(%558, %559) /* ty=Tensor[(2, 5, 14), float32] */;
  %561 = cast(%560, dtype="uint64") /* ty=Tensor[(2, 5, 14), uint64] */;
  %562 = shape_of(%555, dtype="int32") /* ty=Tensor[(3), int32] */;
  %563 = cast(%555, dtype="uint64") /* ty=Tensor[(2, 5, 14), uint64] */;
  %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %565 = atanh(%551) /* ty=Tensor[(2, 5, 14), float64] */;
  %566 = @func_418(%553) /* ty=Tensor[(14, 9, 13), float32] */;
  %567 = bitwise_and(%563, %564) /* ty=Tensor[(2, 5, 14), uint64] */;
  (%565, %566, %var_1838, %567)
}

def @func_4732() -> (Tensor[(5, 3, 7), float64],) {
  %568 = @func_3939() /* ty=Tensor[(5, 3, 7), float64] */;
  %569 = cast(%568, dtype="float64") /* ty=Tensor[(5, 3, 7), float64] */;
  %570 = asinh(%569) /* ty=Tensor[(5, 3, 7), float64] */;
  (%570,)
}

def @func_3971() -> Tensor[(5, 3, 7), float64] {
  @func_3939() /* ty=Tensor[(5, 3, 7), float64] */
}

def @func_4613() -> Tensor[(5, 12, 9), float32] {
  @func_3462() /* ty=Tensor[(5, 12, 9), float32] */
}

def @func_1062(%var_1057: Tensor[(11, 10, 10), uint32], %var_1058: Tensor[(11, 10, 10), uint32]) -> Tensor[(11, 10, 10), bool] {
  %571 = cast(%var_1058, dtype="bool") /* ty=Tensor[(11, 10, 10), bool] */;
  %572 = shape_of(%var_1057, dtype="int32") /* ty=Tensor[(3), int32] */;
  %573 = cast(%var_1057, dtype="bool") /* ty=Tensor[(11, 10, 10), bool] */;
  %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%573, %574) /* ty=Tensor[(11, 10, 10), bool] */
}

def @func_6598(%var_6596: Tensor[(4, 180), float32]) -> (Tensor[(5, 12, 9), float32], Tensor[(5, 12, 9), float64], Tensor[(15, 4, 12), float32], Tensor[(4, 180), float32]) {
  %575 = @func_3329() /* ty=(Tensor[(5, 12, 9), float64], Tensor[(5, 12, 9), float32]) */;
  %576 = @func_4484() /* ty=(Tensor[(5, 12, 9), float64],) */;
  %577 = cast(%var_6596, dtype="float32") /* ty=Tensor[(4, 180), float32] */;
  %578 = reshape(%577, newshape=[15, 4, 12]) /* ty=Tensor[(15, 4, 12), float32] */;
  %579 = @func_6020(%578) /* ty=(Tensor[(15, 4, 12), float32],) */;
  %580 = %575.1;
  %581 = %576.0;
  %582 = %579.0;
  (%580, %581, %582, %var_6596)
}

def @func_5942(%var_5940: Tensor[(924), bool]) -> (Tensor[(5, 12, 9), float32], Tensor[(5, 12, 9), float64], Tensor[(924), bool]) {
  %583 = cast(%var_5940, dtype="bool") /* ty=Tensor[(924), bool] */;
  %584 = cast(%var_5940, dtype="bool") /* ty=Tensor[(924), bool] */;
  %585 = reshape(%583, newshape=[6, 14, 11]) /* ty=Tensor[(6, 14, 11), bool] */;
  %586 = reshape(%584, newshape=[6, 14, 11]) /* ty=Tensor[(6, 14, 11), bool] */;
  %587 = @func_4930(%585, %586) /* ty=(Tensor[(6, 14, 11), bool], Tensor[(6, 14, 11), float64], Tensor[(5, 12, 9), float64], Tensor[(5, 12, 9), float64], Tensor[(5, 3, 7), float64]) */;
  %588 = @func_4144() /* ty=Tensor[(5, 12, 9), float32] */;
  %589 = %587.2;
  (%588, %589, %var_5940)
}

def @func_4514(%var_4507: Tensor[(5, 12, 9), float64]) -> Tensor[(5, 12, 9), bool] {
  %590 = @func_4232() /* ty=Tensor[(5, 12, 9), float64] */;
  %591 = cast(%var_4507, dtype="bool") /* ty=Tensor[(5, 12, 9), bool] */;
  %592 = shape_of(%590, dtype="int32") /* ty=Tensor[(3), int32] */;
  %593 = cast(%590, dtype="bool") /* ty=Tensor[(5, 12, 9), bool] */;
  %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%593, %594) /* ty=Tensor[(5, 12, 9), bool] */
}

def @func_5407() -> Tensor[(5, 12, 9), float32] {
  @func_4144() /* ty=Tensor[(5, 12, 9), float32] */
}

def @func_418(%var_401: Tensor[(14, 9, 13), float32]) -> Tensor[(14, 9, 13), float32] {
  %595 = cast(%var_401, dtype="float32") /* ty=Tensor[(14, 9, 13), float32] */;
  %596 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(14, 9, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %597 = cast(meta[relay.Constant][41] /* ty=Tensor[(14, 9, 13), float32] */, dtype="float32") /* ty=Tensor[(14, 9, 13), float32] */;
  %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%597, %598) /* ty=Tensor[(14, 9, 13), float32] */
}

def @func_5933() -> (Tensor[(5, 12, 9), bool],) {
  %599 = @func_3329() /* ty=(Tensor[(5, 12, 9), float64], Tensor[(5, 12, 9), float32]) */;
  %600 = %599.1;
  %601 = cast(meta[relay.Constant][42] /* ty=Tensor[(5, 12, 9), float32] */, dtype="bool") /* ty=Tensor[(5, 12, 9), bool] */;
  %602 = shape_of(%600, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%600, dtype="bool") /* ty=Tensor[(5, 12, 9), bool] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %605 = greater_equal(%603, %604) /* ty=Tensor[(5, 12, 9), bool] */;
  (%605,)
}

def @func_4680(%var_4640: Tensor[(2145), float32], %var_4649: Tensor[(693), int32]) -> (Tensor[(5, 3, 7), float64], Tensor[(143, 15), float32], Tensor[(2145), float32], Tensor[(693), uint16], Tensor[(5, 12, 9), float64], Tensor[(5, 12, 9), float32], Tensor[(5, 3, 7), float64]) {
  %606 = cast(meta[relay.Constant][43] /* ty=Tensor[(693), int32] */, dtype="int32") /* ty=Tensor[(693), int32] */;
  %607 = cast(meta[relay.Constant][43] /* ty=Tensor[(693), int32] */, dtype="int32") /* ty=Tensor[(693), int32] */;
  %608 = cast(%var_4640, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %609 = reshape(%606, newshape=[11, 7, 9]) /* ty=Tensor[(11, 7, 9), int32] */;
  %610 = reshape(%607, newshape=[11, 7, 9]) /* ty=Tensor[(11, 7, 9), int32] */;
  %611 = reshape(%608, newshape=[143, 15]) /* ty=Tensor[(143, 15), float32] */;
  %612 = @func_1744(%609, %610, %611) /* ty=(Tensor[(11, 7, 9), int32], float32, float32, Tensor[(143, 15), float32]) */;
  %613 = cast(%var_4649, dtype="uint16") /* ty=Tensor[(693), uint16] */;
  %614 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(693), int32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %615 = cast(meta[relay.Constant][43] /* ty=Tensor[(693), int32] */, dtype="uint16") /* ty=Tensor[(693), uint16] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %617 = @func_3990() /* ty=(Tensor[(5, 12, 9), float64],) */;
  %618 = @func_4548() /* ty=(Tensor[(5, 3, 7), float64],) */;
  %619 = @func_3971() /* ty=Tensor[(5, 3, 7), float64] */;
  %620 = %612.3;
  %621 = maximum(%615, %616) /* ty=Tensor[(693), uint16] */;
  %622 = %617.0;
  %623 = @func_3554() /* ty=Tensor[(5, 12, 9), float32] */;
  %624 = %618.0;
  (%619, %620, %var_4640, %621, %622, %623, %624)
}

def @func_5510() -> (Tensor[(5, 12, 9), float64],) {
  %625 = @func_3397() /* ty=Tensor[(5, 12, 9), float64] */;
  (%625,)
}

def @func_1744(%var_1724: Tensor[(11, 7, 9), int32], %var_1725: Tensor[(11, 7, 9), int32], %var_1737: Tensor[(143, 15), float32]) -> (Tensor[(11, 7, 9), int32], float32, float32, Tensor[(143, 15), float32]) {
  %626 = cast(%var_1725, dtype="int32") /* ty=Tensor[(11, 7, 9), int32] */;
  %627 = shape_of(%var_1724, dtype="int32") /* ty=Tensor[(3), int32] */;
  %628 = cast(%var_1724, dtype="int32") /* ty=Tensor[(11, 7, 9), int32] */;
  %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %630 = cast(7.9287f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %631 = cast(%var_1737, dtype="float32") /* ty=Tensor[(143, 15), float32] */;
  %632 = reshape(%630, newshape=[]) /* ty=float32 */;
  %633 = reshape(%631, newshape=[2145]) /* ty=Tensor[(2145), float32] */;
  %634 = @func_1491(%632, %633) /* ty=(Tensor[(12, 10, 15), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(14, 9, 13), float32], float32, Tensor[(2145), float32]) */;
  %635 = logical_xor(%628, %629) /* ty=Tensor[(11, 7, 9), int32] */;
  %636 = %634.4;
  (%635, %636, 7.9287f /* ty=float32 */, %var_1737)
}

def @func_4484() -> (Tensor[(5, 12, 9), float64],) {
  %637 = @func_3433() /* ty=Tensor[(5, 12, 9), float64] */;
  (%637,)
}

def @func_6769() -> (Tensor[(5, 12, 9), float64],) {
  %638 = @func_3990() /* ty=(Tensor[(5, 12, 9), float64],) */;
  %639 = %638.0;
  %640 = cast(%639, dtype="float64") /* ty=Tensor[(5, 12, 9), float64] */;
  %641 = cos(%640) /* ty=Tensor[(5, 12, 9), float64] */;
  (%641,)
}

def @func_5277(%var_5220: Tensor[(15, 7, 2), float64], %var_5250: Tensor[(384), float32]) -> (Tensor[(5, 3, 7), float64], Tensor[(3, 8, 16), bool], Tensor[(384), float32], Tensor[(5, 12, 9), float64], Tensor[(15, 7, 2), float32]) {
  %642 = @func_4275() /* ty=(Tensor[(5, 3, 7), float64], Tensor[(5, 3, 7), bool], Tensor[(5, 12, 9), float64]) */;
  %643 = cast(%var_5250, dtype="float32") /* ty=Tensor[(384), float32] */;
  %644 = reshape(%643, newshape=[3, 8, 16]) /* ty=Tensor[(3, 8, 16), float32] */;
  %645 = @func_2585(%644) /* ty=(Tensor[(3, 8, 16), bool],) */;
  %646 = @func_3990() /* ty=(Tensor[(5, 12, 9), float64],) */;
  %647 = cast(%var_5220, dtype="float64") /* ty=Tensor[(15, 7, 2), float64] */;
  %648 = sin(%647) /* ty=Tensor[(15, 7, 2), float64] */;
  %649 = cast(%var_5220, dtype="float32") /* ty=Tensor[(15, 7, 2), float32] */;
  %650 = tan(%649) /* ty=Tensor[(15, 7, 2), float32] */;
  %651 = cast(%650, dtype="float32") /* ty=Tensor[(15, 7, 2), float32] */;
  %652 = shape_of(%648, dtype="int32") /* ty=Tensor[(3), int32] */;
  %653 = cast(%648, dtype="float32") /* ty=Tensor[(15, 7, 2), float32] */;
  %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %655 = %642.0;
  %656 = %645.0;
  %657 = %646.0;
  %658 = add(%653, %654) /* ty=Tensor[(15, 7, 2), float32] */;
  (%655, %656, %var_5250, %657, %658)
}

def @func_2343(%var_2329: Tensor[(8, 5, 16), int16], %var_2330: Tensor[(8, 5, 16), int16]) -> Tensor[(8, 5, 16), int16] {
  %659 = cast(%var_2330, dtype="int16") /* ty=Tensor[(8, 5, 16), int16] */;
  %660 = shape_of(%var_2329, dtype="int32") /* ty=Tensor[(3), int32] */;
  %661 = cast(%var_2329, dtype="int16") /* ty=Tensor[(8, 5, 16), int16] */;
  %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  minimum(%661, %662) /* ty=Tensor[(8, 5, 16), int16] */
}

def @func_3921(%var_3898: Tensor[(12, 12, 6), float32], %var_3905: Tensor[(40, 16), int16]) -> (Tensor[(12, 12, 6), float32], Tensor[(8, 5, 16), int16], Tensor[(40, 16), int16], Tensor[(5, 12, 9), float32]) {
  %663 = cast(%var_3898, dtype="float32") /* ty=Tensor[(12, 12, 6), float32] */;
  %664 = cast(%var_3905, dtype="int16") /* ty=Tensor[(40, 16), int16] */;
  %665 = cast(%var_3905, dtype="int16") /* ty=Tensor[(40, 16), int16] */;
  %666 = reshape(%664, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), int16] */;
  %667 = reshape(%665, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), int16] */;
  %668 = acosh(%663) /* ty=Tensor[(12, 12, 6), float32] */;
  %669 = @func_2343(%666, %667) /* ty=Tensor[(8, 5, 16), int16] */;
  %670 = @func_3462() /* ty=Tensor[(5, 12, 9), float32] */;
  (%668, %669, %var_3905, %670)
}

def @func_4016(%var_3996: int32) -> (Tensor[(15, 10, 3), int32],) {
  %671 = cast(%var_3996, dtype="int32") /* ty=int32 */;
  %672 = cast(meta[relay.Constant][44] /* ty=Tensor[(15, 10, 3), int32] */, dtype="int32") /* ty=Tensor[(15, 10, 3), int32] */;
  %673 = bitwise_and(%671, %672) /* ty=Tensor[(15, 10, 3), int32] */;
  (%673,)
}

def @func_6141(%var_6087: Tensor[(2145), float32], %var_6117: float32) -> (Tensor[(5, 12, 9), float64], Tensor[(2145), float32], Tensor[(300), float64], Tensor[(2145), float32], Tensor[(13, 7, 8), int8], Tensor[(728), int64], Tensor[(5, 12, 9), int16], Tensor[(1100), uint32], Tensor[(270), bool], float32, Tensor[(1100), uint32], Tensor[(5, 12, 9), float64]) {
  %674 = @func_4275() /* ty=(Tensor[(5, 3, 7), float64], Tensor[(5, 3, 7), bool], Tensor[(5, 12, 9), float64]) */;
  %675 = cast(meta[relay.Constant][45] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %676 = cast(%var_6087, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %677 = reshape(%675, newshape=[4, 5, 15]) /* ty=Tensor[(4, 5, 15), float64] */;
  %678 = reshape(%676, newshape=[2145]) /* ty=Tensor[(2145), float32] */;
  %679 = @func_2003(%677, %678) /* ty=(Tensor[(1638), float32], Tensor[(2145), float32], Tensor[(4, 5, 15), int32], Tensor[(5, 12), uint32], Tensor[(2145), uint16]) */;
  %680 = cast(meta[relay.Constant][46] /* ty=Tensor[(728), int64] */, dtype="int64") /* ty=Tensor[(728), int64] */;
  %681 = reshape(%680, newshape=[13, 7, 8]) /* ty=Tensor[(13, 7, 8), int64] */;
  %682 = @func_2303(%681) /* ty=(Tensor[(13, 7, 8), bool], Tensor[(13, 7, 8), int8], Tensor[(13, 7, 8), float32], float32, Tensor[(693), int32], Tensor[(2145), float32], Tensor[(13, 7, 8), float32]) */;
  %683 = %674.2;
  %684 = cast(%683, dtype="float64") /* ty=Tensor[(5, 12, 9), float64] */;
  %685 = reshape(%684, newshape=[5, 12, 9]) /* ty=Tensor[(5, 12, 9), float64] */;
  %686 = @func_4093(%685) /* ty=(Tensor[(5, 12, 9), int16],) */;
  %687 = cast(meta[relay.Constant][47] /* ty=Tensor[(270), bool] */, dtype="bool") /* ty=Tensor[(270), bool] */;
  %688 = cast(meta[relay.Constant][47] /* ty=Tensor[(270), bool] */, dtype="bool") /* ty=Tensor[(270), bool] */;
  %689 = cast(%var_6117, dtype="float32") /* ty=float32 */;
  %690 = cast(meta[relay.Constant][48] /* ty=Tensor[(1100), uint32] */, dtype="uint32") /* ty=Tensor[(1100), uint32] */;
  %691 = reshape(%687, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), bool] */;
  %692 = reshape(%688, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), bool] */;
  %693 = reshape(%689, newshape=[]) /* ty=float32 */;
  %694 = reshape(%690, newshape=[1100]) /* ty=Tensor[(1100), uint32] */;
  %695 = @func_5370(%691, %692, %693, %694) /* ty=(Tensor[(2, 15, 9), bool], Tensor[(2, 15, 9), float64], Tensor[(432), float32], Tensor[(2640), float32], float32, Tensor[(2145), float32], Tensor[(1100), uint32]) */;
  %696 = @func_4275() /* ty=(Tensor[(5, 3, 7), float64], Tensor[(5, 3, 7), bool], Tensor[(5, 12, 9), float64]) */;
  %697 = %679.1;
  %698 = %682.1;
  %699 = %686.0;
  %700 = %695.6;
  %701 = %696.2;
  (%683, %697, meta[relay.Constant][45] /* ty=Tensor[(300), float64] */, %var_6087, %698, meta[relay.Constant][46] /* ty=Tensor[(728), int64] */, %699, %700, meta[relay.Constant][47] /* ty=Tensor[(270), bool] */, %var_6117, meta[relay.Constant][48] /* ty=Tensor[(1100), uint32] */, %701)
}

def @func_3939() -> Tensor[(5, 3, 7), float64] {
  %702 = cast(meta[relay.Constant][49] /* ty=Tensor[(5, 3, 7), float32] */, dtype="float32") /* ty=Tensor[(5, 3, 7), float32] */;
  %703 = acosh(%702) /* ty=Tensor[(5, 3, 7), float32] */;
  %704 = cast(%703, dtype="float64") /* ty=Tensor[(5, 3, 7), float64] */;
  erf(%704) /* ty=Tensor[(5, 3, 7), float64] */
}

def @func_4566(%var_4555: Tensor[(13, 16, 10), float32]) -> (Tensor[(13, 16, 10), float32], Tensor[(5, 12, 9), float64]) {
  %705 = cast(%var_4555, dtype="float32") /* ty=Tensor[(13, 16, 10), float32] */;
  %706 = @func_3329() /* ty=(Tensor[(5, 12, 9), float64], Tensor[(5, 12, 9), float32]) */;
  %707 = acosh(%705) /* ty=Tensor[(13, 16, 10), float32] */;
  %708 = %706.0;
  (%707, %708)
}

def @func_2303(%var_2241: Tensor[(13, 7, 8), int64]) -> (Tensor[(13, 7, 8), bool], Tensor[(13, 7, 8), int8], Tensor[(13, 7, 8), float32], float32, Tensor[(693), int32], Tensor[(2145), float32], Tensor[(13, 7, 8), float32]) {
  %709 = cast(meta[relay.Constant][50] /* ty=Tensor[(13, 7, 8), int64] */, dtype="int64") /* ty=Tensor[(13, 7, 8), int64] */;
  %710 = shape_of(%var_2241, dtype="int32") /* ty=Tensor[(3), int32] */;
  %711 = cast(%var_2241, dtype="int64") /* ty=Tensor[(13, 7, 8), int64] */;
  %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %713 = maximum(%711, %712) /* ty=Tensor[(13, 7, 8), int64] */;
  %714 = cast(%713, dtype="bool") /* ty=Tensor[(13, 7, 8), bool] */;
  %715 = shape_of(meta[relay.Constant][50] /* ty=Tensor[(13, 7, 8), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %716 = cast(meta[relay.Constant][50] /* ty=Tensor[(13, 7, 8), int64] */, dtype="bool") /* ty=Tensor[(13, 7, 8), bool] */;
  %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %718 = cast(%var_2241, dtype="int8") /* ty=Tensor[(13, 7, 8), int8] */;
  %719 = shape_of(%713, dtype="int32") /* ty=Tensor[(3), int32] */;
  %720 = cast(%713, dtype="int8") /* ty=Tensor[(13, 7, 8), int8] */;
  %721 = dyn.reshape(%718, %719, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %722 = cast(%713, dtype="float32") /* ty=Tensor[(13, 7, 8), float32] */;
  %723 = cast(meta[relay.Constant][51] /* ty=Tensor[(693), int32] */, dtype="int32") /* ty=Tensor[(693), int32] */;
  %724 = cast(meta[relay.Constant][51] /* ty=Tensor[(693), int32] */, dtype="int32") /* ty=Tensor[(693), int32] */;
  %725 = cast(meta[relay.Constant][52] /* ty=Tensor[(2145), float32] */, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %726 = reshape(%723, newshape=[11, 7, 9]) /* ty=Tensor[(11, 7, 9), int32] */;
  %727 = reshape(%724, newshape=[11, 7, 9]) /* ty=Tensor[(11, 7, 9), int32] */;
  %728 = reshape(%725, newshape=[143, 15]) /* ty=Tensor[(143, 15), float32] */;
  %729 = @func_1744(%726, %727, %728) /* ty=(Tensor[(11, 7, 9), int32], float32, float32, Tensor[(143, 15), float32]) */;
  %730 = cast(%713, dtype="float32") /* ty=Tensor[(13, 7, 8), float32] */;
  %731 = shape_of(meta[relay.Constant][50] /* ty=Tensor[(13, 7, 8), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %732 = cast(meta[relay.Constant][50] /* ty=Tensor[(13, 7, 8), int64] */, dtype="float32") /* ty=Tensor[(13, 7, 8), float32] */;
  %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %734 = logical_or(%716, %717) /* ty=Tensor[(13, 7, 8), bool] */;
  %735 = multiply(%720, %721) /* ty=Tensor[(13, 7, 8), int8] */;
  %736 = acosh(%722) /* ty=Tensor[(13, 7, 8), float32] */;
  %737 = %729.1;
  %738 = power(%732, %733) /* ty=Tensor[(13, 7, 8), float32] */;
  (%734, %735, %736, %737, meta[relay.Constant][51] /* ty=Tensor[(693), int32] */, meta[relay.Constant][52] /* ty=Tensor[(2145), float32] */, %738)
}

def @func_5619() -> Tensor[(5, 3, 7), float64] {
  %739 = @func_4111() /* ty=(Tensor[(5, 3, 7), float64],) */;
  %740 = %739.0;
  %741 = cast(%740, dtype="float64") /* ty=Tensor[(5, 3, 7), float64] */;
  log(%741) /* ty=Tensor[(5, 3, 7), float64] */
}

def @func_6212(%var_6210: Tensor[(1170), float32]) -> (Tensor[(5, 12, 9), float64], Tensor[(10, 13, 9), float32], Tensor[(1170), float32]) {
  %742 = @func_4484() /* ty=(Tensor[(5, 12, 9), float64],) */;
  %743 = cast(%var_6210, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %744 = reshape(%743, newshape=[10, 13, 9]) /* ty=Tensor[(10, 13, 9), float32] */;
  %745 = %742.0;
  %746 = @func_4741(%744) /* ty=Tensor[(10, 13, 9), float32] */;
  (%745, %746, %var_6210)
}

def @func_6497() -> Tensor[(5, 3, 7), float64] {
  %747 = @func_4075() /* ty=(Tensor[(5, 3, 7), float64],) */;
  %747.0
}

def @func_5197(%var_5156: Tensor[(10, 14, 3), bool], %var_5157: Tensor[(10, 14, 3), bool], %var_5168: Tensor[(840), int16]) -> (Tensor[(5, 3, 7), float64], Tensor[(7, 10, 12), bool], Tensor[(840), int16], Tensor[(5, 12, 9), float64], Tensor[(10, 14, 3), float64]) {
  %748 = @func_4075() /* ty=(Tensor[(5, 3, 7), float64],) */;
  %749 = cast(%var_5168, dtype="int16") /* ty=Tensor[(840), int16] */;
  %750 = cast(%var_5168, dtype="int16") /* ty=Tensor[(840), int16] */;
  %751 = reshape(%749, newshape=[7, 10, 12]) /* ty=Tensor[(7, 10, 12), int16] */;
  %752 = reshape(%750, newshape=[7, 10, 12]) /* ty=Tensor[(7, 10, 12), int16] */;
  %753 = @func_3583(%751, %752) /* ty=(Tensor[(7, 10, 12), bool],) */;
  %754 = @func_3990() /* ty=(Tensor[(5, 12, 9), float64],) */;
  %755 = cast(%var_5157, dtype="bool") /* ty=Tensor[(10, 14, 3), bool] */;
  %756 = shape_of(%var_5156, dtype="int32") /* ty=Tensor[(3), int32] */;
  %757 = cast(%var_5156, dtype="bool") /* ty=Tensor[(10, 14, 3), bool] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %759 = logical_and(%757, %758) /* ty=Tensor[(10, 14, 3), bool] */;
  %760 = cast(%var_5157, dtype="float64") /* ty=Tensor[(10, 14, 3), float64] */;
  %761 = shape_of(%759, dtype="int32") /* ty=Tensor[(3), int32] */;
  %762 = cast(%759, dtype="float64") /* ty=Tensor[(10, 14, 3), float64] */;
  %763 = dyn.reshape(%760, %761, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %764 = %748.0;
  %765 = %753.0;
  %766 = %754.0;
  %767 = floor_divide(%762, %763) /* ty=Tensor[(10, 14, 3), float64] */;
  (%764, %765, %var_5168, %766, %767)
}

def @func_6308() -> (Tensor[(5, 3, 7), bool], Tensor[(5, 3, 7), float64]) {
  %768 = @func_4075() /* ty=(Tensor[(5, 3, 7), float64],) */;
  %769 = %768.0;
  %770 = cast(meta[relay.Constant][53] /* ty=Tensor[(5, 3, 7), float64] */, dtype="bool") /* ty=Tensor[(5, 3, 7), bool] */;
  %771 = shape_of(%769, dtype="int32") /* ty=Tensor[(3), int32] */;
  %772 = cast(%769, dtype="bool") /* ty=Tensor[(5, 3, 7), bool] */;
  %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %774 = cast(meta[relay.Constant][53] /* ty=Tensor[(5, 3, 7), float64] */, dtype="float64") /* ty=Tensor[(5, 3, 7), float64] */;
  %775 = logical_or(%772, %773) /* ty=Tensor[(5, 3, 7), bool] */;
  %776 = tan(%774) /* ty=Tensor[(5, 3, 7), float64] */;
  (%775, %776)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4369(%var_4361: Tensor[(3, 1, 5), int32], %var_4362: Tensor[(3, 13, 5), int32]) -> (Tensor[(3, 13, 5), int32], Tensor[(5, 3, 7), float64]) {
  %0 = cast(%var_4361, dtype="int32") /* ty=Tensor[(3, 1, 5), int32] */;
  %1 = cast(%var_4362, dtype="int32") /* ty=Tensor[(3, 13, 5), int32] */;
  %2 = @func_4075() /* ty=(Tensor[(5, 3, 7), float64],) */;
  %3 = bitwise_or(%0, %1) /* ty=Tensor[(3, 13, 5), int32] */;
  %4 = %2.0;
  (%3, %4)
}

def @func_6961(%var_6959: Tensor[(2, 3), float64], %var_6960: Tensor[(2, 3), float64]) -> (Tensor[(2, 3), float64],) {
  %10 = fn (%var_6939: Tensor[(2, 3), float64], %var_6940: Tensor[(2, 3), float64]) -> (Tensor[(2, 3), float64],) {
    %5 = cast(%var_6940, dtype="float64") /* ty=Tensor[(2, 3), float64] */;
    %6 = shape_of(%var_6939, dtype="int32") /* ty=Tensor[(2), int32] */;
    %7 = cast(%var_6939, dtype="float64") /* ty=Tensor[(2, 3), float64] */;
    %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %9 = maximum(%7, %8) /* ty=Tensor[(2, 3), float64] */;
    (%9,)
  };
  %10(%var_6959, %var_6960) /* ty=(Tensor[(2, 3), float64],) */
}

def @func_418(%var_401: Tensor[(14, 9, 13), float32]) -> Tensor[(14, 9, 13), float32] {
  %11 = cast(%var_401, dtype="float32") /* ty=Tensor[(14, 9, 13), float32] */;
  %12 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(14, 9, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %13 = cast(meta[relay.Constant][0] /* ty=Tensor[(14, 9, 13), float32] */, dtype="float32") /* ty=Tensor[(14, 9, 13), float32] */;
  %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%13, %14) /* ty=Tensor[(14, 9, 13), float32] */
}

def @func_4934(%var_4932: Tensor[(6, 14, 11), bool], %var_4933: Tensor[(6, 14, 11), bool]) -> (Tensor[(6, 14, 11), bool], Tensor[(6, 14, 11), float64], Tensor[(5, 12, 9), float64], Tensor[(5, 12, 9), float64], Tensor[(5, 3, 7), float64]) {
  @func_4930(%var_4932, %var_4933) /* ty=(Tensor[(6, 14, 11), bool], Tensor[(6, 14, 11), float64], Tensor[(5, 12, 9), float64], Tensor[(5, 12, 9), float64], Tensor[(5, 3, 7), float64]) */
}

def @func_4566(%var_4555: Tensor[(13, 16, 10), float32]) -> (Tensor[(13, 16, 10), float32], Tensor[(5, 12, 9), float64]) {
  %15 = cast(%var_4555, dtype="float32") /* ty=Tensor[(13, 16, 10), float32] */;
  %16 = @func_3329() /* ty=(Tensor[(5, 12, 9), float64], Tensor[(5, 12, 9), float32]) */;
  %17 = acosh(%15) /* ty=Tensor[(13, 16, 10), float32] */;
  %18 = %16.0;
  (%17, %18)
}

def @func_4741(%var_4737: Tensor[(10, 13, 9), float32]) -> Tensor[(10, 13, 9), float32] {
  %19 = cast(%var_4737, dtype="float32") /* ty=Tensor[(10, 13, 9), float32] */;
  tan(%19) /* ty=Tensor[(10, 13, 9), float32] */
}

def @func_6769() -> (Tensor[(5, 12, 9), float64],) {
  %20 = @func_3990() /* ty=(Tensor[(5, 12, 9), float64],) */;
  %21 = %20.0;
  %22 = cast(%21, dtype="float64") /* ty=Tensor[(5, 12, 9), float64] */;
  %23 = cos(%22) /* ty=Tensor[(5, 12, 9), float64] */;
  (%23,)
}

def @func_5334() -> (Tensor[(5, 3, 7), float64],) {
  @func_5332() /* ty=(Tensor[(5, 3, 7), float64],) */
}

def @func_3941() -> Tensor[(5, 3, 7), float64] {
  @func_3939() /* ty=Tensor[(5, 3, 7), float64] */
}

def @func_7098(%var_7076: Tensor[(6), float64], %var_7091: Tensor[(3, 7, 16), float32]) -> (Tensor[(15, 10, 3), int32], Tensor[(2, 3), float64], Tensor[(6), float64], Tensor[(3, 7, 16), float32]) {
  %24 = @func_4184() /* ty=(Tensor[(5, 12, 9), float32], Tensor[(12, 10, 15), float32], float32, Tensor[(2145), float32]) */;
  %25 = %24.2;
  %26 = cast(%25, dtype="int32") /* ty=int32 */;
  %27 = reshape(%26, newshape=[]) /* ty=int32 */;
  %28 = @func_4016(%27) /* ty=(Tensor[(15, 10, 3), int32],) */;
  %29 = cast(%var_7076, dtype="float64") /* ty=Tensor[(6), float64] */;
  %30 = cast(%var_7076, dtype="float64") /* ty=Tensor[(6), float64] */;
  %31 = reshape(%29, newshape=[2, 3]) /* ty=Tensor[(2, 3), float64] */;
  %32 = reshape(%30, newshape=[2, 3]) /* ty=Tensor[(2, 3), float64] */;
  %33 = @func_6958(%31, %32) /* ty=(Tensor[(2, 3), float64],) */;
  %34 = cast(%25, dtype="float32") /* ty=float32 */;
  %35 = cast(%var_7091, dtype="float32") /* ty=Tensor[(3, 7, 16), float32] */;
  %36 = %28.0;
  %37 = %33.0;
  %38 = mod(%34, %35) /* ty=Tensor[(3, 7, 16), float32] */;
  (%36, %37, %var_7076, %38)
}

def @func_4144() -> Tensor[(5, 12, 9), float32] {
  %39 = @func_3397() /* ty=Tensor[(5, 12, 9), float64] */;
  %40 = cast(%39, dtype="float32") /* ty=Tensor[(5, 12, 9), float32] */;
  acos(%40) /* ty=Tensor[(5, 12, 9), float32] */
}

def @func_4744(%var_4742: Tensor[(10, 13, 9), float32]) -> Tensor[(10, 13, 9), float32] {
  @func_4741(%var_4742) /* ty=Tensor[(10, 13, 9), float32] */
}

def @func_3462() -> Tensor[(5, 12, 9), float32] {
  %41 = @func_3329() /* ty=(Tensor[(5, 12, 9), float64], Tensor[(5, 12, 9), float32]) */;
  %41.1
}

def @func_2588(%var_2586: Tensor[(3, 8, 16), float32]) -> (Tensor[(3, 8, 16), bool],) {
  @func_2585(%var_2586) /* ty=(Tensor[(3, 8, 16), bool],) */
}

def @func_4615() -> Tensor[(5, 12, 9), float32] {
  @func_4613() /* ty=Tensor[(5, 12, 9), float32] */
}

def @func_7201() -> Tensor[(5, 3, 7), float64] {
  @func_7199() /* ty=Tensor[(5, 3, 7), float64] */
}

def @func_3464() -> Tensor[(5, 12, 9), float32] {
  @func_3462() /* ty=Tensor[(5, 12, 9), float32] */
}

def @func_3830(%var_3782: Tensor[(2145), float32]) -> (Tensor[(5, 12, 9), float32], float32, Tensor[(2145), float32], Tensor[(7, 10, 12), bool], Tensor[(1, 840), int16], Tensor[(13, 7, 8), float32], Tensor[(728), int64], Tensor[(14, 9, 13), float32], Tensor[(1638), float64]) {
  %42 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 840), int16] */, dtype="int16") /* ty=Tensor[(1, 840), int16] */;
  %43 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 840), int16] */, dtype="int16") /* ty=Tensor[(1, 840), int16] */;
  %44 = reshape(%42, newshape=[7, 10, 12]) /* ty=Tensor[(7, 10, 12), int16] */;
  %45 = reshape(%43, newshape=[7, 10, 12]) /* ty=Tensor[(7, 10, 12), int16] */;
  %46 = @func_3583(%44, %45) /* ty=(Tensor[(7, 10, 12), bool],) */;
  %47 = cast(meta[relay.Constant][2] /* ty=Tensor[(728), int64] */, dtype="int64") /* ty=Tensor[(728), int64] */;
  %48 = reshape(%47, newshape=[13, 7, 8]) /* ty=Tensor[(13, 7, 8), int64] */;
  %49 = @func_2303(%48) /* ty=(Tensor[(13, 7, 8), bool], Tensor[(13, 7, 8), int8], Tensor[(13, 7, 8), float32], float32, Tensor[(693), int32], Tensor[(2145), float32], Tensor[(13, 7, 8), float32]) */;
  %50 = cast(4.894f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %51 = cast(%var_3782, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %52 = reshape(%50, newshape=[]) /* ty=float32 */;
  %53 = reshape(%51, newshape=[2145]) /* ty=Tensor[(2145), float32] */;
  %54 = @func_1491(%52, %53) /* ty=(Tensor[(12, 10, 15), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(14, 9, 13), float32], float32, Tensor[(2145), float32]) */;
  %55 = cast(4.894f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %56 = cast(%var_3782, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %57 = reshape(%55, newshape=[]) /* ty=float32 */;
  %58 = reshape(%56, newshape=[13, 11, 15]) /* ty=Tensor[(13, 11, 15), float32] */;
  %59 = @func_665(%57, %58) /* ty=(Tensor[(13, 11, 15), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(14, 9, 13), float32]) */;
  %60 = %59.2;
  %61 = cast(%60, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %62 = cos(%61) /* ty=Tensor[(1638), float64] */;
  %63 = cast(%62, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %64 = @func_3462() /* ty=Tensor[(5, 12, 9), float32] */;
  %65 = %46.0;
  %66 = %49.2;
  %67 = %54.1;
  %68 = sigmoid(%63) /* ty=Tensor[(1638), float64] */;
  (%64, 4.894f /* ty=float32 */, %var_3782, %65, meta[relay.Constant][1] /* ty=Tensor[(1, 840), int16] */, %66, meta[relay.Constant][2] /* ty=Tensor[(728), int64] */, %67, %68)
}

def @func_3556() -> Tensor[(5, 12, 9), float32] {
  @func_3554() /* ty=Tensor[(5, 12, 9), float32] */
}

def @func_1021(%var_1020: Tensor[(9, 4, 12), float32]) -> (Tensor[(9, 4, 12), float32],) {
  %71 = fn (%var_1006: Tensor[(9, 4, 12), float32]) -> (Tensor[(9, 4, 12), float32],) {
    %69 = cast(%var_1006, dtype="float32") /* ty=Tensor[(9, 4, 12), float32] */;
    %70 = atan(%69) /* ty=Tensor[(9, 4, 12), float32] */;
    (%70,)
  };
  %71(%var_1020) /* ty=(Tensor[(9, 4, 12), float32],) */
}

def @func_1748(%var_1745: Tensor[(11, 7, 9), int32], %var_1746: Tensor[(11, 7, 9), int32], %var_1747: Tensor[(143, 15), float32]) -> (Tensor[(11, 7, 9), int32], float32, float32, Tensor[(143, 15), float32]) {
  %83 = fn (%var_1724: Tensor[(11, 7, 9), int32], %var_1725: Tensor[(11, 7, 9), int32], %var_1737: Tensor[(143, 15), float32]) -> (Tensor[(11, 7, 9), int32], float32, float32, Tensor[(143, 15), float32]) {
    %72 = cast(%var_1725, dtype="int32") /* ty=Tensor[(11, 7, 9), int32] */;
    %73 = shape_of(%var_1724, dtype="int32") /* ty=Tensor[(3), int32] */;
    %74 = cast(%var_1724, dtype="int32") /* ty=Tensor[(11, 7, 9), int32] */;
    %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %76 = cast(7.9287f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %77 = cast(%var_1737, dtype="float32") /* ty=Tensor[(143, 15), float32] */;
    %78 = reshape(%76, newshape=[]) /* ty=float32 */;
    %79 = reshape(%77, newshape=[2145]) /* ty=Tensor[(2145), float32] */;
    %80 = @func_1491(%78, %79) /* ty=(Tensor[(12, 10, 15), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(14, 9, 13), float32], float32, Tensor[(2145), float32]) */;
    %81 = logical_xor(%74, %75) /* ty=Tensor[(11, 7, 9), int32] */;
    %82 = %80.4;
    (%81, %82, 7.9287f /* ty=float32 */, %var_1737)
  };
  %83(%var_1745, %var_1746, %var_1747) /* ty=(Tensor[(11, 7, 9), int32], float32, float32, Tensor[(143, 15), float32]) */
}

def @func_6308() -> (Tensor[(5, 3, 7), bool], Tensor[(5, 3, 7), float64]) {
  %84 = @func_4075() /* ty=(Tensor[(5, 3, 7), float64],) */;
  %85 = %84.0;
  %86 = cast(meta[relay.Constant][3] /* ty=Tensor[(5, 3, 7), float64] */, dtype="bool") /* ty=Tensor[(5, 3, 7), bool] */;
  %87 = shape_of(%85, dtype="int32") /* ty=Tensor[(3), int32] */;
  %88 = cast(%85, dtype="bool") /* ty=Tensor[(5, 3, 7), bool] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %90 = cast(meta[relay.Constant][3] /* ty=Tensor[(5, 3, 7), float64] */, dtype="float64") /* ty=Tensor[(5, 3, 7), float64] */;
  %91 = logical_or(%88, %89) /* ty=Tensor[(5, 3, 7), bool] */;
  %92 = tan(%90) /* ty=Tensor[(5, 3, 7), float64] */;
  (%91, %92)
}

def @func_4569(%var_4567: Tensor[(13, 16, 10), float32]) -> (Tensor[(13, 16, 10), float32], Tensor[(5, 12, 9), float64]) {
  @func_4566(%var_4567) /* ty=(Tensor[(13, 16, 10), float32], Tensor[(5, 12, 9), float64]) */
}

def @func_6389() -> Tensor[(5, 12, 9), float64] {
  %93 = fn () -> Tensor[(5, 12, 9), float64] {
    @func_3397() /* ty=Tensor[(5, 12, 9), float64] */
  };
  %93() /* ty=Tensor[(5, 12, 9), float64] */
}

def @func_2006(%var_2004: Tensor[(4, 5, 15), float64], %var_2005: Tensor[(2145), float32]) -> (Tensor[(1638), float32], Tensor[(2145), float32], Tensor[(4, 5, 15), int32], Tensor[(5, 12), uint32], Tensor[(2145), uint16]) {
  %128 = fn (%var_1923: Tensor[(4, 5, 15), float64], %var_1952: Tensor[(2145), float32]) -> (Tensor[(1638), float32], Tensor[(2145), float32], Tensor[(4, 5, 15), int32], Tensor[(5, 12), uint32], Tensor[(2145), uint16]) {
    %94 = cast(0.285167f64 /* ty=float64 */, dtype="float32") /* ty=float32 */;
    %95 = cast(meta[relay.Constant][4] /* ty=Tensor[(2145), float32] */, dtype="float32") /* ty=Tensor[(2145), float32] */;
    %96 = reshape(%94, newshape=[]) /* ty=float32 */;
    %97 = reshape(%95, newshape=[13, 11, 15]) /* ty=Tensor[(13, 11, 15), float32] */;
    %98 = @func_665(%96, %97) /* ty=(Tensor[(13, 11, 15), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(14, 9, 13), float32]) */;
    %99 = cast(%var_1952, dtype="float64") /* ty=Tensor[(2145), float64] */;
    %100 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(2145), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %101 = cast(meta[relay.Constant][4] /* ty=Tensor[(2145), float32] */, dtype="float64") /* ty=Tensor[(2145), float64] */;
    %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?), float64] */;
    %103 = add(%101, %102) /* ty=Tensor[(2145), float64] */;
    %104 = cast(0.285167f64 /* ty=float64 */, dtype="float32") /* ty=float32 */;
    %105 = cast(%103, dtype="float32") /* ty=Tensor[(2145), float32] */;
    %106 = cast(0.285167f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %107 = cast(%var_1923, dtype="float64") /* ty=Tensor[(4, 5, 15), float64] */;
    %108 = subtract(%106, %107) /* ty=Tensor[(4, 5, 15), float64] */;
    %109 = cast(%var_1923, dtype="int32") /* ty=Tensor[(4, 5, 15), int32] */;
    %110 = shape_of(%108, dtype="int32") /* ty=Tensor[(3), int32] */;
    %111 = cast(%108, dtype="int32") /* ty=Tensor[(4, 5, 15), int32] */;
    %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %113 = cast(0.285167f64 /* ty=float64 */, dtype="uint32") /* ty=uint32 */;
    %114 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 12), float64] */, dtype="uint32") /* ty=Tensor[(5, 12), uint32] */;
    %115 = cast(meta[relay.Constant][4] /* ty=Tensor[(2145), float32] */, dtype="float64") /* ty=Tensor[(2145), float64] */;
    %116 = atanh(%115) /* ty=Tensor[(2145), float64] */;
    %117 = cast(%116, dtype="float64") /* ty=Tensor[(2145), float64] */;
    %118 = tan(%117) /* ty=Tensor[(2145), float64] */;
    %119 = cast(%103, dtype="uint16") /* ty=Tensor[(2145), uint16] */;
    %120 = shape_of(%118, dtype="int32") /* ty=Tensor[(1), int32] */;
    %121 = cast(%118, dtype="uint16") /* ty=Tensor[(2145), uint16] */;
    %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %123 = %98.2;
    %124 = floor_divide(%104, %105) /* ty=Tensor[(2145), float32] */;
    %125 = maximum(%111, %112) /* ty=Tensor[(4, 5, 15), int32] */;
    %126 = right_shift(%113, %114) /* ty=Tensor[(5, 12), uint32] */;
    %127 = left_shift(%121, %122) /* ty=Tensor[(2145), uint16] */;
    (%123, %124, %125, %126, %127)
  };
  %128(%var_2004, %var_2005) /* ty=(Tensor[(1638), float32], Tensor[(2145), float32], Tensor[(4, 5, 15), int32], Tensor[(5, 12), uint32], Tensor[(2145), uint16]) */
}

def @func_2585(%var_2577: Tensor[(3, 8, 16), float32]) -> (Tensor[(3, 8, 16), bool],) {
  %129 = cast(%var_2577, dtype="float32") /* ty=Tensor[(3, 8, 16), float32] */;
  %130 = tan(%129) /* ty=Tensor[(3, 8, 16), float32] */;
  %131 = cast(%var_2577, dtype="bool") /* ty=Tensor[(3, 8, 16), bool] */;
  %132 = shape_of(%130, dtype="int32") /* ty=Tensor[(3), int32] */;
  %133 = cast(%130, dtype="bool") /* ty=Tensor[(3, 8, 16), bool] */;
  %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %135 = greater(%133, %134) /* ty=Tensor[(3, 8, 16), bool] */;
  (%135,)
}

def @func_3586(%var_3584: Tensor[(7, 10, 12), int16], %var_3585: Tensor[(7, 10, 12), int16]) -> (Tensor[(7, 10, 12), bool],) {
  %141 = fn (%var_3577: Tensor[(7, 10, 12), int16], %var_3578: Tensor[(7, 10, 12), int16]) -> (Tensor[(7, 10, 12), bool],) {
    %136 = cast(%var_3578, dtype="bool") /* ty=Tensor[(7, 10, 12), bool] */;
    %137 = shape_of(%var_3577, dtype="int32") /* ty=Tensor[(3), int32] */;
    %138 = cast(%var_3577, dtype="bool") /* ty=Tensor[(7, 10, 12), bool] */;
    %139 = dyn.reshape(%136, %137, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %140 = equal(%138, %139) /* ty=Tensor[(7, 10, 12), bool] */;
    (%140,)
  };
  %141(%var_3584, %var_3585) /* ty=(Tensor[(7, 10, 12), bool],) */
}

def @func_4233() -> Tensor[(5, 12, 9), float64] {
  %142 = fn () -> Tensor[(5, 12, 9), float64] {
    @func_3433() /* ty=Tensor[(5, 12, 9), float64] */
  };
  %142() /* ty=Tensor[(5, 12, 9), float64] */
}

def @func_4514(%var_4507: Tensor[(5, 12, 9), float64]) -> Tensor[(5, 12, 9), bool] {
  %143 = @func_4232() /* ty=Tensor[(5, 12, 9), float64] */;
  %144 = cast(%var_4507, dtype="bool") /* ty=Tensor[(5, 12, 9), bool] */;
  %145 = shape_of(%143, dtype="int32") /* ty=Tensor[(3), int32] */;
  %146 = cast(%143, dtype="bool") /* ty=Tensor[(5, 12, 9), bool] */;
  %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%146, %147) /* ty=Tensor[(5, 12, 9), bool] */
}

def @func_3990() -> (Tensor[(5, 12, 9), float64],) {
  %148 = @func_3462() /* ty=Tensor[(5, 12, 9), float32] */;
  %149 = cast(%148, dtype="float64") /* ty=Tensor[(5, 12, 9), float64] */;
  %150 = atan(%149) /* ty=Tensor[(5, 12, 9), float64] */;
  (%150,)
}

def @func_4276() -> (Tensor[(5, 3, 7), float64], Tensor[(5, 3, 7), bool], Tensor[(5, 12, 9), float64]) {
  %158 = fn () -> (Tensor[(5, 3, 7), float64], Tensor[(5, 3, 7), bool], Tensor[(5, 12, 9), float64]) {
    %151 = @func_4111() /* ty=(Tensor[(5, 3, 7), float64],) */;
    %152 = %151.0;
    %153 = cast(%152, dtype="float64") /* ty=Tensor[(5, 3, 7), float64] */;
    %154 = reshape(%153, newshape=[5, 3, 7]) /* ty=Tensor[(5, 3, 7), float64] */;
    %155 = @func_4047(%154) /* ty=(Tensor[(5, 3, 7), bool],) */;
    %156 = %155.0;
    %157 = @func_3397() /* ty=Tensor[(5, 12, 9), float64] */;
    (%152, %156, %157)
  };
  %158() /* ty=(Tensor[(5, 3, 7), float64], Tensor[(5, 3, 7), bool], Tensor[(5, 12, 9), float64]) */
}

def @func_2840(%var_2835: Tensor[(13, 3, 11), float64], %var_2836: Tensor[(640), int16], %var_2837: Tensor[(432), float32], %var_2838: float32, %var_2839: Tensor[(715, 3), float32]) -> (Tensor[(8, 5, 16), int16], Tensor[(640), int16], Tensor[(13, 3, 11), float32], Tensor[(9, 4, 12), float32], Tensor[(432), float32], Tensor[(2145), float32], Tensor[(715, 3), float32], Tensor[(13, 3, 11), bool]) {
  %186 = fn (%var_2749: Tensor[(13, 3, 11), float64], %var_2774: Tensor[(640), int16], %var_2790: Tensor[(432), float32], %var_2812: float32, %var_2813: Tensor[(715, 3), float32]) -> (Tensor[(8, 5, 16), int16], Tensor[(640), int16], Tensor[(13, 3, 11), float32], Tensor[(9, 4, 12), float32], Tensor[(432), float32], Tensor[(2145), float32], Tensor[(715, 3), float32], Tensor[(13, 3, 11), bool]) {
    %159 = cast(%var_2774, dtype="int16") /* ty=Tensor[(640), int16] */;
    %160 = cast(%var_2774, dtype="int16") /* ty=Tensor[(640), int16] */;
    %161 = reshape(%159, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), int16] */;
    %162 = reshape(%160, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), int16] */;
    %163 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 3, 11), float64] */, dtype="float64") /* ty=Tensor[(13, 3, 11), float64] */;
    %164 = rsqrt(%163) /* ty=Tensor[(13, 3, 11), float64] */;
    %165 = cast(%164, dtype="float32") /* ty=Tensor[(13, 3, 11), float32] */;
    %166 = cast(%var_2790, dtype="float32") /* ty=Tensor[(432), float32] */;
    %167 = reshape(%166, newshape=[9, 4, 12]) /* ty=Tensor[(9, 4, 12), float32] */;
    %168 = @func_1019(%167) /* ty=(Tensor[(9, 4, 12), float32],) */;
    %169 = cast(%var_2812, dtype="float32") /* ty=float32 */;
    %170 = cast(%var_2813, dtype="float32") /* ty=Tensor[(715, 3), float32] */;
    %171 = reshape(%169, newshape=[]) /* ty=float32 */;
    %172 = reshape(%170, newshape=[2145]) /* ty=Tensor[(2145), float32] */;
    %173 = @func_1491(%171, %172) /* ty=(Tensor[(12, 10, 15), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(14, 9, 13), float32], float32, Tensor[(2145), float32]) */;
    %174 = cast(%var_2749, dtype="float64") /* ty=Tensor[(13, 3, 11), float64] */;
    %175 = shape_of(%164, dtype="int32") /* ty=Tensor[(3), int32] */;
    %176 = cast(%164, dtype="float64") /* ty=Tensor[(13, 3, 11), float64] */;
    %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %178 = floor_divide(%176, %177) /* ty=Tensor[(13, 3, 11), float64] */;
    %179 = cast(%178, dtype="bool") /* ty=Tensor[(13, 3, 11), bool] */;
    %180 = cast(%var_2812, dtype="bool") /* ty=bool */;
    %181 = @func_2343(%161, %162) /* ty=Tensor[(8, 5, 16), int16] */;
    %182 = asin(%165) /* ty=Tensor[(13, 3, 11), float32] */;
    %183 = %168.0;
    %184 = %173.5;
    %185 = logical_or(%179, %180) /* ty=Tensor[(13, 3, 11), bool] */;
    (%181, %var_2774, %182, %183, %var_2790, %184, %var_2813, %185)
  };
  %186(%var_2835, %var_2836, %var_2837, %var_2838, %var_2839) /* ty=(Tensor[(8, 5, 16), int16], Tensor[(640), int16], Tensor[(13, 3, 11), float32], Tensor[(9, 4, 12), float32], Tensor[(432), float32], Tensor[(2145), float32], Tensor[(715, 3), float32], Tensor[(13, 3, 11), bool]) */
}

def @func_5197(%var_5156: Tensor[(10, 14, 3), bool], %var_5157: Tensor[(10, 14, 3), bool], %var_5168: Tensor[(840), int16]) -> (Tensor[(5, 3, 7), float64], Tensor[(7, 10, 12), bool], Tensor[(840), int16], Tensor[(5, 12, 9), float64], Tensor[(10, 14, 3), float64]) {
  %187 = @func_4075() /* ty=(Tensor[(5, 3, 7), float64],) */;
  %188 = cast(%var_5168, dtype="int16") /* ty=Tensor[(840), int16] */;
  %189 = cast(%var_5168, dtype="int16") /* ty=Tensor[(840), int16] */;
  %190 = reshape(%188, newshape=[7, 10, 12]) /* ty=Tensor[(7, 10, 12), int16] */;
  %191 = reshape(%189, newshape=[7, 10, 12]) /* ty=Tensor[(7, 10, 12), int16] */;
  %192 = @func_3583(%190, %191) /* ty=(Tensor[(7, 10, 12), bool],) */;
  %193 = @func_3990() /* ty=(Tensor[(5, 12, 9), float64],) */;
  %194 = cast(%var_5157, dtype="bool") /* ty=Tensor[(10, 14, 3), bool] */;
  %195 = shape_of(%var_5156, dtype="int32") /* ty=Tensor[(3), int32] */;
  %196 = cast(%var_5156, dtype="bool") /* ty=Tensor[(10, 14, 3), bool] */;
  %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %198 = logical_and(%196, %197) /* ty=Tensor[(10, 14, 3), bool] */;
  %199 = cast(%var_5157, dtype="float64") /* ty=Tensor[(10, 14, 3), float64] */;
  %200 = shape_of(%198, dtype="int32") /* ty=Tensor[(3), int32] */;
  %201 = cast(%198, dtype="float64") /* ty=Tensor[(10, 14, 3), float64] */;
  %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %203 = %187.0;
  %204 = %192.0;
  %205 = %193.0;
  %206 = floor_divide(%201, %202) /* ty=Tensor[(10, 14, 3), float64] */;
  (%203, %204, %var_5168, %205, %206)
}

def @func_3434() -> Tensor[(5, 12, 9), float64] {
  %207 = fn () -> Tensor[(5, 12, 9), float64] {
    @func_3397() /* ty=Tensor[(5, 12, 9), float64] */
  };
  %207() /* ty=Tensor[(5, 12, 9), float64] */
}

def @func_421(%var_419: Tensor[(14, 9, 13), float32]) -> Tensor[(14, 9, 13), float32] {
  @func_418(%var_419) /* ty=Tensor[(14, 9, 13), float32] */
}

def @func_3833(%var_3831: Tensor[(2145), float32]) -> (Tensor[(5, 12, 9), float32], float32, Tensor[(2145), float32], Tensor[(7, 10, 12), bool], Tensor[(1, 840), int16], Tensor[(13, 7, 8), float32], Tensor[(728), int64], Tensor[(14, 9, 13), float32], Tensor[(1638), float64]) {
  @func_3830(%var_3831) /* ty=(Tensor[(5, 12, 9), float32], float32, Tensor[(2145), float32], Tensor[(7, 10, 12), bool], Tensor[(1, 840), int16], Tensor[(13, 7, 8), float32], Tensor[(728), int64], Tensor[(14, 9, 13), float32], Tensor[(1638), float64]) */
}

def @func_5423() -> (Tensor[(5, 3, 7), float64],) {
  %208 = @func_5332() /* ty=(Tensor[(5, 3, 7), float64],) */;
  %209 = %208.0;
  %210 = cast(%209, dtype="float64") /* ty=Tensor[(5, 3, 7), float64] */;
  %211 = sigmoid(%210) /* ty=Tensor[(5, 3, 7), float64] */;
  (%211,)
}

def @func_4146() -> Tensor[(5, 12, 9), float32] {
  @func_4144() /* ty=Tensor[(5, 12, 9), float32] */
}

def @func_2952(%var_2948: Tensor[(15, 11, 16), float32], %var_2949: float32, %var_2950: Tensor[(1, 2145), float32], %var_2951: Tensor[(1100), uint32]) -> (Tensor[(15, 11, 16), uint32], Tensor[(13, 3, 11), float32], Tensor[(429), float64], Tensor[(640), int16], Tensor[(432), float32], float32, Tensor[(1, 2145), float32], Tensor[(11, 10, 10), bool], Tensor[(1100), uint32]) {
  @func_2946(%var_2948, %var_2949, %var_2950, %var_2951) /* ty=(Tensor[(15, 11, 16), uint32], Tensor[(13, 3, 11), float32], Tensor[(429), float64], Tensor[(640), int16], Tensor[(432), float32], float32, Tensor[(1, 2145), float32], Tensor[(11, 10, 10), bool], Tensor[(1100), uint32]) */
}

def @func_5202(%var_5199: Tensor[(10, 14, 3), bool], %var_5200: Tensor[(10, 14, 3), bool], %var_5201: Tensor[(840), int16]) -> (Tensor[(5, 3, 7), float64], Tensor[(7, 10, 12), bool], Tensor[(840), int16], Tensor[(5, 12, 9), float64], Tensor[(10, 14, 3), float64]) {
  @func_5197(%var_5199, %var_5200, %var_5201) /* ty=(Tensor[(5, 3, 7), float64], Tensor[(7, 10, 12), bool], Tensor[(840), int16], Tensor[(5, 12, 9), float64], Tensor[(10, 14, 3), float64]) */
}

def @func_3397() -> Tensor[(5, 12, 9), float64] {
  %212 = @func_3329() /* ty=(Tensor[(5, 12, 9), float64], Tensor[(5, 12, 9), float32]) */;
  %212.0
}

def @func_4077() -> (Tensor[(5, 3, 7), float64],) {
  @func_4075() /* ty=(Tensor[(5, 3, 7), float64],) */
}

def @func_4831(%var_4786: float64, %var_4788: Tensor[(432), float32], %var_4790: Tensor[(2145), float32]) -> (Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(5, 12, 9), int32], Tensor[(5, 12, 9), float64], Tensor[(9, 4, 12), float32], Tensor[(432), float32], Tensor[(1100), uint32], Tensor[(2145), float32], Tensor[(5, 3, 7), float64], Tensor[(1560), float64], Tensor[(5, 12, 9), float64], Tensor[(1560), float32]) {
  %213 = cast(meta[relay.Constant][7] /* ty=Tensor[(1638), float32] */, dtype="float32") /* ty=Tensor[(1638), float32] */;
  %214 = reshape(%213, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float32] */;
  %215 = @func_3397() /* ty=Tensor[(5, 12, 9), float64] */;
  %216 = @func_4275() /* ty=(Tensor[(5, 3, 7), float64], Tensor[(5, 3, 7), bool], Tensor[(5, 12, 9), float64]) */;
  %217 = %216.2;
  %218 = cast(%217, dtype="int32") /* ty=Tensor[(5, 12, 9), int32] */;
  %219 = shape_of(%215, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%215, dtype="int32") /* ty=Tensor[(5, 12, 9), int32] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %222 = @func_4484() /* ty=(Tensor[(5, 12, 9), float64],) */;
  %223 = cast(%var_4786, dtype="float64") /* ty=float64 */;
  %224 = cast(meta[relay.Constant][8] /* ty=Tensor[(1560), float64] */, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %225 = cast(%var_4788, dtype="float32") /* ty=Tensor[(432), float32] */;
  %226 = cast(meta[relay.Constant][9] /* ty=Tensor[(1100), uint32] */, dtype="uint32") /* ty=Tensor[(1100), uint32] */;
  %227 = cast(%var_4790, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %228 = reshape(%223, newshape=[]) /* ty=float64 */;
  %229 = reshape(%224, newshape=[10, 12, 13]) /* ty=Tensor[(10, 12, 13), float64] */;
  %230 = reshape(%225, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %231 = reshape(%226, newshape=[1100]) /* ty=Tensor[(1100), uint32] */;
  %232 = reshape(%227, newshape=[2145]) /* ty=Tensor[(2145), float32] */;
  %233 = @func_1366(%228, %229, %230, %231, %232) /* ty=(Tensor[(10, 12, 13), float64], Tensor[(14, 9, 13), float32], Tensor[(9, 4, 12), float32], Tensor[(11, 10, 10), bool], Tensor[(1100), uint32], Tensor[(13, 11, 15), float32], Tensor[(2145), float32], Tensor[(11, 10, 10), bool], Tensor[(1638), float32], Tensor[(1638, 432), uint8]) */;
  %234 = left_shift(%220, %221) /* ty=Tensor[(5, 12, 9), int32] */;
  %235 = cast(%234, dtype="float64") /* ty=Tensor[(5, 12, 9), float64] */;
  %236 = reshape(%235, newshape=[5, 12, 9]) /* ty=Tensor[(5, 12, 9), float64] */;
  %237 = @func_4440(%236) /* ty=(Tensor[(5, 12, 9), bool], Tensor[(5, 12, 9), float64], Tensor[(4, 5, 15), int32], Tensor[(300), float64], Tensor[(2145), float32], Tensor[(5, 3, 7), float64], Tensor[(14, 9, 13), float32]) */;
  %238 = cast(meta[relay.Constant][8] /* ty=Tensor[(1560), float64] */, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %239 = cast(meta[relay.Constant][8] /* ty=Tensor[(1560), float64] */, dtype="uint32") /* ty=Tensor[(1560), uint32] */;
  %240 = cast(%var_4786, dtype="uint32") /* ty=uint32 */;
  %241 = maximum(%239, %240) /* ty=Tensor[(1560), uint32] */;
  %242 = cast(%241, dtype="float32") /* ty=Tensor[(1560), float32] */;
  %243 = @func_418(%214) /* ty=Tensor[(14, 9, 13), float32] */;
  %244 = %222.0;
  %245 = %233.2;
  %246 = %237.5;
  %247 = cosh(%238) /* ty=Tensor[(1560), float64] */;
  %248 = @func_4232() /* ty=Tensor[(5, 12, 9), float64] */;
  %249 = log(%242) /* ty=Tensor[(1560), float32] */;
  (%243, meta[relay.Constant][7] /* ty=Tensor[(1638), float32] */, %234, %244, %245, %var_4788, meta[relay.Constant][9] /* ty=Tensor[(1100), uint32] */, %var_4790, %246, %247, %248, %249)
}

def @func_5280(%var_5278: Tensor[(15, 7, 2), float64], %var_5279: Tensor[(384), float32]) -> (Tensor[(5, 3, 7), float64], Tensor[(3, 8, 16), bool], Tensor[(384), float32], Tensor[(5, 12, 9), float64], Tensor[(15, 7, 2), float32]) {
  %267 = fn (%var_5220: Tensor[(15, 7, 2), float64], %var_5250: Tensor[(384), float32]) -> (Tensor[(5, 3, 7), float64], Tensor[(3, 8, 16), bool], Tensor[(384), float32], Tensor[(5, 12, 9), float64], Tensor[(15, 7, 2), float32]) {
    %250 = @func_4275() /* ty=(Tensor[(5, 3, 7), float64], Tensor[(5, 3, 7), bool], Tensor[(5, 12, 9), float64]) */;
    %251 = cast(%var_5250, dtype="float32") /* ty=Tensor[(384), float32] */;
    %252 = reshape(%251, newshape=[3, 8, 16]) /* ty=Tensor[(3, 8, 16), float32] */;
    %253 = @func_2585(%252) /* ty=(Tensor[(3, 8, 16), bool],) */;
    %254 = @func_3990() /* ty=(Tensor[(5, 12, 9), float64],) */;
    %255 = cast(%var_5220, dtype="float64") /* ty=Tensor[(15, 7, 2), float64] */;
    %256 = sin(%255) /* ty=Tensor[(15, 7, 2), float64] */;
    %257 = cast(%var_5220, dtype="float32") /* ty=Tensor[(15, 7, 2), float32] */;
    %258 = tan(%257) /* ty=Tensor[(15, 7, 2), float32] */;
    %259 = cast(%258, dtype="float32") /* ty=Tensor[(15, 7, 2), float32] */;
    %260 = shape_of(%256, dtype="int32") /* ty=Tensor[(3), int32] */;
    %261 = cast(%256, dtype="float32") /* ty=Tensor[(15, 7, 2), float32] */;
    %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %263 = %250.0;
    %264 = %253.0;
    %265 = %254.0;
    %266 = add(%261, %262) /* ty=Tensor[(15, 7, 2), float32] */;
    (%263, %264, %var_5250, %265, %266)
  };
  %267(%var_5278, %var_5279) /* ty=(Tensor[(5, 3, 7), float64], Tensor[(3, 8, 16), bool], Tensor[(384), float32], Tensor[(5, 12, 9), float64], Tensor[(15, 7, 2), float32]) */
}

def @func_665(%var_639: float32, %var_640: Tensor[(13, 11, 15), float32]) -> (Tensor[(13, 11, 15), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(14, 9, 13), float32]) {
  %268 = cast(%var_639, dtype="float32") /* ty=float32 */;
  %269 = cast(%var_640, dtype="float32") /* ty=Tensor[(13, 11, 15), float32] */;
  %270 = cast(meta[relay.Constant][10] /* ty=Tensor[(1638), float32] */, dtype="float32") /* ty=Tensor[(1638), float32] */;
  %271 = reshape(%270, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float32] */;
  %272 = cast(meta[relay.Constant][10] /* ty=Tensor[(1638), float32] */, dtype="float32") /* ty=Tensor[(1638), float32] */;
  %273 = reshape(%272, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float32] */;
  %274 = divide(%268, %269) /* ty=Tensor[(13, 11, 15), float32] */;
  %275 = @func_418(%271) /* ty=Tensor[(14, 9, 13), float32] */;
  %276 = @func_418(%273) /* ty=Tensor[(14, 9, 13), float32] */;
  (%274, %275, meta[relay.Constant][10] /* ty=Tensor[(1638), float32] */, %276)
}

def @func_4016(%var_3996: int32) -> (Tensor[(15, 10, 3), int32],) {
  %277 = cast(%var_3996, dtype="int32") /* ty=int32 */;
  %278 = cast(meta[relay.Constant][11] /* ty=Tensor[(15, 10, 3), int32] */, dtype="int32") /* ty=Tensor[(15, 10, 3), int32] */;
  %279 = bitwise_and(%277, %278) /* ty=Tensor[(15, 10, 3), int32] */;
  (%279,)
}

def @func_5512() -> (Tensor[(5, 12, 9), float64],) {
  @func_5510() /* ty=(Tensor[(5, 12, 9), float64],) */
}

def @func_1372(%var_1367: float64, %var_1368: Tensor[(10, 12, 13), float64], %var_1369: Tensor[(432), float32], %var_1370: Tensor[(1100), uint32], %var_1371: Tensor[(2145), float32]) -> (Tensor[(10, 12, 13), float64], Tensor[(14, 9, 13), float32], Tensor[(9, 4, 12), float32], Tensor[(11, 10, 10), bool], Tensor[(1100), uint32], Tensor[(13, 11, 15), float32], Tensor[(2145), float32], Tensor[(11, 10, 10), bool], Tensor[(1638), float32], Tensor[(1638, 432), uint8]) {
  %317 = fn (%var_1303: float64, %var_1304: Tensor[(10, 12, 13), float64], %var_1333: Tensor[(432), float32], %var_1341: Tensor[(1100), uint32], %var_1346: Tensor[(2145), float32]) -> (Tensor[(10, 12, 13), float64], Tensor[(14, 9, 13), float32], Tensor[(9, 4, 12), float32], Tensor[(11, 10, 10), bool], Tensor[(1100), uint32], Tensor[(13, 11, 15), float32], Tensor[(2145), float32], Tensor[(11, 10, 10), bool], Tensor[(1638), float32], Tensor[(1638, 432), uint8]) {
    %280 = cast(%var_1303, dtype="float64") /* ty=float64 */;
    %281 = cast(%var_1304, dtype="float64") /* ty=Tensor[(10, 12, 13), float64] */;
    %282 = divide(%280, %281) /* ty=Tensor[(10, 12, 13), float64] */;
    %283 = cast(%282, dtype="float64") /* ty=Tensor[(10, 12, 13), float64] */;
    %284 = cast(meta[relay.Constant][12] /* ty=Tensor[(1638, 1), float32] */, dtype="float32") /* ty=Tensor[(1638, 1), float32] */;
    %285 = reshape(%284, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float32] */;
    %286 = cast(%var_1333, dtype="float32") /* ty=Tensor[(432), float32] */;
    %287 = reshape(%286, newshape=[9, 4, 12]) /* ty=Tensor[(9, 4, 12), float32] */;
    %288 = @func_1019(%287) /* ty=(Tensor[(9, 4, 12), float32],) */;
    %289 = cast(%var_1341, dtype="uint32") /* ty=Tensor[(1100), uint32] */;
    %290 = cast(%var_1341, dtype="uint32") /* ty=Tensor[(1100), uint32] */;
    %291 = reshape(%289, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), uint32] */;
    %292 = reshape(%290, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), uint32] */;
    %293 = cast(%var_1303, dtype="float32") /* ty=float32 */;
    %294 = cast(%var_1346, dtype="float32") /* ty=Tensor[(2145), float32] */;
    %295 = reshape(%293, newshape=[]) /* ty=float32 */;
    %296 = reshape(%294, newshape=[13, 11, 15]) /* ty=Tensor[(13, 11, 15), float32] */;
    %297 = @func_665(%295, %296) /* ty=(Tensor[(13, 11, 15), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(14, 9, 13), float32]) */;
    %298 = cast(%var_1341, dtype="uint32") /* ty=Tensor[(1100), uint32] */;
    %299 = @func_1062(%291, %292) /* ty=Tensor[(11, 10, 10), bool] */;
    %300 = cast(%299, dtype="uint32") /* ty=Tensor[(11, 10, 10), uint32] */;
    %301 = reshape(%298, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), uint32] */;
    %302 = reshape(%300, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), uint32] */;
    %303 = cast(%var_1303, dtype="float32") /* ty=float32 */;
    %304 = %297.0;
    %305 = cast(%304, dtype="float32") /* ty=Tensor[(13, 11, 15), float32] */;
    %306 = reshape(%303, newshape=[]) /* ty=float32 */;
    %307 = reshape(%305, newshape=[13, 11, 15]) /* ty=Tensor[(13, 11, 15), float32] */;
    %308 = @func_665(%306, %307) /* ty=(Tensor[(13, 11, 15), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(14, 9, 13), float32]) */;
    %309 = cast(%var_1333, dtype="uint8") /* ty=Tensor[(432), uint8] */;
    %310 = cast(meta[relay.Constant][12] /* ty=Tensor[(1638, 1), float32] */, dtype="uint8") /* ty=Tensor[(1638, 1), uint8] */;
    %311 = cosh(%283) /* ty=Tensor[(10, 12, 13), float64] */;
    %312 = @func_418(%285) /* ty=Tensor[(14, 9, 13), float32] */;
    %313 = %288.0;
    %314 = @func_1062(%301, %302) /* ty=Tensor[(11, 10, 10), bool] */;
    %315 = %308.2;
    %316 = multiply(%309, %310) /* ty=Tensor[(1638, 432), uint8] */;
    (%311, %312, %313, %299, %var_1341, %304, %var_1346, %314, %315, %316)
  };
  %317(%var_1367, %var_1368, %var_1369, %var_1370, %var_1371) /* ty=(Tensor[(10, 12, 13), float64], Tensor[(14, 9, 13), float32], Tensor[(9, 4, 12), float32], Tensor[(11, 10, 10), bool], Tensor[(1100), uint32], Tensor[(13, 11, 15), float32], Tensor[(2145), float32], Tensor[(11, 10, 10), bool], Tensor[(1638), float32], Tensor[(1638, 432), uint8]) */
}

def @func_3399() -> Tensor[(5, 12, 9), float64] {
  @func_3397() /* ty=Tensor[(5, 12, 9), float64] */
}

def @func_5935() -> (Tensor[(5, 12, 9), bool],) {
  @func_5933() /* ty=(Tensor[(5, 12, 9), bool],) */
}

def @func_5510() -> (Tensor[(5, 12, 9), float64],) {
  %318 = @func_3397() /* ty=Tensor[(5, 12, 9), float64] */;
  (%318,)
}

def @func_4185() -> (Tensor[(5, 12, 9), float32], Tensor[(12, 10, 15), float32], float32, Tensor[(2145), float32]) {
  %326 = fn () -> (Tensor[(5, 12, 9), float32], Tensor[(12, 10, 15), float32], float32, Tensor[(2145), float32]) {
    %319 = cast(-4.75688f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %320 = cast(meta[relay.Constant][13] /* ty=Tensor[(2145), float32] */, dtype="float32") /* ty=Tensor[(2145), float32] */;
    %321 = reshape(%319, newshape=[]) /* ty=float32 */;
    %322 = reshape(%320, newshape=[2145]) /* ty=Tensor[(2145), float32] */;
    %323 = @func_1491(%321, %322) /* ty=(Tensor[(12, 10, 15), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(14, 9, 13), float32], float32, Tensor[(2145), float32]) */;
    %324 = @func_3462() /* ty=Tensor[(5, 12, 9), float32] */;
    %325 = %323.0;
    (%324, %325, -4.75688f /* ty=float32 */, meta[relay.Constant][13] /* ty=Tensor[(2145), float32] */)
  };
  %326() /* ty=(Tensor[(5, 12, 9), float32], Tensor[(12, 10, 15), float32], float32, Tensor[(2145), float32]) */
}

def @func_4095(%var_4094: Tensor[(5, 12, 9), float64]) -> (Tensor[(5, 12, 9), int16],) {
  %333 = fn (%var_4087: Tensor[(5, 12, 9), float64]) -> (Tensor[(5, 12, 9), int16],) {
    %327 = @func_3433() /* ty=Tensor[(5, 12, 9), float64] */;
    %328 = cast(%var_4087, dtype="int16") /* ty=Tensor[(5, 12, 9), int16] */;
    %329 = shape_of(%327, dtype="int32") /* ty=Tensor[(3), int32] */;
    %330 = cast(%327, dtype="int16") /* ty=Tensor[(5, 12, 9), int16] */;
    %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %332 = bitwise_or(%330, %331) /* ty=Tensor[(5, 12, 9), int16] */;
    (%332,)
  };
  %333(%var_4094) /* ty=(Tensor[(5, 12, 9), int16],) */
}

def @func_5942(%var_5940: Tensor[(924), bool]) -> (Tensor[(5, 12, 9), float32], Tensor[(5, 12, 9), float64], Tensor[(924), bool]) {
  %334 = cast(%var_5940, dtype="bool") /* ty=Tensor[(924), bool] */;
  %335 = cast(%var_5940, dtype="bool") /* ty=Tensor[(924), bool] */;
  %336 = reshape(%334, newshape=[6, 14, 11]) /* ty=Tensor[(6, 14, 11), bool] */;
  %337 = reshape(%335, newshape=[6, 14, 11]) /* ty=Tensor[(6, 14, 11), bool] */;
  %338 = @func_4930(%336, %337) /* ty=(Tensor[(6, 14, 11), bool], Tensor[(6, 14, 11), float64], Tensor[(5, 12, 9), float64], Tensor[(5, 12, 9), float64], Tensor[(5, 3, 7), float64]) */;
  %339 = @func_4144() /* ty=Tensor[(5, 12, 9), float32] */;
  %340 = %338.2;
  (%339, %340, %var_5940)
}

def @func_6023(%var_6021: Tensor[(15, 4, 12), float32]) -> (Tensor[(15, 4, 12), float32],) {
  @func_6020(%var_6021) /* ty=(Tensor[(15, 4, 12), float32],) */
}

def @func_5375(%var_5371: Tensor[(2, 15, 9), bool], %var_5372: Tensor[(2, 15, 9), bool], %var_5373: float32, %var_5374: Tensor[(1100), uint32]) -> (Tensor[(2, 15, 9), bool], Tensor[(2, 15, 9), float64], Tensor[(432), float32], Tensor[(2640), float32], float32, Tensor[(2145), float32], Tensor[(1100), uint32]) {
  %361 = fn (%var_5342: Tensor[(2, 15, 9), bool], %var_5343: Tensor[(2, 15, 9), bool], %var_5365: float32, %var_5367: Tensor[(1100), uint32]) -> (Tensor[(2, 15, 9), bool], Tensor[(2, 15, 9), float64], Tensor[(432), float32], Tensor[(2640), float32], float32, Tensor[(2145), float32], Tensor[(1100), uint32]) {
    %341 = cast(%var_5343, dtype="bool") /* ty=Tensor[(2, 15, 9), bool] */;
    %342 = shape_of(%var_5342, dtype="int32") /* ty=Tensor[(3), int32] */;
    %343 = cast(%var_5342, dtype="bool") /* ty=Tensor[(2, 15, 9), bool] */;
    %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %345 = cast(%var_5343, dtype="float64") /* ty=Tensor[(2, 15, 9), float64] */;
    %346 = shape_of(%var_5342, dtype="int32") /* ty=Tensor[(3), int32] */;
    %347 = cast(%var_5342, dtype="float64") /* ty=Tensor[(2, 15, 9), float64] */;
    %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %349 = cast(meta[relay.Constant][14] /* ty=Tensor[(2640), float32] */, dtype="float32") /* ty=Tensor[(2640), float32] */;
    %350 = cast(%var_5365, dtype="float32") /* ty=float32 */;
    %351 = cast(meta[relay.Constant][15] /* ty=Tensor[(2145), float32] */, dtype="float32") /* ty=Tensor[(2145), float32] */;
    %352 = cast(%var_5367, dtype="uint32") /* ty=Tensor[(1100), uint32] */;
    %353 = reshape(%349, newshape=[15, 11, 16]) /* ty=Tensor[(15, 11, 16), float32] */;
    %354 = reshape(%350, newshape=[]) /* ty=float32 */;
    %355 = reshape(%351, newshape=[1, 2145]) /* ty=Tensor[(1, 2145), float32] */;
    %356 = reshape(%352, newshape=[1100]) /* ty=Tensor[(1100), uint32] */;
    %357 = @func_2946(%353, %354, %355, %356) /* ty=(Tensor[(15, 11, 16), uint32], Tensor[(13, 3, 11), float32], Tensor[(429), float64], Tensor[(640), int16], Tensor[(432), float32], float32, Tensor[(1, 2145), float32], Tensor[(11, 10, 10), bool], Tensor[(1100), uint32]) */;
    %358 = logical_or(%343, %344) /* ty=Tensor[(2, 15, 9), bool] */;
    %359 = floor_mod(%347, %348) /* ty=Tensor[(2, 15, 9), float64] */;
    %360 = %357.4;
    (%358, %359, %360, meta[relay.Constant][14] /* ty=Tensor[(2640), float32] */, %var_5365, meta[relay.Constant][15] /* ty=Tensor[(2145), float32] */, %var_5367)
  };
  %361(%var_5371, %var_5372, %var_5373, %var_5374) /* ty=(Tensor[(2, 15, 9), bool], Tensor[(2, 15, 9), float64], Tensor[(432), float32], Tensor[(2640), float32], float32, Tensor[(2145), float32], Tensor[(1100), uint32]) */
}

def @func_5407() -> Tensor[(5, 12, 9), float32] {
  @func_4144() /* ty=Tensor[(5, 12, 9), float32] */
}

def @func_6020(%var_6015: Tensor[(15, 4, 12), float32]) -> (Tensor[(15, 4, 12), float32],) {
  %362 = @func_4184() /* ty=(Tensor[(5, 12, 9), float32], Tensor[(12, 10, 15), float32], float32, Tensor[(2145), float32]) */;
  %363 = %362.2;
  %364 = cast(%363, dtype="float32") /* ty=float32 */;
  %365 = cast(%var_6015, dtype="float32") /* ty=Tensor[(15, 4, 12), float32] */;
  %366 = mod(%364, %365) /* ty=Tensor[(15, 4, 12), float32] */;
  (%366,)
}

def @func_6771() -> (Tensor[(5, 12, 9), float64],) {
  @func_6769() /* ty=(Tensor[(5, 12, 9), float64],) */
}

def @func_5332() -> (Tensor[(5, 3, 7), float64],) {
  %367 = @func_3971() /* ty=Tensor[(5, 3, 7), float64] */;
  (%367,)
}

def @func_6310() -> (Tensor[(5, 3, 7), bool], Tensor[(5, 3, 7), float64]) {
  @func_6308() /* ty=(Tensor[(5, 3, 7), bool], Tensor[(5, 3, 7), float64]) */
}

def @func_6600(%var_6599: Tensor[(4, 180), float32]) -> (Tensor[(5, 12, 9), float32], Tensor[(5, 12, 9), float64], Tensor[(15, 4, 12), float32], Tensor[(4, 180), float32]) {
  %376 = fn (%var_6596: Tensor[(4, 180), float32]) -> (Tensor[(5, 12, 9), float32], Tensor[(5, 12, 9), float64], Tensor[(15, 4, 12), float32], Tensor[(4, 180), float32]) {
    %368 = @func_3329() /* ty=(Tensor[(5, 12, 9), float64], Tensor[(5, 12, 9), float32]) */;
    %369 = @func_4484() /* ty=(Tensor[(5, 12, 9), float64],) */;
    %370 = cast(%var_6596, dtype="float32") /* ty=Tensor[(4, 180), float32] */;
    %371 = reshape(%370, newshape=[15, 4, 12]) /* ty=Tensor[(15, 4, 12), float32] */;
    %372 = @func_6020(%371) /* ty=(Tensor[(15, 4, 12), float32],) */;
    %373 = %368.1;
    %374 = %369.0;
    %375 = %372.0;
    (%373, %374, %375, %var_6596)
  };
  %376(%var_6599) /* ty=(Tensor[(5, 12, 9), float32], Tensor[(5, 12, 9), float64], Tensor[(15, 4, 12), float32], Tensor[(4, 180), float32]) */
}

def @func_6839(%var_6797: Tensor[(5, 3, 7), float64], %var_6812: Tensor[(432), float32]) -> (Tensor[(5, 3, 7), uint32], Tensor[(9, 4, 12), float32], float64, Tensor[(432), float32], Tensor[(2145), float32], Tensor[(5, 12, 9), float64], Tensor[(13, 7, 8), float32], Tensor[(728), int64]) {
  %377 = @func_4111() /* ty=(Tensor[(5, 3, 7), float64],) */;
  %378 = %377.0;
  %379 = cast(%var_6797, dtype="uint32") /* ty=Tensor[(5, 3, 7), uint32] */;
  %380 = shape_of(%378, dtype="int32") /* ty=Tensor[(3), int32] */;
  %381 = cast(%378, dtype="uint32") /* ty=Tensor[(5, 3, 7), uint32] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %383 = cast(6.65979f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %384 = cast(%var_6812, dtype="float32") /* ty=Tensor[(432), float32] */;
  %385 = cast(meta[relay.Constant][16] /* ty=Tensor[(2145), float32] */, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %386 = reshape(%383, newshape=[]) /* ty=float64 */;
  %387 = reshape(%384, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %388 = reshape(%385, newshape=[2145]) /* ty=Tensor[(2145), float32] */;
  %389 = @func_4831(%386, %387, %388) /* ty=(Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(5, 12, 9), int32], Tensor[(5, 12, 9), float64], Tensor[(9, 4, 12), float32], Tensor[(432), float32], Tensor[(1100), uint32], Tensor[(2145), float32], Tensor[(5, 3, 7), float64], Tensor[(1560), float64], Tensor[(5, 12, 9), float64], Tensor[(1560), float32]) */;
  %390 = @func_4484() /* ty=(Tensor[(5, 12, 9), float64],) */;
  %391 = cast(meta[relay.Constant][17] /* ty=Tensor[(728), int64] */, dtype="int64") /* ty=Tensor[(728), int64] */;
  %392 = reshape(%391, newshape=[13, 7, 8]) /* ty=Tensor[(13, 7, 8), int64] */;
  %393 = @func_2303(%392) /* ty=(Tensor[(13, 7, 8), bool], Tensor[(13, 7, 8), int8], Tensor[(13, 7, 8), float32], float32, Tensor[(693), int32], Tensor[(2145), float32], Tensor[(13, 7, 8), float32]) */;
  %394 = left_shift(%381, %382) /* ty=Tensor[(5, 3, 7), uint32] */;
  %395 = %389.4;
  %396 = %390.0;
  %397 = %393.2;
  (%394, %395, 6.65979f64 /* ty=float64 */, %var_6812, meta[relay.Constant][16] /* ty=Tensor[(2145), float32] */, %396, %397, meta[relay.Constant][17] /* ty=Tensor[(728), int64] */)
}

def @func_3939() -> Tensor[(5, 3, 7), float64] {
  %398 = cast(meta[relay.Constant][18] /* ty=Tensor[(5, 3, 7), float32] */, dtype="float32") /* ty=Tensor[(5, 3, 7), float32] */;
  %399 = acosh(%398) /* ty=Tensor[(5, 3, 7), float32] */;
  %400 = cast(%399, dtype="float64") /* ty=Tensor[(5, 3, 7), float64] */;
  erf(%400) /* ty=Tensor[(5, 3, 7), float64] */
}

def @func_4613() -> Tensor[(5, 12, 9), float32] {
  @func_3462() /* ty=Tensor[(5, 12, 9), float32] */
}

def @func_4442(%var_4441: Tensor[(5, 12, 9), float64]) -> (Tensor[(5, 12, 9), bool], Tensor[(5, 12, 9), float64], Tensor[(4, 5, 15), int32], Tensor[(300), float64], Tensor[(2145), float32], Tensor[(5, 3, 7), float64], Tensor[(14, 9, 13), float32]) {
  %427 = fn (%var_4385: Tensor[(5, 12, 9), float64]) -> (Tensor[(5, 12, 9), bool], Tensor[(5, 12, 9), float64], Tensor[(4, 5, 15), int32], Tensor[(300), float64], Tensor[(2145), float32], Tensor[(5, 3, 7), float64], Tensor[(14, 9, 13), float32]) {
    %401 = @func_3397() /* ty=Tensor[(5, 12, 9), float64] */;
    %402 = cast(%var_4385, dtype="bool") /* ty=Tensor[(5, 12, 9), bool] */;
    %403 = shape_of(%401, dtype="int32") /* ty=Tensor[(3), int32] */;
    %404 = cast(%401, dtype="bool") /* ty=Tensor[(5, 12, 9), bool] */;
    %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %406 = cast(%401, dtype="float32") /* ty=Tensor[(5, 12, 9), float32] */;
    %407 = shape_of(%var_4385, dtype="int32") /* ty=Tensor[(3), int32] */;
    %408 = cast(%var_4385, dtype="float32") /* ty=Tensor[(5, 12, 9), float32] */;
    %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %410 = divide(%408, %409) /* ty=Tensor[(5, 12, 9), float32] */;
    %411 = cast(%410, dtype="float64") /* ty=Tensor[(5, 12, 9), float64] */;
    %412 = cast(meta[relay.Constant][19] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
    %413 = cast(meta[relay.Constant][20] /* ty=Tensor[(2145), float32] */, dtype="float32") /* ty=Tensor[(2145), float32] */;
    %414 = reshape(%412, newshape=[4, 5, 15]) /* ty=Tensor[(4, 5, 15), float64] */;
    %415 = reshape(%413, newshape=[2145]) /* ty=Tensor[(2145), float32] */;
    %416 = @func_2003(%414, %415) /* ty=(Tensor[(1638), float32], Tensor[(2145), float32], Tensor[(4, 5, 15), int32], Tensor[(5, 12), uint32], Tensor[(2145), uint16]) */;
    %417 = @func_3971() /* ty=Tensor[(5, 3, 7), float64] */;
    %418 = cast(%417, dtype="float64") /* ty=Tensor[(5, 3, 7), float64] */;
    %419 = cast(meta[relay.Constant][20] /* ty=Tensor[(2145), float32] */, dtype="float32") /* ty=Tensor[(2145), float32] */;
    %420 = reshape(%419, newshape=[2145]) /* ty=Tensor[(2145), float32] */;
    %421 = @func_3830(%420) /* ty=(Tensor[(5, 12, 9), float32], float32, Tensor[(2145), float32], Tensor[(7, 10, 12), bool], Tensor[(1, 840), int16], Tensor[(13, 7, 8), float32], Tensor[(728), int64], Tensor[(14, 9, 13), float32], Tensor[(1638), float64]) */;
    %422 = less_equal(%404, %405) /* ty=Tensor[(5, 12, 9), bool] */;
    %423 = sqrt(%411) /* ty=Tensor[(5, 12, 9), float64] */;
    %424 = %416.2;
    %425 = sin(%418) /* ty=Tensor[(5, 3, 7), float64] */;
    %426 = %421.7;
    (%422, %423, %424, meta[relay.Constant][19] /* ty=Tensor[(300), float64] */, meta[relay.Constant][20] /* ty=Tensor[(2145), float32] */, %425, %426)
  };
  %427(%var_4441) /* ty=(Tensor[(5, 12, 9), bool], Tensor[(5, 12, 9), float64], Tensor[(4, 5, 15), int32], Tensor[(300), float64], Tensor[(2145), float32], Tensor[(5, 3, 7), float64], Tensor[(14, 9, 13), float32]) */
}

def @func_5933() -> (Tensor[(5, 12, 9), bool],) {
  %428 = @func_3329() /* ty=(Tensor[(5, 12, 9), float64], Tensor[(5, 12, 9), float32]) */;
  %429 = %428.1;
  %430 = cast(meta[relay.Constant][21] /* ty=Tensor[(5, 12, 9), float32] */, dtype="bool") /* ty=Tensor[(5, 12, 9), bool] */;
  %431 = shape_of(%429, dtype="int32") /* ty=Tensor[(3), int32] */;
  %432 = cast(%429, dtype="bool") /* ty=Tensor[(5, 12, 9), bool] */;
  %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %434 = greater_equal(%432, %433) /* ty=Tensor[(5, 12, 9), bool] */;
  (%434,)
}

def @func_4684(%var_4682: Tensor[(2145), float32], %var_4683: Tensor[(693), int32]) -> (Tensor[(5, 3, 7), float64], Tensor[(143, 15), float32], Tensor[(2145), float32], Tensor[(693), uint16], Tensor[(5, 12, 9), float64], Tensor[(5, 12, 9), float32], Tensor[(5, 3, 7), float64]) {
  @func_4680(%var_4682, %var_4683) /* ty=(Tensor[(5, 3, 7), float64], Tensor[(143, 15), float32], Tensor[(2145), float32], Tensor[(693), uint16], Tensor[(5, 12, 9), float64], Tensor[(5, 12, 9), float32], Tensor[(5, 3, 7), float64]) */
}

def @func_7102(%var_7100: Tensor[(6), float64], %var_7101: Tensor[(3, 7, 16), float32]) -> (Tensor[(15, 10, 3), int32], Tensor[(2, 3), float64], Tensor[(6), float64], Tensor[(3, 7, 16), float32]) {
  @func_7098(%var_7100, %var_7101) /* ty=(Tensor[(15, 10, 3), int32], Tensor[(2, 3), float64], Tensor[(6), float64], Tensor[(3, 7, 16), float32]) */
}

def @func_3675(%var_3672: Tensor[(1, 429), float64], %var_3673: Tensor[(640), int16], %var_3674: Tensor[(432), float32]) -> (Tensor[(5, 12, 9), float32], Tensor[(432), float32], Tensor[(1, 429), float64], Tensor[(640), int16], Tensor[(432), float32], float32, Tensor[(1, 2145), float32]) {
  %448 = fn (%var_3654: Tensor[(1, 429), float64], %var_3655: Tensor[(640), int16], %var_3656: Tensor[(432), float32]) -> (Tensor[(5, 12, 9), float32], Tensor[(432), float32], Tensor[(1, 429), float64], Tensor[(640), int16], Tensor[(432), float32], float32, Tensor[(1, 2145), float32]) {
    %435 = cast(%var_3654, dtype="float64") /* ty=Tensor[(1, 429), float64] */;
    %436 = cast(%var_3655, dtype="int16") /* ty=Tensor[(640), int16] */;
    %437 = cast(%var_3656, dtype="float32") /* ty=Tensor[(432), float32] */;
    %438 = cast(-3.00718f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %439 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 2145), float32] */, dtype="float32") /* ty=Tensor[(1, 2145), float32] */;
    %440 = reshape(%435, newshape=[13, 3, 11]) /* ty=Tensor[(13, 3, 11), float64] */;
    %441 = reshape(%436, newshape=[640]) /* ty=Tensor[(640), int16] */;
    %442 = reshape(%437, newshape=[432]) /* ty=Tensor[(432), float32] */;
    %443 = reshape(%438, newshape=[]) /* ty=float32 */;
    %444 = reshape(%439, newshape=[715, 3]) /* ty=Tensor[(715, 3), float32] */;
    %445 = @func_2834(%440, %441, %442, %443, %444) /* ty=(Tensor[(8, 5, 16), int16], Tensor[(640), int16], Tensor[(13, 3, 11), float32], Tensor[(9, 4, 12), float32], Tensor[(432), float32], Tensor[(2145), float32], Tensor[(715, 3), float32], Tensor[(13, 3, 11), bool]) */;
    %446 = @func_3554() /* ty=Tensor[(5, 12, 9), float32] */;
    %447 = %445.4;
    (%446, %447, %var_3654, %var_3655, %var_3656, -3.00718f /* ty=float32 */, meta[relay.Constant][22] /* ty=Tensor[(1, 2145), float32] */)
  };
  %448(%var_3672, %var_3673, %var_3674) /* ty=(Tensor[(5, 12, 9), float32], Tensor[(432), float32], Tensor[(1, 429), float64], Tensor[(640), int16], Tensor[(432), float32], float32, Tensor[(1, 2145), float32]) */
}

def @func_1844(%var_1838: Tensor[(1638), float32]) -> (Tensor[(2, 5, 14), float64], Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(2, 5, 14), uint64]) {
  %449 = cast(meta[relay.Constant][23] /* ty=Tensor[(2, 5, 14), float32] */, dtype="float64") /* ty=Tensor[(2, 5, 14), float64] */;
  %450 = cast(%var_1838, dtype="float32") /* ty=Tensor[(1638), float32] */;
  %451 = reshape(%450, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float32] */;
  %452 = cast(meta[relay.Constant][23] /* ty=Tensor[(2, 5, 14), float32] */, dtype="float32") /* ty=Tensor[(2, 5, 14), float32] */;
  %453 = log10(%452) /* ty=Tensor[(2, 5, 14), float32] */;
  %454 = cast(%453, dtype="float32") /* ty=Tensor[(2, 5, 14), float32] */;
  %455 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(2, 5, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %456 = cast(meta[relay.Constant][23] /* ty=Tensor[(2, 5, 14), float32] */, dtype="float32") /* ty=Tensor[(2, 5, 14), float32] */;
  %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %458 = subtract(%456, %457) /* ty=Tensor[(2, 5, 14), float32] */;
  %459 = cast(%458, dtype="uint64") /* ty=Tensor[(2, 5, 14), uint64] */;
  %460 = shape_of(%453, dtype="int32") /* ty=Tensor[(3), int32] */;
  %461 = cast(%453, dtype="uint64") /* ty=Tensor[(2, 5, 14), uint64] */;
  %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %463 = atanh(%449) /* ty=Tensor[(2, 5, 14), float64] */;
  %464 = @func_418(%451) /* ty=Tensor[(14, 9, 13), float32] */;
  %465 = bitwise_and(%461, %462) /* ty=Tensor[(2, 5, 14), uint64] */;
  (%463, %464, %var_1838, %465)
}

def @func_4112() -> (Tensor[(5, 3, 7), float64],) {
  %468 = fn () -> (Tensor[(5, 3, 7), float64],) {
    %466 = @func_4075() /* ty=(Tensor[(5, 3, 7), float64],) */;
    %467 = %466.0;
    (%467,)
  };
  %468() /* ty=(Tensor[(5, 3, 7), float64],) */
}

def @func_6144(%var_6142: Tensor[(2145), float32], %var_6143: float32) -> (Tensor[(5, 12, 9), float64], Tensor[(2145), float32], Tensor[(300), float64], Tensor[(2145), float32], Tensor[(13, 7, 8), int8], Tensor[(728), int64], Tensor[(5, 12, 9), int16], Tensor[(1100), uint32], Tensor[(270), bool], float32, Tensor[(1100), uint32], Tensor[(5, 12, 9), float64]) {
  %497 = fn (%var_6087: Tensor[(2145), float32], %var_6117: float32) -> (Tensor[(5, 12, 9), float64], Tensor[(2145), float32], Tensor[(300), float64], Tensor[(2145), float32], Tensor[(13, 7, 8), int8], Tensor[(728), int64], Tensor[(5, 12, 9), int16], Tensor[(1100), uint32], Tensor[(270), bool], float32, Tensor[(1100), uint32], Tensor[(5, 12, 9), float64]) {
    %469 = @func_4275() /* ty=(Tensor[(5, 3, 7), float64], Tensor[(5, 3, 7), bool], Tensor[(5, 12, 9), float64]) */;
    %470 = cast(meta[relay.Constant][24] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
    %471 = cast(%var_6087, dtype="float32") /* ty=Tensor[(2145), float32] */;
    %472 = reshape(%470, newshape=[4, 5, 15]) /* ty=Tensor[(4, 5, 15), float64] */;
    %473 = reshape(%471, newshape=[2145]) /* ty=Tensor[(2145), float32] */;
    %474 = @func_2003(%472, %473) /* ty=(Tensor[(1638), float32], Tensor[(2145), float32], Tensor[(4, 5, 15), int32], Tensor[(5, 12), uint32], Tensor[(2145), uint16]) */;
    %475 = cast(meta[relay.Constant][25] /* ty=Tensor[(728), int64] */, dtype="int64") /* ty=Tensor[(728), int64] */;
    %476 = reshape(%475, newshape=[13, 7, 8]) /* ty=Tensor[(13, 7, 8), int64] */;
    %477 = @func_2303(%476) /* ty=(Tensor[(13, 7, 8), bool], Tensor[(13, 7, 8), int8], Tensor[(13, 7, 8), float32], float32, Tensor[(693), int32], Tensor[(2145), float32], Tensor[(13, 7, 8), float32]) */;
    %478 = %469.2;
    %479 = cast(%478, dtype="float64") /* ty=Tensor[(5, 12, 9), float64] */;
    %480 = reshape(%479, newshape=[5, 12, 9]) /* ty=Tensor[(5, 12, 9), float64] */;
    %481 = @func_4093(%480) /* ty=(Tensor[(5, 12, 9), int16],) */;
    %482 = cast(meta[relay.Constant][26] /* ty=Tensor[(270), bool] */, dtype="bool") /* ty=Tensor[(270), bool] */;
    %483 = cast(meta[relay.Constant][26] /* ty=Tensor[(270), bool] */, dtype="bool") /* ty=Tensor[(270), bool] */;
    %484 = cast(%var_6117, dtype="float32") /* ty=float32 */;
    %485 = cast(meta[relay.Constant][27] /* ty=Tensor[(1100), uint32] */, dtype="uint32") /* ty=Tensor[(1100), uint32] */;
    %486 = reshape(%482, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), bool] */;
    %487 = reshape(%483, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), bool] */;
    %488 = reshape(%484, newshape=[]) /* ty=float32 */;
    %489 = reshape(%485, newshape=[1100]) /* ty=Tensor[(1100), uint32] */;
    %490 = @func_5370(%486, %487, %488, %489) /* ty=(Tensor[(2, 15, 9), bool], Tensor[(2, 15, 9), float64], Tensor[(432), float32], Tensor[(2640), float32], float32, Tensor[(2145), float32], Tensor[(1100), uint32]) */;
    %491 = @func_4275() /* ty=(Tensor[(5, 3, 7), float64], Tensor[(5, 3, 7), bool], Tensor[(5, 12, 9), float64]) */;
    %492 = %474.1;
    %493 = %477.1;
    %494 = %481.0;
    %495 = %490.6;
    %496 = %491.2;
    (%478, %492, meta[relay.Constant][24] /* ty=Tensor[(300), float64] */, %var_6087, %493, meta[relay.Constant][25] /* ty=Tensor[(728), int64] */, %494, %495, meta[relay.Constant][26] /* ty=Tensor[(270), bool] */, %var_6117, meta[relay.Constant][27] /* ty=Tensor[(1100), uint32] */, %496)
  };
  %497(%var_6142, %var_6143) /* ty=(Tensor[(5, 12, 9), float64], Tensor[(2145), float32], Tensor[(300), float64], Tensor[(2145), float32], Tensor[(13, 7, 8), int8], Tensor[(728), int64], Tensor[(5, 12, 9), int16], Tensor[(1100), uint32], Tensor[(270), bool], float32, Tensor[(1100), uint32], Tensor[(5, 12, 9), float64]) */
}

def @func_4019(%var_4017: int32) -> (Tensor[(15, 10, 3), int32],) {
  @func_4016(%var_4017) /* ty=(Tensor[(15, 10, 3), int32],) */
}

def @func_4836(%var_4833: float64, %var_4834: Tensor[(432), float32], %var_4835: Tensor[(2145), float32]) -> (Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(5, 12, 9), int32], Tensor[(5, 12, 9), float64], Tensor[(9, 4, 12), float32], Tensor[(432), float32], Tensor[(1100), uint32], Tensor[(2145), float32], Tensor[(5, 3, 7), float64], Tensor[(1560), float64], Tensor[(5, 12, 9), float64], Tensor[(1560), float32]) {
  @func_4831(%var_4833, %var_4834, %var_4835) /* ty=(Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(5, 12, 9), int32], Tensor[(5, 12, 9), float64], Tensor[(9, 4, 12), float32], Tensor[(432), float32], Tensor[(1100), uint32], Tensor[(2145), float32], Tensor[(5, 3, 7), float64], Tensor[(1560), float64], Tensor[(5, 12, 9), float64], Tensor[(1560), float32]) */
}

def @func_7199() -> Tensor[(5, 3, 7), float64] {
  @func_6497() /* ty=Tensor[(5, 3, 7), float64] */
}

def @func_1065(%var_1063: Tensor[(11, 10, 10), uint32], %var_1064: Tensor[(11, 10, 10), uint32]) -> Tensor[(11, 10, 10), bool] {
  %502 = fn (%var_1057: Tensor[(11, 10, 10), uint32], %var_1058: Tensor[(11, 10, 10), uint32]) -> Tensor[(11, 10, 10), bool] {
    %498 = cast(%var_1058, dtype="bool") /* ty=Tensor[(11, 10, 10), bool] */;
    %499 = shape_of(%var_1057, dtype="int32") /* ty=Tensor[(3), int32] */;
    %500 = cast(%var_1057, dtype="bool") /* ty=Tensor[(11, 10, 10), bool] */;
    %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%500, %501) /* ty=Tensor[(11, 10, 10), bool] */
  };
  %502(%var_1063, %var_1064) /* ty=Tensor[(11, 10, 10), bool] */
}

def @func_5142(%var_5130: Tensor[(15, 2, 6), float64]) -> (Tensor[(15, 2, 6), float64], Tensor[(15, 2, 6), float32]) {
  %503 = cast(%var_5130, dtype="float64") /* ty=Tensor[(15, 2, 6), float64] */;
  %504 = cast(%var_5130, dtype="float64") /* ty=Tensor[(15, 2, 6), float64] */;
  %505 = acosh(%504) /* ty=Tensor[(15, 2, 6), float64] */;
  %506 = cast(%505, dtype="float32") /* ty=Tensor[(15, 2, 6), float32] */;
  %507 = asin(%503) /* ty=Tensor[(15, 2, 6), float64] */;
  %508 = erf(%506) /* ty=Tensor[(15, 2, 6), float32] */;
  (%507, %508)
}

def @func_669(%var_667: float32, %var_668: Tensor[(13, 11, 15), float32]) -> (Tensor[(13, 11, 15), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(14, 9, 13), float32]) {
  @func_665(%var_667, %var_668) /* ty=(Tensor[(13, 11, 15), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(14, 9, 13), float32]) */
}

def @func_3554() -> Tensor[(5, 12, 9), float32] {
  @func_3462() /* ty=Tensor[(5, 12, 9), float32] */
}

def @func_2305(%var_2304: Tensor[(13, 7, 8), int64]) -> (Tensor[(13, 7, 8), bool], Tensor[(13, 7, 8), int8], Tensor[(13, 7, 8), float32], float32, Tensor[(693), int32], Tensor[(2145), float32], Tensor[(13, 7, 8), float32]) {
  %539 = fn (%var_2241: Tensor[(13, 7, 8), int64]) -> (Tensor[(13, 7, 8), bool], Tensor[(13, 7, 8), int8], Tensor[(13, 7, 8), float32], float32, Tensor[(693), int32], Tensor[(2145), float32], Tensor[(13, 7, 8), float32]) {
    %509 = cast(meta[relay.Constant][28] /* ty=Tensor[(13, 7, 8), int64] */, dtype="int64") /* ty=Tensor[(13, 7, 8), int64] */;
    %510 = shape_of(%var_2241, dtype="int32") /* ty=Tensor[(3), int32] */;
    %511 = cast(%var_2241, dtype="int64") /* ty=Tensor[(13, 7, 8), int64] */;
    %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %513 = maximum(%511, %512) /* ty=Tensor[(13, 7, 8), int64] */;
    %514 = cast(%513, dtype="bool") /* ty=Tensor[(13, 7, 8), bool] */;
    %515 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(13, 7, 8), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %516 = cast(meta[relay.Constant][28] /* ty=Tensor[(13, 7, 8), int64] */, dtype="bool") /* ty=Tensor[(13, 7, 8), bool] */;
    %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %518 = cast(%var_2241, dtype="int8") /* ty=Tensor[(13, 7, 8), int8] */;
    %519 = shape_of(%513, dtype="int32") /* ty=Tensor[(3), int32] */;
    %520 = cast(%513, dtype="int8") /* ty=Tensor[(13, 7, 8), int8] */;
    %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %522 = cast(%513, dtype="float32") /* ty=Tensor[(13, 7, 8), float32] */;
    %523 = cast(meta[relay.Constant][29] /* ty=Tensor[(693), int32] */, dtype="int32") /* ty=Tensor[(693), int32] */;
    %524 = cast(meta[relay.Constant][29] /* ty=Tensor[(693), int32] */, dtype="int32") /* ty=Tensor[(693), int32] */;
    %525 = cast(meta[relay.Constant][30] /* ty=Tensor[(2145), float32] */, dtype="float32") /* ty=Tensor[(2145), float32] */;
    %526 = reshape(%523, newshape=[11, 7, 9]) /* ty=Tensor[(11, 7, 9), int32] */;
    %527 = reshape(%524, newshape=[11, 7, 9]) /* ty=Tensor[(11, 7, 9), int32] */;
    %528 = reshape(%525, newshape=[143, 15]) /* ty=Tensor[(143, 15), float32] */;
    %529 = @func_1744(%526, %527, %528) /* ty=(Tensor[(11, 7, 9), int32], float32, float32, Tensor[(143, 15), float32]) */;
    %530 = cast(%513, dtype="float32") /* ty=Tensor[(13, 7, 8), float32] */;
    %531 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(13, 7, 8), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %532 = cast(meta[relay.Constant][28] /* ty=Tensor[(13, 7, 8), int64] */, dtype="float32") /* ty=Tensor[(13, 7, 8), float32] */;
    %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %534 = logical_or(%516, %517) /* ty=Tensor[(13, 7, 8), bool] */;
    %535 = multiply(%520, %521) /* ty=Tensor[(13, 7, 8), int8] */;
    %536 = acosh(%522) /* ty=Tensor[(13, 7, 8), float32] */;
    %537 = %529.1;
    %538 = power(%532, %533) /* ty=Tensor[(13, 7, 8), float32] */;
    (%534, %535, %536, %537, meta[relay.Constant][29] /* ty=Tensor[(693), int32] */, meta[relay.Constant][30] /* ty=Tensor[(2145), float32] */, %538)
  };
  %539(%var_2304) /* ty=(Tensor[(13, 7, 8), bool], Tensor[(13, 7, 8), int8], Tensor[(13, 7, 8), float32], float32, Tensor[(693), int32], Tensor[(2145), float32], Tensor[(13, 7, 8), float32]) */
}

def @func_4486() -> (Tensor[(5, 12, 9), float64],) {
  @func_4484() /* ty=(Tensor[(5, 12, 9), float64],) */
}

def @func_4517(%var_4515: Tensor[(5, 12, 9), float64]) -> Tensor[(5, 12, 9), bool] {
  @func_4514(%var_4515) /* ty=Tensor[(5, 12, 9), bool] */
}

def @func_3924(%var_3922: Tensor[(12, 12, 6), float32], %var_3923: Tensor[(40, 16), int16]) -> (Tensor[(12, 12, 6), float32], Tensor[(8, 5, 16), int16], Tensor[(40, 16), int16], Tensor[(5, 12, 9), float32]) {
  %548 = fn (%var_3898: Tensor[(12, 12, 6), float32], %var_3905: Tensor[(40, 16), int16]) -> (Tensor[(12, 12, 6), float32], Tensor[(8, 5, 16), int16], Tensor[(40, 16), int16], Tensor[(5, 12, 9), float32]) {
    %540 = cast(%var_3898, dtype="float32") /* ty=Tensor[(12, 12, 6), float32] */;
    %541 = cast(%var_3905, dtype="int16") /* ty=Tensor[(40, 16), int16] */;
    %542 = cast(%var_3905, dtype="int16") /* ty=Tensor[(40, 16), int16] */;
    %543 = reshape(%541, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), int16] */;
    %544 = reshape(%542, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), int16] */;
    %545 = acosh(%540) /* ty=Tensor[(12, 12, 6), float32] */;
    %546 = @func_2343(%543, %544) /* ty=Tensor[(8, 5, 16), int16] */;
    %547 = @func_3462() /* ty=Tensor[(5, 12, 9), float32] */;
    (%545, %546, %var_3905, %547)
  };
  %548(%var_3922, %var_3923) /* ty=(Tensor[(12, 12, 6), float32], Tensor[(8, 5, 16), int16], Tensor[(40, 16), int16], Tensor[(5, 12, 9), float32]) */
}

def @func_4049(%var_4048: Tensor[(5, 3, 7), float64]) -> (Tensor[(5, 3, 7), bool],) {
  %555 = fn (%var_4042: Tensor[(5, 3, 7), float64]) -> (Tensor[(5, 3, 7), bool],) {
    %549 = @func_3971() /* ty=Tensor[(5, 3, 7), float64] */;
    %550 = cast(%var_4042, dtype="bool") /* ty=Tensor[(5, 3, 7), bool] */;
    %551 = shape_of(%549, dtype="int32") /* ty=Tensor[(3), int32] */;
    %552 = cast(%549, dtype="bool") /* ty=Tensor[(5, 3, 7), bool] */;
    %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %554 = greater_equal(%552, %553) /* ty=Tensor[(5, 3, 7), bool] */;
    (%554,)
  };
  %555(%var_4048) /* ty=(Tensor[(5, 3, 7), bool],) */
}

def @func_6061() -> (Tensor[(5, 3, 7), float64], Tensor[(5, 12, 9), bool], Tensor[(540), float64], Tensor[(5, 3, 7), float64]) {
  @func_6059() /* ty=(Tensor[(5, 3, 7), float64], Tensor[(5, 12, 9), bool], Tensor[(540), float64], Tensor[(5, 3, 7), float64]) */
}

def @func_3330() -> (Tensor[(5, 12, 9), float64], Tensor[(5, 12, 9), float32]) {
  %560 = fn () -> (Tensor[(5, 12, 9), float64], Tensor[(5, 12, 9), float32]) {
    %556 = cast(meta[relay.Constant][31] /* ty=Tensor[(5, 12, 9), float64] */, dtype="float64") /* ty=Tensor[(5, 12, 9), float64] */;
    %557 = cast(meta[relay.Constant][31] /* ty=Tensor[(5, 12, 9), float64] */, dtype="float32") /* ty=Tensor[(5, 12, 9), float32] */;
    %558 = log2(%556) /* ty=Tensor[(5, 12, 9), float64] */;
    %559 = tan(%557) /* ty=Tensor[(5, 12, 9), float32] */;
    (%558, %559)
  };
  %560() /* ty=(Tensor[(5, 12, 9), float64], Tensor[(5, 12, 9), float32]) */
}

def @func_5945(%var_5943: Tensor[(924), bool]) -> (Tensor[(5, 12, 9), float32], Tensor[(5, 12, 9), float64], Tensor[(924), bool]) {
  @func_5942(%var_5943) /* ty=(Tensor[(5, 12, 9), float32], Tensor[(5, 12, 9), float64], Tensor[(924), bool]) */
}

def @func_3992() -> (Tensor[(5, 12, 9), float64],) {
  @func_3990() /* ty=(Tensor[(5, 12, 9), float64],) */
}

def @func_6453(%var_6445: Tensor[(2080), float32]) -> (Tensor[(5, 3, 7), float64], Tensor[(5, 12, 9), float64], Tensor[(2145), float32], Tensor[(693), int32], Tensor[(1560), float64], float64, Tensor[(4, 108), float32], Tensor[(5, 12, 9), float64], Tensor[(2080), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32]) {
  %561 = cast(meta[relay.Constant][32] /* ty=Tensor[(2145), float32] */, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %562 = cast(meta[relay.Constant][33] /* ty=Tensor[(693), int32] */, dtype="int32") /* ty=Tensor[(693), int32] */;
  %563 = reshape(%561, newshape=[2145]) /* ty=Tensor[(2145), float32] */;
  %564 = reshape(%562, newshape=[693]) /* ty=Tensor[(693), int32] */;
  %565 = @func_4680(%563, %564) /* ty=(Tensor[(5, 3, 7), float64], Tensor[(143, 15), float32], Tensor[(2145), float32], Tensor[(693), uint16], Tensor[(5, 12, 9), float64], Tensor[(5, 12, 9), float32], Tensor[(5, 3, 7), float64]) */;
  %566 = cast(-2.6043f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %567 = cast(meta[relay.Constant][34] /* ty=Tensor[(4, 108), float32] */, dtype="float32") /* ty=Tensor[(4, 108), float32] */;
  %568 = cast(meta[relay.Constant][32] /* ty=Tensor[(2145), float32] */, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %569 = reshape(%566, newshape=[]) /* ty=float64 */;
  %570 = reshape(%567, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %571 = reshape(%568, newshape=[2145]) /* ty=Tensor[(2145), float32] */;
  %572 = @func_4831(%569, %570, %571) /* ty=(Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(5, 12, 9), int32], Tensor[(5, 12, 9), float64], Tensor[(9, 4, 12), float32], Tensor[(432), float32], Tensor[(1100), uint32], Tensor[(2145), float32], Tensor[(5, 3, 7), float64], Tensor[(1560), float64], Tensor[(5, 12, 9), float64], Tensor[(1560), float32]) */;
  %573 = cast(%var_6445, dtype="float32") /* ty=Tensor[(2080), float32] */;
  %574 = reshape(%573, newshape=[13, 16, 10]) /* ty=Tensor[(13, 16, 10), float32] */;
  %575 = @func_4566(%574) /* ty=(Tensor[(13, 16, 10), float32], Tensor[(5, 12, 9), float64]) */;
  %576 = cast(meta[relay.Constant][35] /* ty=Tensor[(1638), float32] */, dtype="float32") /* ty=Tensor[(1638), float32] */;
  %577 = reshape(%576, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float32] */;
  %578 = @func_3971() /* ty=Tensor[(5, 3, 7), float64] */;
  %579 = %565.4;
  %580 = %572.9;
  %581 = %575.1;
  %582 = @func_418(%577) /* ty=Tensor[(14, 9, 13), float32] */;
  (%578, %579, meta[relay.Constant][32] /* ty=Tensor[(2145), float32] */, meta[relay.Constant][33] /* ty=Tensor[(693), int32] */, %580, -2.6043f64 /* ty=float64 */, meta[relay.Constant][34] /* ty=Tensor[(4, 108), float32] */, %581, %var_6445, %582, meta[relay.Constant][35] /* ty=Tensor[(1638), float32] */)
}

def @func_6214(%var_6213: Tensor[(1170), float32]) -> (Tensor[(5, 12, 9), float64], Tensor[(10, 13, 9), float32], Tensor[(1170), float32]) {
  %588 = fn (%var_6210: Tensor[(1170), float32]) -> (Tensor[(5, 12, 9), float64], Tensor[(10, 13, 9), float32], Tensor[(1170), float32]) {
    %583 = @func_4484() /* ty=(Tensor[(5, 12, 9), float64],) */;
    %584 = cast(%var_6210, dtype="float32") /* ty=Tensor[(1170), float32] */;
    %585 = reshape(%584, newshape=[10, 13, 9]) /* ty=Tensor[(10, 13, 9), float32] */;
    %586 = %583.0;
    %587 = @func_4741(%585) /* ty=Tensor[(10, 13, 9), float32] */;
    (%586, %587, %var_6210)
  };
  %588(%var_6213) /* ty=(Tensor[(5, 12, 9), float64], Tensor[(10, 13, 9), float32], Tensor[(1170), float32]) */
}

def @func_4680(%var_4640: Tensor[(2145), float32], %var_4649: Tensor[(693), int32]) -> (Tensor[(5, 3, 7), float64], Tensor[(143, 15), float32], Tensor[(2145), float32], Tensor[(693), uint16], Tensor[(5, 12, 9), float64], Tensor[(5, 12, 9), float32], Tensor[(5, 3, 7), float64]) {
  %589 = cast(meta[relay.Constant][36] /* ty=Tensor[(693), int32] */, dtype="int32") /* ty=Tensor[(693), int32] */;
  %590 = cast(meta[relay.Constant][36] /* ty=Tensor[(693), int32] */, dtype="int32") /* ty=Tensor[(693), int32] */;
  %591 = cast(%var_4640, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %592 = reshape(%589, newshape=[11, 7, 9]) /* ty=Tensor[(11, 7, 9), int32] */;
  %593 = reshape(%590, newshape=[11, 7, 9]) /* ty=Tensor[(11, 7, 9), int32] */;
  %594 = reshape(%591, newshape=[143, 15]) /* ty=Tensor[(143, 15), float32] */;
  %595 = @func_1744(%592, %593, %594) /* ty=(Tensor[(11, 7, 9), int32], float32, float32, Tensor[(143, 15), float32]) */;
  %596 = cast(%var_4649, dtype="uint16") /* ty=Tensor[(693), uint16] */;
  %597 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(693), int32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %598 = cast(meta[relay.Constant][36] /* ty=Tensor[(693), int32] */, dtype="uint16") /* ty=Tensor[(693), uint16] */;
  %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %600 = @func_3990() /* ty=(Tensor[(5, 12, 9), float64],) */;
  %601 = @func_4548() /* ty=(Tensor[(5, 3, 7), float64],) */;
  %602 = @func_3971() /* ty=Tensor[(5, 3, 7), float64] */;
  %603 = %595.3;
  %604 = maximum(%598, %599) /* ty=Tensor[(693), uint16] */;
  %605 = %600.0;
  %606 = @func_3554() /* ty=Tensor[(5, 12, 9), float32] */;
  %607 = %601.0;
  (%602, %603, %var_4640, %604, %605, %606, %607)
}

def @func_5620() -> Tensor[(5, 3, 7), float64] {
  %611 = fn () -> Tensor[(5, 3, 7), float64] {
    %608 = @func_4111() /* ty=(Tensor[(5, 3, 7), float64],) */;
    %609 = %608.0;
    %610 = cast(%609, dtype="float64") /* ty=Tensor[(5, 3, 7), float64] */;
    log(%610) /* ty=Tensor[(5, 3, 7), float64] */
  };
  %611() /* ty=Tensor[(5, 3, 7), float64] */
}

def @func_5409() -> Tensor[(5, 12, 9), float32] {
  @func_5407() /* ty=Tensor[(5, 12, 9), float32] */
}

def @func_6658() -> (Tensor[(5, 12, 9), float64], Tensor[(4, 108), float32], Tensor[(2080), float32]) {
  %619 = fn () -> (Tensor[(5, 12, 9), float64], Tensor[(4, 108), float32], Tensor[(2080), float32]) {
    %612 = @func_4144() /* ty=Tensor[(5, 12, 9), float32] */;
    %613 = cast(%612, dtype="float64") /* ty=Tensor[(5, 12, 9), float64] */;
    %614 = cast(meta[relay.Constant][37] /* ty=Tensor[(2080), float32] */, dtype="float32") /* ty=Tensor[(2080), float32] */;
    %615 = reshape(%614, newshape=[2080]) /* ty=Tensor[(2080), float32] */;
    %616 = @func_6453(%615) /* ty=(Tensor[(5, 3, 7), float64], Tensor[(5, 12, 9), float64], Tensor[(2145), float32], Tensor[(693), int32], Tensor[(1560), float64], float64, Tensor[(4, 108), float32], Tensor[(5, 12, 9), float64], Tensor[(2080), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32]) */;
    %617 = erf(%613) /* ty=Tensor[(5, 12, 9), float64] */;
    %618 = %616.6;
    (%617, %618, meta[relay.Constant][37] /* ty=Tensor[(2080), float32] */)
  };
  %619() /* ty=(Tensor[(5, 12, 9), float64], Tensor[(4, 108), float32], Tensor[(2080), float32]) */
}

def @func_6498() -> Tensor[(5, 3, 7), float64] {
  %621 = fn () -> Tensor[(5, 3, 7), float64] {
    %620 = @func_4075() /* ty=(Tensor[(5, 3, 7), float64],) */;
    %620.0
  };
  %621() /* ty=Tensor[(5, 3, 7), float64] */
}

def @func_4930(%var_4894: Tensor[(6, 14, 11), bool], %var_4895: Tensor[(6, 14, 11), bool]) -> (Tensor[(6, 14, 11), bool], Tensor[(6, 14, 11), float64], Tensor[(5, 12, 9), float64], Tensor[(5, 12, 9), float64], Tensor[(5, 3, 7), float64]) {
  %622 = cast(%var_4895, dtype="bool") /* ty=Tensor[(6, 14, 11), bool] */;
  %623 = shape_of(%var_4894, dtype="int32") /* ty=Tensor[(3), int32] */;
  %624 = cast(%var_4894, dtype="bool") /* ty=Tensor[(6, 14, 11), bool] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %626 = cast(%var_4894, dtype="float64") /* ty=Tensor[(6, 14, 11), float64] */;
  %627 = @func_3990() /* ty=(Tensor[(5, 12, 9), float64],) */;
  %628 = @func_4275() /* ty=(Tensor[(5, 3, 7), float64], Tensor[(5, 3, 7), bool], Tensor[(5, 12, 9), float64]) */;
  %629 = logical_and(%624, %625) /* ty=Tensor[(6, 14, 11), bool] */;
  %630 = log2(%626) /* ty=Tensor[(6, 14, 11), float64] */;
  %631 = %627.0;
  %632 = %628.2;
  %633 = @func_3939() /* ty=Tensor[(5, 3, 7), float64] */;
  (%629, %630, %631, %632, %633)
}

def @func_5833(%var_5831: Tensor[(432), float32], %var_5832: Tensor[(2145), float32]) -> (Tensor[(5, 3, 7), float64], Tensor[(7, 10, 12), bool], Tensor[(840), int16], Tensor[(5, 3, 7), float64], Tensor[(2145), float32], float64, Tensor[(432), float32], Tensor[(2145), float32]) {
  %652 = fn (%var_5820: Tensor[(432), float32], %var_5821: Tensor[(2145), float32]) -> (Tensor[(5, 3, 7), float64], Tensor[(7, 10, 12), bool], Tensor[(840), int16], Tensor[(5, 3, 7), float64], Tensor[(2145), float32], float64, Tensor[(432), float32], Tensor[(2145), float32]) {
    %634 = @func_4732() /* ty=(Tensor[(5, 3, 7), float64],) */;
    %635 = cast(meta[relay.Constant][38] /* ty=Tensor[(840), int16] */, dtype="int16") /* ty=Tensor[(840), int16] */;
    %636 = cast(meta[relay.Constant][38] /* ty=Tensor[(840), int16] */, dtype="int16") /* ty=Tensor[(840), int16] */;
    %637 = reshape(%635, newshape=[7, 10, 12]) /* ty=Tensor[(7, 10, 12), int16] */;
    %638 = reshape(%636, newshape=[7, 10, 12]) /* ty=Tensor[(7, 10, 12), int16] */;
    %639 = @func_3583(%637, %638) /* ty=(Tensor[(7, 10, 12), bool],) */;
    %640 = @func_5332() /* ty=(Tensor[(5, 3, 7), float64],) */;
    %641 = cast(2.78793f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %642 = cast(%var_5820, dtype="float32") /* ty=Tensor[(432), float32] */;
    %643 = cast(%var_5821, dtype="float32") /* ty=Tensor[(2145), float32] */;
    %644 = reshape(%641, newshape=[]) /* ty=float64 */;
    %645 = reshape(%642, newshape=[432]) /* ty=Tensor[(432), float32] */;
    %646 = reshape(%643, newshape=[2145]) /* ty=Tensor[(2145), float32] */;
    %647 = @func_4831(%644, %645, %646) /* ty=(Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(5, 12, 9), int32], Tensor[(5, 12, 9), float64], Tensor[(9, 4, 12), float32], Tensor[(432), float32], Tensor[(1100), uint32], Tensor[(2145), float32], Tensor[(5, 3, 7), float64], Tensor[(1560), float64], Tensor[(5, 12, 9), float64], Tensor[(1560), float32]) */;
    %648 = %634.0;
    %649 = %639.0;
    %650 = %640.0;
    %651 = %647.7;
    (%648, %649, meta[relay.Constant][38] /* ty=Tensor[(840), int16] */, %650, %651, 2.78793f64 /* ty=float64 */, %var_5820, %var_5821)
  };
  %652(%var_5831, %var_5832) /* ty=(Tensor[(5, 3, 7), float64], Tensor[(7, 10, 12), bool], Tensor[(840), int16], Tensor[(5, 3, 7), float64], Tensor[(2145), float32], float64, Tensor[(432), float32], Tensor[(2145), float32]) */
}

def @func_1494(%var_1492: float32, %var_1493: Tensor[(2145), float32]) -> (Tensor[(12, 10, 15), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(14, 9, 13), float32], float32, Tensor[(2145), float32]) {
  %666 = fn (%var_1480: float32, %var_1481: Tensor[(2145), float32]) -> (Tensor[(12, 10, 15), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(14, 9, 13), float32], float32, Tensor[(2145), float32]) {
    %653 = cast(meta[relay.Constant][39] /* ty=Tensor[(12, 10, 15), float64] */, dtype="float64") /* ty=Tensor[(12, 10, 15), float64] */;
    %654 = cos(%653) /* ty=Tensor[(12, 10, 15), float64] */;
    %655 = cast(%654, dtype="float32") /* ty=Tensor[(12, 10, 15), float32] */;
    %656 = cast(meta[relay.Constant][40] /* ty=Tensor[(1638), float32] */, dtype="float32") /* ty=Tensor[(1638), float32] */;
    %657 = reshape(%656, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float32] */;
    %658 = cast(%var_1480, dtype="float32") /* ty=float32 */;
    %659 = cast(%var_1481, dtype="float32") /* ty=Tensor[(2145), float32] */;
    %660 = reshape(%658, newshape=[]) /* ty=float32 */;
    %661 = reshape(%659, newshape=[13, 11, 15]) /* ty=Tensor[(13, 11, 15), float32] */;
    %662 = @func_665(%660, %661) /* ty=(Tensor[(13, 11, 15), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(14, 9, 13), float32]) */;
    %663 = rsqrt(%655) /* ty=Tensor[(12, 10, 15), float32] */;
    %664 = @func_418(%657) /* ty=Tensor[(14, 9, 13), float32] */;
    %665 = %662.1;
    (%663, %664, meta[relay.Constant][40] /* ty=Tensor[(1638), float32] */, %665, %var_1480, %var_1481)
  };
  %666(%var_1492, %var_1493) /* ty=(Tensor[(12, 10, 15), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(14, 9, 13), float32], float32, Tensor[(2145), float32]) */
}

def @func_6456(%var_6454: Tensor[(2080), float32]) -> (Tensor[(5, 3, 7), float64], Tensor[(5, 12, 9), float64], Tensor[(2145), float32], Tensor[(693), int32], Tensor[(1560), float64], float64, Tensor[(4, 108), float32], Tensor[(5, 12, 9), float64], Tensor[(2080), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32]) {
  @func_6453(%var_6454) /* ty=(Tensor[(5, 3, 7), float64], Tensor[(5, 12, 9), float64], Tensor[(2145), float32], Tensor[(693), int32], Tensor[(1560), float64], float64, Tensor[(4, 108), float32], Tensor[(5, 12, 9), float64], Tensor[(2080), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32]) */
}

def @func_2346(%var_2344: Tensor[(8, 5, 16), int16], %var_2345: Tensor[(8, 5, 16), int16]) -> Tensor[(8, 5, 16), int16] {
  %671 = fn (%var_2329: Tensor[(8, 5, 16), int16], %var_2330: Tensor[(8, 5, 16), int16]) -> Tensor[(8, 5, 16), int16] {
    %667 = cast(%var_2330, dtype="int16") /* ty=Tensor[(8, 5, 16), int16] */;
    %668 = shape_of(%var_2329, dtype="int32") /* ty=Tensor[(3), int32] */;
    %669 = cast(%var_2329, dtype="int16") /* ty=Tensor[(8, 5, 16), int16] */;
    %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    minimum(%669, %670) /* ty=Tensor[(8, 5, 16), int16] */
  };
  %671(%var_2344, %var_2345) /* ty=Tensor[(8, 5, 16), int16] */
}

def @func_4075() -> (Tensor[(5, 3, 7), float64],) {
  %672 = @func_3939() /* ty=Tensor[(5, 3, 7), float64] */;
  (%672,)
}

def @func_6059() -> (Tensor[(5, 3, 7), float64], Tensor[(5, 12, 9), bool], Tensor[(540), float64], Tensor[(5, 3, 7), float64]) {
  %673 = cast(meta[relay.Constant][41] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
  %674 = reshape(%673, newshape=[5, 12, 9]) /* ty=Tensor[(5, 12, 9), float64] */;
  %675 = @func_5619() /* ty=Tensor[(5, 3, 7), float64] */;
  %676 = @func_4514(%674) /* ty=Tensor[(5, 12, 9), bool] */;
  %677 = @func_3971() /* ty=Tensor[(5, 3, 7), float64] */;
  (%675, %676, meta[relay.Constant][41] /* ty=Tensor[(540), float64] */, %677)
}

def @func_1847(%var_1845: Tensor[(1638), float32]) -> (Tensor[(2, 5, 14), float64], Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(2, 5, 14), uint64]) {
  @func_1844(%var_1845) /* ty=(Tensor[(2, 5, 14), float64], Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(2, 5, 14), uint64]) */
}

def @func_3972() -> Tensor[(5, 3, 7), float64] {
  %678 = fn () -> Tensor[(5, 3, 7), float64] {
    @func_3939() /* ty=Tensor[(5, 3, 7), float64] */
  };
  %678() /* ty=Tensor[(5, 3, 7), float64] */
}

def @func_4373(%var_4371: Tensor[(3, 1, 5), int32], %var_4372: Tensor[(3, 13, 5), int32]) -> (Tensor[(3, 13, 5), int32], Tensor[(5, 3, 7), float64]) {
  @func_4369(%var_4371, %var_4372) /* ty=(Tensor[(3, 13, 5), int32], Tensor[(5, 3, 7), float64]) */
}

def @func_5145(%var_5143: Tensor[(15, 2, 6), float64]) -> (Tensor[(15, 2, 6), float64], Tensor[(15, 2, 6), float32]) {
  @func_5142(%var_5143) /* ty=(Tensor[(15, 2, 6), float64], Tensor[(15, 2, 6), float32]) */
}

def @func_5887(%var_5884: Tensor[(12, 3, 11), bool], %var_5885: Tensor[(12, 3, 11), bool], %var_5886: Tensor[(12, 3, 11), bool]) -> (Tensor[(12, 3, 11), bool], Tensor[(12, 3, 11), bool]) {
  %689 = fn (%var_5857: Tensor[(12, 3, 11), bool], %var_5858: Tensor[(12, 3, 11), bool], %var_5873: Tensor[(12, 3, 11), bool]) -> (Tensor[(12, 3, 11), bool], Tensor[(12, 3, 11), bool]) {
    %679 = cast(%var_5858, dtype="bool") /* ty=Tensor[(12, 3, 11), bool] */;
    %680 = shape_of(%var_5857, dtype="int32") /* ty=Tensor[(3), int32] */;
    %681 = cast(%var_5857, dtype="bool") /* ty=Tensor[(12, 3, 11), bool] */;
    %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %683 = cast(%var_5873, dtype="bool") /* ty=Tensor[(12, 3, 11), bool] */;
    %684 = shape_of(%var_5858, dtype="int32") /* ty=Tensor[(3), int32] */;
    %685 = cast(%var_5858, dtype="bool") /* ty=Tensor[(12, 3, 11), bool] */;
    %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %687 = logical_and(%681, %682) /* ty=Tensor[(12, 3, 11), bool] */;
    %688 = equal(%685, %686) /* ty=Tensor[(12, 3, 11), bool] */;
    (%687, %688)
  };
  %689(%var_5884, %var_5885, %var_5886) /* ty=(Tensor[(12, 3, 11), bool], Tensor[(12, 3, 11), bool]) */
}

def @func_4733() -> (Tensor[(5, 3, 7), float64],) {
  %693 = fn () -> (Tensor[(5, 3, 7), float64],) {
    %690 = @func_3939() /* ty=Tensor[(5, 3, 7), float64] */;
    %691 = cast(%690, dtype="float64") /* ty=Tensor[(5, 3, 7), float64] */;
    %692 = asinh(%691) /* ty=Tensor[(5, 3, 7), float64] */;
    (%692,)
  };
  %693() /* ty=(Tensor[(5, 3, 7), float64],) */
}

def @func_4549() -> (Tensor[(5, 3, 7), float64],) {
  %697 = fn () -> (Tensor[(5, 3, 7), float64],) {
    %694 = @func_3939() /* ty=Tensor[(5, 3, 7), float64] */;
    %695 = cast(%694, dtype="float64") /* ty=Tensor[(5, 3, 7), float64] */;
    %696 = cos(%695) /* ty=Tensor[(5, 3, 7), float64] */;
    (%696,)
  };
  %697() /* ty=(Tensor[(5, 3, 7), float64],) */
}

def @func_7158(%var_7157: float64) -> (Tensor[(5, 3, 7), bool], Tensor[(5, 12, 9), float64], float64, Tensor[(432), float32], Tensor[(2145), float32]) {
  %708 = fn (%var_7119: float64) -> (Tensor[(5, 3, 7), bool], Tensor[(5, 12, 9), float64], float64, Tensor[(432), float32], Tensor[(2145), float32]) {
    %698 = @func_6308() /* ty=(Tensor[(5, 3, 7), bool], Tensor[(5, 3, 7), float64]) */;
    %699 = cast(%var_7119, dtype="float64") /* ty=float64 */;
    %700 = cast(meta[relay.Constant][42] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
    %701 = cast(meta[relay.Constant][43] /* ty=Tensor[(2145), float32] */, dtype="float32") /* ty=Tensor[(2145), float32] */;
    %702 = reshape(%699, newshape=[]) /* ty=float64 */;
    %703 = reshape(%700, newshape=[432]) /* ty=Tensor[(432), float32] */;
    %704 = reshape(%701, newshape=[2145]) /* ty=Tensor[(2145), float32] */;
    %705 = @func_4831(%702, %703, %704) /* ty=(Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(5, 12, 9), int32], Tensor[(5, 12, 9), float64], Tensor[(9, 4, 12), float32], Tensor[(432), float32], Tensor[(1100), uint32], Tensor[(2145), float32], Tensor[(5, 3, 7), float64], Tensor[(1560), float64], Tensor[(5, 12, 9), float64], Tensor[(1560), float32]) */;
    %706 = %698.0;
    %707 = %705.3;
    (%706, %707, %var_7119, meta[relay.Constant][42] /* ty=Tensor[(432), float32] */, meta[relay.Constant][43] /* ty=Tensor[(2145), float32] */)
  };
  %708(%var_7157) /* ty=(Tensor[(5, 3, 7), bool], Tensor[(5, 12, 9), float64], float64, Tensor[(432), float32], Tensor[(2145), float32]) */
}

def @func_5425() -> (Tensor[(5, 3, 7), float64],) {
  @func_5423() /* ty=(Tensor[(5, 3, 7), float64],) */
}

def @func_2946(%var_2909: Tensor[(15, 11, 16), float32], %var_2930: float32, %var_2931: Tensor[(1, 2145), float32], %var_2934: Tensor[(1100), uint32]) -> (Tensor[(15, 11, 16), uint32], Tensor[(13, 3, 11), float32], Tensor[(429), float64], Tensor[(640), int16], Tensor[(432), float32], float32, Tensor[(1, 2145), float32], Tensor[(11, 10, 10), bool], Tensor[(1100), uint32]) {
  %709 = cast(%var_2909, dtype="float32") /* ty=Tensor[(15, 11, 16), float32] */;
  %710 = sqrt(%709) /* ty=Tensor[(15, 11, 16), float32] */;
  %711 = cast(%var_2909, dtype="uint32") /* ty=Tensor[(15, 11, 16), uint32] */;
  %712 = shape_of(%710, dtype="int32") /* ty=Tensor[(3), int32] */;
  %713 = cast(%710, dtype="uint32") /* ty=Tensor[(15, 11, 16), uint32] */;
  %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %715 = cast(meta[relay.Constant][44] /* ty=Tensor[(429), float64] */, dtype="float64") /* ty=Tensor[(429), float64] */;
  %716 = cast(meta[relay.Constant][45] /* ty=Tensor[(640), int16] */, dtype="int16") /* ty=Tensor[(640), int16] */;
  %717 = cast(meta[relay.Constant][46] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %718 = cast(%var_2930, dtype="float32") /* ty=float32 */;
  %719 = cast(%var_2931, dtype="float32") /* ty=Tensor[(1, 2145), float32] */;
  %720 = reshape(%715, newshape=[13, 3, 11]) /* ty=Tensor[(13, 3, 11), float64] */;
  %721 = reshape(%716, newshape=[640]) /* ty=Tensor[(640), int16] */;
  %722 = reshape(%717, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %723 = reshape(%718, newshape=[]) /* ty=float32 */;
  %724 = reshape(%719, newshape=[715, 3]) /* ty=Tensor[(715, 3), float32] */;
  %725 = @func_2834(%720, %721, %722, %723, %724) /* ty=(Tensor[(8, 5, 16), int16], Tensor[(640), int16], Tensor[(13, 3, 11), float32], Tensor[(9, 4, 12), float32], Tensor[(432), float32], Tensor[(2145), float32], Tensor[(715, 3), float32], Tensor[(13, 3, 11), bool]) */;
  %726 = cast(%var_2934, dtype="uint32") /* ty=Tensor[(1100), uint32] */;
  %727 = cast(%var_2934, dtype="uint32") /* ty=Tensor[(1100), uint32] */;
  %728 = reshape(%726, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), uint32] */;
  %729 = reshape(%727, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), uint32] */;
  %730 = add(%713, %714) /* ty=Tensor[(15, 11, 16), uint32] */;
  %731 = %725.2;
  %732 = @func_1062(%728, %729) /* ty=Tensor[(11, 10, 10), bool] */;
  (%730, %731, meta[relay.Constant][44] /* ty=Tensor[(429), float64] */, meta[relay.Constant][45] /* ty=Tensor[(640), int16] */, meta[relay.Constant][46] /* ty=Tensor[(432), float32] */, %var_2930, %var_2931, %732, %var_2934)
}

def @func_6187(%var_6185: Tensor[(11, 15, 13), uint32], %var_6186: Tensor[(11, 15, 13), uint32]) -> (Tensor[(11, 15, 13), bool], Tensor[(924), bool], Tensor[(924), bool]) {
  %742 = fn (%var_6174: Tensor[(11, 15, 13), uint32], %var_6175: Tensor[(11, 15, 13), uint32]) -> (Tensor[(11, 15, 13), bool], Tensor[(924), bool], Tensor[(924), bool]) {
    %733 = cast(%var_6175, dtype="bool") /* ty=Tensor[(11, 15, 13), bool] */;
    %734 = shape_of(%var_6174, dtype="int32") /* ty=Tensor[(3), int32] */;
    %735 = cast(%var_6174, dtype="bool") /* ty=Tensor[(11, 15, 13), bool] */;
    %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %737 = cast(meta[relay.Constant][47] /* ty=Tensor[(924), bool] */, dtype="bool") /* ty=Tensor[(924), bool] */;
    %738 = reshape(%737, newshape=[924]) /* ty=Tensor[(924), bool] */;
    %739 = @func_5942(%738) /* ty=(Tensor[(5, 12, 9), float32], Tensor[(5, 12, 9), float64], Tensor[(924), bool]) */;
    %740 = greater_equal(%735, %736) /* ty=Tensor[(11, 15, 13), bool] */;
    %741 = %739.2;
    (%740, %741, meta[relay.Constant][47] /* ty=Tensor[(924), bool] */)
  };
  %742(%var_6185, %var_6186) /* ty=(Tensor[(11, 15, 13), bool], Tensor[(924), bool], Tensor[(924), bool]) */
}

def @func_4874() -> (Tensor[(5, 12, 9), float64], Tensor[(2145), float32], Tensor[(5, 12, 9), float64]) {
  %748 = fn () -> (Tensor[(5, 12, 9), float64], Tensor[(2145), float32], Tensor[(5, 12, 9), float64]) {
    %743 = @func_3990() /* ty=(Tensor[(5, 12, 9), float64],) */;
    %744 = @func_4184() /* ty=(Tensor[(5, 12, 9), float32], Tensor[(12, 10, 15), float32], float32, Tensor[(2145), float32]) */;
    %745 = %743.0;
    %746 = %744.3;
    %747 = @func_4232() /* ty=Tensor[(5, 12, 9), float64] */;
    (%745, %746, %747)
  };
  %748() /* ty=(Tensor[(5, 12, 9), float64], Tensor[(2145), float32], Tensor[(5, 12, 9), float64]) */
}

def @func_6843(%var_6841: Tensor[(5, 3, 7), float64], %var_6842: Tensor[(432), float32]) -> (Tensor[(5, 3, 7), uint32], Tensor[(9, 4, 12), float32], float64, Tensor[(432), float32], Tensor[(2145), float32], Tensor[(5, 12, 9), float64], Tensor[(13, 7, 8), float32], Tensor[(728), int64]) {
  @func_6839(%var_6841, %var_6842) /* ty=(Tensor[(5, 3, 7), uint32], Tensor[(9, 4, 12), float32], float64, Tensor[(432), float32], Tensor[(2145), float32], Tensor[(5, 12, 9), float64], Tensor[(13, 7, 8), float32], Tensor[(728), int64]) */
}

def @func_4484() -> (Tensor[(5, 12, 9), float64],) {
  %749 = @func_3433() /* ty=Tensor[(5, 12, 9), float64] */;
  (%749,)
}

def @func_5057(%var_5052: uint8, %var_5053: Tensor[(3, 10, 14), uint8], %var_5054: Tensor[(715, 3), float32], %var_5055: Tensor[(1638), float32], %var_5056: Tensor[(1, 15), int32]) -> (Tensor[(6, 260), float64], Tensor[(432), float32], Tensor[(1100), uint32], Tensor[(715, 3), float32], Tensor[(8, 5, 16), int16], Tensor[(864), float32], Tensor[(640), int16], Tensor[(5, 12, 9), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(3, 10, 14), float32], Tensor[(11, 10, 10), uint8], Tensor[(5, 3, 7), float64], Tensor[(1, 15), int32], Tensor[(195), int32], Tensor[(300), float64], Tensor[(3, 10, 14), float32]) {
  %809 = fn (%var_4956: uint8, %var_4957: Tensor[(3, 10, 14), uint8], %var_4966: Tensor[(715, 3), float32], %var_5009: Tensor[(1638), float32], %var_5031: Tensor[(1, 15), int32]) -> (Tensor[(6, 260), float64], Tensor[(432), float32], Tensor[(1100), uint32], Tensor[(715, 3), float32], Tensor[(8, 5, 16), int16], Tensor[(864), float32], Tensor[(640), int16], Tensor[(5, 12, 9), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(3, 10, 14), float32], Tensor[(11, 10, 10), uint8], Tensor[(5, 3, 7), float64], Tensor[(1, 15), int32], Tensor[(195), int32], Tensor[(300), float64], Tensor[(3, 10, 14), float32]) {
    %750 = cast(meta[relay.Constant][51] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
    %751 = cast(meta[relay.Constant][52] /* ty=Tensor[(640), int16] */, dtype="int16") /* ty=Tensor[(640), int16] */;
    %752 = reshape(%750, newshape=[12, 12, 6]) /* ty=Tensor[(12, 12, 6), float32] */;
    %753 = reshape(%751, newshape=[40, 16]) /* ty=Tensor[(40, 16), int16] */;
    %754 = @func_3921(%752, %753) /* ty=(Tensor[(12, 12, 6), float32], Tensor[(8, 5, 16), int16], Tensor[(40, 16), int16], Tensor[(5, 12, 9), float32]) */;
    %755 = cast(%var_5009, dtype="float32") /* ty=Tensor[(1638), float32] */;
    %756 = reshape(%755, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float32] */;
    %757 = cast(%var_4956, dtype="uint8") /* ty=uint8 */;
    %758 = cast(%var_4957, dtype="uint8") /* ty=Tensor[(3, 10, 14), uint8] */;
    %759 = bitwise_xor(%757, %758) /* ty=Tensor[(3, 10, 14), uint8] */;
    %760 = cast(%759, dtype="float64") /* ty=Tensor[(3, 10, 14), float64] */;
    %761 = tan(%760) /* ty=Tensor[(3, 10, 14), float64] */;
    %762 = cast(%var_4957, dtype="float32") /* ty=Tensor[(3, 10, 14), float32] */;
    %763 = shape_of(%761, dtype="int32") /* ty=Tensor[(3), int32] */;
    %764 = cast(%761, dtype="float32") /* ty=Tensor[(3, 10, 14), float32] */;
    %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %766 = cast(%var_4956, dtype="float64") /* ty=float64 */;
    %767 = cast(meta[relay.Constant][48] /* ty=Tensor[(6, 260), float64] */, dtype="float64") /* ty=Tensor[(6, 260), float64] */;
    %768 = cast(meta[relay.Constant][49] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
    %769 = cast(meta[relay.Constant][50] /* ty=Tensor[(1100), uint32] */, dtype="uint32") /* ty=Tensor[(1100), uint32] */;
    %770 = cast(%var_4966, dtype="float32") /* ty=Tensor[(715, 3), float32] */;
    %771 = reshape(%766, newshape=[]) /* ty=float64 */;
    %772 = reshape(%767, newshape=[10, 12, 13]) /* ty=Tensor[(10, 12, 13), float64] */;
    %773 = reshape(%768, newshape=[432]) /* ty=Tensor[(432), float32] */;
    %774 = reshape(%769, newshape=[1100]) /* ty=Tensor[(1100), uint32] */;
    %775 = reshape(%770, newshape=[2145]) /* ty=Tensor[(2145), float32] */;
    %776 = @func_1366(%771, %772, %773, %774, %775) /* ty=(Tensor[(10, 12, 13), float64], Tensor[(14, 9, 13), float32], Tensor[(9, 4, 12), float32], Tensor[(11, 10, 10), bool], Tensor[(1100), uint32], Tensor[(13, 11, 15), float32], Tensor[(2145), float32], Tensor[(11, 10, 10), bool], Tensor[(1638), float32], Tensor[(1638, 432), uint8]) */;
    %777 = %776.7;
    %778 = cast(%777, dtype="uint8") /* ty=Tensor[(11, 10, 10), uint8] */;
    %779 = cast(%var_4956, dtype="uint8") /* ty=uint8 */;
    %780 = cast(%var_5031, dtype="int32") /* ty=Tensor[(1, 15), int32] */;
    %781 = cast(meta[relay.Constant][53] /* ty=Tensor[(195), int32] */, dtype="int32") /* ty=Tensor[(195), int32] */;
    %782 = reshape(%780, newshape=[3, 1, 5]) /* ty=Tensor[(3, 1, 5), int32] */;
    %783 = reshape(%781, newshape=[3, 13, 5]) /* ty=Tensor[(3, 13, 5), int32] */;
    %784 = @func_4369(%782, %783) /* ty=(Tensor[(3, 13, 5), int32], Tensor[(5, 3, 7), float64]) */;
    %785 = @func_4144() /* ty=Tensor[(5, 12, 9), float32] */;
    %786 = cast(%785, dtype="float64") /* ty=Tensor[(5, 12, 9), float64] */;
    %787 = reshape(%786, newshape=[5, 12, 9]) /* ty=Tensor[(5, 12, 9), float64] */;
    %788 = @func_4440(%787) /* ty=(Tensor[(5, 12, 9), bool], Tensor[(5, 12, 9), float64], Tensor[(4, 5, 15), int32], Tensor[(300), float64], Tensor[(2145), float32], Tensor[(5, 3, 7), float64], Tensor[(14, 9, 13), float32]) */;
    %789 = cast(%759, dtype="uint64") /* ty=Tensor[(3, 10, 14), uint64] */;
    %790 = shape_of(%761, dtype="int32") /* ty=Tensor[(3), int32] */;
    %791 = cast(%761, dtype="uint64") /* ty=Tensor[(3, 10, 14), uint64] */;
    %792 = dyn.reshape(%789, %790, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %793 = left_shift(%791, %792) /* ty=Tensor[(3, 10, 14), uint64] */;
    %794 = cast(%759, dtype="uint8") /* ty=Tensor[(3, 10, 14), uint8] */;
    %795 = shape_of(%793, dtype="int32") /* ty=Tensor[(3), int32] */;
    %796 = cast(%793, dtype="uint8") /* ty=Tensor[(3, 10, 14), uint8] */;
    %797 = dyn.reshape(%794, %795, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %798 = multiply(%796, %797) /* ty=Tensor[(3, 10, 14), uint8] */;
    %799 = cast(%798, dtype="float32") /* ty=Tensor[(3, 10, 14), float32] */;
    %800 = log10(%799) /* ty=Tensor[(3, 10, 14), float32] */;
    %801 = cast(%800, dtype="float32") /* ty=Tensor[(3, 10, 14), float32] */;
    %802 = %754.1;
    %803 = @func_418(%756) /* ty=Tensor[(14, 9, 13), float32] */;
    %804 = add(%764, %765) /* ty=Tensor[(3, 10, 14), float32] */;
    %805 = minimum(%778, %779) /* ty=Tensor[(11, 10, 10), uint8] */;
    %806 = %784.1;
    %807 = %788.3;
    %808 = sinh(%801) /* ty=Tensor[(3, 10, 14), float32] */;
    (meta[relay.Constant][48] /* ty=Tensor[(6, 260), float64] */, meta[relay.Constant][49] /* ty=Tensor[(432), float32] */, meta[relay.Constant][50] /* ty=Tensor[(1100), uint32] */, %var_4966, %802, meta[relay.Constant][51] /* ty=Tensor[(864), float32] */, meta[relay.Constant][52] /* ty=Tensor[(640), int16] */, %785, %803, %var_5009, %804, %805, %806, %var_5031, meta[relay.Constant][53] /* ty=Tensor[(195), int32] */, %807, %808)
  };
  %809(%var_5052, %var_5053, %var_5054, %var_5055, %var_5056) /* ty=(Tensor[(6, 260), float64], Tensor[(432), float32], Tensor[(1100), uint32], Tensor[(715, 3), float32], Tensor[(8, 5, 16), int16], Tensor[(864), float32], Tensor[(640), int16], Tensor[(5, 12, 9), float32], Tensor[(14, 9, 13), float32], Tensor[(1638), float32], Tensor[(3, 10, 14), float32], Tensor[(11, 10, 10), uint8], Tensor[(5, 3, 7), float64], Tensor[(1, 15), int32], Tensor[(195), int32], Tensor[(300), float64], Tensor[(3, 10, 14), float32]) */
}

def @func_6042() -> Tensor[(5, 12, 9), float64] {
  %810 = fn () -> Tensor[(5, 12, 9), float64] {
    @func_3433() /* ty=Tensor[(5, 12, 9), float64] */
  };
  %810() /* ty=Tensor[(5, 12, 9), float64] */
}

def @func_6927() -> (Tensor[(5, 12, 9), float64], Tensor[(5, 12, 9), float32]) {
  %811 = @func_4484() /* ty=(Tensor[(5, 12, 9), float64],) */;
  %812 = %811.0;
  %813 = cast(%812, dtype="float64") /* ty=Tensor[(5, 12, 9), float64] */;
  %814 = log(%813) /* ty=Tensor[(5, 12, 9), float64] */;
  %815 = @func_3554() /* ty=Tensor[(5, 12, 9), float32] */;
  (%814, %815)
}

def @main(%var_7204: Tensor[(6, 13, 12), float32]) -> (Tensor[(6, 13, 12), float32],) {
  %816 = cast(%var_7204, dtype="float32") /* ty=Tensor[(6, 13, 12), float32] */;
  %817 = log(%816) /* ty=Tensor[(6, 13, 12), float32] */;
  (%817,)
}

def @func_6929() -> (Tensor[(5, 12, 9), float64], Tensor[(5, 12, 9), float32]) {
  @func_6927() /* ty=(Tensor[(5, 12, 9), float64], Tensor[(5, 12, 9), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen61/build/output.py:1839: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen61/build/output.py", line 1844, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(936) tvmgen_default_fused_log_kernel0(float* __restrict__ T_log, float* __restrict__ placeholder) {
  T_log[(((int)threadIdx.x))] = __logf(placeholder[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

