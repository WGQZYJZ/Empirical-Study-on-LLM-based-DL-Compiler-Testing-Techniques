==========mod==========
#[version = "0.0.5"]
def @func_4746() -> Tensor[(320), uint8] {
  @func_4154() /* ty=Tensor[(320), uint8] */
}

def @func_4154() -> Tensor[(320), uint8] {
  %0 = @func_3290() /* ty=(Tensor[(320), uint8], Tensor[(5, 2, 4), float64]) */;
  %0.0
}

def @func_7408() -> Tensor[(320), uint8] {
  %1 = @func_7371() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(320), uint8], Tensor[(5, 2, 4), float64]) */;
  %1.1
}

def @func_3347() -> (Tensor[(5, 2, 4), float64],) {
  %2 = @func_2865() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) */;
  %3 = %2.0;
  (%3,)
}

def @func_7886(%var_7862: Tensor[(13, 11, 5), float32]) -> Tensor[(13, 11, 5), float32] {
  %4 = cast(%var_7862, dtype="float32") /* ty=Tensor[(13, 11, 5), float32] */;
  erf(%4) /* ty=Tensor[(13, 11, 5), float32] */
}

def @func_5790() -> (Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) {
  %5 = @func_5126() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), uint32], Tensor[(320), uint8]) */;
  %6 = %5.0;
  %7 = @func_5666() /* ty=Tensor[(4, 8, 10), float64] */;
  (%6, %7)
}

def @func_3801() -> (Tensor[(320), uint8],) {
  %8 = @func_3290() /* ty=(Tensor[(320), uint8], Tensor[(5, 2, 4), float64]) */;
  %9 = %8.0;
  (%9,)
}

def @func_10807() -> (Tensor[(320), uint8],) {
  %10 = @func_9268() /* ty=(Tensor[(320), uint8],) */;
  %11 = %10.0;
  (%11,)
}

def @func_5430(%var_5422: Tensor[(130), float64]) -> (Tensor[(5, 2, 4), float64], Tensor[(50), float32], Tensor[(130), float64], Tensor[(50), float32]) {
  %12 = @func_3981() /* ty=Tensor[(5, 2, 4), float64] */;
  %13 = cast(%12, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  %14 = cast(%var_5422, dtype="float64") /* ty=Tensor[(130), float64] */;
  %15 = cast(meta[relay.Constant][0] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %16 = reshape(%14, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %17 = reshape(%15, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %18 = @func_1916(%16, %17) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8], Tensor[(50), float32], uint16, Tensor[(130), float64], Tensor[(50), float32], Tensor[(5, 2, 4), float32]) */;
  %19 = tan(%13) /* ty=Tensor[(5, 2, 4), float64] */;
  %20 = %18.3;
  (%19, %20, %var_5422, meta[relay.Constant][0] /* ty=Tensor[(50), float32] */)
}

def @func_7698() -> Tensor[(5, 9, 1), float64] {
  %21 = @func_5036() /* ty=(Tensor[(5, 9, ?), bool], Tensor[(50), float32], Tensor[(1, 252), uint16], Tensor[(50), float32], Tensor[(5, 9, 1), float64], Tensor[(13, 2, 9), bool]) */;
  %21.4
}

def @func_6000() -> (Tensor[(320), uint8], Tensor[(320), bool]) {
  %22 = @func_4730() /* ty=(Tensor[(320), uint8],) */;
  %23 = %22.0;
  %24 = @func_4418() /* ty=Tensor[(320), bool] */;
  (%23, %24)
}

def @func_8626() -> (Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64], Tensor[(5, 10), float32]) {
  %25 = cast(meta[relay.Constant][1] /* ty=Tensor[(5, 10), float32] */, dtype="float32") /* ty=Tensor[(5, 10), float32] */;
  %26 = reshape(%25, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %27 = @func_4604(%26) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(1232), float64], Tensor[(1, 1232), float64], Tensor[(130), float64], Tensor[(50), float32]) */;
  %28 = @func_2821() /* ty=Tensor[(4, 8, 10), float64] */;
  %29 = %27.1;
  (%28, %29, meta[relay.Constant][1] /* ty=Tensor[(5, 10), float32] */)
}

def @func_2735(%var_2715: Tensor[(130), float64]) -> (Tensor[(5, 2, 4), float64], Tensor[(1, 130), float64], Tensor[(50), float32], Tensor[(130), float64]) {
  %30 = cast(meta[relay.Constant][2] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %31 = cast(%var_2715, dtype="float64") /* ty=Tensor[(130), float64] */;
  %32 = reshape(%30, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %33 = reshape(%31, newshape=[1, 130]) /* ty=Tensor[(1, 130), float64] */;
  %34 = @func_2613(%32, %33) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(50), float32], Tensor[(1, 130), float64]) */;
  %35 = @func_1772() /* ty=Tensor[(5, 2, 4), float64] */;
  %36 = %34.3;
  (%35, %36, meta[relay.Constant][2] /* ty=Tensor[(50), float32] */, %var_2715)
}

def @func_2957() -> (Tensor[(4, 8, 10), float64],) {
  %37 = @func_2305() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) */;
  %38 = %37.1;
  (%38,)
}

def @func_8567() -> (Tensor[(5, 9, 1), float64],) {
  %39 = @func_7698() /* ty=Tensor[(5, 9, 1), float64] */;
  (%39,)
}

def @func_9111(%var_9092: Tensor[(660), int32], %var_9093: Tensor[(40), float64]) -> (Tensor[(320), uint8], Tensor[(5, 2, 4), bool], Tensor[(660), int32], Tensor[(40), float64]) {
  %40 = @func_2783() /* ty=(Tensor[(320), uint8],) */;
  %41 = cast(%var_9092, dtype="int32") /* ty=Tensor[(660), int32] */;
  %42 = cast(%var_9092, dtype="int32") /* ty=Tensor[(660), int32] */;
  %43 = cast(%var_9093, dtype="float64") /* ty=Tensor[(40), float64] */;
  %44 = reshape(%41, newshape=[5, 12, 11]) /* ty=Tensor[(5, 12, 11), int32] */;
  %45 = reshape(%42, newshape=[5, 12, 11]) /* ty=Tensor[(5, 12, 11), int32] */;
  %46 = reshape(%43, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), float64] */;
  %47 = @func_7680(%44, %45, %46) /* ty=(Tensor[(5, 12, 11), bool], Tensor[(5, 2, 4), bool]) */;
  %48 = %40.0;
  %49 = %47.1;
  (%48, %49, %var_9092, %var_9093)
}

def @func_9912() -> (Tensor[(4, 8, 10), float64], Tensor[(50), float32], Tensor[(50), float32]) {
  %50 = cast(meta[relay.Constant][3] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %51 = reshape(%50, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %52 = @func_7540(%51) /* ty=(Tensor[(13, 2, 9), bool], Tensor[(10, 5), float32], Tensor[(50), float32]) */;
  %53 = @func_3881() /* ty=Tensor[(4, 8, 10), float64] */;
  %54 = %52.2;
  (%53, %54, meta[relay.Constant][3] /* ty=Tensor[(50), float32] */)
}

def @func_4197(%var_4186: Tensor[(156), float32]) -> (Tensor[(5, 2, 4), float64], Tensor[(130), float64], Tensor[(156), float32], Tensor[(26, 5), float64], Tensor[(50), float32], Tensor[(320), uint8]) {
  %55 = @func_2938() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64]) */;
  %56 = cast(%var_4186, dtype="float32") /* ty=Tensor[(156), float32] */;
  %57 = cast(meta[relay.Constant][4] /* ty=Tensor[(26, 5), float64] */, dtype="float64") /* ty=Tensor[(26, 5), float64] */;
  %58 = cast(meta[relay.Constant][5] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %59 = reshape(%56, newshape=[4, 3, 13]) /* ty=Tensor[(4, 3, 13), float32] */;
  %60 = reshape(%57, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %61 = reshape(%58, newshape=[1, 50]) /* ty=Tensor[(1, 50), float32] */;
  %62 = @func_3759(%59, %60, %61) /* ty=(Tensor[(4, 3, 13), float32], Tensor[(1232), float64], Tensor[(130), float64], Tensor[(1, 50), float32], Tensor[(5, 2, 4), float64]) */;
  %63 = @func_3801() /* ty=(Tensor[(320), uint8],) */;
  %64 = %55.0;
  %65 = %62.2;
  %66 = %63.0;
  (%64, %65, %var_4186, meta[relay.Constant][4] /* ty=Tensor[(26, 5), float64] */, meta[relay.Constant][5] /* ty=Tensor[(50), float32] */, %66)
}

def @func_10629(%var_10611: Tensor[(13, 10), float64]) -> (Tensor[(320), uint8], Tensor[(13, 10), float64], Tensor[(1, 130), float64], Tensor[(5, 2, 4), float64], Tensor[(50), float32], Tensor[(90), uint32]) {
  %67 = @func_6645() /* ty=(Tensor[(320), uint8],) */;
  %68 = cast(%var_10611, dtype="float64") /* ty=Tensor[(13, 10), float64] */;
  %69 = reshape(%68, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %70 = @func_2735(%69) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(1, 130), float64], Tensor[(50), float32], Tensor[(130), float64]) */;
  %71 = %70.1;
  %72 = cast(%71, dtype="float64") /* ty=Tensor[(1, 130), float64] */;
  %73 = cast(meta[relay.Constant][6] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %74 = cast(meta[relay.Constant][7] /* ty=Tensor[(90), uint32] */, dtype="uint32") /* ty=Tensor[(90), uint32] */;
  %75 = reshape(%73, newshape=[1, 50]) /* ty=Tensor[(1, 50), float32] */;
  %76 = reshape(%74, newshape=[90]) /* ty=Tensor[(90), uint32] */;
  %77 = @func_8877(%75, %76) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(13, 10), float64], Tensor[(1, 50), float64], Tensor[(4, 8, 10), float64], Tensor[(1, 120), uint64], Tensor[(90), uint32]) */;
  %78 = %67.0;
  %79 = cosh(%72) /* ty=Tensor[(1, 130), float64] */;
  %80 = %77.0;
  (%78, %var_10611, %79, %80, meta[relay.Constant][6] /* ty=Tensor[(50), float32] */, meta[relay.Constant][7] /* ty=Tensor[(90), uint32] */)
}

def @func_7242() -> Tensor[(5, 2, 4), float64] {
  @func_1772() /* ty=Tensor[(5, 2, 4), float64] */
}

def @func_10387(%var_10363: Tensor[(130), float64]) -> (Tensor[(5, 2, 4), float64], Tensor[(4, 3, 13), float32], Tensor[(156), float32], Tensor[(130), float64], Tensor[(1, 50), float32], Tensor[(5, 2, 4), float64]) {
  %81 = @func_3462() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) */;
  %82 = cast(meta[relay.Constant][8] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
  %83 = cast(%var_10363, dtype="float64") /* ty=Tensor[(130), float64] */;
  %84 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 50), float32] */, dtype="float32") /* ty=Tensor[(1, 50), float32] */;
  %85 = reshape(%82, newshape=[4, 3, 13]) /* ty=Tensor[(4, 3, 13), float32] */;
  %86 = reshape(%83, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %87 = reshape(%84, newshape=[1, 50]) /* ty=Tensor[(1, 50), float32] */;
  %88 = @func_3759(%85, %86, %87) /* ty=(Tensor[(4, 3, 13), float32], Tensor[(1232), float64], Tensor[(130), float64], Tensor[(1, 50), float32], Tensor[(5, 2, 4), float64]) */;
  %89 = @func_9470() /* ty=(Tensor[(5, 2, 4), float64],) */;
  %90 = %81.1;
  %91 = %88.0;
  %92 = %89.0;
  (%90, %91, meta[relay.Constant][8] /* ty=Tensor[(156), float32] */, %var_10363, meta[relay.Constant][9] /* ty=Tensor[(1, 50), float32] */, %92)
}

def @func_3981() -> Tensor[(5, 2, 4), float64] {
  %93 = @func_3290() /* ty=(Tensor[(320), uint8], Tensor[(5, 2, 4), float64]) */;
  %93.1
}

def @func_5036() -> (Tensor[(5, 9, ?), bool], Tensor[(50), float32], Tensor[(1, 252), uint16], Tensor[(50), float32], Tensor[(5, 9, 1), float64], Tensor[(13, 2, 9), bool]) {
  %94 = cast(meta[relay.Constant][10] /* ty=Tensor[(5, 9, 1), float64] */, dtype="float64") /* ty=Tensor[(5, 9, 1), float64] */;
  %95 = rsqrt(%94) /* ty=Tensor[(5, 9, 1), float64] */;
  %96 = cast(meta[relay.Constant][10] /* ty=Tensor[(5, 9, 1), float64] */, dtype="bool") /* ty=Tensor[(5, 9, 1), bool] */;
  %97 = shape_of(%95, dtype="int32") /* ty=Tensor[(3), int32] */;
  %98 = cast(%95, dtype="bool") /* ty=Tensor[(5, 9, 1), bool] */;
  %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %100 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 252), uint16] */, dtype="uint16") /* ty=Tensor[(1, 252), uint16] */;
  %101 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 252), uint16] */, dtype="uint16") /* ty=Tensor[(1, 252), uint16] */;
  %102 = cast(meta[relay.Constant][12] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %103 = reshape(%100, newshape=[7, 3, 12]) /* ty=Tensor[(7, 3, 12), uint16] */;
  %104 = reshape(%101, newshape=[7, 3, 12]) /* ty=Tensor[(7, 3, 12), uint16] */;
  %105 = reshape(%102, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %106 = @func_2249(%103, %104, %105) /* ty=(Tensor[(7, 3, 12), bool], Tensor[(4, 8, 10), float64], Tensor[(4, 80), uint8], Tensor[(5, 2, 4), float64], Tensor[(130), bool], Tensor[(50), float32], Tensor[(1, 130), float64]) */;
  %107 = cast(%95, dtype="float64") /* ty=Tensor[(5, 9, 1), float64] */;
  %108 = @func_4138() /* ty=(Tensor[(13, 2, 9), bool],) */;
  %109 = logical_or(%98, %99) /* ty=Tensor[(5, 9, ?), bool] */;
  %110 = %106.5;
  %111 = atanh(%107) /* ty=Tensor[(5, 9, 1), float64] */;
  %112 = %108.0;
  (%109, %110, meta[relay.Constant][11] /* ty=Tensor[(1, 252), uint16] */, meta[relay.Constant][12] /* ty=Tensor[(50), float32] */, %111, %112)
}

def @func_2372(%var_2354: Tensor[(5, 2, 4), float64]) -> Tensor[(5, 2, 4), float64] {
  %113 = @func_2333() /* ty=(Tensor[(5, 2, 4), float64],) */;
  %114 = %113.0;
  %115 = cast(%var_2354, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  %116 = shape_of(%114, dtype="int32") /* ty=Tensor[(3), int32] */;
  %117 = cast(%114, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%117, %118) /* ty=Tensor[(5, 2, 4), float64] */
}

def @func_5658(%var_5646: Tensor[(5, 2, 4), float64]) -> Tensor[(5, 2, 4), uint32] {
  %119 = @func_1988() /* ty=Tensor[(5, 2, 4), float64] */;
  %120 = cast(%var_5646, dtype="uint32") /* ty=Tensor[(5, 2, 4), uint32] */;
  %121 = shape_of(%119, dtype="int32") /* ty=Tensor[(3), int32] */;
  %122 = cast(%119, dtype="uint32") /* ty=Tensor[(5, 2, 4), uint32] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  right_shift(%122, %123) /* ty=Tensor[(5, 2, 4), uint32] */
}

def @func_1736(%var_1715: uint16, %var_1722: Tensor[(130), float64], %var_1727: Tensor[(50), float32]) -> (Tensor[(13, 4, 1), bool], Tensor[(10, 13, 1), float64], Tensor[(130), float64], Tensor[(10, 13, 1), float64], Tensor[(1232), float64], Tensor[(50), float32], Tensor[(16, 7, 11), float64]) {
  %124 = cast(%var_1715, dtype="bool") /* ty=bool */;
  %125 = cast(meta[relay.Constant][13] /* ty=Tensor[(13, 4, 1), uint16] */, dtype="bool") /* ty=Tensor[(13, 4, 1), bool] */;
  %126 = cast(%var_1722, dtype="float64") /* ty=Tensor[(130), float64] */;
  %127 = reshape(%126, newshape=[10, 13, 1]) /* ty=Tensor[(10, 13, 1), float64] */;
  %128 = @func_951(%127) /* ty=(Tensor[(10, 13, 1), float64],) */;
  %129 = %128.0;
  %130 = cast(%129, dtype="float64") /* ty=Tensor[(10, 13, 1), float64] */;
  %131 = reshape(%130, newshape=[10, 13, 1]) /* ty=Tensor[(10, 13, 1), float64] */;
  %132 = @func_951(%131) /* ty=(Tensor[(10, 13, 1), float64],) */;
  %133 = cast(%var_1727, dtype="float32") /* ty=Tensor[(50), float32] */;
  %134 = cast(%var_1722, dtype="float64") /* ty=Tensor[(130), float64] */;
  %135 = %132.0;
  %136 = cast(%135, dtype="float64") /* ty=Tensor[(10, 13, 1), float64] */;
  %137 = reshape(%133, newshape=[1, 5, 10]) /* ty=Tensor[(1, 5, 10), float32] */;
  %138 = reshape(%134, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %139 = reshape(%136, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %140 = @func_1451(%137, %138, %139) /* ty=(Tensor[(1, 5, 10), float32], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(10, 13, 1), float64], Tensor[(16, 7, 11), float64], Tensor[(130), bool]) */;
  %141 = %140.2;
  %142 = cast(%141, dtype="float64") /* ty=Tensor[(1232), float64] */;
  %143 = reshape(%142, newshape=[16, 7, 11]) /* ty=Tensor[(16, 7, 11), float64] */;
  %144 = @func_603(%143) /* ty=(Tensor[(16, 7, 11), float64], Tensor[(16, 7, 11), float64]) */;
  %145 = less_equal(%124, %125) /* ty=Tensor[(13, 4, 1), bool] */;
  %146 = %144.1;
  (%145, %129, %var_1722, %135, %141, %var_1727, %146)
}

def @func_10149(%var_10131: Tensor[(15, 9, 9), float64], %var_10134: Tensor[(15, 9, 9), float64]) -> Tensor[(15, 9, 9), float32] {
  %147 = cast(%var_10134, dtype="uint32") /* ty=Tensor[(15, 9, 9), uint32] */;
  %148 = shape_of(%var_10131, dtype="int32") /* ty=Tensor[(3), int32] */;
  %149 = cast(%var_10131, dtype="uint32") /* ty=Tensor[(15, 9, 9), uint32] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %151 = maximum(%149, %150) /* ty=Tensor[(15, 9, 9), uint32] */;
  %152 = cast(%var_10131, dtype="float64") /* ty=Tensor[(15, 9, 9), float64] */;
  %153 = sigmoid(%152) /* ty=Tensor[(15, 9, 9), float64] */;
  %154 = cast(%153, dtype="float32") /* ty=Tensor[(15, 9, 9), float32] */;
  %155 = shape_of(%151, dtype="int32") /* ty=Tensor[(3), int32] */;
  %156 = cast(%151, dtype="float32") /* ty=Tensor[(15, 9, 9), float32] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%156, %157) /* ty=Tensor[(15, 9, 9), float32] */
}

def @func_5569(%var_5534: Tensor[(1232), float64]) -> (Tensor[(2, 9, 3), float32], Tensor[(320), uint8], Tensor[(1232), float64], Tensor[(1232), float64], Tensor[(130), float64], Tensor[(50), float32], Tensor[(320), uint8], Tensor[(320), uint8]) {
  %158 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 9, 3), float32] */, dtype="float32") /* ty=Tensor[(2, 9, 3), float32] */;
  %159 = cast(%var_5534, dtype="float64") /* ty=Tensor[(1232), float64] */;
  %160 = cast(meta[relay.Constant][15] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %161 = cast(meta[relay.Constant][16] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %162 = reshape(%159, newshape=[1232]) /* ty=Tensor[(1232), float64] */;
  %163 = reshape(%160, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %164 = reshape(%161, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %165 = @func_2055(%162, %163, %164) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(320), uint8], Tensor[(130), float64], Tensor[(50), float32]) */;
  %166 = @func_2305() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) */;
  %167 = cosh(%158) /* ty=Tensor[(2, 9, 3), float32] */;
  %168 = @func_4746() /* ty=Tensor[(320), uint8] */;
  %169 = %165.2;
  %170 = %166.2;
  %171 = @func_4154() /* ty=Tensor[(320), uint8] */;
  (%167, %168, %169, %var_5534, meta[relay.Constant][15] /* ty=Tensor[(130), float64] */, meta[relay.Constant][16] /* ty=Tensor[(50), float32] */, %170, %171)
}

def @func_7463(%var_7410: Tensor[(16, 11, 10), bool]) -> (Tensor[(16, 11, 10), bool], Tensor[(1, 130), float64], Tensor[(50), float32], Tensor[(130), float64], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) {
  %172 = cast(meta[relay.Constant][17] /* ty=Tensor[(16, 11, 10), bool] */, dtype="bool") /* ty=Tensor[(16, 11, 10), bool] */;
  %173 = shape_of(%var_7410, dtype="int32") /* ty=Tensor[(3), int32] */;
  %174 = cast(%var_7410, dtype="bool") /* ty=Tensor[(16, 11, 10), bool] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %176 = cast(meta[relay.Constant][18] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %177 = cast(meta[relay.Constant][19] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %178 = reshape(%176, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %179 = reshape(%177, newshape=[1, 130]) /* ty=Tensor[(1, 130), float64] */;
  %180 = @func_2613(%178, %179) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(50), float32], Tensor[(1, 130), float64]) */;
  %181 = cast(meta[relay.Constant][20] /* ty=Tensor[(1232), float64] */, dtype="float64") /* ty=Tensor[(1232), float64] */;
  %182 = %180.3;
  %183 = cast(%182, dtype="float64") /* ty=Tensor[(1, 130), float64] */;
  %184 = cast(meta[relay.Constant][18] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %185 = reshape(%181, newshape=[1232]) /* ty=Tensor[(1232), float64] */;
  %186 = reshape(%183, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %187 = reshape(%184, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %188 = @func_2055(%185, %186, %187) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(320), uint8], Tensor[(130), float64], Tensor[(50), float32]) */;
  %189 = @func_4355() /* ty=(Tensor[(5, 2, 4), float64],) */;
  %190 = @func_2938() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64]) */;
  %191 = logical_and(%174, %175) /* ty=Tensor[(16, 11, 10), bool] */;
  %192 = %188.1;
  %193 = %189.0;
  %194 = %190.1;
  (%191, %182, meta[relay.Constant][18] /* ty=Tensor[(50), float32] */, meta[relay.Constant][19] /* ty=Tensor[(130), float64] */, %192, meta[relay.Constant][20] /* ty=Tensor[(1232), float64] */, %193, %194)
}

def @func_9559() -> (Tensor[(5, 2, 4), float64],) {
  %195 = @func_5126() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), uint32], Tensor[(320), uint8]) */;
  %196 = %195.1;
  (%196,)
}

def @func_1818(%var_1795: Tensor[(4, 8, 10), uint8], %var_1796: Tensor[(4, 8, 10), uint8]) -> Tensor[(4, 8, 10), float64] {
  %197 = cast(%var_1796, dtype="uint8") /* ty=Tensor[(4, 8, 10), uint8] */;
  %198 = shape_of(%var_1795, dtype="int32") /* ty=Tensor[(3), int32] */;
  %199 = cast(%var_1795, dtype="uint8") /* ty=Tensor[(4, 8, 10), uint8] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %201 = logical_xor(%199, %200) /* ty=Tensor[(4, 8, 10), uint8] */;
  %202 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 8, 10), uint8] */, dtype="float64") /* ty=Tensor[(4, 8, 10), float64] */;
  %203 = shape_of(%201, dtype="int32") /* ty=Tensor[(3), int32] */;
  %204 = cast(%201, dtype="float64") /* ty=Tensor[(4, 8, 10), float64] */;
  %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%204, %205) /* ty=Tensor[(4, 8, 10), float64] */
}

def @func_7969() -> (Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) {
  %206 = @func_2938() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64]) */;
  %207 = %206.1;
  %208 = cast(%207, dtype="float64") /* ty=Tensor[(4, 8, 10), float64] */;
  %209 = @func_1772() /* ty=Tensor[(5, 2, 4), float64] */;
  %210 = rsqrt(%208) /* ty=Tensor[(4, 8, 10), float64] */;
  (%209, %210)
}

def @func_10656() -> (Tensor[(13, 2, 9), bool], Tensor[(130, 1), float64], Tensor[(2112), uint8]) {
  %211 = @func_8074() /* ty=(Tensor[(13, 2, 9), bool],) */;
  %212 = cast(meta[relay.Constant][22] /* ty=Tensor[(2112), uint8] */, dtype="uint8") /* ty=Tensor[(2112), uint8] */;
  %213 = reshape(%212, newshape=[11, 12, 16]) /* ty=Tensor[(11, 12, 16), uint8] */;
  %214 = @func_8260(%213) /* ty=(Tensor[(11, 12, 16), uint8], Tensor[(130, 1), float64]) */;
  %215 = %211.0;
  %216 = %214.1;
  (%215, %216, meta[relay.Constant][22] /* ty=Tensor[(2112), uint8] */)
}

def @func_5302() -> (Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(320), uint8]) {
  %217 = @func_3347() /* ty=(Tensor[(5, 2, 4), float64],) */;
  %218 = @func_3462() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) */;
  %219 = %217.0;
  %220 = %218.1;
  %221 = @func_4154() /* ty=Tensor[(320), uint8] */;
  (%219, %220, %221)
}

def @func_8317() -> (Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) {
  %222 = @func_7371() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(320), uint8], Tensor[(5, 2, 4), float64]) */;
  %223 = @func_6645() /* ty=(Tensor[(320), uint8],) */;
  %224 = @func_7242() /* ty=Tensor[(5, 2, 4), float64] */;
  %225 = %222.0;
  %226 = @func_5666() /* ty=Tensor[(4, 8, 10), float64] */;
  %227 = %223.0;
  (%224, %225, %226, %227)
}

def @func_4902() -> (Tensor[(4, 8, 10), float64],) {
  %228 = @func_4162() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) */;
  %229 = %228.1;
  (%229,)
}

def @func_4418() -> Tensor[(320), bool] {
  %230 = @func_3801() /* ty=(Tensor[(320), uint8],) */;
  %231 = %230.0;
  %232 = cast(%231, dtype="float64") /* ty=Tensor[(320), float64] */;
  %233 = atan(%232) /* ty=Tensor[(320), float64] */;
  %234 = cast(%231, dtype="bool") /* ty=Tensor[(320), bool] */;
  %235 = shape_of(%233, dtype="int32") /* ty=Tensor[(1), int32] */;
  %236 = cast(%233, dtype="bool") /* ty=Tensor[(320), bool] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?), bool] */;
  logical_and(%236, %237) /* ty=Tensor[(320), bool] */
}

def @func_6176() -> (Tensor[(320), uint8], Tensor[(4, 8, 10), float64], Tensor[(320), uint8], Tensor[(4, 8, 10), bool]) {
  %238 = @func_4036() /* ty=(Tensor[(4, 8, 10), float64], Tensor[(4, 8, 10), float64]) */;
  %239 = %238.1;
  %240 = cast(%239, dtype="float32") /* ty=Tensor[(4, 8, 10), float32] */;
  %241 = exp(%240) /* ty=Tensor[(4, 8, 10), float32] */;
  %242 = cast(%241, dtype="float32") /* ty=Tensor[(4, 8, 10), float32] */;
  %243 = sinh(%242) /* ty=Tensor[(4, 8, 10), float32] */;
  %244 = cast(%239, dtype="bool") /* ty=Tensor[(4, 8, 10), bool] */;
  %245 = shape_of(%243, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(%243, dtype="bool") /* ty=Tensor[(4, 8, 10), bool] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %248 = @func_4774() /* ty=Tensor[(320), uint8] */;
  %249 = @func_3881() /* ty=Tensor[(4, 8, 10), float64] */;
  %250 = @func_4774() /* ty=Tensor[(320), uint8] */;
  %251 = greater_equal(%246, %247) /* ty=Tensor[(4, 8, 10), bool] */;
  (%248, %249, %250, %251)
}

def @func_6884(%var_6879: Tensor[(16, 14, 7), float32]) -> (Tensor[(16, 14, 7), float32],) {
  %252 = cast(%var_6879, dtype="float32") /* ty=Tensor[(16, 14, 7), float32] */;
  %253 = sinh(%252) /* ty=Tensor[(16, 14, 7), float32] */;
  (%253,)
}

def @func_6645() -> (Tensor[(320), uint8],) {
  %254 = @func_3097() /* ty=Tensor[(320), uint8] */;
  (%254,)
}

def @func_3759(%var_3737: Tensor[(4, 3, 13), float32], %var_3744: Tensor[(130), float64], %var_3745: Tensor[(1, 50), float32]) -> (Tensor[(4, 3, 13), float32], Tensor[(1232), float64], Tensor[(130), float64], Tensor[(1, 50), float32], Tensor[(5, 2, 4), float64]) {
  %255 = cast(%var_3737, dtype="float32") /* ty=Tensor[(4, 3, 13), float32] */;
  %256 = cast(meta[relay.Constant][23] /* ty=Tensor[(1232), float64] */, dtype="float64") /* ty=Tensor[(1232), float64] */;
  %257 = cast(%var_3744, dtype="float64") /* ty=Tensor[(130), float64] */;
  %258 = cast(%var_3745, dtype="float32") /* ty=Tensor[(1, 50), float32] */;
  %259 = reshape(%256, newshape=[1232]) /* ty=Tensor[(1232), float64] */;
  %260 = reshape(%257, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %261 = reshape(%258, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %262 = @func_2055(%259, %260, %261) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(320), uint8], Tensor[(130), float64], Tensor[(50), float32]) */;
  %263 = %262.0;
  %264 = cast(%263, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  %265 = sqrt(%255) /* ty=Tensor[(4, 3, 13), float32] */;
  %266 = cos(%264) /* ty=Tensor[(5, 2, 4), float64] */;
  (%265, meta[relay.Constant][23] /* ty=Tensor[(1232), float64] */, %var_3744, %var_3745, %266)
}

def @func_2821() -> Tensor[(4, 8, 10), float64] {
  %267 = @func_2601() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(130), float64], Tensor[(50), float32], Tensor[(4, 8, 10), float64], Tensor[(40), float64], Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) */;
  %267.4
}

def @func_6308(%var_6276: Tensor[(4, 3, 3), int32], %var_6277: Tensor[(4, 3, 3), int32], %var_6299: Tensor[(40), float64], %var_6306: Tensor[(50), float32]) -> (Tensor[(4, 3, 3), int32], Tensor[(5, 2, 4), uint32], Tensor[(40), float64], Tensor[(130), bool], Tensor[(252), uint16], Tensor[(50), float32]) {
  %268 = cast(%var_6277, dtype="int32") /* ty=Tensor[(4, 3, 3), int32] */;
  %269 = shape_of(%var_6276, dtype="int32") /* ty=Tensor[(3), int32] */;
  %270 = cast(%var_6276, dtype="int32") /* ty=Tensor[(4, 3, 3), int32] */;
  %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %272 = cast(%var_6299, dtype="float64") /* ty=Tensor[(40), float64] */;
  %273 = reshape(%272, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), float64] */;
  %274 = @func_2515(%273) /* ty=(Tensor[(5, 2, 4), uint32],) */;
  %275 = cast(meta[relay.Constant][24] /* ty=Tensor[(252), uint16] */, dtype="uint16") /* ty=Tensor[(252), uint16] */;
  %276 = cast(meta[relay.Constant][24] /* ty=Tensor[(252), uint16] */, dtype="uint16") /* ty=Tensor[(252), uint16] */;
  %277 = cast(%var_6306, dtype="float32") /* ty=Tensor[(50), float32] */;
  %278 = reshape(%275, newshape=[7, 3, 12]) /* ty=Tensor[(7, 3, 12), uint16] */;
  %279 = reshape(%276, newshape=[7, 3, 12]) /* ty=Tensor[(7, 3, 12), uint16] */;
  %280 = reshape(%277, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %281 = @func_2249(%278, %279, %280) /* ty=(Tensor[(7, 3, 12), bool], Tensor[(4, 8, 10), float64], Tensor[(4, 80), uint8], Tensor[(5, 2, 4), float64], Tensor[(130), bool], Tensor[(50), float32], Tensor[(1, 130), float64]) */;
  %282 = bitwise_and(%270, %271) /* ty=Tensor[(4, 3, 3), int32] */;
  %283 = %274.0;
  %284 = %281.4;
  (%282, %283, %var_6299, %284, meta[relay.Constant][24] /* ty=Tensor[(252), uint16] */, %var_6306)
}

def @func_7499() -> (Tensor[(5, 2, 5), float64], Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) {
  %285 = @func_5897() /* ty=(Tensor[(5, 2, 4), float64],) */;
  %286 = @func_2865() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) */;
  %287 = @func_3163() /* ty=Tensor[(5, 2, 5), float64] */;
  %288 = %285.0;
  %289 = %286.0;
  (%287, %288, %289)
}

def @func_4138() -> (Tensor[(13, 2, 9), bool],) {
  %290 = cast(meta[relay.Constant][25] /* ty=Tensor[(13, 2, 9), float32] */, dtype="float32") /* ty=Tensor[(13, 2, 9), float32] */;
  %291 = acosh(%290) /* ty=Tensor[(13, 2, 9), float32] */;
  %292 = cast(meta[relay.Constant][25] /* ty=Tensor[(13, 2, 9), float32] */, dtype="bool") /* ty=Tensor[(13, 2, 9), bool] */;
  %293 = shape_of(%291, dtype="int32") /* ty=Tensor[(3), int32] */;
  %294 = cast(%291, dtype="bool") /* ty=Tensor[(13, 2, 9), bool] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %296 = less(%294, %295) /* ty=Tensor[(13, 2, 9), bool] */;
  (%296,)
}

def @func_2419(%var_2379: Tensor[(7, 14, 5), int64], %var_2380: Tensor[(7, 14, 5), int64]) -> (Tensor[(7, 14, 5), bool], uint16, Tensor[(130), float64], Tensor[(50), float32], Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) {
  %297 = cast(%var_2380, dtype="bool") /* ty=Tensor[(7, 14, 5), bool] */;
  %298 = shape_of(%var_2379, dtype="int32") /* ty=Tensor[(3), int32] */;
  %299 = cast(%var_2379, dtype="bool") /* ty=Tensor[(7, 14, 5), bool] */;
  %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %301 = cast(meta[relay.Constant][26] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %302 = cast(meta[relay.Constant][27] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %303 = reshape(%301, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %304 = reshape(%302, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %305 = @func_1916(%303, %304) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8], Tensor[(50), float32], uint16, Tensor[(130), float64], Tensor[(50), float32], Tensor[(5, 2, 4), float32]) */;
  %306 = @func_2333() /* ty=(Tensor[(5, 2, 4), float64],) */;
  %307 = greater(%299, %300) /* ty=Tensor[(7, 14, 5), bool] */;
  %308 = %305.4;
  %309 = @func_1988() /* ty=Tensor[(5, 2, 4), float64] */;
  %310 = %306.0;
  (%307, %308, meta[relay.Constant][26] /* ty=Tensor[(130), float64] */, meta[relay.Constant][27] /* ty=Tensor[(50), float32] */, %309, %310)
}

def @func_3959(%var_3899: Tensor[(5, 2, 4), float64]) -> (Tensor[(5, 2, 4), float32], Tensor[(320), uint8], Tensor[(5, 2, 4), float64]) {
  %311 = @func_2305() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) */;
  %312 = %311.0;
  %313 = cast(%var_3899, dtype="float32") /* ty=Tensor[(5, 2, 4), float32] */;
  %314 = shape_of(%312, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%312, dtype="float32") /* ty=Tensor[(5, 2, 4), float32] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %317 = @func_3290() /* ty=(Tensor[(320), uint8], Tensor[(5, 2, 4), float64]) */;
  %318 = @func_3290() /* ty=(Tensor[(320), uint8], Tensor[(5, 2, 4), float64]) */;
  %319 = subtract(%315, %316) /* ty=Tensor[(5, 2, 4), float32] */;
  %320 = %317.0;
  %321 = %318.1;
  (%319, %320, %321)
}

def @func_9447(%var_9421: Tensor[(12, 11, 6), float64]) -> (Tensor[(1, 130), float64], Tensor[(130), float64], Tensor[(12, 11, 6), float64]) {
  %322 = cast(meta[relay.Constant][28] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %323 = reshape(%322, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %324 = @func_2735(%323) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(1, 130), float64], Tensor[(50), float32], Tensor[(130), float64]) */;
  %325 = cast(%var_9421, dtype="float64") /* ty=Tensor[(12, 11, 6), float64] */;
  %326 = sin(%325) /* ty=Tensor[(12, 11, 6), float64] */;
  %327 = cast(%326, dtype="float64") /* ty=Tensor[(12, 11, 6), float64] */;
  %328 = %324.1;
  %329 = sinh(%327) /* ty=Tensor[(12, 11, 6), float64] */;
  (%328, meta[relay.Constant][28] /* ty=Tensor[(130), float64] */, %329)
}

def @func_9778() -> (Tensor[(5, 2, 4), float64],) {
  %330 = @func_7525() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(13, 2, 9), bool]) */;
  %331 = %330.0;
  (%331,)
}

def @func_9965() -> Tensor[(320), bool] {
  %332 = @func_9180() /* ty=(Tensor[(130), float64], Tensor[(320), bool], Tensor[(4, 8, 10), float32]) */;
  %332.1
}

def @func_2938() -> (Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64]) {
  %333 = @func_2333() /* ty=(Tensor[(5, 2, 4), float64],) */;
  %334 = %333.0;
  %335 = cast(%334, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  %336 = reshape(%335, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), float64] */;
  %337 = @func_2821() /* ty=Tensor[(4, 8, 10), float64] */;
  %338 = @func_2372(%336) /* ty=Tensor[(5, 2, 4), float64] */;
  (%334, %337, %338)
}

def @func_6745() -> (Tensor[(320), uint8], Tensor[(320), uint8], Tensor[(320), uint8], Tensor[(320), uint8], Tensor[(5, 2, 4), float64], Tensor[(320), uint8]) {
  %339 = @func_3801() /* ty=(Tensor[(320), uint8],) */;
  %340 = @func_3801() /* ty=(Tensor[(320), uint8],) */;
  %341 = @func_4774() /* ty=Tensor[(320), uint8] */;
  %342 = @func_3097() /* ty=Tensor[(320), uint8] */;
  %343 = %339.0;
  %344 = @func_4774() /* ty=Tensor[(320), uint8] */;
  %345 = @func_3981() /* ty=Tensor[(5, 2, 4), float64] */;
  %346 = %340.0;
  (%341, %342, %343, %344, %345, %346)
}

def @func_10539() -> Tensor[(5, 9, 1), float64] {
  %347 = @func_8567() /* ty=(Tensor[(5, 9, 1), float64],) */;
  %347.0
}

def @func_2249(%var_2209: Tensor[(7, 3, 12), uint16], %var_2210: Tensor[(7, 3, 12), uint16], %var_2238: Tensor[(50), float32]) -> (Tensor[(7, 3, 12), bool], Tensor[(4, 8, 10), float64], Tensor[(4, 80), uint8], Tensor[(5, 2, 4), float64], Tensor[(130), bool], Tensor[(50), float32], Tensor[(1, 130), float64]) {
  %348 = cast(%var_2210, dtype="bool") /* ty=Tensor[(7, 3, 12), bool] */;
  %349 = shape_of(%var_2209, dtype="int32") /* ty=Tensor[(3), int32] */;
  %350 = cast(%var_2209, dtype="bool") /* ty=Tensor[(7, 3, 12), bool] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %352 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 80), uint8] */, dtype="uint8") /* ty=Tensor[(4, 80), uint8] */;
  %353 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 80), uint8] */, dtype="uint8") /* ty=Tensor[(4, 80), uint8] */;
  %354 = reshape(%352, newshape=[4, 8, 10]) /* ty=Tensor[(4, 8, 10), uint8] */;
  %355 = reshape(%353, newshape=[4, 8, 10]) /* ty=Tensor[(4, 8, 10), uint8] */;
  %356 = cast(%var_2238, dtype="float32") /* ty=Tensor[(50), float32] */;
  %357 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 130), float64] */, dtype="float64") /* ty=Tensor[(1, 130), float64] */;
  %358 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 130), float64] */, dtype="float64") /* ty=Tensor[(1, 130), float64] */;
  %359 = reshape(%356, newshape=[1, 5, 10]) /* ty=Tensor[(1, 5, 10), float32] */;
  %360 = reshape(%357, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %361 = reshape(%358, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %362 = @func_1451(%359, %360, %361) /* ty=(Tensor[(1, 5, 10), float32], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(10, 13, 1), float64], Tensor[(16, 7, 11), float64], Tensor[(130), bool]) */;
  %363 = equal(%350, %351) /* ty=Tensor[(7, 3, 12), bool] */;
  %364 = @func_1818(%354, %355) /* ty=Tensor[(4, 8, 10), float64] */;
  %365 = @func_1772() /* ty=Tensor[(5, 2, 4), float64] */;
  %366 = %362.5;
  (%363, %364, meta[relay.Constant][29] /* ty=Tensor[(4, 80), uint8] */, %365, %366, %var_2238, meta[relay.Constant][30] /* ty=Tensor[(1, 130), float64] */)
}

def @func_10527(%var_10510: Tensor[(16, 4, 1), uint32]) -> (Tensor[(16, 4, 6), uint32],) {
  %367 = cast(%var_10510, dtype="uint32") /* ty=Tensor[(16, 4, 1), uint32] */;
  %368 = cast(meta[relay.Constant][31] /* ty=Tensor[(16, 4, 6), uint32] */, dtype="uint32") /* ty=Tensor[(16, 4, 6), uint32] */;
  %369 = multiply(%367, %368) /* ty=Tensor[(16, 4, 6), uint32] */;
  (%369,)
}

def @func_2204(%var_2163: Tensor[(10, 5), float32]) -> (Tensor[(5, 2, 4), float64], Tensor[(130), float64], uint16, Tensor[(130), float64], Tensor[(10, 5), float32], Tensor[(1232), float64], Tensor[(13, 4, 1), bool], Tensor[(10, 13, 1), float64], Tensor[(320), uint8]) {
  %370 = cast(meta[relay.Constant][32] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %371 = cast(meta[relay.Constant][33] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %372 = cast(%var_2163, dtype="float32") /* ty=Tensor[(10, 5), float32] */;
  %373 = reshape(%370, newshape=[]) /* ty=uint16 */;
  %374 = reshape(%371, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %375 = reshape(%372, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %376 = @func_1736(%373, %374, %375) /* ty=(Tensor[(13, 4, 1), bool], Tensor[(10, 13, 1), float64], Tensor[(130), float64], Tensor[(10, 13, 1), float64], Tensor[(1232), float64], Tensor[(50), float32], Tensor[(16, 7, 11), float64]) */;
  %377 = cast(meta[relay.Constant][32] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %378 = cast(meta[relay.Constant][33] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %379 = cast(%var_2163, dtype="float32") /* ty=Tensor[(10, 5), float32] */;
  %380 = reshape(%377, newshape=[]) /* ty=uint16 */;
  %381 = reshape(%378, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %382 = reshape(%379, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %383 = @func_1736(%380, %381, %382) /* ty=(Tensor[(13, 4, 1), bool], Tensor[(10, 13, 1), float64], Tensor[(130), float64], Tensor[(10, 13, 1), float64], Tensor[(1232), float64], Tensor[(50), float32], Tensor[(16, 7, 11), float64]) */;
  %384 = cast(meta[relay.Constant][32] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %385 = cast(meta[relay.Constant][33] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %386 = cast(%var_2163, dtype="float32") /* ty=Tensor[(10, 5), float32] */;
  %387 = reshape(%384, newshape=[]) /* ty=uint16 */;
  %388 = reshape(%385, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %389 = reshape(%386, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %390 = @func_1736(%387, %388, %389) /* ty=(Tensor[(13, 4, 1), bool], Tensor[(10, 13, 1), float64], Tensor[(130), float64], Tensor[(10, 13, 1), float64], Tensor[(1232), float64], Tensor[(50), float32], Tensor[(16, 7, 11), float64]) */;
  %391 = cast(meta[relay.Constant][32] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %392 = cast(meta[relay.Constant][33] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %393 = cast(%var_2163, dtype="float32") /* ty=Tensor[(10, 5), float32] */;
  %394 = reshape(%391, newshape=[]) /* ty=uint16 */;
  %395 = reshape(%392, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %396 = reshape(%393, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %397 = @func_1736(%394, %395, %396) /* ty=(Tensor[(13, 4, 1), bool], Tensor[(10, 13, 1), float64], Tensor[(130), float64], Tensor[(10, 13, 1), float64], Tensor[(1232), float64], Tensor[(50), float32], Tensor[(16, 7, 11), float64]) */;
  %398 = %383.4;
  %399 = cast(%398, dtype="float64") /* ty=Tensor[(1232), float64] */;
  %400 = cast(meta[relay.Constant][33] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %401 = cast(%var_2163, dtype="float32") /* ty=Tensor[(10, 5), float32] */;
  %402 = reshape(%399, newshape=[1232]) /* ty=Tensor[(1232), float64] */;
  %403 = reshape(%400, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %404 = reshape(%401, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %405 = @func_2055(%402, %403, %404) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(320), uint8], Tensor[(130), float64], Tensor[(50), float32]) */;
  %406 = @func_1772() /* ty=Tensor[(5, 2, 4), float64] */;
  %407 = %376.2;
  %408 = %390.0;
  %409 = %397.1;
  %410 = %405.3;
  (%406, %407, meta[relay.Constant][32] /* ty=uint16 */, meta[relay.Constant][33] /* ty=Tensor[(130), float64] */, %var_2163, %398, %408, %409, %410)
}

def @func_9268() -> (Tensor[(320), uint8],) {
  %411 = @func_4154() /* ty=Tensor[(320), uint8] */;
  (%411,)
}

def @func_10681() -> (Tensor[(5, 2, 4), float64],) {
  %412 = @func_1988() /* ty=Tensor[(5, 2, 4), float64] */;
  (%412,)
}

def @func_7074() -> Tensor[(5, 2, 4), float64] {
  @func_6766() /* ty=Tensor[(5, 2, 4), float64] */
}

def @func_10351() -> Tensor[(5, 2, 4), float64] {
  %413 = @func_5897() /* ty=(Tensor[(5, 2, 4), float64],) */;
  %413.0
}

def @func_1451(%var_1410: Tensor[(1, 5, 10), float32], %var_1429: Tensor[(130), float64], %var_1441: Tensor[(130), float64]) -> (Tensor[(1, 5, 10), float32], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(10, 13, 1), float64], Tensor[(16, 7, 11), float64], Tensor[(130), bool]) {
  %414 = cast(%var_1410, dtype="float32") /* ty=Tensor[(1, 5, 10), float32] */;
  %415 = cast(meta[relay.Constant][34] /* ty=Tensor[(1232), float64] */, dtype="float64") /* ty=Tensor[(1232), float64] */;
  %416 = reshape(%415, newshape=[16, 7, 11]) /* ty=Tensor[(16, 7, 11), float64] */;
  %417 = @func_603(%416) /* ty=(Tensor[(16, 7, 11), float64], Tensor[(16, 7, 11), float64]) */;
  %418 = cast(%var_1429, dtype="float64") /* ty=Tensor[(130), float64] */;
  %419 = reshape(%418, newshape=[10, 13, 1]) /* ty=Tensor[(10, 13, 1), float64] */;
  %420 = @func_951(%419) /* ty=(Tensor[(10, 13, 1), float64],) */;
  %421 = cast(meta[relay.Constant][34] /* ty=Tensor[(1232), float64] */, dtype="float64") /* ty=Tensor[(1232), float64] */;
  %422 = reshape(%421, newshape=[16, 7, 11]) /* ty=Tensor[(16, 7, 11), float64] */;
  %423 = @func_603(%422) /* ty=(Tensor[(16, 7, 11), float64], Tensor[(16, 7, 11), float64]) */;
  %424 = cast(%var_1441, dtype="bool") /* ty=Tensor[(130), bool] */;
  %425 = shape_of(%var_1429, dtype="int32") /* ty=Tensor[(1), int32] */;
  %426 = cast(%var_1429, dtype="bool") /* ty=Tensor[(130), bool] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?), bool] */;
  %428 = sigmoid(%414) /* ty=Tensor[(1, 5, 10), float32] */;
  %429 = %417.0;
  %430 = %420.0;
  %431 = %423.0;
  %432 = less(%426, %427) /* ty=Tensor[(130), bool] */;
  (%428, %429, meta[relay.Constant][34] /* ty=Tensor[(1232), float64] */, %430, %431, %432)
}

def @func_9470() -> (Tensor[(5, 2, 4), float64],) {
  %433 = @func_8649() /* ty=(Tensor[(5, 2, 4), float64],) */;
  %434 = %433.0;
  (%434,)
}

def @func_3290() -> (Tensor[(320), uint8], Tensor[(5, 2, 4), float64]) {
  %435 = @func_2601() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(130), float64], Tensor[(50), float32], Tensor[(4, 8, 10), float64], Tensor[(40), float64], Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) */;
  %436 = %435.9;
  %437 = @func_3121() /* ty=Tensor[(5, 2, 4), float64] */;
  (%436, %437)
}

def @func_6863() -> (Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) {
  %438 = @func_3462() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) */;
  %439 = @func_2938() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64]) */;
  %440 = %438.1;
  %441 = %439.2;
  (%440, %441)
}

def @func_2333() -> (Tensor[(5, 2, 4), float64],) {
  %442 = @func_2305() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) */;
  %443 = %442.0;
  (%443,)
}

def @func_2783() -> (Tensor[(320), uint8],) {
  %444 = @func_2305() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) */;
  %445 = %444.2;
  (%445,)
}

def @func_3863(%var_3823: Tensor[(5, 2, 4), float64]) -> (Tensor[(5, 2, 4), float32], Tensor[(320), uint8]) {
  %446 = @func_2305() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) */;
  %447 = %446.0;
  %448 = cast(%var_3823, dtype="float32") /* ty=Tensor[(5, 2, 4), float32] */;
  %449 = shape_of(%447, dtype="int32") /* ty=Tensor[(3), int32] */;
  %450 = cast(%447, dtype="float32") /* ty=Tensor[(5, 2, 4), float32] */;
  %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %452 = @func_3290() /* ty=(Tensor[(320), uint8], Tensor[(5, 2, 4), float64]) */;
  %453 = divide(%450, %451) /* ty=Tensor[(5, 2, 4), float32] */;
  %454 = %452.0;
  (%453, %454)
}

def @func_1845() -> (Tensor[(5, 2, 4), float64],) {
  %455 = @func_1772() /* ty=Tensor[(5, 2, 4), float64] */;
  (%455,)
}

def @func_8341() -> Tensor[(5, 2, 4), float64] {
  %456 = @func_3347() /* ty=(Tensor[(5, 2, 4), float64],) */;
  %456.0
}

def @func_4893() -> (Tensor[(5, 2, 4), float64],) {
  %457 = @func_1988() /* ty=Tensor[(5, 2, 4), float64] */;
  (%457,)
}

def @func_4036() -> (Tensor[(4, 8, 10), float64], Tensor[(4, 8, 10), float64]) {
  %458 = @func_3881() /* ty=Tensor[(4, 8, 10), float64] */;
  %459 = @func_2821() /* ty=Tensor[(4, 8, 10), float64] */;
  (%458, %459)
}

def @func_6360() -> Tensor[(320), bool] {
  %460 = @func_6000() /* ty=(Tensor[(320), uint8], Tensor[(320), bool]) */;
  %460.1
}

def @func_7780() -> (Tensor[(5, 2, 4), float64], Tensor[(320), float32]) {
  %461 = @func_4893() /* ty=(Tensor[(5, 2, 4), float64],) */;
  %462 = @func_4746() /* ty=Tensor[(320), uint8] */;
  %463 = cast(%462, dtype="float32") /* ty=Tensor[(320), float32] */;
  %464 = %461.0;
  %465 = sinh(%463) /* ty=Tensor[(320), float32] */;
  (%464, %465)
}

def @func_9340(%var_9300: Tensor[(3, 10, 3), bool], %var_9301: Tensor[(3, 10, 3), bool]) -> (Tensor[(3, 10, 3), bool], Tensor[(3, 10, 3), float32], Tensor[(320), bool], Tensor[(320), bool], Tensor[(3, 10, 3), int16], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) {
  %466 = cast(%var_9301, dtype="bool") /* ty=Tensor[(3, 10, 3), bool] */;
  %467 = shape_of(%var_9300, dtype="int32") /* ty=Tensor[(3), int32] */;
  %468 = cast(%var_9300, dtype="bool") /* ty=Tensor[(3, 10, 3), bool] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %470 = cast(%var_9300, dtype="float32") /* ty=Tensor[(3, 10, 3), float32] */;
  %471 = @func_6110() /* ty=(Tensor[(320), bool],) */;
  %472 = cast(meta[relay.Constant][35] /* ty=Tensor[(3, 10, 3), bool] */, dtype="int16") /* ty=Tensor[(3, 10, 3), int16] */;
  %473 = shape_of(%var_9301, dtype="int32") /* ty=Tensor[(3), int32] */;
  %474 = cast(%var_9301, dtype="int16") /* ty=Tensor[(3, 10, 3), int16] */;
  %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %476 = @func_4036() /* ty=(Tensor[(4, 8, 10), float64], Tensor[(4, 8, 10), float64]) */;
  %477 = @func_6000() /* ty=(Tensor[(320), uint8], Tensor[(320), bool]) */;
  %478 = logical_or(%468, %469) /* ty=Tensor[(3, 10, 3), bool] */;
  %479 = atanh(%470) /* ty=Tensor[(3, 10, 3), float32] */;
  %480 = %471.0;
  %481 = @func_4418() /* ty=Tensor[(320), bool] */;
  %482 = subtract(%474, %475) /* ty=Tensor[(3, 10, 3), int16] */;
  %483 = %476.1;
  %484 = %477.0;
  (%478, %479, %480, %481, %482, %483, %484)
}

def @func_5735() -> Tensor[(320), uint8] {
  %485 = @func_3801() /* ty=(Tensor[(320), uint8],) */;
  %485.0
}

def @func_1772() -> Tensor[(5, 2, 4), float64] {
  %486 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 2, 4), float64] */, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  atanh(%486) /* ty=Tensor[(5, 2, 4), float64] */
}

def @func_4162() -> (Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) {
  %487 = @func_2865() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) */;
  %488 = @func_1988() /* ty=Tensor[(5, 2, 4), float64] */;
  %489 = %487.1;
  (%488, %489)
}

def @func_4278(%var_4263: Tensor[(5, 2, 4), float64]) -> Tensor[(5, 2, 4), int32] {
  %490 = @func_3462() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) */;
  %491 = %490.1;
  %492 = cast(%var_4263, dtype="int32") /* ty=Tensor[(5, 2, 4), int32] */;
  %493 = shape_of(%491, dtype="int32") /* ty=Tensor[(3), int32] */;
  %494 = cast(%491, dtype="int32") /* ty=Tensor[(5, 2, 4), int32] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  maximum(%494, %495) /* ty=Tensor[(5, 2, 4), int32] */
}

def @func_8735(%var_8693: Tensor[(13, 10), float64], %var_8694: Tensor[(5, 10), float32], %var_8700: Tensor[(5, 2, 4), float64]) -> (Tensor[(320), uint8], Tensor[(13, 10), float64], Tensor[(5, 10), float32], Tensor[(5, 2, 4), bool]) {
  %496 = cast(%var_8693, dtype="float64") /* ty=Tensor[(13, 10), float64] */;
  %497 = cast(%var_8694, dtype="float32") /* ty=Tensor[(5, 10), float32] */;
  %498 = reshape(%496, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %499 = reshape(%497, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %500 = @func_1916(%498, %499) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8], Tensor[(50), float32], uint16, Tensor[(130), float64], Tensor[(50), float32], Tensor[(5, 2, 4), float32]) */;
  %501 = %500.0;
  %502 = cast(%var_8700, dtype="bool") /* ty=Tensor[(5, 2, 4), bool] */;
  %503 = shape_of(%501, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(%501, dtype="bool") /* ty=Tensor[(5, 2, 4), bool] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %506 = @func_4774() /* ty=Tensor[(320), uint8] */;
  %507 = less(%504, %505) /* ty=Tensor[(5, 2, 4), bool] */;
  (%506, %var_8693, %var_8694, %507)
}

def @func_5618(%var_5614: Tensor[(4, 80), float64], %var_5615: Tensor[(13, 10), float64]) -> (Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float32], Tensor[(4, 80), float64], Tensor[(13, 10), float64]) {
  %508 = @func_3290() /* ty=(Tensor[(320), uint8], Tensor[(5, 2, 4), float64]) */;
  %509 = @func_1845() /* ty=(Tensor[(5, 2, 4), float64],) */;
  %510 = cast(%var_5614, dtype="float64") /* ty=Tensor[(4, 80), float64] */;
  %511 = cast(%var_5615, dtype="float64") /* ty=Tensor[(13, 10), float64] */;
  %512 = reshape(%510, newshape=[4, 8, 10]) /* ty=Tensor[(4, 8, 10), float64] */;
  %513 = reshape(%511, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %514 = @func_3253(%512, %513) /* ty=(Tensor[(4, 8, 10), bool], Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(50), float32], Tensor[(130), float64], Tensor[(4, 8, 10), float32], Tensor[(5, 2, 4), float64]) */;
  %515 = %508.1;
  %516 = %509.0;
  %517 = %514.5;
  (%515, %516, %517, %var_5614, %var_5615)
}

def @func_951(%var_936: Tensor[(10, 13, 1), float64]) -> (Tensor[(10, 13, 1), float64],) {
  %518 = cast(%var_936, dtype="float64") /* ty=Tensor[(10, 13, 1), float64] */;
  %519 = log(%518) /* ty=Tensor[(10, 13, 1), float64] */;
  (%519,)
}

def @func_9221(%var_9195: Tensor[(11, 3, 13), float32]) -> (Tensor[(11, 3, 13), uint16], Tensor[(5, 2, 4), float64]) {
  %520 = cast(%var_9195, dtype="float32") /* ty=Tensor[(11, 3, 13), float32] */;
  %521 = asin(%520) /* ty=Tensor[(11, 3, 13), float32] */;
  %522 = cast(%var_9195, dtype="uint16") /* ty=Tensor[(11, 3, 13), uint16] */;
  %523 = shape_of(%521, dtype="int32") /* ty=Tensor[(3), int32] */;
  %524 = cast(%521, dtype="uint16") /* ty=Tensor[(11, 3, 13), uint16] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %526 = @func_6478() /* ty=(Tensor[(5, 2, 4), float64],) */;
  %527 = logical_xor(%524, %525) /* ty=Tensor[(11, 3, 13), uint16] */;
  %528 = %526.0;
  (%527, %528)
}

def @func_6241() -> (Tensor[(4, 8, 10), float64], uint16, Tensor[(50), float32]) {
  %529 = @func_4162() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) */;
  %530 = cast(meta[relay.Constant][37] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %531 = reshape(%530, newshape=[10, 5]) /* ty=Tensor[(10, 5), float32] */;
  %532 = @func_2204(%531) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(130), float64], uint16, Tensor[(130), float64], Tensor[(10, 5), float32], Tensor[(1232), float64], Tensor[(13, 4, 1), bool], Tensor[(10, 13, 1), float64], Tensor[(320), uint8]) */;
  %533 = %529.1;
  %534 = %532.2;
  (%533, %534, meta[relay.Constant][37] /* ty=Tensor[(50), float32] */)
}

def @func_10673() -> Tensor[(5, 2, 4), float64] {
  %535 = @func_2601() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(130), float64], Tensor[(50), float32], Tensor[(4, 8, 10), float64], Tensor[(40), float64], Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) */;
  %535.6
}

def @func_3881() -> Tensor[(4, 8, 10), float64] {
  %536 = @func_2957() /* ty=(Tensor[(4, 8, 10), float64],) */;
  %536.0
}

def @func_2883() -> Tensor[(4, 8, 10), float64] {
  @func_2821() /* ty=Tensor[(4, 8, 10), float64] */
}

def @func_9673() -> Tensor[(4, 8, 10), float64] {
  %537 = @func_5790() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) */;
  %537.1
}

def @func_6391(%var_6374: Tensor[(11, 1, 6), uint64], %var_6375: Tensor[(11, 12, 6), uint64]) -> (Tensor[(11, 12, 6), uint64], Tensor[(15, 6, 3), float32], Tensor[(120), uint64], Tensor[(45, 2), uint32]) {
  %538 = cast(%var_6374, dtype="uint64") /* ty=Tensor[(11, 1, 6), uint64] */;
  %539 = cast(%var_6375, dtype="uint64") /* ty=Tensor[(11, 12, 6), uint64] */;
  %540 = cast(meta[relay.Constant][38] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %541 = cast(meta[relay.Constant][39] /* ty=Tensor[(45, 2), uint32] */, dtype="uint32") /* ty=Tensor[(45, 2), uint32] */;
  %542 = reshape(%540, newshape=[5, 12, 2]) /* ty=Tensor[(5, 12, 2), uint64] */;
  %543 = reshape(%541, newshape=[90]) /* ty=Tensor[(90), uint32] */;
  %544 = @func_6062(%542, %543) /* ty=(Tensor[(5, 12, 2), uint64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64], Tensor[(90), uint32], Tensor[(15, 6, 3), float32]) */;
  %545 = bitwise_and(%538, %539) /* ty=Tensor[(11, 12, 6), uint64] */;
  %546 = %544.4;
  (%545, %546, meta[relay.Constant][38] /* ty=Tensor[(120), uint64] */, meta[relay.Constant][39] /* ty=Tensor[(45, 2), uint32] */)
}

def @func_1916(%var_1905: Tensor[(130), float64], %var_1906: Tensor[(50), float32]) -> (Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8], Tensor[(50), float32], uint16, Tensor[(130), float64], Tensor[(50), float32], Tensor[(5, 2, 4), float32]) {
  %547 = cast(meta[relay.Constant][40] /* ty=Tensor[(320), uint8] */, dtype="uint8") /* ty=Tensor[(320), uint8] */;
  %548 = cast(meta[relay.Constant][40] /* ty=Tensor[(320), uint8] */, dtype="uint8") /* ty=Tensor[(320), uint8] */;
  %549 = reshape(%547, newshape=[4, 8, 10]) /* ty=Tensor[(4, 8, 10), uint8] */;
  %550 = reshape(%548, newshape=[4, 8, 10]) /* ty=Tensor[(4, 8, 10), uint8] */;
  %551 = cast(meta[relay.Constant][41] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %552 = cast(%var_1905, dtype="float64") /* ty=Tensor[(130), float64] */;
  %553 = cast(%var_1906, dtype="float32") /* ty=Tensor[(50), float32] */;
  %554 = reshape(%551, newshape=[]) /* ty=uint16 */;
  %555 = reshape(%552, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %556 = reshape(%553, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %557 = @func_1736(%554, %555, %556) /* ty=(Tensor[(13, 4, 1), bool], Tensor[(10, 13, 1), float64], Tensor[(130), float64], Tensor[(10, 13, 1), float64], Tensor[(1232), float64], Tensor[(50), float32], Tensor[(16, 7, 11), float64]) */;
  %558 = @func_1772() /* ty=Tensor[(5, 2, 4), float64] */;
  %559 = cast(%558, dtype="float32") /* ty=Tensor[(5, 2, 4), float32] */;
  %560 = log2(%559) /* ty=Tensor[(5, 2, 4), float32] */;
  %561 = cast(%560, dtype="float32") /* ty=Tensor[(5, 2, 4), float32] */;
  %562 = @func_1772() /* ty=Tensor[(5, 2, 4), float64] */;
  %563 = @func_1818(%549, %550) /* ty=Tensor[(4, 8, 10), float64] */;
  %564 = %557.5;
  %565 = sin(%561) /* ty=Tensor[(5, 2, 4), float32] */;
  (%562, %563, meta[relay.Constant][40] /* ty=Tensor[(320), uint8] */, %564, meta[relay.Constant][41] /* ty=uint16 */, %var_1905, %var_1906, %565)
}

def @func_6478() -> (Tensor[(5, 2, 4), float64],) {
  %566 = @func_3462() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) */;
  %567 = %566.1;
  (%567,)
}

def @func_8016(%var_7993: Tensor[(5, 2, 5), float64]) -> (Tensor[(5, 2, 4), float64], Tensor[(5, 2, 5), bool], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64], Tensor[(130), float64]) {
  %568 = @func_3163() /* ty=Tensor[(5, 2, 5), float64] */;
  %569 = cast(%var_7993, dtype="int8") /* ty=Tensor[(5, 2, 5), int8] */;
  %570 = shape_of(%568, dtype="int32") /* ty=Tensor[(3), int32] */;
  %571 = cast(%568, dtype="int8") /* ty=Tensor[(5, 2, 5), int8] */;
  %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %573 = bitwise_and(%571, %572) /* ty=Tensor[(5, 2, 5), int8] */;
  %574 = cast(%568, dtype="bool") /* ty=Tensor[(5, 2, 5), bool] */;
  %575 = shape_of(%573, dtype="int32") /* ty=Tensor[(3), int32] */;
  %576 = cast(%573, dtype="bool") /* ty=Tensor[(5, 2, 5), bool] */;
  %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %578 = @func_4036() /* ty=(Tensor[(4, 8, 10), float64], Tensor[(4, 8, 10), float64]) */;
  %579 = cast(meta[relay.Constant][42] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %580 = reshape(%579, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %581 = @func_2735(%580) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(1, 130), float64], Tensor[(50), float32], Tensor[(130), float64]) */;
  %582 = @func_3121() /* ty=Tensor[(5, 2, 4), float64] */;
  %583 = logical_or(%576, %577) /* ty=Tensor[(5, 2, 5), bool] */;
  %584 = %578.1;
  %585 = %581.0;
  (%582, %583, %584, %585, meta[relay.Constant][42] /* ty=Tensor[(130), float64] */)
}

def @func_6628(%var_6622: Tensor[(13, 1, 3), float64]) -> Tensor[(13, 1, 3), float64] {
  %586 = cast(%var_6622, dtype="float64") /* ty=Tensor[(13, 1, 3), float64] */;
  log(%586) /* ty=Tensor[(13, 1, 3), float64] */
}

def @func_7371() -> (Tensor[(5, 2, 4), float64], Tensor[(320), uint8], Tensor[(5, 2, 4), float64]) {
  %587 = @func_6745() /* ty=(Tensor[(320), uint8], Tensor[(320), uint8], Tensor[(320), uint8], Tensor[(320), uint8], Tensor[(5, 2, 4), float64], Tensor[(320), uint8]) */;
  %588 = @func_6478() /* ty=(Tensor[(5, 2, 4), float64],) */;
  %589 = @func_3981() /* ty=Tensor[(5, 2, 4), float64] */;
  %590 = %587.0;
  %591 = %588.0;
  (%589, %590, %591)
}

def @func_2601() -> (Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(130), float64], Tensor[(50), float32], Tensor[(4, 8, 10), float64], Tensor[(40), float64], Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) {
  %592 = cast(meta[relay.Constant][43] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %593 = cast(meta[relay.Constant][44] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %594 = reshape(%592, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %595 = reshape(%593, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %596 = @func_1916(%594, %595) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8], Tensor[(50), float32], uint16, Tensor[(130), float64], Tensor[(50), float32], Tensor[(5, 2, 4), float32]) */;
  %597 = @func_1988() /* ty=Tensor[(5, 2, 4), float64] */;
  %598 = cast(%597, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  %599 = reshape(%598, newshape=[40]) /* ty=Tensor[(40), float64] */;
  %600 = @func_2499(%599) /* ty=(Tensor[(4, 8, 10), float64], Tensor[(16, 7, 11), float64], uint16, Tensor[(130, 1), float64], Tensor[(50), float32], Tensor[(5, 2, 4), float64], Tensor[(40), float64]) */;
  %601 = cast(%597, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  %602 = reshape(%601, newshape=[40]) /* ty=Tensor[(40), float64] */;
  %603 = @func_2499(%602) /* ty=(Tensor[(4, 8, 10), float64], Tensor[(16, 7, 11), float64], uint16, Tensor[(130, 1), float64], Tensor[(50), float32], Tensor[(5, 2, 4), float64], Tensor[(40), float64]) */;
  %604 = @func_2305() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) */;
  %605 = %604.1;
  %606 = cast(%605, dtype="float64") /* ty=Tensor[(4, 8, 10), float64] */;
  %607 = @func_2305() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) */;
  %608 = %596.1;
  %609 = %600.0;
  %610 = %603.6;
  %611 = @func_1988() /* ty=Tensor[(5, 2, 4), float64] */;
  %612 = @func_1772() /* ty=Tensor[(5, 2, 4), float64] */;
  %613 = acosh(%606) /* ty=Tensor[(4, 8, 10), float64] */;
  %614 = %607.2;
  (%597, %608, meta[relay.Constant][43] /* ty=Tensor[(130), float64] */, meta[relay.Constant][44] /* ty=Tensor[(50), float32] */, %609, %610, %611, %612, %613, %614)
}

def @func_3121() -> Tensor[(5, 2, 4), float64] {
  @func_1772() /* ty=Tensor[(5, 2, 4), float64] */
}

def @func_3462() -> (Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) {
  %615 = @func_2601() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(130), float64], Tensor[(50), float32], Tensor[(4, 8, 10), float64], Tensor[(40), float64], Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) */;
  %616 = @func_1845() /* ty=(Tensor[(5, 2, 4), float64],) */;
  %617 = %615.0;
  %618 = %616.0;
  (%617, %618)
}

def @func_7794() -> (Tensor[(5, 2, 5), float64],) {
  %619 = @func_3163() /* ty=Tensor[(5, 2, 5), float64] */;
  (%619,)
}

def @func_9767() -> (Tensor[(320), bool], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64], Tensor[(90), uint32]) {
  %620 = @func_6110() /* ty=(Tensor[(320), bool],) */;
  %621 = @func_7525() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(13, 2, 9), bool]) */;
  %622 = @func_2305() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) */;
  %623 = cast(meta[relay.Constant][45] /* ty=Tensor[(90), uint32] */, dtype="uint32") /* ty=Tensor[(90), uint32] */;
  %624 = reshape(%623, newshape=[15, 6, 1]) /* ty=Tensor[(15, 6, 1), uint32] */;
  %625 = @func_4719(%624) /* ty=(Tensor[(15, 6, 3), uint32], Tensor[(5, 2, 4), float64]) */;
  %626 = %620.0;
  %627 = %621.0;
  %628 = %622.1;
  %629 = %625.1;
  (%626, %627, %628, %629, meta[relay.Constant][45] /* ty=Tensor[(90), uint32] */)
}

def @func_9616(%var_9609: Tensor[(13, 12, 4), float32]) -> Tensor[(13, 12, 4), bool] {
  %630 = @func_4293() /* ty=(Tensor[(13, 1, 4), float32],) */;
  %631 = %630.0;
  %632 = cast(%631, dtype="bool") /* ty=Tensor[(13, 1, 4), bool] */;
  %633 = cast(%var_9609, dtype="bool") /* ty=Tensor[(13, 12, 4), bool] */;
  less(%632, %633) /* ty=Tensor[(13, 12, 4), bool] */
}

def @func_10295() -> (Tensor[(13, 10), float64], Tensor[(5, 2, 4), float64]) {
  %634 = @func_7859() /* ty=(Tensor[(320), uint8], Tensor[(13, 10), float64], Tensor[(130), float64]) */;
  %635 = %634.1;
  %636 = @func_7074() /* ty=Tensor[(5, 2, 4), float64] */;
  (%635, %636)
}

def @func_2613(%var_2610: Tensor[(50), float32], %var_2611: Tensor[(1, 130), float64]) -> (Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(50), float32], Tensor[(1, 130), float64]) {
  %637 = cast(%var_2610, dtype="float32") /* ty=Tensor[(50), float32] */;
  %638 = cast(%var_2611, dtype="float64") /* ty=Tensor[(1, 130), float64] */;
  %639 = cast(%var_2611, dtype="float64") /* ty=Tensor[(1, 130), float64] */;
  %640 = reshape(%637, newshape=[1, 5, 10]) /* ty=Tensor[(1, 5, 10), float32] */;
  %641 = reshape(%638, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %642 = reshape(%639, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %643 = @func_1451(%640, %641, %642) /* ty=(Tensor[(1, 5, 10), float32], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(10, 13, 1), float64], Tensor[(16, 7, 11), float64], Tensor[(130), bool]) */;
  %644 = @func_1988() /* ty=Tensor[(5, 2, 4), float64] */;
  %645 = %643.1;
  (%644, %645, %var_2610, %var_2611)
}

def @func_2865() -> (Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) {
  %646 = @func_1845() /* ty=(Tensor[(5, 2, 4), float64],) */;
  %647 = %646.0;
  %648 = cast(%647, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  %649 = reshape(%648, newshape=[40]) /* ty=Tensor[(40), float64] */;
  %650 = @func_2499(%649) /* ty=(Tensor[(4, 8, 10), float64], Tensor[(16, 7, 11), float64], uint16, Tensor[(130, 1), float64], Tensor[(50), float32], Tensor[(5, 2, 4), float64], Tensor[(40), float64]) */;
  %651 = %650.0;
  (%647, %651)
}

def @func_8877(%var_8847: Tensor[(1, 50), float32], %var_8875: Tensor[(90), uint32]) -> (Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(13, 10), float64], Tensor[(1, 50), float64], Tensor[(4, 8, 10), float64], Tensor[(1, 120), uint64], Tensor[(90), uint32]) {
  %652 = @func_2938() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64]) */;
  %653 = cast(meta[relay.Constant][46] /* ty=Tensor[(1232), float64] */, dtype="float64") /* ty=Tensor[(1232), float64] */;
  %654 = cast(meta[relay.Constant][47] /* ty=Tensor[(13, 10), float64] */, dtype="float64") /* ty=Tensor[(13, 10), float64] */;
  %655 = cast(%var_8847, dtype="float32") /* ty=Tensor[(1, 50), float32] */;
  %656 = reshape(%653, newshape=[1232]) /* ty=Tensor[(1232), float64] */;
  %657 = reshape(%654, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %658 = reshape(%655, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %659 = @func_2055(%656, %657, %658) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(320), uint8], Tensor[(130), float64], Tensor[(50), float32]) */;
  %660 = cast(%var_8847, dtype="float64") /* ty=Tensor[(1, 50), float64] */;
  %661 = cast(meta[relay.Constant][48] /* ty=Tensor[(1, 120), uint64] */, dtype="uint64") /* ty=Tensor[(1, 120), uint64] */;
  %662 = cast(%var_8875, dtype="uint32") /* ty=Tensor[(90), uint32] */;
  %663 = reshape(%661, newshape=[5, 12, 2]) /* ty=Tensor[(5, 12, 2), uint64] */;
  %664 = reshape(%662, newshape=[90]) /* ty=Tensor[(90), uint32] */;
  %665 = @func_6062(%663, %664) /* ty=(Tensor[(5, 12, 2), uint64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64], Tensor[(90), uint32], Tensor[(15, 6, 3), float32]) */;
  %666 = %652.0;
  %667 = %659.1;
  %668 = sigmoid(%660) /* ty=Tensor[(1, 50), float64] */;
  %669 = %665.1;
  (%666, %667, meta[relay.Constant][46] /* ty=Tensor[(1232), float64] */, meta[relay.Constant][47] /* ty=Tensor[(13, 10), float64] */, %668, %669, meta[relay.Constant][48] /* ty=Tensor[(1, 120), uint64] */, %var_8875)
}

def @func_3163() -> Tensor[(5, 2, 5), float64] {
  %670 = cast(meta[relay.Constant][49] /* ty=Tensor[(5, 2, 5), float64] */, dtype="float64") /* ty=Tensor[(5, 2, 5), float64] */;
  log2(%670) /* ty=Tensor[(5, 2, 5), float64] */
}

def @func_7525() -> (Tensor[(5, 2, 4), float64], Tensor[(13, 2, 9), bool]) {
  %671 = @func_1845() /* ty=(Tensor[(5, 2, 4), float64],) */;
  %672 = @func_4138() /* ty=(Tensor[(13, 2, 9), bool],) */;
  %673 = %671.0;
  %674 = %672.0;
  (%673, %674)
}

def @func_5197(%var_5184: Tensor[(2, 15, 10), int16], %var_5185: Tensor[(2, 15, 10), int16], %var_5190: Tensor[(2, 15, 10), int16]) -> (Tensor[(2, 15, 10), bool], Tensor[(2, 15, 10), bool]) {
  %675 = cast(%var_5185, dtype="bool") /* ty=Tensor[(2, 15, 10), bool] */;
  %676 = shape_of(%var_5184, dtype="int32") /* ty=Tensor[(3), int32] */;
  %677 = cast(%var_5184, dtype="bool") /* ty=Tensor[(2, 15, 10), bool] */;
  %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %679 = cast(%var_5190, dtype="bool") /* ty=Tensor[(2, 15, 10), bool] */;
  %680 = shape_of(%var_5185, dtype="int32") /* ty=Tensor[(3), int32] */;
  %681 = cast(%var_5185, dtype="bool") /* ty=Tensor[(2, 15, 10), bool] */;
  %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %683 = equal(%677, %678) /* ty=Tensor[(2, 15, 10), bool] */;
  %684 = less_equal(%681, %682) /* ty=Tensor[(2, 15, 10), bool] */;
  (%683, %684)
}

def @func_8162() -> Tensor[(320), uint8] {
  @func_5735() /* ty=Tensor[(320), uint8] */
}

def @func_8260(%var_8205: Tensor[(11, 12, 16), uint8]) -> (Tensor[(11, 12, 16), uint8], Tensor[(130, 1), float64]) {
  %685 = cast(meta[relay.Constant][50] /* ty=Tensor[(11, 12, 16), uint8] */, dtype="uint8") /* ty=Tensor[(11, 12, 16), uint8] */;
  %686 = shape_of(%var_8205, dtype="int32") /* ty=Tensor[(3), int32] */;
  %687 = cast(%var_8205, dtype="uint8") /* ty=Tensor[(11, 12, 16), uint8] */;
  %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %689 = @func_6835() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(1, 130), float64], Tensor[(130, 1), float64]) */;
  %690 = left_shift(%687, %688) /* ty=Tensor[(11, 12, 16), uint8] */;
  %691 = %689.2;
  (%690, %691)
}

def @func_8060(%var_8057: Tensor[(715), float32]) -> (Tensor[(320), uint8], Tensor[(13, 11, 5), float32], Tensor[(715), float32]) {
  %692 = cast(%var_8057, dtype="float32") /* ty=Tensor[(715), float32] */;
  %693 = reshape(%692, newshape=[13, 11, 5]) /* ty=Tensor[(13, 11, 5), float32] */;
  %694 = @func_7408() /* ty=Tensor[(320), uint8] */;
  %695 = @func_7886(%693) /* ty=Tensor[(13, 11, 5), float32] */;
  (%694, %695, %var_8057)
}

def @func_9025(%var_9000: Tensor[(156), float32], %var_9006: Tensor[(36), int32]) -> (Tensor[(320), uint8], Tensor[(5, 2, 4), int32], Tensor[(40), float64], Tensor[(26, 5), float64], Tensor[(156), float32], Tensor[(252), uint16], Tensor[(36), int32], Tensor[(50), float32], Tensor[(320), bool], Tensor[(5, 2, 4), float64]) {
  %696 = cast(meta[relay.Constant][51] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
  %697 = reshape(%696, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), float64] */;
  %698 = cast(%var_9000, dtype="float32") /* ty=Tensor[(156), float32] */;
  %699 = reshape(%698, newshape=[156]) /* ty=Tensor[(156), float32] */;
  %700 = @func_4197(%699) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(130), float64], Tensor[(156), float32], Tensor[(26, 5), float64], Tensor[(50), float32], Tensor[(320), uint8]) */;
  %701 = cast(%var_9006, dtype="int32") /* ty=Tensor[(36), int32] */;
  %702 = cast(%var_9006, dtype="int32") /* ty=Tensor[(36), int32] */;
  %703 = cast(meta[relay.Constant][51] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
  %704 = cast(meta[relay.Constant][52] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %705 = reshape(%701, newshape=[4, 3, 3]) /* ty=Tensor[(4, 3, 3), int32] */;
  %706 = reshape(%702, newshape=[4, 3, 3]) /* ty=Tensor[(4, 3, 3), int32] */;
  %707 = reshape(%703, newshape=[40]) /* ty=Tensor[(40), float64] */;
  %708 = reshape(%704, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %709 = @func_6308(%705, %706, %707, %708) /* ty=(Tensor[(4, 3, 3), int32], Tensor[(5, 2, 4), uint32], Tensor[(40), float64], Tensor[(130), bool], Tensor[(252), uint16], Tensor[(50), float32]) */;
  %710 = @func_6110() /* ty=(Tensor[(320), bool],) */;
  %711 = @func_4278(%697) /* ty=Tensor[(5, 2, 4), int32] */;
  %712 = cast(%711, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  %713 = reshape(%712, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), float64] */;
  %714 = @func_3959(%713) /* ty=(Tensor[(5, 2, 4), float32], Tensor[(320), uint8], Tensor[(5, 2, 4), float64]) */;
  %715 = @func_7396() /* ty=Tensor[(320), uint8] */;
  %716 = %700.3;
  %717 = %709.4;
  %718 = %710.0;
  %719 = %714.2;
  (%715, %711, meta[relay.Constant][51] /* ty=Tensor[(40), float64] */, %716, %var_9000, %717, %var_9006, meta[relay.Constant][52] /* ty=Tensor[(50), float32] */, %718, %719)
}

def @func_10022(%var_9999: uint16) -> (uint16, Tensor[(10, 2, 10), int8], Tensor[(13, 2, 9), float64]) {
  %720 = cast(%var_9999, dtype="uint16") /* ty=uint16 */;
  %721 = cast(meta[relay.Constant][53] /* ty=Tensor[(5, 40), uint16] */, dtype="uint16") /* ty=Tensor[(5, 40), uint16] */;
  %722 = reshape(%720, newshape=[]) /* ty=uint16 */;
  %723 = reshape(%721, newshape=[10, 2, 10]) /* ty=Tensor[(10, 2, 10), uint16] */;
  %724 = @func_4494(%722, %723) /* ty=(Tensor[(10, 2, 10), uint16], Tensor[(10, 2, 10), float64]) */;
  %725 = %724.1;
  %726 = cast(meta[relay.Constant][53] /* ty=Tensor[(5, 40), uint16] */, dtype="int8") /* ty=Tensor[(5, 40), int8] */;
  %727 = shape_of(%725, dtype="int32") /* ty=Tensor[(3), int32] */;
  %728 = cast(%725, dtype="int8") /* ty=Tensor[(10, 2, 10), int8] */;
  %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %730 = @func_8074() /* ty=(Tensor[(13, 2, 9), bool],) */;
  %731 = %730.0;
  %732 = cast(%731, dtype="float32") /* ty=Tensor[(13, 2, 9), float32] */;
  %733 = sigmoid(%732) /* ty=Tensor[(13, 2, 9), float32] */;
  %734 = cast(%733, dtype="float64") /* ty=Tensor[(13, 2, 9), float64] */;
  %735 = left_shift(%728, %729) /* ty=Tensor[(10, 2, 10), int8] */;
  %736 = sqrt(%734) /* ty=Tensor[(13, 2, 9), float64] */;
  (%var_9999, %735, %736)
}

def @func_3253(%var_3175: Tensor[(4, 8, 10), float64], %var_3205: Tensor[(130), float64]) -> (Tensor[(4, 8, 10), bool], Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(50), float32], Tensor[(130), float64], Tensor[(4, 8, 10), float32], Tensor[(5, 2, 4), float64]) {
  %737 = @func_2865() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) */;
  %738 = %737.1;
  %739 = cast(%var_3175, dtype="bool") /* ty=Tensor[(4, 8, 10), bool] */;
  %740 = shape_of(%738, dtype="int32") /* ty=Tensor[(3), int32] */;
  %741 = cast(%738, dtype="bool") /* ty=Tensor[(4, 8, 10), bool] */;
  %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %743 = @func_2333() /* ty=(Tensor[(5, 2, 4), float64],) */;
  %744 = cast(meta[relay.Constant][54] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %745 = cast(%var_3205, dtype="float64") /* ty=Tensor[(130), float64] */;
  %746 = cast(%var_3205, dtype="float64") /* ty=Tensor[(130), float64] */;
  %747 = reshape(%744, newshape=[1, 5, 10]) /* ty=Tensor[(1, 5, 10), float32] */;
  %748 = reshape(%745, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %749 = reshape(%746, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %750 = @func_1451(%747, %748, %749) /* ty=(Tensor[(1, 5, 10), float32], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(10, 13, 1), float64], Tensor[(16, 7, 11), float64], Tensor[(130), bool]) */;
  %751 = cast(%var_3175, dtype="float32") /* ty=Tensor[(4, 8, 10), float32] */;
  %752 = acos(%751) /* ty=Tensor[(4, 8, 10), float32] */;
  %753 = cast(%752, dtype="float32") /* ty=Tensor[(4, 8, 10), float32] */;
  %754 = %743.0;
  %755 = cast(%754, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  %756 = reshape(%755, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), float64] */;
  %757 = less(%741, %742) /* ty=Tensor[(4, 8, 10), bool] */;
  %758 = %750.4;
  %759 = cosh(%753) /* ty=Tensor[(4, 8, 10), float32] */;
  %760 = @func_2372(%756) /* ty=Tensor[(5, 2, 4), float64] */;
  (%757, %754, %758, meta[relay.Constant][54] /* ty=Tensor[(50), float32] */, %var_3205, %759, %760)
}

def @func_9643() -> (Tensor[(320), uint8],) {
  %761 = @func_6745() /* ty=(Tensor[(320), uint8], Tensor[(320), uint8], Tensor[(320), uint8], Tensor[(320), uint8], Tensor[(5, 2, 4), float64], Tensor[(320), uint8]) */;
  %762 = %761.0;
  (%762,)
}

def @func_8556() -> (Tensor[(13, 2, 9), bool],) {
  %763 = @func_8074() /* ty=(Tensor[(13, 2, 9), bool],) */;
  %764 = %763.0;
  (%764,)
}

def @func_5666() -> Tensor[(4, 8, 10), float64] {
  %765 = @func_2938() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64]) */;
  %765.1
}

def @func_6110() -> (Tensor[(320), bool],) {
  %766 = @func_4418() /* ty=Tensor[(320), bool] */;
  (%766,)
}

def @func_2515(%var_2510: Tensor[(5, 2, 4), float64]) -> (Tensor[(5, 2, 4), uint32],) {
  %767 = @func_2333() /* ty=(Tensor[(5, 2, 4), float64],) */;
  %768 = %767.0;
  %769 = cast(%var_2510, dtype="uint32") /* ty=Tensor[(5, 2, 4), uint32] */;
  %770 = shape_of(%768, dtype="int32") /* ty=Tensor[(3), int32] */;
  %771 = cast(%768, dtype="uint32") /* ty=Tensor[(5, 2, 4), uint32] */;
  %772 = dyn.reshape(%769, %770, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %773 = left_shift(%771, %772) /* ty=Tensor[(5, 2, 4), uint32] */;
  (%773,)
}

def @func_8484(%var_8447: Tensor[(50), float32]) -> (Tensor[(130), float64], Tensor[(130), bool], Tensor[(50), float32], Tensor[(4, 8, 10), float64]) {
  %774 = @func_7859() /* ty=(Tensor[(320), uint8], Tensor[(13, 10), float64], Tensor[(130), float64]) */;
  %775 = cast(%var_8447, dtype="float32") /* ty=Tensor[(50), float32] */;
  %776 = %774.2;
  %777 = cast(%776, dtype="float64") /* ty=Tensor[(130), float64] */;
  %778 = cast(%776, dtype="float64") /* ty=Tensor[(130), float64] */;
  %779 = reshape(%775, newshape=[1, 5, 10]) /* ty=Tensor[(1, 5, 10), float32] */;
  %780 = reshape(%777, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %781 = reshape(%778, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %782 = @func_1451(%779, %780, %781) /* ty=(Tensor[(1, 5, 10), float32], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(10, 13, 1), float64], Tensor[(16, 7, 11), float64], Tensor[(130), bool]) */;
  %783 = %782.5;
  %784 = @func_2883() /* ty=Tensor[(4, 8, 10), float64] */;
  (%776, %783, %var_8447, %784)
}

def @func_5126() -> (Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), uint32], Tensor[(320), uint8]) {
  %785 = @func_3462() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) */;
  %786 = @func_4162() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) */;
  %787 = @func_3981() /* ty=Tensor[(5, 2, 4), float64] */;
  %788 = cast(%787, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  %789 = reshape(%788, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), float64] */;
  %790 = @func_2515(%789) /* ty=(Tensor[(5, 2, 4), uint32],) */;
  %791 = %785.0;
  %792 = %786.1;
  %793 = %790.0;
  %794 = @func_4746() /* ty=Tensor[(320), uint8] */;
  (%787, %791, %792, %793, %794)
}

def @func_6062(%var_6013: Tensor[(5, 12, 2), uint64], %var_6039: Tensor[(90), uint32]) -> (Tensor[(5, 12, 2), uint64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64], Tensor[(90), uint32], Tensor[(15, 6, 3), float32]) {
  %795 = cast(meta[relay.Constant][55] /* ty=Tensor[(5, 12, 2), uint64] */, dtype="uint64") /* ty=Tensor[(5, 12, 2), uint64] */;
  %796 = shape_of(%var_6013, dtype="int32") /* ty=Tensor[(3), int32] */;
  %797 = cast(%var_6013, dtype="uint64") /* ty=Tensor[(5, 12, 2), uint64] */;
  %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %799 = @func_2865() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) */;
  %800 = cast(%var_6039, dtype="uint32") /* ty=Tensor[(90), uint32] */;
  %801 = reshape(%800, newshape=[15, 6, 1]) /* ty=Tensor[(15, 6, 1), uint32] */;
  %802 = @func_4719(%801) /* ty=(Tensor[(15, 6, 3), uint32], Tensor[(5, 2, 4), float64]) */;
  %803 = %802.0;
  %804 = cast(%803, dtype="float32") /* ty=Tensor[(15, 6, 3), float32] */;
  %805 = minimum(%797, %798) /* ty=Tensor[(5, 12, 2), uint64] */;
  %806 = %799.1;
  %807 = @func_3981() /* ty=Tensor[(5, 2, 4), float64] */;
  %808 = sigmoid(%804) /* ty=Tensor[(15, 6, 3), float32] */;
  (%805, %806, %807, %var_6039, %808)
}

def @func_4604(%var_4601: Tensor[(50), float32]) -> (Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(1232), float64], Tensor[(1, 1232), float64], Tensor[(130), float64], Tensor[(50), float32]) {
  %809 = @func_3290() /* ty=(Tensor[(320), uint8], Tensor[(5, 2, 4), float64]) */;
  %810 = cast(meta[relay.Constant][56] /* ty=Tensor[(1, 1232), float64] */, dtype="float64") /* ty=Tensor[(1, 1232), float64] */;
  %811 = cast(meta[relay.Constant][57] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %812 = cast(%var_4601, dtype="float32") /* ty=Tensor[(50), float32] */;
  %813 = reshape(%810, newshape=[1232]) /* ty=Tensor[(1232), float64] */;
  %814 = reshape(%811, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %815 = reshape(%812, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %816 = @func_2055(%813, %814, %815) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(320), uint8], Tensor[(130), float64], Tensor[(50), float32]) */;
  %817 = @func_1772() /* ty=Tensor[(5, 2, 4), float64] */;
  %818 = %809.1;
  %819 = %816.2;
  (%817, %818, %819, meta[relay.Constant][56] /* ty=Tensor[(1, 1232), float64] */, meta[relay.Constant][57] /* ty=Tensor[(130), float64] */, %var_4601)
}

def @func_3034() -> (Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) {
  %820 = @func_1772() /* ty=Tensor[(5, 2, 4), float64] */;
  %821 = @func_1988() /* ty=Tensor[(5, 2, 4), float64] */;
  %822 = @func_1988() /* ty=Tensor[(5, 2, 4), float64] */;
  (%820, %821, %822)
}

def @func_5177() -> Tensor[(5, 2, 4), float64] {
  @func_1988() /* ty=Tensor[(5, 2, 4), float64] */
}

def @func_4293() -> (Tensor[(13, 1, 4), float32],) {
  %823 = cast(meta[relay.Constant][58] /* ty=Tensor[(13, 1, 4), float32] */, dtype="float32") /* ty=Tensor[(13, 1, 4), float32] */;
  %824 = atanh(%823) /* ty=Tensor[(13, 1, 4), float32] */;
  (%824,)
}

def @func_8588(%var_8573: Tensor[(8, 7, 4), float64]) -> (Tensor[(8, 7, 4), float64], Tensor[(14, 14, 11), float32], Tensor[(2156), float32], Tensor[(616, 2), float64]) {
  %825 = cast(%var_8573, dtype="float64") /* ty=Tensor[(8, 7, 4), float64] */;
  %826 = cast(meta[relay.Constant][59] /* ty=Tensor[(2156), float32] */, dtype="float32") /* ty=Tensor[(2156), float32] */;
  %827 = cast(meta[relay.Constant][60] /* ty=Tensor[(616, 2), float64] */, dtype="float64") /* ty=Tensor[(616, 2), float64] */;
  %828 = reshape(%826, newshape=[14, 14, 11]) /* ty=Tensor[(14, 14, 11), float32] */;
  %829 = reshape(%827, newshape=[1232]) /* ty=Tensor[(1232), float64] */;
  %830 = @func_8180(%828, %829) /* ty=(Tensor[(14, 14, 11), float32], Tensor[(2, 9, 3), float32], Tensor[(1232), float64], Tensor[(320), bool]) */;
  %831 = log10(%825) /* ty=Tensor[(8, 7, 4), float64] */;
  %832 = %830.0;
  (%831, %832, meta[relay.Constant][59] /* ty=Tensor[(2156), float32] */, meta[relay.Constant][60] /* ty=Tensor[(616, 2), float64] */)
}

def @func_4633() -> Tensor[(13, 2, 9), bool] {
  %833 = @func_4138() /* ty=(Tensor[(13, 2, 9), bool],) */;
  %833.0
}

def @func_8649() -> (Tensor[(5, 2, 4), float64],) {
  %834 = @func_4355() /* ty=(Tensor[(5, 2, 4), float64],) */;
  %835 = %834.0;
  (%835,)
}

def @main(%var_10838: Tensor[(7, 15, 3), float32], %var_10843: Tensor[(1, 130), float64], %var_10844: Tensor[(50), float32]) -> (Tensor[(5, 2, 4), float32], Tensor[(1, 130), float64], Tensor[(50), float32], Tensor[(7, 15, 3), uint16]) {
  %836 = cast(%var_10843, dtype="float64") /* ty=Tensor[(1, 130), float64] */;
  %837 = cast(%var_10844, dtype="float32") /* ty=Tensor[(50), float32] */;
  %838 = reshape(%836, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %839 = reshape(%837, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %840 = @func_1916(%838, %839) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8], Tensor[(50), float32], uint16, Tensor[(130), float64], Tensor[(50), float32], Tensor[(5, 2, 4), float32]) */;
  %841 = cast(%var_10838, dtype="float32") /* ty=Tensor[(7, 15, 3), float32] */;
  %842 = atan(%841) /* ty=Tensor[(7, 15, 3), float32] */;
  %843 = cast(%842, dtype="float64") /* ty=Tensor[(7, 15, 3), float64] */;
  %844 = acos(%843) /* ty=Tensor[(7, 15, 3), float64] */;
  %845 = cast(%844, dtype="uint16") /* ty=Tensor[(7, 15, 3), uint16] */;
  %846 = shape_of(%842, dtype="int32") /* ty=Tensor[(3), int32] */;
  %847 = cast(%842, dtype="uint16") /* ty=Tensor[(7, 15, 3), uint16] */;
  %848 = dyn.reshape(%845, %846, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %849 = %840.7;
  %850 = minimum(%847, %848) /* ty=Tensor[(7, 15, 3), uint16] */;
  (%849, %var_10843, %var_10844, %850)
}

def @func_3097() -> Tensor[(320), uint8] {
  %851 = @func_2783() /* ty=(Tensor[(320), uint8],) */;
  %851.0
}

def @func_7632(%var_7597: Tensor[(5, 2, 5), float64], %var_7607: Tensor[(42, 6), uint16], %var_7610: uint16, %var_7617: Tensor[(490), int64]) -> (Tensor[(5, 2, 5), uint64], Tensor[(5, 2, 5), float64], Tensor[(7, 3, 12), bool], Tensor[(42, 6), uint16], Tensor[(320), uint8], uint16, Tensor[(5, 2, 4), float64], Tensor[(490), int64], Tensor[(5, 2, 4), float64]) {
  %852 = @func_3163() /* ty=Tensor[(5, 2, 5), float64] */;
  %853 = cast(%var_7597, dtype="uint64") /* ty=Tensor[(5, 2, 5), uint64] */;
  %854 = shape_of(%852, dtype="int32") /* ty=Tensor[(3), int32] */;
  %855 = cast(%852, dtype="uint64") /* ty=Tensor[(5, 2, 5), uint64] */;
  %856 = dyn.reshape(%853, %854, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %857 = cast(%var_7597, dtype="float64") /* ty=Tensor[(5, 2, 5), float64] */;
  %858 = cast(%var_7607, dtype="uint16") /* ty=Tensor[(42, 6), uint16] */;
  %859 = cast(%var_7607, dtype="uint16") /* ty=Tensor[(42, 6), uint16] */;
  %860 = bitwise_xor(%855, %856) /* ty=Tensor[(5, 2, 5), uint64] */;
  %861 = cast(%860, dtype="float32") /* ty=Tensor[(5, 2, 5), float32] */;
  %862 = reshape(%858, newshape=[7, 3, 12]) /* ty=Tensor[(7, 3, 12), uint16] */;
  %863 = reshape(%859, newshape=[7, 3, 12]) /* ty=Tensor[(7, 3, 12), uint16] */;
  %864 = reshape(%861, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %865 = @func_2249(%862, %863, %864) /* ty=(Tensor[(7, 3, 12), bool], Tensor[(4, 8, 10), float64], Tensor[(4, 80), uint8], Tensor[(5, 2, 4), float64], Tensor[(130), bool], Tensor[(50), float32], Tensor[(1, 130), float64]) */;
  %866 = cast(%var_7610, dtype="uint16") /* ty=uint16 */;
  %867 = reshape(%866, newshape=[]) /* ty=uint16 */;
  %868 = @func_6559(%867) /* ty=(Tensor[(320), uint8], Tensor[(320), uint8], Tensor[(4, 8, 10), float64], Tensor[(50), float32], Tensor[(320), uint8], Tensor[(130), uint64], Tensor[(16, 7, 11), float32]) */;
  %869 = cast(%var_7617, dtype="int64") /* ty=Tensor[(490), int64] */;
  %870 = cast(%var_7617, dtype="int64") /* ty=Tensor[(490), int64] */;
  %871 = reshape(%869, newshape=[7, 14, 5]) /* ty=Tensor[(7, 14, 5), int64] */;
  %872 = reshape(%870, newshape=[7, 14, 5]) /* ty=Tensor[(7, 14, 5), int64] */;
  %873 = @func_2419(%871, %872) /* ty=(Tensor[(7, 14, 5), bool], uint16, Tensor[(130), float64], Tensor[(50), float32], Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) */;
  %874 = %873.5;
  %875 = cast(%874, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  %876 = reshape(%875, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), float64] */;
  %877 = sin(%857) /* ty=Tensor[(5, 2, 5), float64] */;
  %878 = %865.0;
  %879 = %868.1;
  %880 = @func_2372(%876) /* ty=Tensor[(5, 2, 4), float64] */;
  (%860, %877, %878, %var_7607, %879, %var_7610, %874, %var_7617, %880)
}

def @func_7540(%var_7537: Tensor[(50), float32]) -> (Tensor[(13, 2, 9), bool], Tensor[(10, 5), float32], Tensor[(50), float32]) {
  %881 = @func_7525() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(13, 2, 9), bool]) */;
  %882 = cast(%var_7537, dtype="float32") /* ty=Tensor[(50), float32] */;
  %883 = reshape(%882, newshape=[1, 50]) /* ty=Tensor[(1, 50), float32] */;
  %884 = @func_4232(%883) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(10, 5), float32], Tensor[(1, 50), float32], Tensor[(5, 2, 4), float64]) */;
  %885 = %881.1;
  %886 = %884.1;
  (%885, %886, %var_7537)
}

def @func_4494(%var_4472: uint16, %var_4473: Tensor[(10, 2, 10), uint16]) -> (Tensor[(10, 2, 10), uint16], Tensor[(10, 2, 10), float64]) {
  %887 = cast(%var_4472, dtype="uint16") /* ty=uint16 */;
  %888 = cast(%var_4473, dtype="uint16") /* ty=Tensor[(10, 2, 10), uint16] */;
  %889 = cast(%var_4473, dtype="float64") /* ty=Tensor[(10, 2, 10), float64] */;
  %890 = minimum(%887, %888) /* ty=Tensor[(10, 2, 10), uint16] */;
  %891 = log10(%889) /* ty=Tensor[(10, 2, 10), float64] */;
  (%890, %891)
}

def @func_4730() -> (Tensor[(320), uint8],) {
  %892 = @func_3097() /* ty=Tensor[(320), uint8] */;
  (%892,)
}

def @func_8122(%var_8104: Tensor[(252), uint16], %var_8105: Tensor[(5, 10), float32]) -> (Tensor[(320), uint8], Tensor[(252), uint16], Tensor[(5, 10), float32], Tensor[(7, 3, 12), float64]) {
  %893 = cast(%var_8104, dtype="uint16") /* ty=Tensor[(252), uint16] */;
  %894 = cast(%var_8104, dtype="uint16") /* ty=Tensor[(252), uint16] */;
  %895 = cast(%var_8105, dtype="float32") /* ty=Tensor[(5, 10), float32] */;
  %896 = reshape(%893, newshape=[7, 3, 12]) /* ty=Tensor[(7, 3, 12), uint16] */;
  %897 = reshape(%894, newshape=[7, 3, 12]) /* ty=Tensor[(7, 3, 12), uint16] */;
  %898 = reshape(%895, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %899 = @func_2249(%896, %897, %898) /* ty=(Tensor[(7, 3, 12), bool], Tensor[(4, 8, 10), float64], Tensor[(4, 80), uint8], Tensor[(5, 2, 4), float64], Tensor[(130), bool], Tensor[(50), float32], Tensor[(1, 130), float64]) */;
  %900 = %899.0;
  %901 = cast(%900, dtype="float64") /* ty=Tensor[(7, 3, 12), float64] */;
  %902 = @func_4154() /* ty=Tensor[(320), uint8] */;
  %903 = asinh(%901) /* ty=Tensor[(7, 3, 12), float64] */;
  (%902, %var_8104, %var_8105, %903)
}

def @func_4719(%var_4699: Tensor[(15, 6, 1), uint32]) -> (Tensor[(15, 6, 3), uint32], Tensor[(5, 2, 4), float64]) {
  %904 = cast(%var_4699, dtype="uint32") /* ty=Tensor[(15, 6, 1), uint32] */;
  %905 = cast(meta[relay.Constant][61] /* ty=Tensor[(15, 6, 3), uint32] */, dtype="uint32") /* ty=Tensor[(15, 6, 3), uint32] */;
  %906 = add(%904, %905) /* ty=Tensor[(15, 6, 3), uint32] */;
  %907 = @func_3121() /* ty=Tensor[(5, 2, 4), float64] */;
  (%906, %907)
}

def @func_10572() -> Tensor[(4, 8, 10), float64] {
  %908 = @func_2957() /* ty=(Tensor[(4, 8, 10), float64],) */;
  %908.0
}

def @func_4774() -> Tensor[(320), uint8] {
  @func_4154() /* ty=Tensor[(320), uint8] */
}

def @func_5897() -> (Tensor[(5, 2, 4), float64],) {
  %909 = @func_5177() /* ty=Tensor[(5, 2, 4), float64] */;
  (%909,)
}

def @func_6991(%var_6964: int32, %var_6965: Tensor[(9, 1, 11), int32]) -> (Tensor[(9, 1, 11), bool], Tensor[(320), uint8], Tensor[(9, 1, 11), float32], Tensor[(320), uint8]) {
  %910 = cast(%var_6964, dtype="bool") /* ty=bool */;
  %911 = cast(%var_6965, dtype="bool") /* ty=Tensor[(9, 1, 11), bool] */;
  %912 = @func_6176() /* ty=(Tensor[(320), uint8], Tensor[(4, 8, 10), float64], Tensor[(320), uint8], Tensor[(4, 8, 10), bool]) */;
  %913 = cast(%var_6965, dtype="float32") /* ty=Tensor[(9, 1, 11), float32] */;
  %914 = greater(%910, %911) /* ty=Tensor[(9, 1, 11), bool] */;
  %915 = %912.2;
  %916 = asinh(%913) /* ty=Tensor[(9, 1, 11), float32] */;
  %917 = @func_4154() /* ty=Tensor[(320), uint8] */;
  (%914, %915, %916, %917)
}

def @func_1988() -> Tensor[(5, 2, 4), float64] {
  %918 = @func_1845() /* ty=(Tensor[(5, 2, 4), float64],) */;
  %918.0
}

def @func_10125() -> (Tensor[(5, 9, 320), uint8], Tensor[(5, 9, 320), bool]) {
  %919 = @func_6176() /* ty=(Tensor[(320), uint8], Tensor[(4, 8, 10), float64], Tensor[(320), uint8], Tensor[(4, 8, 10), bool]) */;
  %920 = %919.2;
  %921 = @func_8567() /* ty=(Tensor[(5, 9, 1), float64],) */;
  %922 = %921.0;
  %923 = cast(%920, dtype="uint8") /* ty=Tensor[(320), uint8] */;
  %924 = cast(%922, dtype="uint8") /* ty=Tensor[(5, 9, 1), uint8] */;
  %925 = cast(%920, dtype="bool") /* ty=Tensor[(320), bool] */;
  %926 = cast(%922, dtype="bool") /* ty=Tensor[(5, 9, 1), bool] */;
  %927 = subtract(%923, %924) /* ty=Tensor[(5, 9, 320), uint8] */;
  %928 = logical_or(%925, %926) /* ty=Tensor[(5, 9, 320), bool] */;
  (%927, %928)
}

def @func_7201() -> (Tensor[(5, 2, 4), float64],) {
  %929 = @func_3462() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) */;
  %930 = %929.1;
  (%930,)
}

def @func_603(%var_590: Tensor[(16, 7, 11), float64]) -> (Tensor[(16, 7, 11), float64], Tensor[(16, 7, 11), float64]) {
  %931 = cast(%var_590, dtype="float64") /* ty=Tensor[(16, 7, 11), float64] */;
  %932 = cast(%var_590, dtype="float64") /* ty=Tensor[(16, 7, 11), float64] */;
  %933 = asin(%931) /* ty=Tensor[(16, 7, 11), float64] */;
  %934 = log10(%932) /* ty=Tensor[(16, 7, 11), float64] */;
  (%933, %934)
}

def @func_9056() -> (Tensor[(320), uint8],) {
  %935 = @func_2305() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) */;
  %936 = %935.2;
  (%936,)
}

def @func_4355() -> (Tensor[(5, 2, 4), float64],) {
  %937 = @func_3347() /* ty=(Tensor[(5, 2, 4), float64],) */;
  %938 = %937.0;
  %939 = cast(%938, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  %940 = erf(%939) /* ty=Tensor[(5, 2, 4), float64] */;
  (%940,)
}

def @func_6595(%var_6589: Tensor[(6, 42), uint16]) -> (Tensor[(320), bool], Tensor[(50), float32], Tensor[(6, 42), uint16], Tensor[(50, 1), float32]) {
  %941 = @func_6110() /* ty=(Tensor[(320), bool],) */;
  %942 = cast(%var_6589, dtype="uint16") /* ty=Tensor[(6, 42), uint16] */;
  %943 = cast(%var_6589, dtype="uint16") /* ty=Tensor[(6, 42), uint16] */;
  %944 = cast(meta[relay.Constant][62] /* ty=Tensor[(50, 1), float32] */, dtype="float32") /* ty=Tensor[(50, 1), float32] */;
  %945 = reshape(%942, newshape=[7, 3, 12]) /* ty=Tensor[(7, 3, 12), uint16] */;
  %946 = reshape(%943, newshape=[7, 3, 12]) /* ty=Tensor[(7, 3, 12), uint16] */;
  %947 = reshape(%944, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %948 = @func_2249(%945, %946, %947) /* ty=(Tensor[(7, 3, 12), bool], Tensor[(4, 8, 10), float64], Tensor[(4, 80), uint8], Tensor[(5, 2, 4), float64], Tensor[(130), bool], Tensor[(50), float32], Tensor[(1, 130), float64]) */;
  %949 = %941.0;
  %950 = %948.5;
  (%949, %950, %var_6589, meta[relay.Constant][62] /* ty=Tensor[(50, 1), float32] */)
}

def @func_7341() -> (Tensor[(13, 2, 9), bool], Tensor[(5, 2, 4), float64], Tensor[(320), float64], Tensor[(130), float64], Tensor[(4, 8, 10), float64]) {
  %951 = cast(meta[relay.Constant][63] /* ty=Tensor[(320), float64] */, dtype="float64") /* ty=Tensor[(320), float64] */;
  %952 = cast(meta[relay.Constant][64] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %953 = reshape(%951, newshape=[4, 80]) /* ty=Tensor[(4, 80), float64] */;
  %954 = reshape(%952, newshape=[13, 10]) /* ty=Tensor[(13, 10), float64] */;
  %955 = @func_5618(%953, %954) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float32], Tensor[(4, 80), float64], Tensor[(13, 10), float64]) */;
  %956 = @func_4902() /* ty=(Tensor[(4, 8, 10), float64],) */;
  %957 = @func_4633() /* ty=Tensor[(13, 2, 9), bool] */;
  %958 = %955.1;
  %959 = %956.0;
  (%957, %958, meta[relay.Constant][63] /* ty=Tensor[(320), float64] */, meta[relay.Constant][64] /* ty=Tensor[(130), float64] */, %959)
}

def @func_7680(%var_7640: Tensor[(5, 12, 11), int32], %var_7641: Tensor[(5, 12, 11), int32], %var_7670: Tensor[(5, 2, 4), float64]) -> (Tensor[(5, 12, 11), bool], Tensor[(5, 2, 4), bool]) {
  %960 = cast(%var_7641, dtype="int32") /* ty=Tensor[(5, 12, 11), int32] */;
  %961 = shape_of(%var_7640, dtype="int32") /* ty=Tensor[(3), int32] */;
  %962 = cast(%var_7640, dtype="int32") /* ty=Tensor[(5, 12, 11), int32] */;
  %963 = dyn.reshape(%960, %961, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %964 = subtract(%962, %963) /* ty=Tensor[(5, 12, 11), int32] */;
  %965 = cast(%var_7640, dtype="bool") /* ty=Tensor[(5, 12, 11), bool] */;
  %966 = shape_of(%964, dtype="int32") /* ty=Tensor[(3), int32] */;
  %967 = cast(%964, dtype="bool") /* ty=Tensor[(5, 12, 11), bool] */;
  %968 = dyn.reshape(%965, %966, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %969 = @func_6863() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) */;
  %970 = %969.0;
  %971 = cast(%var_7670, dtype="bool") /* ty=Tensor[(5, 2, 4), bool] */;
  %972 = shape_of(%970, dtype="int32") /* ty=Tensor[(3), int32] */;
  %973 = cast(%970, dtype="bool") /* ty=Tensor[(5, 2, 4), bool] */;
  %974 = dyn.reshape(%971, %972, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %975 = greater_equal(%967, %968) /* ty=Tensor[(5, 12, 11), bool] */;
  %976 = greater_equal(%973, %974) /* ty=Tensor[(5, 2, 4), bool] */;
  (%975, %976)
}

def @func_6460(%var_6439: Tensor[(4, 8, 10), float64]) -> (Tensor[(5, 2, 4), float64], Tensor[(320), uint8], Tensor[(4, 8, 10), int32], Tensor[(5, 2, 4), float64]) {
  %977 = @func_2883() /* ty=Tensor[(4, 8, 10), float64] */;
  %978 = cast(%var_6439, dtype="int32") /* ty=Tensor[(4, 8, 10), int32] */;
  %979 = shape_of(%977, dtype="int32") /* ty=Tensor[(3), int32] */;
  %980 = cast(%977, dtype="int32") /* ty=Tensor[(4, 8, 10), int32] */;
  %981 = dyn.reshape(%978, %979, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %982 = @func_2333() /* ty=(Tensor[(5, 2, 4), float64],) */;
  %983 = @func_5177() /* ty=Tensor[(5, 2, 4), float64] */;
  %984 = @func_4774() /* ty=Tensor[(320), uint8] */;
  %985 = maximum(%980, %981) /* ty=Tensor[(4, 8, 10), int32] */;
  %986 = %982.0;
  (%983, %984, %985, %986)
}

def @func_6766() -> Tensor[(5, 2, 4), float64] {
  %987 = @func_4162() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) */;
  %987.0
}

def @func_10769(%var_10744: Tensor[(624), float32]) -> (Tensor[(320), uint8], Tensor[(5, 2, 4), float64], Tensor[(320), uint8], Tensor[(5, 2, 4), bool], Tensor[(660), int32], Tensor[(13, 12, 4), bool], Tensor[(13, 12, 4), float32]) {
  %988 = @func_9268() /* ty=(Tensor[(320), uint8],) */;
  %989 = @func_3801() /* ty=(Tensor[(320), uint8],) */;
  %990 = cast(meta[relay.Constant][65] /* ty=Tensor[(660), int32] */, dtype="int32") /* ty=Tensor[(660), int32] */;
  %991 = @func_3981() /* ty=Tensor[(5, 2, 4), float64] */;
  %992 = cast(%991, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  %993 = reshape(%990, newshape=[660]) /* ty=Tensor[(660), int32] */;
  %994 = reshape(%992, newshape=[40]) /* ty=Tensor[(40), float64] */;
  %995 = @func_9111(%993, %994) /* ty=(Tensor[(320), uint8], Tensor[(5, 2, 4), bool], Tensor[(660), int32], Tensor[(40), float64]) */;
  %996 = cast(%var_10744, dtype="float32") /* ty=Tensor[(624), float32] */;
  %997 = reshape(%996, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), float32] */;
  %998 = @func_9616(%997) /* ty=Tensor[(13, 12, 4), bool] */;
  %999 = cast(%998, dtype="float64") /* ty=Tensor[(13, 12, 4), float64] */;
  %1000 = atanh(%999) /* ty=Tensor[(13, 12, 4), float64] */;
  %1001 = cast(%var_10744, dtype="bool") /* ty=Tensor[(624), bool] */;
  %1002 = shape_of(%1000, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1003 = cast(%1000, dtype="bool") /* ty=Tensor[(13, 12, 4), bool] */;
  %1004 = dyn.reshape(%1001, %1002, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1005 = cast(%1000, dtype="float32") /* ty=Tensor[(13, 12, 4), float32] */;
  %1006 = %988.0;
  %1007 = %989.0;
  %1008 = %995.1;
  %1009 = less_equal(%1003, %1004) /* ty=Tensor[(13, 12, 4), bool] */;
  %1010 = asin(%1005) /* ty=Tensor[(13, 12, 4), float32] */;
  (%1006, %991, %1007, %1008, meta[relay.Constant][65] /* ty=Tensor[(660), int32] */, %1009, %1010)
}

def @func_4800() -> Tensor[(4, 8, 10), float64] {
  %1011 = @func_2865() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) */;
  %1011.1
}

def @func_6559(%var_6514: uint16) -> (Tensor[(320), uint8], Tensor[(320), uint8], Tensor[(4, 8, 10), float64], Tensor[(50), float32], Tensor[(320), uint8], Tensor[(130), uint64], Tensor[(16, 7, 11), float32]) {
  %1012 = @func_4730() /* ty=(Tensor[(320), uint8],) */;
  %1013 = @func_2783() /* ty=(Tensor[(320), uint8],) */;
  %1014 = cast(meta[relay.Constant][67] /* ty=Tensor[(130), float64] */, dtype="uint64") /* ty=Tensor[(130), uint64] */;
  %1015 = cast(%var_6514, dtype="uint64") /* ty=uint64 */;
  %1016 = cast(%var_6514, dtype="uint16") /* ty=uint16 */;
  %1017 = cast(meta[relay.Constant][67] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %1018 = cast(meta[relay.Constant][66] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %1019 = reshape(%1016, newshape=[]) /* ty=uint16 */;
  %1020 = reshape(%1017, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %1021 = reshape(%1018, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %1022 = @func_1736(%1019, %1020, %1021) /* ty=(Tensor[(13, 4, 1), bool], Tensor[(10, 13, 1), float64], Tensor[(130), float64], Tensor[(10, 13, 1), float64], Tensor[(1232), float64], Tensor[(50), float32], Tensor[(16, 7, 11), float64]) */;
  %1023 = %1022.6;
  %1024 = cast(%1023, dtype="float32") /* ty=Tensor[(16, 7, 11), float32] */;
  %1025 = %1012.0;
  %1026 = %1013.0;
  %1027 = @func_3881() /* ty=Tensor[(4, 8, 10), float64] */;
  %1028 = @func_4746() /* ty=Tensor[(320), uint8] */;
  %1029 = multiply(%1014, %1015) /* ty=Tensor[(130), uint64] */;
  %1030 = atan(%1024) /* ty=Tensor[(16, 7, 11), float32] */;
  (%1025, %1026, %1027, meta[relay.Constant][66] /* ty=Tensor[(50), float32] */, %1028, %1029, %1030)
}

def @func_9698() -> Tensor[(4, 8, 10), float64] {
  @func_3881() /* ty=Tensor[(4, 8, 10), float64] */
}

def @func_9596() -> Tensor[(4, 8, 10), float64] {
  %1031 = @func_4902() /* ty=(Tensor[(4, 8, 10), float64],) */;
  %1031.0
}

def @func_2499(%var_2488: Tensor[(40), float64]) -> (Tensor[(4, 8, 10), float64], Tensor[(16, 7, 11), float64], uint16, Tensor[(130, 1), float64], Tensor[(50), float32], Tensor[(5, 2, 4), float64], Tensor[(40), float64]) {
  %1032 = @func_2305() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) */;
  %1033 = cast(meta[relay.Constant][68] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %1034 = cast(meta[relay.Constant][69] /* ty=Tensor[(130, 1), float64] */, dtype="float64") /* ty=Tensor[(130, 1), float64] */;
  %1035 = cast(meta[relay.Constant][70] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %1036 = reshape(%1033, newshape=[]) /* ty=uint16 */;
  %1037 = reshape(%1034, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %1038 = reshape(%1035, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %1039 = @func_1736(%1036, %1037, %1038) /* ty=(Tensor[(13, 4, 1), bool], Tensor[(10, 13, 1), float64], Tensor[(130), float64], Tensor[(10, 13, 1), float64], Tensor[(1232), float64], Tensor[(50), float32], Tensor[(16, 7, 11), float64]) */;
  %1040 = cast(%var_2488, dtype="float64") /* ty=Tensor[(40), float64] */;
  %1041 = reshape(%1040, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), float64] */;
  %1042 = %1032.1;
  %1043 = %1039.6;
  %1044 = @func_2372(%1041) /* ty=Tensor[(5, 2, 4), float64] */;
  (%1042, %1043, meta[relay.Constant][68] /* ty=uint16 */, meta[relay.Constant][69] /* ty=Tensor[(130, 1), float64] */, meta[relay.Constant][70] /* ty=Tensor[(50), float32] */, %1044, %var_2488)
}

def @func_2055(%var_2039: Tensor[(1232), float64], %var_2049: Tensor[(130), float64], %var_2050: Tensor[(50), float32]) -> (Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(320), uint8], Tensor[(130), float64], Tensor[(50), float32]) {
  %1045 = cast(%var_2039, dtype="float64") /* ty=Tensor[(1232), float64] */;
  %1046 = reshape(%1045, newshape=[16, 7, 11]) /* ty=Tensor[(16, 7, 11), float64] */;
  %1047 = @func_603(%1046) /* ty=(Tensor[(16, 7, 11), float64], Tensor[(16, 7, 11), float64]) */;
  %1048 = cast(%var_2049, dtype="float64") /* ty=Tensor[(130), float64] */;
  %1049 = cast(%var_2050, dtype="float32") /* ty=Tensor[(50), float32] */;
  %1050 = reshape(%1048, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %1051 = reshape(%1049, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %1052 = @func_1916(%1050, %1051) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8], Tensor[(50), float32], uint16, Tensor[(130), float64], Tensor[(50), float32], Tensor[(5, 2, 4), float32]) */;
  %1053 = @func_1988() /* ty=Tensor[(5, 2, 4), float64] */;
  %1054 = %1047.1;
  %1055 = %1052.2;
  (%1053, %1054, %var_2039, %1055, %var_2049, %var_2050)
}

def @func_7859() -> (Tensor[(320), uint8], Tensor[(13, 10), float64], Tensor[(130), float64]) {
  %1056 = @func_6645() /* ty=(Tensor[(320), uint8],) */;
  %1057 = %1056.0;
  %1058 = cast(%1057, dtype="float64") /* ty=Tensor[(320), float64] */;
  %1059 = cast(meta[relay.Constant][71] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %1060 = reshape(%1058, newshape=[4, 80]) /* ty=Tensor[(4, 80), float64] */;
  %1061 = reshape(%1059, newshape=[13, 10]) /* ty=Tensor[(13, 10), float64] */;
  %1062 = @func_5618(%1060, %1061) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float32], Tensor[(4, 80), float64], Tensor[(13, 10), float64]) */;
  %1063 = %1062.4;
  (%1057, %1063, meta[relay.Constant][71] /* ty=Tensor[(130), float64] */)
}

def @func_2305() -> (Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) {
  %1064 = cast(meta[relay.Constant][72] /* ty=Tensor[(320), uint8] */, dtype="uint8") /* ty=Tensor[(320), uint8] */;
  %1065 = cast(meta[relay.Constant][72] /* ty=Tensor[(320), uint8] */, dtype="uint8") /* ty=Tensor[(320), uint8] */;
  %1066 = reshape(%1064, newshape=[4, 8, 10]) /* ty=Tensor[(4, 8, 10), uint8] */;
  %1067 = reshape(%1065, newshape=[4, 8, 10]) /* ty=Tensor[(4, 8, 10), uint8] */;
  %1068 = @func_1988() /* ty=Tensor[(5, 2, 4), float64] */;
  %1069 = @func_1818(%1066, %1067) /* ty=Tensor[(4, 8, 10), float64] */;
  (%1068, %1069, meta[relay.Constant][72] /* ty=Tensor[(320), uint8] */)
}

def @func_4232(%var_4227: Tensor[(1, 50), float32]) -> (Tensor[(5, 2, 4), float64], Tensor[(10, 5), float32], Tensor[(1, 50), float32], Tensor[(5, 2, 4), float64]) {
  %1070 = @func_4162() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) */;
  %1071 = cast(%var_4227, dtype="float32") /* ty=Tensor[(1, 50), float32] */;
  %1072 = reshape(%1071, newshape=[10, 5]) /* ty=Tensor[(10, 5), float32] */;
  %1073 = @func_2204(%1072) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(130), float64], uint16, Tensor[(130), float64], Tensor[(10, 5), float32], Tensor[(1232), float64], Tensor[(13, 4, 1), bool], Tensor[(10, 13, 1), float64], Tensor[(320), uint8]) */;
  %1074 = @func_3034() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) */;
  %1075 = %1070.0;
  %1076 = %1073.4;
  %1077 = %1074.2;
  (%1075, %1076, %var_4227, %1077)
}

def @func_10242() -> (Tensor[(320), uint8], Tensor[(50), float32]) {
  %1078 = @func_6000() /* ty=(Tensor[(320), uint8], Tensor[(320), bool]) */;
  %1079 = @func_9912() /* ty=(Tensor[(4, 8, 10), float64], Tensor[(50), float32], Tensor[(50), float32]) */;
  %1080 = %1078.0;
  %1081 = %1079.1;
  (%1080, %1081)
}

def @func_6835() -> (Tensor[(5, 2, 4), float64], Tensor[(1, 130), float64], Tensor[(130, 1), float64]) {
  %1082 = @func_5790() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) */;
  %1083 = %1082.0;
  %1084 = cast(meta[relay.Constant][73] /* ty=Tensor[(5, 2, 4), float64] */, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  %1085 = shape_of(%1083, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1086 = cast(%1083, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  %1087 = dyn.reshape(%1084, %1085, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1088 = cast(meta[relay.Constant][74] /* ty=Tensor[(130, 1), float64] */, dtype="float64") /* ty=Tensor[(130, 1), float64] */;
  %1089 = reshape(%1088, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %1090 = @func_2735(%1089) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(1, 130), float64], Tensor[(50), float32], Tensor[(130), float64]) */;
  %1091 = floor_mod(%1086, %1087) /* ty=Tensor[(5, 2, 4), float64] */;
  %1092 = %1090.1;
  (%1091, %1092, meta[relay.Constant][74] /* ty=Tensor[(130, 1), float64] */)
}

def @func_9180() -> (Tensor[(130), float64], Tensor[(320), bool], Tensor[(4, 8, 10), float32]) {
  %1093 = @func_7341() /* ty=(Tensor[(13, 2, 9), bool], Tensor[(5, 2, 4), float64], Tensor[(320), float64], Tensor[(130), float64], Tensor[(4, 8, 10), float64]) */;
  %1094 = @func_4036() /* ty=(Tensor[(4, 8, 10), float64], Tensor[(4, 8, 10), float64]) */;
  %1095 = %1094.0;
  %1096 = cast(%1095, dtype="float64") /* ty=Tensor[(4, 8, 10), float64] */;
  %1097 = tan(%1096) /* ty=Tensor[(4, 8, 10), float64] */;
  %1098 = cast(%1097, dtype="float32") /* ty=Tensor[(4, 8, 10), float32] */;
  %1099 = %1093.3;
  %1100 = @func_6360() /* ty=Tensor[(320), bool] */;
  %1101 = sin(%1098) /* ty=Tensor[(4, 8, 10), float32] */;
  (%1099, %1100, %1101)
}

def @func_8180(%var_8166: Tensor[(14, 14, 11), float32], %var_8170: Tensor[(1232), float64]) -> (Tensor[(14, 14, 11), float32], Tensor[(2, 9, 3), float32], Tensor[(1232), float64], Tensor[(320), bool]) {
  %1102 = cast(%var_8166, dtype="float32") /* ty=Tensor[(14, 14, 11), float32] */;
  %1103 = cast(%var_8170, dtype="float64") /* ty=Tensor[(1232), float64] */;
  %1104 = reshape(%1103, newshape=[1232]) /* ty=Tensor[(1232), float64] */;
  %1105 = @func_5569(%1104) /* ty=(Tensor[(2, 9, 3), float32], Tensor[(320), uint8], Tensor[(1232), float64], Tensor[(1232), float64], Tensor[(130), float64], Tensor[(50), float32], Tensor[(320), uint8], Tensor[(320), uint8]) */;
  %1106 = cos(%1102) /* ty=Tensor[(14, 14, 11), float32] */;
  %1107 = %1105.0;
  %1108 = @func_4418() /* ty=Tensor[(320), bool] */;
  (%1106, %1107, %var_8170, %1108)
}

def @func_7396() -> Tensor[(320), uint8] {
  %1109 = @func_4730() /* ty=(Tensor[(320), uint8],) */;
  %1109.0
}

def @func_8074() -> (Tensor[(13, 2, 9), bool],) {
  %1110 = @func_4633() /* ty=Tensor[(13, 2, 9), bool] */;
  (%1110,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_9699() -> Tensor[(4, 8, 10), float64] {
  %0 = fn () -> Tensor[(4, 8, 10), float64] {
    @func_3881() /* ty=Tensor[(4, 8, 10), float64] */
  };
  %0() /* ty=Tensor[(4, 8, 10), float64] */
}

def @func_4747() -> Tensor[(320), uint8] {
  %1 = fn () -> Tensor[(320), uint8] {
    @func_4154() /* ty=Tensor[(320), uint8] */
  };
  %1() /* ty=Tensor[(320), uint8] */
}

def @func_8487(%var_8485: Tensor[(50), float32]) -> (Tensor[(130), float64], Tensor[(130), bool], Tensor[(50), float32], Tensor[(4, 8, 10), float64]) {
  @func_8484(%var_8485) /* ty=(Tensor[(130), float64], Tensor[(130), bool], Tensor[(50), float32], Tensor[(4, 8, 10), float64]) */
}

def @func_4154() -> Tensor[(320), uint8] {
  %2 = @func_3290() /* ty=(Tensor[(320), uint8], Tensor[(5, 2, 4), float64]) */;
  %2.0
}

def @func_3962(%var_3960: Tensor[(5, 2, 4), float64]) -> (Tensor[(5, 2, 4), float32], Tensor[(320), uint8], Tensor[(5, 2, 4), float64]) {
  @func_3959(%var_3960) /* ty=(Tensor[(5, 2, 4), float32], Tensor[(320), uint8], Tensor[(5, 2, 4), float64]) */
}

def @func_6110() -> (Tensor[(320), bool],) {
  %3 = @func_4418() /* ty=Tensor[(320), bool] */;
  (%3,)
}

def @func_8018(%var_8017: Tensor[(5, 2, 5), float64]) -> (Tensor[(5, 2, 4), float64], Tensor[(5, 2, 5), bool], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64], Tensor[(130), float64]) {
  %22 = fn (%var_7993: Tensor[(5, 2, 5), float64]) -> (Tensor[(5, 2, 4), float64], Tensor[(5, 2, 5), bool], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64], Tensor[(130), float64]) {
    %4 = @func_3163() /* ty=Tensor[(5, 2, 5), float64] */;
    %5 = cast(%var_7993, dtype="int8") /* ty=Tensor[(5, 2, 5), int8] */;
    %6 = shape_of(%4, dtype="int32") /* ty=Tensor[(3), int32] */;
    %7 = cast(%4, dtype="int8") /* ty=Tensor[(5, 2, 5), int8] */;
    %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %9 = bitwise_and(%7, %8) /* ty=Tensor[(5, 2, 5), int8] */;
    %10 = cast(%4, dtype="bool") /* ty=Tensor[(5, 2, 5), bool] */;
    %11 = shape_of(%9, dtype="int32") /* ty=Tensor[(3), int32] */;
    %12 = cast(%9, dtype="bool") /* ty=Tensor[(5, 2, 5), bool] */;
    %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %14 = @func_4036() /* ty=(Tensor[(4, 8, 10), float64], Tensor[(4, 8, 10), float64]) */;
    %15 = cast(meta[relay.Constant][0] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
    %16 = reshape(%15, newshape=[130]) /* ty=Tensor[(130), float64] */;
    %17 = @func_2735(%16) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(1, 130), float64], Tensor[(50), float32], Tensor[(130), float64]) */;
    %18 = @func_3121() /* ty=Tensor[(5, 2, 4), float64] */;
    %19 = logical_or(%12, %13) /* ty=Tensor[(5, 2, 5), bool] */;
    %20 = %14.1;
    %21 = %17.0;
    (%18, %19, %20, %21, meta[relay.Constant][0] /* ty=Tensor[(130), float64] */)
  };
  %22(%var_8017) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 5), bool], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64], Tensor[(130), float64]) */
}

def @func_9025(%var_9000: Tensor[(156), float32], %var_9006: Tensor[(36), int32]) -> (Tensor[(320), uint8], Tensor[(5, 2, 4), int32], Tensor[(40), float64], Tensor[(26, 5), float64], Tensor[(156), float32], Tensor[(252), uint16], Tensor[(36), int32], Tensor[(50), float32], Tensor[(320), bool], Tensor[(5, 2, 4), float64]) {
  %23 = cast(meta[relay.Constant][1] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
  %24 = reshape(%23, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), float64] */;
  %25 = cast(%var_9000, dtype="float32") /* ty=Tensor[(156), float32] */;
  %26 = reshape(%25, newshape=[156]) /* ty=Tensor[(156), float32] */;
  %27 = @func_4197(%26) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(130), float64], Tensor[(156), float32], Tensor[(26, 5), float64], Tensor[(50), float32], Tensor[(320), uint8]) */;
  %28 = cast(%var_9006, dtype="int32") /* ty=Tensor[(36), int32] */;
  %29 = cast(%var_9006, dtype="int32") /* ty=Tensor[(36), int32] */;
  %30 = cast(meta[relay.Constant][1] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
  %31 = cast(meta[relay.Constant][2] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %32 = reshape(%28, newshape=[4, 3, 3]) /* ty=Tensor[(4, 3, 3), int32] */;
  %33 = reshape(%29, newshape=[4, 3, 3]) /* ty=Tensor[(4, 3, 3), int32] */;
  %34 = reshape(%30, newshape=[40]) /* ty=Tensor[(40), float64] */;
  %35 = reshape(%31, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %36 = @func_6308(%32, %33, %34, %35) /* ty=(Tensor[(4, 3, 3), int32], Tensor[(5, 2, 4), uint32], Tensor[(40), float64], Tensor[(130), bool], Tensor[(252), uint16], Tensor[(50), float32]) */;
  %37 = @func_6110() /* ty=(Tensor[(320), bool],) */;
  %38 = @func_4278(%24) /* ty=Tensor[(5, 2, 4), int32] */;
  %39 = cast(%38, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  %40 = reshape(%39, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), float64] */;
  %41 = @func_3959(%40) /* ty=(Tensor[(5, 2, 4), float32], Tensor[(320), uint8], Tensor[(5, 2, 4), float64]) */;
  %42 = @func_7396() /* ty=Tensor[(320), uint8] */;
  %43 = %27.3;
  %44 = %36.4;
  %45 = %37.0;
  %46 = %41.2;
  (%42, %38, meta[relay.Constant][1] /* ty=Tensor[(40), float64] */, %43, %var_9000, %44, %var_9006, meta[relay.Constant][2] /* ty=Tensor[(50), float32] */, %45, %46)
}

def @func_7466(%var_7464: Tensor[(16, 11, 10), bool]) -> (Tensor[(16, 11, 10), bool], Tensor[(1, 130), float64], Tensor[(50), float32], Tensor[(130), float64], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) {
  @func_7463(%var_7464) /* ty=(Tensor[(16, 11, 10), bool], Tensor[(1, 130), float64], Tensor[(50), float32], Tensor[(130), float64], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) */
}

def @func_10769(%var_10744: Tensor[(624), float32]) -> (Tensor[(320), uint8], Tensor[(5, 2, 4), float64], Tensor[(320), uint8], Tensor[(5, 2, 4), bool], Tensor[(660), int32], Tensor[(13, 12, 4), bool], Tensor[(13, 12, 4), float32]) {
  %47 = @func_9268() /* ty=(Tensor[(320), uint8],) */;
  %48 = @func_3801() /* ty=(Tensor[(320), uint8],) */;
  %49 = cast(meta[relay.Constant][3] /* ty=Tensor[(660), int32] */, dtype="int32") /* ty=Tensor[(660), int32] */;
  %50 = @func_3981() /* ty=Tensor[(5, 2, 4), float64] */;
  %51 = cast(%50, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  %52 = reshape(%49, newshape=[660]) /* ty=Tensor[(660), int32] */;
  %53 = reshape(%51, newshape=[40]) /* ty=Tensor[(40), float64] */;
  %54 = @func_9111(%52, %53) /* ty=(Tensor[(320), uint8], Tensor[(5, 2, 4), bool], Tensor[(660), int32], Tensor[(40), float64]) */;
  %55 = cast(%var_10744, dtype="float32") /* ty=Tensor[(624), float32] */;
  %56 = reshape(%55, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), float32] */;
  %57 = @func_9616(%56) /* ty=Tensor[(13, 12, 4), bool] */;
  %58 = cast(%57, dtype="float64") /* ty=Tensor[(13, 12, 4), float64] */;
  %59 = atanh(%58) /* ty=Tensor[(13, 12, 4), float64] */;
  %60 = cast(%var_10744, dtype="bool") /* ty=Tensor[(624), bool] */;
  %61 = shape_of(%59, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(%59, dtype="bool") /* ty=Tensor[(13, 12, 4), bool] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %64 = cast(%59, dtype="float32") /* ty=Tensor[(13, 12, 4), float32] */;
  %65 = %47.0;
  %66 = %48.0;
  %67 = %54.1;
  %68 = less_equal(%62, %63) /* ty=Tensor[(13, 12, 4), bool] */;
  %69 = asin(%64) /* ty=Tensor[(13, 12, 4), float32] */;
  (%65, %50, %66, %67, meta[relay.Constant][3] /* ty=Tensor[(660), int32] */, %68, %69)
}

def @func_7373() -> (Tensor[(5, 2, 4), float64], Tensor[(320), uint8], Tensor[(5, 2, 4), float64]) {
  @func_7371() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(320), uint8], Tensor[(5, 2, 4), float64]) */
}

def @func_1736(%var_1715: uint16, %var_1722: Tensor[(130), float64], %var_1727: Tensor[(50), float32]) -> (Tensor[(13, 4, 1), bool], Tensor[(10, 13, 1), float64], Tensor[(130), float64], Tensor[(10, 13, 1), float64], Tensor[(1232), float64], Tensor[(50), float32], Tensor[(16, 7, 11), float64]) {
  %70 = cast(%var_1715, dtype="bool") /* ty=bool */;
  %71 = cast(meta[relay.Constant][4] /* ty=Tensor[(13, 4, 1), uint16] */, dtype="bool") /* ty=Tensor[(13, 4, 1), bool] */;
  %72 = cast(%var_1722, dtype="float64") /* ty=Tensor[(130), float64] */;
  %73 = reshape(%72, newshape=[10, 13, 1]) /* ty=Tensor[(10, 13, 1), float64] */;
  %74 = @func_951(%73) /* ty=(Tensor[(10, 13, 1), float64],) */;
  %75 = %74.0;
  %76 = cast(%75, dtype="float64") /* ty=Tensor[(10, 13, 1), float64] */;
  %77 = reshape(%76, newshape=[10, 13, 1]) /* ty=Tensor[(10, 13, 1), float64] */;
  %78 = @func_951(%77) /* ty=(Tensor[(10, 13, 1), float64],) */;
  %79 = cast(%var_1727, dtype="float32") /* ty=Tensor[(50), float32] */;
  %80 = cast(%var_1722, dtype="float64") /* ty=Tensor[(130), float64] */;
  %81 = %78.0;
  %82 = cast(%81, dtype="float64") /* ty=Tensor[(10, 13, 1), float64] */;
  %83 = reshape(%79, newshape=[1, 5, 10]) /* ty=Tensor[(1, 5, 10), float32] */;
  %84 = reshape(%80, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %85 = reshape(%82, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %86 = @func_1451(%83, %84, %85) /* ty=(Tensor[(1, 5, 10), float32], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(10, 13, 1), float64], Tensor[(16, 7, 11), float64], Tensor[(130), bool]) */;
  %87 = %86.2;
  %88 = cast(%87, dtype="float64") /* ty=Tensor[(1232), float64] */;
  %89 = reshape(%88, newshape=[16, 7, 11]) /* ty=Tensor[(16, 7, 11), float64] */;
  %90 = @func_603(%89) /* ty=(Tensor[(16, 7, 11), float64], Tensor[(16, 7, 11), float64]) */;
  %91 = less_equal(%70, %71) /* ty=Tensor[(13, 4, 1), bool] */;
  %92 = %90.1;
  (%91, %75, %var_1722, %81, %87, %var_1727, %92)
}

def @func_10572() -> Tensor[(4, 8, 10), float64] {
  %93 = @func_2957() /* ty=(Tensor[(4, 8, 10), float64],) */;
  %93.0
}

def @func_4278(%var_4263: Tensor[(5, 2, 4), float64]) -> Tensor[(5, 2, 4), int32] {
  %94 = @func_3462() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) */;
  %95 = %94.1;
  %96 = cast(%var_4263, dtype="int32") /* ty=Tensor[(5, 2, 4), int32] */;
  %97 = shape_of(%95, dtype="int32") /* ty=Tensor[(3), int32] */;
  %98 = cast(%95, dtype="int32") /* ty=Tensor[(5, 2, 4), int32] */;
  %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  maximum(%98, %99) /* ty=Tensor[(5, 2, 4), int32] */
}

def @func_7970() -> (Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) {
  %105 = fn () -> (Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) {
    %100 = @func_2938() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64]) */;
    %101 = %100.1;
    %102 = cast(%101, dtype="float64") /* ty=Tensor[(4, 8, 10), float64] */;
    %103 = @func_1772() /* ty=Tensor[(5, 2, 4), float64] */;
    %104 = rsqrt(%102) /* ty=Tensor[(4, 8, 10), float64] */;
    (%103, %104)
  };
  %105() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) */
}

def @func_7859() -> (Tensor[(320), uint8], Tensor[(13, 10), float64], Tensor[(130), float64]) {
  %106 = @func_6645() /* ty=(Tensor[(320), uint8],) */;
  %107 = %106.0;
  %108 = cast(%107, dtype="float64") /* ty=Tensor[(320), float64] */;
  %109 = cast(meta[relay.Constant][5] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %110 = reshape(%108, newshape=[4, 80]) /* ty=Tensor[(4, 80), float64] */;
  %111 = reshape(%109, newshape=[13, 10]) /* ty=Tensor[(13, 10), float64] */;
  %112 = @func_5618(%110, %111) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float32], Tensor[(4, 80), float64], Tensor[(13, 10), float64]) */;
  %113 = %112.4;
  (%107, %113, meta[relay.Constant][5] /* ty=Tensor[(130), float64] */)
}

def @func_3122() -> Tensor[(5, 2, 4), float64] {
  %114 = fn () -> Tensor[(5, 2, 4), float64] {
    @func_1772() /* ty=Tensor[(5, 2, 4), float64] */
  };
  %114() /* ty=Tensor[(5, 2, 4), float64] */
}

def @func_7782() -> (Tensor[(5, 2, 4), float64], Tensor[(320), float32]) {
  @func_7780() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(320), float32]) */
}

def @func_7397() -> Tensor[(320), uint8] {
  %116 = fn () -> Tensor[(320), uint8] {
    %115 = @func_4730() /* ty=(Tensor[(320), uint8],) */;
    %115.0
  };
  %116() /* ty=Tensor[(320), uint8] */
}

def @func_1920(%var_1918: Tensor[(130), float64], %var_1919: Tensor[(50), float32]) -> (Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8], Tensor[(50), float32], uint16, Tensor[(130), float64], Tensor[(50), float32], Tensor[(5, 2, 4), float32]) {
  @func_1916(%var_1918, %var_1919) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8], Tensor[(50), float32], uint16, Tensor[(130), float64], Tensor[(50), float32], Tensor[(5, 2, 4), float32]) */
}

def @func_1455(%var_1452: Tensor[(1, 5, 10), float32], %var_1453: Tensor[(130), float64], %var_1454: Tensor[(130), float64]) -> (Tensor[(1, 5, 10), float32], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(10, 13, 1), float64], Tensor[(16, 7, 11), float64], Tensor[(130), bool]) {
  %136 = fn (%var_1410: Tensor[(1, 5, 10), float32], %var_1429: Tensor[(130), float64], %var_1441: Tensor[(130), float64]) -> (Tensor[(1, 5, 10), float32], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(10, 13, 1), float64], Tensor[(16, 7, 11), float64], Tensor[(130), bool]) {
    %117 = cast(%var_1410, dtype="float32") /* ty=Tensor[(1, 5, 10), float32] */;
    %118 = cast(meta[relay.Constant][6] /* ty=Tensor[(1232), float64] */, dtype="float64") /* ty=Tensor[(1232), float64] */;
    %119 = reshape(%118, newshape=[16, 7, 11]) /* ty=Tensor[(16, 7, 11), float64] */;
    %120 = @func_603(%119) /* ty=(Tensor[(16, 7, 11), float64], Tensor[(16, 7, 11), float64]) */;
    %121 = cast(%var_1429, dtype="float64") /* ty=Tensor[(130), float64] */;
    %122 = reshape(%121, newshape=[10, 13, 1]) /* ty=Tensor[(10, 13, 1), float64] */;
    %123 = @func_951(%122) /* ty=(Tensor[(10, 13, 1), float64],) */;
    %124 = cast(meta[relay.Constant][6] /* ty=Tensor[(1232), float64] */, dtype="float64") /* ty=Tensor[(1232), float64] */;
    %125 = reshape(%124, newshape=[16, 7, 11]) /* ty=Tensor[(16, 7, 11), float64] */;
    %126 = @func_603(%125) /* ty=(Tensor[(16, 7, 11), float64], Tensor[(16, 7, 11), float64]) */;
    %127 = cast(%var_1441, dtype="bool") /* ty=Tensor[(130), bool] */;
    %128 = shape_of(%var_1429, dtype="int32") /* ty=Tensor[(1), int32] */;
    %129 = cast(%var_1429, dtype="bool") /* ty=Tensor[(130), bool] */;
    %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?), bool] */;
    %131 = sigmoid(%117) /* ty=Tensor[(1, 5, 10), float32] */;
    %132 = %120.0;
    %133 = %123.0;
    %134 = %126.0;
    %135 = less(%129, %130) /* ty=Tensor[(130), bool] */;
    (%131, %132, meta[relay.Constant][6] /* ty=Tensor[(1232), float64] */, %133, %134, %135)
  };
  %136(%var_1452, %var_1453, %var_1454) /* ty=(Tensor[(1, 5, 10), float32], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(10, 13, 1), float64], Tensor[(16, 7, 11), float64], Tensor[(130), bool]) */
}

def @func_1846() -> (Tensor[(5, 2, 4), float64],) {
  %138 = fn () -> (Tensor[(5, 2, 4), float64],) {
    %137 = @func_1772() /* ty=Tensor[(5, 2, 4), float64] */;
    (%137,)
  };
  %138() /* ty=(Tensor[(5, 2, 4), float64],) */
}

def @func_4730() -> (Tensor[(320), uint8],) {
  %139 = @func_3097() /* ty=Tensor[(320), uint8] */;
  (%139,)
}

def @func_6628(%var_6622: Tensor[(13, 1, 3), float64]) -> Tensor[(13, 1, 3), float64] {
  %140 = cast(%var_6622, dtype="float64") /* ty=Tensor[(13, 1, 3), float64] */;
  log(%140) /* ty=Tensor[(13, 1, 3), float64] */
}

def @func_6886(%var_6885: Tensor[(16, 14, 7), float32]) -> (Tensor[(16, 14, 7), float32],) {
  %143 = fn (%var_6879: Tensor[(16, 14, 7), float32]) -> (Tensor[(16, 14, 7), float32],) {
    %141 = cast(%var_6879, dtype="float32") /* ty=Tensor[(16, 14, 7), float32] */;
    %142 = sinh(%141) /* ty=Tensor[(16, 14, 7), float32] */;
    (%142,)
  };
  %143(%var_6885) /* ty=(Tensor[(16, 14, 7), float32],) */
}

def @func_2306() -> (Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) {
  %150 = fn () -> (Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) {
    %144 = cast(meta[relay.Constant][7] /* ty=Tensor[(320), uint8] */, dtype="uint8") /* ty=Tensor[(320), uint8] */;
    %145 = cast(meta[relay.Constant][7] /* ty=Tensor[(320), uint8] */, dtype="uint8") /* ty=Tensor[(320), uint8] */;
    %146 = reshape(%144, newshape=[4, 8, 10]) /* ty=Tensor[(4, 8, 10), uint8] */;
    %147 = reshape(%145, newshape=[4, 8, 10]) /* ty=Tensor[(4, 8, 10), uint8] */;
    %148 = @func_1988() /* ty=Tensor[(5, 2, 4), float64] */;
    %149 = @func_1818(%146, %147) /* ty=Tensor[(4, 8, 10), float64] */;
    (%148, %149, meta[relay.Constant][7] /* ty=Tensor[(320), uint8] */)
  };
  %150() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) */
}

def @func_8628() -> (Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64], Tensor[(5, 10), float32]) {
  @func_8626() /* ty=(Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64], Tensor[(5, 10), float32]) */
}

def @func_9029(%var_9027: Tensor[(156), float32], %var_9028: Tensor[(36), int32]) -> (Tensor[(320), uint8], Tensor[(5, 2, 4), int32], Tensor[(40), float64], Tensor[(26, 5), float64], Tensor[(156), float32], Tensor[(252), uint16], Tensor[(36), int32], Tensor[(50), float32], Tensor[(320), bool], Tensor[(5, 2, 4), float64]) {
  @func_9025(%var_9027, %var_9028) /* ty=(Tensor[(320), uint8], Tensor[(5, 2, 4), int32], Tensor[(40), float64], Tensor[(26, 5), float64], Tensor[(156), float32], Tensor[(252), uint16], Tensor[(36), int32], Tensor[(50), float32], Tensor[(320), bool], Tensor[(5, 2, 4), float64]) */
}

def @func_2249(%var_2209: Tensor[(7, 3, 12), uint16], %var_2210: Tensor[(7, 3, 12), uint16], %var_2238: Tensor[(50), float32]) -> (Tensor[(7, 3, 12), bool], Tensor[(4, 8, 10), float64], Tensor[(4, 80), uint8], Tensor[(5, 2, 4), float64], Tensor[(130), bool], Tensor[(50), float32], Tensor[(1, 130), float64]) {
  %151 = cast(%var_2210, dtype="bool") /* ty=Tensor[(7, 3, 12), bool] */;
  %152 = shape_of(%var_2209, dtype="int32") /* ty=Tensor[(3), int32] */;
  %153 = cast(%var_2209, dtype="bool") /* ty=Tensor[(7, 3, 12), bool] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %155 = cast(meta[relay.Constant][8] /* ty=Tensor[(4, 80), uint8] */, dtype="uint8") /* ty=Tensor[(4, 80), uint8] */;
  %156 = cast(meta[relay.Constant][8] /* ty=Tensor[(4, 80), uint8] */, dtype="uint8") /* ty=Tensor[(4, 80), uint8] */;
  %157 = reshape(%155, newshape=[4, 8, 10]) /* ty=Tensor[(4, 8, 10), uint8] */;
  %158 = reshape(%156, newshape=[4, 8, 10]) /* ty=Tensor[(4, 8, 10), uint8] */;
  %159 = cast(%var_2238, dtype="float32") /* ty=Tensor[(50), float32] */;
  %160 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 130), float64] */, dtype="float64") /* ty=Tensor[(1, 130), float64] */;
  %161 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 130), float64] */, dtype="float64") /* ty=Tensor[(1, 130), float64] */;
  %162 = reshape(%159, newshape=[1, 5, 10]) /* ty=Tensor[(1, 5, 10), float32] */;
  %163 = reshape(%160, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %164 = reshape(%161, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %165 = @func_1451(%162, %163, %164) /* ty=(Tensor[(1, 5, 10), float32], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(10, 13, 1), float64], Tensor[(16, 7, 11), float64], Tensor[(130), bool]) */;
  %166 = equal(%153, %154) /* ty=Tensor[(7, 3, 12), bool] */;
  %167 = @func_1818(%157, %158) /* ty=Tensor[(4, 8, 10), float64] */;
  %168 = @func_1772() /* ty=Tensor[(5, 2, 4), float64] */;
  %169 = %165.5;
  (%166, %167, meta[relay.Constant][8] /* ty=Tensor[(4, 80), uint8] */, %168, %169, %var_2238, meta[relay.Constant][9] /* ty=Tensor[(1, 130), float64] */)
}

def @func_7341() -> (Tensor[(13, 2, 9), bool], Tensor[(5, 2, 4), float64], Tensor[(320), float64], Tensor[(130), float64], Tensor[(4, 8, 10), float64]) {
  %170 = cast(meta[relay.Constant][10] /* ty=Tensor[(320), float64] */, dtype="float64") /* ty=Tensor[(320), float64] */;
  %171 = cast(meta[relay.Constant][11] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %172 = reshape(%170, newshape=[4, 80]) /* ty=Tensor[(4, 80), float64] */;
  %173 = reshape(%171, newshape=[13, 10]) /* ty=Tensor[(13, 10), float64] */;
  %174 = @func_5618(%172, %173) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float32], Tensor[(4, 80), float64], Tensor[(13, 10), float64]) */;
  %175 = @func_4902() /* ty=(Tensor[(4, 8, 10), float64],) */;
  %176 = @func_4633() /* ty=Tensor[(13, 2, 9), bool] */;
  %177 = %174.1;
  %178 = %175.0;
  (%176, %177, meta[relay.Constant][10] /* ty=Tensor[(320), float64] */, meta[relay.Constant][11] /* ty=Tensor[(130), float64] */, %178)
}

def @func_7463(%var_7410: Tensor[(16, 11, 10), bool]) -> (Tensor[(16, 11, 10), bool], Tensor[(1, 130), float64], Tensor[(50), float32], Tensor[(130), float64], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) {
  %179 = cast(meta[relay.Constant][12] /* ty=Tensor[(16, 11, 10), bool] */, dtype="bool") /* ty=Tensor[(16, 11, 10), bool] */;
  %180 = shape_of(%var_7410, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(%var_7410, dtype="bool") /* ty=Tensor[(16, 11, 10), bool] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %183 = cast(meta[relay.Constant][13] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %184 = cast(meta[relay.Constant][14] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %185 = reshape(%183, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %186 = reshape(%184, newshape=[1, 130]) /* ty=Tensor[(1, 130), float64] */;
  %187 = @func_2613(%185, %186) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(50), float32], Tensor[(1, 130), float64]) */;
  %188 = cast(meta[relay.Constant][15] /* ty=Tensor[(1232), float64] */, dtype="float64") /* ty=Tensor[(1232), float64] */;
  %189 = %187.3;
  %190 = cast(%189, dtype="float64") /* ty=Tensor[(1, 130), float64] */;
  %191 = cast(meta[relay.Constant][13] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %192 = reshape(%188, newshape=[1232]) /* ty=Tensor[(1232), float64] */;
  %193 = reshape(%190, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %194 = reshape(%191, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %195 = @func_2055(%192, %193, %194) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(320), uint8], Tensor[(130), float64], Tensor[(50), float32]) */;
  %196 = @func_4355() /* ty=(Tensor[(5, 2, 4), float64],) */;
  %197 = @func_2938() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64]) */;
  %198 = logical_and(%181, %182) /* ty=Tensor[(16, 11, 10), bool] */;
  %199 = %195.1;
  %200 = %196.0;
  %201 = %197.1;
  (%198, %189, meta[relay.Constant][13] /* ty=Tensor[(50), float32] */, meta[relay.Constant][14] /* ty=Tensor[(130), float64] */, %199, meta[relay.Constant][15] /* ty=Tensor[(1232), float64] */, %200, %201)
}

def @func_7526() -> (Tensor[(5, 2, 4), float64], Tensor[(13, 2, 9), bool]) {
  %206 = fn () -> (Tensor[(5, 2, 4), float64], Tensor[(13, 2, 9), bool]) {
    %202 = @func_1845() /* ty=(Tensor[(5, 2, 4), float64],) */;
    %203 = @func_4138() /* ty=(Tensor[(13, 2, 9), bool],) */;
    %204 = %202.0;
    %205 = %203.0;
    (%204, %205)
  };
  %206() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(13, 2, 9), bool]) */
}

def @func_2333() -> (Tensor[(5, 2, 4), float64],) {
  %207 = @func_2305() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) */;
  %208 = %207.0;
  (%208,)
}

def @func_10673() -> Tensor[(5, 2, 4), float64] {
  %209 = @func_2601() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(130), float64], Tensor[(50), float32], Tensor[(4, 8, 10), float64], Tensor[(40), float64], Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) */;
  %209.6
}

def @func_2885() -> Tensor[(4, 8, 10), float64] {
  @func_2883() /* ty=Tensor[(4, 8, 10), float64] */
}

def @func_6177() -> (Tensor[(320), uint8], Tensor[(4, 8, 10), float64], Tensor[(320), uint8], Tensor[(4, 8, 10), bool]) {
  %224 = fn () -> (Tensor[(320), uint8], Tensor[(4, 8, 10), float64], Tensor[(320), uint8], Tensor[(4, 8, 10), bool]) {
    %210 = @func_4036() /* ty=(Tensor[(4, 8, 10), float64], Tensor[(4, 8, 10), float64]) */;
    %211 = %210.1;
    %212 = cast(%211, dtype="float32") /* ty=Tensor[(4, 8, 10), float32] */;
    %213 = exp(%212) /* ty=Tensor[(4, 8, 10), float32] */;
    %214 = cast(%213, dtype="float32") /* ty=Tensor[(4, 8, 10), float32] */;
    %215 = sinh(%214) /* ty=Tensor[(4, 8, 10), float32] */;
    %216 = cast(%211, dtype="bool") /* ty=Tensor[(4, 8, 10), bool] */;
    %217 = shape_of(%215, dtype="int32") /* ty=Tensor[(3), int32] */;
    %218 = cast(%215, dtype="bool") /* ty=Tensor[(4, 8, 10), bool] */;
    %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %220 = @func_4774() /* ty=Tensor[(320), uint8] */;
    %221 = @func_3881() /* ty=Tensor[(4, 8, 10), float64] */;
    %222 = @func_4774() /* ty=Tensor[(320), uint8] */;
    %223 = greater_equal(%218, %219) /* ty=Tensor[(4, 8, 10), bool] */;
    (%220, %221, %222, %223)
  };
  %224() /* ty=(Tensor[(320), uint8], Tensor[(4, 8, 10), float64], Tensor[(320), uint8], Tensor[(4, 8, 10), bool]) */
}

def @func_9965() -> Tensor[(320), bool] {
  %225 = @func_9180() /* ty=(Tensor[(130), float64], Tensor[(320), bool], Tensor[(4, 8, 10), float32]) */;
  %225.1
}

def @func_2867() -> (Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) {
  @func_2865() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) */
}

def @func_9967() -> Tensor[(320), bool] {
  @func_9965() /* ty=Tensor[(320), bool] */
}

def @func_3881() -> Tensor[(4, 8, 10), float64] {
  %226 = @func_2957() /* ty=(Tensor[(4, 8, 10), float64],) */;
  %226.0
}

def @func_8558() -> (Tensor[(13, 2, 9), bool],) {
  @func_8556() /* ty=(Tensor[(13, 2, 9), bool],) */
}

def @func_10126() -> (Tensor[(5, 9, 320), uint8], Tensor[(5, 9, 320), bool]) {
  %237 = fn () -> (Tensor[(5, 9, 320), uint8], Tensor[(5, 9, 320), bool]) {
    %227 = @func_6176() /* ty=(Tensor[(320), uint8], Tensor[(4, 8, 10), float64], Tensor[(320), uint8], Tensor[(4, 8, 10), bool]) */;
    %228 = %227.2;
    %229 = @func_8567() /* ty=(Tensor[(5, 9, 1), float64],) */;
    %230 = %229.0;
    %231 = cast(%228, dtype="uint8") /* ty=Tensor[(320), uint8] */;
    %232 = cast(%230, dtype="uint8") /* ty=Tensor[(5, 9, 1), uint8] */;
    %233 = cast(%228, dtype="bool") /* ty=Tensor[(320), bool] */;
    %234 = cast(%230, dtype="bool") /* ty=Tensor[(5, 9, 1), bool] */;
    %235 = subtract(%231, %232) /* ty=Tensor[(5, 9, 320), uint8] */;
    %236 = logical_or(%233, %234) /* ty=Tensor[(5, 9, 320), bool] */;
    (%235, %236)
  };
  %237() /* ty=(Tensor[(5, 9, 320), uint8], Tensor[(5, 9, 320), bool]) */
}

def @func_8626() -> (Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64], Tensor[(5, 10), float32]) {
  %238 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 10), float32] */, dtype="float32") /* ty=Tensor[(5, 10), float32] */;
  %239 = reshape(%238, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %240 = @func_4604(%239) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(1232), float64], Tensor[(1, 1232), float64], Tensor[(130), float64], Tensor[(50), float32]) */;
  %241 = @func_2821() /* ty=Tensor[(4, 8, 10), float64] */;
  %242 = %240.1;
  (%241, %242, meta[relay.Constant][16] /* ty=Tensor[(5, 10), float32] */)
}

def @func_9114(%var_9112: Tensor[(660), int32], %var_9113: Tensor[(40), float64]) -> (Tensor[(320), uint8], Tensor[(5, 2, 4), bool], Tensor[(660), int32], Tensor[(40), float64]) {
  %253 = fn (%var_9092: Tensor[(660), int32], %var_9093: Tensor[(40), float64]) -> (Tensor[(320), uint8], Tensor[(5, 2, 4), bool], Tensor[(660), int32], Tensor[(40), float64]) {
    %243 = @func_2783() /* ty=(Tensor[(320), uint8],) */;
    %244 = cast(%var_9092, dtype="int32") /* ty=Tensor[(660), int32] */;
    %245 = cast(%var_9092, dtype="int32") /* ty=Tensor[(660), int32] */;
    %246 = cast(%var_9093, dtype="float64") /* ty=Tensor[(40), float64] */;
    %247 = reshape(%244, newshape=[5, 12, 11]) /* ty=Tensor[(5, 12, 11), int32] */;
    %248 = reshape(%245, newshape=[5, 12, 11]) /* ty=Tensor[(5, 12, 11), int32] */;
    %249 = reshape(%246, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), float64] */;
    %250 = @func_7680(%247, %248, %249) /* ty=(Tensor[(5, 12, 11), bool], Tensor[(5, 2, 4), bool]) */;
    %251 = %243.0;
    %252 = %250.1;
    (%251, %252, %var_9092, %var_9093)
  };
  %253(%var_9112, %var_9113) /* ty=(Tensor[(320), uint8], Tensor[(5, 2, 4), bool], Tensor[(660), int32], Tensor[(40), float64]) */
}

def @func_3034() -> (Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) {
  %254 = @func_1772() /* ty=Tensor[(5, 2, 4), float64] */;
  %255 = @func_1988() /* ty=Tensor[(5, 2, 4), float64] */;
  %256 = @func_1988() /* ty=Tensor[(5, 2, 4), float64] */;
  (%254, %255, %256)
}

def @func_5128() -> (Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), uint32], Tensor[(320), uint8]) {
  @func_5126() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), uint32], Tensor[(320), uint8]) */
}

def @func_953(%var_952: Tensor[(10, 13, 1), float64]) -> (Tensor[(10, 13, 1), float64],) {
  %259 = fn (%var_936: Tensor[(10, 13, 1), float64]) -> (Tensor[(10, 13, 1), float64],) {
    %257 = cast(%var_936, dtype="float64") /* ty=Tensor[(10, 13, 1), float64] */;
    %258 = log(%257) /* ty=Tensor[(10, 13, 1), float64] */;
    (%258,)
  };
  %259(%var_952) /* ty=(Tensor[(10, 13, 1), float64],) */
}

def @func_10389(%var_10388: Tensor[(130), float64]) -> (Tensor[(5, 2, 4), float64], Tensor[(4, 3, 13), float32], Tensor[(156), float32], Tensor[(130), float64], Tensor[(1, 50), float32], Tensor[(5, 2, 4), float64]) {
  %272 = fn (%var_10363: Tensor[(130), float64]) -> (Tensor[(5, 2, 4), float64], Tensor[(4, 3, 13), float32], Tensor[(156), float32], Tensor[(130), float64], Tensor[(1, 50), float32], Tensor[(5, 2, 4), float64]) {
    %260 = @func_3462() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) */;
    %261 = cast(meta[relay.Constant][17] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
    %262 = cast(%var_10363, dtype="float64") /* ty=Tensor[(130), float64] */;
    %263 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 50), float32] */, dtype="float32") /* ty=Tensor[(1, 50), float32] */;
    %264 = reshape(%261, newshape=[4, 3, 13]) /* ty=Tensor[(4, 3, 13), float32] */;
    %265 = reshape(%262, newshape=[130]) /* ty=Tensor[(130), float64] */;
    %266 = reshape(%263, newshape=[1, 50]) /* ty=Tensor[(1, 50), float32] */;
    %267 = @func_3759(%264, %265, %266) /* ty=(Tensor[(4, 3, 13), float32], Tensor[(1232), float64], Tensor[(130), float64], Tensor[(1, 50), float32], Tensor[(5, 2, 4), float64]) */;
    %268 = @func_9470() /* ty=(Tensor[(5, 2, 4), float64],) */;
    %269 = %260.1;
    %270 = %267.0;
    %271 = %268.0;
    (%269, %270, meta[relay.Constant][17] /* ty=Tensor[(156), float32] */, %var_10363, meta[relay.Constant][18] /* ty=Tensor[(1, 50), float32] */, %271)
  };
  %272(%var_10388) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 3, 13), float32], Tensor[(156), float32], Tensor[(130), float64], Tensor[(1, 50), float32], Tensor[(5, 2, 4), float64]) */
}

def @func_3036() -> (Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) {
  @func_3034() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) */
}

def @main(%var_10838: Tensor[(7, 15, 3), float32], %var_10843: Tensor[(1, 130), float64], %var_10844: Tensor[(50), float32]) -> (Tensor[(5, 2, 4), float32], Tensor[(1, 130), float64], Tensor[(50), float32], Tensor[(7, 15, 3), uint16]) {
  %273 = cast(%var_10843, dtype="float64") /* ty=Tensor[(1, 130), float64] */;
  %274 = cast(%var_10844, dtype="float32") /* ty=Tensor[(50), float32] */;
  %275 = reshape(%273, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %276 = reshape(%274, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %277 = @func_1920(%275, %276) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8], Tensor[(50), float32], uint16, Tensor[(130), float64], Tensor[(50), float32], Tensor[(5, 2, 4), float32]) */;
  %278 = cast(%var_10838, dtype="float32") /* ty=Tensor[(7, 15, 3), float32] */;
  %279 = atan(%278) /* ty=Tensor[(7, 15, 3), float32] */;
  %280 = cast(%279, dtype="float64") /* ty=Tensor[(7, 15, 3), float64] */;
  %281 = acos(%280) /* ty=Tensor[(7, 15, 3), float64] */;
  %282 = cast(%281, dtype="uint16") /* ty=Tensor[(7, 15, 3), uint16] */;
  %283 = shape_of(%279, dtype="int32") /* ty=Tensor[(3), int32] */;
  %284 = cast(%279, dtype="uint16") /* ty=Tensor[(7, 15, 3), uint16] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %286 = %277.7;
  %287 = minimum(%284, %285) /* ty=Tensor[(7, 15, 3), uint16] */;
  (%286, %var_10843, %var_10844, %287)
}

def @func_9560() -> (Tensor[(5, 2, 4), float64],) {
  %290 = fn () -> (Tensor[(5, 2, 4), float64],) {
    %288 = @func_5126() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), uint32], Tensor[(320), uint8]) */;
    %289 = %288.1;
    (%289,)
  };
  %290() /* ty=(Tensor[(5, 2, 4), float64],) */
}

def @func_7632(%var_7597: Tensor[(5, 2, 5), float64], %var_7607: Tensor[(42, 6), uint16], %var_7610: uint16, %var_7617: Tensor[(490), int64]) -> (Tensor[(5, 2, 5), uint64], Tensor[(5, 2, 5), float64], Tensor[(7, 3, 12), bool], Tensor[(42, 6), uint16], Tensor[(320), uint8], uint16, Tensor[(5, 2, 4), float64], Tensor[(490), int64], Tensor[(5, 2, 4), float64]) {
  %291 = @func_3163() /* ty=Tensor[(5, 2, 5), float64] */;
  %292 = cast(%var_7597, dtype="uint64") /* ty=Tensor[(5, 2, 5), uint64] */;
  %293 = shape_of(%291, dtype="int32") /* ty=Tensor[(3), int32] */;
  %294 = cast(%291, dtype="uint64") /* ty=Tensor[(5, 2, 5), uint64] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %296 = cast(%var_7597, dtype="float64") /* ty=Tensor[(5, 2, 5), float64] */;
  %297 = cast(%var_7607, dtype="uint16") /* ty=Tensor[(42, 6), uint16] */;
  %298 = cast(%var_7607, dtype="uint16") /* ty=Tensor[(42, 6), uint16] */;
  %299 = bitwise_xor(%294, %295) /* ty=Tensor[(5, 2, 5), uint64] */;
  %300 = cast(%299, dtype="float32") /* ty=Tensor[(5, 2, 5), float32] */;
  %301 = reshape(%297, newshape=[7, 3, 12]) /* ty=Tensor[(7, 3, 12), uint16] */;
  %302 = reshape(%298, newshape=[7, 3, 12]) /* ty=Tensor[(7, 3, 12), uint16] */;
  %303 = reshape(%300, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %304 = @func_2249(%301, %302, %303) /* ty=(Tensor[(7, 3, 12), bool], Tensor[(4, 8, 10), float64], Tensor[(4, 80), uint8], Tensor[(5, 2, 4), float64], Tensor[(130), bool], Tensor[(50), float32], Tensor[(1, 130), float64]) */;
  %305 = cast(%var_7610, dtype="uint16") /* ty=uint16 */;
  %306 = reshape(%305, newshape=[]) /* ty=uint16 */;
  %307 = @func_6559(%306) /* ty=(Tensor[(320), uint8], Tensor[(320), uint8], Tensor[(4, 8, 10), float64], Tensor[(50), float32], Tensor[(320), uint8], Tensor[(130), uint64], Tensor[(16, 7, 11), float32]) */;
  %308 = cast(%var_7617, dtype="int64") /* ty=Tensor[(490), int64] */;
  %309 = cast(%var_7617, dtype="int64") /* ty=Tensor[(490), int64] */;
  %310 = reshape(%308, newshape=[7, 14, 5]) /* ty=Tensor[(7, 14, 5), int64] */;
  %311 = reshape(%309, newshape=[7, 14, 5]) /* ty=Tensor[(7, 14, 5), int64] */;
  %312 = @func_2419(%310, %311) /* ty=(Tensor[(7, 14, 5), bool], uint16, Tensor[(130), float64], Tensor[(50), float32], Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) */;
  %313 = %312.5;
  %314 = cast(%313, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  %315 = reshape(%314, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), float64] */;
  %316 = sin(%296) /* ty=Tensor[(5, 2, 5), float64] */;
  %317 = %304.0;
  %318 = %307.1;
  %319 = @func_2372(%315) /* ty=Tensor[(5, 2, 4), float64] */;
  (%299, %316, %317, %var_7607, %318, %var_7610, %313, %var_7617, %319)
}

def @func_9449(%var_9448: Tensor[(12, 11, 6), float64]) -> (Tensor[(1, 130), float64], Tensor[(130), float64], Tensor[(12, 11, 6), float64]) {
  %328 = fn (%var_9421: Tensor[(12, 11, 6), float64]) -> (Tensor[(1, 130), float64], Tensor[(130), float64], Tensor[(12, 11, 6), float64]) {
    %320 = cast(meta[relay.Constant][19] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
    %321 = reshape(%320, newshape=[130]) /* ty=Tensor[(130), float64] */;
    %322 = @func_2735(%321) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(1, 130), float64], Tensor[(50), float32], Tensor[(130), float64]) */;
    %323 = cast(%var_9421, dtype="float64") /* ty=Tensor[(12, 11, 6), float64] */;
    %324 = sin(%323) /* ty=Tensor[(12, 11, 6), float64] */;
    %325 = cast(%324, dtype="float64") /* ty=Tensor[(12, 11, 6), float64] */;
    %326 = %322.1;
    %327 = sinh(%325) /* ty=Tensor[(12, 11, 6), float64] */;
    (%326, meta[relay.Constant][19] /* ty=Tensor[(130), float64] */, %327)
  };
  %328(%var_9448) /* ty=(Tensor[(1, 130), float64], Tensor[(130), float64], Tensor[(12, 11, 6), float64]) */
}

def @func_6395(%var_6393: Tensor[(11, 1, 6), uint64], %var_6394: Tensor[(11, 12, 6), uint64]) -> (Tensor[(11, 12, 6), uint64], Tensor[(15, 6, 3), float32], Tensor[(120), uint64], Tensor[(45, 2), uint32]) {
  @func_6391(%var_6393, %var_6394) /* ty=(Tensor[(11, 12, 6), uint64], Tensor[(15, 6, 3), float32], Tensor[(120), uint64], Tensor[(45, 2), uint32]) */
}

def @func_6241() -> (Tensor[(4, 8, 10), float64], uint16, Tensor[(50), float32]) {
  %329 = @func_4162() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) */;
  %330 = cast(meta[relay.Constant][20] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %331 = reshape(%330, newshape=[10, 5]) /* ty=Tensor[(10, 5), float32] */;
  %332 = @func_2204(%331) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(130), float64], uint16, Tensor[(130), float64], Tensor[(10, 5), float32], Tensor[(1232), float64], Tensor[(13, 4, 1), bool], Tensor[(10, 13, 1), float64], Tensor[(320), uint8]) */;
  %333 = %329.1;
  %334 = %332.2;
  (%333, %334, meta[relay.Constant][20] /* ty=Tensor[(50), float32] */)
}

def @func_6995(%var_6993: int32, %var_6994: Tensor[(9, 1, 11), int32]) -> (Tensor[(9, 1, 11), bool], Tensor[(320), uint8], Tensor[(9, 1, 11), float32], Tensor[(320), uint8]) {
  @func_6991(%var_6993, %var_6994) /* ty=(Tensor[(9, 1, 11), bool], Tensor[(320), uint8], Tensor[(9, 1, 11), float32], Tensor[(320), uint8]) */
}

def @func_1772() -> Tensor[(5, 2, 4), float64] {
  %335 = cast(meta[relay.Constant][21] /* ty=Tensor[(5, 2, 4), float64] */, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  atanh(%335) /* ty=Tensor[(5, 2, 4), float64] */
}

def @func_5621(%var_5619: Tensor[(4, 80), float64], %var_5620: Tensor[(13, 10), float64]) -> (Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float32], Tensor[(4, 80), float64], Tensor[(13, 10), float64]) {
  %346 = fn (%var_5614: Tensor[(4, 80), float64], %var_5615: Tensor[(13, 10), float64]) -> (Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float32], Tensor[(4, 80), float64], Tensor[(13, 10), float64]) {
    %336 = @func_3290() /* ty=(Tensor[(320), uint8], Tensor[(5, 2, 4), float64]) */;
    %337 = @func_1845() /* ty=(Tensor[(5, 2, 4), float64],) */;
    %338 = cast(%var_5614, dtype="float64") /* ty=Tensor[(4, 80), float64] */;
    %339 = cast(%var_5615, dtype="float64") /* ty=Tensor[(13, 10), float64] */;
    %340 = reshape(%338, newshape=[4, 8, 10]) /* ty=Tensor[(4, 8, 10), float64] */;
    %341 = reshape(%339, newshape=[130]) /* ty=Tensor[(130), float64] */;
    %342 = @func_3253(%340, %341) /* ty=(Tensor[(4, 8, 10), bool], Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(50), float32], Tensor[(130), float64], Tensor[(4, 8, 10), float32], Tensor[(5, 2, 4), float64]) */;
    %343 = %336.1;
    %344 = %337.0;
    %345 = %342.5;
    (%343, %344, %345, %var_5614, %var_5615)
  };
  %346(%var_5619, %var_5620) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float32], Tensor[(4, 80), float64], Tensor[(13, 10), float64]) */
}

def @func_10149(%var_10131: Tensor[(15, 9, 9), float64], %var_10134: Tensor[(15, 9, 9), float64]) -> Tensor[(15, 9, 9), float32] {
  %347 = cast(%var_10134, dtype="uint32") /* ty=Tensor[(15, 9, 9), uint32] */;
  %348 = shape_of(%var_10131, dtype="int32") /* ty=Tensor[(3), int32] */;
  %349 = cast(%var_10131, dtype="uint32") /* ty=Tensor[(15, 9, 9), uint32] */;
  %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %351 = maximum(%349, %350) /* ty=Tensor[(15, 9, 9), uint32] */;
  %352 = cast(%var_10131, dtype="float64") /* ty=Tensor[(15, 9, 9), float64] */;
  %353 = sigmoid(%352) /* ty=Tensor[(15, 9, 9), float64] */;
  %354 = cast(%353, dtype="float32") /* ty=Tensor[(15, 9, 9), float32] */;
  %355 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %356 = cast(%351, dtype="float32") /* ty=Tensor[(15, 9, 9), float32] */;
  %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%356, %357) /* ty=Tensor[(15, 9, 9), float32] */
}

def @func_8342() -> Tensor[(5, 2, 4), float64] {
  %359 = fn () -> Tensor[(5, 2, 4), float64] {
    %358 = @func_3347() /* ty=(Tensor[(5, 2, 4), float64],) */;
    %358.0
  };
  %359() /* ty=Tensor[(5, 2, 4), float64] */
}

def @func_2335() -> (Tensor[(5, 2, 4), float64],) {
  @func_2333() /* ty=(Tensor[(5, 2, 4), float64],) */
}

def @func_2518(%var_2516: Tensor[(5, 2, 4), float64]) -> (Tensor[(5, 2, 4), uint32],) {
  @func_2515(%var_2516) /* ty=(Tensor[(5, 2, 4), uint32],) */
}

def @func_4732() -> (Tensor[(320), uint8],) {
  @func_4730() /* ty=(Tensor[(320), uint8],) */
}

def @func_4775() -> Tensor[(320), uint8] {
  %360 = fn () -> Tensor[(320), uint8] {
    @func_4154() /* ty=Tensor[(320), uint8] */
  };
  %360() /* ty=Tensor[(320), uint8] */
}

def @func_6480() -> (Tensor[(5, 2, 4), float64],) {
  @func_6478() /* ty=(Tensor[(5, 2, 4), float64],) */
}

def @func_6478() -> (Tensor[(5, 2, 4), float64],) {
  %361 = @func_3462() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) */;
  %362 = %361.1;
  (%362,)
}

def @func_6991(%var_6964: int32, %var_6965: Tensor[(9, 1, 11), int32]) -> (Tensor[(9, 1, 11), bool], Tensor[(320), uint8], Tensor[(9, 1, 11), float32], Tensor[(320), uint8]) {
  %363 = cast(%var_6964, dtype="bool") /* ty=bool */;
  %364 = cast(%var_6965, dtype="bool") /* ty=Tensor[(9, 1, 11), bool] */;
  %365 = @func_6176() /* ty=(Tensor[(320), uint8], Tensor[(4, 8, 10), float64], Tensor[(320), uint8], Tensor[(4, 8, 10), bool]) */;
  %366 = cast(%var_6965, dtype="float32") /* ty=Tensor[(9, 1, 11), float32] */;
  %367 = greater(%363, %364) /* ty=Tensor[(9, 1, 11), bool] */;
  %368 = %365.2;
  %369 = asinh(%366) /* ty=Tensor[(9, 1, 11), float32] */;
  %370 = @func_4154() /* ty=Tensor[(320), uint8] */;
  (%367, %368, %369, %370)
}

def @func_5036() -> (Tensor[(5, 9, ?), bool], Tensor[(50), float32], Tensor[(1, 252), uint16], Tensor[(50), float32], Tensor[(5, 9, 1), float64], Tensor[(13, 2, 9), bool]) {
  %371 = cast(meta[relay.Constant][22] /* ty=Tensor[(5, 9, 1), float64] */, dtype="float64") /* ty=Tensor[(5, 9, 1), float64] */;
  %372 = rsqrt(%371) /* ty=Tensor[(5, 9, 1), float64] */;
  %373 = cast(meta[relay.Constant][22] /* ty=Tensor[(5, 9, 1), float64] */, dtype="bool") /* ty=Tensor[(5, 9, 1), bool] */;
  %374 = shape_of(%372, dtype="int32") /* ty=Tensor[(3), int32] */;
  %375 = cast(%372, dtype="bool") /* ty=Tensor[(5, 9, 1), bool] */;
  %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %377 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 252), uint16] */, dtype="uint16") /* ty=Tensor[(1, 252), uint16] */;
  %378 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 252), uint16] */, dtype="uint16") /* ty=Tensor[(1, 252), uint16] */;
  %379 = cast(meta[relay.Constant][24] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %380 = reshape(%377, newshape=[7, 3, 12]) /* ty=Tensor[(7, 3, 12), uint16] */;
  %381 = reshape(%378, newshape=[7, 3, 12]) /* ty=Tensor[(7, 3, 12), uint16] */;
  %382 = reshape(%379, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %383 = @func_2249(%380, %381, %382) /* ty=(Tensor[(7, 3, 12), bool], Tensor[(4, 8, 10), float64], Tensor[(4, 80), uint8], Tensor[(5, 2, 4), float64], Tensor[(130), bool], Tensor[(50), float32], Tensor[(1, 130), float64]) */;
  %384 = cast(%372, dtype="float64") /* ty=Tensor[(5, 9, 1), float64] */;
  %385 = @func_4138() /* ty=(Tensor[(13, 2, 9), bool],) */;
  %386 = logical_or(%375, %376) /* ty=Tensor[(5, 9, ?), bool] */;
  %387 = %383.5;
  %388 = atanh(%384) /* ty=Tensor[(5, 9, 1), float64] */;
  %389 = %385.0;
  (%386, %387, meta[relay.Constant][23] /* ty=Tensor[(1, 252), uint16] */, meta[relay.Constant][24] /* ty=Tensor[(50), float32] */, %388, %389)
}

def @func_9180() -> (Tensor[(130), float64], Tensor[(320), bool], Tensor[(4, 8, 10), float32]) {
  %390 = @func_7341() /* ty=(Tensor[(13, 2, 9), bool], Tensor[(5, 2, 4), float64], Tensor[(320), float64], Tensor[(130), float64], Tensor[(4, 8, 10), float64]) */;
  %391 = @func_4036() /* ty=(Tensor[(4, 8, 10), float64], Tensor[(4, 8, 10), float64]) */;
  %392 = %391.0;
  %393 = cast(%392, dtype="float64") /* ty=Tensor[(4, 8, 10), float64] */;
  %394 = tan(%393) /* ty=Tensor[(4, 8, 10), float64] */;
  %395 = cast(%394, dtype="float32") /* ty=Tensor[(4, 8, 10), float32] */;
  %396 = %390.3;
  %397 = @func_6360() /* ty=Tensor[(320), bool] */;
  %398 = sin(%395) /* ty=Tensor[(4, 8, 10), float32] */;
  (%396, %397, %398)
}

def @func_2865() -> (Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) {
  %399 = @func_1845() /* ty=(Tensor[(5, 2, 4), float64],) */;
  %400 = %399.0;
  %401 = cast(%400, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  %402 = reshape(%401, newshape=[40]) /* ty=Tensor[(40), float64] */;
  %403 = @func_2499(%402) /* ty=(Tensor[(4, 8, 10), float64], Tensor[(16, 7, 11), float64], uint16, Tensor[(130, 1), float64], Tensor[(50), float32], Tensor[(5, 2, 4), float64], Tensor[(40), float64]) */;
  %404 = %403.0;
  (%400, %404)
}

def @func_8074() -> (Tensor[(13, 2, 9), bool],) {
  %405 = @func_4633() /* ty=Tensor[(13, 2, 9), bool] */;
  (%405,)
}

def @func_7780() -> (Tensor[(5, 2, 4), float64], Tensor[(320), float32]) {
  %406 = @func_4893() /* ty=(Tensor[(5, 2, 4), float64],) */;
  %407 = @func_4746() /* ty=Tensor[(320), uint8] */;
  %408 = cast(%407, dtype="float32") /* ty=Tensor[(320), float32] */;
  %409 = %406.0;
  %410 = sinh(%408) /* ty=Tensor[(320), float32] */;
  (%409, %410)
}

def @func_5792() -> (Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) {
  @func_5790() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) */
}

def @func_9223(%var_9222: Tensor[(11, 3, 13), float32]) -> (Tensor[(11, 3, 13), uint16], Tensor[(5, 2, 4), float64]) {
  %420 = fn (%var_9195: Tensor[(11, 3, 13), float32]) -> (Tensor[(11, 3, 13), uint16], Tensor[(5, 2, 4), float64]) {
    %411 = cast(%var_9195, dtype="float32") /* ty=Tensor[(11, 3, 13), float32] */;
    %412 = asin(%411) /* ty=Tensor[(11, 3, 13), float32] */;
    %413 = cast(%var_9195, dtype="uint16") /* ty=Tensor[(11, 3, 13), uint16] */;
    %414 = shape_of(%412, dtype="int32") /* ty=Tensor[(3), int32] */;
    %415 = cast(%412, dtype="uint16") /* ty=Tensor[(11, 3, 13), uint16] */;
    %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %417 = @func_6478() /* ty=(Tensor[(5, 2, 4), float64],) */;
    %418 = logical_xor(%415, %416) /* ty=Tensor[(11, 3, 13), uint16] */;
    %419 = %417.0;
    (%418, %419)
  };
  %420(%var_9222) /* ty=(Tensor[(11, 3, 13), uint16], Tensor[(5, 2, 4), float64]) */
}

def @func_7371() -> (Tensor[(5, 2, 4), float64], Tensor[(320), uint8], Tensor[(5, 2, 4), float64]) {
  %421 = @func_6745() /* ty=(Tensor[(320), uint8], Tensor[(320), uint8], Tensor[(320), uint8], Tensor[(320), uint8], Tensor[(5, 2, 4), float64], Tensor[(320), uint8]) */;
  %422 = @func_6478() /* ty=(Tensor[(5, 2, 4), float64],) */;
  %423 = @func_3981() /* ty=Tensor[(5, 2, 4), float64] */;
  %424 = %421.0;
  %425 = %422.0;
  (%423, %424, %425)
}

def @func_3763(%var_3760: Tensor[(4, 3, 13), float32], %var_3761: Tensor[(130), float64], %var_3762: Tensor[(1, 50), float32]) -> (Tensor[(4, 3, 13), float32], Tensor[(1232), float64], Tensor[(130), float64], Tensor[(1, 50), float32], Tensor[(5, 2, 4), float64]) {
  %438 = fn (%var_3737: Tensor[(4, 3, 13), float32], %var_3744: Tensor[(130), float64], %var_3745: Tensor[(1, 50), float32]) -> (Tensor[(4, 3, 13), float32], Tensor[(1232), float64], Tensor[(130), float64], Tensor[(1, 50), float32], Tensor[(5, 2, 4), float64]) {
    %426 = cast(%var_3737, dtype="float32") /* ty=Tensor[(4, 3, 13), float32] */;
    %427 = cast(meta[relay.Constant][25] /* ty=Tensor[(1232), float64] */, dtype="float64") /* ty=Tensor[(1232), float64] */;
    %428 = cast(%var_3744, dtype="float64") /* ty=Tensor[(130), float64] */;
    %429 = cast(%var_3745, dtype="float32") /* ty=Tensor[(1, 50), float32] */;
    %430 = reshape(%427, newshape=[1232]) /* ty=Tensor[(1232), float64] */;
    %431 = reshape(%428, newshape=[130]) /* ty=Tensor[(130), float64] */;
    %432 = reshape(%429, newshape=[50]) /* ty=Tensor[(50), float32] */;
    %433 = @func_2055(%430, %431, %432) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(320), uint8], Tensor[(130), float64], Tensor[(50), float32]) */;
    %434 = %433.0;
    %435 = cast(%434, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
    %436 = sqrt(%426) /* ty=Tensor[(4, 3, 13), float32] */;
    %437 = cos(%435) /* ty=Tensor[(5, 2, 4), float64] */;
    (%436, meta[relay.Constant][25] /* ty=Tensor[(1232), float64] */, %var_3744, %var_3745, %437)
  };
  %438(%var_3760, %var_3761, %var_3762) /* ty=(Tensor[(4, 3, 13), float32], Tensor[(1232), float64], Tensor[(130), float64], Tensor[(1, 50), float32], Tensor[(5, 2, 4), float64]) */
}

def @func_4721(%var_4720: Tensor[(15, 6, 1), uint32]) -> (Tensor[(15, 6, 3), uint32], Tensor[(5, 2, 4), float64]) {
  %443 = fn (%var_4699: Tensor[(15, 6, 1), uint32]) -> (Tensor[(15, 6, 3), uint32], Tensor[(5, 2, 4), float64]) {
    %439 = cast(%var_4699, dtype="uint32") /* ty=Tensor[(15, 6, 1), uint32] */;
    %440 = cast(meta[relay.Constant][26] /* ty=Tensor[(15, 6, 3), uint32] */, dtype="uint32") /* ty=Tensor[(15, 6, 3), uint32] */;
    %441 = add(%439, %440) /* ty=Tensor[(15, 6, 3), uint32] */;
    %442 = @func_3121() /* ty=Tensor[(5, 2, 4), float64] */;
    (%441, %442)
  };
  %443(%var_4720) /* ty=(Tensor[(15, 6, 3), uint32], Tensor[(5, 2, 4), float64]) */
}

def @func_5432(%var_5431: Tensor[(130), float64]) -> (Tensor[(5, 2, 4), float64], Tensor[(50), float32], Tensor[(130), float64], Tensor[(50), float32]) {
  %453 = fn (%var_5422: Tensor[(130), float64]) -> (Tensor[(5, 2, 4), float64], Tensor[(50), float32], Tensor[(130), float64], Tensor[(50), float32]) {
    %444 = @func_3981() /* ty=Tensor[(5, 2, 4), float64] */;
    %445 = cast(%444, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
    %446 = cast(%var_5422, dtype="float64") /* ty=Tensor[(130), float64] */;
    %447 = cast(meta[relay.Constant][27] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
    %448 = reshape(%446, newshape=[130]) /* ty=Tensor[(130), float64] */;
    %449 = reshape(%447, newshape=[50]) /* ty=Tensor[(50), float32] */;
    %450 = @func_1916(%448, %449) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8], Tensor[(50), float32], uint16, Tensor[(130), float64], Tensor[(50), float32], Tensor[(5, 2, 4), float32]) */;
    %451 = tan(%445) /* ty=Tensor[(5, 2, 4), float64] */;
    %452 = %450.3;
    (%451, %452, %var_5422, meta[relay.Constant][27] /* ty=Tensor[(50), float32] */)
  };
  %453(%var_5431) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(50), float32], Tensor[(130), float64], Tensor[(50), float32]) */
}

def @func_4418() -> Tensor[(320), bool] {
  %454 = @func_3801() /* ty=(Tensor[(320), uint8],) */;
  %455 = %454.0;
  %456 = cast(%455, dtype="float64") /* ty=Tensor[(320), float64] */;
  %457 = atan(%456) /* ty=Tensor[(320), float64] */;
  %458 = cast(%455, dtype="bool") /* ty=Tensor[(320), bool] */;
  %459 = shape_of(%457, dtype="int32") /* ty=Tensor[(1), int32] */;
  %460 = cast(%457, dtype="bool") /* ty=Tensor[(320), bool] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?), bool] */;
  logical_and(%460, %461) /* ty=Tensor[(320), bool] */
}

def @func_2059(%var_2056: Tensor[(1232), float64], %var_2057: Tensor[(130), float64], %var_2058: Tensor[(50), float32]) -> (Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(320), uint8], Tensor[(130), float64], Tensor[(50), float32]) {
  %473 = fn (%var_2039: Tensor[(1232), float64], %var_2049: Tensor[(130), float64], %var_2050: Tensor[(50), float32]) -> (Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(320), uint8], Tensor[(130), float64], Tensor[(50), float32]) {
    %462 = cast(%var_2039, dtype="float64") /* ty=Tensor[(1232), float64] */;
    %463 = reshape(%462, newshape=[16, 7, 11]) /* ty=Tensor[(16, 7, 11), float64] */;
    %464 = @func_603(%463) /* ty=(Tensor[(16, 7, 11), float64], Tensor[(16, 7, 11), float64]) */;
    %465 = cast(%var_2049, dtype="float64") /* ty=Tensor[(130), float64] */;
    %466 = cast(%var_2050, dtype="float32") /* ty=Tensor[(50), float32] */;
    %467 = reshape(%465, newshape=[130]) /* ty=Tensor[(130), float64] */;
    %468 = reshape(%466, newshape=[50]) /* ty=Tensor[(50), float32] */;
    %469 = @func_1916(%467, %468) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8], Tensor[(50), float32], uint16, Tensor[(130), float64], Tensor[(50), float32], Tensor[(5, 2, 4), float32]) */;
    %470 = @func_1988() /* ty=Tensor[(5, 2, 4), float64] */;
    %471 = %464.1;
    %472 = %469.2;
    (%470, %471, %var_2039, %472, %var_2049, %var_2050)
  };
  %473(%var_2056, %var_2057, %var_2058) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(320), uint8], Tensor[(130), float64], Tensor[(50), float32]) */
}

def @func_6747() -> (Tensor[(320), uint8], Tensor[(320), uint8], Tensor[(320), uint8], Tensor[(320), uint8], Tensor[(5, 2, 4), float64], Tensor[(320), uint8]) {
  @func_6745() /* ty=(Tensor[(320), uint8], Tensor[(320), uint8], Tensor[(320), uint8], Tensor[(320), uint8], Tensor[(5, 2, 4), float64], Tensor[(320), uint8]) */
}

def @func_5569(%var_5534: Tensor[(1232), float64]) -> (Tensor[(2, 9, 3), float32], Tensor[(320), uint8], Tensor[(1232), float64], Tensor[(1232), float64], Tensor[(130), float64], Tensor[(50), float32], Tensor[(320), uint8], Tensor[(320), uint8]) {
  %474 = cast(meta[relay.Constant][28] /* ty=Tensor[(2, 9, 3), float32] */, dtype="float32") /* ty=Tensor[(2, 9, 3), float32] */;
  %475 = cast(%var_5534, dtype="float64") /* ty=Tensor[(1232), float64] */;
  %476 = cast(meta[relay.Constant][29] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %477 = cast(meta[relay.Constant][30] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %478 = reshape(%475, newshape=[1232]) /* ty=Tensor[(1232), float64] */;
  %479 = reshape(%476, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %480 = reshape(%477, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %481 = @func_2055(%478, %479, %480) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(320), uint8], Tensor[(130), float64], Tensor[(50), float32]) */;
  %482 = @func_2305() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) */;
  %483 = cosh(%474) /* ty=Tensor[(2, 9, 3), float32] */;
  %484 = @func_4746() /* ty=Tensor[(320), uint8] */;
  %485 = %481.2;
  %486 = %482.2;
  %487 = @func_4154() /* ty=Tensor[(320), uint8] */;
  (%483, %484, %485, %var_5534, meta[relay.Constant][29] /* ty=Tensor[(130), float64] */, meta[relay.Constant][30] /* ty=Tensor[(50), float32] */, %486, %487)
}

def @func_7343() -> (Tensor[(13, 2, 9), bool], Tensor[(5, 2, 4), float64], Tensor[(320), float64], Tensor[(130), float64], Tensor[(4, 8, 10), float64]) {
  @func_7341() /* ty=(Tensor[(13, 2, 9), bool], Tensor[(5, 2, 4), float64], Tensor[(320), float64], Tensor[(130), float64], Tensor[(4, 8, 10), float64]) */
}

def @func_10295() -> (Tensor[(13, 10), float64], Tensor[(5, 2, 4), float64]) {
  %488 = @func_7859() /* ty=(Tensor[(320), uint8], Tensor[(13, 10), float64], Tensor[(130), float64]) */;
  %489 = %488.1;
  %490 = @func_7074() /* ty=Tensor[(5, 2, 4), float64] */;
  (%489, %490)
}

def @func_7540(%var_7537: Tensor[(50), float32]) -> (Tensor[(13, 2, 9), bool], Tensor[(10, 5), float32], Tensor[(50), float32]) {
  %491 = @func_7525() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(13, 2, 9), bool]) */;
  %492 = cast(%var_7537, dtype="float32") /* ty=Tensor[(50), float32] */;
  %493 = reshape(%492, newshape=[1, 50]) /* ty=Tensor[(1, 50), float32] */;
  %494 = @func_4232(%493) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(10, 5), float32], Tensor[(1, 50), float32], Tensor[(5, 2, 4), float64]) */;
  %495 = %491.1;
  %496 = %494.1;
  (%495, %496, %var_7537)
}

def @func_5790() -> (Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) {
  %497 = @func_5126() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), uint32], Tensor[(320), uint8]) */;
  %498 = %497.0;
  %499 = @func_5666() /* ty=Tensor[(4, 8, 10), float64] */;
  (%498, %499)
}

def @func_10352() -> Tensor[(5, 2, 4), float64] {
  %501 = fn () -> Tensor[(5, 2, 4), float64] {
    %500 = @func_5897() /* ty=(Tensor[(5, 2, 4), float64],) */;
    %500.0
  };
  %501() /* ty=Tensor[(5, 2, 4), float64] */
}

def @func_10657() -> (Tensor[(13, 2, 9), bool], Tensor[(130, 1), float64], Tensor[(2112), uint8]) {
  %508 = fn () -> (Tensor[(13, 2, 9), bool], Tensor[(130, 1), float64], Tensor[(2112), uint8]) {
    %502 = @func_8074() /* ty=(Tensor[(13, 2, 9), bool],) */;
    %503 = cast(meta[relay.Constant][31] /* ty=Tensor[(2112), uint8] */, dtype="uint8") /* ty=Tensor[(2112), uint8] */;
    %504 = reshape(%503, newshape=[11, 12, 16]) /* ty=Tensor[(11, 12, 16), uint8] */;
    %505 = @func_8260(%504) /* ty=(Tensor[(11, 12, 16), uint8], Tensor[(130, 1), float64]) */;
    %506 = %502.0;
    %507 = %505.1;
    (%506, %507, meta[relay.Constant][31] /* ty=Tensor[(2112), uint8] */)
  };
  %508() /* ty=(Tensor[(13, 2, 9), bool], Tensor[(130, 1), float64], Tensor[(2112), uint8]) */
}

def @func_10675() -> Tensor[(5, 2, 4), float64] {
  @func_10673() /* ty=Tensor[(5, 2, 4), float64] */
}

def @func_4139() -> (Tensor[(13, 2, 9), bool],) {
  %516 = fn () -> (Tensor[(13, 2, 9), bool],) {
    %509 = cast(meta[relay.Constant][32] /* ty=Tensor[(13, 2, 9), float32] */, dtype="float32") /* ty=Tensor[(13, 2, 9), float32] */;
    %510 = acosh(%509) /* ty=Tensor[(13, 2, 9), float32] */;
    %511 = cast(meta[relay.Constant][32] /* ty=Tensor[(13, 2, 9), float32] */, dtype="bool") /* ty=Tensor[(13, 2, 9), bool] */;
    %512 = shape_of(%510, dtype="int32") /* ty=Tensor[(3), int32] */;
    %513 = cast(%510, dtype="bool") /* ty=Tensor[(13, 2, 9), bool] */;
    %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %515 = less(%513, %514) /* ty=Tensor[(13, 2, 9), bool] */;
    (%515,)
  };
  %516() /* ty=(Tensor[(13, 2, 9), bool],) */
}

def @func_8125(%var_8123: Tensor[(252), uint16], %var_8124: Tensor[(5, 10), float32]) -> (Tensor[(320), uint8], Tensor[(252), uint16], Tensor[(5, 10), float32], Tensor[(7, 3, 12), float64]) {
  %528 = fn (%var_8104: Tensor[(252), uint16], %var_8105: Tensor[(5, 10), float32]) -> (Tensor[(320), uint8], Tensor[(252), uint16], Tensor[(5, 10), float32], Tensor[(7, 3, 12), float64]) {
    %517 = cast(%var_8104, dtype="uint16") /* ty=Tensor[(252), uint16] */;
    %518 = cast(%var_8104, dtype="uint16") /* ty=Tensor[(252), uint16] */;
    %519 = cast(%var_8105, dtype="float32") /* ty=Tensor[(5, 10), float32] */;
    %520 = reshape(%517, newshape=[7, 3, 12]) /* ty=Tensor[(7, 3, 12), uint16] */;
    %521 = reshape(%518, newshape=[7, 3, 12]) /* ty=Tensor[(7, 3, 12), uint16] */;
    %522 = reshape(%519, newshape=[50]) /* ty=Tensor[(50), float32] */;
    %523 = @func_2249(%520, %521, %522) /* ty=(Tensor[(7, 3, 12), bool], Tensor[(4, 8, 10), float64], Tensor[(4, 80), uint8], Tensor[(5, 2, 4), float64], Tensor[(130), bool], Tensor[(50), float32], Tensor[(1, 130), float64]) */;
    %524 = %523.0;
    %525 = cast(%524, dtype="float64") /* ty=Tensor[(7, 3, 12), float64] */;
    %526 = @func_4154() /* ty=Tensor[(320), uint8] */;
    %527 = asinh(%525) /* ty=Tensor[(7, 3, 12), float64] */;
    (%526, %var_8104, %var_8105, %527)
  };
  %528(%var_8123, %var_8124) /* ty=(Tensor[(320), uint8], Tensor[(252), uint16], Tensor[(5, 10), float32], Tensor[(7, 3, 12), float64]) */
}

def @func_10243() -> (Tensor[(320), uint8], Tensor[(50), float32]) {
  %533 = fn () -> (Tensor[(320), uint8], Tensor[(50), float32]) {
    %529 = @func_6000() /* ty=(Tensor[(320), uint8], Tensor[(320), bool]) */;
    %530 = @func_9912() /* ty=(Tensor[(4, 8, 10), float64], Tensor[(50), float32], Tensor[(50), float32]) */;
    %531 = %529.0;
    %532 = %530.1;
    (%531, %532)
  };
  %533() /* ty=(Tensor[(320), uint8], Tensor[(50), float32]) */
}

def @func_3098() -> Tensor[(320), uint8] {
  %535 = fn () -> Tensor[(320), uint8] {
    %534 = @func_2783() /* ty=(Tensor[(320), uint8],) */;
    %534.0
  };
  %535() /* ty=Tensor[(320), uint8] */
}

def @func_9269() -> (Tensor[(320), uint8],) {
  %537 = fn () -> (Tensor[(320), uint8],) {
    %536 = @func_4154() /* ty=Tensor[(320), uint8] */;
    (%536,)
  };
  %537() /* ty=(Tensor[(320), uint8],) */
}

def @func_6002() -> (Tensor[(320), uint8], Tensor[(320), bool]) {
  @func_6000() /* ty=(Tensor[(320), uint8], Tensor[(320), bool]) */
}

def @func_9182() -> (Tensor[(130), float64], Tensor[(320), bool], Tensor[(4, 8, 10), float32]) {
  @func_9180() /* ty=(Tensor[(130), float64], Tensor[(320), bool], Tensor[(4, 8, 10), float32]) */
}

def @func_1818(%var_1795: Tensor[(4, 8, 10), uint8], %var_1796: Tensor[(4, 8, 10), uint8]) -> Tensor[(4, 8, 10), float64] {
  %538 = cast(%var_1796, dtype="uint8") /* ty=Tensor[(4, 8, 10), uint8] */;
  %539 = shape_of(%var_1795, dtype="int32") /* ty=Tensor[(3), int32] */;
  %540 = cast(%var_1795, dtype="uint8") /* ty=Tensor[(4, 8, 10), uint8] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %542 = logical_xor(%540, %541) /* ty=Tensor[(4, 8, 10), uint8] */;
  %543 = cast(meta[relay.Constant][33] /* ty=Tensor[(4, 8, 10), uint8] */, dtype="float64") /* ty=Tensor[(4, 8, 10), float64] */;
  %544 = shape_of(%542, dtype="int32") /* ty=Tensor[(3), int32] */;
  %545 = cast(%542, dtype="float64") /* ty=Tensor[(4, 8, 10), float64] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%545, %546) /* ty=Tensor[(4, 8, 10), float64] */
}

def @func_1988() -> Tensor[(5, 2, 4), float64] {
  %547 = @func_1845() /* ty=(Tensor[(5, 2, 4), float64],) */;
  %547.0
}

def @func_3959(%var_3899: Tensor[(5, 2, 4), float64]) -> (Tensor[(5, 2, 4), float32], Tensor[(320), uint8], Tensor[(5, 2, 4), float64]) {
  %548 = @func_2305() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) */;
  %549 = %548.0;
  %550 = cast(%var_3899, dtype="float32") /* ty=Tensor[(5, 2, 4), float32] */;
  %551 = shape_of(%549, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(%549, dtype="float32") /* ty=Tensor[(5, 2, 4), float32] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %554 = @func_3290() /* ty=(Tensor[(320), uint8], Tensor[(5, 2, 4), float64]) */;
  %555 = @func_3290() /* ty=(Tensor[(320), uint8], Tensor[(5, 2, 4), float64]) */;
  %556 = subtract(%552, %553) /* ty=Tensor[(5, 2, 4), float32] */;
  %557 = %554.0;
  %558 = %555.1;
  (%556, %557, %558)
}

def @func_4497(%var_4495: uint16, %var_4496: Tensor[(10, 2, 10), uint16]) -> (Tensor[(10, 2, 10), uint16], Tensor[(10, 2, 10), float64]) {
  %564 = fn (%var_4472: uint16, %var_4473: Tensor[(10, 2, 10), uint16]) -> (Tensor[(10, 2, 10), uint16], Tensor[(10, 2, 10), float64]) {
    %559 = cast(%var_4472, dtype="uint16") /* ty=uint16 */;
    %560 = cast(%var_4473, dtype="uint16") /* ty=Tensor[(10, 2, 10), uint16] */;
    %561 = cast(%var_4473, dtype="float64") /* ty=Tensor[(10, 2, 10), float64] */;
    %562 = minimum(%559, %560) /* ty=Tensor[(10, 2, 10), uint16] */;
    %563 = log10(%561) /* ty=Tensor[(10, 2, 10), float64] */;
    (%562, %563)
  };
  %564(%var_4495, %var_4496) /* ty=(Tensor[(10, 2, 10), uint16], Tensor[(10, 2, 10), float64]) */
}

def @func_3802() -> (Tensor[(320), uint8],) {
  %567 = fn () -> (Tensor[(320), uint8],) {
    %565 = @func_3290() /* ty=(Tensor[(320), uint8], Tensor[(5, 2, 4), float64]) */;
    %566 = %565.0;
    (%566,)
  };
  %567() /* ty=(Tensor[(320), uint8],) */
}

def @func_2204(%var_2163: Tensor[(10, 5), float32]) -> (Tensor[(5, 2, 4), float64], Tensor[(130), float64], uint16, Tensor[(130), float64], Tensor[(10, 5), float32], Tensor[(1232), float64], Tensor[(13, 4, 1), bool], Tensor[(10, 13, 1), float64], Tensor[(320), uint8]) {
  %568 = cast(meta[relay.Constant][34] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %569 = cast(meta[relay.Constant][35] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %570 = cast(%var_2163, dtype="float32") /* ty=Tensor[(10, 5), float32] */;
  %571 = reshape(%568, newshape=[]) /* ty=uint16 */;
  %572 = reshape(%569, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %573 = reshape(%570, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %574 = @func_1736(%571, %572, %573) /* ty=(Tensor[(13, 4, 1), bool], Tensor[(10, 13, 1), float64], Tensor[(130), float64], Tensor[(10, 13, 1), float64], Tensor[(1232), float64], Tensor[(50), float32], Tensor[(16, 7, 11), float64]) */;
  %575 = cast(meta[relay.Constant][34] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %576 = cast(meta[relay.Constant][35] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %577 = cast(%var_2163, dtype="float32") /* ty=Tensor[(10, 5), float32] */;
  %578 = reshape(%575, newshape=[]) /* ty=uint16 */;
  %579 = reshape(%576, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %580 = reshape(%577, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %581 = @func_1736(%578, %579, %580) /* ty=(Tensor[(13, 4, 1), bool], Tensor[(10, 13, 1), float64], Tensor[(130), float64], Tensor[(10, 13, 1), float64], Tensor[(1232), float64], Tensor[(50), float32], Tensor[(16, 7, 11), float64]) */;
  %582 = cast(meta[relay.Constant][34] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %583 = cast(meta[relay.Constant][35] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %584 = cast(%var_2163, dtype="float32") /* ty=Tensor[(10, 5), float32] */;
  %585 = reshape(%582, newshape=[]) /* ty=uint16 */;
  %586 = reshape(%583, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %587 = reshape(%584, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %588 = @func_1736(%585, %586, %587) /* ty=(Tensor[(13, 4, 1), bool], Tensor[(10, 13, 1), float64], Tensor[(130), float64], Tensor[(10, 13, 1), float64], Tensor[(1232), float64], Tensor[(50), float32], Tensor[(16, 7, 11), float64]) */;
  %589 = cast(meta[relay.Constant][34] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %590 = cast(meta[relay.Constant][35] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %591 = cast(%var_2163, dtype="float32") /* ty=Tensor[(10, 5), float32] */;
  %592 = reshape(%589, newshape=[]) /* ty=uint16 */;
  %593 = reshape(%590, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %594 = reshape(%591, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %595 = @func_1736(%592, %593, %594) /* ty=(Tensor[(13, 4, 1), bool], Tensor[(10, 13, 1), float64], Tensor[(130), float64], Tensor[(10, 13, 1), float64], Tensor[(1232), float64], Tensor[(50), float32], Tensor[(16, 7, 11), float64]) */;
  %596 = %581.4;
  %597 = cast(%596, dtype="float64") /* ty=Tensor[(1232), float64] */;
  %598 = cast(meta[relay.Constant][35] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %599 = cast(%var_2163, dtype="float32") /* ty=Tensor[(10, 5), float32] */;
  %600 = reshape(%597, newshape=[1232]) /* ty=Tensor[(1232), float64] */;
  %601 = reshape(%598, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %602 = reshape(%599, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %603 = @func_2055(%600, %601, %602) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(320), uint8], Tensor[(130), float64], Tensor[(50), float32]) */;
  %604 = @func_1772() /* ty=Tensor[(5, 2, 4), float64] */;
  %605 = %574.2;
  %606 = %588.0;
  %607 = %595.1;
  %608 = %603.3;
  (%604, %605, meta[relay.Constant][34] /* ty=uint16 */, meta[relay.Constant][35] /* ty=Tensor[(130), float64] */, %var_2163, %596, %606, %607, %608)
}

def @func_3883() -> Tensor[(4, 8, 10), float64] {
  @func_3881() /* ty=Tensor[(4, 8, 10), float64] */
}

def @func_4038() -> (Tensor[(4, 8, 10), float64], Tensor[(4, 8, 10), float64]) {
  @func_4036() /* ty=(Tensor[(4, 8, 10), float64], Tensor[(4, 8, 10), float64]) */
}

def @func_6835() -> (Tensor[(5, 2, 4), float64], Tensor[(1, 130), float64], Tensor[(130, 1), float64]) {
  %609 = @func_5790() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) */;
  %610 = %609.0;
  %611 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 2, 4), float64] */, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  %612 = shape_of(%610, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(%610, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %615 = cast(meta[relay.Constant][37] /* ty=Tensor[(130, 1), float64] */, dtype="float64") /* ty=Tensor[(130, 1), float64] */;
  %616 = reshape(%615, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %617 = @func_2735(%616) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(1, 130), float64], Tensor[(50), float32], Tensor[(130), float64]) */;
  %618 = floor_mod(%613, %614) /* ty=Tensor[(5, 2, 4), float64] */;
  %619 = %617.1;
  (%618, %619, meta[relay.Constant][37] /* ty=Tensor[(130, 1), float64] */)
}

def @func_9673() -> Tensor[(4, 8, 10), float64] {
  %620 = @func_5790() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) */;
  %620.1
}

def @func_4635() -> Tensor[(13, 2, 9), bool] {
  @func_4633() /* ty=Tensor[(13, 2, 9), bool] */
}

def @func_1990() -> Tensor[(5, 2, 4), float64] {
  @func_1988() /* ty=Tensor[(5, 2, 4), float64] */
}

def @func_6837() -> (Tensor[(5, 2, 4), float64], Tensor[(1, 130), float64], Tensor[(130, 1), float64]) {
  @func_6835() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(1, 130), float64], Tensor[(130, 1), float64]) */
}

def @func_7543(%var_7541: Tensor[(50), float32]) -> (Tensor[(13, 2, 9), bool], Tensor[(10, 5), float32], Tensor[(50), float32]) {
  @func_7540(%var_7541) /* ty=(Tensor[(13, 2, 9), bool], Tensor[(10, 5), float32], Tensor[(50), float32]) */
}

def @func_7886(%var_7862: Tensor[(13, 11, 5), float32]) -> Tensor[(13, 11, 5), float32] {
  %621 = cast(%var_7862, dtype="float32") /* ty=Tensor[(13, 11, 5), float32] */;
  erf(%621) /* ty=Tensor[(13, 11, 5), float32] */
}

def @func_9619(%var_9617: Tensor[(13, 12, 4), float32]) -> Tensor[(13, 12, 4), bool] {
  @func_9616(%var_9617) /* ty=Tensor[(13, 12, 4), bool] */
}

def @func_9340(%var_9300: Tensor[(3, 10, 3), bool], %var_9301: Tensor[(3, 10, 3), bool]) -> (Tensor[(3, 10, 3), bool], Tensor[(3, 10, 3), float32], Tensor[(320), bool], Tensor[(320), bool], Tensor[(3, 10, 3), int16], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) {
  %622 = cast(%var_9301, dtype="bool") /* ty=Tensor[(3, 10, 3), bool] */;
  %623 = shape_of(%var_9300, dtype="int32") /* ty=Tensor[(3), int32] */;
  %624 = cast(%var_9300, dtype="bool") /* ty=Tensor[(3, 10, 3), bool] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %626 = cast(%var_9300, dtype="float32") /* ty=Tensor[(3, 10, 3), float32] */;
  %627 = @func_6110() /* ty=(Tensor[(320), bool],) */;
  %628 = cast(meta[relay.Constant][38] /* ty=Tensor[(3, 10, 3), bool] */, dtype="int16") /* ty=Tensor[(3, 10, 3), int16] */;
  %629 = shape_of(%var_9301, dtype="int32") /* ty=Tensor[(3), int32] */;
  %630 = cast(%var_9301, dtype="int16") /* ty=Tensor[(3, 10, 3), int16] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %632 = @func_4036() /* ty=(Tensor[(4, 8, 10), float64], Tensor[(4, 8, 10), float64]) */;
  %633 = @func_6000() /* ty=(Tensor[(320), uint8], Tensor[(320), bool]) */;
  %634 = logical_or(%624, %625) /* ty=Tensor[(3, 10, 3), bool] */;
  %635 = atanh(%626) /* ty=Tensor[(3, 10, 3), float32] */;
  %636 = %627.0;
  %637 = @func_4418() /* ty=Tensor[(320), bool] */;
  %638 = subtract(%630, %631) /* ty=Tensor[(3, 10, 3), int16] */;
  %639 = %632.1;
  %640 = %633.0;
  (%634, %635, %636, %637, %638, %639, %640)
}

def @func_6361() -> Tensor[(320), bool] {
  %642 = fn () -> Tensor[(320), bool] {
    %641 = @func_6000() /* ty=(Tensor[(320), uint8], Tensor[(320), bool]) */;
    %641.1
  };
  %642() /* ty=Tensor[(320), bool] */
}

def @func_9644() -> (Tensor[(320), uint8],) {
  %645 = fn () -> (Tensor[(320), uint8],) {
    %643 = @func_6745() /* ty=(Tensor[(320), uint8], Tensor[(320), uint8], Tensor[(320), uint8], Tensor[(320), uint8], Tensor[(5, 2, 4), float64], Tensor[(320), uint8]) */;
    %644 = %643.0;
    (%644,)
  };
  %645() /* ty=(Tensor[(320), uint8],) */
}

def @func_10529(%var_10528: Tensor[(16, 4, 1), uint32]) -> (Tensor[(16, 4, 6), uint32],) {
  %649 = fn (%var_10510: Tensor[(16, 4, 1), uint32]) -> (Tensor[(16, 4, 6), uint32],) {
    %646 = cast(%var_10510, dtype="uint32") /* ty=Tensor[(16, 4, 1), uint32] */;
    %647 = cast(meta[relay.Constant][39] /* ty=Tensor[(16, 4, 6), uint32] */, dtype="uint32") /* ty=Tensor[(16, 4, 6), uint32] */;
    %648 = multiply(%646, %647) /* ty=Tensor[(16, 4, 6), uint32] */;
    (%648,)
  };
  %649(%var_10528) /* ty=(Tensor[(16, 4, 6), uint32],) */
}

def @func_2938() -> (Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64]) {
  %650 = @func_2333() /* ty=(Tensor[(5, 2, 4), float64],) */;
  %651 = %650.0;
  %652 = cast(%651, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  %653 = reshape(%652, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), float64] */;
  %654 = @func_2821() /* ty=Tensor[(4, 8, 10), float64] */;
  %655 = @func_2372(%653) /* ty=Tensor[(5, 2, 4), float64] */;
  (%651, %654, %655)
}

def @func_10540() -> Tensor[(5, 9, 1), float64] {
  %657 = fn () -> Tensor[(5, 9, 1), float64] {
    %656 = @func_8567() /* ty=(Tensor[(5, 9, 1), float64],) */;
    %656.0
  };
  %657() /* ty=Tensor[(5, 9, 1), float64] */
}

def @func_2783() -> (Tensor[(320), uint8],) {
  %658 = @func_2305() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) */;
  %659 = %658.2;
  (%659,)
}

def @func_5660(%var_5659: Tensor[(5, 2, 4), float64]) -> Tensor[(5, 2, 4), uint32] {
  %665 = fn (%var_5646: Tensor[(5, 2, 4), float64]) -> Tensor[(5, 2, 4), uint32] {
    %660 = @func_1988() /* ty=Tensor[(5, 2, 4), float64] */;
    %661 = cast(%var_5646, dtype="uint32") /* ty=Tensor[(5, 2, 4), uint32] */;
    %662 = shape_of(%660, dtype="int32") /* ty=Tensor[(3), int32] */;
    %663 = cast(%660, dtype="uint32") /* ty=Tensor[(5, 2, 4), uint32] */;
    %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    right_shift(%663, %664) /* ty=Tensor[(5, 2, 4), uint32] */
  };
  %665(%var_5659) /* ty=Tensor[(5, 2, 4), uint32] */
}

def @func_5899() -> (Tensor[(5, 2, 4), float64],) {
  @func_5897() /* ty=(Tensor[(5, 2, 4), float64],) */
}

def @func_4604(%var_4601: Tensor[(50), float32]) -> (Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(1232), float64], Tensor[(1, 1232), float64], Tensor[(130), float64], Tensor[(50), float32]) {
  %666 = @func_3290() /* ty=(Tensor[(320), uint8], Tensor[(5, 2, 4), float64]) */;
  %667 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 1232), float64] */, dtype="float64") /* ty=Tensor[(1, 1232), float64] */;
  %668 = cast(meta[relay.Constant][41] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %669 = cast(%var_4601, dtype="float32") /* ty=Tensor[(50), float32] */;
  %670 = reshape(%667, newshape=[1232]) /* ty=Tensor[(1232), float64] */;
  %671 = reshape(%668, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %672 = reshape(%669, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %673 = @func_2055(%670, %671, %672) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(320), uint8], Tensor[(130), float64], Tensor[(50), float32]) */;
  %674 = @func_1772() /* ty=Tensor[(5, 2, 4), float64] */;
  %675 = %666.1;
  %676 = %673.2;
  (%674, %675, %676, meta[relay.Constant][40] /* ty=Tensor[(1, 1232), float64] */, meta[relay.Constant][41] /* ty=Tensor[(130), float64] */, %var_4601)
}

def @func_7409() -> Tensor[(320), uint8] {
  %678 = fn () -> Tensor[(320), uint8] {
    %677 = @func_7371() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(320), uint8], Tensor[(5, 2, 4), float64]) */;
    %677.1
  };
  %678() /* ty=Tensor[(320), uint8] */
}

def @func_10683() -> (Tensor[(5, 2, 4), float64],) {
  @func_10681() /* ty=(Tensor[(5, 2, 4), float64],) */
}

def @func_6597(%var_6596: Tensor[(6, 42), uint16]) -> (Tensor[(320), bool], Tensor[(50), float32], Tensor[(6, 42), uint16], Tensor[(50, 1), float32]) {
  %689 = fn (%var_6589: Tensor[(6, 42), uint16]) -> (Tensor[(320), bool], Tensor[(50), float32], Tensor[(6, 42), uint16], Tensor[(50, 1), float32]) {
    %679 = @func_6110() /* ty=(Tensor[(320), bool],) */;
    %680 = cast(%var_6589, dtype="uint16") /* ty=Tensor[(6, 42), uint16] */;
    %681 = cast(%var_6589, dtype="uint16") /* ty=Tensor[(6, 42), uint16] */;
    %682 = cast(meta[relay.Constant][42] /* ty=Tensor[(50, 1), float32] */, dtype="float32") /* ty=Tensor[(50, 1), float32] */;
    %683 = reshape(%680, newshape=[7, 3, 12]) /* ty=Tensor[(7, 3, 12), uint16] */;
    %684 = reshape(%681, newshape=[7, 3, 12]) /* ty=Tensor[(7, 3, 12), uint16] */;
    %685 = reshape(%682, newshape=[50]) /* ty=Tensor[(50), float32] */;
    %686 = @func_2249(%683, %684, %685) /* ty=(Tensor[(7, 3, 12), bool], Tensor[(4, 8, 10), float64], Tensor[(4, 80), uint8], Tensor[(5, 2, 4), float64], Tensor[(130), bool], Tensor[(50), float32], Tensor[(1, 130), float64]) */;
    %687 = %679.0;
    %688 = %686.5;
    (%687, %688, %var_6589, meta[relay.Constant][42] /* ty=Tensor[(50, 1), float32] */)
  };
  %689(%var_6596) /* ty=(Tensor[(320), bool], Tensor[(50), float32], Tensor[(6, 42), uint16], Tensor[(50, 1), float32]) */
}

def @func_3863(%var_3823: Tensor[(5, 2, 4), float64]) -> (Tensor[(5, 2, 4), float32], Tensor[(320), uint8]) {
  %690 = @func_2305() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) */;
  %691 = %690.0;
  %692 = cast(%var_3823, dtype="float32") /* ty=Tensor[(5, 2, 4), float32] */;
  %693 = shape_of(%691, dtype="int32") /* ty=Tensor[(3), int32] */;
  %694 = cast(%691, dtype="float32") /* ty=Tensor[(5, 2, 4), float32] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %696 = @func_3290() /* ty=(Tensor[(320), uint8], Tensor[(5, 2, 4), float64]) */;
  %697 = divide(%694, %695) /* ty=Tensor[(5, 2, 4), float32] */;
  %698 = %696.0;
  (%697, %698)
}

def @func_2602() -> (Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(130), float64], Tensor[(50), float32], Tensor[(4, 8, 10), float64], Tensor[(40), float64], Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) {
  %722 = fn () -> (Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(130), float64], Tensor[(50), float32], Tensor[(4, 8, 10), float64], Tensor[(40), float64], Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) {
    %699 = cast(meta[relay.Constant][43] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
    %700 = cast(meta[relay.Constant][44] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
    %701 = reshape(%699, newshape=[130]) /* ty=Tensor[(130), float64] */;
    %702 = reshape(%700, newshape=[50]) /* ty=Tensor[(50), float32] */;
    %703 = @func_1916(%701, %702) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8], Tensor[(50), float32], uint16, Tensor[(130), float64], Tensor[(50), float32], Tensor[(5, 2, 4), float32]) */;
    %704 = @func_1988() /* ty=Tensor[(5, 2, 4), float64] */;
    %705 = cast(%704, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
    %706 = reshape(%705, newshape=[40]) /* ty=Tensor[(40), float64] */;
    %707 = @func_2499(%706) /* ty=(Tensor[(4, 8, 10), float64], Tensor[(16, 7, 11), float64], uint16, Tensor[(130, 1), float64], Tensor[(50), float32], Tensor[(5, 2, 4), float64], Tensor[(40), float64]) */;
    %708 = cast(%704, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
    %709 = reshape(%708, newshape=[40]) /* ty=Tensor[(40), float64] */;
    %710 = @func_2499(%709) /* ty=(Tensor[(4, 8, 10), float64], Tensor[(16, 7, 11), float64], uint16, Tensor[(130, 1), float64], Tensor[(50), float32], Tensor[(5, 2, 4), float64], Tensor[(40), float64]) */;
    %711 = @func_2305() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) */;
    %712 = %711.1;
    %713 = cast(%712, dtype="float64") /* ty=Tensor[(4, 8, 10), float64] */;
    %714 = @func_2305() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) */;
    %715 = %703.1;
    %716 = %707.0;
    %717 = %710.6;
    %718 = @func_1988() /* ty=Tensor[(5, 2, 4), float64] */;
    %719 = @func_1772() /* ty=Tensor[(5, 2, 4), float64] */;
    %720 = acosh(%713) /* ty=Tensor[(4, 8, 10), float64] */;
    %721 = %714.2;
    (%704, %715, meta[relay.Constant][43] /* ty=Tensor[(130), float64] */, meta[relay.Constant][44] /* ty=Tensor[(50), float32] */, %716, %717, %718, %719, %720, %721)
  };
  %722() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(130), float64], Tensor[(50), float32], Tensor[(4, 8, 10), float64], Tensor[(40), float64], Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) */
}

def @func_2959() -> (Tensor[(4, 8, 10), float64],) {
  @func_2957() /* ty=(Tensor[(4, 8, 10), float64],) */
}

def @func_7500() -> (Tensor[(5, 2, 5), float64], Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) {
  %728 = fn () -> (Tensor[(5, 2, 5), float64], Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) {
    %723 = @func_5897() /* ty=(Tensor[(5, 2, 4), float64],) */;
    %724 = @func_2865() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) */;
    %725 = @func_3163() /* ty=Tensor[(5, 2, 5), float64] */;
    %726 = %723.0;
    %727 = %724.0;
    (%725, %726, %727)
  };
  %728() /* ty=(Tensor[(5, 2, 5), float64], Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) */
}

def @func_9769() -> (Tensor[(320), bool], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64], Tensor[(90), uint32]) {
  @func_9767() /* ty=(Tensor[(320), bool], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64], Tensor[(90), uint32]) */
}

def @func_4232(%var_4227: Tensor[(1, 50), float32]) -> (Tensor[(5, 2, 4), float64], Tensor[(10, 5), float32], Tensor[(1, 50), float32], Tensor[(5, 2, 4), float64]) {
  %729 = @func_4162() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) */;
  %730 = cast(%var_4227, dtype="float32") /* ty=Tensor[(1, 50), float32] */;
  %731 = reshape(%730, newshape=[10, 5]) /* ty=Tensor[(10, 5), float32] */;
  %732 = @func_2204(%731) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(130), float64], uint16, Tensor[(130), float64], Tensor[(10, 5), float32], Tensor[(1232), float64], Tensor[(13, 4, 1), bool], Tensor[(10, 13, 1), float64], Tensor[(320), uint8]) */;
  %733 = @func_3034() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) */;
  %734 = %729.0;
  %735 = %732.4;
  %736 = %733.2;
  (%734, %735, %var_4227, %736)
}

def @func_9767() -> (Tensor[(320), bool], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64], Tensor[(90), uint32]) {
  %737 = @func_6110() /* ty=(Tensor[(320), bool],) */;
  %738 = @func_7525() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(13, 2, 9), bool]) */;
  %739 = @func_2305() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) */;
  %740 = cast(meta[relay.Constant][45] /* ty=Tensor[(90), uint32] */, dtype="uint32") /* ty=Tensor[(90), uint32] */;
  %741 = reshape(%740, newshape=[15, 6, 1]) /* ty=Tensor[(15, 6, 1), uint32] */;
  %742 = @func_4719(%741) /* ty=(Tensor[(15, 6, 3), uint32], Tensor[(5, 2, 4), float64]) */;
  %743 = %737.0;
  %744 = %738.0;
  %745 = %739.1;
  %746 = %742.1;
  (%743, %744, %745, %746, meta[relay.Constant][45] /* ty=Tensor[(90), uint32] */)
}

def @func_2501(%var_2500: Tensor[(40), float64]) -> (Tensor[(4, 8, 10), float64], Tensor[(16, 7, 11), float64], uint16, Tensor[(130, 1), float64], Tensor[(50), float32], Tensor[(5, 2, 4), float64], Tensor[(40), float64]) {
  %760 = fn (%var_2488: Tensor[(40), float64]) -> (Tensor[(4, 8, 10), float64], Tensor[(16, 7, 11), float64], uint16, Tensor[(130, 1), float64], Tensor[(50), float32], Tensor[(5, 2, 4), float64], Tensor[(40), float64]) {
    %747 = @func_2305() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) */;
    %748 = cast(meta[relay.Constant][46] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %749 = cast(meta[relay.Constant][47] /* ty=Tensor[(130, 1), float64] */, dtype="float64") /* ty=Tensor[(130, 1), float64] */;
    %750 = cast(meta[relay.Constant][48] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
    %751 = reshape(%748, newshape=[]) /* ty=uint16 */;
    %752 = reshape(%749, newshape=[130]) /* ty=Tensor[(130), float64] */;
    %753 = reshape(%750, newshape=[50]) /* ty=Tensor[(50), float32] */;
    %754 = @func_1736(%751, %752, %753) /* ty=(Tensor[(13, 4, 1), bool], Tensor[(10, 13, 1), float64], Tensor[(130), float64], Tensor[(10, 13, 1), float64], Tensor[(1232), float64], Tensor[(50), float32], Tensor[(16, 7, 11), float64]) */;
    %755 = cast(%var_2488, dtype="float64") /* ty=Tensor[(40), float64] */;
    %756 = reshape(%755, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), float64] */;
    %757 = %747.1;
    %758 = %754.6;
    %759 = @func_2372(%756) /* ty=Tensor[(5, 2, 4), float64] */;
    (%757, %758, meta[relay.Constant][46] /* ty=uint16 */, meta[relay.Constant][47] /* ty=Tensor[(130, 1), float64] */, meta[relay.Constant][48] /* ty=Tensor[(50), float32] */, %759, %var_2488)
  };
  %760(%var_2500) /* ty=(Tensor[(4, 8, 10), float64], Tensor[(16, 7, 11), float64], uint16, Tensor[(130, 1), float64], Tensor[(50), float32], Tensor[(5, 2, 4), float64], Tensor[(40), float64]) */
}

def @func_2823() -> Tensor[(4, 8, 10), float64] {
  @func_2821() /* ty=Tensor[(4, 8, 10), float64] */
}

def @func_4281(%var_4279: Tensor[(5, 2, 4), float64]) -> Tensor[(5, 2, 4), int32] {
  @func_4278(%var_4279) /* ty=Tensor[(5, 2, 4), int32] */
}

def @func_3292() -> (Tensor[(320), uint8], Tensor[(5, 2, 4), float64]) {
  @func_3290() /* ty=(Tensor[(320), uint8], Tensor[(5, 2, 4), float64]) */
}

def @func_5897() -> (Tensor[(5, 2, 4), float64],) {
  %761 = @func_5177() /* ty=Tensor[(5, 2, 4), float64] */;
  (%761,)
}

def @func_5038() -> (Tensor[(5, 9, ?), bool], Tensor[(50), float32], Tensor[(1, 252), uint16], Tensor[(50), float32], Tensor[(5, 9, 1), float64], Tensor[(13, 2, 9), bool]) {
  @func_5036() /* ty=(Tensor[(5, 9, ?), bool], Tensor[(50), float32], Tensor[(1, 252), uint16], Tensor[(50), float32], Tensor[(5, 9, 1), float64], Tensor[(13, 2, 9), bool]) */
}

def @func_7638(%var_7634: Tensor[(5, 2, 5), float64], %var_7635: Tensor[(42, 6), uint16], %var_7636: uint16, %var_7637: Tensor[(490), int64]) -> (Tensor[(5, 2, 5), uint64], Tensor[(5, 2, 5), float64], Tensor[(7, 3, 12), bool], Tensor[(42, 6), uint16], Tensor[(320), uint8], uint16, Tensor[(5, 2, 4), float64], Tensor[(490), int64], Tensor[(5, 2, 4), float64]) {
  @func_7632(%var_7634, %var_7635, %var_7636, %var_7637) /* ty=(Tensor[(5, 2, 5), uint64], Tensor[(5, 2, 5), float64], Tensor[(7, 3, 12), bool], Tensor[(42, 6), uint16], Tensor[(320), uint8], uint16, Tensor[(5, 2, 4), float64], Tensor[(490), int64], Tensor[(5, 2, 4), float64]) */
}

def @func_7680(%var_7640: Tensor[(5, 12, 11), int32], %var_7641: Tensor[(5, 12, 11), int32], %var_7670: Tensor[(5, 2, 4), float64]) -> (Tensor[(5, 12, 11), bool], Tensor[(5, 2, 4), bool]) {
  %762 = cast(%var_7641, dtype="int32") /* ty=Tensor[(5, 12, 11), int32] */;
  %763 = shape_of(%var_7640, dtype="int32") /* ty=Tensor[(3), int32] */;
  %764 = cast(%var_7640, dtype="int32") /* ty=Tensor[(5, 12, 11), int32] */;
  %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %766 = subtract(%764, %765) /* ty=Tensor[(5, 12, 11), int32] */;
  %767 = cast(%var_7640, dtype="bool") /* ty=Tensor[(5, 12, 11), bool] */;
  %768 = shape_of(%766, dtype="int32") /* ty=Tensor[(3), int32] */;
  %769 = cast(%766, dtype="bool") /* ty=Tensor[(5, 12, 11), bool] */;
  %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %771 = @func_6863() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) */;
  %772 = %771.0;
  %773 = cast(%var_7670, dtype="bool") /* ty=Tensor[(5, 2, 4), bool] */;
  %774 = shape_of(%772, dtype="int32") /* ty=Tensor[(3), int32] */;
  %775 = cast(%772, dtype="bool") /* ty=Tensor[(5, 2, 4), bool] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %777 = greater_equal(%769, %770) /* ty=Tensor[(5, 12, 11), bool] */;
  %778 = greater_equal(%775, %776) /* ty=Tensor[(5, 2, 4), bool] */;
  (%777, %778)
}

def @func_9344(%var_9342: Tensor[(3, 10, 3), bool], %var_9343: Tensor[(3, 10, 3), bool]) -> (Tensor[(3, 10, 3), bool], Tensor[(3, 10, 3), float32], Tensor[(320), bool], Tensor[(320), bool], Tensor[(3, 10, 3), int16], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) {
  @func_9340(%var_9342, %var_9343) /* ty=(Tensor[(3, 10, 3), bool], Tensor[(3, 10, 3), float32], Tensor[(320), bool], Tensor[(320), bool], Tensor[(3, 10, 3), int16], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) */
}

def @func_3463() -> (Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) {
  %783 = fn () -> (Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) {
    %779 = @func_2601() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(130), float64], Tensor[(50), float32], Tensor[(4, 8, 10), float64], Tensor[(40), float64], Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) */;
    %780 = @func_1845() /* ty=(Tensor[(5, 2, 4), float64],) */;
    %781 = %779.0;
    %782 = %780.0;
    (%781, %782)
  };
  %783() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) */
}

def @func_8590(%var_8589: Tensor[(8, 7, 4), float64]) -> (Tensor[(8, 7, 4), float64], Tensor[(14, 14, 11), float32], Tensor[(2156), float32], Tensor[(616, 2), float64]) {
  %792 = fn (%var_8573: Tensor[(8, 7, 4), float64]) -> (Tensor[(8, 7, 4), float64], Tensor[(14, 14, 11), float32], Tensor[(2156), float32], Tensor[(616, 2), float64]) {
    %784 = cast(%var_8573, dtype="float64") /* ty=Tensor[(8, 7, 4), float64] */;
    %785 = cast(meta[relay.Constant][49] /* ty=Tensor[(2156), float32] */, dtype="float32") /* ty=Tensor[(2156), float32] */;
    %786 = cast(meta[relay.Constant][50] /* ty=Tensor[(616, 2), float64] */, dtype="float64") /* ty=Tensor[(616, 2), float64] */;
    %787 = reshape(%785, newshape=[14, 14, 11]) /* ty=Tensor[(14, 14, 11), float32] */;
    %788 = reshape(%786, newshape=[1232]) /* ty=Tensor[(1232), float64] */;
    %789 = @func_8180(%787, %788) /* ty=(Tensor[(14, 14, 11), float32], Tensor[(2, 9, 3), float32], Tensor[(1232), float64], Tensor[(320), bool]) */;
    %790 = log10(%784) /* ty=Tensor[(8, 7, 4), float64] */;
    %791 = %789.0;
    (%790, %791, meta[relay.Constant][49] /* ty=Tensor[(2156), float32] */, meta[relay.Constant][50] /* ty=Tensor[(616, 2), float64] */)
  };
  %792(%var_8589) /* ty=(Tensor[(8, 7, 4), float64], Tensor[(14, 14, 11), float32], Tensor[(2156), float32], Tensor[(616, 2), float64]) */
}

def @func_6631(%var_6629: Tensor[(13, 1, 3), float64]) -> Tensor[(13, 1, 3), float64] {
  @func_6628(%var_6629) /* ty=Tensor[(13, 1, 3), float64] */
}

def @func_2419(%var_2379: Tensor[(7, 14, 5), int64], %var_2380: Tensor[(7, 14, 5), int64]) -> (Tensor[(7, 14, 5), bool], uint16, Tensor[(130), float64], Tensor[(50), float32], Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) {
  %793 = cast(%var_2380, dtype="bool") /* ty=Tensor[(7, 14, 5), bool] */;
  %794 = shape_of(%var_2379, dtype="int32") /* ty=Tensor[(3), int32] */;
  %795 = cast(%var_2379, dtype="bool") /* ty=Tensor[(7, 14, 5), bool] */;
  %796 = dyn.reshape(%793, %794, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %797 = cast(meta[relay.Constant][51] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %798 = cast(meta[relay.Constant][52] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %799 = reshape(%797, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %800 = reshape(%798, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %801 = @func_1916(%799, %800) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8], Tensor[(50), float32], uint16, Tensor[(130), float64], Tensor[(50), float32], Tensor[(5, 2, 4), float32]) */;
  %802 = @func_2333() /* ty=(Tensor[(5, 2, 4), float64],) */;
  %803 = greater(%795, %796) /* ty=Tensor[(7, 14, 5), bool] */;
  %804 = %801.4;
  %805 = @func_1988() /* ty=Tensor[(5, 2, 4), float64] */;
  %806 = %802.0;
  (%803, %804, meta[relay.Constant][51] /* ty=Tensor[(130), float64] */, meta[relay.Constant][52] /* ty=Tensor[(50), float32] */, %805, %806)
}

def @func_6112() -> (Tensor[(320), bool],) {
  @func_6110() /* ty=(Tensor[(320), bool],) */
}

def @func_7794() -> (Tensor[(5, 2, 5), float64],) {
  %807 = @func_3163() /* ty=Tensor[(5, 2, 5), float64] */;
  (%807,)
}

def @func_8163() -> Tensor[(320), uint8] {
  %808 = fn () -> Tensor[(320), uint8] {
    @func_5735() /* ty=Tensor[(320), uint8] */
  };
  %808() /* ty=Tensor[(320), uint8] */
}

def @func_8184(%var_8182: Tensor[(14, 14, 11), float32], %var_8183: Tensor[(1232), float64]) -> (Tensor[(14, 14, 11), float32], Tensor[(2, 9, 3), float32], Tensor[(1232), float64], Tensor[(320), bool]) {
  @func_8180(%var_8182, %var_8183) /* ty=(Tensor[(14, 14, 11), float32], Tensor[(2, 9, 3), float32], Tensor[(1232), float64], Tensor[(320), bool]) */
}

def @func_6000() -> (Tensor[(320), uint8], Tensor[(320), bool]) {
  %809 = @func_4730() /* ty=(Tensor[(320), uint8],) */;
  %810 = %809.0;
  %811 = @func_4418() /* ty=Tensor[(320), bool] */;
  (%810, %811)
}

def @func_4163() -> (Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) {
  %815 = fn () -> (Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) {
    %812 = @func_2865() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) */;
    %813 = @func_1988() /* ty=Tensor[(5, 2, 4), float64] */;
    %814 = %812.1;
    (%813, %814)
  };
  %815() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) */
}

def @func_4420() -> Tensor[(320), bool] {
  @func_4418() /* ty=Tensor[(320), bool] */
}

def @func_7685(%var_7682: Tensor[(5, 12, 11), int32], %var_7683: Tensor[(5, 12, 11), int32], %var_7684: Tensor[(5, 2, 4), float64]) -> (Tensor[(5, 12, 11), bool], Tensor[(5, 2, 4), bool]) {
  @func_7680(%var_7682, %var_7683, %var_7684) /* ty=(Tensor[(5, 12, 11), bool], Tensor[(5, 2, 4), bool]) */
}

def @func_6243() -> (Tensor[(4, 8, 10), float64], uint16, Tensor[(50), float32]) {
  @func_6241() /* ty=(Tensor[(4, 8, 10), float64], uint16, Tensor[(50), float32]) */
}

def @func_6645() -> (Tensor[(320), uint8],) {
  %816 = @func_3097() /* ty=Tensor[(320), uint8] */;
  (%816,)
}

def @func_7244() -> Tensor[(5, 2, 4), float64] {
  @func_7242() /* ty=Tensor[(5, 2, 4), float64] */
}

def @func_2883() -> Tensor[(4, 8, 10), float64] {
  @func_2821() /* ty=Tensor[(4, 8, 10), float64] */
}

def @func_4036() -> (Tensor[(4, 8, 10), float64], Tensor[(4, 8, 10), float64]) {
  %817 = @func_3881() /* ty=Tensor[(4, 8, 10), float64] */;
  %818 = @func_2821() /* ty=Tensor[(4, 8, 10), float64] */;
  (%817, %818)
}

def @func_2940() -> (Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64]) {
  @func_2938() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64]) */
}

def @func_3290() -> (Tensor[(320), uint8], Tensor[(5, 2, 4), float64]) {
  %819 = @func_2601() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(130), float64], Tensor[(50), float32], Tensor[(4, 8, 10), float64], Tensor[(40), float64], Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) */;
  %820 = %819.9;
  %821 = @func_3121() /* ty=Tensor[(5, 2, 4), float64] */;
  (%820, %821)
}

def @func_4235(%var_4233: Tensor[(1, 50), float32]) -> (Tensor[(5, 2, 4), float64], Tensor[(10, 5), float32], Tensor[(1, 50), float32], Tensor[(5, 2, 4), float64]) {
  @func_4232(%var_4233) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(10, 5), float32], Tensor[(1, 50), float32], Tensor[(5, 2, 4), float64]) */
}

def @func_3257(%var_3255: Tensor[(4, 8, 10), float64], %var_3256: Tensor[(130), float64]) -> (Tensor[(4, 8, 10), bool], Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(50), float32], Tensor[(130), float64], Tensor[(4, 8, 10), float32], Tensor[(5, 2, 4), float64]) {
  @func_3253(%var_3255, %var_3256) /* ty=(Tensor[(4, 8, 10), bool], Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(50), float32], Tensor[(130), float64], Tensor[(4, 8, 10), float32], Tensor[(5, 2, 4), float64]) */
}

def @func_1822(%var_1820: Tensor[(4, 8, 10), uint8], %var_1821: Tensor[(4, 8, 10), uint8]) -> Tensor[(4, 8, 10), float64] {
  @func_1818(%var_1820, %var_1821) /* ty=Tensor[(4, 8, 10), float64] */
}

def @func_10772(%var_10770: Tensor[(624), float32]) -> (Tensor[(320), uint8], Tensor[(5, 2, 4), float64], Tensor[(320), uint8], Tensor[(5, 2, 4), bool], Tensor[(660), int32], Tensor[(13, 12, 4), bool], Tensor[(13, 12, 4), float32]) {
  @func_10769(%var_10770) /* ty=(Tensor[(320), uint8], Tensor[(5, 2, 4), float64], Tensor[(320), uint8], Tensor[(5, 2, 4), bool], Tensor[(660), int32], Tensor[(13, 12, 4), bool], Tensor[(13, 12, 4), float32]) */
}

def @func_10297() -> (Tensor[(13, 10), float64], Tensor[(5, 2, 4), float64]) {
  @func_10295() /* ty=(Tensor[(13, 10), float64], Tensor[(5, 2, 4), float64]) */
}

def @func_8568() -> (Tensor[(5, 9, 1), float64],) {
  %823 = fn () -> (Tensor[(5, 9, 1), float64],) {
    %822 = @func_7698() /* ty=Tensor[(5, 9, 1), float64] */;
    (%822,)
  };
  %823() /* ty=(Tensor[(5, 9, 1), float64],) */
}

def @func_10574() -> Tensor[(4, 8, 10), float64] {
  @func_10572() /* ty=Tensor[(4, 8, 10), float64] */
}

def @func_8556() -> (Tensor[(13, 2, 9), bool],) {
  %824 = @func_8074() /* ty=(Tensor[(13, 2, 9), bool],) */;
  %825 = %824.0;
  (%825,)
}

def @func_8262(%var_8261: Tensor[(11, 12, 16), uint8]) -> (Tensor[(11, 12, 16), uint8], Tensor[(130, 1), float64]) {
  %833 = fn (%var_8205: Tensor[(11, 12, 16), uint8]) -> (Tensor[(11, 12, 16), uint8], Tensor[(130, 1), float64]) {
    %826 = cast(meta[relay.Constant][53] /* ty=Tensor[(11, 12, 16), uint8] */, dtype="uint8") /* ty=Tensor[(11, 12, 16), uint8] */;
    %827 = shape_of(%var_8205, dtype="int32") /* ty=Tensor[(3), int32] */;
    %828 = cast(%var_8205, dtype="uint8") /* ty=Tensor[(11, 12, 16), uint8] */;
    %829 = dyn.reshape(%826, %827, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %830 = @func_6835() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(1, 130), float64], Tensor[(130, 1), float64]) */;
    %831 = left_shift(%828, %829) /* ty=Tensor[(11, 12, 16), uint8] */;
    %832 = %830.2;
    (%831, %832)
  };
  %833(%var_8261) /* ty=(Tensor[(11, 12, 16), uint8], Tensor[(130, 1), float64]) */
}

def @func_2957() -> (Tensor[(4, 8, 10), float64],) {
  %834 = @func_2305() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) */;
  %835 = %834.1;
  (%835,)
}

def @func_5572(%var_5570: Tensor[(1232), float64]) -> (Tensor[(2, 9, 3), float32], Tensor[(320), uint8], Tensor[(1232), float64], Tensor[(1232), float64], Tensor[(130), float64], Tensor[(50), float32], Tensor[(320), uint8], Tensor[(320), uint8]) {
  @func_5569(%var_5570) /* ty=(Tensor[(2, 9, 3), float32], Tensor[(320), uint8], Tensor[(1232), float64], Tensor[(1232), float64], Tensor[(130), float64], Tensor[(50), float32], Tensor[(320), uint8], Tensor[(320), uint8]) */
}

def @func_4355() -> (Tensor[(5, 2, 4), float64],) {
  %836 = @func_3347() /* ty=(Tensor[(5, 2, 4), float64],) */;
  %837 = %836.0;
  %838 = cast(%837, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  %839 = erf(%838) /* ty=Tensor[(5, 2, 4), float64] */;
  (%839,)
}

def @func_4156() -> Tensor[(320), uint8] {
  @func_4154() /* ty=Tensor[(320), uint8] */
}

def @func_9913() -> (Tensor[(4, 8, 10), float64], Tensor[(50), float32], Tensor[(50), float32]) {
  %845 = fn () -> (Tensor[(4, 8, 10), float64], Tensor[(50), float32], Tensor[(50), float32]) {
    %840 = cast(meta[relay.Constant][54] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
    %841 = reshape(%840, newshape=[50]) /* ty=Tensor[(50), float32] */;
    %842 = @func_7540(%841) /* ty=(Tensor[(13, 2, 9), bool], Tensor[(10, 5), float32], Tensor[(50), float32]) */;
    %843 = @func_3881() /* ty=Tensor[(4, 8, 10), float64] */;
    %844 = %842.2;
    (%843, %844, meta[relay.Constant][54] /* ty=Tensor[(50), float32] */)
  };
  %845() /* ty=(Tensor[(4, 8, 10), float64], Tensor[(50), float32], Tensor[(50), float32]) */
}

def @func_5202(%var_5199: Tensor[(2, 15, 10), int16], %var_5200: Tensor[(2, 15, 10), int16], %var_5201: Tensor[(2, 15, 10), int16]) -> (Tensor[(2, 15, 10), bool], Tensor[(2, 15, 10), bool]) {
  @func_5197(%var_5199, %var_5200, %var_5201) /* ty=(Tensor[(2, 15, 10), bool], Tensor[(2, 15, 10), bool]) */
}

def @func_6767() -> Tensor[(5, 2, 4), float64] {
  %847 = fn () -> Tensor[(5, 2, 4), float64] {
    %846 = @func_4162() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) */;
    %846.0
  };
  %847() /* ty=Tensor[(5, 2, 4), float64] */
}

def @func_4894() -> (Tensor[(5, 2, 4), float64],) {
  %849 = fn () -> (Tensor[(5, 2, 4), float64],) {
    %848 = @func_1988() /* ty=Tensor[(5, 2, 4), float64] */;
    (%848,)
  };
  %849() /* ty=(Tensor[(5, 2, 4), float64],) */
}

def @func_7861() -> (Tensor[(320), uint8], Tensor[(13, 10), float64], Tensor[(130), float64]) {
  @func_7859() /* ty=(Tensor[(320), uint8], Tensor[(13, 10), float64], Tensor[(130), float64]) */
}

def @func_6314(%var_6310: Tensor[(4, 3, 3), int32], %var_6311: Tensor[(4, 3, 3), int32], %var_6312: Tensor[(40), float64], %var_6313: Tensor[(50), float32]) -> (Tensor[(4, 3, 3), int32], Tensor[(5, 2, 4), uint32], Tensor[(40), float64], Tensor[(130), bool], Tensor[(252), uint16], Tensor[(50), float32]) {
  @func_6308(%var_6310, %var_6311, %var_6312, %var_6313) /* ty=(Tensor[(4, 3, 3), int32], Tensor[(5, 2, 4), uint32], Tensor[(40), float64], Tensor[(130), bool], Tensor[(252), uint16], Tensor[(50), float32]) */
}

def @func_7698() -> Tensor[(5, 9, 1), float64] {
  %850 = @func_5036() /* ty=(Tensor[(5, 9, ?), bool], Tensor[(50), float32], Tensor[(1, 252), uint16], Tensor[(50), float32], Tensor[(5, 9, 1), float64], Tensor[(13, 2, 9), bool]) */;
  %850.4
}

def @func_8180(%var_8166: Tensor[(14, 14, 11), float32], %var_8170: Tensor[(1232), float64]) -> (Tensor[(14, 14, 11), float32], Tensor[(2, 9, 3), float32], Tensor[(1232), float64], Tensor[(320), bool]) {
  %851 = cast(%var_8166, dtype="float32") /* ty=Tensor[(14, 14, 11), float32] */;
  %852 = cast(%var_8170, dtype="float64") /* ty=Tensor[(1232), float64] */;
  %853 = reshape(%852, newshape=[1232]) /* ty=Tensor[(1232), float64] */;
  %854 = @func_5569(%853) /* ty=(Tensor[(2, 9, 3), float32], Tensor[(320), uint8], Tensor[(1232), float64], Tensor[(1232), float64], Tensor[(130), float64], Tensor[(50), float32], Tensor[(320), uint8], Tensor[(320), uint8]) */;
  %855 = cos(%851) /* ty=Tensor[(14, 14, 11), float32] */;
  %856 = %854.0;
  %857 = @func_4418() /* ty=Tensor[(320), bool] */;
  (%855, %856, %var_8170, %857)
}

def @func_8880(%var_8878: Tensor[(1, 50), float32], %var_8879: Tensor[(90), uint32]) -> (Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(13, 10), float64], Tensor[(1, 50), float64], Tensor[(4, 8, 10), float64], Tensor[(1, 120), uint64], Tensor[(90), uint32]) {
  %876 = fn (%var_8847: Tensor[(1, 50), float32], %var_8875: Tensor[(90), uint32]) -> (Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(13, 10), float64], Tensor[(1, 50), float64], Tensor[(4, 8, 10), float64], Tensor[(1, 120), uint64], Tensor[(90), uint32]) {
    %858 = @func_2938() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64]) */;
    %859 = cast(meta[relay.Constant][55] /* ty=Tensor[(1232), float64] */, dtype="float64") /* ty=Tensor[(1232), float64] */;
    %860 = cast(meta[relay.Constant][56] /* ty=Tensor[(13, 10), float64] */, dtype="float64") /* ty=Tensor[(13, 10), float64] */;
    %861 = cast(%var_8847, dtype="float32") /* ty=Tensor[(1, 50), float32] */;
    %862 = reshape(%859, newshape=[1232]) /* ty=Tensor[(1232), float64] */;
    %863 = reshape(%860, newshape=[130]) /* ty=Tensor[(130), float64] */;
    %864 = reshape(%861, newshape=[50]) /* ty=Tensor[(50), float32] */;
    %865 = @func_2055(%862, %863, %864) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(320), uint8], Tensor[(130), float64], Tensor[(50), float32]) */;
    %866 = cast(%var_8847, dtype="float64") /* ty=Tensor[(1, 50), float64] */;
    %867 = cast(meta[relay.Constant][57] /* ty=Tensor[(1, 120), uint64] */, dtype="uint64") /* ty=Tensor[(1, 120), uint64] */;
    %868 = cast(%var_8875, dtype="uint32") /* ty=Tensor[(90), uint32] */;
    %869 = reshape(%867, newshape=[5, 12, 2]) /* ty=Tensor[(5, 12, 2), uint64] */;
    %870 = reshape(%868, newshape=[90]) /* ty=Tensor[(90), uint32] */;
    %871 = @func_6062(%869, %870) /* ty=(Tensor[(5, 12, 2), uint64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64], Tensor[(90), uint32], Tensor[(15, 6, 3), float32]) */;
    %872 = %858.0;
    %873 = %865.1;
    %874 = sigmoid(%866) /* ty=Tensor[(1, 50), float64] */;
    %875 = %871.1;
    (%872, %873, meta[relay.Constant][55] /* ty=Tensor[(1232), float64] */, meta[relay.Constant][56] /* ty=Tensor[(13, 10), float64] */, %874, %875, meta[relay.Constant][57] /* ty=Tensor[(1, 120), uint64] */, %var_8875)
  };
  %876(%var_8878, %var_8879) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(13, 10), float64], Tensor[(1, 50), float64], Tensor[(4, 8, 10), float64], Tensor[(1, 120), uint64], Tensor[(90), uint32]) */
}

def @func_9598() -> Tensor[(4, 8, 10), float64] {
  @func_9596() /* ty=Tensor[(4, 8, 10), float64] */
}

def @func_10631(%var_10630: Tensor[(13, 10), float64]) -> (Tensor[(320), uint8], Tensor[(13, 10), float64], Tensor[(1, 130), float64], Tensor[(5, 2, 4), float64], Tensor[(50), float32], Tensor[(90), uint32]) {
  %891 = fn (%var_10611: Tensor[(13, 10), float64]) -> (Tensor[(320), uint8], Tensor[(13, 10), float64], Tensor[(1, 130), float64], Tensor[(5, 2, 4), float64], Tensor[(50), float32], Tensor[(90), uint32]) {
    %877 = @func_6645() /* ty=(Tensor[(320), uint8],) */;
    %878 = cast(%var_10611, dtype="float64") /* ty=Tensor[(13, 10), float64] */;
    %879 = reshape(%878, newshape=[130]) /* ty=Tensor[(130), float64] */;
    %880 = @func_2735(%879) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(1, 130), float64], Tensor[(50), float32], Tensor[(130), float64]) */;
    %881 = %880.1;
    %882 = cast(%881, dtype="float64") /* ty=Tensor[(1, 130), float64] */;
    %883 = cast(meta[relay.Constant][58] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
    %884 = cast(meta[relay.Constant][59] /* ty=Tensor[(90), uint32] */, dtype="uint32") /* ty=Tensor[(90), uint32] */;
    %885 = reshape(%883, newshape=[1, 50]) /* ty=Tensor[(1, 50), float32] */;
    %886 = reshape(%884, newshape=[90]) /* ty=Tensor[(90), uint32] */;
    %887 = @func_8877(%885, %886) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(13, 10), float64], Tensor[(1, 50), float64], Tensor[(4, 8, 10), float64], Tensor[(1, 120), uint64], Tensor[(90), uint32]) */;
    %888 = %877.0;
    %889 = cosh(%882) /* ty=Tensor[(1, 130), float64] */;
    %890 = %887.0;
    (%888, %var_10611, %889, %890, meta[relay.Constant][58] /* ty=Tensor[(50), float32] */, meta[relay.Constant][59] /* ty=Tensor[(90), uint32] */)
  };
  %891(%var_10630) /* ty=(Tensor[(320), uint8], Tensor[(13, 10), float64], Tensor[(1, 130), float64], Tensor[(5, 2, 4), float64], Tensor[(50), float32], Tensor[(90), uint32]) */
}

def @func_2616(%var_2614: Tensor[(50), float32], %var_2615: Tensor[(1, 130), float64]) -> (Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(50), float32], Tensor[(1, 130), float64]) {
  %901 = fn (%var_2610: Tensor[(50), float32], %var_2611: Tensor[(1, 130), float64]) -> (Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(50), float32], Tensor[(1, 130), float64]) {
    %892 = cast(%var_2610, dtype="float32") /* ty=Tensor[(50), float32] */;
    %893 = cast(%var_2611, dtype="float64") /* ty=Tensor[(1, 130), float64] */;
    %894 = cast(%var_2611, dtype="float64") /* ty=Tensor[(1, 130), float64] */;
    %895 = reshape(%892, newshape=[1, 5, 10]) /* ty=Tensor[(1, 5, 10), float32] */;
    %896 = reshape(%893, newshape=[130]) /* ty=Tensor[(130), float64] */;
    %897 = reshape(%894, newshape=[130]) /* ty=Tensor[(130), float64] */;
    %898 = @func_1451(%895, %896, %897) /* ty=(Tensor[(1, 5, 10), float32], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(10, 13, 1), float64], Tensor[(16, 7, 11), float64], Tensor[(130), bool]) */;
    %899 = @func_1988() /* ty=Tensor[(5, 2, 4), float64] */;
    %900 = %898.1;
    (%899, %900, %var_2610, %var_2611)
  };
  %901(%var_2614, %var_2615) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(50), float32], Tensor[(1, 130), float64]) */
}

def @func_2821() -> Tensor[(4, 8, 10), float64] {
  %902 = @func_2601() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(130), float64], Tensor[(50), float32], Tensor[(4, 8, 10), float64], Tensor[(40), float64], Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) */;
  %902.4
}

def @func_10681() -> (Tensor[(5, 2, 4), float64],) {
  %903 = @func_1988() /* ty=Tensor[(5, 2, 4), float64] */;
  (%903,)
}

def @func_7202() -> (Tensor[(5, 2, 4), float64],) {
  %906 = fn () -> (Tensor[(5, 2, 4), float64],) {
    %904 = @func_3462() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) */;
    %905 = %904.1;
    (%905,)
  };
  %906() /* ty=(Tensor[(5, 2, 4), float64],) */
}

def @func_4607(%var_4605: Tensor[(50), float32]) -> (Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(1232), float64], Tensor[(1, 1232), float64], Tensor[(130), float64], Tensor[(50), float32]) {
  @func_4604(%var_4605) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(1232), float64], Tensor[(1, 1232), float64], Tensor[(130), float64], Tensor[(50), float32]) */
}

def @func_5666() -> Tensor[(4, 8, 10), float64] {
  %907 = @func_2938() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64]) */;
  %907.1
}

def @func_605(%var_604: Tensor[(16, 7, 11), float64]) -> (Tensor[(16, 7, 11), float64], Tensor[(16, 7, 11), float64]) {
  %912 = fn (%var_590: Tensor[(16, 7, 11), float64]) -> (Tensor[(16, 7, 11), float64], Tensor[(16, 7, 11), float64]) {
    %908 = cast(%var_590, dtype="float64") /* ty=Tensor[(16, 7, 11), float64] */;
    %909 = cast(%var_590, dtype="float64") /* ty=Tensor[(16, 7, 11), float64] */;
    %910 = asin(%908) /* ty=Tensor[(16, 7, 11), float64] */;
    %911 = log10(%909) /* ty=Tensor[(16, 7, 11), float64] */;
    (%910, %911)
  };
  %912(%var_604) /* ty=(Tensor[(16, 7, 11), float64], Tensor[(16, 7, 11), float64]) */
}

def @func_7889(%var_7887: Tensor[(13, 11, 5), float32]) -> Tensor[(13, 11, 5), float32] {
  @func_7886(%var_7887) /* ty=Tensor[(13, 11, 5), float32] */
}

def @func_4197(%var_4186: Tensor[(156), float32]) -> (Tensor[(5, 2, 4), float64], Tensor[(130), float64], Tensor[(156), float32], Tensor[(26, 5), float64], Tensor[(50), float32], Tensor[(320), uint8]) {
  %913 = @func_2938() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64]) */;
  %914 = cast(%var_4186, dtype="float32") /* ty=Tensor[(156), float32] */;
  %915 = cast(meta[relay.Constant][60] /* ty=Tensor[(26, 5), float64] */, dtype="float64") /* ty=Tensor[(26, 5), float64] */;
  %916 = cast(meta[relay.Constant][61] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %917 = reshape(%914, newshape=[4, 3, 13]) /* ty=Tensor[(4, 3, 13), float32] */;
  %918 = reshape(%915, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %919 = reshape(%916, newshape=[1, 50]) /* ty=Tensor[(1, 50), float32] */;
  %920 = @func_3759(%917, %918, %919) /* ty=(Tensor[(4, 3, 13), float32], Tensor[(1232), float64], Tensor[(130), float64], Tensor[(1, 50), float32], Tensor[(5, 2, 4), float64]) */;
  %921 = @func_3801() /* ty=(Tensor[(320), uint8],) */;
  %922 = %913.0;
  %923 = %920.2;
  %924 = %921.0;
  (%922, %923, %var_4186, meta[relay.Constant][60] /* ty=Tensor[(26, 5), float64] */, meta[relay.Constant][61] /* ty=Tensor[(50), float32] */, %924)
}

def @func_9596() -> Tensor[(4, 8, 10), float64] {
  %925 = @func_4902() /* ty=(Tensor[(4, 8, 10), float64],) */;
  %925.0
}

def @func_4357() -> (Tensor[(5, 2, 4), float64],) {
  @func_4355() /* ty=(Tensor[(5, 2, 4), float64],) */
}

def @func_7242() -> Tensor[(5, 2, 4), float64] {
  @func_1772() /* ty=Tensor[(5, 2, 4), float64] */
}

def @func_6065(%var_6063: Tensor[(5, 12, 2), uint64], %var_6064: Tensor[(90), uint32]) -> (Tensor[(5, 12, 2), uint64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64], Tensor[(90), uint32], Tensor[(15, 6, 3), float32]) {
  %940 = fn (%var_6013: Tensor[(5, 12, 2), uint64], %var_6039: Tensor[(90), uint32]) -> (Tensor[(5, 12, 2), uint64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64], Tensor[(90), uint32], Tensor[(15, 6, 3), float32]) {
    %926 = cast(meta[relay.Constant][62] /* ty=Tensor[(5, 12, 2), uint64] */, dtype="uint64") /* ty=Tensor[(5, 12, 2), uint64] */;
    %927 = shape_of(%var_6013, dtype="int32") /* ty=Tensor[(3), int32] */;
    %928 = cast(%var_6013, dtype="uint64") /* ty=Tensor[(5, 12, 2), uint64] */;
    %929 = dyn.reshape(%926, %927, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %930 = @func_2865() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) */;
    %931 = cast(%var_6039, dtype="uint32") /* ty=Tensor[(90), uint32] */;
    %932 = reshape(%931, newshape=[15, 6, 1]) /* ty=Tensor[(15, 6, 1), uint32] */;
    %933 = @func_4719(%932) /* ty=(Tensor[(15, 6, 3), uint32], Tensor[(5, 2, 4), float64]) */;
    %934 = %933.0;
    %935 = cast(%934, dtype="float32") /* ty=Tensor[(15, 6, 3), float32] */;
    %936 = minimum(%928, %929) /* ty=Tensor[(5, 12, 2), uint64] */;
    %937 = %930.1;
    %938 = @func_3981() /* ty=Tensor[(5, 2, 4), float64] */;
    %939 = sigmoid(%935) /* ty=Tensor[(15, 6, 3), float32] */;
    (%936, %937, %938, %var_6039, %939)
  };
  %940(%var_6063, %var_6064) /* ty=(Tensor[(5, 12, 2), uint64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64], Tensor[(90), uint32], Tensor[(15, 6, 3), float32]) */
}

def @func_5197(%var_5184: Tensor[(2, 15, 10), int16], %var_5185: Tensor[(2, 15, 10), int16], %var_5190: Tensor[(2, 15, 10), int16]) -> (Tensor[(2, 15, 10), bool], Tensor[(2, 15, 10), bool]) {
  %941 = cast(%var_5185, dtype="bool") /* ty=Tensor[(2, 15, 10), bool] */;
  %942 = shape_of(%var_5184, dtype="int32") /* ty=Tensor[(3), int32] */;
  %943 = cast(%var_5184, dtype="bool") /* ty=Tensor[(2, 15, 10), bool] */;
  %944 = dyn.reshape(%941, %942, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %945 = cast(%var_5190, dtype="bool") /* ty=Tensor[(2, 15, 10), bool] */;
  %946 = shape_of(%var_5185, dtype="int32") /* ty=Tensor[(3), int32] */;
  %947 = cast(%var_5185, dtype="bool") /* ty=Tensor[(2, 15, 10), bool] */;
  %948 = dyn.reshape(%945, %946, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %949 = equal(%943, %944) /* ty=Tensor[(2, 15, 10), bool] */;
  %950 = less_equal(%947, %948) /* ty=Tensor[(2, 15, 10), bool] */;
  (%949, %950)
}

def @func_6391(%var_6374: Tensor[(11, 1, 6), uint64], %var_6375: Tensor[(11, 12, 6), uint64]) -> (Tensor[(11, 12, 6), uint64], Tensor[(15, 6, 3), float32], Tensor[(120), uint64], Tensor[(45, 2), uint32]) {
  %951 = cast(%var_6374, dtype="uint64") /* ty=Tensor[(11, 1, 6), uint64] */;
  %952 = cast(%var_6375, dtype="uint64") /* ty=Tensor[(11, 12, 6), uint64] */;
  %953 = cast(meta[relay.Constant][63] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %954 = cast(meta[relay.Constant][64] /* ty=Tensor[(45, 2), uint32] */, dtype="uint32") /* ty=Tensor[(45, 2), uint32] */;
  %955 = reshape(%953, newshape=[5, 12, 2]) /* ty=Tensor[(5, 12, 2), uint64] */;
  %956 = reshape(%954, newshape=[90]) /* ty=Tensor[(90), uint32] */;
  %957 = @func_6062(%955, %956) /* ty=(Tensor[(5, 12, 2), uint64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64], Tensor[(90), uint32], Tensor[(15, 6, 3), float32]) */;
  %958 = bitwise_and(%951, %952) /* ty=Tensor[(11, 12, 6), uint64] */;
  %959 = %957.4;
  (%958, %959, meta[relay.Constant][63] /* ty=Tensor[(120), uint64] */, meta[relay.Constant][64] /* ty=Tensor[(45, 2), uint32] */)
}

def @func_2374(%var_2373: Tensor[(5, 2, 4), float64]) -> Tensor[(5, 2, 4), float64] {
  %966 = fn (%var_2354: Tensor[(5, 2, 4), float64]) -> Tensor[(5, 2, 4), float64] {
    %960 = @func_2333() /* ty=(Tensor[(5, 2, 4), float64],) */;
    %961 = %960.0;
    %962 = cast(%var_2354, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
    %963 = shape_of(%961, dtype="int32") /* ty=Tensor[(3), int32] */;
    %964 = cast(%961, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
    %965 = dyn.reshape(%962, %963, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_divide(%964, %965) /* ty=Tensor[(5, 2, 4), float64] */
  };
  %966(%var_2373) /* ty=Tensor[(5, 2, 4), float64] */
}

def @func_1741(%var_1738: uint16, %var_1739: Tensor[(130), float64], %var_1740: Tensor[(50), float32]) -> (Tensor[(13, 4, 1), bool], Tensor[(10, 13, 1), float64], Tensor[(130), float64], Tensor[(10, 13, 1), float64], Tensor[(1232), float64], Tensor[(50), float32], Tensor[(16, 7, 11), float64]) {
  @func_1736(%var_1738, %var_1739, %var_1740) /* ty=(Tensor[(13, 4, 1), bool], Tensor[(10, 13, 1), float64], Tensor[(130), float64], Tensor[(10, 13, 1), float64], Tensor[(1232), float64], Tensor[(50), float32], Tensor[(16, 7, 11), float64]) */
}

def @func_6864() -> (Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) {
  %971 = fn () -> (Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) {
    %967 = @func_3462() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) */;
    %968 = @func_2938() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), float64]) */;
    %969 = %967.1;
    %970 = %968.2;
    (%969, %970)
  };
  %971() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) */
}

def @func_10153(%var_10151: Tensor[(15, 9, 9), float64], %var_10152: Tensor[(15, 9, 9), float64]) -> Tensor[(15, 9, 9), float32] {
  @func_10149(%var_10151, %var_10152) /* ty=Tensor[(15, 9, 9), float32] */
}

def @func_2738(%var_2736: Tensor[(130), float64]) -> (Tensor[(5, 2, 4), float64], Tensor[(1, 130), float64], Tensor[(50), float32], Tensor[(130), float64]) {
  @func_2735(%var_2736) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(1, 130), float64], Tensor[(50), float32], Tensor[(130), float64]) */
}

def @func_6308(%var_6276: Tensor[(4, 3, 3), int32], %var_6277: Tensor[(4, 3, 3), int32], %var_6299: Tensor[(40), float64], %var_6306: Tensor[(50), float32]) -> (Tensor[(4, 3, 3), int32], Tensor[(5, 2, 4), uint32], Tensor[(40), float64], Tensor[(130), bool], Tensor[(252), uint16], Tensor[(50), float32]) {
  %972 = cast(%var_6277, dtype="int32") /* ty=Tensor[(4, 3, 3), int32] */;
  %973 = shape_of(%var_6276, dtype="int32") /* ty=Tensor[(3), int32] */;
  %974 = cast(%var_6276, dtype="int32") /* ty=Tensor[(4, 3, 3), int32] */;
  %975 = dyn.reshape(%972, %973, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %976 = cast(%var_6299, dtype="float64") /* ty=Tensor[(40), float64] */;
  %977 = reshape(%976, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), float64] */;
  %978 = @func_2515(%977) /* ty=(Tensor[(5, 2, 4), uint32],) */;
  %979 = cast(meta[relay.Constant][65] /* ty=Tensor[(252), uint16] */, dtype="uint16") /* ty=Tensor[(252), uint16] */;
  %980 = cast(meta[relay.Constant][65] /* ty=Tensor[(252), uint16] */, dtype="uint16") /* ty=Tensor[(252), uint16] */;
  %981 = cast(%var_6306, dtype="float32") /* ty=Tensor[(50), float32] */;
  %982 = reshape(%979, newshape=[7, 3, 12]) /* ty=Tensor[(7, 3, 12), uint16] */;
  %983 = reshape(%980, newshape=[7, 3, 12]) /* ty=Tensor[(7, 3, 12), uint16] */;
  %984 = reshape(%981, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %985 = @func_2249(%982, %983, %984) /* ty=(Tensor[(7, 3, 12), bool], Tensor[(4, 8, 10), float64], Tensor[(4, 80), uint8], Tensor[(5, 2, 4), float64], Tensor[(130), bool], Tensor[(50), float32], Tensor[(1, 130), float64]) */;
  %986 = bitwise_and(%974, %975) /* ty=Tensor[(4, 3, 3), int32] */;
  %987 = %978.0;
  %988 = %985.4;
  (%986, %987, %var_6299, %988, meta[relay.Constant][65] /* ty=Tensor[(252), uint16] */, %var_6306)
}

def @func_2785() -> (Tensor[(320), uint8],) {
  @func_2783() /* ty=(Tensor[(320), uint8],) */
}

def @func_5736() -> Tensor[(320), uint8] {
  %990 = fn () -> Tensor[(320), uint8] {
    %989 = @func_3801() /* ty=(Tensor[(320), uint8],) */;
    %989.0
  };
  %990() /* ty=Tensor[(320), uint8] */
}

def @func_4801() -> Tensor[(4, 8, 10), float64] {
  %992 = fn () -> Tensor[(4, 8, 10), float64] {
    %991 = @func_2865() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) */;
    %991.1
  };
  %992() /* ty=Tensor[(4, 8, 10), float64] */
}

def @func_5126() -> (Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(5, 2, 4), uint32], Tensor[(320), uint8]) {
  %993 = @func_3462() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) */;
  %994 = @func_4162() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) */;
  %995 = @func_3981() /* ty=Tensor[(5, 2, 4), float64] */;
  %996 = cast(%995, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  %997 = reshape(%996, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), float64] */;
  %998 = @func_2515(%997) /* ty=(Tensor[(5, 2, 4), uint32],) */;
  %999 = %993.0;
  %1000 = %994.1;
  %1001 = %998.0;
  %1002 = @func_4746() /* ty=Tensor[(320), uint8] */;
  (%995, %999, %1000, %1001, %1002)
}

def @func_3866(%var_3864: Tensor[(5, 2, 4), float64]) -> (Tensor[(5, 2, 4), float32], Tensor[(320), uint8]) {
  @func_3863(%var_3864) /* ty=(Tensor[(5, 2, 4), float32], Tensor[(320), uint8]) */
}

def @func_3253(%var_3175: Tensor[(4, 8, 10), float64], %var_3205: Tensor[(130), float64]) -> (Tensor[(4, 8, 10), bool], Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(50), float32], Tensor[(130), float64], Tensor[(4, 8, 10), float32], Tensor[(5, 2, 4), float64]) {
  %1003 = @func_2865() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) */;
  %1004 = %1003.1;
  %1005 = cast(%var_3175, dtype="bool") /* ty=Tensor[(4, 8, 10), bool] */;
  %1006 = shape_of(%1004, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1007 = cast(%1004, dtype="bool") /* ty=Tensor[(4, 8, 10), bool] */;
  %1008 = dyn.reshape(%1005, %1006, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1009 = @func_2333() /* ty=(Tensor[(5, 2, 4), float64],) */;
  %1010 = cast(meta[relay.Constant][66] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %1011 = cast(%var_3205, dtype="float64") /* ty=Tensor[(130), float64] */;
  %1012 = cast(%var_3205, dtype="float64") /* ty=Tensor[(130), float64] */;
  %1013 = reshape(%1010, newshape=[1, 5, 10]) /* ty=Tensor[(1, 5, 10), float32] */;
  %1014 = reshape(%1011, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %1015 = reshape(%1012, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %1016 = @func_1451(%1013, %1014, %1015) /* ty=(Tensor[(1, 5, 10), float32], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(10, 13, 1), float64], Tensor[(16, 7, 11), float64], Tensor[(130), bool]) */;
  %1017 = cast(%var_3175, dtype="float32") /* ty=Tensor[(4, 8, 10), float32] */;
  %1018 = acos(%1017) /* ty=Tensor[(4, 8, 10), float32] */;
  %1019 = cast(%1018, dtype="float32") /* ty=Tensor[(4, 8, 10), float32] */;
  %1020 = %1009.0;
  %1021 = cast(%1020, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  %1022 = reshape(%1021, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), float64] */;
  %1023 = less(%1007, %1008) /* ty=Tensor[(4, 8, 10), bool] */;
  %1024 = %1016.4;
  %1025 = cosh(%1019) /* ty=Tensor[(4, 8, 10), float32] */;
  %1026 = @func_2372(%1022) /* ty=Tensor[(5, 2, 4), float64] */;
  (%1023, %1020, %1024, meta[relay.Constant][66] /* ty=Tensor[(50), float32] */, %var_3205, %1025, %1026)
}

def @func_5178() -> Tensor[(5, 2, 4), float64] {
  %1027 = fn () -> Tensor[(5, 2, 4), float64] {
    @func_1988() /* ty=Tensor[(5, 2, 4), float64] */
  };
  %1027() /* ty=Tensor[(5, 2, 4), float64] */
}

def @func_6460(%var_6439: Tensor[(4, 8, 10), float64]) -> (Tensor[(5, 2, 4), float64], Tensor[(320), uint8], Tensor[(4, 8, 10), int32], Tensor[(5, 2, 4), float64]) {
  %1028 = @func_2883() /* ty=Tensor[(4, 8, 10), float64] */;
  %1029 = cast(%var_6439, dtype="int32") /* ty=Tensor[(4, 8, 10), int32] */;
  %1030 = shape_of(%1028, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1031 = cast(%1028, dtype="int32") /* ty=Tensor[(4, 8, 10), int32] */;
  %1032 = dyn.reshape(%1029, %1030, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1033 = @func_2333() /* ty=(Tensor[(5, 2, 4), float64],) */;
  %1034 = @func_5177() /* ty=Tensor[(5, 2, 4), float64] */;
  %1035 = @func_4774() /* ty=Tensor[(320), uint8] */;
  %1036 = maximum(%1031, %1032) /* ty=Tensor[(4, 8, 10), int32] */;
  %1037 = %1033.0;
  (%1034, %1035, %1036, %1037)
}

def @func_4200(%var_4198: Tensor[(156), float32]) -> (Tensor[(5, 2, 4), float64], Tensor[(130), float64], Tensor[(156), float32], Tensor[(26, 5), float64], Tensor[(50), float32], Tensor[(320), uint8]) {
  @func_4197(%var_4198) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(130), float64], Tensor[(156), float32], Tensor[(26, 5), float64], Tensor[(50), float32], Tensor[(320), uint8]) */
}

def @func_1916(%var_1905: Tensor[(130), float64], %var_1906: Tensor[(50), float32]) -> (Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8], Tensor[(50), float32], uint16, Tensor[(130), float64], Tensor[(50), float32], Tensor[(5, 2, 4), float32]) {
  %1038 = cast(meta[relay.Constant][67] /* ty=Tensor[(320), uint8] */, dtype="uint8") /* ty=Tensor[(320), uint8] */;
  %1039 = cast(meta[relay.Constant][67] /* ty=Tensor[(320), uint8] */, dtype="uint8") /* ty=Tensor[(320), uint8] */;
  %1040 = reshape(%1038, newshape=[4, 8, 10]) /* ty=Tensor[(4, 8, 10), uint8] */;
  %1041 = reshape(%1039, newshape=[4, 8, 10]) /* ty=Tensor[(4, 8, 10), uint8] */;
  %1042 = cast(meta[relay.Constant][68] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %1043 = cast(%var_1905, dtype="float64") /* ty=Tensor[(130), float64] */;
  %1044 = cast(%var_1906, dtype="float32") /* ty=Tensor[(50), float32] */;
  %1045 = reshape(%1042, newshape=[]) /* ty=uint16 */;
  %1046 = reshape(%1043, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %1047 = reshape(%1044, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %1048 = @func_1736(%1045, %1046, %1047) /* ty=(Tensor[(13, 4, 1), bool], Tensor[(10, 13, 1), float64], Tensor[(130), float64], Tensor[(10, 13, 1), float64], Tensor[(1232), float64], Tensor[(50), float32], Tensor[(16, 7, 11), float64]) */;
  %1049 = @func_1772() /* ty=Tensor[(5, 2, 4), float64] */;
  %1050 = cast(%1049, dtype="float32") /* ty=Tensor[(5, 2, 4), float32] */;
  %1051 = log2(%1050) /* ty=Tensor[(5, 2, 4), float32] */;
  %1052 = cast(%1051, dtype="float32") /* ty=Tensor[(5, 2, 4), float32] */;
  %1053 = @func_1772() /* ty=Tensor[(5, 2, 4), float64] */;
  %1054 = @func_1818(%1040, %1041) /* ty=Tensor[(4, 8, 10), float64] */;
  %1055 = %1048.5;
  %1056 = sin(%1052) /* ty=Tensor[(5, 2, 4), float32] */;
  (%1053, %1054, meta[relay.Constant][67] /* ty=Tensor[(320), uint8] */, %1055, meta[relay.Constant][68] /* ty=uint16 */, %var_1905, %var_1906, %1056)
}

def @func_6561(%var_6560: uint16) -> (Tensor[(320), uint8], Tensor[(320), uint8], Tensor[(4, 8, 10), float64], Tensor[(50), float32], Tensor[(320), uint8], Tensor[(130), uint64], Tensor[(16, 7, 11), float32]) {
  %1076 = fn (%var_6514: uint16) -> (Tensor[(320), uint8], Tensor[(320), uint8], Tensor[(4, 8, 10), float64], Tensor[(50), float32], Tensor[(320), uint8], Tensor[(130), uint64], Tensor[(16, 7, 11), float32]) {
    %1057 = @func_4730() /* ty=(Tensor[(320), uint8],) */;
    %1058 = @func_2783() /* ty=(Tensor[(320), uint8],) */;
    %1059 = cast(meta[relay.Constant][70] /* ty=Tensor[(130), float64] */, dtype="uint64") /* ty=Tensor[(130), uint64] */;
    %1060 = cast(%var_6514, dtype="uint64") /* ty=uint64 */;
    %1061 = cast(%var_6514, dtype="uint16") /* ty=uint16 */;
    %1062 = cast(meta[relay.Constant][70] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
    %1063 = cast(meta[relay.Constant][69] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
    %1064 = reshape(%1061, newshape=[]) /* ty=uint16 */;
    %1065 = reshape(%1062, newshape=[130]) /* ty=Tensor[(130), float64] */;
    %1066 = reshape(%1063, newshape=[50]) /* ty=Tensor[(50), float32] */;
    %1067 = @func_1736(%1064, %1065, %1066) /* ty=(Tensor[(13, 4, 1), bool], Tensor[(10, 13, 1), float64], Tensor[(130), float64], Tensor[(10, 13, 1), float64], Tensor[(1232), float64], Tensor[(50), float32], Tensor[(16, 7, 11), float64]) */;
    %1068 = %1067.6;
    %1069 = cast(%1068, dtype="float32") /* ty=Tensor[(16, 7, 11), float32] */;
    %1070 = %1057.0;
    %1071 = %1058.0;
    %1072 = @func_3881() /* ty=Tensor[(4, 8, 10), float64] */;
    %1073 = @func_4746() /* ty=Tensor[(320), uint8] */;
    %1074 = multiply(%1059, %1060) /* ty=Tensor[(130), uint64] */;
    %1075 = atan(%1069) /* ty=Tensor[(16, 7, 11), float32] */;
    (%1070, %1071, %1072, meta[relay.Constant][69] /* ty=Tensor[(50), float32] */, %1073, %1074, %1075)
  };
  %1076(%var_6560) /* ty=(Tensor[(320), uint8], Tensor[(320), uint8], Tensor[(4, 8, 10), float64], Tensor[(50), float32], Tensor[(320), uint8], Tensor[(130), uint64], Tensor[(16, 7, 11), float32]) */
}

def @func_7700() -> Tensor[(5, 9, 1), float64] {
  @func_7698() /* ty=Tensor[(5, 9, 1), float64] */
}

def @func_8484(%var_8447: Tensor[(50), float32]) -> (Tensor[(130), float64], Tensor[(130), bool], Tensor[(50), float32], Tensor[(4, 8, 10), float64]) {
  %1077 = @func_7859() /* ty=(Tensor[(320), uint8], Tensor[(13, 10), float64], Tensor[(130), float64]) */;
  %1078 = cast(%var_8447, dtype="float32") /* ty=Tensor[(50), float32] */;
  %1079 = %1077.2;
  %1080 = cast(%1079, dtype="float64") /* ty=Tensor[(130), float64] */;
  %1081 = cast(%1079, dtype="float64") /* ty=Tensor[(130), float64] */;
  %1082 = reshape(%1078, newshape=[1, 5, 10]) /* ty=Tensor[(1, 5, 10), float32] */;
  %1083 = reshape(%1080, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %1084 = reshape(%1081, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %1085 = @func_1451(%1082, %1083, %1084) /* ty=(Tensor[(1, 5, 10), float32], Tensor[(16, 7, 11), float64], Tensor[(1232), float64], Tensor[(10, 13, 1), float64], Tensor[(16, 7, 11), float64], Tensor[(130), bool]) */;
  %1086 = %1085.5;
  %1087 = @func_2883() /* ty=Tensor[(4, 8, 10), float64] */;
  (%1079, %1086, %var_8447, %1087)
}

def @func_8076() -> (Tensor[(13, 2, 9), bool],) {
  @func_8074() /* ty=(Tensor[(13, 2, 9), bool],) */
}

def @func_8060(%var_8057: Tensor[(715), float32]) -> (Tensor[(320), uint8], Tensor[(13, 11, 5), float32], Tensor[(715), float32]) {
  %1088 = cast(%var_8057, dtype="float32") /* ty=Tensor[(715), float32] */;
  %1089 = reshape(%1088, newshape=[13, 11, 5]) /* ty=Tensor[(13, 11, 5), float32] */;
  %1090 = @func_7408() /* ty=Tensor[(320), uint8] */;
  %1091 = @func_7886(%1089) /* ty=Tensor[(13, 11, 5), float32] */;
  (%1090, %1091, %var_8057)
}

def @func_4902() -> (Tensor[(4, 8, 10), float64],) {
  %1092 = @func_4162() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) */;
  %1093 = %1092.1;
  (%1093,)
}

def @func_2254(%var_2251: Tensor[(7, 3, 12), uint16], %var_2252: Tensor[(7, 3, 12), uint16], %var_2253: Tensor[(50), float32]) -> (Tensor[(7, 3, 12), bool], Tensor[(4, 8, 10), float64], Tensor[(4, 80), uint8], Tensor[(5, 2, 4), float64], Tensor[(130), bool], Tensor[(50), float32], Tensor[(1, 130), float64]) {
  @func_2249(%var_2251, %var_2252, %var_2253) /* ty=(Tensor[(7, 3, 12), bool], Tensor[(4, 8, 10), float64], Tensor[(4, 80), uint8], Tensor[(5, 2, 4), float64], Tensor[(130), bool], Tensor[(50), float32], Tensor[(1, 130), float64]) */
}

def @func_2207(%var_2205: Tensor[(10, 5), float32]) -> (Tensor[(5, 2, 4), float64], Tensor[(130), float64], uint16, Tensor[(130), float64], Tensor[(10, 5), float32], Tensor[(1232), float64], Tensor[(13, 4, 1), bool], Tensor[(10, 13, 1), float64], Tensor[(320), uint8]) {
  @func_2204(%var_2205) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(130), float64], uint16, Tensor[(130), float64], Tensor[(10, 5), float32], Tensor[(1232), float64], Tensor[(13, 4, 1), bool], Tensor[(10, 13, 1), float64], Tensor[(320), uint8]) */
}

def @func_10024(%var_10023: uint16) -> (uint16, Tensor[(10, 2, 10), int8], Tensor[(13, 2, 9), float64]) {
  %1111 = fn (%var_9999: uint16) -> (uint16, Tensor[(10, 2, 10), int8], Tensor[(13, 2, 9), float64]) {
    %1094 = cast(%var_9999, dtype="uint16") /* ty=uint16 */;
    %1095 = cast(meta[relay.Constant][71] /* ty=Tensor[(5, 40), uint16] */, dtype="uint16") /* ty=Tensor[(5, 40), uint16] */;
    %1096 = reshape(%1094, newshape=[]) /* ty=uint16 */;
    %1097 = reshape(%1095, newshape=[10, 2, 10]) /* ty=Tensor[(10, 2, 10), uint16] */;
    %1098 = @func_4494(%1096, %1097) /* ty=(Tensor[(10, 2, 10), uint16], Tensor[(10, 2, 10), float64]) */;
    %1099 = %1098.1;
    %1100 = cast(meta[relay.Constant][71] /* ty=Tensor[(5, 40), uint16] */, dtype="int8") /* ty=Tensor[(5, 40), int8] */;
    %1101 = shape_of(%1099, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1102 = cast(%1099, dtype="int8") /* ty=Tensor[(10, 2, 10), int8] */;
    %1103 = dyn.reshape(%1100, %1101, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %1104 = @func_8074() /* ty=(Tensor[(13, 2, 9), bool],) */;
    %1105 = %1104.0;
    %1106 = cast(%1105, dtype="float32") /* ty=Tensor[(13, 2, 9), float32] */;
    %1107 = sigmoid(%1106) /* ty=Tensor[(13, 2, 9), float32] */;
    %1108 = cast(%1107, dtype="float64") /* ty=Tensor[(13, 2, 9), float64] */;
    %1109 = left_shift(%1102, %1103) /* ty=Tensor[(10, 2, 10), int8] */;
    %1110 = sqrt(%1108) /* ty=Tensor[(13, 2, 9), float64] */;
    (%var_9999, %1109, %1110)
  };
  %1111(%var_10023) /* ty=(uint16, Tensor[(10, 2, 10), int8], Tensor[(13, 2, 9), float64]) */
}

def @func_6745() -> (Tensor[(320), uint8], Tensor[(320), uint8], Tensor[(320), uint8], Tensor[(320), uint8], Tensor[(5, 2, 4), float64], Tensor[(320), uint8]) {
  %1112 = @func_3801() /* ty=(Tensor[(320), uint8],) */;
  %1113 = @func_3801() /* ty=(Tensor[(320), uint8],) */;
  %1114 = @func_4774() /* ty=Tensor[(320), uint8] */;
  %1115 = @func_3097() /* ty=Tensor[(320), uint8] */;
  %1116 = %1112.0;
  %1117 = @func_4774() /* ty=Tensor[(320), uint8] */;
  %1118 = @func_3981() /* ty=Tensor[(5, 2, 4), float64] */;
  %1119 = %1113.0;
  (%1114, %1115, %1116, %1117, %1118, %1119)
}

def @func_3348() -> (Tensor[(5, 2, 4), float64],) {
  %1122 = fn () -> (Tensor[(5, 2, 4), float64],) {
    %1120 = @func_2865() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64]) */;
    %1121 = %1120.0;
    (%1121,)
  };
  %1122() /* ty=(Tensor[(5, 2, 4), float64],) */
}

def @func_1774() -> Tensor[(5, 2, 4), float64] {
  @func_1772() /* ty=Tensor[(5, 2, 4), float64] */
}

def @func_8318() -> (Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) {
  %1129 = fn () -> (Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) {
    %1123 = @func_7371() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(320), uint8], Tensor[(5, 2, 4), float64]) */;
    %1124 = @func_6645() /* ty=(Tensor[(320), uint8],) */;
    %1125 = @func_7242() /* ty=Tensor[(5, 2, 4), float64] */;
    %1126 = %1123.0;
    %1127 = @func_5666() /* ty=Tensor[(4, 8, 10), float64] */;
    %1128 = %1124.0;
    (%1125, %1126, %1127, %1128)
  };
  %1129() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) */
}

def @func_4904() -> (Tensor[(4, 8, 10), float64],) {
  @func_4902() /* ty=(Tensor[(4, 8, 10), float64],) */
}

def @func_6463(%var_6461: Tensor[(4, 8, 10), float64]) -> (Tensor[(5, 2, 4), float64], Tensor[(320), uint8], Tensor[(4, 8, 10), int32], Tensor[(5, 2, 4), float64]) {
  @func_6460(%var_6461) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(320), uint8], Tensor[(4, 8, 10), int32], Tensor[(5, 2, 4), float64]) */
}

def @func_7075() -> Tensor[(5, 2, 4), float64] {
  %1130 = fn () -> Tensor[(5, 2, 4), float64] {
    @func_6766() /* ty=Tensor[(5, 2, 4), float64] */
  };
  %1130() /* ty=Tensor[(5, 2, 4), float64] */
}

def @func_3164() -> Tensor[(5, 2, 5), float64] {
  %1132 = fn () -> Tensor[(5, 2, 5), float64] {
    %1131 = cast(meta[relay.Constant][72] /* ty=Tensor[(5, 2, 5), float64] */, dtype="float64") /* ty=Tensor[(5, 2, 5), float64] */;
    log2(%1131) /* ty=Tensor[(5, 2, 5), float64] */
  };
  %1132() /* ty=Tensor[(5, 2, 5), float64] */
}

def @func_3982() -> Tensor[(5, 2, 4), float64] {
  %1134 = fn () -> Tensor[(5, 2, 4), float64] {
    %1133 = @func_3290() /* ty=(Tensor[(320), uint8], Tensor[(5, 2, 4), float64]) */;
    %1133.1
  };
  %1134() /* ty=Tensor[(5, 2, 4), float64] */
}

def @func_9471() -> (Tensor[(5, 2, 4), float64],) {
  %1137 = fn () -> (Tensor[(5, 2, 4), float64],) {
    %1135 = @func_8649() /* ty=(Tensor[(5, 2, 4), float64],) */;
    %1136 = %1135.0;
    (%1136,)
  };
  %1137() /* ty=(Tensor[(5, 2, 4), float64],) */
}

def @func_5668() -> Tensor[(4, 8, 10), float64] {
  @func_5666() /* ty=Tensor[(4, 8, 10), float64] */
}

def @func_2423(%var_2421: Tensor[(7, 14, 5), int64], %var_2422: Tensor[(7, 14, 5), int64]) -> (Tensor[(7, 14, 5), bool], uint16, Tensor[(130), float64], Tensor[(50), float32], Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) {
  @func_2419(%var_2421, %var_2422) /* ty=(Tensor[(7, 14, 5), bool], uint16, Tensor[(130), float64], Tensor[(50), float32], Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) */
}

def @func_10808() -> (Tensor[(320), uint8],) {
  %1140 = fn () -> (Tensor[(320), uint8],) {
    %1138 = @func_9268() /* ty=(Tensor[(320), uint8],) */;
    %1139 = %1138.0;
    (%1139,)
  };
  %1140() /* ty=(Tensor[(320), uint8],) */
}

def @func_4294() -> (Tensor[(13, 1, 4), float32],) {
  %1143 = fn () -> (Tensor[(13, 1, 4), float32],) {
    %1141 = cast(meta[relay.Constant][73] /* ty=Tensor[(13, 1, 4), float32] */, dtype="float32") /* ty=Tensor[(13, 1, 4), float32] */;
    %1142 = atanh(%1141) /* ty=Tensor[(13, 1, 4), float32] */;
    (%1142,)
  };
  %1143() /* ty=(Tensor[(13, 1, 4), float32],) */
}

def @func_8739(%var_8736: Tensor[(13, 10), float64], %var_8737: Tensor[(5, 10), float32], %var_8738: Tensor[(5, 2, 4), float64]) -> (Tensor[(320), uint8], Tensor[(13, 10), float64], Tensor[(5, 10), float32], Tensor[(5, 2, 4), bool]) {
  %1156 = fn (%var_8693: Tensor[(13, 10), float64], %var_8694: Tensor[(5, 10), float32], %var_8700: Tensor[(5, 2, 4), float64]) -> (Tensor[(320), uint8], Tensor[(13, 10), float64], Tensor[(5, 10), float32], Tensor[(5, 2, 4), bool]) {
    %1144 = cast(%var_8693, dtype="float64") /* ty=Tensor[(13, 10), float64] */;
    %1145 = cast(%var_8694, dtype="float32") /* ty=Tensor[(5, 10), float32] */;
    %1146 = reshape(%1144, newshape=[130]) /* ty=Tensor[(130), float64] */;
    %1147 = reshape(%1145, newshape=[50]) /* ty=Tensor[(50), float32] */;
    %1148 = @func_1916(%1146, %1147) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8], Tensor[(50), float32], uint16, Tensor[(130), float64], Tensor[(50), float32], Tensor[(5, 2, 4), float32]) */;
    %1149 = %1148.0;
    %1150 = cast(%var_8700, dtype="bool") /* ty=Tensor[(5, 2, 4), bool] */;
    %1151 = shape_of(%1149, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1152 = cast(%1149, dtype="bool") /* ty=Tensor[(5, 2, 4), bool] */;
    %1153 = dyn.reshape(%1150, %1151, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1154 = @func_4774() /* ty=Tensor[(320), uint8] */;
    %1155 = less(%1152, %1153) /* ty=Tensor[(5, 2, 4), bool] */;
    (%1154, %var_8693, %var_8694, %1155)
  };
  %1156(%var_8736, %var_8737, %var_8738) /* ty=(Tensor[(320), uint8], Tensor[(13, 10), float64], Tensor[(5, 10), float32], Tensor[(5, 2, 4), bool]) */
}

def @func_7796() -> (Tensor[(5, 2, 5), float64],) {
  @func_7794() /* ty=(Tensor[(5, 2, 5), float64],) */
}

def @func_9675() -> Tensor[(4, 8, 10), float64] {
  @func_9673() /* ty=Tensor[(4, 8, 10), float64] */
}

def @func_5303() -> (Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(320), uint8]) {
  %1162 = fn () -> (Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(320), uint8]) {
    %1157 = @func_3347() /* ty=(Tensor[(5, 2, 4), float64],) */;
    %1158 = @func_3462() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64]) */;
    %1159 = %1157.0;
    %1160 = %1158.1;
    %1161 = @func_4154() /* ty=Tensor[(320), uint8] */;
    (%1159, %1160, %1161)
  };
  %1162() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(5, 2, 4), float64], Tensor[(320), uint8]) */
}

def @func_4633() -> Tensor[(13, 2, 9), bool] {
  %1163 = @func_4138() /* ty=(Tensor[(13, 2, 9), bool],) */;
  %1163.0
}

def @func_9057() -> (Tensor[(320), uint8],) {
  %1166 = fn () -> (Tensor[(320), uint8],) {
    %1164 = @func_2305() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(4, 8, 10), float64], Tensor[(320), uint8]) */;
    %1165 = %1164.2;
    (%1165,)
  };
  %1166() /* ty=(Tensor[(320), uint8],) */
}

def @func_6647() -> (Tensor[(320), uint8],) {
  @func_6645() /* ty=(Tensor[(320), uint8],) */
}

def @func_2735(%var_2715: Tensor[(130), float64]) -> (Tensor[(5, 2, 4), float64], Tensor[(1, 130), float64], Tensor[(50), float32], Tensor[(130), float64]) {
  %1167 = cast(meta[relay.Constant][74] /* ty=Tensor[(50), float32] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %1168 = cast(%var_2715, dtype="float64") /* ty=Tensor[(130), float64] */;
  %1169 = reshape(%1167, newshape=[50]) /* ty=Tensor[(50), float32] */;
  %1170 = reshape(%1168, newshape=[1, 130]) /* ty=Tensor[(1, 130), float64] */;
  %1171 = @func_2613(%1169, %1170) /* ty=(Tensor[(5, 2, 4), float64], Tensor[(16, 7, 11), float64], Tensor[(50), float32], Tensor[(1, 130), float64]) */;
  %1172 = @func_1772() /* ty=Tensor[(5, 2, 4), float64] */;
  %1173 = %1171.3;
  (%1172, %1173, meta[relay.Constant][74] /* ty=Tensor[(50), float32] */, %var_2715)
}

def @func_8063(%var_8061: Tensor[(715), float32]) -> (Tensor[(320), uint8], Tensor[(13, 11, 5), float32], Tensor[(715), float32]) {
  @func_8060(%var_8061) /* ty=(Tensor[(320), uint8], Tensor[(13, 11, 5), float32], Tensor[(715), float32]) */
}

def @func_9616(%var_9609: Tensor[(13, 12, 4), float32]) -> Tensor[(13, 12, 4), bool] {
  %1174 = @func_4293() /* ty=(Tensor[(13, 1, 4), float32],) */;
  %1175 = %1174.0;
  %1176 = cast(%1175, dtype="bool") /* ty=Tensor[(13, 1, 4), bool] */;
  %1177 = cast(%var_9609, dtype="bool") /* ty=Tensor[(13, 12, 4), bool] */;
  less(%1176, %1177) /* ty=Tensor[(13, 12, 4), bool] */
}

def @func_9779() -> (Tensor[(5, 2, 4), float64],) {
  %1180 = fn () -> (Tensor[(5, 2, 4), float64],) {
    %1178 = @func_7525() /* ty=(Tensor[(5, 2, 4), float64], Tensor[(13, 2, 9), bool]) */;
    %1179 = %1178.0;
    (%1179,)
  };
  %1180() /* ty=(Tensor[(5, 2, 4), float64],) */
}

def @func_2515(%var_2510: Tensor[(5, 2, 4), float64]) -> (Tensor[(5, 2, 4), uint32],) {
  %1181 = @func_2333() /* ty=(Tensor[(5, 2, 4), float64],) */;
  %1182 = %1181.0;
  %1183 = cast(%var_2510, dtype="uint32") /* ty=Tensor[(5, 2, 4), uint32] */;
  %1184 = shape_of(%1182, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1185 = cast(%1182, dtype="uint32") /* ty=Tensor[(5, 2, 4), uint32] */;
  %1186 = dyn.reshape(%1183, %1184, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1187 = left_shift(%1185, %1186) /* ty=Tensor[(5, 2, 4), uint32] */;
  (%1187,)
}

def @func_8650() -> (Tensor[(5, 2, 4), float64],) {
  %1190 = fn () -> (Tensor[(5, 2, 4), float64],) {
    %1188 = @func_4355() /* ty=(Tensor[(5, 2, 4), float64],) */;
    %1189 = %1188.0;
    (%1189,)
  };
  %1190() /* ty=(Tensor[(5, 2, 4), float64],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen366/build/output.py", line 3487, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:10:48] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

