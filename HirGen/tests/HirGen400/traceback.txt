==========mod==========
#[version = "0.0.5"]
def @func_13672() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) {
  %0 = @func_9454() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */;
  %1 = @func_7976() /* ty=Tensor[(12, 10, 5), float64] */;
  %2 = %0.1;
  (%1, %2)
}

def @func_10519() -> (Tensor[(640), float64], Tensor[(12, 10, 5), float64]) {
  %3 = @func_8915() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(432), float64], Tensor[(1, 432), float64], Tensor[(165), bool], Tensor[(500), int32], Tensor[(12, 10, 5), float64], Tensor[(10, 4, 16), float64], Tensor[(640), float64]) */;
  %4 = @func_3031() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %5 = %3.8;
  %6 = %4.0;
  (%5, %6)
}

def @func_6079(%var_6055: Tensor[(16, 10, 9), float64]) -> (Tensor[(16, 10, 9), float64], Tensor[(5, 8, 10), uint16], Tensor[(2112), float32]) {
  %7 = cast(%var_6055, dtype="float64") /* ty=Tensor[(16, 10, 9), float64] */;
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(2112), float32] */, dtype="float32") /* ty=Tensor[(2112), float32] */;
  %9 = reshape(%8, newshape=[2112]) /* ty=Tensor[(2112), float32] */;
  %10 = @func_3630(%9) /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), uint16], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(2112), bool], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), int8]) */;
  %11 = acosh(%7) /* ty=Tensor[(16, 10, 9), float64] */;
  %12 = %10.2;
  (%11, %12, meta[relay.Constant][0] /* ty=Tensor[(2112), float32] */)
}

def @func_10350() -> Tensor[(5, 8, 10), uint16] {
  %13 = @func_3443() /* ty=(Tensor[(5, 8, 10), uint16], Tensor[(5, 8, 10), int8]) */;
  %13.0
}

def @func_10663(%var_10630: Tensor[(10, 7, 8), int16], %var_10639: Tensor[(260), float32], %var_10646: Tensor[(10, 7, 8), int16]) -> (Tensor[(10, 7, 8), int16], Tensor[(12, 10, 5), float64], Tensor[(260), float32], Tensor[(10, 7, 8), float32]) {
  %14 = cast(meta[relay.Constant][1] /* ty=Tensor[(10, 7, 8), int16] */, dtype="int16") /* ty=Tensor[(10, 7, 8), int16] */;
  %15 = shape_of(%var_10630, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%var_10630, dtype="int16") /* ty=Tensor[(10, 7, 8), int16] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %18 = cast(%var_10639, dtype="float32") /* ty=Tensor[(260), float32] */;
  %19 = reshape(%18, newshape=[130, 2]) /* ty=Tensor[(130, 2), float32] */;
  %20 = @func_9391(%19) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(500), int32], Tensor[(108, 4), float64], Tensor[(130, 2), float32], Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float32]) */;
  %21 = cast(%var_10646, dtype="int16") /* ty=Tensor[(10, 7, 8), int16] */;
  %22 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(10, 7, 8), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %23 = cast(meta[relay.Constant][1] /* ty=Tensor[(10, 7, 8), int16] */, dtype="int16") /* ty=Tensor[(10, 7, 8), int16] */;
  %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %25 = add(%23, %24) /* ty=Tensor[(10, 7, 8), int16] */;
  %26 = cast(%25, dtype="float32") /* ty=Tensor[(10, 7, 8), float32] */;
  %27 = multiply(%16, %17) /* ty=Tensor[(10, 7, 8), int16] */;
  %28 = %20.4;
  %29 = asinh(%26) /* ty=Tensor[(10, 7, 8), float32] */;
  (%27, %28, %var_10639, %29)
}

def @func_7937() -> Tensor[(12, 10, 5), float64] {
  %30 = @func_3340() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64]) */;
  %30.1
}

def @func_12103(%var_12089: Tensor[(5, 5, 14), float32], %var_12090: Tensor[(5, 5, 14), float32]) -> Tensor[(5, 5, 14), float32] {
  %31 = cast(%var_12090, dtype="float32") /* ty=Tensor[(5, 5, 14), float32] */;
  %32 = shape_of(%var_12089, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(%var_12089, dtype="float32") /* ty=Tensor[(5, 5, 14), float32] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %35 = power(%33, %34) /* ty=Tensor[(5, 5, 14), float32] */;
  %36 = cast(%35, dtype="float32") /* ty=Tensor[(5, 5, 14), float32] */;
  sinh(%36) /* ty=Tensor[(5, 5, 14), float32] */
}

def @func_991() -> (Tensor[(12, 10, 5), float64],) {
  %37 = @func_769() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) */;
  %38 = %37.1;
  (%38,)
}

def @func_2801(%var_2791: Tensor[(7, 70), float32]) -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(7, 70), float32]) {
  %39 = @func_991() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %40 = @func_2503() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */;
  %41 = cast(%var_2791, dtype="float32") /* ty=Tensor[(7, 70), float32] */;
  %42 = reshape(%41, newshape=[14, 7, 5]) /* ty=Tensor[(14, 7, 5), float32] */;
  %43 = @func_2266(%42) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(14, 7, 5), bool]) */;
  %44 = %39.0;
  %45 = %40.0;
  %46 = %43.0;
  (%44, %45, %46, %var_2791)
}

def @func_14139(%var_14111: Tensor[(560), int16]) -> (Tensor[(12, 10, 5), bool], Tensor[(560), int16], Tensor[(1, 260), float32], Tensor[(260), float64]) {
  %47 = @func_5327() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(432), float64]) */;
  %48 = cast(%var_14111, dtype="int16") /* ty=Tensor[(560), int16] */;
  %49 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 260), float32] */, dtype="float32") /* ty=Tensor[(1, 260), float32] */;
  %50 = cast(%var_14111, dtype="int16") /* ty=Tensor[(560), int16] */;
  %51 = reshape(%48, newshape=[10, 7, 8]) /* ty=Tensor[(10, 7, 8), int16] */;
  %52 = reshape(%49, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %53 = reshape(%50, newshape=[10, 7, 8]) /* ty=Tensor[(10, 7, 8), int16] */;
  %54 = @func_10663(%51, %52, %53) /* ty=(Tensor[(10, 7, 8), int16], Tensor[(12, 10, 5), float64], Tensor[(260), float32], Tensor[(10, 7, 8), float32]) */;
  %55 = %54.2;
  %56 = cast(%55, dtype="float64") /* ty=Tensor[(260), float64] */;
  %57 = %47.1;
  %58 = tan(%56) /* ty=Tensor[(260), float64] */;
  (%57, %var_14111, meta[relay.Constant][2] /* ty=Tensor[(1, 260), float32] */, %58)
}

def @func_7125() -> (Tensor[(12, 10, 5), bool], Tensor[(432), float64]) {
  %59 = @func_1618() /* ty=Tensor[(12, 10, 5), bool] */;
  %60 = @func_4528() /* ty=Tensor[(432), float64] */;
  (%59, %60)
}

def @func_710() -> (Tensor[(12, 10, 5), float32],) {
  %61 = @func_614() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %62 = %61.0;
  (%62,)
}

def @func_10103() -> (Tensor[(12, 10, 5), float32],) {
  %63 = @func_9902() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %64 = %63.0;
  (%64,)
}

def @func_5716() -> (Tensor[(12, 10, 5), bool],) {
  %65 = @func_3841() /* ty=Tensor[(12, 10, 5), bool] */;
  (%65,)
}

def @func_4338() -> (Tensor[(12, 10, 5), bool],) {
  %66 = @func_2989() /* ty=Tensor[(12, 10, 5), bool] */;
  (%66,)
}

def @func_5980(%var_5975: Tensor[(13, 12, 14), int32]) -> Tensor[(13, 12, 14), int32] {
  %67 = cast(meta[relay.Constant][3] /* ty=Tensor[(13, 12, 14), int32] */, dtype="int32") /* ty=Tensor[(13, 12, 14), int32] */;
  %68 = shape_of(%var_5975, dtype="int32") /* ty=Tensor[(3), int32] */;
  %69 = cast(%var_5975, dtype="int32") /* ty=Tensor[(13, 12, 14), int32] */;
  %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_or(%69, %70) /* ty=Tensor[(13, 12, 14), int32] */
}

def @func_16331() -> Tensor[(12, 10, 5), float64] {
  %71 = @func_13316() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) */;
  %71.2
}

def @func_12047(%var_12004: Tensor[(11, 8, 8), int32], %var_12034: Tensor[(432), float64]) -> (Tensor[(6, 14, 15), int16], Tensor[(1260), int64], Tensor[(11, 8, 8), bool], Tensor[(14, 1, 5), float64], Tensor[(432), float64]) {
  %72 = cast(meta[relay.Constant][4] /* ty=Tensor[(1260), int64] */, dtype="int64") /* ty=Tensor[(1260), int64] */;
  %73 = reshape(%72, newshape=[6, 14, 15]) /* ty=Tensor[(6, 14, 15), int64] */;
  %74 = cast(meta[relay.Constant][5] /* ty=Tensor[(11, 8, 8), int32] */, dtype="int32") /* ty=Tensor[(11, 8, 8), int32] */;
  %75 = shape_of(%var_12004, dtype="int32") /* ty=Tensor[(3), int32] */;
  %76 = cast(%var_12004, dtype="int32") /* ty=Tensor[(11, 8, 8), int32] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %78 = add(%76, %77) /* ty=Tensor[(11, 8, 8), int32] */;
  %79 = cast(%var_12004, dtype="bool") /* ty=Tensor[(11, 8, 8), bool] */;
  %80 = shape_of(%78, dtype="int32") /* ty=Tensor[(3), int32] */;
  %81 = cast(%78, dtype="bool") /* ty=Tensor[(11, 8, 8), bool] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %83 = cast(%var_12034, dtype="float64") /* ty=Tensor[(432), float64] */;
  %84 = reshape(%83, newshape=[432]) /* ty=Tensor[(432), float64] */;
  %85 = @func_941(%84) /* ty=(Tensor[(14, 1, 5), float64], Tensor[(500), float32], Tensor[(432), float64], Tensor[(14, 1, 5), float32]) */;
  %86 = @func_6009(%73) /* ty=Tensor[(6, 14, 15), int16] */;
  %87 = less(%81, %82) /* ty=Tensor[(11, 8, 8), bool] */;
  %88 = %85.0;
  (%86, meta[relay.Constant][4] /* ty=Tensor[(1260), int64] */, %87, %88, %var_12034)
}

def @func_16971() -> (Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float64]) {
  %89 = @func_2192() /* ty=(Tensor[(5, 8, 10), int8],) */;
  %90 = @func_991() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %91 = %89.0;
  %92 = %90.0;
  (%91, %92)
}

def @func_16754() -> (Tensor[(12, 10, 5), float32],) {
  %93 = @func_14788() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), float32], Tensor[(12, 10, 5), float32], Tensor[(165), float32]) */;
  %94 = %93.2;
  (%94,)
}

def @func_1843() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) {
  %95 = @func_769() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) */;
  %96 = %95.1;
  %97 = @func_1042() /* ty=Tensor[(12, 10, 5), bool] */;
  (%96, %97)
}

def @func_13145() -> (Tensor[(5, 8, 10), int8],) {
  %98 = @func_2839() /* ty=(Tensor[(5, 8, 10), int8],) */;
  %99 = %98.0;
  (%99,)
}

def @func_14255() -> Tensor[(12, 10, 5), float64] {
  %100 = @func_8234() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */;
  %100.0
}

def @func_1988() -> (Tensor[(12, 10, 5), float32],) {
  %101 = @func_1416() /* ty=Tensor[(12, 10, 5), float32] */;
  (%101,)
}

def @func_12927() -> Tensor[(12, 10, 5), float64] {
  %102 = @func_5622() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) */;
  %102.1
}

def @func_16155() -> (Tensor[(12, 10, 5), float64],) {
  %103 = @func_7285() /* ty=(Tensor[(432), float64], Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), int8]) */;
  %104 = %103.1;
  (%104,)
}

def @func_3463() -> Tensor[(12, 10, 5), float64] {
  @func_3089() /* ty=Tensor[(12, 10, 5), float64] */
}

def @func_5841() -> (Tensor[(12, 10, 5), float32],) {
  %105 = @func_908() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %106 = %105.0;
  (%106,)
}

def @func_3503() -> Tensor[(12, 10, 5), float64] {
  %107 = @func_991() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %107.0
}

def @func_13472() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) {
  %108 = @func_1323() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %109 = %108.0;
  %110 = @func_6670() /* ty=Tensor[(12, 10, 5), float32] */;
  (%109, %110)
}

def @func_8710() -> (Tensor[(12, 10, 5), bool],) {
  %111 = @func_7534() /* ty=(Tensor[(12, 10, 5), bool],) */;
  %112 = %111.0;
  (%112,)
}

def @func_823() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) {
  %113 = @func_614() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %114 = @func_710() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %115 = %113.0;
  %116 = %114.0;
  (%115, %116)
}

def @func_11841() -> Tensor[(12, 10, 5), float32] {
  %117 = @func_710() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %117.0
}

def @func_1416() -> Tensor[(12, 10, 5), float32] {
  %118 = @func_614() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %118.0
}

def @func_7656() -> (Tensor[(12, 10, 5), float64],) {
  %119 = @func_4988() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %120 = %119.0;
  (%120,)
}

def @func_11665(%var_11635: Tensor[(7, 6, 13), float64]) -> (Tensor[(7, 6, 13), float64], Tensor[(7, 6, 13), float32]) {
  %121 = cast(%var_11635, dtype="float64") /* ty=Tensor[(7, 6, 13), float64] */;
  %122 = cast(%var_11635, dtype="float32") /* ty=Tensor[(7, 6, 13), float32] */;
  %123 = sinh(%121) /* ty=Tensor[(7, 6, 13), float64] */;
  %124 = sqrt(%122) /* ty=Tensor[(7, 6, 13), float32] */;
  (%123, %124)
}

def @func_2362(%var_2332: Tensor[(13, 2, 10), float32]) -> (Tensor[(13, 2, 10), bool],) {
  %125 = cast(%var_2332, dtype="float32") /* ty=Tensor[(13, 2, 10), float32] */;
  %126 = atanh(%125) /* ty=Tensor[(13, 2, 10), float32] */;
  %127 = cast(%var_2332, dtype="uint32") /* ty=Tensor[(13, 2, 10), uint32] */;
  %128 = shape_of(%126, dtype="int32") /* ty=Tensor[(3), int32] */;
  %129 = cast(%126, dtype="uint32") /* ty=Tensor[(13, 2, 10), uint32] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %131 = logical_xor(%129, %130) /* ty=Tensor[(13, 2, 10), uint32] */;
  %132 = cast(%var_2332, dtype="bool") /* ty=Tensor[(13, 2, 10), bool] */;
  %133 = shape_of(%131, dtype="int32") /* ty=Tensor[(3), int32] */;
  %134 = cast(%131, dtype="bool") /* ty=Tensor[(13, 2, 10), bool] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %136 = equal(%134, %135) /* ty=Tensor[(13, 2, 10), bool] */;
  (%136,)
}

def @func_1230() -> (Tensor[(12, 10, 5), float32],) {
  %137 = @func_1174() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(10, 10, 5), float32], Tensor[(14, 1, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(500), int32]) */;
  %138 = %137.4;
  (%138,)
}

def @func_2398() -> (Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) {
  %139 = @func_2019() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool]) */;
  %140 = @func_1243() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %141 = @func_1230() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %142 = %139.0;
  %143 = %140.0;
  %144 = %141.0;
  (%142, %143, %144)
}

def @func_16138() -> (Tensor[(12, 10, 5), float64],) {
  %145 = @func_11082() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %146 = %145.0;
  (%146,)
}

def @func_268(%var_250: Tensor[(10, 10, 5), float32]) -> Tensor[(10, 10, 5), float32] {
  %147 = cast(%var_250, dtype="float32") /* ty=Tensor[(10, 10, 5), float32] */;
  atanh(%147) /* ty=Tensor[(10, 10, 5), float32] */
}

def @func_11317() -> (Tensor[(12, 10, 5), float32],) {
  %148 = @func_3527() /* ty=Tensor[(12, 10, 5), float32] */;
  (%148,)
}

def @func_3527() -> Tensor[(12, 10, 5), float32] {
  %149 = @func_1230() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %149.0
}

def @func_11163(%var_11105: Tensor[(720), int8]) -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(720), int8], Tensor[(1056, 2), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) {
  %150 = @func_8234() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */;
  %151 = @func_8543() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */;
  %152 = cast(%var_11105, dtype="int8") /* ty=Tensor[(720), int8] */;
  %153 = cast(%var_11105, dtype="int8") /* ty=Tensor[(720), int8] */;
  %154 = cast(meta[relay.Constant][6] /* ty=Tensor[(1056, 2), float32] */, dtype="float32") /* ty=Tensor[(1056, 2), float32] */;
  %155 = reshape(%152, newshape=[16, 5, 9]) /* ty=Tensor[(16, 5, 9), int8] */;
  %156 = reshape(%153, newshape=[16, 5, 9]) /* ty=Tensor[(16, 5, 9), int8] */;
  %157 = reshape(%154, newshape=[528, 4]) /* ty=Tensor[(528, 4), float32] */;
  %158 = @func_8806(%155, %156, %157) /* ty=(Tensor[(16, 5, 9), int8], Tensor[(12, 10, 5), float32], Tensor[(528, 4), float32], Tensor[(13, 12, 14), int32], Tensor[(2184), int32], Tensor[(12, 10, 5), float32], Tensor[(13, 2, 4), float32]) */;
  %159 = @func_6953() /* ty=(Tensor[(500), int32], Tensor[(12, 10, 5), float64]) */;
  %160 = %150.1;
  %161 = %151.1;
  %162 = %158.1;
  %163 = %159.1;
  %164 = @func_2989() /* ty=Tensor[(12, 10, 5), bool] */;
  (%160, %161, %162, %var_11105, meta[relay.Constant][6] /* ty=Tensor[(1056, 2), float32] */, %163, %164)
}

def @func_15681(%var_15676: Tensor[(8, 14, 3), bool]) -> Tensor[(8, 14, 3), bool] {
  %165 = cast(meta[relay.Constant][7] /* ty=Tensor[(8, 14, 3), bool] */, dtype="bool") /* ty=Tensor[(8, 14, 3), bool] */;
  %166 = shape_of(%var_15676, dtype="int32") /* ty=Tensor[(3), int32] */;
  %167 = cast(%var_15676, dtype="bool") /* ty=Tensor[(8, 14, 3), bool] */;
  %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%167, %168) /* ty=Tensor[(8, 14, 3), bool] */
}

def @func_7581() -> (Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float32]) {
  %169 = @func_4044() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %170 = @func_2839() /* ty=(Tensor[(5, 8, 10), int8],) */;
  %171 = @func_4149() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32]) */;
  %172 = %169.0;
  %173 = %170.0;
  %174 = %171.1;
  (%172, %173, %174)
}

def @func_11072() -> Tensor[(12, 10, 5), float64] {
  @func_4219() /* ty=Tensor[(12, 10, 5), float64] */
}

def @func_2266(%var_2257: Tensor[(14, 7, 5), float32]) -> (Tensor[(12, 10, 5), float32], Tensor[(14, 7, 5), bool]) {
  %175 = @func_1174() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(10, 10, 5), float32], Tensor[(14, 1, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(500), int32]) */;
  %176 = @func_1174() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(10, 10, 5), float32], Tensor[(14, 1, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(500), int32]) */;
  %177 = %176.2;
  %178 = cast(%177, dtype="bool") /* ty=Tensor[(14, 1, 5), bool] */;
  %179 = cast(%var_2257, dtype="bool") /* ty=Tensor[(14, 7, 5), bool] */;
  %180 = %175.4;
  %181 = greater_equal(%178, %179) /* ty=Tensor[(14, 7, 5), bool] */;
  (%180, %181)
}

def @func_2839() -> (Tensor[(5, 8, 10), int8],) {
  %182 = @func_2192() /* ty=(Tensor[(5, 8, 10), int8],) */;
  %183 = %182.0;
  (%183,)
}

def @func_845(%var_835: Tensor[(432), float64]) -> (Tensor[(12, 10, 5), float32], Tensor[(8, 6, 9), int8], Tensor[(432), float64]) {
  %184 = @func_614() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %185 = cast(%var_835, dtype="float64") /* ty=Tensor[(432), float64] */;
  %186 = reshape(%185, newshape=[8, 6, 9]) /* ty=Tensor[(8, 6, 9), float64] */;
  %187 = @func_380(%186) /* ty=(Tensor[(10, 10, 5), float32], Tensor[(500), float32], Tensor[(8, 6, 9), int8]) */;
  %188 = %184.0;
  %189 = %187.2;
  (%188, %189, %var_835)
}

def @func_7167(%var_7161: Tensor[(165), float32]) -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(165), float32]) {
  %190 = @func_5622() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) */;
  %191 = cast(%var_7161, dtype="float32") /* ty=Tensor[(165), float32] */;
  %192 = reshape(%191, newshape=[165]) /* ty=Tensor[(165), float32] */;
  %193 = @func_5506(%192) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(11, 5, 3), float32], Tensor[(165), float64]) */;
  %194 = %190.1;
  %195 = %193.0;
  (%194, %195, %var_7161)
}

def @func_11278() -> Tensor[(12, 10, 5), float32] {
  %196 = @func_4044() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %196.0
}

def @func_2192() -> (Tensor[(5, 8, 10), int8],) {
  %197 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 8, 10), float32] */, dtype="float32") /* ty=Tensor[(5, 8, 10), float32] */;
  %198 = sinh(%197) /* ty=Tensor[(5, 8, 10), float32] */;
  %199 = cast(%198, dtype="int8") /* ty=Tensor[(5, 8, 10), int8] */;
  %200 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(5, 8, 10), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %201 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 8, 10), float32] */, dtype="int8") /* ty=Tensor[(5, 8, 10), int8] */;
  %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %203 = bitwise_or(%201, %202) /* ty=Tensor[(5, 8, 10), int8] */;
  (%203,)
}

def @func_1940() -> (Tensor[(12, 10, 5), bool], Tensor[(14, 1, 5), float32]) {
  %204 = @func_1703() /* ty=(Tensor[(14, 1, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %205 = @func_1042() /* ty=Tensor[(12, 10, 5), bool] */;
  %206 = %204.0;
  (%205, %206)
}

def @func_908() -> (Tensor[(12, 10, 5), float32],) {
  %207 = @func_823() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %208 = %207.1;
  (%208,)
}

def @func_7976() -> Tensor[(12, 10, 5), float64] {
  %209 = @func_3400() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) */;
  %209.1
}

def @func_10080() -> (Tensor[(12, 10, 5), float64],) {
  %210 = @func_9201() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */;
  %211 = %210.0;
  (%211,)
}

def @func_16765() -> Tensor[(12, 10, 5), float32] {
  %212 = @func_12129() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %212.0
}

def @func_14397(%var_14384: Tensor[(14, 2, 1), int64], %var_14385: Tensor[(14, 2, 7), int64]) -> Tensor[(14, 2, 7), bool] {
  %213 = cast(%var_14384, dtype="bool") /* ty=Tensor[(14, 2, 1), bool] */;
  %214 = cast(%var_14385, dtype="bool") /* ty=Tensor[(14, 2, 7), bool] */;
  less_equal(%213, %214) /* ty=Tensor[(14, 2, 7), bool] */
}

def @func_14874() -> (Tensor[(12, 6, 5), float64], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float32]) {
  %215 = cast(meta[relay.Constant][9] /* ty=Tensor[(12, 6, 5), float64] */, dtype="float64") /* ty=Tensor[(12, 6, 5), float64] */;
  %216 = @func_6863() /* ty=(Tensor[(5, 8, 10), int8],) */;
  %217 = @func_14588() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %218 = sqrt(%215) /* ty=Tensor[(12, 6, 5), float64] */;
  %219 = %216.0;
  %220 = %217.0;
  (%218, %219, %220)
}

def @func_15463() -> (Tensor[(13, 11, 4), int64],) {
  %221 = cast(meta[relay.Constant][10] /* ty=Tensor[(13, 11, 4), float64] */, dtype="float64") /* ty=Tensor[(13, 11, 4), float64] */;
  %222 = sin(%221) /* ty=Tensor[(13, 11, 4), float64] */;
  %223 = cast(meta[relay.Constant][11] /* ty=Tensor[(13, 11, 4), float64] */, dtype="int64") /* ty=Tensor[(13, 11, 4), int64] */;
  %224 = shape_of(%222, dtype="int32") /* ty=Tensor[(3), int32] */;
  %225 = cast(%222, dtype="int64") /* ty=Tensor[(13, 11, 4), int64] */;
  %226 = dyn.reshape(%223, %224, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %227 = minimum(%225, %226) /* ty=Tensor[(13, 11, 4), int64] */;
  (%227,)
}

def @func_1678() -> (Tensor[(12, 10, 5), float32],) {
  %228 = @func_769() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) */;
  %229 = %228.0;
  (%229,)
}

def @func_10335(%var_10328: int8, %var_10329: Tensor[(13, 14, 3), int8]) -> Tensor[(13, 14, 3), int8] {
  %230 = cast(%var_10328, dtype="int8") /* ty=int8 */;
  %231 = cast(%var_10329, dtype="int8") /* ty=Tensor[(13, 14, 3), int8] */;
  logical_xor(%230, %231) /* ty=Tensor[(13, 14, 3), int8] */
}

def @func_10824(%var_10807: Tensor[(165, 1), float32]) -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(165, 1), float32]) {
  %232 = @func_6832() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(10, 10, 5), float32], Tensor[(500), float32]) */;
  %233 = @func_4044() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %234 = @func_9902() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %235 = @func_5068() /* ty=(Tensor[(432), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */;
  %236 = cast(%var_10807, dtype="float32") /* ty=Tensor[(165, 1), float32] */;
  %237 = reshape(%236, newshape=[165]) /* ty=Tensor[(165), float32] */;
  %238 = @func_7167(%237) /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(165), float32]) */;
  %239 = %232.0;
  %240 = %233.0;
  %241 = @func_9860() /* ty=Tensor[(5, 8, 10), int8] */;
  %242 = %234.0;
  %243 = %235.0;
  %244 = %238.1;
  (%239, %240, %241, %242, %243, %244, %var_10807)
}

def @func_13401() -> Tensor[(5, 8, 10), float32] {
  %245 = @func_11451() /* ty=(Tensor[(5, 8, 10), float32],) */;
  %245.0
}

def @func_3841() -> Tensor[(12, 10, 5), bool] {
  %246 = @func_2019() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool]) */;
  %246.0
}

def @func_11548() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) {
  %247 = @func_3128() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %248 = %247.0;
  %249 = @func_1416() /* ty=Tensor[(12, 10, 5), float32] */;
  (%248, %249)
}

def @func_16880() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) {
  %250 = @func_9280() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */;
  %251 = @func_7147() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %252 = %250.1;
  %253 = %251.0;
  (%252, %253)
}

def @func_1915(%var_1875: float32, %var_1876: Tensor[(16, 11, 12), float32], %var_1903: Tensor[(16, 11, 12), float32]) -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(16, 11, 12), int16], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool]) {
  %254 = @func_823() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %255 = @func_1407() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %256 = cast(%var_1875, dtype="float32") /* ty=float32 */;
  %257 = cast(%var_1876, dtype="float32") /* ty=Tensor[(16, 11, 12), float32] */;
  %258 = mod(%256, %257) /* ty=Tensor[(16, 11, 12), float32] */;
  %259 = cast(%var_1903, dtype="int16") /* ty=Tensor[(16, 11, 12), int16] */;
  %260 = shape_of(%258, dtype="int32") /* ty=Tensor[(3), int32] */;
  %261 = cast(%258, dtype="int16") /* ty=Tensor[(16, 11, 12), int16] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %263 = @func_1678() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %264 = @func_823() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %265 = @func_1843() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */;
  %266 = %254.0;
  %267 = %255.1;
  %268 = subtract(%261, %262) /* ty=Tensor[(16, 11, 12), int16] */;
  %269 = %263.0;
  %270 = %264.0;
  %271 = %265.1;
  (%266, %267, %268, %269, %270, %271)
}

def @func_15817() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) {
  %272 = @func_1678() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %273 = @func_10103() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %274 = %272.0;
  %275 = %273.0;
  (%274, %275)
}

def @func_15307() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) {
  %276 = @func_4178() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(432), float64]) */;
  %277 = @func_6670() /* ty=Tensor[(12, 10, 5), float32] */;
  %278 = %276.0;
  %279 = @func_11072() /* ty=Tensor[(12, 10, 5), float64] */;
  (%277, %278, %279)
}

def @func_15850() -> (Tensor[(12, 10, 5), float64],) {
  %280 = @func_3128() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %281 = %280.0;
  (%281,)
}

def @func_6342() -> Tensor[(12, 10, 5), float32] {
  @func_5563() /* ty=Tensor[(12, 10, 5), float32] */
}

def @func_8234() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) {
  %282 = @func_3149() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %283 = @func_614() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %284 = %282.0;
  %285 = %283.0;
  (%284, %285)
}

def @func_3220() -> Tensor[(432), float64] {
  %286 = @func_3194() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(432), float64], Tensor[(10, 50), float32]) */;
  %286.2
}

def @func_16515() -> (Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), int8]) {
  %287 = @func_15647() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(1, 432), float64], Tensor[(165), bool]) */;
  %288 = %287.0;
  %289 = @func_3827() /* ty=Tensor[(5, 8, 10), int8] */;
  (%288, %289)
}

def @func_16716() -> Tensor[(12, 10, 5), float64] {
  %290 = @func_1843() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */;
  %290.0
}

def @func_12244(%var_12233: Tensor[(12, 16, 11), int16], %var_12234: Tensor[(12, 16, 11), int16]) -> (Tensor[(12, 16, 11), int16],) {
  %291 = cast(%var_12234, dtype="int16") /* ty=Tensor[(12, 16, 11), int16] */;
  %292 = shape_of(%var_12233, dtype="int32") /* ty=Tensor[(3), int32] */;
  %293 = cast(%var_12233, dtype="int16") /* ty=Tensor[(12, 16, 11), int16] */;
  %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %295 = left_shift(%293, %294) /* ty=Tensor[(12, 16, 11), int16] */;
  (%295,)
}

def @func_9087(%var_8976: Tensor[(2112), float32], %var_9040: Tensor[(13, 28), float32]) -> (Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), uint16], Tensor[(2112), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), int8], Tensor[(165), bool], Tensor[(13, 28), float64], Tensor[(14, 1, 5), float64], Tensor[(432), float64]) {
  %296 = cast(%var_8976, dtype="float32") /* ty=Tensor[(2112), float32] */;
  %297 = reshape(%296, newshape=[2112]) /* ty=Tensor[(2112), float32] */;
  %298 = @func_3630(%297) /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), uint16], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(2112), bool], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), int8]) */;
  %299 = @func_7517() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(5, 8, 10), int8], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), bool]) */;
  %300 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 28), float32] */, dtype="float32") /* ty=Tensor[(1, 28), float32] */;
  %301 = reshape(%300, newshape=[2, 14, 1]) /* ty=Tensor[(2, 14, 1), float32] */;
  %302 = @func_2974(%301) /* ty=(Tensor[(2, 14, 1), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) */;
  %303 = @func_6363() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %304 = cast(meta[relay.Constant][13] /* ty=Tensor[(165), bool] */, dtype="bool") /* ty=Tensor[(165), bool] */;
  %305 = reshape(%304, newshape=[165]) /* ty=Tensor[(165), bool] */;
  %306 = @func_5673(%305) /* ty=(Tensor[(5, 8, 10), int8], Tensor[(216, 2), float64], Tensor[(165), bool], Tensor[(2112), float32], Tensor[(825), bool], Tensor[(1, 432), float64]) */;
  %307 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 28), float32] */, dtype="int64") /* ty=Tensor[(1, 28), int64] */;
  %308 = cast(%var_9040, dtype="int64") /* ty=Tensor[(13, 28), int64] */;
  %309 = bitwise_and(%307, %308) /* ty=Tensor[(13, 28), int64] */;
  %310 = cast(%309, dtype="float64") /* ty=Tensor[(13, 28), float64] */;
  %311 = cast(meta[relay.Constant][14] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
  %312 = reshape(%311, newshape=[432]) /* ty=Tensor[(432), float64] */;
  %313 = @func_941(%312) /* ty=(Tensor[(14, 1, 5), float64], Tensor[(500), float32], Tensor[(432), float64], Tensor[(14, 1, 5), float32]) */;
  %314 = @func_2155() /* ty=Tensor[(12, 10, 5), float64] */;
  %315 = %298.2;
  %316 = %299.1;
  %317 = @func_6670() /* ty=Tensor[(12, 10, 5), float32] */;
  %318 = %302.1;
  %319 = @func_3463() /* ty=Tensor[(12, 10, 5), float64] */;
  %320 = @func_3503() /* ty=Tensor[(12, 10, 5), float64] */;
  %321 = %303.0;
  %322 = %306.0;
  %323 = log(%310) /* ty=Tensor[(13, 28), float64] */;
  %324 = %313.0;
  (%314, %315, %var_8976, %316, %317, %318, %319, %320, %321, %322, meta[relay.Constant][13] /* ty=Tensor[(165), bool] */, %323, %324, meta[relay.Constant][14] /* ty=Tensor[(432), float64] */)
}

def @func_13210(%var_13203: Tensor[(10, 14, 11), int8], %var_13204: Tensor[(10, 14, 11), int8]) -> Tensor[(10, 14, 11), int8] {
  %325 = cast(%var_13204, dtype="int8") /* ty=Tensor[(10, 14, 11), int8] */;
  %326 = shape_of(%var_13203, dtype="int32") /* ty=Tensor[(3), int32] */;
  %327 = cast(%var_13203, dtype="int8") /* ty=Tensor[(10, 14, 11), int8] */;
  %328 = dyn.reshape(%325, %326, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_or(%327, %328) /* ty=Tensor[(10, 14, 11), int8] */
}

def @func_11881() -> Tensor[(12, 10, 5), bool] {
  @func_2989() /* ty=Tensor[(12, 10, 5), bool] */
}

def @func_614() -> (Tensor[(12, 10, 5), float32],) {
  %329 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 10, 5), float32] */, dtype="float32") /* ty=Tensor[(12, 10, 5), float32] */;
  %330 = sigmoid(%329) /* ty=Tensor[(12, 10, 5), float32] */;
  (%330,)
}

def @func_5563() -> Tensor[(12, 10, 5), float32] {
  %331 = @func_823() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %331.0
}

def @func_13067() -> Tensor[(12, 10, 5), float32] {
  %332 = @func_10103() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %332.0
}

def @func_3194() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(432), float64], Tensor[(10, 50), float32]) {
  %333 = @func_1243() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %334 = cast(meta[relay.Constant][16] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
  %335 = cast(meta[relay.Constant][17] /* ty=Tensor[(10, 50), float32] */, dtype="float32") /* ty=Tensor[(10, 50), float32] */;
  %336 = reshape(%334, newshape=[432]) /* ty=Tensor[(432), float64] */;
  %337 = reshape(%335, newshape=[500]) /* ty=Tensor[(500), float32] */;
  %338 = @func_1112(%336, %337) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(14, 1, 5), float64], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(10, 10, 5), float32], Tensor[(500), float32], Tensor[(12, 10, 5), float64]) */;
  %339 = %333.0;
  %340 = %338.0;
  (%339, %340, meta[relay.Constant][16] /* ty=Tensor[(432), float64] */, meta[relay.Constant][17] /* ty=Tensor[(10, 50), float32] */)
}

def @func_7624(%var_7595: Tensor[(7, 2, 10), uint8], %var_7596: Tensor[(7, 2, 10), uint8]) -> (Tensor[(7, 2, 10), uint8], Tensor[(432), float64], Tensor[(12, 10, 5), float32]) {
  %341 = cast(%var_7596, dtype="uint8") /* ty=Tensor[(7, 2, 10), uint8] */;
  %342 = shape_of(%var_7595, dtype="int32") /* ty=Tensor[(3), int32] */;
  %343 = cast(%var_7595, dtype="uint8") /* ty=Tensor[(7, 2, 10), uint8] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %345 = maximum(%343, %344) /* ty=Tensor[(7, 2, 10), uint8] */;
  %346 = @func_3220() /* ty=Tensor[(432), float64] */;
  %347 = @func_6342() /* ty=Tensor[(12, 10, 5), float32] */;
  (%345, %346, %347)
}

def @func_2019() -> (Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool]) {
  %348 = @func_1407() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %349 = @func_1042() /* ty=Tensor[(12, 10, 5), bool] */;
  %350 = %348.0;
  (%349, %350)
}

def @func_2285() -> (Tensor[(14, 1, 5), float32],) {
  %351 = @func_1174() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(10, 10, 5), float32], Tensor[(14, 1, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(500), int32]) */;
  %352 = %351.2;
  (%352,)
}

def @func_2688() -> (Tensor[(16, 2, 9), bool], Tensor[(12, 10, 5), bool], Tensor[(14, 1, 5), float64], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool]) {
  %353 = cast(meta[relay.Constant][19] /* ty=Tensor[(16, 2, 9), float32] */, dtype="bool") /* ty=Tensor[(16, 2, 9), bool] */;
  %354 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(16, 2, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %355 = cast(meta[relay.Constant][18] /* ty=Tensor[(16, 2, 9), float32] */, dtype="bool") /* ty=Tensor[(16, 2, 9), bool] */;
  %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %357 = @func_2019() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool]) */;
  %358 = cast(meta[relay.Constant][20] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
  %359 = reshape(%358, newshape=[432]) /* ty=Tensor[(432), float64] */;
  %360 = @func_941(%359) /* ty=(Tensor[(14, 1, 5), float64], Tensor[(500), float32], Tensor[(432), float64], Tensor[(14, 1, 5), float32]) */;
  %361 = @func_1407() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %362 = @func_1407() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %363 = equal(%355, %356) /* ty=Tensor[(16, 2, 9), bool] */;
  %364 = %357.0;
  %365 = %360.0;
  %366 = %361.1;
  %367 = @func_1618() /* ty=Tensor[(12, 10, 5), bool] */;
  %368 = %362.0;
  (%363, %364, %365, meta[relay.Constant][20] /* ty=Tensor[(432), float64] */, %366, %367, %368)
}

def @main(%var_17027: Tensor[(14, 12, 5), float32]) -> Tensor[(14, 12, 5), int64] {
  %369 = @func_12307() /* ty=(Tensor[(14, 1, 5), float32],) */;
  %370 = %369.0;
  %371 = cast(%370, dtype="int64") /* ty=Tensor[(14, 1, 5), int64] */;
  %372 = cast(%var_17027, dtype="int64") /* ty=Tensor[(14, 12, 5), int64] */;
  bitwise_and(%371, %372) /* ty=Tensor[(14, 12, 5), int64] */
}

def @func_4572() -> Tensor[(12, 10, 5), float64] {
  @func_3463() /* ty=Tensor[(12, 10, 5), float64] */
}

def @func_5770() -> (Tensor[(13, 2, 4), float32],) {
  %373 = @func_4699() /* ty=Tensor[(13, 2, 4), float64] */;
  %374 = cast(%373, dtype="float64") /* ty=Tensor[(13, 2, 4), float64] */;
  %375 = sinh(%374) /* ty=Tensor[(13, 2, 4), float64] */;
  %376 = cast(%375, dtype="float32") /* ty=Tensor[(13, 2, 4), float32] */;
  %377 = acosh(%376) /* ty=Tensor[(13, 2, 4), float32] */;
  %378 = cast(%377, dtype="float32") /* ty=Tensor[(13, 2, 4), float32] */;
  %379 = shape_of(%375, dtype="int32") /* ty=Tensor[(3), int32] */;
  %380 = cast(%375, dtype="float32") /* ty=Tensor[(13, 2, 4), float32] */;
  %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %382 = subtract(%380, %381) /* ty=Tensor[(13, 2, 4), float32] */;
  (%382,)
}

def @func_9585(%var_9579: Tensor[(140), uint8]) -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(432), float64], Tensor[(140), uint8]) {
  %383 = @func_908() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %384 = cast(%var_9579, dtype="uint8") /* ty=Tensor[(140), uint8] */;
  %385 = cast(%var_9579, dtype="uint8") /* ty=Tensor[(140), uint8] */;
  %386 = reshape(%384, newshape=[7, 2, 10]) /* ty=Tensor[(7, 2, 10), uint8] */;
  %387 = reshape(%385, newshape=[7, 2, 10]) /* ty=Tensor[(7, 2, 10), uint8] */;
  %388 = @func_7624(%386, %387) /* ty=(Tensor[(7, 2, 10), uint8], Tensor[(432), float64], Tensor[(12, 10, 5), float32]) */;
  %389 = @func_7855() /* ty=Tensor[(12, 10, 5), float32] */;
  %390 = %383.0;
  %391 = %388.1;
  (%389, %390, %391, %var_9579)
}

def @func_10132() -> (Tensor[(432), float64], Tensor[(12, 10, 5), float32]) {
  %392 = @func_5068() /* ty=(Tensor[(432), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */;
  %393 = @func_9280() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */;
  %394 = %392.0;
  %395 = %393.0;
  (%394, %395)
}

def @func_8437(%var_8419: Tensor[(10, 11, 13), uint32], %var_8420: Tensor[(10, 11, 13), uint32]) -> (Tensor[(10, 11, 13), bool], Tensor[(12, 10, 5), float64]) {
  %396 = cast(%var_8420, dtype="bool") /* ty=Tensor[(10, 11, 13), bool] */;
  %397 = shape_of(%var_8419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %398 = cast(%var_8419, dtype="bool") /* ty=Tensor[(10, 11, 13), bool] */;
  %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %400 = greater(%398, %399) /* ty=Tensor[(10, 11, 13), bool] */;
  %401 = @func_4219() /* ty=Tensor[(12, 10, 5), float64] */;
  (%400, %401)
}

def @func_9851() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) {
  %402 = @func_7019() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), bool], Tensor[(12, 10, 5), float32]) */;
  %403 = @func_7019() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), bool], Tensor[(12, 10, 5), float32]) */;
  %404 = %402.1;
  %405 = %403.0;
  (%404, %405)
}

def @func_14751() -> (Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float64]) {
  %406 = @func_2192() /* ty=(Tensor[(5, 8, 10), int8],) */;
  %407 = %406.0;
  %408 = @func_3463() /* ty=Tensor[(12, 10, 5), float64] */;
  (%407, %408)
}

def @func_16897() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) {
  %409 = @func_769() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) */;
  %410 = %409.0;
  %411 = @func_12205() /* ty=Tensor[(12, 10, 5), float32] */;
  (%410, %411)
}

def @func_9280() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) {
  %412 = @func_5327() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(432), float64]) */;
  %413 = @func_2688() /* ty=(Tensor[(16, 2, 9), bool], Tensor[(12, 10, 5), bool], Tensor[(14, 1, 5), float64], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool]) */;
  %414 = @func_6670() /* ty=Tensor[(12, 10, 5), float32] */;
  %415 = %412.0;
  %416 = %413.6;
  (%414, %415, %416)
}

def @func_13860() -> Tensor[(12, 10, 5), float64] {
  %417 = @func_1523() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %417.0
}

def @func_6873() -> (Tensor[(12, 10, 5), bool],) {
  %418 = @func_1042() /* ty=Tensor[(12, 10, 5), bool] */;
  (%418,)
}

def @func_10533() -> (Tensor[(12, 10, 5), float64],) {
  %419 = @func_2526() /* ty=Tensor[(12, 10, 5), float64] */;
  (%419,)
}

def @func_11082() -> (Tensor[(12, 10, 5), float64],) {
  %420 = @func_3089() /* ty=Tensor[(12, 10, 5), float64] */;
  (%420,)
}

def @func_1523() -> (Tensor[(12, 10, 5), float64],) {
  %421 = @func_1407() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %422 = %421.2;
  %423 = cast(%422, dtype="float64") /* ty=Tensor[(12, 10, 5), float64] */;
  %424 = acosh(%423) /* ty=Tensor[(12, 10, 5), float64] */;
  (%424,)
}

def @func_12307() -> (Tensor[(14, 1, 5), float32],) {
  %425 = @func_8090() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(14, 1, 5), float32]) */;
  %426 = %425.4;
  (%426,)
}

def @func_1323() -> (Tensor[(12, 10, 5), float32],) {
  %427 = @func_823() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %428 = %427.1;
  (%428,)
}

def @func_6670() -> Tensor[(12, 10, 5), float32] {
  %429 = @func_1230() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %429.0
}

def @func_16224(%var_16195: Tensor[(7, 10, 14), float64]) -> (Tensor[(12, 10, 5), float32], Tensor[(7, 10, 14), uint32]) {
  %430 = @func_9851() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) */;
  %431 = cast(%var_16195, dtype="float64") /* ty=Tensor[(7, 10, 14), float64] */;
  %432 = cosh(%431) /* ty=Tensor[(7, 10, 14), float64] */;
  %433 = cast(%var_16195, dtype="uint32") /* ty=Tensor[(7, 10, 14), uint32] */;
  %434 = shape_of(%432, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%432, dtype="uint32") /* ty=Tensor[(7, 10, 14), uint32] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %437 = %430.0;
  %438 = subtract(%435, %436) /* ty=Tensor[(7, 10, 14), uint32] */;
  (%437, %438)
}

def @func_15753(%var_15744: int32, %var_15745: Tensor[(9, 11, 3), int32]) -> (Tensor[(9, 11, 3), int32], Tensor[(12, 10, 5), float64]) {
  %439 = cast(%var_15744, dtype="int32") /* ty=int32 */;
  %440 = cast(%var_15745, dtype="int32") /* ty=Tensor[(9, 11, 3), int32] */;
  %441 = logical_xor(%439, %440) /* ty=Tensor[(9, 11, 3), int32] */;
  %442 = @func_4219() /* ty=Tensor[(12, 10, 5), float64] */;
  (%441, %442)
}

def @func_4178() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(432), float64]) {
  %443 = @func_1988() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %444 = @func_1416() /* ty=Tensor[(12, 10, 5), float32] */;
  %445 = %443.0;
  %446 = @func_3220() /* ty=Tensor[(432), float64] */;
  (%444, %445, %446)
}

def @func_3089() -> Tensor[(12, 10, 5), float64] {
  @func_2129() /* ty=Tensor[(12, 10, 5), float64] */
}

def @func_13330() -> (Tensor[(12, 10, 5), float32],) {
  %447 = @func_9201() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */;
  %448 = %447.1;
  (%448,)
}

def @func_12479(%var_12471: Tensor[(260), float32]) -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(13, 2, 10), bool], Tensor[(260), float32]) {
  %449 = @func_1407() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %450 = @func_1523() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %451 = cast(%var_12471, dtype="float32") /* ty=Tensor[(260), float32] */;
  %452 = reshape(%451, newshape=[13, 2, 10]) /* ty=Tensor[(13, 2, 10), float32] */;
  %453 = @func_2362(%452) /* ty=(Tensor[(13, 2, 10), bool],) */;
  %454 = %449.2;
  %455 = %450.0;
  %456 = %453.0;
  (%454, %455, %456, %var_12471)
}

def @func_11239() -> Tensor[(12, 10, 5), float64] {
  %457 = @func_4253() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %457.0
}

def @func_12649(%var_12617: Tensor[(1320), uint32], %var_12620: Tensor[(15, 117), float64]) -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 11), uint32], Tensor[(1320), uint32], Tensor[(1755), float64], Tensor[(15, 117), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) {
  %458 = @func_4338() /* ty=(Tensor[(12, 10, 5), bool],) */;
  %459 = cast(%var_12617, dtype="uint32") /* ty=Tensor[(1320), uint32] */;
  %460 = reshape(%459, newshape=[12, 10, 11]) /* ty=Tensor[(12, 10, 11), uint32] */;
  %461 = @func_10910(%460) /* ty=(Tensor[(12, 10, 11), uint32],) */;
  %462 = cast(%var_12620, dtype="float64") /* ty=Tensor[(15, 117), float64] */;
  %463 = reshape(%462, newshape=[1755]) /* ty=Tensor[(1755), float64] */;
  %464 = @func_10063(%463) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(13, 9, 15), float64], Tensor[(1755), float64]) */;
  %465 = @func_3031() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %466 = @func_2155() /* ty=Tensor[(12, 10, 5), float64] */;
  %467 = %458.0;
  %468 = %461.0;
  %469 = %464.2;
  %470 = %465.0;
  %471 = @func_2155() /* ty=Tensor[(12, 10, 5), float64] */;
  (%466, %467, %468, %var_12617, %469, %var_12620, %470, %471)
}

def @func_11406() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) {
  %472 = @func_11317() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %473 = @func_823() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %474 = %472.0;
  %475 = %473.1;
  (%474, %475)
}

def @func_1042() -> Tensor[(12, 10, 5), bool] {
  %476 = @func_710() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %477 = %476.0;
  %478 = @func_614() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %479 = %478.0;
  %480 = cast(%479, dtype="bool") /* ty=Tensor[(12, 10, 5), bool] */;
  %481 = shape_of(%477, dtype="int32") /* ty=Tensor[(3), int32] */;
  %482 = cast(%477, dtype="bool") /* ty=Tensor[(12, 10, 5), bool] */;
  %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%482, %483) /* ty=Tensor[(12, 10, 5), bool] */
}

def @func_10565() -> (Tensor[(12, 10, 5), float32],) {
  %484 = @func_710() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %485 = %484.0;
  (%485,)
}

def @func_1243() -> (Tensor[(12, 10, 5), float64],) {
  %486 = @func_991() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %487 = %486.0;
  (%487,)
}

def @func_8653() -> (Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), uint16], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool]) {
  %488 = @func_5622() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) */;
  %489 = @func_4338() /* ty=(Tensor[(12, 10, 5), bool],) */;
  %490 = %488.0;
  %491 = @func_6204() /* ty=Tensor[(5, 8, 10), uint16] */;
  %492 = %489.0;
  %493 = @func_3841() /* ty=Tensor[(12, 10, 5), bool] */;
  (%490, %491, %492, %493)
}

def @func_4988() -> (Tensor[(12, 10, 5), float64],) {
  %494 = @func_1243() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %495 = %494.0;
  (%495,)
}

def @func_9902() -> (Tensor[(12, 10, 5), float32],) {
  %496 = @func_4007() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %497 = %496.0;
  (%497,)
}

def @func_15379() -> (Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32]) {
  %498 = @func_5418() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64]) */;
  %499 = @func_2019() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool]) */;
  %500 = @func_8090() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(14, 1, 5), float32]) */;
  %501 = %498.1;
  %502 = %499.1;
  %503 = %500.2;
  (%501, %502, %503)
}

def @func_13255() -> (Tensor[(5, 8, 10), bool], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32]) {
  %504 = @func_7534() /* ty=(Tensor[(12, 10, 5), bool],) */;
  %505 = @func_4007() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %506 = @func_4771() /* ty=Tensor[(5, 8, 10), bool] */;
  %507 = %504.0;
  %508 = %505.0;
  (%506, %507, %508)
}

def @func_2740() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) {
  %509 = @func_1523() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %510 = %509.0;
  %511 = @func_2155() /* ty=Tensor[(12, 10, 5), float64] */;
  (%510, %511)
}

def @func_7324() -> Tensor[(12, 10, 5), float64] {
  @func_2129() /* ty=Tensor[(12, 10, 5), float64] */
}

def @func_4301() -> (Tensor[(5, 8, 10), float32], Tensor[(12, 10, 5), float64]) {
  %512 = @func_2192() /* ty=(Tensor[(5, 8, 10), int8],) */;
  %513 = %512.0;
  %514 = cast(%513, dtype="float32") /* ty=Tensor[(5, 8, 10), float32] */;
  %515 = @func_991() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %516 = asin(%514) /* ty=Tensor[(5, 8, 10), float32] */;
  %517 = %515.0;
  (%516, %517)
}

def @func_12948() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) {
  %518 = @func_12538() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %519 = @func_12538() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %520 = %518.0;
  %521 = %519.0;
  (%520, %521)
}

def @func_12129() -> (Tensor[(12, 10, 5), float32],) {
  %522 = @func_6446() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %523 = %522.1;
  (%523,)
}

def @func_941(%var_933: Tensor[(432), float64]) -> (Tensor[(14, 1, 5), float64], Tensor[(500), float32], Tensor[(432), float64], Tensor[(14, 1, 5), float32]) {
  %524 = cast(meta[relay.Constant][21] /* ty=Tensor[(14, 1, 5), float64] */, dtype="float64") /* ty=Tensor[(14, 1, 5), float64] */;
  %525 = cast(%var_933, dtype="float64") /* ty=Tensor[(432), float64] */;
  %526 = reshape(%525, newshape=[8, 6, 9]) /* ty=Tensor[(8, 6, 9), float64] */;
  %527 = @func_380(%526) /* ty=(Tensor[(10, 10, 5), float32], Tensor[(500), float32], Tensor[(8, 6, 9), int8]) */;
  %528 = cast(meta[relay.Constant][21] /* ty=Tensor[(14, 1, 5), float64] */, dtype="float32") /* ty=Tensor[(14, 1, 5), float32] */;
  %529 = exp(%524) /* ty=Tensor[(14, 1, 5), float64] */;
  %530 = %527.1;
  %531 = sin(%528) /* ty=Tensor[(14, 1, 5), float32] */;
  (%529, %530, %var_933, %531)
}

def @func_5506(%var_5492: Tensor[(165), float32]) -> (Tensor[(12, 10, 5), float32], Tensor[(11, 5, 3), float32], Tensor[(165), float64]) {
  %532 = @func_1407() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %533 = cast(%var_5492, dtype="float32") /* ty=Tensor[(165), float32] */;
  %534 = reshape(%533, newshape=[11, 5, 3]) /* ty=Tensor[(11, 5, 3), float32] */;
  %535 = cast(%var_5492, dtype="float64") /* ty=Tensor[(165), float64] */;
  %536 = %532.2;
  %537 = @func_4322(%534) /* ty=Tensor[(11, 5, 3), float32] */;
  %538 = asinh(%535) /* ty=Tensor[(165), float64] */;
  (%536, %537, %538)
}

def @func_5622() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) {
  %539 = @func_1523() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %540 = %539.0;
  %541 = @func_2526() /* ty=Tensor[(12, 10, 5), float64] */;
  (%540, %541)
}

def @func_13316() -> (Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) {
  %542 = @func_4149() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32]) */;
  %543 = @func_4301() /* ty=(Tensor[(5, 8, 10), float32], Tensor[(12, 10, 5), float64]) */;
  %544 = %542.2;
  %545 = %543.1;
  %546 = @func_3503() /* ty=Tensor[(12, 10, 5), float64] */;
  (%544, %545, %546)
}

def @func_14588() -> (Tensor[(12, 10, 5), float32],) {
  %547 = @func_14081() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */;
  %548 = %547.1;
  (%548,)
}

def @func_16109() -> (Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), uint16]) {
  %549 = @func_614() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %550 = %549.0;
  %551 = @func_6204() /* ty=Tensor[(5, 8, 10), uint16] */;
  (%550, %551)
}

def @func_3340() -> (Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64]) {
  %552 = @func_2398() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */;
  %553 = @func_2398() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */;
  %554 = %552.0;
  %555 = %553.1;
  (%554, %555)
}

def @func_9541() -> (Tensor[(12, 10, 5), float64],) {
  %556 = @func_4219() /* ty=Tensor[(12, 10, 5), float64] */;
  (%556,)
}

def @func_4149() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32]) {
  %557 = @func_2740() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) */;
  %558 = @func_1407() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %559 = @func_4085() /* ty=(Tensor[(12, 10, 5), bool],) */;
  %560 = @func_1407() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %561 = %557.0;
  %562 = %558.2;
  %563 = %559.0;
  %564 = %560.2;
  (%561, %562, %563, %564)
}

def @func_4956(%var_4909: Tensor[(15, 1, 11), bool], %var_4918: Tensor[(1056, 2), float32], %var_4920: Tensor[(15, 5, 11), bool], %var_4926: Tensor[(216, 2), float64]) -> (Tensor[(12, 10, 5), float32], Tensor[(1056, 2), float32], Tensor[(15, 5, 11), float64], Tensor[(12, 10, 5), float32], Tensor[(216, 2), float64], Tensor[(12, 10, 5), float32]) {
  %565 = cast(%var_4918, dtype="float32") /* ty=Tensor[(1056, 2), float32] */;
  %566 = reshape(%565, newshape=[2112]) /* ty=Tensor[(2112), float32] */;
  %567 = @func_3630(%566) /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), uint16], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(2112), bool], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), int8]) */;
  %568 = cast(%var_4909, dtype="bool") /* ty=Tensor[(15, 1, 11), bool] */;
  %569 = cast(meta[relay.Constant][22] /* ty=Tensor[(15, 5, 11), bool] */, dtype="bool") /* ty=Tensor[(15, 5, 11), bool] */;
  %570 = logical_and(%568, %569) /* ty=Tensor[(15, 5, 11), bool] */;
  %571 = cast(%var_4920, dtype="float64") /* ty=Tensor[(15, 5, 11), float64] */;
  %572 = shape_of(%570, dtype="int32") /* ty=Tensor[(3), int32] */;
  %573 = cast(%570, dtype="float64") /* ty=Tensor[(15, 5, 11), float64] */;
  %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %575 = cast(%var_4926, dtype="float64") /* ty=Tensor[(216, 2), float64] */;
  %576 = reshape(%575, newshape=[2, 216]) /* ty=Tensor[(2, 216), float64] */;
  %577 = @func_3973(%576) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(2, 216), float64]) */;
  %578 = @func_1407() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %579 = %567.6;
  %580 = minimum(%573, %574) /* ty=Tensor[(15, 5, 11), float64] */;
  %581 = %577.1;
  %582 = %578.2;
  (%579, %var_4918, %580, %581, %var_4926, %582)
}

def @func_15003(%var_14995: Tensor[(5, 8, 10), int8]) -> Tensor[(5, 8, 10), bool] {
  %583 = @func_6863() /* ty=(Tensor[(5, 8, 10), int8],) */;
  %584 = %583.0;
  %585 = cast(%var_14995, dtype="bool") /* ty=Tensor[(5, 8, 10), bool] */;
  %586 = shape_of(%584, dtype="int32") /* ty=Tensor[(3), int32] */;
  %587 = cast(%584, dtype="bool") /* ty=Tensor[(5, 8, 10), bool] */;
  %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%587, %588) /* ty=Tensor[(5, 8, 10), bool] */
}

def @func_380(%var_358: Tensor[(8, 6, 9), float64]) -> (Tensor[(10, 10, 5), float32], Tensor[(500), float32], Tensor[(8, 6, 9), int8]) {
  %589 = cast(meta[relay.Constant][23] /* ty=Tensor[(500), float32] */, dtype="float32") /* ty=Tensor[(500), float32] */;
  %590 = reshape(%589, newshape=[10, 10, 5]) /* ty=Tensor[(10, 10, 5), float32] */;
  %591 = cast(%var_358, dtype="float64") /* ty=Tensor[(8, 6, 9), float64] */;
  %592 = cosh(%591) /* ty=Tensor[(8, 6, 9), float64] */;
  %593 = cast(meta[relay.Constant][24] /* ty=Tensor[(8, 6, 9), float64] */, dtype="int8") /* ty=Tensor[(8, 6, 9), int8] */;
  %594 = shape_of(%592, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(%592, dtype="int8") /* ty=Tensor[(8, 6, 9), int8] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %597 = @func_268(%590) /* ty=Tensor[(10, 10, 5), float32] */;
  %598 = right_shift(%595, %596) /* ty=Tensor[(8, 6, 9), int8] */;
  (%597, meta[relay.Constant][23] /* ty=Tensor[(500), float32] */, %598)
}

def @func_8090() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(14, 1, 5), float32]) {
  %599 = @func_991() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %600 = @func_1243() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %601 = @func_908() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %602 = @func_2019() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool]) */;
  %603 = @func_1940() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(14, 1, 5), float32]) */;
  %604 = %599.0;
  %605 = %600.0;
  %606 = %601.0;
  %607 = %602.1;
  %608 = %603.1;
  (%604, %605, %606, %607, %608)
}

def @func_16090() -> (Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), uint16], Tensor[(1440, 1), float64], Tensor[(5, 5, 14), float32], Tensor[(350), float32]) {
  %609 = @func_3128() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %610 = cast(meta[relay.Constant][25] /* ty=Tensor[(1440, 1), float64] */, dtype="float64") /* ty=Tensor[(1440, 1), float64] */;
  %611 = reshape(%610, newshape=[16, 10, 9]) /* ty=Tensor[(16, 10, 9), float64] */;
  %612 = @func_6079(%611) /* ty=(Tensor[(16, 10, 9), float64], Tensor[(5, 8, 10), uint16], Tensor[(2112), float32]) */;
  %613 = cast(meta[relay.Constant][26] /* ty=Tensor[(350), float32] */, dtype="float32") /* ty=Tensor[(350), float32] */;
  %614 = cast(meta[relay.Constant][26] /* ty=Tensor[(350), float32] */, dtype="float32") /* ty=Tensor[(350), float32] */;
  %615 = reshape(%613, newshape=[5, 5, 14]) /* ty=Tensor[(5, 5, 14), float32] */;
  %616 = reshape(%614, newshape=[5, 5, 14]) /* ty=Tensor[(5, 5, 14), float32] */;
  %617 = %609.0;
  %618 = %612.1;
  %619 = @func_12103(%615, %616) /* ty=Tensor[(5, 5, 14), float32] */;
  (%617, %618, meta[relay.Constant][25] /* ty=Tensor[(1440, 1), float64] */, %619, meta[relay.Constant][26] /* ty=Tensor[(350), float32] */)
}

def @func_14788() -> (Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), float32], Tensor[(12, 10, 5), float32], Tensor[(165), float32]) {
  %620 = @func_1323() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %621 = @func_11451() /* ty=(Tensor[(5, 8, 10), float32],) */;
  %622 = cast(meta[relay.Constant][27] /* ty=Tensor[(165), float32] */, dtype="float32") /* ty=Tensor[(165), float32] */;
  %623 = reshape(%622, newshape=[165]) /* ty=Tensor[(165), float32] */;
  %624 = @func_5506(%623) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(11, 5, 3), float32], Tensor[(165), float64]) */;
  %625 = %620.0;
  %626 = %621.0;
  %627 = %624.0;
  (%625, %626, %627, meta[relay.Constant][27] /* ty=Tensor[(165), float32] */)
}

def @func_4528() -> Tensor[(432), float64] {
  @func_3220() /* ty=Tensor[(432), float64] */
}

def @func_9391(%var_9372: Tensor[(130, 2), float32]) -> (Tensor[(12, 10, 5), float32], Tensor[(500), int32], Tensor[(108, 4), float64], Tensor[(130, 2), float32], Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float32]) {
  %628 = cast(meta[relay.Constant][28] /* ty=Tensor[(108, 4), float64] */, dtype="float64") /* ty=Tensor[(108, 4), float64] */;
  %629 = cast(%var_9372, dtype="float32") /* ty=Tensor[(130, 2), float32] */;
  %630 = reshape(%628, newshape=[432]) /* ty=Tensor[(432), float64] */;
  %631 = reshape(%629, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %632 = @func_4622(%630, %631) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(13, 2, 10), bool], Tensor[(260), float32], Tensor[(5, 8, 10), int8], Tensor[(2112), float32], Tensor[(500), int32]) */;
  %633 = @func_3527() /* ty=Tensor[(12, 10, 5), float32] */;
  %634 = %632.8;
  %635 = @func_3503() /* ty=Tensor[(12, 10, 5), float64] */;
  %636 = @func_4498() /* ty=Tensor[(5, 8, 10), int8] */;
  %637 = @func_6763() /* ty=Tensor[(12, 10, 5), float32] */;
  (%633, %634, meta[relay.Constant][28] /* ty=Tensor[(108, 4), float64] */, %var_9372, %635, %636, %637)
}

def @func_12538() -> (Tensor[(12, 10, 5), float32],) {
  %638 = @func_614() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %639 = %638.0;
  (%639,)
}

def @func_15291(%var_15278: Tensor[(260), float32]) -> (Tensor[(5, 8, 10), bool], Tensor[(12, 16, 11), int16], Tensor[(2112), int16], Tensor[(13, 2, 10), bool], Tensor[(260), float32], Tensor[(12, 10, 5), bool]) {
  %640 = cast(meta[relay.Constant][29] /* ty=Tensor[(2112), int16] */, dtype="int16") /* ty=Tensor[(2112), int16] */;
  %641 = cast(meta[relay.Constant][29] /* ty=Tensor[(2112), int16] */, dtype="int16") /* ty=Tensor[(2112), int16] */;
  %642 = reshape(%640, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), int16] */;
  %643 = reshape(%641, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), int16] */;
  %644 = @func_12244(%642, %643) /* ty=(Tensor[(12, 16, 11), int16],) */;
  %645 = cast(%var_15278, dtype="float32") /* ty=Tensor[(260), float32] */;
  %646 = reshape(%645, newshape=[13, 2, 10]) /* ty=Tensor[(13, 2, 10), float32] */;
  %647 = @func_2362(%646) /* ty=(Tensor[(13, 2, 10), bool],) */;
  %648 = @func_6873() /* ty=(Tensor[(12, 10, 5), bool],) */;
  %649 = @func_4771() /* ty=Tensor[(5, 8, 10), bool] */;
  %650 = %644.0;
  %651 = %647.0;
  %652 = %648.0;
  (%649, %650, meta[relay.Constant][29] /* ty=Tensor[(2112), int16] */, %651, %var_15278, %652)
}

def @func_6522() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(432), float64]) {
  %653 = @func_2740() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) */;
  %654 = @func_3128() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %655 = @func_3031() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %656 = %653.1;
  %657 = %654.0;
  %658 = %655.0;
  %659 = @func_3220() /* ty=Tensor[(432), float64] */;
  (%656, %657, %658, %659)
}

def @func_10063(%var_10048: Tensor[(1755), float64]) -> (Tensor[(12, 10, 5), float32], Tensor[(13, 9, 15), float64], Tensor[(1755), float64]) {
  %660 = @func_1678() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %661 = cast(%var_10048, dtype="float64") /* ty=Tensor[(1755), float64] */;
  %662 = reshape(%661, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), float64] */;
  %663 = %660.0;
  %664 = @func_7927(%662) /* ty=Tensor[(13, 9, 15), float64] */;
  (%663, %664, %var_10048)
}

def @func_7285() -> (Tensor[(432), float64], Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), int8]) {
  %665 = @func_5327() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(432), float64]) */;
  %666 = @func_1843() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */;
  %667 = %665.3;
  %668 = %666.0;
  %669 = @func_3827() /* ty=Tensor[(5, 8, 10), int8] */;
  (%667, %668, %669)
}

def @func_2129() -> Tensor[(12, 10, 5), float64] {
  %670 = @func_1243() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %670.0
}

def @func_13929() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) {
  %671 = @func_10565() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %672 = @func_5207() /* ty=Tensor[(12, 10, 5), float32] */;
  %673 = %671.0;
  (%672, %673)
}

def @func_6763() -> Tensor[(12, 10, 5), float32] {
  %674 = @func_4044() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %674.0
}

def @func_2503() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) {
  %675 = @func_710() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %676 = @func_769() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) */;
  %677 = @func_823() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %678 = %675.0;
  %679 = %676.1;
  %680 = %677.1;
  (%678, %679, %680)
}

def @func_4253() -> (Tensor[(12, 10, 5), float64],) {
  %681 = @func_3463() /* ty=Tensor[(12, 10, 5), float64] */;
  (%681,)
}

def @func_10243() -> (Tensor[(432), float64], Tensor[(432), float64], Tensor[(12, 10, 5), float64]) {
  %682 = @func_1174() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(10, 10, 5), float32], Tensor[(14, 1, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(500), int32]) */;
  %683 = %682.3;
  %684 = cast(%683, dtype="float64") /* ty=Tensor[(432), float64] */;
  %685 = reshape(%684, newshape=[432]) /* ty=Tensor[(432), float64] */;
  %686 = @func_968(%685) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(10, 10, 5), float32], Tensor[(432), float64]) */;
  %687 = %686.2;
  %688 = @func_4219() /* ty=Tensor[(12, 10, 5), float64] */;
  (%683, %687, %688)
}

def @func_8123() -> (Tensor[(12, 10, 5), float64],) {
  %689 = @func_1523() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %690 = %689.0;
  (%690,)
}

def @func_7517() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(5, 8, 10), int8], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), bool]) {
  %691 = @func_3400() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) */;
  %692 = @func_2688() /* ty=(Tensor[(16, 2, 9), bool], Tensor[(12, 10, 5), bool], Tensor[(14, 1, 5), float64], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool]) */;
  %693 = @func_2192() /* ty=(Tensor[(5, 8, 10), int8],) */;
  %694 = %691.1;
  %695 = %692.5;
  %696 = %693.0;
  %697 = @func_4498() /* ty=Tensor[(5, 8, 10), int8] */;
  %698 = @func_2989() /* ty=Tensor[(12, 10, 5), bool] */;
  (%694, %695, %696, %697, %698)
}

def @func_4044() -> (Tensor[(12, 10, 5), float32],) {
  %699 = @func_2398() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */;
  %700 = %699.1;
  %701 = cast(%700, dtype="float32") /* ty=Tensor[(12, 10, 5), float32] */;
  %702 = asin(%701) /* ty=Tensor[(12, 10, 5), float32] */;
  (%702,)
}

def @func_10473() -> (Tensor[(12, 10, 5), float64],) {
  %703 = @func_2398() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */;
  %704 = %703.1;
  (%704,)
}

def @func_13705() -> Tensor[(12, 10, 5), bool] {
  %705 = @func_1174() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(10, 10, 5), float32], Tensor[(14, 1, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(500), int32]) */;
  %705.0
}

def @func_8329() -> Tensor[(12, 10, 5), bool] {
  @func_3841() /* ty=Tensor[(12, 10, 5), bool] */
}

def @func_13734() -> (Tensor[(5, 8, 10), int8],) {
  %706 = @func_4498() /* ty=Tensor[(5, 8, 10), int8] */;
  (%706,)
}

def @func_3443() -> (Tensor[(5, 8, 10), uint16], Tensor[(5, 8, 10), int8]) {
  %707 = @func_2192() /* ty=(Tensor[(5, 8, 10), int8],) */;
  %708 = %707.0;
  %709 = cast(meta[relay.Constant][30] /* ty=Tensor[(5, 8, 10), int8] */, dtype="uint16") /* ty=Tensor[(5, 8, 10), uint16] */;
  %710 = shape_of(%708, dtype="int32") /* ty=Tensor[(3), int32] */;
  %711 = cast(%708, dtype="uint16") /* ty=Tensor[(5, 8, 10), uint16] */;
  %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %713 = @func_2839() /* ty=(Tensor[(5, 8, 10), int8],) */;
  %714 = bitwise_and(%711, %712) /* ty=Tensor[(5, 8, 10), uint16] */;
  %715 = %713.0;
  (%714, %715)
}

def @func_16844() -> (Tensor[(12, 10, 5), float64],) {
  %716 = @func_3031() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %717 = %716.0;
  (%717,)
}

def @func_8499() -> (Tensor[(12, 10, 5), float32],) {
  %718 = @func_6446() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %719 = %718.1;
  (%719,)
}

def @func_14478() -> Tensor[(5, 8, 10), float64] {
  %720 = @func_2839() /* ty=(Tensor[(5, 8, 10), int8],) */;
  %721 = %720.0;
  %722 = cast(%721, dtype="float64") /* ty=Tensor[(5, 8, 10), float64] */;
  acosh(%722) /* ty=Tensor[(5, 8, 10), float64] */
}

def @func_3827() -> Tensor[(5, 8, 10), int8] {
  %723 = @func_2192() /* ty=(Tensor[(5, 8, 10), int8],) */;
  %723.0
}

def @func_1618() -> Tensor[(12, 10, 5), bool] {
  %724 = @func_908() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %725 = %724.0;
  %726 = @func_1407() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %727 = %726.2;
  %728 = cast(%727, dtype="float64") /* ty=Tensor[(12, 10, 5), float64] */;
  %729 = acos(%728) /* ty=Tensor[(12, 10, 5), float64] */;
  %730 = cast(%729, dtype="bool") /* ty=Tensor[(12, 10, 5), bool] */;
  %731 = shape_of(%725, dtype="int32") /* ty=Tensor[(3), int32] */;
  %732 = cast(%725, dtype="bool") /* ty=Tensor[(12, 10, 5), bool] */;
  %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%732, %733) /* ty=Tensor[(12, 10, 5), bool] */
}

def @func_6863() -> (Tensor[(5, 8, 10), int8],) {
  %734 = @func_3443() /* ty=(Tensor[(5, 8, 10), uint16], Tensor[(5, 8, 10), int8]) */;
  %735 = %734.1;
  (%735,)
}

def @func_3973(%var_3961: Tensor[(2, 216), float64]) -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(2, 216), float64]) {
  %736 = @func_908() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %737 = cast(%var_3961, dtype="float64") /* ty=Tensor[(2, 216), float64] */;
  %738 = reshape(%737, newshape=[432]) /* ty=Tensor[(432), float64] */;
  %739 = @func_3710(%738) /* ty=(Tensor[(432), uint8], Tensor[(12, 10, 5), float64]) */;
  %740 = cast(%var_3961, dtype="float64") /* ty=Tensor[(2, 216), float64] */;
  %741 = %736.0;
  %742 = @func_3527() /* ty=Tensor[(12, 10, 5), float32] */;
  %743 = %739.1;
  %744 = atanh(%740) /* ty=Tensor[(2, 216), float64] */;
  (%741, %742, %743, %744)
}

def @func_8933(%var_8928: bool) -> (Tensor[(12, 10, 5), bool], Tensor[(7, 13, 14), bool], bool) {
  %745 = @func_4085() /* ty=(Tensor[(12, 10, 5), bool],) */;
  %746 = cast(%var_8928, dtype="bool") /* ty=bool */;
  %747 = reshape(%746, newshape=[]) /* ty=bool */;
  %748 = @func_3261(%747) /* ty=(Tensor[(7, 13, 14), bool],) */;
  %749 = %745.0;
  %750 = %748.0;
  (%749, %750, %var_8928)
}

def @func_6832() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(10, 10, 5), float32], Tensor[(500), float32]) {
  %751 = @func_1230() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %752 = @func_5068() /* ty=(Tensor[(432), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */;
  %753 = cast(meta[relay.Constant][31] /* ty=Tensor[(500), float32] */, dtype="float32") /* ty=Tensor[(500), float32] */;
  %754 = reshape(%753, newshape=[10, 10, 5]) /* ty=Tensor[(10, 10, 5), float32] */;
  %755 = %751.0;
  %756 = %752.1;
  %757 = @func_268(%754) /* ty=Tensor[(10, 10, 5), float32] */;
  (%755, %756, %757, meta[relay.Constant][31] /* ty=Tensor[(500), float32] */)
}

def @func_4622(%var_4584: Tensor[(432), float64], %var_4599: Tensor[(260), float32]) -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(13, 2, 10), bool], Tensor[(260), float32], Tensor[(5, 8, 10), int8], Tensor[(2112), float32], Tensor[(500), int32]) {
  %758 = @func_4149() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32]) */;
  %759 = cast(%var_4584, dtype="float64") /* ty=Tensor[(432), float64] */;
  %760 = reshape(%759, newshape=[432]) /* ty=Tensor[(432), float64] */;
  %761 = @func_968(%760) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(10, 10, 5), float32], Tensor[(432), float64]) */;
  %762 = @func_1618() /* ty=Tensor[(12, 10, 5), bool] */;
  %763 = cast(%762, dtype="float32") /* ty=Tensor[(12, 10, 5), float32] */;
  %764 = cast(%var_4599, dtype="float32") /* ty=Tensor[(260), float32] */;
  %765 = reshape(%764, newshape=[13, 2, 10]) /* ty=Tensor[(13, 2, 10), float32] */;
  %766 = @func_2362(%765) /* ty=(Tensor[(13, 2, 10), bool],) */;
  %767 = cast(meta[relay.Constant][32] /* ty=Tensor[(2112), float32] */, dtype="float32") /* ty=Tensor[(2112), float32] */;
  %768 = reshape(%767, newshape=[2112]) /* ty=Tensor[(2112), float32] */;
  %769 = @func_3630(%768) /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), uint16], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(2112), bool], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), int8]) */;
  %770 = @func_1174() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(10, 10, 5), float32], Tensor[(14, 1, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(500), int32]) */;
  %771 = %758.3;
  %772 = %761.0;
  %773 = sqrt(%763) /* ty=Tensor[(12, 10, 5), float32] */;
  %774 = %766.0;
  %775 = %769.7;
  %776 = %770.5;
  (%771, %772, %var_4584, %773, %774, %var_4599, %775, meta[relay.Constant][32] /* ty=Tensor[(2112), float32] */, %776)
}

def @func_9138(%var_9126: Tensor[(5, 4, 1), int8], %var_9127: Tensor[(5, 4, 1), int8]) -> (Tensor[(5, 4, ?), int8], Tensor[(12, 10, 5), float32], Tensor[(720), int8], Tensor[(1, 2112), float32], Tensor[(12, 10, 5), float64]) {
  %777 = cast(%var_9127, dtype="int8") /* ty=Tensor[(5, 4, 1), int8] */;
  %778 = shape_of(%var_9126, dtype="int32") /* ty=Tensor[(3), int32] */;
  %779 = cast(%var_9126, dtype="int8") /* ty=Tensor[(5, 4, 1), int8] */;
  %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %781 = cast(meta[relay.Constant][33] /* ty=Tensor[(720), int8] */, dtype="int8") /* ty=Tensor[(720), int8] */;
  %782 = cast(meta[relay.Constant][33] /* ty=Tensor[(720), int8] */, dtype="int8") /* ty=Tensor[(720), int8] */;
  %783 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 2112), float32] */, dtype="float32") /* ty=Tensor[(1, 2112), float32] */;
  %784 = reshape(%781, newshape=[16, 5, 9]) /* ty=Tensor[(16, 5, 9), int8] */;
  %785 = reshape(%782, newshape=[16, 5, 9]) /* ty=Tensor[(16, 5, 9), int8] */;
  %786 = reshape(%783, newshape=[528, 4]) /* ty=Tensor[(528, 4), float32] */;
  %787 = @func_8806(%784, %785, %786) /* ty=(Tensor[(16, 5, 9), int8], Tensor[(12, 10, 5), float32], Tensor[(528, 4), float32], Tensor[(13, 12, 14), int32], Tensor[(2184), int32], Tensor[(12, 10, 5), float32], Tensor[(13, 2, 4), float32]) */;
  %788 = multiply(%779, %780) /* ty=Tensor[(5, 4, ?), int8] */;
  %789 = %787.1;
  %790 = @func_2129() /* ty=Tensor[(12, 10, 5), float64] */;
  (%788, %789, meta[relay.Constant][33] /* ty=Tensor[(720), int8] */, meta[relay.Constant][34] /* ty=Tensor[(1, 2112), float32] */, %790)
}

def @func_7019() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), bool], Tensor[(12, 10, 5), float32]) {
  %791 = @func_2882() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %792 = @func_4044() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %793 = @func_614() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %794 = %791.0;
  %795 = %792.0;
  %796 = @func_4771() /* ty=Tensor[(5, 8, 10), bool] */;
  %797 = %793.0;
  (%794, %795, %796, %797)
}

def @func_16423(%var_16417: uint8, %var_16418: Tensor[(6, 14, 7), uint8]) -> Tensor[(6, 14, 7), uint8] {
  %798 = cast(%var_16417, dtype="uint8") /* ty=uint8 */;
  %799 = cast(%var_16418, dtype="uint8") /* ty=Tensor[(6, 14, 7), uint8] */;
  minimum(%798, %799) /* ty=Tensor[(6, 14, 7), uint8] */
}

def @func_12807() -> (Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(165), float32], Tensor[(165), float32], Tensor[(14, 1, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) {
  %800 = @func_10103() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %801 = @func_11744() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %802 = @func_3128() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %803 = cast(meta[relay.Constant][35] /* ty=Tensor[(165), float32] */, dtype="float32") /* ty=Tensor[(165), float32] */;
  %804 = reshape(%803, newshape=[165]) /* ty=Tensor[(165), float32] */;
  %805 = @func_6179(%804) /* ty=(Tensor[(432), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(11, 5, 3), float32], Tensor[(165), float32], Tensor[(12, 10, 5), float32]) */;
  %806 = @func_12307() /* ty=(Tensor[(14, 1, 5), float32],) */;
  %807 = @func_1703() /* ty=(Tensor[(14, 1, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %808 = @func_1042() /* ty=Tensor[(12, 10, 5), bool] */;
  %809 = %800.0;
  %810 = %801.0;
  %811 = %802.0;
  %812 = @func_12205() /* ty=Tensor[(12, 10, 5), float32] */;
  %813 = %805.4;
  %814 = %806.0;
  %815 = %807.1;
  %816 = @func_7976() /* ty=Tensor[(12, 10, 5), float64] */;
  (%808, %809, %810, %811, %812, %813, meta[relay.Constant][35] /* ty=Tensor[(165), float32] */, %814, %815, %816)
}

def @func_10279() -> (Tensor[(12, 10, 5), bool],) {
  %817 = @func_1618() /* ty=Tensor[(12, 10, 5), bool] */;
  (%817,)
}

def @func_1112(%var_1088: Tensor[(432), float64], %var_1104: Tensor[(500), float32]) -> (Tensor[(12, 10, 5), float32], Tensor[(14, 1, 5), float64], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(10, 10, 5), float32], Tensor[(500), float32], Tensor[(12, 10, 5), float64]) {
  %818 = @func_614() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %819 = cast(%var_1088, dtype="float64") /* ty=Tensor[(432), float64] */;
  %820 = reshape(%819, newshape=[432]) /* ty=Tensor[(432), float64] */;
  %821 = @func_941(%820) /* ty=(Tensor[(14, 1, 5), float64], Tensor[(500), float32], Tensor[(432), float64], Tensor[(14, 1, 5), float32]) */;
  %822 = @func_908() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %823 = cast(%var_1104, dtype="float32") /* ty=Tensor[(500), float32] */;
  %824 = reshape(%823, newshape=[10, 10, 5]) /* ty=Tensor[(10, 10, 5), float32] */;
  %825 = @func_991() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %826 = %818.0;
  %827 = %821.0;
  %828 = %822.0;
  %829 = @func_268(%824) /* ty=Tensor[(10, 10, 5), float32] */;
  %830 = %825.0;
  (%826, %827, %var_1088, %828, %829, %var_1104, %830)
}

def @func_968(%var_965: Tensor[(432), float64]) -> (Tensor[(12, 10, 5), float32], Tensor[(10, 10, 5), float32], Tensor[(432), float64]) {
  %831 = @func_823() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %832 = cast(%var_965, dtype="float64") /* ty=Tensor[(432), float64] */;
  %833 = reshape(%832, newshape=[8, 6, 9]) /* ty=Tensor[(8, 6, 9), float64] */;
  %834 = @func_380(%833) /* ty=(Tensor[(10, 10, 5), float32], Tensor[(500), float32], Tensor[(8, 6, 9), int8]) */;
  %835 = %831.1;
  %836 = %834.0;
  (%835, %836, %var_965)
}

def @func_9826() -> (Tensor[(12, 10, 5), float32],) {
  %837 = @func_4044() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %838 = %837.0;
  (%838,)
}

def @func_6446() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) {
  %839 = @func_1678() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %840 = @func_3527() /* ty=Tensor[(12, 10, 5), float32] */;
  %841 = %839.0;
  (%840, %841)
}

def @func_14081() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) {
  %842 = @func_10080() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %843 = @func_10103() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %844 = %842.0;
  %845 = %843.0;
  (%844, %845)
}

def @func_5418() -> (Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64]) {
  %846 = @func_2019() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool]) */;
  %847 = @func_1940() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(14, 1, 5), float32]) */;
  %848 = @func_991() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %849 = %846.1;
  %850 = %847.0;
  %851 = %848.0;
  (%849, %850, %851)
}

def @func_14367(%var_14346: Tensor[(5, 8, 10), int8]) -> (Tensor[(5, 8, 10), bool], Tensor[(12, 10, 5), float64]) {
  %852 = @func_9860() /* ty=Tensor[(5, 8, 10), int8] */;
  %853 = cast(%var_14346, dtype="bool") /* ty=Tensor[(5, 8, 10), bool] */;
  %854 = shape_of(%852, dtype="int32") /* ty=Tensor[(3), int32] */;
  %855 = cast(%852, dtype="bool") /* ty=Tensor[(5, 8, 10), bool] */;
  %856 = dyn.reshape(%853, %854, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %857 = @func_4253() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %858 = greater(%855, %856) /* ty=Tensor[(5, 8, 10), bool] */;
  %859 = %857.0;
  (%858, %859)
}

def @func_1703() -> (Tensor[(14, 1, 5), float32], Tensor[(12, 10, 5), float32]) {
  %860 = @func_1174() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(10, 10, 5), float32], Tensor[(14, 1, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(500), int32]) */;
  %861 = @func_908() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %862 = %860.2;
  %863 = %861.0;
  (%862, %863)
}

def @func_13394(%var_13382: Tensor[(245, 2), float32]) -> (Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(720), int8], Tensor[(12, 10, 5), float32], Tensor[(245, 2), float32]) {
  %864 = cast(meta[relay.Constant][36] /* ty=Tensor[(720), int8] */, dtype="int8") /* ty=Tensor[(720), int8] */;
  %865 = reshape(%864, newshape=[720]) /* ty=Tensor[(720), int8] */;
  %866 = @func_11163(%865) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(720), int8], Tensor[(1056, 2), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */;
  %867 = cast(%var_13382, dtype="float32") /* ty=Tensor[(245, 2), float32] */;
  %868 = reshape(%867, newshape=[14, 7, 5]) /* ty=Tensor[(14, 7, 5), float32] */;
  %869 = @func_2266(%868) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(14, 7, 5), bool]) */;
  %870 = @func_4528() /* ty=Tensor[(432), float64] */;
  %871 = %866.0;
  %872 = %869.0;
  (%870, %871, meta[relay.Constant][36] /* ty=Tensor[(720), int8] */, %872, %var_13382)
}

def @func_15647() -> (Tensor[(12, 10, 5), float32], Tensor[(1, 432), float64], Tensor[(165), bool]) {
  %873 = @func_14588() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %874 = cast(meta[relay.Constant][37] /* ty=Tensor[(165), bool] */, dtype="bool") /* ty=Tensor[(165), bool] */;
  %875 = reshape(%874, newshape=[165]) /* ty=Tensor[(165), bool] */;
  %876 = @func_5673(%875) /* ty=(Tensor[(5, 8, 10), int8], Tensor[(216, 2), float64], Tensor[(165), bool], Tensor[(2112), float32], Tensor[(825), bool], Tensor[(1, 432), float64]) */;
  %877 = %873.0;
  %878 = %876.5;
  (%877, %878, meta[relay.Constant][37] /* ty=Tensor[(165), bool] */)
}

def @func_16485() -> (Tensor[(12, 10, 5), float64],) {
  %879 = @func_4219() /* ty=Tensor[(12, 10, 5), float64] */;
  (%879,)
}

def @func_9454() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) {
  %880 = @func_2129() /* ty=Tensor[(12, 10, 5), float64] */;
  %881 = @func_2989() /* ty=Tensor[(12, 10, 5), bool] */;
  (%880, %881)
}

def @func_14203(%var_14178: Tensor[(14, 8, 11), int16], %var_14179: Tensor[(14, 8, 11), int16]) -> (Tensor[(14, 8, 11), bool], Tensor[(12, 10, 5), bool]) {
  %882 = cast(%var_14179, dtype="bool") /* ty=Tensor[(14, 8, 11), bool] */;
  %883 = shape_of(%var_14178, dtype="int32") /* ty=Tensor[(3), int32] */;
  %884 = cast(%var_14178, dtype="bool") /* ty=Tensor[(14, 8, 11), bool] */;
  %885 = dyn.reshape(%882, %883, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %886 = greater_equal(%884, %885) /* ty=Tensor[(14, 8, 11), bool] */;
  %887 = @func_2989() /* ty=Tensor[(12, 10, 5), bool] */;
  (%886, %887)
}

def @func_3031() -> (Tensor[(12, 10, 5), float64],) {
  %888 = @func_2129() /* ty=Tensor[(12, 10, 5), float64] */;
  (%888,)
}

def @func_769() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) {
  %889 = @func_710() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %890 = @func_710() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %891 = %890.0;
  %892 = cast(%891, dtype="float64") /* ty=Tensor[(12, 10, 5), float64] */;
  %893 = %889.0;
  %894 = exp(%892) /* ty=Tensor[(12, 10, 5), float64] */;
  (%893, %894)
}

def @func_3261(%var_3255: bool) -> (Tensor[(7, 13, 14), bool],) {
  %895 = cast(%var_3255, dtype="bool") /* ty=bool */;
  %896 = cast(meta[relay.Constant][38] /* ty=Tensor[(7, 13, 14), bool] */, dtype="bool") /* ty=Tensor[(7, 13, 14), bool] */;
  %897 = logical_or(%895, %896) /* ty=Tensor[(7, 13, 14), bool] */;
  (%897,)
}

def @func_10220(%var_10143: Tensor[(10, 10, 5), float32]) -> (Tensor[(12, 10, 5), float64], Tensor[(10, 10, 5), bool], Tensor[(12, 10, 5), bool], Tensor[(5, 8, 10), int8], Tensor[(1, 260), float32]) {
  %898 = @func_5099() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */;
  %899 = @func_6832() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(10, 10, 5), float32], Tensor[(500), float32]) */;
  %900 = %899.2;
  %901 = cast(%var_10143, dtype="bool") /* ty=Tensor[(10, 10, 5), bool] */;
  %902 = shape_of(%900, dtype="int32") /* ty=Tensor[(3), int32] */;
  %903 = cast(%900, dtype="bool") /* ty=Tensor[(10, 10, 5), bool] */;
  %904 = dyn.reshape(%901, %902, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %905 = @func_8710() /* ty=(Tensor[(12, 10, 5), bool],) */;
  %906 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 260), float32] */, dtype="float32") /* ty=Tensor[(1, 260), float32] */;
  %907 = reshape(%906, newshape=[130, 2]) /* ty=Tensor[(130, 2), float32] */;
  %908 = @func_9391(%907) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(500), int32], Tensor[(108, 4), float64], Tensor[(130, 2), float32], Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float32]) */;
  %909 = %898.0;
  %910 = equal(%903, %904) /* ty=Tensor[(10, 10, 5), bool] */;
  %911 = %905.0;
  %912 = %908.5;
  (%909, %910, %911, %912, meta[relay.Constant][39] /* ty=Tensor[(1, 260), float32] */)
}

def @func_2526() -> Tensor[(12, 10, 5), float64] {
  %913 = @func_1843() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */;
  %913.0
}

def @func_11744() -> (Tensor[(12, 10, 5), float64],) {
  %914 = @func_8123() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %915 = %914.0;
  (%915,)
}

def @func_4007() -> (Tensor[(12, 10, 5), float32],) {
  %916 = @func_823() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %917 = %916.0;
  (%917,)
}

def @func_1174() -> (Tensor[(12, 10, 5), bool], Tensor[(10, 10, 5), float32], Tensor[(14, 1, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(500), int32]) {
  %918 = cast(meta[relay.Constant][40] /* ty=Tensor[(500), float32] */, dtype="float32") /* ty=Tensor[(500), float32] */;
  %919 = reshape(%918, newshape=[10, 10, 5]) /* ty=Tensor[(10, 10, 5), float32] */;
  %920 = cast(meta[relay.Constant][41] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
  %921 = reshape(%920, newshape=[432]) /* ty=Tensor[(432), float64] */;
  %922 = @func_941(%921) /* ty=(Tensor[(14, 1, 5), float64], Tensor[(500), float32], Tensor[(432), float64], Tensor[(14, 1, 5), float32]) */;
  %923 = @func_614() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %924 = cast(meta[relay.Constant][40] /* ty=Tensor[(500), float32] */, dtype="float64") /* ty=Tensor[(500), float64] */;
  %925 = log2(%924) /* ty=Tensor[(500), float64] */;
  %926 = cast(meta[relay.Constant][40] /* ty=Tensor[(500), float32] */, dtype="int32") /* ty=Tensor[(500), int32] */;
  %927 = shape_of(%925, dtype="int32") /* ty=Tensor[(1), int32] */;
  %928 = cast(%925, dtype="int32") /* ty=Tensor[(500), int32] */;
  %929 = dyn.reshape(%926, %927, newshape=[]) /* ty=Tensor[(?), int32] */;
  %930 = @func_1042() /* ty=Tensor[(12, 10, 5), bool] */;
  %931 = @func_268(%919) /* ty=Tensor[(10, 10, 5), float32] */;
  %932 = %922.3;
  %933 = %923.0;
  %934 = left_shift(%928, %929) /* ty=Tensor[(500), int32] */;
  (%930, %931, %932, meta[relay.Constant][41] /* ty=Tensor[(432), float64] */, %933, %934)
}

def @func_9243() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) {
  %935 = @func_9201() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */;
  %936 = @func_1323() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %937 = %935.0;
  %938 = %936.0;
  (%937, %938)
}

def @func_4322(%var_4316: Tensor[(11, 5, 3), float32]) -> Tensor[(11, 5, 3), float32] {
  %939 = cast(%var_4316, dtype="float32") /* ty=Tensor[(11, 5, 3), float32] */;
  cosh(%939) /* ty=Tensor[(11, 5, 3), float32] */
}

def @func_9860() -> Tensor[(5, 8, 10), int8] {
  %940 = @func_7517() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(5, 8, 10), int8], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), bool]) */;
  %940.2
}

def @func_3149() -> (Tensor[(12, 10, 5), float64],) {
  %941 = @func_1243() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %942 = %941.0;
  (%942,)
}

def @func_8665() -> (Tensor[(12, 10, 5), bool],) {
  %943 = @func_8329() /* ty=Tensor[(12, 10, 5), bool] */;
  (%943,)
}

def @func_6363() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) {
  %944 = @func_5563() /* ty=Tensor[(12, 10, 5), float32] */;
  %945 = @func_6250() /* ty=Tensor[(12, 10, 5), float32] */;
  (%944, %945)
}

def @func_4771() -> Tensor[(5, 8, 10), bool] {
  %946 = @func_4498() /* ty=Tensor[(5, 8, 10), int8] */;
  %947 = cast(%946, dtype="float32") /* ty=Tensor[(5, 8, 10), float32] */;
  %948 = sin(%947) /* ty=Tensor[(5, 8, 10), float32] */;
  %949 = cast(%948, dtype="bool") /* ty=Tensor[(5, 8, 10), bool] */;
  %950 = shape_of(%946, dtype="int32") /* ty=Tensor[(3), int32] */;
  %951 = cast(%946, dtype="bool") /* ty=Tensor[(5, 8, 10), bool] */;
  %952 = dyn.reshape(%949, %950, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%951, %952) /* ty=Tensor[(5, 8, 10), bool] */
}

def @func_6587() -> (Tensor[(12, 10, 5), bool],) {
  %953 = @func_1843() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */;
  %954 = %953.1;
  (%954,)
}

def @func_7855() -> Tensor[(12, 10, 5), float32] {
  %955 = @func_1407() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %955.2
}

def @func_12205() -> Tensor[(12, 10, 5), float32] {
  %956 = @func_908() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %956.0
}

def @func_9201() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) {
  %957 = @func_6446() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %958 = @func_3503() /* ty=Tensor[(12, 10, 5), float64] */;
  %959 = %957.0;
  (%958, %959)
}

def @func_5327() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(432), float64]) {
  %960 = @func_5068() /* ty=(Tensor[(432), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */;
  %961 = @func_4085() /* ty=(Tensor[(12, 10, 5), bool],) */;
  %962 = @func_1678() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %963 = @func_1174() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(10, 10, 5), float32], Tensor[(14, 1, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(500), int32]) */;
  %964 = %960.4;
  %965 = %961.0;
  %966 = %962.0;
  %967 = %963.3;
  (%964, %965, %966, %967)
}

def @func_15182(%var_15154: Tensor[(10, 11, 16), float64]) -> (Tensor[(10, 11, 16), uint64], Tensor[(10, 11, 16), float32]) {
  %968 = cast(meta[relay.Constant][42] /* ty=Tensor[(10, 11, 16), float64] */, dtype="uint64") /* ty=Tensor[(10, 11, 16), uint64] */;
  %969 = shape_of(%var_15154, dtype="int32") /* ty=Tensor[(3), int32] */;
  %970 = cast(%var_15154, dtype="uint64") /* ty=Tensor[(10, 11, 16), uint64] */;
  %971 = dyn.reshape(%968, %969, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %972 = cast(%var_15154, dtype="float64") /* ty=Tensor[(10, 11, 16), float64] */;
  %973 = sigmoid(%972) /* ty=Tensor[(10, 11, 16), float64] */;
  %974 = cast(%973, dtype="float32") /* ty=Tensor[(10, 11, 16), float32] */;
  %975 = logical_xor(%970, %971) /* ty=Tensor[(10, 11, 16), uint64] */;
  %976 = log2(%974) /* ty=Tensor[(10, 11, 16), float32] */;
  (%975, %976)
}

def @func_15402() -> (Tensor[(5, 8, 10), uint16], Tensor[(12, 10, 5), float32]) {
  %977 = @func_12571() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) */;
  %978 = @func_10350() /* ty=Tensor[(5, 8, 10), uint16] */;
  %979 = %977.0;
  (%978, %979)
}

def @func_6953() -> (Tensor[(500), int32], Tensor[(12, 10, 5), float64]) {
  %980 = @func_1174() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(10, 10, 5), float32], Tensor[(14, 1, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(500), int32]) */;
  %981 = %980.5;
  %982 = @func_2155() /* ty=Tensor[(12, 10, 5), float64] */;
  (%981, %982)
}

def @func_7534() -> (Tensor[(12, 10, 5), bool],) {
  %983 = @func_5418() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64]) */;
  %984 = %983.0;
  (%984,)
}

def @func_10835() -> (Tensor[(12, 10, 5), float32],) {
  %985 = @func_9902() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %986 = %985.0;
  (%986,)
}

def @func_2974(%var_2944: Tensor[(2, 14, 1), float32]) -> (Tensor[(2, 14, 1), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) {
  %987 = cast(%var_2944, dtype="float32") /* ty=Tensor[(2, 14, 1), float32] */;
  %988 = @func_1323() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %989 = asinh(%987) /* ty=Tensor[(2, 14, 1), float32] */;
  %990 = %988.0;
  %991 = @func_2155() /* ty=Tensor[(12, 10, 5), float64] */;
  (%989, %990, %991)
}

def @func_14152() -> (Tensor[(5, 8, 10), float64],) {
  %992 = @func_4301() /* ty=(Tensor[(5, 8, 10), float32], Tensor[(12, 10, 5), float64]) */;
  %993 = %992.0;
  %994 = cast(%993, dtype="float64") /* ty=Tensor[(5, 8, 10), float64] */;
  %995 = erf(%994) /* ty=Tensor[(5, 8, 10), float64] */;
  (%995,)
}

def @func_16039(%var_16029: uint64, %var_16030: Tensor[(14, 12, 12), uint64]) -> (Tensor[(14, 12, 12), uint64], Tensor[(12, 10, 5), float64]) {
  %996 = cast(%var_16029, dtype="uint64") /* ty=uint64 */;
  %997 = cast(%var_16030, dtype="uint64") /* ty=Tensor[(14, 12, 12), uint64] */;
  %998 = @func_9541() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %999 = bitwise_and(%996, %997) /* ty=Tensor[(14, 12, 12), uint64] */;
  %1000 = %998.0;
  (%999, %1000)
}

def @func_2989() -> Tensor[(12, 10, 5), bool] {
  %1001 = @func_2019() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool]) */;
  %1001.1
}

def @func_11610() -> (Tensor[(5, 8, 10), float32],) {
  %1002 = @func_2192() /* ty=(Tensor[(5, 8, 10), int8],) */;
  %1003 = %1002.0;
  %1004 = cast(%1003, dtype="float32") /* ty=Tensor[(5, 8, 10), float32] */;
  %1005 = acos(%1004) /* ty=Tensor[(5, 8, 10), float32] */;
  (%1005,)
}

def @func_8915() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(432), float64], Tensor[(1, 432), float64], Tensor[(165), bool], Tensor[(500), int32], Tensor[(12, 10, 5), float64], Tensor[(10, 4, 16), float64], Tensor[(640), float64]) {
  %1006 = @func_6446() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %1007 = @func_3340() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64]) */;
  %1008 = @func_7125() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(432), float64]) */;
  %1009 = cast(meta[relay.Constant][43] /* ty=Tensor[(165), bool] */, dtype="bool") /* ty=Tensor[(165), bool] */;
  %1010 = reshape(%1009, newshape=[165]) /* ty=Tensor[(165), bool] */;
  %1011 = @func_5673(%1010) /* ty=(Tensor[(5, 8, 10), int8], Tensor[(216, 2), float64], Tensor[(165), bool], Tensor[(2112), float32], Tensor[(825), bool], Tensor[(1, 432), float64]) */;
  %1012 = @func_1174() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(10, 10, 5), float32], Tensor[(14, 1, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(500), int32]) */;
  %1013 = cast(meta[relay.Constant][44] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
  %1014 = reshape(%1013, newshape=[10, 4, 16]) /* ty=Tensor[(10, 4, 16), float64] */;
  %1015 = %1006.0;
  %1016 = %1007.0;
  %1017 = %1008.1;
  %1018 = %1011.5;
  %1019 = %1012.5;
  %1020 = @func_4572() /* ty=Tensor[(12, 10, 5), float64] */;
  %1021 = @func_4445(%1014) /* ty=Tensor[(10, 4, 16), float64] */;
  (%1015, %1016, %1017, %1018, meta[relay.Constant][43] /* ty=Tensor[(165), bool] */, %1019, %1020, %1021, meta[relay.Constant][44] /* ty=Tensor[(640), float64] */)
}

def @func_15121(%var_15051: Tensor[(500), float32]) -> (Tensor[(10, 10, 5), float32], Tensor[(500), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(5, 8, 10), int64], Tensor[(13, 2, 4), float64]) {
  %1022 = cast(%var_15051, dtype="float32") /* ty=Tensor[(500), float32] */;
  %1023 = reshape(%1022, newshape=[10, 10, 5]) /* ty=Tensor[(10, 10, 5), float32] */;
  %1024 = @func_1174() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(10, 10, 5), float32], Tensor[(14, 1, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(500), int32]) */;
  %1025 = @func_1407() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %1026 = @func_6863() /* ty=(Tensor[(5, 8, 10), int8],) */;
  %1027 = %1026.0;
  %1028 = cast(%1027, dtype="float32") /* ty=Tensor[(5, 8, 10), float32] */;
  %1029 = tan(%1028) /* ty=Tensor[(5, 8, 10), float32] */;
  %1030 = cast(%1029, dtype="float32") /* ty=Tensor[(5, 8, 10), float32] */;
  %1031 = cosh(%1030) /* ty=Tensor[(5, 8, 10), float32] */;
  %1032 = @func_7285() /* ty=(Tensor[(432), float64], Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), int8]) */;
  %1033 = %1032.2;
  %1034 = cast(%1033, dtype="int64") /* ty=Tensor[(5, 8, 10), int64] */;
  %1035 = shape_of(%1031, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1036 = cast(%1031, dtype="int64") /* ty=Tensor[(5, 8, 10), int64] */;
  %1037 = dyn.reshape(%1034, %1035, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1038 = @func_268(%1023) /* ty=Tensor[(10, 10, 5), float32] */;
  %1039 = @func_2526() /* ty=Tensor[(12, 10, 5), float64] */;
  %1040 = %1024.4;
  %1041 = %1025.0;
  %1042 = right_shift(%1036, %1037) /* ty=Tensor[(5, 8, 10), int64] */;
  %1043 = @func_4699() /* ty=Tensor[(13, 2, 4), float64] */;
  (%1038, %var_15051, %1039, %1040, %1041, %1042, %1043)
}

def @func_16394() -> Tensor[(12, 10, 5), float64] {
  %1044 = @func_10243() /* ty=(Tensor[(432), float64], Tensor[(432), float64], Tensor[(12, 10, 5), float64]) */;
  %1044.2
}

def @func_11690() -> Tensor[(12, 10, 5), float64] {
  %1045 = @func_1523() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %1045.0
}

def @func_3400() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) {
  %1046 = @func_2155() /* ty=Tensor[(12, 10, 5), float64] */;
  %1047 = @func_2129() /* ty=Tensor[(12, 10, 5), float64] */;
  (%1046, %1047)
}

def @func_14920() -> (Tensor[(12, 10, 5), bool], Tensor[(640), float64], Tensor[(12, 10, 5), float64], Tensor[(260), float32]) {
  %1048 = @func_10519() /* ty=(Tensor[(640), float64], Tensor[(12, 10, 5), float64]) */;
  %1049 = cast(meta[relay.Constant][45] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %1050 = reshape(%1049, newshape=[130, 2]) /* ty=Tensor[(130, 2), float32] */;
  %1051 = @func_9391(%1050) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(500), int32], Tensor[(108, 4), float64], Tensor[(130, 2), float32], Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float32]) */;
  %1052 = @func_3841() /* ty=Tensor[(12, 10, 5), bool] */;
  %1053 = %1048.0;
  %1054 = %1051.4;
  (%1052, %1053, %1054, meta[relay.Constant][45] /* ty=Tensor[(260), float32] */)
}

def @func_5918(%var_5910: Tensor[(2, 8, 7), float64], %var_5911: Tensor[(2, 8, 7), float64]) -> (Tensor[(2, 8, 7), float64],) {
  %1055 = cast(%var_5911, dtype="float64") /* ty=Tensor[(2, 8, 7), float64] */;
  %1056 = shape_of(%var_5910, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1057 = cast(%var_5910, dtype="float64") /* ty=Tensor[(2, 8, 7), float64] */;
  %1058 = dyn.reshape(%1055, %1056, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1059 = floor_divide(%1057, %1058) /* ty=Tensor[(2, 8, 7), float64] */;
  (%1059,)
}

def @func_14328() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32]) {
  %1060 = @func_7285() /* ty=(Tensor[(432), float64], Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), int8]) */;
  %1061 = @func_823() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %1062 = @func_8710() /* ty=(Tensor[(12, 10, 5), bool],) */;
  %1063 = @func_8499() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %1064 = %1060.1;
  %1065 = %1061.0;
  %1066 = %1062.0;
  %1067 = %1063.0;
  (%1064, %1065, %1066, %1067)
}

def @func_9308() -> Tensor[(12, 10, 5), bool] {
  %1068 = @func_1940() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(14, 1, 5), float32]) */;
  %1068.0
}

def @func_5099() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) {
  %1069 = @func_2882() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %1070 = @func_4178() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(432), float64]) */;
  %1071 = %1069.0;
  %1072 = %1070.0;
  (%1071, %1072)
}

def @func_2882() -> (Tensor[(12, 10, 5), float64],) {
  %1073 = @func_1243() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %1074 = %1073.0;
  (%1074,)
}

def @func_9772(%var_9762: Tensor[(112), float64]) -> (Tensor[(500), int32], Tensor[(12, 10, 5), bool], Tensor[(2, 8, 7), bool]) {
  %1075 = @func_8915() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(432), float64], Tensor[(1, 432), float64], Tensor[(165), bool], Tensor[(500), int32], Tensor[(12, 10, 5), float64], Tensor[(10, 4, 16), float64], Tensor[(640), float64]) */;
  %1076 = @func_6873() /* ty=(Tensor[(12, 10, 5), bool],) */;
  %1077 = cast(%var_9762, dtype="float64") /* ty=Tensor[(112), float64] */;
  %1078 = cast(%var_9762, dtype="float64") /* ty=Tensor[(112), float64] */;
  %1079 = reshape(%1077, newshape=[2, 8, 7]) /* ty=Tensor[(2, 8, 7), float64] */;
  %1080 = reshape(%1078, newshape=[2, 8, 7]) /* ty=Tensor[(2, 8, 7), float64] */;
  %1081 = @func_5918(%1079, %1080) /* ty=(Tensor[(2, 8, 7), float64],) */;
  %1082 = %1081.0;
  %1083 = cast(%var_9762, dtype="bool") /* ty=Tensor[(112), bool] */;
  %1084 = shape_of(%1082, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1085 = cast(%1082, dtype="bool") /* ty=Tensor[(2, 8, 7), bool] */;
  %1086 = dyn.reshape(%1083, %1084, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1087 = %1075.5;
  %1088 = %1076.0;
  %1089 = not_equal(%1085, %1086) /* ty=Tensor[(2, 8, 7), bool] */;
  (%1087, %1088, %1089)
}

def @func_4699() -> Tensor[(13, 2, 4), float64] {
  %1090 = cast(meta[relay.Constant][46] /* ty=Tensor[(13, 2, 4), float64] */, dtype="float64") /* ty=Tensor[(13, 2, 4), float64] */;
  acos(%1090) /* ty=Tensor[(13, 2, 4), float64] */
}

def @func_5207() -> Tensor[(12, 10, 5), float32] {
  @func_1416() /* ty=Tensor[(12, 10, 5), float32] */
}

def @func_3710(%var_3661: Tensor[(432), float64]) -> (Tensor[(432), uint8], Tensor[(12, 10, 5), float64]) {
  %1091 = @func_3220() /* ty=Tensor[(432), float64] */;
  %1092 = cast(%var_3661, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %1093 = shape_of(%1091, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1094 = cast(%1091, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %1095 = dyn.reshape(%1092, %1093, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %1096 = logical_xor(%1094, %1095) /* ty=Tensor[(432), uint8] */;
  %1097 = @func_3089() /* ty=Tensor[(12, 10, 5), float64] */;
  (%1096, %1097)
}

def @func_6204() -> Tensor[(5, 8, 10), uint16] {
  %1098 = @func_3443() /* ty=(Tensor[(5, 8, 10), uint16], Tensor[(5, 8, 10), int8]) */;
  %1098.0
}

def @func_13123() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) {
  %1099 = @func_1678() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %1100 = @func_1243() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %1101 = %1099.0;
  %1102 = @func_11072() /* ty=Tensor[(12, 10, 5), float64] */;
  %1103 = %1100.0;
  (%1101, %1102, %1103)
}

def @func_11385(%var_11366: uint16, %var_11367: Tensor[(15, 5, 1), uint16]) -> Tensor[(15, 5, 1), float32] {
  %1104 = cast(%var_11366, dtype="bool") /* ty=bool */;
  %1105 = cast(%var_11367, dtype="bool") /* ty=Tensor[(15, 5, 1), bool] */;
  %1106 = greater_equal(%1104, %1105) /* ty=Tensor[(15, 5, 1), bool] */;
  %1107 = cast(%var_11366, dtype="float32") /* ty=float32 */;
  %1108 = cast(%1106, dtype="float32") /* ty=Tensor[(15, 5, 1), float32] */;
  divide(%1107, %1108) /* ty=Tensor[(15, 5, 1), float32] */
}

def @func_13025() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) {
  %1109 = @func_4178() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(432), float64]) */;
  %1110 = %1109.1;
  %1111 = @func_4572() /* ty=Tensor[(12, 10, 5), float64] */;
  (%1110, %1111)
}

def @func_2155() -> Tensor[(12, 10, 5), float64] {
  @func_2129() /* ty=Tensor[(12, 10, 5), float64] */
}

def @func_15950(%var_15898: bool, %var_15919: Tensor[(1320), uint32]) -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(7, 13, 14), bool], bool, Tensor[(5, 8, 10), int8], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 11), uint32], Tensor[(1320), uint32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) {
  %1112 = @func_8090() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(14, 1, 5), float32]) */;
  %1113 = @func_7517() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(5, 8, 10), int8], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), bool]) */;
  %1114 = cast(%var_15898, dtype="bool") /* ty=bool */;
  %1115 = reshape(%1114, newshape=[]) /* ty=bool */;
  %1116 = @func_3261(%1115) /* ty=(Tensor[(7, 13, 14), bool],) */;
  %1117 = @func_7517() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(5, 8, 10), int8], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), bool]) */;
  %1118 = @func_2839() /* ty=(Tensor[(5, 8, 10), int8],) */;
  %1119 = cast(%var_15919, dtype="uint32") /* ty=Tensor[(1320), uint32] */;
  %1120 = reshape(%1119, newshape=[12, 10, 11]) /* ty=Tensor[(12, 10, 11), uint32] */;
  %1121 = @func_10910(%1120) /* ty=(Tensor[(12, 10, 11), uint32],) */;
  %1122 = @func_7125() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(432), float64]) */;
  %1123 = @func_11082() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %1124 = %1112.1;
  %1125 = %1113.1;
  %1126 = %1116.0;
  %1127 = %1117.3;
  %1128 = %1118.0;
  %1129 = @func_11072() /* ty=Tensor[(12, 10, 5), float64] */;
  %1130 = %1121.0;
  %1131 = %1122.0;
  %1132 = @func_13067() /* ty=Tensor[(12, 10, 5), float32] */;
  %1133 = %1123.0;
  (%1124, %1125, %1126, %var_15898, %1127, %1128, %1129, %1130, %var_15919, %1131, %1132, %1133)
}

def @func_4445(%var_4430: Tensor[(10, 4, 16), float64]) -> Tensor[(10, 4, 16), float64] {
  %1134 = cast(%var_4430, dtype="float64") /* ty=Tensor[(10, 4, 16), float64] */;
  cosh(%1134) /* ty=Tensor[(10, 4, 16), float64] */
}

def @func_7914() -> (Tensor[(12, 10, 5), float32],) {
  %1135 = @func_7855() /* ty=Tensor[(12, 10, 5), float32] */;
  (%1135,)
}

def @func_12960(%var_12954: Tensor[(13, 5, 10), float32]) -> Tensor[(13, 5, 10), float32] {
  %1136 = cast(-2.94105f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %1137 = cast(%var_12954, dtype="float32") /* ty=Tensor[(13, 5, 10), float32] */;
  floor_divide(%1136, %1137) /* ty=Tensor[(13, 5, 10), float32] */
}

def @func_4085() -> (Tensor[(12, 10, 5), bool],) {
  %1138 = @func_1407() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %1139 = %1138.0;
  (%1139,)
}

def @func_6250() -> Tensor[(12, 10, 5), float32] {
  @func_5563() /* ty=Tensor[(12, 10, 5), float32] */
}

def @func_12571() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) {
  %1140 = @func_5841() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %1141 = %1140.0;
  %1142 = @func_3503() /* ty=Tensor[(12, 10, 5), float64] */;
  (%1141, %1142)
}

def @func_13652() -> (Tensor[(12, 10, 5), float64],) {
  %1143 = @func_2740() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) */;
  %1144 = %1143.1;
  (%1144,)
}

def @func_5673(%var_5656: Tensor[(165), bool]) -> (Tensor[(5, 8, 10), int8], Tensor[(216, 2), float64], Tensor[(165), bool], Tensor[(2112), float32], Tensor[(825), bool], Tensor[(1, 432), float64]) {
  %1145 = cast(%var_5656, dtype="bool") /* ty=Tensor[(165), bool] */;
  %1146 = cast(meta[relay.Constant][47] /* ty=Tensor[(2112), float32] */, dtype="float32") /* ty=Tensor[(2112), float32] */;
  %1147 = cast(meta[relay.Constant][48] /* ty=Tensor[(825), bool] */, dtype="bool") /* ty=Tensor[(825), bool] */;
  %1148 = cast(meta[relay.Constant][49] /* ty=Tensor[(1, 432), float64] */, dtype="float64") /* ty=Tensor[(1, 432), float64] */;
  %1149 = reshape(%1145, newshape=[15, 1, 11]) /* ty=Tensor[(15, 1, 11), bool] */;
  %1150 = reshape(%1146, newshape=[1056, 2]) /* ty=Tensor[(1056, 2), float32] */;
  %1151 = reshape(%1147, newshape=[15, 5, 11]) /* ty=Tensor[(15, 5, 11), bool] */;
  %1152 = reshape(%1148, newshape=[216, 2]) /* ty=Tensor[(216, 2), float64] */;
  %1153 = @func_4956(%1149, %1150, %1151, %1152) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(1056, 2), float32], Tensor[(15, 5, 11), float64], Tensor[(12, 10, 5), float32], Tensor[(216, 2), float64], Tensor[(12, 10, 5), float32]) */;
  %1154 = @func_4498() /* ty=Tensor[(5, 8, 10), int8] */;
  %1155 = %1153.4;
  (%1154, %1155, %var_5656, meta[relay.Constant][47] /* ty=Tensor[(2112), float32] */, meta[relay.Constant][48] /* ty=Tensor[(825), bool] */, meta[relay.Constant][49] /* ty=Tensor[(1, 432), float64] */)
}

def @func_16617() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], int32, Tensor[(297), int32]) {
  %1156 = @func_14081() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */;
  %1157 = @func_991() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %1158 = @func_5099() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */;
  %1159 = cast(-8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %1160 = cast(meta[relay.Constant][50] /* ty=Tensor[(297), int32] */, dtype="int32") /* ty=Tensor[(297), int32] */;
  %1161 = reshape(%1159, newshape=[]) /* ty=int32 */;
  %1162 = reshape(%1160, newshape=[9, 11, 3]) /* ty=Tensor[(9, 11, 3), int32] */;
  %1163 = @func_15753(%1161, %1162) /* ty=(Tensor[(9, 11, 3), int32], Tensor[(12, 10, 5), float64]) */;
  %1164 = %1156.0;
  %1165 = %1157.0;
  %1166 = @func_3827() /* ty=Tensor[(5, 8, 10), int8] */;
  %1167 = %1158.0;
  %1168 = %1163.1;
  (%1164, %1165, %1166, %1167, %1168, -8 /* ty=int32 */, meta[relay.Constant][50] /* ty=Tensor[(297), int32] */)
}

def @func_5115() -> Tensor[(12, 10, 5), float64] {
  %1169 = @func_4149() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32]) */;
  %1169.0
}

def @func_5068() -> (Tensor[(432), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) {
  %1170 = @func_991() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %1171 = @func_4085() /* ty=(Tensor[(12, 10, 5), bool],) */;
  %1172 = @func_2882() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %1173 = @func_1407() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %1174 = @func_4528() /* ty=Tensor[(432), float64] */;
  %1175 = %1170.0;
  %1176 = @func_2129() /* ty=Tensor[(12, 10, 5), float64] */;
  %1177 = %1171.0;
  %1178 = %1172.0;
  %1179 = %1173.0;
  (%1174, %1175, %1176, %1177, %1178, %1179)
}

def @func_14427() -> (Tensor[(12, 10, 5), float64],) {
  %1180 = @func_7656() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %1181 = %1180.0;
  (%1181,)
}

def @func_8806(%var_8751: Tensor[(16, 5, 9), int8], %var_8752: Tensor[(16, 5, 9), int8], %var_8773: Tensor[(528, 4), float32]) -> (Tensor[(16, 5, 9), int8], Tensor[(12, 10, 5), float32], Tensor[(528, 4), float32], Tensor[(13, 12, 14), int32], Tensor[(2184), int32], Tensor[(12, 10, 5), float32], Tensor[(13, 2, 4), float32]) {
  %1182 = cast(%var_8752, dtype="int8") /* ty=Tensor[(16, 5, 9), int8] */;
  %1183 = shape_of(%var_8751, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1184 = cast(%var_8751, dtype="int8") /* ty=Tensor[(16, 5, 9), int8] */;
  %1185 = dyn.reshape(%1182, %1183, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1186 = cast(%var_8773, dtype="float32") /* ty=Tensor[(528, 4), float32] */;
  %1187 = reshape(%1186, newshape=[2112]) /* ty=Tensor[(2112), float32] */;
  %1188 = @func_3630(%1187) /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), uint16], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(2112), bool], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), int8]) */;
  %1189 = cast(meta[relay.Constant][51] /* ty=Tensor[(2184), int32] */, dtype="int32") /* ty=Tensor[(2184), int32] */;
  %1190 = reshape(%1189, newshape=[13, 12, 14]) /* ty=Tensor[(13, 12, 14), int32] */;
  %1191 = @func_4149() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32]) */;
  %1192 = @func_5770() /* ty=(Tensor[(13, 2, 4), float32],) */;
  %1193 = add(%1184, %1185) /* ty=Tensor[(16, 5, 9), int8] */;
  %1194 = %1188.1;
  %1195 = @func_5980(%1190) /* ty=Tensor[(13, 12, 14), int32] */;
  %1196 = %1191.3;
  %1197 = %1192.0;
  (%1193, %1194, %var_8773, %1195, meta[relay.Constant][51] /* ty=Tensor[(2184), int32] */, %1196, %1197)
}

def @func_11451() -> (Tensor[(5, 8, 10), float32],) {
  %1198 = @func_4301() /* ty=(Tensor[(5, 8, 10), float32], Tensor[(12, 10, 5), float64]) */;
  %1199 = %1198.0;
  (%1199,)
}

def @func_4498() -> Tensor[(5, 8, 10), int8] {
  @func_3827() /* ty=Tensor[(5, 8, 10), int8] */
}

def @func_15629() -> (Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), int8]) {
  %1200 = @func_1174() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(10, 10, 5), float32], Tensor[(14, 1, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(500), int32]) */;
  %1201 = @func_13734() /* ty=(Tensor[(5, 8, 10), int8],) */;
  %1202 = %1200.4;
  %1203 = %1201.0;
  (%1202, %1203)
}

def @func_16272() -> Tensor[(12, 10, 5), float32] {
  %1204 = @func_16109() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), uint16]) */;
  %1204.0
}

def @func_9627() -> Tensor[(12, 10, 5), float32] {
  %1205 = @func_1230() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %1205.0
}

def @func_16533() -> (Tensor[(12, 10, 5), float64],) {
  %1206 = @func_1243() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %1207 = %1206.0;
  (%1207,)
}

def @func_12333() -> (Tensor[(5, 8, 10), int8],) {
  %1208 = @func_4498() /* ty=Tensor[(5, 8, 10), int8] */;
  (%1208,)
}

def @func_6009(%var_5997: Tensor[(6, 14, 15), int64]) -> Tensor[(6, 14, 15), int16] {
  %1209 = cast(7 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %1210 = cast(%var_5997, dtype="int64") /* ty=Tensor[(6, 14, 15), int64] */;
  %1211 = add(%1209, %1210) /* ty=Tensor[(6, 14, 15), int64] */;
  %1212 = cast(%var_5997, dtype="int16") /* ty=Tensor[(6, 14, 15), int16] */;
  %1213 = shape_of(%1211, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1214 = cast(%1211, dtype="int16") /* ty=Tensor[(6, 14, 15), int16] */;
  %1215 = dyn.reshape(%1212, %1213, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  subtract(%1214, %1215) /* ty=Tensor[(6, 14, 15), int16] */
}

def @func_7823() -> (Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) {
  %1216 = @func_4338() /* ty=(Tensor[(12, 10, 5), bool],) */;
  %1217 = %1216.0;
  %1218 = @func_2155() /* ty=Tensor[(12, 10, 5), float64] */;
  %1219 = @func_2129() /* ty=Tensor[(12, 10, 5), float64] */;
  (%1217, %1218, %1219)
}

def @func_7927(%var_7917: Tensor[(13, 9, 15), float64]) -> Tensor[(13, 9, 15), float64] {
  %1220 = cast(%var_7917, dtype="float64") /* ty=Tensor[(13, 9, 15), float64] */;
  acosh(%1220) /* ty=Tensor[(13, 9, 15), float64] */
}

def @func_10404() -> Tensor[(12, 10, 5), float32] {
  @func_7855() /* ty=Tensor[(12, 10, 5), float32] */
}

def @func_7147() -> (Tensor[(12, 10, 5), float32],) {
  %1221 = @func_5841() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %1222 = %1221.0;
  (%1222,)
}

def @func_8543() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) {
  %1223 = @func_3128() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %1224 = @func_6898() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(5, 8, 10), int8]) */;
  %1225 = %1223.0;
  %1226 = %1224.0;
  (%1225, %1226)
}

def @func_1407() -> (Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) {
  %1227 = @func_908() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %1228 = @func_823() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %1229 = @func_1042() /* ty=Tensor[(12, 10, 5), bool] */;
  %1230 = %1227.0;
  %1231 = %1228.0;
  (%1229, %1230, %1231)
}

def @func_3630(%var_3554: Tensor[(2112), float32]) -> (Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), uint16], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(2112), bool], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), int8]) {
  %1232 = @func_2019() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool]) */;
  %1233 = cast(6.91308f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %1234 = cast(%var_3554, dtype="float32") /* ty=Tensor[(2112), float32] */;
  %1235 = cast(%var_3554, dtype="float32") /* ty=Tensor[(2112), float32] */;
  %1236 = reshape(%1233, newshape=[]) /* ty=float32 */;
  %1237 = reshape(%1234, newshape=[16, 11, 12]) /* ty=Tensor[(16, 11, 12), float32] */;
  %1238 = reshape(%1235, newshape=[16, 11, 12]) /* ty=Tensor[(16, 11, 12), float32] */;
  %1239 = @func_1915(%1236, %1237, %1238) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(16, 11, 12), int16], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool]) */;
  %1240 = @func_3443() /* ty=(Tensor[(5, 8, 10), uint16], Tensor[(5, 8, 10), int8]) */;
  %1241 = @func_1243() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %1242 = @func_1703() /* ty=(Tensor[(14, 1, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %1243 = cast(%var_3554, dtype="uint8") /* ty=Tensor[(2112), uint8] */;
  %1244 = cast(6.91308f /* ty=float32 */, dtype="uint8") /* ty=uint8 */;
  %1245 = logical_xor(%1243, %1244) /* ty=Tensor[(2112), uint8] */;
  %1246 = cast(%1245, dtype="bool") /* ty=Tensor[(2112), bool] */;
  %1247 = cast(6.91308f /* ty=float32 */, dtype="bool") /* ty=bool */;
  %1248 = @func_614() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %1249 = @func_2839() /* ty=(Tensor[(5, 8, 10), int8],) */;
  %1250 = %1232.1;
  %1251 = %1239.0;
  %1252 = %1240.0;
  %1253 = %1241.0;
  %1254 = %1242.1;
  %1255 = greater_equal(%1246, %1247) /* ty=Tensor[(2112), bool] */;
  %1256 = %1248.0;
  %1257 = %1249.0;
  (%1250, %1251, %1252, %1253, %1254, %1255, %1256, %1257)
}

def @func_4219() -> Tensor[(12, 10, 5), float64] {
  @func_3503() /* ty=Tensor[(12, 10, 5), float64] */
}

def @func_6898() -> (Tensor[(12, 10, 5), bool], Tensor[(5, 8, 10), int8]) {
  %1258 = @func_6863() /* ty=(Tensor[(5, 8, 10), int8],) */;
  %1259 = @func_1042() /* ty=Tensor[(12, 10, 5), bool] */;
  %1260 = %1258.0;
  (%1259, %1260)
}

def @func_3128() -> (Tensor[(12, 10, 5), float64],) {
  %1261 = @func_1230() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %1262 = %1261.0;
  %1263 = cast(%1262, dtype="float64") /* ty=Tensor[(12, 10, 5), float64] */;
  %1264 = sinh(%1263) /* ty=Tensor[(12, 10, 5), float64] */;
  (%1264,)
}

def @func_13513(%var_13504: Tensor[(14, 5, 10), float32], %var_13505: Tensor[(14, 5, 10), float32]) -> Tensor[(14, 5, 10), float32] {
  %1265 = cast(%var_13505, dtype="float32") /* ty=Tensor[(14, 5, 10), float32] */;
  %1266 = shape_of(%var_13504, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1267 = cast(%var_13504, dtype="float32") /* ty=Tensor[(14, 5, 10), float32] */;
  %1268 = dyn.reshape(%1265, %1266, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%1267, %1268) /* ty=Tensor[(14, 5, 10), float32] */
}

def @func_15526(%var_15510: Tensor[(500), float32], %var_15516: Tensor[(500), float32]) -> (Tensor[(12, 10, 5), float32], Tensor[(10, 10, 5), float32], Tensor[(500), int8]) {
  %1269 = @func_9201() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */;
  %1270 = cast(%var_15510, dtype="float32") /* ty=Tensor[(500), float32] */;
  %1271 = reshape(%1270, newshape=[10, 10, 5]) /* ty=Tensor[(10, 10, 5), float32] */;
  %1272 = cast(%var_15516, dtype="int8") /* ty=Tensor[(500), int8] */;
  %1273 = shape_of(%var_15510, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1274 = cast(%var_15510, dtype="int8") /* ty=Tensor[(500), int8] */;
  %1275 = dyn.reshape(%1272, %1273, newshape=[]) /* ty=Tensor[(?), int8] */;
  %1276 = %1269.1;
  %1277 = @func_268(%1271) /* ty=Tensor[(10, 10, 5), float32] */;
  %1278 = subtract(%1274, %1275) /* ty=Tensor[(500), int8] */;
  (%1276, %1277, %1278)
}

def @func_6179(%var_6162: Tensor[(165), float32]) -> (Tensor[(432), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(11, 5, 3), float32], Tensor[(165), float32], Tensor[(12, 10, 5), float32]) {
  %1279 = @func_5327() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(432), float64]) */;
  %1280 = @func_4253() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %1281 = @func_2740() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) */;
  %1282 = cast(%var_6162, dtype="float32") /* ty=Tensor[(165), float32] */;
  %1283 = reshape(%1282, newshape=[11, 5, 3]) /* ty=Tensor[(11, 5, 3), float32] */;
  %1284 = %1279.3;
  %1285 = %1280.0;
  %1286 = %1281.0;
  %1287 = @func_4322(%1283) /* ty=Tensor[(11, 5, 3), float32] */;
  %1288 = @func_5207() /* ty=Tensor[(12, 10, 5), float32] */;
  (%1284, %1285, %1286, %1287, %var_6162, %1288)
}

def @func_14670() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool]) {
  %1289 = @func_14588() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %1290 = @func_1323() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %1291 = @func_6446() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %1292 = %1289.0;
  %1293 = %1290.0;
  %1294 = %1291.0;
  %1295 = @func_1618() /* ty=Tensor[(12, 10, 5), bool] */;
  (%1292, %1293, %1294, %1295)
}

def @func_10910(%var_10898: Tensor[(12, 10, 11), uint32]) -> (Tensor[(12, 10, 11), uint32],) {
  %1296 = cast(%var_10898, dtype="uint32") /* ty=Tensor[(12, 10, 11), uint32] */;
  %1297 = shape_of(meta[relay.Constant][52] /* ty=Tensor[(12, 10, 11), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1298 = cast(meta[relay.Constant][52] /* ty=Tensor[(12, 10, 11), uint32] */, dtype="uint32") /* ty=Tensor[(12, 10, 11), uint32] */;
  %1299 = dyn.reshape(%1296, %1297, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1300 = right_shift(%1298, %1299) /* ty=Tensor[(12, 10, 11), uint32] */;
  (%1300,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2269(%var_2267: Tensor[(14, 7, 5), float32]) -> (Tensor[(12, 10, 5), float32], Tensor[(14, 7, 5), bool]) {
  @func_2266(%var_2267) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(14, 7, 5), bool]) */
}

def @func_10081() -> (Tensor[(12, 10, 5), float64],) {
  %2 = fn () -> (Tensor[(12, 10, 5), float64],) {
    %0 = @func_9201() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */;
    %1 = %0.0;
    (%1,)
  };
  %2() /* ty=(Tensor[(12, 10, 5), float64],) */
}

def @func_11667(%var_11666: Tensor[(7, 6, 13), float64]) -> (Tensor[(7, 6, 13), float64], Tensor[(7, 6, 13), float32]) {
  %7 = fn (%var_11635: Tensor[(7, 6, 13), float64]) -> (Tensor[(7, 6, 13), float64], Tensor[(7, 6, 13), float32]) {
    %3 = cast(%var_11635, dtype="float64") /* ty=Tensor[(7, 6, 13), float64] */;
    %4 = cast(%var_11635, dtype="float32") /* ty=Tensor[(7, 6, 13), float32] */;
    %5 = sinh(%3) /* ty=Tensor[(7, 6, 13), float64] */;
    %6 = sqrt(%4) /* ty=Tensor[(7, 6, 13), float32] */;
    (%5, %6)
  };
  %7(%var_11666) /* ty=(Tensor[(7, 6, 13), float64], Tensor[(7, 6, 13), float32]) */
}

def @func_16043(%var_16041: uint64, %var_16042: Tensor[(14, 12, 12), uint64]) -> (Tensor[(14, 12, 12), uint64], Tensor[(12, 10, 5), float64]) {
  @func_16039(%var_16041, %var_16042) /* ty=(Tensor[(14, 12, 12), uint64], Tensor[(12, 10, 5), float64]) */
}

def @func_1231() -> (Tensor[(12, 10, 5), float32],) {
  %10 = fn () -> (Tensor[(12, 10, 5), float32],) {
    %8 = @func_1174() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(10, 10, 5), float32], Tensor[(14, 1, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(500), int32]) */;
    %9 = %8.4;
    (%9,)
  };
  %10() /* ty=(Tensor[(12, 10, 5), float32],) */
}

def @func_4087() -> (Tensor[(12, 10, 5), bool],) {
  @func_4085() /* ty=(Tensor[(12, 10, 5), bool],) */
}

def @func_8500() -> (Tensor[(12, 10, 5), float32],) {
  %13 = fn () -> (Tensor[(12, 10, 5), float32],) {
    %11 = @func_6446() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
    %12 = %11.1;
    (%12,)
  };
  %13() /* ty=(Tensor[(12, 10, 5), float32],) */
}

def @func_14670() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool]) {
  %14 = @func_14588() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %15 = @func_1323() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %16 = @func_6446() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %17 = %14.0;
  %18 = %15.0;
  %19 = %16.0;
  %20 = @func_1618() /* ty=Tensor[(12, 10, 5), bool] */;
  (%17, %18, %19, %20)
}

def @func_824() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) {
  %25 = fn () -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) {
    %21 = @func_614() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %22 = @func_710() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %23 = %21.0;
    %24 = %22.0;
    (%23, %24)
  };
  %25() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */
}

def @func_6874() -> (Tensor[(12, 10, 5), bool],) {
  %27 = fn () -> (Tensor[(12, 10, 5), bool],) {
    %26 = @func_1042() /* ty=Tensor[(12, 10, 5), bool] */;
    (%26,)
  };
  %27() /* ty=(Tensor[(12, 10, 5), bool],) */
}

def @func_16897() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) {
  %28 = @func_769() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) */;
  %29 = %28.0;
  %30 = @func_12205() /* ty=Tensor[(12, 10, 5), float32] */;
  (%29, %30)
}

def @func_16973() -> (Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float64]) {
  @func_16971() /* ty=(Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float64]) */
}

def @func_4255() -> (Tensor[(12, 10, 5), float64],) {
  @func_4253() /* ty=(Tensor[(12, 10, 5), float64],) */
}

def @func_9627() -> Tensor[(12, 10, 5), float32] {
  %31 = @func_1230() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %31.0
}

def @func_16139() -> (Tensor[(12, 10, 5), float64],) {
  %34 = fn () -> (Tensor[(12, 10, 5), float64],) {
    %32 = @func_11082() /* ty=(Tensor[(12, 10, 5), float64],) */;
    %33 = %32.0;
    (%33,)
  };
  %34() /* ty=(Tensor[(12, 10, 5), float64],) */
}

def @func_2130() -> Tensor[(12, 10, 5), float64] {
  %36 = fn () -> Tensor[(12, 10, 5), float64] {
    %35 = @func_1243() /* ty=(Tensor[(12, 10, 5), float64],) */;
    %35.0
  };
  %36() /* ty=Tensor[(12, 10, 5), float64] */
}

def @func_4961(%var_4957: Tensor[(15, 1, 11), bool], %var_4958: Tensor[(1056, 2), float32], %var_4959: Tensor[(15, 5, 11), bool], %var_4960: Tensor[(216, 2), float64]) -> (Tensor[(12, 10, 5), float32], Tensor[(1056, 2), float32], Tensor[(15, 5, 11), float64], Tensor[(12, 10, 5), float32], Tensor[(216, 2), float64], Tensor[(12, 10, 5), float32]) {
  %55 = fn (%var_4909: Tensor[(15, 1, 11), bool], %var_4918: Tensor[(1056, 2), float32], %var_4920: Tensor[(15, 5, 11), bool], %var_4926: Tensor[(216, 2), float64]) -> (Tensor[(12, 10, 5), float32], Tensor[(1056, 2), float32], Tensor[(15, 5, 11), float64], Tensor[(12, 10, 5), float32], Tensor[(216, 2), float64], Tensor[(12, 10, 5), float32]) {
    %37 = cast(%var_4918, dtype="float32") /* ty=Tensor[(1056, 2), float32] */;
    %38 = reshape(%37, newshape=[2112]) /* ty=Tensor[(2112), float32] */;
    %39 = @func_3630(%38) /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), uint16], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(2112), bool], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), int8]) */;
    %40 = cast(%var_4909, dtype="bool") /* ty=Tensor[(15, 1, 11), bool] */;
    %41 = cast(meta[relay.Constant][0] /* ty=Tensor[(15, 5, 11), bool] */, dtype="bool") /* ty=Tensor[(15, 5, 11), bool] */;
    %42 = logical_and(%40, %41) /* ty=Tensor[(15, 5, 11), bool] */;
    %43 = cast(%var_4920, dtype="float64") /* ty=Tensor[(15, 5, 11), float64] */;
    %44 = shape_of(%42, dtype="int32") /* ty=Tensor[(3), int32] */;
    %45 = cast(%42, dtype="float64") /* ty=Tensor[(15, 5, 11), float64] */;
    %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %47 = cast(%var_4926, dtype="float64") /* ty=Tensor[(216, 2), float64] */;
    %48 = reshape(%47, newshape=[2, 216]) /* ty=Tensor[(2, 216), float64] */;
    %49 = @func_3973(%48) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(2, 216), float64]) */;
    %50 = @func_1407() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
    %51 = %39.6;
    %52 = minimum(%45, %46) /* ty=Tensor[(15, 5, 11), float64] */;
    %53 = %49.1;
    %54 = %50.2;
    (%51, %var_4918, %52, %53, %var_4926, %54)
  };
  %55(%var_4957, %var_4958, %var_4959, %var_4960) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(1056, 2), float32], Tensor[(15, 5, 11), float64], Tensor[(12, 10, 5), float32], Tensor[(216, 2), float64], Tensor[(12, 10, 5), float32]) */
}

def @func_7976() -> Tensor[(12, 10, 5), float64] {
  %56 = @func_3400() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) */;
  %56.1
}

def @func_15308() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) {
  %61 = fn () -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) {
    %57 = @func_4178() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(432), float64]) */;
    %58 = @func_6670() /* ty=Tensor[(12, 10, 5), float32] */;
    %59 = %57.0;
    %60 = @func_11072() /* ty=Tensor[(12, 10, 5), float64] */;
    (%58, %59, %60)
  };
  %61() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) */
}

def @func_13860() -> Tensor[(12, 10, 5), float64] {
  %62 = @func_1523() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %62.0
}

def @func_8653() -> (Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), uint16], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool]) {
  %63 = @func_5622() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) */;
  %64 = @func_4338() /* ty=(Tensor[(12, 10, 5), bool],) */;
  %65 = %63.0;
  %66 = @func_6204() /* ty=Tensor[(5, 8, 10), uint16] */;
  %67 = %64.0;
  %68 = @func_3841() /* ty=Tensor[(12, 10, 5), bool] */;
  (%65, %66, %67, %68)
}

def @func_2193() -> (Tensor[(5, 8, 10), int8],) {
  %76 = fn () -> (Tensor[(5, 8, 10), int8],) {
    %69 = cast(meta[relay.Constant][1] /* ty=Tensor[(5, 8, 10), float32] */, dtype="float32") /* ty=Tensor[(5, 8, 10), float32] */;
    %70 = sinh(%69) /* ty=Tensor[(5, 8, 10), float32] */;
    %71 = cast(%70, dtype="int8") /* ty=Tensor[(5, 8, 10), int8] */;
    %72 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(5, 8, 10), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %73 = cast(meta[relay.Constant][1] /* ty=Tensor[(5, 8, 10), float32] */, dtype="int8") /* ty=Tensor[(5, 8, 10), int8] */;
    %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %75 = bitwise_or(%73, %74) /* ty=Tensor[(5, 8, 10), int8] */;
    (%75,)
  };
  %76() /* ty=(Tensor[(5, 8, 10), int8],) */
}

def @func_6252() -> Tensor[(12, 10, 5), float32] {
  @func_6250() /* ty=Tensor[(12, 10, 5), float32] */
}

def @func_7582() -> (Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float32]) {
  %83 = fn () -> (Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float32]) {
    %77 = @func_4044() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %78 = @func_2839() /* ty=(Tensor[(5, 8, 10), int8],) */;
    %79 = @func_4149() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32]) */;
    %80 = %77.0;
    %81 = %78.0;
    %82 = %79.1;
    (%80, %81, %82)
  };
  %83() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float32]) */
}

def @func_8806(%var_8751: Tensor[(16, 5, 9), int8], %var_8752: Tensor[(16, 5, 9), int8], %var_8773: Tensor[(528, 4), float32]) -> (Tensor[(16, 5, 9), int8], Tensor[(12, 10, 5), float32], Tensor[(528, 4), float32], Tensor[(13, 12, 14), int32], Tensor[(2184), int32], Tensor[(12, 10, 5), float32], Tensor[(13, 2, 4), float32]) {
  %84 = cast(%var_8752, dtype="int8") /* ty=Tensor[(16, 5, 9), int8] */;
  %85 = shape_of(%var_8751, dtype="int32") /* ty=Tensor[(3), int32] */;
  %86 = cast(%var_8751, dtype="int8") /* ty=Tensor[(16, 5, 9), int8] */;
  %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %88 = cast(%var_8773, dtype="float32") /* ty=Tensor[(528, 4), float32] */;
  %89 = reshape(%88, newshape=[2112]) /* ty=Tensor[(2112), float32] */;
  %90 = @func_3630(%89) /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), uint16], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(2112), bool], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), int8]) */;
  %91 = cast(meta[relay.Constant][2] /* ty=Tensor[(2184), int32] */, dtype="int32") /* ty=Tensor[(2184), int32] */;
  %92 = reshape(%91, newshape=[13, 12, 14]) /* ty=Tensor[(13, 12, 14), int32] */;
  %93 = @func_4149() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32]) */;
  %94 = @func_5770() /* ty=(Tensor[(13, 2, 4), float32],) */;
  %95 = add(%86, %87) /* ty=Tensor[(16, 5, 9), int8] */;
  %96 = %90.1;
  %97 = @func_5980(%92) /* ty=Tensor[(13, 12, 14), int32] */;
  %98 = %93.3;
  %99 = %94.0;
  (%95, %96, %var_8773, %97, meta[relay.Constant][2] /* ty=Tensor[(2184), int32] */, %98, %99)
}

def @func_3128() -> (Tensor[(12, 10, 5), float64],) {
  %100 = @func_1230() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %101 = %100.0;
  %102 = cast(%101, dtype="float64") /* ty=Tensor[(12, 10, 5), float64] */;
  %103 = sinh(%102) /* ty=Tensor[(12, 10, 5), float64] */;
  (%103,)
}

def @func_4622(%var_4584: Tensor[(432), float64], %var_4599: Tensor[(260), float32]) -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(13, 2, 10), bool], Tensor[(260), float32], Tensor[(5, 8, 10), int8], Tensor[(2112), float32], Tensor[(500), int32]) {
  %104 = @func_4149() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32]) */;
  %105 = cast(%var_4584, dtype="float64") /* ty=Tensor[(432), float64] */;
  %106 = reshape(%105, newshape=[432]) /* ty=Tensor[(432), float64] */;
  %107 = @func_968(%106) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(10, 10, 5), float32], Tensor[(432), float64]) */;
  %108 = @func_1618() /* ty=Tensor[(12, 10, 5), bool] */;
  %109 = cast(%108, dtype="float32") /* ty=Tensor[(12, 10, 5), float32] */;
  %110 = cast(%var_4599, dtype="float32") /* ty=Tensor[(260), float32] */;
  %111 = reshape(%110, newshape=[13, 2, 10]) /* ty=Tensor[(13, 2, 10), float32] */;
  %112 = @func_2362(%111) /* ty=(Tensor[(13, 2, 10), bool],) */;
  %113 = cast(meta[relay.Constant][3] /* ty=Tensor[(2112), float32] */, dtype="float32") /* ty=Tensor[(2112), float32] */;
  %114 = reshape(%113, newshape=[2112]) /* ty=Tensor[(2112), float32] */;
  %115 = @func_3630(%114) /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), uint16], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(2112), bool], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), int8]) */;
  %116 = @func_1174() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(10, 10, 5), float32], Tensor[(14, 1, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(500), int32]) */;
  %117 = %104.3;
  %118 = %107.0;
  %119 = sqrt(%109) /* ty=Tensor[(12, 10, 5), float32] */;
  %120 = %112.0;
  %121 = %115.7;
  %122 = %116.5;
  (%117, %118, %var_4584, %119, %120, %var_4599, %121, meta[relay.Constant][3] /* ty=Tensor[(2112), float32] */, %122)
}

def @func_8123() -> (Tensor[(12, 10, 5), float64],) {
  %123 = @func_1523() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %124 = %123.0;
  (%124,)
}

def @func_1679() -> (Tensor[(12, 10, 5), float32],) {
  %127 = fn () -> (Tensor[(12, 10, 5), float32],) {
    %125 = @func_769() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) */;
    %126 = %125.0;
    (%126,)
  };
  %127() /* ty=(Tensor[(12, 10, 5), float32],) */
}

def @func_6834() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(10, 10, 5), float32], Tensor[(500), float32]) {
  @func_6832() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(10, 10, 5), float32], Tensor[(500), float32]) */
}

def @func_13067() -> Tensor[(12, 10, 5), float32] {
  %128 = @func_10103() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %128.0
}

def @func_10134() -> (Tensor[(432), float64], Tensor[(12, 10, 5), float32]) {
  @func_10132() /* ty=(Tensor[(432), float64], Tensor[(12, 10, 5), float32]) */
}

def @func_14083() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) {
  @func_14081() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */
}

def @func_10835() -> (Tensor[(12, 10, 5), float32],) {
  %129 = @func_9902() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %130 = %129.0;
  (%130,)
}

def @func_3220() -> Tensor[(432), float64] {
  %131 = @func_3194() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(432), float64], Tensor[(10, 50), float32]) */;
  %131.2
}

def @func_8544() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) {
  %136 = fn () -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) {
    %132 = @func_3128() /* ty=(Tensor[(12, 10, 5), float64],) */;
    %133 = @func_6898() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(5, 8, 10), int8]) */;
    %134 = %132.0;
    %135 = %133.0;
    (%134, %135)
  };
  %136() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */
}

def @func_14206(%var_14204: Tensor[(14, 8, 11), int16], %var_14205: Tensor[(14, 8, 11), int16]) -> (Tensor[(14, 8, 11), bool], Tensor[(12, 10, 5), bool]) {
  %143 = fn (%var_14178: Tensor[(14, 8, 11), int16], %var_14179: Tensor[(14, 8, 11), int16]) -> (Tensor[(14, 8, 11), bool], Tensor[(12, 10, 5), bool]) {
    %137 = cast(%var_14179, dtype="bool") /* ty=Tensor[(14, 8, 11), bool] */;
    %138 = shape_of(%var_14178, dtype="int32") /* ty=Tensor[(3), int32] */;
    %139 = cast(%var_14178, dtype="bool") /* ty=Tensor[(14, 8, 11), bool] */;
    %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %141 = greater_equal(%139, %140) /* ty=Tensor[(14, 8, 11), bool] */;
    %142 = @func_2989() /* ty=Tensor[(12, 10, 5), bool] */;
    (%141, %142)
  };
  %143(%var_14204, %var_14205) /* ty=(Tensor[(14, 8, 11), bool], Tensor[(12, 10, 5), bool]) */
}

def @func_12047(%var_12004: Tensor[(11, 8, 8), int32], %var_12034: Tensor[(432), float64]) -> (Tensor[(6, 14, 15), int16], Tensor[(1260), int64], Tensor[(11, 8, 8), bool], Tensor[(14, 1, 5), float64], Tensor[(432), float64]) {
  %144 = cast(meta[relay.Constant][4] /* ty=Tensor[(1260), int64] */, dtype="int64") /* ty=Tensor[(1260), int64] */;
  %145 = reshape(%144, newshape=[6, 14, 15]) /* ty=Tensor[(6, 14, 15), int64] */;
  %146 = cast(meta[relay.Constant][5] /* ty=Tensor[(11, 8, 8), int32] */, dtype="int32") /* ty=Tensor[(11, 8, 8), int32] */;
  %147 = shape_of(%var_12004, dtype="int32") /* ty=Tensor[(3), int32] */;
  %148 = cast(%var_12004, dtype="int32") /* ty=Tensor[(11, 8, 8), int32] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %150 = add(%148, %149) /* ty=Tensor[(11, 8, 8), int32] */;
  %151 = cast(%var_12004, dtype="bool") /* ty=Tensor[(11, 8, 8), bool] */;
  %152 = shape_of(%150, dtype="int32") /* ty=Tensor[(3), int32] */;
  %153 = cast(%150, dtype="bool") /* ty=Tensor[(11, 8, 8), bool] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %155 = cast(%var_12034, dtype="float64") /* ty=Tensor[(432), float64] */;
  %156 = reshape(%155, newshape=[432]) /* ty=Tensor[(432), float64] */;
  %157 = @func_941(%156) /* ty=(Tensor[(14, 1, 5), float64], Tensor[(500), float32], Tensor[(432), float64], Tensor[(14, 1, 5), float32]) */;
  %158 = @func_6009(%145) /* ty=Tensor[(6, 14, 15), int16] */;
  %159 = less(%153, %154) /* ty=Tensor[(11, 8, 8), bool] */;
  %160 = %157.0;
  (%158, meta[relay.Constant][4] /* ty=Tensor[(1260), int64] */, %159, %160, %var_12034)
}

def @func_11280() -> Tensor[(12, 10, 5), float32] {
  @func_11278() /* ty=Tensor[(12, 10, 5), float32] */
}

def @func_9245() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) {
  @func_9243() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */
}

def @func_7518() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(5, 8, 10), int8], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), bool]) {
  %169 = fn () -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(5, 8, 10), int8], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), bool]) {
    %161 = @func_3400() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) */;
    %162 = @func_2688() /* ty=(Tensor[(16, 2, 9), bool], Tensor[(12, 10, 5), bool], Tensor[(14, 1, 5), float64], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool]) */;
    %163 = @func_2192() /* ty=(Tensor[(5, 8, 10), int8],) */;
    %164 = %161.1;
    %165 = %162.5;
    %166 = %163.0;
    %167 = @func_4498() /* ty=Tensor[(5, 8, 10), int8] */;
    %168 = @func_2989() /* ty=Tensor[(12, 10, 5), bool] */;
    (%164, %165, %166, %167, %168)
  };
  %169() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(5, 8, 10), int8], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), bool]) */
}

def @func_6864() -> (Tensor[(5, 8, 10), int8],) {
  %172 = fn () -> (Tensor[(5, 8, 10), int8],) {
    %170 = @func_3443() /* ty=(Tensor[(5, 8, 10), uint16], Tensor[(5, 8, 10), int8]) */;
    %171 = %170.1;
    (%171,)
  };
  %172() /* ty=(Tensor[(5, 8, 10), int8],) */
}

def @func_12479(%var_12471: Tensor[(260), float32]) -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(13, 2, 10), bool], Tensor[(260), float32]) {
  %173 = @func_1407() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %174 = @func_1523() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %175 = cast(%var_12471, dtype="float32") /* ty=Tensor[(260), float32] */;
  %176 = reshape(%175, newshape=[13, 2, 10]) /* ty=Tensor[(13, 2, 10), float32] */;
  %177 = @func_2362(%176) /* ty=(Tensor[(13, 2, 10), bool],) */;
  %178 = %173.2;
  %179 = %174.0;
  %180 = %177.0;
  (%178, %179, %180, %var_12471)
}

def @func_13125() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) {
  @func_13123() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) */
}

def @func_1325() -> (Tensor[(12, 10, 5), float32],) {
  @func_1323() /* ty=(Tensor[(12, 10, 5), float32],) */
}

def @func_7658() -> (Tensor[(12, 10, 5), float64],) {
  @func_7656() /* ty=(Tensor[(12, 10, 5), float64],) */
}

def @func_14153() -> (Tensor[(5, 8, 10), float64],) {
  %185 = fn () -> (Tensor[(5, 8, 10), float64],) {
    %181 = @func_4301() /* ty=(Tensor[(5, 8, 10), float32], Tensor[(12, 10, 5), float64]) */;
    %182 = %181.0;
    %183 = cast(%182, dtype="float64") /* ty=Tensor[(5, 8, 10), float64] */;
    %184 = erf(%183) /* ty=Tensor[(5, 8, 10), float64] */;
    (%184,)
  };
  %185() /* ty=(Tensor[(5, 8, 10), float64],) */
}

def @func_4498() -> Tensor[(5, 8, 10), int8] {
  @func_3827() /* ty=Tensor[(5, 8, 10), int8] */
}

def @func_9629() -> Tensor[(12, 10, 5), float32] {
  @func_9627() /* ty=Tensor[(12, 10, 5), float32] */
}

def @func_9774(%var_9773: Tensor[(112), float64]) -> (Tensor[(500), int32], Tensor[(12, 10, 5), bool], Tensor[(2, 8, 7), bool]) {
  %201 = fn (%var_9762: Tensor[(112), float64]) -> (Tensor[(500), int32], Tensor[(12, 10, 5), bool], Tensor[(2, 8, 7), bool]) {
    %186 = @func_8915() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(432), float64], Tensor[(1, 432), float64], Tensor[(165), bool], Tensor[(500), int32], Tensor[(12, 10, 5), float64], Tensor[(10, 4, 16), float64], Tensor[(640), float64]) */;
    %187 = @func_6873() /* ty=(Tensor[(12, 10, 5), bool],) */;
    %188 = cast(%var_9762, dtype="float64") /* ty=Tensor[(112), float64] */;
    %189 = cast(%var_9762, dtype="float64") /* ty=Tensor[(112), float64] */;
    %190 = reshape(%188, newshape=[2, 8, 7]) /* ty=Tensor[(2, 8, 7), float64] */;
    %191 = reshape(%189, newshape=[2, 8, 7]) /* ty=Tensor[(2, 8, 7), float64] */;
    %192 = @func_5918(%190, %191) /* ty=(Tensor[(2, 8, 7), float64],) */;
    %193 = %192.0;
    %194 = cast(%var_9762, dtype="bool") /* ty=Tensor[(112), bool] */;
    %195 = shape_of(%193, dtype="int32") /* ty=Tensor[(3), int32] */;
    %196 = cast(%193, dtype="bool") /* ty=Tensor[(2, 8, 7), bool] */;
    %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %198 = %186.5;
    %199 = %187.0;
    %200 = not_equal(%196, %197) /* ty=Tensor[(2, 8, 7), bool] */;
    (%198, %199, %200)
  };
  %201(%var_9773) /* ty=(Tensor[(500), int32], Tensor[(12, 10, 5), bool], Tensor[(2, 8, 7), bool]) */
}

def @func_14367(%var_14346: Tensor[(5, 8, 10), int8]) -> (Tensor[(5, 8, 10), bool], Tensor[(12, 10, 5), float64]) {
  %202 = @func_9860() /* ty=Tensor[(5, 8, 10), int8] */;
  %203 = cast(%var_14346, dtype="bool") /* ty=Tensor[(5, 8, 10), bool] */;
  %204 = shape_of(%202, dtype="int32") /* ty=Tensor[(3), int32] */;
  %205 = cast(%202, dtype="bool") /* ty=Tensor[(5, 8, 10), bool] */;
  %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %207 = @func_4253() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %208 = greater(%205, %206) /* ty=Tensor[(5, 8, 10), bool] */;
  %209 = %207.0;
  (%208, %209)
}

def @func_2266(%var_2257: Tensor[(14, 7, 5), float32]) -> (Tensor[(12, 10, 5), float32], Tensor[(14, 7, 5), bool]) {
  %210 = @func_1174() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(10, 10, 5), float32], Tensor[(14, 1, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(500), int32]) */;
  %211 = @func_1174() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(10, 10, 5), float32], Tensor[(14, 1, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(500), int32]) */;
  %212 = %211.2;
  %213 = cast(%212, dtype="bool") /* ty=Tensor[(14, 1, 5), bool] */;
  %214 = cast(%var_2257, dtype="bool") /* ty=Tensor[(14, 7, 5), bool] */;
  %215 = %210.4;
  %216 = greater_equal(%213, %214) /* ty=Tensor[(14, 7, 5), bool] */;
  (%215, %216)
}

def @func_4528() -> Tensor[(432), float64] {
  @func_3220() /* ty=Tensor[(432), float64] */
}

def @func_2365(%var_2363: Tensor[(13, 2, 10), float32]) -> (Tensor[(13, 2, 10), bool],) {
  @func_2362(%var_2363) /* ty=(Tensor[(13, 2, 10), bool],) */
}

def @func_14920() -> (Tensor[(12, 10, 5), bool], Tensor[(640), float64], Tensor[(12, 10, 5), float64], Tensor[(260), float32]) {
  %217 = @func_10519() /* ty=(Tensor[(640), float64], Tensor[(12, 10, 5), float64]) */;
  %218 = cast(meta[relay.Constant][6] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %219 = reshape(%218, newshape=[130, 2]) /* ty=Tensor[(130, 2), float32] */;
  %220 = @func_9391(%219) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(500), int32], Tensor[(108, 4), float64], Tensor[(130, 2), float32], Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float32]) */;
  %221 = @func_3841() /* ty=Tensor[(12, 10, 5), bool] */;
  %222 = %217.0;
  %223 = %220.4;
  (%221, %222, %223, meta[relay.Constant][6] /* ty=Tensor[(260), float32] */)
}

def @func_16845() -> (Tensor[(12, 10, 5), float64],) {
  %226 = fn () -> (Tensor[(12, 10, 5), float64],) {
    %224 = @func_3031() /* ty=(Tensor[(12, 10, 5), float64],) */;
    %225 = %224.0;
    (%225,)
  };
  %226() /* ty=(Tensor[(12, 10, 5), float64],) */
}

def @func_1941() -> (Tensor[(12, 10, 5), bool], Tensor[(14, 1, 5), float32]) {
  %230 = fn () -> (Tensor[(12, 10, 5), bool], Tensor[(14, 1, 5), float32]) {
    %227 = @func_1703() /* ty=(Tensor[(14, 1, 5), float32], Tensor[(12, 10, 5), float32]) */;
    %228 = @func_1042() /* ty=Tensor[(12, 10, 5), bool] */;
    %229 = %227.0;
    (%228, %229)
  };
  %230() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(14, 1, 5), float32]) */
}

def @func_13123() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) {
  %231 = @func_1678() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %232 = @func_1243() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %233 = %231.0;
  %234 = @func_11072() /* ty=Tensor[(12, 10, 5), float64] */;
  %235 = %232.0;
  (%233, %234, %235)
}

def @func_14397(%var_14384: Tensor[(14, 2, 1), int64], %var_14385: Tensor[(14, 2, 7), int64]) -> Tensor[(14, 2, 7), bool] {
  %236 = cast(%var_14384, dtype="bool") /* ty=Tensor[(14, 2, 1), bool] */;
  %237 = cast(%var_14385, dtype="bool") /* ty=Tensor[(14, 2, 7), bool] */;
  less_equal(%236, %237) /* ty=Tensor[(14, 2, 7), bool] */
}

def @func_5100() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) {
  %242 = fn () -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) {
    %238 = @func_2882() /* ty=(Tensor[(12, 10, 5), float64],) */;
    %239 = @func_4178() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(432), float64]) */;
    %240 = %238.0;
    %241 = %239.0;
    (%240, %241)
  };
  %242() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */
}

def @func_847(%var_846: Tensor[(432), float64]) -> (Tensor[(12, 10, 5), float32], Tensor[(8, 6, 9), int8], Tensor[(432), float64]) {
  %249 = fn (%var_835: Tensor[(432), float64]) -> (Tensor[(12, 10, 5), float32], Tensor[(8, 6, 9), int8], Tensor[(432), float64]) {
    %243 = @func_614() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %244 = cast(%var_835, dtype="float64") /* ty=Tensor[(432), float64] */;
    %245 = reshape(%244, newshape=[8, 6, 9]) /* ty=Tensor[(8, 6, 9), float64] */;
    %246 = @func_380(%245) /* ty=(Tensor[(10, 10, 5), float32], Tensor[(500), float32], Tensor[(8, 6, 9), int8]) */;
    %247 = %243.0;
    %248 = %246.2;
    (%247, %248, %var_835)
  };
  %249(%var_846) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(8, 6, 9), int8], Tensor[(432), float64]) */
}

def @func_1525() -> (Tensor[(12, 10, 5), float64],) {
  @func_1523() /* ty=(Tensor[(12, 10, 5), float64],) */
}

def @func_5565() -> Tensor[(12, 10, 5), float32] {
  @func_5563() /* ty=Tensor[(12, 10, 5), float32] */
}

def @func_13318() -> (Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) {
  @func_13316() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) */
}

def @func_3713(%var_3711: Tensor[(432), float64]) -> (Tensor[(432), uint8], Tensor[(12, 10, 5), float64]) {
  @func_3710(%var_3711) /* ty=(Tensor[(432), uint8], Tensor[(12, 10, 5), float64]) */
}

def @func_10350() -> Tensor[(5, 8, 10), uint16] {
  %250 = @func_3443() /* ty=(Tensor[(5, 8, 10), uint16], Tensor[(5, 8, 10), int8]) */;
  %250.0
}

def @func_3195() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(432), float64], Tensor[(10, 50), float32]) {
  %259 = fn () -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(432), float64], Tensor[(10, 50), float32]) {
    %251 = @func_1243() /* ty=(Tensor[(12, 10, 5), float64],) */;
    %252 = cast(meta[relay.Constant][7] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
    %253 = cast(meta[relay.Constant][8] /* ty=Tensor[(10, 50), float32] */, dtype="float32") /* ty=Tensor[(10, 50), float32] */;
    %254 = reshape(%252, newshape=[432]) /* ty=Tensor[(432), float64] */;
    %255 = reshape(%253, newshape=[500]) /* ty=Tensor[(500), float32] */;
    %256 = @func_1112(%254, %255) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(14, 1, 5), float64], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(10, 10, 5), float32], Tensor[(500), float32], Tensor[(12, 10, 5), float64]) */;
    %257 = %251.0;
    %258 = %256.0;
    (%257, %258, meta[relay.Constant][7] /* ty=Tensor[(432), float64] */, meta[relay.Constant][8] /* ty=Tensor[(10, 50), float32] */)
  };
  %259() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(432), float64], Tensor[(10, 50), float32]) */
}

def @func_3975(%var_3974: Tensor[(2, 216), float64]) -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(2, 216), float64]) {
  %269 = fn (%var_3961: Tensor[(2, 216), float64]) -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(2, 216), float64]) {
    %260 = @func_908() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %261 = cast(%var_3961, dtype="float64") /* ty=Tensor[(2, 216), float64] */;
    %262 = reshape(%261, newshape=[432]) /* ty=Tensor[(432), float64] */;
    %263 = @func_3710(%262) /* ty=(Tensor[(432), uint8], Tensor[(12, 10, 5), float64]) */;
    %264 = cast(%var_3961, dtype="float64") /* ty=Tensor[(2, 216), float64] */;
    %265 = %260.0;
    %266 = @func_3527() /* ty=Tensor[(12, 10, 5), float32] */;
    %267 = %263.1;
    %268 = atanh(%264) /* ty=Tensor[(2, 216), float64] */;
    (%265, %266, %267, %268)
  };
  %269(%var_3974) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(2, 216), float64]) */
}

def @func_4626(%var_4624: Tensor[(432), float64], %var_4625: Tensor[(260), float32]) -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(13, 2, 10), bool], Tensor[(260), float32], Tensor[(5, 8, 10), int8], Tensor[(2112), float32], Tensor[(500), int32]) {
  @func_4622(%var_4624, %var_4625) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(13, 2, 10), bool], Tensor[(260), float32], Tensor[(5, 8, 10), int8], Tensor[(2112), float32], Tensor[(500), int32]) */
}

def @func_5771() -> (Tensor[(13, 2, 4), float32],) {
  %280 = fn () -> (Tensor[(13, 2, 4), float32],) {
    %270 = @func_4699() /* ty=Tensor[(13, 2, 4), float64] */;
    %271 = cast(%270, dtype="float64") /* ty=Tensor[(13, 2, 4), float64] */;
    %272 = sinh(%271) /* ty=Tensor[(13, 2, 4), float64] */;
    %273 = cast(%272, dtype="float32") /* ty=Tensor[(13, 2, 4), float32] */;
    %274 = acosh(%273) /* ty=Tensor[(13, 2, 4), float32] */;
    %275 = cast(%274, dtype="float32") /* ty=Tensor[(13, 2, 4), float32] */;
    %276 = shape_of(%272, dtype="int32") /* ty=Tensor[(3), int32] */;
    %277 = cast(%272, dtype="float32") /* ty=Tensor[(13, 2, 4), float32] */;
    %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %279 = subtract(%277, %278) /* ty=Tensor[(13, 2, 4), float32] */;
    (%279,)
  };
  %280() /* ty=(Tensor[(13, 2, 4), float32],) */
}

def @func_6832() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(10, 10, 5), float32], Tensor[(500), float32]) {
  %281 = @func_1230() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %282 = @func_5068() /* ty=(Tensor[(432), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */;
  %283 = cast(meta[relay.Constant][9] /* ty=Tensor[(500), float32] */, dtype="float32") /* ty=Tensor[(500), float32] */;
  %284 = reshape(%283, newshape=[10, 10, 5]) /* ty=Tensor[(10, 10, 5), float32] */;
  %285 = %281.0;
  %286 = %282.1;
  %287 = @func_268(%284) /* ty=Tensor[(10, 10, 5), float32] */;
  (%285, %286, %287, meta[relay.Constant][9] /* ty=Tensor[(500), float32] */)
}

def @func_13674() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) {
  @func_13672() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */
}

def @func_16039(%var_16029: uint64, %var_16030: Tensor[(14, 12, 12), uint64]) -> (Tensor[(14, 12, 12), uint64], Tensor[(12, 10, 5), float64]) {
  %288 = cast(%var_16029, dtype="uint64") /* ty=uint64 */;
  %289 = cast(%var_16030, dtype="uint64") /* ty=Tensor[(14, 12, 12), uint64] */;
  %290 = @func_9541() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %291 = bitwise_and(%288, %289) /* ty=Tensor[(14, 12, 12), uint64] */;
  %292 = %290.0;
  (%291, %292)
}

def @func_13256() -> (Tensor[(5, 8, 10), bool], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32]) {
  %298 = fn () -> (Tensor[(5, 8, 10), bool], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32]) {
    %293 = @func_7534() /* ty=(Tensor[(12, 10, 5), bool],) */;
    %294 = @func_4007() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %295 = @func_4771() /* ty=Tensor[(5, 8, 10), bool] */;
    %296 = %293.0;
    %297 = %294.0;
    (%295, %296, %297)
  };
  %298() /* ty=(Tensor[(5, 8, 10), bool], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32]) */
}

def @func_9454() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) {
  %299 = @func_2129() /* ty=Tensor[(12, 10, 5), float64] */;
  %300 = @func_2989() /* ty=Tensor[(12, 10, 5), bool] */;
  (%299, %300)
}

def @func_15757(%var_15755: int32, %var_15756: Tensor[(9, 11, 3), int32]) -> (Tensor[(9, 11, 3), int32], Tensor[(12, 10, 5), float64]) {
  @func_15753(%var_15755, %var_15756) /* ty=(Tensor[(9, 11, 3), int32], Tensor[(12, 10, 5), float64]) */
}

def @func_13146() -> (Tensor[(5, 8, 10), int8],) {
  %303 = fn () -> (Tensor[(5, 8, 10), int8],) {
    %301 = @func_2839() /* ty=(Tensor[(5, 8, 10), int8],) */;
    %302 = %301.0;
    (%302,)
  };
  %303() /* ty=(Tensor[(5, 8, 10), int8],) */
}

def @func_7656() -> (Tensor[(12, 10, 5), float64],) {
  %304 = @func_4988() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %305 = %304.0;
  (%305,)
}

def @func_9309() -> Tensor[(12, 10, 5), bool] {
  %307 = fn () -> Tensor[(12, 10, 5), bool] {
    %306 = @func_1940() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(14, 1, 5), float32]) */;
    %306.0
  };
  %307() /* ty=Tensor[(12, 10, 5), bool] */
}

def @func_16332() -> Tensor[(12, 10, 5), float64] {
  %309 = fn () -> Tensor[(12, 10, 5), float64] {
    %308 = @func_13316() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) */;
    %308.2
  };
  %309() /* ty=Tensor[(12, 10, 5), float64] */
}

def @func_8711() -> (Tensor[(12, 10, 5), bool],) {
  %312 = fn () -> (Tensor[(12, 10, 5), bool],) {
    %310 = @func_7534() /* ty=(Tensor[(12, 10, 5), bool],) */;
    %311 = %310.0;
    (%311,)
  };
  %312() /* ty=(Tensor[(12, 10, 5), bool],) */
}

def @func_14429() -> (Tensor[(12, 10, 5), float64],) {
  @func_14427() /* ty=(Tensor[(12, 10, 5), float64],) */
}

def @func_14479() -> Tensor[(5, 8, 10), float64] {
  %316 = fn () -> Tensor[(5, 8, 10), float64] {
    %313 = @func_2839() /* ty=(Tensor[(5, 8, 10), int8],) */;
    %314 = %313.0;
    %315 = cast(%314, dtype="float64") /* ty=Tensor[(5, 8, 10), float64] */;
    acosh(%315) /* ty=Tensor[(5, 8, 10), float64] */
  };
  %316() /* ty=Tensor[(5, 8, 10), float64] */
}

def @func_5329() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(432), float64]) {
  @func_5327() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(432), float64]) */
}

def @func_5069() -> (Tensor[(432), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) {
  %327 = fn () -> (Tensor[(432), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) {
    %317 = @func_991() /* ty=(Tensor[(12, 10, 5), float64],) */;
    %318 = @func_4085() /* ty=(Tensor[(12, 10, 5), bool],) */;
    %319 = @func_2882() /* ty=(Tensor[(12, 10, 5), float64],) */;
    %320 = @func_1407() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
    %321 = @func_4528() /* ty=Tensor[(432), float64] */;
    %322 = %317.0;
    %323 = @func_2129() /* ty=Tensor[(12, 10, 5), float64] */;
    %324 = %318.0;
    %325 = %319.0;
    %326 = %320.0;
    (%321, %322, %323, %324, %325, %326)
  };
  %327() /* ty=(Tensor[(432), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */
}

def @func_1407() -> (Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) {
  %328 = @func_908() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %329 = @func_823() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %330 = @func_1042() /* ty=Tensor[(12, 10, 5), bool] */;
  %331 = %328.0;
  %332 = %329.0;
  (%330, %331, %332)
}

def @func_10104() -> (Tensor[(12, 10, 5), float32],) {
  %335 = fn () -> (Tensor[(12, 10, 5), float32],) {
    %333 = @func_9902() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %334 = %333.0;
    (%334,)
  };
  %335() /* ty=(Tensor[(12, 10, 5), float32],) */
}

def @func_11163(%var_11105: Tensor[(720), int8]) -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(720), int8], Tensor[(1056, 2), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) {
  %336 = @func_8234() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */;
  %337 = @func_8543() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */;
  %338 = cast(%var_11105, dtype="int8") /* ty=Tensor[(720), int8] */;
  %339 = cast(%var_11105, dtype="int8") /* ty=Tensor[(720), int8] */;
  %340 = cast(meta[relay.Constant][10] /* ty=Tensor[(1056, 2), float32] */, dtype="float32") /* ty=Tensor[(1056, 2), float32] */;
  %341 = reshape(%338, newshape=[16, 5, 9]) /* ty=Tensor[(16, 5, 9), int8] */;
  %342 = reshape(%339, newshape=[16, 5, 9]) /* ty=Tensor[(16, 5, 9), int8] */;
  %343 = reshape(%340, newshape=[528, 4]) /* ty=Tensor[(528, 4), float32] */;
  %344 = @func_8806(%341, %342, %343) /* ty=(Tensor[(16, 5, 9), int8], Tensor[(12, 10, 5), float32], Tensor[(528, 4), float32], Tensor[(13, 12, 14), int32], Tensor[(2184), int32], Tensor[(12, 10, 5), float32], Tensor[(13, 2, 4), float32]) */;
  %345 = @func_6953() /* ty=(Tensor[(500), int32], Tensor[(12, 10, 5), float64]) */;
  %346 = %336.1;
  %347 = %337.1;
  %348 = %344.1;
  %349 = %345.1;
  %350 = @func_2989() /* ty=Tensor[(12, 10, 5), bool] */;
  (%346, %347, %348, %var_11105, meta[relay.Constant][10] /* ty=Tensor[(1056, 2), float32] */, %349, %350)
}

def @func_13929() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) {
  %351 = @func_10565() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %352 = @func_5207() /* ty=Tensor[(12, 10, 5), float32] */;
  %353 = %351.0;
  (%352, %353)
}

def @func_15647() -> (Tensor[(12, 10, 5), float32], Tensor[(1, 432), float64], Tensor[(165), bool]) {
  %354 = @func_14588() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %355 = cast(meta[relay.Constant][11] /* ty=Tensor[(165), bool] */, dtype="bool") /* ty=Tensor[(165), bool] */;
  %356 = reshape(%355, newshape=[165]) /* ty=Tensor[(165), bool] */;
  %357 = @func_5673(%356) /* ty=(Tensor[(5, 8, 10), int8], Tensor[(216, 2), float64], Tensor[(165), bool], Tensor[(2112), float32], Tensor[(825), bool], Tensor[(1, 432), float64]) */;
  %358 = %354.0;
  %359 = %357.5;
  (%358, %359, meta[relay.Constant][11] /* ty=Tensor[(165), bool] */)
}

def @func_15402() -> (Tensor[(5, 8, 10), uint16], Tensor[(12, 10, 5), float32]) {
  %360 = @func_12571() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) */;
  %361 = @func_10350() /* ty=Tensor[(5, 8, 10), uint16] */;
  %362 = %360.0;
  (%361, %362)
}

def @func_2399() -> (Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) {
  %369 = fn () -> (Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) {
    %363 = @func_2019() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool]) */;
    %364 = @func_1243() /* ty=(Tensor[(12, 10, 5), float64],) */;
    %365 = @func_1230() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %366 = %363.0;
    %367 = %364.0;
    %368 = %365.0;
    (%366, %367, %368)
  };
  %369() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */
}

def @func_8091() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(14, 1, 5), float32]) {
  %380 = fn () -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(14, 1, 5), float32]) {
    %370 = @func_991() /* ty=(Tensor[(12, 10, 5), float64],) */;
    %371 = @func_1243() /* ty=(Tensor[(12, 10, 5), float64],) */;
    %372 = @func_908() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %373 = @func_2019() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool]) */;
    %374 = @func_1940() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(14, 1, 5), float32]) */;
    %375 = %370.0;
    %376 = %371.0;
    %377 = %372.0;
    %378 = %373.1;
    %379 = %374.1;
    (%375, %376, %377, %378, %379)
  };
  %380() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(14, 1, 5), float32]) */
}

def @func_4339() -> (Tensor[(12, 10, 5), bool],) {
  %382 = fn () -> (Tensor[(12, 10, 5), bool],) {
    %381 = @func_2989() /* ty=Tensor[(12, 10, 5), bool] */;
    (%381,)
  };
  %382() /* ty=(Tensor[(12, 10, 5), bool],) */
}

def @func_11452() -> (Tensor[(5, 8, 10), float32],) {
  %385 = fn () -> (Tensor[(5, 8, 10), float32],) {
    %383 = @func_4301() /* ty=(Tensor[(5, 8, 10), float32], Tensor[(12, 10, 5), float64]) */;
    %384 = %383.0;
    (%384,)
  };
  %385() /* ty=(Tensor[(5, 8, 10), float32],) */
}

def @func_14142(%var_14140: Tensor[(560), int16]) -> (Tensor[(12, 10, 5), bool], Tensor[(560), int16], Tensor[(1, 260), float32], Tensor[(260), float64]) {
  @func_14139(%var_14140) /* ty=(Tensor[(12, 10, 5), bool], Tensor[(560), int16], Tensor[(1, 260), float32], Tensor[(260), float64]) */
}

def @func_3529() -> Tensor[(12, 10, 5), float32] {
  @func_3527() /* ty=Tensor[(12, 10, 5), float32] */
}

def @func_16516() -> (Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), int8]) {
  %389 = fn () -> (Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), int8]) {
    %386 = @func_15647() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(1, 432), float64], Tensor[(165), bool]) */;
    %387 = %386.0;
    %388 = @func_3827() /* ty=Tensor[(5, 8, 10), int8] */;
    (%387, %388)
  };
  %389() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), int8]) */
}

def @func_4322(%var_4316: Tensor[(11, 5, 3), float32]) -> Tensor[(11, 5, 3), float32] {
  %390 = cast(%var_4316, dtype="float32") /* ty=Tensor[(11, 5, 3), float32] */;
  cosh(%390) /* ty=Tensor[(11, 5, 3), float32] */
}

def @func_9090(%var_9088: Tensor[(2112), float32], %var_9089: Tensor[(13, 28), float32]) -> (Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), uint16], Tensor[(2112), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), int8], Tensor[(165), bool], Tensor[(13, 28), float64], Tensor[(14, 1, 5), float64], Tensor[(432), float64]) {
  %420 = fn (%var_8976: Tensor[(2112), float32], %var_9040: Tensor[(13, 28), float32]) -> (Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), uint16], Tensor[(2112), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), int8], Tensor[(165), bool], Tensor[(13, 28), float64], Tensor[(14, 1, 5), float64], Tensor[(432), float64]) {
    %391 = cast(%var_8976, dtype="float32") /* ty=Tensor[(2112), float32] */;
    %392 = reshape(%391, newshape=[2112]) /* ty=Tensor[(2112), float32] */;
    %393 = @func_3630(%392) /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), uint16], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(2112), bool], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), int8]) */;
    %394 = @func_7517() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(5, 8, 10), int8], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), bool]) */;
    %395 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 28), float32] */, dtype="float32") /* ty=Tensor[(1, 28), float32] */;
    %396 = reshape(%395, newshape=[2, 14, 1]) /* ty=Tensor[(2, 14, 1), float32] */;
    %397 = @func_2974(%396) /* ty=(Tensor[(2, 14, 1), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) */;
    %398 = @func_6363() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
    %399 = cast(meta[relay.Constant][13] /* ty=Tensor[(165), bool] */, dtype="bool") /* ty=Tensor[(165), bool] */;
    %400 = reshape(%399, newshape=[165]) /* ty=Tensor[(165), bool] */;
    %401 = @func_5673(%400) /* ty=(Tensor[(5, 8, 10), int8], Tensor[(216, 2), float64], Tensor[(165), bool], Tensor[(2112), float32], Tensor[(825), bool], Tensor[(1, 432), float64]) */;
    %402 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 28), float32] */, dtype="int64") /* ty=Tensor[(1, 28), int64] */;
    %403 = cast(%var_9040, dtype="int64") /* ty=Tensor[(13, 28), int64] */;
    %404 = bitwise_and(%402, %403) /* ty=Tensor[(13, 28), int64] */;
    %405 = cast(%404, dtype="float64") /* ty=Tensor[(13, 28), float64] */;
    %406 = cast(meta[relay.Constant][14] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
    %407 = reshape(%406, newshape=[432]) /* ty=Tensor[(432), float64] */;
    %408 = @func_941(%407) /* ty=(Tensor[(14, 1, 5), float64], Tensor[(500), float32], Tensor[(432), float64], Tensor[(14, 1, 5), float32]) */;
    %409 = @func_2155() /* ty=Tensor[(12, 10, 5), float64] */;
    %410 = %393.2;
    %411 = %394.1;
    %412 = @func_6670() /* ty=Tensor[(12, 10, 5), float32] */;
    %413 = %397.1;
    %414 = @func_3463() /* ty=Tensor[(12, 10, 5), float64] */;
    %415 = @func_3503() /* ty=Tensor[(12, 10, 5), float64] */;
    %416 = %398.0;
    %417 = %401.0;
    %418 = log(%405) /* ty=Tensor[(13, 28), float64] */;
    %419 = %408.0;
    (%409, %410, %var_8976, %411, %412, %413, %414, %415, %416, %417, meta[relay.Constant][13] /* ty=Tensor[(165), bool] */, %418, %419, meta[relay.Constant][14] /* ty=Tensor[(432), float64] */)
  };
  %420(%var_9088, %var_9089) /* ty=(Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), uint16], Tensor[(2112), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), int8], Tensor[(165), bool], Tensor[(13, 28), float64], Tensor[(14, 1, 5), float64], Tensor[(432), float64]) */
}

def @func_13332() -> (Tensor[(12, 10, 5), float32],) {
  @func_13330() /* ty=(Tensor[(12, 10, 5), float32],) */
}

def @func_4989() -> (Tensor[(12, 10, 5), float64],) {
  %423 = fn () -> (Tensor[(12, 10, 5), float64],) {
    %421 = @func_1243() /* ty=(Tensor[(12, 10, 5), float64],) */;
    %422 = %421.0;
    (%422,)
  };
  %423() /* ty=(Tensor[(12, 10, 5), float64],) */
}

def @func_10352() -> Tensor[(5, 8, 10), uint16] {
  @func_10350() /* ty=Tensor[(5, 8, 10), uint16] */
}

def @func_2741() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) {
  %427 = fn () -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) {
    %424 = @func_1523() /* ty=(Tensor[(12, 10, 5), float64],) */;
    %425 = %424.0;
    %426 = @func_2155() /* ty=Tensor[(12, 10, 5), float64] */;
    (%425, %426)
  };
  %427() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) */
}

def @func_16111() -> (Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), uint16]) {
  @func_16109() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), uint16]) */
}

def @func_13401() -> Tensor[(5, 8, 10), float32] {
  %428 = @func_11451() /* ty=(Tensor[(5, 8, 10), float32],) */;
  %428.0
}

def @func_15681(%var_15676: Tensor[(8, 14, 3), bool]) -> Tensor[(8, 14, 3), bool] {
  %429 = cast(meta[relay.Constant][15] /* ty=Tensor[(8, 14, 3), bool] */, dtype="bool") /* ty=Tensor[(8, 14, 3), bool] */;
  %430 = shape_of(%var_15676, dtype="int32") /* ty=Tensor[(3), int32] */;
  %431 = cast(%var_15676, dtype="bool") /* ty=Tensor[(8, 14, 3), bool] */;
  %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%431, %432) /* ty=Tensor[(8, 14, 3), bool] */
}

def @func_16395() -> Tensor[(12, 10, 5), float64] {
  %434 = fn () -> Tensor[(12, 10, 5), float64] {
    %433 = @func_10243() /* ty=(Tensor[(432), float64], Tensor[(432), float64], Tensor[(12, 10, 5), float64]) */;
    %433.2
  };
  %434() /* ty=Tensor[(12, 10, 5), float64] */
}

def @func_14401(%var_14399: Tensor[(14, 2, 1), int64], %var_14400: Tensor[(14, 2, 7), int64]) -> Tensor[(14, 2, 7), bool] {
  @func_14397(%var_14399, %var_14400) /* ty=Tensor[(14, 2, 7), bool] */
}

def @func_5982(%var_5981: Tensor[(13, 12, 14), int32]) -> Tensor[(13, 12, 14), int32] {
  %439 = fn (%var_5975: Tensor[(13, 12, 14), int32]) -> Tensor[(13, 12, 14), int32] {
    %435 = cast(meta[relay.Constant][16] /* ty=Tensor[(13, 12, 14), int32] */, dtype="int32") /* ty=Tensor[(13, 12, 14), int32] */;
    %436 = shape_of(%var_5975, dtype="int32") /* ty=Tensor[(3), int32] */;
    %437 = cast(%var_5975, dtype="int32") /* ty=Tensor[(13, 12, 14), int32] */;
    %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    bitwise_or(%437, %438) /* ty=Tensor[(13, 12, 14), int32] */
  };
  %439(%var_5981) /* ty=Tensor[(13, 12, 14), int32] */
}

def @func_5676(%var_5674: Tensor[(165), bool]) -> (Tensor[(5, 8, 10), int8], Tensor[(216, 2), float64], Tensor[(165), bool], Tensor[(2112), float32], Tensor[(825), bool], Tensor[(1, 432), float64]) {
  @func_5673(%var_5674) /* ty=(Tensor[(5, 8, 10), int8], Tensor[(216, 2), float64], Tensor[(165), bool], Tensor[(2112), float32], Tensor[(825), bool], Tensor[(1, 432), float64]) */
}

def @func_14922() -> (Tensor[(12, 10, 5), bool], Tensor[(640), float64], Tensor[(12, 10, 5), float64], Tensor[(260), float32]) {
  @func_14920() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(640), float64], Tensor[(12, 10, 5), float64], Tensor[(260), float32]) */
}

def @func_9141(%var_9139: Tensor[(5, 4, 1), int8], %var_9140: Tensor[(5, 4, 1), int8]) -> (Tensor[(5, 4, ?), int8], Tensor[(12, 10, 5), float32], Tensor[(720), int8], Tensor[(1, 2112), float32], Tensor[(12, 10, 5), float64]) {
  %454 = fn (%var_9126: Tensor[(5, 4, 1), int8], %var_9127: Tensor[(5, 4, 1), int8]) -> (Tensor[(5, 4, ?), int8], Tensor[(12, 10, 5), float32], Tensor[(720), int8], Tensor[(1, 2112), float32], Tensor[(12, 10, 5), float64]) {
    %440 = cast(%var_9127, dtype="int8") /* ty=Tensor[(5, 4, 1), int8] */;
    %441 = shape_of(%var_9126, dtype="int32") /* ty=Tensor[(3), int32] */;
    %442 = cast(%var_9126, dtype="int8") /* ty=Tensor[(5, 4, 1), int8] */;
    %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %444 = cast(meta[relay.Constant][17] /* ty=Tensor[(720), int8] */, dtype="int8") /* ty=Tensor[(720), int8] */;
    %445 = cast(meta[relay.Constant][17] /* ty=Tensor[(720), int8] */, dtype="int8") /* ty=Tensor[(720), int8] */;
    %446 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 2112), float32] */, dtype="float32") /* ty=Tensor[(1, 2112), float32] */;
    %447 = reshape(%444, newshape=[16, 5, 9]) /* ty=Tensor[(16, 5, 9), int8] */;
    %448 = reshape(%445, newshape=[16, 5, 9]) /* ty=Tensor[(16, 5, 9), int8] */;
    %449 = reshape(%446, newshape=[528, 4]) /* ty=Tensor[(528, 4), float32] */;
    %450 = @func_8806(%447, %448, %449) /* ty=(Tensor[(16, 5, 9), int8], Tensor[(12, 10, 5), float32], Tensor[(528, 4), float32], Tensor[(13, 12, 14), int32], Tensor[(2184), int32], Tensor[(12, 10, 5), float32], Tensor[(13, 2, 4), float32]) */;
    %451 = multiply(%442, %443) /* ty=Tensor[(5, 4, ?), int8] */;
    %452 = %450.1;
    %453 = @func_2129() /* ty=Tensor[(12, 10, 5), float64] */;
    (%451, %452, meta[relay.Constant][17] /* ty=Tensor[(720), int8] */, meta[relay.Constant][18] /* ty=Tensor[(1, 2112), float32] */, %453)
  };
  %454(%var_9139, %var_9140) /* ty=(Tensor[(5, 4, ?), int8], Tensor[(12, 10, 5), float32], Tensor[(720), int8], Tensor[(1, 2112), float32], Tensor[(12, 10, 5), float64]) */
}

def @func_16755() -> (Tensor[(12, 10, 5), float32],) {
  %457 = fn () -> (Tensor[(12, 10, 5), float32],) {
    %455 = @func_14788() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), float32], Tensor[(12, 10, 5), float32], Tensor[(165), float32]) */;
    %456 = %455.2;
    (%456,)
  };
  %457() /* ty=(Tensor[(12, 10, 5), float32],) */
}

def @func_11611() -> (Tensor[(5, 8, 10), float32],) {
  %462 = fn () -> (Tensor[(5, 8, 10), float32],) {
    %458 = @func_2192() /* ty=(Tensor[(5, 8, 10), int8],) */;
    %459 = %458.0;
    %460 = cast(%459, dtype="float32") /* ty=Tensor[(5, 8, 10), float32] */;
    %461 = acos(%460) /* ty=Tensor[(5, 8, 10), float32] */;
    (%461,)
  };
  %462() /* ty=(Tensor[(5, 8, 10), float32],) */
}

def @func_4771() -> Tensor[(5, 8, 10), bool] {
  %463 = @func_4498() /* ty=Tensor[(5, 8, 10), int8] */;
  %464 = cast(%463, dtype="float32") /* ty=Tensor[(5, 8, 10), float32] */;
  %465 = sin(%464) /* ty=Tensor[(5, 8, 10), float32] */;
  %466 = cast(%465, dtype="bool") /* ty=Tensor[(5, 8, 10), bool] */;
  %467 = shape_of(%463, dtype="int32") /* ty=Tensor[(3), int32] */;
  %468 = cast(%463, dtype="bool") /* ty=Tensor[(5, 8, 10), bool] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%468, %469) /* ty=Tensor[(5, 8, 10), bool] */
}

def @func_8936(%var_8934: bool) -> (Tensor[(12, 10, 5), bool], Tensor[(7, 13, 14), bool], bool) {
  @func_8933(%var_8934) /* ty=(Tensor[(12, 10, 5), bool], Tensor[(7, 13, 14), bool], bool) */
}

def @func_6344() -> Tensor[(12, 10, 5), float32] {
  @func_6342() /* ty=Tensor[(12, 10, 5), float32] */
}

def @func_6364() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) {
  %472 = fn () -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) {
    %470 = @func_5563() /* ty=Tensor[(12, 10, 5), float32] */;
    %471 = @func_6250() /* ty=Tensor[(12, 10, 5), float32] */;
    (%470, %471)
  };
  %472() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */
}

def @func_13516(%var_13514: Tensor[(14, 5, 10), float32], %var_13515: Tensor[(14, 5, 10), float32]) -> Tensor[(14, 5, 10), float32] {
  %477 = fn (%var_13504: Tensor[(14, 5, 10), float32], %var_13505: Tensor[(14, 5, 10), float32]) -> Tensor[(14, 5, 10), float32] {
    %473 = cast(%var_13505, dtype="float32") /* ty=Tensor[(14, 5, 10), float32] */;
    %474 = shape_of(%var_13504, dtype="int32") /* ty=Tensor[(3), int32] */;
    %475 = cast(%var_13504, dtype="float32") /* ty=Tensor[(14, 5, 10), float32] */;
    %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_mod(%475, %476) /* ty=Tensor[(14, 5, 10), float32] */
  };
  %477(%var_13514, %var_13515) /* ty=Tensor[(14, 5, 10), float32] */
}

def @func_12335() -> (Tensor[(5, 8, 10), int8],) {
  @func_12333() /* ty=(Tensor[(5, 8, 10), int8],) */
}

def @func_15123(%var_15122: Tensor[(500), float32]) -> (Tensor[(10, 10, 5), float32], Tensor[(500), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(5, 8, 10), int64], Tensor[(13, 2, 4), float64]) {
  %500 = fn (%var_15051: Tensor[(500), float32]) -> (Tensor[(10, 10, 5), float32], Tensor[(500), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(5, 8, 10), int64], Tensor[(13, 2, 4), float64]) {
    %478 = cast(%var_15051, dtype="float32") /* ty=Tensor[(500), float32] */;
    %479 = reshape(%478, newshape=[10, 10, 5]) /* ty=Tensor[(10, 10, 5), float32] */;
    %480 = @func_1174() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(10, 10, 5), float32], Tensor[(14, 1, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(500), int32]) */;
    %481 = @func_1407() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
    %482 = @func_6863() /* ty=(Tensor[(5, 8, 10), int8],) */;
    %483 = %482.0;
    %484 = cast(%483, dtype="float32") /* ty=Tensor[(5, 8, 10), float32] */;
    %485 = tan(%484) /* ty=Tensor[(5, 8, 10), float32] */;
    %486 = cast(%485, dtype="float32") /* ty=Tensor[(5, 8, 10), float32] */;
    %487 = cosh(%486) /* ty=Tensor[(5, 8, 10), float32] */;
    %488 = @func_7285() /* ty=(Tensor[(432), float64], Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), int8]) */;
    %489 = %488.2;
    %490 = cast(%489, dtype="int64") /* ty=Tensor[(5, 8, 10), int64] */;
    %491 = shape_of(%487, dtype="int32") /* ty=Tensor[(3), int32] */;
    %492 = cast(%487, dtype="int64") /* ty=Tensor[(5, 8, 10), int64] */;
    %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %494 = @func_268(%479) /* ty=Tensor[(10, 10, 5), float32] */;
    %495 = @func_2526() /* ty=Tensor[(12, 10, 5), float64] */;
    %496 = %480.4;
    %497 = %481.0;
    %498 = right_shift(%492, %493) /* ty=Tensor[(5, 8, 10), int64] */;
    %499 = @func_4699() /* ty=Tensor[(13, 2, 4), float64] */;
    (%494, %var_15051, %495, %496, %497, %498, %499)
  };
  %500(%var_15122) /* ty=(Tensor[(10, 10, 5), float32], Tensor[(500), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(5, 8, 10), int64], Tensor[(13, 2, 4), float64]) */
}

def @func_5716() -> (Tensor[(12, 10, 5), bool],) {
  %501 = @func_3841() /* ty=Tensor[(12, 10, 5), bool] */;
  (%501,)
}

def @func_15404() -> (Tensor[(5, 8, 10), uint16], Tensor[(12, 10, 5), float32]) {
  @func_15402() /* ty=(Tensor[(5, 8, 10), uint16], Tensor[(12, 10, 5), float32]) */
}

def @func_5842() -> (Tensor[(12, 10, 5), float32],) {
  %504 = fn () -> (Tensor[(12, 10, 5), float32],) {
    %502 = @func_908() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %503 = %502.0;
    (%503,)
  };
  %504() /* ty=(Tensor[(12, 10, 5), float32],) */
}

def @func_7916() -> (Tensor[(12, 10, 5), float32],) {
  @func_7914() /* ty=(Tensor[(12, 10, 5), float32],) */
}

def @func_13025() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) {
  %505 = @func_4178() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(432), float64]) */;
  %506 = %505.1;
  %507 = @func_4572() /* ty=Tensor[(12, 10, 5), float64] */;
  (%506, %507)
}

def @func_970(%var_969: Tensor[(432), float64]) -> (Tensor[(12, 10, 5), float32], Tensor[(10, 10, 5), float32], Tensor[(432), float64]) {
  %514 = fn (%var_965: Tensor[(432), float64]) -> (Tensor[(12, 10, 5), float32], Tensor[(10, 10, 5), float32], Tensor[(432), float64]) {
    %508 = @func_823() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
    %509 = cast(%var_965, dtype="float64") /* ty=Tensor[(432), float64] */;
    %510 = reshape(%509, newshape=[8, 6, 9]) /* ty=Tensor[(8, 6, 9), float64] */;
    %511 = @func_380(%510) /* ty=(Tensor[(10, 10, 5), float32], Tensor[(500), float32], Tensor[(8, 6, 9), int8]) */;
    %512 = %508.1;
    %513 = %511.0;
    (%512, %513, %var_965)
  };
  %514(%var_969) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(10, 10, 5), float32], Tensor[(432), float64]) */
}

def @func_1523() -> (Tensor[(12, 10, 5), float64],) {
  %515 = @func_1407() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %516 = %515.2;
  %517 = cast(%516, dtype="float64") /* ty=Tensor[(12, 10, 5), float64] */;
  %518 = acosh(%517) /* ty=Tensor[(12, 10, 5), float64] */;
  (%518,)
}

def @func_4221() -> Tensor[(12, 10, 5), float64] {
  @func_4219() /* ty=Tensor[(12, 10, 5), float64] */
}

def @func_941(%var_933: Tensor[(432), float64]) -> (Tensor[(14, 1, 5), float64], Tensor[(500), float32], Tensor[(432), float64], Tensor[(14, 1, 5), float32]) {
  %519 = cast(meta[relay.Constant][19] /* ty=Tensor[(14, 1, 5), float64] */, dtype="float64") /* ty=Tensor[(14, 1, 5), float64] */;
  %520 = cast(%var_933, dtype="float64") /* ty=Tensor[(432), float64] */;
  %521 = reshape(%520, newshape=[8, 6, 9]) /* ty=Tensor[(8, 6, 9), float64] */;
  %522 = @func_380(%521) /* ty=(Tensor[(10, 10, 5), float32], Tensor[(500), float32], Tensor[(8, 6, 9), int8]) */;
  %523 = cast(meta[relay.Constant][19] /* ty=Tensor[(14, 1, 5), float64] */, dtype="float32") /* ty=Tensor[(14, 1, 5), float32] */;
  %524 = exp(%519) /* ty=Tensor[(14, 1, 5), float64] */;
  %525 = %522.1;
  %526 = sin(%523) /* ty=Tensor[(14, 1, 5), float32] */;
  (%524, %525, %var_933, %526)
}

def @func_5506(%var_5492: Tensor[(165), float32]) -> (Tensor[(12, 10, 5), float32], Tensor[(11, 5, 3), float32], Tensor[(165), float64]) {
  %527 = @func_1407() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %528 = cast(%var_5492, dtype="float32") /* ty=Tensor[(165), float32] */;
  %529 = reshape(%528, newshape=[11, 5, 3]) /* ty=Tensor[(11, 5, 3), float32] */;
  %530 = cast(%var_5492, dtype="float64") /* ty=Tensor[(165), float64] */;
  %531 = %527.2;
  %532 = @func_4322(%529) /* ty=Tensor[(11, 5, 3), float32] */;
  %533 = asinh(%530) /* ty=Tensor[(165), float64] */;
  (%531, %532, %533)
}

def @func_4179() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(432), float64]) {
  %538 = fn () -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(432), float64]) {
    %534 = @func_1988() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %535 = @func_1416() /* ty=Tensor[(12, 10, 5), float32] */;
    %536 = %534.0;
    %537 = @func_3220() /* ty=Tensor[(432), float64] */;
    (%535, %536, %537)
  };
  %538() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(432), float64]) */
}

def @func_7628(%var_7626: Tensor[(7, 2, 10), uint8], %var_7627: Tensor[(7, 2, 10), uint8]) -> (Tensor[(7, 2, 10), uint8], Tensor[(432), float64], Tensor[(12, 10, 5), float32]) {
  @func_7624(%var_7626, %var_7627) /* ty=(Tensor[(7, 2, 10), uint8], Tensor[(432), float64], Tensor[(12, 10, 5), float32]) */
}

def @func_3443() -> (Tensor[(5, 8, 10), uint16], Tensor[(5, 8, 10), int8]) {
  %539 = @func_2192() /* ty=(Tensor[(5, 8, 10), int8],) */;
  %540 = %539.0;
  %541 = cast(meta[relay.Constant][20] /* ty=Tensor[(5, 8, 10), int8] */, dtype="uint16") /* ty=Tensor[(5, 8, 10), uint16] */;
  %542 = shape_of(%540, dtype="int32") /* ty=Tensor[(3), int32] */;
  %543 = cast(%540, dtype="uint16") /* ty=Tensor[(5, 8, 10), uint16] */;
  %544 = dyn.reshape(%541, %542, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %545 = @func_2839() /* ty=(Tensor[(5, 8, 10), int8],) */;
  %546 = bitwise_and(%543, %544) /* ty=Tensor[(5, 8, 10), uint16] */;
  %547 = %545.0;
  (%546, %547)
}

def @func_11319() -> (Tensor[(12, 10, 5), float32],) {
  @func_11317() /* ty=(Tensor[(12, 10, 5), float32],) */
}

def @func_12949() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) {
  %552 = fn () -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) {
    %548 = @func_12538() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %549 = @func_12538() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %550 = %548.0;
    %551 = %549.0;
    (%550, %551)
  };
  %552() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */
}

def @func_7020() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), bool], Tensor[(12, 10, 5), float32]) {
  %560 = fn () -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), bool], Tensor[(12, 10, 5), float32]) {
    %553 = @func_2882() /* ty=(Tensor[(12, 10, 5), float64],) */;
    %554 = @func_4044() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %555 = @func_614() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %556 = %553.0;
    %557 = %554.0;
    %558 = @func_4771() /* ty=Tensor[(5, 8, 10), bool] */;
    %559 = %555.0;
    (%556, %557, %558, %559)
  };
  %560() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), bool], Tensor[(12, 10, 5), float32]) */
}

def @func_15684(%var_15682: Tensor[(8, 14, 3), bool]) -> Tensor[(8, 14, 3), bool] {
  @func_15681(%var_15682) /* ty=Tensor[(8, 14, 3), bool] */
}

def @func_6764() -> Tensor[(12, 10, 5), float32] {
  %562 = fn () -> Tensor[(12, 10, 5), float32] {
    %561 = @func_4044() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %561.0
  };
  %562() /* ty=Tensor[(12, 10, 5), float32] */
}

def @func_6446() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) {
  %563 = @func_1678() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %564 = @func_3527() /* ty=Tensor[(12, 10, 5), float32] */;
  %565 = %563.0;
  (%564, %565)
}

def @func_13474() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) {
  @func_13472() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */
}

def @func_2504() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) {
  %572 = fn () -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) {
    %566 = @func_710() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %567 = @func_769() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) */;
    %568 = @func_823() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
    %569 = %566.0;
    %570 = %567.1;
    %571 = %568.1;
    (%569, %570, %571)
  };
  %572() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */
}

def @func_6179(%var_6162: Tensor[(165), float32]) -> (Tensor[(432), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(11, 5, 3), float32], Tensor[(165), float32], Tensor[(12, 10, 5), float32]) {
  %573 = @func_5327() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(432), float64]) */;
  %574 = @func_4253() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %575 = @func_2740() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) */;
  %576 = cast(%var_6162, dtype="float32") /* ty=Tensor[(165), float32] */;
  %577 = reshape(%576, newshape=[11, 5, 3]) /* ty=Tensor[(11, 5, 3), float32] */;
  %578 = %573.3;
  %579 = %574.0;
  %580 = %575.0;
  %581 = @func_4322(%577) /* ty=Tensor[(11, 5, 3), float32] */;
  %582 = @func_5207() /* ty=Tensor[(12, 10, 5), float32] */;
  (%578, %579, %580, %581, %var_6162, %582)
}

def @func_11072() -> Tensor[(12, 10, 5), float64] {
  @func_4219() /* ty=Tensor[(12, 10, 5), float64] */
}

def @func_16092() -> (Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), uint16], Tensor[(1440, 1), float64], Tensor[(5, 5, 14), float32], Tensor[(350), float32]) {
  @func_16090() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), uint16], Tensor[(1440, 1), float64], Tensor[(5, 5, 14), float32], Tensor[(350), float32]) */
}

def @func_4700() -> Tensor[(13, 2, 4), float64] {
  %584 = fn () -> Tensor[(13, 2, 4), float64] {
    %583 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 2, 4), float64] */, dtype="float64") /* ty=Tensor[(13, 2, 4), float64] */;
    acos(%583) /* ty=Tensor[(13, 2, 4), float64] */
  };
  %584() /* ty=Tensor[(13, 2, 4), float64] */
}

def @func_9588(%var_9586: Tensor[(140), uint8]) -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(432), float64], Tensor[(140), uint8]) {
  @func_9585(%var_9586) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(432), float64], Tensor[(140), uint8]) */
}

def @func_6448() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) {
  @func_6446() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */
}

def @func_5209() -> Tensor[(12, 10, 5), float32] {
  @func_5207() /* ty=Tensor[(12, 10, 5), float32] */
}

def @func_13214(%var_13212: Tensor[(10, 14, 11), int8], %var_13213: Tensor[(10, 14, 11), int8]) -> Tensor[(10, 14, 11), int8] {
  @func_13210(%var_13212, %var_13213) /* ty=Tensor[(10, 14, 11), int8] */
}

def @func_3445() -> (Tensor[(5, 8, 10), uint16], Tensor[(5, 8, 10), int8]) {
  @func_3443() /* ty=(Tensor[(5, 8, 10), uint16], Tensor[(5, 8, 10), int8]) */
}

def @func_1703() -> (Tensor[(14, 1, 5), float32], Tensor[(12, 10, 5), float32]) {
  %585 = @func_1174() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(10, 10, 5), float32], Tensor[(14, 1, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(500), int32]) */;
  %586 = @func_908() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %587 = %585.2;
  %588 = %586.0;
  (%587, %588)
}

def @func_8811(%var_8808: Tensor[(16, 5, 9), int8], %var_8809: Tensor[(16, 5, 9), int8], %var_8810: Tensor[(528, 4), float32]) -> (Tensor[(16, 5, 9), int8], Tensor[(12, 10, 5), float32], Tensor[(528, 4), float32], Tensor[(13, 12, 14), int32], Tensor[(2184), int32], Tensor[(12, 10, 5), float32], Tensor[(13, 2, 4), float32]) {
  @func_8806(%var_8808, %var_8809, %var_8810) /* ty=(Tensor[(16, 5, 9), int8], Tensor[(12, 10, 5), float32], Tensor[(528, 4), float32], Tensor[(13, 12, 14), int32], Tensor[(2184), int32], Tensor[(12, 10, 5), float32], Tensor[(13, 2, 4), float32]) */
}

def @func_8666() -> (Tensor[(12, 10, 5), bool],) {
  %590 = fn () -> (Tensor[(12, 10, 5), bool],) {
    %589 = @func_8329() /* ty=Tensor[(12, 10, 5), bool] */;
    (%589,)
  };
  %590() /* ty=(Tensor[(12, 10, 5), bool],) */
}

def @func_9828() -> (Tensor[(12, 10, 5), float32],) {
  @func_9826() /* ty=(Tensor[(12, 10, 5), float32],) */
}

def @func_5327() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(432), float64]) {
  %591 = @func_5068() /* ty=(Tensor[(432), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */;
  %592 = @func_4085() /* ty=(Tensor[(12, 10, 5), bool],) */;
  %593 = @func_1678() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %594 = @func_1174() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(10, 10, 5), float32], Tensor[(14, 1, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(500), int32]) */;
  %595 = %591.4;
  %596 = %592.0;
  %597 = %593.0;
  %598 = %594.3;
  (%595, %596, %597, %598)
}

def @func_9201() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) {
  %599 = @func_6446() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %600 = @func_3503() /* ty=Tensor[(12, 10, 5), float64] */;
  %601 = %599.0;
  (%600, %601)
}

def @func_16534() -> (Tensor[(12, 10, 5), float64],) {
  %604 = fn () -> (Tensor[(12, 10, 5), float64],) {
    %602 = @func_1243() /* ty=(Tensor[(12, 10, 5), float64],) */;
    %603 = %602.0;
    (%603,)
  };
  %604() /* ty=(Tensor[(12, 10, 5), float64],) */
}

def @func_909() -> (Tensor[(12, 10, 5), float32],) {
  %607 = fn () -> (Tensor[(12, 10, 5), float32],) {
    %605 = @func_823() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
    %606 = %605.1;
    (%606,)
  };
  %607() /* ty=(Tensor[(12, 10, 5), float32],) */
}

def @func_4046() -> (Tensor[(12, 10, 5), float32],) {
  @func_4044() /* ty=(Tensor[(12, 10, 5), float32],) */
}

def @func_10223(%var_10221: Tensor[(10, 10, 5), float32]) -> (Tensor[(12, 10, 5), float64], Tensor[(10, 10, 5), bool], Tensor[(12, 10, 5), bool], Tensor[(5, 8, 10), int8], Tensor[(1, 260), float32]) {
  @func_10220(%var_10221) /* ty=(Tensor[(12, 10, 5), float64], Tensor[(10, 10, 5), bool], Tensor[(12, 10, 5), bool], Tensor[(5, 8, 10), int8], Tensor[(1, 260), float32]) */
}

def @func_5419() -> (Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64]) {
  %614 = fn () -> (Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64]) {
    %608 = @func_2019() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool]) */;
    %609 = @func_1940() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(14, 1, 5), float32]) */;
    %610 = @func_991() /* ty=(Tensor[(12, 10, 5), float64],) */;
    %611 = %608.1;
    %612 = %609.0;
    %613 = %610.0;
    (%611, %612, %613)
  };
  %614() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64]) */
}

def @func_1115(%var_1113: Tensor[(432), float64], %var_1114: Tensor[(500), float32]) -> (Tensor[(12, 10, 5), float32], Tensor[(14, 1, 5), float64], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(10, 10, 5), float32], Tensor[(500), float32], Tensor[(12, 10, 5), float64]) {
  %628 = fn (%var_1088: Tensor[(432), float64], %var_1104: Tensor[(500), float32]) -> (Tensor[(12, 10, 5), float32], Tensor[(14, 1, 5), float64], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(10, 10, 5), float32], Tensor[(500), float32], Tensor[(12, 10, 5), float64]) {
    %615 = @func_614() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %616 = cast(%var_1088, dtype="float64") /* ty=Tensor[(432), float64] */;
    %617 = reshape(%616, newshape=[432]) /* ty=Tensor[(432), float64] */;
    %618 = @func_941(%617) /* ty=(Tensor[(14, 1, 5), float64], Tensor[(500), float32], Tensor[(432), float64], Tensor[(14, 1, 5), float32]) */;
    %619 = @func_908() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %620 = cast(%var_1104, dtype="float32") /* ty=Tensor[(500), float32] */;
    %621 = reshape(%620, newshape=[10, 10, 5]) /* ty=Tensor[(10, 10, 5), float32] */;
    %622 = @func_991() /* ty=(Tensor[(12, 10, 5), float64],) */;
    %623 = %615.0;
    %624 = %618.0;
    %625 = %619.0;
    %626 = @func_268(%621) /* ty=Tensor[(10, 10, 5), float32] */;
    %627 = %622.0;
    (%623, %624, %var_1088, %625, %626, %var_1104, %627)
  };
  %628(%var_1113, %var_1114) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(14, 1, 5), float64], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(10, 10, 5), float32], Tensor[(500), float32], Tensor[(12, 10, 5), float64]) */
}

def @func_9826() -> (Tensor[(12, 10, 5), float32],) {
  %629 = @func_4044() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %630 = %629.0;
  (%630,)
}

def @func_11407() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) {
  %635 = fn () -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) {
    %631 = @func_11317() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %632 = @func_823() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
    %633 = %631.0;
    %634 = %632.1;
    (%633, %634)
  };
  %635() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */
}

def @func_1043() -> Tensor[(12, 10, 5), bool] {
  %644 = fn () -> Tensor[(12, 10, 5), bool] {
    %636 = @func_710() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %637 = %636.0;
    %638 = @func_614() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %639 = %638.0;
    %640 = cast(%639, dtype="bool") /* ty=Tensor[(12, 10, 5), bool] */;
    %641 = shape_of(%637, dtype="int32") /* ty=Tensor[(3), int32] */;
    %642 = cast(%637, dtype="bool") /* ty=Tensor[(12, 10, 5), bool] */;
    %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%642, %643) /* ty=Tensor[(12, 10, 5), bool] */
  };
  %644() /* ty=Tensor[(12, 10, 5), bool] */
}

def @func_1417() -> Tensor[(12, 10, 5), float32] {
  %646 = fn () -> Tensor[(12, 10, 5), float32] {
    %645 = @func_614() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %645.0
  };
  %646() /* ty=Tensor[(12, 10, 5), float32] */
}

def @func_992() -> (Tensor[(12, 10, 5), float64],) {
  %649 = fn () -> (Tensor[(12, 10, 5), float64],) {
    %647 = @func_769() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) */;
    %648 = %647.1;
    (%648,)
  };
  %649() /* ty=(Tensor[(12, 10, 5), float64],) */
}

def @func_9861() -> Tensor[(5, 8, 10), int8] {
  %651 = fn () -> Tensor[(5, 8, 10), int8] {
    %650 = @func_7517() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(5, 8, 10), int8], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), bool]) */;
    %650.2
  };
  %651() /* ty=Tensor[(5, 8, 10), int8] */
}

def @func_13653() -> (Tensor[(12, 10, 5), float64],) {
  %654 = fn () -> (Tensor[(12, 10, 5), float64],) {
    %652 = @func_2740() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) */;
    %653 = %652.1;
    (%653,)
  };
  %654() /* ty=(Tensor[(12, 10, 5), float64],) */
}

def @func_4253() -> (Tensor[(12, 10, 5), float64],) {
  %655 = @func_3463() /* ty=Tensor[(12, 10, 5), float64] */;
  (%655,)
}

def @func_15291(%var_15278: Tensor[(260), float32]) -> (Tensor[(5, 8, 10), bool], Tensor[(12, 16, 11), int16], Tensor[(2112), int16], Tensor[(13, 2, 10), bool], Tensor[(260), float32], Tensor[(12, 10, 5), bool]) {
  %656 = cast(meta[relay.Constant][22] /* ty=Tensor[(2112), int16] */, dtype="int16") /* ty=Tensor[(2112), int16] */;
  %657 = cast(meta[relay.Constant][22] /* ty=Tensor[(2112), int16] */, dtype="int16") /* ty=Tensor[(2112), int16] */;
  %658 = reshape(%656, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), int16] */;
  %659 = reshape(%657, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), int16] */;
  %660 = @func_12244(%658, %659) /* ty=(Tensor[(12, 16, 11), int16],) */;
  %661 = cast(%var_15278, dtype="float32") /* ty=Tensor[(260), float32] */;
  %662 = reshape(%661, newshape=[13, 2, 10]) /* ty=Tensor[(13, 2, 10), float32] */;
  %663 = @func_2362(%662) /* ty=(Tensor[(13, 2, 10), bool],) */;
  %664 = @func_6873() /* ty=(Tensor[(12, 10, 5), bool],) */;
  %665 = @func_4771() /* ty=Tensor[(5, 8, 10), bool] */;
  %666 = %660.0;
  %667 = %663.0;
  %668 = %664.0;
  (%665, %666, meta[relay.Constant][22] /* ty=Tensor[(2112), int16] */, %667, %var_15278, %668)
}

def @func_5623() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) {
  %672 = fn () -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) {
    %669 = @func_1523() /* ty=(Tensor[(12, 10, 5), float64],) */;
    %670 = %669.0;
    %671 = @func_2526() /* ty=Tensor[(12, 10, 5), float64] */;
    (%670, %671)
  };
  %672() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) */
}

def @func_5115() -> Tensor[(12, 10, 5), float64] {
  %673 = @func_4149() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32]) */;
  %673.0
}

def @func_3527() -> Tensor[(12, 10, 5), float32] {
  %674 = @func_1230() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %674.0
}

def @func_1989() -> (Tensor[(12, 10, 5), float32],) {
  %676 = fn () -> (Tensor[(12, 10, 5), float32],) {
    %675 = @func_1416() /* ty=Tensor[(12, 10, 5), float32] */;
    (%675,)
  };
  %676() /* ty=(Tensor[(12, 10, 5), float32],) */
}

def @func_10405() -> Tensor[(12, 10, 5), float32] {
  %677 = fn () -> Tensor[(12, 10, 5), float32] {
    @func_7855() /* ty=Tensor[(12, 10, 5), float32] */
  };
  %677() /* ty=Tensor[(12, 10, 5), float32] */
}

def @func_1409() -> (Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) {
  @func_1407() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */
}

def @func_2803(%var_2802: Tensor[(7, 70), float32]) -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(7, 70), float32]) {
  %686 = fn (%var_2791: Tensor[(7, 70), float32]) -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(7, 70), float32]) {
    %678 = @func_991() /* ty=(Tensor[(12, 10, 5), float64],) */;
    %679 = @func_2503() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */;
    %680 = cast(%var_2791, dtype="float32") /* ty=Tensor[(7, 70), float32] */;
    %681 = reshape(%680, newshape=[14, 7, 5]) /* ty=Tensor[(14, 7, 5), float32] */;
    %682 = @func_2266(%681) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(14, 7, 5), bool]) */;
    %683 = %678.0;
    %684 = %679.0;
    %685 = %682.0;
    (%683, %684, %685, %var_2791)
  };
  %686(%var_2802) /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(7, 70), float32]) */
}

def @func_12962(%var_12961: Tensor[(13, 5, 10), float32]) -> Tensor[(13, 5, 10), float32] {
  %689 = fn (%var_12954: Tensor[(13, 5, 10), float32]) -> Tensor[(13, 5, 10), float32] {
    %687 = cast(-2.94105f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %688 = cast(%var_12954, dtype="float32") /* ty=Tensor[(13, 5, 10), float32] */;
    floor_divide(%687, %688) /* ty=Tensor[(13, 5, 10), float32] */
  };
  %689(%var_12961) /* ty=Tensor[(13, 5, 10), float32] */
}

def @func_10338(%var_10336: int8, %var_10337: Tensor[(13, 14, 3), int8]) -> Tensor[(13, 14, 3), int8] {
  %692 = fn (%var_10328: int8, %var_10329: Tensor[(13, 14, 3), int8]) -> Tensor[(13, 14, 3), int8] {
    %690 = cast(%var_10328, dtype="int8") /* ty=int8 */;
    %691 = cast(%var_10329, dtype="int8") /* ty=Tensor[(13, 14, 3), int8] */;
    logical_xor(%690, %691) /* ty=Tensor[(13, 14, 3), int8] */
  };
  %692(%var_10336, %var_10337) /* ty=Tensor[(13, 14, 3), int8] */
}

def @func_1844() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) {
  %696 = fn () -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) {
    %693 = @func_769() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) */;
    %694 = %693.1;
    %695 = @func_1042() /* ty=Tensor[(12, 10, 5), bool] */;
    (%694, %695)
  };
  %696() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */
}

def @func_12206() -> Tensor[(12, 10, 5), float32] {
  %698 = fn () -> Tensor[(12, 10, 5), float32] {
    %697 = @func_908() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %697.0
  };
  %698() /* ty=Tensor[(12, 10, 5), float32] */
}

def @func_5563() -> Tensor[(12, 10, 5), float32] {
  %699 = @func_823() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %699.0
}

def @func_11744() -> (Tensor[(12, 10, 5), float64],) {
  %700 = @func_8123() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %701 = %700.0;
  (%701,)
}

def @func_13330() -> (Tensor[(12, 10, 5), float32],) {
  %702 = @func_9201() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */;
  %703 = %702.1;
  (%703,)
}

def @func_2884() -> (Tensor[(12, 10, 5), float64],) {
  @func_2882() /* ty=(Tensor[(12, 10, 5), float64],) */
}

def @func_4085() -> (Tensor[(12, 10, 5), bool],) {
  %704 = @func_1407() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %705 = %704.0;
  (%705,)
}

def @func_6081(%var_6080: Tensor[(16, 10, 9), float64]) -> (Tensor[(16, 10, 9), float64], Tensor[(5, 8, 10), uint16], Tensor[(2112), float32]) {
  %712 = fn (%var_6055: Tensor[(16, 10, 9), float64]) -> (Tensor[(16, 10, 9), float64], Tensor[(5, 8, 10), uint16], Tensor[(2112), float32]) {
    %706 = cast(%var_6055, dtype="float64") /* ty=Tensor[(16, 10, 9), float64] */;
    %707 = cast(meta[relay.Constant][23] /* ty=Tensor[(2112), float32] */, dtype="float32") /* ty=Tensor[(2112), float32] */;
    %708 = reshape(%707, newshape=[2112]) /* ty=Tensor[(2112), float32] */;
    %709 = @func_3630(%708) /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), uint16], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(2112), bool], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), int8]) */;
    %710 = acosh(%706) /* ty=Tensor[(16, 10, 9), float64] */;
    %711 = %709.2;
    (%710, %711, meta[relay.Constant][23] /* ty=Tensor[(2112), float32] */)
  };
  %712(%var_6080) /* ty=(Tensor[(16, 10, 9), float64], Tensor[(5, 8, 10), uint16], Tensor[(2112), float32]) */
}

def @func_15649() -> (Tensor[(12, 10, 5), float32], Tensor[(1, 432), float64], Tensor[(165), bool]) {
  @func_15647() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(1, 432), float64], Tensor[(165), bool]) */
}

def @func_7937() -> Tensor[(12, 10, 5), float64] {
  %713 = @func_3340() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64]) */;
  %713.1
}

def @main(%var_17027: Tensor[(14, 12, 5), float32]) -> Tensor[(14, 12, 5), int64] {
  %714 = @func_12309() /* ty=(Tensor[(14, 1, 5), float32],) */;
  %715 = %714.0;
  %716 = cast(%715, dtype="int64") /* ty=Tensor[(14, 1, 5), int64] */;
  %717 = cast(%var_17027, dtype="int64") /* ty=Tensor[(14, 12, 5), int64] */;
  bitwise_and(%716, %717) /* ty=Tensor[(14, 12, 5), int64] */
}

def @func_9852() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) {
  %722 = fn () -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) {
    %718 = @func_7019() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), bool], Tensor[(12, 10, 5), float32]) */;
    %719 = @func_7019() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), bool], Tensor[(12, 10, 5), float32]) */;
    %720 = %718.1;
    %721 = %719.0;
    (%720, %721)
  };
  %722() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) */
}

def @func_15950(%var_15898: bool, %var_15919: Tensor[(1320), uint32]) -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(7, 13, 14), bool], bool, Tensor[(5, 8, 10), int8], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 11), uint32], Tensor[(1320), uint32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) {
  %723 = @func_8090() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(14, 1, 5), float32]) */;
  %724 = @func_7517() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(5, 8, 10), int8], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), bool]) */;
  %725 = cast(%var_15898, dtype="bool") /* ty=bool */;
  %726 = reshape(%725, newshape=[]) /* ty=bool */;
  %727 = @func_3261(%726) /* ty=(Tensor[(7, 13, 14), bool],) */;
  %728 = @func_7517() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(5, 8, 10), int8], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), bool]) */;
  %729 = @func_2839() /* ty=(Tensor[(5, 8, 10), int8],) */;
  %730 = cast(%var_15919, dtype="uint32") /* ty=Tensor[(1320), uint32] */;
  %731 = reshape(%730, newshape=[12, 10, 11]) /* ty=Tensor[(12, 10, 11), uint32] */;
  %732 = @func_10910(%731) /* ty=(Tensor[(12, 10, 11), uint32],) */;
  %733 = @func_7125() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(432), float64]) */;
  %734 = @func_11082() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %735 = %723.1;
  %736 = %724.1;
  %737 = %727.0;
  %738 = %728.3;
  %739 = %729.0;
  %740 = @func_11072() /* ty=Tensor[(12, 10, 5), float64] */;
  %741 = %732.0;
  %742 = %733.0;
  %743 = @func_13067() /* ty=Tensor[(12, 10, 5), float32] */;
  %744 = %734.0;
  (%735, %736, %737, %var_15898, %738, %739, %740, %741, %var_15919, %742, %743, %744)
}

def @func_12538() -> (Tensor[(12, 10, 5), float32],) {
  %745 = @func_614() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %746 = %745.0;
  (%746,)
}

def @func_16899() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) {
  @func_16897() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */
}

def @func_15818() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) {
  %751 = fn () -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) {
    %747 = @func_1678() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %748 = @func_10103() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %749 = %747.0;
    %750 = %748.0;
    (%749, %750)
  };
  %751() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */
}

def @func_8125() -> (Tensor[(12, 10, 5), float64],) {
  @func_8123() /* ty=(Tensor[(12, 10, 5), float64],) */
}

def @func_12107(%var_12105: Tensor[(5, 5, 14), float32], %var_12106: Tensor[(5, 5, 14), float32]) -> Tensor[(5, 5, 14), float32] {
  @func_12103(%var_12105, %var_12106) /* ty=Tensor[(5, 5, 14), float32] */
}

def @func_12482(%var_12480: Tensor[(260), float32]) -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(13, 2, 10), bool], Tensor[(260), float32]) {
  @func_12479(%var_12480) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(13, 2, 10), bool], Tensor[(260), float32]) */
}

def @func_9902() -> (Tensor[(12, 10, 5), float32],) {
  %752 = @func_4007() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %753 = %752.0;
  (%753,)
}

def @func_5718() -> (Tensor[(12, 10, 5), bool],) {
  @func_5716() /* ty=(Tensor[(12, 10, 5), bool],) */
}

def @func_13862() -> Tensor[(12, 10, 5), float64] {
  @func_13860() /* ty=Tensor[(12, 10, 5), float64] */
}

def @func_4219() -> Tensor[(12, 10, 5), float64] {
  @func_3503() /* ty=Tensor[(12, 10, 5), float64] */
}

def @func_11549() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) {
  %757 = fn () -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) {
    %754 = @func_3128() /* ty=(Tensor[(12, 10, 5), float64],) */;
    %755 = %754.0;
    %756 = @func_1416() /* ty=Tensor[(12, 10, 5), float32] */;
    (%755, %756)
  };
  %757() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */
}

def @func_16426(%var_16424: uint8, %var_16425: Tensor[(6, 14, 7), uint8]) -> Tensor[(6, 14, 7), uint8] {
  %760 = fn (%var_16417: uint8, %var_16418: Tensor[(6, 14, 7), uint8]) -> Tensor[(6, 14, 7), uint8] {
    %758 = cast(%var_16417, dtype="uint8") /* ty=uint8 */;
    %759 = cast(%var_16418, dtype="uint8") /* ty=Tensor[(6, 14, 7), uint8] */;
    minimum(%758, %759) /* ty=Tensor[(6, 14, 7), uint8] */
  };
  %760(%var_16424, %var_16425) /* ty=Tensor[(6, 14, 7), uint8] */
}

def @func_4530() -> Tensor[(432), float64] {
  @func_4528() /* ty=Tensor[(432), float64] */
}

def @func_14672() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool]) {
  @func_14670() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool]) */
}

def @func_3032() -> (Tensor[(12, 10, 5), float64],) {
  %762 = fn () -> (Tensor[(12, 10, 5), float64],) {
    %761 = @func_2129() /* ty=Tensor[(12, 10, 5), float64] */;
    (%761,)
  };
  %762() /* ty=(Tensor[(12, 10, 5), float64],) */
}

def @func_15851() -> (Tensor[(12, 10, 5), float64],) {
  %765 = fn () -> (Tensor[(12, 10, 5), float64],) {
    %763 = @func_3128() /* ty=(Tensor[(12, 10, 5), float64],) */;
    %764 = %763.0;
    (%764,)
  };
  %765() /* ty=(Tensor[(12, 10, 5), float64],) */
}

def @func_3342() -> (Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64]) {
  @func_3340() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64]) */
}

def @func_3130() -> (Tensor[(12, 10, 5), float64],) {
  @func_3128() /* ty=(Tensor[(12, 10, 5), float64],) */
}

def @func_9243() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) {
  %766 = @func_9201() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */;
  %767 = @func_1323() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %768 = %766.0;
  %769 = %767.0;
  (%768, %769)
}

def @func_12248(%var_12246: Tensor[(12, 16, 11), int16], %var_12247: Tensor[(12, 16, 11), int16]) -> (Tensor[(12, 16, 11), int16],) {
  @func_12244(%var_12246, %var_12247) /* ty=(Tensor[(12, 16, 11), int16],) */
}

def @func_15379() -> (Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32]) {
  %770 = @func_5418() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64]) */;
  %771 = @func_2019() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool]) */;
  %772 = @func_8090() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(14, 1, 5), float32]) */;
  %773 = %770.1;
  %774 = %771.1;
  %775 = %772.2;
  (%773, %774, %775)
}

def @func_1175() -> (Tensor[(12, 10, 5), bool], Tensor[(10, 10, 5), float32], Tensor[(14, 1, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(500), int32]) {
  %793 = fn () -> (Tensor[(12, 10, 5), bool], Tensor[(10, 10, 5), float32], Tensor[(14, 1, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(500), int32]) {
    %776 = cast(meta[relay.Constant][24] /* ty=Tensor[(500), float32] */, dtype="float32") /* ty=Tensor[(500), float32] */;
    %777 = reshape(%776, newshape=[10, 10, 5]) /* ty=Tensor[(10, 10, 5), float32] */;
    %778 = cast(meta[relay.Constant][25] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
    %779 = reshape(%778, newshape=[432]) /* ty=Tensor[(432), float64] */;
    %780 = @func_941(%779) /* ty=(Tensor[(14, 1, 5), float64], Tensor[(500), float32], Tensor[(432), float64], Tensor[(14, 1, 5), float32]) */;
    %781 = @func_614() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %782 = cast(meta[relay.Constant][24] /* ty=Tensor[(500), float32] */, dtype="float64") /* ty=Tensor[(500), float64] */;
    %783 = log2(%782) /* ty=Tensor[(500), float64] */;
    %784 = cast(meta[relay.Constant][24] /* ty=Tensor[(500), float32] */, dtype="int32") /* ty=Tensor[(500), int32] */;
    %785 = shape_of(%783, dtype="int32") /* ty=Tensor[(1), int32] */;
    %786 = cast(%783, dtype="int32") /* ty=Tensor[(500), int32] */;
    %787 = dyn.reshape(%784, %785, newshape=[]) /* ty=Tensor[(?), int32] */;
    %788 = @func_1042() /* ty=Tensor[(12, 10, 5), bool] */;
    %789 = @func_268(%777) /* ty=Tensor[(10, 10, 5), float32] */;
    %790 = %780.3;
    %791 = %781.0;
    %792 = left_shift(%786, %787) /* ty=Tensor[(500), int32] */;
    (%788, %789, %790, meta[relay.Constant][25] /* ty=Tensor[(432), float64] */, %791, %792)
  };
  %793() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(10, 10, 5), float32], Tensor[(14, 1, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(500), int32]) */
}

def @func_15381() -> (Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32]) {
  @func_15379() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32]) */
}

def @func_14329() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32]) {
  %802 = fn () -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32]) {
    %794 = @func_7285() /* ty=(Tensor[(432), float64], Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), int8]) */;
    %795 = @func_823() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
    %796 = @func_8710() /* ty=(Tensor[(12, 10, 5), bool],) */;
    %797 = @func_8499() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %798 = %794.1;
    %799 = %795.0;
    %800 = %796.0;
    %801 = %797.0;
    (%798, %799, %800, %801)
  };
  %802() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32]) */
}

def @func_7148() -> (Tensor[(12, 10, 5), float32],) {
  %805 = fn () -> (Tensor[(12, 10, 5), float32],) {
    %803 = @func_5841() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %804 = %803.0;
    (%804,)
  };
  %805() /* ty=(Tensor[(12, 10, 5), float32],) */
}

def @func_16881() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) {
  %810 = fn () -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) {
    %806 = @func_9280() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */;
    %807 = @func_7147() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %808 = %806.1;
    %809 = %807.0;
    (%808, %809)
  };
  %810() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */
}

def @func_16971() -> (Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float64]) {
  %811 = @func_2192() /* ty=(Tensor[(5, 8, 10), int8],) */;
  %812 = @func_991() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %813 = %811.0;
  %814 = %812.0;
  (%813, %814)
}

def @func_1244() -> (Tensor[(12, 10, 5), float64],) {
  %817 = fn () -> (Tensor[(12, 10, 5), float64],) {
    %815 = @func_991() /* ty=(Tensor[(12, 10, 5), float64],) */;
    %816 = %815.0;
    (%816,)
  };
  %817() /* ty=(Tensor[(12, 10, 5), float64],) */
}

def @func_4150() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32]) {
  %826 = fn () -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32]) {
    %818 = @func_2740() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) */;
    %819 = @func_1407() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
    %820 = @func_4085() /* ty=(Tensor[(12, 10, 5), bool],) */;
    %821 = @func_1407() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
    %822 = %818.0;
    %823 = %819.2;
    %824 = %820.0;
    %825 = %821.2;
    (%822, %823, %824, %825)
  };
  %826() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32]) */
}

def @func_7624(%var_7595: Tensor[(7, 2, 10), uint8], %var_7596: Tensor[(7, 2, 10), uint8]) -> (Tensor[(7, 2, 10), uint8], Tensor[(432), float64], Tensor[(12, 10, 5), float32]) {
  %827 = cast(%var_7596, dtype="uint8") /* ty=Tensor[(7, 2, 10), uint8] */;
  %828 = shape_of(%var_7595, dtype="int32") /* ty=Tensor[(3), int32] */;
  %829 = cast(%var_7595, dtype="uint8") /* ty=Tensor[(7, 2, 10), uint8] */;
  %830 = dyn.reshape(%827, %828, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %831 = maximum(%829, %830) /* ty=Tensor[(7, 2, 10), uint8] */;
  %832 = @func_3220() /* ty=Tensor[(432), float64] */;
  %833 = @func_6342() /* ty=Tensor[(12, 10, 5), float32] */;
  (%831, %832, %833)
}

def @func_2362(%var_2332: Tensor[(13, 2, 10), float32]) -> (Tensor[(13, 2, 10), bool],) {
  %834 = cast(%var_2332, dtype="float32") /* ty=Tensor[(13, 2, 10), float32] */;
  %835 = atanh(%834) /* ty=Tensor[(13, 2, 10), float32] */;
  %836 = cast(%var_2332, dtype="uint32") /* ty=Tensor[(13, 2, 10), uint32] */;
  %837 = shape_of(%835, dtype="int32") /* ty=Tensor[(3), int32] */;
  %838 = cast(%835, dtype="uint32") /* ty=Tensor[(13, 2, 10), uint32] */;
  %839 = dyn.reshape(%836, %837, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %840 = logical_xor(%838, %839) /* ty=Tensor[(13, 2, 10), uint32] */;
  %841 = cast(%var_2332, dtype="bool") /* ty=Tensor[(13, 2, 10), bool] */;
  %842 = shape_of(%840, dtype="int32") /* ty=Tensor[(3), int32] */;
  %843 = cast(%840, dtype="bool") /* ty=Tensor[(13, 2, 10), bool] */;
  %844 = dyn.reshape(%841, %842, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %845 = equal(%843, %844) /* ty=Tensor[(13, 2, 10), bool] */;
  (%845,)
}

def @func_13672() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) {
  %846 = @func_9454() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */;
  %847 = @func_7976() /* ty=Tensor[(12, 10, 5), float64] */;
  %848 = %846.1;
  (%847, %848)
}

def @func_16766() -> Tensor[(12, 10, 5), float32] {
  %850 = fn () -> Tensor[(12, 10, 5), float32] {
    %849 = @func_12129() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %849.0
  };
  %850() /* ty=Tensor[(12, 10, 5), float32] */
}

def @func_11074() -> Tensor[(12, 10, 5), float64] {
  @func_11072() /* ty=Tensor[(12, 10, 5), float64] */
}

def @func_6011(%var_6010: Tensor[(6, 14, 15), int64]) -> Tensor[(6, 14, 15), int16] {
  %858 = fn (%var_5997: Tensor[(6, 14, 15), int64]) -> Tensor[(6, 14, 15), int16] {
    %851 = cast(7 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %852 = cast(%var_5997, dtype="int64") /* ty=Tensor[(6, 14, 15), int64] */;
    %853 = add(%851, %852) /* ty=Tensor[(6, 14, 15), int64] */;
    %854 = cast(%var_5997, dtype="int16") /* ty=Tensor[(6, 14, 15), int16] */;
    %855 = shape_of(%853, dtype="int32") /* ty=Tensor[(3), int32] */;
    %856 = cast(%853, dtype="int16") /* ty=Tensor[(6, 14, 15), int16] */;
    %857 = dyn.reshape(%854, %855, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    subtract(%856, %857) /* ty=Tensor[(6, 14, 15), int16] */
  };
  %858(%var_6010) /* ty=Tensor[(6, 14, 15), int16] */
}

def @func_15753(%var_15744: int32, %var_15745: Tensor[(9, 11, 3), int32]) -> (Tensor[(9, 11, 3), int32], Tensor[(12, 10, 5), float64]) {
  %859 = cast(%var_15744, dtype="int32") /* ty=int32 */;
  %860 = cast(%var_15745, dtype="int32") /* ty=Tensor[(9, 11, 3), int32] */;
  %861 = logical_xor(%859, %860) /* ty=Tensor[(9, 11, 3), int32] */;
  %862 = @func_4219() /* ty=Tensor[(12, 10, 5), float64] */;
  (%861, %862)
}

def @func_2977(%var_2975: Tensor[(2, 14, 1), float32]) -> (Tensor[(2, 14, 1), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) {
  @func_2974(%var_2975) /* ty=(Tensor[(2, 14, 1), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) */
}

def @func_6588() -> (Tensor[(12, 10, 5), bool],) {
  %865 = fn () -> (Tensor[(12, 10, 5), bool],) {
    %863 = @func_1843() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */;
    %864 = %863.1;
    (%864,)
  };
  %865() /* ty=(Tensor[(12, 10, 5), bool],) */
}

def @func_7978() -> Tensor[(12, 10, 5), float64] {
  @func_7976() /* ty=Tensor[(12, 10, 5), float64] */
}

def @func_2974(%var_2944: Tensor[(2, 14, 1), float32]) -> (Tensor[(2, 14, 1), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) {
  %866 = cast(%var_2944, dtype="float32") /* ty=Tensor[(2, 14, 1), float32] */;
  %867 = @func_1323() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %868 = asinh(%866) /* ty=Tensor[(2, 14, 1), float32] */;
  %869 = %867.0;
  %870 = @func_2155() /* ty=Tensor[(12, 10, 5), float64] */;
  (%868, %869, %870)
}

def @func_1619() -> Tensor[(12, 10, 5), bool] {
  %881 = fn () -> Tensor[(12, 10, 5), bool] {
    %871 = @func_908() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %872 = %871.0;
    %873 = @func_1407() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
    %874 = %873.2;
    %875 = cast(%874, dtype="float64") /* ty=Tensor[(12, 10, 5), float64] */;
    %876 = acos(%875) /* ty=Tensor[(12, 10, 5), float64] */;
    %877 = cast(%876, dtype="bool") /* ty=Tensor[(12, 10, 5), bool] */;
    %878 = shape_of(%872, dtype="int32") /* ty=Tensor[(3), int32] */;
    %879 = cast(%872, dtype="bool") /* ty=Tensor[(12, 10, 5), bool] */;
    %880 = dyn.reshape(%877, %878, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%879, %880) /* ty=Tensor[(12, 10, 5), bool] */
  };
  %881() /* ty=Tensor[(12, 10, 5), bool] */
}

def @func_11883() -> Tensor[(12, 10, 5), bool] {
  @func_11881() /* ty=Tensor[(12, 10, 5), bool] */
}

def @func_4303() -> (Tensor[(5, 8, 10), float32], Tensor[(12, 10, 5), float64]) {
  @func_4301() /* ty=(Tensor[(5, 8, 10), float32], Tensor[(12, 10, 5), float64]) */
}

def @func_4325(%var_4323: Tensor[(11, 5, 3), float32]) -> Tensor[(11, 5, 3), float32] {
  @func_4322(%var_4323) /* ty=Tensor[(11, 5, 3), float32] */
}

def @func_10826(%var_10825: Tensor[(165, 1), float32]) -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(165, 1), float32]) {
  %895 = fn (%var_10807: Tensor[(165, 1), float32]) -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(165, 1), float32]) {
    %882 = @func_6832() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(10, 10, 5), float32], Tensor[(500), float32]) */;
    %883 = @func_4044() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %884 = @func_9902() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %885 = @func_5068() /* ty=(Tensor[(432), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */;
    %886 = cast(%var_10807, dtype="float32") /* ty=Tensor[(165, 1), float32] */;
    %887 = reshape(%886, newshape=[165]) /* ty=Tensor[(165), float32] */;
    %888 = @func_7167(%887) /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(165), float32]) */;
    %889 = %882.0;
    %890 = %883.0;
    %891 = @func_9860() /* ty=Tensor[(5, 8, 10), int8] */;
    %892 = %884.0;
    %893 = %885.0;
    %894 = %888.1;
    (%889, %890, %891, %892, %893, %894, %var_10807)
  };
  %895(%var_10825) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(165, 1), float32]) */
}

def @func_5509(%var_5507: Tensor[(165), float32]) -> (Tensor[(12, 10, 5), float32], Tensor[(11, 5, 3), float32], Tensor[(165), float64]) {
  @func_5506(%var_5507) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(11, 5, 3), float32], Tensor[(165), float64]) */
}

def @func_7535() -> (Tensor[(12, 10, 5), bool],) {
  %898 = fn () -> (Tensor[(12, 10, 5), bool],) {
    %896 = @func_5418() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64]) */;
    %897 = %896.0;
    (%897,)
  };
  %898() /* ty=(Tensor[(12, 10, 5), bool],) */
}

def @func_13472() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) {
  %899 = @func_1323() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %900 = %899.0;
  %901 = @func_6670() /* ty=Tensor[(12, 10, 5), float32] */;
  (%900, %901)
}

def @func_5673(%var_5656: Tensor[(165), bool]) -> (Tensor[(5, 8, 10), int8], Tensor[(216, 2), float64], Tensor[(165), bool], Tensor[(2112), float32], Tensor[(825), bool], Tensor[(1, 432), float64]) {
  %902 = cast(%var_5656, dtype="bool") /* ty=Tensor[(165), bool] */;
  %903 = cast(meta[relay.Constant][26] /* ty=Tensor[(2112), float32] */, dtype="float32") /* ty=Tensor[(2112), float32] */;
  %904 = cast(meta[relay.Constant][27] /* ty=Tensor[(825), bool] */, dtype="bool") /* ty=Tensor[(825), bool] */;
  %905 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 432), float64] */, dtype="float64") /* ty=Tensor[(1, 432), float64] */;
  %906 = reshape(%902, newshape=[15, 1, 11]) /* ty=Tensor[(15, 1, 11), bool] */;
  %907 = reshape(%903, newshape=[1056, 2]) /* ty=Tensor[(1056, 2), float32] */;
  %908 = reshape(%904, newshape=[15, 5, 11]) /* ty=Tensor[(15, 5, 11), bool] */;
  %909 = reshape(%905, newshape=[216, 2]) /* ty=Tensor[(216, 2), float64] */;
  %910 = @func_4956(%906, %907, %908, %909) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(1056, 2), float32], Tensor[(15, 5, 11), float64], Tensor[(12, 10, 5), float32], Tensor[(216, 2), float64], Tensor[(12, 10, 5), float32]) */;
  %911 = @func_4498() /* ty=Tensor[(5, 8, 10), int8] */;
  %912 = %910.4;
  (%911, %912, %var_5656, meta[relay.Constant][26] /* ty=Tensor[(2112), float32] */, meta[relay.Constant][27] /* ty=Tensor[(825), bool] */, meta[relay.Constant][28] /* ty=Tensor[(1, 432), float64] */)
}

def @func_4044() -> (Tensor[(12, 10, 5), float32],) {
  %913 = @func_2398() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */;
  %914 = %913.1;
  %915 = cast(%914, dtype="float32") /* ty=Tensor[(12, 10, 5), float32] */;
  %916 = asin(%915) /* ty=Tensor[(12, 10, 5), float32] */;
  (%916,)
}

def @func_14081() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) {
  %917 = @func_10080() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %918 = @func_10103() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %919 = %917.0;
  %920 = %918.0;
  (%919, %920)
}

def @func_14427() -> (Tensor[(12, 10, 5), float64],) {
  %921 = @func_7656() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %922 = %921.0;
  (%922,)
}

def @func_16486() -> (Tensor[(12, 10, 5), float64],) {
  %924 = fn () -> (Tensor[(12, 10, 5), float64],) {
    %923 = @func_4219() /* ty=Tensor[(12, 10, 5), float64] */;
    (%923,)
  };
  %924() /* ty=(Tensor[(12, 10, 5), float64],) */
}

def @func_1323() -> (Tensor[(12, 10, 5), float32],) {
  %925 = @func_823() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %926 = %925.1;
  (%926,)
}

def @func_16109() -> (Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), uint16]) {
  %927 = @func_614() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %928 = %927.0;
  %929 = @func_6204() /* ty=Tensor[(5, 8, 10), uint16] */;
  (%928, %929)
}

def @func_10132() -> (Tensor[(432), float64], Tensor[(12, 10, 5), float32]) {
  %930 = @func_5068() /* ty=(Tensor[(432), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */;
  %931 = @func_9280() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */;
  %932 = %930.0;
  %933 = %931.0;
  (%932, %933)
}

def @func_3710(%var_3661: Tensor[(432), float64]) -> (Tensor[(432), uint8], Tensor[(12, 10, 5), float64]) {
  %934 = @func_3220() /* ty=Tensor[(432), float64] */;
  %935 = cast(%var_3661, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %936 = shape_of(%934, dtype="int32") /* ty=Tensor[(1), int32] */;
  %937 = cast(%934, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %938 = dyn.reshape(%935, %936, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %939 = logical_xor(%937, %938) /* ty=Tensor[(432), uint8] */;
  %940 = @func_3089() /* ty=Tensor[(12, 10, 5), float64] */;
  (%939, %940)
}

def @func_7939() -> Tensor[(12, 10, 5), float64] {
  @func_7937() /* ty=Tensor[(12, 10, 5), float64] */
}

def @func_10475() -> (Tensor[(12, 10, 5), float64],) {
  @func_10473() /* ty=(Tensor[(12, 10, 5), float64],) */
}

def @func_15464() -> (Tensor[(13, 11, 4), int64],) {
  %948 = fn () -> (Tensor[(13, 11, 4), int64],) {
    %941 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 11, 4), float64] */, dtype="float64") /* ty=Tensor[(13, 11, 4), float64] */;
    %942 = sin(%941) /* ty=Tensor[(13, 11, 4), float64] */;
    %943 = cast(meta[relay.Constant][30] /* ty=Tensor[(13, 11, 4), float64] */, dtype="int64") /* ty=Tensor[(13, 11, 4), int64] */;
    %944 = shape_of(%942, dtype="int32") /* ty=Tensor[(3), int32] */;
    %945 = cast(%942, dtype="int64") /* ty=Tensor[(13, 11, 4), int64] */;
    %946 = dyn.reshape(%943, %944, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %947 = minimum(%945, %946) /* ty=Tensor[(13, 11, 4), int64] */;
    (%947,)
  };
  %948() /* ty=(Tensor[(13, 11, 4), int64],) */
}

def @func_12333() -> (Tensor[(5, 8, 10), int8],) {
  %949 = @func_4498() /* ty=Tensor[(5, 8, 10), int8] */;
  (%949,)
}

def @func_4009() -> (Tensor[(12, 10, 5), float32],) {
  @func_4007() /* ty=(Tensor[(12, 10, 5), float32],) */
}

def @func_9203() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) {
  @func_9201() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */
}

def @func_13027() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) {
  @func_13025() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) */
}

def @func_11317() -> (Tensor[(12, 10, 5), float32],) {
  %950 = @func_3527() /* ty=Tensor[(12, 10, 5), float32] */;
  (%950,)
}

def @func_11388(%var_11386: uint16, %var_11387: Tensor[(15, 5, 1), uint16]) -> Tensor[(15, 5, 1), float32] {
  %956 = fn (%var_11366: uint16, %var_11367: Tensor[(15, 5, 1), uint16]) -> Tensor[(15, 5, 1), float32] {
    %951 = cast(%var_11366, dtype="bool") /* ty=bool */;
    %952 = cast(%var_11367, dtype="bool") /* ty=Tensor[(15, 5, 1), bool] */;
    %953 = greater_equal(%951, %952) /* ty=Tensor[(15, 5, 1), bool] */;
    %954 = cast(%var_11366, dtype="float32") /* ty=float32 */;
    %955 = cast(%953, dtype="float32") /* ty=Tensor[(15, 5, 1), float32] */;
    divide(%954, %955) /* ty=Tensor[(15, 5, 1), float32] */
  };
  %956(%var_11386, %var_11387) /* ty=Tensor[(15, 5, 1), float32] */
}

def @func_13706() -> Tensor[(12, 10, 5), bool] {
  %958 = fn () -> Tensor[(12, 10, 5), bool] {
    %957 = @func_1174() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(10, 10, 5), float32], Tensor[(14, 1, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(500), int32]) */;
    %957.0
  };
  %958() /* ty=Tensor[(12, 10, 5), bool] */
}

def @func_16618() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], int32, Tensor[(297), int32]) {
  %972 = fn () -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], int32, Tensor[(297), int32]) {
    %959 = @func_14081() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */;
    %960 = @func_991() /* ty=(Tensor[(12, 10, 5), float64],) */;
    %961 = @func_5099() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */;
    %962 = cast(-8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %963 = cast(meta[relay.Constant][31] /* ty=Tensor[(297), int32] */, dtype="int32") /* ty=Tensor[(297), int32] */;
    %964 = reshape(%962, newshape=[]) /* ty=int32 */;
    %965 = reshape(%963, newshape=[9, 11, 3]) /* ty=Tensor[(9, 11, 3), int32] */;
    %966 = @func_15753(%964, %965) /* ty=(Tensor[(9, 11, 3), int32], Tensor[(12, 10, 5), float64]) */;
    %967 = %959.0;
    %968 = %960.0;
    %969 = @func_3827() /* ty=Tensor[(5, 8, 10), int8] */;
    %970 = %961.0;
    %971 = %966.1;
    (%967, %968, %969, %970, %971, -8 /* ty=int32 */, meta[relay.Constant][31] /* ty=Tensor[(297), int32] */)
  };
  %972() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], int32, Tensor[(297), int32]) */
}

def @func_9281() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) {
  %978 = fn () -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) {
    %973 = @func_5327() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(432), float64]) */;
    %974 = @func_2688() /* ty=(Tensor[(16, 2, 9), bool], Tensor[(12, 10, 5), bool], Tensor[(14, 1, 5), float64], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool]) */;
    %975 = @func_6670() /* ty=Tensor[(12, 10, 5), float32] */;
    %976 = %973.0;
    %977 = %974.6;
    (%975, %976, %977)
  };
  %978() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */
}

def @func_13069() -> Tensor[(12, 10, 5), float32] {
  @func_13067() /* ty=Tensor[(12, 10, 5), float32] */
}

def @func_13397(%var_13395: Tensor[(245, 2), float32]) -> (Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(720), int8], Tensor[(12, 10, 5), float32], Tensor[(245, 2), float32]) {
  @func_13394(%var_13395) /* ty=(Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(720), int8], Tensor[(12, 10, 5), float32], Tensor[(245, 2), float32]) */
}

def @func_11690() -> Tensor[(12, 10, 5), float64] {
  %979 = @func_1523() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %979.0
}

def @func_12808() -> (Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(165), float32], Tensor[(165), float32], Tensor[(14, 1, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) {
  %997 = fn () -> (Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(165), float32], Tensor[(165), float32], Tensor[(14, 1, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) {
    %980 = @func_10103() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %981 = @func_11744() /* ty=(Tensor[(12, 10, 5), float64],) */;
    %982 = @func_3128() /* ty=(Tensor[(12, 10, 5), float64],) */;
    %983 = cast(meta[relay.Constant][32] /* ty=Tensor[(165), float32] */, dtype="float32") /* ty=Tensor[(165), float32] */;
    %984 = reshape(%983, newshape=[165]) /* ty=Tensor[(165), float32] */;
    %985 = @func_6179(%984) /* ty=(Tensor[(432), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(11, 5, 3), float32], Tensor[(165), float32], Tensor[(12, 10, 5), float32]) */;
    %986 = @func_12307() /* ty=(Tensor[(14, 1, 5), float32],) */;
    %987 = @func_1703() /* ty=(Tensor[(14, 1, 5), float32], Tensor[(12, 10, 5), float32]) */;
    %988 = @func_1042() /* ty=Tensor[(12, 10, 5), bool] */;
    %989 = %980.0;
    %990 = %981.0;
    %991 = %982.0;
    %992 = @func_12205() /* ty=Tensor[(12, 10, 5), float32] */;
    %993 = %985.4;
    %994 = %986.0;
    %995 = %987.1;
    %996 = @func_7976() /* ty=Tensor[(12, 10, 5), float64] */;
    (%988, %989, %990, %991, %992, %993, meta[relay.Constant][32] /* ty=Tensor[(165), float32] */, %994, %995, %996)
  };
  %997() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(165), float32], Tensor[(165), float32], Tensor[(14, 1, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) */
}

def @func_10066(%var_10064: Tensor[(1755), float64]) -> (Tensor[(12, 10, 5), float32], Tensor[(13, 9, 15), float64], Tensor[(1755), float64]) {
  @func_10063(%var_10064) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(13, 9, 15), float64], Tensor[(1755), float64]) */
}

def @func_7286() -> (Tensor[(432), float64], Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), int8]) {
  %1003 = fn () -> (Tensor[(432), float64], Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), int8]) {
    %998 = @func_5327() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(432), float64]) */;
    %999 = @func_1843() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */;
    %1000 = %998.3;
    %1001 = %999.0;
    %1002 = @func_3827() /* ty=Tensor[(5, 8, 10), int8] */;
    (%1000, %1001, %1002)
  };
  %1003() /* ty=(Tensor[(432), float64], Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), int8]) */
}

def @func_11083() -> (Tensor[(12, 10, 5), float64],) {
  %1005 = fn () -> (Tensor[(12, 10, 5), float64],) {
    %1004 = @func_3089() /* ty=Tensor[(12, 10, 5), float64] */;
    (%1004,)
  };
  %1005() /* ty=(Tensor[(12, 10, 5), float64],) */
}

def @func_13210(%var_13203: Tensor[(10, 14, 11), int8], %var_13204: Tensor[(10, 14, 11), int8]) -> Tensor[(10, 14, 11), int8] {
  %1006 = cast(%var_13204, dtype="int8") /* ty=Tensor[(10, 14, 11), int8] */;
  %1007 = shape_of(%var_13203, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1008 = cast(%var_13203, dtype="int8") /* ty=Tensor[(10, 14, 11), int8] */;
  %1009 = dyn.reshape(%1006, %1007, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_or(%1008, %1009) /* ty=Tensor[(10, 14, 11), int8] */
}

def @func_15954(%var_15952: bool, %var_15953: Tensor[(1320), uint32]) -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(7, 13, 14), bool], bool, Tensor[(5, 8, 10), int8], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 11), uint32], Tensor[(1320), uint32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) {
  @func_15950(%var_15952, %var_15953) /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(7, 13, 14), bool], bool, Tensor[(5, 8, 10), int8], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 11), uint32], Tensor[(1320), uint32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) */
}

def @func_15184(%var_15183: Tensor[(10, 11, 16), float64]) -> (Tensor[(10, 11, 16), uint64], Tensor[(10, 11, 16), float32]) {
  %1019 = fn (%var_15154: Tensor[(10, 11, 16), float64]) -> (Tensor[(10, 11, 16), uint64], Tensor[(10, 11, 16), float32]) {
    %1010 = cast(meta[relay.Constant][33] /* ty=Tensor[(10, 11, 16), float64] */, dtype="uint64") /* ty=Tensor[(10, 11, 16), uint64] */;
    %1011 = shape_of(%var_15154, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1012 = cast(%var_15154, dtype="uint64") /* ty=Tensor[(10, 11, 16), uint64] */;
    %1013 = dyn.reshape(%1010, %1011, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %1014 = cast(%var_15154, dtype="float64") /* ty=Tensor[(10, 11, 16), float64] */;
    %1015 = sigmoid(%1014) /* ty=Tensor[(10, 11, 16), float64] */;
    %1016 = cast(%1015, dtype="float32") /* ty=Tensor[(10, 11, 16), float32] */;
    %1017 = logical_xor(%1012, %1013) /* ty=Tensor[(10, 11, 16), uint64] */;
    %1018 = log2(%1016) /* ty=Tensor[(10, 11, 16), float32] */;
    (%1017, %1018)
  };
  %1019(%var_15183) /* ty=(Tensor[(10, 11, 16), uint64], Tensor[(10, 11, 16), float32]) */
}

def @func_4301() -> (Tensor[(5, 8, 10), float32], Tensor[(12, 10, 5), float64]) {
  %1020 = @func_2192() /* ty=(Tensor[(5, 8, 10), int8],) */;
  %1021 = %1020.0;
  %1022 = cast(%1021, dtype="float32") /* ty=Tensor[(5, 8, 10), float32] */;
  %1023 = @func_991() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %1024 = asin(%1022) /* ty=Tensor[(5, 8, 10), float32] */;
  %1025 = %1023.0;
  (%1024, %1025)
}

def @func_3842() -> Tensor[(12, 10, 5), bool] {
  %1027 = fn () -> Tensor[(12, 10, 5), bool] {
    %1026 = @func_2019() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool]) */;
    %1026.0
  };
  %1027() /* ty=Tensor[(12, 10, 5), bool] */
}

def @func_15005(%var_15004: Tensor[(5, 8, 10), int8]) -> Tensor[(5, 8, 10), bool] {
  %1034 = fn (%var_14995: Tensor[(5, 8, 10), int8]) -> Tensor[(5, 8, 10), bool] {
    %1028 = @func_6863() /* ty=(Tensor[(5, 8, 10), int8],) */;
    %1029 = %1028.0;
    %1030 = cast(%var_14995, dtype="bool") /* ty=Tensor[(5, 8, 10), bool] */;
    %1031 = shape_of(%1029, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1032 = cast(%1029, dtype="bool") /* ty=Tensor[(5, 8, 10), bool] */;
    %1033 = dyn.reshape(%1030, %1031, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%1032, %1033) /* ty=Tensor[(5, 8, 10), bool] */
  };
  %1034(%var_15004) /* ty=Tensor[(5, 8, 10), bool] */
}

def @func_5117() -> Tensor[(12, 10, 5), float64] {
  @func_5115() /* ty=Tensor[(12, 10, 5), float64] */
}

def @func_7930(%var_7928: Tensor[(13, 9, 15), float64]) -> Tensor[(13, 9, 15), float64] {
  @func_7927(%var_7928) /* ty=Tensor[(13, 9, 15), float64] */
}

def @func_12307() -> (Tensor[(14, 1, 5), float32],) {
  %1035 = @func_8090() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(14, 1, 5), float32]) */;
  %1036 = %1035.4;
  (%1036,)
}

def @func_615() -> (Tensor[(12, 10, 5), float32],) {
  %1039 = fn () -> (Tensor[(12, 10, 5), float32],) {
    %1037 = cast(meta[relay.Constant][34] /* ty=Tensor[(12, 10, 5), float32] */, dtype="float32") /* ty=Tensor[(12, 10, 5), float32] */;
    %1038 = sigmoid(%1037) /* ty=Tensor[(12, 10, 5), float32] */;
    (%1038,)
  };
  %1039() /* ty=(Tensor[(12, 10, 5), float32],) */
}

def @func_7914() -> (Tensor[(12, 10, 5), float32],) {
  %1040 = @func_7855() /* ty=Tensor[(12, 10, 5), float32] */;
  (%1040,)
}

def @func_16090() -> (Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), uint16], Tensor[(1440, 1), float64], Tensor[(5, 5, 14), float32], Tensor[(350), float32]) {
  %1041 = @func_3128() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %1042 = cast(meta[relay.Constant][35] /* ty=Tensor[(1440, 1), float64] */, dtype="float64") /* ty=Tensor[(1440, 1), float64] */;
  %1043 = reshape(%1042, newshape=[16, 10, 9]) /* ty=Tensor[(16, 10, 9), float64] */;
  %1044 = @func_6079(%1043) /* ty=(Tensor[(16, 10, 9), float64], Tensor[(5, 8, 10), uint16], Tensor[(2112), float32]) */;
  %1045 = cast(meta[relay.Constant][36] /* ty=Tensor[(350), float32] */, dtype="float32") /* ty=Tensor[(350), float32] */;
  %1046 = cast(meta[relay.Constant][36] /* ty=Tensor[(350), float32] */, dtype="float32") /* ty=Tensor[(350), float32] */;
  %1047 = reshape(%1045, newshape=[5, 5, 14]) /* ty=Tensor[(5, 5, 14), float32] */;
  %1048 = reshape(%1046, newshape=[5, 5, 14]) /* ty=Tensor[(5, 5, 14), float32] */;
  %1049 = %1041.0;
  %1050 = %1044.1;
  %1051 = @func_12103(%1047, %1048) /* ty=Tensor[(5, 5, 14), float32] */;
  (%1049, %1050, meta[relay.Constant][35] /* ty=Tensor[(1440, 1), float64] */, %1051, meta[relay.Constant][36] /* ty=Tensor[(350), float32] */)
}

def @func_12129() -> (Tensor[(12, 10, 5), float32],) {
  %1052 = @func_6446() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %1053 = %1052.1;
  (%1053,)
}

def @func_11166(%var_11164: Tensor[(720), int8]) -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(720), int8], Tensor[(1056, 2), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) {
  @func_11163(%var_11164) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(720), int8], Tensor[(1056, 2), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */
}

def @func_7324() -> Tensor[(12, 10, 5), float64] {
  @func_2129() /* ty=Tensor[(12, 10, 5), float64] */
}

def @func_6342() -> Tensor[(12, 10, 5), float32] {
  @func_5563() /* ty=Tensor[(12, 10, 5), float32] */
}

def @func_12540() -> (Tensor[(12, 10, 5), float32],) {
  @func_12538() /* ty=(Tensor[(12, 10, 5), float32],) */
}

def @func_16156() -> (Tensor[(12, 10, 5), float64],) {
  %1056 = fn () -> (Tensor[(12, 10, 5), float64],) {
    %1054 = @func_7285() /* ty=(Tensor[(432), float64], Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), int8]) */;
    %1055 = %1054.1;
    (%1055,)
  };
  %1056() /* ty=(Tensor[(12, 10, 5), float64],) */
}

def @func_383(%var_381: Tensor[(8, 6, 9), float64]) -> (Tensor[(10, 10, 5), float32], Tensor[(500), float32], Tensor[(8, 6, 9), int8]) {
  @func_380(%var_381) /* ty=(Tensor[(10, 10, 5), float32], Tensor[(500), float32], Tensor[(8, 6, 9), int8]) */
}

def @func_14589() -> (Tensor[(12, 10, 5), float32],) {
  %1059 = fn () -> (Tensor[(12, 10, 5), float32],) {
    %1057 = @func_14081() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */;
    %1058 = %1057.1;
    (%1058,)
  };
  %1059() /* ty=(Tensor[(12, 10, 5), float32],) */
}

def @func_10533() -> (Tensor[(12, 10, 5), float64],) {
  %1060 = @func_2526() /* ty=Tensor[(12, 10, 5), float64] */;
  (%1060,)
}

def @func_16226(%var_16225: Tensor[(7, 10, 14), float64]) -> (Tensor[(12, 10, 5), float32], Tensor[(7, 10, 14), uint32]) {
  %1070 = fn (%var_16195: Tensor[(7, 10, 14), float64]) -> (Tensor[(12, 10, 5), float32], Tensor[(7, 10, 14), uint32]) {
    %1061 = @func_9851() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) */;
    %1062 = cast(%var_16195, dtype="float64") /* ty=Tensor[(7, 10, 14), float64] */;
    %1063 = cosh(%1062) /* ty=Tensor[(7, 10, 14), float64] */;
    %1064 = cast(%var_16195, dtype="uint32") /* ty=Tensor[(7, 10, 14), uint32] */;
    %1065 = shape_of(%1063, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1066 = cast(%1063, dtype="uint32") /* ty=Tensor[(7, 10, 14), uint32] */;
    %1067 = dyn.reshape(%1064, %1065, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %1068 = %1061.0;
    %1069 = subtract(%1066, %1067) /* ty=Tensor[(7, 10, 14), uint32] */;
    (%1068, %1069)
  };
  %1070(%var_16225) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(7, 10, 14), uint32]) */
}

def @func_3340() -> (Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64]) {
  %1071 = @func_2398() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */;
  %1072 = @func_2398() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */;
  %1073 = %1071.0;
  %1074 = %1072.1;
  (%1073, %1074)
}

def @func_10063(%var_10048: Tensor[(1755), float64]) -> (Tensor[(12, 10, 5), float32], Tensor[(13, 9, 15), float64], Tensor[(1755), float64]) {
  %1075 = @func_1678() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %1076 = cast(%var_10048, dtype="float64") /* ty=Tensor[(1755), float64] */;
  %1077 = reshape(%1076, newshape=[13, 9, 15]) /* ty=Tensor[(13, 9, 15), float64] */;
  %1078 = %1075.0;
  %1079 = @func_7927(%1077) /* ty=Tensor[(13, 9, 15), float64] */;
  (%1078, %1079, %var_10048)
}

def @func_15631() -> (Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), int8]) {
  @func_15629() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), int8]) */
}

def @func_3263(%var_3262: bool) -> (Tensor[(7, 13, 14), bool],) {
  %1083 = fn (%var_3255: bool) -> (Tensor[(7, 13, 14), bool],) {
    %1080 = cast(%var_3255, dtype="bool") /* ty=bool */;
    %1081 = cast(meta[relay.Constant][37] /* ty=Tensor[(7, 13, 14), bool] */, dtype="bool") /* ty=Tensor[(7, 13, 14), bool] */;
    %1082 = logical_or(%1080, %1081) /* ty=Tensor[(7, 13, 14), bool] */;
    (%1082,)
  };
  %1083(%var_3262) /* ty=(Tensor[(7, 13, 14), bool],) */
}

def @func_2882() -> (Tensor[(12, 10, 5), float64],) {
  %1084 = @func_1243() /* ty=(Tensor[(12, 10, 5), float64],) */;
  %1085 = %1084.0;
  (%1085,)
}

def @func_8655() -> (Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), uint16], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool]) {
  @func_8653() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), uint16], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool]) */
}

def @func_3222() -> Tensor[(432), float64] {
  @func_3220() /* ty=Tensor[(432), float64] */
}

def @func_10520() -> (Tensor[(640), float64], Tensor[(12, 10, 5), float64]) {
  %1090 = fn () -> (Tensor[(640), float64], Tensor[(12, 10, 5), float64]) {
    %1086 = @func_8915() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(432), float64], Tensor[(1, 432), float64], Tensor[(165), bool], Tensor[(500), int32], Tensor[(12, 10, 5), float64], Tensor[(10, 4, 16), float64], Tensor[(640), float64]) */;
    %1087 = @func_3031() /* ty=(Tensor[(12, 10, 5), float64],) */;
    %1088 = %1086.8;
    %1089 = %1087.0;
    (%1088, %1089)
  };
  %1090() /* ty=(Tensor[(640), float64], Tensor[(12, 10, 5), float64]) */
}

def @func_14370(%var_14368: Tensor[(5, 8, 10), int8]) -> (Tensor[(5, 8, 10), bool], Tensor[(12, 10, 5), float64]) {
  @func_14367(%var_14368) /* ty=(Tensor[(5, 8, 10), bool], Tensor[(12, 10, 5), float64]) */
}

def @func_7825() -> (Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) {
  @func_7823() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) */
}

def @func_16717() -> Tensor[(12, 10, 5), float64] {
  %1092 = fn () -> Tensor[(12, 10, 5), float64] {
    %1091 = @func_1843() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */;
    %1091.0
  };
  %1092() /* ty=Tensor[(12, 10, 5), float64] */
}

def @func_3827() -> Tensor[(5, 8, 10), int8] {
  %1093 = @func_2192() /* ty=(Tensor[(5, 8, 10), int8],) */;
  %1093.0
}

def @func_10663(%var_10630: Tensor[(10, 7, 8), int16], %var_10639: Tensor[(260), float32], %var_10646: Tensor[(10, 7, 8), int16]) -> (Tensor[(10, 7, 8), int16], Tensor[(12, 10, 5), float64], Tensor[(260), float32], Tensor[(10, 7, 8), float32]) {
  %1094 = cast(meta[relay.Constant][38] /* ty=Tensor[(10, 7, 8), int16] */, dtype="int16") /* ty=Tensor[(10, 7, 8), int16] */;
  %1095 = shape_of(%var_10630, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1096 = cast(%var_10630, dtype="int16") /* ty=Tensor[(10, 7, 8), int16] */;
  %1097 = dyn.reshape(%1094, %1095, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1098 = cast(%var_10639, dtype="float32") /* ty=Tensor[(260), float32] */;
  %1099 = reshape(%1098, newshape=[130, 2]) /* ty=Tensor[(130, 2), float32] */;
  %1100 = @func_9391(%1099) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(500), int32], Tensor[(108, 4), float64], Tensor[(130, 2), float32], Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float32]) */;
  %1101 = cast(%var_10646, dtype="int16") /* ty=Tensor[(10, 7, 8), int16] */;
  %1102 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(10, 7, 8), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1103 = cast(meta[relay.Constant][38] /* ty=Tensor[(10, 7, 8), int16] */, dtype="int16") /* ty=Tensor[(10, 7, 8), int16] */;
  %1104 = dyn.reshape(%1101, %1102, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1105 = add(%1103, %1104) /* ty=Tensor[(10, 7, 8), int16] */;
  %1106 = cast(%1105, dtype="float32") /* ty=Tensor[(10, 7, 8), float32] */;
  %1107 = multiply(%1096, %1097) /* ty=Tensor[(10, 7, 8), int16] */;
  %1108 = %1100.4;
  %1109 = asinh(%1106) /* ty=Tensor[(10, 7, 8), float32] */;
  (%1107, %1108, %var_10639, %1109)
}

def @func_3504() -> Tensor[(12, 10, 5), float64] {
  %1111 = fn () -> Tensor[(12, 10, 5), float64] {
    %1110 = @func_991() /* ty=(Tensor[(12, 10, 5), float64],) */;
    %1110.0
  };
  %1111() /* ty=Tensor[(12, 10, 5), float64] */
}

def @func_7326() -> Tensor[(12, 10, 5), float64] {
  @func_7324() /* ty=Tensor[(12, 10, 5), float64] */
}

def @func_15629() -> (Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), int8]) {
  %1112 = @func_1174() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(10, 10, 5), float32], Tensor[(14, 1, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(500), int32]) */;
  %1113 = @func_13734() /* ty=(Tensor[(5, 8, 10), int8],) */;
  %1114 = %1112.4;
  %1115 = %1113.0;
  (%1114, %1115)
}

def @func_2990() -> Tensor[(12, 10, 5), bool] {
  %1117 = fn () -> Tensor[(12, 10, 5), bool] {
    %1116 = @func_2019() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool]) */;
    %1116.1
  };
  %1117() /* ty=Tensor[(12, 10, 5), bool] */
}

def @func_4500() -> Tensor[(5, 8, 10), int8] {
  @func_4498() /* ty=Tensor[(5, 8, 10), int8] */
}

def @func_10910(%var_10898: Tensor[(12, 10, 11), uint32]) -> (Tensor[(12, 10, 11), uint32],) {
  %1118 = cast(%var_10898, dtype="uint32") /* ty=Tensor[(12, 10, 11), uint32] */;
  %1119 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(12, 10, 11), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1120 = cast(meta[relay.Constant][39] /* ty=Tensor[(12, 10, 11), uint32] */, dtype="uint32") /* ty=Tensor[(12, 10, 11), uint32] */;
  %1121 = dyn.reshape(%1118, %1119, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1122 = right_shift(%1120, %1121) /* ty=Tensor[(12, 10, 11), uint32] */;
  (%1122,)
}

def @func_14752() -> (Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float64]) {
  %1126 = fn () -> (Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float64]) {
    %1123 = @func_2192() /* ty=(Tensor[(5, 8, 10), int8],) */;
    %1124 = %1123.0;
    %1125 = @func_3463() /* ty=Tensor[(12, 10, 5), float64] */;
    (%1124, %1125)
  };
  %1126() /* ty=(Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float64]) */
}

def @func_13931() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) {
  @func_13929() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */
}

def @func_10565() -> (Tensor[(12, 10, 5), float32],) {
  %1127 = @func_710() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %1128 = %1127.0;
  (%1128,)
}

def @func_2689() -> (Tensor[(16, 2, 9), bool], Tensor[(12, 10, 5), bool], Tensor[(14, 1, 5), float64], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool]) {
  %1145 = fn () -> (Tensor[(16, 2, 9), bool], Tensor[(12, 10, 5), bool], Tensor[(14, 1, 5), float64], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool]) {
    %1129 = cast(meta[relay.Constant][41] /* ty=Tensor[(16, 2, 9), float32] */, dtype="bool") /* ty=Tensor[(16, 2, 9), bool] */;
    %1130 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(16, 2, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1131 = cast(meta[relay.Constant][40] /* ty=Tensor[(16, 2, 9), float32] */, dtype="bool") /* ty=Tensor[(16, 2, 9), bool] */;
    %1132 = dyn.reshape(%1129, %1130, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1133 = @func_2019() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool]) */;
    %1134 = cast(meta[relay.Constant][42] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
    %1135 = reshape(%1134, newshape=[432]) /* ty=Tensor[(432), float64] */;
    %1136 = @func_941(%1135) /* ty=(Tensor[(14, 1, 5), float64], Tensor[(500), float32], Tensor[(432), float64], Tensor[(14, 1, 5), float32]) */;
    %1137 = @func_1407() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
    %1138 = @func_1407() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
    %1139 = equal(%1131, %1132) /* ty=Tensor[(16, 2, 9), bool] */;
    %1140 = %1133.0;
    %1141 = %1136.0;
    %1142 = %1137.1;
    %1143 = @func_1618() /* ty=Tensor[(12, 10, 5), bool] */;
    %1144 = %1138.0;
    (%1139, %1140, %1141, meta[relay.Constant][42] /* ty=Tensor[(432), float64] */, %1142, %1143, %1144)
  };
  %1145() /* ty=(Tensor[(16, 2, 9), bool], Tensor[(12, 10, 5), bool], Tensor[(14, 1, 5), float64], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool]) */
}

def @func_8441(%var_8439: Tensor[(10, 11, 13), uint32], %var_8440: Tensor[(10, 11, 13), uint32]) -> (Tensor[(10, 11, 13), bool], Tensor[(12, 10, 5), float64]) {
  @func_8437(%var_8439, %var_8440) /* ty=(Tensor[(10, 11, 13), bool], Tensor[(12, 10, 5), float64]) */
}

def @func_4007() -> (Tensor[(12, 10, 5), float32],) {
  %1146 = @func_823() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
  %1147 = %1146.0;
  (%1147,)
}

def @func_12652(%var_12650: Tensor[(1320), uint32], %var_12651: Tensor[(15, 117), float64]) -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 11), uint32], Tensor[(1320), uint32], Tensor[(1755), float64], Tensor[(15, 117), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) {
  %1162 = fn (%var_12617: Tensor[(1320), uint32], %var_12620: Tensor[(15, 117), float64]) -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 11), uint32], Tensor[(1320), uint32], Tensor[(1755), float64], Tensor[(15, 117), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) {
    %1148 = @func_4338() /* ty=(Tensor[(12, 10, 5), bool],) */;
    %1149 = cast(%var_12617, dtype="uint32") /* ty=Tensor[(1320), uint32] */;
    %1150 = reshape(%1149, newshape=[12, 10, 11]) /* ty=Tensor[(12, 10, 11), uint32] */;
    %1151 = @func_10910(%1150) /* ty=(Tensor[(12, 10, 11), uint32],) */;
    %1152 = cast(%var_12620, dtype="float64") /* ty=Tensor[(15, 117), float64] */;
    %1153 = reshape(%1152, newshape=[1755]) /* ty=Tensor[(1755), float64] */;
    %1154 = @func_10063(%1153) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(13, 9, 15), float64], Tensor[(1755), float64]) */;
    %1155 = @func_3031() /* ty=(Tensor[(12, 10, 5), float64],) */;
    %1156 = @func_2155() /* ty=Tensor[(12, 10, 5), float64] */;
    %1157 = %1148.0;
    %1158 = %1151.0;
    %1159 = %1154.2;
    %1160 = %1155.0;
    %1161 = @func_2155() /* ty=Tensor[(12, 10, 5), float64] */;
    (%1156, %1157, %1158, %var_12617, %1159, %var_12620, %1160, %1161)
  };
  %1162(%var_12650, %var_12651) /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 11), uint32], Tensor[(1320), uint32], Tensor[(1755), float64], Tensor[(15, 117), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) */
}

def @func_11746() -> (Tensor[(12, 10, 5), float64],) {
  @func_11744() /* ty=(Tensor[(12, 10, 5), float64],) */
}

def @func_8235() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) {
  %1167 = fn () -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) {
    %1163 = @func_3149() /* ty=(Tensor[(12, 10, 5), float64],) */;
    %1164 = @func_614() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %1165 = %1163.0;
    %1166 = %1164.0;
    (%1165, %1166)
  };
  %1167() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */
}

def @func_3463() -> Tensor[(12, 10, 5), float64] {
  @func_3089() /* ty=Tensor[(12, 10, 5), float64] */
}

def @func_10913(%var_10911: Tensor[(12, 10, 11), uint32]) -> (Tensor[(12, 10, 11), uint32],) {
  @func_10910(%var_10911) /* ty=(Tensor[(12, 10, 11), uint32],) */
}

def @func_12927() -> Tensor[(12, 10, 5), float64] {
  %1168 = @func_5622() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) */;
  %1168.1
}

def @func_10243() -> (Tensor[(432), float64], Tensor[(432), float64], Tensor[(12, 10, 5), float64]) {
  %1169 = @func_1174() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(10, 10, 5), float32], Tensor[(14, 1, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(500), int32]) */;
  %1170 = %1169.3;
  %1171 = cast(%1170, dtype="float64") /* ty=Tensor[(432), float64] */;
  %1172 = reshape(%1171, newshape=[432]) /* ty=Tensor[(432), float64] */;
  %1173 = @func_968(%1172) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(10, 10, 5), float32], Tensor[(432), float64]) */;
  %1174 = %1173.2;
  %1175 = @func_4219() /* ty=Tensor[(12, 10, 5), float64] */;
  (%1170, %1174, %1175)
}

def @func_271(%var_269: Tensor[(10, 10, 5), float32]) -> Tensor[(10, 10, 5), float32] {
  @func_268(%var_269) /* ty=Tensor[(10, 10, 5), float32] */
}

def @func_2528() -> Tensor[(12, 10, 5), float64] {
  @func_2526() /* ty=Tensor[(12, 10, 5), float64] */
}

def @func_944(%var_942: Tensor[(432), float64]) -> (Tensor[(14, 1, 5), float64], Tensor[(500), float32], Tensor[(432), float64], Tensor[(14, 1, 5), float32]) {
  @func_941(%var_942) /* ty=(Tensor[(14, 1, 5), float64], Tensor[(500), float32], Tensor[(432), float64], Tensor[(14, 1, 5), float32]) */
}

def @func_9393(%var_9392: Tensor[(130, 2), float32]) -> (Tensor[(12, 10, 5), float32], Tensor[(500), int32], Tensor[(108, 4), float64], Tensor[(130, 2), float32], Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float32]) {
  %1186 = fn (%var_9372: Tensor[(130, 2), float32]) -> (Tensor[(12, 10, 5), float32], Tensor[(500), int32], Tensor[(108, 4), float64], Tensor[(130, 2), float32], Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float32]) {
    %1176 = cast(meta[relay.Constant][43] /* ty=Tensor[(108, 4), float64] */, dtype="float64") /* ty=Tensor[(108, 4), float64] */;
    %1177 = cast(%var_9372, dtype="float32") /* ty=Tensor[(130, 2), float32] */;
    %1178 = reshape(%1176, newshape=[432]) /* ty=Tensor[(432), float64] */;
    %1179 = reshape(%1177, newshape=[260]) /* ty=Tensor[(260), float32] */;
    %1180 = @func_4622(%1178, %1179) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(13, 2, 10), bool], Tensor[(260), float32], Tensor[(5, 8, 10), int8], Tensor[(2112), float32], Tensor[(500), int32]) */;
    %1181 = @func_3527() /* ty=Tensor[(12, 10, 5), float32] */;
    %1182 = %1180.8;
    %1183 = @func_3503() /* ty=Tensor[(12, 10, 5), float64] */;
    %1184 = @func_4498() /* ty=Tensor[(5, 8, 10), int8] */;
    %1185 = @func_6763() /* ty=Tensor[(12, 10, 5), float32] */;
    (%1181, %1182, meta[relay.Constant][43] /* ty=Tensor[(108, 4), float64] */, %var_9372, %1183, %1184, %1185)
  };
  %1186(%var_9392) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(500), int32], Tensor[(108, 4), float64], Tensor[(130, 2), float32], Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float32]) */
}

def @func_770() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) {
  %1193 = fn () -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) {
    %1187 = @func_710() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %1188 = @func_710() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %1189 = %1188.0;
    %1190 = cast(%1189, dtype="float64") /* ty=Tensor[(12, 10, 5), float64] */;
    %1191 = %1187.0;
    %1192 = exp(%1190) /* ty=Tensor[(12, 10, 5), float64] */;
    (%1191, %1192)
  };
  %1193() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) */
}

def @func_13316() -> (Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) {
  %1194 = @func_4149() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32]) */;
  %1195 = @func_4301() /* ty=(Tensor[(5, 8, 10), float32], Tensor[(12, 10, 5), float64]) */;
  %1196 = %1194.2;
  %1197 = %1195.1;
  %1198 = @func_3503() /* ty=Tensor[(12, 10, 5), float64] */;
  (%1196, %1197, %1198)
}

def @func_12309() -> (Tensor[(14, 1, 5), float32],) {
  @func_12307() /* ty=(Tensor[(14, 1, 5), float32],) */
}

def @func_3401() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) {
  %1201 = fn () -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) {
    %1199 = @func_2155() /* ty=Tensor[(12, 10, 5), float64] */;
    %1200 = @func_2129() /* ty=Tensor[(12, 10, 5), float64] */;
    (%1199, %1200)
  };
  %1201() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) */
}

def @func_11881() -> Tensor[(12, 10, 5), bool] {
  @func_2989() /* ty=Tensor[(12, 10, 5), bool] */
}

def @func_11842() -> Tensor[(12, 10, 5), float32] {
  %1203 = fn () -> Tensor[(12, 10, 5), float32] {
    %1202 = @func_710() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %1202.0
  };
  %1203() /* ty=Tensor[(12, 10, 5), float32] */
}

def @func_12051(%var_12049: Tensor[(11, 8, 8), int32], %var_12050: Tensor[(432), float64]) -> (Tensor[(6, 14, 15), int16], Tensor[(1260), int64], Tensor[(11, 8, 8), bool], Tensor[(14, 1, 5), float64], Tensor[(432), float64]) {
  @func_12047(%var_12049, %var_12050) /* ty=(Tensor[(6, 14, 15), int16], Tensor[(1260), int64], Tensor[(11, 8, 8), bool], Tensor[(14, 1, 5), float64], Tensor[(432), float64]) */
}

def @func_7126() -> (Tensor[(12, 10, 5), bool], Tensor[(432), float64]) {
  %1206 = fn () -> (Tensor[(12, 10, 5), bool], Tensor[(432), float64]) {
    %1204 = @func_1618() /* ty=Tensor[(12, 10, 5), bool] */;
    %1205 = @func_4528() /* ty=Tensor[(432), float64] */;
    (%1204, %1205)
  };
  %1206() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(432), float64]) */
}

def @func_11278() -> Tensor[(12, 10, 5), float32] {
  %1207 = @func_4044() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %1207.0
}

def @func_14257() -> Tensor[(12, 10, 5), float64] {
  @func_14255() /* ty=Tensor[(12, 10, 5), float64] */
}

def @func_14789() -> (Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), float32], Tensor[(12, 10, 5), float32], Tensor[(165), float32]) {
  %1216 = fn () -> (Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), float32], Tensor[(12, 10, 5), float32], Tensor[(165), float32]) {
    %1208 = @func_1323() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %1209 = @func_11451() /* ty=(Tensor[(5, 8, 10), float32],) */;
    %1210 = cast(meta[relay.Constant][44] /* ty=Tensor[(165), float32] */, dtype="float32") /* ty=Tensor[(165), float32] */;
    %1211 = reshape(%1210, newshape=[165]) /* ty=Tensor[(165), float32] */;
    %1212 = @func_5506(%1211) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(11, 5, 3), float32], Tensor[(165), float64]) */;
    %1213 = %1208.0;
    %1214 = %1209.0;
    %1215 = %1212.0;
    (%1213, %1214, %1215, meta[relay.Constant][44] /* ty=Tensor[(165), float32] */)
  };
  %1216() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), float32], Tensor[(12, 10, 5), float32], Tensor[(165), float32]) */
}

def @func_16274() -> Tensor[(12, 10, 5), float32] {
  @func_16272() /* ty=Tensor[(12, 10, 5), float32] */
}

def @func_15529(%var_15527: Tensor[(500), float32], %var_15528: Tensor[(500), float32]) -> (Tensor[(12, 10, 5), float32], Tensor[(10, 10, 5), float32], Tensor[(500), int8]) {
  %1227 = fn (%var_15510: Tensor[(500), float32], %var_15516: Tensor[(500), float32]) -> (Tensor[(12, 10, 5), float32], Tensor[(10, 10, 5), float32], Tensor[(500), int8]) {
    %1217 = @func_9201() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */;
    %1218 = cast(%var_15510, dtype="float32") /* ty=Tensor[(500), float32] */;
    %1219 = reshape(%1218, newshape=[10, 10, 5]) /* ty=Tensor[(10, 10, 5), float32] */;
    %1220 = cast(%var_15516, dtype="int8") /* ty=Tensor[(500), int8] */;
    %1221 = shape_of(%var_15510, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1222 = cast(%var_15510, dtype="int8") /* ty=Tensor[(500), int8] */;
    %1223 = dyn.reshape(%1220, %1221, newshape=[]) /* ty=Tensor[(?), int8] */;
    %1224 = %1217.1;
    %1225 = @func_268(%1219) /* ty=Tensor[(10, 10, 5), float32] */;
    %1226 = subtract(%1222, %1223) /* ty=Tensor[(500), int8] */;
    (%1224, %1225, %1226)
  };
  %1227(%var_15527, %var_15528) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(10, 10, 5), float32], Tensor[(500), int8]) */
}

def @func_9904() -> (Tensor[(12, 10, 5), float32],) {
  @func_9902() /* ty=(Tensor[(12, 10, 5), float32],) */
}

def @func_9542() -> (Tensor[(12, 10, 5), float64],) {
  %1229 = fn () -> (Tensor[(12, 10, 5), float64],) {
    %1228 = @func_4219() /* ty=Tensor[(12, 10, 5), float64] */;
    (%1228,)
  };
  %1229() /* ty=(Tensor[(12, 10, 5), float64],) */
}

def @func_8330() -> Tensor[(12, 10, 5), bool] {
  %1230 = fn () -> Tensor[(12, 10, 5), bool] {
    @func_3841() /* ty=Tensor[(12, 10, 5), bool] */
  };
  %1230() /* ty=Tensor[(12, 10, 5), bool] */
}

def @func_13394(%var_13382: Tensor[(245, 2), float32]) -> (Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(720), int8], Tensor[(12, 10, 5), float32], Tensor[(245, 2), float32]) {
  %1231 = cast(meta[relay.Constant][45] /* ty=Tensor[(720), int8] */, dtype="int8") /* ty=Tensor[(720), int8] */;
  %1232 = reshape(%1231, newshape=[720]) /* ty=Tensor[(720), int8] */;
  %1233 = @func_11163(%1232) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(720), int8], Tensor[(1056, 2), float32], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */;
  %1234 = cast(%var_13382, dtype="float32") /* ty=Tensor[(245, 2), float32] */;
  %1235 = reshape(%1234, newshape=[14, 7, 5]) /* ty=Tensor[(14, 7, 5), float32] */;
  %1236 = @func_2266(%1235) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(14, 7, 5), bool]) */;
  %1237 = @func_4528() /* ty=Tensor[(432), float64] */;
  %1238 = %1233.0;
  %1239 = %1236.0;
  (%1237, %1238, meta[relay.Constant][45] /* ty=Tensor[(720), int8] */, %1239, %var_13382)
}

def @func_3465() -> Tensor[(12, 10, 5), float64] {
  @func_3463() /* ty=Tensor[(12, 10, 5), float64] */
}

def @func_12573() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) {
  @func_12571() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) */
}

def @func_10535() -> (Tensor[(12, 10, 5), float64],) {
  @func_10533() /* ty=(Tensor[(12, 10, 5), float64],) */
}

def @func_5207() -> Tensor[(12, 10, 5), float32] {
  @func_1416() /* ty=Tensor[(12, 10, 5), float32] */
}

def @func_2841() -> (Tensor[(5, 8, 10), int8],) {
  @func_2839() /* ty=(Tensor[(5, 8, 10), int8],) */
}

def @func_9585(%var_9579: Tensor[(140), uint8]) -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(432), float64], Tensor[(140), uint8]) {
  %1240 = @func_908() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %1241 = cast(%var_9579, dtype="uint8") /* ty=Tensor[(140), uint8] */;
  %1242 = cast(%var_9579, dtype="uint8") /* ty=Tensor[(140), uint8] */;
  %1243 = reshape(%1241, newshape=[7, 2, 10]) /* ty=Tensor[(7, 2, 10), uint8] */;
  %1244 = reshape(%1242, newshape=[7, 2, 10]) /* ty=Tensor[(7, 2, 10), uint8] */;
  %1245 = @func_7624(%1243, %1244) /* ty=(Tensor[(7, 2, 10), uint8], Tensor[(432), float64], Tensor[(12, 10, 5), float32]) */;
  %1246 = @func_7855() /* ty=Tensor[(12, 10, 5), float32] */;
  %1247 = %1240.0;
  %1248 = %1245.1;
  (%1246, %1247, %1248, %var_9579)
}

def @func_12131() -> (Tensor[(12, 10, 5), float32],) {
  @func_12129() /* ty=(Tensor[(12, 10, 5), float32],) */
}

def @func_10567() -> (Tensor[(12, 10, 5), float32],) {
  @func_10565() /* ty=(Tensor[(12, 10, 5), float32],) */
}

def @func_14255() -> Tensor[(12, 10, 5), float64] {
  %1249 = @func_8234() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */;
  %1249.0
}

def @func_14139(%var_14111: Tensor[(560), int16]) -> (Tensor[(12, 10, 5), bool], Tensor[(560), int16], Tensor[(1, 260), float32], Tensor[(260), float64]) {
  %1250 = @func_5327() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(432), float64]) */;
  %1251 = cast(%var_14111, dtype="int16") /* ty=Tensor[(560), int16] */;
  %1252 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 260), float32] */, dtype="float32") /* ty=Tensor[(1, 260), float32] */;
  %1253 = cast(%var_14111, dtype="int16") /* ty=Tensor[(560), int16] */;
  %1254 = reshape(%1251, newshape=[10, 7, 8]) /* ty=Tensor[(10, 7, 8), int16] */;
  %1255 = reshape(%1252, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %1256 = reshape(%1253, newshape=[10, 7, 8]) /* ty=Tensor[(10, 7, 8), int16] */;
  %1257 = @func_10663(%1254, %1255, %1256) /* ty=(Tensor[(10, 7, 8), int16], Tensor[(12, 10, 5), float64], Tensor[(260), float32], Tensor[(10, 7, 8), float32]) */;
  %1258 = %1257.2;
  %1259 = cast(%1258, dtype="float64") /* ty=Tensor[(260), float64] */;
  %1260 = %1250.1;
  %1261 = tan(%1259) /* ty=Tensor[(260), float64] */;
  (%1260, %var_14111, meta[relay.Constant][46] /* ty=Tensor[(1, 260), float32] */, %1261)
}

def @func_13403() -> Tensor[(5, 8, 10), float32] {
  @func_13401() /* ty=Tensor[(5, 8, 10), float32] */
}

def @func_16272() -> Tensor[(12, 10, 5), float32] {
  %1262 = @func_16109() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), uint16]) */;
  %1262.0
}

def @func_13735() -> (Tensor[(5, 8, 10), int8],) {
  %1264 = fn () -> (Tensor[(5, 8, 10), int8],) {
    %1263 = @func_4498() /* ty=Tensor[(5, 8, 10), int8] */;
    (%1263,)
  };
  %1264() /* ty=(Tensor[(5, 8, 10), int8],) */
}

def @func_10220(%var_10143: Tensor[(10, 10, 5), float32]) -> (Tensor[(12, 10, 5), float64], Tensor[(10, 10, 5), bool], Tensor[(12, 10, 5), bool], Tensor[(5, 8, 10), int8], Tensor[(1, 260), float32]) {
  %1265 = @func_5099() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */;
  %1266 = @func_6832() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64], Tensor[(10, 10, 5), float32], Tensor[(500), float32]) */;
  %1267 = %1266.2;
  %1268 = cast(%var_10143, dtype="bool") /* ty=Tensor[(10, 10, 5), bool] */;
  %1269 = shape_of(%1267, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1270 = cast(%1267, dtype="bool") /* ty=Tensor[(10, 10, 5), bool] */;
  %1271 = dyn.reshape(%1268, %1269, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1272 = @func_8710() /* ty=(Tensor[(12, 10, 5), bool],) */;
  %1273 = cast(meta[relay.Constant][47] /* ty=Tensor[(1, 260), float32] */, dtype="float32") /* ty=Tensor[(1, 260), float32] */;
  %1274 = reshape(%1273, newshape=[130, 2]) /* ty=Tensor[(130, 2), float32] */;
  %1275 = @func_9391(%1274) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(500), int32], Tensor[(108, 4), float64], Tensor[(130, 2), float32], Tensor[(12, 10, 5), float64], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float32]) */;
  %1276 = %1265.0;
  %1277 = equal(%1270, %1271) /* ty=Tensor[(10, 10, 5), bool] */;
  %1278 = %1272.0;
  %1279 = %1275.5;
  (%1276, %1277, %1278, %1279, meta[relay.Constant][47] /* ty=Tensor[(1, 260), float32] */)
}

def @func_3090() -> Tensor[(12, 10, 5), float64] {
  %1280 = fn () -> Tensor[(12, 10, 5), float64] {
    @func_2129() /* ty=Tensor[(12, 10, 5), float64] */
  };
  %1280() /* ty=Tensor[(12, 10, 5), float64] */
}

def @func_14876() -> (Tensor[(12, 6, 5), float64], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float32]) {
  @func_14874() /* ty=(Tensor[(12, 6, 5), float64], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float32]) */
}

def @func_1705() -> (Tensor[(14, 1, 5), float32], Tensor[(12, 10, 5), float32]) {
  @func_1703() /* ty=(Tensor[(14, 1, 5), float32], Tensor[(12, 10, 5), float32]) */
}

def @func_2526() -> Tensor[(12, 10, 5), float64] {
  %1281 = @func_1843() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */;
  %1281.0
}

def @func_3632(%var_3631: Tensor[(2112), float32]) -> (Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), uint16], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(2112), bool], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), int8]) {
  %1308 = fn (%var_3554: Tensor[(2112), float32]) -> (Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), uint16], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(2112), bool], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), int8]) {
    %1282 = @func_2019() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool]) */;
    %1283 = cast(6.91308f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %1284 = cast(%var_3554, dtype="float32") /* ty=Tensor[(2112), float32] */;
    %1285 = cast(%var_3554, dtype="float32") /* ty=Tensor[(2112), float32] */;
    %1286 = reshape(%1283, newshape=[]) /* ty=float32 */;
    %1287 = reshape(%1284, newshape=[16, 11, 12]) /* ty=Tensor[(16, 11, 12), float32] */;
    %1288 = reshape(%1285, newshape=[16, 11, 12]) /* ty=Tensor[(16, 11, 12), float32] */;
    %1289 = @func_1915(%1286, %1287, %1288) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(16, 11, 12), int16], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool]) */;
    %1290 = @func_3443() /* ty=(Tensor[(5, 8, 10), uint16], Tensor[(5, 8, 10), int8]) */;
    %1291 = @func_1243() /* ty=(Tensor[(12, 10, 5), float64],) */;
    %1292 = @func_1703() /* ty=(Tensor[(14, 1, 5), float32], Tensor[(12, 10, 5), float32]) */;
    %1293 = cast(%var_3554, dtype="uint8") /* ty=Tensor[(2112), uint8] */;
    %1294 = cast(6.91308f /* ty=float32 */, dtype="uint8") /* ty=uint8 */;
    %1295 = logical_xor(%1293, %1294) /* ty=Tensor[(2112), uint8] */;
    %1296 = cast(%1295, dtype="bool") /* ty=Tensor[(2112), bool] */;
    %1297 = cast(6.91308f /* ty=float32 */, dtype="bool") /* ty=bool */;
    %1298 = @func_614() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %1299 = @func_2839() /* ty=(Tensor[(5, 8, 10), int8],) */;
    %1300 = %1282.1;
    %1301 = %1289.0;
    %1302 = %1290.0;
    %1303 = %1291.0;
    %1304 = %1292.1;
    %1305 = greater_equal(%1296, %1297) /* ty=Tensor[(2112), bool] */;
    %1306 = %1298.0;
    %1307 = %1299.0;
    (%1300, %1301, %1302, %1303, %1304, %1305, %1306, %1307)
  };
  %1308(%var_3631) /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), uint16], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(2112), bool], Tensor[(12, 10, 5), float32], Tensor[(5, 8, 10), int8]) */
}

def @func_5922(%var_5920: Tensor[(2, 8, 7), float64], %var_5921: Tensor[(2, 8, 7), float64]) -> (Tensor[(2, 8, 7), float64],) {
  @func_5918(%var_5920, %var_5921) /* ty=(Tensor[(2, 8, 7), float64],) */
}

def @func_15294(%var_15292: Tensor[(260), float32]) -> (Tensor[(5, 8, 10), bool], Tensor[(12, 16, 11), int16], Tensor[(2112), int16], Tensor[(13, 2, 10), bool], Tensor[(260), float32], Tensor[(12, 10, 5), bool]) {
  @func_15291(%var_15292) /* ty=(Tensor[(5, 8, 10), bool], Tensor[(12, 16, 11), int16], Tensor[(2112), int16], Tensor[(13, 2, 10), bool], Tensor[(260), float32], Tensor[(12, 10, 5), bool]) */
}

def @func_380(%var_358: Tensor[(8, 6, 9), float64]) -> (Tensor[(10, 10, 5), float32], Tensor[(500), float32], Tensor[(8, 6, 9), int8]) {
  %1309 = cast(meta[relay.Constant][48] /* ty=Tensor[(500), float32] */, dtype="float32") /* ty=Tensor[(500), float32] */;
  %1310 = reshape(%1309, newshape=[10, 10, 5]) /* ty=Tensor[(10, 10, 5), float32] */;
  %1311 = cast(%var_358, dtype="float64") /* ty=Tensor[(8, 6, 9), float64] */;
  %1312 = cosh(%1311) /* ty=Tensor[(8, 6, 9), float64] */;
  %1313 = cast(meta[relay.Constant][49] /* ty=Tensor[(8, 6, 9), float64] */, dtype="int8") /* ty=Tensor[(8, 6, 9), int8] */;
  %1314 = shape_of(%1312, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1315 = cast(%1312, dtype="int8") /* ty=Tensor[(8, 6, 9), int8] */;
  %1316 = dyn.reshape(%1313, %1314, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1317 = @func_268(%1310) /* ty=Tensor[(10, 10, 5), float32] */;
  %1318 = right_shift(%1315, %1316) /* ty=Tensor[(8, 6, 9), int8] */;
  (%1317, meta[relay.Constant][48] /* ty=Tensor[(500), float32] */, %1318)
}

def @func_268(%var_250: Tensor[(10, 10, 5), float32]) -> Tensor[(10, 10, 5), float32] {
  %1319 = cast(%var_250, dtype="float32") /* ty=Tensor[(10, 10, 5), float32] */;
  atanh(%1319) /* ty=Tensor[(10, 10, 5), float32] */
}

def @func_8916() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(432), float64], Tensor[(1, 432), float64], Tensor[(165), bool], Tensor[(500), int32], Tensor[(12, 10, 5), float64], Tensor[(10, 4, 16), float64], Tensor[(640), float64]) {
  %1336 = fn () -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(432), float64], Tensor[(1, 432), float64], Tensor[(165), bool], Tensor[(500), int32], Tensor[(12, 10, 5), float64], Tensor[(10, 4, 16), float64], Tensor[(640), float64]) {
    %1320 = @func_6446() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
    %1321 = @func_3340() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64]) */;
    %1322 = @func_7125() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(432), float64]) */;
    %1323 = cast(meta[relay.Constant][50] /* ty=Tensor[(165), bool] */, dtype="bool") /* ty=Tensor[(165), bool] */;
    %1324 = reshape(%1323, newshape=[165]) /* ty=Tensor[(165), bool] */;
    %1325 = @func_5673(%1324) /* ty=(Tensor[(5, 8, 10), int8], Tensor[(216, 2), float64], Tensor[(165), bool], Tensor[(2112), float32], Tensor[(825), bool], Tensor[(1, 432), float64]) */;
    %1326 = @func_1174() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(10, 10, 5), float32], Tensor[(14, 1, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(500), int32]) */;
    %1327 = cast(meta[relay.Constant][51] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
    %1328 = reshape(%1327, newshape=[10, 4, 16]) /* ty=Tensor[(10, 4, 16), float64] */;
    %1329 = %1320.0;
    %1330 = %1321.0;
    %1331 = %1322.1;
    %1332 = %1325.5;
    %1333 = %1326.5;
    %1334 = @func_4572() /* ty=Tensor[(12, 10, 5), float64] */;
    %1335 = @func_4445(%1328) /* ty=Tensor[(10, 4, 16), float64] */;
    (%1329, %1330, %1331, %1332, meta[relay.Constant][50] /* ty=Tensor[(165), bool] */, %1333, %1334, %1335, meta[relay.Constant][51] /* ty=Tensor[(640), float64] */)
  };
  %1336() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool], Tensor[(432), float64], Tensor[(1, 432), float64], Tensor[(165), bool], Tensor[(500), int32], Tensor[(12, 10, 5), float64], Tensor[(10, 4, 16), float64], Tensor[(640), float64]) */
}

def @func_6899() -> (Tensor[(12, 10, 5), bool], Tensor[(5, 8, 10), int8]) {
  %1340 = fn () -> (Tensor[(12, 10, 5), bool], Tensor[(5, 8, 10), int8]) {
    %1337 = @func_6863() /* ty=(Tensor[(5, 8, 10), int8],) */;
    %1338 = @func_1042() /* ty=Tensor[(12, 10, 5), bool] */;
    %1339 = %1337.0;
    (%1338, %1339)
  };
  %1340() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(5, 8, 10), int8]) */
}

def @func_11692() -> Tensor[(12, 10, 5), float64] {
  @func_11690() /* ty=Tensor[(12, 10, 5), float64] */
}

def @func_1919(%var_1916: float32, %var_1917: Tensor[(16, 11, 12), float32], %var_1918: Tensor[(16, 11, 12), float32]) -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(16, 11, 12), int16], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool]) {
  %1359 = fn (%var_1875: float32, %var_1876: Tensor[(16, 11, 12), float32], %var_1903: Tensor[(16, 11, 12), float32]) -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(16, 11, 12), int16], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool]) {
    %1341 = @func_823() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
    %1342 = @func_1407() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
    %1343 = cast(%var_1875, dtype="float32") /* ty=float32 */;
    %1344 = cast(%var_1876, dtype="float32") /* ty=Tensor[(16, 11, 12), float32] */;
    %1345 = mod(%1343, %1344) /* ty=Tensor[(16, 11, 12), float32] */;
    %1346 = cast(%var_1903, dtype="int16") /* ty=Tensor[(16, 11, 12), int16] */;
    %1347 = shape_of(%1345, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1348 = cast(%1345, dtype="int16") /* ty=Tensor[(16, 11, 12), int16] */;
    %1349 = dyn.reshape(%1346, %1347, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %1350 = @func_1678() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %1351 = @func_823() /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
    %1352 = @func_1843() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */;
    %1353 = %1341.0;
    %1354 = %1342.1;
    %1355 = subtract(%1348, %1349) /* ty=Tensor[(16, 11, 12), int16] */;
    %1356 = %1350.0;
    %1357 = %1351.0;
    %1358 = %1352.1;
    (%1353, %1354, %1355, %1356, %1357, %1358)
  };
  %1359(%var_1916, %var_1917, %var_1918) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(16, 11, 12), int16], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), bool]) */
}

def @func_7927(%var_7917: Tensor[(13, 9, 15), float64]) -> Tensor[(13, 9, 15), float64] {
  %1360 = cast(%var_7917, dtype="float64") /* ty=Tensor[(13, 9, 15), float64] */;
  acosh(%1360) /* ty=Tensor[(13, 9, 15), float64] */
}

def @func_10473() -> (Tensor[(12, 10, 5), float64],) {
  %1361 = @func_2398() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32]) */;
  %1362 = %1361.1;
  (%1362,)
}

def @func_2839() -> (Tensor[(5, 8, 10), int8],) {
  %1363 = @func_2192() /* ty=(Tensor[(5, 8, 10), int8],) */;
  %1364 = %1363.0;
  (%1364,)
}

def @func_6206() -> Tensor[(5, 8, 10), uint16] {
  @func_6204() /* ty=Tensor[(5, 8, 10), uint16] */
}

def @func_2286() -> (Tensor[(14, 1, 5), float32],) {
  %1367 = fn () -> (Tensor[(14, 1, 5), float32],) {
    %1365 = @func_1174() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(10, 10, 5), float32], Tensor[(14, 1, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(500), int32]) */;
    %1366 = %1365.2;
    (%1366,)
  };
  %1367() /* ty=(Tensor[(14, 1, 5), float32],) */
}

def @func_5918(%var_5910: Tensor[(2, 8, 7), float64], %var_5911: Tensor[(2, 8, 7), float64]) -> (Tensor[(2, 8, 7), float64],) {
  %1368 = cast(%var_5911, dtype="float64") /* ty=Tensor[(2, 8, 7), float64] */;
  %1369 = shape_of(%var_5910, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1370 = cast(%var_5910, dtype="float64") /* ty=Tensor[(2, 8, 7), float64] */;
  %1371 = dyn.reshape(%1368, %1369, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1372 = floor_divide(%1370, %1371) /* ty=Tensor[(2, 8, 7), float64] */;
  (%1372,)
}

def @func_10245() -> (Tensor[(432), float64], Tensor[(432), float64], Tensor[(12, 10, 5), float64]) {
  @func_10243() /* ty=(Tensor[(432), float64], Tensor[(432), float64], Tensor[(12, 10, 5), float64]) */
}

def @func_10837() -> (Tensor[(12, 10, 5), float32],) {
  @func_10835() /* ty=(Tensor[(12, 10, 5), float32],) */
}

def @func_7856() -> Tensor[(12, 10, 5), float32] {
  %1374 = fn () -> Tensor[(12, 10, 5), float32] {
    %1373 = @func_1407() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
    %1373.2
  };
  %1374() /* ty=Tensor[(12, 10, 5), float32] */
}

def @func_6182(%var_6180: Tensor[(165), float32]) -> (Tensor[(432), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(11, 5, 3), float32], Tensor[(165), float32], Tensor[(12, 10, 5), float32]) {
  @func_6179(%var_6180) /* ty=(Tensor[(432), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(11, 5, 3), float32], Tensor[(165), float32], Tensor[(12, 10, 5), float32]) */
}

def @func_4447(%var_4446: Tensor[(10, 4, 16), float64]) -> Tensor[(10, 4, 16), float64] {
  %1376 = fn (%var_4430: Tensor[(10, 4, 16), float64]) -> Tensor[(10, 4, 16), float64] {
    %1375 = cast(%var_4430, dtype="float64") /* ty=Tensor[(10, 4, 16), float64] */;
    cosh(%1375) /* ty=Tensor[(10, 4, 16), float64] */
  };
  %1376(%var_4446) /* ty=Tensor[(10, 4, 16), float64] */
}

def @func_10668(%var_10665: Tensor[(10, 7, 8), int16], %var_10666: Tensor[(260), float32], %var_10667: Tensor[(10, 7, 8), int16]) -> (Tensor[(10, 7, 8), int16], Tensor[(12, 10, 5), float64], Tensor[(260), float32], Tensor[(10, 7, 8), float32]) {
  @func_10663(%var_10665, %var_10666, %var_10667) /* ty=(Tensor[(10, 7, 8), int16], Tensor[(12, 10, 5), float64], Tensor[(260), float32], Tensor[(10, 7, 8), float32]) */
}

def @func_6250() -> Tensor[(12, 10, 5), float32] {
  @func_5563() /* ty=Tensor[(12, 10, 5), float32] */
}

def @func_2020() -> (Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool]) {
  %1380 = fn () -> (Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool]) {
    %1377 = @func_1407() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float32]) */;
    %1378 = @func_1042() /* ty=Tensor[(12, 10, 5), bool] */;
    %1379 = %1377.0;
    (%1378, %1379)
  };
  %1380() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), bool]) */
}

def @func_11240() -> Tensor[(12, 10, 5), float64] {
  %1382 = fn () -> Tensor[(12, 10, 5), float64] {
    %1381 = @func_4253() /* ty=(Tensor[(12, 10, 5), float64],) */;
    %1381.0
  };
  %1382() /* ty=Tensor[(12, 10, 5), float64] */
}

def @func_9456() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) {
  @func_9454() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), bool]) */
}

def @func_6523() -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(432), float64]) {
  %1390 = fn () -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(432), float64]) {
    %1383 = @func_2740() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) */;
    %1384 = @func_3128() /* ty=(Tensor[(12, 10, 5), float64],) */;
    %1385 = @func_3031() /* ty=(Tensor[(12, 10, 5), float64],) */;
    %1386 = %1383.1;
    %1387 = %1384.0;
    %1388 = %1385.0;
    %1389 = @func_3220() /* ty=Tensor[(432), float64] */;
    (%1386, %1387, %1388, %1389)
  };
  %1390() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64], Tensor[(432), float64]) */
}

def @func_2156() -> Tensor[(12, 10, 5), float64] {
  %1391 = fn () -> Tensor[(12, 10, 5), float64] {
    @func_2129() /* ty=Tensor[(12, 10, 5), float64] */
  };
  %1391() /* ty=Tensor[(12, 10, 5), float64] */
}

def @func_6954() -> (Tensor[(500), int32], Tensor[(12, 10, 5), float64]) {
  %1395 = fn () -> (Tensor[(500), int32], Tensor[(12, 10, 5), float64]) {
    %1392 = @func_1174() /* ty=(Tensor[(12, 10, 5), bool], Tensor[(10, 10, 5), float32], Tensor[(14, 1, 5), float32], Tensor[(432), float64], Tensor[(12, 10, 5), float32], Tensor[(500), int32]) */;
    %1393 = %1392.5;
    %1394 = @func_2155() /* ty=Tensor[(12, 10, 5), float64] */;
    (%1393, %1394)
  };
  %1395() /* ty=(Tensor[(500), int32], Tensor[(12, 10, 5), float64]) */
}

def @func_14874() -> (Tensor[(12, 6, 5), float64], Tensor[(5, 8, 10), int8], Tensor[(12, 10, 5), float32]) {
  %1396 = cast(meta[relay.Constant][52] /* ty=Tensor[(12, 6, 5), float64] */, dtype="float64") /* ty=Tensor[(12, 6, 5), float64] */;
  %1397 = @func_6863() /* ty=(Tensor[(5, 8, 10), int8],) */;
  %1398 = @func_14588() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %1399 = sqrt(%1396) /* ty=Tensor[(12, 6, 5), float64] */;
  %1400 = %1397.0;
  %1401 = %1398.0;
  (%1399, %1400, %1401)
}

def @func_4773() -> Tensor[(5, 8, 10), bool] {
  @func_4771() /* ty=Tensor[(5, 8, 10), bool] */
}

def @func_12103(%var_12089: Tensor[(5, 5, 14), float32], %var_12090: Tensor[(5, 5, 14), float32]) -> Tensor[(5, 5, 14), float32] {
  %1402 = cast(%var_12090, dtype="float32") /* ty=Tensor[(5, 5, 14), float32] */;
  %1403 = shape_of(%var_12089, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1404 = cast(%var_12089, dtype="float32") /* ty=Tensor[(5, 5, 14), float32] */;
  %1405 = dyn.reshape(%1402, %1403, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1406 = power(%1404, %1405) /* ty=Tensor[(5, 5, 14), float32] */;
  %1407 = cast(%1406, dtype="float32") /* ty=Tensor[(5, 5, 14), float32] */;
  sinh(%1407) /* ty=Tensor[(5, 5, 14), float32] */
}

def @func_6204() -> Tensor[(5, 8, 10), uint16] {
  %1408 = @func_3443() /* ty=(Tensor[(5, 8, 10), uint16], Tensor[(5, 8, 10), int8]) */;
  %1408.0
}

def @func_7169(%var_7168: Tensor[(165), float32]) -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(165), float32]) {
  %1415 = fn (%var_7161: Tensor[(165), float32]) -> (Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(165), float32]) {
    %1409 = @func_5622() /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) */;
    %1410 = cast(%var_7161, dtype="float32") /* ty=Tensor[(165), float32] */;
    %1411 = reshape(%1410, newshape=[165]) /* ty=Tensor[(165), float32] */;
    %1412 = @func_5506(%1411) /* ty=(Tensor[(12, 10, 5), float32], Tensor[(11, 5, 3), float32], Tensor[(165), float64]) */;
    %1413 = %1409.1;
    %1414 = %1412.0;
    (%1413, %1414, %var_7161)
  };
  %1415(%var_7168) /* ty=(Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float32], Tensor[(165), float32]) */
}

def @func_7823() -> (Tensor[(12, 10, 5), bool], Tensor[(12, 10, 5), float64], Tensor[(12, 10, 5), float64]) {
  %1416 = @func_4338() /* ty=(Tensor[(12, 10, 5), bool],) */;
  %1417 = %1416.0;
  %1418 = @func_2155() /* ty=Tensor[(12, 10, 5), float64] */;
  %1419 = @func_2129() /* ty=Tensor[(12, 10, 5), float64] */;
  (%1417, %1418, %1419)
}

def @func_3150() -> (Tensor[(12, 10, 5), float64],) {
  %1422 = fn () -> (Tensor[(12, 10, 5), float64],) {
    %1420 = @func_1243() /* ty=(Tensor[(12, 10, 5), float64],) */;
    %1421 = %1420.0;
    (%1421,)
  };
  %1422() /* ty=(Tensor[(12, 10, 5), float64],) */
}

def @func_12571() -> (Tensor[(12, 10, 5), float32], Tensor[(12, 10, 5), float64]) {
  %1423 = @func_5841() /* ty=(Tensor[(12, 10, 5), float32],) */;
  %1424 = %1423.0;
  %1425 = @func_3503() /* ty=Tensor[(12, 10, 5), float64] */;
  (%1424, %1425)
}

def @func_8437(%var_8419: Tensor[(10, 11, 13), uint32], %var_8420: Tensor[(10, 11, 13), uint32]) -> (Tensor[(10, 11, 13), bool], Tensor[(12, 10, 5), float64]) {
  %1426 = cast(%var_8420, dtype="bool") /* ty=Tensor[(10, 11, 13), bool] */;
  %1427 = shape_of(%var_8419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1428 = cast(%var_8419, dtype="bool") /* ty=Tensor[(10, 11, 13), bool] */;
  %1429 = dyn.reshape(%1426, %1427, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1430 = greater(%1428, %1429) /* ty=Tensor[(10, 11, 13), bool] */;
  %1431 = @func_4219() /* ty=Tensor[(12, 10, 5), float64] */;
  (%1430, %1431)
}

def @func_711() -> (Tensor[(12, 10, 5), float32],) {
  %1434 = fn () -> (Tensor[(12, 10, 5), float32],) {
    %1432 = @func_614() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %1433 = %1432.0;
    (%1433,)
  };
  %1434() /* ty=(Tensor[(12, 10, 5), float32],) */
}

def @func_4573() -> Tensor[(12, 10, 5), float64] {
  %1435 = fn () -> Tensor[(12, 10, 5), float64] {
    @func_3463() /* ty=Tensor[(12, 10, 5), float64] */
  };
  %1435() /* ty=Tensor[(12, 10, 5), float64] */
}

def @func_6671() -> Tensor[(12, 10, 5), float32] {
  %1437 = fn () -> Tensor[(12, 10, 5), float32] {
    %1436 = @func_1230() /* ty=(Tensor[(12, 10, 5), float32],) */;
    %1436.0
  };
  %1437() /* ty=Tensor[(12, 10, 5), float32] */
}

def @func_10280() -> (Tensor[(12, 10, 5), bool],) {
  %1439 = fn () -> (Tensor[(12, 10, 5), bool],) {
    %1438 = @func_1618() /* ty=Tensor[(12, 10, 5), bool] */;
    (%1438,)
  };
  %1439() /* ty=(Tensor[(12, 10, 5), bool],) */
}

def @func_3829() -> Tensor[(5, 8, 10), int8] {
  @func_3827() /* ty=Tensor[(5, 8, 10), int8] */
}

def @func_12929() -> Tensor[(12, 10, 5), float64] {
  @func_12927() /* ty=Tensor[(12, 10, 5), float64] */
}

def @func_8933(%var_8928: bool) -> (Tensor[(12, 10, 5), bool], Tensor[(7, 13, 14), bool], bool) {
  %1440 = @func_4085() /* ty=(Tensor[(12, 10, 5), bool],) */;
  %1441 = cast(%var_8928, dtype="bool") /* ty=bool */;
  %1442 = reshape(%1441, newshape=[]) /* ty=bool */;
  %1443 = @func_3261(%1442) /* ty=(Tensor[(7, 13, 14), bool],) */;
  %1444 = %1440.0;
  %1445 = %1443.0;
  (%1444, %1445, %var_8928)
}

def @func_12244(%var_12233: Tensor[(12, 16, 11), int16], %var_12234: Tensor[(12, 16, 11), int16]) -> (Tensor[(12, 16, 11), int16],) {
  %1446 = cast(%var_12234, dtype="int16") /* ty=Tensor[(12, 16, 11), int16] */;
  %1447 = shape_of(%var_12233, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1448 = cast(%var_12233, dtype="int16") /* ty=Tensor[(12, 16, 11), int16] */;
  %1449 = dyn.reshape(%1446, %1447, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1450 = left_shift(%1448, %1449) /* ty=Tensor[(12, 16, 11), int16] */;
  (%1450,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen400/build/output.py", line 5454, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:14:06] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

