==========mod==========
#[version = "0.0.5"]
def @func_14766() -> float64 {
  %0 = @func_10577() /* ty=(float64, float64) */;
  %0.1
}

def @func_5946() -> (Tensor[(280), int64], float64) {
  %1 = @func_4216() /* ty=(Tensor[(280), int64], Tensor[(280), int64], float64, float64) */;
  %2 = %1.0;
  %3 = @func_5180() /* ty=float64 */;
  (%2, %3)
}

def @func_11807() -> (float64,) {
  %4 = @func_9533() /* ty=float64 */;
  (%4,)
}

def @func_3919() -> float64 {
  @func_2198() /* ty=float64 */
}

def @func_8613() -> (float64,) {
  %5 = @func_7236() /* ty=(float64, Tensor[(3, 4, 3), float32]) */;
  %6 = %5.0;
  (%6,)
}

def @func_8870() -> (Tensor[(280), int64], float64, float64) {
  %7 = @func_7087() /* ty=(float64,) */;
  %8 = @func_3267() /* ty=Tensor[(280), int64] */;
  %9 = @func_2198() /* ty=float64 */;
  %10 = %7.0;
  (%8, %9, %10)
}

def @func_11350() -> (float64, float64) {
  %11 = @func_2514() /* ty=float64 */;
  %12 = @func_2198() /* ty=float64 */;
  (%11, %12)
}

def @func_15282() -> (float64, Tensor[(36), float32], float64, Tensor[(3, 4, 3), float32]) {
  %13 = @func_3106() /* ty=(Tensor[(36), float32], float64) */;
  %14 = @func_4618() /* ty=(float64, float64) */;
  %15 = @func_5676() /* ty=float64 */;
  %16 = %13.0;
  %17 = %14.1;
  %18 = @func_9843() /* ty=Tensor[(3, 4, 3), float32] */;
  (%15, %16, %17, %18)
}

def @func_8896() -> (float64, float64) {
  %19 = @func_2909() /* ty=(float64, float64) */;
  %20 = @func_4878() /* ty=float64 */;
  %21 = %19.0;
  (%20, %21)
}

def @func_10641() -> (Tensor[(3, 4, 3), float32], Tensor[(280), int64], Tensor[(45), float64], Tensor[(280), int64], Tensor[(280), int64]) {
  %22 = @func_7570() /* ty=(Tensor[(3, 4, 3), float32], float64, float64, Tensor[(280), int64]) */;
  %23 = cast(meta[relay.Constant][0] /* ty=Tensor[(45), float64] */, dtype="float64") /* ty=Tensor[(45), float64] */;
  %24 = reshape(%23, newshape=[1, 9, 5]) /* ty=Tensor[(1, 9, 5), float64] */;
  %25 = @func_4278(%24) /* ty=(Tensor[(1, 9, 5), float64], Tensor[(280), int64]) */;
  %26 = %25.1;
  %27 = cast(%26, dtype="int64") /* ty=Tensor[(280), int64] */;
  %28 = reshape(%27, newshape=[280]) /* ty=Tensor[(280), int64] */;
  %29 = @func_2069(%28) /* ty=(Tensor[(3, 4, 3), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64], Tensor[(18, 2), float64]) */;
  %30 = @func_8533() /* ty=(float64, Tensor[(280), int64]) */;
  %31 = %22.0;
  %32 = %29.2;
  %33 = %30.1;
  (%31, %26, meta[relay.Constant][0] /* ty=Tensor[(45), float64] */, %32, %33)
}

def @func_12040() -> Tensor[(9, 8, 16), float32] {
  @func_11406() /* ty=Tensor[(9, 8, 16), float32] */
}

def @func_11867() -> (float64, float64) {
  %34 = @func_10765() /* ty=(float64, float64, float64) */;
  %35 = %34.1;
  %36 = @func_8420() /* ty=float64 */;
  (%35, %36)
}

def @func_13491() -> (Tensor[(280), int64], Tensor[(280), int64], float64, Tensor[(36), float32]) {
  %37 = cast(meta[relay.Constant][1] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %38 = reshape(%37, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %39 = @func_12825(%38) /* ty=(Tensor[(11, 13, 7), float32], float64, Tensor[(16, 15, 8), uint64], Tensor[(36), float32]) */;
  %40 = @func_4019() /* ty=Tensor[(280), int64] */;
  %41 = @func_3267() /* ty=Tensor[(280), int64] */;
  %42 = %39.1;
  (%40, %41, %42, meta[relay.Constant][1] /* ty=Tensor[(36), float32] */)
}

def @func_11317() -> float64 {
  %43 = @func_5577() /* ty=(float64,) */;
  %43.0
}

def @func_7284(%var_7278: Tensor[(9, 8, 6), float64], %var_7279: Tensor[(9, 8, 6), float64]) -> (Tensor[(9, 8, 6), float64],) {
  %44 = cast(%var_7279, dtype="float64") /* ty=Tensor[(9, 8, 6), float64] */;
  %45 = shape_of(%var_7278, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(%var_7278, dtype="float64") /* ty=Tensor[(9, 8, 6), float64] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %48 = floor_mod(%46, %47) /* ty=Tensor[(9, 8, 6), float64] */;
  (%48,)
}

def @func_11661() -> (float64, Tensor[(280), int64]) {
  %49 = @func_8533() /* ty=(float64, Tensor[(280), int64]) */;
  %50 = @func_4878() /* ty=float64 */;
  %51 = %49.1;
  (%50, %51)
}

def @func_3378(%var_3351: Tensor[(1, 36), float32]) -> (float64, Tensor[(16, 15, 8), uint64], Tensor[(?, 36), float64], Tensor[(16, 15, 8), uint64]) {
  %52 = @func_2968() /* ty=(float64, float64) */;
  %53 = cast(%var_3351, dtype="float32") /* ty=Tensor[(1, 36), float32] */;
  %54 = reshape(%53, newshape=[18, 2]) /* ty=Tensor[(18, 2), float32] */;
  %55 = @func_1942(%54) /* ty=(Tensor[(18, 2), float32], Tensor[(16, 15, 8), uint64]) */;
  %56 = cast(%var_3351, dtype="float64") /* ty=Tensor[(1, 36), float64] */;
  %57 = atanh(%56) /* ty=Tensor[(1, 36), float64] */;
  %58 = cast(%var_3351, dtype="float64") /* ty=Tensor[(1, 36), float64] */;
  %59 = shape_of(%57, dtype="int32") /* ty=Tensor[(2), int32] */;
  %60 = cast(%57, dtype="float64") /* ty=Tensor[(1, 36), float64] */;
  %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %62 = cast(%57, dtype="float32") /* ty=Tensor[(1, 36), float32] */;
  %63 = reshape(%62, newshape=[18, 2]) /* ty=Tensor[(18, 2), float32] */;
  %64 = @func_1942(%63) /* ty=(Tensor[(18, 2), float32], Tensor[(16, 15, 8), uint64]) */;
  %65 = %52.1;
  %66 = %55.1;
  %67 = divide(%60, %61) /* ty=Tensor[(?, 36), float64] */;
  %68 = %64.1;
  (%65, %66, %67, %68)
}

def @func_15543() -> (float64,) {
  %69 = @func_2353() /* ty=(float64,) */;
  %70 = %69.0;
  (%70,)
}

def @func_8179() -> (float64, Tensor[(280), int64]) {
  %71 = @func_6577() /* ty=(Tensor[(280), int64],) */;
  %72 = @func_6547() /* ty=float64 */;
  %73 = %71.0;
  (%72, %73)
}

def @func_15303() -> (Tensor[(11, 13, 7), float32],) {
  %74 = @func_11973() /* ty=(float64, Tensor[(11, 13, 7), float32]) */;
  %75 = %74.1;
  (%75,)
}

def @func_4981(%var_4978: Tensor[(36, 1), float32]) -> (Tensor[(280), int64], Tensor[(3, 4, 3), float32], Tensor[(36, 1), float32]) {
  %76 = @func_4080() /* ty=(Tensor[(280), int64],) */;
  %77 = cast(%var_4978, dtype="float32") /* ty=Tensor[(36, 1), float32] */;
  %78 = reshape(%77, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float32] */;
  %79 = %76.0;
  %80 = @func_111(%78) /* ty=Tensor[(3, 4, 3), float32] */;
  (%79, %80, %var_4978)
}

def @func_9016() -> (Tensor[(280), int64],) {
  %81 = @func_6892() /* ty=(Tensor[(280), int64],) */;
  %82 = %81.0;
  (%82,)
}

def @func_6668(%var_6625: Tensor[(9, 2, 4), float64]) -> (Tensor[(9, 2, 4), int64], float64, float64) {
  %83 = @func_3509() /* ty=float64 */;
  %84 = cast(%83, dtype="uint8") /* ty=uint8 */;
  %85 = cast(%var_6625, dtype="uint8") /* ty=Tensor[(9, 2, 4), uint8] */;
  %86 = maximum(%84, %85) /* ty=Tensor[(9, 2, 4), uint8] */;
  %87 = cast(%86, dtype="int64") /* ty=Tensor[(9, 2, 4), int64] */;
  %88 = shape_of(%var_6625, dtype="int32") /* ty=Tensor[(3), int32] */;
  %89 = cast(%var_6625, dtype="int64") /* ty=Tensor[(9, 2, 4), int64] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %91 = @func_3263() /* ty=(Tensor[(280), int64], float64, Tensor[(36), float32], Tensor[(3, 4, 3), float32], float64, float64) */;
  %92 = @func_4136() /* ty=(float64, float64) */;
  %93 = minimum(%89, %90) /* ty=Tensor[(9, 2, 4), int64] */;
  %94 = %91.1;
  %95 = %92.1;
  (%93, %94, %95)
}

def @func_8429() -> float64 {
  @func_5676() /* ty=float64 */
}

def @func_5934() -> (float64, Tensor[(9, 8, 16), float32], Tensor[(9, 8, 16), bool], Tensor[(36), float32]) {
  %96 = @func_3752() /* ty=(Tensor[(9, 8, 16), float32],) */;
  %97 = %96.0;
  %98 = cast(%97, dtype="float64") /* ty=Tensor[(9, 8, 16), float64] */;
  %99 = atanh(%98) /* ty=Tensor[(9, 8, 16), float64] */;
  %100 = cast(%99, dtype="float32") /* ty=Tensor[(9, 8, 16), float32] */;
  %101 = cast(%99, dtype="float32") /* ty=Tensor[(9, 8, 16), float32] */;
  %102 = log2(%101) /* ty=Tensor[(9, 8, 16), float32] */;
  %103 = cast(%102, dtype="float32") /* ty=Tensor[(9, 8, 16), float32] */;
  %104 = shape_of(%99, dtype="int32") /* ty=Tensor[(3), int32] */;
  %105 = cast(%99, dtype="float32") /* ty=Tensor[(9, 8, 16), float32] */;
  %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %107 = floor_mod(%105, %106) /* ty=Tensor[(9, 8, 16), float32] */;
  %108 = cast(%99, dtype="bool") /* ty=Tensor[(9, 8, 16), bool] */;
  %109 = shape_of(%107, dtype="int32") /* ty=Tensor[(3), int32] */;
  %110 = cast(%107, dtype="bool") /* ty=Tensor[(9, 8, 16), bool] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %112 = @func_2936() /* ty=(float64, Tensor[(3, 4, 3), float32], Tensor[(36), float32]) */;
  %113 = @func_3187() /* ty=float64 */;
  %114 = log10(%100) /* ty=Tensor[(9, 8, 16), float32] */;
  %115 = greater(%110, %111) /* ty=Tensor[(9, 8, 16), bool] */;
  %116 = %112.2;
  (%113, %114, %115, %116)
}

def @func_10230() -> float64 {
  %117 = @func_6444() /* ty=(float64, Tensor[(280), int64], float64) */;
  %117.2
}

def @func_9677() -> (float64, float64) {
  %118 = @func_4699() /* ty=(float64,) */;
  %119 = @func_6925() /* ty=(float64,) */;
  %120 = %118.0;
  %121 = %119.0;
  (%120, %121)
}

def @func_8218() -> (Tensor[(280), int64], Tensor[(11, 13, 7), float32]) {
  %122 = @func_6149() /* ty=(Tensor[(280), int64],) */;
  %123 = @func_4772() /* ty=(Tensor[(3, 4, 3), float32], Tensor[(11, 13, 7), float32], Tensor[(1001), float64]) */;
  %124 = %122.0;
  %125 = %123.1;
  (%124, %125)
}

def @func_6444() -> (float64, Tensor[(280), int64], float64) {
  %126 = @func_3045() /* ty=(float64, float64, float64) */;
  %127 = @func_4452() /* ty=(float64,) */;
  %128 = %126.2;
  %129 = @func_3267() /* ty=Tensor[(280), int64] */;
  %130 = %127.0;
  (%128, %129, %130)
}

def @func_8769() -> (float64,) {
  %131 = @func_4216() /* ty=(Tensor[(280), int64], Tensor[(280), int64], float64, float64) */;
  %132 = %131.2;
  (%132,)
}

def @func_5417() -> (Tensor[(280), int64], float64) {
  %133 = @func_4394() /* ty=(Tensor[(280), int64],) */;
  %134 = @func_3445() /* ty=(float64, float64, float64, float64, float64) */;
  %135 = %133.0;
  %136 = %134.4;
  (%135, %136)
}

def @func_7298(%var_7290: Tensor[(2, 2, 13), float64]) -> Tensor[(2, 2, 13), float64] {
  %137 = cast(%var_7290, dtype="float64") /* ty=Tensor[(2, 2, 13), float64] */;
  erf(%137) /* ty=Tensor[(2, 2, 13), float64] */
}

def @func_4555() -> float64 {
  @func_2697() /* ty=float64 */
}

def @func_4957(%var_4921: Tensor[(45), float64], %var_4929: Tensor[(143, 1), float64]) -> (Tensor[(280), int64], Tensor[(3, 4, 3), float32], Tensor[(?, 13, 11), bool], Tensor[(143, 1), float64], Tensor[(?, 9, 5), bool], float64, float64, Tensor[(3, 4, 3), float32]) {
  %138 = cast(%var_4929, dtype="float64") /* ty=Tensor[(143, 1), float64] */;
  %139 = reshape(%138, newshape=[1, 13, 11]) /* ty=Tensor[(1, 13, 11), float64] */;
  %140 = @func_3845(%139) /* ty=(Tensor[(?, 13, 11), bool], Tensor[(3, 4, 3), float32], Tensor[(36), float32]) */;
  %141 = cast(%var_4921, dtype="float64") /* ty=Tensor[(45), float64] */;
  %142 = reshape(%141, newshape=[1, 9, 5]) /* ty=Tensor[(1, 9, 5), float64] */;
  %143 = @func_4278(%142) /* ty=(Tensor[(1, 9, 5), float64], Tensor[(280), int64]) */;
  %144 = %143.0;
  %145 = cast(%var_4921, dtype="bool") /* ty=Tensor[(45), bool] */;
  %146 = shape_of(%144, dtype="int32") /* ty=Tensor[(3), int32] */;
  %147 = cast(%144, dtype="bool") /* ty=Tensor[(1, 9, 5), bool] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %149 = @func_3263() /* ty=(Tensor[(280), int64], float64, Tensor[(36), float32], Tensor[(3, 4, 3), float32], float64, float64) */;
  %150 = @func_4019() /* ty=Tensor[(280), int64] */;
  %151 = @func_4409() /* ty=Tensor[(3, 4, 3), float32] */;
  %152 = %140.0;
  %153 = greater(%147, %148) /* ty=Tensor[(?, 9, 5), bool] */;
  %154 = @func_3800() /* ty=float64 */;
  %155 = @func_3310() /* ty=float64 */;
  %156 = %149.3;
  (%150, %151, %152, %var_4929, %153, %154, %155, %156)
}

def @func_13445() -> Tensor[(280), int64] {
  %157 = @func_6149() /* ty=(Tensor[(280), int64],) */;
  %157.0
}

def @func_6149() -> (Tensor[(280), int64],) {
  %158 = @func_4394() /* ty=(Tensor[(280), int64],) */;
  %159 = %158.0;
  (%159,)
}

def @func_9735() -> float64 {
  %160 = @func_5577() /* ty=(float64,) */;
  %160.0
}

def @func_6281() -> (float64, Tensor[(9, 8, 16), float32], float64) {
  %161 = @func_3752() /* ty=(Tensor[(9, 8, 16), float32],) */;
  %162 = @func_2475() /* ty=float64 */;
  %163 = %161.0;
  %164 = @func_2726() /* ty=float64 */;
  (%162, %163, %164)
}

def @func_16344() -> (Tensor[(9, 8, 16), float32],) {
  %165 = @func_12268() /* ty=Tensor[(9, 8, 16), float32] */;
  (%165,)
}

def @func_4772() -> (Tensor[(3, 4, 3), float32], Tensor[(11, 13, 7), float32], Tensor[(1001), float64]) {
  %166 = cast(meta[relay.Constant][2] /* ty=Tensor[(1001), float64] */, dtype="float64") /* ty=Tensor[(1001), float64] */;
  %167 = reshape(%166, newshape=[11, 13, 7]) /* ty=Tensor[(11, 13, 7), float64] */;
  %168 = @func_4739(%167) /* ty=(Tensor[(11, 13, 7), float32], Tensor[(3, 4, 3), float32]) */;
  %169 = @func_4409() /* ty=Tensor[(3, 4, 3), float32] */;
  %170 = %168.0;
  (%169, %170, meta[relay.Constant][2] /* ty=Tensor[(1001), float64] */)
}

def @func_3187() -> float64 {
  %171 = @func_2968() /* ty=(float64, float64) */;
  %171.1
}

def @func_10998(%var_10967: Tensor[(3, 4, 3), float32]) -> (Tensor[(3, 4, 3), bool], Tensor[(280), int64]) {
  %172 = @func_9843() /* ty=Tensor[(3, 4, 3), float32] */;
  %173 = cast(%var_10967, dtype="bool") /* ty=Tensor[(3, 4, 3), bool] */;
  %174 = shape_of(%172, dtype="int32") /* ty=Tensor[(3), int32] */;
  %175 = cast(%172, dtype="bool") /* ty=Tensor[(3, 4, 3), bool] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %177 = @func_9016() /* ty=(Tensor[(280), int64],) */;
  %178 = equal(%175, %176) /* ty=Tensor[(3, 4, 3), bool] */;
  %179 = %177.0;
  (%178, %179)
}

def @func_16385() -> (float64, float64) {
  %180 = @func_10765() /* ty=(float64, float64, float64) */;
  %181 = @func_3045() /* ty=(float64, float64, float64) */;
  %182 = %180.2;
  %183 = %181.1;
  (%182, %183)
}

def @func_13982(%var_13948: Tensor[(11, 6, 14), bool]) -> (Tensor[(11, 6, 14), bool], float64, float64) {
  %184 = cast(meta[relay.Constant][3] /* ty=Tensor[(11, 6, 14), bool] */, dtype="bool") /* ty=Tensor[(11, 6, 14), bool] */;
  %185 = shape_of(%var_13948, dtype="int32") /* ty=Tensor[(3), int32] */;
  %186 = cast(%var_13948, dtype="bool") /* ty=Tensor[(11, 6, 14), bool] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %188 = @func_2968() /* ty=(float64, float64) */;
  %189 = logical_and(%186, %187) /* ty=Tensor[(11, 6, 14), bool] */;
  %190 = %188.0;
  %191 = @func_12142() /* ty=float64 */;
  (%189, %190, %191)
}

def @func_2626(%var_2619: Tensor[(14, 10, 11), uint16], %var_2620: Tensor[(14, 10, 11), uint16]) -> (Tensor[(14, 10, 11), uint16],) {
  %192 = cast(%var_2620, dtype="uint16") /* ty=Tensor[(14, 10, 11), uint16] */;
  %193 = shape_of(%var_2619, dtype="int32") /* ty=Tensor[(3), int32] */;
  %194 = cast(%var_2619, dtype="uint16") /* ty=Tensor[(14, 10, 11), uint16] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %196 = maximum(%194, %195) /* ty=Tensor[(14, 10, 11), uint16] */;
  (%196,)
}

def @func_16174() -> (float64, float64) {
  %197 = @func_5676() /* ty=float64 */;
  %198 = @func_2697() /* ty=float64 */;
  (%197, %198)
}

def @func_7383() -> (float64, Tensor[(36, 1), float32], Tensor[(36), float32]) {
  %199 = @func_4843() /* ty=(float64, float64, Tensor[(36), float32], Tensor[(280), int64], Tensor[(280), int64], float64) */;
  %200 = cast(meta[relay.Constant][4] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %201 = reshape(%200, newshape=[36, 1]) /* ty=Tensor[(36, 1), float32] */;
  %202 = @func_4981(%201) /* ty=(Tensor[(280), int64], Tensor[(3, 4, 3), float32], Tensor[(36, 1), float32]) */;
  %203 = %199.0;
  %204 = %202.2;
  (%203, %204, meta[relay.Constant][4] /* ty=Tensor[(36), float32] */)
}

def @func_15004(%var_14992: bool) -> Tensor[(13, 1, 12), bool] {
  %205 = cast(%var_14992, dtype="bool") /* ty=bool */;
  %206 = cast(meta[relay.Constant][5] /* ty=Tensor[(13, 1, 12), bool] */, dtype="bool") /* ty=Tensor[(13, 1, 12), bool] */;
  logical_and(%205, %206) /* ty=Tensor[(13, 1, 12), bool] */
}

def @func_9533() -> float64 {
  %207 = @func_8816() /* ty=(float64, float64, float64) */;
  %207.1
}

def @func_11495() -> (float64, Tensor[(3, 4, 3), float32]) {
  %208 = @func_6925() /* ty=(float64,) */;
  %209 = %208.0;
  %210 = @func_4409() /* ty=Tensor[(3, 4, 3), float32] */;
  (%209, %210)
}

def @func_5646() -> float64 {
  %211 = @func_5538() /* ty=(float64,) */;
  %211.0
}

def @func_14655() -> (Tensor[(280), int64],) {
  %212 = @func_13445() /* ty=Tensor[(280), int64] */;
  (%212,)
}

def @func_4843() -> (float64, float64, Tensor[(36), float32], Tensor[(280), int64], Tensor[(280), int64], float64) {
  %213 = cast(meta[relay.Constant][6] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %214 = reshape(%213, newshape=[1, 36]) /* ty=Tensor[(1, 36), float32] */;
  %215 = @func_3378(%214) /* ty=(float64, Tensor[(16, 15, 8), uint64], Tensor[(?, 36), float64], Tensor[(16, 15, 8), uint64]) */;
  %216 = @func_4080() /* ty=(Tensor[(280), int64],) */;
  %217 = @func_4080() /* ty=(Tensor[(280), int64],) */;
  %218 = @func_2936() /* ty=(float64, Tensor[(3, 4, 3), float32], Tensor[(36), float32]) */;
  %219 = @func_2697() /* ty=float64 */;
  %220 = %215.0;
  %221 = %216.0;
  %222 = %217.0;
  %223 = %218.0;
  (%219, %220, meta[relay.Constant][6] /* ty=Tensor[(36), float32] */, %221, %222, %223)
}

def @func_15909(%var_15905: Tensor[(5, 15, 10), float64]) -> Tensor[(5, 15, 10), float64] {
  %224 = cast(%var_15905, dtype="float64") /* ty=Tensor[(5, 15, 10), float64] */;
  exp(%224) /* ty=Tensor[(5, 15, 10), float64] */
}

def @func_3142() -> (float64, float64) {
  %225 = @func_2851() /* ty=(float64,) */;
  %226 = %225.0;
  %227 = @func_2198() /* ty=float64 */;
  (%226, %227)
}

def @func_6925() -> (float64,) {
  %228 = @func_4699() /* ty=(float64,) */;
  %229 = %228.0;
  (%229,)
}

def @func_11973() -> (float64, Tensor[(11, 13, 7), float32]) {
  %230 = @func_11867() /* ty=(float64, float64) */;
  %231 = @func_8218() /* ty=(Tensor[(280), int64], Tensor[(11, 13, 7), float32]) */;
  %232 = %230.0;
  %233 = %231.1;
  (%232, %233)
}

def @func_3179() -> (Tensor[(3, 4, 3), float32],) {
  %234 = @func_1837() /* ty=(Tensor[(13, 11, 13), bool], Tensor[(3, 4, 3), float32], float64, Tensor[(18, 2), float32], Tensor[(280), int64], Tensor[(36), float32]) */;
  %235 = %234.1;
  (%235,)
}

def @func_10813(%var_10802: float64, %var_10803: Tensor[(36), float32]) -> (Tensor[(280), int64], Tensor[(280), int64], float64, Tensor[(36), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64]) {
  %236 = cast(%var_10802, dtype="float64") /* ty=float64 */;
  %237 = cast(%var_10803, dtype="float32") /* ty=Tensor[(36), float32] */;
  %238 = @func_4019() /* ty=Tensor[(280), int64] */;
  %239 = cast(%238, dtype="int64") /* ty=Tensor[(280), int64] */;
  %240 = reshape(%236, newshape=[]) /* ty=float64 */;
  %241 = reshape(%237, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %242 = reshape(%239, newshape=[280]) /* ty=Tensor[(280), int64] */;
  %243 = @func_1178(%240, %241, %242) /* ty=(Tensor[(8, 6, 14), float64], Tensor[(3, 4, 3), float32], Tensor[(36), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64], Tensor[(14, 4, 5), int64]) */;
  %244 = cast(%var_10802, dtype="float32") /* ty=float32 */;
  %245 = cast(%var_10803, dtype="float32") /* ty=Tensor[(36), float32] */;
  %246 = %243.4;
  %247 = cast(%246, dtype="int64") /* ty=Tensor[(280), int64] */;
  %248 = reshape(%244, newshape=[]) /* ty=float32 */;
  %249 = reshape(%245, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %250 = reshape(%247, newshape=[280]) /* ty=Tensor[(280), int64] */;
  %251 = @func_1415(%248, %249, %250) /* ty=(Tensor[(5, 2, 12), float32], Tensor[(14, 4, 5), float64], Tensor[(36), float32], Tensor[(280), int64]) */;
  %252 = @func_6577() /* ty=(Tensor[(280), int64],) */;
  %253 = %251.1;
  %254 = %252.0;
  (%238, %246, %var_10802, %var_10803, %253, %254)
}

def @func_3263() -> (Tensor[(280), int64], float64, Tensor[(36), float32], Tensor[(3, 4, 3), float32], float64, float64) {
  %255 = @func_1837() /* ty=(Tensor[(13, 11, 13), bool], Tensor[(3, 4, 3), float32], float64, Tensor[(18, 2), float32], Tensor[(280), int64], Tensor[(36), float32]) */;
  %256 = cast(meta[relay.Constant][7] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %257 = %255.4;
  %258 = cast(%257, dtype="int64") /* ty=Tensor[(280), int64] */;
  %259 = reshape(%256, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %260 = reshape(%258, newshape=[280]) /* ty=Tensor[(280), int64] */;
  %261 = @func_2267(%259, %260) /* ty=(float64, Tensor[(36), float32], Tensor[(36), float32], Tensor[(280), int64], Tensor[(36), float32]) */;
  %262 = cast(meta[relay.Constant][7] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %263 = reshape(%262, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float32] */;
  %264 = @func_2909() /* ty=(float64, float64) */;
  %265 = %261.0;
  %266 = @func_111(%263) /* ty=Tensor[(3, 4, 3), float32] */;
  %267 = @func_2198() /* ty=float64 */;
  %268 = %264.1;
  (%257, %265, meta[relay.Constant][7] /* ty=Tensor[(36), float32] */, %266, %267, %268)
}

def @func_5225(%var_5217: Tensor[(1, 9, 11), float64]) -> (Tensor[(1, 9, 11), int16],) {
  %269 = @func_2353() /* ty=(float64,) */;
  %270 = %269.0;
  %271 = cast(%270, dtype="int16") /* ty=int16 */;
  %272 = cast(%var_5217, dtype="int16") /* ty=Tensor[(1, 9, 11), int16] */;
  %273 = bitwise_xor(%271, %272) /* ty=Tensor[(1, 9, 11), int16] */;
  (%273,)
}

def @func_9250(%var_9242: uint32) -> (Tensor[(1120), float64], Tensor[(3, 4, 3), float32], Tensor[(36), float32], Tensor[(5, 10, 7), uint32], uint32, Tensor[(350), uint32]) {
  %274 = @func_4859() /* ty=(float64, float64, Tensor[(10, 7, 16), float64], Tensor[(1120), float64]) */;
  %275 = cast(meta[relay.Constant][8] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %276 = reshape(%275, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float32] */;
  %277 = cast(%var_9242, dtype="uint32") /* ty=uint32 */;
  %278 = cast(meta[relay.Constant][9] /* ty=Tensor[(350), uint32] */, dtype="uint32") /* ty=Tensor[(350), uint32] */;
  %279 = reshape(%277, newshape=[]) /* ty=uint32 */;
  %280 = reshape(%278, newshape=[5, 10, 7]) /* ty=Tensor[(5, 10, 7), uint32] */;
  %281 = @func_5280(%279, %280) /* ty=(Tensor[(5, 10, 7), uint32],) */;
  %282 = %274.3;
  %283 = @func_111(%276) /* ty=Tensor[(3, 4, 3), float32] */;
  %284 = %281.0;
  (%282, %283, meta[relay.Constant][8] /* ty=Tensor[(36), float32] */, %284, %var_9242, meta[relay.Constant][9] /* ty=Tensor[(350), uint32] */)
}

def @func_5538() -> (float64,) {
  %285 = @func_2198() /* ty=float64 */;
  (%285,)
}

def @func_6547() -> float64 {
  @func_5676() /* ty=float64 */
}

def @func_7087() -> (float64,) {
  %286 = @func_6034() /* ty=(float64, float64) */;
  %287 = %286.0;
  (%287,)
}

def @func_12945() -> (float64,) {
  %288 = @func_3445() /* ty=(float64, float64, float64, float64, float64) */;
  %289 = %288.4;
  (%289,)
}

def @func_8927() -> (float64,) {
  %290 = @func_6925() /* ty=(float64,) */;
  %291 = %290.0;
  (%291,)
}

def @func_4739(%var_4727: Tensor[(11, 13, 7), float64]) -> (Tensor[(11, 13, 7), float32], Tensor[(3, 4, 3), float32]) {
  %292 = @func_2198() /* ty=float64 */;
  %293 = cast(%292, dtype="float32") /* ty=float32 */;
  %294 = cast(%var_4727, dtype="float32") /* ty=Tensor[(11, 13, 7), float32] */;
  %295 = @func_3179() /* ty=(Tensor[(3, 4, 3), float32],) */;
  %296 = maximum(%293, %294) /* ty=Tensor[(11, 13, 7), float32] */;
  %297 = %295.0;
  (%296, %297)
}

def @func_9362() -> (float64, Tensor[(11, 13, 7), float32]) {
  %298 = @func_4772() /* ty=(Tensor[(3, 4, 3), float32], Tensor[(11, 13, 7), float32], Tensor[(1001), float64]) */;
  %299 = @func_3187() /* ty=float64 */;
  %300 = %298.1;
  (%299, %300)
}

def @func_9921() -> float64 {
  %301 = @func_8927() /* ty=(float64,) */;
  %301.0
}

def @func_7727() -> float64 {
  %302 = @func_3106() /* ty=(Tensor[(36), float32], float64) */;
  %302.1
}

def @func_2544() -> (Tensor[(280), int64],) {
  %303 = @func_1837() /* ty=(Tensor[(13, 11, 13), bool], Tensor[(3, 4, 3), float32], float64, Tensor[(18, 2), float32], Tensor[(280), int64], Tensor[(36), float32]) */;
  %304 = %303.4;
  (%304,)
}

def @func_13325() -> (float64, float64) {
  %305 = @func_3142() /* ty=(float64, float64) */;
  %306 = @func_7816() /* ty=(float64, float64) */;
  %307 = %305.1;
  %308 = %306.1;
  (%307, %308)
}

def @func_14847() -> (float64, Tensor[(280), int64], float64) {
  %309 = @func_12142() /* ty=float64 */;
  %310 = @func_3267() /* ty=Tensor[(280), int64] */;
  %311 = @func_2514() /* ty=float64 */;
  (%309, %310, %311)
}

def @func_3845(%var_3824: Tensor[(1, 13, 11), float64]) -> (Tensor[(?, 13, 11), bool], Tensor[(3, 4, 3), float32], Tensor[(36), float32]) {
  %312 = @func_3045() /* ty=(float64, float64, float64) */;
  %313 = %312.0;
  %314 = cast(%313, dtype="int32") /* ty=int32 */;
  %315 = cast(%var_3824, dtype="int32") /* ty=Tensor[(1, 13, 11), int32] */;
  %316 = add(%314, %315) /* ty=Tensor[(1, 13, 11), int32] */;
  %317 = cast(%var_3824, dtype="bool") /* ty=Tensor[(1, 13, 11), bool] */;
  %318 = shape_of(%316, dtype="int32") /* ty=Tensor[(3), int32] */;
  %319 = cast(%316, dtype="bool") /* ty=Tensor[(1, 13, 11), bool] */;
  %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %321 = cast(meta[relay.Constant][10] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %322 = reshape(%321, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float32] */;
  %323 = logical_and(%319, %320) /* ty=Tensor[(?, 13, 11), bool] */;
  %324 = @func_111(%322) /* ty=Tensor[(3, 4, 3), float32] */;
  (%323, %324, meta[relay.Constant][10] /* ty=Tensor[(36), float32] */)
}

def @func_3106() -> (Tensor[(36), float32], float64) {
  %325 = @func_2936() /* ty=(float64, Tensor[(3, 4, 3), float32], Tensor[(36), float32]) */;
  %326 = @func_2909() /* ty=(float64, float64) */;
  %327 = %325.2;
  %328 = %326.1;
  (%327, %328)
}

def @func_2936() -> (float64, Tensor[(3, 4, 3), float32], Tensor[(36), float32]) {
  %329 = cast(meta[relay.Constant][11] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %330 = reshape(%329, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float32] */;
  %331 = @func_2198() /* ty=float64 */;
  %332 = @func_111(%330) /* ty=Tensor[(3, 4, 3), float32] */;
  (%331, %332, meta[relay.Constant][11] /* ty=Tensor[(36), float32] */)
}

def @func_6056() -> float64 {
  %333 = @func_3445() /* ty=(float64, float64, float64, float64, float64) */;
  %333.1
}

def @func_6778() -> (Tensor[(8, 13, 12), bool],) {
  %334 = @func_5345() /* ty=(Tensor[(8, 13, 12), bool], Tensor[(8, 13, 12), bool]) */;
  %335 = %334.1;
  (%335,)
}

def @func_12159() -> (float64,) {
  %336 = @func_4878() /* ty=float64 */;
  (%336,)
}

def @func_11792() -> (float64,) {
  %337 = @func_4699() /* ty=(float64,) */;
  %338 = %337.0;
  (%338,)
}

def @func_16032() -> Tensor[(3, 4, 3), float32] {
  @func_9843() /* ty=Tensor[(3, 4, 3), float32] */
}

def @func_6366(%var_6307: Tensor[(36), float32], %var_6361: Tensor[(1540), uint16]) -> (float64, Tensor[(16, 15, 8), uint64], Tensor[(36), float32], Tensor[(14, 10, 11), uint16], Tensor[(1540), uint16]) {
  %339 = cast(%var_6307, dtype="float32") /* ty=Tensor[(36), float32] */;
  %340 = reshape(%339, newshape=[1, 36]) /* ty=Tensor[(1, 36), float32] */;
  %341 = @func_3378(%340) /* ty=(float64, Tensor[(16, 15, 8), uint64], Tensor[(?, 36), float64], Tensor[(16, 15, 8), uint64]) */;
  %342 = cast(%var_6361, dtype="uint16") /* ty=Tensor[(1540), uint16] */;
  %343 = cast(%var_6361, dtype="uint16") /* ty=Tensor[(1540), uint16] */;
  %344 = reshape(%342, newshape=[14, 10, 11]) /* ty=Tensor[(14, 10, 11), uint16] */;
  %345 = reshape(%343, newshape=[14, 10, 11]) /* ty=Tensor[(14, 10, 11), uint16] */;
  %346 = @func_2626(%344, %345) /* ty=(Tensor[(14, 10, 11), uint16],) */;
  %347 = @func_2726() /* ty=float64 */;
  %348 = %341.1;
  %349 = %346.0;
  (%347, %348, %var_6307, %349, %var_6361)
}

def @func_2267(%var_2248: Tensor[(36), float32], %var_2249: Tensor[(280), int64]) -> (float64, Tensor[(36), float32], Tensor[(36), float32], Tensor[(280), int64], Tensor[(36), float32]) {
  %350 = @func_2198() /* ty=float64 */;
  %351 = cast(%350, dtype="float32") /* ty=float32 */;
  %352 = cast(%var_2248, dtype="float32") /* ty=Tensor[(36), float32] */;
  %353 = cast(%var_2249, dtype="int64") /* ty=Tensor[(280), int64] */;
  %354 = reshape(%351, newshape=[]) /* ty=float32 */;
  %355 = reshape(%352, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %356 = reshape(%353, newshape=[280]) /* ty=Tensor[(280), int64] */;
  %357 = @func_1415(%354, %355, %356) /* ty=(Tensor[(5, 2, 12), float32], Tensor[(14, 4, 5), float64], Tensor[(36), float32], Tensor[(280), int64]) */;
  %358 = cast(%350, dtype="float64") /* ty=float64 */;
  %359 = cast(%var_2248, dtype="float32") /* ty=Tensor[(36), float32] */;
  %360 = cast(%var_2249, dtype="int64") /* ty=Tensor[(280), int64] */;
  %361 = reshape(%358, newshape=[]) /* ty=float64 */;
  %362 = reshape(%359, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %363 = reshape(%360, newshape=[280]) /* ty=Tensor[(280), int64] */;
  %364 = @func_1178(%361, %362, %363) /* ty=(Tensor[(8, 6, 14), float64], Tensor[(3, 4, 3), float32], Tensor[(36), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64], Tensor[(14, 4, 5), int64]) */;
  %365 = %357.2;
  %366 = %364.2;
  (%350, %365, %var_2248, %var_2249, %366)
}

def @func_6564() -> (Tensor[(3, 4, 3), float32],) {
  %367 = @func_1837() /* ty=(Tensor[(13, 11, 13), bool], Tensor[(3, 4, 3), float32], float64, Tensor[(18, 2), float32], Tensor[(280), int64], Tensor[(36), float32]) */;
  %368 = %367.1;
  (%368,)
}

def @func_4019() -> Tensor[(280), int64] {
  @func_3267() /* ty=Tensor[(280), int64] */
}

def @func_14508(%var_14478: Tensor[(36), float32]) -> (float64, Tensor[(960), uint32], Tensor[(36), float32], Tensor[(36), float32], float64, Tensor[(280), int64], Tensor[(16, 15, 4), float64]) {
  %369 = @func_10656() /* ty=(float64,) */;
  %370 = cast(%var_14478, dtype="float32") /* ty=Tensor[(36), float32] */;
  %371 = reshape(%370, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %372 = @func_10432(%371) /* ty=(float64, float64, Tensor[(280), int64], Tensor[(143, 1), float64], Tensor[(36), float32], Tensor[(36), float32]) */;
  %373 = @func_3045() /* ty=(float64, float64, float64) */;
  %374 = cast(meta[relay.Constant][12] /* ty=Tensor[(960), uint32] */, dtype="uint32") /* ty=Tensor[(960), uint32] */;
  %375 = cast(meta[relay.Constant][12] /* ty=Tensor[(960), uint32] */, dtype="uint32") /* ty=Tensor[(960), uint32] */;
  %376 = reshape(%374, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), uint32] */;
  %377 = reshape(%375, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), uint32] */;
  %378 = @func_9080(%376, %377) /* ty=Tensor[(16, 15, 4), uint32] */;
  %379 = cast(%378, dtype="float32") /* ty=Tensor[(16, 15, 4), float32] */;
  %380 = sigmoid(%379) /* ty=Tensor[(16, 15, 4), float32] */;
  %381 = cast(%380, dtype="float64") /* ty=Tensor[(16, 15, 4), float64] */;
  %382 = atan(%381) /* ty=Tensor[(16, 15, 4), float64] */;
  %383 = cast(%382, dtype="float64") /* ty=Tensor[(16, 15, 4), float64] */;
  %384 = %369.0;
  %385 = %372.5;
  %386 = %373.2;
  %387 = @func_3267() /* ty=Tensor[(280), int64] */;
  %388 = rsqrt(%383) /* ty=Tensor[(16, 15, 4), float64] */;
  (%384, meta[relay.Constant][12] /* ty=Tensor[(960), uint32] */, %385, %var_14478, %386, %387, %388)
}

def @func_9080(%var_9061: Tensor[(16, 15, 4), uint32], %var_9062: Tensor[(16, 15, 4), uint32]) -> Tensor[(16, 15, 4), uint32] {
  %389 = cast(%var_9062, dtype="uint32") /* ty=Tensor[(16, 15, 4), uint32] */;
  %390 = shape_of(%var_9061, dtype="int32") /* ty=Tensor[(3), int32] */;
  %391 = cast(%var_9061, dtype="uint32") /* ty=Tensor[(16, 15, 4), uint32] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  logical_xor(%391, %392) /* ty=Tensor[(16, 15, 4), uint32] */
}

def @func_12245() -> (Tensor[(8, 13, 12), bool],) {
  %393 = @func_6778() /* ty=(Tensor[(8, 13, 12), bool],) */;
  %394 = %393.0;
  (%394,)
}

def @func_12550() -> Tensor[(36), float32] {
  %395 = @func_3106() /* ty=(Tensor[(36), float32], float64) */;
  %395.0
}

def @func_11268(%var_11259: Tensor[(15, 6, 4), float32]) -> (Tensor[(15, 6, 4), float64],) {
  %396 = cast(%var_11259, dtype="float32") /* ty=Tensor[(15, 6, 4), float32] */;
  %397 = rsqrt(%396) /* ty=Tensor[(15, 6, 4), float32] */;
  %398 = cast(%397, dtype="float64") /* ty=Tensor[(15, 6, 4), float64] */;
  %399 = acos(%398) /* ty=Tensor[(15, 6, 4), float64] */;
  (%399,)
}

def @func_4878() -> float64 {
  @func_2294() /* ty=float64 */
}

def @func_8533() -> (float64, Tensor[(280), int64]) {
  %400 = @func_5538() /* ty=(float64,) */;
  %401 = %400.0;
  %402 = @func_5240() /* ty=Tensor[(280), int64] */;
  (%401, %402)
}

def @func_7456() -> (float64,) {
  %403 = @func_5538() /* ty=(float64,) */;
  %404 = %403.0;
  (%404,)
}

def @func_11124() -> (float64, Tensor[(280), int64], Tensor[(36), float32], Tensor[(3, 4, 3), float32], Tensor[(?, 36), float64]) {
  %405 = @func_9677() /* ty=(float64, float64) */;
  %406 = cast(meta[relay.Constant][13] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %407 = reshape(%406, newshape=[36, 1]) /* ty=Tensor[(36, 1), float32] */;
  %408 = @func_4981(%407) /* ty=(Tensor[(280), int64], Tensor[(3, 4, 3), float32], Tensor[(36, 1), float32]) */;
  %409 = @func_6564() /* ty=(Tensor[(3, 4, 3), float32],) */;
  %410 = %409.0;
  %411 = cast(%410, dtype="float32") /* ty=Tensor[(3, 4, 3), float32] */;
  %412 = reshape(%411, newshape=[1, 36]) /* ty=Tensor[(1, 36), float32] */;
  %413 = @func_3378(%412) /* ty=(float64, Tensor[(16, 15, 8), uint64], Tensor[(?, 36), float64], Tensor[(16, 15, 8), uint64]) */;
  %414 = %405.1;
  %415 = %408.0;
  %416 = %413.2;
  (%414, %415, meta[relay.Constant][13] /* ty=Tensor[(36), float32] */, %410, %416)
}

def @func_15157() -> float64 {
  @func_6056() /* ty=float64 */
}

def @func_9028() -> float64 {
  %417 = @func_8533() /* ty=(float64, Tensor[(280), int64]) */;
  %417.0
}

def @func_13787() -> (float64, float64, float64, float64) {
  %418 = @func_8816() /* ty=(float64, float64, float64) */;
  %419 = @func_10872() /* ty=(float64,) */;
  %420 = %418.2;
  %421 = @func_10698() /* ty=float64 */;
  %422 = %419.0;
  %423 = @func_10498() /* ty=float64 */;
  (%420, %421, %422, %423)
}

def @func_15183() -> Tensor[(9, 8, 16), float32] {
  @func_12040() /* ty=Tensor[(9, 8, 16), float32] */
}

def @func_14729() -> (float64, Tensor[(?, 36), float32]) {
  %424 = @func_7087() /* ty=(float64,) */;
  %425 = @func_11124() /* ty=(float64, Tensor[(280), int64], Tensor[(36), float32], Tensor[(3, 4, 3), float32], Tensor[(?, 36), float64]) */;
  %426 = %425.4;
  %427 = cast(%426, dtype="float32") /* ty=Tensor[(?, 36), float32] */;
  %428 = acosh(%427) /* ty=Tensor[(?, 36), float32] */;
  %429 = cast(%428, dtype="float32") /* ty=Tensor[(?, 36), float32] */;
  %430 = %424.0;
  %431 = cos(%429) /* ty=Tensor[(?, 36), float32] */;
  (%430, %431)
}

def @func_2448(%var_2419: Tensor[(36), float32]) -> (float64, Tensor[(14, 4, 5), float64], Tensor[(36), float32], Tensor[(280), int64], Tensor[(16, 15, 8), uint64], float64, Tensor[(3, 4, 3), float32]) {
  %432 = @func_2353() /* ty=(float64,) */;
  %433 = %432.0;
  %434 = cast(%433, dtype="float32") /* ty=float32 */;
  %435 = cast(%var_2419, dtype="float32") /* ty=Tensor[(36), float32] */;
  %436 = cast(meta[relay.Constant][14] /* ty=Tensor[(280), int64] */, dtype="int64") /* ty=Tensor[(280), int64] */;
  %437 = reshape(%434, newshape=[]) /* ty=float32 */;
  %438 = reshape(%435, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %439 = reshape(%436, newshape=[280]) /* ty=Tensor[(280), int64] */;
  %440 = @func_1415(%437, %438, %439) /* ty=(Tensor[(5, 2, 12), float32], Tensor[(14, 4, 5), float64], Tensor[(36), float32], Tensor[(280), int64]) */;
  %441 = cast(%var_2419, dtype="float32") /* ty=Tensor[(36), float32] */;
  %442 = reshape(%441, newshape=[18, 2]) /* ty=Tensor[(18, 2), float32] */;
  %443 = @func_1942(%442) /* ty=(Tensor[(18, 2), float32], Tensor[(16, 15, 8), uint64]) */;
  %444 = @func_2353() /* ty=(float64,) */;
  %445 = %440.1;
  %446 = cast(%445, dtype="int64") /* ty=Tensor[(14, 4, 5), int64] */;
  %447 = reshape(%446, newshape=[280]) /* ty=Tensor[(280), int64] */;
  %448 = @func_2069(%447) /* ty=(Tensor[(3, 4, 3), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64], Tensor[(18, 2), float64]) */;
  %449 = %443.1;
  %450 = %444.0;
  %451 = %448.0;
  (%433, %445, %var_2419, meta[relay.Constant][14] /* ty=Tensor[(280), int64] */, %449, %450, %451)
}

def @func_13126() -> (float64,) {
  %452 = @func_7993() /* ty=(float64, float64) */;
  %453 = %452.1;
  (%453,)
}

def @func_4136() -> (float64, float64) {
  %454 = @func_3142() /* ty=(float64, float64) */;
  %455 = @func_3549() /* ty=float64 */;
  %456 = %454.0;
  (%455, %456)
}

def @func_10846() -> (float64, Tensor[(10, 7, 16), float64], Tensor[(1120), float64]) {
  %457 = @func_3142() /* ty=(float64, float64) */;
  %458 = cast(meta[relay.Constant][15] /* ty=Tensor[(1120), float64] */, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %459 = cast(meta[relay.Constant][15] /* ty=Tensor[(1120), float64] */, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %460 = reshape(%458, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), float64] */;
  %461 = reshape(%459, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), float64] */;
  %462 = %457.0;
  %463 = @func_4574(%460, %461) /* ty=Tensor[(10, 7, 16), float64] */;
  (%462, %463, meta[relay.Constant][15] /* ty=Tensor[(1120), float64] */)
}

def @func_4859() -> (float64, float64, Tensor[(10, 7, 16), float64], Tensor[(1120), float64]) {
  %464 = cast(meta[relay.Constant][16] /* ty=Tensor[(1120), float64] */, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %465 = cast(meta[relay.Constant][16] /* ty=Tensor[(1120), float64] */, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %466 = reshape(%464, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), float64] */;
  %467 = reshape(%465, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), float64] */;
  %468 = @func_2294() /* ty=float64 */;
  %469 = @func_3187() /* ty=float64 */;
  %470 = @func_4574(%466, %467) /* ty=Tensor[(10, 7, 16), float64] */;
  (%468, %469, %470, meta[relay.Constant][16] /* ty=Tensor[(1120), float64] */)
}

def @func_8070() -> (float64, float64) {
  %471 = @func_6444() /* ty=(float64, Tensor[(280), int64], float64) */;
  %472 = %471.2;
  %473 = @func_3187() /* ty=float64 */;
  (%472, %473)
}

def @func_8658(%var_8640: Tensor[(9, 13, 13), int32], %var_8641: Tensor[(9, 13, 13), int32]) -> (Tensor[(9, 13, 13), int32], float64) {
  %474 = cast(%var_8641, dtype="int32") /* ty=Tensor[(9, 13, 13), int32] */;
  %475 = shape_of(%var_8640, dtype="int32") /* ty=Tensor[(3), int32] */;
  %476 = cast(%var_8640, dtype="int32") /* ty=Tensor[(9, 13, 13), int32] */;
  %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %478 = @func_8613() /* ty=(float64,) */;
  %479 = subtract(%476, %477) /* ty=Tensor[(9, 13, 13), int32] */;
  %480 = %478.0;
  (%479, %480)
}

def @func_14411() -> (float64,) {
  %481 = @func_5417() /* ty=(Tensor[(280), int64], float64) */;
  %482 = %481.1;
  (%482,)
}

def @func_16449() -> (float64, float64, Tensor[(2, 2, 13), float64], Tensor[(52), float64]) {
  %483 = @func_3445() /* ty=(float64, float64, float64, float64, float64) */;
  %484 = cast(meta[relay.Constant][17] /* ty=Tensor[(52), float64] */, dtype="float64") /* ty=Tensor[(52), float64] */;
  %485 = reshape(%484, newshape=[2, 2, 13]) /* ty=Tensor[(2, 2, 13), float64] */;
  %486 = %483.0;
  %487 = @func_10341() /* ty=float64 */;
  %488 = @func_7298(%485) /* ty=Tensor[(2, 2, 13), float64] */;
  (%486, %487, %488, meta[relay.Constant][17] /* ty=Tensor[(52), float64] */)
}

def @func_7924(%var_7890: Tensor[(12, 4, 1), float64]) -> (float64, Tensor[(12, 4, 1), uint8], float64, Tensor[(3, 4, 3), float32], Tensor[(36), float32]) {
  %489 = @func_2294() /* ty=float64 */;
  %490 = cast(%489, dtype="uint8") /* ty=uint8 */;
  %491 = cast(%var_7890, dtype="uint8") /* ty=Tensor[(12, 4, 1), uint8] */;
  %492 = @func_6034() /* ty=(float64, float64) */;
  %493 = cast(meta[relay.Constant][18] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %494 = reshape(%493, newshape=[36, 1]) /* ty=Tensor[(36, 1), float32] */;
  %495 = @func_4981(%494) /* ty=(Tensor[(280), int64], Tensor[(3, 4, 3), float32], Tensor[(36, 1), float32]) */;
  %496 = @func_4878() /* ty=float64 */;
  %497 = bitwise_or(%490, %491) /* ty=Tensor[(12, 4, 1), uint8] */;
  %498 = %492.0;
  %499 = %495.1;
  (%496, %497, %498, %499, meta[relay.Constant][18] /* ty=Tensor[(36), float32] */)
}

def @func_2697() -> float64 {
  @func_2514() /* ty=float64 */
}

def @func_10523() -> float64 {
  @func_9263() /* ty=float64 */
}

def @func_1837() -> (Tensor[(13, 11, 13), bool], Tensor[(3, 4, 3), float32], float64, Tensor[(18, 2), float32], Tensor[(280), int64], Tensor[(36), float32]) {
  %500 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 11, 13), uint16] */, dtype="bool") /* ty=Tensor[(13, 11, 13), bool] */;
  %501 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(13, 11, 13), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %502 = cast(meta[relay.Constant][19] /* ty=Tensor[(13, 11, 13), uint16] */, dtype="bool") /* ty=Tensor[(13, 11, 13), bool] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %504 = cast(1.56888f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %505 = cast(meta[relay.Constant][21] /* ty=Tensor[(18, 2), float32] */, dtype="float32") /* ty=Tensor[(18, 2), float32] */;
  %506 = cast(meta[relay.Constant][22] /* ty=Tensor[(280), int64] */, dtype="int64") /* ty=Tensor[(280), int64] */;
  %507 = reshape(%504, newshape=[]) /* ty=float64 */;
  %508 = reshape(%505, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %509 = reshape(%506, newshape=[280]) /* ty=Tensor[(280), int64] */;
  %510 = @func_1178(%507, %508, %509) /* ty=(Tensor[(8, 6, 14), float64], Tensor[(3, 4, 3), float32], Tensor[(36), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64], Tensor[(14, 4, 5), int64]) */;
  %511 = cast(1.56888f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %512 = %510.1;
  %513 = cast(%512, dtype="float32") /* ty=Tensor[(3, 4, 3), float32] */;
  %514 = cast(meta[relay.Constant][22] /* ty=Tensor[(280), int64] */, dtype="int64") /* ty=Tensor[(280), int64] */;
  %515 = reshape(%511, newshape=[]) /* ty=float64 */;
  %516 = reshape(%513, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %517 = reshape(%514, newshape=[280]) /* ty=Tensor[(280), int64] */;
  %518 = @func_1178(%515, %516, %517) /* ty=(Tensor[(8, 6, 14), float64], Tensor[(3, 4, 3), float32], Tensor[(36), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64], Tensor[(14, 4, 5), int64]) */;
  %519 = greater(%502, %503) /* ty=Tensor[(13, 11, 13), bool] */;
  %520 = %518.2;
  (%519, %512, 1.56888f64 /* ty=float64 */, meta[relay.Constant][21] /* ty=Tensor[(18, 2), float32] */, meta[relay.Constant][22] /* ty=Tensor[(280), int64] */, %520)
}

def @func_11888() -> (float64,) {
  %521 = @func_8613() /* ty=(float64,) */;
  %522 = %521.0;
  (%522,)
}

def @func_6707(%var_6697: Tensor[(8, 10, 6), float64]) -> Tensor[(8, 10, 6), bool] {
  %523 = @func_2726() /* ty=float64 */;
  %524 = cast(%523, dtype="bool") /* ty=bool */;
  %525 = cast(%var_6697, dtype="bool") /* ty=Tensor[(8, 10, 6), bool] */;
  greater(%524, %525) /* ty=Tensor[(8, 10, 6), bool] */
}

def @func_2069(%var_2054: Tensor[(280), int64]) -> (Tensor[(3, 4, 3), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64], Tensor[(18, 2), float64]) {
  %526 = @func_1837() /* ty=(Tensor[(13, 11, 13), bool], Tensor[(3, 4, 3), float32], float64, Tensor[(18, 2), float32], Tensor[(280), int64], Tensor[(36), float32]) */;
  %527 = cast(%var_2054, dtype="int64") /* ty=Tensor[(280), int64] */;
  %528 = cast(%var_2054, dtype="int64") /* ty=Tensor[(280), int64] */;
  %529 = reshape(%527, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), int64] */;
  %530 = reshape(%528, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), int64] */;
  %531 = @func_982(%529, %530) /* ty=(Tensor[(14, 4, 5), int64], Tensor[(14, 4, 5), float64]) */;
  %532 = %526.1;
  %533 = cast(%532, dtype="float32") /* ty=Tensor[(3, 4, 3), float32] */;
  %534 = reshape(%533, newshape=[18, 2]) /* ty=Tensor[(18, 2), float32] */;
  %535 = @func_1942(%534) /* ty=(Tensor[(18, 2), float32], Tensor[(16, 15, 8), uint64]) */;
  %536 = %535.0;
  %537 = cast(%536, dtype="float64") /* ty=Tensor[(18, 2), float64] */;
  %538 = %531.1;
  %539 = atan(%537) /* ty=Tensor[(18, 2), float64] */;
  (%532, %538, %var_2054, %539)
}

def @func_8080() -> float64 {
  %540 = @func_5712() /* ty=(float64,) */;
  %540.0
}

def @func_12370() -> (Tensor[(280), int64], float64, Tensor[(280), int64], float64, Tensor[(280), int64], Tensor[(?, 13, 11), bool], Tensor[(45), float64], Tensor[(143, 1), float64]) {
  %541 = @func_9605() /* ty=(Tensor[(280), int64], Tensor[(14, 14, 3), bool], Tensor[(588), float64]) */;
  %542 = @func_2851() /* ty=(float64,) */;
  %543 = @func_7570() /* ty=(Tensor[(3, 4, 3), float32], float64, float64, Tensor[(280), int64]) */;
  %544 = @func_8218() /* ty=(Tensor[(280), int64], Tensor[(11, 13, 7), float32]) */;
  %545 = cast(meta[relay.Constant][23] /* ty=Tensor[(45), float64] */, dtype="float64") /* ty=Tensor[(45), float64] */;
  %546 = cast(meta[relay.Constant][24] /* ty=Tensor[(143, 1), float64] */, dtype="float64") /* ty=Tensor[(143, 1), float64] */;
  %547 = reshape(%545, newshape=[45]) /* ty=Tensor[(45), float64] */;
  %548 = reshape(%546, newshape=[143, 1]) /* ty=Tensor[(143, 1), float64] */;
  %549 = @func_4957(%547, %548) /* ty=(Tensor[(280), int64], Tensor[(3, 4, 3), float32], Tensor[(?, 13, 11), bool], Tensor[(143, 1), float64], Tensor[(?, 9, 5), bool], float64, float64, Tensor[(3, 4, 3), float32]) */;
  %550 = %541.0;
  %551 = %542.0;
  %552 = %543.3;
  %553 = @func_6547() /* ty=float64 */;
  %554 = %544.0;
  %555 = %549.2;
  (%550, %551, %552, %553, %554, %555, meta[relay.Constant][23] /* ty=Tensor[(45), float64] */, meta[relay.Constant][24] /* ty=Tensor[(143, 1), float64] */)
}

def @func_13413() -> Tensor[(14, 4, 5), float64] {
  %556 = @func_5796() /* ty=(float64, Tensor[(14, 4, 5), float64], Tensor[(5, 56), int64], Tensor[(18, 2), uint8]) */;
  %556.1
}

def @func_7782() -> Tensor[(14, 4, 5), float64] {
  %557 = @func_5796() /* ty=(float64, Tensor[(14, 4, 5), float64], Tensor[(5, 56), int64], Tensor[(18, 2), uint8]) */;
  %557.1
}

def @func_14923() -> float64 {
  @func_14766() /* ty=float64 */
}

def @func_3267() -> Tensor[(280), int64] {
  %558 = @func_3263() /* ty=(Tensor[(280), int64], float64, Tensor[(36), float32], Tensor[(3, 4, 3), float32], float64, float64) */;
  %558.0
}

def @func_8420() -> float64 {
  %559 = @func_4452() /* ty=(float64,) */;
  %559.0
}

def @func_10784() -> (Tensor[(3, 4, 3), float32],) {
  %560 = @func_4409() /* ty=Tensor[(3, 4, 3), float32] */;
  (%560,)
}

def @func_11779() -> (Tensor[(8, 13, 12), int8],) {
  %561 = @func_11643() /* ty=(float64, Tensor[(8, 13, 12), int8], Tensor[(5, 10, 7), uint32], Tensor[(350), uint32]) */;
  %562 = %561.1;
  (%562,)
}

def @func_1178(%var_1117: float64, %var_1123: Tensor[(36), float32], %var_1127: Tensor[(280), int64]) -> (Tensor[(8, 6, 14), float64], Tensor[(3, 4, 3), float32], Tensor[(36), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64], Tensor[(14, 4, 5), int64]) {
  %563 = cast(%var_1117, dtype="float64") /* ty=float64 */;
  %564 = cast(meta[relay.Constant][25] /* ty=Tensor[(8, 6, 14), float64] */, dtype="float64") /* ty=Tensor[(8, 6, 14), float64] */;
  %565 = cast(%var_1123, dtype="float32") /* ty=Tensor[(36), float32] */;
  %566 = reshape(%565, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float32] */;
  %567 = cast(%var_1127, dtype="int64") /* ty=Tensor[(280), int64] */;
  %568 = cast(%var_1127, dtype="int64") /* ty=Tensor[(280), int64] */;
  %569 = reshape(%567, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), int64] */;
  %570 = reshape(%568, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), int64] */;
  %571 = @func_982(%569, %570) /* ty=(Tensor[(14, 4, 5), int64], Tensor[(14, 4, 5), float64]) */;
  %572 = %571.1;
  %573 = cast(%572, dtype="int64") /* ty=Tensor[(14, 4, 5), int64] */;
  %574 = cast(%572, dtype="int64") /* ty=Tensor[(14, 4, 5), int64] */;
  %575 = reshape(%573, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), int64] */;
  %576 = reshape(%574, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), int64] */;
  %577 = @func_982(%575, %576) /* ty=(Tensor[(14, 4, 5), int64], Tensor[(14, 4, 5), float64]) */;
  %578 = floor_divide(%563, %564) /* ty=Tensor[(8, 6, 14), float64] */;
  %579 = @func_111(%566) /* ty=Tensor[(3, 4, 3), float32] */;
  %580 = %577.0;
  (%578, %579, %var_1123, %572, %var_1127, %580)
}

def @func_4278(%var_4270: Tensor[(1, 9, 5), float64]) -> (Tensor[(1, 9, 5), float64], Tensor[(280), int64]) {
  %581 = cast(%var_4270, dtype="float64") /* ty=Tensor[(1, 9, 5), float64] */;
  %582 = @func_4080() /* ty=(Tensor[(280), int64],) */;
  %583 = erf(%581) /* ty=Tensor[(1, 9, 5), float64] */;
  %584 = %582.0;
  (%583, %584)
}

def @func_8372(%var_8321: Tensor[(8, 7, 9), float64]) -> (Tensor[(8, 7, 9), float64], Tensor[(8, 7, 9), float64], Tensor[(8, 7, 9), float32], Tensor[(3, 4, 3), float32]) {
  %585 = cast(%var_8321, dtype="float64") /* ty=Tensor[(8, 7, 9), float64] */;
  %586 = cast(%var_8321, dtype="float64") /* ty=Tensor[(8, 7, 9), float64] */;
  %587 = cast(%var_8321, dtype="float32") /* ty=Tensor[(8, 7, 9), float32] */;
  %588 = @func_3179() /* ty=(Tensor[(3, 4, 3), float32],) */;
  %589 = log10(%585) /* ty=Tensor[(8, 7, 9), float64] */;
  %590 = tan(%586) /* ty=Tensor[(8, 7, 9), float64] */;
  %591 = cos(%587) /* ty=Tensor[(8, 7, 9), float32] */;
  %592 = %588.0;
  (%589, %590, %591, %592)
}

def @func_10432(%var_10423: Tensor[(36), float32]) -> (float64, float64, Tensor[(280), int64], Tensor[(143, 1), float64], Tensor[(36), float32], Tensor[(36), float32]) {
  %593 = @func_7087() /* ty=(float64,) */;
  %594 = cast(meta[relay.Constant][26] /* ty=Tensor[(143, 1), float64] */, dtype="float64") /* ty=Tensor[(143, 1), float64] */;
  %595 = reshape(%594, newshape=[143]) /* ty=Tensor[(143), float64] */;
  %596 = @func_8720(%595) /* ty=(Tensor[(280), int64], Tensor[(14, 4, 5), float64], Tensor[(36), float32], Tensor[(143), float64]) */;
  %597 = cast(%var_10423, dtype="float32") /* ty=Tensor[(36), float32] */;
  %598 = reshape(%597, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %599 = @func_2448(%598) /* ty=(float64, Tensor[(14, 4, 5), float64], Tensor[(36), float32], Tensor[(280), int64], Tensor[(16, 15, 8), uint64], float64, Tensor[(3, 4, 3), float32]) */;
  %600 = %593.0;
  %601 = @func_3509() /* ty=float64 */;
  %602 = %596.0;
  %603 = %599.2;
  (%600, %601, %602, meta[relay.Constant][26] /* ty=Tensor[(143, 1), float64] */, %603, %var_10423)
}

def @func_13566() -> (float64,) {
  %604 = @func_4452() /* ty=(float64,) */;
  %605 = %604.0;
  (%605,)
}

def @func_15036() -> (Tensor[(280), int64], float64) {
  %606 = @func_7408() /* ty=(Tensor[(280), int64],) */;
  %607 = %606.0;
  %608 = @func_9263() /* ty=float64 */;
  (%607, %608)
}

def @func_2198() -> float64 {
  %609 = @func_1837() /* ty=(Tensor[(13, 11, 13), bool], Tensor[(3, 4, 3), float32], float64, Tensor[(18, 2), float32], Tensor[(280), int64], Tensor[(36), float32]) */;
  %609.2
}

def @func_3445() -> (float64, float64, float64, float64, float64) {
  %610 = @func_2936() /* ty=(float64, Tensor[(3, 4, 3), float32], Tensor[(36), float32]) */;
  %611 = @func_2968() /* ty=(float64, float64) */;
  %612 = @func_3106() /* ty=(Tensor[(36), float32], float64) */;
  %613 = %610.0;
  %614 = %611.0;
  %615 = %612.1;
  %616 = @func_2697() /* ty=float64 */;
  %617 = @func_3187() /* ty=float64 */;
  (%613, %614, %615, %616, %617)
}

def @func_16090() -> (float64,) {
  %618 = @func_6865() /* ty=(float64,) */;
  %619 = %618.0;
  (%619,)
}

def @func_4574(%var_4568: Tensor[(10, 7, 16), float64], %var_4569: Tensor[(10, 7, 16), float64]) -> Tensor[(10, 7, 16), float64] {
  %620 = cast(%var_4569, dtype="float64") /* ty=Tensor[(10, 7, 16), float64] */;
  %621 = shape_of(%var_4568, dtype="int32") /* ty=Tensor[(3), int32] */;
  %622 = cast(%var_4568, dtype="float64") /* ty=Tensor[(10, 7, 16), float64] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%622, %623) /* ty=Tensor[(10, 7, 16), float64] */
}

def @func_7408() -> (Tensor[(280), int64],) {
  %624 = @func_4216() /* ty=(Tensor[(280), int64], Tensor[(280), int64], float64, float64) */;
  %625 = %624.0;
  (%625,)
}

def @func_3800() -> float64 {
  @func_3310() /* ty=float64 */
}

def @func_5240() -> Tensor[(280), int64] {
  %626 = @func_4394() /* ty=(Tensor[(280), int64],) */;
  %626.0
}

def @func_9510() -> (float64,) {
  %627 = @func_4878() /* ty=float64 */;
  (%627,)
}

def @func_12993() -> (float64, float64, float64, float64) {
  %628 = @func_6833() /* ty=(float64, float64, Tensor[(280), int64]) */;
  %629 = @func_7083() /* ty=float64 */;
  %630 = @func_10230() /* ty=float64 */;
  %631 = @func_7839() /* ty=float64 */;
  %632 = %628.1;
  (%629, %630, %631, %632)
}

def @func_6482() -> (float64, float64) {
  %633 = @func_5180() /* ty=float64 */;
  %634 = @func_4555() /* ty=float64 */;
  (%633, %634)
}

def @func_4664(%var_4654: Tensor[(12, 5, 6), int64], %var_4655: Tensor[(12, 5, 6), int64]) -> (Tensor[(12, 5, 6), int64],) {
  %635 = cast(%var_4655, dtype="int64") /* ty=Tensor[(12, 5, 6), int64] */;
  %636 = shape_of(%var_4654, dtype="int32") /* ty=Tensor[(3), int32] */;
  %637 = cast(%var_4654, dtype="int64") /* ty=Tensor[(12, 5, 6), int64] */;
  %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %639 = bitwise_and(%637, %638) /* ty=Tensor[(12, 5, 6), int64] */;
  (%639,)
}

def @func_6222() -> Tensor[(8, 13, 12), bool] {
  %640 = @func_5345() /* ty=(Tensor[(8, 13, 12), bool], Tensor[(8, 13, 12), bool]) */;
  %640.0
}

def @func_12522(%var_12480: Tensor[(6, 12, 8), float32], %var_12481: Tensor[(6, 12, 8), float32], %var_12500: Tensor[(6, 12, 8), float32]) -> (Tensor[(6, 12, 8), float32], float64, Tensor[(8, 13, 12), int8], Tensor[(6, 12, 8), uint32], Tensor[(14, 4, 5), float64], Tensor[(143), float64], float64, float64) {
  %641 = cast(%var_12481, dtype="float32") /* ty=Tensor[(6, 12, 8), float32] */;
  %642 = shape_of(%var_12480, dtype="int32") /* ty=Tensor[(3), int32] */;
  %643 = cast(%var_12480, dtype="float32") /* ty=Tensor[(6, 12, 8), float32] */;
  %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %645 = @func_11779() /* ty=(Tensor[(8, 13, 12), int8],) */;
  %646 = cast(%var_12500, dtype="uint32") /* ty=Tensor[(6, 12, 8), uint32] */;
  %647 = shape_of(%var_12480, dtype="int32") /* ty=Tensor[(3), int32] */;
  %648 = cast(%var_12480, dtype="uint32") /* ty=Tensor[(6, 12, 8), uint32] */;
  %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %650 = cast(meta[relay.Constant][27] /* ty=Tensor[(143), float64] */, dtype="float64") /* ty=Tensor[(143), float64] */;
  %651 = reshape(%650, newshape=[143]) /* ty=Tensor[(143), float64] */;
  %652 = @func_8720(%651) /* ty=(Tensor[(280), int64], Tensor[(14, 4, 5), float64], Tensor[(36), float32], Tensor[(143), float64]) */;
  %653 = @func_3045() /* ty=(float64, float64, float64) */;
  %654 = power(%643, %644) /* ty=Tensor[(6, 12, 8), float32] */;
  %655 = @func_2697() /* ty=float64 */;
  %656 = %645.0;
  %657 = maximum(%648, %649) /* ty=Tensor[(6, 12, 8), uint32] */;
  %658 = %652.1;
  %659 = %653.2;
  %660 = @func_2475() /* ty=float64 */;
  (%654, %655, %656, %657, %658, meta[relay.Constant][27] /* ty=Tensor[(143), float64] */, %659, %660)
}

def @func_10656() -> (float64,) {
  %661 = @func_3106() /* ty=(Tensor[(36), float32], float64) */;
  %662 = %661.1;
  (%662,)
}

def @func_2968() -> (float64, float64) {
  %663 = @func_2514() /* ty=float64 */;
  %664 = @func_2726() /* ty=float64 */;
  (%663, %664)
}

def @func_8128(%var_8111: Tensor[(14, 14, 3), float64]) -> Tensor[(14, 14, 3), bool] {
  %665 = @func_7236() /* ty=(float64, Tensor[(3, 4, 3), float32]) */;
  %666 = %665.0;
  %667 = cast(%666, dtype="bool") /* ty=bool */;
  %668 = cast(%var_8111, dtype="bool") /* ty=Tensor[(14, 14, 3), bool] */;
  less(%667, %668) /* ty=Tensor[(14, 14, 3), bool] */
}

def @func_16102() -> (float64, float64) {
  %669 = @func_5577() /* ty=(float64,) */;
  %670 = @func_6925() /* ty=(float64,) */;
  %671 = %669.0;
  %672 = %670.0;
  (%671, %672)
}

def @func_6034() -> (float64, float64) {
  %673 = @func_3310() /* ty=float64 */;
  %674 = @func_3187() /* ty=float64 */;
  (%673, %674)
}

def @func_13032() -> float64 {
  %675 = @func_10134() /* ty=(float64,) */;
  %675.0
}

def @func_6752() -> (float64, float64, float64, Tensor[(3, 4, 3), float32]) {
  %676 = @func_6034() /* ty=(float64, float64) */;
  %677 = @func_5417() /* ty=(Tensor[(280), int64], float64) */;
  %678 = @func_2353() /* ty=(float64,) */;
  %679 = @func_3179() /* ty=(Tensor[(3, 4, 3), float32],) */;
  %680 = %676.0;
  %681 = %677.1;
  %682 = %678.0;
  %683 = %679.0;
  (%680, %681, %682, %683)
}

def @func_14277(%var_14235: Tensor[(2, 4, 14), float32], %var_14275: Tensor[(630), int32]) -> (Tensor[(2, 4, 14), float32], Tensor[(36), float32], Tensor[(350), uint32], float64, float64, Tensor[(6, 7, 15), int32], Tensor[(630), int32]) {
  %684 = cast(%var_14235, dtype="float32") /* ty=Tensor[(2, 4, 14), float32] */;
  %685 = @func_11235() /* ty=(Tensor[(36), float32],) */;
  %686 = @func_11643() /* ty=(float64, Tensor[(8, 13, 12), int8], Tensor[(5, 10, 7), uint32], Tensor[(350), uint32]) */;
  %687 = @func_2353() /* ty=(float64,) */;
  %688 = cast(%var_14275, dtype="int32") /* ty=Tensor[(630), int32] */;
  %689 = reshape(%688, newshape=[6, 7, 15]) /* ty=Tensor[(6, 7, 15), int32] */;
  %690 = @func_7676(%689) /* ty=(Tensor[(6, 7, 15), int32], Tensor[(280), int64], Tensor[(36), float32], Tensor[(6, 7, 15), float64], Tensor[(3, 4, 3), float32]) */;
  %691 = tan(%684) /* ty=Tensor[(2, 4, 14), float32] */;
  %692 = %685.0;
  %693 = %686.3;
  %694 = @func_8080() /* ty=float64 */;
  %695 = %687.0;
  %696 = %690.0;
  (%691, %692, %693, %694, %695, %696, %var_14275)
}

def @func_2294() -> float64 {
  @func_2198() /* ty=float64 */
}

def @func_10765() -> (float64, float64, float64) {
  %697 = @func_7456() /* ty=(float64,) */;
  %698 = @func_10577() /* ty=(float64, float64) */;
  %699 = %697.0;
  %700 = @func_9533() /* ty=float64 */;
  %701 = %698.1;
  (%699, %700, %701)
}

def @func_3549() -> float64 {
  %702 = @func_2851() /* ty=(float64,) */;
  %702.0
}

def @func_7993() -> (float64, float64) {
  %703 = @func_5934() /* ty=(float64, Tensor[(9, 8, 16), float32], Tensor[(9, 8, 16), bool], Tensor[(36), float32]) */;
  %704 = @func_2726() /* ty=float64 */;
  %705 = %703.0;
  (%704, %705)
}

def @func_8303() -> (Tensor[(8, 13, 12), bool],) {
  %706 = @func_5345() /* ty=(Tensor[(8, 13, 12), bool], Tensor[(8, 13, 12), bool]) */;
  %707 = %706.0;
  (%707,)
}

def @func_4080() -> (Tensor[(280), int64],) {
  %708 = @func_4019() /* ty=Tensor[(280), int64] */;
  (%708,)
}

def @func_12418() -> (float64,) {
  %709 = @func_4136() /* ty=(float64, float64) */;
  %710 = %709.1;
  (%710,)
}

def @func_7570() -> (Tensor[(3, 4, 3), float32], float64, float64, Tensor[(280), int64]) {
  %711 = @func_7087() /* ty=(float64,) */;
  %712 = @func_6034() /* ty=(float64, float64) */;
  %713 = @func_4843() /* ty=(float64, float64, Tensor[(36), float32], Tensor[(280), int64], Tensor[(280), int64], float64) */;
  %714 = @func_4409() /* ty=Tensor[(3, 4, 3), float32] */;
  %715 = %711.0;
  %716 = %712.1;
  %717 = %713.4;
  (%714, %715, %716, %717)
}

def @func_15219() -> (float64, float64, Tensor[(143), float64], float64) {
  %718 = @func_7456() /* ty=(float64,) */;
  %719 = cast(meta[relay.Constant][28] /* ty=Tensor[(143), float64] */, dtype="float64") /* ty=Tensor[(143), float64] */;
  %720 = reshape(%719, newshape=[143]) /* ty=Tensor[(143), float64] */;
  %721 = @func_4526(%720) /* ty=(Tensor[(18, 2), int8], float64, Tensor[(280), int64], Tensor[(280), int64], Tensor[(3, 4, 3), float32], Tensor[(143), float64]) */;
  %722 = cast(meta[relay.Constant][28] /* ty=Tensor[(143), float64] */, dtype="float64") /* ty=Tensor[(143), float64] */;
  %723 = reshape(%722, newshape=[143]) /* ty=Tensor[(143), float64] */;
  %724 = @func_14228(%723) /* ty=(float64, Tensor[(143), float64], float64, Tensor[(?, 13, 11), float64]) */;
  %725 = %718.0;
  %726 = %721.1;
  %727 = %724.0;
  (%725, %726, meta[relay.Constant][28] /* ty=Tensor[(143), float64] */, %727)
}

def @func_11406() -> Tensor[(9, 8, 16), float32] {
  %728 = @func_5934() /* ty=(float64, Tensor[(9, 8, 16), float32], Tensor[(9, 8, 16), bool], Tensor[(36), float32]) */;
  %728.1
}

def @func_2909() -> (float64, float64) {
  %729 = @func_2697() /* ty=float64 */;
  %730 = @func_2198() /* ty=float64 */;
  (%729, %730)
}

def @func_13939(%var_13931: Tensor[(9, 16, 12), float32], %var_13932: Tensor[(9, 16, 12), float32]) -> Tensor[(9, 16, 12), float32] {
  %731 = cast(%var_13932, dtype="float32") /* ty=Tensor[(9, 16, 12), float32] */;
  %732 = shape_of(%var_13931, dtype="int32") /* ty=Tensor[(3), int32] */;
  %733 = cast(%var_13931, dtype="float32") /* ty=Tensor[(9, 16, 12), float32] */;
  %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%733, %734) /* ty=Tensor[(9, 16, 12), float32] */
}

def @func_11834() -> float64 {
  %735 = @func_6482() /* ty=(float64, float64) */;
  %735.1
}

def @func_9263() -> float64 {
  @func_8080() /* ty=float64 */
}

def @func_4394() -> (Tensor[(280), int64],) {
  %736 = @func_2544() /* ty=(Tensor[(280), int64],) */;
  %737 = %736.0;
  (%737,)
}

def @func_8603(%var_8583: Tensor[(143), float64]) -> (float64, Tensor[(9, 8, 16), float64], float64, Tensor[(36), float32], Tensor[(143), float64], float64) {
  %738 = @func_7816() /* ty=(float64, float64) */;
  %739 = @func_3752() /* ty=(Tensor[(9, 8, 16), float32],) */;
  %740 = %739.0;
  %741 = cast(%740, dtype="float64") /* ty=Tensor[(9, 8, 16), float64] */;
  %742 = @func_4618() /* ty=(float64, float64) */;
  %743 = cast(%var_8583, dtype="float64") /* ty=Tensor[(143), float64] */;
  %744 = reshape(%743, newshape=[1, 13, 11]) /* ty=Tensor[(1, 13, 11), float64] */;
  %745 = @func_3845(%744) /* ty=(Tensor[(?, 13, 11), bool], Tensor[(3, 4, 3), float32], Tensor[(36), float32]) */;
  %746 = @func_4699() /* ty=(float64,) */;
  %747 = %738.0;
  %748 = cos(%741) /* ty=Tensor[(9, 8, 16), float64] */;
  %749 = %742.0;
  %750 = %745.2;
  %751 = %746.0;
  (%747, %748, %749, %750, %var_8583, %751)
}

def @func_15404() -> (float64,) {
  %752 = @func_10656() /* ty=(float64,) */;
  %753 = %752.0;
  (%753,)
}

def @func_12670(%var_12561: Tensor[(9, 8, 16), float32], %var_12666: Tensor[(1120), float64]) -> (Tensor[(9, 8, 16), uint64], float64, Tensor[(36), float32], Tensor[(3, 4, 3), float32], float64, float64, Tensor[(10, 7, 16), float64], Tensor[(1120), float64]) {
  %754 = @func_12268() /* ty=Tensor[(9, 8, 16), float32] */;
  %755 = cast(%var_12561, dtype="uint64") /* ty=Tensor[(9, 8, 16), uint64] */;
  %756 = shape_of(%754, dtype="int32") /* ty=Tensor[(3), int32] */;
  %757 = cast(%754, dtype="uint64") /* ty=Tensor[(9, 8, 16), uint64] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %759 = @func_9362() /* ty=(float64, Tensor[(11, 13, 7), float32]) */;
  %760 = @func_4843() /* ty=(float64, float64, Tensor[(36), float32], Tensor[(280), int64], Tensor[(280), int64], float64) */;
  %761 = @func_3989() /* ty=(Tensor[(36), float32], float64, Tensor[(3, 4, 3), float32]) */;
  %762 = @func_11888() /* ty=(float64,) */;
  %763 = cast(%var_12666, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %764 = cast(%var_12666, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %765 = reshape(%763, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), float64] */;
  %766 = reshape(%764, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), float64] */;
  %767 = bitwise_and(%757, %758) /* ty=Tensor[(9, 8, 16), uint64] */;
  %768 = %759.0;
  %769 = %760.2;
  %770 = %761.2;
  %771 = @func_11011() /* ty=float64 */;
  %772 = %762.0;
  %773 = @func_4574(%765, %766) /* ty=Tensor[(10, 7, 16), float64] */;
  (%767, %768, %769, %770, %771, %772, %773, %var_12666)
}

def @func_3045() -> (float64, float64, float64) {
  %774 = @func_2968() /* ty=(float64, float64) */;
  %775 = @func_2353() /* ty=(float64,) */;
  %776 = @func_2353() /* ty=(float64,) */;
  %777 = %774.1;
  %778 = %775.0;
  %779 = %776.0;
  (%777, %778, %779)
}

def @func_10577() -> (float64, float64) {
  %780 = @func_10134() /* ty=(float64,) */;
  %781 = @func_7839() /* ty=float64 */;
  %782 = %780.0;
  (%781, %782)
}

def @func_13176() -> (Tensor[(8, 13, 12), bool],) {
  %783 = @func_10952() /* ty=(Tensor[(8, 13, 12), bool], float64) */;
  %784 = %783.0;
  (%784,)
}

def @func_2762(%var_2743: Tensor[(9, 7, 2), bool], %var_2744: Tensor[(9, 7, 2), bool], %var_2749: Tensor[(1540), uint16]) -> (Tensor[(9, 7, 2), bool], Tensor[(14, 10, 11), uint16], Tensor[(1540), uint16], float64) {
  %785 = cast(%var_2744, dtype="bool") /* ty=Tensor[(9, 7, 2), bool] */;
  %786 = shape_of(%var_2743, dtype="int32") /* ty=Tensor[(3), int32] */;
  %787 = cast(%var_2743, dtype="bool") /* ty=Tensor[(9, 7, 2), bool] */;
  %788 = dyn.reshape(%785, %786, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %789 = cast(%var_2749, dtype="uint16") /* ty=Tensor[(1540), uint16] */;
  %790 = cast(%var_2749, dtype="uint16") /* ty=Tensor[(1540), uint16] */;
  %791 = reshape(%789, newshape=[14, 10, 11]) /* ty=Tensor[(14, 10, 11), uint16] */;
  %792 = reshape(%790, newshape=[14, 10, 11]) /* ty=Tensor[(14, 10, 11), uint16] */;
  %793 = @func_2626(%791, %792) /* ty=(Tensor[(14, 10, 11), uint16],) */;
  %794 = logical_and(%787, %788) /* ty=Tensor[(9, 7, 2), bool] */;
  %795 = %793.0;
  %796 = @func_2294() /* ty=float64 */;
  (%794, %795, %var_2749, %796)
}

def @func_2353() -> (float64,) {
  %797 = @func_2198() /* ty=float64 */;
  (%797,)
}

def @func_1942(%var_1929: Tensor[(18, 2), float32]) -> (Tensor[(18, 2), float32], Tensor[(16, 15, 8), uint64]) {
  %798 = @func_1837() /* ty=(Tensor[(13, 11, 13), bool], Tensor[(3, 4, 3), float32], float64, Tensor[(18, 2), float32], Tensor[(280), int64], Tensor[(36), float32]) */;
  %799 = %798.3;
  %800 = cast(%var_1929, dtype="float32") /* ty=Tensor[(18, 2), float32] */;
  %801 = shape_of(%799, dtype="int32") /* ty=Tensor[(2), int32] */;
  %802 = cast(%799, dtype="float32") /* ty=Tensor[(18, 2), float32] */;
  %803 = dyn.reshape(%800, %801, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %804 = cast(meta[relay.Constant][29] /* ty=Tensor[(16, 15, 8), float64] */, dtype="float64") /* ty=Tensor[(16, 15, 8), float64] */;
  %805 = sin(%804) /* ty=Tensor[(16, 15, 8), float64] */;
  %806 = cast(%805, dtype="float32") /* ty=Tensor[(16, 15, 8), float32] */;
  %807 = atanh(%806) /* ty=Tensor[(16, 15, 8), float32] */;
  %808 = cast(%805, dtype="float32") /* ty=Tensor[(16, 15, 8), float32] */;
  %809 = shape_of(%807, dtype="int32") /* ty=Tensor[(3), int32] */;
  %810 = cast(%807, dtype="float32") /* ty=Tensor[(16, 15, 8), float32] */;
  %811 = dyn.reshape(%808, %809, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %812 = power(%810, %811) /* ty=Tensor[(16, 15, 8), float32] */;
  %813 = cast(%812, dtype="uint64") /* ty=Tensor[(16, 15, 8), uint64] */;
  %814 = shape_of(%807, dtype="int32") /* ty=Tensor[(3), int32] */;
  %815 = cast(%807, dtype="uint64") /* ty=Tensor[(16, 15, 8), uint64] */;
  %816 = dyn.reshape(%813, %814, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %817 = floor_divide(%802, %803) /* ty=Tensor[(18, 2), float32] */;
  %818 = logical_xor(%815, %816) /* ty=Tensor[(16, 15, 8), uint64] */;
  (%817, %818)
}

def @func_12734(%var_12727: Tensor[(13, 5, 13), float32], %var_12728: Tensor[(13, 5, 13), float32]) -> Tensor[(13, 5, 13), float32] {
  %819 = cast(%var_12728, dtype="float32") /* ty=Tensor[(13, 5, 13), float32] */;
  %820 = shape_of(%var_12727, dtype="int32") /* ty=Tensor[(3), int32] */;
  %821 = cast(%var_12727, dtype="float32") /* ty=Tensor[(13, 5, 13), float32] */;
  %822 = dyn.reshape(%819, %820, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%821, %822) /* ty=Tensor[(13, 5, 13), float32] */
}

def @func_13108() -> (float64, float64) {
  %823 = @func_11973() /* ty=(float64, Tensor[(11, 13, 7), float32]) */;
  %824 = @func_7087() /* ty=(float64,) */;
  %825 = %823.0;
  %826 = %824.0;
  (%825, %826)
}

def @func_7816() -> (float64, float64) {
  %827 = @func_2909() /* ty=(float64, float64) */;
  %828 = @func_3509() /* ty=float64 */;
  %829 = %827.1;
  (%828, %829)
}

def @func_10698() -> float64 {
  @func_2198() /* ty=float64 */
}

def @func_14107(%var_14053: Tensor[(10, 7, 6), bool], %var_14054: Tensor[(10, 7, 6), bool], %var_14077: Tensor[(33, 3), float64]) -> (Tensor[(10, 7, 6), bool], Tensor[(280), int64], float64, Tensor[(33, 3), float64], Tensor[(36, 1), float32], Tensor[(9, 4), float32], Tensor[(1, 9, 11), uint8]) {
  %830 = cast(%var_14054, dtype="bool") /* ty=Tensor[(10, 7, 6), bool] */;
  %831 = shape_of(%var_14053, dtype="int32") /* ty=Tensor[(3), int32] */;
  %832 = cast(%var_14053, dtype="bool") /* ty=Tensor[(10, 7, 6), bool] */;
  %833 = dyn.reshape(%830, %831, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %834 = @func_8218() /* ty=(Tensor[(280), int64], Tensor[(11, 13, 7), float32]) */;
  %835 = cast(meta[relay.Constant][30] /* ty=Tensor[(9, 4), float32] */, dtype="float32") /* ty=Tensor[(9, 4), float32] */;
  %836 = reshape(%835, newshape=[36, 1]) /* ty=Tensor[(36, 1), float32] */;
  %837 = @func_4981(%836) /* ty=(Tensor[(280), int64], Tensor[(3, 4, 3), float32], Tensor[(36, 1), float32]) */;
  %838 = cast(meta[relay.Constant][30] /* ty=Tensor[(9, 4), float32] */, dtype="float32") /* ty=Tensor[(9, 4), float32] */;
  %839 = reshape(%838, newshape=[36, 1]) /* ty=Tensor[(36, 1), float32] */;
  %840 = @func_11074(%839) /* ty=(float64, float64, Tensor[(36, 1), float32], Tensor[(154, 10), uint16]) */;
  %841 = %840.1;
  %842 = cast(%var_14077, dtype="float64") /* ty=Tensor[(33, 3), float64] */;
  %843 = reshape(%842, newshape=[1, 9, 11]) /* ty=Tensor[(1, 9, 11), float64] */;
  %844 = @func_5225(%843) /* ty=(Tensor[(1, 9, 11), int16],) */;
  %845 = %844.0;
  %846 = cast(%841, dtype="uint8") /* ty=uint8 */;
  %847 = cast(%845, dtype="uint8") /* ty=Tensor[(1, 9, 11), uint8] */;
  %848 = logical_or(%832, %833) /* ty=Tensor[(10, 7, 6), bool] */;
  %849 = %834.0;
  %850 = @func_8486() /* ty=float64 */;
  %851 = %837.2;
  %852 = add(%846, %847) /* ty=Tensor[(1, 9, 11), uint8] */;
  (%848, %849, %850, %var_14077, %851, meta[relay.Constant][30] /* ty=Tensor[(9, 4), float32] */, %852)
}

def @func_9415() -> float64 {
  %853 = @func_5577() /* ty=(float64,) */;
  %853.0
}

def @func_11011() -> float64 {
  %854 = @func_5946() /* ty=(Tensor[(280), int64], float64) */;
  %854.1
}

def @func_7676(%var_7630: Tensor[(6, 7, 15), int32]) -> (Tensor[(6, 7, 15), int32], Tensor[(280), int64], Tensor[(36), float32], Tensor[(6, 7, 15), float64], Tensor[(3, 4, 3), float32]) {
  %855 = cast(%var_7630, dtype="int32") /* ty=Tensor[(6, 7, 15), int32] */;
  %856 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(6, 7, 15), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %857 = cast(meta[relay.Constant][31] /* ty=Tensor[(6, 7, 15), int32] */, dtype="int32") /* ty=Tensor[(6, 7, 15), int32] */;
  %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %859 = cast(meta[relay.Constant][32] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %860 = reshape(%859, newshape=[36, 1]) /* ty=Tensor[(36, 1), float32] */;
  %861 = @func_4981(%860) /* ty=(Tensor[(280), int64], Tensor[(3, 4, 3), float32], Tensor[(36, 1), float32]) */;
  %862 = cast(meta[relay.Constant][31] /* ty=Tensor[(6, 7, 15), int32] */, dtype="float64") /* ty=Tensor[(6, 7, 15), float64] */;
  %863 = %861.0;
  %864 = cast(%863, dtype="float64") /* ty=Tensor[(280), float64] */;
  %865 = cast(%863, dtype="bool") /* ty=Tensor[(280), bool] */;
  %866 = reshape(%864, newshape=[5, 56]) /* ty=Tensor[(5, 56), float64] */;
  %867 = reshape(%865, newshape=[5, 56]) /* ty=Tensor[(5, 56), bool] */;
  %868 = @func_5112(%866, %867) /* ty=(Tensor[(36), float32], float64, Tensor[(3, 4, 3), float32], float64, float64, Tensor[(5, 56), uint32], float64, Tensor[(5, 56), int64], Tensor[(5, 56), float32], float64) */;
  %869 = multiply(%857, %858) /* ty=Tensor[(6, 7, 15), int32] */;
  %870 = tan(%862) /* ty=Tensor[(6, 7, 15), float64] */;
  %871 = %868.2;
  (%869, %863, meta[relay.Constant][32] /* ty=Tensor[(36), float32] */, %870, %871)
}

def @func_10134() -> (float64,) {
  %872 = @func_9510() /* ty=(float64,) */;
  %873 = %872.0;
  (%873,)
}

def @func_14228(%var_14205: Tensor[(143), float64]) -> (float64, Tensor[(143), float64], float64, Tensor[(?, 13, 11), float64]) {
  %874 = @func_6865() /* ty=(float64,) */;
  %875 = @func_4452() /* ty=(float64,) */;
  %876 = cast(%var_14205, dtype="float64") /* ty=Tensor[(143), float64] */;
  %877 = reshape(%876, newshape=[1, 13, 11]) /* ty=Tensor[(1, 13, 11), float64] */;
  %878 = @func_3845(%877) /* ty=(Tensor[(?, 13, 11), bool], Tensor[(3, 4, 3), float32], Tensor[(36), float32]) */;
  %879 = %878.0;
  %880 = cast(%879, dtype="float64") /* ty=Tensor[(?, 13, 11), float64] */;
  %881 = %874.0;
  %882 = %875.0;
  %883 = log10(%880) /* ty=Tensor[(?, 13, 11), float64] */;
  (%881, %var_14205, %882, %883)
}

def @func_14978(%var_14974: Tensor[(12, 5, 5), float64]) -> Tensor[(12, 5, 5), float64] {
  %884 = cast(%var_14974, dtype="float64") /* ty=Tensor[(12, 5, 5), float64] */;
  %885 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(12, 5, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %886 = cast(meta[relay.Constant][33] /* ty=Tensor[(12, 5, 5), float64] */, dtype="float64") /* ty=Tensor[(12, 5, 5), float64] */;
  %887 = dyn.reshape(%884, %885, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%886, %887) /* ty=Tensor[(12, 5, 5), float64] */
}

def @func_15113() -> (Tensor[(8, 13, 12), bool], Tensor[(280), int64], float64) {
  %888 = @func_13722() /* ty=(Tensor[(9, 8, 16), float32], Tensor[(8, 13, 12), bool]) */;
  %889 = %888.1;
  %890 = @func_4019() /* ty=Tensor[(280), int64] */;
  %891 = @func_3800() /* ty=float64 */;
  (%889, %890, %891)
}

def @func_15616() -> (float64, float64) {
  %892 = @func_9533() /* ty=float64 */;
  %893 = @func_2475() /* ty=float64 */;
  (%892, %893)
}

def @func_11546() -> Tensor[(8, 13, 12), bool] {
  %894 = @func_6778() /* ty=(Tensor[(8, 13, 12), bool],) */;
  %894.0
}

def @func_12142() -> float64 {
  %895 = @func_7816() /* ty=(float64, float64) */;
  %895.1
}

def @func_5180() -> float64 {
  %896 = @func_2936() /* ty=(float64, Tensor[(3, 4, 3), float32], Tensor[(36), float32]) */;
  %896.0
}

def @func_15504() -> float64 {
  @func_8420() /* ty=float64 */
}

def @func_6577() -> (Tensor[(280), int64],) {
  %897 = @func_4080() /* ty=(Tensor[(280), int64],) */;
  %898 = %897.0;
  (%898,)
}

def @main(%var_16513: Tensor[(3, 8, 14), float32], %var_16514: Tensor[(3, 8, 14), float32]) -> Tensor[(3, 8, 14), float32] {
  %899 = cast(%var_16514, dtype="float32") /* ty=Tensor[(3, 8, 14), float32] */;
  %900 = shape_of(%var_16513, dtype="int32") /* ty=Tensor[(3), int32] */;
  %901 = cast(%var_16513, dtype="float32") /* ty=Tensor[(3, 8, 14), float32] */;
  %902 = dyn.reshape(%899, %900, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  multiply(%901, %902) /* ty=Tensor[(3, 8, 14), float32] */
}

def @func_3752() -> (Tensor[(9, 8, 16), float32],) {
  %903 = cast(meta[relay.Constant][34] /* ty=Tensor[(9, 8, 16), float32] */, dtype="float32") /* ty=Tensor[(9, 8, 16), float32] */;
  %904 = asin(%903) /* ty=Tensor[(9, 8, 16), float32] */;
  (%904,)
}

def @func_6068() -> (Tensor[(11, 13, 7), float32],) {
  %905 = @func_4772() /* ty=(Tensor[(3, 4, 3), float32], Tensor[(11, 13, 7), float32], Tensor[(1001), float64]) */;
  %906 = %905.1;
  (%906,)
}

def @func_4699() -> (float64,) {
  %907 = @func_2353() /* ty=(float64,) */;
  %908 = %907.0;
  (%908,)
}

def @func_5280(%var_5265: uint32, %var_5266: Tensor[(5, 10, 7), uint32]) -> (Tensor[(5, 10, 7), uint32],) {
  %909 = cast(%var_5265, dtype="uint32") /* ty=uint32 */;
  %910 = cast(%var_5266, dtype="uint32") /* ty=Tensor[(5, 10, 7), uint32] */;
  %911 = bitwise_or(%909, %910) /* ty=Tensor[(5, 10, 7), uint32] */;
  (%911,)
}

def @func_4526(%var_4522: Tensor[(143), float64]) -> (Tensor[(18, 2), int8], float64, Tensor[(280), int64], Tensor[(280), int64], Tensor[(3, 4, 3), float32], Tensor[(143), float64]) {
  %912 = @func_1837() /* ty=(Tensor[(13, 11, 13), bool], Tensor[(3, 4, 3), float32], float64, Tensor[(18, 2), float32], Tensor[(280), int64], Tensor[(36), float32]) */;
  %913 = %912.3;
  %914 = @func_2968() /* ty=(float64, float64) */;
  %915 = %914.0;
  %916 = cast(%913, dtype="bool") /* ty=Tensor[(18, 2), bool] */;
  %917 = cast(%915, dtype="bool") /* ty=bool */;
  %918 = logical_and(%916, %917) /* ty=Tensor[(18, 2), bool] */;
  %919 = cast(%918, dtype="int8") /* ty=Tensor[(18, 2), int8] */;
  %920 = cast(%915, dtype="int8") /* ty=int8 */;
  %921 = @func_3142() /* ty=(float64, float64) */;
  %922 = cast(%915, dtype="float64") /* ty=float64 */;
  %923 = right_shift(%919, %920) /* ty=Tensor[(18, 2), int8] */;
  %924 = cast(%923, dtype="float32") /* ty=Tensor[(18, 2), float32] */;
  %925 = cast(meta[relay.Constant][35] /* ty=Tensor[(280), int64] */, dtype="int64") /* ty=Tensor[(280), int64] */;
  %926 = reshape(%922, newshape=[]) /* ty=float64 */;
  %927 = reshape(%924, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %928 = reshape(%925, newshape=[280]) /* ty=Tensor[(280), int64] */;
  %929 = @func_1178(%926, %927, %928) /* ty=(Tensor[(8, 6, 14), float64], Tensor[(3, 4, 3), float32], Tensor[(36), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64], Tensor[(14, 4, 5), int64]) */;
  %930 = cast(%var_4522, dtype="float64") /* ty=Tensor[(143), float64] */;
  %931 = reshape(%930, newshape=[1, 13, 11]) /* ty=Tensor[(1, 13, 11), float64] */;
  %932 = @func_3845(%931) /* ty=(Tensor[(?, 13, 11), bool], Tensor[(3, 4, 3), float32], Tensor[(36), float32]) */;
  %933 = %921.0;
  %934 = %929.4;
  %935 = %932.1;
  (%923, %933, %934, meta[relay.Constant][35] /* ty=Tensor[(280), int64] */, %935, %var_4522)
}

def @func_9605() -> (Tensor[(280), int64], Tensor[(14, 14, 3), bool], Tensor[(588), float64]) {
  %936 = @func_4394() /* ty=(Tensor[(280), int64],) */;
  %937 = cast(meta[relay.Constant][36] /* ty=Tensor[(588), float64] */, dtype="float64") /* ty=Tensor[(588), float64] */;
  %938 = reshape(%937, newshape=[14, 14, 3]) /* ty=Tensor[(14, 14, 3), float64] */;
  %939 = cast(meta[relay.Constant][36] /* ty=Tensor[(588), float64] */, dtype="float64") /* ty=Tensor[(588), float64] */;
  %940 = %936.0;
  %941 = @func_8128(%938) /* ty=Tensor[(14, 14, 3), bool] */;
  %942 = tan(%939) /* ty=Tensor[(588), float64] */;
  (%940, %941, %942)
}

def @func_11767() -> (Tensor[(36), float32], float64) {
  %943 = @func_1837() /* ty=(Tensor[(13, 11, 13), bool], Tensor[(3, 4, 3), float32], float64, Tensor[(18, 2), float32], Tensor[(280), int64], Tensor[(36), float32]) */;
  %944 = %943.5;
  %945 = @func_3800() /* ty=float64 */;
  (%944, %945)
}

def @func_111(%var_108: Tensor[(3, 4, 3), float32]) -> Tensor[(3, 4, 3), float32] {
  %946 = cast(%var_108, dtype="float32") /* ty=Tensor[(3, 4, 3), float32] */;
  tan(%946) /* ty=Tensor[(3, 4, 3), float32] */
}

def @func_4409() -> Tensor[(3, 4, 3), float32] {
  %947 = @func_3179() /* ty=(Tensor[(3, 4, 3), float32],) */;
  %947.0
}

def @func_13603() -> (float64,) {
  %948 = @func_12159() /* ty=(float64,) */;
  %949 = %948.0;
  (%949,)
}

def @func_11206(%var_11202: Tensor[(2, 13, 6), float32]) -> Tensor[(2, 13, 6), float32] {
  %950 = cast(%var_11202, dtype="float32") /* ty=Tensor[(2, 13, 6), float32] */;
  tan(%950) /* ty=Tensor[(2, 13, 6), float32] */
}

def @func_1415(%var_1396: float32, %var_1407: Tensor[(36), float32], %var_1408: Tensor[(280), int64]) -> (Tensor[(5, 2, 12), float32], Tensor[(14, 4, 5), float64], Tensor[(36), float32], Tensor[(280), int64]) {
  %951 = cast(%var_1396, dtype="float32") /* ty=float32 */;
  %952 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 2, 12), float32] */, dtype="float32") /* ty=Tensor[(5, 2, 12), float32] */;
  %953 = cast(%var_1396, dtype="float64") /* ty=float64 */;
  %954 = cast(%var_1407, dtype="float32") /* ty=Tensor[(36), float32] */;
  %955 = cast(%var_1408, dtype="int64") /* ty=Tensor[(280), int64] */;
  %956 = reshape(%953, newshape=[]) /* ty=float64 */;
  %957 = reshape(%954, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %958 = reshape(%955, newshape=[280]) /* ty=Tensor[(280), int64] */;
  %959 = @func_1178(%956, %957, %958) /* ty=(Tensor[(8, 6, 14), float64], Tensor[(3, 4, 3), float32], Tensor[(36), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64], Tensor[(14, 4, 5), int64]) */;
  %960 = floor_mod(%951, %952) /* ty=Tensor[(5, 2, 12), float32] */;
  %961 = %959.3;
  (%960, %961, %var_1407, %var_1408)
}

def @func_10213(%var_10178: Tensor[(5, 4, 11), float64]) -> (Tensor[(8, 13, 12), bool], Tensor[(5, 4, 11), float32]) {
  %962 = @func_8303() /* ty=(Tensor[(8, 13, 12), bool],) */;
  %963 = cast(%var_10178, dtype="float64") /* ty=Tensor[(5, 4, 11), float64] */;
  %964 = acos(%963) /* ty=Tensor[(5, 4, 11), float64] */;
  %965 = cast(%964, dtype="float32") /* ty=Tensor[(5, 4, 11), float32] */;
  %966 = %962.0;
  %967 = sigmoid(%965) /* ty=Tensor[(5, 4, 11), float32] */;
  (%966, %967)
}

def @func_5345() -> (Tensor[(8, 13, 12), bool], Tensor[(8, 13, 12), bool]) {
  %968 = @func_5180() /* ty=float64 */;
  %969 = cast(%968, dtype="bool") /* ty=bool */;
  %970 = cast(meta[relay.Constant][38] /* ty=Tensor[(8, 13, 12), float64] */, dtype="bool") /* ty=Tensor[(8, 13, 12), bool] */;
  %971 = cast(%968, dtype="bool") /* ty=bool */;
  %972 = cast(meta[relay.Constant][38] /* ty=Tensor[(8, 13, 12), float64] */, dtype="bool") /* ty=Tensor[(8, 13, 12), bool] */;
  %973 = logical_or(%969, %970) /* ty=Tensor[(8, 13, 12), bool] */;
  %974 = not_equal(%971, %972) /* ty=Tensor[(8, 13, 12), bool] */;
  (%973, %974)
}

def @func_8962() -> float64 {
  %975 = @func_3445() /* ty=(float64, float64, float64, float64, float64) */;
  %975.3
}

def @func_15467() -> float64 {
  %976 = @func_13566() /* ty=(float64,) */;
  %976.0
}

def @func_2726() -> float64 {
  @func_2294() /* ty=float64 */
}

def @func_6865() -> (float64,) {
  %977 = @func_4618() /* ty=(float64, float64) */;
  %978 = %977.1;
  (%978,)
}

def @func_7622() -> (Tensor[(3, 4, 3), float32], Tensor[(14, 4, 5), int64], Tensor[(70, 4), int64], float64) {
  %979 = @func_3179() /* ty=(Tensor[(3, 4, 3), float32],) */;
  %980 = cast(meta[relay.Constant][39] /* ty=Tensor[(70, 4), int64] */, dtype="int64") /* ty=Tensor[(70, 4), int64] */;
  %981 = cast(meta[relay.Constant][39] /* ty=Tensor[(70, 4), int64] */, dtype="int64") /* ty=Tensor[(70, 4), int64] */;
  %982 = reshape(%980, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), int64] */;
  %983 = reshape(%981, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), int64] */;
  %984 = @func_982(%982, %983) /* ty=(Tensor[(14, 4, 5), int64], Tensor[(14, 4, 5), float64]) */;
  %985 = @func_7383() /* ty=(float64, Tensor[(36, 1), float32], Tensor[(36), float32]) */;
  %986 = %979.0;
  %987 = %984.0;
  %988 = %985.0;
  (%986, %987, meta[relay.Constant][39] /* ty=Tensor[(70, 4), int64] */, %988)
}

def @func_6116(%var_6110: Tensor[(286), int64]) -> (Tensor[(10, 6, 11), uint8], Tensor[(2, 13, 11), int64], Tensor[(286), int64]) {
  %989 = @func_3142() /* ty=(float64, float64) */;
  %990 = %989.0;
  %991 = cast(%990, dtype="int32") /* ty=int32 */;
  %992 = cast(meta[relay.Constant][40] /* ty=Tensor[(10, 6, 11), float64] */, dtype="int32") /* ty=Tensor[(10, 6, 11), int32] */;
  %993 = bitwise_xor(%991, %992) /* ty=Tensor[(10, 6, 11), int32] */;
  %994 = cast(%993, dtype="uint8") /* ty=Tensor[(10, 6, 11), uint8] */;
  %995 = cast(%990, dtype="uint8") /* ty=uint8 */;
  %996 = cast(%990, dtype="int64") /* ty=int64 */;
  %997 = cast(%var_6110, dtype="int64") /* ty=Tensor[(286), int64] */;
  %998 = reshape(%996, newshape=[]) /* ty=int64 */;
  %999 = reshape(%997, newshape=[2, 13, 11]) /* ty=Tensor[(2, 13, 11), int64] */;
  %1000 = @func_3597(%998, %999) /* ty=(Tensor[(2, 13, 11), int64], Tensor[(280), int64], Tensor[(70, 4), int64], Tensor[(2, 13, 11), float32], Tensor[(14, 4, 5), float64]) */;
  %1001 = multiply(%994, %995) /* ty=Tensor[(10, 6, 11), uint8] */;
  %1002 = %1000.0;
  (%1001, %1002, %var_6110)
}

def @func_11235() -> (Tensor[(36), float32],) {
  %1003 = @func_10914() /* ty=(Tensor[(280), int64], Tensor[(?, 36), float64], Tensor[(36), float32], float64) */;
  %1004 = %1003.2;
  (%1004,)
}

def @func_9930() -> float64 {
  %1005 = @func_7816() /* ty=(float64, float64) */;
  %1005.1
}

def @func_11643() -> (float64, Tensor[(8, 13, 12), int8], Tensor[(5, 10, 7), uint32], Tensor[(350), uint32]) {
  %1006 = @func_5345() /* ty=(Tensor[(8, 13, 12), bool], Tensor[(8, 13, 12), bool]) */;
  %1007 = %1006.0;
  %1008 = @func_3142() /* ty=(float64, float64) */;
  %1009 = %1008.1;
  %1010 = cast(%1007, dtype="int8") /* ty=Tensor[(8, 13, 12), int8] */;
  %1011 = cast(%1009, dtype="int8") /* ty=int8 */;
  %1012 = @func_3310() /* ty=float64 */;
  %1013 = cast(%1012, dtype="uint32") /* ty=uint32 */;
  %1014 = cast(meta[relay.Constant][41] /* ty=Tensor[(350), uint32] */, dtype="uint32") /* ty=Tensor[(350), uint32] */;
  %1015 = reshape(%1013, newshape=[]) /* ty=uint32 */;
  %1016 = reshape(%1014, newshape=[5, 10, 7]) /* ty=Tensor[(5, 10, 7), uint32] */;
  %1017 = @func_5280(%1015, %1016) /* ty=(Tensor[(5, 10, 7), uint32],) */;
  %1018 = logical_xor(%1010, %1011) /* ty=Tensor[(8, 13, 12), int8] */;
  %1019 = %1017.0;
  (%1012, %1018, %1019, meta[relay.Constant][41] /* ty=Tensor[(350), uint32] */)
}

def @func_13722() -> (Tensor[(9, 8, 16), float32], Tensor[(8, 13, 12), bool]) {
  %1020 = @func_9677() /* ty=(float64, float64) */;
  %1021 = %1020.1;
  %1022 = @func_12268() /* ty=Tensor[(9, 8, 16), float32] */;
  %1023 = cast(%1021, dtype="float32") /* ty=float32 */;
  %1024 = cast(%1022, dtype="float32") /* ty=Tensor[(9, 8, 16), float32] */;
  %1025 = multiply(%1023, %1024) /* ty=Tensor[(9, 8, 16), float32] */;
  %1026 = @func_6222() /* ty=Tensor[(8, 13, 12), bool] */;
  (%1025, %1026)
}

def @func_7236() -> (float64, Tensor[(3, 4, 3), float32]) {
  %1027 = @func_5577() /* ty=(float64,) */;
  %1028 = @func_6564() /* ty=(Tensor[(3, 4, 3), float32],) */;
  %1029 = %1027.0;
  %1030 = %1028.0;
  (%1029, %1030)
}

def @func_16266(%var_16251: Tensor[(9, 4), float32], %var_16252: Tensor[(280), int64]) -> (float64, Tensor[(36), float32], Tensor[(9, 4), float32], Tensor[(280), int64], Tensor[(280), int64], float64) {
  %1031 = @func_5712() /* ty=(float64,) */;
  %1032 = %1031.0;
  %1033 = cast(%1032, dtype="float32") /* ty=float32 */;
  %1034 = cast(%var_16251, dtype="float32") /* ty=Tensor[(9, 4), float32] */;
  %1035 = cast(%var_16252, dtype="int64") /* ty=Tensor[(280), int64] */;
  %1036 = reshape(%1033, newshape=[]) /* ty=float32 */;
  %1037 = reshape(%1034, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %1038 = reshape(%1035, newshape=[280]) /* ty=Tensor[(280), int64] */;
  %1039 = @func_1415(%1036, %1037, %1038) /* ty=(Tensor[(5, 2, 12), float32], Tensor[(14, 4, 5), float64], Tensor[(36), float32], Tensor[(280), int64]) */;
  %1040 = @func_13603() /* ty=(float64,) */;
  %1041 = %1039.2;
  %1042 = @func_13143() /* ty=Tensor[(280), int64] */;
  %1043 = %1040.0;
  (%1032, %1041, %var_16251, %var_16252, %1042, %1043)
}

def @func_15833(%var_15786: Tensor[(9, 14, 2), float64]) -> (Tensor[(9, 14, 2), float64], float64, float64, float64, Tensor[(280), int64], float64, Tensor[(9, 8, 16), float32], float64) {
  %1044 = cast(%var_15786, dtype="float64") /* ty=Tensor[(9, 14, 2), float64] */;
  %1045 = @func_5934() /* ty=(float64, Tensor[(9, 8, 16), float32], Tensor[(9, 8, 16), bool], Tensor[(36), float32]) */;
  %1046 = @func_12475() /* ty=(Tensor[(11, 13, 7), float32], Tensor[(280), int64], Tensor[(16, 15, 4), uint32], Tensor[(960), uint32]) */;
  %1047 = @func_7570() /* ty=(Tensor[(3, 4, 3), float32], float64, float64, Tensor[(280), int64]) */;
  %1048 = @func_5577() /* ty=(float64,) */;
  %1049 = log(%1044) /* ty=Tensor[(9, 14, 2), float64] */;
  %1050 = @func_7839() /* ty=float64 */;
  %1051 = @func_7839() /* ty=float64 */;
  %1052 = %1045.0;
  %1053 = %1046.1;
  %1054 = %1047.2;
  %1055 = @func_12040() /* ty=Tensor[(9, 8, 16), float32] */;
  %1056 = %1048.0;
  (%1049, %1050, %1051, %1052, %1053, %1054, %1055, %1056)
}

def @func_10298() -> float64 {
  @func_9930() /* ty=float64 */
}

def @func_10952() -> (Tensor[(8, 13, 12), bool], float64) {
  %1057 = @func_8303() /* ty=(Tensor[(8, 13, 12), bool],) */;
  %1058 = @func_10134() /* ty=(float64,) */;
  %1059 = %1057.0;
  %1060 = %1058.0;
  (%1059, %1060)
}

def @func_3509() -> float64 {
  %1061 = @func_3445() /* ty=(float64, float64, float64, float64, float64) */;
  %1061.2
}

def @func_7839() -> float64 {
  %1062 = @func_6034() /* ty=(float64, float64) */;
  %1062.1
}

def @func_13252() -> (float64, float64) {
  %1063 = @func_8179() /* ty=(float64, Tensor[(280), int64]) */;
  %1064 = @func_6547() /* ty=float64 */;
  %1065 = %1063.0;
  (%1064, %1065)
}

def @func_10914() -> (Tensor[(280), int64], Tensor[(?, 36), float64], Tensor[(36), float32], float64) {
  %1066 = @func_10641() /* ty=(Tensor[(3, 4, 3), float32], Tensor[(280), int64], Tensor[(45), float64], Tensor[(280), int64], Tensor[(280), int64]) */;
  %1067 = cast(meta[relay.Constant][42] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %1068 = reshape(%1067, newshape=[1, 36]) /* ty=Tensor[(1, 36), float32] */;
  %1069 = @func_3378(%1068) /* ty=(float64, Tensor[(16, 15, 8), uint64], Tensor[(?, 36), float64], Tensor[(16, 15, 8), uint64]) */;
  %1070 = @func_10134() /* ty=(float64,) */;
  %1071 = %1066.4;
  %1072 = %1069.2;
  %1073 = %1070.0;
  (%1071, %1072, meta[relay.Constant][42] /* ty=Tensor[(36), float32] */, %1073)
}

def @func_9119() -> (Tensor[(280), float32],) {
  %1074 = @func_7973() /* ty=(float64, Tensor[(280), float32]) */;
  %1075 = %1074.1;
  (%1075,)
}

def @func_8486() -> float64 {
  @func_8420() /* ty=float64 */
}

def @func_14126() -> (Tensor[(3, 4, 3), float32], float64) {
  %1076 = @func_3179() /* ty=(Tensor[(3, 4, 3), float32],) */;
  %1077 = @func_11888() /* ty=(float64,) */;
  %1078 = %1076.0;
  %1079 = %1077.0;
  (%1078, %1079)
}

def @func_10872() -> (float64,) {
  %1080 = @func_5180() /* ty=float64 */;
  (%1080,)
}

def @func_15758(%var_15753: float64, %var_15755: Tensor[(280), int64]) -> (Tensor[(7, 7, 7), float32], Tensor[(14, 4, 5), int64], float64, Tensor[(36), float32], Tensor[(280), int64]) {
  %1081 = cast(meta[relay.Constant][43] /* ty=Tensor[(7, 7, 7), float64] */, dtype="float64") /* ty=Tensor[(7, 7, 7), float64] */;
  %1082 = acosh(%1081) /* ty=Tensor[(7, 7, 7), float64] */;
  %1083 = cast(%1082, dtype="float64") /* ty=Tensor[(7, 7, 7), float64] */;
  %1084 = log10(%1083) /* ty=Tensor[(7, 7, 7), float64] */;
  %1085 = cast(%1084, dtype="float32") /* ty=Tensor[(7, 7, 7), float32] */;
  %1086 = cast(%var_15753, dtype="float64") /* ty=float64 */;
  %1087 = cast(meta[relay.Constant][44] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %1088 = cast(%var_15755, dtype="int64") /* ty=Tensor[(280), int64] */;
  %1089 = reshape(%1086, newshape=[]) /* ty=float64 */;
  %1090 = reshape(%1087, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %1091 = reshape(%1088, newshape=[280]) /* ty=Tensor[(280), int64] */;
  %1092 = @func_1178(%1089, %1090, %1091) /* ty=(Tensor[(8, 6, 14), float64], Tensor[(3, 4, 3), float32], Tensor[(36), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64], Tensor[(14, 4, 5), int64]) */;
  %1093 = asin(%1085) /* ty=Tensor[(7, 7, 7), float32] */;
  %1094 = %1092.5;
  (%1093, %1094, %var_15753, meta[relay.Constant][44] /* ty=Tensor[(36), float32] */, %var_15755)
}

def @func_13143() -> Tensor[(280), int64] {
  %1095 = @func_9016() /* ty=(Tensor[(280), int64],) */;
  %1095.0
}

def @func_6892() -> (Tensor[(280), int64],) {
  %1096 = @func_4080() /* ty=(Tensor[(280), int64],) */;
  %1097 = %1096.0;
  (%1097,)
}

def @func_10498() -> float64 {
  @func_2514() /* ty=float64 */
}

def @func_13205() -> float64 {
  @func_8486() /* ty=float64 */
}

def @func_14865(%var_14853: Tensor[(8, 15, 8), int8], %var_14854: Tensor[(8, 15, 8), int8]) -> (Tensor[(8, 15, 8), bool], float64) {
  %1098 = cast(%var_14854, dtype="bool") /* ty=Tensor[(8, 15, 8), bool] */;
  %1099 = shape_of(%var_14853, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1100 = cast(%var_14853, dtype="bool") /* ty=Tensor[(8, 15, 8), bool] */;
  %1101 = dyn.reshape(%1098, %1099, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1102 = greater_equal(%1100, %1101) /* ty=Tensor[(8, 15, 8), bool] */;
  %1103 = @func_8080() /* ty=float64 */;
  (%1102, %1103)
}

def @func_12268() -> Tensor[(9, 8, 16), float32] {
  @func_11406() /* ty=Tensor[(9, 8, 16), float32] */
}

def @func_3310() -> float64 {
  @func_2475() /* ty=float64 */
}

def @func_16064() -> (Tensor[(5, 6, 1), float64],) {
  %1104 = cast(meta[relay.Constant][45] /* ty=Tensor[(5, 6, 1), float64] */, dtype="float64") /* ty=Tensor[(5, 6, 1), float64] */;
  %1105 = sigmoid(%1104) /* ty=Tensor[(5, 6, 1), float64] */;
  (%1105,)
}

def @func_8816() -> (float64, float64, float64) {
  %1106 = @func_6444() /* ty=(float64, Tensor[(280), int64], float64) */;
  %1107 = @func_5180() /* ty=float64 */;
  %1108 = %1106.2;
  %1109 = @func_3800() /* ty=float64 */;
  (%1107, %1108, %1109)
}

def @func_2475() -> float64 {
  %1110 = @func_2353() /* ty=(float64,) */;
  %1110.0
}

def @func_5712() -> (float64,) {
  %1111 = @func_3310() /* ty=float64 */;
  (%1111,)
}

def @func_6833() -> (float64, float64, Tensor[(280), int64]) {
  %1112 = @func_2353() /* ty=(float64,) */;
  %1113 = @func_5946() /* ty=(Tensor[(280), int64], float64) */;
  %1114 = @func_3800() /* ty=float64 */;
  %1115 = %1112.0;
  %1116 = %1113.0;
  (%1114, %1115, %1116)
}

def @func_3597(%var_3563: int64, %var_3564: Tensor[(2, 13, 11), int64]) -> (Tensor[(2, 13, 11), int64], Tensor[(280), int64], Tensor[(70, 4), int64], Tensor[(2, 13, 11), float32], Tensor[(14, 4, 5), float64]) {
  %1117 = cast(%var_3563, dtype="int64") /* ty=int64 */;
  %1118 = cast(%var_3564, dtype="int64") /* ty=Tensor[(2, 13, 11), int64] */;
  %1119 = cast(meta[relay.Constant][46] /* ty=Tensor[(70, 4), int64] */, dtype="int64") /* ty=Tensor[(70, 4), int64] */;
  %1120 = reshape(%1119, newshape=[280]) /* ty=Tensor[(280), int64] */;
  %1121 = @func_2069(%1120) /* ty=(Tensor[(3, 4, 3), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64], Tensor[(18, 2), float64]) */;
  %1122 = cast(%var_3564, dtype="float32") /* ty=Tensor[(2, 13, 11), float32] */;
  %1123 = cast(meta[relay.Constant][46] /* ty=Tensor[(70, 4), int64] */, dtype="int64") /* ty=Tensor[(70, 4), int64] */;
  %1124 = reshape(%1123, newshape=[280]) /* ty=Tensor[(280), int64] */;
  %1125 = @func_2069(%1124) /* ty=(Tensor[(3, 4, 3), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64], Tensor[(18, 2), float64]) */;
  %1126 = bitwise_and(%1117, %1118) /* ty=Tensor[(2, 13, 11), int64] */;
  %1127 = %1121.2;
  %1128 = sigmoid(%1122) /* ty=Tensor[(2, 13, 11), float32] */;
  %1129 = %1125.1;
  (%1126, %1127, meta[relay.Constant][46] /* ty=Tensor[(70, 4), int64] */, %1128, %1129)
}

def @func_10341() -> float64 {
  %1130 = @func_3142() /* ty=(float64, float64) */;
  %1130.0
}

def @func_11074(%var_11065: Tensor[(36, 1), float32]) -> (float64, float64, Tensor[(36, 1), float32], Tensor[(154, 10), uint16]) {
  %1131 = @func_6034() /* ty=(float64, float64) */;
  %1132 = cast(%var_11065, dtype="float32") /* ty=Tensor[(36, 1), float32] */;
  %1133 = cast(meta[relay.Constant][47] /* ty=Tensor[(154, 10), uint16] */, dtype="uint16") /* ty=Tensor[(154, 10), uint16] */;
  %1134 = reshape(%1132, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %1135 = reshape(%1133, newshape=[1540]) /* ty=Tensor[(1540), uint16] */;
  %1136 = @func_6366(%1134, %1135) /* ty=(float64, Tensor[(16, 15, 8), uint64], Tensor[(36), float32], Tensor[(14, 10, 11), uint16], Tensor[(1540), uint16]) */;
  %1137 = %1131.0;
  %1138 = %1136.0;
  (%1137, %1138, %var_11065, meta[relay.Constant][47] /* ty=Tensor[(154, 10), uint16] */)
}

def @func_15985(%var_15975: Tensor[(11, 10, 7), int64], %var_15976: Tensor[(11, 10, 7), int64]) -> (Tensor[(11, 10, 7), int64],) {
  %1139 = cast(%var_15976, dtype="int64") /* ty=Tensor[(11, 10, 7), int64] */;
  %1140 = shape_of(%var_15975, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1141 = cast(%var_15975, dtype="int64") /* ty=Tensor[(11, 10, 7), int64] */;
  %1142 = dyn.reshape(%1139, %1140, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1143 = add(%1141, %1142) /* ty=Tensor[(11, 10, 7), int64] */;
  (%1143,)
}

def @func_9843() -> Tensor[(3, 4, 3), float32] {
  %1144 = @func_6564() /* ty=(Tensor[(3, 4, 3), float32],) */;
  %1144.0
}

def @func_14000(%var_13986: Tensor[(16, 15, 15), float32], %var_13991: Tensor[(16, 15, 15), float32]) -> (Tensor[(16, 15, 15), float32], Tensor[(16, 15, 15), float32]) {
  %1145 = cast(%var_13986, dtype="float32") /* ty=Tensor[(16, 15, 15), float32] */;
  %1146 = cast(%var_13991, dtype="float32") /* ty=Tensor[(16, 15, 15), float32] */;
  %1147 = shape_of(%var_13986, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1148 = cast(%var_13986, dtype="float32") /* ty=Tensor[(16, 15, 15), float32] */;
  %1149 = dyn.reshape(%1146, %1147, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1150 = sin(%1145) /* ty=Tensor[(16, 15, 15), float32] */;
  %1151 = mod(%1148, %1149) /* ty=Tensor[(16, 15, 15), float32] */;
  (%1150, %1151)
}

def @func_12475() -> (Tensor[(11, 13, 7), float32], Tensor[(280), int64], Tensor[(16, 15, 4), uint32], Tensor[(960), uint32]) {
  %1152 = @func_9362() /* ty=(float64, Tensor[(11, 13, 7), float32]) */;
  %1153 = @func_4216() /* ty=(Tensor[(280), int64], Tensor[(280), int64], float64, float64) */;
  %1154 = cast(meta[relay.Constant][48] /* ty=Tensor[(960), uint32] */, dtype="uint32") /* ty=Tensor[(960), uint32] */;
  %1155 = cast(meta[relay.Constant][48] /* ty=Tensor[(960), uint32] */, dtype="uint32") /* ty=Tensor[(960), uint32] */;
  %1156 = reshape(%1154, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), uint32] */;
  %1157 = reshape(%1155, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), uint32] */;
  %1158 = %1152.1;
  %1159 = %1153.1;
  %1160 = @func_9080(%1156, %1157) /* ty=Tensor[(16, 15, 4), uint32] */;
  (%1158, %1159, %1160, meta[relay.Constant][48] /* ty=Tensor[(960), uint32] */)
}

def @func_2514() -> float64 {
  @func_2198() /* ty=float64 */
}

def @func_4216() -> (Tensor[(280), int64], Tensor[(280), int64], float64, float64) {
  %1161 = @func_2544() /* ty=(Tensor[(280), int64],) */;
  %1162 = @func_3263() /* ty=(Tensor[(280), int64], float64, Tensor[(36), float32], Tensor[(3, 4, 3), float32], float64, float64) */;
  %1163 = @func_3267() /* ty=Tensor[(280), int64] */;
  %1164 = %1161.0;
  %1165 = %1162.5;
  %1166 = @func_3800() /* ty=float64 */;
  (%1163, %1164, %1165, %1166)
}

def @func_5112(%var_5079: Tensor[(5, 56), float64], %var_5083: Tensor[(5, 56), bool]) -> (Tensor[(36), float32], float64, Tensor[(3, 4, 3), float32], float64, float64, Tensor[(5, 56), uint32], float64, Tensor[(5, 56), int64], Tensor[(5, 56), float32], float64) {
  %1167 = @func_3263() /* ty=(Tensor[(280), int64], float64, Tensor[(36), float32], Tensor[(3, 4, 3), float32], float64, float64) */;
  %1168 = cast(meta[relay.Constant][49] /* ty=Tensor[(5, 56), int64] */, dtype="int64") /* ty=Tensor[(5, 56), int64] */;
  %1169 = reshape(%1168, newshape=[280]) /* ty=Tensor[(280), int64] */;
  %1170 = @func_2069(%1169) /* ty=(Tensor[(3, 4, 3), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64], Tensor[(18, 2), float64]) */;
  %1171 = @func_2909() /* ty=(float64, float64) */;
  %1172 = @func_3142() /* ty=(float64, float64) */;
  %1173 = cast(meta[relay.Constant][50] /* ty=Tensor[(5, 56), int64] */, dtype="uint32") /* ty=Tensor[(5, 56), uint32] */;
  %1174 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(5, 56), int64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1175 = cast(meta[relay.Constant][49] /* ty=Tensor[(5, 56), int64] */, dtype="uint32") /* ty=Tensor[(5, 56), uint32] */;
  %1176 = dyn.reshape(%1173, %1174, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %1177 = cast(meta[relay.Constant][49] /* ty=Tensor[(5, 56), int64] */, dtype="float64") /* ty=Tensor[(5, 56), float64] */;
  %1178 = cos(%1177) /* ty=Tensor[(5, 56), float64] */;
  %1179 = cast(%var_5079, dtype="bool") /* ty=Tensor[(5, 56), bool] */;
  %1180 = shape_of(%1178, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1181 = cast(%1178, dtype="bool") /* ty=Tensor[(5, 56), bool] */;
  %1182 = dyn.reshape(%1179, %1180, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1183 = less_equal(%1181, %1182) /* ty=Tensor[(5, 56), bool] */;
  %1184 = cast(%var_5083, dtype="int64") /* ty=Tensor[(5, 56), int64] */;
  %1185 = shape_of(%1183, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1186 = cast(%1183, dtype="int64") /* ty=Tensor[(5, 56), int64] */;
  %1187 = dyn.reshape(%1184, %1185, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %1188 = cast(%1183, dtype="float32") /* ty=Tensor[(5, 56), float32] */;
  %1189 = @func_3656() /* ty=(float64, Tensor[(280), int64]) */;
  %1190 = %1167.2;
  %1191 = @func_2514() /* ty=float64 */;
  %1192 = %1170.0;
  %1193 = %1171.0;
  %1194 = %1172.0;
  %1195 = multiply(%1175, %1176) /* ty=Tensor[(5, 56), uint32] */;
  %1196 = @func_2475() /* ty=float64 */;
  %1197 = minimum(%1186, %1187) /* ty=Tensor[(5, 56), int64] */;
  %1198 = asin(%1188) /* ty=Tensor[(5, 56), float32] */;
  %1199 = %1189.0;
  (%1190, %1191, %1192, %1193, %1194, %1195, %1196, %1197, %1198, %1199)
}

def @func_15065() -> (Tensor[(280), int64],) {
  %1200 = @func_5240() /* ty=Tensor[(280), int64] */;
  (%1200,)
}

def @func_5577() -> (float64,) {
  %1201 = @func_5417() /* ty=(Tensor[(280), int64], float64) */;
  %1202 = %1201.1;
  (%1202,)
}

def @func_3989() -> (Tensor[(36), float32], float64, Tensor[(3, 4, 3), float32]) {
  %1203 = @func_3106() /* ty=(Tensor[(36), float32], float64) */;
  %1204 = @func_1837() /* ty=(Tensor[(13, 11, 13), bool], Tensor[(3, 4, 3), float32], float64, Tensor[(18, 2), float32], Tensor[(280), int64], Tensor[(36), float32]) */;
  %1205 = %1203.0;
  %1206 = @func_3800() /* ty=float64 */;
  %1207 = %1204.1;
  (%1205, %1206, %1207)
}

def @func_10160() -> (Tensor[(3, 4, 3), float32], Tensor[(9, 7, 2), bool], Tensor[(63, 2), bool], Tensor[(1540), uint16]) {
  %1208 = cast(meta[relay.Constant][51] /* ty=Tensor[(63, 2), bool] */, dtype="bool") /* ty=Tensor[(63, 2), bool] */;
  %1209 = cast(meta[relay.Constant][51] /* ty=Tensor[(63, 2), bool] */, dtype="bool") /* ty=Tensor[(63, 2), bool] */;
  %1210 = cast(meta[relay.Constant][52] /* ty=Tensor[(1540), uint16] */, dtype="uint16") /* ty=Tensor[(1540), uint16] */;
  %1211 = reshape(%1208, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), bool] */;
  %1212 = reshape(%1209, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), bool] */;
  %1213 = reshape(%1210, newshape=[1540]) /* ty=Tensor[(1540), uint16] */;
  %1214 = @func_2762(%1211, %1212, %1213) /* ty=(Tensor[(9, 7, 2), bool], Tensor[(14, 10, 11), uint16], Tensor[(1540), uint16], float64) */;
  %1215 = @func_4409() /* ty=Tensor[(3, 4, 3), float32] */;
  %1216 = %1214.0;
  (%1215, %1216, meta[relay.Constant][51] /* ty=Tensor[(63, 2), bool] */, meta[relay.Constant][52] /* ty=Tensor[(1540), uint16] */)
}

def @func_4452() -> (float64,) {
  %1217 = @func_3045() /* ty=(float64, float64, float64) */;
  %1218 = %1217.2;
  (%1218,)
}

def @func_4618() -> (float64, float64) {
  %1219 = @func_2353() /* ty=(float64,) */;
  %1220 = @func_2198() /* ty=float64 */;
  %1221 = %1219.0;
  (%1220, %1221)
}

def @func_8720(%var_8713: Tensor[(143), float64]) -> (Tensor[(280), int64], Tensor[(14, 4, 5), float64], Tensor[(36), float32], Tensor[(143), float64]) {
  %1222 = @func_2544() /* ty=(Tensor[(280), int64],) */;
  %1223 = cast(%var_8713, dtype="float64") /* ty=Tensor[(143), float64] */;
  %1224 = reshape(%1223, newshape=[1, 13, 11]) /* ty=Tensor[(1, 13, 11), float64] */;
  %1225 = @func_3845(%1224) /* ty=(Tensor[(?, 13, 11), bool], Tensor[(3, 4, 3), float32], Tensor[(36), float32]) */;
  %1226 = %1222.0;
  %1227 = @func_7782() /* ty=Tensor[(14, 4, 5), float64] */;
  %1228 = %1225.2;
  (%1226, %1227, %1228, %var_8713)
}

def @func_13897() -> (float64,) {
  %1229 = @func_4136() /* ty=(float64, float64) */;
  %1230 = %1229.0;
  (%1230,)
}

def @func_7973() -> (float64, Tensor[(280), float32]) {
  %1231 = @func_6149() /* ty=(Tensor[(280), int64],) */;
  %1232 = %1231.0;
  %1233 = cast(%1232, dtype="float32") /* ty=Tensor[(280), float32] */;
  %1234 = @func_5646() /* ty=float64 */;
  %1235 = acosh(%1233) /* ty=Tensor[(280), float32] */;
  (%1234, %1235)
}

def @func_7083() -> float64 {
  %1236 = @func_4618() /* ty=(float64, float64) */;
  %1236.1
}

def @func_5676() -> float64 {
  @func_3187() /* ty=float64 */
}

def @func_10003(%var_9983: Tensor[(45, 1), float64]) -> (float64, Tensor[(45, 1), float64], Tensor[(143), float64], Tensor[(1001), float64], float64) {
  %1237 = cast(%var_9983, dtype="float64") /* ty=Tensor[(45, 1), float64] */;
  %1238 = cast(meta[relay.Constant][53] /* ty=Tensor[(143), float64] */, dtype="float64") /* ty=Tensor[(143), float64] */;
  %1239 = reshape(%1237, newshape=[45]) /* ty=Tensor[(45), float64] */;
  %1240 = reshape(%1238, newshape=[143, 1]) /* ty=Tensor[(143, 1), float64] */;
  %1241 = @func_4957(%1239, %1240) /* ty=(Tensor[(280), int64], Tensor[(3, 4, 3), float32], Tensor[(?, 13, 11), bool], Tensor[(143, 1), float64], Tensor[(?, 9, 5), bool], float64, float64, Tensor[(3, 4, 3), float32]) */;
  %1242 = @func_4772() /* ty=(Tensor[(3, 4, 3), float32], Tensor[(11, 13, 7), float32], Tensor[(1001), float64]) */;
  %1243 = %1242.2;
  %1244 = cast(%1243, dtype="float64") /* ty=Tensor[(1001), float64] */;
  %1245 = %1241.5;
  %1246 = asinh(%1244) /* ty=Tensor[(1001), float64] */;
  %1247 = @func_8429() /* ty=float64 */;
  (%1245, %var_9983, meta[relay.Constant][53] /* ty=Tensor[(143), float64] */, %1246, %1247)
}

def @func_5796() -> (float64, Tensor[(14, 4, 5), float64], Tensor[(5, 56), int64], Tensor[(18, 2), uint8]) {
  %1248 = cast(meta[relay.Constant][54] /* ty=Tensor[(5, 56), int64] */, dtype="int64") /* ty=Tensor[(5, 56), int64] */;
  %1249 = cast(meta[relay.Constant][54] /* ty=Tensor[(5, 56), int64] */, dtype="int64") /* ty=Tensor[(5, 56), int64] */;
  %1250 = reshape(%1248, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), int64] */;
  %1251 = reshape(%1249, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), int64] */;
  %1252 = @func_982(%1250, %1251) /* ty=(Tensor[(14, 4, 5), int64], Tensor[(14, 4, 5), float64]) */;
  %1253 = cast(meta[relay.Constant][55] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %1254 = reshape(%1253, newshape=[18, 2]) /* ty=Tensor[(18, 2), float32] */;
  %1255 = @func_1942(%1254) /* ty=(Tensor[(18, 2), float32], Tensor[(16, 15, 8), uint64]) */;
  %1256 = %1255.0;
  %1257 = cast(meta[relay.Constant][55] /* ty=Tensor[(36), float32] */, dtype="uint8") /* ty=Tensor[(36), uint8] */;
  %1258 = shape_of(%1256, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1259 = cast(%1256, dtype="uint8") /* ty=Tensor[(18, 2), uint8] */;
  %1260 = dyn.reshape(%1257, %1258, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %1261 = @func_2697() /* ty=float64 */;
  %1262 = %1252.1;
  %1263 = subtract(%1259, %1260) /* ty=Tensor[(18, 2), uint8] */;
  (%1261, %1262, meta[relay.Constant][54] /* ty=Tensor[(5, 56), int64] */, %1263)
}

def @func_982(%var_959: Tensor[(14, 4, 5), int64], %var_960: Tensor[(14, 4, 5), int64]) -> (Tensor[(14, 4, 5), int64], Tensor[(14, 4, 5), float64]) {
  %1264 = cast(%var_960, dtype="int64") /* ty=Tensor[(14, 4, 5), int64] */;
  %1265 = shape_of(%var_959, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1266 = cast(%var_959, dtype="int64") /* ty=Tensor[(14, 4, 5), int64] */;
  %1267 = dyn.reshape(%1264, %1265, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1268 = cast(%var_959, dtype="float64") /* ty=Tensor[(14, 4, 5), float64] */;
  %1269 = cos(%1268) /* ty=Tensor[(14, 4, 5), float64] */;
  %1270 = cast(%1269, dtype="float64") /* ty=Tensor[(14, 4, 5), float64] */;
  %1271 = logical_xor(%1266, %1267) /* ty=Tensor[(14, 4, 5), int64] */;
  %1272 = sin(%1270) /* ty=Tensor[(14, 4, 5), float64] */;
  (%1271, %1272)
}

def @func_13473() -> (float64, float64, float64, Tensor[(9, 8, 16), float32], float64) {
  %1273 = @func_3263() /* ty=(Tensor[(280), int64], float64, Tensor[(36), float32], Tensor[(3, 4, 3), float32], float64, float64) */;
  %1274 = @func_8613() /* ty=(float64,) */;
  %1275 = @func_5934() /* ty=(float64, Tensor[(9, 8, 16), float32], Tensor[(9, 8, 16), bool], Tensor[(36), float32]) */;
  %1276 = @func_13252() /* ty=(float64, float64) */;
  %1277 = %1273.1;
  %1278 = %1274.0;
  %1279 = @func_7839() /* ty=float64 */;
  %1280 = %1275.1;
  %1281 = %1276.0;
  (%1277, %1278, %1279, %1280, %1281)
}

def @func_12825(%var_12815: Tensor[(36), float32]) -> (Tensor[(11, 13, 7), float32], float64, Tensor[(16, 15, 8), uint64], Tensor[(36), float32]) {
  %1282 = @func_11973() /* ty=(float64, Tensor[(11, 13, 7), float32]) */;
  %1283 = @func_3045() /* ty=(float64, float64, float64) */;
  %1284 = cast(%var_12815, dtype="float32") /* ty=Tensor[(36), float32] */;
  %1285 = reshape(%1284, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %1286 = @func_2448(%1285) /* ty=(float64, Tensor[(14, 4, 5), float64], Tensor[(36), float32], Tensor[(280), int64], Tensor[(16, 15, 8), uint64], float64, Tensor[(3, 4, 3), float32]) */;
  %1287 = %1282.1;
  %1288 = %1283.2;
  %1289 = %1286.4;
  (%1287, %1288, %1289, %var_12815)
}

def @func_2851() -> (float64,) {
  %1290 = @func_2475() /* ty=float64 */;
  (%1290,)
}

def @func_12011() -> (float64, Tensor[(3, 4, 3), bool], Tensor[(36), float32]) {
  %1291 = @func_5577() /* ty=(float64,) */;
  %1292 = cast(meta[relay.Constant][56] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %1293 = reshape(%1292, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float32] */;
  %1294 = @func_10998(%1293) /* ty=(Tensor[(3, 4, 3), bool], Tensor[(280), int64]) */;
  %1295 = %1291.0;
  %1296 = %1294.0;
  (%1295, %1296, meta[relay.Constant][56] /* ty=Tensor[(36), float32] */)
}

def @func_15447() -> (float64,) {
  %1297 = @func_10341() /* ty=float64 */;
  (%1297,)
}

def @func_3656() -> (float64, Tensor[(280), int64]) {
  %1298 = @func_1837() /* ty=(Tensor[(13, 11, 13), bool], Tensor[(3, 4, 3), float32], float64, Tensor[(18, 2), float32], Tensor[(280), int64], Tensor[(36), float32]) */;
  %1299 = @func_2697() /* ty=float64 */;
  %1300 = %1298.4;
  (%1299, %1300)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2071(%var_2070: Tensor[(280), int64]) -> (Tensor[(3, 4, 3), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64], Tensor[(18, 2), float64]) {
  %14 = fn (%var_2054: Tensor[(280), int64]) -> (Tensor[(3, 4, 3), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64], Tensor[(18, 2), float64]) {
    %0 = @func_1837() /* ty=(Tensor[(13, 11, 13), bool], Tensor[(3, 4, 3), float32], float64, Tensor[(18, 2), float32], Tensor[(280), int64], Tensor[(36), float32]) */;
    %1 = cast(%var_2054, dtype="int64") /* ty=Tensor[(280), int64] */;
    %2 = cast(%var_2054, dtype="int64") /* ty=Tensor[(280), int64] */;
    %3 = reshape(%1, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), int64] */;
    %4 = reshape(%2, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), int64] */;
    %5 = @func_982(%3, %4) /* ty=(Tensor[(14, 4, 5), int64], Tensor[(14, 4, 5), float64]) */;
    %6 = %0.1;
    %7 = cast(%6, dtype="float32") /* ty=Tensor[(3, 4, 3), float32] */;
    %8 = reshape(%7, newshape=[18, 2]) /* ty=Tensor[(18, 2), float32] */;
    %9 = @func_1942(%8) /* ty=(Tensor[(18, 2), float32], Tensor[(16, 15, 8), uint64]) */;
    %10 = %9.0;
    %11 = cast(%10, dtype="float64") /* ty=Tensor[(18, 2), float64] */;
    %12 = %5.1;
    %13 = atan(%11) /* ty=Tensor[(18, 2), float64] */;
    (%6, %12, %var_2054, %13)
  };
  %14(%var_2070) /* ty=(Tensor[(3, 4, 3), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64], Tensor[(18, 2), float64]) */
}

def @func_11781() -> (Tensor[(8, 13, 12), int8],) {
  @func_11779() /* ty=(Tensor[(8, 13, 12), int8],) */
}

def @func_9843() -> Tensor[(3, 4, 3), float32] {
  %15 = @func_6564() /* ty=(Tensor[(3, 4, 3), float32],) */;
  %15.0
}

def @func_12994() -> (float64, float64, float64, float64) {
  %21 = fn () -> (float64, float64, float64, float64) {
    %16 = @func_6833() /* ty=(float64, float64, Tensor[(280), int64]) */;
    %17 = @func_7083() /* ty=float64 */;
    %18 = @func_10230() /* ty=float64 */;
    %19 = @func_7839() /* ty=float64 */;
    %20 = %16.1;
    (%17, %18, %19, %20)
  };
  %21() /* ty=(float64, float64, float64, float64) */
}

def @func_7284(%var_7278: Tensor[(9, 8, 6), float64], %var_7279: Tensor[(9, 8, 6), float64]) -> (Tensor[(9, 8, 6), float64],) {
  %22 = cast(%var_7279, dtype="float64") /* ty=Tensor[(9, 8, 6), float64] */;
  %23 = shape_of(%var_7278, dtype="int32") /* ty=Tensor[(3), int32] */;
  %24 = cast(%var_7278, dtype="float64") /* ty=Tensor[(9, 8, 6), float64] */;
  %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %26 = floor_mod(%24, %25) /* ty=Tensor[(9, 8, 6), float64] */;
  (%26,)
}

def @func_13176() -> (Tensor[(8, 13, 12), bool],) {
  %27 = @func_10952() /* ty=(Tensor[(8, 13, 12), bool], float64) */;
  %28 = %27.0;
  (%28,)
}

def @func_4699() -> (float64,) {
  %29 = @func_2353() /* ty=(float64,) */;
  %30 = %29.0;
  (%30,)
}

def @func_14510(%var_14509: Tensor[(36), float32]) -> (float64, Tensor[(960), uint32], Tensor[(36), float32], Tensor[(36), float32], float64, Tensor[(280), int64], Tensor[(16, 15, 4), float64]) {
  %51 = fn (%var_14478: Tensor[(36), float32]) -> (float64, Tensor[(960), uint32], Tensor[(36), float32], Tensor[(36), float32], float64, Tensor[(280), int64], Tensor[(16, 15, 4), float64]) {
    %31 = @func_10656() /* ty=(float64,) */;
    %32 = cast(%var_14478, dtype="float32") /* ty=Tensor[(36), float32] */;
    %33 = reshape(%32, newshape=[36]) /* ty=Tensor[(36), float32] */;
    %34 = @func_10432(%33) /* ty=(float64, float64, Tensor[(280), int64], Tensor[(143, 1), float64], Tensor[(36), float32], Tensor[(36), float32]) */;
    %35 = @func_3045() /* ty=(float64, float64, float64) */;
    %36 = cast(meta[relay.Constant][0] /* ty=Tensor[(960), uint32] */, dtype="uint32") /* ty=Tensor[(960), uint32] */;
    %37 = cast(meta[relay.Constant][0] /* ty=Tensor[(960), uint32] */, dtype="uint32") /* ty=Tensor[(960), uint32] */;
    %38 = reshape(%36, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), uint32] */;
    %39 = reshape(%37, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), uint32] */;
    %40 = @func_9080(%38, %39) /* ty=Tensor[(16, 15, 4), uint32] */;
    %41 = cast(%40, dtype="float32") /* ty=Tensor[(16, 15, 4), float32] */;
    %42 = sigmoid(%41) /* ty=Tensor[(16, 15, 4), float32] */;
    %43 = cast(%42, dtype="float64") /* ty=Tensor[(16, 15, 4), float64] */;
    %44 = atan(%43) /* ty=Tensor[(16, 15, 4), float64] */;
    %45 = cast(%44, dtype="float64") /* ty=Tensor[(16, 15, 4), float64] */;
    %46 = %31.0;
    %47 = %34.5;
    %48 = %35.2;
    %49 = @func_3267() /* ty=Tensor[(280), int64] */;
    %50 = rsqrt(%45) /* ty=Tensor[(16, 15, 4), float64] */;
    (%46, meta[relay.Constant][0] /* ty=Tensor[(960), uint32] */, %47, %var_14478, %48, %49, %50)
  };
  %51(%var_14509) /* ty=(float64, Tensor[(960), uint32], Tensor[(36), float32], Tensor[(36), float32], float64, Tensor[(280), int64], Tensor[(16, 15, 4), float64]) */
}

def @func_7237() -> (float64, Tensor[(3, 4, 3), float32]) {
  %56 = fn () -> (float64, Tensor[(3, 4, 3), float32]) {
    %52 = @func_5577() /* ty=(float64,) */;
    %53 = @func_6564() /* ty=(Tensor[(3, 4, 3), float32],) */;
    %54 = %52.0;
    %55 = %53.0;
    (%54, %55)
  };
  %56() /* ty=(float64, Tensor[(3, 4, 3), float32]) */
}

def @func_12041() -> Tensor[(9, 8, 16), float32] {
  %57 = fn () -> Tensor[(9, 8, 16), float32] {
    @func_11406() /* ty=Tensor[(9, 8, 16), float32] */
  };
  %57() /* ty=Tensor[(9, 8, 16), float32] */
}

def @func_10658() -> (float64,) {
  @func_10656() /* ty=(float64,) */
}

def @func_9932() -> float64 {
  @func_9930() /* ty=float64 */
}

def @func_9922() -> float64 {
  %59 = fn () -> float64 {
    %58 = @func_8927() /* ty=(float64,) */;
    %58.0
  };
  %59() /* ty=float64 */
}

def @func_4138() -> (float64, float64) {
  @func_4136() /* ty=(float64, float64) */
}

def @func_4667(%var_4665: Tensor[(12, 5, 6), int64], %var_4666: Tensor[(12, 5, 6), int64]) -> (Tensor[(12, 5, 6), int64],) {
  %65 = fn (%var_4654: Tensor[(12, 5, 6), int64], %var_4655: Tensor[(12, 5, 6), int64]) -> (Tensor[(12, 5, 6), int64],) {
    %60 = cast(%var_4655, dtype="int64") /* ty=Tensor[(12, 5, 6), int64] */;
    %61 = shape_of(%var_4654, dtype="int32") /* ty=Tensor[(3), int32] */;
    %62 = cast(%var_4654, dtype="int64") /* ty=Tensor[(12, 5, 6), int64] */;
    %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %64 = bitwise_and(%62, %63) /* ty=Tensor[(12, 5, 6), int64] */;
    (%64,)
  };
  %65(%var_4665, %var_4666) /* ty=(Tensor[(12, 5, 6), int64],) */
}

def @func_12011() -> (float64, Tensor[(3, 4, 3), bool], Tensor[(36), float32]) {
  %66 = @func_5577() /* ty=(float64,) */;
  %67 = cast(meta[relay.Constant][1] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %68 = reshape(%67, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float32] */;
  %69 = @func_10998(%68) /* ty=(Tensor[(3, 4, 3), bool], Tensor[(280), int64]) */;
  %70 = %66.0;
  %71 = %69.0;
  (%70, %71, meta[relay.Constant][1] /* ty=Tensor[(36), float32] */)
}

def @func_2450(%var_2449: Tensor[(36), float32]) -> (float64, Tensor[(14, 4, 5), float64], Tensor[(36), float32], Tensor[(280), int64], Tensor[(16, 15, 8), uint64], float64, Tensor[(3, 4, 3), float32]) {
  %92 = fn (%var_2419: Tensor[(36), float32]) -> (float64, Tensor[(14, 4, 5), float64], Tensor[(36), float32], Tensor[(280), int64], Tensor[(16, 15, 8), uint64], float64, Tensor[(3, 4, 3), float32]) {
    %72 = @func_2353() /* ty=(float64,) */;
    %73 = %72.0;
    %74 = cast(%73, dtype="float32") /* ty=float32 */;
    %75 = cast(%var_2419, dtype="float32") /* ty=Tensor[(36), float32] */;
    %76 = cast(meta[relay.Constant][2] /* ty=Tensor[(280), int64] */, dtype="int64") /* ty=Tensor[(280), int64] */;
    %77 = reshape(%74, newshape=[]) /* ty=float32 */;
    %78 = reshape(%75, newshape=[36]) /* ty=Tensor[(36), float32] */;
    %79 = reshape(%76, newshape=[280]) /* ty=Tensor[(280), int64] */;
    %80 = @func_1415(%77, %78, %79) /* ty=(Tensor[(5, 2, 12), float32], Tensor[(14, 4, 5), float64], Tensor[(36), float32], Tensor[(280), int64]) */;
    %81 = cast(%var_2419, dtype="float32") /* ty=Tensor[(36), float32] */;
    %82 = reshape(%81, newshape=[18, 2]) /* ty=Tensor[(18, 2), float32] */;
    %83 = @func_1942(%82) /* ty=(Tensor[(18, 2), float32], Tensor[(16, 15, 8), uint64]) */;
    %84 = @func_2353() /* ty=(float64,) */;
    %85 = %80.1;
    %86 = cast(%85, dtype="int64") /* ty=Tensor[(14, 4, 5), int64] */;
    %87 = reshape(%86, newshape=[280]) /* ty=Tensor[(280), int64] */;
    %88 = @func_2069(%87) /* ty=(Tensor[(3, 4, 3), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64], Tensor[(18, 2), float64]) */;
    %89 = %83.1;
    %90 = %84.0;
    %91 = %88.0;
    (%73, %85, %var_2419, meta[relay.Constant][2] /* ty=Tensor[(280), int64] */, %89, %90, %91)
  };
  %92(%var_2449) /* ty=(float64, Tensor[(14, 4, 5), float64], Tensor[(36), float32], Tensor[(280), int64], Tensor[(16, 15, 8), uint64], float64, Tensor[(3, 4, 3), float32]) */
}

def @func_11352() -> (float64, float64) {
  @func_11350() /* ty=(float64, float64) */
}

def @func_12269() -> Tensor[(9, 8, 16), float32] {
  %93 = fn () -> Tensor[(9, 8, 16), float32] {
    @func_11406() /* ty=Tensor[(9, 8, 16), float32] */
  };
  %93() /* ty=Tensor[(9, 8, 16), float32] */
}

def @func_12522(%var_12480: Tensor[(6, 12, 8), float32], %var_12481: Tensor[(6, 12, 8), float32], %var_12500: Tensor[(6, 12, 8), float32]) -> (Tensor[(6, 12, 8), float32], float64, Tensor[(8, 13, 12), int8], Tensor[(6, 12, 8), uint32], Tensor[(14, 4, 5), float64], Tensor[(143), float64], float64, float64) {
  %94 = cast(%var_12481, dtype="float32") /* ty=Tensor[(6, 12, 8), float32] */;
  %95 = shape_of(%var_12480, dtype="int32") /* ty=Tensor[(3), int32] */;
  %96 = cast(%var_12480, dtype="float32") /* ty=Tensor[(6, 12, 8), float32] */;
  %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %98 = @func_11779() /* ty=(Tensor[(8, 13, 12), int8],) */;
  %99 = cast(%var_12500, dtype="uint32") /* ty=Tensor[(6, 12, 8), uint32] */;
  %100 = shape_of(%var_12480, dtype="int32") /* ty=Tensor[(3), int32] */;
  %101 = cast(%var_12480, dtype="uint32") /* ty=Tensor[(6, 12, 8), uint32] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %103 = cast(meta[relay.Constant][3] /* ty=Tensor[(143), float64] */, dtype="float64") /* ty=Tensor[(143), float64] */;
  %104 = reshape(%103, newshape=[143]) /* ty=Tensor[(143), float64] */;
  %105 = @func_8720(%104) /* ty=(Tensor[(280), int64], Tensor[(14, 4, 5), float64], Tensor[(36), float32], Tensor[(143), float64]) */;
  %106 = @func_3045() /* ty=(float64, float64, float64) */;
  %107 = power(%96, %97) /* ty=Tensor[(6, 12, 8), float32] */;
  %108 = @func_2697() /* ty=float64 */;
  %109 = %98.0;
  %110 = maximum(%101, %102) /* ty=Tensor[(6, 12, 8), uint32] */;
  %111 = %105.1;
  %112 = %106.2;
  %113 = @func_2475() /* ty=float64 */;
  (%107, %108, %109, %110, %111, meta[relay.Constant][3] /* ty=Tensor[(143), float64] */, %112, %113)
}

def @func_113(%var_112: Tensor[(3, 4, 3), float32]) -> Tensor[(3, 4, 3), float32] {
  %115 = fn (%var_108: Tensor[(3, 4, 3), float32]) -> Tensor[(3, 4, 3), float32] {
    %114 = cast(%var_108, dtype="float32") /* ty=Tensor[(3, 4, 3), float32] */;
    tan(%114) /* ty=Tensor[(3, 4, 3), float32] */
  };
  %115(%var_112) /* ty=Tensor[(3, 4, 3), float32] */
}

def @func_6150() -> (Tensor[(280), int64],) {
  %118 = fn () -> (Tensor[(280), int64],) {
    %116 = @func_4394() /* ty=(Tensor[(280), int64],) */;
    %117 = %116.0;
    (%117,)
  };
  %118() /* ty=(Tensor[(280), int64],) */
}

def @func_14924() -> float64 {
  %119 = fn () -> float64 {
    @func_14766() /* ty=float64 */
  };
  %119() /* ty=float64 */
}

def @func_15761(%var_15759: float64, %var_15760: Tensor[(280), int64]) -> (Tensor[(7, 7, 7), float32], Tensor[(14, 4, 5), int64], float64, Tensor[(36), float32], Tensor[(280), int64]) {
  %134 = fn (%var_15753: float64, %var_15755: Tensor[(280), int64]) -> (Tensor[(7, 7, 7), float32], Tensor[(14, 4, 5), int64], float64, Tensor[(36), float32], Tensor[(280), int64]) {
    %120 = cast(meta[relay.Constant][4] /* ty=Tensor[(7, 7, 7), float64] */, dtype="float64") /* ty=Tensor[(7, 7, 7), float64] */;
    %121 = acosh(%120) /* ty=Tensor[(7, 7, 7), float64] */;
    %122 = cast(%121, dtype="float64") /* ty=Tensor[(7, 7, 7), float64] */;
    %123 = log10(%122) /* ty=Tensor[(7, 7, 7), float64] */;
    %124 = cast(%123, dtype="float32") /* ty=Tensor[(7, 7, 7), float32] */;
    %125 = cast(%var_15753, dtype="float64") /* ty=float64 */;
    %126 = cast(meta[relay.Constant][5] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
    %127 = cast(%var_15755, dtype="int64") /* ty=Tensor[(280), int64] */;
    %128 = reshape(%125, newshape=[]) /* ty=float64 */;
    %129 = reshape(%126, newshape=[36]) /* ty=Tensor[(36), float32] */;
    %130 = reshape(%127, newshape=[280]) /* ty=Tensor[(280), int64] */;
    %131 = @func_1178(%128, %129, %130) /* ty=(Tensor[(8, 6, 14), float64], Tensor[(3, 4, 3), float32], Tensor[(36), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64], Tensor[(14, 4, 5), int64]) */;
    %132 = asin(%124) /* ty=Tensor[(7, 7, 7), float32] */;
    %133 = %131.5;
    (%132, %133, %var_15753, meta[relay.Constant][5] /* ty=Tensor[(36), float32] */, %var_15755)
  };
  %134(%var_15759, %var_15760) /* ty=(Tensor[(7, 7, 7), float32], Tensor[(14, 4, 5), int64], float64, Tensor[(36), float32], Tensor[(280), int64]) */
}

def @func_4555() -> float64 {
  @func_2697() /* ty=float64 */
}

def @func_6867() -> (float64,) {
  @func_6865() /* ty=(float64,) */
}

def @func_15220() -> (float64, float64, Tensor[(143), float64], float64) {
  %145 = fn () -> (float64, float64, Tensor[(143), float64], float64) {
    %135 = @func_7456() /* ty=(float64,) */;
    %136 = cast(meta[relay.Constant][6] /* ty=Tensor[(143), float64] */, dtype="float64") /* ty=Tensor[(143), float64] */;
    %137 = reshape(%136, newshape=[143]) /* ty=Tensor[(143), float64] */;
    %138 = @func_4526(%137) /* ty=(Tensor[(18, 2), int8], float64, Tensor[(280), int64], Tensor[(280), int64], Tensor[(3, 4, 3), float32], Tensor[(143), float64]) */;
    %139 = cast(meta[relay.Constant][6] /* ty=Tensor[(143), float64] */, dtype="float64") /* ty=Tensor[(143), float64] */;
    %140 = reshape(%139, newshape=[143]) /* ty=Tensor[(143), float64] */;
    %141 = @func_14228(%140) /* ty=(float64, Tensor[(143), float64], float64, Tensor[(?, 13, 11), float64]) */;
    %142 = %135.0;
    %143 = %138.1;
    %144 = %141.0;
    (%142, %143, meta[relay.Constant][6] /* ty=Tensor[(143), float64] */, %144)
  };
  %145() /* ty=(float64, float64, Tensor[(143), float64], float64) */
}

def @func_4281(%var_4279: Tensor[(1, 9, 5), float64]) -> (Tensor[(1, 9, 5), float64], Tensor[(280), int64]) {
  @func_4278(%var_4279) /* ty=(Tensor[(1, 9, 5), float64], Tensor[(280), int64]) */
}

def @func_3753() -> (Tensor[(9, 8, 16), float32],) {
  %148 = fn () -> (Tensor[(9, 8, 16), float32],) {
    %146 = cast(meta[relay.Constant][7] /* ty=Tensor[(9, 8, 16), float32] */, dtype="float32") /* ty=Tensor[(9, 8, 16), float32] */;
    %147 = asin(%146) /* ty=Tensor[(9, 8, 16), float32] */;
    (%147,)
  };
  %148() /* ty=(Tensor[(9, 8, 16), float32],) */
}

def @func_11206(%var_11202: Tensor[(2, 13, 6), float32]) -> Tensor[(2, 13, 6), float32] {
  %149 = cast(%var_11202, dtype="float32") /* ty=Tensor[(2, 13, 6), float32] */;
  tan(%149) /* ty=Tensor[(2, 13, 6), float32] */
}

def @func_12246() -> (Tensor[(8, 13, 12), bool],) {
  %152 = fn () -> (Tensor[(8, 13, 12), bool],) {
    %150 = @func_6778() /* ty=(Tensor[(8, 13, 12), bool],) */;
    %151 = %150.0;
    (%151,)
  };
  %152() /* ty=(Tensor[(8, 13, 12), bool],) */
}

def @func_12160() -> (float64,) {
  %154 = fn () -> (float64,) {
    %153 = @func_4878() /* ty=float64 */;
    (%153,)
  };
  %154() /* ty=(float64,) */
}

def @func_13493() -> (Tensor[(280), int64], Tensor[(280), int64], float64, Tensor[(36), float32]) {
  @func_13491() /* ty=(Tensor[(280), int64], Tensor[(280), int64], float64, Tensor[(36), float32]) */
}

def @func_6577() -> (Tensor[(280), int64],) {
  %155 = @func_4080() /* ty=(Tensor[(280), int64],) */;
  %156 = %155.0;
  (%156,)
}

def @func_15543() -> (float64,) {
  %157 = @func_2353() /* ty=(float64,) */;
  %158 = %157.0;
  (%158,)
}

def @func_5947() -> (Tensor[(280), int64], float64) {
  %162 = fn () -> (Tensor[(280), int64], float64) {
    %159 = @func_4216() /* ty=(Tensor[(280), int64], Tensor[(280), int64], float64, float64) */;
    %160 = %159.0;
    %161 = @func_5180() /* ty=float64 */;
    (%160, %161)
  };
  %162() /* ty=(Tensor[(280), int64], float64) */
}

def @func_12371() -> (Tensor[(280), int64], float64, Tensor[(280), int64], float64, Tensor[(280), int64], Tensor[(?, 13, 11), bool], Tensor[(45), float64], Tensor[(143, 1), float64]) {
  %178 = fn () -> (Tensor[(280), int64], float64, Tensor[(280), int64], float64, Tensor[(280), int64], Tensor[(?, 13, 11), bool], Tensor[(45), float64], Tensor[(143, 1), float64]) {
    %163 = @func_9605() /* ty=(Tensor[(280), int64], Tensor[(14, 14, 3), bool], Tensor[(588), float64]) */;
    %164 = @func_2851() /* ty=(float64,) */;
    %165 = @func_7570() /* ty=(Tensor[(3, 4, 3), float32], float64, float64, Tensor[(280), int64]) */;
    %166 = @func_8218() /* ty=(Tensor[(280), int64], Tensor[(11, 13, 7), float32]) */;
    %167 = cast(meta[relay.Constant][8] /* ty=Tensor[(45), float64] */, dtype="float64") /* ty=Tensor[(45), float64] */;
    %168 = cast(meta[relay.Constant][9] /* ty=Tensor[(143, 1), float64] */, dtype="float64") /* ty=Tensor[(143, 1), float64] */;
    %169 = reshape(%167, newshape=[45]) /* ty=Tensor[(45), float64] */;
    %170 = reshape(%168, newshape=[143, 1]) /* ty=Tensor[(143, 1), float64] */;
    %171 = @func_4957(%169, %170) /* ty=(Tensor[(280), int64], Tensor[(3, 4, 3), float32], Tensor[(?, 13, 11), bool], Tensor[(143, 1), float64], Tensor[(?, 9, 5), bool], float64, float64, Tensor[(3, 4, 3), float32]) */;
    %172 = %163.0;
    %173 = %164.0;
    %174 = %165.3;
    %175 = @func_6547() /* ty=float64 */;
    %176 = %166.0;
    %177 = %171.2;
    (%172, %173, %174, %175, %176, %177, meta[relay.Constant][8] /* ty=Tensor[(45), float64] */, meta[relay.Constant][9] /* ty=Tensor[(143, 1), float64] */)
  };
  %178() /* ty=(Tensor[(280), int64], float64, Tensor[(280), int64], float64, Tensor[(280), int64], Tensor[(?, 13, 11), bool], Tensor[(45), float64], Tensor[(143, 1), float64]) */
}

def @func_8429() -> float64 {
  @func_5676() /* ty=float64 */
}

def @func_9606() -> (Tensor[(280), int64], Tensor[(14, 14, 3), bool], Tensor[(588), float64]) {
  %186 = fn () -> (Tensor[(280), int64], Tensor[(14, 14, 3), bool], Tensor[(588), float64]) {
    %179 = @func_4394() /* ty=(Tensor[(280), int64],) */;
    %180 = cast(meta[relay.Constant][10] /* ty=Tensor[(588), float64] */, dtype="float64") /* ty=Tensor[(588), float64] */;
    %181 = reshape(%180, newshape=[14, 14, 3]) /* ty=Tensor[(14, 14, 3), float64] */;
    %182 = cast(meta[relay.Constant][10] /* ty=Tensor[(588), float64] */, dtype="float64") /* ty=Tensor[(588), float64] */;
    %183 = %179.0;
    %184 = @func_8128(%181) /* ty=Tensor[(14, 14, 3), bool] */;
    %185 = tan(%182) /* ty=Tensor[(588), float64] */;
    (%183, %184, %185)
  };
  %186() /* ty=(Tensor[(280), int64], Tensor[(14, 14, 3), bool], Tensor[(588), float64]) */
}

def @func_8372(%var_8321: Tensor[(8, 7, 9), float64]) -> (Tensor[(8, 7, 9), float64], Tensor[(8, 7, 9), float64], Tensor[(8, 7, 9), float32], Tensor[(3, 4, 3), float32]) {
  %187 = cast(%var_8321, dtype="float64") /* ty=Tensor[(8, 7, 9), float64] */;
  %188 = cast(%var_8321, dtype="float64") /* ty=Tensor[(8, 7, 9), float64] */;
  %189 = cast(%var_8321, dtype="float32") /* ty=Tensor[(8, 7, 9), float32] */;
  %190 = @func_3179() /* ty=(Tensor[(3, 4, 3), float32],) */;
  %191 = log10(%187) /* ty=Tensor[(8, 7, 9), float64] */;
  %192 = tan(%188) /* ty=Tensor[(8, 7, 9), float64] */;
  %193 = cos(%189) /* ty=Tensor[(8, 7, 9), float32] */;
  %194 = %190.0;
  (%191, %192, %193, %194)
}

def @func_11644() -> (float64, Tensor[(8, 13, 12), int8], Tensor[(5, 10, 7), uint32], Tensor[(350), uint32]) {
  %209 = fn () -> (float64, Tensor[(8, 13, 12), int8], Tensor[(5, 10, 7), uint32], Tensor[(350), uint32]) {
    %195 = @func_5345() /* ty=(Tensor[(8, 13, 12), bool], Tensor[(8, 13, 12), bool]) */;
    %196 = %195.0;
    %197 = @func_3142() /* ty=(float64, float64) */;
    %198 = %197.1;
    %199 = cast(%196, dtype="int8") /* ty=Tensor[(8, 13, 12), int8] */;
    %200 = cast(%198, dtype="int8") /* ty=int8 */;
    %201 = @func_3310() /* ty=float64 */;
    %202 = cast(%201, dtype="uint32") /* ty=uint32 */;
    %203 = cast(meta[relay.Constant][11] /* ty=Tensor[(350), uint32] */, dtype="uint32") /* ty=Tensor[(350), uint32] */;
    %204 = reshape(%202, newshape=[]) /* ty=uint32 */;
    %205 = reshape(%203, newshape=[5, 10, 7]) /* ty=Tensor[(5, 10, 7), uint32] */;
    %206 = @func_5280(%204, %205) /* ty=(Tensor[(5, 10, 7), uint32],) */;
    %207 = logical_xor(%199, %200) /* ty=Tensor[(8, 13, 12), int8] */;
    %208 = %206.0;
    (%201, %207, %208, meta[relay.Constant][11] /* ty=Tensor[(350), uint32] */)
  };
  %209() /* ty=(float64, Tensor[(8, 13, 12), int8], Tensor[(5, 10, 7), uint32], Tensor[(350), uint32]) */
}

def @func_16269(%var_16267: Tensor[(9, 4), float32], %var_16268: Tensor[(280), int64]) -> (float64, Tensor[(36), float32], Tensor[(9, 4), float32], Tensor[(280), int64], Tensor[(280), int64], float64) {
  %223 = fn (%var_16251: Tensor[(9, 4), float32], %var_16252: Tensor[(280), int64]) -> (float64, Tensor[(36), float32], Tensor[(9, 4), float32], Tensor[(280), int64], Tensor[(280), int64], float64) {
    %210 = @func_5712() /* ty=(float64,) */;
    %211 = %210.0;
    %212 = cast(%211, dtype="float32") /* ty=float32 */;
    %213 = cast(%var_16251, dtype="float32") /* ty=Tensor[(9, 4), float32] */;
    %214 = cast(%var_16252, dtype="int64") /* ty=Tensor[(280), int64] */;
    %215 = reshape(%212, newshape=[]) /* ty=float32 */;
    %216 = reshape(%213, newshape=[36]) /* ty=Tensor[(36), float32] */;
    %217 = reshape(%214, newshape=[280]) /* ty=Tensor[(280), int64] */;
    %218 = @func_1415(%215, %216, %217) /* ty=(Tensor[(5, 2, 12), float32], Tensor[(14, 4, 5), float64], Tensor[(36), float32], Tensor[(280), int64]) */;
    %219 = @func_13603() /* ty=(float64,) */;
    %220 = %218.2;
    %221 = @func_13143() /* ty=Tensor[(280), int64] */;
    %222 = %219.0;
    (%211, %220, %var_16251, %var_16252, %221, %222)
  };
  %223(%var_16267, %var_16268) /* ty=(float64, Tensor[(36), float32], Tensor[(9, 4), float32], Tensor[(280), int64], Tensor[(280), int64], float64) */
}

def @func_14004(%var_14002: Tensor[(16, 15, 15), float32], %var_14003: Tensor[(16, 15, 15), float32]) -> (Tensor[(16, 15, 15), float32], Tensor[(16, 15, 15), float32]) {
  @func_14000(%var_14002, %var_14003) /* ty=(Tensor[(16, 15, 15), float32], Tensor[(16, 15, 15), float32]) */
}

def @func_11497() -> (float64, Tensor[(3, 4, 3), float32]) {
  @func_11495() /* ty=(float64, Tensor[(3, 4, 3), float32]) */
}

def @func_7410() -> (Tensor[(280), int64],) {
  @func_7408() /* ty=(Tensor[(280), int64],) */
}

def @func_5284(%var_5282: uint32, %var_5283: Tensor[(5, 10, 7), uint32]) -> (Tensor[(5, 10, 7), uint32],) {
  @func_5280(%var_5282, %var_5283) /* ty=(Tensor[(5, 10, 7), uint32],) */
}

def @func_9845() -> Tensor[(3, 4, 3), float32] {
  @func_9843() /* ty=Tensor[(3, 4, 3), float32] */
}

def @func_7089() -> (float64,) {
  @func_7087() /* ty=(float64,) */
}

def @func_1945(%var_1943: Tensor[(18, 2), float32]) -> (Tensor[(18, 2), float32], Tensor[(16, 15, 8), uint64]) {
  @func_1942(%var_1943) /* ty=(Tensor[(18, 2), float32], Tensor[(16, 15, 8), uint64]) */
}

def @func_11836() -> float64 {
  @func_11834() /* ty=float64 */
}

def @func_13984(%var_13983: Tensor[(11, 6, 14), bool]) -> (Tensor[(11, 6, 14), bool], float64, float64) {
  %232 = fn (%var_13948: Tensor[(11, 6, 14), bool]) -> (Tensor[(11, 6, 14), bool], float64, float64) {
    %224 = cast(meta[relay.Constant][12] /* ty=Tensor[(11, 6, 14), bool] */, dtype="bool") /* ty=Tensor[(11, 6, 14), bool] */;
    %225 = shape_of(%var_13948, dtype="int32") /* ty=Tensor[(3), int32] */;
    %226 = cast(%var_13948, dtype="bool") /* ty=Tensor[(11, 6, 14), bool] */;
    %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %228 = @func_2968() /* ty=(float64, float64) */;
    %229 = logical_and(%226, %227) /* ty=Tensor[(11, 6, 14), bool] */;
    %230 = %228.0;
    %231 = @func_12142() /* ty=float64 */;
    (%229, %230, %231)
  };
  %232(%var_13983) /* ty=(Tensor[(11, 6, 14), bool], float64, float64) */
}

def @func_5678() -> float64 {
  @func_5676() /* ty=float64 */
}

def @func_10498() -> float64 {
  @func_2514() /* ty=float64 */
}

def @func_5646() -> float64 {
  %233 = @func_5538() /* ty=(float64,) */;
  %233.0
}

def @func_10642() -> (Tensor[(3, 4, 3), float32], Tensor[(280), int64], Tensor[(45), float64], Tensor[(280), int64], Tensor[(280), int64]) {
  %246 = fn () -> (Tensor[(3, 4, 3), float32], Tensor[(280), int64], Tensor[(45), float64], Tensor[(280), int64], Tensor[(280), int64]) {
    %234 = @func_7570() /* ty=(Tensor[(3, 4, 3), float32], float64, float64, Tensor[(280), int64]) */;
    %235 = cast(meta[relay.Constant][13] /* ty=Tensor[(45), float64] */, dtype="float64") /* ty=Tensor[(45), float64] */;
    %236 = reshape(%235, newshape=[1, 9, 5]) /* ty=Tensor[(1, 9, 5), float64] */;
    %237 = @func_4278(%236) /* ty=(Tensor[(1, 9, 5), float64], Tensor[(280), int64]) */;
    %238 = %237.1;
    %239 = cast(%238, dtype="int64") /* ty=Tensor[(280), int64] */;
    %240 = reshape(%239, newshape=[280]) /* ty=Tensor[(280), int64] */;
    %241 = @func_2069(%240) /* ty=(Tensor[(3, 4, 3), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64], Tensor[(18, 2), float64]) */;
    %242 = @func_8533() /* ty=(float64, Tensor[(280), int64]) */;
    %243 = %234.0;
    %244 = %241.2;
    %245 = %242.1;
    (%243, %238, meta[relay.Constant][13] /* ty=Tensor[(45), float64] */, %244, %245)
  };
  %246() /* ty=(Tensor[(3, 4, 3), float32], Tensor[(280), int64], Tensor[(45), float64], Tensor[(280), int64], Tensor[(280), int64]) */
}

def @func_8422() -> float64 {
  @func_8420() /* ty=float64 */
}

def @func_9264() -> float64 {
  %247 = fn () -> float64 {
    @func_8080() /* ty=float64 */
  };
  %247() /* ty=float64 */
}

def @func_7301(%var_7299: Tensor[(2, 2, 13), float64]) -> Tensor[(2, 2, 13), float64] {
  @func_7298(%var_7299) /* ty=Tensor[(2, 2, 13), float64] */
}

def @func_10914() -> (Tensor[(280), int64], Tensor[(?, 36), float64], Tensor[(36), float32], float64) {
  %248 = @func_10641() /* ty=(Tensor[(3, 4, 3), float32], Tensor[(280), int64], Tensor[(45), float64], Tensor[(280), int64], Tensor[(280), int64]) */;
  %249 = cast(meta[relay.Constant][14] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %250 = reshape(%249, newshape=[1, 36]) /* ty=Tensor[(1, 36), float32] */;
  %251 = @func_3378(%250) /* ty=(float64, Tensor[(16, 15, 8), uint64], Tensor[(?, 36), float64], Tensor[(16, 15, 8), uint64]) */;
  %252 = @func_10134() /* ty=(float64,) */;
  %253 = %248.4;
  %254 = %251.2;
  %255 = %252.0;
  (%253, %254, meta[relay.Constant][14] /* ty=Tensor[(36), float32] */, %255)
}

def @func_12673(%var_12671: Tensor[(9, 8, 16), float32], %var_12672: Tensor[(1120), float64]) -> (Tensor[(9, 8, 16), uint64], float64, Tensor[(36), float32], Tensor[(3, 4, 3), float32], float64, float64, Tensor[(10, 7, 16), float64], Tensor[(1120), float64]) {
  %276 = fn (%var_12561: Tensor[(9, 8, 16), float32], %var_12666: Tensor[(1120), float64]) -> (Tensor[(9, 8, 16), uint64], float64, Tensor[(36), float32], Tensor[(3, 4, 3), float32], float64, float64, Tensor[(10, 7, 16), float64], Tensor[(1120), float64]) {
    %256 = @func_12268() /* ty=Tensor[(9, 8, 16), float32] */;
    %257 = cast(%var_12561, dtype="uint64") /* ty=Tensor[(9, 8, 16), uint64] */;
    %258 = shape_of(%256, dtype="int32") /* ty=Tensor[(3), int32] */;
    %259 = cast(%256, dtype="uint64") /* ty=Tensor[(9, 8, 16), uint64] */;
    %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %261 = @func_9362() /* ty=(float64, Tensor[(11, 13, 7), float32]) */;
    %262 = @func_4843() /* ty=(float64, float64, Tensor[(36), float32], Tensor[(280), int64], Tensor[(280), int64], float64) */;
    %263 = @func_3989() /* ty=(Tensor[(36), float32], float64, Tensor[(3, 4, 3), float32]) */;
    %264 = @func_11888() /* ty=(float64,) */;
    %265 = cast(%var_12666, dtype="float64") /* ty=Tensor[(1120), float64] */;
    %266 = cast(%var_12666, dtype="float64") /* ty=Tensor[(1120), float64] */;
    %267 = reshape(%265, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), float64] */;
    %268 = reshape(%266, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), float64] */;
    %269 = bitwise_and(%259, %260) /* ty=Tensor[(9, 8, 16), uint64] */;
    %270 = %261.0;
    %271 = %262.2;
    %272 = %263.2;
    %273 = @func_11011() /* ty=float64 */;
    %274 = %264.0;
    %275 = @func_4574(%267, %268) /* ty=Tensor[(10, 7, 16), float64] */;
    (%269, %270, %271, %272, %273, %274, %275, %var_12666)
  };
  %276(%var_12671, %var_12672) /* ty=(Tensor[(9, 8, 16), uint64], float64, Tensor[(36), float32], Tensor[(3, 4, 3), float32], float64, float64, Tensor[(10, 7, 16), float64], Tensor[(1120), float64]) */
}

def @func_12476() -> (Tensor[(11, 13, 7), float32], Tensor[(280), int64], Tensor[(16, 15, 4), uint32], Tensor[(960), uint32]) {
  %286 = fn () -> (Tensor[(11, 13, 7), float32], Tensor[(280), int64], Tensor[(16, 15, 4), uint32], Tensor[(960), uint32]) {
    %277 = @func_9362() /* ty=(float64, Tensor[(11, 13, 7), float32]) */;
    %278 = @func_4216() /* ty=(Tensor[(280), int64], Tensor[(280), int64], float64, float64) */;
    %279 = cast(meta[relay.Constant][15] /* ty=Tensor[(960), uint32] */, dtype="uint32") /* ty=Tensor[(960), uint32] */;
    %280 = cast(meta[relay.Constant][15] /* ty=Tensor[(960), uint32] */, dtype="uint32") /* ty=Tensor[(960), uint32] */;
    %281 = reshape(%279, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), uint32] */;
    %282 = reshape(%280, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), uint32] */;
    %283 = %277.1;
    %284 = %278.1;
    %285 = @func_9080(%281, %282) /* ty=Tensor[(16, 15, 4), uint32] */;
    (%283, %284, %285, meta[relay.Constant][15] /* ty=Tensor[(960), uint32] */)
  };
  %286() /* ty=(Tensor[(11, 13, 7), float32], Tensor[(280), int64], Tensor[(16, 15, 4), uint32], Tensor[(960), uint32]) */
}

def @func_14411() -> (float64,) {
  %287 = @func_5417() /* ty=(Tensor[(280), int64], float64) */;
  %288 = %287.1;
  (%288,)
}

def @func_16386() -> (float64, float64) {
  %293 = fn () -> (float64, float64) {
    %289 = @func_10765() /* ty=(float64, float64, float64) */;
    %290 = @func_3045() /* ty=(float64, float64, float64) */;
    %291 = %289.2;
    %292 = %290.1;
    (%291, %292)
  };
  %293() /* ty=(float64, float64) */
}

def @func_14768() -> float64 {
  @func_14766() /* ty=float64 */
}

def @func_15988(%var_15986: Tensor[(11, 10, 7), int64], %var_15987: Tensor[(11, 10, 7), int64]) -> (Tensor[(11, 10, 7), int64],) {
  %299 = fn (%var_15975: Tensor[(11, 10, 7), int64], %var_15976: Tensor[(11, 10, 7), int64]) -> (Tensor[(11, 10, 7), int64],) {
    %294 = cast(%var_15976, dtype="int64") /* ty=Tensor[(11, 10, 7), int64] */;
    %295 = shape_of(%var_15975, dtype="int32") /* ty=Tensor[(3), int32] */;
    %296 = cast(%var_15975, dtype="int64") /* ty=Tensor[(11, 10, 7), int64] */;
    %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %298 = add(%296, %297) /* ty=Tensor[(11, 10, 7), int64] */;
    (%298,)
  };
  %299(%var_15986, %var_15987) /* ty=(Tensor[(11, 10, 7), int64],) */
}

def @func_3180() -> (Tensor[(3, 4, 3), float32],) {
  %302 = fn () -> (Tensor[(3, 4, 3), float32],) {
    %300 = @func_1837() /* ty=(Tensor[(13, 11, 13), bool], Tensor[(3, 4, 3), float32], float64, Tensor[(18, 2), float32], Tensor[(280), int64], Tensor[(36), float32]) */;
    %301 = %300.1;
    (%301,)
  };
  %302() /* ty=(Tensor[(3, 4, 3), float32],) */
}

def @func_3511() -> float64 {
  @func_3509() /* ty=float64 */
}

def @func_5225(%var_5217: Tensor[(1, 9, 11), float64]) -> (Tensor[(1, 9, 11), int16],) {
  %303 = @func_2353() /* ty=(float64,) */;
  %304 = %303.0;
  %305 = cast(%304, dtype="int16") /* ty=int16 */;
  %306 = cast(%var_5217, dtype="int16") /* ty=Tensor[(1, 9, 11), int16] */;
  %307 = bitwise_xor(%305, %306) /* ty=Tensor[(1, 9, 11), int16] */;
  (%307,)
}

def @func_3046() -> (float64, float64, float64) {
  %314 = fn () -> (float64, float64, float64) {
    %308 = @func_2968() /* ty=(float64, float64) */;
    %309 = @func_2353() /* ty=(float64,) */;
    %310 = @func_2353() /* ty=(float64,) */;
    %311 = %308.1;
    %312 = %309.0;
    %313 = %310.0;
    (%311, %312, %313)
  };
  %314() /* ty=(float64, float64, float64) */
}

def @func_10006(%var_10004: Tensor[(45, 1), float64]) -> (float64, Tensor[(45, 1), float64], Tensor[(143), float64], Tensor[(1001), float64], float64) {
  @func_10003(%var_10004) /* ty=(float64, Tensor[(45, 1), float64], Tensor[(143), float64], Tensor[(1001), float64], float64) */
}

def @func_10298() -> float64 {
  @func_9930() /* ty=float64 */
}

def @func_5648() -> float64 {
  @func_5646() /* ty=float64 */
}

def @func_15159() -> float64 {
  @func_15157() /* ty=float64 */
}

def @func_5181() -> float64 {
  %316 = fn () -> float64 {
    %315 = @func_2936() /* ty=(float64, Tensor[(3, 4, 3), float32], Tensor[(36), float32]) */;
    %315.0
  };
  %316() /* ty=float64 */
}

def @func_15833(%var_15786: Tensor[(9, 14, 2), float64]) -> (Tensor[(9, 14, 2), float64], float64, float64, float64, Tensor[(280), int64], float64, Tensor[(9, 8, 16), float32], float64) {
  %317 = cast(%var_15786, dtype="float64") /* ty=Tensor[(9, 14, 2), float64] */;
  %318 = @func_5934() /* ty=(float64, Tensor[(9, 8, 16), float32], Tensor[(9, 8, 16), bool], Tensor[(36), float32]) */;
  %319 = @func_12475() /* ty=(Tensor[(11, 13, 7), float32], Tensor[(280), int64], Tensor[(16, 15, 4), uint32], Tensor[(960), uint32]) */;
  %320 = @func_7570() /* ty=(Tensor[(3, 4, 3), float32], float64, float64, Tensor[(280), int64]) */;
  %321 = @func_5577() /* ty=(float64,) */;
  %322 = log(%317) /* ty=Tensor[(9, 14, 2), float64] */;
  %323 = @func_7839() /* ty=float64 */;
  %324 = @func_7839() /* ty=float64 */;
  %325 = %318.0;
  %326 = %319.1;
  %327 = %320.2;
  %328 = @func_12040() /* ty=Tensor[(9, 8, 16), float32] */;
  %329 = %321.0;
  (%322, %323, %324, %325, %326, %327, %328, %329)
}

def @func_14730() -> (float64, Tensor[(?, 36), float32]) {
  %338 = fn () -> (float64, Tensor[(?, 36), float32]) {
    %330 = @func_7087() /* ty=(float64,) */;
    %331 = @func_11124() /* ty=(float64, Tensor[(280), int64], Tensor[(36), float32], Tensor[(3, 4, 3), float32], Tensor[(?, 36), float64]) */;
    %332 = %331.4;
    %333 = cast(%332, dtype="float32") /* ty=Tensor[(?, 36), float32] */;
    %334 = acosh(%333) /* ty=Tensor[(?, 36), float32] */;
    %335 = cast(%334, dtype="float32") /* ty=Tensor[(?, 36), float32] */;
    %336 = %330.0;
    %337 = cos(%335) /* ty=Tensor[(?, 36), float32] */;
    (%336, %337)
  };
  %338() /* ty=(float64, Tensor[(?, 36), float32]) */
}

def @func_9030() -> float64 {
  @func_9028() /* ty=float64 */
}

def @func_2767(%var_2764: Tensor[(9, 7, 2), bool], %var_2765: Tensor[(9, 7, 2), bool], %var_2766: Tensor[(1540), uint16]) -> (Tensor[(9, 7, 2), bool], Tensor[(14, 10, 11), uint16], Tensor[(1540), uint16], float64) {
  @func_2762(%var_2764, %var_2765, %var_2766) /* ty=(Tensor[(9, 7, 2), bool], Tensor[(14, 10, 11), uint16], Tensor[(1540), uint16], float64) */
}

def @func_16091() -> (float64,) {
  %341 = fn () -> (float64,) {
    %339 = @func_6865() /* ty=(float64,) */;
    %340 = %339.0;
    (%340,)
  };
  %341() /* ty=(float64,) */
}

def @func_3264() -> (Tensor[(280), int64], float64, Tensor[(36), float32], Tensor[(3, 4, 3), float32], float64, float64) {
  %356 = fn () -> (Tensor[(280), int64], float64, Tensor[(36), float32], Tensor[(3, 4, 3), float32], float64, float64) {
    %342 = @func_1837() /* ty=(Tensor[(13, 11, 13), bool], Tensor[(3, 4, 3), float32], float64, Tensor[(18, 2), float32], Tensor[(280), int64], Tensor[(36), float32]) */;
    %343 = cast(meta[relay.Constant][16] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
    %344 = %342.4;
    %345 = cast(%344, dtype="int64") /* ty=Tensor[(280), int64] */;
    %346 = reshape(%343, newshape=[36]) /* ty=Tensor[(36), float32] */;
    %347 = reshape(%345, newshape=[280]) /* ty=Tensor[(280), int64] */;
    %348 = @func_2267(%346, %347) /* ty=(float64, Tensor[(36), float32], Tensor[(36), float32], Tensor[(280), int64], Tensor[(36), float32]) */;
    %349 = cast(meta[relay.Constant][16] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
    %350 = reshape(%349, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float32] */;
    %351 = @func_2909() /* ty=(float64, float64) */;
    %352 = %348.0;
    %353 = @func_111(%350) /* ty=Tensor[(3, 4, 3), float32] */;
    %354 = @func_2198() /* ty=float64 */;
    %355 = %351.1;
    (%344, %352, meta[relay.Constant][16] /* ty=Tensor[(36), float32] */, %353, %354, %355)
  };
  %356() /* ty=(Tensor[(280), int64], float64, Tensor[(36), float32], Tensor[(3, 4, 3), float32], float64, float64) */
}

def @func_5240() -> Tensor[(280), int64] {
  %357 = @func_4394() /* ty=(Tensor[(280), int64],) */;
  %357.0
}

def @func_14230(%var_14229: Tensor[(143), float64]) -> (float64, Tensor[(143), float64], float64, Tensor[(?, 13, 11), float64]) {
  %368 = fn (%var_14205: Tensor[(143), float64]) -> (float64, Tensor[(143), float64], float64, Tensor[(?, 13, 11), float64]) {
    %358 = @func_6865() /* ty=(float64,) */;
    %359 = @func_4452() /* ty=(float64,) */;
    %360 = cast(%var_14205, dtype="float64") /* ty=Tensor[(143), float64] */;
    %361 = reshape(%360, newshape=[1, 13, 11]) /* ty=Tensor[(1, 13, 11), float64] */;
    %362 = @func_3845(%361) /* ty=(Tensor[(?, 13, 11), bool], Tensor[(3, 4, 3), float32], Tensor[(36), float32]) */;
    %363 = %362.0;
    %364 = cast(%363, dtype="float64") /* ty=Tensor[(?, 13, 11), float64] */;
    %365 = %358.0;
    %366 = %359.0;
    %367 = log10(%364) /* ty=Tensor[(?, 13, 11), float64] */;
    (%365, %var_14205, %366, %367)
  };
  %368(%var_14229) /* ty=(float64, Tensor[(143), float64], float64, Tensor[(?, 13, 11), float64]) */
}

def @func_13145() -> Tensor[(280), int64] {
  @func_13143() /* ty=Tensor[(280), int64] */
}

def @func_11235() -> (Tensor[(36), float32],) {
  %369 = @func_10914() /* ty=(Tensor[(280), int64], Tensor[(?, 36), float64], Tensor[(36), float32], float64) */;
  %370 = %369.2;
  (%370,)
}

def @func_5346() -> (Tensor[(8, 13, 12), bool], Tensor[(8, 13, 12), bool]) {
  %378 = fn () -> (Tensor[(8, 13, 12), bool], Tensor[(8, 13, 12), bool]) {
    %371 = @func_5180() /* ty=float64 */;
    %372 = cast(%371, dtype="bool") /* ty=bool */;
    %373 = cast(meta[relay.Constant][17] /* ty=Tensor[(8, 13, 12), float64] */, dtype="bool") /* ty=Tensor[(8, 13, 12), bool] */;
    %374 = cast(%371, dtype="bool") /* ty=bool */;
    %375 = cast(meta[relay.Constant][17] /* ty=Tensor[(8, 13, 12), float64] */, dtype="bool") /* ty=Tensor[(8, 13, 12), bool] */;
    %376 = logical_or(%372, %373) /* ty=Tensor[(8, 13, 12), bool] */;
    %377 = not_equal(%374, %375) /* ty=Tensor[(8, 13, 12), bool] */;
    (%376, %377)
  };
  %378() /* ty=(Tensor[(8, 13, 12), bool], Tensor[(8, 13, 12), bool]) */
}

def @func_9416() -> float64 {
  %380 = fn () -> float64 {
    %379 = @func_5577() /* ty=(float64,) */;
    %379.0
  };
  %380() /* ty=float64 */
}

def @func_7084() -> float64 {
  %382 = fn () -> float64 {
    %381 = @func_4618() /* ty=(float64, float64) */;
    %381.1
  };
  %382() /* ty=float64 */
}

def @func_11012() -> float64 {
  %384 = fn () -> float64 {
    %383 = @func_5946() /* ty=(Tensor[(280), int64], float64) */;
    %383.1
  };
  %384() /* ty=float64 */
}

def @func_15006(%var_15005: bool) -> Tensor[(13, 1, 12), bool] {
  %387 = fn (%var_14992: bool) -> Tensor[(13, 1, 12), bool] {
    %385 = cast(%var_14992, dtype="bool") /* ty=bool */;
    %386 = cast(meta[relay.Constant][18] /* ty=Tensor[(13, 1, 12), bool] */, dtype="bool") /* ty=Tensor[(13, 1, 12), bool] */;
    logical_and(%385, %386) /* ty=Tensor[(13, 1, 12), bool] */
  };
  %387(%var_15005) /* ty=Tensor[(13, 1, 12), bool] */
}

def @func_7784() -> Tensor[(14, 4, 5), float64] {
  @func_7782() /* ty=Tensor[(14, 4, 5), float64] */
}

def @func_8928() -> (float64,) {
  %390 = fn () -> (float64,) {
    %388 = @func_6925() /* ty=(float64,) */;
    %389 = %388.0;
    (%389,)
  };
  %390() /* ty=(float64,) */
}

def @func_7728() -> float64 {
  %392 = fn () -> float64 {
    %391 = @func_3106() /* ty=(Tensor[(36), float32], float64) */;
    %391.1
  };
  %392() /* ty=float64 */
}

def @func_15305() -> (Tensor[(11, 13, 7), float32],) {
  @func_15303() /* ty=(Tensor[(11, 13, 7), float32],) */
}

def @func_2200() -> float64 {
  @func_2198() /* ty=float64 */
}

def @func_6579() -> (Tensor[(280), int64],) {
  @func_6577() /* ty=(Tensor[(280), int64],) */
}

def @func_2699() -> float64 {
  @func_2697() /* ty=float64 */
}

def @func_7408() -> (Tensor[(280), int64],) {
  %393 = @func_4216() /* ty=(Tensor[(280), int64], Tensor[(280), int64], float64, float64) */;
  %394 = %393.0;
  (%394,)
}

def @func_4453() -> (float64,) {
  %397 = fn () -> (float64,) {
    %395 = @func_3045() /* ty=(float64, float64, float64) */;
    %396 = %395.2;
    (%396,)
  };
  %397() /* ty=(float64,) */
}

def @func_15282() -> (float64, Tensor[(36), float32], float64, Tensor[(3, 4, 3), float32]) {
  %398 = @func_3106() /* ty=(Tensor[(36), float32], float64) */;
  %399 = @func_4618() /* ty=(float64, float64) */;
  %400 = @func_5676() /* ty=float64 */;
  %401 = %398.0;
  %402 = %399.1;
  %403 = @func_9843() /* ty=Tensor[(3, 4, 3), float32] */;
  (%400, %401, %402, %403)
}

def @func_4618() -> (float64, float64) {
  %404 = @func_2353() /* ty=(float64,) */;
  %405 = @func_2198() /* ty=float64 */;
  %406 = %404.0;
  (%405, %406)
}

def @func_3108() -> (Tensor[(36), float32], float64) {
  @func_3106() /* ty=(Tensor[(36), float32], float64) */
}

def @func_7926(%var_7925: Tensor[(12, 4, 1), float64]) -> (float64, Tensor[(12, 4, 1), uint8], float64, Tensor[(3, 4, 3), float32], Tensor[(36), float32]) {
  %418 = fn (%var_7890: Tensor[(12, 4, 1), float64]) -> (float64, Tensor[(12, 4, 1), uint8], float64, Tensor[(3, 4, 3), float32], Tensor[(36), float32]) {
    %407 = @func_2294() /* ty=float64 */;
    %408 = cast(%407, dtype="uint8") /* ty=uint8 */;
    %409 = cast(%var_7890, dtype="uint8") /* ty=Tensor[(12, 4, 1), uint8] */;
    %410 = @func_6034() /* ty=(float64, float64) */;
    %411 = cast(meta[relay.Constant][19] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
    %412 = reshape(%411, newshape=[36, 1]) /* ty=Tensor[(36, 1), float32] */;
    %413 = @func_4981(%412) /* ty=(Tensor[(280), int64], Tensor[(3, 4, 3), float32], Tensor[(36, 1), float32]) */;
    %414 = @func_4878() /* ty=float64 */;
    %415 = bitwise_or(%408, %409) /* ty=Tensor[(12, 4, 1), uint8] */;
    %416 = %410.0;
    %417 = %413.1;
    (%414, %415, %416, %417, meta[relay.Constant][19] /* ty=Tensor[(36), float32] */)
  };
  %418(%var_7925) /* ty=(float64, Tensor[(12, 4, 1), uint8], float64, Tensor[(3, 4, 3), float32], Tensor[(36), float32]) */
}

def @func_5115(%var_5113: Tensor[(5, 56), float64], %var_5114: Tensor[(5, 56), bool]) -> (Tensor[(36), float32], float64, Tensor[(3, 4, 3), float32], float64, float64, Tensor[(5, 56), uint32], float64, Tensor[(5, 56), int64], Tensor[(5, 56), float32], float64) {
  %452 = fn (%var_5079: Tensor[(5, 56), float64], %var_5083: Tensor[(5, 56), bool]) -> (Tensor[(36), float32], float64, Tensor[(3, 4, 3), float32], float64, float64, Tensor[(5, 56), uint32], float64, Tensor[(5, 56), int64], Tensor[(5, 56), float32], float64) {
    %419 = @func_3263() /* ty=(Tensor[(280), int64], float64, Tensor[(36), float32], Tensor[(3, 4, 3), float32], float64, float64) */;
    %420 = cast(meta[relay.Constant][20] /* ty=Tensor[(5, 56), int64] */, dtype="int64") /* ty=Tensor[(5, 56), int64] */;
    %421 = reshape(%420, newshape=[280]) /* ty=Tensor[(280), int64] */;
    %422 = @func_2069(%421) /* ty=(Tensor[(3, 4, 3), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64], Tensor[(18, 2), float64]) */;
    %423 = @func_2909() /* ty=(float64, float64) */;
    %424 = @func_3142() /* ty=(float64, float64) */;
    %425 = cast(meta[relay.Constant][21] /* ty=Tensor[(5, 56), int64] */, dtype="uint32") /* ty=Tensor[(5, 56), uint32] */;
    %426 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(5, 56), int64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %427 = cast(meta[relay.Constant][20] /* ty=Tensor[(5, 56), int64] */, dtype="uint32") /* ty=Tensor[(5, 56), uint32] */;
    %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %429 = cast(meta[relay.Constant][20] /* ty=Tensor[(5, 56), int64] */, dtype="float64") /* ty=Tensor[(5, 56), float64] */;
    %430 = cos(%429) /* ty=Tensor[(5, 56), float64] */;
    %431 = cast(%var_5079, dtype="bool") /* ty=Tensor[(5, 56), bool] */;
    %432 = shape_of(%430, dtype="int32") /* ty=Tensor[(2), int32] */;
    %433 = cast(%430, dtype="bool") /* ty=Tensor[(5, 56), bool] */;
    %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %435 = less_equal(%433, %434) /* ty=Tensor[(5, 56), bool] */;
    %436 = cast(%var_5083, dtype="int64") /* ty=Tensor[(5, 56), int64] */;
    %437 = shape_of(%435, dtype="int32") /* ty=Tensor[(2), int32] */;
    %438 = cast(%435, dtype="int64") /* ty=Tensor[(5, 56), int64] */;
    %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %440 = cast(%435, dtype="float32") /* ty=Tensor[(5, 56), float32] */;
    %441 = @func_3656() /* ty=(float64, Tensor[(280), int64]) */;
    %442 = %419.2;
    %443 = @func_2514() /* ty=float64 */;
    %444 = %422.0;
    %445 = %423.0;
    %446 = %424.0;
    %447 = multiply(%427, %428) /* ty=Tensor[(5, 56), uint32] */;
    %448 = @func_2475() /* ty=float64 */;
    %449 = minimum(%438, %439) /* ty=Tensor[(5, 56), int64] */;
    %450 = asin(%440) /* ty=Tensor[(5, 56), float32] */;
    %451 = %441.0;
    (%442, %443, %444, %445, %446, %447, %448, %449, %450, %451)
  };
  %452(%var_5113, %var_5114) /* ty=(Tensor[(36), float32], float64, Tensor[(3, 4, 3), float32], float64, float64, Tensor[(5, 56), uint32], float64, Tensor[(5, 56), int64], Tensor[(5, 56), float32], float64) */
}

def @func_14978(%var_14974: Tensor[(12, 5, 5), float64]) -> Tensor[(12, 5, 5), float64] {
  %453 = cast(%var_14974, dtype="float64") /* ty=Tensor[(12, 5, 5), float64] */;
  %454 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(12, 5, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %455 = cast(meta[relay.Constant][22] /* ty=Tensor[(12, 5, 5), float64] */, dtype="float64") /* ty=Tensor[(12, 5, 5), float64] */;
  %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%455, %456) /* ty=Tensor[(12, 5, 5), float64] */
}

def @func_6780() -> (Tensor[(8, 13, 12), bool],) {
  @func_6778() /* ty=(Tensor[(8, 13, 12), bool],) */
}

def @func_11350() -> (float64, float64) {
  %457 = @func_2514() /* ty=float64 */;
  %458 = @func_2198() /* ty=float64 */;
  (%457, %458)
}

def @func_4861() -> (float64, float64, Tensor[(10, 7, 16), float64], Tensor[(1120), float64]) {
  @func_4859() /* ty=(float64, float64, Tensor[(10, 7, 16), float64], Tensor[(1120), float64]) */
}

def @func_12551() -> Tensor[(36), float32] {
  %460 = fn () -> Tensor[(36), float32] {
    %459 = @func_3106() /* ty=(Tensor[(36), float32], float64) */;
    %459.0
  };
  %460() /* ty=Tensor[(36), float32] */
}

def @func_4742(%var_4740: Tensor[(11, 13, 7), float64]) -> (Tensor[(11, 13, 7), float32], Tensor[(3, 4, 3), float32]) {
  @func_4739(%var_4740) /* ty=(Tensor[(11, 13, 7), float32], Tensor[(3, 4, 3), float32]) */
}

def @func_13206() -> float64 {
  %461 = fn () -> float64 {
    @func_8486() /* ty=float64 */
  };
  %461() /* ty=float64 */
}

def @func_13446() -> Tensor[(280), int64] {
  %463 = fn () -> Tensor[(280), int64] {
    %462 = @func_6149() /* ty=(Tensor[(280), int64],) */;
    %462.0
  };
  %463() /* ty=Tensor[(280), int64] */
}

def @func_13109() -> (float64, float64) {
  %468 = fn () -> (float64, float64) {
    %464 = @func_11973() /* ty=(float64, Tensor[(11, 13, 7), float32]) */;
    %465 = @func_7087() /* ty=(float64,) */;
    %466 = %464.0;
    %467 = %465.0;
    (%466, %467)
  };
  %468() /* ty=(float64, float64) */
}

def @func_3657() -> (float64, Tensor[(280), int64]) {
  %472 = fn () -> (float64, Tensor[(280), int64]) {
    %469 = @func_1837() /* ty=(Tensor[(13, 11, 13), bool], Tensor[(3, 4, 3), float32], float64, Tensor[(18, 2), float32], Tensor[(280), int64], Tensor[(36), float32]) */;
    %470 = @func_2697() /* ty=float64 */;
    %471 = %469.4;
    (%470, %471)
  };
  %472() /* ty=(float64, Tensor[(280), int64]) */
}

def @func_10874() -> (float64,) {
  @func_10872() /* ty=(float64,) */
}

def @func_986(%var_984: Tensor[(14, 4, 5), int64], %var_985: Tensor[(14, 4, 5), int64]) -> (Tensor[(14, 4, 5), int64], Tensor[(14, 4, 5), float64]) {
  @func_982(%var_984, %var_985) /* ty=(Tensor[(14, 4, 5), int64], Tensor[(14, 4, 5), float64]) */
}

def @func_6670(%var_6669: Tensor[(9, 2, 4), float64]) -> (Tensor[(9, 2, 4), int64], float64, float64) {
  %486 = fn (%var_6625: Tensor[(9, 2, 4), float64]) -> (Tensor[(9, 2, 4), int64], float64, float64) {
    %473 = @func_3509() /* ty=float64 */;
    %474 = cast(%473, dtype="uint8") /* ty=uint8 */;
    %475 = cast(%var_6625, dtype="uint8") /* ty=Tensor[(9, 2, 4), uint8] */;
    %476 = maximum(%474, %475) /* ty=Tensor[(9, 2, 4), uint8] */;
    %477 = cast(%476, dtype="int64") /* ty=Tensor[(9, 2, 4), int64] */;
    %478 = shape_of(%var_6625, dtype="int32") /* ty=Tensor[(3), int32] */;
    %479 = cast(%var_6625, dtype="int64") /* ty=Tensor[(9, 2, 4), int64] */;
    %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %481 = @func_3263() /* ty=(Tensor[(280), int64], float64, Tensor[(36), float32], Tensor[(3, 4, 3), float32], float64, float64) */;
    %482 = @func_4136() /* ty=(float64, float64) */;
    %483 = minimum(%479, %480) /* ty=Tensor[(9, 2, 4), int64] */;
    %484 = %481.1;
    %485 = %482.1;
    (%483, %484, %485)
  };
  %486(%var_6669) /* ty=(Tensor[(9, 2, 4), int64], float64, float64) */
}

def @func_3919() -> float64 {
  @func_2198() /* ty=float64 */
}

def @func_10816(%var_10814: float64, %var_10815: Tensor[(36), float32]) -> (Tensor[(280), int64], Tensor[(280), int64], float64, Tensor[(36), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64]) {
  %506 = fn (%var_10802: float64, %var_10803: Tensor[(36), float32]) -> (Tensor[(280), int64], Tensor[(280), int64], float64, Tensor[(36), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64]) {
    %487 = cast(%var_10802, dtype="float64") /* ty=float64 */;
    %488 = cast(%var_10803, dtype="float32") /* ty=Tensor[(36), float32] */;
    %489 = @func_4019() /* ty=Tensor[(280), int64] */;
    %490 = cast(%489, dtype="int64") /* ty=Tensor[(280), int64] */;
    %491 = reshape(%487, newshape=[]) /* ty=float64 */;
    %492 = reshape(%488, newshape=[36]) /* ty=Tensor[(36), float32] */;
    %493 = reshape(%490, newshape=[280]) /* ty=Tensor[(280), int64] */;
    %494 = @func_1178(%491, %492, %493) /* ty=(Tensor[(8, 6, 14), float64], Tensor[(3, 4, 3), float32], Tensor[(36), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64], Tensor[(14, 4, 5), int64]) */;
    %495 = cast(%var_10802, dtype="float32") /* ty=float32 */;
    %496 = cast(%var_10803, dtype="float32") /* ty=Tensor[(36), float32] */;
    %497 = %494.4;
    %498 = cast(%497, dtype="int64") /* ty=Tensor[(280), int64] */;
    %499 = reshape(%495, newshape=[]) /* ty=float32 */;
    %500 = reshape(%496, newshape=[36]) /* ty=Tensor[(36), float32] */;
    %501 = reshape(%498, newshape=[280]) /* ty=Tensor[(280), int64] */;
    %502 = @func_1415(%499, %500, %501) /* ty=(Tensor[(5, 2, 12), float32], Tensor[(14, 4, 5), float64], Tensor[(36), float32], Tensor[(280), int64]) */;
    %503 = @func_6577() /* ty=(Tensor[(280), int64],) */;
    %504 = %502.1;
    %505 = %503.0;
    (%489, %497, %var_10802, %var_10803, %504, %505)
  };
  %506(%var_10814, %var_10815) /* ty=(Tensor[(280), int64], Tensor[(280), int64], float64, Tensor[(36), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64]) */
}

def @func_13178() -> (Tensor[(8, 13, 12), bool],) {
  @func_13176() /* ty=(Tensor[(8, 13, 12), bool],) */
}

def @func_10231() -> float64 {
  %508 = fn () -> float64 {
    %507 = @func_6444() /* ty=(float64, Tensor[(280), int64], float64) */;
    %507.2
  };
  %508() /* ty=float64 */
}

def @func_14655() -> (Tensor[(280), int64],) {
  %509 = @func_13445() /* ty=Tensor[(280), int64] */;
  (%509,)
}

def @func_13415() -> Tensor[(14, 4, 5), float64] {
  @func_13413() /* ty=Tensor[(14, 4, 5), float64] */
}

def @func_15468() -> float64 {
  %511 = fn () -> float64 {
    %510 = @func_13566() /* ty=(float64,) */;
    %510.0
  };
  %511() /* ty=float64 */
}

def @func_8963() -> float64 {
  %513 = fn () -> float64 {
    %512 = @func_3445() /* ty=(float64, float64, float64, float64, float64) */;
    %512.3
  };
  %513() /* ty=float64 */
}

def @func_12734(%var_12727: Tensor[(13, 5, 13), float32], %var_12728: Tensor[(13, 5, 13), float32]) -> Tensor[(13, 5, 13), float32] {
  %514 = cast(%var_12728, dtype="float32") /* ty=Tensor[(13, 5, 13), float32] */;
  %515 = shape_of(%var_12727, dtype="int32") /* ty=Tensor[(3), int32] */;
  %516 = cast(%var_12727, dtype="float32") /* ty=Tensor[(13, 5, 13), float32] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%516, %517) /* ty=Tensor[(13, 5, 13), float32] */
}

def @func_14127() -> (Tensor[(3, 4, 3), float32], float64) {
  %522 = fn () -> (Tensor[(3, 4, 3), float32], float64) {
    %518 = @func_3179() /* ty=(Tensor[(3, 4, 3), float32],) */;
    %519 = @func_11888() /* ty=(float64,) */;
    %520 = %518.0;
    %521 = %519.0;
    (%520, %521)
  };
  %522() /* ty=(Tensor[(3, 4, 3), float32], float64) */
}

def @func_7298(%var_7290: Tensor[(2, 2, 13), float64]) -> Tensor[(2, 2, 13), float64] {
  %523 = cast(%var_7290, dtype="float64") /* ty=Tensor[(2, 2, 13), float64] */;
  erf(%523) /* ty=Tensor[(2, 2, 13), float64] */
}

def @func_2970() -> (float64, float64) {
  @func_2968() /* ty=(float64, float64) */
}

def @func_11237() -> (Tensor[(36), float32],) {
  @func_11235() /* ty=(Tensor[(36), float32],) */
}

def @func_16104() -> (float64, float64) {
  @func_16102() /* ty=(float64, float64) */
}

def @func_8431() -> float64 {
  @func_8429() /* ty=float64 */
}

def @func_10432(%var_10423: Tensor[(36), float32]) -> (float64, float64, Tensor[(280), int64], Tensor[(143, 1), float64], Tensor[(36), float32], Tensor[(36), float32]) {
  %524 = @func_7087() /* ty=(float64,) */;
  %525 = cast(meta[relay.Constant][23] /* ty=Tensor[(143, 1), float64] */, dtype="float64") /* ty=Tensor[(143, 1), float64] */;
  %526 = reshape(%525, newshape=[143]) /* ty=Tensor[(143), float64] */;
  %527 = @func_8720(%526) /* ty=(Tensor[(280), int64], Tensor[(14, 4, 5), float64], Tensor[(36), float32], Tensor[(143), float64]) */;
  %528 = cast(%var_10423, dtype="float32") /* ty=Tensor[(36), float32] */;
  %529 = reshape(%528, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %530 = @func_2448(%529) /* ty=(float64, Tensor[(14, 4, 5), float64], Tensor[(36), float32], Tensor[(280), int64], Tensor[(16, 15, 8), uint64], float64, Tensor[(3, 4, 3), float32]) */;
  %531 = %524.0;
  %532 = @func_3509() /* ty=float64 */;
  %533 = %527.0;
  %534 = %530.2;
  (%531, %532, %533, meta[relay.Constant][23] /* ty=Tensor[(143, 1), float64] */, %534, %var_10423)
}

def @func_4701() -> (float64,) {
  @func_4699() /* ty=(float64,) */
}

def @func_8615() -> (float64,) {
  @func_8613() /* ty=(float64,) */
}

def @func_15184() -> Tensor[(9, 8, 16), float32] {
  %535 = fn () -> Tensor[(9, 8, 16), float32] {
    @func_12040() /* ty=Tensor[(9, 8, 16), float32] */
  };
  %535() /* ty=Tensor[(9, 8, 16), float32] */
}

def @func_2354() -> (float64,) {
  %537 = fn () -> (float64,) {
    %536 = @func_2198() /* ty=float64 */;
    (%536,)
  };
  %537() /* ty=(float64,) */
}

def @func_16102() -> (float64, float64) {
  %538 = @func_5577() /* ty=(float64,) */;
  %539 = @func_6925() /* ty=(float64,) */;
  %540 = %538.0;
  %541 = %539.0;
  (%540, %541)
}

def @func_12420() -> (float64,) {
  @func_12418() /* ty=(float64,) */
}

def @func_4983(%var_4982: Tensor[(36, 1), float32]) -> (Tensor[(280), int64], Tensor[(3, 4, 3), float32], Tensor[(36, 1), float32]) {
  %547 = fn (%var_4978: Tensor[(36, 1), float32]) -> (Tensor[(280), int64], Tensor[(3, 4, 3), float32], Tensor[(36, 1), float32]) {
    %542 = @func_4080() /* ty=(Tensor[(280), int64],) */;
    %543 = cast(%var_4978, dtype="float32") /* ty=Tensor[(36, 1), float32] */;
    %544 = reshape(%543, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float32] */;
    %545 = %542.0;
    %546 = @func_111(%544) /* ty=Tensor[(3, 4, 3), float32] */;
    (%545, %546, %var_4978)
  };
  %547(%var_4982) /* ty=(Tensor[(280), int64], Tensor[(3, 4, 3), float32], Tensor[(36, 1), float32]) */
}

def @func_11407() -> Tensor[(9, 8, 16), float32] {
  %549 = fn () -> Tensor[(9, 8, 16), float32] {
    %548 = @func_5934() /* ty=(float64, Tensor[(9, 8, 16), float32], Tensor[(9, 8, 16), bool], Tensor[(36), float32]) */;
    %548.1
  };
  %549() /* ty=Tensor[(9, 8, 16), float32] */
}

def @func_10656() -> (float64,) {
  %550 = @func_3106() /* ty=(Tensor[(36), float32], float64) */;
  %551 = %550.1;
  (%551,)
}

def @func_8771() -> (float64,) {
  @func_8769() /* ty=(float64,) */
}

def @func_12527(%var_12524: Tensor[(6, 12, 8), float32], %var_12525: Tensor[(6, 12, 8), float32], %var_12526: Tensor[(6, 12, 8), float32]) -> (Tensor[(6, 12, 8), float32], float64, Tensor[(8, 13, 12), int8], Tensor[(6, 12, 8), uint32], Tensor[(14, 4, 5), float64], Tensor[(143), float64], float64, float64) {
  @func_12522(%var_12524, %var_12525, %var_12526) /* ty=(Tensor[(6, 12, 8), float32], float64, Tensor[(8, 13, 12), int8], Tensor[(6, 12, 8), uint32], Tensor[(14, 4, 5), float64], Tensor[(143), float64], float64, float64) */
}

def @func_7622() -> (Tensor[(3, 4, 3), float32], Tensor[(14, 4, 5), int64], Tensor[(70, 4), int64], float64) {
  %552 = @func_3179() /* ty=(Tensor[(3, 4, 3), float32],) */;
  %553 = cast(meta[relay.Constant][24] /* ty=Tensor[(70, 4), int64] */, dtype="int64") /* ty=Tensor[(70, 4), int64] */;
  %554 = cast(meta[relay.Constant][24] /* ty=Tensor[(70, 4), int64] */, dtype="int64") /* ty=Tensor[(70, 4), int64] */;
  %555 = reshape(%553, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), int64] */;
  %556 = reshape(%554, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), int64] */;
  %557 = @func_982(%555, %556) /* ty=(Tensor[(14, 4, 5), int64], Tensor[(14, 4, 5), float64]) */;
  %558 = @func_7383() /* ty=(float64, Tensor[(36, 1), float32], Tensor[(36), float32]) */;
  %559 = %552.0;
  %560 = %557.0;
  %561 = %558.0;
  (%559, %560, meta[relay.Constant][24] /* ty=Tensor[(70, 4), int64] */, %561)
}

def @func_7973() -> (float64, Tensor[(280), float32]) {
  %562 = @func_6149() /* ty=(Tensor[(280), int64],) */;
  %563 = %562.0;
  %564 = cast(%563, dtype="float32") /* ty=Tensor[(280), float32] */;
  %565 = @func_5646() /* ty=float64 */;
  %566 = acosh(%564) /* ty=Tensor[(280), float32] */;
  (%565, %566)
}

def @func_1183(%var_1180: float64, %var_1181: Tensor[(36), float32], %var_1182: Tensor[(280), int64]) -> (Tensor[(8, 6, 14), float64], Tensor[(3, 4, 3), float32], Tensor[(36), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64], Tensor[(14, 4, 5), int64]) {
  @func_1178(%var_1180, %var_1181, %var_1182) /* ty=(Tensor[(8, 6, 14), float64], Tensor[(3, 4, 3), float32], Tensor[(36), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64], Tensor[(14, 4, 5), int64]) */
}

def @func_5419() -> (Tensor[(280), int64], float64) {
  @func_5417() /* ty=(Tensor[(280), int64], float64) */
}

def @func_13326() -> (float64, float64) {
  %571 = fn () -> (float64, float64) {
    %567 = @func_3142() /* ty=(float64, float64) */;
    %568 = @func_7816() /* ty=(float64, float64) */;
    %569 = %567.1;
    %570 = %568.1;
    (%569, %570)
  };
  %571() /* ty=(float64, float64) */
}

def @func_4136() -> (float64, float64) {
  %572 = @func_3142() /* ty=(float64, float64) */;
  %573 = @func_3549() /* ty=float64 */;
  %574 = %572.0;
  (%573, %574)
}

def @func_5242() -> Tensor[(280), int64] {
  @func_5240() /* ty=Tensor[(280), int64] */
}

def @func_9737() -> float64 {
  @func_9735() /* ty=float64 */
}

def @func_15505() -> float64 {
  %575 = fn () -> float64 {
    @func_8420() /* ty=float64 */
  };
  %575() /* ty=float64 */
}

def @func_5676() -> float64 {
  @func_3187() /* ty=float64 */
}

def @func_2198() -> float64 {
  %576 = @func_1837() /* ty=(Tensor[(13, 11, 13), bool], Tensor[(3, 4, 3), float32], float64, Tensor[(18, 2), float32], Tensor[(280), int64], Tensor[(36), float32]) */;
  %576.2
}

def @func_11973() -> (float64, Tensor[(11, 13, 7), float32]) {
  %577 = @func_11867() /* ty=(float64, float64) */;
  %578 = @func_8218() /* ty=(Tensor[(280), int64], Tensor[(11, 13, 7), float32]) */;
  %579 = %577.0;
  %580 = %578.1;
  (%579, %580)
}

def @func_13413() -> Tensor[(14, 4, 5), float64] {
  %581 = @func_5796() /* ty=(float64, Tensor[(14, 4, 5), float64], Tensor[(5, 56), int64], Tensor[(18, 2), uint8]) */;
  %581.1
}

def @func_3268() -> Tensor[(280), int64] {
  %583 = fn () -> Tensor[(280), int64] {
    %582 = @func_3263() /* ty=(Tensor[(280), int64], float64, Tensor[(36), float32], Tensor[(3, 4, 3), float32], float64, float64) */;
    %582.0
  };
  %583() /* ty=Tensor[(280), int64] */
}

def @func_8071() -> (float64, float64) {
  %587 = fn () -> (float64, float64) {
    %584 = @func_6444() /* ty=(float64, Tensor[(280), int64], float64) */;
    %585 = %584.2;
    %586 = @func_3187() /* ty=float64 */;
    (%585, %586)
  };
  %587() /* ty=(float64, float64) */
}

def @func_13724() -> (Tensor[(9, 8, 16), float32], Tensor[(8, 13, 12), bool]) {
  @func_13722() /* ty=(Tensor[(9, 8, 16), float32], Tensor[(8, 13, 12), bool]) */
}

def @func_15404() -> (float64,) {
  %588 = @func_10656() /* ty=(float64,) */;
  %589 = %588.0;
  (%589,)
}

def @func_2911() -> (float64, float64) {
  @func_2909() /* ty=(float64, float64) */
}

def @func_9678() -> (float64, float64) {
  %594 = fn () -> (float64, float64) {
    %590 = @func_4699() /* ty=(float64,) */;
    %591 = @func_6925() /* ty=(float64,) */;
    %592 = %590.0;
    %593 = %591.0;
    (%592, %593)
  };
  %594() /* ty=(float64, float64) */
}

def @func_3187() -> float64 {
  %595 = @func_2968() /* ty=(float64, float64) */;
  %595.1
}

def @func_14868(%var_14866: Tensor[(8, 15, 8), int8], %var_14867: Tensor[(8, 15, 8), int8]) -> (Tensor[(8, 15, 8), bool], float64) {
  %602 = fn (%var_14853: Tensor[(8, 15, 8), int8], %var_14854: Tensor[(8, 15, 8), int8]) -> (Tensor[(8, 15, 8), bool], float64) {
    %596 = cast(%var_14854, dtype="bool") /* ty=Tensor[(8, 15, 8), bool] */;
    %597 = shape_of(%var_14853, dtype="int32") /* ty=Tensor[(3), int32] */;
    %598 = cast(%var_14853, dtype="bool") /* ty=Tensor[(8, 15, 8), bool] */;
    %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %600 = greater_equal(%598, %599) /* ty=Tensor[(8, 15, 8), bool] */;
    %601 = @func_8080() /* ty=float64 */;
    (%600, %601)
  };
  %602(%var_14866, %var_14867) /* ty=(Tensor[(8, 15, 8), bool], float64) */
}

def @func_3600(%var_3598: int64, %var_3599: Tensor[(2, 13, 11), int64]) -> (Tensor[(2, 13, 11), int64], Tensor[(280), int64], Tensor[(70, 4), int64], Tensor[(2, 13, 11), float32], Tensor[(14, 4, 5), float64]) {
  %616 = fn (%var_3563: int64, %var_3564: Tensor[(2, 13, 11), int64]) -> (Tensor[(2, 13, 11), int64], Tensor[(280), int64], Tensor[(70, 4), int64], Tensor[(2, 13, 11), float32], Tensor[(14, 4, 5), float64]) {
    %603 = cast(%var_3563, dtype="int64") /* ty=int64 */;
    %604 = cast(%var_3564, dtype="int64") /* ty=Tensor[(2, 13, 11), int64] */;
    %605 = cast(meta[relay.Constant][25] /* ty=Tensor[(70, 4), int64] */, dtype="int64") /* ty=Tensor[(70, 4), int64] */;
    %606 = reshape(%605, newshape=[280]) /* ty=Tensor[(280), int64] */;
    %607 = @func_2069(%606) /* ty=(Tensor[(3, 4, 3), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64], Tensor[(18, 2), float64]) */;
    %608 = cast(%var_3564, dtype="float32") /* ty=Tensor[(2, 13, 11), float32] */;
    %609 = cast(meta[relay.Constant][25] /* ty=Tensor[(70, 4), int64] */, dtype="int64") /* ty=Tensor[(70, 4), int64] */;
    %610 = reshape(%609, newshape=[280]) /* ty=Tensor[(280), int64] */;
    %611 = @func_2069(%610) /* ty=(Tensor[(3, 4, 3), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64], Tensor[(18, 2), float64]) */;
    %612 = bitwise_and(%603, %604) /* ty=Tensor[(2, 13, 11), int64] */;
    %613 = %607.2;
    %614 = sigmoid(%608) /* ty=Tensor[(2, 13, 11), float32] */;
    %615 = %611.1;
    (%612, %613, meta[relay.Constant][25] /* ty=Tensor[(70, 4), int64] */, %614, %615)
  };
  %616(%var_3598, %var_3599) /* ty=(Tensor[(2, 13, 11), int64], Tensor[(280), int64], Tensor[(70, 4), int64], Tensor[(2, 13, 11), float32], Tensor[(14, 4, 5), float64]) */
}

def @func_11319() -> float64 {
  @func_11317() /* ty=float64 */
}

def @func_4529(%var_4527: Tensor[(143), float64]) -> (Tensor[(18, 2), int8], float64, Tensor[(280), int64], Tensor[(280), int64], Tensor[(3, 4, 3), float32], Tensor[(143), float64]) {
  @func_4526(%var_4527) /* ty=(Tensor[(18, 2), int8], float64, Tensor[(280), int64], Tensor[(280), int64], Tensor[(3, 4, 3), float32], Tensor[(143), float64]) */
}

def @func_9535() -> float64 {
  @func_9533() /* ty=float64 */
}

def @func_10786() -> (Tensor[(3, 4, 3), float32],) {
  @func_10784() /* ty=(Tensor[(3, 4, 3), float32],) */
}

def @func_13127() -> (float64,) {
  %619 = fn () -> (float64,) {
    %617 = @func_7993() /* ty=(float64, float64) */;
    %618 = %617.1;
    (%618,)
  };
  %619() /* ty=(float64,) */
}

def @func_2697() -> float64 {
  @func_2514() /* ty=float64 */
}

def @func_2476() -> float64 {
  %621 = fn () -> float64 {
    %620 = @func_2353() /* ty=(float64,) */;
    %620.0
  };
  %621() /* ty=float64 */
}

def @func_11975() -> (float64, Tensor[(11, 13, 7), float32]) {
  @func_11973() /* ty=(float64, Tensor[(11, 13, 7), float32]) */
}

def @func_12827(%var_12826: Tensor[(36), float32]) -> (Tensor[(11, 13, 7), float32], float64, Tensor[(16, 15, 8), uint64], Tensor[(36), float32]) {
  %630 = fn (%var_12815: Tensor[(36), float32]) -> (Tensor[(11, 13, 7), float32], float64, Tensor[(16, 15, 8), uint64], Tensor[(36), float32]) {
    %622 = @func_11973() /* ty=(float64, Tensor[(11, 13, 7), float32]) */;
    %623 = @func_3045() /* ty=(float64, float64, float64) */;
    %624 = cast(%var_12815, dtype="float32") /* ty=Tensor[(36), float32] */;
    %625 = reshape(%624, newshape=[36]) /* ty=Tensor[(36), float32] */;
    %626 = @func_2448(%625) /* ty=(float64, Tensor[(14, 4, 5), float64], Tensor[(36), float32], Tensor[(280), int64], Tensor[(16, 15, 8), uint64], float64, Tensor[(3, 4, 3), float32]) */;
    %627 = %622.1;
    %628 = %623.2;
    %629 = %626.4;
    (%627, %628, %629, %var_12815)
  };
  %630(%var_12826) /* ty=(Tensor[(11, 13, 7), float32], float64, Tensor[(16, 15, 8), uint64], Tensor[(36), float32]) */
}

def @func_10784() -> (Tensor[(3, 4, 3), float32],) {
  %631 = @func_4409() /* ty=Tensor[(3, 4, 3), float32] */;
  (%631,)
}

def @func_16066() -> (Tensor[(5, 6, 1), float64],) {
  @func_16064() /* ty=(Tensor[(5, 6, 1), float64],) */
}

def @func_8218() -> (Tensor[(280), int64], Tensor[(11, 13, 7), float32]) {
  %632 = @func_6149() /* ty=(Tensor[(280), int64],) */;
  %633 = @func_4772() /* ty=(Tensor[(3, 4, 3), float32], Tensor[(11, 13, 7), float32], Tensor[(1001), float64]) */;
  %634 = %632.0;
  %635 = %633.1;
  (%634, %635)
}

def @func_5578() -> (float64,) {
  %638 = fn () -> (float64,) {
    %636 = @func_5417() /* ty=(Tensor[(280), int64], float64) */;
    %637 = %636.1;
    (%637,)
  };
  %638() /* ty=(float64,) */
}

def @func_10343() -> float64 {
  @func_10341() /* ty=float64 */
}

def @func_3310() -> float64 {
  @func_2475() /* ty=float64 */
}

def @func_11868() -> (float64, float64) {
  %642 = fn () -> (float64, float64) {
    %639 = @func_10765() /* ty=(float64, float64, float64) */;
    %640 = %639.1;
    %641 = @func_8420() /* ty=float64 */;
    (%640, %641)
  };
  %642() /* ty=(float64, float64) */
}

def @func_9120() -> (Tensor[(280), float32],) {
  %645 = fn () -> (Tensor[(280), float32],) {
    %643 = @func_7973() /* ty=(float64, Tensor[(280), float32]) */;
    %644 = %643.1;
    (%644,)
  };
  %645() /* ty=(Tensor[(280), float32],) */
}

def @func_10578() -> (float64, float64) {
  %649 = fn () -> (float64, float64) {
    %646 = @func_10134() /* ty=(float64,) */;
    %647 = @func_7839() /* ty=float64 */;
    %648 = %646.0;
    (%647, %648)
  };
  %649() /* ty=(float64, float64) */
}

def @func_3845(%var_3824: Tensor[(1, 13, 11), float64]) -> (Tensor[(?, 13, 11), bool], Tensor[(3, 4, 3), float32], Tensor[(36), float32]) {
  %650 = @func_3045() /* ty=(float64, float64, float64) */;
  %651 = %650.0;
  %652 = cast(%651, dtype="int32") /* ty=int32 */;
  %653 = cast(%var_3824, dtype="int32") /* ty=Tensor[(1, 13, 11), int32] */;
  %654 = add(%652, %653) /* ty=Tensor[(1, 13, 11), int32] */;
  %655 = cast(%var_3824, dtype="bool") /* ty=Tensor[(1, 13, 11), bool] */;
  %656 = shape_of(%654, dtype="int32") /* ty=Tensor[(3), int32] */;
  %657 = cast(%654, dtype="bool") /* ty=Tensor[(1, 13, 11), bool] */;
  %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %659 = cast(meta[relay.Constant][26] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %660 = reshape(%659, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float32] */;
  %661 = logical_and(%657, %658) /* ty=Tensor[(?, 13, 11), bool] */;
  %662 = @func_111(%660) /* ty=Tensor[(3, 4, 3), float32] */;
  (%661, %662, meta[relay.Constant][26] /* ty=Tensor[(36), float32] */)
}

def @func_10003(%var_9983: Tensor[(45, 1), float64]) -> (float64, Tensor[(45, 1), float64], Tensor[(143), float64], Tensor[(1001), float64], float64) {
  %663 = cast(%var_9983, dtype="float64") /* ty=Tensor[(45, 1), float64] */;
  %664 = cast(meta[relay.Constant][27] /* ty=Tensor[(143), float64] */, dtype="float64") /* ty=Tensor[(143), float64] */;
  %665 = reshape(%663, newshape=[45]) /* ty=Tensor[(45), float64] */;
  %666 = reshape(%664, newshape=[143, 1]) /* ty=Tensor[(143, 1), float64] */;
  %667 = @func_4957(%665, %666) /* ty=(Tensor[(280), int64], Tensor[(3, 4, 3), float32], Tensor[(?, 13, 11), bool], Tensor[(143, 1), float64], Tensor[(?, 9, 5), bool], float64, float64, Tensor[(3, 4, 3), float32]) */;
  %668 = @func_4772() /* ty=(Tensor[(3, 4, 3), float32], Tensor[(11, 13, 7), float32], Tensor[(1001), float64]) */;
  %669 = %668.2;
  %670 = cast(%669, dtype="float64") /* ty=Tensor[(1001), float64] */;
  %671 = %667.5;
  %672 = asinh(%670) /* ty=Tensor[(1001), float64] */;
  %673 = @func_8429() /* ty=float64 */;
  (%671, %var_9983, meta[relay.Constant][27] /* ty=Tensor[(143), float64] */, %672, %673)
}

def @func_4739(%var_4727: Tensor[(11, 13, 7), float64]) -> (Tensor[(11, 13, 7), float32], Tensor[(3, 4, 3), float32]) {
  %674 = @func_2198() /* ty=float64 */;
  %675 = cast(%674, dtype="float32") /* ty=float32 */;
  %676 = cast(%var_4727, dtype="float32") /* ty=Tensor[(11, 13, 7), float32] */;
  %677 = @func_3179() /* ty=(Tensor[(3, 4, 3), float32],) */;
  %678 = maximum(%675, %676) /* ty=Tensor[(11, 13, 7), float32] */;
  %679 = %677.0;
  (%678, %679)
}

def @func_7818() -> (float64, float64) {
  @func_7816() /* ty=(float64, float64) */
}

def @func_6565() -> (Tensor[(3, 4, 3), float32],) {
  %682 = fn () -> (Tensor[(3, 4, 3), float32],) {
    %680 = @func_1837() /* ty=(Tensor[(13, 11, 13), bool], Tensor[(3, 4, 3), float32], float64, Tensor[(18, 2), float32], Tensor[(280), int64], Tensor[(36), float32]) */;
    %681 = %680.1;
    (%681,)
  };
  %682() /* ty=(Tensor[(3, 4, 3), float32],) */
}

def @func_13474() -> (float64, float64, float64, Tensor[(9, 8, 16), float32], float64) {
  %692 = fn () -> (float64, float64, float64, Tensor[(9, 8, 16), float32], float64) {
    %683 = @func_3263() /* ty=(Tensor[(280), int64], float64, Tensor[(36), float32], Tensor[(3, 4, 3), float32], float64, float64) */;
    %684 = @func_8613() /* ty=(float64,) */;
    %685 = @func_5934() /* ty=(float64, Tensor[(9, 8, 16), float32], Tensor[(9, 8, 16), bool], Tensor[(36), float32]) */;
    %686 = @func_13252() /* ty=(float64, float64) */;
    %687 = %683.1;
    %688 = %684.0;
    %689 = @func_7839() /* ty=float64 */;
    %690 = %685.1;
    %691 = %686.0;
    (%687, %688, %689, %690, %691)
  };
  %692() /* ty=(float64, float64, float64, Tensor[(9, 8, 16), float32], float64) */
}

def @func_2938() -> (float64, Tensor[(3, 4, 3), float32], Tensor[(36), float32]) {
  @func_2936() /* ty=(float64, Tensor[(3, 4, 3), float32], Tensor[(36), float32]) */
}

def @func_3445() -> (float64, float64, float64, float64, float64) {
  %693 = @func_2936() /* ty=(float64, Tensor[(3, 4, 3), float32], Tensor[(36), float32]) */;
  %694 = @func_2968() /* ty=(float64, float64) */;
  %695 = @func_3106() /* ty=(Tensor[(36), float32], float64) */;
  %696 = %693.0;
  %697 = %694.0;
  %698 = %695.1;
  %699 = @func_2697() /* ty=float64 */;
  %700 = @func_3187() /* ty=float64 */;
  (%696, %697, %698, %699, %700)
}

def @func_4020() -> Tensor[(280), int64] {
  %701 = fn () -> Tensor[(280), int64] {
    @func_3267() /* ty=Tensor[(280), int64] */
  };
  %701() /* ty=Tensor[(280), int64] */
}

def @func_4216() -> (Tensor[(280), int64], Tensor[(280), int64], float64, float64) {
  %702 = @func_2544() /* ty=(Tensor[(280), int64],) */;
  %703 = @func_3263() /* ty=(Tensor[(280), int64], float64, Tensor[(36), float32], Tensor[(3, 4, 3), float32], float64, float64) */;
  %704 = @func_3267() /* ty=Tensor[(280), int64] */;
  %705 = %702.0;
  %706 = %703.5;
  %707 = @func_3800() /* ty=float64 */;
  (%704, %705, %706, %707)
}

def @func_3142() -> (float64, float64) {
  %708 = @func_2851() /* ty=(float64,) */;
  %709 = %708.0;
  %710 = @func_2198() /* ty=float64 */;
  (%709, %710)
}

def @func_9533() -> float64 {
  %711 = @func_8816() /* ty=(float64, float64, float64) */;
  %711.1
}

def @func_4409() -> Tensor[(3, 4, 3), float32] {
  %712 = @func_3179() /* ty=(Tensor[(3, 4, 3), float32],) */;
  %712.0
}

def @func_16450() -> (float64, float64, Tensor[(2, 2, 13), float64], Tensor[(52), float64]) {
  %719 = fn () -> (float64, float64, Tensor[(2, 2, 13), float64], Tensor[(52), float64]) {
    %713 = @func_3445() /* ty=(float64, float64, float64, float64, float64) */;
    %714 = cast(meta[relay.Constant][28] /* ty=Tensor[(52), float64] */, dtype="float64") /* ty=Tensor[(52), float64] */;
    %715 = reshape(%714, newshape=[2, 2, 13]) /* ty=Tensor[(2, 2, 13), float64] */;
    %716 = %713.0;
    %717 = @func_10341() /* ty=float64 */;
    %718 = @func_7298(%715) /* ty=Tensor[(2, 2, 13), float64] */;
    (%716, %717, %718, meta[relay.Constant][28] /* ty=Tensor[(52), float64] */)
  };
  %719() /* ty=(float64, float64, Tensor[(2, 2, 13), float64], Tensor[(52), float64]) */
}

def @func_6057() -> float64 {
  %721 = fn () -> float64 {
    %720 = @func_3445() /* ty=(float64, float64, float64, float64, float64) */;
    %720.1
  };
  %721() /* ty=float64 */
}

def @func_7678(%var_7677: Tensor[(6, 7, 15), int32]) -> (Tensor[(6, 7, 15), int32], Tensor[(280), int64], Tensor[(36), float32], Tensor[(6, 7, 15), float64], Tensor[(3, 4, 3), float32]) {
  %739 = fn (%var_7630: Tensor[(6, 7, 15), int32]) -> (Tensor[(6, 7, 15), int32], Tensor[(280), int64], Tensor[(36), float32], Tensor[(6, 7, 15), float64], Tensor[(3, 4, 3), float32]) {
    %722 = cast(%var_7630, dtype="int32") /* ty=Tensor[(6, 7, 15), int32] */;
    %723 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(6, 7, 15), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %724 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 7, 15), int32] */, dtype="int32") /* ty=Tensor[(6, 7, 15), int32] */;
    %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %726 = cast(meta[relay.Constant][30] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
    %727 = reshape(%726, newshape=[36, 1]) /* ty=Tensor[(36, 1), float32] */;
    %728 = @func_4981(%727) /* ty=(Tensor[(280), int64], Tensor[(3, 4, 3), float32], Tensor[(36, 1), float32]) */;
    %729 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 7, 15), int32] */, dtype="float64") /* ty=Tensor[(6, 7, 15), float64] */;
    %730 = %728.0;
    %731 = cast(%730, dtype="float64") /* ty=Tensor[(280), float64] */;
    %732 = cast(%730, dtype="bool") /* ty=Tensor[(280), bool] */;
    %733 = reshape(%731, newshape=[5, 56]) /* ty=Tensor[(5, 56), float64] */;
    %734 = reshape(%732, newshape=[5, 56]) /* ty=Tensor[(5, 56), bool] */;
    %735 = @func_5112(%733, %734) /* ty=(Tensor[(36), float32], float64, Tensor[(3, 4, 3), float32], float64, float64, Tensor[(5, 56), uint32], float64, Tensor[(5, 56), int64], Tensor[(5, 56), float32], float64) */;
    %736 = multiply(%724, %725) /* ty=Tensor[(6, 7, 15), int32] */;
    %737 = tan(%729) /* ty=Tensor[(6, 7, 15), float64] */;
    %738 = %735.2;
    (%736, %730, meta[relay.Constant][30] /* ty=Tensor[(36), float32] */, %737, %738)
  };
  %739(%var_7677) /* ty=(Tensor[(6, 7, 15), int32], Tensor[(280), int64], Tensor[(36), float32], Tensor[(6, 7, 15), float64], Tensor[(3, 4, 3), float32]) */
}

def @func_15065() -> (Tensor[(280), int64],) {
  %740 = @func_5240() /* ty=Tensor[(280), int64] */;
  (%740,)
}

def @func_8180() -> (float64, Tensor[(280), int64]) {
  %744 = fn () -> (float64, Tensor[(280), int64]) {
    %741 = @func_6577() /* ty=(Tensor[(280), int64],) */;
    %742 = @func_6547() /* ty=float64 */;
    %743 = %741.0;
    (%742, %743)
  };
  %744() /* ty=(float64, Tensor[(280), int64]) */
}

def @func_3991() -> (Tensor[(36), float32], float64, Tensor[(3, 4, 3), float32]) {
  @func_3989() /* ty=(Tensor[(36), float32], float64, Tensor[(3, 4, 3), float32]) */
}

def @func_5280(%var_5265: uint32, %var_5266: Tensor[(5, 10, 7), uint32]) -> (Tensor[(5, 10, 7), uint32],) {
  %745 = cast(%var_5265, dtype="uint32") /* ty=uint32 */;
  %746 = cast(%var_5266, dtype="uint32") /* ty=Tensor[(5, 10, 7), uint32] */;
  %747 = bitwise_or(%745, %746) /* ty=Tensor[(5, 10, 7), uint32] */;
  (%747,)
}

def @func_6116(%var_6110: Tensor[(286), int64]) -> (Tensor[(10, 6, 11), uint8], Tensor[(2, 13, 11), int64], Tensor[(286), int64]) {
  %748 = @func_3142() /* ty=(float64, float64) */;
  %749 = %748.0;
  %750 = cast(%749, dtype="int32") /* ty=int32 */;
  %751 = cast(meta[relay.Constant][31] /* ty=Tensor[(10, 6, 11), float64] */, dtype="int32") /* ty=Tensor[(10, 6, 11), int32] */;
  %752 = bitwise_xor(%750, %751) /* ty=Tensor[(10, 6, 11), int32] */;
  %753 = cast(%752, dtype="uint8") /* ty=Tensor[(10, 6, 11), uint8] */;
  %754 = cast(%749, dtype="uint8") /* ty=uint8 */;
  %755 = cast(%749, dtype="int64") /* ty=int64 */;
  %756 = cast(%var_6110, dtype="int64") /* ty=Tensor[(286), int64] */;
  %757 = reshape(%755, newshape=[]) /* ty=int64 */;
  %758 = reshape(%756, newshape=[2, 13, 11]) /* ty=Tensor[(2, 13, 11), int64] */;
  %759 = @func_3597(%757, %758) /* ty=(Tensor[(2, 13, 11), int64], Tensor[(280), int64], Tensor[(70, 4), int64], Tensor[(2, 13, 11), float32], Tensor[(14, 4, 5), float64]) */;
  %760 = multiply(%753, %754) /* ty=Tensor[(10, 6, 11), uint8] */;
  %761 = %759.0;
  (%760, %761, %var_6110)
}

def @func_6283() -> (float64, Tensor[(9, 8, 16), float32], float64) {
  @func_6281() /* ty=(float64, Tensor[(9, 8, 16), float32], float64) */
}

def @func_11547() -> Tensor[(8, 13, 12), bool] {
  %763 = fn () -> Tensor[(8, 13, 12), bool] {
    %762 = @func_6778() /* ty=(Tensor[(8, 13, 12), bool],) */;
    %762.0
  };
  %763() /* ty=Tensor[(8, 13, 12), bool] */
}

def @func_2762(%var_2743: Tensor[(9, 7, 2), bool], %var_2744: Tensor[(9, 7, 2), bool], %var_2749: Tensor[(1540), uint16]) -> (Tensor[(9, 7, 2), bool], Tensor[(14, 10, 11), uint16], Tensor[(1540), uint16], float64) {
  %764 = cast(%var_2744, dtype="bool") /* ty=Tensor[(9, 7, 2), bool] */;
  %765 = shape_of(%var_2743, dtype="int32") /* ty=Tensor[(3), int32] */;
  %766 = cast(%var_2743, dtype="bool") /* ty=Tensor[(9, 7, 2), bool] */;
  %767 = dyn.reshape(%764, %765, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %768 = cast(%var_2749, dtype="uint16") /* ty=Tensor[(1540), uint16] */;
  %769 = cast(%var_2749, dtype="uint16") /* ty=Tensor[(1540), uint16] */;
  %770 = reshape(%768, newshape=[14, 10, 11]) /* ty=Tensor[(14, 10, 11), uint16] */;
  %771 = reshape(%769, newshape=[14, 10, 11]) /* ty=Tensor[(14, 10, 11), uint16] */;
  %772 = @func_2626(%770, %771) /* ty=(Tensor[(14, 10, 11), uint16],) */;
  %773 = logical_and(%766, %767) /* ty=Tensor[(9, 7, 2), bool] */;
  %774 = %772.0;
  %775 = @func_2294() /* ty=float64 */;
  (%773, %774, %var_2749, %775)
}

def @func_4773() -> (Tensor[(3, 4, 3), float32], Tensor[(11, 13, 7), float32], Tensor[(1001), float64]) {
  %781 = fn () -> (Tensor[(3, 4, 3), float32], Tensor[(11, 13, 7), float32], Tensor[(1001), float64]) {
    %776 = cast(meta[relay.Constant][32] /* ty=Tensor[(1001), float64] */, dtype="float64") /* ty=Tensor[(1001), float64] */;
    %777 = reshape(%776, newshape=[11, 13, 7]) /* ty=Tensor[(11, 13, 7), float64] */;
    %778 = @func_4739(%777) /* ty=(Tensor[(11, 13, 7), float32], Tensor[(3, 4, 3), float32]) */;
    %779 = @func_4409() /* ty=Tensor[(3, 4, 3), float32] */;
    %780 = %778.0;
    (%779, %780, meta[relay.Constant][32] /* ty=Tensor[(1001), float64] */)
  };
  %781() /* ty=(Tensor[(3, 4, 3), float32], Tensor[(11, 13, 7), float32], Tensor[(1001), float64]) */
}

def @func_9511() -> (float64,) {
  %783 = fn () -> (float64,) {
    %782 = @func_4878() /* ty=float64 */;
    (%782,)
  };
  %783() /* ty=(float64,) */
}

def @func_7087() -> (float64,) {
  %784 = @func_6034() /* ty=(float64, float64) */;
  %785 = %784.0;
  (%785,)
}

def @func_8658(%var_8640: Tensor[(9, 13, 13), int32], %var_8641: Tensor[(9, 13, 13), int32]) -> (Tensor[(9, 13, 13), int32], float64) {
  %786 = cast(%var_8641, dtype="int32") /* ty=Tensor[(9, 13, 13), int32] */;
  %787 = shape_of(%var_8640, dtype="int32") /* ty=Tensor[(3), int32] */;
  %788 = cast(%var_8640, dtype="int32") /* ty=Tensor[(9, 13, 13), int32] */;
  %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %790 = @func_8613() /* ty=(float64,) */;
  %791 = subtract(%788, %789) /* ty=Tensor[(9, 13, 13), int32] */;
  %792 = %790.0;
  (%791, %792)
}

def @func_12738(%var_12736: Tensor[(13, 5, 13), float32], %var_12737: Tensor[(13, 5, 13), float32]) -> Tensor[(13, 5, 13), float32] {
  @func_12734(%var_12736, %var_12737) /* ty=Tensor[(13, 5, 13), float32] */
}

def @func_6369(%var_6367: Tensor[(36), float32], %var_6368: Tensor[(1540), uint16]) -> (float64, Tensor[(16, 15, 8), uint64], Tensor[(36), float32], Tensor[(14, 10, 11), uint16], Tensor[(1540), uint16]) {
  %804 = fn (%var_6307: Tensor[(36), float32], %var_6361: Tensor[(1540), uint16]) -> (float64, Tensor[(16, 15, 8), uint64], Tensor[(36), float32], Tensor[(14, 10, 11), uint16], Tensor[(1540), uint16]) {
    %793 = cast(%var_6307, dtype="float32") /* ty=Tensor[(36), float32] */;
    %794 = reshape(%793, newshape=[1, 36]) /* ty=Tensor[(1, 36), float32] */;
    %795 = @func_3378(%794) /* ty=(float64, Tensor[(16, 15, 8), uint64], Tensor[(?, 36), float64], Tensor[(16, 15, 8), uint64]) */;
    %796 = cast(%var_6361, dtype="uint16") /* ty=Tensor[(1540), uint16] */;
    %797 = cast(%var_6361, dtype="uint16") /* ty=Tensor[(1540), uint16] */;
    %798 = reshape(%796, newshape=[14, 10, 11]) /* ty=Tensor[(14, 10, 11), uint16] */;
    %799 = reshape(%797, newshape=[14, 10, 11]) /* ty=Tensor[(14, 10, 11), uint16] */;
    %800 = @func_2626(%798, %799) /* ty=(Tensor[(14, 10, 11), uint16],) */;
    %801 = @func_2726() /* ty=float64 */;
    %802 = %795.1;
    %803 = %800.0;
    (%801, %802, %var_6307, %803, %var_6361)
  };
  %804(%var_6367, %var_6368) /* ty=(float64, Tensor[(16, 15, 8), uint64], Tensor[(36), float32], Tensor[(14, 10, 11), uint16], Tensor[(1540), uint16]) */
}

def @func_15284() -> (float64, Tensor[(36), float32], float64, Tensor[(3, 4, 3), float32]) {
  @func_15282() /* ty=(float64, Tensor[(36), float32], float64, Tensor[(3, 4, 3), float32]) */
}

def @func_2267(%var_2248: Tensor[(36), float32], %var_2249: Tensor[(280), int64]) -> (float64, Tensor[(36), float32], Tensor[(36), float32], Tensor[(280), int64], Tensor[(36), float32]) {
  %805 = @func_2198() /* ty=float64 */;
  %806 = cast(%805, dtype="float32") /* ty=float32 */;
  %807 = cast(%var_2248, dtype="float32") /* ty=Tensor[(36), float32] */;
  %808 = cast(%var_2249, dtype="int64") /* ty=Tensor[(280), int64] */;
  %809 = reshape(%806, newshape=[]) /* ty=float32 */;
  %810 = reshape(%807, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %811 = reshape(%808, newshape=[280]) /* ty=Tensor[(280), int64] */;
  %812 = @func_1415(%809, %810, %811) /* ty=(Tensor[(5, 2, 12), float32], Tensor[(14, 4, 5), float64], Tensor[(36), float32], Tensor[(280), int64]) */;
  %813 = cast(%805, dtype="float64") /* ty=float64 */;
  %814 = cast(%var_2248, dtype="float32") /* ty=Tensor[(36), float32] */;
  %815 = cast(%var_2249, dtype="int64") /* ty=Tensor[(280), int64] */;
  %816 = reshape(%813, newshape=[]) /* ty=float64 */;
  %817 = reshape(%814, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %818 = reshape(%815, newshape=[280]) /* ty=Tensor[(280), int64] */;
  %819 = @func_1178(%816, %817, %818) /* ty=(Tensor[(8, 6, 14), float64], Tensor[(3, 4, 3), float32], Tensor[(36), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64], Tensor[(14, 4, 5), int64]) */;
  %820 = %812.2;
  %821 = %819.2;
  (%805, %820, %var_2248, %var_2249, %821)
}

def @func_6281() -> (float64, Tensor[(9, 8, 16), float32], float64) {
  %822 = @func_3752() /* ty=(Tensor[(9, 8, 16), float32],) */;
  %823 = @func_2475() /* ty=float64 */;
  %824 = %822.0;
  %825 = @func_2726() /* ty=float64 */;
  (%823, %824, %825)
}

def @func_11768() -> (Tensor[(36), float32], float64) {
  %829 = fn () -> (Tensor[(36), float32], float64) {
    %826 = @func_1837() /* ty=(Tensor[(13, 11, 13), bool], Tensor[(3, 4, 3), float32], float64, Tensor[(18, 2), float32], Tensor[(280), int64], Tensor[(36), float32]) */;
    %827 = %826.5;
    %828 = @func_3800() /* ty=float64 */;
    (%827, %828)
  };
  %829() /* ty=(Tensor[(36), float32], float64) */
}

def @func_6893() -> (Tensor[(280), int64],) {
  %832 = fn () -> (Tensor[(280), int64],) {
    %830 = @func_4080() /* ty=(Tensor[(280), int64],) */;
    %831 = %830.0;
    (%831,)
  };
  %832() /* ty=(Tensor[(280), int64],) */
}

def @func_13722() -> (Tensor[(9, 8, 16), float32], Tensor[(8, 13, 12), bool]) {
  %833 = @func_9677() /* ty=(float64, float64) */;
  %834 = %833.1;
  %835 = @func_12268() /* ty=Tensor[(9, 8, 16), float32] */;
  %836 = cast(%834, dtype="float32") /* ty=float32 */;
  %837 = cast(%835, dtype="float32") /* ty=Tensor[(9, 8, 16), float32] */;
  %838 = multiply(%836, %837) /* ty=Tensor[(9, 8, 16), float32] */;
  %839 = @func_6222() /* ty=Tensor[(8, 13, 12), bool] */;
  (%838, %839)
}

def @func_6710(%var_6708: Tensor[(8, 10, 6), float64]) -> Tensor[(8, 10, 6), bool] {
  @func_6707(%var_6708) /* ty=Tensor[(8, 10, 6), bool] */
}

def @func_4859() -> (float64, float64, Tensor[(10, 7, 16), float64], Tensor[(1120), float64]) {
  %840 = cast(meta[relay.Constant][33] /* ty=Tensor[(1120), float64] */, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %841 = cast(meta[relay.Constant][33] /* ty=Tensor[(1120), float64] */, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %842 = reshape(%840, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), float64] */;
  %843 = reshape(%841, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), float64] */;
  %844 = @func_2294() /* ty=float64 */;
  %845 = @func_3187() /* ty=float64 */;
  %846 = @func_4574(%842, %843) /* ty=Tensor[(10, 7, 16), float64] */;
  (%844, %845, %846, meta[relay.Constant][33] /* ty=Tensor[(1120), float64] */)
}

def @func_8818() -> (float64, float64, float64) {
  @func_8816() /* ty=(float64, float64, float64) */
}

def @func_2296() -> float64 {
  @func_2294() /* ty=float64 */
}

def @func_3144() -> (float64, float64) {
  @func_3142() /* ty=(float64, float64) */
}

def @func_10916() -> (Tensor[(280), int64], Tensor[(?, 36), float64], Tensor[(36), float32], float64) {
  @func_10914() /* ty=(Tensor[(280), int64], Tensor[(?, 36), float64], Tensor[(36), float32], float64) */
}

def @func_1178(%var_1117: float64, %var_1123: Tensor[(36), float32], %var_1127: Tensor[(280), int64]) -> (Tensor[(8, 6, 14), float64], Tensor[(3, 4, 3), float32], Tensor[(36), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64], Tensor[(14, 4, 5), int64]) {
  %847 = cast(%var_1117, dtype="float64") /* ty=float64 */;
  %848 = cast(meta[relay.Constant][34] /* ty=Tensor[(8, 6, 14), float64] */, dtype="float64") /* ty=Tensor[(8, 6, 14), float64] */;
  %849 = cast(%var_1123, dtype="float32") /* ty=Tensor[(36), float32] */;
  %850 = reshape(%849, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float32] */;
  %851 = cast(%var_1127, dtype="int64") /* ty=Tensor[(280), int64] */;
  %852 = cast(%var_1127, dtype="int64") /* ty=Tensor[(280), int64] */;
  %853 = reshape(%851, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), int64] */;
  %854 = reshape(%852, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), int64] */;
  %855 = @func_982(%853, %854) /* ty=(Tensor[(14, 4, 5), int64], Tensor[(14, 4, 5), float64]) */;
  %856 = %855.1;
  %857 = cast(%856, dtype="int64") /* ty=Tensor[(14, 4, 5), int64] */;
  %858 = cast(%856, dtype="int64") /* ty=Tensor[(14, 4, 5), int64] */;
  %859 = reshape(%857, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), int64] */;
  %860 = reshape(%858, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), int64] */;
  %861 = @func_982(%859, %860) /* ty=(Tensor[(14, 4, 5), int64], Tensor[(14, 4, 5), float64]) */;
  %862 = floor_divide(%847, %848) /* ty=Tensor[(8, 6, 14), float64] */;
  %863 = @func_111(%850) /* ty=Tensor[(3, 4, 3), float32] */;
  %864 = %861.0;
  (%862, %863, %var_1123, %856, %var_1127, %864)
}

def @func_8605(%var_8604: Tensor[(143), float64]) -> (float64, Tensor[(9, 8, 16), float64], float64, Tensor[(36), float32], Tensor[(143), float64], float64) {
  %879 = fn (%var_8583: Tensor[(143), float64]) -> (float64, Tensor[(9, 8, 16), float64], float64, Tensor[(36), float32], Tensor[(143), float64], float64) {
    %865 = @func_7816() /* ty=(float64, float64) */;
    %866 = @func_3752() /* ty=(Tensor[(9, 8, 16), float32],) */;
    %867 = %866.0;
    %868 = cast(%867, dtype="float64") /* ty=Tensor[(9, 8, 16), float64] */;
    %869 = @func_4618() /* ty=(float64, float64) */;
    %870 = cast(%var_8583, dtype="float64") /* ty=Tensor[(143), float64] */;
    %871 = reshape(%870, newshape=[1, 13, 11]) /* ty=Tensor[(1, 13, 11), float64] */;
    %872 = @func_3845(%871) /* ty=(Tensor[(?, 13, 11), bool], Tensor[(3, 4, 3), float32], Tensor[(36), float32]) */;
    %873 = @func_4699() /* ty=(float64,) */;
    %874 = %865.0;
    %875 = cos(%868) /* ty=Tensor[(9, 8, 16), float64] */;
    %876 = %869.0;
    %877 = %872.2;
    %878 = %873.0;
    (%874, %875, %876, %877, %var_8583, %878)
  };
  %879(%var_8604) /* ty=(float64, Tensor[(9, 8, 16), float64], float64, Tensor[(36), float32], Tensor[(143), float64], float64) */
}

def @func_3801() -> float64 {
  %880 = fn () -> float64 {
    @func_3310() /* ty=float64 */
  };
  %880() /* ty=float64 */
}

def @func_8486() -> float64 {
  @func_8420() /* ty=float64 */
}

def @func_6445() -> (float64, Tensor[(280), int64], float64) {
  %886 = fn () -> (float64, Tensor[(280), int64], float64) {
    %881 = @func_3045() /* ty=(float64, float64, float64) */;
    %882 = @func_4452() /* ty=(float64,) */;
    %883 = %881.2;
    %884 = @func_3267() /* ty=Tensor[(280), int64] */;
    %885 = %882.0;
    (%883, %884, %885)
  };
  %886() /* ty=(float64, Tensor[(280), int64], float64) */
}

def @func_7384() -> (float64, Tensor[(36, 1), float32], Tensor[(36), float32]) {
  %893 = fn () -> (float64, Tensor[(36, 1), float32], Tensor[(36), float32]) {
    %887 = @func_4843() /* ty=(float64, float64, Tensor[(36), float32], Tensor[(280), int64], Tensor[(280), int64], float64) */;
    %888 = cast(meta[relay.Constant][35] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
    %889 = reshape(%888, newshape=[36, 1]) /* ty=Tensor[(36, 1), float32] */;
    %890 = @func_4981(%889) /* ty=(Tensor[(280), int64], Tensor[(3, 4, 3), float32], Tensor[(36, 1), float32]) */;
    %891 = %887.0;
    %892 = %890.2;
    (%891, %892, meta[relay.Constant][35] /* ty=Tensor[(36), float32] */)
  };
  %893() /* ty=(float64, Tensor[(36, 1), float32], Tensor[(36), float32]) */
}

def @func_8872() -> (Tensor[(280), int64], float64, float64) {
  @func_8870() /* ty=(Tensor[(280), int64], float64, float64) */
}

def @func_4960(%var_4958: Tensor[(45), float64], %var_4959: Tensor[(143, 1), float64]) -> (Tensor[(280), int64], Tensor[(3, 4, 3), float32], Tensor[(?, 13, 11), bool], Tensor[(143, 1), float64], Tensor[(?, 9, 5), bool], float64, float64, Tensor[(3, 4, 3), float32]) {
  %913 = fn (%var_4921: Tensor[(45), float64], %var_4929: Tensor[(143, 1), float64]) -> (Tensor[(280), int64], Tensor[(3, 4, 3), float32], Tensor[(?, 13, 11), bool], Tensor[(143, 1), float64], Tensor[(?, 9, 5), bool], float64, float64, Tensor[(3, 4, 3), float32]) {
    %894 = cast(%var_4929, dtype="float64") /* ty=Tensor[(143, 1), float64] */;
    %895 = reshape(%894, newshape=[1, 13, 11]) /* ty=Tensor[(1, 13, 11), float64] */;
    %896 = @func_3845(%895) /* ty=(Tensor[(?, 13, 11), bool], Tensor[(3, 4, 3), float32], Tensor[(36), float32]) */;
    %897 = cast(%var_4921, dtype="float64") /* ty=Tensor[(45), float64] */;
    %898 = reshape(%897, newshape=[1, 9, 5]) /* ty=Tensor[(1, 9, 5), float64] */;
    %899 = @func_4278(%898) /* ty=(Tensor[(1, 9, 5), float64], Tensor[(280), int64]) */;
    %900 = %899.0;
    %901 = cast(%var_4921, dtype="bool") /* ty=Tensor[(45), bool] */;
    %902 = shape_of(%900, dtype="int32") /* ty=Tensor[(3), int32] */;
    %903 = cast(%900, dtype="bool") /* ty=Tensor[(1, 9, 5), bool] */;
    %904 = dyn.reshape(%901, %902, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %905 = @func_3263() /* ty=(Tensor[(280), int64], float64, Tensor[(36), float32], Tensor[(3, 4, 3), float32], float64, float64) */;
    %906 = @func_4019() /* ty=Tensor[(280), int64] */;
    %907 = @func_4409() /* ty=Tensor[(3, 4, 3), float32] */;
    %908 = %896.0;
    %909 = greater(%903, %904) /* ty=Tensor[(?, 9, 5), bool] */;
    %910 = @func_3800() /* ty=float64 */;
    %911 = @func_3310() /* ty=float64 */;
    %912 = %905.3;
    (%906, %907, %908, %var_4929, %909, %910, %911, %912)
  };
  %913(%var_4958, %var_4959) /* ty=(Tensor[(280), int64], Tensor[(3, 4, 3), float32], Tensor[(?, 13, 11), bool], Tensor[(143, 1), float64], Tensor[(?, 9, 5), bool], float64, float64, Tensor[(3, 4, 3), float32]) */
}

def @func_6865() -> (float64,) {
  %914 = @func_4618() /* ty=(float64, float64) */;
  %915 = %914.1;
  (%915,)
}

def @func_8723(%var_8721: Tensor[(143), float64]) -> (Tensor[(280), int64], Tensor[(14, 4, 5), float64], Tensor[(36), float32], Tensor[(143), float64]) {
  @func_8720(%var_8721) /* ty=(Tensor[(280), int64], Tensor[(14, 4, 5), float64], Tensor[(36), float32], Tensor[(143), float64]) */
}

def @func_15617() -> (float64, float64) {
  %918 = fn () -> (float64, float64) {
    %916 = @func_9533() /* ty=float64 */;
    %917 = @func_2475() /* ty=float64 */;
    (%916, %917)
  };
  %918() /* ty=(float64, float64) */
}

def @func_3189() -> float64 {
  @func_3187() /* ty=float64 */
}

def @func_8533() -> (float64, Tensor[(280), int64]) {
  %919 = @func_5538() /* ty=(float64,) */;
  %920 = %919.0;
  %921 = @func_5240() /* ty=Tensor[(280), int64] */;
  (%920, %921)
}

def @func_3106() -> (Tensor[(36), float32], float64) {
  %922 = @func_2936() /* ty=(float64, Tensor[(3, 4, 3), float32], Tensor[(36), float32]) */;
  %923 = @func_2909() /* ty=(float64, float64) */;
  %924 = %922.2;
  %925 = %923.1;
  (%924, %925)
}

def @func_8870() -> (Tensor[(280), int64], float64, float64) {
  %926 = @func_7087() /* ty=(float64,) */;
  %927 = @func_3267() /* ty=Tensor[(280), int64] */;
  %928 = @func_2198() /* ty=float64 */;
  %929 = %926.0;
  (%927, %928, %929)
}

def @func_5712() -> (float64,) {
  %930 = @func_3310() /* ty=float64 */;
  (%930,)
}

def @func_13568() -> (float64,) {
  @func_13566() /* ty=(float64,) */
}

def @func_14277(%var_14235: Tensor[(2, 4, 14), float32], %var_14275: Tensor[(630), int32]) -> (Tensor[(2, 4, 14), float32], Tensor[(36), float32], Tensor[(350), uint32], float64, float64, Tensor[(6, 7, 15), int32], Tensor[(630), int32]) {
  %931 = cast(%var_14235, dtype="float32") /* ty=Tensor[(2, 4, 14), float32] */;
  %932 = @func_11235() /* ty=(Tensor[(36), float32],) */;
  %933 = @func_11643() /* ty=(float64, Tensor[(8, 13, 12), int8], Tensor[(5, 10, 7), uint32], Tensor[(350), uint32]) */;
  %934 = @func_2353() /* ty=(float64,) */;
  %935 = cast(%var_14275, dtype="int32") /* ty=Tensor[(630), int32] */;
  %936 = reshape(%935, newshape=[6, 7, 15]) /* ty=Tensor[(6, 7, 15), int32] */;
  %937 = @func_7676(%936) /* ty=(Tensor[(6, 7, 15), int32], Tensor[(280), int64], Tensor[(36), float32], Tensor[(6, 7, 15), float64], Tensor[(3, 4, 3), float32]) */;
  %938 = tan(%931) /* ty=Tensor[(2, 4, 14), float32] */;
  %939 = %932.0;
  %940 = %933.3;
  %941 = @func_8080() /* ty=float64 */;
  %942 = %934.0;
  %943 = %937.0;
  (%938, %939, %940, %941, %942, %943, %var_14275)
}

def @func_10300() -> float64 {
  @func_10298() /* ty=float64 */
}

def @func_10700() -> float64 {
  @func_10698() /* ty=float64 */
}

def @func_16032() -> Tensor[(3, 4, 3), float32] {
  @func_9843() /* ty=Tensor[(3, 4, 3), float32] */
}

def @func_6070() -> (Tensor[(11, 13, 7), float32],) {
  @func_6068() /* ty=(Tensor[(11, 13, 7), float32],) */
}

def @func_7572() -> (Tensor[(3, 4, 3), float32], float64, float64, Tensor[(280), int64]) {
  @func_7570() /* ty=(Tensor[(3, 4, 3), float32], float64, float64, Tensor[(280), int64]) */
}

def @func_4843() -> (float64, float64, Tensor[(36), float32], Tensor[(280), int64], Tensor[(280), int64], float64) {
  %944 = cast(meta[relay.Constant][36] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %945 = reshape(%944, newshape=[1, 36]) /* ty=Tensor[(1, 36), float32] */;
  %946 = @func_3378(%945) /* ty=(float64, Tensor[(16, 15, 8), uint64], Tensor[(?, 36), float64], Tensor[(16, 15, 8), uint64]) */;
  %947 = @func_4080() /* ty=(Tensor[(280), int64],) */;
  %948 = @func_4080() /* ty=(Tensor[(280), int64],) */;
  %949 = @func_2936() /* ty=(float64, Tensor[(3, 4, 3), float32], Tensor[(36), float32]) */;
  %950 = @func_2697() /* ty=float64 */;
  %951 = %946.0;
  %952 = %947.0;
  %953 = %948.0;
  %954 = %949.0;
  (%950, %951, meta[relay.Constant][36] /* ty=Tensor[(36), float32] */, %952, %953, %954)
}

def @func_982(%var_959: Tensor[(14, 4, 5), int64], %var_960: Tensor[(14, 4, 5), int64]) -> (Tensor[(14, 4, 5), int64], Tensor[(14, 4, 5), float64]) {
  %955 = cast(%var_960, dtype="int64") /* ty=Tensor[(14, 4, 5), int64] */;
  %956 = shape_of(%var_959, dtype="int32") /* ty=Tensor[(3), int32] */;
  %957 = cast(%var_959, dtype="int64") /* ty=Tensor[(14, 4, 5), int64] */;
  %958 = dyn.reshape(%955, %956, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %959 = cast(%var_959, dtype="float64") /* ty=Tensor[(14, 4, 5), float64] */;
  %960 = cos(%959) /* ty=Tensor[(14, 4, 5), float64] */;
  %961 = cast(%960, dtype="float64") /* ty=Tensor[(14, 4, 5), float64] */;
  %962 = logical_xor(%957, %958) /* ty=Tensor[(14, 4, 5), int64] */;
  %963 = sin(%961) /* ty=Tensor[(14, 4, 5), float64] */;
  (%962, %963)
}

def @func_2909() -> (float64, float64) {
  %964 = @func_2697() /* ty=float64 */;
  %965 = @func_2198() /* ty=float64 */;
  (%964, %965)
}

def @func_4620() -> (float64, float64) {
  @func_4618() /* ty=(float64, float64) */
}

def @func_8769() -> (float64,) {
  %966 = @func_4216() /* ty=(Tensor[(280), int64], Tensor[(280), int64], float64, float64) */;
  %967 = %966.2;
  (%967,)
}

def @func_14111(%var_14108: Tensor[(10, 7, 6), bool], %var_14109: Tensor[(10, 7, 6), bool], %var_14110: Tensor[(33, 3), float64]) -> (Tensor[(10, 7, 6), bool], Tensor[(280), int64], float64, Tensor[(33, 3), float64], Tensor[(36, 1), float32], Tensor[(9, 4), float32], Tensor[(1, 9, 11), uint8]) {
  %991 = fn (%var_14053: Tensor[(10, 7, 6), bool], %var_14054: Tensor[(10, 7, 6), bool], %var_14077: Tensor[(33, 3), float64]) -> (Tensor[(10, 7, 6), bool], Tensor[(280), int64], float64, Tensor[(33, 3), float64], Tensor[(36, 1), float32], Tensor[(9, 4), float32], Tensor[(1, 9, 11), uint8]) {
    %968 = cast(%var_14054, dtype="bool") /* ty=Tensor[(10, 7, 6), bool] */;
    %969 = shape_of(%var_14053, dtype="int32") /* ty=Tensor[(3), int32] */;
    %970 = cast(%var_14053, dtype="bool") /* ty=Tensor[(10, 7, 6), bool] */;
    %971 = dyn.reshape(%968, %969, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %972 = @func_8218() /* ty=(Tensor[(280), int64], Tensor[(11, 13, 7), float32]) */;
    %973 = cast(meta[relay.Constant][37] /* ty=Tensor[(9, 4), float32] */, dtype="float32") /* ty=Tensor[(9, 4), float32] */;
    %974 = reshape(%973, newshape=[36, 1]) /* ty=Tensor[(36, 1), float32] */;
    %975 = @func_4981(%974) /* ty=(Tensor[(280), int64], Tensor[(3, 4, 3), float32], Tensor[(36, 1), float32]) */;
    %976 = cast(meta[relay.Constant][37] /* ty=Tensor[(9, 4), float32] */, dtype="float32") /* ty=Tensor[(9, 4), float32] */;
    %977 = reshape(%976, newshape=[36, 1]) /* ty=Tensor[(36, 1), float32] */;
    %978 = @func_11074(%977) /* ty=(float64, float64, Tensor[(36, 1), float32], Tensor[(154, 10), uint16]) */;
    %979 = %978.1;
    %980 = cast(%var_14077, dtype="float64") /* ty=Tensor[(33, 3), float64] */;
    %981 = reshape(%980, newshape=[1, 9, 11]) /* ty=Tensor[(1, 9, 11), float64] */;
    %982 = @func_5225(%981) /* ty=(Tensor[(1, 9, 11), int16],) */;
    %983 = %982.0;
    %984 = cast(%979, dtype="uint8") /* ty=uint8 */;
    %985 = cast(%983, dtype="uint8") /* ty=Tensor[(1, 9, 11), uint8] */;
    %986 = logical_or(%970, %971) /* ty=Tensor[(10, 7, 6), bool] */;
    %987 = %972.0;
    %988 = @func_8486() /* ty=float64 */;
    %989 = %975.2;
    %990 = add(%984, %985) /* ty=Tensor[(1, 9, 11), uint8] */;
    (%986, %987, %988, %var_14077, %989, meta[relay.Constant][37] /* ty=Tensor[(9, 4), float32] */, %990)
  };
  %991(%var_14108, %var_14109, %var_14110) /* ty=(Tensor[(10, 7, 6), bool], Tensor[(280), int64], float64, Tensor[(33, 3), float64], Tensor[(36, 1), float32], Tensor[(9, 4), float32], Tensor[(1, 9, 11), uint8]) */
}

def @func_13899() -> (float64,) {
  @func_13897() /* ty=(float64,) */
}

def @func_15449() -> (float64,) {
  @func_15447() /* ty=(float64,) */
}

def @func_14981(%var_14979: Tensor[(12, 5, 5), float64]) -> Tensor[(12, 5, 5), float64] {
  @func_14978(%var_14979) /* ty=Tensor[(12, 5, 5), float64] */
}

def @func_10525() -> float64 {
  @func_10523() /* ty=float64 */
}

def @func_3509() -> float64 {
  %992 = @func_3445() /* ty=(float64, float64, float64, float64, float64) */;
  %992.2
}

def @func_7782() -> Tensor[(14, 4, 5), float64] {
  %993 = @func_5796() /* ty=(float64, Tensor[(14, 4, 5), float64], Tensor[(5, 56), int64], Tensor[(18, 2), uint8]) */;
  %993.1
}

def @func_8613() -> (float64,) {
  %994 = @func_7236() /* ty=(float64, Tensor[(3, 4, 3), float32]) */;
  %995 = %994.0;
  (%995,)
}

def @func_10213(%var_10178: Tensor[(5, 4, 11), float64]) -> (Tensor[(8, 13, 12), bool], Tensor[(5, 4, 11), float32]) {
  %996 = @func_8303() /* ty=(Tensor[(8, 13, 12), bool],) */;
  %997 = cast(%var_10178, dtype="float64") /* ty=Tensor[(5, 4, 11), float64] */;
  %998 = acos(%997) /* ty=Tensor[(5, 4, 11), float64] */;
  %999 = cast(%998, dtype="float32") /* ty=Tensor[(5, 4, 11), float32] */;
  %1000 = %996.0;
  %1001 = sigmoid(%999) /* ty=Tensor[(5, 4, 11), float32] */;
  (%1000, %1001)
}

def @func_15303() -> (Tensor[(11, 13, 7), float32],) {
  %1002 = @func_11973() /* ty=(float64, Tensor[(11, 13, 7), float32]) */;
  %1003 = %1002.1;
  (%1003,)
}

def @func_6483() -> (float64, float64) {
  %1006 = fn () -> (float64, float64) {
    %1004 = @func_5180() /* ty=float64 */;
    %1005 = @func_4555() /* ty=float64 */;
    (%1004, %1005)
  };
  %1006() /* ty=(float64, float64) */
}

def @func_13604() -> (float64,) {
  %1009 = fn () -> (float64,) {
    %1007 = @func_12159() /* ty=(float64,) */;
    %1008 = %1007.0;
    (%1008,)
  };
  %1009() /* ty=(float64,) */
}

def @func_10135() -> (float64,) {
  %1012 = fn () -> (float64,) {
    %1010 = @func_9510() /* ty=(float64,) */;
    %1011 = %1010.0;
    (%1011,)
  };
  %1012() /* ty=(float64,) */
}

def @func_14848() -> (float64, Tensor[(280), int64], float64) {
  %1016 = fn () -> (float64, Tensor[(280), int64], float64) {
    %1013 = @func_12142() /* ty=float64 */;
    %1014 = @func_3267() /* ty=Tensor[(280), int64] */;
    %1015 = @func_2514() /* ty=float64 */;
    (%1013, %1014, %1015)
  };
  %1016() /* ty=(float64, Tensor[(280), int64], float64) */
}

def @main(%var_16513: Tensor[(3, 8, 14), float32], %var_16514: Tensor[(3, 8, 14), float32]) -> Tensor[(3, 8, 14), float32] {
  %1017 = cast(%var_16514, dtype="float32") /* ty=Tensor[(3, 8, 14), float32] */;
  %1018 = shape_of(%var_16513, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1019 = cast(%var_16513, dtype="float32") /* ty=Tensor[(3, 8, 14), float32] */;
  %1020 = dyn.reshape(%1017, %1018, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  multiply(%1019, %1020) /* ty=Tensor[(3, 8, 14), float32] */
}

def @func_8305() -> (Tensor[(8, 13, 12), bool],) {
  @func_8303() /* ty=(Tensor[(8, 13, 12), bool],) */
}

def @func_11662() -> (float64, Tensor[(280), int64]) {
  %1024 = fn () -> (float64, Tensor[(280), int64]) {
    %1021 = @func_8533() /* ty=(float64, Tensor[(280), int64]) */;
    %1022 = @func_4878() /* ty=float64 */;
    %1023 = %1021.1;
    (%1022, %1023)
  };
  %1024() /* ty=(float64, Tensor[(280), int64]) */
}

def @func_12142() -> float64 {
  %1025 = @func_7816() /* ty=(float64, float64) */;
  %1025.1
}

def @func_10341() -> float64 {
  %1026 = @func_3142() /* ty=(float64, float64) */;
  %1026.0
}

def @func_7816() -> (float64, float64) {
  %1027 = @func_2909() /* ty=(float64, float64) */;
  %1028 = @func_3509() /* ty=float64 */;
  %1029 = %1027.1;
  (%1028, %1029)
}

def @func_11209(%var_11207: Tensor[(2, 13, 6), float32]) -> Tensor[(2, 13, 6), float32] {
  @func_11206(%var_11207) /* ty=Tensor[(2, 13, 6), float32] */
}

def @func_7457() -> (float64,) {
  %1032 = fn () -> (float64,) {
    %1030 = @func_5538() /* ty=(float64,) */;
    %1031 = %1030.0;
    (%1031,)
  };
  %1032() /* ty=(float64,) */
}

def @func_3989() -> (Tensor[(36), float32], float64, Tensor[(3, 4, 3), float32]) {
  %1033 = @func_3106() /* ty=(Tensor[(36), float32], float64) */;
  %1034 = @func_1837() /* ty=(Tensor[(13, 11, 13), bool], Tensor[(3, 4, 3), float32], float64, Tensor[(18, 2), float32], Tensor[(280), int64], Tensor[(36), float32]) */;
  %1035 = %1033.0;
  %1036 = @func_3800() /* ty=float64 */;
  %1037 = %1034.1;
  (%1035, %1036, %1037)
}

def @func_6778() -> (Tensor[(8, 13, 12), bool],) {
  %1038 = @func_5345() /* ty=(Tensor[(8, 13, 12), bool], Tensor[(8, 13, 12), bool]) */;
  %1039 = %1038.1;
  (%1039,)
}

def @func_12945() -> (float64,) {
  %1040 = @func_3445() /* ty=(float64, float64, float64, float64, float64) */;
  %1041 = %1040.4;
  (%1041,)
}

def @func_8488() -> float64 {
  @func_8486() /* ty=float64 */
}

def @func_15545() -> (float64,) {
  @func_15543() /* ty=(float64,) */
}

def @func_10435(%var_10433: Tensor[(36), float32]) -> (float64, float64, Tensor[(280), int64], Tensor[(143, 1), float64], Tensor[(36), float32], Tensor[(36), float32]) {
  @func_10432(%var_10433) /* ty=(float64, float64, Tensor[(280), int64], Tensor[(143, 1), float64], Tensor[(36), float32], Tensor[(36), float32]) */
}

def @func_10953() -> (Tensor[(8, 13, 12), bool], float64) {
  %1046 = fn () -> (Tensor[(8, 13, 12), bool], float64) {
    %1042 = @func_8303() /* ty=(Tensor[(8, 13, 12), bool],) */;
    %1043 = @func_10134() /* ty=(float64,) */;
    %1044 = %1042.0;
    %1045 = %1043.0;
    (%1044, %1045)
  };
  %1046() /* ty=(Tensor[(8, 13, 12), bool], float64) */
}

def @func_4081() -> (Tensor[(280), int64],) {
  %1048 = fn () -> (Tensor[(280), int64],) {
    %1047 = @func_4019() /* ty=Tensor[(280), int64] */;
    (%1047,)
  };
  %1048() /* ty=(Tensor[(280), int64],) */
}

def @func_11076(%var_11075: Tensor[(36, 1), float32]) -> (float64, float64, Tensor[(36, 1), float32], Tensor[(154, 10), uint16]) {
  %1057 = fn (%var_11065: Tensor[(36, 1), float32]) -> (float64, float64, Tensor[(36, 1), float32], Tensor[(154, 10), uint16]) {
    %1049 = @func_6034() /* ty=(float64, float64) */;
    %1050 = cast(%var_11065, dtype="float32") /* ty=Tensor[(36, 1), float32] */;
    %1051 = cast(meta[relay.Constant][38] /* ty=Tensor[(154, 10), uint16] */, dtype="uint16") /* ty=Tensor[(154, 10), uint16] */;
    %1052 = reshape(%1050, newshape=[36]) /* ty=Tensor[(36), float32] */;
    %1053 = reshape(%1051, newshape=[1540]) /* ty=Tensor[(1540), uint16] */;
    %1054 = @func_6366(%1052, %1053) /* ty=(float64, Tensor[(16, 15, 8), uint64], Tensor[(36), float32], Tensor[(14, 10, 11), uint16], Tensor[(1540), uint16]) */;
    %1055 = %1049.0;
    %1056 = %1054.0;
    (%1055, %1056, %var_11065, meta[relay.Constant][38] /* ty=Tensor[(154, 10), uint16] */)
  };
  %1057(%var_11075) /* ty=(float64, float64, Tensor[(36, 1), float32], Tensor[(154, 10), uint16]) */
}

def @func_3921() -> float64 {
  @func_3919() /* ty=float64 */
}

def @func_8220() -> (Tensor[(280), int64], Tensor[(11, 13, 7), float32]) {
  @func_8218() /* ty=(Tensor[(280), int64], Tensor[(11, 13, 7), float32]) */
}

def @func_9084(%var_9082: Tensor[(16, 15, 4), uint32], %var_9083: Tensor[(16, 15, 4), uint32]) -> Tensor[(16, 15, 4), uint32] {
  @func_9080(%var_9082, %var_9083) /* ty=Tensor[(16, 15, 4), uint32] */
}

def @func_14657() -> (Tensor[(280), int64],) {
  @func_14655() /* ty=(Tensor[(280), int64],) */
}

def @func_15114() -> (Tensor[(8, 13, 12), bool], Tensor[(280), int64], float64) {
  %1062 = fn () -> (Tensor[(8, 13, 12), bool], Tensor[(280), int64], float64) {
    %1058 = @func_13722() /* ty=(Tensor[(9, 8, 16), float32], Tensor[(8, 13, 12), bool]) */;
    %1059 = %1058.1;
    %1060 = @func_4019() /* ty=Tensor[(280), int64] */;
    %1061 = @func_3800() /* ty=float64 */;
    (%1059, %1060, %1061)
  };
  %1062() /* ty=(Tensor[(8, 13, 12), bool], Tensor[(280), int64], float64) */
}

def @func_2629(%var_2627: Tensor[(14, 10, 11), uint16], %var_2628: Tensor[(14, 10, 11), uint16]) -> (Tensor[(14, 10, 11), uint16],) {
  %1068 = fn (%var_2619: Tensor[(14, 10, 11), uint16], %var_2620: Tensor[(14, 10, 11), uint16]) -> (Tensor[(14, 10, 11), uint16],) {
    %1063 = cast(%var_2620, dtype="uint16") /* ty=Tensor[(14, 10, 11), uint16] */;
    %1064 = shape_of(%var_2619, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1065 = cast(%var_2619, dtype="uint16") /* ty=Tensor[(14, 10, 11), uint16] */;
    %1066 = dyn.reshape(%1063, %1064, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %1067 = maximum(%1065, %1066) /* ty=Tensor[(14, 10, 11), uint16] */;
    (%1067,)
  };
  %1068(%var_2627, %var_2628) /* ty=(Tensor[(14, 10, 11), uint16],) */
}

def @func_15911(%var_15910: Tensor[(5, 15, 10), float64]) -> Tensor[(5, 15, 10), float64] {
  %1070 = fn (%var_15905: Tensor[(5, 15, 10), float64]) -> Tensor[(5, 15, 10), float64] {
    %1069 = cast(%var_15905, dtype="float64") /* ty=Tensor[(5, 15, 10), float64] */;
    exp(%1069) /* ty=Tensor[(5, 15, 10), float64] */
  };
  %1070(%var_15910) /* ty=Tensor[(5, 15, 10), float64] */
}

def @func_12144() -> float64 {
  @func_12142() /* ty=float64 */
}

def @func_10216(%var_10214: Tensor[(5, 4, 11), float64]) -> (Tensor[(8, 13, 12), bool], Tensor[(5, 4, 11), float32]) {
  @func_10213(%var_10214) /* ty=(Tensor[(8, 13, 12), bool], Tensor[(5, 4, 11), float32]) */
}

def @func_5797() -> (float64, Tensor[(14, 4, 5), float64], Tensor[(5, 56), int64], Tensor[(18, 2), uint8]) {
  %1087 = fn () -> (float64, Tensor[(14, 4, 5), float64], Tensor[(5, 56), int64], Tensor[(18, 2), uint8]) {
    %1071 = cast(meta[relay.Constant][39] /* ty=Tensor[(5, 56), int64] */, dtype="int64") /* ty=Tensor[(5, 56), int64] */;
    %1072 = cast(meta[relay.Constant][39] /* ty=Tensor[(5, 56), int64] */, dtype="int64") /* ty=Tensor[(5, 56), int64] */;
    %1073 = reshape(%1071, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), int64] */;
    %1074 = reshape(%1072, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), int64] */;
    %1075 = @func_982(%1073, %1074) /* ty=(Tensor[(14, 4, 5), int64], Tensor[(14, 4, 5), float64]) */;
    %1076 = cast(meta[relay.Constant][40] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
    %1077 = reshape(%1076, newshape=[18, 2]) /* ty=Tensor[(18, 2), float32] */;
    %1078 = @func_1942(%1077) /* ty=(Tensor[(18, 2), float32], Tensor[(16, 15, 8), uint64]) */;
    %1079 = %1078.0;
    %1080 = cast(meta[relay.Constant][40] /* ty=Tensor[(36), float32] */, dtype="uint8") /* ty=Tensor[(36), uint8] */;
    %1081 = shape_of(%1079, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1082 = cast(%1079, dtype="uint8") /* ty=Tensor[(18, 2), uint8] */;
    %1083 = dyn.reshape(%1080, %1081, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %1084 = @func_2697() /* ty=float64 */;
    %1085 = %1075.1;
    %1086 = subtract(%1082, %1083) /* ty=Tensor[(18, 2), uint8] */;
    (%1084, %1085, meta[relay.Constant][39] /* ty=Tensor[(5, 56), int64] */, %1086)
  };
  %1087() /* ty=(float64, Tensor[(14, 4, 5), float64], Tensor[(5, 56), int64], Tensor[(18, 2), uint8]) */
}

def @func_14766() -> float64 {
  %1088 = @func_10577() /* ty=(float64, float64) */;
  %1088.1
}

def @func_4396() -> (Tensor[(280), int64],) {
  @func_4394() /* ty=(Tensor[(280), int64],) */
}

def @func_10500() -> float64 {
  @func_10498() /* ty=float64 */
}

def @func_3550() -> float64 {
  %1090 = fn () -> float64 {
    %1089 = @func_2851() /* ty=(float64,) */;
    %1089.0
  };
  %1090() /* ty=float64 */
}

def @func_8816() -> (float64, float64, float64) {
  %1091 = @func_6444() /* ty=(float64, Tensor[(280), int64], float64) */;
  %1092 = @func_5180() /* ty=float64 */;
  %1093 = %1091.2;
  %1094 = @func_3800() /* ty=float64 */;
  (%1092, %1093, %1094)
}

def @func_2936() -> (float64, Tensor[(3, 4, 3), float32], Tensor[(36), float32]) {
  %1095 = cast(meta[relay.Constant][41] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %1096 = reshape(%1095, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float32] */;
  %1097 = @func_2198() /* ty=float64 */;
  %1098 = @func_111(%1096) /* ty=Tensor[(3, 4, 3), float32] */;
  (%1097, %1098, meta[relay.Constant][41] /* ty=Tensor[(36), float32] */)
}

def @func_10847() -> (float64, Tensor[(10, 7, 16), float64], Tensor[(1120), float64]) {
  %1106 = fn () -> (float64, Tensor[(10, 7, 16), float64], Tensor[(1120), float64]) {
    %1099 = @func_3142() /* ty=(float64, float64) */;
    %1100 = cast(meta[relay.Constant][42] /* ty=Tensor[(1120), float64] */, dtype="float64") /* ty=Tensor[(1120), float64] */;
    %1101 = cast(meta[relay.Constant][42] /* ty=Tensor[(1120), float64] */, dtype="float64") /* ty=Tensor[(1120), float64] */;
    %1102 = reshape(%1100, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), float64] */;
    %1103 = reshape(%1101, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), float64] */;
    %1104 = %1099.0;
    %1105 = @func_4574(%1102, %1103) /* ty=Tensor[(10, 7, 16), float64] */;
    (%1104, %1105, meta[relay.Constant][42] /* ty=Tensor[(1120), float64] */)
  };
  %1106() /* ty=(float64, Tensor[(10, 7, 16), float64], Tensor[(1120), float64]) */
}

def @func_15038() -> (Tensor[(280), int64], float64) {
  @func_15036() /* ty=(Tensor[(280), int64], float64) */
}

def @func_14413() -> (float64,) {
  @func_14411() /* ty=(float64,) */
}

def @func_4278(%var_4270: Tensor[(1, 9, 5), float64]) -> (Tensor[(1, 9, 5), float64], Tensor[(280), int64]) {
  %1107 = cast(%var_4270, dtype="float64") /* ty=Tensor[(1, 9, 5), float64] */;
  %1108 = @func_4080() /* ty=(Tensor[(280), int64],) */;
  %1109 = erf(%1107) /* ty=Tensor[(1, 9, 5), float64] */;
  %1110 = %1108.0;
  (%1109, %1110)
}

def @func_13143() -> Tensor[(280), int64] {
  %1111 = @func_9016() /* ty=(Tensor[(280), int64],) */;
  %1111.0
}

def @func_1942(%var_1929: Tensor[(18, 2), float32]) -> (Tensor[(18, 2), float32], Tensor[(16, 15, 8), uint64]) {
  %1112 = @func_1837() /* ty=(Tensor[(13, 11, 13), bool], Tensor[(3, 4, 3), float32], float64, Tensor[(18, 2), float32], Tensor[(280), int64], Tensor[(36), float32]) */;
  %1113 = %1112.3;
  %1114 = cast(%var_1929, dtype="float32") /* ty=Tensor[(18, 2), float32] */;
  %1115 = shape_of(%1113, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1116 = cast(%1113, dtype="float32") /* ty=Tensor[(18, 2), float32] */;
  %1117 = dyn.reshape(%1114, %1115, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %1118 = cast(meta[relay.Constant][43] /* ty=Tensor[(16, 15, 8), float64] */, dtype="float64") /* ty=Tensor[(16, 15, 8), float64] */;
  %1119 = sin(%1118) /* ty=Tensor[(16, 15, 8), float64] */;
  %1120 = cast(%1119, dtype="float32") /* ty=Tensor[(16, 15, 8), float32] */;
  %1121 = atanh(%1120) /* ty=Tensor[(16, 15, 8), float32] */;
  %1122 = cast(%1119, dtype="float32") /* ty=Tensor[(16, 15, 8), float32] */;
  %1123 = shape_of(%1121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1124 = cast(%1121, dtype="float32") /* ty=Tensor[(16, 15, 8), float32] */;
  %1125 = dyn.reshape(%1122, %1123, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1126 = power(%1124, %1125) /* ty=Tensor[(16, 15, 8), float32] */;
  %1127 = cast(%1126, dtype="uint64") /* ty=Tensor[(16, 15, 8), uint64] */;
  %1128 = shape_of(%1121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1129 = cast(%1121, dtype="uint64") /* ty=Tensor[(16, 15, 8), uint64] */;
  %1130 = dyn.reshape(%1127, %1128, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %1131 = floor_divide(%1116, %1117) /* ty=Tensor[(18, 2), float32] */;
  %1132 = logical_xor(%1129, %1130) /* ty=Tensor[(16, 15, 8), uint64] */;
  (%1131, %1132)
}

def @func_3378(%var_3351: Tensor[(1, 36), float32]) -> (float64, Tensor[(16, 15, 8), uint64], Tensor[(?, 36), float64], Tensor[(16, 15, 8), uint64]) {
  %1133 = @func_2968() /* ty=(float64, float64) */;
  %1134 = cast(%var_3351, dtype="float32") /* ty=Tensor[(1, 36), float32] */;
  %1135 = reshape(%1134, newshape=[18, 2]) /* ty=Tensor[(18, 2), float32] */;
  %1136 = @func_1942(%1135) /* ty=(Tensor[(18, 2), float32], Tensor[(16, 15, 8), uint64]) */;
  %1137 = cast(%var_3351, dtype="float64") /* ty=Tensor[(1, 36), float64] */;
  %1138 = atanh(%1137) /* ty=Tensor[(1, 36), float64] */;
  %1139 = cast(%var_3351, dtype="float64") /* ty=Tensor[(1, 36), float64] */;
  %1140 = shape_of(%1138, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1141 = cast(%1138, dtype="float64") /* ty=Tensor[(1, 36), float64] */;
  %1142 = dyn.reshape(%1139, %1140, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %1143 = cast(%1138, dtype="float32") /* ty=Tensor[(1, 36), float32] */;
  %1144 = reshape(%1143, newshape=[18, 2]) /* ty=Tensor[(18, 2), float32] */;
  %1145 = @func_1942(%1144) /* ty=(Tensor[(18, 2), float32], Tensor[(16, 15, 8), uint64]) */;
  %1146 = %1133.1;
  %1147 = %1136.1;
  %1148 = divide(%1141, %1142) /* ty=Tensor[(?, 36), float64] */;
  %1149 = %1145.1;
  (%1146, %1147, %1148, %1149)
}

def @func_1838() -> (Tensor[(13, 11, 13), bool], Tensor[(3, 4, 3), float32], float64, Tensor[(18, 2), float32], Tensor[(280), int64], Tensor[(36), float32]) {
  %1171 = fn () -> (Tensor[(13, 11, 13), bool], Tensor[(3, 4, 3), float32], float64, Tensor[(18, 2), float32], Tensor[(280), int64], Tensor[(36), float32]) {
    %1150 = cast(meta[relay.Constant][45] /* ty=Tensor[(13, 11, 13), uint16] */, dtype="bool") /* ty=Tensor[(13, 11, 13), bool] */;
    %1151 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(13, 11, 13), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1152 = cast(meta[relay.Constant][44] /* ty=Tensor[(13, 11, 13), uint16] */, dtype="bool") /* ty=Tensor[(13, 11, 13), bool] */;
    %1153 = dyn.reshape(%1150, %1151, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1154 = cast(1.56888f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %1155 = cast(meta[relay.Constant][46] /* ty=Tensor[(18, 2), float32] */, dtype="float32") /* ty=Tensor[(18, 2), float32] */;
    %1156 = cast(meta[relay.Constant][47] /* ty=Tensor[(280), int64] */, dtype="int64") /* ty=Tensor[(280), int64] */;
    %1157 = reshape(%1154, newshape=[]) /* ty=float64 */;
    %1158 = reshape(%1155, newshape=[36]) /* ty=Tensor[(36), float32] */;
    %1159 = reshape(%1156, newshape=[280]) /* ty=Tensor[(280), int64] */;
    %1160 = @func_1178(%1157, %1158, %1159) /* ty=(Tensor[(8, 6, 14), float64], Tensor[(3, 4, 3), float32], Tensor[(36), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64], Tensor[(14, 4, 5), int64]) */;
    %1161 = cast(1.56888f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %1162 = %1160.1;
    %1163 = cast(%1162, dtype="float32") /* ty=Tensor[(3, 4, 3), float32] */;
    %1164 = cast(meta[relay.Constant][47] /* ty=Tensor[(280), int64] */, dtype="int64") /* ty=Tensor[(280), int64] */;
    %1165 = reshape(%1161, newshape=[]) /* ty=float64 */;
    %1166 = reshape(%1163, newshape=[36]) /* ty=Tensor[(36), float32] */;
    %1167 = reshape(%1164, newshape=[280]) /* ty=Tensor[(280), int64] */;
    %1168 = @func_1178(%1165, %1166, %1167) /* ty=(Tensor[(8, 6, 14), float64], Tensor[(3, 4, 3), float32], Tensor[(36), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64], Tensor[(14, 4, 5), int64]) */;
    %1169 = greater(%1152, %1153) /* ty=Tensor[(13, 11, 13), bool] */;
    %1170 = %1168.2;
    (%1169, %1162, 1.56888f64 /* ty=float64 */, meta[relay.Constant][46] /* ty=Tensor[(18, 2), float32] */, meta[relay.Constant][47] /* ty=Tensor[(280), int64] */, %1170)
  };
  %1171() /* ty=(Tensor[(13, 11, 13), bool], Tensor[(3, 4, 3), float32], float64, Tensor[(18, 2), float32], Tensor[(280), int64], Tensor[(36), float32]) */
}

def @func_2294() -> float64 {
  @func_2198() /* ty=float64 */
}

def @func_9080(%var_9061: Tensor[(16, 15, 4), uint32], %var_9062: Tensor[(16, 15, 4), uint32]) -> Tensor[(16, 15, 4), uint32] {
  %1172 = cast(%var_9062, dtype="uint32") /* ty=Tensor[(16, 15, 4), uint32] */;
  %1173 = shape_of(%var_9061, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1174 = cast(%var_9061, dtype="uint32") /* ty=Tensor[(16, 15, 4), uint32] */;
  %1175 = dyn.reshape(%1172, %1173, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  logical_xor(%1174, %1175) /* ty=Tensor[(16, 15, 4), uint32] */
}

def @func_6925() -> (float64,) {
  %1176 = @func_4699() /* ty=(float64,) */;
  %1177 = %1176.0;
  (%1177,)
}

def @func_6927() -> (float64,) {
  @func_6925() /* ty=(float64,) */
}

def @func_13491() -> (Tensor[(280), int64], Tensor[(280), int64], float64, Tensor[(36), float32]) {
  %1178 = cast(meta[relay.Constant][48] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %1179 = reshape(%1178, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %1180 = @func_12825(%1179) /* ty=(Tensor[(11, 13, 7), float32], float64, Tensor[(16, 15, 8), uint64], Tensor[(36), float32]) */;
  %1181 = @func_4019() /* ty=Tensor[(280), int64] */;
  %1182 = @func_3267() /* ty=Tensor[(280), int64] */;
  %1183 = %1180.1;
  (%1181, %1182, %1183, meta[relay.Constant][48] /* ty=Tensor[(36), float32] */)
}

def @func_5417() -> (Tensor[(280), int64], float64) {
  %1184 = @func_4394() /* ty=(Tensor[(280), int64],) */;
  %1185 = @func_3445() /* ty=(float64, float64, float64, float64, float64) */;
  %1186 = %1184.0;
  %1187 = %1185.4;
  (%1186, %1187)
}

def @func_6119(%var_6117: Tensor[(286), int64]) -> (Tensor[(10, 6, 11), uint8], Tensor[(2, 13, 11), int64], Tensor[(286), int64]) {
  @func_6116(%var_6117) /* ty=(Tensor[(10, 6, 11), uint8], Tensor[(2, 13, 11), int64], Tensor[(286), int64]) */
}

def @func_11779() -> (Tensor[(8, 13, 12), int8],) {
  %1188 = @func_11643() /* ty=(float64, Tensor[(8, 13, 12), int8], Tensor[(5, 10, 7), uint32], Tensor[(350), uint32]) */;
  %1189 = %1188.1;
  (%1189,)
}

def @func_2728() -> float64 {
  @func_2726() /* ty=float64 */
}

def @func_10698() -> float64 {
  @func_2198() /* ty=float64 */
}

def @func_4526(%var_4522: Tensor[(143), float64]) -> (Tensor[(18, 2), int8], float64, Tensor[(280), int64], Tensor[(280), int64], Tensor[(3, 4, 3), float32], Tensor[(143), float64]) {
  %1190 = @func_1837() /* ty=(Tensor[(13, 11, 13), bool], Tensor[(3, 4, 3), float32], float64, Tensor[(18, 2), float32], Tensor[(280), int64], Tensor[(36), float32]) */;
  %1191 = %1190.3;
  %1192 = @func_2968() /* ty=(float64, float64) */;
  %1193 = %1192.0;
  %1194 = cast(%1191, dtype="bool") /* ty=Tensor[(18, 2), bool] */;
  %1195 = cast(%1193, dtype="bool") /* ty=bool */;
  %1196 = logical_and(%1194, %1195) /* ty=Tensor[(18, 2), bool] */;
  %1197 = cast(%1196, dtype="int8") /* ty=Tensor[(18, 2), int8] */;
  %1198 = cast(%1193, dtype="int8") /* ty=int8 */;
  %1199 = @func_3142() /* ty=(float64, float64) */;
  %1200 = cast(%1193, dtype="float64") /* ty=float64 */;
  %1201 = right_shift(%1197, %1198) /* ty=Tensor[(18, 2), int8] */;
  %1202 = cast(%1201, dtype="float32") /* ty=Tensor[(18, 2), float32] */;
  %1203 = cast(meta[relay.Constant][49] /* ty=Tensor[(280), int64] */, dtype="int64") /* ty=Tensor[(280), int64] */;
  %1204 = reshape(%1200, newshape=[]) /* ty=float64 */;
  %1205 = reshape(%1202, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %1206 = reshape(%1203, newshape=[280]) /* ty=Tensor[(280), int64] */;
  %1207 = @func_1178(%1204, %1205, %1206) /* ty=(Tensor[(8, 6, 14), float64], Tensor[(3, 4, 3), float32], Tensor[(36), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64], Tensor[(14, 4, 5), int64]) */;
  %1208 = cast(%var_4522, dtype="float64") /* ty=Tensor[(143), float64] */;
  %1209 = reshape(%1208, newshape=[1, 13, 11]) /* ty=Tensor[(1, 13, 11), float64] */;
  %1210 = @func_3845(%1209) /* ty=(Tensor[(?, 13, 11), bool], Tensor[(3, 4, 3), float32], Tensor[(36), float32]) */;
  %1211 = %1199.0;
  %1212 = %1207.4;
  %1213 = %1210.1;
  (%1201, %1211, %1212, meta[relay.Constant][49] /* ty=Tensor[(280), int64] */, %1213, %var_4522)
}

def @func_16175() -> (float64, float64) {
  %1216 = fn () -> (float64, float64) {
    %1214 = @func_5676() /* ty=float64 */;
    %1215 = @func_2697() /* ty=float64 */;
    (%1214, %1215)
  };
  %1216() /* ty=(float64, float64) */
}

def @func_13939(%var_13931: Tensor[(9, 16, 12), float32], %var_13932: Tensor[(9, 16, 12), float32]) -> Tensor[(9, 16, 12), float32] {
  %1217 = cast(%var_13932, dtype="float32") /* ty=Tensor[(9, 16, 12), float32] */;
  %1218 = shape_of(%var_13931, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1219 = cast(%var_13931, dtype="float32") /* ty=Tensor[(9, 16, 12), float32] */;
  %1220 = dyn.reshape(%1217, %1218, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%1219, %1220) /* ty=Tensor[(9, 16, 12), float32] */
}

def @func_15406() -> (float64,) {
  @func_15404() /* ty=(float64,) */
}

def @func_6068() -> (Tensor[(11, 13, 7), float32],) {
  %1221 = @func_4772() /* ty=(Tensor[(3, 4, 3), float32], Tensor[(11, 13, 7), float32], Tensor[(1001), float64]) */;
  %1222 = %1221.1;
  (%1222,)
}

def @func_14000(%var_13986: Tensor[(16, 15, 15), float32], %var_13991: Tensor[(16, 15, 15), float32]) -> (Tensor[(16, 15, 15), float32], Tensor[(16, 15, 15), float32]) {
  %1223 = cast(%var_13986, dtype="float32") /* ty=Tensor[(16, 15, 15), float32] */;
  %1224 = cast(%var_13991, dtype="float32") /* ty=Tensor[(16, 15, 15), float32] */;
  %1225 = shape_of(%var_13986, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1226 = cast(%var_13986, dtype="float32") /* ty=Tensor[(16, 15, 15), float32] */;
  %1227 = dyn.reshape(%1224, %1225, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1228 = sin(%1223) /* ty=Tensor[(16, 15, 15), float32] */;
  %1229 = mod(%1226, %1227) /* ty=Tensor[(16, 15, 15), float32] */;
  (%1228, %1229)
}

def @func_8130(%var_8129: Tensor[(14, 14, 3), float64]) -> Tensor[(14, 14, 3), bool] {
  %1234 = fn (%var_8111: Tensor[(14, 14, 3), float64]) -> Tensor[(14, 14, 3), bool] {
    %1230 = @func_7236() /* ty=(float64, Tensor[(3, 4, 3), float32]) */;
    %1231 = %1230.0;
    %1232 = cast(%1231, dtype="bool") /* ty=bool */;
    %1233 = cast(%var_8111, dtype="bool") /* ty=Tensor[(14, 14, 3), bool] */;
    less(%1232, %1233) /* ty=Tensor[(14, 14, 3), bool] */
  };
  %1234(%var_8129) /* ty=Tensor[(14, 14, 3), bool] */
}

def @func_10160() -> (Tensor[(3, 4, 3), float32], Tensor[(9, 7, 2), bool], Tensor[(63, 2), bool], Tensor[(1540), uint16]) {
  %1235 = cast(meta[relay.Constant][50] /* ty=Tensor[(63, 2), bool] */, dtype="bool") /* ty=Tensor[(63, 2), bool] */;
  %1236 = cast(meta[relay.Constant][50] /* ty=Tensor[(63, 2), bool] */, dtype="bool") /* ty=Tensor[(63, 2), bool] */;
  %1237 = cast(meta[relay.Constant][51] /* ty=Tensor[(1540), uint16] */, dtype="uint16") /* ty=Tensor[(1540), uint16] */;
  %1238 = reshape(%1235, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), bool] */;
  %1239 = reshape(%1236, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), bool] */;
  %1240 = reshape(%1237, newshape=[1540]) /* ty=Tensor[(1540), uint16] */;
  %1241 = @func_2762(%1238, %1239, %1240) /* ty=(Tensor[(9, 7, 2), bool], Tensor[(14, 10, 11), uint16], Tensor[(1540), uint16], float64) */;
  %1242 = @func_4409() /* ty=Tensor[(3, 4, 3), float32] */;
  %1243 = %1241.0;
  (%1242, %1243, meta[relay.Constant][50] /* ty=Tensor[(63, 2), bool] */, meta[relay.Constant][51] /* ty=Tensor[(1540), uint16] */)
}

def @func_4218() -> (Tensor[(280), int64], Tensor[(280), int64], float64, float64) {
  @func_4216() /* ty=(Tensor[(280), int64], Tensor[(280), int64], float64, float64) */
}

def @func_8720(%var_8713: Tensor[(143), float64]) -> (Tensor[(280), int64], Tensor[(14, 4, 5), float64], Tensor[(36), float32], Tensor[(143), float64]) {
  %1244 = @func_2544() /* ty=(Tensor[(280), int64],) */;
  %1245 = cast(%var_8713, dtype="float64") /* ty=Tensor[(143), float64] */;
  %1246 = reshape(%1245, newshape=[1, 13, 11]) /* ty=Tensor[(1, 13, 11), float64] */;
  %1247 = @func_3845(%1246) /* ty=(Tensor[(?, 13, 11), bool], Tensor[(3, 4, 3), float32], Tensor[(36), float32]) */;
  %1248 = %1244.0;
  %1249 = @func_7782() /* ty=Tensor[(14, 4, 5), float64] */;
  %1250 = %1247.2;
  (%1248, %1249, %1250, %var_8713)
}

def @func_10765() -> (float64, float64, float64) {
  %1251 = @func_7456() /* ty=(float64,) */;
  %1252 = @func_10577() /* ty=(float64, float64) */;
  %1253 = %1251.0;
  %1254 = @func_9533() /* ty=float64 */;
  %1255 = %1252.1;
  (%1253, %1254, %1255)
}

def @func_10998(%var_10967: Tensor[(3, 4, 3), float32]) -> (Tensor[(3, 4, 3), bool], Tensor[(280), int64]) {
  %1256 = @func_9843() /* ty=Tensor[(3, 4, 3), float32] */;
  %1257 = cast(%var_10967, dtype="bool") /* ty=Tensor[(3, 4, 3), bool] */;
  %1258 = shape_of(%1256, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1259 = cast(%1256, dtype="bool") /* ty=Tensor[(3, 4, 3), bool] */;
  %1260 = dyn.reshape(%1257, %1258, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1261 = @func_9016() /* ty=(Tensor[(280), int64],) */;
  %1262 = equal(%1259, %1260) /* ty=Tensor[(3, 4, 3), bool] */;
  %1263 = %1261.0;
  (%1262, %1263)
}

def @func_9735() -> float64 {
  %1264 = @func_5577() /* ty=(float64,) */;
  %1264.0
}

def @func_5934() -> (float64, Tensor[(9, 8, 16), float32], Tensor[(9, 8, 16), bool], Tensor[(36), float32]) {
  %1265 = @func_3752() /* ty=(Tensor[(9, 8, 16), float32],) */;
  %1266 = %1265.0;
  %1267 = cast(%1266, dtype="float64") /* ty=Tensor[(9, 8, 16), float64] */;
  %1268 = atanh(%1267) /* ty=Tensor[(9, 8, 16), float64] */;
  %1269 = cast(%1268, dtype="float32") /* ty=Tensor[(9, 8, 16), float32] */;
  %1270 = cast(%1268, dtype="float32") /* ty=Tensor[(9, 8, 16), float32] */;
  %1271 = log2(%1270) /* ty=Tensor[(9, 8, 16), float32] */;
  %1272 = cast(%1271, dtype="float32") /* ty=Tensor[(9, 8, 16), float32] */;
  %1273 = shape_of(%1268, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1274 = cast(%1268, dtype="float32") /* ty=Tensor[(9, 8, 16), float32] */;
  %1275 = dyn.reshape(%1272, %1273, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1276 = floor_mod(%1274, %1275) /* ty=Tensor[(9, 8, 16), float32] */;
  %1277 = cast(%1268, dtype="bool") /* ty=Tensor[(9, 8, 16), bool] */;
  %1278 = shape_of(%1276, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1279 = cast(%1276, dtype="bool") /* ty=Tensor[(9, 8, 16), bool] */;
  %1280 = dyn.reshape(%1277, %1278, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1281 = @func_2936() /* ty=(float64, Tensor[(3, 4, 3), float32], Tensor[(36), float32]) */;
  %1282 = @func_3187() /* ty=float64 */;
  %1283 = log10(%1269) /* ty=Tensor[(9, 8, 16), float32] */;
  %1284 = greater(%1279, %1280) /* ty=Tensor[(9, 8, 16), bool] */;
  %1285 = %1281.2;
  (%1282, %1283, %1284, %1285)
}

def @func_7624() -> (Tensor[(3, 4, 3), float32], Tensor[(14, 4, 5), int64], Tensor[(70, 4), int64], float64) {
  @func_7622() /* ty=(Tensor[(3, 4, 3), float32], Tensor[(14, 4, 5), int64], Tensor[(70, 4), int64], float64) */
}

def @func_12013() -> (float64, Tensor[(3, 4, 3), bool], Tensor[(36), float32]) {
  @func_12011() /* ty=(float64, Tensor[(3, 4, 3), bool], Tensor[(36), float32]) */
}

def @func_8420() -> float64 {
  %1286 = @func_4452() /* ty=(float64,) */;
  %1286.0
}

def @func_12947() -> (float64,) {
  @func_12945() /* ty=(float64,) */
}

def @func_8897() -> (float64, float64) {
  %1290 = fn () -> (float64, float64) {
    %1287 = @func_2909() /* ty=(float64, float64) */;
    %1288 = @func_4878() /* ty=float64 */;
    %1289 = %1287.0;
    (%1288, %1289)
  };
  %1290() /* ty=(float64, float64) */
}

def @func_8535() -> (float64, Tensor[(280), int64]) {
  @func_8533() /* ty=(float64, Tensor[(280), int64]) */
}

def @func_12418() -> (float64,) {
  %1291 = @func_4136() /* ty=(float64, float64) */;
  %1292 = %1291.1;
  (%1292,)
}

def @func_3312() -> float64 {
  @func_3310() /* ty=float64 */
}

def @func_4411() -> Tensor[(3, 4, 3), float32] {
  @func_4409() /* ty=Tensor[(3, 4, 3), float32] */
}

def @func_5228(%var_5226: Tensor[(1, 9, 11), float64]) -> (Tensor[(1, 9, 11), int16],) {
  @func_5225(%var_5226) /* ty=(Tensor[(1, 9, 11), int16],) */
}

def @func_2968() -> (float64, float64) {
  %1293 = @func_2514() /* ty=float64 */;
  %1294 = @func_2726() /* ty=float64 */;
  (%1293, %1294)
}

def @func_4577(%var_4575: Tensor[(10, 7, 16), float64], %var_4576: Tensor[(10, 7, 16), float64]) -> Tensor[(10, 7, 16), float64] {
  %1299 = fn (%var_4568: Tensor[(10, 7, 16), float64], %var_4569: Tensor[(10, 7, 16), float64]) -> Tensor[(10, 7, 16), float64] {
    %1295 = cast(%var_4569, dtype="float64") /* ty=Tensor[(10, 7, 16), float64] */;
    %1296 = shape_of(%var_4568, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1297 = cast(%var_4568, dtype="float64") /* ty=Tensor[(10, 7, 16), float64] */;
    %1298 = dyn.reshape(%1295, %1296, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_divide(%1297, %1298) /* ty=Tensor[(10, 7, 16), float64] */
  };
  %1299(%var_4575, %var_4576) /* ty=Tensor[(10, 7, 16), float64] */
}

def @func_3848(%var_3846: Tensor[(1, 13, 11), float64]) -> (Tensor[(?, 13, 11), bool], Tensor[(3, 4, 3), float32], Tensor[(36), float32]) {
  @func_3845(%var_3846) /* ty=(Tensor[(?, 13, 11), bool], Tensor[(3, 4, 3), float32], Tensor[(36), float32]) */
}

def @func_15036() -> (Tensor[(280), int64], float64) {
  %1300 = @func_7408() /* ty=(Tensor[(280), int64],) */;
  %1301 = %1300.0;
  %1302 = @func_9263() /* ty=float64 */;
  (%1301, %1302)
}

def @func_9363() -> (float64, Tensor[(11, 13, 7), float32]) {
  %1306 = fn () -> (float64, Tensor[(11, 13, 7), float32]) {
    %1303 = @func_4772() /* ty=(Tensor[(3, 4, 3), float32], Tensor[(11, 13, 7), float32], Tensor[(1001), float64]) */;
    %1304 = @func_3187() /* ty=float64 */;
    %1305 = %1303.1;
    (%1304, %1305)
  };
  %1306() /* ty=(float64, Tensor[(11, 13, 7), float32]) */
}

def @func_11001(%var_10999: Tensor[(3, 4, 3), float32]) -> (Tensor[(3, 4, 3), bool], Tensor[(280), int64]) {
  @func_10998(%var_10999) /* ty=(Tensor[(3, 4, 3), bool], Tensor[(280), int64]) */
}

def @func_10523() -> float64 {
  @func_9263() /* ty=float64 */
}

def @func_6834() -> (float64, float64, Tensor[(280), int64]) {
  %1312 = fn () -> (float64, float64, Tensor[(280), int64]) {
    %1307 = @func_2353() /* ty=(float64,) */;
    %1308 = @func_5946() /* ty=(Tensor[(280), int64], float64) */;
    %1309 = @func_3800() /* ty=float64 */;
    %1310 = %1307.0;
    %1311 = %1308.0;
    (%1309, %1310, %1311)
  };
  %1312() /* ty=(float64, float64, Tensor[(280), int64]) */
}

def @func_16034() -> Tensor[(3, 4, 3), float32] {
  @func_16032() /* ty=Tensor[(3, 4, 3), float32] */
}

def @func_10872() -> (float64,) {
  %1313 = @func_5180() /* ty=float64 */;
  (%1313,)
}

def @func_7840() -> float64 {
  %1315 = fn () -> float64 {
    %1314 = @func_6034() /* ty=(float64, float64) */;
    %1314.1
  };
  %1315() /* ty=float64 */
}

def @func_9028() -> float64 {
  %1316 = @func_8533() /* ty=(float64, Tensor[(280), int64]) */;
  %1316.0
}

def @func_13033() -> float64 {
  %1318 = fn () -> float64 {
    %1317 = @func_10134() /* ty=(float64,) */;
    %1317.0
  };
  %1318() /* ty=float64 */
}

def @func_1419(%var_1416: float32, %var_1417: Tensor[(36), float32], %var_1418: Tensor[(280), int64]) -> (Tensor[(5, 2, 12), float32], Tensor[(14, 4, 5), float64], Tensor[(36), float32], Tensor[(280), int64]) {
  %1330 = fn (%var_1396: float32, %var_1407: Tensor[(36), float32], %var_1408: Tensor[(280), int64]) -> (Tensor[(5, 2, 12), float32], Tensor[(14, 4, 5), float64], Tensor[(36), float32], Tensor[(280), int64]) {
    %1319 = cast(%var_1396, dtype="float32") /* ty=float32 */;
    %1320 = cast(meta[relay.Constant][52] /* ty=Tensor[(5, 2, 12), float32] */, dtype="float32") /* ty=Tensor[(5, 2, 12), float32] */;
    %1321 = cast(%var_1396, dtype="float64") /* ty=float64 */;
    %1322 = cast(%var_1407, dtype="float32") /* ty=Tensor[(36), float32] */;
    %1323 = cast(%var_1408, dtype="int64") /* ty=Tensor[(280), int64] */;
    %1324 = reshape(%1321, newshape=[]) /* ty=float64 */;
    %1325 = reshape(%1322, newshape=[36]) /* ty=Tensor[(36), float32] */;
    %1326 = reshape(%1323, newshape=[280]) /* ty=Tensor[(280), int64] */;
    %1327 = @func_1178(%1324, %1325, %1326) /* ty=(Tensor[(8, 6, 14), float64], Tensor[(3, 4, 3), float32], Tensor[(36), float32], Tensor[(14, 4, 5), float64], Tensor[(280), int64], Tensor[(14, 4, 5), int64]) */;
    %1328 = floor_mod(%1319, %1320) /* ty=Tensor[(5, 2, 12), float32] */;
    %1329 = %1327.3;
    (%1328, %1329, %var_1407, %var_1408)
  };
  %1330(%var_1416, %var_1417, %var_1418) /* ty=(Tensor[(5, 2, 12), float32], Tensor[(14, 4, 5), float64], Tensor[(36), float32], Tensor[(280), int64]) */
}

def @func_7975() -> (float64, Tensor[(280), float32]) {
  @func_7973() /* ty=(float64, Tensor[(280), float32]) */
}

def @func_4879() -> float64 {
  %1331 = fn () -> float64 {
    @func_2294() /* ty=float64 */
  };
  %1331() /* ty=float64 */
}

def @func_11270(%var_11269: Tensor[(15, 6, 4), float32]) -> (Tensor[(15, 6, 4), float64],) {
  %1336 = fn (%var_11259: Tensor[(15, 6, 4), float32]) -> (Tensor[(15, 6, 4), float64],) {
    %1332 = cast(%var_11259, dtype="float32") /* ty=Tensor[(15, 6, 4), float32] */;
    %1333 = rsqrt(%1332) /* ty=Tensor[(15, 6, 4), float32] */;
    %1334 = cast(%1333, dtype="float64") /* ty=Tensor[(15, 6, 4), float64] */;
    %1335 = acos(%1334) /* ty=Tensor[(15, 6, 4), float64] */;
    (%1335,)
  };
  %1336(%var_11269) /* ty=(Tensor[(15, 6, 4), float64],) */
}

def @func_13253() -> (float64, float64) {
  %1340 = fn () -> (float64, float64) {
    %1337 = @func_8179() /* ty=(float64, Tensor[(280), int64]) */;
    %1338 = @func_6547() /* ty=float64 */;
    %1339 = %1337.0;
    (%1338, %1339)
  };
  %1340() /* ty=(float64, float64) */
}

def @func_16345() -> (Tensor[(9, 8, 16), float32],) {
  %1342 = fn () -> (Tensor[(9, 8, 16), float32],) {
    %1341 = @func_12268() /* ty=Tensor[(9, 8, 16), float32] */;
    (%1341,)
  };
  %1342() /* ty=(Tensor[(9, 8, 16), float32],) */
}

def @func_8662(%var_8660: Tensor[(9, 13, 13), int32], %var_8661: Tensor[(9, 13, 13), int32]) -> (Tensor[(9, 13, 13), int32], float64) {
  @func_8658(%var_8660, %var_8661) /* ty=(Tensor[(9, 13, 13), int32], float64) */
}

def @func_7570() -> (Tensor[(3, 4, 3), float32], float64, float64, Tensor[(280), int64]) {
  %1343 = @func_7087() /* ty=(float64,) */;
  %1344 = @func_6034() /* ty=(float64, float64) */;
  %1345 = @func_4843() /* ty=(float64, float64, Tensor[(36), float32], Tensor[(280), int64], Tensor[(280), int64], float64) */;
  %1346 = @func_4409() /* ty=Tensor[(3, 4, 3), float32] */;
  %1347 = %1343.0;
  %1348 = %1344.1;
  %1349 = %1345.4;
  (%1346, %1347, %1348, %1349)
}

def @func_14281(%var_14279: Tensor[(2, 4, 14), float32], %var_14280: Tensor[(630), int32]) -> (Tensor[(2, 4, 14), float32], Tensor[(36), float32], Tensor[(350), uint32], float64, float64, Tensor[(6, 7, 15), int32], Tensor[(630), int32]) {
  @func_14277(%var_14279, %var_14280) /* ty=(Tensor[(2, 4, 14), float32], Tensor[(36), float32], Tensor[(350), uint32], float64, float64, Tensor[(6, 7, 15), int32], Tensor[(630), int32]) */
}

def @func_9252(%var_9251: uint32) -> (Tensor[(1120), float64], Tensor[(3, 4, 3), float32], Tensor[(36), float32], Tensor[(5, 10, 7), uint32], uint32, Tensor[(350), uint32]) {
  %1361 = fn (%var_9242: uint32) -> (Tensor[(1120), float64], Tensor[(3, 4, 3), float32], Tensor[(36), float32], Tensor[(5, 10, 7), uint32], uint32, Tensor[(350), uint32]) {
    %1350 = @func_4859() /* ty=(float64, float64, Tensor[(10, 7, 16), float64], Tensor[(1120), float64]) */;
    %1351 = cast(meta[relay.Constant][53] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
    %1352 = reshape(%1351, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float32] */;
    %1353 = cast(%var_9242, dtype="uint32") /* ty=uint32 */;
    %1354 = cast(meta[relay.Constant][54] /* ty=Tensor[(350), uint32] */, dtype="uint32") /* ty=Tensor[(350), uint32] */;
    %1355 = reshape(%1353, newshape=[]) /* ty=uint32 */;
    %1356 = reshape(%1354, newshape=[5, 10, 7]) /* ty=Tensor[(5, 10, 7), uint32] */;
    %1357 = @func_5280(%1355, %1356) /* ty=(Tensor[(5, 10, 7), uint32],) */;
    %1358 = %1350.3;
    %1359 = @func_111(%1352) /* ty=Tensor[(3, 4, 3), float32] */;
    %1360 = %1357.0;
    (%1358, %1359, meta[relay.Constant][53] /* ty=Tensor[(36), float32] */, %1360, %var_9242, meta[relay.Constant][54] /* ty=Tensor[(350), uint32] */)
  };
  %1361(%var_9251) /* ty=(Tensor[(1120), float64], Tensor[(3, 4, 3), float32], Tensor[(36), float32], Tensor[(5, 10, 7), uint32], uint32, Tensor[(350), uint32]) */
}

def @func_6707(%var_6697: Tensor[(8, 10, 6), float64]) -> Tensor[(8, 10, 6), bool] {
  %1362 = @func_2726() /* ty=float64 */;
  %1363 = cast(%1362, dtype="bool") /* ty=bool */;
  %1364 = cast(%var_6697, dtype="bool") /* ty=Tensor[(8, 10, 6), bool] */;
  greater(%1363, %1364) /* ty=Tensor[(8, 10, 6), bool] */
}

def @func_7994() -> (float64, float64) {
  %1368 = fn () -> (float64, float64) {
    %1365 = @func_5934() /* ty=(float64, Tensor[(9, 8, 16), float32], Tensor[(9, 8, 16), bool], Tensor[(36), float32]) */;
    %1366 = @func_2726() /* ty=float64 */;
    %1367 = %1365.0;
    (%1366, %1367)
  };
  %1368() /* ty=(float64, float64) */
}

def @func_4394() -> (Tensor[(280), int64],) {
  %1369 = @func_2544() /* ty=(Tensor[(280), int64],) */;
  %1370 = %1369.0;
  (%1370,)
}

def @func_9017() -> (Tensor[(280), int64],) {
  %1373 = fn () -> (Tensor[(280), int64],) {
    %1371 = @func_6892() /* ty=(Tensor[(280), int64],) */;
    %1372 = %1371.0;
    (%1372,)
  };
  %1373() /* ty=(Tensor[(280), int64],) */
}

def @func_11125() -> (float64, Tensor[(280), int64], Tensor[(36), float32], Tensor[(3, 4, 3), float32], Tensor[(?, 36), float64]) {
  %1386 = fn () -> (float64, Tensor[(280), int64], Tensor[(36), float32], Tensor[(3, 4, 3), float32], Tensor[(?, 36), float64]) {
    %1374 = @func_9677() /* ty=(float64, float64) */;
    %1375 = cast(meta[relay.Constant][55] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
    %1376 = reshape(%1375, newshape=[36, 1]) /* ty=Tensor[(36, 1), float32] */;
    %1377 = @func_4981(%1376) /* ty=(Tensor[(280), int64], Tensor[(3, 4, 3), float32], Tensor[(36, 1), float32]) */;
    %1378 = @func_6564() /* ty=(Tensor[(3, 4, 3), float32],) */;
    %1379 = %1378.0;
    %1380 = cast(%1379, dtype="float32") /* ty=Tensor[(3, 4, 3), float32] */;
    %1381 = reshape(%1380, newshape=[1, 36]) /* ty=Tensor[(1, 36), float32] */;
    %1382 = @func_3378(%1381) /* ty=(float64, Tensor[(16, 15, 8), uint64], Tensor[(?, 36), float64], Tensor[(16, 15, 8), uint64]) */;
    %1383 = %1374.1;
    %1384 = %1377.0;
    %1385 = %1382.2;
    (%1383, %1384, meta[relay.Constant][55] /* ty=Tensor[(36), float32] */, %1379, %1385)
  };
  %1386() /* ty=(float64, Tensor[(280), int64], Tensor[(36), float32], Tensor[(3, 4, 3), float32], Tensor[(?, 36), float64]) */
}

def @func_15157() -> float64 {
  @func_6056() /* ty=float64 */
}

def @func_11495() -> (float64, Tensor[(3, 4, 3), float32]) {
  %1387 = @func_6925() /* ty=(float64,) */;
  %1388 = %1387.0;
  %1389 = @func_4409() /* ty=Tensor[(3, 4, 3), float32] */;
  (%1388, %1389)
}

def @func_2271(%var_2269: Tensor[(36), float32], %var_2270: Tensor[(280), int64]) -> (float64, Tensor[(36), float32], Tensor[(36), float32], Tensor[(280), int64], Tensor[(36), float32]) {
  @func_2267(%var_2269, %var_2270) /* ty=(float64, Tensor[(36), float32], Tensor[(36), float32], Tensor[(280), int64], Tensor[(36), float32]) */
}

def @func_13897() -> (float64,) {
  %1390 = @func_4136() /* ty=(float64, float64) */;
  %1391 = %1390.0;
  (%1391,)
}

def @func_15447() -> (float64,) {
  %1392 = @func_10341() /* ty=float64 */;
  (%1392,)
}

def @func_11808() -> (float64,) {
  %1394 = fn () -> (float64,) {
    %1393 = @func_9533() /* ty=float64 */;
    (%1393,)
  };
  %1394() /* ty=(float64,) */
}

def @func_5539() -> (float64,) {
  %1396 = fn () -> (float64,) {
    %1395 = @func_2198() /* ty=float64 */;
    (%1395,)
  };
  %1396() /* ty=(float64,) */
}

def @func_6035() -> (float64, float64) {
  %1399 = fn () -> (float64, float64) {
    %1397 = @func_3310() /* ty=float64 */;
    %1398 = @func_3187() /* ty=float64 */;
    (%1397, %1398)
  };
  %1399() /* ty=(float64, float64) */
}

def @func_11834() -> float64 {
  %1400 = @func_6482() /* ty=(float64, float64) */;
  %1400.1
}

def @func_6223() -> Tensor[(8, 13, 12), bool] {
  %1402 = fn () -> Tensor[(8, 13, 12), bool] {
    %1401 = @func_5345() /* ty=(Tensor[(8, 13, 12), bool], Tensor[(8, 13, 12), bool]) */;
    %1401.0
  };
  %1402() /* ty=Tensor[(8, 13, 12), bool] */
}

def @func_16064() -> (Tensor[(5, 6, 1), float64],) {
  %1403 = cast(meta[relay.Constant][56] /* ty=Tensor[(5, 6, 1), float64] */, dtype="float64") /* ty=Tensor[(5, 6, 1), float64] */;
  %1404 = sigmoid(%1403) /* ty=Tensor[(5, 6, 1), float64] */;
  (%1404,)
}

def @func_13943(%var_13941: Tensor[(9, 16, 12), float32], %var_13942: Tensor[(9, 16, 12), float32]) -> Tensor[(9, 16, 12), float32] {
  @func_13939(%var_13941, %var_13942) /* ty=Tensor[(9, 16, 12), float32] */
}

def @func_9930() -> float64 {
  %1405 = @func_7816() /* ty=(float64, float64) */;
  %1405.1
}

def @func_4557() -> float64 {
  @func_4555() /* ty=float64 */
}

def @func_11793() -> (float64,) {
  %1408 = fn () -> (float64,) {
    %1406 = @func_4699() /* ty=(float64,) */;
    %1407 = %1406.0;
    (%1407,)
  };
  %1408() /* ty=(float64,) */
}

def @func_8303() -> (Tensor[(8, 13, 12), bool],) {
  %1409 = @func_5345() /* ty=(Tensor[(8, 13, 12), bool], Tensor[(8, 13, 12), bool]) */;
  %1410 = %1409.0;
  (%1410,)
}

def @func_5714() -> (float64,) {
  @func_5712() /* ty=(float64,) */
}

def @func_6548() -> float64 {
  %1411 = fn () -> float64 {
    @func_5676() /* ty=float64 */
  };
  %1411() /* ty=float64 */
}

def @func_6753() -> (float64, float64, float64, Tensor[(3, 4, 3), float32]) {
  %1420 = fn () -> (float64, float64, float64, Tensor[(3, 4, 3), float32]) {
    %1412 = @func_6034() /* ty=(float64, float64) */;
    %1413 = @func_5417() /* ty=(Tensor[(280), int64], float64) */;
    %1414 = @func_2353() /* ty=(float64,) */;
    %1415 = @func_3179() /* ty=(Tensor[(3, 4, 3), float32],) */;
    %1416 = %1412.0;
    %1417 = %1413.1;
    %1418 = %1414.0;
    %1419 = %1415.0;
    (%1416, %1417, %1418, %1419)
  };
  %1420() /* ty=(float64, float64, float64, Tensor[(3, 4, 3), float32]) */
}

def @func_5936() -> (float64, Tensor[(9, 8, 16), float32], Tensor[(9, 8, 16), bool], Tensor[(36), float32]) {
  @func_5934() /* ty=(float64, Tensor[(9, 8, 16), float32], Tensor[(9, 8, 16), bool], Tensor[(36), float32]) */
}

def @func_2545() -> (Tensor[(280), int64],) {
  %1423 = fn () -> (Tensor[(280), int64],) {
    %1421 = @func_1837() /* ty=(Tensor[(13, 11, 13), bool], Tensor[(3, 4, 3), float32], float64, Tensor[(18, 2), float32], Tensor[(280), int64], Tensor[(36), float32]) */;
    %1422 = %1421.4;
    (%1422,)
  };
  %1423() /* ty=(Tensor[(280), int64],) */
}

def @func_3447() -> (float64, float64, float64, float64, float64) {
  @func_3445() /* ty=(float64, float64, float64, float64, float64) */
}

def @func_10162() -> (Tensor[(3, 4, 3), float32], Tensor[(9, 7, 2), bool], Tensor[(63, 2), bool], Tensor[(1540), uint16]) {
  @func_10160() /* ty=(Tensor[(3, 4, 3), float32], Tensor[(9, 7, 2), bool], Tensor[(63, 2), bool], Tensor[(1540), uint16]) */
}

def @func_8375(%var_8373: Tensor[(8, 7, 9), float64]) -> (Tensor[(8, 7, 9), float64], Tensor[(8, 7, 9), float64], Tensor[(8, 7, 9), float32], Tensor[(3, 4, 3), float32]) {
  @func_8372(%var_8373) /* ty=(Tensor[(8, 7, 9), float64], Tensor[(8, 7, 9), float64], Tensor[(8, 7, 9), float32], Tensor[(3, 4, 3), float32]) */
}

def @func_4845() -> (float64, float64, Tensor[(36), float32], Tensor[(280), int64], Tensor[(280), int64], float64) {
  @func_4843() /* ty=(float64, float64, Tensor[(36), float32], Tensor[(280), int64], Tensor[(280), int64], float64) */
}

def @func_7288(%var_7286: Tensor[(9, 8, 6), float64], %var_7287: Tensor[(9, 8, 6), float64]) -> (Tensor[(9, 8, 6), float64],) {
  @func_7284(%var_7286, %var_7287) /* ty=(Tensor[(9, 8, 6), float64],) */
}

def @func_10767() -> (float64, float64, float64) {
  @func_10765() /* ty=(float64, float64, float64) */
}

def @func_2726() -> float64 {
  @func_2294() /* ty=float64 */
}

def @func_8081() -> float64 {
  %1425 = fn () -> float64 {
    %1424 = @func_5712() /* ty=(float64,) */;
    %1424.0
  };
  %1425() /* ty=float64 */
}

def @func_11317() -> float64 {
  %1426 = @func_5577() /* ty=(float64,) */;
  %1426.0
}

def @func_13788() -> (float64, float64, float64, float64) {
  %1433 = fn () -> (float64, float64, float64, float64) {
    %1427 = @func_8816() /* ty=(float64, float64, float64) */;
    %1428 = @func_10872() /* ty=(float64,) */;
    %1429 = %1427.2;
    %1430 = @func_10698() /* ty=float64 */;
    %1431 = %1428.0;
    %1432 = @func_10498() /* ty=float64 */;
    (%1429, %1430, %1431, %1432)
  };
  %1433() /* ty=(float64, float64, float64, float64) */
}

def @func_15067() -> (Tensor[(280), int64],) {
  @func_15065() /* ty=(Tensor[(280), int64],) */
}

def @func_15836(%var_15834: Tensor[(9, 14, 2), float64]) -> (Tensor[(9, 14, 2), float64], float64, float64, float64, Tensor[(280), int64], float64, Tensor[(9, 8, 16), float32], float64) {
  @func_15833(%var_15834) /* ty=(Tensor[(9, 14, 2), float64], float64, float64, float64, Tensor[(280), int64], float64, Tensor[(9, 8, 16), float32], float64) */
}

def @func_3381(%var_3379: Tensor[(1, 36), float32]) -> (float64, Tensor[(16, 15, 8), uint64], Tensor[(?, 36), float64], Tensor[(16, 15, 8), uint64]) {
  @func_3378(%var_3379) /* ty=(float64, Tensor[(16, 15, 8), uint64], Tensor[(?, 36), float64], Tensor[(16, 15, 8), uint64]) */
}

def @func_13566() -> (float64,) {
  %1434 = @func_4452() /* ty=(float64,) */;
  %1435 = %1434.0;
  (%1435,)
}

def @func_2515() -> float64 {
  %1436 = fn () -> float64 {
    @func_2198() /* ty=float64 */
  };
  %1436() /* ty=float64 */
}

def @func_2852() -> (float64,) {
  %1438 = fn () -> (float64,) {
    %1437 = @func_2475() /* ty=float64 */;
    (%1437,)
  };
  %1438() /* ty=(float64,) */
}

def @func_11889() -> (float64,) {
  %1441 = fn () -> (float64,) {
    %1439 = @func_8613() /* ty=(float64,) */;
    %1440 = %1439.0;
    (%1440,)
  };
  %1441() /* ty=(float64,) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen837/build/output.py:5358: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen837/build/output.py", line 5363, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(336) tvmgen_default_fused_reshape_multiply_kernel0(float* __restrict__ T_multiply, float* __restrict__ placeholder, float* __restrict__ placeholder1) {
  T_multiply[(((int)threadIdx.x))] = (placeholder[(((int)threadIdx.x))] * placeholder1[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

