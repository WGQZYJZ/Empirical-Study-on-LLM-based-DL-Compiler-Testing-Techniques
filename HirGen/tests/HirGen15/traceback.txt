==========mod==========
#[version = "0.0.5"]
def @func_2819() -> Tensor[(10, 8, 11), float64] {
  %0 = @func_2417() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) */;
  %0.1
}

def @func_6963() -> (Tensor[(10, 8, 11), float32],) {
  %1 = @func_3485() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %2 = %1.0;
  (%2,)
}

def @func_3641() -> Tensor[(10, 8, 11), uint16] {
  %3 = @func_2787() /* ty=(Tensor[(10, 8, 11), uint16], Tensor[(10, 8, 11), float32], Tensor[(55), float32], Tensor[(168), uint16]) */;
  %3.0
}

def @func_6249(%var_6233: Tensor[(11, 2, 10), uint64]) -> Tensor[(11, 2, 10), uint64] {
  %4 = cast(%var_6233, dtype="uint64") /* ty=Tensor[(11, 2, 10), uint64] */;
  %5 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(11, 2, 10), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(11, 2, 10), uint64] */, dtype="uint64") /* ty=Tensor[(11, 2, 10), uint64] */;
  %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  minimum(%6, %7) /* ty=Tensor[(11, 2, 10), uint64] */
}

def @func_5692(%var_5666: Tensor[(336), int32]) -> (Tensor[(10, 8, 11), float32], Tensor[(16, 3, 7), int32], Tensor[(336), int32], Tensor[(10, 8, 11), float32]) {
  %8 = @func_3981() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %9 = cast(%var_5666, dtype="int32") /* ty=Tensor[(336), int32] */;
  %10 = cast(%var_5666, dtype="int32") /* ty=Tensor[(336), int32] */;
  %11 = reshape(%9, newshape=[16, 3, 7]) /* ty=Tensor[(16, 3, 7), int32] */;
  %12 = reshape(%10, newshape=[16, 3, 7]) /* ty=Tensor[(16, 3, 7), int32] */;
  %13 = @func_3967() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %14 = %13.0;
  %15 = cast(%14, dtype="float32") /* ty=Tensor[(10, 8, 11), float32] */;
  %16 = %8.0;
  %17 = @func_4643(%11, %12) /* ty=Tensor[(16, 3, 7), int32] */;
  %18 = tan(%15) /* ty=Tensor[(10, 8, 11), float32] */;
  (%16, %17, %var_5666, %18)
}

def @func_2483(%var_2467: Tensor[(6, 28), uint16]) -> (Tensor[(10, 8, 11), float32], Tensor[(55), float32], Tensor[(6, 28), uint16]) {
  %19 = @func_2417() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) */;
  %20 = cast(%var_2467, dtype="uint16") /* ty=Tensor[(6, 28), uint16] */;
  %21 = reshape(%20, newshape=[3, 8, 7]) /* ty=Tensor[(3, 8, 7), uint16] */;
  %22 = @func_900(%21) /* ty=(Tensor[(55), float32], Tensor[(3, 8, 7), bool], Tensor[(11, 10, 5), uint8]) */;
  %23 = %19.0;
  %24 = %22.0;
  (%23, %24, %var_2467)
}

def @func_7345() -> (Tensor[(10, 8, 11), float32],) {
  %25 = @func_3485() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %26 = %25.0;
  (%26,)
}

def @func_5594() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) {
  %27 = @func_5328() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) */;
  %28 = @func_3104() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %29 = %27.1;
  %30 = %28.0;
  (%29, %30)
}

def @func_5138() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) {
  %31 = @func_3687() /* ty=Tensor[(10, 8, 11), float32] */;
  %32 = cast(%31, dtype="float64") /* ty=Tensor[(10, 8, 11), float64] */;
  %33 = @func_4189() /* ty=Tensor[(10, 8, 11), float32] */;
  %34 = log2(%32) /* ty=Tensor[(10, 8, 11), float64] */;
  (%33, %34)
}

def @func_3794(%var_3699: Tensor[(8, 16), float64], %var_3735: Tensor[(10, 8, 11), float32]) -> (Tensor[(8, 16), float64], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), bool], Tensor[(10, 8, 11), uint16]) {
  %35 = cast(%var_3699, dtype="float64") /* ty=Tensor[(8, 16), float64] */;
  %36 = @func_3666() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %37 = %36.0;
  %38 = cast(%var_3735, dtype="int64") /* ty=Tensor[(10, 8, 11), int64] */;
  %39 = shape_of(%37, dtype="int32") /* ty=Tensor[(3), int32] */;
  %40 = cast(%37, dtype="int64") /* ty=Tensor[(10, 8, 11), int64] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %42 = bitwise_or(%40, %41) /* ty=Tensor[(10, 8, 11), int64] */;
  %43 = cast(%42, dtype="float32") /* ty=Tensor[(10, 8, 11), float32] */;
  %44 = @func_3666() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %45 = %44.0;
  %46 = cast(%45, dtype="bool") /* ty=Tensor[(10, 8, 11), bool] */;
  %47 = shape_of(%var_3735, dtype="int32") /* ty=Tensor[(3), int32] */;
  %48 = cast(%var_3735, dtype="bool") /* ty=Tensor[(10, 8, 11), bool] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %50 = sigmoid(%35) /* ty=Tensor[(8, 16), float64] */;
  %51 = sigmoid(%43) /* ty=Tensor[(10, 8, 11), float32] */;
  %52 = less(%48, %49) /* ty=Tensor[(10, 8, 11), bool] */;
  %53 = @func_3641() /* ty=Tensor[(10, 8, 11), uint16] */;
  (%50, %51, %52, %53)
}

def @func_2224(%var_2213: Tensor[(5, 2, 4), uint32]) -> (Tensor[(5, 2, 4), uint32], Tensor[(5, 2, 4), float64]) {
  %54 = cast(meta[relay.Constant][1] /* ty=Tensor[(5, 2, 4), uint32] */, dtype="uint32") /* ty=Tensor[(5, 2, 4), uint32] */;
  %55 = shape_of(%var_2213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(%var_2213, dtype="uint32") /* ty=Tensor[(5, 2, 4), uint32] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %58 = cast(%var_2213, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  %59 = bitwise_or(%56, %57) /* ty=Tensor[(5, 2, 4), uint32] */;
  %60 = sqrt(%58) /* ty=Tensor[(5, 2, 4), float64] */;
  (%59, %60)
}

def @func_5267() -> Tensor[(10, 8, 11), float32] {
  %61 = @func_4223() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %61.0
}

def @func_3558() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) {
  %62 = @func_3485() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %63 = %62.0;
  %64 = @func_2819() /* ty=Tensor[(10, 8, 11), float64] */;
  (%63, %64)
}

def @func_2830() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) {
  %65 = @func_2675() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %66 = @func_2675() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %67 = %65.0;
  %68 = %66.0;
  (%67, %68)
}

def @func_4453(%var_4442: Tensor[(1, 55), float32]) -> (Tensor[(10, 8, 11), float64], Tensor[(11, 10, 5), float32], Tensor[(1, 55), float32], Tensor[(550), float32]) {
  %69 = cast(%var_4442, dtype="float32") /* ty=Tensor[(1, 55), float32] */;
  %70 = cast(meta[relay.Constant][2] /* ty=Tensor[(550), float32] */, dtype="float32") /* ty=Tensor[(550), float32] */;
  %71 = reshape(%69, newshape=[11, 1, 5]) /* ty=Tensor[(11, 1, 5), float32] */;
  %72 = reshape(%70, newshape=[11, 10, 5]) /* ty=Tensor[(11, 10, 5), float32] */;
  %73 = @func_159(%71, %72) /* ty=(Tensor[(11, 10, 5), float32], Tensor[(11, 10, 5), float32]) */;
  %74 = @func_2819() /* ty=Tensor[(10, 8, 11), float64] */;
  %75 = %73.1;
  (%74, %75, %var_4442, meta[relay.Constant][2] /* ty=Tensor[(550), float32] */)
}

def @func_3520(%var_3516: Tensor[(702), float64]) -> (Tensor[(10, 8, 11), float32], Tensor[(702), float64], Tensor[(420), float64], Tensor[(702), float64]) {
  %76 = @func_3104() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %77 = cast(meta[relay.Constant][3] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %78 = %76.0;
  %79 = cast(%78, dtype="float64") /* ty=Tensor[(10, 8, 11), float64] */;
  %80 = cast(%var_3516, dtype="float64") /* ty=Tensor[(702), float64] */;
  %81 = reshape(%77, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %82 = reshape(%79, newshape=[1, 880]) /* ty=Tensor[(1, 880), float64] */;
  %83 = reshape(%80, newshape=[702]) /* ty=Tensor[(702), float64] */;
  %84 = @func_3367(%81, %82, %83) /* ty=(Tensor[(168), uint16], Tensor[(2112), float64], Tensor[(420), float64], Tensor[(360), uint32], Tensor[(1, 880), float64], Tensor[(702), float64]) */;
  %85 = %84.5;
  (%78, %85, meta[relay.Constant][3] /* ty=Tensor[(420), float64] */, %var_3516)
}

def @func_4724() -> Tensor[(10, 8, 11), float32] {
  %86 = @func_3498() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %87 = %86.0;
  %88 = cast(%87, dtype="float32") /* ty=Tensor[(10, 8, 11), float32] */;
  asinh(%88) /* ty=Tensor[(10, 8, 11), float32] */
}

def @func_4835() -> Tensor[(12, 6), float32] {
  %89 = cast(meta[relay.Constant][4] /* ty=Tensor[(12, 6), float32] */, dtype="float32") /* ty=Tensor[(12, 6), float32] */;
  cosh(%89) /* ty=Tensor[(12, 6), float32] */
}

def @func_3591(%var_3584: float64) -> (Tensor[(11, 6, 6), float64],) {
  %90 = cast(%var_3584, dtype="float64") /* ty=float64 */;
  %91 = cast(meta[relay.Constant][5] /* ty=Tensor[(11, 6, 6), float64] */, dtype="float64") /* ty=Tensor[(11, 6, 6), float64] */;
  %92 = add(%90, %91) /* ty=Tensor[(11, 6, 6), float64] */;
  (%92,)
}

def @func_3367(%var_3321: Tensor[(420), float64], %var_3323: Tensor[(1, 880), float64], %var_3324: Tensor[(702), float64]) -> (Tensor[(168), uint16], Tensor[(2112), float64], Tensor[(420), float64], Tensor[(360), uint32], Tensor[(1, 880), float64], Tensor[(702), float64]) {
  %93 = @func_2999() /* ty=(Tensor[(11, 10, 5), uint8], Tensor[(168), uint16], Tensor[(11, 10, 5), uint8], Tensor[(10, 8, 11), bool]) */;
  %94 = cast(%var_3321, dtype="float64") /* ty=Tensor[(420), float64] */;
  %95 = cast(meta[relay.Constant][6] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %96 = cast(%var_3323, dtype="float64") /* ty=Tensor[(1, 880), float64] */;
  %97 = cast(%var_3324, dtype="float64") /* ty=Tensor[(702), float64] */;
  %98 = %93.1;
  %99 = cast(%98, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %100 = reshape(%94, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %101 = reshape(%95, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %102 = reshape(%96, newshape=[10, 8, 11]) /* ty=Tensor[(10, 8, 11), float64] */;
  %103 = reshape(%97, newshape=[234, 3]) /* ty=Tensor[(234, 3), float64] */;
  %104 = reshape(%99, newshape=[168]) /* ty=Tensor[(168), uint16] */;
  %105 = @func_3250(%100, %101, %102, %103, %104) /* ty=(Tensor[(14, 3, 10), float64], Tensor[(420), float64], Tensor[(10, 8, 11), bool], Tensor[(12, 2, 15), uint32], Tensor[(8, 6, 4), bool], Tensor[(192), float32], Tensor[(12, 16, 11), float64], Tensor[(2112), float64], Tensor[(10, 8, 11), float32], Tensor[(6, 13, 9), uint8], Tensor[(234, 3), float64], Tensor[(1248), float32], Tensor[(55), float32], Tensor[(168), uint16]) */;
  %106 = %105.7;
  (%98, %106, %var_3321, meta[relay.Constant][6] /* ty=Tensor[(360), uint32] */, %var_3323, %var_3324)
}

def @func_5038() -> (Tensor[(10, 8, 11), float64],) {
  %107 = @func_2819() /* ty=Tensor[(10, 8, 11), float64] */;
  (%107,)
}

def @func_7180() -> (Tensor[(10, 8, 11), float32],) {
  %108 = @func_5074() /* ty=Tensor[(10, 8, 11), float32] */;
  (%108,)
}

def @func_7485() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) {
  %109 = @func_4703() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), uint16]) */;
  %110 = @func_5267() /* ty=Tensor[(10, 8, 11), float32] */;
  %111 = %109.0;
  (%110, %111)
}

def @func_1175(%var_1171: Tensor[(14, 3, 10), float64]) -> (Tensor[(14, 3, 10), float64],) {
  %112 = cast(%var_1171, dtype="float64") /* ty=Tensor[(14, 3, 10), float64] */;
  %113 = cosh(%112) /* ty=Tensor[(14, 3, 10), float64] */;
  (%113,)
}

def @func_4408(%var_4360: Tensor[(16, 13, 10), int64], %var_4388: Tensor[(128), float64], %var_4389: Tensor[(880), float32], %var_4402: Tensor[(16, 13, 10), int64]) -> (Tensor[(16, 13, 10), int64], Tensor[(10, 8, 11), bool], Tensor[(128), float64], Tensor[(880), float32], Tensor[(16, 13, 10), float32], Tensor[(10, 8, 11), float64]) {
  %114 = cast(meta[relay.Constant][7] /* ty=Tensor[(16, 13, 10), int64] */, dtype="int64") /* ty=Tensor[(16, 13, 10), int64] */;
  %115 = shape_of(%var_4360, dtype="int32") /* ty=Tensor[(3), int32] */;
  %116 = cast(%var_4360, dtype="int64") /* ty=Tensor[(16, 13, 10), int64] */;
  %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %118 = cast(%var_4388, dtype="float64") /* ty=Tensor[(128), float64] */;
  %119 = cast(%var_4389, dtype="float32") /* ty=Tensor[(880), float32] */;
  %120 = reshape(%118, newshape=[8, 16]) /* ty=Tensor[(8, 16), float64] */;
  %121 = reshape(%119, newshape=[10, 8, 11]) /* ty=Tensor[(10, 8, 11), float32] */;
  %122 = @func_3794(%120, %121) /* ty=(Tensor[(8, 16), float64], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), bool], Tensor[(10, 8, 11), uint16]) */;
  %123 = cast(%var_4402, dtype="float32") /* ty=Tensor[(16, 13, 10), float32] */;
  %124 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(16, 13, 10), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %125 = cast(meta[relay.Constant][7] /* ty=Tensor[(16, 13, 10), int64] */, dtype="float32") /* ty=Tensor[(16, 13, 10), float32] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %127 = add(%116, %117) /* ty=Tensor[(16, 13, 10), int64] */;
  %128 = %122.2;
  %129 = mod(%125, %126) /* ty=Tensor[(16, 13, 10), float32] */;
  %130 = @func_2819() /* ty=Tensor[(10, 8, 11), float64] */;
  (%127, %128, %var_4388, %var_4389, %129, %130)
}

def @func_4769() -> Tensor[(10, 8, 11), uint16] {
  @func_3641() /* ty=Tensor[(10, 8, 11), uint16] */
}

def @func_3104() -> (Tensor[(10, 8, 11), float32],) {
  %131 = @func_2417() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) */;
  %132 = %131.0;
  (%132,)
}

def @func_7550() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) {
  %133 = @func_5328() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) */;
  %134 = @func_7180() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %135 = %133.1;
  %136 = %134.0;
  (%135, %136)
}

def @func_1645(%var_1633: Tensor[(13, 8, 12), float32]) -> (Tensor[(13, 8, 12), float32], Tensor[(3, 8, 7), bool], Tensor[(168), uint16]) {
  %137 = cast(meta[relay.Constant][8] /* ty=Tensor[(13, 8, 12), float32] */, dtype="float32") /* ty=Tensor[(13, 8, 12), float32] */;
  %138 = shape_of(%var_1633, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(%var_1633, dtype="float32") /* ty=Tensor[(13, 8, 12), float32] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %141 = cast(meta[relay.Constant][9] /* ty=Tensor[(168), uint16] */, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %142 = reshape(%141, newshape=[3, 8, 7]) /* ty=Tensor[(3, 8, 7), uint16] */;
  %143 = @func_900(%142) /* ty=(Tensor[(55), float32], Tensor[(3, 8, 7), bool], Tensor[(11, 10, 5), uint8]) */;
  %144 = floor_mod(%139, %140) /* ty=Tensor[(13, 8, 12), float32] */;
  %145 = %143.1;
  (%144, %145, meta[relay.Constant][9] /* ty=Tensor[(168), uint16] */)
}

def @func_285(%var_278: Tensor[(12, 16, 11), float64], %var_279: Tensor[(12, 16, 11), float64]) -> (Tensor[(12, 16, 11), float64],) {
  %146 = cast(%var_279, dtype="float64") /* ty=Tensor[(12, 16, 11), float64] */;
  %147 = shape_of(%var_278, dtype="int32") /* ty=Tensor[(3), int32] */;
  %148 = cast(%var_278, dtype="float64") /* ty=Tensor[(12, 16, 11), float64] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %150 = mod(%148, %149) /* ty=Tensor[(12, 16, 11), float64] */;
  (%150,)
}

def @func_5432(%var_5406: Tensor[(9, 6, 5), int8], %var_5407: Tensor[(9, 6, 5), int8]) -> (Tensor[(9, 6, 5), bool], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), uint16], Tensor[(10, 8, 11), float32]) {
  %151 = cast(%var_5407, dtype="bool") /* ty=Tensor[(9, 6, 5), bool] */;
  %152 = shape_of(%var_5406, dtype="int32") /* ty=Tensor[(3), int32] */;
  %153 = cast(%var_5406, dtype="bool") /* ty=Tensor[(9, 6, 5), bool] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %155 = @func_5138() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) */;
  %156 = @func_3981() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %157 = greater_equal(%153, %154) /* ty=Tensor[(9, 6, 5), bool] */;
  %158 = %155.0;
  %159 = @func_4769() /* ty=Tensor[(10, 8, 11), uint16] */;
  %160 = %156.0;
  (%157, %158, %159, %160)
}

def @func_5840() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) {
  %161 = @func_2830() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) */;
  %162 = @func_4223() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %163 = %161.1;
  %164 = %162.0;
  (%163, %164)
}

def @func_4809() -> Tensor[(10, 8, 11), float32] {
  %165 = @func_3104() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %165.0
}

def @func_6534() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) {
  %166 = @func_5716() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %167 = @func_4703() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), uint16]) */;
  %168 = %166.0;
  %169 = %167.0;
  (%168, %169)
}

def @func_4223() -> (Tensor[(10, 8, 11), float32],) {
  %170 = @func_2417() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) */;
  %171 = %170.0;
  (%171,)
}

def @func_7417() -> Tensor[(10, 8, 11), float32] {
  %172 = @func_5328() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) */;
  %172.1
}

def @func_5562(%var_5557: Tensor[(12, 10, 13), int32], %var_5558: Tensor[(12, 10, 13), int32]) -> Tensor[(12, 10, 13), bool] {
  %173 = cast(%var_5558, dtype="bool") /* ty=Tensor[(12, 10, 13), bool] */;
  %174 = shape_of(%var_5557, dtype="int32") /* ty=Tensor[(3), int32] */;
  %175 = cast(%var_5557, dtype="bool") /* ty=Tensor[(12, 10, 13), bool] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%175, %176) /* ty=Tensor[(12, 10, 13), bool] */
}

def @func_5768() -> (Tensor[(10, 8, 11), uint16],) {
  %177 = @func_3641() /* ty=Tensor[(10, 8, 11), uint16] */;
  (%177,)
}

def @func_5074() -> Tensor[(10, 8, 11), float32] {
  @func_4189() /* ty=Tensor[(10, 8, 11), float32] */
}

def @func_4898() -> (Tensor[(10, 8, 11), float64],) {
  %178 = @func_4660() /* ty=(Tensor[(10, 8, 11), float64],) */;
  %179 = %178.0;
  (%179,)
}

def @func_900(%var_873: Tensor[(3, 8, 7), uint16]) -> (Tensor[(55), float32], Tensor[(3, 8, 7), bool], Tensor[(11, 10, 5), uint8]) {
  %180 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 8, 7), uint16] */, dtype="bool") /* ty=Tensor[(3, 8, 7), bool] */;
  %181 = shape_of(%var_873, dtype="int32") /* ty=Tensor[(3), int32] */;
  %182 = cast(%var_873, dtype="bool") /* ty=Tensor[(3, 8, 7), bool] */;
  %183 = dyn.reshape(%180, %181, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %184 = not_equal(%182, %183) /* ty=Tensor[(3, 8, 7), bool] */;
  %185 = cast(%184, dtype="bool") /* ty=Tensor[(3, 8, 7), bool] */;
  %186 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(3, 8, 7), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %187 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 8, 7), uint16] */, dtype="bool") /* ty=Tensor[(3, 8, 7), bool] */;
  %188 = dyn.reshape(%185, %186, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %189 = cast(meta[relay.Constant][10] /* ty=Tensor[(55), float32] */, dtype="float32") /* ty=Tensor[(55), float32] */;
  %190 = cast(meta[relay.Constant][12] /* ty=Tensor[(550), float32] */, dtype="float32") /* ty=Tensor[(550), float32] */;
  %191 = reshape(%189, newshape=[11, 1, 5]) /* ty=Tensor[(11, 1, 5), float32] */;
  %192 = reshape(%190, newshape=[11, 10, 5]) /* ty=Tensor[(11, 10, 5), float32] */;
  %193 = @func_159(%191, %192) /* ty=(Tensor[(11, 10, 5), float32], Tensor[(11, 10, 5), float32]) */;
  %194 = %193.1;
  %195 = cast(meta[relay.Constant][12] /* ty=Tensor[(550), float32] */, dtype="uint8") /* ty=Tensor[(550), uint8] */;
  %196 = shape_of(%194, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(%194, dtype="uint8") /* ty=Tensor[(11, 10, 5), uint8] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %199 = less_equal(%187, %188) /* ty=Tensor[(3, 8, 7), bool] */;
  %200 = right_shift(%197, %198) /* ty=Tensor[(11, 10, 5), uint8] */;
  (meta[relay.Constant][10] /* ty=Tensor[(55), float32] */, %199, %200)
}

def @func_4509(%var_4489: uint32, %var_4497: Tensor[(3, 234), float64]) -> (Tensor[(9, 8, 9), uint32], Tensor[(1248), float32], Tensor[(3, 234), float64], Tensor[(104, 12), float32], Tensor[(10, 8, 11), float32]) {
  %201 = cast(%var_4489, dtype="uint32") /* ty=uint32 */;
  %202 = cast(meta[relay.Constant][13] /* ty=Tensor[(9, 8, 9), uint32] */, dtype="uint32") /* ty=Tensor[(9, 8, 9), uint32] */;
  %203 = cast(%var_4497, dtype="float64") /* ty=Tensor[(3, 234), float64] */;
  %204 = cast(meta[relay.Constant][14] /* ty=Tensor[(104, 12), float32] */, dtype="float32") /* ty=Tensor[(104, 12), float32] */;
  %205 = reshape(%203, newshape=[6, 13, 9]) /* ty=Tensor[(6, 13, 9), float64] */;
  %206 = reshape(%204, newshape=[1248]) /* ty=Tensor[(1248), float32] */;
  %207 = @func_2578(%205, %206) /* ty=(Tensor[(13, 8, 12), float32], Tensor[(1248), float32], Tensor[(6, 13, 9), uint8]) */;
  %208 = @func_3498() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %209 = maximum(%201, %202) /* ty=Tensor[(9, 8, 9), uint32] */;
  %210 = %207.1;
  %211 = %208.0;
  (%209, %210, %var_4497, meta[relay.Constant][14] /* ty=Tensor[(104, 12), float32] */, %211)
}

def @func_4643(%var_4634: Tensor[(16, 3, 7), int32], %var_4635: Tensor[(16, 3, 7), int32]) -> Tensor[(16, 3, 7), int32] {
  %212 = cast(%var_4635, dtype="int32") /* ty=Tensor[(16, 3, 7), int32] */;
  %213 = shape_of(%var_4634, dtype="int32") /* ty=Tensor[(3), int32] */;
  %214 = cast(%var_4634, dtype="int32") /* ty=Tensor[(16, 3, 7), int32] */;
  %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  right_shift(%214, %215) /* ty=Tensor[(16, 3, 7), int32] */
}

def @func_6361() -> (Tensor[(10, 8, 11), uint16], Tensor[(10, 8, 11), float32]) {
  %216 = @func_3565() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %217 = @func_3641() /* ty=Tensor[(10, 8, 11), uint16] */;
  %218 = %216.0;
  (%217, %218)
}

def @func_1384(%var_1344: Tensor[(12, 2, 15), uint32], %var_1345: Tensor[(12, 2, 15), uint32]) -> (Tensor[(3, 8, 7), bool], Tensor[(84, 2), uint16], Tensor[(12, 2, 15), bool]) {
  %219 = cast(meta[relay.Constant][15] /* ty=Tensor[(84, 2), uint16] */, dtype="uint16") /* ty=Tensor[(84, 2), uint16] */;
  %220 = reshape(%219, newshape=[3, 8, 7]) /* ty=Tensor[(3, 8, 7), uint16] */;
  %221 = @func_900(%220) /* ty=(Tensor[(55), float32], Tensor[(3, 8, 7), bool], Tensor[(11, 10, 5), uint8]) */;
  %222 = cast(%var_1345, dtype="uint32") /* ty=Tensor[(12, 2, 15), uint32] */;
  %223 = shape_of(%var_1344, dtype="int32") /* ty=Tensor[(3), int32] */;
  %224 = cast(%var_1344, dtype="uint32") /* ty=Tensor[(12, 2, 15), uint32] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %226 = multiply(%224, %225) /* ty=Tensor[(12, 2, 15), uint32] */;
  %227 = cast(%226, dtype="float32") /* ty=Tensor[(12, 2, 15), float32] */;
  %228 = log(%227) /* ty=Tensor[(12, 2, 15), float32] */;
  %229 = cast(%var_1345, dtype="bool") /* ty=Tensor[(12, 2, 15), bool] */;
  %230 = shape_of(%228, dtype="int32") /* ty=Tensor[(3), int32] */;
  %231 = cast(%228, dtype="bool") /* ty=Tensor[(12, 2, 15), bool] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %233 = %221.1;
  %234 = greater(%231, %232) /* ty=Tensor[(12, 2, 15), bool] */;
  (%233, meta[relay.Constant][15] /* ty=Tensor[(84, 2), uint16] */, %234)
}

def @func_3093() -> (Tensor[(10, 8, 11), float32],) {
  %235 = @func_2830() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) */;
  %236 = %235.0;
  (%236,)
}

def @func_6387() -> Tensor[(168), uint16] {
  %237 = @func_2999() /* ty=(Tensor[(11, 10, 5), uint8], Tensor[(168), uint16], Tensor[(11, 10, 5), uint8], Tensor[(10, 8, 11), bool]) */;
  %237.1
}

def @func_1134(%var_1115: Tensor[(8, 6, 4), float32]) -> (Tensor[(8, 6, 4), bool],) {
  %238 = cast(%var_1115, dtype="float32") /* ty=Tensor[(8, 6, 4), float32] */;
  %239 = sin(%238) /* ty=Tensor[(8, 6, 4), float32] */;
  %240 = cast(%var_1115, dtype="bool") /* ty=Tensor[(8, 6, 4), bool] */;
  %241 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %242 = cast(%239, dtype="bool") /* ty=Tensor[(8, 6, 4), bool] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %244 = less_equal(%242, %243) /* ty=Tensor[(8, 6, 4), bool] */;
  (%244,)
}

def @func_3981() -> (Tensor[(10, 8, 11), float32],) {
  %245 = @func_3498() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %246 = %245.0;
  (%246,)
}

def @func_5716() -> (Tensor[(10, 8, 11), float32],) {
  %247 = @func_2675() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %248 = %247.0;
  (%248,)
}

def @func_4966(%var_4928: Tensor[(10, 8, 11), float32], %var_4950: Tensor[(4, 32), float64], %var_4958: Tensor[(2112), float64], %var_4959: Tensor[(168), uint16]) -> (Tensor[(10, 8, 11), int64], Tensor[(10, 8, 11), float32], Tensor[(4, 32), float64], Tensor[(168), uint16], Tensor[(2112), int32]) {
  %249 = @func_3666() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %250 = %249.0;
  %251 = cast(%var_4928, dtype="int64") /* ty=Tensor[(10, 8, 11), int64] */;
  %252 = shape_of(%250, dtype="int32") /* ty=Tensor[(3), int32] */;
  %253 = cast(%250, dtype="int64") /* ty=Tensor[(10, 8, 11), int64] */;
  %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %255 = cast(%var_4950, dtype="float64") /* ty=Tensor[(4, 32), float64] */;
  %256 = minimum(%253, %254) /* ty=Tensor[(10, 8, 11), int64] */;
  %257 = cast(%256, dtype="float32") /* ty=Tensor[(10, 8, 11), float32] */;
  %258 = reshape(%255, newshape=[8, 16]) /* ty=Tensor[(8, 16), float64] */;
  %259 = reshape(%257, newshape=[10, 8, 11]) /* ty=Tensor[(10, 8, 11), float32] */;
  %260 = @func_3794(%258, %259) /* ty=(Tensor[(8, 16), float64], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), bool], Tensor[(10, 8, 11), uint16]) */;
  %261 = cast(%var_4958, dtype="float64") /* ty=Tensor[(2112), float64] */;
  %262 = cast(%var_4958, dtype="float64") /* ty=Tensor[(2112), float64] */;
  %263 = cast(%var_4959, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %264 = reshape(%261, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), float64] */;
  %265 = reshape(%262, newshape=[2112]) /* ty=Tensor[(2112), float64] */;
  %266 = reshape(%263, newshape=[168]) /* ty=Tensor[(168), uint16] */;
  %267 = @func_3438(%264, %265, %266) /* ty=(Tensor[(12, 16, 11), float32], Tensor[(2112), float64], Tensor[(168), uint16], Tensor[(10, 8, 11), bool]) */;
  %268 = %267.1;
  %269 = cast(%var_4958, dtype="int32") /* ty=Tensor[(2112), int32] */;
  %270 = shape_of(%268, dtype="int32") /* ty=Tensor[(1), int32] */;
  %271 = cast(%268, dtype="int32") /* ty=Tensor[(2112), int32] */;
  %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?), int32] */;
  %273 = %260.1;
  %274 = multiply(%271, %272) /* ty=Tensor[(2112), int32] */;
  (%256, %273, %var_4950, %var_4959, %274)
}

def @func_1258(%var_1234: Tensor[(11, 3, 7), uint8], %var_1235: Tensor[(11, 3, 7), uint8], %var_1240: Tensor[(1155), float64], %var_1248: Tensor[(84, 2), uint16]) -> (Tensor[(11, 3, 7), uint8], Tensor[(15, 11, 7), float64], Tensor[(1155), float64], Tensor[(14, 3, 10), float64], Tensor[(420), float64], Tensor[(14, 3, 10), float64], Tensor[(11, 10, 5), uint8], Tensor[(84, 2), uint16]) {
  %275 = cast(%var_1235, dtype="uint8") /* ty=Tensor[(11, 3, 7), uint8] */;
  %276 = shape_of(%var_1234, dtype="int32") /* ty=Tensor[(3), int32] */;
  %277 = cast(%var_1234, dtype="uint8") /* ty=Tensor[(11, 3, 7), uint8] */;
  %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %279 = cast(%var_1240, dtype="float64") /* ty=Tensor[(1155), float64] */;
  %280 = reshape(%279, newshape=[15, 11, 7]) /* ty=Tensor[(15, 11, 7), float64] */;
  %281 = cast(meta[relay.Constant][16] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %282 = reshape(%281, newshape=[14, 3, 10]) /* ty=Tensor[(14, 3, 10), float64] */;
  %283 = @func_1175(%282) /* ty=(Tensor[(14, 3, 10), float64],) */;
  %284 = %283.0;
  %285 = cast(%284, dtype="float64") /* ty=Tensor[(14, 3, 10), float64] */;
  %286 = reshape(%285, newshape=[14, 3, 10]) /* ty=Tensor[(14, 3, 10), float64] */;
  %287 = @func_1175(%286) /* ty=(Tensor[(14, 3, 10), float64],) */;
  %288 = cast(%var_1248, dtype="uint16") /* ty=Tensor[(84, 2), uint16] */;
  %289 = reshape(%288, newshape=[3, 8, 7]) /* ty=Tensor[(3, 8, 7), uint16] */;
  %290 = @func_900(%289) /* ty=(Tensor[(55), float32], Tensor[(3, 8, 7), bool], Tensor[(11, 10, 5), uint8]) */;
  %291 = bitwise_and(%277, %278) /* ty=Tensor[(11, 3, 7), uint8] */;
  %292 = @func_432(%280) /* ty=Tensor[(15, 11, 7), float64] */;
  %293 = %287.0;
  %294 = %290.2;
  (%291, %292, %var_1240, %284, meta[relay.Constant][16] /* ty=Tensor[(420), float64] */, %293, %294, %var_1248)
}

def @func_3565() -> (Tensor[(10, 8, 11), float32],) {
  %295 = @func_3093() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %296 = %295.0;
  (%296,)
}

def @func_7515(%var_7508: Tensor[(5, 14, 13), float32]) -> Tensor[(5, 14, 13), float32] {
  %297 = cast(%var_7508, dtype="float32") /* ty=Tensor[(5, 14, 13), float32] */;
  log10(%297) /* ty=Tensor[(5, 14, 13), float32] */
}

def @func_6751() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) {
  %298 = @func_3485() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %299 = @func_6534() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) */;
  %300 = %298.0;
  %301 = %299.1;
  (%300, %301)
}

def @func_7300(%var_7294: Tensor[(10, 8, 11), float32]) -> (Tensor[(10, 8, 11), uint64],) {
  %302 = @func_5594() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) */;
  %303 = %302.0;
  %304 = cast(%var_7294, dtype="uint64") /* ty=Tensor[(10, 8, 11), uint64] */;
  %305 = shape_of(%303, dtype="int32") /* ty=Tensor[(3), int32] */;
  %306 = cast(%303, dtype="uint64") /* ty=Tensor[(10, 8, 11), uint64] */;
  %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %308 = add(%306, %307) /* ty=Tensor[(10, 8, 11), uint64] */;
  (%308,)
}

def @func_6568(%var_6564: Tensor[(6, 28), uint16]) -> (Tensor[(10, 8, 11), float64], Tensor[(10, 8, 11), float32], Tensor[(55), float32], Tensor[(6, 28), uint16]) {
  %309 = @func_4898() /* ty=(Tensor[(10, 8, 11), float64],) */;
  %310 = @func_3104() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %311 = cast(%var_6564, dtype="uint16") /* ty=Tensor[(6, 28), uint16] */;
  %312 = reshape(%311, newshape=[3, 8, 7]) /* ty=Tensor[(3, 8, 7), uint16] */;
  %313 = @func_900(%312) /* ty=(Tensor[(55), float32], Tensor[(3, 8, 7), bool], Tensor[(11, 10, 5), uint8]) */;
  %314 = %309.0;
  %315 = %310.0;
  %316 = %313.0;
  (%314, %315, %316, %var_6564)
}

def @func_2578(%var_2518: Tensor[(6, 13, 9), float64], %var_2535: Tensor[(1248), float32]) -> (Tensor[(13, 8, 12), float32], Tensor[(1248), float32], Tensor[(6, 13, 9), uint8]) {
  %317 = cast(%var_2535, dtype="float32") /* ty=Tensor[(1248), float32] */;
  %318 = reshape(%317, newshape=[13, 8, 12]) /* ty=Tensor[(13, 8, 12), float32] */;
  %319 = @func_1645(%318) /* ty=(Tensor[(13, 8, 12), float32], Tensor[(3, 8, 7), bool], Tensor[(168), uint16]) */;
  %320 = cast(%var_2518, dtype="float64") /* ty=Tensor[(6, 13, 9), float64] */;
  %321 = asinh(%320) /* ty=Tensor[(6, 13, 9), float64] */;
  %322 = cast(%var_2518, dtype="float64") /* ty=Tensor[(6, 13, 9), float64] */;
  %323 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(6, 13, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %324 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 13, 9), float64] */, dtype="float64") /* ty=Tensor[(6, 13, 9), float64] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %326 = maximum(%324, %325) /* ty=Tensor[(6, 13, 9), float64] */;
  %327 = cast(%326, dtype="uint8") /* ty=Tensor[(6, 13, 9), uint8] */;
  %328 = shape_of(%321, dtype="int32") /* ty=Tensor[(3), int32] */;
  %329 = cast(%321, dtype="uint8") /* ty=Tensor[(6, 13, 9), uint8] */;
  %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %331 = %319.0;
  %332 = bitwise_and(%329, %330) /* ty=Tensor[(6, 13, 9), uint8] */;
  (%331, %var_2535, %332)
}

def @func_2953() -> (Tensor[(10, 8, 11), float32],) {
  %333 = @func_2675() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %334 = %333.0;
  (%334,)
}

def @func_5328() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) {
  %335 = @func_3565() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %336 = %335.0;
  %337 = @func_5074() /* ty=Tensor[(10, 8, 11), float32] */;
  (%336, %337)
}

def @func_4015(%var_4000: Tensor[(1155), float64], %var_4001: Tensor[(168), uint16]) -> (Tensor[(14, 3, 10), float64], Tensor[(231, 1), uint8], Tensor[(1155), float64], Tensor[(168), uint16], Tensor[(12, 4, 10), int64]) {
  %338 = cast(meta[relay.Constant][18] /* ty=Tensor[(231, 1), uint8] */, dtype="uint8") /* ty=Tensor[(231, 1), uint8] */;
  %339 = cast(meta[relay.Constant][18] /* ty=Tensor[(231, 1), uint8] */, dtype="uint8") /* ty=Tensor[(231, 1), uint8] */;
  %340 = cast(%var_4000, dtype="float64") /* ty=Tensor[(1155), float64] */;
  %341 = cast(%var_4001, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %342 = reshape(%338, newshape=[11, 3, 7]) /* ty=Tensor[(11, 3, 7), uint8] */;
  %343 = reshape(%339, newshape=[11, 3, 7]) /* ty=Tensor[(11, 3, 7), uint8] */;
  %344 = reshape(%340, newshape=[1155]) /* ty=Tensor[(1155), float64] */;
  %345 = reshape(%341, newshape=[84, 2]) /* ty=Tensor[(84, 2), uint16] */;
  %346 = @func_1258(%342, %343, %344, %345) /* ty=(Tensor[(11, 3, 7), uint8], Tensor[(15, 11, 7), float64], Tensor[(1155), float64], Tensor[(14, 3, 10), float64], Tensor[(420), float64], Tensor[(14, 3, 10), float64], Tensor[(11, 10, 5), uint8], Tensor[(84, 2), uint16]) */;
  %347 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %348 = cast(meta[relay.Constant][19] /* ty=Tensor[(12, 4, 10), bool] */, dtype="bool") /* ty=Tensor[(12, 4, 10), bool] */;
  %349 = logical_or(%347, %348) /* ty=Tensor[(12, 4, 10), bool] */;
  %350 = cast(%349, dtype="float64") /* ty=Tensor[(12, 4, 10), float64] */;
  %351 = asin(%350) /* ty=Tensor[(12, 4, 10), float64] */;
  %352 = cast(%349, dtype="int64") /* ty=Tensor[(12, 4, 10), int64] */;
  %353 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %354 = cast(%351, dtype="int64") /* ty=Tensor[(12, 4, 10), int64] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %356 = %346.5;
  %357 = multiply(%354, %355) /* ty=Tensor[(12, 4, 10), int64] */;
  (%356, meta[relay.Constant][18] /* ty=Tensor[(231, 1), uint8] */, %var_4000, %var_4001, %357)
}

def @func_6692() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), uint16], Tensor[(10, 8, 11), float64], Tensor[(10, 8, 11), uint16]) {
  %358 = @func_3498() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %359 = @func_4898() /* ty=(Tensor[(10, 8, 11), float64],) */;
  %360 = @func_6361() /* ty=(Tensor[(10, 8, 11), uint16], Tensor[(10, 8, 11), float32]) */;
  %361 = %358.0;
  %362 = @func_4769() /* ty=Tensor[(10, 8, 11), uint16] */;
  %363 = %359.0;
  %364 = %360.0;
  (%361, %362, %363, %364)
}

def @func_7141(%var_7043: Tensor[(1560), uint16], %var_7051: Tensor[(1560), uint16], %var_7057: Tensor[(96, 2), float32]) -> (Tensor[(10, 8, 11), float32], Tensor[(12, 16, 11), float64], Tensor[(8, 6, 4), bool], Tensor[(96, 2), float32], Tensor[(4, 10, 8), float64], Tensor[(1560), float32]) {
  %365 = @func_3485() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %366 = cast(%var_7043, dtype="uint16") /* ty=Tensor[(1560), uint16] */;
  %367 = reshape(%366, newshape=[13, 15, 8]) /* ty=Tensor[(13, 15, 8), uint16] */;
  %368 = @func_734(%367) /* ty=(Tensor[(13, 15, 8), uint16], Tensor[(12, 16, 11), float64], Tensor[(2112), float64], Tensor[(13, 15, 8), float32]) */;
  %369 = cast(%var_7057, dtype="float32") /* ty=Tensor[(96, 2), float32] */;
  %370 = reshape(%369, newshape=[8, 6, 4]) /* ty=Tensor[(8, 6, 4), float32] */;
  %371 = @func_1134(%370) /* ty=(Tensor[(8, 6, 4), bool],) */;
  %372 = cast(meta[relay.Constant][20] /* ty=Tensor[(320), uint8] */, dtype="uint8") /* ty=Tensor[(320), uint8] */;
  %373 = cast(meta[relay.Constant][20] /* ty=Tensor[(320), uint8] */, dtype="uint8") /* ty=Tensor[(320), uint8] */;
  %374 = reshape(%372, newshape=[4, 10, 8]) /* ty=Tensor[(4, 10, 8), uint8] */;
  %375 = reshape(%373, newshape=[4, 10, 8]) /* ty=Tensor[(4, 10, 8), uint8] */;
  %376 = @func_2925(%374, %375) /* ty=(Tensor[(4, 10, 8), bool],) */;
  %377 = %376.0;
  %378 = cast(meta[relay.Constant][20] /* ty=Tensor[(320), uint8] */, dtype="uint32") /* ty=Tensor[(320), uint32] */;
  %379 = shape_of(%377, dtype="int32") /* ty=Tensor[(3), int32] */;
  %380 = cast(%377, dtype="uint32") /* ty=Tensor[(4, 10, 8), uint32] */;
  %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %382 = bitwise_xor(%380, %381) /* ty=Tensor[(4, 10, 8), uint32] */;
  %383 = cast(%382, dtype="bool") /* ty=Tensor[(4, 10, 8), bool] */;
  %384 = shape_of(%377, dtype="int32") /* ty=Tensor[(3), int32] */;
  %385 = cast(%377, dtype="bool") /* ty=Tensor[(4, 10, 8), bool] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %387 = less_equal(%385, %386) /* ty=Tensor[(4, 10, 8), bool] */;
  %388 = cast(%387, dtype="float64") /* ty=Tensor[(4, 10, 8), float64] */;
  %389 = cast(%var_7051, dtype="uint16") /* ty=Tensor[(1560), uint16] */;
  %390 = shape_of(%var_7043, dtype="int32") /* ty=Tensor[(1), int32] */;
  %391 = cast(%var_7043, dtype="uint16") /* ty=Tensor[(1560), uint16] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %393 = left_shift(%391, %392) /* ty=Tensor[(1560), uint16] */;
  %394 = cast(%var_7051, dtype="bool") /* ty=Tensor[(1560), bool] */;
  %395 = shape_of(%393, dtype="int32") /* ty=Tensor[(1), int32] */;
  %396 = cast(%393, dtype="bool") /* ty=Tensor[(1560), bool] */;
  %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?), bool] */;
  %398 = logical_or(%396, %397) /* ty=Tensor[(1560), bool] */;
  %399 = cast(%398, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %400 = shape_of(%393, dtype="int32") /* ty=Tensor[(1), int32] */;
  %401 = cast(%393, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?), float64] */;
  %403 = divide(%401, %402) /* ty=Tensor[(1560), float64] */;
  %404 = cast(%403, dtype="float32") /* ty=Tensor[(1560), float32] */;
  %405 = %365.0;
  %406 = %368.1;
  %407 = %371.0;
  %408 = tan(%388) /* ty=Tensor[(4, 10, 8), float64] */;
  %409 = acosh(%404) /* ty=Tensor[(1560), float32] */;
  (%405, %406, %407, %var_7057, %408, %409)
}

def @func_3078(%var_3045: Tensor[(720), float32], %var_3050: Tensor[(11, 10, 5), uint8], %var_3061: Tensor[(9, 1), float64], %var_3062: Tensor[(1155), float64]) -> (Tensor[(168), uint16], Tensor[(5, 9, 16), float32], Tensor[(720), float32], Tensor[(11, 10, 5), bool], Tensor[(9, 1), float64], Tensor[(1155), float64], Tensor[(1155), float64]) {
  %410 = @func_2787() /* ty=(Tensor[(10, 8, 11), uint16], Tensor[(10, 8, 11), float32], Tensor[(55), float32], Tensor[(168), uint16]) */;
  %411 = cast(%var_3045, dtype="float32") /* ty=Tensor[(720), float32] */;
  %412 = reshape(%411, newshape=[5, 9, 16]) /* ty=Tensor[(5, 9, 16), float32] */;
  %413 = @func_510(%412) /* ty=(Tensor[(5, 9, 16), float32],) */;
  %414 = @func_2999() /* ty=(Tensor[(11, 10, 5), uint8], Tensor[(168), uint16], Tensor[(11, 10, 5), uint8], Tensor[(10, 8, 11), bool]) */;
  %415 = %414.0;
  %416 = cast(%var_3050, dtype="bool") /* ty=Tensor[(11, 10, 5), bool] */;
  %417 = shape_of(%415, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(%415, dtype="bool") /* ty=Tensor[(11, 10, 5), bool] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %420 = cast(%var_3061, dtype="float64") /* ty=Tensor[(9, 1), float64] */;
  %421 = cast(%var_3062, dtype="float64") /* ty=Tensor[(1155), float64] */;
  %422 = reshape(%420, newshape=[3, 3, 1]) /* ty=Tensor[(3, 3, 1), float64] */;
  %423 = reshape(%421, newshape=[1155]) /* ty=Tensor[(1155), float64] */;
  %424 = @func_1890(%422, %423) /* ty=(Tensor[(3, 3, ?), bool], Tensor[(15, 11, 7), float64], Tensor[(1155), float64]) */;
  %425 = %424.2;
  %426 = cast(%425, dtype="float64") /* ty=Tensor[(1155), float64] */;
  %427 = %410.3;
  %428 = %413.0;
  %429 = logical_or(%418, %419) /* ty=Tensor[(11, 10, 5), bool] */;
  %430 = acosh(%426) /* ty=Tensor[(1155), float64] */;
  (%427, %428, %var_3045, %429, %var_3061, %var_3062, %430)
}

def @func_6157() -> Tensor[(10, 8, 11), float64] {
  %431 = @func_2819() /* ty=Tensor[(10, 8, 11), float64] */;
  %432 = cast(%431, dtype="float64") /* ty=Tensor[(10, 8, 11), float64] */;
  rsqrt(%432) /* ty=Tensor[(10, 8, 11), float64] */
}

def @func_2675() -> (Tensor[(10, 8, 11), float32],) {
  %433 = @func_2417() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) */;
  %434 = %433.0;
  (%434,)
}

def @func_3967() -> (Tensor[(10, 8, 11), float32],) {
  %435 = @func_2787() /* ty=(Tensor[(10, 8, 11), uint16], Tensor[(10, 8, 11), float32], Tensor[(55), float32], Tensor[(168), uint16]) */;
  %436 = %435.1;
  (%436,)
}

def @func_432(%var_429: Tensor[(15, 11, 7), float64]) -> Tensor[(15, 11, 7), float64] {
  %437 = cast(%var_429, dtype="float64") /* ty=Tensor[(15, 11, 7), float64] */;
  asin(%437) /* ty=Tensor[(15, 11, 7), float64] */
}

def @func_2787() -> (Tensor[(10, 8, 11), uint16], Tensor[(10, 8, 11), float32], Tensor[(55), float32], Tensor[(168), uint16]) {
  %438 = @func_2417() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) */;
  %439 = %438.0;
  %440 = cast(meta[relay.Constant][21] /* ty=Tensor[(10, 8, 11), float32] */, dtype="uint16") /* ty=Tensor[(10, 8, 11), uint16] */;
  %441 = shape_of(%439, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%439, dtype="uint16") /* ty=Tensor[(10, 8, 11), uint16] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %444 = @func_2417() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) */;
  %445 = cast(meta[relay.Constant][22] /* ty=Tensor[(168), uint16] */, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %446 = reshape(%445, newshape=[6, 28]) /* ty=Tensor[(6, 28), uint16] */;
  %447 = @func_2483(%446) /* ty=(Tensor[(10, 8, 11), float32], Tensor[(55), float32], Tensor[(6, 28), uint16]) */;
  %448 = right_shift(%442, %443) /* ty=Tensor[(10, 8, 11), uint16] */;
  %449 = %444.0;
  %450 = %447.1;
  (%448, %449, %450, meta[relay.Constant][22] /* ty=Tensor[(168), uint16] */)
}

def @func_2999() -> (Tensor[(11, 10, 5), uint8], Tensor[(168), uint16], Tensor[(11, 10, 5), uint8], Tensor[(10, 8, 11), bool]) {
  %451 = cast(meta[relay.Constant][23] /* ty=Tensor[(168), uint16] */, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %452 = reshape(%451, newshape=[168]) /* ty=Tensor[(168), uint16] */;
  %453 = @func_2705(%452) /* ty=(Tensor[(10, 8, 11), float32], Tensor[(11, 10, 5), uint8], Tensor[(168), uint16], Tensor[(15, 11, 7), float64], Tensor[(1155), float64]) */;
  %454 = cast(meta[relay.Constant][23] /* ty=Tensor[(168), uint16] */, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %455 = reshape(%454, newshape=[168]) /* ty=Tensor[(168), uint16] */;
  %456 = @func_2705(%455) /* ty=(Tensor[(10, 8, 11), float32], Tensor[(11, 10, 5), uint8], Tensor[(168), uint16], Tensor[(15, 11, 7), float64], Tensor[(1155), float64]) */;
  %457 = @func_2675() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %458 = %457.0;
  %459 = @func_2675() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %460 = %459.0;
  %461 = cast(%460, dtype="bool") /* ty=Tensor[(10, 8, 11), bool] */;
  %462 = shape_of(%458, dtype="int32") /* ty=Tensor[(3), int32] */;
  %463 = cast(%458, dtype="bool") /* ty=Tensor[(10, 8, 11), bool] */;
  %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %465 = %453.1;
  %466 = %456.1;
  %467 = greater_equal(%463, %464) /* ty=Tensor[(10, 8, 11), bool] */;
  (%465, meta[relay.Constant][23] /* ty=Tensor[(168), uint16] */, %466, %467)
}

def @func_3485() -> (Tensor[(10, 8, 11), float32],) {
  %468 = @func_2953() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %469 = %468.0;
  (%469,)
}

def @func_4660() -> (Tensor[(10, 8, 11), float64],) {
  %470 = @func_2417() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) */;
  %471 = %470.1;
  (%471,)
}

def @func_4703() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), uint16]) {
  %472 = @func_3093() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %473 = %472.0;
  %474 = @func_3641() /* ty=Tensor[(10, 8, 11), uint16] */;
  (%473, %474)
}

def @func_3438(%var_3401: Tensor[(12, 16, 11), float64], %var_3409: Tensor[(2112), float64], %var_3414: Tensor[(168), uint16]) -> (Tensor[(12, 16, 11), float32], Tensor[(2112), float64], Tensor[(168), uint16], Tensor[(10, 8, 11), bool]) {
  %475 = cast(meta[relay.Constant][24] /* ty=Tensor[(2112), float64] */, dtype="float64") /* ty=Tensor[(2112), float64] */;
  %476 = cast(meta[relay.Constant][24] /* ty=Tensor[(2112), float64] */, dtype="float64") /* ty=Tensor[(2112), float64] */;
  %477 = reshape(%475, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), float64] */;
  %478 = reshape(%476, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), float64] */;
  %479 = @func_285(%477, %478) /* ty=(Tensor[(12, 16, 11), float64],) */;
  %480 = %479.0;
  %481 = cast(%var_3401, dtype="float32") /* ty=Tensor[(12, 16, 11), float32] */;
  %482 = shape_of(%480, dtype="int32") /* ty=Tensor[(3), int32] */;
  %483 = cast(%480, dtype="float32") /* ty=Tensor[(12, 16, 11), float32] */;
  %484 = dyn.reshape(%481, %482, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %485 = cast(%var_3409, dtype="float64") /* ty=Tensor[(2112), float64] */;
  %486 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(2112), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %487 = cast(meta[relay.Constant][24] /* ty=Tensor[(2112), float64] */, dtype="float64") /* ty=Tensor[(2112), float64] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?), float64] */;
  %489 = cast(%var_3414, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %490 = reshape(%489, newshape=[6, 28]) /* ty=Tensor[(6, 28), uint16] */;
  %491 = @func_2483(%490) /* ty=(Tensor[(10, 8, 11), float32], Tensor[(55), float32], Tensor[(6, 28), uint16]) */;
  %492 = %491.0;
  %493 = @func_3093() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %494 = %493.0;
  %495 = cast(%494, dtype="bool") /* ty=Tensor[(10, 8, 11), bool] */;
  %496 = shape_of(%492, dtype="int32") /* ty=Tensor[(3), int32] */;
  %497 = cast(%492, dtype="bool") /* ty=Tensor[(10, 8, 11), bool] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %499 = floor_mod(%483, %484) /* ty=Tensor[(12, 16, 11), float32] */;
  %500 = minimum(%487, %488) /* ty=Tensor[(2112), float64] */;
  %501 = greater(%497, %498) /* ty=Tensor[(10, 8, 11), bool] */;
  (%499, %500, %var_3414, %501)
}

def @func_3974() -> Tensor[(10, 8, 11), float32] {
  %502 = @func_3565() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %502.0
}

def @func_4338(%var_4237: Tensor[(8, 16, 15), float32], %var_4304: Tensor[(2112), float64]) -> (Tensor[(10, 8, 11), float64], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32], Tensor[(12, 16, 11), float64], Tensor[(2112), float64], Tensor[(8, 16, 15), float64], Tensor[(10, 8, 11), float32]) {
  %503 = @func_3498() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %504 = @func_3104() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %505 = cast(%var_4304, dtype="float64") /* ty=Tensor[(2112), float64] */;
  %506 = cast(%var_4304, dtype="float64") /* ty=Tensor[(2112), float64] */;
  %507 = reshape(%505, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), float64] */;
  %508 = reshape(%506, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), float64] */;
  %509 = @func_285(%507, %508) /* ty=(Tensor[(12, 16, 11), float64],) */;
  %510 = cast(%var_4237, dtype="float32") /* ty=Tensor[(8, 16, 15), float32] */;
  %511 = tan(%510) /* ty=Tensor[(8, 16, 15), float32] */;
  %512 = cast(%var_4237, dtype="float32") /* ty=Tensor[(8, 16, 15), float32] */;
  %513 = asin(%512) /* ty=Tensor[(8, 16, 15), float32] */;
  %514 = cast(%513, dtype="float64") /* ty=Tensor[(8, 16, 15), float64] */;
  %515 = acos(%514) /* ty=Tensor[(8, 16, 15), float64] */;
  %516 = cast(%var_4237, dtype="int16") /* ty=Tensor[(8, 16, 15), int16] */;
  %517 = shape_of(%515, dtype="int32") /* ty=Tensor[(3), int32] */;
  %518 = cast(%515, dtype="int16") /* ty=Tensor[(8, 16, 15), int16] */;
  %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %520 = logical_xor(%518, %519) /* ty=Tensor[(8, 16, 15), int16] */;
  %521 = cast(%var_4237, dtype="bool") /* ty=Tensor[(8, 16, 15), bool] */;
  %522 = shape_of(%520, dtype="int32") /* ty=Tensor[(3), int32] */;
  %523 = cast(%520, dtype="bool") /* ty=Tensor[(8, 16, 15), bool] */;
  %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %525 = equal(%523, %524) /* ty=Tensor[(8, 16, 15), bool] */;
  %526 = cast(%525, dtype="bool") /* ty=Tensor[(8, 16, 15), bool] */;
  %527 = shape_of(%511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %528 = cast(%511, dtype="bool") /* ty=Tensor[(8, 16, 15), bool] */;
  %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %530 = logical_and(%528, %529) /* ty=Tensor[(8, 16, 15), bool] */;
  %531 = cast(%530, dtype="float64") /* ty=Tensor[(8, 16, 15), float64] */;
  %532 = @func_3565() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %533 = @func_2819() /* ty=Tensor[(10, 8, 11), float64] */;
  %534 = %503.0;
  %535 = %504.0;
  %536 = %509.0;
  %537 = log10(%531) /* ty=Tensor[(8, 16, 15), float64] */;
  %538 = %532.0;
  (%533, %534, %535, %536, %var_4304, %537, %538)
}

def @func_159(%var_109: Tensor[(11, 1, 5), float32], %var_110: Tensor[(11, 10, 5), float32]) -> (Tensor[(11, 10, 5), float32], Tensor[(11, 10, 5), float32]) {
  %539 = cast(%var_109, dtype="float32") /* ty=Tensor[(11, 1, 5), float32] */;
  %540 = cast(%var_110, dtype="float32") /* ty=Tensor[(11, 10, 5), float32] */;
  %541 = cast(%var_109, dtype="float32") /* ty=Tensor[(11, 1, 5), float32] */;
  %542 = cast(%var_110, dtype="float32") /* ty=Tensor[(11, 10, 5), float32] */;
  %543 = divide(%539, %540) /* ty=Tensor[(11, 10, 5), float32] */;
  %544 = floor_divide(%541, %542) /* ty=Tensor[(11, 10, 5), float32] */;
  (%543, %544)
}

def @func_328(%var_308: Tensor[(5, 12, 14), float64]) -> (Tensor[(5, 12, 14), float64],) {
  %545 = cast(%var_308, dtype="float64") /* ty=Tensor[(5, 12, 14), float64] */;
  %546 = asinh(%545) /* ty=Tensor[(5, 12, 14), float64] */;
  (%546,)
}

def @func_4058(%var_4049: Tensor[(1, 420), float64]) -> (Tensor[(11, 10, 5), uint8], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32], Tensor[(14, 3, 10), float64], Tensor[(1, 420), float64], Tensor[(10, 8, 11), float32]) {
  %547 = @func_2999() /* ty=(Tensor[(11, 10, 5), uint8], Tensor[(168), uint16], Tensor[(11, 10, 5), uint8], Tensor[(10, 8, 11), bool]) */;
  %548 = @func_3498() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %549 = @func_2675() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %550 = cast(%var_4049, dtype="float64") /* ty=Tensor[(1, 420), float64] */;
  %551 = reshape(%550, newshape=[14, 3, 10]) /* ty=Tensor[(14, 3, 10), float64] */;
  %552 = @func_1175(%551) /* ty=(Tensor[(14, 3, 10), float64],) */;
  %553 = @func_3967() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %554 = %547.2;
  %555 = %548.0;
  %556 = %549.0;
  %557 = %552.0;
  %558 = %553.0;
  (%554, %555, %556, %557, %var_4049, %558)
}

def @func_3250(%var_3175: Tensor[(420), float64], %var_3178: Tensor[(360), uint32], %var_3185: Tensor[(10, 8, 11), float64], %var_3221: Tensor[(234, 3), float64], %var_3247: Tensor[(168), uint16]) -> (Tensor[(14, 3, 10), float64], Tensor[(420), float64], Tensor[(10, 8, 11), bool], Tensor[(12, 2, 15), uint32], Tensor[(8, 6, 4), bool], Tensor[(192), float32], Tensor[(12, 16, 11), float64], Tensor[(2112), float64], Tensor[(10, 8, 11), float32], Tensor[(6, 13, 9), uint8], Tensor[(234, 3), float64], Tensor[(1248), float32], Tensor[(55), float32], Tensor[(168), uint16]) {
  %559 = cast(%var_3175, dtype="float64") /* ty=Tensor[(420), float64] */;
  %560 = reshape(%559, newshape=[14, 3, 10]) /* ty=Tensor[(14, 3, 10), float64] */;
  %561 = @func_1175(%560) /* ty=(Tensor[(14, 3, 10), float64],) */;
  %562 = @func_2417() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) */;
  %563 = %562.1;
  %564 = cast(%var_3185, dtype="bool") /* ty=Tensor[(10, 8, 11), bool] */;
  %565 = shape_of(%563, dtype="int32") /* ty=Tensor[(3), int32] */;
  %566 = cast(%563, dtype="bool") /* ty=Tensor[(10, 8, 11), bool] */;
  %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %568 = cast(%var_3178, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %569 = cast(%var_3178, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %570 = reshape(%568, newshape=[12, 2, 15]) /* ty=Tensor[(12, 2, 15), uint32] */;
  %571 = reshape(%569, newshape=[12, 2, 15]) /* ty=Tensor[(12, 2, 15), uint32] */;
  %572 = @func_1384(%570, %571) /* ty=(Tensor[(3, 8, 7), bool], Tensor[(84, 2), uint16], Tensor[(12, 2, 15), bool]) */;
  %573 = %572.2;
  %574 = cast(%var_3178, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %575 = shape_of(%573, dtype="int32") /* ty=Tensor[(3), int32] */;
  %576 = cast(%573, dtype="uint32") /* ty=Tensor[(12, 2, 15), uint32] */;
  %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %578 = cast(meta[relay.Constant][25] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %579 = reshape(%578, newshape=[8, 6, 4]) /* ty=Tensor[(8, 6, 4), float32] */;
  %580 = @func_1134(%579) /* ty=(Tensor[(8, 6, 4), bool],) */;
  %581 = cast(meta[relay.Constant][26] /* ty=Tensor[(2112), float64] */, dtype="float64") /* ty=Tensor[(2112), float64] */;
  %582 = cast(meta[relay.Constant][26] /* ty=Tensor[(2112), float64] */, dtype="float64") /* ty=Tensor[(2112), float64] */;
  %583 = reshape(%581, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), float64] */;
  %584 = reshape(%582, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), float64] */;
  %585 = @func_285(%583, %584) /* ty=(Tensor[(12, 16, 11), float64],) */;
  %586 = @func_2675() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %587 = cast(%var_3221, dtype="float64") /* ty=Tensor[(234, 3), float64] */;
  %588 = cast(meta[relay.Constant][27] /* ty=Tensor[(1248), float32] */, dtype="float32") /* ty=Tensor[(1248), float32] */;
  %589 = reshape(%587, newshape=[6, 13, 9]) /* ty=Tensor[(6, 13, 9), float64] */;
  %590 = reshape(%588, newshape=[1248]) /* ty=Tensor[(1248), float32] */;
  %591 = @func_2578(%589, %590) /* ty=(Tensor[(13, 8, 12), float32], Tensor[(1248), float32], Tensor[(6, 13, 9), uint8]) */;
  %592 = cast(%var_3247, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %593 = reshape(%592, newshape=[3, 8, 7]) /* ty=Tensor[(3, 8, 7), uint16] */;
  %594 = @func_900(%593) /* ty=(Tensor[(55), float32], Tensor[(3, 8, 7), bool], Tensor[(11, 10, 5), uint8]) */;
  %595 = %561.0;
  %596 = equal(%566, %567) /* ty=Tensor[(10, 8, 11), bool] */;
  %597 = subtract(%576, %577) /* ty=Tensor[(12, 2, 15), uint32] */;
  %598 = %580.0;
  %599 = %585.0;
  %600 = %586.0;
  %601 = %591.2;
  %602 = %594.0;
  (%595, %var_3175, %596, %597, %598, meta[relay.Constant][25] /* ty=Tensor[(192), float32] */, %599, meta[relay.Constant][26] /* ty=Tensor[(2112), float64] */, %600, %601, %var_3221, meta[relay.Constant][27] /* ty=Tensor[(1248), float32] */, %602, %var_3247)
}

def @func_6915(%var_6834: Tensor[(1560), uint16], %var_6872: Tensor[(10, 8, 11), float32], %var_6909: Tensor[(1155), float64]) -> (Tensor[(10, 8, 11), uint16], Tensor[(10, 8, 11), float32], Tensor[(1560), uint16], Tensor[(55), float32], Tensor[(84, 26), uint32], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), bool], Tensor[(10, 8, 11), float32], Tensor[(15, 11, 7), float64], Tensor[(3, 3), float64], Tensor[(1155), float64]) {
  %603 = @func_6692() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), uint16], Tensor[(10, 8, 11), float64], Tensor[(10, 8, 11), uint16]) */;
  %604 = @func_3104() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %605 = cast(meta[relay.Constant][29] /* ty=Tensor[(84, 26), float64] */, dtype="float64") /* ty=Tensor[(84, 26), float64] */;
  %606 = cast(%var_6834, dtype="uint16") /* ty=Tensor[(1560), uint16] */;
  %607 = cast(meta[relay.Constant][28] /* ty=Tensor[(55), float32] */, dtype="float32") /* ty=Tensor[(55), float32] */;
  %608 = reshape(%605, newshape=[12, 14, 13]) /* ty=Tensor[(12, 14, 13), float64] */;
  %609 = reshape(%606, newshape=[1560, 1]) /* ty=Tensor[(1560, 1), uint16] */;
  %610 = reshape(%607, newshape=[55]) /* ty=Tensor[(55), float32] */;
  %611 = @func_3305(%608, %609, %610) /* ty=(Tensor[(12, 14, 13), float64], Tensor[(13, 15, 8), uint16], Tensor[(1560, 1), uint16], Tensor[(11, 10, 5), float32], Tensor[(55), float32], Tensor[(275, 2), float32]) */;
  %612 = %611.0;
  %613 = cast(%612, dtype="uint32") /* ty=Tensor[(12, 14, 13), uint32] */;
  %614 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(84, 26), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %615 = cast(meta[relay.Constant][29] /* ty=Tensor[(84, 26), float64] */, dtype="uint32") /* ty=Tensor[(84, 26), uint32] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %617 = @func_2787() /* ty=(Tensor[(10, 8, 11), uint16], Tensor[(10, 8, 11), float32], Tensor[(55), float32], Tensor[(168), uint16]) */;
  %618 = @func_2417() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) */;
  %619 = %618.0;
  %620 = cast(%var_6872, dtype="bool") /* ty=Tensor[(10, 8, 11), bool] */;
  %621 = shape_of(%619, dtype="int32") /* ty=Tensor[(3), int32] */;
  %622 = cast(%619, dtype="bool") /* ty=Tensor[(10, 8, 11), bool] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %624 = cast(meta[relay.Constant][30] /* ty=Tensor[(3, 3), float64] */, dtype="float64") /* ty=Tensor[(3, 3), float64] */;
  %625 = cast(%var_6909, dtype="float64") /* ty=Tensor[(1155), float64] */;
  %626 = reshape(%624, newshape=[3, 3, 1]) /* ty=Tensor[(3, 3, 1), float64] */;
  %627 = reshape(%625, newshape=[1155]) /* ty=Tensor[(1155), float64] */;
  %628 = @func_1890(%626, %627) /* ty=(Tensor[(3, 3, ?), bool], Tensor[(15, 11, 7), float64], Tensor[(1155), float64]) */;
  %629 = %603.3;
  %630 = %604.0;
  %631 = logical_xor(%615, %616) /* ty=Tensor[(84, 26), uint32] */;
  %632 = @func_4809() /* ty=Tensor[(10, 8, 11), float32] */;
  %633 = %617.1;
  %634 = logical_and(%622, %623) /* ty=Tensor[(10, 8, 11), bool] */;
  %635 = @func_4724() /* ty=Tensor[(10, 8, 11), float32] */;
  %636 = %628.1;
  (%629, %630, %var_6834, meta[relay.Constant][28] /* ty=Tensor[(55), float32] */, %631, %632, %633, %634, %635, %636, meta[relay.Constant][30] /* ty=Tensor[(3, 3), float64] */, %var_6909)
}

def @main(%var_7553: Tensor[(1, 13, 1), float64]) -> (Tensor[(10, 8, 11), uint16], Tensor[(?, 13, ?), float64]) {
  %637 = cast(%var_7553, dtype="float64") /* ty=Tensor[(1, 13, 1), float64] */;
  %638 = erf(%637) /* ty=Tensor[(1, 13, 1), float64] */;
  %639 = cast(%var_7553, dtype="float64") /* ty=Tensor[(1, 13, 1), float64] */;
  %640 = shape_of(%638, dtype="int32") /* ty=Tensor[(3), int32] */;
  %641 = cast(%638, dtype="float64") /* ty=Tensor[(1, 13, 1), float64] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %643 = floor_divide(%641, %642) /* ty=Tensor[(?, 13, ?), float64] */;
  %644 = cast(%643, dtype="float64") /* ty=Tensor[(?, 13, ?), float64] */;
  %645 = @func_3641() /* ty=Tensor[(10, 8, 11), uint16] */;
  %646 = asinh(%644) /* ty=Tensor[(?, 13, ?), float64] */;
  (%645, %646)
}

def @func_4189() -> Tensor[(10, 8, 11), float32] {
  %647 = @func_3093() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %647.0
}

def @func_1890(%var_1855: Tensor[(3, 3, 1), float64], %var_1863: Tensor[(1155), float64]) -> (Tensor[(3, 3, ?), bool], Tensor[(15, 11, 7), float64], Tensor[(1155), float64]) {
  %648 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 3, 1), float64] */, dtype="bool") /* ty=Tensor[(3, 3, 1), bool] */;
  %649 = shape_of(%var_1855, dtype="int32") /* ty=Tensor[(3), int32] */;
  %650 = cast(%var_1855, dtype="bool") /* ty=Tensor[(3, 3, 1), bool] */;
  %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %652 = cast(%var_1863, dtype="float64") /* ty=Tensor[(1155), float64] */;
  %653 = reshape(%652, newshape=[15, 11, 7]) /* ty=Tensor[(15, 11, 7), float64] */;
  %654 = greater_equal(%650, %651) /* ty=Tensor[(3, 3, ?), bool] */;
  %655 = @func_432(%653) /* ty=Tensor[(15, 11, 7), float64] */;
  (%654, %655, %var_1863)
}

def @func_5496(%var_5466: Tensor[(13, 7, 4), float64]) -> (Tensor[(13, 7, 4), float64], Tensor[(10, 8, 11), float32]) {
  %656 = cast(%var_5466, dtype="float64") /* ty=Tensor[(13, 7, 4), float64] */;
  %657 = atanh(%656) /* ty=Tensor[(13, 7, 4), float64] */;
  %658 = @func_4724() /* ty=Tensor[(10, 8, 11), float32] */;
  (%657, %658)
}

def @func_6128(%var_6000: Tensor[(780, 2), int32], %var_6086: float64, %var_6089: Tensor[(780, 2), float64]) -> (Tensor[(10, 8, 11), float32], Tensor[(780, 2), float32], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32], Tensor[(11, 6, 6), float64], Tensor[(780, 2), float32], Tensor[(780, 2), float32], Tensor[(780, 2), float32], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) {
  %659 = cast(%var_6000, dtype="int32") /* ty=Tensor[(780, 2), int32] */;
  %660 = cast(%var_6000, dtype="int32") /* ty=Tensor[(780, 2), int32] */;
  %661 = reshape(%659, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), int32] */;
  %662 = reshape(%660, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), int32] */;
  %663 = @func_5562(%661, %662) /* ty=Tensor[(12, 10, 13), bool] */;
  %664 = cast(%663, dtype="float32") /* ty=Tensor[(12, 10, 13), float32] */;
  %665 = shape_of(%var_6000, dtype="int32") /* ty=Tensor[(2), int32] */;
  %666 = cast(%var_6000, dtype="float32") /* ty=Tensor[(780, 2), float32] */;
  %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %668 = cast(%var_6086, dtype="float64") /* ty=float64 */;
  %669 = reshape(%668, newshape=[]) /* ty=float64 */;
  %670 = @func_3591(%669) /* ty=(Tensor[(11, 6, 6), float64],) */;
  %671 = cast(%663, dtype="float64") /* ty=Tensor[(12, 10, 13), float64] */;
  %672 = shape_of(%var_6000, dtype="int32") /* ty=Tensor[(2), int32] */;
  %673 = cast(%var_6000, dtype="float64") /* ty=Tensor[(780, 2), float64] */;
  %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %675 = maximum(%673, %674) /* ty=Tensor[(780, 2), float64] */;
  %676 = cast(%675, dtype="float64") /* ty=Tensor[(780, 2), float64] */;
  %677 = asinh(%676) /* ty=Tensor[(780, 2), float64] */;
  %678 = cast(%677, dtype="float64") /* ty=Tensor[(780, 2), float64] */;
  %679 = atanh(%678) /* ty=Tensor[(780, 2), float64] */;
  %680 = cast(%var_6089, dtype="float32") /* ty=Tensor[(780, 2), float32] */;
  %681 = shape_of(%679, dtype="int32") /* ty=Tensor[(2), int32] */;
  %682 = cast(%679, dtype="float32") /* ty=Tensor[(780, 2), float32] */;
  %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %684 = cast(%677, dtype="float32") /* ty=Tensor[(780, 2), float32] */;
  %685 = cast(%677, dtype="float32") /* ty=Tensor[(780, 2), float32] */;
  %686 = cast(%var_6086, dtype="float32") /* ty=float32 */;
  %687 = @func_3687() /* ty=Tensor[(10, 8, 11), float32] */;
  %688 = mod(%666, %667) /* ty=Tensor[(780, 2), float32] */;
  %689 = @func_4809() /* ty=Tensor[(10, 8, 11), float32] */;
  %690 = @func_4809() /* ty=Tensor[(10, 8, 11), float32] */;
  %691 = %670.0;
  %692 = divide(%682, %683) /* ty=Tensor[(780, 2), float32] */;
  %693 = acos(%684) /* ty=Tensor[(780, 2), float32] */;
  %694 = minimum(%685, %686) /* ty=Tensor[(780, 2), float32] */;
  %695 = @func_3687() /* ty=Tensor[(10, 8, 11), float32] */;
  %696 = @func_3974() /* ty=Tensor[(10, 8, 11), float32] */;
  (%687, %688, %689, %690, %691, %692, %693, %694, %695, %696)
}

def @func_6211(%var_6174: Tensor[(168), uint16], %var_6190: Tensor[(270), int8]) -> (Tensor[(10, 8, 11), float32], Tensor[(168), uint16], Tensor[(10, 8, 11), float32], Tensor[(270), int8], Tensor[(3, 8, 7), float64]) {
  %697 = cast(%var_6190, dtype="int8") /* ty=Tensor[(270), int8] */;
  %698 = cast(%var_6190, dtype="int8") /* ty=Tensor[(270), int8] */;
  %699 = reshape(%697, newshape=[9, 6, 5]) /* ty=Tensor[(9, 6, 5), int8] */;
  %700 = reshape(%698, newshape=[9, 6, 5]) /* ty=Tensor[(9, 6, 5), int8] */;
  %701 = @func_5432(%699, %700) /* ty=(Tensor[(9, 6, 5), bool], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), uint16], Tensor[(10, 8, 11), float32]) */;
  %702 = cast(%var_6174, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %703 = reshape(%702, newshape=[42, 4]) /* ty=Tensor[(42, 4), uint16] */;
  %704 = @func_2622(%703) /* ty=(Tensor[(3, 8, 7), bool], Tensor[(42, 4), uint16], Tensor[(10, 8, 11), float64]) */;
  %705 = %704.0;
  %706 = cast(%705, dtype="float64") /* ty=Tensor[(3, 8, 7), float64] */;
  %707 = @func_4809() /* ty=Tensor[(10, 8, 11), float32] */;
  %708 = %701.1;
  %709 = sqrt(%706) /* ty=Tensor[(3, 8, 7), float64] */;
  (%707, %var_6174, %708, %var_6190, %709)
}

def @func_2622(%var_2590: Tensor[(42, 4), uint16]) -> (Tensor[(3, 8, 7), bool], Tensor[(42, 4), uint16], Tensor[(10, 8, 11), float64]) {
  %710 = cast(%var_2590, dtype="uint16") /* ty=Tensor[(42, 4), uint16] */;
  %711 = reshape(%710, newshape=[3, 8, 7]) /* ty=Tensor[(3, 8, 7), uint16] */;
  %712 = @func_900(%711) /* ty=(Tensor[(55), float32], Tensor[(3, 8, 7), bool], Tensor[(11, 10, 5), uint8]) */;
  %713 = @func_2417() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) */;
  %714 = %713.1;
  %715 = cast(%714, dtype="float64") /* ty=Tensor[(10, 8, 11), float64] */;
  %716 = %712.1;
  %717 = sin(%715) /* ty=Tensor[(10, 8, 11), float64] */;
  (%716, %var_2590, %717)
}

def @func_6612(%var_6584: Tensor[(15, 6, 14), float64]) -> (Tensor[(10, 8, 11), float32], Tensor[(15, 6, 14), bool]) {
  %718 = @func_3981() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %719 = cast(%var_6584, dtype="float64") /* ty=Tensor[(15, 6, 14), float64] */;
  %720 = exp(%719) /* ty=Tensor[(15, 6, 14), float64] */;
  %721 = cast(%720, dtype="float64") /* ty=Tensor[(15, 6, 14), float64] */;
  %722 = atanh(%721) /* ty=Tensor[(15, 6, 14), float64] */;
  %723 = cast(%722, dtype="bool") /* ty=Tensor[(15, 6, 14), bool] */;
  %724 = shape_of(%720, dtype="int32") /* ty=Tensor[(3), int32] */;
  %725 = cast(%720, dtype="bool") /* ty=Tensor[(15, 6, 14), bool] */;
  %726 = dyn.reshape(%723, %724, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %727 = %718.0;
  %728 = logical_or(%725, %726) /* ty=Tensor[(15, 6, 14), bool] */;
  (%727, %728)
}

def @func_3498() -> (Tensor[(10, 8, 11), float32],) {
  %729 = @func_2953() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %730 = %729.0;
  (%730,)
}

def @func_3305(%var_3277: Tensor[(12, 14, 13), float64], %var_3282: Tensor[(1560, 1), uint16], %var_3298: Tensor[(55), float32]) -> (Tensor[(12, 14, 13), float64], Tensor[(13, 15, 8), uint16], Tensor[(1560, 1), uint16], Tensor[(11, 10, 5), float32], Tensor[(55), float32], Tensor[(275, 2), float32]) {
  %731 = cast(-5.84401f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %732 = cast(%var_3277, dtype="float64") /* ty=Tensor[(12, 14, 13), float64] */;
  %733 = cast(%var_3282, dtype="uint16") /* ty=Tensor[(1560, 1), uint16] */;
  %734 = reshape(%733, newshape=[13, 15, 8]) /* ty=Tensor[(13, 15, 8), uint16] */;
  %735 = @func_734(%734) /* ty=(Tensor[(13, 15, 8), uint16], Tensor[(12, 16, 11), float64], Tensor[(2112), float64], Tensor[(13, 15, 8), float32]) */;
  %736 = cast(%var_3298, dtype="float32") /* ty=Tensor[(55), float32] */;
  %737 = cast(meta[relay.Constant][32] /* ty=Tensor[(275, 2), float32] */, dtype="float32") /* ty=Tensor[(275, 2), float32] */;
  %738 = reshape(%736, newshape=[11, 1, 5]) /* ty=Tensor[(11, 1, 5), float32] */;
  %739 = reshape(%737, newshape=[11, 10, 5]) /* ty=Tensor[(11, 10, 5), float32] */;
  %740 = @func_159(%738, %739) /* ty=(Tensor[(11, 10, 5), float32], Tensor[(11, 10, 5), float32]) */;
  %741 = cast(meta[relay.Constant][32] /* ty=Tensor[(275, 2), float32] */, dtype="float32") /* ty=Tensor[(275, 2), float32] */;
  %742 = divide(%731, %732) /* ty=Tensor[(12, 14, 13), float64] */;
  %743 = %735.0;
  %744 = %740.0;
  %745 = erf(%741) /* ty=Tensor[(275, 2), float32] */;
  (%742, %743, %var_3282, %744, %var_3298, %745)
}

def @func_2925(%var_2920: Tensor[(4, 10, 8), uint8], %var_2921: Tensor[(4, 10, 8), uint8]) -> (Tensor[(4, 10, 8), bool],) {
  %746 = cast(%var_2921, dtype="bool") /* ty=Tensor[(4, 10, 8), bool] */;
  %747 = shape_of(%var_2920, dtype="int32") /* ty=Tensor[(3), int32] */;
  %748 = cast(%var_2920, dtype="bool") /* ty=Tensor[(4, 10, 8), bool] */;
  %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %750 = less(%748, %749) /* ty=Tensor[(4, 10, 8), bool] */;
  (%750,)
}

def @func_2705(%var_2680: Tensor[(168), uint16]) -> (Tensor[(10, 8, 11), float32], Tensor[(11, 10, 5), uint8], Tensor[(168), uint16], Tensor[(15, 11, 7), float64], Tensor[(1155), float64]) {
  %751 = @func_2675() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %752 = cast(%var_2680, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %753 = reshape(%752, newshape=[3, 8, 7]) /* ty=Tensor[(3, 8, 7), uint16] */;
  %754 = @func_900(%753) /* ty=(Tensor[(55), float32], Tensor[(3, 8, 7), bool], Tensor[(11, 10, 5), uint8]) */;
  %755 = cast(meta[relay.Constant][33] /* ty=Tensor[(1155), float64] */, dtype="float64") /* ty=Tensor[(1155), float64] */;
  %756 = reshape(%755, newshape=[15, 11, 7]) /* ty=Tensor[(15, 11, 7), float64] */;
  %757 = %751.0;
  %758 = %754.2;
  %759 = @func_432(%756) /* ty=Tensor[(15, 11, 7), float64] */;
  (%757, %758, %var_2680, %759, meta[relay.Constant][33] /* ty=Tensor[(1155), float64] */)
}

def @func_3687() -> Tensor[(10, 8, 11), float32] {
  %760 = @func_3093() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %760.0
}

def @func_734(%var_717: Tensor[(13, 15, 8), uint16]) -> (Tensor[(13, 15, 8), uint16], Tensor[(12, 16, 11), float64], Tensor[(2112), float64], Tensor[(13, 15, 8), float32]) {
  %761 = cast(meta[relay.Constant][34] /* ty=Tensor[(13, 15, 8), uint16] */, dtype="uint16") /* ty=Tensor[(13, 15, 8), uint16] */;
  %762 = shape_of(%var_717, dtype="int32") /* ty=Tensor[(3), int32] */;
  %763 = cast(%var_717, dtype="uint16") /* ty=Tensor[(13, 15, 8), uint16] */;
  %764 = dyn.reshape(%761, %762, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %765 = cast(meta[relay.Constant][35] /* ty=Tensor[(2112), float64] */, dtype="float64") /* ty=Tensor[(2112), float64] */;
  %766 = cast(meta[relay.Constant][35] /* ty=Tensor[(2112), float64] */, dtype="float64") /* ty=Tensor[(2112), float64] */;
  %767 = reshape(%765, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), float64] */;
  %768 = reshape(%766, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), float64] */;
  %769 = @func_285(%767, %768) /* ty=(Tensor[(12, 16, 11), float64],) */;
  %770 = cast(meta[relay.Constant][34] /* ty=Tensor[(13, 15, 8), uint16] */, dtype="float32") /* ty=Tensor[(13, 15, 8), float32] */;
  %771 = shape_of(%var_717, dtype="int32") /* ty=Tensor[(3), int32] */;
  %772 = cast(%var_717, dtype="float32") /* ty=Tensor[(13, 15, 8), float32] */;
  %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %774 = subtract(%763, %764) /* ty=Tensor[(13, 15, 8), uint16] */;
  %775 = %769.0;
  %776 = floor_divide(%772, %773) /* ty=Tensor[(13, 15, 8), float32] */;
  (%774, %775, meta[relay.Constant][35] /* ty=Tensor[(2112), float64] */, %776)
}

def @func_1539(%var_1513: Tensor[(16, 2, 10), int64]) -> (Tensor[(16, 2, 10), bool],) {
  %777 = cast(%var_1513, dtype="bool") /* ty=Tensor[(16, 2, 10), bool] */;
  %778 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(16, 2, 10), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %779 = cast(meta[relay.Constant][36] /* ty=Tensor[(16, 2, 10), int64] */, dtype="bool") /* ty=Tensor[(16, 2, 10), bool] */;
  %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %781 = greater_equal(%779, %780) /* ty=Tensor[(16, 2, 10), bool] */;
  %782 = cast(%var_1513, dtype="uint64") /* ty=Tensor[(16, 2, 10), uint64] */;
  %783 = shape_of(%781, dtype="int32") /* ty=Tensor[(3), int32] */;
  %784 = cast(%781, dtype="uint64") /* ty=Tensor[(16, 2, 10), uint64] */;
  %785 = dyn.reshape(%782, %783, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %786 = right_shift(%784, %785) /* ty=Tensor[(16, 2, 10), uint64] */;
  %787 = cast(%781, dtype="bool") /* ty=Tensor[(16, 2, 10), bool] */;
  %788 = shape_of(%786, dtype="int32") /* ty=Tensor[(3), int32] */;
  %789 = cast(%786, dtype="bool") /* ty=Tensor[(16, 2, 10), bool] */;
  %790 = dyn.reshape(%787, %788, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %791 = greater(%789, %790) /* ty=Tensor[(16, 2, 10), bool] */;
  (%791,)
}

def @func_510(%var_486: Tensor[(5, 9, 16), float32]) -> (Tensor[(5, 9, 16), float32],) {
  %792 = cast(%var_486, dtype="float32") /* ty=Tensor[(5, 9, 16), float32] */;
  %793 = acosh(%792) /* ty=Tensor[(5, 9, 16), float32] */;
  (%793,)
}

def @func_6714() -> Tensor[(10, 8, 11), float32] {
  %794 = @func_3666() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %794.0
}

def @func_3666() -> (Tensor[(10, 8, 11), float32],) {
  %795 = @func_2953() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %796 = %795.0;
  (%796,)
}

def @func_7271() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) {
  %797 = @func_6963() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %798 = @func_7016() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %799 = %797.0;
  %800 = %798.0;
  (%799, %800)
}

def @func_7016() -> (Tensor[(10, 8, 11), float32],) {
  %801 = @func_3485() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %802 = %801.0;
  (%802,)
}

def @func_2417() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) {
  %803 = cast(meta[relay.Constant][37] /* ty=Tensor[(10, 8, 11), float32] */, dtype="float32") /* ty=Tensor[(10, 8, 11), float32] */;
  %804 = cast(meta[relay.Constant][37] /* ty=Tensor[(10, 8, 11), float32] */, dtype="float64") /* ty=Tensor[(10, 8, 11), float64] */;
  %805 = sinh(%803) /* ty=Tensor[(10, 8, 11), float32] */;
  %806 = acos(%804) /* ty=Tensor[(10, 8, 11), float64] */;
  (%805, %806)
}

def @func_4611() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) {
  %807 = @func_3093() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %808 = %807.0;
  %809 = @func_4189() /* ty=Tensor[(10, 8, 11), float32] */;
  (%808, %809)
}

def @func_3945(%var_3890: Tensor[(12, 12, 10), uint64], %var_3891: Tensor[(12, 12, 10), uint64], %var_3911: Tensor[(1, 168), uint16], %var_3931: Tensor[(720), float32], %var_3933: Tensor[(9, 1), float64]) -> (Tensor[(12, 12, 10), bool], Tensor[(10, 8, 11), float32], Tensor[(55), float32], Tensor[(1, 168), uint16], Tensor[(10, 8, 11), float64], Tensor[(10, 8, 11), float32], Tensor[(12, 12, 10), bool], Tensor[(720), float32], Tensor[(720), float32], Tensor[(550), uint8], Tensor[(9, 1), float64], Tensor[(7, 165), float64]) {
  %810 = cast(%var_3891, dtype="bool") /* ty=Tensor[(12, 12, 10), bool] */;
  %811 = shape_of(%var_3890, dtype="int32") /* ty=Tensor[(3), int32] */;
  %812 = cast(%var_3890, dtype="bool") /* ty=Tensor[(12, 12, 10), bool] */;
  %813 = dyn.reshape(%810, %811, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %814 = @func_2675() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %815 = cast(%var_3911, dtype="uint16") /* ty=Tensor[(1, 168), uint16] */;
  %816 = reshape(%815, newshape=[3, 8, 7]) /* ty=Tensor[(3, 8, 7), uint16] */;
  %817 = @func_900(%816) /* ty=(Tensor[(55), float32], Tensor[(3, 8, 7), bool], Tensor[(11, 10, 5), uint8]) */;
  %818 = @func_3558() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) */;
  %819 = cast(%var_3890, dtype="bool") /* ty=Tensor[(12, 12, 10), bool] */;
  %820 = shape_of(%var_3891, dtype="int32") /* ty=Tensor[(3), int32] */;
  %821 = cast(%var_3891, dtype="bool") /* ty=Tensor[(12, 12, 10), bool] */;
  %822 = dyn.reshape(%819, %820, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %823 = cast(%var_3931, dtype="float32") /* ty=Tensor[(720), float32] */;
  %824 = cast(meta[relay.Constant][38] /* ty=Tensor[(550), uint8] */, dtype="uint8") /* ty=Tensor[(550), uint8] */;
  %825 = cast(%var_3933, dtype="float64") /* ty=Tensor[(9, 1), float64] */;
  %826 = cast(meta[relay.Constant][39] /* ty=Tensor[(7, 165), float64] */, dtype="float64") /* ty=Tensor[(7, 165), float64] */;
  %827 = reshape(%823, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %828 = reshape(%824, newshape=[11, 10, 5]) /* ty=Tensor[(11, 10, 5), uint8] */;
  %829 = reshape(%825, newshape=[9, 1]) /* ty=Tensor[(9, 1), float64] */;
  %830 = reshape(%826, newshape=[1155]) /* ty=Tensor[(1155), float64] */;
  %831 = @func_3078(%827, %828, %829, %830) /* ty=(Tensor[(168), uint16], Tensor[(5, 9, 16), float32], Tensor[(720), float32], Tensor[(11, 10, 5), bool], Tensor[(9, 1), float64], Tensor[(1155), float64], Tensor[(1155), float64]) */;
  %832 = greater_equal(%812, %813) /* ty=Tensor[(12, 12, 10), bool] */;
  %833 = %814.0;
  %834 = %817.0;
  %835 = @func_2819() /* ty=Tensor[(10, 8, 11), float64] */;
  %836 = %818.0;
  %837 = equal(%821, %822) /* ty=Tensor[(12, 12, 10), bool] */;
  %838 = %831.2;
  (%832, %833, %834, %var_3911, %835, %836, %837, %838, %var_3931, meta[relay.Constant][38] /* ty=Tensor[(550), uint8] */, %var_3933, meta[relay.Constant][39] /* ty=Tensor[(7, 165), float64] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_7182() -> (Tensor[(10, 8, 11), float32],) {
  @func_7180() /* ty=(Tensor[(10, 8, 11), float32],) */
}

def @func_5138() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) {
  %0 = @func_3687() /* ty=Tensor[(10, 8, 11), float32] */;
  %1 = cast(%0, dtype="float64") /* ty=Tensor[(10, 8, 11), float64] */;
  %2 = @func_4189() /* ty=Tensor[(10, 8, 11), float32] */;
  %3 = log2(%1) /* ty=Tensor[(10, 8, 11), float64] */;
  (%2, %3)
}

def @func_2705(%var_2680: Tensor[(168), uint16]) -> (Tensor[(10, 8, 11), float32], Tensor[(11, 10, 5), uint8], Tensor[(168), uint16], Tensor[(15, 11, 7), float64], Tensor[(1155), float64]) {
  %4 = @func_2675() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %5 = cast(%var_2680, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %6 = reshape(%5, newshape=[3, 8, 7]) /* ty=Tensor[(3, 8, 7), uint16] */;
  %7 = @func_900(%6) /* ty=(Tensor[(55), float32], Tensor[(3, 8, 7), bool], Tensor[(11, 10, 5), uint8]) */;
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(1155), float64] */, dtype="float64") /* ty=Tensor[(1155), float64] */;
  %9 = reshape(%8, newshape=[15, 11, 7]) /* ty=Tensor[(15, 11, 7), float64] */;
  %10 = %4.0;
  %11 = %7.2;
  %12 = @func_432(%9) /* ty=Tensor[(15, 11, 7), float64] */;
  (%10, %11, %var_2680, %12, meta[relay.Constant][0] /* ty=Tensor[(1155), float64] */)
}

def @func_2485(%var_2484: Tensor[(6, 28), uint16]) -> (Tensor[(10, 8, 11), float32], Tensor[(55), float32], Tensor[(6, 28), uint16]) {
  %19 = fn (%var_2467: Tensor[(6, 28), uint16]) -> (Tensor[(10, 8, 11), float32], Tensor[(55), float32], Tensor[(6, 28), uint16]) {
    %13 = @func_2417() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) */;
    %14 = cast(%var_2467, dtype="uint16") /* ty=Tensor[(6, 28), uint16] */;
    %15 = reshape(%14, newshape=[3, 8, 7]) /* ty=Tensor[(3, 8, 7), uint16] */;
    %16 = @func_900(%15) /* ty=(Tensor[(55), float32], Tensor[(3, 8, 7), bool], Tensor[(11, 10, 5), uint8]) */;
    %17 = %13.0;
    %18 = %16.0;
    (%17, %18, %var_2467)
  };
  %19(%var_2484) /* ty=(Tensor[(10, 8, 11), float32], Tensor[(55), float32], Tensor[(6, 28), uint16]) */
}

def @func_1384(%var_1344: Tensor[(12, 2, 15), uint32], %var_1345: Tensor[(12, 2, 15), uint32]) -> (Tensor[(3, 8, 7), bool], Tensor[(84, 2), uint16], Tensor[(12, 2, 15), bool]) {
  %20 = cast(meta[relay.Constant][1] /* ty=Tensor[(84, 2), uint16] */, dtype="uint16") /* ty=Tensor[(84, 2), uint16] */;
  %21 = reshape(%20, newshape=[3, 8, 7]) /* ty=Tensor[(3, 8, 7), uint16] */;
  %22 = @func_900(%21) /* ty=(Tensor[(55), float32], Tensor[(3, 8, 7), bool], Tensor[(11, 10, 5), uint8]) */;
  %23 = cast(%var_1345, dtype="uint32") /* ty=Tensor[(12, 2, 15), uint32] */;
  %24 = shape_of(%var_1344, dtype="int32") /* ty=Tensor[(3), int32] */;
  %25 = cast(%var_1344, dtype="uint32") /* ty=Tensor[(12, 2, 15), uint32] */;
  %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %27 = multiply(%25, %26) /* ty=Tensor[(12, 2, 15), uint32] */;
  %28 = cast(%27, dtype="float32") /* ty=Tensor[(12, 2, 15), float32] */;
  %29 = log(%28) /* ty=Tensor[(12, 2, 15), float32] */;
  %30 = cast(%var_1345, dtype="bool") /* ty=Tensor[(12, 2, 15), bool] */;
  %31 = shape_of(%29, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(%29, dtype="bool") /* ty=Tensor[(12, 2, 15), bool] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %34 = %22.1;
  %35 = greater(%32, %33) /* ty=Tensor[(12, 2, 15), bool] */;
  (%34, meta[relay.Constant][1] /* ty=Tensor[(84, 2), uint16] */, %35)
}

def @func_5040() -> (Tensor[(10, 8, 11), float64],) {
  @func_5038() /* ty=(Tensor[(10, 8, 11), float64],) */
}

def @func_4061(%var_4059: Tensor[(1, 420), float64]) -> (Tensor[(11, 10, 5), uint8], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32], Tensor[(14, 3, 10), float64], Tensor[(1, 420), float64], Tensor[(10, 8, 11), float32]) {
  @func_4058(%var_4059) /* ty=(Tensor[(11, 10, 5), uint8], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32], Tensor[(14, 3, 10), float64], Tensor[(1, 420), float64], Tensor[(10, 8, 11), float32]) */
}

def @func_3000() -> (Tensor[(11, 10, 5), uint8], Tensor[(168), uint16], Tensor[(11, 10, 5), uint8], Tensor[(10, 8, 11), bool]) {
  %53 = fn () -> (Tensor[(11, 10, 5), uint8], Tensor[(168), uint16], Tensor[(11, 10, 5), uint8], Tensor[(10, 8, 11), bool]) {
    %36 = cast(meta[relay.Constant][2] /* ty=Tensor[(168), uint16] */, dtype="uint16") /* ty=Tensor[(168), uint16] */;
    %37 = reshape(%36, newshape=[168]) /* ty=Tensor[(168), uint16] */;
    %38 = @func_2705(%37) /* ty=(Tensor[(10, 8, 11), float32], Tensor[(11, 10, 5), uint8], Tensor[(168), uint16], Tensor[(15, 11, 7), float64], Tensor[(1155), float64]) */;
    %39 = cast(meta[relay.Constant][2] /* ty=Tensor[(168), uint16] */, dtype="uint16") /* ty=Tensor[(168), uint16] */;
    %40 = reshape(%39, newshape=[168]) /* ty=Tensor[(168), uint16] */;
    %41 = @func_2705(%40) /* ty=(Tensor[(10, 8, 11), float32], Tensor[(11, 10, 5), uint8], Tensor[(168), uint16], Tensor[(15, 11, 7), float64], Tensor[(1155), float64]) */;
    %42 = @func_2675() /* ty=(Tensor[(10, 8, 11), float32],) */;
    %43 = %42.0;
    %44 = @func_2675() /* ty=(Tensor[(10, 8, 11), float32],) */;
    %45 = %44.0;
    %46 = cast(%45, dtype="bool") /* ty=Tensor[(10, 8, 11), bool] */;
    %47 = shape_of(%43, dtype="int32") /* ty=Tensor[(3), int32] */;
    %48 = cast(%43, dtype="bool") /* ty=Tensor[(10, 8, 11), bool] */;
    %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %50 = %38.1;
    %51 = %41.1;
    %52 = greater_equal(%48, %49) /* ty=Tensor[(10, 8, 11), bool] */;
    (%50, meta[relay.Constant][2] /* ty=Tensor[(168), uint16] */, %51, %52)
  };
  %53() /* ty=(Tensor[(11, 10, 5), uint8], Tensor[(168), uint16], Tensor[(11, 10, 5), uint8], Tensor[(10, 8, 11), bool]) */
}

def @func_3523(%var_3521: Tensor[(702), float64]) -> (Tensor[(10, 8, 11), float32], Tensor[(702), float64], Tensor[(420), float64], Tensor[(702), float64]) {
  @func_3520(%var_3521) /* ty=(Tensor[(10, 8, 11), float32], Tensor[(702), float64], Tensor[(420), float64], Tensor[(702), float64]) */
}

def @func_5716() -> (Tensor[(10, 8, 11), float32],) {
  %54 = @func_2675() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %55 = %54.0;
  (%55,)
}

def @func_4513(%var_4511: uint32, %var_4512: Tensor[(3, 234), float64]) -> (Tensor[(9, 8, 9), uint32], Tensor[(1248), float32], Tensor[(3, 234), float64], Tensor[(104, 12), float32], Tensor[(10, 8, 11), float32]) {
  @func_4509(%var_4511, %var_4512) /* ty=(Tensor[(9, 8, 9), uint32], Tensor[(1248), float32], Tensor[(3, 234), float64], Tensor[(104, 12), float32], Tensor[(10, 8, 11), float32]) */
}

def @func_4661() -> (Tensor[(10, 8, 11), float64],) {
  %58 = fn () -> (Tensor[(10, 8, 11), float64],) {
    %56 = @func_2417() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) */;
    %57 = %56.1;
    (%57,)
  };
  %58() /* ty=(Tensor[(10, 8, 11), float64],) */
}

def @func_4612() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) {
  %62 = fn () -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) {
    %59 = @func_3093() /* ty=(Tensor[(10, 8, 11), float32],) */;
    %60 = %59.0;
    %61 = @func_4189() /* ty=Tensor[(10, 8, 11), float32] */;
    (%60, %61)
  };
  %62() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) */
}

def @func_5565(%var_5563: Tensor[(12, 10, 13), int32], %var_5564: Tensor[(12, 10, 13), int32]) -> Tensor[(12, 10, 13), bool] {
  %67 = fn (%var_5557: Tensor[(12, 10, 13), int32], %var_5558: Tensor[(12, 10, 13), int32]) -> Tensor[(12, 10, 13), bool] {
    %63 = cast(%var_5558, dtype="bool") /* ty=Tensor[(12, 10, 13), bool] */;
    %64 = shape_of(%var_5557, dtype="int32") /* ty=Tensor[(3), int32] */;
    %65 = cast(%var_5557, dtype="bool") /* ty=Tensor[(12, 10, 13), bool] */;
    %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%65, %66) /* ty=Tensor[(12, 10, 13), bool] */
  };
  %67(%var_5563, %var_5564) /* ty=Tensor[(12, 10, 13), bool] */
}

def @func_2954() -> (Tensor[(10, 8, 11), float32],) {
  %70 = fn () -> (Tensor[(10, 8, 11), float32],) {
    %68 = @func_2675() /* ty=(Tensor[(10, 8, 11), float32],) */;
    %69 = %68.0;
    (%69,)
  };
  %70() /* ty=(Tensor[(10, 8, 11), float32],) */
}

def @func_6915(%var_6834: Tensor[(1560), uint16], %var_6872: Tensor[(10, 8, 11), float32], %var_6909: Tensor[(1155), float64]) -> (Tensor[(10, 8, 11), uint16], Tensor[(10, 8, 11), float32], Tensor[(1560), uint16], Tensor[(55), float32], Tensor[(84, 26), uint32], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), bool], Tensor[(10, 8, 11), float32], Tensor[(15, 11, 7), float64], Tensor[(3, 3), float64], Tensor[(1155), float64]) {
  %71 = @func_6692() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), uint16], Tensor[(10, 8, 11), float64], Tensor[(10, 8, 11), uint16]) */;
  %72 = @func_3104() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %73 = cast(meta[relay.Constant][4] /* ty=Tensor[(84, 26), float64] */, dtype="float64") /* ty=Tensor[(84, 26), float64] */;
  %74 = cast(%var_6834, dtype="uint16") /* ty=Tensor[(1560), uint16] */;
  %75 = cast(meta[relay.Constant][3] /* ty=Tensor[(55), float32] */, dtype="float32") /* ty=Tensor[(55), float32] */;
  %76 = reshape(%73, newshape=[12, 14, 13]) /* ty=Tensor[(12, 14, 13), float64] */;
  %77 = reshape(%74, newshape=[1560, 1]) /* ty=Tensor[(1560, 1), uint16] */;
  %78 = reshape(%75, newshape=[55]) /* ty=Tensor[(55), float32] */;
  %79 = @func_3305(%76, %77, %78) /* ty=(Tensor[(12, 14, 13), float64], Tensor[(13, 15, 8), uint16], Tensor[(1560, 1), uint16], Tensor[(11, 10, 5), float32], Tensor[(55), float32], Tensor[(275, 2), float32]) */;
  %80 = %79.0;
  %81 = cast(%80, dtype="uint32") /* ty=Tensor[(12, 14, 13), uint32] */;
  %82 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(84, 26), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %83 = cast(meta[relay.Constant][4] /* ty=Tensor[(84, 26), float64] */, dtype="uint32") /* ty=Tensor[(84, 26), uint32] */;
  %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %85 = @func_2787() /* ty=(Tensor[(10, 8, 11), uint16], Tensor[(10, 8, 11), float32], Tensor[(55), float32], Tensor[(168), uint16]) */;
  %86 = @func_2417() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) */;
  %87 = %86.0;
  %88 = cast(%var_6872, dtype="bool") /* ty=Tensor[(10, 8, 11), bool] */;
  %89 = shape_of(%87, dtype="int32") /* ty=Tensor[(3), int32] */;
  %90 = cast(%87, dtype="bool") /* ty=Tensor[(10, 8, 11), bool] */;
  %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %92 = cast(meta[relay.Constant][5] /* ty=Tensor[(3, 3), float64] */, dtype="float64") /* ty=Tensor[(3, 3), float64] */;
  %93 = cast(%var_6909, dtype="float64") /* ty=Tensor[(1155), float64] */;
  %94 = reshape(%92, newshape=[3, 3, 1]) /* ty=Tensor[(3, 3, 1), float64] */;
  %95 = reshape(%93, newshape=[1155]) /* ty=Tensor[(1155), float64] */;
  %96 = @func_1890(%94, %95) /* ty=(Tensor[(3, 3, ?), bool], Tensor[(15, 11, 7), float64], Tensor[(1155), float64]) */;
  %97 = %71.3;
  %98 = %72.0;
  %99 = logical_xor(%83, %84) /* ty=Tensor[(84, 26), uint32] */;
  %100 = @func_4809() /* ty=Tensor[(10, 8, 11), float32] */;
  %101 = %85.1;
  %102 = logical_and(%90, %91) /* ty=Tensor[(10, 8, 11), bool] */;
  %103 = @func_4724() /* ty=Tensor[(10, 8, 11), float32] */;
  %104 = %96.1;
  (%97, %98, %var_6834, meta[relay.Constant][3] /* ty=Tensor[(55), float32] */, %99, %100, %101, %102, %103, %104, meta[relay.Constant][5] /* ty=Tensor[(3, 3), float64] */, %var_6909)
}

def @func_6716() -> Tensor[(10, 8, 11), float32] {
  @func_6714() /* ty=Tensor[(10, 8, 11), float32] */
}

def @func_4058(%var_4049: Tensor[(1, 420), float64]) -> (Tensor[(11, 10, 5), uint8], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32], Tensor[(14, 3, 10), float64], Tensor[(1, 420), float64], Tensor[(10, 8, 11), float32]) {
  %105 = @func_2999() /* ty=(Tensor[(11, 10, 5), uint8], Tensor[(168), uint16], Tensor[(11, 10, 5), uint8], Tensor[(10, 8, 11), bool]) */;
  %106 = @func_3498() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %107 = @func_2675() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %108 = cast(%var_4049, dtype="float64") /* ty=Tensor[(1, 420), float64] */;
  %109 = reshape(%108, newshape=[14, 3, 10]) /* ty=Tensor[(14, 3, 10), float64] */;
  %110 = @func_1175(%109) /* ty=(Tensor[(14, 3, 10), float64],) */;
  %111 = @func_3967() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %112 = %105.2;
  %113 = %106.0;
  %114 = %107.0;
  %115 = %110.0;
  %116 = %111.0;
  (%112, %113, %114, %115, %var_4049, %116)
}

def @func_1541(%var_1540: Tensor[(16, 2, 10), int64]) -> (Tensor[(16, 2, 10), bool],) {
  %132 = fn (%var_1513: Tensor[(16, 2, 10), int64]) -> (Tensor[(16, 2, 10), bool],) {
    %117 = cast(%var_1513, dtype="bool") /* ty=Tensor[(16, 2, 10), bool] */;
    %118 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(16, 2, 10), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %119 = cast(meta[relay.Constant][6] /* ty=Tensor[(16, 2, 10), int64] */, dtype="bool") /* ty=Tensor[(16, 2, 10), bool] */;
    %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %121 = greater_equal(%119, %120) /* ty=Tensor[(16, 2, 10), bool] */;
    %122 = cast(%var_1513, dtype="uint64") /* ty=Tensor[(16, 2, 10), uint64] */;
    %123 = shape_of(%121, dtype="int32") /* ty=Tensor[(3), int32] */;
    %124 = cast(%121, dtype="uint64") /* ty=Tensor[(16, 2, 10), uint64] */;
    %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %126 = right_shift(%124, %125) /* ty=Tensor[(16, 2, 10), uint64] */;
    %127 = cast(%121, dtype="bool") /* ty=Tensor[(16, 2, 10), bool] */;
    %128 = shape_of(%126, dtype="int32") /* ty=Tensor[(3), int32] */;
    %129 = cast(%126, dtype="bool") /* ty=Tensor[(16, 2, 10), bool] */;
    %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %131 = greater(%129, %130) /* ty=Tensor[(16, 2, 10), bool] */;
    (%131,)
  };
  %132(%var_1540) /* ty=(Tensor[(16, 2, 10), bool],) */
}

def @func_3104() -> (Tensor[(10, 8, 11), float32],) {
  %133 = @func_2417() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) */;
  %134 = %133.0;
  (%134,)
}

def @func_2676() -> (Tensor[(10, 8, 11), float32],) {
  %137 = fn () -> (Tensor[(10, 8, 11), float32],) {
    %135 = @func_2417() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) */;
    %136 = %135.0;
    (%136,)
  };
  %137() /* ty=(Tensor[(10, 8, 11), float32],) */
}

def @func_3566() -> (Tensor[(10, 8, 11), float32],) {
  %140 = fn () -> (Tensor[(10, 8, 11), float32],) {
    %138 = @func_3093() /* ty=(Tensor[(10, 8, 11), float32],) */;
    %139 = %138.0;
    (%139,)
  };
  %140() /* ty=(Tensor[(10, 8, 11), float32],) */
}

def @func_4413(%var_4409: Tensor[(16, 13, 10), int64], %var_4410: Tensor[(128), float64], %var_4411: Tensor[(880), float32], %var_4412: Tensor[(16, 13, 10), int64]) -> (Tensor[(16, 13, 10), int64], Tensor[(10, 8, 11), bool], Tensor[(128), float64], Tensor[(880), float32], Tensor[(16, 13, 10), float32], Tensor[(10, 8, 11), float64]) {
  %158 = fn (%var_4360: Tensor[(16, 13, 10), int64], %var_4388: Tensor[(128), float64], %var_4389: Tensor[(880), float32], %var_4402: Tensor[(16, 13, 10), int64]) -> (Tensor[(16, 13, 10), int64], Tensor[(10, 8, 11), bool], Tensor[(128), float64], Tensor[(880), float32], Tensor[(16, 13, 10), float32], Tensor[(10, 8, 11), float64]) {
    %141 = cast(meta[relay.Constant][7] /* ty=Tensor[(16, 13, 10), int64] */, dtype="int64") /* ty=Tensor[(16, 13, 10), int64] */;
    %142 = shape_of(%var_4360, dtype="int32") /* ty=Tensor[(3), int32] */;
    %143 = cast(%var_4360, dtype="int64") /* ty=Tensor[(16, 13, 10), int64] */;
    %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %145 = cast(%var_4388, dtype="float64") /* ty=Tensor[(128), float64] */;
    %146 = cast(%var_4389, dtype="float32") /* ty=Tensor[(880), float32] */;
    %147 = reshape(%145, newshape=[8, 16]) /* ty=Tensor[(8, 16), float64] */;
    %148 = reshape(%146, newshape=[10, 8, 11]) /* ty=Tensor[(10, 8, 11), float32] */;
    %149 = @func_3794(%147, %148) /* ty=(Tensor[(8, 16), float64], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), bool], Tensor[(10, 8, 11), uint16]) */;
    %150 = cast(%var_4402, dtype="float32") /* ty=Tensor[(16, 13, 10), float32] */;
    %151 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(16, 13, 10), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %152 = cast(meta[relay.Constant][7] /* ty=Tensor[(16, 13, 10), int64] */, dtype="float32") /* ty=Tensor[(16, 13, 10), float32] */;
    %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %154 = add(%143, %144) /* ty=Tensor[(16, 13, 10), int64] */;
    %155 = %149.2;
    %156 = mod(%152, %153) /* ty=Tensor[(16, 13, 10), float32] */;
    %157 = @func_2819() /* ty=Tensor[(10, 8, 11), float64] */;
    (%154, %155, %var_4388, %var_4389, %156, %157)
  };
  %158(%var_4409, %var_4410, %var_4411, %var_4412) /* ty=(Tensor[(16, 13, 10), int64], Tensor[(10, 8, 11), bool], Tensor[(128), float64], Tensor[(880), float32], Tensor[(16, 13, 10), float32], Tensor[(10, 8, 11), float64]) */
}

def @func_5267() -> Tensor[(10, 8, 11), float32] {
  %159 = @func_4223() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %159.0
}

def @func_3643() -> Tensor[(10, 8, 11), uint16] {
  @func_3641() /* ty=Tensor[(10, 8, 11), uint16] */
}

def @func_4770() -> Tensor[(10, 8, 11), uint16] {
  %160 = fn () -> Tensor[(10, 8, 11), uint16] {
    @func_3641() /* ty=Tensor[(10, 8, 11), uint16] */
  };
  %160() /* ty=Tensor[(10, 8, 11), uint16] */
}

def @func_5840() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) {
  %161 = @func_2830() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) */;
  %162 = @func_4223() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %163 = %161.1;
  %164 = %162.0;
  (%163, %164)
}

def @func_7345() -> (Tensor[(10, 8, 11), float32],) {
  %165 = @func_3485() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %166 = %165.0;
  (%166,)
}

def @func_4971(%var_4967: Tensor[(10, 8, 11), float32], %var_4968: Tensor[(4, 32), float64], %var_4969: Tensor[(2112), float64], %var_4970: Tensor[(168), uint16]) -> (Tensor[(10, 8, 11), int64], Tensor[(10, 8, 11), float32], Tensor[(4, 32), float64], Tensor[(168), uint16], Tensor[(2112), int32]) {
  %193 = fn (%var_4928: Tensor[(10, 8, 11), float32], %var_4950: Tensor[(4, 32), float64], %var_4958: Tensor[(2112), float64], %var_4959: Tensor[(168), uint16]) -> (Tensor[(10, 8, 11), int64], Tensor[(10, 8, 11), float32], Tensor[(4, 32), float64], Tensor[(168), uint16], Tensor[(2112), int32]) {
    %167 = @func_3666() /* ty=(Tensor[(10, 8, 11), float32],) */;
    %168 = %167.0;
    %169 = cast(%var_4928, dtype="int64") /* ty=Tensor[(10, 8, 11), int64] */;
    %170 = shape_of(%168, dtype="int32") /* ty=Tensor[(3), int32] */;
    %171 = cast(%168, dtype="int64") /* ty=Tensor[(10, 8, 11), int64] */;
    %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %173 = cast(%var_4950, dtype="float64") /* ty=Tensor[(4, 32), float64] */;
    %174 = minimum(%171, %172) /* ty=Tensor[(10, 8, 11), int64] */;
    %175 = cast(%174, dtype="float32") /* ty=Tensor[(10, 8, 11), float32] */;
    %176 = reshape(%173, newshape=[8, 16]) /* ty=Tensor[(8, 16), float64] */;
    %177 = reshape(%175, newshape=[10, 8, 11]) /* ty=Tensor[(10, 8, 11), float32] */;
    %178 = @func_3794(%176, %177) /* ty=(Tensor[(8, 16), float64], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), bool], Tensor[(10, 8, 11), uint16]) */;
    %179 = cast(%var_4958, dtype="float64") /* ty=Tensor[(2112), float64] */;
    %180 = cast(%var_4958, dtype="float64") /* ty=Tensor[(2112), float64] */;
    %181 = cast(%var_4959, dtype="uint16") /* ty=Tensor[(168), uint16] */;
    %182 = reshape(%179, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), float64] */;
    %183 = reshape(%180, newshape=[2112]) /* ty=Tensor[(2112), float64] */;
    %184 = reshape(%181, newshape=[168]) /* ty=Tensor[(168), uint16] */;
    %185 = @func_3438(%182, %183, %184) /* ty=(Tensor[(12, 16, 11), float32], Tensor[(2112), float64], Tensor[(168), uint16], Tensor[(10, 8, 11), bool]) */;
    %186 = %185.1;
    %187 = cast(%var_4958, dtype="int32") /* ty=Tensor[(2112), int32] */;
    %188 = shape_of(%186, dtype="int32") /* ty=Tensor[(1), int32] */;
    %189 = cast(%186, dtype="int32") /* ty=Tensor[(2112), int32] */;
    %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?), int32] */;
    %191 = %178.1;
    %192 = multiply(%189, %190) /* ty=Tensor[(2112), int32] */;
    (%174, %191, %var_4950, %var_4959, %192)
  };
  %193(%var_4967, %var_4968, %var_4969, %var_4970) /* ty=(Tensor[(10, 8, 11), int64], Tensor[(10, 8, 11), float32], Tensor[(4, 32), float64], Tensor[(168), uint16], Tensor[(2112), int32]) */
}

def @func_1645(%var_1633: Tensor[(13, 8, 12), float32]) -> (Tensor[(13, 8, 12), float32], Tensor[(3, 8, 7), bool], Tensor[(168), uint16]) {
  %194 = cast(meta[relay.Constant][8] /* ty=Tensor[(13, 8, 12), float32] */, dtype="float32") /* ty=Tensor[(13, 8, 12), float32] */;
  %195 = shape_of(%var_1633, dtype="int32") /* ty=Tensor[(3), int32] */;
  %196 = cast(%var_1633, dtype="float32") /* ty=Tensor[(13, 8, 12), float32] */;
  %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %198 = cast(meta[relay.Constant][9] /* ty=Tensor[(168), uint16] */, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %199 = reshape(%198, newshape=[3, 8, 7]) /* ty=Tensor[(3, 8, 7), uint16] */;
  %200 = @func_900(%199) /* ty=(Tensor[(55), float32], Tensor[(3, 8, 7), bool], Tensor[(11, 10, 5), uint8]) */;
  %201 = floor_mod(%196, %197) /* ty=Tensor[(13, 8, 12), float32] */;
  %202 = %200.1;
  (%201, %202, meta[relay.Constant][9] /* ty=Tensor[(168), uint16] */)
}

def @func_5269() -> Tensor[(10, 8, 11), float32] {
  @func_5267() /* ty=Tensor[(10, 8, 11), float32] */
}

def @func_5842() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) {
  @func_5840() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) */
}

def @func_6568(%var_6564: Tensor[(6, 28), uint16]) -> (Tensor[(10, 8, 11), float64], Tensor[(10, 8, 11), float32], Tensor[(55), float32], Tensor[(6, 28), uint16]) {
  %203 = @func_4898() /* ty=(Tensor[(10, 8, 11), float64],) */;
  %204 = @func_3104() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %205 = cast(%var_6564, dtype="uint16") /* ty=Tensor[(6, 28), uint16] */;
  %206 = reshape(%205, newshape=[3, 8, 7]) /* ty=Tensor[(3, 8, 7), uint16] */;
  %207 = @func_900(%206) /* ty=(Tensor[(55), float32], Tensor[(3, 8, 7), bool], Tensor[(11, 10, 5), uint8]) */;
  %208 = %203.0;
  %209 = %204.0;
  %210 = %207.0;
  (%208, %209, %210, %var_6564)
}

def @func_4836() -> Tensor[(12, 6), float32] {
  %212 = fn () -> Tensor[(12, 6), float32] {
    %211 = cast(meta[relay.Constant][10] /* ty=Tensor[(12, 6), float32] */, dtype="float32") /* ty=Tensor[(12, 6), float32] */;
    cosh(%211) /* ty=Tensor[(12, 6), float32] */
  };
  %212() /* ty=Tensor[(12, 6), float32] */
}

def @func_3945(%var_3890: Tensor[(12, 12, 10), uint64], %var_3891: Tensor[(12, 12, 10), uint64], %var_3911: Tensor[(1, 168), uint16], %var_3931: Tensor[(720), float32], %var_3933: Tensor[(9, 1), float64]) -> (Tensor[(12, 12, 10), bool], Tensor[(10, 8, 11), float32], Tensor[(55), float32], Tensor[(1, 168), uint16], Tensor[(10, 8, 11), float64], Tensor[(10, 8, 11), float32], Tensor[(12, 12, 10), bool], Tensor[(720), float32], Tensor[(720), float32], Tensor[(550), uint8], Tensor[(9, 1), float64], Tensor[(7, 165), float64]) {
  %213 = cast(%var_3891, dtype="bool") /* ty=Tensor[(12, 12, 10), bool] */;
  %214 = shape_of(%var_3890, dtype="int32") /* ty=Tensor[(3), int32] */;
  %215 = cast(%var_3890, dtype="bool") /* ty=Tensor[(12, 12, 10), bool] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %217 = @func_2675() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %218 = cast(%var_3911, dtype="uint16") /* ty=Tensor[(1, 168), uint16] */;
  %219 = reshape(%218, newshape=[3, 8, 7]) /* ty=Tensor[(3, 8, 7), uint16] */;
  %220 = @func_900(%219) /* ty=(Tensor[(55), float32], Tensor[(3, 8, 7), bool], Tensor[(11, 10, 5), uint8]) */;
  %221 = @func_3558() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) */;
  %222 = cast(%var_3890, dtype="bool") /* ty=Tensor[(12, 12, 10), bool] */;
  %223 = shape_of(%var_3891, dtype="int32") /* ty=Tensor[(3), int32] */;
  %224 = cast(%var_3891, dtype="bool") /* ty=Tensor[(12, 12, 10), bool] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %226 = cast(%var_3931, dtype="float32") /* ty=Tensor[(720), float32] */;
  %227 = cast(meta[relay.Constant][11] /* ty=Tensor[(550), uint8] */, dtype="uint8") /* ty=Tensor[(550), uint8] */;
  %228 = cast(%var_3933, dtype="float64") /* ty=Tensor[(9, 1), float64] */;
  %229 = cast(meta[relay.Constant][12] /* ty=Tensor[(7, 165), float64] */, dtype="float64") /* ty=Tensor[(7, 165), float64] */;
  %230 = reshape(%226, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %231 = reshape(%227, newshape=[11, 10, 5]) /* ty=Tensor[(11, 10, 5), uint8] */;
  %232 = reshape(%228, newshape=[9, 1]) /* ty=Tensor[(9, 1), float64] */;
  %233 = reshape(%229, newshape=[1155]) /* ty=Tensor[(1155), float64] */;
  %234 = @func_3078(%230, %231, %232, %233) /* ty=(Tensor[(168), uint16], Tensor[(5, 9, 16), float32], Tensor[(720), float32], Tensor[(11, 10, 5), bool], Tensor[(9, 1), float64], Tensor[(1155), float64], Tensor[(1155), float64]) */;
  %235 = greater_equal(%215, %216) /* ty=Tensor[(12, 12, 10), bool] */;
  %236 = %217.0;
  %237 = %220.0;
  %238 = @func_2819() /* ty=Tensor[(10, 8, 11), float64] */;
  %239 = %221.0;
  %240 = equal(%224, %225) /* ty=Tensor[(12, 12, 10), bool] */;
  %241 = %234.2;
  (%235, %236, %237, %var_3911, %238, %239, %240, %241, %var_3931, meta[relay.Constant][11] /* ty=Tensor[(550), uint8] */, %var_3933, meta[relay.Constant][12] /* ty=Tensor[(7, 165), float64] */)
}

def @func_6388() -> Tensor[(168), uint16] {
  %243 = fn () -> Tensor[(168), uint16] {
    %242 = @func_2999() /* ty=(Tensor[(11, 10, 5), uint8], Tensor[(168), uint16], Tensor[(11, 10, 5), uint8], Tensor[(10, 8, 11), bool]) */;
    %242.1
  };
  %243() /* ty=Tensor[(168), uint16] */
}

def @func_6614(%var_6613: Tensor[(15, 6, 14), float64]) -> (Tensor[(10, 8, 11), float32], Tensor[(15, 6, 14), bool]) {
  %255 = fn (%var_6584: Tensor[(15, 6, 14), float64]) -> (Tensor[(10, 8, 11), float32], Tensor[(15, 6, 14), bool]) {
    %244 = @func_3981() /* ty=(Tensor[(10, 8, 11), float32],) */;
    %245 = cast(%var_6584, dtype="float64") /* ty=Tensor[(15, 6, 14), float64] */;
    %246 = exp(%245) /* ty=Tensor[(15, 6, 14), float64] */;
    %247 = cast(%246, dtype="float64") /* ty=Tensor[(15, 6, 14), float64] */;
    %248 = atanh(%247) /* ty=Tensor[(15, 6, 14), float64] */;
    %249 = cast(%248, dtype="bool") /* ty=Tensor[(15, 6, 14), bool] */;
    %250 = shape_of(%246, dtype="int32") /* ty=Tensor[(3), int32] */;
    %251 = cast(%246, dtype="bool") /* ty=Tensor[(15, 6, 14), bool] */;
    %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %253 = %244.0;
    %254 = logical_or(%251, %252) /* ty=Tensor[(15, 6, 14), bool] */;
    (%253, %254)
  };
  %255(%var_6613) /* ty=(Tensor[(10, 8, 11), float32], Tensor[(15, 6, 14), bool]) */
}

def @func_3371(%var_3368: Tensor[(420), float64], %var_3369: Tensor[(1, 880), float64], %var_3370: Tensor[(702), float64]) -> (Tensor[(168), uint16], Tensor[(2112), float64], Tensor[(420), float64], Tensor[(360), uint32], Tensor[(1, 880), float64], Tensor[(702), float64]) {
  %270 = fn (%var_3321: Tensor[(420), float64], %var_3323: Tensor[(1, 880), float64], %var_3324: Tensor[(702), float64]) -> (Tensor[(168), uint16], Tensor[(2112), float64], Tensor[(420), float64], Tensor[(360), uint32], Tensor[(1, 880), float64], Tensor[(702), float64]) {
    %256 = @func_2999() /* ty=(Tensor[(11, 10, 5), uint8], Tensor[(168), uint16], Tensor[(11, 10, 5), uint8], Tensor[(10, 8, 11), bool]) */;
    %257 = cast(%var_3321, dtype="float64") /* ty=Tensor[(420), float64] */;
    %258 = cast(meta[relay.Constant][13] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
    %259 = cast(%var_3323, dtype="float64") /* ty=Tensor[(1, 880), float64] */;
    %260 = cast(%var_3324, dtype="float64") /* ty=Tensor[(702), float64] */;
    %261 = %256.1;
    %262 = cast(%261, dtype="uint16") /* ty=Tensor[(168), uint16] */;
    %263 = reshape(%257, newshape=[420]) /* ty=Tensor[(420), float64] */;
    %264 = reshape(%258, newshape=[360]) /* ty=Tensor[(360), uint32] */;
    %265 = reshape(%259, newshape=[10, 8, 11]) /* ty=Tensor[(10, 8, 11), float64] */;
    %266 = reshape(%260, newshape=[234, 3]) /* ty=Tensor[(234, 3), float64] */;
    %267 = reshape(%262, newshape=[168]) /* ty=Tensor[(168), uint16] */;
    %268 = @func_3250(%263, %264, %265, %266, %267) /* ty=(Tensor[(14, 3, 10), float64], Tensor[(420), float64], Tensor[(10, 8, 11), bool], Tensor[(12, 2, 15), uint32], Tensor[(8, 6, 4), bool], Tensor[(192), float32], Tensor[(12, 16, 11), float64], Tensor[(2112), float64], Tensor[(10, 8, 11), float32], Tensor[(6, 13, 9), uint8], Tensor[(234, 3), float64], Tensor[(1248), float32], Tensor[(55), float32], Tensor[(168), uint16]) */;
    %269 = %268.7;
    (%261, %269, %var_3321, meta[relay.Constant][13] /* ty=Tensor[(360), uint32] */, %var_3323, %var_3324)
  };
  %270(%var_3368, %var_3369, %var_3370) /* ty=(Tensor[(168), uint16], Tensor[(2112), float64], Tensor[(420), float64], Tensor[(360), uint32], Tensor[(1, 880), float64], Tensor[(702), float64]) */
}

def @func_903(%var_901: Tensor[(3, 8, 7), uint16]) -> (Tensor[(55), float32], Tensor[(3, 8, 7), bool], Tensor[(11, 10, 5), uint8]) {
  @func_900(%var_901) /* ty=(Tensor[(55), float32], Tensor[(3, 8, 7), bool], Tensor[(11, 10, 5), uint8]) */
}

def @func_734(%var_717: Tensor[(13, 15, 8), uint16]) -> (Tensor[(13, 15, 8), uint16], Tensor[(12, 16, 11), float64], Tensor[(2112), float64], Tensor[(13, 15, 8), float32]) {
  %271 = cast(meta[relay.Constant][14] /* ty=Tensor[(13, 15, 8), uint16] */, dtype="uint16") /* ty=Tensor[(13, 15, 8), uint16] */;
  %272 = shape_of(%var_717, dtype="int32") /* ty=Tensor[(3), int32] */;
  %273 = cast(%var_717, dtype="uint16") /* ty=Tensor[(13, 15, 8), uint16] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %275 = cast(meta[relay.Constant][15] /* ty=Tensor[(2112), float64] */, dtype="float64") /* ty=Tensor[(2112), float64] */;
  %276 = cast(meta[relay.Constant][15] /* ty=Tensor[(2112), float64] */, dtype="float64") /* ty=Tensor[(2112), float64] */;
  %277 = reshape(%275, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), float64] */;
  %278 = reshape(%276, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), float64] */;
  %279 = @func_285(%277, %278) /* ty=(Tensor[(12, 16, 11), float64],) */;
  %280 = cast(meta[relay.Constant][14] /* ty=Tensor[(13, 15, 8), uint16] */, dtype="float32") /* ty=Tensor[(13, 15, 8), float32] */;
  %281 = shape_of(%var_717, dtype="int32") /* ty=Tensor[(3), int32] */;
  %282 = cast(%var_717, dtype="float32") /* ty=Tensor[(13, 15, 8), float32] */;
  %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %284 = subtract(%273, %274) /* ty=Tensor[(13, 15, 8), uint16] */;
  %285 = %279.0;
  %286 = floor_divide(%282, %283) /* ty=Tensor[(13, 15, 8), float32] */;
  (%284, %285, meta[relay.Constant][15] /* ty=Tensor[(2112), float64] */, %286)
}

def @func_6714() -> Tensor[(10, 8, 11), float32] {
  %287 = @func_3666() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %287.0
}

def @func_3968() -> (Tensor[(10, 8, 11), float32],) {
  %290 = fn () -> (Tensor[(10, 8, 11), float32],) {
    %288 = @func_2787() /* ty=(Tensor[(10, 8, 11), uint16], Tensor[(10, 8, 11), float32], Tensor[(55), float32], Tensor[(168), uint16]) */;
    %289 = %288.1;
    (%289,)
  };
  %290() /* ty=(Tensor[(10, 8, 11), float32],) */
}

def @func_3641() -> Tensor[(10, 8, 11), uint16] {
  %291 = @func_2787() /* ty=(Tensor[(10, 8, 11), uint16], Tensor[(10, 8, 11), float32], Tensor[(55), float32], Tensor[(168), uint16]) */;
  %291.0
}

def @func_4646(%var_4644: Tensor[(16, 3, 7), int32], %var_4645: Tensor[(16, 3, 7), int32]) -> Tensor[(16, 3, 7), int32] {
  %296 = fn (%var_4634: Tensor[(16, 3, 7), int32], %var_4635: Tensor[(16, 3, 7), int32]) -> Tensor[(16, 3, 7), int32] {
    %292 = cast(%var_4635, dtype="int32") /* ty=Tensor[(16, 3, 7), int32] */;
    %293 = shape_of(%var_4634, dtype="int32") /* ty=Tensor[(3), int32] */;
    %294 = cast(%var_4634, dtype="int32") /* ty=Tensor[(16, 3, 7), int32] */;
    %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    right_shift(%294, %295) /* ty=Tensor[(16, 3, 7), int32] */
  };
  %296(%var_4644, %var_4645) /* ty=Tensor[(16, 3, 7), int32] */
}

def @func_1894(%var_1892: Tensor[(3, 3, 1), float64], %var_1893: Tensor[(1155), float64]) -> (Tensor[(3, 3, ?), bool], Tensor[(15, 11, 7), float64], Tensor[(1155), float64]) {
  @func_1890(%var_1892, %var_1893) /* ty=(Tensor[(3, 3, ?), bool], Tensor[(15, 11, 7), float64], Tensor[(1155), float64]) */
}

def @func_2788() -> (Tensor[(10, 8, 11), uint16], Tensor[(10, 8, 11), float32], Tensor[(55), float32], Tensor[(168), uint16]) {
  %310 = fn () -> (Tensor[(10, 8, 11), uint16], Tensor[(10, 8, 11), float32], Tensor[(55), float32], Tensor[(168), uint16]) {
    %297 = @func_2417() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) */;
    %298 = %297.0;
    %299 = cast(meta[relay.Constant][16] /* ty=Tensor[(10, 8, 11), float32] */, dtype="uint16") /* ty=Tensor[(10, 8, 11), uint16] */;
    %300 = shape_of(%298, dtype="int32") /* ty=Tensor[(3), int32] */;
    %301 = cast(%298, dtype="uint16") /* ty=Tensor[(10, 8, 11), uint16] */;
    %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %303 = @func_2417() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) */;
    %304 = cast(meta[relay.Constant][17] /* ty=Tensor[(168), uint16] */, dtype="uint16") /* ty=Tensor[(168), uint16] */;
    %305 = reshape(%304, newshape=[6, 28]) /* ty=Tensor[(6, 28), uint16] */;
    %306 = @func_2483(%305) /* ty=(Tensor[(10, 8, 11), float32], Tensor[(55), float32], Tensor[(6, 28), uint16]) */;
    %307 = right_shift(%301, %302) /* ty=Tensor[(10, 8, 11), uint16] */;
    %308 = %303.0;
    %309 = %306.1;
    (%307, %308, %309, meta[relay.Constant][17] /* ty=Tensor[(168), uint16] */)
  };
  %310() /* ty=(Tensor[(10, 8, 11), uint16], Tensor[(10, 8, 11), float32], Tensor[(55), float32], Tensor[(168), uint16]) */
}

def @func_3952(%var_3947: Tensor[(12, 12, 10), uint64], %var_3948: Tensor[(12, 12, 10), uint64], %var_3949: Tensor[(1, 168), uint16], %var_3950: Tensor[(720), float32], %var_3951: Tensor[(9, 1), float64]) -> (Tensor[(12, 12, 10), bool], Tensor[(10, 8, 11), float32], Tensor[(55), float32], Tensor[(1, 168), uint16], Tensor[(10, 8, 11), float64], Tensor[(10, 8, 11), float32], Tensor[(12, 12, 10), bool], Tensor[(720), float32], Tensor[(720), float32], Tensor[(550), uint8], Tensor[(9, 1), float64], Tensor[(7, 165), float64]) {
  @func_3945(%var_3947, %var_3948, %var_3949, %var_3950, %var_3951) /* ty=(Tensor[(12, 12, 10), bool], Tensor[(10, 8, 11), float32], Tensor[(55), float32], Tensor[(1, 168), uint16], Tensor[(10, 8, 11), float64], Tensor[(10, 8, 11), float32], Tensor[(12, 12, 10), bool], Tensor[(720), float32], Tensor[(720), float32], Tensor[(550), uint8], Tensor[(9, 1), float64], Tensor[(7, 165), float64]) */
}

def @func_7016() -> (Tensor[(10, 8, 11), float32],) {
  %311 = @func_3485() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %312 = %311.0;
  (%312,)
}

def @func_3689() -> Tensor[(10, 8, 11), float32] {
  @func_3687() /* ty=Tensor[(10, 8, 11), float32] */
}

def @main(%var_7553: Tensor[(1, 13, 1), float64]) -> (Tensor[(10, 8, 11), uint16], Tensor[(?, 13, ?), float64]) {
  %313 = cast(%var_7553, dtype="float64") /* ty=Tensor[(1, 13, 1), float64] */;
  %314 = erf(%313) /* ty=Tensor[(1, 13, 1), float64] */;
  %315 = cast(%var_7553, dtype="float64") /* ty=Tensor[(1, 13, 1), float64] */;
  %316 = shape_of(%314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %317 = cast(%314, dtype="float64") /* ty=Tensor[(1, 13, 1), float64] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %319 = floor_divide(%317, %318) /* ty=Tensor[(?, 13, ?), float64] */;
  %320 = cast(%319, dtype="float64") /* ty=Tensor[(?, 13, ?), float64] */;
  %321 = @func_3641() /* ty=Tensor[(10, 8, 11), uint16] */;
  %322 = asinh(%320) /* ty=Tensor[(?, 13, ?), float64] */;
  (%321, %322)
}

def @func_7550() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) {
  %323 = @func_5328() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) */;
  %324 = @func_7180() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %325 = %323.1;
  %326 = %324.0;
  (%325, %326)
}

def @func_7515(%var_7508: Tensor[(5, 14, 13), float32]) -> Tensor[(5, 14, 13), float32] {
  %327 = cast(%var_7508, dtype="float32") /* ty=Tensor[(5, 14, 13), float32] */;
  log10(%327) /* ty=Tensor[(5, 14, 13), float32] */
}

def @func_6535() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) {
  %332 = fn () -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) {
    %328 = @func_5716() /* ty=(Tensor[(10, 8, 11), float32],) */;
    %329 = @func_4703() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), uint16]) */;
    %330 = %328.0;
    %331 = %329.0;
    (%330, %331)
  };
  %332() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) */
}

def @func_3499() -> (Tensor[(10, 8, 11), float32],) {
  %335 = fn () -> (Tensor[(10, 8, 11), float32],) {
    %333 = @func_2953() /* ty=(Tensor[(10, 8, 11), float32],) */;
    %334 = %333.0;
    (%334,)
  };
  %335() /* ty=(Tensor[(10, 8, 11), float32],) */
}

def @func_4724() -> Tensor[(10, 8, 11), float32] {
  %336 = @func_3498() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %337 = %336.0;
  %338 = cast(%337, dtype="float32") /* ty=Tensor[(10, 8, 11), float32] */;
  asinh(%338) /* ty=Tensor[(10, 8, 11), float32] */
}

def @func_5594() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) {
  %339 = @func_5328() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) */;
  %340 = @func_3104() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %341 = %339.1;
  %342 = %340.0;
  (%341, %342)
}

def @func_4899() -> (Tensor[(10, 8, 11), float64],) {
  %345 = fn () -> (Tensor[(10, 8, 11), float64],) {
    %343 = @func_4660() /* ty=(Tensor[(10, 8, 11), float64],) */;
    %344 = %343.0;
    (%344,)
  };
  %345() /* ty=(Tensor[(10, 8, 11), float64],) */
}

def @func_3084(%var_3080: Tensor[(720), float32], %var_3081: Tensor[(11, 10, 5), uint8], %var_3082: Tensor[(9, 1), float64], %var_3083: Tensor[(1155), float64]) -> (Tensor[(168), uint16], Tensor[(5, 9, 16), float32], Tensor[(720), float32], Tensor[(11, 10, 5), bool], Tensor[(9, 1), float64], Tensor[(1155), float64], Tensor[(1155), float64]) {
  @func_3078(%var_3080, %var_3081, %var_3082, %var_3083) /* ty=(Tensor[(168), uint16], Tensor[(5, 9, 16), float32], Tensor[(720), float32], Tensor[(11, 10, 5), bool], Tensor[(9, 1), float64], Tensor[(1155), float64], Tensor[(1155), float64]) */
}

def @func_3094() -> (Tensor[(10, 8, 11), float32],) {
  %348 = fn () -> (Tensor[(10, 8, 11), float32],) {
    %346 = @func_2830() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) */;
    %347 = %346.0;
    (%347,)
  };
  %348() /* ty=(Tensor[(10, 8, 11), float32],) */
}

def @func_5436(%var_5434: Tensor[(9, 6, 5), int8], %var_5435: Tensor[(9, 6, 5), int8]) -> (Tensor[(9, 6, 5), bool], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), uint16], Tensor[(10, 8, 11), float32]) {
  @func_5432(%var_5434, %var_5435) /* ty=(Tensor[(9, 6, 5), bool], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), uint16], Tensor[(10, 8, 11), float32]) */
}

def @func_2226(%var_2225: Tensor[(5, 2, 4), uint32]) -> (Tensor[(5, 2, 4), uint32], Tensor[(5, 2, 4), float64]) {
  %356 = fn (%var_2213: Tensor[(5, 2, 4), uint32]) -> (Tensor[(5, 2, 4), uint32], Tensor[(5, 2, 4), float64]) {
    %349 = cast(meta[relay.Constant][18] /* ty=Tensor[(5, 2, 4), uint32] */, dtype="uint32") /* ty=Tensor[(5, 2, 4), uint32] */;
    %350 = shape_of(%var_2213, dtype="int32") /* ty=Tensor[(3), int32] */;
    %351 = cast(%var_2213, dtype="uint32") /* ty=Tensor[(5, 2, 4), uint32] */;
    %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %353 = cast(%var_2213, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
    %354 = bitwise_or(%351, %352) /* ty=Tensor[(5, 2, 4), uint32] */;
    %355 = sqrt(%353) /* ty=Tensor[(5, 2, 4), float64] */;
    (%354, %355)
  };
  %356(%var_2225) /* ty=(Tensor[(5, 2, 4), uint32], Tensor[(5, 2, 4), float64]) */
}

def @func_2832() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) {
  @func_2830() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) */
}

def @func_4703() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), uint16]) {
  %357 = @func_3093() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %358 = %357.0;
  %359 = @func_3641() /* ty=Tensor[(10, 8, 11), uint16] */;
  (%358, %359)
}

def @func_3798(%var_3796: Tensor[(8, 16), float64], %var_3797: Tensor[(10, 8, 11), float32]) -> (Tensor[(8, 16), float64], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), bool], Tensor[(10, 8, 11), uint16]) {
  @func_3794(%var_3796, %var_3797) /* ty=(Tensor[(8, 16), float64], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), bool], Tensor[(10, 8, 11), uint16]) */
}

def @func_6249(%var_6233: Tensor[(11, 2, 10), uint64]) -> Tensor[(11, 2, 10), uint64] {
  %360 = cast(%var_6233, dtype="uint64") /* ty=Tensor[(11, 2, 10), uint64] */;
  %361 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(11, 2, 10), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(meta[relay.Constant][19] /* ty=Tensor[(11, 2, 10), uint64] */, dtype="uint64") /* ty=Tensor[(11, 2, 10), uint64] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  minimum(%362, %363) /* ty=Tensor[(11, 2, 10), uint64] */
}

def @func_4455(%var_4454: Tensor[(1, 55), float32]) -> (Tensor[(10, 8, 11), float64], Tensor[(11, 10, 5), float32], Tensor[(1, 55), float32], Tensor[(550), float32]) {
  %371 = fn (%var_4442: Tensor[(1, 55), float32]) -> (Tensor[(10, 8, 11), float64], Tensor[(11, 10, 5), float32], Tensor[(1, 55), float32], Tensor[(550), float32]) {
    %364 = cast(%var_4442, dtype="float32") /* ty=Tensor[(1, 55), float32] */;
    %365 = cast(meta[relay.Constant][20] /* ty=Tensor[(550), float32] */, dtype="float32") /* ty=Tensor[(550), float32] */;
    %366 = reshape(%364, newshape=[11, 1, 5]) /* ty=Tensor[(11, 1, 5), float32] */;
    %367 = reshape(%365, newshape=[11, 10, 5]) /* ty=Tensor[(11, 10, 5), float32] */;
    %368 = @func_159(%366, %367) /* ty=(Tensor[(11, 10, 5), float32], Tensor[(11, 10, 5), float32]) */;
    %369 = @func_2819() /* ty=Tensor[(10, 8, 11), float64] */;
    %370 = %368.1;
    (%369, %370, %var_4442, meta[relay.Constant][20] /* ty=Tensor[(550), float32] */)
  };
  %371(%var_4454) /* ty=(Tensor[(10, 8, 11), float64], Tensor[(11, 10, 5), float32], Tensor[(1, 55), float32], Tensor[(550), float32]) */
}

def @func_2928(%var_2926: Tensor[(4, 10, 8), uint8], %var_2927: Tensor[(4, 10, 8), uint8]) -> (Tensor[(4, 10, 8), bool],) {
  %377 = fn (%var_2920: Tensor[(4, 10, 8), uint8], %var_2921: Tensor[(4, 10, 8), uint8]) -> (Tensor[(4, 10, 8), bool],) {
    %372 = cast(%var_2921, dtype="bool") /* ty=Tensor[(4, 10, 8), bool] */;
    %373 = shape_of(%var_2920, dtype="int32") /* ty=Tensor[(3), int32] */;
    %374 = cast(%var_2920, dtype="bool") /* ty=Tensor[(4, 10, 8), bool] */;
    %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %376 = less(%374, %375) /* ty=Tensor[(4, 10, 8), bool] */;
    (%376,)
  };
  %377(%var_2926, %var_2927) /* ty=(Tensor[(4, 10, 8), bool],) */
}

def @func_434(%var_433: Tensor[(15, 11, 7), float64]) -> Tensor[(15, 11, 7), float64] {
  %379 = fn (%var_429: Tensor[(15, 11, 7), float64]) -> Tensor[(15, 11, 7), float64] {
    %378 = cast(%var_429, dtype="float64") /* ty=Tensor[(15, 11, 7), float64] */;
    asin(%378) /* ty=Tensor[(15, 11, 7), float64] */
  };
  %379(%var_433) /* ty=Tensor[(15, 11, 7), float64] */
}

def @func_3687() -> Tensor[(10, 8, 11), float32] {
  %380 = @func_3093() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %380.0
}

def @func_5432(%var_5406: Tensor[(9, 6, 5), int8], %var_5407: Tensor[(9, 6, 5), int8]) -> (Tensor[(9, 6, 5), bool], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), uint16], Tensor[(10, 8, 11), float32]) {
  %381 = cast(%var_5407, dtype="bool") /* ty=Tensor[(9, 6, 5), bool] */;
  %382 = shape_of(%var_5406, dtype="int32") /* ty=Tensor[(3), int32] */;
  %383 = cast(%var_5406, dtype="bool") /* ty=Tensor[(9, 6, 5), bool] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %385 = @func_5138() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) */;
  %386 = @func_3981() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %387 = greater_equal(%383, %384) /* ty=Tensor[(9, 6, 5), bool] */;
  %388 = %385.0;
  %389 = @func_4769() /* ty=Tensor[(10, 8, 11), uint16] */;
  %390 = %386.0;
  (%387, %388, %389, %390)
}

def @func_3487() -> (Tensor[(10, 8, 11), float32],) {
  @func_3485() /* ty=(Tensor[(10, 8, 11), float32],) */
}

def @func_3559() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) {
  %394 = fn () -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) {
    %391 = @func_3485() /* ty=(Tensor[(10, 8, 11), float32],) */;
    %392 = %391.0;
    %393 = @func_2819() /* ty=Tensor[(10, 8, 11), float64] */;
    (%392, %393)
  };
  %394() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) */
}

def @func_3442(%var_3439: Tensor[(12, 16, 11), float64], %var_3440: Tensor[(2112), float64], %var_3441: Tensor[(168), uint16]) -> (Tensor[(12, 16, 11), float32], Tensor[(2112), float64], Tensor[(168), uint16], Tensor[(10, 8, 11), bool]) {
  %422 = fn (%var_3401: Tensor[(12, 16, 11), float64], %var_3409: Tensor[(2112), float64], %var_3414: Tensor[(168), uint16]) -> (Tensor[(12, 16, 11), float32], Tensor[(2112), float64], Tensor[(168), uint16], Tensor[(10, 8, 11), bool]) {
    %395 = cast(meta[relay.Constant][21] /* ty=Tensor[(2112), float64] */, dtype="float64") /* ty=Tensor[(2112), float64] */;
    %396 = cast(meta[relay.Constant][21] /* ty=Tensor[(2112), float64] */, dtype="float64") /* ty=Tensor[(2112), float64] */;
    %397 = reshape(%395, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), float64] */;
    %398 = reshape(%396, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), float64] */;
    %399 = @func_285(%397, %398) /* ty=(Tensor[(12, 16, 11), float64],) */;
    %400 = %399.0;
    %401 = cast(%var_3401, dtype="float32") /* ty=Tensor[(12, 16, 11), float32] */;
    %402 = shape_of(%400, dtype="int32") /* ty=Tensor[(3), int32] */;
    %403 = cast(%400, dtype="float32") /* ty=Tensor[(12, 16, 11), float32] */;
    %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %405 = cast(%var_3409, dtype="float64") /* ty=Tensor[(2112), float64] */;
    %406 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(2112), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %407 = cast(meta[relay.Constant][21] /* ty=Tensor[(2112), float64] */, dtype="float64") /* ty=Tensor[(2112), float64] */;
    %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?), float64] */;
    %409 = cast(%var_3414, dtype="uint16") /* ty=Tensor[(168), uint16] */;
    %410 = reshape(%409, newshape=[6, 28]) /* ty=Tensor[(6, 28), uint16] */;
    %411 = @func_2483(%410) /* ty=(Tensor[(10, 8, 11), float32], Tensor[(55), float32], Tensor[(6, 28), uint16]) */;
    %412 = %411.0;
    %413 = @func_3093() /* ty=(Tensor[(10, 8, 11), float32],) */;
    %414 = %413.0;
    %415 = cast(%414, dtype="bool") /* ty=Tensor[(10, 8, 11), bool] */;
    %416 = shape_of(%412, dtype="int32") /* ty=Tensor[(3), int32] */;
    %417 = cast(%412, dtype="bool") /* ty=Tensor[(10, 8, 11), bool] */;
    %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %419 = floor_mod(%403, %404) /* ty=Tensor[(12, 16, 11), float32] */;
    %420 = minimum(%407, %408) /* ty=Tensor[(2112), float64] */;
    %421 = greater(%417, %418) /* ty=Tensor[(10, 8, 11), bool] */;
    (%419, %420, %var_3414, %421)
  };
  %422(%var_3439, %var_3440, %var_3441) /* ty=(Tensor[(12, 16, 11), float32], Tensor[(2112), float64], Tensor[(168), uint16], Tensor[(10, 8, 11), bool]) */
}

def @func_7419() -> Tensor[(10, 8, 11), float32] {
  @func_7417() /* ty=Tensor[(10, 8, 11), float32] */
}

def @func_7145(%var_7142: Tensor[(1560), uint16], %var_7143: Tensor[(1560), uint16], %var_7144: Tensor[(96, 2), float32]) -> (Tensor[(10, 8, 11), float32], Tensor[(12, 16, 11), float64], Tensor[(8, 6, 4), bool], Tensor[(96, 2), float32], Tensor[(4, 10, 8), float64], Tensor[(1560), float32]) {
  %468 = fn (%var_7043: Tensor[(1560), uint16], %var_7051: Tensor[(1560), uint16], %var_7057: Tensor[(96, 2), float32]) -> (Tensor[(10, 8, 11), float32], Tensor[(12, 16, 11), float64], Tensor[(8, 6, 4), bool], Tensor[(96, 2), float32], Tensor[(4, 10, 8), float64], Tensor[(1560), float32]) {
    %423 = @func_3485() /* ty=(Tensor[(10, 8, 11), float32],) */;
    %424 = cast(%var_7043, dtype="uint16") /* ty=Tensor[(1560), uint16] */;
    %425 = reshape(%424, newshape=[13, 15, 8]) /* ty=Tensor[(13, 15, 8), uint16] */;
    %426 = @func_734(%425) /* ty=(Tensor[(13, 15, 8), uint16], Tensor[(12, 16, 11), float64], Tensor[(2112), float64], Tensor[(13, 15, 8), float32]) */;
    %427 = cast(%var_7057, dtype="float32") /* ty=Tensor[(96, 2), float32] */;
    %428 = reshape(%427, newshape=[8, 6, 4]) /* ty=Tensor[(8, 6, 4), float32] */;
    %429 = @func_1134(%428) /* ty=(Tensor[(8, 6, 4), bool],) */;
    %430 = cast(meta[relay.Constant][22] /* ty=Tensor[(320), uint8] */, dtype="uint8") /* ty=Tensor[(320), uint8] */;
    %431 = cast(meta[relay.Constant][22] /* ty=Tensor[(320), uint8] */, dtype="uint8") /* ty=Tensor[(320), uint8] */;
    %432 = reshape(%430, newshape=[4, 10, 8]) /* ty=Tensor[(4, 10, 8), uint8] */;
    %433 = reshape(%431, newshape=[4, 10, 8]) /* ty=Tensor[(4, 10, 8), uint8] */;
    %434 = @func_2925(%432, %433) /* ty=(Tensor[(4, 10, 8), bool],) */;
    %435 = %434.0;
    %436 = cast(meta[relay.Constant][22] /* ty=Tensor[(320), uint8] */, dtype="uint32") /* ty=Tensor[(320), uint32] */;
    %437 = shape_of(%435, dtype="int32") /* ty=Tensor[(3), int32] */;
    %438 = cast(%435, dtype="uint32") /* ty=Tensor[(4, 10, 8), uint32] */;
    %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %440 = bitwise_xor(%438, %439) /* ty=Tensor[(4, 10, 8), uint32] */;
    %441 = cast(%440, dtype="bool") /* ty=Tensor[(4, 10, 8), bool] */;
    %442 = shape_of(%435, dtype="int32") /* ty=Tensor[(3), int32] */;
    %443 = cast(%435, dtype="bool") /* ty=Tensor[(4, 10, 8), bool] */;
    %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %445 = less_equal(%443, %444) /* ty=Tensor[(4, 10, 8), bool] */;
    %446 = cast(%445, dtype="float64") /* ty=Tensor[(4, 10, 8), float64] */;
    %447 = cast(%var_7051, dtype="uint16") /* ty=Tensor[(1560), uint16] */;
    %448 = shape_of(%var_7043, dtype="int32") /* ty=Tensor[(1), int32] */;
    %449 = cast(%var_7043, dtype="uint16") /* ty=Tensor[(1560), uint16] */;
    %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %451 = left_shift(%449, %450) /* ty=Tensor[(1560), uint16] */;
    %452 = cast(%var_7051, dtype="bool") /* ty=Tensor[(1560), bool] */;
    %453 = shape_of(%451, dtype="int32") /* ty=Tensor[(1), int32] */;
    %454 = cast(%451, dtype="bool") /* ty=Tensor[(1560), bool] */;
    %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?), bool] */;
    %456 = logical_or(%454, %455) /* ty=Tensor[(1560), bool] */;
    %457 = cast(%456, dtype="float64") /* ty=Tensor[(1560), float64] */;
    %458 = shape_of(%451, dtype="int32") /* ty=Tensor[(1), int32] */;
    %459 = cast(%451, dtype="float64") /* ty=Tensor[(1560), float64] */;
    %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?), float64] */;
    %461 = divide(%459, %460) /* ty=Tensor[(1560), float64] */;
    %462 = cast(%461, dtype="float32") /* ty=Tensor[(1560), float32] */;
    %463 = %423.0;
    %464 = %426.1;
    %465 = %429.0;
    %466 = tan(%446) /* ty=Tensor[(4, 10, 8), float64] */;
    %467 = acosh(%462) /* ty=Tensor[(1560), float32] */;
    (%463, %464, %465, %var_7057, %466, %467)
  };
  %468(%var_7142, %var_7143, %var_7144) /* ty=(Tensor[(10, 8, 11), float32], Tensor[(12, 16, 11), float64], Tensor[(8, 6, 4), bool], Tensor[(96, 2), float32], Tensor[(4, 10, 8), float64], Tensor[(1560), float32]) */
}

def @func_7018() -> (Tensor[(10, 8, 11), float32],) {
  @func_7016() /* ty=(Tensor[(10, 8, 11), float32],) */
}

def @func_1137(%var_1135: Tensor[(8, 6, 4), float32]) -> (Tensor[(8, 6, 4), bool],) {
  @func_1134(%var_1135) /* ty=(Tensor[(8, 6, 4), bool],) */
}

def @func_4225() -> (Tensor[(10, 8, 11), float32],) {
  @func_4223() /* ty=(Tensor[(10, 8, 11), float32],) */
}

def @func_7486() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) {
  %472 = fn () -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) {
    %469 = @func_4703() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), uint16]) */;
    %470 = @func_5267() /* ty=Tensor[(10, 8, 11), float32] */;
    %471 = %469.0;
    (%470, %471)
  };
  %472() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) */
}

def @func_5328() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) {
  %473 = @func_3565() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %474 = %473.0;
  %475 = @func_5074() /* ty=Tensor[(10, 8, 11), float32] */;
  (%474, %475)
}

def @func_6752() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) {
  %480 = fn () -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) {
    %476 = @func_3485() /* ty=(Tensor[(10, 8, 11), float32],) */;
    %477 = @func_6534() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) */;
    %478 = %476.0;
    %479 = %477.1;
    (%478, %479)
  };
  %480() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) */
}

def @func_5596() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) {
  @func_5594() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) */
}

def @func_7180() -> (Tensor[(10, 8, 11), float32],) {
  %481 = @func_5074() /* ty=Tensor[(10, 8, 11), float32] */;
  (%481,)
}

def @func_4341(%var_4339: Tensor[(8, 16, 15), float32], %var_4340: Tensor[(2112), float64]) -> (Tensor[(10, 8, 11), float64], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32], Tensor[(12, 16, 11), float64], Tensor[(2112), float64], Tensor[(8, 16, 15), float64], Tensor[(10, 8, 11), float32]) {
  %518 = fn (%var_4237: Tensor[(8, 16, 15), float32], %var_4304: Tensor[(2112), float64]) -> (Tensor[(10, 8, 11), float64], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32], Tensor[(12, 16, 11), float64], Tensor[(2112), float64], Tensor[(8, 16, 15), float64], Tensor[(10, 8, 11), float32]) {
    %482 = @func_3498() /* ty=(Tensor[(10, 8, 11), float32],) */;
    %483 = @func_3104() /* ty=(Tensor[(10, 8, 11), float32],) */;
    %484 = cast(%var_4304, dtype="float64") /* ty=Tensor[(2112), float64] */;
    %485 = cast(%var_4304, dtype="float64") /* ty=Tensor[(2112), float64] */;
    %486 = reshape(%484, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), float64] */;
    %487 = reshape(%485, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), float64] */;
    %488 = @func_285(%486, %487) /* ty=(Tensor[(12, 16, 11), float64],) */;
    %489 = cast(%var_4237, dtype="float32") /* ty=Tensor[(8, 16, 15), float32] */;
    %490 = tan(%489) /* ty=Tensor[(8, 16, 15), float32] */;
    %491 = cast(%var_4237, dtype="float32") /* ty=Tensor[(8, 16, 15), float32] */;
    %492 = asin(%491) /* ty=Tensor[(8, 16, 15), float32] */;
    %493 = cast(%492, dtype="float64") /* ty=Tensor[(8, 16, 15), float64] */;
    %494 = acos(%493) /* ty=Tensor[(8, 16, 15), float64] */;
    %495 = cast(%var_4237, dtype="int16") /* ty=Tensor[(8, 16, 15), int16] */;
    %496 = shape_of(%494, dtype="int32") /* ty=Tensor[(3), int32] */;
    %497 = cast(%494, dtype="int16") /* ty=Tensor[(8, 16, 15), int16] */;
    %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %499 = logical_xor(%497, %498) /* ty=Tensor[(8, 16, 15), int16] */;
    %500 = cast(%var_4237, dtype="bool") /* ty=Tensor[(8, 16, 15), bool] */;
    %501 = shape_of(%499, dtype="int32") /* ty=Tensor[(3), int32] */;
    %502 = cast(%499, dtype="bool") /* ty=Tensor[(8, 16, 15), bool] */;
    %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %504 = equal(%502, %503) /* ty=Tensor[(8, 16, 15), bool] */;
    %505 = cast(%504, dtype="bool") /* ty=Tensor[(8, 16, 15), bool] */;
    %506 = shape_of(%490, dtype="int32") /* ty=Tensor[(3), int32] */;
    %507 = cast(%490, dtype="bool") /* ty=Tensor[(8, 16, 15), bool] */;
    %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %509 = logical_and(%507, %508) /* ty=Tensor[(8, 16, 15), bool] */;
    %510 = cast(%509, dtype="float64") /* ty=Tensor[(8, 16, 15), float64] */;
    %511 = @func_3565() /* ty=(Tensor[(10, 8, 11), float32],) */;
    %512 = @func_2819() /* ty=Tensor[(10, 8, 11), float64] */;
    %513 = %482.0;
    %514 = %483.0;
    %515 = %488.0;
    %516 = log10(%510) /* ty=Tensor[(8, 16, 15), float64] */;
    %517 = %511.0;
    (%512, %513, %514, %515, %var_4304, %516, %517)
  };
  %518(%var_4339, %var_4340) /* ty=(Tensor[(10, 8, 11), float64], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32], Tensor[(12, 16, 11), float64], Tensor[(2112), float64], Tensor[(8, 16, 15), float64], Tensor[(10, 8, 11), float32]) */
}

def @func_3794(%var_3699: Tensor[(8, 16), float64], %var_3735: Tensor[(10, 8, 11), float32]) -> (Tensor[(8, 16), float64], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), bool], Tensor[(10, 8, 11), uint16]) {
  %519 = cast(%var_3699, dtype="float64") /* ty=Tensor[(8, 16), float64] */;
  %520 = @func_3666() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %521 = %520.0;
  %522 = cast(%var_3735, dtype="int64") /* ty=Tensor[(10, 8, 11), int64] */;
  %523 = shape_of(%521, dtype="int32") /* ty=Tensor[(3), int32] */;
  %524 = cast(%521, dtype="int64") /* ty=Tensor[(10, 8, 11), int64] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %526 = bitwise_or(%524, %525) /* ty=Tensor[(10, 8, 11), int64] */;
  %527 = cast(%526, dtype="float32") /* ty=Tensor[(10, 8, 11), float32] */;
  %528 = @func_3666() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %529 = %528.0;
  %530 = cast(%529, dtype="bool") /* ty=Tensor[(10, 8, 11), bool] */;
  %531 = shape_of(%var_3735, dtype="int32") /* ty=Tensor[(3), int32] */;
  %532 = cast(%var_3735, dtype="bool") /* ty=Tensor[(10, 8, 11), bool] */;
  %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %534 = sigmoid(%519) /* ty=Tensor[(8, 16), float64] */;
  %535 = sigmoid(%527) /* ty=Tensor[(10, 8, 11), float32] */;
  %536 = less(%532, %533) /* ty=Tensor[(10, 8, 11), bool] */;
  %537 = @func_3641() /* ty=Tensor[(10, 8, 11), uint16] */;
  (%534, %535, %536, %537)
}

def @func_3256(%var_3251: Tensor[(420), float64], %var_3252: Tensor[(360), uint32], %var_3253: Tensor[(10, 8, 11), float64], %var_3254: Tensor[(234, 3), float64], %var_3255: Tensor[(168), uint16]) -> (Tensor[(14, 3, 10), float64], Tensor[(420), float64], Tensor[(10, 8, 11), bool], Tensor[(12, 2, 15), uint32], Tensor[(8, 6, 4), bool], Tensor[(192), float32], Tensor[(12, 16, 11), float64], Tensor[(2112), float64], Tensor[(10, 8, 11), float32], Tensor[(6, 13, 9), uint8], Tensor[(234, 3), float64], Tensor[(1248), float32], Tensor[(55), float32], Tensor[(168), uint16]) {
  %582 = fn (%var_3175: Tensor[(420), float64], %var_3178: Tensor[(360), uint32], %var_3185: Tensor[(10, 8, 11), float64], %var_3221: Tensor[(234, 3), float64], %var_3247: Tensor[(168), uint16]) -> (Tensor[(14, 3, 10), float64], Tensor[(420), float64], Tensor[(10, 8, 11), bool], Tensor[(12, 2, 15), uint32], Tensor[(8, 6, 4), bool], Tensor[(192), float32], Tensor[(12, 16, 11), float64], Tensor[(2112), float64], Tensor[(10, 8, 11), float32], Tensor[(6, 13, 9), uint8], Tensor[(234, 3), float64], Tensor[(1248), float32], Tensor[(55), float32], Tensor[(168), uint16]) {
    %538 = cast(%var_3175, dtype="float64") /* ty=Tensor[(420), float64] */;
    %539 = reshape(%538, newshape=[14, 3, 10]) /* ty=Tensor[(14, 3, 10), float64] */;
    %540 = @func_1175(%539) /* ty=(Tensor[(14, 3, 10), float64],) */;
    %541 = @func_2417() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) */;
    %542 = %541.1;
    %543 = cast(%var_3185, dtype="bool") /* ty=Tensor[(10, 8, 11), bool] */;
    %544 = shape_of(%542, dtype="int32") /* ty=Tensor[(3), int32] */;
    %545 = cast(%542, dtype="bool") /* ty=Tensor[(10, 8, 11), bool] */;
    %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %547 = cast(%var_3178, dtype="uint32") /* ty=Tensor[(360), uint32] */;
    %548 = cast(%var_3178, dtype="uint32") /* ty=Tensor[(360), uint32] */;
    %549 = reshape(%547, newshape=[12, 2, 15]) /* ty=Tensor[(12, 2, 15), uint32] */;
    %550 = reshape(%548, newshape=[12, 2, 15]) /* ty=Tensor[(12, 2, 15), uint32] */;
    %551 = @func_1384(%549, %550) /* ty=(Tensor[(3, 8, 7), bool], Tensor[(84, 2), uint16], Tensor[(12, 2, 15), bool]) */;
    %552 = %551.2;
    %553 = cast(%var_3178, dtype="uint32") /* ty=Tensor[(360), uint32] */;
    %554 = shape_of(%552, dtype="int32") /* ty=Tensor[(3), int32] */;
    %555 = cast(%552, dtype="uint32") /* ty=Tensor[(12, 2, 15), uint32] */;
    %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %557 = cast(meta[relay.Constant][23] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
    %558 = reshape(%557, newshape=[8, 6, 4]) /* ty=Tensor[(8, 6, 4), float32] */;
    %559 = @func_1134(%558) /* ty=(Tensor[(8, 6, 4), bool],) */;
    %560 = cast(meta[relay.Constant][24] /* ty=Tensor[(2112), float64] */, dtype="float64") /* ty=Tensor[(2112), float64] */;
    %561 = cast(meta[relay.Constant][24] /* ty=Tensor[(2112), float64] */, dtype="float64") /* ty=Tensor[(2112), float64] */;
    %562 = reshape(%560, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), float64] */;
    %563 = reshape(%561, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), float64] */;
    %564 = @func_285(%562, %563) /* ty=(Tensor[(12, 16, 11), float64],) */;
    %565 = @func_2675() /* ty=(Tensor[(10, 8, 11), float32],) */;
    %566 = cast(%var_3221, dtype="float64") /* ty=Tensor[(234, 3), float64] */;
    %567 = cast(meta[relay.Constant][25] /* ty=Tensor[(1248), float32] */, dtype="float32") /* ty=Tensor[(1248), float32] */;
    %568 = reshape(%566, newshape=[6, 13, 9]) /* ty=Tensor[(6, 13, 9), float64] */;
    %569 = reshape(%567, newshape=[1248]) /* ty=Tensor[(1248), float32] */;
    %570 = @func_2578(%568, %569) /* ty=(Tensor[(13, 8, 12), float32], Tensor[(1248), float32], Tensor[(6, 13, 9), uint8]) */;
    %571 = cast(%var_3247, dtype="uint16") /* ty=Tensor[(168), uint16] */;
    %572 = reshape(%571, newshape=[3, 8, 7]) /* ty=Tensor[(3, 8, 7), uint16] */;
    %573 = @func_900(%572) /* ty=(Tensor[(55), float32], Tensor[(3, 8, 7), bool], Tensor[(11, 10, 5), uint8]) */;
    %574 = %540.0;
    %575 = equal(%545, %546) /* ty=Tensor[(10, 8, 11), bool] */;
    %576 = subtract(%555, %556) /* ty=Tensor[(12, 2, 15), uint32] */;
    %577 = %559.0;
    %578 = %564.0;
    %579 = %565.0;
    %580 = %570.2;
    %581 = %573.0;
    (%574, %var_3175, %575, %576, %577, meta[relay.Constant][23] /* ty=Tensor[(192), float32] */, %578, meta[relay.Constant][24] /* ty=Tensor[(2112), float64] */, %579, %580, %var_3221, meta[relay.Constant][25] /* ty=Tensor[(1248), float32] */, %581, %var_3247)
  };
  %582(%var_3251, %var_3252, %var_3253, %var_3254, %var_3255) /* ty=(Tensor[(14, 3, 10), float64], Tensor[(420), float64], Tensor[(10, 8, 11), bool], Tensor[(12, 2, 15), uint32], Tensor[(8, 6, 4), bool], Tensor[(192), float32], Tensor[(12, 16, 11), float64], Tensor[(2112), float64], Tensor[(10, 8, 11), float32], Tensor[(6, 13, 9), uint8], Tensor[(234, 3), float64], Tensor[(1248), float32], Tensor[(55), float32], Tensor[(168), uint16]) */
}

def @func_3974() -> Tensor[(10, 8, 11), float32] {
  %583 = @func_3565() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %583.0
}

def @func_5330() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) {
  @func_5328() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) */
}

def @func_4018(%var_4016: Tensor[(1155), float64], %var_4017: Tensor[(168), uint16]) -> (Tensor[(14, 3, 10), float64], Tensor[(231, 1), uint8], Tensor[(1155), float64], Tensor[(168), uint16], Tensor[(12, 4, 10), int64]) {
  %604 = fn (%var_4000: Tensor[(1155), float64], %var_4001: Tensor[(168), uint16]) -> (Tensor[(14, 3, 10), float64], Tensor[(231, 1), uint8], Tensor[(1155), float64], Tensor[(168), uint16], Tensor[(12, 4, 10), int64]) {
    %584 = cast(meta[relay.Constant][26] /* ty=Tensor[(231, 1), uint8] */, dtype="uint8") /* ty=Tensor[(231, 1), uint8] */;
    %585 = cast(meta[relay.Constant][26] /* ty=Tensor[(231, 1), uint8] */, dtype="uint8") /* ty=Tensor[(231, 1), uint8] */;
    %586 = cast(%var_4000, dtype="float64") /* ty=Tensor[(1155), float64] */;
    %587 = cast(%var_4001, dtype="uint16") /* ty=Tensor[(168), uint16] */;
    %588 = reshape(%584, newshape=[11, 3, 7]) /* ty=Tensor[(11, 3, 7), uint8] */;
    %589 = reshape(%585, newshape=[11, 3, 7]) /* ty=Tensor[(11, 3, 7), uint8] */;
    %590 = reshape(%586, newshape=[1155]) /* ty=Tensor[(1155), float64] */;
    %591 = reshape(%587, newshape=[84, 2]) /* ty=Tensor[(84, 2), uint16] */;
    %592 = @func_1258(%588, %589, %590, %591) /* ty=(Tensor[(11, 3, 7), uint8], Tensor[(15, 11, 7), float64], Tensor[(1155), float64], Tensor[(14, 3, 10), float64], Tensor[(420), float64], Tensor[(14, 3, 10), float64], Tensor[(11, 10, 5), uint8], Tensor[(84, 2), uint16]) */;
    %593 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %594 = cast(meta[relay.Constant][27] /* ty=Tensor[(12, 4, 10), bool] */, dtype="bool") /* ty=Tensor[(12, 4, 10), bool] */;
    %595 = logical_or(%593, %594) /* ty=Tensor[(12, 4, 10), bool] */;
    %596 = cast(%595, dtype="float64") /* ty=Tensor[(12, 4, 10), float64] */;
    %597 = asin(%596) /* ty=Tensor[(12, 4, 10), float64] */;
    %598 = cast(%595, dtype="int64") /* ty=Tensor[(12, 4, 10), int64] */;
    %599 = shape_of(%597, dtype="int32") /* ty=Tensor[(3), int32] */;
    %600 = cast(%597, dtype="int64") /* ty=Tensor[(12, 4, 10), int64] */;
    %601 = dyn.reshape(%598, %599, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %602 = %592.5;
    %603 = multiply(%600, %601) /* ty=Tensor[(12, 4, 10), int64] */;
    (%602, meta[relay.Constant][26] /* ty=Tensor[(231, 1), uint8] */, %var_4000, %var_4001, %603)
  };
  %604(%var_4016, %var_4017) /* ty=(Tensor[(14, 3, 10), float64], Tensor[(231, 1), uint8], Tensor[(1155), float64], Tensor[(168), uint16], Tensor[(12, 4, 10), int64]) */
}

def @func_5692(%var_5666: Tensor[(336), int32]) -> (Tensor[(10, 8, 11), float32], Tensor[(16, 3, 7), int32], Tensor[(336), int32], Tensor[(10, 8, 11), float32]) {
  %605 = @func_3981() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %606 = cast(%var_5666, dtype="int32") /* ty=Tensor[(336), int32] */;
  %607 = cast(%var_5666, dtype="int32") /* ty=Tensor[(336), int32] */;
  %608 = reshape(%606, newshape=[16, 3, 7]) /* ty=Tensor[(16, 3, 7), int32] */;
  %609 = reshape(%607, newshape=[16, 3, 7]) /* ty=Tensor[(16, 3, 7), int32] */;
  %610 = @func_3967() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %611 = %610.0;
  %612 = cast(%611, dtype="float32") /* ty=Tensor[(10, 8, 11), float32] */;
  %613 = %605.0;
  %614 = @func_4643(%608, %609) /* ty=Tensor[(16, 3, 7), int32] */;
  %615 = tan(%612) /* ty=Tensor[(10, 8, 11), float32] */;
  (%613, %614, %var_5666, %615)
}

def @func_6920(%var_6917: Tensor[(1560), uint16], %var_6918: Tensor[(10, 8, 11), float32], %var_6919: Tensor[(1155), float64]) -> (Tensor[(10, 8, 11), uint16], Tensor[(10, 8, 11), float32], Tensor[(1560), uint16], Tensor[(55), float32], Tensor[(84, 26), uint32], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), bool], Tensor[(10, 8, 11), float32], Tensor[(15, 11, 7), float64], Tensor[(3, 3), float64], Tensor[(1155), float64]) {
  @func_6915(%var_6917, %var_6918, %var_6919) /* ty=(Tensor[(10, 8, 11), uint16], Tensor[(10, 8, 11), float32], Tensor[(1560), uint16], Tensor[(55), float32], Tensor[(84, 26), uint32], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), bool], Tensor[(10, 8, 11), float32], Tensor[(15, 11, 7), float64], Tensor[(3, 3), float64], Tensor[(1155), float64]) */
}

def @func_4223() -> (Tensor[(10, 8, 11), float32],) {
  %616 = @func_2417() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) */;
  %617 = %616.0;
  (%617,)
}

def @func_1175(%var_1171: Tensor[(14, 3, 10), float64]) -> (Tensor[(14, 3, 10), float64],) {
  %618 = cast(%var_1171, dtype="float64") /* ty=Tensor[(14, 3, 10), float64] */;
  %619 = cosh(%618) /* ty=Tensor[(14, 3, 10), float64] */;
  (%619,)
}

def @func_5499(%var_5497: Tensor[(13, 7, 4), float64]) -> (Tensor[(13, 7, 4), float64], Tensor[(10, 8, 11), float32]) {
  @func_5496(%var_5497) /* ty=(Tensor[(13, 7, 4), float64], Tensor[(10, 8, 11), float32]) */
}

def @func_6362() -> (Tensor[(10, 8, 11), uint16], Tensor[(10, 8, 11), float32]) {
  %623 = fn () -> (Tensor[(10, 8, 11), uint16], Tensor[(10, 8, 11), float32]) {
    %620 = @func_3565() /* ty=(Tensor[(10, 8, 11), float32],) */;
    %621 = @func_3641() /* ty=Tensor[(10, 8, 11), uint16] */;
    %622 = %620.0;
    (%621, %622)
  };
  %623() /* ty=(Tensor[(10, 8, 11), uint16], Tensor[(10, 8, 11), float32]) */
}

def @func_5038() -> (Tensor[(10, 8, 11), float64],) {
  %624 = @func_2819() /* ty=Tensor[(10, 8, 11), float64] */;
  (%624,)
}

def @func_4726() -> Tensor[(10, 8, 11), float32] {
  @func_4724() /* ty=Tensor[(10, 8, 11), float32] */
}

def @func_2582(%var_2580: Tensor[(6, 13, 9), float64], %var_2581: Tensor[(1248), float32]) -> (Tensor[(13, 8, 12), float32], Tensor[(1248), float32], Tensor[(6, 13, 9), uint8]) {
  @func_2578(%var_2580, %var_2581) /* ty=(Tensor[(13, 8, 12), float32], Tensor[(1248), float32], Tensor[(6, 13, 9), uint8]) */
}

def @func_2418() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) {
  %629 = fn () -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) {
    %625 = cast(meta[relay.Constant][28] /* ty=Tensor[(10, 8, 11), float32] */, dtype="float32") /* ty=Tensor[(10, 8, 11), float32] */;
    %626 = cast(meta[relay.Constant][28] /* ty=Tensor[(10, 8, 11), float32] */, dtype="float64") /* ty=Tensor[(10, 8, 11), float64] */;
    %627 = sinh(%625) /* ty=Tensor[(10, 8, 11), float32] */;
    %628 = acos(%626) /* ty=Tensor[(10, 8, 11), float64] */;
    (%627, %628)
  };
  %629() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) */
}

def @func_3667() -> (Tensor[(10, 8, 11), float32],) {
  %632 = fn () -> (Tensor[(10, 8, 11), float32],) {
    %630 = @func_2953() /* ty=(Tensor[(10, 8, 11), float32],) */;
    %631 = %630.0;
    (%631,)
  };
  %632() /* ty=(Tensor[(10, 8, 11), float32],) */
}

def @func_3106() -> (Tensor[(10, 8, 11), float32],) {
  @func_3104() /* ty=(Tensor[(10, 8, 11), float32],) */
}

def @func_2830() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) {
  %633 = @func_2675() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %634 = @func_2675() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %635 = %633.0;
  %636 = %634.0;
  (%635, %636)
}

def @func_6571(%var_6569: Tensor[(6, 28), uint16]) -> (Tensor[(10, 8, 11), float64], Tensor[(10, 8, 11), float32], Tensor[(55), float32], Tensor[(6, 28), uint16]) {
  @func_6568(%var_6569) /* ty=(Tensor[(10, 8, 11), float64], Tensor[(10, 8, 11), float32], Tensor[(55), float32], Tensor[(6, 28), uint16]) */
}

def @func_2578(%var_2518: Tensor[(6, 13, 9), float64], %var_2535: Tensor[(1248), float32]) -> (Tensor[(13, 8, 12), float32], Tensor[(1248), float32], Tensor[(6, 13, 9), uint8]) {
  %637 = cast(%var_2535, dtype="float32") /* ty=Tensor[(1248), float32] */;
  %638 = reshape(%637, newshape=[13, 8, 12]) /* ty=Tensor[(13, 8, 12), float32] */;
  %639 = @func_1645(%638) /* ty=(Tensor[(13, 8, 12), float32], Tensor[(3, 8, 7), bool], Tensor[(168), uint16]) */;
  %640 = cast(%var_2518, dtype="float64") /* ty=Tensor[(6, 13, 9), float64] */;
  %641 = asinh(%640) /* ty=Tensor[(6, 13, 9), float64] */;
  %642 = cast(%var_2518, dtype="float64") /* ty=Tensor[(6, 13, 9), float64] */;
  %643 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(6, 13, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %644 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 13, 9), float64] */, dtype="float64") /* ty=Tensor[(6, 13, 9), float64] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %646 = maximum(%644, %645) /* ty=Tensor[(6, 13, 9), float64] */;
  %647 = cast(%646, dtype="uint8") /* ty=Tensor[(6, 13, 9), uint8] */;
  %648 = shape_of(%641, dtype="int32") /* ty=Tensor[(3), int32] */;
  %649 = cast(%641, dtype="uint8") /* ty=Tensor[(6, 13, 9), uint8] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %651 = %639.0;
  %652 = bitwise_and(%649, %650) /* ty=Tensor[(6, 13, 9), uint8] */;
  (%651, %var_2535, %652)
}

def @func_5695(%var_5693: Tensor[(336), int32]) -> (Tensor[(10, 8, 11), float32], Tensor[(16, 3, 7), int32], Tensor[(336), int32], Tensor[(10, 8, 11), float32]) {
  @func_5692(%var_5693) /* ty=(Tensor[(10, 8, 11), float32], Tensor[(16, 3, 7), int32], Tensor[(336), int32], Tensor[(10, 8, 11), float32]) */
}

def @func_7518(%var_7516: Tensor[(5, 14, 13), float32]) -> Tensor[(5, 14, 13), float32] {
  @func_7515(%var_7516) /* ty=Tensor[(5, 14, 13), float32] */
}

def @func_6132(%var_6129: Tensor[(780, 2), int32], %var_6130: float64, %var_6131: Tensor[(780, 2), float64]) -> (Tensor[(10, 8, 11), float32], Tensor[(780, 2), float32], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32], Tensor[(11, 6, 6), float64], Tensor[(780, 2), float32], Tensor[(780, 2), float32], Tensor[(780, 2), float32], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) {
  %691 = fn (%var_6000: Tensor[(780, 2), int32], %var_6086: float64, %var_6089: Tensor[(780, 2), float64]) -> (Tensor[(10, 8, 11), float32], Tensor[(780, 2), float32], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32], Tensor[(11, 6, 6), float64], Tensor[(780, 2), float32], Tensor[(780, 2), float32], Tensor[(780, 2), float32], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) {
    %653 = cast(%var_6000, dtype="int32") /* ty=Tensor[(780, 2), int32] */;
    %654 = cast(%var_6000, dtype="int32") /* ty=Tensor[(780, 2), int32] */;
    %655 = reshape(%653, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), int32] */;
    %656 = reshape(%654, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), int32] */;
    %657 = @func_5562(%655, %656) /* ty=Tensor[(12, 10, 13), bool] */;
    %658 = cast(%657, dtype="float32") /* ty=Tensor[(12, 10, 13), float32] */;
    %659 = shape_of(%var_6000, dtype="int32") /* ty=Tensor[(2), int32] */;
    %660 = cast(%var_6000, dtype="float32") /* ty=Tensor[(780, 2), float32] */;
    %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %662 = cast(%var_6086, dtype="float64") /* ty=float64 */;
    %663 = reshape(%662, newshape=[]) /* ty=float64 */;
    %664 = @func_3591(%663) /* ty=(Tensor[(11, 6, 6), float64],) */;
    %665 = cast(%657, dtype="float64") /* ty=Tensor[(12, 10, 13), float64] */;
    %666 = shape_of(%var_6000, dtype="int32") /* ty=Tensor[(2), int32] */;
    %667 = cast(%var_6000, dtype="float64") /* ty=Tensor[(780, 2), float64] */;
    %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %669 = maximum(%667, %668) /* ty=Tensor[(780, 2), float64] */;
    %670 = cast(%669, dtype="float64") /* ty=Tensor[(780, 2), float64] */;
    %671 = asinh(%670) /* ty=Tensor[(780, 2), float64] */;
    %672 = cast(%671, dtype="float64") /* ty=Tensor[(780, 2), float64] */;
    %673 = atanh(%672) /* ty=Tensor[(780, 2), float64] */;
    %674 = cast(%var_6089, dtype="float32") /* ty=Tensor[(780, 2), float32] */;
    %675 = shape_of(%673, dtype="int32") /* ty=Tensor[(2), int32] */;
    %676 = cast(%673, dtype="float32") /* ty=Tensor[(780, 2), float32] */;
    %677 = dyn.reshape(%674, %675, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %678 = cast(%671, dtype="float32") /* ty=Tensor[(780, 2), float32] */;
    %679 = cast(%671, dtype="float32") /* ty=Tensor[(780, 2), float32] */;
    %680 = cast(%var_6086, dtype="float32") /* ty=float32 */;
    %681 = @func_3687() /* ty=Tensor[(10, 8, 11), float32] */;
    %682 = mod(%660, %661) /* ty=Tensor[(780, 2), float32] */;
    %683 = @func_4809() /* ty=Tensor[(10, 8, 11), float32] */;
    %684 = @func_4809() /* ty=Tensor[(10, 8, 11), float32] */;
    %685 = %664.0;
    %686 = divide(%676, %677) /* ty=Tensor[(780, 2), float32] */;
    %687 = acos(%678) /* ty=Tensor[(780, 2), float32] */;
    %688 = minimum(%679, %680) /* ty=Tensor[(780, 2), float32] */;
    %689 = @func_3687() /* ty=Tensor[(10, 8, 11), float32] */;
    %690 = @func_3974() /* ty=Tensor[(10, 8, 11), float32] */;
    (%681, %682, %683, %684, %685, %686, %687, %688, %689, %690)
  };
  %691(%var_6129, %var_6130, %var_6131) /* ty=(Tensor[(10, 8, 11), float32], Tensor[(780, 2), float32], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32], Tensor[(11, 6, 6), float64], Tensor[(780, 2), float32], Tensor[(780, 2), float32], Tensor[(780, 2), float32], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) */
}

def @func_6964() -> (Tensor[(10, 8, 11), float32],) {
  %694 = fn () -> (Tensor[(10, 8, 11), float32],) {
    %692 = @func_3485() /* ty=(Tensor[(10, 8, 11), float32],) */;
    %693 = %692.0;
    (%693,)
  };
  %694() /* ty=(Tensor[(10, 8, 11), float32],) */
}

def @func_3078(%var_3045: Tensor[(720), float32], %var_3050: Tensor[(11, 10, 5), uint8], %var_3061: Tensor[(9, 1), float64], %var_3062: Tensor[(1155), float64]) -> (Tensor[(168), uint16], Tensor[(5, 9, 16), float32], Tensor[(720), float32], Tensor[(11, 10, 5), bool], Tensor[(9, 1), float64], Tensor[(1155), float64], Tensor[(1155), float64]) {
  %695 = @func_2787() /* ty=(Tensor[(10, 8, 11), uint16], Tensor[(10, 8, 11), float32], Tensor[(55), float32], Tensor[(168), uint16]) */;
  %696 = cast(%var_3045, dtype="float32") /* ty=Tensor[(720), float32] */;
  %697 = reshape(%696, newshape=[5, 9, 16]) /* ty=Tensor[(5, 9, 16), float32] */;
  %698 = @func_510(%697) /* ty=(Tensor[(5, 9, 16), float32],) */;
  %699 = @func_2999() /* ty=(Tensor[(11, 10, 5), uint8], Tensor[(168), uint16], Tensor[(11, 10, 5), uint8], Tensor[(10, 8, 11), bool]) */;
  %700 = %699.0;
  %701 = cast(%var_3050, dtype="bool") /* ty=Tensor[(11, 10, 5), bool] */;
  %702 = shape_of(%700, dtype="int32") /* ty=Tensor[(3), int32] */;
  %703 = cast(%700, dtype="bool") /* ty=Tensor[(11, 10, 5), bool] */;
  %704 = dyn.reshape(%701, %702, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %705 = cast(%var_3061, dtype="float64") /* ty=Tensor[(9, 1), float64] */;
  %706 = cast(%var_3062, dtype="float64") /* ty=Tensor[(1155), float64] */;
  %707 = reshape(%705, newshape=[3, 3, 1]) /* ty=Tensor[(3, 3, 1), float64] */;
  %708 = reshape(%706, newshape=[1155]) /* ty=Tensor[(1155), float64] */;
  %709 = @func_1890(%707, %708) /* ty=(Tensor[(3, 3, ?), bool], Tensor[(15, 11, 7), float64], Tensor[(1155), float64]) */;
  %710 = %709.2;
  %711 = cast(%710, dtype="float64") /* ty=Tensor[(1155), float64] */;
  %712 = %695.3;
  %713 = %698.0;
  %714 = logical_or(%703, %704) /* ty=Tensor[(11, 10, 5), bool] */;
  %715 = acosh(%711) /* ty=Tensor[(1155), float64] */;
  (%712, %713, %var_3045, %714, %var_3061, %var_3062, %715)
}

def @func_5770() -> (Tensor[(10, 8, 11), uint16],) {
  @func_5768() /* ty=(Tensor[(10, 8, 11), uint16],) */
}

def @func_900(%var_873: Tensor[(3, 8, 7), uint16]) -> (Tensor[(55), float32], Tensor[(3, 8, 7), bool], Tensor[(11, 10, 5), uint8]) {
  %716 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 8, 7), uint16] */, dtype="bool") /* ty=Tensor[(3, 8, 7), bool] */;
  %717 = shape_of(%var_873, dtype="int32") /* ty=Tensor[(3), int32] */;
  %718 = cast(%var_873, dtype="bool") /* ty=Tensor[(3, 8, 7), bool] */;
  %719 = dyn.reshape(%716, %717, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %720 = not_equal(%718, %719) /* ty=Tensor[(3, 8, 7), bool] */;
  %721 = cast(%720, dtype="bool") /* ty=Tensor[(3, 8, 7), bool] */;
  %722 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(3, 8, 7), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %723 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 8, 7), uint16] */, dtype="bool") /* ty=Tensor[(3, 8, 7), bool] */;
  %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %725 = cast(meta[relay.Constant][30] /* ty=Tensor[(55), float32] */, dtype="float32") /* ty=Tensor[(55), float32] */;
  %726 = cast(meta[relay.Constant][32] /* ty=Tensor[(550), float32] */, dtype="float32") /* ty=Tensor[(550), float32] */;
  %727 = reshape(%725, newshape=[11, 1, 5]) /* ty=Tensor[(11, 1, 5), float32] */;
  %728 = reshape(%726, newshape=[11, 10, 5]) /* ty=Tensor[(11, 10, 5), float32] */;
  %729 = @func_159(%727, %728) /* ty=(Tensor[(11, 10, 5), float32], Tensor[(11, 10, 5), float32]) */;
  %730 = %729.1;
  %731 = cast(meta[relay.Constant][32] /* ty=Tensor[(550), float32] */, dtype="uint8") /* ty=Tensor[(550), uint8] */;
  %732 = shape_of(%730, dtype="int32") /* ty=Tensor[(3), int32] */;
  %733 = cast(%730, dtype="uint8") /* ty=Tensor[(11, 10, 5), uint8] */;
  %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %735 = less_equal(%723, %724) /* ty=Tensor[(3, 8, 7), bool] */;
  %736 = right_shift(%733, %734) /* ty=Tensor[(11, 10, 5), uint8] */;
  (meta[relay.Constant][30] /* ty=Tensor[(55), float32] */, %735, %736)
}

def @func_2624(%var_2623: Tensor[(42, 4), uint16]) -> (Tensor[(3, 8, 7), bool], Tensor[(42, 4), uint16], Tensor[(10, 8, 11), float64]) {
  %745 = fn (%var_2590: Tensor[(42, 4), uint16]) -> (Tensor[(3, 8, 7), bool], Tensor[(42, 4), uint16], Tensor[(10, 8, 11), float64]) {
    %737 = cast(%var_2590, dtype="uint16") /* ty=Tensor[(42, 4), uint16] */;
    %738 = reshape(%737, newshape=[3, 8, 7]) /* ty=Tensor[(3, 8, 7), uint16] */;
    %739 = @func_900(%738) /* ty=(Tensor[(55), float32], Tensor[(3, 8, 7), bool], Tensor[(11, 10, 5), uint8]) */;
    %740 = @func_2417() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) */;
    %741 = %740.1;
    %742 = cast(%741, dtype="float64") /* ty=Tensor[(10, 8, 11), float64] */;
    %743 = %739.1;
    %744 = sin(%742) /* ty=Tensor[(10, 8, 11), float64] */;
    (%743, %var_2590, %744)
  };
  %745(%var_2623) /* ty=(Tensor[(3, 8, 7), bool], Tensor[(42, 4), uint16], Tensor[(10, 8, 11), float64]) */
}

def @func_3309(%var_3306: Tensor[(12, 14, 13), float64], %var_3307: Tensor[(1560, 1), uint16], %var_3308: Tensor[(55), float32]) -> (Tensor[(12, 14, 13), float64], Tensor[(13, 15, 8), uint16], Tensor[(1560, 1), uint16], Tensor[(11, 10, 5), float32], Tensor[(55), float32], Tensor[(275, 2), float32]) {
  %761 = fn (%var_3277: Tensor[(12, 14, 13), float64], %var_3282: Tensor[(1560, 1), uint16], %var_3298: Tensor[(55), float32]) -> (Tensor[(12, 14, 13), float64], Tensor[(13, 15, 8), uint16], Tensor[(1560, 1), uint16], Tensor[(11, 10, 5), float32], Tensor[(55), float32], Tensor[(275, 2), float32]) {
    %746 = cast(-5.84401f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %747 = cast(%var_3277, dtype="float64") /* ty=Tensor[(12, 14, 13), float64] */;
    %748 = cast(%var_3282, dtype="uint16") /* ty=Tensor[(1560, 1), uint16] */;
    %749 = reshape(%748, newshape=[13, 15, 8]) /* ty=Tensor[(13, 15, 8), uint16] */;
    %750 = @func_734(%749) /* ty=(Tensor[(13, 15, 8), uint16], Tensor[(12, 16, 11), float64], Tensor[(2112), float64], Tensor[(13, 15, 8), float32]) */;
    %751 = cast(%var_3298, dtype="float32") /* ty=Tensor[(55), float32] */;
    %752 = cast(meta[relay.Constant][33] /* ty=Tensor[(275, 2), float32] */, dtype="float32") /* ty=Tensor[(275, 2), float32] */;
    %753 = reshape(%751, newshape=[11, 1, 5]) /* ty=Tensor[(11, 1, 5), float32] */;
    %754 = reshape(%752, newshape=[11, 10, 5]) /* ty=Tensor[(11, 10, 5), float32] */;
    %755 = @func_159(%753, %754) /* ty=(Tensor[(11, 10, 5), float32], Tensor[(11, 10, 5), float32]) */;
    %756 = cast(meta[relay.Constant][33] /* ty=Tensor[(275, 2), float32] */, dtype="float32") /* ty=Tensor[(275, 2), float32] */;
    %757 = divide(%746, %747) /* ty=Tensor[(12, 14, 13), float64] */;
    %758 = %750.0;
    %759 = %755.0;
    %760 = erf(%756) /* ty=Tensor[(275, 2), float32] */;
    (%757, %758, %var_3282, %759, %var_3298, %760)
  };
  %761(%var_3306, %var_3307, %var_3308) /* ty=(Tensor[(12, 14, 13), float64], Tensor[(13, 15, 8), uint16], Tensor[(1560, 1), uint16], Tensor[(11, 10, 5), float32], Tensor[(55), float32], Tensor[(275, 2), float32]) */
}

def @func_1648(%var_1646: Tensor[(13, 8, 12), float32]) -> (Tensor[(13, 8, 12), float32], Tensor[(3, 8, 7), bool], Tensor[(168), uint16]) {
  @func_1645(%var_1646) /* ty=(Tensor[(13, 8, 12), float32], Tensor[(3, 8, 7), bool], Tensor[(168), uint16]) */
}

def @func_1890(%var_1855: Tensor[(3, 3, 1), float64], %var_1863: Tensor[(1155), float64]) -> (Tensor[(3, 3, ?), bool], Tensor[(15, 11, 7), float64], Tensor[(1155), float64]) {
  %762 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 3, 1), float64] */, dtype="bool") /* ty=Tensor[(3, 3, 1), bool] */;
  %763 = shape_of(%var_1855, dtype="int32") /* ty=Tensor[(3), int32] */;
  %764 = cast(%var_1855, dtype="bool") /* ty=Tensor[(3, 3, 1), bool] */;
  %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %766 = cast(%var_1863, dtype="float64") /* ty=Tensor[(1155), float64] */;
  %767 = reshape(%766, newshape=[15, 11, 7]) /* ty=Tensor[(15, 11, 7), float64] */;
  %768 = greater_equal(%764, %765) /* ty=Tensor[(3, 3, ?), bool] */;
  %769 = @func_432(%767) /* ty=Tensor[(15, 11, 7), float64] */;
  (%768, %769, %var_1863)
}

def @func_4705() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), uint16]) {
  @func_4703() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), uint16]) */
}

def @func_288(%var_286: Tensor[(12, 16, 11), float64], %var_287: Tensor[(12, 16, 11), float64]) -> (Tensor[(12, 16, 11), float64],) {
  %775 = fn (%var_278: Tensor[(12, 16, 11), float64], %var_279: Tensor[(12, 16, 11), float64]) -> (Tensor[(12, 16, 11), float64],) {
    %770 = cast(%var_279, dtype="float64") /* ty=Tensor[(12, 16, 11), float64] */;
    %771 = shape_of(%var_278, dtype="int32") /* ty=Tensor[(3), int32] */;
    %772 = cast(%var_278, dtype="float64") /* ty=Tensor[(12, 16, 11), float64] */;
    %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %774 = mod(%772, %773) /* ty=Tensor[(12, 16, 11), float64] */;
    (%774,)
  };
  %775(%var_286, %var_287) /* ty=(Tensor[(12, 16, 11), float64],) */
}

def @func_1263(%var_1259: Tensor[(11, 3, 7), uint8], %var_1260: Tensor[(11, 3, 7), uint8], %var_1261: Tensor[(1155), float64], %var_1262: Tensor[(84, 2), uint16]) -> (Tensor[(11, 3, 7), uint8], Tensor[(15, 11, 7), float64], Tensor[(1155), float64], Tensor[(14, 3, 10), float64], Tensor[(420), float64], Tensor[(14, 3, 10), float64], Tensor[(11, 10, 5), uint8], Tensor[(84, 2), uint16]) {
  %796 = fn (%var_1234: Tensor[(11, 3, 7), uint8], %var_1235: Tensor[(11, 3, 7), uint8], %var_1240: Tensor[(1155), float64], %var_1248: Tensor[(84, 2), uint16]) -> (Tensor[(11, 3, 7), uint8], Tensor[(15, 11, 7), float64], Tensor[(1155), float64], Tensor[(14, 3, 10), float64], Tensor[(420), float64], Tensor[(14, 3, 10), float64], Tensor[(11, 10, 5), uint8], Tensor[(84, 2), uint16]) {
    %776 = cast(%var_1235, dtype="uint8") /* ty=Tensor[(11, 3, 7), uint8] */;
    %777 = shape_of(%var_1234, dtype="int32") /* ty=Tensor[(3), int32] */;
    %778 = cast(%var_1234, dtype="uint8") /* ty=Tensor[(11, 3, 7), uint8] */;
    %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %780 = cast(%var_1240, dtype="float64") /* ty=Tensor[(1155), float64] */;
    %781 = reshape(%780, newshape=[15, 11, 7]) /* ty=Tensor[(15, 11, 7), float64] */;
    %782 = cast(meta[relay.Constant][35] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
    %783 = reshape(%782, newshape=[14, 3, 10]) /* ty=Tensor[(14, 3, 10), float64] */;
    %784 = @func_1175(%783) /* ty=(Tensor[(14, 3, 10), float64],) */;
    %785 = %784.0;
    %786 = cast(%785, dtype="float64") /* ty=Tensor[(14, 3, 10), float64] */;
    %787 = reshape(%786, newshape=[14, 3, 10]) /* ty=Tensor[(14, 3, 10), float64] */;
    %788 = @func_1175(%787) /* ty=(Tensor[(14, 3, 10), float64],) */;
    %789 = cast(%var_1248, dtype="uint16") /* ty=Tensor[(84, 2), uint16] */;
    %790 = reshape(%789, newshape=[3, 8, 7]) /* ty=Tensor[(3, 8, 7), uint16] */;
    %791 = @func_900(%790) /* ty=(Tensor[(55), float32], Tensor[(3, 8, 7), bool], Tensor[(11, 10, 5), uint8]) */;
    %792 = bitwise_and(%778, %779) /* ty=Tensor[(11, 3, 7), uint8] */;
    %793 = @func_432(%781) /* ty=Tensor[(15, 11, 7), float64] */;
    %794 = %788.0;
    %795 = %791.2;
    (%792, %793, %var_1240, %785, meta[relay.Constant][35] /* ty=Tensor[(420), float64] */, %794, %795, %var_1248)
  };
  %796(%var_1259, %var_1260, %var_1261, %var_1262) /* ty=(Tensor[(11, 3, 7), uint8], Tensor[(15, 11, 7), float64], Tensor[(1155), float64], Tensor[(14, 3, 10), float64], Tensor[(420), float64], Tensor[(14, 3, 10), float64], Tensor[(11, 10, 5), uint8], Tensor[(84, 2), uint16]) */
}

def @func_2820() -> Tensor[(10, 8, 11), float64] {
  %798 = fn () -> Tensor[(10, 8, 11), float64] {
    %797 = @func_2417() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) */;
    %797.1
  };
  %798() /* ty=Tensor[(10, 8, 11), float64] */
}

def @func_3593(%var_3592: float64) -> (Tensor[(11, 6, 6), float64],) {
  %802 = fn (%var_3584: float64) -> (Tensor[(11, 6, 6), float64],) {
    %799 = cast(%var_3584, dtype="float64") /* ty=float64 */;
    %800 = cast(meta[relay.Constant][36] /* ty=Tensor[(11, 6, 6), float64] */, dtype="float64") /* ty=Tensor[(11, 6, 6), float64] */;
    %801 = add(%799, %800) /* ty=Tensor[(11, 6, 6), float64] */;
    (%801,)
  };
  %802(%var_3592) /* ty=(Tensor[(11, 6, 6), float64],) */
}

def @func_6158() -> Tensor[(10, 8, 11), float64] {
  %805 = fn () -> Tensor[(10, 8, 11), float64] {
    %803 = @func_2819() /* ty=Tensor[(10, 8, 11), float64] */;
    %804 = cast(%803, dtype="float64") /* ty=Tensor[(10, 8, 11), float64] */;
    rsqrt(%804) /* ty=Tensor[(10, 8, 11), float64] */
  };
  %805() /* ty=Tensor[(10, 8, 11), float64] */
}

def @func_162(%var_160: Tensor[(11, 1, 5), float32], %var_161: Tensor[(11, 10, 5), float32]) -> (Tensor[(11, 10, 5), float32], Tensor[(11, 10, 5), float32]) {
  %812 = fn (%var_109: Tensor[(11, 1, 5), float32], %var_110: Tensor[(11, 10, 5), float32]) -> (Tensor[(11, 10, 5), float32], Tensor[(11, 10, 5), float32]) {
    %806 = cast(%var_109, dtype="float32") /* ty=Tensor[(11, 1, 5), float32] */;
    %807 = cast(%var_110, dtype="float32") /* ty=Tensor[(11, 10, 5), float32] */;
    %808 = cast(%var_109, dtype="float32") /* ty=Tensor[(11, 1, 5), float32] */;
    %809 = cast(%var_110, dtype="float32") /* ty=Tensor[(11, 10, 5), float32] */;
    %810 = divide(%806, %807) /* ty=Tensor[(11, 10, 5), float32] */;
    %811 = floor_divide(%808, %809) /* ty=Tensor[(11, 10, 5), float32] */;
    (%810, %811)
  };
  %812(%var_160, %var_161) /* ty=(Tensor[(11, 10, 5), float32], Tensor[(11, 10, 5), float32]) */
}

def @func_4810() -> Tensor[(10, 8, 11), float32] {
  %814 = fn () -> Tensor[(10, 8, 11), float32] {
    %813 = @func_3104() /* ty=(Tensor[(10, 8, 11), float32],) */;
    %813.0
  };
  %814() /* ty=Tensor[(10, 8, 11), float32] */
}

def @func_7302(%var_7301: Tensor[(10, 8, 11), float32]) -> (Tensor[(10, 8, 11), uint64],) {
  %822 = fn (%var_7294: Tensor[(10, 8, 11), float32]) -> (Tensor[(10, 8, 11), uint64],) {
    %815 = @func_5594() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) */;
    %816 = %815.0;
    %817 = cast(%var_7294, dtype="uint64") /* ty=Tensor[(10, 8, 11), uint64] */;
    %818 = shape_of(%816, dtype="int32") /* ty=Tensor[(3), int32] */;
    %819 = cast(%816, dtype="uint64") /* ty=Tensor[(10, 8, 11), uint64] */;
    %820 = dyn.reshape(%817, %818, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %821 = add(%819, %820) /* ty=Tensor[(10, 8, 11), uint64] */;
    (%821,)
  };
  %822(%var_7301) /* ty=(Tensor[(10, 8, 11), uint64],) */
}

def @func_4189() -> Tensor[(10, 8, 11), float32] {
  %823 = @func_3093() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %823.0
}

def @func_7347() -> (Tensor[(10, 8, 11), float32],) {
  @func_7345() /* ty=(Tensor[(10, 8, 11), float32],) */
}

def @func_7272() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) {
  %828 = fn () -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) {
    %824 = @func_6963() /* ty=(Tensor[(10, 8, 11), float32],) */;
    %825 = @func_7016() /* ty=(Tensor[(10, 8, 11), float32],) */;
    %826 = %824.0;
    %827 = %825.0;
    (%826, %827)
  };
  %828() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) */
}

def @func_7417() -> Tensor[(10, 8, 11), float32] {
  %829 = @func_5328() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) */;
  %829.1
}

def @func_6211(%var_6174: Tensor[(168), uint16], %var_6190: Tensor[(270), int8]) -> (Tensor[(10, 8, 11), float32], Tensor[(168), uint16], Tensor[(10, 8, 11), float32], Tensor[(270), int8], Tensor[(3, 8, 7), float64]) {
  %830 = cast(%var_6190, dtype="int8") /* ty=Tensor[(270), int8] */;
  %831 = cast(%var_6190, dtype="int8") /* ty=Tensor[(270), int8] */;
  %832 = reshape(%830, newshape=[9, 6, 5]) /* ty=Tensor[(9, 6, 5), int8] */;
  %833 = reshape(%831, newshape=[9, 6, 5]) /* ty=Tensor[(9, 6, 5), int8] */;
  %834 = @func_5432(%832, %833) /* ty=(Tensor[(9, 6, 5), bool], Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), uint16], Tensor[(10, 8, 11), float32]) */;
  %835 = cast(%var_6174, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %836 = reshape(%835, newshape=[42, 4]) /* ty=Tensor[(42, 4), uint16] */;
  %837 = @func_2622(%836) /* ty=(Tensor[(3, 8, 7), bool], Tensor[(42, 4), uint16], Tensor[(10, 8, 11), float64]) */;
  %838 = %837.0;
  %839 = cast(%838, dtype="float64") /* ty=Tensor[(3, 8, 7), float64] */;
  %840 = @func_4809() /* ty=Tensor[(10, 8, 11), float32] */;
  %841 = %834.1;
  %842 = sqrt(%839) /* ty=Tensor[(3, 8, 7), float64] */;
  (%840, %var_6174, %841, %var_6190, %842)
}

def @func_1134(%var_1115: Tensor[(8, 6, 4), float32]) -> (Tensor[(8, 6, 4), bool],) {
  %843 = cast(%var_1115, dtype="float32") /* ty=Tensor[(8, 6, 4), float32] */;
  %844 = sin(%843) /* ty=Tensor[(8, 6, 4), float32] */;
  %845 = cast(%var_1115, dtype="bool") /* ty=Tensor[(8, 6, 4), bool] */;
  %846 = shape_of(%844, dtype="int32") /* ty=Tensor[(3), int32] */;
  %847 = cast(%844, dtype="bool") /* ty=Tensor[(8, 6, 4), bool] */;
  %848 = dyn.reshape(%845, %846, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %849 = less_equal(%847, %848) /* ty=Tensor[(8, 6, 4), bool] */;
  (%849,)
}

def @func_5768() -> (Tensor[(10, 8, 11), uint16],) {
  %850 = @func_3641() /* ty=Tensor[(10, 8, 11), uint16] */;
  (%850,)
}

def @func_5075() -> Tensor[(10, 8, 11), float32] {
  %851 = fn () -> Tensor[(10, 8, 11), float32] {
    @func_4189() /* ty=Tensor[(10, 8, 11), float32] */
  };
  %851() /* ty=Tensor[(10, 8, 11), float32] */
}

def @func_6215(%var_6213: Tensor[(168), uint16], %var_6214: Tensor[(270), int8]) -> (Tensor[(10, 8, 11), float32], Tensor[(168), uint16], Tensor[(10, 8, 11), float32], Tensor[(270), int8], Tensor[(3, 8, 7), float64]) {
  @func_6211(%var_6213, %var_6214) /* ty=(Tensor[(10, 8, 11), float32], Tensor[(168), uint16], Tensor[(10, 8, 11), float32], Tensor[(270), int8], Tensor[(3, 8, 7), float64]) */
}

def @func_737(%var_735: Tensor[(13, 15, 8), uint16]) -> (Tensor[(13, 15, 8), uint16], Tensor[(12, 16, 11), float64], Tensor[(2112), float64], Tensor[(13, 15, 8), float32]) {
  @func_734(%var_735) /* ty=(Tensor[(13, 15, 8), uint16], Tensor[(12, 16, 11), float64], Tensor[(2112), float64], Tensor[(13, 15, 8), float32]) */
}

def @func_5718() -> (Tensor[(10, 8, 11), float32],) {
  @func_5716() /* ty=(Tensor[(10, 8, 11), float32],) */
}

def @func_3520(%var_3516: Tensor[(702), float64]) -> (Tensor[(10, 8, 11), float32], Tensor[(702), float64], Tensor[(420), float64], Tensor[(702), float64]) {
  %852 = @func_3104() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %853 = cast(meta[relay.Constant][37] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %854 = %852.0;
  %855 = cast(%854, dtype="float64") /* ty=Tensor[(10, 8, 11), float64] */;
  %856 = cast(%var_3516, dtype="float64") /* ty=Tensor[(702), float64] */;
  %857 = reshape(%853, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %858 = reshape(%855, newshape=[1, 880]) /* ty=Tensor[(1, 880), float64] */;
  %859 = reshape(%856, newshape=[702]) /* ty=Tensor[(702), float64] */;
  %860 = @func_3367(%857, %858, %859) /* ty=(Tensor[(168), uint16], Tensor[(2112), float64], Tensor[(420), float64], Tensor[(360), uint32], Tensor[(1, 880), float64], Tensor[(702), float64]) */;
  %861 = %860.5;
  (%854, %861, meta[relay.Constant][37] /* ty=Tensor[(420), float64] */, %var_3516)
}

def @func_6694() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), uint16], Tensor[(10, 8, 11), float64], Tensor[(10, 8, 11), uint16]) {
  @func_6692() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), uint16], Tensor[(10, 8, 11), float64], Tensor[(10, 8, 11), uint16]) */
}

def @func_4509(%var_4489: uint32, %var_4497: Tensor[(3, 234), float64]) -> (Tensor[(9, 8, 9), uint32], Tensor[(1248), float32], Tensor[(3, 234), float64], Tensor[(104, 12), float32], Tensor[(10, 8, 11), float32]) {
  %862 = cast(%var_4489, dtype="uint32") /* ty=uint32 */;
  %863 = cast(meta[relay.Constant][38] /* ty=Tensor[(9, 8, 9), uint32] */, dtype="uint32") /* ty=Tensor[(9, 8, 9), uint32] */;
  %864 = cast(%var_4497, dtype="float64") /* ty=Tensor[(3, 234), float64] */;
  %865 = cast(meta[relay.Constant][39] /* ty=Tensor[(104, 12), float32] */, dtype="float32") /* ty=Tensor[(104, 12), float32] */;
  %866 = reshape(%864, newshape=[6, 13, 9]) /* ty=Tensor[(6, 13, 9), float64] */;
  %867 = reshape(%865, newshape=[1248]) /* ty=Tensor[(1248), float32] */;
  %868 = @func_2578(%866, %867) /* ty=(Tensor[(13, 8, 12), float32], Tensor[(1248), float32], Tensor[(6, 13, 9), uint8]) */;
  %869 = @func_3498() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %870 = maximum(%862, %863) /* ty=Tensor[(9, 8, 9), uint32] */;
  %871 = %868.1;
  %872 = %869.0;
  (%870, %871, %var_4497, meta[relay.Constant][39] /* ty=Tensor[(104, 12), float32] */, %872)
}

def @func_7552() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) {
  @func_7550() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float32]) */
}

def @func_6252(%var_6250: Tensor[(11, 2, 10), uint64]) -> Tensor[(11, 2, 10), uint64] {
  @func_6249(%var_6250) /* ty=Tensor[(11, 2, 10), uint64] */
}

def @func_5140() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) {
  @func_5138() /* ty=(Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), float64]) */
}

def @func_1178(%var_1176: Tensor[(14, 3, 10), float64]) -> (Tensor[(14, 3, 10), float64],) {
  @func_1175(%var_1176) /* ty=(Tensor[(14, 3, 10), float64],) */
}

def @func_2708(%var_2706: Tensor[(168), uint16]) -> (Tensor[(10, 8, 11), float32], Tensor[(11, 10, 5), uint8], Tensor[(168), uint16], Tensor[(15, 11, 7), float64], Tensor[(1155), float64]) {
  @func_2705(%var_2706) /* ty=(Tensor[(10, 8, 11), float32], Tensor[(11, 10, 5), uint8], Tensor[(168), uint16], Tensor[(15, 11, 7), float64], Tensor[(1155), float64]) */
}

def @func_330(%var_329: Tensor[(5, 12, 14), float64]) -> (Tensor[(5, 12, 14), float64],) {
  %875 = fn (%var_308: Tensor[(5, 12, 14), float64]) -> (Tensor[(5, 12, 14), float64],) {
    %873 = cast(%var_308, dtype="float64") /* ty=Tensor[(5, 12, 14), float64] */;
    %874 = asinh(%873) /* ty=Tensor[(5, 12, 14), float64] */;
    (%874,)
  };
  %875(%var_329) /* ty=(Tensor[(5, 12, 14), float64],) */
}

def @func_4191() -> Tensor[(10, 8, 11), float32] {
  @func_4189() /* ty=Tensor[(10, 8, 11), float32] */
}

def @func_3976() -> Tensor[(10, 8, 11), float32] {
  @func_3974() /* ty=Tensor[(10, 8, 11), float32] */
}

def @func_1388(%var_1386: Tensor[(12, 2, 15), uint32], %var_1387: Tensor[(12, 2, 15), uint32]) -> (Tensor[(3, 8, 7), bool], Tensor[(84, 2), uint16], Tensor[(12, 2, 15), bool]) {
  @func_1384(%var_1386, %var_1387) /* ty=(Tensor[(3, 8, 7), bool], Tensor[(84, 2), uint16], Tensor[(12, 2, 15), bool]) */
}

def @func_5496(%var_5466: Tensor[(13, 7, 4), float64]) -> (Tensor[(13, 7, 4), float64], Tensor[(10, 8, 11), float32]) {
  %876 = cast(%var_5466, dtype="float64") /* ty=Tensor[(13, 7, 4), float64] */;
  %877 = atanh(%876) /* ty=Tensor[(13, 7, 4), float64] */;
  %878 = @func_4724() /* ty=Tensor[(10, 8, 11), float32] */;
  (%877, %878)
}

def @func_3983() -> (Tensor[(10, 8, 11), float32],) {
  @func_3981() /* ty=(Tensor[(10, 8, 11), float32],) */
}

def @func_6692() -> (Tensor[(10, 8, 11), float32], Tensor[(10, 8, 11), uint16], Tensor[(10, 8, 11), float64], Tensor[(10, 8, 11), uint16]) {
  %879 = @func_3498() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %880 = @func_4898() /* ty=(Tensor[(10, 8, 11), float64],) */;
  %881 = @func_6361() /* ty=(Tensor[(10, 8, 11), uint16], Tensor[(10, 8, 11), float32]) */;
  %882 = %879.0;
  %883 = @func_4769() /* ty=Tensor[(10, 8, 11), uint16] */;
  %884 = %880.0;
  %885 = %881.0;
  (%882, %883, %884, %885)
}

def @func_512(%var_511: Tensor[(5, 9, 16), float32]) -> (Tensor[(5, 9, 16), float32],) {
  %888 = fn (%var_486: Tensor[(5, 9, 16), float32]) -> (Tensor[(5, 9, 16), float32],) {
    %886 = cast(%var_486, dtype="float32") /* ty=Tensor[(5, 9, 16), float32] */;
    %887 = acosh(%886) /* ty=Tensor[(5, 9, 16), float32] */;
    (%887,)
  };
  %888(%var_511) /* ty=(Tensor[(5, 9, 16), float32],) */
}

def @func_3485() -> (Tensor[(10, 8, 11), float32],) {
  %889 = @func_2953() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %890 = %889.0;
  (%890,)
}

def @func_3981() -> (Tensor[(10, 8, 11), float32],) {
  %891 = @func_3498() /* ty=(Tensor[(10, 8, 11), float32],) */;
  %892 = %891.0;
  (%892,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen15/build/output.py", line 2209, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:44:03] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

