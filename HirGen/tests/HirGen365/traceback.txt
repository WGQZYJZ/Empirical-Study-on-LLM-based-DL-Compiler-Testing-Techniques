==========mod==========
#[version = "0.0.5"]
def @func_5806(%var_5784: Tensor[(1, 2, 13), float32], %var_5801: Tensor[(1, 2, 13), float32]) -> (Tensor[(?, 2, 13), float64], Tensor[(?, 2, 13), uint32]) {
  %0 = cast(%var_5784, dtype="float32") /* ty=Tensor[(1, 2, 13), float32] */;
  %1 = sigmoid(%0) /* ty=Tensor[(1, 2, 13), float32] */;
  %2 = cast(%var_5784, dtype="float64") /* ty=Tensor[(1, 2, 13), float64] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="float64") /* ty=Tensor[(1, 2, 13), float64] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %6 = cast(%var_5801, dtype="uint32") /* ty=Tensor[(1, 2, 13), uint32] */;
  %7 = shape_of(%var_5784, dtype="int32") /* ty=Tensor[(3), int32] */;
  %8 = cast(%var_5784, dtype="uint32") /* ty=Tensor[(1, 2, 13), uint32] */;
  %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %10 = subtract(%4, %5) /* ty=Tensor[(?, 2, 13), float64] */;
  %11 = bitwise_and(%8, %9) /* ty=Tensor[(?, 2, 13), uint32] */;
  (%10, %11)
}

def @func_6780() -> Tensor[(5, 10, 6), uint16] {
  %12 = @func_6766() /* ty=(Tensor[(5, 10, 6), uint16], Tensor[(5, 10, 6), bool]) */;
  %12.0
}

def @func_1598() -> (Tensor[(5, 10, 6), uint16], Tensor[(6, 2, 13), uint32]) {
  %13 = @func_1397() /* ty=(Tensor[(6, 2, 13), uint32],) */;
  %14 = @func_1267() /* ty=Tensor[(5, 10, 6), uint16] */;
  %15 = %13.0;
  (%14, %15)
}

def @func_6337() -> (Tensor[(5, 10, 6), bool],) {
  %16 = @func_3057() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %17 = %16.0;
  (%17,)
}

def @func_7499() -> (Tensor[(5, 10, 6), bool],) {
  %18 = @func_3791() /* ty=Tensor[(5, 10, 6), bool] */;
  (%18,)
}

def @func_1267() -> Tensor[(5, 10, 6), uint16] {
  %19 = cast(meta[relay.Constant][1] /* ty=Tensor[(5, 10, 6), uint16] */, dtype="uint16") /* ty=Tensor[(5, 10, 6), uint16] */;
  %20 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(5, 10, 6), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %21 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 10, 6), uint16] */, dtype="uint16") /* ty=Tensor[(5, 10, 6), uint16] */;
  %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  maximum(%21, %22) /* ty=Tensor[(5, 10, 6), uint16] */
}

def @func_384(%var_377: Tensor[(10, 7, 16), float32]) -> Tensor[(10, 7, 16), float32] {
  %23 = cast(%var_377, dtype="float32") /* ty=Tensor[(10, 7, 16), float32] */;
  log(%23) /* ty=Tensor[(10, 7, 16), float32] */
}

def @func_5259() -> (Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), uint16], Tensor[(2, 10, 2), uint64], Tensor[(40), float64]) {
  %24 = @func_1446() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %25 = @func_5057() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %26 = cast(meta[relay.Constant][2] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
  %27 = reshape(%26, newshape=[2, 10, 2]) /* ty=Tensor[(2, 10, 2), float64] */;
  %28 = %24.0;
  %29 = %25.0;
  %30 = @func_3204(%27) /* ty=Tensor[(2, 10, 2), uint64] */;
  (%28, %29, %30, meta[relay.Constant][2] /* ty=Tensor[(40), float64] */)
}

def @func_8013() -> (Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool]) {
  %31 = @func_3057() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %32 = %31.0;
  %33 = @func_5836() /* ty=Tensor[(5, 10, 6), bool] */;
  (%32, %33)
}

def @func_4337() -> Tensor[(5, 10, 6), bool] {
  %34 = @func_2912() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %34.0
}

def @func_5689() -> (Tensor[(5, 10, 6), bool], Tensor[(6, 2, 13), uint32], Tensor[(5, 10, 6), uint16], Tensor[(6, 4, 12), float32]) {
  %35 = @func_4370() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(6, 4, 12), float64]) */;
  %36 = @func_1397() /* ty=(Tensor[(6, 2, 13), uint32],) */;
  %37 = @func_3813() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %38 = %35.0;
  %39 = %36.0;
  %40 = %37.0;
  %41 = @func_4164() /* ty=Tensor[(6, 4, 12), float32] */;
  (%38, %39, %40, %41)
}

def @func_6363() -> (Tensor[(5, 10, 6), bool], Tensor[(16, 13, 8), int64], Tensor[(1664), int64]) {
  %42 = @func_3057() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %43 = cast(meta[relay.Constant][3] /* ty=Tensor[(1664), int64] */, dtype="int64") /* ty=Tensor[(1664), int64] */;
  %44 = reshape(%43, newshape=[16, 13, 8]) /* ty=Tensor[(16, 13, 8), int64] */;
  %45 = @func_470(%44) /* ty=(Tensor[(16, 13, 8), int64],) */;
  %46 = %42.0;
  %47 = %45.0;
  (%46, %47, meta[relay.Constant][3] /* ty=Tensor[(1664), int64] */)
}

def @func_6395() -> (Tensor[(5, 10, 6), bool],) {
  %48 = @func_4883() /* ty=Tensor[(5, 10, 6), bool] */;
  (%48,)
}

def @func_1007(%var_976: Tensor[(13, 14, 14), int16], %var_977: Tensor[(13, 14, 14), int16], %var_982: float32, %var_992: Tensor[(672), int16]) -> (Tensor[(13, 14, 14), int16], Tensor[(15, 3, 12), float32], float32, Tensor[(6, 14, 8), bool], Tensor[(672), int16]) {
  %49 = cast(%var_977, dtype="int16") /* ty=Tensor[(13, 14, 14), int16] */;
  %50 = shape_of(%var_976, dtype="int32") /* ty=Tensor[(3), int32] */;
  %51 = cast(%var_976, dtype="int16") /* ty=Tensor[(13, 14, 14), int16] */;
  %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %53 = cast(%var_982, dtype="float32") /* ty=float32 */;
  %54 = reshape(%53, newshape=[]) /* ty=float32 */;
  %55 = @func_66(%54) /* ty=(Tensor[(15, 3, 12), float32],) */;
  %56 = cast(%var_992, dtype="int16") /* ty=Tensor[(672), int16] */;
  %57 = cast(%var_992, dtype="int16") /* ty=Tensor[(672), int16] */;
  %58 = reshape(%56, newshape=[6, 14, 8]) /* ty=Tensor[(6, 14, 8), int16] */;
  %59 = reshape(%57, newshape=[6, 14, 8]) /* ty=Tensor[(6, 14, 8), int16] */;
  %60 = @func_698(%58, %59) /* ty=(Tensor[(6, 14, 8), bool],) */;
  %61 = logical_xor(%51, %52) /* ty=Tensor[(13, 14, 14), int16] */;
  %62 = %55.0;
  %63 = %60.0;
  (%61, %62, %var_982, %63, %var_992)
}

def @func_4083(%var_4079: Tensor[(2, 1, 4), float64]) -> Tensor[(2, 1, 4), float64] {
  %64 = cast(%var_4079, dtype="float64") /* ty=Tensor[(2, 1, 4), float64] */;
  erf(%64) /* ty=Tensor[(2, 1, 4), float64] */
}

def @func_2853(%var_2812: Tensor[(672), int16]) -> (Tensor[(672), int16], Tensor[(5, 10, 6), uint16]) {
  %65 = @func_1822() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %66 = %65.0;
  %67 = cast(%var_2812, dtype="int16") /* ty=Tensor[(672), int16] */;
  %68 = reshape(%67, newshape=[672]) /* ty=Tensor[(672), int16] */;
  %69 = @func_2431(%68) /* ty=(Tensor[(5, 10, 6), uint16], Tensor[(182, 14), int16], Tensor[(288), float64], Tensor[(672), int16], Tensor[(5, 10, 6), bool]) */;
  %70 = %69.4;
  %71 = cast(%70, dtype="uint16") /* ty=Tensor[(5, 10, 6), uint16] */;
  %72 = shape_of(%66, dtype="int32") /* ty=Tensor[(3), int32] */;
  %73 = cast(%66, dtype="uint16") /* ty=Tensor[(5, 10, 6), uint16] */;
  %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %75 = right_shift(%73, %74) /* ty=Tensor[(5, 10, 6), uint16] */;
  (%var_2812, %75)
}

def @func_3275(%var_3255: Tensor[(9, 6, 14), float32], %var_3261: Tensor[(1, 10), float64]) -> (Tensor[(9, 6, 14), float32], Tensor[(10), float64], Tensor[(1, 10), float64], Tensor[(10), float64], Tensor[(1, 132), uint32]) {
  %76 = cast(%var_3255, dtype="float32") /* ty=Tensor[(9, 6, 14), float32] */;
  %77 = cast(%var_3261, dtype="float64") /* ty=Tensor[(1, 10), float64] */;
  %78 = reshape(%77, newshape=[10]) /* ty=Tensor[(10), float64] */;
  %79 = @func_3157(%78) /* ty=(Tensor[(5, 10, 6), float64], Tensor[(5, 10, 6), bool], Tensor[(10), float64], Tensor[(5, 10, 6), uint16], Tensor[(1, 10, 1), float64]) */;
  %80 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 132), uint32] */, dtype="uint32") /* ty=Tensor[(1, 132), uint32] */;
  %81 = reshape(%80, newshape=[132, 1]) /* ty=Tensor[(132, 1), uint32] */;
  %82 = @func_2203(%81) /* ty=(Tensor[(10, 7, 16), float32], Tensor[(10), float64], Tensor[(132, 1), uint32], Tensor[(5, 10, 6), float64]) */;
  %83 = cosh(%76) /* ty=Tensor[(9, 6, 14), float32] */;
  %84 = %79.2;
  %85 = %82.1;
  (%83, %84, %var_3261, %85, meta[relay.Constant][4] /* ty=Tensor[(1, 132), uint32] */)
}

def @func_8272(%var_8263: Tensor[(1, 14, 15), float32]) -> (Tensor[(1, 14, 15), float32],) {
  %86 = cast(%var_8263, dtype="float32") /* ty=Tensor[(1, 14, 15), float32] */;
  %87 = atanh(%86) /* ty=Tensor[(1, 14, 15), float32] */;
  (%87,)
}

def @func_3626() -> Tensor[(6, 4, 12), float32] {
  %88 = @func_2880() /* ty=Tensor[(6, 4, 12), float64] */;
  %89 = cast(%88, dtype="float32") /* ty=Tensor[(6, 4, 12), float32] */;
  rsqrt(%89) /* ty=Tensor[(6, 4, 12), float32] */
}

def @func_4475() -> Tensor[(6, 2, 13), float64] {
  %90 = @func_3097() /* ty=(Tensor[(6, 2, 13), float64],) */;
  %90.0
}

def @func_7611() -> (Tensor[(10, 7, 16), float32],) {
  %91 = @func_3829() /* ty=Tensor[(10, 7, 16), float32] */;
  %92 = cast(%91, dtype="float32") /* ty=Tensor[(10, 7, 16), float32] */;
  %93 = atan(%92) /* ty=Tensor[(10, 7, 16), float32] */;
  (%93,)
}

def @func_2506() -> (Tensor[(5, 10, 6), bool],) {
  %94 = @func_2301() /* ty=(Tensor[(6, 2, 13), uint32], Tensor[(5, 10, 6), bool]) */;
  %95 = %94.1;
  (%95,)
}

def @func_4316(%var_4268: Tensor[(6, 4, 12), float32]) -> (Tensor[(5, 10, 6), bool], Tensor[(6, 4, 12), uint32], Tensor[(1, 132), uint32], Tensor[(756), float32], Tensor[(10, 1), float64]) {
  %96 = @func_2506() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %97 = @func_2880() /* ty=Tensor[(6, 4, 12), float64] */;
  %98 = cast(%97, dtype="float32") /* ty=Tensor[(6, 4, 12), float32] */;
  %99 = cosh(%98) /* ty=Tensor[(6, 4, 12), float32] */;
  %100 = cast(%var_4268, dtype="bool") /* ty=Tensor[(6, 4, 12), bool] */;
  %101 = shape_of(%99, dtype="int32") /* ty=Tensor[(3), int32] */;
  %102 = cast(%99, dtype="bool") /* ty=Tensor[(6, 4, 12), bool] */;
  %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %104 = not_equal(%102, %103) /* ty=Tensor[(6, 4, 12), bool] */;
  %105 = cast(%97, dtype="uint32") /* ty=Tensor[(6, 4, 12), uint32] */;
  %106 = shape_of(%104, dtype="int32") /* ty=Tensor[(3), int32] */;
  %107 = cast(%104, dtype="uint32") /* ty=Tensor[(6, 4, 12), uint32] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %109 = cast(meta[relay.Constant][5] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %110 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 1), float64] */, dtype="float64") /* ty=Tensor[(10, 1), float64] */;
  %111 = reshape(%109, newshape=[9, 6, 14]) /* ty=Tensor[(9, 6, 14), float32] */;
  %112 = reshape(%110, newshape=[1, 10]) /* ty=Tensor[(1, 10), float64] */;
  %113 = @func_3275(%111, %112) /* ty=(Tensor[(9, 6, 14), float32], Tensor[(10), float64], Tensor[(1, 10), float64], Tensor[(10), float64], Tensor[(1, 132), uint32]) */;
  %114 = %96.0;
  %115 = left_shift(%107, %108) /* ty=Tensor[(6, 4, 12), uint32] */;
  %116 = %113.4;
  (%114, %115, %116, meta[relay.Constant][5] /* ty=Tensor[(756), float32] */, meta[relay.Constant][6] /* ty=Tensor[(10, 1), float64] */)
}

def @func_2263(%var_2224: Tensor[(6, 4, 12), float64], %var_2237: Tensor[(6, 4, 12), float64], %var_2261: Tensor[(672), int16]) -> (Tensor[(6, 4, 12), float64], Tensor[(6, 4, 12), int32], Tensor[(6, 4, 12), bool], Tensor[(15, 3, 12), float32], float32, Tensor[(13, 14, 14), int16], Tensor[(182, 14), int16], Tensor[(672), int16]) {
  %117 = @func_1926() /* ty=(Tensor[(6, 4, 12), float32], Tensor[(6, 4, 12), float64], Tensor[(5, 10, 6), bool], Tensor[(10, 7, 16), float32], Tensor[(1120, 1), float32], Tensor[(10, 7, 16), float32]) */;
  %118 = @func_1926() /* ty=(Tensor[(6, 4, 12), float32], Tensor[(6, 4, 12), float64], Tensor[(5, 10, 6), bool], Tensor[(10, 7, 16), float32], Tensor[(1120, 1), float32], Tensor[(10, 7, 16), float32]) */;
  %119 = %118.1;
  %120 = cast(%119, dtype="float64") /* ty=Tensor[(6, 4, 12), float64] */;
  %121 = sqrt(%120) /* ty=Tensor[(6, 4, 12), float64] */;
  %122 = cast(%var_2237, dtype="int32") /* ty=Tensor[(6, 4, 12), int32] */;
  %123 = shape_of(%121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %124 = cast(%121, dtype="int32") /* ty=Tensor[(6, 4, 12), int32] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %126 = cast(%var_2224, dtype="bool") /* ty=Tensor[(6, 4, 12), bool] */;
  %127 = shape_of(%119, dtype="int32") /* ty=Tensor[(3), int32] */;
  %128 = cast(%119, dtype="bool") /* ty=Tensor[(6, 4, 12), bool] */;
  %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %130 = greater_equal(%128, %129) /* ty=Tensor[(6, 4, 12), bool] */;
  %131 = cast(%119, dtype="bool") /* ty=Tensor[(6, 4, 12), bool] */;
  %132 = shape_of(%130, dtype="int32") /* ty=Tensor[(3), int32] */;
  %133 = cast(%130, dtype="bool") /* ty=Tensor[(6, 4, 12), bool] */;
  %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %135 = cast(-5.76212f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %136 = reshape(%135, newshape=[]) /* ty=float32 */;
  %137 = @func_66(%136) /* ty=(Tensor[(15, 3, 12), float32],) */;
  %138 = cast(meta[relay.Constant][7] /* ty=Tensor[(182, 14), int16] */, dtype="int16") /* ty=Tensor[(182, 14), int16] */;
  %139 = cast(meta[relay.Constant][7] /* ty=Tensor[(182, 14), int16] */, dtype="int16") /* ty=Tensor[(182, 14), int16] */;
  %140 = cast(-5.76212f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %141 = cast(%var_2261, dtype="int16") /* ty=Tensor[(672), int16] */;
  %142 = reshape(%138, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), int16] */;
  %143 = reshape(%139, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), int16] */;
  %144 = reshape(%140, newshape=[]) /* ty=float32 */;
  %145 = reshape(%141, newshape=[672]) /* ty=Tensor[(672), int16] */;
  %146 = @func_1007(%142, %143, %144, %145) /* ty=(Tensor[(13, 14, 14), int16], Tensor[(15, 3, 12), float32], float32, Tensor[(6, 14, 8), bool], Tensor[(672), int16]) */;
  %147 = %117.1;
  %148 = add(%124, %125) /* ty=Tensor[(6, 4, 12), int32] */;
  %149 = greater(%133, %134) /* ty=Tensor[(6, 4, 12), bool] */;
  %150 = %137.0;
  %151 = %146.0;
  (%147, %148, %149, %150, -5.76212f /* ty=float32 */, %151, meta[relay.Constant][7] /* ty=Tensor[(182, 14), int16] */, %var_2261)
}

def @func_1397() -> (Tensor[(6, 2, 13), uint32],) {
  %152 = cast(meta[relay.Constant][9] /* ty=Tensor[(6, 2, 13), uint32] */, dtype="uint32") /* ty=Tensor[(6, 2, 13), uint32] */;
  %153 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(6, 2, 13), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %154 = cast(meta[relay.Constant][8] /* ty=Tensor[(6, 2, 13), uint32] */, dtype="uint32") /* ty=Tensor[(6, 2, 13), uint32] */;
  %155 = dyn.reshape(%152, %153, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %156 = right_shift(%154, %155) /* ty=Tensor[(6, 2, 13), uint32] */;
  (%156,)
}

def @func_6630() -> Tensor[(6, 2, 13), float32] {
  %157 = @func_1397() /* ty=(Tensor[(6, 2, 13), uint32],) */;
  %158 = %157.0;
  %159 = cast(%158, dtype="float32") /* ty=Tensor[(6, 2, 13), float32] */;
  cosh(%159) /* ty=Tensor[(6, 2, 13), float32] */
}

def @func_4597() -> (Tensor[(6, 2, 13), float64], Tensor[(5, 10, 6), uint16]) {
  %160 = @func_3170() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %161 = @func_4475() /* ty=Tensor[(6, 2, 13), float64] */;
  %162 = %160.0;
  (%161, %162)
}

def @func_4826() -> (Tensor[(6, 4, 12), float64], Tensor[(5, 10, 6), bool]) {
  %163 = @func_4573() /* ty=(Tensor[(10), float64], Tensor[(132), uint32], Tensor[(16, 13, 8), int64], Tensor[(1664, 1), int64], Tensor[(5, 10, 6), float64], Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), uint16]) */;
  %164 = @func_3516() /* ty=Tensor[(6, 4, 12), float64] */;
  %165 = %163.5;
  (%164, %165)
}

def @func_8492() -> (Tensor[(5, 10, 6), bool],) {
  %166 = @func_8013() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool]) */;
  %167 = %166.1;
  (%167,)
}

def @main() -> (Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(6, 4, 12), float64]) {
  %168 = @func_6766() /* ty=(Tensor[(5, 10, 6), uint16], Tensor[(5, 10, 6), bool]) */;
  %169 = @func_1446() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %170 = @func_6561() /* ty=Tensor[(6, 4, 12), float64] */;
  %171 = cast(%170, dtype="float64") /* ty=Tensor[(6, 4, 12), float64] */;
  %172 = %168.1;
  %173 = %169.0;
  %174 = sinh(%171) /* ty=Tensor[(6, 4, 12), float64] */;
  (%172, %173, %174)
}

def @func_8261() -> (Tensor[(5, 10, 6), bool],) {
  %175 = @func_5569() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(1, 10), float64]) */;
  %176 = %175.0;
  (%176,)
}

def @func_3097() -> (Tensor[(6, 2, 13), float64],) {
  %177 = @func_2301() /* ty=(Tensor[(6, 2, 13), uint32], Tensor[(5, 10, 6), bool]) */;
  %178 = %177.0;
  %179 = cast(meta[relay.Constant][10] /* ty=Tensor[(6, 2, 13), uint32] */, dtype="float64") /* ty=Tensor[(6, 2, 13), float64] */;
  %180 = shape_of(%178, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(%178, dtype="float64") /* ty=Tensor[(6, 2, 13), float64] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %183 = divide(%181, %182) /* ty=Tensor[(6, 2, 13), float64] */;
  (%183,)
}

def @func_6258(%var_6234: Tensor[(1664), int64]) -> (Tensor[(6, 2, 13), float64], Tensor[(5, 10, 6), uint16], Tensor[(16, 13, 8), int64], Tensor[(1664), int64], Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), uint16]) {
  %184 = @func_3442() /* ty=Tensor[(6, 2, 13), uint32] */;
  %185 = cast(%184, dtype="float64") /* ty=Tensor[(6, 2, 13), float64] */;
  %186 = cast(%var_6234, dtype="int64") /* ty=Tensor[(1664), int64] */;
  %187 = reshape(%186, newshape=[16, 13, 8]) /* ty=Tensor[(16, 13, 8), int64] */;
  %188 = @func_470(%187) /* ty=(Tensor[(16, 13, 8), int64],) */;
  %189 = @func_1795() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(6, 2, 13), bool]) */;
  %190 = @func_3170() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %191 = log10(%185) /* ty=Tensor[(6, 2, 13), float64] */;
  %192 = @func_1267() /* ty=Tensor[(5, 10, 6), uint16] */;
  %193 = %188.0;
  %194 = %189.0;
  %195 = %190.0;
  (%191, %192, %193, %var_6234, %194, %195)
}

def @func_7143() -> (Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), uint16]) {
  %196 = @func_6542() /* ty=(Tensor[(6, 4, 12), float64], Tensor[(5, 10, 6), bool]) */;
  %197 = %196.1;
  %198 = @func_2753() /* ty=Tensor[(5, 10, 6), uint16] */;
  (%197, %198)
}

def @func_7848(%var_7814: Tensor[(288), float64], %var_7815: Tensor[(168, 4), int16]) -> (Tensor[(5, 10, 6), bool], Tensor[(182, 14), int16], Tensor[(288), float64], Tensor[(168, 4), int16], Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool]) {
  %199 = @func_5754() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %200 = cast(%var_7814, dtype="float64") /* ty=Tensor[(288), float64] */;
  %201 = cast(%var_7814, dtype="float64") /* ty=Tensor[(288), float64] */;
  %202 = cast(%var_7815, dtype="int16") /* ty=Tensor[(168, 4), int16] */;
  %203 = reshape(%200, newshape=[6, 4, 12]) /* ty=Tensor[(6, 4, 12), float64] */;
  %204 = reshape(%201, newshape=[6, 4, 12]) /* ty=Tensor[(6, 4, 12), float64] */;
  %205 = reshape(%202, newshape=[672]) /* ty=Tensor[(672), int16] */;
  %206 = @func_2263(%203, %204, %205) /* ty=(Tensor[(6, 4, 12), float64], Tensor[(6, 4, 12), int32], Tensor[(6, 4, 12), bool], Tensor[(15, 3, 12), float32], float32, Tensor[(13, 14, 14), int16], Tensor[(182, 14), int16], Tensor[(672), int16]) */;
  %207 = @func_5569() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(1, 10), float64]) */;
  %208 = %199.0;
  %209 = %206.6;
  %210 = @func_6428() /* ty=Tensor[(5, 10, 6), bool] */;
  %211 = %207.0;
  (%208, %209, %var_7814, %var_7815, %210, %211)
}

def @func_2930(%var_2923: Tensor[(5, 10, 6), bool]) -> Tensor[(5, 10, 6), bool] {
  %212 = @func_2912() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %213 = %212.0;
  %214 = cast(%var_2923, dtype="bool") /* ty=Tensor[(5, 10, 6), bool] */;
  %215 = shape_of(%213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %216 = cast(%213, dtype="bool") /* ty=Tensor[(5, 10, 6), bool] */;
  %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%216, %217) /* ty=Tensor[(5, 10, 6), bool] */
}

def @func_7939(%var_7919: Tensor[(1664), float64]) -> (Tensor[(5, 10, 6), bool], Tensor[(1664), int32], Tensor[(1664), float64]) {
  %218 = @func_7499() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %219 = @func_6363() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(16, 13, 8), int64], Tensor[(1664), int64]) */;
  %220 = %219.2;
  %221 = cast(%220, dtype="float64") /* ty=Tensor[(1664), float64] */;
  %222 = sigmoid(%221) /* ty=Tensor[(1664), float64] */;
  %223 = cast(%var_7919, dtype="float64") /* ty=Tensor[(1664), float64] */;
  %224 = shape_of(%222, dtype="int32") /* ty=Tensor[(1), int32] */;
  %225 = cast(%222, dtype="float64") /* ty=Tensor[(1664), float64] */;
  %226 = dyn.reshape(%223, %224, newshape=[]) /* ty=Tensor[(?), float64] */;
  %227 = add(%225, %226) /* ty=Tensor[(1664), float64] */;
  %228 = cast(%var_7919, dtype="int32") /* ty=Tensor[(1664), int32] */;
  %229 = shape_of(%227, dtype="int32") /* ty=Tensor[(1), int32] */;
  %230 = cast(%227, dtype="int32") /* ty=Tensor[(1664), int32] */;
  %231 = dyn.reshape(%228, %229, newshape=[]) /* ty=Tensor[(?), int32] */;
  %232 = cast(%220, dtype="float32") /* ty=Tensor[(1664), float32] */;
  %233 = shape_of(%222, dtype="int32") /* ty=Tensor[(1), int32] */;
  %234 = cast(%222, dtype="float32") /* ty=Tensor[(1664), float32] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?), float32] */;
  %236 = power(%234, %235) /* ty=Tensor[(1664), float32] */;
  %237 = cast(%236, dtype="float64") /* ty=Tensor[(1664), float64] */;
  %238 = %218.0;
  %239 = maximum(%230, %231) /* ty=Tensor[(1664), int32] */;
  %240 = atanh(%237) /* ty=Tensor[(1664), float64] */;
  (%238, %239, %240)
}

def @func_2749() -> (Tensor[(5, 10, 6), bool], Tensor[(6, 4, 12), float64], Tensor[(16, 13, 8), int64], Tensor[(1664), int64]) {
  %241 = @func_2506() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %242 = @func_1926() /* ty=(Tensor[(6, 4, 12), float32], Tensor[(6, 4, 12), float64], Tensor[(5, 10, 6), bool], Tensor[(10, 7, 16), float32], Tensor[(1120, 1), float32], Tensor[(10, 7, 16), float32]) */;
  %243 = cast(meta[relay.Constant][11] /* ty=Tensor[(1664), int64] */, dtype="int64") /* ty=Tensor[(1664), int64] */;
  %244 = reshape(%243, newshape=[16, 13, 8]) /* ty=Tensor[(16, 13, 8), int64] */;
  %245 = @func_470(%244) /* ty=(Tensor[(16, 13, 8), int64],) */;
  %246 = %241.0;
  %247 = %242.1;
  %248 = %245.0;
  (%246, %247, %248, meta[relay.Constant][11] /* ty=Tensor[(1664), int64] */)
}

def @func_5127() -> (Tensor[(13, 5, 15), float64],) {
  %249 = cast(meta[relay.Constant][12] /* ty=Tensor[(13, 5, 15), float64] */, dtype="float64") /* ty=Tensor[(13, 5, 15), float64] */;
  %250 = cos(%249) /* ty=Tensor[(13, 5, 15), float64] */;
  (%250,)
}

def @func_2589(%var_2552: Tensor[(8, 10, 5), float64]) -> (Tensor[(8, 10, 5), float64], Tensor[(5, 10, 6), uint16], Tensor[(6, 2, 13), uint32]) {
  %251 = cast(%var_2552, dtype="float64") /* ty=Tensor[(8, 10, 5), float64] */;
  %252 = @func_1397() /* ty=(Tensor[(6, 2, 13), uint32],) */;
  %253 = sqrt(%251) /* ty=Tensor[(8, 10, 5), float64] */;
  %254 = @func_1267() /* ty=Tensor[(5, 10, 6), uint16] */;
  %255 = %252.0;
  (%253, %254, %255)
}

def @func_6143() -> Tensor[(16, 13, 8), int64] {
  %256 = @func_2749() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(6, 4, 12), float64], Tensor[(16, 13, 8), int64], Tensor[(1664), int64]) */;
  %256.2
}

def @func_7113() -> Tensor[(13, 14, 15), uint64] {
  %257 = cast(meta[relay.Constant][14] /* ty=Tensor[(13, 14, 15), uint64] */, dtype="uint64") /* ty=Tensor[(13, 14, 15), uint64] */;
  %258 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(13, 14, 15), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %259 = cast(meta[relay.Constant][13] /* ty=Tensor[(13, 14, 15), uint64] */, dtype="uint64") /* ty=Tensor[(13, 14, 15), uint64] */;
  %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  maximum(%259, %260) /* ty=Tensor[(13, 14, 15), uint64] */
}

def @func_3813() -> (Tensor[(5, 10, 6), uint16],) {
  %261 = @func_2753() /* ty=Tensor[(5, 10, 6), uint16] */;
  (%261,)
}

def @func_3704() -> (Tensor[(5, 10, 6), uint16],) {
  %262 = @func_1822() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %263 = %262.0;
  (%263,)
}

def @func_6542() -> (Tensor[(6, 4, 12), float64], Tensor[(5, 10, 6), bool]) {
  %264 = @func_5569() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(1, 10), float64]) */;
  %265 = @func_2880() /* ty=Tensor[(6, 4, 12), float64] */;
  %266 = %264.0;
  (%265, %266)
}

def @func_1926() -> (Tensor[(6, 4, 12), float32], Tensor[(6, 4, 12), float64], Tensor[(5, 10, 6), bool], Tensor[(10, 7, 16), float32], Tensor[(1120, 1), float32], Tensor[(10, 7, 16), float32]) {
  %267 = cast(meta[relay.Constant][15] /* ty=Tensor[(6, 4, 12), float32] */, dtype="float32") /* ty=Tensor[(6, 4, 12), float32] */;
  %268 = cast(meta[relay.Constant][15] /* ty=Tensor[(6, 4, 12), float32] */, dtype="float64") /* ty=Tensor[(6, 4, 12), float64] */;
  %269 = @func_1446() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %270 = cast(meta[relay.Constant][16] /* ty=Tensor[(1120, 1), float32] */, dtype="float32") /* ty=Tensor[(1120, 1), float32] */;
  %271 = reshape(%270, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), float32] */;
  %272 = @func_384(%271) /* ty=Tensor[(10, 7, 16), float32] */;
  %273 = cast(%272, dtype="float32") /* ty=Tensor[(10, 7, 16), float32] */;
  %274 = reshape(%273, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), float32] */;
  %275 = acos(%267) /* ty=Tensor[(6, 4, 12), float32] */;
  %276 = exp(%268) /* ty=Tensor[(6, 4, 12), float64] */;
  %277 = %269.0;
  %278 = @func_384(%274) /* ty=Tensor[(10, 7, 16), float32] */;
  (%275, %276, %277, %272, meta[relay.Constant][16] /* ty=Tensor[(1120, 1), float32] */, %278)
}

def @func_3839() -> (Tensor[(5, 10, 6), bool],) {
  %279 = @func_2301() /* ty=(Tensor[(6, 2, 13), uint32], Tensor[(5, 10, 6), bool]) */;
  %280 = %279.1;
  (%280,)
}

def @func_7484() -> (Tensor[(5, 10, 6), uint16],) {
  %281 = @func_4597() /* ty=(Tensor[(6, 2, 13), float64], Tensor[(5, 10, 6), uint16]) */;
  %282 = %281.1;
  (%282,)
}

def @func_8125() -> Tensor[(6, 4, 12), float64] {
  @func_6561() /* ty=Tensor[(6, 4, 12), float64] */
}

def @func_3885() -> (Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool]) {
  %283 = @func_3839() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %284 = %283.0;
  %285 = @func_3791() /* ty=Tensor[(5, 10, 6), bool] */;
  (%284, %285)
}

def @func_5701() -> (Tensor[(6, 2, 13), uint32],) {
  %286 = @func_1397() /* ty=(Tensor[(6, 2, 13), uint32],) */;
  %287 = %286.0;
  (%287,)
}

def @func_5836() -> Tensor[(5, 10, 6), bool] {
  %288 = @func_4370() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(6, 4, 12), float64]) */;
  %288.0
}

def @func_4107(%var_4101: Tensor[(10), float64]) -> (Tensor[(5, 10, 6), bool], Tensor[(10), float64], Tensor[(756), float32], Tensor[(10), float64]) {
  %289 = @func_1446() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %290 = cast(meta[relay.Constant][17] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %291 = cast(%var_4101, dtype="float64") /* ty=Tensor[(10), float64] */;
  %292 = reshape(%290, newshape=[9, 6, 14]) /* ty=Tensor[(9, 6, 14), float32] */;
  %293 = reshape(%291, newshape=[1, 10]) /* ty=Tensor[(1, 10), float64] */;
  %294 = @func_3275(%292, %293) /* ty=(Tensor[(9, 6, 14), float32], Tensor[(10), float64], Tensor[(1, 10), float64], Tensor[(10), float64], Tensor[(1, 132), uint32]) */;
  %295 = %289.0;
  %296 = %294.3;
  (%295, %296, meta[relay.Constant][17] /* ty=Tensor[(756), float32] */, %var_4101)
}

def @func_4883() -> Tensor[(5, 10, 6), bool] {
  %297 = @func_2506() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %297.0
}

def @func_5903() -> Tensor[(6, 2, 13), bool] {
  %298 = @func_1795() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(6, 2, 13), bool]) */;
  %298.2
}

def @func_5723() -> (Tensor[(5, 10, 6), bool],) {
  %299 = @func_2749() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(6, 4, 12), float64], Tensor[(16, 13, 8), int64], Tensor[(1664), int64]) */;
  %300 = %299.0;
  (%300,)
}

def @func_1822() -> (Tensor[(5, 10, 6), uint16],) {
  %301 = @func_1598() /* ty=(Tensor[(5, 10, 6), uint16], Tensor[(6, 2, 13), uint32]) */;
  %302 = %301.0;
  (%302,)
}

def @func_2880() -> Tensor[(6, 4, 12), float64] {
  %303 = @func_2749() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(6, 4, 12), float64], Tensor[(16, 13, 8), int64], Tensor[(1664), int64]) */;
  %303.1
}

def @func_5422(%var_5414: Tensor[(10, 5, 5), float32]) -> Tensor[(10, 5, 5), float32] {
  %304 = cast(%var_5414, dtype="float32") /* ty=Tensor[(10, 5, 5), float32] */;
  %305 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(10, 5, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %306 = cast(meta[relay.Constant][18] /* ty=Tensor[(10, 5, 5), float32] */, dtype="float32") /* ty=Tensor[(10, 5, 5), float32] */;
  %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%306, %307) /* ty=Tensor[(10, 5, 5), float32] */
}

def @func_3573(%var_3563: Tensor[(6, 2, 13), uint32]) -> (Tensor[(6, 2, 13), int8],) {
  %308 = @func_1397() /* ty=(Tensor[(6, 2, 13), uint32],) */;
  %309 = %308.0;
  %310 = cast(%var_3563, dtype="int8") /* ty=Tensor[(6, 2, 13), int8] */;
  %311 = shape_of(%309, dtype="int32") /* ty=Tensor[(3), int32] */;
  %312 = cast(%309, dtype="int8") /* ty=Tensor[(6, 2, 13), int8] */;
  %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %314 = bitwise_or(%312, %313) /* ty=Tensor[(6, 2, 13), int8] */;
  (%314,)
}

def @func_6716(%var_6654: Tensor[(1, 1, 5), float32], %var_6683: Tensor[(5, 6, 5), float32]) -> (Tensor[(?, ?, 5), uint16], Tensor[(5, 6, 5), uint8]) {
  %315 = cast(%var_6654, dtype="float32") /* ty=Tensor[(1, 1, 5), float32] */;
  %316 = tan(%315) /* ty=Tensor[(1, 1, 5), float32] */;
  %317 = cast(%var_6654, dtype="uint16") /* ty=Tensor[(1, 1, 5), uint16] */;
  %318 = shape_of(%316, dtype="int32") /* ty=Tensor[(3), int32] */;
  %319 = cast(%316, dtype="uint16") /* ty=Tensor[(1, 1, 5), uint16] */;
  %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %321 = cast(%var_6654, dtype="uint8") /* ty=Tensor[(1, 1, 5), uint8] */;
  %322 = cast(%var_6683, dtype="uint8") /* ty=Tensor[(5, 6, 5), uint8] */;
  %323 = maximum(%319, %320) /* ty=Tensor[(?, ?, 5), uint16] */;
  %324 = logical_xor(%321, %322) /* ty=Tensor[(5, 6, 5), uint8] */;
  (%323, %324)
}

def @func_7075() -> (Tensor[(5, 10, 6), uint16],) {
  %325 = @func_3170() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %326 = %325.0;
  (%326,)
}

def @func_1333(%var_1320: Tensor[(10), float64]) -> (Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), float64], Tensor[(6, 14, 8), bool], Tensor[(672), int16], Tensor[(1, 10, 1), float64], Tensor[(10), float64], Tensor[(15, 3, 12), float32], Tensor[(2548), int16], float32) {
  %327 = @func_1267() /* ty=Tensor[(5, 10, 6), uint16] */;
  %328 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 10, 6), uint16] */, dtype="bool") /* ty=Tensor[(5, 10, 6), bool] */;
  %329 = shape_of(%327, dtype="int32") /* ty=Tensor[(3), int32] */;
  %330 = cast(%327, dtype="bool") /* ty=Tensor[(5, 10, 6), bool] */;
  %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %332 = cast(%327, dtype="float64") /* ty=Tensor[(5, 10, 6), float64] */;
  %333 = cast(meta[relay.Constant][20] /* ty=Tensor[(672), int16] */, dtype="int16") /* ty=Tensor[(672), int16] */;
  %334 = cast(meta[relay.Constant][20] /* ty=Tensor[(672), int16] */, dtype="int16") /* ty=Tensor[(672), int16] */;
  %335 = reshape(%333, newshape=[6, 14, 8]) /* ty=Tensor[(6, 14, 8), int16] */;
  %336 = reshape(%334, newshape=[6, 14, 8]) /* ty=Tensor[(6, 14, 8), int16] */;
  %337 = @func_698(%335, %336) /* ty=(Tensor[(6, 14, 8), bool],) */;
  %338 = cast(%var_1320, dtype="float64") /* ty=Tensor[(10), float64] */;
  %339 = reshape(%338, newshape=[1, 10, 1]) /* ty=Tensor[(1, 10, 1), float64] */;
  %340 = @func_656(%339) /* ty=(Tensor[(1, 10, 1), float64], Tensor[(?, 10, ?), float32]) */;
  %341 = cast(meta[relay.Constant][21] /* ty=Tensor[(2548), int16] */, dtype="int16") /* ty=Tensor[(2548), int16] */;
  %342 = cast(meta[relay.Constant][21] /* ty=Tensor[(2548), int16] */, dtype="int16") /* ty=Tensor[(2548), int16] */;
  %343 = cast(6.08757f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %344 = %337.0;
  %345 = cast(%344, dtype="int16") /* ty=Tensor[(6, 14, 8), int16] */;
  %346 = reshape(%341, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), int16] */;
  %347 = reshape(%342, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), int16] */;
  %348 = reshape(%343, newshape=[]) /* ty=float32 */;
  %349 = reshape(%345, newshape=[672]) /* ty=Tensor[(672), int16] */;
  %350 = @func_1007(%346, %347, %348, %349) /* ty=(Tensor[(13, 14, 14), int16], Tensor[(15, 3, 12), float32], float32, Tensor[(6, 14, 8), bool], Tensor[(672), int16]) */;
  %351 = not_equal(%330, %331) /* ty=Tensor[(5, 10, 6), bool] */;
  %352 = log10(%332) /* ty=Tensor[(5, 10, 6), float64] */;
  %353 = %340.0;
  %354 = %350.1;
  (%351, %352, %344, meta[relay.Constant][20] /* ty=Tensor[(672), int16] */, %353, %var_1320, %354, meta[relay.Constant][21] /* ty=Tensor[(2548), int16] */, 6.08757f /* ty=float32 */)
}

def @func_5569() -> (Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(1, 10), float64]) {
  %355 = @func_3057() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %356 = @func_3057() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %357 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 10), float64] */, dtype="float64") /* ty=Tensor[(1, 10), float64] */;
  %358 = reshape(%357, newshape=[10]) /* ty=Tensor[(10), float64] */;
  %359 = @func_1333(%358) /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), float64], Tensor[(6, 14, 8), bool], Tensor[(672), int16], Tensor[(1, 10, 1), float64], Tensor[(10), float64], Tensor[(15, 3, 12), float32], Tensor[(2548), int16], float32) */;
  %360 = %355.0;
  %361 = %356.0;
  %362 = %359.0;
  (%360, %361, %362, meta[relay.Constant][22] /* ty=Tensor[(1, 10), float64] */)
}

def @func_8165() -> Tensor[(6, 2, 13), float64] {
  @func_4475() /* ty=Tensor[(6, 2, 13), float64] */
}

def @func_6041() -> (Tensor[(5, 10, 6), bool],) {
  %363 = @func_3839() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %364 = %363.0;
  (%364,)
}

def @func_3350(%var_3291: Tensor[(9, 8, 15), float32], %var_3304: Tensor[(9, 8, 15), bool], %var_3317: float32, %var_3318: Tensor[(56, 12), int16]) -> (Tensor[(9, 8, 15), bool], Tensor[(2548, 1), int16], float32, Tensor[(56, 12), float32]) {
  %365 = cast(%var_3291, dtype="float32") /* ty=Tensor[(9, 8, 15), float32] */;
  %366 = atan(%365) /* ty=Tensor[(9, 8, 15), float32] */;
  %367 = cast(%var_3291, dtype="bool") /* ty=Tensor[(9, 8, 15), bool] */;
  %368 = shape_of(%366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %369 = cast(%366, dtype="bool") /* ty=Tensor[(9, 8, 15), bool] */;
  %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %371 = equal(%369, %370) /* ty=Tensor[(9, 8, 15), bool] */;
  %372 = cast(%var_3304, dtype="bool") /* ty=Tensor[(9, 8, 15), bool] */;
  %373 = shape_of(%371, dtype="int32") /* ty=Tensor[(3), int32] */;
  %374 = cast(%371, dtype="bool") /* ty=Tensor[(9, 8, 15), bool] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %376 = cast(meta[relay.Constant][23] /* ty=Tensor[(2548, 1), int16] */, dtype="int16") /* ty=Tensor[(2548, 1), int16] */;
  %377 = cast(meta[relay.Constant][23] /* ty=Tensor[(2548, 1), int16] */, dtype="int16") /* ty=Tensor[(2548, 1), int16] */;
  %378 = cast(%var_3317, dtype="float32") /* ty=float32 */;
  %379 = cast(%var_3318, dtype="int16") /* ty=Tensor[(56, 12), int16] */;
  %380 = reshape(%376, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), int16] */;
  %381 = reshape(%377, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), int16] */;
  %382 = reshape(%378, newshape=[]) /* ty=float32 */;
  %383 = reshape(%379, newshape=[672]) /* ty=Tensor[(672), int16] */;
  %384 = @func_1007(%380, %381, %382, %383) /* ty=(Tensor[(13, 14, 14), int16], Tensor[(15, 3, 12), float32], float32, Tensor[(6, 14, 8), bool], Tensor[(672), int16]) */;
  %385 = %384.4;
  %386 = cast(%385, dtype="float32") /* ty=Tensor[(672), float32] */;
  %387 = shape_of(%var_3318, dtype="int32") /* ty=Tensor[(2), int32] */;
  %388 = cast(%var_3318, dtype="float32") /* ty=Tensor[(56, 12), float32] */;
  %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %390 = less(%374, %375) /* ty=Tensor[(9, 8, 15), bool] */;
  %391 = floor_mod(%388, %389) /* ty=Tensor[(56, 12), float32] */;
  (%390, meta[relay.Constant][23] /* ty=Tensor[(2548, 1), int16] */, %var_3317, %391)
}

def @func_3791() -> Tensor[(5, 10, 6), bool] {
  %392 = @func_2506() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %392.0
}

def @func_4370() -> (Tensor[(5, 10, 6), bool], Tensor[(6, 4, 12), float64]) {
  %393 = @func_1446() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %394 = @func_2749() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(6, 4, 12), float64], Tensor[(16, 13, 8), int64], Tensor[(1664), int64]) */;
  %395 = %393.0;
  %396 = %394.1;
  (%395, %396)
}

def @func_8087() -> (Tensor[(7, 10, 5), float32], Tensor[(6, 14, 8), bool], Tensor[(672), int16]) {
  %397 = @func_5518() /* ty=(Tensor[(7, 10, 5), float64], Tensor[(7, 10, 5), float32]) */;
  %398 = cast(meta[relay.Constant][24] /* ty=Tensor[(672), int16] */, dtype="int16") /* ty=Tensor[(672), int16] */;
  %399 = cast(meta[relay.Constant][24] /* ty=Tensor[(672), int16] */, dtype="int16") /* ty=Tensor[(672), int16] */;
  %400 = reshape(%398, newshape=[6, 14, 8]) /* ty=Tensor[(6, 14, 8), int16] */;
  %401 = reshape(%399, newshape=[6, 14, 8]) /* ty=Tensor[(6, 14, 8), int16] */;
  %402 = @func_698(%400, %401) /* ty=(Tensor[(6, 14, 8), bool],) */;
  %403 = %397.1;
  %404 = %402.0;
  (%403, %404, meta[relay.Constant][24] /* ty=Tensor[(672), int16] */)
}

def @func_3170() -> (Tensor[(5, 10, 6), uint16],) {
  %405 = @func_1822() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %406 = %405.0;
  (%406,)
}

def @func_4164() -> Tensor[(6, 4, 12), float32] {
  %407 = @func_2880() /* ty=Tensor[(6, 4, 12), float64] */;
  %408 = cast(%407, dtype="float64") /* ty=Tensor[(6, 4, 12), float64] */;
  %409 = atanh(%408) /* ty=Tensor[(6, 4, 12), float64] */;
  %410 = cast(%409, dtype="float32") /* ty=Tensor[(6, 4, 12), float32] */;
  %411 = atan(%410) /* ty=Tensor[(6, 4, 12), float32] */;
  %412 = cast(%411, dtype="float32") /* ty=Tensor[(6, 4, 12), float32] */;
  asinh(%412) /* ty=Tensor[(6, 4, 12), float32] */
}

def @func_1531(%var_1508: Tensor[(4, 3, 11), uint32]) -> Tensor[(4, 3, 11), uint32] {
  %413 = cast(%var_1508, dtype="uint32") /* ty=Tensor[(4, 3, 11), uint32] */;
  %414 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(4, 3, 11), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %415 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 3, 11), uint32] */, dtype="uint32") /* ty=Tensor[(4, 3, 11), uint32] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  logical_xor(%415, %416) /* ty=Tensor[(4, 3, 11), uint32] */
}

def @func_7535(%var_7531: Tensor[(16, 5, 5), float64]) -> Tensor[(16, 5, 5), float64] {
  %417 = cast(%var_7531, dtype="float64") /* ty=Tensor[(16, 5, 5), float64] */;
  %418 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(16, 5, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %419 = cast(meta[relay.Constant][26] /* ty=Tensor[(16, 5, 5), float64] */, dtype="float64") /* ty=Tensor[(16, 5, 5), float64] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%419, %420) /* ty=Tensor[(16, 5, 5), float64] */
}

def @func_4012(%var_3920: Tensor[(1120), float32]) -> (Tensor[(6, 2, 13), uint32], Tensor[(6, 2, 13), int8], Tensor[(6, 2, 13), int8], Tensor[(5, 10, 6), float32], Tensor[(1120), uint64], Tensor[(10, 7, 16), float64], Tensor[(6, 4, 12), float32], Tensor[(5, 8, 16), float32], Tensor[(640), int32]) {
  %421 = @func_1598() /* ty=(Tensor[(5, 10, 6), uint16], Tensor[(6, 2, 13), uint32]) */;
  %422 = %421.1;
  %423 = cast(%422, dtype="uint32") /* ty=Tensor[(6, 2, 13), uint32] */;
  %424 = reshape(%423, newshape=[6, 2, 13]) /* ty=Tensor[(6, 2, 13), uint32] */;
  %425 = @func_3573(%424) /* ty=(Tensor[(6, 2, 13), int8],) */;
  %426 = %425.0;
  %427 = cast(%426, dtype="uint32") /* ty=Tensor[(6, 2, 13), uint32] */;
  %428 = reshape(%427, newshape=[6, 2, 13]) /* ty=Tensor[(6, 2, 13), uint32] */;
  %429 = @func_3573(%428) /* ty=(Tensor[(6, 2, 13), int8],) */;
  %430 = @func_2912() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %431 = %430.0;
  %432 = cast(%431, dtype="float32") /* ty=Tensor[(5, 10, 6), float32] */;
  %433 = cast(%var_3920, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %434 = reshape(%433, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), float32] */;
  %435 = @func_384(%434) /* ty=Tensor[(10, 7, 16), float32] */;
  %436 = cast(%435, dtype="uint64") /* ty=Tensor[(10, 7, 16), uint64] */;
  %437 = shape_of(%var_3920, dtype="int32") /* ty=Tensor[(1), int32] */;
  %438 = cast(%var_3920, dtype="uint64") /* ty=Tensor[(1120), uint64] */;
  %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %440 = cast(%435, dtype="float64") /* ty=Tensor[(10, 7, 16), float64] */;
  %441 = cos(%440) /* ty=Tensor[(10, 7, 16), float64] */;
  %442 = cast(%441, dtype="float64") /* ty=Tensor[(10, 7, 16), float64] */;
  %443 = cast(meta[relay.Constant][27] /* ty=Tensor[(640), int32] */, dtype="int32") /* ty=Tensor[(640), int32] */;
  %444 = reshape(%443, newshape=[5, 8, 16]) /* ty=Tensor[(5, 8, 16), int32] */;
  %445 = %429.0;
  %446 = asin(%432) /* ty=Tensor[(5, 10, 6), float32] */;
  %447 = maximum(%438, %439) /* ty=Tensor[(1120), uint64] */;
  %448 = log10(%442) /* ty=Tensor[(10, 7, 16), float64] */;
  %449 = @func_3626() /* ty=Tensor[(6, 4, 12), float32] */;
  %450 = @func_2123(%444) /* ty=Tensor[(5, 8, 16), float32] */;
  (%422, %426, %445, %446, %447, %448, %449, %450, meta[relay.Constant][27] /* ty=Tensor[(640), int32] */)
}

def @func_2431(%var_2419: Tensor[(672), int16]) -> (Tensor[(5, 10, 6), uint16], Tensor[(182, 14), int16], Tensor[(288), float64], Tensor[(672), int16], Tensor[(5, 10, 6), bool]) {
  %451 = @func_1598() /* ty=(Tensor[(5, 10, 6), uint16], Tensor[(6, 2, 13), uint32]) */;
  %452 = cast(meta[relay.Constant][28] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
  %453 = cast(meta[relay.Constant][28] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
  %454 = cast(%var_2419, dtype="int16") /* ty=Tensor[(672), int16] */;
  %455 = reshape(%452, newshape=[6, 4, 12]) /* ty=Tensor[(6, 4, 12), float64] */;
  %456 = reshape(%453, newshape=[6, 4, 12]) /* ty=Tensor[(6, 4, 12), float64] */;
  %457 = reshape(%454, newshape=[672]) /* ty=Tensor[(672), int16] */;
  %458 = @func_2263(%455, %456, %457) /* ty=(Tensor[(6, 4, 12), float64], Tensor[(6, 4, 12), int32], Tensor[(6, 4, 12), bool], Tensor[(15, 3, 12), float32], float32, Tensor[(13, 14, 14), int16], Tensor[(182, 14), int16], Tensor[(672), int16]) */;
  %459 = @func_2301() /* ty=(Tensor[(6, 2, 13), uint32], Tensor[(5, 10, 6), bool]) */;
  %460 = %451.0;
  %461 = %458.6;
  %462 = %459.1;
  (%460, %461, meta[relay.Constant][28] /* ty=Tensor[(288), float64] */, %var_2419, %462)
}

def @func_6561() -> Tensor[(6, 4, 12), float64] {
  %463 = @func_1926() /* ty=(Tensor[(6, 4, 12), float32], Tensor[(6, 4, 12), float64], Tensor[(5, 10, 6), bool], Tensor[(10, 7, 16), float32], Tensor[(1120, 1), float32], Tensor[(10, 7, 16), float32]) */;
  %464 = %463.0;
  %465 = cast(%464, dtype="float64") /* ty=Tensor[(6, 4, 12), float64] */;
  sigmoid(%465) /* ty=Tensor[(6, 4, 12), float64] */
}

def @func_5518() -> (Tensor[(7, 10, 5), float64], Tensor[(7, 10, 5), float32]) {
  %466 = cast(meta[relay.Constant][29] /* ty=Tensor[(7, 10, 5), float32] */, dtype="float32") /* ty=Tensor[(7, 10, 5), float32] */;
  %467 = cosh(%466) /* ty=Tensor[(7, 10, 5), float32] */;
  %468 = cast(%467, dtype="float64") /* ty=Tensor[(7, 10, 5), float64] */;
  %469 = cast(meta[relay.Constant][29] /* ty=Tensor[(7, 10, 5), float32] */, dtype="float32") /* ty=Tensor[(7, 10, 5), float32] */;
  %470 = shape_of(%467, dtype="int32") /* ty=Tensor[(3), int32] */;
  %471 = cast(%467, dtype="float32") /* ty=Tensor[(7, 10, 5), float32] */;
  %472 = dyn.reshape(%469, %470, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %473 = asinh(%468) /* ty=Tensor[(7, 10, 5), float64] */;
  %474 = floor_mod(%471, %472) /* ty=Tensor[(7, 10, 5), float32] */;
  (%473, %474)
}

def @func_2123(%var_2107: Tensor[(5, 8, 16), int32]) -> Tensor[(5, 8, 16), float32] {
  %475 = cast(meta[relay.Constant][30] /* ty=Tensor[(5, 8, 16), int32] */, dtype="int32") /* ty=Tensor[(5, 8, 16), int32] */;
  %476 = shape_of(%var_2107, dtype="int32") /* ty=Tensor[(3), int32] */;
  %477 = cast(%var_2107, dtype="int32") /* ty=Tensor[(5, 8, 16), int32] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %479 = right_shift(%477, %478) /* ty=Tensor[(5, 8, 16), int32] */;
  %480 = cast(%var_2107, dtype="float32") /* ty=Tensor[(5, 8, 16), float32] */;
  %481 = shape_of(%479, dtype="int32") /* ty=Tensor[(3), int32] */;
  %482 = cast(%479, dtype="float32") /* ty=Tensor[(5, 8, 16), float32] */;
  %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%482, %483) /* ty=Tensor[(5, 8, 16), float32] */
}

def @func_5966() -> Tensor[(1, 10), float64] {
  %484 = @func_5569() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(1, 10), float64]) */;
  %484.3
}

def @func_7711() -> (Tensor[(5, 10, 6), uint16],) {
  %485 = @func_1822() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %486 = %485.0;
  (%486,)
}

def @func_6087(%var_6082: Tensor[(132, 1), uint32]) -> (Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), uint16], Tensor[(10), float64], Tensor[(132, 1), uint32]) {
  %487 = cast(meta[relay.Constant][31] /* ty=Tensor[(10), float64] */, dtype="float64") /* ty=Tensor[(10), float64] */;
  %488 = cast(%var_6082, dtype="uint32") /* ty=Tensor[(132, 1), uint32] */;
  %489 = reshape(%487, newshape=[10]) /* ty=Tensor[(10), float64] */;
  %490 = reshape(%488, newshape=[33, 4]) /* ty=Tensor[(33, 4), uint32] */;
  %491 = @func_2065(%489, %490) /* ty=(Tensor[(10, 7, 16), float32], Tensor[(1120), float32], Tensor[(5, 10, 6), uint16], Tensor[(?, 10, ?), float32], Tensor[(10), float64], Tensor[(5, 10, 6), uint16], Tensor[(2548), int16], Tensor[(4, 3, 11), uint32], Tensor[(33, 4), uint32], Tensor[(6, 4, 12), float32], Tensor[(6, 2, 13), bool]) */;
  %492 = @func_4337() /* ty=Tensor[(5, 10, 6), bool] */;
  %493 = %491.2;
  (%492, %493, meta[relay.Constant][31] /* ty=Tensor[(10), float64] */, %var_6082)
}

def @func_6964(%var_6959: Tensor[(6, 4, 12), float64]) -> (Tensor[(5, 10, 6), uint16], Tensor[(5, 10, 6), bool], Tensor[(6, 2, 13), float32], Tensor[(78, 2), uint32], Tensor[(6, 4, 12), int16]) {
  %494 = @func_3704() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %495 = @func_6041() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %496 = cast(meta[relay.Constant][32] /* ty=Tensor[(78, 2), uint32] */, dtype="uint32") /* ty=Tensor[(78, 2), uint32] */;
  %497 = reshape(%496, newshape=[6, 2, 13]) /* ty=Tensor[(6, 2, 13), uint32] */;
  %498 = @func_4059(%497) /* ty=(Tensor[(6, 2, 13), float32],) */;
  %499 = @func_6542() /* ty=(Tensor[(6, 4, 12), float64], Tensor[(5, 10, 6), bool]) */;
  %500 = %499.0;
  %501 = cast(%var_6959, dtype="int16") /* ty=Tensor[(6, 4, 12), int16] */;
  %502 = shape_of(%500, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(%500, dtype="int16") /* ty=Tensor[(6, 4, 12), int16] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %505 = %494.0;
  %506 = %495.0;
  %507 = %498.0;
  %508 = logical_xor(%503, %504) /* ty=Tensor[(6, 4, 12), int16] */;
  (%505, %506, %507, meta[relay.Constant][32] /* ty=Tensor[(78, 2), uint32] */, %508)
}

def @func_3471(%var_3466: Tensor[(672), int16]) -> (Tensor[(6, 2, 13), uint32], Tensor[(672), int16], Tensor[(672), int16]) {
  %509 = @func_1397() /* ty=(Tensor[(6, 2, 13), uint32],) */;
  %510 = cast(%var_3466, dtype="int16") /* ty=Tensor[(672), int16] */;
  %511 = reshape(%510, newshape=[672]) /* ty=Tensor[(672), int16] */;
  %512 = @func_2853(%511) /* ty=(Tensor[(672), int16], Tensor[(5, 10, 6), uint16]) */;
  %513 = %509.0;
  %514 = %512.0;
  (%513, %514, %var_3466)
}

def @func_66(%var_41: float32) -> (Tensor[(15, 3, 12), float32],) {
  %515 = cast(%var_41, dtype="float32") /* ty=float32 */;
  %516 = cast(meta[relay.Constant][33] /* ty=Tensor[(15, 3, 12), float32] */, dtype="float32") /* ty=Tensor[(15, 3, 12), float32] */;
  %517 = power(%515, %516) /* ty=Tensor[(15, 3, 12), float32] */;
  (%517,)
}

def @func_5754() -> (Tensor[(5, 10, 6), bool],) {
  %518 = @func_3885() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool]) */;
  %519 = %518.0;
  (%519,)
}

def @func_1718(%var_1693: Tensor[(2548), int16]) -> (Tensor[(4, 3, 11), uint32], Tensor[(1, 132), uint32], Tensor[(5, 10, 6), uint16], Tensor[(15, 3, 12), float32], Tensor[(10), float64], Tensor[(5, 10, 6), bool], Tensor[(13, 14, 14), int16], Tensor[(2548), int16], float32, Tensor[(56, 12), int16], Tensor[(5, 10, 6), bool]) {
  %520 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 132), uint32] */, dtype="uint32") /* ty=Tensor[(1, 132), uint32] */;
  %521 = reshape(%520, newshape=[4, 3, 11]) /* ty=Tensor[(4, 3, 11), uint32] */;
  %522 = @func_1446() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %523 = %522.0;
  %524 = cast(%523, dtype="float64") /* ty=Tensor[(5, 10, 6), float64] */;
  %525 = atanh(%524) /* ty=Tensor[(5, 10, 6), float64] */;
  %526 = @func_1598() /* ty=(Tensor[(5, 10, 6), uint16], Tensor[(6, 2, 13), uint32]) */;
  %527 = %526.0;
  %528 = cast(%527, dtype="float64") /* ty=Tensor[(5, 10, 6), float64] */;
  %529 = shape_of(%523, dtype="int32") /* ty=Tensor[(3), int32] */;
  %530 = cast(%523, dtype="float64") /* ty=Tensor[(5, 10, 6), float64] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %532 = floor_divide(%530, %531) /* ty=Tensor[(5, 10, 6), float64] */;
  %533 = cast(%532, dtype="uint16") /* ty=Tensor[(5, 10, 6), uint16] */;
  %534 = shape_of(%525, dtype="int32") /* ty=Tensor[(3), int32] */;
  %535 = cast(%525, dtype="uint16") /* ty=Tensor[(5, 10, 6), uint16] */;
  %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %537 = cast(meta[relay.Constant][35] /* ty=Tensor[(10), float64] */, dtype="float64") /* ty=Tensor[(10), float64] */;
  %538 = reshape(%537, newshape=[10]) /* ty=Tensor[(10), float64] */;
  %539 = @func_1333(%538) /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), float64], Tensor[(6, 14, 8), bool], Tensor[(672), int16], Tensor[(1, 10, 1), float64], Tensor[(10), float64], Tensor[(15, 3, 12), float32], Tensor[(2548), int16], float32) */;
  %540 = cast(%532, dtype="bool") /* ty=Tensor[(5, 10, 6), bool] */;
  %541 = shape_of(%525, dtype="int32") /* ty=Tensor[(3), int32] */;
  %542 = cast(%525, dtype="bool") /* ty=Tensor[(5, 10, 6), bool] */;
  %543 = dyn.reshape(%540, %541, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %544 = cast(%var_1693, dtype="int16") /* ty=Tensor[(2548), int16] */;
  %545 = cast(%var_1693, dtype="int16") /* ty=Tensor[(2548), int16] */;
  %546 = cast(9.80168f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %547 = cast(meta[relay.Constant][36] /* ty=Tensor[(56, 12), int16] */, dtype="int16") /* ty=Tensor[(56, 12), int16] */;
  %548 = reshape(%544, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), int16] */;
  %549 = reshape(%545, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), int16] */;
  %550 = reshape(%546, newshape=[]) /* ty=float32 */;
  %551 = reshape(%547, newshape=[672]) /* ty=Tensor[(672), int16] */;
  %552 = @func_1007(%548, %549, %550, %551) /* ty=(Tensor[(13, 14, 14), int16], Tensor[(15, 3, 12), float32], float32, Tensor[(6, 14, 8), bool], Tensor[(672), int16]) */;
  %553 = @func_1446() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %554 = @func_1531(%521) /* ty=Tensor[(4, 3, 11), uint32] */;
  %555 = minimum(%535, %536) /* ty=Tensor[(5, 10, 6), uint16] */;
  %556 = %539.6;
  %557 = less(%542, %543) /* ty=Tensor[(5, 10, 6), bool] */;
  %558 = %552.0;
  %559 = %553.0;
  (%554, meta[relay.Constant][34] /* ty=Tensor[(1, 132), uint32] */, %555, %556, meta[relay.Constant][35] /* ty=Tensor[(10), float64] */, %557, %558, %var_1693, 9.80168f /* ty=float32 */, meta[relay.Constant][36] /* ty=Tensor[(56, 12), int16] */, %559)
}

def @func_3516() -> Tensor[(6, 4, 12), float64] {
  @func_2880() /* ty=Tensor[(6, 4, 12), float64] */
}

def @func_6488(%var_6479: Tensor[(1, 2, 15), uint16], %var_6480: Tensor[(13, 2, 15), uint16]) -> Tensor[(13, 2, 15), uint16] {
  %560 = cast(%var_6479, dtype="uint16") /* ty=Tensor[(1, 2, 15), uint16] */;
  %561 = cast(%var_6480, dtype="uint16") /* ty=Tensor[(13, 2, 15), uint16] */;
  bitwise_xor(%560, %561) /* ty=Tensor[(13, 2, 15), uint16] */
}

def @func_4217(%var_4200: Tensor[(8, 3), float32]) -> Tensor[(8, 3), float32] {
  %562 = cast(%var_4200, dtype="float32") /* ty=Tensor[(8, 3), float32] */;
  cosh(%562) /* ty=Tensor[(8, 3), float32] */
}

def @func_8461() -> Tensor[(5, 10, 6), bool] {
  %563 = @func_2301() /* ty=(Tensor[(6, 2, 13), uint32], Tensor[(5, 10, 6), bool]) */;
  %563.1
}

def @func_3157(%var_3142: Tensor[(10), float64]) -> (Tensor[(5, 10, 6), float64], Tensor[(5, 10, 6), bool], Tensor[(10), float64], Tensor[(5, 10, 6), uint16], Tensor[(1, 10, 1), float64]) {
  %564 = @func_1598() /* ty=(Tensor[(5, 10, 6), uint16], Tensor[(6, 2, 13), uint32]) */;
  %565 = %564.0;
  %566 = cast(%565, dtype="float64") /* ty=Tensor[(5, 10, 6), float64] */;
  %567 = @func_1795() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(6, 2, 13), bool]) */;
  %568 = @func_1598() /* ty=(Tensor[(5, 10, 6), uint16], Tensor[(6, 2, 13), uint32]) */;
  %569 = cast(%var_3142, dtype="float64") /* ty=Tensor[(10), float64] */;
  %570 = reshape(%569, newshape=[10]) /* ty=Tensor[(10), float64] */;
  %571 = @func_1333(%570) /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), float64], Tensor[(6, 14, 8), bool], Tensor[(672), int16], Tensor[(1, 10, 1), float64], Tensor[(10), float64], Tensor[(15, 3, 12), float32], Tensor[(2548), int16], float32) */;
  %572 = %571.4;
  %573 = cast(%572, dtype="float64") /* ty=Tensor[(1, 10, 1), float64] */;
  %574 = tan(%566) /* ty=Tensor[(5, 10, 6), float64] */;
  %575 = %567.0;
  %576 = %568.0;
  %577 = exp(%573) /* ty=Tensor[(1, 10, 1), float64] */;
  (%574, %575, %var_3142, %576, %577)
}

def @func_1795() -> (Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(6, 2, 13), bool]) {
  %578 = @func_1446() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %579 = @func_1446() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %580 = @func_1397() /* ty=(Tensor[(6, 2, 13), uint32],) */;
  %581 = %580.0;
  %582 = cast(%581, dtype="float64") /* ty=Tensor[(6, 2, 13), float64] */;
  %583 = atanh(%582) /* ty=Tensor[(6, 2, 13), float64] */;
  %584 = cast(%581, dtype="bool") /* ty=Tensor[(6, 2, 13), bool] */;
  %585 = shape_of(%583, dtype="int32") /* ty=Tensor[(3), int32] */;
  %586 = cast(%583, dtype="bool") /* ty=Tensor[(6, 2, 13), bool] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %588 = %578.0;
  %589 = %579.0;
  %590 = equal(%586, %587) /* ty=Tensor[(6, 2, 13), bool] */;
  (%588, %589, %590)
}

def @func_2912() -> (Tensor[(5, 10, 6), bool],) {
  %591 = @func_2506() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %592 = %591.0;
  (%592,)
}

def @func_1446() -> (Tensor[(5, 10, 6), bool],) {
  %593 = @func_1267() /* ty=Tensor[(5, 10, 6), uint16] */;
  %594 = cast(%593, dtype="float32") /* ty=Tensor[(5, 10, 6), float32] */;
  %595 = sigmoid(%594) /* ty=Tensor[(5, 10, 6), float32] */;
  %596 = cast(%593, dtype="bool") /* ty=Tensor[(5, 10, 6), bool] */;
  %597 = shape_of(%595, dtype="int32") /* ty=Tensor[(3), int32] */;
  %598 = cast(%595, dtype="bool") /* ty=Tensor[(5, 10, 6), bool] */;
  %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %600 = logical_or(%598, %599) /* ty=Tensor[(5, 10, 6), bool] */;
  (%600,)
}

def @func_2753() -> Tensor[(5, 10, 6), uint16] {
  %601 = @func_1822() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %601.0
}

def @func_2980(%var_2977: Tensor[(66, 2), uint32]) -> (Tensor[(5, 10, 6), uint16], Tensor[(4, 3, 11), uint32], Tensor[(66, 2), uint32]) {
  %602 = @func_1822() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %603 = cast(%var_2977, dtype="uint32") /* ty=Tensor[(66, 2), uint32] */;
  %604 = reshape(%603, newshape=[4, 3, 11]) /* ty=Tensor[(4, 3, 11), uint32] */;
  %605 = %602.0;
  %606 = @func_1531(%604) /* ty=Tensor[(4, 3, 11), uint32] */;
  (%605, %606, %var_2977)
}

def @func_7806(%var_7760: Tensor[(10), float64], %var_7761: Tensor[(132), uint32]) -> (Tensor[(6, 2, 13), float32], Tensor[(5, 10, 6), bool], Tensor[(10, 7, 16), float32], Tensor[(10), float64], Tensor[(132), uint32], Tensor[(5, 10, 6), bool], Tensor[(10, 7, 16), float32], Tensor[(6, 4, 12), float64]) {
  %607 = @func_4370() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(6, 4, 12), float64]) */;
  %608 = cast(%var_7760, dtype="float64") /* ty=Tensor[(10), float64] */;
  %609 = cast(%var_7761, dtype="uint32") /* ty=Tensor[(132), uint32] */;
  %610 = reshape(%608, newshape=[10]) /* ty=Tensor[(10), float64] */;
  %611 = reshape(%609, newshape=[33, 4]) /* ty=Tensor[(33, 4), uint32] */;
  %612 = @func_2065(%610, %611) /* ty=(Tensor[(10, 7, 16), float32], Tensor[(1120), float32], Tensor[(5, 10, 6), uint16], Tensor[(?, 10, ?), float32], Tensor[(10), float64], Tensor[(5, 10, 6), uint16], Tensor[(2548), int16], Tensor[(4, 3, 11), uint32], Tensor[(33, 4), uint32], Tensor[(6, 4, 12), float32], Tensor[(6, 2, 13), bool]) */;
  %613 = @func_5723() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %614 = @func_6630() /* ty=Tensor[(6, 2, 13), float32] */;
  %615 = %607.0;
  %616 = %612.0;
  %617 = %613.0;
  %618 = @func_3829() /* ty=Tensor[(10, 7, 16), float32] */;
  %619 = @func_6561() /* ty=Tensor[(6, 4, 12), float64] */;
  (%614, %615, %616, %var_7760, %var_7761, %617, %618, %619)
}

def @func_8443(%var_8426: Tensor[(4, 5), bool], %var_8427: Tensor[(4, 5), bool]) -> (Tensor[(4, 5), bool],) {
  %620 = cast(%var_8427, dtype="bool") /* ty=Tensor[(4, 5), bool] */;
  %621 = shape_of(%var_8426, dtype="int32") /* ty=Tensor[(2), int32] */;
  %622 = cast(%var_8426, dtype="bool") /* ty=Tensor[(4, 5), bool] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %624 = logical_and(%622, %623) /* ty=Tensor[(4, 5), bool] */;
  (%624,)
}

def @func_8197(%var_8184: Tensor[(6, 14, 8), bool]) -> (Tensor[(6, 14, 8), bool],) {
  %625 = @func_8087() /* ty=(Tensor[(7, 10, 5), float32], Tensor[(6, 14, 8), bool], Tensor[(672), int16]) */;
  %626 = %625.1;
  %627 = cast(%var_8184, dtype="bool") /* ty=Tensor[(6, 14, 8), bool] */;
  %628 = shape_of(%626, dtype="int32") /* ty=Tensor[(3), int32] */;
  %629 = cast(%626, dtype="bool") /* ty=Tensor[(6, 14, 8), bool] */;
  %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %631 = less_equal(%629, %630) /* ty=Tensor[(6, 14, 8), bool] */;
  (%631,)
}

def @func_4573() -> (Tensor[(10), float64], Tensor[(132), uint32], Tensor[(16, 13, 8), int64], Tensor[(1664, 1), int64], Tensor[(5, 10, 6), float64], Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), uint16]) {
  %632 = cast(meta[relay.Constant][37] /* ty=Tensor[(132), uint32] */, dtype="uint32") /* ty=Tensor[(132), uint32] */;
  %633 = reshape(%632, newshape=[132, 1]) /* ty=Tensor[(132, 1), uint32] */;
  %634 = @func_2203(%633) /* ty=(Tensor[(10, 7, 16), float32], Tensor[(10), float64], Tensor[(132, 1), uint32], Tensor[(5, 10, 6), float64]) */;
  %635 = cast(meta[relay.Constant][38] /* ty=Tensor[(1664, 1), int64] */, dtype="int64") /* ty=Tensor[(1664, 1), int64] */;
  %636 = reshape(%635, newshape=[16, 13, 8]) /* ty=Tensor[(16, 13, 8), int64] */;
  %637 = @func_470(%636) /* ty=(Tensor[(16, 13, 8), int64],) */;
  %638 = @func_4370() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(6, 4, 12), float64]) */;
  %639 = %638.0;
  %640 = cast(%639, dtype="float64") /* ty=Tensor[(5, 10, 6), float64] */;
  %641 = cos(%640) /* ty=Tensor[(5, 10, 6), float64] */;
  %642 = cast(%641, dtype="float64") /* ty=Tensor[(5, 10, 6), float64] */;
  %643 = @func_2912() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %644 = @func_3170() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %645 = %634.1;
  %646 = %637.0;
  %647 = log(%642) /* ty=Tensor[(5, 10, 6), float64] */;
  %648 = %643.0;
  %649 = %644.0;
  (%645, meta[relay.Constant][37] /* ty=Tensor[(132), uint32] */, %646, meta[relay.Constant][38] /* ty=Tensor[(1664, 1), int64] */, %647, %648, %649)
}

def @func_3442() -> Tensor[(6, 2, 13), uint32] {
  %650 = @func_1397() /* ty=(Tensor[(6, 2, 13), uint32],) */;
  %650.0
}

def @func_4059(%var_4046: Tensor[(6, 2, 13), uint32]) -> (Tensor[(6, 2, 13), float32],) {
  %651 = @func_1397() /* ty=(Tensor[(6, 2, 13), uint32],) */;
  %652 = %651.0;
  %653 = cast(%var_4046, dtype="float32") /* ty=Tensor[(6, 2, 13), float32] */;
  %654 = shape_of(%652, dtype="int32") /* ty=Tensor[(3), int32] */;
  %655 = cast(%652, dtype="float32") /* ty=Tensor[(6, 2, 13), float32] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %657 = add(%655, %656) /* ty=Tensor[(6, 2, 13), float32] */;
  (%657,)
}

def @func_7378(%var_7323: Tensor[(6, 2, 13), float64]) -> (Tensor[(5, 10, 6), uint16], Tensor[(6, 4, 12), float64], Tensor[(6, 4, 12), float32], Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), uint16], Tensor[(6, 2, 13), bool], Tensor[(6, 2, 13), float64]) {
  %658 = @func_7075() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %659 = @func_6542() /* ty=(Tensor[(6, 4, 12), float64], Tensor[(5, 10, 6), bool]) */;
  %660 = @func_2301() /* ty=(Tensor[(6, 2, 13), uint32], Tensor[(5, 10, 6), bool]) */;
  %661 = @func_5057() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %662 = @func_4475() /* ty=Tensor[(6, 2, 13), float64] */;
  %663 = cast(%var_7323, dtype="bool") /* ty=Tensor[(6, 2, 13), bool] */;
  %664 = shape_of(%662, dtype="int32") /* ty=Tensor[(3), int32] */;
  %665 = cast(%662, dtype="bool") /* ty=Tensor[(6, 2, 13), bool] */;
  %666 = dyn.reshape(%663, %664, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %667 = cast(%var_7323, dtype="float64") /* ty=Tensor[(6, 2, 13), float64] */;
  %668 = sigmoid(%667) /* ty=Tensor[(6, 2, 13), float64] */;
  %669 = cast(%668, dtype="float64") /* ty=Tensor[(6, 2, 13), float64] */;
  %670 = %658.0;
  %671 = %659.0;
  %672 = @func_4164() /* ty=Tensor[(6, 4, 12), float32] */;
  %673 = %660.1;
  %674 = %661.0;
  %675 = not_equal(%665, %666) /* ty=Tensor[(6, 2, 13), bool] */;
  %676 = sqrt(%669) /* ty=Tensor[(6, 2, 13), float64] */;
  (%670, %671, %672, %673, %674, %675, %676)
}

def @func_7466(%var_7445: Tensor[(5, 10, 6), uint16]) -> (Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), int16], Tensor[(5, 10, 6), bool], Tensor[(288), float32]) {
  %677 = @func_1822() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %678 = %677.0;
  %679 = cast(%var_7445, dtype="int16") /* ty=Tensor[(5, 10, 6), int16] */;
  %680 = shape_of(%678, dtype="int32") /* ty=Tensor[(3), int32] */;
  %681 = cast(%678, dtype="int16") /* ty=Tensor[(5, 10, 6), int16] */;
  %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %683 = cast(meta[relay.Constant][39] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %684 = reshape(%683, newshape=[6, 4, 12]) /* ty=Tensor[(6, 4, 12), float32] */;
  %685 = @func_4316(%684) /* ty=(Tensor[(5, 10, 6), bool], Tensor[(6, 4, 12), uint32], Tensor[(1, 132), uint32], Tensor[(756), float32], Tensor[(10, 1), float64]) */;
  %686 = @func_3791() /* ty=Tensor[(5, 10, 6), bool] */;
  %687 = bitwise_xor(%681, %682) /* ty=Tensor[(5, 10, 6), int16] */;
  %688 = %685.0;
  (%686, %687, %688, meta[relay.Constant][39] /* ty=Tensor[(288), float32] */)
}

def @func_3204(%var_3177: Tensor[(2, 10, 2), float64]) -> Tensor[(2, 10, 2), uint64] {
  %689 = cast(%var_3177, dtype="float64") /* ty=Tensor[(2, 10, 2), float64] */;
  %690 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(2, 10, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %691 = cast(meta[relay.Constant][40] /* ty=Tensor[(2, 10, 2), float64] */, dtype="float64") /* ty=Tensor[(2, 10, 2), float64] */;
  %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %693 = floor_mod(%691, %692) /* ty=Tensor[(2, 10, 2), float64] */;
  %694 = cast(%var_3177, dtype="uint64") /* ty=Tensor[(2, 10, 2), uint64] */;
  %695 = shape_of(%693, dtype="int32") /* ty=Tensor[(3), int32] */;
  %696 = cast(%693, dtype="uint64") /* ty=Tensor[(2, 10, 2), uint64] */;
  %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  logical_xor(%696, %697) /* ty=Tensor[(2, 10, 2), uint64] */
}

def @func_8388(%var_8352: Tensor[(210), float32]) -> (Tensor[(5, 10, 6), uint16], Tensor[(?, 14, 15), float32]) {
  %698 = @func_5057() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %699 = cast(%var_8352, dtype="float32") /* ty=Tensor[(210), float32] */;
  %700 = reshape(%699, newshape=[1, 14, 15]) /* ty=Tensor[(1, 14, 15), float32] */;
  %701 = @func_8272(%700) /* ty=(Tensor[(1, 14, 15), float32],) */;
  %702 = %701.0;
  %703 = cast(%var_8352, dtype="float32") /* ty=Tensor[(210), float32] */;
  %704 = shape_of(%702, dtype="int32") /* ty=Tensor[(3), int32] */;
  %705 = cast(%702, dtype="float32") /* ty=Tensor[(1, 14, 15), float32] */;
  %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %707 = %698.0;
  %708 = power(%705, %706) /* ty=Tensor[(?, 14, 15), float32] */;
  (%707, %708)
}

def @func_2203(%var_2169: Tensor[(132, 1), uint32]) -> (Tensor[(10, 7, 16), float32], Tensor[(10), float64], Tensor[(132, 1), uint32], Tensor[(5, 10, 6), float64]) {
  %709 = cast(meta[relay.Constant][41] /* ty=Tensor[(10), float64] */, dtype="float64") /* ty=Tensor[(10), float64] */;
  %710 = cast(%var_2169, dtype="uint32") /* ty=Tensor[(132, 1), uint32] */;
  %711 = reshape(%709, newshape=[10]) /* ty=Tensor[(10), float64] */;
  %712 = reshape(%710, newshape=[33, 4]) /* ty=Tensor[(33, 4), uint32] */;
  %713 = @func_2065(%711, %712) /* ty=(Tensor[(10, 7, 16), float32], Tensor[(1120), float32], Tensor[(5, 10, 6), uint16], Tensor[(?, 10, ?), float32], Tensor[(10), float64], Tensor[(5, 10, 6), uint16], Tensor[(2548), int16], Tensor[(4, 3, 11), uint32], Tensor[(33, 4), uint32], Tensor[(6, 4, 12), float32], Tensor[(6, 2, 13), bool]) */;
  %714 = @func_1822() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %715 = %714.0;
  %716 = cast(%715, dtype="float64") /* ty=Tensor[(5, 10, 6), float64] */;
  %717 = %713.0;
  %718 = cosh(%716) /* ty=Tensor[(5, 10, 6), float64] */;
  (%717, meta[relay.Constant][41] /* ty=Tensor[(10), float64] */, %var_2169, %718)
}

def @func_6184() -> Tensor[(40), float64] {
  %719 = @func_5259() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), uint16], Tensor[(2, 10, 2), uint64], Tensor[(40), float64]) */;
  %719.3
}

def @func_5057() -> (Tensor[(5, 10, 6), uint16],) {
  %720 = @func_1267() /* ty=Tensor[(5, 10, 6), uint16] */;
  (%720,)
}

def @func_7168() -> (Tensor[(5, 10, 6), bool],) {
  %721 = @func_6337() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %722 = %721.0;
  (%722,)
}

def @func_5118(%var_5105: Tensor[(5, 10, 6), uint16]) -> (Tensor[(5, 10, 6), uint32], Tensor[(5, 10, 6), bool]) {
  %723 = @func_3170() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %724 = %723.0;
  %725 = cast(%var_5105, dtype="uint32") /* ty=Tensor[(5, 10, 6), uint32] */;
  %726 = shape_of(%724, dtype="int32") /* ty=Tensor[(3), int32] */;
  %727 = cast(%724, dtype="uint32") /* ty=Tensor[(5, 10, 6), uint32] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %729 = @func_2912() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %730 = logical_xor(%727, %728) /* ty=Tensor[(5, 10, 6), uint32] */;
  %731 = %729.0;
  (%730, %731)
}

def @func_2301() -> (Tensor[(6, 2, 13), uint32], Tensor[(5, 10, 6), bool]) {
  %732 = @func_1397() /* ty=(Tensor[(6, 2, 13), uint32],) */;
  %733 = @func_1446() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %734 = %732.0;
  %735 = %733.0;
  (%734, %735)
}

def @func_6428() -> Tensor[(5, 10, 6), bool] {
  %736 = @func_1446() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %736.0
}

def @func_5383() -> (Tensor[(5, 10, 6), uint16], Tensor[(8, 10, 5), float64], Tensor[(8, 50), float64], Tensor[(6, 4, 12), float64], Tensor[(6, 2, 13), int8], Tensor[(1120), float32]) {
  %737 = @func_5057() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %738 = cast(meta[relay.Constant][42] /* ty=Tensor[(8, 50), float64] */, dtype="float64") /* ty=Tensor[(8, 50), float64] */;
  %739 = reshape(%738, newshape=[8, 10, 5]) /* ty=Tensor[(8, 10, 5), float64] */;
  %740 = @func_2589(%739) /* ty=(Tensor[(8, 10, 5), float64], Tensor[(5, 10, 6), uint16], Tensor[(6, 2, 13), uint32]) */;
  %741 = cast(meta[relay.Constant][43] /* ty=Tensor[(1120), float32] */, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %742 = reshape(%741, newshape=[1120]) /* ty=Tensor[(1120), float32] */;
  %743 = @func_4012(%742) /* ty=(Tensor[(6, 2, 13), uint32], Tensor[(6, 2, 13), int8], Tensor[(6, 2, 13), int8], Tensor[(5, 10, 6), float32], Tensor[(1120), uint64], Tensor[(10, 7, 16), float64], Tensor[(6, 4, 12), float32], Tensor[(5, 8, 16), float32], Tensor[(640), int32]) */;
  %744 = %737.0;
  %745 = %740.0;
  %746 = @func_2880() /* ty=Tensor[(6, 4, 12), float64] */;
  %747 = %743.2;
  (%744, %745, meta[relay.Constant][42] /* ty=Tensor[(8, 50), float64] */, %746, %747, meta[relay.Constant][43] /* ty=Tensor[(1120), float32] */)
}

def @func_698(%var_690: Tensor[(6, 14, 8), int16], %var_691: Tensor[(6, 14, 8), int16]) -> (Tensor[(6, 14, 8), bool],) {
  %748 = cast(%var_691, dtype="bool") /* ty=Tensor[(6, 14, 8), bool] */;
  %749 = shape_of(%var_690, dtype="int32") /* ty=Tensor[(3), int32] */;
  %750 = cast(%var_690, dtype="bool") /* ty=Tensor[(6, 14, 8), bool] */;
  %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %752 = equal(%750, %751) /* ty=Tensor[(6, 14, 8), bool] */;
  (%752,)
}

def @func_3057() -> (Tensor[(5, 10, 6), bool],) {
  %753 = @func_1446() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %754 = %753.0;
  (%754,)
}

def @func_4984() -> Tensor[(5, 10, 6), uint16] {
  %755 = @func_3813() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %755.0
}

def @func_2392(%var_2379: float32) -> (Tensor[(6, 2, 13), uint32], Tensor[(4, 3, 11), uint32], Tensor[(132), uint32], Tensor[(15, 3, 12), float32], float32) {
  %756 = @func_2301() /* ty=(Tensor[(6, 2, 13), uint32], Tensor[(5, 10, 6), bool]) */;
  %757 = cast(meta[relay.Constant][44] /* ty=Tensor[(132), uint32] */, dtype="uint32") /* ty=Tensor[(132), uint32] */;
  %758 = reshape(%757, newshape=[4, 3, 11]) /* ty=Tensor[(4, 3, 11), uint32] */;
  %759 = cast(%var_2379, dtype="float32") /* ty=float32 */;
  %760 = reshape(%759, newshape=[]) /* ty=float32 */;
  %761 = @func_66(%760) /* ty=(Tensor[(15, 3, 12), float32],) */;
  %762 = %756.0;
  %763 = @func_1531(%758) /* ty=Tensor[(4, 3, 11), uint32] */;
  %764 = %761.0;
  (%762, %763, meta[relay.Constant][44] /* ty=Tensor[(132), uint32] */, %764, %var_2379)
}

def @func_6766() -> (Tensor[(5, 10, 6), uint16], Tensor[(5, 10, 6), bool]) {
  %765 = @func_5057() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %766 = %765.0;
  %767 = @func_4883() /* ty=Tensor[(5, 10, 6), bool] */;
  (%766, %767)
}

def @func_2065(%var_1996: Tensor[(10), float64], %var_2021: Tensor[(33, 4), uint32]) -> (Tensor[(10, 7, 16), float32], Tensor[(1120), float32], Tensor[(5, 10, 6), uint16], Tensor[(?, 10, ?), float32], Tensor[(10), float64], Tensor[(5, 10, 6), uint16], Tensor[(2548), int16], Tensor[(4, 3, 11), uint32], Tensor[(33, 4), uint32], Tensor[(6, 4, 12), float32], Tensor[(6, 2, 13), bool]) {
  %768 = cast(meta[relay.Constant][45] /* ty=Tensor[(1120), float32] */, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %769 = reshape(%768, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), float32] */;
  %770 = @func_1822() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %771 = cast(%var_1996, dtype="float64") /* ty=Tensor[(10), float64] */;
  %772 = reshape(%771, newshape=[1, 10, 1]) /* ty=Tensor[(1, 10, 1), float64] */;
  %773 = @func_656(%772) /* ty=(Tensor[(1, 10, 1), float64], Tensor[(?, 10, ?), float32]) */;
  %774 = cast(meta[relay.Constant][46] /* ty=Tensor[(2548), int16] */, dtype="int16") /* ty=Tensor[(2548), int16] */;
  %775 = reshape(%774, newshape=[2548]) /* ty=Tensor[(2548), int16] */;
  %776 = @func_1718(%775) /* ty=(Tensor[(4, 3, 11), uint32], Tensor[(1, 132), uint32], Tensor[(5, 10, 6), uint16], Tensor[(15, 3, 12), float32], Tensor[(10), float64], Tensor[(5, 10, 6), bool], Tensor[(13, 14, 14), int16], Tensor[(2548), int16], float32, Tensor[(56, 12), int16], Tensor[(5, 10, 6), bool]) */;
  %777 = cast(%var_2021, dtype="uint32") /* ty=Tensor[(33, 4), uint32] */;
  %778 = reshape(%777, newshape=[4, 3, 11]) /* ty=Tensor[(4, 3, 11), uint32] */;
  %779 = @func_1926() /* ty=(Tensor[(6, 4, 12), float32], Tensor[(6, 4, 12), float64], Tensor[(5, 10, 6), bool], Tensor[(10, 7, 16), float32], Tensor[(1120, 1), float32], Tensor[(10, 7, 16), float32]) */;
  %780 = @func_1598() /* ty=(Tensor[(5, 10, 6), uint16], Tensor[(6, 2, 13), uint32]) */;
  %781 = %780.1;
  %782 = cast(%781, dtype="float32") /* ty=Tensor[(6, 2, 13), float32] */;
  %783 = rsqrt(%782) /* ty=Tensor[(6, 2, 13), float32] */;
  %784 = cast(%781, dtype="bool") /* ty=Tensor[(6, 2, 13), bool] */;
  %785 = shape_of(%783, dtype="int32") /* ty=Tensor[(3), int32] */;
  %786 = cast(%783, dtype="bool") /* ty=Tensor[(6, 2, 13), bool] */;
  %787 = dyn.reshape(%784, %785, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %788 = @func_384(%769) /* ty=Tensor[(10, 7, 16), float32] */;
  %789 = %770.0;
  %790 = %773.1;
  %791 = %776.2;
  %792 = @func_1531(%778) /* ty=Tensor[(4, 3, 11), uint32] */;
  %793 = %779.0;
  %794 = logical_and(%786, %787) /* ty=Tensor[(6, 2, 13), bool] */;
  (%788, meta[relay.Constant][45] /* ty=Tensor[(1120), float32] */, %789, %790, %var_1996, %791, meta[relay.Constant][46] /* ty=Tensor[(2548), int16] */, %792, %var_2021, %793, %794)
}

def @func_3729() -> (Tensor[(5, 10, 6), bool],) {
  %795 = @func_2912() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %796 = %795.0;
  (%796,)
}

def @func_4707() -> (Tensor[(5, 10, 6), uint16], Tensor[(6, 4, 12), float32], Tensor[(6, 4, 12), float64], Tensor[(5, 10, 6), uint16], Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool]) {
  %797 = @func_2506() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %798 = @func_3839() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %799 = @func_2753() /* ty=Tensor[(5, 10, 6), uint16] */;
  %800 = @func_3626() /* ty=Tensor[(6, 4, 12), float32] */;
  %801 = @func_3516() /* ty=Tensor[(6, 4, 12), float64] */;
  %802 = @func_2753() /* ty=Tensor[(5, 10, 6), uint16] */;
  %803 = %797.0;
  %804 = %798.0;
  (%799, %800, %801, %802, %803, %804)
}

def @func_656(%var_627: Tensor[(1, 10, 1), float64]) -> (Tensor[(1, 10, 1), float64], Tensor[(?, 10, ?), float32]) {
  %805 = cast(%var_627, dtype="float64") /* ty=Tensor[(1, 10, 1), float64] */;
  %806 = cast(%var_627, dtype="float64") /* ty=Tensor[(1, 10, 1), float64] */;
  %807 = cosh(%806) /* ty=Tensor[(1, 10, 1), float64] */;
  %808 = cast(%var_627, dtype="float64") /* ty=Tensor[(1, 10, 1), float64] */;
  %809 = log10(%808) /* ty=Tensor[(1, 10, 1), float64] */;
  %810 = cast(%809, dtype="float32") /* ty=Tensor[(1, 10, 1), float32] */;
  %811 = shape_of(%807, dtype="int32") /* ty=Tensor[(3), int32] */;
  %812 = cast(%807, dtype="float32") /* ty=Tensor[(1, 10, 1), float32] */;
  %813 = dyn.reshape(%810, %811, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %814 = asin(%805) /* ty=Tensor[(1, 10, 1), float64] */;
  %815 = power(%812, %813) /* ty=Tensor[(?, 10, ?), float32] */;
  (%814, %815)
}

def @func_4466(%var_4420: Tensor[(24, 1), float32]) -> (Tensor[(8, 3), float32], Tensor[(24, 1), float32], Tensor[(8, 3), float32], Tensor[(5, 10, 6), uint16], Tensor[(6, 4, 12), float64]) {
  %816 = cast(%var_4420, dtype="float32") /* ty=Tensor[(24, 1), float32] */;
  %817 = reshape(%816, newshape=[8, 3]) /* ty=Tensor[(8, 3), float32] */;
  %818 = @func_4217(%817) /* ty=Tensor[(8, 3), float32] */;
  %819 = cast(%818, dtype="float32") /* ty=Tensor[(8, 3), float32] */;
  %820 = reshape(%819, newshape=[8, 3]) /* ty=Tensor[(8, 3), float32] */;
  %821 = @func_3813() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %822 = @func_3626() /* ty=Tensor[(6, 4, 12), float32] */;
  %823 = cast(%822, dtype="float64") /* ty=Tensor[(6, 4, 12), float64] */;
  %824 = acosh(%823) /* ty=Tensor[(6, 4, 12), float64] */;
  %825 = cast(%824, dtype="float64") /* ty=Tensor[(6, 4, 12), float64] */;
  %826 = @func_4217(%820) /* ty=Tensor[(8, 3), float32] */;
  %827 = %821.0;
  %828 = asin(%825) /* ty=Tensor[(6, 4, 12), float64] */;
  (%818, %var_4420, %826, %827, %828)
}

def @func_3829() -> Tensor[(10, 7, 16), float32] {
  %829 = @func_1926() /* ty=(Tensor[(6, 4, 12), float32], Tensor[(6, 4, 12), float64], Tensor[(5, 10, 6), bool], Tensor[(10, 7, 16), float32], Tensor[(1120, 1), float32], Tensor[(10, 7, 16), float32]) */;
  %829.3
}

def @func_470(%var_464: Tensor[(16, 13, 8), int64]) -> (Tensor[(16, 13, 8), int64],) {
  %830 = cast(%var_464, dtype="int64") /* ty=Tensor[(16, 13, 8), int64] */;
  %831 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(16, 13, 8), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %832 = cast(meta[relay.Constant][47] /* ty=Tensor[(16, 13, 8), int64] */, dtype="int64") /* ty=Tensor[(16, 13, 8), int64] */;
  %833 = dyn.reshape(%830, %831, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %834 = left_shift(%832, %833) /* ty=Tensor[(16, 13, 8), int64] */;
  (%834,)
}

def @func_4931(%var_4921: Tensor[(6, 4, 12), float32]) -> (Tensor[(6, 4, 12), float64],) {
  %835 = @func_3626() /* ty=Tensor[(6, 4, 12), float32] */;
  %836 = cast(%var_4921, dtype="float64") /* ty=Tensor[(6, 4, 12), float64] */;
  %837 = shape_of(%835, dtype="int32") /* ty=Tensor[(3), int32] */;
  %838 = cast(%835, dtype="float64") /* ty=Tensor[(6, 4, 12), float64] */;
  %839 = dyn.reshape(%836, %837, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %840 = floor_mod(%838, %839) /* ty=Tensor[(6, 4, 12), float64] */;
  (%840,)
}

def @func_8051() -> Tensor[(6, 2, 13), float64] {
  %841 = @func_4597() /* ty=(Tensor[(6, 2, 13), float64], Tensor[(5, 10, 6), uint16]) */;
  %841.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5127() -> (Tensor[(13, 5, 15), float64],) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(13, 5, 15), float64] */, dtype="float64") /* ty=Tensor[(13, 5, 15), float64] */;
  %1 = cos(%0) /* ty=Tensor[(13, 5, 15), float64] */;
  (%1,)
}

def @func_3831() -> Tensor[(10, 7, 16), float32] {
  @func_3829() /* ty=Tensor[(10, 7, 16), float32] */
}

def @func_6089(%var_6088: Tensor[(132, 1), uint32]) -> (Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), uint16], Tensor[(10), float64], Tensor[(132, 1), uint32]) {
  %9 = fn (%var_6082: Tensor[(132, 1), uint32]) -> (Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), uint16], Tensor[(10), float64], Tensor[(132, 1), uint32]) {
    %2 = cast(meta[relay.Constant][1] /* ty=Tensor[(10), float64] */, dtype="float64") /* ty=Tensor[(10), float64] */;
    %3 = cast(%var_6082, dtype="uint32") /* ty=Tensor[(132, 1), uint32] */;
    %4 = reshape(%2, newshape=[10]) /* ty=Tensor[(10), float64] */;
    %5 = reshape(%3, newshape=[33, 4]) /* ty=Tensor[(33, 4), uint32] */;
    %6 = @func_2065(%4, %5) /* ty=(Tensor[(10, 7, 16), float32], Tensor[(1120), float32], Tensor[(5, 10, 6), uint16], Tensor[(?, 10, ?), float32], Tensor[(10), float64], Tensor[(5, 10, 6), uint16], Tensor[(2548), int16], Tensor[(4, 3, 11), uint32], Tensor[(33, 4), uint32], Tensor[(6, 4, 12), float32], Tensor[(6, 2, 13), bool]) */;
    %7 = @func_4337() /* ty=Tensor[(5, 10, 6), bool] */;
    %8 = %6.2;
    (%7, %8, meta[relay.Constant][1] /* ty=Tensor[(10), float64] */, %var_6082)
  };
  %9(%var_6088) /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), uint16], Tensor[(10), float64], Tensor[(132, 1), uint32]) */
}

def @func_5385() -> (Tensor[(5, 10, 6), uint16], Tensor[(8, 10, 5), float64], Tensor[(8, 50), float64], Tensor[(6, 4, 12), float64], Tensor[(6, 2, 13), int8], Tensor[(1120), float32]) {
  @func_5383() /* ty=(Tensor[(5, 10, 6), uint16], Tensor[(8, 10, 5), float64], Tensor[(8, 50), float64], Tensor[(6, 4, 12), float64], Tensor[(6, 2, 13), int8], Tensor[(1120), float32]) */
}

def @func_1534(%var_1532: Tensor[(4, 3, 11), uint32]) -> Tensor[(4, 3, 11), uint32] {
  @func_1531(%var_1532) /* ty=Tensor[(4, 3, 11), uint32] */
}

def @func_3813() -> (Tensor[(5, 10, 6), uint16],) {
  %10 = @func_2753() /* ty=Tensor[(5, 10, 6), uint16] */;
  (%10,)
}

def @func_8053() -> Tensor[(6, 2, 13), float64] {
  @func_8051() /* ty=Tensor[(6, 2, 13), float64] */
}

def @func_658(%var_657: Tensor[(1, 10, 1), float64]) -> (Tensor[(1, 10, 1), float64], Tensor[(?, 10, ?), float32]) {
  %22 = fn (%var_627: Tensor[(1, 10, 1), float64]) -> (Tensor[(1, 10, 1), float64], Tensor[(?, 10, ?), float32]) {
    %11 = cast(%var_627, dtype="float64") /* ty=Tensor[(1, 10, 1), float64] */;
    %12 = cast(%var_627, dtype="float64") /* ty=Tensor[(1, 10, 1), float64] */;
    %13 = cosh(%12) /* ty=Tensor[(1, 10, 1), float64] */;
    %14 = cast(%var_627, dtype="float64") /* ty=Tensor[(1, 10, 1), float64] */;
    %15 = log10(%14) /* ty=Tensor[(1, 10, 1), float64] */;
    %16 = cast(%15, dtype="float32") /* ty=Tensor[(1, 10, 1), float32] */;
    %17 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
    %18 = cast(%13, dtype="float32") /* ty=Tensor[(1, 10, 1), float32] */;
    %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %20 = asin(%11) /* ty=Tensor[(1, 10, 1), float64] */;
    %21 = power(%18, %19) /* ty=Tensor[(?, 10, ?), float32] */;
    (%20, %21)
  };
  %22(%var_657) /* ty=(Tensor[(1, 10, 1), float64], Tensor[(?, 10, ?), float32]) */
}

def @func_2750() -> (Tensor[(5, 10, 6), bool], Tensor[(6, 4, 12), float64], Tensor[(16, 13, 8), int64], Tensor[(1664), int64]) {
  %31 = fn () -> (Tensor[(5, 10, 6), bool], Tensor[(6, 4, 12), float64], Tensor[(16, 13, 8), int64], Tensor[(1664), int64]) {
    %23 = @func_2506() /* ty=(Tensor[(5, 10, 6), bool],) */;
    %24 = @func_1926() /* ty=(Tensor[(6, 4, 12), float32], Tensor[(6, 4, 12), float64], Tensor[(5, 10, 6), bool], Tensor[(10, 7, 16), float32], Tensor[(1120, 1), float32], Tensor[(10, 7, 16), float32]) */;
    %25 = cast(meta[relay.Constant][2] /* ty=Tensor[(1664), int64] */, dtype="int64") /* ty=Tensor[(1664), int64] */;
    %26 = reshape(%25, newshape=[16, 13, 8]) /* ty=Tensor[(16, 13, 8), int64] */;
    %27 = @func_470(%26) /* ty=(Tensor[(16, 13, 8), int64],) */;
    %28 = %23.0;
    %29 = %24.1;
    %30 = %27.0;
    (%28, %29, %30, meta[relay.Constant][2] /* ty=Tensor[(1664), int64] */)
  };
  %31() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(6, 4, 12), float64], Tensor[(16, 13, 8), int64], Tensor[(1664), int64]) */
}

def @func_5702() -> (Tensor[(6, 2, 13), uint32],) {
  %34 = fn () -> (Tensor[(6, 2, 13), uint32],) {
    %32 = @func_1397() /* ty=(Tensor[(6, 2, 13), uint32],) */;
    %33 = %32.0;
    (%33,)
  };
  %34() /* ty=(Tensor[(6, 2, 13), uint32],) */
}

def @func_3160(%var_3158: Tensor[(10), float64]) -> (Tensor[(5, 10, 6), float64], Tensor[(5, 10, 6), bool], Tensor[(10), float64], Tensor[(5, 10, 6), uint16], Tensor[(1, 10, 1), float64]) {
  @func_3157(%var_3158) /* ty=(Tensor[(5, 10, 6), float64], Tensor[(5, 10, 6), bool], Tensor[(10), float64], Tensor[(5, 10, 6), uint16], Tensor[(1, 10, 1), float64]) */
}

def @func_3840() -> (Tensor[(5, 10, 6), bool],) {
  %37 = fn () -> (Tensor[(5, 10, 6), bool],) {
    %35 = @func_2301() /* ty=(Tensor[(6, 2, 13), uint32], Tensor[(5, 10, 6), bool]) */;
    %36 = %35.1;
    (%36,)
  };
  %37() /* ty=(Tensor[(5, 10, 6), bool],) */
}

def @func_5422(%var_5414: Tensor[(10, 5, 5), float32]) -> Tensor[(10, 5, 5), float32] {
  %38 = cast(%var_5414, dtype="float32") /* ty=Tensor[(10, 5, 5), float32] */;
  %39 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(10, 5, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %40 = cast(meta[relay.Constant][3] /* ty=Tensor[(10, 5, 5), float32] */, dtype="float32") /* ty=Tensor[(10, 5, 5), float32] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%40, %41) /* ty=Tensor[(10, 5, 5), float32] */
}

def @func_2853(%var_2812: Tensor[(672), int16]) -> (Tensor[(672), int16], Tensor[(5, 10, 6), uint16]) {
  %42 = @func_1822() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %43 = %42.0;
  %44 = cast(%var_2812, dtype="int16") /* ty=Tensor[(672), int16] */;
  %45 = reshape(%44, newshape=[672]) /* ty=Tensor[(672), int16] */;
  %46 = @func_2431(%45) /* ty=(Tensor[(5, 10, 6), uint16], Tensor[(182, 14), int16], Tensor[(288), float64], Tensor[(672), int16], Tensor[(5, 10, 6), bool]) */;
  %47 = %46.4;
  %48 = cast(%47, dtype="uint16") /* ty=Tensor[(5, 10, 6), uint16] */;
  %49 = shape_of(%43, dtype="int32") /* ty=Tensor[(3), int32] */;
  %50 = cast(%43, dtype="uint16") /* ty=Tensor[(5, 10, 6), uint16] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %52 = right_shift(%50, %51) /* ty=Tensor[(5, 10, 6), uint16] */;
  (%var_2812, %52)
}

def @func_7143() -> (Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), uint16]) {
  %53 = @func_6542() /* ty=(Tensor[(6, 4, 12), float64], Tensor[(5, 10, 6), bool]) */;
  %54 = %53.1;
  %55 = @func_2753() /* ty=Tensor[(5, 10, 6), uint16] */;
  (%54, %55)
}

def @func_6767() -> (Tensor[(5, 10, 6), uint16], Tensor[(5, 10, 6), bool]) {
  %59 = fn () -> (Tensor[(5, 10, 6), uint16], Tensor[(5, 10, 6), bool]) {
    %56 = @func_5057() /* ty=(Tensor[(5, 10, 6), uint16],) */;
    %57 = %56.0;
    %58 = @func_4883() /* ty=Tensor[(5, 10, 6), bool] */;
    (%57, %58)
  };
  %59() /* ty=(Tensor[(5, 10, 6), uint16], Tensor[(5, 10, 6), bool]) */
}

def @func_5755() -> (Tensor[(5, 10, 6), bool],) {
  %62 = fn () -> (Tensor[(5, 10, 6), bool],) {
    %60 = @func_3885() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool]) */;
    %61 = %60.0;
    (%61,)
  };
  %62() /* ty=(Tensor[(5, 10, 6), bool],) */
}

def @func_1013(%var_1009: Tensor[(13, 14, 14), int16], %var_1010: Tensor[(13, 14, 14), int16], %var_1011: float32, %var_1012: Tensor[(672), int16]) -> (Tensor[(13, 14, 14), int16], Tensor[(15, 3, 12), float32], float32, Tensor[(6, 14, 8), bool], Tensor[(672), int16]) {
  @func_1007(%var_1009, %var_1010, %var_1011, %var_1012) /* ty=(Tensor[(13, 14, 14), int16], Tensor[(15, 3, 12), float32], float32, Tensor[(6, 14, 8), bool], Tensor[(672), int16]) */
}

def @func_6561() -> Tensor[(6, 4, 12), float64] {
  %63 = @func_1926() /* ty=(Tensor[(6, 4, 12), float32], Tensor[(6, 4, 12), float64], Tensor[(5, 10, 6), bool], Tensor[(10, 7, 16), float32], Tensor[(1120, 1), float32], Tensor[(10, 7, 16), float32]) */;
  %64 = %63.0;
  %65 = cast(%64, dtype="float64") /* ty=Tensor[(6, 4, 12), float64] */;
  sigmoid(%65) /* ty=Tensor[(6, 4, 12), float64] */
}

def @func_2069(%var_2067: Tensor[(10), float64], %var_2068: Tensor[(33, 4), uint32]) -> (Tensor[(10, 7, 16), float32], Tensor[(1120), float32], Tensor[(5, 10, 6), uint16], Tensor[(?, 10, ?), float32], Tensor[(10), float64], Tensor[(5, 10, 6), uint16], Tensor[(2548), int16], Tensor[(4, 3, 11), uint32], Tensor[(33, 4), uint32], Tensor[(6, 4, 12), float32], Tensor[(6, 2, 13), bool]) {
  @func_2065(%var_2067, %var_2068) /* ty=(Tensor[(10, 7, 16), float32], Tensor[(1120), float32], Tensor[(5, 10, 6), uint16], Tensor[(?, 10, ?), float32], Tensor[(10), float64], Tensor[(5, 10, 6), uint16], Tensor[(2548), int16], Tensor[(4, 3, 11), uint32], Tensor[(33, 4), uint32], Tensor[(6, 4, 12), float32], Tensor[(6, 2, 13), bool]) */
}

def @func_68(%var_67: float32) -> (Tensor[(15, 3, 12), float32],) {
  %69 = fn (%var_41: float32) -> (Tensor[(15, 3, 12), float32],) {
    %66 = cast(%var_41, dtype="float32") /* ty=float32 */;
    %67 = cast(meta[relay.Constant][4] /* ty=Tensor[(15, 3, 12), float32] */, dtype="float32") /* ty=Tensor[(15, 3, 12), float32] */;
    %68 = power(%66, %67) /* ty=Tensor[(15, 3, 12), float32] */;
    (%68,)
  };
  %69(%var_67) /* ty=(Tensor[(15, 3, 12), float32],) */
}

def @func_6185() -> Tensor[(40), float64] {
  %71 = fn () -> Tensor[(40), float64] {
    %70 = @func_5259() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), uint16], Tensor[(2, 10, 2), uint64], Tensor[(40), float64]) */;
    %70.3
  };
  %71() /* ty=Tensor[(40), float64] */
}

def @func_6258(%var_6234: Tensor[(1664), int64]) -> (Tensor[(6, 2, 13), float64], Tensor[(5, 10, 6), uint16], Tensor[(16, 13, 8), int64], Tensor[(1664), int64], Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), uint16]) {
  %72 = @func_3442() /* ty=Tensor[(6, 2, 13), uint32] */;
  %73 = cast(%72, dtype="float64") /* ty=Tensor[(6, 2, 13), float64] */;
  %74 = cast(%var_6234, dtype="int64") /* ty=Tensor[(1664), int64] */;
  %75 = reshape(%74, newshape=[16, 13, 8]) /* ty=Tensor[(16, 13, 8), int64] */;
  %76 = @func_470(%75) /* ty=(Tensor[(16, 13, 8), int64],) */;
  %77 = @func_1795() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(6, 2, 13), bool]) */;
  %78 = @func_3170() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %79 = log10(%73) /* ty=Tensor[(6, 2, 13), float64] */;
  %80 = @func_1267() /* ty=Tensor[(5, 10, 6), uint16] */;
  %81 = %76.0;
  %82 = %77.0;
  %83 = %78.0;
  (%79, %80, %81, %var_6234, %82, %83)
}

def @func_4109(%var_4108: Tensor[(10), float64]) -> (Tensor[(5, 10, 6), bool], Tensor[(10), float64], Tensor[(756), float32], Tensor[(10), float64]) {
  %92 = fn (%var_4101: Tensor[(10), float64]) -> (Tensor[(5, 10, 6), bool], Tensor[(10), float64], Tensor[(756), float32], Tensor[(10), float64]) {
    %84 = @func_1446() /* ty=(Tensor[(5, 10, 6), bool],) */;
    %85 = cast(meta[relay.Constant][5] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
    %86 = cast(%var_4101, dtype="float64") /* ty=Tensor[(10), float64] */;
    %87 = reshape(%85, newshape=[9, 6, 14]) /* ty=Tensor[(9, 6, 14), float32] */;
    %88 = reshape(%86, newshape=[1, 10]) /* ty=Tensor[(1, 10), float64] */;
    %89 = @func_3275(%87, %88) /* ty=(Tensor[(9, 6, 14), float32], Tensor[(10), float64], Tensor[(1, 10), float64], Tensor[(10), float64], Tensor[(1, 132), uint32]) */;
    %90 = %84.0;
    %91 = %89.3;
    (%90, %91, meta[relay.Constant][5] /* ty=Tensor[(756), float32] */, %var_4101)
  };
  %92(%var_4108) /* ty=(Tensor[(5, 10, 6), bool], Tensor[(10), float64], Tensor[(756), float32], Tensor[(10), float64]) */
}

def @func_2591(%var_2590: Tensor[(8, 10, 5), float64]) -> (Tensor[(8, 10, 5), float64], Tensor[(5, 10, 6), uint16], Tensor[(6, 2, 13), uint32]) {
  %98 = fn (%var_2552: Tensor[(8, 10, 5), float64]) -> (Tensor[(8, 10, 5), float64], Tensor[(5, 10, 6), uint16], Tensor[(6, 2, 13), uint32]) {
    %93 = cast(%var_2552, dtype="float64") /* ty=Tensor[(8, 10, 5), float64] */;
    %94 = @func_1397() /* ty=(Tensor[(6, 2, 13), uint32],) */;
    %95 = sqrt(%93) /* ty=Tensor[(8, 10, 5), float64] */;
    %96 = @func_1267() /* ty=Tensor[(5, 10, 6), uint16] */;
    %97 = %94.0;
    (%95, %96, %97)
  };
  %98(%var_2590) /* ty=(Tensor[(8, 10, 5), float64], Tensor[(5, 10, 6), uint16], Tensor[(6, 2, 13), uint32]) */
}

def @func_4337() -> Tensor[(5, 10, 6), bool] {
  %99 = @func_2912() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %99.0
}

def @func_1721(%var_1719: Tensor[(2548), int16]) -> (Tensor[(4, 3, 11), uint32], Tensor[(1, 132), uint32], Tensor[(5, 10, 6), uint16], Tensor[(15, 3, 12), float32], Tensor[(10), float64], Tensor[(5, 10, 6), bool], Tensor[(13, 14, 14), int16], Tensor[(2548), int16], float32, Tensor[(56, 12), int16], Tensor[(5, 10, 6), bool]) {
  @func_1718(%var_1719) /* ty=(Tensor[(4, 3, 11), uint32], Tensor[(1, 132), uint32], Tensor[(5, 10, 6), uint16], Tensor[(15, 3, 12), float32], Tensor[(10), float64], Tensor[(5, 10, 6), bool], Tensor[(13, 14, 14), int16], Tensor[(2548), int16], float32, Tensor[(56, 12), int16], Tensor[(5, 10, 6), bool]) */
}

def @func_3058() -> (Tensor[(5, 10, 6), bool],) {
  %102 = fn () -> (Tensor[(5, 10, 6), bool],) {
    %100 = @func_1446() /* ty=(Tensor[(5, 10, 6), bool],) */;
    %101 = %100.0;
    (%101,)
  };
  %102() /* ty=(Tensor[(5, 10, 6), bool],) */
}

def @func_7170() -> (Tensor[(5, 10, 6), bool],) {
  @func_7168() /* ty=(Tensor[(5, 10, 6), bool],) */
}

def @func_2267(%var_2264: Tensor[(6, 4, 12), float64], %var_2265: Tensor[(6, 4, 12), float64], %var_2266: Tensor[(672), int16]) -> (Tensor[(6, 4, 12), float64], Tensor[(6, 4, 12), int32], Tensor[(6, 4, 12), bool], Tensor[(15, 3, 12), float32], float32, Tensor[(13, 14, 14), int16], Tensor[(182, 14), int16], Tensor[(672), int16]) {
  %138 = fn (%var_2224: Tensor[(6, 4, 12), float64], %var_2237: Tensor[(6, 4, 12), float64], %var_2261: Tensor[(672), int16]) -> (Tensor[(6, 4, 12), float64], Tensor[(6, 4, 12), int32], Tensor[(6, 4, 12), bool], Tensor[(15, 3, 12), float32], float32, Tensor[(13, 14, 14), int16], Tensor[(182, 14), int16], Tensor[(672), int16]) {
    %103 = @func_1926() /* ty=(Tensor[(6, 4, 12), float32], Tensor[(6, 4, 12), float64], Tensor[(5, 10, 6), bool], Tensor[(10, 7, 16), float32], Tensor[(1120, 1), float32], Tensor[(10, 7, 16), float32]) */;
    %104 = @func_1926() /* ty=(Tensor[(6, 4, 12), float32], Tensor[(6, 4, 12), float64], Tensor[(5, 10, 6), bool], Tensor[(10, 7, 16), float32], Tensor[(1120, 1), float32], Tensor[(10, 7, 16), float32]) */;
    %105 = %104.1;
    %106 = cast(%105, dtype="float64") /* ty=Tensor[(6, 4, 12), float64] */;
    %107 = sqrt(%106) /* ty=Tensor[(6, 4, 12), float64] */;
    %108 = cast(%var_2237, dtype="int32") /* ty=Tensor[(6, 4, 12), int32] */;
    %109 = shape_of(%107, dtype="int32") /* ty=Tensor[(3), int32] */;
    %110 = cast(%107, dtype="int32") /* ty=Tensor[(6, 4, 12), int32] */;
    %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %112 = cast(%var_2224, dtype="bool") /* ty=Tensor[(6, 4, 12), bool] */;
    %113 = shape_of(%105, dtype="int32") /* ty=Tensor[(3), int32] */;
    %114 = cast(%105, dtype="bool") /* ty=Tensor[(6, 4, 12), bool] */;
    %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %116 = greater_equal(%114, %115) /* ty=Tensor[(6, 4, 12), bool] */;
    %117 = cast(%105, dtype="bool") /* ty=Tensor[(6, 4, 12), bool] */;
    %118 = shape_of(%116, dtype="int32") /* ty=Tensor[(3), int32] */;
    %119 = cast(%116, dtype="bool") /* ty=Tensor[(6, 4, 12), bool] */;
    %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %121 = cast(-5.76212f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %122 = reshape(%121, newshape=[]) /* ty=float32 */;
    %123 = @func_66(%122) /* ty=(Tensor[(15, 3, 12), float32],) */;
    %124 = cast(meta[relay.Constant][6] /* ty=Tensor[(182, 14), int16] */, dtype="int16") /* ty=Tensor[(182, 14), int16] */;
    %125 = cast(meta[relay.Constant][6] /* ty=Tensor[(182, 14), int16] */, dtype="int16") /* ty=Tensor[(182, 14), int16] */;
    %126 = cast(-5.76212f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %127 = cast(%var_2261, dtype="int16") /* ty=Tensor[(672), int16] */;
    %128 = reshape(%124, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), int16] */;
    %129 = reshape(%125, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), int16] */;
    %130 = reshape(%126, newshape=[]) /* ty=float32 */;
    %131 = reshape(%127, newshape=[672]) /* ty=Tensor[(672), int16] */;
    %132 = @func_1007(%128, %129, %130, %131) /* ty=(Tensor[(13, 14, 14), int16], Tensor[(15, 3, 12), float32], float32, Tensor[(6, 14, 8), bool], Tensor[(672), int16]) */;
    %133 = %103.1;
    %134 = add(%110, %111) /* ty=Tensor[(6, 4, 12), int32] */;
    %135 = greater(%119, %120) /* ty=Tensor[(6, 4, 12), bool] */;
    %136 = %123.0;
    %137 = %132.0;
    (%133, %134, %135, %136, -5.76212f /* ty=float32 */, %137, meta[relay.Constant][6] /* ty=Tensor[(182, 14), int16] */, %var_2261)
  };
  %138(%var_2264, %var_2265, %var_2266) /* ty=(Tensor[(6, 4, 12), float64], Tensor[(6, 4, 12), int32], Tensor[(6, 4, 12), bool], Tensor[(15, 3, 12), float32], float32, Tensor[(13, 14, 14), int16], Tensor[(182, 14), int16], Tensor[(672), int16]) */
}

def @func_6720(%var_6718: Tensor[(1, 1, 5), float32], %var_6719: Tensor[(5, 6, 5), float32]) -> (Tensor[(?, ?, 5), uint16], Tensor[(5, 6, 5), uint8]) {
  @func_6716(%var_6718, %var_6719) /* ty=(Tensor[(?, ?, 5), uint16], Tensor[(5, 6, 5), uint8]) */
}

def @func_4827() -> (Tensor[(6, 4, 12), float64], Tensor[(5, 10, 6), bool]) {
  %142 = fn () -> (Tensor[(6, 4, 12), float64], Tensor[(5, 10, 6), bool]) {
    %139 = @func_4573() /* ty=(Tensor[(10), float64], Tensor[(132), uint32], Tensor[(16, 13, 8), int64], Tensor[(1664, 1), int64], Tensor[(5, 10, 6), float64], Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), uint16]) */;
    %140 = @func_3516() /* ty=Tensor[(6, 4, 12), float64] */;
    %141 = %139.5;
    (%140, %141)
  };
  %142() /* ty=(Tensor[(6, 4, 12), float64], Tensor[(5, 10, 6), bool]) */
}

def @func_4934(%var_4932: Tensor[(6, 4, 12), float32]) -> (Tensor[(6, 4, 12), float64],) {
  @func_4931(%var_4932) /* ty=(Tensor[(6, 4, 12), float64],) */
}

def @func_3204(%var_3177: Tensor[(2, 10, 2), float64]) -> Tensor[(2, 10, 2), uint64] {
  %143 = cast(%var_3177, dtype="float64") /* ty=Tensor[(2, 10, 2), float64] */;
  %144 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(2, 10, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(meta[relay.Constant][7] /* ty=Tensor[(2, 10, 2), float64] */, dtype="float64") /* ty=Tensor[(2, 10, 2), float64] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %147 = floor_mod(%145, %146) /* ty=Tensor[(2, 10, 2), float64] */;
  %148 = cast(%var_3177, dtype="uint64") /* ty=Tensor[(2, 10, 2), uint64] */;
  %149 = shape_of(%147, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%147, dtype="uint64") /* ty=Tensor[(2, 10, 2), uint64] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  logical_xor(%150, %151) /* ty=Tensor[(2, 10, 2), uint64] */
}

def @func_2856(%var_2854: Tensor[(672), int16]) -> (Tensor[(672), int16], Tensor[(5, 10, 6), uint16]) {
  @func_2853(%var_2854) /* ty=(Tensor[(672), int16], Tensor[(5, 10, 6), uint16]) */
}

def @func_3829() -> Tensor[(10, 7, 16), float32] {
  %152 = @func_1926() /* ty=(Tensor[(6, 4, 12), float32], Tensor[(6, 4, 12), float64], Tensor[(5, 10, 6), bool], Tensor[(10, 7, 16), float32], Tensor[(1120, 1), float32], Tensor[(10, 7, 16), float32]) */;
  %152.3
}

def @func_1336(%var_1334: Tensor[(10), float64]) -> (Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), float64], Tensor[(6, 14, 8), bool], Tensor[(672), int16], Tensor[(1, 10, 1), float64], Tensor[(10), float64], Tensor[(15, 3, 12), float32], Tensor[(2548), int16], float32) {
  @func_1333(%var_1334) /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), float64], Tensor[(6, 14, 8), bool], Tensor[(672), int16], Tensor[(1, 10, 1), float64], Tensor[(10), float64], Tensor[(15, 3, 12), float32], Tensor[(2548), int16], float32) */
}

def @func_7501() -> (Tensor[(5, 10, 6), bool],) {
  @func_7499() /* ty=(Tensor[(5, 10, 6), bool],) */
}

def @func_702(%var_700: Tensor[(6, 14, 8), int16], %var_701: Tensor[(6, 14, 8), int16]) -> (Tensor[(6, 14, 8), bool],) {
  @func_698(%var_700, %var_701) /* ty=(Tensor[(6, 14, 8), bool],) */
}

def @func_3099() -> (Tensor[(6, 2, 13), float64],) {
  @func_3097() /* ty=(Tensor[(6, 2, 13), float64],) */
}

def @func_5260() -> (Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), uint16], Tensor[(2, 10, 2), uint64], Tensor[(40), float64]) {
  %160 = fn () -> (Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), uint16], Tensor[(2, 10, 2), uint64], Tensor[(40), float64]) {
    %153 = @func_1446() /* ty=(Tensor[(5, 10, 6), bool],) */;
    %154 = @func_5057() /* ty=(Tensor[(5, 10, 6), uint16],) */;
    %155 = cast(meta[relay.Constant][8] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
    %156 = reshape(%155, newshape=[2, 10, 2]) /* ty=Tensor[(2, 10, 2), float64] */;
    %157 = %153.0;
    %158 = %154.0;
    %159 = @func_3204(%156) /* ty=Tensor[(2, 10, 2), uint64] */;
    (%157, %158, %159, meta[relay.Constant][8] /* ty=Tensor[(40), float64] */)
  };
  %160() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), uint16], Tensor[(2, 10, 2), uint64], Tensor[(40), float64]) */
}

def @func_3573(%var_3563: Tensor[(6, 2, 13), uint32]) -> (Tensor[(6, 2, 13), int8],) {
  %161 = @func_1397() /* ty=(Tensor[(6, 2, 13), uint32],) */;
  %162 = %161.0;
  %163 = cast(%var_3563, dtype="int8") /* ty=Tensor[(6, 2, 13), int8] */;
  %164 = shape_of(%162, dtype="int32") /* ty=Tensor[(3), int32] */;
  %165 = cast(%162, dtype="int8") /* ty=Tensor[(6, 2, 13), int8] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %167 = bitwise_or(%165, %166) /* ty=Tensor[(6, 2, 13), int8] */;
  (%167,)
}

def @func_7611() -> (Tensor[(10, 7, 16), float32],) {
  %168 = @func_3829() /* ty=Tensor[(10, 7, 16), float32] */;
  %169 = cast(%168, dtype="float32") /* ty=Tensor[(10, 7, 16), float32] */;
  %170 = atan(%169) /* ty=Tensor[(10, 7, 16), float32] */;
  (%170,)
}

def @func_7113() -> Tensor[(13, 14, 15), uint64] {
  %171 = cast(meta[relay.Constant][10] /* ty=Tensor[(13, 14, 15), uint64] */, dtype="uint64") /* ty=Tensor[(13, 14, 15), uint64] */;
  %172 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(13, 14, 15), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %173 = cast(meta[relay.Constant][9] /* ty=Tensor[(13, 14, 15), uint64] */, dtype="uint64") /* ty=Tensor[(13, 14, 15), uint64] */;
  %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  maximum(%173, %174) /* ty=Tensor[(13, 14, 15), uint64] */
}

def @func_8089() -> (Tensor[(7, 10, 5), float32], Tensor[(6, 14, 8), bool], Tensor[(672), int16]) {
  @func_8087() /* ty=(Tensor[(7, 10, 5), float32], Tensor[(6, 14, 8), bool], Tensor[(672), int16]) */
}

def @func_8126() -> Tensor[(6, 4, 12), float64] {
  %175 = fn () -> Tensor[(6, 4, 12), float64] {
    @func_6561() /* ty=Tensor[(6, 4, 12), float64] */
  };
  %175() /* ty=Tensor[(6, 4, 12), float64] */
}

def @func_2914() -> (Tensor[(5, 10, 6), bool],) {
  @func_2912() /* ty=(Tensor[(5, 10, 6), bool],) */
}

def @func_8262() -> (Tensor[(5, 10, 6), bool],) {
  %178 = fn () -> (Tensor[(5, 10, 6), bool],) {
    %176 = @func_5569() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(1, 10), float64]) */;
    %177 = %176.0;
    (%177,)
  };
  %178() /* ty=(Tensor[(5, 10, 6), bool],) */
}

def @func_8463() -> Tensor[(5, 10, 6), bool] {
  @func_8461() /* ty=Tensor[(5, 10, 6), bool] */
}

def @func_3097() -> (Tensor[(6, 2, 13), float64],) {
  %179 = @func_2301() /* ty=(Tensor[(6, 2, 13), uint32], Tensor[(5, 10, 6), bool]) */;
  %180 = %179.0;
  %181 = cast(meta[relay.Constant][11] /* ty=Tensor[(6, 2, 13), uint32] */, dtype="float64") /* ty=Tensor[(6, 2, 13), float64] */;
  %182 = shape_of(%180, dtype="int32") /* ty=Tensor[(3), int32] */;
  %183 = cast(%180, dtype="float64") /* ty=Tensor[(6, 2, 13), float64] */;
  %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %185 = divide(%183, %184) /* ty=Tensor[(6, 2, 13), float64] */;
  (%185,)
}

def @func_8014() -> (Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool]) {
  %189 = fn () -> (Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool]) {
    %186 = @func_3057() /* ty=(Tensor[(5, 10, 6), bool],) */;
    %187 = %186.0;
    %188 = @func_5836() /* ty=Tensor[(5, 10, 6), bool] */;
    (%187, %188)
  };
  %189() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool]) */
}

def @func_4884() -> Tensor[(5, 10, 6), bool] {
  %191 = fn () -> Tensor[(5, 10, 6), bool] {
    %190 = @func_2506() /* ty=(Tensor[(5, 10, 6), bool],) */;
    %190.0
  };
  %191() /* ty=Tensor[(5, 10, 6), bool] */
}

def @func_4475() -> Tensor[(6, 2, 13), float64] {
  %192 = @func_3097() /* ty=(Tensor[(6, 2, 13), float64],) */;
  %192.0
}

def @func_3626() -> Tensor[(6, 4, 12), float32] {
  %193 = @func_2880() /* ty=Tensor[(6, 4, 12), float64] */;
  %194 = cast(%193, dtype="float32") /* ty=Tensor[(6, 4, 12), float32] */;
  rsqrt(%194) /* ty=Tensor[(6, 4, 12), float32] */
}

def @func_6964(%var_6959: Tensor[(6, 4, 12), float64]) -> (Tensor[(5, 10, 6), uint16], Tensor[(5, 10, 6), bool], Tensor[(6, 2, 13), float32], Tensor[(78, 2), uint32], Tensor[(6, 4, 12), int16]) {
  %195 = @func_3704() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %196 = @func_6041() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %197 = cast(meta[relay.Constant][12] /* ty=Tensor[(78, 2), uint32] */, dtype="uint32") /* ty=Tensor[(78, 2), uint32] */;
  %198 = reshape(%197, newshape=[6, 2, 13]) /* ty=Tensor[(6, 2, 13), uint32] */;
  %199 = @func_4059(%198) /* ty=(Tensor[(6, 2, 13), float32],) */;
  %200 = @func_6542() /* ty=(Tensor[(6, 4, 12), float64], Tensor[(5, 10, 6), bool]) */;
  %201 = %200.0;
  %202 = cast(%var_6959, dtype="int16") /* ty=Tensor[(6, 4, 12), int16] */;
  %203 = shape_of(%201, dtype="int32") /* ty=Tensor[(3), int32] */;
  %204 = cast(%201, dtype="int16") /* ty=Tensor[(6, 4, 12), int16] */;
  %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %206 = %195.0;
  %207 = %196.0;
  %208 = %199.0;
  %209 = logical_xor(%204, %205) /* ty=Tensor[(6, 4, 12), int16] */;
  (%206, %207, %208, meta[relay.Constant][12] /* ty=Tensor[(78, 2), uint32] */, %209)
}

def @func_4085(%var_4084: Tensor[(2, 1, 4), float64]) -> Tensor[(2, 1, 4), float64] {
  %211 = fn (%var_4079: Tensor[(2, 1, 4), float64]) -> Tensor[(2, 1, 4), float64] {
    %210 = cast(%var_4079, dtype="float64") /* ty=Tensor[(2, 1, 4), float64] */;
    erf(%210) /* ty=Tensor[(2, 1, 4), float64] */
  };
  %211(%var_4084) /* ty=Tensor[(2, 1, 4), float64] */
}

def @func_8166() -> Tensor[(6, 2, 13), float64] {
  %212 = fn () -> Tensor[(6, 2, 13), float64] {
    @func_4475() /* ty=Tensor[(6, 2, 13), float64] */
  };
  %212() /* ty=Tensor[(6, 2, 13), float64] */
}

def @func_8390(%var_8389: Tensor[(210), float32]) -> (Tensor[(5, 10, 6), uint16], Tensor[(?, 14, 15), float32]) {
  %224 = fn (%var_8352: Tensor[(210), float32]) -> (Tensor[(5, 10, 6), uint16], Tensor[(?, 14, 15), float32]) {
    %213 = @func_5057() /* ty=(Tensor[(5, 10, 6), uint16],) */;
    %214 = cast(%var_8352, dtype="float32") /* ty=Tensor[(210), float32] */;
    %215 = reshape(%214, newshape=[1, 14, 15]) /* ty=Tensor[(1, 14, 15), float32] */;
    %216 = @func_8272(%215) /* ty=(Tensor[(1, 14, 15), float32],) */;
    %217 = %216.0;
    %218 = cast(%var_8352, dtype="float32") /* ty=Tensor[(210), float32] */;
    %219 = shape_of(%217, dtype="int32") /* ty=Tensor[(3), int32] */;
    %220 = cast(%217, dtype="float32") /* ty=Tensor[(1, 14, 15), float32] */;
    %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %222 = %213.0;
    %223 = power(%220, %221) /* ty=Tensor[(?, 14, 15), float32] */;
    (%222, %223)
  };
  %224(%var_8389) /* ty=(Tensor[(5, 10, 6), uint16], Tensor[(?, 14, 15), float32]) */
}

def @func_4318(%var_4317: Tensor[(6, 4, 12), float32]) -> (Tensor[(5, 10, 6), bool], Tensor[(6, 4, 12), uint32], Tensor[(1, 132), uint32], Tensor[(756), float32], Tensor[(10, 1), float64]) {
  %246 = fn (%var_4268: Tensor[(6, 4, 12), float32]) -> (Tensor[(5, 10, 6), bool], Tensor[(6, 4, 12), uint32], Tensor[(1, 132), uint32], Tensor[(756), float32], Tensor[(10, 1), float64]) {
    %225 = @func_2506() /* ty=(Tensor[(5, 10, 6), bool],) */;
    %226 = @func_2880() /* ty=Tensor[(6, 4, 12), float64] */;
    %227 = cast(%226, dtype="float32") /* ty=Tensor[(6, 4, 12), float32] */;
    %228 = cosh(%227) /* ty=Tensor[(6, 4, 12), float32] */;
    %229 = cast(%var_4268, dtype="bool") /* ty=Tensor[(6, 4, 12), bool] */;
    %230 = shape_of(%228, dtype="int32") /* ty=Tensor[(3), int32] */;
    %231 = cast(%228, dtype="bool") /* ty=Tensor[(6, 4, 12), bool] */;
    %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %233 = not_equal(%231, %232) /* ty=Tensor[(6, 4, 12), bool] */;
    %234 = cast(%226, dtype="uint32") /* ty=Tensor[(6, 4, 12), uint32] */;
    %235 = shape_of(%233, dtype="int32") /* ty=Tensor[(3), int32] */;
    %236 = cast(%233, dtype="uint32") /* ty=Tensor[(6, 4, 12), uint32] */;
    %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %238 = cast(meta[relay.Constant][13] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
    %239 = cast(meta[relay.Constant][14] /* ty=Tensor[(10, 1), float64] */, dtype="float64") /* ty=Tensor[(10, 1), float64] */;
    %240 = reshape(%238, newshape=[9, 6, 14]) /* ty=Tensor[(9, 6, 14), float32] */;
    %241 = reshape(%239, newshape=[1, 10]) /* ty=Tensor[(1, 10), float64] */;
    %242 = @func_3275(%240, %241) /* ty=(Tensor[(9, 6, 14), float32], Tensor[(10), float64], Tensor[(1, 10), float64], Tensor[(10), float64], Tensor[(1, 132), uint32]) */;
    %243 = %225.0;
    %244 = left_shift(%236, %237) /* ty=Tensor[(6, 4, 12), uint32] */;
    %245 = %242.4;
    (%243, %244, %245, meta[relay.Constant][13] /* ty=Tensor[(756), float32] */, meta[relay.Constant][14] /* ty=Tensor[(10, 1), float64] */)
  };
  %246(%var_4317) /* ty=(Tensor[(5, 10, 6), bool], Tensor[(6, 4, 12), uint32], Tensor[(1, 132), uint32], Tensor[(756), float32], Tensor[(10, 1), float64]) */
}

def @func_2125(%var_2124: Tensor[(5, 8, 16), int32]) -> Tensor[(5, 8, 16), float32] {
  %256 = fn (%var_2107: Tensor[(5, 8, 16), int32]) -> Tensor[(5, 8, 16), float32] {
    %247 = cast(meta[relay.Constant][15] /* ty=Tensor[(5, 8, 16), int32] */, dtype="int32") /* ty=Tensor[(5, 8, 16), int32] */;
    %248 = shape_of(%var_2107, dtype="int32") /* ty=Tensor[(3), int32] */;
    %249 = cast(%var_2107, dtype="int32") /* ty=Tensor[(5, 8, 16), int32] */;
    %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %251 = right_shift(%249, %250) /* ty=Tensor[(5, 8, 16), int32] */;
    %252 = cast(%var_2107, dtype="float32") /* ty=Tensor[(5, 8, 16), float32] */;
    %253 = shape_of(%251, dtype="int32") /* ty=Tensor[(3), int32] */;
    %254 = cast(%251, dtype="float32") /* ty=Tensor[(5, 8, 16), float32] */;
    %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_mod(%254, %255) /* ty=Tensor[(5, 8, 16), float32] */
  };
  %256(%var_2124) /* ty=Tensor[(5, 8, 16), float32] */
}

def @func_8199(%var_8198: Tensor[(6, 14, 8), bool]) -> (Tensor[(6, 14, 8), bool],) {
  %264 = fn (%var_8184: Tensor[(6, 14, 8), bool]) -> (Tensor[(6, 14, 8), bool],) {
    %257 = @func_8087() /* ty=(Tensor[(7, 10, 5), float32], Tensor[(6, 14, 8), bool], Tensor[(672), int16]) */;
    %258 = %257.1;
    %259 = cast(%var_8184, dtype="bool") /* ty=Tensor[(6, 14, 8), bool] */;
    %260 = shape_of(%258, dtype="int32") /* ty=Tensor[(3), int32] */;
    %261 = cast(%258, dtype="bool") /* ty=Tensor[(6, 14, 8), bool] */;
    %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %263 = less_equal(%261, %262) /* ty=Tensor[(6, 14, 8), bool] */;
    (%263,)
  };
  %264(%var_8198) /* ty=(Tensor[(6, 14, 8), bool],) */
}

def @func_2754() -> Tensor[(5, 10, 6), uint16] {
  %266 = fn () -> Tensor[(5, 10, 6), uint16] {
    %265 = @func_1822() /* ty=(Tensor[(5, 10, 6), uint16],) */;
    %265.0
  };
  %266() /* ty=Tensor[(5, 10, 6), uint16] */
}

def @func_6363() -> (Tensor[(5, 10, 6), bool], Tensor[(16, 13, 8), int64], Tensor[(1664), int64]) {
  %267 = @func_3057() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %268 = cast(meta[relay.Constant][16] /* ty=Tensor[(1664), int64] */, dtype="int64") /* ty=Tensor[(1664), int64] */;
  %269 = reshape(%268, newshape=[16, 13, 8]) /* ty=Tensor[(16, 13, 8), int64] */;
  %270 = @func_470(%269) /* ty=(Tensor[(16, 13, 8), int64],) */;
  %271 = %267.0;
  %272 = %270.0;
  (%271, %272, meta[relay.Constant][16] /* ty=Tensor[(1664), int64] */)
}

def @func_6967(%var_6965: Tensor[(6, 4, 12), float64]) -> (Tensor[(5, 10, 6), uint16], Tensor[(5, 10, 6), bool], Tensor[(6, 2, 13), float32], Tensor[(78, 2), uint32], Tensor[(6, 4, 12), int16]) {
  @func_6964(%var_6965) /* ty=(Tensor[(5, 10, 6), uint16], Tensor[(5, 10, 6), bool], Tensor[(6, 2, 13), float32], Tensor[(78, 2), uint32], Tensor[(6, 4, 12), int16]) */
}

def @func_8087() -> (Tensor[(7, 10, 5), float32], Tensor[(6, 14, 8), bool], Tensor[(672), int16]) {
  %273 = @func_5518() /* ty=(Tensor[(7, 10, 5), float64], Tensor[(7, 10, 5), float32]) */;
  %274 = cast(meta[relay.Constant][17] /* ty=Tensor[(672), int16] */, dtype="int16") /* ty=Tensor[(672), int16] */;
  %275 = cast(meta[relay.Constant][17] /* ty=Tensor[(672), int16] */, dtype="int16") /* ty=Tensor[(672), int16] */;
  %276 = reshape(%274, newshape=[6, 14, 8]) /* ty=Tensor[(6, 14, 8), int16] */;
  %277 = reshape(%275, newshape=[6, 14, 8]) /* ty=Tensor[(6, 14, 8), int16] */;
  %278 = @func_698(%276, %277) /* ty=(Tensor[(6, 14, 8), bool],) */;
  %279 = %273.1;
  %280 = %278.0;
  (%279, %280, meta[relay.Constant][17] /* ty=Tensor[(672), int16] */)
}

def @func_2506() -> (Tensor[(5, 10, 6), bool],) {
  %281 = @func_2301() /* ty=(Tensor[(6, 2, 13), uint32], Tensor[(5, 10, 6), bool]) */;
  %282 = %281.1;
  (%282,)
}

def @func_3628() -> Tensor[(6, 4, 12), float32] {
  @func_3626() /* ty=Tensor[(6, 4, 12), float32] */
}

def @func_5968() -> Tensor[(1, 10), float64] {
  @func_5966() /* ty=Tensor[(1, 10), float64] */
}

def @func_1600() -> (Tensor[(5, 10, 6), uint16], Tensor[(6, 2, 13), uint32]) {
  @func_1598() /* ty=(Tensor[(5, 10, 6), uint16], Tensor[(6, 2, 13), uint32]) */
}

def @func_8275(%var_8273: Tensor[(1, 14, 15), float32]) -> (Tensor[(1, 14, 15), float32],) {
  @func_8272(%var_8273) /* ty=(Tensor[(1, 14, 15), float32],) */
}

def @func_7168() -> (Tensor[(5, 10, 6), bool],) {
  %283 = @func_6337() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %284 = %283.0;
  (%284,)
}

def @func_7499() -> (Tensor[(5, 10, 6), bool],) {
  %285 = @func_3791() /* ty=Tensor[(5, 10, 6), bool] */;
  (%285,)
}

def @func_3207(%var_3205: Tensor[(2, 10, 2), float64]) -> Tensor[(2, 10, 2), uint64] {
  @func_3204(%var_3205) /* ty=Tensor[(2, 10, 2), uint64] */
}

def @func_3704() -> (Tensor[(5, 10, 6), uint16],) {
  %286 = @func_1822() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %287 = %286.0;
  (%287,)
}

def @func_4371() -> (Tensor[(5, 10, 6), bool], Tensor[(6, 4, 12), float64]) {
  %292 = fn () -> (Tensor[(5, 10, 6), bool], Tensor[(6, 4, 12), float64]) {
    %288 = @func_1446() /* ty=(Tensor[(5, 10, 6), bool],) */;
    %289 = @func_2749() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(6, 4, 12), float64], Tensor[(16, 13, 8), int64], Tensor[(1664), int64]) */;
    %290 = %288.0;
    %291 = %289.1;
    (%290, %291)
  };
  %292() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(6, 4, 12), float64]) */
}

def @func_5057() -> (Tensor[(5, 10, 6), uint16],) {
  %293 = @func_1267() /* ty=Tensor[(5, 10, 6), uint16] */;
  (%293,)
}

def @func_7115() -> Tensor[(13, 14, 15), uint64] {
  @func_7113() /* ty=Tensor[(13, 14, 15), uint64] */
}

def @func_1926() -> (Tensor[(6, 4, 12), float32], Tensor[(6, 4, 12), float64], Tensor[(5, 10, 6), bool], Tensor[(10, 7, 16), float32], Tensor[(1120, 1), float32], Tensor[(10, 7, 16), float32]) {
  %294 = cast(meta[relay.Constant][18] /* ty=Tensor[(6, 4, 12), float32] */, dtype="float32") /* ty=Tensor[(6, 4, 12), float32] */;
  %295 = cast(meta[relay.Constant][18] /* ty=Tensor[(6, 4, 12), float32] */, dtype="float64") /* ty=Tensor[(6, 4, 12), float64] */;
  %296 = @func_1446() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %297 = cast(meta[relay.Constant][19] /* ty=Tensor[(1120, 1), float32] */, dtype="float32") /* ty=Tensor[(1120, 1), float32] */;
  %298 = reshape(%297, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), float32] */;
  %299 = @func_384(%298) /* ty=Tensor[(10, 7, 16), float32] */;
  %300 = cast(%299, dtype="float32") /* ty=Tensor[(10, 7, 16), float32] */;
  %301 = reshape(%300, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), float32] */;
  %302 = acos(%294) /* ty=Tensor[(6, 4, 12), float32] */;
  %303 = exp(%295) /* ty=Tensor[(6, 4, 12), float64] */;
  %304 = %296.0;
  %305 = @func_384(%301) /* ty=Tensor[(10, 7, 16), float32] */;
  (%302, %303, %304, %299, meta[relay.Constant][19] /* ty=Tensor[(1120, 1), float32] */, %305)
}

def @func_3172() -> (Tensor[(5, 10, 6), uint16],) {
  @func_3170() /* ty=(Tensor[(5, 10, 6), uint16],) */
}

def @func_1397() -> (Tensor[(6, 2, 13), uint32],) {
  %306 = cast(meta[relay.Constant][21] /* ty=Tensor[(6, 2, 13), uint32] */, dtype="uint32") /* ty=Tensor[(6, 2, 13), uint32] */;
  %307 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(6, 2, 13), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %308 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 2, 13), uint32] */, dtype="uint32") /* ty=Tensor[(6, 2, 13), uint32] */;
  %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %310 = right_shift(%308, %309) /* ty=Tensor[(6, 2, 13), uint32] */;
  (%310,)
}

def @func_8493() -> (Tensor[(5, 10, 6), bool],) {
  %313 = fn () -> (Tensor[(5, 10, 6), bool],) {
    %311 = @func_8013() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool]) */;
    %312 = %311.1;
    (%312,)
  };
  %313() /* ty=(Tensor[(5, 10, 6), bool],) */
}

def @func_6041() -> (Tensor[(5, 10, 6), bool],) {
  %314 = @func_3839() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %315 = %314.0;
  (%315,)
}

def @func_5904() -> Tensor[(6, 2, 13), bool] {
  %317 = fn () -> Tensor[(6, 2, 13), bool] {
    %316 = @func_1795() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(6, 2, 13), bool]) */;
    %316.2
  };
  %317() /* ty=Tensor[(6, 2, 13), bool] */
}

def @func_3517() -> Tensor[(6, 4, 12), float64] {
  %318 = fn () -> Tensor[(6, 4, 12), float64] {
    @func_2880() /* ty=Tensor[(6, 4, 12), float64] */
  };
  %318() /* ty=Tensor[(6, 4, 12), float64] */
}

def @func_1718(%var_1693: Tensor[(2548), int16]) -> (Tensor[(4, 3, 11), uint32], Tensor[(1, 132), uint32], Tensor[(5, 10, 6), uint16], Tensor[(15, 3, 12), float32], Tensor[(10), float64], Tensor[(5, 10, 6), bool], Tensor[(13, 14, 14), int16], Tensor[(2548), int16], float32, Tensor[(56, 12), int16], Tensor[(5, 10, 6), bool]) {
  %319 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 132), uint32] */, dtype="uint32") /* ty=Tensor[(1, 132), uint32] */;
  %320 = reshape(%319, newshape=[4, 3, 11]) /* ty=Tensor[(4, 3, 11), uint32] */;
  %321 = @func_1446() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %322 = %321.0;
  %323 = cast(%322, dtype="float64") /* ty=Tensor[(5, 10, 6), float64] */;
  %324 = atanh(%323) /* ty=Tensor[(5, 10, 6), float64] */;
  %325 = @func_1598() /* ty=(Tensor[(5, 10, 6), uint16], Tensor[(6, 2, 13), uint32]) */;
  %326 = %325.0;
  %327 = cast(%326, dtype="float64") /* ty=Tensor[(5, 10, 6), float64] */;
  %328 = shape_of(%322, dtype="int32") /* ty=Tensor[(3), int32] */;
  %329 = cast(%322, dtype="float64") /* ty=Tensor[(5, 10, 6), float64] */;
  %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %331 = floor_divide(%329, %330) /* ty=Tensor[(5, 10, 6), float64] */;
  %332 = cast(%331, dtype="uint16") /* ty=Tensor[(5, 10, 6), uint16] */;
  %333 = shape_of(%324, dtype="int32") /* ty=Tensor[(3), int32] */;
  %334 = cast(%324, dtype="uint16") /* ty=Tensor[(5, 10, 6), uint16] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %336 = cast(meta[relay.Constant][23] /* ty=Tensor[(10), float64] */, dtype="float64") /* ty=Tensor[(10), float64] */;
  %337 = reshape(%336, newshape=[10]) /* ty=Tensor[(10), float64] */;
  %338 = @func_1333(%337) /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), float64], Tensor[(6, 14, 8), bool], Tensor[(672), int16], Tensor[(1, 10, 1), float64], Tensor[(10), float64], Tensor[(15, 3, 12), float32], Tensor[(2548), int16], float32) */;
  %339 = cast(%331, dtype="bool") /* ty=Tensor[(5, 10, 6), bool] */;
  %340 = shape_of(%324, dtype="int32") /* ty=Tensor[(3), int32] */;
  %341 = cast(%324, dtype="bool") /* ty=Tensor[(5, 10, 6), bool] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %343 = cast(%var_1693, dtype="int16") /* ty=Tensor[(2548), int16] */;
  %344 = cast(%var_1693, dtype="int16") /* ty=Tensor[(2548), int16] */;
  %345 = cast(9.80168f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %346 = cast(meta[relay.Constant][24] /* ty=Tensor[(56, 12), int16] */, dtype="int16") /* ty=Tensor[(56, 12), int16] */;
  %347 = reshape(%343, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), int16] */;
  %348 = reshape(%344, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), int16] */;
  %349 = reshape(%345, newshape=[]) /* ty=float32 */;
  %350 = reshape(%346, newshape=[672]) /* ty=Tensor[(672), int16] */;
  %351 = @func_1007(%347, %348, %349, %350) /* ty=(Tensor[(13, 14, 14), int16], Tensor[(15, 3, 12), float32], float32, Tensor[(6, 14, 8), bool], Tensor[(672), int16]) */;
  %352 = @func_1446() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %353 = @func_1531(%320) /* ty=Tensor[(4, 3, 11), uint32] */;
  %354 = minimum(%334, %335) /* ty=Tensor[(5, 10, 6), uint16] */;
  %355 = %338.6;
  %356 = less(%341, %342) /* ty=Tensor[(5, 10, 6), bool] */;
  %357 = %351.0;
  %358 = %352.0;
  (%353, meta[relay.Constant][22] /* ty=Tensor[(1, 132), uint32] */, %354, %355, meta[relay.Constant][23] /* ty=Tensor[(10), float64] */, %356, %357, %var_1693, 9.80168f /* ty=float32 */, meta[relay.Constant][24] /* ty=Tensor[(56, 12), int16] */, %358)
}

def @func_4477() -> Tensor[(6, 2, 13), float64] {
  @func_4475() /* ty=Tensor[(6, 2, 13), float64] */
}

def @func_4986() -> Tensor[(5, 10, 6), uint16] {
  @func_4984() /* ty=Tensor[(5, 10, 6), uint16] */
}

def @func_6542() -> (Tensor[(6, 4, 12), float64], Tensor[(5, 10, 6), bool]) {
  %359 = @func_5569() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(1, 10), float64]) */;
  %360 = @func_2880() /* ty=Tensor[(6, 4, 12), float64] */;
  %361 = %359.0;
  (%360, %361)
}

def @func_6544() -> (Tensor[(6, 4, 12), float64], Tensor[(5, 10, 6), bool]) {
  @func_6542() /* ty=(Tensor[(6, 4, 12), float64], Tensor[(5, 10, 6), bool]) */
}

def @func_2912() -> (Tensor[(5, 10, 6), bool],) {
  %362 = @func_2506() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %363 = %362.0;
  (%363,)
}

def @func_7613() -> (Tensor[(10, 7, 16), float32],) {
  @func_7611() /* ty=(Tensor[(10, 7, 16), float32],) */
}

def @func_4164() -> Tensor[(6, 4, 12), float32] {
  %364 = @func_2880() /* ty=Tensor[(6, 4, 12), float64] */;
  %365 = cast(%364, dtype="float64") /* ty=Tensor[(6, 4, 12), float64] */;
  %366 = atanh(%365) /* ty=Tensor[(6, 4, 12), float64] */;
  %367 = cast(%366, dtype="float32") /* ty=Tensor[(6, 4, 12), float32] */;
  %368 = atan(%367) /* ty=Tensor[(6, 4, 12), float32] */;
  %369 = cast(%368, dtype="float32") /* ty=Tensor[(6, 4, 12), float32] */;
  asinh(%369) /* ty=Tensor[(6, 4, 12), float32] */
}

def @func_3157(%var_3142: Tensor[(10), float64]) -> (Tensor[(5, 10, 6), float64], Tensor[(5, 10, 6), bool], Tensor[(10), float64], Tensor[(5, 10, 6), uint16], Tensor[(1, 10, 1), float64]) {
  %370 = @func_1598() /* ty=(Tensor[(5, 10, 6), uint16], Tensor[(6, 2, 13), uint32]) */;
  %371 = %370.0;
  %372 = cast(%371, dtype="float64") /* ty=Tensor[(5, 10, 6), float64] */;
  %373 = @func_1795() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(6, 2, 13), bool]) */;
  %374 = @func_1598() /* ty=(Tensor[(5, 10, 6), uint16], Tensor[(6, 2, 13), uint32]) */;
  %375 = cast(%var_3142, dtype="float64") /* ty=Tensor[(10), float64] */;
  %376 = reshape(%375, newshape=[10]) /* ty=Tensor[(10), float64] */;
  %377 = @func_1333(%376) /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), float64], Tensor[(6, 14, 8), bool], Tensor[(672), int16], Tensor[(1, 10, 1), float64], Tensor[(10), float64], Tensor[(15, 3, 12), float32], Tensor[(2548), int16], float32) */;
  %378 = %377.4;
  %379 = cast(%378, dtype="float64") /* ty=Tensor[(1, 10, 1), float64] */;
  %380 = tan(%372) /* ty=Tensor[(5, 10, 6), float64] */;
  %381 = %373.0;
  %382 = %374.0;
  %383 = exp(%379) /* ty=Tensor[(1, 10, 1), float64] */;
  (%380, %381, %var_3142, %382, %383)
}

def @func_6430() -> Tensor[(5, 10, 6), bool] {
  @func_6428() /* ty=Tensor[(5, 10, 6), bool] */
}

def @func_1007(%var_976: Tensor[(13, 14, 14), int16], %var_977: Tensor[(13, 14, 14), int16], %var_982: float32, %var_992: Tensor[(672), int16]) -> (Tensor[(13, 14, 14), int16], Tensor[(15, 3, 12), float32], float32, Tensor[(6, 14, 8), bool], Tensor[(672), int16]) {
  %384 = cast(%var_977, dtype="int16") /* ty=Tensor[(13, 14, 14), int16] */;
  %385 = shape_of(%var_976, dtype="int32") /* ty=Tensor[(3), int32] */;
  %386 = cast(%var_976, dtype="int16") /* ty=Tensor[(13, 14, 14), int16] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %388 = cast(%var_982, dtype="float32") /* ty=float32 */;
  %389 = reshape(%388, newshape=[]) /* ty=float32 */;
  %390 = @func_66(%389) /* ty=(Tensor[(15, 3, 12), float32],) */;
  %391 = cast(%var_992, dtype="int16") /* ty=Tensor[(672), int16] */;
  %392 = cast(%var_992, dtype="int16") /* ty=Tensor[(672), int16] */;
  %393 = reshape(%391, newshape=[6, 14, 8]) /* ty=Tensor[(6, 14, 8), int16] */;
  %394 = reshape(%392, newshape=[6, 14, 8]) /* ty=Tensor[(6, 14, 8), int16] */;
  %395 = @func_698(%393, %394) /* ty=(Tensor[(6, 14, 8), bool],) */;
  %396 = logical_xor(%386, %387) /* ty=Tensor[(13, 14, 14), int16] */;
  %397 = %390.0;
  %398 = %395.0;
  (%396, %397, %var_982, %398, %var_992)
}

def @func_7075() -> (Tensor[(5, 10, 6), uint16],) {
  %399 = @func_3170() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %400 = %399.0;
  (%400,)
}

def @func_2395(%var_2393: float32) -> (Tensor[(6, 2, 13), uint32], Tensor[(4, 3, 11), uint32], Tensor[(132), uint32], Tensor[(15, 3, 12), float32], float32) {
  @func_2392(%var_2393) /* ty=(Tensor[(6, 2, 13), uint32], Tensor[(4, 3, 11), uint32], Tensor[(132), uint32], Tensor[(15, 3, 12), float32], float32) */
}

def @func_5571() -> (Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(1, 10), float64]) {
  @func_5569() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(1, 10), float64]) */
}

def @func_8461() -> Tensor[(5, 10, 6), bool] {
  %401 = @func_2301() /* ty=(Tensor[(6, 2, 13), uint32], Tensor[(5, 10, 6), bool]) */;
  %401.1
}

def @func_6716(%var_6654: Tensor[(1, 1, 5), float32], %var_6683: Tensor[(5, 6, 5), float32]) -> (Tensor[(?, ?, 5), uint16], Tensor[(5, 6, 5), uint8]) {
  %402 = cast(%var_6654, dtype="float32") /* ty=Tensor[(1, 1, 5), float32] */;
  %403 = tan(%402) /* ty=Tensor[(1, 1, 5), float32] */;
  %404 = cast(%var_6654, dtype="uint16") /* ty=Tensor[(1, 1, 5), uint16] */;
  %405 = shape_of(%403, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%403, dtype="uint16") /* ty=Tensor[(1, 1, 5), uint16] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %408 = cast(%var_6654, dtype="uint8") /* ty=Tensor[(1, 1, 5), uint8] */;
  %409 = cast(%var_6683, dtype="uint8") /* ty=Tensor[(5, 6, 5), uint8] */;
  %410 = maximum(%406, %407) /* ty=Tensor[(?, ?, 5), uint16] */;
  %411 = logical_xor(%408, %409) /* ty=Tensor[(5, 6, 5), uint8] */;
  (%410, %411)
}

def @func_1928() -> (Tensor[(6, 4, 12), float32], Tensor[(6, 4, 12), float64], Tensor[(5, 10, 6), bool], Tensor[(10, 7, 16), float32], Tensor[(1120, 1), float32], Tensor[(10, 7, 16), float32]) {
  @func_1926() /* ty=(Tensor[(6, 4, 12), float32], Tensor[(6, 4, 12), float64], Tensor[(5, 10, 6), bool], Tensor[(10, 7, 16), float32], Tensor[(1120, 1), float32], Tensor[(10, 7, 16), float32]) */
}

def @func_5120(%var_5119: Tensor[(5, 10, 6), uint16]) -> (Tensor[(5, 10, 6), uint32], Tensor[(5, 10, 6), bool]) {
  %421 = fn (%var_5105: Tensor[(5, 10, 6), uint16]) -> (Tensor[(5, 10, 6), uint32], Tensor[(5, 10, 6), bool]) {
    %412 = @func_3170() /* ty=(Tensor[(5, 10, 6), uint16],) */;
    %413 = %412.0;
    %414 = cast(%var_5105, dtype="uint32") /* ty=Tensor[(5, 10, 6), uint32] */;
    %415 = shape_of(%413, dtype="int32") /* ty=Tensor[(3), int32] */;
    %416 = cast(%413, dtype="uint32") /* ty=Tensor[(5, 10, 6), uint32] */;
    %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %418 = @func_2912() /* ty=(Tensor[(5, 10, 6), bool],) */;
    %419 = logical_xor(%416, %417) /* ty=Tensor[(5, 10, 6), uint32] */;
    %420 = %418.0;
    (%419, %420)
  };
  %421(%var_5119) /* ty=(Tensor[(5, 10, 6), uint32], Tensor[(5, 10, 6), bool]) */
}

def @func_4598() -> (Tensor[(6, 2, 13), float64], Tensor[(5, 10, 6), uint16]) {
  %425 = fn () -> (Tensor[(6, 2, 13), float64], Tensor[(5, 10, 6), uint16]) {
    %422 = @func_3170() /* ty=(Tensor[(5, 10, 6), uint16],) */;
    %423 = @func_4475() /* ty=Tensor[(6, 2, 13), float64] */;
    %424 = %422.0;
    (%423, %424)
  };
  %425() /* ty=(Tensor[(6, 2, 13), float64], Tensor[(5, 10, 6), uint16]) */
}

def @func_3443() -> Tensor[(6, 2, 13), uint32] {
  %427 = fn () -> Tensor[(6, 2, 13), uint32] {
    %426 = @func_1397() /* ty=(Tensor[(6, 2, 13), uint32],) */;
    %426.0
  };
  %427() /* ty=Tensor[(6, 2, 13), uint32] */
}

def @func_5383() -> (Tensor[(5, 10, 6), uint16], Tensor[(8, 10, 5), float64], Tensor[(8, 50), float64], Tensor[(6, 4, 12), float64], Tensor[(6, 2, 13), int8], Tensor[(1120), float32]) {
  %428 = @func_5057() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %429 = cast(meta[relay.Constant][25] /* ty=Tensor[(8, 50), float64] */, dtype="float64") /* ty=Tensor[(8, 50), float64] */;
  %430 = reshape(%429, newshape=[8, 10, 5]) /* ty=Tensor[(8, 10, 5), float64] */;
  %431 = @func_2589(%430) /* ty=(Tensor[(8, 10, 5), float64], Tensor[(5, 10, 6), uint16], Tensor[(6, 2, 13), uint32]) */;
  %432 = cast(meta[relay.Constant][26] /* ty=Tensor[(1120), float32] */, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %433 = reshape(%432, newshape=[1120]) /* ty=Tensor[(1120), float32] */;
  %434 = @func_4012(%433) /* ty=(Tensor[(6, 2, 13), uint32], Tensor[(6, 2, 13), int8], Tensor[(6, 2, 13), int8], Tensor[(5, 10, 6), float32], Tensor[(1120), uint64], Tensor[(10, 7, 16), float64], Tensor[(6, 4, 12), float32], Tensor[(5, 8, 16), float32], Tensor[(640), int32]) */;
  %435 = %428.0;
  %436 = %431.0;
  %437 = @func_2880() /* ty=Tensor[(6, 4, 12), float64] */;
  %438 = %434.2;
  (%435, %436, meta[relay.Constant][25] /* ty=Tensor[(8, 50), float64] */, %437, %438, meta[relay.Constant][26] /* ty=Tensor[(1120), float32] */)
}

def @func_5519() -> (Tensor[(7, 10, 5), float64], Tensor[(7, 10, 5), float32]) {
  %448 = fn () -> (Tensor[(7, 10, 5), float64], Tensor[(7, 10, 5), float32]) {
    %439 = cast(meta[relay.Constant][27] /* ty=Tensor[(7, 10, 5), float32] */, dtype="float32") /* ty=Tensor[(7, 10, 5), float32] */;
    %440 = cosh(%439) /* ty=Tensor[(7, 10, 5), float32] */;
    %441 = cast(%440, dtype="float64") /* ty=Tensor[(7, 10, 5), float64] */;
    %442 = cast(meta[relay.Constant][27] /* ty=Tensor[(7, 10, 5), float32] */, dtype="float32") /* ty=Tensor[(7, 10, 5), float32] */;
    %443 = shape_of(%440, dtype="int32") /* ty=Tensor[(3), int32] */;
    %444 = cast(%440, dtype="float32") /* ty=Tensor[(7, 10, 5), float32] */;
    %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %446 = asinh(%441) /* ty=Tensor[(7, 10, 5), float64] */;
    %447 = floor_mod(%444, %445) /* ty=Tensor[(7, 10, 5), float32] */;
    (%446, %447)
  };
  %448() /* ty=(Tensor[(7, 10, 5), float64], Tensor[(7, 10, 5), float32]) */
}

def @main() -> (Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(6, 4, 12), float64]) {
  %449 = @func_6767() /* ty=(Tensor[(5, 10, 6), uint16], Tensor[(5, 10, 6), bool]) */;
  %450 = @func_1448() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %451 = @func_6561() /* ty=Tensor[(6, 4, 12), float64] */;
  %452 = cast(%451, dtype="float64") /* ty=Tensor[(6, 4, 12), float64] */;
  %453 = %449.1;
  %454 = %450.0;
  %455 = sinh(%452) /* ty=Tensor[(6, 4, 12), float64] */;
  (%453, %454, %455)
}

def @func_2930(%var_2923: Tensor[(5, 10, 6), bool]) -> Tensor[(5, 10, 6), bool] {
  %456 = @func_2912() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %457 = %456.0;
  %458 = cast(%var_2923, dtype="bool") /* ty=Tensor[(5, 10, 6), bool] */;
  %459 = shape_of(%457, dtype="int32") /* ty=Tensor[(3), int32] */;
  %460 = cast(%457, dtype="bool") /* ty=Tensor[(5, 10, 6), bool] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%460, %461) /* ty=Tensor[(5, 10, 6), bool] */
}

def @func_6491(%var_6489: Tensor[(1, 2, 15), uint16], %var_6490: Tensor[(13, 2, 15), uint16]) -> Tensor[(13, 2, 15), uint16] {
  %464 = fn (%var_6479: Tensor[(1, 2, 15), uint16], %var_6480: Tensor[(13, 2, 15), uint16]) -> Tensor[(13, 2, 15), uint16] {
    %462 = cast(%var_6479, dtype="uint16") /* ty=Tensor[(1, 2, 15), uint16] */;
    %463 = cast(%var_6480, dtype="uint16") /* ty=Tensor[(13, 2, 15), uint16] */;
    bitwise_xor(%462, %463) /* ty=Tensor[(13, 2, 15), uint16] */
  };
  %464(%var_6489, %var_6490) /* ty=Tensor[(13, 2, 15), uint16] */
}

def @func_6780() -> Tensor[(5, 10, 6), uint16] {
  %465 = @func_6766() /* ty=(Tensor[(5, 10, 6), uint16], Tensor[(5, 10, 6), bool]) */;
  %465.0
}

def @func_7712() -> (Tensor[(5, 10, 6), uint16],) {
  %468 = fn () -> (Tensor[(5, 10, 6), uint16],) {
    %466 = @func_1822() /* ty=(Tensor[(5, 10, 6), uint16],) */;
    %467 = %466.0;
    (%467,)
  };
  %468() /* ty=(Tensor[(5, 10, 6), uint16],) */
}

def @func_6631() -> Tensor[(6, 2, 13), float32] {
  %472 = fn () -> Tensor[(6, 2, 13), float32] {
    %469 = @func_1397() /* ty=(Tensor[(6, 2, 13), uint32],) */;
    %470 = %469.0;
    %471 = cast(%470, dtype="float32") /* ty=Tensor[(6, 2, 13), float32] */;
    cosh(%471) /* ty=Tensor[(6, 2, 13), float32] */
  };
  %472() /* ty=Tensor[(6, 2, 13), float32] */
}

def @func_3576(%var_3574: Tensor[(6, 2, 13), uint32]) -> (Tensor[(6, 2, 13), int8],) {
  @func_3573(%var_3574) /* ty=(Tensor[(6, 2, 13), int8],) */
}

def @func_1448() -> (Tensor[(5, 10, 6), bool],) {
  @func_1446() /* ty=(Tensor[(5, 10, 6), bool],) */
}

def @func_3815() -> (Tensor[(5, 10, 6), uint16],) {
  @func_3813() /* ty=(Tensor[(5, 10, 6), uint16],) */
}

def @func_5690() -> (Tensor[(5, 10, 6), bool], Tensor[(6, 2, 13), uint32], Tensor[(5, 10, 6), uint16], Tensor[(6, 4, 12), float32]) {
  %480 = fn () -> (Tensor[(5, 10, 6), bool], Tensor[(6, 2, 13), uint32], Tensor[(5, 10, 6), uint16], Tensor[(6, 4, 12), float32]) {
    %473 = @func_4370() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(6, 4, 12), float64]) */;
    %474 = @func_1397() /* ty=(Tensor[(6, 2, 13), uint32],) */;
    %475 = @func_3813() /* ty=(Tensor[(5, 10, 6), uint16],) */;
    %476 = %473.0;
    %477 = %474.0;
    %478 = %475.0;
    %479 = @func_4164() /* ty=Tensor[(6, 4, 12), float32] */;
    (%476, %477, %478, %479)
  };
  %480() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(6, 2, 13), uint32], Tensor[(5, 10, 6), uint16], Tensor[(6, 4, 12), float32]) */
}

def @func_2881() -> Tensor[(6, 4, 12), float64] {
  %482 = fn () -> Tensor[(6, 4, 12), float64] {
    %481 = @func_2749() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(6, 4, 12), float64], Tensor[(16, 13, 8), int64], Tensor[(1664), int64]) */;
    %481.1
  };
  %482() /* ty=Tensor[(6, 4, 12), float64] */
}

def @func_1333(%var_1320: Tensor[(10), float64]) -> (Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), float64], Tensor[(6, 14, 8), bool], Tensor[(672), int16], Tensor[(1, 10, 1), float64], Tensor[(10), float64], Tensor[(15, 3, 12), float32], Tensor[(2548), int16], float32) {
  %483 = @func_1267() /* ty=Tensor[(5, 10, 6), uint16] */;
  %484 = cast(meta[relay.Constant][28] /* ty=Tensor[(5, 10, 6), uint16] */, dtype="bool") /* ty=Tensor[(5, 10, 6), bool] */;
  %485 = shape_of(%483, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(%483, dtype="bool") /* ty=Tensor[(5, 10, 6), bool] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %488 = cast(%483, dtype="float64") /* ty=Tensor[(5, 10, 6), float64] */;
  %489 = cast(meta[relay.Constant][29] /* ty=Tensor[(672), int16] */, dtype="int16") /* ty=Tensor[(672), int16] */;
  %490 = cast(meta[relay.Constant][29] /* ty=Tensor[(672), int16] */, dtype="int16") /* ty=Tensor[(672), int16] */;
  %491 = reshape(%489, newshape=[6, 14, 8]) /* ty=Tensor[(6, 14, 8), int16] */;
  %492 = reshape(%490, newshape=[6, 14, 8]) /* ty=Tensor[(6, 14, 8), int16] */;
  %493 = @func_698(%491, %492) /* ty=(Tensor[(6, 14, 8), bool],) */;
  %494 = cast(%var_1320, dtype="float64") /* ty=Tensor[(10), float64] */;
  %495 = reshape(%494, newshape=[1, 10, 1]) /* ty=Tensor[(1, 10, 1), float64] */;
  %496 = @func_656(%495) /* ty=(Tensor[(1, 10, 1), float64], Tensor[(?, 10, ?), float32]) */;
  %497 = cast(meta[relay.Constant][30] /* ty=Tensor[(2548), int16] */, dtype="int16") /* ty=Tensor[(2548), int16] */;
  %498 = cast(meta[relay.Constant][30] /* ty=Tensor[(2548), int16] */, dtype="int16") /* ty=Tensor[(2548), int16] */;
  %499 = cast(6.08757f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %500 = %493.0;
  %501 = cast(%500, dtype="int16") /* ty=Tensor[(6, 14, 8), int16] */;
  %502 = reshape(%497, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), int16] */;
  %503 = reshape(%498, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), int16] */;
  %504 = reshape(%499, newshape=[]) /* ty=float32 */;
  %505 = reshape(%501, newshape=[672]) /* ty=Tensor[(672), int16] */;
  %506 = @func_1007(%502, %503, %504, %505) /* ty=(Tensor[(13, 14, 14), int16], Tensor[(15, 3, 12), float32], float32, Tensor[(6, 14, 8), bool], Tensor[(672), int16]) */;
  %507 = not_equal(%486, %487) /* ty=Tensor[(5, 10, 6), bool] */;
  %508 = log10(%488) /* ty=Tensor[(5, 10, 6), float64] */;
  %509 = %496.0;
  %510 = %506.1;
  (%507, %508, %500, meta[relay.Constant][29] /* ty=Tensor[(672), int16] */, %509, %var_1320, %510, meta[relay.Constant][30] /* ty=Tensor[(2548), int16] */, 6.08757f /* ty=float32 */)
}

def @func_7537(%var_7536: Tensor[(16, 5, 5), float64]) -> Tensor[(16, 5, 5), float64] {
  %515 = fn (%var_7531: Tensor[(16, 5, 5), float64]) -> Tensor[(16, 5, 5), float64] {
    %511 = cast(%var_7531, dtype="float64") /* ty=Tensor[(16, 5, 5), float64] */;
    %512 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(16, 5, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %513 = cast(meta[relay.Constant][31] /* ty=Tensor[(16, 5, 5), float64] */, dtype="float64") /* ty=Tensor[(16, 5, 5), float64] */;
    %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    mod(%513, %514) /* ty=Tensor[(16, 5, 5), float64] */
  };
  %515(%var_7536) /* ty=Tensor[(16, 5, 5), float64] */
}

def @func_1822() -> (Tensor[(5, 10, 6), uint16],) {
  %516 = @func_1598() /* ty=(Tensor[(5, 10, 6), uint16], Tensor[(6, 2, 13), uint32]) */;
  %517 = %516.0;
  (%517,)
}

def @func_4061(%var_4060: Tensor[(6, 2, 13), uint32]) -> (Tensor[(6, 2, 13), float32],) {
  %525 = fn (%var_4046: Tensor[(6, 2, 13), uint32]) -> (Tensor[(6, 2, 13), float32],) {
    %518 = @func_1397() /* ty=(Tensor[(6, 2, 13), uint32],) */;
    %519 = %518.0;
    %520 = cast(%var_4046, dtype="float32") /* ty=Tensor[(6, 2, 13), float32] */;
    %521 = shape_of(%519, dtype="int32") /* ty=Tensor[(3), int32] */;
    %522 = cast(%519, dtype="float32") /* ty=Tensor[(6, 2, 13), float32] */;
    %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %524 = add(%522, %523) /* ty=Tensor[(6, 2, 13), float32] */;
    (%524,)
  };
  %525(%var_4060) /* ty=(Tensor[(6, 2, 13), float32],) */
}

def @func_3792() -> Tensor[(5, 10, 6), bool] {
  %527 = fn () -> Tensor[(5, 10, 6), bool] {
    %526 = @func_2506() /* ty=(Tensor[(5, 10, 6), bool],) */;
    %526.0
  };
  %527() /* ty=Tensor[(5, 10, 6), bool] */
}

def @func_4574() -> (Tensor[(10), float64], Tensor[(132), uint32], Tensor[(16, 13, 8), int64], Tensor[(1664, 1), int64], Tensor[(5, 10, 6), float64], Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), uint16]) {
  %546 = fn () -> (Tensor[(10), float64], Tensor[(132), uint32], Tensor[(16, 13, 8), int64], Tensor[(1664, 1), int64], Tensor[(5, 10, 6), float64], Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), uint16]) {
    %528 = cast(meta[relay.Constant][32] /* ty=Tensor[(132), uint32] */, dtype="uint32") /* ty=Tensor[(132), uint32] */;
    %529 = reshape(%528, newshape=[132, 1]) /* ty=Tensor[(132, 1), uint32] */;
    %530 = @func_2203(%529) /* ty=(Tensor[(10, 7, 16), float32], Tensor[(10), float64], Tensor[(132, 1), uint32], Tensor[(5, 10, 6), float64]) */;
    %531 = cast(meta[relay.Constant][33] /* ty=Tensor[(1664, 1), int64] */, dtype="int64") /* ty=Tensor[(1664, 1), int64] */;
    %532 = reshape(%531, newshape=[16, 13, 8]) /* ty=Tensor[(16, 13, 8), int64] */;
    %533 = @func_470(%532) /* ty=(Tensor[(16, 13, 8), int64],) */;
    %534 = @func_4370() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(6, 4, 12), float64]) */;
    %535 = %534.0;
    %536 = cast(%535, dtype="float64") /* ty=Tensor[(5, 10, 6), float64] */;
    %537 = cos(%536) /* ty=Tensor[(5, 10, 6), float64] */;
    %538 = cast(%537, dtype="float64") /* ty=Tensor[(5, 10, 6), float64] */;
    %539 = @func_2912() /* ty=(Tensor[(5, 10, 6), bool],) */;
    %540 = @func_3170() /* ty=(Tensor[(5, 10, 6), uint16],) */;
    %541 = %530.1;
    %542 = %533.0;
    %543 = log(%538) /* ty=Tensor[(5, 10, 6), float64] */;
    %544 = %539.0;
    %545 = %540.0;
    (%541, meta[relay.Constant][32] /* ty=Tensor[(132), uint32] */, %542, meta[relay.Constant][33] /* ty=Tensor[(1664, 1), int64] */, %543, %544, %545)
  };
  %546() /* ty=(Tensor[(10), float64], Tensor[(132), uint32], Tensor[(16, 13, 8), int64], Tensor[(1664, 1), int64], Tensor[(5, 10, 6), float64], Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), uint16]) */
}

def @func_4015(%var_4013: Tensor[(1120), float32]) -> (Tensor[(6, 2, 13), uint32], Tensor[(6, 2, 13), int8], Tensor[(6, 2, 13), int8], Tensor[(5, 10, 6), float32], Tensor[(1120), uint64], Tensor[(10, 7, 16), float64], Tensor[(6, 4, 12), float32], Tensor[(5, 8, 16), float32], Tensor[(640), int32]) {
  @func_4012(%var_4013) /* ty=(Tensor[(6, 2, 13), uint32], Tensor[(6, 2, 13), int8], Tensor[(6, 2, 13), int8], Tensor[(5, 10, 6), float32], Tensor[(1120), uint64], Tensor[(10, 7, 16), float64], Tensor[(6, 4, 12), float32], Tensor[(5, 8, 16), float32], Tensor[(640), int32]) */
}

def @func_7378(%var_7323: Tensor[(6, 2, 13), float64]) -> (Tensor[(5, 10, 6), uint16], Tensor[(6, 4, 12), float64], Tensor[(6, 4, 12), float32], Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), uint16], Tensor[(6, 2, 13), bool], Tensor[(6, 2, 13), float64]) {
  %547 = @func_7075() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %548 = @func_6542() /* ty=(Tensor[(6, 4, 12), float64], Tensor[(5, 10, 6), bool]) */;
  %549 = @func_2301() /* ty=(Tensor[(6, 2, 13), uint32], Tensor[(5, 10, 6), bool]) */;
  %550 = @func_5057() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %551 = @func_4475() /* ty=Tensor[(6, 2, 13), float64] */;
  %552 = cast(%var_7323, dtype="bool") /* ty=Tensor[(6, 2, 13), bool] */;
  %553 = shape_of(%551, dtype="int32") /* ty=Tensor[(3), int32] */;
  %554 = cast(%551, dtype="bool") /* ty=Tensor[(6, 2, 13), bool] */;
  %555 = dyn.reshape(%552, %553, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %556 = cast(%var_7323, dtype="float64") /* ty=Tensor[(6, 2, 13), float64] */;
  %557 = sigmoid(%556) /* ty=Tensor[(6, 2, 13), float64] */;
  %558 = cast(%557, dtype="float64") /* ty=Tensor[(6, 2, 13), float64] */;
  %559 = %547.0;
  %560 = %548.0;
  %561 = @func_4164() /* ty=Tensor[(6, 4, 12), float32] */;
  %562 = %549.1;
  %563 = %550.0;
  %564 = not_equal(%554, %555) /* ty=Tensor[(6, 2, 13), bool] */;
  %565 = sqrt(%558) /* ty=Tensor[(6, 2, 13), float64] */;
  (%559, %560, %561, %562, %563, %564, %565)
}

def @func_6144() -> Tensor[(16, 13, 8), int64] {
  %567 = fn () -> Tensor[(16, 13, 8), int64] {
    %566 = @func_2749() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(6, 4, 12), float64], Tensor[(16, 13, 8), int64], Tensor[(1664), int64]) */;
    %566.2
  };
  %567() /* ty=Tensor[(16, 13, 8), int64] */
}

def @func_6782() -> Tensor[(5, 10, 6), uint16] {
  @func_6780() /* ty=Tensor[(5, 10, 6), uint16] */
}

def @func_473(%var_471: Tensor[(16, 13, 8), int64]) -> (Tensor[(16, 13, 8), int64],) {
  @func_470(%var_471) /* ty=(Tensor[(16, 13, 8), int64],) */
}

def @func_3473(%var_3472: Tensor[(672), int16]) -> (Tensor[(6, 2, 13), uint32], Tensor[(672), int16], Tensor[(672), int16]) {
  %574 = fn (%var_3466: Tensor[(672), int16]) -> (Tensor[(6, 2, 13), uint32], Tensor[(672), int16], Tensor[(672), int16]) {
    %568 = @func_1397() /* ty=(Tensor[(6, 2, 13), uint32],) */;
    %569 = cast(%var_3466, dtype="int16") /* ty=Tensor[(672), int16] */;
    %570 = reshape(%569, newshape=[672]) /* ty=Tensor[(672), int16] */;
    %571 = @func_2853(%570) /* ty=(Tensor[(672), int16], Tensor[(5, 10, 6), uint16]) */;
    %572 = %568.0;
    %573 = %571.0;
    (%572, %573, %var_3466)
  };
  %574(%var_3472) /* ty=(Tensor[(6, 2, 13), uint32], Tensor[(672), int16], Tensor[(672), int16]) */
}

def @func_1531(%var_1508: Tensor[(4, 3, 11), uint32]) -> Tensor[(4, 3, 11), uint32] {
  %575 = cast(%var_1508, dtype="uint32") /* ty=Tensor[(4, 3, 11), uint32] */;
  %576 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(4, 3, 11), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %577 = cast(meta[relay.Constant][34] /* ty=Tensor[(4, 3, 11), uint32] */, dtype="uint32") /* ty=Tensor[(4, 3, 11), uint32] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  logical_xor(%577, %578) /* ty=Tensor[(4, 3, 11), uint32] */
}

def @func_3356(%var_3352: Tensor[(9, 8, 15), float32], %var_3353: Tensor[(9, 8, 15), bool], %var_3354: float32, %var_3355: Tensor[(56, 12), int16]) -> (Tensor[(9, 8, 15), bool], Tensor[(2548, 1), int16], float32, Tensor[(56, 12), float32]) {
  @func_3350(%var_3352, %var_3353, %var_3354, %var_3355) /* ty=(Tensor[(9, 8, 15), bool], Tensor[(2548, 1), int16], float32, Tensor[(56, 12), float32]) */
}

def @func_7077() -> (Tensor[(5, 10, 6), uint16],) {
  @func_7075() /* ty=(Tensor[(5, 10, 6), uint16],) */
}

def @func_2206(%var_2204: Tensor[(132, 1), uint32]) -> (Tensor[(10, 7, 16), float32], Tensor[(10), float64], Tensor[(132, 1), uint32], Tensor[(5, 10, 6), float64]) {
  @func_2203(%var_2204) /* ty=(Tensor[(10, 7, 16), float32], Tensor[(10), float64], Tensor[(132, 1), uint32], Tensor[(5, 10, 6), float64]) */
}

def @func_3350(%var_3291: Tensor[(9, 8, 15), float32], %var_3304: Tensor[(9, 8, 15), bool], %var_3317: float32, %var_3318: Tensor[(56, 12), int16]) -> (Tensor[(9, 8, 15), bool], Tensor[(2548, 1), int16], float32, Tensor[(56, 12), float32]) {
  %579 = cast(%var_3291, dtype="float32") /* ty=Tensor[(9, 8, 15), float32] */;
  %580 = atan(%579) /* ty=Tensor[(9, 8, 15), float32] */;
  %581 = cast(%var_3291, dtype="bool") /* ty=Tensor[(9, 8, 15), bool] */;
  %582 = shape_of(%580, dtype="int32") /* ty=Tensor[(3), int32] */;
  %583 = cast(%580, dtype="bool") /* ty=Tensor[(9, 8, 15), bool] */;
  %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %585 = equal(%583, %584) /* ty=Tensor[(9, 8, 15), bool] */;
  %586 = cast(%var_3304, dtype="bool") /* ty=Tensor[(9, 8, 15), bool] */;
  %587 = shape_of(%585, dtype="int32") /* ty=Tensor[(3), int32] */;
  %588 = cast(%585, dtype="bool") /* ty=Tensor[(9, 8, 15), bool] */;
  %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %590 = cast(meta[relay.Constant][35] /* ty=Tensor[(2548, 1), int16] */, dtype="int16") /* ty=Tensor[(2548, 1), int16] */;
  %591 = cast(meta[relay.Constant][35] /* ty=Tensor[(2548, 1), int16] */, dtype="int16") /* ty=Tensor[(2548, 1), int16] */;
  %592 = cast(%var_3317, dtype="float32") /* ty=float32 */;
  %593 = cast(%var_3318, dtype="int16") /* ty=Tensor[(56, 12), int16] */;
  %594 = reshape(%590, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), int16] */;
  %595 = reshape(%591, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), int16] */;
  %596 = reshape(%592, newshape=[]) /* ty=float32 */;
  %597 = reshape(%593, newshape=[672]) /* ty=Tensor[(672), int16] */;
  %598 = @func_1007(%594, %595, %596, %597) /* ty=(Tensor[(13, 14, 14), int16], Tensor[(15, 3, 12), float32], float32, Tensor[(6, 14, 8), bool], Tensor[(672), int16]) */;
  %599 = %598.4;
  %600 = cast(%599, dtype="float32") /* ty=Tensor[(672), float32] */;
  %601 = shape_of(%var_3318, dtype="int32") /* ty=Tensor[(2), int32] */;
  %602 = cast(%var_3318, dtype="float32") /* ty=Tensor[(56, 12), float32] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %604 = less(%588, %589) /* ty=Tensor[(9, 8, 15), bool] */;
  %605 = floor_mod(%602, %603) /* ty=Tensor[(56, 12), float32] */;
  (%604, meta[relay.Constant][35] /* ty=Tensor[(2548, 1), int16] */, %var_3317, %605)
}

def @func_1399() -> (Tensor[(6, 2, 13), uint32],) {
  @func_1397() /* ty=(Tensor[(6, 2, 13), uint32],) */
}

def @func_6261(%var_6259: Tensor[(1664), int64]) -> (Tensor[(6, 2, 13), float64], Tensor[(5, 10, 6), uint16], Tensor[(16, 13, 8), int64], Tensor[(1664), int64], Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), uint16]) {
  @func_6258(%var_6259) /* ty=(Tensor[(6, 2, 13), float64], Tensor[(5, 10, 6), uint16], Tensor[(16, 13, 8), int64], Tensor[(1664), int64], Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), uint16]) */
}

def @func_8051() -> Tensor[(6, 2, 13), float64] {
  %606 = @func_4597() /* ty=(Tensor[(6, 2, 13), float64], Tensor[(5, 10, 6), uint16]) */;
  %606.0
}

def @func_2392(%var_2379: float32) -> (Tensor[(6, 2, 13), uint32], Tensor[(4, 3, 11), uint32], Tensor[(132), uint32], Tensor[(15, 3, 12), float32], float32) {
  %607 = @func_2301() /* ty=(Tensor[(6, 2, 13), uint32], Tensor[(5, 10, 6), bool]) */;
  %608 = cast(meta[relay.Constant][36] /* ty=Tensor[(132), uint32] */, dtype="uint32") /* ty=Tensor[(132), uint32] */;
  %609 = reshape(%608, newshape=[4, 3, 11]) /* ty=Tensor[(4, 3, 11), uint32] */;
  %610 = cast(%var_2379, dtype="float32") /* ty=float32 */;
  %611 = reshape(%610, newshape=[]) /* ty=float32 */;
  %612 = @func_66(%611) /* ty=(Tensor[(15, 3, 12), float32],) */;
  %613 = %607.0;
  %614 = @func_1531(%609) /* ty=Tensor[(4, 3, 11), uint32] */;
  %615 = %612.0;
  (%613, %614, meta[relay.Constant][36] /* ty=Tensor[(132), uint32] */, %615, %var_2379)
}

def @func_7468(%var_7467: Tensor[(5, 10, 6), uint16]) -> (Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), int16], Tensor[(5, 10, 6), bool], Tensor[(288), float32]) {
  %628 = fn (%var_7445: Tensor[(5, 10, 6), uint16]) -> (Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), int16], Tensor[(5, 10, 6), bool], Tensor[(288), float32]) {
    %616 = @func_1822() /* ty=(Tensor[(5, 10, 6), uint16],) */;
    %617 = %616.0;
    %618 = cast(%var_7445, dtype="int16") /* ty=Tensor[(5, 10, 6), int16] */;
    %619 = shape_of(%617, dtype="int32") /* ty=Tensor[(3), int32] */;
    %620 = cast(%617, dtype="int16") /* ty=Tensor[(5, 10, 6), int16] */;
    %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %622 = cast(meta[relay.Constant][37] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
    %623 = reshape(%622, newshape=[6, 4, 12]) /* ty=Tensor[(6, 4, 12), float32] */;
    %624 = @func_4316(%623) /* ty=(Tensor[(5, 10, 6), bool], Tensor[(6, 4, 12), uint32], Tensor[(1, 132), uint32], Tensor[(756), float32], Tensor[(10, 1), float64]) */;
    %625 = @func_3791() /* ty=Tensor[(5, 10, 6), bool] */;
    %626 = bitwise_xor(%620, %621) /* ty=Tensor[(5, 10, 6), int16] */;
    %627 = %624.0;
    (%625, %626, %627, meta[relay.Constant][37] /* ty=Tensor[(288), float32] */)
  };
  %628(%var_7467) /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), int16], Tensor[(5, 10, 6), bool], Tensor[(288), float32]) */
}

def @func_2933(%var_2931: Tensor[(5, 10, 6), bool]) -> Tensor[(5, 10, 6), bool] {
  @func_2930(%var_2931) /* ty=Tensor[(5, 10, 6), bool] */
}

def @func_6563() -> Tensor[(6, 4, 12), float64] {
  @func_6561() /* ty=Tensor[(6, 4, 12), float64] */
}

def @func_8272(%var_8263: Tensor[(1, 14, 15), float32]) -> (Tensor[(1, 14, 15), float32],) {
  %629 = cast(%var_8263, dtype="float32") /* ty=Tensor[(1, 14, 15), float32] */;
  %630 = atanh(%629) /* ty=Tensor[(1, 14, 15), float32] */;
  (%630,)
}

def @func_5809(%var_5807: Tensor[(1, 2, 13), float32], %var_5808: Tensor[(1, 2, 13), float32]) -> (Tensor[(?, 2, 13), float64], Tensor[(?, 2, 13), uint32]) {
  %643 = fn (%var_5784: Tensor[(1, 2, 13), float32], %var_5801: Tensor[(1, 2, 13), float32]) -> (Tensor[(?, 2, 13), float64], Tensor[(?, 2, 13), uint32]) {
    %631 = cast(%var_5784, dtype="float32") /* ty=Tensor[(1, 2, 13), float32] */;
    %632 = sigmoid(%631) /* ty=Tensor[(1, 2, 13), float32] */;
    %633 = cast(%var_5784, dtype="float64") /* ty=Tensor[(1, 2, 13), float64] */;
    %634 = shape_of(%632, dtype="int32") /* ty=Tensor[(3), int32] */;
    %635 = cast(%632, dtype="float64") /* ty=Tensor[(1, 2, 13), float64] */;
    %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %637 = cast(%var_5801, dtype="uint32") /* ty=Tensor[(1, 2, 13), uint32] */;
    %638 = shape_of(%var_5784, dtype="int32") /* ty=Tensor[(3), int32] */;
    %639 = cast(%var_5784, dtype="uint32") /* ty=Tensor[(1, 2, 13), uint32] */;
    %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %641 = subtract(%635, %636) /* ty=Tensor[(?, 2, 13), float64] */;
    %642 = bitwise_and(%639, %640) /* ty=Tensor[(?, 2, 13), uint32] */;
    (%641, %642)
  };
  %643(%var_5807, %var_5808) /* ty=(Tensor[(?, 2, 13), float64], Tensor[(?, 2, 13), uint32]) */
}

def @func_5059() -> (Tensor[(5, 10, 6), uint16],) {
  @func_5057() /* ty=(Tensor[(5, 10, 6), uint16],) */
}

def @func_3278(%var_3276: Tensor[(9, 6, 14), float32], %var_3277: Tensor[(1, 10), float64]) -> (Tensor[(9, 6, 14), float32], Tensor[(10), float64], Tensor[(1, 10), float64], Tensor[(10), float64], Tensor[(1, 132), uint32]) {
  %654 = fn (%var_3255: Tensor[(9, 6, 14), float32], %var_3261: Tensor[(1, 10), float64]) -> (Tensor[(9, 6, 14), float32], Tensor[(10), float64], Tensor[(1, 10), float64], Tensor[(10), float64], Tensor[(1, 132), uint32]) {
    %644 = cast(%var_3255, dtype="float32") /* ty=Tensor[(9, 6, 14), float32] */;
    %645 = cast(%var_3261, dtype="float64") /* ty=Tensor[(1, 10), float64] */;
    %646 = reshape(%645, newshape=[10]) /* ty=Tensor[(10), float64] */;
    %647 = @func_3157(%646) /* ty=(Tensor[(5, 10, 6), float64], Tensor[(5, 10, 6), bool], Tensor[(10), float64], Tensor[(5, 10, 6), uint16], Tensor[(1, 10, 1), float64]) */;
    %648 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 132), uint32] */, dtype="uint32") /* ty=Tensor[(1, 132), uint32] */;
    %649 = reshape(%648, newshape=[132, 1]) /* ty=Tensor[(132, 1), uint32] */;
    %650 = @func_2203(%649) /* ty=(Tensor[(10, 7, 16), float32], Tensor[(10), float64], Tensor[(132, 1), uint32], Tensor[(5, 10, 6), float64]) */;
    %651 = cosh(%644) /* ty=Tensor[(9, 6, 14), float32] */;
    %652 = %647.2;
    %653 = %650.1;
    (%651, %652, %var_3261, %653, meta[relay.Constant][38] /* ty=Tensor[(1, 132), uint32] */)
  };
  %654(%var_3276, %var_3277) /* ty=(Tensor[(9, 6, 14), float32], Tensor[(10), float64], Tensor[(1, 10), float64], Tensor[(10), float64], Tensor[(1, 132), uint32]) */
}

def @func_1824() -> (Tensor[(5, 10, 6), uint16],) {
  @func_1822() /* ty=(Tensor[(5, 10, 6), uint16],) */
}

def @func_8446(%var_8444: Tensor[(4, 5), bool], %var_8445: Tensor[(4, 5), bool]) -> (Tensor[(4, 5), bool],) {
  %660 = fn (%var_8426: Tensor[(4, 5), bool], %var_8427: Tensor[(4, 5), bool]) -> (Tensor[(4, 5), bool],) {
    %655 = cast(%var_8427, dtype="bool") /* ty=Tensor[(4, 5), bool] */;
    %656 = shape_of(%var_8426, dtype="int32") /* ty=Tensor[(2), int32] */;
    %657 = cast(%var_8426, dtype="bool") /* ty=Tensor[(4, 5), bool] */;
    %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %659 = logical_and(%657, %658) /* ty=Tensor[(4, 5), bool] */;
    (%659,)
  };
  %660(%var_8444, %var_8445) /* ty=(Tensor[(4, 5), bool],) */
}

def @func_4984() -> Tensor[(5, 10, 6), uint16] {
  %661 = @func_3813() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %661.0
}

def @func_3706() -> (Tensor[(5, 10, 6), uint16],) {
  @func_3704() /* ty=(Tensor[(5, 10, 6), uint16],) */
}

def @func_7381(%var_7379: Tensor[(6, 2, 13), float64]) -> (Tensor[(5, 10, 6), uint16], Tensor[(6, 4, 12), float64], Tensor[(6, 4, 12), float32], Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), uint16], Tensor[(6, 2, 13), bool], Tensor[(6, 2, 13), float64]) {
  @func_7378(%var_7379) /* ty=(Tensor[(5, 10, 6), uint16], Tensor[(6, 4, 12), float64], Tensor[(6, 4, 12), float32], Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), uint16], Tensor[(6, 2, 13), bool], Tensor[(6, 2, 13), float64]) */
}

def @func_470(%var_464: Tensor[(16, 13, 8), int64]) -> (Tensor[(16, 13, 8), int64],) {
  %662 = cast(%var_464, dtype="int64") /* ty=Tensor[(16, 13, 8), int64] */;
  %663 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(16, 13, 8), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %664 = cast(meta[relay.Constant][39] /* ty=Tensor[(16, 13, 8), int64] */, dtype="int64") /* ty=Tensor[(16, 13, 8), int64] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %666 = left_shift(%664, %665) /* ty=Tensor[(16, 13, 8), int64] */;
  (%666,)
}

def @func_6043() -> (Tensor[(5, 10, 6), bool],) {
  @func_6041() /* ty=(Tensor[(5, 10, 6), bool],) */
}

def @func_4708() -> (Tensor[(5, 10, 6), uint16], Tensor[(6, 4, 12), float32], Tensor[(6, 4, 12), float64], Tensor[(5, 10, 6), uint16], Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool]) {
  %675 = fn () -> (Tensor[(5, 10, 6), uint16], Tensor[(6, 4, 12), float32], Tensor[(6, 4, 12), float64], Tensor[(5, 10, 6), uint16], Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool]) {
    %667 = @func_2506() /* ty=(Tensor[(5, 10, 6), bool],) */;
    %668 = @func_3839() /* ty=(Tensor[(5, 10, 6), bool],) */;
    %669 = @func_2753() /* ty=Tensor[(5, 10, 6), uint16] */;
    %670 = @func_3626() /* ty=Tensor[(6, 4, 12), float32] */;
    %671 = @func_3516() /* ty=Tensor[(6, 4, 12), float64] */;
    %672 = @func_2753() /* ty=Tensor[(5, 10, 6), uint16] */;
    %673 = %667.0;
    %674 = %668.0;
    (%669, %670, %671, %672, %673, %674)
  };
  %675() /* ty=(Tensor[(5, 10, 6), uint16], Tensor[(6, 4, 12), float32], Tensor[(6, 4, 12), float64], Tensor[(5, 10, 6), uint16], Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool]) */
}

def @func_4219(%var_4218: Tensor[(8, 3), float32]) -> Tensor[(8, 3), float32] {
  %677 = fn (%var_4200: Tensor[(8, 3), float32]) -> Tensor[(8, 3), float32] {
    %676 = cast(%var_4200, dtype="float32") /* ty=Tensor[(8, 3), float32] */;
    cosh(%676) /* ty=Tensor[(8, 3), float32] */
  };
  %677(%var_4218) /* ty=Tensor[(8, 3), float32] */
}

def @func_7848(%var_7814: Tensor[(288), float64], %var_7815: Tensor[(168, 4), int16]) -> (Tensor[(5, 10, 6), bool], Tensor[(182, 14), int16], Tensor[(288), float64], Tensor[(168, 4), int16], Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool]) {
  %678 = @func_5754() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %679 = cast(%var_7814, dtype="float64") /* ty=Tensor[(288), float64] */;
  %680 = cast(%var_7814, dtype="float64") /* ty=Tensor[(288), float64] */;
  %681 = cast(%var_7815, dtype="int16") /* ty=Tensor[(168, 4), int16] */;
  %682 = reshape(%679, newshape=[6, 4, 12]) /* ty=Tensor[(6, 4, 12), float64] */;
  %683 = reshape(%680, newshape=[6, 4, 12]) /* ty=Tensor[(6, 4, 12), float64] */;
  %684 = reshape(%681, newshape=[672]) /* ty=Tensor[(672), int16] */;
  %685 = @func_2263(%682, %683, %684) /* ty=(Tensor[(6, 4, 12), float64], Tensor[(6, 4, 12), int32], Tensor[(6, 4, 12), bool], Tensor[(15, 3, 12), float32], float32, Tensor[(13, 14, 14), int16], Tensor[(182, 14), int16], Tensor[(672), int16]) */;
  %686 = @func_5569() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(1, 10), float64]) */;
  %687 = %678.0;
  %688 = %685.6;
  %689 = @func_6428() /* ty=Tensor[(5, 10, 6), bool] */;
  %690 = %686.0;
  (%687, %688, %var_7814, %var_7815, %689, %690)
}

def @func_5966() -> Tensor[(1, 10), float64] {
  %691 = @func_5569() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(1, 10), float64]) */;
  %691.3
}

def @func_3886() -> (Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool]) {
  %695 = fn () -> (Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool]) {
    %692 = @func_3839() /* ty=(Tensor[(5, 10, 6), bool],) */;
    %693 = %692.0;
    %694 = @func_3791() /* ty=Tensor[(5, 10, 6), bool] */;
    (%693, %694)
  };
  %695() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool]) */
}

def @func_6338() -> (Tensor[(5, 10, 6), bool],) {
  %698 = fn () -> (Tensor[(5, 10, 6), bool],) {
    %696 = @func_3057() /* ty=(Tensor[(5, 10, 6), bool],) */;
    %697 = %696.0;
    (%697,)
  };
  %698() /* ty=(Tensor[(5, 10, 6), bool],) */
}

def @func_3170() -> (Tensor[(5, 10, 6), uint16],) {
  %699 = @func_1822() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %700 = %699.0;
  (%700,)
}

def @func_7145() -> (Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), uint16]) {
  @func_7143() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), uint16]) */
}

def @func_2982(%var_2981: Tensor[(66, 2), uint32]) -> (Tensor[(5, 10, 6), uint16], Tensor[(4, 3, 11), uint32], Tensor[(66, 2), uint32]) {
  %706 = fn (%var_2977: Tensor[(66, 2), uint32]) -> (Tensor[(5, 10, 6), uint16], Tensor[(4, 3, 11), uint32], Tensor[(66, 2), uint32]) {
    %701 = @func_1822() /* ty=(Tensor[(5, 10, 6), uint16],) */;
    %702 = cast(%var_2977, dtype="uint32") /* ty=Tensor[(66, 2), uint32] */;
    %703 = reshape(%702, newshape=[4, 3, 11]) /* ty=Tensor[(4, 3, 11), uint32] */;
    %704 = %701.0;
    %705 = @func_1531(%703) /* ty=Tensor[(4, 3, 11), uint32] */;
    (%704, %705, %var_2977)
  };
  %706(%var_2981) /* ty=(Tensor[(5, 10, 6), uint16], Tensor[(4, 3, 11), uint32], Tensor[(66, 2), uint32]) */
}

def @func_3730() -> (Tensor[(5, 10, 6), bool],) {
  %709 = fn () -> (Tensor[(5, 10, 6), bool],) {
    %707 = @func_2912() /* ty=(Tensor[(5, 10, 6), bool],) */;
    %708 = %707.0;
    (%708,)
  };
  %709() /* ty=(Tensor[(5, 10, 6), bool],) */
}

def @func_4339() -> Tensor[(5, 10, 6), bool] {
  @func_4337() /* ty=Tensor[(5, 10, 6), bool] */
}

def @func_6428() -> Tensor[(5, 10, 6), bool] {
  %710 = @func_1446() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %710.0
}

def @func_1598() -> (Tensor[(5, 10, 6), uint16], Tensor[(6, 2, 13), uint32]) {
  %711 = @func_1397() /* ty=(Tensor[(6, 2, 13), uint32],) */;
  %712 = @func_1267() /* ty=Tensor[(5, 10, 6), uint16] */;
  %713 = %711.0;
  (%712, %713)
}

def @func_4166() -> Tensor[(6, 4, 12), float32] {
  @func_4164() /* ty=Tensor[(6, 4, 12), float32] */
}

def @func_4931(%var_4921: Tensor[(6, 4, 12), float32]) -> (Tensor[(6, 4, 12), float64],) {
  %714 = @func_3626() /* ty=Tensor[(6, 4, 12), float32] */;
  %715 = cast(%var_4921, dtype="float64") /* ty=Tensor[(6, 4, 12), float64] */;
  %716 = shape_of(%714, dtype="int32") /* ty=Tensor[(3), int32] */;
  %717 = cast(%714, dtype="float64") /* ty=Tensor[(6, 4, 12), float64] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %719 = floor_mod(%717, %718) /* ty=Tensor[(6, 4, 12), float64] */;
  (%719,)
}

def @func_1796() -> (Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(6, 2, 13), bool]) {
  %733 = fn () -> (Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(6, 2, 13), bool]) {
    %720 = @func_1446() /* ty=(Tensor[(5, 10, 6), bool],) */;
    %721 = @func_1446() /* ty=(Tensor[(5, 10, 6), bool],) */;
    %722 = @func_1397() /* ty=(Tensor[(6, 2, 13), uint32],) */;
    %723 = %722.0;
    %724 = cast(%723, dtype="float64") /* ty=Tensor[(6, 2, 13), float64] */;
    %725 = atanh(%724) /* ty=Tensor[(6, 2, 13), float64] */;
    %726 = cast(%723, dtype="bool") /* ty=Tensor[(6, 2, 13), bool] */;
    %727 = shape_of(%725, dtype="int32") /* ty=Tensor[(3), int32] */;
    %728 = cast(%725, dtype="bool") /* ty=Tensor[(6, 2, 13), bool] */;
    %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %730 = %720.0;
    %731 = %721.0;
    %732 = equal(%728, %729) /* ty=Tensor[(6, 2, 13), bool] */;
    (%730, %731, %732)
  };
  %733() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(6, 2, 13), bool]) */
}

def @func_2203(%var_2169: Tensor[(132, 1), uint32]) -> (Tensor[(10, 7, 16), float32], Tensor[(10), float64], Tensor[(132, 1), uint32], Tensor[(5, 10, 6), float64]) {
  %734 = cast(meta[relay.Constant][40] /* ty=Tensor[(10), float64] */, dtype="float64") /* ty=Tensor[(10), float64] */;
  %735 = cast(%var_2169, dtype="uint32") /* ty=Tensor[(132, 1), uint32] */;
  %736 = reshape(%734, newshape=[10]) /* ty=Tensor[(10), float64] */;
  %737 = reshape(%735, newshape=[33, 4]) /* ty=Tensor[(33, 4), uint32] */;
  %738 = @func_2065(%736, %737) /* ty=(Tensor[(10, 7, 16), float32], Tensor[(1120), float32], Tensor[(5, 10, 6), uint16], Tensor[(?, 10, ?), float32], Tensor[(10), float64], Tensor[(5, 10, 6), uint16], Tensor[(2548), int16], Tensor[(4, 3, 11), uint32], Tensor[(33, 4), uint32], Tensor[(6, 4, 12), float32], Tensor[(6, 2, 13), bool]) */;
  %739 = @func_1822() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %740 = %739.0;
  %741 = cast(%740, dtype="float64") /* ty=Tensor[(5, 10, 6), float64] */;
  %742 = %738.0;
  %743 = cosh(%741) /* ty=Tensor[(5, 10, 6), float64] */;
  (%742, meta[relay.Constant][40] /* ty=Tensor[(10), float64] */, %var_2169, %743)
}

def @func_7485() -> (Tensor[(5, 10, 6), uint16],) {
  %746 = fn () -> (Tensor[(5, 10, 6), uint16],) {
    %744 = @func_4597() /* ty=(Tensor[(6, 2, 13), float64], Tensor[(5, 10, 6), uint16]) */;
    %745 = %744.1;
    (%745,)
  };
  %746() /* ty=(Tensor[(5, 10, 6), uint16],) */
}

def @func_1268() -> Tensor[(5, 10, 6), uint16] {
  %751 = fn () -> Tensor[(5, 10, 6), uint16] {
    %747 = cast(meta[relay.Constant][42] /* ty=Tensor[(5, 10, 6), uint16] */, dtype="uint16") /* ty=Tensor[(5, 10, 6), uint16] */;
    %748 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(5, 10, 6), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %749 = cast(meta[relay.Constant][41] /* ty=Tensor[(5, 10, 6), uint16] */, dtype="uint16") /* ty=Tensor[(5, 10, 6), uint16] */;
    %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    maximum(%749, %750) /* ty=Tensor[(5, 10, 6), uint16] */
  };
  %751() /* ty=Tensor[(5, 10, 6), uint16] */
}

def @func_4469(%var_4467: Tensor[(24, 1), float32]) -> (Tensor[(8, 3), float32], Tensor[(24, 1), float32], Tensor[(8, 3), float32], Tensor[(5, 10, 6), uint16], Tensor[(6, 4, 12), float64]) {
  @func_4466(%var_4467) /* ty=(Tensor[(8, 3), float32], Tensor[(24, 1), float32], Tensor[(8, 3), float32], Tensor[(5, 10, 6), uint16], Tensor[(6, 4, 12), float64]) */
}

def @func_5724() -> (Tensor[(5, 10, 6), bool],) {
  %754 = fn () -> (Tensor[(5, 10, 6), bool],) {
    %752 = @func_2749() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(6, 4, 12), float64], Tensor[(16, 13, 8), int64], Tensor[(1664), int64]) */;
    %753 = %752.0;
    (%753,)
  };
  %754() /* ty=(Tensor[(5, 10, 6), bool],) */
}

def @func_4466(%var_4420: Tensor[(24, 1), float32]) -> (Tensor[(8, 3), float32], Tensor[(24, 1), float32], Tensor[(8, 3), float32], Tensor[(5, 10, 6), uint16], Tensor[(6, 4, 12), float64]) {
  %755 = cast(%var_4420, dtype="float32") /* ty=Tensor[(24, 1), float32] */;
  %756 = reshape(%755, newshape=[8, 3]) /* ty=Tensor[(8, 3), float32] */;
  %757 = @func_4217(%756) /* ty=Tensor[(8, 3), float32] */;
  %758 = cast(%757, dtype="float32") /* ty=Tensor[(8, 3), float32] */;
  %759 = reshape(%758, newshape=[8, 3]) /* ty=Tensor[(8, 3), float32] */;
  %760 = @func_3813() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %761 = @func_3626() /* ty=Tensor[(6, 4, 12), float32] */;
  %762 = cast(%761, dtype="float64") /* ty=Tensor[(6, 4, 12), float64] */;
  %763 = acosh(%762) /* ty=Tensor[(6, 4, 12), float64] */;
  %764 = cast(%763, dtype="float64") /* ty=Tensor[(6, 4, 12), float64] */;
  %765 = @func_4217(%759) /* ty=Tensor[(8, 3), float32] */;
  %766 = %760.0;
  %767 = asin(%764) /* ty=Tensor[(6, 4, 12), float64] */;
  (%757, %var_4420, %765, %766, %767)
}

def @func_1446() -> (Tensor[(5, 10, 6), bool],) {
  %768 = @func_1267() /* ty=Tensor[(5, 10, 6), uint16] */;
  %769 = cast(%768, dtype="float32") /* ty=Tensor[(5, 10, 6), float32] */;
  %770 = sigmoid(%769) /* ty=Tensor[(5, 10, 6), float32] */;
  %771 = cast(%768, dtype="bool") /* ty=Tensor[(5, 10, 6), bool] */;
  %772 = shape_of(%770, dtype="int32") /* ty=Tensor[(3), int32] */;
  %773 = cast(%770, dtype="bool") /* ty=Tensor[(5, 10, 6), bool] */;
  %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %775 = logical_or(%773, %774) /* ty=Tensor[(5, 10, 6), bool] */;
  (%775,)
}

def @func_2302() -> (Tensor[(6, 2, 13), uint32], Tensor[(5, 10, 6), bool]) {
  %780 = fn () -> (Tensor[(6, 2, 13), uint32], Tensor[(5, 10, 6), bool]) {
    %776 = @func_1397() /* ty=(Tensor[(6, 2, 13), uint32],) */;
    %777 = @func_1446() /* ty=(Tensor[(5, 10, 6), bool],) */;
    %778 = %776.0;
    %779 = %777.0;
    (%778, %779)
  };
  %780() /* ty=(Tensor[(6, 2, 13), uint32], Tensor[(5, 10, 6), bool]) */
}

def @func_5837() -> Tensor[(5, 10, 6), bool] {
  %782 = fn () -> Tensor[(5, 10, 6), bool] {
    %781 = @func_4370() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(6, 4, 12), float64]) */;
    %781.0
  };
  %782() /* ty=Tensor[(5, 10, 6), bool] */
}

def @func_698(%var_690: Tensor[(6, 14, 8), int16], %var_691: Tensor[(6, 14, 8), int16]) -> (Tensor[(6, 14, 8), bool],) {
  %783 = cast(%var_691, dtype="bool") /* ty=Tensor[(6, 14, 8), bool] */;
  %784 = shape_of(%var_690, dtype="int32") /* ty=Tensor[(3), int32] */;
  %785 = cast(%var_690, dtype="bool") /* ty=Tensor[(6, 14, 8), bool] */;
  %786 = dyn.reshape(%783, %784, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %787 = equal(%785, %786) /* ty=Tensor[(6, 14, 8), bool] */;
  (%787,)
}

def @func_2065(%var_1996: Tensor[(10), float64], %var_2021: Tensor[(33, 4), uint32]) -> (Tensor[(10, 7, 16), float32], Tensor[(1120), float32], Tensor[(5, 10, 6), uint16], Tensor[(?, 10, ?), float32], Tensor[(10), float64], Tensor[(5, 10, 6), uint16], Tensor[(2548), int16], Tensor[(4, 3, 11), uint32], Tensor[(33, 4), uint32], Tensor[(6, 4, 12), float32], Tensor[(6, 2, 13), bool]) {
  %788 = cast(meta[relay.Constant][43] /* ty=Tensor[(1120), float32] */, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %789 = reshape(%788, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), float32] */;
  %790 = @func_1822() /* ty=(Tensor[(5, 10, 6), uint16],) */;
  %791 = cast(%var_1996, dtype="float64") /* ty=Tensor[(10), float64] */;
  %792 = reshape(%791, newshape=[1, 10, 1]) /* ty=Tensor[(1, 10, 1), float64] */;
  %793 = @func_656(%792) /* ty=(Tensor[(1, 10, 1), float64], Tensor[(?, 10, ?), float32]) */;
  %794 = cast(meta[relay.Constant][44] /* ty=Tensor[(2548), int16] */, dtype="int16") /* ty=Tensor[(2548), int16] */;
  %795 = reshape(%794, newshape=[2548]) /* ty=Tensor[(2548), int16] */;
  %796 = @func_1718(%795) /* ty=(Tensor[(4, 3, 11), uint32], Tensor[(1, 132), uint32], Tensor[(5, 10, 6), uint16], Tensor[(15, 3, 12), float32], Tensor[(10), float64], Tensor[(5, 10, 6), bool], Tensor[(13, 14, 14), int16], Tensor[(2548), int16], float32, Tensor[(56, 12), int16], Tensor[(5, 10, 6), bool]) */;
  %797 = cast(%var_2021, dtype="uint32") /* ty=Tensor[(33, 4), uint32] */;
  %798 = reshape(%797, newshape=[4, 3, 11]) /* ty=Tensor[(4, 3, 11), uint32] */;
  %799 = @func_1926() /* ty=(Tensor[(6, 4, 12), float32], Tensor[(6, 4, 12), float64], Tensor[(5, 10, 6), bool], Tensor[(10, 7, 16), float32], Tensor[(1120, 1), float32], Tensor[(10, 7, 16), float32]) */;
  %800 = @func_1598() /* ty=(Tensor[(5, 10, 6), uint16], Tensor[(6, 2, 13), uint32]) */;
  %801 = %800.1;
  %802 = cast(%801, dtype="float32") /* ty=Tensor[(6, 2, 13), float32] */;
  %803 = rsqrt(%802) /* ty=Tensor[(6, 2, 13), float32] */;
  %804 = cast(%801, dtype="bool") /* ty=Tensor[(6, 2, 13), bool] */;
  %805 = shape_of(%803, dtype="int32") /* ty=Tensor[(3), int32] */;
  %806 = cast(%803, dtype="bool") /* ty=Tensor[(6, 2, 13), bool] */;
  %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %808 = @func_384(%789) /* ty=Tensor[(10, 7, 16), float32] */;
  %809 = %790.0;
  %810 = %793.1;
  %811 = %796.2;
  %812 = @func_1531(%798) /* ty=Tensor[(4, 3, 11), uint32] */;
  %813 = %799.0;
  %814 = logical_and(%806, %807) /* ty=Tensor[(6, 2, 13), bool] */;
  (%808, meta[relay.Constant][43] /* ty=Tensor[(1120), float32] */, %809, %810, %var_1996, %811, meta[relay.Constant][44] /* ty=Tensor[(2548), int16] */, %812, %var_2021, %813, %814)
}

def @func_2433(%var_2432: Tensor[(672), int16]) -> (Tensor[(5, 10, 6), uint16], Tensor[(182, 14), int16], Tensor[(288), float64], Tensor[(672), int16], Tensor[(5, 10, 6), bool]) {
  %827 = fn (%var_2419: Tensor[(672), int16]) -> (Tensor[(5, 10, 6), uint16], Tensor[(182, 14), int16], Tensor[(288), float64], Tensor[(672), int16], Tensor[(5, 10, 6), bool]) {
    %815 = @func_1598() /* ty=(Tensor[(5, 10, 6), uint16], Tensor[(6, 2, 13), uint32]) */;
    %816 = cast(meta[relay.Constant][45] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
    %817 = cast(meta[relay.Constant][45] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
    %818 = cast(%var_2419, dtype="int16") /* ty=Tensor[(672), int16] */;
    %819 = reshape(%816, newshape=[6, 4, 12]) /* ty=Tensor[(6, 4, 12), float64] */;
    %820 = reshape(%817, newshape=[6, 4, 12]) /* ty=Tensor[(6, 4, 12), float64] */;
    %821 = reshape(%818, newshape=[672]) /* ty=Tensor[(672), int16] */;
    %822 = @func_2263(%819, %820, %821) /* ty=(Tensor[(6, 4, 12), float64], Tensor[(6, 4, 12), int32], Tensor[(6, 4, 12), bool], Tensor[(15, 3, 12), float32], float32, Tensor[(13, 14, 14), int16], Tensor[(182, 14), int16], Tensor[(672), int16]) */;
    %823 = @func_2301() /* ty=(Tensor[(6, 2, 13), uint32], Tensor[(5, 10, 6), bool]) */;
    %824 = %815.0;
    %825 = %822.6;
    %826 = %823.1;
    (%824, %825, meta[relay.Constant][45] /* ty=Tensor[(288), float64] */, %var_2419, %826)
  };
  %827(%var_2432) /* ty=(Tensor[(5, 10, 6), uint16], Tensor[(182, 14), int16], Tensor[(288), float64], Tensor[(672), int16], Tensor[(5, 10, 6), bool]) */
}

def @func_2508() -> (Tensor[(5, 10, 6), bool],) {
  @func_2506() /* ty=(Tensor[(5, 10, 6), bool],) */
}

def @func_6396() -> (Tensor[(5, 10, 6), bool],) {
  %829 = fn () -> (Tensor[(5, 10, 6), bool],) {
    %828 = @func_4883() /* ty=Tensor[(5, 10, 6), bool] */;
    (%828,)
  };
  %829() /* ty=(Tensor[(5, 10, 6), bool],) */
}

def @func_5425(%var_5423: Tensor[(10, 5, 5), float32]) -> Tensor[(10, 5, 5), float32] {
  @func_5422(%var_5423) /* ty=Tensor[(10, 5, 5), float32] */
}

def @func_7941(%var_7940: Tensor[(1664), float64]) -> (Tensor[(5, 10, 6), bool], Tensor[(1664), int32], Tensor[(1664), float64]) {
  %853 = fn (%var_7919: Tensor[(1664), float64]) -> (Tensor[(5, 10, 6), bool], Tensor[(1664), int32], Tensor[(1664), float64]) {
    %830 = @func_7499() /* ty=(Tensor[(5, 10, 6), bool],) */;
    %831 = @func_6363() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(16, 13, 8), int64], Tensor[(1664), int64]) */;
    %832 = %831.2;
    %833 = cast(%832, dtype="float64") /* ty=Tensor[(1664), float64] */;
    %834 = sigmoid(%833) /* ty=Tensor[(1664), float64] */;
    %835 = cast(%var_7919, dtype="float64") /* ty=Tensor[(1664), float64] */;
    %836 = shape_of(%834, dtype="int32") /* ty=Tensor[(1), int32] */;
    %837 = cast(%834, dtype="float64") /* ty=Tensor[(1664), float64] */;
    %838 = dyn.reshape(%835, %836, newshape=[]) /* ty=Tensor[(?), float64] */;
    %839 = add(%837, %838) /* ty=Tensor[(1664), float64] */;
    %840 = cast(%var_7919, dtype="int32") /* ty=Tensor[(1664), int32] */;
    %841 = shape_of(%839, dtype="int32") /* ty=Tensor[(1), int32] */;
    %842 = cast(%839, dtype="int32") /* ty=Tensor[(1664), int32] */;
    %843 = dyn.reshape(%840, %841, newshape=[]) /* ty=Tensor[(?), int32] */;
    %844 = cast(%832, dtype="float32") /* ty=Tensor[(1664), float32] */;
    %845 = shape_of(%834, dtype="int32") /* ty=Tensor[(1), int32] */;
    %846 = cast(%834, dtype="float32") /* ty=Tensor[(1664), float32] */;
    %847 = dyn.reshape(%844, %845, newshape=[]) /* ty=Tensor[(?), float32] */;
    %848 = power(%846, %847) /* ty=Tensor[(1664), float32] */;
    %849 = cast(%848, dtype="float64") /* ty=Tensor[(1664), float64] */;
    %850 = %830.0;
    %851 = maximum(%842, %843) /* ty=Tensor[(1664), int32] */;
    %852 = atanh(%849) /* ty=Tensor[(1664), float64] */;
    (%850, %851, %852)
  };
  %853(%var_7940) /* ty=(Tensor[(5, 10, 6), bool], Tensor[(1664), int32], Tensor[(1664), float64]) */
}

def @func_7852(%var_7850: Tensor[(288), float64], %var_7851: Tensor[(168, 4), int16]) -> (Tensor[(5, 10, 6), bool], Tensor[(182, 14), int16], Tensor[(288), float64], Tensor[(168, 4), int16], Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool]) {
  @func_7848(%var_7850, %var_7851) /* ty=(Tensor[(5, 10, 6), bool], Tensor[(182, 14), int16], Tensor[(288), float64], Tensor[(168, 4), int16], Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool]) */
}

def @func_5129() -> (Tensor[(13, 5, 15), float64],) {
  @func_5127() /* ty=(Tensor[(13, 5, 15), float64],) */
}

def @func_386(%var_385: Tensor[(10, 7, 16), float32]) -> Tensor[(10, 7, 16), float32] {
  %855 = fn (%var_377: Tensor[(10, 7, 16), float32]) -> Tensor[(10, 7, 16), float32] {
    %854 = cast(%var_377, dtype="float32") /* ty=Tensor[(10, 7, 16), float32] */;
    log(%854) /* ty=Tensor[(10, 7, 16), float32] */
  };
  %855(%var_385) /* ty=Tensor[(10, 7, 16), float32] */
}

def @func_6365() -> (Tensor[(5, 10, 6), bool], Tensor[(16, 13, 8), int64], Tensor[(1664), int64]) {
  @func_6363() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(16, 13, 8), int64], Tensor[(1664), int64]) */
}

def @func_4012(%var_3920: Tensor[(1120), float32]) -> (Tensor[(6, 2, 13), uint32], Tensor[(6, 2, 13), int8], Tensor[(6, 2, 13), int8], Tensor[(5, 10, 6), float32], Tensor[(1120), uint64], Tensor[(10, 7, 16), float64], Tensor[(6, 4, 12), float32], Tensor[(5, 8, 16), float32], Tensor[(640), int32]) {
  %856 = @func_1598() /* ty=(Tensor[(5, 10, 6), uint16], Tensor[(6, 2, 13), uint32]) */;
  %857 = %856.1;
  %858 = cast(%857, dtype="uint32") /* ty=Tensor[(6, 2, 13), uint32] */;
  %859 = reshape(%858, newshape=[6, 2, 13]) /* ty=Tensor[(6, 2, 13), uint32] */;
  %860 = @func_3573(%859) /* ty=(Tensor[(6, 2, 13), int8],) */;
  %861 = %860.0;
  %862 = cast(%861, dtype="uint32") /* ty=Tensor[(6, 2, 13), uint32] */;
  %863 = reshape(%862, newshape=[6, 2, 13]) /* ty=Tensor[(6, 2, 13), uint32] */;
  %864 = @func_3573(%863) /* ty=(Tensor[(6, 2, 13), int8],) */;
  %865 = @func_2912() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %866 = %865.0;
  %867 = cast(%866, dtype="float32") /* ty=Tensor[(5, 10, 6), float32] */;
  %868 = cast(%var_3920, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %869 = reshape(%868, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), float32] */;
  %870 = @func_384(%869) /* ty=Tensor[(10, 7, 16), float32] */;
  %871 = cast(%870, dtype="uint64") /* ty=Tensor[(10, 7, 16), uint64] */;
  %872 = shape_of(%var_3920, dtype="int32") /* ty=Tensor[(1), int32] */;
  %873 = cast(%var_3920, dtype="uint64") /* ty=Tensor[(1120), uint64] */;
  %874 = dyn.reshape(%871, %872, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %875 = cast(%870, dtype="float64") /* ty=Tensor[(10, 7, 16), float64] */;
  %876 = cos(%875) /* ty=Tensor[(10, 7, 16), float64] */;
  %877 = cast(%876, dtype="float64") /* ty=Tensor[(10, 7, 16), float64] */;
  %878 = cast(meta[relay.Constant][46] /* ty=Tensor[(640), int32] */, dtype="int32") /* ty=Tensor[(640), int32] */;
  %879 = reshape(%878, newshape=[5, 8, 16]) /* ty=Tensor[(5, 8, 16), int32] */;
  %880 = %864.0;
  %881 = asin(%867) /* ty=Tensor[(5, 10, 6), float32] */;
  %882 = maximum(%873, %874) /* ty=Tensor[(1120), uint64] */;
  %883 = log10(%877) /* ty=Tensor[(10, 7, 16), float64] */;
  %884 = @func_3626() /* ty=Tensor[(6, 4, 12), float32] */;
  %885 = @func_2123(%879) /* ty=Tensor[(5, 8, 16), float32] */;
  (%857, %861, %880, %881, %882, %883, %884, %885, meta[relay.Constant][46] /* ty=Tensor[(640), int32] */)
}

def @func_5569() -> (Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), bool], Tensor[(1, 10), float64]) {
  %886 = @func_3057() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %887 = @func_3057() /* ty=(Tensor[(5, 10, 6), bool],) */;
  %888 = cast(meta[relay.Constant][47] /* ty=Tensor[(1, 10), float64] */, dtype="float64") /* ty=Tensor[(1, 10), float64] */;
  %889 = reshape(%888, newshape=[10]) /* ty=Tensor[(10), float64] */;
  %890 = @func_1333(%889) /* ty=(Tensor[(5, 10, 6), bool], Tensor[(5, 10, 6), float64], Tensor[(6, 14, 8), bool], Tensor[(672), int16], Tensor[(1, 10, 1), float64], Tensor[(10), float64], Tensor[(15, 3, 12), float32], Tensor[(2548), int16], float32) */;
  %891 = %886.0;
  %892 = %887.0;
  %893 = %890.0;
  (%891, %892, %893, meta[relay.Constant][47] /* ty=Tensor[(1, 10), float64] */)
}

def @func_7809(%var_7807: Tensor[(10), float64], %var_7808: Tensor[(132), uint32]) -> (Tensor[(6, 2, 13), float32], Tensor[(5, 10, 6), bool], Tensor[(10, 7, 16), float32], Tensor[(10), float64], Tensor[(132), uint32], Tensor[(5, 10, 6), bool], Tensor[(10, 7, 16), float32], Tensor[(6, 4, 12), float64]) {
  %907 = fn (%var_7760: Tensor[(10), float64], %var_7761: Tensor[(132), uint32]) -> (Tensor[(6, 2, 13), float32], Tensor[(5, 10, 6), bool], Tensor[(10, 7, 16), float32], Tensor[(10), float64], Tensor[(132), uint32], Tensor[(5, 10, 6), bool], Tensor[(10, 7, 16), float32], Tensor[(6, 4, 12), float64]) {
    %894 = @func_4370() /* ty=(Tensor[(5, 10, 6), bool], Tensor[(6, 4, 12), float64]) */;
    %895 = cast(%var_7760, dtype="float64") /* ty=Tensor[(10), float64] */;
    %896 = cast(%var_7761, dtype="uint32") /* ty=Tensor[(132), uint32] */;
    %897 = reshape(%895, newshape=[10]) /* ty=Tensor[(10), float64] */;
    %898 = reshape(%896, newshape=[33, 4]) /* ty=Tensor[(33, 4), uint32] */;
    %899 = @func_2065(%897, %898) /* ty=(Tensor[(10, 7, 16), float32], Tensor[(1120), float32], Tensor[(5, 10, 6), uint16], Tensor[(?, 10, ?), float32], Tensor[(10), float64], Tensor[(5, 10, 6), uint16], Tensor[(2548), int16], Tensor[(4, 3, 11), uint32], Tensor[(33, 4), uint32], Tensor[(6, 4, 12), float32], Tensor[(6, 2, 13), bool]) */;
    %900 = @func_5723() /* ty=(Tensor[(5, 10, 6), bool],) */;
    %901 = @func_6630() /* ty=Tensor[(6, 2, 13), float32] */;
    %902 = %894.0;
    %903 = %899.0;
    %904 = %900.0;
    %905 = @func_3829() /* ty=Tensor[(10, 7, 16), float32] */;
    %906 = @func_6561() /* ty=Tensor[(6, 4, 12), float64] */;
    (%901, %902, %903, %var_7760, %var_7761, %904, %905, %906)
  };
  %907(%var_7807, %var_7808) /* ty=(Tensor[(6, 2, 13), float32], Tensor[(5, 10, 6), bool], Tensor[(10, 7, 16), float32], Tensor[(10), float64], Tensor[(132), uint32], Tensor[(5, 10, 6), bool], Tensor[(10, 7, 16), float32], Tensor[(6, 4, 12), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen365/build/output.py", line 2626, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:10:41] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

