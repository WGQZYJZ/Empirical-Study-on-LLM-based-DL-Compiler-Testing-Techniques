==========mod==========
#[version = "0.0.5"]
def @func_9081(%var_9062: Tensor[(14, 5, 7), float64]) -> (Tensor[(14, 5, 7), float32], Tensor[(2, 14, 9), float64], Tensor[(14, 5, 7), int32]) {
  %0 = @func_7707() /* ty=(Tensor[(14, 5, 7), float32],) */;
  %1 = @func_7123() /* ty=(Tensor[(14, 5, 7), float64], Tensor[(2, 14, 9), float64]) */;
  %2 = @func_6877() /* ty=Tensor[(14, 5, 7), float64] */;
  %3 = cast(%var_9062, dtype="int32") /* ty=Tensor[(14, 5, 7), int32] */;
  %4 = shape_of(%2, dtype="int32") /* ty=Tensor[(3), int32] */;
  %5 = cast(%2, dtype="int32") /* ty=Tensor[(14, 5, 7), int32] */;
  %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %7 = %0.0;
  %8 = %1.1;
  %9 = subtract(%5, %6) /* ty=Tensor[(14, 5, 7), int32] */;
  (%7, %8, %9)
}

def @func_1145(%var_1100: Tensor[(8, 6, 8), float64], %var_1109: Tensor[(1404), float64]) -> (Tensor[(1404), float64], Tensor[(195, 2), bool], Tensor[(8, 6, 8), float32]) {
  %10 = cast(%var_1109, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %11 = cast(meta[relay.Constant][0] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %12 = cast(meta[relay.Constant][0] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %13 = reshape(%10, newshape=[12, 13, 9]) /* ty=Tensor[(12, 13, 9), float64] */;
  %14 = reshape(%11, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
  %15 = reshape(%12, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
  %16 = @func_922(%13, %14, %15) /* ty=(Tensor[(6, 13, 5), float32], Tensor[(12, 13, 9), int32], Tensor[(195, 2), bool]) */;
  %17 = %16.2;
  %18 = cast(meta[relay.Constant][0] /* ty=Tensor[(390), float32] */, dtype="bool") /* ty=Tensor[(390), bool] */;
  %19 = shape_of(%17, dtype="int32") /* ty=Tensor[(2), int32] */;
  %20 = cast(%17, dtype="bool") /* ty=Tensor[(195, 2), bool] */;
  %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %22 = cast(%var_1100, dtype="float64") /* ty=Tensor[(8, 6, 8), float64] */;
  %23 = atan(%22) /* ty=Tensor[(8, 6, 8), float64] */;
  %24 = cast(%23, dtype="float32") /* ty=Tensor[(8, 6, 8), float32] */;
  %25 = equal(%20, %21) /* ty=Tensor[(195, 2), bool] */;
  %26 = log2(%24) /* ty=Tensor[(8, 6, 8), float32] */;
  (%var_1109, %25, %26)
}

def @func_6931() -> (Tensor[(14, 5, 7), float64], Tensor[(12, 10, 13), float32]) {
  %27 = @func_4177() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %28 = @func_4088() /* ty=(Tensor[(12, 10, 13), float32],) */;
  %29 = %27.0;
  %30 = %28.0;
  (%29, %30)
}

def @func_7670(%var_7644: Tensor[(10, 16, 9), uint16], %var_7645: Tensor[(10, 16, 9), uint16]) -> (Tensor[(10, 16, 9), bool], Tensor[(14, 5, 7), float64]) {
  %31 = cast(%var_7645, dtype="bool") /* ty=Tensor[(10, 16, 9), bool] */;
  %32 = shape_of(%var_7644, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(%var_7644, dtype="bool") /* ty=Tensor[(10, 16, 9), bool] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %35 = equal(%33, %34) /* ty=Tensor[(10, 16, 9), bool] */;
  %36 = @func_5216() /* ty=Tensor[(14, 5, 7), float64] */;
  (%35, %36)
}

def @func_4177() -> (Tensor[(14, 5, 7), float64],) {
  %37 = @func_4118() /* ty=(Tensor[(14, 5, 7), float64], Tensor[(12, 10, 13), bool]) */;
  %38 = %37.0;
  (%38,)
}

def @func_8717(%var_8698: Tensor[(1440), uint16]) -> (Tensor[(12, 10, 13), float32], Tensor[(14, 5, 7), float64], Tensor[(14, 5, 7), float64], Tensor[(1440), uint16], Tensor[(14, 5, 7), float64]) {
  %39 = @func_6441() /* ty=(Tensor[(2, 14, 9), float64], Tensor[(12, 10, 13), float32]) */;
  %40 = @func_8322() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %41 = cast(%var_8698, dtype="uint16") /* ty=Tensor[(1440), uint16] */;
  %42 = cast(%var_8698, dtype="uint16") /* ty=Tensor[(1440), uint16] */;
  %43 = reshape(%41, newshape=[10, 16, 9]) /* ty=Tensor[(10, 16, 9), uint16] */;
  %44 = reshape(%42, newshape=[10, 16, 9]) /* ty=Tensor[(10, 16, 9), uint16] */;
  %45 = @func_7670(%43, %44) /* ty=(Tensor[(10, 16, 9), bool], Tensor[(14, 5, 7), float64]) */;
  %46 = @func_6387() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %47 = %39.1;
  %48 = %40.0;
  %49 = %45.1;
  %50 = %46.0;
  (%47, %48, %49, %var_8698, %50)
}

def @func_5694(%var_5635: Tensor[(702, 2), float64], %var_5664: Tensor[(676), int8]) -> (Tensor[(12, 10, 13), float32], Tensor[(384), float64], Tensor[(702, 2), uint64], Tensor[(702, 2), float64], Tensor[(12, 10, 13), bool], Tensor[(12, 10, 13), float32], Tensor[(676), int8], Tensor[(702, 2), bool], Tensor[(702, 2), int32], Tensor[(1404), float64], Tensor[(480), float64], Tensor[(1872), float64], Tensor[(702, 2), bool]) {
  %51 = @func_4825() /* ty=(Tensor[(12, 10, 13), float32],) */;
  %52 = cast(meta[relay.Constant][1] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %53 = cast(meta[relay.Constant][2] /* ty=Tensor[(702, 2), float64] */, dtype="float64") /* ty=Tensor[(702, 2), float64] */;
  %54 = reshape(%52, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %55 = reshape(%53, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
  %56 = @func_4530(%54, %55) /* ty=(Tensor[(12, 10, 13), bool], Tensor[(195, 2), bool], Tensor[(384), float64], Tensor[(1404), float64]) */;
  %57 = %56.3;
  %58 = cast(%57, dtype="uint64") /* ty=Tensor[(1404), uint64] */;
  %59 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(702, 2), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %60 = cast(meta[relay.Constant][2] /* ty=Tensor[(702, 2), float64] */, dtype="uint64") /* ty=Tensor[(702, 2), uint64] */;
  %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %62 = cast(%var_5635, dtype="float64") /* ty=Tensor[(702, 2), float64] */;
  %63 = %51.0;
  %64 = cast(%63, dtype="bool") /* ty=Tensor[(12, 10, 13), bool] */;
  %65 = cast(%63, dtype="bool") /* ty=Tensor[(12, 10, 13), bool] */;
  %66 = reshape(%64, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), bool] */;
  %67 = reshape(%65, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), bool] */;
  %68 = @func_4767(%66, %67) /* ty=(Tensor[(12, 10, 13), bool], Tensor[(12, 10, 13), int32], Tensor[(6, 13, 5), float32], Tensor[(390), float32], Tensor[(14, 5, 7), float64]) */;
  %69 = cast(%var_5664, dtype="int8") /* ty=Tensor[(676), int8] */;
  %70 = reshape(%69, newshape=[169, 4]) /* ty=Tensor[(169, 4), int8] */;
  %71 = @func_5553(%70) /* ty=(Tensor[(12, 10, 13), float32], Tensor[(936, 2), float64], Tensor[(12, 10, 13), float32], Tensor[(169, 4), int8], Tensor[(6, 13, 5), float32]) */;
  %72 = cast(%var_5635, dtype="float64") /* ty=Tensor[(702, 2), float64] */;
  %73 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(702, 2), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %74 = cast(meta[relay.Constant][2] /* ty=Tensor[(702, 2), float64] */, dtype="float64") /* ty=Tensor[(702, 2), float64] */;
  %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %76 = floor_divide(%74, %75) /* ty=Tensor[(702, 2), float64] */;
  %77 = cast(%var_5635, dtype="bool") /* ty=Tensor[(702, 2), bool] */;
  %78 = shape_of(%76, dtype="int32") /* ty=Tensor[(2), int32] */;
  %79 = cast(%76, dtype="bool") /* ty=Tensor[(702, 2), bool] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %81 = not_equal(%79, %80) /* ty=Tensor[(702, 2), bool] */;
  %82 = cast(%81, dtype="float32") /* ty=Tensor[(702, 2), float32] */;
  %83 = acos(%82) /* ty=Tensor[(702, 2), float32] */;
  %84 = cast(%76, dtype="bool") /* ty=Tensor[(702, 2), bool] */;
  %85 = shape_of(%83, dtype="int32") /* ty=Tensor[(2), int32] */;
  %86 = cast(%83, dtype="bool") /* ty=Tensor[(702, 2), bool] */;
  %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %88 = cast(%81, dtype="int32") /* ty=Tensor[(702, 2), int32] */;
  %89 = shape_of(%83, dtype="int32") /* ty=Tensor[(2), int32] */;
  %90 = cast(%83, dtype="int32") /* ty=Tensor[(702, 2), int32] */;
  %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %92 = cast(meta[relay.Constant][3] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %93 = cast(meta[relay.Constant][4] /* ty=Tensor[(1872), float64] */, dtype="float64") /* ty=Tensor[(1872), float64] */;
  %94 = cast(meta[relay.Constant][1] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %95 = cast(%var_5664, dtype="int8") /* ty=Tensor[(676), int8] */;
  %96 = reshape(%92, newshape=[3, 10, 16]) /* ty=Tensor[(3, 10, 16), float64] */;
  %97 = reshape(%93, newshape=[1872, 1]) /* ty=Tensor[(1872, 1), float64] */;
  %98 = reshape(%94, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %99 = reshape(%95, newshape=[676, 1]) /* ty=Tensor[(676, 1), int8] */;
  %100 = @func_5132(%96, %97, %98, %99) /* ty=(Tensor[(384), float64], Tensor[(1872, 1), float64], Tensor[(384), float64], Tensor[(1404), float64], Tensor[(13, 13, 4), float32], Tensor[(676, 1), int8], Tensor[(12, 10, 13), bool], Tensor[(3, 10, 16), float64], Tensor[(12, 10, 13), float32], Tensor[(3, 10, 16), float32], Tensor[(12, 10, 13), bool]) */;
  %101 = cast(%83, dtype="bool") /* ty=Tensor[(702, 2), bool] */;
  %102 = shape_of(%81, dtype="int32") /* ty=Tensor[(2), int32] */;
  %103 = cast(%81, dtype="bool") /* ty=Tensor[(702, 2), bool] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %105 = logical_xor(%60, %61) /* ty=Tensor[(702, 2), uint64] */;
  %106 = exp(%62) /* ty=Tensor[(702, 2), float64] */;
  %107 = %68.0;
  %108 = %71.2;
  %109 = greater(%86, %87) /* ty=Tensor[(702, 2), bool] */;
  %110 = bitwise_and(%90, %91) /* ty=Tensor[(702, 2), int32] */;
  %111 = %100.3;
  %112 = logical_and(%103, %104) /* ty=Tensor[(702, 2), bool] */;
  (%63, meta[relay.Constant][1] /* ty=Tensor[(384), float64] */, %105, %106, %107, %108, %var_5664, %109, %110, %111, meta[relay.Constant][3] /* ty=Tensor[(480), float64] */, meta[relay.Constant][4] /* ty=Tensor[(1872), float64] */, %112)
}

def @func_6441() -> (Tensor[(2, 14, 9), float64], Tensor[(12, 10, 13), float32]) {
  %113 = cast(meta[relay.Constant][5] /* ty=Tensor[(2, 14, 9), float64] */, dtype="float64") /* ty=Tensor[(2, 14, 9), float64] */;
  %114 = @func_4825() /* ty=(Tensor[(12, 10, 13), float32],) */;
  %115 = atan(%113) /* ty=Tensor[(2, 14, 9), float64] */;
  %116 = %114.0;
  (%115, %116)
}

def @func_5945(%var_5940: Tensor[(6, 9, 16), float32]) -> Tensor[(6, 9, 16), float32] {
  %117 = cast(%var_5940, dtype="float32") /* ty=Tensor[(6, 9, 16), float32] */;
  sigmoid(%117) /* ty=Tensor[(6, 9, 16), float32] */
}

def @func_4556() -> Tensor[(12, 10, 13), bool] {
  @func_4001() /* ty=Tensor[(12, 10, 13), bool] */
}

def @func_6468() -> (Tensor[(14, 5, 7), float64],) {
  %118 = @func_5883() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %119 = %118.0;
  (%119,)
}

def @func_5005(%var_4961: Tensor[(1560), bool], %var_4965: Tensor[(210), int32], %var_4998: Tensor[(270, 2), int8], %var_4999: Tensor[(1404), float64]) -> (Tensor[(15, 2, 7), bool], Tensor[(1, 14), int32], Tensor[(14, 5, 7), bool], Tensor[(12, 10, 13), bool], Tensor[(1560), bool], Tensor[(210), float32], Tensor[(14, 5, 7), float32], Tensor[(13, 13, 4), float32], Tensor[(676, 1), int8], Tensor[(540), int8], Tensor[(270, 2), int8], Tensor[(1404), float64], Tensor[(390), float32]) {
  %120 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 14), int32] */, dtype="int32") /* ty=Tensor[(1, 14), int32] */;
  %121 = cast(meta[relay.Constant][7] /* ty=Tensor[(210), int32] */, dtype="int32") /* ty=Tensor[(210), int32] */;
  %122 = reshape(%120, newshape=[1, 2, 7]) /* ty=Tensor[(1, 2, 7), int32] */;
  %123 = reshape(%121, newshape=[15, 2, 7]) /* ty=Tensor[(15, 2, 7), int32] */;
  %124 = @func_4177() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %125 = %124.0;
  %126 = @func_4177() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %127 = %126.0;
  %128 = cast(%127, dtype="uint64") /* ty=Tensor[(14, 5, 7), uint64] */;
  %129 = shape_of(%125, dtype="int32") /* ty=Tensor[(3), int32] */;
  %130 = cast(%125, dtype="uint64") /* ty=Tensor[(14, 5, 7), uint64] */;
  %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %132 = left_shift(%130, %131) /* ty=Tensor[(14, 5, 7), uint64] */;
  %133 = cast(%127, dtype="bool") /* ty=Tensor[(14, 5, 7), bool] */;
  %134 = shape_of(%132, dtype="int32") /* ty=Tensor[(3), int32] */;
  %135 = cast(%132, dtype="bool") /* ty=Tensor[(14, 5, 7), bool] */;
  %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %137 = cast(%var_4961, dtype="bool") /* ty=Tensor[(1560), bool] */;
  %138 = cast(%var_4961, dtype="bool") /* ty=Tensor[(1560), bool] */;
  %139 = reshape(%137, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), bool] */;
  %140 = reshape(%138, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), bool] */;
  %141 = @func_4767(%139, %140) /* ty=(Tensor[(12, 10, 13), bool], Tensor[(12, 10, 13), int32], Tensor[(6, 13, 5), float32], Tensor[(390), float32], Tensor[(14, 5, 7), float64]) */;
  %142 = cast(%var_4965, dtype="float32") /* ty=Tensor[(210), float32] */;
  %143 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(210), int32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %144 = cast(meta[relay.Constant][7] /* ty=Tensor[(210), int32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?), float32] */;
  %146 = cast(%125, dtype="float32") /* ty=Tensor[(14, 5, 7), float32] */;
  %147 = cast(meta[relay.Constant][8] /* ty=Tensor[(676, 1), int8] */, dtype="int8") /* ty=Tensor[(676, 1), int8] */;
  %148 = reshape(%147, newshape=[13, 13, 4]) /* ty=Tensor[(13, 13, 4), int8] */;
  %149 = @func_2955(%148) /* ty=(Tensor[(13, 13, 4), float64], Tensor[(13, 13, 4), float32]) */;
  %150 = %141.0;
  %151 = cast(%150, dtype="float32") /* ty=Tensor[(12, 10, 13), float32] */;
  %152 = cast(%var_4998, dtype="int8") /* ty=Tensor[(270, 2), int8] */;
  %153 = cast(%var_4999, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %154 = cast(meta[relay.Constant][9] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %155 = reshape(%151, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), float32] */;
  %156 = reshape(%152, newshape=[540]) /* ty=Tensor[(540), int8] */;
  %157 = reshape(%153, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
  %158 = reshape(%154, newshape=[390]) /* ty=Tensor[(390), float32] */;
  %159 = @func_4336(%155, %156, %157, %158) /* ty=(Tensor[(12, 10, 13), float64], Tensor[(1404), float64], Tensor[(540), int8], Tensor[(1404), float64], Tensor[(390), float32]) */;
  %160 = @func_2396(%122, %123) /* ty=Tensor[(15, 2, 7), bool] */;
  %161 = greater(%135, %136) /* ty=Tensor[(14, 5, 7), bool] */;
  %162 = power(%144, %145) /* ty=Tensor[(210), float32] */;
  %163 = asin(%146) /* ty=Tensor[(14, 5, 7), float32] */;
  %164 = %149.1;
  %165 = %159.2;
  (%160, meta[relay.Constant][6] /* ty=Tensor[(1, 14), int32] */, %161, %150, %var_4961, %162, %163, %164, meta[relay.Constant][8] /* ty=Tensor[(676, 1), int8] */, %165, %var_4998, %var_4999, meta[relay.Constant][9] /* ty=Tensor[(390), float32] */)
}

def @func_7047(%var_7042: Tensor[(13, 11, 11), bool], %var_7043: Tensor[(13, 11, 11), bool]) -> Tensor[(13, 11, 11), bool] {
  %166 = cast(%var_7043, dtype="bool") /* ty=Tensor[(13, 11, 11), bool] */;
  %167 = shape_of(%var_7042, dtype="int32") /* ty=Tensor[(3), int32] */;
  %168 = cast(%var_7042, dtype="bool") /* ty=Tensor[(13, 11, 11), bool] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%168, %169) /* ty=Tensor[(13, 11, 11), bool] */
}

def @func_6192(%var_6175: Tensor[(14, 5, 7), float64]) -> (Tensor[(14, 5, 7), uint8],) {
  %170 = @func_6082() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %171 = %170.0;
  %172 = cast(%var_6175, dtype="uint8") /* ty=Tensor[(14, 5, 7), uint8] */;
  %173 = shape_of(%171, dtype="int32") /* ty=Tensor[(3), int32] */;
  %174 = cast(%171, dtype="uint8") /* ty=Tensor[(14, 5, 7), uint8] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %176 = maximum(%174, %175) /* ty=Tensor[(14, 5, 7), uint8] */;
  (%176,)
}

def @func_6877() -> Tensor[(14, 5, 7), float64] {
  %177 = @func_6387() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %177.0
}

def @func_6527() -> (Tensor[(12, 10, 13), float32],) {
  %178 = @func_6260() /* ty=(Tensor[(12, 10, 13), float32], Tensor[(14, 5, 7), float64]) */;
  %179 = %178.0;
  (%179,)
}

def @func_5186() -> (Tensor[(12, 10, 13), bool], Tensor[(384), float64], Tensor[(936, 2), float64], Tensor[(192, 2), float64], Tensor[(1404), float64]) {
  %180 = cast(meta[relay.Constant][10] /* ty=Tensor[(936, 2), float64] */, dtype="float64") /* ty=Tensor[(936, 2), float64] */;
  %181 = cast(meta[relay.Constant][11] /* ty=Tensor[(192, 2), float64] */, dtype="float64") /* ty=Tensor[(192, 2), float64] */;
  %182 = cast(meta[relay.Constant][12] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %183 = reshape(%180, newshape=[12, 13, 12]) /* ty=Tensor[(12, 13, 12), float64] */;
  %184 = reshape(%181, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %185 = reshape(%182, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
  %186 = @func_4670(%183, %184, %185) /* ty=(Tensor[(12, 13, 12), bool], Tensor[(12, 13, 12), float32], Tensor[(8, 6, 8), float32], Tensor[(384), float64], Tensor[(1404), float64], Tensor[(240), float64], Tensor[(390), float32], Tensor[(1456), float32]) */;
  %187 = @func_4001() /* ty=Tensor[(12, 10, 13), bool] */;
  %188 = %186.3;
  (%187, %188, meta[relay.Constant][10] /* ty=Tensor[(936, 2), float64] */, meta[relay.Constant][11] /* ty=Tensor[(192, 2), float64] */, meta[relay.Constant][12] /* ty=Tensor[(1404), float64] */)
}

def @func_7556(%var_7507: Tensor[(864), float32], %var_7511: Tensor[(676), int8], %var_7519: Tensor[(676), int8]) -> (Tensor[(12, 10, 13), bool], Tensor[(14, 5, 7), float64], Tensor[(864), float32], Tensor[(12, 10, 13), float32], Tensor[(676), float64], Tensor[(676), float32], Tensor[(14, 5, 7), float64], Tensor[(676), int64]) {
  %189 = cast(%var_7507, dtype="float32") /* ty=Tensor[(864), float32] */;
  %190 = reshape(%189, newshape=[864]) /* ty=Tensor[(864), float32] */;
  %191 = @func_6028(%190) /* ty=(Tensor[(14, 5, 7), float64], Tensor[(6, 9, 16), float32], Tensor[(864), float32]) */;
  %192 = cast(%var_7511, dtype="int8") /* ty=Tensor[(676), int8] */;
  %193 = reshape(%192, newshape=[13, 52]) /* ty=Tensor[(13, 52), int8] */;
  %194 = @func_4909(%193) /* ty=(Tensor[(12, 10, 13), float32], Tensor[(13, 13, 4), float32], Tensor[(13, 52), int8]) */;
  %195 = cast(%var_7519, dtype="float64") /* ty=Tensor[(676), float64] */;
  %196 = cast(%var_7519, dtype="float32") /* ty=Tensor[(676), float32] */;
  %197 = @func_4177() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %198 = cast(%var_7519, dtype="uint8") /* ty=Tensor[(676), uint8] */;
  %199 = shape_of(%var_7511, dtype="int32") /* ty=Tensor[(1), int32] */;
  %200 = cast(%var_7511, dtype="uint8") /* ty=Tensor[(676), uint8] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %202 = bitwise_and(%200, %201) /* ty=Tensor[(676), uint8] */;
  %203 = cast(%var_7519, dtype="int64") /* ty=Tensor[(676), int64] */;
  %204 = shape_of(%202, dtype="int32") /* ty=Tensor[(1), int32] */;
  %205 = cast(%202, dtype="int64") /* ty=Tensor[(676), int64] */;
  %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?), int64] */;
  %207 = @func_4001() /* ty=Tensor[(12, 10, 13), bool] */;
  %208 = %191.0;
  %209 = %194.0;
  %210 = sigmoid(%195) /* ty=Tensor[(676), float64] */;
  %211 = erf(%196) /* ty=Tensor[(676), float32] */;
  %212 = %197.0;
  %213 = right_shift(%205, %206) /* ty=Tensor[(676), int64] */;
  (%207, %208, %var_7507, %209, %210, %211, %212, %213)
}

def @func_8668(%var_8592: Tensor[(390), float32], %var_8655: Tensor[(56, 26), float64]) -> (Tensor[(14, 5, 7), float64], Tensor[(195, 2), float64], Tensor[(702, 2), uint64], Tensor[(676), int8], Tensor[(14, 5, 7), float64], Tensor[(1404), bool], Tensor[(13, 8, 14), float64], Tensor[(56, 26), float64], Tensor[(14, 5, 7), float64], Tensor[(384), float64]) {
  %214 = @func_5883() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %215 = cast(meta[relay.Constant][13] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %216 = cast(%var_8592, dtype="float32") /* ty=Tensor[(390), float32] */;
  %217 = cast(%var_8592, dtype="float32") /* ty=Tensor[(390), float32] */;
  %218 = reshape(%215, newshape=[12, 13, 9]) /* ty=Tensor[(12, 13, 9), float64] */;
  %219 = reshape(%216, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
  %220 = reshape(%217, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
  %221 = @func_922(%218, %219, %220) /* ty=(Tensor[(6, 13, 5), float32], Tensor[(12, 13, 9), int32], Tensor[(195, 2), bool]) */;
  %222 = %221.2;
  %223 = cast(%var_8592, dtype="uint8") /* ty=Tensor[(390), uint8] */;
  %224 = shape_of(%222, dtype="int32") /* ty=Tensor[(2), int32] */;
  %225 = cast(%222, dtype="uint8") /* ty=Tensor[(195, 2), uint8] */;
  %226 = dyn.reshape(%223, %224, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %227 = add(%225, %226) /* ty=Tensor[(195, 2), uint8] */;
  %228 = cast(%227, dtype="float64") /* ty=Tensor[(195, 2), float64] */;
  %229 = shape_of(%222, dtype="int32") /* ty=Tensor[(2), int32] */;
  %230 = cast(%222, dtype="float64") /* ty=Tensor[(195, 2), float64] */;
  %231 = dyn.reshape(%228, %229, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %232 = cast(meta[relay.Constant][13] /* ty=Tensor[(1404), float64] */, dtype="float32") /* ty=Tensor[(1404), float32] */;
  %233 = sigmoid(%232) /* ty=Tensor[(1404), float32] */;
  %234 = cast(%233, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %235 = cast(meta[relay.Constant][14] /* ty=Tensor[(676), int8] */, dtype="int8") /* ty=Tensor[(676), int8] */;
  %236 = reshape(%234, newshape=[702, 2]) /* ty=Tensor[(702, 2), float64] */;
  %237 = reshape(%235, newshape=[676]) /* ty=Tensor[(676), int8] */;
  %238 = @func_5694(%236, %237) /* ty=(Tensor[(12, 10, 13), float32], Tensor[(384), float64], Tensor[(702, 2), uint64], Tensor[(702, 2), float64], Tensor[(12, 10, 13), bool], Tensor[(12, 10, 13), float32], Tensor[(676), int8], Tensor[(702, 2), bool], Tensor[(702, 2), int32], Tensor[(1404), float64], Tensor[(480), float64], Tensor[(1872), float64], Tensor[(702, 2), bool]) */;
  %239 = @func_6931() /* ty=(Tensor[(14, 5, 7), float64], Tensor[(12, 10, 13), float32]) */;
  %240 = cast(meta[relay.Constant][13] /* ty=Tensor[(1404), float64] */, dtype="bool") /* ty=Tensor[(1404), bool] */;
  %241 = shape_of(%233, dtype="int32") /* ty=Tensor[(1), int32] */;
  %242 = cast(%233, dtype="bool") /* ty=Tensor[(1404), bool] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?), bool] */;
  %244 = cast(%var_8655, dtype="float64") /* ty=Tensor[(56, 26), float64] */;
  %245 = reshape(%244, newshape=[13, 8, 14]) /* ty=Tensor[(13, 8, 14), float64] */;
  %246 = cast(%227, dtype="float32") /* ty=Tensor[(195, 2), float32] */;
  %247 = reshape(%246, newshape=[390]) /* ty=Tensor[(390), float32] */;
  %248 = @func_6680(%247) /* ty=(Tensor[(14, 5, 7), float64], Tensor[(240), float64], Tensor[(390), float32], Tensor[(15, 8, 2), float64]) */;
  %249 = @func_5186() /* ty=(Tensor[(12, 10, 13), bool], Tensor[(384), float64], Tensor[(936, 2), float64], Tensor[(192, 2), float64], Tensor[(1404), float64]) */;
  %250 = %214.0;
  %251 = minimum(%230, %231) /* ty=Tensor[(195, 2), float64] */;
  %252 = %238.2;
  %253 = %239.0;
  %254 = equal(%242, %243) /* ty=Tensor[(1404), bool] */;
  %255 = @func_1007(%245) /* ty=Tensor[(13, 8, 14), float64] */;
  %256 = %248.0;
  %257 = %249.1;
  (%250, %251, %252, meta[relay.Constant][14] /* ty=Tensor[(676), int8] */, %253, %254, %255, %var_8655, %256, %257)
}

def @func_1289(%var_1274: Tensor[(9, 3, 6), uint8], %var_1275: Tensor[(9, 3, 6), uint8]) -> Tensor[(9, 3, 6), uint8] {
  %258 = cast(%var_1275, dtype="uint8") /* ty=Tensor[(9, 3, 6), uint8] */;
  %259 = shape_of(%var_1274, dtype="int32") /* ty=Tensor[(3), int32] */;
  %260 = cast(%var_1274, dtype="uint8") /* ty=Tensor[(9, 3, 6), uint8] */;
  %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_or(%260, %261) /* ty=Tensor[(9, 3, 6), uint8] */
}

def @func_6795() -> Tensor[(14, 5, 7), float32] {
  %262 = @func_5584() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %263 = %262.0;
  %264 = cast(%263, dtype="float32") /* ty=Tensor[(14, 5, 7), float32] */;
  sigmoid(%264) /* ty=Tensor[(14, 5, 7), float32] */
}

def @func_1369(%var_1344: Tensor[(2, 8, 7), uint64], %var_1345: Tensor[(2, 8, 7), uint64]) -> (Tensor[(2, 8, 7), uint64], Tensor[(2, 8, 7), bool]) {
  %265 = cast(%var_1345, dtype="bool") /* ty=Tensor[(2, 8, 7), bool] */;
  %266 = shape_of(%var_1344, dtype="int32") /* ty=Tensor[(3), int32] */;
  %267 = cast(%var_1344, dtype="bool") /* ty=Tensor[(2, 8, 7), bool] */;
  %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %269 = equal(%267, %268) /* ty=Tensor[(2, 8, 7), bool] */;
  %270 = cast(%269, dtype="uint64") /* ty=Tensor[(2, 8, 7), uint64] */;
  %271 = shape_of(%var_1345, dtype="int32") /* ty=Tensor[(3), int32] */;
  %272 = cast(%var_1345, dtype="uint64") /* ty=Tensor[(2, 8, 7), uint64] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %274 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 8, 7), bool] */, dtype="bool") /* ty=Tensor[(2, 8, 7), bool] */;
  %275 = shape_of(%269, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(%269, dtype="bool") /* ty=Tensor[(2, 8, 7), bool] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %278 = right_shift(%272, %273) /* ty=Tensor[(2, 8, 7), uint64] */;
  %279 = less(%276, %277) /* ty=Tensor[(2, 8, 7), bool] */;
  (%278, %279)
}

def @func_7469() -> (Tensor[(14, 5, 7), float64],) {
  %280 = @func_5883() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %281 = %280.0;
  (%281,)
}

def @func_6028(%var_6025: Tensor[(864), float32]) -> (Tensor[(14, 5, 7), float64], Tensor[(6, 9, 16), float32], Tensor[(864), float32]) {
  %282 = @func_5875() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %283 = cast(%var_6025, dtype="float32") /* ty=Tensor[(864), float32] */;
  %284 = reshape(%283, newshape=[6, 9, 16]) /* ty=Tensor[(6, 9, 16), float32] */;
  %285 = %282.0;
  %286 = @func_5945(%284) /* ty=Tensor[(6, 9, 16), float32] */;
  (%285, %286, %var_6025)
}

def @func_5875() -> (Tensor[(14, 5, 7), float64],) {
  %287 = @func_4118() /* ty=(Tensor[(14, 5, 7), float64], Tensor[(12, 10, 13), bool]) */;
  %288 = %287.0;
  (%288,)
}

def @func_6387() -> (Tensor[(14, 5, 7), float64],) {
  %289 = @func_5875() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %290 = %289.0;
  (%290,)
}

def @func_3712(%var_3699: Tensor[(11, 15, 5), float64]) -> (Tensor[(13, 13, 4), float64], Tensor[(676), int8], Tensor[(11, 15, 5), float64]) {
  %291 = cast(meta[relay.Constant][16] /* ty=Tensor[(676), int8] */, dtype="int8") /* ty=Tensor[(676), int8] */;
  %292 = reshape(%291, newshape=[13, 13, 4]) /* ty=Tensor[(13, 13, 4), int8] */;
  %293 = @func_2955(%292) /* ty=(Tensor[(13, 13, 4), float64], Tensor[(13, 13, 4), float32]) */;
  %294 = cast(%var_3699, dtype="float64") /* ty=Tensor[(11, 15, 5), float64] */;
  %295 = rsqrt(%294) /* ty=Tensor[(11, 15, 5), float64] */;
  %296 = cast(%295, dtype="float64") /* ty=Tensor[(11, 15, 5), float64] */;
  %297 = %293.0;
  %298 = erf(%296) /* ty=Tensor[(11, 15, 5), float64] */;
  (%297, meta[relay.Constant][16] /* ty=Tensor[(676), int8] */, %298)
}

def @func_4336(%var_4281: Tensor[(12, 10, 13), float32], %var_4310: Tensor[(540), int8], %var_4311: Tensor[(1404), float64], %var_4312: Tensor[(390), float32]) -> (Tensor[(12, 10, 13), float64], Tensor[(1404), float64], Tensor[(540), int8], Tensor[(1404), float64], Tensor[(390), float32]) {
  %299 = @func_4088() /* ty=(Tensor[(12, 10, 13), float32],) */;
  %300 = %299.0;
  %301 = cast(%var_4281, dtype="float64") /* ty=Tensor[(12, 10, 13), float64] */;
  %302 = shape_of(%300, dtype="int32") /* ty=Tensor[(3), int32] */;
  %303 = cast(%300, dtype="float64") /* ty=Tensor[(12, 10, 13), float64] */;
  %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %305 = cast(%var_4310, dtype="int8") /* ty=Tensor[(540), int8] */;
  %306 = cast(%var_4310, dtype="int8") /* ty=Tensor[(540), int8] */;
  %307 = cast(%var_4311, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %308 = cast(%var_4312, dtype="float32") /* ty=Tensor[(390), float32] */;
  %309 = reshape(%305, newshape=[15, 6, 6]) /* ty=Tensor[(15, 6, 6), int8] */;
  %310 = reshape(%306, newshape=[15, 6, 6]) /* ty=Tensor[(15, 6, 6), int8] */;
  %311 = reshape(%307, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
  %312 = reshape(%308, newshape=[390]) /* ty=Tensor[(390), float32] */;
  %313 = @func_1257(%309, %310, %311, %312) /* ty=(Tensor[(15, 6, 6), int8], Tensor[(12, 13, 9), int32], Tensor[(1404), float64], Tensor[(390), float32]) */;
  %314 = mod(%303, %304) /* ty=Tensor[(12, 10, 13), float64] */;
  %315 = %313.2;
  (%314, %315, %var_4310, %var_4311, %var_4312)
}

def @func_6260() -> (Tensor[(12, 10, 13), float32], Tensor[(14, 5, 7), float64]) {
  %316 = @func_4088() /* ty=(Tensor[(12, 10, 13), float32],) */;
  %317 = @func_6082() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %318 = %316.0;
  %319 = %317.0;
  (%318, %319)
}

def @func_6621(%var_6590: Tensor[(16, 11, 1), bool], %var_6591: Tensor[(16, 11, 14), bool], %var_6602: Tensor[(16, 11, 14), bool]) -> (Tensor[(16, 11, 14), bool], Tensor[(16, 11, 14), int64]) {
  %320 = cast(%var_6590, dtype="bool") /* ty=Tensor[(16, 11, 1), bool] */;
  %321 = cast(%var_6591, dtype="bool") /* ty=Tensor[(16, 11, 14), bool] */;
  %322 = cast(%var_6590, dtype="float64") /* ty=Tensor[(16, 11, 1), float64] */;
  %323 = cast(%var_6602, dtype="float64") /* ty=Tensor[(16, 11, 14), float64] */;
  %324 = mod(%322, %323) /* ty=Tensor[(16, 11, 14), float64] */;
  %325 = cast(%var_6590, dtype="int64") /* ty=Tensor[(16, 11, 1), int64] */;
  %326 = cast(%324, dtype="int64") /* ty=Tensor[(16, 11, 14), int64] */;
  %327 = logical_or(%320, %321) /* ty=Tensor[(16, 11, 14), bool] */;
  %328 = bitwise_xor(%325, %326) /* ty=Tensor[(16, 11, 14), int64] */;
  (%327, %328)
}

def @func_7878() -> (Tensor[(12, 10, 13), float32],) {
  %329 = @func_4825() /* ty=(Tensor[(12, 10, 13), float32],) */;
  %330 = %329.0;
  (%330,)
}

def @func_8438() -> (Tensor[(936, 2), float64], Tensor[(14, 5, 7), float64], Tensor[(1404), float64], Tensor[(1, 1404), float64]) {
  %331 = @func_6731() /* ty=(Tensor[(936, 2), float64],) */;
  %332 = @func_7469() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %333 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 1404), float64] */, dtype="float64") /* ty=Tensor[(1, 1404), float64] */;
  %334 = reshape(%333, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
  %335 = @func_7451(%334) /* ty=(Tensor[(936, 2), float64], Tensor[(390), int32], Tensor[(1404), float64]) */;
  %336 = %331.0;
  %337 = %332.0;
  %338 = %335.2;
  (%336, %337, %338, meta[relay.Constant][17] /* ty=Tensor[(1, 1404), float64] */)
}

def @func_2049(%var_2037: bool, %var_2038: Tensor[(8, 6, 16), bool]) -> Tensor[(8, 6, 16), float32] {
  %339 = cast(%var_2037, dtype="bool") /* ty=bool */;
  %340 = cast(%var_2038, dtype="bool") /* ty=Tensor[(8, 6, 16), bool] */;
  %341 = logical_and(%339, %340) /* ty=Tensor[(8, 6, 16), bool] */;
  %342 = cast(%341, dtype="float32") /* ty=Tensor[(8, 6, 16), float32] */;
  log2(%342) /* ty=Tensor[(8, 6, 16), float32] */
}

def @func_5132(%var_5057: Tensor[(3, 10, 16), float64], %var_5081: Tensor[(1872, 1), float64], %var_5082: Tensor[(384), float64], %var_5088: Tensor[(676, 1), int8]) -> (Tensor[(384), float64], Tensor[(1872, 1), float64], Tensor[(384), float64], Tensor[(1404), float64], Tensor[(13, 13, 4), float32], Tensor[(676, 1), int8], Tensor[(12, 10, 13), bool], Tensor[(3, 10, 16), float64], Tensor[(12, 10, 13), float32], Tensor[(3, 10, 16), float32], Tensor[(12, 10, 13), bool]) {
  %343 = cast(%var_5081, dtype="float64") /* ty=Tensor[(1872, 1), float64] */;
  %344 = cast(%var_5082, dtype="float64") /* ty=Tensor[(384), float64] */;
  %345 = cast(meta[relay.Constant][18] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %346 = reshape(%343, newshape=[12, 13, 12]) /* ty=Tensor[(12, 13, 12), float64] */;
  %347 = reshape(%344, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %348 = reshape(%345, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
  %349 = @func_4670(%346, %347, %348) /* ty=(Tensor[(12, 13, 12), bool], Tensor[(12, 13, 12), float32], Tensor[(8, 6, 8), float32], Tensor[(384), float64], Tensor[(1404), float64], Tensor[(240), float64], Tensor[(390), float32], Tensor[(1456), float32]) */;
  %350 = cast(%var_5088, dtype="int8") /* ty=Tensor[(676, 1), int8] */;
  %351 = reshape(%350, newshape=[13, 13, 4]) /* ty=Tensor[(13, 13, 4), int8] */;
  %352 = @func_2955(%351) /* ty=(Tensor[(13, 13, 4), float64], Tensor[(13, 13, 4), float32]) */;
  %353 = cast(%var_5057, dtype="float64") /* ty=Tensor[(3, 10, 16), float64] */;
  %354 = cos(%353) /* ty=Tensor[(3, 10, 16), float64] */;
  %355 = cast(%354, dtype="float32") /* ty=Tensor[(3, 10, 16), float32] */;
  %356 = log2(%355) /* ty=Tensor[(3, 10, 16), float32] */;
  %357 = cast(%var_5057, dtype="float64") /* ty=Tensor[(3, 10, 16), float64] */;
  %358 = shape_of(%356, dtype="int32") /* ty=Tensor[(3), int32] */;
  %359 = cast(%356, dtype="float64") /* ty=Tensor[(3, 10, 16), float64] */;
  %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %361 = cast(%var_5088, dtype="int8") /* ty=Tensor[(676, 1), int8] */;
  %362 = reshape(%361, newshape=[13, 52]) /* ty=Tensor[(13, 52), int8] */;
  %363 = @func_4909(%362) /* ty=(Tensor[(12, 10, 13), float32], Tensor[(13, 13, 4), float32], Tensor[(13, 52), int8]) */;
  %364 = cast(%354, dtype="float32") /* ty=Tensor[(3, 10, 16), float32] */;
  %365 = %349.3;
  %366 = %352.1;
  %367 = @func_4556() /* ty=Tensor[(12, 10, 13), bool] */;
  %368 = subtract(%359, %360) /* ty=Tensor[(3, 10, 16), float64] */;
  %369 = %363.0;
  %370 = log10(%364) /* ty=Tensor[(3, 10, 16), float32] */;
  %371 = @func_4001() /* ty=Tensor[(12, 10, 13), bool] */;
  (%365, %var_5081, %var_5082, meta[relay.Constant][18] /* ty=Tensor[(1404), float64] */, %366, %var_5088, %367, %368, %369, %370, %371)
}

def @func_7707() -> (Tensor[(14, 5, 7), float32],) {
  %372 = @func_6153() /* ty=(Tensor[(14, 5, 7), float64], Tensor[(12, 10, 13), float32], Tensor[(14, 5, 7), float64]) */;
  %373 = %372.2;
  %374 = cast(meta[relay.Constant][19] /* ty=Tensor[(14, 5, 7), float64] */, dtype="float32") /* ty=Tensor[(14, 5, 7), float32] */;
  %375 = shape_of(%373, dtype="int32") /* ty=Tensor[(3), int32] */;
  %376 = cast(%373, dtype="float32") /* ty=Tensor[(14, 5, 7), float32] */;
  %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %378 = floor_mod(%376, %377) /* ty=Tensor[(14, 5, 7), float32] */;
  (%378,)
}

def @func_2396(%var_2386: Tensor[(1, 2, 7), int32], %var_2387: Tensor[(15, 2, 7), int32]) -> Tensor[(15, 2, 7), bool] {
  %379 = cast(%var_2386, dtype="int32") /* ty=Tensor[(1, 2, 7), int32] */;
  %380 = cast(%var_2387, dtype="int32") /* ty=Tensor[(15, 2, 7), int32] */;
  %381 = maximum(%379, %380) /* ty=Tensor[(15, 2, 7), int32] */;
  %382 = cast(%var_2386, dtype="bool") /* ty=Tensor[(1, 2, 7), bool] */;
  %383 = cast(%381, dtype="bool") /* ty=Tensor[(15, 2, 7), bool] */;
  less(%382, %383) /* ty=Tensor[(15, 2, 7), bool] */
}

def @func_4596(%var_4581: Tensor[(7, 14, 8), int32], %var_4582: Tensor[(7, 14, 8), int32]) -> (Tensor[(7, 14, 8), bool],) {
  %384 = cast(%var_4582, dtype="bool") /* ty=Tensor[(7, 14, 8), bool] */;
  %385 = shape_of(%var_4581, dtype="int32") /* ty=Tensor[(3), int32] */;
  %386 = cast(%var_4581, dtype="bool") /* ty=Tensor[(7, 14, 8), bool] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %388 = equal(%386, %387) /* ty=Tensor[(7, 14, 8), bool] */;
  (%388,)
}

def @func_8781() -> (Tensor[(15, 7, 2), float64], Tensor[(384), float64], Tensor[(15, 7, 2), float64], Tensor[(14, 5, 7), float64]) {
  %389 = cast(meta[relay.Constant][20] /* ty=Tensor[(15, 7, 2), float64] */, dtype="float64") /* ty=Tensor[(15, 7, 2), float64] */;
  %390 = @func_5821() /* ty=(Tensor[(384), float64],) */;
  %391 = cast(meta[relay.Constant][20] /* ty=Tensor[(15, 7, 2), float64] */, dtype="float64") /* ty=Tensor[(15, 7, 2), float64] */;
  %392 = sigmoid(%391) /* ty=Tensor[(15, 7, 2), float64] */;
  %393 = cast(%392, dtype="float32") /* ty=Tensor[(15, 7, 2), float32] */;
  %394 = asin(%393) /* ty=Tensor[(15, 7, 2), float32] */;
  %395 = cast(%394, dtype="float64") /* ty=Tensor[(15, 7, 2), float64] */;
  %396 = log(%389) /* ty=Tensor[(15, 7, 2), float64] */;
  %397 = %390.0;
  %398 = erf(%395) /* ty=Tensor[(15, 7, 2), float64] */;
  %399 = @func_8201() /* ty=Tensor[(14, 5, 7), float64] */;
  (%396, %397, %398, %399)
}

def @func_8959() -> Tensor[(14, 5, 7), float64] {
  %400 = @func_8781() /* ty=(Tensor[(15, 7, 2), float64], Tensor[(384), float64], Tensor[(15, 7, 2), float64], Tensor[(14, 5, 7), float64]) */;
  %400.3
}

def @func_6680(%var_6673: Tensor[(390), float32]) -> (Tensor[(14, 5, 7), float64], Tensor[(240), float64], Tensor[(390), float32], Tensor[(15, 8, 2), float64]) {
  %401 = cast(meta[relay.Constant][21] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %402 = cast(%var_6673, dtype="float32") /* ty=Tensor[(390), float32] */;
  %403 = reshape(%401, newshape=[15, 8, 2]) /* ty=Tensor[(15, 8, 2), float64] */;
  %404 = reshape(%402, newshape=[390, 1]) /* ty=Tensor[(390, 1), float32] */;
  %405 = @func_1214(%403, %404) /* ty=(Tensor[(15, 8, 2), float64], Tensor[(13, 8, 14), float64], Tensor[(1456), float64], Tensor[(12, 13, 9), int32], Tensor[(1404), float64], Tensor[(390, 1), float32]) */;
  %406 = %405.0;
  %407 = cast(%406, dtype="float64") /* ty=Tensor[(15, 8, 2), float64] */;
  %408 = @func_6456() /* ty=Tensor[(14, 5, 7), float64] */;
  %409 = atanh(%407) /* ty=Tensor[(15, 8, 2), float64] */;
  (%408, meta[relay.Constant][21] /* ty=Tensor[(240), float64] */, %var_6673, %409)
}

def @func_7123() -> (Tensor[(14, 5, 7), float64], Tensor[(2, 14, 9), float64]) {
  %410 = @func_6387() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %411 = @func_6441() /* ty=(Tensor[(2, 14, 9), float64], Tensor[(12, 10, 13), float32]) */;
  %412 = %410.0;
  %413 = %411.0;
  (%412, %413)
}

def @func_5216() -> Tensor[(14, 5, 7), float64] {
  %414 = @func_4177() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %414.0
}

def @func_8322() -> (Tensor[(14, 5, 7), float64],) {
  %415 = @func_6877() /* ty=Tensor[(14, 5, 7), float64] */;
  (%415,)
}

def @func_4057(%var_4031: Tensor[(12, 11, 9), float32], %var_4049: Tensor[(384), float64], %var_4050: Tensor[(1404), float64]) -> (Tensor[(12, 11, 9), float32], Tensor[(12, 11, 9), float32], Tensor[(1404), float64], Tensor[(384), float64], Tensor[(1404), float64], Tensor[(1404), float64]) {
  %416 = cast(%var_4031, dtype="float32") /* ty=Tensor[(12, 11, 9), float32] */;
  %417 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(12, 11, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(meta[relay.Constant][22] /* ty=Tensor[(12, 11, 9), float32] */, dtype="float32") /* ty=Tensor[(12, 11, 9), float32] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %420 = cast(meta[relay.Constant][22] /* ty=Tensor[(12, 11, 9), float32] */, dtype="float32") /* ty=Tensor[(12, 11, 9), float32] */;
  %421 = shape_of(%var_4031, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(%var_4031, dtype="float32") /* ty=Tensor[(12, 11, 9), float32] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %424 = cast(%var_4049, dtype="float64") /* ty=Tensor[(384), float64] */;
  %425 = cast(%var_4050, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %426 = reshape(%424, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
  %427 = reshape(%425, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
  %428 = @func_1145(%426, %427) /* ty=(Tensor[(1404), float64], Tensor[(195, 2), bool], Tensor[(8, 6, 8), float32]) */;
  %429 = cast(%var_4049, dtype="float64") /* ty=Tensor[(384), float64] */;
  %430 = %428.0;
  %431 = cast(%430, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %432 = reshape(%429, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
  %433 = reshape(%431, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
  %434 = @func_1145(%432, %433) /* ty=(Tensor[(1404), float64], Tensor[(195, 2), bool], Tensor[(8, 6, 8), float32]) */;
  %435 = floor_mod(%418, %419) /* ty=Tensor[(12, 11, 9), float32] */;
  %436 = floor_divide(%422, %423) /* ty=Tensor[(12, 11, 9), float32] */;
  %437 = %434.0;
  (%435, %436, %430, %var_4049, %var_4050, %437)
}

def @func_4767(%var_4736: Tensor[(12, 10, 13), bool], %var_4744: Tensor[(12, 10, 13), bool]) -> (Tensor[(12, 10, 13), bool], Tensor[(12, 10, 13), int32], Tensor[(6, 13, 5), float32], Tensor[(390), float32], Tensor[(14, 5, 7), float64]) {
  %438 = @func_4556() /* ty=Tensor[(12, 10, 13), bool] */;
  %439 = cast(%var_4736, dtype="bool") /* ty=Tensor[(12, 10, 13), bool] */;
  %440 = shape_of(%438, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%438, dtype="bool") /* ty=Tensor[(12, 10, 13), bool] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %443 = cast(%var_4744, dtype="int32") /* ty=Tensor[(12, 10, 13), int32] */;
  %444 = shape_of(%var_4736, dtype="int32") /* ty=Tensor[(3), int32] */;
  %445 = cast(%var_4736, dtype="int32") /* ty=Tensor[(12, 10, 13), int32] */;
  %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %447 = cast(meta[relay.Constant][23] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %448 = reshape(%447, newshape=[6, 13, 5]) /* ty=Tensor[(6, 13, 5), float32] */;
  %449 = @func_640(%448) /* ty=(Tensor[(6, 13, 5), float32],) */;
  %450 = @func_4177() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %451 = not_equal(%441, %442) /* ty=Tensor[(12, 10, 13), bool] */;
  %452 = subtract(%445, %446) /* ty=Tensor[(12, 10, 13), int32] */;
  %453 = %449.0;
  %454 = %450.0;
  (%451, %452, %453, meta[relay.Constant][23] /* ty=Tensor[(390), float32] */, %454)
}

def @func_6373(%var_6335: Tensor[(676), int8]) -> (Tensor[(14, 5, 7), float64], Tensor[(702, 2), float64], Tensor[(1404), float64], Tensor[(676), int8], Tensor[(12, 10, 13), float64], Tensor[(936, 2), float64]) {
  %455 = @func_6082() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %456 = cast(meta[relay.Constant][24] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %457 = cast(%var_6335, dtype="int8") /* ty=Tensor[(676), int8] */;
  %458 = reshape(%456, newshape=[702, 2]) /* ty=Tensor[(702, 2), float64] */;
  %459 = reshape(%457, newshape=[676]) /* ty=Tensor[(676), int8] */;
  %460 = @func_5694(%458, %459) /* ty=(Tensor[(12, 10, 13), float32], Tensor[(384), float64], Tensor[(702, 2), uint64], Tensor[(702, 2), float64], Tensor[(12, 10, 13), bool], Tensor[(12, 10, 13), float32], Tensor[(676), int8], Tensor[(702, 2), bool], Tensor[(702, 2), int32], Tensor[(1404), float64], Tensor[(480), float64], Tensor[(1872), float64], Tensor[(702, 2), bool]) */;
  %461 = @func_4001() /* ty=Tensor[(12, 10, 13), bool] */;
  %462 = cast(%461, dtype="float32") /* ty=Tensor[(12, 10, 13), float32] */;
  %463 = acosh(%462) /* ty=Tensor[(12, 10, 13), float32] */;
  %464 = cast(%461, dtype="int16") /* ty=Tensor[(12, 10, 13), int16] */;
  %465 = shape_of(%463, dtype="int32") /* ty=Tensor[(3), int32] */;
  %466 = cast(%463, dtype="int16") /* ty=Tensor[(12, 10, 13), int16] */;
  %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %468 = multiply(%466, %467) /* ty=Tensor[(12, 10, 13), int16] */;
  %469 = cast(%468, dtype="float64") /* ty=Tensor[(12, 10, 13), float64] */;
  %470 = @func_5186() /* ty=(Tensor[(12, 10, 13), bool], Tensor[(384), float64], Tensor[(936, 2), float64], Tensor[(192, 2), float64], Tensor[(1404), float64]) */;
  %471 = %455.0;
  %472 = %460.3;
  %473 = sin(%469) /* ty=Tensor[(12, 10, 13), float64] */;
  %474 = %470.2;
  (%471, %472, meta[relay.Constant][24] /* ty=Tensor[(1404), float64] */, %var_6335, %473, %474)
}

def @func_7756() -> Tensor[(12, 10, 13), float32] {
  %475 = @func_4088() /* ty=(Tensor[(12, 10, 13), float32],) */;
  %475.0
}

def @func_7451(%var_7421: Tensor[(1404), float64]) -> (Tensor[(936, 2), float64], Tensor[(390), int32], Tensor[(1404), float64]) {
  %476 = @func_6731() /* ty=(Tensor[(936, 2), float64],) */;
  %477 = cast(%var_7421, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %478 = cast(meta[relay.Constant][25] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %479 = cast(meta[relay.Constant][25] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %480 = reshape(%477, newshape=[12, 13, 9]) /* ty=Tensor[(12, 13, 9), float64] */;
  %481 = reshape(%478, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
  %482 = reshape(%479, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
  %483 = @func_922(%480, %481, %482) /* ty=(Tensor[(6, 13, 5), float32], Tensor[(12, 13, 9), int32], Tensor[(195, 2), bool]) */;
  %484 = %483.2;
  %485 = cast(%484, dtype="int32") /* ty=Tensor[(195, 2), int32] */;
  %486 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(390), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %487 = cast(meta[relay.Constant][25] /* ty=Tensor[(390), float32] */, dtype="int32") /* ty=Tensor[(390), int32] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?), int32] */;
  %489 = cast(%var_7421, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %490 = %476.0;
  %491 = multiply(%487, %488) /* ty=Tensor[(390), int32] */;
  %492 = sin(%489) /* ty=Tensor[(1404), float64] */;
  (%490, %491, %492)
}

def @func_8090() -> Tensor[(12, 10, 13), bool] {
  @func_4556() /* ty=Tensor[(12, 10, 13), bool] */
}

def @func_5326(%var_5303: Tensor[(825), float64]) -> (Tensor[(12, 10, 13), float32], Tensor[(13, 13, 4), float64], Tensor[(825), float64], Tensor[(12, 10, 13), bool]) {
  %493 = @func_4088() /* ty=(Tensor[(12, 10, 13), float32],) */;
  %494 = cast(%var_5303, dtype="float64") /* ty=Tensor[(825), float64] */;
  %495 = reshape(%494, newshape=[11, 15, 5]) /* ty=Tensor[(11, 15, 5), float64] */;
  %496 = @func_3712(%495) /* ty=(Tensor[(13, 13, 4), float64], Tensor[(676), int8], Tensor[(11, 15, 5), float64]) */;
  %497 = @func_4118() /* ty=(Tensor[(14, 5, 7), float64], Tensor[(12, 10, 13), bool]) */;
  %498 = %493.0;
  %499 = %496.0;
  %500 = %497.1;
  (%498, %499, %var_5303, %500)
}

def @func_7026() -> (Tensor[(14, 5, 7), float64], Tensor[(14, 5, 7), float64]) {
  %501 = @func_6082() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %502 = @func_6456() /* ty=Tensor[(14, 5, 7), float64] */;
  %503 = %501.0;
  (%502, %503)
}

def @func_4118() -> (Tensor[(14, 5, 7), float64], Tensor[(12, 10, 13), bool]) {
  %504 = cast(meta[relay.Constant][26] /* ty=Tensor[(14, 5, 7), float64] */, dtype="float64") /* ty=Tensor[(14, 5, 7), float64] */;
  %505 = atan(%504) /* ty=Tensor[(14, 5, 7), float64] */;
  %506 = @func_4001() /* ty=Tensor[(12, 10, 13), bool] */;
  (%505, %506)
}

def @func_8516(%var_8502: Tensor[(1560), float32], %var_8505: Tensor[(390), float32]) -> (Tensor[(14, 5, 7), float64], Tensor[(540), int8], Tensor[(1560), float32], Tensor[(540), int8], Tensor[(1404), float64], Tensor[(12, 10, 13), bool], Tensor[(390), float64], Tensor[(2, 8, 7), uint64], Tensor[(4, 28), uint64]) {
  %507 = cast(%var_8502, dtype="float32") /* ty=Tensor[(1560), float32] */;
  %508 = cast(meta[relay.Constant][27] /* ty=Tensor[(540), int8] */, dtype="int8") /* ty=Tensor[(540), int8] */;
  %509 = cast(meta[relay.Constant][28] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %510 = cast(%var_8505, dtype="float32") /* ty=Tensor[(390), float32] */;
  %511 = reshape(%507, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), float32] */;
  %512 = reshape(%508, newshape=[540]) /* ty=Tensor[(540), int8] */;
  %513 = reshape(%509, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
  %514 = reshape(%510, newshape=[390]) /* ty=Tensor[(390), float32] */;
  %515 = @func_4336(%511, %512, %513, %514) /* ty=(Tensor[(12, 10, 13), float64], Tensor[(1404), float64], Tensor[(540), int8], Tensor[(1404), float64], Tensor[(390), float32]) */;
  %516 = cast(%var_8505, dtype="float64") /* ty=Tensor[(390), float64] */;
  %517 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 28), uint64] */, dtype="uint64") /* ty=Tensor[(4, 28), uint64] */;
  %518 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 28), uint64] */, dtype="uint64") /* ty=Tensor[(4, 28), uint64] */;
  %519 = reshape(%517, newshape=[2, 8, 7]) /* ty=Tensor[(2, 8, 7), uint64] */;
  %520 = reshape(%518, newshape=[2, 8, 7]) /* ty=Tensor[(2, 8, 7), uint64] */;
  %521 = @func_1369(%519, %520) /* ty=(Tensor[(2, 8, 7), uint64], Tensor[(2, 8, 7), bool]) */;
  %522 = @func_8057() /* ty=Tensor[(14, 5, 7), float64] */;
  %523 = %515.2;
  %524 = @func_8090() /* ty=Tensor[(12, 10, 13), bool] */;
  %525 = erf(%516) /* ty=Tensor[(390), float64] */;
  %526 = %521.0;
  (%522, %523, %var_8502, meta[relay.Constant][27] /* ty=Tensor[(540), int8] */, meta[relay.Constant][28] /* ty=Tensor[(1404), float64] */, %524, %525, %526, meta[relay.Constant][29] /* ty=Tensor[(4, 28), uint64] */)
}

def @func_4909(%var_4883: Tensor[(13, 52), int8]) -> (Tensor[(12, 10, 13), float32], Tensor[(13, 13, 4), float32], Tensor[(13, 52), int8]) {
  %527 = @func_4118() /* ty=(Tensor[(14, 5, 7), float64], Tensor[(12, 10, 13), bool]) */;
  %528 = %527.1;
  %529 = cast(meta[relay.Constant][30] /* ty=Tensor[(12, 10, 13), bool] */, dtype="float32") /* ty=Tensor[(12, 10, 13), float32] */;
  %530 = shape_of(%528, dtype="int32") /* ty=Tensor[(3), int32] */;
  %531 = cast(%528, dtype="float32") /* ty=Tensor[(12, 10, 13), float32] */;
  %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %533 = cast(%var_4883, dtype="int8") /* ty=Tensor[(13, 52), int8] */;
  %534 = reshape(%533, newshape=[13, 13, 4]) /* ty=Tensor[(13, 13, 4), int8] */;
  %535 = @func_2955(%534) /* ty=(Tensor[(13, 13, 4), float64], Tensor[(13, 13, 4), float32]) */;
  %536 = power(%531, %532) /* ty=Tensor[(12, 10, 13), float32] */;
  %537 = %535.1;
  (%536, %537, %var_4883)
}

def @func_922(%var_898: Tensor[(12, 13, 9), float64], %var_902: Tensor[(195, 2), float32], %var_917: Tensor[(195, 2), float32]) -> (Tensor[(6, 13, 5), float32], Tensor[(12, 13, 9), int32], Tensor[(195, 2), bool]) {
  %538 = cast(%var_902, dtype="float32") /* ty=Tensor[(195, 2), float32] */;
  %539 = reshape(%538, newshape=[6, 13, 5]) /* ty=Tensor[(6, 13, 5), float32] */;
  %540 = @func_640(%539) /* ty=(Tensor[(6, 13, 5), float32],) */;
  %541 = cast(%var_898, dtype="float64") /* ty=Tensor[(12, 13, 9), float64] */;
  %542 = log10(%541) /* ty=Tensor[(12, 13, 9), float64] */;
  %543 = cast(%var_898, dtype="int32") /* ty=Tensor[(12, 13, 9), int32] */;
  %544 = shape_of(%542, dtype="int32") /* ty=Tensor[(3), int32] */;
  %545 = cast(%542, dtype="int32") /* ty=Tensor[(12, 13, 9), int32] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %547 = cast(%var_917, dtype="bool") /* ty=Tensor[(195, 2), bool] */;
  %548 = shape_of(%var_902, dtype="int32") /* ty=Tensor[(2), int32] */;
  %549 = cast(%var_902, dtype="bool") /* ty=Tensor[(195, 2), bool] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %551 = %540.0;
  %552 = subtract(%545, %546) /* ty=Tensor[(12, 13, 9), int32] */;
  %553 = not_equal(%549, %550) /* ty=Tensor[(195, 2), bool] */;
  (%551, %552, %553)
}

def @func_4269(%var_4239: Tensor[(12, 10, 13), float32], %var_4245: Tensor[(1, 676), int8]) -> (Tensor[(12, 10, 13), int16], Tensor[(13, 13, 4), float32], Tensor[(15, 2, 7), bool], Tensor[(7, 2), int32], Tensor[(105, 2), int32], Tensor[(14, 5, 7), float64], Tensor[(?, 676), float32]) {
  %554 = @func_4088() /* ty=(Tensor[(12, 10, 13), float32],) */;
  %555 = %554.0;
  %556 = cast(%var_4239, dtype="int16") /* ty=Tensor[(12, 10, 13), int16] */;
  %557 = shape_of(%555, dtype="int32") /* ty=Tensor[(3), int32] */;
  %558 = cast(%555, dtype="int16") /* ty=Tensor[(12, 10, 13), int16] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %560 = cast(%var_4245, dtype="int8") /* ty=Tensor[(1, 676), int8] */;
  %561 = reshape(%560, newshape=[13, 13, 4]) /* ty=Tensor[(13, 13, 4), int8] */;
  %562 = @func_2955(%561) /* ty=(Tensor[(13, 13, 4), float64], Tensor[(13, 13, 4), float32]) */;
  %563 = cast(meta[relay.Constant][31] /* ty=Tensor[(7, 2), int32] */, dtype="int32") /* ty=Tensor[(7, 2), int32] */;
  %564 = cast(meta[relay.Constant][32] /* ty=Tensor[(105, 2), int32] */, dtype="int32") /* ty=Tensor[(105, 2), int32] */;
  %565 = reshape(%563, newshape=[1, 2, 7]) /* ty=Tensor[(1, 2, 7), int32] */;
  %566 = reshape(%564, newshape=[15, 2, 7]) /* ty=Tensor[(15, 2, 7), int32] */;
  %567 = @func_4177() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %568 = cast(%var_4245, dtype="float32") /* ty=Tensor[(1, 676), float32] */;
  %569 = cosh(%568) /* ty=Tensor[(1, 676), float32] */;
  %570 = cast(%var_4245, dtype="float32") /* ty=Tensor[(1, 676), float32] */;
  %571 = shape_of(%569, dtype="int32") /* ty=Tensor[(2), int32] */;
  %572 = cast(%569, dtype="float32") /* ty=Tensor[(1, 676), float32] */;
  %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %574 = bitwise_or(%558, %559) /* ty=Tensor[(12, 10, 13), int16] */;
  %575 = %562.1;
  %576 = @func_2396(%565, %566) /* ty=Tensor[(15, 2, 7), bool] */;
  %577 = %567.0;
  %578 = floor_mod(%572, %573) /* ty=Tensor[(?, 676), float32] */;
  (%574, %575, %576, meta[relay.Constant][31] /* ty=Tensor[(7, 2), int32] */, meta[relay.Constant][32] /* ty=Tensor[(105, 2), int32] */, %577, %578)
}

def @func_6082() -> (Tensor[(14, 5, 7), float64],) {
  %579 = @func_4118() /* ty=(Tensor[(14, 5, 7), float64], Tensor[(12, 10, 13), bool]) */;
  %580 = %579.0;
  (%580,)
}

def @func_6456() -> Tensor[(14, 5, 7), float64] {
  %581 = @func_6387() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %581.0
}

def @func_7367() -> (Tensor[(192, 2), float64], Tensor[(14), int32], Tensor[(210), int32], Tensor[(15, 2, 7), float32]) {
  %582 = @func_5186() /* ty=(Tensor[(12, 10, 13), bool], Tensor[(384), float64], Tensor[(936, 2), float64], Tensor[(192, 2), float64], Tensor[(1404), float64]) */;
  %583 = cast(meta[relay.Constant][33] /* ty=Tensor[(14), int32] */, dtype="int32") /* ty=Tensor[(14), int32] */;
  %584 = cast(meta[relay.Constant][34] /* ty=Tensor[(210), int32] */, dtype="int32") /* ty=Tensor[(210), int32] */;
  %585 = reshape(%583, newshape=[1, 2, 7]) /* ty=Tensor[(1, 2, 7), int32] */;
  %586 = reshape(%584, newshape=[15, 2, 7]) /* ty=Tensor[(15, 2, 7), int32] */;
  %587 = @func_2396(%585, %586) /* ty=Tensor[(15, 2, 7), bool] */;
  %588 = cast(%587, dtype="float32") /* ty=Tensor[(15, 2, 7), float32] */;
  %589 = %582.3;
  %590 = sqrt(%588) /* ty=Tensor[(15, 2, 7), float32] */;
  (%589, meta[relay.Constant][33] /* ty=Tensor[(14), int32] */, meta[relay.Constant][34] /* ty=Tensor[(210), int32] */, %590)
}

def @main(%var_9178: Tensor[(825), float64]) -> (Tensor[(14, 5, 7), float64], Tensor[(14, 5, 7), float64], Tensor[(14, 5, 7), float64], Tensor[(825), float64], Tensor[(12, 10, 13), float32], Tensor[(676), float64]) {
  %591 = @func_5883() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %592 = @func_6082() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %593 = cast(%var_9178, dtype="float64") /* ty=Tensor[(825), float64] */;
  %594 = reshape(%593, newshape=[11, 15, 5]) /* ty=Tensor[(11, 15, 5), float64] */;
  %595 = @func_3712(%594) /* ty=(Tensor[(13, 13, 4), float64], Tensor[(676), int8], Tensor[(11, 15, 5), float64]) */;
  %596 = %595.1;
  %597 = cast(%596, dtype="int8") /* ty=Tensor[(676), int8] */;
  %598 = reshape(%597, newshape=[169, 4]) /* ty=Tensor[(169, 4), int8] */;
  %599 = @func_5553(%598) /* ty=(Tensor[(12, 10, 13), float32], Tensor[(936, 2), float64], Tensor[(12, 10, 13), float32], Tensor[(169, 4), int8], Tensor[(6, 13, 5), float32]) */;
  %600 = cast(%596, dtype="float64") /* ty=Tensor[(676), float64] */;
  %601 = %591.0;
  %602 = %592.0;
  %603 = @func_7613() /* ty=Tensor[(14, 5, 7), float64] */;
  %604 = %599.0;
  %605 = sqrt(%600) /* ty=Tensor[(676), float64] */;
  (%601, %602, %603, %var_9178, %604, %605)
}

def @func_8986() -> Tensor[(14, 5, 7), float64] {
  %606 = @func_7026() /* ty=(Tensor[(14, 5, 7), float64], Tensor[(14, 5, 7), float64]) */;
  %606.0
}

def @func_4825() -> (Tensor[(12, 10, 13), float32],) {
  %607 = @func_4001() /* ty=Tensor[(12, 10, 13), bool] */;
  %608 = cast(%607, dtype="float64") /* ty=Tensor[(12, 10, 13), float64] */;
  %609 = cosh(%608) /* ty=Tensor[(12, 10, 13), float64] */;
  %610 = cast(%607, dtype="float32") /* ty=Tensor[(12, 10, 13), float32] */;
  %611 = shape_of(%609, dtype="int32") /* ty=Tensor[(3), int32] */;
  %612 = cast(%609, dtype="float32") /* ty=Tensor[(12, 10, 13), float32] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %614 = divide(%612, %613) /* ty=Tensor[(12, 10, 13), float32] */;
  %615 = cast(%614, dtype="float32") /* ty=Tensor[(12, 10, 13), float32] */;
  %616 = log(%615) /* ty=Tensor[(12, 10, 13), float32] */;
  (%616,)
}

def @func_6731() -> (Tensor[(936, 2), float64],) {
  %617 = @func_6509() /* ty=Tensor[(936, 2), float64] */;
  (%617,)
}

def @func_640(%var_629: Tensor[(6, 13, 5), float32]) -> (Tensor[(6, 13, 5), float32],) {
  %618 = cast(%var_629, dtype="float32") /* ty=Tensor[(6, 13, 5), float32] */;
  %619 = cos(%618) /* ty=Tensor[(6, 13, 5), float32] */;
  (%619,)
}

def @func_6107(%var_6098: Tensor[(825), float64]) -> (Tensor[(14, 5, 7), float64], Tensor[(13, 13, 4), float64], Tensor[(825), float64], Tensor[(12, 10, 13), float32]) {
  %620 = @func_5584() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %621 = cast(%var_6098, dtype="float64") /* ty=Tensor[(825), float64] */;
  %622 = reshape(%621, newshape=[11, 15, 5]) /* ty=Tensor[(11, 15, 5), float64] */;
  %623 = @func_3712(%622) /* ty=(Tensor[(13, 13, 4), float64], Tensor[(676), int8], Tensor[(11, 15, 5), float64]) */;
  %624 = @func_4825() /* ty=(Tensor[(12, 10, 13), float32],) */;
  %625 = %620.0;
  %626 = %623.0;
  %627 = %624.0;
  (%625, %626, %var_6098, %627)
}

def @func_5290() -> (Tensor[(12, 10, 13), bool], Tensor[(14, 5, 7), float64]) {
  %628 = @func_5186() /* ty=(Tensor[(12, 10, 13), bool], Tensor[(384), float64], Tensor[(936, 2), float64], Tensor[(192, 2), float64], Tensor[(1404), float64]) */;
  %629 = %628.0;
  %630 = @func_5216() /* ty=Tensor[(14, 5, 7), float64] */;
  (%629, %630)
}

def @func_3920(%var_3875: Tensor[(8, 5, 12), float32], %var_3876: Tensor[(8, 5, 12), float32]) -> (Tensor[(8, 5, 12), float32], Tensor[(6, 13, 5), float32], Tensor[(195, 2), float32], Tensor[(8, 5, 12), float64], Tensor[(12, 13, 9), int32], Tensor[(1404), float64], Tensor[(6, 13, 5), float32]) {
  %631 = cast(%var_3876, dtype="float32") /* ty=Tensor[(8, 5, 12), float32] */;
  %632 = shape_of(%var_3875, dtype="int32") /* ty=Tensor[(3), int32] */;
  %633 = cast(%var_3875, dtype="float32") /* ty=Tensor[(8, 5, 12), float32] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %635 = cast(meta[relay.Constant][35] /* ty=Tensor[(195, 2), float32] */, dtype="float32") /* ty=Tensor[(195, 2), float32] */;
  %636 = reshape(%635, newshape=[6, 13, 5]) /* ty=Tensor[(6, 13, 5), float32] */;
  %637 = @func_640(%636) /* ty=(Tensor[(6, 13, 5), float32],) */;
  %638 = cast(%var_3875, dtype="float64") /* ty=Tensor[(8, 5, 12), float64] */;
  %639 = cast(meta[relay.Constant][36] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %640 = %637.0;
  %641 = cast(%640, dtype="float32") /* ty=Tensor[(6, 13, 5), float32] */;
  %642 = cast(%640, dtype="float32") /* ty=Tensor[(6, 13, 5), float32] */;
  %643 = reshape(%639, newshape=[12, 13, 9]) /* ty=Tensor[(12, 13, 9), float64] */;
  %644 = reshape(%641, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
  %645 = reshape(%642, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
  %646 = @func_922(%643, %644, %645) /* ty=(Tensor[(6, 13, 5), float32], Tensor[(12, 13, 9), int32], Tensor[(195, 2), bool]) */;
  %647 = cast(%640, dtype="float32") /* ty=Tensor[(6, 13, 5), float32] */;
  %648 = reshape(%647, newshape=[6, 13, 5]) /* ty=Tensor[(6, 13, 5), float32] */;
  %649 = @func_640(%648) /* ty=(Tensor[(6, 13, 5), float32],) */;
  %650 = floor_mod(%633, %634) /* ty=Tensor[(8, 5, 12), float32] */;
  %651 = sqrt(%638) /* ty=Tensor[(8, 5, 12), float64] */;
  %652 = %646.1;
  %653 = %649.0;
  (%650, %640, meta[relay.Constant][35] /* ty=Tensor[(195, 2), float32] */, %651, %652, meta[relay.Constant][36] /* ty=Tensor[(1404), float64] */, %653)
}

def @func_2955(%var_2934: Tensor[(13, 13, 4), int8]) -> (Tensor[(13, 13, 4), float64], Tensor[(13, 13, 4), float32]) {
  %654 = cast(meta[relay.Constant][37] /* ty=Tensor[(13, 13, 4), int8] */, dtype="float64") /* ty=Tensor[(13, 13, 4), float64] */;
  %655 = cast(%var_2934, dtype="bool") /* ty=Tensor[(13, 13, 4), bool] */;
  %656 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(13, 13, 4), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %657 = cast(meta[relay.Constant][37] /* ty=Tensor[(13, 13, 4), int8] */, dtype="bool") /* ty=Tensor[(13, 13, 4), bool] */;
  %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %659 = greater(%657, %658) /* ty=Tensor[(13, 13, 4), bool] */;
  %660 = cast(%659, dtype="float32") /* ty=Tensor[(13, 13, 4), float32] */;
  %661 = sin(%654) /* ty=Tensor[(13, 13, 4), float64] */;
  %662 = atan(%660) /* ty=Tensor[(13, 13, 4), float32] */;
  (%661, %662)
}

def @func_6509() -> Tensor[(936, 2), float64] {
  %663 = @func_5186() /* ty=(Tensor[(12, 10, 13), bool], Tensor[(384), float64], Tensor[(936, 2), float64], Tensor[(192, 2), float64], Tensor[(1404), float64]) */;
  %663.2
}

def @func_5809(%var_5788: Tensor[(390), float32], %var_5799: Tensor[(702, 2), float64]) -> (Tensor[(12, 10, 13), bool], Tensor[(12, 13, 9), int32], Tensor[(14, 5, 7), float64], Tensor[(390), bool], Tensor[(702, 2), bool]) {
  %664 = @func_5290() /* ty=(Tensor[(12, 10, 13), bool], Tensor[(14, 5, 7), float64]) */;
  %665 = cast(meta[relay.Constant][38] /* ty=Tensor[(702, 2), float64] */, dtype="float64") /* ty=Tensor[(702, 2), float64] */;
  %666 = cast(meta[relay.Constant][39] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %667 = cast(meta[relay.Constant][39] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %668 = reshape(%665, newshape=[12, 13, 9]) /* ty=Tensor[(12, 13, 9), float64] */;
  %669 = reshape(%666, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
  %670 = reshape(%667, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
  %671 = @func_922(%668, %669, %670) /* ty=(Tensor[(6, 13, 5), float32], Tensor[(12, 13, 9), int32], Tensor[(195, 2), bool]) */;
  %672 = @func_5584() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %673 = cast(%var_5788, dtype="bool") /* ty=Tensor[(390), bool] */;
  %674 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(390), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %675 = cast(meta[relay.Constant][39] /* ty=Tensor[(390), float32] */, dtype="bool") /* ty=Tensor[(390), bool] */;
  %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?), bool] */;
  %677 = cast(%var_5799, dtype="bool") /* ty=Tensor[(702, 2), bool] */;
  %678 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(702, 2), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %679 = cast(meta[relay.Constant][38] /* ty=Tensor[(702, 2), float64] */, dtype="bool") /* ty=Tensor[(702, 2), bool] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %681 = %664.0;
  %682 = %671.1;
  %683 = %672.0;
  %684 = logical_and(%675, %676) /* ty=Tensor[(390), bool] */;
  %685 = less(%679, %680) /* ty=Tensor[(702, 2), bool] */;
  (%681, %682, %683, %684, %685)
}

def @func_1214(%var_1193: Tensor[(15, 8, 2), float64], %var_1209: Tensor[(390, 1), float32]) -> (Tensor[(15, 8, 2), float64], Tensor[(13, 8, 14), float64], Tensor[(1456), float64], Tensor[(12, 13, 9), int32], Tensor[(1404), float64], Tensor[(390, 1), float32]) {
  %686 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 8, 2), float64] */, dtype="float64") /* ty=Tensor[(1, 8, 2), float64] */;
  %687 = cast(%var_1193, dtype="float64") /* ty=Tensor[(15, 8, 2), float64] */;
  %688 = cast(meta[relay.Constant][41] /* ty=Tensor[(1456), float64] */, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %689 = reshape(%688, newshape=[13, 8, 14]) /* ty=Tensor[(13, 8, 14), float64] */;
  %690 = cast(meta[relay.Constant][42] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %691 = cast(%var_1209, dtype="float32") /* ty=Tensor[(390, 1), float32] */;
  %692 = cast(%var_1209, dtype="float32") /* ty=Tensor[(390, 1), float32] */;
  %693 = reshape(%690, newshape=[12, 13, 9]) /* ty=Tensor[(12, 13, 9), float64] */;
  %694 = reshape(%691, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
  %695 = reshape(%692, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
  %696 = @func_922(%693, %694, %695) /* ty=(Tensor[(6, 13, 5), float32], Tensor[(12, 13, 9), int32], Tensor[(195, 2), bool]) */;
  %697 = mod(%686, %687) /* ty=Tensor[(15, 8, 2), float64] */;
  %698 = @func_1007(%689) /* ty=Tensor[(13, 8, 14), float64] */;
  %699 = %696.1;
  (%697, %698, meta[relay.Constant][41] /* ty=Tensor[(1456), float64] */, %699, meta[relay.Constant][42] /* ty=Tensor[(1404), float64] */, %var_1209)
}

def @func_8201() -> Tensor[(14, 5, 7), float64] {
  %700 = @func_4118() /* ty=(Tensor[(14, 5, 7), float64], Tensor[(12, 10, 13), bool]) */;
  %700.0
}

def @func_5883() -> (Tensor[(14, 5, 7), float64],) {
  %701 = @func_5584() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %702 = %701.0;
  (%702,)
}

def @func_5716(%var_5710: Tensor[(7, 2, 12), bool], %var_5711: Tensor[(7, 2, 12), bool]) -> (Tensor[(7, 2, 12), bool],) {
  %703 = cast(%var_5711, dtype="bool") /* ty=Tensor[(7, 2, 12), bool] */;
  %704 = shape_of(%var_5710, dtype="int32") /* ty=Tensor[(3), int32] */;
  %705 = cast(%var_5710, dtype="bool") /* ty=Tensor[(7, 2, 12), bool] */;
  %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %707 = logical_or(%705, %706) /* ty=Tensor[(7, 2, 12), bool] */;
  (%707,)
}

def @func_5821() -> (Tensor[(384), float64],) {
  %708 = @func_5186() /* ty=(Tensor[(12, 10, 13), bool], Tensor[(384), float64], Tensor[(936, 2), float64], Tensor[(192, 2), float64], Tensor[(1404), float64]) */;
  %709 = %708.1;
  (%709,)
}

def @func_6841() -> Tensor[(14, 5, 7), float32] {
  @func_6795() /* ty=Tensor[(14, 5, 7), float32] */
}

def @func_1257(%var_1244: Tensor[(15, 6, 6), int8], %var_1245: Tensor[(15, 6, 6), int8], %var_1250: Tensor[(1404), float64], %var_1251: Tensor[(390), float32]) -> (Tensor[(15, 6, 6), int8], Tensor[(12, 13, 9), int32], Tensor[(1404), float64], Tensor[(390), float32]) {
  %710 = cast(%var_1245, dtype="int8") /* ty=Tensor[(15, 6, 6), int8] */;
  %711 = shape_of(%var_1244, dtype="int32") /* ty=Tensor[(3), int32] */;
  %712 = cast(%var_1244, dtype="int8") /* ty=Tensor[(15, 6, 6), int8] */;
  %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %714 = cast(%var_1250, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %715 = cast(%var_1251, dtype="float32") /* ty=Tensor[(390), float32] */;
  %716 = cast(%var_1251, dtype="float32") /* ty=Tensor[(390), float32] */;
  %717 = reshape(%714, newshape=[12, 13, 9]) /* ty=Tensor[(12, 13, 9), float64] */;
  %718 = reshape(%715, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
  %719 = reshape(%716, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
  %720 = @func_922(%717, %718, %719) /* ty=(Tensor[(6, 13, 5), float32], Tensor[(12, 13, 9), int32], Tensor[(195, 2), bool]) */;
  %721 = subtract(%712, %713) /* ty=Tensor[(15, 6, 6), int8] */;
  %722 = %720.1;
  (%721, %722, %var_1250, %var_1251)
}

def @func_8888(%var_8871: Tensor[(330), float64], %var_8872: Tensor[(390), float32], %var_8873: Tensor[(480), float64]) -> (Tensor[(14, 5, 7), float32], Tensor[(192, 2), float32], Tensor[(540), int8], Tensor[(330), float64], Tensor[(390), float32], Tensor[(480), float64], Tensor[(676), int8], Tensor[(12, 10, 13), float32]) {
  %723 = @func_5186() /* ty=(Tensor[(12, 10, 13), bool], Tensor[(384), float64], Tensor[(936, 2), float64], Tensor[(192, 2), float64], Tensor[(1404), float64]) */;
  %724 = %723.3;
  %725 = cast(%724, dtype="float32") /* ty=Tensor[(192, 2), float32] */;
  %726 = cast(%var_8871, dtype="float64") /* ty=Tensor[(330), float64] */;
  %727 = cast(%var_8872, dtype="float32") /* ty=Tensor[(390), float32] */;
  %728 = cast(%var_8873, dtype="float64") /* ty=Tensor[(480), float64] */;
  %729 = cast(%724, dtype="float64") /* ty=Tensor[(192, 2), float64] */;
  %730 = cast(meta[relay.Constant][43] /* ty=Tensor[(676), int8] */, dtype="int8") /* ty=Tensor[(676), int8] */;
  %731 = reshape(%726, newshape=[11, 3, 10]) /* ty=Tensor[(11, 3, 10), float64] */;
  %732 = reshape(%727, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
  %733 = reshape(%728, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %734 = reshape(%729, newshape=[2, 192]) /* ty=Tensor[(2, 192), float64] */;
  %735 = reshape(%730, newshape=[676]) /* ty=Tensor[(676), int8] */;
  %736 = @func_7249(%731, %732, %733, %734, %735) /* ty=(Tensor[(11, 3, 10), float64], Tensor[(936, 2), float64], Tensor[(6, 13, 5), float32], Tensor[(195, 2), float32], Tensor[(12, 10, 13), bool], Tensor[(480), float64], Tensor[(2, 192), float64], Tensor[(676), int8], Tensor[(390), float32], Tensor[(540), int8], Tensor[(1404), float64]) */;
  %737 = @func_6441() /* ty=(Tensor[(2, 14, 9), float64], Tensor[(12, 10, 13), float32]) */;
  %738 = @func_6841() /* ty=Tensor[(14, 5, 7), float32] */;
  %739 = log2(%725) /* ty=Tensor[(192, 2), float32] */;
  %740 = %736.9;
  %741 = %737.1;
  (%738, %739, %740, %var_8871, %var_8872, %var_8873, meta[relay.Constant][43] /* ty=Tensor[(676), int8] */, %741)
}

def @func_1007(%var_995: Tensor[(13, 8, 14), float64]) -> Tensor[(13, 8, 14), float64] {
  %742 = cast(%var_995, dtype="float64") /* ty=Tensor[(13, 8, 14), float64] */;
  log(%742) /* ty=Tensor[(13, 8, 14), float64] */
}

def @func_4530(%var_4517: Tensor[(384), float64], %var_4518: Tensor[(1404), float64]) -> (Tensor[(12, 10, 13), bool], Tensor[(195, 2), bool], Tensor[(384), float64], Tensor[(1404), float64]) {
  %743 = @func_4118() /* ty=(Tensor[(14, 5, 7), float64], Tensor[(12, 10, 13), bool]) */;
  %744 = cast(%var_4517, dtype="float64") /* ty=Tensor[(384), float64] */;
  %745 = cast(%var_4518, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %746 = reshape(%744, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
  %747 = reshape(%745, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
  %748 = @func_1145(%746, %747) /* ty=(Tensor[(1404), float64], Tensor[(195, 2), bool], Tensor[(8, 6, 8), float32]) */;
  %749 = %743.1;
  %750 = %748.1;
  (%749, %750, %var_4517, %var_4518)
}

def @func_8136() -> (Tensor[(14, 5, 7), float64],) {
  %751 = @func_6387() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %752 = %751.0;
  (%752,)
}

def @func_7613() -> Tensor[(14, 5, 7), float64] {
  %753 = @func_6931() /* ty=(Tensor[(14, 5, 7), float64], Tensor[(12, 10, 13), float32]) */;
  %753.0
}

def @func_6153() -> (Tensor[(14, 5, 7), float64], Tensor[(12, 10, 13), float32], Tensor[(14, 5, 7), float64]) {
  %754 = @func_5584() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %755 = %754.0;
  %756 = cast(%755, dtype="float64") /* ty=Tensor[(14, 5, 7), float64] */;
  %757 = @func_4088() /* ty=(Tensor[(12, 10, 13), float32],) */;
  %758 = sinh(%756) /* ty=Tensor[(14, 5, 7), float64] */;
  %759 = %757.0;
  %760 = @func_5216() /* ty=Tensor[(14, 5, 7), float64] */;
  (%758, %759, %760)
}

def @func_7980(%var_7948: Tensor[(1560), float32], %var_7949: Tensor[(676), int8]) -> (Tensor[(14, 5, 7), float32], Tensor[(1560), float32], Tensor[(676), int8], Tensor[(15, 2, 7), float32], Tensor[(14, 5, 7), float32]) {
  %761 = @func_7707() /* ty=(Tensor[(14, 5, 7), float32],) */;
  %762 = cast(%var_7948, dtype="float32") /* ty=Tensor[(1560), float32] */;
  %763 = cast(%var_7949, dtype="int8") /* ty=Tensor[(676), int8] */;
  %764 = reshape(%762, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), float32] */;
  %765 = reshape(%763, newshape=[1, 676]) /* ty=Tensor[(1, 676), int8] */;
  %766 = @func_4269(%764, %765) /* ty=(Tensor[(12, 10, 13), int16], Tensor[(13, 13, 4), float32], Tensor[(15, 2, 7), bool], Tensor[(7, 2), int32], Tensor[(105, 2), int32], Tensor[(14, 5, 7), float64], Tensor[(?, 676), float32]) */;
  %767 = %766.2;
  %768 = cast(%767, dtype="float32") /* ty=Tensor[(15, 2, 7), float32] */;
  %769 = @func_7707() /* ty=(Tensor[(14, 5, 7), float32],) */;
  %770 = %761.0;
  %771 = acos(%768) /* ty=Tensor[(15, 2, 7), float32] */;
  %772 = %769.0;
  (%770, %var_7948, %var_7949, %771, %772)
}

def @func_4670(%var_4607: Tensor[(12, 13, 12), float64], %var_4631: Tensor[(384), float64], %var_4632: Tensor[(1404), float64]) -> (Tensor[(12, 13, 12), bool], Tensor[(12, 13, 12), float32], Tensor[(8, 6, 8), float32], Tensor[(384), float64], Tensor[(1404), float64], Tensor[(240), float64], Tensor[(390), float32], Tensor[(1456), float32]) {
  %773 = cast(0.952001f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %774 = cast(%var_4607, dtype="bool") /* ty=Tensor[(12, 13, 12), bool] */;
  %775 = cast(0.952001f64 /* ty=float64 */, dtype="float32") /* ty=float32 */;
  %776 = cast(%var_4607, dtype="float32") /* ty=Tensor[(12, 13, 12), float32] */;
  %777 = cast(%var_4631, dtype="float64") /* ty=Tensor[(384), float64] */;
  %778 = cast(%var_4632, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %779 = reshape(%777, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
  %780 = reshape(%778, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
  %781 = @func_1145(%779, %780) /* ty=(Tensor[(1404), float64], Tensor[(195, 2), bool], Tensor[(8, 6, 8), float32]) */;
  %782 = cast(meta[relay.Constant][44] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %783 = cast(meta[relay.Constant][45] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %784 = reshape(%782, newshape=[15, 8, 2]) /* ty=Tensor[(15, 8, 2), float64] */;
  %785 = reshape(%783, newshape=[390, 1]) /* ty=Tensor[(390, 1), float32] */;
  %786 = @func_1214(%784, %785) /* ty=(Tensor[(15, 8, 2), float64], Tensor[(13, 8, 14), float64], Tensor[(1456), float64], Tensor[(12, 13, 9), int32], Tensor[(1404), float64], Tensor[(390, 1), float32]) */;
  %787 = %786.2;
  %788 = cast(%787, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %789 = cast(0.952001f64 /* ty=float64 */, dtype="float32") /* ty=float32 */;
  %790 = less(%773, %774) /* ty=Tensor[(12, 13, 12), bool] */;
  %791 = floor_divide(%775, %776) /* ty=Tensor[(12, 13, 12), float32] */;
  %792 = %781.2;
  %793 = floor_mod(%788, %789) /* ty=Tensor[(1456), float32] */;
  (%790, %791, %792, %var_4631, %var_4632, meta[relay.Constant][44] /* ty=Tensor[(240), float64] */, meta[relay.Constant][45] /* ty=Tensor[(390), float32] */, %793)
}

def @func_5584() -> (Tensor[(14, 5, 7), float64],) {
  %794 = @func_4118() /* ty=(Tensor[(14, 5, 7), float64], Tensor[(12, 10, 13), bool]) */;
  %795 = %794.0;
  (%795,)
}

def @func_5553(%var_5529: Tensor[(169, 4), int8]) -> (Tensor[(12, 10, 13), float32], Tensor[(936, 2), float64], Tensor[(12, 10, 13), float32], Tensor[(169, 4), int8], Tensor[(6, 13, 5), float32]) {
  %796 = @func_4825() /* ty=(Tensor[(12, 10, 13), float32],) */;
  %797 = @func_5186() /* ty=(Tensor[(12, 10, 13), bool], Tensor[(384), float64], Tensor[(936, 2), float64], Tensor[(192, 2), float64], Tensor[(1404), float64]) */;
  %798 = cast(%var_5529, dtype="int8") /* ty=Tensor[(169, 4), int8] */;
  %799 = reshape(%798, newshape=[13, 52]) /* ty=Tensor[(13, 52), int8] */;
  %800 = @func_4909(%799) /* ty=(Tensor[(12, 10, 13), float32], Tensor[(13, 13, 4), float32], Tensor[(13, 52), int8]) */;
  %801 = %796.0;
  %802 = cast(%801, dtype="bool") /* ty=Tensor[(12, 10, 13), bool] */;
  %803 = %800.0;
  %804 = cast(%803, dtype="bool") /* ty=Tensor[(12, 10, 13), bool] */;
  %805 = reshape(%802, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), bool] */;
  %806 = reshape(%804, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), bool] */;
  %807 = @func_4767(%805, %806) /* ty=(Tensor[(12, 10, 13), bool], Tensor[(12, 10, 13), int32], Tensor[(6, 13, 5), float32], Tensor[(390), float32], Tensor[(14, 5, 7), float64]) */;
  %808 = %797.2;
  %809 = %807.2;
  (%801, %808, %803, %var_5529, %809)
}

def @func_4001() -> Tensor[(12, 10, 13), bool] {
  %810 = cast(meta[relay.Constant][46] /* ty=Tensor[(12, 10, 13), float32] */, dtype="float32") /* ty=Tensor[(12, 10, 13), float32] */;
  %811 = log10(%810) /* ty=Tensor[(12, 10, 13), float32] */;
  %812 = cast(%811, dtype="bool") /* ty=Tensor[(12, 10, 13), bool] */;
  %813 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(12, 10, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %814 = cast(meta[relay.Constant][46] /* ty=Tensor[(12, 10, 13), float32] */, dtype="bool") /* ty=Tensor[(12, 10, 13), bool] */;
  %815 = dyn.reshape(%812, %813, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%814, %815) /* ty=Tensor[(12, 10, 13), bool] */
}

def @func_8057() -> Tensor[(14, 5, 7), float64] {
  %816 = @func_6082() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %816.0
}

def @func_8945() -> (Tensor[(14, 5, 7), float64],) {
  %817 = @func_8438() /* ty=(Tensor[(936, 2), float64], Tensor[(14, 5, 7), float64], Tensor[(1404), float64], Tensor[(1, 1404), float64]) */;
  %818 = %817.1;
  (%818,)
}

def @func_7249(%var_7201: Tensor[(11, 3, 10), float64], %var_7231: Tensor[(195, 2), float32], %var_7237: Tensor[(480), float64], %var_7238: Tensor[(2, 192), float64], %var_7239: Tensor[(676), int8]) -> (Tensor[(11, 3, 10), float64], Tensor[(936, 2), float64], Tensor[(6, 13, 5), float32], Tensor[(195, 2), float32], Tensor[(12, 10, 13), bool], Tensor[(480), float64], Tensor[(2, 192), float64], Tensor[(676), int8], Tensor[(390), float32], Tensor[(540), int8], Tensor[(1404), float64]) {
  %819 = cast(%var_7201, dtype="float64") /* ty=Tensor[(11, 3, 10), float64] */;
  %820 = @func_6731() /* ty=(Tensor[(936, 2), float64],) */;
  %821 = cast(%var_7231, dtype="float32") /* ty=Tensor[(195, 2), float32] */;
  %822 = reshape(%821, newshape=[6, 13, 5]) /* ty=Tensor[(6, 13, 5), float32] */;
  %823 = @func_640(%822) /* ty=(Tensor[(6, 13, 5), float32],) */;
  %824 = cast(%var_7237, dtype="float64") /* ty=Tensor[(480), float64] */;
  %825 = %820.0;
  %826 = cast(%825, dtype="float64") /* ty=Tensor[(936, 2), float64] */;
  %827 = cast(%var_7238, dtype="float64") /* ty=Tensor[(2, 192), float64] */;
  %828 = cast(%var_7239, dtype="int8") /* ty=Tensor[(676), int8] */;
  %829 = reshape(%824, newshape=[3, 10, 16]) /* ty=Tensor[(3, 10, 16), float64] */;
  %830 = reshape(%826, newshape=[1872, 1]) /* ty=Tensor[(1872, 1), float64] */;
  %831 = reshape(%827, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %832 = reshape(%828, newshape=[676, 1]) /* ty=Tensor[(676, 1), int8] */;
  %833 = @func_5132(%829, %830, %831, %832) /* ty=(Tensor[(384), float64], Tensor[(1872, 1), float64], Tensor[(384), float64], Tensor[(1404), float64], Tensor[(13, 13, 4), float32], Tensor[(676, 1), int8], Tensor[(12, 10, 13), bool], Tensor[(3, 10, 16), float64], Tensor[(12, 10, 13), float32], Tensor[(3, 10, 16), float32], Tensor[(12, 10, 13), bool]) */;
  %834 = %833.6;
  %835 = cast(%834, dtype="float32") /* ty=Tensor[(12, 10, 13), float32] */;
  %836 = cast(meta[relay.Constant][47] /* ty=Tensor[(540), int8] */, dtype="int8") /* ty=Tensor[(540), int8] */;
  %837 = cast(meta[relay.Constant][48] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %838 = %823.0;
  %839 = cast(%838, dtype="float32") /* ty=Tensor[(6, 13, 5), float32] */;
  %840 = reshape(%835, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), float32] */;
  %841 = reshape(%836, newshape=[540]) /* ty=Tensor[(540), int8] */;
  %842 = reshape(%837, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
  %843 = reshape(%839, newshape=[390]) /* ty=Tensor[(390), float32] */;
  %844 = @func_4336(%840, %841, %842, %843) /* ty=(Tensor[(12, 10, 13), float64], Tensor[(1404), float64], Tensor[(540), int8], Tensor[(1404), float64], Tensor[(390), float32]) */;
  %845 = log10(%819) /* ty=Tensor[(11, 3, 10), float64] */;
  %846 = %844.4;
  (%845, %825, %838, %var_7231, %834, %var_7237, %var_7238, %var_7239, %846, meta[relay.Constant][47] /* ty=Tensor[(540), int8] */, meta[relay.Constant][48] /* ty=Tensor[(1404), float64] */)
}

def @func_4088() -> (Tensor[(12, 10, 13), float32],) {
  %847 = @func_4001() /* ty=Tensor[(12, 10, 13), bool] */;
  %848 = cast(%847, dtype="float32") /* ty=Tensor[(12, 10, 13), float32] */;
  %849 = sinh(%848) /* ty=Tensor[(12, 10, 13), float32] */;
  (%849,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5885() -> (Tensor[(14, 5, 7), float64],) {
  @func_5883() /* ty=(Tensor[(14, 5, 7), float64],) */
}

def @func_642(%var_641: Tensor[(6, 13, 5), float32]) -> (Tensor[(6, 13, 5), float32],) {
  %2 = fn (%var_629: Tensor[(6, 13, 5), float32]) -> (Tensor[(6, 13, 5), float32],) {
    %0 = cast(%var_629, dtype="float32") /* ty=Tensor[(6, 13, 5), float32] */;
    %1 = cos(%0) /* ty=Tensor[(6, 13, 5), float32] */;
    (%1,)
  };
  %2(%var_641) /* ty=(Tensor[(6, 13, 5), float32],) */
}

def @func_5823() -> (Tensor[(384), float64],) {
  @func_5821() /* ty=(Tensor[(384), float64],) */
}

def @func_6528() -> (Tensor[(12, 10, 13), float32],) {
  %5 = fn () -> (Tensor[(12, 10, 13), float32],) {
    %3 = @func_6260() /* ty=(Tensor[(12, 10, 13), float32], Tensor[(14, 5, 7), float64]) */;
    %4 = %3.0;
    (%4,)
  };
  %5() /* ty=(Tensor[(12, 10, 13), float32],) */
}

def @func_5720(%var_5718: Tensor[(7, 2, 12), bool], %var_5719: Tensor[(7, 2, 12), bool]) -> (Tensor[(7, 2, 12), bool],) {
  @func_5716(%var_5718, %var_5719) /* ty=(Tensor[(7, 2, 12), bool],) */
}

def @func_4596(%var_4581: Tensor[(7, 14, 8), int32], %var_4582: Tensor[(7, 14, 8), int32]) -> (Tensor[(7, 14, 8), bool],) {
  %6 = cast(%var_4582, dtype="bool") /* ty=Tensor[(7, 14, 8), bool] */;
  %7 = shape_of(%var_4581, dtype="int32") /* ty=Tensor[(3), int32] */;
  %8 = cast(%var_4581, dtype="bool") /* ty=Tensor[(7, 14, 8), bool] */;
  %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %10 = equal(%8, %9) /* ty=Tensor[(7, 14, 8), bool] */;
  (%10,)
}

def @func_8202() -> Tensor[(14, 5, 7), float64] {
  %12 = fn () -> Tensor[(14, 5, 7), float64] {
    %11 = @func_4118() /* ty=(Tensor[(14, 5, 7), float64], Tensor[(12, 10, 13), bool]) */;
    %11.0
  };
  %12() /* ty=Tensor[(14, 5, 7), float64] */
}

def @func_5945(%var_5940: Tensor[(6, 9, 16), float32]) -> Tensor[(6, 9, 16), float32] {
  %13 = cast(%var_5940, dtype="float32") /* ty=Tensor[(6, 9, 16), float32] */;
  sigmoid(%13) /* ty=Tensor[(6, 9, 16), float32] */
}

def @func_6153() -> (Tensor[(14, 5, 7), float64], Tensor[(12, 10, 13), float32], Tensor[(14, 5, 7), float64]) {
  %14 = @func_5584() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %15 = %14.0;
  %16 = cast(%15, dtype="float64") /* ty=Tensor[(14, 5, 7), float64] */;
  %17 = @func_4088() /* ty=(Tensor[(12, 10, 13), float32],) */;
  %18 = sinh(%16) /* ty=Tensor[(14, 5, 7), float64] */;
  %19 = %17.0;
  %20 = @func_5216() /* ty=Tensor[(14, 5, 7), float64] */;
  (%18, %19, %20)
}

def @func_5329(%var_5327: Tensor[(825), float64]) -> (Tensor[(12, 10, 13), float32], Tensor[(13, 13, 4), float64], Tensor[(825), float64], Tensor[(12, 10, 13), bool]) {
  @func_5326(%var_5327) /* ty=(Tensor[(12, 10, 13), float32], Tensor[(13, 13, 4), float64], Tensor[(825), float64], Tensor[(12, 10, 13), bool]) */
}

def @func_2958(%var_2956: Tensor[(13, 13, 4), int8]) -> (Tensor[(13, 13, 4), float64], Tensor[(13, 13, 4), float32]) {
  @func_2955(%var_2956) /* ty=(Tensor[(13, 13, 4), float64], Tensor[(13, 13, 4), float32]) */
}

def @func_8986() -> Tensor[(14, 5, 7), float64] {
  %21 = @func_7026() /* ty=(Tensor[(14, 5, 7), float64], Tensor[(14, 5, 7), float64]) */;
  %21.0
}

def @func_8058() -> Tensor[(14, 5, 7), float64] {
  %23 = fn () -> Tensor[(14, 5, 7), float64] {
    %22 = @func_6082() /* ty=(Tensor[(14, 5, 7), float64],) */;
    %22.0
  };
  %23() /* ty=Tensor[(14, 5, 7), float64] */
}

def @func_5716(%var_5710: Tensor[(7, 2, 12), bool], %var_5711: Tensor[(7, 2, 12), bool]) -> (Tensor[(7, 2, 12), bool],) {
  %24 = cast(%var_5711, dtype="bool") /* ty=Tensor[(7, 2, 12), bool] */;
  %25 = shape_of(%var_5710, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%var_5710, dtype="bool") /* ty=Tensor[(7, 2, 12), bool] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %28 = logical_or(%26, %27) /* ty=Tensor[(7, 2, 12), bool] */;
  (%28,)
}

def @func_7123() -> (Tensor[(14, 5, 7), float64], Tensor[(2, 14, 9), float64]) {
  %29 = @func_6387() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %30 = @func_6441() /* ty=(Tensor[(2, 14, 9), float64], Tensor[(12, 10, 13), float32]) */;
  %31 = %29.0;
  %32 = %30.0;
  (%31, %32)
}

def @func_1214(%var_1193: Tensor[(15, 8, 2), float64], %var_1209: Tensor[(390, 1), float32]) -> (Tensor[(15, 8, 2), float64], Tensor[(13, 8, 14), float64], Tensor[(1456), float64], Tensor[(12, 13, 9), int32], Tensor[(1404), float64], Tensor[(390, 1), float32]) {
  %33 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 8, 2), float64] */, dtype="float64") /* ty=Tensor[(1, 8, 2), float64] */;
  %34 = cast(%var_1193, dtype="float64") /* ty=Tensor[(15, 8, 2), float64] */;
  %35 = cast(meta[relay.Constant][1] /* ty=Tensor[(1456), float64] */, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %36 = reshape(%35, newshape=[13, 8, 14]) /* ty=Tensor[(13, 8, 14), float64] */;
  %37 = cast(meta[relay.Constant][2] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %38 = cast(%var_1209, dtype="float32") /* ty=Tensor[(390, 1), float32] */;
  %39 = cast(%var_1209, dtype="float32") /* ty=Tensor[(390, 1), float32] */;
  %40 = reshape(%37, newshape=[12, 13, 9]) /* ty=Tensor[(12, 13, 9), float64] */;
  %41 = reshape(%38, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
  %42 = reshape(%39, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
  %43 = @func_922(%40, %41, %42) /* ty=(Tensor[(6, 13, 5), float32], Tensor[(12, 13, 9), int32], Tensor[(195, 2), bool]) */;
  %44 = mod(%33, %34) /* ty=Tensor[(15, 8, 2), float64] */;
  %45 = @func_1007(%36) /* ty=Tensor[(13, 8, 14), float64] */;
  %46 = %43.1;
  (%44, %45, meta[relay.Constant][1] /* ty=Tensor[(1456), float64] */, %46, meta[relay.Constant][2] /* ty=Tensor[(1404), float64] */, %var_1209)
}

def @func_1373(%var_1371: Tensor[(2, 8, 7), uint64], %var_1372: Tensor[(2, 8, 7), uint64]) -> (Tensor[(2, 8, 7), uint64], Tensor[(2, 8, 7), bool]) {
  @func_1369(%var_1371, %var_1372) /* ty=(Tensor[(2, 8, 7), uint64], Tensor[(2, 8, 7), bool]) */
}

def @func_4001() -> Tensor[(12, 10, 13), bool] {
  %47 = cast(meta[relay.Constant][3] /* ty=Tensor[(12, 10, 13), float32] */, dtype="float32") /* ty=Tensor[(12, 10, 13), float32] */;
  %48 = log10(%47) /* ty=Tensor[(12, 10, 13), float32] */;
  %49 = cast(%48, dtype="bool") /* ty=Tensor[(12, 10, 13), bool] */;
  %50 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(12, 10, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %51 = cast(meta[relay.Constant][3] /* ty=Tensor[(12, 10, 13), float32] */, dtype="bool") /* ty=Tensor[(12, 10, 13), bool] */;
  %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%51, %52) /* ty=Tensor[(12, 10, 13), bool] */
}

def @func_2053(%var_2051: bool, %var_2052: Tensor[(8, 6, 16), bool]) -> Tensor[(8, 6, 16), float32] {
  @func_2049(%var_2051, %var_2052) /* ty=Tensor[(8, 6, 16), float32] */
}

def @func_3924(%var_3922: Tensor[(8, 5, 12), float32], %var_3923: Tensor[(8, 5, 12), float32]) -> (Tensor[(8, 5, 12), float32], Tensor[(6, 13, 5), float32], Tensor[(195, 2), float32], Tensor[(8, 5, 12), float64], Tensor[(12, 13, 9), int32], Tensor[(1404), float64], Tensor[(6, 13, 5), float32]) {
  @func_3920(%var_3922, %var_3923) /* ty=(Tensor[(8, 5, 12), float32], Tensor[(6, 13, 5), float32], Tensor[(195, 2), float32], Tensor[(8, 5, 12), float64], Tensor[(12, 13, 9), int32], Tensor[(1404), float64], Tensor[(6, 13, 5), float32]) */
}

def @func_9083(%var_9082: Tensor[(14, 5, 7), float64]) -> (Tensor[(14, 5, 7), float32], Tensor[(2, 14, 9), float64], Tensor[(14, 5, 7), int32]) {
  %63 = fn (%var_9062: Tensor[(14, 5, 7), float64]) -> (Tensor[(14, 5, 7), float32], Tensor[(2, 14, 9), float64], Tensor[(14, 5, 7), int32]) {
    %53 = @func_7707() /* ty=(Tensor[(14, 5, 7), float32],) */;
    %54 = @func_7123() /* ty=(Tensor[(14, 5, 7), float64], Tensor[(2, 14, 9), float64]) */;
    %55 = @func_6877() /* ty=Tensor[(14, 5, 7), float64] */;
    %56 = cast(%var_9062, dtype="int32") /* ty=Tensor[(14, 5, 7), int32] */;
    %57 = shape_of(%55, dtype="int32") /* ty=Tensor[(3), int32] */;
    %58 = cast(%55, dtype="int32") /* ty=Tensor[(14, 5, 7), int32] */;
    %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %60 = %53.0;
    %61 = %54.1;
    %62 = subtract(%58, %59) /* ty=Tensor[(14, 5, 7), int32] */;
    (%60, %61, %62)
  };
  %63(%var_9082) /* ty=(Tensor[(14, 5, 7), float32], Tensor[(2, 14, 9), float64], Tensor[(14, 5, 7), int32]) */
}

def @func_7984(%var_7982: Tensor[(1560), float32], %var_7983: Tensor[(676), int8]) -> (Tensor[(14, 5, 7), float32], Tensor[(1560), float32], Tensor[(676), int8], Tensor[(15, 2, 7), float32], Tensor[(14, 5, 7), float32]) {
  @func_7980(%var_7982, %var_7983) /* ty=(Tensor[(14, 5, 7), float32], Tensor[(1560), float32], Tensor[(676), int8], Tensor[(15, 2, 7), float32], Tensor[(14, 5, 7), float32]) */
}

def @func_4912(%var_4910: Tensor[(13, 52), int8]) -> (Tensor[(12, 10, 13), float32], Tensor[(13, 13, 4), float32], Tensor[(13, 52), int8]) {
  @func_4909(%var_4910) /* ty=(Tensor[(12, 10, 13), float32], Tensor[(13, 13, 4), float32], Tensor[(13, 52), int8]) */
}

def @func_5291() -> (Tensor[(12, 10, 13), bool], Tensor[(14, 5, 7), float64]) {
  %67 = fn () -> (Tensor[(12, 10, 13), bool], Tensor[(14, 5, 7), float64]) {
    %64 = @func_5186() /* ty=(Tensor[(12, 10, 13), bool], Tensor[(384), float64], Tensor[(936, 2), float64], Tensor[(192, 2), float64], Tensor[(1404), float64]) */;
    %65 = %64.0;
    %66 = @func_5216() /* ty=Tensor[(14, 5, 7), float64] */;
    (%65, %66)
  };
  %67() /* ty=(Tensor[(12, 10, 13), bool], Tensor[(14, 5, 7), float64]) */
}

def @func_6084() -> (Tensor[(14, 5, 7), float64],) {
  @func_6082() /* ty=(Tensor[(14, 5, 7), float64],) */
}

def @func_8988() -> Tensor[(14, 5, 7), float64] {
  @func_8986() /* ty=Tensor[(14, 5, 7), float64] */
}

def @func_6469() -> (Tensor[(14, 5, 7), float64],) {
  %70 = fn () -> (Tensor[(14, 5, 7), float64],) {
    %68 = @func_5883() /* ty=(Tensor[(14, 5, 7), float64],) */;
    %69 = %68.0;
    (%69,)
  };
  %70() /* ty=(Tensor[(14, 5, 7), float64],) */
}

def @func_5585() -> (Tensor[(14, 5, 7), float64],) {
  %73 = fn () -> (Tensor[(14, 5, 7), float64],) {
    %71 = @func_4118() /* ty=(Tensor[(14, 5, 7), float64], Tensor[(12, 10, 13), bool]) */;
    %72 = %71.0;
    (%72,)
  };
  %73() /* ty=(Tensor[(14, 5, 7), float64],) */
}

def @func_6733() -> (Tensor[(936, 2), float64],) {
  @func_6731() /* ty=(Tensor[(936, 2), float64],) */
}

def @func_1218(%var_1216: Tensor[(15, 8, 2), float64], %var_1217: Tensor[(390, 1), float32]) -> (Tensor[(15, 8, 2), float64], Tensor[(13, 8, 14), float64], Tensor[(1456), float64], Tensor[(12, 13, 9), int32], Tensor[(1404), float64], Tensor[(390, 1), float32]) {
  @func_1214(%var_1216, %var_1217) /* ty=(Tensor[(15, 8, 2), float64], Tensor[(13, 8, 14), float64], Tensor[(1456), float64], Tensor[(12, 13, 9), int32], Tensor[(1404), float64], Tensor[(390, 1), float32]) */
}

def @func_1257(%var_1244: Tensor[(15, 6, 6), int8], %var_1245: Tensor[(15, 6, 6), int8], %var_1250: Tensor[(1404), float64], %var_1251: Tensor[(390), float32]) -> (Tensor[(15, 6, 6), int8], Tensor[(12, 13, 9), int32], Tensor[(1404), float64], Tensor[(390), float32]) {
  %74 = cast(%var_1245, dtype="int8") /* ty=Tensor[(15, 6, 6), int8] */;
  %75 = shape_of(%var_1244, dtype="int32") /* ty=Tensor[(3), int32] */;
  %76 = cast(%var_1244, dtype="int8") /* ty=Tensor[(15, 6, 6), int8] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %78 = cast(%var_1250, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %79 = cast(%var_1251, dtype="float32") /* ty=Tensor[(390), float32] */;
  %80 = cast(%var_1251, dtype="float32") /* ty=Tensor[(390), float32] */;
  %81 = reshape(%78, newshape=[12, 13, 9]) /* ty=Tensor[(12, 13, 9), float64] */;
  %82 = reshape(%79, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
  %83 = reshape(%80, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
  %84 = @func_922(%81, %82, %83) /* ty=(Tensor[(6, 13, 5), float32], Tensor[(12, 13, 9), int32], Tensor[(195, 2), bool]) */;
  %85 = subtract(%76, %77) /* ty=Tensor[(15, 6, 6), int8] */;
  %86 = %84.1;
  (%85, %86, %var_1250, %var_1251)
}

def @func_6511() -> Tensor[(936, 2), float64] {
  @func_6509() /* ty=Tensor[(936, 2), float64] */
}

def @func_5553(%var_5529: Tensor[(169, 4), int8]) -> (Tensor[(12, 10, 13), float32], Tensor[(936, 2), float64], Tensor[(12, 10, 13), float32], Tensor[(169, 4), int8], Tensor[(6, 13, 5), float32]) {
  %87 = @func_4825() /* ty=(Tensor[(12, 10, 13), float32],) */;
  %88 = @func_5186() /* ty=(Tensor[(12, 10, 13), bool], Tensor[(384), float64], Tensor[(936, 2), float64], Tensor[(192, 2), float64], Tensor[(1404), float64]) */;
  %89 = cast(%var_5529, dtype="int8") /* ty=Tensor[(169, 4), int8] */;
  %90 = reshape(%89, newshape=[13, 52]) /* ty=Tensor[(13, 52), int8] */;
  %91 = @func_4909(%90) /* ty=(Tensor[(12, 10, 13), float32], Tensor[(13, 13, 4), float32], Tensor[(13, 52), int8]) */;
  %92 = %87.0;
  %93 = cast(%92, dtype="bool") /* ty=Tensor[(12, 10, 13), bool] */;
  %94 = %91.0;
  %95 = cast(%94, dtype="bool") /* ty=Tensor[(12, 10, 13), bool] */;
  %96 = reshape(%93, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), bool] */;
  %97 = reshape(%95, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), bool] */;
  %98 = @func_4767(%96, %97) /* ty=(Tensor[(12, 10, 13), bool], Tensor[(12, 10, 13), int32], Tensor[(6, 13, 5), float32], Tensor[(390), float32], Tensor[(14, 5, 7), float64]) */;
  %99 = %88.2;
  %100 = %98.2;
  (%92, %99, %94, %var_5529, %100)
}

def @func_7451(%var_7421: Tensor[(1404), float64]) -> (Tensor[(936, 2), float64], Tensor[(390), int32], Tensor[(1404), float64]) {
  %101 = @func_6731() /* ty=(Tensor[(936, 2), float64],) */;
  %102 = cast(%var_7421, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %103 = cast(meta[relay.Constant][4] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %104 = cast(meta[relay.Constant][4] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %105 = reshape(%102, newshape=[12, 13, 9]) /* ty=Tensor[(12, 13, 9), float64] */;
  %106 = reshape(%103, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
  %107 = reshape(%104, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
  %108 = @func_922(%105, %106, %107) /* ty=(Tensor[(6, 13, 5), float32], Tensor[(12, 13, 9), int32], Tensor[(195, 2), bool]) */;
  %109 = %108.2;
  %110 = cast(%109, dtype="int32") /* ty=Tensor[(195, 2), int32] */;
  %111 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(390), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %112 = cast(meta[relay.Constant][4] /* ty=Tensor[(390), float32] */, dtype="int32") /* ty=Tensor[(390), int32] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?), int32] */;
  %114 = cast(%var_7421, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %115 = %101.0;
  %116 = multiply(%112, %113) /* ty=Tensor[(390), int32] */;
  %117 = sin(%114) /* ty=Tensor[(1404), float64] */;
  (%115, %116, %117)
}

def @func_5217() -> Tensor[(14, 5, 7), float64] {
  %119 = fn () -> Tensor[(14, 5, 7), float64] {
    %118 = @func_4177() /* ty=(Tensor[(14, 5, 7), float64],) */;
    %118.0
  };
  %119() /* ty=Tensor[(14, 5, 7), float64] */
}

def @func_8959() -> Tensor[(14, 5, 7), float64] {
  %120 = @func_8781() /* ty=(Tensor[(15, 7, 2), float64], Tensor[(384), float64], Tensor[(15, 7, 2), float64], Tensor[(14, 5, 7), float64]) */;
  %120.3
}

def @func_7368() -> (Tensor[(192, 2), float64], Tensor[(14), int32], Tensor[(210), int32], Tensor[(15, 2, 7), float32]) {
  %130 = fn () -> (Tensor[(192, 2), float64], Tensor[(14), int32], Tensor[(210), int32], Tensor[(15, 2, 7), float32]) {
    %121 = @func_5186() /* ty=(Tensor[(12, 10, 13), bool], Tensor[(384), float64], Tensor[(936, 2), float64], Tensor[(192, 2), float64], Tensor[(1404), float64]) */;
    %122 = cast(meta[relay.Constant][5] /* ty=Tensor[(14), int32] */, dtype="int32") /* ty=Tensor[(14), int32] */;
    %123 = cast(meta[relay.Constant][6] /* ty=Tensor[(210), int32] */, dtype="int32") /* ty=Tensor[(210), int32] */;
    %124 = reshape(%122, newshape=[1, 2, 7]) /* ty=Tensor[(1, 2, 7), int32] */;
    %125 = reshape(%123, newshape=[15, 2, 7]) /* ty=Tensor[(15, 2, 7), int32] */;
    %126 = @func_2396(%124, %125) /* ty=Tensor[(15, 2, 7), bool] */;
    %127 = cast(%126, dtype="float32") /* ty=Tensor[(15, 2, 7), float32] */;
    %128 = %121.3;
    %129 = sqrt(%127) /* ty=Tensor[(15, 2, 7), float32] */;
    (%128, meta[relay.Constant][5] /* ty=Tensor[(14), int32] */, meta[relay.Constant][6] /* ty=Tensor[(210), int32] */, %129)
  };
  %130() /* ty=(Tensor[(192, 2), float64], Tensor[(14), int32], Tensor[(210), int32], Tensor[(15, 2, 7), float32]) */
}

def @func_4089() -> (Tensor[(12, 10, 13), float32],) {
  %134 = fn () -> (Tensor[(12, 10, 13), float32],) {
    %131 = @func_4001() /* ty=Tensor[(12, 10, 13), bool] */;
    %132 = cast(%131, dtype="float32") /* ty=Tensor[(12, 10, 13), float32] */;
    %133 = sinh(%132) /* ty=Tensor[(12, 10, 13), float32] */;
    (%133,)
  };
  %134() /* ty=(Tensor[(12, 10, 13), float32],) */
}

def @func_6194(%var_6193: Tensor[(14, 5, 7), float64]) -> (Tensor[(14, 5, 7), uint8],) {
  %142 = fn (%var_6175: Tensor[(14, 5, 7), float64]) -> (Tensor[(14, 5, 7), uint8],) {
    %135 = @func_6082() /* ty=(Tensor[(14, 5, 7), float64],) */;
    %136 = %135.0;
    %137 = cast(%var_6175, dtype="uint8") /* ty=Tensor[(14, 5, 7), uint8] */;
    %138 = shape_of(%136, dtype="int32") /* ty=Tensor[(3), int32] */;
    %139 = cast(%136, dtype="uint8") /* ty=Tensor[(14, 5, 7), uint8] */;
    %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %141 = maximum(%139, %140) /* ty=Tensor[(14, 5, 7), uint8] */;
    (%141,)
  };
  %142(%var_6193) /* ty=(Tensor[(14, 5, 7), uint8],) */
}

def @func_1148(%var_1146: Tensor[(8, 6, 8), float64], %var_1147: Tensor[(1404), float64]) -> (Tensor[(1404), float64], Tensor[(195, 2), bool], Tensor[(8, 6, 8), float32]) {
  %160 = fn (%var_1100: Tensor[(8, 6, 8), float64], %var_1109: Tensor[(1404), float64]) -> (Tensor[(1404), float64], Tensor[(195, 2), bool], Tensor[(8, 6, 8), float32]) {
    %143 = cast(%var_1109, dtype="float64") /* ty=Tensor[(1404), float64] */;
    %144 = cast(meta[relay.Constant][7] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
    %145 = cast(meta[relay.Constant][7] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
    %146 = reshape(%143, newshape=[12, 13, 9]) /* ty=Tensor[(12, 13, 9), float64] */;
    %147 = reshape(%144, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
    %148 = reshape(%145, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
    %149 = @func_922(%146, %147, %148) /* ty=(Tensor[(6, 13, 5), float32], Tensor[(12, 13, 9), int32], Tensor[(195, 2), bool]) */;
    %150 = %149.2;
    %151 = cast(meta[relay.Constant][7] /* ty=Tensor[(390), float32] */, dtype="bool") /* ty=Tensor[(390), bool] */;
    %152 = shape_of(%150, dtype="int32") /* ty=Tensor[(2), int32] */;
    %153 = cast(%150, dtype="bool") /* ty=Tensor[(195, 2), bool] */;
    %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %155 = cast(%var_1100, dtype="float64") /* ty=Tensor[(8, 6, 8), float64] */;
    %156 = atan(%155) /* ty=Tensor[(8, 6, 8), float64] */;
    %157 = cast(%156, dtype="float32") /* ty=Tensor[(8, 6, 8), float32] */;
    %158 = equal(%153, %154) /* ty=Tensor[(195, 2), bool] */;
    %159 = log2(%157) /* ty=Tensor[(8, 6, 8), float32] */;
    (%var_1109, %158, %159)
  };
  %160(%var_1146, %var_1147) /* ty=(Tensor[(1404), float64], Tensor[(195, 2), bool], Tensor[(8, 6, 8), float32]) */
}

def @func_8893(%var_8890: Tensor[(330), float64], %var_8891: Tensor[(390), float32], %var_8892: Tensor[(480), float64]) -> (Tensor[(14, 5, 7), float32], Tensor[(192, 2), float32], Tensor[(540), int8], Tensor[(330), float64], Tensor[(390), float32], Tensor[(480), float64], Tensor[(676), int8], Tensor[(12, 10, 13), float32]) {
  @func_8888(%var_8890, %var_8891, %var_8892) /* ty=(Tensor[(14, 5, 7), float32], Tensor[(192, 2), float32], Tensor[(540), int8], Tensor[(330), float64], Tensor[(390), float32], Tensor[(480), float64], Tensor[(676), int8], Tensor[(12, 10, 13), float32]) */
}

def @func_8439() -> (Tensor[(936, 2), float64], Tensor[(14, 5, 7), float64], Tensor[(1404), float64], Tensor[(1, 1404), float64]) {
  %169 = fn () -> (Tensor[(936, 2), float64], Tensor[(14, 5, 7), float64], Tensor[(1404), float64], Tensor[(1, 1404), float64]) {
    %161 = @func_6731() /* ty=(Tensor[(936, 2), float64],) */;
    %162 = @func_7469() /* ty=(Tensor[(14, 5, 7), float64],) */;
    %163 = cast(meta[relay.Constant][8] /* ty=Tensor[(1, 1404), float64] */, dtype="float64") /* ty=Tensor[(1, 1404), float64] */;
    %164 = reshape(%163, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
    %165 = @func_7451(%164) /* ty=(Tensor[(936, 2), float64], Tensor[(390), int32], Tensor[(1404), float64]) */;
    %166 = %161.0;
    %167 = %162.0;
    %168 = %165.2;
    (%166, %167, %168, meta[relay.Constant][8] /* ty=Tensor[(1, 1404), float64] */)
  };
  %169() /* ty=(Tensor[(936, 2), float64], Tensor[(14, 5, 7), float64], Tensor[(1404), float64], Tensor[(1, 1404), float64]) */
}

def @func_7707() -> (Tensor[(14, 5, 7), float32],) {
  %170 = @func_6153() /* ty=(Tensor[(14, 5, 7), float64], Tensor[(12, 10, 13), float32], Tensor[(14, 5, 7), float64]) */;
  %171 = %170.2;
  %172 = cast(meta[relay.Constant][9] /* ty=Tensor[(14, 5, 7), float64] */, dtype="float32") /* ty=Tensor[(14, 5, 7), float32] */;
  %173 = shape_of(%171, dtype="int32") /* ty=Tensor[(3), int32] */;
  %174 = cast(%171, dtype="float32") /* ty=Tensor[(14, 5, 7), float32] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %176 = floor_mod(%174, %175) /* ty=Tensor[(14, 5, 7), float32] */;
  (%176,)
}

def @func_6932() -> (Tensor[(14, 5, 7), float64], Tensor[(12, 10, 13), float32]) {
  %181 = fn () -> (Tensor[(14, 5, 7), float64], Tensor[(12, 10, 13), float32]) {
    %177 = @func_4177() /* ty=(Tensor[(14, 5, 7), float64],) */;
    %178 = @func_4088() /* ty=(Tensor[(12, 10, 13), float32],) */;
    %179 = %177.0;
    %180 = %178.0;
    (%179, %180)
  };
  %181() /* ty=(Tensor[(14, 5, 7), float64], Tensor[(12, 10, 13), float32]) */
}

def @func_6625(%var_6622: Tensor[(16, 11, 1), bool], %var_6623: Tensor[(16, 11, 14), bool], %var_6624: Tensor[(16, 11, 14), bool]) -> (Tensor[(16, 11, 14), bool], Tensor[(16, 11, 14), int64]) {
  %191 = fn (%var_6590: Tensor[(16, 11, 1), bool], %var_6591: Tensor[(16, 11, 14), bool], %var_6602: Tensor[(16, 11, 14), bool]) -> (Tensor[(16, 11, 14), bool], Tensor[(16, 11, 14), int64]) {
    %182 = cast(%var_6590, dtype="bool") /* ty=Tensor[(16, 11, 1), bool] */;
    %183 = cast(%var_6591, dtype="bool") /* ty=Tensor[(16, 11, 14), bool] */;
    %184 = cast(%var_6590, dtype="float64") /* ty=Tensor[(16, 11, 1), float64] */;
    %185 = cast(%var_6602, dtype="float64") /* ty=Tensor[(16, 11, 14), float64] */;
    %186 = mod(%184, %185) /* ty=Tensor[(16, 11, 14), float64] */;
    %187 = cast(%var_6590, dtype="int64") /* ty=Tensor[(16, 11, 1), int64] */;
    %188 = cast(%186, dtype="int64") /* ty=Tensor[(16, 11, 14), int64] */;
    %189 = logical_or(%182, %183) /* ty=Tensor[(16, 11, 14), bool] */;
    %190 = bitwise_xor(%187, %188) /* ty=Tensor[(16, 11, 14), int64] */;
    (%189, %190)
  };
  %191(%var_6622, %var_6623, %var_6624) /* ty=(Tensor[(16, 11, 14), bool], Tensor[(16, 11, 14), int64]) */
}

def @func_6877() -> Tensor[(14, 5, 7), float64] {
  %192 = @func_6387() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %192.0
}

def @func_7051(%var_7049: Tensor[(13, 11, 11), bool], %var_7050: Tensor[(13, 11, 11), bool]) -> Tensor[(13, 11, 11), bool] {
  @func_7047(%var_7049, %var_7050) /* ty=Tensor[(13, 11, 11), bool] */
}

def @func_7256(%var_7251: Tensor[(11, 3, 10), float64], %var_7252: Tensor[(195, 2), float32], %var_7253: Tensor[(480), float64], %var_7254: Tensor[(2, 192), float64], %var_7255: Tensor[(676), int8]) -> (Tensor[(11, 3, 10), float64], Tensor[(936, 2), float64], Tensor[(6, 13, 5), float32], Tensor[(195, 2), float32], Tensor[(12, 10, 13), bool], Tensor[(480), float64], Tensor[(2, 192), float64], Tensor[(676), int8], Tensor[(390), float32], Tensor[(540), int8], Tensor[(1404), float64]) {
  @func_7249(%var_7251, %var_7252, %var_7253, %var_7254, %var_7255) /* ty=(Tensor[(11, 3, 10), float64], Tensor[(936, 2), float64], Tensor[(6, 13, 5), float32], Tensor[(195, 2), float32], Tensor[(12, 10, 13), bool], Tensor[(480), float64], Tensor[(2, 192), float64], Tensor[(676), int8], Tensor[(390), float32], Tensor[(540), int8], Tensor[(1404), float64]) */
}

def @func_8136() -> (Tensor[(14, 5, 7), float64],) {
  %193 = @func_6387() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %194 = %193.0;
  (%194,)
}

def @func_5132(%var_5057: Tensor[(3, 10, 16), float64], %var_5081: Tensor[(1872, 1), float64], %var_5082: Tensor[(384), float64], %var_5088: Tensor[(676, 1), int8]) -> (Tensor[(384), float64], Tensor[(1872, 1), float64], Tensor[(384), float64], Tensor[(1404), float64], Tensor[(13, 13, 4), float32], Tensor[(676, 1), int8], Tensor[(12, 10, 13), bool], Tensor[(3, 10, 16), float64], Tensor[(12, 10, 13), float32], Tensor[(3, 10, 16), float32], Tensor[(12, 10, 13), bool]) {
  %195 = cast(%var_5081, dtype="float64") /* ty=Tensor[(1872, 1), float64] */;
  %196 = cast(%var_5082, dtype="float64") /* ty=Tensor[(384), float64] */;
  %197 = cast(meta[relay.Constant][10] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %198 = reshape(%195, newshape=[12, 13, 12]) /* ty=Tensor[(12, 13, 12), float64] */;
  %199 = reshape(%196, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %200 = reshape(%197, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
  %201 = @func_4670(%198, %199, %200) /* ty=(Tensor[(12, 13, 12), bool], Tensor[(12, 13, 12), float32], Tensor[(8, 6, 8), float32], Tensor[(384), float64], Tensor[(1404), float64], Tensor[(240), float64], Tensor[(390), float32], Tensor[(1456), float32]) */;
  %202 = cast(%var_5088, dtype="int8") /* ty=Tensor[(676, 1), int8] */;
  %203 = reshape(%202, newshape=[13, 13, 4]) /* ty=Tensor[(13, 13, 4), int8] */;
  %204 = @func_2955(%203) /* ty=(Tensor[(13, 13, 4), float64], Tensor[(13, 13, 4), float32]) */;
  %205 = cast(%var_5057, dtype="float64") /* ty=Tensor[(3, 10, 16), float64] */;
  %206 = cos(%205) /* ty=Tensor[(3, 10, 16), float64] */;
  %207 = cast(%206, dtype="float32") /* ty=Tensor[(3, 10, 16), float32] */;
  %208 = log2(%207) /* ty=Tensor[(3, 10, 16), float32] */;
  %209 = cast(%var_5057, dtype="float64") /* ty=Tensor[(3, 10, 16), float64] */;
  %210 = shape_of(%208, dtype="int32") /* ty=Tensor[(3), int32] */;
  %211 = cast(%208, dtype="float64") /* ty=Tensor[(3, 10, 16), float64] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %213 = cast(%var_5088, dtype="int8") /* ty=Tensor[(676, 1), int8] */;
  %214 = reshape(%213, newshape=[13, 52]) /* ty=Tensor[(13, 52), int8] */;
  %215 = @func_4909(%214) /* ty=(Tensor[(12, 10, 13), float32], Tensor[(13, 13, 4), float32], Tensor[(13, 52), int8]) */;
  %216 = cast(%206, dtype="float32") /* ty=Tensor[(3, 10, 16), float32] */;
  %217 = %201.3;
  %218 = %204.1;
  %219 = @func_4556() /* ty=Tensor[(12, 10, 13), bool] */;
  %220 = subtract(%211, %212) /* ty=Tensor[(3, 10, 16), float64] */;
  %221 = %215.0;
  %222 = log10(%216) /* ty=Tensor[(3, 10, 16), float32] */;
  %223 = @func_4001() /* ty=Tensor[(12, 10, 13), bool] */;
  (%217, %var_5081, %var_5082, meta[relay.Constant][10] /* ty=Tensor[(1404), float64] */, %218, %var_5088, %219, %220, %221, %222, %223)
}

def @func_7047(%var_7042: Tensor[(13, 11, 11), bool], %var_7043: Tensor[(13, 11, 11), bool]) -> Tensor[(13, 11, 11), bool] {
  %224 = cast(%var_7043, dtype="bool") /* ty=Tensor[(13, 11, 11), bool] */;
  %225 = shape_of(%var_7042, dtype="int32") /* ty=Tensor[(3), int32] */;
  %226 = cast(%var_7042, dtype="bool") /* ty=Tensor[(13, 11, 11), bool] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%226, %227) /* ty=Tensor[(13, 11, 11), bool] */
}

def @func_6082() -> (Tensor[(14, 5, 7), float64],) {
  %228 = @func_4118() /* ty=(Tensor[(14, 5, 7), float64], Tensor[(12, 10, 13), bool]) */;
  %229 = %228.0;
  (%229,)
}

def @func_2399(%var_2397: Tensor[(1, 2, 7), int32], %var_2398: Tensor[(15, 2, 7), int32]) -> Tensor[(15, 2, 7), bool] {
  %235 = fn (%var_2386: Tensor[(1, 2, 7), int32], %var_2387: Tensor[(15, 2, 7), int32]) -> Tensor[(15, 2, 7), bool] {
    %230 = cast(%var_2386, dtype="int32") /* ty=Tensor[(1, 2, 7), int32] */;
    %231 = cast(%var_2387, dtype="int32") /* ty=Tensor[(15, 2, 7), int32] */;
    %232 = maximum(%230, %231) /* ty=Tensor[(15, 2, 7), int32] */;
    %233 = cast(%var_2386, dtype="bool") /* ty=Tensor[(1, 2, 7), bool] */;
    %234 = cast(%232, dtype="bool") /* ty=Tensor[(15, 2, 7), bool] */;
    less(%233, %234) /* ty=Tensor[(15, 2, 7), bool] */
  };
  %235(%var_2397, %var_2398) /* ty=Tensor[(15, 2, 7), bool] */
}

def @func_6731() -> (Tensor[(936, 2), float64],) {
  %236 = @func_6509() /* ty=Tensor[(936, 2), float64] */;
  (%236,)
}

def @func_4342(%var_4338: Tensor[(12, 10, 13), float32], %var_4339: Tensor[(540), int8], %var_4340: Tensor[(1404), float64], %var_4341: Tensor[(390), float32]) -> (Tensor[(12, 10, 13), float64], Tensor[(1404), float64], Tensor[(540), int8], Tensor[(1404), float64], Tensor[(390), float32]) {
  @func_4336(%var_4338, %var_4339, %var_4340, %var_4341) /* ty=(Tensor[(12, 10, 13), float64], Tensor[(1404), float64], Tensor[(540), int8], Tensor[(1404), float64], Tensor[(390), float32]) */
}

def @func_5326(%var_5303: Tensor[(825), float64]) -> (Tensor[(12, 10, 13), float32], Tensor[(13, 13, 4), float64], Tensor[(825), float64], Tensor[(12, 10, 13), bool]) {
  %237 = @func_4088() /* ty=(Tensor[(12, 10, 13), float32],) */;
  %238 = cast(%var_5303, dtype="float64") /* ty=Tensor[(825), float64] */;
  %239 = reshape(%238, newshape=[11, 15, 5]) /* ty=Tensor[(11, 15, 5), float64] */;
  %240 = @func_3712(%239) /* ty=(Tensor[(13, 13, 4), float64], Tensor[(676), int8], Tensor[(11, 15, 5), float64]) */;
  %241 = @func_4118() /* ty=(Tensor[(14, 5, 7), float64], Tensor[(12, 10, 13), bool]) */;
  %242 = %237.0;
  %243 = %240.0;
  %244 = %241.1;
  (%242, %243, %var_5303, %244)
}

def @func_6373(%var_6335: Tensor[(676), int8]) -> (Tensor[(14, 5, 7), float64], Tensor[(702, 2), float64], Tensor[(1404), float64], Tensor[(676), int8], Tensor[(12, 10, 13), float64], Tensor[(936, 2), float64]) {
  %245 = @func_6082() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %246 = cast(meta[relay.Constant][11] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %247 = cast(%var_6335, dtype="int8") /* ty=Tensor[(676), int8] */;
  %248 = reshape(%246, newshape=[702, 2]) /* ty=Tensor[(702, 2), float64] */;
  %249 = reshape(%247, newshape=[676]) /* ty=Tensor[(676), int8] */;
  %250 = @func_5694(%248, %249) /* ty=(Tensor[(12, 10, 13), float32], Tensor[(384), float64], Tensor[(702, 2), uint64], Tensor[(702, 2), float64], Tensor[(12, 10, 13), bool], Tensor[(12, 10, 13), float32], Tensor[(676), int8], Tensor[(702, 2), bool], Tensor[(702, 2), int32], Tensor[(1404), float64], Tensor[(480), float64], Tensor[(1872), float64], Tensor[(702, 2), bool]) */;
  %251 = @func_4001() /* ty=Tensor[(12, 10, 13), bool] */;
  %252 = cast(%251, dtype="float32") /* ty=Tensor[(12, 10, 13), float32] */;
  %253 = acosh(%252) /* ty=Tensor[(12, 10, 13), float32] */;
  %254 = cast(%251, dtype="int16") /* ty=Tensor[(12, 10, 13), int16] */;
  %255 = shape_of(%253, dtype="int32") /* ty=Tensor[(3), int32] */;
  %256 = cast(%253, dtype="int16") /* ty=Tensor[(12, 10, 13), int16] */;
  %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %258 = multiply(%256, %257) /* ty=Tensor[(12, 10, 13), int16] */;
  %259 = cast(%258, dtype="float64") /* ty=Tensor[(12, 10, 13), float64] */;
  %260 = @func_5186() /* ty=(Tensor[(12, 10, 13), bool], Tensor[(384), float64], Tensor[(936, 2), float64], Tensor[(192, 2), float64], Tensor[(1404), float64]) */;
  %261 = %245.0;
  %262 = %250.3;
  %263 = sin(%259) /* ty=Tensor[(12, 10, 13), float64] */;
  %264 = %260.2;
  (%261, %262, meta[relay.Constant][11] /* ty=Tensor[(1404), float64] */, %var_6335, %263, %264)
}

def @func_7454(%var_7452: Tensor[(1404), float64]) -> (Tensor[(936, 2), float64], Tensor[(390), int32], Tensor[(1404), float64]) {
  @func_7451(%var_7452) /* ty=(Tensor[(936, 2), float64], Tensor[(390), int32], Tensor[(1404), float64]) */
}

def @func_6456() -> Tensor[(14, 5, 7), float64] {
  %265 = @func_6387() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %265.0
}

def @func_6260() -> (Tensor[(12, 10, 13), float32], Tensor[(14, 5, 7), float64]) {
  %266 = @func_4088() /* ty=(Tensor[(12, 10, 13), float32],) */;
  %267 = @func_6082() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %268 = %266.0;
  %269 = %267.0;
  (%268, %269)
}

def @func_8782() -> (Tensor[(15, 7, 2), float64], Tensor[(384), float64], Tensor[(15, 7, 2), float64], Tensor[(14, 5, 7), float64]) {
  %281 = fn () -> (Tensor[(15, 7, 2), float64], Tensor[(384), float64], Tensor[(15, 7, 2), float64], Tensor[(14, 5, 7), float64]) {
    %270 = cast(meta[relay.Constant][12] /* ty=Tensor[(15, 7, 2), float64] */, dtype="float64") /* ty=Tensor[(15, 7, 2), float64] */;
    %271 = @func_5821() /* ty=(Tensor[(384), float64],) */;
    %272 = cast(meta[relay.Constant][12] /* ty=Tensor[(15, 7, 2), float64] */, dtype="float64") /* ty=Tensor[(15, 7, 2), float64] */;
    %273 = sigmoid(%272) /* ty=Tensor[(15, 7, 2), float64] */;
    %274 = cast(%273, dtype="float32") /* ty=Tensor[(15, 7, 2), float32] */;
    %275 = asin(%274) /* ty=Tensor[(15, 7, 2), float32] */;
    %276 = cast(%275, dtype="float64") /* ty=Tensor[(15, 7, 2), float64] */;
    %277 = log(%270) /* ty=Tensor[(15, 7, 2), float64] */;
    %278 = %271.0;
    %279 = erf(%276) /* ty=Tensor[(15, 7, 2), float64] */;
    %280 = @func_8201() /* ty=Tensor[(14, 5, 7), float64] */;
    (%277, %278, %279, %280)
  };
  %281() /* ty=(Tensor[(15, 7, 2), float64], Tensor[(384), float64], Tensor[(15, 7, 2), float64], Tensor[(14, 5, 7), float64]) */
}

def @func_7470() -> (Tensor[(14, 5, 7), float64],) {
  %284 = fn () -> (Tensor[(14, 5, 7), float64],) {
    %282 = @func_5883() /* ty=(Tensor[(14, 5, 7), float64],) */;
    %283 = %282.0;
    (%283,)
  };
  %284() /* ty=(Tensor[(14, 5, 7), float64],) */
}

def @func_5876() -> (Tensor[(14, 5, 7), float64],) {
  %287 = fn () -> (Tensor[(14, 5, 7), float64],) {
    %285 = @func_4118() /* ty=(Tensor[(14, 5, 7), float64], Tensor[(12, 10, 13), bool]) */;
    %286 = %285.0;
    (%286,)
  };
  %287() /* ty=(Tensor[(14, 5, 7), float64],) */
}

def @func_8519(%var_8517: Tensor[(1560), float32], %var_8518: Tensor[(390), float32]) -> (Tensor[(14, 5, 7), float64], Tensor[(540), int8], Tensor[(1560), float32], Tensor[(540), int8], Tensor[(1404), float64], Tensor[(12, 10, 13), bool], Tensor[(390), float64], Tensor[(2, 8, 7), uint64], Tensor[(4, 28), uint64]) {
  %308 = fn (%var_8502: Tensor[(1560), float32], %var_8505: Tensor[(390), float32]) -> (Tensor[(14, 5, 7), float64], Tensor[(540), int8], Tensor[(1560), float32], Tensor[(540), int8], Tensor[(1404), float64], Tensor[(12, 10, 13), bool], Tensor[(390), float64], Tensor[(2, 8, 7), uint64], Tensor[(4, 28), uint64]) {
    %288 = cast(%var_8502, dtype="float32") /* ty=Tensor[(1560), float32] */;
    %289 = cast(meta[relay.Constant][13] /* ty=Tensor[(540), int8] */, dtype="int8") /* ty=Tensor[(540), int8] */;
    %290 = cast(meta[relay.Constant][14] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
    %291 = cast(%var_8505, dtype="float32") /* ty=Tensor[(390), float32] */;
    %292 = reshape(%288, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), float32] */;
    %293 = reshape(%289, newshape=[540]) /* ty=Tensor[(540), int8] */;
    %294 = reshape(%290, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
    %295 = reshape(%291, newshape=[390]) /* ty=Tensor[(390), float32] */;
    %296 = @func_4336(%292, %293, %294, %295) /* ty=(Tensor[(12, 10, 13), float64], Tensor[(1404), float64], Tensor[(540), int8], Tensor[(1404), float64], Tensor[(390), float32]) */;
    %297 = cast(%var_8505, dtype="float64") /* ty=Tensor[(390), float64] */;
    %298 = cast(meta[relay.Constant][15] /* ty=Tensor[(4, 28), uint64] */, dtype="uint64") /* ty=Tensor[(4, 28), uint64] */;
    %299 = cast(meta[relay.Constant][15] /* ty=Tensor[(4, 28), uint64] */, dtype="uint64") /* ty=Tensor[(4, 28), uint64] */;
    %300 = reshape(%298, newshape=[2, 8, 7]) /* ty=Tensor[(2, 8, 7), uint64] */;
    %301 = reshape(%299, newshape=[2, 8, 7]) /* ty=Tensor[(2, 8, 7), uint64] */;
    %302 = @func_1369(%300, %301) /* ty=(Tensor[(2, 8, 7), uint64], Tensor[(2, 8, 7), bool]) */;
    %303 = @func_8057() /* ty=Tensor[(14, 5, 7), float64] */;
    %304 = %296.2;
    %305 = @func_8090() /* ty=Tensor[(12, 10, 13), bool] */;
    %306 = erf(%297) /* ty=Tensor[(390), float64] */;
    %307 = %302.0;
    (%303, %304, %var_8502, meta[relay.Constant][13] /* ty=Tensor[(540), int8] */, meta[relay.Constant][14] /* ty=Tensor[(1404), float64] */, %305, %306, %307, meta[relay.Constant][15] /* ty=Tensor[(4, 28), uint64] */)
  };
  %308(%var_8517, %var_8518) /* ty=(Tensor[(14, 5, 7), float64], Tensor[(540), int8], Tensor[(1560), float32], Tensor[(540), int8], Tensor[(1404), float64], Tensor[(12, 10, 13), bool], Tensor[(390), float64], Tensor[(2, 8, 7), uint64], Tensor[(4, 28), uint64]) */
}

def @func_5187() -> (Tensor[(12, 10, 13), bool], Tensor[(384), float64], Tensor[(936, 2), float64], Tensor[(192, 2), float64], Tensor[(1404), float64]) {
  %318 = fn () -> (Tensor[(12, 10, 13), bool], Tensor[(384), float64], Tensor[(936, 2), float64], Tensor[(192, 2), float64], Tensor[(1404), float64]) {
    %309 = cast(meta[relay.Constant][16] /* ty=Tensor[(936, 2), float64] */, dtype="float64") /* ty=Tensor[(936, 2), float64] */;
    %310 = cast(meta[relay.Constant][17] /* ty=Tensor[(192, 2), float64] */, dtype="float64") /* ty=Tensor[(192, 2), float64] */;
    %311 = cast(meta[relay.Constant][18] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
    %312 = reshape(%309, newshape=[12, 13, 12]) /* ty=Tensor[(12, 13, 12), float64] */;
    %313 = reshape(%310, newshape=[384]) /* ty=Tensor[(384), float64] */;
    %314 = reshape(%311, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
    %315 = @func_4670(%312, %313, %314) /* ty=(Tensor[(12, 13, 12), bool], Tensor[(12, 13, 12), float32], Tensor[(8, 6, 8), float32], Tensor[(384), float64], Tensor[(1404), float64], Tensor[(240), float64], Tensor[(390), float32], Tensor[(1456), float32]) */;
    %316 = @func_4001() /* ty=Tensor[(12, 10, 13), bool] */;
    %317 = %315.3;
    (%316, %317, meta[relay.Constant][16] /* ty=Tensor[(936, 2), float64] */, meta[relay.Constant][17] /* ty=Tensor[(192, 2), float64] */, meta[relay.Constant][18] /* ty=Tensor[(1404), float64] */)
  };
  %318() /* ty=(Tensor[(12, 10, 13), bool], Tensor[(384), float64], Tensor[(936, 2), float64], Tensor[(192, 2), float64], Tensor[(1404), float64]) */
}

def @func_6030(%var_6029: Tensor[(864), float32]) -> (Tensor[(14, 5, 7), float64], Tensor[(6, 9, 16), float32], Tensor[(864), float32]) {
  %324 = fn (%var_6025: Tensor[(864), float32]) -> (Tensor[(14, 5, 7), float64], Tensor[(6, 9, 16), float32], Tensor[(864), float32]) {
    %319 = @func_5875() /* ty=(Tensor[(14, 5, 7), float64],) */;
    %320 = cast(%var_6025, dtype="float32") /* ty=Tensor[(864), float32] */;
    %321 = reshape(%320, newshape=[6, 9, 16]) /* ty=Tensor[(6, 9, 16), float32] */;
    %322 = %319.0;
    %323 = @func_5945(%321) /* ty=Tensor[(6, 9, 16), float32] */;
    (%322, %323, %var_6025)
  };
  %324(%var_6029) /* ty=(Tensor[(14, 5, 7), float64], Tensor[(6, 9, 16), float32], Tensor[(864), float32]) */
}

def @func_8672(%var_8670: Tensor[(390), float32], %var_8671: Tensor[(56, 26), float64]) -> (Tensor[(14, 5, 7), float64], Tensor[(195, 2), float64], Tensor[(702, 2), uint64], Tensor[(676), int8], Tensor[(14, 5, 7), float64], Tensor[(1404), bool], Tensor[(13, 8, 14), float64], Tensor[(56, 26), float64], Tensor[(14, 5, 7), float64], Tensor[(384), float64]) {
  @func_8668(%var_8670, %var_8671) /* ty=(Tensor[(14, 5, 7), float64], Tensor[(195, 2), float64], Tensor[(702, 2), uint64], Tensor[(676), int8], Tensor[(14, 5, 7), float64], Tensor[(1404), bool], Tensor[(13, 8, 14), float64], Tensor[(56, 26), float64], Tensor[(14, 5, 7), float64], Tensor[(384), float64]) */
}

def @func_4670(%var_4607: Tensor[(12, 13, 12), float64], %var_4631: Tensor[(384), float64], %var_4632: Tensor[(1404), float64]) -> (Tensor[(12, 13, 12), bool], Tensor[(12, 13, 12), float32], Tensor[(8, 6, 8), float32], Tensor[(384), float64], Tensor[(1404), float64], Tensor[(240), float64], Tensor[(390), float32], Tensor[(1456), float32]) {
  %325 = cast(0.952001f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %326 = cast(%var_4607, dtype="bool") /* ty=Tensor[(12, 13, 12), bool] */;
  %327 = cast(0.952001f64 /* ty=float64 */, dtype="float32") /* ty=float32 */;
  %328 = cast(%var_4607, dtype="float32") /* ty=Tensor[(12, 13, 12), float32] */;
  %329 = cast(%var_4631, dtype="float64") /* ty=Tensor[(384), float64] */;
  %330 = cast(%var_4632, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %331 = reshape(%329, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
  %332 = reshape(%330, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
  %333 = @func_1145(%331, %332) /* ty=(Tensor[(1404), float64], Tensor[(195, 2), bool], Tensor[(8, 6, 8), float32]) */;
  %334 = cast(meta[relay.Constant][19] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %335 = cast(meta[relay.Constant][20] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %336 = reshape(%334, newshape=[15, 8, 2]) /* ty=Tensor[(15, 8, 2), float64] */;
  %337 = reshape(%335, newshape=[390, 1]) /* ty=Tensor[(390, 1), float32] */;
  %338 = @func_1214(%336, %337) /* ty=(Tensor[(15, 8, 2), float64], Tensor[(13, 8, 14), float64], Tensor[(1456), float64], Tensor[(12, 13, 9), int32], Tensor[(1404), float64], Tensor[(390, 1), float32]) */;
  %339 = %338.2;
  %340 = cast(%339, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %341 = cast(0.952001f64 /* ty=float64 */, dtype="float32") /* ty=float32 */;
  %342 = less(%325, %326) /* ty=Tensor[(12, 13, 12), bool] */;
  %343 = floor_divide(%327, %328) /* ty=Tensor[(12, 13, 12), float32] */;
  %344 = %333.2;
  %345 = floor_mod(%340, %341) /* ty=Tensor[(1456), float32] */;
  (%342, %343, %344, %var_4631, %var_4632, meta[relay.Constant][19] /* ty=Tensor[(240), float64] */, meta[relay.Constant][20] /* ty=Tensor[(390), float32] */, %345)
}

def @func_7614() -> Tensor[(14, 5, 7), float64] {
  %347 = fn () -> Tensor[(14, 5, 7), float64] {
    %346 = @func_6931() /* ty=(Tensor[(14, 5, 7), float64], Tensor[(12, 10, 13), float32]) */;
    %346.0
  };
  %347() /* ty=Tensor[(14, 5, 7), float64] */
}

def @func_4003() -> Tensor[(12, 10, 13), bool] {
  @func_4001() /* ty=Tensor[(12, 10, 13), bool] */
}

def @func_4272(%var_4270: Tensor[(12, 10, 13), float32], %var_4271: Tensor[(1, 676), int8]) -> (Tensor[(12, 10, 13), int16], Tensor[(13, 13, 4), float32], Tensor[(15, 2, 7), bool], Tensor[(7, 2), int32], Tensor[(105, 2), int32], Tensor[(14, 5, 7), float64], Tensor[(?, 676), float32]) {
  %373 = fn (%var_4239: Tensor[(12, 10, 13), float32], %var_4245: Tensor[(1, 676), int8]) -> (Tensor[(12, 10, 13), int16], Tensor[(13, 13, 4), float32], Tensor[(15, 2, 7), bool], Tensor[(7, 2), int32], Tensor[(105, 2), int32], Tensor[(14, 5, 7), float64], Tensor[(?, 676), float32]) {
    %348 = @func_4088() /* ty=(Tensor[(12, 10, 13), float32],) */;
    %349 = %348.0;
    %350 = cast(%var_4239, dtype="int16") /* ty=Tensor[(12, 10, 13), int16] */;
    %351 = shape_of(%349, dtype="int32") /* ty=Tensor[(3), int32] */;
    %352 = cast(%349, dtype="int16") /* ty=Tensor[(12, 10, 13), int16] */;
    %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %354 = cast(%var_4245, dtype="int8") /* ty=Tensor[(1, 676), int8] */;
    %355 = reshape(%354, newshape=[13, 13, 4]) /* ty=Tensor[(13, 13, 4), int8] */;
    %356 = @func_2955(%355) /* ty=(Tensor[(13, 13, 4), float64], Tensor[(13, 13, 4), float32]) */;
    %357 = cast(meta[relay.Constant][21] /* ty=Tensor[(7, 2), int32] */, dtype="int32") /* ty=Tensor[(7, 2), int32] */;
    %358 = cast(meta[relay.Constant][22] /* ty=Tensor[(105, 2), int32] */, dtype="int32") /* ty=Tensor[(105, 2), int32] */;
    %359 = reshape(%357, newshape=[1, 2, 7]) /* ty=Tensor[(1, 2, 7), int32] */;
    %360 = reshape(%358, newshape=[15, 2, 7]) /* ty=Tensor[(15, 2, 7), int32] */;
    %361 = @func_4177() /* ty=(Tensor[(14, 5, 7), float64],) */;
    %362 = cast(%var_4245, dtype="float32") /* ty=Tensor[(1, 676), float32] */;
    %363 = cosh(%362) /* ty=Tensor[(1, 676), float32] */;
    %364 = cast(%var_4245, dtype="float32") /* ty=Tensor[(1, 676), float32] */;
    %365 = shape_of(%363, dtype="int32") /* ty=Tensor[(2), int32] */;
    %366 = cast(%363, dtype="float32") /* ty=Tensor[(1, 676), float32] */;
    %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %368 = bitwise_or(%352, %353) /* ty=Tensor[(12, 10, 13), int16] */;
    %369 = %356.1;
    %370 = @func_2396(%359, %360) /* ty=Tensor[(15, 2, 7), bool] */;
    %371 = %361.0;
    %372 = floor_mod(%366, %367) /* ty=Tensor[(?, 676), float32] */;
    (%368, %369, %370, meta[relay.Constant][21] /* ty=Tensor[(7, 2), int32] */, meta[relay.Constant][22] /* ty=Tensor[(105, 2), int32] */, %371, %372)
  };
  %373(%var_4270, %var_4271) /* ty=(Tensor[(12, 10, 13), int16], Tensor[(13, 13, 4), float32], Tensor[(15, 2, 7), bool], Tensor[(7, 2), int32], Tensor[(105, 2), int32], Tensor[(14, 5, 7), float64], Tensor[(?, 676), float32]) */
}

def @func_5138(%var_5134: Tensor[(3, 10, 16), float64], %var_5135: Tensor[(1872, 1), float64], %var_5136: Tensor[(384), float64], %var_5137: Tensor[(676, 1), int8]) -> (Tensor[(384), float64], Tensor[(1872, 1), float64], Tensor[(384), float64], Tensor[(1404), float64], Tensor[(13, 13, 4), float32], Tensor[(676, 1), int8], Tensor[(12, 10, 13), bool], Tensor[(3, 10, 16), float64], Tensor[(12, 10, 13), float32], Tensor[(3, 10, 16), float32], Tensor[(12, 10, 13), bool]) {
  @func_5132(%var_5134, %var_5135, %var_5136, %var_5137) /* ty=(Tensor[(384), float64], Tensor[(1872, 1), float64], Tensor[(384), float64], Tensor[(1404), float64], Tensor[(13, 13, 4), float32], Tensor[(676, 1), int8], Tensor[(12, 10, 13), bool], Tensor[(3, 10, 16), float64], Tensor[(12, 10, 13), float32], Tensor[(3, 10, 16), float32], Tensor[(12, 10, 13), bool]) */
}

def @func_1009(%var_1008: Tensor[(13, 8, 14), float64]) -> Tensor[(13, 8, 14), float64] {
  %375 = fn (%var_995: Tensor[(13, 8, 14), float64]) -> Tensor[(13, 8, 14), float64] {
    %374 = cast(%var_995, dtype="float64") /* ty=Tensor[(13, 8, 14), float64] */;
    log(%374) /* ty=Tensor[(13, 8, 14), float64] */
  };
  %375(%var_1008) /* ty=Tensor[(13, 8, 14), float64] */
}

def @func_8719(%var_8718: Tensor[(1440), uint16]) -> (Tensor[(12, 10, 13), float32], Tensor[(14, 5, 7), float64], Tensor[(14, 5, 7), float64], Tensor[(1440), uint16], Tensor[(14, 5, 7), float64]) {
  %388 = fn (%var_8698: Tensor[(1440), uint16]) -> (Tensor[(12, 10, 13), float32], Tensor[(14, 5, 7), float64], Tensor[(14, 5, 7), float64], Tensor[(1440), uint16], Tensor[(14, 5, 7), float64]) {
    %376 = @func_6441() /* ty=(Tensor[(2, 14, 9), float64], Tensor[(12, 10, 13), float32]) */;
    %377 = @func_8322() /* ty=(Tensor[(14, 5, 7), float64],) */;
    %378 = cast(%var_8698, dtype="uint16") /* ty=Tensor[(1440), uint16] */;
    %379 = cast(%var_8698, dtype="uint16") /* ty=Tensor[(1440), uint16] */;
    %380 = reshape(%378, newshape=[10, 16, 9]) /* ty=Tensor[(10, 16, 9), uint16] */;
    %381 = reshape(%379, newshape=[10, 16, 9]) /* ty=Tensor[(10, 16, 9), uint16] */;
    %382 = @func_7670(%380, %381) /* ty=(Tensor[(10, 16, 9), bool], Tensor[(14, 5, 7), float64]) */;
    %383 = @func_6387() /* ty=(Tensor[(14, 5, 7), float64],) */;
    %384 = %376.1;
    %385 = %377.0;
    %386 = %382.1;
    %387 = %383.0;
    (%384, %385, %386, %var_8698, %387)
  };
  %388(%var_8718) /* ty=(Tensor[(12, 10, 13), float32], Tensor[(14, 5, 7), float64], Tensor[(14, 5, 7), float64], Tensor[(1440), uint16], Tensor[(14, 5, 7), float64]) */
}

def @func_6841() -> Tensor[(14, 5, 7), float32] {
  @func_6795() /* ty=Tensor[(14, 5, 7), float32] */
}

def @func_4179() -> (Tensor[(14, 5, 7), float64],) {
  @func_4177() /* ty=(Tensor[(14, 5, 7), float64],) */
}

def @func_5883() -> (Tensor[(14, 5, 7), float64],) {
  %389 = @func_5584() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %390 = %389.0;
  (%390,)
}

def @func_8323() -> (Tensor[(14, 5, 7), float64],) {
  %392 = fn () -> (Tensor[(14, 5, 7), float64],) {
    %391 = @func_6877() /* ty=Tensor[(14, 5, 7), float64] */;
    (%391,)
  };
  %392() /* ty=(Tensor[(14, 5, 7), float64],) */
}

def @func_6458() -> Tensor[(14, 5, 7), float64] {
  @func_6456() /* ty=Tensor[(14, 5, 7), float64] */
}

def @func_6376(%var_6374: Tensor[(676), int8]) -> (Tensor[(14, 5, 7), float64], Tensor[(702, 2), float64], Tensor[(1404), float64], Tensor[(676), int8], Tensor[(12, 10, 13), float64], Tensor[(936, 2), float64]) {
  @func_6373(%var_6374) /* ty=(Tensor[(14, 5, 7), float64], Tensor[(702, 2), float64], Tensor[(1404), float64], Tensor[(676), int8], Tensor[(12, 10, 13), float64], Tensor[(936, 2), float64]) */
}

def @func_5556(%var_5554: Tensor[(169, 4), int8]) -> (Tensor[(12, 10, 13), float32], Tensor[(936, 2), float64], Tensor[(12, 10, 13), float32], Tensor[(169, 4), int8], Tensor[(6, 13, 5), float32]) {
  @func_5553(%var_5554) /* ty=(Tensor[(12, 10, 13), float32], Tensor[(936, 2), float64], Tensor[(12, 10, 13), float32], Tensor[(169, 4), int8], Tensor[(6, 13, 5), float32]) */
}

def @func_3715(%var_3713: Tensor[(11, 15, 5), float64]) -> (Tensor[(13, 13, 4), float64], Tensor[(676), int8], Tensor[(11, 15, 5), float64]) {
  @func_3712(%var_3713) /* ty=(Tensor[(13, 13, 4), float64], Tensor[(676), int8], Tensor[(11, 15, 5), float64]) */
}

def @func_5011(%var_5007: Tensor[(1560), bool], %var_5008: Tensor[(210), int32], %var_5009: Tensor[(270, 2), int8], %var_5010: Tensor[(1404), float64]) -> (Tensor[(15, 2, 7), bool], Tensor[(1, 14), int32], Tensor[(14, 5, 7), bool], Tensor[(12, 10, 13), bool], Tensor[(1560), bool], Tensor[(210), float32], Tensor[(14, 5, 7), float32], Tensor[(13, 13, 4), float32], Tensor[(676, 1), int8], Tensor[(540), int8], Tensor[(270, 2), int8], Tensor[(1404), float64], Tensor[(390), float32]) {
  @func_5005(%var_5007, %var_5008, %var_5009, %var_5010) /* ty=(Tensor[(15, 2, 7), bool], Tensor[(1, 14), int32], Tensor[(14, 5, 7), bool], Tensor[(12, 10, 13), bool], Tensor[(1560), bool], Tensor[(210), float32], Tensor[(14, 5, 7), float32], Tensor[(13, 13, 4), float32], Tensor[(676, 1), int8], Tensor[(540), int8], Tensor[(270, 2), int8], Tensor[(1404), float64], Tensor[(390), float32]) */
}

def @main(%var_9178: Tensor[(825), float64]) -> (Tensor[(14, 5, 7), float64], Tensor[(14, 5, 7), float64], Tensor[(14, 5, 7), float64], Tensor[(825), float64], Tensor[(12, 10, 13), float32], Tensor[(676), float64]) {
  %393 = @func_5885() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %394 = @func_6084() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %395 = cast(%var_9178, dtype="float64") /* ty=Tensor[(825), float64] */;
  %396 = reshape(%395, newshape=[11, 15, 5]) /* ty=Tensor[(11, 15, 5), float64] */;
  %397 = @func_3712(%396) /* ty=(Tensor[(13, 13, 4), float64], Tensor[(676), int8], Tensor[(11, 15, 5), float64]) */;
  %398 = %397.1;
  %399 = cast(%398, dtype="int8") /* ty=Tensor[(676), int8] */;
  %400 = reshape(%399, newshape=[169, 4]) /* ty=Tensor[(169, 4), int8] */;
  %401 = @func_5556(%400) /* ty=(Tensor[(12, 10, 13), float32], Tensor[(936, 2), float64], Tensor[(12, 10, 13), float32], Tensor[(169, 4), int8], Tensor[(6, 13, 5), float32]) */;
  %402 = cast(%var_9178, dtype="float64") /* ty=Tensor[(825), float64] */;
  %403 = reshape(%402, newshape=[11, 15, 5]) /* ty=Tensor[(11, 15, 5), float64] */;
  %404 = @func_3715(%403) /* ty=(Tensor[(13, 13, 4), float64], Tensor[(676), int8], Tensor[(11, 15, 5), float64]) */;
  %405 = %404.1;
  %406 = cast(%405, dtype="float64") /* ty=Tensor[(676), float64] */;
  %407 = %393.0;
  %408 = %394.0;
  %409 = @func_7613() /* ty=Tensor[(14, 5, 7), float64] */;
  %410 = %401.0;
  %411 = sqrt(%406) /* ty=Tensor[(676), float64] */;
  (%407, %408, %409, %var_9178, %410, %411)
}

def @func_5948(%var_5946: Tensor[(6, 9, 16), float32]) -> Tensor[(6, 9, 16), float32] {
  @func_5945(%var_5946) /* ty=Tensor[(6, 9, 16), float32] */
}

def @func_6796() -> Tensor[(14, 5, 7), float32] {
  %415 = fn () -> Tensor[(14, 5, 7), float32] {
    %412 = @func_5584() /* ty=(Tensor[(14, 5, 7), float64],) */;
    %413 = %412.0;
    %414 = cast(%413, dtype="float32") /* ty=Tensor[(14, 5, 7), float32] */;
    sigmoid(%414) /* ty=Tensor[(14, 5, 7), float32] */
  };
  %415() /* ty=Tensor[(14, 5, 7), float32] */
}

def @func_8888(%var_8871: Tensor[(330), float64], %var_8872: Tensor[(390), float32], %var_8873: Tensor[(480), float64]) -> (Tensor[(14, 5, 7), float32], Tensor[(192, 2), float32], Tensor[(540), int8], Tensor[(330), float64], Tensor[(390), float32], Tensor[(480), float64], Tensor[(676), int8], Tensor[(12, 10, 13), float32]) {
  %416 = @func_5186() /* ty=(Tensor[(12, 10, 13), bool], Tensor[(384), float64], Tensor[(936, 2), float64], Tensor[(192, 2), float64], Tensor[(1404), float64]) */;
  %417 = %416.3;
  %418 = cast(%417, dtype="float32") /* ty=Tensor[(192, 2), float32] */;
  %419 = cast(%var_8871, dtype="float64") /* ty=Tensor[(330), float64] */;
  %420 = cast(%var_8872, dtype="float32") /* ty=Tensor[(390), float32] */;
  %421 = cast(%var_8873, dtype="float64") /* ty=Tensor[(480), float64] */;
  %422 = cast(%417, dtype="float64") /* ty=Tensor[(192, 2), float64] */;
  %423 = cast(meta[relay.Constant][23] /* ty=Tensor[(676), int8] */, dtype="int8") /* ty=Tensor[(676), int8] */;
  %424 = reshape(%419, newshape=[11, 3, 10]) /* ty=Tensor[(11, 3, 10), float64] */;
  %425 = reshape(%420, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
  %426 = reshape(%421, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %427 = reshape(%422, newshape=[2, 192]) /* ty=Tensor[(2, 192), float64] */;
  %428 = reshape(%423, newshape=[676]) /* ty=Tensor[(676), int8] */;
  %429 = @func_7249(%424, %425, %426, %427, %428) /* ty=(Tensor[(11, 3, 10), float64], Tensor[(936, 2), float64], Tensor[(6, 13, 5), float32], Tensor[(195, 2), float32], Tensor[(12, 10, 13), bool], Tensor[(480), float64], Tensor[(2, 192), float64], Tensor[(676), int8], Tensor[(390), float32], Tensor[(540), int8], Tensor[(1404), float64]) */;
  %430 = @func_6441() /* ty=(Tensor[(2, 14, 9), float64], Tensor[(12, 10, 13), float32]) */;
  %431 = @func_6841() /* ty=Tensor[(14, 5, 7), float32] */;
  %432 = log2(%418) /* ty=Tensor[(192, 2), float32] */;
  %433 = %429.9;
  %434 = %430.1;
  (%431, %432, %433, %var_8871, %var_8872, %var_8873, meta[relay.Constant][23] /* ty=Tensor[(676), int8] */, %434)
}

def @func_926(%var_923: Tensor[(12, 13, 9), float64], %var_924: Tensor[(195, 2), float32], %var_925: Tensor[(195, 2), float32]) -> (Tensor[(6, 13, 5), float32], Tensor[(12, 13, 9), int32], Tensor[(195, 2), bool]) {
  %451 = fn (%var_898: Tensor[(12, 13, 9), float64], %var_902: Tensor[(195, 2), float32], %var_917: Tensor[(195, 2), float32]) -> (Tensor[(6, 13, 5), float32], Tensor[(12, 13, 9), int32], Tensor[(195, 2), bool]) {
    %435 = cast(%var_902, dtype="float32") /* ty=Tensor[(195, 2), float32] */;
    %436 = reshape(%435, newshape=[6, 13, 5]) /* ty=Tensor[(6, 13, 5), float32] */;
    %437 = @func_640(%436) /* ty=(Tensor[(6, 13, 5), float32],) */;
    %438 = cast(%var_898, dtype="float64") /* ty=Tensor[(12, 13, 9), float64] */;
    %439 = log10(%438) /* ty=Tensor[(12, 13, 9), float64] */;
    %440 = cast(%var_898, dtype="int32") /* ty=Tensor[(12, 13, 9), int32] */;
    %441 = shape_of(%439, dtype="int32") /* ty=Tensor[(3), int32] */;
    %442 = cast(%439, dtype="int32") /* ty=Tensor[(12, 13, 9), int32] */;
    %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %444 = cast(%var_917, dtype="bool") /* ty=Tensor[(195, 2), bool] */;
    %445 = shape_of(%var_902, dtype="int32") /* ty=Tensor[(2), int32] */;
    %446 = cast(%var_902, dtype="bool") /* ty=Tensor[(195, 2), bool] */;
    %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %448 = %437.0;
    %449 = subtract(%442, %443) /* ty=Tensor[(12, 13, 9), int32] */;
    %450 = not_equal(%446, %447) /* ty=Tensor[(195, 2), bool] */;
    (%448, %449, %450)
  };
  %451(%var_923, %var_924, %var_925) /* ty=(Tensor[(6, 13, 5), float32], Tensor[(12, 13, 9), int32], Tensor[(195, 2), bool]) */
}

def @func_5005(%var_4961: Tensor[(1560), bool], %var_4965: Tensor[(210), int32], %var_4998: Tensor[(270, 2), int8], %var_4999: Tensor[(1404), float64]) -> (Tensor[(15, 2, 7), bool], Tensor[(1, 14), int32], Tensor[(14, 5, 7), bool], Tensor[(12, 10, 13), bool], Tensor[(1560), bool], Tensor[(210), float32], Tensor[(14, 5, 7), float32], Tensor[(13, 13, 4), float32], Tensor[(676, 1), int8], Tensor[(540), int8], Tensor[(270, 2), int8], Tensor[(1404), float64], Tensor[(390), float32]) {
  %452 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 14), int32] */, dtype="int32") /* ty=Tensor[(1, 14), int32] */;
  %453 = cast(meta[relay.Constant][25] /* ty=Tensor[(210), int32] */, dtype="int32") /* ty=Tensor[(210), int32] */;
  %454 = reshape(%452, newshape=[1, 2, 7]) /* ty=Tensor[(1, 2, 7), int32] */;
  %455 = reshape(%453, newshape=[15, 2, 7]) /* ty=Tensor[(15, 2, 7), int32] */;
  %456 = @func_4177() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %457 = %456.0;
  %458 = @func_4177() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %459 = %458.0;
  %460 = cast(%459, dtype="uint64") /* ty=Tensor[(14, 5, 7), uint64] */;
  %461 = shape_of(%457, dtype="int32") /* ty=Tensor[(3), int32] */;
  %462 = cast(%457, dtype="uint64") /* ty=Tensor[(14, 5, 7), uint64] */;
  %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %464 = left_shift(%462, %463) /* ty=Tensor[(14, 5, 7), uint64] */;
  %465 = cast(%459, dtype="bool") /* ty=Tensor[(14, 5, 7), bool] */;
  %466 = shape_of(%464, dtype="int32") /* ty=Tensor[(3), int32] */;
  %467 = cast(%464, dtype="bool") /* ty=Tensor[(14, 5, 7), bool] */;
  %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %469 = cast(%var_4961, dtype="bool") /* ty=Tensor[(1560), bool] */;
  %470 = cast(%var_4961, dtype="bool") /* ty=Tensor[(1560), bool] */;
  %471 = reshape(%469, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), bool] */;
  %472 = reshape(%470, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), bool] */;
  %473 = @func_4767(%471, %472) /* ty=(Tensor[(12, 10, 13), bool], Tensor[(12, 10, 13), int32], Tensor[(6, 13, 5), float32], Tensor[(390), float32], Tensor[(14, 5, 7), float64]) */;
  %474 = cast(%var_4965, dtype="float32") /* ty=Tensor[(210), float32] */;
  %475 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(210), int32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %476 = cast(meta[relay.Constant][25] /* ty=Tensor[(210), int32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?), float32] */;
  %478 = cast(%457, dtype="float32") /* ty=Tensor[(14, 5, 7), float32] */;
  %479 = cast(meta[relay.Constant][26] /* ty=Tensor[(676, 1), int8] */, dtype="int8") /* ty=Tensor[(676, 1), int8] */;
  %480 = reshape(%479, newshape=[13, 13, 4]) /* ty=Tensor[(13, 13, 4), int8] */;
  %481 = @func_2955(%480) /* ty=(Tensor[(13, 13, 4), float64], Tensor[(13, 13, 4), float32]) */;
  %482 = %473.0;
  %483 = cast(%482, dtype="float32") /* ty=Tensor[(12, 10, 13), float32] */;
  %484 = cast(%var_4998, dtype="int8") /* ty=Tensor[(270, 2), int8] */;
  %485 = cast(%var_4999, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %486 = cast(meta[relay.Constant][27] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %487 = reshape(%483, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), float32] */;
  %488 = reshape(%484, newshape=[540]) /* ty=Tensor[(540), int8] */;
  %489 = reshape(%485, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
  %490 = reshape(%486, newshape=[390]) /* ty=Tensor[(390), float32] */;
  %491 = @func_4336(%487, %488, %489, %490) /* ty=(Tensor[(12, 10, 13), float64], Tensor[(1404), float64], Tensor[(540), int8], Tensor[(1404), float64], Tensor[(390), float32]) */;
  %492 = @func_2396(%454, %455) /* ty=Tensor[(15, 2, 7), bool] */;
  %493 = greater(%467, %468) /* ty=Tensor[(14, 5, 7), bool] */;
  %494 = power(%476, %477) /* ty=Tensor[(210), float32] */;
  %495 = asin(%478) /* ty=Tensor[(14, 5, 7), float32] */;
  %496 = %481.1;
  %497 = %491.2;
  (%492, meta[relay.Constant][24] /* ty=Tensor[(1, 14), int32] */, %493, %482, %var_4961, %494, %495, %496, meta[relay.Constant][26] /* ty=Tensor[(676, 1), int8] */, %497, %var_4998, %var_4999, meta[relay.Constant][27] /* ty=Tensor[(390), float32] */)
}

def @func_8961() -> Tensor[(14, 5, 7), float64] {
  @func_8959() /* ty=Tensor[(14, 5, 7), float64] */
}

def @func_7980(%var_7948: Tensor[(1560), float32], %var_7949: Tensor[(676), int8]) -> (Tensor[(14, 5, 7), float32], Tensor[(1560), float32], Tensor[(676), int8], Tensor[(15, 2, 7), float32], Tensor[(14, 5, 7), float32]) {
  %498 = @func_7707() /* ty=(Tensor[(14, 5, 7), float32],) */;
  %499 = cast(%var_7948, dtype="float32") /* ty=Tensor[(1560), float32] */;
  %500 = cast(%var_7949, dtype="int8") /* ty=Tensor[(676), int8] */;
  %501 = reshape(%499, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), float32] */;
  %502 = reshape(%500, newshape=[1, 676]) /* ty=Tensor[(1, 676), int8] */;
  %503 = @func_4269(%501, %502) /* ty=(Tensor[(12, 10, 13), int16], Tensor[(13, 13, 4), float32], Tensor[(15, 2, 7), bool], Tensor[(7, 2), int32], Tensor[(105, 2), int32], Tensor[(14, 5, 7), float64], Tensor[(?, 676), float32]) */;
  %504 = %503.2;
  %505 = cast(%504, dtype="float32") /* ty=Tensor[(15, 2, 7), float32] */;
  %506 = @func_7707() /* ty=(Tensor[(14, 5, 7), float32],) */;
  %507 = %498.0;
  %508 = acos(%505) /* ty=Tensor[(15, 2, 7), float32] */;
  %509 = %506.0;
  (%507, %var_7948, %var_7949, %508, %509)
}

def @func_5697(%var_5695: Tensor[(702, 2), float64], %var_5696: Tensor[(676), int8]) -> (Tensor[(12, 10, 13), float32], Tensor[(384), float64], Tensor[(702, 2), uint64], Tensor[(702, 2), float64], Tensor[(12, 10, 13), bool], Tensor[(12, 10, 13), float32], Tensor[(676), int8], Tensor[(702, 2), bool], Tensor[(702, 2), int32], Tensor[(1404), float64], Tensor[(480), float64], Tensor[(1872), float64], Tensor[(702, 2), bool]) {
  %572 = fn (%var_5635: Tensor[(702, 2), float64], %var_5664: Tensor[(676), int8]) -> (Tensor[(12, 10, 13), float32], Tensor[(384), float64], Tensor[(702, 2), uint64], Tensor[(702, 2), float64], Tensor[(12, 10, 13), bool], Tensor[(12, 10, 13), float32], Tensor[(676), int8], Tensor[(702, 2), bool], Tensor[(702, 2), int32], Tensor[(1404), float64], Tensor[(480), float64], Tensor[(1872), float64], Tensor[(702, 2), bool]) {
    %510 = @func_4825() /* ty=(Tensor[(12, 10, 13), float32],) */;
    %511 = cast(meta[relay.Constant][28] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
    %512 = cast(meta[relay.Constant][29] /* ty=Tensor[(702, 2), float64] */, dtype="float64") /* ty=Tensor[(702, 2), float64] */;
    %513 = reshape(%511, newshape=[384]) /* ty=Tensor[(384), float64] */;
    %514 = reshape(%512, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
    %515 = @func_4530(%513, %514) /* ty=(Tensor[(12, 10, 13), bool], Tensor[(195, 2), bool], Tensor[(384), float64], Tensor[(1404), float64]) */;
    %516 = %515.3;
    %517 = cast(%516, dtype="uint64") /* ty=Tensor[(1404), uint64] */;
    %518 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(702, 2), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %519 = cast(meta[relay.Constant][29] /* ty=Tensor[(702, 2), float64] */, dtype="uint64") /* ty=Tensor[(702, 2), uint64] */;
    %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %521 = cast(%var_5635, dtype="float64") /* ty=Tensor[(702, 2), float64] */;
    %522 = %510.0;
    %523 = cast(%522, dtype="bool") /* ty=Tensor[(12, 10, 13), bool] */;
    %524 = cast(%522, dtype="bool") /* ty=Tensor[(12, 10, 13), bool] */;
    %525 = reshape(%523, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), bool] */;
    %526 = reshape(%524, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), bool] */;
    %527 = @func_4767(%525, %526) /* ty=(Tensor[(12, 10, 13), bool], Tensor[(12, 10, 13), int32], Tensor[(6, 13, 5), float32], Tensor[(390), float32], Tensor[(14, 5, 7), float64]) */;
    %528 = cast(%var_5664, dtype="int8") /* ty=Tensor[(676), int8] */;
    %529 = reshape(%528, newshape=[169, 4]) /* ty=Tensor[(169, 4), int8] */;
    %530 = @func_5553(%529) /* ty=(Tensor[(12, 10, 13), float32], Tensor[(936, 2), float64], Tensor[(12, 10, 13), float32], Tensor[(169, 4), int8], Tensor[(6, 13, 5), float32]) */;
    %531 = cast(%var_5635, dtype="float64") /* ty=Tensor[(702, 2), float64] */;
    %532 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(702, 2), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %533 = cast(meta[relay.Constant][29] /* ty=Tensor[(702, 2), float64] */, dtype="float64") /* ty=Tensor[(702, 2), float64] */;
    %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %535 = floor_divide(%533, %534) /* ty=Tensor[(702, 2), float64] */;
    %536 = cast(%var_5635, dtype="bool") /* ty=Tensor[(702, 2), bool] */;
    %537 = shape_of(%535, dtype="int32") /* ty=Tensor[(2), int32] */;
    %538 = cast(%535, dtype="bool") /* ty=Tensor[(702, 2), bool] */;
    %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %540 = not_equal(%538, %539) /* ty=Tensor[(702, 2), bool] */;
    %541 = cast(%540, dtype="float32") /* ty=Tensor[(702, 2), float32] */;
    %542 = acos(%541) /* ty=Tensor[(702, 2), float32] */;
    %543 = cast(%535, dtype="bool") /* ty=Tensor[(702, 2), bool] */;
    %544 = shape_of(%542, dtype="int32") /* ty=Tensor[(2), int32] */;
    %545 = cast(%542, dtype="bool") /* ty=Tensor[(702, 2), bool] */;
    %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %547 = cast(%540, dtype="int32") /* ty=Tensor[(702, 2), int32] */;
    %548 = shape_of(%542, dtype="int32") /* ty=Tensor[(2), int32] */;
    %549 = cast(%542, dtype="int32") /* ty=Tensor[(702, 2), int32] */;
    %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %551 = cast(meta[relay.Constant][30] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
    %552 = cast(meta[relay.Constant][31] /* ty=Tensor[(1872), float64] */, dtype="float64") /* ty=Tensor[(1872), float64] */;
    %553 = cast(meta[relay.Constant][28] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
    %554 = cast(%var_5664, dtype="int8") /* ty=Tensor[(676), int8] */;
    %555 = reshape(%551, newshape=[3, 10, 16]) /* ty=Tensor[(3, 10, 16), float64] */;
    %556 = reshape(%552, newshape=[1872, 1]) /* ty=Tensor[(1872, 1), float64] */;
    %557 = reshape(%553, newshape=[384]) /* ty=Tensor[(384), float64] */;
    %558 = reshape(%554, newshape=[676, 1]) /* ty=Tensor[(676, 1), int8] */;
    %559 = @func_5132(%555, %556, %557, %558) /* ty=(Tensor[(384), float64], Tensor[(1872, 1), float64], Tensor[(384), float64], Tensor[(1404), float64], Tensor[(13, 13, 4), float32], Tensor[(676, 1), int8], Tensor[(12, 10, 13), bool], Tensor[(3, 10, 16), float64], Tensor[(12, 10, 13), float32], Tensor[(3, 10, 16), float32], Tensor[(12, 10, 13), bool]) */;
    %560 = cast(%542, dtype="bool") /* ty=Tensor[(702, 2), bool] */;
    %561 = shape_of(%540, dtype="int32") /* ty=Tensor[(2), int32] */;
    %562 = cast(%540, dtype="bool") /* ty=Tensor[(702, 2), bool] */;
    %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %564 = logical_xor(%519, %520) /* ty=Tensor[(702, 2), uint64] */;
    %565 = exp(%521) /* ty=Tensor[(702, 2), float64] */;
    %566 = %527.0;
    %567 = %530.2;
    %568 = greater(%545, %546) /* ty=Tensor[(702, 2), bool] */;
    %569 = bitwise_and(%549, %550) /* ty=Tensor[(702, 2), int32] */;
    %570 = %559.3;
    %571 = logical_and(%562, %563) /* ty=Tensor[(702, 2), bool] */;
    (%522, meta[relay.Constant][28] /* ty=Tensor[(384), float64] */, %564, %565, %566, %567, %var_5664, %568, %569, %570, meta[relay.Constant][30] /* ty=Tensor[(480), float64] */, meta[relay.Constant][31] /* ty=Tensor[(1872), float64] */, %571)
  };
  %572(%var_5695, %var_5696) /* ty=(Tensor[(12, 10, 13), float32], Tensor[(384), float64], Tensor[(702, 2), uint64], Tensor[(702, 2), float64], Tensor[(12, 10, 13), bool], Tensor[(12, 10, 13), float32], Tensor[(676), int8], Tensor[(702, 2), bool], Tensor[(702, 2), int32], Tensor[(1404), float64], Tensor[(480), float64], Tensor[(1872), float64], Tensor[(702, 2), bool]) */
}

def @func_7673(%var_7671: Tensor[(10, 16, 9), uint16], %var_7672: Tensor[(10, 16, 9), uint16]) -> (Tensor[(10, 16, 9), bool], Tensor[(14, 5, 7), float64]) {
  %579 = fn (%var_7644: Tensor[(10, 16, 9), uint16], %var_7645: Tensor[(10, 16, 9), uint16]) -> (Tensor[(10, 16, 9), bool], Tensor[(14, 5, 7), float64]) {
    %573 = cast(%var_7645, dtype="bool") /* ty=Tensor[(10, 16, 9), bool] */;
    %574 = shape_of(%var_7644, dtype="int32") /* ty=Tensor[(3), int32] */;
    %575 = cast(%var_7644, dtype="bool") /* ty=Tensor[(10, 16, 9), bool] */;
    %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %577 = equal(%575, %576) /* ty=Tensor[(10, 16, 9), bool] */;
    %578 = @func_5216() /* ty=Tensor[(14, 5, 7), float64] */;
    (%577, %578)
  };
  %579(%var_7671, %var_7672) /* ty=(Tensor[(10, 16, 9), bool], Tensor[(14, 5, 7), float64]) */
}

def @func_4120() -> (Tensor[(14, 5, 7), float64], Tensor[(12, 10, 13), bool]) {
  @func_4118() /* ty=(Tensor[(14, 5, 7), float64], Tensor[(12, 10, 13), bool]) */
}

def @func_4533(%var_4531: Tensor[(384), float64], %var_4532: Tensor[(1404), float64]) -> (Tensor[(12, 10, 13), bool], Tensor[(195, 2), bool], Tensor[(384), float64], Tensor[(1404), float64]) {
  %588 = fn (%var_4517: Tensor[(384), float64], %var_4518: Tensor[(1404), float64]) -> (Tensor[(12, 10, 13), bool], Tensor[(195, 2), bool], Tensor[(384), float64], Tensor[(1404), float64]) {
    %580 = @func_4118() /* ty=(Tensor[(14, 5, 7), float64], Tensor[(12, 10, 13), bool]) */;
    %581 = cast(%var_4517, dtype="float64") /* ty=Tensor[(384), float64] */;
    %582 = cast(%var_4518, dtype="float64") /* ty=Tensor[(1404), float64] */;
    %583 = reshape(%581, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
    %584 = reshape(%582, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
    %585 = @func_1145(%583, %584) /* ty=(Tensor[(1404), float64], Tensor[(195, 2), bool], Tensor[(8, 6, 8), float32]) */;
    %586 = %580.1;
    %587 = %585.1;
    (%586, %587, %var_4517, %var_4518)
  };
  %588(%var_4531, %var_4532) /* ty=(Tensor[(12, 10, 13), bool], Tensor[(195, 2), bool], Tensor[(384), float64], Tensor[(1404), float64]) */
}

def @func_8138() -> (Tensor[(14, 5, 7), float64],) {
  @func_8136() /* ty=(Tensor[(14, 5, 7), float64],) */
}

def @func_3712(%var_3699: Tensor[(11, 15, 5), float64]) -> (Tensor[(13, 13, 4), float64], Tensor[(676), int8], Tensor[(11, 15, 5), float64]) {
  %589 = cast(meta[relay.Constant][32] /* ty=Tensor[(676), int8] */, dtype="int8") /* ty=Tensor[(676), int8] */;
  %590 = reshape(%589, newshape=[13, 13, 4]) /* ty=Tensor[(13, 13, 4), int8] */;
  %591 = @func_2955(%590) /* ty=(Tensor[(13, 13, 4), float64], Tensor[(13, 13, 4), float32]) */;
  %592 = cast(%var_3699, dtype="float64") /* ty=Tensor[(11, 15, 5), float64] */;
  %593 = rsqrt(%592) /* ty=Tensor[(11, 15, 5), float64] */;
  %594 = cast(%593, dtype="float64") /* ty=Tensor[(11, 15, 5), float64] */;
  %595 = %591.0;
  %596 = erf(%594) /* ty=Tensor[(11, 15, 5), float64] */;
  (%595, meta[relay.Constant][32] /* ty=Tensor[(676), int8] */, %596)
}

def @func_7709() -> (Tensor[(14, 5, 7), float32],) {
  @func_7707() /* ty=(Tensor[(14, 5, 7), float32],) */
}

def @func_7560(%var_7557: Tensor[(864), float32], %var_7558: Tensor[(676), int8], %var_7559: Tensor[(676), int8]) -> (Tensor[(12, 10, 13), bool], Tensor[(14, 5, 7), float64], Tensor[(864), float32], Tensor[(12, 10, 13), float32], Tensor[(676), float64], Tensor[(676), float32], Tensor[(14, 5, 7), float64], Tensor[(676), int64]) {
  %622 = fn (%var_7507: Tensor[(864), float32], %var_7511: Tensor[(676), int8], %var_7519: Tensor[(676), int8]) -> (Tensor[(12, 10, 13), bool], Tensor[(14, 5, 7), float64], Tensor[(864), float32], Tensor[(12, 10, 13), float32], Tensor[(676), float64], Tensor[(676), float32], Tensor[(14, 5, 7), float64], Tensor[(676), int64]) {
    %597 = cast(%var_7507, dtype="float32") /* ty=Tensor[(864), float32] */;
    %598 = reshape(%597, newshape=[864]) /* ty=Tensor[(864), float32] */;
    %599 = @func_6028(%598) /* ty=(Tensor[(14, 5, 7), float64], Tensor[(6, 9, 16), float32], Tensor[(864), float32]) */;
    %600 = cast(%var_7511, dtype="int8") /* ty=Tensor[(676), int8] */;
    %601 = reshape(%600, newshape=[13, 52]) /* ty=Tensor[(13, 52), int8] */;
    %602 = @func_4909(%601) /* ty=(Tensor[(12, 10, 13), float32], Tensor[(13, 13, 4), float32], Tensor[(13, 52), int8]) */;
    %603 = cast(%var_7519, dtype="float64") /* ty=Tensor[(676), float64] */;
    %604 = cast(%var_7519, dtype="float32") /* ty=Tensor[(676), float32] */;
    %605 = @func_4177() /* ty=(Tensor[(14, 5, 7), float64],) */;
    %606 = cast(%var_7519, dtype="uint8") /* ty=Tensor[(676), uint8] */;
    %607 = shape_of(%var_7511, dtype="int32") /* ty=Tensor[(1), int32] */;
    %608 = cast(%var_7511, dtype="uint8") /* ty=Tensor[(676), uint8] */;
    %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %610 = bitwise_and(%608, %609) /* ty=Tensor[(676), uint8] */;
    %611 = cast(%var_7519, dtype="int64") /* ty=Tensor[(676), int64] */;
    %612 = shape_of(%610, dtype="int32") /* ty=Tensor[(1), int32] */;
    %613 = cast(%610, dtype="int64") /* ty=Tensor[(676), int64] */;
    %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?), int64] */;
    %615 = @func_4001() /* ty=Tensor[(12, 10, 13), bool] */;
    %616 = %599.0;
    %617 = %602.0;
    %618 = sigmoid(%603) /* ty=Tensor[(676), float64] */;
    %619 = erf(%604) /* ty=Tensor[(676), float32] */;
    %620 = %605.0;
    %621 = right_shift(%613, %614) /* ty=Tensor[(676), int64] */;
    (%615, %616, %var_7507, %617, %618, %619, %620, %621)
  };
  %622(%var_7557, %var_7558, %var_7559) /* ty=(Tensor[(12, 10, 13), bool], Tensor[(14, 5, 7), float64], Tensor[(864), float32], Tensor[(12, 10, 13), float32], Tensor[(676), float64], Tensor[(676), float32], Tensor[(14, 5, 7), float64], Tensor[(676), int64]) */
}

def @func_5821() -> (Tensor[(384), float64],) {
  %623 = @func_5186() /* ty=(Tensor[(12, 10, 13), bool], Tensor[(384), float64], Tensor[(936, 2), float64], Tensor[(192, 2), float64], Tensor[(1404), float64]) */;
  %624 = %623.1;
  (%624,)
}

def @func_1369(%var_1344: Tensor[(2, 8, 7), uint64], %var_1345: Tensor[(2, 8, 7), uint64]) -> (Tensor[(2, 8, 7), uint64], Tensor[(2, 8, 7), bool]) {
  %625 = cast(%var_1345, dtype="bool") /* ty=Tensor[(2, 8, 7), bool] */;
  %626 = shape_of(%var_1344, dtype="int32") /* ty=Tensor[(3), int32] */;
  %627 = cast(%var_1344, dtype="bool") /* ty=Tensor[(2, 8, 7), bool] */;
  %628 = dyn.reshape(%625, %626, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %629 = equal(%627, %628) /* ty=Tensor[(2, 8, 7), bool] */;
  %630 = cast(%629, dtype="uint64") /* ty=Tensor[(2, 8, 7), uint64] */;
  %631 = shape_of(%var_1345, dtype="int32") /* ty=Tensor[(3), int32] */;
  %632 = cast(%var_1345, dtype="uint64") /* ty=Tensor[(2, 8, 7), uint64] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %634 = cast(meta[relay.Constant][33] /* ty=Tensor[(2, 8, 7), bool] */, dtype="bool") /* ty=Tensor[(2, 8, 7), bool] */;
  %635 = shape_of(%629, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%629, dtype="bool") /* ty=Tensor[(2, 8, 7), bool] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %638 = right_shift(%632, %633) /* ty=Tensor[(2, 8, 7), uint64] */;
  %639 = less(%636, %637) /* ty=Tensor[(2, 8, 7), bool] */;
  (%638, %639)
}

def @func_6155() -> (Tensor[(14, 5, 7), float64], Tensor[(12, 10, 13), float32], Tensor[(14, 5, 7), float64]) {
  @func_6153() /* ty=(Tensor[(14, 5, 7), float64], Tensor[(12, 10, 13), float32], Tensor[(14, 5, 7), float64]) */
}

def @func_6442() -> (Tensor[(2, 14, 9), float64], Tensor[(12, 10, 13), float32]) {
  %644 = fn () -> (Tensor[(2, 14, 9), float64], Tensor[(12, 10, 13), float32]) {
    %640 = cast(meta[relay.Constant][34] /* ty=Tensor[(2, 14, 9), float64] */, dtype="float64") /* ty=Tensor[(2, 14, 9), float64] */;
    %641 = @func_4825() /* ty=(Tensor[(12, 10, 13), float32],) */;
    %642 = atan(%640) /* ty=Tensor[(2, 14, 9), float64] */;
    %643 = %641.0;
    (%642, %643)
  };
  %644() /* ty=(Tensor[(2, 14, 9), float64], Tensor[(12, 10, 13), float32]) */
}

def @func_4909(%var_4883: Tensor[(13, 52), int8]) -> (Tensor[(12, 10, 13), float32], Tensor[(13, 13, 4), float32], Tensor[(13, 52), int8]) {
  %645 = @func_4118() /* ty=(Tensor[(14, 5, 7), float64], Tensor[(12, 10, 13), bool]) */;
  %646 = %645.1;
  %647 = cast(meta[relay.Constant][35] /* ty=Tensor[(12, 10, 13), bool] */, dtype="float32") /* ty=Tensor[(12, 10, 13), float32] */;
  %648 = shape_of(%646, dtype="int32") /* ty=Tensor[(3), int32] */;
  %649 = cast(%646, dtype="float32") /* ty=Tensor[(12, 10, 13), float32] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %651 = cast(%var_4883, dtype="int8") /* ty=Tensor[(13, 52), int8] */;
  %652 = reshape(%651, newshape=[13, 13, 4]) /* ty=Tensor[(13, 13, 4), int8] */;
  %653 = @func_2955(%652) /* ty=(Tensor[(13, 13, 4), float64], Tensor[(13, 13, 4), float32]) */;
  %654 = power(%649, %650) /* ty=Tensor[(12, 10, 13), float32] */;
  %655 = %653.1;
  (%654, %655, %var_4883)
}

def @func_8946() -> (Tensor[(14, 5, 7), float64],) {
  %658 = fn () -> (Tensor[(14, 5, 7), float64],) {
    %656 = @func_8438() /* ty=(Tensor[(936, 2), float64], Tensor[(14, 5, 7), float64], Tensor[(1404), float64], Tensor[(1, 1404), float64]) */;
    %657 = %656.1;
    (%657,)
  };
  %658() /* ty=(Tensor[(14, 5, 7), float64],) */
}

def @func_4336(%var_4281: Tensor[(12, 10, 13), float32], %var_4310: Tensor[(540), int8], %var_4311: Tensor[(1404), float64], %var_4312: Tensor[(390), float32]) -> (Tensor[(12, 10, 13), float64], Tensor[(1404), float64], Tensor[(540), int8], Tensor[(1404), float64], Tensor[(390), float32]) {
  %659 = @func_4088() /* ty=(Tensor[(12, 10, 13), float32],) */;
  %660 = %659.0;
  %661 = cast(%var_4281, dtype="float64") /* ty=Tensor[(12, 10, 13), float64] */;
  %662 = shape_of(%660, dtype="int32") /* ty=Tensor[(3), int32] */;
  %663 = cast(%660, dtype="float64") /* ty=Tensor[(12, 10, 13), float64] */;
  %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %665 = cast(%var_4310, dtype="int8") /* ty=Tensor[(540), int8] */;
  %666 = cast(%var_4310, dtype="int8") /* ty=Tensor[(540), int8] */;
  %667 = cast(%var_4311, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %668 = cast(%var_4312, dtype="float32") /* ty=Tensor[(390), float32] */;
  %669 = reshape(%665, newshape=[15, 6, 6]) /* ty=Tensor[(15, 6, 6), int8] */;
  %670 = reshape(%666, newshape=[15, 6, 6]) /* ty=Tensor[(15, 6, 6), int8] */;
  %671 = reshape(%667, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
  %672 = reshape(%668, newshape=[390]) /* ty=Tensor[(390), float32] */;
  %673 = @func_1257(%669, %670, %671, %672) /* ty=(Tensor[(15, 6, 6), int8], Tensor[(12, 13, 9), int32], Tensor[(1404), float64], Tensor[(390), float32]) */;
  %674 = mod(%663, %664) /* ty=Tensor[(12, 10, 13), float64] */;
  %675 = %673.2;
  (%674, %675, %var_4310, %var_4311, %var_4312)
}

def @func_4826() -> (Tensor[(12, 10, 13), float32],) {
  %686 = fn () -> (Tensor[(12, 10, 13), float32],) {
    %676 = @func_4001() /* ty=Tensor[(12, 10, 13), bool] */;
    %677 = cast(%676, dtype="float64") /* ty=Tensor[(12, 10, 13), float64] */;
    %678 = cosh(%677) /* ty=Tensor[(12, 10, 13), float64] */;
    %679 = cast(%676, dtype="float32") /* ty=Tensor[(12, 10, 13), float32] */;
    %680 = shape_of(%678, dtype="int32") /* ty=Tensor[(3), int32] */;
    %681 = cast(%678, dtype="float32") /* ty=Tensor[(12, 10, 13), float32] */;
    %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %683 = divide(%681, %682) /* ty=Tensor[(12, 10, 13), float32] */;
    %684 = cast(%683, dtype="float32") /* ty=Tensor[(12, 10, 13), float32] */;
    %685 = log(%684) /* ty=Tensor[(12, 10, 13), float32] */;
    (%685,)
  };
  %686() /* ty=(Tensor[(12, 10, 13), float32],) */
}

def @func_7879() -> (Tensor[(12, 10, 13), float32],) {
  %689 = fn () -> (Tensor[(12, 10, 13), float32],) {
    %687 = @func_4825() /* ty=(Tensor[(12, 10, 13), float32],) */;
    %688 = %687.0;
    (%688,)
  };
  %689() /* ty=(Tensor[(12, 10, 13), float32],) */
}

def @func_4675(%var_4672: Tensor[(12, 13, 12), float64], %var_4673: Tensor[(384), float64], %var_4674: Tensor[(1404), float64]) -> (Tensor[(12, 13, 12), bool], Tensor[(12, 13, 12), float32], Tensor[(8, 6, 8), float32], Tensor[(384), float64], Tensor[(1404), float64], Tensor[(240), float64], Tensor[(390), float32], Tensor[(1456), float32]) {
  @func_4670(%var_4672, %var_4673, %var_4674) /* ty=(Tensor[(12, 13, 12), bool], Tensor[(12, 13, 12), float32], Tensor[(8, 6, 8), float32], Tensor[(384), float64], Tensor[(1404), float64], Tensor[(240), float64], Tensor[(390), float32], Tensor[(1456), float32]) */
}

def @func_1292(%var_1290: Tensor[(9, 3, 6), uint8], %var_1291: Tensor[(9, 3, 6), uint8]) -> Tensor[(9, 3, 6), uint8] {
  %694 = fn (%var_1274: Tensor[(9, 3, 6), uint8], %var_1275: Tensor[(9, 3, 6), uint8]) -> Tensor[(9, 3, 6), uint8] {
    %690 = cast(%var_1275, dtype="uint8") /* ty=Tensor[(9, 3, 6), uint8] */;
    %691 = shape_of(%var_1274, dtype="int32") /* ty=Tensor[(3), int32] */;
    %692 = cast(%var_1274, dtype="uint8") /* ty=Tensor[(9, 3, 6), uint8] */;
    %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    bitwise_or(%692, %693) /* ty=Tensor[(9, 3, 6), uint8] */
  };
  %694(%var_1290, %var_1291) /* ty=Tensor[(9, 3, 6), uint8] */
}

def @func_6110(%var_6108: Tensor[(825), float64]) -> (Tensor[(14, 5, 7), float64], Tensor[(13, 13, 4), float64], Tensor[(825), float64], Tensor[(12, 10, 13), float32]) {
  @func_6107(%var_6108) /* ty=(Tensor[(14, 5, 7), float64], Tensor[(13, 13, 4), float64], Tensor[(825), float64], Tensor[(12, 10, 13), float32]) */
}

def @func_8091() -> Tensor[(12, 10, 13), bool] {
  %695 = fn () -> Tensor[(12, 10, 13), bool] {
    @func_4556() /* ty=Tensor[(12, 10, 13), bool] */
  };
  %695() /* ty=Tensor[(12, 10, 13), bool] */
}

def @func_1263(%var_1259: Tensor[(15, 6, 6), int8], %var_1260: Tensor[(15, 6, 6), int8], %var_1261: Tensor[(1404), float64], %var_1262: Tensor[(390), float32]) -> (Tensor[(15, 6, 6), int8], Tensor[(12, 13, 9), int32], Tensor[(1404), float64], Tensor[(390), float32]) {
  @func_1257(%var_1259, %var_1260, %var_1261, %var_1262) /* ty=(Tensor[(15, 6, 6), int8], Tensor[(12, 13, 9), int32], Tensor[(1404), float64], Tensor[(390), float32]) */
}

def @func_7125() -> (Tensor[(14, 5, 7), float64], Tensor[(2, 14, 9), float64]) {
  @func_7123() /* ty=(Tensor[(14, 5, 7), float64], Tensor[(2, 14, 9), float64]) */
}

def @func_2049(%var_2037: bool, %var_2038: Tensor[(8, 6, 16), bool]) -> Tensor[(8, 6, 16), float32] {
  %696 = cast(%var_2037, dtype="bool") /* ty=bool */;
  %697 = cast(%var_2038, dtype="bool") /* ty=Tensor[(8, 6, 16), bool] */;
  %698 = logical_and(%696, %697) /* ty=Tensor[(8, 6, 16), bool] */;
  %699 = cast(%698, dtype="float32") /* ty=Tensor[(8, 6, 16), float32] */;
  log2(%699) /* ty=Tensor[(8, 6, 16), float32] */
}

def @func_7758() -> Tensor[(12, 10, 13), float32] {
  @func_7756() /* ty=Tensor[(12, 10, 13), float32] */
}

def @func_4061(%var_4058: Tensor[(12, 11, 9), float32], %var_4059: Tensor[(384), float64], %var_4060: Tensor[(1404), float64]) -> (Tensor[(12, 11, 9), float32], Tensor[(12, 11, 9), float32], Tensor[(1404), float64], Tensor[(384), float64], Tensor[(1404), float64], Tensor[(1404), float64]) {
  %722 = fn (%var_4031: Tensor[(12, 11, 9), float32], %var_4049: Tensor[(384), float64], %var_4050: Tensor[(1404), float64]) -> (Tensor[(12, 11, 9), float32], Tensor[(12, 11, 9), float32], Tensor[(1404), float64], Tensor[(384), float64], Tensor[(1404), float64], Tensor[(1404), float64]) {
    %700 = cast(%var_4031, dtype="float32") /* ty=Tensor[(12, 11, 9), float32] */;
    %701 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(12, 11, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %702 = cast(meta[relay.Constant][36] /* ty=Tensor[(12, 11, 9), float32] */, dtype="float32") /* ty=Tensor[(12, 11, 9), float32] */;
    %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %704 = cast(meta[relay.Constant][36] /* ty=Tensor[(12, 11, 9), float32] */, dtype="float32") /* ty=Tensor[(12, 11, 9), float32] */;
    %705 = shape_of(%var_4031, dtype="int32") /* ty=Tensor[(3), int32] */;
    %706 = cast(%var_4031, dtype="float32") /* ty=Tensor[(12, 11, 9), float32] */;
    %707 = dyn.reshape(%704, %705, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %708 = cast(%var_4049, dtype="float64") /* ty=Tensor[(384), float64] */;
    %709 = cast(%var_4050, dtype="float64") /* ty=Tensor[(1404), float64] */;
    %710 = reshape(%708, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
    %711 = reshape(%709, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
    %712 = @func_1145(%710, %711) /* ty=(Tensor[(1404), float64], Tensor[(195, 2), bool], Tensor[(8, 6, 8), float32]) */;
    %713 = cast(%var_4049, dtype="float64") /* ty=Tensor[(384), float64] */;
    %714 = %712.0;
    %715 = cast(%714, dtype="float64") /* ty=Tensor[(1404), float64] */;
    %716 = reshape(%713, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
    %717 = reshape(%715, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
    %718 = @func_1145(%716, %717) /* ty=(Tensor[(1404), float64], Tensor[(195, 2), bool], Tensor[(8, 6, 8), float32]) */;
    %719 = floor_mod(%702, %703) /* ty=Tensor[(12, 11, 9), float32] */;
    %720 = floor_divide(%706, %707) /* ty=Tensor[(12, 11, 9), float32] */;
    %721 = %718.0;
    (%719, %720, %714, %var_4049, %var_4050, %721)
  };
  %722(%var_4058, %var_4059, %var_4060) /* ty=(Tensor[(12, 11, 9), float32], Tensor[(12, 11, 9), float32], Tensor[(1404), float64], Tensor[(384), float64], Tensor[(1404), float64], Tensor[(1404), float64]) */
}

def @func_7249(%var_7201: Tensor[(11, 3, 10), float64], %var_7231: Tensor[(195, 2), float32], %var_7237: Tensor[(480), float64], %var_7238: Tensor[(2, 192), float64], %var_7239: Tensor[(676), int8]) -> (Tensor[(11, 3, 10), float64], Tensor[(936, 2), float64], Tensor[(6, 13, 5), float32], Tensor[(195, 2), float32], Tensor[(12, 10, 13), bool], Tensor[(480), float64], Tensor[(2, 192), float64], Tensor[(676), int8], Tensor[(390), float32], Tensor[(540), int8], Tensor[(1404), float64]) {
  %723 = cast(%var_7201, dtype="float64") /* ty=Tensor[(11, 3, 10), float64] */;
  %724 = @func_6731() /* ty=(Tensor[(936, 2), float64],) */;
  %725 = cast(%var_7231, dtype="float32") /* ty=Tensor[(195, 2), float32] */;
  %726 = reshape(%725, newshape=[6, 13, 5]) /* ty=Tensor[(6, 13, 5), float32] */;
  %727 = @func_640(%726) /* ty=(Tensor[(6, 13, 5), float32],) */;
  %728 = cast(%var_7237, dtype="float64") /* ty=Tensor[(480), float64] */;
  %729 = %724.0;
  %730 = cast(%729, dtype="float64") /* ty=Tensor[(936, 2), float64] */;
  %731 = cast(%var_7238, dtype="float64") /* ty=Tensor[(2, 192), float64] */;
  %732 = cast(%var_7239, dtype="int8") /* ty=Tensor[(676), int8] */;
  %733 = reshape(%728, newshape=[3, 10, 16]) /* ty=Tensor[(3, 10, 16), float64] */;
  %734 = reshape(%730, newshape=[1872, 1]) /* ty=Tensor[(1872, 1), float64] */;
  %735 = reshape(%731, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %736 = reshape(%732, newshape=[676, 1]) /* ty=Tensor[(676, 1), int8] */;
  %737 = @func_5132(%733, %734, %735, %736) /* ty=(Tensor[(384), float64], Tensor[(1872, 1), float64], Tensor[(384), float64], Tensor[(1404), float64], Tensor[(13, 13, 4), float32], Tensor[(676, 1), int8], Tensor[(12, 10, 13), bool], Tensor[(3, 10, 16), float64], Tensor[(12, 10, 13), float32], Tensor[(3, 10, 16), float32], Tensor[(12, 10, 13), bool]) */;
  %738 = %737.6;
  %739 = cast(%738, dtype="float32") /* ty=Tensor[(12, 10, 13), float32] */;
  %740 = cast(meta[relay.Constant][37] /* ty=Tensor[(540), int8] */, dtype="int8") /* ty=Tensor[(540), int8] */;
  %741 = cast(meta[relay.Constant][38] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %742 = %727.0;
  %743 = cast(%742, dtype="float32") /* ty=Tensor[(6, 13, 5), float32] */;
  %744 = reshape(%739, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), float32] */;
  %745 = reshape(%740, newshape=[540]) /* ty=Tensor[(540), int8] */;
  %746 = reshape(%741, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
  %747 = reshape(%743, newshape=[390]) /* ty=Tensor[(390), float32] */;
  %748 = @func_4336(%744, %745, %746, %747) /* ty=(Tensor[(12, 10, 13), float64], Tensor[(1404), float64], Tensor[(540), int8], Tensor[(1404), float64], Tensor[(390), float32]) */;
  %749 = log10(%723) /* ty=Tensor[(11, 3, 10), float64] */;
  %750 = %748.4;
  (%749, %729, %742, %var_7231, %738, %var_7237, %var_7238, %var_7239, %750, meta[relay.Constant][37] /* ty=Tensor[(540), int8] */, meta[relay.Constant][38] /* ty=Tensor[(1404), float64] */)
}

def @func_8668(%var_8592: Tensor[(390), float32], %var_8655: Tensor[(56, 26), float64]) -> (Tensor[(14, 5, 7), float64], Tensor[(195, 2), float64], Tensor[(702, 2), uint64], Tensor[(676), int8], Tensor[(14, 5, 7), float64], Tensor[(1404), bool], Tensor[(13, 8, 14), float64], Tensor[(56, 26), float64], Tensor[(14, 5, 7), float64], Tensor[(384), float64]) {
  %751 = @func_5883() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %752 = cast(meta[relay.Constant][39] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %753 = cast(%var_8592, dtype="float32") /* ty=Tensor[(390), float32] */;
  %754 = cast(%var_8592, dtype="float32") /* ty=Tensor[(390), float32] */;
  %755 = reshape(%752, newshape=[12, 13, 9]) /* ty=Tensor[(12, 13, 9), float64] */;
  %756 = reshape(%753, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
  %757 = reshape(%754, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
  %758 = @func_922(%755, %756, %757) /* ty=(Tensor[(6, 13, 5), float32], Tensor[(12, 13, 9), int32], Tensor[(195, 2), bool]) */;
  %759 = %758.2;
  %760 = cast(%var_8592, dtype="uint8") /* ty=Tensor[(390), uint8] */;
  %761 = shape_of(%759, dtype="int32") /* ty=Tensor[(2), int32] */;
  %762 = cast(%759, dtype="uint8") /* ty=Tensor[(195, 2), uint8] */;
  %763 = dyn.reshape(%760, %761, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %764 = add(%762, %763) /* ty=Tensor[(195, 2), uint8] */;
  %765 = cast(%764, dtype="float64") /* ty=Tensor[(195, 2), float64] */;
  %766 = shape_of(%759, dtype="int32") /* ty=Tensor[(2), int32] */;
  %767 = cast(%759, dtype="float64") /* ty=Tensor[(195, 2), float64] */;
  %768 = dyn.reshape(%765, %766, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %769 = cast(meta[relay.Constant][39] /* ty=Tensor[(1404), float64] */, dtype="float32") /* ty=Tensor[(1404), float32] */;
  %770 = sigmoid(%769) /* ty=Tensor[(1404), float32] */;
  %771 = cast(%770, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %772 = cast(meta[relay.Constant][40] /* ty=Tensor[(676), int8] */, dtype="int8") /* ty=Tensor[(676), int8] */;
  %773 = reshape(%771, newshape=[702, 2]) /* ty=Tensor[(702, 2), float64] */;
  %774 = reshape(%772, newshape=[676]) /* ty=Tensor[(676), int8] */;
  %775 = @func_5694(%773, %774) /* ty=(Tensor[(12, 10, 13), float32], Tensor[(384), float64], Tensor[(702, 2), uint64], Tensor[(702, 2), float64], Tensor[(12, 10, 13), bool], Tensor[(12, 10, 13), float32], Tensor[(676), int8], Tensor[(702, 2), bool], Tensor[(702, 2), int32], Tensor[(1404), float64], Tensor[(480), float64], Tensor[(1872), float64], Tensor[(702, 2), bool]) */;
  %776 = @func_6931() /* ty=(Tensor[(14, 5, 7), float64], Tensor[(12, 10, 13), float32]) */;
  %777 = cast(meta[relay.Constant][39] /* ty=Tensor[(1404), float64] */, dtype="bool") /* ty=Tensor[(1404), bool] */;
  %778 = shape_of(%770, dtype="int32") /* ty=Tensor[(1), int32] */;
  %779 = cast(%770, dtype="bool") /* ty=Tensor[(1404), bool] */;
  %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?), bool] */;
  %781 = cast(%var_8655, dtype="float64") /* ty=Tensor[(56, 26), float64] */;
  %782 = reshape(%781, newshape=[13, 8, 14]) /* ty=Tensor[(13, 8, 14), float64] */;
  %783 = cast(%764, dtype="float32") /* ty=Tensor[(195, 2), float32] */;
  %784 = reshape(%783, newshape=[390]) /* ty=Tensor[(390), float32] */;
  %785 = @func_6680(%784) /* ty=(Tensor[(14, 5, 7), float64], Tensor[(240), float64], Tensor[(390), float32], Tensor[(15, 8, 2), float64]) */;
  %786 = @func_5186() /* ty=(Tensor[(12, 10, 13), bool], Tensor[(384), float64], Tensor[(936, 2), float64], Tensor[(192, 2), float64], Tensor[(1404), float64]) */;
  %787 = %751.0;
  %788 = minimum(%767, %768) /* ty=Tensor[(195, 2), float64] */;
  %789 = %775.2;
  %790 = %776.0;
  %791 = equal(%779, %780) /* ty=Tensor[(1404), bool] */;
  %792 = @func_1007(%782) /* ty=Tensor[(13, 8, 14), float64] */;
  %793 = %785.0;
  %794 = %786.1;
  (%787, %788, %789, meta[relay.Constant][40] /* ty=Tensor[(676), int8] */, %790, %791, %792, %var_8655, %793, %794)
}

def @func_6879() -> Tensor[(14, 5, 7), float64] {
  @func_6877() /* ty=Tensor[(14, 5, 7), float64] */
}

def @func_7028() -> (Tensor[(14, 5, 7), float64], Tensor[(14, 5, 7), float64]) {
  @func_7026() /* ty=(Tensor[(14, 5, 7), float64], Tensor[(14, 5, 7), float64]) */
}

def @func_7756() -> Tensor[(12, 10, 13), float32] {
  %795 = @func_4088() /* ty=(Tensor[(12, 10, 13), float32],) */;
  %795.0
}

def @func_4177() -> (Tensor[(14, 5, 7), float64],) {
  %796 = @func_4118() /* ty=(Tensor[(14, 5, 7), float64], Tensor[(12, 10, 13), bool]) */;
  %797 = %796.0;
  (%797,)
}

def @func_4600(%var_4598: Tensor[(7, 14, 8), int32], %var_4599: Tensor[(7, 14, 8), int32]) -> (Tensor[(7, 14, 8), bool],) {
  @func_4596(%var_4598, %var_4599) /* ty=(Tensor[(7, 14, 8), bool],) */
}

def @func_2955(%var_2934: Tensor[(13, 13, 4), int8]) -> (Tensor[(13, 13, 4), float64], Tensor[(13, 13, 4), float32]) {
  %798 = cast(meta[relay.Constant][41] /* ty=Tensor[(13, 13, 4), int8] */, dtype="float64") /* ty=Tensor[(13, 13, 4), float64] */;
  %799 = cast(%var_2934, dtype="bool") /* ty=Tensor[(13, 13, 4), bool] */;
  %800 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(13, 13, 4), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %801 = cast(meta[relay.Constant][41] /* ty=Tensor[(13, 13, 4), int8] */, dtype="bool") /* ty=Tensor[(13, 13, 4), bool] */;
  %802 = dyn.reshape(%799, %800, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %803 = greater(%801, %802) /* ty=Tensor[(13, 13, 4), bool] */;
  %804 = cast(%803, dtype="float32") /* ty=Tensor[(13, 13, 4), float32] */;
  %805 = sin(%798) /* ty=Tensor[(13, 13, 4), float64] */;
  %806 = atan(%804) /* ty=Tensor[(13, 13, 4), float32] */;
  (%805, %806)
}

def @func_6682(%var_6681: Tensor[(390), float32]) -> (Tensor[(14, 5, 7), float64], Tensor[(240), float64], Tensor[(390), float32], Tensor[(15, 8, 2), float64]) {
  %816 = fn (%var_6673: Tensor[(390), float32]) -> (Tensor[(14, 5, 7), float64], Tensor[(240), float64], Tensor[(390), float32], Tensor[(15, 8, 2), float64]) {
    %807 = cast(meta[relay.Constant][42] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
    %808 = cast(%var_6673, dtype="float32") /* ty=Tensor[(390), float32] */;
    %809 = reshape(%807, newshape=[15, 8, 2]) /* ty=Tensor[(15, 8, 2), float64] */;
    %810 = reshape(%808, newshape=[390, 1]) /* ty=Tensor[(390, 1), float32] */;
    %811 = @func_1214(%809, %810) /* ty=(Tensor[(15, 8, 2), float64], Tensor[(13, 8, 14), float64], Tensor[(1456), float64], Tensor[(12, 13, 9), int32], Tensor[(1404), float64], Tensor[(390, 1), float32]) */;
    %812 = %811.0;
    %813 = cast(%812, dtype="float64") /* ty=Tensor[(15, 8, 2), float64] */;
    %814 = @func_6456() /* ty=Tensor[(14, 5, 7), float64] */;
    %815 = atanh(%813) /* ty=Tensor[(15, 8, 2), float64] */;
    (%814, meta[relay.Constant][42] /* ty=Tensor[(240), float64] */, %var_6673, %815)
  };
  %816(%var_6681) /* ty=(Tensor[(14, 5, 7), float64], Tensor[(240), float64], Tensor[(390), float32], Tensor[(15, 8, 2), float64]) */
}

def @func_4770(%var_4768: Tensor[(12, 10, 13), bool], %var_4769: Tensor[(12, 10, 13), bool]) -> (Tensor[(12, 10, 13), bool], Tensor[(12, 10, 13), int32], Tensor[(6, 13, 5), float32], Tensor[(390), float32], Tensor[(14, 5, 7), float64]) {
  %834 = fn (%var_4736: Tensor[(12, 10, 13), bool], %var_4744: Tensor[(12, 10, 13), bool]) -> (Tensor[(12, 10, 13), bool], Tensor[(12, 10, 13), int32], Tensor[(6, 13, 5), float32], Tensor[(390), float32], Tensor[(14, 5, 7), float64]) {
    %817 = @func_4556() /* ty=Tensor[(12, 10, 13), bool] */;
    %818 = cast(%var_4736, dtype="bool") /* ty=Tensor[(12, 10, 13), bool] */;
    %819 = shape_of(%817, dtype="int32") /* ty=Tensor[(3), int32] */;
    %820 = cast(%817, dtype="bool") /* ty=Tensor[(12, 10, 13), bool] */;
    %821 = dyn.reshape(%818, %819, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %822 = cast(%var_4744, dtype="int32") /* ty=Tensor[(12, 10, 13), int32] */;
    %823 = shape_of(%var_4736, dtype="int32") /* ty=Tensor[(3), int32] */;
    %824 = cast(%var_4736, dtype="int32") /* ty=Tensor[(12, 10, 13), int32] */;
    %825 = dyn.reshape(%822, %823, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %826 = cast(meta[relay.Constant][43] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
    %827 = reshape(%826, newshape=[6, 13, 5]) /* ty=Tensor[(6, 13, 5), float32] */;
    %828 = @func_640(%827) /* ty=(Tensor[(6, 13, 5), float32],) */;
    %829 = @func_4177() /* ty=(Tensor[(14, 5, 7), float64],) */;
    %830 = not_equal(%820, %821) /* ty=Tensor[(12, 10, 13), bool] */;
    %831 = subtract(%824, %825) /* ty=Tensor[(12, 10, 13), int32] */;
    %832 = %828.0;
    %833 = %829.0;
    (%830, %831, %832, meta[relay.Constant][43] /* ty=Tensor[(390), float32] */, %833)
  };
  %834(%var_4768, %var_4769) /* ty=(Tensor[(12, 10, 13), bool], Tensor[(12, 10, 13), int32], Tensor[(6, 13, 5), float32], Tensor[(390), float32], Tensor[(14, 5, 7), float64]) */
}

def @func_6389() -> (Tensor[(14, 5, 7), float64],) {
  @func_6387() /* ty=(Tensor[(14, 5, 7), float64],) */
}

def @func_6843() -> Tensor[(14, 5, 7), float32] {
  @func_6841() /* ty=Tensor[(14, 5, 7), float32] */
}

def @func_7026() -> (Tensor[(14, 5, 7), float64], Tensor[(14, 5, 7), float64]) {
  %835 = @func_6082() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %836 = @func_6456() /* ty=Tensor[(14, 5, 7), float64] */;
  %837 = %835.0;
  (%836, %837)
}

def @func_6387() -> (Tensor[(14, 5, 7), float64],) {
  %838 = @func_5875() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %839 = %838.0;
  (%839,)
}

def @func_3920(%var_3875: Tensor[(8, 5, 12), float32], %var_3876: Tensor[(8, 5, 12), float32]) -> (Tensor[(8, 5, 12), float32], Tensor[(6, 13, 5), float32], Tensor[(195, 2), float32], Tensor[(8, 5, 12), float64], Tensor[(12, 13, 9), int32], Tensor[(1404), float64], Tensor[(6, 13, 5), float32]) {
  %840 = cast(%var_3876, dtype="float32") /* ty=Tensor[(8, 5, 12), float32] */;
  %841 = shape_of(%var_3875, dtype="int32") /* ty=Tensor[(3), int32] */;
  %842 = cast(%var_3875, dtype="float32") /* ty=Tensor[(8, 5, 12), float32] */;
  %843 = dyn.reshape(%840, %841, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %844 = cast(meta[relay.Constant][44] /* ty=Tensor[(195, 2), float32] */, dtype="float32") /* ty=Tensor[(195, 2), float32] */;
  %845 = reshape(%844, newshape=[6, 13, 5]) /* ty=Tensor[(6, 13, 5), float32] */;
  %846 = @func_640(%845) /* ty=(Tensor[(6, 13, 5), float32],) */;
  %847 = cast(%var_3875, dtype="float64") /* ty=Tensor[(8, 5, 12), float64] */;
  %848 = cast(meta[relay.Constant][45] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %849 = %846.0;
  %850 = cast(%849, dtype="float32") /* ty=Tensor[(6, 13, 5), float32] */;
  %851 = cast(%849, dtype="float32") /* ty=Tensor[(6, 13, 5), float32] */;
  %852 = reshape(%848, newshape=[12, 13, 9]) /* ty=Tensor[(12, 13, 9), float64] */;
  %853 = reshape(%850, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
  %854 = reshape(%851, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
  %855 = @func_922(%852, %853, %854) /* ty=(Tensor[(6, 13, 5), float32], Tensor[(12, 13, 9), int32], Tensor[(195, 2), bool]) */;
  %856 = cast(%849, dtype="float32") /* ty=Tensor[(6, 13, 5), float32] */;
  %857 = reshape(%856, newshape=[6, 13, 5]) /* ty=Tensor[(6, 13, 5), float32] */;
  %858 = @func_640(%857) /* ty=(Tensor[(6, 13, 5), float32],) */;
  %859 = floor_mod(%842, %843) /* ty=Tensor[(8, 5, 12), float32] */;
  %860 = sqrt(%847) /* ty=Tensor[(8, 5, 12), float64] */;
  %861 = %855.1;
  %862 = %858.0;
  (%859, %849, meta[relay.Constant][44] /* ty=Tensor[(195, 2), float32] */, %860, %861, meta[relay.Constant][45] /* ty=Tensor[(1404), float64] */, %862)
}

def @func_4118() -> (Tensor[(14, 5, 7), float64], Tensor[(12, 10, 13), bool]) {
  %863 = cast(meta[relay.Constant][46] /* ty=Tensor[(14, 5, 7), float64] */, dtype="float64") /* ty=Tensor[(14, 5, 7), float64] */;
  %864 = atan(%863) /* ty=Tensor[(14, 5, 7), float64] */;
  %865 = @func_4001() /* ty=Tensor[(12, 10, 13), bool] */;
  (%864, %865)
}

def @func_6107(%var_6098: Tensor[(825), float64]) -> (Tensor[(14, 5, 7), float64], Tensor[(13, 13, 4), float64], Tensor[(825), float64], Tensor[(12, 10, 13), float32]) {
  %866 = @func_5584() /* ty=(Tensor[(14, 5, 7), float64],) */;
  %867 = cast(%var_6098, dtype="float64") /* ty=Tensor[(825), float64] */;
  %868 = reshape(%867, newshape=[11, 15, 5]) /* ty=Tensor[(11, 15, 5), float64] */;
  %869 = @func_3712(%868) /* ty=(Tensor[(13, 13, 4), float64], Tensor[(676), int8], Tensor[(11, 15, 5), float64]) */;
  %870 = @func_4825() /* ty=(Tensor[(12, 10, 13), float32],) */;
  %871 = %866.0;
  %872 = %869.0;
  %873 = %870.0;
  (%871, %872, %var_6098, %873)
}

def @func_5812(%var_5810: Tensor[(390), float32], %var_5811: Tensor[(702, 2), float64]) -> (Tensor[(12, 10, 13), bool], Tensor[(12, 13, 9), int32], Tensor[(14, 5, 7), float64], Tensor[(390), bool], Tensor[(702, 2), bool]) {
  %896 = fn (%var_5788: Tensor[(390), float32], %var_5799: Tensor[(702, 2), float64]) -> (Tensor[(12, 10, 13), bool], Tensor[(12, 13, 9), int32], Tensor[(14, 5, 7), float64], Tensor[(390), bool], Tensor[(702, 2), bool]) {
    %874 = @func_5290() /* ty=(Tensor[(12, 10, 13), bool], Tensor[(14, 5, 7), float64]) */;
    %875 = cast(meta[relay.Constant][47] /* ty=Tensor[(702, 2), float64] */, dtype="float64") /* ty=Tensor[(702, 2), float64] */;
    %876 = cast(meta[relay.Constant][48] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
    %877 = cast(meta[relay.Constant][48] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
    %878 = reshape(%875, newshape=[12, 13, 9]) /* ty=Tensor[(12, 13, 9), float64] */;
    %879 = reshape(%876, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
    %880 = reshape(%877, newshape=[195, 2]) /* ty=Tensor[(195, 2), float32] */;
    %881 = @func_922(%878, %879, %880) /* ty=(Tensor[(6, 13, 5), float32], Tensor[(12, 13, 9), int32], Tensor[(195, 2), bool]) */;
    %882 = @func_5584() /* ty=(Tensor[(14, 5, 7), float64],) */;
    %883 = cast(%var_5788, dtype="bool") /* ty=Tensor[(390), bool] */;
    %884 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(390), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %885 = cast(meta[relay.Constant][48] /* ty=Tensor[(390), float32] */, dtype="bool") /* ty=Tensor[(390), bool] */;
    %886 = dyn.reshape(%883, %884, newshape=[]) /* ty=Tensor[(?), bool] */;
    %887 = cast(%var_5799, dtype="bool") /* ty=Tensor[(702, 2), bool] */;
    %888 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(702, 2), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %889 = cast(meta[relay.Constant][47] /* ty=Tensor[(702, 2), float64] */, dtype="bool") /* ty=Tensor[(702, 2), bool] */;
    %890 = dyn.reshape(%887, %888, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %891 = %874.0;
    %892 = %881.1;
    %893 = %882.0;
    %894 = logical_and(%885, %886) /* ty=Tensor[(390), bool] */;
    %895 = less(%889, %890) /* ty=Tensor[(702, 2), bool] */;
    (%891, %892, %893, %894, %895)
  };
  %896(%var_5810, %var_5811) /* ty=(Tensor[(12, 10, 13), bool], Tensor[(12, 13, 9), int32], Tensor[(14, 5, 7), float64], Tensor[(390), bool], Tensor[(702, 2), bool]) */
}

def @func_6262() -> (Tensor[(12, 10, 13), float32], Tensor[(14, 5, 7), float64]) {
  @func_6260() /* ty=(Tensor[(12, 10, 13), float32], Tensor[(14, 5, 7), float64]) */
}

def @func_4557() -> Tensor[(12, 10, 13), bool] {
  %897 = fn () -> Tensor[(12, 10, 13), bool] {
    @func_4001() /* ty=Tensor[(12, 10, 13), bool] */
  };
  %897() /* ty=Tensor[(12, 10, 13), bool] */
}

def @func_6509() -> Tensor[(936, 2), float64] {
  %898 = @func_5186() /* ty=(Tensor[(12, 10, 13), bool], Tensor[(384), float64], Tensor[(936, 2), float64], Tensor[(192, 2), float64], Tensor[(1404), float64]) */;
  %898.2
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen546/build/output.py", line 2036, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:30:49] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

