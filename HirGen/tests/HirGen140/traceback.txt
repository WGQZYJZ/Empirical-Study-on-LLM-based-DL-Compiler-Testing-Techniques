==========mod==========
#[version = "0.0.5"]
def @func_7374() -> (Tensor[(13, 16, 2), float32], Tensor[(72), float32], Tensor[(36, 2), float32], Tensor[(13, 16, 2), float32], Tensor[(9, 7, 3), float64], Tensor[(13, 16, 2), float32], Tensor[(9, 7, 3), bool]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %1 = reshape(%0, newshape=[12, 1, 6]) /* ty=Tensor[(12, 1, 6), float32] */;
  %2 = @func_2806(%1) /* ty=(Tensor[(12, 1, 6), float32], Tensor[(13, 16, 2), float32]) */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %5 = reshape(%3, newshape=[36, 2]) /* ty=Tensor[(36, 2), float32] */;
  %6 = reshape(%4, newshape=[36, 2]) /* ty=Tensor[(36, 2), float32] */;
  %7 = @func_6700(%5, %6) /* ty=(Tensor[(12, 4, 12), int8], Tensor[(13, 16, 2), float32], Tensor[(36, 2), float32]) */;
  %8 = @func_3880() /* ty=(Tensor[(13, 16, 2), float32],) */;
  %9 = cast(meta[relay.Constant][1] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %10 = cast(meta[relay.Constant][2] /* ty=Tensor[(9, 7, 3), uint32] */, dtype="uint32") /* ty=Tensor[(9, 7, 3), uint32] */;
  %11 = maximum(%9, %10) /* ty=Tensor[(9, 7, 3), uint32] */;
  %12 = cast(%11, dtype="float64") /* ty=Tensor[(9, 7, 3), float64] */;
  %13 = atanh(%12) /* ty=Tensor[(9, 7, 3), float64] */;
  %14 = cast(%13, dtype="float64") /* ty=Tensor[(9, 7, 3), float64] */;
  %15 = @func_6665() /* ty=(Tensor[(13, 16, 2), float32],) */;
  %16 = cast(meta[relay.Constant][3] /* ty=Tensor[(9, 7, 3), float64] */, dtype="bool") /* ty=Tensor[(9, 7, 3), bool] */;
  %17 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
  %18 = cast(%13, dtype="bool") /* ty=Tensor[(9, 7, 3), bool] */;
  %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %20 = %2.1;
  %21 = %7.2;
  %22 = %8.0;
  %23 = log2(%14) /* ty=Tensor[(9, 7, 3), float64] */;
  %24 = %15.0;
  %25 = logical_and(%18, %19) /* ty=Tensor[(9, 7, 3), bool] */;
  (%20, meta[relay.Constant][0] /* ty=Tensor[(72), float32] */, %21, %22, %23, %24, %25)
}

def @func_4923() -> (Tensor[(3, 7), float64],) {
  %26 = @func_1567() /* ty=(Tensor[(3, 7), float64],) */;
  %27 = %26.0;
  (%27,)
}

def @func_6449() -> Tensor[(13, 16, 2), float32] {
  @func_2261() /* ty=Tensor[(13, 16, 2), float32] */
}

def @func_1629() -> (Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32]) {
  %28 = @func_1305() /* ty=(Tensor[(12, 4, 12), int32],) */;
  %29 = @func_1305() /* ty=(Tensor[(12, 4, 12), int32],) */;
  %30 = %28.0;
  %31 = %29.0;
  (%30, %31)
}

def @func_4868(%var_4840: Tensor[(72), float32]) -> (Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), float32], Tensor[(72), float32]) {
  %32 = @func_2343() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32]) */;
  %33 = cast(%var_4840, dtype="float32") /* ty=Tensor[(72), float32] */;
  %34 = reshape(%33, newshape=[12, 1, 6]) /* ty=Tensor[(12, 1, 6), float32] */;
  %35 = @func_2806(%34) /* ty=(Tensor[(12, 1, 6), float32], Tensor[(13, 16, 2), float32]) */;
  %36 = %32.1;
  %37 = %35.1;
  (%36, %37, %var_4840)
}

def @func_3337() -> Tensor[(13, 16, 2), float32] {
  @func_2261() /* ty=Tensor[(13, 16, 2), float32] */
}

def @func_2382() -> Tensor[(13, 16, 2), int32] {
  @func_1356() /* ty=Tensor[(13, 16, 2), int32] */
}

def @func_5112() -> (Tensor[(11, 4, 3), bool],) {
  %38 = cast(meta[relay.Constant][4] /* ty=Tensor[(11, 4, 3), float32] */, dtype="float32") /* ty=Tensor[(11, 4, 3), float32] */;
  %39 = cos(%38) /* ty=Tensor[(11, 4, 3), float32] */;
  %40 = cast(meta[relay.Constant][4] /* ty=Tensor[(11, 4, 3), float32] */, dtype="bool") /* ty=Tensor[(11, 4, 3), bool] */;
  %41 = shape_of(%39, dtype="int32") /* ty=Tensor[(3), int32] */;
  %42 = cast(%39, dtype="bool") /* ty=Tensor[(11, 4, 3), bool] */;
  %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %44 = greater_equal(%42, %43) /* ty=Tensor[(11, 4, 3), bool] */;
  (%44,)
}

def @func_6888(%var_6859: Tensor[(12, 4, 12), int32]) -> (Tensor[(12, 4, 12), bool], Tensor[(12, 4, 12), float64], Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), float32]) {
  %45 = @func_2923() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), bool]) */;
  %46 = %45.0;
  %47 = cast(%var_6859, dtype="bool") /* ty=Tensor[(12, 4, 12), bool] */;
  %48 = shape_of(%46, dtype="int32") /* ty=Tensor[(3), int32] */;
  %49 = cast(%46, dtype="bool") /* ty=Tensor[(12, 4, 12), bool] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %51 = cast(%46, dtype="float64") /* ty=Tensor[(12, 4, 12), float64] */;
  %52 = @func_1629() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32]) */;
  %53 = @func_4505() /* ty=(Tensor[(13, 16, 2), float32],) */;
  %54 = greater_equal(%49, %50) /* ty=Tensor[(12, 4, 12), bool] */;
  %55 = log10(%51) /* ty=Tensor[(12, 4, 12), float64] */;
  %56 = %52.0;
  %57 = %53.0;
  (%54, %55, %56, %57)
}

def @func_1726(%var_1714: Tensor[(12, 4, 12), float64]) -> (Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), bool]) {
  %58 = @func_1305() /* ty=(Tensor[(12, 4, 12), int32],) */;
  %59 = @func_1305() /* ty=(Tensor[(12, 4, 12), int32],) */;
  %60 = @func_1410() /* ty=Tensor[(12, 4, 12), int32] */;
  %61 = cast(%60, dtype="float64") /* ty=Tensor[(12, 4, 12), float64] */;
  %62 = exp(%61) /* ty=Tensor[(12, 4, 12), float64] */;
  %63 = cast(%var_1714, dtype="bool") /* ty=Tensor[(12, 4, 12), bool] */;
  %64 = shape_of(%62, dtype="int32") /* ty=Tensor[(3), int32] */;
  %65 = cast(%62, dtype="bool") /* ty=Tensor[(12, 4, 12), bool] */;
  %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %67 = %58.0;
  %68 = %59.0;
  %69 = less(%65, %66) /* ty=Tensor[(12, 4, 12), bool] */;
  (%67, %68, %69)
}

def @func_3309() -> (Tensor[(12, 4, 12), int8],) {
  %70 = @func_1916() /* ty=(Tensor[(12, 4, 12), int8], Tensor[(12, 4, 12), int32]) */;
  %71 = %70.0;
  (%71,)
}

def @func_6283() -> (Tensor[(11, 6, 7), float64], Tensor[(12, 4, 12), int32]) {
  %72 = @func_5749() /* ty=(Tensor[(416), float32], Tensor[(11, 6, 7), float64]) */;
  %73 = %72.1;
  %74 = @func_4183() /* ty=Tensor[(12, 4, 12), int32] */;
  (%73, %74)
}

def @func_7399() -> Tensor[(13, 16, 2), int8] {
  %75 = @func_1133() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), int32], Tensor[(416), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), int32]) */;
  %76 = %75.1;
  %77 = cast(meta[relay.Constant][5] /* ty=Tensor[(13, 16, 2), int32] */, dtype="int8") /* ty=Tensor[(13, 16, 2), int8] */;
  %78 = shape_of(%76, dtype="int32") /* ty=Tensor[(3), int32] */;
  %79 = cast(%76, dtype="int8") /* ty=Tensor[(13, 16, 2), int8] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  right_shift(%79, %80) /* ty=Tensor[(13, 16, 2), int8] */
}

def @func_7494(%var_7463: Tensor[(6, 5, 14), int16], %var_7464: Tensor[(6, 5, 14), int16], %var_7470: Tensor[(72), float32]) -> (Tensor[(13, 16, 2), float32], Tensor[(72), float32], Tensor[(13, 16, 2), int32], Tensor[(6, 5, 14), uint8]) {
  %81 = cast(%var_7470, dtype="float32") /* ty=Tensor[(72), float32] */;
  %82 = reshape(%81, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %83 = @func_4868(%82) /* ty=(Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), float32], Tensor[(72), float32]) */;
  %84 = @func_1133() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), int32], Tensor[(416), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), int32]) */;
  %85 = cast(%var_7464, dtype="bool") /* ty=Tensor[(6, 5, 14), bool] */;
  %86 = shape_of(%var_7463, dtype="int32") /* ty=Tensor[(3), int32] */;
  %87 = cast(%var_7463, dtype="bool") /* ty=Tensor[(6, 5, 14), bool] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %89 = less_equal(%87, %88) /* ty=Tensor[(6, 5, 14), bool] */;
  %90 = cast(%var_7464, dtype="uint8") /* ty=Tensor[(6, 5, 14), uint8] */;
  %91 = shape_of(%89, dtype="int32") /* ty=Tensor[(3), int32] */;
  %92 = cast(%89, dtype="uint8") /* ty=Tensor[(6, 5, 14), uint8] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %94 = %83.1;
  %95 = %84.1;
  %96 = bitwise_and(%92, %93) /* ty=Tensor[(6, 5, 14), uint8] */;
  (%94, %var_7470, %95, %96)
}

def @func_4897() -> (Tensor[(12, 4, 12), int8],) {
  %97 = @func_3281() /* ty=Tensor[(12, 4, 12), int8] */;
  (%97,)
}

def @func_7589() -> (Tensor[(13, 16, 2), int32],) {
  %98 = @func_7206() /* ty=(Tensor[(13, 16, 2), int32], Tensor[(13, 16, 2), bool], Tensor[(13, 16, 2), float32]) */;
  %99 = %98.0;
  (%99,)
}

def @func_4731() -> (Tensor[(12, 4, 12), float64], Tensor[(12, 4, 12), int8], Tensor[(416), float32]) {
  %100 = @func_4168() /* ty=(Tensor[(12, 4, 12), int32],) */;
  %101 = %100.0;
  %102 = cast(%101, dtype="float64") /* ty=Tensor[(12, 4, 12), float64] */;
  %103 = @func_3309() /* ty=(Tensor[(12, 4, 12), int8],) */;
  %104 = tan(%102) /* ty=Tensor[(12, 4, 12), float64] */;
  %105 = %103.0;
  %106 = @func_3174() /* ty=Tensor[(416), float32] */;
  (%104, %105, %106)
}

def @func_2763(%var_2755: Tensor[(12, 4, 12), int32]) -> (Tensor[(12, 4, 12), bool],) {
  %107 = @func_2343() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32]) */;
  %108 = %107.1;
  %109 = cast(%var_2755, dtype="bool") /* ty=Tensor[(12, 4, 12), bool] */;
  %110 = shape_of(%108, dtype="int32") /* ty=Tensor[(3), int32] */;
  %111 = cast(%108, dtype="bool") /* ty=Tensor[(12, 4, 12), bool] */;
  %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %113 = logical_and(%111, %112) /* ty=Tensor[(12, 4, 12), bool] */;
  (%113,)
}

def @func_4204() -> Tensor[(12, 4, 12), int32] {
  %114 = @func_2343() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32]) */;
  %114.0
}

def @func_7658() -> (Tensor[(13, 6, 12), float32],) {
  %115 = @func_3690() /* ty=(Tensor[(13, 16, 2), float64], Tensor[(13, 6, 12), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), float32]) */;
  %116 = %115.1;
  (%116,)
}

def @func_3425(%var_3409: Tensor[(12, 4, 12), int8]) -> (Tensor[(12, 4, 12), bool],) {
  %117 = @func_3300() /* ty=Tensor[(12, 4, 12), int8] */;
  %118 = cast(%var_3409, dtype="bool") /* ty=Tensor[(12, 4, 12), bool] */;
  %119 = shape_of(%117, dtype="int32") /* ty=Tensor[(3), int32] */;
  %120 = cast(%117, dtype="bool") /* ty=Tensor[(12, 4, 12), bool] */;
  %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %122 = equal(%120, %121) /* ty=Tensor[(12, 4, 12), bool] */;
  (%122,)
}

def @func_2981() -> Tensor[(416), float32] {
  %123 = @func_1133() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), int32], Tensor[(416), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), int32]) */;
  %123.2
}

def @func_4678() -> (Tensor[(13, 16, 2), float64],) {
  %124 = @func_3880() /* ty=(Tensor[(13, 16, 2), float32],) */;
  %125 = %124.0;
  %126 = cast(%125, dtype="float64") /* ty=Tensor[(13, 16, 2), float64] */;
  %127 = erf(%126) /* ty=Tensor[(13, 16, 2), float64] */;
  (%127,)
}

def @func_1133() -> (Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), int32], Tensor[(416), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), int32]) {
  %128 = cast(meta[relay.Constant][6] /* ty=Tensor[(12, 4, 12), float32] */, dtype="float32") /* ty=Tensor[(12, 4, 12), float32] */;
  %129 = asinh(%128) /* ty=Tensor[(12, 4, 12), float32] */;
  %130 = cast(meta[relay.Constant][6] /* ty=Tensor[(12, 4, 12), float32] */, dtype="int32") /* ty=Tensor[(12, 4, 12), int32] */;
  %131 = shape_of(%129, dtype="int32") /* ty=Tensor[(3), int32] */;
  %132 = cast(%129, dtype="int32") /* ty=Tensor[(12, 4, 12), int32] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %134 = cast(meta[relay.Constant][7] /* ty=Tensor[(416), float32] */, dtype="float32") /* ty=Tensor[(416), float32] */;
  %135 = cast(meta[relay.Constant][7] /* ty=Tensor[(416), float32] */, dtype="float32") /* ty=Tensor[(416), float32] */;
  %136 = cast(meta[relay.Constant][7] /* ty=Tensor[(416), float32] */, dtype="float32") /* ty=Tensor[(416), float32] */;
  %137 = reshape(%134, newshape=[13, 16, 2]) /* ty=Tensor[(13, 16, 2), float32] */;
  %138 = reshape(%135, newshape=[13, 16, 2]) /* ty=Tensor[(13, 16, 2), float32] */;
  %139 = reshape(%136, newshape=[13, 16, 2]) /* ty=Tensor[(13, 16, 2), float32] */;
  %140 = @func_680(%137, %138, %139) /* ty=(Tensor[(13, 16, 2), int32], Tensor[(13, 16, 2), float32]) */;
  %141 = %140.0;
  %142 = cast(%141, dtype="float32") /* ty=Tensor[(13, 16, 2), float32] */;
  %143 = cast(%141, dtype="float32") /* ty=Tensor[(13, 16, 2), float32] */;
  %144 = cast(%141, dtype="float32") /* ty=Tensor[(13, 16, 2), float32] */;
  %145 = reshape(%142, newshape=[13, 16, 2]) /* ty=Tensor[(13, 16, 2), float32] */;
  %146 = reshape(%143, newshape=[13, 16, 2]) /* ty=Tensor[(13, 16, 2), float32] */;
  %147 = reshape(%144, newshape=[13, 16, 2]) /* ty=Tensor[(13, 16, 2), float32] */;
  %148 = @func_680(%145, %146, %147) /* ty=(Tensor[(13, 16, 2), int32], Tensor[(13, 16, 2), float32]) */;
  %149 = %148.1;
  %150 = cast(%149, dtype="float64") /* ty=Tensor[(13, 16, 2), float64] */;
  %151 = cast(%141, dtype="float32") /* ty=Tensor[(13, 16, 2), float32] */;
  %152 = cast(%149, dtype="float32") /* ty=Tensor[(13, 16, 2), float32] */;
  %153 = cast(%149, dtype="float32") /* ty=Tensor[(13, 16, 2), float32] */;
  %154 = reshape(%151, newshape=[13, 16, 2]) /* ty=Tensor[(13, 16, 2), float32] */;
  %155 = reshape(%152, newshape=[13, 16, 2]) /* ty=Tensor[(13, 16, 2), float32] */;
  %156 = reshape(%153, newshape=[13, 16, 2]) /* ty=Tensor[(13, 16, 2), float32] */;
  %157 = @func_680(%154, %155, %156) /* ty=(Tensor[(13, 16, 2), int32], Tensor[(13, 16, 2), float32]) */;
  %158 = maximum(%132, %133) /* ty=Tensor[(12, 4, 12), int32] */;
  %159 = log10(%150) /* ty=Tensor[(13, 16, 2), float64] */;
  %160 = %157.0;
  (%158, %141, meta[relay.Constant][7] /* ty=Tensor[(416), float32] */, %159, %160)
}

def @func_3690() -> (Tensor[(13, 16, 2), float64], Tensor[(13, 6, 12), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), float32]) {
  %161 = @func_2048() /* ty=Tensor[(13, 16, 2), float32] */;
  %162 = cast(%161, dtype="float32") /* ty=Tensor[(13, 16, 2), float32] */;
  %163 = cosh(%162) /* ty=Tensor[(13, 16, 2), float32] */;
  %164 = cast(%161, dtype="float64") /* ty=Tensor[(13, 16, 2), float64] */;
  %165 = shape_of(%163, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(%163, dtype="float64") /* ty=Tensor[(13, 16, 2), float64] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %168 = @func_2601() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %169 = cast(%163, dtype="float64") /* ty=Tensor[(13, 16, 2), float64] */;
  %170 = atan(%169) /* ty=Tensor[(13, 16, 2), float64] */;
  %171 = cast(%170, dtype="float64") /* ty=Tensor[(13, 16, 2), float64] */;
  %172 = floor_divide(%166, %167) /* ty=Tensor[(13, 16, 2), float64] */;
  %173 = %168.0;
  %174 = asin(%171) /* ty=Tensor[(13, 16, 2), float64] */;
  %175 = @func_2048() /* ty=Tensor[(13, 16, 2), float32] */;
  (%172, %173, %174, %175)
}

def @func_4444(%var_4440: Tensor[(15, 9, 4), float64]) -> (Tensor[(15, 9, 4), float64],) {
  %176 = cast(%var_4440, dtype="float64") /* ty=Tensor[(15, 9, 4), float64] */;
  %177 = log2(%176) /* ty=Tensor[(15, 9, 4), float64] */;
  (%177,)
}

def @func_1356() -> Tensor[(13, 16, 2), int32] {
  %178 = @func_1133() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), int32], Tensor[(416), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), int32]) */;
  %178.4
}

def @func_3479() -> Tensor[(12, 4, 12), int32] {
  %179 = @func_1839() /* ty=(Tensor[(12, 4, 12), int32],) */;
  %179.0
}

def @func_4314() -> (Tensor[(416), float32],) {
  %180 = @func_3341() /* ty=(Tensor[(416), float32],) */;
  %181 = %180.0;
  (%181,)
}

def @func_7115(%var_7089: Tensor[(1, 16, 11), float32], %var_7092: Tensor[(8, 16, 11), float32]) -> (Tensor[(8, 16, 11), float64], Tensor[(1, 16, 11), float64]) {
  %182 = cast(%var_7089, dtype="float64") /* ty=Tensor[(1, 16, 11), float64] */;
  %183 = cast(%var_7092, dtype="float64") /* ty=Tensor[(8, 16, 11), float64] */;
  %184 = cast(%var_7089, dtype="float32") /* ty=Tensor[(1, 16, 11), float32] */;
  %185 = sqrt(%184) /* ty=Tensor[(1, 16, 11), float32] */;
  %186 = cast(%185, dtype="float64") /* ty=Tensor[(1, 16, 11), float64] */;
  %187 = floor_divide(%182, %183) /* ty=Tensor[(8, 16, 11), float64] */;
  %188 = sigmoid(%186) /* ty=Tensor[(1, 16, 11), float64] */;
  (%187, %188)
}

def @func_2923() -> (Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), bool]) {
  %189 = @func_1410() /* ty=Tensor[(12, 4, 12), int32] */;
  %190 = cast(%189, dtype="float64") /* ty=Tensor[(12, 4, 12), float64] */;
  %191 = reshape(%190, newshape=[12, 4, 12]) /* ty=Tensor[(12, 4, 12), float64] */;
  %192 = @func_1726(%191) /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), bool]) */;
  %193 = %192.2;
  (%189, %193)
}

def @func_7940() -> (Tensor[(12, 4, 12), bool], Tensor[(12, 4, 12), int32]) {
  %194 = @func_5197() /* ty=(Tensor[(12, 4, 12), float32], Tensor[(12, 4, 12), float32], Tensor[(12, 4, 12), bool]) */;
  %195 = @func_2429() /* ty=(Tensor[(12, 4, 12), int32],) */;
  %196 = %194.2;
  %197 = %195.0;
  (%196, %197)
}

def @func_1305() -> (Tensor[(12, 4, 12), int32],) {
  %198 = @func_1133() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), int32], Tensor[(416), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), int32]) */;
  %199 = %198.0;
  (%199,)
}

def @func_7904() -> Tensor[(13, 16, 2), float32] {
  @func_6449() /* ty=Tensor[(13, 16, 2), float32] */
}

def @func_6700(%var_6684: Tensor[(36, 2), float32], %var_6686: Tensor[(36, 2), float32]) -> (Tensor[(12, 4, 12), int8], Tensor[(13, 16, 2), float32], Tensor[(36, 2), float32]) {
  %200 = @func_5008() /* ty=(Tensor[(12, 4, 12), int8], Tensor[(3, 7), float64]) */;
  %201 = cast(%var_6684, dtype="float32") /* ty=Tensor[(36, 2), float32] */;
  %202 = reshape(%201, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %203 = @func_4868(%202) /* ty=(Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), float32], Tensor[(72), float32]) */;
  %204 = cast(%var_6686, dtype="float32") /* ty=Tensor[(36, 2), float32] */;
  %205 = shape_of(%var_6684, dtype="int32") /* ty=Tensor[(2), int32] */;
  %206 = cast(%var_6684, dtype="float32") /* ty=Tensor[(36, 2), float32] */;
  %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %208 = %200.0;
  %209 = %203.1;
  %210 = power(%206, %207) /* ty=Tensor[(36, 2), float32] */;
  (%208, %209, %210)
}

def @func_1410() -> Tensor[(12, 4, 12), int32] {
  %211 = @func_1305() /* ty=(Tensor[(12, 4, 12), int32],) */;
  %211.0
}

def @func_3174() -> Tensor[(416), float32] {
  @func_2981() /* ty=Tensor[(416), float32] */
}

def @func_4239(%var_4227: float64, %var_4228: Tensor[(6, 1), float64]) -> Tensor[(6, 1), float64] {
  %212 = cast(%var_4227, dtype="float64") /* ty=float64 */;
  %213 = cast(%var_4228, dtype="float64") /* ty=Tensor[(6, 1), float64] */;
  divide(%212, %213) /* ty=Tensor[(6, 1), float64] */
}

def @func_4640() -> (Tensor[(13, 16, 2), float32],) {
  %214 = @func_2315() /* ty=(Tensor[(12, 4, 12), float32], Tensor[(12, 4, 12), float64], Tensor[(13, 16, 2), float32]) */;
  %215 = %214.2;
  (%215,)
}

def @func_1968(%var_1941: uint8, %var_1942: Tensor[(15, 8, 15), uint8]) -> (Tensor[(15, 8, 15), bool], Tensor[(12, 4, 12), float32], Tensor[(3, 7), float64]) {
  %216 = cast(%var_1941, dtype="bool") /* ty=bool */;
  %217 = cast(%var_1942, dtype="bool") /* ty=Tensor[(15, 8, 15), bool] */;
  %218 = @func_1768() /* ty=(Tensor[(12, 4, 12), float32],) */;
  %219 = @func_1567() /* ty=(Tensor[(3, 7), float64],) */;
  %220 = not_equal(%216, %217) /* ty=Tensor[(15, 8, 15), bool] */;
  %221 = %218.0;
  %222 = %219.0;
  (%220, %221, %222)
}

def @func_5726(%var_5715: Tensor[(1, 11, 16), float32]) -> Tensor[(1, 11, 16), float32] {
  %223 = cast(%var_5715, dtype="float32") /* ty=Tensor[(1, 11, 16), float32] */;
  rsqrt(%223) /* ty=Tensor[(1, 11, 16), float32] */
}

def @func_7019() -> (Tensor[(11, 4, 3), bool], Tensor[(13, 16, 2), int32], Tensor[(72, 1), float32], Tensor[(13, 16, 2), float32], Tensor[(12, 4, 12), float64], Tensor[(13, 6, 12), float32]) {
  %224 = @func_5350() /* ty=(Tensor[(13, 16, 2), int32], Tensor[(13, 16, 2), float32]) */;
  %225 = cast(meta[relay.Constant][8] /* ty=Tensor[(72, 1), float32] */, dtype="float32") /* ty=Tensor[(72, 1), float32] */;
  %226 = cast(meta[relay.Constant][8] /* ty=Tensor[(72, 1), float32] */, dtype="float32") /* ty=Tensor[(72, 1), float32] */;
  %227 = reshape(%225, newshape=[36, 2]) /* ty=Tensor[(36, 2), float32] */;
  %228 = reshape(%226, newshape=[36, 2]) /* ty=Tensor[(36, 2), float32] */;
  %229 = @func_6700(%227, %228) /* ty=(Tensor[(12, 4, 12), int8], Tensor[(13, 16, 2), float32], Tensor[(36, 2), float32]) */;
  %230 = %229.0;
  %231 = @func_2429() /* ty=(Tensor[(12, 4, 12), int32],) */;
  %232 = %231.0;
  %233 = cast(%232, dtype="float64") /* ty=Tensor[(12, 4, 12), float64] */;
  %234 = shape_of(%230, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(%230, dtype="float64") /* ty=Tensor[(12, 4, 12), float64] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %237 = @func_2601() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %238 = @func_5473() /* ty=Tensor[(11, 4, 3), bool] */;
  %239 = %224.0;
  %240 = @func_2261() /* ty=Tensor[(13, 16, 2), float32] */;
  %241 = divide(%235, %236) /* ty=Tensor[(12, 4, 12), float64] */;
  %242 = %237.0;
  (%238, %239, meta[relay.Constant][8] /* ty=Tensor[(72, 1), float32] */, %240, %241, %242)
}

def @func_3984() -> (Tensor[(3, 7), float64], Tensor[(12, 4, 12), int8]) {
  %243 = @func_1916() /* ty=(Tensor[(12, 4, 12), int8], Tensor[(12, 4, 12), int32]) */;
  %244 = @func_1885() /* ty=Tensor[(3, 7), float64] */;
  %245 = %243.0;
  (%244, %245)
}

def @func_5350() -> (Tensor[(13, 16, 2), int32], Tensor[(13, 16, 2), float32]) {
  %246 = @func_3880() /* ty=(Tensor[(13, 16, 2), float32],) */;
  %247 = @func_3759() /* ty=Tensor[(13, 16, 2), int32] */;
  %248 = %246.0;
  (%247, %248)
}

def @func_6584(%var_6509: Tensor[(12, 4, 12), float32]) -> (Tensor[(12, 4, 12), float32], Tensor[(13, 16, 2), float64]) {
  %249 = @func_1768() /* ty=(Tensor[(12, 4, 12), float32],) */;
  %250 = %249.0;
  %251 = cast(%var_6509, dtype="float32") /* ty=Tensor[(12, 4, 12), float32] */;
  %252 = shape_of(%250, dtype="int32") /* ty=Tensor[(3), int32] */;
  %253 = cast(%250, dtype="float32") /* ty=Tensor[(12, 4, 12), float32] */;
  %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %255 = mod(%253, %254) /* ty=Tensor[(12, 4, 12), float32] */;
  %256 = cast(%255, dtype="float32") /* ty=Tensor[(12, 4, 12), float32] */;
  %257 = @func_4678() /* ty=(Tensor[(13, 16, 2), float64],) */;
  %258 = sqrt(%256) /* ty=Tensor[(12, 4, 12), float32] */;
  %259 = %257.0;
  (%258, %259)
}

def @func_7831() -> Tensor[(12, 4, 12), int32] {
  @func_4204() /* ty=Tensor[(12, 4, 12), int32] */
}

def @func_1916() -> (Tensor[(12, 4, 12), int8], Tensor[(12, 4, 12), int32]) {
  %260 = @func_1839() /* ty=(Tensor[(12, 4, 12), int32],) */;
  %261 = %260.0;
  %262 = @func_1839() /* ty=(Tensor[(12, 4, 12), int32],) */;
  %263 = %262.0;
  %264 = cast(%263, dtype="int8") /* ty=Tensor[(12, 4, 12), int8] */;
  %265 = shape_of(%261, dtype="int32") /* ty=Tensor[(3), int32] */;
  %266 = cast(%261, dtype="int8") /* ty=Tensor[(12, 4, 12), int8] */;
  %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %268 = @func_1629() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32]) */;
  %269 = bitwise_or(%266, %267) /* ty=Tensor[(12, 4, 12), int8] */;
  %270 = %268.1;
  (%269, %270)
}

def @func_6225() -> (Tensor[(12, 4, 12), float32],) {
  %271 = @func_2861() /* ty=(Tensor[(12, 4, 12), int8], Tensor[(12, 4, 12), float32]) */;
  %272 = %271.1;
  (%272,)
}

def @func_2315() -> (Tensor[(12, 4, 12), float32], Tensor[(12, 4, 12), float64], Tensor[(13, 16, 2), float32]) {
  %273 = @func_1916() /* ty=(Tensor[(12, 4, 12), int8], Tensor[(12, 4, 12), int32]) */;
  %274 = %273.1;
  %275 = cast(%274, dtype="float32") /* ty=Tensor[(12, 4, 12), float32] */;
  %276 = cast(%274, dtype="float64") /* ty=Tensor[(12, 4, 12), float64] */;
  %277 = log(%275) /* ty=Tensor[(12, 4, 12), float32] */;
  %278 = sinh(%276) /* ty=Tensor[(12, 4, 12), float64] */;
  %279 = @func_2261() /* ty=Tensor[(13, 16, 2), float32] */;
  (%277, %278, %279)
}

def @func_4793(%var_4788: Tensor[(12, 4, 12), int32]) -> (Tensor[(12, 4, 12), uint32],) {
  %280 = @func_2429() /* ty=(Tensor[(12, 4, 12), int32],) */;
  %281 = %280.0;
  %282 = cast(%var_4788, dtype="uint32") /* ty=Tensor[(12, 4, 12), uint32] */;
  %283 = shape_of(%281, dtype="int32") /* ty=Tensor[(3), int32] */;
  %284 = cast(%281, dtype="uint32") /* ty=Tensor[(12, 4, 12), uint32] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %286 = bitwise_and(%284, %285) /* ty=Tensor[(12, 4, 12), uint32] */;
  (%286,)
}

def @func_7626() -> (Tensor[(11, 6, 7), uint16], Tensor[(11, 6, 7), float64]) {
  %287 = @func_5079() /* ty=(Tensor[(11, 6, 7), float64],) */;
  %288 = %287.0;
  %289 = cast(meta[relay.Constant][9] /* ty=Tensor[(11, 6, 7), float64] */, dtype="uint16") /* ty=Tensor[(11, 6, 7), uint16] */;
  %290 = shape_of(%288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%288, dtype="uint16") /* ty=Tensor[(11, 6, 7), uint16] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %293 = cast(meta[relay.Constant][9] /* ty=Tensor[(11, 6, 7), float64] */, dtype="float32") /* ty=Tensor[(11, 6, 7), float32] */;
  %294 = erf(%293) /* ty=Tensor[(11, 6, 7), float32] */;
  %295 = cast(%294, dtype="float64") /* ty=Tensor[(11, 6, 7), float64] */;
  %296 = maximum(%291, %292) /* ty=Tensor[(11, 6, 7), uint16] */;
  %297 = log10(%295) /* ty=Tensor[(11, 6, 7), float64] */;
  (%296, %297)
}

def @func_3300() -> Tensor[(12, 4, 12), int8] {
  @func_3281() /* ty=Tensor[(12, 4, 12), int8] */
}

def @func_680(%var_647: Tensor[(13, 16, 2), float32], %var_648: Tensor[(13, 16, 2), float32], %var_657: Tensor[(13, 16, 2), float32]) -> (Tensor[(13, 16, 2), int32], Tensor[(13, 16, 2), float32]) {
  %298 = cast(%var_657, dtype="int32") /* ty=Tensor[(13, 16, 2), int32] */;
  %299 = shape_of(%var_647, dtype="int32") /* ty=Tensor[(3), int32] */;
  %300 = cast(%var_647, dtype="int32") /* ty=Tensor[(13, 16, 2), int32] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %302 = cast(%var_648, dtype="bool") /* ty=Tensor[(13, 16, 2), bool] */;
  %303 = shape_of(%var_647, dtype="int32") /* ty=Tensor[(3), int32] */;
  %304 = cast(%var_647, dtype="bool") /* ty=Tensor[(13, 16, 2), bool] */;
  %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %306 = not_equal(%304, %305) /* ty=Tensor[(13, 16, 2), bool] */;
  %307 = cast(%306, dtype="float64") /* ty=Tensor[(13, 16, 2), float64] */;
  %308 = exp(%307) /* ty=Tensor[(13, 16, 2), float64] */;
  %309 = cast(%308, dtype="float32") /* ty=Tensor[(13, 16, 2), float32] */;
  %310 = logical_xor(%300, %301) /* ty=Tensor[(13, 16, 2), int32] */;
  %311 = cos(%309) /* ty=Tensor[(13, 16, 2), float32] */;
  (%310, %311)
}

def @func_4505() -> (Tensor[(13, 16, 2), float32],) {
  %312 = @func_2048() /* ty=Tensor[(13, 16, 2), float32] */;
  (%312,)
}

def @func_5888() -> (Tensor[(12, 4, 12), float32],) {
  %313 = @func_3511() /* ty=(Tensor[(12, 4, 12), float32],) */;
  %314 = %313.0;
  (%314,)
}

def @func_6177() -> (Tensor[(16, 10, 14), float64], Tensor[(12, 4, 12), float32], Tensor[(144), float32], Tensor[(6, 2, 12), float64]) {
  %315 = @func_5508() /* ty=(Tensor[(16, 10, 14), float64],) */;
  %316 = @func_5197() /* ty=(Tensor[(12, 4, 12), float32], Tensor[(12, 4, 12), float32], Tensor[(12, 4, 12), bool]) */;
  %317 = cast(meta[relay.Constant][10] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %318 = cast(meta[relay.Constant][10] /* ty=Tensor[(144), float32] */, dtype="bool") /* ty=Tensor[(144), bool] */;
  %319 = reshape(%317, newshape=[6, 2, 12]) /* ty=Tensor[(6, 2, 12), float32] */;
  %320 = reshape(%318, newshape=[6, 2, 12]) /* ty=Tensor[(6, 2, 12), bool] */;
  %321 = @func_3082(%319, %320) /* ty=(Tensor[(6, 2, 12), bool], Tensor[(6, 2, 12), int8]) */;
  %322 = %321.1;
  %323 = cast(%322, dtype="float64") /* ty=Tensor[(6, 2, 12), float64] */;
  %324 = %315.0;
  %325 = %316.1;
  %326 = cos(%323) /* ty=Tensor[(6, 2, 12), float64] */;
  (%324, %325, meta[relay.Constant][10] /* ty=Tensor[(144), float32] */, %326)
}

def @func_3606() -> (Tensor[(12, 4, 12), bool], Tensor[(13, 16, 2), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), float32]) {
  %327 = @func_2923() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), bool]) */;
  %328 = @func_1133() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), int32], Tensor[(416), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), int32]) */;
  %329 = %328.1;
  %330 = cast(%329, dtype="float64") /* ty=Tensor[(13, 16, 2), float64] */;
  %331 = %327.1;
  %332 = @func_2048() /* ty=Tensor[(13, 16, 2), float32] */;
  %333 = acosh(%330) /* ty=Tensor[(13, 16, 2), float64] */;
  %334 = @func_3337() /* ty=Tensor[(13, 16, 2), float32] */;
  (%331, %332, %333, %334)
}

def @func_6081(%var_6021: uint64, %var_6022: Tensor[(7, 1), uint64], %var_6027: Tensor[(15, 2, 12), uint64], %var_6034: Tensor[(15, 2, 12), bool], %var_6055: Tensor[(144, 4), int8]) -> (Tensor[(7, 1), uint64], Tensor[(3, 7), float64], Tensor[(15, 2, 12), uint8], Tensor[(13, 16, 2), bool], Tensor[(12, 4, 12), bool], Tensor[(144, 4), int8]) {
  %335 = cast(%var_6021, dtype="uint64") /* ty=uint64 */;
  %336 = cast(%var_6022, dtype="uint64") /* ty=Tensor[(7, 1), uint64] */;
  %337 = @func_3358() /* ty=(Tensor[(3, 7), float64],) */;
  %338 = cast(%var_6021, dtype="bool") /* ty=bool */;
  %339 = cast(%var_6027, dtype="bool") /* ty=Tensor[(15, 2, 12), bool] */;
  %340 = greater_equal(%338, %339) /* ty=Tensor[(15, 2, 12), bool] */;
  %341 = cast(%var_6034, dtype="uint64") /* ty=Tensor[(15, 2, 12), uint64] */;
  %342 = shape_of(%340, dtype="int32") /* ty=Tensor[(3), int32] */;
  %343 = cast(%340, dtype="uint64") /* ty=Tensor[(15, 2, 12), uint64] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %345 = maximum(%343, %344) /* ty=Tensor[(15, 2, 12), uint64] */;
  %346 = cast(%340, dtype="uint8") /* ty=Tensor[(15, 2, 12), uint8] */;
  %347 = shape_of(%345, dtype="int32") /* ty=Tensor[(3), int32] */;
  %348 = cast(%345, dtype="uint8") /* ty=Tensor[(15, 2, 12), uint8] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %350 = cast(%var_6055, dtype="int8") /* ty=Tensor[(144, 4), int8] */;
  %351 = reshape(%350, newshape=[12, 4, 12]) /* ty=Tensor[(12, 4, 12), int8] */;
  %352 = @func_3425(%351) /* ty=(Tensor[(12, 4, 12), bool],) */;
  %353 = multiply(%335, %336) /* ty=Tensor[(7, 1), uint64] */;
  %354 = %337.0;
  %355 = left_shift(%348, %349) /* ty=Tensor[(15, 2, 12), uint8] */;
  %356 = @func_5281() /* ty=Tensor[(13, 16, 2), bool] */;
  %357 = %352.0;
  (%353, %354, %355, %356, %357, %var_6055)
}

def @func_1535(%var_1491: Tensor[(12, 4, 12), int32]) -> (Tensor[(2310), float32], Tensor[(12, 4, 12), float64], Tensor[(12, 4, 12), uint16], Tensor[(13, 16, 2), int32], Tensor[(12, 4, 12), uint32]) {
  %358 = @func_1410() /* ty=Tensor[(12, 4, 12), int32] */;
  %359 = cast(%var_1491, dtype="float64") /* ty=Tensor[(12, 4, 12), float64] */;
  %360 = shape_of(%358, dtype="int32") /* ty=Tensor[(3), int32] */;
  %361 = cast(%358, dtype="float64") /* ty=Tensor[(12, 4, 12), float64] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %363 = cast(meta[relay.Constant][11] /* ty=Tensor[(2310), float32] */, dtype="float32") /* ty=Tensor[(2310), float32] */;
  %364 = reshape(%363, newshape=[15, 11, 14]) /* ty=Tensor[(15, 11, 14), float32] */;
  %365 = @func_1228(%364) /* ty=(Tensor[(15, 11, 14), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), float32], Tensor[(12, 4, 12), int32]) */;
  %366 = %365.3;
  %367 = cast(%var_1491, dtype="uint16") /* ty=Tensor[(12, 4, 12), uint16] */;
  %368 = shape_of(%366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %369 = cast(%366, dtype="uint16") /* ty=Tensor[(12, 4, 12), uint16] */;
  %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %371 = cast(meta[relay.Constant][12] /* ty=Tensor[(12, 4, 12), int32] */, dtype="uint32") /* ty=Tensor[(12, 4, 12), uint32] */;
  %372 = shape_of(%366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%366, dtype="uint32") /* ty=Tensor[(12, 4, 12), uint32] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %375 = floor_mod(%361, %362) /* ty=Tensor[(12, 4, 12), float64] */;
  %376 = logical_xor(%369, %370) /* ty=Tensor[(12, 4, 12), uint16] */;
  %377 = @func_1356() /* ty=Tensor[(13, 16, 2), int32] */;
  %378 = multiply(%373, %374) /* ty=Tensor[(12, 4, 12), uint32] */;
  (meta[relay.Constant][11] /* ty=Tensor[(2310), float32] */, %375, %376, %377, %378)
}

def @func_2806(%var_2798: Tensor[(12, 1, 6), float32]) -> (Tensor[(12, 1, 6), float32], Tensor[(13, 16, 2), float32]) {
  %379 = cast(%var_2798, dtype="float32") /* ty=Tensor[(12, 1, 6), float32] */;
  %380 = log2(%379) /* ty=Tensor[(12, 1, 6), float32] */;
  %381 = @func_2261() /* ty=Tensor[(13, 16, 2), float32] */;
  (%380, %381)
}

def @func_2429() -> (Tensor[(12, 4, 12), int32],) {
  %382 = @func_1305() /* ty=(Tensor[(12, 4, 12), int32],) */;
  %383 = %382.0;
  (%383,)
}

def @func_2373() -> (Tensor[(12, 4, 12), int32],) {
  %384 = @func_1305() /* ty=(Tensor[(12, 4, 12), int32],) */;
  %385 = %384.0;
  (%385,)
}

def @func_5749() -> (Tensor[(416), float32], Tensor[(11, 6, 7), float64]) {
  %386 = @func_5079() /* ty=(Tensor[(11, 6, 7), float64],) */;
  %387 = @func_3174() /* ty=Tensor[(416), float32] */;
  %388 = %386.0;
  (%387, %388)
}

def @func_4582() -> (Tensor[(12, 4, 12), int8],) {
  %389 = @func_3309() /* ty=(Tensor[(12, 4, 12), int8],) */;
  %390 = %389.0;
  (%390,)
}

def @func_4183() -> Tensor[(12, 4, 12), int32] {
  %391 = @func_2343() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32]) */;
  %391.0
}

def @func_3341() -> (Tensor[(416), float32],) {
  %392 = @func_3174() /* ty=Tensor[(416), float32] */;
  (%392,)
}

def @func_3880() -> (Tensor[(13, 16, 2), float32],) {
  %393 = @func_3606() /* ty=(Tensor[(12, 4, 12), bool], Tensor[(13, 16, 2), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), float32]) */;
  %394 = %393.3;
  (%394,)
}

def @func_5281() -> Tensor[(13, 16, 2), bool] {
  %395 = @func_4640() /* ty=(Tensor[(13, 16, 2), float32],) */;
  %396 = %395.0;
  %397 = @func_3337() /* ty=Tensor[(13, 16, 2), float32] */;
  %398 = cast(%397, dtype="bool") /* ty=Tensor[(13, 16, 2), bool] */;
  %399 = shape_of(%396, dtype="int32") /* ty=Tensor[(3), int32] */;
  %400 = cast(%396, dtype="bool") /* ty=Tensor[(13, 16, 2), bool] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%400, %401) /* ty=Tensor[(13, 16, 2), bool] */
}

def @func_1567() -> (Tensor[(3, 7), float64],) {
  %402 = cast(meta[relay.Constant][13] /* ty=Tensor[(3, 7), float64] */, dtype="float64") /* ty=Tensor[(3, 7), float64] */;
  %403 = acosh(%402) /* ty=Tensor[(3, 7), float64] */;
  (%403,)
}

def @func_2861() -> (Tensor[(12, 4, 12), int8], Tensor[(12, 4, 12), float32]) {
  %404 = @func_1916() /* ty=(Tensor[(12, 4, 12), int8], Tensor[(12, 4, 12), int32]) */;
  %405 = @func_1768() /* ty=(Tensor[(12, 4, 12), float32],) */;
  %406 = %404.0;
  %407 = %405.0;
  (%406, %407)
}

def @func_3158(%var_3134: Tensor[(36, 2), float32], %var_3145: Tensor[(12, 4, 12), int32], %var_3152: Tensor[(36, 2), float32]) -> (Tensor[(13, 16, 2), float32], Tensor[(13, 16, 2), float32], Tensor[(12, 4, 12), float32], Tensor[(36, 2), float64]) {
  %408 = cast(%var_3134, dtype="float32") /* ty=Tensor[(36, 2), float32] */;
  %409 = reshape(%408, newshape=[12, 1, 6]) /* ty=Tensor[(12, 1, 6), float32] */;
  %410 = @func_2806(%409) /* ty=(Tensor[(12, 1, 6), float32], Tensor[(13, 16, 2), float32]) */;
  %411 = cast(%var_3134, dtype="float32") /* ty=Tensor[(36, 2), float32] */;
  %412 = reshape(%411, newshape=[12, 1, 6]) /* ty=Tensor[(12, 1, 6), float32] */;
  %413 = @func_2806(%412) /* ty=(Tensor[(12, 1, 6), float32], Tensor[(13, 16, 2), float32]) */;
  %414 = @func_2373() /* ty=(Tensor[(12, 4, 12), int32],) */;
  %415 = %414.0;
  %416 = cast(%var_3145, dtype="float32") /* ty=Tensor[(12, 4, 12), float32] */;
  %417 = shape_of(%415, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(%415, dtype="float32") /* ty=Tensor[(12, 4, 12), float32] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %420 = cast(%var_3152, dtype="float64") /* ty=Tensor[(36, 2), float64] */;
  %421 = shape_of(%var_3134, dtype="int32") /* ty=Tensor[(2), int32] */;
  %422 = cast(%var_3134, dtype="float64") /* ty=Tensor[(36, 2), float64] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %424 = %410.1;
  %425 = %413.1;
  %426 = floor_divide(%418, %419) /* ty=Tensor[(12, 4, 12), float32] */;
  %427 = divide(%422, %423) /* ty=Tensor[(36, 2), float64] */;
  (%424, %425, %426, %427)
}

def @func_1768() -> (Tensor[(12, 4, 12), float32],) {
  %428 = @func_1305() /* ty=(Tensor[(12, 4, 12), int32],) */;
  %429 = %428.0;
  %430 = cast(%429, dtype="float32") /* ty=Tensor[(12, 4, 12), float32] */;
  %431 = acosh(%430) /* ty=Tensor[(12, 4, 12), float32] */;
  (%431,)
}

def @func_1885() -> Tensor[(3, 7), float64] {
  %432 = @func_1802() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(3, 7), float64], Tensor[(12, 4, 12), int32]) */;
  %432.1
}

def @func_2216() -> (Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), float32]) {
  %433 = @func_1410() /* ty=Tensor[(12, 4, 12), int32] */;
  %434 = @func_2048() /* ty=Tensor[(13, 16, 2), float32] */;
  (%433, %434)
}

def @func_1802() -> (Tensor[(12, 4, 12), int32], Tensor[(3, 7), float64], Tensor[(12, 4, 12), int32]) {
  %435 = @func_1629() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32]) */;
  %436 = @func_1567() /* ty=(Tensor[(3, 7), float64],) */;
  %437 = @func_1629() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32]) */;
  %438 = %435.0;
  %439 = %436.0;
  %440 = %437.1;
  (%438, %439, %440)
}

def @func_7206() -> (Tensor[(13, 16, 2), int32], Tensor[(13, 16, 2), bool], Tensor[(13, 16, 2), float32]) {
  %441 = @func_6449() /* ty=Tensor[(13, 16, 2), float32] */;
  %442 = cast(%441, dtype="float32") /* ty=Tensor[(13, 16, 2), float32] */;
  %443 = log(%442) /* ty=Tensor[(13, 16, 2), float32] */;
  %444 = cast(%443, dtype="float32") /* ty=Tensor[(13, 16, 2), float32] */;
  %445 = sqrt(%444) /* ty=Tensor[(13, 16, 2), float32] */;
  %446 = cast(%443, dtype="bool") /* ty=Tensor[(13, 16, 2), bool] */;
  %447 = shape_of(%445, dtype="int32") /* ty=Tensor[(3), int32] */;
  %448 = cast(%445, dtype="bool") /* ty=Tensor[(13, 16, 2), bool] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %450 = @func_1356() /* ty=Tensor[(13, 16, 2), int32] */;
  %451 = greater_equal(%448, %449) /* ty=Tensor[(13, 16, 2), bool] */;
  %452 = @func_3337() /* ty=Tensor[(13, 16, 2), float32] */;
  (%450, %451, %452)
}

def @func_7968() -> (Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), float32]) {
  %453 = @func_4204() /* ty=Tensor[(12, 4, 12), int32] */;
  %454 = @func_7422() /* ty=Tensor[(12, 4, 12), float32] */;
  (%453, %454)
}

def @func_4168() -> (Tensor[(12, 4, 12), int32],) {
  %455 = @func_1410() /* ty=Tensor[(12, 4, 12), int32] */;
  (%455,)
}

def @func_6208(%var_6203: uint64, %var_6204: Tensor[(7), uint64], %var_6205: Tensor[(360), uint64], %var_6206: Tensor[(576), int8]) -> (Tensor[(13, 16, 2), bool], Tensor[(3, 7), float64], uint64, Tensor[(7), uint64], Tensor[(360), uint64], Tensor[(576), int8]) {
  %456 = cast(%var_6203, dtype="uint64") /* ty=uint64 */;
  %457 = cast(%var_6204, dtype="uint64") /* ty=Tensor[(7), uint64] */;
  %458 = cast(%var_6205, dtype="uint64") /* ty=Tensor[(360), uint64] */;
  %459 = cast(%var_6205, dtype="bool") /* ty=Tensor[(360), bool] */;
  %460 = cast(%var_6206, dtype="int8") /* ty=Tensor[(576), int8] */;
  %461 = reshape(%456, newshape=[]) /* ty=uint64 */;
  %462 = reshape(%457, newshape=[7, 1]) /* ty=Tensor[(7, 1), uint64] */;
  %463 = reshape(%458, newshape=[15, 2, 12]) /* ty=Tensor[(15, 2, 12), uint64] */;
  %464 = reshape(%459, newshape=[15, 2, 12]) /* ty=Tensor[(15, 2, 12), bool] */;
  %465 = reshape(%460, newshape=[144, 4]) /* ty=Tensor[(144, 4), int8] */;
  %466 = @func_6081(%461, %462, %463, %464, %465) /* ty=(Tensor[(7, 1), uint64], Tensor[(3, 7), float64], Tensor[(15, 2, 12), uint8], Tensor[(13, 16, 2), bool], Tensor[(12, 4, 12), bool], Tensor[(144, 4), int8]) */;
  %467 = @func_5281() /* ty=Tensor[(13, 16, 2), bool] */;
  %468 = %466.1;
  (%467, %468, %var_6203, %var_6204, %var_6205, %var_6206)
}

def @func_2343() -> (Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32]) {
  %469 = @func_1916() /* ty=(Tensor[(12, 4, 12), int8], Tensor[(12, 4, 12), int32]) */;
  %470 = @func_1629() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32]) */;
  %471 = %469.1;
  %472 = %470.0;
  %473 = @func_1410() /* ty=Tensor[(12, 4, 12), int32] */;
  (%471, %472, %473)
}

def @func_5473() -> Tensor[(11, 4, 3), bool] {
  %474 = @func_5112() /* ty=(Tensor[(11, 4, 3), bool],) */;
  %474.0
}

def @func_5156() -> (Tensor[(3, 7), float64], Tensor[(12, 4, 12), float32], Tensor[(576), int8]) {
  %475 = @func_3358() /* ty=(Tensor[(3, 7), float64],) */;
  %476 = cast(meta[relay.Constant][14] /* ty=Tensor[(576), int8] */, dtype="int8") /* ty=Tensor[(576), int8] */;
  %477 = reshape(%476, newshape=[12, 4, 12]) /* ty=Tensor[(12, 4, 12), int8] */;
  %478 = @func_4766(%477) /* ty=(Tensor[(12, 4, 12), float32],) */;
  %479 = %475.0;
  %480 = %478.0;
  (%479, %480, meta[relay.Constant][14] /* ty=Tensor[(576), int8] */)
}

def @func_2048() -> Tensor[(13, 16, 2), float32] {
  %481 = @func_1356() /* ty=Tensor[(13, 16, 2), int32] */;
  %482 = cast(%481, dtype="float32") /* ty=Tensor[(13, 16, 2), float32] */;
  atanh(%482) /* ty=Tensor[(13, 16, 2), float32] */
}

def @func_7736(%var_7715: Tensor[(13, 16, 4), int32]) -> (Tensor[(13, 16, 4), int32], Tensor[(3, 7), float64]) {
  %483 = cast(meta[relay.Constant][15] /* ty=Tensor[(13, 1, 4), int32] */, dtype="int32") /* ty=Tensor[(13, 1, 4), int32] */;
  %484 = cast(%var_7715, dtype="int32") /* ty=Tensor[(13, 16, 4), int32] */;
  %485 = @func_1802() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(3, 7), float64], Tensor[(12, 4, 12), int32]) */;
  %486 = add(%483, %484) /* ty=Tensor[(13, 16, 4), int32] */;
  %487 = %485.1;
  (%486, %487)
}

def @func_5453(%var_5414: Tensor[(12, 4, 12), int32]) -> (Tensor[(12, 4, 12), bool], Tensor[(12, 4, 12), int8], Tensor[(12, 4, 12), int8], Tensor[(12, 4, 12), float64], Tensor[(12, 4, 12), int8]) {
  %488 = @func_1629() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32]) */;
  %489 = %488.0;
  %490 = cast(%var_5414, dtype="bool") /* ty=Tensor[(12, 4, 12), bool] */;
  %491 = shape_of(%489, dtype="int32") /* ty=Tensor[(3), int32] */;
  %492 = cast(%489, dtype="bool") /* ty=Tensor[(12, 4, 12), bool] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %494 = @func_2861() /* ty=(Tensor[(12, 4, 12), int8], Tensor[(12, 4, 12), float32]) */;
  %495 = cast(%489, dtype="float64") /* ty=Tensor[(12, 4, 12), float64] */;
  %496 = @func_3309() /* ty=(Tensor[(12, 4, 12), int8],) */;
  %497 = logical_or(%492, %493) /* ty=Tensor[(12, 4, 12), bool] */;
  %498 = @func_3281() /* ty=Tensor[(12, 4, 12), int8] */;
  %499 = %494.0;
  %500 = asin(%495) /* ty=Tensor[(12, 4, 12), float64] */;
  %501 = %496.0;
  (%497, %498, %499, %500, %501)
}

def @func_1839() -> (Tensor[(12, 4, 12), int32],) {
  %502 = @func_1133() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), int32], Tensor[(416), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), int32]) */;
  %503 = %502.0;
  (%503,)
}

def @func_5648() -> (Tensor[(12, 4, 12), int32], Tensor[(3, 7), float64], Tensor[(12, 4, 12), uint32]) {
  %504 = @func_2429() /* ty=(Tensor[(12, 4, 12), int32],) */;
  %505 = @func_4923() /* ty=(Tensor[(3, 7), float64],) */;
  %506 = %504.0;
  %507 = cast(%506, dtype="int32") /* ty=Tensor[(12, 4, 12), int32] */;
  %508 = reshape(%507, newshape=[12, 4, 12]) /* ty=Tensor[(12, 4, 12), int32] */;
  %509 = @func_1535(%508) /* ty=(Tensor[(2310), float32], Tensor[(12, 4, 12), float64], Tensor[(12, 4, 12), uint16], Tensor[(13, 16, 2), int32], Tensor[(12, 4, 12), uint32]) */;
  %510 = %505.0;
  %511 = %509.4;
  (%506, %510, %511)
}

def @func_6820() -> Tensor[(16, 10, 14), float64] {
  %512 = @func_5508() /* ty=(Tensor[(16, 10, 14), float64],) */;
  %512.0
}

def @func_3467(%var_3456: Tensor[(13, 16, 2), int32]) -> (Tensor[(13, 16, 2), float64], Tensor[(12, 4, 12), float64], Tensor[(1, 576), int32]) {
  %513 = @func_2382() /* ty=Tensor[(13, 16, 2), int32] */;
  %514 = cast(%var_3456, dtype="float64") /* ty=Tensor[(13, 16, 2), float64] */;
  %515 = shape_of(%513, dtype="int32") /* ty=Tensor[(3), int32] */;
  %516 = cast(%513, dtype="float64") /* ty=Tensor[(13, 16, 2), float64] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %518 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 576), int32] */, dtype="int32") /* ty=Tensor[(1, 576), int32] */;
  %519 = reshape(%518, newshape=[12, 4, 12]) /* ty=Tensor[(12, 4, 12), int32] */;
  %520 = @func_1535(%519) /* ty=(Tensor[(2310), float32], Tensor[(12, 4, 12), float64], Tensor[(12, 4, 12), uint16], Tensor[(13, 16, 2), int32], Tensor[(12, 4, 12), uint32]) */;
  %521 = divide(%516, %517) /* ty=Tensor[(13, 16, 2), float64] */;
  %522 = %520.1;
  (%521, %522, meta[relay.Constant][16] /* ty=Tensor[(1, 576), int32] */)
}

def @func_5197() -> (Tensor[(12, 4, 12), float32], Tensor[(12, 4, 12), float32], Tensor[(12, 4, 12), bool]) {
  %523 = @func_1839() /* ty=(Tensor[(12, 4, 12), int32],) */;
  %524 = %523.0;
  %525 = cast(%524, dtype="float32") /* ty=Tensor[(12, 4, 12), float32] */;
  %526 = @func_2861() /* ty=(Tensor[(12, 4, 12), int8], Tensor[(12, 4, 12), float32]) */;
  %527 = log2(%525) /* ty=Tensor[(12, 4, 12), float32] */;
  %528 = cast(%527, dtype="float64") /* ty=Tensor[(12, 4, 12), float64] */;
  %529 = reshape(%528, newshape=[12, 4, 12]) /* ty=Tensor[(12, 4, 12), float64] */;
  %530 = @func_1726(%529) /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), bool]) */;
  %531 = %526.1;
  %532 = %530.2;
  (%527, %531, %532)
}

def @func_5593(%var_5551: Tensor[(4, 16, 16), float32], %var_5575: Tensor[(64), int8], %var_5579: Tensor[(4, 16, 16), float32]) -> (Tensor[(4, 16, 16), float32], Tensor[(4, 16, 16), int8], Tensor[(4, 8, 2), int8], Tensor[(64), int8], Tensor[(4, 16, 16), int8]) {
  %533 = cast(%var_5551, dtype="float32") /* ty=Tensor[(4, 16, 16), float32] */;
  %534 = asin(%533) /* ty=Tensor[(4, 16, 16), float32] */;
  %535 = cast(%534, dtype="float32") /* ty=Tensor[(4, 16, 16), float32] */;
  %536 = cast(%var_5551, dtype="int8") /* ty=Tensor[(4, 16, 16), int8] */;
  %537 = shape_of(%534, dtype="int32") /* ty=Tensor[(3), int32] */;
  %538 = cast(%534, dtype="int8") /* ty=Tensor[(4, 16, 16), int8] */;
  %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %540 = cast(%var_5575, dtype="int8") /* ty=Tensor[(64), int8] */;
  %541 = reshape(%540, newshape=[4, 8, 2]) /* ty=Tensor[(4, 8, 2), int8] */;
  %542 = @func_2449(%541) /* ty=(Tensor[(4, 8, 2), int8],) */;
  %543 = cast(%var_5579, dtype="int8") /* ty=Tensor[(4, 16, 16), int8] */;
  %544 = shape_of(%534, dtype="int32") /* ty=Tensor[(3), int32] */;
  %545 = cast(%534, dtype="int8") /* ty=Tensor[(4, 16, 16), int8] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %547 = sinh(%535) /* ty=Tensor[(4, 16, 16), float32] */;
  %548 = subtract(%538, %539) /* ty=Tensor[(4, 16, 16), int8] */;
  %549 = %542.0;
  %550 = bitwise_and(%545, %546) /* ty=Tensor[(4, 16, 16), int8] */;
  (%547, %548, %549, %var_5575, %550)
}

def @func_3511() -> (Tensor[(12, 4, 12), float32],) {
  %551 = @func_2315() /* ty=(Tensor[(12, 4, 12), float32], Tensor[(12, 4, 12), float64], Tensor[(13, 16, 2), float32]) */;
  %552 = %551.0;
  (%552,)
}

def @func_6357(%var_6319: Tensor[(16, 16, 11), bool]) -> (Tensor[(12, 4, 12), int32], Tensor[(16, 16, 11), int16]) {
  %553 = @func_2343() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32]) */;
  %554 = cast(%var_6319, dtype="float32") /* ty=Tensor[(16, 16, 11), float32] */;
  %555 = asin(%554) /* ty=Tensor[(16, 16, 11), float32] */;
  %556 = cast(meta[relay.Constant][17] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %557 = cast(meta[relay.Constant][18] /* ty=Tensor[(16, 1, 11), int8] */, dtype="int8") /* ty=Tensor[(16, 1, 11), int8] */;
  %558 = left_shift(%556, %557) /* ty=Tensor[(16, 1, 11), int8] */;
  %559 = cast(%558, dtype="bool") /* ty=Tensor[(16, 1, 11), bool] */;
  %560 = cast(meta[relay.Constant][17] /* ty=int8 */, dtype="bool") /* ty=bool */;
  %561 = greater(%559, %560) /* ty=Tensor[(16, 1, 11), bool] */;
  %562 = cast(%561, dtype="bool") /* ty=Tensor[(16, 1, 11), bool] */;
  %563 = cast(%var_6319, dtype="bool") /* ty=Tensor[(16, 16, 11), bool] */;
  %564 = not_equal(%562, %563) /* ty=Tensor[(16, 16, 11), bool] */;
  %565 = cast(%564, dtype="int16") /* ty=Tensor[(16, 16, 11), int16] */;
  %566 = shape_of(%555, dtype="int32") /* ty=Tensor[(3), int32] */;
  %567 = cast(%555, dtype="int16") /* ty=Tensor[(16, 16, 11), int16] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %569 = %553.0;
  %570 = bitwise_or(%567, %568) /* ty=Tensor[(16, 16, 11), int16] */;
  (%569, %570)
}

def @func_2261() -> Tensor[(13, 16, 2), float32] {
  @func_2048() /* ty=Tensor[(13, 16, 2), float32] */
}

def @func_5079() -> (Tensor[(11, 6, 7), float64],) {
  %571 = cast(meta[relay.Constant][19] /* ty=Tensor[(11, 6, 7), float64] */, dtype="float64") /* ty=Tensor[(11, 6, 7), float64] */;
  %572 = exp(%571) /* ty=Tensor[(11, 6, 7), float64] */;
  (%572,)
}

def @func_3358() -> (Tensor[(3, 7), float64],) {
  %573 = @func_1567() /* ty=(Tensor[(3, 7), float64],) */;
  %574 = %573.0;
  (%574,)
}

def @func_5008() -> (Tensor[(12, 4, 12), int8], Tensor[(3, 7), float64]) {
  %575 = @func_3309() /* ty=(Tensor[(12, 4, 12), int8],) */;
  %576 = @func_1567() /* ty=(Tensor[(3, 7), float64],) */;
  %577 = %575.0;
  %578 = %576.0;
  (%577, %578)
}

def @func_5508() -> (Tensor[(16, 10, 14), float64],) {
  %579 = cast(meta[relay.Constant][20] /* ty=Tensor[(16, 10, 14), float64] */, dtype="float64") /* ty=Tensor[(16, 10, 14), float64] */;
  %580 = tan(%579) /* ty=Tensor[(16, 10, 14), float64] */;
  (%580,)
}

def @func_4360() -> (Tensor[(416), float32],) {
  %581 = @func_4314() /* ty=(Tensor[(416), float32],) */;
  %582 = %581.0;
  (%582,)
}

def @func_3759() -> Tensor[(13, 16, 2), int32] {
  @func_2382() /* ty=Tensor[(13, 16, 2), int32] */
}

def @func_3082(%var_3070: Tensor[(6, 2, 12), float32], %var_3078: Tensor[(6, 2, 12), bool]) -> (Tensor[(6, 2, 12), bool], Tensor[(6, 2, 12), int8]) {
  %583 = cast(%var_3070, dtype="bool") /* ty=Tensor[(6, 2, 12), bool] */;
  %584 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(6, 2, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %585 = cast(meta[relay.Constant][21] /* ty=Tensor[(6, 2, 12), float32] */, dtype="bool") /* ty=Tensor[(6, 2, 12), bool] */;
  %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %587 = not_equal(%585, %586) /* ty=Tensor[(6, 2, 12), bool] */;
  %588 = cast(meta[relay.Constant][21] /* ty=Tensor[(6, 2, 12), float32] */, dtype="bool") /* ty=Tensor[(6, 2, 12), bool] */;
  %589 = shape_of(%587, dtype="int32") /* ty=Tensor[(3), int32] */;
  %590 = cast(%587, dtype="bool") /* ty=Tensor[(6, 2, 12), bool] */;
  %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %592 = cast(%var_3078, dtype="int8") /* ty=Tensor[(6, 2, 12), int8] */;
  %593 = shape_of(%587, dtype="int32") /* ty=Tensor[(3), int32] */;
  %594 = cast(%587, dtype="int8") /* ty=Tensor[(6, 2, 12), int8] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %596 = equal(%590, %591) /* ty=Tensor[(6, 2, 12), bool] */;
  %597 = subtract(%594, %595) /* ty=Tensor[(6, 2, 12), int8] */;
  (%596, %597)
}

def @func_2601() -> (Tensor[(13, 6, 12), float32],) {
  %598 = cast(meta[relay.Constant][22] /* ty=Tensor[(13, 6, 12), float32] */, dtype="float32") /* ty=Tensor[(13, 6, 12), float32] */;
  %599 = asinh(%598) /* ty=Tensor[(13, 6, 12), float32] */;
  (%599,)
}

def @func_4766(%var_4760: Tensor[(12, 4, 12), int8]) -> (Tensor[(12, 4, 12), float32],) {
  %600 = @func_3300() /* ty=Tensor[(12, 4, 12), int8] */;
  %601 = cast(%var_4760, dtype="float32") /* ty=Tensor[(12, 4, 12), float32] */;
  %602 = shape_of(%600, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%600, dtype="float32") /* ty=Tensor[(12, 4, 12), float32] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %605 = subtract(%603, %604) /* ty=Tensor[(12, 4, 12), float32] */;
  (%605,)
}

def @func_3281() -> Tensor[(12, 4, 12), int8] {
  %606 = @func_2861() /* ty=(Tensor[(12, 4, 12), int8], Tensor[(12, 4, 12), float32]) */;
  %606.0
}

def @func_3777(%var_3767: Tensor[(13, 2, 4), int8], %var_3768: Tensor[(13, 2, 4), int8]) -> (Tensor[(13, 2, 4), float32],) {
  %607 = cast(%var_3768, dtype="int8") /* ty=Tensor[(13, 2, 4), int8] */;
  %608 = shape_of(%var_3767, dtype="int32") /* ty=Tensor[(3), int32] */;
  %609 = cast(%var_3767, dtype="int8") /* ty=Tensor[(13, 2, 4), int8] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %611 = bitwise_and(%609, %610) /* ty=Tensor[(13, 2, 4), int8] */;
  %612 = cast(%var_3768, dtype="float32") /* ty=Tensor[(13, 2, 4), float32] */;
  %613 = shape_of(%611, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(%611, dtype="float32") /* ty=Tensor[(13, 2, 4), float32] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %616 = power(%614, %615) /* ty=Tensor[(13, 2, 4), float32] */;
  (%616,)
}

def @func_7422() -> Tensor[(12, 4, 12), float32] {
  %617 = @func_3511() /* ty=(Tensor[(12, 4, 12), float32],) */;
  %617.0
}

def @func_3245(%var_3232: Tensor[(14, 2, 14), float32]) -> (Tensor[(14, 2, 14), float32], Tensor[(14, 2, 14), float32]) {
  %618 = cast(%var_3232, dtype="float32") /* ty=Tensor[(14, 2, 14), float32] */;
  %619 = cast(%var_3232, dtype="float32") /* ty=Tensor[(14, 2, 14), float32] */;
  %620 = atanh(%618) /* ty=Tensor[(14, 2, 14), float32] */;
  %621 = erf(%619) /* ty=Tensor[(14, 2, 14), float32] */;
  (%620, %621)
}

def @func_2449(%var_2433: Tensor[(4, 8, 2), int8]) -> (Tensor[(4, 8, 2), int8],) {
  %622 = cast(meta[relay.Constant][23] /* ty=Tensor[(4, 1, 2), int8] */, dtype="int8") /* ty=Tensor[(4, 1, 2), int8] */;
  %623 = cast(%var_2433, dtype="int8") /* ty=Tensor[(4, 8, 2), int8] */;
  %624 = bitwise_xor(%622, %623) /* ty=Tensor[(4, 8, 2), int8] */;
  (%624,)
}

def @func_1228(%var_1201: Tensor[(15, 11, 14), float32]) -> (Tensor[(15, 11, 14), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), float32], Tensor[(12, 4, 12), int32]) {
  %625 = cast(%var_1201, dtype="float32") /* ty=Tensor[(15, 11, 14), float32] */;
  %626 = @func_1133() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), int32], Tensor[(416), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), int32]) */;
  %627 = %626.3;
  %628 = cast(%627, dtype="float32") /* ty=Tensor[(13, 16, 2), float32] */;
  %629 = cast(%627, dtype="float32") /* ty=Tensor[(13, 16, 2), float32] */;
  %630 = cast(%627, dtype="float32") /* ty=Tensor[(13, 16, 2), float32] */;
  %631 = reshape(%628, newshape=[13, 16, 2]) /* ty=Tensor[(13, 16, 2), float32] */;
  %632 = reshape(%629, newshape=[13, 16, 2]) /* ty=Tensor[(13, 16, 2), float32] */;
  %633 = reshape(%630, newshape=[13, 16, 2]) /* ty=Tensor[(13, 16, 2), float32] */;
  %634 = @func_680(%631, %632, %633) /* ty=(Tensor[(13, 16, 2), int32], Tensor[(13, 16, 2), float32]) */;
  %635 = @func_1133() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), int32], Tensor[(416), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), int32]) */;
  %636 = log10(%625) /* ty=Tensor[(15, 11, 14), float32] */;
  %637 = %634.1;
  %638 = %635.0;
  (%636, %627, %637, %638)
}

def @func_6423(%var_6386: Tensor[(14, 8, 10), uint64]) -> (Tensor[(14, 8, 10), float32], Tensor[(12, 4, 12), int32]) {
  %639 = cast(%var_6386, dtype="bool") /* ty=Tensor[(14, 8, 10), bool] */;
  %640 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(14, 8, 10), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %641 = cast(meta[relay.Constant][24] /* ty=Tensor[(14, 8, 10), uint64] */, dtype="bool") /* ty=Tensor[(14, 8, 10), bool] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %643 = less(%641, %642) /* ty=Tensor[(14, 8, 10), bool] */;
  %644 = cast(meta[relay.Constant][24] /* ty=Tensor[(14, 8, 10), uint64] */, dtype="float32") /* ty=Tensor[(14, 8, 10), float32] */;
  %645 = shape_of(%643, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(%643, dtype="float32") /* ty=Tensor[(14, 8, 10), float32] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %648 = @func_6283() /* ty=(Tensor[(11, 6, 7), float64], Tensor[(12, 4, 12), int32]) */;
  %649 = minimum(%646, %647) /* ty=Tensor[(14, 8, 10), float32] */;
  %650 = %648.1;
  (%649, %650)
}

def @func_7529(%var_7511: Tensor[(7, 16, 10), float64], %var_7512: Tensor[(7, 16, 10), float64]) -> (Tensor[(7, 16, 10), float32],) {
  %651 = cast(%var_7512, dtype="float64") /* ty=Tensor[(7, 16, 10), float64] */;
  %652 = shape_of(%var_7511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %653 = cast(%var_7511, dtype="float64") /* ty=Tensor[(7, 16, 10), float64] */;
  %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %655 = floor_divide(%653, %654) /* ty=Tensor[(7, 16, 10), float64] */;
  %656 = cast(%655, dtype="float32") /* ty=Tensor[(7, 16, 10), float32] */;
  %657 = exp(%656) /* ty=Tensor[(7, 16, 10), float32] */;
  (%657,)
}

def @func_4985() -> Tensor[(12, 4, 12), int32] {
  %658 = @func_1629() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32]) */;
  %658.1
}

def @func_6665() -> (Tensor[(13, 16, 2), float32],) {
  %659 = @func_3337() /* ty=Tensor[(13, 16, 2), float32] */;
  (%659,)
}

def @main(%var_8070: Tensor[(540), float64]) -> (Tensor[(13, 16, 2), float32], Tensor[(12, 4, 12), int32], Tensor[(15, 9, 4), float32], Tensor[(15, 9, 4), bool]) {
  %660 = @func_2373() /* ty=(Tensor[(12, 4, 12), int32],) */;
  %661 = cast(%var_8070, dtype="float64") /* ty=Tensor[(540), float64] */;
  %662 = reshape(%661, newshape=[15, 9, 4]) /* ty=Tensor[(15, 9, 4), float64] */;
  %663 = @func_4444(%662) /* ty=(Tensor[(15, 9, 4), float64],) */;
  %664 = %663.0;
  %665 = cast(%var_8070, dtype="float32") /* ty=Tensor[(540), float32] */;
  %666 = shape_of(%664, dtype="int32") /* ty=Tensor[(3), int32] */;
  %667 = cast(%664, dtype="float32") /* ty=Tensor[(15, 9, 4), float32] */;
  %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %669 = cast(%664, dtype="int16") /* ty=Tensor[(15, 9, 4), int16] */;
  %670 = shape_of(%var_8070, dtype="int32") /* ty=Tensor[(1), int32] */;
  %671 = cast(%var_8070, dtype="int16") /* ty=Tensor[(540), int16] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?), int16] */;
  %673 = bitwise_xor(%671, %672) /* ty=Tensor[(540), int16] */;
  %674 = cast(%673, dtype="bool") /* ty=Tensor[(540), bool] */;
  %675 = shape_of(%664, dtype="int32") /* ty=Tensor[(3), int32] */;
  %676 = cast(%664, dtype="bool") /* ty=Tensor[(15, 9, 4), bool] */;
  %677 = dyn.reshape(%674, %675, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %678 = @func_2048() /* ty=Tensor[(13, 16, 2), float32] */;
  %679 = %660.0;
  %680 = floor_mod(%667, %668) /* ty=Tensor[(15, 9, 4), float32] */;
  %681 = less_equal(%676, %677) /* ty=Tensor[(15, 9, 4), bool] */;
  (%678, %679, %680, %681)
}

def @func_5923(%var_5906: Tensor[(12, 4, 12), int32]) -> (Tensor[(12, 4, 12), float64],) {
  %682 = @func_2923() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), bool]) */;
  %683 = %682.0;
  %684 = cast(%var_5906, dtype="float64") /* ty=Tensor[(12, 4, 12), float64] */;
  %685 = shape_of(%683, dtype="int32") /* ty=Tensor[(3), int32] */;
  %686 = cast(%683, dtype="float64") /* ty=Tensor[(12, 4, 12), float64] */;
  %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %688 = power(%686, %687) /* ty=Tensor[(12, 4, 12), float64] */;
  (%688,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5474() -> Tensor[(11, 4, 3), bool] {
  %1 = fn () -> Tensor[(11, 4, 3), bool] {
    %0 = @func_5112() /* ty=(Tensor[(11, 4, 3), bool],) */;
    %0.0
  };
  %1() /* ty=Tensor[(11, 4, 3), bool] */
}

def @func_1885() -> Tensor[(3, 7), float64] {
  %2 = @func_1802() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(3, 7), float64], Tensor[(12, 4, 12), int32]) */;
  %2.1
}

def @func_1804() -> (Tensor[(12, 4, 12), int32], Tensor[(3, 7), float64], Tensor[(12, 4, 12), int32]) {
  @func_1802() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(3, 7), float64], Tensor[(12, 4, 12), int32]) */
}

def @func_6087(%var_6082: uint64, %var_6083: Tensor[(7, 1), uint64], %var_6084: Tensor[(15, 2, 12), uint64], %var_6085: Tensor[(15, 2, 12), bool], %var_6086: Tensor[(144, 4), int8]) -> (Tensor[(7, 1), uint64], Tensor[(3, 7), float64], Tensor[(15, 2, 12), uint8], Tensor[(13, 16, 2), bool], Tensor[(12, 4, 12), bool], Tensor[(144, 4), int8]) {
  %26 = fn (%var_6021: uint64, %var_6022: Tensor[(7, 1), uint64], %var_6027: Tensor[(15, 2, 12), uint64], %var_6034: Tensor[(15, 2, 12), bool], %var_6055: Tensor[(144, 4), int8]) -> (Tensor[(7, 1), uint64], Tensor[(3, 7), float64], Tensor[(15, 2, 12), uint8], Tensor[(13, 16, 2), bool], Tensor[(12, 4, 12), bool], Tensor[(144, 4), int8]) {
    %3 = cast(%var_6021, dtype="uint64") /* ty=uint64 */;
    %4 = cast(%var_6022, dtype="uint64") /* ty=Tensor[(7, 1), uint64] */;
    %5 = @func_3358() /* ty=(Tensor[(3, 7), float64],) */;
    %6 = cast(%var_6021, dtype="bool") /* ty=bool */;
    %7 = cast(%var_6027, dtype="bool") /* ty=Tensor[(15, 2, 12), bool] */;
    %8 = greater_equal(%6, %7) /* ty=Tensor[(15, 2, 12), bool] */;
    %9 = cast(%var_6034, dtype="uint64") /* ty=Tensor[(15, 2, 12), uint64] */;
    %10 = shape_of(%8, dtype="int32") /* ty=Tensor[(3), int32] */;
    %11 = cast(%8, dtype="uint64") /* ty=Tensor[(15, 2, 12), uint64] */;
    %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %13 = maximum(%11, %12) /* ty=Tensor[(15, 2, 12), uint64] */;
    %14 = cast(%8, dtype="uint8") /* ty=Tensor[(15, 2, 12), uint8] */;
    %15 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
    %16 = cast(%13, dtype="uint8") /* ty=Tensor[(15, 2, 12), uint8] */;
    %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %18 = cast(%var_6055, dtype="int8") /* ty=Tensor[(144, 4), int8] */;
    %19 = reshape(%18, newshape=[12, 4, 12]) /* ty=Tensor[(12, 4, 12), int8] */;
    %20 = @func_3425(%19) /* ty=(Tensor[(12, 4, 12), bool],) */;
    %21 = multiply(%3, %4) /* ty=Tensor[(7, 1), uint64] */;
    %22 = %5.0;
    %23 = left_shift(%16, %17) /* ty=Tensor[(15, 2, 12), uint8] */;
    %24 = @func_5281() /* ty=Tensor[(13, 16, 2), bool] */;
    %25 = %20.0;
    (%21, %22, %23, %24, %25, %var_6055)
  };
  %26(%var_6082, %var_6083, %var_6084, %var_6085, %var_6086) /* ty=(Tensor[(7, 1), uint64], Tensor[(3, 7), float64], Tensor[(15, 2, 12), uint8], Tensor[(13, 16, 2), bool], Tensor[(12, 4, 12), bool], Tensor[(144, 4), int8]) */
}

def @func_1228(%var_1201: Tensor[(15, 11, 14), float32]) -> (Tensor[(15, 11, 14), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), float32], Tensor[(12, 4, 12), int32]) {
  %27 = cast(%var_1201, dtype="float32") /* ty=Tensor[(15, 11, 14), float32] */;
  %28 = @func_1133() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), int32], Tensor[(416), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), int32]) */;
  %29 = %28.3;
  %30 = cast(%29, dtype="float32") /* ty=Tensor[(13, 16, 2), float32] */;
  %31 = cast(%29, dtype="float32") /* ty=Tensor[(13, 16, 2), float32] */;
  %32 = cast(%29, dtype="float32") /* ty=Tensor[(13, 16, 2), float32] */;
  %33 = reshape(%30, newshape=[13, 16, 2]) /* ty=Tensor[(13, 16, 2), float32] */;
  %34 = reshape(%31, newshape=[13, 16, 2]) /* ty=Tensor[(13, 16, 2), float32] */;
  %35 = reshape(%32, newshape=[13, 16, 2]) /* ty=Tensor[(13, 16, 2), float32] */;
  %36 = @func_680(%33, %34, %35) /* ty=(Tensor[(13, 16, 2), int32], Tensor[(13, 16, 2), float32]) */;
  %37 = @func_1133() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), int32], Tensor[(416), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), int32]) */;
  %38 = log10(%27) /* ty=Tensor[(15, 11, 14), float32] */;
  %39 = %36.1;
  %40 = %37.0;
  (%38, %29, %39, %40)
}

def @func_1916() -> (Tensor[(12, 4, 12), int8], Tensor[(12, 4, 12), int32]) {
  %41 = @func_1839() /* ty=(Tensor[(12, 4, 12), int32],) */;
  %42 = %41.0;
  %43 = @func_1839() /* ty=(Tensor[(12, 4, 12), int32],) */;
  %44 = %43.0;
  %45 = cast(%44, dtype="int8") /* ty=Tensor[(12, 4, 12), int8] */;
  %46 = shape_of(%42, dtype="int32") /* ty=Tensor[(3), int32] */;
  %47 = cast(%42, dtype="int8") /* ty=Tensor[(12, 4, 12), int8] */;
  %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %49 = @func_1629() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32]) */;
  %50 = bitwise_or(%47, %48) /* ty=Tensor[(12, 4, 12), int8] */;
  %51 = %49.1;
  (%50, %51)
}

def @func_2923() -> (Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), bool]) {
  %52 = @func_1410() /* ty=Tensor[(12, 4, 12), int32] */;
  %53 = cast(%52, dtype="float64") /* ty=Tensor[(12, 4, 12), float64] */;
  %54 = reshape(%53, newshape=[12, 4, 12]) /* ty=Tensor[(12, 4, 12), float64] */;
  %55 = @func_1726(%54) /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), bool]) */;
  %56 = %55.2;
  (%52, %56)
}

def @func_2216() -> (Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), float32]) {
  %57 = @func_1410() /* ty=Tensor[(12, 4, 12), int32] */;
  %58 = @func_2048() /* ty=Tensor[(13, 16, 2), float32] */;
  (%57, %58)
}

def @func_2861() -> (Tensor[(12, 4, 12), int8], Tensor[(12, 4, 12), float32]) {
  %59 = @func_1916() /* ty=(Tensor[(12, 4, 12), int8], Tensor[(12, 4, 12), int32]) */;
  %60 = @func_1768() /* ty=(Tensor[(12, 4, 12), float32],) */;
  %61 = %59.0;
  %62 = %60.0;
  (%61, %62)
}

def @main(%var_8070: Tensor[(540), float64]) -> (Tensor[(13, 16, 2), float32], Tensor[(12, 4, 12), int32], Tensor[(15, 9, 4), float32], Tensor[(15, 9, 4), bool]) {
  %63 = @func_2375() /* ty=(Tensor[(12, 4, 12), int32],) */;
  %64 = cast(%var_8070, dtype="float64") /* ty=Tensor[(540), float64] */;
  %65 = reshape(%64, newshape=[15, 9, 4]) /* ty=Tensor[(15, 9, 4), float64] */;
  %66 = @func_4446(%65) /* ty=(Tensor[(15, 9, 4), float64],) */;
  %67 = %66.0;
  %68 = cast(%var_8070, dtype="float32") /* ty=Tensor[(540), float32] */;
  %69 = shape_of(%67, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(%67, dtype="float32") /* ty=Tensor[(15, 9, 4), float32] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %72 = cast(%67, dtype="int16") /* ty=Tensor[(15, 9, 4), int16] */;
  %73 = shape_of(%var_8070, dtype="int32") /* ty=Tensor[(1), int32] */;
  %74 = cast(%var_8070, dtype="int16") /* ty=Tensor[(540), int16] */;
  %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?), int16] */;
  %76 = bitwise_xor(%74, %75) /* ty=Tensor[(540), int16] */;
  %77 = cast(%76, dtype="bool") /* ty=Tensor[(540), bool] */;
  %78 = shape_of(%67, dtype="int32") /* ty=Tensor[(3), int32] */;
  %79 = cast(%67, dtype="bool") /* ty=Tensor[(15, 9, 4), bool] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %81 = @func_2048() /* ty=Tensor[(13, 16, 2), float32] */;
  %82 = %63.0;
  %83 = floor_mod(%70, %71) /* ty=Tensor[(15, 9, 4), float32] */;
  %84 = less_equal(%79, %80) /* ty=Tensor[(15, 9, 4), bool] */;
  (%81, %82, %83, %84)
}

def @func_1968(%var_1941: uint8, %var_1942: Tensor[(15, 8, 15), uint8]) -> (Tensor[(15, 8, 15), bool], Tensor[(12, 4, 12), float32], Tensor[(3, 7), float64]) {
  %85 = cast(%var_1941, dtype="bool") /* ty=bool */;
  %86 = cast(%var_1942, dtype="bool") /* ty=Tensor[(15, 8, 15), bool] */;
  %87 = @func_1768() /* ty=(Tensor[(12, 4, 12), float32],) */;
  %88 = @func_1567() /* ty=(Tensor[(3, 7), float64],) */;
  %89 = not_equal(%85, %86) /* ty=Tensor[(15, 8, 15), bool] */;
  %90 = %87.0;
  %91 = %88.0;
  (%89, %90, %91)
}

def @func_5508() -> (Tensor[(16, 10, 14), float64],) {
  %92 = cast(meta[relay.Constant][0] /* ty=Tensor[(16, 10, 14), float64] */, dtype="float64") /* ty=Tensor[(16, 10, 14), float64] */;
  %93 = tan(%92) /* ty=Tensor[(16, 10, 14), float64] */;
  (%93,)
}

def @func_2809(%var_2807: Tensor[(12, 1, 6), float32]) -> (Tensor[(12, 1, 6), float32], Tensor[(13, 16, 2), float32]) {
  @func_2806(%var_2807) /* ty=(Tensor[(12, 1, 6), float32], Tensor[(13, 16, 2), float32]) */
}

def @func_6227() -> (Tensor[(12, 4, 12), float32],) {
  @func_6225() /* ty=(Tensor[(12, 4, 12), float32],) */
}

def @func_1307() -> (Tensor[(12, 4, 12), int32],) {
  @func_1305() /* ty=(Tensor[(12, 4, 12), int32],) */
}

def @func_5456(%var_5454: Tensor[(12, 4, 12), int32]) -> (Tensor[(12, 4, 12), bool], Tensor[(12, 4, 12), int8], Tensor[(12, 4, 12), int8], Tensor[(12, 4, 12), float64], Tensor[(12, 4, 12), int8]) {
  @func_5453(%var_5454) /* ty=(Tensor[(12, 4, 12), bool], Tensor[(12, 4, 12), int8], Tensor[(12, 4, 12), int8], Tensor[(12, 4, 12), float64], Tensor[(12, 4, 12), int8]) */
}

def @func_1726(%var_1714: Tensor[(12, 4, 12), float64]) -> (Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), bool]) {
  %94 = @func_1305() /* ty=(Tensor[(12, 4, 12), int32],) */;
  %95 = @func_1305() /* ty=(Tensor[(12, 4, 12), int32],) */;
  %96 = @func_1410() /* ty=Tensor[(12, 4, 12), int32] */;
  %97 = cast(%96, dtype="float64") /* ty=Tensor[(12, 4, 12), float64] */;
  %98 = exp(%97) /* ty=Tensor[(12, 4, 12), float64] */;
  %99 = cast(%var_1714, dtype="bool") /* ty=Tensor[(12, 4, 12), bool] */;
  %100 = shape_of(%98, dtype="int32") /* ty=Tensor[(3), int32] */;
  %101 = cast(%98, dtype="bool") /* ty=Tensor[(12, 4, 12), bool] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %103 = %94.0;
  %104 = %95.0;
  %105 = less(%101, %102) /* ty=Tensor[(12, 4, 12), bool] */;
  (%103, %104, %105)
}

def @func_7401() -> Tensor[(13, 16, 2), int8] {
  @func_7399() /* ty=Tensor[(13, 16, 2), int8] */
}

def @func_5888() -> (Tensor[(12, 4, 12), float32],) {
  %106 = @func_3511() /* ty=(Tensor[(12, 4, 12), float32],) */;
  %107 = %106.0;
  (%107,)
}

def @func_1569() -> (Tensor[(3, 7), float64],) {
  @func_1567() /* ty=(Tensor[(3, 7), float64],) */
}

def @func_2375() -> (Tensor[(12, 4, 12), int32],) {
  @func_2373() /* ty=(Tensor[(12, 4, 12), int32],) */
}

def @func_2925() -> (Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), bool]) {
  @func_2923() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), bool]) */
}

def @func_7968() -> (Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), float32]) {
  %108 = @func_4204() /* ty=Tensor[(12, 4, 12), int32] */;
  %109 = @func_7422() /* ty=Tensor[(12, 4, 12), float32] */;
  (%108, %109)
}

def @func_5648() -> (Tensor[(12, 4, 12), int32], Tensor[(3, 7), float64], Tensor[(12, 4, 12), uint32]) {
  %110 = @func_2429() /* ty=(Tensor[(12, 4, 12), int32],) */;
  %111 = @func_4923() /* ty=(Tensor[(3, 7), float64],) */;
  %112 = %110.0;
  %113 = cast(%112, dtype="int32") /* ty=Tensor[(12, 4, 12), int32] */;
  %114 = reshape(%113, newshape=[12, 4, 12]) /* ty=Tensor[(12, 4, 12), int32] */;
  %115 = @func_1535(%114) /* ty=(Tensor[(2310), float32], Tensor[(12, 4, 12), float64], Tensor[(12, 4, 12), uint16], Tensor[(13, 16, 2), int32], Tensor[(12, 4, 12), uint32]) */;
  %116 = %111.0;
  %117 = %115.4;
  (%112, %116, %117)
}

def @func_5156() -> (Tensor[(3, 7), float64], Tensor[(12, 4, 12), float32], Tensor[(576), int8]) {
  %118 = @func_3358() /* ty=(Tensor[(3, 7), float64],) */;
  %119 = cast(meta[relay.Constant][1] /* ty=Tensor[(576), int8] */, dtype="int8") /* ty=Tensor[(576), int8] */;
  %120 = reshape(%119, newshape=[12, 4, 12]) /* ty=Tensor[(12, 4, 12), int8] */;
  %121 = @func_4766(%120) /* ty=(Tensor[(12, 4, 12), float32],) */;
  %122 = %118.0;
  %123 = %121.0;
  (%122, %123, meta[relay.Constant][1] /* ty=Tensor[(576), int8] */)
}

def @func_3761() -> Tensor[(13, 16, 2), int32] {
  @func_3759() /* ty=Tensor[(13, 16, 2), int32] */
}

def @func_5282() -> Tensor[(13, 16, 2), bool] {
  %131 = fn () -> Tensor[(13, 16, 2), bool] {
    %124 = @func_4640() /* ty=(Tensor[(13, 16, 2), float32],) */;
    %125 = %124.0;
    %126 = @func_3337() /* ty=Tensor[(13, 16, 2), float32] */;
    %127 = cast(%126, dtype="bool") /* ty=Tensor[(13, 16, 2), bool] */;
    %128 = shape_of(%125, dtype="int32") /* ty=Tensor[(3), int32] */;
    %129 = cast(%125, dtype="bool") /* ty=Tensor[(13, 16, 2), bool] */;
    %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%129, %130) /* ty=Tensor[(13, 16, 2), bool] */
  };
  %131() /* ty=Tensor[(13, 16, 2), bool] */
}

def @func_4868(%var_4840: Tensor[(72), float32]) -> (Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), float32], Tensor[(72), float32]) {
  %132 = @func_2343() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32]) */;
  %133 = cast(%var_4840, dtype="float32") /* ty=Tensor[(72), float32] */;
  %134 = reshape(%133, newshape=[12, 1, 6]) /* ty=Tensor[(12, 1, 6), float32] */;
  %135 = @func_2806(%134) /* ty=(Tensor[(12, 1, 6), float32], Tensor[(13, 16, 2), float32]) */;
  %136 = %132.1;
  %137 = %135.1;
  (%136, %137, %var_4840)
}

def @func_1802() -> (Tensor[(12, 4, 12), int32], Tensor[(3, 7), float64], Tensor[(12, 4, 12), int32]) {
  %138 = @func_1629() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32]) */;
  %139 = @func_1567() /* ty=(Tensor[(3, 7), float64],) */;
  %140 = @func_1629() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32]) */;
  %141 = %138.0;
  %142 = %139.0;
  %143 = %140.1;
  (%141, %142, %143)
}

def @func_4796(%var_4794: Tensor[(12, 4, 12), int32]) -> (Tensor[(12, 4, 12), uint32],) {
  @func_4793(%var_4794) /* ty=(Tensor[(12, 4, 12), uint32],) */
}

def @func_1769() -> (Tensor[(12, 4, 12), float32],) {
  %148 = fn () -> (Tensor[(12, 4, 12), float32],) {
    %144 = @func_1305() /* ty=(Tensor[(12, 4, 12), int32],) */;
    %145 = %144.0;
    %146 = cast(%145, dtype="float32") /* ty=Tensor[(12, 4, 12), float32] */;
    %147 = acosh(%146) /* ty=Tensor[(12, 4, 12), float32] */;
    (%147,)
  };
  %148() /* ty=(Tensor[(12, 4, 12), float32],) */
}

def @func_3985() -> (Tensor[(3, 7), float64], Tensor[(12, 4, 12), int8]) {
  %152 = fn () -> (Tensor[(3, 7), float64], Tensor[(12, 4, 12), int8]) {
    %149 = @func_1916() /* ty=(Tensor[(12, 4, 12), int8], Tensor[(12, 4, 12), int32]) */;
    %150 = @func_1885() /* ty=Tensor[(3, 7), float64] */;
    %151 = %149.0;
    (%150, %151)
  };
  %152() /* ty=(Tensor[(3, 7), float64], Tensor[(12, 4, 12), int8]) */
}

def @func_1567() -> (Tensor[(3, 7), float64],) {
  %153 = cast(meta[relay.Constant][2] /* ty=Tensor[(3, 7), float64] */, dtype="float64") /* ty=Tensor[(3, 7), float64] */;
  %154 = acosh(%153) /* ty=Tensor[(3, 7), float64] */;
  (%154,)
}

def @func_1412() -> Tensor[(12, 4, 12), int32] {
  @func_1410() /* ty=Tensor[(12, 4, 12), int32] */
}

def @func_4242(%var_4240: float64, %var_4241: Tensor[(6, 1), float64]) -> Tensor[(6, 1), float64] {
  %157 = fn (%var_4227: float64, %var_4228: Tensor[(6, 1), float64]) -> Tensor[(6, 1), float64] {
    %155 = cast(%var_4227, dtype="float64") /* ty=float64 */;
    %156 = cast(%var_4228, dtype="float64") /* ty=Tensor[(6, 1), float64] */;
    divide(%155, %156) /* ty=Tensor[(6, 1), float64] */
  };
  %157(%var_4240, %var_4241) /* ty=Tensor[(6, 1), float64] */
}

def @func_2373() -> (Tensor[(12, 4, 12), int32],) {
  %158 = @func_1305() /* ty=(Tensor[(12, 4, 12), int32],) */;
  %159 = %158.0;
  (%159,)
}

def @func_3338() -> Tensor[(13, 16, 2), float32] {
  %160 = fn () -> Tensor[(13, 16, 2), float32] {
    @func_2261() /* ty=Tensor[(13, 16, 2), float32] */
  };
  %160() /* ty=Tensor[(13, 16, 2), float32] */
}

def @func_3470(%var_3468: Tensor[(13, 16, 2), int32]) -> (Tensor[(13, 16, 2), float64], Tensor[(12, 4, 12), float64], Tensor[(1, 576), int32]) {
  @func_3467(%var_3468) /* ty=(Tensor[(13, 16, 2), float64], Tensor[(12, 4, 12), float64], Tensor[(1, 576), int32]) */
}

def @func_2451(%var_2450: Tensor[(4, 8, 2), int8]) -> (Tensor[(4, 8, 2), int8],) {
  %164 = fn (%var_2433: Tensor[(4, 8, 2), int8]) -> (Tensor[(4, 8, 2), int8],) {
    %161 = cast(meta[relay.Constant][3] /* ty=Tensor[(4, 1, 2), int8] */, dtype="int8") /* ty=Tensor[(4, 1, 2), int8] */;
    %162 = cast(%var_2433, dtype="int8") /* ty=Tensor[(4, 8, 2), int8] */;
    %163 = bitwise_xor(%161, %162) /* ty=Tensor[(4, 8, 2), int8] */;
    (%163,)
  };
  %164(%var_2450) /* ty=(Tensor[(4, 8, 2), int8],) */
}

def @func_1840() -> (Tensor[(12, 4, 12), int32],) {
  %167 = fn () -> (Tensor[(12, 4, 12), int32],) {
    %165 = @func_1133() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), int32], Tensor[(416), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), int32]) */;
    %166 = %165.0;
    (%166,)
  };
  %167() /* ty=(Tensor[(12, 4, 12), int32],) */
}

def @func_1729(%var_1727: Tensor[(12, 4, 12), float64]) -> (Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), bool]) {
  @func_1726(%var_1727) /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), bool]) */
}

def @func_3082(%var_3070: Tensor[(6, 2, 12), float32], %var_3078: Tensor[(6, 2, 12), bool]) -> (Tensor[(6, 2, 12), bool], Tensor[(6, 2, 12), int8]) {
  %168 = cast(%var_3070, dtype="bool") /* ty=Tensor[(6, 2, 12), bool] */;
  %169 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(6, 2, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %170 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 2, 12), float32] */, dtype="bool") /* ty=Tensor[(6, 2, 12), bool] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %172 = not_equal(%170, %171) /* ty=Tensor[(6, 2, 12), bool] */;
  %173 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 2, 12), float32] */, dtype="bool") /* ty=Tensor[(6, 2, 12), bool] */;
  %174 = shape_of(%172, dtype="int32") /* ty=Tensor[(3), int32] */;
  %175 = cast(%172, dtype="bool") /* ty=Tensor[(6, 2, 12), bool] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %177 = cast(%var_3078, dtype="int8") /* ty=Tensor[(6, 2, 12), int8] */;
  %178 = shape_of(%172, dtype="int32") /* ty=Tensor[(3), int32] */;
  %179 = cast(%172, dtype="int8") /* ty=Tensor[(6, 2, 12), int8] */;
  %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %181 = equal(%175, %176) /* ty=Tensor[(6, 2, 12), bool] */;
  %182 = subtract(%179, %180) /* ty=Tensor[(6, 2, 12), int8] */;
  (%181, %182)
}

def @func_2601() -> (Tensor[(13, 6, 12), float32],) {
  %183 = cast(meta[relay.Constant][5] /* ty=Tensor[(13, 6, 12), float32] */, dtype="float32") /* ty=Tensor[(13, 6, 12), float32] */;
  %184 = asinh(%183) /* ty=Tensor[(13, 6, 12), float32] */;
  (%184,)
}

def @func_3301() -> Tensor[(12, 4, 12), int8] {
  %185 = fn () -> Tensor[(12, 4, 12), int8] {
    @func_3281() /* ty=Tensor[(12, 4, 12), int8] */
  };
  %185() /* ty=Tensor[(12, 4, 12), int8] */
}

def @func_5080() -> (Tensor[(11, 6, 7), float64],) {
  %188 = fn () -> (Tensor[(11, 6, 7), float64],) {
    %186 = cast(meta[relay.Constant][6] /* ty=Tensor[(11, 6, 7), float64] */, dtype="float64") /* ty=Tensor[(11, 6, 7), float64] */;
    %187 = exp(%186) /* ty=Tensor[(11, 6, 7), float64] */;
    (%187,)
  };
  %188() /* ty=(Tensor[(11, 6, 7), float64],) */
}

def @func_7941() -> (Tensor[(12, 4, 12), bool], Tensor[(12, 4, 12), int32]) {
  %193 = fn () -> (Tensor[(12, 4, 12), bool], Tensor[(12, 4, 12), int32]) {
    %189 = @func_5197() /* ty=(Tensor[(12, 4, 12), float32], Tensor[(12, 4, 12), float32], Tensor[(12, 4, 12), bool]) */;
    %190 = @func_2429() /* ty=(Tensor[(12, 4, 12), int32],) */;
    %191 = %189.2;
    %192 = %190.0;
    (%191, %192)
  };
  %193() /* ty=(Tensor[(12, 4, 12), bool], Tensor[(12, 4, 12), int32]) */
}

def @func_5199() -> (Tensor[(12, 4, 12), float32], Tensor[(12, 4, 12), float32], Tensor[(12, 4, 12), bool]) {
  @func_5197() /* ty=(Tensor[(12, 4, 12), float32], Tensor[(12, 4, 12), float32], Tensor[(12, 4, 12), bool]) */
}

def @func_1630() -> (Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32]) {
  %198 = fn () -> (Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32]) {
    %194 = @func_1305() /* ty=(Tensor[(12, 4, 12), int32],) */;
    %195 = @func_1305() /* ty=(Tensor[(12, 4, 12), int32],) */;
    %196 = %194.0;
    %197 = %195.0;
    (%196, %197)
  };
  %198() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32]) */
}

def @func_5890() -> (Tensor[(12, 4, 12), float32],) {
  @func_5888() /* ty=(Tensor[(12, 4, 12), float32],) */
}

def @func_2315() -> (Tensor[(12, 4, 12), float32], Tensor[(12, 4, 12), float64], Tensor[(13, 16, 2), float32]) {
  %199 = @func_1916() /* ty=(Tensor[(12, 4, 12), int8], Tensor[(12, 4, 12), int32]) */;
  %200 = %199.1;
  %201 = cast(%200, dtype="float32") /* ty=Tensor[(12, 4, 12), float32] */;
  %202 = cast(%200, dtype="float64") /* ty=Tensor[(12, 4, 12), float64] */;
  %203 = log(%201) /* ty=Tensor[(12, 4, 12), float32] */;
  %204 = sinh(%202) /* ty=Tensor[(12, 4, 12), float64] */;
  %205 = @func_2261() /* ty=Tensor[(13, 16, 2), float32] */;
  (%203, %204, %205)
}

def @func_2431() -> (Tensor[(12, 4, 12), int32],) {
  @func_2429() /* ty=(Tensor[(12, 4, 12), int32],) */
}

def @func_2763(%var_2755: Tensor[(12, 4, 12), int32]) -> (Tensor[(12, 4, 12), bool],) {
  %206 = @func_2343() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32]) */;
  %207 = %206.1;
  %208 = cast(%var_2755, dtype="bool") /* ty=Tensor[(12, 4, 12), bool] */;
  %209 = shape_of(%207, dtype="int32") /* ty=Tensor[(3), int32] */;
  %210 = cast(%207, dtype="bool") /* ty=Tensor[(12, 4, 12), bool] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %212 = logical_and(%210, %211) /* ty=Tensor[(12, 4, 12), bool] */;
  (%212,)
}

def @func_3281() -> Tensor[(12, 4, 12), int8] {
  %213 = @func_2861() /* ty=(Tensor[(12, 4, 12), int8], Tensor[(12, 4, 12), float32]) */;
  %213.0
}

def @func_4361() -> (Tensor[(416), float32],) {
  %216 = fn () -> (Tensor[(416), float32],) {
    %214 = @func_4314() /* ty=(Tensor[(416), float32],) */;
    %215 = %214.0;
    (%215,)
  };
  %216() /* ty=(Tensor[(416), float32],) */
}

def @func_3777(%var_3767: Tensor[(13, 2, 4), int8], %var_3768: Tensor[(13, 2, 4), int8]) -> (Tensor[(13, 2, 4), float32],) {
  %217 = cast(%var_3768, dtype="int8") /* ty=Tensor[(13, 2, 4), int8] */;
  %218 = shape_of(%var_3767, dtype="int32") /* ty=Tensor[(3), int32] */;
  %219 = cast(%var_3767, dtype="int8") /* ty=Tensor[(13, 2, 4), int8] */;
  %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %221 = bitwise_and(%219, %220) /* ty=Tensor[(13, 2, 4), int8] */;
  %222 = cast(%var_3768, dtype="float32") /* ty=Tensor[(13, 2, 4), float32] */;
  %223 = shape_of(%221, dtype="int32") /* ty=Tensor[(3), int32] */;
  %224 = cast(%221, dtype="float32") /* ty=Tensor[(13, 2, 4), float32] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %226 = power(%224, %225) /* ty=Tensor[(13, 2, 4), float32] */;
  (%226,)
}

def @func_4206() -> Tensor[(12, 4, 12), int32] {
  @func_4204() /* ty=Tensor[(12, 4, 12), int32] */
}

def @func_4507() -> (Tensor[(13, 16, 2), float32],) {
  @func_4505() /* ty=(Tensor[(13, 16, 2), float32],) */
}

def @func_4923() -> (Tensor[(3, 7), float64],) {
  %227 = @func_1567() /* ty=(Tensor[(3, 7), float64],) */;
  %228 = %227.0;
  (%228,)
}

def @func_5510() -> (Tensor[(16, 10, 14), float64],) {
  @func_5508() /* ty=(Tensor[(16, 10, 14), float64],) */
}

def @func_2863() -> (Tensor[(12, 4, 12), int8], Tensor[(12, 4, 12), float32]) {
  @func_2861() /* ty=(Tensor[(12, 4, 12), int8], Tensor[(12, 4, 12), float32]) */
}

def @func_5197() -> (Tensor[(12, 4, 12), float32], Tensor[(12, 4, 12), float32], Tensor[(12, 4, 12), bool]) {
  %229 = @func_1839() /* ty=(Tensor[(12, 4, 12), int32],) */;
  %230 = %229.0;
  %231 = cast(%230, dtype="float32") /* ty=Tensor[(12, 4, 12), float32] */;
  %232 = @func_2861() /* ty=(Tensor[(12, 4, 12), int8], Tensor[(12, 4, 12), float32]) */;
  %233 = log2(%231) /* ty=Tensor[(12, 4, 12), float32] */;
  %234 = cast(%233, dtype="float64") /* ty=Tensor[(12, 4, 12), float64] */;
  %235 = reshape(%234, newshape=[12, 4, 12]) /* ty=Tensor[(12, 4, 12), float64] */;
  %236 = @func_1726(%235) /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), bool]) */;
  %237 = %232.1;
  %238 = %236.2;
  (%233, %237, %238)
}

def @func_6820() -> Tensor[(16, 10, 14), float64] {
  %239 = @func_5508() /* ty=(Tensor[(16, 10, 14), float64],) */;
  %239.0
}

def @func_7422() -> Tensor[(12, 4, 12), float32] {
  %240 = @func_3511() /* ty=(Tensor[(12, 4, 12), float32],) */;
  %240.0
}

def @func_3175() -> Tensor[(416), float32] {
  %241 = fn () -> Tensor[(416), float32] {
    @func_2981() /* ty=Tensor[(416), float32] */
  };
  %241() /* ty=Tensor[(416), float32] */
}

def @func_3309() -> (Tensor[(12, 4, 12), int8],) {
  %242 = @func_1916() /* ty=(Tensor[(12, 4, 12), int8], Tensor[(12, 4, 12), int32]) */;
  %243 = %242.0;
  (%243,)
}

def @func_3692() -> (Tensor[(13, 16, 2), float64], Tensor[(13, 6, 12), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), float32]) {
  @func_3690() /* ty=(Tensor[(13, 16, 2), float64], Tensor[(13, 6, 12), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), float32]) */
}

def @func_3158(%var_3134: Tensor[(36, 2), float32], %var_3145: Tensor[(12, 4, 12), int32], %var_3152: Tensor[(36, 2), float32]) -> (Tensor[(13, 16, 2), float32], Tensor[(13, 16, 2), float32], Tensor[(12, 4, 12), float32], Tensor[(36, 2), float64]) {
  %244 = cast(%var_3134, dtype="float32") /* ty=Tensor[(36, 2), float32] */;
  %245 = reshape(%244, newshape=[12, 1, 6]) /* ty=Tensor[(12, 1, 6), float32] */;
  %246 = @func_2806(%245) /* ty=(Tensor[(12, 1, 6), float32], Tensor[(13, 16, 2), float32]) */;
  %247 = cast(%var_3134, dtype="float32") /* ty=Tensor[(36, 2), float32] */;
  %248 = reshape(%247, newshape=[12, 1, 6]) /* ty=Tensor[(12, 1, 6), float32] */;
  %249 = @func_2806(%248) /* ty=(Tensor[(12, 1, 6), float32], Tensor[(13, 16, 2), float32]) */;
  %250 = @func_2373() /* ty=(Tensor[(12, 4, 12), int32],) */;
  %251 = %250.0;
  %252 = cast(%var_3145, dtype="float32") /* ty=Tensor[(12, 4, 12), float32] */;
  %253 = shape_of(%251, dtype="int32") /* ty=Tensor[(3), int32] */;
  %254 = cast(%251, dtype="float32") /* ty=Tensor[(12, 4, 12), float32] */;
  %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %256 = cast(%var_3152, dtype="float64") /* ty=Tensor[(36, 2), float64] */;
  %257 = shape_of(%var_3134, dtype="int32") /* ty=Tensor[(2), int32] */;
  %258 = cast(%var_3134, dtype="float64") /* ty=Tensor[(36, 2), float64] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %260 = %246.1;
  %261 = %249.1;
  %262 = floor_divide(%254, %255) /* ty=Tensor[(12, 4, 12), float32] */;
  %263 = divide(%258, %259) /* ty=Tensor[(36, 2), float64] */;
  (%260, %261, %262, %263)
}

def @func_4793(%var_4788: Tensor[(12, 4, 12), int32]) -> (Tensor[(12, 4, 12), uint32],) {
  %264 = @func_2429() /* ty=(Tensor[(12, 4, 12), int32],) */;
  %265 = %264.0;
  %266 = cast(%var_4788, dtype="uint32") /* ty=Tensor[(12, 4, 12), uint32] */;
  %267 = shape_of(%265, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%265, dtype="uint32") /* ty=Tensor[(12, 4, 12), uint32] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %270 = bitwise_and(%268, %269) /* ty=Tensor[(12, 4, 12), uint32] */;
  (%270,)
}

def @func_7628() -> (Tensor[(11, 6, 7), uint16], Tensor[(11, 6, 7), float64]) {
  @func_7626() /* ty=(Tensor[(11, 6, 7), uint16], Tensor[(11, 6, 7), float64]) */
}

def @func_6359(%var_6358: Tensor[(16, 16, 11), bool]) -> (Tensor[(12, 4, 12), int32], Tensor[(16, 16, 11), int16]) {
  %289 = fn (%var_6319: Tensor[(16, 16, 11), bool]) -> (Tensor[(12, 4, 12), int32], Tensor[(16, 16, 11), int16]) {
    %271 = @func_2343() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32]) */;
    %272 = cast(%var_6319, dtype="float32") /* ty=Tensor[(16, 16, 11), float32] */;
    %273 = asin(%272) /* ty=Tensor[(16, 16, 11), float32] */;
    %274 = cast(meta[relay.Constant][7] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %275 = cast(meta[relay.Constant][8] /* ty=Tensor[(16, 1, 11), int8] */, dtype="int8") /* ty=Tensor[(16, 1, 11), int8] */;
    %276 = left_shift(%274, %275) /* ty=Tensor[(16, 1, 11), int8] */;
    %277 = cast(%276, dtype="bool") /* ty=Tensor[(16, 1, 11), bool] */;
    %278 = cast(meta[relay.Constant][7] /* ty=int8 */, dtype="bool") /* ty=bool */;
    %279 = greater(%277, %278) /* ty=Tensor[(16, 1, 11), bool] */;
    %280 = cast(%279, dtype="bool") /* ty=Tensor[(16, 1, 11), bool] */;
    %281 = cast(%var_6319, dtype="bool") /* ty=Tensor[(16, 16, 11), bool] */;
    %282 = not_equal(%280, %281) /* ty=Tensor[(16, 16, 11), bool] */;
    %283 = cast(%282, dtype="int16") /* ty=Tensor[(16, 16, 11), int16] */;
    %284 = shape_of(%273, dtype="int32") /* ty=Tensor[(3), int32] */;
    %285 = cast(%273, dtype="int16") /* ty=Tensor[(16, 16, 11), int16] */;
    %286 = dyn.reshape(%283, %284, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %287 = %271.0;
    %288 = bitwise_or(%285, %286) /* ty=Tensor[(16, 16, 11), int16] */;
    (%287, %288)
  };
  %289(%var_6358) /* ty=(Tensor[(12, 4, 12), int32], Tensor[(16, 16, 11), int16]) */
}

def @func_684(%var_681: Tensor[(13, 16, 2), float32], %var_682: Tensor[(13, 16, 2), float32], %var_683: Tensor[(13, 16, 2), float32]) -> (Tensor[(13, 16, 2), int32], Tensor[(13, 16, 2), float32]) {
  %304 = fn (%var_647: Tensor[(13, 16, 2), float32], %var_648: Tensor[(13, 16, 2), float32], %var_657: Tensor[(13, 16, 2), float32]) -> (Tensor[(13, 16, 2), int32], Tensor[(13, 16, 2), float32]) {
    %290 = cast(%var_657, dtype="int32") /* ty=Tensor[(13, 16, 2), int32] */;
    %291 = shape_of(%var_647, dtype="int32") /* ty=Tensor[(3), int32] */;
    %292 = cast(%var_647, dtype="int32") /* ty=Tensor[(13, 16, 2), int32] */;
    %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %294 = cast(%var_648, dtype="bool") /* ty=Tensor[(13, 16, 2), bool] */;
    %295 = shape_of(%var_647, dtype="int32") /* ty=Tensor[(3), int32] */;
    %296 = cast(%var_647, dtype="bool") /* ty=Tensor[(13, 16, 2), bool] */;
    %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %298 = not_equal(%296, %297) /* ty=Tensor[(13, 16, 2), bool] */;
    %299 = cast(%298, dtype="float64") /* ty=Tensor[(13, 16, 2), float64] */;
    %300 = exp(%299) /* ty=Tensor[(13, 16, 2), float64] */;
    %301 = cast(%300, dtype="float32") /* ty=Tensor[(13, 16, 2), float32] */;
    %302 = logical_xor(%292, %293) /* ty=Tensor[(13, 16, 2), int32] */;
    %303 = cos(%301) /* ty=Tensor[(13, 16, 2), float32] */;
    (%302, %303)
  };
  %304(%var_681, %var_682, %var_683) /* ty=(Tensor[(13, 16, 2), int32], Tensor[(13, 16, 2), float32]) */
}

def @func_1135() -> (Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), int32], Tensor[(416), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), int32]) {
  @func_1133() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), int32], Tensor[(416), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), int32]) */
}

def @func_3427(%var_3426: Tensor[(12, 4, 12), int8]) -> (Tensor[(12, 4, 12), bool],) {
  %311 = fn (%var_3409: Tensor[(12, 4, 12), int8]) -> (Tensor[(12, 4, 12), bool],) {
    %305 = @func_3300() /* ty=Tensor[(12, 4, 12), int8] */;
    %306 = cast(%var_3409, dtype="bool") /* ty=Tensor[(12, 4, 12), bool] */;
    %307 = shape_of(%305, dtype="int32") /* ty=Tensor[(3), int32] */;
    %308 = cast(%305, dtype="bool") /* ty=Tensor[(12, 4, 12), bool] */;
    %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %310 = equal(%308, %309) /* ty=Tensor[(12, 4, 12), bool] */;
    (%310,)
  };
  %311(%var_3426) /* ty=(Tensor[(12, 4, 12), bool],) */
}

def @func_2218() -> (Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), float32]) {
  @func_2216() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), float32]) */
}

def @func_4314() -> (Tensor[(416), float32],) {
  %312 = @func_3341() /* ty=(Tensor[(416), float32],) */;
  %313 = %312.0;
  (%313,)
}

def @func_5597(%var_5594: Tensor[(4, 16, 16), float32], %var_5595: Tensor[(64), int8], %var_5596: Tensor[(4, 16, 16), float32]) -> (Tensor[(4, 16, 16), float32], Tensor[(4, 16, 16), int8], Tensor[(4, 8, 2), int8], Tensor[(64), int8], Tensor[(4, 16, 16), int8]) {
  %332 = fn (%var_5551: Tensor[(4, 16, 16), float32], %var_5575: Tensor[(64), int8], %var_5579: Tensor[(4, 16, 16), float32]) -> (Tensor[(4, 16, 16), float32], Tensor[(4, 16, 16), int8], Tensor[(4, 8, 2), int8], Tensor[(64), int8], Tensor[(4, 16, 16), int8]) {
    %314 = cast(%var_5551, dtype="float32") /* ty=Tensor[(4, 16, 16), float32] */;
    %315 = asin(%314) /* ty=Tensor[(4, 16, 16), float32] */;
    %316 = cast(%315, dtype="float32") /* ty=Tensor[(4, 16, 16), float32] */;
    %317 = cast(%var_5551, dtype="int8") /* ty=Tensor[(4, 16, 16), int8] */;
    %318 = shape_of(%315, dtype="int32") /* ty=Tensor[(3), int32] */;
    %319 = cast(%315, dtype="int8") /* ty=Tensor[(4, 16, 16), int8] */;
    %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %321 = cast(%var_5575, dtype="int8") /* ty=Tensor[(64), int8] */;
    %322 = reshape(%321, newshape=[4, 8, 2]) /* ty=Tensor[(4, 8, 2), int8] */;
    %323 = @func_2449(%322) /* ty=(Tensor[(4, 8, 2), int8],) */;
    %324 = cast(%var_5579, dtype="int8") /* ty=Tensor[(4, 16, 16), int8] */;
    %325 = shape_of(%315, dtype="int32") /* ty=Tensor[(3), int32] */;
    %326 = cast(%315, dtype="int8") /* ty=Tensor[(4, 16, 16), int8] */;
    %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %328 = sinh(%316) /* ty=Tensor[(4, 16, 16), float32] */;
    %329 = subtract(%319, %320) /* ty=Tensor[(4, 16, 16), int8] */;
    %330 = %323.0;
    %331 = bitwise_and(%326, %327) /* ty=Tensor[(4, 16, 16), int8] */;
    (%328, %329, %330, %var_5575, %331)
  };
  %332(%var_5594, %var_5595, %var_5596) /* ty=(Tensor[(4, 16, 16), float32], Tensor[(4, 16, 16), int8], Tensor[(4, 8, 2), int8], Tensor[(64), int8], Tensor[(4, 16, 16), int8]) */
}

def @func_3467(%var_3456: Tensor[(13, 16, 2), int32]) -> (Tensor[(13, 16, 2), float64], Tensor[(12, 4, 12), float64], Tensor[(1, 576), int32]) {
  %333 = @func_2382() /* ty=Tensor[(13, 16, 2), int32] */;
  %334 = cast(%var_3456, dtype="float64") /* ty=Tensor[(13, 16, 2), float64] */;
  %335 = shape_of(%333, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(%333, dtype="float64") /* ty=Tensor[(13, 16, 2), float64] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %338 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 576), int32] */, dtype="int32") /* ty=Tensor[(1, 576), int32] */;
  %339 = reshape(%338, newshape=[12, 4, 12]) /* ty=Tensor[(12, 4, 12), int32] */;
  %340 = @func_1535(%339) /* ty=(Tensor[(2310), float32], Tensor[(12, 4, 12), float64], Tensor[(12, 4, 12), uint16], Tensor[(13, 16, 2), int32], Tensor[(12, 4, 12), uint32]) */;
  %341 = divide(%336, %337) /* ty=Tensor[(13, 16, 2), float64] */;
  %342 = %340.1;
  (%341, %342, meta[relay.Constant][9] /* ty=Tensor[(1, 576), int32] */)
}

def @func_6665() -> (Tensor[(13, 16, 2), float32],) {
  %343 = @func_3337() /* ty=Tensor[(13, 16, 2), float32] */;
  (%343,)
}

def @func_4446(%var_4445: Tensor[(15, 9, 4), float64]) -> (Tensor[(15, 9, 4), float64],) {
  %346 = fn (%var_4440: Tensor[(15, 9, 4), float64]) -> (Tensor[(15, 9, 4), float64],) {
    %344 = cast(%var_4440, dtype="float64") /* ty=Tensor[(15, 9, 4), float64] */;
    %345 = log2(%344) /* ty=Tensor[(15, 9, 4), float64] */;
    (%345,)
  };
  %346(%var_4445) /* ty=(Tensor[(15, 9, 4), float64],) */
}

def @func_7374() -> (Tensor[(13, 16, 2), float32], Tensor[(72), float32], Tensor[(36, 2), float32], Tensor[(13, 16, 2), float32], Tensor[(9, 7, 3), float64], Tensor[(13, 16, 2), float32], Tensor[(9, 7, 3), bool]) {
  %347 = cast(meta[relay.Constant][10] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %348 = reshape(%347, newshape=[12, 1, 6]) /* ty=Tensor[(12, 1, 6), float32] */;
  %349 = @func_2806(%348) /* ty=(Tensor[(12, 1, 6), float32], Tensor[(13, 16, 2), float32]) */;
  %350 = cast(meta[relay.Constant][10] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %351 = cast(meta[relay.Constant][10] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %352 = reshape(%350, newshape=[36, 2]) /* ty=Tensor[(36, 2), float32] */;
  %353 = reshape(%351, newshape=[36, 2]) /* ty=Tensor[(36, 2), float32] */;
  %354 = @func_6700(%352, %353) /* ty=(Tensor[(12, 4, 12), int8], Tensor[(13, 16, 2), float32], Tensor[(36, 2), float32]) */;
  %355 = @func_3880() /* ty=(Tensor[(13, 16, 2), float32],) */;
  %356 = cast(meta[relay.Constant][11] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %357 = cast(meta[relay.Constant][12] /* ty=Tensor[(9, 7, 3), uint32] */, dtype="uint32") /* ty=Tensor[(9, 7, 3), uint32] */;
  %358 = maximum(%356, %357) /* ty=Tensor[(9, 7, 3), uint32] */;
  %359 = cast(%358, dtype="float64") /* ty=Tensor[(9, 7, 3), float64] */;
  %360 = atanh(%359) /* ty=Tensor[(9, 7, 3), float64] */;
  %361 = cast(%360, dtype="float64") /* ty=Tensor[(9, 7, 3), float64] */;
  %362 = @func_6665() /* ty=(Tensor[(13, 16, 2), float32],) */;
  %363 = cast(meta[relay.Constant][13] /* ty=Tensor[(9, 7, 3), float64] */, dtype="bool") /* ty=Tensor[(9, 7, 3), bool] */;
  %364 = shape_of(%360, dtype="int32") /* ty=Tensor[(3), int32] */;
  %365 = cast(%360, dtype="bool") /* ty=Tensor[(9, 7, 3), bool] */;
  %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %367 = %349.1;
  %368 = %354.2;
  %369 = %355.0;
  %370 = log2(%361) /* ty=Tensor[(9, 7, 3), float64] */;
  %371 = %362.0;
  %372 = logical_and(%365, %366) /* ty=Tensor[(9, 7, 3), bool] */;
  (%367, meta[relay.Constant][10] /* ty=Tensor[(72), float32] */, %368, %369, %370, %371, %372)
}

def @func_7019() -> (Tensor[(11, 4, 3), bool], Tensor[(13, 16, 2), int32], Tensor[(72, 1), float32], Tensor[(13, 16, 2), float32], Tensor[(12, 4, 12), float64], Tensor[(13, 6, 12), float32]) {
  %373 = @func_5350() /* ty=(Tensor[(13, 16, 2), int32], Tensor[(13, 16, 2), float32]) */;
  %374 = cast(meta[relay.Constant][14] /* ty=Tensor[(72, 1), float32] */, dtype="float32") /* ty=Tensor[(72, 1), float32] */;
  %375 = cast(meta[relay.Constant][14] /* ty=Tensor[(72, 1), float32] */, dtype="float32") /* ty=Tensor[(72, 1), float32] */;
  %376 = reshape(%374, newshape=[36, 2]) /* ty=Tensor[(36, 2), float32] */;
  %377 = reshape(%375, newshape=[36, 2]) /* ty=Tensor[(36, 2), float32] */;
  %378 = @func_6700(%376, %377) /* ty=(Tensor[(12, 4, 12), int8], Tensor[(13, 16, 2), float32], Tensor[(36, 2), float32]) */;
  %379 = %378.0;
  %380 = @func_2429() /* ty=(Tensor[(12, 4, 12), int32],) */;
  %381 = %380.0;
  %382 = cast(%381, dtype="float64") /* ty=Tensor[(12, 4, 12), float64] */;
  %383 = shape_of(%379, dtype="int32") /* ty=Tensor[(3), int32] */;
  %384 = cast(%379, dtype="float64") /* ty=Tensor[(12, 4, 12), float64] */;
  %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %386 = @func_2601() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %387 = @func_5473() /* ty=Tensor[(11, 4, 3), bool] */;
  %388 = %373.0;
  %389 = @func_2261() /* ty=Tensor[(13, 16, 2), float32] */;
  %390 = divide(%384, %385) /* ty=Tensor[(12, 4, 12), float64] */;
  %391 = %386.0;
  (%387, %388, meta[relay.Constant][14] /* ty=Tensor[(72, 1), float32] */, %389, %390, %391)
}

def @func_1133() -> (Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), int32], Tensor[(416), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), int32]) {
  %392 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 4, 12), float32] */, dtype="float32") /* ty=Tensor[(12, 4, 12), float32] */;
  %393 = asinh(%392) /* ty=Tensor[(12, 4, 12), float32] */;
  %394 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 4, 12), float32] */, dtype="int32") /* ty=Tensor[(12, 4, 12), int32] */;
  %395 = shape_of(%393, dtype="int32") /* ty=Tensor[(3), int32] */;
  %396 = cast(%393, dtype="int32") /* ty=Tensor[(12, 4, 12), int32] */;
  %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %398 = cast(meta[relay.Constant][16] /* ty=Tensor[(416), float32] */, dtype="float32") /* ty=Tensor[(416), float32] */;
  %399 = cast(meta[relay.Constant][16] /* ty=Tensor[(416), float32] */, dtype="float32") /* ty=Tensor[(416), float32] */;
  %400 = cast(meta[relay.Constant][16] /* ty=Tensor[(416), float32] */, dtype="float32") /* ty=Tensor[(416), float32] */;
  %401 = reshape(%398, newshape=[13, 16, 2]) /* ty=Tensor[(13, 16, 2), float32] */;
  %402 = reshape(%399, newshape=[13, 16, 2]) /* ty=Tensor[(13, 16, 2), float32] */;
  %403 = reshape(%400, newshape=[13, 16, 2]) /* ty=Tensor[(13, 16, 2), float32] */;
  %404 = @func_680(%401, %402, %403) /* ty=(Tensor[(13, 16, 2), int32], Tensor[(13, 16, 2), float32]) */;
  %405 = %404.0;
  %406 = cast(%405, dtype="float32") /* ty=Tensor[(13, 16, 2), float32] */;
  %407 = cast(%405, dtype="float32") /* ty=Tensor[(13, 16, 2), float32] */;
  %408 = cast(%405, dtype="float32") /* ty=Tensor[(13, 16, 2), float32] */;
  %409 = reshape(%406, newshape=[13, 16, 2]) /* ty=Tensor[(13, 16, 2), float32] */;
  %410 = reshape(%407, newshape=[13, 16, 2]) /* ty=Tensor[(13, 16, 2), float32] */;
  %411 = reshape(%408, newshape=[13, 16, 2]) /* ty=Tensor[(13, 16, 2), float32] */;
  %412 = @func_680(%409, %410, %411) /* ty=(Tensor[(13, 16, 2), int32], Tensor[(13, 16, 2), float32]) */;
  %413 = %412.1;
  %414 = cast(%413, dtype="float64") /* ty=Tensor[(13, 16, 2), float64] */;
  %415 = cast(%405, dtype="float32") /* ty=Tensor[(13, 16, 2), float32] */;
  %416 = cast(%413, dtype="float32") /* ty=Tensor[(13, 16, 2), float32] */;
  %417 = cast(%413, dtype="float32") /* ty=Tensor[(13, 16, 2), float32] */;
  %418 = reshape(%415, newshape=[13, 16, 2]) /* ty=Tensor[(13, 16, 2), float32] */;
  %419 = reshape(%416, newshape=[13, 16, 2]) /* ty=Tensor[(13, 16, 2), float32] */;
  %420 = reshape(%417, newshape=[13, 16, 2]) /* ty=Tensor[(13, 16, 2), float32] */;
  %421 = @func_680(%418, %419, %420) /* ty=(Tensor[(13, 16, 2), int32], Tensor[(13, 16, 2), float32]) */;
  %422 = maximum(%396, %397) /* ty=Tensor[(12, 4, 12), int32] */;
  %423 = log10(%414) /* ty=Tensor[(13, 16, 2), float64] */;
  %424 = %421.0;
  (%422, %405, meta[relay.Constant][16] /* ty=Tensor[(416), float32] */, %423, %424)
}

def @func_4925() -> (Tensor[(3, 7), float64],) {
  @func_4923() /* ty=(Tensor[(3, 7), float64],) */
}

def @func_7832() -> Tensor[(12, 4, 12), int32] {
  %425 = fn () -> Tensor[(12, 4, 12), int32] {
    @func_4204() /* ty=Tensor[(12, 4, 12), int32] */
  };
  %425() /* ty=Tensor[(12, 4, 12), int32] */
}

def @func_3511() -> (Tensor[(12, 4, 12), float32],) {
  %426 = @func_2315() /* ty=(Tensor[(12, 4, 12), float32], Tensor[(12, 4, 12), float64], Tensor[(13, 16, 2), float32]) */;
  %427 = %426.0;
  (%427,)
}

def @func_7904() -> Tensor[(13, 16, 2), float32] {
  @func_6449() /* ty=Tensor[(13, 16, 2), float32] */
}

def @func_7021() -> (Tensor[(11, 4, 3), bool], Tensor[(13, 16, 2), int32], Tensor[(72, 1), float32], Tensor[(13, 16, 2), float32], Tensor[(12, 4, 12), float64], Tensor[(13, 6, 12), float32]) {
  @func_7019() /* ty=(Tensor[(11, 4, 3), bool], Tensor[(13, 16, 2), int32], Tensor[(72, 1), float32], Tensor[(13, 16, 2), float32], Tensor[(12, 4, 12), float64], Tensor[(13, 6, 12), float32]) */
}

def @func_1358() -> Tensor[(13, 16, 2), int32] {
  @func_1356() /* ty=Tensor[(13, 16, 2), int32] */
}

def @func_2261() -> Tensor[(13, 16, 2), float32] {
  @func_2048() /* ty=Tensor[(13, 16, 2), float32] */
}

def @func_3086(%var_3084: Tensor[(6, 2, 12), float32], %var_3085: Tensor[(6, 2, 12), bool]) -> (Tensor[(6, 2, 12), bool], Tensor[(6, 2, 12), int8]) {
  @func_3082(%var_3084, %var_3085) /* ty=(Tensor[(6, 2, 12), bool], Tensor[(6, 2, 12), int8]) */
}

def @func_3781(%var_3779: Tensor[(13, 2, 4), int8], %var_3780: Tensor[(13, 2, 4), int8]) -> (Tensor[(13, 2, 4), float32],) {
  @func_3777(%var_3779, %var_3780) /* ty=(Tensor[(13, 2, 4), float32],) */
}

def @func_3513() -> (Tensor[(12, 4, 12), float32],) {
  @func_3511() /* ty=(Tensor[(12, 4, 12), float32],) */
}

def @func_1538(%var_1536: Tensor[(12, 4, 12), int32]) -> (Tensor[(2310), float32], Tensor[(12, 4, 12), float64], Tensor[(12, 4, 12), uint16], Tensor[(13, 16, 2), int32], Tensor[(12, 4, 12), uint32]) {
  @func_1535(%var_1536) /* ty=(Tensor[(2310), float32], Tensor[(12, 4, 12), float64], Tensor[(12, 4, 12), uint16], Tensor[(13, 16, 2), int32], Tensor[(12, 4, 12), uint32]) */
}

def @func_4184() -> Tensor[(12, 4, 12), int32] {
  %429 = fn () -> Tensor[(12, 4, 12), int32] {
    %428 = @func_2343() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32]) */;
    %428.0
  };
  %429() /* ty=Tensor[(12, 4, 12), int32] */
}

def @func_7399() -> Tensor[(13, 16, 2), int8] {
  %430 = @func_1133() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), int32], Tensor[(416), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), int32]) */;
  %431 = %430.1;
  %432 = cast(meta[relay.Constant][17] /* ty=Tensor[(13, 16, 2), int32] */, dtype="int8") /* ty=Tensor[(13, 16, 2), int8] */;
  %433 = shape_of(%431, dtype="int32") /* ty=Tensor[(3), int32] */;
  %434 = cast(%431, dtype="int8") /* ty=Tensor[(13, 16, 2), int8] */;
  %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  right_shift(%434, %435) /* ty=Tensor[(13, 16, 2), int8] */
}

def @func_1887() -> Tensor[(3, 7), float64] {
  @func_1885() /* ty=Tensor[(3, 7), float64] */
}

def @func_7970() -> (Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), float32]) {
  @func_7968() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), float32]) */
}

def @func_1535(%var_1491: Tensor[(12, 4, 12), int32]) -> (Tensor[(2310), float32], Tensor[(12, 4, 12), float64], Tensor[(12, 4, 12), uint16], Tensor[(13, 16, 2), int32], Tensor[(12, 4, 12), uint32]) {
  %436 = @func_1410() /* ty=Tensor[(12, 4, 12), int32] */;
  %437 = cast(%var_1491, dtype="float64") /* ty=Tensor[(12, 4, 12), float64] */;
  %438 = shape_of(%436, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%436, dtype="float64") /* ty=Tensor[(12, 4, 12), float64] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %441 = cast(meta[relay.Constant][18] /* ty=Tensor[(2310), float32] */, dtype="float32") /* ty=Tensor[(2310), float32] */;
  %442 = reshape(%441, newshape=[15, 11, 14]) /* ty=Tensor[(15, 11, 14), float32] */;
  %443 = @func_1228(%442) /* ty=(Tensor[(15, 11, 14), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), float32], Tensor[(12, 4, 12), int32]) */;
  %444 = %443.3;
  %445 = cast(%var_1491, dtype="uint16") /* ty=Tensor[(12, 4, 12), uint16] */;
  %446 = shape_of(%444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %447 = cast(%444, dtype="uint16") /* ty=Tensor[(12, 4, 12), uint16] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %449 = cast(meta[relay.Constant][19] /* ty=Tensor[(12, 4, 12), int32] */, dtype="uint32") /* ty=Tensor[(12, 4, 12), uint32] */;
  %450 = shape_of(%444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %451 = cast(%444, dtype="uint32") /* ty=Tensor[(12, 4, 12), uint32] */;
  %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %453 = floor_mod(%439, %440) /* ty=Tensor[(12, 4, 12), float64] */;
  %454 = logical_xor(%447, %448) /* ty=Tensor[(12, 4, 12), uint16] */;
  %455 = @func_1356() /* ty=Tensor[(13, 16, 2), int32] */;
  %456 = multiply(%451, %452) /* ty=Tensor[(12, 4, 12), uint32] */;
  (meta[relay.Constant][18] /* ty=Tensor[(2310), float32] */, %453, %454, %455, %456)
}

def @func_4733() -> (Tensor[(12, 4, 12), float64], Tensor[(12, 4, 12), int8], Tensor[(416), float32]) {
  @func_4731() /* ty=(Tensor[(12, 4, 12), float64], Tensor[(12, 4, 12), int8], Tensor[(416), float32]) */
}

def @func_1972(%var_1970: uint8, %var_1971: Tensor[(15, 8, 15), uint8]) -> (Tensor[(15, 8, 15), bool], Tensor[(12, 4, 12), float32], Tensor[(3, 7), float64]) {
  @func_1968(%var_1970, %var_1971) /* ty=(Tensor[(15, 8, 15), bool], Tensor[(12, 4, 12), float32], Tensor[(3, 7), float64]) */
}

def @func_3479() -> Tensor[(12, 4, 12), int32] {
  %457 = @func_1839() /* ty=(Tensor[(12, 4, 12), int32],) */;
  %457.0
}

def @func_3342() -> (Tensor[(416), float32],) {
  %459 = fn () -> (Tensor[(416), float32],) {
    %458 = @func_3174() /* ty=Tensor[(416), float32] */;
    (%458,)
  };
  %459() /* ty=(Tensor[(416), float32],) */
}

def @func_6225() -> (Tensor[(12, 4, 12), float32],) {
  %460 = @func_2861() /* ty=(Tensor[(12, 4, 12), int8], Tensor[(12, 4, 12), float32]) */;
  %461 = %460.1;
  (%461,)
}

def @func_3607() -> (Tensor[(12, 4, 12), bool], Tensor[(13, 16, 2), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), float32]) {
  %470 = fn () -> (Tensor[(12, 4, 12), bool], Tensor[(13, 16, 2), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), float32]) {
    %462 = @func_2923() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), bool]) */;
    %463 = @func_1133() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), int32], Tensor[(416), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), int32]) */;
    %464 = %463.1;
    %465 = cast(%464, dtype="float64") /* ty=Tensor[(13, 16, 2), float64] */;
    %466 = %462.1;
    %467 = @func_2048() /* ty=Tensor[(13, 16, 2), float32] */;
    %468 = acosh(%465) /* ty=Tensor[(13, 16, 2), float64] */;
    %469 = @func_3337() /* ty=Tensor[(13, 16, 2), float32] */;
    (%466, %467, %468, %469)
  };
  %470() /* ty=(Tensor[(12, 4, 12), bool], Tensor[(13, 16, 2), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), float32]) */
}

def @func_1410() -> Tensor[(12, 4, 12), int32] {
  %471 = @func_1305() /* ty=(Tensor[(12, 4, 12), int32],) */;
  %471.0
}

def @func_7660() -> (Tensor[(13, 6, 12), float32],) {
  @func_7658() /* ty=(Tensor[(13, 6, 12), float32],) */
}

def @func_6449() -> Tensor[(13, 16, 2), float32] {
  @func_2261() /* ty=Tensor[(13, 16, 2), float32] */
}

def @func_3311() -> (Tensor[(12, 4, 12), int8],) {
  @func_3309() /* ty=(Tensor[(12, 4, 12), int8],) */
}

def @func_6890(%var_6889: Tensor[(12, 4, 12), int32]) -> (Tensor[(12, 4, 12), bool], Tensor[(12, 4, 12), float64], Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), float32]) {
  %485 = fn (%var_6859: Tensor[(12, 4, 12), int32]) -> (Tensor[(12, 4, 12), bool], Tensor[(12, 4, 12), float64], Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), float32]) {
    %472 = @func_2923() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), bool]) */;
    %473 = %472.0;
    %474 = cast(%var_6859, dtype="bool") /* ty=Tensor[(12, 4, 12), bool] */;
    %475 = shape_of(%473, dtype="int32") /* ty=Tensor[(3), int32] */;
    %476 = cast(%473, dtype="bool") /* ty=Tensor[(12, 4, 12), bool] */;
    %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %478 = cast(%473, dtype="float64") /* ty=Tensor[(12, 4, 12), float64] */;
    %479 = @func_1629() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32]) */;
    %480 = @func_4505() /* ty=(Tensor[(13, 16, 2), float32],) */;
    %481 = greater_equal(%476, %477) /* ty=Tensor[(12, 4, 12), bool] */;
    %482 = log10(%478) /* ty=Tensor[(12, 4, 12), float64] */;
    %483 = %479.0;
    %484 = %480.0;
    (%481, %482, %483, %484)
  };
  %485(%var_6889) /* ty=(Tensor[(12, 4, 12), bool], Tensor[(12, 4, 12), float64], Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), float32]) */
}

def @func_6178() -> (Tensor[(16, 10, 14), float64], Tensor[(12, 4, 12), float32], Tensor[(144), float32], Tensor[(6, 2, 12), float64]) {
  %498 = fn () -> (Tensor[(16, 10, 14), float64], Tensor[(12, 4, 12), float32], Tensor[(144), float32], Tensor[(6, 2, 12), float64]) {
    %486 = @func_5508() /* ty=(Tensor[(16, 10, 14), float64],) */;
    %487 = @func_5197() /* ty=(Tensor[(12, 4, 12), float32], Tensor[(12, 4, 12), float32], Tensor[(12, 4, 12), bool]) */;
    %488 = cast(meta[relay.Constant][20] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
    %489 = cast(meta[relay.Constant][20] /* ty=Tensor[(144), float32] */, dtype="bool") /* ty=Tensor[(144), bool] */;
    %490 = reshape(%488, newshape=[6, 2, 12]) /* ty=Tensor[(6, 2, 12), float32] */;
    %491 = reshape(%489, newshape=[6, 2, 12]) /* ty=Tensor[(6, 2, 12), bool] */;
    %492 = @func_3082(%490, %491) /* ty=(Tensor[(6, 2, 12), bool], Tensor[(6, 2, 12), int8]) */;
    %493 = %492.1;
    %494 = cast(%493, dtype="float64") /* ty=Tensor[(6, 2, 12), float64] */;
    %495 = %486.0;
    %496 = %487.1;
    %497 = cos(%494) /* ty=Tensor[(6, 2, 12), float64] */;
    (%495, %496, meta[relay.Constant][20] /* ty=Tensor[(144), float32] */, %497)
  };
  %498() /* ty=(Tensor[(16, 10, 14), float64], Tensor[(12, 4, 12), float32], Tensor[(144), float32], Tensor[(6, 2, 12), float64]) */
}

def @func_1918() -> (Tensor[(12, 4, 12), int8], Tensor[(12, 4, 12), int32]) {
  @func_1916() /* ty=(Tensor[(12, 4, 12), int8], Tensor[(12, 4, 12), int32]) */
}

def @func_2983() -> Tensor[(416), float32] {
  @func_2981() /* ty=Tensor[(416), float32] */
}

def @func_7626() -> (Tensor[(11, 6, 7), uint16], Tensor[(11, 6, 7), float64]) {
  %499 = @func_5079() /* ty=(Tensor[(11, 6, 7), float64],) */;
  %500 = %499.0;
  %501 = cast(meta[relay.Constant][21] /* ty=Tensor[(11, 6, 7), float64] */, dtype="uint16") /* ty=Tensor[(11, 6, 7), uint16] */;
  %502 = shape_of(%500, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(%500, dtype="uint16") /* ty=Tensor[(11, 6, 7), uint16] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %505 = cast(meta[relay.Constant][21] /* ty=Tensor[(11, 6, 7), float64] */, dtype="float32") /* ty=Tensor[(11, 6, 7), float32] */;
  %506 = erf(%505) /* ty=Tensor[(11, 6, 7), float32] */;
  %507 = cast(%506, dtype="float64") /* ty=Tensor[(11, 6, 7), float64] */;
  %508 = maximum(%503, %504) /* ty=Tensor[(11, 6, 7), uint16] */;
  %509 = log10(%507) /* ty=Tensor[(11, 6, 7), float64] */;
  (%508, %509)
}

def @func_4583() -> (Tensor[(12, 4, 12), int8],) {
  %512 = fn () -> (Tensor[(12, 4, 12), int8],) {
    %510 = @func_3309() /* ty=(Tensor[(12, 4, 12), int8],) */;
    %511 = %510.0;
    (%511,)
  };
  %512() /* ty=(Tensor[(12, 4, 12), int8],) */
}

def @func_4899() -> (Tensor[(12, 4, 12), int8],) {
  @func_4897() /* ty=(Tensor[(12, 4, 12), int8],) */
}

def @func_7376() -> (Tensor[(13, 16, 2), float32], Tensor[(72), float32], Tensor[(36, 2), float32], Tensor[(13, 16, 2), float32], Tensor[(9, 7, 3), float64], Tensor[(13, 16, 2), float32], Tensor[(9, 7, 3), bool]) {
  @func_7374() /* ty=(Tensor[(13, 16, 2), float32], Tensor[(72), float32], Tensor[(36, 2), float32], Tensor[(13, 16, 2), float32], Tensor[(9, 7, 3), float64], Tensor[(13, 16, 2), float32], Tensor[(9, 7, 3), bool]) */
}

def @func_2383() -> Tensor[(13, 16, 2), int32] {
  %513 = fn () -> Tensor[(13, 16, 2), int32] {
    @func_1356() /* ty=Tensor[(13, 16, 2), int32] */
  };
  %513() /* ty=Tensor[(13, 16, 2), int32] */
}

def @func_5351() -> (Tensor[(13, 16, 2), int32], Tensor[(13, 16, 2), float32]) {
  %517 = fn () -> (Tensor[(13, 16, 2), int32], Tensor[(13, 16, 2), float32]) {
    %514 = @func_3880() /* ty=(Tensor[(13, 16, 2), float32],) */;
    %515 = @func_3759() /* ty=Tensor[(13, 16, 2), int32] */;
    %516 = %514.0;
    (%515, %516)
  };
  %517() /* ty=(Tensor[(13, 16, 2), int32], Tensor[(13, 16, 2), float32]) */
}

def @func_1356() -> Tensor[(13, 16, 2), int32] {
  %518 = @func_1133() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), int32], Tensor[(416), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), int32]) */;
  %518.4
}

def @func_1305() -> (Tensor[(12, 4, 12), int32],) {
  %519 = @func_1133() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), int32], Tensor[(416), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), int32]) */;
  %520 = %519.0;
  (%520,)
}

def @func_3881() -> (Tensor[(13, 16, 2), float32],) {
  %523 = fn () -> (Tensor[(13, 16, 2), float32],) {
    %521 = @func_3606() /* ty=(Tensor[(12, 4, 12), bool], Tensor[(13, 16, 2), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), float32]) */;
    %522 = %521.3;
    (%522,)
  };
  %523() /* ty=(Tensor[(13, 16, 2), float32],) */
}

def @func_5925(%var_5924: Tensor[(12, 4, 12), int32]) -> (Tensor[(12, 4, 12), float64],) {
  %531 = fn (%var_5906: Tensor[(12, 4, 12), int32]) -> (Tensor[(12, 4, 12), float64],) {
    %524 = @func_2923() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), bool]) */;
    %525 = %524.0;
    %526 = cast(%var_5906, dtype="float64") /* ty=Tensor[(12, 4, 12), float64] */;
    %527 = shape_of(%525, dtype="int32") /* ty=Tensor[(3), int32] */;
    %528 = cast(%525, dtype="float64") /* ty=Tensor[(12, 4, 12), float64] */;
    %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %530 = power(%528, %529) /* ty=Tensor[(12, 4, 12), float64] */;
    (%530,)
  };
  %531(%var_5924) /* ty=(Tensor[(12, 4, 12), float64],) */
}

def @func_4986() -> Tensor[(12, 4, 12), int32] {
  %533 = fn () -> Tensor[(12, 4, 12), int32] {
    %532 = @func_1629() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32]) */;
    %532.1
  };
  %533() /* ty=Tensor[(12, 4, 12), int32] */
}

def @func_7498(%var_7495: Tensor[(6, 5, 14), int16], %var_7496: Tensor[(6, 5, 14), int16], %var_7497: Tensor[(72), float32]) -> (Tensor[(13, 16, 2), float32], Tensor[(72), float32], Tensor[(13, 16, 2), int32], Tensor[(6, 5, 14), uint8]) {
  %550 = fn (%var_7463: Tensor[(6, 5, 14), int16], %var_7464: Tensor[(6, 5, 14), int16], %var_7470: Tensor[(72), float32]) -> (Tensor[(13, 16, 2), float32], Tensor[(72), float32], Tensor[(13, 16, 2), int32], Tensor[(6, 5, 14), uint8]) {
    %534 = cast(%var_7470, dtype="float32") /* ty=Tensor[(72), float32] */;
    %535 = reshape(%534, newshape=[72]) /* ty=Tensor[(72), float32] */;
    %536 = @func_4868(%535) /* ty=(Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), float32], Tensor[(72), float32]) */;
    %537 = @func_1133() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), int32], Tensor[(416), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), int32]) */;
    %538 = cast(%var_7464, dtype="bool") /* ty=Tensor[(6, 5, 14), bool] */;
    %539 = shape_of(%var_7463, dtype="int32") /* ty=Tensor[(3), int32] */;
    %540 = cast(%var_7463, dtype="bool") /* ty=Tensor[(6, 5, 14), bool] */;
    %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %542 = less_equal(%540, %541) /* ty=Tensor[(6, 5, 14), bool] */;
    %543 = cast(%var_7464, dtype="uint8") /* ty=Tensor[(6, 5, 14), uint8] */;
    %544 = shape_of(%542, dtype="int32") /* ty=Tensor[(3), int32] */;
    %545 = cast(%542, dtype="uint8") /* ty=Tensor[(6, 5, 14), uint8] */;
    %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %547 = %536.1;
    %548 = %537.1;
    %549 = bitwise_and(%545, %546) /* ty=Tensor[(6, 5, 14), uint8] */;
    (%547, %var_7470, %548, %549)
  };
  %550(%var_7495, %var_7496, %var_7497) /* ty=(Tensor[(13, 16, 2), float32], Tensor[(72), float32], Tensor[(13, 16, 2), int32], Tensor[(6, 5, 14), uint8]) */
}

def @func_7738(%var_7737: Tensor[(13, 16, 4), int32]) -> (Tensor[(13, 16, 4), int32], Tensor[(3, 7), float64]) {
  %556 = fn (%var_7715: Tensor[(13, 16, 4), int32]) -> (Tensor[(13, 16, 4), int32], Tensor[(3, 7), float64]) {
    %551 = cast(meta[relay.Constant][22] /* ty=Tensor[(13, 1, 4), int32] */, dtype="int32") /* ty=Tensor[(13, 1, 4), int32] */;
    %552 = cast(%var_7715, dtype="int32") /* ty=Tensor[(13, 16, 4), int32] */;
    %553 = @func_1802() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(3, 7), float64], Tensor[(12, 4, 12), int32]) */;
    %554 = add(%551, %552) /* ty=Tensor[(13, 16, 4), int32] */;
    %555 = %553.1;
    (%554, %555)
  };
  %556(%var_7737) /* ty=(Tensor[(13, 16, 4), int32], Tensor[(3, 7), float64]) */
}

def @func_4204() -> Tensor[(12, 4, 12), int32] {
  %557 = @func_2343() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32]) */;
  %557.0
}

def @func_4679() -> (Tensor[(13, 16, 2), float64],) {
  %562 = fn () -> (Tensor[(13, 16, 2), float64],) {
    %558 = @func_3880() /* ty=(Tensor[(13, 16, 2), float32],) */;
    %559 = %558.0;
    %560 = cast(%559, dtype="float64") /* ty=Tensor[(13, 16, 2), float64] */;
    %561 = erf(%560) /* ty=Tensor[(13, 16, 2), float64] */;
    (%561,)
  };
  %562() /* ty=(Tensor[(13, 16, 2), float64],) */
}

def @func_5650() -> (Tensor[(12, 4, 12), int32], Tensor[(3, 7), float64], Tensor[(12, 4, 12), uint32]) {
  @func_5648() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(3, 7), float64], Tensor[(12, 4, 12), uint32]) */
}

def @func_2806(%var_2798: Tensor[(12, 1, 6), float32]) -> (Tensor[(12, 1, 6), float32], Tensor[(13, 16, 2), float32]) {
  %563 = cast(%var_2798, dtype="float32") /* ty=Tensor[(12, 1, 6), float32] */;
  %564 = log2(%563) /* ty=Tensor[(12, 1, 6), float32] */;
  %565 = @func_2261() /* ty=Tensor[(13, 16, 2), float32] */;
  (%564, %565)
}

def @func_1231(%var_1229: Tensor[(15, 11, 14), float32]) -> (Tensor[(15, 11, 14), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), float32], Tensor[(12, 4, 12), int32]) {
  @func_1228(%var_1229) /* ty=(Tensor[(15, 11, 14), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), float32], Tensor[(12, 4, 12), int32]) */
}

def @func_3481() -> Tensor[(12, 4, 12), int32] {
  @func_3479() /* ty=Tensor[(12, 4, 12), int32] */
}

def @func_5453(%var_5414: Tensor[(12, 4, 12), int32]) -> (Tensor[(12, 4, 12), bool], Tensor[(12, 4, 12), int8], Tensor[(12, 4, 12), int8], Tensor[(12, 4, 12), float64], Tensor[(12, 4, 12), int8]) {
  %566 = @func_1629() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32]) */;
  %567 = %566.0;
  %568 = cast(%var_5414, dtype="bool") /* ty=Tensor[(12, 4, 12), bool] */;
  %569 = shape_of(%567, dtype="int32") /* ty=Tensor[(3), int32] */;
  %570 = cast(%567, dtype="bool") /* ty=Tensor[(12, 4, 12), bool] */;
  %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %572 = @func_2861() /* ty=(Tensor[(12, 4, 12), int8], Tensor[(12, 4, 12), float32]) */;
  %573 = cast(%567, dtype="float64") /* ty=Tensor[(12, 4, 12), float64] */;
  %574 = @func_3309() /* ty=(Tensor[(12, 4, 12), int8],) */;
  %575 = logical_or(%570, %571) /* ty=Tensor[(12, 4, 12), bool] */;
  %576 = @func_3281() /* ty=Tensor[(12, 4, 12), int8] */;
  %577 = %572.0;
  %578 = asin(%573) /* ty=Tensor[(12, 4, 12), float64] */;
  %579 = %574.0;
  (%575, %576, %577, %578, %579)
}

def @func_2317() -> (Tensor[(12, 4, 12), float32], Tensor[(12, 4, 12), float64], Tensor[(13, 16, 2), float32]) {
  @func_2315() /* ty=(Tensor[(12, 4, 12), float32], Tensor[(12, 4, 12), float64], Tensor[(13, 16, 2), float32]) */
}

def @func_5009() -> (Tensor[(12, 4, 12), int8], Tensor[(3, 7), float64]) {
  %584 = fn () -> (Tensor[(12, 4, 12), int8], Tensor[(3, 7), float64]) {
    %580 = @func_3309() /* ty=(Tensor[(12, 4, 12), int8],) */;
    %581 = @func_1567() /* ty=(Tensor[(3, 7), float64],) */;
    %582 = %580.0;
    %583 = %581.0;
    (%582, %583)
  };
  %584() /* ty=(Tensor[(12, 4, 12), int8], Tensor[(3, 7), float64]) */
}

def @func_4169() -> (Tensor[(12, 4, 12), int32],) {
  %586 = fn () -> (Tensor[(12, 4, 12), int32],) {
    %585 = @func_1410() /* ty=Tensor[(12, 4, 12), int32] */;
    (%585,)
  };
  %586() /* ty=(Tensor[(12, 4, 12), int32],) */
}

def @func_4641() -> (Tensor[(13, 16, 2), float32],) {
  %589 = fn () -> (Tensor[(13, 16, 2), float32],) {
    %587 = @func_2315() /* ty=(Tensor[(12, 4, 12), float32], Tensor[(12, 4, 12), float64], Tensor[(13, 16, 2), float32]) */;
    %588 = %587.2;
    (%588,)
  };
  %589() /* ty=(Tensor[(13, 16, 2), float32],) */
}

def @func_7119(%var_7117: Tensor[(1, 16, 11), float32], %var_7118: Tensor[(8, 16, 11), float32]) -> (Tensor[(8, 16, 11), float64], Tensor[(1, 16, 11), float64]) {
  @func_7115(%var_7117, %var_7118) /* ty=(Tensor[(8, 16, 11), float64], Tensor[(1, 16, 11), float64]) */
}

def @func_7208() -> (Tensor[(13, 16, 2), int32], Tensor[(13, 16, 2), bool], Tensor[(13, 16, 2), float32]) {
  @func_7206() /* ty=(Tensor[(13, 16, 2), int32], Tensor[(13, 16, 2), bool], Tensor[(13, 16, 2), float32]) */
}

def @func_7424() -> Tensor[(12, 4, 12), float32] {
  @func_7422() /* ty=Tensor[(12, 4, 12), float32] */
}

def @func_2981() -> Tensor[(416), float32] {
  %590 = @func_1133() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), int32], Tensor[(416), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), int32]) */;
  %590.2
}

def @func_7115(%var_7089: Tensor[(1, 16, 11), float32], %var_7092: Tensor[(8, 16, 11), float32]) -> (Tensor[(8, 16, 11), float64], Tensor[(1, 16, 11), float64]) {
  %591 = cast(%var_7089, dtype="float64") /* ty=Tensor[(1, 16, 11), float64] */;
  %592 = cast(%var_7092, dtype="float64") /* ty=Tensor[(8, 16, 11), float64] */;
  %593 = cast(%var_7089, dtype="float32") /* ty=Tensor[(1, 16, 11), float32] */;
  %594 = sqrt(%593) /* ty=Tensor[(1, 16, 11), float32] */;
  %595 = cast(%594, dtype="float64") /* ty=Tensor[(1, 16, 11), float64] */;
  %596 = floor_divide(%591, %592) /* ty=Tensor[(8, 16, 11), float64] */;
  %597 = sigmoid(%595) /* ty=Tensor[(1, 16, 11), float64] */;
  (%596, %597)
}

def @func_3359() -> (Tensor[(3, 7), float64],) {
  %600 = fn () -> (Tensor[(3, 7), float64],) {
    %598 = @func_1567() /* ty=(Tensor[(3, 7), float64],) */;
    %599 = %598.0;
    (%599,)
  };
  %600() /* ty=(Tensor[(3, 7), float64],) */
}

def @func_7529(%var_7511: Tensor[(7, 16, 10), float64], %var_7512: Tensor[(7, 16, 10), float64]) -> (Tensor[(7, 16, 10), float32],) {
  %601 = cast(%var_7512, dtype="float64") /* ty=Tensor[(7, 16, 10), float64] */;
  %602 = shape_of(%var_7511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%var_7511, dtype="float64") /* ty=Tensor[(7, 16, 10), float64] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %605 = floor_divide(%603, %604) /* ty=Tensor[(7, 16, 10), float64] */;
  %606 = cast(%605, dtype="float32") /* ty=Tensor[(7, 16, 10), float32] */;
  %607 = exp(%606) /* ty=Tensor[(7, 16, 10), float32] */;
  (%607,)
}

def @func_2048() -> Tensor[(13, 16, 2), float32] {
  %608 = @func_1356() /* ty=Tensor[(13, 16, 2), int32] */;
  %609 = cast(%608, dtype="float32") /* ty=Tensor[(13, 16, 2), float32] */;
  atanh(%609) /* ty=Tensor[(13, 16, 2), float32] */
}

def @func_7533(%var_7531: Tensor[(7, 16, 10), float64], %var_7532: Tensor[(7, 16, 10), float64]) -> (Tensor[(7, 16, 10), float32],) {
  @func_7529(%var_7531, %var_7532) /* ty=(Tensor[(7, 16, 10), float32],) */
}

def @func_7591() -> (Tensor[(13, 16, 2), int32],) {
  @func_7589() /* ty=(Tensor[(13, 16, 2), int32],) */
}

def @func_7658() -> (Tensor[(13, 6, 12), float32],) {
  %610 = @func_3690() /* ty=(Tensor[(13, 16, 2), float64], Tensor[(13, 6, 12), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), float32]) */;
  %611 = %610.1;
  (%611,)
}

def @func_4768(%var_4767: Tensor[(12, 4, 12), int8]) -> (Tensor[(12, 4, 12), float32],) {
  %618 = fn (%var_4760: Tensor[(12, 4, 12), int8]) -> (Tensor[(12, 4, 12), float32],) {
    %612 = @func_3300() /* ty=Tensor[(12, 4, 12), int8] */;
    %613 = cast(%var_4760, dtype="float32") /* ty=Tensor[(12, 4, 12), float32] */;
    %614 = shape_of(%612, dtype="int32") /* ty=Tensor[(3), int32] */;
    %615 = cast(%612, dtype="float32") /* ty=Tensor[(12, 4, 12), float32] */;
    %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %617 = subtract(%615, %616) /* ty=Tensor[(12, 4, 12), float32] */;
    (%617,)
  };
  %618(%var_4767) /* ty=(Tensor[(12, 4, 12), float32],) */
}

def @func_6584(%var_6509: Tensor[(12, 4, 12), float32]) -> (Tensor[(12, 4, 12), float32], Tensor[(13, 16, 2), float64]) {
  %619 = @func_1768() /* ty=(Tensor[(12, 4, 12), float32],) */;
  %620 = %619.0;
  %621 = cast(%var_6509, dtype="float32") /* ty=Tensor[(12, 4, 12), float32] */;
  %622 = shape_of(%620, dtype="int32") /* ty=Tensor[(3), int32] */;
  %623 = cast(%620, dtype="float32") /* ty=Tensor[(12, 4, 12), float32] */;
  %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %625 = mod(%623, %624) /* ty=Tensor[(12, 4, 12), float32] */;
  %626 = cast(%625, dtype="float32") /* ty=Tensor[(12, 4, 12), float32] */;
  %627 = @func_4678() /* ty=(Tensor[(13, 16, 2), float64],) */;
  %628 = sqrt(%626) /* ty=Tensor[(12, 4, 12), float32] */;
  %629 = %627.0;
  (%628, %629)
}

def @func_6213(%var_6209: uint64, %var_6210: Tensor[(7), uint64], %var_6211: Tensor[(360), uint64], %var_6212: Tensor[(576), int8]) -> (Tensor[(13, 16, 2), bool], Tensor[(3, 7), float64], uint64, Tensor[(7), uint64], Tensor[(360), uint64], Tensor[(576), int8]) {
  %643 = fn (%var_6203: uint64, %var_6204: Tensor[(7), uint64], %var_6205: Tensor[(360), uint64], %var_6206: Tensor[(576), int8]) -> (Tensor[(13, 16, 2), bool], Tensor[(3, 7), float64], uint64, Tensor[(7), uint64], Tensor[(360), uint64], Tensor[(576), int8]) {
    %630 = cast(%var_6203, dtype="uint64") /* ty=uint64 */;
    %631 = cast(%var_6204, dtype="uint64") /* ty=Tensor[(7), uint64] */;
    %632 = cast(%var_6205, dtype="uint64") /* ty=Tensor[(360), uint64] */;
    %633 = cast(%var_6205, dtype="bool") /* ty=Tensor[(360), bool] */;
    %634 = cast(%var_6206, dtype="int8") /* ty=Tensor[(576), int8] */;
    %635 = reshape(%630, newshape=[]) /* ty=uint64 */;
    %636 = reshape(%631, newshape=[7, 1]) /* ty=Tensor[(7, 1), uint64] */;
    %637 = reshape(%632, newshape=[15, 2, 12]) /* ty=Tensor[(15, 2, 12), uint64] */;
    %638 = reshape(%633, newshape=[15, 2, 12]) /* ty=Tensor[(15, 2, 12), bool] */;
    %639 = reshape(%634, newshape=[144, 4]) /* ty=Tensor[(144, 4), int8] */;
    %640 = @func_6081(%635, %636, %637, %638, %639) /* ty=(Tensor[(7, 1), uint64], Tensor[(3, 7), float64], Tensor[(15, 2, 12), uint8], Tensor[(13, 16, 2), bool], Tensor[(12, 4, 12), bool], Tensor[(144, 4), int8]) */;
    %641 = @func_5281() /* ty=Tensor[(13, 16, 2), bool] */;
    %642 = %640.1;
    (%641, %642, %var_6203, %var_6204, %var_6205, %var_6206)
  };
  %643(%var_6209, %var_6210, %var_6211, %var_6212) /* ty=(Tensor[(13, 16, 2), bool], Tensor[(3, 7), float64], uint64, Tensor[(7), uint64], Tensor[(360), uint64], Tensor[(576), int8]) */
}

def @func_4316() -> (Tensor[(416), float32],) {
  @func_4314() /* ty=(Tensor[(416), float32],) */
}

def @func_2050() -> Tensor[(13, 16, 2), float32] {
  @func_2048() /* ty=Tensor[(13, 16, 2), float32] */
}

def @func_2263() -> Tensor[(13, 16, 2), float32] {
  @func_2261() /* ty=Tensor[(13, 16, 2), float32] */
}

def @func_5750() -> (Tensor[(416), float32], Tensor[(11, 6, 7), float64]) {
  %647 = fn () -> (Tensor[(416), float32], Tensor[(11, 6, 7), float64]) {
    %644 = @func_5079() /* ty=(Tensor[(11, 6, 7), float64],) */;
    %645 = @func_3174() /* ty=Tensor[(416), float32] */;
    %646 = %644.0;
    (%645, %646)
  };
  %647() /* ty=(Tensor[(416), float32], Tensor[(11, 6, 7), float64]) */
}

def @func_2603() -> (Tensor[(13, 6, 12), float32],) {
  @func_2601() /* ty=(Tensor[(13, 6, 12), float32],) */
}

def @func_3247(%var_3246: Tensor[(14, 2, 14), float32]) -> (Tensor[(14, 2, 14), float32], Tensor[(14, 2, 14), float32]) {
  %652 = fn (%var_3232: Tensor[(14, 2, 14), float32]) -> (Tensor[(14, 2, 14), float32], Tensor[(14, 2, 14), float32]) {
    %648 = cast(%var_3232, dtype="float32") /* ty=Tensor[(14, 2, 14), float32] */;
    %649 = cast(%var_3232, dtype="float32") /* ty=Tensor[(14, 2, 14), float32] */;
    %650 = atanh(%648) /* ty=Tensor[(14, 2, 14), float32] */;
    %651 = erf(%649) /* ty=Tensor[(14, 2, 14), float32] */;
    (%650, %651)
  };
  %652(%var_3246) /* ty=(Tensor[(14, 2, 14), float32], Tensor[(14, 2, 14), float32]) */
}

def @func_6822() -> Tensor[(16, 10, 14), float64] {
  @func_6820() /* ty=Tensor[(16, 10, 14), float64] */
}

def @func_5158() -> (Tensor[(3, 7), float64], Tensor[(12, 4, 12), float32], Tensor[(576), int8]) {
  @func_5156() /* ty=(Tensor[(3, 7), float64], Tensor[(12, 4, 12), float32], Tensor[(576), int8]) */
}

def @func_5728(%var_5727: Tensor[(1, 11, 16), float32]) -> Tensor[(1, 11, 16), float32] {
  %654 = fn (%var_5715: Tensor[(1, 11, 16), float32]) -> Tensor[(1, 11, 16), float32] {
    %653 = cast(%var_5715, dtype="float32") /* ty=Tensor[(1, 11, 16), float32] */;
    rsqrt(%653) /* ty=Tensor[(1, 11, 16), float32] */
  };
  %654(%var_5727) /* ty=Tensor[(1, 11, 16), float32] */
}

def @func_6703(%var_6701: Tensor[(36, 2), float32], %var_6702: Tensor[(36, 2), float32]) -> (Tensor[(12, 4, 12), int8], Tensor[(13, 16, 2), float32], Tensor[(36, 2), float32]) {
  %666 = fn (%var_6684: Tensor[(36, 2), float32], %var_6686: Tensor[(36, 2), float32]) -> (Tensor[(12, 4, 12), int8], Tensor[(13, 16, 2), float32], Tensor[(36, 2), float32]) {
    %655 = @func_5008() /* ty=(Tensor[(12, 4, 12), int8], Tensor[(3, 7), float64]) */;
    %656 = cast(%var_6684, dtype="float32") /* ty=Tensor[(36, 2), float32] */;
    %657 = reshape(%656, newshape=[72]) /* ty=Tensor[(72), float32] */;
    %658 = @func_4868(%657) /* ty=(Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), float32], Tensor[(72), float32]) */;
    %659 = cast(%var_6686, dtype="float32") /* ty=Tensor[(36, 2), float32] */;
    %660 = shape_of(%var_6684, dtype="int32") /* ty=Tensor[(2), int32] */;
    %661 = cast(%var_6684, dtype="float32") /* ty=Tensor[(36, 2), float32] */;
    %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %663 = %655.0;
    %664 = %658.1;
    %665 = power(%661, %662) /* ty=Tensor[(36, 2), float32] */;
    (%663, %664, %665)
  };
  %666(%var_6701, %var_6702) /* ty=(Tensor[(12, 4, 12), int8], Tensor[(13, 16, 2), float32], Tensor[(36, 2), float32]) */
}

def @func_7906() -> Tensor[(13, 16, 2), float32] {
  @func_7904() /* ty=Tensor[(13, 16, 2), float32] */
}

def @func_3283() -> Tensor[(12, 4, 12), int8] {
  @func_3281() /* ty=Tensor[(12, 4, 12), int8] */
}

def @func_3690() -> (Tensor[(13, 16, 2), float64], Tensor[(13, 6, 12), float32], Tensor[(13, 16, 2), float64], Tensor[(13, 16, 2), float32]) {
  %667 = @func_2048() /* ty=Tensor[(13, 16, 2), float32] */;
  %668 = cast(%667, dtype="float32") /* ty=Tensor[(13, 16, 2), float32] */;
  %669 = cosh(%668) /* ty=Tensor[(13, 16, 2), float32] */;
  %670 = cast(%667, dtype="float64") /* ty=Tensor[(13, 16, 2), float64] */;
  %671 = shape_of(%669, dtype="int32") /* ty=Tensor[(3), int32] */;
  %672 = cast(%669, dtype="float64") /* ty=Tensor[(13, 16, 2), float64] */;
  %673 = dyn.reshape(%670, %671, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %674 = @func_2601() /* ty=(Tensor[(13, 6, 12), float32],) */;
  %675 = cast(%669, dtype="float64") /* ty=Tensor[(13, 16, 2), float64] */;
  %676 = atan(%675) /* ty=Tensor[(13, 16, 2), float64] */;
  %677 = cast(%676, dtype="float64") /* ty=Tensor[(13, 16, 2), float64] */;
  %678 = floor_divide(%672, %673) /* ty=Tensor[(13, 16, 2), float64] */;
  %679 = %674.0;
  %680 = asin(%677) /* ty=Tensor[(13, 16, 2), float64] */;
  %681 = @func_2048() /* ty=Tensor[(13, 16, 2), float32] */;
  (%678, %679, %680, %681)
}

def @func_6667() -> (Tensor[(13, 16, 2), float32],) {
  @func_6665() /* ty=(Tensor[(13, 16, 2), float32],) */
}

def @func_4871(%var_4869: Tensor[(72), float32]) -> (Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), float32], Tensor[(72), float32]) {
  @func_4868(%var_4869) /* ty=(Tensor[(12, 4, 12), int32], Tensor[(13, 16, 2), float32], Tensor[(72), float32]) */
}

def @func_2429() -> (Tensor[(12, 4, 12), int32],) {
  %682 = @func_1305() /* ty=(Tensor[(12, 4, 12), int32],) */;
  %683 = %682.0;
  (%683,)
}

def @func_2766(%var_2764: Tensor[(12, 4, 12), int32]) -> (Tensor[(12, 4, 12), bool],) {
  @func_2763(%var_2764) /* ty=(Tensor[(12, 4, 12), bool],) */
}

def @func_3163(%var_3160: Tensor[(36, 2), float32], %var_3161: Tensor[(12, 4, 12), int32], %var_3162: Tensor[(36, 2), float32]) -> (Tensor[(13, 16, 2), float32], Tensor[(13, 16, 2), float32], Tensor[(12, 4, 12), float32], Tensor[(36, 2), float64]) {
  @func_3158(%var_3160, %var_3161, %var_3162) /* ty=(Tensor[(13, 16, 2), float32], Tensor[(13, 16, 2), float32], Tensor[(12, 4, 12), float32], Tensor[(36, 2), float64]) */
}

def @func_6587(%var_6585: Tensor[(12, 4, 12), float32]) -> (Tensor[(12, 4, 12), float32], Tensor[(13, 16, 2), float64]) {
  @func_6584(%var_6585) /* ty=(Tensor[(12, 4, 12), float32], Tensor[(13, 16, 2), float64]) */
}

def @func_6425(%var_6424: Tensor[(14, 8, 10), uint64]) -> (Tensor[(14, 8, 10), float32], Tensor[(12, 4, 12), int32]) {
  %696 = fn (%var_6386: Tensor[(14, 8, 10), uint64]) -> (Tensor[(14, 8, 10), float32], Tensor[(12, 4, 12), int32]) {
    %684 = cast(%var_6386, dtype="bool") /* ty=Tensor[(14, 8, 10), bool] */;
    %685 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(14, 8, 10), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %686 = cast(meta[relay.Constant][23] /* ty=Tensor[(14, 8, 10), uint64] */, dtype="bool") /* ty=Tensor[(14, 8, 10), bool] */;
    %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %688 = less(%686, %687) /* ty=Tensor[(14, 8, 10), bool] */;
    %689 = cast(meta[relay.Constant][23] /* ty=Tensor[(14, 8, 10), uint64] */, dtype="float32") /* ty=Tensor[(14, 8, 10), float32] */;
    %690 = shape_of(%688, dtype="int32") /* ty=Tensor[(3), int32] */;
    %691 = cast(%688, dtype="float32") /* ty=Tensor[(14, 8, 10), float32] */;
    %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %693 = @func_6283() /* ty=(Tensor[(11, 6, 7), float64], Tensor[(12, 4, 12), int32]) */;
    %694 = minimum(%691, %692) /* ty=Tensor[(14, 8, 10), float32] */;
    %695 = %693.1;
    (%694, %695)
  };
  %696(%var_6424) /* ty=(Tensor[(14, 8, 10), float32], Tensor[(12, 4, 12), int32]) */
}

def @func_7589() -> (Tensor[(13, 16, 2), int32],) {
  %697 = @func_7206() /* ty=(Tensor[(13, 16, 2), int32], Tensor[(13, 16, 2), bool], Tensor[(13, 16, 2), float32]) */;
  %698 = %697.0;
  (%698,)
}

def @func_6451() -> Tensor[(13, 16, 2), float32] {
  @func_6449() /* ty=Tensor[(13, 16, 2), float32] */
}

def @func_4731() -> (Tensor[(12, 4, 12), float64], Tensor[(12, 4, 12), int8], Tensor[(416), float32]) {
  %699 = @func_4168() /* ty=(Tensor[(12, 4, 12), int32],) */;
  %700 = %699.0;
  %701 = cast(%700, dtype="float64") /* ty=Tensor[(12, 4, 12), float64] */;
  %702 = @func_3309() /* ty=(Tensor[(12, 4, 12), int8],) */;
  %703 = tan(%701) /* ty=Tensor[(12, 4, 12), float64] */;
  %704 = %702.0;
  %705 = @func_3174() /* ty=Tensor[(416), float32] */;
  (%703, %704, %705)
}

def @func_5113() -> (Tensor[(11, 4, 3), bool],) {
  %713 = fn () -> (Tensor[(11, 4, 3), bool],) {
    %706 = cast(meta[relay.Constant][24] /* ty=Tensor[(11, 4, 3), float32] */, dtype="float32") /* ty=Tensor[(11, 4, 3), float32] */;
    %707 = cos(%706) /* ty=Tensor[(11, 4, 3), float32] */;
    %708 = cast(meta[relay.Constant][24] /* ty=Tensor[(11, 4, 3), float32] */, dtype="bool") /* ty=Tensor[(11, 4, 3), bool] */;
    %709 = shape_of(%707, dtype="int32") /* ty=Tensor[(3), int32] */;
    %710 = cast(%707, dtype="bool") /* ty=Tensor[(11, 4, 3), bool] */;
    %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %712 = greater_equal(%710, %711) /* ty=Tensor[(11, 4, 3), bool] */;
    (%712,)
  };
  %713() /* ty=(Tensor[(11, 4, 3), bool],) */
}

def @func_7206() -> (Tensor[(13, 16, 2), int32], Tensor[(13, 16, 2), bool], Tensor[(13, 16, 2), float32]) {
  %714 = @func_6449() /* ty=Tensor[(13, 16, 2), float32] */;
  %715 = cast(%714, dtype="float32") /* ty=Tensor[(13, 16, 2), float32] */;
  %716 = log(%715) /* ty=Tensor[(13, 16, 2), float32] */;
  %717 = cast(%716, dtype="float32") /* ty=Tensor[(13, 16, 2), float32] */;
  %718 = sqrt(%717) /* ty=Tensor[(13, 16, 2), float32] */;
  %719 = cast(%716, dtype="bool") /* ty=Tensor[(13, 16, 2), bool] */;
  %720 = shape_of(%718, dtype="int32") /* ty=Tensor[(3), int32] */;
  %721 = cast(%718, dtype="bool") /* ty=Tensor[(13, 16, 2), bool] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %723 = @func_1356() /* ty=Tensor[(13, 16, 2), int32] */;
  %724 = greater_equal(%721, %722) /* ty=Tensor[(13, 16, 2), bool] */;
  %725 = @func_3337() /* ty=Tensor[(13, 16, 2), float32] */;
  (%723, %724, %725)
}

def @func_4505() -> (Tensor[(13, 16, 2), float32],) {
  %726 = @func_2048() /* ty=Tensor[(13, 16, 2), float32] */;
  (%726,)
}

def @func_3759() -> Tensor[(13, 16, 2), int32] {
  @func_2382() /* ty=Tensor[(13, 16, 2), int32] */
}

def @func_2344() -> (Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32]) {
  %732 = fn () -> (Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32]) {
    %727 = @func_1916() /* ty=(Tensor[(12, 4, 12), int8], Tensor[(12, 4, 12), int32]) */;
    %728 = @func_1629() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32]) */;
    %729 = %727.1;
    %730 = %728.0;
    %731 = @func_1410() /* ty=Tensor[(12, 4, 12), int32] */;
    (%729, %730, %731)
  };
  %732() /* ty=(Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32], Tensor[(12, 4, 12), int32]) */
}

def @func_6284() -> (Tensor[(11, 6, 7), float64], Tensor[(12, 4, 12), int32]) {
  %736 = fn () -> (Tensor[(11, 6, 7), float64], Tensor[(12, 4, 12), int32]) {
    %733 = @func_5749() /* ty=(Tensor[(416), float32], Tensor[(11, 6, 7), float64]) */;
    %734 = %733.1;
    %735 = @func_4183() /* ty=Tensor[(12, 4, 12), int32] */;
    (%734, %735)
  };
  %736() /* ty=(Tensor[(11, 6, 7), float64], Tensor[(12, 4, 12), int32]) */
}

def @func_4897() -> (Tensor[(12, 4, 12), int8],) {
  %737 = @func_3281() /* ty=Tensor[(12, 4, 12), int8] */;
  (%737,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen140/build/output.py", line 2265, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:52:40] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

