==========mod==========
#[version = "0.0.5"]
def @func_5840() -> Tensor[(15, 4, 4), float32] {
  @func_2457() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_1397() -> Tensor[(15, 4, 4), float32] {
  %0 = @func_752() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %0.0
}

def @func_2659() -> Tensor[(15, 4, 4), float32] {
  %1 = @func_1577() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %1.0
}

def @func_6372(%var_6359: Tensor[(2, 10, 4), float32], %var_6360: Tensor[(2, 10, 4), float32]) -> (Tensor[(2, 10, 4), float32], Tensor[(2, 10, 4), float32]) {
  %2 = cast(%var_6360, dtype="float32") /* ty=Tensor[(2, 10, 4), float32] */;
  %3 = shape_of(%var_6359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%var_6359, dtype="float32") /* ty=Tensor[(2, 10, 4), float32] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %6 = cast(%var_6359, dtype="float32") /* ty=Tensor[(2, 10, 4), float32] */;
  %7 = divide(%4, %5) /* ty=Tensor[(2, 10, 4), float32] */;
  %8 = rsqrt(%6) /* ty=Tensor[(2, 10, 4), float32] */;
  (%7, %8)
}

def @func_1430() -> (Tensor[(15, 4, 4), float32], Tensor[(672), float64]) {
  %9 = @func_752() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %10 = %9.0;
  %11 = cast(%10, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %12 = @func_1227() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(16, 14, 3), float64]) */;
  %13 = atan(%11) /* ty=Tensor[(15, 4, 4), float32] */;
  %14 = %12.1;
  (%13, %14)
}

def @func_10898(%var_10838: Tensor[(66), int64], %var_10862: Tensor[(416), int32]) -> (Tensor[(66), int32], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), uint32], Tensor[(13, 2, 16), float64], Tensor[(416), int32], Tensor[(16, 3, 13), float64]) {
  %15 = @func_9914() /* ty=(Tensor[(66), int64],) */;
  %16 = %15.0;
  %17 = cast(%var_10838, dtype="int32") /* ty=Tensor[(66), int32] */;
  %18 = shape_of(%16, dtype="int32") /* ty=Tensor[(1), int32] */;
  %19 = cast(%16, dtype="int32") /* ty=Tensor[(66), int32] */;
  %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?), int32] */;
  %21 = @func_3629() /* ty=Tensor[(15, 4, 4), float32] */;
  %22 = cast(%21, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %23 = reshape(%22, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float32] */;
  %24 = cast(%var_10862, dtype="int32") /* ty=Tensor[(416), int32] */;
  %25 = reshape(%24, newshape=[13, 2, 16]) /* ty=Tensor[(13, 2, 16), int32] */;
  %26 = @func_5375(%25) /* ty=(Tensor[(13, 2, 16), float64],) */;
  %27 = @func_1476() /* ty=(Tensor[(13, 2, 16), int32], Tensor[(2, 14, 13), float64], Tensor[(15, 4, 4), float32], Tensor[(16, 3, 13), float64], Tensor[(624), float64], Tensor[(66), int64], Tensor[(15, 4, 4), float32]) */;
  %28 = maximum(%19, %20) /* ty=Tensor[(66), int32] */;
  %29 = @func_2031(%23) /* ty=Tensor[(15, 4, 4), uint32] */;
  %30 = %26.0;
  %31 = %27.3;
  (%28, %21, %29, %30, %var_10862, %31)
}

def @func_7099(%var_7067: Tensor[(13, 2, 16), int32]) -> (Tensor[(672), float64], Tensor[(13, 2, 16), uint32]) {
  %32 = @func_4166() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
  %33 = @func_6992() /* ty=(Tensor[(13, 2, 16), int32],) */;
  %34 = %33.0;
  %35 = cast(%var_7067, dtype="uint32") /* ty=Tensor[(13, 2, 16), uint32] */;
  %36 = shape_of(%34, dtype="int32") /* ty=Tensor[(3), int32] */;
  %37 = cast(%34, dtype="uint32") /* ty=Tensor[(13, 2, 16), uint32] */;
  %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %39 = %32.1;
  %40 = bitwise_and(%37, %38) /* ty=Tensor[(13, 2, 16), uint32] */;
  (%39, %40)
}

def @func_7727() -> (Tensor[(15, 4, 4), float32], Tensor[(672), float64]) {
  %41 = @func_5289() /* ty=(Tensor[(672), float64], Tensor[(672), float64]) */;
  %42 = @func_2457() /* ty=Tensor[(15, 4, 4), float32] */;
  %43 = %41.1;
  (%42, %43)
}

def @func_1476() -> (Tensor[(13, 2, 16), int32], Tensor[(2, 14, 13), float64], Tensor[(15, 4, 4), float32], Tensor[(16, 3, 13), float64], Tensor[(624), float64], Tensor[(66), int64], Tensor[(15, 4, 4), float32]) {
  %44 = @func_1161() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32]) */;
  %45 = @func_1367() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(2, 14, 13), int16], Tensor[(672), float64], Tensor[(182, 2), float32]) */;
  %46 = %45.1;
  %47 = cast(%46, dtype="float64") /* ty=Tensor[(2, 14, 13), float64] */;
  %48 = @func_1430() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
  %49 = cast(meta[relay.Constant][0] /* ty=Tensor[(624), float64] */, dtype="float64") /* ty=Tensor[(624), float64] */;
  %50 = cast(meta[relay.Constant][1] /* ty=Tensor[(66), int64] */, dtype="int64") /* ty=Tensor[(66), int64] */;
  %51 = reshape(%49, newshape=[16, 3, 13]) /* ty=Tensor[(16, 3, 13), float64] */;
  %52 = reshape(%50, newshape=[1, 66]) /* ty=Tensor[(1, 66), int64] */;
  %53 = @func_1096(%51, %52) /* ty=(Tensor[(16, 3, 13), float64], Tensor[(11, 1, 6), bool], Tensor[(1, 66), int64], Tensor[(15, 4, 4), float32]) */;
  %54 = %44.1;
  %55 = sqrt(%47) /* ty=Tensor[(2, 14, 13), float64] */;
  %56 = %48.0;
  %57 = %53.0;
  %58 = @func_871() /* ty=Tensor[(15, 4, 4), float32] */;
  (%54, %55, %56, %57, meta[relay.Constant][0] /* ty=Tensor[(624), float64] */, meta[relay.Constant][1] /* ty=Tensor[(66), int64] */, %58)
}

def @func_9586() -> (Tensor[(15, 4, 4), float32], Tensor[(13, 4, 10), float32], Tensor[(520), float64]) {
  %59 = cast(meta[relay.Constant][2] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
  %60 = reshape(%59, newshape=[520]) /* ty=Tensor[(520), float32] */;
  %61 = @func_6883(%60) /* ty=(Tensor[(15, 4, 4), bool], Tensor[(15, 4, 4), float32], Tensor[(13, 4, 10), float32], Tensor[(520), float32]) */;
  %62 = cast(meta[relay.Constant][2] /* ty=Tensor[(520), float32] */, dtype="float64") /* ty=Tensor[(520), float64] */;
  %63 = @func_3199() /* ty=Tensor[(15, 4, 4), float32] */;
  %64 = %61.2;
  %65 = cos(%62) /* ty=Tensor[(520), float64] */;
  (%63, %64, %65)
}

def @func_8172() -> (Tensor[(15, 4, 4), float32], Tensor[(4, 104), int64], Tensor[(13, 2, 16), int32], Tensor[(13, 2, 16), float32]) {
  %66 = @func_7317() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %67 = cast(meta[relay.Constant][3] /* ty=Tensor[(4, 104), int64] */, dtype="int64") /* ty=Tensor[(4, 104), int64] */;
  %68 = reshape(%67, newshape=[13, 2, 16]) /* ty=Tensor[(13, 2, 16), int64] */;
  %69 = @func_915(%68) /* ty=Tensor[(13, 2, 16), bool] */;
  %70 = cast(%69, dtype="float32") /* ty=Tensor[(13, 2, 16), float32] */;
  %71 = %66.1;
  %72 = @func_4538() /* ty=Tensor[(13, 2, 16), int32] */;
  %73 = atan(%70) /* ty=Tensor[(13, 2, 16), float32] */;
  (%71, meta[relay.Constant][3] /* ty=Tensor[(4, 104), int64] */, %72, %73)
}

def @func_11040(%var_10967: Tensor[(2, 208), int32]) -> (Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(2, 208), float32], Tensor[(2, 208), float64], Tensor[(2, 208), bool], Tensor[(15, 4, 4), float32]) {
  %74 = @func_7708() /* ty=(Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), uint32]) */;
  %75 = cast(%var_10967, dtype="int32") /* ty=Tensor[(2, 208), int32] */;
  %76 = reshape(%75, newshape=[13, 2, 16]) /* ty=Tensor[(13, 2, 16), int32] */;
  %77 = @func_1529(%76) /* ty=(Tensor[(13, 2, 16), bool],) */;
  %78 = %77.0;
  %79 = cast(%78, dtype="float64") /* ty=Tensor[(13, 2, 16), float64] */;
  %80 = shape_of(%var_10967, dtype="int32") /* ty=Tensor[(2), int32] */;
  %81 = cast(%var_10967, dtype="float64") /* ty=Tensor[(2, 208), float64] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %83 = power(%81, %82) /* ty=Tensor[(2, 208), float64] */;
  %84 = cast(%var_10967, dtype="float32") /* ty=Tensor[(2, 208), float32] */;
  %85 = shape_of(%83, dtype="int32") /* ty=Tensor[(2), int32] */;
  %86 = cast(%83, dtype="float32") /* ty=Tensor[(2, 208), float32] */;
  %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %88 = cast(%var_10967, dtype="float64") /* ty=Tensor[(2, 208), float64] */;
  %89 = erf(%88) /* ty=Tensor[(2, 208), float64] */;
  %90 = cast(%89, dtype="float64") /* ty=Tensor[(2, 208), float64] */;
  %91 = cast(meta[relay.Constant][4] /* ty=Tensor[(2, 208), float64] */, dtype="bool") /* ty=Tensor[(2, 208), bool] */;
  %92 = shape_of(%89, dtype="int32") /* ty=Tensor[(2), int32] */;
  %93 = cast(%89, dtype="bool") /* ty=Tensor[(2, 208), bool] */;
  %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %95 = @func_2576() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %96 = @func_7232() /* ty=Tensor[(15, 4, 4), float32] */;
  %97 = %74.0;
  %98 = mod(%86, %87) /* ty=Tensor[(2, 208), float32] */;
  %99 = sigmoid(%90) /* ty=Tensor[(2, 208), float64] */;
  %100 = greater(%93, %94) /* ty=Tensor[(2, 208), bool] */;
  %101 = %95.1;
  (%96, %97, %98, %99, %100, %101)
}

def @func_9609() -> Tensor[(15, 4, 4), float32] {
  %102 = @func_8798() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %102.0
}

def @func_2576() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  %103 = @func_1686() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %104 = @func_1634() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %105 = %103.0;
  %106 = %104.0;
  (%105, %106)
}

def @func_1328(%var_1317: Tensor[(14, 9, 3), float64]) -> Tensor[(14, 9, 3), bool] {
  %107 = cast(%var_1317, dtype="float64") /* ty=Tensor[(14, 9, 3), float64] */;
  %108 = atan(%107) /* ty=Tensor[(14, 9, 3), float64] */;
  %109 = cast(%108, dtype="bool") /* ty=Tensor[(14, 9, 3), bool] */;
  %110 = shape_of(%var_1317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %111 = cast(%var_1317, dtype="bool") /* ty=Tensor[(14, 9, 3), bool] */;
  %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%111, %112) /* ty=Tensor[(14, 9, 3), bool] */
}

def @func_8467() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  %113 = @func_5486() /* ty=Tensor[(15, 4, 4), float32] */;
  %114 = @func_3199() /* ty=Tensor[(15, 4, 4), float32] */;
  (%113, %114)
}

def @func_7612() -> (Tensor[(15, 4, 4), float32],) {
  %115 = @func_3033() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %116 = %115.0;
  (%116,)
}

def @func_6277(%var_6270: Tensor[(8, 1, 5), float32]) -> (Tensor[(8, 1, 5), float32],) {
  %117 = cast(%var_6270, dtype="float32") /* ty=Tensor[(8, 1, 5), float32] */;
  %118 = exp(%117) /* ty=Tensor[(8, 1, 5), float32] */;
  (%118,)
}

def @func_10364() -> Tensor[(672), float64] {
  %119 = @func_5071() /* ty=(Tensor[(364), int16], Tensor[(672), float64]) */;
  %119.1
}

def @func_1302(%var_1297: Tensor[(7, 6, 15), uint32]) -> Tensor[(7, 6, 15), bool] {
  %120 = cast(meta[relay.Constant][5] /* ty=Tensor[(7, 6, 15), uint32] */, dtype="bool") /* ty=Tensor[(7, 6, 15), bool] */;
  %121 = shape_of(%var_1297, dtype="int32") /* ty=Tensor[(3), int32] */;
  %122 = cast(%var_1297, dtype="bool") /* ty=Tensor[(7, 6, 15), bool] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%122, %123) /* ty=Tensor[(7, 6, 15), bool] */
}

def @func_7008() -> Tensor[(15, 4, 4), float32] {
  @func_2256() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_2256() -> Tensor[(15, 4, 4), float32] {
  @func_1397() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_4896() -> (Tensor[(672), float64],) {
  %124 = @func_4238() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(416), int32], Tensor[(672), float64]) */;
  %125 = %124.2;
  (%125,)
}

def @func_1096(%var_1065: Tensor[(16, 3, 13), float64], %var_1077: Tensor[(1, 66), int64]) -> (Tensor[(16, 3, 13), float64], Tensor[(11, 1, 6), bool], Tensor[(1, 66), int64], Tensor[(15, 4, 4), float32]) {
  %126 = cast(%var_1065, dtype="float64") /* ty=Tensor[(16, 3, 13), float64] */;
  %127 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(16, 3, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %128 = cast(meta[relay.Constant][6] /* ty=Tensor[(16, 3, 13), float64] */, dtype="float64") /* ty=Tensor[(16, 3, 13), float64] */;
  %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %130 = cast(%var_1077, dtype="int64") /* ty=Tensor[(1, 66), int64] */;
  %131 = reshape(%130, newshape=[11, 1, 6]) /* ty=Tensor[(11, 1, 6), int64] */;
  %132 = @func_986(%131) /* ty=(Tensor[(11, 1, 6), bool],) */;
  %133 = @func_752() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %134 = subtract(%128, %129) /* ty=Tensor[(16, 3, 13), float64] */;
  %135 = %132.0;
  %136 = %133.0;
  (%134, %135, %var_1077, %136)
}

def @func_6472() -> (Tensor[(15, 4, 4), float32], Tensor[(672), float64]) {
  %137 = @func_1634() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %138 = %137.0;
  %139 = @func_4040() /* ty=Tensor[(672), float64] */;
  (%138, %139)
}

def @func_1913() -> (Tensor[(2, 14, 13), int16], Tensor[(364), int16], Tensor[(15, 4, 4), float32]) {
  %140 = cast(meta[relay.Constant][7] /* ty=Tensor[(364), int16] */, dtype="int16") /* ty=Tensor[(364), int16] */;
  %141 = reshape(%140, newshape=[2, 14, 13]) /* ty=Tensor[(2, 14, 13), int16] */;
  %142 = @func_642(%141) /* ty=(Tensor[(2, 14, 13), int16],) */;
  %143 = @func_1577() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %144 = %143.0;
  %145 = cast(%144, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %146 = %142.0;
  %147 = log10(%145) /* ty=Tensor[(15, 4, 4), float32] */;
  (%146, meta[relay.Constant][7] /* ty=Tensor[(364), int16] */, %147)
}

def @func_618(%var_604: Tensor[(16, 14, 3), float64]) -> (Tensor[(16, 14, 3), float64],) {
  %148 = cast(%var_604, dtype="float64") /* ty=Tensor[(16, 14, 3), float64] */;
  %149 = tan(%148) /* ty=Tensor[(16, 14, 3), float64] */;
  (%149,)
}

def @func_5170(%var_5157: Tensor[(350, 1), float32]) -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(5, 10, 7), float32], Tensor[(350, 364), float32], Tensor[(15, 4, 4), float32]) {
  %150 = @func_1577() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %151 = @func_4238() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(416), int32], Tensor[(672), float64]) */;
  %152 = cast(%var_5157, dtype="float32") /* ty=Tensor[(350, 1), float32] */;
  %153 = cast(%var_5157, dtype="float32") /* ty=Tensor[(350, 1), float32] */;
  %154 = reshape(%152, newshape=[5, 10, 7]) /* ty=Tensor[(5, 10, 7), float32] */;
  %155 = reshape(%153, newshape=[5, 10, 7]) /* ty=Tensor[(5, 10, 7), float32] */;
  %156 = @func_3257(%154, %155) /* ty=(Tensor[(5, 10, 7), float32], Tensor[(15, 4, 4), float64], Tensor[(240), float32], Tensor[(5, 10, 7), bool]) */;
  %157 = @func_5071() /* ty=(Tensor[(364), int16], Tensor[(672), float64]) */;
  %158 = %157.0;
  %159 = cast(%var_5157, dtype="float32") /* ty=Tensor[(350, 1), float32] */;
  %160 = cast(%158, dtype="float32") /* ty=Tensor[(364), float32] */;
  %161 = @func_752() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %162 = %150.0;
  %163 = @func_2193() /* ty=Tensor[(15, 4, 4), float32] */;
  %164 = %151.2;
  %165 = %156.0;
  %166 = divide(%159, %160) /* ty=Tensor[(350, 364), float32] */;
  %167 = %161.0;
  (%162, %163, %164, %165, %166, %167)
}

def @func_11204(%var_11195: Tensor[(350), float32]) -> (Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32], Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(350), bool]) {
  %168 = @func_7864() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(15, 4, 4), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %169 = cast(meta[relay.Constant][8] /* ty=Tensor[(350), float32] */, dtype="float32") /* ty=Tensor[(350), float32] */;
  %170 = reshape(%169, newshape=[350, 1]) /* ty=Tensor[(350, 1), float32] */;
  %171 = @func_5170(%170) /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(5, 10, 7), float32], Tensor[(350, 364), float32], Tensor[(15, 4, 4), float32]) */;
  %172 = cast(%var_11195, dtype="bool") /* ty=Tensor[(350), bool] */;
  %173 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(350), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %174 = cast(meta[relay.Constant][8] /* ty=Tensor[(350), float32] */, dtype="bool") /* ty=Tensor[(350), bool] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?), bool] */;
  %176 = @func_10039() /* ty=Tensor[(15, 4, 4), float32] */;
  %177 = @func_2926() /* ty=Tensor[(13, 2, 16), int32] */;
  %178 = %168.1;
  %179 = %171.1;
  %180 = less(%174, %175) /* ty=Tensor[(350), bool] */;
  (%176, %177, %178, %179, %180)
}

def @func_7450(%var_7402: Tensor[(15, 4), uint32]) -> (Tensor[(15, 4, 4), float32], uint32, Tensor[(15, 4), uint32], Tensor[(8, 4, 15), int32], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(364), int16]) {
  %181 = cast(meta[relay.Constant][9] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %182 = cast(%var_7402, dtype="uint32") /* ty=Tensor[(15, 4), uint32] */;
  %183 = reshape(%181, newshape=[]) /* ty=uint32 */;
  %184 = reshape(%182, newshape=[2, 10, 3]) /* ty=Tensor[(2, 10, 3), uint32] */;
  %185 = @func_4993(%183, %184) /* ty=(Tensor[(2, 10, 3), uint32], Tensor[(15, 4, 4), float32]) */;
  %186 = cast(meta[relay.Constant][10] /* ty=Tensor[(8, 4, 15), float32] */, dtype="float32") /* ty=Tensor[(8, 4, 15), float32] */;
  %187 = cos(%186) /* ty=Tensor[(8, 4, 15), float32] */;
  %188 = cast(meta[relay.Constant][10] /* ty=Tensor[(8, 4, 15), float32] */, dtype="int32") /* ty=Tensor[(8, 4, 15), int32] */;
  %189 = shape_of(%187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %190 = cast(%187, dtype="int32") /* ty=Tensor[(8, 4, 15), int32] */;
  %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %192 = @func_1430() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
  %193 = @func_6472() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
  %194 = @func_5312() /* ty=(Tensor[(364), int16],) */;
  %195 = %185.1;
  %196 = right_shift(%190, %191) /* ty=Tensor[(8, 4, 15), int32] */;
  %197 = %192.0;
  %198 = %193.0;
  %199 = %194.0;
  (%195, meta[relay.Constant][9] /* ty=uint32 */, %var_7402, %196, %197, %198, %199)
}

def @func_9141() -> (Tensor[(672), float64],) {
  %200 = @func_8688() /* ty=Tensor[(672), float64] */;
  (%200,)
}

def @func_6186(%var_6177: Tensor[(10, 1, 2), int32], %var_6178: Tensor[(10, 5, 2), int32], %var_6184: Tensor[(4, 84), float64]) -> (Tensor[(10, 5, 2), int32], Tensor[(7, 4, 12), float64], Tensor[(4, 84), float64]) {
  %201 = cast(%var_6177, dtype="int32") /* ty=Tensor[(10, 1, 2), int32] */;
  %202 = cast(%var_6178, dtype="int32") /* ty=Tensor[(10, 5, 2), int32] */;
  %203 = cast(%var_6184, dtype="float64") /* ty=Tensor[(4, 84), float64] */;
  %204 = reshape(%203, newshape=[7, 4, 12]) /* ty=Tensor[(7, 4, 12), float64] */;
  %205 = @func_572(%204) /* ty=(Tensor[(7, 4, 12), float64],) */;
  %206 = right_shift(%201, %202) /* ty=Tensor[(10, 5, 2), int32] */;
  %207 = %205.0;
  (%206, %207, %var_6184)
}

def @func_9914() -> (Tensor[(66), int64],) {
  %208 = @func_3841() /* ty=Tensor[(66), int64] */;
  (%208,)
}

def @func_6098(%var_6071: Tensor[(15, 9, 12), float32]) -> (Tensor[(15, 9, 12), float32], Tensor[(13, 2, 16), int32], Tensor[(7, 4, 12), float64], Tensor[(624), float64], Tensor[(66), int64]) {
  %209 = cast(%var_6071, dtype="float32") /* ty=Tensor[(15, 9, 12), float32] */;
  %210 = cast(meta[relay.Constant][11] /* ty=Tensor[(624), float64] */, dtype="float64") /* ty=Tensor[(624), float64] */;
  %211 = cast(meta[relay.Constant][12] /* ty=Tensor[(66), int64] */, dtype="int64") /* ty=Tensor[(66), int64] */;
  %212 = cast(meta[relay.Constant][11] /* ty=Tensor[(624), float64] */, dtype="float64") /* ty=Tensor[(624), float64] */;
  %213 = reshape(%210, newshape=[24, 26]) /* ty=Tensor[(24, 26), float64] */;
  %214 = reshape(%211, newshape=[66]) /* ty=Tensor[(66), int64] */;
  %215 = reshape(%212, newshape=[24, 26]) /* ty=Tensor[(24, 26), float64] */;
  %216 = @func_2896(%213, %214, %215) /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(66), int64], Tensor[(182, 2), float32], Tensor[(15, 4, 4), float64], Tensor[(7, 4, 12), float64], Tensor[(4, 84), float64], Tensor[(24, 26), int32], Tensor[(15, 4, 4), float32]) */;
  %217 = cosh(%209) /* ty=Tensor[(15, 9, 12), float32] */;
  %218 = @func_2926() /* ty=Tensor[(13, 2, 16), int32] */;
  %219 = %216.5;
  (%217, %218, %219, meta[relay.Constant][11] /* ty=Tensor[(624), float64] */, meta[relay.Constant][12] /* ty=Tensor[(66), int64] */)
}

def @func_1503(%var_1491: Tensor[(15, 4, 4), float32]) -> Tensor[(15, 4, 4), float64] {
  %220 = @func_719() /* ty=Tensor[(15, 4, 4), float32] */;
  %221 = cast(%var_1491, dtype="float64") /* ty=Tensor[(15, 4, 4), float64] */;
  %222 = shape_of(%220, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(%220, dtype="float64") /* ty=Tensor[(15, 4, 4), float64] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%223, %224) /* ty=Tensor[(15, 4, 4), float64] */
}

def @func_9049() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), uint32]) {
  %225 = @func_2371() /* ty=Tensor[(15, 4, 4), float32] */;
  %226 = cast(%225, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %227 = reshape(%226, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float32] */;
  %228 = @func_2031(%227) /* ty=Tensor[(15, 4, 4), uint32] */;
  (%225, %228)
}

def @func_3746() -> (Tensor[(15, 4, 4), float32],) {
  %229 = @func_1430() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
  %230 = %229.0;
  (%230,)
}

def @func_1735() -> (Tensor[(672), float64],) {
  %231 = @func_1227() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(16, 14, 3), float64]) */;
  %232 = %231.1;
  (%232,)
}

def @func_3349(%var_3310: Tensor[(6, 1, 11), bool]) -> (Tensor[(6, ?, 11), bool], Tensor[(15, 4, 4), float32]) {
  %233 = cast(%var_3310, dtype="float64") /* ty=Tensor[(6, 1, 11), float64] */;
  %234 = asin(%233) /* ty=Tensor[(6, 1, 11), float64] */;
  %235 = cast(%var_3310, dtype="bool") /* ty=Tensor[(6, 1, 11), bool] */;
  %236 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(6, 1, 11), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %237 = cast(meta[relay.Constant][13] /* ty=Tensor[(6, 1, 11), bool] */, dtype="bool") /* ty=Tensor[(6, 1, 11), bool] */;
  %238 = dyn.reshape(%235, %236, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %239 = logical_and(%237, %238) /* ty=Tensor[(6, ?, 11), bool] */;
  %240 = cast(%239, dtype="bool") /* ty=Tensor[(6, ?, 11), bool] */;
  %241 = shape_of(%234, dtype="int32") /* ty=Tensor[(3), int32] */;
  %242 = cast(%234, dtype="bool") /* ty=Tensor[(6, 1, 11), bool] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %244 = not_equal(%242, %243) /* ty=Tensor[(6, ?, 11), bool] */;
  %245 = @func_719() /* ty=Tensor[(15, 4, 4), float32] */;
  (%244, %245)
}

def @func_10039() -> Tensor[(15, 4, 4), float32] {
  %246 = @func_8616() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), float64]) */;
  %246.0
}

def @func_5786() -> (Tensor[(15, 4, 4), float32],) {
  %247 = @func_871() /* ty=Tensor[(15, 4, 4), float32] */;
  (%247,)
}

def @func_6973() -> (Tensor[(364), int16],) {
  %248 = @func_5071() /* ty=(Tensor[(364), int16], Tensor[(672), float64]) */;
  %249 = %248.0;
  (%249,)
}

def @func_7864() -> (Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(15, 4, 4), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  %250 = @func_1686() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %251 = @func_1227() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(16, 14, 3), float64]) */;
  %252 = @func_5539() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %253 = %252.1;
  %254 = cast(%253, dtype="float64") /* ty=Tensor[(15, 4, 4), float64] */;
  %255 = @func_5508() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %256 = @func_7273() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %257 = %250.0;
  %258 = %251.1;
  %259 = sigmoid(%254) /* ty=Tensor[(15, 4, 4), float64] */;
  %260 = %255.0;
  %261 = %256.0;
  (%257, %258, %259, %260, %261)
}

def @func_2016() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(15, 4, 4), float32]) {
  %262 = @func_752() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %263 = @func_1430() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
  %264 = @func_1735() /* ty=(Tensor[(672), float64],) */;
  %265 = @func_1577() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %266 = %262.0;
  %267 = %263.0;
  %268 = %264.0;
  %269 = %265.0;
  (%266, %267, %268, %269)
}

def @func_3778(%var_3769: Tensor[(1, 3, 8), float64]) -> (Tensor[(1, 3, 8), float64], Tensor[(13, 2, 16), bool], Tensor[(416), int64]) {
  %270 = cast(%var_3769, dtype="float64") /* ty=Tensor[(1, 3, 8), float64] */;
  %271 = cast(meta[relay.Constant][14] /* ty=Tensor[(416), int64] */, dtype="int64") /* ty=Tensor[(416), int64] */;
  %272 = reshape(%271, newshape=[13, 2, 16]) /* ty=Tensor[(13, 2, 16), int64] */;
  %273 = sin(%270) /* ty=Tensor[(1, 3, 8), float64] */;
  %274 = @func_915(%272) /* ty=Tensor[(13, 2, 16), bool] */;
  (%273, %274, meta[relay.Constant][14] /* ty=Tensor[(416), int64] */)
}

def @func_9338() -> Tensor[(15, 4, 4), float32] {
  %275 = @func_5786() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %275.0
}

def @func_2614() -> Tensor[(15, 4, 4), float32] {
  %276 = @func_752() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %276.0
}

def @func_8798() -> (Tensor[(15, 4, 4), float32],) {
  %277 = @func_5420() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %278 = %277.0;
  (%278,)
}

def @func_8616() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), float64]) {
  %279 = @func_4886() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %280 = @func_4587() /* ty=(Tensor[(13, 2, 16), float64], Tensor[(13, 2, 16), float32], Tensor[(13, 2, 16), uint8]) */;
  %281 = @func_2614() /* ty=Tensor[(15, 4, 4), float32] */;
  %282 = %279.0;
  %283 = %280.0;
  (%281, %282, %283)
}

def @func_6406() -> Tensor[(10, 13, 16), float32] {
  %284 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 13, 16), float32] */, dtype="float32") /* ty=Tensor[(10, 13, 16), float32] */;
  cos(%284) /* ty=Tensor[(10, 13, 16), float32] */
}

def @func_10304() -> (Tensor[(672), float64], Tensor[(672), float64], Tensor[(416), int32], Tensor[(15, 4, 4), float32]) {
  %285 = @func_1430() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
  %286 = @func_5289() /* ty=(Tensor[(672), float64], Tensor[(672), float64]) */;
  %287 = @func_10204() /* ty=(Tensor[(416), int32], Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
  %288 = %285.1;
  %289 = %286.0;
  %290 = %287.0;
  %291 = @func_9609() /* ty=Tensor[(15, 4, 4), float32] */;
  (%288, %289, %290, %291)
}

def @func_4040() -> Tensor[(672), float64] {
  %292 = @func_2972() /* ty=(Tensor[(672), float64], Tensor[(15, 4, 4), float32]) */;
  %292.0
}

def @func_2896(%var_2845: Tensor[(24, 26), float64], %var_2846: Tensor[(66), int64], %var_2880: Tensor[(24, 26), float64]) -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(66), int64], Tensor[(182, 2), float32], Tensor[(15, 4, 4), float64], Tensor[(7, 4, 12), float64], Tensor[(4, 84), float64], Tensor[(24, 26), int32], Tensor[(15, 4, 4), float32]) {
  %293 = @func_752() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %294 = cast(%var_2845, dtype="float64") /* ty=Tensor[(24, 26), float64] */;
  %295 = cast(%var_2846, dtype="int64") /* ty=Tensor[(66), int64] */;
  %296 = reshape(%294, newshape=[16, 3, 13]) /* ty=Tensor[(16, 3, 13), float64] */;
  %297 = reshape(%295, newshape=[1, 66]) /* ty=Tensor[(1, 66), int64] */;
  %298 = @func_1096(%296, %297) /* ty=(Tensor[(16, 3, 13), float64], Tensor[(11, 1, 6), bool], Tensor[(1, 66), int64], Tensor[(15, 4, 4), float32]) */;
  %299 = @func_1367() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(2, 14, 13), int16], Tensor[(672), float64], Tensor[(182, 2), float32]) */;
  %300 = %293.0;
  %301 = cast(%300, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %302 = reshape(%301, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float32] */;
  %303 = cast(meta[relay.Constant][16] /* ty=Tensor[(4, 84), float64] */, dtype="float64") /* ty=Tensor[(4, 84), float64] */;
  %304 = reshape(%303, newshape=[7, 4, 12]) /* ty=Tensor[(7, 4, 12), float64] */;
  %305 = @func_572(%304) /* ty=(Tensor[(7, 4, 12), float64],) */;
  %306 = cast(%var_2880, dtype="int32") /* ty=Tensor[(24, 26), int32] */;
  %307 = shape_of(%var_2845, dtype="int32") /* ty=Tensor[(2), int32] */;
  %308 = cast(%var_2845, dtype="int32") /* ty=Tensor[(24, 26), int32] */;
  %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %310 = @func_2576() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %311 = %298.3;
  %312 = %299.3;
  %313 = @func_1503(%302) /* ty=Tensor[(15, 4, 4), float64] */;
  %314 = %305.0;
  %315 = add(%308, %309) /* ty=Tensor[(24, 26), int32] */;
  %316 = %310.1;
  (%300, %311, %var_2846, %312, %313, %314, meta[relay.Constant][16] /* ty=Tensor[(4, 84), float64] */, %315, %316)
}

def @func_10434() -> (Tensor[(672), float64], Tensor[(15, 4, 4), float32]) {
  %317 = @func_7864() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(15, 4, 4), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %318 = @func_9178() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %319 = %317.1;
  %320 = %318.0;
  (%319, %320)
}

def @func_3629() -> Tensor[(15, 4, 4), float32] {
  @func_719() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_5591() -> (Tensor[(672), float64], Tensor[(15, 4, 4), bool]) {
  %321 = @func_4166() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
  %322 = @func_3985() /* ty=(Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), bool]) */;
  %323 = %321.1;
  %324 = %322.2;
  (%323, %324)
}

def @func_8095() -> (Tensor[(672), float64],) {
  %325 = @func_5289() /* ty=(Tensor[(672), float64], Tensor[(672), float64]) */;
  %326 = %325.0;
  (%326,)
}

def @func_10662() -> (Tensor[(672), float64],) {
  %327 = @func_6031() /* ty=(Tensor[(672), float64],) */;
  %328 = %327.0;
  (%328,)
}

def @func_10654() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  %329 = @func_7727() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
  %330 = @func_719() /* ty=Tensor[(15, 4, 4), float32] */;
  %331 = %329.0;
  (%330, %331)
}

def @func_4748(%var_4738: Tensor[(13, 9, 2), float32], %var_4739: Tensor[(13, 9, 2), float32]) -> (Tensor[(13, 9, 2), float32],) {
  %332 = cast(%var_4739, dtype="float32") /* ty=Tensor[(13, 9, 2), float32] */;
  %333 = shape_of(%var_4738, dtype="int32") /* ty=Tensor[(3), int32] */;
  %334 = cast(%var_4738, dtype="float32") /* ty=Tensor[(13, 9, 2), float32] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %336 = minimum(%334, %335) /* ty=Tensor[(13, 9, 2), float32] */;
  (%336,)
}

def @func_7511(%var_7472: Tensor[(9, 6, 10), uint16], %var_7502: Tensor[(9, 6, 10), uint16]) -> (Tensor[(9, 6, 10), bool], Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(9, 6, 10), uint8]) {
  %337 = cast(%var_7472, dtype="bool") /* ty=Tensor[(9, 6, 10), bool] */;
  %338 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(9, 6, 10), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %339 = cast(meta[relay.Constant][17] /* ty=Tensor[(9, 6, 10), uint16] */, dtype="bool") /* ty=Tensor[(9, 6, 10), bool] */;
  %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %341 = @func_1430() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
  %342 = cast(%var_7502, dtype="uint8") /* ty=Tensor[(9, 6, 10), uint8] */;
  %343 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(9, 6, 10), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %344 = cast(meta[relay.Constant][17] /* ty=Tensor[(9, 6, 10), uint16] */, dtype="uint8") /* ty=Tensor[(9, 6, 10), uint8] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %346 = equal(%339, %340) /* ty=Tensor[(9, 6, 10), bool] */;
  %347 = @func_5840() /* ty=Tensor[(15, 4, 4), float32] */;
  %348 = %341.1;
  %349 = bitwise_and(%344, %345) /* ty=Tensor[(9, 6, 10), uint8] */;
  (%346, %347, %348, %349)
}

def @func_2031(%var_2024: Tensor[(15, 4, 4), float32]) -> Tensor[(15, 4, 4), uint32] {
  %350 = @func_1810() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %351 = %350.1;
  %352 = cast(%var_2024, dtype="uint32") /* ty=Tensor[(15, 4, 4), uint32] */;
  %353 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %354 = cast(%351, dtype="uint32") /* ty=Tensor[(15, 4, 4), uint32] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_or(%354, %355) /* ty=Tensor[(15, 4, 4), uint32] */
}

def @func_4238() -> (Tensor[(15, 4, 4), float32], Tensor[(416), int32], Tensor[(672), float64]) {
  %356 = @func_4155() /* ty=Tensor[(15, 4, 4), float32] */;
  %357 = cast(%356, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %358 = reshape(%357, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float32] */;
  %359 = @func_3540(%358) /* ty=(Tensor[(13, 2, 16), bool], Tensor[(416), int32], Tensor[(13, 2, 16), bool], Tensor[(15, 4, 4), int32]) */;
  %360 = @func_1735() /* ty=(Tensor[(672), float64],) */;
  %361 = %359.1;
  %362 = %360.0;
  (%356, %361, %362)
}

def @func_10538() -> (Tensor[(15, 4, 4), float32],) {
  %363 = @func_1430() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
  %364 = %363.0;
  (%364,)
}

def @func_6914() -> Tensor[(15, 4, 4), float32] {
  %365 = @func_2310() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %365.1
}

def @func_440(%var_401: float32, %var_402: Tensor[(3, 6, 11), float32]) -> (Tensor[(3, 6, 11), float32], Tensor[(3, 6, 11), float64]) {
  %366 = cast(%var_401, dtype="float32") /* ty=float32 */;
  %367 = cast(%var_402, dtype="float32") /* ty=Tensor[(3, 6, 11), float32] */;
  %368 = cast(%var_401, dtype="float32") /* ty=float32 */;
  %369 = cast(%var_402, dtype="float32") /* ty=Tensor[(3, 6, 11), float32] */;
  %370 = mod(%368, %369) /* ty=Tensor[(3, 6, 11), float32] */;
  %371 = cast(%var_402, dtype="float64") /* ty=Tensor[(3, 6, 11), float64] */;
  %372 = shape_of(%370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%370, dtype="float64") /* ty=Tensor[(3, 6, 11), float64] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %375 = power(%366, %367) /* ty=Tensor[(3, 6, 11), float32] */;
  %376 = floor_divide(%373, %374) /* ty=Tensor[(3, 6, 11), float64] */;
  (%375, %376)
}

def @func_3199() -> Tensor[(15, 4, 4), float32] {
  %377 = @func_2972() /* ty=(Tensor[(672), float64], Tensor[(15, 4, 4), float32]) */;
  %377.1
}

def @func_3985() -> (Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), bool]) {
  %378 = @func_1735() /* ty=(Tensor[(672), float64],) */;
  %379 = @func_2614() /* ty=Tensor[(15, 4, 4), float32] */;
  %380 = cast(%379, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %381 = reshape(%380, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float32] */;
  %382 = @func_3692(%381) /* ty=(Tensor[(15, 4, 4), bool], Tensor[(15, 4, 4), float32]) */;
  %383 = %378.0;
  %384 = %382.0;
  (%383, %379, %384)
}

def @func_1969(%var_1928: Tensor[(15, 4, 4), float32]) -> (Tensor[(15, 4, 4), bool], Tensor[(2, 14, 13), int16], Tensor[(91, 4), float64]) {
  %385 = @func_1810() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %386 = %385.0;
  %387 = cast(%var_1928, dtype="bool") /* ty=Tensor[(15, 4, 4), bool] */;
  %388 = shape_of(%386, dtype="int32") /* ty=Tensor[(3), int32] */;
  %389 = cast(%386, dtype="bool") /* ty=Tensor[(15, 4, 4), bool] */;
  %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %391 = cast(meta[relay.Constant][18] /* ty=Tensor[(91, 4), int16] */, dtype="int16") /* ty=Tensor[(91, 4), int16] */;
  %392 = reshape(%391, newshape=[2, 14, 13]) /* ty=Tensor[(2, 14, 13), int16] */;
  %393 = @func_642(%392) /* ty=(Tensor[(2, 14, 13), int16],) */;
  %394 = cast(meta[relay.Constant][18] /* ty=Tensor[(91, 4), int16] */, dtype="float64") /* ty=Tensor[(91, 4), float64] */;
  %395 = greater_equal(%389, %390) /* ty=Tensor[(15, 4, 4), bool] */;
  %396 = %393.0;
  %397 = acos(%394) /* ty=Tensor[(91, 4), float64] */;
  (%395, %396, %397)
}

def @func_6523(%var_6514: Tensor[(66), bool], %var_6515: Tensor[(336), float64]) -> (Tensor[(15, 4, 4), float32], Tensor[(8, 42), float64], Tensor[(66), bool], Tensor[(336), float64]) {
  %398 = @func_2072() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %399 = cast(%var_6514, dtype="bool") /* ty=Tensor[(66), bool] */;
  %400 = cast(%var_6515, dtype="float64") /* ty=Tensor[(336), float64] */;
  %401 = reshape(%399, newshape=[66]) /* ty=Tensor[(66), bool] */;
  %402 = reshape(%400, newshape=[8, 42]) /* ty=Tensor[(8, 42), float64] */;
  %403 = @func_3902(%401, %402) /* ty=(Tensor[(11, 14, 11), bool], Tensor[(15, 4, 4), float32], Tensor[(66), bool], Tensor[(15, 4, 4), float32], Tensor[(7, 4, 12), float64], Tensor[(8, 42), float64]) */;
  %404 = %398.1;
  %405 = %403.5;
  (%404, %405, %var_6514, %var_6515)
}

def @func_5420() -> (Tensor[(15, 4, 4), float32],) {
  %406 = @func_2371() /* ty=Tensor[(15, 4, 4), float32] */;
  (%406,)
}

def @func_11094(%var_11091: Tensor[(7, 7, 7), float32]) -> Tensor[(7, 7, 7), float32] {
  %407 = cast(%var_11091, dtype="float32") /* ty=Tensor[(7, 7, 7), float32] */;
  cosh(%407) /* ty=Tensor[(7, 7, 7), float32] */
}

def @func_8993() -> (Tensor[(672), float64],) {
  %408 = @func_4040() /* ty=Tensor[(672), float64] */;
  (%408,)
}

def @func_6019() -> (Tensor[(672), float64], Tensor[(15, 4, 4), float32]) {
  %409 = @func_2016() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(15, 4, 4), float32]) */;
  %410 = @func_3802() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %411 = %409.2;
  %412 = %410.0;
  (%411, %412)
}

def @func_10250() -> Tensor[(16, 3, 13), float32] {
  %413 = @func_1476() /* ty=(Tensor[(13, 2, 16), int32], Tensor[(2, 14, 13), float64], Tensor[(15, 4, 4), float32], Tensor[(16, 3, 13), float64], Tensor[(624), float64], Tensor[(66), int64], Tensor[(15, 4, 4), float32]) */;
  %414 = %413.3;
  %415 = cast(%414, dtype="float32") /* ty=Tensor[(16, 3, 13), float32] */;
  atan(%415) /* ty=Tensor[(16, 3, 13), float32] */
}

def @func_9730(%var_9725: Tensor[(416), int32]) -> (Tensor[(15, 4, 4), float32], Tensor[(416), uint64]) {
  %416 = @func_7273() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %417 = @func_4238() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(416), int32], Tensor[(672), float64]) */;
  %418 = %417.1;
  %419 = cast(%var_9725, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %420 = shape_of(%418, dtype="int32") /* ty=Tensor[(1), int32] */;
  %421 = cast(%418, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %423 = %416.0;
  %424 = logical_xor(%421, %422) /* ty=Tensor[(416), uint64] */;
  (%423, %424)
}

def @func_3137(%var_3125: Tensor[(11, 11, 12), uint32]) -> (Tensor[(11, 11, 12), uint32],) {
  %425 = cast(%var_3125, dtype="uint32") /* ty=Tensor[(11, 11, 12), uint32] */;
  %426 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(11, 11, 12), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %427 = cast(meta[relay.Constant][19] /* ty=Tensor[(11, 11, 12), uint32] */, dtype="uint32") /* ty=Tensor[(11, 11, 12), uint32] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %429 = bitwise_or(%427, %428) /* ty=Tensor[(11, 11, 12), uint32] */;
  (%429,)
}

def @func_8505() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), bool], Tensor[(15, 4, 4), float32]) {
  %430 = @func_8467() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %431 = %430.0;
  %432 = cast(%431, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %433 = reshape(%432, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float32] */;
  %434 = @func_3692(%433) /* ty=(Tensor[(15, 4, 4), bool], Tensor[(15, 4, 4), float32]) */;
  %435 = @func_6816() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %436 = %434.0;
  %437 = %435.0;
  (%431, %436, %437)
}

def @func_10204() -> (Tensor[(416), int32], Tensor[(15, 4, 4), float32], Tensor[(672), float64]) {
  %438 = @func_4238() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(416), int32], Tensor[(672), float64]) */;
  %439 = @func_6933() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %440 = %438.1;
  %441 = %439.0;
  %442 = @func_4040() /* ty=Tensor[(672), float64] */;
  (%440, %441, %442)
}

def @func_10081() -> Tensor[(13, 2, 16), int32] {
  %443 = @func_6992() /* ty=(Tensor[(13, 2, 16), int32],) */;
  %443.0
}

def @func_1367() -> (Tensor[(15, 4, 4), float32], Tensor[(2, 14, 13), int16], Tensor[(672), float64], Tensor[(182, 2), float32]) {
  %444 = cast(meta[relay.Constant][20] /* ty=Tensor[(182, 2), int16] */, dtype="int16") /* ty=Tensor[(182, 2), int16] */;
  %445 = reshape(%444, newshape=[2, 14, 13]) /* ty=Tensor[(2, 14, 13), int16] */;
  %446 = @func_642(%445) /* ty=(Tensor[(2, 14, 13), int16],) */;
  %447 = @func_1227() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(16, 14, 3), float64]) */;
  %448 = cast(meta[relay.Constant][20] /* ty=Tensor[(182, 2), int16] */, dtype="float32") /* ty=Tensor[(182, 2), float32] */;
  %449 = @func_871() /* ty=Tensor[(15, 4, 4), float32] */;
  %450 = %446.0;
  %451 = %447.1;
  %452 = sinh(%448) /* ty=Tensor[(182, 2), float32] */;
  (%449, %450, %451, %452)
}

def @func_7388() -> (Tensor[(15, 4, 4), float32], Tensor[(672), float64]) {
  %453 = @func_1686() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %454 = %453.0;
  %455 = @func_4040() /* ty=Tensor[(672), float64] */;
  (%454, %455)
}

def @func_8692() -> Tensor[(15, 4, 4), float32] {
  @func_2457() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_986(%var_982: Tensor[(11, 1, 6), int64]) -> (Tensor[(11, 1, 6), bool],) {
  %456 = cast(-6 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %457 = cast(%var_982, dtype="bool") /* ty=Tensor[(11, 1, 6), bool] */;
  %458 = less_equal(%456, %457) /* ty=Tensor[(11, 1, 6), bool] */;
  (%458,)
}

def @func_10733(%var_10701: Tensor[(350), float32]) -> (Tensor[(15, 4, 4), float32], Tensor[(5, 10, 7), float32], Tensor[(350), float32]) {
  %459 = @func_3033() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %460 = cast(%var_10701, dtype="float32") /* ty=Tensor[(350), float32] */;
  %461 = reshape(%460, newshape=[350, 1]) /* ty=Tensor[(350, 1), float32] */;
  %462 = @func_5170(%461) /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(5, 10, 7), float32], Tensor[(350, 364), float32], Tensor[(15, 4, 4), float32]) */;
  %463 = %459.1;
  %464 = %462.3;
  (%463, %464, %var_10701)
}

def @func_572(%var_567: Tensor[(7, 4, 12), float64]) -> (Tensor[(7, 4, 12), float64],) {
  %465 = cast(%var_567, dtype="float64") /* ty=Tensor[(7, 4, 12), float64] */;
  %466 = rsqrt(%465) /* ty=Tensor[(7, 4, 12), float64] */;
  (%466,)
}

def @func_10488() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32], Tensor[(15, 4, 4), float32]) {
  %467 = @func_1577() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %468 = %467.0;
  %469 = cast(%468, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %470 = reshape(%469, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float32] */;
  %471 = @func_3692(%470) /* ty=(Tensor[(15, 4, 4), bool], Tensor[(15, 4, 4), float32]) */;
  %472 = @func_2310() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %473 = %471.1;
  %474 = @func_10081() /* ty=Tensor[(13, 2, 16), int32] */;
  %475 = %472.1;
  (%468, %473, %474, %475)
}

def @func_1810() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  %476 = @func_698() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %477 = @func_871() /* ty=Tensor[(15, 4, 4), float32] */;
  %478 = %476.0;
  (%477, %478)
}

def @func_5312() -> (Tensor[(364), int16],) {
  %479 = @func_1913() /* ty=(Tensor[(2, 14, 13), int16], Tensor[(364), int16], Tensor[(15, 4, 4), float32]) */;
  %480 = %479.1;
  (%480,)
}

def @func_3181(%var_3157: Tensor[(14, 10, 8), float64]) -> (Tensor[(14, 10, 8), float64], Tensor[(14, 10, 8), bool], Tensor[(11, 11, 12), uint32], Tensor[(1452), uint32], Tensor[(15, 4, 4), float32]) {
  %481 = cast(%var_3157, dtype="float64") /* ty=Tensor[(14, 10, 8), float64] */;
  %482 = cast(meta[relay.Constant][21] /* ty=Tensor[(14, 10, 8), float64] */, dtype="bool") /* ty=Tensor[(14, 10, 8), bool] */;
  %483 = shape_of(%var_3157, dtype="int32") /* ty=Tensor[(3), int32] */;
  %484 = cast(%var_3157, dtype="bool") /* ty=Tensor[(14, 10, 8), bool] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %486 = cast(meta[relay.Constant][22] /* ty=Tensor[(1452), uint32] */, dtype="uint32") /* ty=Tensor[(1452), uint32] */;
  %487 = reshape(%486, newshape=[11, 11, 12]) /* ty=Tensor[(11, 11, 12), uint32] */;
  %488 = @func_3137(%487) /* ty=(Tensor[(11, 11, 12), uint32],) */;
  %489 = @func_3033() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %490 = rsqrt(%481) /* ty=Tensor[(14, 10, 8), float64] */;
  %491 = logical_and(%484, %485) /* ty=Tensor[(14, 10, 8), bool] */;
  %492 = %488.0;
  %493 = %489.0;
  (%490, %491, %492, meta[relay.Constant][22] /* ty=Tensor[(1452), uint32] */, %493)
}

def @func_2371() -> Tensor[(15, 4, 4), float32] {
  %494 = @func_1577() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %494.0
}

def @func_2926() -> Tensor[(13, 2, 16), int32] {
  %495 = @func_1161() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32]) */;
  %495.1
}

def @func_2072() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  %496 = @func_1686() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %497 = @func_719() /* ty=Tensor[(15, 4, 4), float32] */;
  %498 = %496.0;
  (%497, %498)
}

def @func_6659(%var_6653: Tensor[(672), float64]) -> (Tensor[(364), int16], Tensor[(15, 4, 4), float32], Tensor[(16, 14, 3), float64], Tensor[(672), float64]) {
  %499 = @func_1913() /* ty=(Tensor[(2, 14, 13), int16], Tensor[(364), int16], Tensor[(15, 4, 4), float32]) */;
  %500 = @func_1367() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(2, 14, 13), int16], Tensor[(672), float64], Tensor[(182, 2), float32]) */;
  %501 = cast(%var_6653, dtype="float64") /* ty=Tensor[(672), float64] */;
  %502 = reshape(%501, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), float64] */;
  %503 = @func_618(%502) /* ty=(Tensor[(16, 14, 3), float64],) */;
  %504 = %499.1;
  %505 = %500.0;
  %506 = %503.0;
  (%504, %505, %506, %var_6653)
}

def @func_1686() -> (Tensor[(15, 4, 4), float32],) {
  %507 = @func_698() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %508 = %507.0;
  (%508,)
}

def @func_719() -> Tensor[(15, 4, 4), float32] {
  %509 = @func_698() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %509.0
}

def @func_3257(%var_3225: Tensor[(5, 10, 7), float32], %var_3245: Tensor[(5, 10, 7), float32]) -> (Tensor[(5, 10, 7), float32], Tensor[(15, 4, 4), float64], Tensor[(240), float32], Tensor[(5, 10, 7), bool]) {
  %510 = cast(%var_3225, dtype="float32") /* ty=Tensor[(5, 10, 7), float32] */;
  %511 = cast(meta[relay.Constant][23] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %512 = reshape(%511, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float32] */;
  %513 = cast(%var_3225, dtype="float32") /* ty=Tensor[(5, 10, 7), float32] */;
  %514 = sqrt(%513) /* ty=Tensor[(5, 10, 7), float32] */;
  %515 = cast(%var_3245, dtype="bool") /* ty=Tensor[(5, 10, 7), bool] */;
  %516 = shape_of(%514, dtype="int32") /* ty=Tensor[(3), int32] */;
  %517 = cast(%514, dtype="bool") /* ty=Tensor[(5, 10, 7), bool] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %519 = acosh(%510) /* ty=Tensor[(5, 10, 7), float32] */;
  %520 = @func_1503(%512) /* ty=Tensor[(15, 4, 4), float64] */;
  %521 = equal(%517, %518) /* ty=Tensor[(5, 10, 7), bool] */;
  (%519, %520, meta[relay.Constant][23] /* ty=Tensor[(240), float32] */, %521)
}

def @func_752() -> (Tensor[(15, 4, 4), float32],) {
  %522 = @func_698() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %523 = %522.0;
  (%523,)
}

def @func_8688() -> Tensor[(672), float64] {
  @func_8399() /* ty=Tensor[(672), float64] */
}

def @func_5952() -> (Tensor[(15, 4, 4), float32],) {
  %524 = @func_2614() /* ty=Tensor[(15, 4, 4), float32] */;
  (%524,)
}

def @func_6883(%var_6864: Tensor[(520), float32]) -> (Tensor[(15, 4, 4), bool], Tensor[(15, 4, 4), float32], Tensor[(13, 4, 10), float32], Tensor[(520), float32]) {
  %525 = @func_5591() /* ty=(Tensor[(672), float64], Tensor[(15, 4, 4), bool]) */;
  %526 = cast(%var_6864, dtype="float32") /* ty=Tensor[(520), float32] */;
  %527 = reshape(%526, newshape=[13, 4, 10]) /* ty=Tensor[(13, 4, 10), float32] */;
  %528 = @func_6748(%527) /* ty=(Tensor[(13, 4, 10), float32], Tensor[(13, 4, 10), float32]) */;
  %529 = %525.1;
  %530 = @func_3199() /* ty=Tensor[(15, 4, 4), float32] */;
  %531 = %528.0;
  (%529, %530, %531, %var_6864)
}

def @func_1529(%var_1517: Tensor[(13, 2, 16), int32]) -> (Tensor[(13, 2, 16), bool],) {
  %532 = @func_1161() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32]) */;
  %533 = %532.1;
  %534 = cast(%var_1517, dtype="bool") /* ty=Tensor[(13, 2, 16), bool] */;
  %535 = shape_of(%533, dtype="int32") /* ty=Tensor[(3), int32] */;
  %536 = cast(%533, dtype="bool") /* ty=Tensor[(13, 2, 16), bool] */;
  %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %538 = equal(%536, %537) /* ty=Tensor[(13, 2, 16), bool] */;
  (%538,)
}

def @func_6158() -> (Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32], Tensor[(672), float64]) {
  %539 = @func_4886() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %540 = @func_3985() /* ty=(Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), bool]) */;
  %541 = %539.0;
  %542 = @func_2926() /* ty=Tensor[(13, 2, 16), int32] */;
  %543 = %540.0;
  (%541, %542, %543)
}

def @func_5797(%var_5792: Tensor[(9, 4, 12), int32], %var_5793: Tensor[(9, 4, 12), int32]) -> (Tensor[(9, 4, 12), int32],) {
  %544 = cast(%var_5793, dtype="int32") /* ty=Tensor[(9, 4, 12), int32] */;
  %545 = shape_of(%var_5792, dtype="int32") /* ty=Tensor[(3), int32] */;
  %546 = cast(%var_5792, dtype="int32") /* ty=Tensor[(9, 4, 12), int32] */;
  %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %548 = minimum(%546, %547) /* ty=Tensor[(9, 4, 12), int32] */;
  (%548,)
}

def @func_8881() -> (Tensor[(15, 4, 4), float32], Tensor[(350), float32], Tensor[(10, 13, 16), float32]) {
  %549 = cast(meta[relay.Constant][24] /* ty=Tensor[(350), float32] */, dtype="float64") /* ty=Tensor[(350), float64] */;
  %550 = acosh(%549) /* ty=Tensor[(350), float64] */;
  %551 = cast(meta[relay.Constant][24] /* ty=Tensor[(350), float32] */, dtype="float32") /* ty=Tensor[(350), float32] */;
  %552 = cast(meta[relay.Constant][24] /* ty=Tensor[(350), float32] */, dtype="float32") /* ty=Tensor[(350), float32] */;
  %553 = reshape(%551, newshape=[5, 10, 7]) /* ty=Tensor[(5, 10, 7), float32] */;
  %554 = reshape(%552, newshape=[5, 10, 7]) /* ty=Tensor[(5, 10, 7), float32] */;
  %555 = @func_3257(%553, %554) /* ty=(Tensor[(5, 10, 7), float32], Tensor[(15, 4, 4), float64], Tensor[(240), float32], Tensor[(5, 10, 7), bool]) */;
  %556 = %555.3;
  %557 = cast(%556, dtype="uint16") /* ty=Tensor[(5, 10, 7), uint16] */;
  %558 = shape_of(%550, dtype="int32") /* ty=Tensor[(1), int32] */;
  %559 = cast(%550, dtype="uint16") /* ty=Tensor[(350), uint16] */;
  %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %561 = multiply(%559, %560) /* ty=Tensor[(350), uint16] */;
  %562 = cast(%556, dtype="float32") /* ty=Tensor[(5, 10, 7), float32] */;
  %563 = shape_of(%561, dtype="int32") /* ty=Tensor[(1), int32] */;
  %564 = cast(%561, dtype="float32") /* ty=Tensor[(350), float32] */;
  %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?), float32] */;
  %566 = @func_3629() /* ty=Tensor[(15, 4, 4), float32] */;
  %567 = divide(%564, %565) /* ty=Tensor[(350), float32] */;
  %568 = @func_6406() /* ty=Tensor[(10, 13, 16), float32] */;
  (%566, %567, %568)
}

def @func_6330() -> Tensor[(15, 4, 4), float32] {
  @func_3629() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_1227() -> (Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(16, 14, 3), float64]) {
  %569 = cast(meta[relay.Constant][25] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
  %570 = reshape(%569, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), float64] */;
  %571 = @func_618(%570) /* ty=(Tensor[(16, 14, 3), float64],) */;
  %572 = %571.0;
  %573 = cast(%572, dtype="float64") /* ty=Tensor[(16, 14, 3), float64] */;
  %574 = @func_719() /* ty=Tensor[(15, 4, 4), float32] */;
  %575 = asinh(%573) /* ty=Tensor[(16, 14, 3), float64] */;
  (%574, meta[relay.Constant][25] /* ty=Tensor[(672), float64] */, %575)
}

def @func_10327(%var_10312: float32, %var_10313: Tensor[(16, 12, 7), float32]) -> (Tensor[(16, 12, 7), bool],) {
  %576 = cast(%var_10312, dtype="float32") /* ty=float32 */;
  %577 = cast(%var_10313, dtype="float32") /* ty=Tensor[(16, 12, 7), float32] */;
  %578 = minimum(%576, %577) /* ty=Tensor[(16, 12, 7), float32] */;
  %579 = cast(%578, dtype="float32") /* ty=Tensor[(16, 12, 7), float32] */;
  %580 = acosh(%579) /* ty=Tensor[(16, 12, 7), float32] */;
  %581 = cast(%578, dtype="bool") /* ty=Tensor[(16, 12, 7), bool] */;
  %582 = shape_of(%580, dtype="int32") /* ty=Tensor[(3), int32] */;
  %583 = cast(%580, dtype="bool") /* ty=Tensor[(16, 12, 7), bool] */;
  %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %585 = greater_equal(%583, %584) /* ty=Tensor[(16, 12, 7), bool] */;
  (%585,)
}

def @func_10943() -> (Tensor[(15, 4, 4), int32], Tensor[(15, 4, 4), float32]) {
  %586 = @func_5243() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(1120), float64], Tensor[(2, 14, 13), int16], Tensor[(1452), float64], Tensor[(15, 4, 4), int32]) */;
  %587 = @func_10654() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %588 = %586.4;
  %589 = %587.0;
  (%588, %589)
}

def @func_1634() -> (Tensor[(15, 4, 4), float32],) {
  %590 = @func_1430() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
  %591 = %590.0;
  (%591,)
}

def @func_9026() -> (Tensor[(15, 4, 4), float32],) {
  %592 = @func_752() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %593 = %592.0;
  (%593,)
}

def @func_8632() -> (Tensor[(13, 2, 16), float32], Tensor[(15, 4, 4), float32]) {
  %594 = @func_8467() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %595 = @func_6400() /* ty=Tensor[(13, 2, 16), float32] */;
  %596 = %594.0;
  (%595, %596)
}

def @func_2788(%var_2757: Tensor[(378), float64], %var_2765: Tensor[(14, 9, 3), bool]) -> (Tensor[(15, 4, 4), float32], Tensor[(378), float64], Tensor[(14, 9, 3), float32]) {
  %597 = @func_1577() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %598 = cast(%var_2757, dtype="float64") /* ty=Tensor[(378), float64] */;
  %599 = reshape(%598, newshape=[14, 9, 3]) /* ty=Tensor[(14, 9, 3), float64] */;
  %600 = @func_1328(%599) /* ty=Tensor[(14, 9, 3), bool] */;
  %601 = cast(%var_2765, dtype="float32") /* ty=Tensor[(14, 9, 3), float32] */;
  %602 = shape_of(%600, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%600, dtype="float32") /* ty=Tensor[(14, 9, 3), float32] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %605 = %597.0;
  %606 = floor_divide(%603, %604) /* ty=Tensor[(14, 9, 3), float32] */;
  (%605, %var_2757, %606)
}

def @func_7708() -> (Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), uint32]) {
  %607 = @func_6158() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32], Tensor[(672), float64]) */;
  %608 = @func_2614() /* ty=Tensor[(15, 4, 4), float32] */;
  %609 = cast(%608, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %610 = reshape(%609, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float32] */;
  %611 = %607.2;
  %612 = @func_2031(%610) /* ty=Tensor[(15, 4, 4), uint32] */;
  (%611, %608, %612)
}

def @func_915(%var_904: Tensor[(13, 2, 16), int64]) -> Tensor[(13, 2, 16), bool] {
  %613 = cast(meta[relay.Constant][26] /* ty=Tensor[(13, 2, 16), int64] */, dtype="bool") /* ty=Tensor[(13, 2, 16), bool] */;
  %614 = shape_of(%var_904, dtype="int32") /* ty=Tensor[(3), int32] */;
  %615 = cast(%var_904, dtype="bool") /* ty=Tensor[(13, 2, 16), bool] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%615, %616) /* ty=Tensor[(13, 2, 16), bool] */
}

def @func_7290() -> (Tensor[(15, 4, 4), float32],) {
  %617 = @func_1397() /* ty=Tensor[(15, 4, 4), float32] */;
  (%617,)
}

def @func_4166() -> (Tensor[(15, 4, 4), float32], Tensor[(672), float64]) {
  %618 = @func_2016() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(15, 4, 4), float32]) */;
  %619 = @func_2972() /* ty=(Tensor[(672), float64], Tensor[(15, 4, 4), float32]) */;
  %620 = %618.0;
  %621 = %619.0;
  (%620, %621)
}

def @func_7273() -> (Tensor[(15, 4, 4), float32],) {
  %622 = @func_5508() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %623 = %622.0;
  (%623,)
}

def @func_4728() -> (Tensor[(15, 4, 4), float32],) {
  %624 = @func_2457() /* ty=Tensor[(15, 4, 4), float32] */;
  (%624,)
}

def @func_8972() -> (Tensor[(672), float64], Tensor[(15, 4, 4), float32]) {
  %625 = @func_5071() /* ty=(Tensor[(364), int16], Tensor[(672), float64]) */;
  %626 = @func_6933() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %627 = %625.1;
  %628 = %626.0;
  (%627, %628)
}

def @func_8590(%var_8579: Tensor[(624), float64], %var_8580: Tensor[(66), int64]) -> (Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(624), float64], Tensor[(66), int64]) {
  %629 = @func_3746() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %630 = @func_5289() /* ty=(Tensor[(672), float64], Tensor[(672), float64]) */;
  %631 = cast(%var_8579, dtype="float64") /* ty=Tensor[(624), float64] */;
  %632 = cast(%var_8580, dtype="int64") /* ty=Tensor[(66), int64] */;
  %633 = cast(%var_8579, dtype="float64") /* ty=Tensor[(624), float64] */;
  %634 = reshape(%631, newshape=[24, 26]) /* ty=Tensor[(24, 26), float64] */;
  %635 = reshape(%632, newshape=[66]) /* ty=Tensor[(66), int64] */;
  %636 = reshape(%633, newshape=[24, 26]) /* ty=Tensor[(24, 26), float64] */;
  %637 = @func_2896(%634, %635, %636) /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(66), int64], Tensor[(182, 2), float32], Tensor[(15, 4, 4), float64], Tensor[(7, 4, 12), float64], Tensor[(4, 84), float64], Tensor[(24, 26), int32], Tensor[(15, 4, 4), float32]) */;
  %638 = %629.0;
  %639 = %630.1;
  %640 = %637.8;
  (%638, %639, %640, %var_8579, %var_8580)
}

def @func_6174() -> (Tensor[(15, 4, 4), float32],) {
  %641 = @func_3629() /* ty=Tensor[(15, 4, 4), float32] */;
  (%641,)
}

def @func_11238() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  %642 = @func_698() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %643 = %642.0;
  %644 = @func_6561() /* ty=Tensor[(15, 4, 4), float32] */;
  (%643, %644)
}

def @func_2165(%var_2097: Tensor[(416), int64]) -> (Tensor[(13, 2, 16), bool], Tensor[(416), int64], Tensor[(15, 4, 4), bool], Tensor[(15, 4, 4), uint32], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), uint16]) {
  %645 = cast(%var_2097, dtype="int64") /* ty=Tensor[(416), int64] */;
  %646 = reshape(%645, newshape=[13, 2, 16]) /* ty=Tensor[(13, 2, 16), int64] */;
  %647 = @func_1397() /* ty=Tensor[(15, 4, 4), float32] */;
  %648 = @func_719() /* ty=Tensor[(15, 4, 4), float32] */;
  %649 = cast(%648, dtype="bool") /* ty=Tensor[(15, 4, 4), bool] */;
  %650 = shape_of(%647, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(%647, dtype="bool") /* ty=Tensor[(15, 4, 4), bool] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %653 = not_equal(%651, %652) /* ty=Tensor[(15, 4, 4), bool] */;
  %654 = cast(%653, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %655 = reshape(%654, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float32] */;
  %656 = @func_1503(%655) /* ty=Tensor[(15, 4, 4), float64] */;
  %657 = cast(%656, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %658 = reshape(%657, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float32] */;
  %659 = cast(meta[relay.Constant][27] /* ty=Tensor[(15, 4, 4), float64] */, dtype="uint16") /* ty=Tensor[(15, 4, 4), uint16] */;
  %660 = shape_of(%656, dtype="int32") /* ty=Tensor[(3), int32] */;
  %661 = cast(%656, dtype="uint16") /* ty=Tensor[(15, 4, 4), uint16] */;
  %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %663 = @func_915(%646) /* ty=Tensor[(13, 2, 16), bool] */;
  %664 = @func_2031(%658) /* ty=Tensor[(15, 4, 4), uint32] */;
  %665 = @func_1397() /* ty=Tensor[(15, 4, 4), float32] */;
  %666 = subtract(%661, %662) /* ty=Tensor[(15, 4, 4), uint16] */;
  (%663, %var_2097, %653, %664, %665, %666)
}

def @func_3540(%var_3472: Tensor[(15, 4, 4), float32]) -> (Tensor[(13, 2, 16), bool], Tensor[(416), int32], Tensor[(13, 2, 16), bool], Tensor[(15, 4, 4), int32]) {
  %667 = cast(meta[relay.Constant][28] /* ty=Tensor[(416), int32] */, dtype="int32") /* ty=Tensor[(416), int32] */;
  %668 = reshape(%667, newshape=[13, 2, 16]) /* ty=Tensor[(13, 2, 16), int32] */;
  %669 = @func_1529(%668) /* ty=(Tensor[(13, 2, 16), bool],) */;
  %670 = %669.0;
  %671 = cast(%670, dtype="int64") /* ty=Tensor[(13, 2, 16), int64] */;
  %672 = reshape(%671, newshape=[13, 2, 16]) /* ty=Tensor[(13, 2, 16), int64] */;
  %673 = @func_3033() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %674 = %673.1;
  %675 = cast(%var_3472, dtype="int32") /* ty=Tensor[(15, 4, 4), int32] */;
  %676 = shape_of(%674, dtype="int32") /* ty=Tensor[(3), int32] */;
  %677 = cast(%674, dtype="int32") /* ty=Tensor[(15, 4, 4), int32] */;
  %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %679 = minimum(%677, %678) /* ty=Tensor[(15, 4, 4), int32] */;
  %680 = cast(%679, dtype="bool") /* ty=Tensor[(15, 4, 4), bool] */;
  %681 = shape_of(%674, dtype="int32") /* ty=Tensor[(3), int32] */;
  %682 = cast(%674, dtype="bool") /* ty=Tensor[(15, 4, 4), bool] */;
  %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %684 = less_equal(%682, %683) /* ty=Tensor[(15, 4, 4), bool] */;
  %685 = @func_1161() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32]) */;
  %686 = %685.0;
  %687 = cast(%686, dtype="int32") /* ty=Tensor[(15, 4, 4), int32] */;
  %688 = shape_of(%684, dtype="int32") /* ty=Tensor[(3), int32] */;
  %689 = cast(%684, dtype="int32") /* ty=Tensor[(15, 4, 4), int32] */;
  %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %691 = @func_915(%672) /* ty=Tensor[(13, 2, 16), bool] */;
  %692 = left_shift(%689, %690) /* ty=Tensor[(15, 4, 4), int32] */;
  (%670, meta[relay.Constant][28] /* ty=Tensor[(416), int32] */, %691, %692)
}

def @func_642(%var_633: Tensor[(2, 14, 13), int16]) -> (Tensor[(2, 14, 13), int16],) {
  %693 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 14, 13), int16] */, dtype="int16") /* ty=Tensor[(2, 14, 13), int16] */;
  %694 = shape_of(%var_633, dtype="int32") /* ty=Tensor[(3), int32] */;
  %695 = cast(%var_633, dtype="int16") /* ty=Tensor[(2, 14, 13), int16] */;
  %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %697 = subtract(%695, %696) /* ty=Tensor[(2, 14, 13), int16] */;
  (%697,)
}

def @func_9178() -> (Tensor[(15, 4, 4), float32],) {
  %698 = @func_6561() /* ty=Tensor[(15, 4, 4), float32] */;
  (%698,)
}

def @func_871() -> Tensor[(15, 4, 4), float32] {
  %699 = @func_698() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %699.0
}

def @func_2529() -> Tensor[(15, 4, 4), float32] {
  %700 = @func_1810() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %700.1
}

def @func_4317() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  %701 = @func_2371() /* ty=Tensor[(15, 4, 4), float32] */;
  %702 = cast(%701, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %703 = reshape(%702, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float32] */;
  %704 = @func_3692(%703) /* ty=(Tensor[(15, 4, 4), bool], Tensor[(15, 4, 4), float32]) */;
  %705 = %704.1;
  (%701, %705)
}

def @main(%var_11354: Tensor[(9, 14, 10), int16], %var_11355: Tensor[(9, 14, 10), int16]) -> Tensor[(9, 14, 10), int16] {
  %706 = cast(%var_11355, dtype="int16") /* ty=Tensor[(9, 14, 10), int16] */;
  %707 = shape_of(%var_11354, dtype="int32") /* ty=Tensor[(3), int32] */;
  %708 = cast(%var_11354, dtype="int16") /* ty=Tensor[(9, 14, 10), int16] */;
  %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  add(%708, %709) /* ty=Tensor[(9, 14, 10), int16] */
}

def @func_5508() -> (Tensor[(15, 4, 4), float32],) {
  %710 = @func_1227() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(16, 14, 3), float64]) */;
  %711 = %710.0;
  (%711,)
}

def @func_6748(%var_6724: Tensor[(13, 4, 10), float32]) -> (Tensor[(13, 4, 10), float32], Tensor[(13, 4, 10), float32]) {
  %712 = cast(%var_6724, dtype="float32") /* ty=Tensor[(13, 4, 10), float32] */;
  %713 = cast(%var_6724, dtype="float32") /* ty=Tensor[(13, 4, 10), float32] */;
  %714 = asin(%713) /* ty=Tensor[(13, 4, 10), float32] */;
  %715 = cast(%714, dtype="float32") /* ty=Tensor[(13, 4, 10), float32] */;
  %716 = sinh(%715) /* ty=Tensor[(13, 4, 10), float32] */;
  %717 = cast(%716, dtype="float32") /* ty=Tensor[(13, 4, 10), float32] */;
  %718 = log(%712) /* ty=Tensor[(13, 4, 10), float32] */;
  %719 = erf(%717) /* ty=Tensor[(13, 4, 10), float32] */;
  (%718, %719)
}

def @func_2457() -> Tensor[(15, 4, 4), float32] {
  %720 = @func_1161() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32]) */;
  %720.0
}

def @func_5289() -> (Tensor[(672), float64], Tensor[(672), float64]) {
  %721 = @func_4896() /* ty=(Tensor[(672), float64],) */;
  %722 = @func_4166() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
  %723 = %721.0;
  %724 = %722.1;
  (%723, %724)
}

def @func_3902(%var_3874: Tensor[(66), bool], %var_3896: Tensor[(8, 42), float64]) -> (Tensor[(11, 14, 11), bool], Tensor[(15, 4, 4), float32], Tensor[(66), bool], Tensor[(15, 4, 4), float32], Tensor[(7, 4, 12), float64], Tensor[(8, 42), float64]) {
  %725 = cast(meta[relay.Constant][30] /* ty=uint16 */, dtype="bool") /* ty=bool */;
  %726 = cast(meta[relay.Constant][31] /* ty=Tensor[(11, 14, 11), uint16] */, dtype="bool") /* ty=Tensor[(11, 14, 11), bool] */;
  %727 = cast(%var_3874, dtype="bool") /* ty=Tensor[(66), bool] */;
  %728 = reshape(%727, newshape=[6, 1, 11]) /* ty=Tensor[(6, 1, 11), bool] */;
  %729 = @func_3349(%728) /* ty=(Tensor[(6, ?, 11), bool], Tensor[(15, 4, 4), float32]) */;
  %730 = cast(%var_3896, dtype="float64") /* ty=Tensor[(8, 42), float64] */;
  %731 = reshape(%730, newshape=[7, 4, 12]) /* ty=Tensor[(7, 4, 12), float64] */;
  %732 = @func_572(%731) /* ty=(Tensor[(7, 4, 12), float64],) */;
  %733 = less_equal(%725, %726) /* ty=Tensor[(11, 14, 11), bool] */;
  %734 = %729.1;
  %735 = @func_2659() /* ty=Tensor[(15, 4, 4), float32] */;
  %736 = %732.0;
  (%733, %734, %var_3874, %735, %736, %var_3896)
}

def @func_6031() -> (Tensor[(672), float64],) {
  %737 = @func_4896() /* ty=(Tensor[(672), float64],) */;
  %738 = %737.0;
  (%738,)
}

def @func_5632(%var_5606: Tensor[(1120), float64]) -> (Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(11, 11, 12), uint32], Tensor[(1120), float64], Tensor[(14, 10, 8), bool], Tensor[(15, 4, 4), float64], Tensor[(16, 14, 3), float64], Tensor[(13, 2, 16), bool], Tensor[(2, 208), int32]) {
  %739 = @func_1634() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %740 = @func_4896() /* ty=(Tensor[(672), float64],) */;
  %741 = cast(%var_5606, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %742 = reshape(%741, newshape=[14, 10, 8]) /* ty=Tensor[(14, 10, 8), float64] */;
  %743 = @func_3181(%742) /* ty=(Tensor[(14, 10, 8), float64], Tensor[(14, 10, 8), bool], Tensor[(11, 11, 12), uint32], Tensor[(1452), uint32], Tensor[(15, 4, 4), float32]) */;
  %744 = cast(%var_5606, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %745 = reshape(%744, newshape=[14, 10, 8]) /* ty=Tensor[(14, 10, 8), float64] */;
  %746 = @func_3181(%745) /* ty=(Tensor[(14, 10, 8), float64], Tensor[(14, 10, 8), bool], Tensor[(11, 11, 12), uint32], Tensor[(1452), uint32], Tensor[(15, 4, 4), float32]) */;
  %747 = @func_5420() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %748 = %747.0;
  %749 = cast(%748, dtype="float64") /* ty=Tensor[(15, 4, 4), float64] */;
  %750 = %740.0;
  %751 = cast(%750, dtype="float64") /* ty=Tensor[(672), float64] */;
  %752 = reshape(%751, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), float64] */;
  %753 = @func_618(%752) /* ty=(Tensor[(16, 14, 3), float64],) */;
  %754 = cast(meta[relay.Constant][32] /* ty=Tensor[(2, 208), int32] */, dtype="int32") /* ty=Tensor[(2, 208), int32] */;
  %755 = reshape(%754, newshape=[13, 2, 16]) /* ty=Tensor[(13, 2, 16), int32] */;
  %756 = @func_1529(%755) /* ty=(Tensor[(13, 2, 16), bool],) */;
  %757 = %739.0;
  %758 = %743.2;
  %759 = %746.1;
  %760 = log(%749) /* ty=Tensor[(15, 4, 4), float64] */;
  %761 = %753.0;
  %762 = %756.0;
  (%757, %750, %758, %var_5606, %759, %760, %761, %762, meta[relay.Constant][32] /* ty=Tensor[(2, 208), int32] */)
}

def @func_4538() -> Tensor[(13, 2, 16), int32] {
  %763 = @func_1161() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32]) */;
  %763.1
}

def @func_5486() -> Tensor[(15, 4, 4), float32] {
  %764 = @func_1634() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %764.0
}

def @func_7201() -> (Tensor[(672), float64], Tensor[(15, 4, 4), float32]) {
  %765 = @func_5289() /* ty=(Tensor[(672), float64], Tensor[(672), float64]) */;
  %766 = %765.1;
  %767 = @func_7008() /* ty=Tensor[(15, 4, 4), float32] */;
  (%766, %767)
}

def @func_3115(%var_3079: Tensor[(2, 15, 1), float64]) -> (Tensor[(15, 4, 4), float32], Tensor[(2, 15, ?), float32]) {
  %768 = @func_2310() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %769 = cast(%var_3079, dtype="float64") /* ty=Tensor[(2, 15, 1), float64] */;
  %770 = log(%769) /* ty=Tensor[(2, 15, 1), float64] */;
  %771 = cast(%var_3079, dtype="float32") /* ty=Tensor[(2, 15, 1), float32] */;
  %772 = shape_of(%770, dtype="int32") /* ty=Tensor[(3), int32] */;
  %773 = cast(%770, dtype="float32") /* ty=Tensor[(2, 15, 1), float32] */;
  %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %775 = %768.0;
  %776 = floor_mod(%773, %774) /* ty=Tensor[(2, 15, ?), float32] */;
  (%775, %776)
}

def @func_1577() -> (Tensor[(15, 4, 4), float32],) {
  %777 = @func_1430() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
  %778 = %777.0;
  (%778,)
}

def @func_4933(%var_4928: Tensor[(15, 13, 2), uint32], %var_4929: Tensor[(15, 13, 2), uint32]) -> (Tensor[(15, 13, 2), uint32],) {
  %779 = cast(%var_4929, dtype="uint32") /* ty=Tensor[(15, 13, 2), uint32] */;
  %780 = shape_of(%var_4928, dtype="int32") /* ty=Tensor[(3), int32] */;
  %781 = cast(%var_4928, dtype="uint32") /* ty=Tensor[(15, 13, 2), uint32] */;
  %782 = dyn.reshape(%779, %780, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %783 = bitwise_or(%781, %782) /* ty=Tensor[(15, 13, 2), uint32] */;
  (%783,)
}

def @func_2972() -> (Tensor[(672), float64], Tensor[(15, 4, 4), float32]) {
  %784 = @func_1227() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(16, 14, 3), float64]) */;
  %785 = @func_2576() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %786 = %784.1;
  %787 = %785.1;
  (%786, %787)
}

def @func_8282() -> (Tensor[(15, 4, 4), float32],) {
  %788 = @func_4317() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %789 = %788.1;
  (%789,)
}

def @func_7145() -> (Tensor[(15, 4, 4), float32],) {
  %790 = @func_1161() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32]) */;
  %791 = %790.0;
  (%791,)
}

def @func_1161() -> (Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32]) {
  %792 = @func_752() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %793 = cast(meta[relay.Constant][33] /* ty=Tensor[(416), int64] */, dtype="int64") /* ty=Tensor[(416), int64] */;
  %794 = reshape(%793, newshape=[13, 2, 16]) /* ty=Tensor[(13, 2, 16), int64] */;
  %795 = @func_915(%794) /* ty=Tensor[(13, 2, 16), bool] */;
  %796 = cast(meta[relay.Constant][33] /* ty=Tensor[(416), int64] */, dtype="int32") /* ty=Tensor[(416), int32] */;
  %797 = shape_of(%795, dtype="int32") /* ty=Tensor[(3), int32] */;
  %798 = cast(%795, dtype="int32") /* ty=Tensor[(13, 2, 16), int32] */;
  %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %800 = %792.0;
  %801 = multiply(%798, %799) /* ty=Tensor[(13, 2, 16), int32] */;
  (%800, %801)
}

def @func_3033() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  %802 = @func_1577() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %803 = @func_752() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %804 = %802.0;
  %805 = %803.0;
  (%804, %805)
}

def @func_6400() -> Tensor[(13, 2, 16), float32] {
  %806 = @func_4538() /* ty=Tensor[(13, 2, 16), int32] */;
  %807 = cast(%806, dtype="float32") /* ty=Tensor[(13, 2, 16), float32] */;
  asin(%807) /* ty=Tensor[(13, 2, 16), float32] */
}

def @func_3692(%var_3661: Tensor[(15, 4, 4), float32]) -> (Tensor[(15, 4, 4), bool], Tensor[(15, 4, 4), float32]) {
  %808 = @func_2256() /* ty=Tensor[(15, 4, 4), float32] */;
  %809 = cast(%var_3661, dtype="bool") /* ty=Tensor[(15, 4, 4), bool] */;
  %810 = shape_of(%808, dtype="int32") /* ty=Tensor[(3), int32] */;
  %811 = cast(%808, dtype="bool") /* ty=Tensor[(15, 4, 4), bool] */;
  %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %813 = @func_2016() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(15, 4, 4), float32]) */;
  %814 = equal(%811, %812) /* ty=Tensor[(15, 4, 4), bool] */;
  %815 = %813.3;
  (%814, %815)
}

def @func_9251(%var_9195: Tensor[(66), bool], %var_9196: Tensor[(336), float64]) -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(66), bool], Tensor[(336), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  %816 = @func_4886() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %817 = cast(%var_9195, dtype="bool") /* ty=Tensor[(66), bool] */;
  %818 = cast(%var_9196, dtype="float64") /* ty=Tensor[(336), float64] */;
  %819 = reshape(%817, newshape=[66]) /* ty=Tensor[(66), bool] */;
  %820 = reshape(%818, newshape=[8, 42]) /* ty=Tensor[(8, 42), float64] */;
  %821 = @func_3902(%819, %820) /* ty=(Tensor[(11, 14, 11), bool], Tensor[(15, 4, 4), float32], Tensor[(66), bool], Tensor[(15, 4, 4), float32], Tensor[(7, 4, 12), float64], Tensor[(8, 42), float64]) */;
  %822 = @func_2072() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %823 = %816.0;
  %824 = %821.1;
  %825 = %822.0;
  %826 = @func_6914() /* ty=Tensor[(15, 4, 4), float32] */;
  (%823, %824, %var_9195, %var_9196, %825, %826)
}

def @func_8399() -> Tensor[(672), float64] {
  %827 = @func_1430() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
  %827.1
}

def @func_7317() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  %828 = @func_6933() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %829 = @func_5420() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %830 = %828.0;
  %831 = %829.0;
  (%830, %831)
}

def @func_4155() -> Tensor[(15, 4, 4), float32] {
  %832 = @func_1686() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %832.0
}

def @func_4104(%var_4070: Tensor[(15, 4, 4), float32]) -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), uint32]) {
  %833 = @func_2614() /* ty=Tensor[(15, 4, 4), float32] */;
  %834 = cast(%var_4070, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %835 = shape_of(%833, dtype="int32") /* ty=Tensor[(3), int32] */;
  %836 = cast(%833, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %837 = dyn.reshape(%834, %835, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %838 = cast(%var_4070, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %839 = reshape(%838, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float32] */;
  %840 = power(%836, %837) /* ty=Tensor[(15, 4, 4), float32] */;
  %841 = @func_2031(%839) /* ty=Tensor[(15, 4, 4), uint32] */;
  (%840, %841)
}

def @func_5539() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  %842 = @func_1397() /* ty=Tensor[(15, 4, 4), float32] */;
  %843 = @func_3629() /* ty=Tensor[(15, 4, 4), float32] */;
  (%842, %843)
}

def @func_5071() -> (Tensor[(364), int16], Tensor[(672), float64]) {
  %844 = @func_1913() /* ty=(Tensor[(2, 14, 13), int16], Tensor[(364), int16], Tensor[(15, 4, 4), float32]) */;
  %845 = %844.1;
  %846 = @func_4040() /* ty=Tensor[(672), float64] */;
  (%845, %846)
}

def @func_2310() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  %847 = @func_2072() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %848 = @func_2256() /* ty=Tensor[(15, 4, 4), float32] */;
  %849 = %847.0;
  (%848, %849)
}

def @func_5758() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  %850 = @func_5591() /* ty=(Tensor[(672), float64], Tensor[(15, 4, 4), bool]) */;
  %851 = @func_5508() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %852 = @func_2659() /* ty=Tensor[(15, 4, 4), float32] */;
  %853 = @func_2529() /* ty=Tensor[(15, 4, 4), float32] */;
  %854 = %850.0;
  %855 = @func_871() /* ty=Tensor[(15, 4, 4), float32] */;
  %856 = @func_3199() /* ty=Tensor[(15, 4, 4), float32] */;
  %857 = %851.0;
  (%852, %853, %854, %855, %856, %857)
}

def @func_7232() -> Tensor[(15, 4, 4), float32] {
  %858 = @func_5539() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %858.0
}

def @func_5375(%var_5365: Tensor[(13, 2, 16), int32]) -> (Tensor[(13, 2, 16), float64],) {
  %859 = @func_2926() /* ty=Tensor[(13, 2, 16), int32] */;
  %860 = cast(%var_5365, dtype="float64") /* ty=Tensor[(13, 2, 16), float64] */;
  %861 = shape_of(%859, dtype="int32") /* ty=Tensor[(3), int32] */;
  %862 = cast(%859, dtype="float64") /* ty=Tensor[(13, 2, 16), float64] */;
  %863 = dyn.reshape(%860, %861, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %864 = floor_divide(%862, %863) /* ty=Tensor[(13, 2, 16), float64] */;
  (%864,)
}

def @func_4993(%var_4975: uint32, %var_4976: Tensor[(2, 10, 3), uint32]) -> (Tensor[(2, 10, 3), uint32], Tensor[(15, 4, 4), float32]) {
  %865 = cast(%var_4975, dtype="uint32") /* ty=uint32 */;
  %866 = cast(%var_4976, dtype="uint32") /* ty=Tensor[(2, 10, 3), uint32] */;
  %867 = @func_4317() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %868 = logical_xor(%865, %866) /* ty=Tensor[(2, 10, 3), uint32] */;
  %869 = %867.1;
  (%868, %869)
}

def @func_6764(%var_6760: Tensor[(2, 2, 11), float32]) -> (Tensor[(2, 2, 11), float32],) {
  %870 = cast(%var_6760, dtype="float32") /* ty=Tensor[(2, 2, 11), float32] */;
  %871 = log(%870) /* ty=Tensor[(2, 2, 11), float32] */;
  (%871,)
}

def @func_3841() -> Tensor[(66), int64] {
  %872 = @func_1476() /* ty=(Tensor[(13, 2, 16), int32], Tensor[(2, 14, 13), float64], Tensor[(15, 4, 4), float32], Tensor[(16, 3, 13), float64], Tensor[(624), float64], Tensor[(66), int64], Tensor[(15, 4, 4), float32]) */;
  %872.5
}

def @func_6561() -> Tensor[(15, 4, 4), float32] {
  %873 = @func_1686() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %873.0
}

def @func_6816() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  %874 = @func_2457() /* ty=Tensor[(15, 4, 4), float32] */;
  %875 = cast(%874, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %876 = reshape(%875, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float32] */;
  %877 = @func_4104(%876) /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), uint32]) */;
  %878 = %877.0;
  (%874, %878)
}

def @func_7160() -> (Tensor[(15, 4, 4), float32],) {
  %879 = @func_5486() /* ty=Tensor[(15, 4, 4), float32] */;
  (%879,)
}

def @func_9301(%var_9288: Tensor[(13, 2, 16), int32]) -> Tensor[(13, 2, 16), bool] {
  %880 = @func_2926() /* ty=Tensor[(13, 2, 16), int32] */;
  %881 = cast(%var_9288, dtype="bool") /* ty=Tensor[(13, 2, 16), bool] */;
  %882 = shape_of(%880, dtype="int32") /* ty=Tensor[(3), int32] */;
  %883 = cast(%880, dtype="bool") /* ty=Tensor[(13, 2, 16), bool] */;
  %884 = dyn.reshape(%881, %882, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%883, %884) /* ty=Tensor[(13, 2, 16), bool] */
}

def @func_5243() -> (Tensor[(15, 4, 4), float32], Tensor[(1120), float64], Tensor[(2, 14, 13), int16], Tensor[(1452), float64], Tensor[(15, 4, 4), int32]) {
  %885 = @func_1913() /* ty=(Tensor[(2, 14, 13), int16], Tensor[(364), int16], Tensor[(15, 4, 4), float32]) */;
  %886 = cast(meta[relay.Constant][34] /* ty=Tensor[(1120), float64] */, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %887 = reshape(%886, newshape=[14, 10, 8]) /* ty=Tensor[(14, 10, 8), float64] */;
  %888 = @func_3181(%887) /* ty=(Tensor[(14, 10, 8), float64], Tensor[(14, 10, 8), bool], Tensor[(11, 11, 12), uint32], Tensor[(1452), uint32], Tensor[(15, 4, 4), float32]) */;
  %889 = %888.3;
  %890 = cast(%889, dtype="float64") /* ty=Tensor[(1452), float64] */;
  %891 = @func_1397() /* ty=Tensor[(15, 4, 4), float32] */;
  %892 = cast(%891, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %893 = reshape(%892, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float32] */;
  %894 = @func_3540(%893) /* ty=(Tensor[(13, 2, 16), bool], Tensor[(416), int32], Tensor[(13, 2, 16), bool], Tensor[(15, 4, 4), int32]) */;
  %895 = %885.0;
  %896 = atanh(%890) /* ty=Tensor[(1452), float64] */;
  %897 = %894.3;
  (%891, meta[relay.Constant][34] /* ty=Tensor[(1120), float64] */, %895, %896, %897)
}

def @func_4663() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), uint32]) {
  %898 = @func_698() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %899 = %898.0;
  %900 = cast(%899, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %901 = sin(%900) /* ty=Tensor[(15, 4, 4), float32] */;
  %902 = cast(%901, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %903 = reshape(%902, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float32] */;
  %904 = @func_2031(%903) /* ty=Tensor[(15, 4, 4), uint32] */;
  (%901, %904)
}

def @func_2193() -> Tensor[(15, 4, 4), float32] {
  %905 = @func_1367() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(2, 14, 13), int16], Tensor[(672), float64], Tensor[(182, 2), float32]) */;
  %905.0
}

def @func_4587() -> (Tensor[(13, 2, 16), float64], Tensor[(13, 2, 16), float32], Tensor[(13, 2, 16), uint8]) {
  %906 = @func_2926() /* ty=Tensor[(13, 2, 16), int32] */;
  %907 = cast(%906, dtype="float64") /* ty=Tensor[(13, 2, 16), float64] */;
  %908 = cast(%906, dtype="float32") /* ty=Tensor[(13, 2, 16), float32] */;
  %909 = cast(meta[relay.Constant][35] /* ty=Tensor[(13, 2, 16), int32] */, dtype="uint8") /* ty=Tensor[(13, 2, 16), uint8] */;
  %910 = shape_of(%906, dtype="int32") /* ty=Tensor[(3), int32] */;
  %911 = cast(%906, dtype="uint8") /* ty=Tensor[(13, 2, 16), uint8] */;
  %912 = dyn.reshape(%909, %910, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %913 = log2(%907) /* ty=Tensor[(13, 2, 16), float64] */;
  %914 = tan(%908) /* ty=Tensor[(13, 2, 16), float32] */;
  %915 = subtract(%911, %912) /* ty=Tensor[(13, 2, 16), uint8] */;
  (%913, %914, %915)
}

def @func_9883() -> Tensor[(15, 4, 4), float32] {
  %916 = @func_7388() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
  %916.0
}

def @func_6992() -> (Tensor[(13, 2, 16), int32],) {
  %917 = @func_1161() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32]) */;
  %918 = %917.1;
  (%918,)
}

def @func_6265(%var_6248: float64) -> (Tensor[(5, 2, 12), float64], Tensor[(15, 4, 4), float32]) {
  %919 = cast(%var_6248, dtype="float64") /* ty=float64 */;
  %920 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 2, 12), float64] */, dtype="float64") /* ty=Tensor[(5, 2, 12), float64] */;
  %921 = divide(%919, %920) /* ty=Tensor[(5, 2, 12), float64] */;
  %922 = @func_2659() /* ty=Tensor[(15, 4, 4), float32] */;
  (%921, %922)
}

def @func_8010(%var_7962: Tensor[(198), float32]) -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), float32], Tensor[(15, 4, 4), float32], Tensor[(198), int8], Tensor[(15, 4, 4), float32]) {
  %923 = @func_7290() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %924 = @func_3985() /* ty=(Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), bool]) */;
  %925 = @func_6400() /* ty=Tensor[(13, 2, 16), float32] */;
  %926 = cast(%925, dtype="int64") /* ty=Tensor[(13, 2, 16), int64] */;
  %927 = cast(%var_7962, dtype="float32") /* ty=Tensor[(198), float32] */;
  %928 = reshape(%926, newshape=[416]) /* ty=Tensor[(416), int64] */;
  %929 = reshape(%927, newshape=[99, 2]) /* ty=Tensor[(99, 2), float32] */;
  %930 = @func_4857(%928, %929) /* ty=(Tensor[(66), int64], Tensor[(13, 2, 16), bool], Tensor[(416), int64], Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(3, 6, 11), float64], float32, Tensor[(99, 2), float32]) */;
  %931 = cast(meta[relay.Constant][37] /* ty=Tensor[(198), float32] */, dtype="int8") /* ty=Tensor[(198), int8] */;
  %932 = shape_of(%var_7962, dtype="int32") /* ty=Tensor[(1), int32] */;
  %933 = cast(%var_7962, dtype="int8") /* ty=Tensor[(198), int8] */;
  %934 = dyn.reshape(%931, %932, newshape=[]) /* ty=Tensor[(?), int8] */;
  %935 = %923.0;
  %936 = %924.1;
  %937 = %930.6;
  %938 = bitwise_and(%933, %934) /* ty=Tensor[(198), int8] */;
  %939 = @func_7008() /* ty=Tensor[(15, 4, 4), float32] */;
  (%935, %936, %925, %937, %938, %939)
}

def @func_6933() -> (Tensor[(15, 4, 4), float32],) {
  %940 = @func_871() /* ty=Tensor[(15, 4, 4), float32] */;
  (%940,)
}

def @func_4857(%var_4770: Tensor[(416), int64], %var_4843: Tensor[(99, 2), float32]) -> (Tensor[(66), int64], Tensor[(13, 2, 16), bool], Tensor[(416), int64], Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(3, 6, 11), float64], float32, Tensor[(99, 2), float32]) {
  %941 = cast(%var_4770, dtype="int64") /* ty=Tensor[(416), int64] */;
  %942 = reshape(%941, newshape=[13, 2, 16]) /* ty=Tensor[(13, 2, 16), int64] */;
  %943 = @func_1430() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
  %944 = @func_1161() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32]) */;
  %945 = @func_2972() /* ty=(Tensor[(672), float64], Tensor[(15, 4, 4), float32]) */;
  %946 = @func_3985() /* ty=(Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), bool]) */;
  %947 = @func_698() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %948 = cast(-4.18804f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %949 = cast(%var_4843, dtype="float32") /* ty=Tensor[(99, 2), float32] */;
  %950 = reshape(%948, newshape=[]) /* ty=float32 */;
  %951 = reshape(%949, newshape=[3, 6, 11]) /* ty=Tensor[(3, 6, 11), float32] */;
  %952 = @func_440(%950, %951) /* ty=(Tensor[(3, 6, 11), float32], Tensor[(3, 6, 11), float64]) */;
  %953 = @func_3841() /* ty=Tensor[(66), int64] */;
  %954 = @func_915(%942) /* ty=Tensor[(13, 2, 16), bool] */;
  %955 = %943.1;
  %956 = %944.0;
  %957 = %945.1;
  %958 = %946.1;
  %959 = %947.0;
  %960 = %952.1;
  (%953, %954, %var_4770, %955, %956, %957, %958, %959, %960, -4.18804f /* ty=float32 */, %var_4843)
}

def @func_7589(%var_7575: Tensor[(1, 15, 4), float64]) -> (Tensor[(6, 15, 4), float64],) {
  %961 = cast(%var_7575, dtype="float64") /* ty=Tensor[(1, 15, 4), float64] */;
  %962 = cast(meta[relay.Constant][38] /* ty=Tensor[(6, 15, 4), float64] */, dtype="float64") /* ty=Tensor[(6, 15, 4), float64] */;
  %963 = floor_divide(%961, %962) /* ty=Tensor[(6, 15, 4), float64] */;
  (%963,)
}

def @func_3802() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  %964 = @func_1227() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(16, 14, 3), float64]) */;
  %965 = %964.0;
  %966 = cast(%965, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %967 = reshape(%966, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float32] */;
  %968 = @func_1969(%967) /* ty=(Tensor[(15, 4, 4), bool], Tensor[(2, 14, 13), int16], Tensor[(91, 4), float64]) */;
  %969 = %968.0;
  %970 = cast(%969, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %971 = acos(%970) /* ty=Tensor[(15, 4, 4), float32] */;
  %972 = @func_3629() /* ty=Tensor[(15, 4, 4), float32] */;
  (%965, %971, %972)
}

def @func_4886() -> (Tensor[(15, 4, 4), float32],) {
  %973 = @func_2457() /* ty=Tensor[(15, 4, 4), float32] */;
  (%973,)
}

def @func_698() -> (Tensor[(15, 4, 4), float32],) {
  %974 = cast(meta[relay.Constant][39] /* ty=Tensor[(15, 4, 4), float32] */, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %975 = sinh(%974) /* ty=Tensor[(15, 4, 4), float32] */;
  (%975,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3843() -> Tensor[(66), int64] {
  @func_3841() /* ty=Tensor[(66), int64] */
}

def @func_5592() -> (Tensor[(672), float64], Tensor[(15, 4, 4), bool]) {
  %4 = fn () -> (Tensor[(672), float64], Tensor[(15, 4, 4), bool]) {
    %0 = @func_4166() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
    %1 = @func_3985() /* ty=(Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), bool]) */;
    %2 = %0.1;
    %3 = %1.2;
    (%2, %3)
  };
  %4() /* ty=(Tensor[(672), float64], Tensor[(15, 4, 4), bool]) */
}

def @func_2901(%var_2898: Tensor[(24, 26), float64], %var_2899: Tensor[(66), int64], %var_2900: Tensor[(24, 26), float64]) -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(66), int64], Tensor[(182, 2), float32], Tensor[(15, 4, 4), float64], Tensor[(7, 4, 12), float64], Tensor[(4, 84), float64], Tensor[(24, 26), int32], Tensor[(15, 4, 4), float32]) {
  @func_2896(%var_2898, %var_2899, %var_2900) /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(66), int64], Tensor[(182, 2), float32], Tensor[(15, 4, 4), float64], Tensor[(7, 4, 12), float64], Tensor[(4, 84), float64], Tensor[(24, 26), int32], Tensor[(15, 4, 4), float32]) */
}

def @func_9733(%var_9731: Tensor[(416), int32]) -> (Tensor[(15, 4, 4), float32], Tensor[(416), uint64]) {
  @func_9730(%var_9731) /* ty=(Tensor[(15, 4, 4), float32], Tensor[(416), uint64]) */
}

def @func_7233() -> Tensor[(15, 4, 4), float32] {
  %6 = fn () -> Tensor[(15, 4, 4), float32] {
    %5 = @func_5539() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
    %5.0
  };
  %6() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_6160() -> (Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32], Tensor[(672), float64]) {
  @func_6158() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32], Tensor[(672), float64]) */
}

def @func_4997(%var_4995: uint32, %var_4996: Tensor[(2, 10, 3), uint32]) -> (Tensor[(2, 10, 3), uint32], Tensor[(15, 4, 4), float32]) {
  @func_4993(%var_4995, %var_4996) /* ty=(Tensor[(2, 10, 3), uint32], Tensor[(15, 4, 4), float32]) */
}

def @func_7866() -> (Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(15, 4, 4), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  @func_7864() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(15, 4, 4), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */
}

def @func_11207(%var_11205: Tensor[(350), float32]) -> (Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32], Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(350), bool]) {
  @func_11204(%var_11205) /* ty=(Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32], Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(350), bool]) */
}

def @func_4040() -> Tensor[(672), float64] {
  %7 = @func_2972() /* ty=(Tensor[(672), float64], Tensor[(15, 4, 4), float32]) */;
  %7.0
}

def @func_1397() -> Tensor[(15, 4, 4), float32] {
  %8 = @func_752() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %8.0
}

def @func_1532(%var_1530: Tensor[(13, 2, 16), int32]) -> (Tensor[(13, 2, 16), bool],) {
  @func_1529(%var_1530) /* ty=(Tensor[(13, 2, 16), bool],) */
}

def @func_9885() -> Tensor[(15, 4, 4), float32] {
  @func_9883() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_10944() -> (Tensor[(15, 4, 4), int32], Tensor[(15, 4, 4), float32]) {
  %13 = fn () -> (Tensor[(15, 4, 4), int32], Tensor[(15, 4, 4), float32]) {
    %9 = @func_5243() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(1120), float64], Tensor[(2, 14, 13), int16], Tensor[(1452), float64], Tensor[(15, 4, 4), int32]) */;
    %10 = @func_10654() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
    %11 = %9.4;
    %12 = %10.0;
    (%11, %12)
  };
  %13() /* ty=(Tensor[(15, 4, 4), int32], Tensor[(15, 4, 4), float32]) */
}

def @func_7728() -> (Tensor[(15, 4, 4), float32], Tensor[(672), float64]) {
  %17 = fn () -> (Tensor[(15, 4, 4), float32], Tensor[(672), float64]) {
    %14 = @func_5289() /* ty=(Tensor[(672), float64], Tensor[(672), float64]) */;
    %15 = @func_2457() /* ty=Tensor[(15, 4, 4), float32] */;
    %16 = %14.1;
    (%15, %16)
  };
  %17() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */
}

def @func_7390() -> (Tensor[(15, 4, 4), float32], Tensor[(672), float64]) {
  @func_7388() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */
}

def @func_3629() -> Tensor[(15, 4, 4), float32] {
  @func_719() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_6886(%var_6884: Tensor[(520), float32]) -> (Tensor[(15, 4, 4), bool], Tensor[(15, 4, 4), float32], Tensor[(13, 4, 10), float32], Tensor[(520), float32]) {
  @func_6883(%var_6884) /* ty=(Tensor[(15, 4, 4), bool], Tensor[(15, 4, 4), float32], Tensor[(13, 4, 10), float32], Tensor[(520), float32]) */
}

def @func_1369() -> (Tensor[(15, 4, 4), float32], Tensor[(2, 14, 13), int16], Tensor[(672), float64], Tensor[(182, 2), float32]) {
  @func_1367() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(2, 14, 13), int16], Tensor[(672), float64], Tensor[(182, 2), float32]) */
}

def @func_1529(%var_1517: Tensor[(13, 2, 16), int32]) -> (Tensor[(13, 2, 16), bool],) {
  %18 = @func_1161() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32]) */;
  %19 = %18.1;
  %20 = cast(%var_1517, dtype="bool") /* ty=Tensor[(13, 2, 16), bool] */;
  %21 = shape_of(%19, dtype="int32") /* ty=Tensor[(3), int32] */;
  %22 = cast(%19, dtype="bool") /* ty=Tensor[(13, 2, 16), bool] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %24 = equal(%22, %23) /* ty=Tensor[(13, 2, 16), bool] */;
  (%24,)
}

def @func_1971(%var_1970: Tensor[(15, 4, 4), float32]) -> (Tensor[(15, 4, 4), bool], Tensor[(2, 14, 13), int16], Tensor[(91, 4), float64]) {
  %38 = fn (%var_1928: Tensor[(15, 4, 4), float32]) -> (Tensor[(15, 4, 4), bool], Tensor[(2, 14, 13), int16], Tensor[(91, 4), float64]) {
    %25 = @func_1810() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
    %26 = %25.0;
    %27 = cast(%var_1928, dtype="bool") /* ty=Tensor[(15, 4, 4), bool] */;
    %28 = shape_of(%26, dtype="int32") /* ty=Tensor[(3), int32] */;
    %29 = cast(%26, dtype="bool") /* ty=Tensor[(15, 4, 4), bool] */;
    %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %31 = cast(meta[relay.Constant][0] /* ty=Tensor[(91, 4), int16] */, dtype="int16") /* ty=Tensor[(91, 4), int16] */;
    %32 = reshape(%31, newshape=[2, 14, 13]) /* ty=Tensor[(2, 14, 13), int16] */;
    %33 = @func_642(%32) /* ty=(Tensor[(2, 14, 13), int16],) */;
    %34 = cast(meta[relay.Constant][0] /* ty=Tensor[(91, 4), int16] */, dtype="float64") /* ty=Tensor[(91, 4), float64] */;
    %35 = greater_equal(%29, %30) /* ty=Tensor[(15, 4, 4), bool] */;
    %36 = %33.0;
    %37 = acos(%34) /* ty=Tensor[(91, 4), float64] */;
    (%35, %36, %37)
  };
  %38(%var_1970) /* ty=(Tensor[(15, 4, 4), bool], Tensor[(2, 14, 13), int16], Tensor[(91, 4), float64]) */
}

def @func_3631() -> Tensor[(15, 4, 4), float32] {
  @func_3629() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_6375(%var_6373: Tensor[(2, 10, 4), float32], %var_6374: Tensor[(2, 10, 4), float32]) -> (Tensor[(2, 10, 4), float32], Tensor[(2, 10, 4), float32]) {
  %46 = fn (%var_6359: Tensor[(2, 10, 4), float32], %var_6360: Tensor[(2, 10, 4), float32]) -> (Tensor[(2, 10, 4), float32], Tensor[(2, 10, 4), float32]) {
    %39 = cast(%var_6360, dtype="float32") /* ty=Tensor[(2, 10, 4), float32] */;
    %40 = shape_of(%var_6359, dtype="int32") /* ty=Tensor[(3), int32] */;
    %41 = cast(%var_6359, dtype="float32") /* ty=Tensor[(2, 10, 4), float32] */;
    %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %43 = cast(%var_6359, dtype="float32") /* ty=Tensor[(2, 10, 4), float32] */;
    %44 = divide(%41, %42) /* ty=Tensor[(2, 10, 4), float32] */;
    %45 = rsqrt(%43) /* ty=Tensor[(2, 10, 4), float32] */;
    (%44, %45)
  };
  %46(%var_6373, %var_6374) /* ty=(Tensor[(2, 10, 4), float32], Tensor[(2, 10, 4), float32]) */
}

def @func_6993() -> (Tensor[(13, 2, 16), int32],) {
  %49 = fn () -> (Tensor[(13, 2, 16), int32],) {
    %47 = @func_1161() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32]) */;
    %48 = %47.1;
    (%48,)
  };
  %49() /* ty=(Tensor[(13, 2, 16), int32],) */
}

def @func_5760() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  @func_5758() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */
}

def @func_6935() -> (Tensor[(15, 4, 4), float32],) {
  @func_6933() /* ty=(Tensor[(15, 4, 4), float32],) */
}

def @func_3117(%var_3116: Tensor[(2, 15, 1), float64]) -> (Tensor[(15, 4, 4), float32], Tensor[(2, 15, ?), float32]) {
  %59 = fn (%var_3079: Tensor[(2, 15, 1), float64]) -> (Tensor[(15, 4, 4), float32], Tensor[(2, 15, ?), float32]) {
    %50 = @func_2310() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
    %51 = cast(%var_3079, dtype="float64") /* ty=Tensor[(2, 15, 1), float64] */;
    %52 = log(%51) /* ty=Tensor[(2, 15, 1), float64] */;
    %53 = cast(%var_3079, dtype="float32") /* ty=Tensor[(2, 15, 1), float32] */;
    %54 = shape_of(%52, dtype="int32") /* ty=Tensor[(3), int32] */;
    %55 = cast(%52, dtype="float32") /* ty=Tensor[(2, 15, 1), float32] */;
    %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %57 = %50.0;
    %58 = floor_mod(%55, %56) /* ty=Tensor[(2, 15, ?), float32] */;
    (%57, %58)
  };
  %59(%var_3116) /* ty=(Tensor[(15, 4, 4), float32], Tensor[(2, 15, ?), float32]) */
}

def @func_2458() -> Tensor[(15, 4, 4), float32] {
  %61 = fn () -> Tensor[(15, 4, 4), float32] {
    %60 = @func_1161() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32]) */;
    %60.0
  };
  %61() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_9914() -> (Tensor[(66), int64],) {
  %62 = @func_3841() /* ty=Tensor[(66), int64] */;
  (%62,)
}

def @func_1506(%var_1504: Tensor[(15, 4, 4), float32]) -> Tensor[(15, 4, 4), float64] {
  @func_1503(%var_1504) /* ty=Tensor[(15, 4, 4), float64] */
}

def @func_5635(%var_5633: Tensor[(1120), float64]) -> (Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(11, 11, 12), uint32], Tensor[(1120), float64], Tensor[(14, 10, 8), bool], Tensor[(15, 4, 4), float64], Tensor[(16, 14, 3), float64], Tensor[(13, 2, 16), bool], Tensor[(2, 208), int32]) {
  @func_5632(%var_5633) /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(11, 11, 12), uint32], Tensor[(1120), float64], Tensor[(14, 10, 8), bool], Tensor[(15, 4, 4), float64], Tensor[(16, 14, 3), float64], Tensor[(13, 2, 16), bool], Tensor[(2, 208), int32]) */
}

def @func_1430() -> (Tensor[(15, 4, 4), float32], Tensor[(672), float64]) {
  %63 = @func_752() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %64 = %63.0;
  %65 = cast(%64, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %66 = @func_1227() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(16, 14, 3), float64]) */;
  %67 = atan(%65) /* ty=Tensor[(15, 4, 4), float32] */;
  %68 = %66.1;
  (%67, %68)
}

def @func_9587() -> (Tensor[(15, 4, 4), float32], Tensor[(13, 4, 10), float32], Tensor[(520), float64]) {
  %76 = fn () -> (Tensor[(15, 4, 4), float32], Tensor[(13, 4, 10), float32], Tensor[(520), float64]) {
    %69 = cast(meta[relay.Constant][1] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
    %70 = reshape(%69, newshape=[520]) /* ty=Tensor[(520), float32] */;
    %71 = @func_6883(%70) /* ty=(Tensor[(15, 4, 4), bool], Tensor[(15, 4, 4), float32], Tensor[(13, 4, 10), float32], Tensor[(520), float32]) */;
    %72 = cast(meta[relay.Constant][1] /* ty=Tensor[(520), float32] */, dtype="float64") /* ty=Tensor[(520), float64] */;
    %73 = @func_3199() /* ty=Tensor[(15, 4, 4), float32] */;
    %74 = %71.2;
    %75 = cos(%72) /* ty=Tensor[(520), float64] */;
    (%73, %74, %75)
  };
  %76() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(13, 4, 10), float32], Tensor[(520), float64]) */
}

def @func_10540() -> (Tensor[(15, 4, 4), float32],) {
  @func_10538() /* ty=(Tensor[(15, 4, 4), float32],) */
}

def @func_2928() -> Tensor[(13, 2, 16), int32] {
  @func_2926() /* ty=Tensor[(13, 2, 16), int32] */
}

def @func_7591(%var_7590: Tensor[(1, 15, 4), float64]) -> (Tensor[(6, 15, 4), float64],) {
  %80 = fn (%var_7575: Tensor[(1, 15, 4), float64]) -> (Tensor[(6, 15, 4), float64],) {
    %77 = cast(%var_7575, dtype="float64") /* ty=Tensor[(1, 15, 4), float64] */;
    %78 = cast(meta[relay.Constant][2] /* ty=Tensor[(6, 15, 4), float64] */, dtype="float64") /* ty=Tensor[(6, 15, 4), float64] */;
    %79 = floor_divide(%77, %78) /* ty=Tensor[(6, 15, 4), float64] */;
    (%79,)
  };
  %80(%var_7590) /* ty=(Tensor[(6, 15, 4), float64],) */
}

def @func_10733(%var_10701: Tensor[(350), float32]) -> (Tensor[(15, 4, 4), float32], Tensor[(5, 10, 7), float32], Tensor[(350), float32]) {
  %81 = @func_3033() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %82 = cast(%var_10701, dtype="float32") /* ty=Tensor[(350), float32] */;
  %83 = reshape(%82, newshape=[350, 1]) /* ty=Tensor[(350, 1), float32] */;
  %84 = @func_5170(%83) /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(5, 10, 7), float32], Tensor[(350, 364), float32], Tensor[(15, 4, 4), float32]) */;
  %85 = %81.1;
  %86 = %84.3;
  (%85, %86, %var_10701)
}

def @func_645(%var_643: Tensor[(2, 14, 13), int16]) -> (Tensor[(2, 14, 13), int16],) {
  @func_642(%var_643) /* ty=(Tensor[(2, 14, 13), int16],) */
}

def @func_7612() -> (Tensor[(15, 4, 4), float32],) {
  %87 = @func_3033() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %88 = %87.0;
  (%88,)
}

def @func_9916() -> (Tensor[(66), int64],) {
  @func_9914() /* ty=(Tensor[(66), int64],) */
}

def @func_11238() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  %89 = @func_698() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %90 = %89.0;
  %91 = @func_6561() /* ty=Tensor[(15, 4, 4), float32] */;
  (%90, %91)
}

def @func_7102(%var_7100: Tensor[(13, 2, 16), int32]) -> (Tensor[(672), float64], Tensor[(13, 2, 16), uint32]) {
  @func_7099(%var_7100) /* ty=(Tensor[(672), float64], Tensor[(13, 2, 16), uint32]) */
}

def @func_3781(%var_3779: Tensor[(1, 3, 8), float64]) -> (Tensor[(1, 3, 8), float64], Tensor[(13, 2, 16), bool], Tensor[(416), int64]) {
  @func_3778(%var_3779) /* ty=(Tensor[(1, 3, 8), float64], Tensor[(13, 2, 16), bool], Tensor[(416), int64]) */
}

def @func_9049() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), uint32]) {
  %92 = @func_2371() /* ty=Tensor[(15, 4, 4), float32] */;
  %93 = cast(%92, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %94 = reshape(%93, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float32] */;
  %95 = @func_2031(%94) /* ty=Tensor[(15, 4, 4), uint32] */;
  (%92, %95)
}

def @func_10039() -> Tensor[(15, 4, 4), float32] {
  %96 = @func_8616() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), float64]) */;
  %96.0
}

def @func_4860(%var_4858: Tensor[(416), int64], %var_4859: Tensor[(99, 2), float32]) -> (Tensor[(66), int64], Tensor[(13, 2, 16), bool], Tensor[(416), int64], Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(3, 6, 11), float64], float32, Tensor[(99, 2), float32]) {
  %117 = fn (%var_4770: Tensor[(416), int64], %var_4843: Tensor[(99, 2), float32]) -> (Tensor[(66), int64], Tensor[(13, 2, 16), bool], Tensor[(416), int64], Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(3, 6, 11), float64], float32, Tensor[(99, 2), float32]) {
    %97 = cast(%var_4770, dtype="int64") /* ty=Tensor[(416), int64] */;
    %98 = reshape(%97, newshape=[13, 2, 16]) /* ty=Tensor[(13, 2, 16), int64] */;
    %99 = @func_1430() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
    %100 = @func_1161() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32]) */;
    %101 = @func_2972() /* ty=(Tensor[(672), float64], Tensor[(15, 4, 4), float32]) */;
    %102 = @func_3985() /* ty=(Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), bool]) */;
    %103 = @func_698() /* ty=(Tensor[(15, 4, 4), float32],) */;
    %104 = cast(-4.18804f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %105 = cast(%var_4843, dtype="float32") /* ty=Tensor[(99, 2), float32] */;
    %106 = reshape(%104, newshape=[]) /* ty=float32 */;
    %107 = reshape(%105, newshape=[3, 6, 11]) /* ty=Tensor[(3, 6, 11), float32] */;
    %108 = @func_440(%106, %107) /* ty=(Tensor[(3, 6, 11), float32], Tensor[(3, 6, 11), float64]) */;
    %109 = @func_3841() /* ty=Tensor[(66), int64] */;
    %110 = @func_915(%98) /* ty=Tensor[(13, 2, 16), bool] */;
    %111 = %99.1;
    %112 = %100.0;
    %113 = %101.1;
    %114 = %102.1;
    %115 = %103.0;
    %116 = %108.1;
    (%109, %110, %var_4770, %111, %112, %113, %114, %115, %116, -4.18804f /* ty=float32 */, %var_4843)
  };
  %117(%var_4858, %var_4859) /* ty=(Tensor[(66), int64], Tensor[(13, 2, 16), bool], Tensor[(416), int64], Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(3, 6, 11), float64], float32, Tensor[(99, 2), float32]) */
}

def @func_3201() -> Tensor[(15, 4, 4), float32] {
  @func_3199() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_1328(%var_1317: Tensor[(14, 9, 3), float64]) -> Tensor[(14, 9, 3), bool] {
  %118 = cast(%var_1317, dtype="float64") /* ty=Tensor[(14, 9, 3), float64] */;
  %119 = atan(%118) /* ty=Tensor[(14, 9, 3), float64] */;
  %120 = cast(%119, dtype="bool") /* ty=Tensor[(14, 9, 3), bool] */;
  %121 = shape_of(%var_1317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %122 = cast(%var_1317, dtype="bool") /* ty=Tensor[(14, 9, 3), bool] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%122, %123) /* ty=Tensor[(14, 9, 3), bool] */
}

def @func_915(%var_904: Tensor[(13, 2, 16), int64]) -> Tensor[(13, 2, 16), bool] {
  %124 = cast(meta[relay.Constant][3] /* ty=Tensor[(13, 2, 16), int64] */, dtype="bool") /* ty=Tensor[(13, 2, 16), bool] */;
  %125 = shape_of(%var_904, dtype="int32") /* ty=Tensor[(3), int32] */;
  %126 = cast(%var_904, dtype="bool") /* ty=Tensor[(13, 2, 16), bool] */;
  %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%126, %127) /* ty=Tensor[(13, 2, 16), bool] */
}

def @func_10656() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  @func_10654() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */
}

def @func_7318() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  %132 = fn () -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
    %128 = @func_6933() /* ty=(Tensor[(15, 4, 4), float32],) */;
    %129 = @func_5420() /* ty=(Tensor[(15, 4, 4), float32],) */;
    %130 = %128.0;
    %131 = %129.0;
    (%130, %131)
  };
  %132() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */
}

def @func_8995() -> (Tensor[(672), float64],) {
  @func_8993() /* ty=(Tensor[(672), float64],) */
}

def @func_7515(%var_7513: Tensor[(9, 6, 10), uint16], %var_7514: Tensor[(9, 6, 10), uint16]) -> (Tensor[(9, 6, 10), bool], Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(9, 6, 10), uint8]) {
  @func_7511(%var_7513, %var_7514) /* ty=(Tensor[(9, 6, 10), bool], Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(9, 6, 10), uint8]) */
}

def @func_6526(%var_6524: Tensor[(66), bool], %var_6525: Tensor[(336), float64]) -> (Tensor[(15, 4, 4), float32], Tensor[(8, 42), float64], Tensor[(66), bool], Tensor[(336), float64]) {
  %141 = fn (%var_6514: Tensor[(66), bool], %var_6515: Tensor[(336), float64]) -> (Tensor[(15, 4, 4), float32], Tensor[(8, 42), float64], Tensor[(66), bool], Tensor[(336), float64]) {
    %133 = @func_2072() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
    %134 = cast(%var_6514, dtype="bool") /* ty=Tensor[(66), bool] */;
    %135 = cast(%var_6515, dtype="float64") /* ty=Tensor[(336), float64] */;
    %136 = reshape(%134, newshape=[66]) /* ty=Tensor[(66), bool] */;
    %137 = reshape(%135, newshape=[8, 42]) /* ty=Tensor[(8, 42), float64] */;
    %138 = @func_3902(%136, %137) /* ty=(Tensor[(11, 14, 11), bool], Tensor[(15, 4, 4), float32], Tensor[(66), bool], Tensor[(15, 4, 4), float32], Tensor[(7, 4, 12), float64], Tensor[(8, 42), float64]) */;
    %139 = %133.1;
    %140 = %138.5;
    (%139, %140, %var_6514, %var_6515)
  };
  %141(%var_6524, %var_6525) /* ty=(Tensor[(15, 4, 4), float32], Tensor[(8, 42), float64], Tensor[(66), bool], Tensor[(336), float64]) */
}

def @func_3351(%var_3350: Tensor[(6, 1, 11), bool]) -> (Tensor[(6, ?, 11), bool], Tensor[(15, 4, 4), float32]) {
  %155 = fn (%var_3310: Tensor[(6, 1, 11), bool]) -> (Tensor[(6, ?, 11), bool], Tensor[(15, 4, 4), float32]) {
    %142 = cast(%var_3310, dtype="float64") /* ty=Tensor[(6, 1, 11), float64] */;
    %143 = asin(%142) /* ty=Tensor[(6, 1, 11), float64] */;
    %144 = cast(%var_3310, dtype="bool") /* ty=Tensor[(6, 1, 11), bool] */;
    %145 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(6, 1, 11), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %146 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 1, 11), bool] */, dtype="bool") /* ty=Tensor[(6, 1, 11), bool] */;
    %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %148 = logical_and(%146, %147) /* ty=Tensor[(6, ?, 11), bool] */;
    %149 = cast(%148, dtype="bool") /* ty=Tensor[(6, ?, 11), bool] */;
    %150 = shape_of(%143, dtype="int32") /* ty=Tensor[(3), int32] */;
    %151 = cast(%143, dtype="bool") /* ty=Tensor[(6, 1, 11), bool] */;
    %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %153 = not_equal(%151, %152) /* ty=Tensor[(6, ?, 11), bool] */;
    %154 = @func_719() /* ty=Tensor[(15, 4, 4), float32] */;
    (%153, %154)
  };
  %155(%var_3350) /* ty=(Tensor[(6, ?, 11), bool], Tensor[(15, 4, 4), float32]) */
}

def @func_440(%var_401: float32, %var_402: Tensor[(3, 6, 11), float32]) -> (Tensor[(3, 6, 11), float32], Tensor[(3, 6, 11), float64]) {
  %156 = cast(%var_401, dtype="float32") /* ty=float32 */;
  %157 = cast(%var_402, dtype="float32") /* ty=Tensor[(3, 6, 11), float32] */;
  %158 = cast(%var_401, dtype="float32") /* ty=float32 */;
  %159 = cast(%var_402, dtype="float32") /* ty=Tensor[(3, 6, 11), float32] */;
  %160 = mod(%158, %159) /* ty=Tensor[(3, 6, 11), float32] */;
  %161 = cast(%var_402, dtype="float64") /* ty=Tensor[(3, 6, 11), float64] */;
  %162 = shape_of(%160, dtype="int32") /* ty=Tensor[(3), int32] */;
  %163 = cast(%160, dtype="float64") /* ty=Tensor[(3, 6, 11), float64] */;
  %164 = dyn.reshape(%161, %162, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %165 = power(%156, %157) /* ty=Tensor[(3, 6, 11), float32] */;
  %166 = floor_divide(%163, %164) /* ty=Tensor[(3, 6, 11), float64] */;
  (%165, %166)
}

def @func_2256() -> Tensor[(15, 4, 4), float32] {
  @func_1397() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_9610() -> Tensor[(15, 4, 4), float32] {
  %168 = fn () -> Tensor[(15, 4, 4), float32] {
    %167 = @func_8798() /* ty=(Tensor[(15, 4, 4), float32],) */;
    %167.0
  };
  %168() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_1228() -> (Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(16, 14, 3), float64]) {
  %176 = fn () -> (Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(16, 14, 3), float64]) {
    %169 = cast(meta[relay.Constant][5] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
    %170 = reshape(%169, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), float64] */;
    %171 = @func_618(%170) /* ty=(Tensor[(16, 14, 3), float64],) */;
    %172 = %171.0;
    %173 = cast(%172, dtype="float64") /* ty=Tensor[(16, 14, 3), float64] */;
    %174 = @func_719() /* ty=Tensor[(15, 4, 4), float32] */;
    %175 = asinh(%173) /* ty=Tensor[(16, 14, 3), float64] */;
    (%174, meta[relay.Constant][5] /* ty=Tensor[(672), float64] */, %175)
  };
  %176() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(16, 14, 3), float64]) */
}

def @func_6473() -> (Tensor[(15, 4, 4), float32], Tensor[(672), float64]) {
  %180 = fn () -> (Tensor[(15, 4, 4), float32], Tensor[(672), float64]) {
    %177 = @func_1634() /* ty=(Tensor[(15, 4, 4), float32],) */;
    %178 = %177.0;
    %179 = @func_4040() /* ty=Tensor[(672), float64] */;
    (%178, %179)
  };
  %180() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */
}

def @func_5420() -> (Tensor[(15, 4, 4), float32],) {
  %181 = @func_2371() /* ty=Tensor[(15, 4, 4), float32] */;
  (%181,)
}

def @func_4317() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  %182 = @func_2371() /* ty=Tensor[(15, 4, 4), float32] */;
  %183 = cast(%182, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %184 = reshape(%183, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float32] */;
  %185 = @func_3692(%184) /* ty=(Tensor[(15, 4, 4), bool], Tensor[(15, 4, 4), float32]) */;
  %186 = %185.1;
  (%182, %186)
}

def @func_4587() -> (Tensor[(13, 2, 16), float64], Tensor[(13, 2, 16), float32], Tensor[(13, 2, 16), uint8]) {
  %187 = @func_2926() /* ty=Tensor[(13, 2, 16), int32] */;
  %188 = cast(%187, dtype="float64") /* ty=Tensor[(13, 2, 16), float64] */;
  %189 = cast(%187, dtype="float32") /* ty=Tensor[(13, 2, 16), float32] */;
  %190 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 2, 16), int32] */, dtype="uint8") /* ty=Tensor[(13, 2, 16), uint8] */;
  %191 = shape_of(%187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %192 = cast(%187, dtype="uint8") /* ty=Tensor[(13, 2, 16), uint8] */;
  %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %194 = log2(%188) /* ty=Tensor[(13, 2, 16), float64] */;
  %195 = tan(%189) /* ty=Tensor[(13, 2, 16), float32] */;
  %196 = subtract(%192, %193) /* ty=Tensor[(13, 2, 16), uint8] */;
  (%194, %195, %196)
}

def @func_2578() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  @func_2576() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */
}

def @func_1503(%var_1491: Tensor[(15, 4, 4), float32]) -> Tensor[(15, 4, 4), float64] {
  %197 = @func_719() /* ty=Tensor[(15, 4, 4), float32] */;
  %198 = cast(%var_1491, dtype="float64") /* ty=Tensor[(15, 4, 4), float64] */;
  %199 = shape_of(%197, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(%197, dtype="float64") /* ty=Tensor[(15, 4, 4), float64] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%200, %201) /* ty=Tensor[(15, 4, 4), float64] */
}

def @func_6816() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  %202 = @func_2457() /* ty=Tensor[(15, 4, 4), float32] */;
  %203 = cast(%202, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %204 = reshape(%203, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float32] */;
  %205 = @func_4104(%204) /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), uint32]) */;
  %206 = %205.0;
  (%202, %206)
}

def @func_1686() -> (Tensor[(15, 4, 4), float32],) {
  %207 = @func_698() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %208 = %207.0;
  (%208,)
}

def @func_11042(%var_11041: Tensor[(2, 208), int32]) -> (Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(2, 208), float32], Tensor[(2, 208), float64], Tensor[(2, 208), bool], Tensor[(15, 4, 4), float32]) {
  %237 = fn (%var_10967: Tensor[(2, 208), int32]) -> (Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(2, 208), float32], Tensor[(2, 208), float64], Tensor[(2, 208), bool], Tensor[(15, 4, 4), float32]) {
    %209 = @func_7708() /* ty=(Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), uint32]) */;
    %210 = cast(%var_10967, dtype="int32") /* ty=Tensor[(2, 208), int32] */;
    %211 = reshape(%210, newshape=[13, 2, 16]) /* ty=Tensor[(13, 2, 16), int32] */;
    %212 = @func_1529(%211) /* ty=(Tensor[(13, 2, 16), bool],) */;
    %213 = %212.0;
    %214 = cast(%213, dtype="float64") /* ty=Tensor[(13, 2, 16), float64] */;
    %215 = shape_of(%var_10967, dtype="int32") /* ty=Tensor[(2), int32] */;
    %216 = cast(%var_10967, dtype="float64") /* ty=Tensor[(2, 208), float64] */;
    %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %218 = power(%216, %217) /* ty=Tensor[(2, 208), float64] */;
    %219 = cast(%var_10967, dtype="float32") /* ty=Tensor[(2, 208), float32] */;
    %220 = shape_of(%218, dtype="int32") /* ty=Tensor[(2), int32] */;
    %221 = cast(%218, dtype="float32") /* ty=Tensor[(2, 208), float32] */;
    %222 = dyn.reshape(%219, %220, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %223 = cast(%var_10967, dtype="float64") /* ty=Tensor[(2, 208), float64] */;
    %224 = erf(%223) /* ty=Tensor[(2, 208), float64] */;
    %225 = cast(%224, dtype="float64") /* ty=Tensor[(2, 208), float64] */;
    %226 = cast(meta[relay.Constant][7] /* ty=Tensor[(2, 208), float64] */, dtype="bool") /* ty=Tensor[(2, 208), bool] */;
    %227 = shape_of(%224, dtype="int32") /* ty=Tensor[(2), int32] */;
    %228 = cast(%224, dtype="bool") /* ty=Tensor[(2, 208), bool] */;
    %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %230 = @func_2576() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
    %231 = @func_7232() /* ty=Tensor[(15, 4, 4), float32] */;
    %232 = %209.0;
    %233 = mod(%221, %222) /* ty=Tensor[(2, 208), float32] */;
    %234 = sigmoid(%225) /* ty=Tensor[(2, 208), float64] */;
    %235 = greater(%228, %229) /* ty=Tensor[(2, 208), bool] */;
    %236 = %230.1;
    (%231, %232, %233, %234, %235, %236)
  };
  %237(%var_11041) /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(2, 208), float32], Tensor[(2, 208), float64], Tensor[(2, 208), bool], Tensor[(15, 4, 4), float32]) */
}

def @func_8800() -> (Tensor[(15, 4, 4), float32],) {
  @func_8798() /* ty=(Tensor[(15, 4, 4), float32],) */
}

def @func_6158() -> (Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32], Tensor[(672), float64]) {
  %238 = @func_4886() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %239 = @func_3985() /* ty=(Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), bool]) */;
  %240 = %238.0;
  %241 = @func_2926() /* ty=Tensor[(13, 2, 16), int32] */;
  %242 = %239.0;
  (%240, %241, %242)
}

def @func_2926() -> Tensor[(13, 2, 16), int32] {
  %243 = @func_1161() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32]) */;
  %243.1
}

def @func_1161() -> (Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32]) {
  %244 = @func_752() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %245 = cast(meta[relay.Constant][8] /* ty=Tensor[(416), int64] */, dtype="int64") /* ty=Tensor[(416), int64] */;
  %246 = reshape(%245, newshape=[13, 2, 16]) /* ty=Tensor[(13, 2, 16), int64] */;
  %247 = @func_915(%246) /* ty=Tensor[(13, 2, 16), bool] */;
  %248 = cast(meta[relay.Constant][8] /* ty=Tensor[(416), int64] */, dtype="int32") /* ty=Tensor[(416), int32] */;
  %249 = shape_of(%247, dtype="int32") /* ty=Tensor[(3), int32] */;
  %250 = cast(%247, dtype="int32") /* ty=Tensor[(13, 2, 16), int32] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %252 = %244.0;
  %253 = multiply(%250, %251) /* ty=Tensor[(13, 2, 16), int32] */;
  (%252, %253)
}

def @func_8882() -> (Tensor[(15, 4, 4), float32], Tensor[(350), float32], Tensor[(10, 13, 16), float32]) {
  %274 = fn () -> (Tensor[(15, 4, 4), float32], Tensor[(350), float32], Tensor[(10, 13, 16), float32]) {
    %254 = cast(meta[relay.Constant][9] /* ty=Tensor[(350), float32] */, dtype="float64") /* ty=Tensor[(350), float64] */;
    %255 = acosh(%254) /* ty=Tensor[(350), float64] */;
    %256 = cast(meta[relay.Constant][9] /* ty=Tensor[(350), float32] */, dtype="float32") /* ty=Tensor[(350), float32] */;
    %257 = cast(meta[relay.Constant][9] /* ty=Tensor[(350), float32] */, dtype="float32") /* ty=Tensor[(350), float32] */;
    %258 = reshape(%256, newshape=[5, 10, 7]) /* ty=Tensor[(5, 10, 7), float32] */;
    %259 = reshape(%257, newshape=[5, 10, 7]) /* ty=Tensor[(5, 10, 7), float32] */;
    %260 = @func_3257(%258, %259) /* ty=(Tensor[(5, 10, 7), float32], Tensor[(15, 4, 4), float64], Tensor[(240), float32], Tensor[(5, 10, 7), bool]) */;
    %261 = %260.3;
    %262 = cast(%261, dtype="uint16") /* ty=Tensor[(5, 10, 7), uint16] */;
    %263 = shape_of(%255, dtype="int32") /* ty=Tensor[(1), int32] */;
    %264 = cast(%255, dtype="uint16") /* ty=Tensor[(350), uint16] */;
    %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %266 = multiply(%264, %265) /* ty=Tensor[(350), uint16] */;
    %267 = cast(%261, dtype="float32") /* ty=Tensor[(5, 10, 7), float32] */;
    %268 = shape_of(%266, dtype="int32") /* ty=Tensor[(1), int32] */;
    %269 = cast(%266, dtype="float32") /* ty=Tensor[(350), float32] */;
    %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?), float32] */;
    %271 = @func_3629() /* ty=Tensor[(15, 4, 4), float32] */;
    %272 = divide(%269, %270) /* ty=Tensor[(350), float32] */;
    %273 = @func_6406() /* ty=Tensor[(10, 13, 16), float32] */;
    (%271, %272, %273)
  };
  %274() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(350), float32], Tensor[(10, 13, 16), float32]) */
}

def @func_7388() -> (Tensor[(15, 4, 4), float32], Tensor[(672), float64]) {
  %275 = @func_1686() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %276 = %275.0;
  %277 = @func_4040() /* ty=Tensor[(672), float64] */;
  (%276, %277)
}

def @func_3905(%var_3903: Tensor[(66), bool], %var_3904: Tensor[(8, 42), float64]) -> (Tensor[(11, 14, 11), bool], Tensor[(15, 4, 4), float32], Tensor[(66), bool], Tensor[(15, 4, 4), float32], Tensor[(7, 4, 12), float64], Tensor[(8, 42), float64]) {
  %290 = fn (%var_3874: Tensor[(66), bool], %var_3896: Tensor[(8, 42), float64]) -> (Tensor[(11, 14, 11), bool], Tensor[(15, 4, 4), float32], Tensor[(66), bool], Tensor[(15, 4, 4), float32], Tensor[(7, 4, 12), float64], Tensor[(8, 42), float64]) {
    %278 = cast(meta[relay.Constant][10] /* ty=uint16 */, dtype="bool") /* ty=bool */;
    %279 = cast(meta[relay.Constant][11] /* ty=Tensor[(11, 14, 11), uint16] */, dtype="bool") /* ty=Tensor[(11, 14, 11), bool] */;
    %280 = cast(%var_3874, dtype="bool") /* ty=Tensor[(66), bool] */;
    %281 = reshape(%280, newshape=[6, 1, 11]) /* ty=Tensor[(6, 1, 11), bool] */;
    %282 = @func_3349(%281) /* ty=(Tensor[(6, ?, 11), bool], Tensor[(15, 4, 4), float32]) */;
    %283 = cast(%var_3896, dtype="float64") /* ty=Tensor[(8, 42), float64] */;
    %284 = reshape(%283, newshape=[7, 4, 12]) /* ty=Tensor[(7, 4, 12), float64] */;
    %285 = @func_572(%284) /* ty=(Tensor[(7, 4, 12), float64],) */;
    %286 = less_equal(%278, %279) /* ty=Tensor[(11, 14, 11), bool] */;
    %287 = %282.1;
    %288 = @func_2659() /* ty=Tensor[(15, 4, 4), float32] */;
    %289 = %285.0;
    (%286, %287, %var_3874, %288, %289, %var_3896)
  };
  %290(%var_3903, %var_3904) /* ty=(Tensor[(11, 14, 11), bool], Tensor[(15, 4, 4), float32], Tensor[(66), bool], Tensor[(15, 4, 4), float32], Tensor[(7, 4, 12), float64], Tensor[(8, 42), float64]) */
}

def @func_5842() -> Tensor[(15, 4, 4), float32] {
  @func_5840() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_8973() -> (Tensor[(672), float64], Tensor[(15, 4, 4), float32]) {
  %295 = fn () -> (Tensor[(672), float64], Tensor[(15, 4, 4), float32]) {
    %291 = @func_5071() /* ty=(Tensor[(364), int16], Tensor[(672), float64]) */;
    %292 = @func_6933() /* ty=(Tensor[(15, 4, 4), float32],) */;
    %293 = %291.1;
    %294 = %292.0;
    (%293, %294)
  };
  %295() /* ty=(Tensor[(672), float64], Tensor[(15, 4, 4), float32]) */
}

def @func_8505() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), bool], Tensor[(15, 4, 4), float32]) {
  %296 = @func_8467() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %297 = %296.0;
  %298 = cast(%297, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %299 = reshape(%298, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float32] */;
  %300 = @func_3692(%299) /* ty=(Tensor[(15, 4, 4), bool], Tensor[(15, 4, 4), float32]) */;
  %301 = @func_6816() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %302 = %300.0;
  %303 = %301.0;
  (%297, %302, %303)
}

def @func_6098(%var_6071: Tensor[(15, 9, 12), float32]) -> (Tensor[(15, 9, 12), float32], Tensor[(13, 2, 16), int32], Tensor[(7, 4, 12), float64], Tensor[(624), float64], Tensor[(66), int64]) {
  %304 = cast(%var_6071, dtype="float32") /* ty=Tensor[(15, 9, 12), float32] */;
  %305 = cast(meta[relay.Constant][12] /* ty=Tensor[(624), float64] */, dtype="float64") /* ty=Tensor[(624), float64] */;
  %306 = cast(meta[relay.Constant][13] /* ty=Tensor[(66), int64] */, dtype="int64") /* ty=Tensor[(66), int64] */;
  %307 = cast(meta[relay.Constant][12] /* ty=Tensor[(624), float64] */, dtype="float64") /* ty=Tensor[(624), float64] */;
  %308 = reshape(%305, newshape=[24, 26]) /* ty=Tensor[(24, 26), float64] */;
  %309 = reshape(%306, newshape=[66]) /* ty=Tensor[(66), int64] */;
  %310 = reshape(%307, newshape=[24, 26]) /* ty=Tensor[(24, 26), float64] */;
  %311 = @func_2896(%308, %309, %310) /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(66), int64], Tensor[(182, 2), float32], Tensor[(15, 4, 4), float64], Tensor[(7, 4, 12), float64], Tensor[(4, 84), float64], Tensor[(24, 26), int32], Tensor[(15, 4, 4), float32]) */;
  %312 = cosh(%304) /* ty=Tensor[(15, 9, 12), float32] */;
  %313 = @func_2926() /* ty=Tensor[(13, 2, 16), int32] */;
  %314 = %311.5;
  (%312, %313, %314, meta[relay.Constant][12] /* ty=Tensor[(624), float64] */, meta[relay.Constant][13] /* ty=Tensor[(66), int64] */)
}

def @func_6402() -> Tensor[(13, 2, 16), float32] {
  @func_6400() /* ty=Tensor[(13, 2, 16), float32] */
}

def @func_9883() -> Tensor[(15, 4, 4), float32] {
  %315 = @func_7388() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
  %315.0
}

def @func_10327(%var_10312: float32, %var_10313: Tensor[(16, 12, 7), float32]) -> (Tensor[(16, 12, 7), bool],) {
  %316 = cast(%var_10312, dtype="float32") /* ty=float32 */;
  %317 = cast(%var_10313, dtype="float32") /* ty=Tensor[(16, 12, 7), float32] */;
  %318 = minimum(%316, %317) /* ty=Tensor[(16, 12, 7), float32] */;
  %319 = cast(%318, dtype="float32") /* ty=Tensor[(16, 12, 7), float32] */;
  %320 = acosh(%319) /* ty=Tensor[(16, 12, 7), float32] */;
  %321 = cast(%318, dtype="bool") /* ty=Tensor[(16, 12, 7), bool] */;
  %322 = shape_of(%320, dtype="int32") /* ty=Tensor[(3), int32] */;
  %323 = cast(%320, dtype="bool") /* ty=Tensor[(16, 12, 7), bool] */;
  %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %325 = greater_equal(%323, %324) /* ty=Tensor[(16, 12, 7), bool] */;
  (%325,)
}

def @func_10489() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32], Tensor[(15, 4, 4), float32]) {
  %335 = fn () -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32], Tensor[(15, 4, 4), float32]) {
    %326 = @func_1577() /* ty=(Tensor[(15, 4, 4), float32],) */;
    %327 = %326.0;
    %328 = cast(%327, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
    %329 = reshape(%328, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float32] */;
    %330 = @func_3692(%329) /* ty=(Tensor[(15, 4, 4), bool], Tensor[(15, 4, 4), float32]) */;
    %331 = @func_2310() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
    %332 = %330.1;
    %333 = @func_10081() /* ty=Tensor[(13, 2, 16), int32] */;
    %334 = %331.1;
    (%327, %332, %333, %334)
  };
  %335() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32], Tensor[(15, 4, 4), float32]) */
}

def @func_10206() -> (Tensor[(416), int32], Tensor[(15, 4, 4), float32], Tensor[(672), float64]) {
  @func_10204() /* ty=(Tensor[(416), int32], Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */
}

def @func_10662() -> (Tensor[(672), float64],) {
  %336 = @func_6031() /* ty=(Tensor[(672), float64],) */;
  %337 = %336.0;
  (%337,)
}

def @func_8590(%var_8579: Tensor[(624), float64], %var_8580: Tensor[(66), int64]) -> (Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(624), float64], Tensor[(66), int64]) {
  %338 = @func_3746() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %339 = @func_5289() /* ty=(Tensor[(672), float64], Tensor[(672), float64]) */;
  %340 = cast(%var_8579, dtype="float64") /* ty=Tensor[(624), float64] */;
  %341 = cast(%var_8580, dtype="int64") /* ty=Tensor[(66), int64] */;
  %342 = cast(%var_8579, dtype="float64") /* ty=Tensor[(624), float64] */;
  %343 = reshape(%340, newshape=[24, 26]) /* ty=Tensor[(24, 26), float64] */;
  %344 = reshape(%341, newshape=[66]) /* ty=Tensor[(66), int64] */;
  %345 = reshape(%342, newshape=[24, 26]) /* ty=Tensor[(24, 26), float64] */;
  %346 = @func_2896(%343, %344, %345) /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(66), int64], Tensor[(182, 2), float32], Tensor[(15, 4, 4), float64], Tensor[(7, 4, 12), float64], Tensor[(4, 84), float64], Tensor[(24, 26), int32], Tensor[(15, 4, 4), float32]) */;
  %347 = %338.0;
  %348 = %339.1;
  %349 = %346.8;
  (%347, %348, %349, %var_8579, %var_8580)
}

def @func_5314() -> (Tensor[(364), int16],) {
  @func_5312() /* ty=(Tensor[(364), int16],) */
}

def @func_1811() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  %353 = fn () -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
    %350 = @func_698() /* ty=(Tensor[(15, 4, 4), float32],) */;
    %351 = @func_871() /* ty=Tensor[(15, 4, 4), float32] */;
    %352 = %350.0;
    (%351, %352)
  };
  %353() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */
}

def @func_10434() -> (Tensor[(672), float64], Tensor[(15, 4, 4), float32]) {
  %354 = @func_7864() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(15, 4, 4), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %355 = @func_9178() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %356 = %354.1;
  %357 = %355.0;
  (%356, %357)
}

def @func_5170(%var_5157: Tensor[(350, 1), float32]) -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(5, 10, 7), float32], Tensor[(350, 364), float32], Tensor[(15, 4, 4), float32]) {
  %358 = @func_1577() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %359 = @func_4238() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(416), int32], Tensor[(672), float64]) */;
  %360 = cast(%var_5157, dtype="float32") /* ty=Tensor[(350, 1), float32] */;
  %361 = cast(%var_5157, dtype="float32") /* ty=Tensor[(350, 1), float32] */;
  %362 = reshape(%360, newshape=[5, 10, 7]) /* ty=Tensor[(5, 10, 7), float32] */;
  %363 = reshape(%361, newshape=[5, 10, 7]) /* ty=Tensor[(5, 10, 7), float32] */;
  %364 = @func_3257(%362, %363) /* ty=(Tensor[(5, 10, 7), float32], Tensor[(15, 4, 4), float64], Tensor[(240), float32], Tensor[(5, 10, 7), bool]) */;
  %365 = @func_5071() /* ty=(Tensor[(364), int16], Tensor[(672), float64]) */;
  %366 = %365.0;
  %367 = cast(%var_5157, dtype="float32") /* ty=Tensor[(350, 1), float32] */;
  %368 = cast(%366, dtype="float32") /* ty=Tensor[(364), float32] */;
  %369 = @func_752() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %370 = %358.0;
  %371 = @func_2193() /* ty=Tensor[(15, 4, 4), float32] */;
  %372 = %359.2;
  %373 = %364.0;
  %374 = divide(%367, %368) /* ty=Tensor[(350, 364), float32] */;
  %375 = %369.0;
  (%370, %371, %372, %373, %374, %375)
}

def @func_9051() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), uint32]) {
  @func_9049() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), uint32]) */
}

def @func_4751(%var_4749: Tensor[(13, 9, 2), float32], %var_4750: Tensor[(13, 9, 2), float32]) -> (Tensor[(13, 9, 2), float32],) {
  %381 = fn (%var_4738: Tensor[(13, 9, 2), float32], %var_4739: Tensor[(13, 9, 2), float32]) -> (Tensor[(13, 9, 2), float32],) {
    %376 = cast(%var_4739, dtype="float32") /* ty=Tensor[(13, 9, 2), float32] */;
    %377 = shape_of(%var_4738, dtype="int32") /* ty=Tensor[(3), int32] */;
    %378 = cast(%var_4738, dtype="float32") /* ty=Tensor[(13, 9, 2), float32] */;
    %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %380 = minimum(%378, %379) /* ty=Tensor[(13, 9, 2), float32] */;
    (%380,)
  };
  %381(%var_4749, %var_4750) /* ty=(Tensor[(13, 9, 2), float32],) */
}

def @func_2168(%var_2166: Tensor[(416), int64]) -> (Tensor[(13, 2, 16), bool], Tensor[(416), int64], Tensor[(15, 4, 4), bool], Tensor[(15, 4, 4), uint32], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), uint16]) {
  @func_2165(%var_2166) /* ty=(Tensor[(13, 2, 16), bool], Tensor[(416), int64], Tensor[(15, 4, 4), bool], Tensor[(15, 4, 4), uint32], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), uint16]) */
}

def @func_4888() -> (Tensor[(15, 4, 4), float32],) {
  @func_4886() /* ty=(Tensor[(15, 4, 4), float32],) */
}

def @func_7290() -> (Tensor[(15, 4, 4), float32],) {
  %382 = @func_1397() /* ty=Tensor[(15, 4, 4), float32] */;
  (%382,)
}

def @func_9027() -> (Tensor[(15, 4, 4), float32],) {
  %385 = fn () -> (Tensor[(15, 4, 4), float32],) {
    %383 = @func_752() /* ty=(Tensor[(15, 4, 4), float32],) */;
    %384 = %383.0;
    (%384,)
  };
  %385() /* ty=(Tensor[(15, 4, 4), float32],) */
}

def @func_8097() -> (Tensor[(672), float64],) {
  @func_8095() /* ty=(Tensor[(672), float64],) */
}

def @func_11204(%var_11195: Tensor[(350), float32]) -> (Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32], Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(350), bool]) {
  %386 = @func_7864() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(15, 4, 4), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %387 = cast(meta[relay.Constant][14] /* ty=Tensor[(350), float32] */, dtype="float32") /* ty=Tensor[(350), float32] */;
  %388 = reshape(%387, newshape=[350, 1]) /* ty=Tensor[(350, 1), float32] */;
  %389 = @func_5170(%388) /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(5, 10, 7), float32], Tensor[(350, 364), float32], Tensor[(15, 4, 4), float32]) */;
  %390 = cast(%var_11195, dtype="bool") /* ty=Tensor[(350), bool] */;
  %391 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(350), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %392 = cast(meta[relay.Constant][14] /* ty=Tensor[(350), float32] */, dtype="bool") /* ty=Tensor[(350), bool] */;
  %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?), bool] */;
  %394 = @func_10039() /* ty=Tensor[(15, 4, 4), float32] */;
  %395 = @func_2926() /* ty=Tensor[(13, 2, 16), int32] */;
  %396 = %386.1;
  %397 = %389.1;
  %398 = less(%392, %393) /* ty=Tensor[(350), bool] */;
  (%394, %395, %396, %397, %398)
}

def @func_10204() -> (Tensor[(416), int32], Tensor[(15, 4, 4), float32], Tensor[(672), float64]) {
  %399 = @func_4238() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(416), int32], Tensor[(672), float64]) */;
  %400 = @func_6933() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %401 = %399.1;
  %402 = %400.0;
  %403 = @func_4040() /* ty=Tensor[(672), float64] */;
  (%401, %402, %403)
}

def @func_10251() -> Tensor[(16, 3, 13), float32] {
  %407 = fn () -> Tensor[(16, 3, 13), float32] {
    %404 = @func_1476() /* ty=(Tensor[(13, 2, 16), int32], Tensor[(2, 14, 13), float64], Tensor[(15, 4, 4), float32], Tensor[(16, 3, 13), float64], Tensor[(624), float64], Tensor[(66), int64], Tensor[(15, 4, 4), float32]) */;
    %405 = %404.3;
    %406 = cast(%405, dtype="float32") /* ty=Tensor[(16, 3, 13), float32] */;
    atan(%406) /* ty=Tensor[(16, 3, 13), float32] */
  };
  %407() /* ty=Tensor[(16, 3, 13), float32] */
}

def @func_1477() -> (Tensor[(13, 2, 16), int32], Tensor[(2, 14, 13), float64], Tensor[(15, 4, 4), float32], Tensor[(16, 3, 13), float64], Tensor[(624), float64], Tensor[(66), int64], Tensor[(15, 4, 4), float32]) {
  %423 = fn () -> (Tensor[(13, 2, 16), int32], Tensor[(2, 14, 13), float64], Tensor[(15, 4, 4), float32], Tensor[(16, 3, 13), float64], Tensor[(624), float64], Tensor[(66), int64], Tensor[(15, 4, 4), float32]) {
    %408 = @func_1161() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32]) */;
    %409 = @func_1367() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(2, 14, 13), int16], Tensor[(672), float64], Tensor[(182, 2), float32]) */;
    %410 = %409.1;
    %411 = cast(%410, dtype="float64") /* ty=Tensor[(2, 14, 13), float64] */;
    %412 = @func_1430() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
    %413 = cast(meta[relay.Constant][15] /* ty=Tensor[(624), float64] */, dtype="float64") /* ty=Tensor[(624), float64] */;
    %414 = cast(meta[relay.Constant][16] /* ty=Tensor[(66), int64] */, dtype="int64") /* ty=Tensor[(66), int64] */;
    %415 = reshape(%413, newshape=[16, 3, 13]) /* ty=Tensor[(16, 3, 13), float64] */;
    %416 = reshape(%414, newshape=[1, 66]) /* ty=Tensor[(1, 66), int64] */;
    %417 = @func_1096(%415, %416) /* ty=(Tensor[(16, 3, 13), float64], Tensor[(11, 1, 6), bool], Tensor[(1, 66), int64], Tensor[(15, 4, 4), float32]) */;
    %418 = %408.1;
    %419 = sqrt(%411) /* ty=Tensor[(2, 14, 13), float64] */;
    %420 = %412.0;
    %421 = %417.0;
    %422 = @func_871() /* ty=Tensor[(15, 4, 4), float32] */;
    (%418, %419, %420, %421, meta[relay.Constant][15] /* ty=Tensor[(624), float64] */, meta[relay.Constant][16] /* ty=Tensor[(66), int64] */, %422)
  };
  %423() /* ty=(Tensor[(13, 2, 16), int32], Tensor[(2, 14, 13), float64], Tensor[(15, 4, 4), float32], Tensor[(16, 3, 13), float64], Tensor[(624), float64], Tensor[(66), int64], Tensor[(15, 4, 4), float32]) */
}

def @func_7274() -> (Tensor[(15, 4, 4), float32],) {
  %426 = fn () -> (Tensor[(15, 4, 4), float32],) {
    %424 = @func_5508() /* ty=(Tensor[(15, 4, 4), float32],) */;
    %425 = %424.0;
    (%425,)
  };
  %426() /* ty=(Tensor[(15, 4, 4), float32],) */
}

def @func_4157() -> Tensor[(15, 4, 4), float32] {
  @func_4155() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_7453(%var_7451: Tensor[(15, 4), uint32]) -> (Tensor[(15, 4, 4), float32], uint32, Tensor[(15, 4), uint32], Tensor[(8, 4, 15), int32], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(364), int16]) {
  @func_7450(%var_7451) /* ty=(Tensor[(15, 4, 4), float32], uint32, Tensor[(15, 4), uint32], Tensor[(8, 4, 15), int32], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(364), int16]) */
}

def @func_8689() -> Tensor[(672), float64] {
  %427 = fn () -> Tensor[(672), float64] {
    @func_8399() /* ty=Tensor[(672), float64] */
  };
  %427() /* ty=Tensor[(672), float64] */
}

def @func_3543(%var_3541: Tensor[(15, 4, 4), float32]) -> (Tensor[(13, 2, 16), bool], Tensor[(416), int32], Tensor[(13, 2, 16), bool], Tensor[(15, 4, 4), int32]) {
  @func_3540(%var_3541) /* ty=(Tensor[(13, 2, 16), bool], Tensor[(416), int32], Tensor[(13, 2, 16), bool], Tensor[(15, 4, 4), int32]) */
}

def @func_4936(%var_4934: Tensor[(15, 13, 2), uint32], %var_4935: Tensor[(15, 13, 2), uint32]) -> (Tensor[(15, 13, 2), uint32],) {
  %433 = fn (%var_4928: Tensor[(15, 13, 2), uint32], %var_4929: Tensor[(15, 13, 2), uint32]) -> (Tensor[(15, 13, 2), uint32],) {
    %428 = cast(%var_4929, dtype="uint32") /* ty=Tensor[(15, 13, 2), uint32] */;
    %429 = shape_of(%var_4928, dtype="int32") /* ty=Tensor[(3), int32] */;
    %430 = cast(%var_4928, dtype="uint32") /* ty=Tensor[(15, 13, 2), uint32] */;
    %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %432 = bitwise_or(%430, %431) /* ty=Tensor[(15, 13, 2), uint32] */;
    (%432,)
  };
  %433(%var_4934, %var_4935) /* ty=(Tensor[(15, 13, 2), uint32],) */
}

def @func_8012(%var_8011: Tensor[(198), float32]) -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), float32], Tensor[(15, 4, 4), float32], Tensor[(198), int8], Tensor[(15, 4, 4), float32]) {
  %451 = fn (%var_7962: Tensor[(198), float32]) -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), float32], Tensor[(15, 4, 4), float32], Tensor[(198), int8], Tensor[(15, 4, 4), float32]) {
    %434 = @func_7290() /* ty=(Tensor[(15, 4, 4), float32],) */;
    %435 = @func_3985() /* ty=(Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), bool]) */;
    %436 = @func_6400() /* ty=Tensor[(13, 2, 16), float32] */;
    %437 = cast(%436, dtype="int64") /* ty=Tensor[(13, 2, 16), int64] */;
    %438 = cast(%var_7962, dtype="float32") /* ty=Tensor[(198), float32] */;
    %439 = reshape(%437, newshape=[416]) /* ty=Tensor[(416), int64] */;
    %440 = reshape(%438, newshape=[99, 2]) /* ty=Tensor[(99, 2), float32] */;
    %441 = @func_4857(%439, %440) /* ty=(Tensor[(66), int64], Tensor[(13, 2, 16), bool], Tensor[(416), int64], Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(3, 6, 11), float64], float32, Tensor[(99, 2), float32]) */;
    %442 = cast(meta[relay.Constant][17] /* ty=Tensor[(198), float32] */, dtype="int8") /* ty=Tensor[(198), int8] */;
    %443 = shape_of(%var_7962, dtype="int32") /* ty=Tensor[(1), int32] */;
    %444 = cast(%var_7962, dtype="int8") /* ty=Tensor[(198), int8] */;
    %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?), int8] */;
    %446 = %434.0;
    %447 = %435.1;
    %448 = %441.6;
    %449 = bitwise_and(%444, %445) /* ty=Tensor[(198), int8] */;
    %450 = @func_7008() /* ty=Tensor[(15, 4, 4), float32] */;
    (%446, %447, %436, %448, %449, %450)
  };
  %451(%var_8011) /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), float32], Tensor[(15, 4, 4), float32], Tensor[(198), int8], Tensor[(15, 4, 4), float32]) */
}

def @func_10436() -> (Tensor[(672), float64], Tensor[(15, 4, 4), float32]) {
  @func_10434() /* ty=(Tensor[(672), float64], Tensor[(15, 4, 4), float32]) */
}

def @func_6407() -> Tensor[(10, 13, 16), float32] {
  %453 = fn () -> Tensor[(10, 13, 16), float32] {
    %452 = cast(meta[relay.Constant][18] /* ty=Tensor[(10, 13, 16), float32] */, dtype="float32") /* ty=Tensor[(10, 13, 16), float32] */;
    cos(%452) /* ty=Tensor[(10, 13, 16), float32] */
  };
  %453() /* ty=Tensor[(10, 13, 16), float32] */
}

def @main(%var_11354: Tensor[(9, 14, 10), int16], %var_11355: Tensor[(9, 14, 10), int16]) -> Tensor[(9, 14, 10), int16] {
  %454 = cast(%var_11355, dtype="int16") /* ty=Tensor[(9, 14, 10), int16] */;
  %455 = shape_of(%var_11354, dtype="int32") /* ty=Tensor[(3), int32] */;
  %456 = cast(%var_11354, dtype="int16") /* ty=Tensor[(9, 14, 10), int16] */;
  %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  add(%456, %457) /* ty=Tensor[(9, 14, 10), int16] */
}

def @func_7614() -> (Tensor[(15, 4, 4), float32],) {
  @func_7612() /* ty=(Tensor[(15, 4, 4), float32],) */
}

def @func_6268(%var_6266: float64) -> (Tensor[(5, 2, 12), float64], Tensor[(15, 4, 4), float32]) {
  @func_6265(%var_6266) /* ty=(Tensor[(5, 2, 12), float64], Tensor[(15, 4, 4), float32]) */
}

def @func_9179() -> (Tensor[(15, 4, 4), float32],) {
  %459 = fn () -> (Tensor[(15, 4, 4), float32],) {
    %458 = @func_6561() /* ty=Tensor[(15, 4, 4), float32] */;
    (%458,)
  };
  %459() /* ty=(Tensor[(15, 4, 4), float32],) */
}

def @func_1399() -> Tensor[(15, 4, 4), float32] {
  @func_1397() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_2372() -> Tensor[(15, 4, 4), float32] {
  %461 = fn () -> Tensor[(15, 4, 4), float32] {
    %460 = @func_1577() /* ty=(Tensor[(15, 4, 4), float32],) */;
    %460.0
  };
  %461() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_6818() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  @func_6816() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */
}

def @func_6766(%var_6765: Tensor[(2, 2, 11), float32]) -> (Tensor[(2, 2, 11), float32],) {
  %464 = fn (%var_6760: Tensor[(2, 2, 11), float32]) -> (Tensor[(2, 2, 11), float32],) {
    %462 = cast(%var_6760, dtype="float32") /* ty=Tensor[(2, 2, 11), float32] */;
    %463 = log(%462) /* ty=Tensor[(2, 2, 11), float32] */;
    (%463,)
  };
  %464(%var_6765) /* ty=(Tensor[(2, 2, 11), float32],) */
}

def @func_3199() -> Tensor[(15, 4, 4), float32] {
  %465 = @func_2972() /* ty=(Tensor[(672), float64], Tensor[(15, 4, 4), float32]) */;
  %465.1
}

def @func_6186(%var_6177: Tensor[(10, 1, 2), int32], %var_6178: Tensor[(10, 5, 2), int32], %var_6184: Tensor[(4, 84), float64]) -> (Tensor[(10, 5, 2), int32], Tensor[(7, 4, 12), float64], Tensor[(4, 84), float64]) {
  %466 = cast(%var_6177, dtype="int32") /* ty=Tensor[(10, 1, 2), int32] */;
  %467 = cast(%var_6178, dtype="int32") /* ty=Tensor[(10, 5, 2), int32] */;
  %468 = cast(%var_6184, dtype="float64") /* ty=Tensor[(4, 84), float64] */;
  %469 = reshape(%468, newshape=[7, 4, 12]) /* ty=Tensor[(7, 4, 12), float64] */;
  %470 = @func_572(%469) /* ty=(Tensor[(7, 4, 12), float64],) */;
  %471 = right_shift(%466, %467) /* ty=Tensor[(10, 5, 2), int32] */;
  %472 = %470.0;
  (%471, %472, %var_6184)
}

def @func_1636() -> (Tensor[(15, 4, 4), float32],) {
  @func_1634() /* ty=(Tensor[(15, 4, 4), float32],) */
}

def @func_5243() -> (Tensor[(15, 4, 4), float32], Tensor[(1120), float64], Tensor[(2, 14, 13), int16], Tensor[(1452), float64], Tensor[(15, 4, 4), int32]) {
  %473 = @func_1913() /* ty=(Tensor[(2, 14, 13), int16], Tensor[(364), int16], Tensor[(15, 4, 4), float32]) */;
  %474 = cast(meta[relay.Constant][19] /* ty=Tensor[(1120), float64] */, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %475 = reshape(%474, newshape=[14, 10, 8]) /* ty=Tensor[(14, 10, 8), float64] */;
  %476 = @func_3181(%475) /* ty=(Tensor[(14, 10, 8), float64], Tensor[(14, 10, 8), bool], Tensor[(11, 11, 12), uint32], Tensor[(1452), uint32], Tensor[(15, 4, 4), float32]) */;
  %477 = %476.3;
  %478 = cast(%477, dtype="float64") /* ty=Tensor[(1452), float64] */;
  %479 = @func_1397() /* ty=Tensor[(15, 4, 4), float32] */;
  %480 = cast(%479, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %481 = reshape(%480, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float32] */;
  %482 = @func_3540(%481) /* ty=(Tensor[(13, 2, 16), bool], Tensor[(416), int32], Tensor[(13, 2, 16), bool], Tensor[(15, 4, 4), int32]) */;
  %483 = %473.0;
  %484 = atanh(%478) /* ty=Tensor[(1452), float64] */;
  %485 = %482.3;
  (%479, meta[relay.Constant][19] /* ty=Tensor[(1120), float64] */, %483, %484, %485)
}

def @func_2661() -> Tensor[(15, 4, 4), float32] {
  @func_2659() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_6191(%var_6188: Tensor[(10, 1, 2), int32], %var_6189: Tensor[(10, 5, 2), int32], %var_6190: Tensor[(4, 84), float64]) -> (Tensor[(10, 5, 2), int32], Tensor[(7, 4, 12), float64], Tensor[(4, 84), float64]) {
  @func_6186(%var_6188, %var_6189, %var_6190) /* ty=(Tensor[(10, 5, 2), int32], Tensor[(7, 4, 12), float64], Tensor[(4, 84), float64]) */
}

def @func_1163() -> (Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32]) {
  @func_1161() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32]) */
}

def @func_5422() -> (Tensor[(15, 4, 4), float32],) {
  @func_5420() /* ty=(Tensor[(15, 4, 4), float32],) */
}

def @func_7450(%var_7402: Tensor[(15, 4), uint32]) -> (Tensor[(15, 4, 4), float32], uint32, Tensor[(15, 4), uint32], Tensor[(8, 4, 15), int32], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(364), int16]) {
  %486 = cast(meta[relay.Constant][20] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %487 = cast(%var_7402, dtype="uint32") /* ty=Tensor[(15, 4), uint32] */;
  %488 = reshape(%486, newshape=[]) /* ty=uint32 */;
  %489 = reshape(%487, newshape=[2, 10, 3]) /* ty=Tensor[(2, 10, 3), uint32] */;
  %490 = @func_4993(%488, %489) /* ty=(Tensor[(2, 10, 3), uint32], Tensor[(15, 4, 4), float32]) */;
  %491 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 4, 15), float32] */, dtype="float32") /* ty=Tensor[(8, 4, 15), float32] */;
  %492 = cos(%491) /* ty=Tensor[(8, 4, 15), float32] */;
  %493 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 4, 15), float32] */, dtype="int32") /* ty=Tensor[(8, 4, 15), int32] */;
  %494 = shape_of(%492, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(%492, dtype="int32") /* ty=Tensor[(8, 4, 15), int32] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %497 = @func_1430() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
  %498 = @func_6472() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
  %499 = @func_5312() /* ty=(Tensor[(364), int16],) */;
  %500 = %490.1;
  %501 = right_shift(%495, %496) /* ty=Tensor[(8, 4, 15), int32] */;
  %502 = %497.0;
  %503 = %498.0;
  %504 = %499.0;
  (%500, meta[relay.Constant][20] /* ty=uint32 */, %var_7402, %501, %502, %503, %504)
}

def @func_10736(%var_10734: Tensor[(350), float32]) -> (Tensor[(15, 4, 4), float32], Tensor[(5, 10, 7), float32], Tensor[(350), float32]) {
  @func_10733(%var_10734) /* ty=(Tensor[(15, 4, 4), float32], Tensor[(5, 10, 7), float32], Tensor[(350), float32]) */
}

def @func_1099(%var_1097: Tensor[(16, 3, 13), float64], %var_1098: Tensor[(1, 66), int64]) -> (Tensor[(16, 3, 13), float64], Tensor[(11, 1, 6), bool], Tensor[(1, 66), int64], Tensor[(15, 4, 4), float32]) {
  %516 = fn (%var_1065: Tensor[(16, 3, 13), float64], %var_1077: Tensor[(1, 66), int64]) -> (Tensor[(16, 3, 13), float64], Tensor[(11, 1, 6), bool], Tensor[(1, 66), int64], Tensor[(15, 4, 4), float32]) {
    %505 = cast(%var_1065, dtype="float64") /* ty=Tensor[(16, 3, 13), float64] */;
    %506 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(16, 3, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %507 = cast(meta[relay.Constant][22] /* ty=Tensor[(16, 3, 13), float64] */, dtype="float64") /* ty=Tensor[(16, 3, 13), float64] */;
    %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %509 = cast(%var_1077, dtype="int64") /* ty=Tensor[(1, 66), int64] */;
    %510 = reshape(%509, newshape=[11, 1, 6]) /* ty=Tensor[(11, 1, 6), int64] */;
    %511 = @func_986(%510) /* ty=(Tensor[(11, 1, 6), bool],) */;
    %512 = @func_752() /* ty=(Tensor[(15, 4, 4), float32],) */;
    %513 = subtract(%507, %508) /* ty=Tensor[(16, 3, 13), float64] */;
    %514 = %511.0;
    %515 = %512.0;
    (%513, %514, %var_1077, %515)
  };
  %516(%var_1097, %var_1098) /* ty=(Tensor[(16, 3, 13), float64], Tensor[(11, 1, 6), bool], Tensor[(1, 66), int64], Tensor[(15, 4, 4), float32]) */
}

def @func_7511(%var_7472: Tensor[(9, 6, 10), uint16], %var_7502: Tensor[(9, 6, 10), uint16]) -> (Tensor[(9, 6, 10), bool], Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(9, 6, 10), uint8]) {
  %517 = cast(%var_7472, dtype="bool") /* ty=Tensor[(9, 6, 10), bool] */;
  %518 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(9, 6, 10), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %519 = cast(meta[relay.Constant][23] /* ty=Tensor[(9, 6, 10), uint16] */, dtype="bool") /* ty=Tensor[(9, 6, 10), bool] */;
  %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %521 = @func_1430() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
  %522 = cast(%var_7502, dtype="uint8") /* ty=Tensor[(9, 6, 10), uint8] */;
  %523 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(9, 6, 10), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %524 = cast(meta[relay.Constant][23] /* ty=Tensor[(9, 6, 10), uint16] */, dtype="uint8") /* ty=Tensor[(9, 6, 10), uint8] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %526 = equal(%519, %520) /* ty=Tensor[(9, 6, 10), bool] */;
  %527 = @func_5840() /* ty=Tensor[(15, 4, 4), float32] */;
  %528 = %521.1;
  %529 = bitwise_and(%524, %525) /* ty=Tensor[(9, 6, 10), uint8] */;
  (%526, %527, %528, %529)
}

def @func_574(%var_573: Tensor[(7, 4, 12), float64]) -> (Tensor[(7, 4, 12), float64],) {
  %532 = fn (%var_567: Tensor[(7, 4, 12), float64]) -> (Tensor[(7, 4, 12), float64],) {
    %530 = cast(%var_567, dtype="float64") /* ty=Tensor[(7, 4, 12), float64] */;
    %531 = rsqrt(%530) /* ty=Tensor[(7, 4, 12), float64] */;
    (%531,)
  };
  %532(%var_573) /* ty=(Tensor[(7, 4, 12), float64],) */
}

def @func_5290() -> (Tensor[(672), float64], Tensor[(672), float64]) {
  %537 = fn () -> (Tensor[(672), float64], Tensor[(672), float64]) {
    %533 = @func_4896() /* ty=(Tensor[(672), float64],) */;
    %534 = @func_4166() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
    %535 = %533.0;
    %536 = %534.1;
    (%535, %536)
  };
  %537() /* ty=(Tensor[(672), float64], Tensor[(672), float64]) */
}

def @func_721() -> Tensor[(15, 4, 4), float32] {
  @func_719() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_2659() -> Tensor[(15, 4, 4), float32] {
  %538 = @func_1577() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %538.0
}

def @func_753() -> (Tensor[(15, 4, 4), float32],) {
  %541 = fn () -> (Tensor[(15, 4, 4), float32],) {
    %539 = @func_698() /* ty=(Tensor[(15, 4, 4), float32],) */;
    %540 = %539.0;
    (%540,)
  };
  %541() /* ty=(Tensor[(15, 4, 4), float32],) */
}

def @func_6975() -> (Tensor[(364), int16],) {
  @func_6973() /* ty=(Tensor[(364), int16],) */
}

def @func_7864() -> (Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(15, 4, 4), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  %542 = @func_1686() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %543 = @func_1227() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(16, 14, 3), float64]) */;
  %544 = @func_5539() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %545 = %544.1;
  %546 = cast(%545, dtype="float64") /* ty=Tensor[(15, 4, 4), float64] */;
  %547 = @func_5508() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %548 = @func_7273() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %549 = %542.0;
  %550 = %543.1;
  %551 = sigmoid(%546) /* ty=Tensor[(15, 4, 4), float64] */;
  %552 = %547.0;
  %553 = %548.0;
  (%549, %550, %551, %552, %553)
}

def @func_1735() -> (Tensor[(672), float64],) {
  %554 = @func_1227() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(16, 14, 3), float64]) */;
  %555 = %554.1;
  (%555,)
}

def @func_4589() -> (Tensor[(13, 2, 16), float64], Tensor[(13, 2, 16), float32], Tensor[(13, 2, 16), uint8]) {
  @func_4587() /* ty=(Tensor[(13, 2, 16), float64], Tensor[(13, 2, 16), float32], Tensor[(13, 2, 16), uint8]) */
}

def @func_7162() -> (Tensor[(15, 4, 4), float32],) {
  @func_7160() /* ty=(Tensor[(15, 4, 4), float32],) */
}

def @func_918(%var_916: Tensor[(13, 2, 16), int64]) -> Tensor[(13, 2, 16), bool] {
  @func_915(%var_916) /* ty=Tensor[(13, 2, 16), bool] */
}

def @func_9254(%var_9252: Tensor[(66), bool], %var_9253: Tensor[(336), float64]) -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(66), bool], Tensor[(336), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  %567 = fn (%var_9195: Tensor[(66), bool], %var_9196: Tensor[(336), float64]) -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(66), bool], Tensor[(336), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
    %556 = @func_4886() /* ty=(Tensor[(15, 4, 4), float32],) */;
    %557 = cast(%var_9195, dtype="bool") /* ty=Tensor[(66), bool] */;
    %558 = cast(%var_9196, dtype="float64") /* ty=Tensor[(336), float64] */;
    %559 = reshape(%557, newshape=[66]) /* ty=Tensor[(66), bool] */;
    %560 = reshape(%558, newshape=[8, 42]) /* ty=Tensor[(8, 42), float64] */;
    %561 = @func_3902(%559, %560) /* ty=(Tensor[(11, 14, 11), bool], Tensor[(15, 4, 4), float32], Tensor[(66), bool], Tensor[(15, 4, 4), float32], Tensor[(7, 4, 12), float64], Tensor[(8, 42), float64]) */;
    %562 = @func_2072() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
    %563 = %556.0;
    %564 = %561.1;
    %565 = %562.0;
    %566 = @func_6914() /* ty=Tensor[(15, 4, 4), float32] */;
    (%563, %564, %var_9195, %var_9196, %565, %566)
  };
  %567(%var_9252, %var_9253) /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(66), bool], Tensor[(336), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */
}

def @func_10082() -> Tensor[(13, 2, 16), int32] {
  %569 = fn () -> Tensor[(13, 2, 16), int32] {
    %568 = @func_6992() /* ty=(Tensor[(13, 2, 16), int32],) */;
    %568.0
  };
  %569() /* ty=Tensor[(13, 2, 16), int32] */
}

def @func_8618() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), float64]) {
  @func_8616() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), float64]) */
}

def @func_8798() -> (Tensor[(15, 4, 4), float32],) {
  %570 = @func_5420() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %571 = %570.0;
  (%571,)
}

def @func_4107(%var_4105: Tensor[(15, 4, 4), float32]) -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), uint32]) {
  @func_4104(%var_4105) /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), uint32]) */
}

def @func_6662(%var_6660: Tensor[(672), float64]) -> (Tensor[(364), int16], Tensor[(15, 4, 4), float32], Tensor[(16, 14, 3), float64], Tensor[(672), float64]) {
  @func_6659(%var_6660) /* ty=(Tensor[(364), int16], Tensor[(15, 4, 4), float32], Tensor[(16, 14, 3), float64], Tensor[(672), float64]) */
}

def @func_4886() -> (Tensor[(15, 4, 4), float32],) {
  %572 = @func_2457() /* ty=Tensor[(15, 4, 4), float32] */;
  (%572,)
}

def @func_1737() -> (Tensor[(672), float64],) {
  @func_1735() /* ty=(Tensor[(672), float64],) */
}

def @func_6332() -> Tensor[(15, 4, 4), float32] {
  @func_6330() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_1634() -> (Tensor[(15, 4, 4), float32],) {
  %573 = @func_1430() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
  %574 = %573.0;
  (%574,)
}

def @func_8694() -> Tensor[(15, 4, 4), float32] {
  @func_8692() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_618(%var_604: Tensor[(16, 14, 3), float64]) -> (Tensor[(16, 14, 3), float64],) {
  %575 = cast(%var_604, dtype="float64") /* ty=Tensor[(16, 14, 3), float64] */;
  %576 = tan(%575) /* ty=Tensor[(16, 14, 3), float64] */;
  (%576,)
}

def @func_6176() -> (Tensor[(15, 4, 4), float32],) {
  @func_6174() /* ty=(Tensor[(15, 4, 4), float32],) */
}

def @func_2531() -> Tensor[(15, 4, 4), float32] {
  @func_2529() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_6174() -> (Tensor[(15, 4, 4), float32],) {
  %577 = @func_3629() /* ty=Tensor[(15, 4, 4), float32] */;
  (%577,)
}

def @func_10305() -> (Tensor[(672), float64], Tensor[(672), float64], Tensor[(416), int32], Tensor[(15, 4, 4), float32]) {
  %585 = fn () -> (Tensor[(672), float64], Tensor[(672), float64], Tensor[(416), int32], Tensor[(15, 4, 4), float32]) {
    %578 = @func_1430() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
    %579 = @func_5289() /* ty=(Tensor[(672), float64], Tensor[(672), float64]) */;
    %580 = @func_10204() /* ty=(Tensor[(416), int32], Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
    %581 = %578.1;
    %582 = %579.0;
    %583 = %580.0;
    %584 = @func_9609() /* ty=Tensor[(15, 4, 4), float32] */;
    (%581, %582, %583, %584)
  };
  %585() /* ty=(Tensor[(672), float64], Tensor[(672), float64], Tensor[(416), int32], Tensor[(15, 4, 4), float32]) */
}

def @func_2033(%var_2032: Tensor[(15, 4, 4), float32]) -> Tensor[(15, 4, 4), uint32] {
  %592 = fn (%var_2024: Tensor[(15, 4, 4), float32]) -> Tensor[(15, 4, 4), uint32] {
    %586 = @func_1810() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
    %587 = %586.1;
    %588 = cast(%var_2024, dtype="uint32") /* ty=Tensor[(15, 4, 4), uint32] */;
    %589 = shape_of(%587, dtype="int32") /* ty=Tensor[(3), int32] */;
    %590 = cast(%587, dtype="uint32") /* ty=Tensor[(15, 4, 4), uint32] */;
    %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    bitwise_or(%590, %591) /* ty=Tensor[(15, 4, 4), uint32] */
  };
  %592(%var_2032) /* ty=Tensor[(15, 4, 4), uint32] */
}

def @func_8633() -> (Tensor[(13, 2, 16), float32], Tensor[(15, 4, 4), float32]) {
  %596 = fn () -> (Tensor[(13, 2, 16), float32], Tensor[(15, 4, 4), float32]) {
    %593 = @func_8467() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
    %594 = @func_6400() /* ty=Tensor[(13, 2, 16), float32] */;
    %595 = %593.0;
    (%594, %595)
  };
  %596() /* ty=(Tensor[(13, 2, 16), float32], Tensor[(15, 4, 4), float32]) */
}

def @func_2614() -> Tensor[(15, 4, 4), float32] {
  %597 = @func_752() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %597.0
}

def @func_7709() -> (Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), uint32]) {
  %604 = fn () -> (Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), uint32]) {
    %598 = @func_6158() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32], Tensor[(672), float64]) */;
    %599 = @func_2614() /* ty=Tensor[(15, 4, 4), float32] */;
    %600 = cast(%599, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
    %601 = reshape(%600, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float32] */;
    %602 = %598.2;
    %603 = @func_2031(%601) /* ty=Tensor[(15, 4, 4), uint32] */;
    (%602, %599, %603)
  };
  %604() /* ty=(Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), uint32]) */
}

def @func_444(%var_442: float32, %var_443: Tensor[(3, 6, 11), float32]) -> (Tensor[(3, 6, 11), float32], Tensor[(3, 6, 11), float64]) {
  @func_440(%var_442, %var_443) /* ty=(Tensor[(3, 6, 11), float32], Tensor[(3, 6, 11), float64]) */
}

def @func_6883(%var_6864: Tensor[(520), float32]) -> (Tensor[(15, 4, 4), bool], Tensor[(15, 4, 4), float32], Tensor[(13, 4, 10), float32], Tensor[(520), float32]) {
  %605 = @func_5591() /* ty=(Tensor[(672), float64], Tensor[(15, 4, 4), bool]) */;
  %606 = cast(%var_6864, dtype="float32") /* ty=Tensor[(520), float32] */;
  %607 = reshape(%606, newshape=[13, 4, 10]) /* ty=Tensor[(13, 4, 10), float32] */;
  %608 = @func_6748(%607) /* ty=(Tensor[(13, 4, 10), float32], Tensor[(13, 4, 10), float32]) */;
  %609 = %605.1;
  %610 = @func_3199() /* ty=Tensor[(15, 4, 4), float32] */;
  %611 = %608.0;
  (%609, %610, %611, %var_6864)
}

def @func_7292() -> (Tensor[(15, 4, 4), float32],) {
  @func_7290() /* ty=(Tensor[(15, 4, 4), float32],) */
}

def @func_5375(%var_5365: Tensor[(13, 2, 16), int32]) -> (Tensor[(13, 2, 16), float64],) {
  %612 = @func_2926() /* ty=Tensor[(13, 2, 16), int32] */;
  %613 = cast(%var_5365, dtype="float64") /* ty=Tensor[(13, 2, 16), float64] */;
  %614 = shape_of(%612, dtype="int32") /* ty=Tensor[(3), int32] */;
  %615 = cast(%612, dtype="float64") /* ty=Tensor[(13, 2, 16), float64] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %617 = floor_divide(%615, %616) /* ty=Tensor[(13, 2, 16), float64] */;
  (%617,)
}

def @func_8692() -> Tensor[(15, 4, 4), float32] {
  @func_2457() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_6019() -> (Tensor[(672), float64], Tensor[(15, 4, 4), float32]) {
  %618 = @func_2016() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(15, 4, 4), float32]) */;
  %619 = @func_3802() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %620 = %618.2;
  %621 = %619.0;
  (%620, %621)
}

def @func_6933() -> (Tensor[(15, 4, 4), float32],) {
  %622 = @func_871() /* ty=Tensor[(15, 4, 4), float32] */;
  (%622,)
}

def @func_5786() -> (Tensor[(15, 4, 4), float32],) {
  %623 = @func_871() /* ty=Tensor[(15, 4, 4), float32] */;
  (%623,)
}

def @func_5758() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  %624 = @func_5591() /* ty=(Tensor[(672), float64], Tensor[(15, 4, 4), bool]) */;
  %625 = @func_5508() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %626 = @func_2659() /* ty=Tensor[(15, 4, 4), float32] */;
  %627 = @func_2529() /* ty=Tensor[(15, 4, 4), float32] */;
  %628 = %624.0;
  %629 = @func_871() /* ty=Tensor[(15, 4, 4), float32] */;
  %630 = @func_3199() /* ty=Tensor[(15, 4, 4), float32] */;
  %631 = %625.0;
  (%626, %627, %628, %629, %630, %631)
}

def @func_5541() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  @func_5539() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */
}

def @func_3841() -> Tensor[(66), int64] {
  %632 = @func_1476() /* ty=(Tensor[(13, 2, 16), int32], Tensor[(2, 14, 13), float64], Tensor[(15, 4, 4), float32], Tensor[(16, 3, 13), float64], Tensor[(624), float64], Tensor[(66), int64], Tensor[(15, 4, 4), float32]) */;
  %632.5
}

def @func_872() -> Tensor[(15, 4, 4), float32] {
  %634 = fn () -> Tensor[(15, 4, 4), float32] {
    %633 = @func_698() /* ty=(Tensor[(15, 4, 4), float32],) */;
    %633.0
  };
  %634() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_5486() -> Tensor[(15, 4, 4), float32] {
  %635 = @func_1634() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %635.0
}

def @func_5488() -> Tensor[(15, 4, 4), float32] {
  @func_5486() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_1305(%var_1303: Tensor[(7, 6, 15), uint32]) -> Tensor[(7, 6, 15), bool] {
  @func_1302(%var_1303) /* ty=Tensor[(7, 6, 15), bool] */
}

def @func_11240() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  @func_11238() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */
}

def @func_2194() -> Tensor[(15, 4, 4), float32] {
  %637 = fn () -> Tensor[(15, 4, 4), float32] {
    %636 = @func_1367() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(2, 14, 13), int16], Tensor[(672), float64], Tensor[(182, 2), float32]) */;
    %636.0
  };
  %637() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_5509() -> (Tensor[(15, 4, 4), float32],) {
  %640 = fn () -> (Tensor[(15, 4, 4), float32],) {
    %638 = @func_1227() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(16, 14, 3), float64]) */;
    %639 = %638.0;
    (%639,)
  };
  %640() /* ty=(Tensor[(15, 4, 4), float32],) */
}

def @func_5840() -> Tensor[(15, 4, 4), float32] {
  @func_2457() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_7010() -> Tensor[(15, 4, 4), float32] {
  @func_7008() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_5312() -> (Tensor[(364), int16],) {
  %641 = @func_1913() /* ty=(Tensor[(2, 14, 13), int16], Tensor[(364), int16], Tensor[(15, 4, 4), float32]) */;
  %642 = %641.1;
  (%642,)
}

def @func_621(%var_619: Tensor[(16, 14, 3), float64]) -> (Tensor[(16, 14, 3), float64],) {
  @func_618(%var_619) /* ty=(Tensor[(16, 14, 3), float64],) */
}

def @func_2973() -> (Tensor[(672), float64], Tensor[(15, 4, 4), float32]) {
  %647 = fn () -> (Tensor[(672), float64], Tensor[(15, 4, 4), float32]) {
    %643 = @func_1227() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(16, 14, 3), float64]) */;
    %644 = @func_2576() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
    %645 = %643.1;
    %646 = %644.1;
    (%645, %646)
  };
  %647() /* ty=(Tensor[(672), float64], Tensor[(15, 4, 4), float32]) */
}

def @func_1367() -> (Tensor[(15, 4, 4), float32], Tensor[(2, 14, 13), int16], Tensor[(672), float64], Tensor[(182, 2), float32]) {
  %648 = cast(meta[relay.Constant][24] /* ty=Tensor[(182, 2), int16] */, dtype="int16") /* ty=Tensor[(182, 2), int16] */;
  %649 = reshape(%648, newshape=[2, 14, 13]) /* ty=Tensor[(2, 14, 13), int16] */;
  %650 = @func_642(%649) /* ty=(Tensor[(2, 14, 13), int16],) */;
  %651 = @func_1227() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(16, 14, 3), float64]) */;
  %652 = cast(meta[relay.Constant][24] /* ty=Tensor[(182, 2), int16] */, dtype="float32") /* ty=Tensor[(182, 2), float32] */;
  %653 = @func_871() /* ty=Tensor[(15, 4, 4), float32] */;
  %654 = %650.0;
  %655 = %651.1;
  %656 = sinh(%652) /* ty=Tensor[(182, 2), float32] */;
  (%653, %654, %655, %656)
}

def @func_5632(%var_5606: Tensor[(1120), float64]) -> (Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(11, 11, 12), uint32], Tensor[(1120), float64], Tensor[(14, 10, 8), bool], Tensor[(15, 4, 4), float64], Tensor[(16, 14, 3), float64], Tensor[(13, 2, 16), bool], Tensor[(2, 208), int32]) {
  %657 = @func_1634() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %658 = @func_4896() /* ty=(Tensor[(672), float64],) */;
  %659 = cast(%var_5606, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %660 = reshape(%659, newshape=[14, 10, 8]) /* ty=Tensor[(14, 10, 8), float64] */;
  %661 = @func_3181(%660) /* ty=(Tensor[(14, 10, 8), float64], Tensor[(14, 10, 8), bool], Tensor[(11, 11, 12), uint32], Tensor[(1452), uint32], Tensor[(15, 4, 4), float32]) */;
  %662 = cast(%var_5606, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %663 = reshape(%662, newshape=[14, 10, 8]) /* ty=Tensor[(14, 10, 8), float64] */;
  %664 = @func_3181(%663) /* ty=(Tensor[(14, 10, 8), float64], Tensor[(14, 10, 8), bool], Tensor[(11, 11, 12), uint32], Tensor[(1452), uint32], Tensor[(15, 4, 4), float32]) */;
  %665 = @func_5420() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %666 = %665.0;
  %667 = cast(%666, dtype="float64") /* ty=Tensor[(15, 4, 4), float64] */;
  %668 = %658.0;
  %669 = cast(%668, dtype="float64") /* ty=Tensor[(672), float64] */;
  %670 = reshape(%669, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), float64] */;
  %671 = @func_618(%670) /* ty=(Tensor[(16, 14, 3), float64],) */;
  %672 = cast(meta[relay.Constant][25] /* ty=Tensor[(2, 208), int32] */, dtype="int32") /* ty=Tensor[(2, 208), int32] */;
  %673 = reshape(%672, newshape=[13, 2, 16]) /* ty=Tensor[(13, 2, 16), int32] */;
  %674 = @func_1529(%673) /* ty=(Tensor[(13, 2, 16), bool],) */;
  %675 = %657.0;
  %676 = %661.2;
  %677 = %664.1;
  %678 = log(%667) /* ty=Tensor[(15, 4, 4), float64] */;
  %679 = %671.0;
  %680 = %674.0;
  (%675, %668, %676, %var_5606, %677, %678, %679, %680, meta[relay.Constant][25] /* ty=Tensor[(2, 208), int32] */)
}

def @func_3748() -> (Tensor[(15, 4, 4), float32],) {
  @func_3746() /* ty=(Tensor[(15, 4, 4), float32],) */
}

def @func_3778(%var_3769: Tensor[(1, 3, 8), float64]) -> (Tensor[(1, 3, 8), float64], Tensor[(13, 2, 16), bool], Tensor[(416), int64]) {
  %681 = cast(%var_3769, dtype="float64") /* ty=Tensor[(1, 3, 8), float64] */;
  %682 = cast(meta[relay.Constant][26] /* ty=Tensor[(416), int64] */, dtype="int64") /* ty=Tensor[(416), int64] */;
  %683 = reshape(%682, newshape=[13, 2, 16]) /* ty=Tensor[(13, 2, 16), int64] */;
  %684 = sin(%681) /* ty=Tensor[(1, 3, 8), float64] */;
  %685 = @func_915(%683) /* ty=Tensor[(13, 2, 16), bool] */;
  (%684, %685, meta[relay.Constant][26] /* ty=Tensor[(416), int64] */)
}

def @func_5788() -> (Tensor[(15, 4, 4), float32],) {
  @func_5786() /* ty=(Tensor[(15, 4, 4), float32],) */
}

def @func_6101(%var_6099: Tensor[(15, 9, 12), float32]) -> (Tensor[(15, 9, 12), float32], Tensor[(13, 2, 16), int32], Tensor[(7, 4, 12), float64], Tensor[(624), float64], Tensor[(66), int64]) {
  @func_6098(%var_6099) /* ty=(Tensor[(15, 9, 12), float32], Tensor[(13, 2, 16), int32], Tensor[(7, 4, 12), float64], Tensor[(624), float64], Tensor[(66), int64]) */
}

def @func_3034() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  %690 = fn () -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
    %686 = @func_1577() /* ty=(Tensor[(15, 4, 4), float32],) */;
    %687 = @func_752() /* ty=(Tensor[(15, 4, 4), float32],) */;
    %688 = %686.0;
    %689 = %687.0;
    (%688, %689)
  };
  %690() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */
}

def @func_8400() -> Tensor[(672), float64] {
  %692 = fn () -> Tensor[(672), float64] {
    %691 = @func_1430() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
    %691.1
  };
  %692() /* ty=Tensor[(672), float64] */
}

def @func_2258() -> Tensor[(15, 4, 4), float32] {
  @func_2256() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_8172() -> (Tensor[(15, 4, 4), float32], Tensor[(4, 104), int64], Tensor[(13, 2, 16), int32], Tensor[(13, 2, 16), float32]) {
  %693 = @func_7317() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %694 = cast(meta[relay.Constant][27] /* ty=Tensor[(4, 104), int64] */, dtype="int64") /* ty=Tensor[(4, 104), int64] */;
  %695 = reshape(%694, newshape=[13, 2, 16]) /* ty=Tensor[(13, 2, 16), int64] */;
  %696 = @func_915(%695) /* ty=Tensor[(13, 2, 16), bool] */;
  %697 = cast(%696, dtype="float32") /* ty=Tensor[(13, 2, 16), float32] */;
  %698 = %693.1;
  %699 = @func_4538() /* ty=Tensor[(13, 2, 16), int32] */;
  %700 = atan(%697) /* ty=Tensor[(13, 2, 16), float32] */;
  (%698, meta[relay.Constant][27] /* ty=Tensor[(4, 104), int64] */, %699, %700)
}

def @func_9339() -> Tensor[(15, 4, 4), float32] {
  %702 = fn () -> Tensor[(15, 4, 4), float32] {
    %701 = @func_5786() /* ty=(Tensor[(15, 4, 4), float32],) */;
    %701.0
  };
  %702() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_5245() -> (Tensor[(15, 4, 4), float32], Tensor[(1120), float64], Tensor[(2, 14, 13), int16], Tensor[(1452), float64], Tensor[(15, 4, 4), int32]) {
  @func_5243() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(1120), float64], Tensor[(2, 14, 13), int16], Tensor[(1452), float64], Tensor[(15, 4, 4), int32]) */
}

def @func_1914() -> (Tensor[(2, 14, 13), int16], Tensor[(364), int16], Tensor[(15, 4, 4), float32]) {
  %711 = fn () -> (Tensor[(2, 14, 13), int16], Tensor[(364), int16], Tensor[(15, 4, 4), float32]) {
    %703 = cast(meta[relay.Constant][28] /* ty=Tensor[(364), int16] */, dtype="int16") /* ty=Tensor[(364), int16] */;
    %704 = reshape(%703, newshape=[2, 14, 13]) /* ty=Tensor[(2, 14, 13), int16] */;
    %705 = @func_642(%704) /* ty=(Tensor[(2, 14, 13), int16],) */;
    %706 = @func_1577() /* ty=(Tensor[(15, 4, 4), float32],) */;
    %707 = %706.0;
    %708 = cast(%707, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
    %709 = %705.0;
    %710 = log10(%708) /* ty=Tensor[(15, 4, 4), float32] */;
    (%709, meta[relay.Constant][28] /* ty=Tensor[(364), int16] */, %710)
  };
  %711() /* ty=(Tensor[(2, 14, 13), int16], Tensor[(364), int16], Tensor[(15, 4, 4), float32]) */
}

def @func_8468() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  %714 = fn () -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
    %712 = @func_5486() /* ty=Tensor[(15, 4, 4), float32] */;
    %713 = @func_3199() /* ty=Tensor[(15, 4, 4), float32] */;
    (%712, %713)
  };
  %714() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */
}

def @func_2896(%var_2845: Tensor[(24, 26), float64], %var_2846: Tensor[(66), int64], %var_2880: Tensor[(24, 26), float64]) -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(66), int64], Tensor[(182, 2), float32], Tensor[(15, 4, 4), float64], Tensor[(7, 4, 12), float64], Tensor[(4, 84), float64], Tensor[(24, 26), int32], Tensor[(15, 4, 4), float32]) {
  %715 = @func_752() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %716 = cast(%var_2845, dtype="float64") /* ty=Tensor[(24, 26), float64] */;
  %717 = cast(%var_2846, dtype="int64") /* ty=Tensor[(66), int64] */;
  %718 = reshape(%716, newshape=[16, 3, 13]) /* ty=Tensor[(16, 3, 13), float64] */;
  %719 = reshape(%717, newshape=[1, 66]) /* ty=Tensor[(1, 66), int64] */;
  %720 = @func_1096(%718, %719) /* ty=(Tensor[(16, 3, 13), float64], Tensor[(11, 1, 6), bool], Tensor[(1, 66), int64], Tensor[(15, 4, 4), float32]) */;
  %721 = @func_1367() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(2, 14, 13), int16], Tensor[(672), float64], Tensor[(182, 2), float32]) */;
  %722 = %715.0;
  %723 = cast(%722, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %724 = reshape(%723, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float32] */;
  %725 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 84), float64] */, dtype="float64") /* ty=Tensor[(4, 84), float64] */;
  %726 = reshape(%725, newshape=[7, 4, 12]) /* ty=Tensor[(7, 4, 12), float64] */;
  %727 = @func_572(%726) /* ty=(Tensor[(7, 4, 12), float64],) */;
  %728 = cast(%var_2880, dtype="int32") /* ty=Tensor[(24, 26), int32] */;
  %729 = shape_of(%var_2845, dtype="int32") /* ty=Tensor[(2), int32] */;
  %730 = cast(%var_2845, dtype="int32") /* ty=Tensor[(24, 26), int32] */;
  %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %732 = @func_2576() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %733 = %720.3;
  %734 = %721.3;
  %735 = @func_1503(%724) /* ty=Tensor[(15, 4, 4), float64] */;
  %736 = %727.0;
  %737 = add(%730, %731) /* ty=Tensor[(24, 26), int32] */;
  %738 = %732.1;
  (%722, %733, %var_2846, %734, %735, %736, meta[relay.Constant][29] /* ty=Tensor[(4, 84), float64] */, %737, %738)
}

def @func_9730(%var_9725: Tensor[(416), int32]) -> (Tensor[(15, 4, 4), float32], Tensor[(416), uint64]) {
  %739 = @func_7273() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %740 = @func_4238() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(416), int32], Tensor[(672), float64]) */;
  %741 = %740.1;
  %742 = cast(%var_9725, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %743 = shape_of(%741, dtype="int32") /* ty=Tensor[(1), int32] */;
  %744 = cast(%741, dtype="uint64") /* ty=Tensor[(416), uint64] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %746 = %739.0;
  %747 = logical_xor(%744, %745) /* ty=Tensor[(416), uint64] */;
  (%746, %747)
}

def @func_7008() -> Tensor[(15, 4, 4), float32] {
  @func_2256() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_2072() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  %748 = @func_1686() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %749 = @func_719() /* ty=Tensor[(15, 4, 4), float32] */;
  %750 = %748.0;
  (%749, %750)
}

def @func_2616() -> Tensor[(15, 4, 4), float32] {
  @func_2614() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_1331(%var_1329: Tensor[(14, 9, 3), float64]) -> Tensor[(14, 9, 3), bool] {
  @func_1328(%var_1329) /* ty=Tensor[(14, 9, 3), bool] */
}

def @func_8594(%var_8592: Tensor[(624), float64], %var_8593: Tensor[(66), int64]) -> (Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(624), float64], Tensor[(66), int64]) {
  @func_8590(%var_8592, %var_8593) /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(624), float64], Tensor[(66), int64]) */
}

def @func_2074() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  @func_2072() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */
}

def @func_8095() -> (Tensor[(672), float64],) {
  %751 = @func_5289() /* ty=(Tensor[(672), float64], Tensor[(672), float64]) */;
  %752 = %751.0;
  (%752,)
}

def @func_10365() -> Tensor[(672), float64] {
  %754 = fn () -> Tensor[(672), float64] {
    %753 = @func_5071() /* ty=(Tensor[(364), int16], Tensor[(672), float64]) */;
    %753.1
  };
  %754() /* ty=Tensor[(672), float64] */
}

def @func_3746() -> (Tensor[(15, 4, 4), float32],) {
  %755 = @func_1430() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
  %756 = %755.0;
  (%756,)
}

def @func_1578() -> (Tensor[(15, 4, 4), float32],) {
  %759 = fn () -> (Tensor[(15, 4, 4), float32],) {
    %757 = @func_1430() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
    %758 = %757.0;
    (%758,)
  };
  %759() /* ty=(Tensor[(15, 4, 4), float32],) */
}

def @func_3181(%var_3157: Tensor[(14, 10, 8), float64]) -> (Tensor[(14, 10, 8), float64], Tensor[(14, 10, 8), bool], Tensor[(11, 11, 12), uint32], Tensor[(1452), uint32], Tensor[(15, 4, 4), float32]) {
  %760 = cast(%var_3157, dtype="float64") /* ty=Tensor[(14, 10, 8), float64] */;
  %761 = cast(meta[relay.Constant][30] /* ty=Tensor[(14, 10, 8), float64] */, dtype="bool") /* ty=Tensor[(14, 10, 8), bool] */;
  %762 = shape_of(%var_3157, dtype="int32") /* ty=Tensor[(3), int32] */;
  %763 = cast(%var_3157, dtype="bool") /* ty=Tensor[(14, 10, 8), bool] */;
  %764 = dyn.reshape(%761, %762, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %765 = cast(meta[relay.Constant][31] /* ty=Tensor[(1452), uint32] */, dtype="uint32") /* ty=Tensor[(1452), uint32] */;
  %766 = reshape(%765, newshape=[11, 11, 12]) /* ty=Tensor[(11, 11, 12), uint32] */;
  %767 = @func_3137(%766) /* ty=(Tensor[(11, 11, 12), uint32],) */;
  %768 = @func_3033() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %769 = rsqrt(%760) /* ty=Tensor[(14, 10, 8), float64] */;
  %770 = logical_and(%763, %764) /* ty=Tensor[(14, 10, 8), bool] */;
  %771 = %767.0;
  %772 = %768.0;
  (%769, %770, %771, meta[relay.Constant][31] /* ty=Tensor[(1452), uint32] */, %772)
}

def @func_4104(%var_4070: Tensor[(15, 4, 4), float32]) -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), uint32]) {
  %773 = @func_2614() /* ty=Tensor[(15, 4, 4), float32] */;
  %774 = cast(%var_4070, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %775 = shape_of(%773, dtype="int32") /* ty=Tensor[(3), int32] */;
  %776 = cast(%773, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %777 = dyn.reshape(%774, %775, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %778 = cast(%var_4070, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %779 = reshape(%778, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float32] */;
  %780 = power(%776, %777) /* ty=Tensor[(15, 4, 4), float32] */;
  %781 = @func_2031(%779) /* ty=Tensor[(15, 4, 4), uint32] */;
  (%780, %781)
}

def @func_4539() -> Tensor[(13, 2, 16), int32] {
  %783 = fn () -> Tensor[(13, 2, 16), int32] {
    %782 = @func_1161() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32]) */;
    %782.1
  };
  %783() /* ty=Tensor[(13, 2, 16), int32] */
}

def @func_7201() -> (Tensor[(672), float64], Tensor[(15, 4, 4), float32]) {
  %784 = @func_5289() /* ty=(Tensor[(672), float64], Tensor[(672), float64]) */;
  %785 = %784.1;
  %786 = @func_7008() /* ty=Tensor[(15, 4, 4), float32] */;
  (%785, %786)
}

def @func_3694(%var_3693: Tensor[(15, 4, 4), float32]) -> (Tensor[(15, 4, 4), bool], Tensor[(15, 4, 4), float32]) {
  %795 = fn (%var_3661: Tensor[(15, 4, 4), float32]) -> (Tensor[(15, 4, 4), bool], Tensor[(15, 4, 4), float32]) {
    %787 = @func_2256() /* ty=Tensor[(15, 4, 4), float32] */;
    %788 = cast(%var_3661, dtype="bool") /* ty=Tensor[(15, 4, 4), bool] */;
    %789 = shape_of(%787, dtype="int32") /* ty=Tensor[(3), int32] */;
    %790 = cast(%787, dtype="bool") /* ty=Tensor[(15, 4, 4), bool] */;
    %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %792 = @func_2016() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(15, 4, 4), float32]) */;
    %793 = equal(%790, %791) /* ty=Tensor[(15, 4, 4), bool] */;
    %794 = %792.3;
    (%793, %794)
  };
  %795(%var_3693) /* ty=(Tensor[(15, 4, 4), bool], Tensor[(15, 4, 4), float32]) */
}

def @func_3986() -> (Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), bool]) {
  %803 = fn () -> (Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), bool]) {
    %796 = @func_1735() /* ty=(Tensor[(672), float64],) */;
    %797 = @func_2614() /* ty=Tensor[(15, 4, 4), float32] */;
    %798 = cast(%797, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
    %799 = reshape(%798, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float32] */;
    %800 = @func_3692(%799) /* ty=(Tensor[(15, 4, 4), bool], Tensor[(15, 4, 4), float32]) */;
    %801 = %796.0;
    %802 = %800.0;
    (%801, %797, %802)
  };
  %803() /* ty=(Tensor[(672), float64], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), bool]) */
}

def @func_10538() -> (Tensor[(15, 4, 4), float32],) {
  %804 = @func_1430() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
  %805 = %804.0;
  (%805,)
}

def @func_6265(%var_6248: float64) -> (Tensor[(5, 2, 12), float64], Tensor[(15, 4, 4), float32]) {
  %806 = cast(%var_6248, dtype="float64") /* ty=float64 */;
  %807 = cast(meta[relay.Constant][32] /* ty=Tensor[(5, 2, 12), float64] */, dtype="float64") /* ty=Tensor[(5, 2, 12), float64] */;
  %808 = divide(%806, %807) /* ty=Tensor[(5, 2, 12), float64] */;
  %809 = @func_2659() /* ty=Tensor[(15, 4, 4), float32] */;
  (%808, %809)
}

def @func_6400() -> Tensor[(13, 2, 16), float32] {
  %810 = @func_4538() /* ty=Tensor[(13, 2, 16), int32] */;
  %811 = cast(%810, dtype="float32") /* ty=Tensor[(13, 2, 16), float32] */;
  asin(%811) /* ty=Tensor[(13, 2, 16), float32] */
}

def @func_2165(%var_2097: Tensor[(416), int64]) -> (Tensor[(13, 2, 16), bool], Tensor[(416), int64], Tensor[(15, 4, 4), bool], Tensor[(15, 4, 4), uint32], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), uint16]) {
  %812 = cast(%var_2097, dtype="int64") /* ty=Tensor[(416), int64] */;
  %813 = reshape(%812, newshape=[13, 2, 16]) /* ty=Tensor[(13, 2, 16), int64] */;
  %814 = @func_1397() /* ty=Tensor[(15, 4, 4), float32] */;
  %815 = @func_719() /* ty=Tensor[(15, 4, 4), float32] */;
  %816 = cast(%815, dtype="bool") /* ty=Tensor[(15, 4, 4), bool] */;
  %817 = shape_of(%814, dtype="int32") /* ty=Tensor[(3), int32] */;
  %818 = cast(%814, dtype="bool") /* ty=Tensor[(15, 4, 4), bool] */;
  %819 = dyn.reshape(%816, %817, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %820 = not_equal(%818, %819) /* ty=Tensor[(15, 4, 4), bool] */;
  %821 = cast(%820, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %822 = reshape(%821, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float32] */;
  %823 = @func_1503(%822) /* ty=Tensor[(15, 4, 4), float64] */;
  %824 = cast(%823, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
  %825 = reshape(%824, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float32] */;
  %826 = cast(meta[relay.Constant][33] /* ty=Tensor[(15, 4, 4), float64] */, dtype="uint16") /* ty=Tensor[(15, 4, 4), uint16] */;
  %827 = shape_of(%823, dtype="int32") /* ty=Tensor[(3), int32] */;
  %828 = cast(%823, dtype="uint16") /* ty=Tensor[(15, 4, 4), uint16] */;
  %829 = dyn.reshape(%826, %827, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %830 = @func_915(%813) /* ty=Tensor[(13, 2, 16), bool] */;
  %831 = @func_2031(%825) /* ty=Tensor[(15, 4, 4), uint32] */;
  %832 = @func_1397() /* ty=Tensor[(15, 4, 4), float32] */;
  %833 = subtract(%828, %829) /* ty=Tensor[(15, 4, 4), uint16] */;
  (%830, %var_2097, %820, %831, %832, %833)
}

def @func_8283() -> (Tensor[(15, 4, 4), float32],) {
  %836 = fn () -> (Tensor[(15, 4, 4), float32],) {
    %834 = @func_4317() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
    %835 = %834.1;
    (%835,)
  };
  %836() /* ty=(Tensor[(15, 4, 4), float32],) */
}

def @func_8993() -> (Tensor[(672), float64],) {
  %837 = @func_4040() /* ty=Tensor[(672), float64] */;
  (%837,)
}

def @func_5800(%var_5798: Tensor[(9, 4, 12), int32], %var_5799: Tensor[(9, 4, 12), int32]) -> (Tensor[(9, 4, 12), int32],) {
  %843 = fn (%var_5792: Tensor[(9, 4, 12), int32], %var_5793: Tensor[(9, 4, 12), int32]) -> (Tensor[(9, 4, 12), int32],) {
    %838 = cast(%var_5793, dtype="int32") /* ty=Tensor[(9, 4, 12), int32] */;
    %839 = shape_of(%var_5792, dtype="int32") /* ty=Tensor[(3), int32] */;
    %840 = cast(%var_5792, dtype="int32") /* ty=Tensor[(9, 4, 12), int32] */;
    %841 = dyn.reshape(%838, %839, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %842 = minimum(%840, %841) /* ty=Tensor[(9, 4, 12), int32] */;
    (%842,)
  };
  %843(%var_5798, %var_5799) /* ty=(Tensor[(9, 4, 12), int32],) */
}

def @func_8174() -> (Tensor[(15, 4, 4), float32], Tensor[(4, 104), int64], Tensor[(13, 2, 16), int32], Tensor[(13, 2, 16), float32]) {
  @func_8172() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(4, 104), int64], Tensor[(13, 2, 16), int32], Tensor[(13, 2, 16), float32]) */
}

def @func_3540(%var_3472: Tensor[(15, 4, 4), float32]) -> (Tensor[(13, 2, 16), bool], Tensor[(416), int32], Tensor[(13, 2, 16), bool], Tensor[(15, 4, 4), int32]) {
  %844 = cast(meta[relay.Constant][34] /* ty=Tensor[(416), int32] */, dtype="int32") /* ty=Tensor[(416), int32] */;
  %845 = reshape(%844, newshape=[13, 2, 16]) /* ty=Tensor[(13, 2, 16), int32] */;
  %846 = @func_1529(%845) /* ty=(Tensor[(13, 2, 16), bool],) */;
  %847 = %846.0;
  %848 = cast(%847, dtype="int64") /* ty=Tensor[(13, 2, 16), int64] */;
  %849 = reshape(%848, newshape=[13, 2, 16]) /* ty=Tensor[(13, 2, 16), int64] */;
  %850 = @func_3033() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %851 = %850.1;
  %852 = cast(%var_3472, dtype="int32") /* ty=Tensor[(15, 4, 4), int32] */;
  %853 = shape_of(%851, dtype="int32") /* ty=Tensor[(3), int32] */;
  %854 = cast(%851, dtype="int32") /* ty=Tensor[(15, 4, 4), int32] */;
  %855 = dyn.reshape(%852, %853, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %856 = minimum(%854, %855) /* ty=Tensor[(15, 4, 4), int32] */;
  %857 = cast(%856, dtype="bool") /* ty=Tensor[(15, 4, 4), bool] */;
  %858 = shape_of(%851, dtype="int32") /* ty=Tensor[(3), int32] */;
  %859 = cast(%851, dtype="bool") /* ty=Tensor[(15, 4, 4), bool] */;
  %860 = dyn.reshape(%857, %858, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %861 = less_equal(%859, %860) /* ty=Tensor[(15, 4, 4), bool] */;
  %862 = @func_1161() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32]) */;
  %863 = %862.0;
  %864 = cast(%863, dtype="int32") /* ty=Tensor[(15, 4, 4), int32] */;
  %865 = shape_of(%861, dtype="int32") /* ty=Tensor[(3), int32] */;
  %866 = cast(%861, dtype="int32") /* ty=Tensor[(15, 4, 4), int32] */;
  %867 = dyn.reshape(%864, %865, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %868 = @func_915(%849) /* ty=Tensor[(13, 2, 16), bool] */;
  %869 = left_shift(%866, %867) /* ty=Tensor[(15, 4, 4), int32] */;
  (%847, meta[relay.Constant][34] /* ty=Tensor[(416), int32] */, %868, %869)
}

def @func_7160() -> (Tensor[(15, 4, 4), float32],) {
  %870 = @func_5486() /* ty=Tensor[(15, 4, 4), float32] */;
  (%870,)
}

def @func_6279(%var_6278: Tensor[(8, 1, 5), float32]) -> (Tensor[(8, 1, 5), float32],) {
  %873 = fn (%var_6270: Tensor[(8, 1, 5), float32]) -> (Tensor[(8, 1, 5), float32],) {
    %871 = cast(%var_6270, dtype="float32") /* ty=Tensor[(8, 1, 5), float32] */;
    %872 = exp(%871) /* ty=Tensor[(8, 1, 5), float32] */;
    (%872,)
  };
  %873(%var_6278) /* ty=(Tensor[(8, 1, 5), float32],) */
}

def @func_4167() -> (Tensor[(15, 4, 4), float32], Tensor[(672), float64]) {
  %878 = fn () -> (Tensor[(15, 4, 4), float32], Tensor[(672), float64]) {
    %874 = @func_2016() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(15, 4, 4), float32]) */;
    %875 = @func_2972() /* ty=(Tensor[(672), float64], Tensor[(15, 4, 4), float32]) */;
    %876 = %874.0;
    %877 = %875.0;
    (%876, %877)
  };
  %878() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */
}

def @func_6659(%var_6653: Tensor[(672), float64]) -> (Tensor[(364), int16], Tensor[(15, 4, 4), float32], Tensor[(16, 14, 3), float64], Tensor[(672), float64]) {
  %879 = @func_1913() /* ty=(Tensor[(2, 14, 13), int16], Tensor[(364), int16], Tensor[(15, 4, 4), float32]) */;
  %880 = @func_1367() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(2, 14, 13), int16], Tensor[(672), float64], Tensor[(182, 2), float32]) */;
  %881 = cast(%var_6653, dtype="float64") /* ty=Tensor[(672), float64] */;
  %882 = reshape(%881, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), float64] */;
  %883 = @func_618(%882) /* ty=(Tensor[(16, 14, 3), float64],) */;
  %884 = %879.1;
  %885 = %880.0;
  %886 = %883.0;
  (%884, %885, %886, %var_6653)
}

def @func_3260(%var_3258: Tensor[(5, 10, 7), float32], %var_3259: Tensor[(5, 10, 7), float32]) -> (Tensor[(5, 10, 7), float32], Tensor[(15, 4, 4), float64], Tensor[(240), float32], Tensor[(5, 10, 7), bool]) {
  %899 = fn (%var_3225: Tensor[(5, 10, 7), float32], %var_3245: Tensor[(5, 10, 7), float32]) -> (Tensor[(5, 10, 7), float32], Tensor[(15, 4, 4), float64], Tensor[(240), float32], Tensor[(5, 10, 7), bool]) {
    %887 = cast(%var_3225, dtype="float32") /* ty=Tensor[(5, 10, 7), float32] */;
    %888 = cast(meta[relay.Constant][35] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
    %889 = reshape(%888, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float32] */;
    %890 = cast(%var_3225, dtype="float32") /* ty=Tensor[(5, 10, 7), float32] */;
    %891 = sqrt(%890) /* ty=Tensor[(5, 10, 7), float32] */;
    %892 = cast(%var_3245, dtype="bool") /* ty=Tensor[(5, 10, 7), bool] */;
    %893 = shape_of(%891, dtype="int32") /* ty=Tensor[(3), int32] */;
    %894 = cast(%891, dtype="bool") /* ty=Tensor[(5, 10, 7), bool] */;
    %895 = dyn.reshape(%892, %893, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %896 = acosh(%887) /* ty=Tensor[(5, 10, 7), float32] */;
    %897 = @func_1503(%889) /* ty=Tensor[(15, 4, 4), float64] */;
    %898 = equal(%894, %895) /* ty=Tensor[(5, 10, 7), bool] */;
    (%896, %897, meta[relay.Constant][35] /* ty=Tensor[(240), float32] */, %898)
  };
  %899(%var_3258, %var_3259) /* ty=(Tensor[(5, 10, 7), float32], Tensor[(15, 4, 4), float64], Tensor[(240), float32], Tensor[(5, 10, 7), bool]) */
}

def @func_9303(%var_9302: Tensor[(13, 2, 16), int32]) -> Tensor[(13, 2, 16), bool] {
  %905 = fn (%var_9288: Tensor[(13, 2, 16), int32]) -> Tensor[(13, 2, 16), bool] {
    %900 = @func_2926() /* ty=Tensor[(13, 2, 16), int32] */;
    %901 = cast(%var_9288, dtype="bool") /* ty=Tensor[(13, 2, 16), bool] */;
    %902 = shape_of(%900, dtype="int32") /* ty=Tensor[(3), int32] */;
    %903 = cast(%900, dtype="bool") /* ty=Tensor[(13, 2, 16), bool] */;
    %904 = dyn.reshape(%901, %902, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%903, %904) /* ty=Tensor[(13, 2, 16), bool] */
  };
  %905(%var_9302) /* ty=Tensor[(13, 2, 16), bool] */
}

def @func_5072() -> (Tensor[(364), int16], Tensor[(672), float64]) {
  %909 = fn () -> (Tensor[(364), int16], Tensor[(672), float64]) {
    %906 = @func_1913() /* ty=(Tensor[(2, 14, 13), int16], Tensor[(364), int16], Tensor[(15, 4, 4), float32]) */;
    %907 = %906.1;
    %908 = @func_4040() /* ty=Tensor[(672), float64] */;
    (%907, %908)
  };
  %909() /* ty=(Tensor[(364), int16], Tensor[(672), float64]) */
}

def @func_7203() -> (Tensor[(672), float64], Tensor[(15, 4, 4), float32]) {
  @func_7201() /* ty=(Tensor[(672), float64], Tensor[(15, 4, 4), float32]) */
}

def @func_6330() -> Tensor[(15, 4, 4), float32] {
  @func_3629() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_10654() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  %910 = @func_7727() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
  %911 = @func_719() /* ty=Tensor[(15, 4, 4), float32] */;
  %912 = %910.0;
  (%911, %912)
}

def @func_2529() -> Tensor[(15, 4, 4), float32] {
  %913 = @func_1810() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %913.1
}

def @func_6915() -> Tensor[(15, 4, 4), float32] {
  %915 = fn () -> Tensor[(15, 4, 4), float32] {
    %914 = @func_2310() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
    %914.1
  };
  %915() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_7146() -> (Tensor[(15, 4, 4), float32],) {
  %918 = fn () -> (Tensor[(15, 4, 4), float32],) {
    %916 = @func_1161() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), int32]) */;
    %917 = %916.0;
    (%917,)
  };
  %918() /* ty=(Tensor[(15, 4, 4), float32],) */
}

def @func_9142() -> (Tensor[(672), float64],) {
  %920 = fn () -> (Tensor[(672), float64],) {
    %919 = @func_8688() /* ty=Tensor[(672), float64] */;
    (%919,)
  };
  %920() /* ty=(Tensor[(672), float64],) */
}

def @func_988(%var_987: Tensor[(11, 1, 6), int64]) -> (Tensor[(11, 1, 6), bool],) {
  %924 = fn (%var_982: Tensor[(11, 1, 6), int64]) -> (Tensor[(11, 1, 6), bool],) {
    %921 = cast(-6 /* ty=int64 */, dtype="bool") /* ty=bool */;
    %922 = cast(%var_982, dtype="bool") /* ty=Tensor[(11, 1, 6), bool] */;
    %923 = less_equal(%921, %922) /* ty=Tensor[(11, 1, 6), bool] */;
    (%923,)
  };
  %924(%var_987) /* ty=(Tensor[(11, 1, 6), bool],) */
}

def @func_10901(%var_10899: Tensor[(66), int64], %var_10900: Tensor[(416), int32]) -> (Tensor[(66), int32], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), uint32], Tensor[(13, 2, 16), float64], Tensor[(416), int32], Tensor[(16, 3, 13), float64]) {
  %942 = fn (%var_10838: Tensor[(66), int64], %var_10862: Tensor[(416), int32]) -> (Tensor[(66), int32], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), uint32], Tensor[(13, 2, 16), float64], Tensor[(416), int32], Tensor[(16, 3, 13), float64]) {
    %925 = @func_9914() /* ty=(Tensor[(66), int64],) */;
    %926 = %925.0;
    %927 = cast(%var_10838, dtype="int32") /* ty=Tensor[(66), int32] */;
    %928 = shape_of(%926, dtype="int32") /* ty=Tensor[(1), int32] */;
    %929 = cast(%926, dtype="int32") /* ty=Tensor[(66), int32] */;
    %930 = dyn.reshape(%927, %928, newshape=[]) /* ty=Tensor[(?), int32] */;
    %931 = @func_3629() /* ty=Tensor[(15, 4, 4), float32] */;
    %932 = cast(%931, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
    %933 = reshape(%932, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float32] */;
    %934 = cast(%var_10862, dtype="int32") /* ty=Tensor[(416), int32] */;
    %935 = reshape(%934, newshape=[13, 2, 16]) /* ty=Tensor[(13, 2, 16), int32] */;
    %936 = @func_5375(%935) /* ty=(Tensor[(13, 2, 16), float64],) */;
    %937 = @func_1476() /* ty=(Tensor[(13, 2, 16), int32], Tensor[(2, 14, 13), float64], Tensor[(15, 4, 4), float32], Tensor[(16, 3, 13), float64], Tensor[(624), float64], Tensor[(66), int64], Tensor[(15, 4, 4), float32]) */;
    %938 = maximum(%929, %930) /* ty=Tensor[(66), int32] */;
    %939 = @func_2031(%933) /* ty=Tensor[(15, 4, 4), uint32] */;
    %940 = %936.0;
    %941 = %937.3;
    (%938, %931, %939, %940, %var_10862, %941)
  };
  %942(%var_10899, %var_10900) /* ty=(Tensor[(66), int32], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), uint32], Tensor[(13, 2, 16), float64], Tensor[(416), int32], Tensor[(16, 3, 13), float64]) */
}

def @func_2791(%var_2789: Tensor[(378), float64], %var_2790: Tensor[(14, 9, 3), bool]) -> (Tensor[(15, 4, 4), float32], Tensor[(378), float64], Tensor[(14, 9, 3), float32]) {
  %953 = fn (%var_2757: Tensor[(378), float64], %var_2765: Tensor[(14, 9, 3), bool]) -> (Tensor[(15, 4, 4), float32], Tensor[(378), float64], Tensor[(14, 9, 3), float32]) {
    %943 = @func_1577() /* ty=(Tensor[(15, 4, 4), float32],) */;
    %944 = cast(%var_2757, dtype="float64") /* ty=Tensor[(378), float64] */;
    %945 = reshape(%944, newshape=[14, 9, 3]) /* ty=Tensor[(14, 9, 3), float64] */;
    %946 = @func_1328(%945) /* ty=Tensor[(14, 9, 3), bool] */;
    %947 = cast(%var_2765, dtype="float32") /* ty=Tensor[(14, 9, 3), float32] */;
    %948 = shape_of(%946, dtype="int32") /* ty=Tensor[(3), int32] */;
    %949 = cast(%946, dtype="float32") /* ty=Tensor[(14, 9, 3), float32] */;
    %950 = dyn.reshape(%947, %948, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %951 = %943.0;
    %952 = floor_divide(%949, %950) /* ty=Tensor[(14, 9, 3), float32] */;
    (%951, %var_2757, %952)
  };
  %953(%var_2789, %var_2790) /* ty=(Tensor[(15, 4, 4), float32], Tensor[(378), float64], Tensor[(14, 9, 3), float32]) */
}

def @func_6973() -> (Tensor[(364), int16],) {
  %954 = @func_5071() /* ty=(Tensor[(364), int16], Tensor[(672), float64]) */;
  %955 = %954.0;
  (%955,)
}

def @func_3137(%var_3125: Tensor[(11, 11, 12), uint32]) -> (Tensor[(11, 11, 12), uint32],) {
  %956 = cast(%var_3125, dtype="uint32") /* ty=Tensor[(11, 11, 12), uint32] */;
  %957 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(11, 11, 12), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %958 = cast(meta[relay.Constant][36] /* ty=Tensor[(11, 11, 12), uint32] */, dtype="uint32") /* ty=Tensor[(11, 11, 12), uint32] */;
  %959 = dyn.reshape(%956, %957, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %960 = bitwise_or(%958, %959) /* ty=Tensor[(11, 11, 12), uint32] */;
  (%960,)
}

def @func_3140(%var_3138: Tensor[(11, 11, 12), uint32]) -> (Tensor[(11, 11, 12), uint32],) {
  @func_3137(%var_3138) /* ty=(Tensor[(11, 11, 12), uint32],) */
}

def @func_4042() -> Tensor[(672), float64] {
  @func_4040() /* ty=Tensor[(672), float64] */
}

def @func_6032() -> (Tensor[(672), float64],) {
  %963 = fn () -> (Tensor[(672), float64],) {
    %961 = @func_4896() /* ty=(Tensor[(672), float64],) */;
    %962 = %961.0;
    (%962,)
  };
  %963() /* ty=(Tensor[(672), float64],) */
}

def @func_2576() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  %964 = @func_1686() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %965 = @func_1634() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %966 = %964.0;
  %967 = %965.0;
  (%966, %967)
}

def @func_1302(%var_1297: Tensor[(7, 6, 15), uint32]) -> Tensor[(7, 6, 15), bool] {
  %968 = cast(meta[relay.Constant][37] /* ty=Tensor[(7, 6, 15), uint32] */, dtype="bool") /* ty=Tensor[(7, 6, 15), bool] */;
  %969 = shape_of(%var_1297, dtype="int32") /* ty=Tensor[(3), int32] */;
  %970 = cast(%var_1297, dtype="bool") /* ty=Tensor[(7, 6, 15), bool] */;
  %971 = dyn.reshape(%968, %969, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%970, %971) /* ty=Tensor[(7, 6, 15), bool] */
}

def @func_6021() -> (Tensor[(672), float64], Tensor[(15, 4, 4), float32]) {
  @func_6019() /* ty=(Tensor[(672), float64], Tensor[(15, 4, 4), float32]) */
}

def @func_2017() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(15, 4, 4), float32]) {
  %980 = fn () -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(15, 4, 4), float32]) {
    %972 = @func_752() /* ty=(Tensor[(15, 4, 4), float32],) */;
    %973 = @func_1430() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
    %974 = @func_1735() /* ty=(Tensor[(672), float64],) */;
    %975 = @func_1577() /* ty=(Tensor[(15, 4, 4), float32],) */;
    %976 = %972.0;
    %977 = %973.0;
    %978 = %974.0;
    %979 = %975.0;
    (%976, %977, %978, %979)
  };
  %980() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(15, 4, 4), float32]) */
}

def @func_5953() -> (Tensor[(15, 4, 4), float32],) {
  %982 = fn () -> (Tensor[(15, 4, 4), float32],) {
    %981 = @func_2614() /* ty=Tensor[(15, 4, 4), float32] */;
    (%981,)
  };
  %982() /* ty=(Tensor[(15, 4, 4), float32],) */
}

def @func_642(%var_633: Tensor[(2, 14, 13), int16]) -> (Tensor[(2, 14, 13), int16],) {
  %983 = cast(meta[relay.Constant][38] /* ty=Tensor[(2, 14, 13), int16] */, dtype="int16") /* ty=Tensor[(2, 14, 13), int16] */;
  %984 = shape_of(%var_633, dtype="int32") /* ty=Tensor[(3), int32] */;
  %985 = cast(%var_633, dtype="int16") /* ty=Tensor[(2, 14, 13), int16] */;
  %986 = dyn.reshape(%983, %984, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %987 = subtract(%985, %986) /* ty=Tensor[(2, 14, 13), int16] */;
  (%987,)
}

def @func_6562() -> Tensor[(15, 4, 4), float32] {
  %989 = fn () -> Tensor[(15, 4, 4), float32] {
    %988 = @func_1686() /* ty=(Tensor[(15, 4, 4), float32],) */;
    %988.0
  };
  %989() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_4729() -> (Tensor[(15, 4, 4), float32],) {
  %991 = fn () -> (Tensor[(15, 4, 4), float32],) {
    %990 = @func_2457() /* ty=Tensor[(15, 4, 4), float32] */;
    (%990,)
  };
  %991() /* ty=(Tensor[(15, 4, 4), float32],) */
}

def @func_719() -> Tensor[(15, 4, 4), float32] {
  %992 = @func_698() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %992.0
}

def @func_6750(%var_6749: Tensor[(13, 4, 10), float32]) -> (Tensor[(13, 4, 10), float32], Tensor[(13, 4, 10), float32]) {
  %1001 = fn (%var_6724: Tensor[(13, 4, 10), float32]) -> (Tensor[(13, 4, 10), float32], Tensor[(13, 4, 10), float32]) {
    %993 = cast(%var_6724, dtype="float32") /* ty=Tensor[(13, 4, 10), float32] */;
    %994 = cast(%var_6724, dtype="float32") /* ty=Tensor[(13, 4, 10), float32] */;
    %995 = asin(%994) /* ty=Tensor[(13, 4, 10), float32] */;
    %996 = cast(%995, dtype="float32") /* ty=Tensor[(13, 4, 10), float32] */;
    %997 = sinh(%996) /* ty=Tensor[(13, 4, 10), float32] */;
    %998 = cast(%997, dtype="float32") /* ty=Tensor[(13, 4, 10), float32] */;
    %999 = log(%993) /* ty=Tensor[(13, 4, 10), float32] */;
    %1000 = erf(%998) /* ty=Tensor[(13, 4, 10), float32] */;
    (%999, %1000)
  };
  %1001(%var_6749) /* ty=(Tensor[(13, 4, 10), float32], Tensor[(13, 4, 10), float32]) */
}

def @func_5539() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  %1002 = @func_1397() /* ty=Tensor[(15, 4, 4), float32] */;
  %1003 = @func_3629() /* ty=Tensor[(15, 4, 4), float32] */;
  (%1002, %1003)
}

def @func_10664() -> (Tensor[(672), float64],) {
  @func_10662() /* ty=(Tensor[(672), float64],) */
}

def @func_4897() -> (Tensor[(672), float64],) {
  %1006 = fn () -> (Tensor[(672), float64],) {
    %1004 = @func_4238() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(416), int32], Tensor[(672), float64]) */;
    %1005 = %1004.2;
    (%1005,)
  };
  %1006() /* ty=(Tensor[(672), float64],) */
}

def @func_1432() -> (Tensor[(15, 4, 4), float32], Tensor[(672), float64]) {
  @func_1430() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */
}

def @func_4155() -> Tensor[(15, 4, 4), float32] {
  %1007 = @func_1686() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %1007.0
}

def @func_3184(%var_3182: Tensor[(14, 10, 8), float64]) -> (Tensor[(14, 10, 8), float64], Tensor[(14, 10, 8), bool], Tensor[(11, 11, 12), uint32], Tensor[(1452), uint32], Tensor[(15, 4, 4), float32]) {
  @func_3181(%var_3182) /* ty=(Tensor[(14, 10, 8), float64], Tensor[(14, 10, 8), bool], Tensor[(11, 11, 12), uint32], Tensor[(1452), uint32], Tensor[(15, 4, 4), float32]) */
}

def @func_4239() -> (Tensor[(15, 4, 4), float32], Tensor[(416), int32], Tensor[(672), float64]) {
  %1015 = fn () -> (Tensor[(15, 4, 4), float32], Tensor[(416), int32], Tensor[(672), float64]) {
    %1008 = @func_4155() /* ty=Tensor[(15, 4, 4), float32] */;
    %1009 = cast(%1008, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
    %1010 = reshape(%1009, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float32] */;
    %1011 = @func_3540(%1010) /* ty=(Tensor[(13, 2, 16), bool], Tensor[(416), int32], Tensor[(13, 2, 16), bool], Tensor[(15, 4, 4), int32]) */;
    %1012 = @func_1735() /* ty=(Tensor[(672), float64],) */;
    %1013 = %1011.1;
    %1014 = %1012.0;
    (%1008, %1013, %1014)
  };
  %1015() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(416), int32], Tensor[(672), float64]) */
}

def @func_699() -> (Tensor[(15, 4, 4), float32],) {
  %1018 = fn () -> (Tensor[(15, 4, 4), float32],) {
    %1016 = cast(meta[relay.Constant][39] /* ty=Tensor[(15, 4, 4), float32] */, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
    %1017 = sinh(%1016) /* ty=Tensor[(15, 4, 4), float32] */;
    (%1017,)
  };
  %1018() /* ty=(Tensor[(15, 4, 4), float32],) */
}

def @func_11096(%var_11095: Tensor[(7, 7, 7), float32]) -> Tensor[(7, 7, 7), float32] {
  %1020 = fn (%var_11091: Tensor[(7, 7, 7), float32]) -> Tensor[(7, 7, 7), float32] {
    %1019 = cast(%var_11091, dtype="float32") /* ty=Tensor[(7, 7, 7), float32] */;
    cosh(%1019) /* ty=Tensor[(7, 7, 7), float32] */
  };
  %1020(%var_11095) /* ty=Tensor[(7, 7, 7), float32] */
}

def @func_3803() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  %1030 = fn () -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
    %1021 = @func_1227() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(16, 14, 3), float64]) */;
    %1022 = %1021.0;
    %1023 = cast(%1022, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
    %1024 = reshape(%1023, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float32] */;
    %1025 = @func_1969(%1024) /* ty=(Tensor[(15, 4, 4), bool], Tensor[(2, 14, 13), int16], Tensor[(91, 4), float64]) */;
    %1026 = %1025.0;
    %1027 = cast(%1026, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
    %1028 = acos(%1027) /* ty=Tensor[(15, 4, 4), float32] */;
    %1029 = @func_3629() /* ty=Tensor[(15, 4, 4), float32] */;
    (%1022, %1028, %1029)
  };
  %1030() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */
}

def @func_4319() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  @func_4317() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */
}

def @func_5173(%var_5171: Tensor[(350, 1), float32]) -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(5, 10, 7), float32], Tensor[(350, 364), float32], Tensor[(15, 4, 4), float32]) {
  @func_5170(%var_5171) /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(672), float64], Tensor[(5, 10, 7), float32], Tensor[(350, 364), float32], Tensor[(15, 4, 4), float32]) */
}

def @func_5378(%var_5376: Tensor[(13, 2, 16), int32]) -> (Tensor[(13, 2, 16), float64],) {
  @func_5375(%var_5376) /* ty=(Tensor[(13, 2, 16), float64],) */
}

def @func_10041() -> Tensor[(15, 4, 4), float32] {
  @func_10039() /* ty=Tensor[(15, 4, 4), float32] */
}

def @func_2312() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  @func_2310() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */
}

def @func_4664() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), uint32]) {
  %1038 = fn () -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), uint32]) {
    %1031 = @func_698() /* ty=(Tensor[(15, 4, 4), float32],) */;
    %1032 = %1031.0;
    %1033 = cast(%1032, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
    %1034 = sin(%1033) /* ty=Tensor[(15, 4, 4), float32] */;
    %1035 = cast(%1034, dtype="float32") /* ty=Tensor[(15, 4, 4), float32] */;
    %1036 = reshape(%1035, newshape=[15, 4, 4]) /* ty=Tensor[(15, 4, 4), float32] */;
    %1037 = @func_2031(%1036) /* ty=Tensor[(15, 4, 4), uint32] */;
    (%1034, %1037)
  };
  %1038() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), uint32]) */
}

def @func_4993(%var_4975: uint32, %var_4976: Tensor[(2, 10, 3), uint32]) -> (Tensor[(2, 10, 3), uint32], Tensor[(15, 4, 4), float32]) {
  %1039 = cast(%var_4975, dtype="uint32") /* ty=uint32 */;
  %1040 = cast(%var_4976, dtype="uint32") /* ty=Tensor[(2, 10, 3), uint32] */;
  %1041 = @func_4317() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %1042 = logical_xor(%1039, %1040) /* ty=Tensor[(2, 10, 3), uint32] */;
  %1043 = %1041.1;
  (%1042, %1043)
}

def @func_2310() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) {
  %1044 = @func_2072() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32]) */;
  %1045 = @func_2256() /* ty=Tensor[(15, 4, 4), float32] */;
  %1046 = %1044.0;
  (%1045, %1046)
}

def @func_8616() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), float32], Tensor[(13, 2, 16), float64]) {
  %1047 = @func_4886() /* ty=(Tensor[(15, 4, 4), float32],) */;
  %1048 = @func_4587() /* ty=(Tensor[(13, 2, 16), float64], Tensor[(13, 2, 16), float32], Tensor[(13, 2, 16), uint8]) */;
  %1049 = @func_2614() /* ty=Tensor[(15, 4, 4), float32] */;
  %1050 = %1047.0;
  %1051 = %1048.0;
  (%1049, %1050, %1051)
}

def @func_8507() -> (Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), bool], Tensor[(15, 4, 4), float32]) {
  @func_8505() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(15, 4, 4), bool], Tensor[(15, 4, 4), float32]) */
}

def @func_1688() -> (Tensor[(15, 4, 4), float32],) {
  @func_1686() /* ty=(Tensor[(15, 4, 4), float32],) */
}

def @func_7099(%var_7067: Tensor[(13, 2, 16), int32]) -> (Tensor[(672), float64], Tensor[(13, 2, 16), uint32]) {
  %1052 = @func_4166() /* ty=(Tensor[(15, 4, 4), float32], Tensor[(672), float64]) */;
  %1053 = @func_6992() /* ty=(Tensor[(13, 2, 16), int32],) */;
  %1054 = %1053.0;
  %1055 = cast(%var_7067, dtype="uint32") /* ty=Tensor[(13, 2, 16), uint32] */;
  %1056 = shape_of(%1054, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1057 = cast(%1054, dtype="uint32") /* ty=Tensor[(13, 2, 16), uint32] */;
  %1058 = dyn.reshape(%1055, %1056, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1059 = %1052.1;
  %1060 = bitwise_and(%1057, %1058) /* ty=Tensor[(13, 2, 16), uint32] */;
  (%1059, %1060)
}

def @func_10331(%var_10329: float32, %var_10330: Tensor[(16, 12, 7), float32]) -> (Tensor[(16, 12, 7), bool],) {
  @func_10327(%var_10329, %var_10330) /* ty=(Tensor[(16, 12, 7), bool],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen290/build/output.py:3638: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen290/build/output.py", line 3643, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(1024) tvmgen_default_fused_reshape_add_kernel0(short* __restrict__ T_add, short* __restrict__ placeholder, short* __restrict__ placeholder1) {
  if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 1260) {
    T_add[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] = (placeholder[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] + placeholder1[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))]);
  }
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

