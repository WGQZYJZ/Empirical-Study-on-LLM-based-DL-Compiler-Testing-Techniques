==========mod==========
#[version = "0.0.5"]
def @func_2760(%var_2741: Tensor[(5, 8, 6), float32], %var_2749: Tensor[(540), int8], %var_2750: Tensor[(264), float64]) -> (Tensor[(5, 8, 6), float32], Tensor[(3, 12, 9), float32], Tensor[(540), int8], Tensor[(264), float64], Tensor[(5, 8, 6), int32]) {
  %0 = @func_2484() /* ty=Tensor[(5, 8, 6), float32] */;
  %1 = cast(%var_2741, dtype="float32") /* ty=Tensor[(5, 8, 6), float32] */;
  %2 = shape_of(%0, dtype="int32") /* ty=Tensor[(3), int32] */;
  %3 = cast(%0, dtype="float32") /* ty=Tensor[(5, 8, 6), float32] */;
  %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %5 = cast(%var_2749, dtype="int8") /* ty=Tensor[(540), int8] */;
  %6 = cast(%var_2750, dtype="float64") /* ty=Tensor[(264), float64] */;
  %7 = reshape(%5, newshape=[540]) /* ty=Tensor[(540), int8] */;
  %8 = reshape(%6, newshape=[264]) /* ty=Tensor[(264), float64] */;
  %9 = @func_1288(%7, %8) /* ty=(Tensor[(3, 12, 9), float32], Tensor[(8, 3, 11), float64], Tensor[(540), int8], Tensor[(264), float64]) */;
  %10 = cast(%var_2741, dtype="int32") /* ty=Tensor[(5, 8, 6), int32] */;
  %11 = shape_of(%0, dtype="int32") /* ty=Tensor[(3), int32] */;
  %12 = cast(%0, dtype="int32") /* ty=Tensor[(5, 8, 6), int32] */;
  %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %14 = divide(%3, %4) /* ty=Tensor[(5, 8, 6), float32] */;
  %15 = %9.0;
  %16 = left_shift(%12, %13) /* ty=Tensor[(5, 8, 6), int32] */;
  (%14, %15, %var_2749, %var_2750, %16)
}

def @func_2249() -> (Tensor[(5, 8, 6), float32],) {
  %17 = @func_2203() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float64]) */;
  %18 = %17.0;
  (%18,)
}

def @func_4862() -> Tensor[(5, 8, 6), int64] {
  %19 = @func_3631() /* ty=(Tensor[(5, 8, 6), int64],) */;
  %19.0
}

def @func_4114(%var_4074: Tensor[(264), float64]) -> (Tensor[(5, 8, 6), int64], Tensor[(8, 3, 11), float64], Tensor[(264), float64], Tensor[(7, 11, 15), bool]) {
  %20 = @func_3838() /* ty=(Tensor[(264), float64], Tensor[(5, 8, 6), int64], Tensor[(5, 8, 6), float32]) */;
  %21 = cast(%var_4074, dtype="float64") /* ty=Tensor[(264), float64] */;
  %22 = cast(%var_4074, dtype="float64") /* ty=Tensor[(264), float64] */;
  %23 = reshape(%21, newshape=[8, 3, 11]) /* ty=Tensor[(8, 3, 11), float64] */;
  %24 = reshape(%22, newshape=[8, 3, 11]) /* ty=Tensor[(8, 3, 11), float64] */;
  %25 = @func_274(%23, %24) /* ty=(Tensor[(8, 3, 11), float64], Tensor[(8, 3, 11), bool]) */;
  %26 = @func_3982() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), int32], Tensor[(5, 8, 6), float32], Tensor[(7, 11, 15), int16]) */;
  %27 = %26.3;
  %28 = cast(%27, dtype="float64") /* ty=Tensor[(7, 11, 15), float64] */;
  %29 = atanh(%28) /* ty=Tensor[(7, 11, 15), float64] */;
  %30 = cast(%27, dtype="bool") /* ty=Tensor[(7, 11, 15), bool] */;
  %31 = shape_of(%29, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(%29, dtype="bool") /* ty=Tensor[(7, 11, 15), bool] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %34 = %20.1;
  %35 = %25.0;
  %36 = logical_and(%32, %33) /* ty=Tensor[(7, 11, 15), bool] */;
  (%34, %35, %var_4074, %36)
}

def @func_5212() -> (Tensor[(264), float64], Tensor[(5, 8, 6), int64]) {
  %37 = @func_3515() /* ty=(Tensor[(264), float64], Tensor[(5, 8, 6), float32]) */;
  %38 = %37.0;
  %39 = @func_4862() /* ty=Tensor[(5, 8, 6), int64] */;
  (%38, %39)
}

def @func_3631() -> (Tensor[(5, 8, 6), int64],) {
  %40 = @func_2708() /* ty=(Tensor[(5, 8, 6), int64],) */;
  %41 = %40.0;
  (%41,)
}

def @func_4426() -> (Tensor[(1, 10, 15), float64], Tensor[(5, 8, 6), float32]) {
  %42 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 10, 15), float32] */, dtype="float32") /* ty=Tensor[(1, 10, 15), float32] */;
  %43 = exp(%42) /* ty=Tensor[(1, 10, 15), float32] */;
  %44 = cast(%43, dtype="float64") /* ty=Tensor[(1, 10, 15), float64] */;
  %45 = sigmoid(%44) /* ty=Tensor[(1, 10, 15), float64] */;
  %46 = @func_2722() /* ty=Tensor[(5, 8, 6), float32] */;
  (%45, %46)
}

def @func_3430(%var_3418: Tensor[(1, 6), int16]) -> (Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float64], Tensor[(3, 88), float64], Tensor[(1, 6), int16]) {
  %47 = @func_3003() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float32]) */;
  %48 = @func_2484() /* ty=Tensor[(5, 8, 6), float32] */;
  %49 = cast(%48, dtype="float64") /* ty=Tensor[(5, 8, 6), float64] */;
  %50 = cast(%var_3418, dtype="int16") /* ty=Tensor[(1, 6), int16] */;
  %51 = reshape(%50, newshape=[1, 6]) /* ty=Tensor[(1, 6), int16] */;
  %52 = @func_3215(%51) /* ty=(Tensor[(12, 6), int16], Tensor[(3, 88), float64], Tensor[(264), float64], Tensor[(5, 8, 6), int64]) */;
  %53 = %47.0;
  %54 = log(%49) /* ty=Tensor[(5, 8, 6), float64] */;
  %55 = %52.1;
  (%53, %54, %55, %var_3418)
}

def @func_5076(%var_5056: Tensor[(1155, 1), int16]) -> (Tensor[(5, 8, 6), int16], Tensor[(1155, 264), int64]) {
  %56 = cast(%var_5056, dtype="int16") /* ty=Tensor[(1155, 1), int16] */;
  %57 = reshape(%56, newshape=[1155]) /* ty=Tensor[(1155), int16] */;
  %58 = @func_3143(%57) /* ty=(Tensor[(5, 8, 6), float64], Tensor[(7, 11, 15), int16], Tensor[(1155), int16], Tensor[(5, 8, 6), int16], Tensor[(5, 8, 6), float64]) */;
  %59 = @func_4564() /* ty=Tensor[(264), float64] */;
  %60 = cast(%var_5056, dtype="int64") /* ty=Tensor[(1155, 1), int64] */;
  %61 = cast(%59, dtype="int64") /* ty=Tensor[(264), int64] */;
  %62 = %58.3;
  %63 = minimum(%60, %61) /* ty=Tensor[(1155, 264), int64] */;
  (%62, %63)
}

def @func_1789(%var_1779: Tensor[(7, 6, 11), float32]) -> (Tensor[(7, 6, 11), float32],) {
  %64 = cast(%var_1779, dtype="float32") /* ty=Tensor[(7, 6, 11), float32] */;
  %65 = sinh(%64) /* ty=Tensor[(7, 6, 11), float32] */;
  (%65,)
}

def @func_2722() -> Tensor[(5, 8, 6), float32] {
  @func_2484() /* ty=Tensor[(5, 8, 6), float32] */
}

def @func_5005(%var_4970: Tensor[(10, 13, 6), int16]) -> (Tensor[(5, 8, 6), float32], Tensor[(10, 13, 6), uint16], Tensor[(7, 6, 11), float32], Tensor[(462), float32]) {
  %66 = cast(meta[relay.Constant][1] /* ty=Tensor[(10, 13, 6), int16] */, dtype="int16") /* ty=Tensor[(10, 13, 6), int16] */;
  %67 = shape_of(%var_4970, dtype="int32") /* ty=Tensor[(3), int32] */;
  %68 = cast(%var_4970, dtype="int16") /* ty=Tensor[(10, 13, 6), int16] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %70 = bitwise_and(%68, %69) /* ty=Tensor[(10, 13, 6), int16] */;
  %71 = cast(%70, dtype="uint16") /* ty=Tensor[(10, 13, 6), uint16] */;
  %72 = shape_of(%var_4970, dtype="int32") /* ty=Tensor[(3), int32] */;
  %73 = cast(%var_4970, dtype="uint16") /* ty=Tensor[(10, 13, 6), uint16] */;
  %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %75 = cast(meta[relay.Constant][2] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
  %76 = reshape(%75, newshape=[7, 6, 11]) /* ty=Tensor[(7, 6, 11), float32] */;
  %77 = @func_1789(%76) /* ty=(Tensor[(7, 6, 11), float32],) */;
  %78 = @func_4462() /* ty=Tensor[(5, 8, 6), float32] */;
  %79 = subtract(%73, %74) /* ty=Tensor[(10, 13, 6), uint16] */;
  %80 = %77.0;
  (%78, %79, %80, meta[relay.Constant][2] /* ty=Tensor[(462), float32] */)
}

def @func_5931() -> (Tensor[(5, 8, 6), int64], Tensor[(5, 8, 6), float32]) {
  %81 = @func_3631() /* ty=(Tensor[(5, 8, 6), int64],) */;
  %82 = @func_5796() /* ty=(Tensor[(5, 8, 6), float32],) */;
  %83 = %81.0;
  %84 = %82.0;
  (%83, %84)
}

def @func_4564() -> Tensor[(264), float64] {
  %85 = @func_3838() /* ty=(Tensor[(264), float64], Tensor[(5, 8, 6), int64], Tensor[(5, 8, 6), float32]) */;
  %85.0
}

def @func_1243(%var_1222: Tensor[(10, 16, 15), float32]) -> Tensor[(10, 16, 15), float64] {
  %86 = cast(%var_1222, dtype="float32") /* ty=Tensor[(10, 16, 15), float32] */;
  %87 = erf(%86) /* ty=Tensor[(10, 16, 15), float32] */;
  %88 = cast(meta[relay.Constant][3] /* ty=Tensor[(10, 16, 15), float32] */, dtype="bool") /* ty=Tensor[(10, 16, 15), bool] */;
  %89 = shape_of(%87, dtype="int32") /* ty=Tensor[(3), int32] */;
  %90 = cast(%87, dtype="bool") /* ty=Tensor[(10, 16, 15), bool] */;
  %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %92 = greater_equal(%90, %91) /* ty=Tensor[(10, 16, 15), bool] */;
  %93 = cast(meta[relay.Constant][4] /* ty=Tensor[(10, 16, 15), bool] */, dtype="float64") /* ty=Tensor[(10, 16, 15), float64] */;
  %94 = shape_of(%92, dtype="int32") /* ty=Tensor[(3), int32] */;
  %95 = cast(%92, dtype="float64") /* ty=Tensor[(10, 16, 15), float64] */;
  %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%95, %96) /* ty=Tensor[(10, 16, 15), float64] */
}

def @func_2510(%var_2508: Tensor[(560), int32]) -> (Tensor[(5, 8, 6), float64], Tensor[(10, 7, 8), bool], Tensor[(560), int32]) {
  %97 = @func_2249() /* ty=(Tensor[(5, 8, 6), float32],) */;
  %98 = %97.0;
  %99 = cast(%98, dtype="float64") /* ty=Tensor[(5, 8, 6), float64] */;
  %100 = cast(%var_2508, dtype="int32") /* ty=Tensor[(560), int32] */;
  %101 = cast(%var_2508, dtype="int32") /* ty=Tensor[(560), int32] */;
  %102 = reshape(%100, newshape=[10, 7, 8]) /* ty=Tensor[(10, 7, 8), int32] */;
  %103 = reshape(%101, newshape=[10, 7, 8]) /* ty=Tensor[(10, 7, 8), int32] */;
  %104 = @func_610(%102, %103) /* ty=(Tensor[(10, 7, 8), bool],) */;
  %105 = acos(%99) /* ty=Tensor[(5, 8, 6), float64] */;
  %106 = %104.0;
  (%105, %106, %var_2508)
}

def @func_3838() -> (Tensor[(264), float64], Tensor[(5, 8, 6), int64], Tensor[(5, 8, 6), float32]) {
  %107 = @func_3563() /* ty=(Tensor[(540), int8], Tensor[(264), float64], Tensor[(264), float64]) */;
  %108 = @func_3631() /* ty=(Tensor[(5, 8, 6), int64],) */;
  %109 = %107.1;
  %110 = %108.0;
  %111 = @func_2722() /* ty=Tensor[(5, 8, 6), float32] */;
  (%109, %110, %111)
}

def @func_5845() -> Tensor[(5, 8, 6), float32] {
  %112 = @func_5812() /* ty=(Tensor[(5, 8, 6), float32],) */;
  %112.0
}

def @func_5393(%var_5331: Tensor[(120), uint32], %var_5332: Tensor[(1800), uint32], %var_5372: Tensor[(560, 1), int32], %var_5381: Tensor[(264), float64]) -> (Tensor[(5, 8, 6), int64], Tensor[(120), uint32], Tensor[(12, 15, 10), bool], Tensor[(560), int32], Tensor[(560, 1), int32], Tensor[(7, 11, 15), bool], Tensor[(264), float64]) {
  %113 = @func_3631() /* ty=(Tensor[(5, 8, 6), int64],) */;
  %114 = cast(%var_5331, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %115 = cast(%var_5332, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %116 = reshape(%114, newshape=[12, 1, 10]) /* ty=Tensor[(12, 1, 10), uint32] */;
  %117 = reshape(%115, newshape=[12, 15, 10]) /* ty=Tensor[(12, 15, 10), uint32] */;
  %118 = @func_1904(%116, %117) /* ty=Tensor[(12, 15, 10), uint32] */;
  %119 = cast(%var_5332, dtype="bool") /* ty=Tensor[(1800), bool] */;
  %120 = shape_of(%118, dtype="int32") /* ty=Tensor[(3), int32] */;
  %121 = cast(%118, dtype="bool") /* ty=Tensor[(12, 15, 10), bool] */;
  %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %123 = cast(%var_5372, dtype="int32") /* ty=Tensor[(560, 1), int32] */;
  %124 = reshape(%123, newshape=[560]) /* ty=Tensor[(560), int32] */;
  %125 = @func_2510(%124) /* ty=(Tensor[(5, 8, 6), float64], Tensor[(10, 7, 8), bool], Tensor[(560), int32]) */;
  %126 = cast(%var_5381, dtype="float64") /* ty=Tensor[(264), float64] */;
  %127 = reshape(%126, newshape=[264]) /* ty=Tensor[(264), float64] */;
  %128 = @func_4114(%127) /* ty=(Tensor[(5, 8, 6), int64], Tensor[(8, 3, 11), float64], Tensor[(264), float64], Tensor[(7, 11, 15), bool]) */;
  %129 = %113.0;
  %130 = greater(%121, %122) /* ty=Tensor[(12, 15, 10), bool] */;
  %131 = %125.2;
  %132 = %128.3;
  (%129, %var_5331, %130, %131, %var_5372, %132, %var_5381)
}

def @func_3982() -> (Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), int32], Tensor[(5, 8, 6), float32], Tensor[(7, 11, 15), int16]) {
  %133 = @func_3093() /* ty=(Tensor[(5, 8, 6), int64],) */;
  %134 = %133.0;
  %135 = cast(%134, dtype="float32") /* ty=Tensor[(5, 8, 6), float32] */;
  %136 = @func_3295() /* ty=(Tensor[(5, 8, 6), int32], Tensor[(7, 11, 15), int16], Tensor[(1, 1155), int16], Tensor[(5, 8, 6), float32]) */;
  %137 = @func_3003() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float32]) */;
  %138 = @func_3295() /* ty=(Tensor[(5, 8, 6), int32], Tensor[(7, 11, 15), int16], Tensor[(1, 1155), int16], Tensor[(5, 8, 6), float32]) */;
  %139 = atanh(%135) /* ty=Tensor[(5, 8, 6), float32] */;
  %140 = %136.0;
  %141 = %137.1;
  %142 = %138.1;
  (%139, %140, %141, %142)
}

def @func_2708() -> (Tensor[(5, 8, 6), int64],) {
  %143 = @func_2484() /* ty=Tensor[(5, 8, 6), float32] */;
  %144 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 8, 6), float32] */, dtype="int64") /* ty=Tensor[(5, 8, 6), int64] */;
  %145 = shape_of(%143, dtype="int32") /* ty=Tensor[(3), int32] */;
  %146 = cast(%143, dtype="int64") /* ty=Tensor[(5, 8, 6), int64] */;
  %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %148 = add(%146, %147) /* ty=Tensor[(5, 8, 6), int64] */;
  (%148,)
}

def @func_6113() -> (Tensor[(5, 8, 6), int32],) {
  %149 = @func_3295() /* ty=(Tensor[(5, 8, 6), int32], Tensor[(7, 11, 15), int16], Tensor[(1, 1155), int16], Tensor[(5, 8, 6), float32]) */;
  %150 = %149.0;
  (%150,)
}

def @func_1684(%var_1673: Tensor[(12, 1, 4), float32]) -> Tensor[(12, 1, 4), float32] {
  %151 = cast(%var_1673, dtype="float32") /* ty=Tensor[(12, 1, 4), float32] */;
  log(%151) /* ty=Tensor[(12, 1, 4), float32] */
}

def @func_707(%var_682: Tensor[(3, 15, 12), int8], %var_683: Tensor[(3, 15, 12), int8], %var_699: Tensor[(264), float64]) -> (Tensor[(3, 15, 12), bool], Tensor[(3, 15, 12), float64], Tensor[(8, 3, 11), float64], Tensor[(264), float64]) {
  %152 = cast(%var_683, dtype="bool") /* ty=Tensor[(3, 15, 12), bool] */;
  %153 = shape_of(%var_682, dtype="int32") /* ty=Tensor[(3), int32] */;
  %154 = cast(%var_682, dtype="bool") /* ty=Tensor[(3, 15, 12), bool] */;
  %155 = dyn.reshape(%152, %153, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %156 = cast(%var_683, dtype="float64") /* ty=Tensor[(3, 15, 12), float64] */;
  %157 = cast(%var_699, dtype="float64") /* ty=Tensor[(264), float64] */;
  %158 = cast(%var_699, dtype="float64") /* ty=Tensor[(264), float64] */;
  %159 = reshape(%157, newshape=[8, 3, 11]) /* ty=Tensor[(8, 3, 11), float64] */;
  %160 = reshape(%158, newshape=[8, 3, 11]) /* ty=Tensor[(8, 3, 11), float64] */;
  %161 = @func_274(%159, %160) /* ty=(Tensor[(8, 3, 11), float64], Tensor[(8, 3, 11), bool]) */;
  %162 = less(%154, %155) /* ty=Tensor[(3, 15, 12), bool] */;
  %163 = rsqrt(%156) /* ty=Tensor[(3, 15, 12), float64] */;
  %164 = %161.0;
  (%162, %163, %164, %var_699)
}

def @func_4344(%var_4286: Tensor[(540), int8], %var_4287: Tensor[(264), float64], %var_4289: Tensor[(8, 3, 11), float64]) -> (Tensor[(540), int8], Tensor[(264), float64], Tensor[(8, 3, 11), uint8], Tensor[(9, 4, 3), int16], Tensor[(108), int16], Tensor[(2400), float32], Tensor[(2400), float32], Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), uint64]) {
  %165 = cast(%var_4286, dtype="int8") /* ty=Tensor[(540), int8] */;
  %166 = cast(%var_4287, dtype="float64") /* ty=Tensor[(264), float64] */;
  %167 = reshape(%165, newshape=[540]) /* ty=Tensor[(540), int8] */;
  %168 = reshape(%166, newshape=[264]) /* ty=Tensor[(264), float64] */;
  %169 = @func_1288(%167, %168) /* ty=(Tensor[(3, 12, 9), float32], Tensor[(8, 3, 11), float64], Tensor[(540), int8], Tensor[(264), float64]) */;
  %170 = %169.1;
  %171 = cast(%var_4289, dtype="uint8") /* ty=Tensor[(8, 3, 11), uint8] */;
  %172 = shape_of(%170, dtype="int32") /* ty=Tensor[(3), int32] */;
  %173 = cast(%170, dtype="uint8") /* ty=Tensor[(8, 3, 11), uint8] */;
  %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %175 = cast(meta[relay.Constant][6] /* ty=Tensor[(108), int16] */, dtype="int16") /* ty=Tensor[(108), int16] */;
  %176 = cast(meta[relay.Constant][6] /* ty=Tensor[(108), int16] */, dtype="int16") /* ty=Tensor[(108), int16] */;
  %177 = reshape(%175, newshape=[9, 4, 3]) /* ty=Tensor[(9, 4, 3), int16] */;
  %178 = reshape(%176, newshape=[9, 4, 3]) /* ty=Tensor[(9, 4, 3), int16] */;
  %179 = @func_2012(%177, %178) /* ty=(Tensor[(9, 4, 3), int16],) */;
  %180 = cast(meta[relay.Constant][7] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %181 = reshape(%180, newshape=[2400]) /* ty=Tensor[(2400), float32] */;
  %182 = @func_2617(%181) /* ty=(Tensor[(5, 8, 6), float32], Tensor[(10, 16, 15), float64], Tensor[(2400), float32]) */;
  %183 = @func_2980() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), int32], Tensor[(540), int8], Tensor[(264), float64], Tensor[(5, 8, 6), float64]) */;
  %184 = @func_3093() /* ty=(Tensor[(5, 8, 6), int64],) */;
  %185 = %184.0;
  %186 = @func_2484() /* ty=Tensor[(5, 8, 6), float32] */;
  %187 = cast(%186, dtype="uint64") /* ty=Tensor[(5, 8, 6), uint64] */;
  %188 = shape_of(%185, dtype="int32") /* ty=Tensor[(3), int32] */;
  %189 = cast(%185, dtype="uint64") /* ty=Tensor[(5, 8, 6), uint64] */;
  %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %191 = logical_xor(%173, %174) /* ty=Tensor[(8, 3, 11), uint8] */;
  %192 = %179.0;
  %193 = %182.2;
  %194 = %183.0;
  %195 = logical_xor(%189, %190) /* ty=Tensor[(5, 8, 6), uint64] */;
  (%var_4286, %var_4287, %191, %192, meta[relay.Constant][6] /* ty=Tensor[(108), int16] */, %193, meta[relay.Constant][7] /* ty=Tensor[(2400), float32] */, %194, %195)
}

def @func_3658(%var_3653: Tensor[(5, 8, 6), float32]) -> (Tensor[(5, 8, 6), int8],) {
  %196 = @func_2937() /* ty=Tensor[(5, 8, 6), float32] */;
  %197 = cast(%var_3653, dtype="int8") /* ty=Tensor[(5, 8, 6), int8] */;
  %198 = shape_of(%196, dtype="int32") /* ty=Tensor[(3), int32] */;
  %199 = cast(%196, dtype="int8") /* ty=Tensor[(5, 8, 6), int8] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %201 = minimum(%199, %200) /* ty=Tensor[(5, 8, 6), int8] */;
  (%201,)
}

def @main() -> (Tensor[(12, 14, 10), float32],) {
  %202 = cast(meta[relay.Constant][8] /* ty=Tensor[(12, 14, 10), float32] */, dtype="float32") /* ty=Tensor[(12, 14, 10), float32] */;
  %203 = atanh(%202) /* ty=Tensor[(12, 14, 10), float32] */;
  (%203,)
}

def @func_4746(%var_4737: Tensor[(160), int32]) -> (Tensor[(5, 8, 6), int64], Tensor[(8, 5, 4), int32], Tensor[(160), int32]) {
  %204 = @func_3631() /* ty=(Tensor[(5, 8, 6), int64],) */;
  %205 = cast(%var_4737, dtype="int32") /* ty=Tensor[(160), int32] */;
  %206 = cast(%var_4737, dtype="int32") /* ty=Tensor[(160), int32] */;
  %207 = reshape(%205, newshape=[8, 5, 4]) /* ty=Tensor[(8, 5, 4), int32] */;
  %208 = reshape(%206, newshape=[8, 5, 4]) /* ty=Tensor[(8, 5, 4), int32] */;
  %209 = %204.0;
  %210 = @func_4407(%207, %208) /* ty=Tensor[(8, 5, 4), int32] */;
  (%209, %210, %var_4737)
}

def @func_4916(%var_4896: Tensor[(5, 8, 6), float32]) -> (Tensor[(5, 8, 6), bool], Tensor[(5, 8, 6), float64], Tensor[(5, 8, 6), float32]) {
  %211 = @func_3295() /* ty=(Tensor[(5, 8, 6), int32], Tensor[(7, 11, 15), int16], Tensor[(1, 1155), int16], Tensor[(5, 8, 6), float32]) */;
  %212 = %211.3;
  %213 = cast(%var_4896, dtype="bool") /* ty=Tensor[(5, 8, 6), bool] */;
  %214 = shape_of(%212, dtype="int32") /* ty=Tensor[(3), int32] */;
  %215 = cast(%212, dtype="bool") /* ty=Tensor[(5, 8, 6), bool] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %217 = cast(%212, dtype="float64") /* ty=Tensor[(5, 8, 6), float64] */;
  %218 = @func_3003() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float32]) */;
  %219 = greater_equal(%215, %216) /* ty=Tensor[(5, 8, 6), bool] */;
  %220 = sin(%217) /* ty=Tensor[(5, 8, 6), float64] */;
  %221 = %218.1;
  (%219, %220, %221)
}

def @func_2203() -> (Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float64]) {
  %222 = cast(meta[relay.Constant][9] /* ty=Tensor[(5, 8, 6), float32] */, dtype="float32") /* ty=Tensor[(5, 8, 6), float32] */;
  %223 = cast(meta[relay.Constant][9] /* ty=Tensor[(5, 8, 6), float32] */, dtype="float64") /* ty=Tensor[(5, 8, 6), float64] */;
  %224 = log10(%222) /* ty=Tensor[(5, 8, 6), float32] */;
  %225 = exp(%223) /* ty=Tensor[(5, 8, 6), float64] */;
  (%224, %225)
}

def @func_322(%var_283: Tensor[(5, 12, 4), uint32], %var_308: Tensor[(264), float64]) -> (Tensor[(5, 12, 4), float32], Tensor[(8, 3, 11), bool], Tensor[(264), float64]) {
  %226 = cast(meta[relay.Constant][10] /* ty=Tensor[(5, 12, 4), uint32] */, dtype="uint32") /* ty=Tensor[(5, 12, 4), uint32] */;
  %227 = shape_of(%var_283, dtype="int32") /* ty=Tensor[(3), int32] */;
  %228 = cast(%var_283, dtype="uint32") /* ty=Tensor[(5, 12, 4), uint32] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %230 = logical_xor(%228, %229) /* ty=Tensor[(5, 12, 4), uint32] */;
  %231 = cast(%var_283, dtype="float32") /* ty=Tensor[(5, 12, 4), float32] */;
  %232 = shape_of(%230, dtype="int32") /* ty=Tensor[(3), int32] */;
  %233 = cast(%230, dtype="float32") /* ty=Tensor[(5, 12, 4), float32] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %235 = cast(%var_308, dtype="float64") /* ty=Tensor[(264), float64] */;
  %236 = cast(%var_308, dtype="float64") /* ty=Tensor[(264), float64] */;
  %237 = reshape(%235, newshape=[8, 3, 11]) /* ty=Tensor[(8, 3, 11), float64] */;
  %238 = reshape(%236, newshape=[8, 3, 11]) /* ty=Tensor[(8, 3, 11), float64] */;
  %239 = @func_274(%237, %238) /* ty=(Tensor[(8, 3, 11), float64], Tensor[(8, 3, 11), bool]) */;
  %240 = minimum(%233, %234) /* ty=Tensor[(5, 12, 4), float32] */;
  %241 = %239.1;
  (%240, %241, %var_308)
}

def @func_1627(%var_1621: Tensor[(7, 16, 11), float64]) -> (Tensor[(7, 16, 11), float64],) {
  %242 = cast(%var_1621, dtype="float64") /* ty=Tensor[(7, 16, 11), float64] */;
  %243 = sigmoid(%242) /* ty=Tensor[(7, 16, 11), float64] */;
  (%243,)
}

def @func_4847() -> Tensor[(5, 8, 6), int64] {
  %244 = @func_2708() /* ty=(Tensor[(5, 8, 6), int64],) */;
  %244.0
}

def @func_5031() -> (Tensor[(5, 8, 6), int64], Tensor[(5, 8, 6), int64]) {
  %245 = @func_2708() /* ty=(Tensor[(5, 8, 6), int64],) */;
  %246 = %245.0;
  %247 = @func_4847() /* ty=Tensor[(5, 8, 6), int64] */;
  (%246, %247)
}

def @func_3215(%var_3184: Tensor[(1, 6), int16]) -> (Tensor[(12, 6), int16], Tensor[(3, 88), float64], Tensor[(264), float64], Tensor[(5, 8, 6), int64]) {
  %248 = cast(%var_3184, dtype="int16") /* ty=Tensor[(1, 6), int16] */;
  %249 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 6), int16] */, dtype="int16") /* ty=Tensor[(12, 6), int16] */;
  %250 = cast(meta[relay.Constant][12] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
  %251 = reshape(%250, newshape=[3, 88]) /* ty=Tensor[(3, 88), float64] */;
  %252 = @func_2668(%251) /* ty=(Tensor[(5, 8, 6), bool], Tensor[(8, 3, 11), float64], Tensor[(3, 88), float64]) */;
  %253 = @func_2708() /* ty=(Tensor[(5, 8, 6), int64],) */;
  %254 = right_shift(%248, %249) /* ty=Tensor[(12, 6), int16] */;
  %255 = %252.2;
  %256 = %253.0;
  (%254, %255, meta[relay.Constant][12] /* ty=Tensor[(264), float64] */, %256)
}

def @func_5979() -> (Tensor[(5, 8, 6), float32],) {
  %257 = @func_2937() /* ty=Tensor[(5, 8, 6), float32] */;
  (%257,)
}

def @func_1349(%var_1344: Tensor[(7, 11, 15), int16]) -> Tensor[(7, 11, 15), int16] {
  %258 = cast(%var_1344, dtype="int16") /* ty=Tensor[(7, 11, 15), int16] */;
  %259 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(7, 11, 15), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %260 = cast(meta[relay.Constant][13] /* ty=Tensor[(7, 11, 15), int16] */, dtype="int16") /* ty=Tensor[(7, 11, 15), int16] */;
  %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  bitwise_xor(%260, %261) /* ty=Tensor[(7, 11, 15), int16] */
}

def @func_2980() -> (Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), int32], Tensor[(540), int8], Tensor[(264), float64], Tensor[(5, 8, 6), float64]) {
  %262 = @func_2937() /* ty=Tensor[(5, 8, 6), float32] */;
  %263 = cast(%262, dtype="float32") /* ty=Tensor[(5, 8, 6), float32] */;
  %264 = cast(meta[relay.Constant][14] /* ty=Tensor[(540), int8] */, dtype="int8") /* ty=Tensor[(540), int8] */;
  %265 = cast(meta[relay.Constant][15] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
  %266 = reshape(%263, newshape=[5, 8, 6]) /* ty=Tensor[(5, 8, 6), float32] */;
  %267 = reshape(%264, newshape=[540]) /* ty=Tensor[(540), int8] */;
  %268 = reshape(%265, newshape=[264]) /* ty=Tensor[(264), float64] */;
  %269 = @func_2760(%266, %267, %268) /* ty=(Tensor[(5, 8, 6), float32], Tensor[(3, 12, 9), float32], Tensor[(540), int8], Tensor[(264), float64], Tensor[(5, 8, 6), int32]) */;
  %270 = @func_2203() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float64]) */;
  %271 = %269.4;
  %272 = %270.1;
  (%262, %271, meta[relay.Constant][14] /* ty=Tensor[(540), int8] */, meta[relay.Constant][15] /* ty=Tensor[(264), float64] */, %272)
}

def @func_2668(%var_2666: Tensor[(3, 88), float64]) -> (Tensor[(5, 8, 6), bool], Tensor[(8, 3, 11), float64], Tensor[(3, 88), float64]) {
  %273 = @func_2249() /* ty=(Tensor[(5, 8, 6), float32],) */;
  %274 = %273.0;
  %275 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 8, 6), float32] */, dtype="bool") /* ty=Tensor[(5, 8, 6), bool] */;
  %276 = shape_of(%274, dtype="int32") /* ty=Tensor[(3), int32] */;
  %277 = cast(%274, dtype="bool") /* ty=Tensor[(5, 8, 6), bool] */;
  %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %279 = cast(%var_2666, dtype="float64") /* ty=Tensor[(3, 88), float64] */;
  %280 = cast(%var_2666, dtype="float64") /* ty=Tensor[(3, 88), float64] */;
  %281 = reshape(%279, newshape=[8, 3, 11]) /* ty=Tensor[(8, 3, 11), float64] */;
  %282 = reshape(%280, newshape=[8, 3, 11]) /* ty=Tensor[(8, 3, 11), float64] */;
  %283 = @func_274(%281, %282) /* ty=(Tensor[(8, 3, 11), float64], Tensor[(8, 3, 11), bool]) */;
  %284 = logical_and(%277, %278) /* ty=Tensor[(5, 8, 6), bool] */;
  %285 = %283.0;
  (%284, %285, %var_2666)
}

def @func_274(%var_249: Tensor[(8, 3, 11), float64], %var_270: Tensor[(8, 3, 11), float64]) -> (Tensor[(8, 3, 11), float64], Tensor[(8, 3, 11), bool]) {
  %286 = cast(%var_249, dtype="float64") /* ty=Tensor[(8, 3, 11), float64] */;
  %287 = tan(%286) /* ty=Tensor[(8, 3, 11), float64] */;
  %288 = cast(%287, dtype="float64") /* ty=Tensor[(8, 3, 11), float64] */;
  %289 = cast(%var_270, dtype="bool") /* ty=Tensor[(8, 3, 11), bool] */;
  %290 = shape_of(%287, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%287, dtype="bool") /* ty=Tensor[(8, 3, 11), bool] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %293 = sinh(%288) /* ty=Tensor[(8, 3, 11), float64] */;
  %294 = less(%291, %292) /* ty=Tensor[(8, 3, 11), bool] */;
  (%293, %294)
}

def @func_4522() -> (Tensor[(5, 8, 6), float32], Tensor[(77, 6), float32], Tensor[(1008), float64], Tensor[(6, 44), float64]) {
  %295 = @func_4426() /* ty=(Tensor[(1, 10, 15), float64], Tensor[(5, 8, 6), float32]) */;
  %296 = cast(meta[relay.Constant][17] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %297 = cast(meta[relay.Constant][18] /* ty=Tensor[(6, 44), float64] */, dtype="float64") /* ty=Tensor[(6, 44), float64] */;
  %298 = reshape(%296, newshape=[1008]) /* ty=Tensor[(1008), float64] */;
  %299 = reshape(%297, newshape=[264]) /* ty=Tensor[(264), float64] */;
  %300 = @func_2396(%298, %299) /* ty=(Tensor[(7, 9, 16), float64], Tensor[(1008), float64], Tensor[(120), uint32], Tensor[(8, 3, 11), float64], Tensor[(540), int8], Tensor[(264), float64], Tensor[(3, 15, 12), float64], Tensor[(7, 6, 11), float32], Tensor[(77, 6), float32], Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float32]) */;
  %301 = %295.1;
  %302 = %300.8;
  (%301, %302, meta[relay.Constant][17] /* ty=Tensor[(1008), float64] */, meta[relay.Constant][18] /* ty=Tensor[(6, 44), float64] */)
}

def @func_585(%var_566: Tensor[(7, 10, 7), float64]) -> (Tensor[(8, 3, 11), bool], Tensor[(264), float64], Tensor[(7, 10, 7), uint32]) {
  %303 = cast(meta[relay.Constant][19] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
  %304 = cast(meta[relay.Constant][19] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
  %305 = reshape(%303, newshape=[8, 3, 11]) /* ty=Tensor[(8, 3, 11), float64] */;
  %306 = reshape(%304, newshape=[8, 3, 11]) /* ty=Tensor[(8, 3, 11), float64] */;
  %307 = @func_274(%305, %306) /* ty=(Tensor[(8, 3, 11), float64], Tensor[(8, 3, 11), bool]) */;
  %308 = cast(%var_566, dtype="float64") /* ty=Tensor[(7, 10, 7), float64] */;
  %309 = atanh(%308) /* ty=Tensor[(7, 10, 7), float64] */;
  %310 = cast(%var_566, dtype="uint32") /* ty=Tensor[(7, 10, 7), uint32] */;
  %311 = shape_of(%309, dtype="int32") /* ty=Tensor[(3), int32] */;
  %312 = cast(%309, dtype="uint32") /* ty=Tensor[(7, 10, 7), uint32] */;
  %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %314 = %307.1;
  %315 = right_shift(%312, %313) /* ty=Tensor[(7, 10, 7), uint32] */;
  (%314, meta[relay.Constant][19] /* ty=Tensor[(264), float64] */, %315)
}

def @func_1951(%var_1921: Tensor[(7, 9, 16), float64], %var_1922: Tensor[(7, 9, 16), float64], %var_1942: Tensor[(6, 20), uint32]) -> (Tensor[(7, 9, 16), float64], Tensor[(12, 15, 10), uint32], Tensor[(6, 20), uint32], Tensor[(900, 2), uint32]) {
  %316 = cast(%var_1922, dtype="float64") /* ty=Tensor[(7, 9, 16), float64] */;
  %317 = shape_of(%var_1921, dtype="int32") /* ty=Tensor[(3), int32] */;
  %318 = cast(%var_1921, dtype="float64") /* ty=Tensor[(7, 9, 16), float64] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %320 = cast(%var_1942, dtype="uint32") /* ty=Tensor[(6, 20), uint32] */;
  %321 = cast(meta[relay.Constant][20] /* ty=Tensor[(900, 2), uint32] */, dtype="uint32") /* ty=Tensor[(900, 2), uint32] */;
  %322 = reshape(%320, newshape=[12, 1, 10]) /* ty=Tensor[(12, 1, 10), uint32] */;
  %323 = reshape(%321, newshape=[12, 15, 10]) /* ty=Tensor[(12, 15, 10), uint32] */;
  %324 = floor_mod(%318, %319) /* ty=Tensor[(7, 9, 16), float64] */;
  %325 = @func_1904(%322, %323) /* ty=Tensor[(12, 15, 10), uint32] */;
  (%324, %325, %var_1942, meta[relay.Constant][20] /* ty=Tensor[(900, 2), uint32] */)
}

def @func_2617(%var_2609: Tensor[(2400), float32]) -> (Tensor[(5, 8, 6), float32], Tensor[(10, 16, 15), float64], Tensor[(2400), float32]) {
  %326 = cast(%var_2609, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %327 = reshape(%326, newshape=[10, 16, 15]) /* ty=Tensor[(10, 16, 15), float32] */;
  %328 = @func_2484() /* ty=Tensor[(5, 8, 6), float32] */;
  %329 = @func_1243(%327) /* ty=Tensor[(10, 16, 15), float64] */;
  (%328, %329, %var_2609)
}

def @func_4818() -> (Tensor[(5, 8, 6), float32], Tensor[(10, 16, 15), float64], Tensor[(2400), float64]) {
  %330 = @func_3838() /* ty=(Tensor[(264), float64], Tensor[(5, 8, 6), int64], Tensor[(5, 8, 6), float32]) */;
  %331 = cast(meta[relay.Constant][21] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %332 = reshape(%331, newshape=[10, 16, 15]) /* ty=Tensor[(10, 16, 15), float32] */;
  %333 = cast(meta[relay.Constant][21] /* ty=Tensor[(2400), float32] */, dtype="float64") /* ty=Tensor[(2400), float64] */;
  %334 = %330.2;
  %335 = @func_1243(%332) /* ty=Tensor[(10, 16, 15), float64] */;
  %336 = sqrt(%333) /* ty=Tensor[(2400), float64] */;
  (%334, %335, %336)
}

def @func_3143(%var_3114: Tensor[(1155), int16]) -> (Tensor[(5, 8, 6), float64], Tensor[(7, 11, 15), int16], Tensor[(1155), int16], Tensor[(5, 8, 6), int16], Tensor[(5, 8, 6), float64]) {
  %337 = @func_2203() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float64]) */;
  %338 = cast(%var_3114, dtype="int16") /* ty=Tensor[(1155), int16] */;
  %339 = reshape(%338, newshape=[7, 11, 15]) /* ty=Tensor[(7, 11, 15), int16] */;
  %340 = @func_2203() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float64]) */;
  %341 = %340.0;
  %342 = cast(meta[relay.Constant][22] /* ty=Tensor[(5, 8, 6), float32] */, dtype="int16") /* ty=Tensor[(5, 8, 6), int16] */;
  %343 = shape_of(%341, dtype="int32") /* ty=Tensor[(3), int32] */;
  %344 = cast(%341, dtype="int16") /* ty=Tensor[(5, 8, 6), int16] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %346 = cast(%341, dtype="float64") /* ty=Tensor[(5, 8, 6), float64] */;
  %347 = sinh(%346) /* ty=Tensor[(5, 8, 6), float64] */;
  %348 = cast(%347, dtype="float64") /* ty=Tensor[(5, 8, 6), float64] */;
  %349 = %337.1;
  %350 = @func_1349(%339) /* ty=Tensor[(7, 11, 15), int16] */;
  %351 = subtract(%344, %345) /* ty=Tensor[(5, 8, 6), int16] */;
  %352 = cos(%348) /* ty=Tensor[(5, 8, 6), float64] */;
  (%349, %350, %var_3114, %351, %352)
}

def @func_5668(%var_5660: Tensor[(130, 6), int16]) -> (Tensor[(5, 8, 6), int64], Tensor[(462), float32], Tensor[(130, 6), int16], Tensor[(3, 5), bool], Tensor[(15), int64]) {
  %353 = @func_5212() /* ty=(Tensor[(264), float64], Tensor[(5, 8, 6), int64]) */;
  %354 = cast(%var_5660, dtype="int16") /* ty=Tensor[(130, 6), int16] */;
  %355 = reshape(%354, newshape=[10, 13, 6]) /* ty=Tensor[(10, 13, 6), int16] */;
  %356 = @func_5005(%355) /* ty=(Tensor[(5, 8, 6), float32], Tensor[(10, 13, 6), uint16], Tensor[(7, 6, 11), float32], Tensor[(462), float32]) */;
  %357 = cast(meta[relay.Constant][23] /* ty=Tensor[(15), int64] */, dtype="int64") /* ty=Tensor[(15), int64] */;
  %358 = cast(meta[relay.Constant][23] /* ty=Tensor[(15), int64] */, dtype="int64") /* ty=Tensor[(15), int64] */;
  %359 = reshape(%357, newshape=[3, 5]) /* ty=Tensor[(3, 5), int64] */;
  %360 = reshape(%358, newshape=[3, 5]) /* ty=Tensor[(3, 5), int64] */;
  %361 = @func_4024(%359, %360) /* ty=(Tensor[(3, 5), bool],) */;
  %362 = %353.1;
  %363 = %356.3;
  %364 = %361.0;
  (%362, %363, %var_5660, %364, meta[relay.Constant][23] /* ty=Tensor[(15), int64] */)
}

def @func_3563() -> (Tensor[(540), int8], Tensor[(264), float64], Tensor[(264), float64]) {
  %365 = @func_2980() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), int32], Tensor[(540), int8], Tensor[(264), float64], Tensor[(5, 8, 6), float64]) */;
  %366 = %365.2;
  %367 = cast(%366, dtype="int8") /* ty=Tensor[(540), int8] */;
  %368 = reshape(%367, newshape=[540]) /* ty=Tensor[(540), int8] */;
  %369 = @func_3318(%368) /* ty=(Tensor[(5, 8, 6), float32], Tensor[(264), float64], Tensor[(540), int8], Tensor[(264), float64]) */;
  %370 = cast(%366, dtype="int8") /* ty=Tensor[(540), int8] */;
  %371 = reshape(%370, newshape=[540]) /* ty=Tensor[(540), int8] */;
  %372 = @func_3318(%371) /* ty=(Tensor[(5, 8, 6), float32], Tensor[(264), float64], Tensor[(540), int8], Tensor[(264), float64]) */;
  %373 = %369.3;
  %374 = %372.1;
  (%366, %373, %374)
}

def @func_6318(%var_6225: Tensor[(11, 13, 10), float32], %var_6286: Tensor[(11, 12, 10), float32], %var_6297: Tensor[(540), int8]) -> (Tensor[(11, 13, 10), bool], Tensor[(264), float64], Tensor[(11, ?, 10), bool], Tensor[(11, 1, 10), float64], Tensor[(11, 13, 10), int32], Tensor[(11, 13, 10), float64], Tensor[(11, ?, 10), float32], Tensor[(540), int8], Tensor[(540), int8], Tensor[(11, 12, 10), bool], Tensor[(10, 16, 15), float64], Tensor[(2400), float32], Tensor[(5, 8, 6), float32], Tensor[(264), float64]) {
  %375 = cast(meta[relay.Constant][24] /* ty=Tensor[(11, 1, 10), float32] */, dtype="bool") /* ty=Tensor[(11, 1, 10), bool] */;
  %376 = cast(%var_6225, dtype="bool") /* ty=Tensor[(11, 13, 10), bool] */;
  %377 = cast(meta[relay.Constant][24] /* ty=Tensor[(11, 1, 10), float32] */, dtype="float32") /* ty=Tensor[(11, 1, 10), float32] */;
  %378 = acos(%377) /* ty=Tensor[(11, 1, 10), float32] */;
  %379 = cast(meta[relay.Constant][24] /* ty=Tensor[(11, 1, 10), float32] */, dtype="bool") /* ty=Tensor[(11, 1, 10), bool] */;
  %380 = shape_of(%378, dtype="int32") /* ty=Tensor[(3), int32] */;
  %381 = cast(%378, dtype="bool") /* ty=Tensor[(11, 1, 10), bool] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %383 = cast(meta[relay.Constant][24] /* ty=Tensor[(11, 1, 10), float32] */, dtype="float64") /* ty=Tensor[(11, 1, 10), float64] */;
  %384 = cast(%var_6225, dtype="float64") /* ty=Tensor[(11, 13, 10), float64] */;
  %385 = tan(%384) /* ty=Tensor[(11, 13, 10), float64] */;
  %386 = cast(meta[relay.Constant][24] /* ty=Tensor[(11, 1, 10), float32] */, dtype="uint8") /* ty=Tensor[(11, 1, 10), uint8] */;
  %387 = shape_of(%378, dtype="int32") /* ty=Tensor[(3), int32] */;
  %388 = cast(%378, dtype="uint8") /* ty=Tensor[(11, 1, 10), uint8] */;
  %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %390 = maximum(%388, %389) /* ty=Tensor[(11, ?, 10), uint8] */;
  %391 = cast(%385, dtype="int32") /* ty=Tensor[(11, 13, 10), int32] */;
  %392 = cast(%390, dtype="int32") /* ty=Tensor[(11, ?, 10), int32] */;
  %393 = cast(%var_6225, dtype="float64") /* ty=Tensor[(11, 13, 10), float64] */;
  %394 = cast(%390, dtype="float32") /* ty=Tensor[(11, ?, 10), float32] */;
  %395 = cast(%var_6297, dtype="int8") /* ty=Tensor[(540), int8] */;
  %396 = reshape(%395, newshape=[540]) /* ty=Tensor[(540), int8] */;
  %397 = @func_3318(%396) /* ty=(Tensor[(5, 8, 6), float32], Tensor[(264), float64], Tensor[(540), int8], Tensor[(264), float64]) */;
  %398 = cast(meta[relay.Constant][24] /* ty=Tensor[(11, 1, 10), float32] */, dtype="float32") /* ty=Tensor[(11, 1, 10), float32] */;
  %399 = cast(%var_6286, dtype="float32") /* ty=Tensor[(11, 12, 10), float32] */;
  %400 = power(%398, %399) /* ty=Tensor[(11, 12, 10), float32] */;
  %401 = cast(%400, dtype="bool") /* ty=Tensor[(11, 12, 10), bool] */;
  %402 = cast(%378, dtype="bool") /* ty=Tensor[(11, 1, 10), bool] */;
  %403 = cast(meta[relay.Constant][25] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %404 = reshape(%403, newshape=[2400]) /* ty=Tensor[(2400), float32] */;
  %405 = @func_2617(%404) /* ty=(Tensor[(5, 8, 6), float32], Tensor[(10, 16, 15), float64], Tensor[(2400), float32]) */;
  %406 = @func_3838() /* ty=(Tensor[(264), float64], Tensor[(5, 8, 6), int64], Tensor[(5, 8, 6), float32]) */;
  %407 = equal(%375, %376) /* ty=Tensor[(11, 13, 10), bool] */;
  %408 = @func_4564() /* ty=Tensor[(264), float64] */;
  %409 = equal(%381, %382) /* ty=Tensor[(11, ?, 10), bool] */;
  %410 = erf(%383) /* ty=Tensor[(11, 1, 10), float64] */;
  %411 = minimum(%391, %392) /* ty=Tensor[(11, 13, 10), int32] */;
  %412 = log2(%393) /* ty=Tensor[(11, 13, 10), float64] */;
  %413 = log2(%394) /* ty=Tensor[(11, ?, 10), float32] */;
  %414 = %397.2;
  %415 = logical_and(%401, %402) /* ty=Tensor[(11, 12, 10), bool] */;
  %416 = %405.1;
  %417 = @func_4462() /* ty=Tensor[(5, 8, 6), float32] */;
  %418 = %406.0;
  (%407, %408, %409, %410, %411, %412, %413, %414, %var_6297, %415, %416, meta[relay.Constant][25] /* ty=Tensor[(2400), float32] */, %417, %418)
}

def @func_4625(%var_4616: Tensor[(5, 8, 6), int64]) -> Tensor[(5, 8, 6), bool] {
  %419 = @func_3838() /* ty=(Tensor[(264), float64], Tensor[(5, 8, 6), int64], Tensor[(5, 8, 6), float32]) */;
  %420 = %419.1;
  %421 = cast(%var_4616, dtype="bool") /* ty=Tensor[(5, 8, 6), bool] */;
  %422 = shape_of(%420, dtype="int32") /* ty=Tensor[(3), int32] */;
  %423 = cast(%420, dtype="bool") /* ty=Tensor[(5, 8, 6), bool] */;
  %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%423, %424) /* ty=Tensor[(5, 8, 6), bool] */
}

def @func_5784() -> Tensor[(5, 8, 6), float32] {
  %425 = @func_3982() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), int32], Tensor[(5, 8, 6), float32], Tensor[(7, 11, 15), int16]) */;
  %425.0
}

def @func_4024(%var_4011: Tensor[(3, 5), int64], %var_4012: Tensor[(3, 5), int64]) -> (Tensor[(3, 5), bool],) {
  %426 = cast(%var_4012, dtype="bool") /* ty=Tensor[(3, 5), bool] */;
  %427 = shape_of(%var_4011, dtype="int32") /* ty=Tensor[(2), int32] */;
  %428 = cast(%var_4011, dtype="bool") /* ty=Tensor[(3, 5), bool] */;
  %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %430 = equal(%428, %429) /* ty=Tensor[(3, 5), bool] */;
  (%430,)
}

def @func_4700() -> (Tensor[(5, 8, 6), float64], Tensor[(7, 11, 15), int16], Tensor[(1155), int16]) {
  %431 = @func_2484() /* ty=Tensor[(5, 8, 6), float32] */;
  %432 = cast(%431, dtype="float64") /* ty=Tensor[(5, 8, 6), float64] */;
  %433 = cast(meta[relay.Constant][26] /* ty=Tensor[(1155), int16] */, dtype="int16") /* ty=Tensor[(1155), int16] */;
  %434 = reshape(%433, newshape=[7, 11, 15]) /* ty=Tensor[(7, 11, 15), int16] */;
  %435 = sqrt(%432) /* ty=Tensor[(5, 8, 6), float64] */;
  %436 = @func_1349(%434) /* ty=Tensor[(7, 11, 15), int16] */;
  (%435, %436, meta[relay.Constant][26] /* ty=Tensor[(1155), int16] */)
}

def @func_5564() -> (Tensor[(264), float64],) {
  %437 = @func_3838() /* ty=(Tensor[(264), float64], Tensor[(5, 8, 6), int64], Tensor[(5, 8, 6), float32]) */;
  %438 = %437.0;
  (%438,)
}

def @func_3003() -> (Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float32]) {
  %439 = @func_2980() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), int32], Tensor[(540), int8], Tensor[(264), float64], Tensor[(5, 8, 6), float64]) */;
  %440 = %439.1;
  %441 = cast(%440, dtype="float32") /* ty=Tensor[(5, 8, 6), float32] */;
  %442 = @func_2722() /* ty=Tensor[(5, 8, 6), float32] */;
  %443 = acosh(%441) /* ty=Tensor[(5, 8, 6), float32] */;
  (%442, %443)
}

def @func_6056(%var_6043: Tensor[(160), int32]) -> (Tensor[(5, 8, 6), float32], Tensor[(8, 5, 4), int32], Tensor[(160), int32]) {
  %444 = @func_2937() /* ty=Tensor[(5, 8, 6), float32] */;
  %445 = cast(%444, dtype="float32") /* ty=Tensor[(5, 8, 6), float32] */;
  %446 = cast(%var_6043, dtype="int32") /* ty=Tensor[(160), int32] */;
  %447 = cast(%var_6043, dtype="int32") /* ty=Tensor[(160), int32] */;
  %448 = reshape(%446, newshape=[8, 5, 4]) /* ty=Tensor[(8, 5, 4), int32] */;
  %449 = reshape(%447, newshape=[8, 5, 4]) /* ty=Tensor[(8, 5, 4), int32] */;
  %450 = asinh(%445) /* ty=Tensor[(5, 8, 6), float32] */;
  %451 = @func_4407(%448, %449) /* ty=Tensor[(8, 5, 4), int32] */;
  (%450, %451, %var_6043)
}

def @func_5517(%var_5511: Tensor[(288), uint64]) -> (Tensor[(540), int8], Tensor[(4, 60), uint32], Tensor[(64), int64], Tensor[(288), uint64], Tensor[(240), uint32], Tensor[(264), float64]) {
  %452 = @func_4131() /* ty=(Tensor[(540), int8],) */;
  %453 = cast(meta[relay.Constant][27] /* ty=Tensor[(64), int64] */, dtype="int64") /* ty=Tensor[(64), int64] */;
  %454 = cast(meta[relay.Constant][27] /* ty=Tensor[(64), int64] */, dtype="int64") /* ty=Tensor[(64), int64] */;
  %455 = cast(%var_5511, dtype="uint64") /* ty=Tensor[(288), uint64] */;
  %456 = cast(meta[relay.Constant][28] /* ty=Tensor[(240), uint32] */, dtype="uint32") /* ty=Tensor[(240), uint32] */;
  %457 = cast(meta[relay.Constant][27] /* ty=Tensor[(64), int64] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %458 = reshape(%453, newshape=[4, 8, 2]) /* ty=Tensor[(4, 8, 2), int64] */;
  %459 = reshape(%454, newshape=[4, 8, 2]) /* ty=Tensor[(4, 8, 2), int64] */;
  %460 = reshape(%455, newshape=[288]) /* ty=Tensor[(288), uint64] */;
  %461 = reshape(%456, newshape=[4, 60]) /* ty=Tensor[(4, 60), uint32] */;
  %462 = reshape(%457, newshape=[4, 8, 2]) /* ty=Tensor[(4, 8, 2), float32] */;
  %463 = @func_2159(%458, %459, %460, %461, %462) /* ty=(Tensor[(4, 8, 2), int64], Tensor[(4, 8, 2), float32], Tensor[(8, 30), uint32], Tensor[(288), uint64], Tensor[(4, 60), uint32], Tensor[(4, 8, 2), bool], Tensor[(12, 1, 4), float32], Tensor[(48), float32]) */;
  %464 = @func_3515() /* ty=(Tensor[(264), float64], Tensor[(5, 8, 6), float32]) */;
  %465 = %452.0;
  %466 = %463.4;
  %467 = %464.0;
  (%465, %466, meta[relay.Constant][27] /* ty=Tensor[(64), int64] */, %var_5511, meta[relay.Constant][28] /* ty=Tensor[(240), uint32] */, %467)
}

def @func_2484() -> Tensor[(5, 8, 6), float32] {
  %468 = @func_2249() /* ty=(Tensor[(5, 8, 6), float32],) */;
  %468.0
}

def @func_1435(%var_1388: Tensor[(10, 13, 14), float32], %var_1428: Tensor[(10, 13, 14), float32]) -> (Tensor[(10, 13, 14), float64], Tensor[(10, 13, 14), int32]) {
  %469 = cast(%var_1388, dtype="float64") /* ty=Tensor[(10, 13, 14), float64] */;
  %470 = cast(%var_1388, dtype="float32") /* ty=Tensor[(10, 13, 14), float32] */;
  %471 = atanh(%470) /* ty=Tensor[(10, 13, 14), float32] */;
  %472 = cast(%var_1388, dtype="bool") /* ty=Tensor[(10, 13, 14), bool] */;
  %473 = shape_of(%471, dtype="int32") /* ty=Tensor[(3), int32] */;
  %474 = cast(%471, dtype="bool") /* ty=Tensor[(10, 13, 14), bool] */;
  %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %476 = logical_or(%474, %475) /* ty=Tensor[(10, 13, 14), bool] */;
  %477 = cast(%476, dtype="float32") /* ty=Tensor[(10, 13, 14), float32] */;
  %478 = log(%477) /* ty=Tensor[(10, 13, 14), float32] */;
  %479 = cast(%478, dtype="float32") /* ty=Tensor[(10, 13, 14), float32] */;
  %480 = cosh(%479) /* ty=Tensor[(10, 13, 14), float32] */;
  %481 = cast(%var_1428, dtype="int32") /* ty=Tensor[(10, 13, 14), int32] */;
  %482 = shape_of(%480, dtype="int32") /* ty=Tensor[(3), int32] */;
  %483 = cast(%480, dtype="int32") /* ty=Tensor[(10, 13, 14), int32] */;
  %484 = dyn.reshape(%481, %482, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %485 = acos(%469) /* ty=Tensor[(10, 13, 14), float64] */;
  %486 = bitwise_and(%483, %484) /* ty=Tensor[(10, 13, 14), int32] */;
  (%485, %486)
}

def @func_2793(%var_2778: Tensor[(1008), float64], %var_2779: Tensor[(1, 264), float64], %var_2783: Tensor[(12, 264), float64]) -> (Tensor[(5, 8, 6), float32], Tensor[(1008), float64], Tensor[(12, 264), uint16], Tensor[(5, 8, 6), float64]) {
  %487 = cast(%var_2778, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %488 = cast(%var_2779, dtype="float64") /* ty=Tensor[(1, 264), float64] */;
  %489 = reshape(%487, newshape=[1008]) /* ty=Tensor[(1008), float64] */;
  %490 = reshape(%488, newshape=[264]) /* ty=Tensor[(264), float64] */;
  %491 = @func_2396(%489, %490) /* ty=(Tensor[(7, 9, 16), float64], Tensor[(1008), float64], Tensor[(120), uint32], Tensor[(8, 3, 11), float64], Tensor[(540), int8], Tensor[(264), float64], Tensor[(3, 15, 12), float64], Tensor[(7, 6, 11), float32], Tensor[(77, 6), float32], Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float32]) */;
  %492 = cast(%var_2779, dtype="uint16") /* ty=Tensor[(1, 264), uint16] */;
  %493 = cast(%var_2783, dtype="uint16") /* ty=Tensor[(12, 264), uint16] */;
  %494 = @func_2722() /* ty=Tensor[(5, 8, 6), float32] */;
  %495 = cast(%494, dtype="float64") /* ty=Tensor[(5, 8, 6), float64] */;
  %496 = %491.10;
  %497 = left_shift(%492, %493) /* ty=Tensor[(12, 264), uint16] */;
  %498 = rsqrt(%495) /* ty=Tensor[(5, 8, 6), float64] */;
  (%496, %var_2778, %497, %498)
}

def @func_2159(%var_2082: Tensor[(4, 8, 2), int64], %var_2083: Tensor[(4, 8, 2), int64], %var_2129: Tensor[(288), uint64], %var_2130: Tensor[(4, 60), uint32], %var_2147: Tensor[(4, 8, 2), float32]) -> (Tensor[(4, 8, 2), int64], Tensor[(4, 8, 2), float32], Tensor[(8, 30), uint32], Tensor[(288), uint64], Tensor[(4, 60), uint32], Tensor[(4, 8, 2), bool], Tensor[(12, 1, 4), float32], Tensor[(48), float32]) {
  %499 = cast(%var_2083, dtype="int64") /* ty=Tensor[(4, 8, 2), int64] */;
  %500 = shape_of(%var_2082, dtype="int32") /* ty=Tensor[(3), int32] */;
  %501 = cast(%var_2082, dtype="int64") /* ty=Tensor[(4, 8, 2), int64] */;
  %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %503 = cast(%var_2082, dtype="float64") /* ty=Tensor[(4, 8, 2), float64] */;
  %504 = asin(%503) /* ty=Tensor[(4, 8, 2), float64] */;
  %505 = cast(%504, dtype="float64") /* ty=Tensor[(4, 8, 2), float64] */;
  %506 = exp(%505) /* ty=Tensor[(4, 8, 2), float64] */;
  %507 = cast(%506, dtype="float32") /* ty=Tensor[(4, 8, 2), float32] */;
  %508 = cast(%var_2129, dtype="uint64") /* ty=Tensor[(288), uint64] */;
  %509 = cast(%var_2130, dtype="uint32") /* ty=Tensor[(4, 60), uint32] */;
  %510 = reshape(%508, newshape=[6, 8, 6]) /* ty=Tensor[(6, 8, 6), uint64] */;
  %511 = reshape(%509, newshape=[8, 30]) /* ty=Tensor[(8, 30), uint32] */;
  %512 = @func_537(%510, %511) /* ty=(Tensor[(6, 8, 6), float64], Tensor[(8, 3, 11), bool], Tensor[(264), float64], Tensor[(264), float64], Tensor[(8, 30), uint32]) */;
  %513 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 8, 2), float64] */, dtype="float32") /* ty=Tensor[(4, 8, 2), float32] */;
  %514 = shape_of(%506, dtype="int32") /* ty=Tensor[(3), int32] */;
  %515 = cast(%506, dtype="float32") /* ty=Tensor[(4, 8, 2), float32] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %517 = floor_divide(%515, %516) /* ty=Tensor[(4, 8, 2), float32] */;
  %518 = cast(%var_2147, dtype="bool") /* ty=Tensor[(4, 8, 2), bool] */;
  %519 = shape_of(%517, dtype="int32") /* ty=Tensor[(3), int32] */;
  %520 = cast(%517, dtype="bool") /* ty=Tensor[(4, 8, 2), bool] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %522 = cast(meta[relay.Constant][30] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %523 = reshape(%522, newshape=[12, 1, 4]) /* ty=Tensor[(12, 1, 4), float32] */;
  %524 = subtract(%501, %502) /* ty=Tensor[(4, 8, 2), int64] */;
  %525 = log2(%507) /* ty=Tensor[(4, 8, 2), float32] */;
  %526 = %512.4;
  %527 = equal(%520, %521) /* ty=Tensor[(4, 8, 2), bool] */;
  %528 = @func_1684(%523) /* ty=Tensor[(12, 1, 4), float32] */;
  (%524, %525, %526, %var_2129, %var_2130, %527, %528, meta[relay.Constant][30] /* ty=Tensor[(48), float32] */)
}

def @func_5625() -> (Tensor[(5, 8, 6), int64], Tensor[(5, 8, 6), bool], Tensor[(5, 8, 6), int32], Tensor[(264), float64]) {
  %529 = @func_3838() /* ty=(Tensor[(264), float64], Tensor[(5, 8, 6), int64], Tensor[(5, 8, 6), float32]) */;
  %530 = %529.1;
  %531 = cast(%530, dtype="float32") /* ty=Tensor[(5, 8, 6), float32] */;
  %532 = reshape(%531, newshape=[5, 8, 6]) /* ty=Tensor[(5, 8, 6), float32] */;
  %533 = @func_4916(%532) /* ty=(Tensor[(5, 8, 6), bool], Tensor[(5, 8, 6), float64], Tensor[(5, 8, 6), float32]) */;
  %534 = @func_2980() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), int32], Tensor[(540), int8], Tensor[(264), float64], Tensor[(5, 8, 6), float64]) */;
  %535 = %533.0;
  %536 = %534.1;
  %537 = @func_4564() /* ty=Tensor[(264), float64] */;
  (%530, %535, %536, %537)
}

def @func_610(%var_604: Tensor[(10, 7, 8), int32], %var_605: Tensor[(10, 7, 8), int32]) -> (Tensor[(10, 7, 8), bool],) {
  %538 = cast(%var_605, dtype="bool") /* ty=Tensor[(10, 7, 8), bool] */;
  %539 = shape_of(%var_604, dtype="int32") /* ty=Tensor[(3), int32] */;
  %540 = cast(%var_604, dtype="bool") /* ty=Tensor[(10, 7, 8), bool] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %542 = greater(%540, %541) /* ty=Tensor[(10, 7, 8), bool] */;
  (%542,)
}

def @func_3093() -> (Tensor[(5, 8, 6), int64],) {
  %543 = @func_2708() /* ty=(Tensor[(5, 8, 6), int64],) */;
  %544 = %543.0;
  (%544,)
}

def @func_1288(%var_1281: Tensor[(540), int8], %var_1282: Tensor[(264), float64]) -> (Tensor[(3, 12, 9), float32], Tensor[(8, 3, 11), float64], Tensor[(540), int8], Tensor[(264), float64]) {
  %545 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 12, 9), float32] */, dtype="float32") /* ty=Tensor[(3, 12, 9), float32] */;
  %546 = exp(%545) /* ty=Tensor[(3, 12, 9), float32] */;
  %547 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 12, 9), float32] */, dtype="float32") /* ty=Tensor[(3, 12, 9), float32] */;
  %548 = shape_of(%546, dtype="int32") /* ty=Tensor[(3), int32] */;
  %549 = cast(%546, dtype="float32") /* ty=Tensor[(3, 12, 9), float32] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %551 = cast(%var_1281, dtype="int8") /* ty=Tensor[(540), int8] */;
  %552 = cast(%var_1281, dtype="int8") /* ty=Tensor[(540), int8] */;
  %553 = cast(%var_1282, dtype="float64") /* ty=Tensor[(264), float64] */;
  %554 = reshape(%551, newshape=[3, 15, 12]) /* ty=Tensor[(3, 15, 12), int8] */;
  %555 = reshape(%552, newshape=[3, 15, 12]) /* ty=Tensor[(3, 15, 12), int8] */;
  %556 = reshape(%553, newshape=[264]) /* ty=Tensor[(264), float64] */;
  %557 = @func_707(%554, %555, %556) /* ty=(Tensor[(3, 15, 12), bool], Tensor[(3, 15, 12), float64], Tensor[(8, 3, 11), float64], Tensor[(264), float64]) */;
  %558 = power(%549, %550) /* ty=Tensor[(3, 12, 9), float32] */;
  %559 = %557.2;
  (%558, %559, %var_1281, %var_1282)
}

def @func_5198(%var_5185: Tensor[(15), int64]) -> (Tensor[(5, 8, 6), int64], Tensor[(3, 5), bool], Tensor[(15), int64]) {
  %560 = cast(%var_5185, dtype="int64") /* ty=Tensor[(15), int64] */;
  %561 = cast(%var_5185, dtype="int64") /* ty=Tensor[(15), int64] */;
  %562 = reshape(%560, newshape=[3, 5]) /* ty=Tensor[(3, 5), int64] */;
  %563 = reshape(%561, newshape=[3, 5]) /* ty=Tensor[(3, 5), int64] */;
  %564 = @func_4024(%562, %563) /* ty=(Tensor[(3, 5), bool],) */;
  %565 = @func_4862() /* ty=Tensor[(5, 8, 6), int64] */;
  %566 = %564.0;
  (%565, %566, %var_5185)
}

def @func_3295() -> (Tensor[(5, 8, 6), int32], Tensor[(7, 11, 15), int16], Tensor[(1, 1155), int16], Tensor[(5, 8, 6), float32]) {
  %567 = @func_2980() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), int32], Tensor[(540), int8], Tensor[(264), float64], Tensor[(5, 8, 6), float64]) */;
  %568 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 1155), int16] */, dtype="int16") /* ty=Tensor[(1, 1155), int16] */;
  %569 = reshape(%568, newshape=[7, 11, 15]) /* ty=Tensor[(7, 11, 15), int16] */;
  %570 = %567.1;
  %571 = @func_1349(%569) /* ty=Tensor[(7, 11, 15), int16] */;
  %572 = @func_2722() /* ty=Tensor[(5, 8, 6), float32] */;
  (%570, %571, meta[relay.Constant][32] /* ty=Tensor[(1, 1155), int16] */, %572)
}

def @func_1904(%var_1891: Tensor[(12, 1, 10), uint32], %var_1892: Tensor[(12, 15, 10), uint32]) -> Tensor[(12, 15, 10), uint32] {
  %573 = cast(%var_1891, dtype="uint32") /* ty=Tensor[(12, 1, 10), uint32] */;
  %574 = cast(%var_1892, dtype="uint32") /* ty=Tensor[(12, 15, 10), uint32] */;
  multiply(%573, %574) /* ty=Tensor[(12, 15, 10), uint32] */
}

def @func_2396(%var_2329: Tensor[(1008), float64], %var_2358: Tensor[(264), float64]) -> (Tensor[(7, 9, 16), float64], Tensor[(1008), float64], Tensor[(120), uint32], Tensor[(8, 3, 11), float64], Tensor[(540), int8], Tensor[(264), float64], Tensor[(3, 15, 12), float64], Tensor[(7, 6, 11), float32], Tensor[(77, 6), float32], Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float32]) {
  %575 = cast(%var_2329, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %576 = cast(%var_2329, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %577 = cast(meta[relay.Constant][33] /* ty=Tensor[(120), uint32] */, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %578 = reshape(%575, newshape=[7, 9, 16]) /* ty=Tensor[(7, 9, 16), float64] */;
  %579 = reshape(%576, newshape=[7, 9, 16]) /* ty=Tensor[(7, 9, 16), float64] */;
  %580 = reshape(%577, newshape=[6, 20]) /* ty=Tensor[(6, 20), uint32] */;
  %581 = @func_1951(%578, %579, %580) /* ty=(Tensor[(7, 9, 16), float64], Tensor[(12, 15, 10), uint32], Tensor[(6, 20), uint32], Tensor[(900, 2), uint32]) */;
  %582 = cast(meta[relay.Constant][34] /* ty=Tensor[(540), int8] */, dtype="int8") /* ty=Tensor[(540), int8] */;
  %583 = cast(%var_2358, dtype="float64") /* ty=Tensor[(264), float64] */;
  %584 = reshape(%582, newshape=[540]) /* ty=Tensor[(540), int8] */;
  %585 = reshape(%583, newshape=[264]) /* ty=Tensor[(264), float64] */;
  %586 = @func_1288(%584, %585) /* ty=(Tensor[(3, 12, 9), float32], Tensor[(8, 3, 11), float64], Tensor[(540), int8], Tensor[(264), float64]) */;
  %587 = cast(meta[relay.Constant][34] /* ty=Tensor[(540), int8] */, dtype="int8") /* ty=Tensor[(540), int8] */;
  %588 = cast(meta[relay.Constant][34] /* ty=Tensor[(540), int8] */, dtype="int8") /* ty=Tensor[(540), int8] */;
  %589 = %586.1;
  %590 = cast(%589, dtype="float64") /* ty=Tensor[(8, 3, 11), float64] */;
  %591 = reshape(%587, newshape=[3, 15, 12]) /* ty=Tensor[(3, 15, 12), int8] */;
  %592 = reshape(%588, newshape=[3, 15, 12]) /* ty=Tensor[(3, 15, 12), int8] */;
  %593 = reshape(%590, newshape=[264]) /* ty=Tensor[(264), float64] */;
  %594 = @func_707(%591, %592, %593) /* ty=(Tensor[(3, 15, 12), bool], Tensor[(3, 15, 12), float64], Tensor[(8, 3, 11), float64], Tensor[(264), float64]) */;
  %595 = cast(meta[relay.Constant][35] /* ty=Tensor[(77, 6), float32] */, dtype="float32") /* ty=Tensor[(77, 6), float32] */;
  %596 = reshape(%595, newshape=[7, 6, 11]) /* ty=Tensor[(7, 6, 11), float32] */;
  %597 = @func_1789(%596) /* ty=(Tensor[(7, 6, 11), float32],) */;
  %598 = @func_2249() /* ty=(Tensor[(5, 8, 6), float32],) */;
  %599 = @func_2203() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float64]) */;
  %600 = %599.1;
  %601 = cast(%600, dtype="float32") /* ty=Tensor[(5, 8, 6), float32] */;
  %602 = %581.0;
  %603 = %594.1;
  %604 = %597.0;
  %605 = %598.0;
  %606 = tan(%601) /* ty=Tensor[(5, 8, 6), float32] */;
  (%602, %var_2329, meta[relay.Constant][33] /* ty=Tensor[(120), uint32] */, %589, meta[relay.Constant][34] /* ty=Tensor[(540), int8] */, %var_2358, %603, %604, meta[relay.Constant][35] /* ty=Tensor[(77, 6), float32] */, %605, %606)
}

def @func_6351(%var_6339: Tensor[(780), int16], %var_6345: Tensor[(8, 14, 9), float32]) -> (Tensor[(1, 14, 9), float32], Tensor[(462), float32], Tensor[(780), int16], Tensor[(8, 14, 9), int32]) {
  %607 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 14, 9), float32] */, dtype="float32") /* ty=Tensor[(1, 14, 9), float32] */;
  %608 = cast(%var_6339, dtype="int16") /* ty=Tensor[(780), int16] */;
  %609 = reshape(%608, newshape=[10, 13, 6]) /* ty=Tensor[(10, 13, 6), int16] */;
  %610 = @func_5005(%609) /* ty=(Tensor[(5, 8, 6), float32], Tensor[(10, 13, 6), uint16], Tensor[(7, 6, 11), float32], Tensor[(462), float32]) */;
  %611 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 14, 9), float32] */, dtype="int32") /* ty=Tensor[(1, 14, 9), int32] */;
  %612 = cast(%var_6345, dtype="int32") /* ty=Tensor[(8, 14, 9), int32] */;
  %613 = acosh(%607) /* ty=Tensor[(1, 14, 9), float32] */;
  %614 = %610.3;
  %615 = bitwise_xor(%611, %612) /* ty=Tensor[(8, 14, 9), int32] */;
  (%613, %614, %var_6339, %615)
}

def @func_5762(%var_5676: Tensor[(14, 10, 16), float64]) -> (Tensor[(14, 10, 16), bool], Tensor[(4, 60), uint32], Tensor[(288), uint64], Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), bool], Tensor[(14, 10, 16), float32]) {
  %616 = cast(%var_5676, dtype="bool") /* ty=Tensor[(14, 10, 16), bool] */;
  %617 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(14, 10, 16), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %618 = cast(meta[relay.Constant][37] /* ty=Tensor[(14, 10, 16), float64] */, dtype="bool") /* ty=Tensor[(14, 10, 16), bool] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %620 = cast(meta[relay.Constant][38] /* ty=Tensor[(288), uint64] */, dtype="uint64") /* ty=Tensor[(288), uint64] */;
  %621 = reshape(%620, newshape=[288]) /* ty=Tensor[(288), uint64] */;
  %622 = @func_5517(%621) /* ty=(Tensor[(540), int8], Tensor[(4, 60), uint32], Tensor[(64), int64], Tensor[(288), uint64], Tensor[(240), uint32], Tensor[(264), float64]) */;
  %623 = @func_3003() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float32]) */;
  %624 = %622.1;
  %625 = cast(%624, dtype="int64") /* ty=Tensor[(4, 60), int64] */;
  %626 = reshape(%625, newshape=[5, 8, 6]) /* ty=Tensor[(5, 8, 6), int64] */;
  %627 = @func_3168(%626) /* ty=(Tensor[(5, 8, 6), bool], Tensor[(5, 8, 6), bool], Tensor[(8, 30), uint32], Tensor[(288), uint64]) */;
  %628 = cast(meta[relay.Constant][37] /* ty=Tensor[(14, 10, 16), float64] */, dtype="float32") /* ty=Tensor[(14, 10, 16), float32] */;
  %629 = rsqrt(%628) /* ty=Tensor[(14, 10, 16), float32] */;
  %630 = cast(%629, dtype="float32") /* ty=Tensor[(14, 10, 16), float32] */;
  %631 = less_equal(%618, %619) /* ty=Tensor[(14, 10, 16), bool] */;
  %632 = %623.1;
  %633 = %627.1;
  %634 = log(%630) /* ty=Tensor[(14, 10, 16), float32] */;
  (%631, %624, meta[relay.Constant][38] /* ty=Tensor[(288), uint64] */, %632, %633, %634)
}

def @func_4954() -> (Tensor[(5, 8, 6), float32], Tensor[(264), float64]) {
  %635 = @func_2722() /* ty=Tensor[(5, 8, 6), float32] */;
  %636 = @func_3380() /* ty=Tensor[(264), float64] */;
  (%635, %636)
}

def @func_5478() -> (Tensor[(6, 44), float64],) {
  %637 = @func_4522() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(77, 6), float32], Tensor[(1008), float64], Tensor[(6, 44), float64]) */;
  %638 = %637.3;
  (%638,)
}

def @func_4131() -> (Tensor[(540), int8],) {
  %639 = @func_2980() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), int32], Tensor[(540), int8], Tensor[(264), float64], Tensor[(5, 8, 6), float64]) */;
  %640 = %639.2;
  (%640,)
}

def @func_2012(%var_2007: Tensor[(9, 4, 3), int16], %var_2008: Tensor[(9, 4, 3), int16]) -> (Tensor[(9, 4, 3), int16],) {
  %641 = cast(%var_2008, dtype="int16") /* ty=Tensor[(9, 4, 3), int16] */;
  %642 = shape_of(%var_2007, dtype="int32") /* ty=Tensor[(3), int32] */;
  %643 = cast(%var_2007, dtype="int16") /* ty=Tensor[(9, 4, 3), int16] */;
  %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %645 = logical_xor(%643, %644) /* ty=Tensor[(9, 4, 3), int16] */;
  (%645,)
}

def @func_4462() -> Tensor[(5, 8, 6), float32] {
  %646 = @func_3982() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), int32], Tensor[(5, 8, 6), float32], Tensor[(7, 11, 15), int16]) */;
  %646.0
}

def @func_5898(%var_5880: Tensor[(5, 8, 6), float32], %var_5887: Tensor[(1008), float64], %var_5889: Tensor[(132, 24), float64], %var_5892: Tensor[(120), uint32], %var_5893: Tensor[(900, 2), uint32], %var_5894: Tensor[(560), int32]) -> (Tensor[(5, 8, 6), uint16], Tensor[(5, 8, 6), float32], Tensor[(1008), float64], Tensor[(264), float64], Tensor[(132, 24), float64], Tensor[(560), int32], Tensor[(120), uint32], Tensor[(900, 2), uint32], Tensor[(560), int32]) {
  %647 = @func_3515() /* ty=(Tensor[(264), float64], Tensor[(5, 8, 6), float32]) */;
  %648 = %647.1;
  %649 = cast(%var_5880, dtype="uint16") /* ty=Tensor[(5, 8, 6), uint16] */;
  %650 = shape_of(%648, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(%648, dtype="uint16") /* ty=Tensor[(5, 8, 6), uint16] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %653 = cast(%var_5887, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %654 = cast(meta[relay.Constant][39] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
  %655 = cast(%var_5889, dtype="float64") /* ty=Tensor[(132, 24), float64] */;
  %656 = reshape(%653, newshape=[1008]) /* ty=Tensor[(1008), float64] */;
  %657 = reshape(%654, newshape=[1, 264]) /* ty=Tensor[(1, 264), float64] */;
  %658 = reshape(%655, newshape=[12, 264]) /* ty=Tensor[(12, 264), float64] */;
  %659 = @func_2793(%656, %657, %658) /* ty=(Tensor[(5, 8, 6), float32], Tensor[(1008), float64], Tensor[(12, 264), uint16], Tensor[(5, 8, 6), float64]) */;
  %660 = cast(%var_5892, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %661 = cast(%var_5893, dtype="uint32") /* ty=Tensor[(900, 2), uint32] */;
  %662 = cast(%var_5894, dtype="int32") /* ty=Tensor[(560), int32] */;
  %663 = cast(meta[relay.Constant][39] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
  %664 = reshape(%660, newshape=[120]) /* ty=Tensor[(120), uint32] */;
  %665 = reshape(%661, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %666 = reshape(%662, newshape=[560, 1]) /* ty=Tensor[(560, 1), int32] */;
  %667 = reshape(%663, newshape=[264]) /* ty=Tensor[(264), float64] */;
  %668 = @func_5393(%664, %665, %666, %667) /* ty=(Tensor[(5, 8, 6), int64], Tensor[(120), uint32], Tensor[(12, 15, 10), bool], Tensor[(560), int32], Tensor[(560, 1), int32], Tensor[(7, 11, 15), bool], Tensor[(264), float64]) */;
  %669 = bitwise_xor(%651, %652) /* ty=Tensor[(5, 8, 6), uint16] */;
  %670 = %659.0;
  %671 = %668.3;
  (%669, %670, %var_5887, meta[relay.Constant][39] /* ty=Tensor[(264), float64] */, %var_5889, %671, %var_5892, %var_5893, %var_5894)
}

def @func_3759(%var_3693: Tensor[(14, 2, 5), float32], %var_3716: Tensor[(5, 8, 6), float32], %var_3737: Tensor[(560), int32]) -> (Tensor[(14, 2, 5), uint64], Tensor[(5, 8, 6), bool], Tensor[(10, 7, 8), bool], Tensor[(560), int32], Tensor[(12, 1, 4), float32], Tensor[(48), float32]) {
  %672 = cast(%var_3693, dtype="float32") /* ty=Tensor[(14, 2, 5), float32] */;
  %673 = sinh(%672) /* ty=Tensor[(14, 2, 5), float32] */;
  %674 = cast(%673, dtype="float64") /* ty=Tensor[(14, 2, 5), float64] */;
  %675 = asinh(%674) /* ty=Tensor[(14, 2, 5), float64] */;
  %676 = cast(%673, dtype="uint64") /* ty=Tensor[(14, 2, 5), uint64] */;
  %677 = shape_of(%675, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%675, dtype="uint64") /* ty=Tensor[(14, 2, 5), uint64] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %680 = @func_2484() /* ty=Tensor[(5, 8, 6), float32] */;
  %681 = cast(%var_3716, dtype="bool") /* ty=Tensor[(5, 8, 6), bool] */;
  %682 = shape_of(%680, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(%680, dtype="bool") /* ty=Tensor[(5, 8, 6), bool] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %685 = cast(%var_3737, dtype="int32") /* ty=Tensor[(560), int32] */;
  %686 = reshape(%685, newshape=[560]) /* ty=Tensor[(560), int32] */;
  %687 = @func_2510(%686) /* ty=(Tensor[(5, 8, 6), float64], Tensor[(10, 7, 8), bool], Tensor[(560), int32]) */;
  %688 = cast(meta[relay.Constant][40] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %689 = reshape(%688, newshape=[12, 1, 4]) /* ty=Tensor[(12, 1, 4), float32] */;
  %690 = add(%678, %679) /* ty=Tensor[(14, 2, 5), uint64] */;
  %691 = not_equal(%683, %684) /* ty=Tensor[(5, 8, 6), bool] */;
  %692 = %687.1;
  %693 = @func_1684(%689) /* ty=Tensor[(12, 1, 4), float32] */;
  (%690, %691, %692, %var_3737, %693, meta[relay.Constant][40] /* ty=Tensor[(48), float32] */)
}

def @func_4164(%var_4134: Tensor[(13, 2, 14), float64]) -> (Tensor[(13, 2, 14), bool], Tensor[(560), int32], Tensor[(560), int32]) {
  %694 = cast(%var_4134, dtype="float64") /* ty=Tensor[(13, 2, 14), float64] */;
  %695 = acosh(%694) /* ty=Tensor[(13, 2, 14), float64] */;
  %696 = cast(%var_4134, dtype="float32") /* ty=Tensor[(13, 2, 14), float32] */;
  %697 = rsqrt(%696) /* ty=Tensor[(13, 2, 14), float32] */;
  %698 = cast(%697, dtype="bool") /* ty=Tensor[(13, 2, 14), bool] */;
  %699 = shape_of(%695, dtype="int32") /* ty=Tensor[(3), int32] */;
  %700 = cast(%695, dtype="bool") /* ty=Tensor[(13, 2, 14), bool] */;
  %701 = dyn.reshape(%698, %699, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %702 = cast(meta[relay.Constant][41] /* ty=Tensor[(560), int32] */, dtype="int32") /* ty=Tensor[(560), int32] */;
  %703 = reshape(%702, newshape=[560]) /* ty=Tensor[(560), int32] */;
  %704 = @func_2510(%703) /* ty=(Tensor[(5, 8, 6), float64], Tensor[(10, 7, 8), bool], Tensor[(560), int32]) */;
  %705 = less(%700, %701) /* ty=Tensor[(13, 2, 14), bool] */;
  %706 = %704.2;
  (%705, %706, meta[relay.Constant][41] /* ty=Tensor[(560), int32] */)
}

def @func_3515() -> (Tensor[(264), float64], Tensor[(5, 8, 6), float32]) {
  %707 = @func_3019() /* ty=(Tensor[(5, 8, 6), float32],) */;
  %708 = @func_3380() /* ty=Tensor[(264), float64] */;
  %709 = %707.0;
  (%708, %709)
}

def @func_2937() -> Tensor[(5, 8, 6), float32] {
  @func_2722() /* ty=Tensor[(5, 8, 6), float32] */
}

def @func_3318(%var_3310: Tensor[(540), int8]) -> (Tensor[(5, 8, 6), float32], Tensor[(264), float64], Tensor[(540), int8], Tensor[(264), float64]) {
  %710 = @func_3019() /* ty=(Tensor[(5, 8, 6), float32],) */;
  %711 = cast(%var_3310, dtype="int8") /* ty=Tensor[(540), int8] */;
  %712 = cast(%var_3310, dtype="int8") /* ty=Tensor[(540), int8] */;
  %713 = cast(meta[relay.Constant][42] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
  %714 = reshape(%711, newshape=[3, 15, 12]) /* ty=Tensor[(3, 15, 12), int8] */;
  %715 = reshape(%712, newshape=[3, 15, 12]) /* ty=Tensor[(3, 15, 12), int8] */;
  %716 = reshape(%713, newshape=[264]) /* ty=Tensor[(264), float64] */;
  %717 = @func_707(%714, %715, %716) /* ty=(Tensor[(3, 15, 12), bool], Tensor[(3, 15, 12), float64], Tensor[(8, 3, 11), float64], Tensor[(264), float64]) */;
  %718 = %710.0;
  %719 = %717.3;
  (%718, %719, %var_3310, meta[relay.Constant][42] /* ty=Tensor[(264), float64] */)
}

def @func_5579() -> Tensor[(10, 15, 2), float32] {
  %720 = cast(meta[relay.Constant][43] /* ty=Tensor[(10, 15, 2), float32] */, dtype="float32") /* ty=Tensor[(10, 15, 2), float32] */;
  asin(%720) /* ty=Tensor[(10, 15, 2), float32] */
}

def @func_5796() -> (Tensor[(5, 8, 6), float32],) {
  %721 = @func_5784() /* ty=Tensor[(5, 8, 6), float32] */;
  (%721,)
}

def @func_3380() -> Tensor[(264), float64] {
  %722 = @func_2980() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), int32], Tensor[(540), int8], Tensor[(264), float64], Tensor[(5, 8, 6), float64]) */;
  %722.3
}

def @func_3019() -> (Tensor[(5, 8, 6), float32],) {
  %723 = @func_2249() /* ty=(Tensor[(5, 8, 6), float32],) */;
  %724 = %723.0;
  (%724,)
}

def @func_4407(%var_4399: Tensor[(8, 5, 4), int32], %var_4400: Tensor[(8, 5, 4), int32]) -> Tensor[(8, 5, 4), int32] {
  %725 = cast(%var_4400, dtype="int32") /* ty=Tensor[(8, 5, 4), int32] */;
  %726 = shape_of(%var_4399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %727 = cast(%var_4399, dtype="int32") /* ty=Tensor[(8, 5, 4), int32] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  minimum(%727, %728) /* ty=Tensor[(8, 5, 4), int32] */
}

def @func_5812() -> (Tensor[(5, 8, 6), float32],) {
  %729 = @func_2249() /* ty=(Tensor[(5, 8, 6), float32],) */;
  %730 = %729.0;
  (%730,)
}

def @func_537(%var_503: Tensor[(6, 8, 6), uint64], %var_535: Tensor[(8, 30), uint32]) -> (Tensor[(6, 8, 6), float64], Tensor[(8, 3, 11), bool], Tensor[(264), float64], Tensor[(264), float64], Tensor[(8, 30), uint32]) {
  %731 = cast(meta[relay.Constant][44] /* ty=Tensor[(6, 1, 6), uint64] */, dtype="bool") /* ty=Tensor[(6, 1, 6), bool] */;
  %732 = cast(%var_503, dtype="bool") /* ty=Tensor[(6, 8, 6), bool] */;
  %733 = greater_equal(%731, %732) /* ty=Tensor[(6, 8, 6), bool] */;
  %734 = cast(%733, dtype="float64") /* ty=Tensor[(6, 8, 6), float64] */;
  %735 = cast(meta[relay.Constant][45] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
  %736 = cast(meta[relay.Constant][45] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
  %737 = reshape(%735, newshape=[8, 3, 11]) /* ty=Tensor[(8, 3, 11), float64] */;
  %738 = reshape(%736, newshape=[8, 3, 11]) /* ty=Tensor[(8, 3, 11), float64] */;
  %739 = @func_274(%737, %738) /* ty=(Tensor[(8, 3, 11), float64], Tensor[(8, 3, 11), bool]) */;
  %740 = cast(%var_535, dtype="uint32") /* ty=Tensor[(8, 30), uint32] */;
  %741 = cast(meta[relay.Constant][45] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
  %742 = reshape(%740, newshape=[5, 12, 4]) /* ty=Tensor[(5, 12, 4), uint32] */;
  %743 = reshape(%741, newshape=[264]) /* ty=Tensor[(264), float64] */;
  %744 = @func_322(%742, %743) /* ty=(Tensor[(5, 12, 4), float32], Tensor[(8, 3, 11), bool], Tensor[(264), float64]) */;
  %745 = sigmoid(%734) /* ty=Tensor[(6, 8, 6), float64] */;
  %746 = %739.1;
  %747 = %744.2;
  (%745, %746, meta[relay.Constant][45] /* ty=Tensor[(264), float64] */, %747, %var_535)
}

def @func_3168(%var_3151: Tensor[(5, 8, 6), int64]) -> (Tensor[(5, 8, 6), bool], Tensor[(5, 8, 6), bool], Tensor[(8, 30), uint32], Tensor[(288), uint64]) {
  %748 = @func_2708() /* ty=(Tensor[(5, 8, 6), int64],) */;
  %749 = %748.0;
  %750 = cast(%var_3151, dtype="bool") /* ty=Tensor[(5, 8, 6), bool] */;
  %751 = shape_of(%749, dtype="int32") /* ty=Tensor[(3), int32] */;
  %752 = cast(%749, dtype="bool") /* ty=Tensor[(5, 8, 6), bool] */;
  %753 = dyn.reshape(%750, %751, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %754 = cast(%var_3151, dtype="bool") /* ty=Tensor[(5, 8, 6), bool] */;
  %755 = shape_of(%749, dtype="int32") /* ty=Tensor[(3), int32] */;
  %756 = cast(%749, dtype="bool") /* ty=Tensor[(5, 8, 6), bool] */;
  %757 = dyn.reshape(%754, %755, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %758 = cast(meta[relay.Constant][46] /* ty=Tensor[(288), uint64] */, dtype="uint64") /* ty=Tensor[(288), uint64] */;
  %759 = greater(%756, %757) /* ty=Tensor[(5, 8, 6), bool] */;
  %760 = cast(%759, dtype="uint32") /* ty=Tensor[(5, 8, 6), uint32] */;
  %761 = reshape(%758, newshape=[6, 8, 6]) /* ty=Tensor[(6, 8, 6), uint64] */;
  %762 = reshape(%760, newshape=[8, 30]) /* ty=Tensor[(8, 30), uint32] */;
  %763 = @func_537(%761, %762) /* ty=(Tensor[(6, 8, 6), float64], Tensor[(8, 3, 11), bool], Tensor[(264), float64], Tensor[(264), float64], Tensor[(8, 30), uint32]) */;
  %764 = less_equal(%752, %753) /* ty=Tensor[(5, 8, 6), bool] */;
  %765 = %763.4;
  (%764, %759, %765, meta[relay.Constant][46] /* ty=Tensor[(288), uint64] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5565() -> (Tensor[(264), float64],) {
  %2 = fn () -> (Tensor[(264), float64],) {
    %0 = @func_3838() /* ty=(Tensor[(264), float64], Tensor[(5, 8, 6), int64], Tensor[(5, 8, 6), float32]) */;
    %1 = %0.0;
    (%1,)
  };
  %2() /* ty=(Tensor[(264), float64],) */
}

def @func_4426() -> (Tensor[(1, 10, 15), float64], Tensor[(5, 8, 6), float32]) {
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 10, 15), float32] */, dtype="float32") /* ty=Tensor[(1, 10, 15), float32] */;
  %4 = exp(%3) /* ty=Tensor[(1, 10, 15), float32] */;
  %5 = cast(%4, dtype="float64") /* ty=Tensor[(1, 10, 15), float64] */;
  %6 = sigmoid(%5) /* ty=Tensor[(1, 10, 15), float64] */;
  %7 = @func_2722() /* ty=Tensor[(5, 8, 6), float32] */;
  (%6, %7)
}

def @func_1907(%var_1905: Tensor[(12, 1, 10), uint32], %var_1906: Tensor[(12, 15, 10), uint32]) -> Tensor[(12, 15, 10), uint32] {
  %10 = fn (%var_1891: Tensor[(12, 1, 10), uint32], %var_1892: Tensor[(12, 15, 10), uint32]) -> Tensor[(12, 15, 10), uint32] {
    %8 = cast(%var_1891, dtype="uint32") /* ty=Tensor[(12, 1, 10), uint32] */;
    %9 = cast(%var_1892, dtype="uint32") /* ty=Tensor[(12, 15, 10), uint32] */;
    multiply(%8, %9) /* ty=Tensor[(12, 15, 10), uint32] */
  };
  %10(%var_1905, %var_1906) /* ty=Tensor[(12, 15, 10), uint32] */
}

def @func_1629(%var_1628: Tensor[(7, 16, 11), float64]) -> (Tensor[(7, 16, 11), float64],) {
  %13 = fn (%var_1621: Tensor[(7, 16, 11), float64]) -> (Tensor[(7, 16, 11), float64],) {
    %11 = cast(%var_1621, dtype="float64") /* ty=Tensor[(7, 16, 11), float64] */;
    %12 = sigmoid(%11) /* ty=Tensor[(7, 16, 11), float64] */;
    (%12,)
  };
  %13(%var_1628) /* ty=(Tensor[(7, 16, 11), float64],) */
}

def @func_4164(%var_4134: Tensor[(13, 2, 14), float64]) -> (Tensor[(13, 2, 14), bool], Tensor[(560), int32], Tensor[(560), int32]) {
  %14 = cast(%var_4134, dtype="float64") /* ty=Tensor[(13, 2, 14), float64] */;
  %15 = acosh(%14) /* ty=Tensor[(13, 2, 14), float64] */;
  %16 = cast(%var_4134, dtype="float32") /* ty=Tensor[(13, 2, 14), float32] */;
  %17 = rsqrt(%16) /* ty=Tensor[(13, 2, 14), float32] */;
  %18 = cast(%17, dtype="bool") /* ty=Tensor[(13, 2, 14), bool] */;
  %19 = shape_of(%15, dtype="int32") /* ty=Tensor[(3), int32] */;
  %20 = cast(%15, dtype="bool") /* ty=Tensor[(13, 2, 14), bool] */;
  %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %22 = cast(meta[relay.Constant][1] /* ty=Tensor[(560), int32] */, dtype="int32") /* ty=Tensor[(560), int32] */;
  %23 = reshape(%22, newshape=[560]) /* ty=Tensor[(560), int32] */;
  %24 = @func_2510(%23) /* ty=(Tensor[(5, 8, 6), float64], Tensor[(10, 7, 8), bool], Tensor[(560), int32]) */;
  %25 = less(%20, %21) /* ty=Tensor[(13, 2, 14), bool] */;
  %26 = %24.2;
  (%25, %26, meta[relay.Constant][1] /* ty=Tensor[(560), int32] */)
}

def @func_5214() -> (Tensor[(264), float64], Tensor[(5, 8, 6), int64]) {
  @func_5212() /* ty=(Tensor[(264), float64], Tensor[(5, 8, 6), int64]) */
}

def @func_1245(%var_1244: Tensor[(10, 16, 15), float32]) -> Tensor[(10, 16, 15), float64] {
  %38 = fn (%var_1222: Tensor[(10, 16, 15), float32]) -> Tensor[(10, 16, 15), float64] {
    %27 = cast(%var_1222, dtype="float32") /* ty=Tensor[(10, 16, 15), float32] */;
    %28 = erf(%27) /* ty=Tensor[(10, 16, 15), float32] */;
    %29 = cast(meta[relay.Constant][2] /* ty=Tensor[(10, 16, 15), float32] */, dtype="bool") /* ty=Tensor[(10, 16, 15), bool] */;
    %30 = shape_of(%28, dtype="int32") /* ty=Tensor[(3), int32] */;
    %31 = cast(%28, dtype="bool") /* ty=Tensor[(10, 16, 15), bool] */;
    %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %33 = greater_equal(%31, %32) /* ty=Tensor[(10, 16, 15), bool] */;
    %34 = cast(meta[relay.Constant][3] /* ty=Tensor[(10, 16, 15), bool] */, dtype="float64") /* ty=Tensor[(10, 16, 15), float64] */;
    %35 = shape_of(%33, dtype="int32") /* ty=Tensor[(3), int32] */;
    %36 = cast(%33, dtype="float64") /* ty=Tensor[(10, 16, 15), float64] */;
    %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_mod(%36, %37) /* ty=Tensor[(10, 16, 15), float64] */
  };
  %38(%var_1244) /* ty=Tensor[(10, 16, 15), float64] */
}

def @func_278(%var_276: Tensor[(8, 3, 11), float64], %var_277: Tensor[(8, 3, 11), float64]) -> (Tensor[(8, 3, 11), float64], Tensor[(8, 3, 11), bool]) {
  @func_274(%var_276, %var_277) /* ty=(Tensor[(8, 3, 11), float64], Tensor[(8, 3, 11), bool]) */
}

def @func_3217(%var_3216: Tensor[(1, 6), int16]) -> (Tensor[(12, 6), int16], Tensor[(3, 88), float64], Tensor[(264), float64], Tensor[(5, 8, 6), int64]) {
  %48 = fn (%var_3184: Tensor[(1, 6), int16]) -> (Tensor[(12, 6), int16], Tensor[(3, 88), float64], Tensor[(264), float64], Tensor[(5, 8, 6), int64]) {
    %39 = cast(%var_3184, dtype="int16") /* ty=Tensor[(1, 6), int16] */;
    %40 = cast(meta[relay.Constant][4] /* ty=Tensor[(12, 6), int16] */, dtype="int16") /* ty=Tensor[(12, 6), int16] */;
    %41 = cast(meta[relay.Constant][5] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
    %42 = reshape(%41, newshape=[3, 88]) /* ty=Tensor[(3, 88), float64] */;
    %43 = @func_2668(%42) /* ty=(Tensor[(5, 8, 6), bool], Tensor[(8, 3, 11), float64], Tensor[(3, 88), float64]) */;
    %44 = @func_2708() /* ty=(Tensor[(5, 8, 6), int64],) */;
    %45 = right_shift(%39, %40) /* ty=Tensor[(12, 6), int16] */;
    %46 = %43.2;
    %47 = %44.0;
    (%45, %46, meta[relay.Constant][5] /* ty=Tensor[(264), float64] */, %47)
  };
  %48(%var_3216) /* ty=(Tensor[(12, 6), int16], Tensor[(3, 88), float64], Tensor[(264), float64], Tensor[(5, 8, 6), int64]) */
}

def @func_3660(%var_3659: Tensor[(5, 8, 6), float32]) -> (Tensor[(5, 8, 6), int8],) {
  %55 = fn (%var_3653: Tensor[(5, 8, 6), float32]) -> (Tensor[(5, 8, 6), int8],) {
    %49 = @func_2937() /* ty=Tensor[(5, 8, 6), float32] */;
    %50 = cast(%var_3653, dtype="int8") /* ty=Tensor[(5, 8, 6), int8] */;
    %51 = shape_of(%49, dtype="int32") /* ty=Tensor[(3), int32] */;
    %52 = cast(%49, dtype="int8") /* ty=Tensor[(5, 8, 6), int8] */;
    %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %54 = minimum(%52, %53) /* ty=Tensor[(5, 8, 6), int8] */;
    (%54,)
  };
  %55(%var_3659) /* ty=(Tensor[(5, 8, 6), int8],) */
}

def @func_6323(%var_6320: Tensor[(11, 13, 10), float32], %var_6321: Tensor[(11, 12, 10), float32], %var_6322: Tensor[(540), int8]) -> (Tensor[(11, 13, 10), bool], Tensor[(264), float64], Tensor[(11, ?, 10), bool], Tensor[(11, 1, 10), float64], Tensor[(11, 13, 10), int32], Tensor[(11, 13, 10), float64], Tensor[(11, ?, 10), float32], Tensor[(540), int8], Tensor[(540), int8], Tensor[(11, 12, 10), bool], Tensor[(10, 16, 15), float64], Tensor[(2400), float32], Tensor[(5, 8, 6), float32], Tensor[(264), float64]) {
  @func_6318(%var_6320, %var_6321, %var_6322) /* ty=(Tensor[(11, 13, 10), bool], Tensor[(264), float64], Tensor[(11, ?, 10), bool], Tensor[(11, 1, 10), float64], Tensor[(11, 13, 10), int32], Tensor[(11, 13, 10), float64], Tensor[(11, ?, 10), float32], Tensor[(540), int8], Tensor[(540), int8], Tensor[(11, 12, 10), bool], Tensor[(10, 16, 15), float64], Tensor[(2400), float32], Tensor[(5, 8, 6), float32], Tensor[(264), float64]) */
}

def @func_4956() -> (Tensor[(5, 8, 6), float32], Tensor[(264), float64]) {
  @func_4954() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(264), float64]) */
}

def @func_3318(%var_3310: Tensor[(540), int8]) -> (Tensor[(5, 8, 6), float32], Tensor[(264), float64], Tensor[(540), int8], Tensor[(264), float64]) {
  %56 = @func_3019() /* ty=(Tensor[(5, 8, 6), float32],) */;
  %57 = cast(%var_3310, dtype="int8") /* ty=Tensor[(540), int8] */;
  %58 = cast(%var_3310, dtype="int8") /* ty=Tensor[(540), int8] */;
  %59 = cast(meta[relay.Constant][6] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
  %60 = reshape(%57, newshape=[3, 15, 12]) /* ty=Tensor[(3, 15, 12), int8] */;
  %61 = reshape(%58, newshape=[3, 15, 12]) /* ty=Tensor[(3, 15, 12), int8] */;
  %62 = reshape(%59, newshape=[264]) /* ty=Tensor[(264), float64] */;
  %63 = @func_707(%60, %61, %62) /* ty=(Tensor[(3, 15, 12), bool], Tensor[(3, 15, 12), float64], Tensor[(8, 3, 11), float64], Tensor[(264), float64]) */;
  %64 = %56.0;
  %65 = %63.3;
  (%64, %65, %var_3310, meta[relay.Constant][6] /* ty=Tensor[(264), float64] */)
}

def @func_2205() -> (Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float64]) {
  @func_2203() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float64]) */
}

def @func_5005(%var_4970: Tensor[(10, 13, 6), int16]) -> (Tensor[(5, 8, 6), float32], Tensor[(10, 13, 6), uint16], Tensor[(7, 6, 11), float32], Tensor[(462), float32]) {
  %66 = cast(meta[relay.Constant][7] /* ty=Tensor[(10, 13, 6), int16] */, dtype="int16") /* ty=Tensor[(10, 13, 6), int16] */;
  %67 = shape_of(%var_4970, dtype="int32") /* ty=Tensor[(3), int32] */;
  %68 = cast(%var_4970, dtype="int16") /* ty=Tensor[(10, 13, 6), int16] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %70 = bitwise_and(%68, %69) /* ty=Tensor[(10, 13, 6), int16] */;
  %71 = cast(%70, dtype="uint16") /* ty=Tensor[(10, 13, 6), uint16] */;
  %72 = shape_of(%var_4970, dtype="int32") /* ty=Tensor[(3), int32] */;
  %73 = cast(%var_4970, dtype="uint16") /* ty=Tensor[(10, 13, 6), uint16] */;
  %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %75 = cast(meta[relay.Constant][8] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
  %76 = reshape(%75, newshape=[7, 6, 11]) /* ty=Tensor[(7, 6, 11), float32] */;
  %77 = @func_1789(%76) /* ty=(Tensor[(7, 6, 11), float32],) */;
  %78 = @func_4462() /* ty=Tensor[(5, 8, 6), float32] */;
  %79 = subtract(%73, %74) /* ty=Tensor[(10, 13, 6), uint16] */;
  %80 = %77.0;
  (%78, %79, %80, meta[relay.Constant][8] /* ty=Tensor[(462), float32] */)
}

def @func_5906(%var_5900: Tensor[(5, 8, 6), float32], %var_5901: Tensor[(1008), float64], %var_5902: Tensor[(132, 24), float64], %var_5903: Tensor[(120), uint32], %var_5904: Tensor[(900, 2), uint32], %var_5905: Tensor[(560), int32]) -> (Tensor[(5, 8, 6), uint16], Tensor[(5, 8, 6), float32], Tensor[(1008), float64], Tensor[(264), float64], Tensor[(132, 24), float64], Tensor[(560), int32], Tensor[(120), uint32], Tensor[(900, 2), uint32], Tensor[(560), int32]) {
  @func_5898(%var_5900, %var_5901, %var_5902, %var_5903, %var_5904, %var_5905) /* ty=(Tensor[(5, 8, 6), uint16], Tensor[(5, 8, 6), float32], Tensor[(1008), float64], Tensor[(264), float64], Tensor[(132, 24), float64], Tensor[(560), int32], Tensor[(120), uint32], Tensor[(900, 2), uint32], Tensor[(560), int32]) */
}

def @func_3321(%var_3319: Tensor[(540), int8]) -> (Tensor[(5, 8, 6), float32], Tensor[(264), float64], Tensor[(540), int8], Tensor[(264), float64]) {
  @func_3318(%var_3319) /* ty=(Tensor[(5, 8, 6), float32], Tensor[(264), float64], Tensor[(540), int8], Tensor[(264), float64]) */
}

def @func_4700() -> (Tensor[(5, 8, 6), float64], Tensor[(7, 11, 15), int16], Tensor[(1155), int16]) {
  %81 = @func_2484() /* ty=Tensor[(5, 8, 6), float32] */;
  %82 = cast(%81, dtype="float64") /* ty=Tensor[(5, 8, 6), float64] */;
  %83 = cast(meta[relay.Constant][9] /* ty=Tensor[(1155), int16] */, dtype="int16") /* ty=Tensor[(1155), int16] */;
  %84 = reshape(%83, newshape=[7, 11, 15]) /* ty=Tensor[(7, 11, 15), int16] */;
  %85 = sqrt(%82) /* ty=Tensor[(5, 8, 6), float64] */;
  %86 = @func_1349(%84) /* ty=Tensor[(7, 11, 15), int16] */;
  (%85, %86, meta[relay.Constant][9] /* ty=Tensor[(1155), int16] */)
}

def @func_3297() -> (Tensor[(5, 8, 6), int32], Tensor[(7, 11, 15), int16], Tensor[(1, 1155), int16], Tensor[(5, 8, 6), float32]) {
  @func_3295() /* ty=(Tensor[(5, 8, 6), int32], Tensor[(7, 11, 15), int16], Tensor[(1, 1155), int16], Tensor[(5, 8, 6), float32]) */
}

def @func_3295() -> (Tensor[(5, 8, 6), int32], Tensor[(7, 11, 15), int16], Tensor[(1, 1155), int16], Tensor[(5, 8, 6), float32]) {
  %87 = @func_2980() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), int32], Tensor[(540), int8], Tensor[(264), float64], Tensor[(5, 8, 6), float64]) */;
  %88 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 1155), int16] */, dtype="int16") /* ty=Tensor[(1, 1155), int16] */;
  %89 = reshape(%88, newshape=[7, 11, 15]) /* ty=Tensor[(7, 11, 15), int16] */;
  %90 = %87.1;
  %91 = @func_1349(%89) /* ty=Tensor[(7, 11, 15), int16] */;
  %92 = @func_2722() /* ty=Tensor[(5, 8, 6), float32] */;
  (%90, %91, meta[relay.Constant][10] /* ty=Tensor[(1, 1155), int16] */, %92)
}

def @func_2793(%var_2778: Tensor[(1008), float64], %var_2779: Tensor[(1, 264), float64], %var_2783: Tensor[(12, 264), float64]) -> (Tensor[(5, 8, 6), float32], Tensor[(1008), float64], Tensor[(12, 264), uint16], Tensor[(5, 8, 6), float64]) {
  %93 = cast(%var_2778, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %94 = cast(%var_2779, dtype="float64") /* ty=Tensor[(1, 264), float64] */;
  %95 = reshape(%93, newshape=[1008]) /* ty=Tensor[(1008), float64] */;
  %96 = reshape(%94, newshape=[264]) /* ty=Tensor[(264), float64] */;
  %97 = @func_2396(%95, %96) /* ty=(Tensor[(7, 9, 16), float64], Tensor[(1008), float64], Tensor[(120), uint32], Tensor[(8, 3, 11), float64], Tensor[(540), int8], Tensor[(264), float64], Tensor[(3, 15, 12), float64], Tensor[(7, 6, 11), float32], Tensor[(77, 6), float32], Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float32]) */;
  %98 = cast(%var_2779, dtype="uint16") /* ty=Tensor[(1, 264), uint16] */;
  %99 = cast(%var_2783, dtype="uint16") /* ty=Tensor[(12, 264), uint16] */;
  %100 = @func_2722() /* ty=Tensor[(5, 8, 6), float32] */;
  %101 = cast(%100, dtype="float64") /* ty=Tensor[(5, 8, 6), float64] */;
  %102 = %97.10;
  %103 = left_shift(%98, %99) /* ty=Tensor[(12, 264), uint16] */;
  %104 = rsqrt(%101) /* ty=Tensor[(5, 8, 6), float64] */;
  (%102, %var_2778, %103, %104)
}

def @func_5668(%var_5660: Tensor[(130, 6), int16]) -> (Tensor[(5, 8, 6), int64], Tensor[(462), float32], Tensor[(130, 6), int16], Tensor[(3, 5), bool], Tensor[(15), int64]) {
  %105 = @func_5212() /* ty=(Tensor[(264), float64], Tensor[(5, 8, 6), int64]) */;
  %106 = cast(%var_5660, dtype="int16") /* ty=Tensor[(130, 6), int16] */;
  %107 = reshape(%106, newshape=[10, 13, 6]) /* ty=Tensor[(10, 13, 6), int16] */;
  %108 = @func_5005(%107) /* ty=(Tensor[(5, 8, 6), float32], Tensor[(10, 13, 6), uint16], Tensor[(7, 6, 11), float32], Tensor[(462), float32]) */;
  %109 = cast(meta[relay.Constant][11] /* ty=Tensor[(15), int64] */, dtype="int64") /* ty=Tensor[(15), int64] */;
  %110 = cast(meta[relay.Constant][11] /* ty=Tensor[(15), int64] */, dtype="int64") /* ty=Tensor[(15), int64] */;
  %111 = reshape(%109, newshape=[3, 5]) /* ty=Tensor[(3, 5), int64] */;
  %112 = reshape(%110, newshape=[3, 5]) /* ty=Tensor[(3, 5), int64] */;
  %113 = @func_4024(%111, %112) /* ty=(Tensor[(3, 5), bool],) */;
  %114 = %105.1;
  %115 = %108.3;
  %116 = %113.0;
  (%114, %115, %var_5660, %116, meta[relay.Constant][11] /* ty=Tensor[(15), int64] */)
}

def @func_4862() -> Tensor[(5, 8, 6), int64] {
  %117 = @func_3631() /* ty=(Tensor[(5, 8, 6), int64],) */;
  %117.0
}

def @func_2159(%var_2082: Tensor[(4, 8, 2), int64], %var_2083: Tensor[(4, 8, 2), int64], %var_2129: Tensor[(288), uint64], %var_2130: Tensor[(4, 60), uint32], %var_2147: Tensor[(4, 8, 2), float32]) -> (Tensor[(4, 8, 2), int64], Tensor[(4, 8, 2), float32], Tensor[(8, 30), uint32], Tensor[(288), uint64], Tensor[(4, 60), uint32], Tensor[(4, 8, 2), bool], Tensor[(12, 1, 4), float32], Tensor[(48), float32]) {
  %118 = cast(%var_2083, dtype="int64") /* ty=Tensor[(4, 8, 2), int64] */;
  %119 = shape_of(%var_2082, dtype="int32") /* ty=Tensor[(3), int32] */;
  %120 = cast(%var_2082, dtype="int64") /* ty=Tensor[(4, 8, 2), int64] */;
  %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %122 = cast(%var_2082, dtype="float64") /* ty=Tensor[(4, 8, 2), float64] */;
  %123 = asin(%122) /* ty=Tensor[(4, 8, 2), float64] */;
  %124 = cast(%123, dtype="float64") /* ty=Tensor[(4, 8, 2), float64] */;
  %125 = exp(%124) /* ty=Tensor[(4, 8, 2), float64] */;
  %126 = cast(%125, dtype="float32") /* ty=Tensor[(4, 8, 2), float32] */;
  %127 = cast(%var_2129, dtype="uint64") /* ty=Tensor[(288), uint64] */;
  %128 = cast(%var_2130, dtype="uint32") /* ty=Tensor[(4, 60), uint32] */;
  %129 = reshape(%127, newshape=[6, 8, 6]) /* ty=Tensor[(6, 8, 6), uint64] */;
  %130 = reshape(%128, newshape=[8, 30]) /* ty=Tensor[(8, 30), uint32] */;
  %131 = @func_537(%129, %130) /* ty=(Tensor[(6, 8, 6), float64], Tensor[(8, 3, 11), bool], Tensor[(264), float64], Tensor[(264), float64], Tensor[(8, 30), uint32]) */;
  %132 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 8, 2), float64] */, dtype="float32") /* ty=Tensor[(4, 8, 2), float32] */;
  %133 = shape_of(%125, dtype="int32") /* ty=Tensor[(3), int32] */;
  %134 = cast(%125, dtype="float32") /* ty=Tensor[(4, 8, 2), float32] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %136 = floor_divide(%134, %135) /* ty=Tensor[(4, 8, 2), float32] */;
  %137 = cast(%var_2147, dtype="bool") /* ty=Tensor[(4, 8, 2), bool] */;
  %138 = shape_of(%136, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(%136, dtype="bool") /* ty=Tensor[(4, 8, 2), bool] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %141 = cast(meta[relay.Constant][13] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %142 = reshape(%141, newshape=[12, 1, 4]) /* ty=Tensor[(12, 1, 4), float32] */;
  %143 = subtract(%120, %121) /* ty=Tensor[(4, 8, 2), int64] */;
  %144 = log2(%126) /* ty=Tensor[(4, 8, 2), float32] */;
  %145 = %131.4;
  %146 = equal(%139, %140) /* ty=Tensor[(4, 8, 2), bool] */;
  %147 = @func_1684(%142) /* ty=Tensor[(12, 1, 4), float32] */;
  (%143, %144, %145, %var_2129, %var_2130, %146, %147, meta[relay.Constant][13] /* ty=Tensor[(48), float32] */)
}

def @func_2670(%var_2669: Tensor[(3, 88), float64]) -> (Tensor[(5, 8, 6), bool], Tensor[(8, 3, 11), float64], Tensor[(3, 88), float64]) {
  %161 = fn (%var_2666: Tensor[(3, 88), float64]) -> (Tensor[(5, 8, 6), bool], Tensor[(8, 3, 11), float64], Tensor[(3, 88), float64]) {
    %148 = @func_2249() /* ty=(Tensor[(5, 8, 6), float32],) */;
    %149 = %148.0;
    %150 = cast(meta[relay.Constant][14] /* ty=Tensor[(5, 8, 6), float32] */, dtype="bool") /* ty=Tensor[(5, 8, 6), bool] */;
    %151 = shape_of(%149, dtype="int32") /* ty=Tensor[(3), int32] */;
    %152 = cast(%149, dtype="bool") /* ty=Tensor[(5, 8, 6), bool] */;
    %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %154 = cast(%var_2666, dtype="float64") /* ty=Tensor[(3, 88), float64] */;
    %155 = cast(%var_2666, dtype="float64") /* ty=Tensor[(3, 88), float64] */;
    %156 = reshape(%154, newshape=[8, 3, 11]) /* ty=Tensor[(8, 3, 11), float64] */;
    %157 = reshape(%155, newshape=[8, 3, 11]) /* ty=Tensor[(8, 3, 11), float64] */;
    %158 = @func_274(%156, %157) /* ty=(Tensor[(8, 3, 11), float64], Tensor[(8, 3, 11), bool]) */;
    %159 = logical_and(%152, %153) /* ty=Tensor[(5, 8, 6), bool] */;
    %160 = %158.0;
    (%159, %160, %var_2666)
  };
  %161(%var_2669) /* ty=(Tensor[(5, 8, 6), bool], Tensor[(8, 3, 11), float64], Tensor[(3, 88), float64]) */
}

def @func_4167(%var_4165: Tensor[(13, 2, 14), float64]) -> (Tensor[(13, 2, 14), bool], Tensor[(560), int32], Tensor[(560), int32]) {
  @func_4164(%var_4165) /* ty=(Tensor[(13, 2, 14), bool], Tensor[(560), int32], Tensor[(560), int32]) */
}

def @func_6318(%var_6225: Tensor[(11, 13, 10), float32], %var_6286: Tensor[(11, 12, 10), float32], %var_6297: Tensor[(540), int8]) -> (Tensor[(11, 13, 10), bool], Tensor[(264), float64], Tensor[(11, ?, 10), bool], Tensor[(11, 1, 10), float64], Tensor[(11, 13, 10), int32], Tensor[(11, 13, 10), float64], Tensor[(11, ?, 10), float32], Tensor[(540), int8], Tensor[(540), int8], Tensor[(11, 12, 10), bool], Tensor[(10, 16, 15), float64], Tensor[(2400), float32], Tensor[(5, 8, 6), float32], Tensor[(264), float64]) {
  %162 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 1, 10), float32] */, dtype="bool") /* ty=Tensor[(11, 1, 10), bool] */;
  %163 = cast(%var_6225, dtype="bool") /* ty=Tensor[(11, 13, 10), bool] */;
  %164 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 1, 10), float32] */, dtype="float32") /* ty=Tensor[(11, 1, 10), float32] */;
  %165 = acos(%164) /* ty=Tensor[(11, 1, 10), float32] */;
  %166 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 1, 10), float32] */, dtype="bool") /* ty=Tensor[(11, 1, 10), bool] */;
  %167 = shape_of(%165, dtype="int32") /* ty=Tensor[(3), int32] */;
  %168 = cast(%165, dtype="bool") /* ty=Tensor[(11, 1, 10), bool] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %170 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 1, 10), float32] */, dtype="float64") /* ty=Tensor[(11, 1, 10), float64] */;
  %171 = cast(%var_6225, dtype="float64") /* ty=Tensor[(11, 13, 10), float64] */;
  %172 = tan(%171) /* ty=Tensor[(11, 13, 10), float64] */;
  %173 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 1, 10), float32] */, dtype="uint8") /* ty=Tensor[(11, 1, 10), uint8] */;
  %174 = shape_of(%165, dtype="int32") /* ty=Tensor[(3), int32] */;
  %175 = cast(%165, dtype="uint8") /* ty=Tensor[(11, 1, 10), uint8] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %177 = maximum(%175, %176) /* ty=Tensor[(11, ?, 10), uint8] */;
  %178 = cast(%172, dtype="int32") /* ty=Tensor[(11, 13, 10), int32] */;
  %179 = cast(%177, dtype="int32") /* ty=Tensor[(11, ?, 10), int32] */;
  %180 = cast(%var_6225, dtype="float64") /* ty=Tensor[(11, 13, 10), float64] */;
  %181 = cast(%177, dtype="float32") /* ty=Tensor[(11, ?, 10), float32] */;
  %182 = cast(%var_6297, dtype="int8") /* ty=Tensor[(540), int8] */;
  %183 = reshape(%182, newshape=[540]) /* ty=Tensor[(540), int8] */;
  %184 = @func_3318(%183) /* ty=(Tensor[(5, 8, 6), float32], Tensor[(264), float64], Tensor[(540), int8], Tensor[(264), float64]) */;
  %185 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 1, 10), float32] */, dtype="float32") /* ty=Tensor[(11, 1, 10), float32] */;
  %186 = cast(%var_6286, dtype="float32") /* ty=Tensor[(11, 12, 10), float32] */;
  %187 = power(%185, %186) /* ty=Tensor[(11, 12, 10), float32] */;
  %188 = cast(%187, dtype="bool") /* ty=Tensor[(11, 12, 10), bool] */;
  %189 = cast(%165, dtype="bool") /* ty=Tensor[(11, 1, 10), bool] */;
  %190 = cast(meta[relay.Constant][16] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %191 = reshape(%190, newshape=[2400]) /* ty=Tensor[(2400), float32] */;
  %192 = @func_2617(%191) /* ty=(Tensor[(5, 8, 6), float32], Tensor[(10, 16, 15), float64], Tensor[(2400), float32]) */;
  %193 = @func_3838() /* ty=(Tensor[(264), float64], Tensor[(5, 8, 6), int64], Tensor[(5, 8, 6), float32]) */;
  %194 = equal(%162, %163) /* ty=Tensor[(11, 13, 10), bool] */;
  %195 = @func_4564() /* ty=Tensor[(264), float64] */;
  %196 = equal(%168, %169) /* ty=Tensor[(11, ?, 10), bool] */;
  %197 = erf(%170) /* ty=Tensor[(11, 1, 10), float64] */;
  %198 = minimum(%178, %179) /* ty=Tensor[(11, 13, 10), int32] */;
  %199 = log2(%180) /* ty=Tensor[(11, 13, 10), float64] */;
  %200 = log2(%181) /* ty=Tensor[(11, ?, 10), float32] */;
  %201 = %184.2;
  %202 = logical_and(%188, %189) /* ty=Tensor[(11, 12, 10), bool] */;
  %203 = %192.1;
  %204 = @func_4462() /* ty=Tensor[(5, 8, 6), float32] */;
  %205 = %193.0;
  (%194, %195, %196, %197, %198, %199, %200, %201, %var_6297, %202, %203, meta[relay.Constant][16] /* ty=Tensor[(2400), float32] */, %204, %205)
}

def @func_4464() -> Tensor[(5, 8, 6), float32] {
  @func_4462() /* ty=Tensor[(5, 8, 6), float32] */
}

def @func_2249() -> (Tensor[(5, 8, 6), float32],) {
  %206 = @func_2203() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float64]) */;
  %207 = %206.0;
  (%207,)
}

def @func_2724() -> Tensor[(5, 8, 6), float32] {
  @func_2722() /* ty=Tensor[(5, 8, 6), float32] */
}

def @func_614(%var_612: Tensor[(10, 7, 8), int32], %var_613: Tensor[(10, 7, 8), int32]) -> (Tensor[(10, 7, 8), bool],) {
  @func_610(%var_612, %var_613) /* ty=(Tensor[(10, 7, 8), bool],) */
}

def @func_6056(%var_6043: Tensor[(160), int32]) -> (Tensor[(5, 8, 6), float32], Tensor[(8, 5, 4), int32], Tensor[(160), int32]) {
  %208 = @func_2937() /* ty=Tensor[(5, 8, 6), float32] */;
  %209 = cast(%208, dtype="float32") /* ty=Tensor[(5, 8, 6), float32] */;
  %210 = cast(%var_6043, dtype="int32") /* ty=Tensor[(160), int32] */;
  %211 = cast(%var_6043, dtype="int32") /* ty=Tensor[(160), int32] */;
  %212 = reshape(%210, newshape=[8, 5, 4]) /* ty=Tensor[(8, 5, 4), int32] */;
  %213 = reshape(%211, newshape=[8, 5, 4]) /* ty=Tensor[(8, 5, 4), int32] */;
  %214 = asinh(%209) /* ty=Tensor[(5, 8, 6), float32] */;
  %215 = @func_4407(%212, %213) /* ty=Tensor[(8, 5, 4), int32] */;
  (%214, %215, %var_6043)
}

def @func_4131() -> (Tensor[(540), int8],) {
  %216 = @func_2980() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), int32], Tensor[(540), int8], Tensor[(264), float64], Tensor[(5, 8, 6), float64]) */;
  %217 = %216.2;
  (%217,)
}

def @func_5812() -> (Tensor[(5, 8, 6), float32],) {
  %218 = @func_2249() /* ty=(Tensor[(5, 8, 6), float32],) */;
  %219 = %218.0;
  (%219,)
}

def @func_2710() -> (Tensor[(5, 8, 6), int64],) {
  @func_2708() /* ty=(Tensor[(5, 8, 6), int64],) */
}

def @func_4746(%var_4737: Tensor[(160), int32]) -> (Tensor[(5, 8, 6), int64], Tensor[(8, 5, 4), int32], Tensor[(160), int32]) {
  %220 = @func_3631() /* ty=(Tensor[(5, 8, 6), int64],) */;
  %221 = cast(%var_4737, dtype="int32") /* ty=Tensor[(160), int32] */;
  %222 = cast(%var_4737, dtype="int32") /* ty=Tensor[(160), int32] */;
  %223 = reshape(%221, newshape=[8, 5, 4]) /* ty=Tensor[(8, 5, 4), int32] */;
  %224 = reshape(%222, newshape=[8, 5, 4]) /* ty=Tensor[(8, 5, 4), int32] */;
  %225 = %220.0;
  %226 = @func_4407(%223, %224) /* ty=Tensor[(8, 5, 4), int32] */;
  (%225, %226, %var_4737)
}

def @func_5201(%var_5199: Tensor[(15), int64]) -> (Tensor[(5, 8, 6), int64], Tensor[(3, 5), bool], Tensor[(15), int64]) {
  @func_5198(%var_5199) /* ty=(Tensor[(5, 8, 6), int64], Tensor[(3, 5), bool], Tensor[(15), int64]) */
}

def @func_4428() -> (Tensor[(1, 10, 15), float64], Tensor[(5, 8, 6), float32]) {
  @func_4426() /* ty=(Tensor[(1, 10, 15), float64], Tensor[(5, 8, 6), float32]) */
}

def @func_2982() -> (Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), int32], Tensor[(540), int8], Tensor[(264), float64], Tensor[(5, 8, 6), float64]) {
  @func_2980() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), int32], Tensor[(540), int8], Tensor[(264), float64], Tensor[(5, 8, 6), float64]) */
}

def @func_2399(%var_2397: Tensor[(1008), float64], %var_2398: Tensor[(264), float64]) -> (Tensor[(7, 9, 16), float64], Tensor[(1008), float64], Tensor[(120), uint32], Tensor[(8, 3, 11), float64], Tensor[(540), int8], Tensor[(264), float64], Tensor[(3, 15, 12), float64], Tensor[(7, 6, 11), float32], Tensor[(77, 6), float32], Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float32]) {
  %259 = fn (%var_2329: Tensor[(1008), float64], %var_2358: Tensor[(264), float64]) -> (Tensor[(7, 9, 16), float64], Tensor[(1008), float64], Tensor[(120), uint32], Tensor[(8, 3, 11), float64], Tensor[(540), int8], Tensor[(264), float64], Tensor[(3, 15, 12), float64], Tensor[(7, 6, 11), float32], Tensor[(77, 6), float32], Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float32]) {
    %227 = cast(%var_2329, dtype="float64") /* ty=Tensor[(1008), float64] */;
    %228 = cast(%var_2329, dtype="float64") /* ty=Tensor[(1008), float64] */;
    %229 = cast(meta[relay.Constant][17] /* ty=Tensor[(120), uint32] */, dtype="uint32") /* ty=Tensor[(120), uint32] */;
    %230 = reshape(%227, newshape=[7, 9, 16]) /* ty=Tensor[(7, 9, 16), float64] */;
    %231 = reshape(%228, newshape=[7, 9, 16]) /* ty=Tensor[(7, 9, 16), float64] */;
    %232 = reshape(%229, newshape=[6, 20]) /* ty=Tensor[(6, 20), uint32] */;
    %233 = @func_1951(%230, %231, %232) /* ty=(Tensor[(7, 9, 16), float64], Tensor[(12, 15, 10), uint32], Tensor[(6, 20), uint32], Tensor[(900, 2), uint32]) */;
    %234 = cast(meta[relay.Constant][18] /* ty=Tensor[(540), int8] */, dtype="int8") /* ty=Tensor[(540), int8] */;
    %235 = cast(%var_2358, dtype="float64") /* ty=Tensor[(264), float64] */;
    %236 = reshape(%234, newshape=[540]) /* ty=Tensor[(540), int8] */;
    %237 = reshape(%235, newshape=[264]) /* ty=Tensor[(264), float64] */;
    %238 = @func_1288(%236, %237) /* ty=(Tensor[(3, 12, 9), float32], Tensor[(8, 3, 11), float64], Tensor[(540), int8], Tensor[(264), float64]) */;
    %239 = cast(meta[relay.Constant][18] /* ty=Tensor[(540), int8] */, dtype="int8") /* ty=Tensor[(540), int8] */;
    %240 = cast(meta[relay.Constant][18] /* ty=Tensor[(540), int8] */, dtype="int8") /* ty=Tensor[(540), int8] */;
    %241 = %238.1;
    %242 = cast(%241, dtype="float64") /* ty=Tensor[(8, 3, 11), float64] */;
    %243 = reshape(%239, newshape=[3, 15, 12]) /* ty=Tensor[(3, 15, 12), int8] */;
    %244 = reshape(%240, newshape=[3, 15, 12]) /* ty=Tensor[(3, 15, 12), int8] */;
    %245 = reshape(%242, newshape=[264]) /* ty=Tensor[(264), float64] */;
    %246 = @func_707(%243, %244, %245) /* ty=(Tensor[(3, 15, 12), bool], Tensor[(3, 15, 12), float64], Tensor[(8, 3, 11), float64], Tensor[(264), float64]) */;
    %247 = cast(meta[relay.Constant][19] /* ty=Tensor[(77, 6), float32] */, dtype="float32") /* ty=Tensor[(77, 6), float32] */;
    %248 = reshape(%247, newshape=[7, 6, 11]) /* ty=Tensor[(7, 6, 11), float32] */;
    %249 = @func_1789(%248) /* ty=(Tensor[(7, 6, 11), float32],) */;
    %250 = @func_2249() /* ty=(Tensor[(5, 8, 6), float32],) */;
    %251 = @func_2203() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float64]) */;
    %252 = %251.1;
    %253 = cast(%252, dtype="float32") /* ty=Tensor[(5, 8, 6), float32] */;
    %254 = %233.0;
    %255 = %246.1;
    %256 = %249.0;
    %257 = %250.0;
    %258 = tan(%253) /* ty=Tensor[(5, 8, 6), float32] */;
    (%254, %var_2329, meta[relay.Constant][17] /* ty=Tensor[(120), uint32] */, %241, meta[relay.Constant][18] /* ty=Tensor[(540), int8] */, %var_2358, %255, %256, meta[relay.Constant][19] /* ty=Tensor[(77, 6), float32] */, %257, %258)
  };
  %259(%var_2397, %var_2398) /* ty=(Tensor[(7, 9, 16), float64], Tensor[(1008), float64], Tensor[(120), uint32], Tensor[(8, 3, 11), float64], Tensor[(540), int8], Tensor[(264), float64], Tensor[(3, 15, 12), float64], Tensor[(7, 6, 11), float32], Tensor[(77, 6), float32], Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float32]) */
}

def @func_5797() -> (Tensor[(5, 8, 6), float32],) {
  %261 = fn () -> (Tensor[(5, 8, 6), float32],) {
    %260 = @func_5784() /* ty=Tensor[(5, 8, 6), float32] */;
    (%260,)
  };
  %261() /* ty=(Tensor[(5, 8, 6), float32],) */
}

def @func_3171(%var_3169: Tensor[(5, 8, 6), int64]) -> (Tensor[(5, 8, 6), bool], Tensor[(5, 8, 6), bool], Tensor[(8, 30), uint32], Tensor[(288), uint64]) {
  @func_3168(%var_3169) /* ty=(Tensor[(5, 8, 6), bool], Tensor[(5, 8, 6), bool], Tensor[(8, 30), uint32], Tensor[(288), uint64]) */
}

def @func_3093() -> (Tensor[(5, 8, 6), int64],) {
  %262 = @func_2708() /* ty=(Tensor[(5, 8, 6), int64],) */;
  %263 = %262.0;
  (%263,)
}

def @func_3564() -> (Tensor[(540), int8], Tensor[(264), float64], Tensor[(264), float64]) {
  %274 = fn () -> (Tensor[(540), int8], Tensor[(264), float64], Tensor[(264), float64]) {
    %264 = @func_2980() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), int32], Tensor[(540), int8], Tensor[(264), float64], Tensor[(5, 8, 6), float64]) */;
    %265 = %264.2;
    %266 = cast(%265, dtype="int8") /* ty=Tensor[(540), int8] */;
    %267 = reshape(%266, newshape=[540]) /* ty=Tensor[(540), int8] */;
    %268 = @func_3318(%267) /* ty=(Tensor[(5, 8, 6), float32], Tensor[(264), float64], Tensor[(540), int8], Tensor[(264), float64]) */;
    %269 = cast(%265, dtype="int8") /* ty=Tensor[(540), int8] */;
    %270 = reshape(%269, newshape=[540]) /* ty=Tensor[(540), int8] */;
    %271 = @func_3318(%270) /* ty=(Tensor[(5, 8, 6), float32], Tensor[(264), float64], Tensor[(540), int8], Tensor[(264), float64]) */;
    %272 = %268.3;
    %273 = %271.1;
    (%265, %272, %273)
  };
  %274() /* ty=(Tensor[(540), int8], Tensor[(264), float64], Tensor[(264), float64]) */
}

def @func_4702() -> (Tensor[(5, 8, 6), float64], Tensor[(7, 11, 15), int16], Tensor[(1155), int16]) {
  @func_4700() /* ty=(Tensor[(5, 8, 6), float64], Tensor[(7, 11, 15), int16], Tensor[(1155), int16]) */
}

def @func_4848() -> Tensor[(5, 8, 6), int64] {
  %276 = fn () -> Tensor[(5, 8, 6), int64] {
    %275 = @func_2708() /* ty=(Tensor[(5, 8, 6), int64],) */;
    %275.0
  };
  %276() /* ty=Tensor[(5, 8, 6), int64] */
}

def @func_4028(%var_4026: Tensor[(3, 5), int64], %var_4027: Tensor[(3, 5), int64]) -> (Tensor[(3, 5), bool],) {
  @func_4024(%var_4026, %var_4027) /* ty=(Tensor[(3, 5), bool],) */
}

def @func_4565() -> Tensor[(264), float64] {
  %278 = fn () -> Tensor[(264), float64] {
    %277 = @func_3838() /* ty=(Tensor[(264), float64], Tensor[(5, 8, 6), int64], Tensor[(5, 8, 6), float32]) */;
    %277.0
  };
  %278() /* ty=Tensor[(264), float64] */
}

def @func_2512(%var_2511: Tensor[(560), int32]) -> (Tensor[(5, 8, 6), float64], Tensor[(10, 7, 8), bool], Tensor[(560), int32]) {
  %289 = fn (%var_2508: Tensor[(560), int32]) -> (Tensor[(5, 8, 6), float64], Tensor[(10, 7, 8), bool], Tensor[(560), int32]) {
    %279 = @func_2249() /* ty=(Tensor[(5, 8, 6), float32],) */;
    %280 = %279.0;
    %281 = cast(%280, dtype="float64") /* ty=Tensor[(5, 8, 6), float64] */;
    %282 = cast(%var_2508, dtype="int32") /* ty=Tensor[(560), int32] */;
    %283 = cast(%var_2508, dtype="int32") /* ty=Tensor[(560), int32] */;
    %284 = reshape(%282, newshape=[10, 7, 8]) /* ty=Tensor[(10, 7, 8), int32] */;
    %285 = reshape(%283, newshape=[10, 7, 8]) /* ty=Tensor[(10, 7, 8), int32] */;
    %286 = @func_610(%284, %285) /* ty=(Tensor[(10, 7, 8), bool],) */;
    %287 = acos(%281) /* ty=Tensor[(5, 8, 6), float64] */;
    %288 = %286.0;
    (%287, %288, %var_2508)
  };
  %289(%var_2511) /* ty=(Tensor[(5, 8, 6), float64], Tensor[(10, 7, 8), bool], Tensor[(560), int32]) */
}

def @func_1791(%var_1790: Tensor[(7, 6, 11), float32]) -> (Tensor[(7, 6, 11), float32],) {
  %292 = fn (%var_1779: Tensor[(7, 6, 11), float32]) -> (Tensor[(7, 6, 11), float32],) {
    %290 = cast(%var_1779, dtype="float32") /* ty=Tensor[(7, 6, 11), float32] */;
    %291 = sinh(%290) /* ty=Tensor[(7, 6, 11), float32] */;
    (%291,)
  };
  %292(%var_1790) /* ty=(Tensor[(7, 6, 11), float32],) */
}

def @func_4819() -> (Tensor[(5, 8, 6), float32], Tensor[(10, 16, 15), float64], Tensor[(2400), float64]) {
  %300 = fn () -> (Tensor[(5, 8, 6), float32], Tensor[(10, 16, 15), float64], Tensor[(2400), float64]) {
    %293 = @func_3838() /* ty=(Tensor[(264), float64], Tensor[(5, 8, 6), int64], Tensor[(5, 8, 6), float32]) */;
    %294 = cast(meta[relay.Constant][20] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
    %295 = reshape(%294, newshape=[10, 16, 15]) /* ty=Tensor[(10, 16, 15), float32] */;
    %296 = cast(meta[relay.Constant][20] /* ty=Tensor[(2400), float32] */, dtype="float64") /* ty=Tensor[(2400), float64] */;
    %297 = %293.2;
    %298 = @func_1243(%295) /* ty=Tensor[(10, 16, 15), float64] */;
    %299 = sqrt(%296) /* ty=Tensor[(2400), float64] */;
    (%297, %298, %299)
  };
  %300() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(10, 16, 15), float64], Tensor[(2400), float64]) */
}

def @func_2938() -> Tensor[(5, 8, 6), float32] {
  %301 = fn () -> Tensor[(5, 8, 6), float32] {
    @func_2722() /* ty=Tensor[(5, 8, 6), float32] */
  };
  %301() /* ty=Tensor[(5, 8, 6), float32] */
}

def @main() -> (Tensor[(12, 14, 10), float32],) {
  %302 = cast(meta[relay.Constant][21] /* ty=Tensor[(12, 14, 10), float32] */, dtype="float32") /* ty=Tensor[(12, 14, 10), float32] */;
  %303 = atanh(%302) /* ty=Tensor[(12, 14, 10), float32] */;
  (%303,)
}

def @func_6114() -> (Tensor[(5, 8, 6), int32],) {
  %306 = fn () -> (Tensor[(5, 8, 6), int32],) {
    %304 = @func_3295() /* ty=(Tensor[(5, 8, 6), int32], Tensor[(7, 11, 15), int16], Tensor[(1, 1155), int16], Tensor[(5, 8, 6), float32]) */;
    %305 = %304.0;
    (%305,)
  };
  %306() /* ty=(Tensor[(5, 8, 6), int32],) */
}

def @func_5933() -> (Tensor[(5, 8, 6), int64], Tensor[(5, 8, 6), float32]) {
  @func_5931() /* ty=(Tensor[(5, 8, 6), int64], Tensor[(5, 8, 6), float32]) */
}

def @func_610(%var_604: Tensor[(10, 7, 8), int32], %var_605: Tensor[(10, 7, 8), int32]) -> (Tensor[(10, 7, 8), bool],) {
  %307 = cast(%var_605, dtype="bool") /* ty=Tensor[(10, 7, 8), bool] */;
  %308 = shape_of(%var_604, dtype="int32") /* ty=Tensor[(3), int32] */;
  %309 = cast(%var_604, dtype="bool") /* ty=Tensor[(10, 7, 8), bool] */;
  %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %311 = greater(%309, %310) /* ty=Tensor[(10, 7, 8), bool] */;
  (%311,)
}

def @func_2251() -> (Tensor[(5, 8, 6), float32],) {
  @func_2249() /* ty=(Tensor[(5, 8, 6), float32],) */
}

def @func_326(%var_324: Tensor[(5, 12, 4), uint32], %var_325: Tensor[(264), float64]) -> (Tensor[(5, 12, 4), float32], Tensor[(8, 3, 11), bool], Tensor[(264), float64]) {
  @func_322(%var_324, %var_325) /* ty=(Tensor[(5, 12, 4), float32], Tensor[(8, 3, 11), bool], Tensor[(264), float64]) */
}

def @func_5580() -> Tensor[(10, 15, 2), float32] {
  %313 = fn () -> Tensor[(10, 15, 2), float32] {
    %312 = cast(meta[relay.Constant][22] /* ty=Tensor[(10, 15, 2), float32] */, dtype="float32") /* ty=Tensor[(10, 15, 2), float32] */;
    asin(%312) /* ty=Tensor[(10, 15, 2), float32] */
  };
  %313() /* ty=Tensor[(10, 15, 2), float32] */
}

def @func_2166(%var_2161: Tensor[(4, 8, 2), int64], %var_2162: Tensor[(4, 8, 2), int64], %var_2163: Tensor[(288), uint64], %var_2164: Tensor[(4, 60), uint32], %var_2165: Tensor[(4, 8, 2), float32]) -> (Tensor[(4, 8, 2), int64], Tensor[(4, 8, 2), float32], Tensor[(8, 30), uint32], Tensor[(288), uint64], Tensor[(4, 60), uint32], Tensor[(4, 8, 2), bool], Tensor[(12, 1, 4), float32], Tensor[(48), float32]) {
  @func_2159(%var_2161, %var_2162, %var_2163, %var_2164, %var_2165) /* ty=(Tensor[(4, 8, 2), int64], Tensor[(4, 8, 2), float32], Tensor[(8, 30), uint32], Tensor[(288), uint64], Tensor[(4, 60), uint32], Tensor[(4, 8, 2), bool], Tensor[(12, 1, 4), float32], Tensor[(48), float32]) */
}

def @func_2617(%var_2609: Tensor[(2400), float32]) -> (Tensor[(5, 8, 6), float32], Tensor[(10, 16, 15), float64], Tensor[(2400), float32]) {
  %314 = cast(%var_2609, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %315 = reshape(%314, newshape=[10, 16, 15]) /* ty=Tensor[(10, 16, 15), float32] */;
  %316 = @func_2484() /* ty=Tensor[(5, 8, 6), float32] */;
  %317 = @func_1243(%315) /* ty=Tensor[(10, 16, 15), float64] */;
  (%316, %317, %var_2609)
}

def @func_3516() -> (Tensor[(264), float64], Tensor[(5, 8, 6), float32]) {
  %321 = fn () -> (Tensor[(264), float64], Tensor[(5, 8, 6), float32]) {
    %318 = @func_3019() /* ty=(Tensor[(5, 8, 6), float32],) */;
    %319 = @func_3380() /* ty=Tensor[(264), float64] */;
    %320 = %318.0;
    (%319, %320)
  };
  %321() /* ty=(Tensor[(264), float64], Tensor[(5, 8, 6), float32]) */
}

def @func_5078(%var_5077: Tensor[(1155, 1), int16]) -> (Tensor[(5, 8, 6), int16], Tensor[(1155, 264), int64]) {
  %330 = fn (%var_5056: Tensor[(1155, 1), int16]) -> (Tensor[(5, 8, 6), int16], Tensor[(1155, 264), int64]) {
    %322 = cast(%var_5056, dtype="int16") /* ty=Tensor[(1155, 1), int16] */;
    %323 = reshape(%322, newshape=[1155]) /* ty=Tensor[(1155), int16] */;
    %324 = @func_3143(%323) /* ty=(Tensor[(5, 8, 6), float64], Tensor[(7, 11, 15), int16], Tensor[(1155), int16], Tensor[(5, 8, 6), int16], Tensor[(5, 8, 6), float64]) */;
    %325 = @func_4564() /* ty=Tensor[(264), float64] */;
    %326 = cast(%var_5056, dtype="int64") /* ty=Tensor[(1155, 1), int64] */;
    %327 = cast(%325, dtype="int64") /* ty=Tensor[(264), int64] */;
    %328 = %324.3;
    %329 = minimum(%326, %327) /* ty=Tensor[(1155, 264), int64] */;
    (%328, %329)
  };
  %330(%var_5077) /* ty=(Tensor[(5, 8, 6), int16], Tensor[(1155, 264), int64]) */
}

def @func_274(%var_249: Tensor[(8, 3, 11), float64], %var_270: Tensor[(8, 3, 11), float64]) -> (Tensor[(8, 3, 11), float64], Tensor[(8, 3, 11), bool]) {
  %331 = cast(%var_249, dtype="float64") /* ty=Tensor[(8, 3, 11), float64] */;
  %332 = tan(%331) /* ty=Tensor[(8, 3, 11), float64] */;
  %333 = cast(%332, dtype="float64") /* ty=Tensor[(8, 3, 11), float64] */;
  %334 = cast(%var_270, dtype="bool") /* ty=Tensor[(8, 3, 11), bool] */;
  %335 = shape_of(%332, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(%332, dtype="bool") /* ty=Tensor[(8, 3, 11), bool] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %338 = sinh(%333) /* ty=Tensor[(8, 3, 11), float64] */;
  %339 = less(%336, %337) /* ty=Tensor[(8, 3, 11), bool] */;
  (%338, %339)
}

def @func_3632() -> (Tensor[(5, 8, 6), int64],) {
  %342 = fn () -> (Tensor[(5, 8, 6), int64],) {
    %340 = @func_2708() /* ty=(Tensor[(5, 8, 6), int64],) */;
    %341 = %340.0;
    (%341,)
  };
  %342() /* ty=(Tensor[(5, 8, 6), int64],) */
}

def @func_4524() -> (Tensor[(5, 8, 6), float32], Tensor[(77, 6), float32], Tensor[(1008), float64], Tensor[(6, 44), float64]) {
  @func_4522() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(77, 6), float32], Tensor[(1008), float64], Tensor[(6, 44), float64]) */
}

def @func_5847() -> Tensor[(5, 8, 6), float32] {
  @func_5845() /* ty=Tensor[(5, 8, 6), float32] */
}

def @func_707(%var_682: Tensor[(3, 15, 12), int8], %var_683: Tensor[(3, 15, 12), int8], %var_699: Tensor[(264), float64]) -> (Tensor[(3, 15, 12), bool], Tensor[(3, 15, 12), float64], Tensor[(8, 3, 11), float64], Tensor[(264), float64]) {
  %343 = cast(%var_683, dtype="bool") /* ty=Tensor[(3, 15, 12), bool] */;
  %344 = shape_of(%var_682, dtype="int32") /* ty=Tensor[(3), int32] */;
  %345 = cast(%var_682, dtype="bool") /* ty=Tensor[(3, 15, 12), bool] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %347 = cast(%var_683, dtype="float64") /* ty=Tensor[(3, 15, 12), float64] */;
  %348 = cast(%var_699, dtype="float64") /* ty=Tensor[(264), float64] */;
  %349 = cast(%var_699, dtype="float64") /* ty=Tensor[(264), float64] */;
  %350 = reshape(%348, newshape=[8, 3, 11]) /* ty=Tensor[(8, 3, 11), float64] */;
  %351 = reshape(%349, newshape=[8, 3, 11]) /* ty=Tensor[(8, 3, 11), float64] */;
  %352 = @func_274(%350, %351) /* ty=(Tensor[(8, 3, 11), float64], Tensor[(8, 3, 11), bool]) */;
  %353 = less(%345, %346) /* ty=Tensor[(3, 15, 12), bool] */;
  %354 = rsqrt(%347) /* ty=Tensor[(3, 15, 12), float64] */;
  %355 = %352.0;
  (%353, %354, %355, %var_699)
}

def @func_5517(%var_5511: Tensor[(288), uint64]) -> (Tensor[(540), int8], Tensor[(4, 60), uint32], Tensor[(64), int64], Tensor[(288), uint64], Tensor[(240), uint32], Tensor[(264), float64]) {
  %356 = @func_4131() /* ty=(Tensor[(540), int8],) */;
  %357 = cast(meta[relay.Constant][23] /* ty=Tensor[(64), int64] */, dtype="int64") /* ty=Tensor[(64), int64] */;
  %358 = cast(meta[relay.Constant][23] /* ty=Tensor[(64), int64] */, dtype="int64") /* ty=Tensor[(64), int64] */;
  %359 = cast(%var_5511, dtype="uint64") /* ty=Tensor[(288), uint64] */;
  %360 = cast(meta[relay.Constant][24] /* ty=Tensor[(240), uint32] */, dtype="uint32") /* ty=Tensor[(240), uint32] */;
  %361 = cast(meta[relay.Constant][23] /* ty=Tensor[(64), int64] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %362 = reshape(%357, newshape=[4, 8, 2]) /* ty=Tensor[(4, 8, 2), int64] */;
  %363 = reshape(%358, newshape=[4, 8, 2]) /* ty=Tensor[(4, 8, 2), int64] */;
  %364 = reshape(%359, newshape=[288]) /* ty=Tensor[(288), uint64] */;
  %365 = reshape(%360, newshape=[4, 60]) /* ty=Tensor[(4, 60), uint32] */;
  %366 = reshape(%361, newshape=[4, 8, 2]) /* ty=Tensor[(4, 8, 2), float32] */;
  %367 = @func_2159(%362, %363, %364, %365, %366) /* ty=(Tensor[(4, 8, 2), int64], Tensor[(4, 8, 2), float32], Tensor[(8, 30), uint32], Tensor[(288), uint64], Tensor[(4, 60), uint32], Tensor[(4, 8, 2), bool], Tensor[(12, 1, 4), float32], Tensor[(48), float32]) */;
  %368 = @func_3515() /* ty=(Tensor[(264), float64], Tensor[(5, 8, 6), float32]) */;
  %369 = %356.0;
  %370 = %367.4;
  %371 = %368.0;
  (%369, %370, meta[relay.Constant][23] /* ty=Tensor[(64), int64] */, %var_5511, meta[relay.Constant][24] /* ty=Tensor[(240), uint32] */, %371)
}

def @func_4133() -> (Tensor[(540), int8],) {
  @func_4131() /* ty=(Tensor[(540), int8],) */
}

def @func_4627(%var_4626: Tensor[(5, 8, 6), int64]) -> Tensor[(5, 8, 6), bool] {
  %378 = fn (%var_4616: Tensor[(5, 8, 6), int64]) -> Tensor[(5, 8, 6), bool] {
    %372 = @func_3838() /* ty=(Tensor[(264), float64], Tensor[(5, 8, 6), int64], Tensor[(5, 8, 6), float32]) */;
    %373 = %372.1;
    %374 = cast(%var_4616, dtype="bool") /* ty=Tensor[(5, 8, 6), bool] */;
    %375 = shape_of(%373, dtype="int32") /* ty=Tensor[(3), int32] */;
    %376 = cast(%373, dtype="bool") /* ty=Tensor[(5, 8, 6), bool] */;
    %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%376, %377) /* ty=Tensor[(5, 8, 6), bool] */
  };
  %378(%var_4626) /* ty=Tensor[(5, 8, 6), bool] */
}

def @func_5762(%var_5676: Tensor[(14, 10, 16), float64]) -> (Tensor[(14, 10, 16), bool], Tensor[(4, 60), uint32], Tensor[(288), uint64], Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), bool], Tensor[(14, 10, 16), float32]) {
  %379 = cast(%var_5676, dtype="bool") /* ty=Tensor[(14, 10, 16), bool] */;
  %380 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(14, 10, 16), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %381 = cast(meta[relay.Constant][25] /* ty=Tensor[(14, 10, 16), float64] */, dtype="bool") /* ty=Tensor[(14, 10, 16), bool] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %383 = cast(meta[relay.Constant][26] /* ty=Tensor[(288), uint64] */, dtype="uint64") /* ty=Tensor[(288), uint64] */;
  %384 = reshape(%383, newshape=[288]) /* ty=Tensor[(288), uint64] */;
  %385 = @func_5517(%384) /* ty=(Tensor[(540), int8], Tensor[(4, 60), uint32], Tensor[(64), int64], Tensor[(288), uint64], Tensor[(240), uint32], Tensor[(264), float64]) */;
  %386 = @func_3003() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float32]) */;
  %387 = %385.1;
  %388 = cast(%387, dtype="int64") /* ty=Tensor[(4, 60), int64] */;
  %389 = reshape(%388, newshape=[5, 8, 6]) /* ty=Tensor[(5, 8, 6), int64] */;
  %390 = @func_3168(%389) /* ty=(Tensor[(5, 8, 6), bool], Tensor[(5, 8, 6), bool], Tensor[(8, 30), uint32], Tensor[(288), uint64]) */;
  %391 = cast(meta[relay.Constant][25] /* ty=Tensor[(14, 10, 16), float64] */, dtype="float32") /* ty=Tensor[(14, 10, 16), float32] */;
  %392 = rsqrt(%391) /* ty=Tensor[(14, 10, 16), float32] */;
  %393 = cast(%392, dtype="float32") /* ty=Tensor[(14, 10, 16), float32] */;
  %394 = less_equal(%381, %382) /* ty=Tensor[(14, 10, 16), bool] */;
  %395 = %386.1;
  %396 = %390.1;
  %397 = log(%393) /* ty=Tensor[(14, 10, 16), float32] */;
  (%394, %387, meta[relay.Constant][26] /* ty=Tensor[(288), uint64] */, %395, %396, %397)
}

def @func_4348(%var_4345: Tensor[(540), int8], %var_4346: Tensor[(264), float64], %var_4347: Tensor[(8, 3, 11), float64]) -> (Tensor[(540), int8], Tensor[(264), float64], Tensor[(8, 3, 11), uint8], Tensor[(9, 4, 3), int16], Tensor[(108), int16], Tensor[(2400), float32], Tensor[(2400), float32], Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), uint64]) {
  %429 = fn (%var_4286: Tensor[(540), int8], %var_4287: Tensor[(264), float64], %var_4289: Tensor[(8, 3, 11), float64]) -> (Tensor[(540), int8], Tensor[(264), float64], Tensor[(8, 3, 11), uint8], Tensor[(9, 4, 3), int16], Tensor[(108), int16], Tensor[(2400), float32], Tensor[(2400), float32], Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), uint64]) {
    %398 = cast(%var_4286, dtype="int8") /* ty=Tensor[(540), int8] */;
    %399 = cast(%var_4287, dtype="float64") /* ty=Tensor[(264), float64] */;
    %400 = reshape(%398, newshape=[540]) /* ty=Tensor[(540), int8] */;
    %401 = reshape(%399, newshape=[264]) /* ty=Tensor[(264), float64] */;
    %402 = @func_1288(%400, %401) /* ty=(Tensor[(3, 12, 9), float32], Tensor[(8, 3, 11), float64], Tensor[(540), int8], Tensor[(264), float64]) */;
    %403 = %402.1;
    %404 = cast(%var_4289, dtype="uint8") /* ty=Tensor[(8, 3, 11), uint8] */;
    %405 = shape_of(%403, dtype="int32") /* ty=Tensor[(3), int32] */;
    %406 = cast(%403, dtype="uint8") /* ty=Tensor[(8, 3, 11), uint8] */;
    %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %408 = cast(meta[relay.Constant][27] /* ty=Tensor[(108), int16] */, dtype="int16") /* ty=Tensor[(108), int16] */;
    %409 = cast(meta[relay.Constant][27] /* ty=Tensor[(108), int16] */, dtype="int16") /* ty=Tensor[(108), int16] */;
    %410 = reshape(%408, newshape=[9, 4, 3]) /* ty=Tensor[(9, 4, 3), int16] */;
    %411 = reshape(%409, newshape=[9, 4, 3]) /* ty=Tensor[(9, 4, 3), int16] */;
    %412 = @func_2012(%410, %411) /* ty=(Tensor[(9, 4, 3), int16],) */;
    %413 = cast(meta[relay.Constant][28] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
    %414 = reshape(%413, newshape=[2400]) /* ty=Tensor[(2400), float32] */;
    %415 = @func_2617(%414) /* ty=(Tensor[(5, 8, 6), float32], Tensor[(10, 16, 15), float64], Tensor[(2400), float32]) */;
    %416 = @func_2980() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), int32], Tensor[(540), int8], Tensor[(264), float64], Tensor[(5, 8, 6), float64]) */;
    %417 = @func_3093() /* ty=(Tensor[(5, 8, 6), int64],) */;
    %418 = %417.0;
    %419 = @func_2484() /* ty=Tensor[(5, 8, 6), float32] */;
    %420 = cast(%419, dtype="uint64") /* ty=Tensor[(5, 8, 6), uint64] */;
    %421 = shape_of(%418, dtype="int32") /* ty=Tensor[(3), int32] */;
    %422 = cast(%418, dtype="uint64") /* ty=Tensor[(5, 8, 6), uint64] */;
    %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %424 = logical_xor(%406, %407) /* ty=Tensor[(8, 3, 11), uint8] */;
    %425 = %412.0;
    %426 = %415.2;
    %427 = %416.0;
    %428 = logical_xor(%422, %423) /* ty=Tensor[(5, 8, 6), uint64] */;
    (%var_4286, %var_4287, %424, %425, meta[relay.Constant][27] /* ty=Tensor[(108), int16] */, %426, meta[relay.Constant][28] /* ty=Tensor[(2400), float32] */, %427, %428)
  };
  %429(%var_4345, %var_4346, %var_4347) /* ty=(Tensor[(540), int8], Tensor[(264), float64], Tensor[(8, 3, 11), uint8], Tensor[(9, 4, 3), int16], Tensor[(108), int16], Tensor[(2400), float32], Tensor[(2400), float32], Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), uint64]) */
}

def @func_5479() -> (Tensor[(6, 44), float64],) {
  %432 = fn () -> (Tensor[(6, 44), float64],) {
    %430 = @func_4522() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(77, 6), float32], Tensor[(1008), float64], Tensor[(6, 44), float64]) */;
    %431 = %430.3;
    (%431,)
  };
  %432() /* ty=(Tensor[(6, 44), float64],) */
}

def @func_4462() -> Tensor[(5, 8, 6), float32] {
  %433 = @func_3982() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), int32], Tensor[(5, 8, 6), float32], Tensor[(7, 11, 15), int16]) */;
  %433.0
}

def @func_2620(%var_2618: Tensor[(2400), float32]) -> (Tensor[(5, 8, 6), float32], Tensor[(10, 16, 15), float64], Tensor[(2400), float32]) {
  @func_2617(%var_2618) /* ty=(Tensor[(5, 8, 6), float32], Tensor[(10, 16, 15), float64], Tensor[(2400), float32]) */
}

def @func_3983() -> (Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), int32], Tensor[(5, 8, 6), float32], Tensor[(7, 11, 15), int16]) {
  %444 = fn () -> (Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), int32], Tensor[(5, 8, 6), float32], Tensor[(7, 11, 15), int16]) {
    %434 = @func_3093() /* ty=(Tensor[(5, 8, 6), int64],) */;
    %435 = %434.0;
    %436 = cast(%435, dtype="float32") /* ty=Tensor[(5, 8, 6), float32] */;
    %437 = @func_3295() /* ty=(Tensor[(5, 8, 6), int32], Tensor[(7, 11, 15), int16], Tensor[(1, 1155), int16], Tensor[(5, 8, 6), float32]) */;
    %438 = @func_3003() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float32]) */;
    %439 = @func_3295() /* ty=(Tensor[(5, 8, 6), int32], Tensor[(7, 11, 15), int16], Tensor[(1, 1155), int16], Tensor[(5, 8, 6), float32]) */;
    %440 = atanh(%436) /* ty=Tensor[(5, 8, 6), float32] */;
    %441 = %437.0;
    %442 = %438.1;
    %443 = %439.1;
    (%440, %441, %442, %443)
  };
  %444() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), int32], Tensor[(5, 8, 6), float32], Tensor[(7, 11, 15), int16]) */
}

def @func_3168(%var_3151: Tensor[(5, 8, 6), int64]) -> (Tensor[(5, 8, 6), bool], Tensor[(5, 8, 6), bool], Tensor[(8, 30), uint32], Tensor[(288), uint64]) {
  %445 = @func_2708() /* ty=(Tensor[(5, 8, 6), int64],) */;
  %446 = %445.0;
  %447 = cast(%var_3151, dtype="bool") /* ty=Tensor[(5, 8, 6), bool] */;
  %448 = shape_of(%446, dtype="int32") /* ty=Tensor[(3), int32] */;
  %449 = cast(%446, dtype="bool") /* ty=Tensor[(5, 8, 6), bool] */;
  %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %451 = cast(%var_3151, dtype="bool") /* ty=Tensor[(5, 8, 6), bool] */;
  %452 = shape_of(%446, dtype="int32") /* ty=Tensor[(3), int32] */;
  %453 = cast(%446, dtype="bool") /* ty=Tensor[(5, 8, 6), bool] */;
  %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %455 = cast(meta[relay.Constant][29] /* ty=Tensor[(288), uint64] */, dtype="uint64") /* ty=Tensor[(288), uint64] */;
  %456 = greater(%453, %454) /* ty=Tensor[(5, 8, 6), bool] */;
  %457 = cast(%456, dtype="uint32") /* ty=Tensor[(5, 8, 6), uint32] */;
  %458 = reshape(%455, newshape=[6, 8, 6]) /* ty=Tensor[(6, 8, 6), uint64] */;
  %459 = reshape(%457, newshape=[8, 30]) /* ty=Tensor[(8, 30), uint32] */;
  %460 = @func_537(%458, %459) /* ty=(Tensor[(6, 8, 6), float64], Tensor[(8, 3, 11), bool], Tensor[(264), float64], Tensor[(264), float64], Tensor[(8, 30), uint32]) */;
  %461 = less_equal(%449, %450) /* ty=Tensor[(5, 8, 6), bool] */;
  %462 = %460.4;
  (%461, %456, %462, meta[relay.Constant][29] /* ty=Tensor[(288), uint64] */)
}

def @func_2015(%var_2013: Tensor[(9, 4, 3), int16], %var_2014: Tensor[(9, 4, 3), int16]) -> (Tensor[(9, 4, 3), int16],) {
  %468 = fn (%var_2007: Tensor[(9, 4, 3), int16], %var_2008: Tensor[(9, 4, 3), int16]) -> (Tensor[(9, 4, 3), int16],) {
    %463 = cast(%var_2008, dtype="int16") /* ty=Tensor[(9, 4, 3), int16] */;
    %464 = shape_of(%var_2007, dtype="int32") /* ty=Tensor[(3), int32] */;
    %465 = cast(%var_2007, dtype="int16") /* ty=Tensor[(9, 4, 3), int16] */;
    %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %467 = logical_xor(%465, %466) /* ty=Tensor[(9, 4, 3), int16] */;
    (%467,)
  };
  %468(%var_2013, %var_2014) /* ty=(Tensor[(9, 4, 3), int16],) */
}

def @func_5671(%var_5669: Tensor[(130, 6), int16]) -> (Tensor[(5, 8, 6), int64], Tensor[(462), float32], Tensor[(130, 6), int16], Tensor[(3, 5), bool], Tensor[(15), int64]) {
  @func_5668(%var_5669) /* ty=(Tensor[(5, 8, 6), int64], Tensor[(462), float32], Tensor[(130, 6), int16], Tensor[(3, 5), bool], Tensor[(15), int64]) */
}

def @func_2486() -> Tensor[(5, 8, 6), float32] {
  @func_2484() /* ty=Tensor[(5, 8, 6), float32] */
}

def @func_5814() -> (Tensor[(5, 8, 6), float32],) {
  @func_5812() /* ty=(Tensor[(5, 8, 6), float32],) */
}

def @func_4116(%var_4115: Tensor[(264), float64]) -> (Tensor[(5, 8, 6), int64], Tensor[(8, 3, 11), float64], Tensor[(264), float64], Tensor[(7, 11, 15), bool]) {
  %486 = fn (%var_4074: Tensor[(264), float64]) -> (Tensor[(5, 8, 6), int64], Tensor[(8, 3, 11), float64], Tensor[(264), float64], Tensor[(7, 11, 15), bool]) {
    %469 = @func_3838() /* ty=(Tensor[(264), float64], Tensor[(5, 8, 6), int64], Tensor[(5, 8, 6), float32]) */;
    %470 = cast(%var_4074, dtype="float64") /* ty=Tensor[(264), float64] */;
    %471 = cast(%var_4074, dtype="float64") /* ty=Tensor[(264), float64] */;
    %472 = reshape(%470, newshape=[8, 3, 11]) /* ty=Tensor[(8, 3, 11), float64] */;
    %473 = reshape(%471, newshape=[8, 3, 11]) /* ty=Tensor[(8, 3, 11), float64] */;
    %474 = @func_274(%472, %473) /* ty=(Tensor[(8, 3, 11), float64], Tensor[(8, 3, 11), bool]) */;
    %475 = @func_3982() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), int32], Tensor[(5, 8, 6), float32], Tensor[(7, 11, 15), int16]) */;
    %476 = %475.3;
    %477 = cast(%476, dtype="float64") /* ty=Tensor[(7, 11, 15), float64] */;
    %478 = atanh(%477) /* ty=Tensor[(7, 11, 15), float64] */;
    %479 = cast(%476, dtype="bool") /* ty=Tensor[(7, 11, 15), bool] */;
    %480 = shape_of(%478, dtype="int32") /* ty=Tensor[(3), int32] */;
    %481 = cast(%478, dtype="bool") /* ty=Tensor[(7, 11, 15), bool] */;
    %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %483 = %469.1;
    %484 = %474.0;
    %485 = logical_and(%481, %482) /* ty=Tensor[(7, 11, 15), bool] */;
    (%483, %484, %var_4074, %485)
  };
  %486(%var_4115) /* ty=(Tensor[(5, 8, 6), int64], Tensor[(8, 3, 11), float64], Tensor[(264), float64], Tensor[(7, 11, 15), bool]) */
}

def @func_3095() -> (Tensor[(5, 8, 6), int64],) {
  @func_3093() /* ty=(Tensor[(5, 8, 6), int64],) */
}

def @func_4954() -> (Tensor[(5, 8, 6), float32], Tensor[(264), float64]) {
  %487 = @func_2722() /* ty=Tensor[(5, 8, 6), float32] */;
  %488 = @func_3380() /* ty=Tensor[(264), float64] */;
  (%487, %488)
}

def @func_322(%var_283: Tensor[(5, 12, 4), uint32], %var_308: Tensor[(264), float64]) -> (Tensor[(5, 12, 4), float32], Tensor[(8, 3, 11), bool], Tensor[(264), float64]) {
  %489 = cast(meta[relay.Constant][30] /* ty=Tensor[(5, 12, 4), uint32] */, dtype="uint32") /* ty=Tensor[(5, 12, 4), uint32] */;
  %490 = shape_of(%var_283, dtype="int32") /* ty=Tensor[(3), int32] */;
  %491 = cast(%var_283, dtype="uint32") /* ty=Tensor[(5, 12, 4), uint32] */;
  %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %493 = logical_xor(%491, %492) /* ty=Tensor[(5, 12, 4), uint32] */;
  %494 = cast(%var_283, dtype="float32") /* ty=Tensor[(5, 12, 4), float32] */;
  %495 = shape_of(%493, dtype="int32") /* ty=Tensor[(3), int32] */;
  %496 = cast(%493, dtype="float32") /* ty=Tensor[(5, 12, 4), float32] */;
  %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %498 = cast(%var_308, dtype="float64") /* ty=Tensor[(264), float64] */;
  %499 = cast(%var_308, dtype="float64") /* ty=Tensor[(264), float64] */;
  %500 = reshape(%498, newshape=[8, 3, 11]) /* ty=Tensor[(8, 3, 11), float64] */;
  %501 = reshape(%499, newshape=[8, 3, 11]) /* ty=Tensor[(8, 3, 11), float64] */;
  %502 = @func_274(%500, %501) /* ty=(Tensor[(8, 3, 11), float64], Tensor[(8, 3, 11), bool]) */;
  %503 = minimum(%496, %497) /* ty=Tensor[(5, 12, 4), float32] */;
  %504 = %502.1;
  (%503, %504, %var_308)
}

def @func_5198(%var_5185: Tensor[(15), int64]) -> (Tensor[(5, 8, 6), int64], Tensor[(3, 5), bool], Tensor[(15), int64]) {
  %505 = cast(%var_5185, dtype="int64") /* ty=Tensor[(15), int64] */;
  %506 = cast(%var_5185, dtype="int64") /* ty=Tensor[(15), int64] */;
  %507 = reshape(%505, newshape=[3, 5]) /* ty=Tensor[(3, 5), int64] */;
  %508 = reshape(%506, newshape=[3, 5]) /* ty=Tensor[(3, 5), int64] */;
  %509 = @func_4024(%507, %508) /* ty=(Tensor[(3, 5), bool],) */;
  %510 = @func_4862() /* ty=Tensor[(5, 8, 6), int64] */;
  %511 = %509.0;
  (%510, %511, %var_5185)
}

def @func_6354(%var_6352: Tensor[(780), int16], %var_6353: Tensor[(8, 14, 9), float32]) -> (Tensor[(1, 14, 9), float32], Tensor[(462), float32], Tensor[(780), int16], Tensor[(8, 14, 9), int32]) {
  %521 = fn (%var_6339: Tensor[(780), int16], %var_6345: Tensor[(8, 14, 9), float32]) -> (Tensor[(1, 14, 9), float32], Tensor[(462), float32], Tensor[(780), int16], Tensor[(8, 14, 9), int32]) {
    %512 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 14, 9), float32] */, dtype="float32") /* ty=Tensor[(1, 14, 9), float32] */;
    %513 = cast(%var_6339, dtype="int16") /* ty=Tensor[(780), int16] */;
    %514 = reshape(%513, newshape=[10, 13, 6]) /* ty=Tensor[(10, 13, 6), int16] */;
    %515 = @func_5005(%514) /* ty=(Tensor[(5, 8, 6), float32], Tensor[(10, 13, 6), uint16], Tensor[(7, 6, 11), float32], Tensor[(462), float32]) */;
    %516 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 14, 9), float32] */, dtype="int32") /* ty=Tensor[(1, 14, 9), int32] */;
    %517 = cast(%var_6345, dtype="int32") /* ty=Tensor[(8, 14, 9), int32] */;
    %518 = acosh(%512) /* ty=Tensor[(1, 14, 9), float32] */;
    %519 = %515.3;
    %520 = bitwise_xor(%516, %517) /* ty=Tensor[(8, 14, 9), int32] */;
    (%518, %519, %var_6339, %520)
  };
  %521(%var_6352, %var_6353) /* ty=(Tensor[(1, 14, 9), float32], Tensor[(462), float32], Tensor[(780), int16], Tensor[(8, 14, 9), int32]) */
}

def @func_5845() -> Tensor[(5, 8, 6), float32] {
  %522 = @func_5812() /* ty=(Tensor[(5, 8, 6), float32],) */;
  %522.0
}

def @func_3764(%var_3761: Tensor[(14, 2, 5), float32], %var_3762: Tensor[(5, 8, 6), float32], %var_3763: Tensor[(560), int32]) -> (Tensor[(14, 2, 5), uint64], Tensor[(5, 8, 6), bool], Tensor[(10, 7, 8), bool], Tensor[(560), int32], Tensor[(12, 1, 4), float32], Tensor[(48), float32]) {
  @func_3759(%var_3761, %var_3762, %var_3763) /* ty=(Tensor[(14, 2, 5), uint64], Tensor[(5, 8, 6), bool], Tensor[(10, 7, 8), bool], Tensor[(560), int32], Tensor[(12, 1, 4), float32], Tensor[(48), float32]) */
}

def @func_4522() -> (Tensor[(5, 8, 6), float32], Tensor[(77, 6), float32], Tensor[(1008), float64], Tensor[(6, 44), float64]) {
  %523 = @func_4426() /* ty=(Tensor[(1, 10, 15), float64], Tensor[(5, 8, 6), float32]) */;
  %524 = cast(meta[relay.Constant][32] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %525 = cast(meta[relay.Constant][33] /* ty=Tensor[(6, 44), float64] */, dtype="float64") /* ty=Tensor[(6, 44), float64] */;
  %526 = reshape(%524, newshape=[1008]) /* ty=Tensor[(1008), float64] */;
  %527 = reshape(%525, newshape=[264]) /* ty=Tensor[(264), float64] */;
  %528 = @func_2396(%526, %527) /* ty=(Tensor[(7, 9, 16), float64], Tensor[(1008), float64], Tensor[(120), uint32], Tensor[(8, 3, 11), float64], Tensor[(540), int8], Tensor[(264), float64], Tensor[(3, 15, 12), float64], Tensor[(7, 6, 11), float32], Tensor[(77, 6), float32], Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float32]) */;
  %529 = %523.1;
  %530 = %528.8;
  (%529, %530, meta[relay.Constant][32] /* ty=Tensor[(1008), float64] */, meta[relay.Constant][33] /* ty=Tensor[(6, 44), float64] */)
}

def @func_5765(%var_5763: Tensor[(14, 10, 16), float64]) -> (Tensor[(14, 10, 16), bool], Tensor[(4, 60), uint32], Tensor[(288), uint64], Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), bool], Tensor[(14, 10, 16), float32]) {
  @func_5762(%var_5763) /* ty=(Tensor[(14, 10, 16), bool], Tensor[(4, 60), uint32], Tensor[(288), uint64], Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), bool], Tensor[(14, 10, 16), float32]) */
}

def @func_4916(%var_4896: Tensor[(5, 8, 6), float32]) -> (Tensor[(5, 8, 6), bool], Tensor[(5, 8, 6), float64], Tensor[(5, 8, 6), float32]) {
  %531 = @func_3295() /* ty=(Tensor[(5, 8, 6), int32], Tensor[(7, 11, 15), int16], Tensor[(1, 1155), int16], Tensor[(5, 8, 6), float32]) */;
  %532 = %531.3;
  %533 = cast(%var_4896, dtype="bool") /* ty=Tensor[(5, 8, 6), bool] */;
  %534 = shape_of(%532, dtype="int32") /* ty=Tensor[(3), int32] */;
  %535 = cast(%532, dtype="bool") /* ty=Tensor[(5, 8, 6), bool] */;
  %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %537 = cast(%532, dtype="float64") /* ty=Tensor[(5, 8, 6), float64] */;
  %538 = @func_3003() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float32]) */;
  %539 = greater_equal(%535, %536) /* ty=Tensor[(5, 8, 6), bool] */;
  %540 = sin(%537) /* ty=Tensor[(5, 8, 6), float64] */;
  %541 = %538.1;
  (%539, %540, %541)
}

def @func_1438(%var_1436: Tensor[(10, 13, 14), float32], %var_1437: Tensor[(10, 13, 14), float32]) -> (Tensor[(10, 13, 14), float64], Tensor[(10, 13, 14), int32]) {
  %560 = fn (%var_1388: Tensor[(10, 13, 14), float32], %var_1428: Tensor[(10, 13, 14), float32]) -> (Tensor[(10, 13, 14), float64], Tensor[(10, 13, 14), int32]) {
    %542 = cast(%var_1388, dtype="float64") /* ty=Tensor[(10, 13, 14), float64] */;
    %543 = cast(%var_1388, dtype="float32") /* ty=Tensor[(10, 13, 14), float32] */;
    %544 = atanh(%543) /* ty=Tensor[(10, 13, 14), float32] */;
    %545 = cast(%var_1388, dtype="bool") /* ty=Tensor[(10, 13, 14), bool] */;
    %546 = shape_of(%544, dtype="int32") /* ty=Tensor[(3), int32] */;
    %547 = cast(%544, dtype="bool") /* ty=Tensor[(10, 13, 14), bool] */;
    %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %549 = logical_or(%547, %548) /* ty=Tensor[(10, 13, 14), bool] */;
    %550 = cast(%549, dtype="float32") /* ty=Tensor[(10, 13, 14), float32] */;
    %551 = log(%550) /* ty=Tensor[(10, 13, 14), float32] */;
    %552 = cast(%551, dtype="float32") /* ty=Tensor[(10, 13, 14), float32] */;
    %553 = cosh(%552) /* ty=Tensor[(10, 13, 14), float32] */;
    %554 = cast(%var_1428, dtype="int32") /* ty=Tensor[(10, 13, 14), int32] */;
    %555 = shape_of(%553, dtype="int32") /* ty=Tensor[(3), int32] */;
    %556 = cast(%553, dtype="int32") /* ty=Tensor[(10, 13, 14), int32] */;
    %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %558 = acos(%542) /* ty=Tensor[(10, 13, 14), float64] */;
    %559 = bitwise_and(%556, %557) /* ty=Tensor[(10, 13, 14), int32] */;
    (%558, %559)
  };
  %560(%var_1436, %var_1437) /* ty=(Tensor[(10, 13, 14), float64], Tensor[(10, 13, 14), int32]) */
}

def @func_5626() -> (Tensor[(5, 8, 6), int64], Tensor[(5, 8, 6), bool], Tensor[(5, 8, 6), int32], Tensor[(264), float64]) {
  %570 = fn () -> (Tensor[(5, 8, 6), int64], Tensor[(5, 8, 6), bool], Tensor[(5, 8, 6), int32], Tensor[(264), float64]) {
    %561 = @func_3838() /* ty=(Tensor[(264), float64], Tensor[(5, 8, 6), int64], Tensor[(5, 8, 6), float32]) */;
    %562 = %561.1;
    %563 = cast(%562, dtype="float32") /* ty=Tensor[(5, 8, 6), float32] */;
    %564 = reshape(%563, newshape=[5, 8, 6]) /* ty=Tensor[(5, 8, 6), float32] */;
    %565 = @func_4916(%564) /* ty=(Tensor[(5, 8, 6), bool], Tensor[(5, 8, 6), float64], Tensor[(5, 8, 6), float32]) */;
    %566 = @func_2980() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), int32], Tensor[(540), int8], Tensor[(264), float64], Tensor[(5, 8, 6), float64]) */;
    %567 = %565.0;
    %568 = %566.1;
    %569 = @func_4564() /* ty=Tensor[(264), float64] */;
    (%562, %567, %568, %569)
  };
  %570() /* ty=(Tensor[(5, 8, 6), int64], Tensor[(5, 8, 6), bool], Tensor[(5, 8, 6), int32], Tensor[(264), float64]) */
}

def @func_1351(%var_1350: Tensor[(7, 11, 15), int16]) -> Tensor[(7, 11, 15), int16] {
  %575 = fn (%var_1344: Tensor[(7, 11, 15), int16]) -> Tensor[(7, 11, 15), int16] {
    %571 = cast(%var_1344, dtype="int16") /* ty=Tensor[(7, 11, 15), int16] */;
    %572 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(7, 11, 15), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %573 = cast(meta[relay.Constant][34] /* ty=Tensor[(7, 11, 15), int16] */, dtype="int16") /* ty=Tensor[(7, 11, 15), int16] */;
    %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    bitwise_xor(%573, %574) /* ty=Tensor[(7, 11, 15), int16] */
  };
  %575(%var_1350) /* ty=Tensor[(7, 11, 15), int16] */
}

def @func_3019() -> (Tensor[(5, 8, 6), float32],) {
  %576 = @func_2249() /* ty=(Tensor[(5, 8, 6), float32],) */;
  %577 = %576.0;
  (%577,)
}

def @func_3380() -> Tensor[(264), float64] {
  %578 = @func_2980() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), int32], Tensor[(540), int8], Tensor[(264), float64], Tensor[(5, 8, 6), float64]) */;
  %578.3
}

def @func_5212() -> (Tensor[(264), float64], Tensor[(5, 8, 6), int64]) {
  %579 = @func_3515() /* ty=(Tensor[(264), float64], Tensor[(5, 8, 6), float32]) */;
  %580 = %579.0;
  %581 = @func_4862() /* ty=Tensor[(5, 8, 6), int64] */;
  (%580, %581)
}

def @func_1288(%var_1281: Tensor[(540), int8], %var_1282: Tensor[(264), float64]) -> (Tensor[(3, 12, 9), float32], Tensor[(8, 3, 11), float64], Tensor[(540), int8], Tensor[(264), float64]) {
  %582 = cast(meta[relay.Constant][35] /* ty=Tensor[(3, 12, 9), float32] */, dtype="float32") /* ty=Tensor[(3, 12, 9), float32] */;
  %583 = exp(%582) /* ty=Tensor[(3, 12, 9), float32] */;
  %584 = cast(meta[relay.Constant][35] /* ty=Tensor[(3, 12, 9), float32] */, dtype="float32") /* ty=Tensor[(3, 12, 9), float32] */;
  %585 = shape_of(%583, dtype="int32") /* ty=Tensor[(3), int32] */;
  %586 = cast(%583, dtype="float32") /* ty=Tensor[(3, 12, 9), float32] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %588 = cast(%var_1281, dtype="int8") /* ty=Tensor[(540), int8] */;
  %589 = cast(%var_1281, dtype="int8") /* ty=Tensor[(540), int8] */;
  %590 = cast(%var_1282, dtype="float64") /* ty=Tensor[(264), float64] */;
  %591 = reshape(%588, newshape=[3, 15, 12]) /* ty=Tensor[(3, 15, 12), int8] */;
  %592 = reshape(%589, newshape=[3, 15, 12]) /* ty=Tensor[(3, 15, 12), int8] */;
  %593 = reshape(%590, newshape=[264]) /* ty=Tensor[(264), float64] */;
  %594 = @func_707(%591, %592, %593) /* ty=(Tensor[(3, 15, 12), bool], Tensor[(3, 15, 12), float64], Tensor[(8, 3, 11), float64], Tensor[(264), float64]) */;
  %595 = power(%586, %587) /* ty=Tensor[(3, 12, 9), float32] */;
  %596 = %594.2;
  (%595, %596, %var_1281, %var_1282)
}

def @func_4749(%var_4747: Tensor[(160), int32]) -> (Tensor[(5, 8, 6), int64], Tensor[(8, 5, 4), int32], Tensor[(160), int32]) {
  @func_4746(%var_4747) /* ty=(Tensor[(5, 8, 6), int64], Tensor[(8, 5, 4), int32], Tensor[(160), int32]) */
}

def @func_5786() -> Tensor[(5, 8, 6), float32] {
  @func_5784() /* ty=Tensor[(5, 8, 6), float32] */
}

def @func_3004() -> (Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float32]) {
  %602 = fn () -> (Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float32]) {
    %597 = @func_2980() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), int32], Tensor[(540), int8], Tensor[(264), float64], Tensor[(5, 8, 6), float64]) */;
    %598 = %597.1;
    %599 = cast(%598, dtype="float32") /* ty=Tensor[(5, 8, 6), float32] */;
    %600 = @func_2722() /* ty=Tensor[(5, 8, 6), float32] */;
    %601 = acosh(%599) /* ty=Tensor[(5, 8, 6), float32] */;
    (%600, %601)
  };
  %602() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float32]) */
}

def @func_4864() -> Tensor[(5, 8, 6), int64] {
  @func_4862() /* ty=Tensor[(5, 8, 6), int64] */
}

def @func_5898(%var_5880: Tensor[(5, 8, 6), float32], %var_5887: Tensor[(1008), float64], %var_5889: Tensor[(132, 24), float64], %var_5892: Tensor[(120), uint32], %var_5893: Tensor[(900, 2), uint32], %var_5894: Tensor[(560), int32]) -> (Tensor[(5, 8, 6), uint16], Tensor[(5, 8, 6), float32], Tensor[(1008), float64], Tensor[(264), float64], Tensor[(132, 24), float64], Tensor[(560), int32], Tensor[(120), uint32], Tensor[(900, 2), uint32], Tensor[(560), int32]) {
  %603 = @func_3515() /* ty=(Tensor[(264), float64], Tensor[(5, 8, 6), float32]) */;
  %604 = %603.1;
  %605 = cast(%var_5880, dtype="uint16") /* ty=Tensor[(5, 8, 6), uint16] */;
  %606 = shape_of(%604, dtype="int32") /* ty=Tensor[(3), int32] */;
  %607 = cast(%604, dtype="uint16") /* ty=Tensor[(5, 8, 6), uint16] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %609 = cast(%var_5887, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %610 = cast(meta[relay.Constant][36] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
  %611 = cast(%var_5889, dtype="float64") /* ty=Tensor[(132, 24), float64] */;
  %612 = reshape(%609, newshape=[1008]) /* ty=Tensor[(1008), float64] */;
  %613 = reshape(%610, newshape=[1, 264]) /* ty=Tensor[(1, 264), float64] */;
  %614 = reshape(%611, newshape=[12, 264]) /* ty=Tensor[(12, 264), float64] */;
  %615 = @func_2793(%612, %613, %614) /* ty=(Tensor[(5, 8, 6), float32], Tensor[(1008), float64], Tensor[(12, 264), uint16], Tensor[(5, 8, 6), float64]) */;
  %616 = cast(%var_5892, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %617 = cast(%var_5893, dtype="uint32") /* ty=Tensor[(900, 2), uint32] */;
  %618 = cast(%var_5894, dtype="int32") /* ty=Tensor[(560), int32] */;
  %619 = cast(meta[relay.Constant][36] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
  %620 = reshape(%616, newshape=[120]) /* ty=Tensor[(120), uint32] */;
  %621 = reshape(%617, newshape=[1800]) /* ty=Tensor[(1800), uint32] */;
  %622 = reshape(%618, newshape=[560, 1]) /* ty=Tensor[(560, 1), int32] */;
  %623 = reshape(%619, newshape=[264]) /* ty=Tensor[(264), float64] */;
  %624 = @func_5393(%620, %621, %622, %623) /* ty=(Tensor[(5, 8, 6), int64], Tensor[(120), uint32], Tensor[(12, 15, 10), bool], Tensor[(560), int32], Tensor[(560, 1), int32], Tensor[(7, 11, 15), bool], Tensor[(264), float64]) */;
  %625 = bitwise_xor(%607, %608) /* ty=Tensor[(5, 8, 6), uint16] */;
  %626 = %615.0;
  %627 = %624.3;
  (%625, %626, %var_5887, meta[relay.Constant][36] /* ty=Tensor[(264), float64] */, %var_5889, %627, %var_5892, %var_5893, %var_5894)
}

def @func_3759(%var_3693: Tensor[(14, 2, 5), float32], %var_3716: Tensor[(5, 8, 6), float32], %var_3737: Tensor[(560), int32]) -> (Tensor[(14, 2, 5), uint64], Tensor[(5, 8, 6), bool], Tensor[(10, 7, 8), bool], Tensor[(560), int32], Tensor[(12, 1, 4), float32], Tensor[(48), float32]) {
  %628 = cast(%var_3693, dtype="float32") /* ty=Tensor[(14, 2, 5), float32] */;
  %629 = sinh(%628) /* ty=Tensor[(14, 2, 5), float32] */;
  %630 = cast(%629, dtype="float64") /* ty=Tensor[(14, 2, 5), float64] */;
  %631 = asinh(%630) /* ty=Tensor[(14, 2, 5), float64] */;
  %632 = cast(%629, dtype="uint64") /* ty=Tensor[(14, 2, 5), uint64] */;
  %633 = shape_of(%631, dtype="int32") /* ty=Tensor[(3), int32] */;
  %634 = cast(%631, dtype="uint64") /* ty=Tensor[(14, 2, 5), uint64] */;
  %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %636 = @func_2484() /* ty=Tensor[(5, 8, 6), float32] */;
  %637 = cast(%var_3716, dtype="bool") /* ty=Tensor[(5, 8, 6), bool] */;
  %638 = shape_of(%636, dtype="int32") /* ty=Tensor[(3), int32] */;
  %639 = cast(%636, dtype="bool") /* ty=Tensor[(5, 8, 6), bool] */;
  %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %641 = cast(%var_3737, dtype="int32") /* ty=Tensor[(560), int32] */;
  %642 = reshape(%641, newshape=[560]) /* ty=Tensor[(560), int32] */;
  %643 = @func_2510(%642) /* ty=(Tensor[(5, 8, 6), float64], Tensor[(10, 7, 8), bool], Tensor[(560), int32]) */;
  %644 = cast(meta[relay.Constant][37] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %645 = reshape(%644, newshape=[12, 1, 4]) /* ty=Tensor[(12, 1, 4), float32] */;
  %646 = add(%634, %635) /* ty=Tensor[(14, 2, 5), uint64] */;
  %647 = not_equal(%639, %640) /* ty=Tensor[(5, 8, 6), bool] */;
  %648 = %643.1;
  %649 = @func_1684(%645) /* ty=Tensor[(12, 1, 4), float32] */;
  (%646, %647, %648, %var_3737, %649, meta[relay.Constant][37] /* ty=Tensor[(48), float32] */)
}

def @func_2722() -> Tensor[(5, 8, 6), float32] {
  @func_2484() /* ty=Tensor[(5, 8, 6), float32] */
}

def @func_4919(%var_4917: Tensor[(5, 8, 6), float32]) -> (Tensor[(5, 8, 6), bool], Tensor[(5, 8, 6), float64], Tensor[(5, 8, 6), float32]) {
  @func_4916(%var_4917) /* ty=(Tensor[(5, 8, 6), bool], Tensor[(5, 8, 6), float64], Tensor[(5, 8, 6), float32]) */
}

def @func_1292(%var_1290: Tensor[(540), int8], %var_1291: Tensor[(264), float64]) -> (Tensor[(3, 12, 9), float32], Tensor[(8, 3, 11), float64], Tensor[(540), int8], Tensor[(264), float64]) {
  @func_1288(%var_1290, %var_1291) /* ty=(Tensor[(3, 12, 9), float32], Tensor[(8, 3, 11), float64], Tensor[(540), int8], Tensor[(264), float64]) */
}

def @func_2708() -> (Tensor[(5, 8, 6), int64],) {
  %650 = @func_2484() /* ty=Tensor[(5, 8, 6), float32] */;
  %651 = cast(meta[relay.Constant][38] /* ty=Tensor[(5, 8, 6), float32] */, dtype="int64") /* ty=Tensor[(5, 8, 6), int64] */;
  %652 = shape_of(%650, dtype="int32") /* ty=Tensor[(3), int32] */;
  %653 = cast(%650, dtype="int64") /* ty=Tensor[(5, 8, 6), int64] */;
  %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %655 = add(%653, %654) /* ty=Tensor[(5, 8, 6), int64] */;
  (%655,)
}

def @func_5398(%var_5394: Tensor[(120), uint32], %var_5395: Tensor[(1800), uint32], %var_5396: Tensor[(560, 1), int32], %var_5397: Tensor[(264), float64]) -> (Tensor[(5, 8, 6), int64], Tensor[(120), uint32], Tensor[(12, 15, 10), bool], Tensor[(560), int32], Tensor[(560, 1), int32], Tensor[(7, 11, 15), bool], Tensor[(264), float64]) {
  %676 = fn (%var_5331: Tensor[(120), uint32], %var_5332: Tensor[(1800), uint32], %var_5372: Tensor[(560, 1), int32], %var_5381: Tensor[(264), float64]) -> (Tensor[(5, 8, 6), int64], Tensor[(120), uint32], Tensor[(12, 15, 10), bool], Tensor[(560), int32], Tensor[(560, 1), int32], Tensor[(7, 11, 15), bool], Tensor[(264), float64]) {
    %656 = @func_3631() /* ty=(Tensor[(5, 8, 6), int64],) */;
    %657 = cast(%var_5331, dtype="uint32") /* ty=Tensor[(120), uint32] */;
    %658 = cast(%var_5332, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
    %659 = reshape(%657, newshape=[12, 1, 10]) /* ty=Tensor[(12, 1, 10), uint32] */;
    %660 = reshape(%658, newshape=[12, 15, 10]) /* ty=Tensor[(12, 15, 10), uint32] */;
    %661 = @func_1904(%659, %660) /* ty=Tensor[(12, 15, 10), uint32] */;
    %662 = cast(%var_5332, dtype="bool") /* ty=Tensor[(1800), bool] */;
    %663 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
    %664 = cast(%661, dtype="bool") /* ty=Tensor[(12, 15, 10), bool] */;
    %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %666 = cast(%var_5372, dtype="int32") /* ty=Tensor[(560, 1), int32] */;
    %667 = reshape(%666, newshape=[560]) /* ty=Tensor[(560), int32] */;
    %668 = @func_2510(%667) /* ty=(Tensor[(5, 8, 6), float64], Tensor[(10, 7, 8), bool], Tensor[(560), int32]) */;
    %669 = cast(%var_5381, dtype="float64") /* ty=Tensor[(264), float64] */;
    %670 = reshape(%669, newshape=[264]) /* ty=Tensor[(264), float64] */;
    %671 = @func_4114(%670) /* ty=(Tensor[(5, 8, 6), int64], Tensor[(8, 3, 11), float64], Tensor[(264), float64], Tensor[(7, 11, 15), bool]) */;
    %672 = %656.0;
    %673 = greater(%664, %665) /* ty=Tensor[(12, 15, 10), bool] */;
    %674 = %668.2;
    %675 = %671.3;
    (%672, %var_5331, %673, %674, %var_5372, %675, %var_5381)
  };
  %676(%var_5394, %var_5395, %var_5396, %var_5397) /* ty=(Tensor[(5, 8, 6), int64], Tensor[(120), uint32], Tensor[(12, 15, 10), bool], Tensor[(560), int32], Tensor[(560, 1), int32], Tensor[(7, 11, 15), bool], Tensor[(264), float64]) */
}

def @func_1951(%var_1921: Tensor[(7, 9, 16), float64], %var_1922: Tensor[(7, 9, 16), float64], %var_1942: Tensor[(6, 20), uint32]) -> (Tensor[(7, 9, 16), float64], Tensor[(12, 15, 10), uint32], Tensor[(6, 20), uint32], Tensor[(900, 2), uint32]) {
  %677 = cast(%var_1922, dtype="float64") /* ty=Tensor[(7, 9, 16), float64] */;
  %678 = shape_of(%var_1921, dtype="int32") /* ty=Tensor[(3), int32] */;
  %679 = cast(%var_1921, dtype="float64") /* ty=Tensor[(7, 9, 16), float64] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %681 = cast(%var_1942, dtype="uint32") /* ty=Tensor[(6, 20), uint32] */;
  %682 = cast(meta[relay.Constant][39] /* ty=Tensor[(900, 2), uint32] */, dtype="uint32") /* ty=Tensor[(900, 2), uint32] */;
  %683 = reshape(%681, newshape=[12, 1, 10]) /* ty=Tensor[(12, 1, 10), uint32] */;
  %684 = reshape(%682, newshape=[12, 15, 10]) /* ty=Tensor[(12, 15, 10), uint32] */;
  %685 = floor_mod(%679, %680) /* ty=Tensor[(7, 9, 16), float64] */;
  %686 = @func_1904(%683, %684) /* ty=Tensor[(12, 15, 10), uint32] */;
  (%685, %686, %var_1942, meta[relay.Constant][39] /* ty=Tensor[(900, 2), uint32] */)
}

def @func_3432(%var_3431: Tensor[(1, 6), int16]) -> (Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float64], Tensor[(3, 88), float64], Tensor[(1, 6), int16]) {
  %696 = fn (%var_3418: Tensor[(1, 6), int16]) -> (Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float64], Tensor[(3, 88), float64], Tensor[(1, 6), int16]) {
    %687 = @func_3003() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float32]) */;
    %688 = @func_2484() /* ty=Tensor[(5, 8, 6), float32] */;
    %689 = cast(%688, dtype="float64") /* ty=Tensor[(5, 8, 6), float64] */;
    %690 = cast(%var_3418, dtype="int16") /* ty=Tensor[(1, 6), int16] */;
    %691 = reshape(%690, newshape=[1, 6]) /* ty=Tensor[(1, 6), int16] */;
    %692 = @func_3215(%691) /* ty=(Tensor[(12, 6), int16], Tensor[(3, 88), float64], Tensor[(264), float64], Tensor[(5, 8, 6), int64]) */;
    %693 = %687.0;
    %694 = log(%689) /* ty=Tensor[(5, 8, 6), float64] */;
    %695 = %692.1;
    (%693, %694, %695, %var_3418)
  };
  %696(%var_3431) /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float64], Tensor[(3, 88), float64], Tensor[(1, 6), int16]) */
}

def @func_1686(%var_1685: Tensor[(12, 1, 4), float32]) -> Tensor[(12, 1, 4), float32] {
  %698 = fn (%var_1673: Tensor[(12, 1, 4), float32]) -> Tensor[(12, 1, 4), float32] {
    %697 = cast(%var_1673, dtype="float32") /* ty=Tensor[(12, 1, 4), float32] */;
    log(%697) /* ty=Tensor[(12, 1, 4), float32] */
  };
  %698(%var_1685) /* ty=Tensor[(12, 1, 4), float32] */
}

def @func_540(%var_538: Tensor[(6, 8, 6), uint64], %var_539: Tensor[(8, 30), uint32]) -> (Tensor[(6, 8, 6), float64], Tensor[(8, 3, 11), bool], Tensor[(264), float64], Tensor[(264), float64], Tensor[(8, 30), uint32]) {
  %716 = fn (%var_503: Tensor[(6, 8, 6), uint64], %var_535: Tensor[(8, 30), uint32]) -> (Tensor[(6, 8, 6), float64], Tensor[(8, 3, 11), bool], Tensor[(264), float64], Tensor[(264), float64], Tensor[(8, 30), uint32]) {
    %699 = cast(meta[relay.Constant][40] /* ty=Tensor[(6, 1, 6), uint64] */, dtype="bool") /* ty=Tensor[(6, 1, 6), bool] */;
    %700 = cast(%var_503, dtype="bool") /* ty=Tensor[(6, 8, 6), bool] */;
    %701 = greater_equal(%699, %700) /* ty=Tensor[(6, 8, 6), bool] */;
    %702 = cast(%701, dtype="float64") /* ty=Tensor[(6, 8, 6), float64] */;
    %703 = cast(meta[relay.Constant][41] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
    %704 = cast(meta[relay.Constant][41] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
    %705 = reshape(%703, newshape=[8, 3, 11]) /* ty=Tensor[(8, 3, 11), float64] */;
    %706 = reshape(%704, newshape=[8, 3, 11]) /* ty=Tensor[(8, 3, 11), float64] */;
    %707 = @func_274(%705, %706) /* ty=(Tensor[(8, 3, 11), float64], Tensor[(8, 3, 11), bool]) */;
    %708 = cast(%var_535, dtype="uint32") /* ty=Tensor[(8, 30), uint32] */;
    %709 = cast(meta[relay.Constant][41] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
    %710 = reshape(%708, newshape=[5, 12, 4]) /* ty=Tensor[(5, 12, 4), uint32] */;
    %711 = reshape(%709, newshape=[264]) /* ty=Tensor[(264), float64] */;
    %712 = @func_322(%710, %711) /* ty=(Tensor[(5, 12, 4), float32], Tensor[(8, 3, 11), bool], Tensor[(264), float64]) */;
    %713 = sigmoid(%702) /* ty=Tensor[(6, 8, 6), float64] */;
    %714 = %707.1;
    %715 = %712.2;
    (%713, %714, meta[relay.Constant][41] /* ty=Tensor[(264), float64] */, %715, %var_535)
  };
  %716(%var_538, %var_539) /* ty=(Tensor[(6, 8, 6), float64], Tensor[(8, 3, 11), bool], Tensor[(264), float64], Tensor[(264), float64], Tensor[(8, 30), uint32]) */
}

def @func_5931() -> (Tensor[(5, 8, 6), int64], Tensor[(5, 8, 6), float32]) {
  %717 = @func_3631() /* ty=(Tensor[(5, 8, 6), int64],) */;
  %718 = @func_5796() /* ty=(Tensor[(5, 8, 6), float32],) */;
  %719 = %717.0;
  %720 = %718.0;
  (%719, %720)
}

def @func_712(%var_709: Tensor[(3, 15, 12), int8], %var_710: Tensor[(3, 15, 12), int8], %var_711: Tensor[(264), float64]) -> (Tensor[(3, 15, 12), bool], Tensor[(3, 15, 12), float64], Tensor[(8, 3, 11), float64], Tensor[(264), float64]) {
  @func_707(%var_709, %var_710, %var_711) /* ty=(Tensor[(3, 15, 12), bool], Tensor[(3, 15, 12), float64], Tensor[(8, 3, 11), float64], Tensor[(264), float64]) */
}

def @func_2798(%var_2795: Tensor[(1008), float64], %var_2796: Tensor[(1, 264), float64], %var_2797: Tensor[(12, 264), float64]) -> (Tensor[(5, 8, 6), float32], Tensor[(1008), float64], Tensor[(12, 264), uint16], Tensor[(5, 8, 6), float64]) {
  @func_2793(%var_2795, %var_2796, %var_2797) /* ty=(Tensor[(5, 8, 6), float32], Tensor[(1008), float64], Tensor[(12, 264), uint16], Tensor[(5, 8, 6), float64]) */
}

def @func_587(%var_586: Tensor[(7, 10, 7), float64]) -> (Tensor[(8, 3, 11), bool], Tensor[(264), float64], Tensor[(7, 10, 7), uint32]) {
  %734 = fn (%var_566: Tensor[(7, 10, 7), float64]) -> (Tensor[(8, 3, 11), bool], Tensor[(264), float64], Tensor[(7, 10, 7), uint32]) {
    %721 = cast(meta[relay.Constant][42] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
    %722 = cast(meta[relay.Constant][42] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
    %723 = reshape(%721, newshape=[8, 3, 11]) /* ty=Tensor[(8, 3, 11), float64] */;
    %724 = reshape(%722, newshape=[8, 3, 11]) /* ty=Tensor[(8, 3, 11), float64] */;
    %725 = @func_274(%723, %724) /* ty=(Tensor[(8, 3, 11), float64], Tensor[(8, 3, 11), bool]) */;
    %726 = cast(%var_566, dtype="float64") /* ty=Tensor[(7, 10, 7), float64] */;
    %727 = atanh(%726) /* ty=Tensor[(7, 10, 7), float64] */;
    %728 = cast(%var_566, dtype="uint32") /* ty=Tensor[(7, 10, 7), uint32] */;
    %729 = shape_of(%727, dtype="int32") /* ty=Tensor[(3), int32] */;
    %730 = cast(%727, dtype="uint32") /* ty=Tensor[(7, 10, 7), uint32] */;
    %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %732 = %725.1;
    %733 = right_shift(%730, %731) /* ty=Tensor[(7, 10, 7), uint32] */;
    (%732, meta[relay.Constant][42] /* ty=Tensor[(264), float64] */, %733)
  };
  %734(%var_586) /* ty=(Tensor[(8, 3, 11), bool], Tensor[(264), float64], Tensor[(7, 10, 7), uint32]) */
}

def @func_2764(%var_2761: Tensor[(5, 8, 6), float32], %var_2762: Tensor[(540), int8], %var_2763: Tensor[(264), float64]) -> (Tensor[(5, 8, 6), float32], Tensor[(3, 12, 9), float32], Tensor[(540), int8], Tensor[(264), float64], Tensor[(5, 8, 6), int32]) {
  %752 = fn (%var_2741: Tensor[(5, 8, 6), float32], %var_2749: Tensor[(540), int8], %var_2750: Tensor[(264), float64]) -> (Tensor[(5, 8, 6), float32], Tensor[(3, 12, 9), float32], Tensor[(540), int8], Tensor[(264), float64], Tensor[(5, 8, 6), int32]) {
    %735 = @func_2484() /* ty=Tensor[(5, 8, 6), float32] */;
    %736 = cast(%var_2741, dtype="float32") /* ty=Tensor[(5, 8, 6), float32] */;
    %737 = shape_of(%735, dtype="int32") /* ty=Tensor[(3), int32] */;
    %738 = cast(%735, dtype="float32") /* ty=Tensor[(5, 8, 6), float32] */;
    %739 = dyn.reshape(%736, %737, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %740 = cast(%var_2749, dtype="int8") /* ty=Tensor[(540), int8] */;
    %741 = cast(%var_2750, dtype="float64") /* ty=Tensor[(264), float64] */;
    %742 = reshape(%740, newshape=[540]) /* ty=Tensor[(540), int8] */;
    %743 = reshape(%741, newshape=[264]) /* ty=Tensor[(264), float64] */;
    %744 = @func_1288(%742, %743) /* ty=(Tensor[(3, 12, 9), float32], Tensor[(8, 3, 11), float64], Tensor[(540), int8], Tensor[(264), float64]) */;
    %745 = cast(%var_2741, dtype="int32") /* ty=Tensor[(5, 8, 6), int32] */;
    %746 = shape_of(%735, dtype="int32") /* ty=Tensor[(3), int32] */;
    %747 = cast(%735, dtype="int32") /* ty=Tensor[(5, 8, 6), int32] */;
    %748 = dyn.reshape(%745, %746, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %749 = divide(%738, %739) /* ty=Tensor[(5, 8, 6), float32] */;
    %750 = %744.0;
    %751 = left_shift(%747, %748) /* ty=Tensor[(5, 8, 6), int32] */;
    (%749, %750, %var_2749, %var_2750, %751)
  };
  %752(%var_2761, %var_2762, %var_2763) /* ty=(Tensor[(5, 8, 6), float32], Tensor[(3, 12, 9), float32], Tensor[(540), int8], Tensor[(264), float64], Tensor[(5, 8, 6), int32]) */
}

def @func_3145(%var_3144: Tensor[(1155), int16]) -> (Tensor[(5, 8, 6), float64], Tensor[(7, 11, 15), int16], Tensor[(1155), int16], Tensor[(5, 8, 6), int16], Tensor[(5, 8, 6), float64]) {
  %769 = fn (%var_3114: Tensor[(1155), int16]) -> (Tensor[(5, 8, 6), float64], Tensor[(7, 11, 15), int16], Tensor[(1155), int16], Tensor[(5, 8, 6), int16], Tensor[(5, 8, 6), float64]) {
    %753 = @func_2203() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float64]) */;
    %754 = cast(%var_3114, dtype="int16") /* ty=Tensor[(1155), int16] */;
    %755 = reshape(%754, newshape=[7, 11, 15]) /* ty=Tensor[(7, 11, 15), int16] */;
    %756 = @func_2203() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float64]) */;
    %757 = %756.0;
    %758 = cast(meta[relay.Constant][43] /* ty=Tensor[(5, 8, 6), float32] */, dtype="int16") /* ty=Tensor[(5, 8, 6), int16] */;
    %759 = shape_of(%757, dtype="int32") /* ty=Tensor[(3), int32] */;
    %760 = cast(%757, dtype="int16") /* ty=Tensor[(5, 8, 6), int16] */;
    %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %762 = cast(%757, dtype="float64") /* ty=Tensor[(5, 8, 6), float64] */;
    %763 = sinh(%762) /* ty=Tensor[(5, 8, 6), float64] */;
    %764 = cast(%763, dtype="float64") /* ty=Tensor[(5, 8, 6), float64] */;
    %765 = %753.1;
    %766 = @func_1349(%755) /* ty=Tensor[(7, 11, 15), int16] */;
    %767 = subtract(%760, %761) /* ty=Tensor[(5, 8, 6), int16] */;
    %768 = cos(%764) /* ty=Tensor[(5, 8, 6), float64] */;
    (%765, %766, %var_3114, %767, %768)
  };
  %769(%var_3144) /* ty=(Tensor[(5, 8, 6), float64], Tensor[(7, 11, 15), int16], Tensor[(1155), int16], Tensor[(5, 8, 6), int16], Tensor[(5, 8, 6), float64]) */
}

def @func_3839() -> (Tensor[(264), float64], Tensor[(5, 8, 6), int64], Tensor[(5, 8, 6), float32]) {
  %775 = fn () -> (Tensor[(264), float64], Tensor[(5, 8, 6), int64], Tensor[(5, 8, 6), float32]) {
    %770 = @func_3563() /* ty=(Tensor[(540), int8], Tensor[(264), float64], Tensor[(264), float64]) */;
    %771 = @func_3631() /* ty=(Tensor[(5, 8, 6), int64],) */;
    %772 = %770.1;
    %773 = %771.0;
    %774 = @func_2722() /* ty=Tensor[(5, 8, 6), float32] */;
    (%772, %773, %774)
  };
  %775() /* ty=(Tensor[(264), float64], Tensor[(5, 8, 6), int64], Tensor[(5, 8, 6), float32]) */
}

def @func_4410(%var_4408: Tensor[(8, 5, 4), int32], %var_4409: Tensor[(8, 5, 4), int32]) -> Tensor[(8, 5, 4), int32] {
  %780 = fn (%var_4399: Tensor[(8, 5, 4), int32], %var_4400: Tensor[(8, 5, 4), int32]) -> Tensor[(8, 5, 4), int32] {
    %776 = cast(%var_4400, dtype="int32") /* ty=Tensor[(8, 5, 4), int32] */;
    %777 = shape_of(%var_4399, dtype="int32") /* ty=Tensor[(3), int32] */;
    %778 = cast(%var_4399, dtype="int32") /* ty=Tensor[(8, 5, 4), int32] */;
    %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    minimum(%778, %779) /* ty=Tensor[(8, 5, 4), int32] */
  };
  %780(%var_4408, %var_4409) /* ty=Tensor[(8, 5, 4), int32] */
}

def @func_5784() -> Tensor[(5, 8, 6), float32] {
  %781 = @func_3982() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), int32], Tensor[(5, 8, 6), float32], Tensor[(7, 11, 15), int16]) */;
  %781.0
}

def @func_2980() -> (Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), int32], Tensor[(540), int8], Tensor[(264), float64], Tensor[(5, 8, 6), float64]) {
  %782 = @func_2937() /* ty=Tensor[(5, 8, 6), float32] */;
  %783 = cast(%782, dtype="float32") /* ty=Tensor[(5, 8, 6), float32] */;
  %784 = cast(meta[relay.Constant][44] /* ty=Tensor[(540), int8] */, dtype="int8") /* ty=Tensor[(540), int8] */;
  %785 = cast(meta[relay.Constant][45] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
  %786 = reshape(%783, newshape=[5, 8, 6]) /* ty=Tensor[(5, 8, 6), float32] */;
  %787 = reshape(%784, newshape=[540]) /* ty=Tensor[(540), int8] */;
  %788 = reshape(%785, newshape=[264]) /* ty=Tensor[(264), float64] */;
  %789 = @func_2760(%786, %787, %788) /* ty=(Tensor[(5, 8, 6), float32], Tensor[(3, 12, 9), float32], Tensor[(540), int8], Tensor[(264), float64], Tensor[(5, 8, 6), int32]) */;
  %790 = @func_2203() /* ty=(Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float64]) */;
  %791 = %789.4;
  %792 = %790.1;
  (%782, %791, meta[relay.Constant][44] /* ty=Tensor[(540), int8] */, meta[relay.Constant][45] /* ty=Tensor[(264), float64] */, %792)
}

def @func_1956(%var_1953: Tensor[(7, 9, 16), float64], %var_1954: Tensor[(7, 9, 16), float64], %var_1955: Tensor[(6, 20), uint32]) -> (Tensor[(7, 9, 16), float64], Tensor[(12, 15, 10), uint32], Tensor[(6, 20), uint32], Tensor[(900, 2), uint32]) {
  @func_1951(%var_1953, %var_1954, %var_1955) /* ty=(Tensor[(7, 9, 16), float64], Tensor[(12, 15, 10), uint32], Tensor[(6, 20), uint32], Tensor[(900, 2), uint32]) */
}

def @func_3382() -> Tensor[(264), float64] {
  @func_3380() /* ty=Tensor[(264), float64] */
}

def @func_5980() -> (Tensor[(5, 8, 6), float32],) {
  %794 = fn () -> (Tensor[(5, 8, 6), float32],) {
    %793 = @func_2937() /* ty=Tensor[(5, 8, 6), float32] */;
    (%793,)
  };
  %794() /* ty=(Tensor[(5, 8, 6), float32],) */
}

def @func_2203() -> (Tensor[(5, 8, 6), float32], Tensor[(5, 8, 6), float64]) {
  %795 = cast(meta[relay.Constant][46] /* ty=Tensor[(5, 8, 6), float32] */, dtype="float32") /* ty=Tensor[(5, 8, 6), float32] */;
  %796 = cast(meta[relay.Constant][46] /* ty=Tensor[(5, 8, 6), float32] */, dtype="float64") /* ty=Tensor[(5, 8, 6), float64] */;
  %797 = log10(%795) /* ty=Tensor[(5, 8, 6), float32] */;
  %798 = exp(%796) /* ty=Tensor[(5, 8, 6), float64] */;
  (%797, %798)
}

def @func_3021() -> (Tensor[(5, 8, 6), float32],) {
  @func_3019() /* ty=(Tensor[(5, 8, 6), float32],) */
}

def @func_2484() -> Tensor[(5, 8, 6), float32] {
  %799 = @func_2249() /* ty=(Tensor[(5, 8, 6), float32],) */;
  %799.0
}

def @func_5008(%var_5006: Tensor[(10, 13, 6), int16]) -> (Tensor[(5, 8, 6), float32], Tensor[(10, 13, 6), uint16], Tensor[(7, 6, 11), float32], Tensor[(462), float32]) {
  @func_5005(%var_5006) /* ty=(Tensor[(5, 8, 6), float32], Tensor[(10, 13, 6), uint16], Tensor[(7, 6, 11), float32], Tensor[(462), float32]) */
}

def @func_5520(%var_5518: Tensor[(288), uint64]) -> (Tensor[(540), int8], Tensor[(4, 60), uint32], Tensor[(64), int64], Tensor[(288), uint64], Tensor[(240), uint32], Tensor[(264), float64]) {
  @func_5517(%var_5518) /* ty=(Tensor[(540), int8], Tensor[(4, 60), uint32], Tensor[(64), int64], Tensor[(288), uint64], Tensor[(240), uint32], Tensor[(264), float64]) */
}

def @func_5032() -> (Tensor[(5, 8, 6), int64], Tensor[(5, 8, 6), int64]) {
  %803 = fn () -> (Tensor[(5, 8, 6), int64], Tensor[(5, 8, 6), int64]) {
    %800 = @func_2708() /* ty=(Tensor[(5, 8, 6), int64],) */;
    %801 = %800.0;
    %802 = @func_4847() /* ty=Tensor[(5, 8, 6), int64] */;
    (%801, %802)
  };
  %803() /* ty=(Tensor[(5, 8, 6), int64], Tensor[(5, 8, 6), int64]) */
}

def @func_4024(%var_4011: Tensor[(3, 5), int64], %var_4012: Tensor[(3, 5), int64]) -> (Tensor[(3, 5), bool],) {
  %804 = cast(%var_4012, dtype="bool") /* ty=Tensor[(3, 5), bool] */;
  %805 = shape_of(%var_4011, dtype="int32") /* ty=Tensor[(2), int32] */;
  %806 = cast(%var_4011, dtype="bool") /* ty=Tensor[(3, 5), bool] */;
  %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %808 = equal(%806, %807) /* ty=Tensor[(3, 5), bool] */;
  (%808,)
}

def @func_6059(%var_6057: Tensor[(160), int32]) -> (Tensor[(5, 8, 6), float32], Tensor[(8, 5, 4), int32], Tensor[(160), int32]) {
  @func_6056(%var_6057) /* ty=(Tensor[(5, 8, 6), float32], Tensor[(8, 5, 4), int32], Tensor[(160), int32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen71/build/output.py:1945: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen71/build/output.py:1950: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen71/build/output.py:1982: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen71/build/output.py:1987: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen71/build/output.py:1992: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mutated_mod, target='llvm')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen71/build/output.py:1997: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mutated_mod, target='cuda')

===================================
#[version = "0.0.5"]
type GradCell[T] {
  Raw(T),
  One(fn () -> T),
  Zero(fn () -> T),
}

def @FromGradCell[T](%g: GradCell[T]) -> T {
  match (%g) {
    Raw(%x: T) => {
      %x
    },
    One(%x1: fn () -> T) => {
      %x1() /* ty=T */
    },
    Zero(%x2: fn () -> T) => {
      %x2() /* ty=T */
    },
  }
}

def @MultiplyGradCell[T](%multiply: fn (T, T) -> T, %l: GradCell[T], %r: GradCell[T]) -> GradCell[T] {
  %0 = (%l, %r);
  match (%0) {
    (Zero(_), _) => {
      %l
    },
    (_, Zero(_)) => {
      %r
    },
    (One(_), _) => {
      %r
    },
    (_, One(_)) => {
      %l
    },
    _ => {
      %1 = match (%l) {
        Raw(%x3: T) => {
          %x3
        },
        One(%x4: fn () -> T) => {
          %x4() /* ty=T */
        },
        Zero(%x5: fn () -> T) => {
          %x5() /* ty=T */
        },
      };
      %2 = match (%r) {
        Raw(%x6: T) => {
          %x6
        },
        One(%x7: fn () -> T) => {
          %x7() /* ty=T */
        },
        Zero(%x8: fn () -> T) => {
          %x8() /* ty=T */
        },
      };
      %3 = %multiply(%1, %2) /* ty=T */;
      Raw(%3) /* ty=GradCell[T] */
    },
  }
}

def @AddGradCell[T](%add: fn (T, T) -> T, %l1: GradCell[T], %r1: GradCell[T]) -> GradCell[T] {
  %4 = (%l1, %r1);
  match (%4) {
    (Zero(_), _) => {
      %r1
    },
    (_, Zero(_)) => {
      %l1
    },
    _ => {
      %5 = match (%l1) {
        Raw(%x9: T) => {
          %x9
        },
        One(%x10: fn () -> T) => {
          %x10() /* ty=T */
        },
        Zero(%x11: fn () -> T) => {
          %x11() /* ty=T */
        },
      };
      %6 = match (%r1) {
        Raw(%x12: T) => {
          %x12
        },
        One(%x13: fn () -> T) => {
          %x13() /* ty=T */
        },
        Zero(%x14: fn () -> T) => {
          %x14() /* ty=T */
        },
      };
      %7 = %add(%5, %6) /* ty=T */;
      Raw(%7) /* ty=GradCell[T] */
    },
  }
}

def @main() -> ((Tensor[(12, 14, 10), float32],), ()) {
  %8 = (meta[relay.Constant][0] /* ty=Tensor[(12, 14, 10), float32] */,);
  %9 = ();
  (%8, %9)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
