==========mod==========
#[version = "0.0.5"]
def @func_1102(%var_1033: Tensor[(14, 28), uint16], %var_1061: Tensor[(14, 28), float64], %var_1078: Tensor[(90), float64]) -> (Tensor[(8, 8, 9), float64], Tensor[(14, 7, 4), bool], uint16, Tensor[(14, 7, 4), bool], Tensor[(960), int8], Tensor[(1792), float64], Tensor[(14, 28), float64], Tensor[(14, 7, 4), float32], uint16, Tensor[(90), float64], Tensor[(14, 7, 4), bool], Tensor[(14, 28), float64]) {
  %0 = cast(meta[relay.Constant][0] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %1 = cast(%var_1033, dtype="uint16") /* ty=Tensor[(14, 28), uint16] */;
  %2 = reshape(%0, newshape=[]) /* ty=uint16 */;
  %3 = reshape(%1, newshape=[14, 7, 4]) /* ty=Tensor[(14, 7, 4), uint16] */;
  %4 = @func_104(%2, %3) /* ty=(Tensor[(14, 7, 4), bool],) */;
  %5 = cast(meta[relay.Constant][1] /* ty=Tensor[(960), int8] */, dtype="int8") /* ty=Tensor[(960), int8] */;
  %6 = reshape(%5, newshape=[16, 10, 6]) /* ty=Tensor[(16, 10, 6), int8] */;
  %7 = @func_476(%6) /* ty=(Tensor[(16, 10, 6), int8], Tensor[(14, 7, 4), bool], Tensor[(392, 1), uint16]) */;
  %8 = cast(%var_1033, dtype="float64") /* ty=Tensor[(14, 28), float64] */;
  %9 = log2(%8) /* ty=Tensor[(14, 28), float64] */;
  %10 = cast(%var_1061, dtype="uint8") /* ty=Tensor[(14, 28), uint8] */;
  %11 = shape_of(%9, dtype="int32") /* ty=Tensor[(2), int32] */;
  %12 = cast(%9, dtype="uint8") /* ty=Tensor[(14, 28), uint8] */;
  %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %14 = left_shift(%12, %13) /* ty=Tensor[(14, 28), uint8] */;
  %15 = cast(meta[relay.Constant][3] /* ty=Tensor[(14, 28), uint8] */, dtype="float64") /* ty=Tensor[(14, 28), float64] */;
  %16 = shape_of(%14, dtype="int32") /* ty=Tensor[(2), int32] */;
  %17 = cast(%14, dtype="float64") /* ty=Tensor[(14, 28), float64] */;
  %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %19 = cast(meta[relay.Constant][2] /* ty=Tensor[(1792), float64] */, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %20 = cast(meta[relay.Constant][2] /* ty=Tensor[(1792), float64] */, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %21 = cast(meta[relay.Constant][0] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %22 = reshape(%19, newshape=[16, 14, 8]) /* ty=Tensor[(16, 14, 8), float64] */;
  %23 = reshape(%20, newshape=[16, 14, 8]) /* ty=Tensor[(16, 14, 8), float64] */;
  %24 = reshape(%21, newshape=[]) /* ty=uint16 */;
  %25 = @func_183(%22, %23, %24) /* ty=(Tensor[(16, 14, 8), float32], Tensor[(14, 7, 4), bool], uint16, Tensor[(392), uint16], Tensor[(14, 7, 4), bool], Tensor[(14, 7, 4), bool]) */;
  %26 = %25.1;
  %27 = cast(%var_1033, dtype="float32") /* ty=Tensor[(14, 28), float32] */;
  %28 = shape_of(%26, dtype="int32") /* ty=Tensor[(3), int32] */;
  %29 = cast(%26, dtype="float32") /* ty=Tensor[(14, 7, 4), float32] */;
  %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %31 = cast(%var_1078, dtype="float64") /* ty=Tensor[(90), float64] */;
  %32 = cast(meta[relay.Constant][0] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %33 = cast(%9, dtype="uint16") /* ty=Tensor[(14, 28), uint16] */;
  %34 = reshape(%31, newshape=[10, 1, 9]) /* ty=Tensor[(10, 1, 9), float64] */;
  %35 = reshape(%32, newshape=[]) /* ty=uint16 */;
  %36 = reshape(%33, newshape=[392]) /* ty=Tensor[(392), uint16] */;
  %37 = @func_285(%34, %35, %36) /* ty=(Tensor[(10, 1, 9), float64], Tensor[(1792), float64], uint16, Tensor[(14, 7, 4), bool], Tensor[(14, 7, 4), bool], Tensor[(392), float64]) */;
  %38 = cast(meta[relay.Constant][0] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %39 = cast(%26, dtype="uint16") /* ty=Tensor[(14, 7, 4), uint16] */;
  %40 = reshape(%38, newshape=[]) /* ty=uint16 */;
  %41 = reshape(%39, newshape=[14, 7, 4]) /* ty=Tensor[(14, 7, 4), uint16] */;
  %42 = @func_104(%40, %41) /* ty=(Tensor[(14, 7, 4), bool],) */;
  %43 = cast(%14, dtype="float32") /* ty=Tensor[(14, 28), float32] */;
  %44 = sin(%43) /* ty=Tensor[(14, 28), float32] */;
  %45 = cast(%44, dtype="float64") /* ty=Tensor[(14, 28), float64] */;
  %46 = @func_954() /* ty=Tensor[(8, 8, 9), float64] */;
  %47 = %4.0;
  %48 = %7.1;
  %49 = divide(%17, %18) /* ty=Tensor[(14, 28), float64] */;
  %50 = power(%29, %30) /* ty=Tensor[(14, 7, 4), float32] */;
  %51 = %37.2;
  %52 = %42.0;
  %53 = atanh(%45) /* ty=Tensor[(14, 28), float64] */;
  (%46, %47, meta[relay.Constant][0] /* ty=uint16 */, %48, meta[relay.Constant][1] /* ty=Tensor[(960), int8] */, meta[relay.Constant][2] /* ty=Tensor[(1792), float64] */, %49, %50, %51, %var_1078, %52, %53)
}

def @func_5723(%var_5716: Tensor[(4, 15, 10), float32]) -> Tensor[(4, 15, 10), float32] {
  %54 = cast(%var_5716, dtype="float32") /* ty=Tensor[(4, 15, 10), float32] */;
  %55 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(4, 15, 10), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(meta[relay.Constant][4] /* ty=Tensor[(4, 15, 10), float32] */, dtype="float32") /* ty=Tensor[(4, 15, 10), float32] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  add(%56, %57) /* ty=Tensor[(4, 15, 10), float32] */
}

def @func_3866() -> (Tensor[(16, 10, 6), int8], Tensor[(13, 8, 3), float32]) {
  %58 = @func_2266() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(16, 10, 6), int8]) */;
  %59 = @func_2382() /* ty=(Tensor[(13, 8, 3), float32],) */;
  %60 = %58.2;
  %61 = %59.0;
  (%60, %61)
}

def @func_4468() -> (Tensor[(8, 8, 9), float64],) {
  %62 = @func_1751() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %63 = %62.0;
  (%63,)
}

def @func_3631() -> (Tensor[(8, 8, 9), float64],) {
  %64 = @func_1513() /* ty=Tensor[(8, 8, 9), float64] */;
  (%64,)
}

def @func_1958() -> Tensor[(8, 8, 9), float64] {
  @func_1170() /* ty=Tensor[(8, 8, 9), float64] */
}

def @func_5059() -> Tensor[(960), float32] {
  @func_4787() /* ty=Tensor[(960), float32] */
}

def @func_5084() -> (Tensor[(8, 8, 9), float64],) {
  %65 = @func_1202() /* ty=Tensor[(8, 8, 9), float64] */;
  (%65,)
}

def @func_7040(%var_7032: Tensor[(90), float64]) -> (Tensor[(392), uint16], Tensor[(90), float64], Tensor[(10, 4, 6), float64], Tensor[(4, 60), float64], Tensor[(3, ?, 6), int8]) {
  %66 = cast(%var_7032, dtype="float64") /* ty=Tensor[(90), float64] */;
  %67 = reshape(%66, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %68 = @func_4843(%67) /* ty=(Tensor[(8, 8, 9), float64], Tensor[(1792), float64], Tensor[(90), float64], uint16, Tensor[(392), uint16], Tensor[(12, 5, 13), float32]) */;
  %69 = cast(meta[relay.Constant][5] /* ty=Tensor[(4, 60), float64] */, dtype="float64") /* ty=Tensor[(4, 60), float64] */;
  %70 = reshape(%69, newshape=[10, 4, 6]) /* ty=Tensor[(10, 4, 6), float64] */;
  %71 = @func_3692(%70) /* ty=(Tensor[(10, 4, 6), float64], Tensor[(10, 4, 6), float64]) */;
  %72 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 1, 6), float64] */, dtype="float64") /* ty=Tensor[(3, 1, 6), float64] */;
  %73 = sqrt(%72) /* ty=Tensor[(3, 1, 6), float64] */;
  %74 = cast(%73, dtype="float32") /* ty=Tensor[(3, 1, 6), float32] */;
  %75 = asinh(%74) /* ty=Tensor[(3, 1, 6), float32] */;
  %76 = cast(%73, dtype="int8") /* ty=Tensor[(3, 1, 6), int8] */;
  %77 = shape_of(%75, dtype="int32") /* ty=Tensor[(3), int32] */;
  %78 = cast(%75, dtype="int8") /* ty=Tensor[(3, 1, 6), int8] */;
  %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %80 = %68.4;
  %81 = %71.1;
  %82 = add(%78, %79) /* ty=Tensor[(3, ?, 6), int8] */;
  (%80, %var_7032, %81, meta[relay.Constant][5] /* ty=Tensor[(4, 60), float64] */, %82)
}

def @func_3776(%var_3770: Tensor[(8, 8, 9), float64]) -> (Tensor[(8, 8, 9), float64],) {
  %83 = @func_2451() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(960), int8]) */;
  %84 = %83.0;
  %85 = cast(%var_3770, dtype="float64") /* ty=Tensor[(8, 8, 9), float64] */;
  %86 = shape_of(%84, dtype="int32") /* ty=Tensor[(3), int32] */;
  %87 = cast(%84, dtype="float64") /* ty=Tensor[(8, 8, 9), float64] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %89 = divide(%87, %88) /* ty=Tensor[(8, 8, 9), float64] */;
  (%89,)
}

def @func_5618() -> (Tensor[(8, 8, 9), float64],) {
  %90 = @func_4468() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %91 = %90.0;
  (%91,)
}

def @func_3815() -> (Tensor[(8, 8, 9), float64], Tensor[(10, 8, 12), bool], Tensor[(960), float32], Tensor[(8, 8, 9), float64]) {
  %92 = @func_1722() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) */;
  %93 = cast(meta[relay.Constant][7] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %94 = reshape(%93, newshape=[10, 8, 12]) /* ty=Tensor[(10, 8, 12), float32] */;
  %95 = @func_3238(%94) /* ty=(Tensor[(10, 8, 12), bool],) */;
  %96 = @func_1722() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) */;
  %97 = %92.0;
  %98 = %95.0;
  %99 = %96.0;
  (%97, %98, meta[relay.Constant][7] /* ty=Tensor[(960), float32] */, %99)
}

def @func_5011(%var_5004: Tensor[(8, 8, 9), float64]) -> (Tensor[(8, 8, 9), float64],) {
  %100 = @func_3311() /* ty=Tensor[(8, 8, 9), float64] */;
  %101 = cast(%var_5004, dtype="float64") /* ty=Tensor[(8, 8, 9), float64] */;
  %102 = shape_of(%100, dtype="int32") /* ty=Tensor[(3), int32] */;
  %103 = cast(%100, dtype="float64") /* ty=Tensor[(8, 8, 9), float64] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %105 = floor_divide(%103, %104) /* ty=Tensor[(8, 8, 9), float64] */;
  (%105,)
}

def @func_4238() -> (Tensor[(8, 8, 9), float64],) {
  %106 = @func_1722() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) */;
  %107 = %106.1;
  (%107,)
}

def @func_104(%var_90: uint16, %var_91: Tensor[(14, 7, 4), uint16]) -> (Tensor[(14, 7, 4), bool],) {
  %108 = cast(%var_90, dtype="bool") /* ty=bool */;
  %109 = cast(%var_91, dtype="bool") /* ty=Tensor[(14, 7, 4), bool] */;
  %110 = less_equal(%108, %109) /* ty=Tensor[(14, 7, 4), bool] */;
  (%110,)
}

def @func_5782() -> (Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) {
  %111 = @func_3631() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %112 = @func_1600() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %113 = %111.0;
  %114 = %112.0;
  (%113, %114)
}

def @func_6953(%var_6923: int64, %var_6924: Tensor[(15, 15, 14), int64]) -> (Tensor[(15, 15, 14), int64], Tensor[(13, 8, 3), float32], Tensor[(8, 8, 9), float64], Tensor[(15, 15, 14), uint16]) {
  %115 = cast(%var_6923, dtype="int64") /* ty=int64 */;
  %116 = cast(%var_6924, dtype="int64") /* ty=Tensor[(15, 15, 14), int64] */;
  %117 = @func_4592() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %118 = cast(%var_6924, dtype="uint16") /* ty=Tensor[(15, 15, 14), uint16] */;
  %119 = cast(%var_6923, dtype="uint16") /* ty=uint16 */;
  %120 = multiply(%115, %116) /* ty=Tensor[(15, 15, 14), int64] */;
  %121 = @func_6102() /* ty=Tensor[(13, 8, 3), float32] */;
  %122 = %117.0;
  %123 = left_shift(%118, %119) /* ty=Tensor[(15, 15, 14), uint16] */;
  (%120, %121, %122, %123)
}

def @func_7338() -> (Tensor[(8, 8, 9), float64],) {
  %124 = @func_4054() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) */;
  %125 = %124.0;
  (%125,)
}

def @func_963(%var_959: Tensor[(13, 8, 3), float32]) -> Tensor[(13, 8, 3), float32] {
  %126 = cast(%var_959, dtype="float32") /* ty=Tensor[(13, 8, 3), float32] */;
  asinh(%126) /* ty=Tensor[(13, 8, 3), float32] */
}

def @func_3951(%var_3926: Tensor[(240), float64]) -> (Tensor[(10, 4, 6), float64], Tensor[(240), float64], Tensor[(312), float64], Tensor[(960), int8]) {
  %127 = cast(%var_3926, dtype="float64") /* ty=Tensor[(240), float64] */;
  %128 = reshape(%127, newshape=[10, 4, 6]) /* ty=Tensor[(10, 4, 6), float64] */;
  %129 = @func_3692(%128) /* ty=(Tensor[(10, 4, 6), float64], Tensor[(10, 4, 6), float64]) */;
  %130 = @func_2986() /* ty=(Tensor[(16, 10, 6), int8], Tensor[(13, 8, 3), float32], Tensor[(312), float32]) */;
  %131 = %130.2;
  %132 = cast(%131, dtype="float64") /* ty=Tensor[(312), float64] */;
  %133 = @func_2451() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(960), int8]) */;
  %134 = %129.0;
  %135 = cosh(%132) /* ty=Tensor[(312), float64] */;
  %136 = %133.1;
  (%134, %var_3926, %135, %136)
}

def @func_183(%var_150: Tensor[(16, 14, 8), float64], %var_157: Tensor[(16, 14, 8), float64], %var_172: uint16) -> (Tensor[(16, 14, 8), float32], Tensor[(14, 7, 4), bool], uint16, Tensor[(392), uint16], Tensor[(14, 7, 4), bool], Tensor[(14, 7, 4), bool]) {
  %137 = cast(%var_150, dtype="float64") /* ty=Tensor[(16, 14, 8), float64] */;
  %138 = tan(%137) /* ty=Tensor[(16, 14, 8), float64] */;
  %139 = cast(%var_157, dtype="bool") /* ty=Tensor[(16, 14, 8), bool] */;
  %140 = shape_of(%138, dtype="int32") /* ty=Tensor[(3), int32] */;
  %141 = cast(%138, dtype="bool") /* ty=Tensor[(16, 14, 8), bool] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %143 = less(%141, %142) /* ty=Tensor[(16, 14, 8), bool] */;
  %144 = cast(%143, dtype="float32") /* ty=Tensor[(16, 14, 8), float32] */;
  %145 = cast(%var_172, dtype="uint16") /* ty=uint16 */;
  %146 = cast(meta[relay.Constant][8] /* ty=Tensor[(392), uint16] */, dtype="uint16") /* ty=Tensor[(392), uint16] */;
  %147 = reshape(%145, newshape=[]) /* ty=uint16 */;
  %148 = reshape(%146, newshape=[14, 7, 4]) /* ty=Tensor[(14, 7, 4), uint16] */;
  %149 = @func_104(%147, %148) /* ty=(Tensor[(14, 7, 4), bool],) */;
  %150 = cast(%var_172, dtype="uint16") /* ty=uint16 */;
  %151 = %149.0;
  %152 = cast(%151, dtype="uint16") /* ty=Tensor[(14, 7, 4), uint16] */;
  %153 = reshape(%150, newshape=[]) /* ty=uint16 */;
  %154 = reshape(%152, newshape=[14, 7, 4]) /* ty=Tensor[(14, 7, 4), uint16] */;
  %155 = @func_104(%153, %154) /* ty=(Tensor[(14, 7, 4), bool],) */;
  %156 = cast(%var_172, dtype="uint16") /* ty=uint16 */;
  %157 = %155.0;
  %158 = cast(%157, dtype="uint16") /* ty=Tensor[(14, 7, 4), uint16] */;
  %159 = reshape(%156, newshape=[]) /* ty=uint16 */;
  %160 = reshape(%158, newshape=[14, 7, 4]) /* ty=Tensor[(14, 7, 4), uint16] */;
  %161 = @func_104(%159, %160) /* ty=(Tensor[(14, 7, 4), bool],) */;
  %162 = rsqrt(%144) /* ty=Tensor[(16, 14, 8), float32] */;
  %163 = %161.0;
  (%162, %151, %var_172, meta[relay.Constant][8] /* ty=Tensor[(392), uint16] */, %157, %163)
}

def @func_2652() -> Tensor[(8, 8, 9), float64] {
  %164 = @func_2018() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(960), int8], Tensor[(16, 10, 6), int8]) */;
  %164.0
}

def @func_5504() -> (Tensor[(8, 8, 9), float64],) {
  %165 = @func_4592() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %166 = %165.0;
  (%166,)
}

def @func_6678(%var_6662: Tensor[(4, 8, 13), float32], %var_6673: uint16, %var_6674: Tensor[(392), uint16], %var_6675: Tensor[(576), bool]) -> (Tensor[(4, 8, 13), float32], Tensor[(90), float64], uint16, Tensor[(392), uint16], Tensor[(576), bool]) {
  %167 = cast(%var_6662, dtype="float32") /* ty=Tensor[(4, 8, 13), float32] */;
  %168 = cast(%var_6673, dtype="uint16") /* ty=uint16 */;
  %169 = cast(%var_6674, dtype="uint16") /* ty=Tensor[(392), uint16] */;
  %170 = cast(%var_6675, dtype="bool") /* ty=Tensor[(576), bool] */;
  %171 = reshape(%168, newshape=[]) /* ty=uint16 */;
  %172 = reshape(%169, newshape=[392]) /* ty=Tensor[(392), uint16] */;
  %173 = reshape(%170, newshape=[8, 8, 9]) /* ty=Tensor[(8, 8, 9), bool] */;
  %174 = @func_1702(%171, %172, %173) /* ty=(Tensor[(14, 7, 4), bool], Tensor[(90), float64], uint16, Tensor[(392), uint16], Tensor[(8, 8, 9), uint32], Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), int32]) */;
  %175 = acosh(%167) /* ty=Tensor[(4, 8, 13), float32] */;
  %176 = %174.1;
  (%175, %176, %var_6673, %var_6674, %var_6675)
}

def @func_4649(%var_4638: Tensor[(8, 8, 9), float64]) -> (Tensor[(8, 8, 9), bool], Tensor[(8, 8, 9), float64]) {
  %177 = @func_954() /* ty=Tensor[(8, 8, 9), float64] */;
  %178 = cast(%var_4638, dtype="uint16") /* ty=Tensor[(8, 8, 9), uint16] */;
  %179 = shape_of(%177, dtype="int32") /* ty=Tensor[(3), int32] */;
  %180 = cast(%177, dtype="uint16") /* ty=Tensor[(8, 8, 9), uint16] */;
  %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %182 = bitwise_xor(%180, %181) /* ty=Tensor[(8, 8, 9), uint16] */;
  %183 = cast(%var_4638, dtype="bool") /* ty=Tensor[(8, 8, 9), bool] */;
  %184 = shape_of(%182, dtype="int32") /* ty=Tensor[(3), int32] */;
  %185 = cast(%182, dtype="bool") /* ty=Tensor[(8, 8, 9), bool] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %187 = greater_equal(%185, %186) /* ty=Tensor[(8, 8, 9), bool] */;
  %188 = @func_1202() /* ty=Tensor[(8, 8, 9), float64] */;
  (%187, %188)
}

def @func_3209() -> (Tensor[(13, 8, 3), bool], Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64], Tensor[(1792), float64], Tensor[(960), int8]) {
  %189 = @func_2986() /* ty=(Tensor[(16, 10, 6), int8], Tensor[(13, 8, 3), float32], Tensor[(312), float32]) */;
  %190 = %189.1;
  %191 = cast(meta[relay.Constant][9] /* ty=Tensor[(13, 8, 3), float32] */, dtype="bool") /* ty=Tensor[(13, 8, 3), bool] */;
  %192 = shape_of(%190, dtype="int32") /* ty=Tensor[(3), int32] */;
  %193 = cast(%190, dtype="bool") /* ty=Tensor[(13, 8, 3), bool] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %195 = @func_2451() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(960), int8]) */;
  %196 = cast(meta[relay.Constant][10] /* ty=Tensor[(1792), float64] */, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %197 = cast(meta[relay.Constant][11] /* ty=Tensor[(960), int8] */, dtype="int8") /* ty=Tensor[(960), int8] */;
  %198 = reshape(%196, newshape=[4, 448]) /* ty=Tensor[(4, 448), float64] */;
  %199 = reshape(%197, newshape=[960]) /* ty=Tensor[(960), int8] */;
  %200 = @func_2626(%198, %199) /* ty=(Tensor[(1792), float64], Tensor[(4, 448), float64], Tensor[(1800), float64], Tensor[(14, 7, 4), bool], Tensor[(960), int8], Tensor[(8, 8, 9), float64]) */;
  %201 = greater_equal(%193, %194) /* ty=Tensor[(13, 8, 3), bool] */;
  %202 = %195.0;
  %203 = %200.5;
  (%201, %202, %203, meta[relay.Constant][10] /* ty=Tensor[(1792), float64] */, meta[relay.Constant][11] /* ty=Tensor[(960), int8] */)
}

def @func_1257(%var_1254: uint16) -> (Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32], Tensor[(312), float32], Tensor[(392), float64], Tensor[(143, 15), uint8], Tensor[(1, 90), float64], uint16, Tensor[(392), uint16]) {
  %204 = cast(meta[relay.Constant][12] /* ty=Tensor[(312), float32] */, dtype="float32") /* ty=Tensor[(312), float32] */;
  %205 = reshape(%204, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), float32] */;
  %206 = cast(meta[relay.Constant][13] /* ty=Tensor[(143, 15), uint8] */, dtype="uint8") /* ty=Tensor[(143, 15), uint8] */;
  %207 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 90), float64] */, dtype="float64") /* ty=Tensor[(1, 90), float64] */;
  %208 = cast(%var_1254, dtype="uint16") /* ty=uint16 */;
  %209 = cast(meta[relay.Constant][15] /* ty=Tensor[(392), uint16] */, dtype="uint16") /* ty=Tensor[(392), uint16] */;
  %210 = reshape(%206, newshape=[13, 15, 11]) /* ty=Tensor[(13, 15, 11), uint8] */;
  %211 = reshape(%207, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %212 = reshape(%208, newshape=[]) /* ty=uint16 */;
  %213 = reshape(%209, newshape=[196, 2]) /* ty=Tensor[(196, 2), uint16] */;
  %214 = @func_795(%210, %211, %212, %213) /* ty=(Tensor[(13, 15, 11), uint8], Tensor[(90), float64], Tensor[(196, 2), uint16], Tensor[(392), float64], Tensor[(13, 15, 11), int16]) */;
  %215 = @func_1202() /* ty=Tensor[(8, 8, 9), float64] */;
  %216 = @func_963(%205) /* ty=Tensor[(13, 8, 3), float32] */;
  %217 = %214.3;
  (%215, %216, meta[relay.Constant][12] /* ty=Tensor[(312), float32] */, %217, meta[relay.Constant][13] /* ty=Tensor[(143, 15), uint8] */, meta[relay.Constant][14] /* ty=Tensor[(1, 90), float64] */, %var_1254, meta[relay.Constant][15] /* ty=Tensor[(392), uint16] */)
}

def @func_4765() -> (Tensor[(8, 8, 9), float64],) {
  %218 = @func_954() /* ty=Tensor[(8, 8, 9), float64] */;
  (%218,)
}

def @func_4843(%var_4823: Tensor[(90), float64]) -> (Tensor[(8, 8, 9), float64], Tensor[(1792), float64], Tensor[(90), float64], uint16, Tensor[(392), uint16], Tensor[(12, 5, 13), float32]) {
  %219 = @func_1600() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %220 = cast(%var_4823, dtype="float64") /* ty=Tensor[(90), float64] */;
  %221 = cast(meta[relay.Constant][16] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %222 = cast(meta[relay.Constant][17] /* ty=Tensor[(392), uint16] */, dtype="uint16") /* ty=Tensor[(392), uint16] */;
  %223 = reshape(%220, newshape=[10, 1, 9]) /* ty=Tensor[(10, 1, 9), float64] */;
  %224 = reshape(%221, newshape=[]) /* ty=uint16 */;
  %225 = reshape(%222, newshape=[392]) /* ty=Tensor[(392), uint16] */;
  %226 = @func_285(%223, %224, %225) /* ty=(Tensor[(10, 1, 9), float64], Tensor[(1792), float64], uint16, Tensor[(14, 7, 4), bool], Tensor[(14, 7, 4), bool], Tensor[(392), float64]) */;
  %227 = @func_4538() /* ty=(Tensor[(960), int8], Tensor[(8, 30), float64], Tensor[(12, 5, 13), float32], Tensor[(12, 5, 13), float64]) */;
  %228 = %219.0;
  %229 = %226.1;
  %230 = %227.2;
  (%228, %229, %var_4823, meta[relay.Constant][16] /* ty=uint16 */, meta[relay.Constant][17] /* ty=Tensor[(392), uint16] */, %230)
}

def @func_3363() -> Tensor[(8, 8, 9), uint64] {
  %231 = @func_2161() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32], Tensor[(312), float32]) */;
  %232 = %231.0;
  %233 = cast(meta[relay.Constant][18] /* ty=Tensor[(8, 8, 9), float64] */, dtype="uint64") /* ty=Tensor[(8, 8, 9), uint64] */;
  %234 = shape_of(%232, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(%232, dtype="uint64") /* ty=Tensor[(8, 8, 9), uint64] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  add(%235, %236) /* ty=Tensor[(8, 8, 9), uint64] */
}

def @func_3692(%var_3666: Tensor[(10, 4, 6), float64]) -> (Tensor[(10, 4, 6), float64], Tensor[(10, 4, 6), float64]) {
  %237 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 4, 6), float64] */, dtype="float64") /* ty=Tensor[(10, 4, 6), float64] */;
  %238 = shape_of(%var_3666, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(%var_3666, dtype="float64") /* ty=Tensor[(10, 4, 6), float64] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %241 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 4, 6), float64] */, dtype="float64") /* ty=Tensor[(10, 4, 6), float64] */;
  %242 = floor_divide(%239, %240) /* ty=Tensor[(10, 4, 6), float64] */;
  %243 = log2(%241) /* ty=Tensor[(10, 4, 6), float64] */;
  (%242, %243)
}

def @main(%var_7538: Tensor[(6, 10, 11), float32]) -> (Tensor[(6, 10, 11), float32],) {
  %244 = cast(%var_7538, dtype="float32") /* ty=Tensor[(6, 10, 11), float32] */;
  %245 = acos(%244) /* ty=Tensor[(6, 10, 11), float32] */;
  (%245,)
}

def @func_2742(%var_2733: Tensor[(11, 8, 4), float32]) -> (Tensor[(11, 8, 4), float32],) {
  %246 = cast(%var_2733, dtype="float32") /* ty=Tensor[(11, 8, 4), float32] */;
  %247 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(11, 8, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %248 = cast(meta[relay.Constant][20] /* ty=Tensor[(11, 8, 4), float32] */, dtype="float32") /* ty=Tensor[(11, 8, 4), float32] */;
  %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %250 = floor_mod(%248, %249) /* ty=Tensor[(11, 8, 4), float32] */;
  (%250,)
}

def @func_4398() -> (Tensor[(8, 8, 9), bool], Tensor[(960), int8], Tensor[(8, 8, 9), float64]) {
  %251 = @func_1600() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %252 = %251.0;
  %253 = @func_3311() /* ty=Tensor[(8, 8, 9), float64] */;
  %254 = cast(%253, dtype="bool") /* ty=Tensor[(8, 8, 9), bool] */;
  %255 = shape_of(%252, dtype="int32") /* ty=Tensor[(3), int32] */;
  %256 = cast(%252, dtype="bool") /* ty=Tensor[(8, 8, 9), bool] */;
  %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %258 = @func_3209() /* ty=(Tensor[(13, 8, 3), bool], Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64], Tensor[(1792), float64], Tensor[(960), int8]) */;
  %259 = not_equal(%256, %257) /* ty=Tensor[(8, 8, 9), bool] */;
  %260 = %258.4;
  %261 = @func_1513() /* ty=Tensor[(8, 8, 9), float64] */;
  (%259, %260, %261)
}

def @func_2074(%var_2028: Tensor[(90), float64], %var_2029: uint16, %var_2049: Tensor[(1800), float64]) -> (Tensor[(1792), float64], Tensor[(90), float64], uint16, Tensor[(7, 7, 8), float64], Tensor[(14, 7, 4), bool], Tensor[(1800), float64], Tensor[(8, 8, 9), float64]) {
  %262 = cast(%var_2028, dtype="float64") /* ty=Tensor[(90), float64] */;
  %263 = cast(%var_2029, dtype="uint16") /* ty=uint16 */;
  %264 = cast(meta[relay.Constant][21] /* ty=Tensor[(7, 7, 8), float64] */, dtype="float64") /* ty=Tensor[(7, 7, 8), float64] */;
  %265 = cosh(%264) /* ty=Tensor[(7, 7, 8), float64] */;
  %266 = cast(%265, dtype="uint16") /* ty=Tensor[(7, 7, 8), uint16] */;
  %267 = reshape(%262, newshape=[10, 1, 9]) /* ty=Tensor[(10, 1, 9), float64] */;
  %268 = reshape(%263, newshape=[]) /* ty=uint16 */;
  %269 = reshape(%266, newshape=[392]) /* ty=Tensor[(392), uint16] */;
  %270 = @func_285(%267, %268, %269) /* ty=(Tensor[(10, 1, 9), float64], Tensor[(1792), float64], uint16, Tensor[(14, 7, 4), bool], Tensor[(14, 7, 4), bool], Tensor[(392), float64]) */;
  %271 = cast(meta[relay.Constant][21] /* ty=Tensor[(7, 7, 8), float64] */, dtype="float64") /* ty=Tensor[(7, 7, 8), float64] */;
  %272 = shape_of(%265, dtype="int32") /* ty=Tensor[(3), int32] */;
  %273 = cast(%265, dtype="float64") /* ty=Tensor[(7, 7, 8), float64] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %275 = cast(%var_2049, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %276 = cast(%var_2049, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %277 = cast(%var_2049, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %278 = %270.1;
  %279 = cast(%278, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %280 = cast(%var_2029, dtype="uint16") /* ty=uint16 */;
  %281 = reshape(%275, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), float64] */;
  %282 = reshape(%276, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), float64] */;
  %283 = reshape(%277, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), float32] */;
  %284 = reshape(%279, newshape=[1792]) /* ty=Tensor[(1792), float64] */;
  %285 = reshape(%280, newshape=[]) /* ty=uint16 */;
  %286 = @func_449(%281, %282, %283, %284, %285) /* ty=(Tensor[(15, 15, 8), float32], Tensor[(14, 7, 4), bool], Tensor[(1792), float64], uint16, Tensor[(14, 7, 4), bool], Tensor[(15, 15, 8), float32]) */;
  %287 = power(%273, %274) /* ty=Tensor[(7, 7, 8), float64] */;
  %288 = %286.4;
  %289 = @func_1170() /* ty=Tensor[(8, 8, 9), float64] */;
  (%278, %var_2028, %var_2029, %287, %288, %var_2049, %289)
}

def @func_6266(%var_6255: Tensor[(2, 72), float32], %var_6264: uint16) -> (Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32], Tensor[(10, 4, 6), bool], Tensor[(9, 2, 8), float32], Tensor[(2, 72), float32], Tensor[(1800), float64], uint16) {
  %290 = @func_4238() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %291 = @func_2382() /* ty=(Tensor[(13, 8, 3), float32],) */;
  %292 = cast(meta[relay.Constant][22] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %293 = reshape(%292, newshape=[10, 4, 6]) /* ty=Tensor[(10, 4, 6), float64] */;
  %294 = @func_3692(%293) /* ty=(Tensor[(10, 4, 6), float64], Tensor[(10, 4, 6), float64]) */;
  %295 = %294.1;
  %296 = cast(meta[relay.Constant][22] /* ty=Tensor[(240), float64] */, dtype="bool") /* ty=Tensor[(240), bool] */;
  %297 = shape_of(%295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %298 = cast(%295, dtype="bool") /* ty=Tensor[(10, 4, 6), bool] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %300 = cast(%var_6255, dtype="float32") /* ty=Tensor[(2, 72), float32] */;
  %301 = reshape(%300, newshape=[9, 2, 8]) /* ty=Tensor[(9, 2, 8), float32] */;
  %302 = logical_and(%298, %299) /* ty=Tensor[(10, 4, 6), bool] */;
  %303 = cast(%302, dtype="int64") /* ty=Tensor[(10, 4, 6), int64] */;
  %304 = cast(%var_6264, dtype="uint16") /* ty=uint16 */;
  %305 = reshape(%303, newshape=[5, 16, 3]) /* ty=Tensor[(5, 16, 3), int64] */;
  %306 = reshape(%304, newshape=[]) /* ty=uint16 */;
  %307 = @func_5290(%305, %306) /* ty=(Tensor[(5, 16, 3), bool], Tensor[(15, 15, 8), float32], Tensor[(1800), float64], Tensor[(1792), float64], uint16) */;
  %308 = %290.0;
  %309 = %291.0;
  %310 = @func_3829(%301) /* ty=Tensor[(9, 2, 8), float32] */;
  %311 = %307.2;
  (%308, %309, %302, %310, %var_6255, %311, %var_6264)
}

def @func_7070() -> (Tensor[(960), int8], Tensor[(8, 8, 9), float64]) {
  %312 = @func_2266() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(16, 10, 6), int8]) */;
  %313 = @func_4592() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %314 = %312.1;
  %315 = %313.0;
  (%314, %315)
}

def @func_5936() -> (Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64], Tensor[(2145, 1), uint8], Tensor[(15, 6), float64]) {
  %316 = @func_2451() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(960), int8]) */;
  %317 = @func_4468() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %318 = @func_4004() /* ty=(Tensor[(2145, 1), uint8], Tensor[(8, 8, 9), float64]) */;
  %319 = %317.0;
  %320 = cast(%319, dtype="float64") /* ty=Tensor[(8, 8, 9), float64] */;
  %321 = reshape(%320, newshape=[8, 8, 9]) /* ty=Tensor[(8, 8, 9), float64] */;
  %322 = @func_3499(%321) /* ty=(Tensor[(8, 8, 9), float32], Tensor[(312), float32], Tensor[(8, 8, 9), float64], Tensor[(15, 6), float64], Tensor[(8, 8, 9), float64], Tensor[(10, 8, 12), bool], Tensor[(960), float32]) */;
  %323 = %316.0;
  %324 = %318.0;
  %325 = %322.3;
  (%323, %319, %324, %325)
}

def @func_1600() -> (Tensor[(8, 8, 9), float64],) {
  %326 = @func_954() /* ty=Tensor[(8, 8, 9), float64] */;
  (%326,)
}

def @func_4592() -> (Tensor[(8, 8, 9), float64],) {
  %327 = @func_1202() /* ty=Tensor[(8, 8, 9), float64] */;
  (%327,)
}

def @func_2018() -> (Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(960), int8], Tensor[(16, 10, 6), int8]) {
  %328 = cast(meta[relay.Constant][23] /* ty=Tensor[(960), int8] */, dtype="int8") /* ty=Tensor[(960), int8] */;
  %329 = reshape(%328, newshape=[960]) /* ty=Tensor[(960), int8] */;
  %330 = @func_1129(%329) /* ty=(Tensor[(8, 8, 9), float64], Tensor[(14, 7, 4), bool], Tensor[(960), int8]) */;
  %331 = cast(meta[relay.Constant][23] /* ty=Tensor[(960), int8] */, dtype="int8") /* ty=Tensor[(960), int8] */;
  %332 = reshape(%331, newshape=[16, 10, 6]) /* ty=Tensor[(16, 10, 6), int8] */;
  %333 = @func_476(%332) /* ty=(Tensor[(16, 10, 6), int8], Tensor[(14, 7, 4), bool], Tensor[(392, 1), uint16]) */;
  %334 = @func_1958() /* ty=Tensor[(8, 8, 9), float64] */;
  %335 = %330.2;
  %336 = %333.0;
  (%334, %335, meta[relay.Constant][23] /* ty=Tensor[(960), int8] */, %336)
}

def @func_2266() -> (Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(16, 10, 6), int8]) {
  %337 = @func_2018() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(960), int8], Tensor[(16, 10, 6), int8]) */;
  %338 = %337.2;
  %339 = cast(%338, dtype="int8") /* ty=Tensor[(960), int8] */;
  %340 = reshape(%339, newshape=[16, 10, 6]) /* ty=Tensor[(16, 10, 6), int8] */;
  %341 = @func_476(%340) /* ty=(Tensor[(16, 10, 6), int8], Tensor[(14, 7, 4), bool], Tensor[(392, 1), uint16]) */;
  %342 = @func_1156() /* ty=Tensor[(8, 8, 9), float64] */;
  %343 = %341.0;
  (%342, %338, %343)
}

def @func_3499(%var_3431: Tensor[(8, 8, 9), float64]) -> (Tensor[(8, 8, 9), float32], Tensor[(312), float32], Tensor[(8, 8, 9), float64], Tensor[(15, 6), float64], Tensor[(8, 8, 9), float64], Tensor[(10, 8, 12), bool], Tensor[(960), float32]) {
  %344 = @func_1156() /* ty=Tensor[(8, 8, 9), float64] */;
  %345 = cast(%var_3431, dtype="float32") /* ty=Tensor[(8, 8, 9), float32] */;
  %346 = shape_of(%344, dtype="int32") /* ty=Tensor[(3), int32] */;
  %347 = cast(%344, dtype="float32") /* ty=Tensor[(8, 8, 9), float32] */;
  %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %349 = @func_2986() /* ty=(Tensor[(16, 10, 6), int8], Tensor[(13, 8, 3), float32], Tensor[(312), float32]) */;
  %350 = cast(%344, dtype="float64") /* ty=Tensor[(8, 8, 9), float64] */;
  %351 = @func_2716() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(8, 8, 9), float64], Tensor[(392, 1), bool], Tensor[(196, 2), uint16], Tensor[(2145, 1), uint8], Tensor[(15, 6), float64]) */;
  %352 = cast(meta[relay.Constant][24] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %353 = reshape(%352, newshape=[10, 8, 12]) /* ty=Tensor[(10, 8, 12), float32] */;
  %354 = @func_3238(%353) /* ty=(Tensor[(10, 8, 12), bool],) */;
  %355 = floor_mod(%347, %348) /* ty=Tensor[(8, 8, 9), float32] */;
  %356 = %349.2;
  %357 = sin(%350) /* ty=Tensor[(8, 8, 9), float64] */;
  %358 = %351.5;
  %359 = @func_1170() /* ty=Tensor[(8, 8, 9), float64] */;
  %360 = %354.0;
  (%355, %356, %357, %358, %359, %360, meta[relay.Constant][24] /* ty=Tensor[(960), float32] */)
}

def @func_7287() -> (Tensor[(3, 10, 15), bool],) {
  %361 = cast(meta[relay.Constant][26] /* ty=Tensor[(3, 10, 15), float32] */, dtype="bool") /* ty=Tensor[(3, 10, 15), bool] */;
  %362 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(3, 10, 15), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %363 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 10, 15), float32] */, dtype="bool") /* ty=Tensor[(3, 10, 15), bool] */;
  %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %365 = equal(%363, %364) /* ty=Tensor[(3, 10, 15), bool] */;
  (%365,)
}

def @func_2085() -> Tensor[(8, 8, 9), float64] {
  @func_1156() /* ty=Tensor[(8, 8, 9), float64] */
}

def @func_4004() -> (Tensor[(2145, 1), uint8], Tensor[(8, 8, 9), float64]) {
  %366 = @func_2716() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(8, 8, 9), float64], Tensor[(392, 1), bool], Tensor[(196, 2), uint16], Tensor[(2145, 1), uint8], Tensor[(15, 6), float64]) */;
  %367 = %366.4;
  %368 = @func_954() /* ty=Tensor[(8, 8, 9), float64] */;
  (%367, %368)
}

def @func_7439(%var_7408: uint32) -> (Tensor[(13, 14, 9), float32], Tensor[(8, 8, 9), float64]) {
  %369 = cast(%var_7408, dtype="bool") /* ty=bool */;
  %370 = cast(meta[relay.Constant][27] /* ty=Tensor[(13, 14, 9), uint32] */, dtype="bool") /* ty=Tensor[(13, 14, 9), bool] */;
  %371 = greater(%369, %370) /* ty=Tensor[(13, 14, 9), bool] */;
  %372 = cast(%371, dtype="float32") /* ty=Tensor[(13, 14, 9), float32] */;
  %373 = exp(%372) /* ty=Tensor[(13, 14, 9), float32] */;
  %374 = @func_1513() /* ty=Tensor[(8, 8, 9), float64] */;
  (%373, %374)
}

def @func_7228() -> Tensor[(8, 8, 9), float64] {
  @func_3311() /* ty=Tensor[(8, 8, 9), float64] */
}

def @func_4998() -> (Tensor[(8, 8, 9), float64],) {
  %375 = @func_4765() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %376 = %375.0;
  (%376,)
}

def @func_7302() -> (Tensor[(8, 8, 9), float64],) {
  %377 = @func_2652() /* ty=Tensor[(8, 8, 9), float64] */;
  (%377,)
}

def @func_2394() -> (Tensor[(8, 8, 9), float64],) {
  %378 = @func_1202() /* ty=Tensor[(8, 8, 9), float64] */;
  (%378,)
}

def @func_4407(%var_4400: Tensor[(10, 9, 2), float64]) -> (Tensor[(10, 9, 2), float64], Tensor[(16, 10, 6), int8]) {
  %379 = cast(%var_4400, dtype="float64") /* ty=Tensor[(10, 9, 2), float64] */;
  %380 = @func_3614() /* ty=(Tensor[(16, 10, 6), int8], Tensor[(960), int8], Tensor[(8, 8, 9), int16], Tensor[(8, 8, 9), float32]) */;
  %381 = exp(%379) /* ty=Tensor[(10, 9, 2), float64] */;
  %382 = %380.0;
  (%381, %382)
}

def @func_2626(%var_2574: Tensor[(4, 448), float64], %var_2592: Tensor[(960), int8]) -> (Tensor[(1792), float64], Tensor[(4, 448), float64], Tensor[(1800), float64], Tensor[(14, 7, 4), bool], Tensor[(960), int8], Tensor[(8, 8, 9), float64]) {
  %383 = cast(meta[relay.Constant][28] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %384 = cast(meta[relay.Constant][28] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %385 = cast(meta[relay.Constant][28] /* ty=Tensor[(1800), float64] */, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %386 = cast(%var_2574, dtype="float64") /* ty=Tensor[(4, 448), float64] */;
  %387 = cast(meta[relay.Constant][29] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %388 = reshape(%383, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), float64] */;
  %389 = reshape(%384, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), float64] */;
  %390 = reshape(%385, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), float32] */;
  %391 = reshape(%386, newshape=[1792]) /* ty=Tensor[(1792), float64] */;
  %392 = reshape(%387, newshape=[]) /* ty=uint16 */;
  %393 = @func_449(%388, %389, %390, %391, %392) /* ty=(Tensor[(15, 15, 8), float32], Tensor[(14, 7, 4), bool], Tensor[(1792), float64], uint16, Tensor[(14, 7, 4), bool], Tensor[(15, 15, 8), float32]) */;
  %394 = cast(meta[relay.Constant][28] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %395 = cast(meta[relay.Constant][29] /* ty=uint16 */, dtype="float64") /* ty=float64 */;
  %396 = cast(%var_2592, dtype="int8") /* ty=Tensor[(960), int8] */;
  %397 = reshape(%396, newshape=[960]) /* ty=Tensor[(960), int8] */;
  %398 = @func_1129(%397) /* ty=(Tensor[(8, 8, 9), float64], Tensor[(14, 7, 4), bool], Tensor[(960), int8]) */;
  %399 = @func_1958() /* ty=Tensor[(8, 8, 9), float64] */;
  %400 = cast(%399, dtype="float64") /* ty=Tensor[(8, 8, 9), float64] */;
  %401 = atan(%400) /* ty=Tensor[(8, 8, 9), float64] */;
  %402 = cast(%401, dtype="float32") /* ty=Tensor[(8, 8, 9), float32] */;
  %403 = cast(meta[relay.Constant][29] /* ty=uint16 */, dtype="float32") /* ty=float32 */;
  %404 = maximum(%402, %403) /* ty=Tensor[(8, 8, 9), float32] */;
  %405 = cast(%401, dtype="float64") /* ty=Tensor[(8, 8, 9), float64] */;
  %406 = shape_of(%404, dtype="int32") /* ty=Tensor[(3), int32] */;
  %407 = cast(%404, dtype="float64") /* ty=Tensor[(8, 8, 9), float64] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %409 = %393.2;
  %410 = minimum(%394, %395) /* ty=Tensor[(1800), float64] */;
  %411 = %398.1;
  %412 = mod(%407, %408) /* ty=Tensor[(8, 8, 9), float64] */;
  (%409, %var_2574, %410, %411, %var_2592, %412)
}

def @func_6854(%var_6837: Tensor[(180), float64]) -> (Tensor[(960), int8], Tensor[(8, 8, 9), float64], Tensor[(576), float64], Tensor[(8, 8, 9), float64], Tensor[(10, 9, 2), float64], Tensor[(180), float64], Tensor[(8, 8, 9), float64]) {
  %413 = @func_4398() /* ty=(Tensor[(8, 8, 9), bool], Tensor[(960), int8], Tensor[(8, 8, 9), float64]) */;
  %414 = cast(meta[relay.Constant][30] /* ty=Tensor[(576), float64] */, dtype="float64") /* ty=Tensor[(576), float64] */;
  %415 = reshape(%414, newshape=[8, 8, 9]) /* ty=Tensor[(8, 8, 9), float64] */;
  %416 = @func_4649(%415) /* ty=(Tensor[(8, 8, 9), bool], Tensor[(8, 8, 9), float64]) */;
  %417 = @func_5975() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) */;
  %418 = cast(%var_6837, dtype="float64") /* ty=Tensor[(180), float64] */;
  %419 = reshape(%418, newshape=[10, 9, 2]) /* ty=Tensor[(10, 9, 2), float64] */;
  %420 = @func_4407(%419) /* ty=(Tensor[(10, 9, 2), float64], Tensor[(16, 10, 6), int8]) */;
  %421 = %413.1;
  %422 = %416.1;
  %423 = %417.0;
  %424 = %420.0;
  %425 = @func_3311() /* ty=Tensor[(8, 8, 9), float64] */;
  (%421, %422, meta[relay.Constant][30] /* ty=Tensor[(576), float64] */, %423, %424, %var_6837, %425)
}

def @func_5670(%var_5665: Tensor[(2145), uint8], %var_5666: Tensor[(90), float64], %var_5668: Tensor[(392), uint16]) -> (Tensor[(8, 8, 9), bool], Tensor[(392), float64], Tensor[(2145), uint8], Tensor[(90), float64], uint16, Tensor[(392), uint16]) {
  %426 = @func_1600() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %427 = %426.0;
  %428 = cast(meta[relay.Constant][31] /* ty=Tensor[(8, 8, 9), float64] */, dtype="bool") /* ty=Tensor[(8, 8, 9), bool] */;
  %429 = shape_of(%427, dtype="int32") /* ty=Tensor[(3), int32] */;
  %430 = cast(%427, dtype="bool") /* ty=Tensor[(8, 8, 9), bool] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %432 = cast(%var_5665, dtype="uint8") /* ty=Tensor[(2145), uint8] */;
  %433 = cast(%var_5666, dtype="float64") /* ty=Tensor[(90), float64] */;
  %434 = cast(meta[relay.Constant][32] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %435 = cast(%var_5668, dtype="uint16") /* ty=Tensor[(392), uint16] */;
  %436 = reshape(%432, newshape=[13, 15, 11]) /* ty=Tensor[(13, 15, 11), uint8] */;
  %437 = reshape(%433, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %438 = reshape(%434, newshape=[]) /* ty=uint16 */;
  %439 = reshape(%435, newshape=[196, 2]) /* ty=Tensor[(196, 2), uint16] */;
  %440 = @func_795(%436, %437, %438, %439) /* ty=(Tensor[(13, 15, 11), uint8], Tensor[(90), float64], Tensor[(196, 2), uint16], Tensor[(392), float64], Tensor[(13, 15, 11), int16]) */;
  %441 = less_equal(%430, %431) /* ty=Tensor[(8, 8, 9), bool] */;
  %442 = %440.3;
  (%441, %442, %var_5665, %var_5666, meta[relay.Constant][32] /* ty=uint16 */, %var_5668)
}

def @func_7108() -> Tensor[(8, 8, 9), float64] {
  %443 = @func_5504() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %443.0
}

def @func_6726() -> Tensor[(8, 8, 9), float64] {
  %444 = @func_2451() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(960), int8]) */;
  %444.0
}

def @func_3829(%var_3821: Tensor[(9, 2, 8), float32]) -> Tensor[(9, 2, 8), float32] {
  %445 = cast(%var_3821, dtype="float32") /* ty=Tensor[(9, 2, 8), float32] */;
  acosh(%445) /* ty=Tensor[(9, 2, 8), float32] */
}

def @func_7402() -> (Tensor[(960), int8], Tensor[(8, 8, 9), float64]) {
  %446 = @func_7125() /* ty=(Tensor[(960), int8],) */;
  %447 = @func_2394() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %448 = %446.0;
  %449 = %447.0;
  (%448, %449)
}

def @func_6069() -> (Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) {
  %450 = @func_5782() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) */;
  %451 = %450.0;
  %452 = @func_1202() /* ty=Tensor[(8, 8, 9), float64] */;
  (%451, %452)
}

def @func_5975() -> (Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) {
  %453 = @func_1202() /* ty=Tensor[(8, 8, 9), float64] */;
  %454 = @func_5385() /* ty=Tensor[(8, 8, 9), float64] */;
  (%453, %454)
}

def @func_7125() -> (Tensor[(960), int8],) {
  %455 = @func_6379() /* ty=(Tensor[(960), int8],) */;
  %456 = %455.0;
  (%456,)
}

def @func_2846(%var_2841: float64, %var_2842: Tensor[(1, 10, 6), float64]) -> Tensor[(1, 10, 6), float64] {
  %457 = cast(%var_2841, dtype="float64") /* ty=float64 */;
  %458 = cast(%var_2842, dtype="float64") /* ty=Tensor[(1, 10, 6), float64] */;
  power(%457, %458) /* ty=Tensor[(1, 10, 6), float64] */
}

def @func_1751() -> (Tensor[(8, 8, 9), float64],) {
  %459 = @func_1170() /* ty=Tensor[(8, 8, 9), float64] */;
  (%459,)
}

def @func_1722() -> (Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) {
  %460 = @func_1170() /* ty=Tensor[(8, 8, 9), float64] */;
  %461 = @func_1202() /* ty=Tensor[(8, 8, 9), float64] */;
  (%460, %461)
}

def @func_5385() -> Tensor[(8, 8, 9), float64] {
  %462 = @func_4238() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %462.0
}

def @func_4570() -> Tensor[(8, 8, 9), float64] {
  @func_1513() /* ty=Tensor[(8, 8, 9), float64] */
}

def @func_954() -> Tensor[(8, 8, 9), float64] {
  %463 = cast(meta[relay.Constant][33] /* ty=Tensor[(8, 8, 9), float64] */, dtype="float64") /* ty=Tensor[(8, 8, 9), float64] */;
  rsqrt(%463) /* ty=Tensor[(8, 8, 9), float64] */
}

def @func_2451() -> (Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(960), int8]) {
  %464 = cast(meta[relay.Constant][34] /* ty=Tensor[(960), int8] */, dtype="int8") /* ty=Tensor[(960), int8] */;
  %465 = reshape(%464, newshape=[960]) /* ty=Tensor[(960), int8] */;
  %466 = @func_1129(%465) /* ty=(Tensor[(8, 8, 9), float64], Tensor[(14, 7, 4), bool], Tensor[(960), int8]) */;
  %467 = @func_2085() /* ty=Tensor[(8, 8, 9), float64] */;
  %468 = %466.2;
  (%467, %468, meta[relay.Constant][34] /* ty=Tensor[(960), int8] */)
}

def @func_2464(%var_2460: Tensor[(13, 10, 12), bool]) -> (Tensor[(13, 10, 12), bool],) {
  %469 = cast(meta[relay.Constant][35] /* ty=Tensor[(13, 1, 12), bool] */, dtype="bool") /* ty=Tensor[(13, 1, 12), bool] */;
  %470 = cast(%var_2460, dtype="bool") /* ty=Tensor[(13, 10, 12), bool] */;
  %471 = logical_and(%469, %470) /* ty=Tensor[(13, 10, 12), bool] */;
  (%471,)
}

def @func_5290(%var_5255: Tensor[(5, 16, 3), int64], %var_5269: uint16) -> (Tensor[(5, 16, 3), bool], Tensor[(15, 15, 8), float32], Tensor[(1800), float64], Tensor[(1792), float64], uint16) {
  %472 = cast(%var_5255, dtype="bool") /* ty=Tensor[(5, 16, 3), bool] */;
  %473 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(5, 16, 3), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %474 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 16, 3), int64] */, dtype="bool") /* ty=Tensor[(5, 16, 3), bool] */;
  %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %476 = cast(meta[relay.Constant][37] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %477 = cast(meta[relay.Constant][37] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %478 = cast(meta[relay.Constant][37] /* ty=Tensor[(1800), float64] */, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %479 = cast(meta[relay.Constant][38] /* ty=Tensor[(1792), float64] */, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %480 = cast(%var_5269, dtype="uint16") /* ty=uint16 */;
  %481 = reshape(%476, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), float64] */;
  %482 = reshape(%477, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), float64] */;
  %483 = reshape(%478, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), float32] */;
  %484 = reshape(%479, newshape=[1792]) /* ty=Tensor[(1792), float64] */;
  %485 = reshape(%480, newshape=[]) /* ty=uint16 */;
  %486 = @func_449(%481, %482, %483, %484, %485) /* ty=(Tensor[(15, 15, 8), float32], Tensor[(14, 7, 4), bool], Tensor[(1792), float64], uint16, Tensor[(14, 7, 4), bool], Tensor[(15, 15, 8), float32]) */;
  %487 = less(%474, %475) /* ty=Tensor[(5, 16, 3), bool] */;
  %488 = %486.0;
  (%487, %488, meta[relay.Constant][37] /* ty=Tensor[(1800), float64] */, meta[relay.Constant][38] /* ty=Tensor[(1792), float64] */, %var_5269)
}

def @func_6386() -> Tensor[(8, 8, 9), float64] {
  %489 = @func_6069() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) */;
  %489.1
}

def @func_2382() -> (Tensor[(13, 8, 3), float32],) {
  %490 = @func_2161() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32], Tensor[(312), float32]) */;
  %491 = %490.1;
  (%491,)
}

def @func_2716() -> (Tensor[(13, 8, 3), float32], Tensor[(8, 8, 9), float64], Tensor[(392, 1), bool], Tensor[(196, 2), uint16], Tensor[(2145, 1), uint8], Tensor[(15, 6), float64]) {
  %492 = @func_2382() /* ty=(Tensor[(13, 8, 3), float32],) */;
  %493 = cast(meta[relay.Constant][39] /* ty=Tensor[(392, 1), uint16] */, dtype="uint16") /* ty=Tensor[(392, 1), uint16] */;
  %494 = reshape(%493, newshape=[7, 56]) /* ty=Tensor[(7, 56), uint16] */;
  %495 = @func_1821(%494) /* ty=(Tensor[(8, 8, 9), float64], Tensor[(14, 7, 4), bool], uint16, Tensor[(7, 56), uint16]) */;
  %496 = %495.2;
  %497 = cast(meta[relay.Constant][39] /* ty=Tensor[(392, 1), uint16] */, dtype="bool") /* ty=Tensor[(392, 1), bool] */;
  %498 = cast(%496, dtype="bool") /* ty=bool */;
  %499 = cast(meta[relay.Constant][40] /* ty=Tensor[(2145, 1), uint8] */, dtype="uint8") /* ty=Tensor[(2145, 1), uint8] */;
  %500 = cast(meta[relay.Constant][41] /* ty=Tensor[(15, 6), float64] */, dtype="float64") /* ty=Tensor[(15, 6), float64] */;
  %501 = cast(%496, dtype="uint16") /* ty=uint16 */;
  %502 = cast(meta[relay.Constant][39] /* ty=Tensor[(392, 1), uint16] */, dtype="uint16") /* ty=Tensor[(392, 1), uint16] */;
  %503 = reshape(%499, newshape=[13, 15, 11]) /* ty=Tensor[(13, 15, 11), uint8] */;
  %504 = reshape(%500, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %505 = reshape(%501, newshape=[]) /* ty=uint16 */;
  %506 = reshape(%502, newshape=[196, 2]) /* ty=Tensor[(196, 2), uint16] */;
  %507 = @func_795(%503, %504, %505, %506) /* ty=(Tensor[(13, 15, 11), uint8], Tensor[(90), float64], Tensor[(196, 2), uint16], Tensor[(392), float64], Tensor[(13, 15, 11), int16]) */;
  %508 = %492.0;
  %509 = @func_954() /* ty=Tensor[(8, 8, 9), float64] */;
  %510 = greater(%497, %498) /* ty=Tensor[(392, 1), bool] */;
  %511 = %507.2;
  (%508, %509, %510, %511, meta[relay.Constant][40] /* ty=Tensor[(2145, 1), uint8] */, meta[relay.Constant][41] /* ty=Tensor[(15, 6), float64] */)
}

def @func_3311() -> Tensor[(8, 8, 9), float64] {
  %512 = @func_1600() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %512.0
}

def @func_2161() -> (Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32], Tensor[(312), float32]) {
  %513 = cast(meta[relay.Constant][42] /* ty=Tensor[(312), float32] */, dtype="float32") /* ty=Tensor[(312), float32] */;
  %514 = reshape(%513, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), float32] */;
  %515 = @func_1513() /* ty=Tensor[(8, 8, 9), float64] */;
  %516 = @func_963(%514) /* ty=Tensor[(13, 8, 3), float32] */;
  (%515, %516, meta[relay.Constant][42] /* ty=Tensor[(312), float32] */)
}

def @func_6553() -> (Tensor[(960), int8], Tensor[(8, 8, 9), float64]) {
  %517 = @func_3209() /* ty=(Tensor[(13, 8, 3), bool], Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64], Tensor[(1792), float64], Tensor[(960), int8]) */;
  %518 = @func_4998() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %519 = %517.4;
  %520 = %518.0;
  (%519, %520)
}

def @func_6088() -> (Tensor[(8, 8, 9), float64],) {
  %521 = @func_4238() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %522 = %521.0;
  (%522,)
}

def @func_2986() -> (Tensor[(16, 10, 6), int8], Tensor[(13, 8, 3), float32], Tensor[(312), float32]) {
  %523 = @func_2266() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(16, 10, 6), int8]) */;
  %524 = cast(meta[relay.Constant][43] /* ty=Tensor[(312), float32] */, dtype="float32") /* ty=Tensor[(312), float32] */;
  %525 = reshape(%524, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), float32] */;
  %526 = %523.2;
  %527 = @func_963(%525) /* ty=Tensor[(13, 8, 3), float32] */;
  (%526, %527, meta[relay.Constant][43] /* ty=Tensor[(312), float32] */)
}

def @func_5697() -> Tensor[(8, 8, 9), float64] {
  @func_5385() /* ty=Tensor[(8, 8, 9), float64] */
}

def @func_4888(%var_4849: Tensor[(13, 2), int16]) -> (Tensor[(13, 2), int16], Tensor[(8, 8, 9), float64]) {
  %528 = cast(%var_4849, dtype="int16") /* ty=Tensor[(13, 2), int16] */;
  %529 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(13, 2), int16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %530 = cast(meta[relay.Constant][44] /* ty=Tensor[(13, 2), int16] */, dtype="int16") /* ty=Tensor[(13, 2), int16] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %532 = @func_4765() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %533 = bitwise_and(%530, %531) /* ty=Tensor[(13, 2), int16] */;
  %534 = %532.0;
  (%533, %534)
}

def @func_6636(%var_6630: Tensor[(1, 1792), float64]) -> (Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32], Tensor[(8, 8, 9), float64], Tensor[(1, 1792), float64], Tensor[(960), int8], Tensor[(8, 8, 9), float64]) {
  %535 = @func_1751() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %536 = @func_5377() /* ty=(Tensor[(13, 8, 3), float32],) */;
  %537 = cast(%var_6630, dtype="float64") /* ty=Tensor[(1, 1792), float64] */;
  %538 = cast(meta[relay.Constant][45] /* ty=Tensor[(960), int8] */, dtype="int8") /* ty=Tensor[(960), int8] */;
  %539 = reshape(%537, newshape=[4, 448]) /* ty=Tensor[(4, 448), float64] */;
  %540 = reshape(%538, newshape=[960]) /* ty=Tensor[(960), int8] */;
  %541 = @func_2626(%539, %540) /* ty=(Tensor[(1792), float64], Tensor[(4, 448), float64], Tensor[(1800), float64], Tensor[(14, 7, 4), bool], Tensor[(960), int8], Tensor[(8, 8, 9), float64]) */;
  %542 = %535.0;
  %543 = %536.0;
  %544 = %541.5;
  %545 = @func_6386() /* ty=Tensor[(8, 8, 9), float64] */;
  (%542, %543, %544, %var_6630, meta[relay.Constant][45] /* ty=Tensor[(960), int8] */, %545)
}

def @func_449(%var_397: Tensor[(15, 15, 8), float64], %var_398: Tensor[(15, 15, 8), float64], %var_421: Tensor[(15, 15, 8), float32], %var_439: Tensor[(1792), float64], %var_440: uint16) -> (Tensor[(15, 15, 8), float32], Tensor[(14, 7, 4), bool], Tensor[(1792), float64], uint16, Tensor[(14, 7, 4), bool], Tensor[(15, 15, 8), float32]) {
  %546 = cast(%var_398, dtype="float64") /* ty=Tensor[(15, 15, 8), float64] */;
  %547 = exp(%546) /* ty=Tensor[(15, 15, 8), float64] */;
  %548 = cast(%547, dtype="float32") /* ty=Tensor[(15, 15, 8), float32] */;
  %549 = log10(%548) /* ty=Tensor[(15, 15, 8), float32] */;
  %550 = cast(%var_398, dtype="float64") /* ty=Tensor[(15, 15, 8), float64] */;
  %551 = shape_of(%var_397, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(%var_397, dtype="float64") /* ty=Tensor[(15, 15, 8), float64] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %554 = add(%552, %553) /* ty=Tensor[(15, 15, 8), float64] */;
  %555 = cast(%554, dtype="float32") /* ty=Tensor[(15, 15, 8), float32] */;
  %556 = shape_of(%549, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(%549, dtype="float32") /* ty=Tensor[(15, 15, 8), float32] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %559 = cast(%var_439, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %560 = cast(%var_439, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %561 = cast(%var_440, dtype="uint16") /* ty=uint16 */;
  %562 = reshape(%559, newshape=[16, 14, 8]) /* ty=Tensor[(16, 14, 8), float64] */;
  %563 = reshape(%560, newshape=[16, 14, 8]) /* ty=Tensor[(16, 14, 8), float64] */;
  %564 = reshape(%561, newshape=[]) /* ty=uint16 */;
  %565 = @func_183(%562, %563, %564) /* ty=(Tensor[(16, 14, 8), float32], Tensor[(14, 7, 4), bool], uint16, Tensor[(392), uint16], Tensor[(14, 7, 4), bool], Tensor[(14, 7, 4), bool]) */;
  %566 = cast(%var_439, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %567 = cast(%var_439, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %568 = cast(%var_440, dtype="uint16") /* ty=uint16 */;
  %569 = reshape(%566, newshape=[16, 14, 8]) /* ty=Tensor[(16, 14, 8), float64] */;
  %570 = reshape(%567, newshape=[16, 14, 8]) /* ty=Tensor[(16, 14, 8), float64] */;
  %571 = reshape(%568, newshape=[]) /* ty=uint16 */;
  %572 = @func_183(%569, %570, %571) /* ty=(Tensor[(16, 14, 8), float32], Tensor[(14, 7, 4), bool], uint16, Tensor[(392), uint16], Tensor[(14, 7, 4), bool], Tensor[(14, 7, 4), bool]) */;
  %573 = cast(%var_421, dtype="uint64") /* ty=Tensor[(15, 15, 8), uint64] */;
  %574 = shape_of(%549, dtype="int32") /* ty=Tensor[(3), int32] */;
  %575 = cast(%549, dtype="uint64") /* ty=Tensor[(15, 15, 8), uint64] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %577 = logical_xor(%575, %576) /* ty=Tensor[(15, 15, 8), uint64] */;
  %578 = cast(%577, dtype="float32") /* ty=Tensor[(15, 15, 8), float32] */;
  %579 = mod(%557, %558) /* ty=Tensor[(15, 15, 8), float32] */;
  %580 = %565.1;
  %581 = %572.1;
  %582 = rsqrt(%578) /* ty=Tensor[(15, 15, 8), float32] */;
  (%579, %580, %var_439, %var_440, %581, %582)
}

def @func_4178() -> Tensor[(8, 8, 9), float64] {
  %583 = @func_3209() /* ty=(Tensor[(13, 8, 3), bool], Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64], Tensor[(1792), float64], Tensor[(960), int8]) */;
  %583.2
}

def @func_6120(%var_6112: Tensor[(10, 13, 1), float32], %var_6113: Tensor[(10, 13, 11), float32]) -> Tensor[(10, 13, 11), float32] {
  %584 = cast(%var_6112, dtype="float32") /* ty=Tensor[(10, 13, 1), float32] */;
  %585 = cast(%var_6113, dtype="float32") /* ty=Tensor[(10, 13, 11), float32] */;
  divide(%584, %585) /* ty=Tensor[(10, 13, 11), float32] */
}

def @func_1702(%var_1640: uint16, %var_1641: Tensor[(392), uint16], %var_1661: Tensor[(8, 8, 9), bool]) -> (Tensor[(14, 7, 4), bool], Tensor[(90), float64], uint16, Tensor[(392), uint16], Tensor[(8, 8, 9), uint32], Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), int32]) {
  %586 = cast(meta[relay.Constant][46] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %587 = cast(%var_1640, dtype="uint16") /* ty=uint16 */;
  %588 = cast(%var_1641, dtype="uint16") /* ty=Tensor[(392), uint16] */;
  %589 = reshape(%586, newshape=[10, 1, 9]) /* ty=Tensor[(10, 1, 9), float64] */;
  %590 = reshape(%587, newshape=[]) /* ty=uint16 */;
  %591 = reshape(%588, newshape=[392]) /* ty=Tensor[(392), uint16] */;
  %592 = @func_285(%589, %590, %591) /* ty=(Tensor[(10, 1, 9), float64], Tensor[(1792), float64], uint16, Tensor[(14, 7, 4), bool], Tensor[(14, 7, 4), bool], Tensor[(392), float64]) */;
  %593 = @func_1156() /* ty=Tensor[(8, 8, 9), float64] */;
  %594 = cast(%593, dtype="float32") /* ty=Tensor[(8, 8, 9), float32] */;
  %595 = erf(%594) /* ty=Tensor[(8, 8, 9), float32] */;
  %596 = cast(%593, dtype="bool") /* ty=Tensor[(8, 8, 9), bool] */;
  %597 = shape_of(%595, dtype="int32") /* ty=Tensor[(3), int32] */;
  %598 = cast(%595, dtype="bool") /* ty=Tensor[(8, 8, 9), bool] */;
  %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %600 = less(%598, %599) /* ty=Tensor[(8, 8, 9), bool] */;
  %601 = cast(meta[relay.Constant][47] /* ty=Tensor[(8, 8, 9), bool] */, dtype="uint32") /* ty=Tensor[(8, 8, 9), uint32] */;
  %602 = shape_of(%600, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%600, dtype="uint32") /* ty=Tensor[(8, 8, 9), uint32] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %605 = cast(%var_1661, dtype="float64") /* ty=Tensor[(8, 8, 9), float64] */;
  %606 = log2(%605) /* ty=Tensor[(8, 8, 9), float64] */;
  %607 = cast(%var_1661, dtype="uint16") /* ty=Tensor[(8, 8, 9), uint16] */;
  %608 = shape_of(%600, dtype="int32") /* ty=Tensor[(3), int32] */;
  %609 = cast(%600, dtype="uint16") /* ty=Tensor[(8, 8, 9), uint16] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %611 = minimum(%609, %610) /* ty=Tensor[(8, 8, 9), uint16] */;
  %612 = cast(%611, dtype="int32") /* ty=Tensor[(8, 8, 9), int32] */;
  %613 = shape_of(%606, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(%606, dtype="int32") /* ty=Tensor[(8, 8, 9), int32] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %616 = %592.3;
  %617 = bitwise_and(%603, %604) /* ty=Tensor[(8, 8, 9), uint32] */;
  %618 = @func_954() /* ty=Tensor[(8, 8, 9), float64] */;
  %619 = bitwise_or(%614, %615) /* ty=Tensor[(8, 8, 9), int32] */;
  (%616, meta[relay.Constant][46] /* ty=Tensor[(90), float64] */, %var_1640, %var_1641, %617, %618, %619)
}

def @func_5377() -> (Tensor[(13, 8, 3), float32],) {
  %620 = @func_2382() /* ty=(Tensor[(13, 8, 3), float32],) */;
  %621 = %620.0;
  (%621,)
}

def @func_1884(%var_1841: Tensor[(8, 7, 16), int16], %var_1842: Tensor[(8, 7, 16), int16], %var_1847: Tensor[(8, 7, 16), int16], %var_1852: Tensor[(960), int8], %var_1876: Tensor[(90), float64]) -> (Tensor[(8, 7, 16), bool], Tensor[(16, 10, 6), int8], Tensor[(960), int8], Tensor[(14, 7, 4), bool], Tensor[(90), float64], uint16, Tensor[(392), uint16]) {
  %622 = cast(%var_1842, dtype="int16") /* ty=Tensor[(8, 7, 16), int16] */;
  %623 = shape_of(%var_1841, dtype="int32") /* ty=Tensor[(3), int32] */;
  %624 = cast(%var_1841, dtype="int16") /* ty=Tensor[(8, 7, 16), int16] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %626 = subtract(%624, %625) /* ty=Tensor[(8, 7, 16), int16] */;
  %627 = cast(%var_1847, dtype="bool") /* ty=Tensor[(8, 7, 16), bool] */;
  %628 = shape_of(%626, dtype="int32") /* ty=Tensor[(3), int32] */;
  %629 = cast(%626, dtype="bool") /* ty=Tensor[(8, 7, 16), bool] */;
  %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %631 = cast(%var_1852, dtype="int8") /* ty=Tensor[(960), int8] */;
  %632 = reshape(%631, newshape=[16, 10, 6]) /* ty=Tensor[(16, 10, 6), int8] */;
  %633 = @func_476(%632) /* ty=(Tensor[(16, 10, 6), int8], Tensor[(14, 7, 4), bool], Tensor[(392, 1), uint16]) */;
  %634 = cast(%var_1876, dtype="float64") /* ty=Tensor[(90), float64] */;
  %635 = cast(meta[relay.Constant][48] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %636 = cast(meta[relay.Constant][49] /* ty=Tensor[(392), uint16] */, dtype="uint16") /* ty=Tensor[(392), uint16] */;
  %637 = reshape(%634, newshape=[10, 1, 9]) /* ty=Tensor[(10, 1, 9), float64] */;
  %638 = reshape(%635, newshape=[]) /* ty=uint16 */;
  %639 = reshape(%636, newshape=[392]) /* ty=Tensor[(392), uint16] */;
  %640 = @func_285(%637, %638, %639) /* ty=(Tensor[(10, 1, 9), float64], Tensor[(1792), float64], uint16, Tensor[(14, 7, 4), bool], Tensor[(14, 7, 4), bool], Tensor[(392), float64]) */;
  %641 = greater_equal(%629, %630) /* ty=Tensor[(8, 7, 16), bool] */;
  %642 = %633.0;
  %643 = %640.3;
  (%641, %642, %var_1852, %643, %var_1876, meta[relay.Constant][48] /* ty=uint16 */, meta[relay.Constant][49] /* ty=Tensor[(392), uint16] */)
}

def @func_7469() -> Tensor[(8, 8, 9), float64] {
  %644 = @func_5084() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %644.0
}

def @func_4538() -> (Tensor[(960), int8], Tensor[(8, 30), float64], Tensor[(12, 5, 13), float32], Tensor[(12, 5, 13), float64]) {
  %645 = cast(meta[relay.Constant][50] /* ty=Tensor[(8, 30), float64] */, dtype="float64") /* ty=Tensor[(8, 30), float64] */;
  %646 = reshape(%645, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %647 = @func_3951(%646) /* ty=(Tensor[(10, 4, 6), float64], Tensor[(240), float64], Tensor[(312), float64], Tensor[(960), int8]) */;
  %648 = cast(meta[relay.Constant][52] /* ty=Tensor[(12, 5, 13), int32] */, dtype="int32") /* ty=Tensor[(12, 5, 13), int32] */;
  %649 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(12, 5, 13), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %650 = cast(meta[relay.Constant][51] /* ty=Tensor[(12, 5, 13), int32] */, dtype="int32") /* ty=Tensor[(12, 5, 13), int32] */;
  %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %652 = maximum(%650, %651) /* ty=Tensor[(12, 5, 13), int32] */;
  %653 = cast(%652, dtype="float32") /* ty=Tensor[(12, 5, 13), float32] */;
  %654 = cast(%652, dtype="float64") /* ty=Tensor[(12, 5, 13), float64] */;
  %655 = %647.3;
  %656 = sqrt(%653) /* ty=Tensor[(12, 5, 13), float32] */;
  %657 = acosh(%654) /* ty=Tensor[(12, 5, 13), float64] */;
  (%655, meta[relay.Constant][50] /* ty=Tensor[(8, 30), float64] */, %656, %657)
}

def @func_5146(%var_5090: Tensor[(16, 5, 5), float32], %var_5091: Tensor[(16, 5, 5), float32], %var_5119: Tensor[(960), int8]) -> (Tensor[(392, 1), uint16], Tensor[(960), int8], Tensor[(16, 5, 5), uint32]) {
  %658 = cast(%var_5119, dtype="int8") /* ty=Tensor[(960), int8] */;
  %659 = reshape(%658, newshape=[16, 10, 6]) /* ty=Tensor[(16, 10, 6), int8] */;
  %660 = @func_476(%659) /* ty=(Tensor[(16, 10, 6), int8], Tensor[(14, 7, 4), bool], Tensor[(392, 1), uint16]) */;
  %661 = cast(%var_5091, dtype="float64") /* ty=Tensor[(16, 5, 5), float64] */;
  %662 = cos(%661) /* ty=Tensor[(16, 5, 5), float64] */;
  %663 = cast(%var_5091, dtype="float32") /* ty=Tensor[(16, 5, 5), float32] */;
  %664 = shape_of(%var_5090, dtype="int32") /* ty=Tensor[(3), int32] */;
  %665 = cast(%var_5090, dtype="float32") /* ty=Tensor[(16, 5, 5), float32] */;
  %666 = dyn.reshape(%663, %664, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %667 = floor_mod(%665, %666) /* ty=Tensor[(16, 5, 5), float32] */;
  %668 = cast(%667, dtype="float64") /* ty=Tensor[(16, 5, 5), float64] */;
  %669 = acosh(%668) /* ty=Tensor[(16, 5, 5), float64] */;
  %670 = cast(%669, dtype="uint32") /* ty=Tensor[(16, 5, 5), uint32] */;
  %671 = shape_of(%662, dtype="int32") /* ty=Tensor[(3), int32] */;
  %672 = cast(%662, dtype="uint32") /* ty=Tensor[(16, 5, 5), uint32] */;
  %673 = dyn.reshape(%670, %671, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %674 = %660.2;
  %675 = add(%672, %673) /* ty=Tensor[(16, 5, 5), uint32] */;
  (%674, %var_5119, %675)
}

def @func_3377() -> (Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), uint32], uint16, Tensor[(392), uint16]) {
  %676 = cast(meta[relay.Constant][53] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %677 = cast(meta[relay.Constant][54] /* ty=Tensor[(392), uint16] */, dtype="uint16") /* ty=Tensor[(392), uint16] */;
  %678 = @func_2085() /* ty=Tensor[(8, 8, 9), float64] */;
  %679 = cast(%678, dtype="bool") /* ty=Tensor[(8, 8, 9), bool] */;
  %680 = reshape(%676, newshape=[]) /* ty=uint16 */;
  %681 = reshape(%677, newshape=[392]) /* ty=Tensor[(392), uint16] */;
  %682 = reshape(%679, newshape=[8, 8, 9]) /* ty=Tensor[(8, 8, 9), bool] */;
  %683 = @func_1702(%680, %681, %682) /* ty=(Tensor[(14, 7, 4), bool], Tensor[(90), float64], uint16, Tensor[(392), uint16], Tensor[(8, 8, 9), uint32], Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), int32]) */;
  %684 = %683.4;
  (%678, %684, meta[relay.Constant][53] /* ty=uint16 */, meta[relay.Constant][54] /* ty=Tensor[(392), uint16] */)
}

def @func_4322() -> (Tensor[(8, 8, 9), float64], uint16, Tensor[(392), uint16], Tensor[(14, 7, 4), float32]) {
  %685 = @func_4054() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) */;
  %686 = cast(meta[relay.Constant][55] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %687 = cast(meta[relay.Constant][56] /* ty=Tensor[(392), uint16] */, dtype="uint16") /* ty=Tensor[(392), uint16] */;
  %688 = %685.1;
  %689 = cast(%688, dtype="bool") /* ty=Tensor[(8, 8, 9), bool] */;
  %690 = reshape(%686, newshape=[]) /* ty=uint16 */;
  %691 = reshape(%687, newshape=[392]) /* ty=Tensor[(392), uint16] */;
  %692 = reshape(%689, newshape=[8, 8, 9]) /* ty=Tensor[(8, 8, 9), bool] */;
  %693 = @func_1702(%690, %691, %692) /* ty=(Tensor[(14, 7, 4), bool], Tensor[(90), float64], uint16, Tensor[(392), uint16], Tensor[(8, 8, 9), uint32], Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), int32]) */;
  %694 = %693.0;
  %695 = cast(%694, dtype="float32") /* ty=Tensor[(14, 7, 4), float32] */;
  %696 = sigmoid(%695) /* ty=Tensor[(14, 7, 4), float32] */;
  (%688, meta[relay.Constant][55] /* ty=uint16 */, meta[relay.Constant][56] /* ty=Tensor[(392), uint16] */, %696)
}

def @func_6180(%var_6171: Tensor[(10, 16, 1), uint16], %var_6172: Tensor[(10, 16, 6), uint16]) -> (Tensor[(10, 16, 6), uint16], Tensor[(960), float32]) {
  %697 = cast(%var_6171, dtype="uint16") /* ty=Tensor[(10, 16, 1), uint16] */;
  %698 = cast(%var_6172, dtype="uint16") /* ty=Tensor[(10, 16, 6), uint16] */;
  %699 = minimum(%697, %698) /* ty=Tensor[(10, 16, 6), uint16] */;
  %700 = @func_4787() /* ty=Tensor[(960), float32] */;
  (%699, %700)
}

def @func_2927() -> Tensor[(8, 8, 9), float64] {
  @func_2652() /* ty=Tensor[(8, 8, 9), float64] */
}

def @func_3163() -> Tensor[(960), int8] {
  %701 = @func_2018() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(960), int8], Tensor[(16, 10, 6), int8]) */;
  %701.1
}

def @func_1156() -> Tensor[(8, 8, 9), float64] {
  @func_954() /* ty=Tensor[(8, 8, 9), float64] */
}

def @func_6051() -> (Tensor[(8, 8, 9), float64], Tensor[(14, 7, 4), float32]) {
  %702 = @func_5782() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) */;
  %703 = @func_4322() /* ty=(Tensor[(8, 8, 9), float64], uint16, Tensor[(392), uint16], Tensor[(14, 7, 4), float32]) */;
  %704 = %702.1;
  %705 = %703.3;
  (%704, %705)
}

def @func_7187(%var_7172: Tensor[(12, 15, 12), int64], %var_7173: Tensor[(12, 15, 12), int64]) -> (Tensor[(12, 15, 12), int64], Tensor[(12, 15, 12), float32]) {
  %706 = cast(%var_7173, dtype="int64") /* ty=Tensor[(12, 15, 12), int64] */;
  %707 = shape_of(%var_7172, dtype="int32") /* ty=Tensor[(3), int32] */;
  %708 = cast(%var_7172, dtype="int64") /* ty=Tensor[(12, 15, 12), int64] */;
  %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %710 = cast(%var_7172, dtype="float32") /* ty=Tensor[(12, 15, 12), float32] */;
  %711 = bitwise_xor(%708, %709) /* ty=Tensor[(12, 15, 12), int64] */;
  %712 = atanh(%710) /* ty=Tensor[(12, 15, 12), float32] */;
  (%711, %712)
}

def @func_6462() -> (Tensor[(8, 8, 9), float64],) {
  %713 = @func_1202() /* ty=Tensor[(8, 8, 9), float64] */;
  (%713,)
}

def @func_6524() -> (Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64], Tensor[(11, 12, 5), float64]) {
  %714 = @func_5936() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64], Tensor[(2145, 1), uint8], Tensor[(15, 6), float64]) */;
  %715 = @func_6165() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(11, 12, 5), float64], Tensor[(11, 12, 5), float64]) */;
  %716 = %714.0;
  %717 = @func_3311() /* ty=Tensor[(8, 8, 9), float64] */;
  %718 = %715.1;
  (%716, %717, %718)
}

def @func_3614() -> (Tensor[(16, 10, 6), int8], Tensor[(960), int8], Tensor[(8, 8, 9), int16], Tensor[(8, 8, 9), float32]) {
  %719 = cast(meta[relay.Constant][57] /* ty=Tensor[(960), int8] */, dtype="int8") /* ty=Tensor[(960), int8] */;
  %720 = reshape(%719, newshape=[16, 10, 6]) /* ty=Tensor[(16, 10, 6), int8] */;
  %721 = @func_476(%720) /* ty=(Tensor[(16, 10, 6), int8], Tensor[(14, 7, 4), bool], Tensor[(392, 1), uint16]) */;
  %722 = @func_1156() /* ty=Tensor[(8, 8, 9), float64] */;
  %723 = cast(%722, dtype="float32") /* ty=Tensor[(8, 8, 9), float32] */;
  %724 = exp(%723) /* ty=Tensor[(8, 8, 9), float32] */;
  %725 = cast(meta[relay.Constant][58] /* ty=Tensor[(8, 8, 9), float32] */, dtype="int16") /* ty=Tensor[(8, 8, 9), int16] */;
  %726 = shape_of(%724, dtype="int32") /* ty=Tensor[(3), int32] */;
  %727 = cast(%724, dtype="int16") /* ty=Tensor[(8, 8, 9), int16] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %729 = cast(%724, dtype="float32") /* ty=Tensor[(8, 8, 9), float32] */;
  %730 = %721.0;
  %731 = logical_xor(%727, %728) /* ty=Tensor[(8, 8, 9), int16] */;
  %732 = log10(%729) /* ty=Tensor[(8, 8, 9), float32] */;
  (%730, meta[relay.Constant][57] /* ty=Tensor[(960), int8] */, %731, %732)
}

def @func_6324() -> (Tensor[(8, 8, 9), float64], Tensor[(16, 10, 6), int8], Tensor[(1, 180), float64], Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32], Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) {
  %733 = @func_5504() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %734 = cast(meta[relay.Constant][59] /* ty=Tensor[(1, 180), float64] */, dtype="float64") /* ty=Tensor[(1, 180), float64] */;
  %735 = reshape(%734, newshape=[10, 9, 2]) /* ty=Tensor[(10, 9, 2), float64] */;
  %736 = @func_4407(%735) /* ty=(Tensor[(10, 9, 2), float64], Tensor[(16, 10, 6), int8]) */;
  %737 = %733.0;
  %738 = cast(%737, dtype="float64") /* ty=Tensor[(8, 8, 9), float64] */;
  %739 = reshape(%738, newshape=[8, 8, 9]) /* ty=Tensor[(8, 8, 9), float64] */;
  %740 = @func_5011(%739) /* ty=(Tensor[(8, 8, 9), float64],) */;
  %741 = @func_2382() /* ty=(Tensor[(13, 8, 3), float32],) */;
  %742 = @func_5084() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %743 = @func_5084() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %744 = %736.1;
  %745 = %740.0;
  %746 = %741.0;
  %747 = %742.0;
  %748 = %743.0;
  (%737, %744, meta[relay.Constant][59] /* ty=Tensor[(1, 180), float64] */, %745, %746, %747, %748)
}

def @func_3303() -> (Tensor[(8, 8, 9), float64], uint16, Tensor[(1800), float64], Tensor[(1792), float64], uint16) {
  %749 = cast(meta[relay.Constant][60] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %750 = cast(meta[relay.Constant][60] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %751 = cast(meta[relay.Constant][60] /* ty=Tensor[(1800), float64] */, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %752 = cast(meta[relay.Constant][61] /* ty=Tensor[(1792), float64] */, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %753 = cast(meta[relay.Constant][62] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %754 = reshape(%749, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), float64] */;
  %755 = reshape(%750, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), float64] */;
  %756 = reshape(%751, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), float32] */;
  %757 = reshape(%752, newshape=[1792]) /* ty=Tensor[(1792), float64] */;
  %758 = reshape(%753, newshape=[]) /* ty=uint16 */;
  %759 = @func_449(%754, %755, %756, %757, %758) /* ty=(Tensor[(15, 15, 8), float32], Tensor[(14, 7, 4), bool], Tensor[(1792), float64], uint16, Tensor[(14, 7, 4), bool], Tensor[(15, 15, 8), float32]) */;
  %760 = @func_1202() /* ty=Tensor[(8, 8, 9), float64] */;
  %761 = %759.3;
  (%760, %761, meta[relay.Constant][60] /* ty=Tensor[(1800), float64] */, meta[relay.Constant][61] /* ty=Tensor[(1792), float64] */, meta[relay.Constant][62] /* ty=uint16 */)
}

def @func_5852(%var_5841: Tensor[(60), float64]) -> (Tensor[(8, 8, 9), float64], Tensor[(1, 10, 6), float64], float64, Tensor[(60), float64]) {
  %762 = cast(-3.42004f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %763 = cast(%var_5841, dtype="float64") /* ty=Tensor[(60), float64] */;
  %764 = reshape(%762, newshape=[]) /* ty=float64 */;
  %765 = reshape(%763, newshape=[1, 10, 6]) /* ty=Tensor[(1, 10, 6), float64] */;
  %766 = @func_5385() /* ty=Tensor[(8, 8, 9), float64] */;
  %767 = @func_2846(%764, %765) /* ty=Tensor[(1, 10, 6), float64] */;
  (%766, %767, -3.42004f64 /* ty=float64 */, %var_5841)
}

def @func_5207(%var_5194: Tensor[(5, 7, 9), float64]) -> (Tensor[(5, 7, 9), float64],) {
  %768 = cast(%var_5194, dtype="float64") /* ty=Tensor[(5, 7, 9), float64] */;
  %769 = asinh(%768) /* ty=Tensor[(5, 7, 9), float64] */;
  (%769,)
}

def @func_795(%var_746: Tensor[(13, 15, 11), uint8], %var_751: Tensor[(90), float64], %var_752: uint16, %var_753: Tensor[(196, 2), uint16]) -> (Tensor[(13, 15, 11), uint8], Tensor[(90), float64], Tensor[(196, 2), uint16], Tensor[(392), float64], Tensor[(13, 15, 11), int16]) {
  %770 = cast(%var_746, dtype="uint8") /* ty=Tensor[(13, 15, 11), uint8] */;
  %771 = shape_of(meta[relay.Constant][63] /* ty=Tensor[(13, 15, 11), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %772 = cast(meta[relay.Constant][63] /* ty=Tensor[(13, 15, 11), uint8] */, dtype="uint8") /* ty=Tensor[(13, 15, 11), uint8] */;
  %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %774 = cast(%var_751, dtype="float64") /* ty=Tensor[(90), float64] */;
  %775 = cast(%var_752, dtype="uint16") /* ty=uint16 */;
  %776 = cast(%var_753, dtype="uint16") /* ty=Tensor[(196, 2), uint16] */;
  %777 = reshape(%774, newshape=[10, 1, 9]) /* ty=Tensor[(10, 1, 9), float64] */;
  %778 = reshape(%775, newshape=[]) /* ty=uint16 */;
  %779 = reshape(%776, newshape=[392]) /* ty=Tensor[(392), uint16] */;
  %780 = @func_285(%777, %778, %779) /* ty=(Tensor[(10, 1, 9), float64], Tensor[(1792), float64], uint16, Tensor[(14, 7, 4), bool], Tensor[(14, 7, 4), bool], Tensor[(392), float64]) */;
  %781 = %780.5;
  %782 = cast(%781, dtype="float64") /* ty=Tensor[(392), float64] */;
  %783 = cast(%var_752, dtype="float64") /* ty=float64 */;
  %784 = cast(meta[relay.Constant][63] /* ty=Tensor[(13, 15, 11), uint8] */, dtype="int16") /* ty=Tensor[(13, 15, 11), int16] */;
  %785 = cast(%var_752, dtype="int16") /* ty=int16 */;
  %786 = bitwise_xor(%772, %773) /* ty=Tensor[(13, 15, 11), uint8] */;
  %787 = floor_mod(%782, %783) /* ty=Tensor[(392), float64] */;
  %788 = subtract(%784, %785) /* ty=Tensor[(13, 15, 11), int16] */;
  (%786, %var_751, %var_753, %787, %788)
}

def @func_1129(%var_1125: Tensor[(960), int8]) -> (Tensor[(8, 8, 9), float64], Tensor[(14, 7, 4), bool], Tensor[(960), int8]) {
  %789 = cast(%var_1125, dtype="int8") /* ty=Tensor[(960), int8] */;
  %790 = reshape(%789, newshape=[16, 10, 6]) /* ty=Tensor[(16, 10, 6), int8] */;
  %791 = @func_476(%790) /* ty=(Tensor[(16, 10, 6), int8], Tensor[(14, 7, 4), bool], Tensor[(392, 1), uint16]) */;
  %792 = @func_954() /* ty=Tensor[(8, 8, 9), float64] */;
  %793 = %791.1;
  (%792, %793, %var_1125)
}

def @func_7219() -> (Tensor[(8, 8, 9), float64],) {
  %794 = @func_6502() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32]) */;
  %795 = %794.0;
  (%795,)
}

def @func_1821(%var_1815: Tensor[(7, 56), uint16]) -> (Tensor[(8, 8, 9), float64], Tensor[(14, 7, 4), bool], uint16, Tensor[(7, 56), uint16]) {
  %796 = cast(meta[relay.Constant][64] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %797 = cast(%var_1815, dtype="uint16") /* ty=Tensor[(7, 56), uint16] */;
  %798 = reshape(%796, newshape=[]) /* ty=uint16 */;
  %799 = reshape(%797, newshape=[14, 7, 4]) /* ty=Tensor[(14, 7, 4), uint16] */;
  %800 = @func_104(%798, %799) /* ty=(Tensor[(14, 7, 4), bool],) */;
  %801 = @func_1513() /* ty=Tensor[(8, 8, 9), float64] */;
  %802 = %800.0;
  (%801, %802, meta[relay.Constant][64] /* ty=uint16 */, %var_1815)
}

def @func_5054() -> Tensor[(13, 8, 3), float32] {
  %803 = @func_2382() /* ty=(Tensor[(13, 8, 3), float32],) */;
  %803.0
}

def @func_4787() -> Tensor[(960), float32] {
  %804 = @func_3815() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(10, 8, 12), bool], Tensor[(960), float32], Tensor[(8, 8, 9), float64]) */;
  %804.2
}

def @func_6502() -> (Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32]) {
  %805 = @func_2382() /* ty=(Tensor[(13, 8, 3), float32],) */;
  %806 = @func_4178() /* ty=Tensor[(8, 8, 9), float64] */;
  %807 = %805.0;
  (%806, %807)
}

def @func_1513() -> Tensor[(8, 8, 9), float64] {
  @func_1170() /* ty=Tensor[(8, 8, 9), float64] */
}

def @func_476(%var_463: Tensor[(16, 10, 6), int8]) -> (Tensor[(16, 10, 6), int8], Tensor[(14, 7, 4), bool], Tensor[(392, 1), uint16]) {
  %808 = cast(meta[relay.Constant][65] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %809 = cast(%var_463, dtype="int8") /* ty=Tensor[(16, 10, 6), int8] */;
  %810 = cast(meta[relay.Constant][65] /* ty=int8 */, dtype="uint16") /* ty=uint16 */;
  %811 = cast(meta[relay.Constant][66] /* ty=Tensor[(392, 1), uint16] */, dtype="uint16") /* ty=Tensor[(392, 1), uint16] */;
  %812 = reshape(%810, newshape=[]) /* ty=uint16 */;
  %813 = reshape(%811, newshape=[14, 7, 4]) /* ty=Tensor[(14, 7, 4), uint16] */;
  %814 = @func_104(%812, %813) /* ty=(Tensor[(14, 7, 4), bool],) */;
  %815 = bitwise_or(%808, %809) /* ty=Tensor[(16, 10, 6), int8] */;
  %816 = %814.0;
  (%815, %816, meta[relay.Constant][66] /* ty=Tensor[(392, 1), uint16] */)
}

def @func_6102() -> Tensor[(13, 8, 3), float32] {
  %817 = @func_5054() /* ty=Tensor[(13, 8, 3), float32] */;
  %818 = cast(%817, dtype="float32") /* ty=Tensor[(13, 8, 3), float32] */;
  acos(%818) /* ty=Tensor[(13, 8, 3), float32] */
}

def @func_7504() -> (Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float32]) {
  %819 = @func_7302() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %820 = %819.0;
  %821 = cast(%820, dtype="float32") /* ty=Tensor[(8, 8, 9), float32] */;
  %822 = @func_1958() /* ty=Tensor[(8, 8, 9), float64] */;
  %823 = sqrt(%821) /* ty=Tensor[(8, 8, 9), float32] */;
  (%822, %823)
}

def @func_2357(%var_2346: uint16) -> (Tensor[(13, 8, 3), float64], Tensor[(13, 8, 3), float32], Tensor[(14, 7, 4), bool], Tensor[(3, 30), float64], uint16, Tensor[(1800), float64]) {
  %824 = @func_2161() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32], Tensor[(312), float32]) */;
  %825 = %824.1;
  %826 = cast(%825, dtype="float64") /* ty=Tensor[(13, 8, 3), float64] */;
  %827 = cast(%825, dtype="float32") /* ty=Tensor[(13, 8, 3), float32] */;
  %828 = reshape(%827, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), float32] */;
  %829 = cast(meta[relay.Constant][67] /* ty=Tensor[(3, 30), float64] */, dtype="float64") /* ty=Tensor[(3, 30), float64] */;
  %830 = cast(%var_2346, dtype="uint16") /* ty=uint16 */;
  %831 = cast(meta[relay.Constant][68] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %832 = reshape(%829, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %833 = reshape(%830, newshape=[]) /* ty=uint16 */;
  %834 = reshape(%831, newshape=[1800]) /* ty=Tensor[(1800), float64] */;
  %835 = @func_2074(%832, %833, %834) /* ty=(Tensor[(1792), float64], Tensor[(90), float64], uint16, Tensor[(7, 7, 8), float64], Tensor[(14, 7, 4), bool], Tensor[(1800), float64], Tensor[(8, 8, 9), float64]) */;
  %836 = sin(%826) /* ty=Tensor[(13, 8, 3), float64] */;
  %837 = @func_963(%828) /* ty=Tensor[(13, 8, 3), float32] */;
  %838 = %835.4;
  (%836, %837, %838, meta[relay.Constant][67] /* ty=Tensor[(3, 30), float64] */, %var_2346, meta[relay.Constant][68] /* ty=Tensor[(1800), float64] */)
}

def @func_285(%var_216: Tensor[(10, 1, 9), float64], %var_222: uint16, %var_245: Tensor[(392), uint16]) -> (Tensor[(10, 1, 9), float64], Tensor[(1792), float64], uint16, Tensor[(14, 7, 4), bool], Tensor[(14, 7, 4), bool], Tensor[(392), float64]) {
  %839 = cast(%var_216, dtype="float64") /* ty=Tensor[(10, 1, 9), float64] */;
  %840 = cast(meta[relay.Constant][69] /* ty=Tensor[(1792), float64] */, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %841 = cast(meta[relay.Constant][69] /* ty=Tensor[(1792), float64] */, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %842 = cast(%var_222, dtype="uint16") /* ty=uint16 */;
  %843 = reshape(%840, newshape=[16, 14, 8]) /* ty=Tensor[(16, 14, 8), float64] */;
  %844 = reshape(%841, newshape=[16, 14, 8]) /* ty=Tensor[(16, 14, 8), float64] */;
  %845 = reshape(%842, newshape=[]) /* ty=uint16 */;
  %846 = @func_183(%843, %844, %845) /* ty=(Tensor[(16, 14, 8), float32], Tensor[(14, 7, 4), bool], uint16, Tensor[(392), uint16], Tensor[(14, 7, 4), bool], Tensor[(14, 7, 4), bool]) */;
  %847 = %846.2;
  %848 = cast(%847, dtype="uint16") /* ty=uint16 */;
  %849 = cast(%var_245, dtype="uint16") /* ty=Tensor[(392), uint16] */;
  %850 = reshape(%848, newshape=[]) /* ty=uint16 */;
  %851 = reshape(%849, newshape=[14, 7, 4]) /* ty=Tensor[(14, 7, 4), uint16] */;
  %852 = @func_104(%850, %851) /* ty=(Tensor[(14, 7, 4), bool],) */;
  %853 = cast(meta[relay.Constant][69] /* ty=Tensor[(1792), float64] */, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %854 = cast(meta[relay.Constant][69] /* ty=Tensor[(1792), float64] */, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %855 = cast(%var_222, dtype="uint16") /* ty=uint16 */;
  %856 = reshape(%853, newshape=[16, 14, 8]) /* ty=Tensor[(16, 14, 8), float64] */;
  %857 = reshape(%854, newshape=[16, 14, 8]) /* ty=Tensor[(16, 14, 8), float64] */;
  %858 = reshape(%855, newshape=[]) /* ty=uint16 */;
  %859 = @func_183(%856, %857, %858) /* ty=(Tensor[(16, 14, 8), float32], Tensor[(14, 7, 4), bool], uint16, Tensor[(392), uint16], Tensor[(14, 7, 4), bool], Tensor[(14, 7, 4), bool]) */;
  %860 = cast(%var_245, dtype="float64") /* ty=Tensor[(392), float64] */;
  %861 = cast(%847, dtype="float64") /* ty=float64 */;
  %862 = acos(%839) /* ty=Tensor[(10, 1, 9), float64] */;
  %863 = %852.0;
  %864 = %859.4;
  %865 = divide(%860, %861) /* ty=Tensor[(392), float64] */;
  (%862, meta[relay.Constant][69] /* ty=Tensor[(1792), float64] */, %var_222, %863, %864, %865)
}

def @func_7008() -> (Tensor[(8, 8, 9), float32],) {
  %866 = @func_4592() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %867 = %866.0;
  %868 = cast(%867, dtype="float32") /* ty=Tensor[(8, 8, 9), float32] */;
  %869 = sigmoid(%868) /* ty=Tensor[(8, 8, 9), float32] */;
  (%869,)
}

def @func_1202() -> Tensor[(8, 8, 9), float64] {
  @func_954() /* ty=Tensor[(8, 8, 9), float64] */
}

def @func_6902(%var_6899: Tensor[(30, 6), float64]) -> (Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32], Tensor[(8, 8, 9), float64], Tensor[(30, 6), float64]) {
  %870 = cast(%var_6899, dtype="float64") /* ty=Tensor[(30, 6), float64] */;
  %871 = reshape(%870, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %872 = @func_6854(%871) /* ty=(Tensor[(960), int8], Tensor[(8, 8, 9), float64], Tensor[(576), float64], Tensor[(8, 8, 9), float64], Tensor[(10, 9, 2), float64], Tensor[(180), float64], Tensor[(8, 8, 9), float64]) */;
  %873 = @func_2927() /* ty=Tensor[(8, 8, 9), float64] */;
  %874 = @func_6102() /* ty=Tensor[(13, 8, 3), float32] */;
  %875 = %872.3;
  (%873, %874, %875, %var_6899)
}

def @func_6481() -> (Tensor[(960), int8],) {
  %876 = @func_6379() /* ty=(Tensor[(960), int8],) */;
  %877 = %876.0;
  (%877,)
}

def @func_4625() -> (Tensor[(8, 8, 9), float64], Tensor[(10, 9, 2), float64], Tensor[(180, 1), float64]) {
  %878 = @func_3815() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(10, 8, 12), bool], Tensor[(960), float32], Tensor[(8, 8, 9), float64]) */;
  %879 = cast(meta[relay.Constant][70] /* ty=Tensor[(180, 1), float64] */, dtype="float64") /* ty=Tensor[(180, 1), float64] */;
  %880 = reshape(%879, newshape=[10, 9, 2]) /* ty=Tensor[(10, 9, 2), float64] */;
  %881 = @func_4407(%880) /* ty=(Tensor[(10, 9, 2), float64], Tensor[(16, 10, 6), int8]) */;
  %882 = %878.3;
  %883 = %881.0;
  (%882, %883, meta[relay.Constant][70] /* ty=Tensor[(180, 1), float64] */)
}

def @func_6165() -> (Tensor[(8, 8, 9), float64], Tensor[(11, 12, 5), float64], Tensor[(11, 12, 5), float64]) {
  %884 = @func_4238() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %885 = cast(meta[relay.Constant][71] /* ty=Tensor[(11, 12, 5), float32] */, dtype="float32") /* ty=Tensor[(11, 12, 5), float32] */;
  %886 = cosh(%885) /* ty=Tensor[(11, 12, 5), float32] */;
  %887 = cast(%886, dtype="float64") /* ty=Tensor[(11, 12, 5), float64] */;
  %888 = cast(%886, dtype="float64") /* ty=Tensor[(11, 12, 5), float64] */;
  %889 = %884.0;
  %890 = tan(%887) /* ty=Tensor[(11, 12, 5), float64] */;
  %891 = exp(%888) /* ty=Tensor[(11, 12, 5), float64] */;
  (%889, %890, %891)
}

def @func_5545(%var_5538: uint16) -> (Tensor[(960), int8], Tensor[(312), float32], uint16) {
  %892 = @func_2266() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(16, 10, 6), int8]) */;
  %893 = cast(%var_5538, dtype="uint16") /* ty=uint16 */;
  %894 = reshape(%893, newshape=[]) /* ty=uint16 */;
  %895 = @func_1257(%894) /* ty=(Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32], Tensor[(312), float32], Tensor[(392), float64], Tensor[(143, 15), uint8], Tensor[(1, 90), float64], uint16, Tensor[(392), uint16]) */;
  %896 = %892.1;
  %897 = %895.2;
  (%896, %897, %var_5538)
}

def @func_4054() -> (Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) {
  %898 = @func_3631() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %899 = @func_1202() /* ty=Tensor[(8, 8, 9), float64] */;
  %900 = %898.0;
  (%899, %900)
}

def @func_3238(%var_3221: Tensor[(10, 8, 12), float32]) -> (Tensor[(10, 8, 12), bool],) {
  %901 = cast(%var_3221, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
  %902 = exp(%901) /* ty=Tensor[(10, 8, 12), float32] */;
  %903 = cast(%902, dtype="float64") /* ty=Tensor[(10, 8, 12), float64] */;
  %904 = atanh(%903) /* ty=Tensor[(10, 8, 12), float64] */;
  %905 = cast(%904, dtype="bool") /* ty=Tensor[(10, 8, 12), bool] */;
  %906 = shape_of(%902, dtype="int32") /* ty=Tensor[(3), int32] */;
  %907 = cast(%902, dtype="bool") /* ty=Tensor[(10, 8, 12), bool] */;
  %908 = dyn.reshape(%905, %906, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %909 = greater(%907, %908) /* ty=Tensor[(10, 8, 12), bool] */;
  (%909,)
}

def @func_1170() -> Tensor[(8, 8, 9), float64] {
  @func_1156() /* ty=Tensor[(8, 8, 9), float64] */
}

def @func_4433(%var_4417: Tensor[(8, 8, 9), float64]) -> Tensor[(8, 8, 9), bool] {
  %910 = @func_2085() /* ty=Tensor[(8, 8, 9), float64] */;
  %911 = cast(%var_4417, dtype="bool") /* ty=Tensor[(8, 8, 9), bool] */;
  %912 = shape_of(%910, dtype="int32") /* ty=Tensor[(3), int32] */;
  %913 = cast(%910, dtype="bool") /* ty=Tensor[(8, 8, 9), bool] */;
  %914 = dyn.reshape(%911, %912, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%913, %914) /* ty=Tensor[(8, 8, 9), bool] */
}

def @func_4979(%var_4938: Tensor[(352), float32]) -> (Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(11, 8, 4), float32], Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64], Tensor[(352), int8]) {
  %915 = @func_4398() /* ty=(Tensor[(8, 8, 9), bool], Tensor[(960), int8], Tensor[(8, 8, 9), float64]) */;
  %916 = cast(%var_4938, dtype="float32") /* ty=Tensor[(352), float32] */;
  %917 = reshape(%916, newshape=[11, 8, 4]) /* ty=Tensor[(11, 8, 4), float32] */;
  %918 = @func_2742(%917) /* ty=(Tensor[(11, 8, 4), float32],) */;
  %919 = cast(%var_4938, dtype="float32") /* ty=Tensor[(352), float32] */;
  %920 = log2(%919) /* ty=Tensor[(352), float32] */;
  %921 = cast(%var_4938, dtype="int8") /* ty=Tensor[(352), int8] */;
  %922 = shape_of(%920, dtype="int32") /* ty=Tensor[(1), int32] */;
  %923 = cast(%920, dtype="int8") /* ty=Tensor[(352), int8] */;
  %924 = dyn.reshape(%921, %922, newshape=[]) /* ty=Tensor[(?), int8] */;
  %925 = %915.2;
  %926 = @func_3163() /* ty=Tensor[(960), int8] */;
  %927 = %918.0;
  %928 = @func_2927() /* ty=Tensor[(8, 8, 9), float64] */;
  %929 = @func_2085() /* ty=Tensor[(8, 8, 9), float64] */;
  %930 = bitwise_or(%923, %924) /* ty=Tensor[(352), int8] */;
  (%925, %926, %927, %928, %929, %930)
}

def @func_6379() -> (Tensor[(960), int8],) {
  %931 = @func_2451() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(960), int8]) */;
  %932 = %931.1;
  (%932,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_7108() -> Tensor[(8, 8, 9), float64] {
  %0 = @func_5504() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %0.0
}

def @func_7439(%var_7408: uint32) -> (Tensor[(13, 14, 9), float32], Tensor[(8, 8, 9), float64]) {
  %1 = cast(%var_7408, dtype="bool") /* ty=bool */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(13, 14, 9), uint32] */, dtype="bool") /* ty=Tensor[(13, 14, 9), bool] */;
  %3 = greater(%1, %2) /* ty=Tensor[(13, 14, 9), bool] */;
  %4 = cast(%3, dtype="float32") /* ty=Tensor[(13, 14, 9), float32] */;
  %5 = exp(%4) /* ty=Tensor[(13, 14, 9), float32] */;
  %6 = @func_1513() /* ty=Tensor[(8, 8, 9), float64] */;
  (%5, %6)
}

def @func_2019() -> (Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(960), int8], Tensor[(16, 10, 6), int8]) {
  %16 = fn () -> (Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(960), int8], Tensor[(16, 10, 6), int8]) {
    %7 = cast(meta[relay.Constant][1] /* ty=Tensor[(960), int8] */, dtype="int8") /* ty=Tensor[(960), int8] */;
    %8 = reshape(%7, newshape=[960]) /* ty=Tensor[(960), int8] */;
    %9 = @func_1129(%8) /* ty=(Tensor[(8, 8, 9), float64], Tensor[(14, 7, 4), bool], Tensor[(960), int8]) */;
    %10 = cast(meta[relay.Constant][1] /* ty=Tensor[(960), int8] */, dtype="int8") /* ty=Tensor[(960), int8] */;
    %11 = reshape(%10, newshape=[16, 10, 6]) /* ty=Tensor[(16, 10, 6), int8] */;
    %12 = @func_476(%11) /* ty=(Tensor[(16, 10, 6), int8], Tensor[(14, 7, 4), bool], Tensor[(392, 1), uint16]) */;
    %13 = @func_1958() /* ty=Tensor[(8, 8, 9), float64] */;
    %14 = %9.2;
    %15 = %12.0;
    (%13, %14, meta[relay.Constant][1] /* ty=Tensor[(960), int8] */, %15)
  };
  %16() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(960), int8], Tensor[(16, 10, 6), int8]) */
}

def @func_1821(%var_1815: Tensor[(7, 56), uint16]) -> (Tensor[(8, 8, 9), float64], Tensor[(14, 7, 4), bool], uint16, Tensor[(7, 56), uint16]) {
  %17 = cast(meta[relay.Constant][2] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %18 = cast(%var_1815, dtype="uint16") /* ty=Tensor[(7, 56), uint16] */;
  %19 = reshape(%17, newshape=[]) /* ty=uint16 */;
  %20 = reshape(%18, newshape=[14, 7, 4]) /* ty=Tensor[(14, 7, 4), uint16] */;
  %21 = @func_104(%19, %20) /* ty=(Tensor[(14, 7, 4), bool],) */;
  %22 = @func_1513() /* ty=Tensor[(8, 8, 9), float64] */;
  %23 = %21.0;
  (%22, %23, meta[relay.Constant][2] /* ty=uint16 */, %var_1815)
}

def @func_3241(%var_3239: Tensor[(10, 8, 12), float32]) -> (Tensor[(10, 8, 12), bool],) {
  @func_3238(%var_3239) /* ty=(Tensor[(10, 8, 12), bool],) */
}

def @func_6052() -> (Tensor[(8, 8, 9), float64], Tensor[(14, 7, 4), float32]) {
  %28 = fn () -> (Tensor[(8, 8, 9), float64], Tensor[(14, 7, 4), float32]) {
    %24 = @func_5782() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) */;
    %25 = @func_4322() /* ty=(Tensor[(8, 8, 9), float64], uint16, Tensor[(392), uint16], Tensor[(14, 7, 4), float32]) */;
    %26 = %24.1;
    %27 = %25.3;
    (%26, %27)
  };
  %28() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(14, 7, 4), float32]) */
}

def @func_2085() -> Tensor[(8, 8, 9), float64] {
  @func_1156() /* ty=Tensor[(8, 8, 9), float64] */
}

def @func_4323() -> (Tensor[(8, 8, 9), float64], uint16, Tensor[(392), uint16], Tensor[(14, 7, 4), float32]) {
  %41 = fn () -> (Tensor[(8, 8, 9), float64], uint16, Tensor[(392), uint16], Tensor[(14, 7, 4), float32]) {
    %29 = @func_4054() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) */;
    %30 = cast(meta[relay.Constant][3] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %31 = cast(meta[relay.Constant][4] /* ty=Tensor[(392), uint16] */, dtype="uint16") /* ty=Tensor[(392), uint16] */;
    %32 = %29.1;
    %33 = cast(%32, dtype="bool") /* ty=Tensor[(8, 8, 9), bool] */;
    %34 = reshape(%30, newshape=[]) /* ty=uint16 */;
    %35 = reshape(%31, newshape=[392]) /* ty=Tensor[(392), uint16] */;
    %36 = reshape(%33, newshape=[8, 8, 9]) /* ty=Tensor[(8, 8, 9), bool] */;
    %37 = @func_1702(%34, %35, %36) /* ty=(Tensor[(14, 7, 4), bool], Tensor[(90), float64], uint16, Tensor[(392), uint16], Tensor[(8, 8, 9), uint32], Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), int32]) */;
    %38 = %37.0;
    %39 = cast(%38, dtype="float32") /* ty=Tensor[(14, 7, 4), float32] */;
    %40 = sigmoid(%39) /* ty=Tensor[(14, 7, 4), float32] */;
    (%32, meta[relay.Constant][3] /* ty=uint16 */, meta[relay.Constant][4] /* ty=Tensor[(392), uint16] */, %40)
  };
  %41() /* ty=(Tensor[(8, 8, 9), float64], uint16, Tensor[(392), uint16], Tensor[(14, 7, 4), float32]) */
}

def @func_6103() -> Tensor[(13, 8, 3), float32] {
  %44 = fn () -> Tensor[(13, 8, 3), float32] {
    %42 = @func_5054() /* ty=Tensor[(13, 8, 3), float32] */;
    %43 = cast(%42, dtype="float32") /* ty=Tensor[(13, 8, 3), float32] */;
    acos(%43) /* ty=Tensor[(13, 8, 3), float32] */
  };
  %44() /* ty=Tensor[(13, 8, 3), float32] */
}

def @func_3501(%var_3500: Tensor[(8, 8, 9), float64]) -> (Tensor[(8, 8, 9), float32], Tensor[(312), float32], Tensor[(8, 8, 9), float64], Tensor[(15, 6), float64], Tensor[(8, 8, 9), float64], Tensor[(10, 8, 12), bool], Tensor[(960), float32]) {
  %62 = fn (%var_3431: Tensor[(8, 8, 9), float64]) -> (Tensor[(8, 8, 9), float32], Tensor[(312), float32], Tensor[(8, 8, 9), float64], Tensor[(15, 6), float64], Tensor[(8, 8, 9), float64], Tensor[(10, 8, 12), bool], Tensor[(960), float32]) {
    %45 = @func_1156() /* ty=Tensor[(8, 8, 9), float64] */;
    %46 = cast(%var_3431, dtype="float32") /* ty=Tensor[(8, 8, 9), float32] */;
    %47 = shape_of(%45, dtype="int32") /* ty=Tensor[(3), int32] */;
    %48 = cast(%45, dtype="float32") /* ty=Tensor[(8, 8, 9), float32] */;
    %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %50 = @func_2986() /* ty=(Tensor[(16, 10, 6), int8], Tensor[(13, 8, 3), float32], Tensor[(312), float32]) */;
    %51 = cast(%45, dtype="float64") /* ty=Tensor[(8, 8, 9), float64] */;
    %52 = @func_2716() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(8, 8, 9), float64], Tensor[(392, 1), bool], Tensor[(196, 2), uint16], Tensor[(2145, 1), uint8], Tensor[(15, 6), float64]) */;
    %53 = cast(meta[relay.Constant][5] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
    %54 = reshape(%53, newshape=[10, 8, 12]) /* ty=Tensor[(10, 8, 12), float32] */;
    %55 = @func_3238(%54) /* ty=(Tensor[(10, 8, 12), bool],) */;
    %56 = floor_mod(%48, %49) /* ty=Tensor[(8, 8, 9), float32] */;
    %57 = %50.2;
    %58 = sin(%51) /* ty=Tensor[(8, 8, 9), float64] */;
    %59 = %52.5;
    %60 = @func_1170() /* ty=Tensor[(8, 8, 9), float64] */;
    %61 = %55.0;
    (%56, %57, %58, %59, %60, %61, meta[relay.Constant][5] /* ty=Tensor[(960), float32] */)
  };
  %62(%var_3500) /* ty=(Tensor[(8, 8, 9), float32], Tensor[(312), float32], Tensor[(8, 8, 9), float64], Tensor[(15, 6), float64], Tensor[(8, 8, 9), float64], Tensor[(10, 8, 12), bool], Tensor[(960), float32]) */
}

def @func_4179() -> Tensor[(8, 8, 9), float64] {
  %64 = fn () -> Tensor[(8, 8, 9), float64] {
    %63 = @func_3209() /* ty=(Tensor[(13, 8, 3), bool], Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64], Tensor[(1792), float64], Tensor[(960), int8]) */;
    %63.2
  };
  %64() /* ty=Tensor[(8, 8, 9), float64] */
}

def @func_5013(%var_5012: Tensor[(8, 8, 9), float64]) -> (Tensor[(8, 8, 9), float64],) {
  %71 = fn (%var_5004: Tensor[(8, 8, 9), float64]) -> (Tensor[(8, 8, 9), float64],) {
    %65 = @func_3311() /* ty=Tensor[(8, 8, 9), float64] */;
    %66 = cast(%var_5004, dtype="float64") /* ty=Tensor[(8, 8, 9), float64] */;
    %67 = shape_of(%65, dtype="int32") /* ty=Tensor[(3), int32] */;
    %68 = cast(%65, dtype="float64") /* ty=Tensor[(8, 8, 9), float64] */;
    %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %70 = floor_divide(%68, %69) /* ty=Tensor[(8, 8, 9), float64] */;
    (%70,)
  };
  %71(%var_5012) /* ty=(Tensor[(8, 8, 9), float64],) */
}

def @func_6070() -> (Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) {
  %75 = fn () -> (Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) {
    %72 = @func_5782() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) */;
    %73 = %72.0;
    %74 = @func_1202() /* ty=Tensor[(8, 8, 9), float64] */;
    (%73, %74)
  };
  %75() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) */
}

def @func_4651(%var_4650: Tensor[(8, 8, 9), float64]) -> (Tensor[(8, 8, 9), bool], Tensor[(8, 8, 9), float64]) {
  %88 = fn (%var_4638: Tensor[(8, 8, 9), float64]) -> (Tensor[(8, 8, 9), bool], Tensor[(8, 8, 9), float64]) {
    %76 = @func_954() /* ty=Tensor[(8, 8, 9), float64] */;
    %77 = cast(%var_4638, dtype="uint16") /* ty=Tensor[(8, 8, 9), uint16] */;
    %78 = shape_of(%76, dtype="int32") /* ty=Tensor[(3), int32] */;
    %79 = cast(%76, dtype="uint16") /* ty=Tensor[(8, 8, 9), uint16] */;
    %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %81 = bitwise_xor(%79, %80) /* ty=Tensor[(8, 8, 9), uint16] */;
    %82 = cast(%var_4638, dtype="bool") /* ty=Tensor[(8, 8, 9), bool] */;
    %83 = shape_of(%81, dtype="int32") /* ty=Tensor[(3), int32] */;
    %84 = cast(%81, dtype="bool") /* ty=Tensor[(8, 8, 9), bool] */;
    %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %86 = greater_equal(%84, %85) /* ty=Tensor[(8, 8, 9), bool] */;
    %87 = @func_1202() /* ty=Tensor[(8, 8, 9), float64] */;
    (%86, %87)
  };
  %88(%var_4650) /* ty=(Tensor[(8, 8, 9), bool], Tensor[(8, 8, 9), float64]) */
}

def @func_5547(%var_5546: uint16) -> (Tensor[(960), int8], Tensor[(312), float32], uint16) {
  %95 = fn (%var_5538: uint16) -> (Tensor[(960), int8], Tensor[(312), float32], uint16) {
    %89 = @func_2266() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(16, 10, 6), int8]) */;
    %90 = cast(%var_5538, dtype="uint16") /* ty=uint16 */;
    %91 = reshape(%90, newshape=[]) /* ty=uint16 */;
    %92 = @func_1257(%91) /* ty=(Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32], Tensor[(312), float32], Tensor[(392), float64], Tensor[(143, 15), uint8], Tensor[(1, 90), float64], uint16, Tensor[(392), uint16]) */;
    %93 = %89.1;
    %94 = %92.2;
    (%93, %94, %var_5538)
  };
  %95(%var_5546) /* ty=(Tensor[(960), int8], Tensor[(312), float32], uint16) */
}

def @func_7340() -> (Tensor[(8, 8, 9), float64],) {
  @func_7338() /* ty=(Tensor[(8, 8, 9), float64],) */
}

def @func_2464(%var_2460: Tensor[(13, 10, 12), bool]) -> (Tensor[(13, 10, 12), bool],) {
  %96 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 1, 12), bool] */, dtype="bool") /* ty=Tensor[(13, 1, 12), bool] */;
  %97 = cast(%var_2460, dtype="bool") /* ty=Tensor[(13, 10, 12), bool] */;
  %98 = logical_and(%96, %97) /* ty=Tensor[(13, 10, 12), bool] */;
  (%98,)
}

def @func_5618() -> (Tensor[(8, 8, 9), float64],) {
  %99 = @func_4468() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %100 = %99.0;
  (%100,)
}

def @func_3866() -> (Tensor[(16, 10, 6), int8], Tensor[(13, 8, 3), float32]) {
  %101 = @func_2266() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(16, 10, 6), int8]) */;
  %102 = @func_2382() /* ty=(Tensor[(13, 8, 3), float32],) */;
  %103 = %101.2;
  %104 = %102.0;
  (%103, %104)
}

def @func_5061() -> Tensor[(960), float32] {
  @func_5059() /* ty=Tensor[(960), float32] */
}

def @func_7127() -> (Tensor[(960), int8],) {
  @func_7125() /* ty=(Tensor[(960), int8],) */
}

def @func_4571() -> Tensor[(8, 8, 9), float64] {
  %105 = fn () -> Tensor[(8, 8, 9), float64] {
    @func_1513() /* ty=Tensor[(8, 8, 9), float64] */
  };
  %105() /* ty=Tensor[(8, 8, 9), float64] */
}

def @func_6905(%var_6903: Tensor[(30, 6), float64]) -> (Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32], Tensor[(8, 8, 9), float64], Tensor[(30, 6), float64]) {
  @func_6902(%var_6903) /* ty=(Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32], Tensor[(8, 8, 9), float64], Tensor[(30, 6), float64]) */
}

def @func_5620() -> (Tensor[(8, 8, 9), float64],) {
  @func_5618() /* ty=(Tensor[(8, 8, 9), float64],) */
}

def @func_4765() -> (Tensor[(8, 8, 9), float64],) {
  %106 = @func_954() /* ty=Tensor[(8, 8, 9), float64] */;
  (%106,)
}

def @func_4846(%var_4844: Tensor[(90), float64]) -> (Tensor[(8, 8, 9), float64], Tensor[(1792), float64], Tensor[(90), float64], uint16, Tensor[(392), uint16], Tensor[(12, 5, 13), float32]) {
  @func_4843(%var_4844) /* ty=(Tensor[(8, 8, 9), float64], Tensor[(1792), float64], Tensor[(90), float64], uint16, Tensor[(392), uint16], Tensor[(12, 5, 13), float32]) */
}

def @func_2467(%var_2465: Tensor[(13, 10, 12), bool]) -> (Tensor[(13, 10, 12), bool],) {
  @func_2464(%var_2465) /* ty=(Tensor[(13, 10, 12), bool],) */
}

def @func_5504() -> (Tensor[(8, 8, 9), float64],) {
  %107 = @func_4592() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %108 = %107.0;
  (%108,)
}

def @func_6525() -> (Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64], Tensor[(11, 12, 5), float64]) {
  %114 = fn () -> (Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64], Tensor[(11, 12, 5), float64]) {
    %109 = @func_5936() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64], Tensor[(2145, 1), uint8], Tensor[(15, 6), float64]) */;
    %110 = @func_6165() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(11, 12, 5), float64], Tensor[(11, 12, 5), float64]) */;
    %111 = %109.0;
    %112 = @func_3311() /* ty=Tensor[(8, 8, 9), float64] */;
    %113 = %110.1;
    (%111, %112, %113)
  };
  %114() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64], Tensor[(11, 12, 5), float64]) */
}

def @func_455(%var_450: Tensor[(15, 15, 8), float64], %var_451: Tensor[(15, 15, 8), float64], %var_452: Tensor[(15, 15, 8), float32], %var_453: Tensor[(1792), float64], %var_454: uint16) -> (Tensor[(15, 15, 8), float32], Tensor[(14, 7, 4), bool], Tensor[(1792), float64], uint16, Tensor[(14, 7, 4), bool], Tensor[(15, 15, 8), float32]) {
  %152 = fn (%var_397: Tensor[(15, 15, 8), float64], %var_398: Tensor[(15, 15, 8), float64], %var_421: Tensor[(15, 15, 8), float32], %var_439: Tensor[(1792), float64], %var_440: uint16) -> (Tensor[(15, 15, 8), float32], Tensor[(14, 7, 4), bool], Tensor[(1792), float64], uint16, Tensor[(14, 7, 4), bool], Tensor[(15, 15, 8), float32]) {
    %115 = cast(%var_398, dtype="float64") /* ty=Tensor[(15, 15, 8), float64] */;
    %116 = exp(%115) /* ty=Tensor[(15, 15, 8), float64] */;
    %117 = cast(%116, dtype="float32") /* ty=Tensor[(15, 15, 8), float32] */;
    %118 = log10(%117) /* ty=Tensor[(15, 15, 8), float32] */;
    %119 = cast(%var_398, dtype="float64") /* ty=Tensor[(15, 15, 8), float64] */;
    %120 = shape_of(%var_397, dtype="int32") /* ty=Tensor[(3), int32] */;
    %121 = cast(%var_397, dtype="float64") /* ty=Tensor[(15, 15, 8), float64] */;
    %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %123 = add(%121, %122) /* ty=Tensor[(15, 15, 8), float64] */;
    %124 = cast(%123, dtype="float32") /* ty=Tensor[(15, 15, 8), float32] */;
    %125 = shape_of(%118, dtype="int32") /* ty=Tensor[(3), int32] */;
    %126 = cast(%118, dtype="float32") /* ty=Tensor[(15, 15, 8), float32] */;
    %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %128 = cast(%var_439, dtype="float64") /* ty=Tensor[(1792), float64] */;
    %129 = cast(%var_439, dtype="float64") /* ty=Tensor[(1792), float64] */;
    %130 = cast(%var_440, dtype="uint16") /* ty=uint16 */;
    %131 = reshape(%128, newshape=[16, 14, 8]) /* ty=Tensor[(16, 14, 8), float64] */;
    %132 = reshape(%129, newshape=[16, 14, 8]) /* ty=Tensor[(16, 14, 8), float64] */;
    %133 = reshape(%130, newshape=[]) /* ty=uint16 */;
    %134 = @func_183(%131, %132, %133) /* ty=(Tensor[(16, 14, 8), float32], Tensor[(14, 7, 4), bool], uint16, Tensor[(392), uint16], Tensor[(14, 7, 4), bool], Tensor[(14, 7, 4), bool]) */;
    %135 = cast(%var_439, dtype="float64") /* ty=Tensor[(1792), float64] */;
    %136 = cast(%var_439, dtype="float64") /* ty=Tensor[(1792), float64] */;
    %137 = cast(%var_440, dtype="uint16") /* ty=uint16 */;
    %138 = reshape(%135, newshape=[16, 14, 8]) /* ty=Tensor[(16, 14, 8), float64] */;
    %139 = reshape(%136, newshape=[16, 14, 8]) /* ty=Tensor[(16, 14, 8), float64] */;
    %140 = reshape(%137, newshape=[]) /* ty=uint16 */;
    %141 = @func_183(%138, %139, %140) /* ty=(Tensor[(16, 14, 8), float32], Tensor[(14, 7, 4), bool], uint16, Tensor[(392), uint16], Tensor[(14, 7, 4), bool], Tensor[(14, 7, 4), bool]) */;
    %142 = cast(%var_421, dtype="uint64") /* ty=Tensor[(15, 15, 8), uint64] */;
    %143 = shape_of(%118, dtype="int32") /* ty=Tensor[(3), int32] */;
    %144 = cast(%118, dtype="uint64") /* ty=Tensor[(15, 15, 8), uint64] */;
    %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %146 = logical_xor(%144, %145) /* ty=Tensor[(15, 15, 8), uint64] */;
    %147 = cast(%146, dtype="float32") /* ty=Tensor[(15, 15, 8), float32] */;
    %148 = mod(%126, %127) /* ty=Tensor[(15, 15, 8), float32] */;
    %149 = %134.1;
    %150 = %141.1;
    %151 = rsqrt(%147) /* ty=Tensor[(15, 15, 8), float32] */;
    (%148, %149, %var_439, %var_440, %150, %151)
  };
  %152(%var_450, %var_451, %var_452, %var_453, %var_454) /* ty=(Tensor[(15, 15, 8), float32], Tensor[(14, 7, 4), bool], Tensor[(1792), float64], uint16, Tensor[(14, 7, 4), bool], Tensor[(15, 15, 8), float32]) */
}

def @func_2452() -> (Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(960), int8]) {
  %158 = fn () -> (Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(960), int8]) {
    %153 = cast(meta[relay.Constant][7] /* ty=Tensor[(960), int8] */, dtype="int8") /* ty=Tensor[(960), int8] */;
    %154 = reshape(%153, newshape=[960]) /* ty=Tensor[(960), int8] */;
    %155 = @func_1129(%154) /* ty=(Tensor[(8, 8, 9), float64], Tensor[(14, 7, 4), bool], Tensor[(960), int8]) */;
    %156 = @func_2085() /* ty=Tensor[(8, 8, 9), float64] */;
    %157 = %155.2;
    (%156, %157, meta[relay.Constant][7] /* ty=Tensor[(960), int8] */)
  };
  %158() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(960), int8]) */
}

def @func_6638(%var_6637: Tensor[(1, 1792), float64]) -> (Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32], Tensor[(8, 8, 9), float64], Tensor[(1, 1792), float64], Tensor[(960), int8], Tensor[(8, 8, 9), float64]) {
  %170 = fn (%var_6630: Tensor[(1, 1792), float64]) -> (Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32], Tensor[(8, 8, 9), float64], Tensor[(1, 1792), float64], Tensor[(960), int8], Tensor[(8, 8, 9), float64]) {
    %159 = @func_1751() /* ty=(Tensor[(8, 8, 9), float64],) */;
    %160 = @func_5377() /* ty=(Tensor[(13, 8, 3), float32],) */;
    %161 = cast(%var_6630, dtype="float64") /* ty=Tensor[(1, 1792), float64] */;
    %162 = cast(meta[relay.Constant][8] /* ty=Tensor[(960), int8] */, dtype="int8") /* ty=Tensor[(960), int8] */;
    %163 = reshape(%161, newshape=[4, 448]) /* ty=Tensor[(4, 448), float64] */;
    %164 = reshape(%162, newshape=[960]) /* ty=Tensor[(960), int8] */;
    %165 = @func_2626(%163, %164) /* ty=(Tensor[(1792), float64], Tensor[(4, 448), float64], Tensor[(1800), float64], Tensor[(14, 7, 4), bool], Tensor[(960), int8], Tensor[(8, 8, 9), float64]) */;
    %166 = %159.0;
    %167 = %160.0;
    %168 = %165.5;
    %169 = @func_6386() /* ty=Tensor[(8, 8, 9), float64] */;
    (%166, %167, %168, %var_6630, meta[relay.Constant][8] /* ty=Tensor[(960), int8] */, %169)
  };
  %170(%var_6637) /* ty=(Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32], Tensor[(8, 8, 9), float64], Tensor[(1, 1792), float64], Tensor[(960), int8], Tensor[(8, 8, 9), float64]) */
}

def @func_795(%var_746: Tensor[(13, 15, 11), uint8], %var_751: Tensor[(90), float64], %var_752: uint16, %var_753: Tensor[(196, 2), uint16]) -> (Tensor[(13, 15, 11), uint8], Tensor[(90), float64], Tensor[(196, 2), uint16], Tensor[(392), float64], Tensor[(13, 15, 11), int16]) {
  %171 = cast(%var_746, dtype="uint8") /* ty=Tensor[(13, 15, 11), uint8] */;
  %172 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(13, 15, 11), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %173 = cast(meta[relay.Constant][9] /* ty=Tensor[(13, 15, 11), uint8] */, dtype="uint8") /* ty=Tensor[(13, 15, 11), uint8] */;
  %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %175 = cast(%var_751, dtype="float64") /* ty=Tensor[(90), float64] */;
  %176 = cast(%var_752, dtype="uint16") /* ty=uint16 */;
  %177 = cast(%var_753, dtype="uint16") /* ty=Tensor[(196, 2), uint16] */;
  %178 = reshape(%175, newshape=[10, 1, 9]) /* ty=Tensor[(10, 1, 9), float64] */;
  %179 = reshape(%176, newshape=[]) /* ty=uint16 */;
  %180 = reshape(%177, newshape=[392]) /* ty=Tensor[(392), uint16] */;
  %181 = @func_285(%178, %179, %180) /* ty=(Tensor[(10, 1, 9), float64], Tensor[(1792), float64], uint16, Tensor[(14, 7, 4), bool], Tensor[(14, 7, 4), bool], Tensor[(392), float64]) */;
  %182 = %181.5;
  %183 = cast(%182, dtype="float64") /* ty=Tensor[(392), float64] */;
  %184 = cast(%var_752, dtype="float64") /* ty=float64 */;
  %185 = cast(meta[relay.Constant][9] /* ty=Tensor[(13, 15, 11), uint8] */, dtype="int16") /* ty=Tensor[(13, 15, 11), int16] */;
  %186 = cast(%var_752, dtype="int16") /* ty=int16 */;
  %187 = bitwise_xor(%173, %174) /* ty=Tensor[(13, 15, 11), uint8] */;
  %188 = floor_mod(%183, %184) /* ty=Tensor[(392), float64] */;
  %189 = subtract(%185, %186) /* ty=Tensor[(13, 15, 11), int16] */;
  (%187, %var_751, %var_753, %188, %189)
}

def @func_7402() -> (Tensor[(960), int8], Tensor[(8, 8, 9), float64]) {
  %190 = @func_7125() /* ty=(Tensor[(960), int8],) */;
  %191 = @func_2394() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %192 = %190.0;
  %193 = %191.0;
  (%192, %193)
}

def @func_3868() -> (Tensor[(16, 10, 6), int8], Tensor[(13, 8, 3), float32]) {
  @func_3866() /* ty=(Tensor[(16, 10, 6), int8], Tensor[(13, 8, 3), float32]) */
}

def @func_7505() -> (Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float32]) {
  %199 = fn () -> (Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float32]) {
    %194 = @func_7302() /* ty=(Tensor[(8, 8, 9), float64],) */;
    %195 = %194.0;
    %196 = cast(%195, dtype="float32") /* ty=Tensor[(8, 8, 9), float32] */;
    %197 = @func_1958() /* ty=Tensor[(8, 8, 9), float64] */;
    %198 = sqrt(%196) /* ty=Tensor[(8, 8, 9), float32] */;
    (%197, %198)
  };
  %199() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float32]) */
}

def @func_4593() -> (Tensor[(8, 8, 9), float64],) {
  %201 = fn () -> (Tensor[(8, 8, 9), float64],) {
    %200 = @func_1202() /* ty=Tensor[(8, 8, 9), float64] */;
    (%200,)
  };
  %201() /* ty=(Tensor[(8, 8, 9), float64],) */
}

def @func_5378() -> (Tensor[(13, 8, 3), float32],) {
  %204 = fn () -> (Tensor[(13, 8, 3), float32],) {
    %202 = @func_2382() /* ty=(Tensor[(13, 8, 3), float32],) */;
    %203 = %202.0;
    (%203,)
  };
  %204() /* ty=(Tensor[(13, 8, 3), float32],) */
}

def @func_6270(%var_6268: Tensor[(2, 72), float32], %var_6269: uint16) -> (Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32], Tensor[(10, 4, 6), bool], Tensor[(9, 2, 8), float32], Tensor[(2, 72), float32], Tensor[(1800), float64], uint16) {
  @func_6266(%var_6268, %var_6269) /* ty=(Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32], Tensor[(10, 4, 6), bool], Tensor[(9, 2, 8), float32], Tensor[(2, 72), float32], Tensor[(1800), float64], uint16) */
}

def @func_6184(%var_6182: Tensor[(10, 16, 1), uint16], %var_6183: Tensor[(10, 16, 6), uint16]) -> (Tensor[(10, 16, 6), uint16], Tensor[(960), float32]) {
  @func_6180(%var_6182, %var_6183) /* ty=(Tensor[(10, 16, 6), uint16], Tensor[(960), float32]) */
}

def @func_5855(%var_5853: Tensor[(60), float64]) -> (Tensor[(8, 8, 9), float64], Tensor[(1, 10, 6), float64], float64, Tensor[(60), float64]) {
  @func_5852(%var_5853) /* ty=(Tensor[(8, 8, 9), float64], Tensor[(1, 10, 6), float64], float64, Tensor[(60), float64]) */
}

def @func_3831(%var_3830: Tensor[(9, 2, 8), float32]) -> Tensor[(9, 2, 8), float32] {
  %206 = fn (%var_3821: Tensor[(9, 2, 8), float32]) -> Tensor[(9, 2, 8), float32] {
    %205 = cast(%var_3821, dtype="float32") /* ty=Tensor[(9, 2, 8), float32] */;
    acosh(%205) /* ty=Tensor[(9, 2, 8), float32] */
  };
  %206(%var_3830) /* ty=Tensor[(9, 2, 8), float32] */
}

def @func_1722() -> (Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) {
  %207 = @func_1170() /* ty=Tensor[(8, 8, 9), float64] */;
  %208 = @func_1202() /* ty=Tensor[(8, 8, 9), float64] */;
  (%207, %208)
}

def @func_4982(%var_4980: Tensor[(352), float32]) -> (Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(11, 8, 4), float32], Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64], Tensor[(352), int8]) {
  @func_4979(%var_4980) /* ty=(Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(11, 8, 4), float32], Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64], Tensor[(352), int8]) */
}

def @func_5000() -> (Tensor[(8, 8, 9), float64],) {
  @func_4998() /* ty=(Tensor[(8, 8, 9), float64],) */
}

def @func_6902(%var_6899: Tensor[(30, 6), float64]) -> (Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32], Tensor[(8, 8, 9), float64], Tensor[(30, 6), float64]) {
  %209 = cast(%var_6899, dtype="float64") /* ty=Tensor[(30, 6), float64] */;
  %210 = reshape(%209, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %211 = @func_6854(%210) /* ty=(Tensor[(960), int8], Tensor[(8, 8, 9), float64], Tensor[(576), float64], Tensor[(8, 8, 9), float64], Tensor[(10, 9, 2), float64], Tensor[(180), float64], Tensor[(8, 8, 9), float64]) */;
  %212 = @func_2927() /* ty=Tensor[(8, 8, 9), float64] */;
  %213 = @func_6102() /* ty=Tensor[(13, 8, 3), float32] */;
  %214 = %211.3;
  (%212, %213, %214, %var_6899)
}

def @func_4539() -> (Tensor[(960), int8], Tensor[(8, 30), float64], Tensor[(12, 5, 13), float32], Tensor[(12, 5, 13), float64]) {
  %228 = fn () -> (Tensor[(960), int8], Tensor[(8, 30), float64], Tensor[(12, 5, 13), float32], Tensor[(12, 5, 13), float64]) {
    %215 = cast(meta[relay.Constant][10] /* ty=Tensor[(8, 30), float64] */, dtype="float64") /* ty=Tensor[(8, 30), float64] */;
    %216 = reshape(%215, newshape=[240]) /* ty=Tensor[(240), float64] */;
    %217 = @func_3951(%216) /* ty=(Tensor[(10, 4, 6), float64], Tensor[(240), float64], Tensor[(312), float64], Tensor[(960), int8]) */;
    %218 = cast(meta[relay.Constant][12] /* ty=Tensor[(12, 5, 13), int32] */, dtype="int32") /* ty=Tensor[(12, 5, 13), int32] */;
    %219 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(12, 5, 13), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %220 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 5, 13), int32] */, dtype="int32") /* ty=Tensor[(12, 5, 13), int32] */;
    %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %222 = maximum(%220, %221) /* ty=Tensor[(12, 5, 13), int32] */;
    %223 = cast(%222, dtype="float32") /* ty=Tensor[(12, 5, 13), float32] */;
    %224 = cast(%222, dtype="float64") /* ty=Tensor[(12, 5, 13), float64] */;
    %225 = %217.3;
    %226 = sqrt(%223) /* ty=Tensor[(12, 5, 13), float32] */;
    %227 = acosh(%224) /* ty=Tensor[(12, 5, 13), float64] */;
    (%225, meta[relay.Constant][10] /* ty=Tensor[(8, 30), float64] */, %226, %227)
  };
  %228() /* ty=(Tensor[(960), int8], Tensor[(8, 30), float64], Tensor[(12, 5, 13), float32], Tensor[(12, 5, 13), float64]) */
}

def @func_1102(%var_1033: Tensor[(14, 28), uint16], %var_1061: Tensor[(14, 28), float64], %var_1078: Tensor[(90), float64]) -> (Tensor[(8, 8, 9), float64], Tensor[(14, 7, 4), bool], uint16, Tensor[(14, 7, 4), bool], Tensor[(960), int8], Tensor[(1792), float64], Tensor[(14, 28), float64], Tensor[(14, 7, 4), float32], uint16, Tensor[(90), float64], Tensor[(14, 7, 4), bool], Tensor[(14, 28), float64]) {
  %229 = cast(meta[relay.Constant][13] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %230 = cast(%var_1033, dtype="uint16") /* ty=Tensor[(14, 28), uint16] */;
  %231 = reshape(%229, newshape=[]) /* ty=uint16 */;
  %232 = reshape(%230, newshape=[14, 7, 4]) /* ty=Tensor[(14, 7, 4), uint16] */;
  %233 = @func_104(%231, %232) /* ty=(Tensor[(14, 7, 4), bool],) */;
  %234 = cast(meta[relay.Constant][14] /* ty=Tensor[(960), int8] */, dtype="int8") /* ty=Tensor[(960), int8] */;
  %235 = reshape(%234, newshape=[16, 10, 6]) /* ty=Tensor[(16, 10, 6), int8] */;
  %236 = @func_476(%235) /* ty=(Tensor[(16, 10, 6), int8], Tensor[(14, 7, 4), bool], Tensor[(392, 1), uint16]) */;
  %237 = cast(%var_1033, dtype="float64") /* ty=Tensor[(14, 28), float64] */;
  %238 = log2(%237) /* ty=Tensor[(14, 28), float64] */;
  %239 = cast(%var_1061, dtype="uint8") /* ty=Tensor[(14, 28), uint8] */;
  %240 = shape_of(%238, dtype="int32") /* ty=Tensor[(2), int32] */;
  %241 = cast(%238, dtype="uint8") /* ty=Tensor[(14, 28), uint8] */;
  %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %243 = left_shift(%241, %242) /* ty=Tensor[(14, 28), uint8] */;
  %244 = cast(meta[relay.Constant][16] /* ty=Tensor[(14, 28), uint8] */, dtype="float64") /* ty=Tensor[(14, 28), float64] */;
  %245 = shape_of(%243, dtype="int32") /* ty=Tensor[(2), int32] */;
  %246 = cast(%243, dtype="float64") /* ty=Tensor[(14, 28), float64] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %248 = cast(meta[relay.Constant][15] /* ty=Tensor[(1792), float64] */, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %249 = cast(meta[relay.Constant][15] /* ty=Tensor[(1792), float64] */, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %250 = cast(meta[relay.Constant][13] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %251 = reshape(%248, newshape=[16, 14, 8]) /* ty=Tensor[(16, 14, 8), float64] */;
  %252 = reshape(%249, newshape=[16, 14, 8]) /* ty=Tensor[(16, 14, 8), float64] */;
  %253 = reshape(%250, newshape=[]) /* ty=uint16 */;
  %254 = @func_183(%251, %252, %253) /* ty=(Tensor[(16, 14, 8), float32], Tensor[(14, 7, 4), bool], uint16, Tensor[(392), uint16], Tensor[(14, 7, 4), bool], Tensor[(14, 7, 4), bool]) */;
  %255 = %254.1;
  %256 = cast(%var_1033, dtype="float32") /* ty=Tensor[(14, 28), float32] */;
  %257 = shape_of(%255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %258 = cast(%255, dtype="float32") /* ty=Tensor[(14, 7, 4), float32] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %260 = cast(%var_1078, dtype="float64") /* ty=Tensor[(90), float64] */;
  %261 = cast(meta[relay.Constant][13] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %262 = cast(%238, dtype="uint16") /* ty=Tensor[(14, 28), uint16] */;
  %263 = reshape(%260, newshape=[10, 1, 9]) /* ty=Tensor[(10, 1, 9), float64] */;
  %264 = reshape(%261, newshape=[]) /* ty=uint16 */;
  %265 = reshape(%262, newshape=[392]) /* ty=Tensor[(392), uint16] */;
  %266 = @func_285(%263, %264, %265) /* ty=(Tensor[(10, 1, 9), float64], Tensor[(1792), float64], uint16, Tensor[(14, 7, 4), bool], Tensor[(14, 7, 4), bool], Tensor[(392), float64]) */;
  %267 = cast(meta[relay.Constant][13] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %268 = cast(%255, dtype="uint16") /* ty=Tensor[(14, 7, 4), uint16] */;
  %269 = reshape(%267, newshape=[]) /* ty=uint16 */;
  %270 = reshape(%268, newshape=[14, 7, 4]) /* ty=Tensor[(14, 7, 4), uint16] */;
  %271 = @func_104(%269, %270) /* ty=(Tensor[(14, 7, 4), bool],) */;
  %272 = cast(%243, dtype="float32") /* ty=Tensor[(14, 28), float32] */;
  %273 = sin(%272) /* ty=Tensor[(14, 28), float32] */;
  %274 = cast(%273, dtype="float64") /* ty=Tensor[(14, 28), float64] */;
  %275 = @func_954() /* ty=Tensor[(8, 8, 9), float64] */;
  %276 = %233.0;
  %277 = %236.1;
  %278 = divide(%246, %247) /* ty=Tensor[(14, 28), float64] */;
  %279 = power(%258, %259) /* ty=Tensor[(14, 7, 4), float32] */;
  %280 = %266.2;
  %281 = %271.0;
  %282 = atanh(%274) /* ty=Tensor[(14, 28), float64] */;
  (%275, %276, meta[relay.Constant][13] /* ty=uint16 */, %277, meta[relay.Constant][14] /* ty=Tensor[(960), int8] */, meta[relay.Constant][15] /* ty=Tensor[(1792), float64] */, %278, %279, %280, %var_1078, %281, %282)
}

def @func_6266(%var_6255: Tensor[(2, 72), float32], %var_6264: uint16) -> (Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32], Tensor[(10, 4, 6), bool], Tensor[(9, 2, 8), float32], Tensor[(2, 72), float32], Tensor[(1800), float64], uint16) {
  %283 = @func_4238() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %284 = @func_2382() /* ty=(Tensor[(13, 8, 3), float32],) */;
  %285 = cast(meta[relay.Constant][17] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %286 = reshape(%285, newshape=[10, 4, 6]) /* ty=Tensor[(10, 4, 6), float64] */;
  %287 = @func_3692(%286) /* ty=(Tensor[(10, 4, 6), float64], Tensor[(10, 4, 6), float64]) */;
  %288 = %287.1;
  %289 = cast(meta[relay.Constant][17] /* ty=Tensor[(240), float64] */, dtype="bool") /* ty=Tensor[(240), bool] */;
  %290 = shape_of(%288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%288, dtype="bool") /* ty=Tensor[(10, 4, 6), bool] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %293 = cast(%var_6255, dtype="float32") /* ty=Tensor[(2, 72), float32] */;
  %294 = reshape(%293, newshape=[9, 2, 8]) /* ty=Tensor[(9, 2, 8), float32] */;
  %295 = logical_and(%291, %292) /* ty=Tensor[(10, 4, 6), bool] */;
  %296 = cast(%295, dtype="int64") /* ty=Tensor[(10, 4, 6), int64] */;
  %297 = cast(%var_6264, dtype="uint16") /* ty=uint16 */;
  %298 = reshape(%296, newshape=[5, 16, 3]) /* ty=Tensor[(5, 16, 3), int64] */;
  %299 = reshape(%297, newshape=[]) /* ty=uint16 */;
  %300 = @func_5290(%298, %299) /* ty=(Tensor[(5, 16, 3), bool], Tensor[(15, 15, 8), float32], Tensor[(1800), float64], Tensor[(1792), float64], uint16) */;
  %301 = %283.0;
  %302 = %284.0;
  %303 = @func_3829(%294) /* ty=Tensor[(9, 2, 8), float32] */;
  %304 = %300.2;
  (%301, %302, %295, %303, %var_6255, %304, %var_6264)
}

def @func_6554() -> (Tensor[(960), int8], Tensor[(8, 8, 9), float64]) {
  %309 = fn () -> (Tensor[(960), int8], Tensor[(8, 8, 9), float64]) {
    %305 = @func_3209() /* ty=(Tensor[(13, 8, 3), bool], Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64], Tensor[(1792), float64], Tensor[(960), int8]) */;
    %306 = @func_4998() /* ty=(Tensor[(8, 8, 9), float64],) */;
    %307 = %305.4;
    %308 = %306.0;
    (%307, %308)
  };
  %309() /* ty=(Tensor[(960), int8], Tensor[(8, 8, 9), float64]) */
}

def @func_1753() -> (Tensor[(8, 8, 9), float64],) {
  @func_1751() /* ty=(Tensor[(8, 8, 9), float64],) */
}

def @func_7110() -> Tensor[(8, 8, 9), float64] {
  @func_7108() /* ty=Tensor[(8, 8, 9), float64] */
}

def @func_3209() -> (Tensor[(13, 8, 3), bool], Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64], Tensor[(1792), float64], Tensor[(960), int8]) {
  %310 = @func_2986() /* ty=(Tensor[(16, 10, 6), int8], Tensor[(13, 8, 3), float32], Tensor[(312), float32]) */;
  %311 = %310.1;
  %312 = cast(meta[relay.Constant][18] /* ty=Tensor[(13, 8, 3), float32] */, dtype="bool") /* ty=Tensor[(13, 8, 3), bool] */;
  %313 = shape_of(%311, dtype="int32") /* ty=Tensor[(3), int32] */;
  %314 = cast(%311, dtype="bool") /* ty=Tensor[(13, 8, 3), bool] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %316 = @func_2451() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(960), int8]) */;
  %317 = cast(meta[relay.Constant][19] /* ty=Tensor[(1792), float64] */, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %318 = cast(meta[relay.Constant][20] /* ty=Tensor[(960), int8] */, dtype="int8") /* ty=Tensor[(960), int8] */;
  %319 = reshape(%317, newshape=[4, 448]) /* ty=Tensor[(4, 448), float64] */;
  %320 = reshape(%318, newshape=[960]) /* ty=Tensor[(960), int8] */;
  %321 = @func_2626(%319, %320) /* ty=(Tensor[(1792), float64], Tensor[(4, 448), float64], Tensor[(1800), float64], Tensor[(14, 7, 4), bool], Tensor[(960), int8], Tensor[(8, 8, 9), float64]) */;
  %322 = greater_equal(%314, %315) /* ty=Tensor[(13, 8, 3), bool] */;
  %323 = %316.0;
  %324 = %321.5;
  (%322, %323, %324, meta[relay.Constant][19] /* ty=Tensor[(1792), float64] */, meta[relay.Constant][20] /* ty=Tensor[(960), int8] */)
}

def @func_7470() -> Tensor[(8, 8, 9), float64] {
  %326 = fn () -> Tensor[(8, 8, 9), float64] {
    %325 = @func_5084() /* ty=(Tensor[(8, 8, 9), float64],) */;
    %325.0
  };
  %326() /* ty=Tensor[(8, 8, 9), float64] */
}

def @func_3695(%var_3693: Tensor[(10, 4, 6), float64]) -> (Tensor[(10, 4, 6), float64], Tensor[(10, 4, 6), float64]) {
  @func_3692(%var_3693) /* ty=(Tensor[(10, 4, 6), float64], Tensor[(10, 4, 6), float64]) */
}

def @func_5852(%var_5841: Tensor[(60), float64]) -> (Tensor[(8, 8, 9), float64], Tensor[(1, 10, 6), float64], float64, Tensor[(60), float64]) {
  %327 = cast(-3.42004f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %328 = cast(%var_5841, dtype="float64") /* ty=Tensor[(60), float64] */;
  %329 = reshape(%327, newshape=[]) /* ty=float64 */;
  %330 = reshape(%328, newshape=[1, 10, 6]) /* ty=Tensor[(1, 10, 6), float64] */;
  %331 = @func_5385() /* ty=Tensor[(8, 8, 9), float64] */;
  %332 = @func_2846(%329, %330) /* ty=Tensor[(1, 10, 6), float64] */;
  (%331, %332, -3.42004f64 /* ty=float64 */, %var_5841)
}

def @func_6464() -> (Tensor[(8, 8, 9), float64],) {
  @func_6462() /* ty=(Tensor[(8, 8, 9), float64],) */
}

def @func_6727() -> Tensor[(8, 8, 9), float64] {
  %334 = fn () -> Tensor[(8, 8, 9), float64] {
    %333 = @func_2451() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(960), int8]) */;
    %333.0
  };
  %334() /* ty=Tensor[(8, 8, 9), float64] */
}

def @func_7289() -> (Tensor[(3, 10, 15), bool],) {
  @func_7287() /* ty=(Tensor[(3, 10, 15), bool],) */
}

def @func_3211() -> (Tensor[(13, 8, 3), bool], Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64], Tensor[(1792), float64], Tensor[(960), int8]) {
  @func_3209() /* ty=(Tensor[(13, 8, 3), bool], Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64], Tensor[(1792), float64], Tensor[(960), int8]) */
}

def @func_3311() -> Tensor[(8, 8, 9), float64] {
  %335 = @func_1600() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %335.0
}

def @func_2074(%var_2028: Tensor[(90), float64], %var_2029: uint16, %var_2049: Tensor[(1800), float64]) -> (Tensor[(1792), float64], Tensor[(90), float64], uint16, Tensor[(7, 7, 8), float64], Tensor[(14, 7, 4), bool], Tensor[(1800), float64], Tensor[(8, 8, 9), float64]) {
  %336 = cast(%var_2028, dtype="float64") /* ty=Tensor[(90), float64] */;
  %337 = cast(%var_2029, dtype="uint16") /* ty=uint16 */;
  %338 = cast(meta[relay.Constant][21] /* ty=Tensor[(7, 7, 8), float64] */, dtype="float64") /* ty=Tensor[(7, 7, 8), float64] */;
  %339 = cosh(%338) /* ty=Tensor[(7, 7, 8), float64] */;
  %340 = cast(%339, dtype="uint16") /* ty=Tensor[(7, 7, 8), uint16] */;
  %341 = reshape(%336, newshape=[10, 1, 9]) /* ty=Tensor[(10, 1, 9), float64] */;
  %342 = reshape(%337, newshape=[]) /* ty=uint16 */;
  %343 = reshape(%340, newshape=[392]) /* ty=Tensor[(392), uint16] */;
  %344 = @func_285(%341, %342, %343) /* ty=(Tensor[(10, 1, 9), float64], Tensor[(1792), float64], uint16, Tensor[(14, 7, 4), bool], Tensor[(14, 7, 4), bool], Tensor[(392), float64]) */;
  %345 = cast(meta[relay.Constant][21] /* ty=Tensor[(7, 7, 8), float64] */, dtype="float64") /* ty=Tensor[(7, 7, 8), float64] */;
  %346 = shape_of(%339, dtype="int32") /* ty=Tensor[(3), int32] */;
  %347 = cast(%339, dtype="float64") /* ty=Tensor[(7, 7, 8), float64] */;
  %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %349 = cast(%var_2049, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %350 = cast(%var_2049, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %351 = cast(%var_2049, dtype="float32") /* ty=Tensor[(1800), float32] */;
  %352 = %344.1;
  %353 = cast(%352, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %354 = cast(%var_2029, dtype="uint16") /* ty=uint16 */;
  %355 = reshape(%349, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), float64] */;
  %356 = reshape(%350, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), float64] */;
  %357 = reshape(%351, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), float32] */;
  %358 = reshape(%353, newshape=[1792]) /* ty=Tensor[(1792), float64] */;
  %359 = reshape(%354, newshape=[]) /* ty=uint16 */;
  %360 = @func_449(%355, %356, %357, %358, %359) /* ty=(Tensor[(15, 15, 8), float32], Tensor[(14, 7, 4), bool], Tensor[(1792), float64], uint16, Tensor[(14, 7, 4), bool], Tensor[(15, 15, 8), float32]) */;
  %361 = power(%347, %348) /* ty=Tensor[(7, 7, 8), float64] */;
  %362 = %360.4;
  %363 = @func_1170() /* ty=Tensor[(8, 8, 9), float64] */;
  (%352, %var_2028, %var_2029, %361, %362, %var_2049, %363)
}

def @func_1129(%var_1125: Tensor[(960), int8]) -> (Tensor[(8, 8, 9), float64], Tensor[(14, 7, 4), bool], Tensor[(960), int8]) {
  %364 = cast(%var_1125, dtype="int8") /* ty=Tensor[(960), int8] */;
  %365 = reshape(%364, newshape=[16, 10, 6]) /* ty=Tensor[(16, 10, 6), int8] */;
  %366 = @func_476(%365) /* ty=(Tensor[(16, 10, 6), int8], Tensor[(14, 7, 4), bool], Tensor[(392, 1), uint16]) */;
  %367 = @func_954() /* ty=Tensor[(8, 8, 9), float64] */;
  %368 = %366.1;
  (%367, %368, %var_1125)
}

def @func_3631() -> (Tensor[(8, 8, 9), float64],) {
  %369 = @func_1513() /* ty=Tensor[(8, 8, 9), float64] */;
  (%369,)
}

def @func_4627() -> (Tensor[(8, 8, 9), float64], Tensor[(10, 9, 2), float64], Tensor[(180, 1), float64]) {
  @func_4625() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(10, 9, 2), float64], Tensor[(180, 1), float64]) */
}

def @func_5210(%var_5208: Tensor[(5, 7, 9), float64]) -> (Tensor[(5, 7, 9), float64],) {
  @func_5207(%var_5208) /* ty=(Tensor[(5, 7, 9), float64],) */
}

def @func_956() -> Tensor[(8, 8, 9), float64] {
  @func_954() /* ty=Tensor[(8, 8, 9), float64] */
}

def @func_2266() -> (Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(16, 10, 6), int8]) {
  %370 = @func_2018() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(960), int8], Tensor[(16, 10, 6), int8]) */;
  %371 = %370.2;
  %372 = cast(%371, dtype="int8") /* ty=Tensor[(960), int8] */;
  %373 = reshape(%372, newshape=[16, 10, 6]) /* ty=Tensor[(16, 10, 6), int8] */;
  %374 = @func_476(%373) /* ty=(Tensor[(16, 10, 6), int8], Tensor[(14, 7, 4), bool], Tensor[(392, 1), uint16]) */;
  %375 = @func_1156() /* ty=Tensor[(8, 8, 9), float64] */;
  %376 = %374.0;
  (%375, %371, %376)
}

def @func_2928() -> Tensor[(8, 8, 9), float64] {
  %377 = fn () -> Tensor[(8, 8, 9), float64] {
    @func_2652() /* ty=Tensor[(8, 8, 9), float64] */
  };
  %377() /* ty=Tensor[(8, 8, 9), float64] */
}

def @func_1171() -> Tensor[(8, 8, 9), float64] {
  %378 = fn () -> Tensor[(8, 8, 9), float64] {
    @func_1156() /* ty=Tensor[(8, 8, 9), float64] */
  };
  %378() /* ty=Tensor[(8, 8, 9), float64] */
}

def @func_2654() -> Tensor[(8, 8, 9), float64] {
  @func_2652() /* ty=Tensor[(8, 8, 9), float64] */
}

def @func_3304() -> (Tensor[(8, 8, 9), float64], uint16, Tensor[(1800), float64], Tensor[(1792), float64], uint16) {
  %392 = fn () -> (Tensor[(8, 8, 9), float64], uint16, Tensor[(1800), float64], Tensor[(1792), float64], uint16) {
    %379 = cast(meta[relay.Constant][22] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
    %380 = cast(meta[relay.Constant][22] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
    %381 = cast(meta[relay.Constant][22] /* ty=Tensor[(1800), float64] */, dtype="float32") /* ty=Tensor[(1800), float32] */;
    %382 = cast(meta[relay.Constant][23] /* ty=Tensor[(1792), float64] */, dtype="float64") /* ty=Tensor[(1792), float64] */;
    %383 = cast(meta[relay.Constant][24] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %384 = reshape(%379, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), float64] */;
    %385 = reshape(%380, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), float64] */;
    %386 = reshape(%381, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), float32] */;
    %387 = reshape(%382, newshape=[1792]) /* ty=Tensor[(1792), float64] */;
    %388 = reshape(%383, newshape=[]) /* ty=uint16 */;
    %389 = @func_449(%384, %385, %386, %387, %388) /* ty=(Tensor[(15, 15, 8), float32], Tensor[(14, 7, 4), bool], Tensor[(1792), float64], uint16, Tensor[(14, 7, 4), bool], Tensor[(15, 15, 8), float32]) */;
    %390 = @func_1202() /* ty=Tensor[(8, 8, 9), float64] */;
    %391 = %389.3;
    (%390, %391, meta[relay.Constant][22] /* ty=Tensor[(1800), float64] */, meta[relay.Constant][23] /* ty=Tensor[(1792), float64] */, meta[relay.Constant][24] /* ty=uint16 */)
  };
  %392() /* ty=(Tensor[(8, 8, 9), float64], uint16, Tensor[(1800), float64], Tensor[(1792), float64], uint16) */
}

def @func_1890(%var_1885: Tensor[(8, 7, 16), int16], %var_1886: Tensor[(8, 7, 16), int16], %var_1887: Tensor[(8, 7, 16), int16], %var_1888: Tensor[(960), int8], %var_1889: Tensor[(90), float64]) -> (Tensor[(8, 7, 16), bool], Tensor[(16, 10, 6), int8], Tensor[(960), int8], Tensor[(14, 7, 4), bool], Tensor[(90), float64], uint16, Tensor[(392), uint16]) {
  %415 = fn (%var_1841: Tensor[(8, 7, 16), int16], %var_1842: Tensor[(8, 7, 16), int16], %var_1847: Tensor[(8, 7, 16), int16], %var_1852: Tensor[(960), int8], %var_1876: Tensor[(90), float64]) -> (Tensor[(8, 7, 16), bool], Tensor[(16, 10, 6), int8], Tensor[(960), int8], Tensor[(14, 7, 4), bool], Tensor[(90), float64], uint16, Tensor[(392), uint16]) {
    %393 = cast(%var_1842, dtype="int16") /* ty=Tensor[(8, 7, 16), int16] */;
    %394 = shape_of(%var_1841, dtype="int32") /* ty=Tensor[(3), int32] */;
    %395 = cast(%var_1841, dtype="int16") /* ty=Tensor[(8, 7, 16), int16] */;
    %396 = dyn.reshape(%393, %394, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %397 = subtract(%395, %396) /* ty=Tensor[(8, 7, 16), int16] */;
    %398 = cast(%var_1847, dtype="bool") /* ty=Tensor[(8, 7, 16), bool] */;
    %399 = shape_of(%397, dtype="int32") /* ty=Tensor[(3), int32] */;
    %400 = cast(%397, dtype="bool") /* ty=Tensor[(8, 7, 16), bool] */;
    %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %402 = cast(%var_1852, dtype="int8") /* ty=Tensor[(960), int8] */;
    %403 = reshape(%402, newshape=[16, 10, 6]) /* ty=Tensor[(16, 10, 6), int8] */;
    %404 = @func_476(%403) /* ty=(Tensor[(16, 10, 6), int8], Tensor[(14, 7, 4), bool], Tensor[(392, 1), uint16]) */;
    %405 = cast(%var_1876, dtype="float64") /* ty=Tensor[(90), float64] */;
    %406 = cast(meta[relay.Constant][25] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %407 = cast(meta[relay.Constant][26] /* ty=Tensor[(392), uint16] */, dtype="uint16") /* ty=Tensor[(392), uint16] */;
    %408 = reshape(%405, newshape=[10, 1, 9]) /* ty=Tensor[(10, 1, 9), float64] */;
    %409 = reshape(%406, newshape=[]) /* ty=uint16 */;
    %410 = reshape(%407, newshape=[392]) /* ty=Tensor[(392), uint16] */;
    %411 = @func_285(%408, %409, %410) /* ty=(Tensor[(10, 1, 9), float64], Tensor[(1792), float64], uint16, Tensor[(14, 7, 4), bool], Tensor[(14, 7, 4), bool], Tensor[(392), float64]) */;
    %412 = greater_equal(%400, %401) /* ty=Tensor[(8, 7, 16), bool] */;
    %413 = %404.0;
    %414 = %411.3;
    (%412, %413, %var_1852, %414, %var_1876, meta[relay.Constant][25] /* ty=uint16 */, meta[relay.Constant][26] /* ty=Tensor[(392), uint16] */)
  };
  %415(%var_1885, %var_1886, %var_1887, %var_1888, %var_1889) /* ty=(Tensor[(8, 7, 16), bool], Tensor[(16, 10, 6), int8], Tensor[(960), int8], Tensor[(14, 7, 4), bool], Tensor[(90), float64], uint16, Tensor[(392), uint16]) */
}

def @func_5506() -> (Tensor[(8, 8, 9), float64],) {
  @func_5504() /* ty=(Tensor[(8, 8, 9), float64],) */
}

def @func_2717() -> (Tensor[(13, 8, 3), float32], Tensor[(8, 8, 9), float64], Tensor[(392, 1), bool], Tensor[(196, 2), uint16], Tensor[(2145, 1), uint8], Tensor[(15, 6), float64]) {
  %436 = fn () -> (Tensor[(13, 8, 3), float32], Tensor[(8, 8, 9), float64], Tensor[(392, 1), bool], Tensor[(196, 2), uint16], Tensor[(2145, 1), uint8], Tensor[(15, 6), float64]) {
    %416 = @func_2382() /* ty=(Tensor[(13, 8, 3), float32],) */;
    %417 = cast(meta[relay.Constant][27] /* ty=Tensor[(392, 1), uint16] */, dtype="uint16") /* ty=Tensor[(392, 1), uint16] */;
    %418 = reshape(%417, newshape=[7, 56]) /* ty=Tensor[(7, 56), uint16] */;
    %419 = @func_1821(%418) /* ty=(Tensor[(8, 8, 9), float64], Tensor[(14, 7, 4), bool], uint16, Tensor[(7, 56), uint16]) */;
    %420 = %419.2;
    %421 = cast(meta[relay.Constant][27] /* ty=Tensor[(392, 1), uint16] */, dtype="bool") /* ty=Tensor[(392, 1), bool] */;
    %422 = cast(%420, dtype="bool") /* ty=bool */;
    %423 = cast(meta[relay.Constant][28] /* ty=Tensor[(2145, 1), uint8] */, dtype="uint8") /* ty=Tensor[(2145, 1), uint8] */;
    %424 = cast(meta[relay.Constant][29] /* ty=Tensor[(15, 6), float64] */, dtype="float64") /* ty=Tensor[(15, 6), float64] */;
    %425 = cast(%420, dtype="uint16") /* ty=uint16 */;
    %426 = cast(meta[relay.Constant][27] /* ty=Tensor[(392, 1), uint16] */, dtype="uint16") /* ty=Tensor[(392, 1), uint16] */;
    %427 = reshape(%423, newshape=[13, 15, 11]) /* ty=Tensor[(13, 15, 11), uint8] */;
    %428 = reshape(%424, newshape=[90]) /* ty=Tensor[(90), float64] */;
    %429 = reshape(%425, newshape=[]) /* ty=uint16 */;
    %430 = reshape(%426, newshape=[196, 2]) /* ty=Tensor[(196, 2), uint16] */;
    %431 = @func_795(%427, %428, %429, %430) /* ty=(Tensor[(13, 15, 11), uint8], Tensor[(90), float64], Tensor[(196, 2), uint16], Tensor[(392), float64], Tensor[(13, 15, 11), int16]) */;
    %432 = %416.0;
    %433 = @func_954() /* ty=Tensor[(8, 8, 9), float64] */;
    %434 = greater(%421, %422) /* ty=Tensor[(392, 1), bool] */;
    %435 = %431.2;
    (%432, %433, %434, %435, meta[relay.Constant][28] /* ty=Tensor[(2145, 1), uint8] */, meta[relay.Constant][29] /* ty=Tensor[(15, 6), float64] */)
  };
  %436() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(8, 8, 9), float64], Tensor[(392, 1), bool], Tensor[(196, 2), uint16], Tensor[(2145, 1), uint8], Tensor[(15, 6), float64]) */
}

def @func_6482() -> (Tensor[(960), int8],) {
  %439 = fn () -> (Tensor[(960), int8],) {
    %437 = @func_6379() /* ty=(Tensor[(960), int8],) */;
    %438 = %437.0;
    (%438,)
  };
  %439() /* ty=(Tensor[(960), int8],) */
}

def @func_4239() -> (Tensor[(8, 8, 9), float64],) {
  %442 = fn () -> (Tensor[(8, 8, 9), float64],) {
    %440 = @func_1722() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) */;
    %441 = %440.1;
    (%441,)
  };
  %442() /* ty=(Tensor[(8, 8, 9), float64],) */
}

def @func_1824(%var_1822: Tensor[(7, 56), uint16]) -> (Tensor[(8, 8, 9), float64], Tensor[(14, 7, 4), bool], uint16, Tensor[(7, 56), uint16]) {
  @func_1821(%var_1822) /* ty=(Tensor[(8, 8, 9), float64], Tensor[(14, 7, 4), bool], uint16, Tensor[(7, 56), uint16]) */
}

def @func_3778(%var_3777: Tensor[(8, 8, 9), float64]) -> (Tensor[(8, 8, 9), float64],) {
  %450 = fn (%var_3770: Tensor[(8, 8, 9), float64]) -> (Tensor[(8, 8, 9), float64],) {
    %443 = @func_2451() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(960), int8]) */;
    %444 = %443.0;
    %445 = cast(%var_3770, dtype="float64") /* ty=Tensor[(8, 8, 9), float64] */;
    %446 = shape_of(%444, dtype="int32") /* ty=Tensor[(3), int32] */;
    %447 = cast(%444, dtype="float64") /* ty=Tensor[(8, 8, 9), float64] */;
    %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %449 = divide(%447, %448) /* ty=Tensor[(8, 8, 9), float64] */;
    (%449,)
  };
  %450(%var_3777) /* ty=(Tensor[(8, 8, 9), float64],) */
}

def @func_2652() -> Tensor[(8, 8, 9), float64] {
  %451 = @func_2018() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(960), int8], Tensor[(16, 10, 6), int8]) */;
  %451.0
}

def @func_1514() -> Tensor[(8, 8, 9), float64] {
  %452 = fn () -> Tensor[(8, 8, 9), float64] {
    @func_1170() /* ty=Tensor[(8, 8, 9), float64] */
  };
  %452() /* ty=Tensor[(8, 8, 9), float64] */
}

def @func_6380() -> (Tensor[(960), int8],) {
  %455 = fn () -> (Tensor[(960), int8],) {
    %453 = @func_2451() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(960), int8]) */;
    %454 = %453.1;
    (%454,)
  };
  %455() /* ty=(Tensor[(960), int8],) */
}

def @func_3616() -> (Tensor[(16, 10, 6), int8], Tensor[(960), int8], Tensor[(8, 8, 9), int16], Tensor[(8, 8, 9), float32]) {
  @func_3614() /* ty=(Tensor[(16, 10, 6), int8], Tensor[(960), int8], Tensor[(8, 8, 9), int16], Tensor[(8, 8, 9), float32]) */
}

def @func_2079(%var_2076: Tensor[(90), float64], %var_2077: uint16, %var_2078: Tensor[(1800), float64]) -> (Tensor[(1792), float64], Tensor[(90), float64], uint16, Tensor[(7, 7, 8), float64], Tensor[(14, 7, 4), bool], Tensor[(1800), float64], Tensor[(8, 8, 9), float64]) {
  @func_2074(%var_2076, %var_2077, %var_2078) /* ty=(Tensor[(1792), float64], Tensor[(90), float64], uint16, Tensor[(7, 7, 8), float64], Tensor[(14, 7, 4), bool], Tensor[(1800), float64], Tensor[(8, 8, 9), float64]) */
}

def @func_4767() -> (Tensor[(8, 8, 9), float64],) {
  @func_4765() /* ty=(Tensor[(8, 8, 9), float64],) */
}

def @func_5146(%var_5090: Tensor[(16, 5, 5), float32], %var_5091: Tensor[(16, 5, 5), float32], %var_5119: Tensor[(960), int8]) -> (Tensor[(392, 1), uint16], Tensor[(960), int8], Tensor[(16, 5, 5), uint32]) {
  %456 = cast(%var_5119, dtype="int8") /* ty=Tensor[(960), int8] */;
  %457 = reshape(%456, newshape=[16, 10, 6]) /* ty=Tensor[(16, 10, 6), int8] */;
  %458 = @func_476(%457) /* ty=(Tensor[(16, 10, 6), int8], Tensor[(14, 7, 4), bool], Tensor[(392, 1), uint16]) */;
  %459 = cast(%var_5091, dtype="float64") /* ty=Tensor[(16, 5, 5), float64] */;
  %460 = cos(%459) /* ty=Tensor[(16, 5, 5), float64] */;
  %461 = cast(%var_5091, dtype="float32") /* ty=Tensor[(16, 5, 5), float32] */;
  %462 = shape_of(%var_5090, dtype="int32") /* ty=Tensor[(3), int32] */;
  %463 = cast(%var_5090, dtype="float32") /* ty=Tensor[(16, 5, 5), float32] */;
  %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %465 = floor_mod(%463, %464) /* ty=Tensor[(16, 5, 5), float32] */;
  %466 = cast(%465, dtype="float64") /* ty=Tensor[(16, 5, 5), float64] */;
  %467 = acosh(%466) /* ty=Tensor[(16, 5, 5), float64] */;
  %468 = cast(%467, dtype="uint32") /* ty=Tensor[(16, 5, 5), uint32] */;
  %469 = shape_of(%460, dtype="int32") /* ty=Tensor[(3), int32] */;
  %470 = cast(%460, dtype="uint32") /* ty=Tensor[(16, 5, 5), uint32] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %472 = %458.2;
  %473 = add(%470, %471) /* ty=Tensor[(16, 5, 5), uint32] */;
  (%472, %var_5119, %473)
}

def @func_7229() -> Tensor[(8, 8, 9), float64] {
  %474 = fn () -> Tensor[(8, 8, 9), float64] {
    @func_3311() /* ty=Tensor[(8, 8, 9), float64] */
  };
  %474() /* ty=Tensor[(8, 8, 9), float64] */
}

def @func_478(%var_477: Tensor[(16, 10, 6), int8]) -> (Tensor[(16, 10, 6), int8], Tensor[(14, 7, 4), bool], Tensor[(392, 1), uint16]) {
  %484 = fn (%var_463: Tensor[(16, 10, 6), int8]) -> (Tensor[(16, 10, 6), int8], Tensor[(14, 7, 4), bool], Tensor[(392, 1), uint16]) {
    %475 = cast(meta[relay.Constant][30] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %476 = cast(%var_463, dtype="int8") /* ty=Tensor[(16, 10, 6), int8] */;
    %477 = cast(meta[relay.Constant][30] /* ty=int8 */, dtype="uint16") /* ty=uint16 */;
    %478 = cast(meta[relay.Constant][31] /* ty=Tensor[(392, 1), uint16] */, dtype="uint16") /* ty=Tensor[(392, 1), uint16] */;
    %479 = reshape(%477, newshape=[]) /* ty=uint16 */;
    %480 = reshape(%478, newshape=[14, 7, 4]) /* ty=Tensor[(14, 7, 4), uint16] */;
    %481 = @func_104(%479, %480) /* ty=(Tensor[(14, 7, 4), bool],) */;
    %482 = bitwise_or(%475, %476) /* ty=Tensor[(16, 10, 6), int8] */;
    %483 = %481.0;
    (%482, %483, meta[relay.Constant][31] /* ty=Tensor[(392, 1), uint16] */)
  };
  %484(%var_477) /* ty=(Tensor[(16, 10, 6), int8], Tensor[(14, 7, 4), bool], Tensor[(392, 1), uint16]) */
}

def @func_4625() -> (Tensor[(8, 8, 9), float64], Tensor[(10, 9, 2), float64], Tensor[(180, 1), float64]) {
  %485 = @func_3815() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(10, 8, 12), bool], Tensor[(960), float32], Tensor[(8, 8, 9), float64]) */;
  %486 = cast(meta[relay.Constant][32] /* ty=Tensor[(180, 1), float64] */, dtype="float64") /* ty=Tensor[(180, 1), float64] */;
  %487 = reshape(%486, newshape=[10, 9, 2]) /* ty=Tensor[(10, 9, 2), float64] */;
  %488 = @func_4407(%487) /* ty=(Tensor[(10, 9, 2), float64], Tensor[(16, 10, 6), int8]) */;
  %489 = %485.3;
  %490 = %488.0;
  (%489, %490, meta[relay.Constant][32] /* ty=Tensor[(180, 1), float64] */)
}

def @func_6502() -> (Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32]) {
  %491 = @func_2382() /* ty=(Tensor[(13, 8, 3), float32],) */;
  %492 = @func_4178() /* ty=Tensor[(8, 8, 9), float64] */;
  %493 = %491.0;
  (%492, %493)
}

def @func_5084() -> (Tensor[(8, 8, 9), float64],) {
  %494 = @func_1202() /* ty=Tensor[(8, 8, 9), float64] */;
  (%494,)
}

def @func_6953(%var_6923: int64, %var_6924: Tensor[(15, 15, 14), int64]) -> (Tensor[(15, 15, 14), int64], Tensor[(13, 8, 3), float32], Tensor[(8, 8, 9), float64], Tensor[(15, 15, 14), uint16]) {
  %495 = cast(%var_6923, dtype="int64") /* ty=int64 */;
  %496 = cast(%var_6924, dtype="int64") /* ty=Tensor[(15, 15, 14), int64] */;
  %497 = @func_4592() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %498 = cast(%var_6924, dtype="uint16") /* ty=Tensor[(15, 15, 14), uint16] */;
  %499 = cast(%var_6923, dtype="uint16") /* ty=uint16 */;
  %500 = multiply(%495, %496) /* ty=Tensor[(15, 15, 14), int64] */;
  %501 = @func_6102() /* ty=Tensor[(13, 8, 3), float32] */;
  %502 = %497.0;
  %503 = left_shift(%498, %499) /* ty=Tensor[(15, 15, 14), uint16] */;
  (%500, %501, %502, %503)
}

def @func_4409(%var_4408: Tensor[(10, 9, 2), float64]) -> (Tensor[(10, 9, 2), float64], Tensor[(16, 10, 6), int8]) {
  %508 = fn (%var_4400: Tensor[(10, 9, 2), float64]) -> (Tensor[(10, 9, 2), float64], Tensor[(16, 10, 6), int8]) {
    %504 = cast(%var_4400, dtype="float64") /* ty=Tensor[(10, 9, 2), float64] */;
    %505 = @func_3614() /* ty=(Tensor[(16, 10, 6), int8], Tensor[(960), int8], Tensor[(8, 8, 9), int16], Tensor[(8, 8, 9), float32]) */;
    %506 = exp(%504) /* ty=Tensor[(10, 9, 2), float64] */;
    %507 = %505.0;
    (%506, %507)
  };
  %508(%var_4408) /* ty=(Tensor[(10, 9, 2), float64], Tensor[(16, 10, 6), int8]) */
}

def @func_2383() -> (Tensor[(13, 8, 3), float32],) {
  %511 = fn () -> (Tensor[(13, 8, 3), float32],) {
    %509 = @func_2161() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32], Tensor[(312), float32]) */;
    %510 = %509.1;
    (%510,)
  };
  %511() /* ty=(Tensor[(13, 8, 3), float32],) */
}

def @func_4004() -> (Tensor[(2145, 1), uint8], Tensor[(8, 8, 9), float64]) {
  %512 = @func_2716() /* ty=(Tensor[(13, 8, 3), float32], Tensor[(8, 8, 9), float64], Tensor[(392, 1), bool], Tensor[(196, 2), uint16], Tensor[(2145, 1), uint8], Tensor[(15, 6), float64]) */;
  %513 = %512.4;
  %514 = @func_954() /* ty=Tensor[(8, 8, 9), float64] */;
  (%513, %514)
}

def @func_7042(%var_7041: Tensor[(90), float64]) -> (Tensor[(392), uint16], Tensor[(90), float64], Tensor[(10, 4, 6), float64], Tensor[(4, 60), float64], Tensor[(3, ?, 6), int8]) {
  %532 = fn (%var_7032: Tensor[(90), float64]) -> (Tensor[(392), uint16], Tensor[(90), float64], Tensor[(10, 4, 6), float64], Tensor[(4, 60), float64], Tensor[(3, ?, 6), int8]) {
    %515 = cast(%var_7032, dtype="float64") /* ty=Tensor[(90), float64] */;
    %516 = reshape(%515, newshape=[90]) /* ty=Tensor[(90), float64] */;
    %517 = @func_4843(%516) /* ty=(Tensor[(8, 8, 9), float64], Tensor[(1792), float64], Tensor[(90), float64], uint16, Tensor[(392), uint16], Tensor[(12, 5, 13), float32]) */;
    %518 = cast(meta[relay.Constant][33] /* ty=Tensor[(4, 60), float64] */, dtype="float64") /* ty=Tensor[(4, 60), float64] */;
    %519 = reshape(%518, newshape=[10, 4, 6]) /* ty=Tensor[(10, 4, 6), float64] */;
    %520 = @func_3692(%519) /* ty=(Tensor[(10, 4, 6), float64], Tensor[(10, 4, 6), float64]) */;
    %521 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 1, 6), float64] */, dtype="float64") /* ty=Tensor[(3, 1, 6), float64] */;
    %522 = sqrt(%521) /* ty=Tensor[(3, 1, 6), float64] */;
    %523 = cast(%522, dtype="float32") /* ty=Tensor[(3, 1, 6), float32] */;
    %524 = asinh(%523) /* ty=Tensor[(3, 1, 6), float32] */;
    %525 = cast(%522, dtype="int8") /* ty=Tensor[(3, 1, 6), int8] */;
    %526 = shape_of(%524, dtype="int32") /* ty=Tensor[(3), int32] */;
    %527 = cast(%524, dtype="int8") /* ty=Tensor[(3, 1, 6), int8] */;
    %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %529 = %517.4;
    %530 = %520.1;
    %531 = add(%527, %528) /* ty=Tensor[(3, ?, 6), int8] */;
    (%529, %var_7032, %530, meta[relay.Constant][33] /* ty=Tensor[(4, 60), float64] */, %531)
  };
  %532(%var_7041) /* ty=(Tensor[(392), uint16], Tensor[(90), float64], Tensor[(10, 4, 6), float64], Tensor[(4, 60), float64], Tensor[(3, ?, 6), int8]) */
}

def @func_5059() -> Tensor[(960), float32] {
  @func_4787() /* ty=Tensor[(960), float32] */
}

def @func_7070() -> (Tensor[(960), int8], Tensor[(8, 8, 9), float64]) {
  %533 = @func_2266() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(16, 10, 6), int8]) */;
  %534 = @func_4592() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %535 = %533.1;
  %536 = %534.0;
  (%535, %536)
}

def @func_965(%var_964: Tensor[(13, 8, 3), float32]) -> Tensor[(13, 8, 3), float32] {
  %538 = fn (%var_959: Tensor[(13, 8, 3), float32]) -> Tensor[(13, 8, 3), float32] {
    %537 = cast(%var_959, dtype="float32") /* ty=Tensor[(13, 8, 3), float32] */;
    asinh(%537) /* ty=Tensor[(13, 8, 3), float32] */
  };
  %538(%var_964) /* ty=Tensor[(13, 8, 3), float32] */
}

def @func_2162() -> (Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32], Tensor[(312), float32]) {
  %543 = fn () -> (Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32], Tensor[(312), float32]) {
    %539 = cast(meta[relay.Constant][35] /* ty=Tensor[(312), float32] */, dtype="float32") /* ty=Tensor[(312), float32] */;
    %540 = reshape(%539, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), float32] */;
    %541 = @func_1513() /* ty=Tensor[(8, 8, 9), float64] */;
    %542 = @func_963(%540) /* ty=Tensor[(13, 8, 3), float32] */;
    (%541, %542, meta[relay.Constant][35] /* ty=Tensor[(312), float32] */)
  };
  %543() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32], Tensor[(312), float32]) */
}

def @func_2744(%var_2743: Tensor[(11, 8, 4), float32]) -> (Tensor[(11, 8, 4), float32],) {
  %549 = fn (%var_2733: Tensor[(11, 8, 4), float32]) -> (Tensor[(11, 8, 4), float32],) {
    %544 = cast(%var_2733, dtype="float32") /* ty=Tensor[(11, 8, 4), float32] */;
    %545 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(11, 8, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %546 = cast(meta[relay.Constant][36] /* ty=Tensor[(11, 8, 4), float32] */, dtype="float32") /* ty=Tensor[(11, 8, 4), float32] */;
    %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %548 = floor_mod(%546, %547) /* ty=Tensor[(11, 8, 4), float32] */;
    (%548,)
  };
  %549(%var_2743) /* ty=(Tensor[(11, 8, 4), float32],) */
}

def @func_5725(%var_5724: Tensor[(4, 15, 10), float32]) -> Tensor[(4, 15, 10), float32] {
  %554 = fn (%var_5716: Tensor[(4, 15, 10), float32]) -> Tensor[(4, 15, 10), float32] {
    %550 = cast(%var_5716, dtype="float32") /* ty=Tensor[(4, 15, 10), float32] */;
    %551 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(4, 15, 10), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %552 = cast(meta[relay.Constant][37] /* ty=Tensor[(4, 15, 10), float32] */, dtype="float32") /* ty=Tensor[(4, 15, 10), float32] */;
    %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    add(%552, %553) /* ty=Tensor[(4, 15, 10), float32] */
  };
  %554(%var_5724) /* ty=Tensor[(4, 15, 10), float32] */
}

def @func_4468() -> (Tensor[(8, 8, 9), float64],) {
  %555 = @func_1751() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %556 = %555.0;
  (%556,)
}

def @func_1157() -> Tensor[(8, 8, 9), float64] {
  %557 = fn () -> Tensor[(8, 8, 9), float64] {
    @func_954() /* ty=Tensor[(8, 8, 9), float64] */
  };
  %557() /* ty=Tensor[(8, 8, 9), float64] */
}

def @func_5937() -> (Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64], Tensor[(2145, 1), uint8], Tensor[(15, 6), float64]) {
  %568 = fn () -> (Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64], Tensor[(2145, 1), uint8], Tensor[(15, 6), float64]) {
    %558 = @func_2451() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(960), int8]) */;
    %559 = @func_4468() /* ty=(Tensor[(8, 8, 9), float64],) */;
    %560 = @func_4004() /* ty=(Tensor[(2145, 1), uint8], Tensor[(8, 8, 9), float64]) */;
    %561 = %559.0;
    %562 = cast(%561, dtype="float64") /* ty=Tensor[(8, 8, 9), float64] */;
    %563 = reshape(%562, newshape=[8, 8, 9]) /* ty=Tensor[(8, 8, 9), float64] */;
    %564 = @func_3499(%563) /* ty=(Tensor[(8, 8, 9), float32], Tensor[(312), float32], Tensor[(8, 8, 9), float64], Tensor[(15, 6), float64], Tensor[(8, 8, 9), float64], Tensor[(10, 8, 12), bool], Tensor[(960), float32]) */;
    %565 = %558.0;
    %566 = %560.0;
    %567 = %564.3;
    (%565, %561, %566, %567)
  };
  %568() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64], Tensor[(2145, 1), uint8], Tensor[(15, 6), float64]) */
}

def @func_6325() -> (Tensor[(8, 8, 9), float64], Tensor[(16, 10, 6), int8], Tensor[(1, 180), float64], Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32], Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) {
  %585 = fn () -> (Tensor[(8, 8, 9), float64], Tensor[(16, 10, 6), int8], Tensor[(1, 180), float64], Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32], Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) {
    %569 = @func_5504() /* ty=(Tensor[(8, 8, 9), float64],) */;
    %570 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 180), float64] */, dtype="float64") /* ty=Tensor[(1, 180), float64] */;
    %571 = reshape(%570, newshape=[10, 9, 2]) /* ty=Tensor[(10, 9, 2), float64] */;
    %572 = @func_4407(%571) /* ty=(Tensor[(10, 9, 2), float64], Tensor[(16, 10, 6), int8]) */;
    %573 = %569.0;
    %574 = cast(%573, dtype="float64") /* ty=Tensor[(8, 8, 9), float64] */;
    %575 = reshape(%574, newshape=[8, 8, 9]) /* ty=Tensor[(8, 8, 9), float64] */;
    %576 = @func_5011(%575) /* ty=(Tensor[(8, 8, 9), float64],) */;
    %577 = @func_2382() /* ty=(Tensor[(13, 8, 3), float32],) */;
    %578 = @func_5084() /* ty=(Tensor[(8, 8, 9), float64],) */;
    %579 = @func_5084() /* ty=(Tensor[(8, 8, 9), float64],) */;
    %580 = %572.1;
    %581 = %576.0;
    %582 = %577.0;
    %583 = %578.0;
    %584 = %579.0;
    (%573, %580, meta[relay.Constant][38] /* ty=Tensor[(1, 180), float64] */, %581, %582, %583, %584)
  };
  %585() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(16, 10, 6), int8], Tensor[(1, 180), float64], Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32], Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) */
}

def @func_801(%var_797: Tensor[(13, 15, 11), uint8], %var_798: Tensor[(90), float64], %var_799: uint16, %var_800: Tensor[(196, 2), uint16]) -> (Tensor[(13, 15, 11), uint8], Tensor[(90), float64], Tensor[(196, 2), uint16], Tensor[(392), float64], Tensor[(13, 15, 11), int16]) {
  @func_795(%var_797, %var_798, %var_799, %var_800) /* ty=(Tensor[(13, 15, 11), uint8], Tensor[(90), float64], Tensor[(196, 2), uint16], Tensor[(392), float64], Tensor[(13, 15, 11), int16]) */
}

def @func_3378() -> (Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), uint32], uint16, Tensor[(392), uint16]) {
  %595 = fn () -> (Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), uint32], uint16, Tensor[(392), uint16]) {
    %586 = cast(meta[relay.Constant][39] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %587 = cast(meta[relay.Constant][40] /* ty=Tensor[(392), uint16] */, dtype="uint16") /* ty=Tensor[(392), uint16] */;
    %588 = @func_2085() /* ty=Tensor[(8, 8, 9), float64] */;
    %589 = cast(%588, dtype="bool") /* ty=Tensor[(8, 8, 9), bool] */;
    %590 = reshape(%586, newshape=[]) /* ty=uint16 */;
    %591 = reshape(%587, newshape=[392]) /* ty=Tensor[(392), uint16] */;
    %592 = reshape(%589, newshape=[8, 8, 9]) /* ty=Tensor[(8, 8, 9), bool] */;
    %593 = @func_1702(%590, %591, %592) /* ty=(Tensor[(14, 7, 4), bool], Tensor[(90), float64], uint16, Tensor[(392), uint16], Tensor[(8, 8, 9), uint32], Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), int32]) */;
    %594 = %593.4;
    (%588, %594, meta[relay.Constant][39] /* ty=uint16 */, meta[relay.Constant][40] /* ty=Tensor[(392), uint16] */)
  };
  %595() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), uint32], uint16, Tensor[(392), uint16]) */
}

def @func_7304() -> (Tensor[(8, 8, 9), float64],) {
  @func_7302() /* ty=(Tensor[(8, 8, 9), float64],) */
}

def @func_6856(%var_6855: Tensor[(180), float64]) -> (Tensor[(960), int8], Tensor[(8, 8, 9), float64], Tensor[(576), float64], Tensor[(8, 8, 9), float64], Tensor[(10, 9, 2), float64], Tensor[(180), float64], Tensor[(8, 8, 9), float64]) {
  %609 = fn (%var_6837: Tensor[(180), float64]) -> (Tensor[(960), int8], Tensor[(8, 8, 9), float64], Tensor[(576), float64], Tensor[(8, 8, 9), float64], Tensor[(10, 9, 2), float64], Tensor[(180), float64], Tensor[(8, 8, 9), float64]) {
    %596 = @func_4398() /* ty=(Tensor[(8, 8, 9), bool], Tensor[(960), int8], Tensor[(8, 8, 9), float64]) */;
    %597 = cast(meta[relay.Constant][41] /* ty=Tensor[(576), float64] */, dtype="float64") /* ty=Tensor[(576), float64] */;
    %598 = reshape(%597, newshape=[8, 8, 9]) /* ty=Tensor[(8, 8, 9), float64] */;
    %599 = @func_4649(%598) /* ty=(Tensor[(8, 8, 9), bool], Tensor[(8, 8, 9), float64]) */;
    %600 = @func_5975() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) */;
    %601 = cast(%var_6837, dtype="float64") /* ty=Tensor[(180), float64] */;
    %602 = reshape(%601, newshape=[10, 9, 2]) /* ty=Tensor[(10, 9, 2), float64] */;
    %603 = @func_4407(%602) /* ty=(Tensor[(10, 9, 2), float64], Tensor[(16, 10, 6), int8]) */;
    %604 = %596.1;
    %605 = %599.1;
    %606 = %600.0;
    %607 = %603.0;
    %608 = @func_3311() /* ty=Tensor[(8, 8, 9), float64] */;
    (%604, %605, meta[relay.Constant][41] /* ty=Tensor[(576), float64] */, %606, %607, %var_6837, %608)
  };
  %609(%var_6855) /* ty=(Tensor[(960), int8], Tensor[(8, 8, 9), float64], Tensor[(576), float64], Tensor[(8, 8, 9), float64], Tensor[(10, 9, 2), float64], Tensor[(180), float64], Tensor[(8, 8, 9), float64]) */
}

def @func_5293(%var_5291: Tensor[(5, 16, 3), int64], %var_5292: uint16) -> (Tensor[(5, 16, 3), bool], Tensor[(15, 15, 8), float32], Tensor[(1800), float64], Tensor[(1792), float64], uint16) {
  %627 = fn (%var_5255: Tensor[(5, 16, 3), int64], %var_5269: uint16) -> (Tensor[(5, 16, 3), bool], Tensor[(15, 15, 8), float32], Tensor[(1800), float64], Tensor[(1792), float64], uint16) {
    %610 = cast(%var_5255, dtype="bool") /* ty=Tensor[(5, 16, 3), bool] */;
    %611 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(5, 16, 3), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %612 = cast(meta[relay.Constant][42] /* ty=Tensor[(5, 16, 3), int64] */, dtype="bool") /* ty=Tensor[(5, 16, 3), bool] */;
    %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %614 = cast(meta[relay.Constant][43] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
    %615 = cast(meta[relay.Constant][43] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
    %616 = cast(meta[relay.Constant][43] /* ty=Tensor[(1800), float64] */, dtype="float32") /* ty=Tensor[(1800), float32] */;
    %617 = cast(meta[relay.Constant][44] /* ty=Tensor[(1792), float64] */, dtype="float64") /* ty=Tensor[(1792), float64] */;
    %618 = cast(%var_5269, dtype="uint16") /* ty=uint16 */;
    %619 = reshape(%614, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), float64] */;
    %620 = reshape(%615, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), float64] */;
    %621 = reshape(%616, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), float32] */;
    %622 = reshape(%617, newshape=[1792]) /* ty=Tensor[(1792), float64] */;
    %623 = reshape(%618, newshape=[]) /* ty=uint16 */;
    %624 = @func_449(%619, %620, %621, %622, %623) /* ty=(Tensor[(15, 15, 8), float32], Tensor[(14, 7, 4), bool], Tensor[(1792), float64], uint16, Tensor[(14, 7, 4), bool], Tensor[(15, 15, 8), float32]) */;
    %625 = less(%612, %613) /* ty=Tensor[(5, 16, 3), bool] */;
    %626 = %624.0;
    (%625, %626, meta[relay.Constant][43] /* ty=Tensor[(1800), float64] */, meta[relay.Constant][44] /* ty=Tensor[(1792), float64] */, %var_5269)
  };
  %627(%var_5291, %var_5292) /* ty=(Tensor[(5, 16, 3), bool], Tensor[(15, 15, 8), float32], Tensor[(1800), float64], Tensor[(1792), float64], uint16) */
}

def @func_6120(%var_6112: Tensor[(10, 13, 1), float32], %var_6113: Tensor[(10, 13, 11), float32]) -> Tensor[(10, 13, 11), float32] {
  %628 = cast(%var_6112, dtype="float32") /* ty=Tensor[(10, 13, 1), float32] */;
  %629 = cast(%var_6113, dtype="float32") /* ty=Tensor[(10, 13, 11), float32] */;
  divide(%628, %629) /* ty=Tensor[(10, 13, 11), float32] */
}

def @func_7125() -> (Tensor[(960), int8],) {
  %630 = @func_6379() /* ty=(Tensor[(960), int8],) */;
  %631 = %630.0;
  (%631,)
}

def @func_6165() -> (Tensor[(8, 8, 9), float64], Tensor[(11, 12, 5), float64], Tensor[(11, 12, 5), float64]) {
  %632 = @func_4238() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %633 = cast(meta[relay.Constant][45] /* ty=Tensor[(11, 12, 5), float32] */, dtype="float32") /* ty=Tensor[(11, 12, 5), float32] */;
  %634 = cosh(%633) /* ty=Tensor[(11, 12, 5), float32] */;
  %635 = cast(%634, dtype="float64") /* ty=Tensor[(11, 12, 5), float64] */;
  %636 = cast(%634, dtype="float64") /* ty=Tensor[(11, 12, 5), float64] */;
  %637 = %632.0;
  %638 = tan(%635) /* ty=Tensor[(11, 12, 5), float64] */;
  %639 = exp(%636) /* ty=Tensor[(11, 12, 5), float64] */;
  (%637, %638, %639)
}

def @func_2359(%var_2358: uint16) -> (Tensor[(13, 8, 3), float64], Tensor[(13, 8, 3), float32], Tensor[(14, 7, 4), bool], Tensor[(3, 30), float64], uint16, Tensor[(1800), float64]) {
  %655 = fn (%var_2346: uint16) -> (Tensor[(13, 8, 3), float64], Tensor[(13, 8, 3), float32], Tensor[(14, 7, 4), bool], Tensor[(3, 30), float64], uint16, Tensor[(1800), float64]) {
    %640 = @func_2161() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32], Tensor[(312), float32]) */;
    %641 = %640.1;
    %642 = cast(%641, dtype="float64") /* ty=Tensor[(13, 8, 3), float64] */;
    %643 = cast(%641, dtype="float32") /* ty=Tensor[(13, 8, 3), float32] */;
    %644 = reshape(%643, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), float32] */;
    %645 = cast(meta[relay.Constant][46] /* ty=Tensor[(3, 30), float64] */, dtype="float64") /* ty=Tensor[(3, 30), float64] */;
    %646 = cast(%var_2346, dtype="uint16") /* ty=uint16 */;
    %647 = cast(meta[relay.Constant][47] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
    %648 = reshape(%645, newshape=[90]) /* ty=Tensor[(90), float64] */;
    %649 = reshape(%646, newshape=[]) /* ty=uint16 */;
    %650 = reshape(%647, newshape=[1800]) /* ty=Tensor[(1800), float64] */;
    %651 = @func_2074(%648, %649, %650) /* ty=(Tensor[(1792), float64], Tensor[(90), float64], uint16, Tensor[(7, 7, 8), float64], Tensor[(14, 7, 4), bool], Tensor[(1800), float64], Tensor[(8, 8, 9), float64]) */;
    %652 = sin(%642) /* ty=Tensor[(13, 8, 3), float64] */;
    %653 = @func_963(%644) /* ty=Tensor[(13, 8, 3), float32] */;
    %654 = %651.4;
    (%652, %653, %654, meta[relay.Constant][46] /* ty=Tensor[(3, 30), float64] */, %var_2346, meta[relay.Constant][47] /* ty=Tensor[(1800), float64] */)
  };
  %655(%var_2358) /* ty=(Tensor[(13, 8, 3), float64], Tensor[(13, 8, 3), float32], Tensor[(14, 7, 4), bool], Tensor[(3, 30), float64], uint16, Tensor[(1800), float64]) */
}

def @func_4979(%var_4938: Tensor[(352), float32]) -> (Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(11, 8, 4), float32], Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64], Tensor[(352), int8]) {
  %656 = @func_4398() /* ty=(Tensor[(8, 8, 9), bool], Tensor[(960), int8], Tensor[(8, 8, 9), float64]) */;
  %657 = cast(%var_4938, dtype="float32") /* ty=Tensor[(352), float32] */;
  %658 = reshape(%657, newshape=[11, 8, 4]) /* ty=Tensor[(11, 8, 4), float32] */;
  %659 = @func_2742(%658) /* ty=(Tensor[(11, 8, 4), float32],) */;
  %660 = cast(%var_4938, dtype="float32") /* ty=Tensor[(352), float32] */;
  %661 = log2(%660) /* ty=Tensor[(352), float32] */;
  %662 = cast(%var_4938, dtype="int8") /* ty=Tensor[(352), int8] */;
  %663 = shape_of(%661, dtype="int32") /* ty=Tensor[(1), int32] */;
  %664 = cast(%661, dtype="int8") /* ty=Tensor[(352), int8] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?), int8] */;
  %666 = %656.2;
  %667 = @func_3163() /* ty=Tensor[(960), int8] */;
  %668 = %659.0;
  %669 = @func_2927() /* ty=Tensor[(8, 8, 9), float64] */;
  %670 = @func_2085() /* ty=Tensor[(8, 8, 9), float64] */;
  %671 = bitwise_or(%664, %665) /* ty=Tensor[(352), int8] */;
  (%666, %667, %668, %669, %670, %671)
}

def @func_4843(%var_4823: Tensor[(90), float64]) -> (Tensor[(8, 8, 9), float64], Tensor[(1792), float64], Tensor[(90), float64], uint16, Tensor[(392), uint16], Tensor[(12, 5, 13), float32]) {
  %672 = @func_1600() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %673 = cast(%var_4823, dtype="float64") /* ty=Tensor[(90), float64] */;
  %674 = cast(meta[relay.Constant][48] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %675 = cast(meta[relay.Constant][49] /* ty=Tensor[(392), uint16] */, dtype="uint16") /* ty=Tensor[(392), uint16] */;
  %676 = reshape(%673, newshape=[10, 1, 9]) /* ty=Tensor[(10, 1, 9), float64] */;
  %677 = reshape(%674, newshape=[]) /* ty=uint16 */;
  %678 = reshape(%675, newshape=[392]) /* ty=Tensor[(392), uint16] */;
  %679 = @func_285(%676, %677, %678) /* ty=(Tensor[(10, 1, 9), float64], Tensor[(1792), float64], uint16, Tensor[(14, 7, 4), bool], Tensor[(14, 7, 4), bool], Tensor[(392), float64]) */;
  %680 = @func_4538() /* ty=(Tensor[(960), int8], Tensor[(8, 30), float64], Tensor[(12, 5, 13), float32], Tensor[(12, 5, 13), float64]) */;
  %681 = %672.0;
  %682 = %679.1;
  %683 = %680.2;
  (%681, %682, %var_4823, meta[relay.Constant][48] /* ty=uint16 */, meta[relay.Constant][49] /* ty=Tensor[(392), uint16] */, %683)
}

def @main(%var_7538: Tensor[(6, 10, 11), float32]) -> (Tensor[(6, 10, 11), float32],) {
  %684 = cast(%var_7538, dtype="float32") /* ty=Tensor[(6, 10, 11), float32] */;
  %685 = acos(%684) /* ty=Tensor[(6, 10, 11), float32] */;
  (%685,)
}

def @func_3313() -> Tensor[(8, 8, 9), float64] {
  @func_3311() /* ty=Tensor[(8, 8, 9), float64] */
}

def @func_188(%var_185: Tensor[(16, 14, 8), float64], %var_186: Tensor[(16, 14, 8), float64], %var_187: uint16) -> (Tensor[(16, 14, 8), float32], Tensor[(14, 7, 4), bool], uint16, Tensor[(392), uint16], Tensor[(14, 7, 4), bool], Tensor[(14, 7, 4), bool]) {
  @func_183(%var_185, %var_186, %var_187) /* ty=(Tensor[(16, 14, 8), float32], Tensor[(14, 7, 4), bool], uint16, Tensor[(392), uint16], Tensor[(14, 7, 4), bool], Tensor[(14, 7, 4), bool]) */
}

def @func_3364() -> Tensor[(8, 8, 9), uint64] {
  %692 = fn () -> Tensor[(8, 8, 9), uint64] {
    %686 = @func_2161() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32], Tensor[(312), float32]) */;
    %687 = %686.0;
    %688 = cast(meta[relay.Constant][50] /* ty=Tensor[(8, 8, 9), float64] */, dtype="uint64") /* ty=Tensor[(8, 8, 9), uint64] */;
    %689 = shape_of(%687, dtype="int32") /* ty=Tensor[(3), int32] */;
    %690 = cast(%687, dtype="uint64") /* ty=Tensor[(8, 8, 9), uint64] */;
    %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    add(%690, %691) /* ty=Tensor[(8, 8, 9), uint64] */
  };
  %692() /* ty=Tensor[(8, 8, 9), uint64] */
}

def @func_954() -> Tensor[(8, 8, 9), float64] {
  %693 = cast(meta[relay.Constant][51] /* ty=Tensor[(8, 8, 9), float64] */, dtype="float64") /* ty=Tensor[(8, 8, 9), float64] */;
  rsqrt(%693) /* ty=Tensor[(8, 8, 9), float64] */
}

def @func_1259(%var_1258: uint16) -> (Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32], Tensor[(312), float32], Tensor[(392), float64], Tensor[(143, 15), uint8], Tensor[(1, 90), float64], uint16, Tensor[(392), uint16]) {
  %708 = fn (%var_1254: uint16) -> (Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32], Tensor[(312), float32], Tensor[(392), float64], Tensor[(143, 15), uint8], Tensor[(1, 90), float64], uint16, Tensor[(392), uint16]) {
    %694 = cast(meta[relay.Constant][52] /* ty=Tensor[(312), float32] */, dtype="float32") /* ty=Tensor[(312), float32] */;
    %695 = reshape(%694, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), float32] */;
    %696 = cast(meta[relay.Constant][53] /* ty=Tensor[(143, 15), uint8] */, dtype="uint8") /* ty=Tensor[(143, 15), uint8] */;
    %697 = cast(meta[relay.Constant][54] /* ty=Tensor[(1, 90), float64] */, dtype="float64") /* ty=Tensor[(1, 90), float64] */;
    %698 = cast(%var_1254, dtype="uint16") /* ty=uint16 */;
    %699 = cast(meta[relay.Constant][55] /* ty=Tensor[(392), uint16] */, dtype="uint16") /* ty=Tensor[(392), uint16] */;
    %700 = reshape(%696, newshape=[13, 15, 11]) /* ty=Tensor[(13, 15, 11), uint8] */;
    %701 = reshape(%697, newshape=[90]) /* ty=Tensor[(90), float64] */;
    %702 = reshape(%698, newshape=[]) /* ty=uint16 */;
    %703 = reshape(%699, newshape=[196, 2]) /* ty=Tensor[(196, 2), uint16] */;
    %704 = @func_795(%700, %701, %702, %703) /* ty=(Tensor[(13, 15, 11), uint8], Tensor[(90), float64], Tensor[(196, 2), uint16], Tensor[(392), float64], Tensor[(13, 15, 11), int16]) */;
    %705 = @func_1202() /* ty=Tensor[(8, 8, 9), float64] */;
    %706 = @func_963(%695) /* ty=Tensor[(13, 8, 3), float32] */;
    %707 = %704.3;
    (%705, %706, meta[relay.Constant][52] /* ty=Tensor[(312), float32] */, %707, meta[relay.Constant][53] /* ty=Tensor[(143, 15), uint8] */, meta[relay.Constant][54] /* ty=Tensor[(1, 90), float64] */, %var_1254, meta[relay.Constant][55] /* ty=Tensor[(392), uint16] */)
  };
  %708(%var_1258) /* ty=(Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32], Tensor[(312), float32], Tensor[(392), float64], Tensor[(143, 15), uint8], Tensor[(1, 90), float64], uint16, Tensor[(392), uint16]) */
}

def @func_4055() -> (Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) {
  %712 = fn () -> (Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) {
    %709 = @func_3631() /* ty=(Tensor[(8, 8, 9), float64],) */;
    %710 = @func_1202() /* ty=Tensor[(8, 8, 9), float64] */;
    %711 = %709.0;
    (%710, %711)
  };
  %712() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) */
}

def @func_5055() -> Tensor[(13, 8, 3), float32] {
  %714 = fn () -> Tensor[(13, 8, 3), float32] {
    %713 = @func_2382() /* ty=(Tensor[(13, 8, 3), float32],) */;
    %713.0
  };
  %714() /* ty=Tensor[(13, 8, 3), float32] */
}

def @func_183(%var_150: Tensor[(16, 14, 8), float64], %var_157: Tensor[(16, 14, 8), float64], %var_172: uint16) -> (Tensor[(16, 14, 8), float32], Tensor[(14, 7, 4), bool], uint16, Tensor[(392), uint16], Tensor[(14, 7, 4), bool], Tensor[(14, 7, 4), bool]) {
  %715 = cast(%var_150, dtype="float64") /* ty=Tensor[(16, 14, 8), float64] */;
  %716 = tan(%715) /* ty=Tensor[(16, 14, 8), float64] */;
  %717 = cast(%var_157, dtype="bool") /* ty=Tensor[(16, 14, 8), bool] */;
  %718 = shape_of(%716, dtype="int32") /* ty=Tensor[(3), int32] */;
  %719 = cast(%716, dtype="bool") /* ty=Tensor[(16, 14, 8), bool] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %721 = less(%719, %720) /* ty=Tensor[(16, 14, 8), bool] */;
  %722 = cast(%721, dtype="float32") /* ty=Tensor[(16, 14, 8), float32] */;
  %723 = cast(%var_172, dtype="uint16") /* ty=uint16 */;
  %724 = cast(meta[relay.Constant][56] /* ty=Tensor[(392), uint16] */, dtype="uint16") /* ty=Tensor[(392), uint16] */;
  %725 = reshape(%723, newshape=[]) /* ty=uint16 */;
  %726 = reshape(%724, newshape=[14, 7, 4]) /* ty=Tensor[(14, 7, 4), uint16] */;
  %727 = @func_104(%725, %726) /* ty=(Tensor[(14, 7, 4), bool],) */;
  %728 = cast(%var_172, dtype="uint16") /* ty=uint16 */;
  %729 = %727.0;
  %730 = cast(%729, dtype="uint16") /* ty=Tensor[(14, 7, 4), uint16] */;
  %731 = reshape(%728, newshape=[]) /* ty=uint16 */;
  %732 = reshape(%730, newshape=[14, 7, 4]) /* ty=Tensor[(14, 7, 4), uint16] */;
  %733 = @func_104(%731, %732) /* ty=(Tensor[(14, 7, 4), bool],) */;
  %734 = cast(%var_172, dtype="uint16") /* ty=uint16 */;
  %735 = %733.0;
  %736 = cast(%735, dtype="uint16") /* ty=Tensor[(14, 7, 4), uint16] */;
  %737 = reshape(%734, newshape=[]) /* ty=uint16 */;
  %738 = reshape(%736, newshape=[14, 7, 4]) /* ty=Tensor[(14, 7, 4), uint16] */;
  %739 = @func_104(%737, %738) /* ty=(Tensor[(14, 7, 4), bool],) */;
  %740 = rsqrt(%722) /* ty=Tensor[(16, 14, 8), float32] */;
  %741 = %739.0;
  (%740, %729, %var_172, meta[relay.Constant][56] /* ty=Tensor[(392), uint16] */, %735, %741)
}

def @func_4998() -> (Tensor[(8, 8, 9), float64],) {
  %742 = @func_4765() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %743 = %742.0;
  (%743,)
}

def @func_1706(%var_1703: uint16, %var_1704: Tensor[(392), uint16], %var_1705: Tensor[(8, 8, 9), bool]) -> (Tensor[(14, 7, 4), bool], Tensor[(90), float64], uint16, Tensor[(392), uint16], Tensor[(8, 8, 9), uint32], Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), int32]) {
  %778 = fn (%var_1640: uint16, %var_1641: Tensor[(392), uint16], %var_1661: Tensor[(8, 8, 9), bool]) -> (Tensor[(14, 7, 4), bool], Tensor[(90), float64], uint16, Tensor[(392), uint16], Tensor[(8, 8, 9), uint32], Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), int32]) {
    %744 = cast(meta[relay.Constant][57] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
    %745 = cast(%var_1640, dtype="uint16") /* ty=uint16 */;
    %746 = cast(%var_1641, dtype="uint16") /* ty=Tensor[(392), uint16] */;
    %747 = reshape(%744, newshape=[10, 1, 9]) /* ty=Tensor[(10, 1, 9), float64] */;
    %748 = reshape(%745, newshape=[]) /* ty=uint16 */;
    %749 = reshape(%746, newshape=[392]) /* ty=Tensor[(392), uint16] */;
    %750 = @func_285(%747, %748, %749) /* ty=(Tensor[(10, 1, 9), float64], Tensor[(1792), float64], uint16, Tensor[(14, 7, 4), bool], Tensor[(14, 7, 4), bool], Tensor[(392), float64]) */;
    %751 = @func_1156() /* ty=Tensor[(8, 8, 9), float64] */;
    %752 = cast(%751, dtype="float32") /* ty=Tensor[(8, 8, 9), float32] */;
    %753 = erf(%752) /* ty=Tensor[(8, 8, 9), float32] */;
    %754 = cast(%751, dtype="bool") /* ty=Tensor[(8, 8, 9), bool] */;
    %755 = shape_of(%753, dtype="int32") /* ty=Tensor[(3), int32] */;
    %756 = cast(%753, dtype="bool") /* ty=Tensor[(8, 8, 9), bool] */;
    %757 = dyn.reshape(%754, %755, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %758 = less(%756, %757) /* ty=Tensor[(8, 8, 9), bool] */;
    %759 = cast(meta[relay.Constant][58] /* ty=Tensor[(8, 8, 9), bool] */, dtype="uint32") /* ty=Tensor[(8, 8, 9), uint32] */;
    %760 = shape_of(%758, dtype="int32") /* ty=Tensor[(3), int32] */;
    %761 = cast(%758, dtype="uint32") /* ty=Tensor[(8, 8, 9), uint32] */;
    %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %763 = cast(%var_1661, dtype="float64") /* ty=Tensor[(8, 8, 9), float64] */;
    %764 = log2(%763) /* ty=Tensor[(8, 8, 9), float64] */;
    %765 = cast(%var_1661, dtype="uint16") /* ty=Tensor[(8, 8, 9), uint16] */;
    %766 = shape_of(%758, dtype="int32") /* ty=Tensor[(3), int32] */;
    %767 = cast(%758, dtype="uint16") /* ty=Tensor[(8, 8, 9), uint16] */;
    %768 = dyn.reshape(%765, %766, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %769 = minimum(%767, %768) /* ty=Tensor[(8, 8, 9), uint16] */;
    %770 = cast(%769, dtype="int32") /* ty=Tensor[(8, 8, 9), int32] */;
    %771 = shape_of(%764, dtype="int32") /* ty=Tensor[(3), int32] */;
    %772 = cast(%764, dtype="int32") /* ty=Tensor[(8, 8, 9), int32] */;
    %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %774 = %750.3;
    %775 = bitwise_and(%761, %762) /* ty=Tensor[(8, 8, 9), uint32] */;
    %776 = @func_954() /* ty=Tensor[(8, 8, 9), float64] */;
    %777 = bitwise_or(%772, %773) /* ty=Tensor[(8, 8, 9), int32] */;
    (%774, meta[relay.Constant][57] /* ty=Tensor[(90), float64] */, %var_1640, %var_1641, %775, %776, %777)
  };
  %778(%var_1703, %var_1704, %var_1705) /* ty=(Tensor[(14, 7, 4), bool], Tensor[(90), float64], uint16, Tensor[(392), uint16], Tensor[(8, 8, 9), uint32], Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), int32]) */
}

def @func_2268() -> (Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(16, 10, 6), int8]) {
  @func_2266() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(16, 10, 6), int8]) */
}

def @func_6090() -> (Tensor[(8, 8, 9), float64],) {
  @func_6088() /* ty=(Tensor[(8, 8, 9), float64],) */
}

def @func_4399() -> (Tensor[(8, 8, 9), bool], Tensor[(960), int8], Tensor[(8, 8, 9), float64]) {
  %790 = fn () -> (Tensor[(8, 8, 9), bool], Tensor[(960), int8], Tensor[(8, 8, 9), float64]) {
    %779 = @func_1600() /* ty=(Tensor[(8, 8, 9), float64],) */;
    %780 = %779.0;
    %781 = @func_3311() /* ty=Tensor[(8, 8, 9), float64] */;
    %782 = cast(%781, dtype="bool") /* ty=Tensor[(8, 8, 9), bool] */;
    %783 = shape_of(%780, dtype="int32") /* ty=Tensor[(3), int32] */;
    %784 = cast(%780, dtype="bool") /* ty=Tensor[(8, 8, 9), bool] */;
    %785 = dyn.reshape(%782, %783, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %786 = @func_3209() /* ty=(Tensor[(13, 8, 3), bool], Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64], Tensor[(1792), float64], Tensor[(960), int8]) */;
    %787 = not_equal(%784, %785) /* ty=Tensor[(8, 8, 9), bool] */;
    %788 = %786.4;
    %789 = @func_1513() /* ty=Tensor[(8, 8, 9), float64] */;
    (%787, %788, %789)
  };
  %790() /* ty=(Tensor[(8, 8, 9), bool], Tensor[(960), int8], Tensor[(8, 8, 9), float64]) */
}

def @func_285(%var_216: Tensor[(10, 1, 9), float64], %var_222: uint16, %var_245: Tensor[(392), uint16]) -> (Tensor[(10, 1, 9), float64], Tensor[(1792), float64], uint16, Tensor[(14, 7, 4), bool], Tensor[(14, 7, 4), bool], Tensor[(392), float64]) {
  %791 = cast(%var_216, dtype="float64") /* ty=Tensor[(10, 1, 9), float64] */;
  %792 = cast(meta[relay.Constant][59] /* ty=Tensor[(1792), float64] */, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %793 = cast(meta[relay.Constant][59] /* ty=Tensor[(1792), float64] */, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %794 = cast(%var_222, dtype="uint16") /* ty=uint16 */;
  %795 = reshape(%792, newshape=[16, 14, 8]) /* ty=Tensor[(16, 14, 8), float64] */;
  %796 = reshape(%793, newshape=[16, 14, 8]) /* ty=Tensor[(16, 14, 8), float64] */;
  %797 = reshape(%794, newshape=[]) /* ty=uint16 */;
  %798 = @func_183(%795, %796, %797) /* ty=(Tensor[(16, 14, 8), float32], Tensor[(14, 7, 4), bool], uint16, Tensor[(392), uint16], Tensor[(14, 7, 4), bool], Tensor[(14, 7, 4), bool]) */;
  %799 = %798.2;
  %800 = cast(%799, dtype="uint16") /* ty=uint16 */;
  %801 = cast(%var_245, dtype="uint16") /* ty=Tensor[(392), uint16] */;
  %802 = reshape(%800, newshape=[]) /* ty=uint16 */;
  %803 = reshape(%801, newshape=[14, 7, 4]) /* ty=Tensor[(14, 7, 4), uint16] */;
  %804 = @func_104(%802, %803) /* ty=(Tensor[(14, 7, 4), bool],) */;
  %805 = cast(meta[relay.Constant][59] /* ty=Tensor[(1792), float64] */, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %806 = cast(meta[relay.Constant][59] /* ty=Tensor[(1792), float64] */, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %807 = cast(%var_222, dtype="uint16") /* ty=uint16 */;
  %808 = reshape(%805, newshape=[16, 14, 8]) /* ty=Tensor[(16, 14, 8), float64] */;
  %809 = reshape(%806, newshape=[16, 14, 8]) /* ty=Tensor[(16, 14, 8), float64] */;
  %810 = reshape(%807, newshape=[]) /* ty=uint16 */;
  %811 = @func_183(%808, %809, %810) /* ty=(Tensor[(16, 14, 8), float32], Tensor[(14, 7, 4), bool], uint16, Tensor[(392), uint16], Tensor[(14, 7, 4), bool], Tensor[(14, 7, 4), bool]) */;
  %812 = cast(%var_245, dtype="float64") /* ty=Tensor[(392), float64] */;
  %813 = cast(%799, dtype="float64") /* ty=float64 */;
  %814 = acos(%791) /* ty=Tensor[(10, 1, 9), float64] */;
  %815 = %804.0;
  %816 = %811.4;
  %817 = divide(%812, %813) /* ty=Tensor[(392), float64] */;
  (%814, meta[relay.Constant][59] /* ty=Tensor[(1792), float64] */, %var_222, %815, %816, %817)
}

def @func_6684(%var_6680: Tensor[(4, 8, 13), float32], %var_6681: uint16, %var_6682: Tensor[(392), uint16], %var_6683: Tensor[(576), bool]) -> (Tensor[(4, 8, 13), float32], Tensor[(90), float64], uint16, Tensor[(392), uint16], Tensor[(576), bool]) {
  @func_6678(%var_6680, %var_6681, %var_6682, %var_6683) /* ty=(Tensor[(4, 8, 13), float32], Tensor[(90), float64], uint16, Tensor[(392), uint16], Tensor[(576), bool]) */
}

def @func_3692(%var_3666: Tensor[(10, 4, 6), float64]) -> (Tensor[(10, 4, 6), float64], Tensor[(10, 4, 6), float64]) {
  %818 = cast(meta[relay.Constant][60] /* ty=Tensor[(10, 4, 6), float64] */, dtype="float64") /* ty=Tensor[(10, 4, 6), float64] */;
  %819 = shape_of(%var_3666, dtype="int32") /* ty=Tensor[(3), int32] */;
  %820 = cast(%var_3666, dtype="float64") /* ty=Tensor[(10, 4, 6), float64] */;
  %821 = dyn.reshape(%818, %819, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %822 = cast(meta[relay.Constant][60] /* ty=Tensor[(10, 4, 6), float64] */, dtype="float64") /* ty=Tensor[(10, 4, 6), float64] */;
  %823 = floor_divide(%820, %821) /* ty=Tensor[(10, 4, 6), float64] */;
  %824 = log2(%822) /* ty=Tensor[(10, 4, 6), float64] */;
  (%823, %824)
}

def @func_6504() -> (Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32]) {
  @func_6502() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32]) */
}

def @func_7287() -> (Tensor[(3, 10, 15), bool],) {
  %825 = cast(meta[relay.Constant][62] /* ty=Tensor[(3, 10, 15), float32] */, dtype="bool") /* ty=Tensor[(3, 10, 15), bool] */;
  %826 = shape_of(meta[relay.Constant][61] /* ty=Tensor[(3, 10, 15), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %827 = cast(meta[relay.Constant][61] /* ty=Tensor[(3, 10, 15), float32] */, dtype="bool") /* ty=Tensor[(3, 10, 15), bool] */;
  %828 = dyn.reshape(%825, %826, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %829 = equal(%827, %828) /* ty=Tensor[(3, 10, 15), bool] */;
  (%829,)
}

def @func_6124(%var_6122: Tensor[(10, 13, 1), float32], %var_6123: Tensor[(10, 13, 11), float32]) -> Tensor[(10, 13, 11), float32] {
  @func_6120(%var_6122, %var_6123) /* ty=Tensor[(10, 13, 11), float32] */
}

def @func_7008() -> (Tensor[(8, 8, 9), float32],) {
  %830 = @func_4592() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %831 = %830.0;
  %832 = cast(%831, dtype="float32") /* ty=Tensor[(8, 8, 9), float32] */;
  %833 = sigmoid(%832) /* ty=Tensor[(8, 8, 9), float32] */;
  (%833,)
}

def @func_2629(%var_2627: Tensor[(4, 448), float64], %var_2628: Tensor[(960), int8]) -> (Tensor[(1792), float64], Tensor[(4, 448), float64], Tensor[(1800), float64], Tensor[(14, 7, 4), bool], Tensor[(960), int8], Tensor[(8, 8, 9), float64]) {
  %864 = fn (%var_2574: Tensor[(4, 448), float64], %var_2592: Tensor[(960), int8]) -> (Tensor[(1792), float64], Tensor[(4, 448), float64], Tensor[(1800), float64], Tensor[(14, 7, 4), bool], Tensor[(960), int8], Tensor[(8, 8, 9), float64]) {
    %834 = cast(meta[relay.Constant][63] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
    %835 = cast(meta[relay.Constant][63] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
    %836 = cast(meta[relay.Constant][63] /* ty=Tensor[(1800), float64] */, dtype="float32") /* ty=Tensor[(1800), float32] */;
    %837 = cast(%var_2574, dtype="float64") /* ty=Tensor[(4, 448), float64] */;
    %838 = cast(meta[relay.Constant][64] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %839 = reshape(%834, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), float64] */;
    %840 = reshape(%835, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), float64] */;
    %841 = reshape(%836, newshape=[15, 15, 8]) /* ty=Tensor[(15, 15, 8), float32] */;
    %842 = reshape(%837, newshape=[1792]) /* ty=Tensor[(1792), float64] */;
    %843 = reshape(%838, newshape=[]) /* ty=uint16 */;
    %844 = @func_449(%839, %840, %841, %842, %843) /* ty=(Tensor[(15, 15, 8), float32], Tensor[(14, 7, 4), bool], Tensor[(1792), float64], uint16, Tensor[(14, 7, 4), bool], Tensor[(15, 15, 8), float32]) */;
    %845 = cast(meta[relay.Constant][63] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
    %846 = cast(meta[relay.Constant][64] /* ty=uint16 */, dtype="float64") /* ty=float64 */;
    %847 = cast(%var_2592, dtype="int8") /* ty=Tensor[(960), int8] */;
    %848 = reshape(%847, newshape=[960]) /* ty=Tensor[(960), int8] */;
    %849 = @func_1129(%848) /* ty=(Tensor[(8, 8, 9), float64], Tensor[(14, 7, 4), bool], Tensor[(960), int8]) */;
    %850 = @func_1958() /* ty=Tensor[(8, 8, 9), float64] */;
    %851 = cast(%850, dtype="float64") /* ty=Tensor[(8, 8, 9), float64] */;
    %852 = atan(%851) /* ty=Tensor[(8, 8, 9), float64] */;
    %853 = cast(%852, dtype="float32") /* ty=Tensor[(8, 8, 9), float32] */;
    %854 = cast(meta[relay.Constant][64] /* ty=uint16 */, dtype="float32") /* ty=float32 */;
    %855 = maximum(%853, %854) /* ty=Tensor[(8, 8, 9), float32] */;
    %856 = cast(%852, dtype="float64") /* ty=Tensor[(8, 8, 9), float64] */;
    %857 = shape_of(%855, dtype="int32") /* ty=Tensor[(3), int32] */;
    %858 = cast(%855, dtype="float64") /* ty=Tensor[(8, 8, 9), float64] */;
    %859 = dyn.reshape(%856, %857, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %860 = %844.2;
    %861 = minimum(%845, %846) /* ty=Tensor[(1800), float64] */;
    %862 = %849.1;
    %863 = mod(%858, %859) /* ty=Tensor[(8, 8, 9), float64] */;
    (%860, %var_2574, %861, %862, %var_2592, %863)
  };
  %864(%var_2627, %var_2628) /* ty=(Tensor[(1792), float64], Tensor[(4, 448), float64], Tensor[(1800), float64], Tensor[(14, 7, 4), bool], Tensor[(960), int8], Tensor[(8, 8, 9), float64]) */
}

def @func_5151(%var_5148: Tensor[(16, 5, 5), float32], %var_5149: Tensor[(16, 5, 5), float32], %var_5150: Tensor[(960), int8]) -> (Tensor[(392, 1), uint16], Tensor[(960), int8], Tensor[(16, 5, 5), uint32]) {
  @func_5146(%var_5148, %var_5149, %var_5150) /* ty=(Tensor[(392, 1), uint16], Tensor[(960), int8], Tensor[(16, 5, 5), uint32]) */
}

def @func_1132(%var_1130: Tensor[(960), int8]) -> (Tensor[(8, 8, 9), float64], Tensor[(14, 7, 4), bool], Tensor[(960), int8]) {
  @func_1129(%var_1130) /* ty=(Tensor[(8, 8, 9), float64], Tensor[(14, 7, 4), bool], Tensor[(960), int8]) */
}

def @func_2987() -> (Tensor[(16, 10, 6), int8], Tensor[(13, 8, 3), float32], Tensor[(312), float32]) {
  %870 = fn () -> (Tensor[(16, 10, 6), int8], Tensor[(13, 8, 3), float32], Tensor[(312), float32]) {
    %865 = @func_2266() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(16, 10, 6), int8]) */;
    %866 = cast(meta[relay.Constant][65] /* ty=Tensor[(312), float32] */, dtype="float32") /* ty=Tensor[(312), float32] */;
    %867 = reshape(%866, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), float32] */;
    %868 = %865.2;
    %869 = @func_963(%867) /* ty=Tensor[(13, 8, 3), float32] */;
    (%868, %869, meta[relay.Constant][65] /* ty=Tensor[(312), float32] */)
  };
  %870() /* ty=(Tensor[(16, 10, 6), int8], Tensor[(13, 8, 3), float32], Tensor[(312), float32]) */
}

def @func_1601() -> (Tensor[(8, 8, 9), float64],) {
  %872 = fn () -> (Tensor[(8, 8, 9), float64],) {
    %871 = @func_954() /* ty=Tensor[(8, 8, 9), float64] */;
    (%871,)
  };
  %872() /* ty=(Tensor[(8, 8, 9), float64],) */
}

def @func_5783() -> (Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) {
  %877 = fn () -> (Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) {
    %873 = @func_3631() /* ty=(Tensor[(8, 8, 9), float64],) */;
    %874 = @func_1600() /* ty=(Tensor[(8, 8, 9), float64],) */;
    %875 = %873.0;
    %876 = %874.0;
    (%875, %876)
  };
  %877() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) */
}

def @func_7221() -> (Tensor[(8, 8, 9), float64],) {
  @func_7219() /* ty=(Tensor[(8, 8, 9), float64],) */
}

def @func_3633() -> (Tensor[(8, 8, 9), float64],) {
  @func_3631() /* ty=(Tensor[(8, 8, 9), float64],) */
}

def @func_4435(%var_4434: Tensor[(8, 8, 9), float64]) -> Tensor[(8, 8, 9), bool] {
  %883 = fn (%var_4417: Tensor[(8, 8, 9), float64]) -> Tensor[(8, 8, 9), bool] {
    %878 = @func_2085() /* ty=Tensor[(8, 8, 9), float64] */;
    %879 = cast(%var_4417, dtype="bool") /* ty=Tensor[(8, 8, 9), bool] */;
    %880 = shape_of(%878, dtype="int32") /* ty=Tensor[(3), int32] */;
    %881 = cast(%878, dtype="bool") /* ty=Tensor[(8, 8, 9), bool] */;
    %882 = dyn.reshape(%879, %880, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%881, %882) /* ty=Tensor[(8, 8, 9), bool] */
  };
  %883(%var_4434) /* ty=Tensor[(8, 8, 9), bool] */
}

def @func_5207(%var_5194: Tensor[(5, 7, 9), float64]) -> (Tensor[(5, 7, 9), float64],) {
  %884 = cast(%var_5194, dtype="float64") /* ty=Tensor[(5, 7, 9), float64] */;
  %885 = asinh(%884) /* ty=Tensor[(5, 7, 9), float64] */;
  (%885,)
}

def @func_3238(%var_3221: Tensor[(10, 8, 12), float32]) -> (Tensor[(10, 8, 12), bool],) {
  %886 = cast(%var_3221, dtype="float32") /* ty=Tensor[(10, 8, 12), float32] */;
  %887 = exp(%886) /* ty=Tensor[(10, 8, 12), float32] */;
  %888 = cast(%887, dtype="float64") /* ty=Tensor[(10, 8, 12), float64] */;
  %889 = atanh(%888) /* ty=Tensor[(10, 8, 12), float64] */;
  %890 = cast(%889, dtype="bool") /* ty=Tensor[(10, 8, 12), bool] */;
  %891 = shape_of(%887, dtype="int32") /* ty=Tensor[(3), int32] */;
  %892 = cast(%887, dtype="bool") /* ty=Tensor[(10, 8, 12), bool] */;
  %893 = dyn.reshape(%890, %891, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %894 = greater(%892, %893) /* ty=Tensor[(10, 8, 12), bool] */;
  (%894,)
}

def @func_4888(%var_4849: Tensor[(13, 2), int16]) -> (Tensor[(13, 2), int16], Tensor[(8, 8, 9), float64]) {
  %895 = cast(%var_4849, dtype="int16") /* ty=Tensor[(13, 2), int16] */;
  %896 = shape_of(meta[relay.Constant][66] /* ty=Tensor[(13, 2), int16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %897 = cast(meta[relay.Constant][66] /* ty=Tensor[(13, 2), int16] */, dtype="int16") /* ty=Tensor[(13, 2), int16] */;
  %898 = dyn.reshape(%895, %896, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %899 = @func_4765() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %900 = bitwise_and(%897, %898) /* ty=Tensor[(13, 2), int16] */;
  %901 = %899.0;
  (%900, %901)
}

def @func_1724() -> (Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) {
  @func_1722() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) */
}

def @func_107(%var_105: uint16, %var_106: Tensor[(14, 7, 4), uint16]) -> (Tensor[(14, 7, 4), bool],) {
  %905 = fn (%var_90: uint16, %var_91: Tensor[(14, 7, 4), uint16]) -> (Tensor[(14, 7, 4), bool],) {
    %902 = cast(%var_90, dtype="bool") /* ty=bool */;
    %903 = cast(%var_91, dtype="bool") /* ty=Tensor[(14, 7, 4), bool] */;
    %904 = less_equal(%902, %903) /* ty=Tensor[(14, 7, 4), bool] */;
    (%904,)
  };
  %905(%var_105, %var_106) /* ty=(Tensor[(14, 7, 4), bool],) */
}

def @func_1107(%var_1104: Tensor[(14, 28), uint16], %var_1105: Tensor[(14, 28), float64], %var_1106: Tensor[(90), float64]) -> (Tensor[(8, 8, 9), float64], Tensor[(14, 7, 4), bool], uint16, Tensor[(14, 7, 4), bool], Tensor[(960), int8], Tensor[(1792), float64], Tensor[(14, 28), float64], Tensor[(14, 7, 4), float32], uint16, Tensor[(90), float64], Tensor[(14, 7, 4), bool], Tensor[(14, 28), float64]) {
  @func_1102(%var_1104, %var_1105, %var_1106) /* ty=(Tensor[(8, 8, 9), float64], Tensor[(14, 7, 4), bool], uint16, Tensor[(14, 7, 4), bool], Tensor[(960), int8], Tensor[(1792), float64], Tensor[(14, 28), float64], Tensor[(14, 7, 4), float32], uint16, Tensor[(90), float64], Tensor[(14, 7, 4), bool], Tensor[(14, 28), float64]) */
}

def @func_3164() -> Tensor[(960), int8] {
  %907 = fn () -> Tensor[(960), int8] {
    %906 = @func_2018() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(960), int8], Tensor[(16, 10, 6), int8]) */;
    %906.1
  };
  %907() /* ty=Tensor[(960), int8] */
}

def @func_7302() -> (Tensor[(8, 8, 9), float64],) {
  %908 = @func_2652() /* ty=Tensor[(8, 8, 9), float64] */;
  (%908,)
}

def @func_3953(%var_3952: Tensor[(240), float64]) -> (Tensor[(10, 4, 6), float64], Tensor[(240), float64], Tensor[(312), float64], Tensor[(960), int8]) {
  %919 = fn (%var_3926: Tensor[(240), float64]) -> (Tensor[(10, 4, 6), float64], Tensor[(240), float64], Tensor[(312), float64], Tensor[(960), int8]) {
    %909 = cast(%var_3926, dtype="float64") /* ty=Tensor[(240), float64] */;
    %910 = reshape(%909, newshape=[10, 4, 6]) /* ty=Tensor[(10, 4, 6), float64] */;
    %911 = @func_3692(%910) /* ty=(Tensor[(10, 4, 6), float64], Tensor[(10, 4, 6), float64]) */;
    %912 = @func_2986() /* ty=(Tensor[(16, 10, 6), int8], Tensor[(13, 8, 3), float32], Tensor[(312), float32]) */;
    %913 = %912.2;
    %914 = cast(%913, dtype="float64") /* ty=Tensor[(312), float64] */;
    %915 = @func_2451() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(960), int8], Tensor[(960), int8]) */;
    %916 = %911.0;
    %917 = cosh(%914) /* ty=Tensor[(312), float64] */;
    %918 = %915.1;
    (%916, %var_3926, %917, %918)
  };
  %919(%var_3952) /* ty=(Tensor[(10, 4, 6), float64], Tensor[(240), float64], Tensor[(312), float64], Tensor[(960), int8]) */
}

def @func_1958() -> Tensor[(8, 8, 9), float64] {
  @func_1170() /* ty=Tensor[(8, 8, 9), float64] */
}

def @func_1960() -> Tensor[(8, 8, 9), float64] {
  @func_1958() /* ty=Tensor[(8, 8, 9), float64] */
}

def @func_7190(%var_7188: Tensor[(12, 15, 12), int64], %var_7189: Tensor[(12, 15, 12), int64]) -> (Tensor[(12, 15, 12), int64], Tensor[(12, 15, 12), float32]) {
  %927 = fn (%var_7172: Tensor[(12, 15, 12), int64], %var_7173: Tensor[(12, 15, 12), int64]) -> (Tensor[(12, 15, 12), int64], Tensor[(12, 15, 12), float32]) {
    %920 = cast(%var_7173, dtype="int64") /* ty=Tensor[(12, 15, 12), int64] */;
    %921 = shape_of(%var_7172, dtype="int32") /* ty=Tensor[(3), int32] */;
    %922 = cast(%var_7172, dtype="int64") /* ty=Tensor[(12, 15, 12), int64] */;
    %923 = dyn.reshape(%920, %921, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %924 = cast(%var_7172, dtype="float32") /* ty=Tensor[(12, 15, 12), float32] */;
    %925 = bitwise_xor(%922, %923) /* ty=Tensor[(12, 15, 12), int64] */;
    %926 = atanh(%924) /* ty=Tensor[(12, 15, 12), float32] */;
    (%925, %926)
  };
  %927(%var_7188, %var_7189) /* ty=(Tensor[(12, 15, 12), int64], Tensor[(12, 15, 12), float32]) */
}

def @func_5674(%var_5671: Tensor[(2145), uint8], %var_5672: Tensor[(90), float64], %var_5673: Tensor[(392), uint16]) -> (Tensor[(8, 8, 9), bool], Tensor[(392), float64], Tensor[(2145), uint8], Tensor[(90), float64], uint16, Tensor[(392), uint16]) {
  %945 = fn (%var_5665: Tensor[(2145), uint8], %var_5666: Tensor[(90), float64], %var_5668: Tensor[(392), uint16]) -> (Tensor[(8, 8, 9), bool], Tensor[(392), float64], Tensor[(2145), uint8], Tensor[(90), float64], uint16, Tensor[(392), uint16]) {
    %928 = @func_1600() /* ty=(Tensor[(8, 8, 9), float64],) */;
    %929 = %928.0;
    %930 = cast(meta[relay.Constant][67] /* ty=Tensor[(8, 8, 9), float64] */, dtype="bool") /* ty=Tensor[(8, 8, 9), bool] */;
    %931 = shape_of(%929, dtype="int32") /* ty=Tensor[(3), int32] */;
    %932 = cast(%929, dtype="bool") /* ty=Tensor[(8, 8, 9), bool] */;
    %933 = dyn.reshape(%930, %931, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %934 = cast(%var_5665, dtype="uint8") /* ty=Tensor[(2145), uint8] */;
    %935 = cast(%var_5666, dtype="float64") /* ty=Tensor[(90), float64] */;
    %936 = cast(meta[relay.Constant][68] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %937 = cast(%var_5668, dtype="uint16") /* ty=Tensor[(392), uint16] */;
    %938 = reshape(%934, newshape=[13, 15, 11]) /* ty=Tensor[(13, 15, 11), uint8] */;
    %939 = reshape(%935, newshape=[90]) /* ty=Tensor[(90), float64] */;
    %940 = reshape(%936, newshape=[]) /* ty=uint16 */;
    %941 = reshape(%937, newshape=[196, 2]) /* ty=Tensor[(196, 2), uint16] */;
    %942 = @func_795(%938, %939, %940, %941) /* ty=(Tensor[(13, 15, 11), uint8], Tensor[(90), float64], Tensor[(196, 2), uint16], Tensor[(392), float64], Tensor[(13, 15, 11), int16]) */;
    %943 = less_equal(%932, %933) /* ty=Tensor[(8, 8, 9), bool] */;
    %944 = %942.3;
    (%943, %944, %var_5665, %var_5666, meta[relay.Constant][68] /* ty=uint16 */, %var_5668)
  };
  %945(%var_5671, %var_5672, %var_5673) /* ty=(Tensor[(8, 8, 9), bool], Tensor[(392), float64], Tensor[(2145), uint8], Tensor[(90), float64], uint16, Tensor[(392), uint16]) */
}

def @func_2850(%var_2848: float64, %var_2849: Tensor[(1, 10, 6), float64]) -> Tensor[(1, 10, 6), float64] {
  @func_2846(%var_2848, %var_2849) /* ty=Tensor[(1, 10, 6), float64] */
}

def @func_6180(%var_6171: Tensor[(10, 16, 1), uint16], %var_6172: Tensor[(10, 16, 6), uint16]) -> (Tensor[(10, 16, 6), uint16], Tensor[(960), float32]) {
  %946 = cast(%var_6171, dtype="uint16") /* ty=Tensor[(10, 16, 1), uint16] */;
  %947 = cast(%var_6172, dtype="uint16") /* ty=Tensor[(10, 16, 6), uint16] */;
  %948 = minimum(%946, %947) /* ty=Tensor[(10, 16, 6), uint16] */;
  %949 = @func_4787() /* ty=Tensor[(960), float32] */;
  (%948, %949)
}

def @func_3614() -> (Tensor[(16, 10, 6), int8], Tensor[(960), int8], Tensor[(8, 8, 9), int16], Tensor[(8, 8, 9), float32]) {
  %950 = cast(meta[relay.Constant][69] /* ty=Tensor[(960), int8] */, dtype="int8") /* ty=Tensor[(960), int8] */;
  %951 = reshape(%950, newshape=[16, 10, 6]) /* ty=Tensor[(16, 10, 6), int8] */;
  %952 = @func_476(%951) /* ty=(Tensor[(16, 10, 6), int8], Tensor[(14, 7, 4), bool], Tensor[(392, 1), uint16]) */;
  %953 = @func_1156() /* ty=Tensor[(8, 8, 9), float64] */;
  %954 = cast(%953, dtype="float32") /* ty=Tensor[(8, 8, 9), float32] */;
  %955 = exp(%954) /* ty=Tensor[(8, 8, 9), float32] */;
  %956 = cast(meta[relay.Constant][70] /* ty=Tensor[(8, 8, 9), float32] */, dtype="int16") /* ty=Tensor[(8, 8, 9), int16] */;
  %957 = shape_of(%955, dtype="int32") /* ty=Tensor[(3), int32] */;
  %958 = cast(%955, dtype="int16") /* ty=Tensor[(8, 8, 9), int16] */;
  %959 = dyn.reshape(%956, %957, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %960 = cast(%955, dtype="float32") /* ty=Tensor[(8, 8, 9), float32] */;
  %961 = %952.0;
  %962 = logical_xor(%958, %959) /* ty=Tensor[(8, 8, 9), int16] */;
  %963 = log10(%960) /* ty=Tensor[(8, 8, 9), float32] */;
  (%961, meta[relay.Constant][69] /* ty=Tensor[(960), int8] */, %962, %963)
}

def @func_5086() -> (Tensor[(8, 8, 9), float64],) {
  @func_5084() /* ty=(Tensor[(8, 8, 9), float64],) */
}

def @func_6957(%var_6955: int64, %var_6956: Tensor[(15, 15, 14), int64]) -> (Tensor[(15, 15, 14), int64], Tensor[(13, 8, 3), float32], Tensor[(8, 8, 9), float64], Tensor[(15, 15, 14), uint16]) {
  @func_6953(%var_6955, %var_6956) /* ty=(Tensor[(15, 15, 14), int64], Tensor[(13, 8, 3), float32], Tensor[(8, 8, 9), float64], Tensor[(15, 15, 14), uint16]) */
}

def @func_4891(%var_4889: Tensor[(13, 2), int16]) -> (Tensor[(13, 2), int16], Tensor[(8, 8, 9), float64]) {
  @func_4888(%var_4889) /* ty=(Tensor[(13, 2), int16], Tensor[(8, 8, 9), float64]) */
}

def @func_7072() -> (Tensor[(960), int8], Tensor[(8, 8, 9), float64]) {
  @func_7070() /* ty=(Tensor[(960), int8], Tensor[(8, 8, 9), float64]) */
}

def @func_1203() -> Tensor[(8, 8, 9), float64] {
  %964 = fn () -> Tensor[(8, 8, 9), float64] {
    @func_954() /* ty=Tensor[(8, 8, 9), float64] */
  };
  %964() /* ty=Tensor[(8, 8, 9), float64] */
}

def @func_6167() -> (Tensor[(8, 8, 9), float64], Tensor[(11, 12, 5), float64], Tensor[(11, 12, 5), float64]) {
  @func_6165() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(11, 12, 5), float64], Tensor[(11, 12, 5), float64]) */
}

def @func_4788() -> Tensor[(960), float32] {
  %966 = fn () -> Tensor[(960), float32] {
    %965 = @func_3815() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(10, 8, 12), bool], Tensor[(960), float32], Tensor[(8, 8, 9), float64]) */;
    %965.2
  };
  %966() /* ty=Tensor[(960), float32] */
}

def @func_7219() -> (Tensor[(8, 8, 9), float64],) {
  %967 = @func_6502() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(13, 8, 3), float32]) */;
  %968 = %967.0;
  (%968,)
}

def @func_6386() -> Tensor[(8, 8, 9), float64] {
  %969 = @func_6069() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) */;
  %969.1
}

def @func_7404() -> (Tensor[(960), int8], Tensor[(8, 8, 9), float64]) {
  @func_7402() /* ty=(Tensor[(960), int8], Tensor[(8, 8, 9), float64]) */
}

def @func_1751() -> (Tensor[(8, 8, 9), float64],) {
  %970 = @func_1170() /* ty=Tensor[(8, 8, 9), float64] */;
  (%970,)
}

def @func_6678(%var_6662: Tensor[(4, 8, 13), float32], %var_6673: uint16, %var_6674: Tensor[(392), uint16], %var_6675: Tensor[(576), bool]) -> (Tensor[(4, 8, 13), float32], Tensor[(90), float64], uint16, Tensor[(392), uint16], Tensor[(576), bool]) {
  %971 = cast(%var_6662, dtype="float32") /* ty=Tensor[(4, 8, 13), float32] */;
  %972 = cast(%var_6673, dtype="uint16") /* ty=uint16 */;
  %973 = cast(%var_6674, dtype="uint16") /* ty=Tensor[(392), uint16] */;
  %974 = cast(%var_6675, dtype="bool") /* ty=Tensor[(576), bool] */;
  %975 = reshape(%972, newshape=[]) /* ty=uint16 */;
  %976 = reshape(%973, newshape=[392]) /* ty=Tensor[(392), uint16] */;
  %977 = reshape(%974, newshape=[8, 8, 9]) /* ty=Tensor[(8, 8, 9), bool] */;
  %978 = @func_1702(%975, %976, %977) /* ty=(Tensor[(14, 7, 4), bool], Tensor[(90), float64], uint16, Tensor[(392), uint16], Tensor[(8, 8, 9), uint32], Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), int32]) */;
  %979 = acosh(%971) /* ty=Tensor[(4, 8, 13), float32] */;
  %980 = %978.1;
  (%979, %980, %var_6673, %var_6674, %var_6675)
}

def @func_6462() -> (Tensor[(8, 8, 9), float64],) {
  %981 = @func_1202() /* ty=Tensor[(8, 8, 9), float64] */;
  (%981,)
}

def @func_7442(%var_7440: uint32) -> (Tensor[(13, 14, 9), float32], Tensor[(8, 8, 9), float64]) {
  @func_7439(%var_7440) /* ty=(Tensor[(13, 14, 9), float32], Tensor[(8, 8, 9), float64]) */
}

def @func_290(%var_287: Tensor[(10, 1, 9), float64], %var_288: uint16, %var_289: Tensor[(392), uint16]) -> (Tensor[(10, 1, 9), float64], Tensor[(1792), float64], uint16, Tensor[(14, 7, 4), bool], Tensor[(14, 7, 4), bool], Tensor[(392), float64]) {
  @func_285(%var_287, %var_288, %var_289) /* ty=(Tensor[(10, 1, 9), float64], Tensor[(1792), float64], uint16, Tensor[(14, 7, 4), bool], Tensor[(14, 7, 4), bool], Tensor[(392), float64]) */
}

def @func_4470() -> (Tensor[(8, 8, 9), float64],) {
  @func_4468() /* ty=(Tensor[(8, 8, 9), float64],) */
}

def @func_4006() -> (Tensor[(2145, 1), uint8], Tensor[(8, 8, 9), float64]) {
  @func_4004() /* ty=(Tensor[(2145, 1), uint8], Tensor[(8, 8, 9), float64]) */
}

def @func_6088() -> (Tensor[(8, 8, 9), float64],) {
  %982 = @func_4238() /* ty=(Tensor[(8, 8, 9), float64],) */;
  %983 = %982.0;
  (%983,)
}

def @func_5386() -> Tensor[(8, 8, 9), float64] {
  %985 = fn () -> Tensor[(8, 8, 9), float64] {
    %984 = @func_4238() /* ty=(Tensor[(8, 8, 9), float64],) */;
    %984.0
  };
  %985() /* ty=Tensor[(8, 8, 9), float64] */
}

def @func_2087() -> Tensor[(8, 8, 9), float64] {
  @func_2085() /* ty=Tensor[(8, 8, 9), float64] */
}

def @func_5976() -> (Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) {
  %988 = fn () -> (Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) {
    %986 = @func_1202() /* ty=Tensor[(8, 8, 9), float64] */;
    %987 = @func_5385() /* ty=Tensor[(8, 8, 9), float64] */;
    (%986, %987)
  };
  %988() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) */
}

def @func_7010() -> (Tensor[(8, 8, 9), float32],) {
  @func_7008() /* ty=(Tensor[(8, 8, 9), float32],) */
}

def @func_6388() -> Tensor[(8, 8, 9), float64] {
  @func_6386() /* ty=Tensor[(8, 8, 9), float64] */
}

def @func_5698() -> Tensor[(8, 8, 9), float64] {
  %989 = fn () -> Tensor[(8, 8, 9), float64] {
    @func_5385() /* ty=Tensor[(8, 8, 9), float64] */
  };
  %989() /* ty=Tensor[(8, 8, 9), float64] */
}

def @func_2846(%var_2841: float64, %var_2842: Tensor[(1, 10, 6), float64]) -> Tensor[(1, 10, 6), float64] {
  %990 = cast(%var_2841, dtype="float64") /* ty=float64 */;
  %991 = cast(%var_2842, dtype="float64") /* ty=Tensor[(1, 10, 6), float64] */;
  power(%990, %991) /* ty=Tensor[(1, 10, 6), float64] */
}

def @func_3816() -> (Tensor[(8, 8, 9), float64], Tensor[(10, 8, 12), bool], Tensor[(960), float32], Tensor[(8, 8, 9), float64]) {
  %1000 = fn () -> (Tensor[(8, 8, 9), float64], Tensor[(10, 8, 12), bool], Tensor[(960), float32], Tensor[(8, 8, 9), float64]) {
    %992 = @func_1722() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) */;
    %993 = cast(meta[relay.Constant][71] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
    %994 = reshape(%993, newshape=[10, 8, 12]) /* ty=Tensor[(10, 8, 12), float32] */;
    %995 = @func_3238(%994) /* ty=(Tensor[(10, 8, 12), bool],) */;
    %996 = @func_1722() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) */;
    %997 = %992.0;
    %998 = %995.0;
    %999 = %996.0;
    (%997, %998, meta[relay.Constant][71] /* ty=Tensor[(960), float32] */, %999)
  };
  %1000() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(10, 8, 12), bool], Tensor[(960), float32], Tensor[(8, 8, 9), float64]) */
}

def @func_2395() -> (Tensor[(8, 8, 9), float64],) {
  %1002 = fn () -> (Tensor[(8, 8, 9), float64],) {
    %1001 = @func_1202() /* ty=Tensor[(8, 8, 9), float64] */;
    (%1001,)
  };
  %1002() /* ty=(Tensor[(8, 8, 9), float64],) */
}

def @func_7338() -> (Tensor[(8, 8, 9), float64],) {
  %1003 = @func_4054() /* ty=(Tensor[(8, 8, 9), float64], Tensor[(8, 8, 9), float64]) */;
  %1004 = %1003.0;
  (%1004,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen60/build/output.py:2682: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen60/build/output.py", line 2687, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(660) tvmgen_default_fused_acos_kernel0(float* __restrict__ T_acos, float* __restrict__ placeholder) {
  T_acos[(((int)threadIdx.x))] = acosf(placeholder[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

