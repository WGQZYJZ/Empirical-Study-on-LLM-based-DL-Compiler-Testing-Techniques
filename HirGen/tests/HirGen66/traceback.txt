==========mod==========
#[version = "0.0.5"]
def @func_2331(%var_2298: Tensor[(15, 16, 15), float32]) -> (Tensor[(15, 16, 15), bool], Tensor[(15, 16, 15), int32]) {
  %0 = cast(%var_2298, dtype="float32") /* ty=Tensor[(15, 16, 15), float32] */;
  %1 = exp(%0) /* ty=Tensor[(15, 16, 15), float32] */;
  %2 = cast(%var_2298, dtype="bool") /* ty=Tensor[(15, 16, 15), bool] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="bool") /* ty=Tensor[(15, 16, 15), bool] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %6 = cast(%var_2298, dtype="int32") /* ty=Tensor[(15, 16, 15), int32] */;
  %7 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %8 = cast(%1, dtype="int32") /* ty=Tensor[(15, 16, 15), int32] */;
  %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %10 = greater_equal(%4, %5) /* ty=Tensor[(15, 16, 15), bool] */;
  %11 = right_shift(%8, %9) /* ty=Tensor[(15, 16, 15), int32] */;
  (%10, %11)
}

def @func_3015(%var_2996: Tensor[(3120), uint8]) -> (Tensor[(13, 15, 5), bool], Tensor[(572), uint32], Tensor[(10, 3, 14), uint64], Tensor[(11, 52), float32], Tensor[(12, 11, 7), bool], Tensor[(3120), uint8], Tensor[(936), float32]) {
  %12 = cast(meta[relay.Constant][0] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %13 = reshape(%12, newshape=[]) /* ty=int8 */;
  %14 = @func_929(%13) /* ty=(Tensor[(13, 15, 5), bool], Tensor[(13, 15, 5), float32]) */;
  %15 = cast(meta[relay.Constant][1] /* ty=Tensor[(11, 52), int8] */, dtype="int8") /* ty=Tensor[(11, 52), int8] */;
  %16 = reshape(%15, newshape=[572]) /* ty=Tensor[(572), int8] */;
  %17 = @func_2891(%16) /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(924), float32], Tensor[(572), uint32]) */;
  %18 = @func_2681() /* ty=Tensor[(10, 3, 14), uint16] */;
  %19 = cast(%18, dtype="float64") /* ty=Tensor[(10, 3, 14), float64] */;
  %20 = rsqrt(%19) /* ty=Tensor[(10, 3, 14), float64] */;
  %21 = cast(%20, dtype="uint64") /* ty=Tensor[(10, 3, 14), uint64] */;
  %22 = cast(meta[relay.Constant][0] /* ty=int8 */, dtype="uint64") /* ty=uint64 */;
  %23 = cast(meta[relay.Constant][1] /* ty=Tensor[(11, 52), int8] */, dtype="float32") /* ty=Tensor[(11, 52), float32] */;
  %24 = cast(%var_2996, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
  %25 = cast(%var_2996, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
  %26 = cast(meta[relay.Constant][2] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
  %27 = reshape(%24, newshape=[15, 16, 13]) /* ty=Tensor[(15, 16, 13), uint8] */;
  %28 = reshape(%25, newshape=[15, 16, 13]) /* ty=Tensor[(15, 16, 13), uint8] */;
  %29 = reshape(%26, newshape=[8, 13, 9]) /* ty=Tensor[(8, 13, 9), float32] */;
  %30 = @func_1649(%27, %28, %29) /* ty=(Tensor[(15, 16, 13), uint8], Tensor[(924), float32], Tensor[(8, 13, 9), float32], Tensor[(8, 13, 9), int8], Tensor[(12, 11, 7), bool], Tensor[(36, 2), float64], Tensor[(8, 1, 9), float32]) */;
  %31 = %14.0;
  %32 = %17.2;
  %33 = maximum(%21, %22) /* ty=Tensor[(10, 3, 14), uint64] */;
  %34 = sigmoid(%23) /* ty=Tensor[(11, 52), float32] */;
  %35 = %30.4;
  (%31, %32, %33, %34, %35, %var_2996, meta[relay.Constant][2] /* ty=Tensor[(936), float32] */)
}

def @func_4661() -> Tensor[(10, 3, 14), uint16] {
  %36 = @func_2932() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %36.0
}

def @func_5293(%var_5263: Tensor[(2, 1, 12), bool], %var_5264: Tensor[(2, 9, 12), bool]) -> (Tensor[(2, 9, 12), bool], Tensor[(10, 3, 14), float32], Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16], Tensor[(2, 9, 12), float32]) {
  %37 = cast(%var_5263, dtype="bool") /* ty=Tensor[(2, 1, 12), bool] */;
  %38 = cast(%var_5264, dtype="bool") /* ty=Tensor[(2, 9, 12), bool] */;
  %39 = @func_4250() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %40 = @func_4102() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %41 = cast(%var_5264, dtype="float32") /* ty=Tensor[(2, 9, 12), float32] */;
  %42 = logical_or(%37, %38) /* ty=Tensor[(2, 9, 12), bool] */;
  %43 = @func_4575() /* ty=Tensor[(10, 3, 14), float32] */;
  %44 = %39.0;
  %45 = %40.0;
  %46 = asin(%41) /* ty=Tensor[(2, 9, 12), float32] */;
  (%42, %43, %44, %45, %46)
}

def @func_2932() -> (Tensor[(10, 3, 14), uint16],) {
  %47 = @func_2681() /* ty=Tensor[(10, 3, 14), uint16] */;
  (%47,)
}

def @func_6587() -> Tensor[(10, 3, 14), float32] {
  %48 = @func_6492() /* ty=(Tensor[(10, 3, 14), float32],) */;
  %48.0
}

def @func_5807(%var_5798: Tensor[(3600), float32], %var_5802: Tensor[(3120), uint8]) -> (Tensor[(10, 3, 14), uint16], Tensor[(15, 16, 15), bool], Tensor[(5), bool], Tensor[(750, 1), bool], Tensor[(3600), float32], Tensor[(8, 13, 9), float32], Tensor[(3120), uint8], Tensor[(936), float32]) {
  %49 = @func_3099() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %50 = cast(meta[relay.Constant][3] /* ty=Tensor[(5), bool] */, dtype="bool") /* ty=Tensor[(5), bool] */;
  %51 = cast(meta[relay.Constant][4] /* ty=Tensor[(750, 1), bool] */, dtype="bool") /* ty=Tensor[(750, 1), bool] */;
  %52 = cast(%var_5798, dtype="float32") /* ty=Tensor[(3600), float32] */;
  %53 = cast(meta[relay.Constant][4] /* ty=Tensor[(750, 1), bool] */, dtype="float64") /* ty=Tensor[(750, 1), float64] */;
  %54 = reshape(%50, newshape=[1, 5, 1]) /* ty=Tensor[(1, 5, 1), bool] */;
  %55 = reshape(%51, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), bool] */;
  %56 = reshape(%52, newshape=[3600]) /* ty=Tensor[(3600), float32] */;
  %57 = reshape(%53, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), float64] */;
  %58 = @func_4958(%54, %55, %56, %57) /* ty=(Tensor[(15, 16, 15), bool], Tensor[(3600), float32], Tensor[(12, 11, 7), bool], Tensor[(72, 1), float64], Tensor[(936), float32], Tensor[(8, 1, 9), float32], Tensor[(10, 5, 15), int64], Tensor[(10, 3, 14), uint16], Tensor[(10, 5, 15), bool], Tensor[(10, 3, 14), float32], Tensor[(10, 3, 14), uint16], Tensor[(10, 5, 15), int8], Tensor[(10, 3, 14), uint16]) */;
  %59 = cast(%var_5802, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
  %60 = cast(%var_5802, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
  %61 = cast(meta[relay.Constant][5] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
  %62 = reshape(%59, newshape=[15, 16, 13]) /* ty=Tensor[(15, 16, 13), uint8] */;
  %63 = reshape(%60, newshape=[15, 16, 13]) /* ty=Tensor[(15, 16, 13), uint8] */;
  %64 = reshape(%61, newshape=[8, 13, 9]) /* ty=Tensor[(8, 13, 9), float32] */;
  %65 = @func_1649(%62, %63, %64) /* ty=(Tensor[(15, 16, 13), uint8], Tensor[(924), float32], Tensor[(8, 13, 9), float32], Tensor[(8, 13, 9), int8], Tensor[(12, 11, 7), bool], Tensor[(36, 2), float64], Tensor[(8, 1, 9), float32]) */;
  %66 = %49.0;
  %67 = %58.0;
  %68 = %65.2;
  (%66, %67, meta[relay.Constant][3] /* ty=Tensor[(5), bool] */, meta[relay.Constant][4] /* ty=Tensor[(750, 1), bool] */, %var_5798, %68, %var_5802, meta[relay.Constant][5] /* ty=Tensor[(936), float32] */)
}

def @main(%var_6927: Tensor[(1080), uint64]) -> (Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16], Tensor[(286, 2), int8], Tensor[(1080), uint8]) {
  %69 = cast(meta[relay.Constant][6] /* ty=Tensor[(1080), uint64] */, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %70 = cast(meta[relay.Constant][6] /* ty=Tensor[(1080), uint64] */, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %71 = reshape(%69, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %72 = reshape(%70, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %73 = @func_6169(%71, %72) /* ty=(Tensor[(8, 15, 9), bool], Tensor[(10, 3, 14), uint16], Tensor[(924), float32], Tensor[(286, 2), int8], Tensor[(8, 15, 9), uint64], Tensor[(10, 3, 14), uint16]) */;
  %74 = cast(%var_6927, dtype="uint8") /* ty=Tensor[(1080), uint8] */;
  %75 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(1080), uint64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %76 = cast(meta[relay.Constant][6] /* ty=Tensor[(1080), uint64] */, dtype="uint8") /* ty=Tensor[(1080), uint8] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %78 = @func_6260() /* ty=Tensor[(10, 3, 14), uint16] */;
  %79 = @func_5685() /* ty=Tensor[(10, 3, 14), uint16] */;
  %80 = %73.3;
  %81 = left_shift(%76, %77) /* ty=Tensor[(1080), uint8] */;
  (%78, %79, %80, %81)
}

def @func_5461() -> Tensor[(10, 3, 14), uint16] {
  @func_4987() /* ty=Tensor[(10, 3, 14), uint16] */
}

def @func_2219(%var_2064: Tensor[(5, 5, 11), float64], %var_2080: Tensor[(924), float32], %var_2139: Tensor[(572), int8]) -> (Tensor[(10, 5, 4), int64], Tensor[(200), int64], Tensor[(924), float32], Tensor[(10, 5, 4), int64], Tensor[(8, 13, 9), float32], Tensor[(3120), uint8], Tensor[(36, 26), float32], Tensor[(924), float32], Tensor[(72), float64], Tensor[(8, 13, 9), float32], Tensor[(924), float32], Tensor[(5, 5, 11), bool], Tensor[(12, 11, 7), bool], Tensor[(8, 13, 9), float32], Tensor[(5, 5, 11), float32], Tensor[(572), float64], Tensor[(572), float64], Tensor[(5, 5, 11), float64], Tensor[(10, 5, 4), int64], Tensor[(12, 11, 7), bool], Tensor[(8, 1, 9), float32], Tensor[(5, 5, 11), bool]) {
  %82 = cast(meta[relay.Constant][7] /* ty=Tensor[(200), int64] */, dtype="int64") /* ty=Tensor[(200), int64] */;
  %83 = cast(%var_2080, dtype="float32") /* ty=Tensor[(924), float32] */;
  %84 = reshape(%82, newshape=[10, 5, 4]) /* ty=Tensor[(10, 5, 4), int64] */;
  %85 = reshape(%83, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %86 = @func_1409(%84, %85) /* ty=(Tensor[(10, 5, 4), int64], Tensor[(12, 11, 7), bool], Tensor[(924), float32]) */;
  %87 = %86.0;
  %88 = cast(%87, dtype="int64") /* ty=Tensor[(10, 5, 4), int64] */;
  %89 = cast(%var_2080, dtype="float32") /* ty=Tensor[(924), float32] */;
  %90 = reshape(%88, newshape=[10, 5, 4]) /* ty=Tensor[(10, 5, 4), int64] */;
  %91 = reshape(%89, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %92 = @func_1409(%90, %91) /* ty=(Tensor[(10, 5, 4), int64], Tensor[(12, 11, 7), bool], Tensor[(924), float32]) */;
  %93 = cast(meta[relay.Constant][8] /* ty=Tensor[(3120), uint8] */, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
  %94 = cast(meta[relay.Constant][8] /* ty=Tensor[(3120), uint8] */, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
  %95 = cast(meta[relay.Constant][9] /* ty=Tensor[(36, 26), float32] */, dtype="float32") /* ty=Tensor[(36, 26), float32] */;
  %96 = reshape(%93, newshape=[15, 16, 13]) /* ty=Tensor[(15, 16, 13), uint8] */;
  %97 = reshape(%94, newshape=[15, 16, 13]) /* ty=Tensor[(15, 16, 13), uint8] */;
  %98 = reshape(%95, newshape=[8, 13, 9]) /* ty=Tensor[(8, 13, 9), float32] */;
  %99 = @func_1649(%96, %97, %98) /* ty=(Tensor[(15, 16, 13), uint8], Tensor[(924), float32], Tensor[(8, 13, 9), float32], Tensor[(8, 13, 9), int8], Tensor[(12, 11, 7), bool], Tensor[(36, 2), float64], Tensor[(8, 1, 9), float32]) */;
  %100 = cast(meta[relay.Constant][10] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %101 = cast(meta[relay.Constant][10] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %102 = cast(meta[relay.Constant][9] /* ty=Tensor[(36, 26), float32] */, dtype="float32") /* ty=Tensor[(36, 26), float32] */;
  %103 = reshape(%100, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), float64] */;
  %104 = reshape(%101, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), float64] */;
  %105 = reshape(%102, newshape=[8, 13, 9]) /* ty=Tensor[(8, 13, 9), float32] */;
  %106 = @func_811(%103, %104, %105) /* ty=(Tensor[(4, 2, 9), float64], Tensor[(12, 11, 7), bool], Tensor[(924), float32], Tensor[(572), float64], Tensor[(8, 13, 9), int32], Tensor[(4, 13, 11), int64]) */;
  %107 = %106.2;
  %108 = cast(%107, dtype="float32") /* ty=Tensor[(924), float32] */;
  %109 = reshape(%108, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %110 = @func_648(%109) /* ty=(Tensor[(12, 11, 7), bool], Tensor[(12, 11, 7), bool], Tensor[(8, 13, 9), float32]) */;
  %111 = cast(meta[relay.Constant][7] /* ty=Tensor[(200), int64] */, dtype="int64") /* ty=Tensor[(200), int64] */;
  %112 = cast(%var_2080, dtype="float32") /* ty=Tensor[(924), float32] */;
  %113 = reshape(%111, newshape=[10, 5, 4]) /* ty=Tensor[(10, 5, 4), int64] */;
  %114 = reshape(%112, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %115 = @func_1409(%113, %114) /* ty=(Tensor[(10, 5, 4), int64], Tensor[(12, 11, 7), bool], Tensor[(924), float32]) */;
  %116 = cast(%var_2064, dtype="float64") /* ty=Tensor[(5, 5, 11), float64] */;
  %117 = acosh(%116) /* ty=Tensor[(5, 5, 11), float64] */;
  %118 = cast(%117, dtype="float64") /* ty=Tensor[(5, 5, 11), float64] */;
  %119 = sigmoid(%118) /* ty=Tensor[(5, 5, 11), float64] */;
  %120 = cast(%var_2064, dtype="bool") /* ty=Tensor[(5, 5, 11), bool] */;
  %121 = shape_of(%119, dtype="int32") /* ty=Tensor[(3), int32] */;
  %122 = cast(%119, dtype="bool") /* ty=Tensor[(5, 5, 11), bool] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %124 = %115.2;
  %125 = cast(%124, dtype="float32") /* ty=Tensor[(924), float32] */;
  %126 = cast(%124, dtype="float32") /* ty=Tensor[(924), float32] */;
  %127 = reshape(%125, newshape=[12, 11, 7]) /* ty=Tensor[(12, 11, 7), float32] */;
  %128 = reshape(%126, newshape=[12, 11, 7]) /* ty=Tensor[(12, 11, 7), float32] */;
  %129 = @func_392(%127, %128) /* ty=(Tensor[(12, 11, 7), bool],) */;
  %130 = cast(%var_2139, dtype="int8") /* ty=Tensor[(572), int8] */;
  %131 = cast(%var_2139, dtype="int8") /* ty=Tensor[(572), int8] */;
  %132 = reshape(%130, newshape=[4, 13, 11]) /* ty=Tensor[(4, 13, 11), int8] */;
  %133 = reshape(%131, newshape=[4, 13, 11]) /* ty=Tensor[(4, 13, 11), int8] */;
  %134 = @func_733(%132, %133) /* ty=(Tensor[(4, 13, 11), int8], Tensor[(4, 13, 11), int64], Tensor[(8, 13, 9), float32], Tensor[(924), float32]) */;
  %135 = cast(%117, dtype="float32") /* ty=Tensor[(5, 5, 11), float32] */;
  %136 = cast(%var_2139, dtype="float64") /* ty=Tensor[(572), float64] */;
  %137 = cast(meta[relay.Constant][10] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %138 = cast(meta[relay.Constant][10] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %139 = %134.2;
  %140 = cast(%139, dtype="float32") /* ty=Tensor[(8, 13, 9), float32] */;
  %141 = reshape(%137, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), float64] */;
  %142 = reshape(%138, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), float64] */;
  %143 = reshape(%140, newshape=[8, 13, 9]) /* ty=Tensor[(8, 13, 9), float32] */;
  %144 = @func_811(%141, %142, %143) /* ty=(Tensor[(4, 2, 9), float64], Tensor[(12, 11, 7), bool], Tensor[(924), float32], Tensor[(572), float64], Tensor[(8, 13, 9), int32], Tensor[(4, 13, 11), int64]) */;
  %145 = cast(%var_2064, dtype="uint32") /* ty=Tensor[(5, 5, 11), uint32] */;
  %146 = shape_of(%119, dtype="int32") /* ty=Tensor[(3), int32] */;
  %147 = cast(%119, dtype="uint32") /* ty=Tensor[(5, 5, 11), uint32] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %149 = logical_xor(%147, %148) /* ty=Tensor[(5, 5, 11), uint32] */;
  %150 = cast(%149, dtype="float32") /* ty=Tensor[(5, 5, 11), float32] */;
  %151 = log(%150) /* ty=Tensor[(5, 5, 11), float32] */;
  %152 = cast(%151, dtype="float64") /* ty=Tensor[(5, 5, 11), float64] */;
  %153 = %92.0;
  %154 = cast(%153, dtype="int64") /* ty=Tensor[(10, 5, 4), int64] */;
  %155 = cast(%107, dtype="float32") /* ty=Tensor[(924), float32] */;
  %156 = reshape(%154, newshape=[10, 5, 4]) /* ty=Tensor[(10, 5, 4), int64] */;
  %157 = reshape(%155, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %158 = @func_1409(%156, %157) /* ty=(Tensor[(10, 5, 4), int64], Tensor[(12, 11, 7), bool], Tensor[(924), float32]) */;
  %159 = cast(%87, dtype="int64") /* ty=Tensor[(10, 5, 4), int64] */;
  %160 = cast(%var_2080, dtype="float32") /* ty=Tensor[(924), float32] */;
  %161 = reshape(%159, newshape=[10, 5, 4]) /* ty=Tensor[(10, 5, 4), int64] */;
  %162 = reshape(%160, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %163 = @func_1409(%161, %162) /* ty=(Tensor[(10, 5, 4), int64], Tensor[(12, 11, 7), bool], Tensor[(924), float32]) */;
  %164 = cast(meta[relay.Constant][10] /* ty=Tensor[(72), float64] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %165 = reshape(%164, newshape=[8, 1, 9]) /* ty=Tensor[(8, 1, 9), float32] */;
  %166 = cast(%119, dtype="bool") /* ty=Tensor[(5, 5, 11), bool] */;
  %167 = shape_of(%151, dtype="int32") /* ty=Tensor[(3), int32] */;
  %168 = cast(%151, dtype="bool") /* ty=Tensor[(5, 5, 11), bool] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %170 = %99.2;
  %171 = %110.2;
  %172 = not_equal(%122, %123) /* ty=Tensor[(5, 5, 11), bool] */;
  %173 = %129.0;
  %174 = cos(%135) /* ty=Tensor[(5, 5, 11), float32] */;
  %175 = asin(%136) /* ty=Tensor[(572), float64] */;
  %176 = %144.3;
  %177 = tan(%152) /* ty=Tensor[(5, 5, 11), float64] */;
  %178 = %158.0;
  %179 = %163.1;
  %180 = @func_1124(%165) /* ty=Tensor[(8, 1, 9), float32] */;
  %181 = greater_equal(%168, %169) /* ty=Tensor[(5, 5, 11), bool] */;
  (%87, meta[relay.Constant][7] /* ty=Tensor[(200), int64] */, %var_2080, %153, %170, meta[relay.Constant][8] /* ty=Tensor[(3120), uint8] */, meta[relay.Constant][9] /* ty=Tensor[(36, 26), float32] */, %107, meta[relay.Constant][10] /* ty=Tensor[(72), float64] */, %171, %124, %172, %173, %139, %174, %175, %176, %177, %178, %179, %180, %181)
}

def @func_5685() -> Tensor[(10, 3, 14), uint16] {
  %182 = @func_3099() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %182.0
}

def @func_1649(%var_1561: Tensor[(15, 16, 13), uint8], %var_1562: Tensor[(15, 16, 13), uint8], %var_1605: Tensor[(8, 13, 9), float32]) -> (Tensor[(15, 16, 13), uint8], Tensor[(924), float32], Tensor[(8, 13, 9), float32], Tensor[(8, 13, 9), int8], Tensor[(12, 11, 7), bool], Tensor[(36, 2), float64], Tensor[(8, 1, 9), float32]) {
  %183 = cast(%var_1562, dtype="uint8") /* ty=Tensor[(15, 16, 13), uint8] */;
  %184 = shape_of(%var_1561, dtype="int32") /* ty=Tensor[(3), int32] */;
  %185 = cast(%var_1561, dtype="uint8") /* ty=Tensor[(15, 16, 13), uint8] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %187 = cast(meta[relay.Constant][11] /* ty=Tensor[(924), float32] */, dtype="float32") /* ty=Tensor[(924), float32] */;
  %188 = reshape(%187, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %189 = @func_648(%188) /* ty=(Tensor[(12, 11, 7), bool], Tensor[(12, 11, 7), bool], Tensor[(8, 13, 9), float32]) */;
  %190 = %189.2;
  %191 = cast(%var_1605, dtype="float32") /* ty=Tensor[(8, 13, 9), float32] */;
  %192 = shape_of(%190, dtype="int32") /* ty=Tensor[(3), int32] */;
  %193 = cast(%190, dtype="float32") /* ty=Tensor[(8, 13, 9), float32] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %195 = cast(%190, dtype="float64") /* ty=Tensor[(8, 13, 9), float64] */;
  %196 = asin(%195) /* ty=Tensor[(8, 13, 9), float64] */;
  %197 = cast(%196, dtype="float64") /* ty=Tensor[(8, 13, 9), float64] */;
  %198 = atanh(%197) /* ty=Tensor[(8, 13, 9), float64] */;
  %199 = cast(%198, dtype="int8") /* ty=Tensor[(8, 13, 9), int8] */;
  %200 = shape_of(%196, dtype="int32") /* ty=Tensor[(3), int32] */;
  %201 = cast(%196, dtype="int8") /* ty=Tensor[(8, 13, 9), int8] */;
  %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %203 = cast(meta[relay.Constant][12] /* ty=Tensor[(36, 2), float64] */, dtype="float64") /* ty=Tensor[(36, 2), float64] */;
  %204 = cast(meta[relay.Constant][12] /* ty=Tensor[(36, 2), float64] */, dtype="float64") /* ty=Tensor[(36, 2), float64] */;
  %205 = cast(%198, dtype="float32") /* ty=Tensor[(8, 13, 9), float32] */;
  %206 = reshape(%203, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), float64] */;
  %207 = reshape(%204, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), float64] */;
  %208 = reshape(%205, newshape=[8, 13, 9]) /* ty=Tensor[(8, 13, 9), float32] */;
  %209 = @func_811(%206, %207, %208) /* ty=(Tensor[(4, 2, 9), float64], Tensor[(12, 11, 7), bool], Tensor[(924), float32], Tensor[(572), float64], Tensor[(8, 13, 9), int32], Tensor[(4, 13, 11), int64]) */;
  %210 = cast(meta[relay.Constant][12] /* ty=Tensor[(36, 2), float64] */, dtype="float32") /* ty=Tensor[(36, 2), float32] */;
  %211 = reshape(%210, newshape=[8, 1, 9]) /* ty=Tensor[(8, 1, 9), float32] */;
  %212 = logical_xor(%185, %186) /* ty=Tensor[(15, 16, 13), uint8] */;
  %213 = floor_divide(%193, %194) /* ty=Tensor[(8, 13, 9), float32] */;
  %214 = bitwise_or(%201, %202) /* ty=Tensor[(8, 13, 9), int8] */;
  %215 = %209.1;
  %216 = @func_1124(%211) /* ty=Tensor[(8, 1, 9), float32] */;
  (%212, meta[relay.Constant][11] /* ty=Tensor[(924), float32] */, %213, %214, %215, meta[relay.Constant][12] /* ty=Tensor[(36, 2), float64] */, %216)
}

def @func_5854() -> (Tensor[(10, 3, 14), uint16], Tensor[(13, 15, 5), float64], Tensor[(13, 15, 5), float64]) {
  %217 = cast(meta[relay.Constant][13] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %218 = reshape(%217, newshape=[]) /* ty=int8 */;
  %219 = @func_929(%218) /* ty=(Tensor[(13, 15, 5), bool], Tensor[(13, 15, 5), float32]) */;
  %220 = %219.1;
  %221 = cast(meta[relay.Constant][13] /* ty=int8 */, dtype="float64") /* ty=float64 */;
  %222 = cast(%220, dtype="float64") /* ty=Tensor[(13, 15, 5), float64] */;
  %223 = cast(%220, dtype="float64") /* ty=Tensor[(13, 15, 5), float64] */;
  %224 = cast(meta[relay.Constant][13] /* ty=int8 */, dtype="float64") /* ty=float64 */;
  %225 = @func_2853() /* ty=Tensor[(10, 3, 14), uint16] */;
  %226 = minimum(%221, %222) /* ty=Tensor[(13, 15, 5), float64] */;
  %227 = floor_mod(%223, %224) /* ty=Tensor[(13, 15, 5), float64] */;
  (%225, %226, %227)
}

def @func_4281(%var_4267: Tensor[(72), float64]) -> (Tensor[(10, 3, 14), uint16], Tensor[(72), float64], Tensor[(12, 78), float32], Tensor[(12, 11, 7), float64]) {
  %228 = @func_2932() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %229 = cast(%var_4267, dtype="float64") /* ty=Tensor[(72), float64] */;
  %230 = cast(%var_4267, dtype="float64") /* ty=Tensor[(72), float64] */;
  %231 = cast(meta[relay.Constant][14] /* ty=Tensor[(12, 78), float32] */, dtype="float32") /* ty=Tensor[(12, 78), float32] */;
  %232 = reshape(%229, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), float64] */;
  %233 = reshape(%230, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), float64] */;
  %234 = reshape(%231, newshape=[8, 13, 9]) /* ty=Tensor[(8, 13, 9), float32] */;
  %235 = @func_811(%232, %233, %234) /* ty=(Tensor[(4, 2, 9), float64], Tensor[(12, 11, 7), bool], Tensor[(924), float32], Tensor[(572), float64], Tensor[(8, 13, 9), int32], Tensor[(4, 13, 11), int64]) */;
  %236 = %235.1;
  %237 = cast(%236, dtype="float64") /* ty=Tensor[(12, 11, 7), float64] */;
  %238 = %228.0;
  %239 = cos(%237) /* ty=Tensor[(12, 11, 7), float64] */;
  (%238, %var_4267, meta[relay.Constant][14] /* ty=Tensor[(12, 78), float32] */, %239)
}

def @func_5085(%var_5077: Tensor[(936), float32]) -> Tensor[(936), int64] {
  %240 = @func_3816() /* ty=(Tensor[(936), float32],) */;
  %241 = %240.0;
  %242 = cast(%var_5077, dtype="int64") /* ty=Tensor[(936), int64] */;
  %243 = shape_of(%241, dtype="int32") /* ty=Tensor[(1), int32] */;
  %244 = cast(%241, dtype="int64") /* ty=Tensor[(936), int64] */;
  %245 = dyn.reshape(%242, %243, newshape=[]) /* ty=Tensor[(?), int64] */;
  bitwise_xor(%244, %245) /* ty=Tensor[(936), int64] */
}

def @func_811(%var_750: Tensor[(4, 2, 9), float64], %var_751: Tensor[(4, 2, 9), float64], %var_784: Tensor[(8, 13, 9), float32]) -> (Tensor[(4, 2, 9), float64], Tensor[(12, 11, 7), bool], Tensor[(924), float32], Tensor[(572), float64], Tensor[(8, 13, 9), int32], Tensor[(4, 13, 11), int64]) {
  %246 = cast(%var_751, dtype="float64") /* ty=Tensor[(4, 2, 9), float64] */;
  %247 = shape_of(%var_750, dtype="int32") /* ty=Tensor[(3), int32] */;
  %248 = cast(%var_750, dtype="float64") /* ty=Tensor[(4, 2, 9), float64] */;
  %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %250 = cast(meta[relay.Constant][15] /* ty=Tensor[(924), float32] */, dtype="float32") /* ty=Tensor[(924), float32] */;
  %251 = reshape(%250, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %252 = @func_648(%251) /* ty=(Tensor[(12, 11, 7), bool], Tensor[(12, 11, 7), bool], Tensor[(8, 13, 9), float32]) */;
  %253 = cast(meta[relay.Constant][16] /* ty=Tensor[(572), int8] */, dtype="float64") /* ty=Tensor[(572), float64] */;
  %254 = cast(meta[relay.Constant][16] /* ty=Tensor[(572), int8] */, dtype="int8") /* ty=Tensor[(572), int8] */;
  %255 = cast(meta[relay.Constant][16] /* ty=Tensor[(572), int8] */, dtype="int8") /* ty=Tensor[(572), int8] */;
  %256 = reshape(%254, newshape=[4, 13, 11]) /* ty=Tensor[(4, 13, 11), int8] */;
  %257 = reshape(%255, newshape=[4, 13, 11]) /* ty=Tensor[(4, 13, 11), int8] */;
  %258 = @func_733(%256, %257) /* ty=(Tensor[(4, 13, 11), int8], Tensor[(4, 13, 11), int64], Tensor[(8, 13, 9), float32], Tensor[(924), float32]) */;
  %259 = %258.2;
  %260 = cast(%var_784, dtype="int32") /* ty=Tensor[(8, 13, 9), int32] */;
  %261 = shape_of(%259, dtype="int32") /* ty=Tensor[(3), int32] */;
  %262 = cast(%259, dtype="int32") /* ty=Tensor[(8, 13, 9), int32] */;
  %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %264 = asinh(%253) /* ty=Tensor[(572), float64] */;
  %265 = cast(%264, dtype="int8") /* ty=Tensor[(572), int8] */;
  %266 = cast(%264, dtype="int8") /* ty=Tensor[(572), int8] */;
  %267 = reshape(%265, newshape=[4, 13, 11]) /* ty=Tensor[(4, 13, 11), int8] */;
  %268 = reshape(%266, newshape=[4, 13, 11]) /* ty=Tensor[(4, 13, 11), int8] */;
  %269 = @func_733(%267, %268) /* ty=(Tensor[(4, 13, 11), int8], Tensor[(4, 13, 11), int64], Tensor[(8, 13, 9), float32], Tensor[(924), float32]) */;
  %270 = divide(%248, %249) /* ty=Tensor[(4, 2, 9), float64] */;
  %271 = %252.1;
  %272 = right_shift(%262, %263) /* ty=Tensor[(8, 13, 9), int32] */;
  %273 = %269.1;
  (%270, %271, meta[relay.Constant][15] /* ty=Tensor[(924), float32] */, %264, %272, %273)
}

def @func_5949(%var_5941: Tensor[(924), float32]) -> (Tensor[(10, 3, 14), float32], Tensor[(10, 3, 14), uint16], Tensor[(10, 5, 4), int64], Tensor[(200), int64], Tensor[(924), float32]) {
  %274 = cast(meta[relay.Constant][17] /* ty=Tensor[(200), int64] */, dtype="int64") /* ty=Tensor[(200), int64] */;
  %275 = cast(%var_5941, dtype="float32") /* ty=Tensor[(924), float32] */;
  %276 = reshape(%274, newshape=[200]) /* ty=Tensor[(200), int64] */;
  %277 = reshape(%275, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %278 = @func_2803(%276, %277) /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(10, 5, 4), int64], Tensor[(200), int64], Tensor[(924), float32], Tensor[(16, 14, 4), float32], Tensor[(1, 896), float32]) */;
  %279 = @func_4575() /* ty=Tensor[(10, 3, 14), float32] */;
  %280 = @func_2681() /* ty=Tensor[(10, 3, 14), uint16] */;
  %281 = %278.1;
  (%279, %280, %281, meta[relay.Constant][17] /* ty=Tensor[(200), int64] */, %var_5941)
}

def @func_4602() -> (Tensor[(10, 3, 14), uint16],) {
  %282 = @func_4116() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %283 = %282.0;
  (%283,)
}

def @func_6198(%var_6191: Tensor[(3120), uint8]) -> (Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), bool], Tensor[(572), uint32], Tensor[(3120), int8]) {
  %284 = @func_3031() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %285 = @func_4516() /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16], Tensor[(896), bool], Tensor[(10, 3, 14), bool]) */;
  %286 = cast(meta[relay.Constant][18] /* ty=Tensor[(3120), uint8] */, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
  %287 = reshape(%286, newshape=[3120]) /* ty=Tensor[(3120), uint8] */;
  %288 = @func_3479(%287) /* ty=(Tensor[(572), uint32], Tensor[(3120), uint8], Tensor[(10, 3, 14), bool], Tensor[(10, 3, 14), uint64]) */;
  %289 = cast(%var_6191, dtype="int8") /* ty=Tensor[(3120), int8] */;
  %290 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(3120), uint8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %291 = cast(meta[relay.Constant][18] /* ty=Tensor[(3120), uint8] */, dtype="int8") /* ty=Tensor[(3120), int8] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?), int8] */;
  %293 = %284.0;
  %294 = %285.3;
  %295 = %288.0;
  %296 = bitwise_or(%291, %292) /* ty=Tensor[(3120), int8] */;
  (%293, %294, %295, %296)
}

def @func_4233(%var_4157: Tensor[(200), int64], %var_4158: Tensor[(462, 2), float32], %var_4182: Tensor[(72), float32], %var_4199: Tensor[(4, 780), uint8], %var_4208: Tensor[(4, 780), uint8], %var_4219: Tensor[(10, 5, 4), int64]) -> (Tensor[(10, 3, 14), uint16], Tensor[(16, 14, 4), float32], Tensor[(896), float32], Tensor[(200), int64], Tensor[(462, 2), float32], Tensor[(15, 16, 15), bool], Tensor[(3600, 1), float32], Tensor[(8, 1, 9), float32], Tensor[(72), float32], Tensor[(5, 40), int64], Tensor[(4, 780), int32], Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16], Tensor[(10, 5, 4), bool], Tensor[(1, 896), float32]) {
  %297 = @func_3858() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %298 = cast(meta[relay.Constant][19] /* ty=Tensor[(896), float32] */, dtype="float32") /* ty=Tensor[(896), float32] */;
  %299 = reshape(%298, newshape=[16, 14, 4]) /* ty=Tensor[(16, 14, 4), float32] */;
  %300 = cast(meta[relay.Constant][20] /* ty=Tensor[(3600, 1), float32] */, dtype="float32") /* ty=Tensor[(3600, 1), float32] */;
  %301 = reshape(%300, newshape=[15, 16, 15]) /* ty=Tensor[(15, 16, 15), float32] */;
  %302 = @func_2331(%301) /* ty=(Tensor[(15, 16, 15), bool], Tensor[(15, 16, 15), int32]) */;
  %303 = cast(%var_4182, dtype="float32") /* ty=Tensor[(72), float32] */;
  %304 = reshape(%303, newshape=[8, 1, 9]) /* ty=Tensor[(8, 1, 9), float32] */;
  %305 = cast(%var_4199, dtype="uint8") /* ty=Tensor[(4, 780), uint8] */;
  %306 = cast(%var_4158, dtype="float32") /* ty=Tensor[(462, 2), float32] */;
  %307 = reshape(%305, newshape=[156, 20]) /* ty=Tensor[(156, 20), uint8] */;
  %308 = reshape(%306, newshape=[154, 6]) /* ty=Tensor[(154, 6), float32] */;
  %309 = @func_3694(%307, %308) /* ty=(Tensor[(4, 13, 11), int64], Tensor[(72), float64], Tensor[(936), float32], Tensor[(572), uint32], Tensor[(8, 13, 9), float32], Tensor[(156, 20), uint8], Tensor[(10, 3, 14), int16], Tensor[(10, 3, 14), bool], Tensor[(200), int64], Tensor[(5, 40), int64], Tensor[(154, 6), float32], Tensor[(10, 3, 14), float32], Tensor[(12, 11, 7), bool]) */;
  %310 = cast(%var_4208, dtype="int32") /* ty=Tensor[(4, 780), int32] */;
  %311 = shape_of(%var_4199, dtype="int32") /* ty=Tensor[(2), int32] */;
  %312 = cast(%var_4199, dtype="int32") /* ty=Tensor[(4, 780), int32] */;
  %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %314 = @func_3031() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %315 = cast(%var_4157, dtype="int64") /* ty=Tensor[(200), int64] */;
  %316 = cast(%var_4158, dtype="float32") /* ty=Tensor[(462, 2), float32] */;
  %317 = reshape(%315, newshape=[200]) /* ty=Tensor[(200), int64] */;
  %318 = reshape(%316, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %319 = @func_2803(%317, %318) /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(10, 5, 4), int64], Tensor[(200), int64], Tensor[(924), float32], Tensor[(16, 14, 4), float32], Tensor[(1, 896), float32]) */;
  %320 = %319.1;
  %321 = cast(%var_4219, dtype="bool") /* ty=Tensor[(10, 5, 4), bool] */;
  %322 = shape_of(%320, dtype="int32") /* ty=Tensor[(3), int32] */;
  %323 = cast(%320, dtype="bool") /* ty=Tensor[(10, 5, 4), bool] */;
  %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %325 = cast(%320, dtype="int64") /* ty=Tensor[(10, 5, 4), int64] */;
  %326 = cast(%var_4158, dtype="float32") /* ty=Tensor[(462, 2), float32] */;
  %327 = reshape(%325, newshape=[200]) /* ty=Tensor[(200), int64] */;
  %328 = reshape(%326, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %329 = @func_2803(%327, %328) /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(10, 5, 4), int64], Tensor[(200), int64], Tensor[(924), float32], Tensor[(16, 14, 4), float32], Tensor[(1, 896), float32]) */;
  %330 = %297.0;
  %331 = @func_2548(%299) /* ty=Tensor[(16, 14, 4), float32] */;
  %332 = %302.0;
  %333 = @func_1124(%304) /* ty=Tensor[(8, 1, 9), float32] */;
  %334 = %309.9;
  %335 = logical_xor(%312, %313) /* ty=Tensor[(4, 780), int32] */;
  %336 = %314.0;
  %337 = @func_4085() /* ty=Tensor[(10, 3, 14), uint16] */;
  %338 = equal(%323, %324) /* ty=Tensor[(10, 5, 4), bool] */;
  %339 = %329.5;
  (%330, %331, meta[relay.Constant][19] /* ty=Tensor[(896), float32] */, %var_4157, %var_4158, %332, meta[relay.Constant][20] /* ty=Tensor[(3600, 1), float32] */, %333, %var_4182, %334, %335, %336, %337, %338, %339)
}

def @func_5589() -> (Tensor[(10, 3, 14), uint16], Tensor[(8, 13, 9), int32], Tensor[(72), float64], Tensor[(936), float32]) {
  %340 = @func_3099() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %341 = cast(meta[relay.Constant][21] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %342 = cast(meta[relay.Constant][21] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %343 = cast(meta[relay.Constant][22] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
  %344 = reshape(%341, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), float64] */;
  %345 = reshape(%342, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), float64] */;
  %346 = reshape(%343, newshape=[8, 13, 9]) /* ty=Tensor[(8, 13, 9), float32] */;
  %347 = @func_811(%344, %345, %346) /* ty=(Tensor[(4, 2, 9), float64], Tensor[(12, 11, 7), bool], Tensor[(924), float32], Tensor[(572), float64], Tensor[(8, 13, 9), int32], Tensor[(4, 13, 11), int64]) */;
  %348 = %340.0;
  %349 = %347.4;
  (%348, %349, meta[relay.Constant][21] /* ty=Tensor[(72), float64] */, meta[relay.Constant][22] /* ty=Tensor[(936), float32] */)
}

def @func_6036() -> (Tensor[(10, 3, 14), uint16],) {
  %350 = @func_3858() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %351 = %350.0;
  (%351,)
}

def @func_5160(%var_5123: Tensor[(10, 3, 14), uint16]) -> (Tensor[(10, 3, 14), float32],) {
  %352 = @func_3162() /* ty=Tensor[(10, 3, 14), uint16] */;
  %353 = cast(%var_5123, dtype="float32") /* ty=Tensor[(10, 3, 14), float32] */;
  %354 = shape_of(%352, dtype="int32") /* ty=Tensor[(3), int32] */;
  %355 = cast(%352, dtype="float32") /* ty=Tensor[(10, 3, 14), float32] */;
  %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %357 = floor_mod(%355, %356) /* ty=Tensor[(10, 3, 14), float32] */;
  (%357,)
}

def @func_2803(%var_2781: Tensor[(200), int64], %var_2782: Tensor[(924), float32]) -> (Tensor[(10, 3, 14), uint16], Tensor[(10, 5, 4), int64], Tensor[(200), int64], Tensor[(924), float32], Tensor[(16, 14, 4), float32], Tensor[(1, 896), float32]) {
  %358 = cast(%var_2781, dtype="int64") /* ty=Tensor[(200), int64] */;
  %359 = cast(%var_2782, dtype="float32") /* ty=Tensor[(924), float32] */;
  %360 = reshape(%358, newshape=[10, 5, 4]) /* ty=Tensor[(10, 5, 4), int64] */;
  %361 = reshape(%359, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %362 = @func_1409(%360, %361) /* ty=(Tensor[(10, 5, 4), int64], Tensor[(12, 11, 7), bool], Tensor[(924), float32]) */;
  %363 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 896), float32] */, dtype="float32") /* ty=Tensor[(1, 896), float32] */;
  %364 = reshape(%363, newshape=[16, 14, 4]) /* ty=Tensor[(16, 14, 4), float32] */;
  %365 = @func_2681() /* ty=Tensor[(10, 3, 14), uint16] */;
  %366 = %362.0;
  %367 = @func_2548(%364) /* ty=Tensor[(16, 14, 4), float32] */;
  (%365, %366, %var_2781, %var_2782, %367, meta[relay.Constant][23] /* ty=Tensor[(1, 896), float32] */)
}

def @func_3410() -> (Tensor[(10, 3, 14), uint16],) {
  %368 = @func_2681() /* ty=Tensor[(10, 3, 14), uint16] */;
  (%368,)
}

def @func_2891(%var_2884: Tensor[(572), int8]) -> (Tensor[(10, 3, 14), uint16], Tensor[(924), float32], Tensor[(572), uint32]) {
  %369 = cast(meta[relay.Constant][24] /* ty=Tensor[(572), int8] */, dtype="int8") /* ty=Tensor[(572), int8] */;
  %370 = cast(meta[relay.Constant][24] /* ty=Tensor[(572), int8] */, dtype="int8") /* ty=Tensor[(572), int8] */;
  %371 = reshape(%369, newshape=[4, 13, 11]) /* ty=Tensor[(4, 13, 11), int8] */;
  %372 = reshape(%370, newshape=[4, 13, 11]) /* ty=Tensor[(4, 13, 11), int8] */;
  %373 = @func_733(%371, %372) /* ty=(Tensor[(4, 13, 11), int8], Tensor[(4, 13, 11), int64], Tensor[(8, 13, 9), float32], Tensor[(924), float32]) */;
  %374 = cast(%var_2884, dtype="uint32") /* ty=Tensor[(572), uint32] */;
  %375 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(572), int8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %376 = cast(meta[relay.Constant][24] /* ty=Tensor[(572), int8] */, dtype="uint32") /* ty=Tensor[(572), uint32] */;
  %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %378 = @func_2681() /* ty=Tensor[(10, 3, 14), uint16] */;
  %379 = %373.3;
  %380 = logical_xor(%376, %377) /* ty=Tensor[(572), uint32] */;
  (%378, %379, %380)
}

def @func_6697() -> (Tensor[(10, 3, 14), uint16],) {
  %381 = @func_4987() /* ty=Tensor[(10, 3, 14), uint16] */;
  (%381,)
}

def @func_6823() -> (Tensor[(10, 3, 14), uint16],) {
  %382 = @func_4116() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %383 = %382.0;
  (%383,)
}

def @func_6127(%var_6120: Tensor[(10, 4, 13), float32]) -> Tensor[(10, 4, 13), bool] {
  %384 = cast(%var_6120, dtype="bool") /* ty=Tensor[(10, 4, 13), bool] */;
  %385 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(10, 4, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %386 = cast(meta[relay.Constant][25] /* ty=Tensor[(10, 4, 13), float32] */, dtype="bool") /* ty=Tensor[(10, 4, 13), bool] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%386, %387) /* ty=Tensor[(10, 4, 13), bool] */
}

def @func_3031() -> (Tensor[(10, 3, 14), uint16],) {
  %388 = @func_2853() /* ty=Tensor[(10, 3, 14), uint16] */;
  (%388,)
}

def @func_3769() -> (Tensor[(10, 3, 14), uint16], Tensor[(15, 16, 13), uint8], Tensor[(3120), uint8], Tensor[(936), float32]) {
  %389 = cast(meta[relay.Constant][26] /* ty=Tensor[(3120), uint8] */, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
  %390 = cast(meta[relay.Constant][26] /* ty=Tensor[(3120), uint8] */, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
  %391 = cast(meta[relay.Constant][27] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
  %392 = reshape(%389, newshape=[15, 16, 13]) /* ty=Tensor[(15, 16, 13), uint8] */;
  %393 = reshape(%390, newshape=[15, 16, 13]) /* ty=Tensor[(15, 16, 13), uint8] */;
  %394 = reshape(%391, newshape=[8, 13, 9]) /* ty=Tensor[(8, 13, 9), float32] */;
  %395 = @func_1649(%392, %393, %394) /* ty=(Tensor[(15, 16, 13), uint8], Tensor[(924), float32], Tensor[(8, 13, 9), float32], Tensor[(8, 13, 9), int8], Tensor[(12, 11, 7), bool], Tensor[(36, 2), float64], Tensor[(8, 1, 9), float32]) */;
  %396 = @func_3729() /* ty=Tensor[(10, 3, 14), uint16] */;
  %397 = %395.0;
  (%396, %397, meta[relay.Constant][26] /* ty=Tensor[(3120), uint8] */, meta[relay.Constant][27] /* ty=Tensor[(936), float32] */)
}

def @func_4418(%var_4390: Tensor[(10, 3, 14), uint16], %var_4401: Tensor[(3120), uint8], %var_4402: Tensor[(936), float32]) -> (Tensor[(10, 3, 14), float64], Tensor[(12, 11, 7), bool], Tensor[(3120), uint8], Tensor[(936), float32], Tensor[(10, 3, 14), uint16], Tensor[(11, 52), float32]) {
  %398 = @func_3099() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %399 = %398.0;
  %400 = cast(%var_4390, dtype="float64") /* ty=Tensor[(10, 3, 14), float64] */;
  %401 = shape_of(%399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %402 = cast(%399, dtype="float64") /* ty=Tensor[(10, 3, 14), float64] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %404 = cast(%var_4401, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
  %405 = cast(%var_4401, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
  %406 = cast(%var_4402, dtype="float32") /* ty=Tensor[(936), float32] */;
  %407 = reshape(%404, newshape=[15, 16, 13]) /* ty=Tensor[(15, 16, 13), uint8] */;
  %408 = reshape(%405, newshape=[15, 16, 13]) /* ty=Tensor[(15, 16, 13), uint8] */;
  %409 = reshape(%406, newshape=[8, 13, 9]) /* ty=Tensor[(8, 13, 9), float32] */;
  %410 = @func_1649(%407, %408, %409) /* ty=(Tensor[(15, 16, 13), uint8], Tensor[(924), float32], Tensor[(8, 13, 9), float32], Tensor[(8, 13, 9), int8], Tensor[(12, 11, 7), bool], Tensor[(36, 2), float64], Tensor[(8, 1, 9), float32]) */;
  %411 = @func_2932() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %412 = cast(%var_4401, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
  %413 = reshape(%412, newshape=[3120]) /* ty=Tensor[(3120), uint8] */;
  %414 = @func_3015(%413) /* ty=(Tensor[(13, 15, 5), bool], Tensor[(572), uint32], Tensor[(10, 3, 14), uint64], Tensor[(11, 52), float32], Tensor[(12, 11, 7), bool], Tensor[(3120), uint8], Tensor[(936), float32]) */;
  %415 = add(%402, %403) /* ty=Tensor[(10, 3, 14), float64] */;
  %416 = %410.4;
  %417 = %411.0;
  %418 = %414.3;
  (%415, %416, %var_4401, %var_4402, %417, %418)
}

def @func_1409(%var_1389: Tensor[(10, 5, 4), int64], %var_1398: Tensor[(924), float32]) -> (Tensor[(10, 5, 4), int64], Tensor[(12, 11, 7), bool], Tensor[(924), float32]) {
  %419 = cast(%var_1389, dtype="int64") /* ty=Tensor[(10, 5, 4), int64] */;
  %420 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(10, 5, 4), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %421 = cast(meta[relay.Constant][28] /* ty=Tensor[(10, 5, 4), int64] */, dtype="int64") /* ty=Tensor[(10, 5, 4), int64] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %423 = cast(%var_1398, dtype="float32") /* ty=Tensor[(924), float32] */;
  %424 = cast(%var_1398, dtype="float32") /* ty=Tensor[(924), float32] */;
  %425 = reshape(%423, newshape=[12, 11, 7]) /* ty=Tensor[(12, 11, 7), float32] */;
  %426 = reshape(%424, newshape=[12, 11, 7]) /* ty=Tensor[(12, 11, 7), float32] */;
  %427 = @func_392(%425, %426) /* ty=(Tensor[(12, 11, 7), bool],) */;
  %428 = subtract(%421, %422) /* ty=Tensor[(10, 5, 4), int64] */;
  %429 = %427.0;
  (%428, %429, %var_1398)
}

def @func_6111() -> (Tensor[(10, 3, 14), uint16], Tensor[(572), uint32], Tensor[(572), int8]) {
  %430 = cast(meta[relay.Constant][29] /* ty=Tensor[(572), int8] */, dtype="int8") /* ty=Tensor[(572), int8] */;
  %431 = reshape(%430, newshape=[572]) /* ty=Tensor[(572), int8] */;
  %432 = @func_2891(%431) /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(924), float32], Tensor[(572), uint32]) */;
  %433 = @func_2853() /* ty=Tensor[(10, 3, 14), uint16] */;
  %434 = %432.2;
  (%433, %434, meta[relay.Constant][29] /* ty=Tensor[(572), int8] */)
}

def @func_4055(%var_4022: int8) -> (Tensor[(13, 15, 5), float32], Tensor[(10, 3, 14), bool], Tensor[(10, 3, 14), float64]) {
  %435 = cast(%var_4022, dtype="int8") /* ty=int8 */;
  %436 = reshape(%435, newshape=[]) /* ty=int8 */;
  %437 = @func_929(%436) /* ty=(Tensor[(13, 15, 5), bool], Tensor[(13, 15, 5), float32]) */;
  %438 = @func_3162() /* ty=Tensor[(10, 3, 14), uint16] */;
  %439 = cast(%438, dtype="bool") /* ty=Tensor[(10, 3, 14), bool] */;
  %440 = cast(%var_4022, dtype="bool") /* ty=bool */;
  %441 = @func_3031() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %442 = %441.0;
  %443 = cast(%442, dtype="float64") /* ty=Tensor[(10, 3, 14), float64] */;
  %444 = %437.1;
  %445 = greater(%439, %440) /* ty=Tensor[(10, 3, 14), bool] */;
  %446 = asin(%443) /* ty=Tensor[(10, 3, 14), float64] */;
  (%444, %445, %446)
}

def @func_5740() -> (Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16]) {
  %447 = @func_3729() /* ty=Tensor[(10, 3, 14), uint16] */;
  %448 = @func_4661() /* ty=Tensor[(10, 3, 14), uint16] */;
  (%447, %448)
}

def @func_4102() -> (Tensor[(10, 3, 14), uint16],) {
  %449 = @func_4085() /* ty=Tensor[(10, 3, 14), uint16] */;
  (%449,)
}

def @func_4361(%var_4341: int8) -> (Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16], Tensor[(13, 15, 5), float32], int8, Tensor[(16, 14, 4), float32], Tensor[(896), float32]) {
  %450 = @func_3858() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %451 = @func_3099() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %452 = cast(%var_4341, dtype="int8") /* ty=int8 */;
  %453 = reshape(%452, newshape=[]) /* ty=int8 */;
  %454 = @func_929(%453) /* ty=(Tensor[(13, 15, 5), bool], Tensor[(13, 15, 5), float32]) */;
  %455 = cast(meta[relay.Constant][30] /* ty=Tensor[(896), float32] */, dtype="float32") /* ty=Tensor[(896), float32] */;
  %456 = reshape(%455, newshape=[16, 14, 4]) /* ty=Tensor[(16, 14, 4), float32] */;
  %457 = %450.0;
  %458 = %451.0;
  %459 = %454.1;
  %460 = @func_2548(%456) /* ty=Tensor[(16, 14, 4), float32] */;
  (%457, %458, %459, %var_4341, %460, meta[relay.Constant][30] /* ty=Tensor[(896), float32] */)
}

def @func_4958(%var_4860: Tensor[(1, 5, 1), bool], %var_4861: Tensor[(10, 5, 15), bool], %var_4874: Tensor[(3600), float32], %var_4935: Tensor[(10, 5, 15), float64]) -> (Tensor[(15, 16, 15), bool], Tensor[(3600), float32], Tensor[(12, 11, 7), bool], Tensor[(72, 1), float64], Tensor[(936), float32], Tensor[(8, 1, 9), float32], Tensor[(10, 5, 15), int64], Tensor[(10, 3, 14), uint16], Tensor[(10, 5, 15), bool], Tensor[(10, 3, 14), float32], Tensor[(10, 3, 14), uint16], Tensor[(10, 5, 15), int8], Tensor[(10, 3, 14), uint16]) {
  %461 = cast(%var_4874, dtype="float32") /* ty=Tensor[(3600), float32] */;
  %462 = reshape(%461, newshape=[15, 16, 15]) /* ty=Tensor[(15, 16, 15), float32] */;
  %463 = @func_2331(%462) /* ty=(Tensor[(15, 16, 15), bool], Tensor[(15, 16, 15), int32]) */;
  %464 = cast(meta[relay.Constant][31] /* ty=Tensor[(72, 1), float64] */, dtype="float64") /* ty=Tensor[(72, 1), float64] */;
  %465 = cast(meta[relay.Constant][31] /* ty=Tensor[(72, 1), float64] */, dtype="float64") /* ty=Tensor[(72, 1), float64] */;
  %466 = cast(meta[relay.Constant][32] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
  %467 = reshape(%464, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), float64] */;
  %468 = reshape(%465, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), float64] */;
  %469 = reshape(%466, newshape=[8, 13, 9]) /* ty=Tensor[(8, 13, 9), float32] */;
  %470 = @func_811(%467, %468, %469) /* ty=(Tensor[(4, 2, 9), float64], Tensor[(12, 11, 7), bool], Tensor[(924), float32], Tensor[(572), float64], Tensor[(8, 13, 9), int32], Tensor[(4, 13, 11), int64]) */;
  %471 = cast(meta[relay.Constant][31] /* ty=Tensor[(72, 1), float64] */, dtype="float32") /* ty=Tensor[(72, 1), float32] */;
  %472 = reshape(%471, newshape=[8, 1, 9]) /* ty=Tensor[(8, 1, 9), float32] */;
  %473 = cast(%var_4861, dtype="float32") /* ty=Tensor[(10, 5, 15), float32] */;
  %474 = rsqrt(%473) /* ty=Tensor[(10, 5, 15), float32] */;
  %475 = cast(%474, dtype="float32") /* ty=Tensor[(10, 5, 15), float32] */;
  %476 = sigmoid(%475) /* ty=Tensor[(10, 5, 15), float32] */;
  %477 = cast(%474, dtype="int64") /* ty=Tensor[(10, 5, 15), int64] */;
  %478 = shape_of(%476, dtype="int32") /* ty=Tensor[(3), int32] */;
  %479 = cast(%476, dtype="int64") /* ty=Tensor[(10, 5, 15), int64] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %481 = cast(%476, dtype="bool") /* ty=Tensor[(10, 5, 15), bool] */;
  %482 = shape_of(%474, dtype="int32") /* ty=Tensor[(3), int32] */;
  %483 = cast(%474, dtype="bool") /* ty=Tensor[(10, 5, 15), bool] */;
  %484 = dyn.reshape(%481, %482, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %485 = cast(%var_4860, dtype="bool") /* ty=Tensor[(1, 5, 1), bool] */;
  %486 = cast(%var_4861, dtype="bool") /* ty=Tensor[(10, 5, 15), bool] */;
  %487 = logical_or(%485, %486) /* ty=Tensor[(10, 5, 15), bool] */;
  %488 = cast(%487, dtype="float64") /* ty=Tensor[(10, 5, 15), float64] */;
  %489 = sqrt(%488) /* ty=Tensor[(10, 5, 15), float64] */;
  %490 = cast(%var_4935, dtype="int8") /* ty=Tensor[(10, 5, 15), int8] */;
  %491 = shape_of(%489, dtype="int32") /* ty=Tensor[(3), int32] */;
  %492 = cast(%489, dtype="int8") /* ty=Tensor[(10, 5, 15), int8] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %494 = @func_3858() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %495 = %463.0;
  %496 = %470.1;
  %497 = @func_1124(%472) /* ty=Tensor[(8, 1, 9), float32] */;
  %498 = multiply(%479, %480) /* ty=Tensor[(10, 5, 15), int64] */;
  %499 = @func_4085() /* ty=Tensor[(10, 3, 14), uint16] */;
  %500 = less(%483, %484) /* ty=Tensor[(10, 5, 15), bool] */;
  %501 = @func_4575() /* ty=Tensor[(10, 3, 14), float32] */;
  %502 = @func_3729() /* ty=Tensor[(10, 3, 14), uint16] */;
  %503 = subtract(%492, %493) /* ty=Tensor[(10, 5, 15), int8] */;
  %504 = %494.0;
  (%495, %var_4874, %496, meta[relay.Constant][31] /* ty=Tensor[(72, 1), float64] */, meta[relay.Constant][32] /* ty=Tensor[(936), float32] */, %497, %498, %499, %500, %501, %502, %503, %504)
}

def @func_3793(%var_3789: Tensor[(4, 15, 5), float64]) -> (Tensor[(4, 15, 5), float64],) {
  %505 = cast(%var_3789, dtype="float64") /* ty=Tensor[(4, 15, 5), float64] */;
  %506 = exp(%505) /* ty=Tensor[(4, 15, 5), float64] */;
  (%506,)
}

def @func_3858() -> (Tensor[(10, 3, 14), uint16],) {
  %507 = @func_3392() /* ty=Tensor[(10, 3, 14), uint16] */;
  (%507,)
}

def @func_4853(%var_4806: Tensor[(16, 2, 15), uint8], %var_4824: Tensor[(420), uint16]) -> (Tensor[(16, 2, 15), bool], Tensor[(10, 3, 14), bool], Tensor[(420), uint16], Tensor[(16, 2, 15), float64], Tensor[(16, 2, 15), float32], Tensor[(10, 3, 14), uint16], Tensor[(16, 2, 15), float32]) {
  %508 = cast(%var_4806, dtype="uint8") /* ty=Tensor[(16, 2, 15), uint8] */;
  %509 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(16, 2, 15), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %510 = cast(meta[relay.Constant][33] /* ty=Tensor[(16, 2, 15), uint8] */, dtype="uint8") /* ty=Tensor[(16, 2, 15), uint8] */;
  %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %512 = bitwise_and(%510, %511) /* ty=Tensor[(16, 2, 15), uint8] */;
  %513 = cast(%512, dtype="bool") /* ty=Tensor[(16, 2, 15), bool] */;
  %514 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(16, 2, 15), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %515 = cast(meta[relay.Constant][33] /* ty=Tensor[(16, 2, 15), uint8] */, dtype="bool") /* ty=Tensor[(16, 2, 15), bool] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %517 = cast(%var_4824, dtype="uint16") /* ty=Tensor[(420), uint16] */;
  %518 = cast(%var_4824, dtype="uint16") /* ty=Tensor[(420), uint16] */;
  %519 = reshape(%517, newshape=[10, 3, 14]) /* ty=Tensor[(10, 3, 14), uint16] */;
  %520 = reshape(%518, newshape=[10, 3, 14]) /* ty=Tensor[(10, 3, 14), uint16] */;
  %521 = @func_3235(%519, %520) /* ty=(Tensor[(10, 3, 14), bool], Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), bool]) */;
  %522 = cast(%512, dtype="float32") /* ty=Tensor[(16, 2, 15), float32] */;
  %523 = log2(%522) /* ty=Tensor[(16, 2, 15), float32] */;
  %524 = cast(%var_4806, dtype="float64") /* ty=Tensor[(16, 2, 15), float64] */;
  %525 = shape_of(%523, dtype="int32") /* ty=Tensor[(3), int32] */;
  %526 = cast(%523, dtype="float64") /* ty=Tensor[(16, 2, 15), float64] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %528 = cast(%523, dtype="float32") /* ty=Tensor[(16, 2, 15), float32] */;
  %529 = @func_3410() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %530 = cast(%var_4806, dtype="float32") /* ty=Tensor[(16, 2, 15), float32] */;
  %531 = logical_or(%515, %516) /* ty=Tensor[(16, 2, 15), bool] */;
  %532 = %521.0;
  %533 = floor_mod(%526, %527) /* ty=Tensor[(16, 2, 15), float64] */;
  %534 = erf(%528) /* ty=Tensor[(16, 2, 15), float32] */;
  %535 = %529.0;
  %536 = sinh(%530) /* ty=Tensor[(16, 2, 15), float32] */;
  (%531, %532, %var_4824, %533, %534, %535, %536)
}

def @func_6376() -> (Tensor[(10, 3, 14), uint16],) {
  %537 = @func_6260() /* ty=Tensor[(10, 3, 14), uint16] */;
  (%537,)
}

def @func_5527(%var_5477: Tensor[(10, 3, 14), float32], %var_5499: Tensor[(462, 2), float32]) -> (Tensor[(10, 3, 14), int16], Tensor[(10, 3, 14), float64], Tensor[(10, 3, 14), uint16], Tensor[(12, 11, 7), bool], Tensor[(462, 2), float32], Tensor[(10, 3, 14), uint16]) {
  %538 = @func_4575() /* ty=Tensor[(10, 3, 14), float32] */;
  %539 = cast(%var_5477, dtype="int16") /* ty=Tensor[(10, 3, 14), int16] */;
  %540 = shape_of(%538, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(%538, dtype="int16") /* ty=Tensor[(10, 3, 14), int16] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %543 = cast(%var_5477, dtype="float64") /* ty=Tensor[(10, 3, 14), float64] */;
  %544 = @func_4250() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %545 = cast(%var_5499, dtype="float32") /* ty=Tensor[(462, 2), float32] */;
  %546 = reshape(%545, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %547 = @func_648(%546) /* ty=(Tensor[(12, 11, 7), bool], Tensor[(12, 11, 7), bool], Tensor[(8, 13, 9), float32]) */;
  %548 = @func_3099() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %549 = multiply(%541, %542) /* ty=Tensor[(10, 3, 14), int16] */;
  %550 = sqrt(%543) /* ty=Tensor[(10, 3, 14), float64] */;
  %551 = %544.0;
  %552 = %547.1;
  %553 = %548.0;
  (%549, %550, %551, %552, %var_5499, %553)
}

def @func_6524(%var_6504: Tensor[(6, 1, 14), int16]) -> (Tensor[(6, 14, 14), bool],) {
  %554 = cast(%var_6504, dtype="bool") /* ty=Tensor[(6, 1, 14), bool] */;
  %555 = cast(meta[relay.Constant][34] /* ty=Tensor[(6, 14, 14), int16] */, dtype="bool") /* ty=Tensor[(6, 14, 14), bool] */;
  %556 = greater_equal(%554, %555) /* ty=Tensor[(6, 14, 14), bool] */;
  (%556,)
}

def @func_6631(%var_6626: float64) -> Tensor[(8, 10, 15), float64] {
  %557 = cast(%var_6626, dtype="float64") /* ty=float64 */;
  %558 = cast(meta[relay.Constant][35] /* ty=Tensor[(8, 10, 15), float64] */, dtype="float64") /* ty=Tensor[(8, 10, 15), float64] */;
  floor_divide(%557, %558) /* ty=Tensor[(8, 10, 15), float64] */
}

def @func_6492() -> (Tensor[(10, 3, 14), float32],) {
  %559 = @func_3031() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %560 = %559.0;
  %561 = @func_2932() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %562 = %561.0;
  %563 = cast(%562, dtype="float32") /* ty=Tensor[(10, 3, 14), float32] */;
  %564 = shape_of(%560, dtype="int32") /* ty=Tensor[(3), int32] */;
  %565 = cast(%560, dtype="float32") /* ty=Tensor[(10, 3, 14), float32] */;
  %566 = dyn.reshape(%563, %564, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %567 = mod(%565, %566) /* ty=Tensor[(10, 3, 14), float32] */;
  (%567,)
}

def @func_3392() -> Tensor[(10, 3, 14), uint16] {
  @func_2681() /* ty=Tensor[(10, 3, 14), uint16] */
}

def @func_6231() -> (Tensor[(10, 3, 14), uint16],) {
  %568 = @func_5184() /* ty=Tensor[(10, 3, 14), uint16] */;
  (%568,)
}

def @func_3729() -> Tensor[(10, 3, 14), uint16] {
  %569 = @func_3410() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %569.0
}

def @func_5184() -> Tensor[(10, 3, 14), uint16] {
  %570 = @func_3858() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %570.0
}

def @func_3694(%var_3603: Tensor[(156, 20), uint8], %var_3655: Tensor[(154, 6), float32]) -> (Tensor[(4, 13, 11), int64], Tensor[(72), float64], Tensor[(936), float32], Tensor[(572), uint32], Tensor[(8, 13, 9), float32], Tensor[(156, 20), uint8], Tensor[(10, 3, 14), int16], Tensor[(10, 3, 14), bool], Tensor[(200), int64], Tensor[(5, 40), int64], Tensor[(154, 6), float32], Tensor[(10, 3, 14), float32], Tensor[(12, 11, 7), bool]) {
  %571 = cast(meta[relay.Constant][36] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %572 = cast(meta[relay.Constant][36] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %573 = cast(meta[relay.Constant][37] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
  %574 = reshape(%571, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), float64] */;
  %575 = reshape(%572, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), float64] */;
  %576 = reshape(%573, newshape=[8, 13, 9]) /* ty=Tensor[(8, 13, 9), float32] */;
  %577 = @func_811(%574, %575, %576) /* ty=(Tensor[(4, 2, 9), float64], Tensor[(12, 11, 7), bool], Tensor[(924), float32], Tensor[(572), float64], Tensor[(8, 13, 9), int32], Tensor[(4, 13, 11), int64]) */;
  %578 = %577.5;
  %579 = cast(%578, dtype="int8") /* ty=Tensor[(4, 13, 11), int8] */;
  %580 = reshape(%579, newshape=[572]) /* ty=Tensor[(572), int8] */;
  %581 = @func_2891(%580) /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(924), float32], Tensor[(572), uint32]) */;
  %582 = cast(%var_3603, dtype="uint8") /* ty=Tensor[(156, 20), uint8] */;
  %583 = cast(%var_3603, dtype="uint8") /* ty=Tensor[(156, 20), uint8] */;
  %584 = cast(meta[relay.Constant][37] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
  %585 = reshape(%582, newshape=[15, 16, 13]) /* ty=Tensor[(15, 16, 13), uint8] */;
  %586 = reshape(%583, newshape=[15, 16, 13]) /* ty=Tensor[(15, 16, 13), uint8] */;
  %587 = reshape(%584, newshape=[8, 13, 9]) /* ty=Tensor[(8, 13, 9), float32] */;
  %588 = @func_1649(%585, %586, %587) /* ty=(Tensor[(15, 16, 13), uint8], Tensor[(924), float32], Tensor[(8, 13, 9), float32], Tensor[(8, 13, 9), int8], Tensor[(12, 11, 7), bool], Tensor[(36, 2), float64], Tensor[(8, 1, 9), float32]) */;
  %589 = @func_3031() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %590 = %589.0;
  %591 = @func_3099() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %592 = %591.0;
  %593 = cast(%592, dtype="int16") /* ty=Tensor[(10, 3, 14), int16] */;
  %594 = shape_of(%590, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(%590, dtype="int16") /* ty=Tensor[(10, 3, 14), int16] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %597 = cast(%var_3603, dtype="uint8") /* ty=Tensor[(156, 20), uint8] */;
  %598 = reshape(%597, newshape=[3120]) /* ty=Tensor[(3120), uint8] */;
  %599 = @func_3479(%598) /* ty=(Tensor[(572), uint32], Tensor[(3120), uint8], Tensor[(10, 3, 14), bool], Tensor[(10, 3, 14), uint64]) */;
  %600 = cast(meta[relay.Constant][38] /* ty=Tensor[(5, 40), int64] */, dtype="int64") /* ty=Tensor[(5, 40), int64] */;
  %601 = cast(%var_3655, dtype="float32") /* ty=Tensor[(154, 6), float32] */;
  %602 = reshape(%600, newshape=[200]) /* ty=Tensor[(200), int64] */;
  %603 = reshape(%601, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %604 = @func_2803(%602, %603) /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(10, 5, 4), int64], Tensor[(200), int64], Tensor[(924), float32], Tensor[(16, 14, 4), float32], Tensor[(1, 896), float32]) */;
  %605 = @func_3392() /* ty=Tensor[(10, 3, 14), uint16] */;
  %606 = @func_3392() /* ty=Tensor[(10, 3, 14), uint16] */;
  %607 = cast(%606, dtype="float32") /* ty=Tensor[(10, 3, 14), float32] */;
  %608 = shape_of(%605, dtype="int32") /* ty=Tensor[(3), int32] */;
  %609 = cast(%605, dtype="float32") /* ty=Tensor[(10, 3, 14), float32] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %611 = cast(%var_3655, dtype="float32") /* ty=Tensor[(154, 6), float32] */;
  %612 = cast(%var_3655, dtype="float32") /* ty=Tensor[(154, 6), float32] */;
  %613 = reshape(%611, newshape=[12, 11, 7]) /* ty=Tensor[(12, 11, 7), float32] */;
  %614 = reshape(%612, newshape=[12, 11, 7]) /* ty=Tensor[(12, 11, 7), float32] */;
  %615 = @func_392(%613, %614) /* ty=(Tensor[(12, 11, 7), bool],) */;
  %616 = %581.2;
  %617 = %588.2;
  %618 = bitwise_xor(%595, %596) /* ty=Tensor[(10, 3, 14), int16] */;
  %619 = %599.2;
  %620 = %604.2;
  %621 = power(%609, %610) /* ty=Tensor[(10, 3, 14), float32] */;
  %622 = %615.0;
  (%578, meta[relay.Constant][36] /* ty=Tensor[(72), float64] */, meta[relay.Constant][37] /* ty=Tensor[(936), float32] */, %616, %617, %var_3603, %618, %619, %620, meta[relay.Constant][38] /* ty=Tensor[(5, 40), int64] */, %var_3655, %621, %622)
}

def @func_5247(%var_5214: Tensor[(10, 3, 14), uint16]) -> (Tensor[(10, 3, 14), bool], Tensor[(10, 3, 14), uint16]) {
  %623 = @func_3410() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %624 = %623.0;
  %625 = cast(%var_5214, dtype="bool") /* ty=Tensor[(10, 3, 14), bool] */;
  %626 = shape_of(%624, dtype="int32") /* ty=Tensor[(3), int32] */;
  %627 = cast(%624, dtype="bool") /* ty=Tensor[(10, 3, 14), bool] */;
  %628 = dyn.reshape(%625, %626, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %629 = not_equal(%627, %628) /* ty=Tensor[(10, 3, 14), bool] */;
  %630 = @func_3729() /* ty=Tensor[(10, 3, 14), uint16] */;
  (%629, %630)
}

def @func_3816() -> (Tensor[(936), float32],) {
  %631 = @func_3769() /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(15, 16, 13), uint8], Tensor[(3120), uint8], Tensor[(936), float32]) */;
  %632 = %631.3;
  (%632,)
}

def @func_4987() -> Tensor[(10, 3, 14), uint16] {
  @func_2681() /* ty=Tensor[(10, 3, 14), uint16] */
}

def @func_733(%var_713: Tensor[(4, 13, 11), int8], %var_714: Tensor[(4, 13, 11), int8]) -> (Tensor[(4, 13, 11), int8], Tensor[(4, 13, 11), int64], Tensor[(8, 13, 9), float32], Tensor[(924), float32]) {
  %633 = cast(%var_714, dtype="int8") /* ty=Tensor[(4, 13, 11), int8] */;
  %634 = shape_of(%var_713, dtype="int32") /* ty=Tensor[(3), int32] */;
  %635 = cast(%var_713, dtype="int8") /* ty=Tensor[(4, 13, 11), int8] */;
  %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %637 = cast(%var_714, dtype="int64") /* ty=Tensor[(4, 13, 11), int64] */;
  %638 = shape_of(%var_713, dtype="int32") /* ty=Tensor[(3), int32] */;
  %639 = cast(%var_713, dtype="int64") /* ty=Tensor[(4, 13, 11), int64] */;
  %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %641 = cast(meta[relay.Constant][39] /* ty=Tensor[(924), float32] */, dtype="float32") /* ty=Tensor[(924), float32] */;
  %642 = reshape(%641, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %643 = @func_648(%642) /* ty=(Tensor[(12, 11, 7), bool], Tensor[(12, 11, 7), bool], Tensor[(8, 13, 9), float32]) */;
  %644 = subtract(%635, %636) /* ty=Tensor[(4, 13, 11), int8] */;
  %645 = add(%639, %640) /* ty=Tensor[(4, 13, 11), int64] */;
  %646 = %643.2;
  (%644, %645, %646, meta[relay.Constant][39] /* ty=Tensor[(924), float32] */)
}

def @func_5446() -> (Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint32]) {
  %647 = @func_3392() /* ty=Tensor[(10, 3, 14), uint16] */;
  %648 = cast(%647, dtype="float32") /* ty=Tensor[(10, 3, 14), float32] */;
  %649 = sigmoid(%648) /* ty=Tensor[(10, 3, 14), float32] */;
  %650 = cast(%649, dtype="float32") /* ty=Tensor[(10, 3, 14), float32] */;
  %651 = sin(%650) /* ty=Tensor[(10, 3, 14), float32] */;
  %652 = cast(%647, dtype="uint32") /* ty=Tensor[(10, 3, 14), uint32] */;
  %653 = shape_of(%651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %654 = cast(%651, dtype="uint32") /* ty=Tensor[(10, 3, 14), uint32] */;
  %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %656 = @func_4661() /* ty=Tensor[(10, 3, 14), uint16] */;
  %657 = minimum(%654, %655) /* ty=Tensor[(10, 3, 14), uint32] */;
  (%656, %657)
}

def @func_5988(%var_5975: Tensor[(1, 10, 5), int8], %var_5976: Tensor[(9, 10, 5), int8]) -> (Tensor[(9, 10, 5), bool],) {
  %658 = cast(%var_5975, dtype="bool") /* ty=Tensor[(1, 10, 5), bool] */;
  %659 = cast(%var_5976, dtype="bool") /* ty=Tensor[(9, 10, 5), bool] */;
  %660 = less(%658, %659) /* ty=Tensor[(9, 10, 5), bool] */;
  (%660,)
}

def @func_6576() -> (Tensor[(10, 3, 14), uint16],) {
  %661 = @func_3099() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %662 = %661.0;
  (%662,)
}

def @func_392(%var_381: Tensor[(12, 11, 7), float32], %var_388: Tensor[(12, 11, 7), float32]) -> (Tensor[(12, 11, 7), bool],) {
  %663 = cast(%var_381, dtype="float32") /* ty=Tensor[(12, 11, 7), float32] */;
  %664 = tan(%663) /* ty=Tensor[(12, 11, 7), float32] */;
  %665 = cast(%var_388, dtype="bool") /* ty=Tensor[(12, 11, 7), bool] */;
  %666 = shape_of(%664, dtype="int32") /* ty=Tensor[(3), int32] */;
  %667 = cast(%664, dtype="bool") /* ty=Tensor[(12, 11, 7), bool] */;
  %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %669 = greater_equal(%667, %668) /* ty=Tensor[(12, 11, 7), bool] */;
  (%669,)
}

def @func_5557() -> (Tensor[(10, 3, 14), uint16],) {
  %670 = @func_4085() /* ty=Tensor[(10, 3, 14), uint16] */;
  (%670,)
}

def @func_3479(%var_3453: Tensor[(3120), uint8]) -> (Tensor[(572), uint32], Tensor[(3120), uint8], Tensor[(10, 3, 14), bool], Tensor[(10, 3, 14), uint64]) {
  %671 = cast(%var_3453, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
  %672 = reshape(%671, newshape=[3120]) /* ty=Tensor[(3120), uint8] */;
  %673 = @func_3015(%672) /* ty=(Tensor[(13, 15, 5), bool], Tensor[(572), uint32], Tensor[(10, 3, 14), uint64], Tensor[(11, 52), float32], Tensor[(12, 11, 7), bool], Tensor[(3120), uint8], Tensor[(936), float32]) */;
  %674 = @func_2681() /* ty=Tensor[(10, 3, 14), uint16] */;
  %675 = cast(%674, dtype="float32") /* ty=Tensor[(10, 3, 14), float32] */;
  %676 = tan(%675) /* ty=Tensor[(10, 3, 14), float32] */;
  %677 = cast(%676, dtype="uint16") /* ty=Tensor[(10, 3, 14), uint16] */;
  %678 = cast(%676, dtype="uint16") /* ty=Tensor[(10, 3, 14), uint16] */;
  %679 = reshape(%677, newshape=[10, 3, 14]) /* ty=Tensor[(10, 3, 14), uint16] */;
  %680 = reshape(%678, newshape=[10, 3, 14]) /* ty=Tensor[(10, 3, 14), uint16] */;
  %681 = @func_3235(%679, %680) /* ty=(Tensor[(10, 3, 14), bool], Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), bool]) */;
  %682 = cast(%674, dtype="uint64") /* ty=Tensor[(10, 3, 14), uint64] */;
  %683 = shape_of(%676, dtype="int32") /* ty=Tensor[(3), int32] */;
  %684 = cast(%676, dtype="uint64") /* ty=Tensor[(10, 3, 14), uint64] */;
  %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %686 = %673.1;
  %687 = %681.0;
  %688 = right_shift(%684, %685) /* ty=Tensor[(10, 3, 14), uint64] */;
  (%686, %var_3453, %687, %688)
}

def @func_4085() -> Tensor[(10, 3, 14), uint16] {
  @func_3162() /* ty=Tensor[(10, 3, 14), uint16] */
}

def @func_2853() -> Tensor[(10, 3, 14), uint16] {
  @func_2681() /* ty=Tensor[(10, 3, 14), uint16] */
}

def @func_3235(%var_3168: Tensor[(10, 3, 14), uint16], %var_3229: Tensor[(10, 3, 14), uint16]) -> (Tensor[(10, 3, 14), bool], Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), bool]) {
  %689 = @func_2932() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %690 = %689.0;
  %691 = cast(%var_3168, dtype="bool") /* ty=Tensor[(10, 3, 14), bool] */;
  %692 = shape_of(%690, dtype="int32") /* ty=Tensor[(3), int32] */;
  %693 = cast(%690, dtype="bool") /* ty=Tensor[(10, 3, 14), bool] */;
  %694 = dyn.reshape(%691, %692, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %695 = cast(%var_3168, dtype="uint8") /* ty=Tensor[(10, 3, 14), uint8] */;
  %696 = shape_of(%690, dtype="int32") /* ty=Tensor[(3), int32] */;
  %697 = cast(%690, dtype="uint8") /* ty=Tensor[(10, 3, 14), uint8] */;
  %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %699 = bitwise_or(%697, %698) /* ty=Tensor[(10, 3, 14), uint8] */;
  %700 = cast(meta[relay.Constant][40] /* ty=Tensor[(10, 3, 14), uint8] */, dtype="uint16") /* ty=Tensor[(10, 3, 14), uint16] */;
  %701 = shape_of(%699, dtype="int32") /* ty=Tensor[(3), int32] */;
  %702 = cast(%699, dtype="uint16") /* ty=Tensor[(10, 3, 14), uint16] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %704 = bitwise_and(%702, %703) /* ty=Tensor[(10, 3, 14), uint16] */;
  %705 = cast(%var_3229, dtype="bool") /* ty=Tensor[(10, 3, 14), bool] */;
  %706 = shape_of(%704, dtype="int32") /* ty=Tensor[(3), int32] */;
  %707 = cast(%704, dtype="bool") /* ty=Tensor[(10, 3, 14), bool] */;
  %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %709 = logical_and(%693, %694) /* ty=Tensor[(10, 3, 14), bool] */;
  %710 = @func_3162() /* ty=Tensor[(10, 3, 14), uint16] */;
  %711 = @func_2853() /* ty=Tensor[(10, 3, 14), uint16] */;
  %712 = greater_equal(%707, %708) /* ty=Tensor[(10, 3, 14), bool] */;
  (%709, %710, %711, %712)
}

def @func_6409(%var_6385: Tensor[(10, 1, 11), float64], %var_6397: Tensor[(10, 12, 11), float64]) -> (Tensor[(10, 12, 11), float32],) {
  %713 = cast(%var_6385, dtype="float64") /* ty=Tensor[(10, 1, 11), float64] */;
  %714 = atanh(%713) /* ty=Tensor[(10, 1, 11), float64] */;
  %715 = cast(%714, dtype="float32") /* ty=Tensor[(10, 1, 11), float32] */;
  %716 = cast(%var_6397, dtype="float32") /* ty=Tensor[(10, 12, 11), float32] */;
  %717 = floor_divide(%715, %716) /* ty=Tensor[(10, 12, 11), float32] */;
  (%717,)
}

def @func_4250() -> (Tensor[(10, 3, 14), uint16],) {
  %718 = @func_3858() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %719 = %718.0;
  (%719,)
}

def @func_4575() -> Tensor[(10, 3, 14), float32] {
  %720 = @func_3319() /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), float32]) */;
  %720.1
}

def @func_929(%var_919: int8) -> (Tensor[(13, 15, 5), bool], Tensor[(13, 15, 5), float32]) {
  %721 = cast(%var_919, dtype="bool") /* ty=bool */;
  %722 = cast(meta[relay.Constant][41] /* ty=Tensor[(13, 15, 5), int8] */, dtype="bool") /* ty=Tensor[(13, 15, 5), bool] */;
  %723 = cast(meta[relay.Constant][41] /* ty=Tensor[(13, 15, 5), int8] */, dtype="float32") /* ty=Tensor[(13, 15, 5), float32] */;
  %724 = equal(%721, %722) /* ty=Tensor[(13, 15, 5), bool] */;
  %725 = sqrt(%723) /* ty=Tensor[(13, 15, 5), float32] */;
  (%724, %725)
}

def @func_5902() -> (Tensor[(10, 3, 14), uint16],) {
  %726 = @func_4085() /* ty=Tensor[(10, 3, 14), uint16] */;
  (%726,)
}

def @func_6260() -> Tensor[(10, 3, 14), uint16] {
  @func_4661() /* ty=Tensor[(10, 3, 14), uint16] */
}

def @func_3162() -> Tensor[(10, 3, 14), uint16] {
  %727 = @func_3099() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %727.0
}

def @func_2548(%var_2532: Tensor[(16, 14, 4), float32]) -> Tensor[(16, 14, 4), float32] {
  %728 = cast(%var_2532, dtype="float32") /* ty=Tensor[(16, 14, 4), float32] */;
  %729 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(16, 14, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %730 = cast(meta[relay.Constant][42] /* ty=Tensor[(16, 14, 4), float32] */, dtype="float32") /* ty=Tensor[(16, 14, 4), float32] */;
  %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%730, %731) /* ty=Tensor[(16, 14, 4), float32] */
}

def @func_6169(%var_6134: Tensor[(8, 15, 9), uint64], %var_6135: Tensor[(8, 15, 9), uint64]) -> (Tensor[(8, 15, 9), bool], Tensor[(10, 3, 14), uint16], Tensor[(924), float32], Tensor[(286, 2), int8], Tensor[(8, 15, 9), uint64], Tensor[(10, 3, 14), uint16]) {
  %732 = cast(%var_6135, dtype="bool") /* ty=Tensor[(8, 15, 9), bool] */;
  %733 = shape_of(%var_6134, dtype="int32") /* ty=Tensor[(3), int32] */;
  %734 = cast(%var_6134, dtype="bool") /* ty=Tensor[(8, 15, 9), bool] */;
  %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %736 = @func_3858() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %737 = cast(meta[relay.Constant][43] /* ty=Tensor[(286, 2), int8] */, dtype="int8") /* ty=Tensor[(286, 2), int8] */;
  %738 = cast(meta[relay.Constant][43] /* ty=Tensor[(286, 2), int8] */, dtype="int8") /* ty=Tensor[(286, 2), int8] */;
  %739 = reshape(%737, newshape=[4, 13, 11]) /* ty=Tensor[(4, 13, 11), int8] */;
  %740 = reshape(%738, newshape=[4, 13, 11]) /* ty=Tensor[(4, 13, 11), int8] */;
  %741 = @func_733(%739, %740) /* ty=(Tensor[(4, 13, 11), int8], Tensor[(4, 13, 11), int64], Tensor[(8, 13, 9), float32], Tensor[(924), float32]) */;
  %742 = cast(%var_6134, dtype="uint64") /* ty=Tensor[(8, 15, 9), uint64] */;
  %743 = shape_of(%var_6135, dtype="int32") /* ty=Tensor[(3), int32] */;
  %744 = cast(%var_6135, dtype="uint64") /* ty=Tensor[(8, 15, 9), uint64] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %746 = %736.0;
  %747 = cast(%746, dtype="uint16") /* ty=Tensor[(10, 3, 14), uint16] */;
  %748 = cast(%746, dtype="uint16") /* ty=Tensor[(10, 3, 14), uint16] */;
  %749 = reshape(%747, newshape=[10, 3, 14]) /* ty=Tensor[(10, 3, 14), uint16] */;
  %750 = reshape(%748, newshape=[10, 3, 14]) /* ty=Tensor[(10, 3, 14), uint16] */;
  %751 = @func_3235(%749, %750) /* ty=(Tensor[(10, 3, 14), bool], Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), bool]) */;
  %752 = less_equal(%734, %735) /* ty=Tensor[(8, 15, 9), bool] */;
  %753 = %741.3;
  %754 = bitwise_or(%744, %745) /* ty=Tensor[(8, 15, 9), uint64] */;
  %755 = %751.2;
  (%752, %746, %753, meta[relay.Constant][43] /* ty=Tensor[(286, 2), int8] */, %754, %755)
}

def @func_6216() -> (Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16]) {
  %756 = @func_6036() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %757 = @func_5446() /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint32]) */;
  %758 = %756.0;
  %759 = %757.0;
  (%758, %759)
}

def @func_648(%var_628: Tensor[(924), float32]) -> (Tensor[(12, 11, 7), bool], Tensor[(12, 11, 7), bool], Tensor[(8, 13, 9), float32]) {
  %760 = cast(%var_628, dtype="float32") /* ty=Tensor[(924), float32] */;
  %761 = cast(%var_628, dtype="float32") /* ty=Tensor[(924), float32] */;
  %762 = reshape(%760, newshape=[12, 11, 7]) /* ty=Tensor[(12, 11, 7), float32] */;
  %763 = reshape(%761, newshape=[12, 11, 7]) /* ty=Tensor[(12, 11, 7), float32] */;
  %764 = @func_392(%762, %763) /* ty=(Tensor[(12, 11, 7), bool],) */;
  %765 = %764.0;
  %766 = cast(%var_628, dtype="bool") /* ty=Tensor[(924), bool] */;
  %767 = shape_of(%765, dtype="int32") /* ty=Tensor[(3), int32] */;
  %768 = cast(%765, dtype="bool") /* ty=Tensor[(12, 11, 7), bool] */;
  %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %770 = cast(%var_628, dtype="float32") /* ty=Tensor[(924), float32] */;
  %771 = cast(%var_628, dtype="float32") /* ty=Tensor[(924), float32] */;
  %772 = reshape(%770, newshape=[12, 11, 7]) /* ty=Tensor[(12, 11, 7), float32] */;
  %773 = reshape(%771, newshape=[12, 11, 7]) /* ty=Tensor[(12, 11, 7), float32] */;
  %774 = @func_392(%772, %773) /* ty=(Tensor[(12, 11, 7), bool],) */;
  %775 = cast(meta[relay.Constant][45] /* ty=Tensor[(8, 13, 9), float32] */, dtype="float32") /* ty=Tensor[(8, 13, 9), float32] */;
  %776 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(8, 13, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %777 = cast(meta[relay.Constant][44] /* ty=Tensor[(8, 13, 9), float32] */, dtype="float32") /* ty=Tensor[(8, 13, 9), float32] */;
  %778 = dyn.reshape(%775, %776, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %779 = divide(%777, %778) /* ty=Tensor[(8, 13, 9), float32] */;
  %780 = cast(%779, dtype="float32") /* ty=Tensor[(8, 13, 9), float32] */;
  %781 = not_equal(%768, %769) /* ty=Tensor[(12, 11, 7), bool] */;
  %782 = %774.0;
  %783 = erf(%780) /* ty=Tensor[(8, 13, 9), float32] */;
  (%781, %782, %783)
}

def @func_1124(%var_1121: Tensor[(8, 1, 9), float32]) -> Tensor[(8, 1, 9), float32] {
  %784 = cast(%var_1121, dtype="float32") /* ty=Tensor[(8, 1, 9), float32] */;
  sinh(%784) /* ty=Tensor[(8, 1, 9), float32] */
}

def @func_4728(%var_4666: Tensor[(3, 14, 2), float64], %var_4667: Tensor[(3, 14, 2), float64]) -> (Tensor[(3, 14, 2), float64], Tensor[(936), float32], Tensor[(924), float32], Tensor[(1, 200), int64], Tensor[(924), float32]) {
  %785 = cast(%var_4667, dtype="float64") /* ty=Tensor[(3, 14, 2), float64] */;
  %786 = shape_of(%var_4666, dtype="int32") /* ty=Tensor[(3), int32] */;
  %787 = cast(%var_4666, dtype="float64") /* ty=Tensor[(3, 14, 2), float64] */;
  %788 = dyn.reshape(%785, %786, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %789 = @func_3816() /* ty=(Tensor[(936), float32],) */;
  %790 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 200), int64] */, dtype="int64") /* ty=Tensor[(1, 200), int64] */;
  %791 = cast(meta[relay.Constant][47] /* ty=Tensor[(924), float32] */, dtype="float32") /* ty=Tensor[(924), float32] */;
  %792 = reshape(%790, newshape=[10, 5, 4]) /* ty=Tensor[(10, 5, 4), int64] */;
  %793 = reshape(%791, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %794 = @func_1409(%792, %793) /* ty=(Tensor[(10, 5, 4), int64], Tensor[(12, 11, 7), bool], Tensor[(924), float32]) */;
  %795 = floor_mod(%787, %788) /* ty=Tensor[(3, 14, 2), float64] */;
  %796 = %789.0;
  %797 = %794.2;
  (%795, %796, %797, meta[relay.Constant][46] /* ty=Tensor[(1, 200), int64] */, meta[relay.Constant][47] /* ty=Tensor[(924), float32] */)
}

def @func_3319() -> (Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), float32]) {
  %798 = @func_3162() /* ty=Tensor[(10, 3, 14), uint16] */;
  %799 = cast(%798, dtype="float64") /* ty=Tensor[(10, 3, 14), float64] */;
  %800 = atan(%799) /* ty=Tensor[(10, 3, 14), float64] */;
  %801 = cast(%798, dtype="float64") /* ty=Tensor[(10, 3, 14), float64] */;
  %802 = acosh(%801) /* ty=Tensor[(10, 3, 14), float64] */;
  %803 = cast(%802, dtype="uint16") /* ty=Tensor[(10, 3, 14), uint16] */;
  %804 = shape_of(%800, dtype="int32") /* ty=Tensor[(3), int32] */;
  %805 = cast(%800, dtype="uint16") /* ty=Tensor[(10, 3, 14), uint16] */;
  %806 = dyn.reshape(%803, %804, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %807 = cast(%798, dtype="float32") /* ty=Tensor[(10, 3, 14), float32] */;
  %808 = left_shift(%805, %806) /* ty=Tensor[(10, 3, 14), uint16] */;
  %809 = cos(%807) /* ty=Tensor[(10, 3, 14), float32] */;
  (%808, %809)
}

def @func_5010(%var_4992: bool, %var_4993: Tensor[(14, 3, 10), bool]) -> Tensor[(14, 3, 10), uint64] {
  %810 = cast(%var_4992, dtype="bool") /* ty=bool */;
  %811 = cast(%var_4993, dtype="bool") /* ty=Tensor[(14, 3, 10), bool] */;
  %812 = logical_or(%810, %811) /* ty=Tensor[(14, 3, 10), bool] */;
  %813 = cast(%812, dtype="uint64") /* ty=Tensor[(14, 3, 10), uint64] */;
  %814 = cast(%var_4992, dtype="uint64") /* ty=uint64 */;
  bitwise_or(%813, %814) /* ty=Tensor[(14, 3, 10), uint64] */
}

def @func_4116() -> (Tensor[(10, 3, 14), uint16],) {
  %815 = @func_4085() /* ty=Tensor[(10, 3, 14), uint16] */;
  (%815,)
}

def @func_3099() -> (Tensor[(10, 3, 14), uint16],) {
  %816 = @func_2681() /* ty=Tensor[(10, 3, 14), uint16] */;
  (%816,)
}

def @func_5355() -> Tensor[(10, 3, 14), uint16] {
  %817 = @func_3410() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %817.0
}

def @func_2681() -> Tensor[(10, 3, 14), uint16] {
  %818 = cast(meta[relay.Constant][48] /* ty=Tensor[(10, 3, 14), float64] */, dtype="float64") /* ty=Tensor[(10, 3, 14), float64] */;
  %819 = exp(%818) /* ty=Tensor[(10, 3, 14), float64] */;
  %820 = cast(%819, dtype="float64") /* ty=Tensor[(10, 3, 14), float64] */;
  %821 = acos(%820) /* ty=Tensor[(10, 3, 14), float64] */;
  %822 = cast(%819, dtype="uint16") /* ty=Tensor[(10, 3, 14), uint16] */;
  %823 = shape_of(%821, dtype="int32") /* ty=Tensor[(3), int32] */;
  %824 = cast(%821, dtype="uint16") /* ty=Tensor[(10, 3, 14), uint16] */;
  %825 = dyn.reshape(%822, %823, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  logical_xor(%824, %825) /* ty=Tensor[(10, 3, 14), uint16] */
}

def @func_6878(%var_6873: Tensor[(72), float64]) -> (Tensor[(924), float32], Tensor[(8, 13, 9), int32], Tensor[(72), float64], Tensor[(936), float32]) {
  %826 = @func_6543() /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(12, 11, 7), bool], Tensor[(924), float32]) */;
  %827 = cast(%var_6873, dtype="float64") /* ty=Tensor[(72), float64] */;
  %828 = cast(%var_6873, dtype="float64") /* ty=Tensor[(72), float64] */;
  %829 = cast(meta[relay.Constant][49] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
  %830 = reshape(%827, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), float64] */;
  %831 = reshape(%828, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), float64] */;
  %832 = reshape(%829, newshape=[8, 13, 9]) /* ty=Tensor[(8, 13, 9), float32] */;
  %833 = @func_811(%830, %831, %832) /* ty=(Tensor[(4, 2, 9), float64], Tensor[(12, 11, 7), bool], Tensor[(924), float32], Tensor[(572), float64], Tensor[(8, 13, 9), int32], Tensor[(4, 13, 11), int64]) */;
  %834 = %826.2;
  %835 = %833.4;
  (%834, %835, %var_6873, meta[relay.Constant][49] /* ty=Tensor[(936), float32] */)
}

def @func_6797(%var_6763: Tensor[(200), int64]) -> (Tensor[(10, 3, 14), uint16], Tensor[(924), float32], Tensor[(200), int64], Tensor[(924), float32], Tensor[(1, 936), float32], Tensor[(936), float32], Tensor[(10, 3, 14), uint16]) {
  %836 = @func_5902() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %837 = cast(%var_6763, dtype="int64") /* ty=Tensor[(200), int64] */;
  %838 = cast(meta[relay.Constant][50] /* ty=Tensor[(924), float32] */, dtype="float32") /* ty=Tensor[(924), float32] */;
  %839 = reshape(%837, newshape=[10, 5, 4]) /* ty=Tensor[(10, 5, 4), int64] */;
  %840 = reshape(%838, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %841 = @func_1409(%839, %840) /* ty=(Tensor[(10, 5, 4), int64], Tensor[(12, 11, 7), bool], Tensor[(924), float32]) */;
  %842 = cast(meta[relay.Constant][51] /* ty=Tensor[(1, 936), float32] */, dtype="float32") /* ty=Tensor[(1, 936), float32] */;
  %843 = reshape(%842, newshape=[936]) /* ty=Tensor[(936), float32] */;
  %844 = @func_5085(%843) /* ty=Tensor[(936), int64] */;
  %845 = cast(%844, dtype="float32") /* ty=Tensor[(936), float32] */;
  %846 = %836.0;
  %847 = %841.2;
  %848 = log10(%845) /* ty=Tensor[(936), float32] */;
  %849 = @func_5461() /* ty=Tensor[(10, 3, 14), uint16] */;
  (%846, %847, %var_6763, meta[relay.Constant][50] /* ty=Tensor[(924), float32] */, meta[relay.Constant][51] /* ty=Tensor[(1, 936), float32] */, %848, %849)
}

def @func_6543() -> (Tensor[(10, 3, 14), uint16], Tensor[(12, 11, 7), bool], Tensor[(924), float32]) {
  %850 = @func_6260() /* ty=Tensor[(10, 3, 14), uint16] */;
  %851 = cast(%850, dtype="float32") /* ty=Tensor[(10, 3, 14), float32] */;
  %852 = cast(meta[relay.Constant][52] /* ty=Tensor[(924), float32] */, dtype="float32") /* ty=Tensor[(924), float32] */;
  %853 = reshape(%851, newshape=[10, 3, 14]) /* ty=Tensor[(10, 3, 14), float32] */;
  %854 = reshape(%852, newshape=[462, 2]) /* ty=Tensor[(462, 2), float32] */;
  %855 = @func_5527(%853, %854) /* ty=(Tensor[(10, 3, 14), int16], Tensor[(10, 3, 14), float64], Tensor[(10, 3, 14), uint16], Tensor[(12, 11, 7), bool], Tensor[(462, 2), float32], Tensor[(10, 3, 14), uint16]) */;
  %856 = %855.3;
  (%850, %856, meta[relay.Constant][52] /* ty=Tensor[(924), float32] */)
}

def @func_4516() -> (Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16], Tensor[(896), bool], Tensor[(10, 3, 14), bool]) {
  %857 = @func_4116() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %858 = @func_2932() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %859 = cast(meta[relay.Constant][53] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %860 = reshape(%859, newshape=[]) /* ty=int8 */;
  %861 = @func_4361(%860) /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16], Tensor[(13, 15, 5), float32], int8, Tensor[(16, 14, 4), float32], Tensor[(896), float32]) */;
  %862 = %861.5;
  %863 = cast(%862, dtype="bool") /* ty=Tensor[(896), bool] */;
  %864 = cast(meta[relay.Constant][53] /* ty=int8 */, dtype="bool") /* ty=bool */;
  %865 = @func_4250() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %866 = %865.0;
  %867 = @func_3392() /* ty=Tensor[(10, 3, 14), uint16] */;
  %868 = cast(%867, dtype="bool") /* ty=Tensor[(10, 3, 14), bool] */;
  %869 = shape_of(%866, dtype="int32") /* ty=Tensor[(3), int32] */;
  %870 = cast(%866, dtype="bool") /* ty=Tensor[(10, 3, 14), bool] */;
  %871 = dyn.reshape(%868, %869, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %872 = %857.0;
  %873 = %858.0;
  %874 = equal(%863, %864) /* ty=Tensor[(896), bool] */;
  %875 = less_equal(%870, %871) /* ty=Tensor[(10, 3, 14), bool] */;
  (%872, %873, %874, %875)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2933() -> (Tensor[(10, 3, 14), uint16],) {
  %1 = fn () -> (Tensor[(10, 3, 14), uint16],) {
    %0 = @func_2681() /* ty=Tensor[(10, 3, 14), uint16] */;
    (%0,)
  };
  %1() /* ty=(Tensor[(10, 3, 14), uint16],) */
}

def @func_3730() -> Tensor[(10, 3, 14), uint16] {
  %3 = fn () -> Tensor[(10, 3, 14), uint16] {
    %2 = @func_3410() /* ty=(Tensor[(10, 3, 14), uint16],) */;
    %2.0
  };
  %3() /* ty=Tensor[(10, 3, 14), uint16] */
}

def @func_5904() -> (Tensor[(10, 3, 14), uint16],) {
  @func_5902() /* ty=(Tensor[(10, 3, 14), uint16],) */
}

def @func_6799(%var_6798: Tensor[(200), int64]) -> (Tensor[(10, 3, 14), uint16], Tensor[(924), float32], Tensor[(200), int64], Tensor[(924), float32], Tensor[(1, 936), float32], Tensor[(936), float32], Tensor[(10, 3, 14), uint16]) {
  %18 = fn (%var_6763: Tensor[(200), int64]) -> (Tensor[(10, 3, 14), uint16], Tensor[(924), float32], Tensor[(200), int64], Tensor[(924), float32], Tensor[(1, 936), float32], Tensor[(936), float32], Tensor[(10, 3, 14), uint16]) {
    %4 = @func_5902() /* ty=(Tensor[(10, 3, 14), uint16],) */;
    %5 = cast(%var_6763, dtype="int64") /* ty=Tensor[(200), int64] */;
    %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(924), float32] */, dtype="float32") /* ty=Tensor[(924), float32] */;
    %7 = reshape(%5, newshape=[10, 5, 4]) /* ty=Tensor[(10, 5, 4), int64] */;
    %8 = reshape(%6, newshape=[924]) /* ty=Tensor[(924), float32] */;
    %9 = @func_1409(%7, %8) /* ty=(Tensor[(10, 5, 4), int64], Tensor[(12, 11, 7), bool], Tensor[(924), float32]) */;
    %10 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 936), float32] */, dtype="float32") /* ty=Tensor[(1, 936), float32] */;
    %11 = reshape(%10, newshape=[936]) /* ty=Tensor[(936), float32] */;
    %12 = @func_5085(%11) /* ty=Tensor[(936), int64] */;
    %13 = cast(%12, dtype="float32") /* ty=Tensor[(936), float32] */;
    %14 = %4.0;
    %15 = %9.2;
    %16 = log10(%13) /* ty=Tensor[(936), float32] */;
    %17 = @func_5461() /* ty=Tensor[(10, 3, 14), uint16] */;
    (%14, %15, %var_6763, meta[relay.Constant][0] /* ty=Tensor[(924), float32] */, meta[relay.Constant][1] /* ty=Tensor[(1, 936), float32] */, %16, %17)
  };
  %18(%var_6798) /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(924), float32], Tensor[(200), int64], Tensor[(924), float32], Tensor[(1, 936), float32], Tensor[(936), float32], Tensor[(10, 3, 14), uint16]) */
}

def @func_4856(%var_4854: Tensor[(16, 2, 15), uint8], %var_4855: Tensor[(420), uint16]) -> (Tensor[(16, 2, 15), bool], Tensor[(10, 3, 14), bool], Tensor[(420), uint16], Tensor[(16, 2, 15), float64], Tensor[(16, 2, 15), float32], Tensor[(10, 3, 14), uint16], Tensor[(16, 2, 15), float32]) {
  %48 = fn (%var_4806: Tensor[(16, 2, 15), uint8], %var_4824: Tensor[(420), uint16]) -> (Tensor[(16, 2, 15), bool], Tensor[(10, 3, 14), bool], Tensor[(420), uint16], Tensor[(16, 2, 15), float64], Tensor[(16, 2, 15), float32], Tensor[(10, 3, 14), uint16], Tensor[(16, 2, 15), float32]) {
    %19 = cast(%var_4806, dtype="uint8") /* ty=Tensor[(16, 2, 15), uint8] */;
    %20 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(16, 2, 15), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %21 = cast(meta[relay.Constant][2] /* ty=Tensor[(16, 2, 15), uint8] */, dtype="uint8") /* ty=Tensor[(16, 2, 15), uint8] */;
    %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %23 = bitwise_and(%21, %22) /* ty=Tensor[(16, 2, 15), uint8] */;
    %24 = cast(%23, dtype="bool") /* ty=Tensor[(16, 2, 15), bool] */;
    %25 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(16, 2, 15), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %26 = cast(meta[relay.Constant][2] /* ty=Tensor[(16, 2, 15), uint8] */, dtype="bool") /* ty=Tensor[(16, 2, 15), bool] */;
    %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %28 = cast(%var_4824, dtype="uint16") /* ty=Tensor[(420), uint16] */;
    %29 = cast(%var_4824, dtype="uint16") /* ty=Tensor[(420), uint16] */;
    %30 = reshape(%28, newshape=[10, 3, 14]) /* ty=Tensor[(10, 3, 14), uint16] */;
    %31 = reshape(%29, newshape=[10, 3, 14]) /* ty=Tensor[(10, 3, 14), uint16] */;
    %32 = @func_3235(%30, %31) /* ty=(Tensor[(10, 3, 14), bool], Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), bool]) */;
    %33 = cast(%23, dtype="float32") /* ty=Tensor[(16, 2, 15), float32] */;
    %34 = log2(%33) /* ty=Tensor[(16, 2, 15), float32] */;
    %35 = cast(%var_4806, dtype="float64") /* ty=Tensor[(16, 2, 15), float64] */;
    %36 = shape_of(%34, dtype="int32") /* ty=Tensor[(3), int32] */;
    %37 = cast(%34, dtype="float64") /* ty=Tensor[(16, 2, 15), float64] */;
    %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %39 = cast(%34, dtype="float32") /* ty=Tensor[(16, 2, 15), float32] */;
    %40 = @func_3410() /* ty=(Tensor[(10, 3, 14), uint16],) */;
    %41 = cast(%var_4806, dtype="float32") /* ty=Tensor[(16, 2, 15), float32] */;
    %42 = logical_or(%26, %27) /* ty=Tensor[(16, 2, 15), bool] */;
    %43 = %32.0;
    %44 = floor_mod(%37, %38) /* ty=Tensor[(16, 2, 15), float64] */;
    %45 = erf(%39) /* ty=Tensor[(16, 2, 15), float32] */;
    %46 = %40.0;
    %47 = sinh(%41) /* ty=Tensor[(16, 2, 15), float32] */;
    (%42, %43, %var_4824, %44, %45, %46, %47)
  };
  %48(%var_4854, %var_4855) /* ty=(Tensor[(16, 2, 15), bool], Tensor[(10, 3, 14), bool], Tensor[(420), uint16], Tensor[(16, 2, 15), float64], Tensor[(16, 2, 15), float32], Tensor[(10, 3, 14), uint16], Tensor[(16, 2, 15), float32]) */
}

def @func_3858() -> (Tensor[(10, 3, 14), uint16],) {
  %49 = @func_3392() /* ty=Tensor[(10, 3, 14), uint16] */;
  (%49,)
}

def @func_3793(%var_3789: Tensor[(4, 15, 5), float64]) -> (Tensor[(4, 15, 5), float64],) {
  %50 = cast(%var_3789, dtype="float64") /* ty=Tensor[(4, 15, 5), float64] */;
  %51 = exp(%50) /* ty=Tensor[(4, 15, 5), float64] */;
  (%51,)
}

def @func_2683() -> Tensor[(10, 3, 14), uint16] {
  @func_2681() /* ty=Tensor[(10, 3, 14), uint16] */
}

def @func_3769() -> (Tensor[(10, 3, 14), uint16], Tensor[(15, 16, 13), uint8], Tensor[(3120), uint8], Tensor[(936), float32]) {
  %52 = cast(meta[relay.Constant][3] /* ty=Tensor[(3120), uint8] */, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
  %53 = cast(meta[relay.Constant][3] /* ty=Tensor[(3120), uint8] */, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
  %54 = cast(meta[relay.Constant][4] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
  %55 = reshape(%52, newshape=[15, 16, 13]) /* ty=Tensor[(15, 16, 13), uint8] */;
  %56 = reshape(%53, newshape=[15, 16, 13]) /* ty=Tensor[(15, 16, 13), uint8] */;
  %57 = reshape(%54, newshape=[8, 13, 9]) /* ty=Tensor[(8, 13, 9), float32] */;
  %58 = @func_1649(%55, %56, %57) /* ty=(Tensor[(15, 16, 13), uint8], Tensor[(924), float32], Tensor[(8, 13, 9), float32], Tensor[(8, 13, 9), int8], Tensor[(12, 11, 7), bool], Tensor[(36, 2), float64], Tensor[(8, 1, 9), float32]) */;
  %59 = @func_3729() /* ty=Tensor[(10, 3, 14), uint16] */;
  %60 = %58.0;
  (%59, %60, meta[relay.Constant][3] /* ty=Tensor[(3120), uint8] */, meta[relay.Constant][4] /* ty=Tensor[(936), float32] */)
}

def @func_6201(%var_6199: Tensor[(3120), uint8]) -> (Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), bool], Tensor[(572), uint32], Tensor[(3120), int8]) {
  @func_6198(%var_6199) /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), bool], Tensor[(572), uint32], Tensor[(3120), int8]) */
}

def @func_3239(%var_3237: Tensor[(10, 3, 14), uint16], %var_3238: Tensor[(10, 3, 14), uint16]) -> (Tensor[(10, 3, 14), bool], Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), bool]) {
  @func_3235(%var_3237, %var_3238) /* ty=(Tensor[(10, 3, 14), bool], Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), bool]) */
}

def @func_4989() -> Tensor[(10, 3, 14), uint16] {
  @func_4987() /* ty=Tensor[(10, 3, 14), uint16] */
}

def @func_5010(%var_4992: bool, %var_4993: Tensor[(14, 3, 10), bool]) -> Tensor[(14, 3, 10), uint64] {
  %61 = cast(%var_4992, dtype="bool") /* ty=bool */;
  %62 = cast(%var_4993, dtype="bool") /* ty=Tensor[(14, 3, 10), bool] */;
  %63 = logical_or(%61, %62) /* ty=Tensor[(14, 3, 10), bool] */;
  %64 = cast(%63, dtype="uint64") /* ty=Tensor[(14, 3, 10), uint64] */;
  %65 = cast(%var_4992, dtype="uint64") /* ty=uint64 */;
  bitwise_or(%64, %65) /* ty=Tensor[(14, 3, 10), uint64] */
}

def @func_4283(%var_4282: Tensor[(72), float64]) -> (Tensor[(10, 3, 14), uint16], Tensor[(72), float64], Tensor[(12, 78), float32], Tensor[(12, 11, 7), float64]) {
  %78 = fn (%var_4267: Tensor[(72), float64]) -> (Tensor[(10, 3, 14), uint16], Tensor[(72), float64], Tensor[(12, 78), float32], Tensor[(12, 11, 7), float64]) {
    %66 = @func_2932() /* ty=(Tensor[(10, 3, 14), uint16],) */;
    %67 = cast(%var_4267, dtype="float64") /* ty=Tensor[(72), float64] */;
    %68 = cast(%var_4267, dtype="float64") /* ty=Tensor[(72), float64] */;
    %69 = cast(meta[relay.Constant][5] /* ty=Tensor[(12, 78), float32] */, dtype="float32") /* ty=Tensor[(12, 78), float32] */;
    %70 = reshape(%67, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), float64] */;
    %71 = reshape(%68, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), float64] */;
    %72 = reshape(%69, newshape=[8, 13, 9]) /* ty=Tensor[(8, 13, 9), float32] */;
    %73 = @func_811(%70, %71, %72) /* ty=(Tensor[(4, 2, 9), float64], Tensor[(12, 11, 7), bool], Tensor[(924), float32], Tensor[(572), float64], Tensor[(8, 13, 9), int32], Tensor[(4, 13, 11), int64]) */;
    %74 = %73.1;
    %75 = cast(%74, dtype="float64") /* ty=Tensor[(12, 11, 7), float64] */;
    %76 = %66.0;
    %77 = cos(%75) /* ty=Tensor[(12, 11, 7), float64] */;
    (%76, %var_4267, meta[relay.Constant][5] /* ty=Tensor[(12, 78), float32] */, %77)
  };
  %78(%var_4282) /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(72), float64], Tensor[(12, 78), float32], Tensor[(12, 11, 7), float64]) */
}

def @func_2803(%var_2781: Tensor[(200), int64], %var_2782: Tensor[(924), float32]) -> (Tensor[(10, 3, 14), uint16], Tensor[(10, 5, 4), int64], Tensor[(200), int64], Tensor[(924), float32], Tensor[(16, 14, 4), float32], Tensor[(1, 896), float32]) {
  %79 = cast(%var_2781, dtype="int64") /* ty=Tensor[(200), int64] */;
  %80 = cast(%var_2782, dtype="float32") /* ty=Tensor[(924), float32] */;
  %81 = reshape(%79, newshape=[10, 5, 4]) /* ty=Tensor[(10, 5, 4), int64] */;
  %82 = reshape(%80, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %83 = @func_1409(%81, %82) /* ty=(Tensor[(10, 5, 4), int64], Tensor[(12, 11, 7), bool], Tensor[(924), float32]) */;
  %84 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 896), float32] */, dtype="float32") /* ty=Tensor[(1, 896), float32] */;
  %85 = reshape(%84, newshape=[16, 14, 4]) /* ty=Tensor[(16, 14, 4), float32] */;
  %86 = @func_2681() /* ty=Tensor[(10, 3, 14), uint16] */;
  %87 = %83.0;
  %88 = @func_2548(%85) /* ty=Tensor[(16, 14, 4), float32] */;
  (%86, %87, %var_2781, %var_2782, %88, meta[relay.Constant][6] /* ty=Tensor[(1, 896), float32] */)
}

def @main(%var_6927: Tensor[(1080), uint64]) -> (Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16], Tensor[(286, 2), int8], Tensor[(1080), uint8]) {
  %89 = cast(meta[relay.Constant][7] /* ty=Tensor[(1080), uint64] */, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %90 = cast(meta[relay.Constant][7] /* ty=Tensor[(1080), uint64] */, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %91 = reshape(%89, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %92 = reshape(%90, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %93 = @func_6172(%91, %92) /* ty=(Tensor[(8, 15, 9), bool], Tensor[(10, 3, 14), uint16], Tensor[(924), float32], Tensor[(286, 2), int8], Tensor[(8, 15, 9), uint64], Tensor[(10, 3, 14), uint16]) */;
  %94 = cast(%var_6927, dtype="uint8") /* ty=Tensor[(1080), uint8] */;
  %95 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(1080), uint64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %96 = cast(meta[relay.Constant][7] /* ty=Tensor[(1080), uint64] */, dtype="uint8") /* ty=Tensor[(1080), uint8] */;
  %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %98 = @func_6260() /* ty=Tensor[(10, 3, 14), uint16] */;
  %99 = @func_5685() /* ty=Tensor[(10, 3, 14), uint16] */;
  %100 = %93.3;
  %101 = left_shift(%96, %97) /* ty=Tensor[(1080), uint8] */;
  (%98, %99, %100, %101)
}

def @func_3479(%var_3453: Tensor[(3120), uint8]) -> (Tensor[(572), uint32], Tensor[(3120), uint8], Tensor[(10, 3, 14), bool], Tensor[(10, 3, 14), uint64]) {
  %102 = cast(%var_3453, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
  %103 = reshape(%102, newshape=[3120]) /* ty=Tensor[(3120), uint8] */;
  %104 = @func_3015(%103) /* ty=(Tensor[(13, 15, 5), bool], Tensor[(572), uint32], Tensor[(10, 3, 14), uint64], Tensor[(11, 52), float32], Tensor[(12, 11, 7), bool], Tensor[(3120), uint8], Tensor[(936), float32]) */;
  %105 = @func_2681() /* ty=Tensor[(10, 3, 14), uint16] */;
  %106 = cast(%105, dtype="float32") /* ty=Tensor[(10, 3, 14), float32] */;
  %107 = tan(%106) /* ty=Tensor[(10, 3, 14), float32] */;
  %108 = cast(%107, dtype="uint16") /* ty=Tensor[(10, 3, 14), uint16] */;
  %109 = cast(%107, dtype="uint16") /* ty=Tensor[(10, 3, 14), uint16] */;
  %110 = reshape(%108, newshape=[10, 3, 14]) /* ty=Tensor[(10, 3, 14), uint16] */;
  %111 = reshape(%109, newshape=[10, 3, 14]) /* ty=Tensor[(10, 3, 14), uint16] */;
  %112 = @func_3235(%110, %111) /* ty=(Tensor[(10, 3, 14), bool], Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), bool]) */;
  %113 = cast(%105, dtype="uint64") /* ty=Tensor[(10, 3, 14), uint64] */;
  %114 = shape_of(%107, dtype="int32") /* ty=Tensor[(3), int32] */;
  %115 = cast(%107, dtype="uint64") /* ty=Tensor[(10, 3, 14), uint64] */;
  %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %117 = %104.1;
  %118 = %112.0;
  %119 = right_shift(%115, %116) /* ty=Tensor[(10, 3, 14), uint64] */;
  (%117, %var_3453, %118, %119)
}

def @func_6543() -> (Tensor[(10, 3, 14), uint16], Tensor[(12, 11, 7), bool], Tensor[(924), float32]) {
  %120 = @func_6260() /* ty=Tensor[(10, 3, 14), uint16] */;
  %121 = cast(%120, dtype="float32") /* ty=Tensor[(10, 3, 14), float32] */;
  %122 = cast(meta[relay.Constant][8] /* ty=Tensor[(924), float32] */, dtype="float32") /* ty=Tensor[(924), float32] */;
  %123 = reshape(%121, newshape=[10, 3, 14]) /* ty=Tensor[(10, 3, 14), float32] */;
  %124 = reshape(%122, newshape=[462, 2]) /* ty=Tensor[(462, 2), float32] */;
  %125 = @func_5527(%123, %124) /* ty=(Tensor[(10, 3, 14), int16], Tensor[(10, 3, 14), float64], Tensor[(10, 3, 14), uint16], Tensor[(12, 11, 7), bool], Tensor[(462, 2), float32], Tensor[(10, 3, 14), uint16]) */;
  %126 = %125.3;
  (%120, %126, meta[relay.Constant][8] /* ty=Tensor[(924), float32] */)
}

def @func_3697(%var_3695: Tensor[(156, 20), uint8], %var_3696: Tensor[(154, 6), float32]) -> (Tensor[(4, 13, 11), int64], Tensor[(72), float64], Tensor[(936), float32], Tensor[(572), uint32], Tensor[(8, 13, 9), float32], Tensor[(156, 20), uint8], Tensor[(10, 3, 14), int16], Tensor[(10, 3, 14), bool], Tensor[(200), int64], Tensor[(5, 40), int64], Tensor[(154, 6), float32], Tensor[(10, 3, 14), float32], Tensor[(12, 11, 7), bool]) {
  %179 = fn (%var_3603: Tensor[(156, 20), uint8], %var_3655: Tensor[(154, 6), float32]) -> (Tensor[(4, 13, 11), int64], Tensor[(72), float64], Tensor[(936), float32], Tensor[(572), uint32], Tensor[(8, 13, 9), float32], Tensor[(156, 20), uint8], Tensor[(10, 3, 14), int16], Tensor[(10, 3, 14), bool], Tensor[(200), int64], Tensor[(5, 40), int64], Tensor[(154, 6), float32], Tensor[(10, 3, 14), float32], Tensor[(12, 11, 7), bool]) {
    %127 = cast(meta[relay.Constant][9] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
    %128 = cast(meta[relay.Constant][9] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
    %129 = cast(meta[relay.Constant][10] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
    %130 = reshape(%127, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), float64] */;
    %131 = reshape(%128, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), float64] */;
    %132 = reshape(%129, newshape=[8, 13, 9]) /* ty=Tensor[(8, 13, 9), float32] */;
    %133 = @func_811(%130, %131, %132) /* ty=(Tensor[(4, 2, 9), float64], Tensor[(12, 11, 7), bool], Tensor[(924), float32], Tensor[(572), float64], Tensor[(8, 13, 9), int32], Tensor[(4, 13, 11), int64]) */;
    %134 = %133.5;
    %135 = cast(%134, dtype="int8") /* ty=Tensor[(4, 13, 11), int8] */;
    %136 = reshape(%135, newshape=[572]) /* ty=Tensor[(572), int8] */;
    %137 = @func_2891(%136) /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(924), float32], Tensor[(572), uint32]) */;
    %138 = cast(%var_3603, dtype="uint8") /* ty=Tensor[(156, 20), uint8] */;
    %139 = cast(%var_3603, dtype="uint8") /* ty=Tensor[(156, 20), uint8] */;
    %140 = cast(meta[relay.Constant][10] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
    %141 = reshape(%138, newshape=[15, 16, 13]) /* ty=Tensor[(15, 16, 13), uint8] */;
    %142 = reshape(%139, newshape=[15, 16, 13]) /* ty=Tensor[(15, 16, 13), uint8] */;
    %143 = reshape(%140, newshape=[8, 13, 9]) /* ty=Tensor[(8, 13, 9), float32] */;
    %144 = @func_1649(%141, %142, %143) /* ty=(Tensor[(15, 16, 13), uint8], Tensor[(924), float32], Tensor[(8, 13, 9), float32], Tensor[(8, 13, 9), int8], Tensor[(12, 11, 7), bool], Tensor[(36, 2), float64], Tensor[(8, 1, 9), float32]) */;
    %145 = @func_3031() /* ty=(Tensor[(10, 3, 14), uint16],) */;
    %146 = %145.0;
    %147 = @func_3099() /* ty=(Tensor[(10, 3, 14), uint16],) */;
    %148 = %147.0;
    %149 = cast(%148, dtype="int16") /* ty=Tensor[(10, 3, 14), int16] */;
    %150 = shape_of(%146, dtype="int32") /* ty=Tensor[(3), int32] */;
    %151 = cast(%146, dtype="int16") /* ty=Tensor[(10, 3, 14), int16] */;
    %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %153 = cast(%var_3603, dtype="uint8") /* ty=Tensor[(156, 20), uint8] */;
    %154 = reshape(%153, newshape=[3120]) /* ty=Tensor[(3120), uint8] */;
    %155 = @func_3479(%154) /* ty=(Tensor[(572), uint32], Tensor[(3120), uint8], Tensor[(10, 3, 14), bool], Tensor[(10, 3, 14), uint64]) */;
    %156 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 40), int64] */, dtype="int64") /* ty=Tensor[(5, 40), int64] */;
    %157 = cast(%var_3655, dtype="float32") /* ty=Tensor[(154, 6), float32] */;
    %158 = reshape(%156, newshape=[200]) /* ty=Tensor[(200), int64] */;
    %159 = reshape(%157, newshape=[924]) /* ty=Tensor[(924), float32] */;
    %160 = @func_2803(%158, %159) /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(10, 5, 4), int64], Tensor[(200), int64], Tensor[(924), float32], Tensor[(16, 14, 4), float32], Tensor[(1, 896), float32]) */;
    %161 = @func_3392() /* ty=Tensor[(10, 3, 14), uint16] */;
    %162 = @func_3392() /* ty=Tensor[(10, 3, 14), uint16] */;
    %163 = cast(%162, dtype="float32") /* ty=Tensor[(10, 3, 14), float32] */;
    %164 = shape_of(%161, dtype="int32") /* ty=Tensor[(3), int32] */;
    %165 = cast(%161, dtype="float32") /* ty=Tensor[(10, 3, 14), float32] */;
    %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %167 = cast(%var_3655, dtype="float32") /* ty=Tensor[(154, 6), float32] */;
    %168 = cast(%var_3655, dtype="float32") /* ty=Tensor[(154, 6), float32] */;
    %169 = reshape(%167, newshape=[12, 11, 7]) /* ty=Tensor[(12, 11, 7), float32] */;
    %170 = reshape(%168, newshape=[12, 11, 7]) /* ty=Tensor[(12, 11, 7), float32] */;
    %171 = @func_392(%169, %170) /* ty=(Tensor[(12, 11, 7), bool],) */;
    %172 = %137.2;
    %173 = %144.2;
    %174 = bitwise_xor(%151, %152) /* ty=Tensor[(10, 3, 14), int16] */;
    %175 = %155.2;
    %176 = %160.2;
    %177 = power(%165, %166) /* ty=Tensor[(10, 3, 14), float32] */;
    %178 = %171.0;
    (%134, meta[relay.Constant][9] /* ty=Tensor[(72), float64] */, meta[relay.Constant][10] /* ty=Tensor[(936), float32] */, %172, %173, %var_3603, %174, %175, %176, meta[relay.Constant][11] /* ty=Tensor[(5, 40), int64] */, %var_3655, %177, %178)
  };
  %179(%var_3695, %var_3696) /* ty=(Tensor[(4, 13, 11), int64], Tensor[(72), float64], Tensor[(936), float32], Tensor[(572), uint32], Tensor[(8, 13, 9), float32], Tensor[(156, 20), uint8], Tensor[(10, 3, 14), int16], Tensor[(10, 3, 14), bool], Tensor[(200), int64], Tensor[(5, 40), int64], Tensor[(154, 6), float32], Tensor[(10, 3, 14), float32], Tensor[(12, 11, 7), bool]) */
}

def @func_2807(%var_2805: Tensor[(200), int64], %var_2806: Tensor[(924), float32]) -> (Tensor[(10, 3, 14), uint16], Tensor[(10, 5, 4), int64], Tensor[(200), int64], Tensor[(924), float32], Tensor[(16, 14, 4), float32], Tensor[(1, 896), float32]) {
  @func_2803(%var_2805, %var_2806) /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(10, 5, 4), int64], Tensor[(200), int64], Tensor[(924), float32], Tensor[(16, 14, 4), float32], Tensor[(1, 896), float32]) */
}

def @func_4576() -> Tensor[(10, 3, 14), float32] {
  %181 = fn () -> Tensor[(10, 3, 14), float32] {
    %180 = @func_3319() /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), float32]) */;
    %180.1
  };
  %181() /* ty=Tensor[(10, 3, 14), float32] */
}

def @func_5856() -> (Tensor[(10, 3, 14), uint16], Tensor[(13, 15, 5), float64], Tensor[(13, 15, 5), float64]) {
  @func_5854() /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(13, 15, 5), float64], Tensor[(13, 15, 5), float64]) */
}

def @func_3816() -> (Tensor[(936), float32],) {
  %182 = @func_3769() /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(15, 16, 13), uint8], Tensor[(3120), uint8], Tensor[(936), float32]) */;
  %183 = %182.3;
  (%183,)
}

def @func_648(%var_628: Tensor[(924), float32]) -> (Tensor[(12, 11, 7), bool], Tensor[(12, 11, 7), bool], Tensor[(8, 13, 9), float32]) {
  %184 = cast(%var_628, dtype="float32") /* ty=Tensor[(924), float32] */;
  %185 = cast(%var_628, dtype="float32") /* ty=Tensor[(924), float32] */;
  %186 = reshape(%184, newshape=[12, 11, 7]) /* ty=Tensor[(12, 11, 7), float32] */;
  %187 = reshape(%185, newshape=[12, 11, 7]) /* ty=Tensor[(12, 11, 7), float32] */;
  %188 = @func_392(%186, %187) /* ty=(Tensor[(12, 11, 7), bool],) */;
  %189 = %188.0;
  %190 = cast(%var_628, dtype="bool") /* ty=Tensor[(924), bool] */;
  %191 = shape_of(%189, dtype="int32") /* ty=Tensor[(3), int32] */;
  %192 = cast(%189, dtype="bool") /* ty=Tensor[(12, 11, 7), bool] */;
  %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %194 = cast(%var_628, dtype="float32") /* ty=Tensor[(924), float32] */;
  %195 = cast(%var_628, dtype="float32") /* ty=Tensor[(924), float32] */;
  %196 = reshape(%194, newshape=[12, 11, 7]) /* ty=Tensor[(12, 11, 7), float32] */;
  %197 = reshape(%195, newshape=[12, 11, 7]) /* ty=Tensor[(12, 11, 7), float32] */;
  %198 = @func_392(%196, %197) /* ty=(Tensor[(12, 11, 7), bool],) */;
  %199 = cast(meta[relay.Constant][13] /* ty=Tensor[(8, 13, 9), float32] */, dtype="float32") /* ty=Tensor[(8, 13, 9), float32] */;
  %200 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(8, 13, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %201 = cast(meta[relay.Constant][12] /* ty=Tensor[(8, 13, 9), float32] */, dtype="float32") /* ty=Tensor[(8, 13, 9), float32] */;
  %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %203 = divide(%201, %202) /* ty=Tensor[(8, 13, 9), float32] */;
  %204 = cast(%203, dtype="float32") /* ty=Tensor[(8, 13, 9), float32] */;
  %205 = not_equal(%192, %193) /* ty=Tensor[(12, 11, 7), bool] */;
  %206 = %198.0;
  %207 = erf(%204) /* ty=Tensor[(8, 13, 9), float32] */;
  (%205, %206, %207)
}

def @func_6492() -> (Tensor[(10, 3, 14), float32],) {
  %208 = @func_3031() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %209 = %208.0;
  %210 = @func_2932() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %211 = %210.0;
  %212 = cast(%211, dtype="float32") /* ty=Tensor[(10, 3, 14), float32] */;
  %213 = shape_of(%209, dtype="int32") /* ty=Tensor[(3), int32] */;
  %214 = cast(%209, dtype="float32") /* ty=Tensor[(10, 3, 14), float32] */;
  %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %216 = mod(%214, %215) /* ty=Tensor[(10, 3, 14), float32] */;
  (%216,)
}

def @func_6576() -> (Tensor[(10, 3, 14), uint16],) {
  %217 = @func_3099() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %218 = %217.0;
  (%218,)
}

def @func_1649(%var_1561: Tensor[(15, 16, 13), uint8], %var_1562: Tensor[(15, 16, 13), uint8], %var_1605: Tensor[(8, 13, 9), float32]) -> (Tensor[(15, 16, 13), uint8], Tensor[(924), float32], Tensor[(8, 13, 9), float32], Tensor[(8, 13, 9), int8], Tensor[(12, 11, 7), bool], Tensor[(36, 2), float64], Tensor[(8, 1, 9), float32]) {
  %219 = cast(%var_1562, dtype="uint8") /* ty=Tensor[(15, 16, 13), uint8] */;
  %220 = shape_of(%var_1561, dtype="int32") /* ty=Tensor[(3), int32] */;
  %221 = cast(%var_1561, dtype="uint8") /* ty=Tensor[(15, 16, 13), uint8] */;
  %222 = dyn.reshape(%219, %220, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %223 = cast(meta[relay.Constant][14] /* ty=Tensor[(924), float32] */, dtype="float32") /* ty=Tensor[(924), float32] */;
  %224 = reshape(%223, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %225 = @func_648(%224) /* ty=(Tensor[(12, 11, 7), bool], Tensor[(12, 11, 7), bool], Tensor[(8, 13, 9), float32]) */;
  %226 = %225.2;
  %227 = cast(%var_1605, dtype="float32") /* ty=Tensor[(8, 13, 9), float32] */;
  %228 = shape_of(%226, dtype="int32") /* ty=Tensor[(3), int32] */;
  %229 = cast(%226, dtype="float32") /* ty=Tensor[(8, 13, 9), float32] */;
  %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %231 = cast(%226, dtype="float64") /* ty=Tensor[(8, 13, 9), float64] */;
  %232 = asin(%231) /* ty=Tensor[(8, 13, 9), float64] */;
  %233 = cast(%232, dtype="float64") /* ty=Tensor[(8, 13, 9), float64] */;
  %234 = atanh(%233) /* ty=Tensor[(8, 13, 9), float64] */;
  %235 = cast(%234, dtype="int8") /* ty=Tensor[(8, 13, 9), int8] */;
  %236 = shape_of(%232, dtype="int32") /* ty=Tensor[(3), int32] */;
  %237 = cast(%232, dtype="int8") /* ty=Tensor[(8, 13, 9), int8] */;
  %238 = dyn.reshape(%235, %236, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %239 = cast(meta[relay.Constant][15] /* ty=Tensor[(36, 2), float64] */, dtype="float64") /* ty=Tensor[(36, 2), float64] */;
  %240 = cast(meta[relay.Constant][15] /* ty=Tensor[(36, 2), float64] */, dtype="float64") /* ty=Tensor[(36, 2), float64] */;
  %241 = cast(%234, dtype="float32") /* ty=Tensor[(8, 13, 9), float32] */;
  %242 = reshape(%239, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), float64] */;
  %243 = reshape(%240, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), float64] */;
  %244 = reshape(%241, newshape=[8, 13, 9]) /* ty=Tensor[(8, 13, 9), float32] */;
  %245 = @func_811(%242, %243, %244) /* ty=(Tensor[(4, 2, 9), float64], Tensor[(12, 11, 7), bool], Tensor[(924), float32], Tensor[(572), float64], Tensor[(8, 13, 9), int32], Tensor[(4, 13, 11), int64]) */;
  %246 = cast(meta[relay.Constant][15] /* ty=Tensor[(36, 2), float64] */, dtype="float32") /* ty=Tensor[(36, 2), float32] */;
  %247 = reshape(%246, newshape=[8, 1, 9]) /* ty=Tensor[(8, 1, 9), float32] */;
  %248 = logical_xor(%221, %222) /* ty=Tensor[(15, 16, 13), uint8] */;
  %249 = floor_divide(%229, %230) /* ty=Tensor[(8, 13, 9), float32] */;
  %250 = bitwise_or(%237, %238) /* ty=Tensor[(8, 13, 9), int8] */;
  %251 = %245.1;
  %252 = @func_1124(%247) /* ty=Tensor[(8, 1, 9), float32] */;
  (%248, meta[relay.Constant][14] /* ty=Tensor[(924), float32] */, %249, %250, %251, meta[relay.Constant][15] /* ty=Tensor[(36, 2), float64] */, %252)
}

def @func_4602() -> (Tensor[(10, 3, 14), uint16],) {
  %253 = @func_4116() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %254 = %253.0;
  (%254,)
}

def @func_5250(%var_5248: Tensor[(10, 3, 14), uint16]) -> (Tensor[(10, 3, 14), bool], Tensor[(10, 3, 14), uint16]) {
  @func_5247(%var_5248) /* ty=(Tensor[(10, 3, 14), bool], Tensor[(10, 3, 14), uint16]) */
}

def @func_3015(%var_2996: Tensor[(3120), uint8]) -> (Tensor[(13, 15, 5), bool], Tensor[(572), uint32], Tensor[(10, 3, 14), uint64], Tensor[(11, 52), float32], Tensor[(12, 11, 7), bool], Tensor[(3120), uint8], Tensor[(936), float32]) {
  %255 = cast(meta[relay.Constant][16] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %256 = reshape(%255, newshape=[]) /* ty=int8 */;
  %257 = @func_929(%256) /* ty=(Tensor[(13, 15, 5), bool], Tensor[(13, 15, 5), float32]) */;
  %258 = cast(meta[relay.Constant][17] /* ty=Tensor[(11, 52), int8] */, dtype="int8") /* ty=Tensor[(11, 52), int8] */;
  %259 = reshape(%258, newshape=[572]) /* ty=Tensor[(572), int8] */;
  %260 = @func_2891(%259) /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(924), float32], Tensor[(572), uint32]) */;
  %261 = @func_2681() /* ty=Tensor[(10, 3, 14), uint16] */;
  %262 = cast(%261, dtype="float64") /* ty=Tensor[(10, 3, 14), float64] */;
  %263 = rsqrt(%262) /* ty=Tensor[(10, 3, 14), float64] */;
  %264 = cast(%263, dtype="uint64") /* ty=Tensor[(10, 3, 14), uint64] */;
  %265 = cast(meta[relay.Constant][16] /* ty=int8 */, dtype="uint64") /* ty=uint64 */;
  %266 = cast(meta[relay.Constant][17] /* ty=Tensor[(11, 52), int8] */, dtype="float32") /* ty=Tensor[(11, 52), float32] */;
  %267 = cast(%var_2996, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
  %268 = cast(%var_2996, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
  %269 = cast(meta[relay.Constant][18] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
  %270 = reshape(%267, newshape=[15, 16, 13]) /* ty=Tensor[(15, 16, 13), uint8] */;
  %271 = reshape(%268, newshape=[15, 16, 13]) /* ty=Tensor[(15, 16, 13), uint8] */;
  %272 = reshape(%269, newshape=[8, 13, 9]) /* ty=Tensor[(8, 13, 9), float32] */;
  %273 = @func_1649(%270, %271, %272) /* ty=(Tensor[(15, 16, 13), uint8], Tensor[(924), float32], Tensor[(8, 13, 9), float32], Tensor[(8, 13, 9), int8], Tensor[(12, 11, 7), bool], Tensor[(36, 2), float64], Tensor[(8, 1, 9), float32]) */;
  %274 = %257.0;
  %275 = %260.2;
  %276 = maximum(%264, %265) /* ty=Tensor[(10, 3, 14), uint64] */;
  %277 = sigmoid(%266) /* ty=Tensor[(11, 52), float32] */;
  %278 = %273.4;
  (%274, %275, %276, %277, %278, %var_2996, meta[relay.Constant][18] /* ty=Tensor[(936), float32] */)
}

def @func_1412(%var_1410: Tensor[(10, 5, 4), int64], %var_1411: Tensor[(924), float32]) -> (Tensor[(10, 5, 4), int64], Tensor[(12, 11, 7), bool], Tensor[(924), float32]) {
  %290 = fn (%var_1389: Tensor[(10, 5, 4), int64], %var_1398: Tensor[(924), float32]) -> (Tensor[(10, 5, 4), int64], Tensor[(12, 11, 7), bool], Tensor[(924), float32]) {
    %279 = cast(%var_1389, dtype="int64") /* ty=Tensor[(10, 5, 4), int64] */;
    %280 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(10, 5, 4), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %281 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 5, 4), int64] */, dtype="int64") /* ty=Tensor[(10, 5, 4), int64] */;
    %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %283 = cast(%var_1398, dtype="float32") /* ty=Tensor[(924), float32] */;
    %284 = cast(%var_1398, dtype="float32") /* ty=Tensor[(924), float32] */;
    %285 = reshape(%283, newshape=[12, 11, 7]) /* ty=Tensor[(12, 11, 7), float32] */;
    %286 = reshape(%284, newshape=[12, 11, 7]) /* ty=Tensor[(12, 11, 7), float32] */;
    %287 = @func_392(%285, %286) /* ty=(Tensor[(12, 11, 7), bool],) */;
    %288 = subtract(%281, %282) /* ty=Tensor[(10, 5, 4), int64] */;
    %289 = %287.0;
    (%288, %289, %var_1398)
  };
  %290(%var_1410, %var_1411) /* ty=(Tensor[(10, 5, 4), int64], Tensor[(12, 11, 7), bool], Tensor[(924), float32]) */
}

def @func_6494() -> (Tensor[(10, 3, 14), float32],) {
  @func_6492() /* ty=(Tensor[(10, 3, 14), float32],) */
}

def @func_5686() -> Tensor[(10, 3, 14), uint16] {
  %292 = fn () -> Tensor[(10, 3, 14), uint16] {
    %291 = @func_3099() /* ty=(Tensor[(10, 3, 14), uint16],) */;
    %291.0
  };
  %292() /* ty=Tensor[(10, 3, 14), uint16] */
}

def @func_5163(%var_5161: Tensor[(10, 3, 14), uint16]) -> (Tensor[(10, 3, 14), float32],) {
  @func_5160(%var_5161) /* ty=(Tensor[(10, 3, 14), float32],) */
}

def @func_6231() -> (Tensor[(10, 3, 14), uint16],) {
  %293 = @func_5184() /* ty=Tensor[(10, 3, 14), uint16] */;
  (%293,)
}

def @func_4987() -> Tensor[(10, 3, 14), uint16] {
  @func_2681() /* ty=Tensor[(10, 3, 14), uint16] */
}

def @func_5247(%var_5214: Tensor[(10, 3, 14), uint16]) -> (Tensor[(10, 3, 14), bool], Tensor[(10, 3, 14), uint16]) {
  %294 = @func_3410() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %295 = %294.0;
  %296 = cast(%var_5214, dtype="bool") /* ty=Tensor[(10, 3, 14), bool] */;
  %297 = shape_of(%295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %298 = cast(%295, dtype="bool") /* ty=Tensor[(10, 3, 14), bool] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %300 = not_equal(%298, %299) /* ty=Tensor[(10, 3, 14), bool] */;
  %301 = @func_3729() /* ty=Tensor[(10, 3, 14), uint16] */;
  (%300, %301)
}

def @func_1126(%var_1125: Tensor[(8, 1, 9), float32]) -> Tensor[(8, 1, 9), float32] {
  %303 = fn (%var_1121: Tensor[(8, 1, 9), float32]) -> Tensor[(8, 1, 9), float32] {
    %302 = cast(%var_1121, dtype="float32") /* ty=Tensor[(8, 1, 9), float32] */;
    sinh(%302) /* ty=Tensor[(8, 1, 9), float32] */
  };
  %303(%var_1125) /* ty=Tensor[(8, 1, 9), float32] */
}

def @func_651(%var_649: Tensor[(924), float32]) -> (Tensor[(12, 11, 7), bool], Tensor[(12, 11, 7), bool], Tensor[(8, 13, 9), float32]) {
  @func_648(%var_649) /* ty=(Tensor[(12, 11, 7), bool], Tensor[(12, 11, 7), bool], Tensor[(8, 13, 9), float32]) */
}

def @func_2853() -> Tensor[(10, 3, 14), uint16] {
  @func_2681() /* ty=Tensor[(10, 3, 14), uint16] */
}

def @func_6377() -> (Tensor[(10, 3, 14), uint16],) {
  %305 = fn () -> (Tensor[(10, 3, 14), uint16],) {
    %304 = @func_6260() /* ty=Tensor[(10, 3, 14), uint16] */;
    (%304,)
  };
  %305() /* ty=(Tensor[(10, 3, 14), uint16],) */
}

def @func_5902() -> (Tensor[(10, 3, 14), uint16],) {
  %306 = @func_4085() /* ty=Tensor[(10, 3, 14), uint16] */;
  (%306,)
}

def @func_5811(%var_5809: Tensor[(3600), float32], %var_5810: Tensor[(3120), uint8]) -> (Tensor[(10, 3, 14), uint16], Tensor[(15, 16, 15), bool], Tensor[(5), bool], Tensor[(750, 1), bool], Tensor[(3600), float32], Tensor[(8, 13, 9), float32], Tensor[(3120), uint8], Tensor[(936), float32]) {
  @func_5807(%var_5809, %var_5810) /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(15, 16, 15), bool], Tensor[(5), bool], Tensor[(750, 1), bool], Tensor[(3600), float32], Tensor[(8, 13, 9), float32], Tensor[(3120), uint8], Tensor[(936), float32]) */
}

def @func_6634(%var_6632: float64) -> Tensor[(8, 10, 15), float64] {
  @func_6631(%var_6632) /* ty=Tensor[(8, 10, 15), float64] */
}

def @func_2855() -> Tensor[(10, 3, 14), uint16] {
  @func_2853() /* ty=Tensor[(10, 3, 14), uint16] */
}

def @func_5988(%var_5975: Tensor[(1, 10, 5), int8], %var_5976: Tensor[(9, 10, 5), int8]) -> (Tensor[(9, 10, 5), bool],) {
  %307 = cast(%var_5975, dtype="bool") /* ty=Tensor[(1, 10, 5), bool] */;
  %308 = cast(%var_5976, dtype="bool") /* ty=Tensor[(9, 10, 5), bool] */;
  %309 = less(%307, %308) /* ty=Tensor[(9, 10, 5), bool] */;
  (%309,)
}

def @func_4241(%var_4235: Tensor[(200), int64], %var_4236: Tensor[(462, 2), float32], %var_4237: Tensor[(72), float32], %var_4238: Tensor[(4, 780), uint8], %var_4239: Tensor[(4, 780), uint8], %var_4240: Tensor[(10, 5, 4), int64]) -> (Tensor[(10, 3, 14), uint16], Tensor[(16, 14, 4), float32], Tensor[(896), float32], Tensor[(200), int64], Tensor[(462, 2), float32], Tensor[(15, 16, 15), bool], Tensor[(3600, 1), float32], Tensor[(8, 1, 9), float32], Tensor[(72), float32], Tensor[(5, 40), int64], Tensor[(4, 780), int32], Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16], Tensor[(10, 5, 4), bool], Tensor[(1, 896), float32]) {
  @func_4233(%var_4235, %var_4236, %var_4237, %var_4238, %var_4239, %var_4240) /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(16, 14, 4), float32], Tensor[(896), float32], Tensor[(200), int64], Tensor[(462, 2), float32], Tensor[(15, 16, 15), bool], Tensor[(3600, 1), float32], Tensor[(8, 1, 9), float32], Tensor[(72), float32], Tensor[(5, 40), int64], Tensor[(4, 780), int32], Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16], Tensor[(10, 5, 4), bool], Tensor[(1, 896), float32]) */
}

def @func_3771() -> (Tensor[(10, 3, 14), uint16], Tensor[(15, 16, 13), uint8], Tensor[(3120), uint8], Tensor[(936), float32]) {
  @func_3769() /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(15, 16, 13), uint8], Tensor[(3120), uint8], Tensor[(936), float32]) */
}

def @func_4661() -> Tensor[(10, 3, 14), uint16] {
  %310 = @func_2932() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %310.0
}

def @func_6413(%var_6411: Tensor[(10, 1, 11), float64], %var_6412: Tensor[(10, 12, 11), float64]) -> (Tensor[(10, 12, 11), float32],) {
  @func_6409(%var_6411, %var_6412) /* ty=(Tensor[(10, 12, 11), float32],) */
}

def @func_6130(%var_6128: Tensor[(10, 4, 13), float32]) -> Tensor[(10, 4, 13), bool] {
  @func_6127(%var_6128) /* ty=Tensor[(10, 4, 13), bool] */
}

def @func_6880(%var_6879: Tensor[(72), float64]) -> (Tensor[(924), float32], Tensor[(8, 13, 9), int32], Tensor[(72), float64], Tensor[(936), float32]) {
  %321 = fn (%var_6873: Tensor[(72), float64]) -> (Tensor[(924), float32], Tensor[(8, 13, 9), int32], Tensor[(72), float64], Tensor[(936), float32]) {
    %311 = @func_6543() /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(12, 11, 7), bool], Tensor[(924), float32]) */;
    %312 = cast(%var_6873, dtype="float64") /* ty=Tensor[(72), float64] */;
    %313 = cast(%var_6873, dtype="float64") /* ty=Tensor[(72), float64] */;
    %314 = cast(meta[relay.Constant][20] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
    %315 = reshape(%312, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), float64] */;
    %316 = reshape(%313, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), float64] */;
    %317 = reshape(%314, newshape=[8, 13, 9]) /* ty=Tensor[(8, 13, 9), float32] */;
    %318 = @func_811(%315, %316, %317) /* ty=(Tensor[(4, 2, 9), float64], Tensor[(12, 11, 7), bool], Tensor[(924), float32], Tensor[(572), float64], Tensor[(8, 13, 9), int32], Tensor[(4, 13, 11), int64]) */;
    %319 = %311.2;
    %320 = %318.4;
    (%319, %320, %var_6873, meta[relay.Constant][20] /* ty=Tensor[(936), float32] */)
  };
  %321(%var_6879) /* ty=(Tensor[(924), float32], Tensor[(8, 13, 9), int32], Tensor[(72), float64], Tensor[(936), float32]) */
}

def @func_3860() -> (Tensor[(10, 3, 14), uint16],) {
  @func_3858() /* ty=(Tensor[(10, 3, 14), uint16],) */
}

def @func_4057(%var_4056: int8) -> (Tensor[(13, 15, 5), float32], Tensor[(10, 3, 14), bool], Tensor[(10, 3, 14), float64]) {
  %334 = fn (%var_4022: int8) -> (Tensor[(13, 15, 5), float32], Tensor[(10, 3, 14), bool], Tensor[(10, 3, 14), float64]) {
    %322 = cast(%var_4022, dtype="int8") /* ty=int8 */;
    %323 = reshape(%322, newshape=[]) /* ty=int8 */;
    %324 = @func_929(%323) /* ty=(Tensor[(13, 15, 5), bool], Tensor[(13, 15, 5), float32]) */;
    %325 = @func_3162() /* ty=Tensor[(10, 3, 14), uint16] */;
    %326 = cast(%325, dtype="bool") /* ty=Tensor[(10, 3, 14), bool] */;
    %327 = cast(%var_4022, dtype="bool") /* ty=bool */;
    %328 = @func_3031() /* ty=(Tensor[(10, 3, 14), uint16],) */;
    %329 = %328.0;
    %330 = cast(%329, dtype="float64") /* ty=Tensor[(10, 3, 14), float64] */;
    %331 = %324.1;
    %332 = greater(%326, %327) /* ty=Tensor[(10, 3, 14), bool] */;
    %333 = asin(%330) /* ty=Tensor[(10, 3, 14), float64] */;
    (%331, %332, %333)
  };
  %334(%var_4056) /* ty=(Tensor[(13, 15, 5), float32], Tensor[(10, 3, 14), bool], Tensor[(10, 3, 14), float64]) */
}

def @func_2681() -> Tensor[(10, 3, 14), uint16] {
  %335 = cast(meta[relay.Constant][21] /* ty=Tensor[(10, 3, 14), float64] */, dtype="float64") /* ty=Tensor[(10, 3, 14), float64] */;
  %336 = exp(%335) /* ty=Tensor[(10, 3, 14), float64] */;
  %337 = cast(%336, dtype="float64") /* ty=Tensor[(10, 3, 14), float64] */;
  %338 = acos(%337) /* ty=Tensor[(10, 3, 14), float64] */;
  %339 = cast(%336, dtype="uint16") /* ty=Tensor[(10, 3, 14), uint16] */;
  %340 = shape_of(%338, dtype="int32") /* ty=Tensor[(3), int32] */;
  %341 = cast(%338, dtype="uint16") /* ty=Tensor[(10, 3, 14), uint16] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  logical_xor(%341, %342) /* ty=Tensor[(10, 3, 14), uint16] */
}

def @func_3235(%var_3168: Tensor[(10, 3, 14), uint16], %var_3229: Tensor[(10, 3, 14), uint16]) -> (Tensor[(10, 3, 14), bool], Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), bool]) {
  %343 = @func_2932() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %344 = %343.0;
  %345 = cast(%var_3168, dtype="bool") /* ty=Tensor[(10, 3, 14), bool] */;
  %346 = shape_of(%344, dtype="int32") /* ty=Tensor[(3), int32] */;
  %347 = cast(%344, dtype="bool") /* ty=Tensor[(10, 3, 14), bool] */;
  %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %349 = cast(%var_3168, dtype="uint8") /* ty=Tensor[(10, 3, 14), uint8] */;
  %350 = shape_of(%344, dtype="int32") /* ty=Tensor[(3), int32] */;
  %351 = cast(%344, dtype="uint8") /* ty=Tensor[(10, 3, 14), uint8] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %353 = bitwise_or(%351, %352) /* ty=Tensor[(10, 3, 14), uint8] */;
  %354 = cast(meta[relay.Constant][22] /* ty=Tensor[(10, 3, 14), uint8] */, dtype="uint16") /* ty=Tensor[(10, 3, 14), uint16] */;
  %355 = shape_of(%353, dtype="int32") /* ty=Tensor[(3), int32] */;
  %356 = cast(%353, dtype="uint16") /* ty=Tensor[(10, 3, 14), uint16] */;
  %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %358 = bitwise_and(%356, %357) /* ty=Tensor[(10, 3, 14), uint16] */;
  %359 = cast(%var_3229, dtype="bool") /* ty=Tensor[(10, 3, 14), bool] */;
  %360 = shape_of(%358, dtype="int32") /* ty=Tensor[(3), int32] */;
  %361 = cast(%358, dtype="bool") /* ty=Tensor[(10, 3, 14), bool] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %363 = logical_and(%347, %348) /* ty=Tensor[(10, 3, 14), bool] */;
  %364 = @func_3162() /* ty=Tensor[(10, 3, 14), uint16] */;
  %365 = @func_2853() /* ty=Tensor[(10, 3, 14), uint16] */;
  %366 = greater_equal(%361, %362) /* ty=Tensor[(10, 3, 14), bool] */;
  (%363, %364, %365, %366)
}

def @func_816(%var_813: Tensor[(4, 2, 9), float64], %var_814: Tensor[(4, 2, 9), float64], %var_815: Tensor[(8, 13, 9), float32]) -> (Tensor[(4, 2, 9), float64], Tensor[(12, 11, 7), bool], Tensor[(924), float32], Tensor[(572), float64], Tensor[(8, 13, 9), int32], Tensor[(4, 13, 11), int64]) {
  @func_811(%var_813, %var_814, %var_815) /* ty=(Tensor[(4, 2, 9), float64], Tensor[(12, 11, 7), bool], Tensor[(924), float32], Tensor[(572), float64], Tensor[(8, 13, 9), int32], Tensor[(4, 13, 11), int64]) */
}

def @func_5461() -> Tensor[(10, 3, 14), uint16] {
  @func_4987() /* ty=Tensor[(10, 3, 14), uint16] */
}

def @func_6111() -> (Tensor[(10, 3, 14), uint16], Tensor[(572), uint32], Tensor[(572), int8]) {
  %367 = cast(meta[relay.Constant][23] /* ty=Tensor[(572), int8] */, dtype="int8") /* ty=Tensor[(572), int8] */;
  %368 = reshape(%367, newshape=[572]) /* ty=Tensor[(572), int8] */;
  %369 = @func_2891(%368) /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(924), float32], Tensor[(572), uint32]) */;
  %370 = @func_2853() /* ty=Tensor[(10, 3, 14), uint16] */;
  %371 = %369.2;
  (%370, %371, meta[relay.Constant][23] /* ty=Tensor[(572), int8] */)
}

def @func_6218() -> (Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16]) {
  @func_6216() /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16]) */
}

def @func_737(%var_735: Tensor[(4, 13, 11), int8], %var_736: Tensor[(4, 13, 11), int8]) -> (Tensor[(4, 13, 11), int8], Tensor[(4, 13, 11), int64], Tensor[(8, 13, 9), float32], Tensor[(924), float32]) {
  @func_733(%var_735, %var_736) /* ty=(Tensor[(4, 13, 11), int8], Tensor[(4, 13, 11), int64], Tensor[(8, 13, 9), float32], Tensor[(924), float32]) */
}

def @func_6113() -> (Tensor[(10, 3, 14), uint16], Tensor[(572), uint32], Tensor[(572), int8]) {
  @func_6111() /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(572), uint32], Tensor[(572), int8]) */
}

def @func_2548(%var_2532: Tensor[(16, 14, 4), float32]) -> Tensor[(16, 14, 4), float32] {
  %372 = cast(%var_2532, dtype="float32") /* ty=Tensor[(16, 14, 4), float32] */;
  %373 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(16, 14, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %374 = cast(meta[relay.Constant][24] /* ty=Tensor[(16, 14, 4), float32] */, dtype="float32") /* ty=Tensor[(16, 14, 4), float32] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%374, %375) /* ty=Tensor[(16, 14, 4), float32] */
}

def @func_3099() -> (Tensor[(10, 3, 14), uint16],) {
  %376 = @func_2681() /* ty=Tensor[(10, 3, 14), uint16] */;
  (%376,)
}

def @func_6233() -> (Tensor[(10, 3, 14), uint16],) {
  @func_6231() /* ty=(Tensor[(10, 3, 14), uint16],) */
}

def @func_5160(%var_5123: Tensor[(10, 3, 14), uint16]) -> (Tensor[(10, 3, 14), float32],) {
  %377 = @func_3162() /* ty=Tensor[(10, 3, 14), uint16] */;
  %378 = cast(%var_5123, dtype="float32") /* ty=Tensor[(10, 3, 14), float32] */;
  %379 = shape_of(%377, dtype="int32") /* ty=Tensor[(3), int32] */;
  %380 = cast(%377, dtype="float32") /* ty=Tensor[(10, 3, 14), float32] */;
  %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %382 = floor_mod(%380, %381) /* ty=Tensor[(10, 3, 14), float32] */;
  (%382,)
}

def @func_6037() -> (Tensor[(10, 3, 14), uint16],) {
  %385 = fn () -> (Tensor[(10, 3, 14), uint16],) {
    %383 = @func_3858() /* ty=(Tensor[(10, 3, 14), uint16],) */;
    %384 = %383.0;
    (%384,)
  };
  %385() /* ty=(Tensor[(10, 3, 14), uint16],) */
}

def @func_4251() -> (Tensor[(10, 3, 14), uint16],) {
  %388 = fn () -> (Tensor[(10, 3, 14), uint16],) {
    %386 = @func_3858() /* ty=(Tensor[(10, 3, 14), uint16],) */;
    %387 = %386.0;
    (%387,)
  };
  %388() /* ty=(Tensor[(10, 3, 14), uint16],) */
}

def @func_5463() -> Tensor[(10, 3, 14), uint16] {
  @func_5461() /* ty=Tensor[(10, 3, 14), uint16] */
}

def @func_4233(%var_4157: Tensor[(200), int64], %var_4158: Tensor[(462, 2), float32], %var_4182: Tensor[(72), float32], %var_4199: Tensor[(4, 780), uint8], %var_4208: Tensor[(4, 780), uint8], %var_4219: Tensor[(10, 5, 4), int64]) -> (Tensor[(10, 3, 14), uint16], Tensor[(16, 14, 4), float32], Tensor[(896), float32], Tensor[(200), int64], Tensor[(462, 2), float32], Tensor[(15, 16, 15), bool], Tensor[(3600, 1), float32], Tensor[(8, 1, 9), float32], Tensor[(72), float32], Tensor[(5, 40), int64], Tensor[(4, 780), int32], Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16], Tensor[(10, 5, 4), bool], Tensor[(1, 896), float32]) {
  %389 = @func_3858() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %390 = cast(meta[relay.Constant][25] /* ty=Tensor[(896), float32] */, dtype="float32") /* ty=Tensor[(896), float32] */;
  %391 = reshape(%390, newshape=[16, 14, 4]) /* ty=Tensor[(16, 14, 4), float32] */;
  %392 = cast(meta[relay.Constant][26] /* ty=Tensor[(3600, 1), float32] */, dtype="float32") /* ty=Tensor[(3600, 1), float32] */;
  %393 = reshape(%392, newshape=[15, 16, 15]) /* ty=Tensor[(15, 16, 15), float32] */;
  %394 = @func_2331(%393) /* ty=(Tensor[(15, 16, 15), bool], Tensor[(15, 16, 15), int32]) */;
  %395 = cast(%var_4182, dtype="float32") /* ty=Tensor[(72), float32] */;
  %396 = reshape(%395, newshape=[8, 1, 9]) /* ty=Tensor[(8, 1, 9), float32] */;
  %397 = cast(%var_4199, dtype="uint8") /* ty=Tensor[(4, 780), uint8] */;
  %398 = cast(%var_4158, dtype="float32") /* ty=Tensor[(462, 2), float32] */;
  %399 = reshape(%397, newshape=[156, 20]) /* ty=Tensor[(156, 20), uint8] */;
  %400 = reshape(%398, newshape=[154, 6]) /* ty=Tensor[(154, 6), float32] */;
  %401 = @func_3694(%399, %400) /* ty=(Tensor[(4, 13, 11), int64], Tensor[(72), float64], Tensor[(936), float32], Tensor[(572), uint32], Tensor[(8, 13, 9), float32], Tensor[(156, 20), uint8], Tensor[(10, 3, 14), int16], Tensor[(10, 3, 14), bool], Tensor[(200), int64], Tensor[(5, 40), int64], Tensor[(154, 6), float32], Tensor[(10, 3, 14), float32], Tensor[(12, 11, 7), bool]) */;
  %402 = cast(%var_4208, dtype="int32") /* ty=Tensor[(4, 780), int32] */;
  %403 = shape_of(%var_4199, dtype="int32") /* ty=Tensor[(2), int32] */;
  %404 = cast(%var_4199, dtype="int32") /* ty=Tensor[(4, 780), int32] */;
  %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %406 = @func_3031() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %407 = cast(%var_4157, dtype="int64") /* ty=Tensor[(200), int64] */;
  %408 = cast(%var_4158, dtype="float32") /* ty=Tensor[(462, 2), float32] */;
  %409 = reshape(%407, newshape=[200]) /* ty=Tensor[(200), int64] */;
  %410 = reshape(%408, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %411 = @func_2803(%409, %410) /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(10, 5, 4), int64], Tensor[(200), int64], Tensor[(924), float32], Tensor[(16, 14, 4), float32], Tensor[(1, 896), float32]) */;
  %412 = %411.1;
  %413 = cast(%var_4219, dtype="bool") /* ty=Tensor[(10, 5, 4), bool] */;
  %414 = shape_of(%412, dtype="int32") /* ty=Tensor[(3), int32] */;
  %415 = cast(%412, dtype="bool") /* ty=Tensor[(10, 5, 4), bool] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %417 = cast(%412, dtype="int64") /* ty=Tensor[(10, 5, 4), int64] */;
  %418 = cast(%var_4158, dtype="float32") /* ty=Tensor[(462, 2), float32] */;
  %419 = reshape(%417, newshape=[200]) /* ty=Tensor[(200), int64] */;
  %420 = reshape(%418, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %421 = @func_2803(%419, %420) /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(10, 5, 4), int64], Tensor[(200), int64], Tensor[(924), float32], Tensor[(16, 14, 4), float32], Tensor[(1, 896), float32]) */;
  %422 = %389.0;
  %423 = @func_2548(%391) /* ty=Tensor[(16, 14, 4), float32] */;
  %424 = %394.0;
  %425 = @func_1124(%396) /* ty=Tensor[(8, 1, 9), float32] */;
  %426 = %401.9;
  %427 = logical_xor(%404, %405) /* ty=Tensor[(4, 780), int32] */;
  %428 = %406.0;
  %429 = @func_4085() /* ty=Tensor[(10, 3, 14), uint16] */;
  %430 = equal(%415, %416) /* ty=Tensor[(10, 5, 4), bool] */;
  %431 = %421.5;
  (%422, %423, meta[relay.Constant][25] /* ty=Tensor[(896), float32] */, %var_4157, %var_4158, %424, meta[relay.Constant][26] /* ty=Tensor[(3600, 1), float32] */, %425, %var_4182, %426, %427, %428, %429, %430, %431)
}

def @func_6216() -> (Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16]) {
  %432 = @func_6036() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %433 = @func_5446() /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint32]) */;
  %434 = %432.0;
  %435 = %433.0;
  (%434, %435)
}

def @func_5447() -> (Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint32]) {
  %447 = fn () -> (Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint32]) {
    %436 = @func_3392() /* ty=Tensor[(10, 3, 14), uint16] */;
    %437 = cast(%436, dtype="float32") /* ty=Tensor[(10, 3, 14), float32] */;
    %438 = sigmoid(%437) /* ty=Tensor[(10, 3, 14), float32] */;
    %439 = cast(%438, dtype="float32") /* ty=Tensor[(10, 3, 14), float32] */;
    %440 = sin(%439) /* ty=Tensor[(10, 3, 14), float32] */;
    %441 = cast(%436, dtype="uint32") /* ty=Tensor[(10, 3, 14), uint32] */;
    %442 = shape_of(%440, dtype="int32") /* ty=Tensor[(3), int32] */;
    %443 = cast(%440, dtype="uint32") /* ty=Tensor[(10, 3, 14), uint32] */;
    %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %445 = @func_4661() /* ty=Tensor[(10, 3, 14), uint16] */;
    %446 = minimum(%443, %444) /* ty=Tensor[(10, 3, 14), uint32] */;
    (%445, %446)
  };
  %447() /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint32]) */
}

def @func_4963(%var_4959: Tensor[(1, 5, 1), bool], %var_4960: Tensor[(10, 5, 15), bool], %var_4961: Tensor[(3600), float32], %var_4962: Tensor[(10, 5, 15), float64]) -> (Tensor[(15, 16, 15), bool], Tensor[(3600), float32], Tensor[(12, 11, 7), bool], Tensor[(72, 1), float64], Tensor[(936), float32], Tensor[(8, 1, 9), float32], Tensor[(10, 5, 15), int64], Tensor[(10, 3, 14), uint16], Tensor[(10, 5, 15), bool], Tensor[(10, 3, 14), float32], Tensor[(10, 3, 14), uint16], Tensor[(10, 5, 15), int8], Tensor[(10, 3, 14), uint16]) {
  %492 = fn (%var_4860: Tensor[(1, 5, 1), bool], %var_4861: Tensor[(10, 5, 15), bool], %var_4874: Tensor[(3600), float32], %var_4935: Tensor[(10, 5, 15), float64]) -> (Tensor[(15, 16, 15), bool], Tensor[(3600), float32], Tensor[(12, 11, 7), bool], Tensor[(72, 1), float64], Tensor[(936), float32], Tensor[(8, 1, 9), float32], Tensor[(10, 5, 15), int64], Tensor[(10, 3, 14), uint16], Tensor[(10, 5, 15), bool], Tensor[(10, 3, 14), float32], Tensor[(10, 3, 14), uint16], Tensor[(10, 5, 15), int8], Tensor[(10, 3, 14), uint16]) {
    %448 = cast(%var_4874, dtype="float32") /* ty=Tensor[(3600), float32] */;
    %449 = reshape(%448, newshape=[15, 16, 15]) /* ty=Tensor[(15, 16, 15), float32] */;
    %450 = @func_2331(%449) /* ty=(Tensor[(15, 16, 15), bool], Tensor[(15, 16, 15), int32]) */;
    %451 = cast(meta[relay.Constant][27] /* ty=Tensor[(72, 1), float64] */, dtype="float64") /* ty=Tensor[(72, 1), float64] */;
    %452 = cast(meta[relay.Constant][27] /* ty=Tensor[(72, 1), float64] */, dtype="float64") /* ty=Tensor[(72, 1), float64] */;
    %453 = cast(meta[relay.Constant][28] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
    %454 = reshape(%451, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), float64] */;
    %455 = reshape(%452, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), float64] */;
    %456 = reshape(%453, newshape=[8, 13, 9]) /* ty=Tensor[(8, 13, 9), float32] */;
    %457 = @func_811(%454, %455, %456) /* ty=(Tensor[(4, 2, 9), float64], Tensor[(12, 11, 7), bool], Tensor[(924), float32], Tensor[(572), float64], Tensor[(8, 13, 9), int32], Tensor[(4, 13, 11), int64]) */;
    %458 = cast(meta[relay.Constant][27] /* ty=Tensor[(72, 1), float64] */, dtype="float32") /* ty=Tensor[(72, 1), float32] */;
    %459 = reshape(%458, newshape=[8, 1, 9]) /* ty=Tensor[(8, 1, 9), float32] */;
    %460 = cast(%var_4861, dtype="float32") /* ty=Tensor[(10, 5, 15), float32] */;
    %461 = rsqrt(%460) /* ty=Tensor[(10, 5, 15), float32] */;
    %462 = cast(%461, dtype="float32") /* ty=Tensor[(10, 5, 15), float32] */;
    %463 = sigmoid(%462) /* ty=Tensor[(10, 5, 15), float32] */;
    %464 = cast(%461, dtype="int64") /* ty=Tensor[(10, 5, 15), int64] */;
    %465 = shape_of(%463, dtype="int32") /* ty=Tensor[(3), int32] */;
    %466 = cast(%463, dtype="int64") /* ty=Tensor[(10, 5, 15), int64] */;
    %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %468 = cast(%463, dtype="bool") /* ty=Tensor[(10, 5, 15), bool] */;
    %469 = shape_of(%461, dtype="int32") /* ty=Tensor[(3), int32] */;
    %470 = cast(%461, dtype="bool") /* ty=Tensor[(10, 5, 15), bool] */;
    %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %472 = cast(%var_4860, dtype="bool") /* ty=Tensor[(1, 5, 1), bool] */;
    %473 = cast(%var_4861, dtype="bool") /* ty=Tensor[(10, 5, 15), bool] */;
    %474 = logical_or(%472, %473) /* ty=Tensor[(10, 5, 15), bool] */;
    %475 = cast(%474, dtype="float64") /* ty=Tensor[(10, 5, 15), float64] */;
    %476 = sqrt(%475) /* ty=Tensor[(10, 5, 15), float64] */;
    %477 = cast(%var_4935, dtype="int8") /* ty=Tensor[(10, 5, 15), int8] */;
    %478 = shape_of(%476, dtype="int32") /* ty=Tensor[(3), int32] */;
    %479 = cast(%476, dtype="int8") /* ty=Tensor[(10, 5, 15), int8] */;
    %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %481 = @func_3858() /* ty=(Tensor[(10, 3, 14), uint16],) */;
    %482 = %450.0;
    %483 = %457.1;
    %484 = @func_1124(%459) /* ty=Tensor[(8, 1, 9), float32] */;
    %485 = multiply(%466, %467) /* ty=Tensor[(10, 5, 15), int64] */;
    %486 = @func_4085() /* ty=Tensor[(10, 3, 14), uint16] */;
    %487 = less(%470, %471) /* ty=Tensor[(10, 5, 15), bool] */;
    %488 = @func_4575() /* ty=Tensor[(10, 3, 14), float32] */;
    %489 = @func_3729() /* ty=Tensor[(10, 3, 14), uint16] */;
    %490 = subtract(%479, %480) /* ty=Tensor[(10, 5, 15), int8] */;
    %491 = %481.0;
    (%482, %var_4874, %483, meta[relay.Constant][27] /* ty=Tensor[(72, 1), float64] */, meta[relay.Constant][28] /* ty=Tensor[(936), float32] */, %484, %485, %486, %487, %488, %489, %490, %491)
  };
  %492(%var_4959, %var_4960, %var_4961, %var_4962) /* ty=(Tensor[(15, 16, 15), bool], Tensor[(3600), float32], Tensor[(12, 11, 7), bool], Tensor[(72, 1), float64], Tensor[(936), float32], Tensor[(8, 1, 9), float32], Tensor[(10, 5, 15), int64], Tensor[(10, 3, 14), uint16], Tensor[(10, 5, 15), bool], Tensor[(10, 3, 14), float32], Tensor[(10, 3, 14), uint16], Tensor[(10, 5, 15), int8], Tensor[(10, 3, 14), uint16]) */
}

def @func_6127(%var_6120: Tensor[(10, 4, 13), float32]) -> Tensor[(10, 4, 13), bool] {
  %493 = cast(%var_6120, dtype="bool") /* ty=Tensor[(10, 4, 13), bool] */;
  %494 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(10, 4, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 4, 13), float32] */, dtype="bool") /* ty=Tensor[(10, 4, 13), bool] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%495, %496) /* ty=Tensor[(10, 4, 13), bool] */
}

def @func_733(%var_713: Tensor[(4, 13, 11), int8], %var_714: Tensor[(4, 13, 11), int8]) -> (Tensor[(4, 13, 11), int8], Tensor[(4, 13, 11), int64], Tensor[(8, 13, 9), float32], Tensor[(924), float32]) {
  %497 = cast(%var_714, dtype="int8") /* ty=Tensor[(4, 13, 11), int8] */;
  %498 = shape_of(%var_713, dtype="int32") /* ty=Tensor[(3), int32] */;
  %499 = cast(%var_713, dtype="int8") /* ty=Tensor[(4, 13, 11), int8] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %501 = cast(%var_714, dtype="int64") /* ty=Tensor[(4, 13, 11), int64] */;
  %502 = shape_of(%var_713, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(%var_713, dtype="int64") /* ty=Tensor[(4, 13, 11), int64] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %505 = cast(meta[relay.Constant][30] /* ty=Tensor[(924), float32] */, dtype="float32") /* ty=Tensor[(924), float32] */;
  %506 = reshape(%505, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %507 = @func_648(%506) /* ty=(Tensor[(12, 11, 7), bool], Tensor[(12, 11, 7), bool], Tensor[(8, 13, 9), float32]) */;
  %508 = subtract(%499, %500) /* ty=Tensor[(4, 13, 11), int8] */;
  %509 = add(%503, %504) /* ty=Tensor[(4, 13, 11), int64] */;
  %510 = %507.2;
  (%508, %509, %510, meta[relay.Constant][30] /* ty=Tensor[(924), float32] */)
}

def @func_4422(%var_4419: Tensor[(10, 3, 14), uint16], %var_4420: Tensor[(3120), uint8], %var_4421: Tensor[(936), float32]) -> (Tensor[(10, 3, 14), float64], Tensor[(12, 11, 7), bool], Tensor[(3120), uint8], Tensor[(936), float32], Tensor[(10, 3, 14), uint16], Tensor[(11, 52), float32]) {
  %532 = fn (%var_4390: Tensor[(10, 3, 14), uint16], %var_4401: Tensor[(3120), uint8], %var_4402: Tensor[(936), float32]) -> (Tensor[(10, 3, 14), float64], Tensor[(12, 11, 7), bool], Tensor[(3120), uint8], Tensor[(936), float32], Tensor[(10, 3, 14), uint16], Tensor[(11, 52), float32]) {
    %511 = @func_3099() /* ty=(Tensor[(10, 3, 14), uint16],) */;
    %512 = %511.0;
    %513 = cast(%var_4390, dtype="float64") /* ty=Tensor[(10, 3, 14), float64] */;
    %514 = shape_of(%512, dtype="int32") /* ty=Tensor[(3), int32] */;
    %515 = cast(%512, dtype="float64") /* ty=Tensor[(10, 3, 14), float64] */;
    %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %517 = cast(%var_4401, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
    %518 = cast(%var_4401, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
    %519 = cast(%var_4402, dtype="float32") /* ty=Tensor[(936), float32] */;
    %520 = reshape(%517, newshape=[15, 16, 13]) /* ty=Tensor[(15, 16, 13), uint8] */;
    %521 = reshape(%518, newshape=[15, 16, 13]) /* ty=Tensor[(15, 16, 13), uint8] */;
    %522 = reshape(%519, newshape=[8, 13, 9]) /* ty=Tensor[(8, 13, 9), float32] */;
    %523 = @func_1649(%520, %521, %522) /* ty=(Tensor[(15, 16, 13), uint8], Tensor[(924), float32], Tensor[(8, 13, 9), float32], Tensor[(8, 13, 9), int8], Tensor[(12, 11, 7), bool], Tensor[(36, 2), float64], Tensor[(8, 1, 9), float32]) */;
    %524 = @func_2932() /* ty=(Tensor[(10, 3, 14), uint16],) */;
    %525 = cast(%var_4401, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
    %526 = reshape(%525, newshape=[3120]) /* ty=Tensor[(3120), uint8] */;
    %527 = @func_3015(%526) /* ty=(Tensor[(13, 15, 5), bool], Tensor[(572), uint32], Tensor[(10, 3, 14), uint64], Tensor[(11, 52), float32], Tensor[(12, 11, 7), bool], Tensor[(3120), uint8], Tensor[(936), float32]) */;
    %528 = add(%515, %516) /* ty=Tensor[(10, 3, 14), float64] */;
    %529 = %523.4;
    %530 = %524.0;
    %531 = %527.3;
    (%528, %529, %var_4401, %var_4402, %530, %531)
  };
  %532(%var_4419, %var_4420, %var_4421) /* ty=(Tensor[(10, 3, 14), float64], Tensor[(12, 11, 7), bool], Tensor[(3120), uint8], Tensor[(936), float32], Tensor[(10, 3, 14), uint16], Tensor[(11, 52), float32]) */
}

def @func_3393() -> Tensor[(10, 3, 14), uint16] {
  %533 = fn () -> Tensor[(10, 3, 14), uint16] {
    @func_2681() /* ty=Tensor[(10, 3, 14), uint16] */
  };
  %533() /* ty=Tensor[(10, 3, 14), uint16] */
}

def @func_2551(%var_2549: Tensor[(16, 14, 4), float32]) -> Tensor[(16, 14, 4), float32] {
  @func_2548(%var_2549) /* ty=Tensor[(16, 14, 4), float32] */
}

def @func_5590() -> (Tensor[(10, 3, 14), uint16], Tensor[(8, 13, 9), int32], Tensor[(72), float64], Tensor[(936), float32]) {
  %544 = fn () -> (Tensor[(10, 3, 14), uint16], Tensor[(8, 13, 9), int32], Tensor[(72), float64], Tensor[(936), float32]) {
    %534 = @func_3099() /* ty=(Tensor[(10, 3, 14), uint16],) */;
    %535 = cast(meta[relay.Constant][31] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
    %536 = cast(meta[relay.Constant][31] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
    %537 = cast(meta[relay.Constant][32] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
    %538 = reshape(%535, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), float64] */;
    %539 = reshape(%536, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), float64] */;
    %540 = reshape(%537, newshape=[8, 13, 9]) /* ty=Tensor[(8, 13, 9), float32] */;
    %541 = @func_811(%538, %539, %540) /* ty=(Tensor[(4, 2, 9), float64], Tensor[(12, 11, 7), bool], Tensor[(924), float32], Tensor[(572), float64], Tensor[(8, 13, 9), int32], Tensor[(4, 13, 11), int64]) */;
    %542 = %534.0;
    %543 = %541.4;
    (%542, %543, meta[relay.Constant][31] /* ty=Tensor[(72), float64] */, meta[relay.Constant][32] /* ty=Tensor[(936), float32] */)
  };
  %544() /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(8, 13, 9), int32], Tensor[(72), float64], Tensor[(936), float32]) */
}

def @func_5014(%var_5012: bool, %var_5013: Tensor[(14, 3, 10), bool]) -> Tensor[(14, 3, 10), uint64] {
  @func_5010(%var_5012, %var_5013) /* ty=Tensor[(14, 3, 10), uint64] */
}

def @func_2223(%var_2220: Tensor[(5, 5, 11), float64], %var_2221: Tensor[(924), float32], %var_2222: Tensor[(572), int8]) -> (Tensor[(10, 5, 4), int64], Tensor[(200), int64], Tensor[(924), float32], Tensor[(10, 5, 4), int64], Tensor[(8, 13, 9), float32], Tensor[(3120), uint8], Tensor[(36, 26), float32], Tensor[(924), float32], Tensor[(72), float64], Tensor[(8, 13, 9), float32], Tensor[(924), float32], Tensor[(5, 5, 11), bool], Tensor[(12, 11, 7), bool], Tensor[(8, 13, 9), float32], Tensor[(5, 5, 11), float32], Tensor[(572), float64], Tensor[(572), float64], Tensor[(5, 5, 11), float64], Tensor[(10, 5, 4), int64], Tensor[(12, 11, 7), bool], Tensor[(8, 1, 9), float32], Tensor[(5, 5, 11), bool]) {
  %645 = fn (%var_2064: Tensor[(5, 5, 11), float64], %var_2080: Tensor[(924), float32], %var_2139: Tensor[(572), int8]) -> (Tensor[(10, 5, 4), int64], Tensor[(200), int64], Tensor[(924), float32], Tensor[(10, 5, 4), int64], Tensor[(8, 13, 9), float32], Tensor[(3120), uint8], Tensor[(36, 26), float32], Tensor[(924), float32], Tensor[(72), float64], Tensor[(8, 13, 9), float32], Tensor[(924), float32], Tensor[(5, 5, 11), bool], Tensor[(12, 11, 7), bool], Tensor[(8, 13, 9), float32], Tensor[(5, 5, 11), float32], Tensor[(572), float64], Tensor[(572), float64], Tensor[(5, 5, 11), float64], Tensor[(10, 5, 4), int64], Tensor[(12, 11, 7), bool], Tensor[(8, 1, 9), float32], Tensor[(5, 5, 11), bool]) {
    %545 = cast(meta[relay.Constant][33] /* ty=Tensor[(200), int64] */, dtype="int64") /* ty=Tensor[(200), int64] */;
    %546 = cast(%var_2080, dtype="float32") /* ty=Tensor[(924), float32] */;
    %547 = reshape(%545, newshape=[10, 5, 4]) /* ty=Tensor[(10, 5, 4), int64] */;
    %548 = reshape(%546, newshape=[924]) /* ty=Tensor[(924), float32] */;
    %549 = @func_1409(%547, %548) /* ty=(Tensor[(10, 5, 4), int64], Tensor[(12, 11, 7), bool], Tensor[(924), float32]) */;
    %550 = %549.0;
    %551 = cast(%550, dtype="int64") /* ty=Tensor[(10, 5, 4), int64] */;
    %552 = cast(%var_2080, dtype="float32") /* ty=Tensor[(924), float32] */;
    %553 = reshape(%551, newshape=[10, 5, 4]) /* ty=Tensor[(10, 5, 4), int64] */;
    %554 = reshape(%552, newshape=[924]) /* ty=Tensor[(924), float32] */;
    %555 = @func_1409(%553, %554) /* ty=(Tensor[(10, 5, 4), int64], Tensor[(12, 11, 7), bool], Tensor[(924), float32]) */;
    %556 = cast(meta[relay.Constant][34] /* ty=Tensor[(3120), uint8] */, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
    %557 = cast(meta[relay.Constant][34] /* ty=Tensor[(3120), uint8] */, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
    %558 = cast(meta[relay.Constant][35] /* ty=Tensor[(36, 26), float32] */, dtype="float32") /* ty=Tensor[(36, 26), float32] */;
    %559 = reshape(%556, newshape=[15, 16, 13]) /* ty=Tensor[(15, 16, 13), uint8] */;
    %560 = reshape(%557, newshape=[15, 16, 13]) /* ty=Tensor[(15, 16, 13), uint8] */;
    %561 = reshape(%558, newshape=[8, 13, 9]) /* ty=Tensor[(8, 13, 9), float32] */;
    %562 = @func_1649(%559, %560, %561) /* ty=(Tensor[(15, 16, 13), uint8], Tensor[(924), float32], Tensor[(8, 13, 9), float32], Tensor[(8, 13, 9), int8], Tensor[(12, 11, 7), bool], Tensor[(36, 2), float64], Tensor[(8, 1, 9), float32]) */;
    %563 = cast(meta[relay.Constant][36] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
    %564 = cast(meta[relay.Constant][36] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
    %565 = cast(meta[relay.Constant][35] /* ty=Tensor[(36, 26), float32] */, dtype="float32") /* ty=Tensor[(36, 26), float32] */;
    %566 = reshape(%563, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), float64] */;
    %567 = reshape(%564, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), float64] */;
    %568 = reshape(%565, newshape=[8, 13, 9]) /* ty=Tensor[(8, 13, 9), float32] */;
    %569 = @func_811(%566, %567, %568) /* ty=(Tensor[(4, 2, 9), float64], Tensor[(12, 11, 7), bool], Tensor[(924), float32], Tensor[(572), float64], Tensor[(8, 13, 9), int32], Tensor[(4, 13, 11), int64]) */;
    %570 = %569.2;
    %571 = cast(%570, dtype="float32") /* ty=Tensor[(924), float32] */;
    %572 = reshape(%571, newshape=[924]) /* ty=Tensor[(924), float32] */;
    %573 = @func_648(%572) /* ty=(Tensor[(12, 11, 7), bool], Tensor[(12, 11, 7), bool], Tensor[(8, 13, 9), float32]) */;
    %574 = cast(meta[relay.Constant][33] /* ty=Tensor[(200), int64] */, dtype="int64") /* ty=Tensor[(200), int64] */;
    %575 = cast(%var_2080, dtype="float32") /* ty=Tensor[(924), float32] */;
    %576 = reshape(%574, newshape=[10, 5, 4]) /* ty=Tensor[(10, 5, 4), int64] */;
    %577 = reshape(%575, newshape=[924]) /* ty=Tensor[(924), float32] */;
    %578 = @func_1409(%576, %577) /* ty=(Tensor[(10, 5, 4), int64], Tensor[(12, 11, 7), bool], Tensor[(924), float32]) */;
    %579 = cast(%var_2064, dtype="float64") /* ty=Tensor[(5, 5, 11), float64] */;
    %580 = acosh(%579) /* ty=Tensor[(5, 5, 11), float64] */;
    %581 = cast(%580, dtype="float64") /* ty=Tensor[(5, 5, 11), float64] */;
    %582 = sigmoid(%581) /* ty=Tensor[(5, 5, 11), float64] */;
    %583 = cast(%var_2064, dtype="bool") /* ty=Tensor[(5, 5, 11), bool] */;
    %584 = shape_of(%582, dtype="int32") /* ty=Tensor[(3), int32] */;
    %585 = cast(%582, dtype="bool") /* ty=Tensor[(5, 5, 11), bool] */;
    %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %587 = %578.2;
    %588 = cast(%587, dtype="float32") /* ty=Tensor[(924), float32] */;
    %589 = cast(%587, dtype="float32") /* ty=Tensor[(924), float32] */;
    %590 = reshape(%588, newshape=[12, 11, 7]) /* ty=Tensor[(12, 11, 7), float32] */;
    %591 = reshape(%589, newshape=[12, 11, 7]) /* ty=Tensor[(12, 11, 7), float32] */;
    %592 = @func_392(%590, %591) /* ty=(Tensor[(12, 11, 7), bool],) */;
    %593 = cast(%var_2139, dtype="int8") /* ty=Tensor[(572), int8] */;
    %594 = cast(%var_2139, dtype="int8") /* ty=Tensor[(572), int8] */;
    %595 = reshape(%593, newshape=[4, 13, 11]) /* ty=Tensor[(4, 13, 11), int8] */;
    %596 = reshape(%594, newshape=[4, 13, 11]) /* ty=Tensor[(4, 13, 11), int8] */;
    %597 = @func_733(%595, %596) /* ty=(Tensor[(4, 13, 11), int8], Tensor[(4, 13, 11), int64], Tensor[(8, 13, 9), float32], Tensor[(924), float32]) */;
    %598 = cast(%580, dtype="float32") /* ty=Tensor[(5, 5, 11), float32] */;
    %599 = cast(%var_2139, dtype="float64") /* ty=Tensor[(572), float64] */;
    %600 = cast(meta[relay.Constant][36] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
    %601 = cast(meta[relay.Constant][36] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
    %602 = %597.2;
    %603 = cast(%602, dtype="float32") /* ty=Tensor[(8, 13, 9), float32] */;
    %604 = reshape(%600, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), float64] */;
    %605 = reshape(%601, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), float64] */;
    %606 = reshape(%603, newshape=[8, 13, 9]) /* ty=Tensor[(8, 13, 9), float32] */;
    %607 = @func_811(%604, %605, %606) /* ty=(Tensor[(4, 2, 9), float64], Tensor[(12, 11, 7), bool], Tensor[(924), float32], Tensor[(572), float64], Tensor[(8, 13, 9), int32], Tensor[(4, 13, 11), int64]) */;
    %608 = cast(%var_2064, dtype="uint32") /* ty=Tensor[(5, 5, 11), uint32] */;
    %609 = shape_of(%582, dtype="int32") /* ty=Tensor[(3), int32] */;
    %610 = cast(%582, dtype="uint32") /* ty=Tensor[(5, 5, 11), uint32] */;
    %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %612 = logical_xor(%610, %611) /* ty=Tensor[(5, 5, 11), uint32] */;
    %613 = cast(%612, dtype="float32") /* ty=Tensor[(5, 5, 11), float32] */;
    %614 = log(%613) /* ty=Tensor[(5, 5, 11), float32] */;
    %615 = cast(%614, dtype="float64") /* ty=Tensor[(5, 5, 11), float64] */;
    %616 = %555.0;
    %617 = cast(%616, dtype="int64") /* ty=Tensor[(10, 5, 4), int64] */;
    %618 = cast(%570, dtype="float32") /* ty=Tensor[(924), float32] */;
    %619 = reshape(%617, newshape=[10, 5, 4]) /* ty=Tensor[(10, 5, 4), int64] */;
    %620 = reshape(%618, newshape=[924]) /* ty=Tensor[(924), float32] */;
    %621 = @func_1409(%619, %620) /* ty=(Tensor[(10, 5, 4), int64], Tensor[(12, 11, 7), bool], Tensor[(924), float32]) */;
    %622 = cast(%550, dtype="int64") /* ty=Tensor[(10, 5, 4), int64] */;
    %623 = cast(%var_2080, dtype="float32") /* ty=Tensor[(924), float32] */;
    %624 = reshape(%622, newshape=[10, 5, 4]) /* ty=Tensor[(10, 5, 4), int64] */;
    %625 = reshape(%623, newshape=[924]) /* ty=Tensor[(924), float32] */;
    %626 = @func_1409(%624, %625) /* ty=(Tensor[(10, 5, 4), int64], Tensor[(12, 11, 7), bool], Tensor[(924), float32]) */;
    %627 = cast(meta[relay.Constant][36] /* ty=Tensor[(72), float64] */, dtype="float32") /* ty=Tensor[(72), float32] */;
    %628 = reshape(%627, newshape=[8, 1, 9]) /* ty=Tensor[(8, 1, 9), float32] */;
    %629 = cast(%582, dtype="bool") /* ty=Tensor[(5, 5, 11), bool] */;
    %630 = shape_of(%614, dtype="int32") /* ty=Tensor[(3), int32] */;
    %631 = cast(%614, dtype="bool") /* ty=Tensor[(5, 5, 11), bool] */;
    %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %633 = %562.2;
    %634 = %573.2;
    %635 = not_equal(%585, %586) /* ty=Tensor[(5, 5, 11), bool] */;
    %636 = %592.0;
    %637 = cos(%598) /* ty=Tensor[(5, 5, 11), float32] */;
    %638 = asin(%599) /* ty=Tensor[(572), float64] */;
    %639 = %607.3;
    %640 = tan(%615) /* ty=Tensor[(5, 5, 11), float64] */;
    %641 = %621.0;
    %642 = %626.1;
    %643 = @func_1124(%628) /* ty=Tensor[(8, 1, 9), float32] */;
    %644 = greater_equal(%631, %632) /* ty=Tensor[(5, 5, 11), bool] */;
    (%550, meta[relay.Constant][33] /* ty=Tensor[(200), int64] */, %var_2080, %616, %633, meta[relay.Constant][34] /* ty=Tensor[(3120), uint8] */, meta[relay.Constant][35] /* ty=Tensor[(36, 26), float32] */, %570, meta[relay.Constant][36] /* ty=Tensor[(72), float64] */, %634, %587, %635, %636, %602, %637, %638, %639, %640, %641, %642, %643, %644)
  };
  %645(%var_2220, %var_2221, %var_2222) /* ty=(Tensor[(10, 5, 4), int64], Tensor[(200), int64], Tensor[(924), float32], Tensor[(10, 5, 4), int64], Tensor[(8, 13, 9), float32], Tensor[(3120), uint8], Tensor[(36, 26), float32], Tensor[(924), float32], Tensor[(72), float64], Tensor[(8, 13, 9), float32], Tensor[(924), float32], Tensor[(5, 5, 11), bool], Tensor[(12, 11, 7), bool], Tensor[(8, 13, 9), float32], Tensor[(5, 5, 11), float32], Tensor[(572), float64], Tensor[(572), float64], Tensor[(5, 5, 11), float64], Tensor[(10, 5, 4), int64], Tensor[(12, 11, 7), bool], Tensor[(8, 1, 9), float32], Tensor[(5, 5, 11), bool]) */
}

def @func_4102() -> (Tensor[(10, 3, 14), uint16],) {
  %646 = @func_4085() /* ty=Tensor[(10, 3, 14), uint16] */;
  (%646,)
}

def @func_6172(%var_6170: Tensor[(8, 15, 9), uint64], %var_6171: Tensor[(8, 15, 9), uint64]) -> (Tensor[(8, 15, 9), bool], Tensor[(10, 3, 14), uint16], Tensor[(924), float32], Tensor[(286, 2), int8], Tensor[(8, 15, 9), uint64], Tensor[(10, 3, 14), uint16]) {
  %671 = fn (%var_6134: Tensor[(8, 15, 9), uint64], %var_6135: Tensor[(8, 15, 9), uint64]) -> (Tensor[(8, 15, 9), bool], Tensor[(10, 3, 14), uint16], Tensor[(924), float32], Tensor[(286, 2), int8], Tensor[(8, 15, 9), uint64], Tensor[(10, 3, 14), uint16]) {
    %647 = cast(%var_6135, dtype="bool") /* ty=Tensor[(8, 15, 9), bool] */;
    %648 = shape_of(%var_6134, dtype="int32") /* ty=Tensor[(3), int32] */;
    %649 = cast(%var_6134, dtype="bool") /* ty=Tensor[(8, 15, 9), bool] */;
    %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %651 = @func_3858() /* ty=(Tensor[(10, 3, 14), uint16],) */;
    %652 = cast(meta[relay.Constant][37] /* ty=Tensor[(286, 2), int8] */, dtype="int8") /* ty=Tensor[(286, 2), int8] */;
    %653 = cast(meta[relay.Constant][37] /* ty=Tensor[(286, 2), int8] */, dtype="int8") /* ty=Tensor[(286, 2), int8] */;
    %654 = reshape(%652, newshape=[4, 13, 11]) /* ty=Tensor[(4, 13, 11), int8] */;
    %655 = reshape(%653, newshape=[4, 13, 11]) /* ty=Tensor[(4, 13, 11), int8] */;
    %656 = @func_733(%654, %655) /* ty=(Tensor[(4, 13, 11), int8], Tensor[(4, 13, 11), int64], Tensor[(8, 13, 9), float32], Tensor[(924), float32]) */;
    %657 = cast(%var_6134, dtype="uint64") /* ty=Tensor[(8, 15, 9), uint64] */;
    %658 = shape_of(%var_6135, dtype="int32") /* ty=Tensor[(3), int32] */;
    %659 = cast(%var_6135, dtype="uint64") /* ty=Tensor[(8, 15, 9), uint64] */;
    %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %661 = %651.0;
    %662 = cast(%661, dtype="uint16") /* ty=Tensor[(10, 3, 14), uint16] */;
    %663 = cast(%661, dtype="uint16") /* ty=Tensor[(10, 3, 14), uint16] */;
    %664 = reshape(%662, newshape=[10, 3, 14]) /* ty=Tensor[(10, 3, 14), uint16] */;
    %665 = reshape(%663, newshape=[10, 3, 14]) /* ty=Tensor[(10, 3, 14), uint16] */;
    %666 = @func_3235(%664, %665) /* ty=(Tensor[(10, 3, 14), bool], Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), bool]) */;
    %667 = less_equal(%649, %650) /* ty=Tensor[(8, 15, 9), bool] */;
    %668 = %656.3;
    %669 = bitwise_or(%659, %660) /* ty=Tensor[(8, 15, 9), uint64] */;
    %670 = %666.2;
    (%667, %661, %668, meta[relay.Constant][37] /* ty=Tensor[(286, 2), int8] */, %669, %670)
  };
  %671(%var_6170, %var_6171) /* ty=(Tensor[(8, 15, 9), bool], Tensor[(10, 3, 14), uint16], Tensor[(924), float32], Tensor[(286, 2), int8], Tensor[(8, 15, 9), uint64], Tensor[(10, 3, 14), uint16]) */
}

def @func_5854() -> (Tensor[(10, 3, 14), uint16], Tensor[(13, 15, 5), float64], Tensor[(13, 15, 5), float64]) {
  %672 = cast(meta[relay.Constant][38] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %673 = reshape(%672, newshape=[]) /* ty=int8 */;
  %674 = @func_929(%673) /* ty=(Tensor[(13, 15, 5), bool], Tensor[(13, 15, 5), float32]) */;
  %675 = %674.1;
  %676 = cast(meta[relay.Constant][38] /* ty=int8 */, dtype="float64") /* ty=float64 */;
  %677 = cast(%675, dtype="float64") /* ty=Tensor[(13, 15, 5), float64] */;
  %678 = cast(%675, dtype="float64") /* ty=Tensor[(13, 15, 5), float64] */;
  %679 = cast(meta[relay.Constant][38] /* ty=int8 */, dtype="float64") /* ty=float64 */;
  %680 = @func_2853() /* ty=Tensor[(10, 3, 14), uint16] */;
  %681 = minimum(%676, %677) /* ty=Tensor[(13, 15, 5), float64] */;
  %682 = floor_mod(%678, %679) /* ty=Tensor[(13, 15, 5), float64] */;
  (%680, %681, %682)
}

def @func_4517() -> (Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16], Tensor[(896), bool], Tensor[(10, 3, 14), bool]) {
  %702 = fn () -> (Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16], Tensor[(896), bool], Tensor[(10, 3, 14), bool]) {
    %683 = @func_4116() /* ty=(Tensor[(10, 3, 14), uint16],) */;
    %684 = @func_2932() /* ty=(Tensor[(10, 3, 14), uint16],) */;
    %685 = cast(meta[relay.Constant][39] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %686 = reshape(%685, newshape=[]) /* ty=int8 */;
    %687 = @func_4361(%686) /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16], Tensor[(13, 15, 5), float32], int8, Tensor[(16, 14, 4), float32], Tensor[(896), float32]) */;
    %688 = %687.5;
    %689 = cast(%688, dtype="bool") /* ty=Tensor[(896), bool] */;
    %690 = cast(meta[relay.Constant][39] /* ty=int8 */, dtype="bool") /* ty=bool */;
    %691 = @func_4250() /* ty=(Tensor[(10, 3, 14), uint16],) */;
    %692 = %691.0;
    %693 = @func_3392() /* ty=Tensor[(10, 3, 14), uint16] */;
    %694 = cast(%693, dtype="bool") /* ty=Tensor[(10, 3, 14), bool] */;
    %695 = shape_of(%692, dtype="int32") /* ty=Tensor[(3), int32] */;
    %696 = cast(%692, dtype="bool") /* ty=Tensor[(10, 3, 14), bool] */;
    %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %698 = %683.0;
    %699 = %684.0;
    %700 = equal(%689, %690) /* ty=Tensor[(896), bool] */;
    %701 = less_equal(%696, %697) /* ty=Tensor[(10, 3, 14), bool] */;
    (%698, %699, %700, %701)
  };
  %702() /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16], Tensor[(896), bool], Tensor[(10, 3, 14), bool]) */
}

def @func_4604() -> (Tensor[(10, 3, 14), uint16],) {
  @func_4602() /* ty=(Tensor[(10, 3, 14), uint16],) */
}

def @func_6578() -> (Tensor[(10, 3, 14), uint16],) {
  @func_6576() /* ty=(Tensor[(10, 3, 14), uint16],) */
}

def @func_6526(%var_6525: Tensor[(6, 1, 14), int16]) -> (Tensor[(6, 14, 14), bool],) {
  %706 = fn (%var_6504: Tensor[(6, 1, 14), int16]) -> (Tensor[(6, 14, 14), bool],) {
    %703 = cast(%var_6504, dtype="bool") /* ty=Tensor[(6, 1, 14), bool] */;
    %704 = cast(meta[relay.Constant][40] /* ty=Tensor[(6, 14, 14), int16] */, dtype="bool") /* ty=Tensor[(6, 14, 14), bool] */;
    %705 = greater_equal(%703, %704) /* ty=Tensor[(6, 14, 14), bool] */;
    (%705,)
  };
  %706(%var_6525) /* ty=(Tensor[(6, 14, 14), bool],) */
}

def @func_6588() -> Tensor[(10, 3, 14), float32] {
  %708 = fn () -> Tensor[(10, 3, 14), float32] {
    %707 = @func_6492() /* ty=(Tensor[(10, 3, 14), float32],) */;
    %707.0
  };
  %708() /* ty=Tensor[(10, 3, 14), float32] */
}

def @func_3321() -> (Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), float32]) {
  @func_3319() /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), float32]) */
}

def @func_5558() -> (Tensor[(10, 3, 14), uint16],) {
  %710 = fn () -> (Tensor[(10, 3, 14), uint16],) {
    %709 = @func_4085() /* ty=Tensor[(10, 3, 14), uint16] */;
    (%709,)
  };
  %710() /* ty=(Tensor[(10, 3, 14), uint16],) */
}

def @func_3162() -> Tensor[(10, 3, 14), uint16] {
  %711 = @func_3099() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %711.0
}

def @func_932(%var_930: int8) -> (Tensor[(13, 15, 5), bool], Tensor[(13, 15, 5), float32]) {
  @func_929(%var_930) /* ty=(Tensor[(13, 15, 5), bool], Tensor[(13, 15, 5), float32]) */
}

def @func_4663() -> Tensor[(10, 3, 14), uint16] {
  @func_4661() /* ty=Tensor[(10, 3, 14), uint16] */
}

def @func_5530(%var_5528: Tensor[(10, 3, 14), float32], %var_5529: Tensor[(462, 2), float32]) -> (Tensor[(10, 3, 14), int16], Tensor[(10, 3, 14), float64], Tensor[(10, 3, 14), uint16], Tensor[(12, 11, 7), bool], Tensor[(462, 2), float32], Tensor[(10, 3, 14), uint16]) {
  %728 = fn (%var_5477: Tensor[(10, 3, 14), float32], %var_5499: Tensor[(462, 2), float32]) -> (Tensor[(10, 3, 14), int16], Tensor[(10, 3, 14), float64], Tensor[(10, 3, 14), uint16], Tensor[(12, 11, 7), bool], Tensor[(462, 2), float32], Tensor[(10, 3, 14), uint16]) {
    %712 = @func_4575() /* ty=Tensor[(10, 3, 14), float32] */;
    %713 = cast(%var_5477, dtype="int16") /* ty=Tensor[(10, 3, 14), int16] */;
    %714 = shape_of(%712, dtype="int32") /* ty=Tensor[(3), int32] */;
    %715 = cast(%712, dtype="int16") /* ty=Tensor[(10, 3, 14), int16] */;
    %716 = dyn.reshape(%713, %714, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %717 = cast(%var_5477, dtype="float64") /* ty=Tensor[(10, 3, 14), float64] */;
    %718 = @func_4250() /* ty=(Tensor[(10, 3, 14), uint16],) */;
    %719 = cast(%var_5499, dtype="float32") /* ty=Tensor[(462, 2), float32] */;
    %720 = reshape(%719, newshape=[924]) /* ty=Tensor[(924), float32] */;
    %721 = @func_648(%720) /* ty=(Tensor[(12, 11, 7), bool], Tensor[(12, 11, 7), bool], Tensor[(8, 13, 9), float32]) */;
    %722 = @func_3099() /* ty=(Tensor[(10, 3, 14), uint16],) */;
    %723 = multiply(%715, %716) /* ty=Tensor[(10, 3, 14), int16] */;
    %724 = sqrt(%717) /* ty=Tensor[(10, 3, 14), float64] */;
    %725 = %718.0;
    %726 = %721.1;
    %727 = %722.0;
    (%723, %724, %725, %726, %var_5499, %727)
  };
  %728(%var_5528, %var_5529) /* ty=(Tensor[(10, 3, 14), int16], Tensor[(10, 3, 14), float64], Tensor[(10, 3, 14), uint16], Tensor[(12, 11, 7), bool], Tensor[(462, 2), float32], Tensor[(10, 3, 14), uint16]) */
}

def @func_929(%var_919: int8) -> (Tensor[(13, 15, 5), bool], Tensor[(13, 15, 5), float32]) {
  %729 = cast(%var_919, dtype="bool") /* ty=bool */;
  %730 = cast(meta[relay.Constant][41] /* ty=Tensor[(13, 15, 5), int8] */, dtype="bool") /* ty=Tensor[(13, 15, 5), bool] */;
  %731 = cast(meta[relay.Constant][41] /* ty=Tensor[(13, 15, 5), int8] */, dtype="float32") /* ty=Tensor[(13, 15, 5), float32] */;
  %732 = equal(%729, %730) /* ty=Tensor[(13, 15, 5), bool] */;
  %733 = sqrt(%731) /* ty=Tensor[(13, 15, 5), float32] */;
  (%732, %733)
}

def @func_5088(%var_5086: Tensor[(936), float32]) -> Tensor[(936), int64] {
  @func_5085(%var_5086) /* ty=Tensor[(936), int64] */
}

def @func_2891(%var_2884: Tensor[(572), int8]) -> (Tensor[(10, 3, 14), uint16], Tensor[(924), float32], Tensor[(572), uint32]) {
  %734 = cast(meta[relay.Constant][42] /* ty=Tensor[(572), int8] */, dtype="int8") /* ty=Tensor[(572), int8] */;
  %735 = cast(meta[relay.Constant][42] /* ty=Tensor[(572), int8] */, dtype="int8") /* ty=Tensor[(572), int8] */;
  %736 = reshape(%734, newshape=[4, 13, 11]) /* ty=Tensor[(4, 13, 11), int8] */;
  %737 = reshape(%735, newshape=[4, 13, 11]) /* ty=Tensor[(4, 13, 11), int8] */;
  %738 = @func_733(%736, %737) /* ty=(Tensor[(4, 13, 11), int8], Tensor[(4, 13, 11), int64], Tensor[(8, 13, 9), float32], Tensor[(924), float32]) */;
  %739 = cast(%var_2884, dtype="uint32") /* ty=Tensor[(572), uint32] */;
  %740 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(572), int8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %741 = cast(meta[relay.Constant][42] /* ty=Tensor[(572), int8] */, dtype="uint32") /* ty=Tensor[(572), uint32] */;
  %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %743 = @func_2681() /* ty=Tensor[(10, 3, 14), uint16] */;
  %744 = %738.3;
  %745 = logical_xor(%741, %742) /* ty=Tensor[(572), uint32] */;
  (%743, %744, %745)
}

def @func_5992(%var_5990: Tensor[(1, 10, 5), int8], %var_5991: Tensor[(9, 10, 5), int8]) -> (Tensor[(9, 10, 5), bool],) {
  @func_5988(%var_5990, %var_5991) /* ty=(Tensor[(9, 10, 5), bool],) */
}

def @func_3412() -> (Tensor[(10, 3, 14), uint16],) {
  @func_3410() /* ty=(Tensor[(10, 3, 14), uint16],) */
}

def @func_6198(%var_6191: Tensor[(3120), uint8]) -> (Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), bool], Tensor[(572), uint32], Tensor[(3120), int8]) {
  %746 = @func_3031() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %747 = @func_4516() /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16], Tensor[(896), bool], Tensor[(10, 3, 14), bool]) */;
  %748 = cast(meta[relay.Constant][43] /* ty=Tensor[(3120), uint8] */, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
  %749 = reshape(%748, newshape=[3120]) /* ty=Tensor[(3120), uint8] */;
  %750 = @func_3479(%749) /* ty=(Tensor[(572), uint32], Tensor[(3120), uint8], Tensor[(10, 3, 14), bool], Tensor[(10, 3, 14), uint64]) */;
  %751 = cast(%var_6191, dtype="int8") /* ty=Tensor[(3120), int8] */;
  %752 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(3120), uint8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %753 = cast(meta[relay.Constant][43] /* ty=Tensor[(3120), uint8] */, dtype="int8") /* ty=Tensor[(3120), int8] */;
  %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?), int8] */;
  %755 = %746.0;
  %756 = %747.3;
  %757 = %750.0;
  %758 = bitwise_or(%753, %754) /* ty=Tensor[(3120), int8] */;
  (%755, %756, %757, %758)
}

def @func_4728(%var_4666: Tensor[(3, 14, 2), float64], %var_4667: Tensor[(3, 14, 2), float64]) -> (Tensor[(3, 14, 2), float64], Tensor[(936), float32], Tensor[(924), float32], Tensor[(1, 200), int64], Tensor[(924), float32]) {
  %759 = cast(%var_4667, dtype="float64") /* ty=Tensor[(3, 14, 2), float64] */;
  %760 = shape_of(%var_4666, dtype="int32") /* ty=Tensor[(3), int32] */;
  %761 = cast(%var_4666, dtype="float64") /* ty=Tensor[(3, 14, 2), float64] */;
  %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %763 = @func_3816() /* ty=(Tensor[(936), float32],) */;
  %764 = cast(meta[relay.Constant][44] /* ty=Tensor[(1, 200), int64] */, dtype="int64") /* ty=Tensor[(1, 200), int64] */;
  %765 = cast(meta[relay.Constant][45] /* ty=Tensor[(924), float32] */, dtype="float32") /* ty=Tensor[(924), float32] */;
  %766 = reshape(%764, newshape=[10, 5, 4]) /* ty=Tensor[(10, 5, 4), int64] */;
  %767 = reshape(%765, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %768 = @func_1409(%766, %767) /* ty=(Tensor[(10, 5, 4), int64], Tensor[(12, 11, 7), bool], Tensor[(924), float32]) */;
  %769 = floor_mod(%761, %762) /* ty=Tensor[(3, 14, 2), float64] */;
  %770 = %763.0;
  %771 = %768.2;
  (%769, %770, %771, meta[relay.Constant][44] /* ty=Tensor[(1, 200), int64] */, meta[relay.Constant][45] /* ty=Tensor[(924), float32] */)
}

def @func_4085() -> Tensor[(10, 3, 14), uint16] {
  @func_3162() /* ty=Tensor[(10, 3, 14), uint16] */
}

def @func_5740() -> (Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16]) {
  %772 = @func_3729() /* ty=Tensor[(10, 3, 14), uint16] */;
  %773 = @func_4661() /* ty=Tensor[(10, 3, 14), uint16] */;
  (%772, %773)
}

def @func_6698() -> (Tensor[(10, 3, 14), uint16],) {
  %775 = fn () -> (Tensor[(10, 3, 14), uint16],) {
    %774 = @func_4987() /* ty=Tensor[(10, 3, 14), uint16] */;
    (%774,)
  };
  %775() /* ty=(Tensor[(10, 3, 14), uint16],) */
}

def @func_6631(%var_6626: float64) -> Tensor[(8, 10, 15), float64] {
  %776 = cast(%var_6626, dtype="float64") /* ty=float64 */;
  %777 = cast(meta[relay.Constant][46] /* ty=Tensor[(8, 10, 15), float64] */, dtype="float64") /* ty=Tensor[(8, 10, 15), float64] */;
  floor_divide(%776, %777) /* ty=Tensor[(8, 10, 15), float64] */
}

def @func_4118() -> (Tensor[(10, 3, 14), uint16],) {
  @func_4116() /* ty=(Tensor[(10, 3, 14), uint16],) */
}

def @func_2894(%var_2892: Tensor[(572), int8]) -> (Tensor[(10, 3, 14), uint16], Tensor[(924), float32], Tensor[(572), uint32]) {
  @func_2891(%var_2892) /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(924), float32], Tensor[(572), uint32]) */
}

def @func_4116() -> (Tensor[(10, 3, 14), uint16],) {
  %778 = @func_4085() /* ty=Tensor[(10, 3, 14), uint16] */;
  (%778,)
}

def @func_6824() -> (Tensor[(10, 3, 14), uint16],) {
  %781 = fn () -> (Tensor[(10, 3, 14), uint16],) {
    %779 = @func_4116() /* ty=(Tensor[(10, 3, 14), uint16],) */;
    %780 = %779.0;
    (%780,)
  };
  %781() /* ty=(Tensor[(10, 3, 14), uint16],) */
}

def @func_5085(%var_5077: Tensor[(936), float32]) -> Tensor[(936), int64] {
  %782 = @func_3816() /* ty=(Tensor[(936), float32],) */;
  %783 = %782.0;
  %784 = cast(%var_5077, dtype="int64") /* ty=Tensor[(936), int64] */;
  %785 = shape_of(%783, dtype="int32") /* ty=Tensor[(1), int32] */;
  %786 = cast(%783, dtype="int64") /* ty=Tensor[(936), int64] */;
  %787 = dyn.reshape(%784, %785, newshape=[]) /* ty=Tensor[(?), int64] */;
  bitwise_xor(%786, %787) /* ty=Tensor[(936), int64] */
}

def @func_6409(%var_6385: Tensor[(10, 1, 11), float64], %var_6397: Tensor[(10, 12, 11), float64]) -> (Tensor[(10, 12, 11), float32],) {
  %788 = cast(%var_6385, dtype="float64") /* ty=Tensor[(10, 1, 11), float64] */;
  %789 = atanh(%788) /* ty=Tensor[(10, 1, 11), float64] */;
  %790 = cast(%789, dtype="float32") /* ty=Tensor[(10, 1, 11), float32] */;
  %791 = cast(%var_6397, dtype="float32") /* ty=Tensor[(10, 12, 11), float32] */;
  %792 = floor_divide(%790, %791) /* ty=Tensor[(10, 12, 11), float32] */;
  (%792,)
}

def @func_5296(%var_5294: Tensor[(2, 1, 12), bool], %var_5295: Tensor[(2, 9, 12), bool]) -> (Tensor[(2, 9, 12), bool], Tensor[(10, 3, 14), float32], Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16], Tensor[(2, 9, 12), float32]) {
  %803 = fn (%var_5263: Tensor[(2, 1, 12), bool], %var_5264: Tensor[(2, 9, 12), bool]) -> (Tensor[(2, 9, 12), bool], Tensor[(10, 3, 14), float32], Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16], Tensor[(2, 9, 12), float32]) {
    %793 = cast(%var_5263, dtype="bool") /* ty=Tensor[(2, 1, 12), bool] */;
    %794 = cast(%var_5264, dtype="bool") /* ty=Tensor[(2, 9, 12), bool] */;
    %795 = @func_4250() /* ty=(Tensor[(10, 3, 14), uint16],) */;
    %796 = @func_4102() /* ty=(Tensor[(10, 3, 14), uint16],) */;
    %797 = cast(%var_5264, dtype="float32") /* ty=Tensor[(2, 9, 12), float32] */;
    %798 = logical_or(%793, %794) /* ty=Tensor[(2, 9, 12), bool] */;
    %799 = @func_4575() /* ty=Tensor[(10, 3, 14), float32] */;
    %800 = %795.0;
    %801 = %796.0;
    %802 = asin(%797) /* ty=Tensor[(2, 9, 12), float32] */;
    (%798, %799, %800, %801, %802)
  };
  %803(%var_5294, %var_5295) /* ty=(Tensor[(2, 9, 12), bool], Tensor[(10, 3, 14), float32], Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16], Tensor[(2, 9, 12), float32]) */
}

def @func_4087() -> Tensor[(10, 3, 14), uint16] {
  @func_4085() /* ty=Tensor[(10, 3, 14), uint16] */
}

def @func_5807(%var_5798: Tensor[(3600), float32], %var_5802: Tensor[(3120), uint8]) -> (Tensor[(10, 3, 14), uint16], Tensor[(15, 16, 15), bool], Tensor[(5), bool], Tensor[(750, 1), bool], Tensor[(3600), float32], Tensor[(8, 13, 9), float32], Tensor[(3120), uint8], Tensor[(936), float32]) {
  %804 = @func_3099() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %805 = cast(meta[relay.Constant][47] /* ty=Tensor[(5), bool] */, dtype="bool") /* ty=Tensor[(5), bool] */;
  %806 = cast(meta[relay.Constant][48] /* ty=Tensor[(750, 1), bool] */, dtype="bool") /* ty=Tensor[(750, 1), bool] */;
  %807 = cast(%var_5798, dtype="float32") /* ty=Tensor[(3600), float32] */;
  %808 = cast(meta[relay.Constant][48] /* ty=Tensor[(750, 1), bool] */, dtype="float64") /* ty=Tensor[(750, 1), float64] */;
  %809 = reshape(%805, newshape=[1, 5, 1]) /* ty=Tensor[(1, 5, 1), bool] */;
  %810 = reshape(%806, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), bool] */;
  %811 = reshape(%807, newshape=[3600]) /* ty=Tensor[(3600), float32] */;
  %812 = reshape(%808, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), float64] */;
  %813 = @func_4958(%809, %810, %811, %812) /* ty=(Tensor[(15, 16, 15), bool], Tensor[(3600), float32], Tensor[(12, 11, 7), bool], Tensor[(72, 1), float64], Tensor[(936), float32], Tensor[(8, 1, 9), float32], Tensor[(10, 5, 15), int64], Tensor[(10, 3, 14), uint16], Tensor[(10, 5, 15), bool], Tensor[(10, 3, 14), float32], Tensor[(10, 3, 14), uint16], Tensor[(10, 5, 15), int8], Tensor[(10, 3, 14), uint16]) */;
  %814 = cast(%var_5802, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
  %815 = cast(%var_5802, dtype="uint8") /* ty=Tensor[(3120), uint8] */;
  %816 = cast(meta[relay.Constant][49] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
  %817 = reshape(%814, newshape=[15, 16, 13]) /* ty=Tensor[(15, 16, 13), uint8] */;
  %818 = reshape(%815, newshape=[15, 16, 13]) /* ty=Tensor[(15, 16, 13), uint8] */;
  %819 = reshape(%816, newshape=[8, 13, 9]) /* ty=Tensor[(8, 13, 9), float32] */;
  %820 = @func_1649(%817, %818, %819) /* ty=(Tensor[(15, 16, 13), uint8], Tensor[(924), float32], Tensor[(8, 13, 9), float32], Tensor[(8, 13, 9), int8], Tensor[(12, 11, 7), bool], Tensor[(36, 2), float64], Tensor[(8, 1, 9), float32]) */;
  %821 = %804.0;
  %822 = %813.0;
  %823 = %820.2;
  (%821, %822, meta[relay.Constant][47] /* ty=Tensor[(5), bool] */, meta[relay.Constant][48] /* ty=Tensor[(750, 1), bool] */, %var_5798, %823, %var_5802, meta[relay.Constant][49] /* ty=Tensor[(936), float32] */)
}

def @func_6260() -> Tensor[(10, 3, 14), uint16] {
  @func_4661() /* ty=Tensor[(10, 3, 14), uint16] */
}

def @func_395(%var_393: Tensor[(12, 11, 7), float32], %var_394: Tensor[(12, 11, 7), float32]) -> (Tensor[(12, 11, 7), bool],) {
  %831 = fn (%var_381: Tensor[(12, 11, 7), float32], %var_388: Tensor[(12, 11, 7), float32]) -> (Tensor[(12, 11, 7), bool],) {
    %824 = cast(%var_381, dtype="float32") /* ty=Tensor[(12, 11, 7), float32] */;
    %825 = tan(%824) /* ty=Tensor[(12, 11, 7), float32] */;
    %826 = cast(%var_388, dtype="bool") /* ty=Tensor[(12, 11, 7), bool] */;
    %827 = shape_of(%825, dtype="int32") /* ty=Tensor[(3), int32] */;
    %828 = cast(%825, dtype="bool") /* ty=Tensor[(12, 11, 7), bool] */;
    %829 = dyn.reshape(%826, %827, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %830 = greater_equal(%828, %829) /* ty=Tensor[(12, 11, 7), bool] */;
    (%830,)
  };
  %831(%var_393, %var_394) /* ty=(Tensor[(12, 11, 7), bool],) */
}

def @func_3319() -> (Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), float32]) {
  %832 = @func_3162() /* ty=Tensor[(10, 3, 14), uint16] */;
  %833 = cast(%832, dtype="float64") /* ty=Tensor[(10, 3, 14), float64] */;
  %834 = atan(%833) /* ty=Tensor[(10, 3, 14), float64] */;
  %835 = cast(%832, dtype="float64") /* ty=Tensor[(10, 3, 14), float64] */;
  %836 = acosh(%835) /* ty=Tensor[(10, 3, 14), float64] */;
  %837 = cast(%836, dtype="uint16") /* ty=Tensor[(10, 3, 14), uint16] */;
  %838 = shape_of(%834, dtype="int32") /* ty=Tensor[(3), int32] */;
  %839 = cast(%834, dtype="uint16") /* ty=Tensor[(10, 3, 14), uint16] */;
  %840 = dyn.reshape(%837, %838, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %841 = cast(%832, dtype="float32") /* ty=Tensor[(10, 3, 14), float32] */;
  %842 = left_shift(%839, %840) /* ty=Tensor[(10, 3, 14), uint16] */;
  %843 = cos(%841) /* ty=Tensor[(10, 3, 14), float32] */;
  (%842, %843)
}

def @func_5355() -> Tensor[(10, 3, 14), uint16] {
  %844 = @func_3410() /* ty=(Tensor[(10, 3, 14), uint16],) */;
  %844.0
}

def @func_6545() -> (Tensor[(10, 3, 14), uint16], Tensor[(12, 11, 7), bool], Tensor[(924), float32]) {
  @func_6543() /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(12, 11, 7), bool], Tensor[(924), float32]) */
}

def @func_4104() -> (Tensor[(10, 3, 14), uint16],) {
  @func_4102() /* ty=(Tensor[(10, 3, 14), uint16],) */
}

def @func_811(%var_750: Tensor[(4, 2, 9), float64], %var_751: Tensor[(4, 2, 9), float64], %var_784: Tensor[(8, 13, 9), float32]) -> (Tensor[(4, 2, 9), float64], Tensor[(12, 11, 7), bool], Tensor[(924), float32], Tensor[(572), float64], Tensor[(8, 13, 9), int32], Tensor[(4, 13, 11), int64]) {
  %845 = cast(%var_751, dtype="float64") /* ty=Tensor[(4, 2, 9), float64] */;
  %846 = shape_of(%var_750, dtype="int32") /* ty=Tensor[(3), int32] */;
  %847 = cast(%var_750, dtype="float64") /* ty=Tensor[(4, 2, 9), float64] */;
  %848 = dyn.reshape(%845, %846, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %849 = cast(meta[relay.Constant][50] /* ty=Tensor[(924), float32] */, dtype="float32") /* ty=Tensor[(924), float32] */;
  %850 = reshape(%849, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %851 = @func_648(%850) /* ty=(Tensor[(12, 11, 7), bool], Tensor[(12, 11, 7), bool], Tensor[(8, 13, 9), float32]) */;
  %852 = cast(meta[relay.Constant][51] /* ty=Tensor[(572), int8] */, dtype="float64") /* ty=Tensor[(572), float64] */;
  %853 = cast(meta[relay.Constant][51] /* ty=Tensor[(572), int8] */, dtype="int8") /* ty=Tensor[(572), int8] */;
  %854 = cast(meta[relay.Constant][51] /* ty=Tensor[(572), int8] */, dtype="int8") /* ty=Tensor[(572), int8] */;
  %855 = reshape(%853, newshape=[4, 13, 11]) /* ty=Tensor[(4, 13, 11), int8] */;
  %856 = reshape(%854, newshape=[4, 13, 11]) /* ty=Tensor[(4, 13, 11), int8] */;
  %857 = @func_733(%855, %856) /* ty=(Tensor[(4, 13, 11), int8], Tensor[(4, 13, 11), int64], Tensor[(8, 13, 9), float32], Tensor[(924), float32]) */;
  %858 = %857.2;
  %859 = cast(%var_784, dtype="int32") /* ty=Tensor[(8, 13, 9), int32] */;
  %860 = shape_of(%858, dtype="int32") /* ty=Tensor[(3), int32] */;
  %861 = cast(%858, dtype="int32") /* ty=Tensor[(8, 13, 9), int32] */;
  %862 = dyn.reshape(%859, %860, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %863 = asinh(%852) /* ty=Tensor[(572), float64] */;
  %864 = cast(%863, dtype="int8") /* ty=Tensor[(572), int8] */;
  %865 = cast(%863, dtype="int8") /* ty=Tensor[(572), int8] */;
  %866 = reshape(%864, newshape=[4, 13, 11]) /* ty=Tensor[(4, 13, 11), int8] */;
  %867 = reshape(%865, newshape=[4, 13, 11]) /* ty=Tensor[(4, 13, 11), int8] */;
  %868 = @func_733(%866, %867) /* ty=(Tensor[(4, 13, 11), int8], Tensor[(4, 13, 11), int64], Tensor[(8, 13, 9), float32], Tensor[(924), float32]) */;
  %869 = divide(%847, %848) /* ty=Tensor[(4, 2, 9), float64] */;
  %870 = %851.1;
  %871 = right_shift(%861, %862) /* ty=Tensor[(8, 13, 9), int32] */;
  %872 = %868.1;
  (%869, %870, meta[relay.Constant][50] /* ty=Tensor[(924), float32] */, %863, %871, %872)
}

def @func_3164() -> Tensor[(10, 3, 14), uint16] {
  @func_3162() /* ty=Tensor[(10, 3, 14), uint16] */
}

def @func_3818() -> (Tensor[(936), float32],) {
  @func_3816() /* ty=(Tensor[(936), float32],) */
}

def @func_3410() -> (Tensor[(10, 3, 14), uint16],) {
  %873 = @func_2681() /* ty=Tensor[(10, 3, 14), uint16] */;
  (%873,)
}

def @func_5357() -> Tensor[(10, 3, 14), uint16] {
  @func_5355() /* ty=Tensor[(10, 3, 14), uint16] */
}

def @func_4732(%var_4730: Tensor[(3, 14, 2), float64], %var_4731: Tensor[(3, 14, 2), float64]) -> (Tensor[(3, 14, 2), float64], Tensor[(936), float32], Tensor[(924), float32], Tensor[(1, 200), int64], Tensor[(924), float32]) {
  @func_4728(%var_4730, %var_4731) /* ty=(Tensor[(3, 14, 2), float64], Tensor[(936), float32], Tensor[(924), float32], Tensor[(1, 200), int64], Tensor[(924), float32]) */
}

def @func_4363(%var_4362: int8) -> (Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16], Tensor[(13, 15, 5), float32], int8, Tensor[(16, 14, 4), float32], Tensor[(896), float32]) {
  %885 = fn (%var_4341: int8) -> (Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16], Tensor[(13, 15, 5), float32], int8, Tensor[(16, 14, 4), float32], Tensor[(896), float32]) {
    %874 = @func_3858() /* ty=(Tensor[(10, 3, 14), uint16],) */;
    %875 = @func_3099() /* ty=(Tensor[(10, 3, 14), uint16],) */;
    %876 = cast(%var_4341, dtype="int8") /* ty=int8 */;
    %877 = reshape(%876, newshape=[]) /* ty=int8 */;
    %878 = @func_929(%877) /* ty=(Tensor[(13, 15, 5), bool], Tensor[(13, 15, 5), float32]) */;
    %879 = cast(meta[relay.Constant][52] /* ty=Tensor[(896), float32] */, dtype="float32") /* ty=Tensor[(896), float32] */;
    %880 = reshape(%879, newshape=[16, 14, 4]) /* ty=Tensor[(16, 14, 4), float32] */;
    %881 = %874.0;
    %882 = %875.0;
    %883 = %878.1;
    %884 = @func_2548(%880) /* ty=Tensor[(16, 14, 4), float32] */;
    (%881, %882, %883, %var_4341, %884, meta[relay.Constant][52] /* ty=Tensor[(896), float32] */)
  };
  %885(%var_4362) /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16], Tensor[(13, 15, 5), float32], int8, Tensor[(16, 14, 4), float32], Tensor[(896), float32]) */
}

def @func_3018(%var_3016: Tensor[(3120), uint8]) -> (Tensor[(13, 15, 5), bool], Tensor[(572), uint32], Tensor[(10, 3, 14), uint64], Tensor[(11, 52), float32], Tensor[(12, 11, 7), bool], Tensor[(3120), uint8], Tensor[(936), float32]) {
  @func_3015(%var_3016) /* ty=(Tensor[(13, 15, 5), bool], Tensor[(572), uint32], Tensor[(10, 3, 14), uint64], Tensor[(11, 52), float32], Tensor[(12, 11, 7), bool], Tensor[(3120), uint8], Tensor[(936), float32]) */
}

def @func_5742() -> (Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16]) {
  @func_5740() /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(10, 3, 14), uint16]) */
}

def @func_3482(%var_3480: Tensor[(3120), uint8]) -> (Tensor[(572), uint32], Tensor[(3120), uint8], Tensor[(10, 3, 14), bool], Tensor[(10, 3, 14), uint64]) {
  @func_3479(%var_3480) /* ty=(Tensor[(572), uint32], Tensor[(3120), uint8], Tensor[(10, 3, 14), bool], Tensor[(10, 3, 14), uint64]) */
}

def @func_5185() -> Tensor[(10, 3, 14), uint16] {
  %887 = fn () -> Tensor[(10, 3, 14), uint16] {
    %886 = @func_3858() /* ty=(Tensor[(10, 3, 14), uint16],) */;
    %886.0
  };
  %887() /* ty=Tensor[(10, 3, 14), uint16] */
}

def @func_3796(%var_3794: Tensor[(4, 15, 5), float64]) -> (Tensor[(4, 15, 5), float64],) {
  @func_3793(%var_3794) /* ty=(Tensor[(4, 15, 5), float64],) */
}

def @func_6262() -> Tensor[(10, 3, 14), uint16] {
  @func_6260() /* ty=Tensor[(10, 3, 14), uint16] */
}

def @func_2333(%var_2332: Tensor[(15, 16, 15), float32]) -> (Tensor[(15, 16, 15), bool], Tensor[(15, 16, 15), int32]) {
  %900 = fn (%var_2298: Tensor[(15, 16, 15), float32]) -> (Tensor[(15, 16, 15), bool], Tensor[(15, 16, 15), int32]) {
    %888 = cast(%var_2298, dtype="float32") /* ty=Tensor[(15, 16, 15), float32] */;
    %889 = exp(%888) /* ty=Tensor[(15, 16, 15), float32] */;
    %890 = cast(%var_2298, dtype="bool") /* ty=Tensor[(15, 16, 15), bool] */;
    %891 = shape_of(%889, dtype="int32") /* ty=Tensor[(3), int32] */;
    %892 = cast(%889, dtype="bool") /* ty=Tensor[(15, 16, 15), bool] */;
    %893 = dyn.reshape(%890, %891, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %894 = cast(%var_2298, dtype="int32") /* ty=Tensor[(15, 16, 15), int32] */;
    %895 = shape_of(%889, dtype="int32") /* ty=Tensor[(3), int32] */;
    %896 = cast(%889, dtype="int32") /* ty=Tensor[(15, 16, 15), int32] */;
    %897 = dyn.reshape(%894, %895, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %898 = greater_equal(%892, %893) /* ty=Tensor[(15, 16, 15), bool] */;
    %899 = right_shift(%896, %897) /* ty=Tensor[(15, 16, 15), int32] */;
    (%898, %899)
  };
  %900(%var_2332) /* ty=(Tensor[(15, 16, 15), bool], Tensor[(15, 16, 15), int32]) */
}

def @func_3032() -> (Tensor[(10, 3, 14), uint16],) {
  %902 = fn () -> (Tensor[(10, 3, 14), uint16],) {
    %901 = @func_2853() /* ty=Tensor[(10, 3, 14), uint16] */;
    (%901,)
  };
  %902() /* ty=(Tensor[(10, 3, 14), uint16],) */
}

def @func_1654(%var_1651: Tensor[(15, 16, 13), uint8], %var_1652: Tensor[(15, 16, 13), uint8], %var_1653: Tensor[(8, 13, 9), float32]) -> (Tensor[(15, 16, 13), uint8], Tensor[(924), float32], Tensor[(8, 13, 9), float32], Tensor[(8, 13, 9), int8], Tensor[(12, 11, 7), bool], Tensor[(36, 2), float64], Tensor[(8, 1, 9), float32]) {
  @func_1649(%var_1651, %var_1652, %var_1653) /* ty=(Tensor[(15, 16, 13), uint8], Tensor[(924), float32], Tensor[(8, 13, 9), float32], Tensor[(8, 13, 9), int8], Tensor[(12, 11, 7), bool], Tensor[(36, 2), float64], Tensor[(8, 1, 9), float32]) */
}

def @func_5951(%var_5950: Tensor[(924), float32]) -> (Tensor[(10, 3, 14), float32], Tensor[(10, 3, 14), uint16], Tensor[(10, 5, 4), int64], Tensor[(200), int64], Tensor[(924), float32]) {
  %911 = fn (%var_5941: Tensor[(924), float32]) -> (Tensor[(10, 3, 14), float32], Tensor[(10, 3, 14), uint16], Tensor[(10, 5, 4), int64], Tensor[(200), int64], Tensor[(924), float32]) {
    %903 = cast(meta[relay.Constant][53] /* ty=Tensor[(200), int64] */, dtype="int64") /* ty=Tensor[(200), int64] */;
    %904 = cast(%var_5941, dtype="float32") /* ty=Tensor[(924), float32] */;
    %905 = reshape(%903, newshape=[200]) /* ty=Tensor[(200), int64] */;
    %906 = reshape(%904, newshape=[924]) /* ty=Tensor[(924), float32] */;
    %907 = @func_2803(%905, %906) /* ty=(Tensor[(10, 3, 14), uint16], Tensor[(10, 5, 4), int64], Tensor[(200), int64], Tensor[(924), float32], Tensor[(16, 14, 4), float32], Tensor[(1, 896), float32]) */;
    %908 = @func_4575() /* ty=Tensor[(10, 3, 14), float32] */;
    %909 = @func_2681() /* ty=Tensor[(10, 3, 14), uint16] */;
    %910 = %907.1;
    (%908, %909, %910, meta[relay.Constant][53] /* ty=Tensor[(200), int64] */, %var_5941)
  };
  %911(%var_5950) /* ty=(Tensor[(10, 3, 14), float32], Tensor[(10, 3, 14), uint16], Tensor[(10, 5, 4), int64], Tensor[(200), int64], Tensor[(924), float32]) */
}

def @func_3101() -> (Tensor[(10, 3, 14), uint16],) {
  @func_3099() /* ty=(Tensor[(10, 3, 14), uint16],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen66/build/output.py", line 2022, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:47:26] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

