==========mod==========
#[version = "0.0.5"]
def @func_4130() -> (Tensor[(14, 1, 14), float64], Tensor[(14, 3, 14), bool]) {
  %0 = @func_3746() /* ty=(Tensor[(14, 1, 14), float64],) */;
  %1 = %0.0;
  %2 = @func_3789() /* ty=Tensor[(14, 3, 14), bool] */;
  (%1, %2)
}

def @func_2754() -> Tensor[(14, 1, 14), float64] {
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(14, 1, 14), float32] */, dtype="float32") /* ty=Tensor[(14, 1, 14), float32] */;
  %4 = acos(%3) /* ty=Tensor[(14, 1, 14), float32] */;
  %5 = cast(%4, dtype="float64") /* ty=Tensor[(14, 1, 14), float64] */;
  sin(%5) /* ty=Tensor[(14, 1, 14), float64] */
}

def @func_1647(%var_1617: Tensor[(9, 5, 2), float64], %var_1618: Tensor[(9, 5, 2), float64], %var_1631: Tensor[(216), bool]) -> (Tensor[(9, 5, 2), bool], Tensor[(3, 9, 8), int16], Tensor[(216), bool], Tensor[(48, 4), uint64], Tensor[(8, 15, 6), float64], Tensor[(720), float64]) {
  %6 = cast(%var_1618, dtype="bool") /* ty=Tensor[(9, 5, 2), bool] */;
  %7 = shape_of(%var_1617, dtype="int32") /* ty=Tensor[(3), int32] */;
  %8 = cast(%var_1617, dtype="bool") /* ty=Tensor[(9, 5, 2), bool] */;
  %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %10 = cast(%var_1631, dtype="bool") /* ty=Tensor[(216), bool] */;
  %11 = cast(%var_1631, dtype="bool") /* ty=Tensor[(216), bool] */;
  %12 = reshape(%10, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), bool] */;
  %13 = reshape(%11, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), bool] */;
  %14 = @func_373(%12, %13) /* ty=(Tensor[(3, 9, 8), int16], Tensor[(300), float32], Tensor[(2, 15, 10), float64]) */;
  %15 = cast(meta[relay.Constant][1] /* ty=Tensor[(48, 4), int16] */, dtype="int16") /* ty=Tensor[(48, 4), int16] */;
  %16 = reshape(%15, newshape=[12, 8, 2]) /* ty=Tensor[(12, 8, 2), int16] */;
  %17 = @func_64(%16) /* ty=(Tensor[(12, 8, 2), bool], Tensor[(12, 8, 2), float64], Tensor[(12, 8, 2), int16]) */;
  %18 = %17.0;
  %19 = cast(%18, dtype="uint64") /* ty=Tensor[(12, 8, 2), uint64] */;
  %20 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(48, 4), int16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %21 = cast(meta[relay.Constant][1] /* ty=Tensor[(48, 4), int16] */, dtype="uint64") /* ty=Tensor[(48, 4), uint64] */;
  %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %23 = cast(meta[relay.Constant][2] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %24 = reshape(%23, newshape=[8, 15, 6]) /* ty=Tensor[(8, 15, 6), float64] */;
  %25 = @func_1587(%24) /* ty=(Tensor[(8, 15, 6), float64], Tensor[(8, 15, 6), float64]) */;
  %26 = less(%8, %9) /* ty=Tensor[(9, 5, 2), bool] */;
  %27 = %14.0;
  %28 = bitwise_xor(%21, %22) /* ty=Tensor[(48, 4), uint64] */;
  %29 = %25.0;
  (%26, %27, %var_1631, %28, %29, meta[relay.Constant][2] /* ty=Tensor[(720), float64] */)
}

def @func_3397(%var_3363: Tensor[(1680), float32], %var_3364: Tensor[(720), float64]) -> (Tensor[(8, 14, 7), int32], Tensor[(720), float64], Tensor[(1680), float32], Tensor[(720), float64], Tensor[(14, ?, 14), float32]) {
  %30 = @func_2866() /* ty=(Tensor[(8, 14, 7), int32],) */;
  %31 = cast(%var_3363, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %32 = cast(%var_3364, dtype="float64") /* ty=Tensor[(720), float64] */;
  %33 = reshape(%31, newshape=[8, 14, 15]) /* ty=Tensor[(8, 14, 15), float32] */;
  %34 = reshape(%32, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %35 = @func_2206(%33, %34) /* ty=(Tensor[(8, 14, 15), float32], Tensor[(8, 15, 6), float64], Tensor[(720), float64], Tensor[(8, 14, 15), float32]) */;
  %36 = @func_2798() /* ty=(Tensor[(14, ?, 14), float32], Tensor[(14, ?, 14), float64]) */;
  %37 = %30.0;
  %38 = %35.2;
  %39 = %36.0;
  (%37, %38, %var_3363, %var_3364, %39)
}

def @func_4821(%var_4733: Tensor[(588), bool], %var_4734: Tensor[(1680), float32], %var_4735: Tensor[(4, 180), float64]) -> (Tensor[(720), float64], Tensor[(588), bool], Tensor[(1680), float32], Tensor[(4, 180), float64], Tensor[(14, ?, 14), bool], Tensor[(14, 1, 14), float32], Tensor[(14, ?, 14), uint8], Tensor[(14, ?, 14), float32], Tensor[(14, ?, 14), uint16]) {
  %40 = cast(%var_4733, dtype="bool") /* ty=Tensor[(588), bool] */;
  %41 = cast(%var_4734, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %42 = cast(%var_4735, dtype="float64") /* ty=Tensor[(4, 180), float64] */;
  %43 = cast(%var_4733, dtype="bool") /* ty=Tensor[(588), bool] */;
  %44 = reshape(%40, newshape=[14, 3, 14]) /* ty=Tensor[(14, 3, 14), bool] */;
  %45 = reshape(%41, newshape=[1680]) /* ty=Tensor[(1680), float32] */;
  %46 = reshape(%42, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %47 = reshape(%43, newshape=[14, 3, 14]) /* ty=Tensor[(14, 3, 14), bool] */;
  %48 = @func_4366(%44, %45, %46, %47) /* ty=(Tensor[(1680), float32], Tensor[(1680), float32], Tensor[(720), float64], Tensor[(14, 3, 14), float32]) */;
  %49 = @func_2930() /* ty=(Tensor[(14, 1, 14), float64],) */;
  %50 = %49.0;
  %51 = cast(%50, dtype="float64") /* ty=Tensor[(14, 1, 14), float64] */;
  %52 = log(%51) /* ty=Tensor[(14, 1, 14), float64] */;
  %53 = cast(%52, dtype="float64") /* ty=Tensor[(14, 1, 14), float64] */;
  %54 = sqrt(%53) /* ty=Tensor[(14, 1, 14), float64] */;
  %55 = cast(%54, dtype="bool") /* ty=Tensor[(14, 1, 14), bool] */;
  %56 = shape_of(%52, dtype="int32") /* ty=Tensor[(3), int32] */;
  %57 = cast(%52, dtype="bool") /* ty=Tensor[(14, 1, 14), bool] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %59 = cast(%54, dtype="float32") /* ty=Tensor[(14, 1, 14), float32] */;
  %60 = cast(%50, dtype="int32") /* ty=Tensor[(14, 1, 14), int32] */;
  %61 = shape_of(%52, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(%52, dtype="int32") /* ty=Tensor[(14, 1, 14), int32] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %64 = right_shift(%62, %63) /* ty=Tensor[(14, ?, 14), int32] */;
  %65 = cast(%52, dtype="bool") /* ty=Tensor[(14, 1, 14), bool] */;
  %66 = shape_of(%64, dtype="int32") /* ty=Tensor[(3), int32] */;
  %67 = cast(%64, dtype="bool") /* ty=Tensor[(14, ?, 14), bool] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %69 = equal(%67, %68) /* ty=Tensor[(14, ?, 14), bool] */;
  %70 = cast(%69, dtype="uint8") /* ty=Tensor[(14, ?, 14), uint8] */;
  %71 = shape_of(%54, dtype="int32") /* ty=Tensor[(3), int32] */;
  %72 = cast(%54, dtype="uint8") /* ty=Tensor[(14, 1, 14), uint8] */;
  %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %74 = @func_2798() /* ty=(Tensor[(14, ?, 14), float32], Tensor[(14, ?, 14), float64]) */;
  %75 = cast(%69, dtype="uint16") /* ty=Tensor[(14, ?, 14), uint16] */;
  %76 = shape_of(%64, dtype="int32") /* ty=Tensor[(3), int32] */;
  %77 = cast(%64, dtype="uint16") /* ty=Tensor[(14, ?, 14), uint16] */;
  %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %79 = %48.2;
  %80 = less_equal(%57, %58) /* ty=Tensor[(14, ?, 14), bool] */;
  %81 = asin(%59) /* ty=Tensor[(14, 1, 14), float32] */;
  %82 = bitwise_and(%72, %73) /* ty=Tensor[(14, ?, 14), uint8] */;
  %83 = %74.0;
  %84 = subtract(%77, %78) /* ty=Tensor[(14, ?, 14), uint16] */;
  (%79, %var_4733, %var_4734, %var_4735, %80, %81, %82, %83, %84)
}

def @func_1233(%var_1210: Tensor[(9, 7, 4), int16], %var_1211: Tensor[(9, 7, 4), int16]) -> (Tensor[(9, 7, 4), int16], Tensor[(3, 9, 8), int16], Tensor[(2, 108), bool], Tensor[(2, 15, 10), float32], Tensor[(300), float32]) {
  %85 = cast(%var_1211, dtype="int16") /* ty=Tensor[(9, 7, 4), int16] */;
  %86 = shape_of(%var_1210, dtype="int32") /* ty=Tensor[(3), int32] */;
  %87 = cast(%var_1210, dtype="int16") /* ty=Tensor[(9, 7, 4), int16] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %89 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 108), bool] */, dtype="bool") /* ty=Tensor[(2, 108), bool] */;
  %90 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 108), bool] */, dtype="bool") /* ty=Tensor[(2, 108), bool] */;
  %91 = reshape(%89, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), bool] */;
  %92 = reshape(%90, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), bool] */;
  %93 = @func_373(%91, %92) /* ty=(Tensor[(3, 9, 8), int16], Tensor[(300), float32], Tensor[(2, 15, 10), float64]) */;
  %94 = cast(meta[relay.Constant][4] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %95 = reshape(%94, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), float32] */;
  %96 = subtract(%87, %88) /* ty=Tensor[(9, 7, 4), int16] */;
  %97 = %93.0;
  %98 = @func_250(%95) /* ty=Tensor[(2, 15, 10), float32] */;
  (%96, %97, meta[relay.Constant][3] /* ty=Tensor[(2, 108), bool] */, %98, meta[relay.Constant][4] /* ty=Tensor[(300), float32] */)
}

def @func_935(%var_917: Tensor[(45), int32]) -> (Tensor[(5, 4, 1), float32], Tensor[(5, 4, ?), float64], Tensor[(4, 5, 9), bool], Tensor[(45), int32], Tensor[(6, 30), int32]) {
  %99 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 4, 1), float64] */, dtype="float32") /* ty=Tensor[(5, 4, 1), float32] */;
  %100 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 4, 1), float64] */, dtype="float64") /* ty=Tensor[(5, 4, 1), float64] */;
  %101 = log(%100) /* ty=Tensor[(5, 4, 1), float64] */;
  %102 = cast(%101, dtype="float32") /* ty=Tensor[(5, 4, 1), float32] */;
  %103 = tan(%102) /* ty=Tensor[(5, 4, 1), float32] */;
  %104 = cast(%101, dtype="bool") /* ty=Tensor[(5, 4, 1), bool] */;
  %105 = shape_of(%103, dtype="int32") /* ty=Tensor[(3), int32] */;
  %106 = cast(%103, dtype="bool") /* ty=Tensor[(5, 4, 1), bool] */;
  %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %108 = equal(%106, %107) /* ty=Tensor[(5, 4, ?), bool] */;
  %109 = cast(%108, dtype="float64") /* ty=Tensor[(5, 4, ?), float64] */;
  %110 = cos(%109) /* ty=Tensor[(5, 4, ?), float64] */;
  %111 = cast(%110, dtype="float64") /* ty=Tensor[(5, 4, ?), float64] */;
  %112 = cast(%var_917, dtype="int32") /* ty=Tensor[(45), int32] */;
  %113 = cast(meta[relay.Constant][6] /* ty=Tensor[(6, 30), int32] */, dtype="int32") /* ty=Tensor[(6, 30), int32] */;
  %114 = reshape(%112, newshape=[1, 5, 9]) /* ty=Tensor[(1, 5, 9), int32] */;
  %115 = reshape(%113, newshape=[4, 5, 9]) /* ty=Tensor[(4, 5, 9), int32] */;
  %116 = @func_767(%114, %115) /* ty=(Tensor[(4, 5, 9), bool],) */;
  %117 = cosh(%99) /* ty=Tensor[(5, 4, 1), float32] */;
  %118 = asin(%111) /* ty=Tensor[(5, 4, ?), float64] */;
  %119 = %116.0;
  (%117, %118, %119, %var_917, meta[relay.Constant][6] /* ty=Tensor[(6, 30), int32] */)
}

def @func_2546(%var_2541: Tensor[(45), int32]) -> (Tensor[(6, 5, 4), float64], Tensor[(6, 30), int32], Tensor[(45), int32]) {
  %120 = cast(meta[relay.Constant][7] /* ty=Tensor[(6, 5, 4), float64] */, dtype="float64") /* ty=Tensor[(6, 5, 4), float64] */;
  %121 = cast(%var_2541, dtype="int32") /* ty=Tensor[(45), int32] */;
  %122 = reshape(%121, newshape=[45]) /* ty=Tensor[(45), int32] */;
  %123 = @func_935(%122) /* ty=(Tensor[(5, 4, 1), float32], Tensor[(5, 4, ?), float64], Tensor[(4, 5, 9), bool], Tensor[(45), int32], Tensor[(6, 30), int32]) */;
  %124 = sigmoid(%120) /* ty=Tensor[(6, 5, 4), float64] */;
  %125 = %123.4;
  (%124, %125, %var_2541)
}

def @func_5602(%var_5586: Tensor[(14, 6, 14), float32]) -> Tensor[(14, 6, 14), float64] {
  %126 = @func_2798() /* ty=(Tensor[(14, ?, 14), float32], Tensor[(14, ?, 14), float64]) */;
  %127 = %126.0;
  %128 = cast(%127, dtype="uint16") /* ty=Tensor[(14, ?, 14), uint16] */;
  %129 = cast(%var_5586, dtype="uint16") /* ty=Tensor[(14, 6, 14), uint16] */;
  %130 = right_shift(%128, %129) /* ty=Tensor[(14, 6, 14), uint16] */;
  %131 = @func_4858() /* ty=Tensor[(14, 1, 14), float64] */;
  %132 = cast(%130, dtype="float64") /* ty=Tensor[(14, 6, 14), float64] */;
  %133 = cast(%131, dtype="float64") /* ty=Tensor[(14, 1, 14), float64] */;
  power(%132, %133) /* ty=Tensor[(14, 6, 14), float64] */
}

def @func_3423() -> (Tensor[(14, 1, 14), float64],) {
  %134 = @func_2930() /* ty=(Tensor[(14, 1, 14), float64],) */;
  %135 = %134.0;
  (%135,)
}

def @func_5652(%var_5649: Tensor[(90), float64]) -> (Tensor[(14, ?, 14), float64], Tensor[(10, 14, 7), float64], Tensor[(980), float64], Tensor[(90), float64]) {
  %136 = cast(meta[relay.Constant][8] /* ty=Tensor[(980), float64] */, dtype="float64") /* ty=Tensor[(980), float64] */;
  %137 = cast(%var_5649, dtype="float64") /* ty=Tensor[(90), float64] */;
  %138 = reshape(%136, newshape=[10, 14, 7]) /* ty=Tensor[(10, 14, 7), float64] */;
  %139 = reshape(%137, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %140 = @func_5043(%138, %139) /* ty=(Tensor[(10, 14, 7), float64], Tensor[(8, 15, 6), float64], Tensor[(90), float64], Tensor[(1960), float64]) */;
  %141 = @func_5618() /* ty=Tensor[(14, ?, 14), float64] */;
  %142 = %140.0;
  (%141, %142, meta[relay.Constant][8] /* ty=Tensor[(980), float64] */, %var_5649)
}

def @func_4932() -> Tensor[(8, 14, 7), float32] {
  %143 = @func_3065() /* ty=Tensor[(8, 14, 7), int32] */;
  %144 = cast(meta[relay.Constant][9] /* ty=Tensor[(8, 14, 7), int32] */, dtype="float32") /* ty=Tensor[(8, 14, 7), float32] */;
  %145 = shape_of(%143, dtype="int32") /* ty=Tensor[(3), int32] */;
  %146 = cast(%143, dtype="float32") /* ty=Tensor[(8, 14, 7), float32] */;
  %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  add(%146, %147) /* ty=Tensor[(8, 14, 7), float32] */
}

def @func_64(%var_40: Tensor[(12, 8, 2), int16]) -> (Tensor[(12, 8, 2), bool], Tensor[(12, 8, 2), float64], Tensor[(12, 8, 2), int16]) {
  %148 = cast(meta[relay.Constant][10] /* ty=Tensor[(12, 8, 2), int16] */, dtype="bool") /* ty=Tensor[(12, 8, 2), bool] */;
  %149 = shape_of(%var_40, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%var_40, dtype="bool") /* ty=Tensor[(12, 8, 2), bool] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %152 = cast(meta[relay.Constant][10] /* ty=Tensor[(12, 8, 2), int16] */, dtype="float64") /* ty=Tensor[(12, 8, 2), float64] */;
  %153 = cast(%var_40, dtype="int16") /* ty=Tensor[(12, 8, 2), int16] */;
  %154 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(12, 8, 2), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(meta[relay.Constant][10] /* ty=Tensor[(12, 8, 2), int16] */, dtype="int16") /* ty=Tensor[(12, 8, 2), int16] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %157 = equal(%150, %151) /* ty=Tensor[(12, 8, 2), bool] */;
  %158 = atanh(%152) /* ty=Tensor[(12, 8, 2), float64] */;
  %159 = right_shift(%155, %156) /* ty=Tensor[(12, 8, 2), int16] */;
  (%157, %158, %159)
}

def @func_2046(%var_2041: Tensor[(7, 7, 4), int8]) -> (Tensor[(7, 7, 4), int8],) {
  %160 = cast(%var_2041, dtype="int8") /* ty=Tensor[(7, 7, 4), int8] */;
  %161 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(7, 7, 4), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %162 = cast(meta[relay.Constant][11] /* ty=Tensor[(7, 7, 4), int8] */, dtype="int8") /* ty=Tensor[(7, 7, 4), int8] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %164 = left_shift(%162, %163) /* ty=Tensor[(7, 7, 4), int8] */;
  (%164,)
}

def @func_3975(%var_3969: Tensor[(1680), float32]) -> (Tensor[(14, 1, 14), float64], Tensor[(8, 15, 6), float64], Tensor[(720), float64], Tensor[(8, 15, 6), float64], Tensor[(1680), float32]) {
  %165 = cast(meta[relay.Constant][12] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %166 = reshape(%165, newshape=[8, 15, 6]) /* ty=Tensor[(8, 15, 6), float64] */;
  %167 = @func_1587(%166) /* ty=(Tensor[(8, 15, 6), float64], Tensor[(8, 15, 6), float64]) */;
  %168 = cast(%var_3969, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %169 = %167.1;
  %170 = cast(%169, dtype="float64") /* ty=Tensor[(8, 15, 6), float64] */;
  %171 = reshape(%168, newshape=[8, 14, 15]) /* ty=Tensor[(8, 14, 15), float32] */;
  %172 = reshape(%170, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %173 = @func_2206(%171, %172) /* ty=(Tensor[(8, 14, 15), float32], Tensor[(8, 15, 6), float64], Tensor[(720), float64], Tensor[(8, 14, 15), float32]) */;
  %174 = @func_2754() /* ty=Tensor[(14, 1, 14), float64] */;
  %175 = %173.1;
  (%174, %169, meta[relay.Constant][12] /* ty=Tensor[(720), float64] */, %175, %var_3969)
}

def @func_2206(%var_2182: Tensor[(8, 14, 15), float32], %var_2191: Tensor[(720), float64]) -> (Tensor[(8, 14, 15), float32], Tensor[(8, 15, 6), float64], Tensor[(720), float64], Tensor[(8, 14, 15), float32]) {
  %176 = cast(%var_2182, dtype="float32") /* ty=Tensor[(8, 14, 15), float32] */;
  %177 = cast(%var_2191, dtype="float64") /* ty=Tensor[(720), float64] */;
  %178 = reshape(%177, newshape=[8, 15, 6]) /* ty=Tensor[(8, 15, 6), float64] */;
  %179 = @func_1587(%178) /* ty=(Tensor[(8, 15, 6), float64], Tensor[(8, 15, 6), float64]) */;
  %180 = cast(%var_2182, dtype="float32") /* ty=Tensor[(8, 14, 15), float32] */;
  %181 = acos(%176) /* ty=Tensor[(8, 14, 15), float32] */;
  %182 = %179.1;
  %183 = atan(%180) /* ty=Tensor[(8, 14, 15), float32] */;
  (%181, %182, %var_2191, %183)
}

def @func_4291() -> Tensor[(14, 1, 14), float64] {
  @func_4252() /* ty=Tensor[(14, 1, 14), float64] */
}

def @func_3065() -> Tensor[(8, 14, 7), int32] {
  %184 = @func_2866() /* ty=(Tensor[(8, 14, 7), int32],) */;
  %184.0
}

def @func_5894(%var_5884: Tensor[(2, 7, 12), float32]) -> (Tensor[(2, 7, 12), float32],) {
  %185 = cast(%var_5884, dtype="float32") /* ty=Tensor[(2, 7, 12), float32] */;
  %186 = rsqrt(%185) /* ty=Tensor[(2, 7, 12), float32] */;
  (%186,)
}

def @func_5691() -> Tensor[(14, 1, 14), float64] {
  %187 = @func_4951() /* ty=(Tensor[(14, 1, 14), float64],) */;
  %187.0
}

def @func_4489(%var_4484: Tensor[(14, 5, 4), float64]) -> Tensor[(14, 5, 4), float64] {
  %188 = cast(%var_4484, dtype="float64") /* ty=Tensor[(14, 5, 4), float64] */;
  log2(%188) /* ty=Tensor[(14, 5, 4), float64] */
}

def @func_5868() -> Tensor[(14, 1, 14), float64] {
  @func_2754() /* ty=Tensor[(14, 1, 14), float64] */
}

def @func_3789() -> Tensor[(14, 3, 14), bool] {
  %189 = @func_3746() /* ty=(Tensor[(14, 1, 14), float64],) */;
  %190 = %189.0;
  %191 = cast(%190, dtype="bool") /* ty=Tensor[(14, 1, 14), bool] */;
  %192 = cast(meta[relay.Constant][13] /* ty=Tensor[(14, 3, 14), float64] */, dtype="bool") /* ty=Tensor[(14, 3, 14), bool] */;
  greater_equal(%191, %192) /* ty=Tensor[(14, 3, 14), bool] */
}

def @main(%var_6292: Tensor[(6, 7, 1), int16], %var_6293: Tensor[(6, 7, 12), int16]) -> Tensor[(6, 7, 12), int16] {
  %193 = cast(%var_6292, dtype="int16") /* ty=Tensor[(6, 7, 1), int16] */;
  %194 = cast(%var_6293, dtype="int16") /* ty=Tensor[(6, 7, 12), int16] */;
  right_shift(%193, %194) /* ty=Tensor[(6, 7, 12), int16] */
}

def @func_4419(%var_4396: Tensor[(14, 9, 14), float64]) -> (Tensor[(14, 9, 14), bool],) {
  %195 = @func_3423() /* ty=(Tensor[(14, 1, 14), float64],) */;
  %196 = %195.0;
  %197 = cast(%196, dtype="bool") /* ty=Tensor[(14, 1, 14), bool] */;
  %198 = cast(%var_4396, dtype="bool") /* ty=Tensor[(14, 9, 14), bool] */;
  %199 = equal(%197, %198) /* ty=Tensor[(14, 9, 14), bool] */;
  (%199,)
}

def @func_767(%var_745: Tensor[(1, 5, 9), int32], %var_746: Tensor[(4, 5, 9), int32]) -> (Tensor[(4, 5, 9), bool],) {
  %200 = cast(%var_745, dtype="bool") /* ty=Tensor[(1, 5, 9), bool] */;
  %201 = cast(%var_746, dtype="bool") /* ty=Tensor[(4, 5, 9), bool] */;
  %202 = greater(%200, %201) /* ty=Tensor[(4, 5, 9), bool] */;
  (%202,)
}

def @func_1271(%var_1264: Tensor[(15, 12), float32]) -> Tensor[(15, 12), float32] {
  %203 = cast(%var_1264, dtype="float32") /* ty=Tensor[(15, 12), float32] */;
  log10(%203) /* ty=Tensor[(15, 12), float32] */
}

def @func_6260(%var_6254: Tensor[(5, 15), float32]) -> Tensor[(5, 15), float32] {
  %204 = cast(%var_6254, dtype="float32") /* ty=Tensor[(5, 15), float32] */;
  atanh(%204) /* ty=Tensor[(5, 15), float32] */
}

def @func_2798() -> (Tensor[(14, ?, 14), float32], Tensor[(14, ?, 14), float64]) {
  %205 = @func_2754() /* ty=Tensor[(14, 1, 14), float64] */;
  %206 = cast(%205, dtype="float64") /* ty=Tensor[(14, 1, 14), float64] */;
  %207 = tan(%206) /* ty=Tensor[(14, 1, 14), float64] */;
  %208 = cast(%205, dtype="int8") /* ty=Tensor[(14, 1, 14), int8] */;
  %209 = shape_of(%207, dtype="int32") /* ty=Tensor[(3), int32] */;
  %210 = cast(%207, dtype="int8") /* ty=Tensor[(14, 1, 14), int8] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %212 = bitwise_xor(%210, %211) /* ty=Tensor[(14, ?, 14), int8] */;
  %213 = cast(%212, dtype="float32") /* ty=Tensor[(14, ?, 14), float32] */;
  %214 = shape_of(%207, dtype="int32") /* ty=Tensor[(3), int32] */;
  %215 = cast(%207, dtype="float32") /* ty=Tensor[(14, 1, 14), float32] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %217 = cast(%212, dtype="float64") /* ty=Tensor[(14, ?, 14), float64] */;
  %218 = mod(%215, %216) /* ty=Tensor[(14, ?, 14), float32] */;
  %219 = sigmoid(%217) /* ty=Tensor[(14, ?, 14), float64] */;
  (%218, %219)
}

def @func_5879() -> (Tensor[(14, 3, 14), bool],) {
  %220 = @func_3789() /* ty=Tensor[(14, 3, 14), bool] */;
  (%220,)
}

def @func_5618() -> Tensor[(14, ?, 14), float64] {
  %221 = @func_4528() /* ty=(Tensor[(14, ?, 14), float64],) */;
  %221.0
}

def @func_6248(%var_6239: Tensor[(14, 10, 14), float64]) -> (Tensor[(14, 10, 14), int8],) {
  %222 = @func_3423() /* ty=(Tensor[(14, 1, 14), float64],) */;
  %223 = %222.0;
  %224 = cast(%223, dtype="int8") /* ty=Tensor[(14, 1, 14), int8] */;
  %225 = cast(%var_6239, dtype="int8") /* ty=Tensor[(14, 10, 14), int8] */;
  %226 = logical_xor(%224, %225) /* ty=Tensor[(14, 10, 14), int8] */;
  (%226,)
}

def @func_3616(%var_3587: Tensor[(15, 6), float64], %var_3603: Tensor[(14, 1, 14), float64]) -> (Tensor[(216), bool], Tensor[(15, 6), float64], Tensor[(180), int32], Tensor[(14, ?, 14), bool], Tensor[(50, 6), float32], Tensor[(1350), float32], Tensor[(300), float32]) {
  %227 = cast(%var_3587, dtype="float64") /* ty=Tensor[(15, 6), float64] */;
  %228 = cast(meta[relay.Constant][14] /* ty=Tensor[(180), int32] */, dtype="int32") /* ty=Tensor[(180), int32] */;
  %229 = reshape(%227, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %230 = reshape(%228, newshape=[180]) /* ty=Tensor[(180), int32] */;
  %231 = @func_3267(%229, %230) /* ty=(Tensor[(8, 14, 7), int32], Tensor[(9, 5, 2), bool], Tensor[(90), float64], Tensor[(216), bool], Tensor[(2, 15, 10), float32], Tensor[(910), int32], Tensor[(180), int32]) */;
  %232 = @func_2930() /* ty=(Tensor[(14, 1, 14), float64],) */;
  %233 = %232.0;
  %234 = cast(%var_3603, dtype="bool") /* ty=Tensor[(14, 1, 14), bool] */;
  %235 = shape_of(%233, dtype="int32") /* ty=Tensor[(3), int32] */;
  %236 = cast(%233, dtype="bool") /* ty=Tensor[(14, 1, 14), bool] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %238 = cast(meta[relay.Constant][15] /* ty=Tensor[(1350), float32] */, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %239 = cast(meta[relay.Constant][16] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %240 = reshape(%238, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), float32] */;
  %241 = reshape(%239, newshape=[50, 6]) /* ty=Tensor[(50, 6), float32] */;
  %242 = @func_1912(%240, %241) /* ty=(Tensor[(2, 15, 10), float32], Tensor[(50, 6), float32], Tensor[(15, 9, 10), float32], Tensor[(3, 9, 8), int16], Tensor[(216), bool]) */;
  %243 = %231.3;
  %244 = less(%236, %237) /* ty=Tensor[(14, ?, 14), bool] */;
  %245 = %242.1;
  (%243, %var_3587, meta[relay.Constant][14] /* ty=Tensor[(180), int32] */, %244, %245, meta[relay.Constant][15] /* ty=Tensor[(1350), float32] */, meta[relay.Constant][16] /* ty=Tensor[(300), float32] */)
}

def @func_5279() -> (Tensor[(14, 1, 14), float64],) {
  %246 = @func_2754() /* ty=Tensor[(14, 1, 14), float64] */;
  (%246,)
}

def @func_4888() -> (Tensor[(14, ?, 14), float32],) {
  %247 = @func_2798() /* ty=(Tensor[(14, ?, 14), float32], Tensor[(14, ?, 14), float64]) */;
  %248 = %247.0;
  (%248,)
}

def @func_1791(%var_1770: Tensor[(3, 6, 7), float32]) -> (Tensor[(3, 6, 7), float32],) {
  %249 = cast(%var_1770, dtype="float32") /* ty=Tensor[(3, 6, 7), float32] */;
  %250 = rsqrt(%249) /* ty=Tensor[(3, 6, 7), float32] */;
  %251 = cast(%250, dtype="float32") /* ty=Tensor[(3, 6, 7), float32] */;
  %252 = asin(%251) /* ty=Tensor[(3, 6, 7), float32] */;
  (%252,)
}

def @func_1721(%var_1656: Tensor[(6, 1, 5), float64], %var_1675: Tensor[(90), float64], %var_1676: Tensor[(216), bool]) -> (Tensor[(5, 4, ?), float64], Tensor[(45), int32], Tensor[(3, 9, 8), int16], Tensor[(90), float64], Tensor[(216), bool], Tensor[(300), float32], Tensor[(6, ?, 5), bool], Tensor[(6, 1, 5), float64]) {
  %253 = cast(meta[relay.Constant][17] /* ty=Tensor[(45), int32] */, dtype="int32") /* ty=Tensor[(45), int32] */;
  %254 = reshape(%253, newshape=[45]) /* ty=Tensor[(45), int32] */;
  %255 = @func_935(%254) /* ty=(Tensor[(5, 4, 1), float32], Tensor[(5, 4, ?), float64], Tensor[(4, 5, 9), bool], Tensor[(45), int32], Tensor[(6, 30), int32]) */;
  %256 = cast(%var_1675, dtype="float64") /* ty=Tensor[(90), float64] */;
  %257 = cast(%var_1675, dtype="float64") /* ty=Tensor[(90), float64] */;
  %258 = cast(%var_1676, dtype="bool") /* ty=Tensor[(216), bool] */;
  %259 = reshape(%256, newshape=[9, 5, 2]) /* ty=Tensor[(9, 5, 2), float64] */;
  %260 = reshape(%257, newshape=[9, 5, 2]) /* ty=Tensor[(9, 5, 2), float64] */;
  %261 = reshape(%258, newshape=[216]) /* ty=Tensor[(216), bool] */;
  %262 = @func_1647(%259, %260, %261) /* ty=(Tensor[(9, 5, 2), bool], Tensor[(3, 9, 8), int16], Tensor[(216), bool], Tensor[(48, 4), uint64], Tensor[(8, 15, 6), float64], Tensor[(720), float64]) */;
  %263 = %262.1;
  %264 = cast(%263, dtype="bool") /* ty=Tensor[(3, 9, 8), bool] */;
  %265 = cast(%var_1676, dtype="bool") /* ty=Tensor[(216), bool] */;
  %266 = reshape(%264, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), bool] */;
  %267 = reshape(%265, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), bool] */;
  %268 = @func_373(%266, %267) /* ty=(Tensor[(3, 9, 8), int16], Tensor[(300), float32], Tensor[(2, 15, 10), float64]) */;
  %269 = cast(%var_1656, dtype="float64") /* ty=Tensor[(6, 1, 5), float64] */;
  %270 = sqrt(%269) /* ty=Tensor[(6, 1, 5), float64] */;
  %271 = cast(%var_1656, dtype="bool") /* ty=Tensor[(6, 1, 5), bool] */;
  %272 = shape_of(%270, dtype="int32") /* ty=Tensor[(3), int32] */;
  %273 = cast(%270, dtype="bool") /* ty=Tensor[(6, 1, 5), bool] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %275 = greater_equal(%273, %274) /* ty=Tensor[(6, ?, 5), bool] */;
  %276 = cast(%270, dtype="float64") /* ty=Tensor[(6, 1, 5), float64] */;
  %277 = shape_of(%275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %278 = cast(%275, dtype="float64") /* ty=Tensor[(6, ?, 5), float64] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %280 = floor_divide(%278, %279) /* ty=Tensor[(6, ?, 5), float64] */;
  %281 = cast(%280, dtype="bool") /* ty=Tensor[(6, ?, 5), bool] */;
  %282 = shape_of(%275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %283 = cast(%275, dtype="bool") /* ty=Tensor[(6, ?, 5), bool] */;
  %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %285 = cast(%270, dtype="float64") /* ty=Tensor[(6, 1, 5), float64] */;
  %286 = asinh(%285) /* ty=Tensor[(6, 1, 5), float64] */;
  %287 = cast(%286, dtype="float64") /* ty=Tensor[(6, 1, 5), float64] */;
  %288 = %255.1;
  %289 = %268.1;
  %290 = equal(%283, %284) /* ty=Tensor[(6, ?, 5), bool] */;
  %291 = sinh(%287) /* ty=Tensor[(6, 1, 5), float64] */;
  (%288, meta[relay.Constant][17] /* ty=Tensor[(45), int32] */, %263, %var_1675, %var_1676, %289, %290, %291)
}

def @func_2911(%var_2879: Tensor[(90), float64], %var_2880: Tensor[(216), bool]) -> (Tensor[(8, 14, 7), int32], Tensor[(90), float64], Tensor[(2, 15, 10), float32], Tensor[(910), int32], Tensor[(3, 9, 8), bool], Tensor[(14, 1, 14), float64]) {
  %292 = @func_2866() /* ty=(Tensor[(8, 14, 7), int32],) */;
  %293 = cast(meta[relay.Constant][18] /* ty=Tensor[(910), int32] */, dtype="int32") /* ty=Tensor[(910), int32] */;
  %294 = reshape(%293, newshape=[5, 13, 14]) /* ty=Tensor[(5, 13, 14), int32] */;
  %295 = @func_2721(%294) /* ty=(Tensor[(5, 13, 14), int32], Tensor[(2, 15, 10), float32], Tensor[(300), float32]) */;
  %296 = cast(%var_2879, dtype="float64") /* ty=Tensor[(90), float64] */;
  %297 = cast(%var_2879, dtype="float64") /* ty=Tensor[(90), float64] */;
  %298 = cast(%var_2880, dtype="bool") /* ty=Tensor[(216), bool] */;
  %299 = reshape(%296, newshape=[9, 5, 2]) /* ty=Tensor[(9, 5, 2), float64] */;
  %300 = reshape(%297, newshape=[9, 5, 2]) /* ty=Tensor[(9, 5, 2), float64] */;
  %301 = reshape(%298, newshape=[216]) /* ty=Tensor[(216), bool] */;
  %302 = @func_1647(%299, %300, %301) /* ty=(Tensor[(9, 5, 2), bool], Tensor[(3, 9, 8), int16], Tensor[(216), bool], Tensor[(48, 4), uint64], Tensor[(8, 15, 6), float64], Tensor[(720), float64]) */;
  %303 = %302.1;
  %304 = cast(%var_2880, dtype="bool") /* ty=Tensor[(216), bool] */;
  %305 = shape_of(%303, dtype="int32") /* ty=Tensor[(3), int32] */;
  %306 = cast(%303, dtype="bool") /* ty=Tensor[(3, 9, 8), bool] */;
  %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %308 = %292.0;
  %309 = %295.1;
  %310 = equal(%306, %307) /* ty=Tensor[(3, 9, 8), bool] */;
  %311 = @func_2754() /* ty=Tensor[(14, 1, 14), float64] */;
  (%308, %var_2879, %309, meta[relay.Constant][18] /* ty=Tensor[(910), int32] */, %310, %311)
}

def @func_250(%var_245: Tensor[(2, 15, 10), float32]) -> Tensor[(2, 15, 10), float32] {
  %312 = cast(%var_245, dtype="float32") /* ty=Tensor[(2, 15, 10), float32] */;
  sin(%312) /* ty=Tensor[(2, 15, 10), float32] */
}

def @func_1912(%var_1869: Tensor[(15, 9, 10), float32], %var_1883: Tensor[(50, 6), float32]) -> (Tensor[(2, 15, 10), float32], Tensor[(50, 6), float32], Tensor[(15, 9, 10), float32], Tensor[(3, 9, 8), int16], Tensor[(216), bool]) {
  %313 = cast(%var_1883, dtype="float32") /* ty=Tensor[(50, 6), float32] */;
  %314 = reshape(%313, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), float32] */;
  %315 = cast(%var_1869, dtype="float32") /* ty=Tensor[(15, 9, 10), float32] */;
  %316 = acos(%315) /* ty=Tensor[(15, 9, 10), float32] */;
  %317 = cast(%316, dtype="float32") /* ty=Tensor[(15, 9, 10), float32] */;
  %318 = cast(meta[relay.Constant][19] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
  %319 = cast(meta[relay.Constant][19] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
  %320 = reshape(%318, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), bool] */;
  %321 = reshape(%319, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), bool] */;
  %322 = @func_373(%320, %321) /* ty=(Tensor[(3, 9, 8), int16], Tensor[(300), float32], Tensor[(2, 15, 10), float64]) */;
  %323 = @func_250(%314) /* ty=Tensor[(2, 15, 10), float32] */;
  %324 = acosh(%317) /* ty=Tensor[(15, 9, 10), float32] */;
  %325 = %322.0;
  (%323, %var_1883, %324, %325, meta[relay.Constant][19] /* ty=Tensor[(216), bool] */)
}

def @func_2852() -> (Tensor[(14, ?, 14), float64],) {
  %326 = @func_2798() /* ty=(Tensor[(14, ?, 14), float32], Tensor[(14, ?, 14), float64]) */;
  %327 = %326.1;
  (%327,)
}

def @func_3626() -> (Tensor[(14, 1, 14), float64],) {
  %328 = @func_2754() /* ty=Tensor[(14, 1, 14), float64] */;
  (%328,)
}

def @func_2999(%var_2945: Tensor[(90), float64], %var_2946: Tensor[(108, 2), bool], %var_2957: Tensor[(910), int32], %var_2976: Tensor[(180), int32]) -> (Tensor[(14, 1, 14), float64], Tensor[(14, ?, 14), float32], Tensor[(2, 15, 10), float32], Tensor[(90), float64], Tensor[(910), bool], Tensor[(4, 5, 9), bool], Tensor[(45), int32], Tensor[(180), int32], Tensor[(108, 2), float64]) {
  %329 = @func_2930() /* ty=(Tensor[(14, 1, 14), float64],) */;
  %330 = @func_2798() /* ty=(Tensor[(14, ?, 14), float32], Tensor[(14, ?, 14), float64]) */;
  %331 = cast(%var_2945, dtype="float64") /* ty=Tensor[(90), float64] */;
  %332 = cast(%var_2946, dtype="bool") /* ty=Tensor[(108, 2), bool] */;
  %333 = reshape(%331, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %334 = reshape(%332, newshape=[216]) /* ty=Tensor[(216), bool] */;
  %335 = @func_2911(%333, %334) /* ty=(Tensor[(8, 14, 7), int32], Tensor[(90), float64], Tensor[(2, 15, 10), float32], Tensor[(910), int32], Tensor[(3, 9, 8), bool], Tensor[(14, 1, 14), float64]) */;
  %336 = cast(%var_2945, dtype="float64") /* ty=Tensor[(90), float64] */;
  %337 = cast(%var_2946, dtype="bool") /* ty=Tensor[(108, 2), bool] */;
  %338 = reshape(%336, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %339 = reshape(%337, newshape=[216]) /* ty=Tensor[(216), bool] */;
  %340 = @func_2911(%338, %339) /* ty=(Tensor[(8, 14, 7), int32], Tensor[(90), float64], Tensor[(2, 15, 10), float32], Tensor[(910), int32], Tensor[(3, 9, 8), bool], Tensor[(14, 1, 14), float64]) */;
  %341 = %340.3;
  %342 = cast(%var_2957, dtype="bool") /* ty=Tensor[(910), bool] */;
  %343 = shape_of(%341, dtype="int32") /* ty=Tensor[(1), int32] */;
  %344 = cast(%341, dtype="bool") /* ty=Tensor[(910), bool] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?), bool] */;
  %346 = cast(meta[relay.Constant][20] /* ty=Tensor[(45), int32] */, dtype="int32") /* ty=Tensor[(45), int32] */;
  %347 = cast(%var_2976, dtype="int32") /* ty=Tensor[(180), int32] */;
  %348 = reshape(%346, newshape=[1, 5, 9]) /* ty=Tensor[(1, 5, 9), int32] */;
  %349 = reshape(%347, newshape=[4, 5, 9]) /* ty=Tensor[(4, 5, 9), int32] */;
  %350 = @func_767(%348, %349) /* ty=(Tensor[(4, 5, 9), bool],) */;
  %351 = cast(%var_2946, dtype="float64") /* ty=Tensor[(108, 2), float64] */;
  %352 = %329.0;
  %353 = %330.0;
  %354 = %335.2;
  %355 = not_equal(%344, %345) /* ty=Tensor[(910), bool] */;
  %356 = %350.0;
  %357 = atan(%351) /* ty=Tensor[(108, 2), float64] */;
  (%352, %353, %354, %var_2945, %355, %356, meta[relay.Constant][20] /* ty=Tensor[(45), int32] */, %var_2976, %357)
}

def @func_3937(%var_3898: Tensor[(7, 2, 1), uint64], %var_3899: Tensor[(7, 2, 14), uint64]) -> (Tensor[(7, 2, 14), uint64], Tensor[(6, 30), int32], Tensor[(7, 2, 45), bool]) {
  %358 = cast(%var_3898, dtype="uint64") /* ty=Tensor[(7, 2, 1), uint64] */;
  %359 = cast(%var_3899, dtype="uint64") /* ty=Tensor[(7, 2, 14), uint64] */;
  %360 = cast(meta[relay.Constant][21] /* ty=Tensor[(45), int32] */, dtype="int32") /* ty=Tensor[(45), int32] */;
  %361 = reshape(%360, newshape=[45]) /* ty=Tensor[(45), int32] */;
  %362 = @func_2546(%361) /* ty=(Tensor[(6, 5, 4), float64], Tensor[(6, 30), int32], Tensor[(45), int32]) */;
  %363 = cast(%var_3898, dtype="bool") /* ty=Tensor[(7, 2, 1), bool] */;
  %364 = cast(meta[relay.Constant][21] /* ty=Tensor[(45), int32] */, dtype="bool") /* ty=Tensor[(45), bool] */;
  %365 = bitwise_and(%358, %359) /* ty=Tensor[(7, 2, 14), uint64] */;
  %366 = %362.1;
  %367 = greater_equal(%363, %364) /* ty=Tensor[(7, 2, 45), bool] */;
  (%365, %366, %367)
}

def @func_4702(%var_4663: Tensor[(90), float64], %var_4666: Tensor[(14, 10, 14), float64]) -> (Tensor[(216), bool], Tensor[(90), float64], Tensor[(216), bool], Tensor[(14, ?, 14), float64], Tensor[(14, 10, 14), float32], Tensor[(300), float32], Tensor[(8, 15, 6), float64], Tensor[(1680), float32]) {
  %368 = cast(%var_4663, dtype="float64") /* ty=Tensor[(90), float64] */;
  %369 = cast(%var_4663, dtype="float64") /* ty=Tensor[(90), float64] */;
  %370 = cast(meta[relay.Constant][22] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
  %371 = reshape(%368, newshape=[9, 5, 2]) /* ty=Tensor[(9, 5, 2), float64] */;
  %372 = reshape(%369, newshape=[9, 5, 2]) /* ty=Tensor[(9, 5, 2), float64] */;
  %373 = reshape(%370, newshape=[216]) /* ty=Tensor[(216), bool] */;
  %374 = @func_1647(%371, %372, %373) /* ty=(Tensor[(9, 5, 2), bool], Tensor[(3, 9, 8), int16], Tensor[(216), bool], Tensor[(48, 4), uint64], Tensor[(8, 15, 6), float64], Tensor[(720), float64]) */;
  %375 = @func_3682() /* ty=(Tensor[(14, ?, 14), float64],) */;
  %376 = @func_3746() /* ty=(Tensor[(14, 1, 14), float64],) */;
  %377 = %376.0;
  %378 = cast(%377, dtype="float32") /* ty=Tensor[(14, 1, 14), float32] */;
  %379 = cast(%var_4666, dtype="float32") /* ty=Tensor[(14, 10, 14), float32] */;
  %380 = floor_mod(%378, %379) /* ty=Tensor[(14, 10, 14), float32] */;
  %381 = cast(%380, dtype="float32") /* ty=Tensor[(14, 10, 14), float32] */;
  %382 = cast(meta[relay.Constant][22] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
  %383 = cast(meta[relay.Constant][22] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
  %384 = reshape(%382, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), bool] */;
  %385 = reshape(%383, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), bool] */;
  %386 = @func_373(%384, %385) /* ty=(Tensor[(3, 9, 8), int16], Tensor[(300), float32], Tensor[(2, 15, 10), float64]) */;
  %387 = cast(meta[relay.Constant][23] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %388 = reshape(%387, newshape=[1680]) /* ty=Tensor[(1680), float32] */;
  %389 = @func_3975(%388) /* ty=(Tensor[(14, 1, 14), float64], Tensor[(8, 15, 6), float64], Tensor[(720), float64], Tensor[(8, 15, 6), float64], Tensor[(1680), float32]) */;
  %390 = %374.2;
  %391 = %375.0;
  %392 = cos(%381) /* ty=Tensor[(14, 10, 14), float32] */;
  %393 = %386.1;
  %394 = %389.3;
  (%390, %var_4663, meta[relay.Constant][22] /* ty=Tensor[(216), bool] */, %391, %392, %393, %394, meta[relay.Constant][23] /* ty=Tensor[(1680), float32] */)
}

def @func_6192(%var_6186: Tensor[(11, 12, 4), float64]) -> Tensor[(11, 12, 4), float64] {
  %395 = cast(%var_6186, dtype="float64") /* ty=Tensor[(11, 12, 4), float64] */;
  cos(%395) /* ty=Tensor[(11, 12, 4), float64] */
}

def @func_5782() -> (Tensor[(14, 3, 14), float32], Tensor[(14, 3, 14), float64]) {
  %396 = @func_5384() /* ty=(Tensor[(14, 3, 14), bool],) */;
  %397 = %396.0;
  %398 = cast(%397, dtype="float32") /* ty=Tensor[(14, 3, 14), float32] */;
  %399 = cosh(%398) /* ty=Tensor[(14, 3, 14), float32] */;
  %400 = cast(%399, dtype="float32") /* ty=Tensor[(14, 3, 14), float32] */;
  %401 = cast(%399, dtype="float64") /* ty=Tensor[(14, 3, 14), float64] */;
  %402 = erf(%400) /* ty=Tensor[(14, 3, 14), float32] */;
  %403 = sinh(%401) /* ty=Tensor[(14, 3, 14), float64] */;
  (%402, %403)
}

def @func_5833(%var_5824: Tensor[(14, 6, 14), float64]) -> (Tensor[(14, 6, 14), bool],) {
  %404 = @func_5691() /* ty=Tensor[(14, 1, 14), float64] */;
  %405 = cast(%404, dtype="bool") /* ty=Tensor[(14, 1, 14), bool] */;
  %406 = cast(%var_5824, dtype="bool") /* ty=Tensor[(14, 6, 14), bool] */;
  %407 = equal(%405, %406) /* ty=Tensor[(14, 6, 14), bool] */;
  (%407,)
}

def @func_5115() -> Tensor[(14, 3, 14), bool] {
  %408 = @func_4130() /* ty=(Tensor[(14, 1, 14), float64], Tensor[(14, 3, 14), bool]) */;
  %408.1
}

def @func_373(%var_336: Tensor[(3, 9, 8), bool], %var_337: Tensor[(3, 9, 8), bool]) -> (Tensor[(3, 9, 8), int16], Tensor[(300), float32], Tensor[(2, 15, 10), float64]) {
  %409 = cast(%var_337, dtype="bool") /* ty=Tensor[(3, 9, 8), bool] */;
  %410 = shape_of(%var_336, dtype="int32") /* ty=Tensor[(3), int32] */;
  %411 = cast(%var_336, dtype="bool") /* ty=Tensor[(3, 9, 8), bool] */;
  %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %413 = logical_and(%411, %412) /* ty=Tensor[(3, 9, 8), bool] */;
  %414 = cast(%var_336, dtype="int16") /* ty=Tensor[(3, 9, 8), int16] */;
  %415 = shape_of(%413, dtype="int32") /* ty=Tensor[(3), int32] */;
  %416 = cast(%413, dtype="int16") /* ty=Tensor[(3, 9, 8), int16] */;
  %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %418 = cast(meta[relay.Constant][24] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %419 = reshape(%418, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), float32] */;
  %420 = @func_250(%419) /* ty=Tensor[(2, 15, 10), float32] */;
  %421 = cast(%420, dtype="float64") /* ty=Tensor[(2, 15, 10), float64] */;
  %422 = right_shift(%416, %417) /* ty=Tensor[(3, 9, 8), int16] */;
  %423 = asin(%421) /* ty=Tensor[(2, 15, 10), float64] */;
  (%422, meta[relay.Constant][24] /* ty=Tensor[(300), float32] */, %423)
}

def @func_2930() -> (Tensor[(14, 1, 14), float64],) {
  %424 = @func_2754() /* ty=Tensor[(14, 1, 14), float64] */;
  (%424,)
}

def @func_5485(%var_5442: Tensor[(9, 4, 3), int8], %var_5443: Tensor[(9, 4, 3), int8]) -> (Tensor[(9, 4, 3), int8], Tensor[(14, 1, 14), float64]) {
  %425 = cast(%var_5443, dtype="int8") /* ty=Tensor[(9, 4, 3), int8] */;
  %426 = shape_of(%var_5442, dtype="int32") /* ty=Tensor[(3), int32] */;
  %427 = cast(%var_5442, dtype="int8") /* ty=Tensor[(9, 4, 3), int8] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %429 = @func_4130() /* ty=(Tensor[(14, 1, 14), float64], Tensor[(14, 3, 14), bool]) */;
  %430 = minimum(%427, %428) /* ty=Tensor[(9, 4, 3), int8] */;
  %431 = %429.0;
  (%430, %431)
}

def @func_3103(%var_3089: Tensor[(6, 3, 9), float64]) -> (Tensor[(6, 3, 9), float64], Tensor[(14, ?, 14), float64]) {
  %432 = cast(%var_3089, dtype="float64") /* ty=Tensor[(6, 3, 9), float64] */;
  %433 = @func_2798() /* ty=(Tensor[(14, ?, 14), float32], Tensor[(14, ?, 14), float64]) */;
  %434 = %433.1;
  %435 = cast(%434, dtype="float64") /* ty=Tensor[(14, ?, 14), float64] */;
  %436 = sigmoid(%432) /* ty=Tensor[(6, 3, 9), float64] */;
  %437 = sinh(%435) /* ty=Tensor[(14, ?, 14), float64] */;
  (%436, %437)
}

def @func_5103(%var_5089: Tensor[(14, 3, 14), bool]) -> Tensor[(14, 3, 14), uint32] {
  %438 = @func_4130() /* ty=(Tensor[(14, 1, 14), float64], Tensor[(14, 3, 14), bool]) */;
  %439 = %438.1;
  %440 = cast(%var_5089, dtype="uint32") /* ty=Tensor[(14, 3, 14), uint32] */;
  %441 = shape_of(%439, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%439, dtype="uint32") /* ty=Tensor[(14, 3, 14), uint32] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_xor(%442, %443) /* ty=Tensor[(14, 3, 14), uint32] */
}

def @func_5716(%var_5709: Tensor[(14, 16, 14), float64]) -> (Tensor[(14, 16, 14), float32],) {
  %444 = @func_5509() /* ty=(Tensor[(14, 1, 14), float64], Tensor[(14, 1, 14), float64], Tensor[(14, 9, 14), bool], Tensor[(1764), float64]) */;
  %445 = %444.1;
  %446 = cast(%445, dtype="float32") /* ty=Tensor[(14, 1, 14), float32] */;
  %447 = cast(%var_5709, dtype="float32") /* ty=Tensor[(14, 16, 14), float32] */;
  %448 = power(%446, %447) /* ty=Tensor[(14, 16, 14), float32] */;
  (%448,)
}

def @func_6108() -> (Tensor[(14, 3, 14), bool], Tensor[(6, 5, 12), float32], Tensor[(360), float32]) {
  %449 = cast(meta[relay.Constant][25] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %450 = @func_3789() /* ty=Tensor[(14, 3, 14), bool] */;
  %451 = cast(%450, dtype="bool") /* ty=Tensor[(14, 3, 14), bool] */;
  %452 = reshape(%449, newshape=[6, 5, 12]) /* ty=Tensor[(6, 5, 12), float32] */;
  %453 = reshape(%451, newshape=[588]) /* ty=Tensor[(588), bool] */;
  %454 = @func_5963(%452, %453) /* ty=(Tensor[(14, 1, 14), float64], Tensor[(14, ?, 14), float64], Tensor[(162), float64], Tensor[(14, 3, 14), uint32], Tensor[(588), bool], Tensor[(6, 5, 12), bool], Tensor[(6, 5, 12), float32]) */;
  %455 = %454.6;
  (%450, %455, meta[relay.Constant][25] /* ty=Tensor[(360), float32] */)
}

def @func_5012(%var_4985: Tensor[(6, 8, 14), bool], %var_4986: Tensor[(6, 8, 14), bool]) -> (Tensor[(6, 8, 14), bool], Tensor[(45), int32], Tensor[(30), float64], Tensor[(90), float64], Tensor[(216), bool]) {
  %456 = cast(%var_4986, dtype="bool") /* ty=Tensor[(6, 8, 14), bool] */;
  %457 = shape_of(%var_4985, dtype="int32") /* ty=Tensor[(3), int32] */;
  %458 = cast(%var_4985, dtype="bool") /* ty=Tensor[(6, 8, 14), bool] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %460 = cast(meta[relay.Constant][26] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %461 = cast(meta[relay.Constant][27] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %462 = cast(meta[relay.Constant][28] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
  %463 = reshape(%460, newshape=[6, 1, 5]) /* ty=Tensor[(6, 1, 5), float64] */;
  %464 = reshape(%461, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %465 = reshape(%462, newshape=[216]) /* ty=Tensor[(216), bool] */;
  %466 = @func_1721(%463, %464, %465) /* ty=(Tensor[(5, 4, ?), float64], Tensor[(45), int32], Tensor[(3, 9, 8), int16], Tensor[(90), float64], Tensor[(216), bool], Tensor[(300), float32], Tensor[(6, ?, 5), bool], Tensor[(6, 1, 5), float64]) */;
  %467 = logical_or(%458, %459) /* ty=Tensor[(6, 8, 14), bool] */;
  %468 = %466.1;
  (%467, %468, meta[relay.Constant][26] /* ty=Tensor[(30), float64] */, meta[relay.Constant][27] /* ty=Tensor[(90), float64] */, meta[relay.Constant][28] /* ty=Tensor[(216), bool] */)
}

def @func_5568(%var_5539: Tensor[(1350), float32], %var_5540: Tensor[(300), float32], %var_5543: Tensor[(1, 252), int16], %var_5558: Tensor[(45), int32], %var_5566: Tensor[(280), float64]) -> (Tensor[(14, 3, 14), bool], Tensor[(1350), float32], Tensor[(300), float32], Tensor[(9, 7, 4), int16], Tensor[(1, 252), int16], Tensor[(14, 1, 14), float64], Tensor[(15, 9, 10), float64], Tensor[(45), int32], Tensor[(45), int32], Tensor[(14, 5, 4), float64], Tensor[(280), float64]) {
  %469 = cast(%var_5543, dtype="int16") /* ty=Tensor[(1, 252), int16] */;
  %470 = cast(%var_5543, dtype="int16") /* ty=Tensor[(1, 252), int16] */;
  %471 = reshape(%469, newshape=[9, 7, 4]) /* ty=Tensor[(9, 7, 4), int16] */;
  %472 = reshape(%470, newshape=[9, 7, 4]) /* ty=Tensor[(9, 7, 4), int16] */;
  %473 = @func_1233(%471, %472) /* ty=(Tensor[(9, 7, 4), int16], Tensor[(3, 9, 8), int16], Tensor[(2, 108), bool], Tensor[(2, 15, 10), float32], Tensor[(300), float32]) */;
  %474 = @func_3746() /* ty=(Tensor[(14, 1, 14), float64],) */;
  %475 = cast(%var_5539, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %476 = cast(%var_5540, dtype="float32") /* ty=Tensor[(300), float32] */;
  %477 = reshape(%475, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), float32] */;
  %478 = reshape(%476, newshape=[50, 6]) /* ty=Tensor[(50, 6), float32] */;
  %479 = @func_1912(%477, %478) /* ty=(Tensor[(2, 15, 10), float32], Tensor[(50, 6), float32], Tensor[(15, 9, 10), float32], Tensor[(3, 9, 8), int16], Tensor[(216), bool]) */;
  %480 = %479.2;
  %481 = cast(%480, dtype="float64") /* ty=Tensor[(15, 9, 10), float64] */;
  %482 = cast(%var_5558, dtype="int32") /* ty=Tensor[(45), int32] */;
  %483 = reshape(%482, newshape=[45]) /* ty=Tensor[(45), int32] */;
  %484 = @func_935(%483) /* ty=(Tensor[(5, 4, 1), float32], Tensor[(5, 4, ?), float64], Tensor[(4, 5, 9), bool], Tensor[(45), int32], Tensor[(6, 30), int32]) */;
  %485 = cast(%var_5566, dtype="float64") /* ty=Tensor[(280), float64] */;
  %486 = reshape(%485, newshape=[14, 5, 4]) /* ty=Tensor[(14, 5, 4), float64] */;
  %487 = @func_3789() /* ty=Tensor[(14, 3, 14), bool] */;
  %488 = %473.0;
  %489 = %474.0;
  %490 = sin(%481) /* ty=Tensor[(15, 9, 10), float64] */;
  %491 = %484.3;
  %492 = @func_4489(%486) /* ty=Tensor[(14, 5, 4), float64] */;
  (%487, %var_5539, %var_5540, %488, %var_5543, %489, %490, %491, %var_5558, %492, %var_5566)
}

def @func_5043(%var_5017: Tensor[(10, 14, 7), float64], %var_5036: Tensor[(90), float64]) -> (Tensor[(10, 14, 7), float64], Tensor[(8, 15, 6), float64], Tensor[(90), float64], Tensor[(1960), float64]) {
  %493 = cast(%var_5017, dtype="float64") /* ty=Tensor[(10, 14, 7), float64] */;
  %494 = cast(%var_5036, dtype="float64") /* ty=Tensor[(90), float64] */;
  %495 = cast(meta[relay.Constant][29] /* ty=Tensor[(1960), float64] */, dtype="float64") /* ty=Tensor[(1960), float64] */;
  %496 = reshape(%494, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %497 = reshape(%495, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), float64] */;
  %498 = @func_4702(%496, %497) /* ty=(Tensor[(216), bool], Tensor[(90), float64], Tensor[(216), bool], Tensor[(14, ?, 14), float64], Tensor[(14, 10, 14), float32], Tensor[(300), float32], Tensor[(8, 15, 6), float64], Tensor[(1680), float32]) */;
  %499 = cos(%493) /* ty=Tensor[(10, 14, 7), float64] */;
  %500 = %498.6;
  (%499, %500, %var_5036, meta[relay.Constant][29] /* ty=Tensor[(1960), float64] */)
}

def @func_4638(%var_4629: Tensor[(14, 3, 14), bool]) -> (Tensor[(14, 3, 14), float64],) {
  %501 = @func_4130() /* ty=(Tensor[(14, 1, 14), float64], Tensor[(14, 3, 14), bool]) */;
  %502 = %501.1;
  %503 = cast(%var_4629, dtype="float64") /* ty=Tensor[(14, 3, 14), float64] */;
  %504 = shape_of(%502, dtype="int32") /* ty=Tensor[(3), int32] */;
  %505 = cast(%502, dtype="float64") /* ty=Tensor[(14, 3, 14), float64] */;
  %506 = dyn.reshape(%503, %504, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %507 = subtract(%505, %506) /* ty=Tensor[(14, 3, 14), float64] */;
  (%507,)
}

def @func_5437() -> (Tensor[(14, 1, 14), float64],) {
  %508 = @func_2754() /* ty=Tensor[(14, 1, 14), float64] */;
  (%508,)
}

def @func_5384() -> (Tensor[(14, 3, 14), bool],) {
  %509 = @func_3789() /* ty=Tensor[(14, 3, 14), bool] */;
  (%509,)
}

def @func_2721(%var_2698: Tensor[(5, 13, 14), int32]) -> (Tensor[(5, 13, 14), int32], Tensor[(2, 15, 10), float32], Tensor[(300), float32]) {
  %510 = cast(meta[relay.Constant][30] /* ty=Tensor[(5, 13, 14), int32] */, dtype="int32") /* ty=Tensor[(5, 13, 14), int32] */;
  %511 = shape_of(%var_2698, dtype="int32") /* ty=Tensor[(3), int32] */;
  %512 = cast(%var_2698, dtype="int32") /* ty=Tensor[(5, 13, 14), int32] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %514 = cast(meta[relay.Constant][31] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %515 = reshape(%514, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), float32] */;
  %516 = multiply(%512, %513) /* ty=Tensor[(5, 13, 14), int32] */;
  %517 = @func_250(%515) /* ty=Tensor[(2, 15, 10), float32] */;
  (%516, %517, meta[relay.Constant][31] /* ty=Tensor[(300), float32] */)
}

def @func_6285(%var_6266: Tensor[(7, 8, 13), float32]) -> (Tensor[(7, 8, 13), float32],) {
  %518 = cast(%var_6266, dtype="float32") /* ty=Tensor[(7, 8, 13), float32] */;
  %519 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(7, 8, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %520 = cast(meta[relay.Constant][32] /* ty=Tensor[(7, 8, 13), float32] */, dtype="float32") /* ty=Tensor[(7, 8, 13), float32] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %522 = maximum(%520, %521) /* ty=Tensor[(7, 8, 13), float32] */;
  (%522,)
}

def @func_4088(%var_4055: Tensor[(14, 4, 14), float64], %var_4061: Tensor[(14, 4, 14), float64]) -> (Tensor[(14, 4, 14), bool], Tensor[(14, 4, 14), float32], Tensor[(3, 9, 8), int16], Tensor[(1, 216), bool]) {
  %523 = @func_3746() /* ty=(Tensor[(14, 1, 14), float64],) */;
  %524 = %523.0;
  %525 = cast(%524, dtype="bool") /* ty=Tensor[(14, 1, 14), bool] */;
  %526 = cast(%var_4055, dtype="bool") /* ty=Tensor[(14, 4, 14), bool] */;
  %527 = cast(%524, dtype="bool") /* ty=Tensor[(14, 1, 14), bool] */;
  %528 = cast(%var_4061, dtype="bool") /* ty=Tensor[(14, 4, 14), bool] */;
  %529 = logical_or(%527, %528) /* ty=Tensor[(14, 4, 14), bool] */;
  %530 = cast(%var_4061, dtype="float32") /* ty=Tensor[(14, 4, 14), float32] */;
  %531 = shape_of(%529, dtype="int32") /* ty=Tensor[(3), int32] */;
  %532 = cast(%529, dtype="float32") /* ty=Tensor[(14, 4, 14), float32] */;
  %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %534 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 216), bool] */, dtype="bool") /* ty=Tensor[(1, 216), bool] */;
  %535 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 216), bool] */, dtype="bool") /* ty=Tensor[(1, 216), bool] */;
  %536 = reshape(%534, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), bool] */;
  %537 = reshape(%535, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), bool] */;
  %538 = @func_373(%536, %537) /* ty=(Tensor[(3, 9, 8), int16], Tensor[(300), float32], Tensor[(2, 15, 10), float64]) */;
  %539 = less(%525, %526) /* ty=Tensor[(14, 4, 14), bool] */;
  %540 = mod(%532, %533) /* ty=Tensor[(14, 4, 14), float32] */;
  %541 = %538.0;
  (%539, %540, %541, meta[relay.Constant][33] /* ty=Tensor[(1, 216), bool] */)
}

def @func_5963(%var_5898: Tensor[(6, 5, 12), float32], %var_5929: Tensor[(588), bool]) -> (Tensor[(14, 1, 14), float64], Tensor[(14, ?, 14), float64], Tensor[(162), float64], Tensor[(14, 3, 14), uint32], Tensor[(588), bool], Tensor[(6, 5, 12), bool], Tensor[(6, 5, 12), float32]) {
  %542 = cast(meta[relay.Constant][34] /* ty=Tensor[(162), float64] */, dtype="float64") /* ty=Tensor[(162), float64] */;
  %543 = reshape(%542, newshape=[6, 3, 9]) /* ty=Tensor[(6, 3, 9), float64] */;
  %544 = @func_3103(%543) /* ty=(Tensor[(6, 3, 9), float64], Tensor[(14, ?, 14), float64]) */;
  %545 = cast(%var_5929, dtype="bool") /* ty=Tensor[(588), bool] */;
  %546 = reshape(%545, newshape=[14, 3, 14]) /* ty=Tensor[(14, 3, 14), bool] */;
  %547 = cast(%var_5898, dtype="float32") /* ty=Tensor[(6, 5, 12), float32] */;
  %548 = acosh(%547) /* ty=Tensor[(6, 5, 12), float32] */;
  %549 = cast(%548, dtype="float64") /* ty=Tensor[(6, 5, 12), float64] */;
  %550 = log(%549) /* ty=Tensor[(6, 5, 12), float64] */;
  %551 = cast(%550, dtype="float32") /* ty=Tensor[(6, 5, 12), float32] */;
  %552 = sin(%551) /* ty=Tensor[(6, 5, 12), float32] */;
  %553 = cast(%552, dtype="int16") /* ty=Tensor[(6, 5, 12), int16] */;
  %554 = shape_of(%550, dtype="int32") /* ty=Tensor[(3), int32] */;
  %555 = cast(%550, dtype="int16") /* ty=Tensor[(6, 5, 12), int16] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %557 = subtract(%555, %556) /* ty=Tensor[(6, 5, 12), int16] */;
  %558 = cast(%557, dtype="bool") /* ty=Tensor[(6, 5, 12), bool] */;
  %559 = shape_of(%550, dtype="int32") /* ty=Tensor[(3), int32] */;
  %560 = cast(%550, dtype="bool") /* ty=Tensor[(6, 5, 12), bool] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %562 = cast(%557, dtype="float32") /* ty=Tensor[(6, 5, 12), float32] */;
  %563 = erf(%562) /* ty=Tensor[(6, 5, 12), float32] */;
  %564 = cast(%563, dtype="float64") /* ty=Tensor[(6, 5, 12), float64] */;
  %565 = shape_of(%548, dtype="int32") /* ty=Tensor[(3), int32] */;
  %566 = cast(%548, dtype="float64") /* ty=Tensor[(6, 5, 12), float64] */;
  %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %568 = floor_mod(%566, %567) /* ty=Tensor[(6, 5, 12), float64] */;
  %569 = cast(%568, dtype="float32") /* ty=Tensor[(6, 5, 12), float32] */;
  %570 = @func_2754() /* ty=Tensor[(14, 1, 14), float64] */;
  %571 = %544.1;
  %572 = @func_5103(%546) /* ty=Tensor[(14, 3, 14), uint32] */;
  %573 = equal(%560, %561) /* ty=Tensor[(6, 5, 12), bool] */;
  %574 = tan(%569) /* ty=Tensor[(6, 5, 12), float32] */;
  (%570, %571, meta[relay.Constant][34] /* ty=Tensor[(162), float64] */, %572, %var_5929, %573, %574)
}

def @func_4951() -> (Tensor[(14, 1, 14), float64],) {
  %575 = @func_2930() /* ty=(Tensor[(14, 1, 14), float64],) */;
  %576 = %575.0;
  (%576,)
}

def @func_5236() -> (Tensor[(14, 3, 14), bool],) {
  %577 = @func_5115() /* ty=Tensor[(14, 3, 14), bool] */;
  (%577,)
}

def @func_5350() -> (Tensor[(14, 1, 14), float64], Tensor[(14, 3, 14), bool]) {
  %578 = @func_4951() /* ty=(Tensor[(14, 1, 14), float64],) */;
  %579 = @func_4130() /* ty=(Tensor[(14, 1, 14), float64], Tensor[(14, 3, 14), bool]) */;
  %580 = %578.0;
  %581 = %579.1;
  (%580, %581)
}

def @func_3267(%var_3222: Tensor[(90), float64], %var_3232: Tensor[(180), int32]) -> (Tensor[(8, 14, 7), int32], Tensor[(9, 5, 2), bool], Tensor[(90), float64], Tensor[(216), bool], Tensor[(2, 15, 10), float32], Tensor[(910), int32], Tensor[(180), int32]) {
  %582 = cast(%var_3222, dtype="float64") /* ty=Tensor[(90), float64] */;
  %583 = cast(%var_3222, dtype="float64") /* ty=Tensor[(90), float64] */;
  %584 = cast(meta[relay.Constant][35] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
  %585 = reshape(%582, newshape=[9, 5, 2]) /* ty=Tensor[(9, 5, 2), float64] */;
  %586 = reshape(%583, newshape=[9, 5, 2]) /* ty=Tensor[(9, 5, 2), float64] */;
  %587 = reshape(%584, newshape=[216]) /* ty=Tensor[(216), bool] */;
  %588 = @func_1647(%585, %586, %587) /* ty=(Tensor[(9, 5, 2), bool], Tensor[(3, 9, 8), int16], Tensor[(216), bool], Tensor[(48, 4), uint64], Tensor[(8, 15, 6), float64], Tensor[(720), float64]) */;
  %589 = %588.0;
  %590 = cast(%589, dtype="float64") /* ty=Tensor[(9, 5, 2), float64] */;
  %591 = cast(meta[relay.Constant][35] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
  %592 = cast(meta[relay.Constant][36] /* ty=Tensor[(910), int32] */, dtype="int32") /* ty=Tensor[(910), int32] */;
  %593 = cast(%var_3232, dtype="int32") /* ty=Tensor[(180), int32] */;
  %594 = reshape(%590, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %595 = reshape(%591, newshape=[108, 2]) /* ty=Tensor[(108, 2), bool] */;
  %596 = reshape(%592, newshape=[910]) /* ty=Tensor[(910), int32] */;
  %597 = reshape(%593, newshape=[180]) /* ty=Tensor[(180), int32] */;
  %598 = @func_2999(%594, %595, %596, %597) /* ty=(Tensor[(14, 1, 14), float64], Tensor[(14, ?, 14), float32], Tensor[(2, 15, 10), float32], Tensor[(90), float64], Tensor[(910), bool], Tensor[(4, 5, 9), bool], Tensor[(45), int32], Tensor[(180), int32], Tensor[(108, 2), float64]) */;
  %599 = @func_3065() /* ty=Tensor[(8, 14, 7), int32] */;
  %600 = %598.2;
  (%599, %589, %var_3222, meta[relay.Constant][35] /* ty=Tensor[(216), bool] */, %600, meta[relay.Constant][36] /* ty=Tensor[(910), int32] */, %var_3232)
}

def @func_4252() -> Tensor[(14, 1, 14), float64] {
  %601 = @func_3746() /* ty=(Tensor[(14, 1, 14), float64],) */;
  %601.0
}

def @func_3333(%var_3326: Tensor[(90), float64]) -> (Tensor[(14, 1, 14), float64], Tensor[(14, 1, 14), float64], Tensor[(108, 2), float64], Tensor[(90), float64], Tensor[(216), bool], Tensor[(910), int32], Tensor[(180), int32]) {
  %602 = @func_2930() /* ty=(Tensor[(14, 1, 14), float64],) */;
  %603 = @func_2930() /* ty=(Tensor[(14, 1, 14), float64],) */;
  %604 = cast(%var_3326, dtype="float64") /* ty=Tensor[(90), float64] */;
  %605 = cast(meta[relay.Constant][37] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
  %606 = cast(meta[relay.Constant][38] /* ty=Tensor[(910), int32] */, dtype="int32") /* ty=Tensor[(910), int32] */;
  %607 = cast(meta[relay.Constant][39] /* ty=Tensor[(180), int32] */, dtype="int32") /* ty=Tensor[(180), int32] */;
  %608 = reshape(%604, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %609 = reshape(%605, newshape=[108, 2]) /* ty=Tensor[(108, 2), bool] */;
  %610 = reshape(%606, newshape=[910]) /* ty=Tensor[(910), int32] */;
  %611 = reshape(%607, newshape=[180]) /* ty=Tensor[(180), int32] */;
  %612 = @func_2999(%608, %609, %610, %611) /* ty=(Tensor[(14, 1, 14), float64], Tensor[(14, ?, 14), float32], Tensor[(2, 15, 10), float32], Tensor[(90), float64], Tensor[(910), bool], Tensor[(4, 5, 9), bool], Tensor[(45), int32], Tensor[(180), int32], Tensor[(108, 2), float64]) */;
  %613 = %602.0;
  %614 = %603.0;
  %615 = %612.8;
  (%613, %614, %615, %var_3326, meta[relay.Constant][37] /* ty=Tensor[(216), bool] */, meta[relay.Constant][38] /* ty=Tensor[(910), int32] */, meta[relay.Constant][39] /* ty=Tensor[(180), int32] */)
}

def @func_4366(%var_4346: Tensor[(14, 3, 14), bool], %var_4354: Tensor[(1680), float32], %var_4355: Tensor[(720), float64], %var_4361: Tensor[(14, 3, 14), bool]) -> (Tensor[(1680), float32], Tensor[(1680), float32], Tensor[(720), float64], Tensor[(14, 3, 14), float32]) {
  %616 = cast(%var_4354, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %617 = cast(%var_4355, dtype="float64") /* ty=Tensor[(720), float64] */;
  %618 = reshape(%616, newshape=[1680]) /* ty=Tensor[(1680), float32] */;
  %619 = reshape(%617, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %620 = @func_3397(%618, %619) /* ty=(Tensor[(8, 14, 7), int32], Tensor[(720), float64], Tensor[(1680), float32], Tensor[(720), float64], Tensor[(14, ?, 14), float32]) */;
  %621 = @func_3789() /* ty=Tensor[(14, 3, 14), bool] */;
  %622 = cast(%var_4346, dtype="bool") /* ty=Tensor[(14, 3, 14), bool] */;
  %623 = shape_of(%621, dtype="int32") /* ty=Tensor[(3), int32] */;
  %624 = cast(%621, dtype="bool") /* ty=Tensor[(14, 3, 14), bool] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %626 = greater(%624, %625) /* ty=Tensor[(14, 3, 14), bool] */;
  %627 = cast(%var_4361, dtype="float32") /* ty=Tensor[(14, 3, 14), float32] */;
  %628 = shape_of(%626, dtype="int32") /* ty=Tensor[(3), int32] */;
  %629 = cast(%626, dtype="float32") /* ty=Tensor[(14, 3, 14), float32] */;
  %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %631 = %620.2;
  %632 = mod(%629, %630) /* ty=Tensor[(14, 3, 14), float32] */;
  (%631, %var_4354, %var_4355, %632)
}

def @func_4528() -> (Tensor[(14, ?, 14), float64],) {
  %633 = @func_3682() /* ty=(Tensor[(14, ?, 14), float64],) */;
  %634 = %633.0;
  (%634,)
}

def @func_4030(%var_3994: Tensor[(30), float64], %var_4008: Tensor[(1680), float32]) -> (Tensor[(14, ?, 14), float64], Tensor[(90), float64], Tensor[(30), float64], Tensor[(15, 6), float64], Tensor[(216), bool], Tensor[(720), float64], Tensor[(1680), float32]) {
  %635 = @func_2798() /* ty=(Tensor[(14, ?, 14), float32], Tensor[(14, ?, 14), float64]) */;
  %636 = cast(%var_3994, dtype="float64") /* ty=Tensor[(30), float64] */;
  %637 = cast(meta[relay.Constant][40] /* ty=Tensor[(15, 6), float64] */, dtype="float64") /* ty=Tensor[(15, 6), float64] */;
  %638 = cast(meta[relay.Constant][41] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
  %639 = reshape(%636, newshape=[6, 1, 5]) /* ty=Tensor[(6, 1, 5), float64] */;
  %640 = reshape(%637, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %641 = reshape(%638, newshape=[216]) /* ty=Tensor[(216), bool] */;
  %642 = @func_1721(%639, %640, %641) /* ty=(Tensor[(5, 4, ?), float64], Tensor[(45), int32], Tensor[(3, 9, 8), int16], Tensor[(90), float64], Tensor[(216), bool], Tensor[(300), float32], Tensor[(6, ?, 5), bool], Tensor[(6, 1, 5), float64]) */;
  %643 = cast(%var_4008, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %644 = reshape(%643, newshape=[1680]) /* ty=Tensor[(1680), float32] */;
  %645 = @func_3975(%644) /* ty=(Tensor[(14, 1, 14), float64], Tensor[(8, 15, 6), float64], Tensor[(720), float64], Tensor[(8, 15, 6), float64], Tensor[(1680), float32]) */;
  %646 = %635.1;
  %647 = %642.3;
  %648 = %645.2;
  (%646, %647, %var_3994, meta[relay.Constant][40] /* ty=Tensor[(15, 6), float64] */, meta[relay.Constant][41] /* ty=Tensor[(216), bool] */, %648, %var_4008)
}

def @func_4858() -> Tensor[(14, 1, 14), float64] {
  @func_4252() /* ty=Tensor[(14, 1, 14), float64] */
}

def @func_5757() -> (Tensor[(14, 3, 14), bool], Tensor[(14, 3, 14), bool]) {
  %649 = @func_5384() /* ty=(Tensor[(14, 3, 14), bool],) */;
  %650 = @func_3789() /* ty=Tensor[(14, 3, 14), bool] */;
  %651 = %649.0;
  (%650, %651)
}

def @func_5509() -> (Tensor[(14, 1, 14), float64], Tensor[(14, 1, 14), float64], Tensor[(14, 9, 14), bool], Tensor[(1764), float64]) {
  %652 = @func_5437() /* ty=(Tensor[(14, 1, 14), float64],) */;
  %653 = @func_3423() /* ty=(Tensor[(14, 1, 14), float64],) */;
  %654 = cast(meta[relay.Constant][42] /* ty=Tensor[(1764), float64] */, dtype="float64") /* ty=Tensor[(1764), float64] */;
  %655 = reshape(%654, newshape=[14, 9, 14]) /* ty=Tensor[(14, 9, 14), float64] */;
  %656 = @func_4419(%655) /* ty=(Tensor[(14, 9, 14), bool],) */;
  %657 = %652.0;
  %658 = %653.0;
  %659 = %656.0;
  (%657, %658, %659, meta[relay.Constant][42] /* ty=Tensor[(1764), float64] */)
}

def @func_1587(%var_1555: Tensor[(8, 15, 6), float64]) -> (Tensor[(8, 15, 6), float64], Tensor[(8, 15, 6), float64]) {
  %660 = cast(%var_1555, dtype="float64") /* ty=Tensor[(8, 15, 6), float64] */;
  %661 = cast(%var_1555, dtype="float64") /* ty=Tensor[(8, 15, 6), float64] */;
  %662 = acos(%660) /* ty=Tensor[(8, 15, 6), float64] */;
  %663 = atan(%661) /* ty=Tensor[(8, 15, 6), float64] */;
  (%662, %663)
}

def @func_3746() -> (Tensor[(14, 1, 14), float64],) {
  %664 = @func_3423() /* ty=(Tensor[(14, 1, 14), float64],) */;
  %665 = %664.0;
  (%665,)
}

def @func_2866() -> (Tensor[(8, 14, 7), int32],) {
  %666 = cast(meta[relay.Constant][44] /* ty=Tensor[(8, 14, 7), int32] */, dtype="int32") /* ty=Tensor[(8, 14, 7), int32] */;
  %667 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(8, 14, 7), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %668 = cast(meta[relay.Constant][43] /* ty=Tensor[(8, 14, 7), int32] */, dtype="int32") /* ty=Tensor[(8, 14, 7), int32] */;
  %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %670 = left_shift(%668, %669) /* ty=Tensor[(8, 14, 7), int32] */;
  (%670,)
}

def @func_6048(%var_6015: Tensor[(18, 9), float64]) -> (Tensor[(14, ?, 14), float64], Tensor[(18, 9), float64], Tensor[(6, 5, 4), float64], Tensor[(45), int32], Tensor[(14, 3, 14), bool]) {
  %671 = cast(%var_6015, dtype="float64") /* ty=Tensor[(18, 9), float64] */;
  %672 = reshape(%671, newshape=[6, 3, 9]) /* ty=Tensor[(6, 3, 9), float64] */;
  %673 = @func_3103(%672) /* ty=(Tensor[(6, 3, 9), float64], Tensor[(14, ?, 14), float64]) */;
  %674 = cast(meta[relay.Constant][45] /* ty=Tensor[(45), int32] */, dtype="int32") /* ty=Tensor[(45), int32] */;
  %675 = reshape(%674, newshape=[45]) /* ty=Tensor[(45), int32] */;
  %676 = @func_2546(%675) /* ty=(Tensor[(6, 5, 4), float64], Tensor[(6, 30), int32], Tensor[(45), int32]) */;
  %677 = @func_3789() /* ty=Tensor[(14, 3, 14), bool] */;
  %678 = cast(%677, dtype="float32") /* ty=Tensor[(14, 3, 14), float32] */;
  %679 = atan(%678) /* ty=Tensor[(14, 3, 14), float32] */;
  %680 = cast(%679, dtype="float32") /* ty=Tensor[(14, 3, 14), float32] */;
  %681 = asinh(%680) /* ty=Tensor[(14, 3, 14), float32] */;
  %682 = cast(%679, dtype="bool") /* ty=Tensor[(14, 3, 14), bool] */;
  %683 = shape_of(%681, dtype="int32") /* ty=Tensor[(3), int32] */;
  %684 = cast(%681, dtype="bool") /* ty=Tensor[(14, 3, 14), bool] */;
  %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %686 = %673.1;
  %687 = %676.0;
  %688 = less_equal(%684, %685) /* ty=Tensor[(14, 3, 14), bool] */;
  (%686, %var_6015, %687, meta[relay.Constant][45] /* ty=Tensor[(45), int32] */, %688)
}

def @func_5816() -> (Tensor[(8, 14, 7), int32], Tensor[(12, 8, 2), bool], Tensor[(1, 192), int16]) {
  %689 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 192), int16] */, dtype="int16") /* ty=Tensor[(1, 192), int16] */;
  %690 = reshape(%689, newshape=[12, 8, 2]) /* ty=Tensor[(12, 8, 2), int16] */;
  %691 = @func_64(%690) /* ty=(Tensor[(12, 8, 2), bool], Tensor[(12, 8, 2), float64], Tensor[(12, 8, 2), int16]) */;
  %692 = @func_3065() /* ty=Tensor[(8, 14, 7), int32] */;
  %693 = %691.0;
  (%692, %693, meta[relay.Constant][46] /* ty=Tensor[(1, 192), int16] */)
}

def @func_3682() -> (Tensor[(14, ?, 14), float64],) {
  %694 = @func_2798() /* ty=(Tensor[(14, ?, 14), float32], Tensor[(14, ?, 14), float64]) */;
  %695 = %694.1;
  (%695,)
}

def @func_4458(%var_4445: Tensor[(90), float64], %var_4456: Tensor[(720), float64]) -> (Tensor[(14, 3, 14), float64], Tensor[(14, ?, 14), bool], Tensor[(90), float64], Tensor[(196), float64], Tensor[(1680), float32], Tensor[(1680), float32], Tensor[(720), float64]) {
  %696 = @func_3789() /* ty=Tensor[(14, 3, 14), bool] */;
  %697 = cast(%696, dtype="float64") /* ty=Tensor[(14, 3, 14), float64] */;
  %698 = cast(%var_4445, dtype="float64") /* ty=Tensor[(90), float64] */;
  %699 = cast(meta[relay.Constant][47] /* ty=Tensor[(196), float64] */, dtype="float64") /* ty=Tensor[(196), float64] */;
  %700 = reshape(%698, newshape=[15, 6]) /* ty=Tensor[(15, 6), float64] */;
  %701 = reshape(%699, newshape=[14, 1, 14]) /* ty=Tensor[(14, 1, 14), float64] */;
  %702 = @func_3616(%700, %701) /* ty=(Tensor[(216), bool], Tensor[(15, 6), float64], Tensor[(180), int32], Tensor[(14, ?, 14), bool], Tensor[(50, 6), float32], Tensor[(1350), float32], Tensor[(300), float32]) */;
  %703 = cast(%696, dtype="bool") /* ty=Tensor[(14, 3, 14), bool] */;
  %704 = cast(meta[relay.Constant][48] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %705 = cast(%var_4456, dtype="float64") /* ty=Tensor[(720), float64] */;
  %706 = sin(%697) /* ty=Tensor[(14, 3, 14), float64] */;
  %707 = cast(%706, dtype="bool") /* ty=Tensor[(14, 3, 14), bool] */;
  %708 = reshape(%703, newshape=[14, 3, 14]) /* ty=Tensor[(14, 3, 14), bool] */;
  %709 = reshape(%704, newshape=[1680]) /* ty=Tensor[(1680), float32] */;
  %710 = reshape(%705, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %711 = reshape(%707, newshape=[14, 3, 14]) /* ty=Tensor[(14, 3, 14), bool] */;
  %712 = @func_4366(%708, %709, %710, %711) /* ty=(Tensor[(1680), float32], Tensor[(1680), float32], Tensor[(720), float64], Tensor[(14, 3, 14), float32]) */;
  %713 = %702.3;
  %714 = %712.1;
  (%706, %713, %var_4445, meta[relay.Constant][47] /* ty=Tensor[(196), float64] */, %714, meta[relay.Constant][48] /* ty=Tensor[(1680), float32] */, %var_4456)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3336(%var_3334: Tensor[(90), float64]) -> (Tensor[(14, 1, 14), float64], Tensor[(14, 1, 14), float64], Tensor[(108, 2), float64], Tensor[(90), float64], Tensor[(216), bool], Tensor[(910), int32], Tensor[(180), int32]) {
  @func_3333(%var_3334) /* ty=(Tensor[(14, 1, 14), float64], Tensor[(14, 1, 14), float64], Tensor[(108, 2), float64], Tensor[(90), float64], Tensor[(216), bool], Tensor[(910), int32], Tensor[(180), int32]) */
}

def @func_5117() -> Tensor[(14, 3, 14), bool] {
  @func_5115() /* ty=Tensor[(14, 3, 14), bool] */
}

def @func_373(%var_336: Tensor[(3, 9, 8), bool], %var_337: Tensor[(3, 9, 8), bool]) -> (Tensor[(3, 9, 8), int16], Tensor[(300), float32], Tensor[(2, 15, 10), float64]) {
  %0 = cast(%var_337, dtype="bool") /* ty=Tensor[(3, 9, 8), bool] */;
  %1 = shape_of(%var_336, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_336, dtype="bool") /* ty=Tensor[(3, 9, 8), bool] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %4 = logical_and(%2, %3) /* ty=Tensor[(3, 9, 8), bool] */;
  %5 = cast(%var_336, dtype="int16") /* ty=Tensor[(3, 9, 8), int16] */;
  %6 = shape_of(%4, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%4, dtype="int16") /* ty=Tensor[(3, 9, 8), int16] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %10 = reshape(%9, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), float32] */;
  %11 = @func_250(%10) /* ty=Tensor[(2, 15, 10), float32] */;
  %12 = cast(%11, dtype="float64") /* ty=Tensor[(2, 15, 10), float64] */;
  %13 = right_shift(%7, %8) /* ty=Tensor[(3, 9, 8), int16] */;
  %14 = asin(%12) /* ty=Tensor[(2, 15, 10), float64] */;
  (%13, meta[relay.Constant][0] /* ty=Tensor[(300), float32] */, %14)
}

def @func_5620() -> Tensor[(14, ?, 14), float64] {
  @func_5618() /* ty=Tensor[(14, ?, 14), float64] */
}

def @func_3067() -> Tensor[(8, 14, 7), int32] {
  @func_3065() /* ty=Tensor[(8, 14, 7), int32] */
}

def @func_5103(%var_5089: Tensor[(14, 3, 14), bool]) -> Tensor[(14, 3, 14), uint32] {
  %15 = @func_4130() /* ty=(Tensor[(14, 1, 14), float64], Tensor[(14, 3, 14), bool]) */;
  %16 = %15.1;
  %17 = cast(%var_5089, dtype="uint32") /* ty=Tensor[(14, 3, 14), uint32] */;
  %18 = shape_of(%16, dtype="int32") /* ty=Tensor[(3), int32] */;
  %19 = cast(%16, dtype="uint32") /* ty=Tensor[(14, 3, 14), uint32] */;
  %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_xor(%19, %20) /* ty=Tensor[(14, 3, 14), uint32] */
}

def @func_4033(%var_4031: Tensor[(30), float64], %var_4032: Tensor[(1680), float32]) -> (Tensor[(14, ?, 14), float64], Tensor[(90), float64], Tensor[(30), float64], Tensor[(15, 6), float64], Tensor[(216), bool], Tensor[(720), float64], Tensor[(1680), float32]) {
  %35 = fn (%var_3994: Tensor[(30), float64], %var_4008: Tensor[(1680), float32]) -> (Tensor[(14, ?, 14), float64], Tensor[(90), float64], Tensor[(30), float64], Tensor[(15, 6), float64], Tensor[(216), bool], Tensor[(720), float64], Tensor[(1680), float32]) {
    %21 = @func_2798() /* ty=(Tensor[(14, ?, 14), float32], Tensor[(14, ?, 14), float64]) */;
    %22 = cast(%var_3994, dtype="float64") /* ty=Tensor[(30), float64] */;
    %23 = cast(meta[relay.Constant][1] /* ty=Tensor[(15, 6), float64] */, dtype="float64") /* ty=Tensor[(15, 6), float64] */;
    %24 = cast(meta[relay.Constant][2] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
    %25 = reshape(%22, newshape=[6, 1, 5]) /* ty=Tensor[(6, 1, 5), float64] */;
    %26 = reshape(%23, newshape=[90]) /* ty=Tensor[(90), float64] */;
    %27 = reshape(%24, newshape=[216]) /* ty=Tensor[(216), bool] */;
    %28 = @func_1721(%25, %26, %27) /* ty=(Tensor[(5, 4, ?), float64], Tensor[(45), int32], Tensor[(3, 9, 8), int16], Tensor[(90), float64], Tensor[(216), bool], Tensor[(300), float32], Tensor[(6, ?, 5), bool], Tensor[(6, 1, 5), float64]) */;
    %29 = cast(%var_4008, dtype="float32") /* ty=Tensor[(1680), float32] */;
    %30 = reshape(%29, newshape=[1680]) /* ty=Tensor[(1680), float32] */;
    %31 = @func_3975(%30) /* ty=(Tensor[(14, 1, 14), float64], Tensor[(8, 15, 6), float64], Tensor[(720), float64], Tensor[(8, 15, 6), float64], Tensor[(1680), float32]) */;
    %32 = %21.1;
    %33 = %28.3;
    %34 = %31.2;
    (%32, %33, %var_3994, meta[relay.Constant][1] /* ty=Tensor[(15, 6), float64] */, meta[relay.Constant][2] /* ty=Tensor[(216), bool] */, %34, %var_4008)
  };
  %35(%var_4031, %var_4032) /* ty=(Tensor[(14, ?, 14), float64], Tensor[(90), float64], Tensor[(30), float64], Tensor[(15, 6), float64], Tensor[(216), bool], Tensor[(720), float64], Tensor[(1680), float32]) */
}

def @func_4641(%var_4639: Tensor[(14, 3, 14), bool]) -> (Tensor[(14, 3, 14), float64],) {
  @func_4638(%var_4639) /* ty=(Tensor[(14, 3, 14), float64],) */
}

def @func_3401(%var_3399: Tensor[(1680), float32], %var_3400: Tensor[(720), float64]) -> (Tensor[(8, 14, 7), int32], Tensor[(720), float64], Tensor[(1680), float32], Tensor[(720), float64], Tensor[(14, ?, 14), float32]) {
  @func_3397(%var_3399, %var_3400) /* ty=(Tensor[(8, 14, 7), int32], Tensor[(720), float64], Tensor[(1680), float32], Tensor[(720), float64], Tensor[(14, ?, 14), float32]) */
}

def @func_4130() -> (Tensor[(14, 1, 14), float64], Tensor[(14, 3, 14), bool]) {
  %36 = @func_3746() /* ty=(Tensor[(14, 1, 14), float64],) */;
  %37 = %36.0;
  %38 = @func_3789() /* ty=Tensor[(14, 3, 14), bool] */;
  (%37, %38)
}

def @func_4253() -> Tensor[(14, 1, 14), float64] {
  %40 = fn () -> Tensor[(14, 1, 14), float64] {
    %39 = @func_3746() /* ty=(Tensor[(14, 1, 14), float64],) */;
    %39.0
  };
  %40() /* ty=Tensor[(14, 1, 14), float64] */
}

def @func_1271(%var_1264: Tensor[(15, 12), float32]) -> Tensor[(15, 12), float32] {
  %41 = cast(%var_1264, dtype="float32") /* ty=Tensor[(15, 12), float32] */;
  log10(%41) /* ty=Tensor[(15, 12), float32] */
}

def @func_1721(%var_1656: Tensor[(6, 1, 5), float64], %var_1675: Tensor[(90), float64], %var_1676: Tensor[(216), bool]) -> (Tensor[(5, 4, ?), float64], Tensor[(45), int32], Tensor[(3, 9, 8), int16], Tensor[(90), float64], Tensor[(216), bool], Tensor[(300), float32], Tensor[(6, ?, 5), bool], Tensor[(6, 1, 5), float64]) {
  %42 = cast(meta[relay.Constant][3] /* ty=Tensor[(45), int32] */, dtype="int32") /* ty=Tensor[(45), int32] */;
  %43 = reshape(%42, newshape=[45]) /* ty=Tensor[(45), int32] */;
  %44 = @func_935(%43) /* ty=(Tensor[(5, 4, 1), float32], Tensor[(5, 4, ?), float64], Tensor[(4, 5, 9), bool], Tensor[(45), int32], Tensor[(6, 30), int32]) */;
  %45 = cast(%var_1675, dtype="float64") /* ty=Tensor[(90), float64] */;
  %46 = cast(%var_1675, dtype="float64") /* ty=Tensor[(90), float64] */;
  %47 = cast(%var_1676, dtype="bool") /* ty=Tensor[(216), bool] */;
  %48 = reshape(%45, newshape=[9, 5, 2]) /* ty=Tensor[(9, 5, 2), float64] */;
  %49 = reshape(%46, newshape=[9, 5, 2]) /* ty=Tensor[(9, 5, 2), float64] */;
  %50 = reshape(%47, newshape=[216]) /* ty=Tensor[(216), bool] */;
  %51 = @func_1647(%48, %49, %50) /* ty=(Tensor[(9, 5, 2), bool], Tensor[(3, 9, 8), int16], Tensor[(216), bool], Tensor[(48, 4), uint64], Tensor[(8, 15, 6), float64], Tensor[(720), float64]) */;
  %52 = %51.1;
  %53 = cast(%52, dtype="bool") /* ty=Tensor[(3, 9, 8), bool] */;
  %54 = cast(%var_1676, dtype="bool") /* ty=Tensor[(216), bool] */;
  %55 = reshape(%53, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), bool] */;
  %56 = reshape(%54, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), bool] */;
  %57 = @func_373(%55, %56) /* ty=(Tensor[(3, 9, 8), int16], Tensor[(300), float32], Tensor[(2, 15, 10), float64]) */;
  %58 = cast(%var_1656, dtype="float64") /* ty=Tensor[(6, 1, 5), float64] */;
  %59 = sqrt(%58) /* ty=Tensor[(6, 1, 5), float64] */;
  %60 = cast(%var_1656, dtype="bool") /* ty=Tensor[(6, 1, 5), bool] */;
  %61 = shape_of(%59, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(%59, dtype="bool") /* ty=Tensor[(6, 1, 5), bool] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %64 = greater_equal(%62, %63) /* ty=Tensor[(6, ?, 5), bool] */;
  %65 = cast(%59, dtype="float64") /* ty=Tensor[(6, 1, 5), float64] */;
  %66 = shape_of(%64, dtype="int32") /* ty=Tensor[(3), int32] */;
  %67 = cast(%64, dtype="float64") /* ty=Tensor[(6, ?, 5), float64] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %69 = floor_divide(%67, %68) /* ty=Tensor[(6, ?, 5), float64] */;
  %70 = cast(%69, dtype="bool") /* ty=Tensor[(6, ?, 5), bool] */;
  %71 = shape_of(%64, dtype="int32") /* ty=Tensor[(3), int32] */;
  %72 = cast(%64, dtype="bool") /* ty=Tensor[(6, ?, 5), bool] */;
  %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %74 = cast(%59, dtype="float64") /* ty=Tensor[(6, 1, 5), float64] */;
  %75 = asinh(%74) /* ty=Tensor[(6, 1, 5), float64] */;
  %76 = cast(%75, dtype="float64") /* ty=Tensor[(6, 1, 5), float64] */;
  %77 = %44.1;
  %78 = %57.1;
  %79 = equal(%72, %73) /* ty=Tensor[(6, ?, 5), bool] */;
  %80 = sinh(%76) /* ty=Tensor[(6, 1, 5), float64] */;
  (%77, meta[relay.Constant][3] /* ty=Tensor[(45), int32] */, %52, %var_1675, %var_1676, %78, %79, %80)
}

def @func_4638(%var_4629: Tensor[(14, 3, 14), bool]) -> (Tensor[(14, 3, 14), float64],) {
  %81 = @func_4130() /* ty=(Tensor[(14, 1, 14), float64], Tensor[(14, 3, 14), bool]) */;
  %82 = %81.1;
  %83 = cast(%var_4629, dtype="float64") /* ty=Tensor[(14, 3, 14), float64] */;
  %84 = shape_of(%82, dtype="int32") /* ty=Tensor[(3), int32] */;
  %85 = cast(%82, dtype="float64") /* ty=Tensor[(14, 3, 14), float64] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %87 = subtract(%85, %86) /* ty=Tensor[(14, 3, 14), float64] */;
  (%87,)
}

def @func_5575(%var_5570: Tensor[(1350), float32], %var_5571: Tensor[(300), float32], %var_5572: Tensor[(1, 252), int16], %var_5573: Tensor[(45), int32], %var_5574: Tensor[(280), float64]) -> (Tensor[(14, 3, 14), bool], Tensor[(1350), float32], Tensor[(300), float32], Tensor[(9, 7, 4), int16], Tensor[(1, 252), int16], Tensor[(14, 1, 14), float64], Tensor[(15, 9, 10), float64], Tensor[(45), int32], Tensor[(45), int32], Tensor[(14, 5, 4), float64], Tensor[(280), float64]) {
  @func_5568(%var_5570, %var_5571, %var_5572, %var_5573, %var_5574) /* ty=(Tensor[(14, 3, 14), bool], Tensor[(1350), float32], Tensor[(300), float32], Tensor[(9, 7, 4), int16], Tensor[(1, 252), int16], Tensor[(14, 1, 14), float64], Tensor[(15, 9, 10), float64], Tensor[(45), int32], Tensor[(45), int32], Tensor[(14, 5, 4), float64], Tensor[(280), float64]) */
}

def @func_4091(%var_4089: Tensor[(14, 4, 14), float64], %var_4090: Tensor[(14, 4, 14), float64]) -> (Tensor[(14, 4, 14), bool], Tensor[(14, 4, 14), float32], Tensor[(3, 9, 8), int16], Tensor[(1, 216), bool]) {
  %107 = fn (%var_4055: Tensor[(14, 4, 14), float64], %var_4061: Tensor[(14, 4, 14), float64]) -> (Tensor[(14, 4, 14), bool], Tensor[(14, 4, 14), float32], Tensor[(3, 9, 8), int16], Tensor[(1, 216), bool]) {
    %88 = @func_3746() /* ty=(Tensor[(14, 1, 14), float64],) */;
    %89 = %88.0;
    %90 = cast(%89, dtype="bool") /* ty=Tensor[(14, 1, 14), bool] */;
    %91 = cast(%var_4055, dtype="bool") /* ty=Tensor[(14, 4, 14), bool] */;
    %92 = cast(%89, dtype="bool") /* ty=Tensor[(14, 1, 14), bool] */;
    %93 = cast(%var_4061, dtype="bool") /* ty=Tensor[(14, 4, 14), bool] */;
    %94 = logical_or(%92, %93) /* ty=Tensor[(14, 4, 14), bool] */;
    %95 = cast(%var_4061, dtype="float32") /* ty=Tensor[(14, 4, 14), float32] */;
    %96 = shape_of(%94, dtype="int32") /* ty=Tensor[(3), int32] */;
    %97 = cast(%94, dtype="float32") /* ty=Tensor[(14, 4, 14), float32] */;
    %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %99 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 216), bool] */, dtype="bool") /* ty=Tensor[(1, 216), bool] */;
    %100 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 216), bool] */, dtype="bool") /* ty=Tensor[(1, 216), bool] */;
    %101 = reshape(%99, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), bool] */;
    %102 = reshape(%100, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), bool] */;
    %103 = @func_373(%101, %102) /* ty=(Tensor[(3, 9, 8), int16], Tensor[(300), float32], Tensor[(2, 15, 10), float64]) */;
    %104 = less(%90, %91) /* ty=Tensor[(14, 4, 14), bool] */;
    %105 = mod(%97, %98) /* ty=Tensor[(14, 4, 14), float32] */;
    %106 = %103.0;
    (%104, %105, %106, meta[relay.Constant][4] /* ty=Tensor[(1, 216), bool] */)
  };
  %107(%var_4089, %var_4090) /* ty=(Tensor[(14, 4, 14), bool], Tensor[(14, 4, 14), float32], Tensor[(3, 9, 8), int16], Tensor[(1, 216), bool]) */
}

def @func_4821(%var_4733: Tensor[(588), bool], %var_4734: Tensor[(1680), float32], %var_4735: Tensor[(4, 180), float64]) -> (Tensor[(720), float64], Tensor[(588), bool], Tensor[(1680), float32], Tensor[(4, 180), float64], Tensor[(14, ?, 14), bool], Tensor[(14, 1, 14), float32], Tensor[(14, ?, 14), uint8], Tensor[(14, ?, 14), float32], Tensor[(14, ?, 14), uint16]) {
  %108 = cast(%var_4733, dtype="bool") /* ty=Tensor[(588), bool] */;
  %109 = cast(%var_4734, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %110 = cast(%var_4735, dtype="float64") /* ty=Tensor[(4, 180), float64] */;
  %111 = cast(%var_4733, dtype="bool") /* ty=Tensor[(588), bool] */;
  %112 = reshape(%108, newshape=[14, 3, 14]) /* ty=Tensor[(14, 3, 14), bool] */;
  %113 = reshape(%109, newshape=[1680]) /* ty=Tensor[(1680), float32] */;
  %114 = reshape(%110, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %115 = reshape(%111, newshape=[14, 3, 14]) /* ty=Tensor[(14, 3, 14), bool] */;
  %116 = @func_4366(%112, %113, %114, %115) /* ty=(Tensor[(1680), float32], Tensor[(1680), float32], Tensor[(720), float64], Tensor[(14, 3, 14), float32]) */;
  %117 = @func_2930() /* ty=(Tensor[(14, 1, 14), float64],) */;
  %118 = %117.0;
  %119 = cast(%118, dtype="float64") /* ty=Tensor[(14, 1, 14), float64] */;
  %120 = log(%119) /* ty=Tensor[(14, 1, 14), float64] */;
  %121 = cast(%120, dtype="float64") /* ty=Tensor[(14, 1, 14), float64] */;
  %122 = sqrt(%121) /* ty=Tensor[(14, 1, 14), float64] */;
  %123 = cast(%122, dtype="bool") /* ty=Tensor[(14, 1, 14), bool] */;
  %124 = shape_of(%120, dtype="int32") /* ty=Tensor[(3), int32] */;
  %125 = cast(%120, dtype="bool") /* ty=Tensor[(14, 1, 14), bool] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %127 = cast(%122, dtype="float32") /* ty=Tensor[(14, 1, 14), float32] */;
  %128 = cast(%118, dtype="int32") /* ty=Tensor[(14, 1, 14), int32] */;
  %129 = shape_of(%120, dtype="int32") /* ty=Tensor[(3), int32] */;
  %130 = cast(%120, dtype="int32") /* ty=Tensor[(14, 1, 14), int32] */;
  %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %132 = right_shift(%130, %131) /* ty=Tensor[(14, ?, 14), int32] */;
  %133 = cast(%120, dtype="bool") /* ty=Tensor[(14, 1, 14), bool] */;
  %134 = shape_of(%132, dtype="int32") /* ty=Tensor[(3), int32] */;
  %135 = cast(%132, dtype="bool") /* ty=Tensor[(14, ?, 14), bool] */;
  %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %137 = equal(%135, %136) /* ty=Tensor[(14, ?, 14), bool] */;
  %138 = cast(%137, dtype="uint8") /* ty=Tensor[(14, ?, 14), uint8] */;
  %139 = shape_of(%122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %140 = cast(%122, dtype="uint8") /* ty=Tensor[(14, 1, 14), uint8] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %142 = @func_2798() /* ty=(Tensor[(14, ?, 14), float32], Tensor[(14, ?, 14), float64]) */;
  %143 = cast(%137, dtype="uint16") /* ty=Tensor[(14, ?, 14), uint16] */;
  %144 = shape_of(%132, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(%132, dtype="uint16") /* ty=Tensor[(14, ?, 14), uint16] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %147 = %116.2;
  %148 = less_equal(%125, %126) /* ty=Tensor[(14, ?, 14), bool] */;
  %149 = asin(%127) /* ty=Tensor[(14, 1, 14), float32] */;
  %150 = bitwise_and(%140, %141) /* ty=Tensor[(14, ?, 14), uint8] */;
  %151 = %142.0;
  %152 = subtract(%145, %146) /* ty=Tensor[(14, ?, 14), uint16] */;
  (%147, %var_4733, %var_4734, %var_4735, %148, %149, %150, %151, %152)
}

def @func_5869() -> Tensor[(14, 1, 14), float64] {
  %153 = fn () -> Tensor[(14, 1, 14), float64] {
    @func_2754() /* ty=Tensor[(14, 1, 14), float64] */
  };
  %153() /* ty=Tensor[(14, 1, 14), float64] */
}

def @func_4293() -> Tensor[(14, 1, 14), float64] {
  @func_4291() /* ty=Tensor[(14, 1, 14), float64] */
}

def @func_3940(%var_3938: Tensor[(7, 2, 1), uint64], %var_3939: Tensor[(7, 2, 14), uint64]) -> (Tensor[(7, 2, 14), uint64], Tensor[(6, 30), int32], Tensor[(7, 2, 45), bool]) {
  %164 = fn (%var_3898: Tensor[(7, 2, 1), uint64], %var_3899: Tensor[(7, 2, 14), uint64]) -> (Tensor[(7, 2, 14), uint64], Tensor[(6, 30), int32], Tensor[(7, 2, 45), bool]) {
    %154 = cast(%var_3898, dtype="uint64") /* ty=Tensor[(7, 2, 1), uint64] */;
    %155 = cast(%var_3899, dtype="uint64") /* ty=Tensor[(7, 2, 14), uint64] */;
    %156 = cast(meta[relay.Constant][5] /* ty=Tensor[(45), int32] */, dtype="int32") /* ty=Tensor[(45), int32] */;
    %157 = reshape(%156, newshape=[45]) /* ty=Tensor[(45), int32] */;
    %158 = @func_2546(%157) /* ty=(Tensor[(6, 5, 4), float64], Tensor[(6, 30), int32], Tensor[(45), int32]) */;
    %159 = cast(%var_3898, dtype="bool") /* ty=Tensor[(7, 2, 1), bool] */;
    %160 = cast(meta[relay.Constant][5] /* ty=Tensor[(45), int32] */, dtype="bool") /* ty=Tensor[(45), bool] */;
    %161 = bitwise_and(%154, %155) /* ty=Tensor[(7, 2, 14), uint64] */;
    %162 = %158.1;
    %163 = greater_equal(%159, %160) /* ty=Tensor[(7, 2, 45), bool] */;
    (%161, %162, %163)
  };
  %164(%var_3938, %var_3939) /* ty=(Tensor[(7, 2, 14), uint64], Tensor[(6, 30), int32], Tensor[(7, 2, 45), bool]) */
}

def @func_5782() -> (Tensor[(14, 3, 14), float32], Tensor[(14, 3, 14), float64]) {
  %165 = @func_5384() /* ty=(Tensor[(14, 3, 14), bool],) */;
  %166 = %165.0;
  %167 = cast(%166, dtype="float32") /* ty=Tensor[(14, 3, 14), float32] */;
  %168 = cosh(%167) /* ty=Tensor[(14, 3, 14), float32] */;
  %169 = cast(%168, dtype="float32") /* ty=Tensor[(14, 3, 14), float32] */;
  %170 = cast(%168, dtype="float64") /* ty=Tensor[(14, 3, 14), float64] */;
  %171 = erf(%169) /* ty=Tensor[(14, 3, 14), float32] */;
  %172 = sinh(%170) /* ty=Tensor[(14, 3, 14), float64] */;
  (%171, %172)
}

def @func_5881() -> (Tensor[(14, 3, 14), bool],) {
  @func_5879() /* ty=(Tensor[(14, 3, 14), bool],) */
}

def @func_2549(%var_2547: Tensor[(45), int32]) -> (Tensor[(6, 5, 4), float64], Tensor[(6, 30), int32], Tensor[(45), int32]) {
  @func_2546(%var_2547) /* ty=(Tensor[(6, 5, 4), float64], Tensor[(6, 30), int32], Tensor[(45), int32]) */
}

def @func_938(%var_936: Tensor[(45), int32]) -> (Tensor[(5, 4, 1), float32], Tensor[(5, 4, ?), float64], Tensor[(4, 5, 9), bool], Tensor[(45), int32], Tensor[(6, 30), int32]) {
  @func_935(%var_936) /* ty=(Tensor[(5, 4, 1), float32], Tensor[(5, 4, ?), float64], Tensor[(4, 5, 9), bool], Tensor[(45), int32], Tensor[(6, 30), int32]) */
}

def @func_5784() -> (Tensor[(14, 3, 14), float32], Tensor[(14, 3, 14), float64]) {
  @func_5782() /* ty=(Tensor[(14, 3, 14), float32], Tensor[(14, 3, 14), float64]) */
}

def @func_4706(%var_4704: Tensor[(90), float64], %var_4705: Tensor[(14, 10, 14), float64]) -> (Tensor[(216), bool], Tensor[(90), float64], Tensor[(216), bool], Tensor[(14, ?, 14), float64], Tensor[(14, 10, 14), float32], Tensor[(300), float32], Tensor[(8, 15, 6), float64], Tensor[(1680), float32]) {
  @func_4702(%var_4704, %var_4705) /* ty=(Tensor[(216), bool], Tensor[(90), float64], Tensor[(216), bool], Tensor[(14, ?, 14), float64], Tensor[(14, 10, 14), float32], Tensor[(300), float32], Tensor[(8, 15, 6), float64], Tensor[(1680), float32]) */
}

def @func_6048(%var_6015: Tensor[(18, 9), float64]) -> (Tensor[(14, ?, 14), float64], Tensor[(18, 9), float64], Tensor[(6, 5, 4), float64], Tensor[(45), int32], Tensor[(14, 3, 14), bool]) {
  %173 = cast(%var_6015, dtype="float64") /* ty=Tensor[(18, 9), float64] */;
  %174 = reshape(%173, newshape=[6, 3, 9]) /* ty=Tensor[(6, 3, 9), float64] */;
  %175 = @func_3103(%174) /* ty=(Tensor[(6, 3, 9), float64], Tensor[(14, ?, 14), float64]) */;
  %176 = cast(meta[relay.Constant][6] /* ty=Tensor[(45), int32] */, dtype="int32") /* ty=Tensor[(45), int32] */;
  %177 = reshape(%176, newshape=[45]) /* ty=Tensor[(45), int32] */;
  %178 = @func_2546(%177) /* ty=(Tensor[(6, 5, 4), float64], Tensor[(6, 30), int32], Tensor[(45), int32]) */;
  %179 = @func_3789() /* ty=Tensor[(14, 3, 14), bool] */;
  %180 = cast(%179, dtype="float32") /* ty=Tensor[(14, 3, 14), float32] */;
  %181 = atan(%180) /* ty=Tensor[(14, 3, 14), float32] */;
  %182 = cast(%181, dtype="float32") /* ty=Tensor[(14, 3, 14), float32] */;
  %183 = asinh(%182) /* ty=Tensor[(14, 3, 14), float32] */;
  %184 = cast(%181, dtype="bool") /* ty=Tensor[(14, 3, 14), bool] */;
  %185 = shape_of(%183, dtype="int32") /* ty=Tensor[(3), int32] */;
  %186 = cast(%183, dtype="bool") /* ty=Tensor[(14, 3, 14), bool] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %188 = %175.1;
  %189 = %178.0;
  %190 = less_equal(%186, %187) /* ty=Tensor[(14, 3, 14), bool] */;
  (%188, %var_6015, %189, meta[relay.Constant][6] /* ty=Tensor[(45), int32] */, %190)
}

def @func_4859() -> Tensor[(14, 1, 14), float64] {
  %191 = fn () -> Tensor[(14, 1, 14), float64] {
    @func_4252() /* ty=Tensor[(14, 1, 14), float64] */
  };
  %191() /* ty=Tensor[(14, 1, 14), float64] */
}

def @func_5115() -> Tensor[(14, 3, 14), bool] {
  %192 = @func_4130() /* ty=(Tensor[(14, 1, 14), float64], Tensor[(14, 3, 14), bool]) */;
  %192.1
}

def @func_2931() -> (Tensor[(14, 1, 14), float64],) {
  %194 = fn () -> (Tensor[(14, 1, 14), float64],) {
    %193 = @func_2754() /* ty=Tensor[(14, 1, 14), float64] */;
    (%193,)
  };
  %194() /* ty=(Tensor[(14, 1, 14), float64],) */
}

def @func_1236(%var_1234: Tensor[(9, 7, 4), int16], %var_1235: Tensor[(9, 7, 4), int16]) -> (Tensor[(9, 7, 4), int16], Tensor[(3, 9, 8), int16], Tensor[(2, 108), bool], Tensor[(2, 15, 10), float32], Tensor[(300), float32]) {
  %209 = fn (%var_1210: Tensor[(9, 7, 4), int16], %var_1211: Tensor[(9, 7, 4), int16]) -> (Tensor[(9, 7, 4), int16], Tensor[(3, 9, 8), int16], Tensor[(2, 108), bool], Tensor[(2, 15, 10), float32], Tensor[(300), float32]) {
    %195 = cast(%var_1211, dtype="int16") /* ty=Tensor[(9, 7, 4), int16] */;
    %196 = shape_of(%var_1210, dtype="int32") /* ty=Tensor[(3), int32] */;
    %197 = cast(%var_1210, dtype="int16") /* ty=Tensor[(9, 7, 4), int16] */;
    %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %199 = cast(meta[relay.Constant][7] /* ty=Tensor[(2, 108), bool] */, dtype="bool") /* ty=Tensor[(2, 108), bool] */;
    %200 = cast(meta[relay.Constant][7] /* ty=Tensor[(2, 108), bool] */, dtype="bool") /* ty=Tensor[(2, 108), bool] */;
    %201 = reshape(%199, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), bool] */;
    %202 = reshape(%200, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), bool] */;
    %203 = @func_373(%201, %202) /* ty=(Tensor[(3, 9, 8), int16], Tensor[(300), float32], Tensor[(2, 15, 10), float64]) */;
    %204 = cast(meta[relay.Constant][8] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
    %205 = reshape(%204, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), float32] */;
    %206 = subtract(%197, %198) /* ty=Tensor[(9, 7, 4), int16] */;
    %207 = %203.0;
    %208 = @func_250(%205) /* ty=Tensor[(2, 15, 10), float32] */;
    (%206, %207, meta[relay.Constant][7] /* ty=Tensor[(2, 108), bool] */, %208, meta[relay.Constant][8] /* ty=Tensor[(300), float32] */)
  };
  %209(%var_1234, %var_1235) /* ty=(Tensor[(9, 7, 4), int16], Tensor[(3, 9, 8), int16], Tensor[(2, 108), bool], Tensor[(2, 15, 10), float32], Tensor[(300), float32]) */
}

def @func_5963(%var_5898: Tensor[(6, 5, 12), float32], %var_5929: Tensor[(588), bool]) -> (Tensor[(14, 1, 14), float64], Tensor[(14, ?, 14), float64], Tensor[(162), float64], Tensor[(14, 3, 14), uint32], Tensor[(588), bool], Tensor[(6, 5, 12), bool], Tensor[(6, 5, 12), float32]) {
  %210 = cast(meta[relay.Constant][9] /* ty=Tensor[(162), float64] */, dtype="float64") /* ty=Tensor[(162), float64] */;
  %211 = reshape(%210, newshape=[6, 3, 9]) /* ty=Tensor[(6, 3, 9), float64] */;
  %212 = @func_3103(%211) /* ty=(Tensor[(6, 3, 9), float64], Tensor[(14, ?, 14), float64]) */;
  %213 = cast(%var_5929, dtype="bool") /* ty=Tensor[(588), bool] */;
  %214 = reshape(%213, newshape=[14, 3, 14]) /* ty=Tensor[(14, 3, 14), bool] */;
  %215 = cast(%var_5898, dtype="float32") /* ty=Tensor[(6, 5, 12), float32] */;
  %216 = acosh(%215) /* ty=Tensor[(6, 5, 12), float32] */;
  %217 = cast(%216, dtype="float64") /* ty=Tensor[(6, 5, 12), float64] */;
  %218 = log(%217) /* ty=Tensor[(6, 5, 12), float64] */;
  %219 = cast(%218, dtype="float32") /* ty=Tensor[(6, 5, 12), float32] */;
  %220 = sin(%219) /* ty=Tensor[(6, 5, 12), float32] */;
  %221 = cast(%220, dtype="int16") /* ty=Tensor[(6, 5, 12), int16] */;
  %222 = shape_of(%218, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(%218, dtype="int16") /* ty=Tensor[(6, 5, 12), int16] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %225 = subtract(%223, %224) /* ty=Tensor[(6, 5, 12), int16] */;
  %226 = cast(%225, dtype="bool") /* ty=Tensor[(6, 5, 12), bool] */;
  %227 = shape_of(%218, dtype="int32") /* ty=Tensor[(3), int32] */;
  %228 = cast(%218, dtype="bool") /* ty=Tensor[(6, 5, 12), bool] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %230 = cast(%225, dtype="float32") /* ty=Tensor[(6, 5, 12), float32] */;
  %231 = erf(%230) /* ty=Tensor[(6, 5, 12), float32] */;
  %232 = cast(%231, dtype="float64") /* ty=Tensor[(6, 5, 12), float64] */;
  %233 = shape_of(%216, dtype="int32") /* ty=Tensor[(3), int32] */;
  %234 = cast(%216, dtype="float64") /* ty=Tensor[(6, 5, 12), float64] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %236 = floor_mod(%234, %235) /* ty=Tensor[(6, 5, 12), float64] */;
  %237 = cast(%236, dtype="float32") /* ty=Tensor[(6, 5, 12), float32] */;
  %238 = @func_2754() /* ty=Tensor[(14, 1, 14), float64] */;
  %239 = %212.1;
  %240 = @func_5103(%214) /* ty=Tensor[(14, 3, 14), uint32] */;
  %241 = equal(%228, %229) /* ty=Tensor[(6, 5, 12), bool] */;
  %242 = tan(%237) /* ty=Tensor[(6, 5, 12), float32] */;
  (%238, %239, meta[relay.Constant][9] /* ty=Tensor[(162), float64] */, %240, %var_5929, %241, %242)
}

def @func_6260(%var_6254: Tensor[(5, 15), float32]) -> Tensor[(5, 15), float32] {
  %243 = cast(%var_6254, dtype="float32") /* ty=Tensor[(5, 15), float32] */;
  atanh(%243) /* ty=Tensor[(5, 15), float32] */
}

def @func_6194(%var_6193: Tensor[(11, 12, 4), float64]) -> Tensor[(11, 12, 4), float64] {
  %245 = fn (%var_6186: Tensor[(11, 12, 4), float64]) -> Tensor[(11, 12, 4), float64] {
    %244 = cast(%var_6186, dtype="float64") /* ty=Tensor[(11, 12, 4), float64] */;
    cos(%244) /* ty=Tensor[(11, 12, 4), float64] */
  };
  %245(%var_6193) /* ty=Tensor[(11, 12, 4), float64] */
}

def @func_3105(%var_3104: Tensor[(6, 3, 9), float64]) -> (Tensor[(6, 3, 9), float64], Tensor[(14, ?, 14), float64]) {
  %252 = fn (%var_3089: Tensor[(6, 3, 9), float64]) -> (Tensor[(6, 3, 9), float64], Tensor[(14, ?, 14), float64]) {
    %246 = cast(%var_3089, dtype="float64") /* ty=Tensor[(6, 3, 9), float64] */;
    %247 = @func_2798() /* ty=(Tensor[(14, ?, 14), float32], Tensor[(14, ?, 14), float64]) */;
    %248 = %247.1;
    %249 = cast(%248, dtype="float64") /* ty=Tensor[(14, ?, 14), float64] */;
    %250 = sigmoid(%246) /* ty=Tensor[(6, 3, 9), float64] */;
    %251 = sinh(%249) /* ty=Tensor[(14, ?, 14), float64] */;
    (%250, %251)
  };
  %252(%var_3104) /* ty=(Tensor[(6, 3, 9), float64], Tensor[(14, ?, 14), float64]) */
}

def @func_6263(%var_6261: Tensor[(5, 15), float32]) -> Tensor[(5, 15), float32] {
  @func_6260(%var_6261) /* ty=Tensor[(5, 15), float32] */
}

def @func_2724(%var_2722: Tensor[(5, 13, 14), int32]) -> (Tensor[(5, 13, 14), int32], Tensor[(2, 15, 10), float32], Tensor[(300), float32]) {
  @func_2721(%var_2722) /* ty=(Tensor[(5, 13, 14), int32], Tensor[(2, 15, 10), float32], Tensor[(300), float32]) */
}

def @func_4132() -> (Tensor[(14, 1, 14), float64], Tensor[(14, 3, 14), bool]) {
  @func_4130() /* ty=(Tensor[(14, 1, 14), float64], Tensor[(14, 3, 14), bool]) */
}

def @func_4419(%var_4396: Tensor[(14, 9, 14), float64]) -> (Tensor[(14, 9, 14), bool],) {
  %253 = @func_3423() /* ty=(Tensor[(14, 1, 14), float64],) */;
  %254 = %253.0;
  %255 = cast(%254, dtype="bool") /* ty=Tensor[(14, 1, 14), bool] */;
  %256 = cast(%var_4396, dtype="bool") /* ty=Tensor[(14, 9, 14), bool] */;
  %257 = equal(%255, %256) /* ty=Tensor[(14, 9, 14), bool] */;
  (%257,)
}

def @func_2999(%var_2945: Tensor[(90), float64], %var_2946: Tensor[(108, 2), bool], %var_2957: Tensor[(910), int32], %var_2976: Tensor[(180), int32]) -> (Tensor[(14, 1, 14), float64], Tensor[(14, ?, 14), float32], Tensor[(2, 15, 10), float32], Tensor[(90), float64], Tensor[(910), bool], Tensor[(4, 5, 9), bool], Tensor[(45), int32], Tensor[(180), int32], Tensor[(108, 2), float64]) {
  %258 = @func_2930() /* ty=(Tensor[(14, 1, 14), float64],) */;
  %259 = @func_2798() /* ty=(Tensor[(14, ?, 14), float32], Tensor[(14, ?, 14), float64]) */;
  %260 = cast(%var_2945, dtype="float64") /* ty=Tensor[(90), float64] */;
  %261 = cast(%var_2946, dtype="bool") /* ty=Tensor[(108, 2), bool] */;
  %262 = reshape(%260, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %263 = reshape(%261, newshape=[216]) /* ty=Tensor[(216), bool] */;
  %264 = @func_2911(%262, %263) /* ty=(Tensor[(8, 14, 7), int32], Tensor[(90), float64], Tensor[(2, 15, 10), float32], Tensor[(910), int32], Tensor[(3, 9, 8), bool], Tensor[(14, 1, 14), float64]) */;
  %265 = cast(%var_2945, dtype="float64") /* ty=Tensor[(90), float64] */;
  %266 = cast(%var_2946, dtype="bool") /* ty=Tensor[(108, 2), bool] */;
  %267 = reshape(%265, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %268 = reshape(%266, newshape=[216]) /* ty=Tensor[(216), bool] */;
  %269 = @func_2911(%267, %268) /* ty=(Tensor[(8, 14, 7), int32], Tensor[(90), float64], Tensor[(2, 15, 10), float32], Tensor[(910), int32], Tensor[(3, 9, 8), bool], Tensor[(14, 1, 14), float64]) */;
  %270 = %269.3;
  %271 = cast(%var_2957, dtype="bool") /* ty=Tensor[(910), bool] */;
  %272 = shape_of(%270, dtype="int32") /* ty=Tensor[(1), int32] */;
  %273 = cast(%270, dtype="bool") /* ty=Tensor[(910), bool] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?), bool] */;
  %275 = cast(meta[relay.Constant][10] /* ty=Tensor[(45), int32] */, dtype="int32") /* ty=Tensor[(45), int32] */;
  %276 = cast(%var_2976, dtype="int32") /* ty=Tensor[(180), int32] */;
  %277 = reshape(%275, newshape=[1, 5, 9]) /* ty=Tensor[(1, 5, 9), int32] */;
  %278 = reshape(%276, newshape=[4, 5, 9]) /* ty=Tensor[(4, 5, 9), int32] */;
  %279 = @func_767(%277, %278) /* ty=(Tensor[(4, 5, 9), bool],) */;
  %280 = cast(%var_2946, dtype="float64") /* ty=Tensor[(108, 2), float64] */;
  %281 = %258.0;
  %282 = %259.0;
  %283 = %264.2;
  %284 = not_equal(%273, %274) /* ty=Tensor[(910), bool] */;
  %285 = %279.0;
  %286 = atan(%280) /* ty=Tensor[(108, 2), float64] */;
  (%281, %282, %283, %var_2945, %284, %285, meta[relay.Constant][10] /* ty=Tensor[(45), int32] */, %var_2976, %286)
}

def @func_1793(%var_1792: Tensor[(3, 6, 7), float32]) -> (Tensor[(3, 6, 7), float32],) {
  %291 = fn (%var_1770: Tensor[(3, 6, 7), float32]) -> (Tensor[(3, 6, 7), float32],) {
    %287 = cast(%var_1770, dtype="float32") /* ty=Tensor[(3, 6, 7), float32] */;
    %288 = rsqrt(%287) /* ty=Tensor[(3, 6, 7), float32] */;
    %289 = cast(%288, dtype="float32") /* ty=Tensor[(3, 6, 7), float32] */;
    %290 = asin(%289) /* ty=Tensor[(3, 6, 7), float32] */;
    (%290,)
  };
  %291(%var_1792) /* ty=(Tensor[(3, 6, 7), float32],) */
}

def @func_5691() -> Tensor[(14, 1, 14), float64] {
  %292 = @func_4951() /* ty=(Tensor[(14, 1, 14), float64],) */;
  %292.0
}

def @func_3065() -> Tensor[(8, 14, 7), int32] {
  %293 = @func_2866() /* ty=(Tensor[(8, 14, 7), int32],) */;
  %293.0
}

def @func_6108() -> (Tensor[(14, 3, 14), bool], Tensor[(6, 5, 12), float32], Tensor[(360), float32]) {
  %294 = cast(meta[relay.Constant][11] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %295 = @func_3789() /* ty=Tensor[(14, 3, 14), bool] */;
  %296 = cast(%295, dtype="bool") /* ty=Tensor[(14, 3, 14), bool] */;
  %297 = reshape(%294, newshape=[6, 5, 12]) /* ty=Tensor[(6, 5, 12), float32] */;
  %298 = reshape(%296, newshape=[588]) /* ty=Tensor[(588), bool] */;
  %299 = @func_5963(%297, %298) /* ty=(Tensor[(14, 1, 14), float64], Tensor[(14, ?, 14), float64], Tensor[(162), float64], Tensor[(14, 3, 14), uint32], Tensor[(588), bool], Tensor[(6, 5, 12), bool], Tensor[(6, 5, 12), float32]) */;
  %300 = %299.6;
  (%295, %300, meta[relay.Constant][11] /* ty=Tensor[(360), float32] */)
}

def @main(%var_6292: Tensor[(6, 7, 1), int16], %var_6293: Tensor[(6, 7, 12), int16]) -> Tensor[(6, 7, 12), int16] {
  %301 = cast(%var_6292, dtype="int16") /* ty=Tensor[(6, 7, 1), int16] */;
  %302 = cast(%var_6293, dtype="int16") /* ty=Tensor[(6, 7, 12), int16] */;
  right_shift(%301, %302) /* ty=Tensor[(6, 7, 12), int16] */
}

def @func_1274(%var_1272: Tensor[(15, 12), float32]) -> Tensor[(15, 12), float32] {
  @func_1271(%var_1272) /* ty=Tensor[(15, 12), float32] */
}

def @func_5602(%var_5586: Tensor[(14, 6, 14), float32]) -> Tensor[(14, 6, 14), float64] {
  %303 = @func_2798() /* ty=(Tensor[(14, ?, 14), float32], Tensor[(14, ?, 14), float64]) */;
  %304 = %303.0;
  %305 = cast(%304, dtype="uint16") /* ty=Tensor[(14, ?, 14), uint16] */;
  %306 = cast(%var_5586, dtype="uint16") /* ty=Tensor[(14, 6, 14), uint16] */;
  %307 = right_shift(%305, %306) /* ty=Tensor[(14, 6, 14), uint16] */;
  %308 = @func_4858() /* ty=Tensor[(14, 1, 14), float64] */;
  %309 = cast(%307, dtype="float64") /* ty=Tensor[(14, 6, 14), float64] */;
  %310 = cast(%308, dtype="float64") /* ty=Tensor[(14, 1, 14), float64] */;
  power(%309, %310) /* ty=Tensor[(14, 6, 14), float64] */
}

def @func_4492(%var_4490: Tensor[(14, 5, 4), float64]) -> Tensor[(14, 5, 4), float64] {
  @func_4489(%var_4490) /* ty=Tensor[(14, 5, 4), float64] */
}

def @func_5718(%var_5717: Tensor[(14, 16, 14), float64]) -> (Tensor[(14, 16, 14), float32],) {
  %316 = fn (%var_5709: Tensor[(14, 16, 14), float64]) -> (Tensor[(14, 16, 14), float32],) {
    %311 = @func_5509() /* ty=(Tensor[(14, 1, 14), float64], Tensor[(14, 1, 14), float64], Tensor[(14, 9, 14), bool], Tensor[(1764), float64]) */;
    %312 = %311.1;
    %313 = cast(%312, dtype="float32") /* ty=Tensor[(14, 1, 14), float32] */;
    %314 = cast(%var_5709, dtype="float32") /* ty=Tensor[(14, 16, 14), float32] */;
    %315 = power(%313, %314) /* ty=Tensor[(14, 16, 14), float32] */;
    (%315,)
  };
  %316(%var_5717) /* ty=(Tensor[(14, 16, 14), float32],) */
}

def @func_4953() -> (Tensor[(14, 1, 14), float64],) {
  @func_4951() /* ty=(Tensor[(14, 1, 14), float64],) */
}

def @func_4934() -> Tensor[(8, 14, 7), float32] {
  @func_4932() /* ty=Tensor[(8, 14, 7), float32] */
}

def @func_2721(%var_2698: Tensor[(5, 13, 14), int32]) -> (Tensor[(5, 13, 14), int32], Tensor[(2, 15, 10), float32], Tensor[(300), float32]) {
  %317 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 13, 14), int32] */, dtype="int32") /* ty=Tensor[(5, 13, 14), int32] */;
  %318 = shape_of(%var_2698, dtype="int32") /* ty=Tensor[(3), int32] */;
  %319 = cast(%var_2698, dtype="int32") /* ty=Tensor[(5, 13, 14), int32] */;
  %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %321 = cast(meta[relay.Constant][13] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %322 = reshape(%321, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), float32] */;
  %323 = multiply(%319, %320) /* ty=Tensor[(5, 13, 14), int32] */;
  %324 = @func_250(%322) /* ty=Tensor[(2, 15, 10), float32] */;
  (%323, %324, meta[relay.Constant][13] /* ty=Tensor[(300), float32] */)
}

def @func_4371(%var_4367: Tensor[(14, 3, 14), bool], %var_4368: Tensor[(1680), float32], %var_4369: Tensor[(720), float64], %var_4370: Tensor[(14, 3, 14), bool]) -> (Tensor[(1680), float32], Tensor[(1680), float32], Tensor[(720), float64], Tensor[(14, 3, 14), float32]) {
  %342 = fn (%var_4346: Tensor[(14, 3, 14), bool], %var_4354: Tensor[(1680), float32], %var_4355: Tensor[(720), float64], %var_4361: Tensor[(14, 3, 14), bool]) -> (Tensor[(1680), float32], Tensor[(1680), float32], Tensor[(720), float64], Tensor[(14, 3, 14), float32]) {
    %325 = cast(%var_4354, dtype="float32") /* ty=Tensor[(1680), float32] */;
    %326 = cast(%var_4355, dtype="float64") /* ty=Tensor[(720), float64] */;
    %327 = reshape(%325, newshape=[1680]) /* ty=Tensor[(1680), float32] */;
    %328 = reshape(%326, newshape=[720]) /* ty=Tensor[(720), float64] */;
    %329 = @func_3397(%327, %328) /* ty=(Tensor[(8, 14, 7), int32], Tensor[(720), float64], Tensor[(1680), float32], Tensor[(720), float64], Tensor[(14, ?, 14), float32]) */;
    %330 = @func_3789() /* ty=Tensor[(14, 3, 14), bool] */;
    %331 = cast(%var_4346, dtype="bool") /* ty=Tensor[(14, 3, 14), bool] */;
    %332 = shape_of(%330, dtype="int32") /* ty=Tensor[(3), int32] */;
    %333 = cast(%330, dtype="bool") /* ty=Tensor[(14, 3, 14), bool] */;
    %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %335 = greater(%333, %334) /* ty=Tensor[(14, 3, 14), bool] */;
    %336 = cast(%var_4361, dtype="float32") /* ty=Tensor[(14, 3, 14), float32] */;
    %337 = shape_of(%335, dtype="int32") /* ty=Tensor[(3), int32] */;
    %338 = cast(%335, dtype="float32") /* ty=Tensor[(14, 3, 14), float32] */;
    %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %340 = %329.2;
    %341 = mod(%338, %339) /* ty=Tensor[(14, 3, 14), float32] */;
    (%340, %var_4354, %var_4355, %341)
  };
  %342(%var_4367, %var_4368, %var_4369, %var_4370) /* ty=(Tensor[(1680), float32], Tensor[(1680), float32], Tensor[(720), float64], Tensor[(14, 3, 14), float32]) */
}

def @func_5106(%var_5104: Tensor[(14, 3, 14), bool]) -> Tensor[(14, 3, 14), uint32] {
  @func_5103(%var_5104) /* ty=Tensor[(14, 3, 14), uint32] */
}

def @func_5618() -> Tensor[(14, ?, 14), float64] {
  %343 = @func_4528() /* ty=(Tensor[(14, ?, 14), float64],) */;
  %343.0
}

def @func_3975(%var_3969: Tensor[(1680), float32]) -> (Tensor[(14, 1, 14), float64], Tensor[(8, 15, 6), float64], Tensor[(720), float64], Tensor[(8, 15, 6), float64], Tensor[(1680), float32]) {
  %344 = cast(meta[relay.Constant][14] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %345 = reshape(%344, newshape=[8, 15, 6]) /* ty=Tensor[(8, 15, 6), float64] */;
  %346 = @func_1587(%345) /* ty=(Tensor[(8, 15, 6), float64], Tensor[(8, 15, 6), float64]) */;
  %347 = cast(%var_3969, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %348 = %346.1;
  %349 = cast(%348, dtype="float64") /* ty=Tensor[(8, 15, 6), float64] */;
  %350 = reshape(%347, newshape=[8, 14, 15]) /* ty=Tensor[(8, 14, 15), float32] */;
  %351 = reshape(%349, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %352 = @func_2206(%350, %351) /* ty=(Tensor[(8, 14, 15), float32], Tensor[(8, 15, 6), float64], Tensor[(720), float64], Tensor[(8, 14, 15), float32]) */;
  %353 = @func_2754() /* ty=Tensor[(14, 1, 14), float64] */;
  %354 = %352.1;
  (%353, %348, meta[relay.Constant][14] /* ty=Tensor[(720), float64] */, %354, %var_3969)
}

def @func_3424() -> (Tensor[(14, 1, 14), float64],) {
  %357 = fn () -> (Tensor[(14, 1, 14), float64],) {
    %355 = @func_2930() /* ty=(Tensor[(14, 1, 14), float64],) */;
    %356 = %355.0;
    (%356,)
  };
  %357() /* ty=(Tensor[(14, 1, 14), float64],) */
}

def @func_5879() -> (Tensor[(14, 3, 14), bool],) {
  %358 = @func_3789() /* ty=Tensor[(14, 3, 14), bool] */;
  (%358,)
}

def @func_4826(%var_4823: Tensor[(588), bool], %var_4824: Tensor[(1680), float32], %var_4825: Tensor[(4, 180), float64]) -> (Tensor[(720), float64], Tensor[(588), bool], Tensor[(1680), float32], Tensor[(4, 180), float64], Tensor[(14, ?, 14), bool], Tensor[(14, 1, 14), float32], Tensor[(14, ?, 14), uint8], Tensor[(14, ?, 14), float32], Tensor[(14, ?, 14), uint16]) {
  @func_4821(%var_4823, %var_4824, %var_4825) /* ty=(Tensor[(720), float64], Tensor[(588), bool], Tensor[(1680), float32], Tensor[(4, 180), float64], Tensor[(14, ?, 14), bool], Tensor[(14, 1, 14), float32], Tensor[(14, ?, 14), uint8], Tensor[(14, ?, 14), float32], Tensor[(14, ?, 14), uint16]) */
}

def @func_5509() -> (Tensor[(14, 1, 14), float64], Tensor[(14, 1, 14), float64], Tensor[(14, 9, 14), bool], Tensor[(1764), float64]) {
  %359 = @func_5437() /* ty=(Tensor[(14, 1, 14), float64],) */;
  %360 = @func_3423() /* ty=(Tensor[(14, 1, 14), float64],) */;
  %361 = cast(meta[relay.Constant][15] /* ty=Tensor[(1764), float64] */, dtype="float64") /* ty=Tensor[(1764), float64] */;
  %362 = reshape(%361, newshape=[14, 9, 14]) /* ty=Tensor[(14, 9, 14), float64] */;
  %363 = @func_4419(%362) /* ty=(Tensor[(14, 9, 14), bool],) */;
  %364 = %359.0;
  %365 = %360.0;
  %366 = %363.0;
  (%364, %365, %366, meta[relay.Constant][15] /* ty=Tensor[(1764), float64] */)
}

def @func_3005(%var_3001: Tensor[(90), float64], %var_3002: Tensor[(108, 2), bool], %var_3003: Tensor[(910), int32], %var_3004: Tensor[(180), int32]) -> (Tensor[(14, 1, 14), float64], Tensor[(14, ?, 14), float32], Tensor[(2, 15, 10), float32], Tensor[(90), float64], Tensor[(910), bool], Tensor[(4, 5, 9), bool], Tensor[(45), int32], Tensor[(180), int32], Tensor[(108, 2), float64]) {
  @func_2999(%var_3001, %var_3002, %var_3003, %var_3004) /* ty=(Tensor[(14, 1, 14), float64], Tensor[(14, ?, 14), float32], Tensor[(2, 15, 10), float32], Tensor[(90), float64], Tensor[(910), bool], Tensor[(4, 5, 9), bool], Tensor[(45), int32], Tensor[(180), int32], Tensor[(108, 2), float64]) */
}

def @func_4529() -> (Tensor[(14, ?, 14), float64],) {
  %369 = fn () -> (Tensor[(14, ?, 14), float64],) {
    %367 = @func_3682() /* ty=(Tensor[(14, ?, 14), float64],) */;
    %368 = %367.0;
    (%368,)
  };
  %369() /* ty=(Tensor[(14, ?, 14), float64],) */
}

def @func_3747() -> (Tensor[(14, 1, 14), float64],) {
  %372 = fn () -> (Tensor[(14, 1, 14), float64],) {
    %370 = @func_3423() /* ty=(Tensor[(14, 1, 14), float64],) */;
    %371 = %370.0;
    (%371,)
  };
  %372() /* ty=(Tensor[(14, 1, 14), float64],) */
}

def @func_6285(%var_6266: Tensor[(7, 8, 13), float32]) -> (Tensor[(7, 8, 13), float32],) {
  %373 = cast(%var_6266, dtype="float32") /* ty=Tensor[(7, 8, 13), float32] */;
  %374 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(7, 8, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %375 = cast(meta[relay.Constant][16] /* ty=Tensor[(7, 8, 13), float32] */, dtype="float32") /* ty=Tensor[(7, 8, 13), float32] */;
  %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %377 = maximum(%375, %376) /* ty=Tensor[(7, 8, 13), float32] */;
  (%377,)
}

def @func_5043(%var_5017: Tensor[(10, 14, 7), float64], %var_5036: Tensor[(90), float64]) -> (Tensor[(10, 14, 7), float64], Tensor[(8, 15, 6), float64], Tensor[(90), float64], Tensor[(1960), float64]) {
  %378 = cast(%var_5017, dtype="float64") /* ty=Tensor[(10, 14, 7), float64] */;
  %379 = cast(%var_5036, dtype="float64") /* ty=Tensor[(90), float64] */;
  %380 = cast(meta[relay.Constant][17] /* ty=Tensor[(1960), float64] */, dtype="float64") /* ty=Tensor[(1960), float64] */;
  %381 = reshape(%379, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %382 = reshape(%380, newshape=[14, 10, 14]) /* ty=Tensor[(14, 10, 14), float64] */;
  %383 = @func_4702(%381, %382) /* ty=(Tensor[(216), bool], Tensor[(90), float64], Tensor[(216), bool], Tensor[(14, ?, 14), float64], Tensor[(14, 10, 14), float32], Tensor[(300), float32], Tensor[(8, 15, 6), float64], Tensor[(1680), float32]) */;
  %384 = cos(%378) /* ty=Tensor[(10, 14, 7), float64] */;
  %385 = %383.6;
  (%384, %385, %var_5036, meta[relay.Constant][17] /* ty=Tensor[(1960), float64] */)
}

def @func_5047(%var_5045: Tensor[(10, 14, 7), float64], %var_5046: Tensor[(90), float64]) -> (Tensor[(10, 14, 7), float64], Tensor[(8, 15, 6), float64], Tensor[(90), float64], Tensor[(1960), float64]) {
  @func_5043(%var_5045, %var_5046) /* ty=(Tensor[(10, 14, 7), float64], Tensor[(8, 15, 6), float64], Tensor[(90), float64], Tensor[(1960), float64]) */
}

def @func_5817() -> (Tensor[(8, 14, 7), int32], Tensor[(12, 8, 2), bool], Tensor[(1, 192), int16]) {
  %391 = fn () -> (Tensor[(8, 14, 7), int32], Tensor[(12, 8, 2), bool], Tensor[(1, 192), int16]) {
    %386 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 192), int16] */, dtype="int16") /* ty=Tensor[(1, 192), int16] */;
    %387 = reshape(%386, newshape=[12, 8, 2]) /* ty=Tensor[(12, 8, 2), int16] */;
    %388 = @func_64(%387) /* ty=(Tensor[(12, 8, 2), bool], Tensor[(12, 8, 2), float64], Tensor[(12, 8, 2), int16]) */;
    %389 = @func_3065() /* ty=Tensor[(8, 14, 7), int32] */;
    %390 = %388.0;
    (%389, %390, meta[relay.Constant][18] /* ty=Tensor[(1, 192), int16] */)
  };
  %391() /* ty=(Tensor[(8, 14, 7), int32], Tensor[(12, 8, 2), bool], Tensor[(1, 192), int16]) */
}

def @func_4422(%var_4420: Tensor[(14, 9, 14), float64]) -> (Tensor[(14, 9, 14), bool],) {
  @func_4419(%var_4420) /* ty=(Tensor[(14, 9, 14), bool],) */
}

def @func_5238() -> (Tensor[(14, 3, 14), bool],) {
  @func_5236() /* ty=(Tensor[(14, 3, 14), bool],) */
}

def @func_5280() -> (Tensor[(14, 1, 14), float64],) {
  %393 = fn () -> (Tensor[(14, 1, 14), float64],) {
    %392 = @func_2754() /* ty=Tensor[(14, 1, 14), float64] */;
    (%392,)
  };
  %393() /* ty=(Tensor[(14, 1, 14), float64],) */
}

def @func_5438() -> (Tensor[(14, 1, 14), float64],) {
  %395 = fn () -> (Tensor[(14, 1, 14), float64],) {
    %394 = @func_2754() /* ty=Tensor[(14, 1, 14), float64] */;
    (%394,)
  };
  %395() /* ty=(Tensor[(14, 1, 14), float64],) */
}

def @func_935(%var_917: Tensor[(45), int32]) -> (Tensor[(5, 4, 1), float32], Tensor[(5, 4, ?), float64], Tensor[(4, 5, 9), bool], Tensor[(45), int32], Tensor[(6, 30), int32]) {
  %396 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 4, 1), float64] */, dtype="float32") /* ty=Tensor[(5, 4, 1), float32] */;
  %397 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 4, 1), float64] */, dtype="float64") /* ty=Tensor[(5, 4, 1), float64] */;
  %398 = log(%397) /* ty=Tensor[(5, 4, 1), float64] */;
  %399 = cast(%398, dtype="float32") /* ty=Tensor[(5, 4, 1), float32] */;
  %400 = tan(%399) /* ty=Tensor[(5, 4, 1), float32] */;
  %401 = cast(%398, dtype="bool") /* ty=Tensor[(5, 4, 1), bool] */;
  %402 = shape_of(%400, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(%400, dtype="bool") /* ty=Tensor[(5, 4, 1), bool] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %405 = equal(%403, %404) /* ty=Tensor[(5, 4, ?), bool] */;
  %406 = cast(%405, dtype="float64") /* ty=Tensor[(5, 4, ?), float64] */;
  %407 = cos(%406) /* ty=Tensor[(5, 4, ?), float64] */;
  %408 = cast(%407, dtype="float64") /* ty=Tensor[(5, 4, ?), float64] */;
  %409 = cast(%var_917, dtype="int32") /* ty=Tensor[(45), int32] */;
  %410 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 30), int32] */, dtype="int32") /* ty=Tensor[(6, 30), int32] */;
  %411 = reshape(%409, newshape=[1, 5, 9]) /* ty=Tensor[(1, 5, 9), int32] */;
  %412 = reshape(%410, newshape=[4, 5, 9]) /* ty=Tensor[(4, 5, 9), int32] */;
  %413 = @func_767(%411, %412) /* ty=(Tensor[(4, 5, 9), bool],) */;
  %414 = cosh(%396) /* ty=Tensor[(5, 4, 1), float32] */;
  %415 = asin(%408) /* ty=Tensor[(5, 4, ?), float64] */;
  %416 = %413.0;
  (%414, %415, %416, %var_917, meta[relay.Constant][20] /* ty=Tensor[(6, 30), int32] */)
}

def @func_3978(%var_3976: Tensor[(1680), float32]) -> (Tensor[(14, 1, 14), float64], Tensor[(8, 15, 6), float64], Tensor[(720), float64], Tensor[(8, 15, 6), float64], Tensor[(1680), float32]) {
  @func_3975(%var_3976) /* ty=(Tensor[(14, 1, 14), float64], Tensor[(8, 15, 6), float64], Tensor[(720), float64], Tensor[(8, 15, 6), float64], Tensor[(1680), float32]) */
}

def @func_2756() -> Tensor[(14, 1, 14), float64] {
  @func_2754() /* ty=Tensor[(14, 1, 14), float64] */
}

def @func_5654(%var_5653: Tensor[(90), float64]) -> (Tensor[(14, ?, 14), float64], Tensor[(10, 14, 7), float64], Tensor[(980), float64], Tensor[(90), float64]) {
  %424 = fn (%var_5649: Tensor[(90), float64]) -> (Tensor[(14, ?, 14), float64], Tensor[(10, 14, 7), float64], Tensor[(980), float64], Tensor[(90), float64]) {
    %417 = cast(meta[relay.Constant][21] /* ty=Tensor[(980), float64] */, dtype="float64") /* ty=Tensor[(980), float64] */;
    %418 = cast(%var_5649, dtype="float64") /* ty=Tensor[(90), float64] */;
    %419 = reshape(%417, newshape=[10, 14, 7]) /* ty=Tensor[(10, 14, 7), float64] */;
    %420 = reshape(%418, newshape=[90]) /* ty=Tensor[(90), float64] */;
    %421 = @func_5043(%419, %420) /* ty=(Tensor[(10, 14, 7), float64], Tensor[(8, 15, 6), float64], Tensor[(90), float64], Tensor[(1960), float64]) */;
    %422 = @func_5618() /* ty=Tensor[(14, ?, 14), float64] */;
    %423 = %421.0;
    (%422, %423, meta[relay.Constant][21] /* ty=Tensor[(980), float64] */, %var_5649)
  };
  %424(%var_5653) /* ty=(Tensor[(14, ?, 14), float64], Tensor[(10, 14, 7), float64], Tensor[(980), float64], Tensor[(90), float64]) */
}

def @func_3683() -> (Tensor[(14, ?, 14), float64],) {
  %427 = fn () -> (Tensor[(14, ?, 14), float64],) {
    %425 = @func_2798() /* ty=(Tensor[(14, ?, 14), float32], Tensor[(14, ?, 14), float64]) */;
    %426 = %425.1;
    (%426,)
  };
  %427() /* ty=(Tensor[(14, ?, 14), float64],) */
}

def @func_4702(%var_4663: Tensor[(90), float64], %var_4666: Tensor[(14, 10, 14), float64]) -> (Tensor[(216), bool], Tensor[(90), float64], Tensor[(216), bool], Tensor[(14, ?, 14), float64], Tensor[(14, 10, 14), float32], Tensor[(300), float32], Tensor[(8, 15, 6), float64], Tensor[(1680), float32]) {
  %428 = cast(%var_4663, dtype="float64") /* ty=Tensor[(90), float64] */;
  %429 = cast(%var_4663, dtype="float64") /* ty=Tensor[(90), float64] */;
  %430 = cast(meta[relay.Constant][22] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
  %431 = reshape(%428, newshape=[9, 5, 2]) /* ty=Tensor[(9, 5, 2), float64] */;
  %432 = reshape(%429, newshape=[9, 5, 2]) /* ty=Tensor[(9, 5, 2), float64] */;
  %433 = reshape(%430, newshape=[216]) /* ty=Tensor[(216), bool] */;
  %434 = @func_1647(%431, %432, %433) /* ty=(Tensor[(9, 5, 2), bool], Tensor[(3, 9, 8), int16], Tensor[(216), bool], Tensor[(48, 4), uint64], Tensor[(8, 15, 6), float64], Tensor[(720), float64]) */;
  %435 = @func_3682() /* ty=(Tensor[(14, ?, 14), float64],) */;
  %436 = @func_3746() /* ty=(Tensor[(14, 1, 14), float64],) */;
  %437 = %436.0;
  %438 = cast(%437, dtype="float32") /* ty=Tensor[(14, 1, 14), float32] */;
  %439 = cast(%var_4666, dtype="float32") /* ty=Tensor[(14, 10, 14), float32] */;
  %440 = floor_mod(%438, %439) /* ty=Tensor[(14, 10, 14), float32] */;
  %441 = cast(%440, dtype="float32") /* ty=Tensor[(14, 10, 14), float32] */;
  %442 = cast(meta[relay.Constant][22] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
  %443 = cast(meta[relay.Constant][22] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
  %444 = reshape(%442, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), bool] */;
  %445 = reshape(%443, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), bool] */;
  %446 = @func_373(%444, %445) /* ty=(Tensor[(3, 9, 8), int16], Tensor[(300), float32], Tensor[(2, 15, 10), float64]) */;
  %447 = cast(meta[relay.Constant][23] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %448 = reshape(%447, newshape=[1680]) /* ty=Tensor[(1680), float32] */;
  %449 = @func_3975(%448) /* ty=(Tensor[(14, 1, 14), float64], Tensor[(8, 15, 6), float64], Tensor[(720), float64], Tensor[(8, 15, 6), float64], Tensor[(1680), float32]) */;
  %450 = %434.2;
  %451 = %435.0;
  %452 = cos(%441) /* ty=Tensor[(14, 10, 14), float32] */;
  %453 = %446.1;
  %454 = %449.3;
  (%450, %var_4663, meta[relay.Constant][22] /* ty=Tensor[(216), bool] */, %451, %452, %453, %454, meta[relay.Constant][23] /* ty=Tensor[(1680), float32] */)
}

def @func_5693() -> Tensor[(14, 1, 14), float64] {
  @func_5691() /* ty=Tensor[(14, 1, 14), float64] */
}

def @func_5967(%var_5965: Tensor[(6, 5, 12), float32], %var_5966: Tensor[(588), bool]) -> (Tensor[(14, 1, 14), float64], Tensor[(14, ?, 14), float64], Tensor[(162), float64], Tensor[(14, 3, 14), uint32], Tensor[(588), bool], Tensor[(6, 5, 12), bool], Tensor[(6, 5, 12), float32]) {
  @func_5963(%var_5965, %var_5966) /* ty=(Tensor[(14, 1, 14), float64], Tensor[(14, ?, 14), float64], Tensor[(162), float64], Tensor[(14, 3, 14), uint32], Tensor[(588), bool], Tensor[(6, 5, 12), bool], Tensor[(6, 5, 12), float32]) */
}

def @func_6051(%var_6049: Tensor[(18, 9), float64]) -> (Tensor[(14, ?, 14), float64], Tensor[(18, 9), float64], Tensor[(6, 5, 4), float64], Tensor[(45), int32], Tensor[(14, 3, 14), bool]) {
  @func_6048(%var_6049) /* ty=(Tensor[(14, ?, 14), float64], Tensor[(18, 9), float64], Tensor[(6, 5, 4), float64], Tensor[(45), int32], Tensor[(14, 3, 14), bool]) */
}

def @func_5568(%var_5539: Tensor[(1350), float32], %var_5540: Tensor[(300), float32], %var_5543: Tensor[(1, 252), int16], %var_5558: Tensor[(45), int32], %var_5566: Tensor[(280), float64]) -> (Tensor[(14, 3, 14), bool], Tensor[(1350), float32], Tensor[(300), float32], Tensor[(9, 7, 4), int16], Tensor[(1, 252), int16], Tensor[(14, 1, 14), float64], Tensor[(15, 9, 10), float64], Tensor[(45), int32], Tensor[(45), int32], Tensor[(14, 5, 4), float64], Tensor[(280), float64]) {
  %455 = cast(%var_5543, dtype="int16") /* ty=Tensor[(1, 252), int16] */;
  %456 = cast(%var_5543, dtype="int16") /* ty=Tensor[(1, 252), int16] */;
  %457 = reshape(%455, newshape=[9, 7, 4]) /* ty=Tensor[(9, 7, 4), int16] */;
  %458 = reshape(%456, newshape=[9, 7, 4]) /* ty=Tensor[(9, 7, 4), int16] */;
  %459 = @func_1233(%457, %458) /* ty=(Tensor[(9, 7, 4), int16], Tensor[(3, 9, 8), int16], Tensor[(2, 108), bool], Tensor[(2, 15, 10), float32], Tensor[(300), float32]) */;
  %460 = @func_3746() /* ty=(Tensor[(14, 1, 14), float64],) */;
  %461 = cast(%var_5539, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %462 = cast(%var_5540, dtype="float32") /* ty=Tensor[(300), float32] */;
  %463 = reshape(%461, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), float32] */;
  %464 = reshape(%462, newshape=[50, 6]) /* ty=Tensor[(50, 6), float32] */;
  %465 = @func_1912(%463, %464) /* ty=(Tensor[(2, 15, 10), float32], Tensor[(50, 6), float32], Tensor[(15, 9, 10), float32], Tensor[(3, 9, 8), int16], Tensor[(216), bool]) */;
  %466 = %465.2;
  %467 = cast(%466, dtype="float64") /* ty=Tensor[(15, 9, 10), float64] */;
  %468 = cast(%var_5558, dtype="int32") /* ty=Tensor[(45), int32] */;
  %469 = reshape(%468, newshape=[45]) /* ty=Tensor[(45), int32] */;
  %470 = @func_935(%469) /* ty=(Tensor[(5, 4, 1), float32], Tensor[(5, 4, ?), float64], Tensor[(4, 5, 9), bool], Tensor[(45), int32], Tensor[(6, 30), int32]) */;
  %471 = cast(%var_5566, dtype="float64") /* ty=Tensor[(280), float64] */;
  %472 = reshape(%471, newshape=[14, 5, 4]) /* ty=Tensor[(14, 5, 4), float64] */;
  %473 = @func_3789() /* ty=Tensor[(14, 3, 14), bool] */;
  %474 = %459.0;
  %475 = %460.0;
  %476 = sin(%467) /* ty=Tensor[(15, 9, 10), float64] */;
  %477 = %470.3;
  %478 = @func_4489(%472) /* ty=Tensor[(14, 5, 4), float64] */;
  (%473, %var_5539, %var_5540, %474, %var_5543, %475, %476, %477, %var_5558, %478, %var_5566)
}

def @func_5605(%var_5603: Tensor[(14, 6, 14), float32]) -> Tensor[(14, 6, 14), float64] {
  @func_5602(%var_5603) /* ty=Tensor[(14, 6, 14), float64] */
}

def @func_2853() -> (Tensor[(14, ?, 14), float64],) {
  %481 = fn () -> (Tensor[(14, ?, 14), float64],) {
    %479 = @func_2798() /* ty=(Tensor[(14, ?, 14), float32], Tensor[(14, ?, 14), float64]) */;
    %480 = %479.1;
    (%480,)
  };
  %481() /* ty=(Tensor[(14, ?, 14), float64],) */
}

def @func_4951() -> (Tensor[(14, 1, 14), float64],) {
  %482 = @func_2930() /* ty=(Tensor[(14, 1, 14), float64],) */;
  %483 = %482.0;
  (%483,)
}

def @func_4462(%var_4460: Tensor[(90), float64], %var_4461: Tensor[(720), float64]) -> (Tensor[(14, 3, 14), float64], Tensor[(14, ?, 14), bool], Tensor[(90), float64], Tensor[(196), float64], Tensor[(1680), float32], Tensor[(1680), float32], Tensor[(720), float64]) {
  @func_4458(%var_4460, %var_4461) /* ty=(Tensor[(14, 3, 14), float64], Tensor[(14, ?, 14), bool], Tensor[(90), float64], Tensor[(196), float64], Tensor[(1680), float32], Tensor[(1680), float32], Tensor[(720), float64]) */
}

def @func_3397(%var_3363: Tensor[(1680), float32], %var_3364: Tensor[(720), float64]) -> (Tensor[(8, 14, 7), int32], Tensor[(720), float64], Tensor[(1680), float32], Tensor[(720), float64], Tensor[(14, ?, 14), float32]) {
  %484 = @func_2866() /* ty=(Tensor[(8, 14, 7), int32],) */;
  %485 = cast(%var_3363, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %486 = cast(%var_3364, dtype="float64") /* ty=Tensor[(720), float64] */;
  %487 = reshape(%485, newshape=[8, 14, 15]) /* ty=Tensor[(8, 14, 15), float32] */;
  %488 = reshape(%486, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %489 = @func_2206(%487, %488) /* ty=(Tensor[(8, 14, 15), float32], Tensor[(8, 15, 6), float64], Tensor[(720), float64], Tensor[(8, 14, 15), float32]) */;
  %490 = @func_2798() /* ty=(Tensor[(14, ?, 14), float32], Tensor[(14, ?, 14), float64]) */;
  %491 = %484.0;
  %492 = %489.2;
  %493 = %490.0;
  (%491, %492, %var_3363, %var_3364, %493)
}

def @func_4932() -> Tensor[(8, 14, 7), float32] {
  %494 = @func_3065() /* ty=Tensor[(8, 14, 7), int32] */;
  %495 = cast(meta[relay.Constant][24] /* ty=Tensor[(8, 14, 7), int32] */, dtype="float32") /* ty=Tensor[(8, 14, 7), float32] */;
  %496 = shape_of(%494, dtype="int32") /* ty=Tensor[(3), int32] */;
  %497 = cast(%494, dtype="float32") /* ty=Tensor[(8, 14, 7), float32] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  add(%497, %498) /* ty=Tensor[(8, 14, 7), float32] */
}

def @func_5758() -> (Tensor[(14, 3, 14), bool], Tensor[(14, 3, 14), bool]) {
  %502 = fn () -> (Tensor[(14, 3, 14), bool], Tensor[(14, 3, 14), bool]) {
    %499 = @func_5384() /* ty=(Tensor[(14, 3, 14), bool],) */;
    %500 = @func_3789() /* ty=Tensor[(14, 3, 14), bool] */;
    %501 = %499.0;
    (%500, %501)
  };
  %502() /* ty=(Tensor[(14, 3, 14), bool], Tensor[(14, 3, 14), bool]) */
}

def @func_6250(%var_6249: Tensor[(14, 10, 14), float64]) -> (Tensor[(14, 10, 14), int8],) {
  %508 = fn (%var_6239: Tensor[(14, 10, 14), float64]) -> (Tensor[(14, 10, 14), int8],) {
    %503 = @func_3423() /* ty=(Tensor[(14, 1, 14), float64],) */;
    %504 = %503.0;
    %505 = cast(%504, dtype="int8") /* ty=Tensor[(14, 1, 14), int8] */;
    %506 = cast(%var_6239, dtype="int8") /* ty=Tensor[(14, 10, 14), int8] */;
    %507 = logical_xor(%505, %506) /* ty=Tensor[(14, 10, 14), int8] */;
    (%507,)
  };
  %508(%var_6249) /* ty=(Tensor[(14, 10, 14), int8],) */
}

def @func_377(%var_375: Tensor[(3, 9, 8), bool], %var_376: Tensor[(3, 9, 8), bool]) -> (Tensor[(3, 9, 8), int16], Tensor[(300), float32], Tensor[(2, 15, 10), float64]) {
  @func_373(%var_375, %var_376) /* ty=(Tensor[(3, 9, 8), int16], Tensor[(300), float32], Tensor[(2, 15, 10), float64]) */
}

def @func_4489(%var_4484: Tensor[(14, 5, 4), float64]) -> Tensor[(14, 5, 4), float64] {
  %509 = cast(%var_4484, dtype="float64") /* ty=Tensor[(14, 5, 4), float64] */;
  log2(%509) /* ty=Tensor[(14, 5, 4), float64] */
}

def @func_2799() -> (Tensor[(14, ?, 14), float32], Tensor[(14, ?, 14), float64]) {
  %525 = fn () -> (Tensor[(14, ?, 14), float32], Tensor[(14, ?, 14), float64]) {
    %510 = @func_2754() /* ty=Tensor[(14, 1, 14), float64] */;
    %511 = cast(%510, dtype="float64") /* ty=Tensor[(14, 1, 14), float64] */;
    %512 = tan(%511) /* ty=Tensor[(14, 1, 14), float64] */;
    %513 = cast(%510, dtype="int8") /* ty=Tensor[(14, 1, 14), int8] */;
    %514 = shape_of(%512, dtype="int32") /* ty=Tensor[(3), int32] */;
    %515 = cast(%512, dtype="int8") /* ty=Tensor[(14, 1, 14), int8] */;
    %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %517 = bitwise_xor(%515, %516) /* ty=Tensor[(14, ?, 14), int8] */;
    %518 = cast(%517, dtype="float32") /* ty=Tensor[(14, ?, 14), float32] */;
    %519 = shape_of(%512, dtype="int32") /* ty=Tensor[(3), int32] */;
    %520 = cast(%512, dtype="float32") /* ty=Tensor[(14, 1, 14), float32] */;
    %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %522 = cast(%517, dtype="float64") /* ty=Tensor[(14, ?, 14), float64] */;
    %523 = mod(%520, %521) /* ty=Tensor[(14, ?, 14), float32] */;
    %524 = sigmoid(%522) /* ty=Tensor[(14, ?, 14), float64] */;
    (%523, %524)
  };
  %525() /* ty=(Tensor[(14, ?, 14), float32], Tensor[(14, ?, 14), float64]) */
}

def @func_2546(%var_2541: Tensor[(45), int32]) -> (Tensor[(6, 5, 4), float64], Tensor[(6, 30), int32], Tensor[(45), int32]) {
  %526 = cast(meta[relay.Constant][25] /* ty=Tensor[(6, 5, 4), float64] */, dtype="float64") /* ty=Tensor[(6, 5, 4), float64] */;
  %527 = cast(%var_2541, dtype="int32") /* ty=Tensor[(45), int32] */;
  %528 = reshape(%527, newshape=[45]) /* ty=Tensor[(45), int32] */;
  %529 = @func_935(%528) /* ty=(Tensor[(5, 4, 1), float32], Tensor[(5, 4, ?), float64], Tensor[(4, 5, 9), bool], Tensor[(45), int32], Tensor[(6, 30), int32]) */;
  %530 = sigmoid(%526) /* ty=Tensor[(6, 5, 4), float64] */;
  %531 = %529.4;
  (%530, %531, %var_2541)
}

def @func_1587(%var_1555: Tensor[(8, 15, 6), float64]) -> (Tensor[(8, 15, 6), float64], Tensor[(8, 15, 6), float64]) {
  %532 = cast(%var_1555, dtype="float64") /* ty=Tensor[(8, 15, 6), float64] */;
  %533 = cast(%var_1555, dtype="float64") /* ty=Tensor[(8, 15, 6), float64] */;
  %534 = acos(%532) /* ty=Tensor[(8, 15, 6), float64] */;
  %535 = atan(%533) /* ty=Tensor[(8, 15, 6), float64] */;
  (%534, %535)
}

def @func_5351() -> (Tensor[(14, 1, 14), float64], Tensor[(14, 3, 14), bool]) {
  %540 = fn () -> (Tensor[(14, 1, 14), float64], Tensor[(14, 3, 14), bool]) {
    %536 = @func_4951() /* ty=(Tensor[(14, 1, 14), float64],) */;
    %537 = @func_4130() /* ty=(Tensor[(14, 1, 14), float64], Tensor[(14, 3, 14), bool]) */;
    %538 = %536.0;
    %539 = %537.1;
    (%538, %539)
  };
  %540() /* ty=(Tensor[(14, 1, 14), float64], Tensor[(14, 3, 14), bool]) */
}

def @func_2754() -> Tensor[(14, 1, 14), float64] {
  %541 = cast(meta[relay.Constant][26] /* ty=Tensor[(14, 1, 14), float32] */, dtype="float32") /* ty=Tensor[(14, 1, 14), float32] */;
  %542 = acos(%541) /* ty=Tensor[(14, 1, 14), float32] */;
  %543 = cast(%542, dtype="float64") /* ty=Tensor[(14, 1, 14), float64] */;
  sin(%543) /* ty=Tensor[(14, 1, 14), float64] */
}

def @func_66(%var_65: Tensor[(12, 8, 2), int16]) -> (Tensor[(12, 8, 2), bool], Tensor[(12, 8, 2), float64], Tensor[(12, 8, 2), int16]) {
  %556 = fn (%var_40: Tensor[(12, 8, 2), int16]) -> (Tensor[(12, 8, 2), bool], Tensor[(12, 8, 2), float64], Tensor[(12, 8, 2), int16]) {
    %544 = cast(meta[relay.Constant][27] /* ty=Tensor[(12, 8, 2), int16] */, dtype="bool") /* ty=Tensor[(12, 8, 2), bool] */;
    %545 = shape_of(%var_40, dtype="int32") /* ty=Tensor[(3), int32] */;
    %546 = cast(%var_40, dtype="bool") /* ty=Tensor[(12, 8, 2), bool] */;
    %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %548 = cast(meta[relay.Constant][27] /* ty=Tensor[(12, 8, 2), int16] */, dtype="float64") /* ty=Tensor[(12, 8, 2), float64] */;
    %549 = cast(%var_40, dtype="int16") /* ty=Tensor[(12, 8, 2), int16] */;
    %550 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(12, 8, 2), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %551 = cast(meta[relay.Constant][27] /* ty=Tensor[(12, 8, 2), int16] */, dtype="int16") /* ty=Tensor[(12, 8, 2), int16] */;
    %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %553 = equal(%546, %547) /* ty=Tensor[(12, 8, 2), bool] */;
    %554 = atanh(%548) /* ty=Tensor[(12, 8, 2), float64] */;
    %555 = right_shift(%551, %552) /* ty=Tensor[(12, 8, 2), int16] */;
    (%553, %554, %555)
  };
  %556(%var_65) /* ty=(Tensor[(12, 8, 2), bool], Tensor[(12, 8, 2), float64], Tensor[(12, 8, 2), int16]) */
}

def @func_767(%var_745: Tensor[(1, 5, 9), int32], %var_746: Tensor[(4, 5, 9), int32]) -> (Tensor[(4, 5, 9), bool],) {
  %557 = cast(%var_745, dtype="bool") /* ty=Tensor[(1, 5, 9), bool] */;
  %558 = cast(%var_746, dtype="bool") /* ty=Tensor[(4, 5, 9), bool] */;
  %559 = greater(%557, %558) /* ty=Tensor[(4, 5, 9), bool] */;
  (%559,)
}

def @func_3333(%var_3326: Tensor[(90), float64]) -> (Tensor[(14, 1, 14), float64], Tensor[(14, 1, 14), float64], Tensor[(108, 2), float64], Tensor[(90), float64], Tensor[(216), bool], Tensor[(910), int32], Tensor[(180), int32]) {
  %560 = @func_2930() /* ty=(Tensor[(14, 1, 14), float64],) */;
  %561 = @func_2930() /* ty=(Tensor[(14, 1, 14), float64],) */;
  %562 = cast(%var_3326, dtype="float64") /* ty=Tensor[(90), float64] */;
  %563 = cast(meta[relay.Constant][28] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
  %564 = cast(meta[relay.Constant][29] /* ty=Tensor[(910), int32] */, dtype="int32") /* ty=Tensor[(910), int32] */;
  %565 = cast(meta[relay.Constant][30] /* ty=Tensor[(180), int32] */, dtype="int32") /* ty=Tensor[(180), int32] */;
  %566 = reshape(%562, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %567 = reshape(%563, newshape=[108, 2]) /* ty=Tensor[(108, 2), bool] */;
  %568 = reshape(%564, newshape=[910]) /* ty=Tensor[(910), int32] */;
  %569 = reshape(%565, newshape=[180]) /* ty=Tensor[(180), int32] */;
  %570 = @func_2999(%566, %567, %568, %569) /* ty=(Tensor[(14, 1, 14), float64], Tensor[(14, ?, 14), float32], Tensor[(2, 15, 10), float32], Tensor[(90), float64], Tensor[(910), bool], Tensor[(4, 5, 9), bool], Tensor[(45), int32], Tensor[(180), int32], Tensor[(108, 2), float64]) */;
  %571 = %560.0;
  %572 = %561.0;
  %573 = %570.8;
  (%571, %572, %573, %var_3326, meta[relay.Constant][28] /* ty=Tensor[(216), bool] */, meta[relay.Constant][29] /* ty=Tensor[(910), int32] */, meta[relay.Constant][30] /* ty=Tensor[(180), int32] */)
}

def @func_1651(%var_1648: Tensor[(9, 5, 2), float64], %var_1649: Tensor[(9, 5, 2), float64], %var_1650: Tensor[(216), bool]) -> (Tensor[(9, 5, 2), bool], Tensor[(3, 9, 8), int16], Tensor[(216), bool], Tensor[(48, 4), uint64], Tensor[(8, 15, 6), float64], Tensor[(720), float64]) {
  %598 = fn (%var_1617: Tensor[(9, 5, 2), float64], %var_1618: Tensor[(9, 5, 2), float64], %var_1631: Tensor[(216), bool]) -> (Tensor[(9, 5, 2), bool], Tensor[(3, 9, 8), int16], Tensor[(216), bool], Tensor[(48, 4), uint64], Tensor[(8, 15, 6), float64], Tensor[(720), float64]) {
    %574 = cast(%var_1618, dtype="bool") /* ty=Tensor[(9, 5, 2), bool] */;
    %575 = shape_of(%var_1617, dtype="int32") /* ty=Tensor[(3), int32] */;
    %576 = cast(%var_1617, dtype="bool") /* ty=Tensor[(9, 5, 2), bool] */;
    %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %578 = cast(%var_1631, dtype="bool") /* ty=Tensor[(216), bool] */;
    %579 = cast(%var_1631, dtype="bool") /* ty=Tensor[(216), bool] */;
    %580 = reshape(%578, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), bool] */;
    %581 = reshape(%579, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), bool] */;
    %582 = @func_373(%580, %581) /* ty=(Tensor[(3, 9, 8), int16], Tensor[(300), float32], Tensor[(2, 15, 10), float64]) */;
    %583 = cast(meta[relay.Constant][31] /* ty=Tensor[(48, 4), int16] */, dtype="int16") /* ty=Tensor[(48, 4), int16] */;
    %584 = reshape(%583, newshape=[12, 8, 2]) /* ty=Tensor[(12, 8, 2), int16] */;
    %585 = @func_64(%584) /* ty=(Tensor[(12, 8, 2), bool], Tensor[(12, 8, 2), float64], Tensor[(12, 8, 2), int16]) */;
    %586 = %585.0;
    %587 = cast(%586, dtype="uint64") /* ty=Tensor[(12, 8, 2), uint64] */;
    %588 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(48, 4), int16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %589 = cast(meta[relay.Constant][31] /* ty=Tensor[(48, 4), int16] */, dtype="uint64") /* ty=Tensor[(48, 4), uint64] */;
    %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %591 = cast(meta[relay.Constant][32] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
    %592 = reshape(%591, newshape=[8, 15, 6]) /* ty=Tensor[(8, 15, 6), float64] */;
    %593 = @func_1587(%592) /* ty=(Tensor[(8, 15, 6), float64], Tensor[(8, 15, 6), float64]) */;
    %594 = less(%576, %577) /* ty=Tensor[(9, 5, 2), bool] */;
    %595 = %582.0;
    %596 = bitwise_xor(%589, %590) /* ty=Tensor[(48, 4), uint64] */;
    %597 = %593.0;
    (%594, %595, %var_1631, %596, %597, meta[relay.Constant][32] /* ty=Tensor[(720), float64] */)
  };
  %598(%var_1648, %var_1649, %var_1650) /* ty=(Tensor[(9, 5, 2), bool], Tensor[(3, 9, 8), int16], Tensor[(216), bool], Tensor[(48, 4), uint64], Tensor[(8, 15, 6), float64], Tensor[(720), float64]) */
}

def @func_4458(%var_4445: Tensor[(90), float64], %var_4456: Tensor[(720), float64]) -> (Tensor[(14, 3, 14), float64], Tensor[(14, ?, 14), bool], Tensor[(90), float64], Tensor[(196), float64], Tensor[(1680), float32], Tensor[(1680), float32], Tensor[(720), float64]) {
  %599 = @func_3789() /* ty=Tensor[(14, 3, 14), bool] */;
  %600 = cast(%599, dtype="float64") /* ty=Tensor[(14, 3, 14), float64] */;
  %601 = cast(%var_4445, dtype="float64") /* ty=Tensor[(90), float64] */;
  %602 = cast(meta[relay.Constant][33] /* ty=Tensor[(196), float64] */, dtype="float64") /* ty=Tensor[(196), float64] */;
  %603 = reshape(%601, newshape=[15, 6]) /* ty=Tensor[(15, 6), float64] */;
  %604 = reshape(%602, newshape=[14, 1, 14]) /* ty=Tensor[(14, 1, 14), float64] */;
  %605 = @func_3616(%603, %604) /* ty=(Tensor[(216), bool], Tensor[(15, 6), float64], Tensor[(180), int32], Tensor[(14, ?, 14), bool], Tensor[(50, 6), float32], Tensor[(1350), float32], Tensor[(300), float32]) */;
  %606 = cast(%599, dtype="bool") /* ty=Tensor[(14, 3, 14), bool] */;
  %607 = cast(meta[relay.Constant][34] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %608 = cast(%var_4456, dtype="float64") /* ty=Tensor[(720), float64] */;
  %609 = sin(%600) /* ty=Tensor[(14, 3, 14), float64] */;
  %610 = cast(%609, dtype="bool") /* ty=Tensor[(14, 3, 14), bool] */;
  %611 = reshape(%606, newshape=[14, 3, 14]) /* ty=Tensor[(14, 3, 14), bool] */;
  %612 = reshape(%607, newshape=[1680]) /* ty=Tensor[(1680), float32] */;
  %613 = reshape(%608, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %614 = reshape(%610, newshape=[14, 3, 14]) /* ty=Tensor[(14, 3, 14), bool] */;
  %615 = @func_4366(%611, %612, %613, %614) /* ty=(Tensor[(1680), float32], Tensor[(1680), float32], Tensor[(720), float64], Tensor[(14, 3, 14), float32]) */;
  %616 = %605.3;
  %617 = %615.1;
  (%609, %616, %var_4445, meta[relay.Constant][33] /* ty=Tensor[(196), float64] */, %617, meta[relay.Constant][34] /* ty=Tensor[(1680), float32] */, %var_4456)
}

def @func_3620(%var_3618: Tensor[(15, 6), float64], %var_3619: Tensor[(14, 1, 14), float64]) -> (Tensor[(216), bool], Tensor[(15, 6), float64], Tensor[(180), int32], Tensor[(14, ?, 14), bool], Tensor[(50, 6), float32], Tensor[(1350), float32], Tensor[(300), float32]) {
  @func_3616(%var_3618, %var_3619) /* ty=(Tensor[(216), bool], Tensor[(15, 6), float64], Tensor[(180), int32], Tensor[(14, ?, 14), bool], Tensor[(50, 6), float32], Tensor[(1350), float32], Tensor[(300), float32]) */
}

def @func_4889() -> (Tensor[(14, ?, 14), float32],) {
  %620 = fn () -> (Tensor[(14, ?, 14), float32],) {
    %618 = @func_2798() /* ty=(Tensor[(14, ?, 14), float32], Tensor[(14, ?, 14), float64]) */;
    %619 = %618.0;
    (%619,)
  };
  %620() /* ty=(Tensor[(14, ?, 14), float32],) */
}

def @func_1915(%var_1913: Tensor[(15, 9, 10), float32], %var_1914: Tensor[(50, 6), float32]) -> (Tensor[(2, 15, 10), float32], Tensor[(50, 6), float32], Tensor[(15, 9, 10), float32], Tensor[(3, 9, 8), int16], Tensor[(216), bool]) {
  %634 = fn (%var_1869: Tensor[(15, 9, 10), float32], %var_1883: Tensor[(50, 6), float32]) -> (Tensor[(2, 15, 10), float32], Tensor[(50, 6), float32], Tensor[(15, 9, 10), float32], Tensor[(3, 9, 8), int16], Tensor[(216), bool]) {
    %621 = cast(%var_1883, dtype="float32") /* ty=Tensor[(50, 6), float32] */;
    %622 = reshape(%621, newshape=[2, 15, 10]) /* ty=Tensor[(2, 15, 10), float32] */;
    %623 = cast(%var_1869, dtype="float32") /* ty=Tensor[(15, 9, 10), float32] */;
    %624 = acos(%623) /* ty=Tensor[(15, 9, 10), float32] */;
    %625 = cast(%624, dtype="float32") /* ty=Tensor[(15, 9, 10), float32] */;
    %626 = cast(meta[relay.Constant][35] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
    %627 = cast(meta[relay.Constant][35] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
    %628 = reshape(%626, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), bool] */;
    %629 = reshape(%627, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), bool] */;
    %630 = @func_373(%628, %629) /* ty=(Tensor[(3, 9, 8), int16], Tensor[(300), float32], Tensor[(2, 15, 10), float64]) */;
    %631 = @func_250(%622) /* ty=Tensor[(2, 15, 10), float32] */;
    %632 = acosh(%625) /* ty=Tensor[(15, 9, 10), float32] */;
    %633 = %630.0;
    (%631, %var_1883, %632, %633, meta[relay.Constant][35] /* ty=Tensor[(216), bool] */)
  };
  %634(%var_1913, %var_1914) /* ty=(Tensor[(2, 15, 10), float32], Tensor[(50, 6), float32], Tensor[(15, 9, 10), float32], Tensor[(3, 9, 8), int16], Tensor[(216), bool]) */
}

def @func_5385() -> (Tensor[(14, 3, 14), bool],) {
  %636 = fn () -> (Tensor[(14, 3, 14), bool],) {
    %635 = @func_3789() /* ty=Tensor[(14, 3, 14), bool] */;
    (%635,)
  };
  %636() /* ty=(Tensor[(14, 3, 14), bool],) */
}

def @func_5835(%var_5834: Tensor[(14, 6, 14), float64]) -> (Tensor[(14, 6, 14), bool],) {
  %641 = fn (%var_5824: Tensor[(14, 6, 14), float64]) -> (Tensor[(14, 6, 14), bool],) {
    %637 = @func_5691() /* ty=Tensor[(14, 1, 14), float64] */;
    %638 = cast(%637, dtype="bool") /* ty=Tensor[(14, 1, 14), bool] */;
    %639 = cast(%var_5824, dtype="bool") /* ty=Tensor[(14, 6, 14), bool] */;
    %640 = equal(%638, %639) /* ty=Tensor[(14, 6, 14), bool] */;
    (%640,)
  };
  %641(%var_5834) /* ty=(Tensor[(14, 6, 14), bool],) */
}

def @func_5236() -> (Tensor[(14, 3, 14), bool],) {
  %642 = @func_5115() /* ty=Tensor[(14, 3, 14), bool] */;
  (%642,)
}

def @func_5896(%var_5895: Tensor[(2, 7, 12), float32]) -> (Tensor[(2, 7, 12), float32],) {
  %645 = fn (%var_5884: Tensor[(2, 7, 12), float32]) -> (Tensor[(2, 7, 12), float32],) {
    %643 = cast(%var_5884, dtype="float32") /* ty=Tensor[(2, 7, 12), float32] */;
    %644 = rsqrt(%643) /* ty=Tensor[(2, 7, 12), float32] */;
    (%644,)
  };
  %645(%var_5895) /* ty=(Tensor[(2, 7, 12), float32],) */
}

def @func_6110() -> (Tensor[(14, 3, 14), bool], Tensor[(6, 5, 12), float32], Tensor[(360), float32]) {
  @func_6108() /* ty=(Tensor[(14, 3, 14), bool], Tensor[(6, 5, 12), float32], Tensor[(360), float32]) */
}

def @func_3270(%var_3268: Tensor[(90), float64], %var_3269: Tensor[(180), int32]) -> (Tensor[(8, 14, 7), int32], Tensor[(9, 5, 2), bool], Tensor[(90), float64], Tensor[(216), bool], Tensor[(2, 15, 10), float32], Tensor[(910), int32], Tensor[(180), int32]) {
  %665 = fn (%var_3222: Tensor[(90), float64], %var_3232: Tensor[(180), int32]) -> (Tensor[(8, 14, 7), int32], Tensor[(9, 5, 2), bool], Tensor[(90), float64], Tensor[(216), bool], Tensor[(2, 15, 10), float32], Tensor[(910), int32], Tensor[(180), int32]) {
    %646 = cast(%var_3222, dtype="float64") /* ty=Tensor[(90), float64] */;
    %647 = cast(%var_3222, dtype="float64") /* ty=Tensor[(90), float64] */;
    %648 = cast(meta[relay.Constant][36] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
    %649 = reshape(%646, newshape=[9, 5, 2]) /* ty=Tensor[(9, 5, 2), float64] */;
    %650 = reshape(%647, newshape=[9, 5, 2]) /* ty=Tensor[(9, 5, 2), float64] */;
    %651 = reshape(%648, newshape=[216]) /* ty=Tensor[(216), bool] */;
    %652 = @func_1647(%649, %650, %651) /* ty=(Tensor[(9, 5, 2), bool], Tensor[(3, 9, 8), int16], Tensor[(216), bool], Tensor[(48, 4), uint64], Tensor[(8, 15, 6), float64], Tensor[(720), float64]) */;
    %653 = %652.0;
    %654 = cast(%653, dtype="float64") /* ty=Tensor[(9, 5, 2), float64] */;
    %655 = cast(meta[relay.Constant][36] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
    %656 = cast(meta[relay.Constant][37] /* ty=Tensor[(910), int32] */, dtype="int32") /* ty=Tensor[(910), int32] */;
    %657 = cast(%var_3232, dtype="int32") /* ty=Tensor[(180), int32] */;
    %658 = reshape(%654, newshape=[90]) /* ty=Tensor[(90), float64] */;
    %659 = reshape(%655, newshape=[108, 2]) /* ty=Tensor[(108, 2), bool] */;
    %660 = reshape(%656, newshape=[910]) /* ty=Tensor[(910), int32] */;
    %661 = reshape(%657, newshape=[180]) /* ty=Tensor[(180), int32] */;
    %662 = @func_2999(%658, %659, %660, %661) /* ty=(Tensor[(14, 1, 14), float64], Tensor[(14, ?, 14), float32], Tensor[(2, 15, 10), float32], Tensor[(90), float64], Tensor[(910), bool], Tensor[(4, 5, 9), bool], Tensor[(45), int32], Tensor[(180), int32], Tensor[(108, 2), float64]) */;
    %663 = @func_3065() /* ty=Tensor[(8, 14, 7), int32] */;
    %664 = %662.2;
    (%663, %653, %var_3222, meta[relay.Constant][36] /* ty=Tensor[(216), bool] */, %664, meta[relay.Constant][37] /* ty=Tensor[(910), int32] */, %var_3232)
  };
  %665(%var_3268, %var_3269) /* ty=(Tensor[(8, 14, 7), int32], Tensor[(9, 5, 2), bool], Tensor[(90), float64], Tensor[(216), bool], Tensor[(2, 15, 10), float32], Tensor[(910), int32], Tensor[(180), int32]) */
}

def @func_3627() -> (Tensor[(14, 1, 14), float64],) {
  %667 = fn () -> (Tensor[(14, 1, 14), float64],) {
    %666 = @func_2754() /* ty=Tensor[(14, 1, 14), float64] */;
    (%666,)
  };
  %667() /* ty=(Tensor[(14, 1, 14), float64],) */
}

def @func_3616(%var_3587: Tensor[(15, 6), float64], %var_3603: Tensor[(14, 1, 14), float64]) -> (Tensor[(216), bool], Tensor[(15, 6), float64], Tensor[(180), int32], Tensor[(14, ?, 14), bool], Tensor[(50, 6), float32], Tensor[(1350), float32], Tensor[(300), float32]) {
  %668 = cast(%var_3587, dtype="float64") /* ty=Tensor[(15, 6), float64] */;
  %669 = cast(meta[relay.Constant][38] /* ty=Tensor[(180), int32] */, dtype="int32") /* ty=Tensor[(180), int32] */;
  %670 = reshape(%668, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %671 = reshape(%669, newshape=[180]) /* ty=Tensor[(180), int32] */;
  %672 = @func_3267(%670, %671) /* ty=(Tensor[(8, 14, 7), int32], Tensor[(9, 5, 2), bool], Tensor[(90), float64], Tensor[(216), bool], Tensor[(2, 15, 10), float32], Tensor[(910), int32], Tensor[(180), int32]) */;
  %673 = @func_2930() /* ty=(Tensor[(14, 1, 14), float64],) */;
  %674 = %673.0;
  %675 = cast(%var_3603, dtype="bool") /* ty=Tensor[(14, 1, 14), bool] */;
  %676 = shape_of(%674, dtype="int32") /* ty=Tensor[(3), int32] */;
  %677 = cast(%674, dtype="bool") /* ty=Tensor[(14, 1, 14), bool] */;
  %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %679 = cast(meta[relay.Constant][39] /* ty=Tensor[(1350), float32] */, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %680 = cast(meta[relay.Constant][40] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %681 = reshape(%679, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), float32] */;
  %682 = reshape(%680, newshape=[50, 6]) /* ty=Tensor[(50, 6), float32] */;
  %683 = @func_1912(%681, %682) /* ty=(Tensor[(2, 15, 10), float32], Tensor[(50, 6), float32], Tensor[(15, 9, 10), float32], Tensor[(3, 9, 8), int16], Tensor[(216), bool]) */;
  %684 = %672.3;
  %685 = less(%677, %678) /* ty=Tensor[(14, ?, 14), bool] */;
  %686 = %683.1;
  (%684, %var_3587, meta[relay.Constant][38] /* ty=Tensor[(180), int32] */, %685, %686, meta[relay.Constant][39] /* ty=Tensor[(1350), float32] */, meta[relay.Constant][40] /* ty=Tensor[(300), float32] */)
}

def @func_5511() -> (Tensor[(14, 1, 14), float64], Tensor[(14, 1, 14), float64], Tensor[(14, 9, 14), bool], Tensor[(1764), float64]) {
  @func_5509() /* ty=(Tensor[(14, 1, 14), float64], Tensor[(14, 1, 14), float64], Tensor[(14, 9, 14), bool], Tensor[(1764), float64]) */
}

def @func_5015(%var_5013: Tensor[(6, 8, 14), bool], %var_5014: Tensor[(6, 8, 14), bool]) -> (Tensor[(6, 8, 14), bool], Tensor[(45), int32], Tensor[(30), float64], Tensor[(90), float64], Tensor[(216), bool]) {
  %700 = fn (%var_4985: Tensor[(6, 8, 14), bool], %var_4986: Tensor[(6, 8, 14), bool]) -> (Tensor[(6, 8, 14), bool], Tensor[(45), int32], Tensor[(30), float64], Tensor[(90), float64], Tensor[(216), bool]) {
    %687 = cast(%var_4986, dtype="bool") /* ty=Tensor[(6, 8, 14), bool] */;
    %688 = shape_of(%var_4985, dtype="int32") /* ty=Tensor[(3), int32] */;
    %689 = cast(%var_4985, dtype="bool") /* ty=Tensor[(6, 8, 14), bool] */;
    %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %691 = cast(meta[relay.Constant][41] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
    %692 = cast(meta[relay.Constant][42] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
    %693 = cast(meta[relay.Constant][43] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
    %694 = reshape(%691, newshape=[6, 1, 5]) /* ty=Tensor[(6, 1, 5), float64] */;
    %695 = reshape(%692, newshape=[90]) /* ty=Tensor[(90), float64] */;
    %696 = reshape(%693, newshape=[216]) /* ty=Tensor[(216), bool] */;
    %697 = @func_1721(%694, %695, %696) /* ty=(Tensor[(5, 4, ?), float64], Tensor[(45), int32], Tensor[(3, 9, 8), int16], Tensor[(90), float64], Tensor[(216), bool], Tensor[(300), float32], Tensor[(6, ?, 5), bool], Tensor[(6, 1, 5), float64]) */;
    %698 = logical_or(%689, %690) /* ty=Tensor[(6, 8, 14), bool] */;
    %699 = %697.1;
    (%698, %699, meta[relay.Constant][41] /* ty=Tensor[(30), float64] */, meta[relay.Constant][42] /* ty=Tensor[(90), float64] */, meta[relay.Constant][43] /* ty=Tensor[(216), bool] */)
  };
  %700(%var_5013, %var_5014) /* ty=(Tensor[(6, 8, 14), bool], Tensor[(45), int32], Tensor[(30), float64], Tensor[(90), float64], Tensor[(216), bool]) */
}

def @func_771(%var_769: Tensor[(1, 5, 9), int32], %var_770: Tensor[(4, 5, 9), int32]) -> (Tensor[(4, 5, 9), bool],) {
  @func_767(%var_769, %var_770) /* ty=(Tensor[(4, 5, 9), bool],) */
}

def @func_2867() -> (Tensor[(8, 14, 7), int32],) {
  %706 = fn () -> (Tensor[(8, 14, 7), int32],) {
    %701 = cast(meta[relay.Constant][45] /* ty=Tensor[(8, 14, 7), int32] */, dtype="int32") /* ty=Tensor[(8, 14, 7), int32] */;
    %702 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(8, 14, 7), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %703 = cast(meta[relay.Constant][44] /* ty=Tensor[(8, 14, 7), int32] */, dtype="int32") /* ty=Tensor[(8, 14, 7), int32] */;
    %704 = dyn.reshape(%701, %702, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %705 = left_shift(%703, %704) /* ty=Tensor[(8, 14, 7), int32] */;
    (%705,)
  };
  %706() /* ty=(Tensor[(8, 14, 7), int32],) */
}

def @func_4291() -> Tensor[(14, 1, 14), float64] {
  @func_4252() /* ty=Tensor[(14, 1, 14), float64] */
}

def @func_1726(%var_1723: Tensor[(6, 1, 5), float64], %var_1724: Tensor[(90), float64], %var_1725: Tensor[(216), bool]) -> (Tensor[(5, 4, ?), float64], Tensor[(45), int32], Tensor[(3, 9, 8), int16], Tensor[(90), float64], Tensor[(216), bool], Tensor[(300), float32], Tensor[(6, ?, 5), bool], Tensor[(6, 1, 5), float64]) {
  @func_1721(%var_1723, %var_1724, %var_1725) /* ty=(Tensor[(5, 4, ?), float64], Tensor[(45), int32], Tensor[(3, 9, 8), int16], Tensor[(90), float64], Tensor[(216), bool], Tensor[(300), float32], Tensor[(6, ?, 5), bool], Tensor[(6, 1, 5), float64]) */
}

def @func_2209(%var_2207: Tensor[(8, 14, 15), float32], %var_2208: Tensor[(720), float64]) -> (Tensor[(8, 14, 15), float32], Tensor[(8, 15, 6), float64], Tensor[(720), float64], Tensor[(8, 14, 15), float32]) {
  %715 = fn (%var_2182: Tensor[(8, 14, 15), float32], %var_2191: Tensor[(720), float64]) -> (Tensor[(8, 14, 15), float32], Tensor[(8, 15, 6), float64], Tensor[(720), float64], Tensor[(8, 14, 15), float32]) {
    %707 = cast(%var_2182, dtype="float32") /* ty=Tensor[(8, 14, 15), float32] */;
    %708 = cast(%var_2191, dtype="float64") /* ty=Tensor[(720), float64] */;
    %709 = reshape(%708, newshape=[8, 15, 6]) /* ty=Tensor[(8, 15, 6), float64] */;
    %710 = @func_1587(%709) /* ty=(Tensor[(8, 15, 6), float64], Tensor[(8, 15, 6), float64]) */;
    %711 = cast(%var_2182, dtype="float32") /* ty=Tensor[(8, 14, 15), float32] */;
    %712 = acos(%707) /* ty=Tensor[(8, 14, 15), float32] */;
    %713 = %710.1;
    %714 = atan(%711) /* ty=Tensor[(8, 14, 15), float32] */;
    (%712, %713, %var_2191, %714)
  };
  %715(%var_2207, %var_2208) /* ty=(Tensor[(8, 14, 15), float32], Tensor[(8, 15, 6), float64], Tensor[(720), float64], Tensor[(8, 14, 15), float32]) */
}

def @func_2914(%var_2912: Tensor[(90), float64], %var_2913: Tensor[(216), bool]) -> (Tensor[(8, 14, 7), int32], Tensor[(90), float64], Tensor[(2, 15, 10), float32], Tensor[(910), int32], Tensor[(3, 9, 8), bool], Tensor[(14, 1, 14), float64]) {
  %736 = fn (%var_2879: Tensor[(90), float64], %var_2880: Tensor[(216), bool]) -> (Tensor[(8, 14, 7), int32], Tensor[(90), float64], Tensor[(2, 15, 10), float32], Tensor[(910), int32], Tensor[(3, 9, 8), bool], Tensor[(14, 1, 14), float64]) {
    %716 = @func_2866() /* ty=(Tensor[(8, 14, 7), int32],) */;
    %717 = cast(meta[relay.Constant][46] /* ty=Tensor[(910), int32] */, dtype="int32") /* ty=Tensor[(910), int32] */;
    %718 = reshape(%717, newshape=[5, 13, 14]) /* ty=Tensor[(5, 13, 14), int32] */;
    %719 = @func_2721(%718) /* ty=(Tensor[(5, 13, 14), int32], Tensor[(2, 15, 10), float32], Tensor[(300), float32]) */;
    %720 = cast(%var_2879, dtype="float64") /* ty=Tensor[(90), float64] */;
    %721 = cast(%var_2879, dtype="float64") /* ty=Tensor[(90), float64] */;
    %722 = cast(%var_2880, dtype="bool") /* ty=Tensor[(216), bool] */;
    %723 = reshape(%720, newshape=[9, 5, 2]) /* ty=Tensor[(9, 5, 2), float64] */;
    %724 = reshape(%721, newshape=[9, 5, 2]) /* ty=Tensor[(9, 5, 2), float64] */;
    %725 = reshape(%722, newshape=[216]) /* ty=Tensor[(216), bool] */;
    %726 = @func_1647(%723, %724, %725) /* ty=(Tensor[(9, 5, 2), bool], Tensor[(3, 9, 8), int16], Tensor[(216), bool], Tensor[(48, 4), uint64], Tensor[(8, 15, 6), float64], Tensor[(720), float64]) */;
    %727 = %726.1;
    %728 = cast(%var_2880, dtype="bool") /* ty=Tensor[(216), bool] */;
    %729 = shape_of(%727, dtype="int32") /* ty=Tensor[(3), int32] */;
    %730 = cast(%727, dtype="bool") /* ty=Tensor[(3, 9, 8), bool] */;
    %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %732 = %716.0;
    %733 = %719.1;
    %734 = equal(%730, %731) /* ty=Tensor[(3, 9, 8), bool] */;
    %735 = @func_2754() /* ty=Tensor[(14, 1, 14), float64] */;
    (%732, %var_2879, %733, meta[relay.Constant][46] /* ty=Tensor[(910), int32] */, %734, %735)
  };
  %736(%var_2912, %var_2913) /* ty=(Tensor[(8, 14, 7), int32], Tensor[(90), float64], Tensor[(2, 15, 10), float32], Tensor[(910), int32], Tensor[(3, 9, 8), bool], Tensor[(14, 1, 14), float64]) */
}

def @func_253(%var_251: Tensor[(2, 15, 10), float32]) -> Tensor[(2, 15, 10), float32] {
  @func_250(%var_251) /* ty=Tensor[(2, 15, 10), float32] */
}

def @func_6288(%var_6286: Tensor[(7, 8, 13), float32]) -> (Tensor[(7, 8, 13), float32],) {
  @func_6285(%var_6286) /* ty=(Tensor[(7, 8, 13), float32],) */
}

def @func_250(%var_245: Tensor[(2, 15, 10), float32]) -> Tensor[(2, 15, 10), float32] {
  %737 = cast(%var_245, dtype="float32") /* ty=Tensor[(2, 15, 10), float32] */;
  sin(%737) /* ty=Tensor[(2, 15, 10), float32] */
}

def @func_3790() -> Tensor[(14, 3, 14), bool] {
  %742 = fn () -> Tensor[(14, 3, 14), bool] {
    %738 = @func_3746() /* ty=(Tensor[(14, 1, 14), float64],) */;
    %739 = %738.0;
    %740 = cast(%739, dtype="bool") /* ty=Tensor[(14, 1, 14), bool] */;
    %741 = cast(meta[relay.Constant][47] /* ty=Tensor[(14, 3, 14), float64] */, dtype="bool") /* ty=Tensor[(14, 3, 14), bool] */;
    greater_equal(%740, %741) /* ty=Tensor[(14, 3, 14), bool] */
  };
  %742() /* ty=Tensor[(14, 3, 14), bool] */
}

def @func_2048(%var_2047: Tensor[(7, 7, 4), int8]) -> (Tensor[(7, 7, 4), int8],) {
  %748 = fn (%var_2041: Tensor[(7, 7, 4), int8]) -> (Tensor[(7, 7, 4), int8],) {
    %743 = cast(%var_2041, dtype="int8") /* ty=Tensor[(7, 7, 4), int8] */;
    %744 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(7, 7, 4), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %745 = cast(meta[relay.Constant][48] /* ty=Tensor[(7, 7, 4), int8] */, dtype="int8") /* ty=Tensor[(7, 7, 4), int8] */;
    %746 = dyn.reshape(%743, %744, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %747 = left_shift(%745, %746) /* ty=Tensor[(7, 7, 4), int8] */;
    (%747,)
  };
  %748(%var_2047) /* ty=(Tensor[(7, 7, 4), int8],) */
}

def @func_5488(%var_5486: Tensor[(9, 4, 3), int8], %var_5487: Tensor[(9, 4, 3), int8]) -> (Tensor[(9, 4, 3), int8], Tensor[(14, 1, 14), float64]) {
  %756 = fn (%var_5442: Tensor[(9, 4, 3), int8], %var_5443: Tensor[(9, 4, 3), int8]) -> (Tensor[(9, 4, 3), int8], Tensor[(14, 1, 14), float64]) {
    %749 = cast(%var_5443, dtype="int8") /* ty=Tensor[(9, 4, 3), int8] */;
    %750 = shape_of(%var_5442, dtype="int32") /* ty=Tensor[(3), int32] */;
    %751 = cast(%var_5442, dtype="int8") /* ty=Tensor[(9, 4, 3), int8] */;
    %752 = dyn.reshape(%749, %750, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %753 = @func_4130() /* ty=(Tensor[(14, 1, 14), float64], Tensor[(14, 3, 14), bool]) */;
    %754 = minimum(%751, %752) /* ty=Tensor[(9, 4, 3), int8] */;
    %755 = %753.0;
    (%754, %755)
  };
  %756(%var_5486, %var_5487) /* ty=(Tensor[(9, 4, 3), int8], Tensor[(14, 1, 14), float64]) */
}

def @func_1590(%var_1588: Tensor[(8, 15, 6), float64]) -> (Tensor[(8, 15, 6), float64], Tensor[(8, 15, 6), float64]) {
  @func_1587(%var_1588) /* ty=(Tensor[(8, 15, 6), float64], Tensor[(8, 15, 6), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen134/build/output.py:1800: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen134/build/output.py", line 1805, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(504) tvmgen_default_fused_right_shift_kernel0(short* __restrict__ T_right_shift, short* __restrict__ placeholder, short* __restrict__ placeholder1) {
  T_right_shift[(((int)threadIdx.x))] = (placeholder[((((int)threadIdx.x) / 12))] >> placeholder1[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

