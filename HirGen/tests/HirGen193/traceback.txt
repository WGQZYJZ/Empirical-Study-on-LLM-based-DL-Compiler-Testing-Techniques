==========mod==========
#[version = "0.0.5"]
def @func_2459(%var_2420: Tensor[(14, 12, 14), float32], %var_2446: Tensor[(5, 7, 9), float32]) -> (Tensor[(14, 12, 14), bool], Tensor[(7, 11, 13), float32], Tensor[(1001), uint32], Tensor[(5, 7, 9), float32]) {
  %0 = @func_1929() /* ty=Tensor[(14, 12, 14), float32] */;
  %1 = cast(%var_2420, dtype="bool") /* ty=Tensor[(14, 12, 14), bool] */;
  %2 = shape_of(%0, dtype="int32") /* ty=Tensor[(3), int32] */;
  %3 = cast(%0, dtype="bool") /* ty=Tensor[(14, 12, 14), bool] */;
  %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(1001), uint32] */, dtype="uint32") /* ty=Tensor[(1001), uint32] */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(1001), uint32] */, dtype="uint32") /* ty=Tensor[(1001), uint32] */;
  %7 = reshape(%5, newshape=[7, 11, 13]) /* ty=Tensor[(7, 11, 13), uint32] */;
  %8 = reshape(%6, newshape=[7, 11, 13]) /* ty=Tensor[(7, 11, 13), uint32] */;
  %9 = @func_2392() /* ty=(Tensor[(5, 7, 9), float32],) */;
  %10 = %9.0;
  %11 = cast(%var_2446, dtype="float32") /* ty=Tensor[(5, 7, 9), float32] */;
  %12 = shape_of(%10, dtype="int32") /* ty=Tensor[(3), int32] */;
  %13 = cast(%10, dtype="float32") /* ty=Tensor[(5, 7, 9), float32] */;
  %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %15 = logical_or(%3, %4) /* ty=Tensor[(14, 12, 14), bool] */;
  %16 = @func_1078(%7, %8) /* ty=Tensor[(7, 11, 13), float32] */;
  %17 = maximum(%13, %14) /* ty=Tensor[(5, 7, 9), float32] */;
  (%15, %16, meta[relay.Constant][0] /* ty=Tensor[(1001), uint32] */, %17)
}

def @func_2938(%var_2922: Tensor[(14, 3, 1), uint16]) -> (Tensor[(14, 3, 14), float64],) {
  %18 = cast(%var_2922, dtype="bool") /* ty=Tensor[(14, 3, 1), bool] */;
  %19 = cast(meta[relay.Constant][1] /* ty=Tensor[(14, 3, 14), uint16] */, dtype="bool") /* ty=Tensor[(14, 3, 14), bool] */;
  %20 = equal(%18, %19) /* ty=Tensor[(14, 3, 14), bool] */;
  %21 = cast(%20, dtype="float64") /* ty=Tensor[(14, 3, 14), float64] */;
  %22 = exp(%21) /* ty=Tensor[(14, 3, 14), float64] */;
  (%22,)
}

def @func_91(%var_79: Tensor[(10, 6, 16), float32], %var_83: Tensor[(1, 72), float32]) -> (Tensor[(10, 6, 16), float32], Tensor[(8, ?, 9), bool], Tensor[(1, 72), float32]) {
  %23 = cast(%var_79, dtype="float32") /* ty=Tensor[(10, 6, 16), float32] */;
  %24 = cast(%var_83, dtype="float32") /* ty=Tensor[(1, 72), float32] */;
  %25 = reshape(%24, newshape=[8, 1, 9]) /* ty=Tensor[(8, 1, 9), float32] */;
  %26 = atan(%23) /* ty=Tensor[(10, 6, 16), float32] */;
  %27 = @func_42(%25) /* ty=Tensor[(8, ?, 9), bool] */;
  (%26, %27, %var_83)
}

def @func_327(%var_279: Tensor[(960), float32], %var_315: Tensor[(10, 9, 2), float64]) -> (Tensor[(960), float32], Tensor[(3, 24), int16], Tensor[(10, 9, 2), bool], Tensor[(8, ?, 9), float32]) {
  %28 = cast(%var_279, dtype="float32") /* ty=Tensor[(960), float32] */;
  %29 = cast(meta[relay.Constant][2] /* ty=Tensor[(3, 24), float32] */, dtype="float32") /* ty=Tensor[(3, 24), float32] */;
  %30 = reshape(%28, newshape=[10, 6, 16]) /* ty=Tensor[(10, 6, 16), float32] */;
  %31 = reshape(%29, newshape=[1, 72]) /* ty=Tensor[(1, 72), float32] */;
  %32 = @func_91(%30, %31) /* ty=(Tensor[(10, 6, 16), float32], Tensor[(8, ?, 9), bool], Tensor[(1, 72), float32]) */;
  %33 = %32.1;
  %34 = cast(%33, dtype="int16") /* ty=Tensor[(8, ?, 9), int16] */;
  %35 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(3, 24), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %36 = cast(meta[relay.Constant][2] /* ty=Tensor[(3, 24), float32] */, dtype="int16") /* ty=Tensor[(3, 24), int16] */;
  %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %38 = cast(meta[relay.Constant][3] /* ty=Tensor[(10, 9, 2), float64] */, dtype="float64") /* ty=Tensor[(10, 9, 2), float64] */;
  %39 = cosh(%38) /* ty=Tensor[(10, 9, 2), float64] */;
  %40 = cast(%var_315, dtype="bool") /* ty=Tensor[(10, 9, 2), bool] */;
  %41 = shape_of(%39, dtype="int32") /* ty=Tensor[(3), int32] */;
  %42 = cast(%39, dtype="bool") /* ty=Tensor[(10, 9, 2), bool] */;
  %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %44 = cast(%33, dtype="float32") /* ty=Tensor[(8, ?, 9), float32] */;
  %45 = right_shift(%36, %37) /* ty=Tensor[(3, 24), int16] */;
  %46 = less(%42, %43) /* ty=Tensor[(10, 9, 2), bool] */;
  %47 = tan(%44) /* ty=Tensor[(8, ?, 9), float32] */;
  (%var_279, %45, %46, %47)
}

def @func_6505() -> (Tensor[(14, 12, 14), int64], Tensor[(5, 7, 9), float64]) {
  %48 = @func_2375() /* ty=(Tensor[(14, 12, 14), int64],) */;
  %49 = @func_6261() /* ty=(Tensor[(14, 12, 14), float64], Tensor[(5, 7, 9), float32]) */;
  %50 = %49.1;
  %51 = cast(%50, dtype="float32") /* ty=Tensor[(5, 7, 9), float32] */;
  %52 = log2(%51) /* ty=Tensor[(5, 7, 9), float32] */;
  %53 = cast(%52, dtype="float64") /* ty=Tensor[(5, 7, 9), float64] */;
  %54 = %48.0;
  %55 = asin(%53) /* ty=Tensor[(5, 7, 9), float64] */;
  (%54, %55)
}

def @func_1612(%var_1605: uint32, %var_1606: Tensor[(600), uint32]) -> (Tensor[(14, 12, 14), float32], Tensor[(15, 4, 10), uint32], uint32, Tensor[(600), uint32]) {
  %56 = cast(%var_1605, dtype="uint32") /* ty=uint32 */;
  %57 = cast(%var_1606, dtype="uint32") /* ty=Tensor[(600), uint32] */;
  %58 = reshape(%56, newshape=[]) /* ty=uint32 */;
  %59 = reshape(%57, newshape=[15, 4, 10]) /* ty=Tensor[(15, 4, 10), uint32] */;
  %60 = @func_1598() /* ty=Tensor[(14, 12, 14), float32] */;
  %61 = @func_634(%58, %59) /* ty=Tensor[(15, 4, 10), uint32] */;
  (%60, %61, %var_1605, %var_1606)
}

def @func_2236(%var_2200: Tensor[(6, 100), uint32], %var_2231: Tensor[(6, 100), uint32]) -> (Tensor[(5, 7, 9), float32], Tensor[(13, 8, 11), float64], Tensor[(1144, 1), uint64], Tensor[(15, 4, 10), uint32], uint32, Tensor[(14, 12, 14), uint8], Tensor[(2352), float32], Tensor[(7, 11, 13), float32], Tensor[(1001), uint32], Tensor[(6, 100), bool]) {
  %62 = cast(meta[relay.Constant][4] /* ty=Tensor[(1144, 1), uint64] */, dtype="uint64") /* ty=Tensor[(1144, 1), uint64] */;
  %63 = reshape(%62, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), uint64] */;
  %64 = @func_950(%63) /* ty=(Tensor[(13, 8, 11), float64],) */;
  %65 = cast(meta[relay.Constant][5] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %66 = cast(%var_2200, dtype="uint32") /* ty=Tensor[(6, 100), uint32] */;
  %67 = reshape(%65, newshape=[]) /* ty=uint32 */;
  %68 = reshape(%66, newshape=[600]) /* ty=Tensor[(600), uint32] */;
  %69 = @func_1612(%67, %68) /* ty=(Tensor[(14, 12, 14), float32], Tensor[(15, 4, 10), uint32], uint32, Tensor[(600), uint32]) */;
  %70 = cast(meta[relay.Constant][6] /* ty=Tensor[(2352), float32] */, dtype="float32") /* ty=Tensor[(2352), float32] */;
  %71 = reshape(%70, newshape=[14, 12, 14]) /* ty=Tensor[(14, 12, 14), float32] */;
  %72 = cast(meta[relay.Constant][7] /* ty=Tensor[(1001), uint32] */, dtype="uint32") /* ty=Tensor[(1001), uint32] */;
  %73 = cast(meta[relay.Constant][7] /* ty=Tensor[(1001), uint32] */, dtype="uint32") /* ty=Tensor[(1001), uint32] */;
  %74 = reshape(%72, newshape=[7, 11, 13]) /* ty=Tensor[(7, 11, 13), uint32] */;
  %75 = reshape(%73, newshape=[7, 11, 13]) /* ty=Tensor[(7, 11, 13), uint32] */;
  %76 = cast(%var_2231, dtype="bool") /* ty=Tensor[(6, 100), bool] */;
  %77 = shape_of(%var_2200, dtype="int32") /* ty=Tensor[(2), int32] */;
  %78 = cast(%var_2200, dtype="bool") /* ty=Tensor[(6, 100), bool] */;
  %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %80 = @func_2127() /* ty=Tensor[(5, 7, 9), float32] */;
  %81 = %64.0;
  %82 = %69.1;
  %83 = @func_1737(%71) /* ty=Tensor[(14, 12, 14), uint8] */;
  %84 = @func_1078(%74, %75) /* ty=Tensor[(7, 11, 13), float32] */;
  %85 = less_equal(%78, %79) /* ty=Tensor[(6, 100), bool] */;
  (%80, %81, meta[relay.Constant][4] /* ty=Tensor[(1144, 1), uint64] */, %82, meta[relay.Constant][5] /* ty=uint32 */, %83, meta[relay.Constant][6] /* ty=Tensor[(2352), float32] */, %84, meta[relay.Constant][7] /* ty=Tensor[(1001), uint32] */, %85)
}

def @func_2127() -> Tensor[(5, 7, 9), float32] {
  @func_1979() /* ty=Tensor[(5, 7, 9), float32] */
}

def @func_5526(%var_5518: Tensor[(14, 9, 7), uint32], %var_5519: Tensor[(14, 9, 7), uint32]) -> (Tensor[(14, 9, 7), bool],) {
  %86 = cast(%var_5519, dtype="bool") /* ty=Tensor[(14, 9, 7), bool] */;
  %87 = shape_of(%var_5518, dtype="int32") /* ty=Tensor[(3), int32] */;
  %88 = cast(%var_5518, dtype="bool") /* ty=Tensor[(14, 9, 7), bool] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %90 = not_equal(%88, %89) /* ty=Tensor[(14, 9, 7), bool] */;
  (%90,)
}

def @func_3764(%var_3718: Tensor[(14, 12, 14), float64], %var_3725: Tensor[(6, 4), uint64], %var_3732: Tensor[(105, 3), float32]) -> (Tensor[(14, 12, 14), float32], Tensor[(8, 3), uint64], Tensor[(6, 4), uint64], Tensor[(14, 12, 14), bool], Tensor[(105, 3), float32], Tensor[(5, 7, 9), float32], Tensor[(7, 11, 13), float32], Tensor[(1001), uint32], Tensor[(4, 2, 4), float64], Tensor[(32), float64]) {
  %91 = @func_3012() /* ty=Tensor[(14, 12, 14), float64] */;
  %92 = cast(%var_3718, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
  %93 = shape_of(%91, dtype="int32") /* ty=Tensor[(3), int32] */;
  %94 = cast(%91, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %96 = cast(%var_3725, dtype="uint64") /* ty=Tensor[(6, 4), uint64] */;
  %97 = cast(%var_3725, dtype="uint64") /* ty=Tensor[(6, 4), uint64] */;
  %98 = reshape(%96, newshape=[8, 3]) /* ty=Tensor[(8, 3), uint64] */;
  %99 = reshape(%97, newshape=[8, 3]) /* ty=Tensor[(8, 3), uint64] */;
  %100 = @func_2116(%98, %99) /* ty=(Tensor[(8, 3), uint64],) */;
  %101 = cast(%91, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
  %102 = cast(%var_3732, dtype="float32") /* ty=Tensor[(105, 3), float32] */;
  %103 = reshape(%101, newshape=[14, 12, 14]) /* ty=Tensor[(14, 12, 14), float32] */;
  %104 = reshape(%102, newshape=[5, 7, 9]) /* ty=Tensor[(5, 7, 9), float32] */;
  %105 = @func_2459(%103, %104) /* ty=(Tensor[(14, 12, 14), bool], Tensor[(7, 11, 13), float32], Tensor[(1001), uint32], Tensor[(5, 7, 9), float32]) */;
  %106 = @func_3428() /* ty=(Tensor[(14, 12, 14), float32], Tensor[(5, 7, 9), float32]) */;
  %107 = cast(meta[relay.Constant][8] /* ty=Tensor[(1001), uint32] */, dtype="uint32") /* ty=Tensor[(1001), uint32] */;
  %108 = cast(meta[relay.Constant][8] /* ty=Tensor[(1001), uint32] */, dtype="uint32") /* ty=Tensor[(1001), uint32] */;
  %109 = reshape(%107, newshape=[7, 11, 13]) /* ty=Tensor[(7, 11, 13), uint32] */;
  %110 = reshape(%108, newshape=[7, 11, 13]) /* ty=Tensor[(7, 11, 13), uint32] */;
  %111 = cast(meta[relay.Constant][9] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %112 = reshape(%111, newshape=[4, 2, 4]) /* ty=Tensor[(4, 2, 4), float64] */;
  %113 = divide(%94, %95) /* ty=Tensor[(14, 12, 14), float32] */;
  %114 = %100.0;
  %115 = %105.0;
  %116 = %106.1;
  %117 = @func_1078(%109, %110) /* ty=Tensor[(7, 11, 13), float32] */;
  %118 = @func_2536(%112) /* ty=Tensor[(4, 2, 4), float64] */;
  (%113, %114, %var_3725, %115, %var_3732, %116, %117, meta[relay.Constant][8] /* ty=Tensor[(1001), uint32] */, %118, meta[relay.Constant][9] /* ty=Tensor[(32), float64] */)
}

def @func_3334(%var_3299: Tensor[(1920), int8], %var_3304: Tensor[(294), float64]) -> (Tensor[(5, 7, 9), float64], Tensor[(8, ?, 9), bool], Tensor[(1920), int8], Tensor[(3, 7, 14), float64], Tensor[(294), float64]) {
  %119 = @func_3078() /* ty=(Tensor[(5, 7, 9), float32],) */;
  %120 = %119.0;
  %121 = cast(%120, dtype="float64") /* ty=Tensor[(5, 7, 9), float64] */;
  %122 = cast(%var_3299, dtype="int8") /* ty=Tensor[(1920), int8] */;
  %123 = reshape(%122, newshape=[15, 8, 16]) /* ty=Tensor[(15, 8, 16), int8] */;
  %124 = @func_718(%123) /* ty=(Tensor[(8, ?, 9), bool], Tensor[(72), float32], Tensor[(15, 8, 16), float32]) */;
  %125 = cast(%var_3304, dtype="float64") /* ty=Tensor[(294), float64] */;
  %126 = reshape(%125, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float64] */;
  %127 = @func_3052(%126) /* ty=(Tensor[(3, 7, 14), float64],) */;
  %128 = tan(%121) /* ty=Tensor[(5, 7, 9), float64] */;
  %129 = %124.0;
  %130 = %127.0;
  (%128, %129, %var_3299, %130, %var_3304)
}

def @func_4961(%var_4935: Tensor[(13, 1, 12), float32], %var_4936: Tensor[(13, 12, 12), float32]) -> (Tensor[(13, 12, 12), float32], Tensor[(100), uint8], Tensor[(5, 10, 2), float32]) {
  %131 = cast(%var_4935, dtype="float32") /* ty=Tensor[(13, 1, 12), float32] */;
  %132 = cast(%var_4936, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %133 = cast(meta[relay.Constant][10] /* ty=Tensor[(100), uint8] */, dtype="uint8") /* ty=Tensor[(100), uint8] */;
  %134 = cast(meta[relay.Constant][10] /* ty=Tensor[(100), uint8] */, dtype="uint8") /* ty=Tensor[(100), uint8] */;
  %135 = reshape(%133, newshape=[5, 10, 2]) /* ty=Tensor[(5, 10, 2), uint8] */;
  %136 = reshape(%134, newshape=[5, 10, 2]) /* ty=Tensor[(5, 10, 2), uint8] */;
  %137 = @func_4528(%135, %136) /* ty=(Tensor[(5, 10, 2), uint8], Tensor[(14, 3, 14), float64], Tensor[(42), uint16], Tensor[(6, 100), bool], Tensor[(600), uint32], Tensor[(5, 7, 9), float32], Tensor[(14, 12, 14), float32]) */;
  %138 = %137.0;
  %139 = cast(%138, dtype="float32") /* ty=Tensor[(5, 10, 2), float32] */;
  %140 = mod(%131, %132) /* ty=Tensor[(13, 12, 12), float32] */;
  %141 = tan(%139) /* ty=Tensor[(5, 10, 2), float32] */;
  (%140, meta[relay.Constant][10] /* ty=Tensor[(100), uint8] */, %141)
}

def @func_4645() -> (Tensor[(14, 12, 14), float32],) {
  %142 = @func_2472() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %143 = %142.0;
  (%143,)
}

def @func_3475(%var_3466: Tensor[(14, 12, 14), float32]) -> (Tensor[(14, 12, 14), bool], Tensor[(5, 7, 9), float32]) {
  %144 = @func_3103() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %145 = %144.0;
  %146 = cast(%var_3466, dtype="bool") /* ty=Tensor[(14, 12, 14), bool] */;
  %147 = shape_of(%145, dtype="int32") /* ty=Tensor[(3), int32] */;
  %148 = cast(%145, dtype="bool") /* ty=Tensor[(14, 12, 14), bool] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %150 = @func_2127() /* ty=Tensor[(5, 7, 9), float32] */;
  %151 = cast(%150, dtype="float32") /* ty=Tensor[(5, 7, 9), float32] */;
  %152 = logical_and(%148, %149) /* ty=Tensor[(14, 12, 14), bool] */;
  %153 = cos(%151) /* ty=Tensor[(5, 7, 9), float32] */;
  (%152, %153)
}

def @func_4930(%var_4915: Tensor[(9, 12, 2), uint32], %var_4916: Tensor[(9, 12, 2), uint32]) -> (Tensor[(9, 12, 2), uint32],) {
  %154 = cast(%var_4916, dtype="uint32") /* ty=Tensor[(9, 12, 2), uint32] */;
  %155 = shape_of(%var_4915, dtype="int32") /* ty=Tensor[(3), int32] */;
  %156 = cast(%var_4915, dtype="uint32") /* ty=Tensor[(9, 12, 2), uint32] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %158 = add(%156, %157) /* ty=Tensor[(9, 12, 2), uint32] */;
  (%158,)
}

def @func_6631() -> (Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32]) {
  %159 = @func_1856() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %160 = %159.0;
  %161 = cast(%160, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
  %162 = reshape(%161, newshape=[14, 12, 14]) /* ty=Tensor[(14, 12, 14), float32] */;
  %163 = @func_4668(%162) /* ty=(Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32]) */;
  %164 = %163.1;
  (%160, %164)
}

def @func_5052() -> (Tensor[(14, 12, 14), float32], Tensor[(5, 7, 9), float64]) {
  %165 = @func_4029() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %166 = %165.0;
  %167 = cast(%166, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
  %168 = erf(%167) /* ty=Tensor[(14, 12, 14), float32] */;
  %169 = @func_3577() /* ty=Tensor[(5, 7, 9), float64] */;
  (%168, %169)
}

def @func_1078(%var_1057: Tensor[(7, 11, 13), uint32], %var_1058: Tensor[(7, 11, 13), uint32]) -> Tensor[(7, 11, 13), float32] {
  %170 = cast(%var_1058, dtype="uint32") /* ty=Tensor[(7, 11, 13), uint32] */;
  %171 = shape_of(%var_1057, dtype="int32") /* ty=Tensor[(3), int32] */;
  %172 = cast(%var_1057, dtype="uint32") /* ty=Tensor[(7, 11, 13), uint32] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %174 = maximum(%172, %173) /* ty=Tensor[(7, 11, 13), uint32] */;
  %175 = cast(%var_1058, dtype="float32") /* ty=Tensor[(7, 11, 13), float32] */;
  %176 = shape_of(%174, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(%174, dtype="float32") /* ty=Tensor[(7, 11, 13), float32] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%177, %178) /* ty=Tensor[(7, 11, 13), float32] */
}

def @func_1737(%var_1730: Tensor[(14, 12, 14), float32]) -> Tensor[(14, 12, 14), uint8] {
  %179 = @func_1598() /* ty=Tensor[(14, 12, 14), float32] */;
  %180 = cast(%var_1730, dtype="uint8") /* ty=Tensor[(14, 12, 14), uint8] */;
  %181 = shape_of(%179, dtype="int32") /* ty=Tensor[(3), int32] */;
  %182 = cast(%179, dtype="uint8") /* ty=Tensor[(14, 12, 14), uint8] */;
  %183 = dyn.reshape(%180, %181, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_or(%182, %183) /* ty=Tensor[(14, 12, 14), uint8] */
}

def @func_1598() -> Tensor[(14, 12, 14), float32] {
  %184 = cast(meta[relay.Constant][11] /* ty=Tensor[(14, 12, 14), float32] */, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
  tan(%184) /* ty=Tensor[(14, 12, 14), float32] */
}

def @func_4778(%var_4737: Tensor[(14, 12, 14), float32], %var_4745: Tensor[(294), float64], %var_4753: Tensor[(84), float64]) -> (Tensor[(14, 12, 14), bool], Tensor[(3, 7, 14), float64], Tensor[(294), float64], Tensor[(14, 12, 14), float32], Tensor[(3, 14, 2), float64], Tensor[(84), float64]) {
  %185 = @func_4323() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %186 = %185.0;
  %187 = cast(%var_4737, dtype="bool") /* ty=Tensor[(14, 12, 14), bool] */;
  %188 = shape_of(%186, dtype="int32") /* ty=Tensor[(3), int32] */;
  %189 = cast(%186, dtype="bool") /* ty=Tensor[(14, 12, 14), bool] */;
  %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %191 = cast(%var_4745, dtype="float64") /* ty=Tensor[(294), float64] */;
  %192 = reshape(%191, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float64] */;
  %193 = @func_3052(%192) /* ty=(Tensor[(3, 7, 14), float64],) */;
  %194 = @func_2741() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %195 = cast(%var_4753, dtype="float64") /* ty=Tensor[(84), float64] */;
  %196 = reshape(%195, newshape=[3, 14, 2]) /* ty=Tensor[(3, 14, 2), float64] */;
  %197 = @func_873(%196) /* ty=(Tensor[(3, 14, 2), float64],) */;
  %198 = less_equal(%189, %190) /* ty=Tensor[(14, 12, 14), bool] */;
  %199 = %193.0;
  %200 = %194.0;
  %201 = %197.0;
  (%198, %199, %var_4745, %200, %201, %var_4753)
}

def @func_5444() -> (Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32]) {
  %202 = @func_1598() /* ty=Tensor[(14, 12, 14), float32] */;
  %203 = cast(%202, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
  %204 = sinh(%203) /* ty=Tensor[(14, 12, 14), float32] */;
  %205 = @func_5392() /* ty=Tensor[(14, 12, 14), float32] */;
  (%204, %205)
}

def @func_6261() -> (Tensor[(14, 12, 14), float64], Tensor[(5, 7, 9), float32]) {
  %206 = @func_5138() /* ty=(Tensor[(5, 7, 9), float32], Tensor[(24), uint16]) */;
  %207 = @func_3012() /* ty=Tensor[(14, 12, 14), float64] */;
  %208 = %206.0;
  (%207, %208)
}

def @func_5848(%var_5808: Tensor[(4, 2, 9), float32]) -> (Tensor[(4, 2, 9), float64], Tensor[(14, 12, 14), float32], Tensor[(4, 2, 9), float64]) {
  %209 = cast(%var_5808, dtype="float32") /* ty=Tensor[(4, 2, 9), float32] */;
  %210 = log(%209) /* ty=Tensor[(4, 2, 9), float32] */;
  %211 = cast(%210, dtype="float64") /* ty=Tensor[(4, 2, 9), float64] */;
  %212 = @func_3103() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %213 = cast(%210, dtype="float64") /* ty=Tensor[(4, 2, 9), float64] */;
  %214 = log2(%211) /* ty=Tensor[(4, 2, 9), float64] */;
  %215 = %212.0;
  %216 = cos(%213) /* ty=Tensor[(4, 2, 9), float64] */;
  (%214, %215, %216)
}

def @func_6351(%var_6318: Tensor[(2352), float32], %var_6342: Tensor[(294), float64]) -> (Tensor[(5, 7, 9), float32], Tensor[(14, 12, 14), float32], Tensor[(2352), float32], Tensor[(3, 2, 4), float32], Tensor[(4, 2, 4), float64], Tensor[(1, 32), float64], Tensor[(294), float64], Tensor[(294), float64], Tensor[(84), float64], Tensor[(14, 12, 14), int64]) {
  %217 = @func_4342() /* ty=(Tensor[(5, 7, 9), float32],) */;
  %218 = cast(%var_6318, dtype="float32") /* ty=Tensor[(2352), float32] */;
  %219 = reshape(%218, newshape=[14, 12, 14]) /* ty=Tensor[(14, 12, 14), float32] */;
  %220 = @func_4668(%219) /* ty=(Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32]) */;
  %221 = @func_4258() /* ty=(Tensor[(14, 12, 14), float32], Tensor[(3, 2, 4), float32], Tensor[(8), uint16], Tensor[(24), uint16]) */;
  %222 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 32), float64] */, dtype="float64") /* ty=Tensor[(1, 32), float64] */;
  %223 = reshape(%222, newshape=[4, 2, 4]) /* ty=Tensor[(4, 2, 4), float64] */;
  %224 = cast(%var_6318, dtype="float32") /* ty=Tensor[(2352), float32] */;
  %225 = cast(%var_6342, dtype="float64") /* ty=Tensor[(294), float64] */;
  %226 = cast(meta[relay.Constant][13] /* ty=Tensor[(84), float64] */, dtype="float64") /* ty=Tensor[(84), float64] */;
  %227 = reshape(%224, newshape=[14, 12, 14]) /* ty=Tensor[(14, 12, 14), float32] */;
  %228 = reshape(%225, newshape=[294]) /* ty=Tensor[(294), float64] */;
  %229 = reshape(%226, newshape=[84]) /* ty=Tensor[(84), float64] */;
  %230 = @func_4778(%227, %228, %229) /* ty=(Tensor[(14, 12, 14), bool], Tensor[(3, 7, 14), float64], Tensor[(294), float64], Tensor[(14, 12, 14), float32], Tensor[(3, 14, 2), float64], Tensor[(84), float64]) */;
  %231 = @func_2375() /* ty=(Tensor[(14, 12, 14), int64],) */;
  %232 = %217.0;
  %233 = %220.0;
  %234 = %221.1;
  %235 = @func_2536(%223) /* ty=Tensor[(4, 2, 4), float64] */;
  %236 = %230.2;
  %237 = %231.0;
  (%232, %233, %var_6318, %234, %235, meta[relay.Constant][12] /* ty=Tensor[(1, 32), float64] */, %236, %var_6342, meta[relay.Constant][13] /* ty=Tensor[(84), float64] */, %237)
}

def @func_2116(%var_2099: Tensor[(8, 3), uint64], %var_2100: Tensor[(8, 3), uint64]) -> (Tensor[(8, 3), uint64],) {
  %238 = cast(%var_2100, dtype="uint64") /* ty=Tensor[(8, 3), uint64] */;
  %239 = shape_of(%var_2099, dtype="int32") /* ty=Tensor[(2), int32] */;
  %240 = cast(%var_2099, dtype="uint64") /* ty=Tensor[(8, 3), uint64] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %242 = minimum(%240, %241) /* ty=Tensor[(8, 3), uint64] */;
  (%242,)
}

def @func_5614(%var_5532: Tensor[(7, 7), float32], %var_5562: Tensor[(1144, 1), uint64]) -> (Tensor[(7, 7), float32], Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32], Tensor[(24), uint64], Tensor[(12, 2), uint64], Tensor[(1144, 1), float32]) {
  %243 = cast(%var_5532, dtype="float32") /* ty=Tensor[(7, 7), float32] */;
  %244 = cast(%var_5562, dtype="uint64") /* ty=Tensor[(1144, 1), uint64] */;
  %245 = reshape(%244, newshape=[1144]) /* ty=Tensor[(1144), uint64] */;
  %246 = @func_3693(%245) /* ty=(Tensor[(14, 12, 14), bool], Tensor[(14, 12, 14), float32], Tensor[(13, 8, 11), float64], Tensor[(1144), uint64], Tensor[(5, 7, 9), float32]) */;
  %247 = @func_4029() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %248 = cast(meta[relay.Constant][14] /* ty=Tensor[(12, 2), uint64] */, dtype="uint64") /* ty=Tensor[(12, 2), uint64] */;
  %249 = %246.1;
  %250 = cast(%249, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
  %251 = reshape(%248, newshape=[24]) /* ty=Tensor[(24), uint64] */;
  %252 = reshape(%250, newshape=[14, 12, 14]) /* ty=Tensor[(14, 12, 14), float32] */;
  %253 = @func_4871(%251, %252) /* ty=(Tensor[(5, 7, 9), float32], Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32], Tensor[(13, 8, 11), float64], Tensor[(24), uint64], Tensor[(14, 12, 14), uint64]) */;
  %254 = cast(%var_5562, dtype="float32") /* ty=Tensor[(1144, 1), float32] */;
  %255 = sin(%243) /* ty=Tensor[(7, 7), float32] */;
  %256 = %247.0;
  %257 = %253.4;
  %258 = rsqrt(%254) /* ty=Tensor[(1144, 1), float32] */;
  (%255, %249, %256, %257, meta[relay.Constant][14] /* ty=Tensor[(12, 2), uint64] */, %258)
}

def @func_3103() -> (Tensor[(14, 12, 14), float32],) {
  %259 = @func_2178() /* ty=(Tensor[(5, 7, 9), float32], Tensor[(14, 12, 14), float32]) */;
  %260 = %259.1;
  (%260,)
}

def @func_5796(%var_5790: Tensor[(72), float32]) -> (Tensor[(14, 12, 14), float32], Tensor[(72), float32], Tensor[(72), float32]) {
  %261 = cast(%var_5790, dtype="float32") /* ty=Tensor[(72), float32] */;
  %262 = reshape(%261, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %263 = @func_5484(%262) /* ty=(Tensor[(72), float32], Tensor[(72), float32], Tensor[(14, 12, 14), bool]) */;
  %264 = @func_5317() /* ty=Tensor[(14, 12, 14), float32] */;
  %265 = %263.1;
  (%264, %265, %var_5790)
}

def @func_5109() -> (Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32]) {
  %266 = @func_3432() /* ty=Tensor[(14, 12, 14), float32] */;
  %267 = cast(%266, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
  %268 = reshape(%267, newshape=[14, 12, 14]) /* ty=Tensor[(14, 12, 14), float32] */;
  %269 = @func_4668(%268) /* ty=(Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32]) */;
  %270 = %269.0;
  (%266, %270)
}

def @func_4427(%var_4407: Tensor[(4, 6, 8), int64], %var_4408: Tensor[(4, 6, 8), int64]) -> (Tensor[(4, 6, 8), bool], Tensor[(4, 6, 8), float32]) {
  %271 = cast(%var_4408, dtype="bool") /* ty=Tensor[(4, 6, 8), bool] */;
  %272 = shape_of(%var_4407, dtype="int32") /* ty=Tensor[(3), int32] */;
  %273 = cast(%var_4407, dtype="bool") /* ty=Tensor[(4, 6, 8), bool] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %275 = cast(%var_4407, dtype="float32") /* ty=Tensor[(4, 6, 8), float32] */;
  %276 = not_equal(%273, %274) /* ty=Tensor[(4, 6, 8), bool] */;
  %277 = sigmoid(%275) /* ty=Tensor[(4, 6, 8), float32] */;
  (%276, %277)
}

def @func_1384(%var_1365: Tensor[(1, 2, 4), uint16], %var_1366: Tensor[(3, 2, 4), uint16]) -> (Tensor[(3, 2, 4), bool], Tensor[(3, 2, 4), float32]) {
  %278 = cast(%var_1365, dtype="uint16") /* ty=Tensor[(1, 2, 4), uint16] */;
  %279 = cast(%var_1366, dtype="uint16") /* ty=Tensor[(3, 2, 4), uint16] */;
  %280 = bitwise_xor(%278, %279) /* ty=Tensor[(3, 2, 4), uint16] */;
  %281 = cast(%280, dtype="float32") /* ty=Tensor[(3, 2, 4), float32] */;
  %282 = rsqrt(%281) /* ty=Tensor[(3, 2, 4), float32] */;
  %283 = cast(%282, dtype="bool") /* ty=Tensor[(3, 2, 4), bool] */;
  %284 = cast(%var_1365, dtype="bool") /* ty=Tensor[(1, 2, 4), bool] */;
  %285 = cast(%280, dtype="float32") /* ty=Tensor[(3, 2, 4), float32] */;
  %286 = less(%283, %284) /* ty=Tensor[(3, 2, 4), bool] */;
  %287 = atan(%285) /* ty=Tensor[(3, 2, 4), float32] */;
  (%286, %287)
}

def @func_3646(%var_3581: Tensor[(6, 7, 16), int64], %var_3582: Tensor[(6, 7, 16), int64], %var_3628: Tensor[(72, 1), float32]) -> (Tensor[(5, 7, 9), float32], Tensor[(6, 7, 16), bool], Tensor[(8, ?, 9), bool], Tensor[(14, 12, 14), uint8], Tensor[(2352), float32], Tensor[(6, 7, 16), bool]) {
  %288 = @func_3078() /* ty=(Tensor[(5, 7, 9), float32],) */;
  %289 = cast(%var_3582, dtype="bool") /* ty=Tensor[(6, 7, 16), bool] */;
  %290 = shape_of(%var_3581, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%var_3581, dtype="bool") /* ty=Tensor[(6, 7, 16), bool] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %293 = greater_equal(%291, %292) /* ty=Tensor[(6, 7, 16), bool] */;
  %294 = cast(%293, dtype="uint64") /* ty=Tensor[(6, 7, 16), uint64] */;
  %295 = shape_of(%var_3582, dtype="int32") /* ty=Tensor[(3), int32] */;
  %296 = cast(%var_3582, dtype="uint64") /* ty=Tensor[(6, 7, 16), uint64] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %298 = bitwise_or(%296, %297) /* ty=Tensor[(6, 7, 16), uint64] */;
  %299 = cast(%298, dtype="bool") /* ty=Tensor[(6, 7, 16), bool] */;
  %300 = shape_of(%var_3581, dtype="int32") /* ty=Tensor[(3), int32] */;
  %301 = cast(%var_3581, dtype="bool") /* ty=Tensor[(6, 7, 16), bool] */;
  %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %303 = cast(%var_3628, dtype="float32") /* ty=Tensor[(72, 1), float32] */;
  %304 = reshape(%303, newshape=[8, 1, 9]) /* ty=Tensor[(8, 1, 9), float32] */;
  %305 = @func_42(%304) /* ty=Tensor[(8, ?, 9), bool] */;
  %306 = cast(%var_3628, dtype="bool") /* ty=Tensor[(72, 1), bool] */;
  %307 = shape_of(%305, dtype="int32") /* ty=Tensor[(3), int32] */;
  %308 = cast(%305, dtype="bool") /* ty=Tensor[(8, ?, 9), bool] */;
  %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %310 = cast(meta[relay.Constant][15] /* ty=Tensor[(2352), float32] */, dtype="float32") /* ty=Tensor[(2352), float32] */;
  %311 = reshape(%310, newshape=[2352]) /* ty=Tensor[(2352), float32] */;
  %312 = @func_3248(%311) /* ty=(Tensor[(13, 8, 11), float64], Tensor[(5, 7, 9), int64], Tensor[(14, 12, 14), uint8], Tensor[(2352), float64]) */;
  %313 = cast(%var_3581, dtype="bool") /* ty=Tensor[(6, 7, 16), bool] */;
  %314 = shape_of(%298, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%298, dtype="bool") /* ty=Tensor[(6, 7, 16), bool] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %317 = %288.0;
  %318 = equal(%301, %302) /* ty=Tensor[(6, 7, 16), bool] */;
  %319 = greater(%308, %309) /* ty=Tensor[(8, ?, 9), bool] */;
  %320 = %312.2;
  %321 = greater(%315, %316) /* ty=Tensor[(6, 7, 16), bool] */;
  (%317, %318, %319, %320, meta[relay.Constant][15] /* ty=Tensor[(2352), float32] */, %321)
}

def @func_2651(%var_2628: Tensor[(8, 1, 6), int32], %var_2629: Tensor[(8, 6, 6), int32], %var_2642: Tensor[(8, 6, 6), float64]) -> (Tensor[(8, 6, 6), bool], Tensor[(8, 6, 6), float32]) {
  %322 = cast(%var_2628, dtype="bool") /* ty=Tensor[(8, 1, 6), bool] */;
  %323 = cast(%var_2629, dtype="bool") /* ty=Tensor[(8, 6, 6), bool] */;
  %324 = cast(%var_2629, dtype="float64") /* ty=Tensor[(8, 6, 6), float64] */;
  %325 = sigmoid(%324) /* ty=Tensor[(8, 6, 6), float64] */;
  %326 = cast(%var_2642, dtype="float32") /* ty=Tensor[(8, 6, 6), float32] */;
  %327 = shape_of(%325, dtype="int32") /* ty=Tensor[(3), int32] */;
  %328 = cast(%325, dtype="float32") /* ty=Tensor[(8, 6, 6), float32] */;
  %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %330 = greater(%322, %323) /* ty=Tensor[(8, 6, 6), bool] */;
  %331 = floor_divide(%328, %329) /* ty=Tensor[(8, 6, 6), float32] */;
  (%330, %331)
}

def @func_4871(%var_4852: Tensor[(24), uint64], %var_4867: Tensor[(14, 12, 14), float32]) -> (Tensor[(5, 7, 9), float32], Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32], Tensor[(13, 8, 11), float64], Tensor[(24), uint64], Tensor[(14, 12, 14), uint64]) {
  %332 = @func_1646() /* ty=Tensor[(14, 12, 14), float32] */;
  %333 = cast(meta[relay.Constant][16] /* ty=Tensor[(14, 12, 14), float32] */, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
  %334 = shape_of(%332, dtype="int32") /* ty=Tensor[(3), int32] */;
  %335 = cast(%332, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
  %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %337 = cast(meta[relay.Constant][17] /* ty=Tensor[(14, 12, 14), float32] */, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
  %338 = shape_of(%332, dtype="int32") /* ty=Tensor[(3), int32] */;
  %339 = cast(%332, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
  %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %341 = cast(%var_4852, dtype="uint64") /* ty=Tensor[(24), uint64] */;
  %342 = cast(meta[relay.Constant][16] /* ty=Tensor[(14, 12, 14), float32] */, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
  %343 = reshape(%341, newshape=[24]) /* ty=Tensor[(24), uint64] */;
  %344 = reshape(%342, newshape=[14, 12, 14]) /* ty=Tensor[(14, 12, 14), float32] */;
  %345 = @func_2713(%343, %344) /* ty=(Tensor[(8, 3), uint64], Tensor[(14, 12, 14), bool], Tensor[(24), float32], Tensor[(13, 8, 11), float64], Tensor[(1144), uint64]) */;
  %346 = cast(%var_4867, dtype="uint64") /* ty=Tensor[(14, 12, 14), uint64] */;
  %347 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(14, 12, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %348 = cast(meta[relay.Constant][17] /* ty=Tensor[(14, 12, 14), float32] */, dtype="uint64") /* ty=Tensor[(14, 12, 14), uint64] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %350 = @func_2948() /* ty=Tensor[(5, 7, 9), float32] */;
  %351 = power(%335, %336) /* ty=Tensor[(14, 12, 14), float32] */;
  %352 = multiply(%339, %340) /* ty=Tensor[(14, 12, 14), float32] */;
  %353 = %345.3;
  %354 = add(%348, %349) /* ty=Tensor[(14, 12, 14), uint64] */;
  (%350, %351, %352, %353, %var_4852, %354)
}

def @func_6686() -> (Tensor[(14, 12, 14), float32], Tensor[(5, 7, 9), float64]) {
  %355 = @func_1856() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %356 = @func_5052() /* ty=(Tensor[(14, 12, 14), float32], Tensor[(5, 7, 9), float64]) */;
  %357 = %355.0;
  %358 = %356.1;
  (%357, %358)
}

def @func_5922(%var_5890: Tensor[(14, 12, 14), float32]) -> (Tensor[(14, 12, 14), int64], Tensor[(14, 12, 14), float64]) {
  %359 = @func_2472() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %360 = %359.0;
  %361 = cast(%var_5890, dtype="int64") /* ty=Tensor[(14, 12, 14), int64] */;
  %362 = shape_of(%360, dtype="int32") /* ty=Tensor[(3), int32] */;
  %363 = cast(%360, dtype="int64") /* ty=Tensor[(14, 12, 14), int64] */;
  %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %365 = cast(%360, dtype="float64") /* ty=Tensor[(14, 12, 14), float64] */;
  %366 = bitwise_xor(%363, %364) /* ty=Tensor[(14, 12, 14), int64] */;
  %367 = asin(%365) /* ty=Tensor[(14, 12, 14), float64] */;
  (%366, %367)
}

def @func_6729() -> Tensor[(14, 12, 14), float32] {
  %368 = @func_5407() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %368.0
}

def @func_2178() -> (Tensor[(5, 7, 9), float32], Tensor[(14, 12, 14), float32]) {
  %369 = @func_2127() /* ty=Tensor[(5, 7, 9), float32] */;
  %370 = @func_1929() /* ty=Tensor[(14, 12, 14), float32] */;
  (%369, %370)
}

def @func_5392() -> Tensor[(14, 12, 14), float32] {
  %371 = @func_5109() /* ty=(Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32]) */;
  %371.0
}

def @func_2845(%var_2836: Tensor[(13, 7, 3), float32]) -> (Tensor[(13, 7, 3), float32],) {
  %372 = cast(%var_2836, dtype="float32") /* ty=Tensor[(13, 7, 3), float32] */;
  %373 = log2(%372) /* ty=Tensor[(13, 7, 3), float32] */;
  (%373,)
}

def @func_5484(%var_5467: Tensor[(72), float32]) -> (Tensor[(72), float32], Tensor[(72), float32], Tensor[(14, 12, 14), bool]) {
  %374 = cast(%var_5467, dtype="float32") /* ty=Tensor[(72), float32] */;
  %375 = reshape(%374, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %376 = @func_4182(%375) /* ty=(Tensor[(14, 12, 14), float32], Tensor[(72), float32], Tensor[(72), float32]) */;
  %377 = @func_3012() /* ty=Tensor[(14, 12, 14), float64] */;
  %378 = cast(%377, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
  %379 = log2(%378) /* ty=Tensor[(14, 12, 14), float32] */;
  %380 = cast(%377, dtype="bool") /* ty=Tensor[(14, 12, 14), bool] */;
  %381 = shape_of(%379, dtype="int32") /* ty=Tensor[(3), int32] */;
  %382 = cast(%379, dtype="bool") /* ty=Tensor[(14, 12, 14), bool] */;
  %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %384 = %376.1;
  %385 = less(%382, %383) /* ty=Tensor[(14, 12, 14), bool] */;
  (%384, %var_5467, %385)
}

def @func_5739() -> Tensor[(5, 7, 9), float32] {
  @func_4710() /* ty=Tensor[(5, 7, 9), float32] */
}

def @func_3432() -> Tensor[(14, 12, 14), float32] {
  @func_1929() /* ty=Tensor[(14, 12, 14), float32] */
}

def @func_5317() -> Tensor[(14, 12, 14), float32] {
  %386 = @func_4817() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %386.0
}

def @func_1979() -> Tensor[(5, 7, 9), float32] {
  %387 = cast(meta[relay.Constant][18] /* ty=Tensor[(5, 7, 9), float32] */, dtype="float32") /* ty=Tensor[(5, 7, 9), float32] */;
  sqrt(%387) /* ty=Tensor[(5, 7, 9), float32] */
}

def @func_6603() -> Tensor[(14, 12, 14), float32] {
  %388 = @func_2472() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %388.0
}

def @func_6220(%var_6129: Tensor[(72), float32], %var_6133: Tensor[(1001), uint32]) -> (Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float64], Tensor[(72), float32], Tensor[(72), float32], Tensor[(144, 2), int32], Tensor[(1001), uint32], Tensor[(48), int32], Tensor[(14, 12, 14), float32], Tensor[(13, 7, 3), float32], Tensor[(273), float32], Tensor[(14, 12, 14), float32], Tensor[(5, 7, 9), float32]) {
  %389 = @func_5407() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %390 = %389.0;
  %391 = cast(%390, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
  %392 = reshape(%391, newshape=[14, 12, 14]) /* ty=Tensor[(14, 12, 14), float32] */;
  %393 = @func_5922(%392) /* ty=(Tensor[(14, 12, 14), int64], Tensor[(14, 12, 14), float64]) */;
  %394 = cast(%var_6129, dtype="float32") /* ty=Tensor[(72), float32] */;
  %395 = reshape(%394, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %396 = @func_4182(%395) /* ty=(Tensor[(14, 12, 14), float32], Tensor[(72), float32], Tensor[(72), float32]) */;
  %397 = cast(%var_6133, dtype="uint32") /* ty=Tensor[(1001), uint32] */;
  %398 = cast(meta[relay.Constant][19] /* ty=Tensor[(48), int32] */, dtype="int32") /* ty=Tensor[(48), int32] */;
  %399 = reshape(%397, newshape=[13, 77]) /* ty=Tensor[(13, 77), uint32] */;
  %400 = reshape(%398, newshape=[48]) /* ty=Tensor[(48), int32] */;
  %401 = @func_3851(%399, %400) /* ty=(Tensor[(14, 12, 14), uint32], Tensor[(7, 11, 13), float32], Tensor[(13, 77), uint32], Tensor[(8, 6, 6), bool], Tensor[(48), int32], Tensor[(144, 2), int32], Tensor[(1144, 1), float32], Tensor[(14, 12, 14), float32]) */;
  %402 = %396.1;
  %403 = cast(%402, dtype="float32") /* ty=Tensor[(72), float32] */;
  %404 = reshape(%403, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %405 = @func_5796(%404) /* ty=(Tensor[(14, 12, 14), float32], Tensor[(72), float32], Tensor[(72), float32]) */;
  %406 = cast(meta[relay.Constant][20] /* ty=Tensor[(273), float32] */, dtype="float32") /* ty=Tensor[(273), float32] */;
  %407 = reshape(%406, newshape=[13, 7, 3]) /* ty=Tensor[(13, 7, 3), float32] */;
  %408 = @func_2845(%407) /* ty=(Tensor[(13, 7, 3), float32],) */;
  %409 = %393.1;
  %410 = %401.5;
  %411 = %405.0;
  %412 = %408.0;
  %413 = @func_5290() /* ty=Tensor[(14, 12, 14), float32] */;
  %414 = @func_2054() /* ty=Tensor[(5, 7, 9), float32] */;
  (%390, %409, %402, %var_6129, %410, %var_6133, meta[relay.Constant][19] /* ty=Tensor[(48), int32] */, %411, %412, meta[relay.Constant][20] /* ty=Tensor[(273), float32] */, %413, %414)
}

def @func_2948() -> Tensor[(5, 7, 9), float32] {
  @func_1979() /* ty=Tensor[(5, 7, 9), float32] */
}

def @func_42(%var_17: Tensor[(8, 1, 9), float32]) -> Tensor[(8, ?, 9), bool] {
  %415 = cast(%var_17, dtype="float32") /* ty=Tensor[(8, 1, 9), float32] */;
  %416 = log(%415) /* ty=Tensor[(8, 1, 9), float32] */;
  %417 = cast(%var_17, dtype="bool") /* ty=Tensor[(8, 1, 9), bool] */;
  %418 = shape_of(%416, dtype="int32") /* ty=Tensor[(3), int32] */;
  %419 = cast(%416, dtype="bool") /* ty=Tensor[(8, 1, 9), bool] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%419, %420) /* ty=Tensor[(8, ?, 9), bool] */
}

def @func_2375() -> (Tensor[(14, 12, 14), int64],) {
  %421 = @func_2178() /* ty=(Tensor[(5, 7, 9), float32], Tensor[(14, 12, 14), float32]) */;
  %422 = %421.1;
  %423 = cast(meta[relay.Constant][21] /* ty=Tensor[(14, 12, 14), float32] */, dtype="int64") /* ty=Tensor[(14, 12, 14), int64] */;
  %424 = shape_of(%422, dtype="int32") /* ty=Tensor[(3), int32] */;
  %425 = cast(%422, dtype="int64") /* ty=Tensor[(14, 12, 14), int64] */;
  %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %427 = right_shift(%425, %426) /* ty=Tensor[(14, 12, 14), int64] */;
  (%427,)
}

def @func_2536(%var_2527: Tensor[(4, 2, 4), float64]) -> Tensor[(4, 2, 4), float64] {
  %428 = cast(%var_2527, dtype="float64") /* ty=Tensor[(4, 2, 4), float64] */;
  %429 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(4, 2, 4), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %430 = cast(meta[relay.Constant][22] /* ty=Tensor[(4, 2, 4), float64] */, dtype="float64") /* ty=Tensor[(4, 2, 4), float64] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %432 = divide(%430, %431) /* ty=Tensor[(4, 2, 4), float64] */;
  %433 = cast(%432, dtype="float64") /* ty=Tensor[(4, 2, 4), float64] */;
  log10(%433) /* ty=Tensor[(4, 2, 4), float64] */
}

def @func_5713() -> (Tensor[(5, 7, 9), float32],) {
  %434 = @func_3159() /* ty=(Tensor[(5, 7, 9), float32], Tensor[(13, 8, 11), float64], Tensor[(1144, 1), float32]) */;
  %435 = %434.0;
  (%435,)
}

def @func_5290() -> Tensor[(14, 12, 14), float32] {
  %436 = @func_2741() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %436.0
}

def @func_5366(%var_5354: Tensor[(2, 10, 14), uint64], %var_5355: Tensor[(2, 10, 14), uint64]) -> (Tensor[(2, 10, 14), uint64],) {
  %437 = cast(%var_5355, dtype="uint64") /* ty=Tensor[(2, 10, 14), uint64] */;
  %438 = shape_of(%var_5354, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%var_5354, dtype="uint64") /* ty=Tensor[(2, 10, 14), uint64] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %441 = add(%439, %440) /* ty=Tensor[(2, 10, 14), uint64] */;
  (%441,)
}

def @func_5138() -> (Tensor[(5, 7, 9), float32], Tensor[(24), uint16]) {
  %442 = @func_4258() /* ty=(Tensor[(14, 12, 14), float32], Tensor[(3, 2, 4), float32], Tensor[(8), uint16], Tensor[(24), uint16]) */;
  %443 = @func_2127() /* ty=Tensor[(5, 7, 9), float32] */;
  %444 = %442.3;
  (%443, %444)
}

def @func_634(%var_617: uint32, %var_618: Tensor[(15, 4, 10), uint32]) -> Tensor[(15, 4, 10), uint32] {
  %445 = cast(%var_617, dtype="uint32") /* ty=uint32 */;
  %446 = cast(%var_618, dtype="uint32") /* ty=Tensor[(15, 4, 10), uint32] */;
  add(%445, %446) /* ty=Tensor[(15, 4, 10), uint32] */
}

def @func_2054() -> Tensor[(5, 7, 9), float32] {
  @func_1979() /* ty=Tensor[(5, 7, 9), float32] */
}

def @func_4374(%var_4364: Tensor[(5, 7, 9), float32]) -> Tensor[(5, 7, 9), bool] {
  %447 = @func_3078() /* ty=(Tensor[(5, 7, 9), float32],) */;
  %448 = %447.0;
  %449 = cast(%var_4364, dtype="bool") /* ty=Tensor[(5, 7, 9), bool] */;
  %450 = shape_of(%448, dtype="int32") /* ty=Tensor[(3), int32] */;
  %451 = cast(%448, dtype="bool") /* ty=Tensor[(5, 7, 9), bool] */;
  %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%451, %452) /* ty=Tensor[(5, 7, 9), bool] */
}

def @func_3078() -> (Tensor[(5, 7, 9), float32],) {
  %453 = @func_2178() /* ty=(Tensor[(5, 7, 9), float32], Tensor[(14, 12, 14), float32]) */;
  %454 = %453.0;
  (%454,)
}

def @func_6667() -> (Tensor[(14, 12, 14), float64], Tensor[(14, 12, 14), float32]) {
  %455 = @func_4258() /* ty=(Tensor[(14, 12, 14), float32], Tensor[(3, 2, 4), float32], Tensor[(8), uint16], Tensor[(24), uint16]) */;
  %456 = %455.0;
  %457 = cast(%456, dtype="float64") /* ty=Tensor[(14, 12, 14), float64] */;
  %458 = cast(%456, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
  %459 = acosh(%457) /* ty=Tensor[(14, 12, 14), float64] */;
  %460 = log(%458) /* ty=Tensor[(14, 12, 14), float32] */;
  (%459, %460)
}

def @func_1905(%var_1894: Tensor[(6, 3, 6), uint32], %var_1895: Tensor[(6, 3, 6), uint32], %var_1900: uint32) -> (Tensor[(6, 3, 6), uint32], Tensor[(15, 4, 10), uint32], uint32, Tensor[(300, 2), uint32]) {
  %461 = cast(%var_1895, dtype="uint32") /* ty=Tensor[(6, 3, 6), uint32] */;
  %462 = shape_of(%var_1894, dtype="int32") /* ty=Tensor[(3), int32] */;
  %463 = cast(%var_1894, dtype="uint32") /* ty=Tensor[(6, 3, 6), uint32] */;
  %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %465 = cast(%var_1900, dtype="uint32") /* ty=uint32 */;
  %466 = cast(meta[relay.Constant][23] /* ty=Tensor[(300, 2), uint32] */, dtype="uint32") /* ty=Tensor[(300, 2), uint32] */;
  %467 = reshape(%465, newshape=[]) /* ty=uint32 */;
  %468 = reshape(%466, newshape=[15, 4, 10]) /* ty=Tensor[(15, 4, 10), uint32] */;
  %469 = right_shift(%463, %464) /* ty=Tensor[(6, 3, 6), uint32] */;
  %470 = @func_634(%467, %468) /* ty=Tensor[(15, 4, 10), uint32] */;
  (%469, %470, %var_1900, meta[relay.Constant][23] /* ty=Tensor[(300, 2), uint32] */)
}

def @func_1646() -> Tensor[(14, 12, 14), float32] {
  @func_1598() /* ty=Tensor[(14, 12, 14), float32] */
}

def @func_2798() -> (Tensor[(5, 7, 9), float32],) {
  %471 = @func_1979() /* ty=Tensor[(5, 7, 9), float32] */;
  (%471,)
}

def @func_1929() -> Tensor[(14, 12, 14), float32] {
  @func_1646() /* ty=Tensor[(14, 12, 14), float32] */
}

def @func_2600(%var_2556: Tensor[(5, 7, 9), float32], %var_2574: Tensor[(1920), int8]) -> (Tensor[(5, 7, 9), int16], Tensor[(5, 7, 9), float32], Tensor[(5, 7, 9), float32], Tensor[(5, 7, 9), float32], Tensor[(15, 8, 16), float32], Tensor[(1920), int8], Tensor[(14, 12, 14), float32]) {
  %472 = @func_2127() /* ty=Tensor[(5, 7, 9), float32] */;
  %473 = cast(%var_2556, dtype="int16") /* ty=Tensor[(5, 7, 9), int16] */;
  %474 = shape_of(%472, dtype="int32") /* ty=Tensor[(3), int32] */;
  %475 = cast(%472, dtype="int16") /* ty=Tensor[(5, 7, 9), int16] */;
  %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %477 = cast(%var_2556, dtype="float32") /* ty=Tensor[(5, 7, 9), float32] */;
  %478 = @func_2392() /* ty=(Tensor[(5, 7, 9), float32],) */;
  %479 = cast(%var_2574, dtype="int8") /* ty=Tensor[(1920), int8] */;
  %480 = reshape(%479, newshape=[15, 8, 16]) /* ty=Tensor[(15, 8, 16), int8] */;
  %481 = @func_718(%480) /* ty=(Tensor[(8, ?, 9), bool], Tensor[(72), float32], Tensor[(15, 8, 16), float32]) */;
  %482 = @func_2178() /* ty=(Tensor[(5, 7, 9), float32], Tensor[(14, 12, 14), float32]) */;
  %483 = add(%475, %476) /* ty=Tensor[(5, 7, 9), int16] */;
  %484 = cosh(%477) /* ty=Tensor[(5, 7, 9), float32] */;
  %485 = %478.0;
  %486 = @func_2054() /* ty=Tensor[(5, 7, 9), float32] */;
  %487 = %481.2;
  %488 = %482.1;
  (%483, %484, %485, %486, %487, %var_2574, %488)
}

def @func_5407() -> (Tensor[(14, 12, 14), float32],) {
  %489 = @func_5109() /* ty=(Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32]) */;
  %490 = %489.1;
  (%490,)
}

def @func_5179(%var_5167: Tensor[(5, 14, 8), float32]) -> (Tensor[(5, 14, 8), float32],) {
  %491 = cast(%var_5167, dtype="float32") /* ty=Tensor[(5, 14, 8), float32] */;
  %492 = erf(%491) /* ty=Tensor[(5, 14, 8), float32] */;
  (%492,)
}

def @func_2713(%var_2685: Tensor[(24), uint64], %var_2693: Tensor[(14, 12, 14), float32]) -> (Tensor[(8, 3), uint64], Tensor[(14, 12, 14), bool], Tensor[(24), float32], Tensor[(13, 8, 11), float64], Tensor[(1144), uint64]) {
  %493 = cast(%var_2685, dtype="uint64") /* ty=Tensor[(24), uint64] */;
  %494 = cast(%var_2685, dtype="uint64") /* ty=Tensor[(24), uint64] */;
  %495 = reshape(%493, newshape=[8, 3]) /* ty=Tensor[(8, 3), uint64] */;
  %496 = reshape(%494, newshape=[8, 3]) /* ty=Tensor[(8, 3), uint64] */;
  %497 = @func_2116(%495, %496) /* ty=(Tensor[(8, 3), uint64],) */;
  %498 = @func_1598() /* ty=Tensor[(14, 12, 14), float32] */;
  %499 = cast(%var_2693, dtype="bool") /* ty=Tensor[(14, 12, 14), bool] */;
  %500 = shape_of(%498, dtype="int32") /* ty=Tensor[(3), int32] */;
  %501 = cast(%498, dtype="bool") /* ty=Tensor[(14, 12, 14), bool] */;
  %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %503 = cast(%var_2685, dtype="float32") /* ty=Tensor[(24), float32] */;
  %504 = cast(meta[relay.Constant][24] /* ty=Tensor[(1144), uint64] */, dtype="uint64") /* ty=Tensor[(1144), uint64] */;
  %505 = reshape(%504, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), uint64] */;
  %506 = @func_950(%505) /* ty=(Tensor[(13, 8, 11), float64],) */;
  %507 = %497.0;
  %508 = greater_equal(%501, %502) /* ty=Tensor[(14, 12, 14), bool] */;
  %509 = acosh(%503) /* ty=Tensor[(24), float32] */;
  %510 = %506.0;
  (%507, %508, %509, %510, meta[relay.Constant][24] /* ty=Tensor[(1144), uint64] */)
}

def @func_950(%var_914: Tensor[(13, 8, 11), uint64]) -> (Tensor[(13, 8, 11), float64],) {
  %511 = cast(%var_914, dtype="uint64") /* ty=Tensor[(13, 8, 11), uint64] */;
  %512 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(13, 8, 11), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %513 = cast(meta[relay.Constant][25] /* ty=Tensor[(13, 8, 11), uint64] */, dtype="uint64") /* ty=Tensor[(13, 8, 11), uint64] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %515 = add(%513, %514) /* ty=Tensor[(13, 8, 11), uint64] */;
  %516 = cast(%515, dtype="float64") /* ty=Tensor[(13, 8, 11), float64] */;
  %517 = log(%516) /* ty=Tensor[(13, 8, 11), float64] */;
  %518 = cast(%517, dtype="float64") /* ty=Tensor[(13, 8, 11), float64] */;
  %519 = cos(%518) /* ty=Tensor[(13, 8, 11), float64] */;
  %520 = cast(%519, dtype="float64") /* ty=Tensor[(13, 8, 11), float64] */;
  %521 = acosh(%520) /* ty=Tensor[(13, 8, 11), float64] */;
  (%521,)
}

def @func_4710() -> Tensor[(5, 7, 9), float32] {
  %522 = @func_2798() /* ty=(Tensor[(5, 7, 9), float32],) */;
  %522.0
}

def @func_718(%var_696: Tensor[(15, 8, 16), int8]) -> (Tensor[(8, ?, 9), bool], Tensor[(72), float32], Tensor[(15, 8, 16), float32]) {
  %523 = cast(meta[relay.Constant][26] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %524 = reshape(%523, newshape=[8, 1, 9]) /* ty=Tensor[(8, 1, 9), float32] */;
  %525 = cast(meta[relay.Constant][27] /* ty=Tensor[(15, 8, 16), int8] */, dtype="int8") /* ty=Tensor[(15, 8, 16), int8] */;
  %526 = shape_of(%var_696, dtype="int32") /* ty=Tensor[(3), int32] */;
  %527 = cast(%var_696, dtype="int8") /* ty=Tensor[(15, 8, 16), int8] */;
  %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %529 = right_shift(%527, %528) /* ty=Tensor[(15, 8, 16), int8] */;
  %530 = cast(%529, dtype="float32") /* ty=Tensor[(15, 8, 16), float32] */;
  %531 = @func_42(%524) /* ty=Tensor[(8, ?, 9), bool] */;
  %532 = exp(%530) /* ty=Tensor[(15, 8, 16), float32] */;
  (%531, meta[relay.Constant][26] /* ty=Tensor[(72), float32] */, %532)
}

def @func_3428() -> (Tensor[(14, 12, 14), float32], Tensor[(5, 7, 9), float32]) {
  %533 = @func_1929() /* ty=Tensor[(14, 12, 14), float32] */;
  %534 = @func_2054() /* ty=Tensor[(5, 7, 9), float32] */;
  (%533, %534)
}

def @func_3577() -> Tensor[(5, 7, 9), float64] {
  %535 = @func_2054() /* ty=Tensor[(5, 7, 9), float32] */;
  %536 = cast(%535, dtype="float64") /* ty=Tensor[(5, 7, 9), float64] */;
  atan(%536) /* ty=Tensor[(5, 7, 9), float64] */
}

def @func_3248(%var_3236: Tensor[(2352), float32]) -> (Tensor[(13, 8, 11), float64], Tensor[(5, 7, 9), int64], Tensor[(14, 12, 14), uint8], Tensor[(2352), float64]) {
  %537 = @func_3159() /* ty=(Tensor[(5, 7, 9), float32], Tensor[(13, 8, 11), float64], Tensor[(1144, 1), float32]) */;
  %538 = @func_2948() /* ty=Tensor[(5, 7, 9), float32] */;
  %539 = @func_2127() /* ty=Tensor[(5, 7, 9), float32] */;
  %540 = cast(%539, dtype="int64") /* ty=Tensor[(5, 7, 9), int64] */;
  %541 = shape_of(%538, dtype="int32") /* ty=Tensor[(3), int32] */;
  %542 = cast(%538, dtype="int64") /* ty=Tensor[(5, 7, 9), int64] */;
  %543 = dyn.reshape(%540, %541, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %544 = cast(%var_3236, dtype="float32") /* ty=Tensor[(2352), float32] */;
  %545 = reshape(%544, newshape=[14, 12, 14]) /* ty=Tensor[(14, 12, 14), float32] */;
  %546 = cast(%var_3236, dtype="float64") /* ty=Tensor[(2352), float64] */;
  %547 = %537.1;
  %548 = left_shift(%542, %543) /* ty=Tensor[(5, 7, 9), int64] */;
  %549 = @func_1737(%545) /* ty=Tensor[(14, 12, 14), uint8] */;
  %550 = atan(%546) /* ty=Tensor[(2352), float64] */;
  (%547, %548, %549, %550)
}

def @main(%var_6799: Tensor[(1144), uint64]) -> (Tensor[(14, 12, 14), float32], Tensor[(1144), uint64], Tensor[(14, 12, 14), float32], Tensor[(13, 8, 11), float64]) {
  %551 = @func_4323() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %552 = cast(%var_6799, dtype="uint64") /* ty=Tensor[(1144), uint64] */;
  %553 = reshape(%552, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), uint64] */;
  %554 = @func_950(%553) /* ty=(Tensor[(13, 8, 11), float64],) */;
  %555 = %554.0;
  %556 = cast(%555, dtype="float64") /* ty=Tensor[(13, 8, 11), float64] */;
  %557 = @func_1598() /* ty=Tensor[(14, 12, 14), float32] */;
  %558 = %551.0;
  %559 = acos(%556) /* ty=Tensor[(13, 8, 11), float64] */;
  (%557, %var_6799, %558, %559)
}

def @func_873(%var_867: Tensor[(3, 14, 2), float64]) -> (Tensor[(3, 14, 2), float64],) {
  %560 = cast(%var_867, dtype="float64") /* ty=Tensor[(3, 14, 2), float64] */;
  %561 = atan(%560) /* ty=Tensor[(3, 14, 2), float64] */;
  (%561,)
}

def @func_2392() -> (Tensor[(5, 7, 9), float32],) {
  %562 = @func_2054() /* ty=Tensor[(5, 7, 9), float32] */;
  (%562,)
}

def @func_4323() -> (Tensor[(14, 12, 14), float32],) {
  %563 = @func_2472() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %564 = %563.0;
  (%564,)
}

def @func_2362(%var_2345: Tensor[(7, 11, 12), int16], %var_2346: Tensor[(7, 11, 12), int16]) -> (Tensor[(7, 11, 12), int16],) {
  %565 = cast(%var_2346, dtype="int16") /* ty=Tensor[(7, 11, 12), int16] */;
  %566 = shape_of(%var_2345, dtype="int32") /* ty=Tensor[(3), int32] */;
  %567 = cast(%var_2345, dtype="int16") /* ty=Tensor[(7, 11, 12), int16] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %569 = bitwise_and(%567, %568) /* ty=Tensor[(7, 11, 12), int16] */;
  (%569,)
}

def @func_3012() -> Tensor[(14, 12, 14), float64] {
  %570 = @func_2375() /* ty=(Tensor[(14, 12, 14), int64],) */;
  %571 = %570.0;
  %572 = cast(%571, dtype="float64") /* ty=Tensor[(14, 12, 14), float64] */;
  sqrt(%572) /* ty=Tensor[(14, 12, 14), float64] */
}

def @func_3851(%var_3827: Tensor[(13, 77), uint32], %var_3840: Tensor[(48), int32]) -> (Tensor[(14, 12, 14), uint32], Tensor[(7, 11, 13), float32], Tensor[(13, 77), uint32], Tensor[(8, 6, 6), bool], Tensor[(48), int32], Tensor[(144, 2), int32], Tensor[(1144, 1), float32], Tensor[(14, 12, 14), float32]) {
  %573 = @func_1856() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %574 = %573.0;
  %575 = @func_2472() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %576 = %575.0;
  %577 = cast(%576, dtype="uint32") /* ty=Tensor[(14, 12, 14), uint32] */;
  %578 = shape_of(%574, dtype="int32") /* ty=Tensor[(3), int32] */;
  %579 = cast(%574, dtype="uint32") /* ty=Tensor[(14, 12, 14), uint32] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %581 = cast(%var_3827, dtype="uint32") /* ty=Tensor[(13, 77), uint32] */;
  %582 = cast(%var_3827, dtype="uint32") /* ty=Tensor[(13, 77), uint32] */;
  %583 = reshape(%581, newshape=[7, 11, 13]) /* ty=Tensor[(7, 11, 13), uint32] */;
  %584 = reshape(%582, newshape=[7, 11, 13]) /* ty=Tensor[(7, 11, 13), uint32] */;
  %585 = cast(%var_3840, dtype="int32") /* ty=Tensor[(48), int32] */;
  %586 = cast(meta[relay.Constant][28] /* ty=Tensor[(144, 2), int32] */, dtype="int32") /* ty=Tensor[(144, 2), int32] */;
  %587 = cast(meta[relay.Constant][28] /* ty=Tensor[(144, 2), int32] */, dtype="float64") /* ty=Tensor[(144, 2), float64] */;
  %588 = reshape(%585, newshape=[8, 1, 6]) /* ty=Tensor[(8, 1, 6), int32] */;
  %589 = reshape(%586, newshape=[8, 6, 6]) /* ty=Tensor[(8, 6, 6), int32] */;
  %590 = reshape(%587, newshape=[8, 6, 6]) /* ty=Tensor[(8, 6, 6), float64] */;
  %591 = @func_2651(%588, %589, %590) /* ty=(Tensor[(8, 6, 6), bool], Tensor[(8, 6, 6), float32]) */;
  %592 = @func_3159() /* ty=(Tensor[(5, 7, 9), float32], Tensor[(13, 8, 11), float64], Tensor[(1144, 1), float32]) */;
  %593 = left_shift(%579, %580) /* ty=Tensor[(14, 12, 14), uint32] */;
  %594 = @func_1078(%583, %584) /* ty=Tensor[(7, 11, 13), float32] */;
  %595 = %591.0;
  %596 = %592.2;
  %597 = @func_3432() /* ty=Tensor[(14, 12, 14), float32] */;
  (%593, %594, %var_3827, %595, %var_3840, meta[relay.Constant][28] /* ty=Tensor[(144, 2), int32] */, %596, %597)
}

def @func_4528(%var_4484: Tensor[(5, 10, 2), uint8], %var_4485: Tensor[(5, 10, 2), uint8]) -> (Tensor[(5, 10, 2), uint8], Tensor[(14, 3, 14), float64], Tensor[(42), uint16], Tensor[(6, 100), bool], Tensor[(600), uint32], Tensor[(5, 7, 9), float32], Tensor[(14, 12, 14), float32]) {
  %598 = cast(%var_4485, dtype="uint8") /* ty=Tensor[(5, 10, 2), uint8] */;
  %599 = shape_of(%var_4484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %600 = cast(%var_4484, dtype="uint8") /* ty=Tensor[(5, 10, 2), uint8] */;
  %601 = dyn.reshape(%598, %599, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %602 = cast(meta[relay.Constant][29] /* ty=Tensor[(42), uint16] */, dtype="uint16") /* ty=Tensor[(42), uint16] */;
  %603 = reshape(%602, newshape=[14, 3, 1]) /* ty=Tensor[(14, 3, 1), uint16] */;
  %604 = @func_2938(%603) /* ty=(Tensor[(14, 3, 14), float64],) */;
  %605 = cast(meta[relay.Constant][30] /* ty=Tensor[(600), uint32] */, dtype="uint32") /* ty=Tensor[(600), uint32] */;
  %606 = cast(meta[relay.Constant][30] /* ty=Tensor[(600), uint32] */, dtype="uint32") /* ty=Tensor[(600), uint32] */;
  %607 = reshape(%605, newshape=[6, 100]) /* ty=Tensor[(6, 100), uint32] */;
  %608 = reshape(%606, newshape=[6, 100]) /* ty=Tensor[(6, 100), uint32] */;
  %609 = @func_2236(%607, %608) /* ty=(Tensor[(5, 7, 9), float32], Tensor[(13, 8, 11), float64], Tensor[(1144, 1), uint64], Tensor[(15, 4, 10), uint32], uint32, Tensor[(14, 12, 14), uint8], Tensor[(2352), float32], Tensor[(7, 11, 13), float32], Tensor[(1001), uint32], Tensor[(6, 100), bool]) */;
  %610 = @func_2178() /* ty=(Tensor[(5, 7, 9), float32], Tensor[(14, 12, 14), float32]) */;
  %611 = @func_4029() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %612 = logical_xor(%600, %601) /* ty=Tensor[(5, 10, 2), uint8] */;
  %613 = %604.0;
  %614 = %609.9;
  %615 = %610.0;
  %616 = %611.0;
  (%612, %613, meta[relay.Constant][29] /* ty=Tensor[(42), uint16] */, %614, meta[relay.Constant][30] /* ty=Tensor[(600), uint32] */, %615, %616)
}

def @func_4258() -> (Tensor[(14, 12, 14), float32], Tensor[(3, 2, 4), float32], Tensor[(8), uint16], Tensor[(24), uint16]) {
  %617 = cast(meta[relay.Constant][31] /* ty=Tensor[(8), uint16] */, dtype="uint16") /* ty=Tensor[(8), uint16] */;
  %618 = cast(meta[relay.Constant][32] /* ty=Tensor[(24), uint16] */, dtype="uint16") /* ty=Tensor[(24), uint16] */;
  %619 = reshape(%617, newshape=[1, 2, 4]) /* ty=Tensor[(1, 2, 4), uint16] */;
  %620 = reshape(%618, newshape=[3, 2, 4]) /* ty=Tensor[(3, 2, 4), uint16] */;
  %621 = @func_1384(%619, %620) /* ty=(Tensor[(3, 2, 4), bool], Tensor[(3, 2, 4), float32]) */;
  %622 = @func_1598() /* ty=Tensor[(14, 12, 14), float32] */;
  %623 = %621.1;
  (%622, %623, meta[relay.Constant][31] /* ty=Tensor[(8), uint16] */, meta[relay.Constant][32] /* ty=Tensor[(24), uint16] */)
}

def @func_1856() -> (Tensor[(14, 12, 14), float32],) {
  %624 = @func_1598() /* ty=Tensor[(14, 12, 14), float32] */;
  (%624,)
}

def @func_3947(%var_3933: Tensor[(72), float32]) -> (Tensor[(6, 7, 16), bool], Tensor[(672), int64], Tensor[(72), float32], Tensor[(14, 12, 14), float32]) {
  %625 = cast(meta[relay.Constant][33] /* ty=Tensor[(672), int64] */, dtype="int64") /* ty=Tensor[(672), int64] */;
  %626 = cast(meta[relay.Constant][33] /* ty=Tensor[(672), int64] */, dtype="int64") /* ty=Tensor[(672), int64] */;
  %627 = cast(%var_3933, dtype="float32") /* ty=Tensor[(72), float32] */;
  %628 = reshape(%625, newshape=[6, 7, 16]) /* ty=Tensor[(6, 7, 16), int64] */;
  %629 = reshape(%626, newshape=[6, 7, 16]) /* ty=Tensor[(6, 7, 16), int64] */;
  %630 = reshape(%627, newshape=[72, 1]) /* ty=Tensor[(72, 1), float32] */;
  %631 = @func_3646(%628, %629, %630) /* ty=(Tensor[(5, 7, 9), float32], Tensor[(6, 7, 16), bool], Tensor[(8, ?, 9), bool], Tensor[(14, 12, 14), uint8], Tensor[(2352), float32], Tensor[(6, 7, 16), bool]) */;
  %632 = @func_1598() /* ty=Tensor[(14, 12, 14), float32] */;
  %633 = cast(%632, dtype="float64") /* ty=Tensor[(14, 12, 14), float64] */;
  %634 = rsqrt(%633) /* ty=Tensor[(14, 12, 14), float64] */;
  %635 = cast(%634, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
  %636 = %631.1;
  %637 = acos(%635) /* ty=Tensor[(14, 12, 14), float32] */;
  (%636, meta[relay.Constant][33] /* ty=Tensor[(672), int64] */, %var_3933, %637)
}

def @func_2741() -> (Tensor[(14, 12, 14), float32],) {
  %638 = @func_1929() /* ty=Tensor[(14, 12, 14), float32] */;
  (%638,)
}

def @func_3159() -> (Tensor[(5, 7, 9), float32], Tensor[(13, 8, 11), float64], Tensor[(1144, 1), float32]) {
  %639 = @func_3078() /* ty=(Tensor[(5, 7, 9), float32],) */;
  %640 = cast(meta[relay.Constant][34] /* ty=Tensor[(1144, 1), uint64] */, dtype="uint64") /* ty=Tensor[(1144, 1), uint64] */;
  %641 = reshape(%640, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), uint64] */;
  %642 = @func_950(%641) /* ty=(Tensor[(13, 8, 11), float64],) */;
  %643 = cast(meta[relay.Constant][34] /* ty=Tensor[(1144, 1), uint64] */, dtype="float32") /* ty=Tensor[(1144, 1), float32] */;
  %644 = %639.0;
  %645 = %642.0;
  %646 = log2(%643) /* ty=Tensor[(1144, 1), float32] */;
  (%644, %645, %646)
}

def @func_3879(%var_3873: Tensor[(14, 5, 8), float32]) -> Tensor[(14, 5, 8), float32] {
  %647 = cast(%var_3873, dtype="float32") /* ty=Tensor[(14, 5, 8), float32] */;
  %648 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(14, 5, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %649 = cast(meta[relay.Constant][35] /* ty=Tensor[(14, 5, 8), float32] */, dtype="float32") /* ty=Tensor[(14, 5, 8), float32] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%649, %650) /* ty=Tensor[(14, 5, 8), float32] */
}

def @func_2472() -> (Tensor[(14, 12, 14), float32],) {
  %651 = @func_1929() /* ty=Tensor[(14, 12, 14), float32] */;
  %652 = cast(%651, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
  %653 = exp(%652) /* ty=Tensor[(14, 12, 14), float32] */;
  (%653,)
}

def @func_4817() -> (Tensor[(14, 12, 14), float32],) {
  %654 = @func_1856() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %655 = %654.0;
  (%655,)
}

def @func_5652(%var_5640: Tensor[(1001), uint32], %var_5647: Tensor[(14, 12, 14), int64]) -> (Tensor[(7, 11, 13), float32], Tensor[(1001), uint32], Tensor[(8), uint16], Tensor[(14, 12, 14), float32]) {
  %656 = cast(%var_5640, dtype="uint32") /* ty=Tensor[(1001), uint32] */;
  %657 = cast(%var_5640, dtype="uint32") /* ty=Tensor[(1001), uint32] */;
  %658 = reshape(%656, newshape=[7, 11, 13]) /* ty=Tensor[(7, 11, 13), uint32] */;
  %659 = reshape(%657, newshape=[7, 11, 13]) /* ty=Tensor[(7, 11, 13), uint32] */;
  %660 = @func_4595() /* ty=(Tensor[(14, 12, 14), int64],) */;
  %661 = %660.0;
  %662 = cast(%var_5647, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
  %663 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
  %664 = cast(%661, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %666 = @func_1078(%658, %659) /* ty=Tensor[(7, 11, 13), float32] */;
  %667 = @func_5295() /* ty=Tensor[(8), uint16] */;
  %668 = floor_divide(%664, %665) /* ty=Tensor[(14, 12, 14), float32] */;
  (%666, %var_5640, %667, %668)
}

def @func_4104(%var_4094: Tensor[(108), uint32]) -> (Tensor[(14, 12, 14), float32], Tensor[(6, 3, 6), uint32], Tensor[(108), uint32], uint32) {
  %669 = @func_1856() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %670 = cast(%var_4094, dtype="uint32") /* ty=Tensor[(108), uint32] */;
  %671 = cast(%var_4094, dtype="uint32") /* ty=Tensor[(108), uint32] */;
  %672 = cast(meta[relay.Constant][36] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %673 = reshape(%670, newshape=[6, 3, 6]) /* ty=Tensor[(6, 3, 6), uint32] */;
  %674 = reshape(%671, newshape=[6, 3, 6]) /* ty=Tensor[(6, 3, 6), uint32] */;
  %675 = reshape(%672, newshape=[]) /* ty=uint32 */;
  %676 = @func_1905(%673, %674, %675) /* ty=(Tensor[(6, 3, 6), uint32], Tensor[(15, 4, 10), uint32], uint32, Tensor[(300, 2), uint32]) */;
  %677 = %669.0;
  %678 = %676.0;
  (%677, %678, %var_4094, meta[relay.Constant][36] /* ty=uint32 */)
}

def @func_3693(%var_3685: Tensor[(1144), uint64]) -> (Tensor[(14, 12, 14), bool], Tensor[(14, 12, 14), float32], Tensor[(13, 8, 11), float64], Tensor[(1144), uint64], Tensor[(5, 7, 9), float32]) {
  %679 = @func_3012() /* ty=Tensor[(14, 12, 14), float64] */;
  %680 = @func_3012() /* ty=Tensor[(14, 12, 14), float64] */;
  %681 = cast(%680, dtype="bool") /* ty=Tensor[(14, 12, 14), bool] */;
  %682 = shape_of(%679, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(%679, dtype="bool") /* ty=Tensor[(14, 12, 14), bool] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %685 = cast(%679, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
  %686 = cast(%var_3685, dtype="uint64") /* ty=Tensor[(1144), uint64] */;
  %687 = reshape(%686, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), uint64] */;
  %688 = @func_950(%687) /* ty=(Tensor[(13, 8, 11), float64],) */;
  %689 = equal(%683, %684) /* ty=Tensor[(14, 12, 14), bool] */;
  %690 = asinh(%685) /* ty=Tensor[(14, 12, 14), float32] */;
  %691 = %688.0;
  %692 = @func_1979() /* ty=Tensor[(5, 7, 9), float32] */;
  (%689, %690, %691, %var_3685, %692)
}

def @func_4595() -> (Tensor[(14, 12, 14), int64],) {
  %693 = @func_2375() /* ty=(Tensor[(14, 12, 14), int64],) */;
  %694 = %693.0;
  (%694,)
}

def @func_3052(%var_3049: Tensor[(3, 7, 14), float64]) -> (Tensor[(3, 7, 14), float64],) {
  %695 = cast(%var_3049, dtype="float64") /* ty=Tensor[(3, 7, 14), float64] */;
  %696 = sigmoid(%695) /* ty=Tensor[(3, 7, 14), float64] */;
  (%696,)
}

def @func_4342() -> (Tensor[(5, 7, 9), float32],) {
  %697 = @func_2127() /* ty=Tensor[(5, 7, 9), float32] */;
  (%697,)
}

def @func_4182(%var_4168: Tensor[(72), float32]) -> (Tensor[(14, 12, 14), float32], Tensor[(72), float32], Tensor[(72), float32]) {
  %698 = @func_4029() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %699 = cast(%var_4168, dtype="float32") /* ty=Tensor[(72), float32] */;
  %700 = reshape(%699, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %701 = @func_3947(%700) /* ty=(Tensor[(6, 7, 16), bool], Tensor[(672), int64], Tensor[(72), float32], Tensor[(14, 12, 14), float32]) */;
  %702 = %698.0;
  %703 = %701.2;
  (%702, %703, %var_4168)
}

def @func_4029() -> (Tensor[(14, 12, 14), float32],) {
  %704 = @func_3432() /* ty=Tensor[(14, 12, 14), float32] */;
  (%704,)
}

def @func_5295() -> Tensor[(8), uint16] {
  %705 = @func_4258() /* ty=(Tensor[(14, 12, 14), float32], Tensor[(3, 2, 4), float32], Tensor[(8), uint16], Tensor[(24), uint16]) */;
  %705.2
}

def @func_4668(%var_4661: Tensor[(14, 12, 14), float32]) -> (Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32]) {
  %706 = @func_4323() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %707 = %706.0;
  %708 = cast(%var_4661, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
  %709 = shape_of(%707, dtype="int32") /* ty=Tensor[(3), int32] */;
  %710 = cast(%707, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
  %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %712 = @func_1856() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %713 = maximum(%710, %711) /* ty=Tensor[(14, 12, 14), float32] */;
  %714 = %712.0;
  (%713, %714)
}

def @func_5223() -> (Tensor[(5, 7, 9), float32],) {
  %715 = @func_2054() /* ty=Tensor[(5, 7, 9), float32] */;
  (%715,)
}

def @func_6541(%var_6516: Tensor[(6, 12, 9), float64], %var_6530: Tensor[(1144), uint64]) -> (Tensor[(13, 8, 11), float64], Tensor[(1144), uint64], Tensor[(5, 7, 9), float32], Tensor[(6, 12, 9), int32]) {
  %716 = cast(%var_6530, dtype="uint64") /* ty=Tensor[(1144), uint64] */;
  %717 = reshape(%716, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), uint64] */;
  %718 = @func_950(%717) /* ty=(Tensor[(13, 8, 11), float64],) */;
  %719 = cast(%var_6516, dtype="float64") /* ty=Tensor[(6, 12, 9), float64] */;
  %720 = atan(%719) /* ty=Tensor[(6, 12, 9), float64] */;
  %721 = cast(%720, dtype="float64") /* ty=Tensor[(6, 12, 9), float64] */;
  %722 = sin(%721) /* ty=Tensor[(6, 12, 9), float64] */;
  %723 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 12, 9), float64] */, dtype="int32") /* ty=Tensor[(6, 12, 9), int32] */;
  %724 = shape_of(%722, dtype="int32") /* ty=Tensor[(3), int32] */;
  %725 = cast(%722, dtype="int32") /* ty=Tensor[(6, 12, 9), int32] */;
  %726 = dyn.reshape(%723, %724, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %727 = %718.0;
  %728 = @func_1979() /* ty=Tensor[(5, 7, 9), float32] */;
  %729 = minimum(%725, %726) /* ty=Tensor[(6, 12, 9), int32] */;
  (%727, %var_6530, %728, %729)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1910(%var_1907: Tensor[(6, 3, 6), uint32], %var_1908: Tensor[(6, 3, 6), uint32], %var_1909: uint32) -> (Tensor[(6, 3, 6), uint32], Tensor[(15, 4, 10), uint32], uint32, Tensor[(300, 2), uint32]) {
  @func_1905(%var_1907, %var_1908, %var_1909) /* ty=(Tensor[(6, 3, 6), uint32], Tensor[(15, 4, 10), uint32], uint32, Tensor[(300, 2), uint32]) */
}

def @func_5530(%var_5528: Tensor[(14, 9, 7), uint32], %var_5529: Tensor[(14, 9, 7), uint32]) -> (Tensor[(14, 9, 7), bool],) {
  @func_5526(%var_5528, %var_5529) /* ty=(Tensor[(14, 9, 7), bool],) */
}

def @func_6355(%var_6353: Tensor[(2352), float32], %var_6354: Tensor[(294), float64]) -> (Tensor[(5, 7, 9), float32], Tensor[(14, 12, 14), float32], Tensor[(2352), float32], Tensor[(3, 2, 4), float32], Tensor[(4, 2, 4), float64], Tensor[(1, 32), float64], Tensor[(294), float64], Tensor[(294), float64], Tensor[(84), float64], Tensor[(14, 12, 14), int64]) {
  @func_6351(%var_6353, %var_6354) /* ty=(Tensor[(5, 7, 9), float32], Tensor[(14, 12, 14), float32], Tensor[(2352), float32], Tensor[(3, 2, 4), float32], Tensor[(4, 2, 4), float64], Tensor[(1, 32), float64], Tensor[(294), float64], Tensor[(294), float64], Tensor[(84), float64], Tensor[(14, 12, 14), int64]) */
}

def @func_4325() -> (Tensor[(14, 12, 14), float32],) {
  @func_4323() /* ty=(Tensor[(14, 12, 14), float32],) */
}

def @func_3578() -> Tensor[(5, 7, 9), float64] {
  %2 = fn () -> Tensor[(5, 7, 9), float64] {
    %0 = @func_2054() /* ty=Tensor[(5, 7, 9), float32] */;
    %1 = cast(%0, dtype="float64") /* ty=Tensor[(5, 7, 9), float64] */;
    atan(%1) /* ty=Tensor[(5, 7, 9), float64] */
  };
  %2() /* ty=Tensor[(5, 7, 9), float64] */
}

def @func_6688() -> (Tensor[(14, 12, 14), float32], Tensor[(5, 7, 9), float64]) {
  @func_6686() /* ty=(Tensor[(14, 12, 14), float32], Tensor[(5, 7, 9), float64]) */
}

def @func_3014() -> Tensor[(14, 12, 14), float64] {
  @func_3012() /* ty=Tensor[(14, 12, 14), float64] */
}

def @func_4933(%var_4931: Tensor[(9, 12, 2), uint32], %var_4932: Tensor[(9, 12, 2), uint32]) -> (Tensor[(9, 12, 2), uint32],) {
  %8 = fn (%var_4915: Tensor[(9, 12, 2), uint32], %var_4916: Tensor[(9, 12, 2), uint32]) -> (Tensor[(9, 12, 2), uint32],) {
    %3 = cast(%var_4916, dtype="uint32") /* ty=Tensor[(9, 12, 2), uint32] */;
    %4 = shape_of(%var_4915, dtype="int32") /* ty=Tensor[(3), int32] */;
    %5 = cast(%var_4915, dtype="uint32") /* ty=Tensor[(9, 12, 2), uint32] */;
    %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %7 = add(%5, %6) /* ty=Tensor[(9, 12, 2), uint32] */;
    (%7,)
  };
  %8(%var_4931, %var_4932) /* ty=(Tensor[(9, 12, 2), uint32],) */
}

def @func_1739(%var_1738: Tensor[(14, 12, 14), float32]) -> Tensor[(14, 12, 14), uint8] {
  %14 = fn (%var_1730: Tensor[(14, 12, 14), float32]) -> Tensor[(14, 12, 14), uint8] {
    %9 = @func_1598() /* ty=Tensor[(14, 12, 14), float32] */;
    %10 = cast(%var_1730, dtype="uint8") /* ty=Tensor[(14, 12, 14), uint8] */;
    %11 = shape_of(%9, dtype="int32") /* ty=Tensor[(3), int32] */;
    %12 = cast(%9, dtype="uint8") /* ty=Tensor[(14, 12, 14), uint8] */;
    %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    bitwise_or(%12, %13) /* ty=Tensor[(14, 12, 14), uint8] */
  };
  %14(%var_1738) /* ty=Tensor[(14, 12, 14), uint8] */
}

def @func_4376(%var_4375: Tensor[(5, 7, 9), float32]) -> Tensor[(5, 7, 9), bool] {
  %21 = fn (%var_4364: Tensor[(5, 7, 9), float32]) -> Tensor[(5, 7, 9), bool] {
    %15 = @func_3078() /* ty=(Tensor[(5, 7, 9), float32],) */;
    %16 = %15.0;
    %17 = cast(%var_4364, dtype="bool") /* ty=Tensor[(5, 7, 9), bool] */;
    %18 = shape_of(%16, dtype="int32") /* ty=Tensor[(3), int32] */;
    %19 = cast(%16, dtype="bool") /* ty=Tensor[(5, 7, 9), bool] */;
    %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%19, %20) /* ty=Tensor[(5, 7, 9), bool] */
  };
  %21(%var_4375) /* ty=Tensor[(5, 7, 9), bool] */
}

def @func_1615(%var_1613: uint32, %var_1614: Tensor[(600), uint32]) -> (Tensor[(14, 12, 14), float32], Tensor[(15, 4, 10), uint32], uint32, Tensor[(600), uint32]) {
  %28 = fn (%var_1605: uint32, %var_1606: Tensor[(600), uint32]) -> (Tensor[(14, 12, 14), float32], Tensor[(15, 4, 10), uint32], uint32, Tensor[(600), uint32]) {
    %22 = cast(%var_1605, dtype="uint32") /* ty=uint32 */;
    %23 = cast(%var_1606, dtype="uint32") /* ty=Tensor[(600), uint32] */;
    %24 = reshape(%22, newshape=[]) /* ty=uint32 */;
    %25 = reshape(%23, newshape=[15, 4, 10]) /* ty=Tensor[(15, 4, 10), uint32] */;
    %26 = @func_1598() /* ty=Tensor[(14, 12, 14), float32] */;
    %27 = @func_634(%24, %25) /* ty=Tensor[(15, 4, 10), uint32] */;
    (%26, %27, %var_1605, %var_1606)
  };
  %28(%var_1613, %var_1614) /* ty=(Tensor[(14, 12, 14), float32], Tensor[(15, 4, 10), uint32], uint32, Tensor[(600), uint32]) */
}

def @func_4874(%var_4872: Tensor[(24), uint64], %var_4873: Tensor[(14, 12, 14), float32]) -> (Tensor[(5, 7, 9), float32], Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32], Tensor[(13, 8, 11), float64], Tensor[(24), uint64], Tensor[(14, 12, 14), uint64]) {
  %52 = fn (%var_4852: Tensor[(24), uint64], %var_4867: Tensor[(14, 12, 14), float32]) -> (Tensor[(5, 7, 9), float32], Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32], Tensor[(13, 8, 11), float64], Tensor[(24), uint64], Tensor[(14, 12, 14), uint64]) {
    %29 = @func_1646() /* ty=Tensor[(14, 12, 14), float32] */;
    %30 = cast(meta[relay.Constant][0] /* ty=Tensor[(14, 12, 14), float32] */, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
    %31 = shape_of(%29, dtype="int32") /* ty=Tensor[(3), int32] */;
    %32 = cast(%29, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
    %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %34 = cast(meta[relay.Constant][1] /* ty=Tensor[(14, 12, 14), float32] */, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
    %35 = shape_of(%29, dtype="int32") /* ty=Tensor[(3), int32] */;
    %36 = cast(%29, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
    %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %38 = cast(%var_4852, dtype="uint64") /* ty=Tensor[(24), uint64] */;
    %39 = cast(meta[relay.Constant][0] /* ty=Tensor[(14, 12, 14), float32] */, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
    %40 = reshape(%38, newshape=[24]) /* ty=Tensor[(24), uint64] */;
    %41 = reshape(%39, newshape=[14, 12, 14]) /* ty=Tensor[(14, 12, 14), float32] */;
    %42 = @func_2713(%40, %41) /* ty=(Tensor[(8, 3), uint64], Tensor[(14, 12, 14), bool], Tensor[(24), float32], Tensor[(13, 8, 11), float64], Tensor[(1144), uint64]) */;
    %43 = cast(%var_4867, dtype="uint64") /* ty=Tensor[(14, 12, 14), uint64] */;
    %44 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(14, 12, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %45 = cast(meta[relay.Constant][1] /* ty=Tensor[(14, 12, 14), float32] */, dtype="uint64") /* ty=Tensor[(14, 12, 14), uint64] */;
    %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %47 = @func_2948() /* ty=Tensor[(5, 7, 9), float32] */;
    %48 = power(%32, %33) /* ty=Tensor[(14, 12, 14), float32] */;
    %49 = multiply(%36, %37) /* ty=Tensor[(14, 12, 14), float32] */;
    %50 = %42.3;
    %51 = add(%45, %46) /* ty=Tensor[(14, 12, 14), uint64] */;
    (%47, %48, %49, %50, %var_4852, %51)
  };
  %52(%var_4872, %var_4873) /* ty=(Tensor[(5, 7, 9), float32], Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32], Tensor[(13, 8, 11), float64], Tensor[(24), uint64], Tensor[(14, 12, 14), uint64]) */
}

def @func_3768(%var_3765: Tensor[(14, 12, 14), float64], %var_3766: Tensor[(6, 4), uint64], %var_3767: Tensor[(105, 3), float32]) -> (Tensor[(14, 12, 14), float32], Tensor[(8, 3), uint64], Tensor[(6, 4), uint64], Tensor[(14, 12, 14), bool], Tensor[(105, 3), float32], Tensor[(5, 7, 9), float32], Tensor[(7, 11, 13), float32], Tensor[(1001), uint32], Tensor[(4, 2, 4), float64], Tensor[(32), float64]) {
  %81 = fn (%var_3718: Tensor[(14, 12, 14), float64], %var_3725: Tensor[(6, 4), uint64], %var_3732: Tensor[(105, 3), float32]) -> (Tensor[(14, 12, 14), float32], Tensor[(8, 3), uint64], Tensor[(6, 4), uint64], Tensor[(14, 12, 14), bool], Tensor[(105, 3), float32], Tensor[(5, 7, 9), float32], Tensor[(7, 11, 13), float32], Tensor[(1001), uint32], Tensor[(4, 2, 4), float64], Tensor[(32), float64]) {
    %53 = @func_3012() /* ty=Tensor[(14, 12, 14), float64] */;
    %54 = cast(%var_3718, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
    %55 = shape_of(%53, dtype="int32") /* ty=Tensor[(3), int32] */;
    %56 = cast(%53, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
    %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %58 = cast(%var_3725, dtype="uint64") /* ty=Tensor[(6, 4), uint64] */;
    %59 = cast(%var_3725, dtype="uint64") /* ty=Tensor[(6, 4), uint64] */;
    %60 = reshape(%58, newshape=[8, 3]) /* ty=Tensor[(8, 3), uint64] */;
    %61 = reshape(%59, newshape=[8, 3]) /* ty=Tensor[(8, 3), uint64] */;
    %62 = @func_2116(%60, %61) /* ty=(Tensor[(8, 3), uint64],) */;
    %63 = cast(%53, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
    %64 = cast(%var_3732, dtype="float32") /* ty=Tensor[(105, 3), float32] */;
    %65 = reshape(%63, newshape=[14, 12, 14]) /* ty=Tensor[(14, 12, 14), float32] */;
    %66 = reshape(%64, newshape=[5, 7, 9]) /* ty=Tensor[(5, 7, 9), float32] */;
    %67 = @func_2459(%65, %66) /* ty=(Tensor[(14, 12, 14), bool], Tensor[(7, 11, 13), float32], Tensor[(1001), uint32], Tensor[(5, 7, 9), float32]) */;
    %68 = @func_3428() /* ty=(Tensor[(14, 12, 14), float32], Tensor[(5, 7, 9), float32]) */;
    %69 = cast(meta[relay.Constant][2] /* ty=Tensor[(1001), uint32] */, dtype="uint32") /* ty=Tensor[(1001), uint32] */;
    %70 = cast(meta[relay.Constant][2] /* ty=Tensor[(1001), uint32] */, dtype="uint32") /* ty=Tensor[(1001), uint32] */;
    %71 = reshape(%69, newshape=[7, 11, 13]) /* ty=Tensor[(7, 11, 13), uint32] */;
    %72 = reshape(%70, newshape=[7, 11, 13]) /* ty=Tensor[(7, 11, 13), uint32] */;
    %73 = cast(meta[relay.Constant][3] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
    %74 = reshape(%73, newshape=[4, 2, 4]) /* ty=Tensor[(4, 2, 4), float64] */;
    %75 = divide(%56, %57) /* ty=Tensor[(14, 12, 14), float32] */;
    %76 = %62.0;
    %77 = %67.0;
    %78 = %68.1;
    %79 = @func_1078(%71, %72) /* ty=Tensor[(7, 11, 13), float32] */;
    %80 = @func_2536(%74) /* ty=Tensor[(4, 2, 4), float64] */;
    (%75, %76, %var_3725, %77, %var_3732, %78, %79, meta[relay.Constant][2] /* ty=Tensor[(1001), uint32] */, %80, meta[relay.Constant][3] /* ty=Tensor[(32), float64] */)
  };
  %81(%var_3765, %var_3766, %var_3767) /* ty=(Tensor[(14, 12, 14), float32], Tensor[(8, 3), uint64], Tensor[(6, 4), uint64], Tensor[(14, 12, 14), bool], Tensor[(105, 3), float32], Tensor[(5, 7, 9), float32], Tensor[(7, 11, 13), float32], Tensor[(1001), uint32], Tensor[(4, 2, 4), float64], Tensor[(32), float64]) */
}

def @func_5922(%var_5890: Tensor[(14, 12, 14), float32]) -> (Tensor[(14, 12, 14), int64], Tensor[(14, 12, 14), float64]) {
  %82 = @func_2472() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %83 = %82.0;
  %84 = cast(%var_5890, dtype="int64") /* ty=Tensor[(14, 12, 14), int64] */;
  %85 = shape_of(%83, dtype="int32") /* ty=Tensor[(3), int32] */;
  %86 = cast(%83, dtype="int64") /* ty=Tensor[(14, 12, 14), int64] */;
  %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %88 = cast(%83, dtype="float64") /* ty=Tensor[(14, 12, 14), float64] */;
  %89 = bitwise_xor(%86, %87) /* ty=Tensor[(14, 12, 14), int64] */;
  %90 = asin(%88) /* ty=Tensor[(14, 12, 14), float64] */;
  (%89, %90)
}

def @func_6603() -> Tensor[(14, 12, 14), float32] {
  %91 = @func_2472() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %91.0
}

def @func_6605() -> Tensor[(14, 12, 14), float32] {
  @func_6603() /* ty=Tensor[(14, 12, 14), float32] */
}

def @func_6351(%var_6318: Tensor[(2352), float32], %var_6342: Tensor[(294), float64]) -> (Tensor[(5, 7, 9), float32], Tensor[(14, 12, 14), float32], Tensor[(2352), float32], Tensor[(3, 2, 4), float32], Tensor[(4, 2, 4), float64], Tensor[(1, 32), float64], Tensor[(294), float64], Tensor[(294), float64], Tensor[(84), float64], Tensor[(14, 12, 14), int64]) {
  %92 = @func_4342() /* ty=(Tensor[(5, 7, 9), float32],) */;
  %93 = cast(%var_6318, dtype="float32") /* ty=Tensor[(2352), float32] */;
  %94 = reshape(%93, newshape=[14, 12, 14]) /* ty=Tensor[(14, 12, 14), float32] */;
  %95 = @func_4668(%94) /* ty=(Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32]) */;
  %96 = @func_4258() /* ty=(Tensor[(14, 12, 14), float32], Tensor[(3, 2, 4), float32], Tensor[(8), uint16], Tensor[(24), uint16]) */;
  %97 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 32), float64] */, dtype="float64") /* ty=Tensor[(1, 32), float64] */;
  %98 = reshape(%97, newshape=[4, 2, 4]) /* ty=Tensor[(4, 2, 4), float64] */;
  %99 = cast(%var_6318, dtype="float32") /* ty=Tensor[(2352), float32] */;
  %100 = cast(%var_6342, dtype="float64") /* ty=Tensor[(294), float64] */;
  %101 = cast(meta[relay.Constant][5] /* ty=Tensor[(84), float64] */, dtype="float64") /* ty=Tensor[(84), float64] */;
  %102 = reshape(%99, newshape=[14, 12, 14]) /* ty=Tensor[(14, 12, 14), float32] */;
  %103 = reshape(%100, newshape=[294]) /* ty=Tensor[(294), float64] */;
  %104 = reshape(%101, newshape=[84]) /* ty=Tensor[(84), float64] */;
  %105 = @func_4778(%102, %103, %104) /* ty=(Tensor[(14, 12, 14), bool], Tensor[(3, 7, 14), float64], Tensor[(294), float64], Tensor[(14, 12, 14), float32], Tensor[(3, 14, 2), float64], Tensor[(84), float64]) */;
  %106 = @func_2375() /* ty=(Tensor[(14, 12, 14), int64],) */;
  %107 = %92.0;
  %108 = %95.0;
  %109 = %96.1;
  %110 = @func_2536(%98) /* ty=Tensor[(4, 2, 4), float64] */;
  %111 = %105.2;
  %112 = %106.0;
  (%107, %108, %var_6318, %109, %110, meta[relay.Constant][4] /* ty=Tensor[(1, 32), float64] */, %111, %var_6342, meta[relay.Constant][5] /* ty=Tensor[(84), float64] */, %112)
}

def @func_5614(%var_5532: Tensor[(7, 7), float32], %var_5562: Tensor[(1144, 1), uint64]) -> (Tensor[(7, 7), float32], Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32], Tensor[(24), uint64], Tensor[(12, 2), uint64], Tensor[(1144, 1), float32]) {
  %113 = cast(%var_5532, dtype="float32") /* ty=Tensor[(7, 7), float32] */;
  %114 = cast(%var_5562, dtype="uint64") /* ty=Tensor[(1144, 1), uint64] */;
  %115 = reshape(%114, newshape=[1144]) /* ty=Tensor[(1144), uint64] */;
  %116 = @func_3693(%115) /* ty=(Tensor[(14, 12, 14), bool], Tensor[(14, 12, 14), float32], Tensor[(13, 8, 11), float64], Tensor[(1144), uint64], Tensor[(5, 7, 9), float32]) */;
  %117 = @func_4029() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %118 = cast(meta[relay.Constant][6] /* ty=Tensor[(12, 2), uint64] */, dtype="uint64") /* ty=Tensor[(12, 2), uint64] */;
  %119 = %116.1;
  %120 = cast(%119, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
  %121 = reshape(%118, newshape=[24]) /* ty=Tensor[(24), uint64] */;
  %122 = reshape(%120, newshape=[14, 12, 14]) /* ty=Tensor[(14, 12, 14), float32] */;
  %123 = @func_4871(%121, %122) /* ty=(Tensor[(5, 7, 9), float32], Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32], Tensor[(13, 8, 11), float64], Tensor[(24), uint64], Tensor[(14, 12, 14), uint64]) */;
  %124 = cast(%var_5562, dtype="float32") /* ty=Tensor[(1144, 1), float32] */;
  %125 = sin(%113) /* ty=Tensor[(7, 7), float32] */;
  %126 = %117.0;
  %127 = %123.4;
  %128 = rsqrt(%124) /* ty=Tensor[(1144, 1), float32] */;
  (%125, %119, %126, %127, meta[relay.Constant][6] /* ty=Tensor[(12, 2), uint64] */, %128)
}

def @func_2239(%var_2237: Tensor[(6, 100), uint32], %var_2238: Tensor[(6, 100), uint32]) -> (Tensor[(5, 7, 9), float32], Tensor[(13, 8, 11), float64], Tensor[(1144, 1), uint64], Tensor[(15, 4, 10), uint32], uint32, Tensor[(14, 12, 14), uint8], Tensor[(2352), float32], Tensor[(7, 11, 13), float32], Tensor[(1001), uint32], Tensor[(6, 100), bool]) {
  %153 = fn (%var_2200: Tensor[(6, 100), uint32], %var_2231: Tensor[(6, 100), uint32]) -> (Tensor[(5, 7, 9), float32], Tensor[(13, 8, 11), float64], Tensor[(1144, 1), uint64], Tensor[(15, 4, 10), uint32], uint32, Tensor[(14, 12, 14), uint8], Tensor[(2352), float32], Tensor[(7, 11, 13), float32], Tensor[(1001), uint32], Tensor[(6, 100), bool]) {
    %129 = cast(meta[relay.Constant][7] /* ty=Tensor[(1144, 1), uint64] */, dtype="uint64") /* ty=Tensor[(1144, 1), uint64] */;
    %130 = reshape(%129, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), uint64] */;
    %131 = @func_950(%130) /* ty=(Tensor[(13, 8, 11), float64],) */;
    %132 = cast(meta[relay.Constant][8] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %133 = cast(%var_2200, dtype="uint32") /* ty=Tensor[(6, 100), uint32] */;
    %134 = reshape(%132, newshape=[]) /* ty=uint32 */;
    %135 = reshape(%133, newshape=[600]) /* ty=Tensor[(600), uint32] */;
    %136 = @func_1612(%134, %135) /* ty=(Tensor[(14, 12, 14), float32], Tensor[(15, 4, 10), uint32], uint32, Tensor[(600), uint32]) */;
    %137 = cast(meta[relay.Constant][9] /* ty=Tensor[(2352), float32] */, dtype="float32") /* ty=Tensor[(2352), float32] */;
    %138 = reshape(%137, newshape=[14, 12, 14]) /* ty=Tensor[(14, 12, 14), float32] */;
    %139 = cast(meta[relay.Constant][10] /* ty=Tensor[(1001), uint32] */, dtype="uint32") /* ty=Tensor[(1001), uint32] */;
    %140 = cast(meta[relay.Constant][10] /* ty=Tensor[(1001), uint32] */, dtype="uint32") /* ty=Tensor[(1001), uint32] */;
    %141 = reshape(%139, newshape=[7, 11, 13]) /* ty=Tensor[(7, 11, 13), uint32] */;
    %142 = reshape(%140, newshape=[7, 11, 13]) /* ty=Tensor[(7, 11, 13), uint32] */;
    %143 = cast(%var_2231, dtype="bool") /* ty=Tensor[(6, 100), bool] */;
    %144 = shape_of(%var_2200, dtype="int32") /* ty=Tensor[(2), int32] */;
    %145 = cast(%var_2200, dtype="bool") /* ty=Tensor[(6, 100), bool] */;
    %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %147 = @func_2127() /* ty=Tensor[(5, 7, 9), float32] */;
    %148 = %131.0;
    %149 = %136.1;
    %150 = @func_1737(%138) /* ty=Tensor[(14, 12, 14), uint8] */;
    %151 = @func_1078(%141, %142) /* ty=Tensor[(7, 11, 13), float32] */;
    %152 = less_equal(%145, %146) /* ty=Tensor[(6, 100), bool] */;
    (%147, %148, meta[relay.Constant][7] /* ty=Tensor[(1144, 1), uint64] */, %149, meta[relay.Constant][8] /* ty=uint32 */, %150, meta[relay.Constant][9] /* ty=Tensor[(2352), float32] */, %151, meta[relay.Constant][10] /* ty=Tensor[(1001), uint32] */, %152)
  };
  %153(%var_2237, %var_2238) /* ty=(Tensor[(5, 7, 9), float32], Tensor[(13, 8, 11), float64], Tensor[(1144, 1), uint64], Tensor[(15, 4, 10), uint32], uint32, Tensor[(14, 12, 14), uint8], Tensor[(2352), float32], Tensor[(7, 11, 13), float32], Tensor[(1001), uint32], Tensor[(6, 100), bool]) */
}

def @func_5850(%var_5849: Tensor[(4, 2, 9), float32]) -> (Tensor[(4, 2, 9), float64], Tensor[(14, 12, 14), float32], Tensor[(4, 2, 9), float64]) {
  %162 = fn (%var_5808: Tensor[(4, 2, 9), float32]) -> (Tensor[(4, 2, 9), float64], Tensor[(14, 12, 14), float32], Tensor[(4, 2, 9), float64]) {
    %154 = cast(%var_5808, dtype="float32") /* ty=Tensor[(4, 2, 9), float32] */;
    %155 = log(%154) /* ty=Tensor[(4, 2, 9), float32] */;
    %156 = cast(%155, dtype="float64") /* ty=Tensor[(4, 2, 9), float64] */;
    %157 = @func_3103() /* ty=(Tensor[(14, 12, 14), float32],) */;
    %158 = cast(%155, dtype="float64") /* ty=Tensor[(4, 2, 9), float64] */;
    %159 = log2(%156) /* ty=Tensor[(4, 2, 9), float64] */;
    %160 = %157.0;
    %161 = cos(%158) /* ty=Tensor[(4, 2, 9), float64] */;
    (%159, %160, %161)
  };
  %162(%var_5849) /* ty=(Tensor[(4, 2, 9), float64], Tensor[(14, 12, 14), float32], Tensor[(4, 2, 9), float64]) */
}

def @func_1081(%var_1079: Tensor[(7, 11, 13), uint32], %var_1080: Tensor[(7, 11, 13), uint32]) -> Tensor[(7, 11, 13), float32] {
  %172 = fn (%var_1057: Tensor[(7, 11, 13), uint32], %var_1058: Tensor[(7, 11, 13), uint32]) -> Tensor[(7, 11, 13), float32] {
    %163 = cast(%var_1058, dtype="uint32") /* ty=Tensor[(7, 11, 13), uint32] */;
    %164 = shape_of(%var_1057, dtype="int32") /* ty=Tensor[(3), int32] */;
    %165 = cast(%var_1057, dtype="uint32") /* ty=Tensor[(7, 11, 13), uint32] */;
    %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %167 = maximum(%165, %166) /* ty=Tensor[(7, 11, 13), uint32] */;
    %168 = cast(%var_1058, dtype="float32") /* ty=Tensor[(7, 11, 13), float32] */;
    %169 = shape_of(%167, dtype="int32") /* ty=Tensor[(3), int32] */;
    %170 = cast(%167, dtype="float32") /* ty=Tensor[(7, 11, 13), float32] */;
    %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    divide(%170, %171) /* ty=Tensor[(7, 11, 13), float32] */
  };
  %172(%var_1079, %var_1080) /* ty=Tensor[(7, 11, 13), float32] */
}

def @func_4259() -> (Tensor[(14, 12, 14), float32], Tensor[(3, 2, 4), float32], Tensor[(8), uint16], Tensor[(24), uint16]) {
  %180 = fn () -> (Tensor[(14, 12, 14), float32], Tensor[(3, 2, 4), float32], Tensor[(8), uint16], Tensor[(24), uint16]) {
    %173 = cast(meta[relay.Constant][11] /* ty=Tensor[(8), uint16] */, dtype="uint16") /* ty=Tensor[(8), uint16] */;
    %174 = cast(meta[relay.Constant][12] /* ty=Tensor[(24), uint16] */, dtype="uint16") /* ty=Tensor[(24), uint16] */;
    %175 = reshape(%173, newshape=[1, 2, 4]) /* ty=Tensor[(1, 2, 4), uint16] */;
    %176 = reshape(%174, newshape=[3, 2, 4]) /* ty=Tensor[(3, 2, 4), uint16] */;
    %177 = @func_1384(%175, %176) /* ty=(Tensor[(3, 2, 4), bool], Tensor[(3, 2, 4), float32]) */;
    %178 = @func_1598() /* ty=Tensor[(14, 12, 14), float32] */;
    %179 = %177.1;
    (%178, %179, meta[relay.Constant][11] /* ty=Tensor[(8), uint16] */, meta[relay.Constant][12] /* ty=Tensor[(24), uint16] */)
  };
  %180() /* ty=(Tensor[(14, 12, 14), float32], Tensor[(3, 2, 4), float32], Tensor[(8), uint16], Tensor[(24), uint16]) */
}

def @func_875(%var_874: Tensor[(3, 14, 2), float64]) -> (Tensor[(3, 14, 2), float64],) {
  %183 = fn (%var_867: Tensor[(3, 14, 2), float64]) -> (Tensor[(3, 14, 2), float64],) {
    %181 = cast(%var_867, dtype="float64") /* ty=Tensor[(3, 14, 2), float64] */;
    %182 = atan(%181) /* ty=Tensor[(3, 14, 2), float64] */;
    (%182,)
  };
  %183(%var_874) /* ty=(Tensor[(3, 14, 2), float64],) */
}

def @func_2949() -> Tensor[(5, 7, 9), float32] {
  %184 = fn () -> Tensor[(5, 7, 9), float32] {
    @func_1979() /* ty=Tensor[(5, 7, 9), float32] */
  };
  %184() /* ty=Tensor[(5, 7, 9), float32] */
}

def @func_5740() -> Tensor[(5, 7, 9), float32] {
  %185 = fn () -> Tensor[(5, 7, 9), float32] {
    @func_4710() /* ty=Tensor[(5, 7, 9), float32] */
  };
  %185() /* ty=Tensor[(5, 7, 9), float32] */
}

def @func_6631() -> (Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32]) {
  %186 = @func_1856() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %187 = %186.0;
  %188 = cast(%187, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
  %189 = reshape(%188, newshape=[14, 12, 14]) /* ty=Tensor[(14, 12, 14), float32] */;
  %190 = @func_4668(%189) /* ty=(Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32]) */;
  %191 = %190.1;
  (%187, %191)
}

def @func_2128() -> Tensor[(5, 7, 9), float32] {
  %192 = fn () -> Tensor[(5, 7, 9), float32] {
    @func_1979() /* ty=Tensor[(5, 7, 9), float32] */
  };
  %192() /* ty=Tensor[(5, 7, 9), float32] */
}

def @func_331(%var_329: Tensor[(960), float32], %var_330: Tensor[(10, 9, 2), float64]) -> (Tensor[(960), float32], Tensor[(3, 24), int16], Tensor[(10, 9, 2), bool], Tensor[(8, ?, 9), float32]) {
  @func_327(%var_329, %var_330) /* ty=(Tensor[(960), float32], Tensor[(3, 24), int16], Tensor[(10, 9, 2), bool], Tensor[(8, ?, 9), float32]) */
}

def @func_4595() -> (Tensor[(14, 12, 14), int64],) {
  %193 = @func_2375() /* ty=(Tensor[(14, 12, 14), int64],) */;
  %194 = %193.0;
  (%194,)
}

def @func_3159() -> (Tensor[(5, 7, 9), float32], Tensor[(13, 8, 11), float64], Tensor[(1144, 1), float32]) {
  %195 = @func_3078() /* ty=(Tensor[(5, 7, 9), float32],) */;
  %196 = cast(meta[relay.Constant][13] /* ty=Tensor[(1144, 1), uint64] */, dtype="uint64") /* ty=Tensor[(1144, 1), uint64] */;
  %197 = reshape(%196, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), uint64] */;
  %198 = @func_950(%197) /* ty=(Tensor[(13, 8, 11), float64],) */;
  %199 = cast(meta[relay.Constant][13] /* ty=Tensor[(1144, 1), uint64] */, dtype="float32") /* ty=Tensor[(1144, 1), float32] */;
  %200 = %195.0;
  %201 = %198.0;
  %202 = log2(%199) /* ty=Tensor[(1144, 1), float32] */;
  (%200, %201, %202)
}

def @func_2848(%var_2846: Tensor[(13, 7, 3), float32]) -> (Tensor[(13, 7, 3), float32],) {
  @func_2845(%var_2846) /* ty=(Tensor[(13, 7, 3), float32],) */
}

def @func_5408() -> (Tensor[(14, 12, 14), float32],) {
  %205 = fn () -> (Tensor[(14, 12, 14), float32],) {
    %203 = @func_5109() /* ty=(Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32]) */;
    %204 = %203.1;
    (%204,)
  };
  %205() /* ty=(Tensor[(14, 12, 14), float32],) */
}

def @func_5392() -> Tensor[(14, 12, 14), float32] {
  %206 = @func_5109() /* ty=(Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32]) */;
  %206.0
}

def @func_3950(%var_3948: Tensor[(72), float32]) -> (Tensor[(6, 7, 16), bool], Tensor[(672), int64], Tensor[(72), float32], Tensor[(14, 12, 14), float32]) {
  @func_3947(%var_3948) /* ty=(Tensor[(6, 7, 16), bool], Tensor[(672), int64], Tensor[(72), float32], Tensor[(14, 12, 14), float32]) */
}

def @func_5526(%var_5518: Tensor[(14, 9, 7), uint32], %var_5519: Tensor[(14, 9, 7), uint32]) -> (Tensor[(14, 9, 7), bool],) {
  %207 = cast(%var_5519, dtype="bool") /* ty=Tensor[(14, 9, 7), bool] */;
  %208 = shape_of(%var_5518, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(%var_5518, dtype="bool") /* ty=Tensor[(14, 9, 7), bool] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %211 = not_equal(%209, %210) /* ty=Tensor[(14, 9, 7), bool] */;
  (%211,)
}

def @func_1598() -> Tensor[(14, 12, 14), float32] {
  %212 = cast(meta[relay.Constant][14] /* ty=Tensor[(14, 12, 14), float32] */, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
  tan(%212) /* ty=Tensor[(14, 12, 14), float32] */
}

def @func_6220(%var_6129: Tensor[(72), float32], %var_6133: Tensor[(1001), uint32]) -> (Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float64], Tensor[(72), float32], Tensor[(72), float32], Tensor[(144, 2), int32], Tensor[(1001), uint32], Tensor[(48), int32], Tensor[(14, 12, 14), float32], Tensor[(13, 7, 3), float32], Tensor[(273), float32], Tensor[(14, 12, 14), float32], Tensor[(5, 7, 9), float32]) {
  %213 = @func_5407() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %214 = %213.0;
  %215 = cast(%214, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
  %216 = reshape(%215, newshape=[14, 12, 14]) /* ty=Tensor[(14, 12, 14), float32] */;
  %217 = @func_5922(%216) /* ty=(Tensor[(14, 12, 14), int64], Tensor[(14, 12, 14), float64]) */;
  %218 = cast(%var_6129, dtype="float32") /* ty=Tensor[(72), float32] */;
  %219 = reshape(%218, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %220 = @func_4182(%219) /* ty=(Tensor[(14, 12, 14), float32], Tensor[(72), float32], Tensor[(72), float32]) */;
  %221 = cast(%var_6133, dtype="uint32") /* ty=Tensor[(1001), uint32] */;
  %222 = cast(meta[relay.Constant][15] /* ty=Tensor[(48), int32] */, dtype="int32") /* ty=Tensor[(48), int32] */;
  %223 = reshape(%221, newshape=[13, 77]) /* ty=Tensor[(13, 77), uint32] */;
  %224 = reshape(%222, newshape=[48]) /* ty=Tensor[(48), int32] */;
  %225 = @func_3851(%223, %224) /* ty=(Tensor[(14, 12, 14), uint32], Tensor[(7, 11, 13), float32], Tensor[(13, 77), uint32], Tensor[(8, 6, 6), bool], Tensor[(48), int32], Tensor[(144, 2), int32], Tensor[(1144, 1), float32], Tensor[(14, 12, 14), float32]) */;
  %226 = %220.1;
  %227 = cast(%226, dtype="float32") /* ty=Tensor[(72), float32] */;
  %228 = reshape(%227, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %229 = @func_5796(%228) /* ty=(Tensor[(14, 12, 14), float32], Tensor[(72), float32], Tensor[(72), float32]) */;
  %230 = cast(meta[relay.Constant][16] /* ty=Tensor[(273), float32] */, dtype="float32") /* ty=Tensor[(273), float32] */;
  %231 = reshape(%230, newshape=[13, 7, 3]) /* ty=Tensor[(13, 7, 3), float32] */;
  %232 = @func_2845(%231) /* ty=(Tensor[(13, 7, 3), float32],) */;
  %233 = %217.1;
  %234 = %225.5;
  %235 = %229.0;
  %236 = %232.0;
  %237 = @func_5290() /* ty=Tensor[(14, 12, 14), float32] */;
  %238 = @func_2054() /* ty=Tensor[(5, 7, 9), float32] */;
  (%214, %233, %226, %var_6129, %234, %var_6133, meta[relay.Constant][15] /* ty=Tensor[(48), int32] */, %235, %236, meta[relay.Constant][16] /* ty=Tensor[(273), float32] */, %237, %238)
}

def @func_1857() -> (Tensor[(14, 12, 14), float32],) {
  %240 = fn () -> (Tensor[(14, 12, 14), float32],) {
    %239 = @func_1598() /* ty=Tensor[(14, 12, 14), float32] */;
    (%239,)
  };
  %240() /* ty=(Tensor[(14, 12, 14), float32],) */
}

def @main(%var_6799: Tensor[(1144), uint64]) -> (Tensor[(14, 12, 14), float32], Tensor[(1144), uint64], Tensor[(14, 12, 14), float32], Tensor[(13, 8, 11), float64]) {
  %241 = @func_4325() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %242 = cast(%var_6799, dtype="uint64") /* ty=Tensor[(1144), uint64] */;
  %243 = reshape(%242, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), uint64] */;
  %244 = @func_952(%243) /* ty=(Tensor[(13, 8, 11), float64],) */;
  %245 = %244.0;
  %246 = cast(%245, dtype="float64") /* ty=Tensor[(13, 8, 11), float64] */;
  %247 = @func_1598() /* ty=Tensor[(14, 12, 14), float32] */;
  %248 = %241.0;
  %249 = acos(%246) /* ty=Tensor[(13, 8, 11), float64] */;
  (%247, %var_6799, %248, %249)
}

def @func_6544(%var_6542: Tensor[(6, 12, 9), float64], %var_6543: Tensor[(1144), uint64]) -> (Tensor[(13, 8, 11), float64], Tensor[(1144), uint64], Tensor[(5, 7, 9), float32], Tensor[(6, 12, 9), int32]) {
  %264 = fn (%var_6516: Tensor[(6, 12, 9), float64], %var_6530: Tensor[(1144), uint64]) -> (Tensor[(13, 8, 11), float64], Tensor[(1144), uint64], Tensor[(5, 7, 9), float32], Tensor[(6, 12, 9), int32]) {
    %250 = cast(%var_6530, dtype="uint64") /* ty=Tensor[(1144), uint64] */;
    %251 = reshape(%250, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), uint64] */;
    %252 = @func_950(%251) /* ty=(Tensor[(13, 8, 11), float64],) */;
    %253 = cast(%var_6516, dtype="float64") /* ty=Tensor[(6, 12, 9), float64] */;
    %254 = atan(%253) /* ty=Tensor[(6, 12, 9), float64] */;
    %255 = cast(%254, dtype="float64") /* ty=Tensor[(6, 12, 9), float64] */;
    %256 = sin(%255) /* ty=Tensor[(6, 12, 9), float64] */;
    %257 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 12, 9), float64] */, dtype="int32") /* ty=Tensor[(6, 12, 9), int32] */;
    %258 = shape_of(%256, dtype="int32") /* ty=Tensor[(3), int32] */;
    %259 = cast(%256, dtype="int32") /* ty=Tensor[(6, 12, 9), int32] */;
    %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %261 = %252.0;
    %262 = @func_1979() /* ty=Tensor[(5, 7, 9), float32] */;
    %263 = minimum(%259, %260) /* ty=Tensor[(6, 12, 9), int32] */;
    (%261, %var_6530, %262, %263)
  };
  %264(%var_6542, %var_6543) /* ty=(Tensor[(13, 8, 11), float64], Tensor[(1144), uint64], Tensor[(5, 7, 9), float32], Tensor[(6, 12, 9), int32]) */
}

def @func_2366(%var_2364: Tensor[(7, 11, 12), int16], %var_2365: Tensor[(7, 11, 12), int16]) -> (Tensor[(7, 11, 12), int16],) {
  @func_2362(%var_2364, %var_2365) /* ty=(Tensor[(7, 11, 12), int16],) */
}

def @func_4532(%var_4530: Tensor[(5, 10, 2), uint8], %var_4531: Tensor[(5, 10, 2), uint8]) -> (Tensor[(5, 10, 2), uint8], Tensor[(14, 3, 14), float64], Tensor[(42), uint16], Tensor[(6, 100), bool], Tensor[(600), uint32], Tensor[(5, 7, 9), float32], Tensor[(14, 12, 14), float32]) {
  @func_4528(%var_4530, %var_4531) /* ty=(Tensor[(5, 10, 2), uint8], Tensor[(14, 3, 14), float64], Tensor[(42), uint16], Tensor[(6, 100), bool], Tensor[(600), uint32], Tensor[(5, 7, 9), float32], Tensor[(14, 12, 14), float32]) */
}

def @func_4782(%var_4779: Tensor[(14, 12, 14), float32], %var_4780: Tensor[(294), float64], %var_4781: Tensor[(84), float64]) -> (Tensor[(14, 12, 14), bool], Tensor[(3, 7, 14), float64], Tensor[(294), float64], Tensor[(14, 12, 14), float32], Tensor[(3, 14, 2), float64], Tensor[(84), float64]) {
  %282 = fn (%var_4737: Tensor[(14, 12, 14), float32], %var_4745: Tensor[(294), float64], %var_4753: Tensor[(84), float64]) -> (Tensor[(14, 12, 14), bool], Tensor[(3, 7, 14), float64], Tensor[(294), float64], Tensor[(14, 12, 14), float32], Tensor[(3, 14, 2), float64], Tensor[(84), float64]) {
    %265 = @func_4323() /* ty=(Tensor[(14, 12, 14), float32],) */;
    %266 = %265.0;
    %267 = cast(%var_4737, dtype="bool") /* ty=Tensor[(14, 12, 14), bool] */;
    %268 = shape_of(%266, dtype="int32") /* ty=Tensor[(3), int32] */;
    %269 = cast(%266, dtype="bool") /* ty=Tensor[(14, 12, 14), bool] */;
    %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %271 = cast(%var_4745, dtype="float64") /* ty=Tensor[(294), float64] */;
    %272 = reshape(%271, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float64] */;
    %273 = @func_3052(%272) /* ty=(Tensor[(3, 7, 14), float64],) */;
    %274 = @func_2741() /* ty=(Tensor[(14, 12, 14), float32],) */;
    %275 = cast(%var_4753, dtype="float64") /* ty=Tensor[(84), float64] */;
    %276 = reshape(%275, newshape=[3, 14, 2]) /* ty=Tensor[(3, 14, 2), float64] */;
    %277 = @func_873(%276) /* ty=(Tensor[(3, 14, 2), float64],) */;
    %278 = less_equal(%269, %270) /* ty=Tensor[(14, 12, 14), bool] */;
    %279 = %273.0;
    %280 = %274.0;
    %281 = %277.0;
    (%278, %279, %var_4745, %280, %281, %var_4753)
  };
  %282(%var_4779, %var_4780, %var_4781) /* ty=(Tensor[(14, 12, 14), bool], Tensor[(3, 7, 14), float64], Tensor[(294), float64], Tensor[(14, 12, 14), float32], Tensor[(3, 14, 2), float64], Tensor[(84), float64]) */
}

def @func_2116(%var_2099: Tensor[(8, 3), uint64], %var_2100: Tensor[(8, 3), uint64]) -> (Tensor[(8, 3), uint64],) {
  %283 = cast(%var_2100, dtype="uint64") /* ty=Tensor[(8, 3), uint64] */;
  %284 = shape_of(%var_2099, dtype="int32") /* ty=Tensor[(2), int32] */;
  %285 = cast(%var_2099, dtype="uint64") /* ty=Tensor[(8, 3), uint64] */;
  %286 = dyn.reshape(%283, %284, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %287 = minimum(%285, %286) /* ty=Tensor[(8, 3), uint64] */;
  (%287,)
}

def @func_4711() -> Tensor[(5, 7, 9), float32] {
  %289 = fn () -> Tensor[(5, 7, 9), float32] {
    %288 = @func_2798() /* ty=(Tensor[(5, 7, 9), float32],) */;
    %288.0
  };
  %289() /* ty=Tensor[(5, 7, 9), float32] */
}

def @func_3338(%var_3336: Tensor[(1920), int8], %var_3337: Tensor[(294), float64]) -> (Tensor[(5, 7, 9), float64], Tensor[(8, ?, 9), bool], Tensor[(1920), int8], Tensor[(3, 7, 14), float64], Tensor[(294), float64]) {
  @func_3334(%var_3336, %var_3337) /* ty=(Tensor[(5, 7, 9), float64], Tensor[(8, ?, 9), bool], Tensor[(1920), int8], Tensor[(3, 7, 14), float64], Tensor[(294), float64]) */
}

def @func_721(%var_719: Tensor[(15, 8, 16), int8]) -> (Tensor[(8, ?, 9), bool], Tensor[(72), float32], Tensor[(15, 8, 16), float32]) {
  @func_718(%var_719) /* ty=(Tensor[(8, ?, 9), bool], Tensor[(72), float32], Tensor[(15, 8, 16), float32]) */
}

def @func_6686() -> (Tensor[(14, 12, 14), float32], Tensor[(5, 7, 9), float64]) {
  %290 = @func_1856() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %291 = @func_5052() /* ty=(Tensor[(14, 12, 14), float32], Tensor[(5, 7, 9), float64]) */;
  %292 = %290.0;
  %293 = %291.1;
  (%292, %293)
}

def @func_3055(%var_3053: Tensor[(3, 7, 14), float64]) -> (Tensor[(3, 7, 14), float64],) {
  @func_3052(%var_3053) /* ty=(Tensor[(3, 7, 14), float64],) */
}

def @func_4182(%var_4168: Tensor[(72), float32]) -> (Tensor[(14, 12, 14), float32], Tensor[(72), float32], Tensor[(72), float32]) {
  %294 = @func_4029() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %295 = cast(%var_4168, dtype="float32") /* ty=Tensor[(72), float32] */;
  %296 = reshape(%295, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %297 = @func_3947(%296) /* ty=(Tensor[(6, 7, 16), bool], Tensor[(672), int64], Tensor[(72), float32], Tensor[(14, 12, 14), float32]) */;
  %298 = %294.0;
  %299 = %297.2;
  (%298, %299, %var_4168)
}

def @func_3161() -> (Tensor[(5, 7, 9), float32], Tensor[(13, 8, 11), float64], Tensor[(1144, 1), float32]) {
  @func_3159() /* ty=(Tensor[(5, 7, 9), float32], Tensor[(13, 8, 11), float64], Tensor[(1144, 1), float32]) */
}

def @func_5655(%var_5653: Tensor[(1001), uint32], %var_5654: Tensor[(14, 12, 14), int64]) -> (Tensor[(7, 11, 13), float32], Tensor[(1001), uint32], Tensor[(8), uint16], Tensor[(14, 12, 14), float32]) {
  %313 = fn (%var_5640: Tensor[(1001), uint32], %var_5647: Tensor[(14, 12, 14), int64]) -> (Tensor[(7, 11, 13), float32], Tensor[(1001), uint32], Tensor[(8), uint16], Tensor[(14, 12, 14), float32]) {
    %300 = cast(%var_5640, dtype="uint32") /* ty=Tensor[(1001), uint32] */;
    %301 = cast(%var_5640, dtype="uint32") /* ty=Tensor[(1001), uint32] */;
    %302 = reshape(%300, newshape=[7, 11, 13]) /* ty=Tensor[(7, 11, 13), uint32] */;
    %303 = reshape(%301, newshape=[7, 11, 13]) /* ty=Tensor[(7, 11, 13), uint32] */;
    %304 = @func_4595() /* ty=(Tensor[(14, 12, 14), int64],) */;
    %305 = %304.0;
    %306 = cast(%var_5647, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
    %307 = shape_of(%305, dtype="int32") /* ty=Tensor[(3), int32] */;
    %308 = cast(%305, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
    %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %310 = @func_1078(%302, %303) /* ty=Tensor[(7, 11, 13), float32] */;
    %311 = @func_5295() /* ty=Tensor[(8), uint16] */;
    %312 = floor_divide(%308, %309) /* ty=Tensor[(14, 12, 14), float32] */;
    (%310, %var_5640, %311, %312)
  };
  %313(%var_5653, %var_5654) /* ty=(Tensor[(7, 11, 13), float32], Tensor[(1001), uint32], Tensor[(8), uint16], Tensor[(14, 12, 14), float32]) */
}

def @func_6224(%var_6222: Tensor[(72), float32], %var_6223: Tensor[(1001), uint32]) -> (Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float64], Tensor[(72), float32], Tensor[(72), float32], Tensor[(144, 2), int32], Tensor[(1001), uint32], Tensor[(48), int32], Tensor[(14, 12, 14), float32], Tensor[(13, 7, 3), float32], Tensor[(273), float32], Tensor[(14, 12, 14), float32], Tensor[(5, 7, 9), float32]) {
  @func_6220(%var_6222, %var_6223) /* ty=(Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float64], Tensor[(72), float32], Tensor[(72), float32], Tensor[(144, 2), int32], Tensor[(1001), uint32], Tensor[(48), int32], Tensor[(14, 12, 14), float32], Tensor[(13, 7, 3), float32], Tensor[(273), float32], Tensor[(14, 12, 14), float32], Tensor[(5, 7, 9), float32]) */
}

def @func_2600(%var_2556: Tensor[(5, 7, 9), float32], %var_2574: Tensor[(1920), int8]) -> (Tensor[(5, 7, 9), int16], Tensor[(5, 7, 9), float32], Tensor[(5, 7, 9), float32], Tensor[(5, 7, 9), float32], Tensor[(15, 8, 16), float32], Tensor[(1920), int8], Tensor[(14, 12, 14), float32]) {
  %314 = @func_2127() /* ty=Tensor[(5, 7, 9), float32] */;
  %315 = cast(%var_2556, dtype="int16") /* ty=Tensor[(5, 7, 9), int16] */;
  %316 = shape_of(%314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %317 = cast(%314, dtype="int16") /* ty=Tensor[(5, 7, 9), int16] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %319 = cast(%var_2556, dtype="float32") /* ty=Tensor[(5, 7, 9), float32] */;
  %320 = @func_2392() /* ty=(Tensor[(5, 7, 9), float32],) */;
  %321 = cast(%var_2574, dtype="int8") /* ty=Tensor[(1920), int8] */;
  %322 = reshape(%321, newshape=[15, 8, 16]) /* ty=Tensor[(15, 8, 16), int8] */;
  %323 = @func_718(%322) /* ty=(Tensor[(8, ?, 9), bool], Tensor[(72), float32], Tensor[(15, 8, 16), float32]) */;
  %324 = @func_2178() /* ty=(Tensor[(5, 7, 9), float32], Tensor[(14, 12, 14), float32]) */;
  %325 = add(%317, %318) /* ty=Tensor[(5, 7, 9), int16] */;
  %326 = cosh(%319) /* ty=Tensor[(5, 7, 9), float32] */;
  %327 = %320.0;
  %328 = @func_2054() /* ty=Tensor[(5, 7, 9), float32] */;
  %329 = %323.2;
  %330 = %324.1;
  (%325, %326, %327, %328, %329, %var_2574, %330)
}

def @func_5053() -> (Tensor[(14, 12, 14), float32], Tensor[(5, 7, 9), float64]) {
  %336 = fn () -> (Tensor[(14, 12, 14), float32], Tensor[(5, 7, 9), float64]) {
    %331 = @func_4029() /* ty=(Tensor[(14, 12, 14), float32],) */;
    %332 = %331.0;
    %333 = cast(%332, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
    %334 = erf(%333) /* ty=Tensor[(14, 12, 14), float32] */;
    %335 = @func_3577() /* ty=Tensor[(5, 7, 9), float64] */;
    (%334, %335)
  };
  %336() /* ty=(Tensor[(14, 12, 14), float32], Tensor[(5, 7, 9), float64]) */
}

def @func_2056() -> Tensor[(5, 7, 9), float32] {
  @func_2054() /* ty=Tensor[(5, 7, 9), float32] */
}

def @func_952(%var_951: Tensor[(13, 8, 11), uint64]) -> (Tensor[(13, 8, 11), float64],) {
  %348 = fn (%var_914: Tensor[(13, 8, 11), uint64]) -> (Tensor[(13, 8, 11), float64],) {
    %337 = cast(%var_914, dtype="uint64") /* ty=Tensor[(13, 8, 11), uint64] */;
    %338 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(13, 8, 11), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %339 = cast(meta[relay.Constant][18] /* ty=Tensor[(13, 8, 11), uint64] */, dtype="uint64") /* ty=Tensor[(13, 8, 11), uint64] */;
    %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %341 = add(%339, %340) /* ty=Tensor[(13, 8, 11), uint64] */;
    %342 = cast(%341, dtype="float64") /* ty=Tensor[(13, 8, 11), float64] */;
    %343 = log(%342) /* ty=Tensor[(13, 8, 11), float64] */;
    %344 = cast(%343, dtype="float64") /* ty=Tensor[(13, 8, 11), float64] */;
    %345 = cos(%344) /* ty=Tensor[(13, 8, 11), float64] */;
    %346 = cast(%345, dtype="float64") /* ty=Tensor[(13, 8, 11), float64] */;
    %347 = acosh(%346) /* ty=Tensor[(13, 8, 11), float64] */;
    (%347,)
  };
  %348(%var_951) /* ty=(Tensor[(13, 8, 11), float64],) */
}

def @func_2120(%var_2118: Tensor[(8, 3), uint64], %var_2119: Tensor[(8, 3), uint64]) -> (Tensor[(8, 3), uint64],) {
  @func_2116(%var_2118, %var_2119) /* ty=(Tensor[(8, 3), uint64],) */
}

def @func_4106(%var_4105: Tensor[(108), uint32]) -> (Tensor[(14, 12, 14), float32], Tensor[(6, 3, 6), uint32], Tensor[(108), uint32], uint32) {
  %359 = fn (%var_4094: Tensor[(108), uint32]) -> (Tensor[(14, 12, 14), float32], Tensor[(6, 3, 6), uint32], Tensor[(108), uint32], uint32) {
    %349 = @func_1856() /* ty=(Tensor[(14, 12, 14), float32],) */;
    %350 = cast(%var_4094, dtype="uint32") /* ty=Tensor[(108), uint32] */;
    %351 = cast(%var_4094, dtype="uint32") /* ty=Tensor[(108), uint32] */;
    %352 = cast(meta[relay.Constant][19] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %353 = reshape(%350, newshape=[6, 3, 6]) /* ty=Tensor[(6, 3, 6), uint32] */;
    %354 = reshape(%351, newshape=[6, 3, 6]) /* ty=Tensor[(6, 3, 6), uint32] */;
    %355 = reshape(%352, newshape=[]) /* ty=uint32 */;
    %356 = @func_1905(%353, %354, %355) /* ty=(Tensor[(6, 3, 6), uint32], Tensor[(15, 4, 10), uint32], uint32, Tensor[(300, 2), uint32]) */;
    %357 = %349.0;
    %358 = %356.0;
    (%357, %358, %var_4094, meta[relay.Constant][19] /* ty=uint32 */)
  };
  %359(%var_4105) /* ty=(Tensor[(14, 12, 14), float32], Tensor[(6, 3, 6), uint32], Tensor[(108), uint32], uint32) */
}

def @func_5109() -> (Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32]) {
  %360 = @func_3432() /* ty=Tensor[(14, 12, 14), float32] */;
  %361 = cast(%360, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
  %362 = reshape(%361, newshape=[14, 12, 14]) /* ty=Tensor[(14, 12, 14), float32] */;
  %363 = @func_4668(%362) /* ty=(Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32]) */;
  %364 = %363.0;
  (%360, %364)
}

def @func_5224() -> (Tensor[(5, 7, 9), float32],) {
  %366 = fn () -> (Tensor[(5, 7, 9), float32],) {
    %365 = @func_2054() /* ty=Tensor[(5, 7, 9), float32] */;
    (%365,)
  };
  %366() /* ty=(Tensor[(5, 7, 9), float32],) */
}

def @func_4965(%var_4963: Tensor[(13, 1, 12), float32], %var_4964: Tensor[(13, 12, 12), float32]) -> (Tensor[(13, 12, 12), float32], Tensor[(100), uint8], Tensor[(5, 10, 2), float32]) {
  @func_4961(%var_4963, %var_4964) /* ty=(Tensor[(13, 12, 12), float32], Tensor[(100), uint8], Tensor[(5, 10, 2), float32]) */
}

def @func_5292() -> Tensor[(14, 12, 14), float32] {
  @func_5290() /* ty=Tensor[(14, 12, 14), float32] */
}

def @func_1980() -> Tensor[(5, 7, 9), float32] {
  %368 = fn () -> Tensor[(5, 7, 9), float32] {
    %367 = cast(meta[relay.Constant][20] /* ty=Tensor[(5, 7, 9), float32] */, dtype="float32") /* ty=Tensor[(5, 7, 9), float32] */;
    sqrt(%367) /* ty=Tensor[(5, 7, 9), float32] */
  };
  %368() /* ty=Tensor[(5, 7, 9), float32] */
}

def @func_1647() -> Tensor[(14, 12, 14), float32] {
  %369 = fn () -> Tensor[(14, 12, 14), float32] {
    @func_1598() /* ty=Tensor[(14, 12, 14), float32] */
  };
  %369() /* ty=Tensor[(14, 12, 14), float32] */
}

def @func_5370(%var_5368: Tensor[(2, 10, 14), uint64], %var_5369: Tensor[(2, 10, 14), uint64]) -> (Tensor[(2, 10, 14), uint64],) {
  @func_5366(%var_5368, %var_5369) /* ty=(Tensor[(2, 10, 14), uint64],) */
}

def @func_5714() -> (Tensor[(5, 7, 9), float32],) {
  %372 = fn () -> (Tensor[(5, 7, 9), float32],) {
    %370 = @func_3159() /* ty=(Tensor[(5, 7, 9), float32], Tensor[(13, 8, 11), float64], Tensor[(1144, 1), float32]) */;
    %371 = %370.0;
    (%371,)
  };
  %372() /* ty=(Tensor[(5, 7, 9), float32],) */
}

def @func_3475(%var_3466: Tensor[(14, 12, 14), float32]) -> (Tensor[(14, 12, 14), bool], Tensor[(5, 7, 9), float32]) {
  %373 = @func_3103() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %374 = %373.0;
  %375 = cast(%var_3466, dtype="bool") /* ty=Tensor[(14, 12, 14), bool] */;
  %376 = shape_of(%374, dtype="int32") /* ty=Tensor[(3), int32] */;
  %377 = cast(%374, dtype="bool") /* ty=Tensor[(14, 12, 14), bool] */;
  %378 = dyn.reshape(%375, %376, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %379 = @func_2127() /* ty=Tensor[(5, 7, 9), float32] */;
  %380 = cast(%379, dtype="float32") /* ty=Tensor[(5, 7, 9), float32] */;
  %381 = logical_and(%377, %378) /* ty=Tensor[(14, 12, 14), bool] */;
  %382 = cos(%380) /* ty=Tensor[(5, 7, 9), float32] */;
  (%381, %382)
}

def @func_5111() -> (Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32]) {
  @func_5109() /* ty=(Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32]) */
}

def @func_5140() -> (Tensor[(5, 7, 9), float32], Tensor[(24), uint16]) {
  @func_5138() /* ty=(Tensor[(5, 7, 9), float32], Tensor[(24), uint16]) */
}

def @func_4430(%var_4428: Tensor[(4, 6, 8), int64], %var_4429: Tensor[(4, 6, 8), int64]) -> (Tensor[(4, 6, 8), bool], Tensor[(4, 6, 8), float32]) {
  %390 = fn (%var_4407: Tensor[(4, 6, 8), int64], %var_4408: Tensor[(4, 6, 8), int64]) -> (Tensor[(4, 6, 8), bool], Tensor[(4, 6, 8), float32]) {
    %383 = cast(%var_4408, dtype="bool") /* ty=Tensor[(4, 6, 8), bool] */;
    %384 = shape_of(%var_4407, dtype="int32") /* ty=Tensor[(3), int32] */;
    %385 = cast(%var_4407, dtype="bool") /* ty=Tensor[(4, 6, 8), bool] */;
    %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %387 = cast(%var_4407, dtype="float32") /* ty=Tensor[(4, 6, 8), float32] */;
    %388 = not_equal(%385, %386) /* ty=Tensor[(4, 6, 8), bool] */;
    %389 = sigmoid(%387) /* ty=Tensor[(4, 6, 8), float32] */;
    (%388, %389)
  };
  %390(%var_4428, %var_4429) /* ty=(Tensor[(4, 6, 8), bool], Tensor[(4, 6, 8), float32]) */
}

def @func_2362(%var_2345: Tensor[(7, 11, 12), int16], %var_2346: Tensor[(7, 11, 12), int16]) -> (Tensor[(7, 11, 12), int16],) {
  %391 = cast(%var_2346, dtype="int16") /* ty=Tensor[(7, 11, 12), int16] */;
  %392 = shape_of(%var_2345, dtype="int32") /* ty=Tensor[(3), int32] */;
  %393 = cast(%var_2345, dtype="int16") /* ty=Tensor[(7, 11, 12), int16] */;
  %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %395 = bitwise_and(%393, %394) /* ty=Tensor[(7, 11, 12), int16] */;
  (%395,)
}

def @func_4343() -> (Tensor[(5, 7, 9), float32],) {
  %397 = fn () -> (Tensor[(5, 7, 9), float32],) {
    %396 = @func_2127() /* ty=Tensor[(5, 7, 9), float32] */;
    (%396,)
  };
  %397() /* ty=(Tensor[(5, 7, 9), float32],) */
}

def @func_637(%var_635: uint32, %var_636: Tensor[(15, 4, 10), uint32]) -> Tensor[(15, 4, 10), uint32] {
  %400 = fn (%var_617: uint32, %var_618: Tensor[(15, 4, 10), uint32]) -> Tensor[(15, 4, 10), uint32] {
    %398 = cast(%var_617, dtype="uint32") /* ty=uint32 */;
    %399 = cast(%var_618, dtype="uint32") /* ty=Tensor[(15, 4, 10), uint32] */;
    add(%398, %399) /* ty=Tensor[(15, 4, 10), uint32] */
  };
  %400(%var_635, %var_636) /* ty=Tensor[(15, 4, 10), uint32] */
}

def @func_3334(%var_3299: Tensor[(1920), int8], %var_3304: Tensor[(294), float64]) -> (Tensor[(5, 7, 9), float64], Tensor[(8, ?, 9), bool], Tensor[(1920), int8], Tensor[(3, 7, 14), float64], Tensor[(294), float64]) {
  %401 = @func_3078() /* ty=(Tensor[(5, 7, 9), float32],) */;
  %402 = %401.0;
  %403 = cast(%402, dtype="float64") /* ty=Tensor[(5, 7, 9), float64] */;
  %404 = cast(%var_3299, dtype="int8") /* ty=Tensor[(1920), int8] */;
  %405 = reshape(%404, newshape=[15, 8, 16]) /* ty=Tensor[(15, 8, 16), int8] */;
  %406 = @func_718(%405) /* ty=(Tensor[(8, ?, 9), bool], Tensor[(72), float32], Tensor[(15, 8, 16), float32]) */;
  %407 = cast(%var_3304, dtype="float64") /* ty=Tensor[(294), float64] */;
  %408 = reshape(%407, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float64] */;
  %409 = @func_3052(%408) /* ty=(Tensor[(3, 7, 14), float64],) */;
  %410 = tan(%403) /* ty=Tensor[(5, 7, 9), float64] */;
  %411 = %406.0;
  %412 = %409.0;
  (%410, %411, %var_3299, %412, %var_3304)
}

def @func_2845(%var_2836: Tensor[(13, 7, 3), float32]) -> (Tensor[(13, 7, 3), float32],) {
  %413 = cast(%var_2836, dtype="float32") /* ty=Tensor[(13, 7, 3), float32] */;
  %414 = log2(%413) /* ty=Tensor[(13, 7, 3), float32] */;
  (%414,)
}

def @func_6262() -> (Tensor[(14, 12, 14), float64], Tensor[(5, 7, 9), float32]) {
  %418 = fn () -> (Tensor[(14, 12, 14), float64], Tensor[(5, 7, 9), float32]) {
    %415 = @func_5138() /* ty=(Tensor[(5, 7, 9), float32], Tensor[(24), uint16]) */;
    %416 = @func_3012() /* ty=Tensor[(14, 12, 14), float64] */;
    %417 = %415.0;
    (%416, %417)
  };
  %418() /* ty=(Tensor[(14, 12, 14), float64], Tensor[(5, 7, 9), float32]) */
}

def @func_2742() -> (Tensor[(14, 12, 14), float32],) {
  %420 = fn () -> (Tensor[(14, 12, 14), float32],) {
    %419 = @func_1929() /* ty=Tensor[(14, 12, 14), float32] */;
    (%419,)
  };
  %420() /* ty=(Tensor[(14, 12, 14), float32],) */
}

def @func_5138() -> (Tensor[(5, 7, 9), float32], Tensor[(24), uint16]) {
  %421 = @func_4258() /* ty=(Tensor[(14, 12, 14), float32], Tensor[(3, 2, 4), float32], Tensor[(8), uint16], Tensor[(24), uint16]) */;
  %422 = @func_2127() /* ty=Tensor[(5, 7, 9), float32] */;
  %423 = %421.3;
  (%422, %423)
}

def @func_3080() -> (Tensor[(5, 7, 9), float32],) {
  @func_3078() /* ty=(Tensor[(5, 7, 9), float32],) */
}

def @func_91(%var_79: Tensor[(10, 6, 16), float32], %var_83: Tensor[(1, 72), float32]) -> (Tensor[(10, 6, 16), float32], Tensor[(8, ?, 9), bool], Tensor[(1, 72), float32]) {
  %424 = cast(%var_79, dtype="float32") /* ty=Tensor[(10, 6, 16), float32] */;
  %425 = cast(%var_83, dtype="float32") /* ty=Tensor[(1, 72), float32] */;
  %426 = reshape(%425, newshape=[8, 1, 9]) /* ty=Tensor[(8, 1, 9), float32] */;
  %427 = atan(%424) /* ty=Tensor[(10, 6, 16), float32] */;
  %428 = @func_42(%426) /* ty=Tensor[(8, ?, 9), bool] */;
  (%427, %428, %var_83)
}

def @func_3646(%var_3581: Tensor[(6, 7, 16), int64], %var_3582: Tensor[(6, 7, 16), int64], %var_3628: Tensor[(72, 1), float32]) -> (Tensor[(5, 7, 9), float32], Tensor[(6, 7, 16), bool], Tensor[(8, ?, 9), bool], Tensor[(14, 12, 14), uint8], Tensor[(2352), float32], Tensor[(6, 7, 16), bool]) {
  %429 = @func_3078() /* ty=(Tensor[(5, 7, 9), float32],) */;
  %430 = cast(%var_3582, dtype="bool") /* ty=Tensor[(6, 7, 16), bool] */;
  %431 = shape_of(%var_3581, dtype="int32") /* ty=Tensor[(3), int32] */;
  %432 = cast(%var_3581, dtype="bool") /* ty=Tensor[(6, 7, 16), bool] */;
  %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %434 = greater_equal(%432, %433) /* ty=Tensor[(6, 7, 16), bool] */;
  %435 = cast(%434, dtype="uint64") /* ty=Tensor[(6, 7, 16), uint64] */;
  %436 = shape_of(%var_3582, dtype="int32") /* ty=Tensor[(3), int32] */;
  %437 = cast(%var_3582, dtype="uint64") /* ty=Tensor[(6, 7, 16), uint64] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %439 = bitwise_or(%437, %438) /* ty=Tensor[(6, 7, 16), uint64] */;
  %440 = cast(%439, dtype="bool") /* ty=Tensor[(6, 7, 16), bool] */;
  %441 = shape_of(%var_3581, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%var_3581, dtype="bool") /* ty=Tensor[(6, 7, 16), bool] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %444 = cast(%var_3628, dtype="float32") /* ty=Tensor[(72, 1), float32] */;
  %445 = reshape(%444, newshape=[8, 1, 9]) /* ty=Tensor[(8, 1, 9), float32] */;
  %446 = @func_42(%445) /* ty=Tensor[(8, ?, 9), bool] */;
  %447 = cast(%var_3628, dtype="bool") /* ty=Tensor[(72, 1), bool] */;
  %448 = shape_of(%446, dtype="int32") /* ty=Tensor[(3), int32] */;
  %449 = cast(%446, dtype="bool") /* ty=Tensor[(8, ?, 9), bool] */;
  %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %451 = cast(meta[relay.Constant][21] /* ty=Tensor[(2352), float32] */, dtype="float32") /* ty=Tensor[(2352), float32] */;
  %452 = reshape(%451, newshape=[2352]) /* ty=Tensor[(2352), float32] */;
  %453 = @func_3248(%452) /* ty=(Tensor[(13, 8, 11), float64], Tensor[(5, 7, 9), int64], Tensor[(14, 12, 14), uint8], Tensor[(2352), float64]) */;
  %454 = cast(%var_3581, dtype="bool") /* ty=Tensor[(6, 7, 16), bool] */;
  %455 = shape_of(%439, dtype="int32") /* ty=Tensor[(3), int32] */;
  %456 = cast(%439, dtype="bool") /* ty=Tensor[(6, 7, 16), bool] */;
  %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %458 = %429.0;
  %459 = equal(%442, %443) /* ty=Tensor[(6, 7, 16), bool] */;
  %460 = greater(%449, %450) /* ty=Tensor[(8, ?, 9), bool] */;
  %461 = %453.2;
  %462 = greater(%456, %457) /* ty=Tensor[(6, 7, 16), bool] */;
  (%458, %459, %460, %461, meta[relay.Constant][21] /* ty=Tensor[(2352), float32] */, %462)
}

def @func_3052(%var_3049: Tensor[(3, 7, 14), float64]) -> (Tensor[(3, 7, 14), float64],) {
  %463 = cast(%var_3049, dtype="float64") /* ty=Tensor[(3, 7, 14), float64] */;
  %464 = sigmoid(%463) /* ty=Tensor[(3, 7, 14), float64] */;
  (%464,)
}

def @func_3696(%var_3694: Tensor[(1144), uint64]) -> (Tensor[(14, 12, 14), bool], Tensor[(14, 12, 14), float32], Tensor[(13, 8, 11), float64], Tensor[(1144), uint64], Tensor[(5, 7, 9), float32]) {
  @func_3693(%var_3694) /* ty=(Tensor[(14, 12, 14), bool], Tensor[(14, 12, 14), float32], Tensor[(13, 8, 11), float64], Tensor[(1144), uint64], Tensor[(5, 7, 9), float32]) */
}

def @func_2716(%var_2714: Tensor[(24), uint64], %var_2715: Tensor[(14, 12, 14), float32]) -> (Tensor[(8, 3), uint64], Tensor[(14, 12, 14), bool], Tensor[(24), float32], Tensor[(13, 8, 11), float64], Tensor[(1144), uint64]) {
  %483 = fn (%var_2685: Tensor[(24), uint64], %var_2693: Tensor[(14, 12, 14), float32]) -> (Tensor[(8, 3), uint64], Tensor[(14, 12, 14), bool], Tensor[(24), float32], Tensor[(13, 8, 11), float64], Tensor[(1144), uint64]) {
    %465 = cast(%var_2685, dtype="uint64") /* ty=Tensor[(24), uint64] */;
    %466 = cast(%var_2685, dtype="uint64") /* ty=Tensor[(24), uint64] */;
    %467 = reshape(%465, newshape=[8, 3]) /* ty=Tensor[(8, 3), uint64] */;
    %468 = reshape(%466, newshape=[8, 3]) /* ty=Tensor[(8, 3), uint64] */;
    %469 = @func_2116(%467, %468) /* ty=(Tensor[(8, 3), uint64],) */;
    %470 = @func_1598() /* ty=Tensor[(14, 12, 14), float32] */;
    %471 = cast(%var_2693, dtype="bool") /* ty=Tensor[(14, 12, 14), bool] */;
    %472 = shape_of(%470, dtype="int32") /* ty=Tensor[(3), int32] */;
    %473 = cast(%470, dtype="bool") /* ty=Tensor[(14, 12, 14), bool] */;
    %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %475 = cast(%var_2685, dtype="float32") /* ty=Tensor[(24), float32] */;
    %476 = cast(meta[relay.Constant][22] /* ty=Tensor[(1144), uint64] */, dtype="uint64") /* ty=Tensor[(1144), uint64] */;
    %477 = reshape(%476, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), uint64] */;
    %478 = @func_950(%477) /* ty=(Tensor[(13, 8, 11), float64],) */;
    %479 = %469.0;
    %480 = greater_equal(%473, %474) /* ty=Tensor[(14, 12, 14), bool] */;
    %481 = acosh(%475) /* ty=Tensor[(24), float32] */;
    %482 = %478.0;
    (%479, %480, %481, %482, meta[relay.Constant][22] /* ty=Tensor[(1144), uint64] */)
  };
  %483(%var_2714, %var_2715) /* ty=(Tensor[(8, 3), uint64], Tensor[(14, 12, 14), bool], Tensor[(24), float32], Tensor[(13, 8, 11), float64], Tensor[(1144), uint64]) */
}

def @func_4029() -> (Tensor[(14, 12, 14), float32],) {
  %484 = @func_3432() /* ty=Tensor[(14, 12, 14), float32] */;
  (%484,)
}

def @func_5484(%var_5467: Tensor[(72), float32]) -> (Tensor[(72), float32], Tensor[(72), float32], Tensor[(14, 12, 14), bool]) {
  %485 = cast(%var_5467, dtype="float32") /* ty=Tensor[(72), float32] */;
  %486 = reshape(%485, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %487 = @func_4182(%486) /* ty=(Tensor[(14, 12, 14), float32], Tensor[(72), float32], Tensor[(72), float32]) */;
  %488 = @func_3012() /* ty=Tensor[(14, 12, 14), float64] */;
  %489 = cast(%488, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
  %490 = log2(%489) /* ty=Tensor[(14, 12, 14), float32] */;
  %491 = cast(%488, dtype="bool") /* ty=Tensor[(14, 12, 14), bool] */;
  %492 = shape_of(%490, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(%490, dtype="bool") /* ty=Tensor[(14, 12, 14), bool] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %495 = %487.1;
  %496 = less(%493, %494) /* ty=Tensor[(14, 12, 14), bool] */;
  (%495, %var_5467, %496)
}

def @func_3854(%var_3852: Tensor[(13, 77), uint32], %var_3853: Tensor[(48), int32]) -> (Tensor[(14, 12, 14), uint32], Tensor[(7, 11, 13), float32], Tensor[(13, 77), uint32], Tensor[(8, 6, 6), bool], Tensor[(48), int32], Tensor[(144, 2), int32], Tensor[(1144, 1), float32], Tensor[(14, 12, 14), float32]) {
  %522 = fn (%var_3827: Tensor[(13, 77), uint32], %var_3840: Tensor[(48), int32]) -> (Tensor[(14, 12, 14), uint32], Tensor[(7, 11, 13), float32], Tensor[(13, 77), uint32], Tensor[(8, 6, 6), bool], Tensor[(48), int32], Tensor[(144, 2), int32], Tensor[(1144, 1), float32], Tensor[(14, 12, 14), float32]) {
    %497 = @func_1856() /* ty=(Tensor[(14, 12, 14), float32],) */;
    %498 = %497.0;
    %499 = @func_2472() /* ty=(Tensor[(14, 12, 14), float32],) */;
    %500 = %499.0;
    %501 = cast(%500, dtype="uint32") /* ty=Tensor[(14, 12, 14), uint32] */;
    %502 = shape_of(%498, dtype="int32") /* ty=Tensor[(3), int32] */;
    %503 = cast(%498, dtype="uint32") /* ty=Tensor[(14, 12, 14), uint32] */;
    %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %505 = cast(%var_3827, dtype="uint32") /* ty=Tensor[(13, 77), uint32] */;
    %506 = cast(%var_3827, dtype="uint32") /* ty=Tensor[(13, 77), uint32] */;
    %507 = reshape(%505, newshape=[7, 11, 13]) /* ty=Tensor[(7, 11, 13), uint32] */;
    %508 = reshape(%506, newshape=[7, 11, 13]) /* ty=Tensor[(7, 11, 13), uint32] */;
    %509 = cast(%var_3840, dtype="int32") /* ty=Tensor[(48), int32] */;
    %510 = cast(meta[relay.Constant][23] /* ty=Tensor[(144, 2), int32] */, dtype="int32") /* ty=Tensor[(144, 2), int32] */;
    %511 = cast(meta[relay.Constant][23] /* ty=Tensor[(144, 2), int32] */, dtype="float64") /* ty=Tensor[(144, 2), float64] */;
    %512 = reshape(%509, newshape=[8, 1, 6]) /* ty=Tensor[(8, 1, 6), int32] */;
    %513 = reshape(%510, newshape=[8, 6, 6]) /* ty=Tensor[(8, 6, 6), int32] */;
    %514 = reshape(%511, newshape=[8, 6, 6]) /* ty=Tensor[(8, 6, 6), float64] */;
    %515 = @func_2651(%512, %513, %514) /* ty=(Tensor[(8, 6, 6), bool], Tensor[(8, 6, 6), float32]) */;
    %516 = @func_3159() /* ty=(Tensor[(5, 7, 9), float32], Tensor[(13, 8, 11), float64], Tensor[(1144, 1), float32]) */;
    %517 = left_shift(%503, %504) /* ty=Tensor[(14, 12, 14), uint32] */;
    %518 = @func_1078(%507, %508) /* ty=Tensor[(7, 11, 13), float32] */;
    %519 = %515.0;
    %520 = %516.2;
    %521 = @func_3432() /* ty=Tensor[(14, 12, 14), float32] */;
    (%517, %518, %var_3827, %519, %var_3840, meta[relay.Constant][23] /* ty=Tensor[(144, 2), int32] */, %520, %521)
  };
  %522(%var_3852, %var_3853) /* ty=(Tensor[(14, 12, 14), uint32], Tensor[(7, 11, 13), float32], Tensor[(13, 77), uint32], Tensor[(8, 6, 6), bool], Tensor[(48), int32], Tensor[(144, 2), int32], Tensor[(1144, 1), float32], Tensor[(14, 12, 14), float32]) */
}

def @func_3433() -> Tensor[(14, 12, 14), float32] {
  %523 = fn () -> Tensor[(14, 12, 14), float32] {
    @func_1929() /* ty=Tensor[(14, 12, 14), float32] */
  };
  %523() /* ty=Tensor[(14, 12, 14), float32] */
}

def @func_2473() -> (Tensor[(14, 12, 14), float32],) {
  %527 = fn () -> (Tensor[(14, 12, 14), float32],) {
    %524 = @func_1929() /* ty=Tensor[(14, 12, 14), float32] */;
    %525 = cast(%524, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
    %526 = exp(%525) /* ty=Tensor[(14, 12, 14), float32] */;
    (%526,)
  };
  %527() /* ty=(Tensor[(14, 12, 14), float32],) */
}

def @func_2377() -> (Tensor[(14, 12, 14), int64],) {
  @func_2375() /* ty=(Tensor[(14, 12, 14), int64],) */
}

def @func_5925(%var_5923: Tensor[(14, 12, 14), float32]) -> (Tensor[(14, 12, 14), int64], Tensor[(14, 12, 14), float64]) {
  @func_5922(%var_5923) /* ty=(Tensor[(14, 12, 14), int64], Tensor[(14, 12, 14), float64]) */
}

def @func_45(%var_43: Tensor[(8, 1, 9), float32]) -> Tensor[(8, ?, 9), bool] {
  @func_42(%var_43) /* ty=Tensor[(8, ?, 9), bool] */
}

def @func_4323() -> (Tensor[(14, 12, 14), float32],) {
  %528 = @func_2472() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %529 = %528.0;
  (%529,)
}

def @func_718(%var_696: Tensor[(15, 8, 16), int8]) -> (Tensor[(8, ?, 9), bool], Tensor[(72), float32], Tensor[(15, 8, 16), float32]) {
  %530 = cast(meta[relay.Constant][24] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %531 = reshape(%530, newshape=[8, 1, 9]) /* ty=Tensor[(8, 1, 9), float32] */;
  %532 = cast(meta[relay.Constant][25] /* ty=Tensor[(15, 8, 16), int8] */, dtype="int8") /* ty=Tensor[(15, 8, 16), int8] */;
  %533 = shape_of(%var_696, dtype="int32") /* ty=Tensor[(3), int32] */;
  %534 = cast(%var_696, dtype="int8") /* ty=Tensor[(15, 8, 16), int8] */;
  %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %536 = right_shift(%534, %535) /* ty=Tensor[(15, 8, 16), int8] */;
  %537 = cast(%536, dtype="float32") /* ty=Tensor[(15, 8, 16), float32] */;
  %538 = @func_42(%531) /* ty=Tensor[(8, ?, 9), bool] */;
  %539 = exp(%537) /* ty=Tensor[(15, 8, 16), float32] */;
  (%538, meta[relay.Constant][24] /* ty=Tensor[(72), float32] */, %539)
}

def @func_4961(%var_4935: Tensor[(13, 1, 12), float32], %var_4936: Tensor[(13, 12, 12), float32]) -> (Tensor[(13, 12, 12), float32], Tensor[(100), uint8], Tensor[(5, 10, 2), float32]) {
  %540 = cast(%var_4935, dtype="float32") /* ty=Tensor[(13, 1, 12), float32] */;
  %541 = cast(%var_4936, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  %542 = cast(meta[relay.Constant][26] /* ty=Tensor[(100), uint8] */, dtype="uint8") /* ty=Tensor[(100), uint8] */;
  %543 = cast(meta[relay.Constant][26] /* ty=Tensor[(100), uint8] */, dtype="uint8") /* ty=Tensor[(100), uint8] */;
  %544 = reshape(%542, newshape=[5, 10, 2]) /* ty=Tensor[(5, 10, 2), uint8] */;
  %545 = reshape(%543, newshape=[5, 10, 2]) /* ty=Tensor[(5, 10, 2), uint8] */;
  %546 = @func_4528(%544, %545) /* ty=(Tensor[(5, 10, 2), uint8], Tensor[(14, 3, 14), float64], Tensor[(42), uint16], Tensor[(6, 100), bool], Tensor[(600), uint32], Tensor[(5, 7, 9), float32], Tensor[(14, 12, 14), float32]) */;
  %547 = %546.0;
  %548 = cast(%547, dtype="float32") /* ty=Tensor[(5, 10, 2), float32] */;
  %549 = mod(%540, %541) /* ty=Tensor[(13, 12, 12), float32] */;
  %550 = tan(%548) /* ty=Tensor[(5, 10, 2), float32] */;
  (%549, meta[relay.Constant][26] /* ty=Tensor[(100), uint8] */, %550)
}

def @func_4185(%var_4183: Tensor[(72), float32]) -> (Tensor[(14, 12, 14), float32], Tensor[(72), float32], Tensor[(72), float32]) {
  @func_4182(%var_4183) /* ty=(Tensor[(14, 12, 14), float32], Tensor[(72), float32], Tensor[(72), float32]) */
}

def @func_2375() -> (Tensor[(14, 12, 14), int64],) {
  %551 = @func_2178() /* ty=(Tensor[(5, 7, 9), float32], Tensor[(14, 12, 14), float32]) */;
  %552 = %551.1;
  %553 = cast(meta[relay.Constant][27] /* ty=Tensor[(14, 12, 14), float32] */, dtype="int64") /* ty=Tensor[(14, 12, 14), int64] */;
  %554 = shape_of(%552, dtype="int32") /* ty=Tensor[(3), int32] */;
  %555 = cast(%552, dtype="int64") /* ty=Tensor[(14, 12, 14), int64] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %557 = right_shift(%555, %556) /* ty=Tensor[(14, 12, 14), int64] */;
  (%557,)
}

def @func_6506() -> (Tensor[(14, 12, 14), int64], Tensor[(5, 7, 9), float64]) {
  %566 = fn () -> (Tensor[(14, 12, 14), int64], Tensor[(5, 7, 9), float64]) {
    %558 = @func_2375() /* ty=(Tensor[(14, 12, 14), int64],) */;
    %559 = @func_6261() /* ty=(Tensor[(14, 12, 14), float64], Tensor[(5, 7, 9), float32]) */;
    %560 = %559.1;
    %561 = cast(%560, dtype="float32") /* ty=Tensor[(5, 7, 9), float32] */;
    %562 = log2(%561) /* ty=Tensor[(5, 7, 9), float32] */;
    %563 = cast(%562, dtype="float64") /* ty=Tensor[(5, 7, 9), float64] */;
    %564 = %558.0;
    %565 = asin(%563) /* ty=Tensor[(5, 7, 9), float64] */;
    (%564, %565)
  };
  %566() /* ty=(Tensor[(14, 12, 14), int64], Tensor[(5, 7, 9), float64]) */
}

def @func_5317() -> Tensor[(14, 12, 14), float32] {
  %567 = @func_4817() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %567.0
}

def @func_42(%var_17: Tensor[(8, 1, 9), float32]) -> Tensor[(8, ?, 9), bool] {
  %568 = cast(%var_17, dtype="float32") /* ty=Tensor[(8, 1, 9), float32] */;
  %569 = log(%568) /* ty=Tensor[(8, 1, 9), float32] */;
  %570 = cast(%var_17, dtype="bool") /* ty=Tensor[(8, 1, 9), bool] */;
  %571 = shape_of(%569, dtype="int32") /* ty=Tensor[(3), int32] */;
  %572 = cast(%569, dtype="bool") /* ty=Tensor[(8, 1, 9), bool] */;
  %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%572, %573) /* ty=Tensor[(8, ?, 9), bool] */
}

def @func_2940(%var_2939: Tensor[(14, 3, 1), uint16]) -> (Tensor[(14, 3, 14), float64],) {
  %579 = fn (%var_2922: Tensor[(14, 3, 1), uint16]) -> (Tensor[(14, 3, 14), float64],) {
    %574 = cast(%var_2922, dtype="bool") /* ty=Tensor[(14, 3, 1), bool] */;
    %575 = cast(meta[relay.Constant][28] /* ty=Tensor[(14, 3, 14), uint16] */, dtype="bool") /* ty=Tensor[(14, 3, 14), bool] */;
    %576 = equal(%574, %575) /* ty=Tensor[(14, 3, 14), bool] */;
    %577 = cast(%576, dtype="float64") /* ty=Tensor[(14, 3, 14), float64] */;
    %578 = exp(%577) /* ty=Tensor[(14, 3, 14), float64] */;
    (%578,)
  };
  %579(%var_2939) /* ty=(Tensor[(14, 3, 14), float64],) */
}

def @func_4031() -> (Tensor[(14, 12, 14), float32],) {
  @func_4029() /* ty=(Tensor[(14, 12, 14), float32],) */
}

def @func_3078() -> (Tensor[(5, 7, 9), float32],) {
  %580 = @func_2178() /* ty=(Tensor[(5, 7, 9), float32], Tensor[(14, 12, 14), float32]) */;
  %581 = %580.0;
  (%581,)
}

def @func_2462(%var_2460: Tensor[(14, 12, 14), float32], %var_2461: Tensor[(5, 7, 9), float32]) -> (Tensor[(14, 12, 14), bool], Tensor[(7, 11, 13), float32], Tensor[(1001), uint32], Tensor[(5, 7, 9), float32]) {
  %600 = fn (%var_2420: Tensor[(14, 12, 14), float32], %var_2446: Tensor[(5, 7, 9), float32]) -> (Tensor[(14, 12, 14), bool], Tensor[(7, 11, 13), float32], Tensor[(1001), uint32], Tensor[(5, 7, 9), float32]) {
    %582 = @func_1929() /* ty=Tensor[(14, 12, 14), float32] */;
    %583 = cast(%var_2420, dtype="bool") /* ty=Tensor[(14, 12, 14), bool] */;
    %584 = shape_of(%582, dtype="int32") /* ty=Tensor[(3), int32] */;
    %585 = cast(%582, dtype="bool") /* ty=Tensor[(14, 12, 14), bool] */;
    %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %587 = cast(meta[relay.Constant][29] /* ty=Tensor[(1001), uint32] */, dtype="uint32") /* ty=Tensor[(1001), uint32] */;
    %588 = cast(meta[relay.Constant][29] /* ty=Tensor[(1001), uint32] */, dtype="uint32") /* ty=Tensor[(1001), uint32] */;
    %589 = reshape(%587, newshape=[7, 11, 13]) /* ty=Tensor[(7, 11, 13), uint32] */;
    %590 = reshape(%588, newshape=[7, 11, 13]) /* ty=Tensor[(7, 11, 13), uint32] */;
    %591 = @func_2392() /* ty=(Tensor[(5, 7, 9), float32],) */;
    %592 = %591.0;
    %593 = cast(%var_2446, dtype="float32") /* ty=Tensor[(5, 7, 9), float32] */;
    %594 = shape_of(%592, dtype="int32") /* ty=Tensor[(3), int32] */;
    %595 = cast(%592, dtype="float32") /* ty=Tensor[(5, 7, 9), float32] */;
    %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %597 = logical_or(%585, %586) /* ty=Tensor[(14, 12, 14), bool] */;
    %598 = @func_1078(%589, %590) /* ty=Tensor[(7, 11, 13), float32] */;
    %599 = maximum(%595, %596) /* ty=Tensor[(5, 7, 9), float32] */;
    (%597, %598, meta[relay.Constant][29] /* ty=Tensor[(1001), uint32] */, %599)
  };
  %600(%var_2460, %var_2461) /* ty=(Tensor[(14, 12, 14), bool], Tensor[(7, 11, 13), float32], Tensor[(1001), uint32], Tensor[(5, 7, 9), float32]) */
}

def @func_5445() -> (Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32]) {
  %605 = fn () -> (Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32]) {
    %601 = @func_1598() /* ty=Tensor[(14, 12, 14), float32] */;
    %602 = cast(%601, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
    %603 = sinh(%602) /* ty=Tensor[(14, 12, 14), float32] */;
    %604 = @func_5392() /* ty=Tensor[(14, 12, 14), float32] */;
    (%603, %604)
  };
  %605() /* ty=(Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32]) */
}

def @func_2604(%var_2602: Tensor[(5, 7, 9), float32], %var_2603: Tensor[(1920), int8]) -> (Tensor[(5, 7, 9), int16], Tensor[(5, 7, 9), float32], Tensor[(5, 7, 9), float32], Tensor[(5, 7, 9), float32], Tensor[(15, 8, 16), float32], Tensor[(1920), int8], Tensor[(14, 12, 14), float32]) {
  @func_2600(%var_2602, %var_2603) /* ty=(Tensor[(5, 7, 9), int16], Tensor[(5, 7, 9), float32], Tensor[(5, 7, 9), float32], Tensor[(5, 7, 9), float32], Tensor[(15, 8, 16), float32], Tensor[(1920), int8], Tensor[(14, 12, 14), float32]) */
}

def @func_3693(%var_3685: Tensor[(1144), uint64]) -> (Tensor[(14, 12, 14), bool], Tensor[(14, 12, 14), float32], Tensor[(13, 8, 11), float64], Tensor[(1144), uint64], Tensor[(5, 7, 9), float32]) {
  %606 = @func_3012() /* ty=Tensor[(14, 12, 14), float64] */;
  %607 = @func_3012() /* ty=Tensor[(14, 12, 14), float64] */;
  %608 = cast(%607, dtype="bool") /* ty=Tensor[(14, 12, 14), bool] */;
  %609 = shape_of(%606, dtype="int32") /* ty=Tensor[(3), int32] */;
  %610 = cast(%606, dtype="bool") /* ty=Tensor[(14, 12, 14), bool] */;
  %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %612 = cast(%606, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
  %613 = cast(%var_3685, dtype="uint64") /* ty=Tensor[(1144), uint64] */;
  %614 = reshape(%613, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), uint64] */;
  %615 = @func_950(%614) /* ty=(Tensor[(13, 8, 11), float64],) */;
  %616 = equal(%610, %611) /* ty=Tensor[(14, 12, 14), bool] */;
  %617 = asinh(%612) /* ty=Tensor[(14, 12, 14), float32] */;
  %618 = %615.0;
  %619 = @func_1979() /* ty=Tensor[(5, 7, 9), float32] */;
  (%616, %617, %618, %var_3685, %619)
}

def @func_3947(%var_3933: Tensor[(72), float32]) -> (Tensor[(6, 7, 16), bool], Tensor[(672), int64], Tensor[(72), float32], Tensor[(14, 12, 14), float32]) {
  %620 = cast(meta[relay.Constant][30] /* ty=Tensor[(672), int64] */, dtype="int64") /* ty=Tensor[(672), int64] */;
  %621 = cast(meta[relay.Constant][30] /* ty=Tensor[(672), int64] */, dtype="int64") /* ty=Tensor[(672), int64] */;
  %622 = cast(%var_3933, dtype="float32") /* ty=Tensor[(72), float32] */;
  %623 = reshape(%620, newshape=[6, 7, 16]) /* ty=Tensor[(6, 7, 16), int64] */;
  %624 = reshape(%621, newshape=[6, 7, 16]) /* ty=Tensor[(6, 7, 16), int64] */;
  %625 = reshape(%622, newshape=[72, 1]) /* ty=Tensor[(72, 1), float32] */;
  %626 = @func_3646(%623, %624, %625) /* ty=(Tensor[(5, 7, 9), float32], Tensor[(6, 7, 16), bool], Tensor[(8, ?, 9), bool], Tensor[(14, 12, 14), uint8], Tensor[(2352), float32], Tensor[(6, 7, 16), bool]) */;
  %627 = @func_1598() /* ty=Tensor[(14, 12, 14), float32] */;
  %628 = cast(%627, dtype="float64") /* ty=Tensor[(14, 12, 14), float64] */;
  %629 = rsqrt(%628) /* ty=Tensor[(14, 12, 14), float64] */;
  %630 = cast(%629, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
  %631 = %626.1;
  %632 = acos(%630) /* ty=Tensor[(14, 12, 14), float32] */;
  (%631, meta[relay.Constant][30] /* ty=Tensor[(672), int64] */, %var_3933, %632)
}

def @func_3250(%var_3249: Tensor[(2352), float32]) -> (Tensor[(13, 8, 11), float64], Tensor[(5, 7, 9), int64], Tensor[(14, 12, 14), uint8], Tensor[(2352), float64]) {
  %647 = fn (%var_3236: Tensor[(2352), float32]) -> (Tensor[(13, 8, 11), float64], Tensor[(5, 7, 9), int64], Tensor[(14, 12, 14), uint8], Tensor[(2352), float64]) {
    %633 = @func_3159() /* ty=(Tensor[(5, 7, 9), float32], Tensor[(13, 8, 11), float64], Tensor[(1144, 1), float32]) */;
    %634 = @func_2948() /* ty=Tensor[(5, 7, 9), float32] */;
    %635 = @func_2127() /* ty=Tensor[(5, 7, 9), float32] */;
    %636 = cast(%635, dtype="int64") /* ty=Tensor[(5, 7, 9), int64] */;
    %637 = shape_of(%634, dtype="int32") /* ty=Tensor[(3), int32] */;
    %638 = cast(%634, dtype="int64") /* ty=Tensor[(5, 7, 9), int64] */;
    %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %640 = cast(%var_3236, dtype="float32") /* ty=Tensor[(2352), float32] */;
    %641 = reshape(%640, newshape=[14, 12, 14]) /* ty=Tensor[(14, 12, 14), float32] */;
    %642 = cast(%var_3236, dtype="float64") /* ty=Tensor[(2352), float64] */;
    %643 = %633.1;
    %644 = left_shift(%638, %639) /* ty=Tensor[(5, 7, 9), int64] */;
    %645 = @func_1737(%641) /* ty=Tensor[(14, 12, 14), uint8] */;
    %646 = atan(%642) /* ty=Tensor[(2352), float64] */;
    (%643, %644, %645, %646)
  };
  %647(%var_3249) /* ty=(Tensor[(13, 8, 11), float64], Tensor[(5, 7, 9), int64], Tensor[(14, 12, 14), uint8], Tensor[(2352), float64]) */
}

def @func_6668() -> (Tensor[(14, 12, 14), float64], Tensor[(14, 12, 14), float32]) {
  %654 = fn () -> (Tensor[(14, 12, 14), float64], Tensor[(14, 12, 14), float32]) {
    %648 = @func_4258() /* ty=(Tensor[(14, 12, 14), float32], Tensor[(3, 2, 4), float32], Tensor[(8), uint16], Tensor[(24), uint16]) */;
    %649 = %648.0;
    %650 = cast(%649, dtype="float64") /* ty=Tensor[(14, 12, 14), float64] */;
    %651 = cast(%649, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
    %652 = acosh(%650) /* ty=Tensor[(14, 12, 14), float64] */;
    %653 = log(%651) /* ty=Tensor[(14, 12, 14), float32] */;
    (%652, %653)
  };
  %654() /* ty=(Tensor[(14, 12, 14), float64], Tensor[(14, 12, 14), float32]) */
}

def @func_5618(%var_5616: Tensor[(7, 7), float32], %var_5617: Tensor[(1144, 1), uint64]) -> (Tensor[(7, 7), float32], Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32], Tensor[(24), uint64], Tensor[(12, 2), uint64], Tensor[(1144, 1), float32]) {
  @func_5614(%var_5616, %var_5617) /* ty=(Tensor[(7, 7), float32], Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32], Tensor[(24), uint64], Tensor[(12, 2), uint64], Tensor[(1144, 1), float32]) */
}

def @func_2655(%var_2652: Tensor[(8, 1, 6), int32], %var_2653: Tensor[(8, 6, 6), int32], %var_2654: Tensor[(8, 6, 6), float64]) -> (Tensor[(8, 6, 6), bool], Tensor[(8, 6, 6), float32]) {
  %665 = fn (%var_2628: Tensor[(8, 1, 6), int32], %var_2629: Tensor[(8, 6, 6), int32], %var_2642: Tensor[(8, 6, 6), float64]) -> (Tensor[(8, 6, 6), bool], Tensor[(8, 6, 6), float32]) {
    %655 = cast(%var_2628, dtype="bool") /* ty=Tensor[(8, 1, 6), bool] */;
    %656 = cast(%var_2629, dtype="bool") /* ty=Tensor[(8, 6, 6), bool] */;
    %657 = cast(%var_2629, dtype="float64") /* ty=Tensor[(8, 6, 6), float64] */;
    %658 = sigmoid(%657) /* ty=Tensor[(8, 6, 6), float64] */;
    %659 = cast(%var_2642, dtype="float32") /* ty=Tensor[(8, 6, 6), float32] */;
    %660 = shape_of(%658, dtype="int32") /* ty=Tensor[(3), int32] */;
    %661 = cast(%658, dtype="float32") /* ty=Tensor[(8, 6, 6), float32] */;
    %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %663 = greater(%655, %656) /* ty=Tensor[(8, 6, 6), bool] */;
    %664 = floor_divide(%661, %662) /* ty=Tensor[(8, 6, 6), float32] */;
    (%663, %664)
  };
  %665(%var_2652, %var_2653, %var_2654) /* ty=(Tensor[(8, 6, 6), bool], Tensor[(8, 6, 6), float32]) */
}

def @func_5798(%var_5797: Tensor[(72), float32]) -> (Tensor[(14, 12, 14), float32], Tensor[(72), float32], Tensor[(72), float32]) {
  %671 = fn (%var_5790: Tensor[(72), float32]) -> (Tensor[(14, 12, 14), float32], Tensor[(72), float32], Tensor[(72), float32]) {
    %666 = cast(%var_5790, dtype="float32") /* ty=Tensor[(72), float32] */;
    %667 = reshape(%666, newshape=[72]) /* ty=Tensor[(72), float32] */;
    %668 = @func_5484(%667) /* ty=(Tensor[(72), float32], Tensor[(72), float32], Tensor[(14, 12, 14), bool]) */;
    %669 = @func_5317() /* ty=Tensor[(14, 12, 14), float32] */;
    %670 = %668.1;
    (%669, %670, %var_5790)
  };
  %671(%var_5797) /* ty=(Tensor[(14, 12, 14), float32], Tensor[(72), float32], Tensor[(72), float32]) */
}

def @func_5181(%var_5180: Tensor[(5, 14, 8), float32]) -> (Tensor[(5, 14, 8), float32],) {
  %674 = fn (%var_5167: Tensor[(5, 14, 8), float32]) -> (Tensor[(5, 14, 8), float32],) {
    %672 = cast(%var_5167, dtype="float32") /* ty=Tensor[(5, 14, 8), float32] */;
    %673 = erf(%672) /* ty=Tensor[(5, 14, 8), float32] */;
    (%673,)
  };
  %674(%var_5180) /* ty=(Tensor[(5, 14, 8), float32],) */
}

def @func_4645() -> (Tensor[(14, 12, 14), float32],) {
  %675 = @func_2472() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %676 = %675.0;
  (%676,)
}

def @func_3881(%var_3880: Tensor[(14, 5, 8), float32]) -> Tensor[(14, 5, 8), float32] {
  %681 = fn (%var_3873: Tensor[(14, 5, 8), float32]) -> Tensor[(14, 5, 8), float32] {
    %677 = cast(%var_3873, dtype="float32") /* ty=Tensor[(14, 5, 8), float32] */;
    %678 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(14, 5, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %679 = cast(meta[relay.Constant][31] /* ty=Tensor[(14, 5, 8), float32] */, dtype="float32") /* ty=Tensor[(14, 5, 8), float32] */;
    %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    divide(%679, %680) /* ty=Tensor[(14, 5, 8), float32] */
  };
  %681(%var_3880) /* ty=Tensor[(14, 5, 8), float32] */
}

def @func_1905(%var_1894: Tensor[(6, 3, 6), uint32], %var_1895: Tensor[(6, 3, 6), uint32], %var_1900: uint32) -> (Tensor[(6, 3, 6), uint32], Tensor[(15, 4, 10), uint32], uint32, Tensor[(300, 2), uint32]) {
  %682 = cast(%var_1895, dtype="uint32") /* ty=Tensor[(6, 3, 6), uint32] */;
  %683 = shape_of(%var_1894, dtype="int32") /* ty=Tensor[(3), int32] */;
  %684 = cast(%var_1894, dtype="uint32") /* ty=Tensor[(6, 3, 6), uint32] */;
  %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %686 = cast(%var_1900, dtype="uint32") /* ty=uint32 */;
  %687 = cast(meta[relay.Constant][32] /* ty=Tensor[(300, 2), uint32] */, dtype="uint32") /* ty=Tensor[(300, 2), uint32] */;
  %688 = reshape(%686, newshape=[]) /* ty=uint32 */;
  %689 = reshape(%687, newshape=[15, 4, 10]) /* ty=Tensor[(15, 4, 10), uint32] */;
  %690 = right_shift(%684, %685) /* ty=Tensor[(6, 3, 6), uint32] */;
  %691 = @func_634(%688, %689) /* ty=Tensor[(15, 4, 10), uint32] */;
  (%690, %691, %var_1900, meta[relay.Constant][32] /* ty=Tensor[(300, 2), uint32] */)
}

def @func_4597() -> (Tensor[(14, 12, 14), int64],) {
  @func_4595() /* ty=(Tensor[(14, 12, 14), int64],) */
}

def @func_3104() -> (Tensor[(14, 12, 14), float32],) {
  %694 = fn () -> (Tensor[(14, 12, 14), float32],) {
    %692 = @func_2178() /* ty=(Tensor[(5, 7, 9), float32], Tensor[(14, 12, 14), float32]) */;
    %693 = %692.1;
    (%693,)
  };
  %694() /* ty=(Tensor[(14, 12, 14), float32],) */
}

def @func_2538(%var_2537: Tensor[(4, 2, 4), float64]) -> Tensor[(4, 2, 4), float64] {
  %701 = fn (%var_2527: Tensor[(4, 2, 4), float64]) -> Tensor[(4, 2, 4), float64] {
    %695 = cast(%var_2527, dtype="float64") /* ty=Tensor[(4, 2, 4), float64] */;
    %696 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(4, 2, 4), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %697 = cast(meta[relay.Constant][33] /* ty=Tensor[(4, 2, 4), float64] */, dtype="float64") /* ty=Tensor[(4, 2, 4), float64] */;
    %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %699 = divide(%697, %698) /* ty=Tensor[(4, 2, 4), float64] */;
    %700 = cast(%699, dtype="float64") /* ty=Tensor[(4, 2, 4), float64] */;
    log10(%700) /* ty=Tensor[(4, 2, 4), float64] */
  };
  %701(%var_2537) /* ty=Tensor[(4, 2, 4), float64] */
}

def @func_5487(%var_5485: Tensor[(72), float32]) -> (Tensor[(72), float32], Tensor[(72), float32], Tensor[(14, 12, 14), bool]) {
  @func_5484(%var_5485) /* ty=(Tensor[(72), float32], Tensor[(72), float32], Tensor[(14, 12, 14), bool]) */
}

def @func_5366(%var_5354: Tensor[(2, 10, 14), uint64], %var_5355: Tensor[(2, 10, 14), uint64]) -> (Tensor[(2, 10, 14), uint64],) {
  %702 = cast(%var_5355, dtype="uint64") /* ty=Tensor[(2, 10, 14), uint64] */;
  %703 = shape_of(%var_5354, dtype="int32") /* ty=Tensor[(3), int32] */;
  %704 = cast(%var_5354, dtype="uint64") /* ty=Tensor[(2, 10, 14), uint64] */;
  %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %706 = add(%704, %705) /* ty=Tensor[(2, 10, 14), uint64] */;
  (%706,)
}

def @func_4528(%var_4484: Tensor[(5, 10, 2), uint8], %var_4485: Tensor[(5, 10, 2), uint8]) -> (Tensor[(5, 10, 2), uint8], Tensor[(14, 3, 14), float64], Tensor[(42), uint16], Tensor[(6, 100), bool], Tensor[(600), uint32], Tensor[(5, 7, 9), float32], Tensor[(14, 12, 14), float32]) {
  %707 = cast(%var_4485, dtype="uint8") /* ty=Tensor[(5, 10, 2), uint8] */;
  %708 = shape_of(%var_4484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %709 = cast(%var_4484, dtype="uint8") /* ty=Tensor[(5, 10, 2), uint8] */;
  %710 = dyn.reshape(%707, %708, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %711 = cast(meta[relay.Constant][34] /* ty=Tensor[(42), uint16] */, dtype="uint16") /* ty=Tensor[(42), uint16] */;
  %712 = reshape(%711, newshape=[14, 3, 1]) /* ty=Tensor[(14, 3, 1), uint16] */;
  %713 = @func_2938(%712) /* ty=(Tensor[(14, 3, 14), float64],) */;
  %714 = cast(meta[relay.Constant][35] /* ty=Tensor[(600), uint32] */, dtype="uint32") /* ty=Tensor[(600), uint32] */;
  %715 = cast(meta[relay.Constant][35] /* ty=Tensor[(600), uint32] */, dtype="uint32") /* ty=Tensor[(600), uint32] */;
  %716 = reshape(%714, newshape=[6, 100]) /* ty=Tensor[(6, 100), uint32] */;
  %717 = reshape(%715, newshape=[6, 100]) /* ty=Tensor[(6, 100), uint32] */;
  %718 = @func_2236(%716, %717) /* ty=(Tensor[(5, 7, 9), float32], Tensor[(13, 8, 11), float64], Tensor[(1144, 1), uint64], Tensor[(15, 4, 10), uint32], uint32, Tensor[(14, 12, 14), uint8], Tensor[(2352), float32], Tensor[(7, 11, 13), float32], Tensor[(1001), uint32], Tensor[(6, 100), bool]) */;
  %719 = @func_2178() /* ty=(Tensor[(5, 7, 9), float32], Tensor[(14, 12, 14), float32]) */;
  %720 = @func_4029() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %721 = logical_xor(%709, %710) /* ty=Tensor[(5, 10, 2), uint8] */;
  %722 = %713.0;
  %723 = %718.9;
  %724 = %719.0;
  %725 = %720.0;
  (%721, %722, meta[relay.Constant][34] /* ty=Tensor[(42), uint16] */, %723, meta[relay.Constant][35] /* ty=Tensor[(600), uint32] */, %724, %725)
}

def @func_4670(%var_4669: Tensor[(14, 12, 14), float32]) -> (Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32]) {
  %735 = fn (%var_4661: Tensor[(14, 12, 14), float32]) -> (Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32]) {
    %726 = @func_4323() /* ty=(Tensor[(14, 12, 14), float32],) */;
    %727 = %726.0;
    %728 = cast(%var_4661, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
    %729 = shape_of(%727, dtype="int32") /* ty=Tensor[(3), int32] */;
    %730 = cast(%727, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
    %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %732 = @func_1856() /* ty=(Tensor[(14, 12, 14), float32],) */;
    %733 = maximum(%730, %731) /* ty=Tensor[(14, 12, 14), float32] */;
    %734 = %732.0;
    (%733, %734)
  };
  %735(%var_4669) /* ty=(Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32]) */
}

def @func_1384(%var_1365: Tensor[(1, 2, 4), uint16], %var_1366: Tensor[(3, 2, 4), uint16]) -> (Tensor[(3, 2, 4), bool], Tensor[(3, 2, 4), float32]) {
  %736 = cast(%var_1365, dtype="uint16") /* ty=Tensor[(1, 2, 4), uint16] */;
  %737 = cast(%var_1366, dtype="uint16") /* ty=Tensor[(3, 2, 4), uint16] */;
  %738 = bitwise_xor(%736, %737) /* ty=Tensor[(3, 2, 4), uint16] */;
  %739 = cast(%738, dtype="float32") /* ty=Tensor[(3, 2, 4), float32] */;
  %740 = rsqrt(%739) /* ty=Tensor[(3, 2, 4), float32] */;
  %741 = cast(%740, dtype="bool") /* ty=Tensor[(3, 2, 4), bool] */;
  %742 = cast(%var_1365, dtype="bool") /* ty=Tensor[(1, 2, 4), bool] */;
  %743 = cast(%738, dtype="float32") /* ty=Tensor[(3, 2, 4), float32] */;
  %744 = less(%741, %742) /* ty=Tensor[(3, 2, 4), bool] */;
  %745 = atan(%743) /* ty=Tensor[(3, 2, 4), float32] */;
  (%744, %745)
}

def @func_327(%var_279: Tensor[(960), float32], %var_315: Tensor[(10, 9, 2), float64]) -> (Tensor[(960), float32], Tensor[(3, 24), int16], Tensor[(10, 9, 2), bool], Tensor[(8, ?, 9), float32]) {
  %746 = cast(%var_279, dtype="float32") /* ty=Tensor[(960), float32] */;
  %747 = cast(meta[relay.Constant][36] /* ty=Tensor[(3, 24), float32] */, dtype="float32") /* ty=Tensor[(3, 24), float32] */;
  %748 = reshape(%746, newshape=[10, 6, 16]) /* ty=Tensor[(10, 6, 16), float32] */;
  %749 = reshape(%747, newshape=[1, 72]) /* ty=Tensor[(1, 72), float32] */;
  %750 = @func_91(%748, %749) /* ty=(Tensor[(10, 6, 16), float32], Tensor[(8, ?, 9), bool], Tensor[(1, 72), float32]) */;
  %751 = %750.1;
  %752 = cast(%751, dtype="int16") /* ty=Tensor[(8, ?, 9), int16] */;
  %753 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(3, 24), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %754 = cast(meta[relay.Constant][36] /* ty=Tensor[(3, 24), float32] */, dtype="int16") /* ty=Tensor[(3, 24), int16] */;
  %755 = dyn.reshape(%752, %753, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %756 = cast(meta[relay.Constant][37] /* ty=Tensor[(10, 9, 2), float64] */, dtype="float64") /* ty=Tensor[(10, 9, 2), float64] */;
  %757 = cosh(%756) /* ty=Tensor[(10, 9, 2), float64] */;
  %758 = cast(%var_315, dtype="bool") /* ty=Tensor[(10, 9, 2), bool] */;
  %759 = shape_of(%757, dtype="int32") /* ty=Tensor[(3), int32] */;
  %760 = cast(%757, dtype="bool") /* ty=Tensor[(10, 9, 2), bool] */;
  %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %762 = cast(%751, dtype="float32") /* ty=Tensor[(8, ?, 9), float32] */;
  %763 = right_shift(%754, %755) /* ty=Tensor[(3, 24), int16] */;
  %764 = less(%760, %761) /* ty=Tensor[(10, 9, 2), bool] */;
  %765 = tan(%762) /* ty=Tensor[(8, ?, 9), float32] */;
  (%var_279, %763, %764, %765)
}

def @func_5290() -> Tensor[(14, 12, 14), float32] {
  %766 = @func_2741() /* ty=(Tensor[(14, 12, 14), float32],) */;
  %766.0
}

def @func_95(%var_93: Tensor[(10, 6, 16), float32], %var_94: Tensor[(1, 72), float32]) -> (Tensor[(10, 6, 16), float32], Tensor[(8, ?, 9), bool], Tensor[(1, 72), float32]) {
  @func_91(%var_93, %var_94) /* ty=(Tensor[(10, 6, 16), float32], Tensor[(8, ?, 9), bool], Tensor[(1, 72), float32]) */
}

def @func_4647() -> (Tensor[(14, 12, 14), float32],) {
  @func_4645() /* ty=(Tensor[(14, 12, 14), float32],) */
}

def @func_6730() -> Tensor[(14, 12, 14), float32] {
  %768 = fn () -> Tensor[(14, 12, 14), float32] {
    %767 = @func_5407() /* ty=(Tensor[(14, 12, 14), float32],) */;
    %767.0
  };
  %768() /* ty=Tensor[(14, 12, 14), float32] */
}

def @func_5296() -> Tensor[(8), uint16] {
  %770 = fn () -> Tensor[(8), uint16] {
    %769 = @func_4258() /* ty=(Tensor[(14, 12, 14), float32], Tensor[(3, 2, 4), float32], Tensor[(8), uint16], Tensor[(24), uint16]) */;
    %769.2
  };
  %770() /* ty=Tensor[(8), uint16] */
}

def @func_1600() -> Tensor[(14, 12, 14), float32] {
  @func_1598() /* ty=Tensor[(14, 12, 14), float32] */
}

def @func_2054() -> Tensor[(5, 7, 9), float32] {
  @func_1979() /* ty=Tensor[(5, 7, 9), float32] */
}

def @func_5394() -> Tensor[(14, 12, 14), float32] {
  @func_5392() /* ty=Tensor[(14, 12, 14), float32] */
}

def @func_2179() -> (Tensor[(5, 7, 9), float32], Tensor[(14, 12, 14), float32]) {
  %773 = fn () -> (Tensor[(5, 7, 9), float32], Tensor[(14, 12, 14), float32]) {
    %771 = @func_2127() /* ty=Tensor[(5, 7, 9), float32] */;
    %772 = @func_1929() /* ty=Tensor[(14, 12, 14), float32] */;
    (%771, %772)
  };
  %773() /* ty=(Tensor[(5, 7, 9), float32], Tensor[(14, 12, 14), float32]) */
}

def @func_3651(%var_3648: Tensor[(6, 7, 16), int64], %var_3649: Tensor[(6, 7, 16), int64], %var_3650: Tensor[(72, 1), float32]) -> (Tensor[(5, 7, 9), float32], Tensor[(6, 7, 16), bool], Tensor[(8, ?, 9), bool], Tensor[(14, 12, 14), uint8], Tensor[(2352), float32], Tensor[(6, 7, 16), bool]) {
  @func_3646(%var_3648, %var_3649, %var_3650) /* ty=(Tensor[(5, 7, 9), float32], Tensor[(6, 7, 16), bool], Tensor[(8, ?, 9), bool], Tensor[(14, 12, 14), uint8], Tensor[(2352), float32], Tensor[(6, 7, 16), bool]) */
}

def @func_3478(%var_3476: Tensor[(14, 12, 14), float32]) -> (Tensor[(14, 12, 14), bool], Tensor[(5, 7, 9), float32]) {
  @func_3475(%var_3476) /* ty=(Tensor[(14, 12, 14), bool], Tensor[(5, 7, 9), float32]) */
}

def @func_2393() -> (Tensor[(5, 7, 9), float32],) {
  %775 = fn () -> (Tensor[(5, 7, 9), float32],) {
    %774 = @func_2054() /* ty=Tensor[(5, 7, 9), float32] */;
    (%774,)
  };
  %775() /* ty=(Tensor[(5, 7, 9), float32],) */
}

def @func_1388(%var_1386: Tensor[(1, 2, 4), uint16], %var_1387: Tensor[(3, 2, 4), uint16]) -> (Tensor[(3, 2, 4), bool], Tensor[(3, 2, 4), float32]) {
  @func_1384(%var_1386, %var_1387) /* ty=(Tensor[(3, 2, 4), bool], Tensor[(3, 2, 4), float32]) */
}

def @func_4818() -> (Tensor[(14, 12, 14), float32],) {
  %778 = fn () -> (Tensor[(14, 12, 14), float32],) {
    %776 = @func_1856() /* ty=(Tensor[(14, 12, 14), float32],) */;
    %777 = %776.0;
    (%777,)
  };
  %778() /* ty=(Tensor[(14, 12, 14), float32],) */
}

def @func_3429() -> (Tensor[(14, 12, 14), float32], Tensor[(5, 7, 9), float32]) {
  %781 = fn () -> (Tensor[(14, 12, 14), float32], Tensor[(5, 7, 9), float32]) {
    %779 = @func_1929() /* ty=Tensor[(14, 12, 14), float32] */;
    %780 = @func_2054() /* ty=Tensor[(5, 7, 9), float32] */;
    (%779, %780)
  };
  %781() /* ty=(Tensor[(14, 12, 14), float32], Tensor[(5, 7, 9), float32]) */
}

def @func_3012() -> Tensor[(14, 12, 14), float64] {
  %782 = @func_2375() /* ty=(Tensor[(14, 12, 14), int64],) */;
  %783 = %782.0;
  %784 = cast(%783, dtype="float64") /* ty=Tensor[(14, 12, 14), float64] */;
  sqrt(%784) /* ty=Tensor[(14, 12, 14), float64] */
}

def @func_1930() -> Tensor[(14, 12, 14), float32] {
  %785 = fn () -> Tensor[(14, 12, 14), float32] {
    @func_1646() /* ty=Tensor[(14, 12, 14), float32] */
  };
  %785() /* ty=Tensor[(14, 12, 14), float32] */
}

def @func_6633() -> (Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32]) {
  @func_6631() /* ty=(Tensor[(14, 12, 14), float32], Tensor[(14, 12, 14), float32]) */
}

def @func_2799() -> (Tensor[(5, 7, 9), float32],) {
  %787 = fn () -> (Tensor[(5, 7, 9), float32],) {
    %786 = @func_1979() /* ty=Tensor[(5, 7, 9), float32] */;
    (%786,)
  };
  %787() /* ty=(Tensor[(5, 7, 9), float32],) */
}

def @func_5319() -> Tensor[(14, 12, 14), float32] {
  @func_5317() /* ty=Tensor[(14, 12, 14), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */The type inference pass was unable to infer a type for this expression.
This usually occurs when an operator call is under constrained in some way, check other reported errors for hints of what may of happened.

===================================
note: run with `TVM_BACKTRACE=1` environment variable to display a backtrace.
