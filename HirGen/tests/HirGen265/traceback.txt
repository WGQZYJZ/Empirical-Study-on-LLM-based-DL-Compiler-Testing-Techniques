==========mod==========
#[version = "0.0.5"]
def @func_2341() -> (Tensor[(4, 14, 2), float32], Tensor[(2, 14, 6), int8], Tensor[(168), int64]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(168), int64] */, dtype="int64") /* ty=Tensor[(168), int64] */;
  %1 = reshape(%0, newshape=[2, 14, 6]) /* ty=Tensor[(2, 14, 6), int64] */;
  %2 = @func_1614(%1) /* ty=(Tensor[(2, 14, 6), bool], Tensor[(2, 14, 6), int8]) */;
  %3 = @func_1870() /* ty=Tensor[(4, 14, 2), float32] */;
  %4 = %2.1;
  (%3, %4, meta[relay.Constant][0] /* ty=Tensor[(168), int64] */)
}

def @func_6566() -> (Tensor[(168), int64], Tensor[(6, 9, 12), float64]) {
  %5 = @func_2226() /* ty=(Tensor[(6, 9, 12), float64],) */;
  %6 = @func_4095() /* ty=Tensor[(168), int64] */;
  %7 = %5.0;
  (%6, %7)
}

def @func_5674() -> (Tensor[(750), float32], Tensor[(1, 6, 7), float32], uint8) {
  %8 = @func_2908() /* ty=(Tensor[(4, 14, 2), uint32], Tensor[(4, 14, 2), int8], Tensor[(1, 390), float64], Tensor[(750), float32], Tensor[(4, 14, 2), float64], Tensor[(16, 13, 4), int8], Tensor[(4, 208), int8]) */;
  %9 = cast(meta[relay.Constant][1] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %10 = reshape(%9, newshape=[]) /* ty=uint8 */;
  %11 = @func_24(%10) /* ty=(Tensor[(?, 6, 7), float32], Tensor[(1, 6, 7), float32]) */;
  %12 = %8.3;
  %13 = %11.1;
  (%12, %13, meta[relay.Constant][1] /* ty=uint8 */)
}

def @func_2226() -> (Tensor[(6, 9, 12), float64],) {
  %14 = @func_1734() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32], uint8) */;
  %15 = %14.0;
  (%15,)
}

def @func_7252() -> (Tensor[(168), int64], Tensor[(2, 14, 6), int8]) {
  %16 = @func_5017() /* ty=(Tensor[(168), int64],) */;
  %17 = @func_3157() /* ty=(Tensor[(2, 14, 6), int8],) */;
  %18 = %16.0;
  %19 = %17.0;
  (%18, %19)
}

def @func_5514(%var_5508: Tensor[(8, 1, 2), uint32], %var_5509: Tensor[(8, 1, 2), uint32]) -> (Tensor[(8, ?, 2), uint32],) {
  %20 = cast(%var_5509, dtype="uint32") /* ty=Tensor[(8, 1, 2), uint32] */;
  %21 = shape_of(%var_5508, dtype="int32") /* ty=Tensor[(3), int32] */;
  %22 = cast(%var_5508, dtype="uint32") /* ty=Tensor[(8, 1, 2), uint32] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %24 = left_shift(%22, %23) /* ty=Tensor[(8, ?, 2), uint32] */;
  (%24,)
}

def @func_3002() -> (Tensor[(2, 14, 6), float32],) {
  %25 = @func_2341() /* ty=(Tensor[(4, 14, 2), float32], Tensor[(2, 14, 6), int8], Tensor[(168), int64]) */;
  %26 = %25.1;
  %27 = cast(%26, dtype="float32") /* ty=Tensor[(2, 14, 6), float32] */;
  %28 = rsqrt(%27) /* ty=Tensor[(2, 14, 6), float32] */;
  (%28,)
}

def @func_4875() -> (Tensor[(168), int64], Tensor[(16, 16, 5), uint64], uint64) {
  %29 = @func_2330() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(2, 14, 6), int8], Tensor[(168), int64]) */;
  %30 = cast(meta[relay.Constant][2] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %31 = reshape(%30, newshape=[]) /* ty=uint64 */;
  %32 = @func_2087(%31) /* ty=(Tensor[(4, 14, 2), float32], Tensor[(16, 16, 5), uint64], Tensor[(4, 14, 2), float32], Tensor[(6, 9, 12), float64], Tensor[(4, 14, 2), int8]) */;
  %33 = %29.2;
  %34 = %32.1;
  (%33, %34, meta[relay.Constant][2] /* ty=uint64 */)
}

def @func_1429(%var_1427: Tensor[(750), float32]) -> (Tensor[(10, 14, 10), float32], Tensor[(10, 14, 10), float64], Tensor[(1, 390), float64], Tensor[(750), float32]) {
  %35 = cast(meta[relay.Constant][3] /* ty=Tensor[(10, 14, 10), float32] */, dtype="float32") /* ty=Tensor[(10, 14, 10), float32] */;
  %36 = cast(meta[relay.Constant][3] /* ty=Tensor[(10, 14, 10), float32] */, dtype="float32") /* ty=Tensor[(10, 14, 10), float32] */;
  %37 = atanh(%36) /* ty=Tensor[(10, 14, 10), float32] */;
  %38 = cast(%37, dtype="float64") /* ty=Tensor[(10, 14, 10), float64] */;
  %39 = cast(%var_1427, dtype="float32") /* ty=Tensor[(750), float32] */;
  %40 = cast(%var_1427, dtype="float32") /* ty=Tensor[(750), float32] */;
  %41 = reshape(%39, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), float32] */;
  %42 = reshape(%40, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), float32] */;
  %43 = @func_980(%41, %42) /* ty=(Tensor[(10, 5, 15), float32], Tensor[(13, 5, 6), float64], Tensor[(1, 390), float64]) */;
  %44 = cosh(%35) /* ty=Tensor[(10, 14, 10), float32] */;
  %45 = asinh(%38) /* ty=Tensor[(10, 14, 10), float64] */;
  %46 = %43.2;
  (%44, %45, %46, %var_1427)
}

def @func_3803(%var_3788: Tensor[(195, 2), float64]) -> (Tensor[(2, 14, 6), int8], Tensor[(390), float64], Tensor[(112), float32], Tensor[(195, 2), float64]) {
  %47 = @func_3157() /* ty=(Tensor[(2, 14, 6), int8],) */;
  %48 = cast(meta[relay.Constant][4] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %49 = cast(%var_3788, dtype="float64") /* ty=Tensor[(195, 2), float64] */;
  %50 = reshape(%48, newshape=[4, 14, 2]) /* ty=Tensor[(4, 14, 2), float32] */;
  %51 = reshape(%49, newshape=[390]) /* ty=Tensor[(390), float64] */;
  %52 = @func_2276(%50, %51) /* ty=(Tensor[(4, 14, 2), float32], Tensor[(13, 5, 6), float64], Tensor[(390), float64]) */;
  %53 = %47.0;
  %54 = %52.2;
  (%53, %54, meta[relay.Constant][4] /* ty=Tensor[(112), float32] */, %var_3788)
}

def @func_2973(%var_2964: Tensor[(390), float64]) -> (Tensor[(?, 6, 7), float32], Tensor[(13, 5, 6), float64], Tensor[(112), float32], Tensor[(390), float64]) {
  %55 = @func_1816() /* ty=(Tensor[(?, 6, 7), float32],) */;
  %56 = cast(meta[relay.Constant][5] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %57 = cast(%var_2964, dtype="float64") /* ty=Tensor[(390), float64] */;
  %58 = reshape(%56, newshape=[4, 14, 2]) /* ty=Tensor[(4, 14, 2), float32] */;
  %59 = reshape(%57, newshape=[390]) /* ty=Tensor[(390), float64] */;
  %60 = @func_2276(%58, %59) /* ty=(Tensor[(4, 14, 2), float32], Tensor[(13, 5, 6), float64], Tensor[(390), float64]) */;
  %61 = %55.0;
  %62 = %60.1;
  (%61, %62, meta[relay.Constant][5] /* ty=Tensor[(112), float32] */, %var_2964)
}

def @func_6699() -> (uint8,) {
  %63 = @func_1734() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32], uint8) */;
  %64 = %63.2;
  (%64,)
}

def @func_6978(%var_6957: Tensor[(10, 16, 6), float32]) -> (Tensor[(10, 16, 6), float32], Tensor[(2, 14, 6), int8]) {
  %65 = cast(%var_6957, dtype="float32") /* ty=Tensor[(10, 16, 6), float32] */;
  %66 = @func_2341() /* ty=(Tensor[(4, 14, 2), float32], Tensor[(2, 14, 6), int8], Tensor[(168), int64]) */;
  %67 = tan(%65) /* ty=Tensor[(10, 16, 6), float32] */;
  %68 = %66.1;
  (%67, %68)
}

def @func_6726() -> (Tensor[(168), int64],) {
  %69 = @func_5530() /* ty=(Tensor[(168), int64],) */;
  %70 = %69.0;
  (%70,)
}

def @func_2761() -> Tensor[(6, 9, 12), float64] {
  %71 = @func_2352() /* ty=(Tensor[(6, 9, 12), float64],) */;
  %71.0
}

def @func_3486(%var_3442: Tensor[(9, 390), float64]) -> (Tensor[(9, 390), int32],) {
  %72 = @func_2908() /* ty=(Tensor[(4, 14, 2), uint32], Tensor[(4, 14, 2), int8], Tensor[(1, 390), float64], Tensor[(750), float32], Tensor[(4, 14, 2), float64], Tensor[(16, 13, 4), int8], Tensor[(4, 208), int8]) */;
  %73 = %72.2;
  %74 = cast(%73, dtype="float64") /* ty=Tensor[(1, 390), float64] */;
  %75 = cast(%var_3442, dtype="float64") /* ty=Tensor[(9, 390), float64] */;
  %76 = power(%74, %75) /* ty=Tensor[(9, 390), float64] */;
  %77 = cast(%76, dtype="int16") /* ty=Tensor[(9, 390), int16] */;
  %78 = cast(%73, dtype="int16") /* ty=Tensor[(1, 390), int16] */;
  %79 = maximum(%77, %78) /* ty=Tensor[(9, 390), int16] */;
  %80 = cast(%73, dtype="bool") /* ty=Tensor[(1, 390), bool] */;
  %81 = cast(%var_3442, dtype="bool") /* ty=Tensor[(9, 390), bool] */;
  %82 = logical_or(%80, %81) /* ty=Tensor[(9, 390), bool] */;
  %83 = cast(%82, dtype="int16") /* ty=Tensor[(9, 390), int16] */;
  %84 = shape_of(%79, dtype="int32") /* ty=Tensor[(2), int32] */;
  %85 = cast(%79, dtype="int16") /* ty=Tensor[(9, 390), int16] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %87 = multiply(%85, %86) /* ty=Tensor[(9, 390), int16] */;
  %88 = cast(%79, dtype="int32") /* ty=Tensor[(9, 390), int32] */;
  %89 = shape_of(%87, dtype="int32") /* ty=Tensor[(2), int32] */;
  %90 = cast(%87, dtype="int32") /* ty=Tensor[(9, 390), int32] */;
  %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %92 = bitwise_and(%90, %91) /* ty=Tensor[(9, 390), int32] */;
  (%92,)
}

def @func_7147() -> (Tensor[(?, 6, 7), uint32], Tensor[(?, 6, 7), float32]) {
  %93 = @func_3379() /* ty=Tensor[(?, 6, 7), uint32] */;
  %94 = @func_4947() /* ty=Tensor[(?, 6, 7), float32] */;
  (%93, %94)
}

def @func_4502(%var_4491: Tensor[(3510), float64], %var_4497: Tensor[(390), float64]) -> (Tensor[(168), int64], Tensor[(9, 390), int32], Tensor[(3510), float64], Tensor[(13, 5, 6), float64], Tensor[(390), float64]) {
  %95 = @func_3533() /* ty=(Tensor[(168), int64],) */;
  %96 = cast(%var_4491, dtype="float64") /* ty=Tensor[(3510), float64] */;
  %97 = reshape(%96, newshape=[9, 390]) /* ty=Tensor[(9, 390), float64] */;
  %98 = @func_3486(%97) /* ty=(Tensor[(9, 390), int32],) */;
  %99 = cast(%var_4497, dtype="float64") /* ty=Tensor[(390), float64] */;
  %100 = reshape(%99, newshape=[13, 5, 6]) /* ty=Tensor[(13, 5, 6), float64] */;
  %101 = %95.0;
  %102 = %98.0;
  %103 = @func_490(%100) /* ty=Tensor[(13, 5, 6), float64] */;
  (%101, %102, %var_4491, %103, %var_4497)
}

def @func_5165(%var_5160: Tensor[(6, 9, 12), float64]) -> Tensor[(6, 9, 12), float32] {
  %104 = @func_4564() /* ty=(Tensor[(6, 9, 12), float64],) */;
  %105 = %104.0;
  %106 = cast(%var_5160, dtype="float32") /* ty=Tensor[(6, 9, 12), float32] */;
  %107 = shape_of(%105, dtype="int32") /* ty=Tensor[(3), int32] */;
  %108 = cast(%105, dtype="float32") /* ty=Tensor[(6, 9, 12), float32] */;
  %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  minimum(%108, %109) /* ty=Tensor[(6, 9, 12), float32] */
}

def @func_5840() -> (Tensor[(750), float32],) {
  %110 = @func_3311() /* ty=(Tensor[(2, 14, 6), float32], Tensor[(13, 5, 6), float64], Tensor[(750), float32]) */;
  %111 = %110.2;
  (%111,)
}

def @func_5991() -> Tensor[(750), float32] {
  %112 = @func_5840() /* ty=(Tensor[(750), float32],) */;
  %112.0
}

def @func_3379() -> Tensor[(?, 6, 7), uint32] {
  %113 = @func_2939() /* ty=(Tensor[(?, 6, 7), float32], Tensor[(1, 390), float64], Tensor[(1, 390), float64]) */;
  %114 = %113.0;
  %115 = @func_2215() /* ty=Tensor[(?, 6, 7), float32] */;
  %116 = cast(%115, dtype="uint32") /* ty=Tensor[(?, 6, 7), uint32] */;
  %117 = shape_of(%114, dtype="int32") /* ty=Tensor[(3), int32] */;
  %118 = cast(%114, dtype="uint32") /* ty=Tensor[(?, 6, 7), uint32] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_or(%118, %119) /* ty=Tensor[(?, 6, 7), uint32] */
}

def @func_6039(%var_6017: Tensor[(2, 14, 6), int8], %var_6028: Tensor[(225), float32]) -> (Tensor[(5, 9, 5), float32], Tensor[(225), float32], Tensor[(2, 14, 6), uint8]) {
  %120 = cast(%var_6028, dtype="float32") /* ty=Tensor[(225), float32] */;
  %121 = reshape(%120, newshape=[5, 9, 5]) /* ty=Tensor[(5, 9, 5), float32] */;
  %122 = @func_2330() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(2, 14, 6), int8], Tensor[(168), int64]) */;
  %123 = %122.1;
  %124 = cast(%var_6017, dtype="uint32") /* ty=Tensor[(2, 14, 6), uint32] */;
  %125 = shape_of(%123, dtype="int32") /* ty=Tensor[(3), int32] */;
  %126 = cast(%123, dtype="uint32") /* ty=Tensor[(2, 14, 6), uint32] */;
  %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %128 = bitwise_xor(%126, %127) /* ty=Tensor[(2, 14, 6), uint32] */;
  %129 = cast(%123, dtype="uint8") /* ty=Tensor[(2, 14, 6), uint8] */;
  %130 = shape_of(%128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %131 = cast(%128, dtype="uint8") /* ty=Tensor[(2, 14, 6), uint8] */;
  %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %133 = @func_171(%121) /* ty=Tensor[(5, 9, 5), float32] */;
  %134 = logical_xor(%131, %132) /* ty=Tensor[(2, 14, 6), uint8] */;
  (%133, %var_6028, %134)
}

def @func_1734() -> (Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32], uint8) {
  %135 = cast(meta[relay.Constant][6] /* ty=Tensor[(6, 9, 12), float64] */, dtype="float64") /* ty=Tensor[(6, 9, 12), float64] */;
  %136 = cast(meta[relay.Constant][7] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %137 = reshape(%136, newshape=[]) /* ty=uint8 */;
  %138 = @func_24(%137) /* ty=(Tensor[(?, 6, 7), float32], Tensor[(1, 6, 7), float32]) */;
  %139 = log(%135) /* ty=Tensor[(6, 9, 12), float64] */;
  %140 = %138.0;
  (%139, %140, meta[relay.Constant][7] /* ty=uint8 */)
}

def @func_3088() -> Tensor[(2, 14, 6), float32] {
  %141 = @func_3002() /* ty=(Tensor[(2, 14, 6), float32],) */;
  %141.0
}

def @func_4678(%var_4654: Tensor[(14, 12, 11), float64]) -> (Tensor[(14, 12, 11), float64],) {
  %142 = cast(%var_4654, dtype="float64") /* ty=Tensor[(14, 12, 11), float64] */;
  %143 = cos(%142) /* ty=Tensor[(14, 12, 11), float64] */;
  (%143,)
}

def @func_6469(%var_6453: Tensor[(10, 75), float32]) -> (Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32], Tensor[(13, 5, 6), float64], Tensor[(10, 75), bool]) {
  %144 = @func_3693() /* ty=(Tensor[(?, 6, 7), float32],) */;
  %145 = cast(meta[relay.Constant][8] /* ty=Tensor[(10, 75), float32] */, dtype="float32") /* ty=Tensor[(10, 75), float32] */;
  %146 = cast(meta[relay.Constant][8] /* ty=Tensor[(10, 75), float32] */, dtype="float32") /* ty=Tensor[(10, 75), float32] */;
  %147 = reshape(%145, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), float32] */;
  %148 = reshape(%146, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), float32] */;
  %149 = @func_980(%147, %148) /* ty=(Tensor[(10, 5, 15), float32], Tensor[(13, 5, 6), float64], Tensor[(1, 390), float64]) */;
  %150 = cast(%var_6453, dtype="uint8") /* ty=Tensor[(10, 75), uint8] */;
  %151 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(10, 75), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %152 = cast(meta[relay.Constant][8] /* ty=Tensor[(10, 75), float32] */, dtype="uint8") /* ty=Tensor[(10, 75), uint8] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %154 = add(%152, %153) /* ty=Tensor[(10, 75), uint8] */;
  %155 = cast(%154, dtype="bool") /* ty=Tensor[(10, 75), bool] */;
  %156 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(10, 75), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %157 = cast(meta[relay.Constant][8] /* ty=Tensor[(10, 75), float32] */, dtype="bool") /* ty=Tensor[(10, 75), bool] */;
  %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %159 = @func_2761() /* ty=Tensor[(6, 9, 12), float64] */;
  %160 = %144.0;
  %161 = %149.1;
  %162 = less_equal(%157, %158) /* ty=Tensor[(10, 75), bool] */;
  (%159, %160, %161, %162)
}

def @func_7622(%var_7585: uint64, %var_7595: Tensor[(832), float32]) -> (Tensor[(5, 16, 12), uint64], Tensor[(168), int64], Tensor[(832), float32]) {
  %163 = cast(%var_7585, dtype="uint64") /* ty=uint64 */;
  %164 = cast(meta[relay.Constant][9] /* ty=Tensor[(5, 16, 12), uint64] */, dtype="uint64") /* ty=Tensor[(5, 16, 12), uint64] */;
  %165 = cast(%var_7595, dtype="float32") /* ty=Tensor[(832), float32] */;
  %166 = reshape(%165, newshape=[832]) /* ty=Tensor[(832), float32] */;
  %167 = @func_5278(%166) /* ty=(Tensor[(168), int64], Tensor[(16, 4, 13), float32], Tensor[(832), float32]) */;
  %168 = right_shift(%163, %164) /* ty=Tensor[(5, 16, 12), uint64] */;
  %169 = %167.0;
  (%168, %169, %var_7595)
}

def @func_3625() -> (Tensor[(2, 14, 6), int32],) {
  %170 = @func_3088() /* ty=Tensor[(2, 14, 6), float32] */;
  %171 = cast(meta[relay.Constant][10] /* ty=Tensor[(2, 14, 6), float32] */, dtype="int32") /* ty=Tensor[(2, 14, 6), int32] */;
  %172 = shape_of(%170, dtype="int32") /* ty=Tensor[(3), int32] */;
  %173 = cast(%170, dtype="int32") /* ty=Tensor[(2, 14, 6), int32] */;
  %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %175 = right_shift(%173, %174) /* ty=Tensor[(2, 14, 6), int32] */;
  (%175,)
}

def @func_5360(%var_5351: Tensor[(13, 1, 5), float32], %var_5357: Tensor[(288), float32], %var_5358: Tensor[(225), float32]) -> (Tensor[(13, 1, 5), float32], Tensor[(5, 9, 5), float32], Tensor[(288), float32], Tensor[(225), float32]) {
  %176 = cast(%var_5351, dtype="float32") /* ty=Tensor[(13, 1, 5), float32] */;
  %177 = cast(%var_5357, dtype="float32") /* ty=Tensor[(288), float32] */;
  %178 = cast(%var_5358, dtype="float32") /* ty=Tensor[(225), float32] */;
  %179 = reshape(%177, newshape=[12, 2, 12]) /* ty=Tensor[(12, 2, 12), float32] */;
  %180 = reshape(%178, newshape=[5, 45]) /* ty=Tensor[(5, 45), float32] */;
  %181 = @func_1210(%179, %180) /* ty=(Tensor[(12, 2, 12), float32], Tensor[(5, 9, 5), float32], Tensor[(5, 45), float32], Tensor[(13, 5, 6), float64], Tensor[(390), float64]) */;
  %182 = acosh(%176) /* ty=Tensor[(13, 1, 5), float32] */;
  %183 = %181.1;
  (%182, %183, %var_5357, %var_5358)
}

def @func_5689() -> (Tensor[(?, 6, 7), float32], Tensor[(6, 9, 12), float64]) {
  %184 = @func_1816() /* ty=(Tensor[(?, 6, 7), float32],) */;
  %185 = %184.0;
  %186 = @func_5003() /* ty=Tensor[(6, 9, 12), float64] */;
  (%185, %186)
}

def @func_4220(%var_4215: Tensor[(5, 16, 13), float64], %var_4216: Tensor[(5, 16, 13), float64]) -> Tensor[(5, 16, 13), float64] {
  %187 = cast(%var_4216, dtype="float64") /* ty=Tensor[(5, 16, 13), float64] */;
  %188 = shape_of(%var_4215, dtype="int32") /* ty=Tensor[(3), int32] */;
  %189 = cast(%var_4215, dtype="float64") /* ty=Tensor[(5, 16, 13), float64] */;
  %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%189, %190) /* ty=Tensor[(5, 16, 13), float64] */
}

def @func_5530() -> (Tensor[(168), int64],) {
  %191 = @func_4341() /* ty=Tensor[(168), int64] */;
  (%191,)
}

def @func_5871(%var_5861: Tensor[(288), float32], %var_5862: Tensor[(25, 9), float32]) -> (Tensor[(6, 9, 12), float64], Tensor[(390), float64], Tensor[(288), float32], Tensor[(25, 9), float32]) {
  %192 = cast(%var_5861, dtype="float32") /* ty=Tensor[(288), float32] */;
  %193 = cast(%var_5862, dtype="float32") /* ty=Tensor[(25, 9), float32] */;
  %194 = reshape(%192, newshape=[12, 2, 12]) /* ty=Tensor[(12, 2, 12), float32] */;
  %195 = reshape(%193, newshape=[5, 45]) /* ty=Tensor[(5, 45), float32] */;
  %196 = @func_1210(%194, %195) /* ty=(Tensor[(12, 2, 12), float32], Tensor[(5, 9, 5), float32], Tensor[(5, 45), float32], Tensor[(13, 5, 6), float64], Tensor[(390), float64]) */;
  %197 = cast(%var_5862, dtype="float32") /* ty=Tensor[(25, 9), float32] */;
  %198 = @func_4798() /* ty=Tensor[(6, 9, 12), float64] */;
  %199 = %196.4;
  %200 = sqrt(%197) /* ty=Tensor[(25, 9), float32] */;
  (%198, %199, %var_5861, %200)
}

def @func_4417(%var_4353: Tensor[(6, 12, 3), bool], %var_4354: Tensor[(6, 12, 3), bool]) -> (Tensor[(6, 12, 3), bool], Tensor[(?, 6, 7), float64], Tensor[(?, 6, 7), float32], Tensor[(168), int64]) {
  %201 = cast(%var_4354, dtype="bool") /* ty=Tensor[(6, 12, 3), bool] */;
  %202 = shape_of(%var_4353, dtype="int32") /* ty=Tensor[(3), int32] */;
  %203 = cast(%var_4353, dtype="bool") /* ty=Tensor[(6, 12, 3), bool] */;
  %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %205 = @func_3724() /* ty=(Tensor[(?, 6, 7), float64],) */;
  %206 = @func_4135() /* ty=(Tensor[(?, 6, 7), float32],) */;
  %207 = @func_2330() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(2, 14, 6), int8], Tensor[(168), int64]) */;
  %208 = logical_and(%203, %204) /* ty=Tensor[(6, 12, 3), bool] */;
  %209 = %205.0;
  %210 = %206.0;
  %211 = %207.2;
  (%208, %209, %210, %211)
}

def @func_4964() -> Tensor[(2, 14, 6), float32] {
  @func_3088() /* ty=Tensor[(2, 14, 6), float32] */
}

def @func_3157() -> (Tensor[(2, 14, 6), int8],) {
  %212 = @func_2341() /* ty=(Tensor[(4, 14, 2), float32], Tensor[(2, 14, 6), int8], Tensor[(168), int64]) */;
  %213 = %212.1;
  (%213,)
}

def @func_5613() -> (Tensor[(6, 9, 12), float64], Tensor[(750), float32], Tensor[(750, 1), float32], Tensor[(?, 6, 7), float32], Tensor[(750, 225), int32], Tensor[(225), float32], Tensor[(112), float32]) {
  %214 = @func_2226() /* ty=(Tensor[(6, 9, 12), float64],) */;
  %215 = cast(meta[relay.Constant][11] /* ty=Tensor[(750, 1), float32] */, dtype="float32") /* ty=Tensor[(750, 1), float32] */;
  %216 = reshape(%215, newshape=[750]) /* ty=Tensor[(750), float32] */;
  %217 = @func_3281(%216) /* ty=(Tensor[(?, 6, 7), float32], Tensor[(10, 5, 15), float32], Tensor[(750), float32]) */;
  %218 = @func_1816() /* ty=(Tensor[(?, 6, 7), float32],) */;
  %219 = cast(meta[relay.Constant][12] /* ty=Tensor[(225), float32] */, dtype="float32") /* ty=Tensor[(225), float32] */;
  %220 = cast(meta[relay.Constant][13] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %221 = reshape(%219, newshape=[225]) /* ty=Tensor[(225), float32] */;
  %222 = reshape(%220, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %223 = @func_2562(%221, %222) /* ty=(Tensor[(?, 6, 7), float32], Tensor[(5, 45), float32], Tensor[(288), float32], Tensor[(750, 390), bool], Tensor[(750, 225), int32], Tensor[(832), int8], Tensor[(1280), uint64], Tensor[(112), float32]) */;
  %224 = %214.0;
  %225 = %217.2;
  %226 = %218.0;
  %227 = %223.4;
  (%224, %225, meta[relay.Constant][11] /* ty=Tensor[(750, 1), float32] */, %226, %227, meta[relay.Constant][12] /* ty=Tensor[(225), float32] */, meta[relay.Constant][13] /* ty=Tensor[(112), float32] */)
}

def @func_1870() -> Tensor[(4, 14, 2), float32] {
  %228 = cast(meta[relay.Constant][14] /* ty=Tensor[(4, 14, 2), float32] */, dtype="float32") /* ty=Tensor[(4, 14, 2), float32] */;
  exp(%228) /* ty=Tensor[(4, 14, 2), float32] */
}

def @func_6936() -> Tensor[(168), int64] {
  %229 = @func_5530() /* ty=(Tensor[(168), int64],) */;
  %229.0
}

def @func_7061(%var_7054: Tensor[(1, 8, 10), bool], %var_7055: Tensor[(4, 8, 10), bool]) -> Tensor[(4, 8, 10), bool] {
  %230 = cast(%var_7054, dtype="bool") /* ty=Tensor[(1, 8, 10), bool] */;
  %231 = cast(%var_7055, dtype="bool") /* ty=Tensor[(4, 8, 10), bool] */;
  logical_and(%230, %231) /* ty=Tensor[(4, 8, 10), bool] */
}

def @func_1534(%var_1508: Tensor[(15, 13, 6), float32]) -> (Tensor[(15, 13, 6), float32], uint64, Tensor[(1, 832), int8]) {
  %232 = cast(%var_1508, dtype="float32") /* ty=Tensor[(15, 13, 6), float32] */;
  %233 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 832), int8] */, dtype="int8") /* ty=Tensor[(1, 832), int8] */;
  %234 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 832), int8] */, dtype="int8") /* ty=Tensor[(1, 832), int8] */;
  %235 = reshape(%233, newshape=[16, 13, 4]) /* ty=Tensor[(16, 13, 4), int8] */;
  %236 = reshape(%234, newshape=[16, 13, 4]) /* ty=Tensor[(16, 13, 4), int8] */;
  %237 = @func_1120(%235, %236) /* ty=(Tensor[(16, 13, 4), int8], Tensor[(16, 16, 5), uint64], uint64) */;
  %238 = asinh(%232) /* ty=Tensor[(15, 13, 6), float32] */;
  %239 = %237.2;
  (%238, %239, meta[relay.Constant][15] /* ty=Tensor[(1, 832), int8] */)
}

def @func_2215() -> Tensor[(?, 6, 7), float32] {
  %240 = @func_1816() /* ty=(Tensor[(?, 6, 7), float32],) */;
  %240.0
}

def @func_5198() -> (Tensor[(?, 6, 7), uint32], Tensor[(?, 6, 7), float64]) {
  %241 = @func_3724() /* ty=(Tensor[(?, 6, 7), float64],) */;
  %242 = @func_3379() /* ty=Tensor[(?, 6, 7), uint32] */;
  %243 = %241.0;
  (%242, %243)
}

def @func_5898(%var_5889: Tensor[(9, 1, 5), uint64]) -> (Tensor[(9, 1, 5), uint64],) {
  %244 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 1, 5), uint64] */, dtype="uint64") /* ty=Tensor[(1, 1, 5), uint64] */;
  %245 = cast(%var_5889, dtype="uint64") /* ty=Tensor[(9, 1, 5), uint64] */;
  %246 = right_shift(%244, %245) /* ty=Tensor[(9, 1, 5), uint64] */;
  (%246,)
}

def @func_7541() -> uint8 {
  %247 = @func_6699() /* ty=(uint8,) */;
  %247.0
}

def @func_65(%var_55: Tensor[(4, 4, 9), float32]) -> (Tensor[(4, 4, 9), float32],) {
  %248 = cast(%var_55, dtype="float32") /* ty=Tensor[(4, 4, 9), float32] */;
  %249 = erf(%248) /* ty=Tensor[(4, 4, 9), float32] */;
  (%249,)
}

def @func_6227(%var_6206: Tensor[(12, 9, 7), float64]) -> (Tensor[(168), int64], Tensor[(12, 9, 7), float64]) {
  %250 = @func_5017() /* ty=(Tensor[(168), int64],) */;
  %251 = cast(%var_6206, dtype="float64") /* ty=Tensor[(12, 9, 7), float64] */;
  %252 = log10(%251) /* ty=Tensor[(12, 9, 7), float64] */;
  %253 = cast(%252, dtype="float64") /* ty=Tensor[(12, 9, 7), float64] */;
  %254 = %250.0;
  %255 = sinh(%253) /* ty=Tensor[(12, 9, 7), float64] */;
  (%254, %255)
}

def @func_5775() -> Tensor[(6, 9, 12), float64] {
  %256 = @func_1734() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32], uint8) */;
  %256.0
}

def @func_2682(%var_2641: Tensor[(8, 16, 15), float64], %var_2670: Tensor[(8, 16, 15), float64]) -> Tensor[(8, 16, 15), bool] {
  %257 = cast(%var_2641, dtype="float64") /* ty=Tensor[(8, 16, 15), float64] */;
  %258 = sqrt(%257) /* ty=Tensor[(8, 16, 15), float64] */;
  %259 = cast(%var_2670, dtype="bool") /* ty=Tensor[(8, 16, 15), bool] */;
  %260 = shape_of(%258, dtype="int32") /* ty=Tensor[(3), int32] */;
  %261 = cast(%258, dtype="bool") /* ty=Tensor[(8, 16, 15), bool] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%261, %262) /* ty=Tensor[(8, 16, 15), bool] */
}

def @func_980(%var_953: Tensor[(10, 5, 15), float32], %var_954: Tensor[(10, 5, 15), float32]) -> (Tensor[(10, 5, 15), float32], Tensor[(13, 5, 6), float64], Tensor[(1, 390), float64]) {
  %263 = cast(%var_954, dtype="float32") /* ty=Tensor[(10, 5, 15), float32] */;
  %264 = shape_of(%var_953, dtype="int32") /* ty=Tensor[(3), int32] */;
  %265 = cast(%var_953, dtype="float32") /* ty=Tensor[(10, 5, 15), float32] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %267 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 390), float64] */, dtype="float64") /* ty=Tensor[(1, 390), float64] */;
  %268 = reshape(%267, newshape=[13, 5, 6]) /* ty=Tensor[(13, 5, 6), float64] */;
  %269 = maximum(%265, %266) /* ty=Tensor[(10, 5, 15), float32] */;
  %270 = @func_490(%268) /* ty=Tensor[(13, 5, 6), float64] */;
  (%269, %270, meta[relay.Constant][17] /* ty=Tensor[(1, 390), float64] */)
}

def @func_5121() -> (Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float64]) {
  %271 = @func_3724() /* ty=(Tensor[(?, 6, 7), float64],) */;
  %272 = @func_2761() /* ty=Tensor[(6, 9, 12), float64] */;
  %273 = %271.0;
  (%272, %273)
}

def @func_1120(%var_1092: Tensor[(16, 13, 4), int8], %var_1093: Tensor[(16, 13, 4), int8]) -> (Tensor[(16, 13, 4), int8], Tensor[(16, 16, 5), uint64], uint64) {
  %274 = cast(%var_1093, dtype="int8") /* ty=Tensor[(16, 13, 4), int8] */;
  %275 = shape_of(%var_1092, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(%var_1092, dtype="int8") /* ty=Tensor[(16, 13, 4), int8] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %278 = cast(meta[relay.Constant][18] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %279 = reshape(%278, newshape=[]) /* ty=uint64 */;
  %280 = @func_869(%279) /* ty=(Tensor[(16, 16, 5), uint64],) */;
  %281 = add(%276, %277) /* ty=Tensor[(16, 13, 4), int8] */;
  %282 = %280.0;
  (%281, %282, meta[relay.Constant][18] /* ty=uint64 */)
}

def @func_6116(%var_6080: Tensor[(10, 6, 7), float32]) -> (Tensor[(10, 6, 7), float32], Tensor[(10, 6, 7), int16], Tensor[(6, 9, 12), float64]) {
  %283 = @func_4210() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32]) */;
  %284 = %283.1;
  %285 = cast(%284, dtype="float32") /* ty=Tensor[(?, 6, 7), float32] */;
  %286 = cast(%var_6080, dtype="float32") /* ty=Tensor[(10, 6, 7), float32] */;
  %287 = cast(%var_6080, dtype="int16") /* ty=Tensor[(10, 6, 7), int16] */;
  %288 = cast(%284, dtype="int16") /* ty=Tensor[(?, 6, 7), int16] */;
  %289 = minimum(%285, %286) /* ty=Tensor[(10, 6, 7), float32] */;
  %290 = right_shift(%287, %288) /* ty=Tensor[(10, 6, 7), int16] */;
  %291 = @func_5775() /* ty=Tensor[(6, 9, 12), float64] */;
  (%289, %290, %291)
}

def @func_5430(%var_5409: Tensor[(450), int64]) -> (Tensor[(6, 15, 5), bool], Tensor[(450), int64], Tensor[(?, 6, 7), bool]) {
  %292 = cast(%var_5409, dtype="int64") /* ty=Tensor[(450), int64] */;
  %293 = reshape(%292, newshape=[6, 15, 5]) /* ty=Tensor[(6, 15, 5), int64] */;
  %294 = @func_3411(%293) /* ty=(Tensor[(6, 15, 5), bool], Tensor[(6, 9, 12), float64]) */;
  %295 = @func_4947() /* ty=Tensor[(?, 6, 7), float32] */;
  %296 = cast(%295, dtype="float64") /* ty=Tensor[(?, 6, 7), float64] */;
  %297 = atanh(%296) /* ty=Tensor[(?, 6, 7), float64] */;
  %298 = cast(%295, dtype="bool") /* ty=Tensor[(?, 6, 7), bool] */;
  %299 = shape_of(%297, dtype="int32") /* ty=Tensor[(3), int32] */;
  %300 = cast(%297, dtype="bool") /* ty=Tensor[(?, 6, 7), bool] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %302 = %294.0;
  %303 = greater(%300, %301) /* ty=Tensor[(?, 6, 7), bool] */;
  (%302, %var_5409, %303)
}

def @func_490(%var_486: Tensor[(13, 5, 6), float64]) -> Tensor[(13, 5, 6), float64] {
  %304 = cast(4.16901f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %305 = cast(%var_486, dtype="float64") /* ty=Tensor[(13, 5, 6), float64] */;
  mod(%304, %305) /* ty=Tensor[(13, 5, 6), float64] */
}

def @func_2160(%var_2139: Tensor[(16, 16, 5), uint64], %var_2150: Tensor[(4, 14, 2), float32]) -> (Tensor[(6, 9, 12), float64], Tensor[(832), int8], Tensor[(16, 16, 5), bool], Tensor[(4, 14, 2), float32]) {
  %306 = @func_1734() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32], uint8) */;
  %307 = cast(meta[relay.Constant][19] /* ty=Tensor[(832), int8] */, dtype="int8") /* ty=Tensor[(832), int8] */;
  %308 = cast(meta[relay.Constant][19] /* ty=Tensor[(832), int8] */, dtype="int8") /* ty=Tensor[(832), int8] */;
  %309 = reshape(%307, newshape=[16, 13, 4]) /* ty=Tensor[(16, 13, 4), int8] */;
  %310 = reshape(%308, newshape=[16, 13, 4]) /* ty=Tensor[(16, 13, 4), int8] */;
  %311 = @func_1120(%309, %310) /* ty=(Tensor[(16, 13, 4), int8], Tensor[(16, 16, 5), uint64], uint64) */;
  %312 = %311.1;
  %313 = cast(%var_2139, dtype="bool") /* ty=Tensor[(16, 16, 5), bool] */;
  %314 = shape_of(%312, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%312, dtype="bool") /* ty=Tensor[(16, 16, 5), bool] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %317 = @func_1870() /* ty=Tensor[(4, 14, 2), float32] */;
  %318 = cast(%var_2150, dtype="float32") /* ty=Tensor[(4, 14, 2), float32] */;
  %319 = shape_of(%317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%317, dtype="float32") /* ty=Tensor[(4, 14, 2), float32] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %322 = %306.0;
  %323 = not_equal(%315, %316) /* ty=Tensor[(16, 16, 5), bool] */;
  %324 = minimum(%320, %321) /* ty=Tensor[(4, 14, 2), float32] */;
  (%322, meta[relay.Constant][19] /* ty=Tensor[(832), int8] */, %323, %324)
}

def @func_3533() -> (Tensor[(168), int64],) {
  %325 = @func_2330() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(2, 14, 6), int8], Tensor[(168), int64]) */;
  %326 = %325.2;
  (%326,)
}

def @func_2330() -> (Tensor[(6, 9, 12), float64], Tensor[(2, 14, 6), int8], Tensor[(168), int64]) {
  %327 = @func_2226() /* ty=(Tensor[(6, 9, 12), float64],) */;
  %328 = cast(meta[relay.Constant][20] /* ty=Tensor[(168), int64] */, dtype="int64") /* ty=Tensor[(168), int64] */;
  %329 = reshape(%328, newshape=[2, 14, 6]) /* ty=Tensor[(2, 14, 6), int64] */;
  %330 = @func_1614(%329) /* ty=(Tensor[(2, 14, 6), bool], Tensor[(2, 14, 6), int8]) */;
  %331 = %327.0;
  %332 = %330.1;
  (%331, %332, meta[relay.Constant][20] /* ty=Tensor[(168), int64] */)
}

def @func_4341() -> Tensor[(168), int64] {
  %333 = @func_3533() /* ty=(Tensor[(168), int64],) */;
  %333.0
}

def @func_3411(%var_3396: Tensor[(6, 15, 5), int64]) -> (Tensor[(6, 15, 5), bool], Tensor[(6, 9, 12), float64]) {
  %334 = cast(%var_3396, dtype="bool") /* ty=Tensor[(6, 15, 5), bool] */;
  %335 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(6, 15, 5), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(meta[relay.Constant][21] /* ty=Tensor[(6, 15, 5), int64] */, dtype="bool") /* ty=Tensor[(6, 15, 5), bool] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %338 = @func_2352() /* ty=(Tensor[(6, 9, 12), float64],) */;
  %339 = greater(%336, %337) /* ty=Tensor[(6, 15, 5), bool] */;
  %340 = %338.0;
  (%339, %340)
}

def @func_4304(%var_4283: Tensor[(1040, 1), float64], %var_4285: Tensor[(2, 14, 6), float32], %var_4299: Tensor[(390), float64], %var_4302: uint64) -> (Tensor[(4, 4, 9), float32], Tensor[(144), float32], Tensor[(5, 16, 13), float64], Tensor[(1040, 1), float64], Tensor[(2, 14, 6), bool], Tensor[(112), float32], Tensor[(390), float64], Tensor[(6, 9, 12), float64], uint64) {
  %341 = cast(meta[relay.Constant][22] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %342 = reshape(%341, newshape=[4, 4, 9]) /* ty=Tensor[(4, 4, 9), float32] */;
  %343 = @func_65(%342) /* ty=(Tensor[(4, 4, 9), float32],) */;
  %344 = cast(%var_4283, dtype="float64") /* ty=Tensor[(1040, 1), float64] */;
  %345 = cast(%var_4283, dtype="float64") /* ty=Tensor[(1040, 1), float64] */;
  %346 = reshape(%344, newshape=[5, 16, 13]) /* ty=Tensor[(5, 16, 13), float64] */;
  %347 = reshape(%345, newshape=[5, 16, 13]) /* ty=Tensor[(5, 16, 13), float64] */;
  %348 = @func_3002() /* ty=(Tensor[(2, 14, 6), float32],) */;
  %349 = %348.0;
  %350 = cast(%var_4285, dtype="bool") /* ty=Tensor[(2, 14, 6), bool] */;
  %351 = shape_of(%349, dtype="int32") /* ty=Tensor[(3), int32] */;
  %352 = cast(%349, dtype="bool") /* ty=Tensor[(2, 14, 6), bool] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %354 = cast(%var_4299, dtype="float64") /* ty=Tensor[(390), float64] */;
  %355 = reshape(%354, newshape=[195, 2]) /* ty=Tensor[(195, 2), float64] */;
  %356 = @func_3803(%355) /* ty=(Tensor[(2, 14, 6), int8], Tensor[(390), float64], Tensor[(112), float32], Tensor[(195, 2), float64]) */;
  %357 = cast(%var_4302, dtype="uint64") /* ty=uint64 */;
  %358 = reshape(%357, newshape=[]) /* ty=uint64 */;
  %359 = @func_2087(%358) /* ty=(Tensor[(4, 14, 2), float32], Tensor[(16, 16, 5), uint64], Tensor[(4, 14, 2), float32], Tensor[(6, 9, 12), float64], Tensor[(4, 14, 2), int8]) */;
  %360 = %343.0;
  %361 = @func_4220(%346, %347) /* ty=Tensor[(5, 16, 13), float64] */;
  %362 = less_equal(%352, %353) /* ty=Tensor[(2, 14, 6), bool] */;
  %363 = %356.2;
  %364 = %359.3;
  (%360, meta[relay.Constant][22] /* ty=Tensor[(144), float32] */, %361, %var_4283, %362, %363, %var_4299, %364, %var_4302)
}

def @func_5341(%var_5336: Tensor[(4, 9, 10), float64], %var_5337: Tensor[(4, 9, 10), float64]) -> (Tensor[(4, 9, 10), float64],) {
  %365 = cast(%var_5337, dtype="float64") /* ty=Tensor[(4, 9, 10), float64] */;
  %366 = shape_of(%var_5336, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(%var_5336, dtype="float64") /* ty=Tensor[(4, 9, 10), float64] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %369 = divide(%367, %368) /* ty=Tensor[(4, 9, 10), float64] */;
  (%369,)
}

def @func_7310() -> (Tensor[(?, 6, 7), float32],) {
  %370 = @func_4947() /* ty=Tensor[(?, 6, 7), float32] */;
  (%370,)
}

def @func_2352() -> (Tensor[(6, 9, 12), float64],) {
  %371 = @func_2226() /* ty=(Tensor[(6, 9, 12), float64],) */;
  %372 = %371.0;
  (%372,)
}

def @func_4925(%var_4894: Tensor[(1848), float64], %var_4911: uint64) -> (Tensor[(6, 9, 12), float64], Tensor[(14, 12, 11), float64], Tensor[(1848), float64], Tensor[(2, 14, 6), bool], Tensor[(1040), float64], Tensor[(390), float64], Tensor[(168, 1), float32], Tensor[(6, 9, 12), float64]) {
  %373 = @func_2226() /* ty=(Tensor[(6, 9, 12), float64],) */;
  %374 = cast(%var_4894, dtype="float64") /* ty=Tensor[(1848), float64] */;
  %375 = reshape(%374, newshape=[14, 12, 11]) /* ty=Tensor[(14, 12, 11), float64] */;
  %376 = @func_4678(%375) /* ty=(Tensor[(14, 12, 11), float64],) */;
  %377 = cast(meta[relay.Constant][23] /* ty=Tensor[(1040), float64] */, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %378 = cast(meta[relay.Constant][24] /* ty=Tensor[(168, 1), float32] */, dtype="float32") /* ty=Tensor[(168, 1), float32] */;
  %379 = cast(meta[relay.Constant][25] /* ty=Tensor[(390), float64] */, dtype="float64") /* ty=Tensor[(390), float64] */;
  %380 = cast(%var_4911, dtype="uint64") /* ty=uint64 */;
  %381 = reshape(%377, newshape=[1040, 1]) /* ty=Tensor[(1040, 1), float64] */;
  %382 = reshape(%378, newshape=[2, 14, 6]) /* ty=Tensor[(2, 14, 6), float32] */;
  %383 = reshape(%379, newshape=[390]) /* ty=Tensor[(390), float64] */;
  %384 = reshape(%380, newshape=[]) /* ty=uint64 */;
  %385 = @func_4304(%381, %382, %383, %384) /* ty=(Tensor[(4, 4, 9), float32], Tensor[(144), float32], Tensor[(5, 16, 13), float64], Tensor[(1040, 1), float64], Tensor[(2, 14, 6), bool], Tensor[(112), float32], Tensor[(390), float64], Tensor[(6, 9, 12), float64], uint64) */;
  %386 = cast(%var_4911, dtype="float32") /* ty=float32 */;
  %387 = cast(meta[relay.Constant][24] /* ty=Tensor[(168, 1), float32] */, dtype="float32") /* ty=Tensor[(168, 1), float32] */;
  %388 = @func_2352() /* ty=(Tensor[(6, 9, 12), float64],) */;
  %389 = %373.0;
  %390 = %376.0;
  %391 = %385.4;
  %392 = power(%386, %387) /* ty=Tensor[(168, 1), float32] */;
  %393 = %388.0;
  (%389, %390, %var_4894, %391, meta[relay.Constant][23] /* ty=Tensor[(1040), float64] */, meta[relay.Constant][25] /* ty=Tensor[(390), float64] */, %392, %393)
}

def @func_2562(%var_2521: Tensor[(225), float32], %var_2554: Tensor[(112), float32]) -> (Tensor[(?, 6, 7), float32], Tensor[(5, 45), float32], Tensor[(288), float32], Tensor[(750, 390), bool], Tensor[(750, 225), int32], Tensor[(832), int8], Tensor[(1280), uint64], Tensor[(112), float32]) {
  %394 = cast(meta[relay.Constant][26] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %395 = cast(%var_2521, dtype="float32") /* ty=Tensor[(225), float32] */;
  %396 = reshape(%394, newshape=[12, 2, 12]) /* ty=Tensor[(12, 2, 12), float32] */;
  %397 = reshape(%395, newshape=[5, 45]) /* ty=Tensor[(5, 45), float32] */;
  %398 = @func_1210(%396, %397) /* ty=(Tensor[(12, 2, 12), float32], Tensor[(5, 9, 5), float32], Tensor[(5, 45), float32], Tensor[(13, 5, 6), float64], Tensor[(390), float64]) */;
  %399 = cast(meta[relay.Constant][27] /* ty=Tensor[(750, 1), float32] */, dtype="float32") /* ty=Tensor[(750, 1), float32] */;
  %400 = reshape(%399, newshape=[750]) /* ty=Tensor[(750), float32] */;
  %401 = @func_1429(%400) /* ty=(Tensor[(10, 14, 10), float32], Tensor[(10, 14, 10), float64], Tensor[(1, 390), float64], Tensor[(750), float32]) */;
  %402 = %401.2;
  %403 = cast(%402, dtype="bool") /* ty=Tensor[(1, 390), bool] */;
  %404 = cast(meta[relay.Constant][27] /* ty=Tensor[(750, 1), float32] */, dtype="bool") /* ty=Tensor[(750, 1), bool] */;
  %405 = cast(%var_2521, dtype="bool") /* ty=Tensor[(225), bool] */;
  %406 = cast(meta[relay.Constant][27] /* ty=Tensor[(750, 1), float32] */, dtype="bool") /* ty=Tensor[(750, 1), bool] */;
  %407 = not_equal(%405, %406) /* ty=Tensor[(750, 225), bool] */;
  %408 = cast(%407, dtype="int32") /* ty=Tensor[(750, 225), int32] */;
  %409 = cast(meta[relay.Constant][27] /* ty=Tensor[(750, 1), float32] */, dtype="int32") /* ty=Tensor[(750, 1), int32] */;
  %410 = cast(meta[relay.Constant][28] /* ty=Tensor[(1280), uint64] */, dtype="uint64") /* ty=Tensor[(1280), uint64] */;
  %411 = cast(%var_2554, dtype="float32") /* ty=Tensor[(112), float32] */;
  %412 = reshape(%410, newshape=[16, 16, 5]) /* ty=Tensor[(16, 16, 5), uint64] */;
  %413 = reshape(%411, newshape=[4, 14, 2]) /* ty=Tensor[(4, 14, 2), float32] */;
  %414 = @func_2160(%412, %413) /* ty=(Tensor[(6, 9, 12), float64], Tensor[(832), int8], Tensor[(16, 16, 5), bool], Tensor[(4, 14, 2), float32]) */;
  %415 = @func_2215() /* ty=Tensor[(?, 6, 7), float32] */;
  %416 = %398.2;
  %417 = equal(%403, %404) /* ty=Tensor[(750, 390), bool] */;
  %418 = subtract(%408, %409) /* ty=Tensor[(750, 225), int32] */;
  %419 = %414.1;
  (%415, %416, meta[relay.Constant][26] /* ty=Tensor[(288), float32] */, %417, %418, %419, meta[relay.Constant][28] /* ty=Tensor[(1280), uint64] */, %var_2554)
}

def @func_7436() -> (Tensor[(4, 14, 2), float32], Tensor[(?, 6, 7), float32], Tensor[(216), bool], Tensor[(?, 6, 7), float64]) {
  %420 = cast(meta[relay.Constant][29] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
  %421 = cast(meta[relay.Constant][29] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
  %422 = reshape(%420, newshape=[6, 12, 3]) /* ty=Tensor[(6, 12, 3), bool] */;
  %423 = reshape(%421, newshape=[6, 12, 3]) /* ty=Tensor[(6, 12, 3), bool] */;
  %424 = @func_4417(%422, %423) /* ty=(Tensor[(6, 12, 3), bool], Tensor[(?, 6, 7), float64], Tensor[(?, 6, 7), float32], Tensor[(168), int64]) */;
  %425 = @func_4053() /* ty=(Tensor[(?, 6, 7), float64], Tensor[(2, 14, 6), int8]) */;
  %426 = @func_1870() /* ty=Tensor[(4, 14, 2), float32] */;
  %427 = %424.2;
  %428 = %425.0;
  (%426, %427, meta[relay.Constant][29] /* ty=Tensor[(216), bool] */, %428)
}

def @func_4947() -> Tensor[(?, 6, 7), float32] {
  %429 = @func_4236() /* ty=(Tensor[(?, 6, 7), float32],) */;
  %429.0
}

def @func_4798() -> Tensor[(6, 9, 12), float64] {
  %430 = @func_2330() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(2, 14, 6), int8], Tensor[(168), int64]) */;
  %430.0
}

def @func_6607(%var_6602: Tensor[(756), float64]) -> (Tensor[(6, 9, 12), float64], Tensor[(16, 16, 5), uint64], uint64, Tensor[(12, 9, 7), float64], Tensor[(756), float64]) {
  %431 = @func_2352() /* ty=(Tensor[(6, 9, 12), float64],) */;
  %432 = cast(meta[relay.Constant][30] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %433 = reshape(%432, newshape=[]) /* ty=uint64 */;
  %434 = @func_869(%433) /* ty=(Tensor[(16, 16, 5), uint64],) */;
  %435 = cast(%var_6602, dtype="float64") /* ty=Tensor[(756), float64] */;
  %436 = reshape(%435, newshape=[12, 9, 7]) /* ty=Tensor[(12, 9, 7), float64] */;
  %437 = @func_6227(%436) /* ty=(Tensor[(168), int64], Tensor[(12, 9, 7), float64]) */;
  %438 = %431.0;
  %439 = %434.0;
  %440 = %437.1;
  (%438, %439, meta[relay.Constant][30] /* ty=uint64 */, %440, %var_6602)
}

def @func_6489() -> Tensor[(?, 6, 7), float32] {
  %441 = @func_4135() /* ty=(Tensor[(?, 6, 7), float32],) */;
  %441.0
}

def @func_1375(%var_1349: Tensor[(11, 11, 16), uint32]) -> (Tensor[(11, 11, 16), float32], Tensor[(11, 11, ?), bool], Tensor[(13, 5, 6), float64], Tensor[(390), float64], Tensor[(4, 4, 9), float32], Tensor[(144), float32]) {
  %442 = cast(meta[relay.Constant][31] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %443 = cast(meta[relay.Constant][32] /* ty=Tensor[(11, 11, 1), uint32] */, dtype="uint32") /* ty=Tensor[(11, 11, 1), uint32] */;
  %444 = maximum(%442, %443) /* ty=Tensor[(11, 11, 1), uint32] */;
  %445 = cast(%444, dtype="float32") /* ty=Tensor[(11, 11, 1), float32] */;
  %446 = cast(%var_1349, dtype="float32") /* ty=Tensor[(11, 11, 16), float32] */;
  %447 = cast(meta[relay.Constant][33] /* ty=Tensor[(11, 11, 1), uint32] */, dtype="bool") /* ty=Tensor[(11, 11, 1), bool] */;
  %448 = shape_of(%444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %449 = cast(%444, dtype="bool") /* ty=Tensor[(11, 11, 1), bool] */;
  %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %451 = cast(meta[relay.Constant][34] /* ty=Tensor[(390), float64] */, dtype="float64") /* ty=Tensor[(390), float64] */;
  %452 = reshape(%451, newshape=[13, 5, 6]) /* ty=Tensor[(13, 5, 6), float64] */;
  %453 = cast(meta[relay.Constant][35] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %454 = reshape(%453, newshape=[4, 4, 9]) /* ty=Tensor[(4, 4, 9), float32] */;
  %455 = @func_65(%454) /* ty=(Tensor[(4, 4, 9), float32],) */;
  %456 = floor_mod(%445, %446) /* ty=Tensor[(11, 11, 16), float32] */;
  %457 = equal(%449, %450) /* ty=Tensor[(11, 11, ?), bool] */;
  %458 = @func_490(%452) /* ty=Tensor[(13, 5, 6), float64] */;
  %459 = %455.0;
  (%456, %457, %458, meta[relay.Constant][34] /* ty=Tensor[(390), float64] */, %459, meta[relay.Constant][35] /* ty=Tensor[(144), float32] */)
}

def @func_2462(%var_2414: Tensor[(9, 15, 8), float64]) -> (Tensor[(13, 5, 6), float64], Tensor[(390), float64], Tensor[(6, 9, 12), float64], Tensor[(9, 15, 8), int8]) {
  %460 = cast(meta[relay.Constant][36] /* ty=Tensor[(390), float64] */, dtype="float64") /* ty=Tensor[(390), float64] */;
  %461 = reshape(%460, newshape=[13, 5, 6]) /* ty=Tensor[(13, 5, 6), float64] */;
  %462 = @func_2352() /* ty=(Tensor[(6, 9, 12), float64],) */;
  %463 = cast(%var_2414, dtype="float64") /* ty=Tensor[(9, 15, 8), float64] */;
  %464 = cosh(%463) /* ty=Tensor[(9, 15, 8), float64] */;
  %465 = cast(%var_2414, dtype="int8") /* ty=Tensor[(9, 15, 8), int8] */;
  %466 = shape_of(%464, dtype="int32") /* ty=Tensor[(3), int32] */;
  %467 = cast(%464, dtype="int8") /* ty=Tensor[(9, 15, 8), int8] */;
  %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %469 = @func_490(%461) /* ty=Tensor[(13, 5, 6), float64] */;
  %470 = %462.0;
  %471 = subtract(%467, %468) /* ty=Tensor[(9, 15, 8), int8] */;
  (%469, meta[relay.Constant][36] /* ty=Tensor[(390), float64] */, %470, %471)
}

def @func_7509(%var_7473: Tensor[(7, 4, 7), uint16], %var_7474: Tensor[(7, 4, 7), uint16], %var_7493: Tensor[(1848), float64], %var_7494: uint64, %var_7499: Tensor[(24, 12), float32], %var_7500: Tensor[(225), float32]) -> (Tensor[(7, 4, 7), bool], Tensor[(?, 6, 7), float32], Tensor[(1040), float64], Tensor[(1848), float64], uint64, Tensor[(25, 9), float32], Tensor[(24, 12), float32], Tensor[(225), float32]) {
  %472 = cast(%var_7474, dtype="bool") /* ty=Tensor[(7, 4, 7), bool] */;
  %473 = shape_of(%var_7473, dtype="int32") /* ty=Tensor[(3), int32] */;
  %474 = cast(%var_7473, dtype="bool") /* ty=Tensor[(7, 4, 7), bool] */;
  %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %476 = @func_5613() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(750), float32], Tensor[(750, 1), float32], Tensor[(?, 6, 7), float32], Tensor[(750, 225), int32], Tensor[(225), float32], Tensor[(112), float32]) */;
  %477 = cast(%var_7493, dtype="float64") /* ty=Tensor[(1848), float64] */;
  %478 = cast(%var_7494, dtype="uint64") /* ty=uint64 */;
  %479 = reshape(%477, newshape=[1848]) /* ty=Tensor[(1848), float64] */;
  %480 = reshape(%478, newshape=[]) /* ty=uint64 */;
  %481 = @func_4925(%479, %480) /* ty=(Tensor[(6, 9, 12), float64], Tensor[(14, 12, 11), float64], Tensor[(1848), float64], Tensor[(2, 14, 6), bool], Tensor[(1040), float64], Tensor[(390), float64], Tensor[(168, 1), float32], Tensor[(6, 9, 12), float64]) */;
  %482 = cast(%var_7499, dtype="float32") /* ty=Tensor[(24, 12), float32] */;
  %483 = cast(%var_7500, dtype="float32") /* ty=Tensor[(225), float32] */;
  %484 = reshape(%482, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %485 = reshape(%483, newshape=[25, 9]) /* ty=Tensor[(25, 9), float32] */;
  %486 = @func_5871(%484, %485) /* ty=(Tensor[(6, 9, 12), float64], Tensor[(390), float64], Tensor[(288), float32], Tensor[(25, 9), float32]) */;
  %487 = greater(%474, %475) /* ty=Tensor[(7, 4, 7), bool] */;
  %488 = %476.3;
  %489 = %481.4;
  %490 = %486.3;
  (%487, %488, %489, %var_7493, %var_7494, %490, %var_7499, %var_7500)
}

def @func_4724() -> (Tensor[(168), int64],) {
  %491 = @func_4341() /* ty=Tensor[(168), int64] */;
  (%491,)
}

def @func_4564() -> (Tensor[(6, 9, 12), float64],) {
  %492 = @func_2352() /* ty=(Tensor[(6, 9, 12), float64],) */;
  %493 = %492.0;
  (%493,)
}

def @func_6387(%var_6340: Tensor[(750, 225), int32], %var_6352: Tensor[(750, 225), int32]) -> (Tensor[(750, 225), float32], Tensor[(750, 225), float64], Tensor[(?, 6, 7), float32], Tensor[(2, 14, 6), float32]) {
  %494 = @func_5613() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(750), float32], Tensor[(750, 1), float32], Tensor[(?, 6, 7), float32], Tensor[(750, 225), int32], Tensor[(225), float32], Tensor[(112), float32]) */;
  %495 = %494.4;
  %496 = cast(%var_6340, dtype="float32") /* ty=Tensor[(750, 225), float32] */;
  %497 = shape_of(%495, dtype="int32") /* ty=Tensor[(2), int32] */;
  %498 = cast(%495, dtype="float32") /* ty=Tensor[(750, 225), float32] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %500 = cast(%var_6352, dtype="float64") /* ty=Tensor[(750, 225), float64] */;
  %501 = shape_of(%495, dtype="int32") /* ty=Tensor[(2), int32] */;
  %502 = cast(%495, dtype="float64") /* ty=Tensor[(750, 225), float64] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %504 = @func_4210() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32]) */;
  %505 = @func_3002() /* ty=(Tensor[(2, 14, 6), float32],) */;
  %506 = power(%498, %499) /* ty=Tensor[(750, 225), float32] */;
  %507 = floor_divide(%502, %503) /* ty=Tensor[(750, 225), float64] */;
  %508 = %504.1;
  %509 = %505.0;
  (%506, %507, %508, %509)
}

def @func_1496(%var_1465: Tensor[(11, 6, 15), uint8], %var_1466: Tensor[(11, 6, 15), uint8], %var_1472: Tensor[(11, 6, 15), uint8], %var_1483: Tensor[(11, 6, 15), uint8]) -> (Tensor[(11, 6, 15), uint8], Tensor[(11, 6, 15), float64], Tensor[(11, 6, 15), float32]) {
  %510 = cast(%var_1466, dtype="uint8") /* ty=Tensor[(11, 6, 15), uint8] */;
  %511 = shape_of(%var_1465, dtype="int32") /* ty=Tensor[(3), int32] */;
  %512 = cast(%var_1465, dtype="uint8") /* ty=Tensor[(11, 6, 15), uint8] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %514 = cast(%var_1472, dtype="float64") /* ty=Tensor[(11, 6, 15), float64] */;
  %515 = shape_of(%var_1465, dtype="int32") /* ty=Tensor[(3), int32] */;
  %516 = cast(%var_1465, dtype="float64") /* ty=Tensor[(11, 6, 15), float64] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %518 = cast(%var_1483, dtype="float32") /* ty=Tensor[(11, 6, 15), float32] */;
  %519 = shape_of(%var_1472, dtype="int32") /* ty=Tensor[(3), int32] */;
  %520 = cast(%var_1472, dtype="float32") /* ty=Tensor[(11, 6, 15), float32] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %522 = bitwise_and(%512, %513) /* ty=Tensor[(11, 6, 15), uint8] */;
  %523 = power(%516, %517) /* ty=Tensor[(11, 6, 15), float64] */;
  %524 = floor_divide(%520, %521) /* ty=Tensor[(11, 6, 15), float32] */;
  (%522, %523, %524)
}

def @func_4610(%var_4607: Tensor[(225, 1), float32]) -> (Tensor[(168), int64], Tensor[(2, 14, 6), float64], Tensor[(5, 45), float32], Tensor[(288), float32], Tensor[(225, 1), float32]) {
  %525 = @func_3311() /* ty=(Tensor[(2, 14, 6), float32], Tensor[(13, 5, 6), float64], Tensor[(750), float32]) */;
  %526 = %525.0;
  %527 = cast(%526, dtype="float64") /* ty=Tensor[(2, 14, 6), float64] */;
  %528 = cast(meta[relay.Constant][37] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %529 = cast(%var_4607, dtype="float32") /* ty=Tensor[(225, 1), float32] */;
  %530 = reshape(%528, newshape=[12, 2, 12]) /* ty=Tensor[(12, 2, 12), float32] */;
  %531 = reshape(%529, newshape=[5, 45]) /* ty=Tensor[(5, 45), float32] */;
  %532 = @func_1210(%530, %531) /* ty=(Tensor[(12, 2, 12), float32], Tensor[(5, 9, 5), float32], Tensor[(5, 45), float32], Tensor[(13, 5, 6), float64], Tensor[(390), float64]) */;
  %533 = @func_4095() /* ty=Tensor[(168), int64] */;
  %534 = sin(%527) /* ty=Tensor[(2, 14, 6), float64] */;
  %535 = %532.2;
  (%533, %534, %535, meta[relay.Constant][37] /* ty=Tensor[(288), float32] */, %var_4607)
}

def @func_5500(%var_5487: Tensor[(11, 9, 4), float64], %var_5488: Tensor[(11, 9, 4), float64]) -> (Tensor[(11, 9, 4), float64], Tensor[(168), int64]) {
  %536 = cast(%var_5488, dtype="float64") /* ty=Tensor[(11, 9, 4), float64] */;
  %537 = shape_of(%var_5487, dtype="int32") /* ty=Tensor[(3), int32] */;
  %538 = cast(%var_5487, dtype="float64") /* ty=Tensor[(11, 9, 4), float64] */;
  %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %540 = mod(%538, %539) /* ty=Tensor[(11, 9, 4), float64] */;
  %541 = @func_4095() /* ty=Tensor[(168), int64] */;
  (%540, %541)
}

def @func_7578() -> (Tensor[(168), int64], Tensor[(2, 14, 6), int32]) {
  %542 = @func_3625() /* ty=(Tensor[(2, 14, 6), int32],) */;
  %543 = @func_4341() /* ty=Tensor[(168), int64] */;
  %544 = %542.0;
  (%543, %544)
}

def @func_1614(%var_1603: Tensor[(2, 14, 6), int64]) -> (Tensor[(2, 14, 6), bool], Tensor[(2, 14, 6), int8]) {
  %545 = cast(-3 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %546 = cast(%var_1603, dtype="bool") /* ty=Tensor[(2, 14, 6), bool] */;
  %547 = cast(-3 /* ty=int64 */, dtype="int8") /* ty=int8 */;
  %548 = cast(%var_1603, dtype="int8") /* ty=Tensor[(2, 14, 6), int8] */;
  %549 = not_equal(%545, %546) /* ty=Tensor[(2, 14, 6), bool] */;
  %550 = bitwise_and(%547, %548) /* ty=Tensor[(2, 14, 6), int8] */;
  (%549, %550)
}

def @func_6808(%var_6780: Tensor[(1, 6, 7), float32], %var_6797: Tensor[(168), int64]) -> (Tensor[(?, 6, 7), int8], Tensor[(?, 6, 7), uint16], Tensor[(168), uint32], Tensor[(14, 12, 11), float64], Tensor[(1848), float64]) {
  %551 = @func_2215() /* ty=Tensor[(?, 6, 7), float32] */;
  %552 = cast(%var_6780, dtype="int8") /* ty=Tensor[(1, 6, 7), int8] */;
  %553 = shape_of(%551, dtype="int32") /* ty=Tensor[(3), int32] */;
  %554 = cast(%551, dtype="int8") /* ty=Tensor[(?, 6, 7), int8] */;
  %555 = dyn.reshape(%552, %553, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %556 = cast(%var_6780, dtype="uint16") /* ty=Tensor[(1, 6, 7), uint16] */;
  %557 = shape_of(%551, dtype="int32") /* ty=Tensor[(3), int32] */;
  %558 = cast(%551, dtype="uint16") /* ty=Tensor[(?, 6, 7), uint16] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %560 = @func_4341() /* ty=Tensor[(168), int64] */;
  %561 = cast(%var_6797, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %562 = shape_of(%560, dtype="int32") /* ty=Tensor[(1), int32] */;
  %563 = cast(%560, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %565 = cast(meta[relay.Constant][38] /* ty=Tensor[(1848), float64] */, dtype="float64") /* ty=Tensor[(1848), float64] */;
  %566 = reshape(%565, newshape=[14, 12, 11]) /* ty=Tensor[(14, 12, 11), float64] */;
  %567 = @func_4678(%566) /* ty=(Tensor[(14, 12, 11), float64],) */;
  %568 = logical_xor(%554, %555) /* ty=Tensor[(?, 6, 7), int8] */;
  %569 = minimum(%558, %559) /* ty=Tensor[(?, 6, 7), uint16] */;
  %570 = bitwise_or(%563, %564) /* ty=Tensor[(168), uint32] */;
  %571 = %567.0;
  (%568, %569, %570, %571, meta[relay.Constant][38] /* ty=Tensor[(1848), float64] */)
}

def @func_1210(%var_1196: Tensor[(12, 2, 12), float32], %var_1202: Tensor[(5, 45), float32]) -> (Tensor[(12, 2, 12), float32], Tensor[(5, 9, 5), float32], Tensor[(5, 45), float32], Tensor[(13, 5, 6), float64], Tensor[(390), float64]) {
  %572 = cast(%var_1196, dtype="float32") /* ty=Tensor[(12, 2, 12), float32] */;
  %573 = cast(%var_1202, dtype="float32") /* ty=Tensor[(5, 45), float32] */;
  %574 = reshape(%573, newshape=[5, 9, 5]) /* ty=Tensor[(5, 9, 5), float32] */;
  %575 = cast(meta[relay.Constant][39] /* ty=Tensor[(390), float64] */, dtype="float64") /* ty=Tensor[(390), float64] */;
  %576 = reshape(%575, newshape=[13, 5, 6]) /* ty=Tensor[(13, 5, 6), float64] */;
  %577 = log2(%572) /* ty=Tensor[(12, 2, 12), float32] */;
  %578 = @func_171(%574) /* ty=Tensor[(5, 9, 5), float32] */;
  %579 = @func_490(%576) /* ty=Tensor[(13, 5, 6), float64] */;
  (%577, %578, %var_1202, %579, meta[relay.Constant][39] /* ty=Tensor[(390), float64] */)
}

def @func_3311() -> (Tensor[(2, 14, 6), float32], Tensor[(13, 5, 6), float64], Tensor[(750), float32]) {
  %580 = @func_3088() /* ty=Tensor[(2, 14, 6), float32] */;
  %581 = cast(%580, dtype="float32") /* ty=Tensor[(2, 14, 6), float32] */;
  %582 = cast(meta[relay.Constant][40] /* ty=Tensor[(750), float32] */, dtype="float32") /* ty=Tensor[(750), float32] */;
  %583 = cast(meta[relay.Constant][40] /* ty=Tensor[(750), float32] */, dtype="float32") /* ty=Tensor[(750), float32] */;
  %584 = reshape(%582, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), float32] */;
  %585 = reshape(%583, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), float32] */;
  %586 = @func_980(%584, %585) /* ty=(Tensor[(10, 5, 15), float32], Tensor[(13, 5, 6), float64], Tensor[(1, 390), float64]) */;
  %587 = acosh(%581) /* ty=Tensor[(2, 14, 6), float32] */;
  %588 = %586.1;
  (%587, %588, meta[relay.Constant][40] /* ty=Tensor[(750), float32] */)
}

def @func_5017() -> (Tensor[(168), int64],) {
  %589 = @func_3533() /* ty=(Tensor[(168), int64],) */;
  %590 = %589.0;
  (%590,)
}

def @func_1816() -> (Tensor[(?, 6, 7), float32],) {
  %591 = @func_1734() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32], uint8) */;
  %592 = %591.1;
  (%592,)
}

def @func_3768(%var_3733: float64, %var_3734: Tensor[(1, 13, 8), float64]) -> (Tensor[(4, 14, 2), float32], Tensor[(1, 13, 8), bool], Tensor[(2, 14, 6), float32]) {
  %593 = cast(%var_3733, dtype="float64") /* ty=float64 */;
  %594 = cast(%var_3734, dtype="float64") /* ty=Tensor[(1, 13, 8), float64] */;
  %595 = maximum(%593, %594) /* ty=Tensor[(1, 13, 8), float64] */;
  %596 = cast(%595, dtype="bool") /* ty=Tensor[(1, 13, 8), bool] */;
  %597 = cast(%var_3733, dtype="bool") /* ty=bool */;
  %598 = @func_3311() /* ty=(Tensor[(2, 14, 6), float32], Tensor[(13, 5, 6), float64], Tensor[(750), float32]) */;
  %599 = @func_1870() /* ty=Tensor[(4, 14, 2), float32] */;
  %600 = less_equal(%596, %597) /* ty=Tensor[(1, 13, 8), bool] */;
  %601 = %598.0;
  (%599, %600, %601)
}

def @func_1996(%var_1992: Tensor[(14, 10, 5), int64]) -> (Tensor[(14, 10, 5), int64],) {
  %602 = cast(-2 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %603 = cast(%var_1992, dtype="int64") /* ty=Tensor[(14, 10, 5), int64] */;
  %604 = left_shift(%602, %603) /* ty=Tensor[(14, 10, 5), int64] */;
  (%604,)
}

def @func_3724() -> (Tensor[(?, 6, 7), float64],) {
  %605 = @func_2939() /* ty=(Tensor[(?, 6, 7), float32], Tensor[(1, 390), float64], Tensor[(1, 390), float64]) */;
  %606 = %605.0;
  %607 = cast(%606, dtype="float64") /* ty=Tensor[(?, 6, 7), float64] */;
  %608 = cos(%607) /* ty=Tensor[(?, 6, 7), float64] */;
  (%608,)
}

def @func_4236() -> (Tensor[(?, 6, 7), float32],) {
  %609 = @func_4210() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32]) */;
  %610 = %609.1;
  (%610,)
}

def @func_4110(%var_4102: Tensor[(16, 4, 13), float32]) -> (Tensor[(16, 4, 13), float32],) {
  %611 = cast(%var_4102, dtype="float32") /* ty=Tensor[(16, 4, 13), float32] */;
  %612 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(16, 4, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(meta[relay.Constant][41] /* ty=Tensor[(16, 4, 13), float32] */, dtype="float32") /* ty=Tensor[(16, 4, 13), float32] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %615 = add(%613, %614) /* ty=Tensor[(16, 4, 13), float32] */;
  (%615,)
}

def @func_5278(%var_5265: Tensor[(832), float32]) -> (Tensor[(168), int64], Tensor[(16, 4, 13), float32], Tensor[(832), float32]) {
  %616 = @func_2330() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(2, 14, 6), int8], Tensor[(168), int64]) */;
  %617 = cast(%var_5265, dtype="float32") /* ty=Tensor[(832), float32] */;
  %618 = reshape(%617, newshape=[16, 4, 13]) /* ty=Tensor[(16, 4, 13), float32] */;
  %619 = @func_4110(%618) /* ty=(Tensor[(16, 4, 13), float32],) */;
  %620 = %616.2;
  %621 = %619.0;
  (%620, %621, %var_5265)
}

def @func_1769(%var_1764: Tensor[(2, 6, 7), float32]) -> (Tensor[(2, 6, 7), uint64],) {
  %622 = @func_1734() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32], uint8) */;
  %623 = %622.1;
  %624 = cast(%623, dtype="uint64") /* ty=Tensor[(?, 6, 7), uint64] */;
  %625 = cast(%var_1764, dtype="uint64") /* ty=Tensor[(2, 6, 7), uint64] */;
  %626 = multiply(%624, %625) /* ty=Tensor[(2, 6, 7), uint64] */;
  (%626,)
}

def @func_24(%var_0: uint8) -> (Tensor[(?, 6, 7), float32], Tensor[(1, 6, 7), float32]) {
  %627 = cast(%var_0, dtype="bool") /* ty=bool */;
  %628 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 6, 7), uint8] */, dtype="bool") /* ty=Tensor[(1, 6, 7), bool] */;
  %629 = less_equal(%627, %628) /* ty=Tensor[(1, 6, 7), bool] */;
  %630 = cast(%var_0, dtype="bool") /* ty=bool */;
  %631 = cast(%629, dtype="bool") /* ty=Tensor[(1, 6, 7), bool] */;
  %632 = logical_or(%630, %631) /* ty=Tensor[(1, 6, 7), bool] */;
  %633 = cast(%632, dtype="float32") /* ty=Tensor[(1, 6, 7), float32] */;
  %634 = shape_of(%629, dtype="int32") /* ty=Tensor[(3), int32] */;
  %635 = cast(%629, dtype="float32") /* ty=Tensor[(1, 6, 7), float32] */;
  %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %637 = cast(%629, dtype="float32") /* ty=Tensor[(1, 6, 7), float32] */;
  %638 = floor_divide(%635, %636) /* ty=Tensor[(?, 6, 7), float32] */;
  %639 = acos(%637) /* ty=Tensor[(1, 6, 7), float32] */;
  (%638, %639)
}

def @func_171(%var_158: Tensor[(5, 9, 5), float32]) -> Tensor[(5, 9, 5), float32] {
  %640 = cast(%var_158, dtype="float32") /* ty=Tensor[(5, 9, 5), float32] */;
  rsqrt(%640) /* ty=Tensor[(5, 9, 5), float32] */
}

def @func_4210() -> (Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32]) {
  %641 = @func_2352() /* ty=(Tensor[(6, 9, 12), float64],) */;
  %642 = @func_4135() /* ty=(Tensor[(?, 6, 7), float32],) */;
  %643 = %642.0;
  %644 = cast(%643, dtype="float32") /* ty=Tensor[(?, 6, 7), float32] */;
  %645 = log(%644) /* ty=Tensor[(?, 6, 7), float32] */;
  %646 = cast(%643, dtype="float32") /* ty=Tensor[(?, 6, 7), float32] */;
  %647 = shape_of(%645, dtype="int32") /* ty=Tensor[(3), int32] */;
  %648 = cast(%645, dtype="float32") /* ty=Tensor[(?, 6, 7), float32] */;
  %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %650 = %641.0;
  %651 = mod(%648, %649) /* ty=Tensor[(?, 6, 7), float32] */;
  (%650, %651)
}

def @func_2276(%var_2244: Tensor[(4, 14, 2), float32], %var_2272: Tensor[(390), float64]) -> (Tensor[(4, 14, 2), float32], Tensor[(13, 5, 6), float64], Tensor[(390), float64]) {
  %652 = @func_1870() /* ty=Tensor[(4, 14, 2), float32] */;
  %653 = cast(%var_2244, dtype="uint64") /* ty=Tensor[(4, 14, 2), uint64] */;
  %654 = shape_of(%652, dtype="int32") /* ty=Tensor[(3), int32] */;
  %655 = cast(%652, dtype="uint64") /* ty=Tensor[(4, 14, 2), uint64] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %657 = maximum(%655, %656) /* ty=Tensor[(4, 14, 2), uint64] */;
  %658 = cast(%var_2244, dtype="float32") /* ty=Tensor[(4, 14, 2), float32] */;
  %659 = shape_of(%657, dtype="int32") /* ty=Tensor[(3), int32] */;
  %660 = cast(%657, dtype="float32") /* ty=Tensor[(4, 14, 2), float32] */;
  %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %662 = power(%660, %661) /* ty=Tensor[(4, 14, 2), float32] */;
  %663 = cast(%662, dtype="float32") /* ty=Tensor[(4, 14, 2), float32] */;
  %664 = cast(%var_2272, dtype="float64") /* ty=Tensor[(390), float64] */;
  %665 = reshape(%664, newshape=[13, 5, 6]) /* ty=Tensor[(13, 5, 6), float64] */;
  %666 = atan(%663) /* ty=Tensor[(4, 14, 2), float32] */;
  %667 = @func_490(%665) /* ty=Tensor[(13, 5, 6), float64] */;
  (%666, %667, %var_2272)
}

def @func_869(%var_860: uint64) -> (Tensor[(16, 16, 5), uint64],) {
  %668 = cast(%var_860, dtype="uint64") /* ty=uint64 */;
  %669 = cast(meta[relay.Constant][43] /* ty=Tensor[(16, 16, 5), uint64] */, dtype="uint64") /* ty=Tensor[(16, 16, 5), uint64] */;
  %670 = logical_xor(%668, %669) /* ty=Tensor[(16, 16, 5), uint64] */;
  (%670,)
}

def @func_2908() -> (Tensor[(4, 14, 2), uint32], Tensor[(4, 14, 2), int8], Tensor[(1, 390), float64], Tensor[(750), float32], Tensor[(4, 14, 2), float64], Tensor[(16, 13, 4), int8], Tensor[(4, 208), int8]) {
  %671 = @func_1870() /* ty=Tensor[(4, 14, 2), float32] */;
  %672 = cast(meta[relay.Constant][44] /* ty=Tensor[(4, 14, 2), float32] */, dtype="uint32") /* ty=Tensor[(4, 14, 2), uint32] */;
  %673 = shape_of(%671, dtype="int32") /* ty=Tensor[(3), int32] */;
  %674 = cast(%671, dtype="uint32") /* ty=Tensor[(4, 14, 2), uint32] */;
  %675 = dyn.reshape(%672, %673, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %676 = cast(meta[relay.Constant][44] /* ty=Tensor[(4, 14, 2), float32] */, dtype="bool") /* ty=Tensor[(4, 14, 2), bool] */;
  %677 = shape_of(%671, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%671, dtype="bool") /* ty=Tensor[(4, 14, 2), bool] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %680 = less(%678, %679) /* ty=Tensor[(4, 14, 2), bool] */;
  %681 = cast(meta[relay.Constant][45] /* ty=Tensor[(4, 14, 2), bool] */, dtype="int8") /* ty=Tensor[(4, 14, 2), int8] */;
  %682 = shape_of(%680, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(%680, dtype="int8") /* ty=Tensor[(4, 14, 2), int8] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %685 = cast(meta[relay.Constant][46] /* ty=Tensor[(750), float32] */, dtype="float32") /* ty=Tensor[(750), float32] */;
  %686 = cast(meta[relay.Constant][46] /* ty=Tensor[(750), float32] */, dtype="float32") /* ty=Tensor[(750), float32] */;
  %687 = reshape(%685, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), float32] */;
  %688 = reshape(%686, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), float32] */;
  %689 = @func_980(%687, %688) /* ty=(Tensor[(10, 5, 15), float32], Tensor[(13, 5, 6), float64], Tensor[(1, 390), float64]) */;
  %690 = cast(meta[relay.Constant][45] /* ty=Tensor[(4, 14, 2), bool] */, dtype="float64") /* ty=Tensor[(4, 14, 2), float64] */;
  %691 = cast(meta[relay.Constant][47] /* ty=Tensor[(4, 208), int8] */, dtype="int8") /* ty=Tensor[(4, 208), int8] */;
  %692 = cast(meta[relay.Constant][47] /* ty=Tensor[(4, 208), int8] */, dtype="int8") /* ty=Tensor[(4, 208), int8] */;
  %693 = reshape(%691, newshape=[16, 13, 4]) /* ty=Tensor[(16, 13, 4), int8] */;
  %694 = reshape(%692, newshape=[16, 13, 4]) /* ty=Tensor[(16, 13, 4), int8] */;
  %695 = @func_1120(%693, %694) /* ty=(Tensor[(16, 13, 4), int8], Tensor[(16, 16, 5), uint64], uint64) */;
  %696 = right_shift(%674, %675) /* ty=Tensor[(4, 14, 2), uint32] */;
  %697 = subtract(%683, %684) /* ty=Tensor[(4, 14, 2), int8] */;
  %698 = %689.2;
  %699 = sqrt(%690) /* ty=Tensor[(4, 14, 2), float64] */;
  %700 = %695.0;
  (%696, %697, %698, meta[relay.Constant][46] /* ty=Tensor[(750), float32] */, %699, %700, meta[relay.Constant][47] /* ty=Tensor[(4, 208), int8] */)
}

def @func_7098() -> (Tensor[(6, 9, 12), float64], Tensor[(750), float32]) {
  %701 = @func_5840() /* ty=(Tensor[(750), float32],) */;
  %702 = @func_2761() /* ty=Tensor[(6, 9, 12), float64] */;
  %703 = %701.0;
  (%702, %703)
}

def @func_2087(%var_2052: uint64) -> (Tensor[(4, 14, 2), float32], Tensor[(16, 16, 5), uint64], Tensor[(4, 14, 2), float32], Tensor[(6, 9, 12), float64], Tensor[(4, 14, 2), int8]) {
  %704 = cast(%var_2052, dtype="uint64") /* ty=uint64 */;
  %705 = reshape(%704, newshape=[]) /* ty=uint64 */;
  %706 = @func_869(%705) /* ty=(Tensor[(16, 16, 5), uint64],) */;
  %707 = @func_1734() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32], uint8) */;
  %708 = @func_1870() /* ty=Tensor[(4, 14, 2), float32] */;
  %709 = cast(%708, dtype="int8") /* ty=Tensor[(4, 14, 2), int8] */;
  %710 = cast(%var_2052, dtype="int8") /* ty=int8 */;
  %711 = @func_1870() /* ty=Tensor[(4, 14, 2), float32] */;
  %712 = %706.0;
  %713 = @func_1870() /* ty=Tensor[(4, 14, 2), float32] */;
  %714 = %707.0;
  %715 = left_shift(%709, %710) /* ty=Tensor[(4, 14, 2), int8] */;
  (%711, %712, %713, %714, %715)
}

def @func_5003() -> Tensor[(6, 9, 12), float64] {
  @func_2761() /* ty=Tensor[(6, 9, 12), float64] */
}

def @func_3281(%var_3253: Tensor[(750), float32]) -> (Tensor[(?, 6, 7), float32], Tensor[(10, 5, 15), float32], Tensor[(750), float32]) {
  %716 = @func_1816() /* ty=(Tensor[(?, 6, 7), float32],) */;
  %717 = cast(%var_3253, dtype="float32") /* ty=Tensor[(750), float32] */;
  %718 = cast(%var_3253, dtype="float32") /* ty=Tensor[(750), float32] */;
  %719 = reshape(%717, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), float32] */;
  %720 = reshape(%718, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), float32] */;
  %721 = @func_980(%719, %720) /* ty=(Tensor[(10, 5, 15), float32], Tensor[(13, 5, 6), float64], Tensor[(1, 390), float64]) */;
  %722 = %716.0;
  %723 = %721.0;
  (%722, %723, %var_3253)
}

def @main() -> (Tensor[(2, 14, 6), float32], Tensor[(?, 6, 7), float32], Tensor[(168), int64], Tensor[(4, 6, 10), uint16]) {
  %724 = @func_1734() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32], uint8) */;
  %725 = @func_7252() /* ty=(Tensor[(168), int64], Tensor[(2, 14, 6), int8]) */;
  %726 = cast(meta[relay.Constant][48] /* ty=Tensor[(4, 6, 10), float32] */, dtype="float32") /* ty=Tensor[(4, 6, 10), float32] */;
  %727 = asinh(%726) /* ty=Tensor[(4, 6, 10), float32] */;
  %728 = cast(%727, dtype="float32") /* ty=Tensor[(4, 6, 10), float32] */;
  %729 = sinh(%728) /* ty=Tensor[(4, 6, 10), float32] */;
  %730 = cast(%729, dtype="float32") /* ty=Tensor[(4, 6, 10), float32] */;
  %731 = acos(%730) /* ty=Tensor[(4, 6, 10), float32] */;
  %732 = cast(%729, dtype="uint16") /* ty=Tensor[(4, 6, 10), uint16] */;
  %733 = shape_of(%731, dtype="int32") /* ty=Tensor[(3), int32] */;
  %734 = cast(%731, dtype="uint16") /* ty=Tensor[(4, 6, 10), uint16] */;
  %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %736 = @func_3088() /* ty=Tensor[(2, 14, 6), float32] */;
  %737 = %724.1;
  %738 = %725.0;
  %739 = bitwise_xor(%734, %735) /* ty=Tensor[(4, 6, 10), uint16] */;
  (%736, %737, %738, %739)
}

def @func_2939() -> (Tensor[(?, 6, 7), float32], Tensor[(1, 390), float64], Tensor[(1, 390), float64]) {
  %740 = @func_2908() /* ty=(Tensor[(4, 14, 2), uint32], Tensor[(4, 14, 2), int8], Tensor[(1, 390), float64], Tensor[(750), float32], Tensor[(4, 14, 2), float64], Tensor[(16, 13, 4), int8], Tensor[(4, 208), int8]) */;
  %741 = @func_2908() /* ty=(Tensor[(4, 14, 2), uint32], Tensor[(4, 14, 2), int8], Tensor[(1, 390), float64], Tensor[(750), float32], Tensor[(4, 14, 2), float64], Tensor[(16, 13, 4), int8], Tensor[(4, 208), int8]) */;
  %742 = @func_2215() /* ty=Tensor[(?, 6, 7), float32] */;
  %743 = %740.2;
  %744 = %741.2;
  (%742, %743, %744)
}

def @func_5333() -> Tensor[(4, 14, 2), float64] {
  %745 = @func_2908() /* ty=(Tensor[(4, 14, 2), uint32], Tensor[(4, 14, 2), int8], Tensor[(1, 390), float64], Tensor[(750), float32], Tensor[(4, 14, 2), float64], Tensor[(16, 13, 4), int8], Tensor[(4, 208), int8]) */;
  %746 = %745.1;
  %747 = cast(%746, dtype="float64") /* ty=Tensor[(4, 14, 2), float64] */;
  rsqrt(%747) /* ty=Tensor[(4, 14, 2), float64] */
}

def @func_6665() -> (Tensor[(6, 9, 12), int16],) {
  %748 = @func_4798() /* ty=Tensor[(6, 9, 12), float64] */;
  %749 = cast(meta[relay.Constant][49] /* ty=Tensor[(6, 9, 12), float64] */, dtype="int16") /* ty=Tensor[(6, 9, 12), int16] */;
  %750 = shape_of(%748, dtype="int32") /* ty=Tensor[(3), int32] */;
  %751 = cast(%748, dtype="int16") /* ty=Tensor[(6, 9, 12), int16] */;
  %752 = dyn.reshape(%749, %750, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %753 = bitwise_or(%751, %752) /* ty=Tensor[(6, 9, 12), int16] */;
  (%753,)
}

def @func_4095() -> Tensor[(168), int64] {
  %754 = @func_2711() /* ty=(Tensor[(168), int64], Tensor[(?, 6, 7), float32]) */;
  %754.0
}

def @func_4053() -> (Tensor[(?, 6, 7), float64], Tensor[(2, 14, 6), int8]) {
  %755 = @func_3724() /* ty=(Tensor[(?, 6, 7), float64],) */;
  %756 = @func_3157() /* ty=(Tensor[(2, 14, 6), int8],) */;
  %757 = %755.0;
  %758 = %756.0;
  (%757, %758)
}

def @func_3693() -> (Tensor[(?, 6, 7), float32],) {
  %759 = @func_2939() /* ty=(Tensor[(?, 6, 7), float32], Tensor[(1, 390), float64], Tensor[(1, 390), float64]) */;
  %760 = %759.0;
  (%760,)
}

def @func_5553(%var_5534: Tensor[(2, 4, 8), float64]) -> (Tensor[(2, 4, 8), float64],) {
  %761 = cast(%var_5534, dtype="float64") /* ty=Tensor[(2, 4, 8), float64] */;
  %762 = asinh(%761) /* ty=Tensor[(2, 4, 8), float64] */;
  (%762,)
}

def @func_7047(%var_7027: Tensor[(390), float64]) -> (Tensor[(2, 14, 6), int32], Tensor[(112), float32], Tensor[(390), float64]) {
  %763 = @func_3625() /* ty=(Tensor[(2, 14, 6), int32],) */;
  %764 = cast(%var_7027, dtype="float64") /* ty=Tensor[(390), float64] */;
  %765 = reshape(%764, newshape=[390]) /* ty=Tensor[(390), float64] */;
  %766 = @func_2973(%765) /* ty=(Tensor[(?, 6, 7), float32], Tensor[(13, 5, 6), float64], Tensor[(112), float32], Tensor[(390), float64]) */;
  %767 = %763.0;
  %768 = %766.2;
  (%767, %768, %var_7027)
}

def @func_4135() -> (Tensor[(?, 6, 7), float32],) {
  %769 = @func_2711() /* ty=(Tensor[(168), int64], Tensor[(?, 6, 7), float32]) */;
  %770 = %769.1;
  (%770,)
}

def @func_1970(%var_1938: Tensor[(750), float32]) -> (Tensor[(?, 6, 7), float32], Tensor[(10, 14, 10), float64], Tensor[(750), float32]) {
  %771 = @func_1734() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32], uint8) */;
  %772 = %771.1;
  %773 = cast(%772, dtype="float32") /* ty=Tensor[(?, 6, 7), float32] */;
  %774 = cast(%var_1938, dtype="float32") /* ty=Tensor[(750), float32] */;
  %775 = reshape(%774, newshape=[750]) /* ty=Tensor[(750), float32] */;
  %776 = @func_1429(%775) /* ty=(Tensor[(10, 14, 10), float32], Tensor[(10, 14, 10), float64], Tensor[(1, 390), float64], Tensor[(750), float32]) */;
  %777 = cosh(%773) /* ty=Tensor[(?, 6, 7), float32] */;
  %778 = %776.1;
  (%777, %778, %var_1938)
}

def @func_2711() -> (Tensor[(168), int64], Tensor[(?, 6, 7), float32]) {
  %779 = @func_2341() /* ty=(Tensor[(4, 14, 2), float32], Tensor[(2, 14, 6), int8], Tensor[(168), int64]) */;
  %780 = %779.2;
  %781 = @func_2215() /* ty=Tensor[(?, 6, 7), float32] */;
  (%780, %781)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3281(%var_3253: Tensor[(750), float32]) -> (Tensor[(?, 6, 7), float32], Tensor[(10, 5, 15), float32], Tensor[(750), float32]) {
  %0 = @func_1816() /* ty=(Tensor[(?, 6, 7), float32],) */;
  %1 = cast(%var_3253, dtype="float32") /* ty=Tensor[(750), float32] */;
  %2 = cast(%var_3253, dtype="float32") /* ty=Tensor[(750), float32] */;
  %3 = reshape(%1, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), float32] */;
  %4 = reshape(%2, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), float32] */;
  %5 = @func_980(%3, %4) /* ty=(Tensor[(10, 5, 15), float32], Tensor[(13, 5, 6), float64], Tensor[(1, 390), float64]) */;
  %6 = %0.0;
  %7 = %5.0;
  (%6, %7, %var_3253)
}

def @func_5167(%var_5166: Tensor[(6, 9, 12), float64]) -> Tensor[(6, 9, 12), float32] {
  %14 = fn (%var_5160: Tensor[(6, 9, 12), float64]) -> Tensor[(6, 9, 12), float32] {
    %8 = @func_4564() /* ty=(Tensor[(6, 9, 12), float64],) */;
    %9 = %8.0;
    %10 = cast(%var_5160, dtype="float32") /* ty=Tensor[(6, 9, 12), float32] */;
    %11 = shape_of(%9, dtype="int32") /* ty=Tensor[(3), int32] */;
    %12 = cast(%9, dtype="float32") /* ty=Tensor[(6, 9, 12), float32] */;
    %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    minimum(%12, %13) /* ty=Tensor[(6, 9, 12), float32] */
  };
  %14(%var_5166) /* ty=Tensor[(6, 9, 12), float32] */
}

def @func_171(%var_158: Tensor[(5, 9, 5), float32]) -> Tensor[(5, 9, 5), float32] {
  %15 = cast(%var_158, dtype="float32") /* ty=Tensor[(5, 9, 5), float32] */;
  rsqrt(%15) /* ty=Tensor[(5, 9, 5), float32] */
}

def @func_2910() -> (Tensor[(4, 14, 2), uint32], Tensor[(4, 14, 2), int8], Tensor[(1, 390), float64], Tensor[(750), float32], Tensor[(4, 14, 2), float64], Tensor[(16, 13, 4), int8], Tensor[(4, 208), int8]) {
  @func_2908() /* ty=(Tensor[(4, 14, 2), uint32], Tensor[(4, 14, 2), int8], Tensor[(1, 390), float64], Tensor[(750), float32], Tensor[(4, 14, 2), float64], Tensor[(16, 13, 4), int8], Tensor[(4, 208), int8]) */
}

def @func_1735() -> (Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32], uint8) {
  %22 = fn () -> (Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32], uint8) {
    %16 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 9, 12), float64] */, dtype="float64") /* ty=Tensor[(6, 9, 12), float64] */;
    %17 = cast(meta[relay.Constant][1] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %18 = reshape(%17, newshape=[]) /* ty=uint8 */;
    %19 = @func_24(%18) /* ty=(Tensor[(?, 6, 7), float32], Tensor[(1, 6, 7), float32]) */;
    %20 = log(%16) /* ty=Tensor[(6, 9, 12), float64] */;
    %21 = %19.0;
    (%20, %21, meta[relay.Constant][1] /* ty=uint8 */)
  };
  %22() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32], uint8) */
}

def @func_6229(%var_6228: Tensor[(12, 9, 7), float64]) -> (Tensor[(168), int64], Tensor[(12, 9, 7), float64]) {
  %29 = fn (%var_6206: Tensor[(12, 9, 7), float64]) -> (Tensor[(168), int64], Tensor[(12, 9, 7), float64]) {
    %23 = @func_5017() /* ty=(Tensor[(168), int64],) */;
    %24 = cast(%var_6206, dtype="float64") /* ty=Tensor[(12, 9, 7), float64] */;
    %25 = log10(%24) /* ty=Tensor[(12, 9, 7), float64] */;
    %26 = cast(%25, dtype="float64") /* ty=Tensor[(12, 9, 7), float64] */;
    %27 = %23.0;
    %28 = sinh(%26) /* ty=Tensor[(12, 9, 7), float64] */;
    (%27, %28)
  };
  %29(%var_6228) /* ty=(Tensor[(168), int64], Tensor[(12, 9, 7), float64]) */
}

def @func_4947() -> Tensor[(?, 6, 7), float32] {
  %30 = @func_4236() /* ty=(Tensor[(?, 6, 7), float32],) */;
  %30.0
}

def @func_1123(%var_1121: Tensor[(16, 13, 4), int8], %var_1122: Tensor[(16, 13, 4), int8]) -> (Tensor[(16, 13, 4), int8], Tensor[(16, 16, 5), uint64], uint64) {
  %40 = fn (%var_1092: Tensor[(16, 13, 4), int8], %var_1093: Tensor[(16, 13, 4), int8]) -> (Tensor[(16, 13, 4), int8], Tensor[(16, 16, 5), uint64], uint64) {
    %31 = cast(%var_1093, dtype="int8") /* ty=Tensor[(16, 13, 4), int8] */;
    %32 = shape_of(%var_1092, dtype="int32") /* ty=Tensor[(3), int32] */;
    %33 = cast(%var_1092, dtype="int8") /* ty=Tensor[(16, 13, 4), int8] */;
    %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %35 = cast(meta[relay.Constant][2] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %36 = reshape(%35, newshape=[]) /* ty=uint64 */;
    %37 = @func_869(%36) /* ty=(Tensor[(16, 16, 5), uint64],) */;
    %38 = add(%33, %34) /* ty=Tensor[(16, 13, 4), int8] */;
    %39 = %37.0;
    (%38, %39, meta[relay.Constant][2] /* ty=uint64 */)
  };
  %40(%var_1121, %var_1122) /* ty=(Tensor[(16, 13, 4), int8], Tensor[(16, 16, 5), uint64], uint64) */
}

def @func_1378(%var_1376: Tensor[(11, 11, 16), uint32]) -> (Tensor[(11, 11, 16), float32], Tensor[(11, 11, ?), bool], Tensor[(13, 5, 6), float64], Tensor[(390), float64], Tensor[(4, 4, 9), float32], Tensor[(144), float32]) {
  @func_1375(%var_1376) /* ty=(Tensor[(11, 11, 16), float32], Tensor[(11, 11, ?), bool], Tensor[(13, 5, 6), float64], Tensor[(390), float64], Tensor[(4, 4, 9), float32], Tensor[(144), float32]) */
}

def @func_2941() -> (Tensor[(?, 6, 7), float32], Tensor[(1, 390), float64], Tensor[(1, 390), float64]) {
  @func_2939() /* ty=(Tensor[(?, 6, 7), float32], Tensor[(1, 390), float64], Tensor[(1, 390), float64]) */
}

def @func_5500(%var_5487: Tensor[(11, 9, 4), float64], %var_5488: Tensor[(11, 9, 4), float64]) -> (Tensor[(11, 9, 4), float64], Tensor[(168), int64]) {
  %41 = cast(%var_5488, dtype="float64") /* ty=Tensor[(11, 9, 4), float64] */;
  %42 = shape_of(%var_5487, dtype="int32") /* ty=Tensor[(3), int32] */;
  %43 = cast(%var_5487, dtype="float64") /* ty=Tensor[(11, 9, 4), float64] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %45 = mod(%43, %44) /* ty=Tensor[(11, 9, 4), float64] */;
  %46 = @func_4095() /* ty=Tensor[(168), int64] */;
  (%45, %46)
}

def @func_5123() -> (Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float64]) {
  @func_5121() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float64]) */
}

def @main() -> (Tensor[(2, 14, 6), float32], Tensor[(?, 6, 7), float32], Tensor[(168), int64], Tensor[(4, 6, 10), uint16]) {
  %47 = @func_1735() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32], uint8) */;
  %48 = @func_7253() /* ty=(Tensor[(168), int64], Tensor[(2, 14, 6), int8]) */;
  %49 = cast(meta[relay.Constant][3] /* ty=Tensor[(4, 6, 10), float32] */, dtype="float32") /* ty=Tensor[(4, 6, 10), float32] */;
  %50 = asinh(%49) /* ty=Tensor[(4, 6, 10), float32] */;
  %51 = cast(%50, dtype="float32") /* ty=Tensor[(4, 6, 10), float32] */;
  %52 = sinh(%51) /* ty=Tensor[(4, 6, 10), float32] */;
  %53 = cast(%52, dtype="float32") /* ty=Tensor[(4, 6, 10), float32] */;
  %54 = acos(%53) /* ty=Tensor[(4, 6, 10), float32] */;
  %55 = cast(%52, dtype="uint16") /* ty=Tensor[(4, 6, 10), uint16] */;
  %56 = shape_of(%54, dtype="int32") /* ty=Tensor[(3), int32] */;
  %57 = cast(%54, dtype="uint16") /* ty=Tensor[(4, 6, 10), uint16] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %59 = @func_3088() /* ty=Tensor[(2, 14, 6), float32] */;
  %60 = %47.1;
  %61 = %48.0;
  %62 = bitwise_xor(%57, %58) /* ty=Tensor[(4, 6, 10), uint16] */;
  (%59, %60, %61, %62)
}

def @func_7626(%var_7624: uint64, %var_7625: Tensor[(832), float32]) -> (Tensor[(5, 16, 12), uint64], Tensor[(168), int64], Tensor[(832), float32]) {
  @func_7622(%var_7624, %var_7625) /* ty=(Tensor[(5, 16, 12), uint64], Tensor[(168), int64], Tensor[(832), float32]) */
}

def @func_6665() -> (Tensor[(6, 9, 12), int16],) {
  %63 = @func_4798() /* ty=Tensor[(6, 9, 12), float64] */;
  %64 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 9, 12), float64] */, dtype="int16") /* ty=Tensor[(6, 9, 12), int16] */;
  %65 = shape_of(%63, dtype="int32") /* ty=Tensor[(3), int32] */;
  %66 = cast(%63, dtype="int16") /* ty=Tensor[(6, 9, 12), int16] */;
  %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %68 = bitwise_or(%66, %67) /* ty=Tensor[(6, 9, 12), int16] */;
  (%68,)
}

def @func_2465(%var_2463: Tensor[(9, 15, 8), float64]) -> (Tensor[(13, 5, 6), float64], Tensor[(390), float64], Tensor[(6, 9, 12), float64], Tensor[(9, 15, 8), int8]) {
  @func_2462(%var_2463) /* ty=(Tensor[(13, 5, 6), float64], Tensor[(390), float64], Tensor[(6, 9, 12), float64], Tensor[(9, 15, 8), int8]) */
}

def @func_2331() -> (Tensor[(6, 9, 12), float64], Tensor[(2, 14, 6), int8], Tensor[(168), int64]) {
  %75 = fn () -> (Tensor[(6, 9, 12), float64], Tensor[(2, 14, 6), int8], Tensor[(168), int64]) {
    %69 = @func_2226() /* ty=(Tensor[(6, 9, 12), float64],) */;
    %70 = cast(meta[relay.Constant][5] /* ty=Tensor[(168), int64] */, dtype="int64") /* ty=Tensor[(168), int64] */;
    %71 = reshape(%70, newshape=[2, 14, 6]) /* ty=Tensor[(2, 14, 6), int64] */;
    %72 = @func_1614(%71) /* ty=(Tensor[(2, 14, 6), bool], Tensor[(2, 14, 6), int8]) */;
    %73 = %69.0;
    %74 = %72.1;
    (%73, %74, meta[relay.Constant][5] /* ty=Tensor[(168), int64] */)
  };
  %75() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(2, 14, 6), int8], Tensor[(168), int64]) */
}

def @func_4724() -> (Tensor[(168), int64],) {
  %76 = @func_4341() /* ty=Tensor[(168), int64] */;
  (%76,)
}

def @func_26(%var_25: uint8) -> (Tensor[(?, 6, 7), float32], Tensor[(1, 6, 7), float32]) {
  %90 = fn (%var_0: uint8) -> (Tensor[(?, 6, 7), float32], Tensor[(1, 6, 7), float32]) {
    %77 = cast(%var_0, dtype="bool") /* ty=bool */;
    %78 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 6, 7), uint8] */, dtype="bool") /* ty=Tensor[(1, 6, 7), bool] */;
    %79 = less_equal(%77, %78) /* ty=Tensor[(1, 6, 7), bool] */;
    %80 = cast(%var_0, dtype="bool") /* ty=bool */;
    %81 = cast(%79, dtype="bool") /* ty=Tensor[(1, 6, 7), bool] */;
    %82 = logical_or(%80, %81) /* ty=Tensor[(1, 6, 7), bool] */;
    %83 = cast(%82, dtype="float32") /* ty=Tensor[(1, 6, 7), float32] */;
    %84 = shape_of(%79, dtype="int32") /* ty=Tensor[(3), int32] */;
    %85 = cast(%79, dtype="float32") /* ty=Tensor[(1, 6, 7), float32] */;
    %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %87 = cast(%79, dtype="float32") /* ty=Tensor[(1, 6, 7), float32] */;
    %88 = floor_divide(%85, %86) /* ty=Tensor[(?, 6, 7), float32] */;
    %89 = acos(%87) /* ty=Tensor[(1, 6, 7), float32] */;
    (%88, %89)
  };
  %90(%var_25) /* ty=(Tensor[(?, 6, 7), float32], Tensor[(1, 6, 7), float32]) */
}

def @func_2682(%var_2641: Tensor[(8, 16, 15), float64], %var_2670: Tensor[(8, 16, 15), float64]) -> Tensor[(8, 16, 15), bool] {
  %91 = cast(%var_2641, dtype="float64") /* ty=Tensor[(8, 16, 15), float64] */;
  %92 = sqrt(%91) /* ty=Tensor[(8, 16, 15), float64] */;
  %93 = cast(%var_2670, dtype="bool") /* ty=Tensor[(8, 16, 15), bool] */;
  %94 = shape_of(%92, dtype="int32") /* ty=Tensor[(3), int32] */;
  %95 = cast(%92, dtype="bool") /* ty=Tensor[(8, 16, 15), bool] */;
  %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%95, %96) /* ty=Tensor[(8, 16, 15), bool] */
}

def @func_3486(%var_3442: Tensor[(9, 390), float64]) -> (Tensor[(9, 390), int32],) {
  %97 = @func_2908() /* ty=(Tensor[(4, 14, 2), uint32], Tensor[(4, 14, 2), int8], Tensor[(1, 390), float64], Tensor[(750), float32], Tensor[(4, 14, 2), float64], Tensor[(16, 13, 4), int8], Tensor[(4, 208), int8]) */;
  %98 = %97.2;
  %99 = cast(%98, dtype="float64") /* ty=Tensor[(1, 390), float64] */;
  %100 = cast(%var_3442, dtype="float64") /* ty=Tensor[(9, 390), float64] */;
  %101 = power(%99, %100) /* ty=Tensor[(9, 390), float64] */;
  %102 = cast(%101, dtype="int16") /* ty=Tensor[(9, 390), int16] */;
  %103 = cast(%98, dtype="int16") /* ty=Tensor[(1, 390), int16] */;
  %104 = maximum(%102, %103) /* ty=Tensor[(9, 390), int16] */;
  %105 = cast(%98, dtype="bool") /* ty=Tensor[(1, 390), bool] */;
  %106 = cast(%var_3442, dtype="bool") /* ty=Tensor[(9, 390), bool] */;
  %107 = logical_or(%105, %106) /* ty=Tensor[(9, 390), bool] */;
  %108 = cast(%107, dtype="int16") /* ty=Tensor[(9, 390), int16] */;
  %109 = shape_of(%104, dtype="int32") /* ty=Tensor[(2), int32] */;
  %110 = cast(%104, dtype="int16") /* ty=Tensor[(9, 390), int16] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %112 = multiply(%110, %111) /* ty=Tensor[(9, 390), int16] */;
  %113 = cast(%104, dtype="int32") /* ty=Tensor[(9, 390), int32] */;
  %114 = shape_of(%112, dtype="int32") /* ty=Tensor[(2), int32] */;
  %115 = cast(%112, dtype="int32") /* ty=Tensor[(9, 390), int32] */;
  %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %117 = bitwise_and(%115, %116) /* ty=Tensor[(9, 390), int32] */;
  (%117,)
}

def @func_4613(%var_4611: Tensor[(225, 1), float32]) -> (Tensor[(168), int64], Tensor[(2, 14, 6), float64], Tensor[(5, 45), float32], Tensor[(288), float32], Tensor[(225, 1), float32]) {
  @func_4610(%var_4611) /* ty=(Tensor[(168), int64], Tensor[(2, 14, 6), float64], Tensor[(5, 45), float32], Tensor[(288), float32], Tensor[(225, 1), float32]) */
}

def @func_4309(%var_4305: Tensor[(1040, 1), float64], %var_4306: Tensor[(2, 14, 6), float32], %var_4307: Tensor[(390), float64], %var_4308: uint64) -> (Tensor[(4, 4, 9), float32], Tensor[(144), float32], Tensor[(5, 16, 13), float64], Tensor[(1040, 1), float64], Tensor[(2, 14, 6), bool], Tensor[(112), float32], Tensor[(390), float64], Tensor[(6, 9, 12), float64], uint64) {
  %142 = fn (%var_4283: Tensor[(1040, 1), float64], %var_4285: Tensor[(2, 14, 6), float32], %var_4299: Tensor[(390), float64], %var_4302: uint64) -> (Tensor[(4, 4, 9), float32], Tensor[(144), float32], Tensor[(5, 16, 13), float64], Tensor[(1040, 1), float64], Tensor[(2, 14, 6), bool], Tensor[(112), float32], Tensor[(390), float64], Tensor[(6, 9, 12), float64], uint64) {
    %118 = cast(meta[relay.Constant][7] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
    %119 = reshape(%118, newshape=[4, 4, 9]) /* ty=Tensor[(4, 4, 9), float32] */;
    %120 = @func_65(%119) /* ty=(Tensor[(4, 4, 9), float32],) */;
    %121 = cast(%var_4283, dtype="float64") /* ty=Tensor[(1040, 1), float64] */;
    %122 = cast(%var_4283, dtype="float64") /* ty=Tensor[(1040, 1), float64] */;
    %123 = reshape(%121, newshape=[5, 16, 13]) /* ty=Tensor[(5, 16, 13), float64] */;
    %124 = reshape(%122, newshape=[5, 16, 13]) /* ty=Tensor[(5, 16, 13), float64] */;
    %125 = @func_3002() /* ty=(Tensor[(2, 14, 6), float32],) */;
    %126 = %125.0;
    %127 = cast(%var_4285, dtype="bool") /* ty=Tensor[(2, 14, 6), bool] */;
    %128 = shape_of(%126, dtype="int32") /* ty=Tensor[(3), int32] */;
    %129 = cast(%126, dtype="bool") /* ty=Tensor[(2, 14, 6), bool] */;
    %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %131 = cast(%var_4299, dtype="float64") /* ty=Tensor[(390), float64] */;
    %132 = reshape(%131, newshape=[195, 2]) /* ty=Tensor[(195, 2), float64] */;
    %133 = @func_3803(%132) /* ty=(Tensor[(2, 14, 6), int8], Tensor[(390), float64], Tensor[(112), float32], Tensor[(195, 2), float64]) */;
    %134 = cast(%var_4302, dtype="uint64") /* ty=uint64 */;
    %135 = reshape(%134, newshape=[]) /* ty=uint64 */;
    %136 = @func_2087(%135) /* ty=(Tensor[(4, 14, 2), float32], Tensor[(16, 16, 5), uint64], Tensor[(4, 14, 2), float32], Tensor[(6, 9, 12), float64], Tensor[(4, 14, 2), int8]) */;
    %137 = %120.0;
    %138 = @func_4220(%123, %124) /* ty=Tensor[(5, 16, 13), float64] */;
    %139 = less_equal(%129, %130) /* ty=Tensor[(2, 14, 6), bool] */;
    %140 = %133.2;
    %141 = %136.3;
    (%137, meta[relay.Constant][7] /* ty=Tensor[(144), float32] */, %138, %var_4283, %139, %140, %var_4299, %141, %var_4302)
  };
  %142(%var_4305, %var_4306, %var_4307, %var_4308) /* ty=(Tensor[(4, 4, 9), float32], Tensor[(144), float32], Tensor[(5, 16, 13), float64], Tensor[(1040, 1), float64], Tensor[(2, 14, 6), bool], Tensor[(112), float32], Tensor[(390), float64], Tensor[(6, 9, 12), float64], uint64) */
}

def @func_7578() -> (Tensor[(168), int64], Tensor[(2, 14, 6), int32]) {
  %143 = @func_3625() /* ty=(Tensor[(2, 14, 6), int32],) */;
  %144 = @func_4341() /* ty=Tensor[(168), int64] */;
  %145 = %143.0;
  (%144, %145)
}

def @func_5991() -> Tensor[(750), float32] {
  %146 = @func_5840() /* ty=(Tensor[(750), float32],) */;
  %146.0
}

def @func_2565(%var_2563: Tensor[(225), float32], %var_2564: Tensor[(112), float32]) -> (Tensor[(?, 6, 7), float32], Tensor[(5, 45), float32], Tensor[(288), float32], Tensor[(750, 390), bool], Tensor[(750, 225), int32], Tensor[(832), int8], Tensor[(1280), uint64], Tensor[(112), float32]) {
  %173 = fn (%var_2521: Tensor[(225), float32], %var_2554: Tensor[(112), float32]) -> (Tensor[(?, 6, 7), float32], Tensor[(5, 45), float32], Tensor[(288), float32], Tensor[(750, 390), bool], Tensor[(750, 225), int32], Tensor[(832), int8], Tensor[(1280), uint64], Tensor[(112), float32]) {
    %147 = cast(meta[relay.Constant][8] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
    %148 = cast(%var_2521, dtype="float32") /* ty=Tensor[(225), float32] */;
    %149 = reshape(%147, newshape=[12, 2, 12]) /* ty=Tensor[(12, 2, 12), float32] */;
    %150 = reshape(%148, newshape=[5, 45]) /* ty=Tensor[(5, 45), float32] */;
    %151 = @func_1210(%149, %150) /* ty=(Tensor[(12, 2, 12), float32], Tensor[(5, 9, 5), float32], Tensor[(5, 45), float32], Tensor[(13, 5, 6), float64], Tensor[(390), float64]) */;
    %152 = cast(meta[relay.Constant][9] /* ty=Tensor[(750, 1), float32] */, dtype="float32") /* ty=Tensor[(750, 1), float32] */;
    %153 = reshape(%152, newshape=[750]) /* ty=Tensor[(750), float32] */;
    %154 = @func_1429(%153) /* ty=(Tensor[(10, 14, 10), float32], Tensor[(10, 14, 10), float64], Tensor[(1, 390), float64], Tensor[(750), float32]) */;
    %155 = %154.2;
    %156 = cast(%155, dtype="bool") /* ty=Tensor[(1, 390), bool] */;
    %157 = cast(meta[relay.Constant][9] /* ty=Tensor[(750, 1), float32] */, dtype="bool") /* ty=Tensor[(750, 1), bool] */;
    %158 = cast(%var_2521, dtype="bool") /* ty=Tensor[(225), bool] */;
    %159 = cast(meta[relay.Constant][9] /* ty=Tensor[(750, 1), float32] */, dtype="bool") /* ty=Tensor[(750, 1), bool] */;
    %160 = not_equal(%158, %159) /* ty=Tensor[(750, 225), bool] */;
    %161 = cast(%160, dtype="int32") /* ty=Tensor[(750, 225), int32] */;
    %162 = cast(meta[relay.Constant][9] /* ty=Tensor[(750, 1), float32] */, dtype="int32") /* ty=Tensor[(750, 1), int32] */;
    %163 = cast(meta[relay.Constant][10] /* ty=Tensor[(1280), uint64] */, dtype="uint64") /* ty=Tensor[(1280), uint64] */;
    %164 = cast(%var_2554, dtype="float32") /* ty=Tensor[(112), float32] */;
    %165 = reshape(%163, newshape=[16, 16, 5]) /* ty=Tensor[(16, 16, 5), uint64] */;
    %166 = reshape(%164, newshape=[4, 14, 2]) /* ty=Tensor[(4, 14, 2), float32] */;
    %167 = @func_2160(%165, %166) /* ty=(Tensor[(6, 9, 12), float64], Tensor[(832), int8], Tensor[(16, 16, 5), bool], Tensor[(4, 14, 2), float32]) */;
    %168 = @func_2215() /* ty=Tensor[(?, 6, 7), float32] */;
    %169 = %151.2;
    %170 = equal(%156, %157) /* ty=Tensor[(750, 390), bool] */;
    %171 = subtract(%161, %162) /* ty=Tensor[(750, 225), int32] */;
    %172 = %167.1;
    (%168, %169, meta[relay.Constant][8] /* ty=Tensor[(288), float32] */, %170, %171, %172, meta[relay.Constant][10] /* ty=Tensor[(1280), uint64] */, %var_2554)
  };
  %173(%var_2563, %var_2564) /* ty=(Tensor[(?, 6, 7), float32], Tensor[(5, 45), float32], Tensor[(288), float32], Tensor[(750, 390), bool], Tensor[(750, 225), int32], Tensor[(832), int8], Tensor[(1280), uint64], Tensor[(112), float32]) */
}

def @func_4053() -> (Tensor[(?, 6, 7), float64], Tensor[(2, 14, 6), int8]) {
  %174 = @func_3724() /* ty=(Tensor[(?, 6, 7), float64],) */;
  %175 = @func_3157() /* ty=(Tensor[(2, 14, 6), int8],) */;
  %176 = %174.0;
  %177 = %175.0;
  (%176, %177)
}

def @func_6471(%var_6470: Tensor[(10, 75), float32]) -> (Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32], Tensor[(13, 5, 6), float64], Tensor[(10, 75), bool]) {
  %197 = fn (%var_6453: Tensor[(10, 75), float32]) -> (Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32], Tensor[(13, 5, 6), float64], Tensor[(10, 75), bool]) {
    %178 = @func_3693() /* ty=(Tensor[(?, 6, 7), float32],) */;
    %179 = cast(meta[relay.Constant][11] /* ty=Tensor[(10, 75), float32] */, dtype="float32") /* ty=Tensor[(10, 75), float32] */;
    %180 = cast(meta[relay.Constant][11] /* ty=Tensor[(10, 75), float32] */, dtype="float32") /* ty=Tensor[(10, 75), float32] */;
    %181 = reshape(%179, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), float32] */;
    %182 = reshape(%180, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), float32] */;
    %183 = @func_980(%181, %182) /* ty=(Tensor[(10, 5, 15), float32], Tensor[(13, 5, 6), float64], Tensor[(1, 390), float64]) */;
    %184 = cast(%var_6453, dtype="uint8") /* ty=Tensor[(10, 75), uint8] */;
    %185 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(10, 75), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %186 = cast(meta[relay.Constant][11] /* ty=Tensor[(10, 75), float32] */, dtype="uint8") /* ty=Tensor[(10, 75), uint8] */;
    %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %188 = add(%186, %187) /* ty=Tensor[(10, 75), uint8] */;
    %189 = cast(%188, dtype="bool") /* ty=Tensor[(10, 75), bool] */;
    %190 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(10, 75), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %191 = cast(meta[relay.Constant][11] /* ty=Tensor[(10, 75), float32] */, dtype="bool") /* ty=Tensor[(10, 75), bool] */;
    %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %193 = @func_2761() /* ty=Tensor[(6, 9, 12), float64] */;
    %194 = %178.0;
    %195 = %183.1;
    %196 = less_equal(%191, %192) /* ty=Tensor[(10, 75), bool] */;
    (%193, %194, %195, %196)
  };
  %197(%var_6470) /* ty=(Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32], Tensor[(13, 5, 6), float64], Tensor[(10, 75), bool]) */
}

def @func_5875(%var_5873: Tensor[(288), float32], %var_5874: Tensor[(25, 9), float32]) -> (Tensor[(6, 9, 12), float64], Tensor[(390), float64], Tensor[(288), float32], Tensor[(25, 9), float32]) {
  @func_5871(%var_5873, %var_5874) /* ty=(Tensor[(6, 9, 12), float64], Tensor[(390), float64], Tensor[(288), float32], Tensor[(25, 9), float32]) */
}

def @func_6937() -> Tensor[(168), int64] {
  %199 = fn () -> Tensor[(168), int64] {
    %198 = @func_5530() /* ty=(Tensor[(168), int64],) */;
    %198.0
  };
  %199() /* ty=Tensor[(168), int64] */
}

def @func_5344(%var_5342: Tensor[(4, 9, 10), float64], %var_5343: Tensor[(4, 9, 10), float64]) -> (Tensor[(4, 9, 10), float64],) {
  %205 = fn (%var_5336: Tensor[(4, 9, 10), float64], %var_5337: Tensor[(4, 9, 10), float64]) -> (Tensor[(4, 9, 10), float64],) {
    %200 = cast(%var_5337, dtype="float64") /* ty=Tensor[(4, 9, 10), float64] */;
    %201 = shape_of(%var_5336, dtype="int32") /* ty=Tensor[(3), int32] */;
    %202 = cast(%var_5336, dtype="float64") /* ty=Tensor[(4, 9, 10), float64] */;
    %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %204 = divide(%202, %203) /* ty=Tensor[(4, 9, 10), float64] */;
    (%204,)
  };
  %205(%var_5342, %var_5343) /* ty=(Tensor[(4, 9, 10), float64],) */
}

def @func_7580() -> (Tensor[(168), int64], Tensor[(2, 14, 6), int32]) {
  @func_7578() /* ty=(Tensor[(168), int64], Tensor[(2, 14, 6), int32]) */
}

def @func_4417(%var_4353: Tensor[(6, 12, 3), bool], %var_4354: Tensor[(6, 12, 3), bool]) -> (Tensor[(6, 12, 3), bool], Tensor[(?, 6, 7), float64], Tensor[(?, 6, 7), float32], Tensor[(168), int64]) {
  %206 = cast(%var_4354, dtype="bool") /* ty=Tensor[(6, 12, 3), bool] */;
  %207 = shape_of(%var_4353, dtype="int32") /* ty=Tensor[(3), int32] */;
  %208 = cast(%var_4353, dtype="bool") /* ty=Tensor[(6, 12, 3), bool] */;
  %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %210 = @func_3724() /* ty=(Tensor[(?, 6, 7), float64],) */;
  %211 = @func_4135() /* ty=(Tensor[(?, 6, 7), float32],) */;
  %212 = @func_2330() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(2, 14, 6), int8], Tensor[(168), int64]) */;
  %213 = logical_and(%208, %209) /* ty=Tensor[(6, 12, 3), bool] */;
  %214 = %210.0;
  %215 = %211.0;
  %216 = %212.2;
  (%213, %214, %215, %216)
}

def @func_6812(%var_6810: Tensor[(1, 6, 7), float32], %var_6811: Tensor[(168), int64]) -> (Tensor[(?, 6, 7), int8], Tensor[(?, 6, 7), uint16], Tensor[(168), uint32], Tensor[(14, 12, 11), float64], Tensor[(1848), float64]) {
  @func_6808(%var_6810, %var_6811) /* ty=(Tensor[(?, 6, 7), int8], Tensor[(?, 6, 7), uint16], Tensor[(168), uint32], Tensor[(14, 12, 11), float64], Tensor[(1848), float64]) */
}

def @func_3158() -> (Tensor[(2, 14, 6), int8],) {
  %219 = fn () -> (Tensor[(2, 14, 6), int8],) {
    %217 = @func_2341() /* ty=(Tensor[(4, 14, 2), float32], Tensor[(2, 14, 6), int8], Tensor[(168), int64]) */;
    %218 = %217.1;
    (%218,)
  };
  %219() /* ty=(Tensor[(2, 14, 6), int8],) */
}

def @func_2354() -> (Tensor[(6, 9, 12), float64],) {
  @func_2352() /* ty=(Tensor[(6, 9, 12), float64],) */
}

def @func_3534() -> (Tensor[(168), int64],) {
  %222 = fn () -> (Tensor[(168), int64],) {
    %220 = @func_2330() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(2, 14, 6), int8], Tensor[(168), int64]) */;
    %221 = %220.2;
    (%221,)
  };
  %222() /* ty=(Tensor[(168), int64],) */
}

def @func_6727() -> (Tensor[(168), int64],) {
  %225 = fn () -> (Tensor[(168), int64],) {
    %223 = @func_5530() /* ty=(Tensor[(168), int64],) */;
    %224 = %223.0;
    (%224,)
  };
  %225() /* ty=(Tensor[(168), int64],) */
}

def @func_4136() -> (Tensor[(?, 6, 7), float32],) {
  %228 = fn () -> (Tensor[(?, 6, 7), float32],) {
    %226 = @func_2711() /* ty=(Tensor[(168), int64], Tensor[(?, 6, 7), float32]) */;
    %227 = %226.1;
    (%227,)
  };
  %228() /* ty=(Tensor[(?, 6, 7), float32],) */
}

def @func_5360(%var_5351: Tensor[(13, 1, 5), float32], %var_5357: Tensor[(288), float32], %var_5358: Tensor[(225), float32]) -> (Tensor[(13, 1, 5), float32], Tensor[(5, 9, 5), float32], Tensor[(288), float32], Tensor[(225), float32]) {
  %229 = cast(%var_5351, dtype="float32") /* ty=Tensor[(13, 1, 5), float32] */;
  %230 = cast(%var_5357, dtype="float32") /* ty=Tensor[(288), float32] */;
  %231 = cast(%var_5358, dtype="float32") /* ty=Tensor[(225), float32] */;
  %232 = reshape(%230, newshape=[12, 2, 12]) /* ty=Tensor[(12, 2, 12), float32] */;
  %233 = reshape(%231, newshape=[5, 45]) /* ty=Tensor[(5, 45), float32] */;
  %234 = @func_1210(%232, %233) /* ty=(Tensor[(12, 2, 12), float32], Tensor[(5, 9, 5), float32], Tensor[(5, 45), float32], Tensor[(13, 5, 6), float64], Tensor[(390), float64]) */;
  %235 = acosh(%229) /* ty=Tensor[(13, 1, 5), float32] */;
  %236 = %234.1;
  (%235, %236, %var_5357, %var_5358)
}

def @func_7622(%var_7585: uint64, %var_7595: Tensor[(832), float32]) -> (Tensor[(5, 16, 12), uint64], Tensor[(168), int64], Tensor[(832), float32]) {
  %237 = cast(%var_7585, dtype="uint64") /* ty=uint64 */;
  %238 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 16, 12), uint64] */, dtype="uint64") /* ty=Tensor[(5, 16, 12), uint64] */;
  %239 = cast(%var_7595, dtype="float32") /* ty=Tensor[(832), float32] */;
  %240 = reshape(%239, newshape=[832]) /* ty=Tensor[(832), float32] */;
  %241 = @func_5278(%240) /* ty=(Tensor[(168), int64], Tensor[(16, 4, 13), float32], Tensor[(832), float32]) */;
  %242 = right_shift(%237, %238) /* ty=Tensor[(5, 16, 12), uint64] */;
  %243 = %241.0;
  (%242, %243, %var_7595)
}

def @func_3695() -> (Tensor[(?, 6, 7), float32],) {
  @func_3693() /* ty=(Tensor[(?, 6, 7), float32],) */
}

def @func_5005() -> Tensor[(6, 9, 12), float64] {
  @func_5003() /* ty=Tensor[(6, 9, 12), float64] */
}

def @func_5901(%var_5899: Tensor[(9, 1, 5), uint64]) -> (Tensor[(9, 1, 5), uint64],) {
  @func_5898(%var_5899) /* ty=(Tensor[(9, 1, 5), uint64],) */
}

def @func_6118(%var_6117: Tensor[(10, 6, 7), float32]) -> (Tensor[(10, 6, 7), float32], Tensor[(10, 6, 7), int16], Tensor[(6, 9, 12), float64]) {
  %253 = fn (%var_6080: Tensor[(10, 6, 7), float32]) -> (Tensor[(10, 6, 7), float32], Tensor[(10, 6, 7), int16], Tensor[(6, 9, 12), float64]) {
    %244 = @func_4210() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32]) */;
    %245 = %244.1;
    %246 = cast(%245, dtype="float32") /* ty=Tensor[(?, 6, 7), float32] */;
    %247 = cast(%var_6080, dtype="float32") /* ty=Tensor[(10, 6, 7), float32] */;
    %248 = cast(%var_6080, dtype="int16") /* ty=Tensor[(10, 6, 7), int16] */;
    %249 = cast(%245, dtype="int16") /* ty=Tensor[(?, 6, 7), int16] */;
    %250 = minimum(%246, %247) /* ty=Tensor[(10, 6, 7), float32] */;
    %251 = right_shift(%248, %249) /* ty=Tensor[(10, 6, 7), int16] */;
    %252 = @func_5775() /* ty=Tensor[(6, 9, 12), float64] */;
    (%250, %251, %252)
  };
  %253(%var_6117) /* ty=(Tensor[(10, 6, 7), float32], Tensor[(10, 6, 7), int16], Tensor[(6, 9, 12), float64]) */
}

def @func_1614(%var_1603: Tensor[(2, 14, 6), int64]) -> (Tensor[(2, 14, 6), bool], Tensor[(2, 14, 6), int8]) {
  %254 = cast(-3 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %255 = cast(%var_1603, dtype="bool") /* ty=Tensor[(2, 14, 6), bool] */;
  %256 = cast(-3 /* ty=int64 */, dtype="int8") /* ty=int8 */;
  %257 = cast(%var_1603, dtype="int8") /* ty=Tensor[(2, 14, 6), int8] */;
  %258 = not_equal(%254, %255) /* ty=Tensor[(2, 14, 6), bool] */;
  %259 = bitwise_and(%256, %257) /* ty=Tensor[(2, 14, 6), int8] */;
  (%258, %259)
}

def @func_5121() -> (Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float64]) {
  %260 = @func_3724() /* ty=(Tensor[(?, 6, 7), float64],) */;
  %261 = @func_2761() /* ty=Tensor[(6, 9, 12), float64] */;
  %262 = %260.0;
  (%261, %262)
}

def @func_1536(%var_1535: Tensor[(15, 13, 6), float32]) -> (Tensor[(15, 13, 6), float32], uint64, Tensor[(1, 832), int8]) {
  %271 = fn (%var_1508: Tensor[(15, 13, 6), float32]) -> (Tensor[(15, 13, 6), float32], uint64, Tensor[(1, 832), int8]) {
    %263 = cast(%var_1508, dtype="float32") /* ty=Tensor[(15, 13, 6), float32] */;
    %264 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 832), int8] */, dtype="int8") /* ty=Tensor[(1, 832), int8] */;
    %265 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 832), int8] */, dtype="int8") /* ty=Tensor[(1, 832), int8] */;
    %266 = reshape(%264, newshape=[16, 13, 4]) /* ty=Tensor[(16, 13, 4), int8] */;
    %267 = reshape(%265, newshape=[16, 13, 4]) /* ty=Tensor[(16, 13, 4), int8] */;
    %268 = @func_1120(%266, %267) /* ty=(Tensor[(16, 13, 4), int8], Tensor[(16, 16, 5), uint64], uint64) */;
    %269 = asinh(%263) /* ty=Tensor[(15, 13, 6), float32] */;
    %270 = %268.2;
    (%269, %270, meta[relay.Constant][13] /* ty=Tensor[(1, 832), int8] */)
  };
  %271(%var_1535) /* ty=(Tensor[(15, 13, 6), float32], uint64, Tensor[(1, 832), int8]) */
}

def @func_5433(%var_5431: Tensor[(450), int64]) -> (Tensor[(6, 15, 5), bool], Tensor[(450), int64], Tensor[(?, 6, 7), bool]) {
  @func_5430(%var_5431) /* ty=(Tensor[(6, 15, 5), bool], Tensor[(450), int64], Tensor[(?, 6, 7), bool]) */
}

def @func_6701() -> (uint8,) {
  @func_6699() /* ty=(uint8,) */
}

def @func_5333() -> Tensor[(4, 14, 2), float64] {
  %272 = @func_2908() /* ty=(Tensor[(4, 14, 2), uint32], Tensor[(4, 14, 2), int8], Tensor[(1, 390), float64], Tensor[(750), float32], Tensor[(4, 14, 2), float64], Tensor[(16, 13, 4), int8], Tensor[(4, 208), int8]) */;
  %273 = %272.1;
  %274 = cast(%273, dtype="float64") /* ty=Tensor[(4, 14, 2), float64] */;
  rsqrt(%274) /* ty=Tensor[(4, 14, 2), float64] */
}

def @func_2341() -> (Tensor[(4, 14, 2), float32], Tensor[(2, 14, 6), int8], Tensor[(168), int64]) {
  %275 = cast(meta[relay.Constant][14] /* ty=Tensor[(168), int64] */, dtype="int64") /* ty=Tensor[(168), int64] */;
  %276 = reshape(%275, newshape=[2, 14, 6]) /* ty=Tensor[(2, 14, 6), int64] */;
  %277 = @func_1614(%276) /* ty=(Tensor[(2, 14, 6), bool], Tensor[(2, 14, 6), int8]) */;
  %278 = @func_1870() /* ty=Tensor[(4, 14, 2), float32] */;
  %279 = %277.1;
  (%278, %279, meta[relay.Constant][14] /* ty=Tensor[(168), int64] */)
}

def @func_4965() -> Tensor[(2, 14, 6), float32] {
  %280 = fn () -> Tensor[(2, 14, 6), float32] {
    @func_3088() /* ty=Tensor[(2, 14, 6), float32] */
  };
  %280() /* ty=Tensor[(2, 14, 6), float32] */
}

def @func_4055() -> (Tensor[(?, 6, 7), float64], Tensor[(2, 14, 6), int8]) {
  @func_4053() /* ty=(Tensor[(?, 6, 7), float64], Tensor[(2, 14, 6), int8]) */
}

def @func_5871(%var_5861: Tensor[(288), float32], %var_5862: Tensor[(25, 9), float32]) -> (Tensor[(6, 9, 12), float64], Tensor[(390), float64], Tensor[(288), float32], Tensor[(25, 9), float32]) {
  %281 = cast(%var_5861, dtype="float32") /* ty=Tensor[(288), float32] */;
  %282 = cast(%var_5862, dtype="float32") /* ty=Tensor[(25, 9), float32] */;
  %283 = reshape(%281, newshape=[12, 2, 12]) /* ty=Tensor[(12, 2, 12), float32] */;
  %284 = reshape(%282, newshape=[5, 45]) /* ty=Tensor[(5, 45), float32] */;
  %285 = @func_1210(%283, %284) /* ty=(Tensor[(12, 2, 12), float32], Tensor[(5, 9, 5), float32], Tensor[(5, 45), float32], Tensor[(13, 5, 6), float64], Tensor[(390), float64]) */;
  %286 = cast(%var_5862, dtype="float32") /* ty=Tensor[(25, 9), float32] */;
  %287 = @func_4798() /* ty=Tensor[(6, 9, 12), float64] */;
  %288 = %285.4;
  %289 = sqrt(%286) /* ty=Tensor[(25, 9), float32] */;
  (%287, %288, %var_5861, %289)
}

def @func_6489() -> Tensor[(?, 6, 7), float32] {
  %290 = @func_4135() /* ty=(Tensor[(?, 6, 7), float32],) */;
  %290.0
}

def @func_7065(%var_7063: Tensor[(1, 8, 10), bool], %var_7064: Tensor[(4, 8, 10), bool]) -> Tensor[(4, 8, 10), bool] {
  @func_7061(%var_7063, %var_7064) /* ty=Tensor[(4, 8, 10), bool] */
}

def @func_4949() -> Tensor[(?, 6, 7), float32] {
  @func_4947() /* ty=Tensor[(?, 6, 7), float32] */
}

def @func_7517(%var_7511: Tensor[(7, 4, 7), uint16], %var_7512: Tensor[(7, 4, 7), uint16], %var_7513: Tensor[(1848), float64], %var_7514: uint64, %var_7515: Tensor[(24, 12), float32], %var_7516: Tensor[(225), float32]) -> (Tensor[(7, 4, 7), bool], Tensor[(?, 6, 7), float32], Tensor[(1040), float64], Tensor[(1848), float64], uint64, Tensor[(25, 9), float32], Tensor[(24, 12), float32], Tensor[(225), float32]) {
  @func_7509(%var_7511, %var_7512, %var_7513, %var_7514, %var_7515, %var_7516) /* ty=(Tensor[(7, 4, 7), bool], Tensor[(?, 6, 7), float32], Tensor[(1040), float64], Tensor[(1848), float64], uint64, Tensor[(25, 9), float32], Tensor[(24, 12), float32], Tensor[(225), float32]) */
}

def @func_1998(%var_1997: Tensor[(14, 10, 5), int64]) -> (Tensor[(14, 10, 5), int64],) {
  %294 = fn (%var_1992: Tensor[(14, 10, 5), int64]) -> (Tensor[(14, 10, 5), int64],) {
    %291 = cast(-2 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %292 = cast(%var_1992, dtype="int64") /* ty=Tensor[(14, 10, 5), int64] */;
    %293 = left_shift(%291, %292) /* ty=Tensor[(14, 10, 5), int64] */;
    (%293,)
  };
  %294(%var_1997) /* ty=(Tensor[(14, 10, 5), int64],) */
}

def @func_3725() -> (Tensor[(?, 6, 7), float64],) {
  %299 = fn () -> (Tensor[(?, 6, 7), float64],) {
    %295 = @func_2939() /* ty=(Tensor[(?, 6, 7), float32], Tensor[(1, 390), float64], Tensor[(1, 390), float64]) */;
    %296 = %295.0;
    %297 = cast(%296, dtype="float64") /* ty=Tensor[(?, 6, 7), float64] */;
    %298 = cos(%297) /* ty=Tensor[(?, 6, 7), float64] */;
    (%298,)
  };
  %299() /* ty=(Tensor[(?, 6, 7), float64],) */
}

def @func_2163(%var_2161: Tensor[(16, 16, 5), uint64], %var_2162: Tensor[(4, 14, 2), float32]) -> (Tensor[(6, 9, 12), float64], Tensor[(832), int8], Tensor[(16, 16, 5), bool], Tensor[(4, 14, 2), float32]) {
  %319 = fn (%var_2139: Tensor[(16, 16, 5), uint64], %var_2150: Tensor[(4, 14, 2), float32]) -> (Tensor[(6, 9, 12), float64], Tensor[(832), int8], Tensor[(16, 16, 5), bool], Tensor[(4, 14, 2), float32]) {
    %300 = @func_1734() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32], uint8) */;
    %301 = cast(meta[relay.Constant][15] /* ty=Tensor[(832), int8] */, dtype="int8") /* ty=Tensor[(832), int8] */;
    %302 = cast(meta[relay.Constant][15] /* ty=Tensor[(832), int8] */, dtype="int8") /* ty=Tensor[(832), int8] */;
    %303 = reshape(%301, newshape=[16, 13, 4]) /* ty=Tensor[(16, 13, 4), int8] */;
    %304 = reshape(%302, newshape=[16, 13, 4]) /* ty=Tensor[(16, 13, 4), int8] */;
    %305 = @func_1120(%303, %304) /* ty=(Tensor[(16, 13, 4), int8], Tensor[(16, 16, 5), uint64], uint64) */;
    %306 = %305.1;
    %307 = cast(%var_2139, dtype="bool") /* ty=Tensor[(16, 16, 5), bool] */;
    %308 = shape_of(%306, dtype="int32") /* ty=Tensor[(3), int32] */;
    %309 = cast(%306, dtype="bool") /* ty=Tensor[(16, 16, 5), bool] */;
    %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %311 = @func_1870() /* ty=Tensor[(4, 14, 2), float32] */;
    %312 = cast(%var_2150, dtype="float32") /* ty=Tensor[(4, 14, 2), float32] */;
    %313 = shape_of(%311, dtype="int32") /* ty=Tensor[(3), int32] */;
    %314 = cast(%311, dtype="float32") /* ty=Tensor[(4, 14, 2), float32] */;
    %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %316 = %300.0;
    %317 = not_equal(%309, %310) /* ty=Tensor[(16, 16, 5), bool] */;
    %318 = minimum(%314, %315) /* ty=Tensor[(4, 14, 2), float32] */;
    (%316, meta[relay.Constant][15] /* ty=Tensor[(832), int8] */, %317, %318)
  };
  %319(%var_2161, %var_2162) /* ty=(Tensor[(6, 9, 12), float64], Tensor[(832), int8], Tensor[(16, 16, 5), bool], Tensor[(4, 14, 2), float32]) */
}

def @func_5777() -> Tensor[(6, 9, 12), float64] {
  @func_5775() /* ty=Tensor[(6, 9, 12), float64] */
}

def @func_5278(%var_5265: Tensor[(832), float32]) -> (Tensor[(168), int64], Tensor[(16, 4, 13), float32], Tensor[(832), float32]) {
  %320 = @func_2330() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(2, 14, 6), int8], Tensor[(168), int64]) */;
  %321 = cast(%var_5265, dtype="float32") /* ty=Tensor[(832), float32] */;
  %322 = reshape(%321, newshape=[16, 4, 13]) /* ty=Tensor[(16, 4, 13), float32] */;
  %323 = @func_4110(%322) /* ty=(Tensor[(16, 4, 13), float32],) */;
  %324 = %320.2;
  %325 = %323.0;
  (%324, %325, %var_5265)
}

def @func_5775() -> Tensor[(6, 9, 12), float64] {
  %326 = @func_1734() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32], uint8) */;
  %326.0
}

def @func_2279(%var_2277: Tensor[(4, 14, 2), float32], %var_2278: Tensor[(390), float64]) -> (Tensor[(4, 14, 2), float32], Tensor[(13, 5, 6), float64], Tensor[(390), float64]) {
  %343 = fn (%var_2244: Tensor[(4, 14, 2), float32], %var_2272: Tensor[(390), float64]) -> (Tensor[(4, 14, 2), float32], Tensor[(13, 5, 6), float64], Tensor[(390), float64]) {
    %327 = @func_1870() /* ty=Tensor[(4, 14, 2), float32] */;
    %328 = cast(%var_2244, dtype="uint64") /* ty=Tensor[(4, 14, 2), uint64] */;
    %329 = shape_of(%327, dtype="int32") /* ty=Tensor[(3), int32] */;
    %330 = cast(%327, dtype="uint64") /* ty=Tensor[(4, 14, 2), uint64] */;
    %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %332 = maximum(%330, %331) /* ty=Tensor[(4, 14, 2), uint64] */;
    %333 = cast(%var_2244, dtype="float32") /* ty=Tensor[(4, 14, 2), float32] */;
    %334 = shape_of(%332, dtype="int32") /* ty=Tensor[(3), int32] */;
    %335 = cast(%332, dtype="float32") /* ty=Tensor[(4, 14, 2), float32] */;
    %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %337 = power(%335, %336) /* ty=Tensor[(4, 14, 2), float32] */;
    %338 = cast(%337, dtype="float32") /* ty=Tensor[(4, 14, 2), float32] */;
    %339 = cast(%var_2272, dtype="float64") /* ty=Tensor[(390), float64] */;
    %340 = reshape(%339, newshape=[13, 5, 6]) /* ty=Tensor[(13, 5, 6), float64] */;
    %341 = atan(%338) /* ty=Tensor[(4, 14, 2), float32] */;
    %342 = @func_490(%340) /* ty=Tensor[(13, 5, 6), float64] */;
    (%341, %342, %var_2272)
  };
  %343(%var_2277, %var_2278) /* ty=(Tensor[(4, 14, 2), float32], Tensor[(13, 5, 6), float64], Tensor[(390), float64]) */
}

def @func_4095() -> Tensor[(168), int64] {
  %344 = @func_2711() /* ty=(Tensor[(168), int64], Tensor[(?, 6, 7), float32]) */;
  %344.0
}

def @func_2352() -> (Tensor[(6, 9, 12), float64],) {
  %345 = @func_2226() /* ty=(Tensor[(6, 9, 12), float64],) */;
  %346 = %345.0;
  (%346,)
}

def @func_1213(%var_1211: Tensor[(12, 2, 12), float32], %var_1212: Tensor[(5, 45), float32]) -> (Tensor[(12, 2, 12), float32], Tensor[(5, 9, 5), float32], Tensor[(5, 45), float32], Tensor[(13, 5, 6), float64], Tensor[(390), float64]) {
  %355 = fn (%var_1196: Tensor[(12, 2, 12), float32], %var_1202: Tensor[(5, 45), float32]) -> (Tensor[(12, 2, 12), float32], Tensor[(5, 9, 5), float32], Tensor[(5, 45), float32], Tensor[(13, 5, 6), float64], Tensor[(390), float64]) {
    %347 = cast(%var_1196, dtype="float32") /* ty=Tensor[(12, 2, 12), float32] */;
    %348 = cast(%var_1202, dtype="float32") /* ty=Tensor[(5, 45), float32] */;
    %349 = reshape(%348, newshape=[5, 9, 5]) /* ty=Tensor[(5, 9, 5), float32] */;
    %350 = cast(meta[relay.Constant][16] /* ty=Tensor[(390), float64] */, dtype="float64") /* ty=Tensor[(390), float64] */;
    %351 = reshape(%350, newshape=[13, 5, 6]) /* ty=Tensor[(13, 5, 6), float64] */;
    %352 = log2(%347) /* ty=Tensor[(12, 2, 12), float32] */;
    %353 = @func_171(%349) /* ty=Tensor[(5, 9, 5), float32] */;
    %354 = @func_490(%351) /* ty=Tensor[(13, 5, 6), float64] */;
    (%352, %353, %var_1202, %354, meta[relay.Constant][16] /* ty=Tensor[(390), float64] */)
  };
  %355(%var_1211, %var_1212) /* ty=(Tensor[(12, 2, 12), float32], Tensor[(5, 9, 5), float32], Tensor[(5, 45), float32], Tensor[(13, 5, 6), float64], Tensor[(390), float64]) */
}

def @func_1769(%var_1764: Tensor[(2, 6, 7), float32]) -> (Tensor[(2, 6, 7), uint64],) {
  %356 = @func_1734() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32], uint8) */;
  %357 = %356.1;
  %358 = cast(%357, dtype="uint64") /* ty=Tensor[(?, 6, 7), uint64] */;
  %359 = cast(%var_1764, dtype="uint64") /* ty=Tensor[(2, 6, 7), uint64] */;
  %360 = multiply(%358, %359) /* ty=Tensor[(2, 6, 7), uint64] */;
  (%360,)
}

def @func_2216() -> Tensor[(?, 6, 7), float32] {
  %362 = fn () -> Tensor[(?, 6, 7), float32] {
    %361 = @func_1816() /* ty=(Tensor[(?, 6, 7), float32],) */;
    %361.0
  };
  %362() /* ty=Tensor[(?, 6, 7), float32] */
}

def @func_5614() -> (Tensor[(6, 9, 12), float64], Tensor[(750), float32], Tensor[(750, 1), float32], Tensor[(?, 6, 7), float32], Tensor[(750, 225), int32], Tensor[(225), float32], Tensor[(112), float32]) {
  %377 = fn () -> (Tensor[(6, 9, 12), float64], Tensor[(750), float32], Tensor[(750, 1), float32], Tensor[(?, 6, 7), float32], Tensor[(750, 225), int32], Tensor[(225), float32], Tensor[(112), float32]) {
    %363 = @func_2226() /* ty=(Tensor[(6, 9, 12), float64],) */;
    %364 = cast(meta[relay.Constant][17] /* ty=Tensor[(750, 1), float32] */, dtype="float32") /* ty=Tensor[(750, 1), float32] */;
    %365 = reshape(%364, newshape=[750]) /* ty=Tensor[(750), float32] */;
    %366 = @func_3281(%365) /* ty=(Tensor[(?, 6, 7), float32], Tensor[(10, 5, 15), float32], Tensor[(750), float32]) */;
    %367 = @func_1816() /* ty=(Tensor[(?, 6, 7), float32],) */;
    %368 = cast(meta[relay.Constant][18] /* ty=Tensor[(225), float32] */, dtype="float32") /* ty=Tensor[(225), float32] */;
    %369 = cast(meta[relay.Constant][19] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
    %370 = reshape(%368, newshape=[225]) /* ty=Tensor[(225), float32] */;
    %371 = reshape(%369, newshape=[112]) /* ty=Tensor[(112), float32] */;
    %372 = @func_2562(%370, %371) /* ty=(Tensor[(?, 6, 7), float32], Tensor[(5, 45), float32], Tensor[(288), float32], Tensor[(750, 390), bool], Tensor[(750, 225), int32], Tensor[(832), int8], Tensor[(1280), uint64], Tensor[(112), float32]) */;
    %373 = %363.0;
    %374 = %366.2;
    %375 = %367.0;
    %376 = %372.4;
    (%373, %374, meta[relay.Constant][17] /* ty=Tensor[(750, 1), float32] */, %375, %376, meta[relay.Constant][18] /* ty=Tensor[(225), float32] */, meta[relay.Constant][19] /* ty=Tensor[(112), float32] */)
  };
  %377() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(750), float32], Tensor[(750, 1), float32], Tensor[(?, 6, 7), float32], Tensor[(750, 225), int32], Tensor[(225), float32], Tensor[(112), float32]) */
}

def @func_2226() -> (Tensor[(6, 9, 12), float64],) {
  %378 = @func_1734() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32], uint8) */;
  %379 = %378.0;
  (%379,)
}

def @func_7047(%var_7027: Tensor[(390), float64]) -> (Tensor[(2, 14, 6), int32], Tensor[(112), float32], Tensor[(390), float64]) {
  %380 = @func_3625() /* ty=(Tensor[(2, 14, 6), int32],) */;
  %381 = cast(%var_7027, dtype="float64") /* ty=Tensor[(390), float64] */;
  %382 = reshape(%381, newshape=[390]) /* ty=Tensor[(390), float64] */;
  %383 = @func_2973(%382) /* ty=(Tensor[(?, 6, 7), float32], Tensor[(13, 5, 6), float64], Tensor[(112), float32], Tensor[(390), float64]) */;
  %384 = %380.0;
  %385 = %383.2;
  (%384, %385, %var_7027)
}

def @func_4097() -> Tensor[(168), int64] {
  @func_4095() /* ty=Tensor[(168), int64] */
}

def @func_6667() -> (Tensor[(6, 9, 12), int16],) {
  @func_6665() /* ty=(Tensor[(6, 9, 12), int16],) */
}

def @func_493(%var_491: Tensor[(13, 5, 6), float64]) -> Tensor[(13, 5, 6), float64] {
  @func_490(%var_491) /* ty=Tensor[(13, 5, 6), float64] */
}

def @func_1432(%var_1430: Tensor[(750), float32]) -> (Tensor[(10, 14, 10), float32], Tensor[(10, 14, 10), float64], Tensor[(1, 390), float64], Tensor[(750), float32]) {
  @func_1429(%var_1430) /* ty=(Tensor[(10, 14, 10), float32], Tensor[(10, 14, 10), float64], Tensor[(1, 390), float64], Tensor[(750), float32]) */
}

def @func_2462(%var_2414: Tensor[(9, 15, 8), float64]) -> (Tensor[(13, 5, 6), float64], Tensor[(390), float64], Tensor[(6, 9, 12), float64], Tensor[(9, 15, 8), int8]) {
  %386 = cast(meta[relay.Constant][20] /* ty=Tensor[(390), float64] */, dtype="float64") /* ty=Tensor[(390), float64] */;
  %387 = reshape(%386, newshape=[13, 5, 6]) /* ty=Tensor[(13, 5, 6), float64] */;
  %388 = @func_2352() /* ty=(Tensor[(6, 9, 12), float64],) */;
  %389 = cast(%var_2414, dtype="float64") /* ty=Tensor[(9, 15, 8), float64] */;
  %390 = cosh(%389) /* ty=Tensor[(9, 15, 8), float64] */;
  %391 = cast(%var_2414, dtype="int8") /* ty=Tensor[(9, 15, 8), int8] */;
  %392 = shape_of(%390, dtype="int32") /* ty=Tensor[(3), int32] */;
  %393 = cast(%390, dtype="int8") /* ty=Tensor[(9, 15, 8), int8] */;
  %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %395 = @func_490(%387) /* ty=Tensor[(13, 5, 6), float64] */;
  %396 = %388.0;
  %397 = subtract(%393, %394) /* ty=Tensor[(9, 15, 8), int8] */;
  (%395, meta[relay.Constant][20] /* ty=Tensor[(390), float64] */, %396, %397)
}

def @func_5993() -> Tensor[(750), float32] {
  @func_5991() /* ty=Tensor[(750), float32] */
}

def @func_5281(%var_5279: Tensor[(832), float32]) -> (Tensor[(168), int64], Tensor[(16, 4, 13), float32], Tensor[(832), float32]) {
  @func_5278(%var_5279) /* ty=(Tensor[(168), int64], Tensor[(16, 4, 13), float32], Tensor[(832), float32]) */
}

def @func_3380() -> Tensor[(?, 6, 7), uint32] {
  %405 = fn () -> Tensor[(?, 6, 7), uint32] {
    %398 = @func_2939() /* ty=(Tensor[(?, 6, 7), float32], Tensor[(1, 390), float64], Tensor[(1, 390), float64]) */;
    %399 = %398.0;
    %400 = @func_2215() /* ty=Tensor[(?, 6, 7), float32] */;
    %401 = cast(%400, dtype="uint32") /* ty=Tensor[(?, 6, 7), uint32] */;
    %402 = shape_of(%399, dtype="int32") /* ty=Tensor[(3), int32] */;
    %403 = cast(%399, dtype="uint32") /* ty=Tensor[(?, 6, 7), uint32] */;
    %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    bitwise_or(%403, %404) /* ty=Tensor[(?, 6, 7), uint32] */
  };
  %405() /* ty=Tensor[(?, 6, 7), uint32] */
}

def @func_5841() -> (Tensor[(750), float32],) {
  %408 = fn () -> (Tensor[(750), float32],) {
    %406 = @func_3311() /* ty=(Tensor[(2, 14, 6), float32], Tensor[(13, 5, 6), float64], Tensor[(750), float32]) */;
    %407 = %406.2;
    (%407,)
  };
  %408() /* ty=(Tensor[(750), float32],) */
}

def @func_3312() -> (Tensor[(2, 14, 6), float32], Tensor[(13, 5, 6), float64], Tensor[(750), float32]) {
  %418 = fn () -> (Tensor[(2, 14, 6), float32], Tensor[(13, 5, 6), float64], Tensor[(750), float32]) {
    %409 = @func_3088() /* ty=Tensor[(2, 14, 6), float32] */;
    %410 = cast(%409, dtype="float32") /* ty=Tensor[(2, 14, 6), float32] */;
    %411 = cast(meta[relay.Constant][21] /* ty=Tensor[(750), float32] */, dtype="float32") /* ty=Tensor[(750), float32] */;
    %412 = cast(meta[relay.Constant][21] /* ty=Tensor[(750), float32] */, dtype="float32") /* ty=Tensor[(750), float32] */;
    %413 = reshape(%411, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), float32] */;
    %414 = reshape(%412, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), float32] */;
    %415 = @func_980(%413, %414) /* ty=(Tensor[(10, 5, 15), float32], Tensor[(13, 5, 6), float64], Tensor[(1, 390), float64]) */;
    %416 = acosh(%410) /* ty=Tensor[(2, 14, 6), float32] */;
    %417 = %415.1;
    (%416, %417, meta[relay.Constant][21] /* ty=Tensor[(750), float32] */)
  };
  %418() /* ty=(Tensor[(2, 14, 6), float32], Tensor[(13, 5, 6), float64], Tensor[(750), float32]) */
}

def @func_1973(%var_1971: Tensor[(750), float32]) -> (Tensor[(?, 6, 7), float32], Tensor[(10, 14, 10), float64], Tensor[(750), float32]) {
  @func_1970(%var_1971) /* ty=(Tensor[(?, 6, 7), float32], Tensor[(10, 14, 10), float64], Tensor[(750), float32]) */
}

def @func_3002() -> (Tensor[(2, 14, 6), float32],) {
  %419 = @func_2341() /* ty=(Tensor[(4, 14, 2), float32], Tensor[(2, 14, 6), int8], Tensor[(168), int64]) */;
  %420 = %419.1;
  %421 = cast(%420, dtype="float32") /* ty=Tensor[(2, 14, 6), float32] */;
  %422 = rsqrt(%421) /* ty=Tensor[(2, 14, 6), float32] */;
  (%422,)
}

def @func_6042(%var_6040: Tensor[(2, 14, 6), int8], %var_6041: Tensor[(225), float32]) -> (Tensor[(5, 9, 5), float32], Tensor[(225), float32], Tensor[(2, 14, 6), uint8]) {
  %438 = fn (%var_6017: Tensor[(2, 14, 6), int8], %var_6028: Tensor[(225), float32]) -> (Tensor[(5, 9, 5), float32], Tensor[(225), float32], Tensor[(2, 14, 6), uint8]) {
    %423 = cast(%var_6028, dtype="float32") /* ty=Tensor[(225), float32] */;
    %424 = reshape(%423, newshape=[5, 9, 5]) /* ty=Tensor[(5, 9, 5), float32] */;
    %425 = @func_2330() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(2, 14, 6), int8], Tensor[(168), int64]) */;
    %426 = %425.1;
    %427 = cast(%var_6017, dtype="uint32") /* ty=Tensor[(2, 14, 6), uint32] */;
    %428 = shape_of(%426, dtype="int32") /* ty=Tensor[(3), int32] */;
    %429 = cast(%426, dtype="uint32") /* ty=Tensor[(2, 14, 6), uint32] */;
    %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %431 = bitwise_xor(%429, %430) /* ty=Tensor[(2, 14, 6), uint32] */;
    %432 = cast(%426, dtype="uint8") /* ty=Tensor[(2, 14, 6), uint8] */;
    %433 = shape_of(%431, dtype="int32") /* ty=Tensor[(3), int32] */;
    %434 = cast(%431, dtype="uint8") /* ty=Tensor[(2, 14, 6), uint8] */;
    %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %436 = @func_171(%424) /* ty=Tensor[(5, 9, 5), float32] */;
    %437 = logical_xor(%434, %435) /* ty=Tensor[(2, 14, 6), uint8] */;
    (%436, %var_6028, %437)
  };
  %438(%var_6040, %var_6041) /* ty=(Tensor[(5, 9, 5), float32], Tensor[(225), float32], Tensor[(2, 14, 6), uint8]) */
}

def @func_2089(%var_2088: uint64) -> (Tensor[(4, 14, 2), float32], Tensor[(16, 16, 5), uint64], Tensor[(4, 14, 2), float32], Tensor[(6, 9, 12), float64], Tensor[(4, 14, 2), int8]) {
  %451 = fn (%var_2052: uint64) -> (Tensor[(4, 14, 2), float32], Tensor[(16, 16, 5), uint64], Tensor[(4, 14, 2), float32], Tensor[(6, 9, 12), float64], Tensor[(4, 14, 2), int8]) {
    %439 = cast(%var_2052, dtype="uint64") /* ty=uint64 */;
    %440 = reshape(%439, newshape=[]) /* ty=uint64 */;
    %441 = @func_869(%440) /* ty=(Tensor[(16, 16, 5), uint64],) */;
    %442 = @func_1734() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32], uint8) */;
    %443 = @func_1870() /* ty=Tensor[(4, 14, 2), float32] */;
    %444 = cast(%443, dtype="int8") /* ty=Tensor[(4, 14, 2), int8] */;
    %445 = cast(%var_2052, dtype="int8") /* ty=int8 */;
    %446 = @func_1870() /* ty=Tensor[(4, 14, 2), float32] */;
    %447 = %441.0;
    %448 = @func_1870() /* ty=Tensor[(4, 14, 2), float32] */;
    %449 = %442.0;
    %450 = left_shift(%444, %445) /* ty=Tensor[(4, 14, 2), int8] */;
    (%446, %447, %448, %449, %450)
  };
  %451(%var_2088) /* ty=(Tensor[(4, 14, 2), float32], Tensor[(16, 16, 5), uint64], Tensor[(4, 14, 2), float32], Tensor[(6, 9, 12), float64], Tensor[(4, 14, 2), int8]) */
}

def @func_4565() -> (Tensor[(6, 9, 12), float64],) {
  %454 = fn () -> (Tensor[(6, 9, 12), float64],) {
    %452 = @func_2352() /* ty=(Tensor[(6, 9, 12), float64],) */;
    %453 = %452.0;
    (%453,)
  };
  %454() /* ty=(Tensor[(6, 9, 12), float64],) */
}

def @func_3626() -> (Tensor[(2, 14, 6), int32],) {
  %461 = fn () -> (Tensor[(2, 14, 6), int32],) {
    %455 = @func_3088() /* ty=Tensor[(2, 14, 6), float32] */;
    %456 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 14, 6), float32] */, dtype="int32") /* ty=Tensor[(2, 14, 6), int32] */;
    %457 = shape_of(%455, dtype="int32") /* ty=Tensor[(3), int32] */;
    %458 = cast(%455, dtype="int32") /* ty=Tensor[(2, 14, 6), int32] */;
    %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %460 = right_shift(%458, %459) /* ty=Tensor[(2, 14, 6), int32] */;
    (%460,)
  };
  %461() /* ty=(Tensor[(2, 14, 6), int32],) */
}

def @func_4505(%var_4503: Tensor[(3510), float64], %var_4504: Tensor[(390), float64]) -> (Tensor[(168), int64], Tensor[(9, 390), int32], Tensor[(3510), float64], Tensor[(13, 5, 6), float64], Tensor[(390), float64]) {
  %471 = fn (%var_4491: Tensor[(3510), float64], %var_4497: Tensor[(390), float64]) -> (Tensor[(168), int64], Tensor[(9, 390), int32], Tensor[(3510), float64], Tensor[(13, 5, 6), float64], Tensor[(390), float64]) {
    %462 = @func_3533() /* ty=(Tensor[(168), int64],) */;
    %463 = cast(%var_4491, dtype="float64") /* ty=Tensor[(3510), float64] */;
    %464 = reshape(%463, newshape=[9, 390]) /* ty=Tensor[(9, 390), float64] */;
    %465 = @func_3486(%464) /* ty=(Tensor[(9, 390), int32],) */;
    %466 = cast(%var_4497, dtype="float64") /* ty=Tensor[(390), float64] */;
    %467 = reshape(%466, newshape=[13, 5, 6]) /* ty=Tensor[(13, 5, 6), float64] */;
    %468 = %462.0;
    %469 = %465.0;
    %470 = @func_490(%467) /* ty=Tensor[(13, 5, 6), float64] */;
    (%468, %469, %var_4491, %470, %var_4497)
  };
  %471(%var_4503, %var_4504) /* ty=(Tensor[(168), int64], Tensor[(9, 390), int32], Tensor[(3510), float64], Tensor[(13, 5, 6), float64], Tensor[(390), float64]) */
}

def @func_2763() -> Tensor[(6, 9, 12), float64] {
  @func_2761() /* ty=Tensor[(6, 9, 12), float64] */
}

def @func_3284(%var_3282: Tensor[(750), float32]) -> (Tensor[(?, 6, 7), float32], Tensor[(10, 5, 15), float32], Tensor[(750), float32]) {
  @func_3281(%var_3282) /* ty=(Tensor[(?, 6, 7), float32], Tensor[(10, 5, 15), float32], Tensor[(750), float32]) */
}

def @func_4876() -> (Tensor[(168), int64], Tensor[(16, 16, 5), uint64], uint64) {
  %478 = fn () -> (Tensor[(168), int64], Tensor[(16, 16, 5), uint64], uint64) {
    %472 = @func_2330() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(2, 14, 6), int8], Tensor[(168), int64]) */;
    %473 = cast(meta[relay.Constant][23] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %474 = reshape(%473, newshape=[]) /* ty=uint64 */;
    %475 = @func_2087(%474) /* ty=(Tensor[(4, 14, 2), float32], Tensor[(16, 16, 5), uint64], Tensor[(4, 14, 2), float32], Tensor[(6, 9, 12), float64], Tensor[(4, 14, 2), int8]) */;
    %476 = %472.2;
    %477 = %475.1;
    (%476, %477, meta[relay.Constant][23] /* ty=uint64 */)
  };
  %478() /* ty=(Tensor[(168), int64], Tensor[(16, 16, 5), uint64], uint64) */
}

def @func_7050(%var_7048: Tensor[(390), float64]) -> (Tensor[(2, 14, 6), int32], Tensor[(112), float32], Tensor[(390), float64]) {
  @func_7047(%var_7048) /* ty=(Tensor[(2, 14, 6), int32], Tensor[(112), float32], Tensor[(390), float64]) */
}

def @func_2686(%var_2684: Tensor[(8, 16, 15), float64], %var_2685: Tensor[(8, 16, 15), float64]) -> Tensor[(8, 16, 15), bool] {
  @func_2682(%var_2684, %var_2685) /* ty=Tensor[(8, 16, 15), bool] */
}

def @func_6607(%var_6602: Tensor[(756), float64]) -> (Tensor[(6, 9, 12), float64], Tensor[(16, 16, 5), uint64], uint64, Tensor[(12, 9, 7), float64], Tensor[(756), float64]) {
  %479 = @func_2352() /* ty=(Tensor[(6, 9, 12), float64],) */;
  %480 = cast(meta[relay.Constant][24] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %481 = reshape(%480, newshape=[]) /* ty=uint64 */;
  %482 = @func_869(%481) /* ty=(Tensor[(16, 16, 5), uint64],) */;
  %483 = cast(%var_6602, dtype="float64") /* ty=Tensor[(756), float64] */;
  %484 = reshape(%483, newshape=[12, 9, 7]) /* ty=Tensor[(12, 9, 7), float64] */;
  %485 = @func_6227(%484) /* ty=(Tensor[(168), int64], Tensor[(12, 9, 7), float64]) */;
  %486 = %479.0;
  %487 = %482.0;
  %488 = %485.1;
  (%486, %487, meta[relay.Constant][24] /* ty=uint64 */, %488, %var_6602)
}

def @func_5898(%var_5889: Tensor[(9, 1, 5), uint64]) -> (Tensor[(9, 1, 5), uint64],) {
  %489 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 1, 5), uint64] */, dtype="uint64") /* ty=Tensor[(1, 1, 5), uint64] */;
  %490 = cast(%var_5889, dtype="uint64") /* ty=Tensor[(9, 1, 5), uint64] */;
  %491 = right_shift(%489, %490) /* ty=Tensor[(9, 1, 5), uint64] */;
  (%491,)
}

def @func_871(%var_870: uint64) -> (Tensor[(16, 16, 5), uint64],) {
  %495 = fn (%var_860: uint64) -> (Tensor[(16, 16, 5), uint64],) {
    %492 = cast(%var_860, dtype="uint64") /* ty=uint64 */;
    %493 = cast(meta[relay.Constant][26] /* ty=Tensor[(16, 16, 5), uint64] */, dtype="uint64") /* ty=Tensor[(16, 16, 5), uint64] */;
    %494 = logical_xor(%492, %493) /* ty=Tensor[(16, 16, 5), uint64] */;
    (%494,)
  };
  %495(%var_870) /* ty=(Tensor[(16, 16, 5), uint64],) */
}

def @func_1501(%var_1497: Tensor[(11, 6, 15), uint8], %var_1498: Tensor[(11, 6, 15), uint8], %var_1499: Tensor[(11, 6, 15), uint8], %var_1500: Tensor[(11, 6, 15), uint8]) -> (Tensor[(11, 6, 15), uint8], Tensor[(11, 6, 15), float64], Tensor[(11, 6, 15), float32]) {
  %511 = fn (%var_1465: Tensor[(11, 6, 15), uint8], %var_1466: Tensor[(11, 6, 15), uint8], %var_1472: Tensor[(11, 6, 15), uint8], %var_1483: Tensor[(11, 6, 15), uint8]) -> (Tensor[(11, 6, 15), uint8], Tensor[(11, 6, 15), float64], Tensor[(11, 6, 15), float32]) {
    %496 = cast(%var_1466, dtype="uint8") /* ty=Tensor[(11, 6, 15), uint8] */;
    %497 = shape_of(%var_1465, dtype="int32") /* ty=Tensor[(3), int32] */;
    %498 = cast(%var_1465, dtype="uint8") /* ty=Tensor[(11, 6, 15), uint8] */;
    %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %500 = cast(%var_1472, dtype="float64") /* ty=Tensor[(11, 6, 15), float64] */;
    %501 = shape_of(%var_1465, dtype="int32") /* ty=Tensor[(3), int32] */;
    %502 = cast(%var_1465, dtype="float64") /* ty=Tensor[(11, 6, 15), float64] */;
    %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %504 = cast(%var_1483, dtype="float32") /* ty=Tensor[(11, 6, 15), float32] */;
    %505 = shape_of(%var_1472, dtype="int32") /* ty=Tensor[(3), int32] */;
    %506 = cast(%var_1472, dtype="float32") /* ty=Tensor[(11, 6, 15), float32] */;
    %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %508 = bitwise_and(%498, %499) /* ty=Tensor[(11, 6, 15), uint8] */;
    %509 = power(%502, %503) /* ty=Tensor[(11, 6, 15), float64] */;
    %510 = floor_divide(%506, %507) /* ty=Tensor[(11, 6, 15), float32] */;
    (%508, %509, %510)
  };
  %511(%var_1497, %var_1498, %var_1499, %var_1500) /* ty=(Tensor[(11, 6, 15), uint8], Tensor[(11, 6, 15), float64], Tensor[(11, 6, 15), float32]) */
}

def @func_1375(%var_1349: Tensor[(11, 11, 16), uint32]) -> (Tensor[(11, 11, 16), float32], Tensor[(11, 11, ?), bool], Tensor[(13, 5, 6), float64], Tensor[(390), float64], Tensor[(4, 4, 9), float32], Tensor[(144), float32]) {
  %512 = cast(meta[relay.Constant][27] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %513 = cast(meta[relay.Constant][28] /* ty=Tensor[(11, 11, 1), uint32] */, dtype="uint32") /* ty=Tensor[(11, 11, 1), uint32] */;
  %514 = maximum(%512, %513) /* ty=Tensor[(11, 11, 1), uint32] */;
  %515 = cast(%514, dtype="float32") /* ty=Tensor[(11, 11, 1), float32] */;
  %516 = cast(%var_1349, dtype="float32") /* ty=Tensor[(11, 11, 16), float32] */;
  %517 = cast(meta[relay.Constant][29] /* ty=Tensor[(11, 11, 1), uint32] */, dtype="bool") /* ty=Tensor[(11, 11, 1), bool] */;
  %518 = shape_of(%514, dtype="int32") /* ty=Tensor[(3), int32] */;
  %519 = cast(%514, dtype="bool") /* ty=Tensor[(11, 11, 1), bool] */;
  %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %521 = cast(meta[relay.Constant][30] /* ty=Tensor[(390), float64] */, dtype="float64") /* ty=Tensor[(390), float64] */;
  %522 = reshape(%521, newshape=[13, 5, 6]) /* ty=Tensor[(13, 5, 6), float64] */;
  %523 = cast(meta[relay.Constant][31] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %524 = reshape(%523, newshape=[4, 4, 9]) /* ty=Tensor[(4, 4, 9), float32] */;
  %525 = @func_65(%524) /* ty=(Tensor[(4, 4, 9), float32],) */;
  %526 = floor_mod(%515, %516) /* ty=Tensor[(11, 11, 16), float32] */;
  %527 = equal(%519, %520) /* ty=Tensor[(11, 11, ?), bool] */;
  %528 = @func_490(%522) /* ty=Tensor[(13, 5, 6), float64] */;
  %529 = %525.0;
  (%526, %527, %528, meta[relay.Constant][30] /* ty=Tensor[(390), float64] */, %529, meta[relay.Constant][31] /* ty=Tensor[(144), float32] */)
}

def @func_1772(%var_1770: Tensor[(2, 6, 7), float32]) -> (Tensor[(2, 6, 7), uint64],) {
  @func_1769(%var_1770) /* ty=(Tensor[(2, 6, 7), uint64],) */
}

def @func_1429(%var_1427: Tensor[(750), float32]) -> (Tensor[(10, 14, 10), float32], Tensor[(10, 14, 10), float64], Tensor[(1, 390), float64], Tensor[(750), float32]) {
  %530 = cast(meta[relay.Constant][32] /* ty=Tensor[(10, 14, 10), float32] */, dtype="float32") /* ty=Tensor[(10, 14, 10), float32] */;
  %531 = cast(meta[relay.Constant][32] /* ty=Tensor[(10, 14, 10), float32] */, dtype="float32") /* ty=Tensor[(10, 14, 10), float32] */;
  %532 = atanh(%531) /* ty=Tensor[(10, 14, 10), float32] */;
  %533 = cast(%532, dtype="float64") /* ty=Tensor[(10, 14, 10), float64] */;
  %534 = cast(%var_1427, dtype="float32") /* ty=Tensor[(750), float32] */;
  %535 = cast(%var_1427, dtype="float32") /* ty=Tensor[(750), float32] */;
  %536 = reshape(%534, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), float32] */;
  %537 = reshape(%535, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), float32] */;
  %538 = @func_980(%536, %537) /* ty=(Tensor[(10, 5, 15), float32], Tensor[(13, 5, 6), float64], Tensor[(1, 390), float64]) */;
  %539 = cosh(%530) /* ty=Tensor[(10, 14, 10), float32] */;
  %540 = asinh(%533) /* ty=Tensor[(10, 14, 10), float64] */;
  %541 = %538.2;
  (%539, %540, %541, %var_1427)
}

def @func_4237() -> (Tensor[(?, 6, 7), float32],) {
  %544 = fn () -> (Tensor[(?, 6, 7), float32],) {
    %542 = @func_4210() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32]) */;
    %543 = %542.1;
    (%543,)
  };
  %544() /* ty=(Tensor[(?, 6, 7), float32],) */
}

def @func_983(%var_981: Tensor[(10, 5, 15), float32], %var_982: Tensor[(10, 5, 15), float32]) -> (Tensor[(10, 5, 15), float32], Tensor[(13, 5, 6), float64], Tensor[(1, 390), float64]) {
  %553 = fn (%var_953: Tensor[(10, 5, 15), float32], %var_954: Tensor[(10, 5, 15), float32]) -> (Tensor[(10, 5, 15), float32], Tensor[(13, 5, 6), float64], Tensor[(1, 390), float64]) {
    %545 = cast(%var_954, dtype="float32") /* ty=Tensor[(10, 5, 15), float32] */;
    %546 = shape_of(%var_953, dtype="int32") /* ty=Tensor[(3), int32] */;
    %547 = cast(%var_953, dtype="float32") /* ty=Tensor[(10, 5, 15), float32] */;
    %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %549 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 390), float64] */, dtype="float64") /* ty=Tensor[(1, 390), float64] */;
    %550 = reshape(%549, newshape=[13, 5, 6]) /* ty=Tensor[(13, 5, 6), float64] */;
    %551 = maximum(%547, %548) /* ty=Tensor[(10, 5, 15), float32] */;
    %552 = @func_490(%550) /* ty=Tensor[(13, 5, 6), float64] */;
    (%551, %552, meta[relay.Constant][33] /* ty=Tensor[(1, 390), float64] */)
  };
  %553(%var_981, %var_982) /* ty=(Tensor[(10, 5, 15), float32], Tensor[(13, 5, 6), float64], Tensor[(1, 390), float64]) */
}

def @func_5531() -> (Tensor[(168), int64],) {
  %555 = fn () -> (Tensor[(168), int64],) {
    %554 = @func_4341() /* ty=Tensor[(168), int64] */;
    (%554,)
  };
  %555() /* ty=(Tensor[(168), int64],) */
}

def @func_3771(%var_3769: float64, %var_3770: Tensor[(1, 13, 8), float64]) -> (Tensor[(4, 14, 2), float32], Tensor[(1, 13, 8), bool], Tensor[(2, 14, 6), float32]) {
  %565 = fn (%var_3733: float64, %var_3734: Tensor[(1, 13, 8), float64]) -> (Tensor[(4, 14, 2), float32], Tensor[(1, 13, 8), bool], Tensor[(2, 14, 6), float32]) {
    %556 = cast(%var_3733, dtype="float64") /* ty=float64 */;
    %557 = cast(%var_3734, dtype="float64") /* ty=Tensor[(1, 13, 8), float64] */;
    %558 = maximum(%556, %557) /* ty=Tensor[(1, 13, 8), float64] */;
    %559 = cast(%558, dtype="bool") /* ty=Tensor[(1, 13, 8), bool] */;
    %560 = cast(%var_3733, dtype="bool") /* ty=bool */;
    %561 = @func_3311() /* ty=(Tensor[(2, 14, 6), float32], Tensor[(13, 5, 6), float64], Tensor[(750), float32]) */;
    %562 = @func_1870() /* ty=Tensor[(4, 14, 2), float32] */;
    %563 = less_equal(%559, %560) /* ty=Tensor[(1, 13, 8), bool] */;
    %564 = %561.0;
    (%562, %563, %564)
  };
  %565(%var_3769, %var_3770) /* ty=(Tensor[(4, 14, 2), float32], Tensor[(1, 13, 8), bool], Tensor[(2, 14, 6), float32]) */
}

def @func_5430(%var_5409: Tensor[(450), int64]) -> (Tensor[(6, 15, 5), bool], Tensor[(450), int64], Tensor[(?, 6, 7), bool]) {
  %566 = cast(%var_5409, dtype="int64") /* ty=Tensor[(450), int64] */;
  %567 = reshape(%566, newshape=[6, 15, 5]) /* ty=Tensor[(6, 15, 5), int64] */;
  %568 = @func_3411(%567) /* ty=(Tensor[(6, 15, 5), bool], Tensor[(6, 9, 12), float64]) */;
  %569 = @func_4947() /* ty=Tensor[(?, 6, 7), float32] */;
  %570 = cast(%569, dtype="float64") /* ty=Tensor[(?, 6, 7), float64] */;
  %571 = atanh(%570) /* ty=Tensor[(?, 6, 7), float64] */;
  %572 = cast(%569, dtype="bool") /* ty=Tensor[(?, 6, 7), bool] */;
  %573 = shape_of(%571, dtype="int32") /* ty=Tensor[(3), int32] */;
  %574 = cast(%571, dtype="bool") /* ty=Tensor[(?, 6, 7), bool] */;
  %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %576 = %568.0;
  %577 = greater(%574, %575) /* ty=Tensor[(?, 6, 7), bool] */;
  (%576, %var_5409, %577)
}

def @func_5018() -> (Tensor[(168), int64],) {
  %580 = fn () -> (Tensor[(168), int64],) {
    %578 = @func_3533() /* ty=(Tensor[(168), int64],) */;
    %579 = %578.0;
    (%579,)
  };
  %580() /* ty=(Tensor[(168), int64],) */
}

def @func_3806(%var_3804: Tensor[(195, 2), float64]) -> (Tensor[(2, 14, 6), int8], Tensor[(390), float64], Tensor[(112), float32], Tensor[(195, 2), float64]) {
  @func_3803(%var_3804) /* ty=(Tensor[(2, 14, 6), int8], Tensor[(390), float64], Tensor[(112), float32], Tensor[(195, 2), float64]) */
}

def @func_6566() -> (Tensor[(168), int64], Tensor[(6, 9, 12), float64]) {
  %581 = @func_2226() /* ty=(Tensor[(6, 9, 12), float64],) */;
  %582 = @func_4095() /* ty=Tensor[(168), int64] */;
  %583 = %581.0;
  (%582, %583)
}

def @func_5365(%var_5362: Tensor[(13, 1, 5), float32], %var_5363: Tensor[(288), float32], %var_5364: Tensor[(225), float32]) -> (Tensor[(13, 1, 5), float32], Tensor[(5, 9, 5), float32], Tensor[(288), float32], Tensor[(225), float32]) {
  @func_5360(%var_5362, %var_5363, %var_5364) /* ty=(Tensor[(13, 1, 5), float32], Tensor[(5, 9, 5), float32], Tensor[(288), float32], Tensor[(225), float32]) */
}

def @func_3693() -> (Tensor[(?, 6, 7), float32],) {
  %584 = @func_2939() /* ty=(Tensor[(?, 6, 7), float32], Tensor[(1, 390), float64], Tensor[(1, 390), float64]) */;
  %585 = %584.0;
  (%585,)
}

def @func_6699() -> (uint8,) {
  %586 = @func_1734() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32], uint8) */;
  %587 = %586.2;
  (%587,)
}

def @func_7509(%var_7473: Tensor[(7, 4, 7), uint16], %var_7474: Tensor[(7, 4, 7), uint16], %var_7493: Tensor[(1848), float64], %var_7494: uint64, %var_7499: Tensor[(24, 12), float32], %var_7500: Tensor[(225), float32]) -> (Tensor[(7, 4, 7), bool], Tensor[(?, 6, 7), float32], Tensor[(1040), float64], Tensor[(1848), float64], uint64, Tensor[(25, 9), float32], Tensor[(24, 12), float32], Tensor[(225), float32]) {
  %588 = cast(%var_7474, dtype="bool") /* ty=Tensor[(7, 4, 7), bool] */;
  %589 = shape_of(%var_7473, dtype="int32") /* ty=Tensor[(3), int32] */;
  %590 = cast(%var_7473, dtype="bool") /* ty=Tensor[(7, 4, 7), bool] */;
  %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %592 = @func_5613() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(750), float32], Tensor[(750, 1), float32], Tensor[(?, 6, 7), float32], Tensor[(750, 225), int32], Tensor[(225), float32], Tensor[(112), float32]) */;
  %593 = cast(%var_7493, dtype="float64") /* ty=Tensor[(1848), float64] */;
  %594 = cast(%var_7494, dtype="uint64") /* ty=uint64 */;
  %595 = reshape(%593, newshape=[1848]) /* ty=Tensor[(1848), float64] */;
  %596 = reshape(%594, newshape=[]) /* ty=uint64 */;
  %597 = @func_4925(%595, %596) /* ty=(Tensor[(6, 9, 12), float64], Tensor[(14, 12, 11), float64], Tensor[(1848), float64], Tensor[(2, 14, 6), bool], Tensor[(1040), float64], Tensor[(390), float64], Tensor[(168, 1), float32], Tensor[(6, 9, 12), float64]) */;
  %598 = cast(%var_7499, dtype="float32") /* ty=Tensor[(24, 12), float32] */;
  %599 = cast(%var_7500, dtype="float32") /* ty=Tensor[(225), float32] */;
  %600 = reshape(%598, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %601 = reshape(%599, newshape=[25, 9]) /* ty=Tensor[(25, 9), float32] */;
  %602 = @func_5871(%600, %601) /* ty=(Tensor[(6, 9, 12), float64], Tensor[(390), float64], Tensor[(288), float32], Tensor[(25, 9), float32]) */;
  %603 = greater(%590, %591) /* ty=Tensor[(7, 4, 7), bool] */;
  %604 = %592.3;
  %605 = %597.4;
  %606 = %602.3;
  (%603, %604, %605, %var_7493, %var_7494, %606, %var_7499, %var_7500)
}

def @func_1816() -> (Tensor[(?, 6, 7), float32],) {
  %607 = @func_1734() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32], uint8) */;
  %608 = %607.1;
  (%608,)
}

def @func_7149() -> (Tensor[(?, 6, 7), uint32], Tensor[(?, 6, 7), float32]) {
  @func_7147() /* ty=(Tensor[(?, 6, 7), uint32], Tensor[(?, 6, 7), float32]) */
}

def @func_1970(%var_1938: Tensor[(750), float32]) -> (Tensor[(?, 6, 7), float32], Tensor[(10, 14, 10), float64], Tensor[(750), float32]) {
  %609 = @func_1734() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32], uint8) */;
  %610 = %609.1;
  %611 = cast(%610, dtype="float32") /* ty=Tensor[(?, 6, 7), float32] */;
  %612 = cast(%var_1938, dtype="float32") /* ty=Tensor[(750), float32] */;
  %613 = reshape(%612, newshape=[750]) /* ty=Tensor[(750), float32] */;
  %614 = @func_1429(%613) /* ty=(Tensor[(10, 14, 10), float32], Tensor[(10, 14, 10), float64], Tensor[(1, 390), float64], Tensor[(750), float32]) */;
  %615 = cosh(%611) /* ty=Tensor[(?, 6, 7), float32] */;
  %616 = %614.1;
  (%615, %616, %var_1938)
}

def @func_4211() -> (Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32]) {
  %628 = fn () -> (Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32]) {
    %617 = @func_2352() /* ty=(Tensor[(6, 9, 12), float64],) */;
    %618 = @func_4135() /* ty=(Tensor[(?, 6, 7), float32],) */;
    %619 = %618.0;
    %620 = cast(%619, dtype="float32") /* ty=Tensor[(?, 6, 7), float32] */;
    %621 = log(%620) /* ty=Tensor[(?, 6, 7), float32] */;
    %622 = cast(%619, dtype="float32") /* ty=Tensor[(?, 6, 7), float32] */;
    %623 = shape_of(%621, dtype="int32") /* ty=Tensor[(3), int32] */;
    %624 = cast(%621, dtype="float32") /* ty=Tensor[(?, 6, 7), float32] */;
    %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %626 = %617.0;
    %627 = mod(%624, %625) /* ty=Tensor[(?, 6, 7), float32] */;
    (%626, %627)
  };
  %628() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32]) */
}

def @func_7253() -> (Tensor[(168), int64], Tensor[(2, 14, 6), int8]) {
  %633 = fn () -> (Tensor[(168), int64], Tensor[(2, 14, 6), int8]) {
    %629 = @func_5017() /* ty=(Tensor[(168), int64],) */;
    %630 = @func_3157() /* ty=(Tensor[(2, 14, 6), int8],) */;
    %631 = %629.0;
    %632 = %630.0;
    (%631, %632)
  };
  %633() /* ty=(Tensor[(168), int64], Tensor[(2, 14, 6), int8]) */
}

def @func_7061(%var_7054: Tensor[(1, 8, 10), bool], %var_7055: Tensor[(4, 8, 10), bool]) -> Tensor[(4, 8, 10), bool] {
  %634 = cast(%var_7054, dtype="bool") /* ty=Tensor[(1, 8, 10), bool] */;
  %635 = cast(%var_7055, dtype="bool") /* ty=Tensor[(4, 8, 10), bool] */;
  logical_and(%634, %635) /* ty=Tensor[(4, 8, 10), bool] */
}

def @func_6808(%var_6780: Tensor[(1, 6, 7), float32], %var_6797: Tensor[(168), int64]) -> (Tensor[(?, 6, 7), int8], Tensor[(?, 6, 7), uint16], Tensor[(168), uint32], Tensor[(14, 12, 11), float64], Tensor[(1848), float64]) {
  %636 = @func_2215() /* ty=Tensor[(?, 6, 7), float32] */;
  %637 = cast(%var_6780, dtype="int8") /* ty=Tensor[(1, 6, 7), int8] */;
  %638 = shape_of(%636, dtype="int32") /* ty=Tensor[(3), int32] */;
  %639 = cast(%636, dtype="int8") /* ty=Tensor[(?, 6, 7), int8] */;
  %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %641 = cast(%var_6780, dtype="uint16") /* ty=Tensor[(1, 6, 7), uint16] */;
  %642 = shape_of(%636, dtype="int32") /* ty=Tensor[(3), int32] */;
  %643 = cast(%636, dtype="uint16") /* ty=Tensor[(?, 6, 7), uint16] */;
  %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %645 = @func_4341() /* ty=Tensor[(168), int64] */;
  %646 = cast(%var_6797, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %647 = shape_of(%645, dtype="int32") /* ty=Tensor[(1), int32] */;
  %648 = cast(%645, dtype="uint32") /* ty=Tensor[(168), uint32] */;
  %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %650 = cast(meta[relay.Constant][34] /* ty=Tensor[(1848), float64] */, dtype="float64") /* ty=Tensor[(1848), float64] */;
  %651 = reshape(%650, newshape=[14, 12, 11]) /* ty=Tensor[(14, 12, 11), float64] */;
  %652 = @func_4678(%651) /* ty=(Tensor[(14, 12, 11), float64],) */;
  %653 = logical_xor(%639, %640) /* ty=Tensor[(?, 6, 7), int8] */;
  %654 = minimum(%643, %644) /* ty=Tensor[(?, 6, 7), uint16] */;
  %655 = bitwise_or(%648, %649) /* ty=Tensor[(168), uint32] */;
  %656 = %652.0;
  (%653, %654, %655, %656, meta[relay.Constant][34] /* ty=Tensor[(1848), float64] */)
}

def @func_1871() -> Tensor[(4, 14, 2), float32] {
  %658 = fn () -> Tensor[(4, 14, 2), float32] {
    %657 = cast(meta[relay.Constant][35] /* ty=Tensor[(4, 14, 2), float32] */, dtype="float32") /* ty=Tensor[(4, 14, 2), float32] */;
    exp(%657) /* ty=Tensor[(4, 14, 2), float32] */
  };
  %658() /* ty=Tensor[(4, 14, 2), float32] */
}

def @func_2228() -> (Tensor[(6, 9, 12), float64],) {
  @func_2226() /* ty=(Tensor[(6, 9, 12), float64],) */
}

def @func_2908() -> (Tensor[(4, 14, 2), uint32], Tensor[(4, 14, 2), int8], Tensor[(1, 390), float64], Tensor[(750), float32], Tensor[(4, 14, 2), float64], Tensor[(16, 13, 4), int8], Tensor[(4, 208), int8]) {
  %659 = @func_1870() /* ty=Tensor[(4, 14, 2), float32] */;
  %660 = cast(meta[relay.Constant][36] /* ty=Tensor[(4, 14, 2), float32] */, dtype="uint32") /* ty=Tensor[(4, 14, 2), uint32] */;
  %661 = shape_of(%659, dtype="int32") /* ty=Tensor[(3), int32] */;
  %662 = cast(%659, dtype="uint32") /* ty=Tensor[(4, 14, 2), uint32] */;
  %663 = dyn.reshape(%660, %661, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %664 = cast(meta[relay.Constant][36] /* ty=Tensor[(4, 14, 2), float32] */, dtype="bool") /* ty=Tensor[(4, 14, 2), bool] */;
  %665 = shape_of(%659, dtype="int32") /* ty=Tensor[(3), int32] */;
  %666 = cast(%659, dtype="bool") /* ty=Tensor[(4, 14, 2), bool] */;
  %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %668 = less(%666, %667) /* ty=Tensor[(4, 14, 2), bool] */;
  %669 = cast(meta[relay.Constant][37] /* ty=Tensor[(4, 14, 2), bool] */, dtype="int8") /* ty=Tensor[(4, 14, 2), int8] */;
  %670 = shape_of(%668, dtype="int32") /* ty=Tensor[(3), int32] */;
  %671 = cast(%668, dtype="int8") /* ty=Tensor[(4, 14, 2), int8] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %673 = cast(meta[relay.Constant][38] /* ty=Tensor[(750), float32] */, dtype="float32") /* ty=Tensor[(750), float32] */;
  %674 = cast(meta[relay.Constant][38] /* ty=Tensor[(750), float32] */, dtype="float32") /* ty=Tensor[(750), float32] */;
  %675 = reshape(%673, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), float32] */;
  %676 = reshape(%674, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), float32] */;
  %677 = @func_980(%675, %676) /* ty=(Tensor[(10, 5, 15), float32], Tensor[(13, 5, 6), float64], Tensor[(1, 390), float64]) */;
  %678 = cast(meta[relay.Constant][37] /* ty=Tensor[(4, 14, 2), bool] */, dtype="float64") /* ty=Tensor[(4, 14, 2), float64] */;
  %679 = cast(meta[relay.Constant][39] /* ty=Tensor[(4, 208), int8] */, dtype="int8") /* ty=Tensor[(4, 208), int8] */;
  %680 = cast(meta[relay.Constant][39] /* ty=Tensor[(4, 208), int8] */, dtype="int8") /* ty=Tensor[(4, 208), int8] */;
  %681 = reshape(%679, newshape=[16, 13, 4]) /* ty=Tensor[(16, 13, 4), int8] */;
  %682 = reshape(%680, newshape=[16, 13, 4]) /* ty=Tensor[(16, 13, 4), int8] */;
  %683 = @func_1120(%681, %682) /* ty=(Tensor[(16, 13, 4), int8], Tensor[(16, 16, 5), uint64], uint64) */;
  %684 = right_shift(%662, %663) /* ty=Tensor[(4, 14, 2), uint32] */;
  %685 = subtract(%671, %672) /* ty=Tensor[(4, 14, 2), int8] */;
  %686 = %677.2;
  %687 = sqrt(%678) /* ty=Tensor[(4, 14, 2), float64] */;
  %688 = %683.0;
  (%684, %685, %686, meta[relay.Constant][38] /* ty=Tensor[(750), float32] */, %687, %688, meta[relay.Constant][39] /* ty=Tensor[(4, 208), int8] */)
}

def @func_7147() -> (Tensor[(?, 6, 7), uint32], Tensor[(?, 6, 7), float32]) {
  %689 = @func_3379() /* ty=Tensor[(?, 6, 7), uint32] */;
  %690 = @func_4947() /* ty=Tensor[(?, 6, 7), float32] */;
  (%689, %690)
}

def @func_5691() -> (Tensor[(?, 6, 7), float32], Tensor[(6, 9, 12), float64]) {
  @func_5689() /* ty=(Tensor[(?, 6, 7), float32], Tensor[(6, 9, 12), float64]) */
}

def @func_2761() -> Tensor[(6, 9, 12), float64] {
  %691 = @func_2352() /* ty=(Tensor[(6, 9, 12), float64],) */;
  %691.0
}

def @func_3413(%var_3412: Tensor[(6, 15, 5), int64]) -> (Tensor[(6, 15, 5), bool], Tensor[(6, 9, 12), float64]) {
  %699 = fn (%var_3396: Tensor[(6, 15, 5), int64]) -> (Tensor[(6, 15, 5), bool], Tensor[(6, 9, 12), float64]) {
    %692 = cast(%var_3396, dtype="bool") /* ty=Tensor[(6, 15, 5), bool] */;
    %693 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(6, 15, 5), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %694 = cast(meta[relay.Constant][40] /* ty=Tensor[(6, 15, 5), int64] */, dtype="bool") /* ty=Tensor[(6, 15, 5), bool] */;
    %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %696 = @func_2352() /* ty=(Tensor[(6, 9, 12), float64],) */;
    %697 = greater(%694, %695) /* ty=Tensor[(6, 15, 5), bool] */;
    %698 = %696.0;
    (%697, %698)
  };
  %699(%var_3412) /* ty=(Tensor[(6, 15, 5), bool], Tensor[(6, 9, 12), float64]) */
}

def @func_3489(%var_3487: Tensor[(9, 390), float64]) -> (Tensor[(9, 390), int32],) {
  @func_3486(%var_3487) /* ty=(Tensor[(9, 390), int32],) */
}

def @func_174(%var_172: Tensor[(5, 9, 5), float32]) -> Tensor[(5, 9, 5), float32] {
  @func_171(%var_172) /* ty=Tensor[(5, 9, 5), float32] */
}

def @func_4224(%var_4222: Tensor[(5, 16, 13), float64], %var_4223: Tensor[(5, 16, 13), float64]) -> Tensor[(5, 16, 13), float64] {
  @func_4220(%var_4222, %var_4223) /* ty=Tensor[(5, 16, 13), float64] */
}

def @func_5504(%var_5502: Tensor[(11, 9, 4), float64], %var_5503: Tensor[(11, 9, 4), float64]) -> (Tensor[(11, 9, 4), float64], Tensor[(168), int64]) {
  @func_5500(%var_5502, %var_5503) /* ty=(Tensor[(11, 9, 4), float64], Tensor[(168), int64]) */
}

def @func_6491() -> Tensor[(?, 6, 7), float32] {
  @func_6489() /* ty=Tensor[(?, 6, 7), float32] */
}

def @func_68(%var_66: Tensor[(4, 4, 9), float32]) -> (Tensor[(4, 4, 9), float32],) {
  @func_65(%var_66) /* ty=(Tensor[(4, 4, 9), float32],) */
}

def @func_7543() -> uint8 {
  @func_7541() /* ty=uint8 */
}

def @func_4220(%var_4215: Tensor[(5, 16, 13), float64], %var_4216: Tensor[(5, 16, 13), float64]) -> Tensor[(5, 16, 13), float64] {
  %700 = cast(%var_4216, dtype="float64") /* ty=Tensor[(5, 16, 13), float64] */;
  %701 = shape_of(%var_4215, dtype="int32") /* ty=Tensor[(3), int32] */;
  %702 = cast(%var_4215, dtype="float64") /* ty=Tensor[(5, 16, 13), float64] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%702, %703) /* ty=Tensor[(5, 16, 13), float64] */
}

def @func_2711() -> (Tensor[(168), int64], Tensor[(?, 6, 7), float32]) {
  %704 = @func_2341() /* ty=(Tensor[(4, 14, 2), float32], Tensor[(2, 14, 6), int8], Tensor[(168), int64]) */;
  %705 = %704.2;
  %706 = @func_2215() /* ty=Tensor[(?, 6, 7), float32] */;
  (%705, %706)
}

def @func_4798() -> Tensor[(6, 9, 12), float64] {
  %707 = @func_2330() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(2, 14, 6), int8], Tensor[(168), int64]) */;
  %707.0
}

def @func_3004() -> (Tensor[(2, 14, 6), float32],) {
  @func_3002() /* ty=(Tensor[(2, 14, 6), float32],) */
}

def @func_4421(%var_4419: Tensor[(6, 12, 3), bool], %var_4420: Tensor[(6, 12, 3), bool]) -> (Tensor[(6, 12, 3), bool], Tensor[(?, 6, 7), float64], Tensor[(?, 6, 7), float32], Tensor[(168), int64]) {
  @func_4417(%var_4419, %var_4420) /* ty=(Tensor[(6, 12, 3), bool], Tensor[(?, 6, 7), float64], Tensor[(?, 6, 7), float32], Tensor[(168), int64]) */
}

def @func_5553(%var_5534: Tensor[(2, 4, 8), float64]) -> (Tensor[(2, 4, 8), float64],) {
  %708 = cast(%var_5534, dtype="float64") /* ty=Tensor[(2, 4, 8), float64] */;
  %709 = asinh(%708) /* ty=Tensor[(2, 4, 8), float64] */;
  (%709,)
}

def @func_5556(%var_5554: Tensor[(2, 4, 8), float64]) -> (Tensor[(2, 4, 8), float64],) {
  @func_5553(%var_5554) /* ty=(Tensor[(2, 4, 8), float64],) */
}

def @func_3089() -> Tensor[(2, 14, 6), float32] {
  %711 = fn () -> Tensor[(2, 14, 6), float32] {
    %710 = @func_3002() /* ty=(Tensor[(2, 14, 6), float32],) */;
    %710.0
  };
  %711() /* ty=Tensor[(2, 14, 6), float32] */
}

def @func_5676() -> (Tensor[(750), float32], Tensor[(1, 6, 7), float32], uint8) {
  @func_5674() /* ty=(Tensor[(750), float32], Tensor[(1, 6, 7), float32], uint8) */
}

def @func_7541() -> uint8 {
  %712 = @func_6699() /* ty=(uint8,) */;
  %712.0
}

def @func_65(%var_55: Tensor[(4, 4, 9), float32]) -> (Tensor[(4, 4, 9), float32],) {
  %713 = cast(%var_55, dtype="float32") /* ty=Tensor[(4, 4, 9), float32] */;
  %714 = erf(%713) /* ty=Tensor[(4, 4, 9), float32] */;
  (%714,)
}

def @func_1818() -> (Tensor[(?, 6, 7), float32],) {
  @func_1816() /* ty=(Tensor[(?, 6, 7), float32],) */
}

def @func_4112(%var_4111: Tensor[(16, 4, 13), float32]) -> (Tensor[(16, 4, 13), float32],) {
  %720 = fn (%var_4102: Tensor[(16, 4, 13), float32]) -> (Tensor[(16, 4, 13), float32],) {
    %715 = cast(%var_4102, dtype="float32") /* ty=Tensor[(16, 4, 13), float32] */;
    %716 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(16, 4, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %717 = cast(meta[relay.Constant][41] /* ty=Tensor[(16, 4, 13), float32] */, dtype="float32") /* ty=Tensor[(16, 4, 13), float32] */;
    %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %719 = add(%717, %718) /* ty=Tensor[(16, 4, 13), float32] */;
    (%719,)
  };
  %720(%var_4111) /* ty=(Tensor[(16, 4, 13), float32],) */
}

def @func_3803(%var_3788: Tensor[(195, 2), float64]) -> (Tensor[(2, 14, 6), int8], Tensor[(390), float64], Tensor[(112), float32], Tensor[(195, 2), float64]) {
  %721 = @func_3157() /* ty=(Tensor[(2, 14, 6), int8],) */;
  %722 = cast(meta[relay.Constant][42] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %723 = cast(%var_3788, dtype="float64") /* ty=Tensor[(195, 2), float64] */;
  %724 = reshape(%722, newshape=[4, 14, 2]) /* ty=Tensor[(4, 14, 2), float32] */;
  %725 = reshape(%723, newshape=[390]) /* ty=Tensor[(390), float64] */;
  %726 = @func_2276(%724, %725) /* ty=(Tensor[(4, 14, 2), float32], Tensor[(13, 5, 6), float64], Tensor[(390), float64]) */;
  %727 = %721.0;
  %728 = %726.2;
  (%727, %728, meta[relay.Constant][42] /* ty=Tensor[(112), float32] */, %var_3788)
}

def @func_5199() -> (Tensor[(?, 6, 7), uint32], Tensor[(?, 6, 7), float64]) {
  %732 = fn () -> (Tensor[(?, 6, 7), uint32], Tensor[(?, 6, 7), float64]) {
    %729 = @func_3724() /* ty=(Tensor[(?, 6, 7), float64],) */;
    %730 = @func_3379() /* ty=Tensor[(?, 6, 7), uint32] */;
    %731 = %729.0;
    (%730, %731)
  };
  %732() /* ty=(Tensor[(?, 6, 7), uint32], Tensor[(?, 6, 7), float64]) */
}

def @func_2343() -> (Tensor[(4, 14, 2), float32], Tensor[(2, 14, 6), int8], Tensor[(168), int64]) {
  @func_2341() /* ty=(Tensor[(4, 14, 2), float32], Tensor[(2, 14, 6), int8], Tensor[(168), int64]) */
}

def @func_4928(%var_4926: Tensor[(1848), float64], %var_4927: uint64) -> (Tensor[(6, 9, 12), float64], Tensor[(14, 12, 11), float64], Tensor[(1848), float64], Tensor[(2, 14, 6), bool], Tensor[(1040), float64], Tensor[(390), float64], Tensor[(168, 1), float32], Tensor[(6, 9, 12), float64]) {
  %754 = fn (%var_4894: Tensor[(1848), float64], %var_4911: uint64) -> (Tensor[(6, 9, 12), float64], Tensor[(14, 12, 11), float64], Tensor[(1848), float64], Tensor[(2, 14, 6), bool], Tensor[(1040), float64], Tensor[(390), float64], Tensor[(168, 1), float32], Tensor[(6, 9, 12), float64]) {
    %733 = @func_2226() /* ty=(Tensor[(6, 9, 12), float64],) */;
    %734 = cast(%var_4894, dtype="float64") /* ty=Tensor[(1848), float64] */;
    %735 = reshape(%734, newshape=[14, 12, 11]) /* ty=Tensor[(14, 12, 11), float64] */;
    %736 = @func_4678(%735) /* ty=(Tensor[(14, 12, 11), float64],) */;
    %737 = cast(meta[relay.Constant][43] /* ty=Tensor[(1040), float64] */, dtype="float64") /* ty=Tensor[(1040), float64] */;
    %738 = cast(meta[relay.Constant][44] /* ty=Tensor[(168, 1), float32] */, dtype="float32") /* ty=Tensor[(168, 1), float32] */;
    %739 = cast(meta[relay.Constant][45] /* ty=Tensor[(390), float64] */, dtype="float64") /* ty=Tensor[(390), float64] */;
    %740 = cast(%var_4911, dtype="uint64") /* ty=uint64 */;
    %741 = reshape(%737, newshape=[1040, 1]) /* ty=Tensor[(1040, 1), float64] */;
    %742 = reshape(%738, newshape=[2, 14, 6]) /* ty=Tensor[(2, 14, 6), float32] */;
    %743 = reshape(%739, newshape=[390]) /* ty=Tensor[(390), float64] */;
    %744 = reshape(%740, newshape=[]) /* ty=uint64 */;
    %745 = @func_4304(%741, %742, %743, %744) /* ty=(Tensor[(4, 4, 9), float32], Tensor[(144), float32], Tensor[(5, 16, 13), float64], Tensor[(1040, 1), float64], Tensor[(2, 14, 6), bool], Tensor[(112), float32], Tensor[(390), float64], Tensor[(6, 9, 12), float64], uint64) */;
    %746 = cast(%var_4911, dtype="float32") /* ty=float32 */;
    %747 = cast(meta[relay.Constant][44] /* ty=Tensor[(168, 1), float32] */, dtype="float32") /* ty=Tensor[(168, 1), float32] */;
    %748 = @func_2352() /* ty=(Tensor[(6, 9, 12), float64],) */;
    %749 = %733.0;
    %750 = %736.0;
    %751 = %745.4;
    %752 = power(%746, %747) /* ty=Tensor[(168, 1), float32] */;
    %753 = %748.0;
    (%749, %750, %var_4894, %751, meta[relay.Constant][43] /* ty=Tensor[(1040), float64] */, meta[relay.Constant][45] /* ty=Tensor[(390), float64] */, %752, %753)
  };
  %754(%var_4926, %var_4927) /* ty=(Tensor[(6, 9, 12), float64], Tensor[(14, 12, 11), float64], Tensor[(1848), float64], Tensor[(2, 14, 6), bool], Tensor[(1040), float64], Tensor[(390), float64], Tensor[(168, 1), float32], Tensor[(6, 9, 12), float64]) */
}

def @func_7311() -> (Tensor[(?, 6, 7), float32],) {
  %756 = fn () -> (Tensor[(?, 6, 7), float32],) {
    %755 = @func_4947() /* ty=Tensor[(?, 6, 7), float32] */;
    (%755,)
  };
  %756() /* ty=(Tensor[(?, 6, 7), float32],) */
}

def @func_490(%var_486: Tensor[(13, 5, 6), float64]) -> Tensor[(13, 5, 6), float64] {
  %757 = cast(4.16901f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %758 = cast(%var_486, dtype="float64") /* ty=Tensor[(13, 5, 6), float64] */;
  mod(%757, %758) /* ty=Tensor[(13, 5, 6), float64] */
}

def @func_2939() -> (Tensor[(?, 6, 7), float32], Tensor[(1, 390), float64], Tensor[(1, 390), float64]) {
  %759 = @func_2908() /* ty=(Tensor[(4, 14, 2), uint32], Tensor[(4, 14, 2), int8], Tensor[(1, 390), float64], Tensor[(750), float32], Tensor[(4, 14, 2), float64], Tensor[(16, 13, 4), int8], Tensor[(4, 208), int8]) */;
  %760 = @func_2908() /* ty=(Tensor[(4, 14, 2), uint32], Tensor[(4, 14, 2), int8], Tensor[(1, 390), float64], Tensor[(750), float32], Tensor[(4, 14, 2), float64], Tensor[(16, 13, 4), int8], Tensor[(4, 208), int8]) */;
  %761 = @func_2215() /* ty=Tensor[(?, 6, 7), float32] */;
  %762 = %759.2;
  %763 = %760.2;
  (%761, %762, %763)
}

def @func_7437() -> (Tensor[(4, 14, 2), float32], Tensor[(?, 6, 7), float32], Tensor[(216), bool], Tensor[(?, 6, 7), float64]) {
  %773 = fn () -> (Tensor[(4, 14, 2), float32], Tensor[(?, 6, 7), float32], Tensor[(216), bool], Tensor[(?, 6, 7), float64]) {
    %764 = cast(meta[relay.Constant][46] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
    %765 = cast(meta[relay.Constant][46] /* ty=Tensor[(216), bool] */, dtype="bool") /* ty=Tensor[(216), bool] */;
    %766 = reshape(%764, newshape=[6, 12, 3]) /* ty=Tensor[(6, 12, 3), bool] */;
    %767 = reshape(%765, newshape=[6, 12, 3]) /* ty=Tensor[(6, 12, 3), bool] */;
    %768 = @func_4417(%766, %767) /* ty=(Tensor[(6, 12, 3), bool], Tensor[(?, 6, 7), float64], Tensor[(?, 6, 7), float32], Tensor[(168), int64]) */;
    %769 = @func_4053() /* ty=(Tensor[(?, 6, 7), float64], Tensor[(2, 14, 6), int8]) */;
    %770 = @func_1870() /* ty=Tensor[(4, 14, 2), float32] */;
    %771 = %768.2;
    %772 = %769.0;
    (%770, %771, meta[relay.Constant][46] /* ty=Tensor[(216), bool] */, %772)
  };
  %773() /* ty=(Tensor[(4, 14, 2), float32], Tensor[(?, 6, 7), float32], Tensor[(216), bool], Tensor[(?, 6, 7), float64]) */
}

def @func_5003() -> Tensor[(6, 9, 12), float64] {
  @func_2761() /* ty=Tensor[(6, 9, 12), float64] */
}

def @func_5689() -> (Tensor[(?, 6, 7), float32], Tensor[(6, 9, 12), float64]) {
  %774 = @func_1816() /* ty=(Tensor[(?, 6, 7), float32],) */;
  %775 = %774.0;
  %776 = @func_5003() /* ty=Tensor[(6, 9, 12), float64] */;
  (%775, %776)
}

def @func_4342() -> Tensor[(168), int64] {
  %778 = fn () -> Tensor[(168), int64] {
    %777 = @func_3533() /* ty=(Tensor[(168), int64],) */;
    %777.0
  };
  %778() /* ty=Tensor[(168), int64] */
}

def @func_4680(%var_4679: Tensor[(14, 12, 11), float64]) -> (Tensor[(14, 12, 11), float64],) {
  %781 = fn (%var_4654: Tensor[(14, 12, 11), float64]) -> (Tensor[(14, 12, 11), float64],) {
    %779 = cast(%var_4654, dtype="float64") /* ty=Tensor[(14, 12, 11), float64] */;
    %780 = cos(%779) /* ty=Tensor[(14, 12, 11), float64] */;
    (%780,)
  };
  %781(%var_4679) /* ty=(Tensor[(14, 12, 11), float64],) */
}

def @func_4610(%var_4607: Tensor[(225, 1), float32]) -> (Tensor[(168), int64], Tensor[(2, 14, 6), float64], Tensor[(5, 45), float32], Tensor[(288), float32], Tensor[(225, 1), float32]) {
  %782 = @func_3311() /* ty=(Tensor[(2, 14, 6), float32], Tensor[(13, 5, 6), float64], Tensor[(750), float32]) */;
  %783 = %782.0;
  %784 = cast(%783, dtype="float64") /* ty=Tensor[(2, 14, 6), float64] */;
  %785 = cast(meta[relay.Constant][47] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %786 = cast(%var_4607, dtype="float32") /* ty=Tensor[(225, 1), float32] */;
  %787 = reshape(%785, newshape=[12, 2, 12]) /* ty=Tensor[(12, 2, 12), float32] */;
  %788 = reshape(%786, newshape=[5, 45]) /* ty=Tensor[(5, 45), float32] */;
  %789 = @func_1210(%787, %788) /* ty=(Tensor[(12, 2, 12), float32], Tensor[(5, 9, 5), float32], Tensor[(5, 45), float32], Tensor[(13, 5, 6), float64], Tensor[(390), float64]) */;
  %790 = @func_4095() /* ty=Tensor[(168), int64] */;
  %791 = sin(%784) /* ty=Tensor[(2, 14, 6), float64] */;
  %792 = %789.2;
  (%790, %791, %792, meta[relay.Constant][47] /* ty=Tensor[(288), float32] */, %var_4607)
}

def @func_6610(%var_6608: Tensor[(756), float64]) -> (Tensor[(6, 9, 12), float64], Tensor[(16, 16, 5), uint64], uint64, Tensor[(12, 9, 7), float64], Tensor[(756), float64]) {
  @func_6607(%var_6608) /* ty=(Tensor[(6, 9, 12), float64], Tensor[(16, 16, 5), uint64], uint64, Tensor[(12, 9, 7), float64], Tensor[(756), float64]) */
}

def @func_6980(%var_6979: Tensor[(10, 16, 6), float32]) -> (Tensor[(10, 16, 6), float32], Tensor[(2, 14, 6), int8]) {
  %797 = fn (%var_6957: Tensor[(10, 16, 6), float32]) -> (Tensor[(10, 16, 6), float32], Tensor[(2, 14, 6), int8]) {
    %793 = cast(%var_6957, dtype="float32") /* ty=Tensor[(10, 16, 6), float32] */;
    %794 = @func_2341() /* ty=(Tensor[(4, 14, 2), float32], Tensor[(2, 14, 6), int8], Tensor[(168), int64]) */;
    %795 = tan(%793) /* ty=Tensor[(10, 16, 6), float32] */;
    %796 = %794.1;
    (%795, %796)
  };
  %797(%var_6979) /* ty=(Tensor[(10, 16, 6), float32], Tensor[(2, 14, 6), int8]) */
}

def @func_4726() -> (Tensor[(168), int64],) {
  @func_4724() /* ty=(Tensor[(168), int64],) */
}

def @func_2975(%var_2974: Tensor[(390), float64]) -> (Tensor[(?, 6, 7), float32], Tensor[(13, 5, 6), float64], Tensor[(112), float32], Tensor[(390), float64]) {
  %806 = fn (%var_2964: Tensor[(390), float64]) -> (Tensor[(?, 6, 7), float32], Tensor[(13, 5, 6), float64], Tensor[(112), float32], Tensor[(390), float64]) {
    %798 = @func_1816() /* ty=(Tensor[(?, 6, 7), float32],) */;
    %799 = cast(meta[relay.Constant][48] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
    %800 = cast(%var_2964, dtype="float64") /* ty=Tensor[(390), float64] */;
    %801 = reshape(%799, newshape=[4, 14, 2]) /* ty=Tensor[(4, 14, 2), float32] */;
    %802 = reshape(%800, newshape=[390]) /* ty=Tensor[(390), float64] */;
    %803 = @func_2276(%801, %802) /* ty=(Tensor[(4, 14, 2), float32], Tensor[(13, 5, 6), float64], Tensor[(390), float64]) */;
    %804 = %798.0;
    %805 = %803.1;
    (%804, %805, meta[relay.Constant][48] /* ty=Tensor[(112), float32] */, %var_2964)
  };
  %806(%var_2974) /* ty=(Tensor[(?, 6, 7), float32], Tensor[(13, 5, 6), float64], Tensor[(112), float32], Tensor[(390), float64]) */
}

def @func_7099() -> (Tensor[(6, 9, 12), float64], Tensor[(750), float32]) {
  %810 = fn () -> (Tensor[(6, 9, 12), float64], Tensor[(750), float32]) {
    %807 = @func_5840() /* ty=(Tensor[(750), float32],) */;
    %808 = @func_2761() /* ty=Tensor[(6, 9, 12), float64] */;
    %809 = %807.0;
    (%808, %809)
  };
  %810() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(750), float32]) */
}

def @func_2713() -> (Tensor[(168), int64], Tensor[(?, 6, 7), float32]) {
  @func_2711() /* ty=(Tensor[(168), int64], Tensor[(?, 6, 7), float32]) */
}

def @func_5335() -> Tensor[(4, 14, 2), float64] {
  @func_5333() /* ty=Tensor[(4, 14, 2), float64] */
}

def @func_4800() -> Tensor[(6, 9, 12), float64] {
  @func_4798() /* ty=Tensor[(6, 9, 12), float64] */
}

def @func_6390(%var_6388: Tensor[(750, 225), int32], %var_6389: Tensor[(750, 225), int32]) -> (Tensor[(750, 225), float32], Tensor[(750, 225), float64], Tensor[(?, 6, 7), float32], Tensor[(2, 14, 6), float32]) {
  %827 = fn (%var_6340: Tensor[(750, 225), int32], %var_6352: Tensor[(750, 225), int32]) -> (Tensor[(750, 225), float32], Tensor[(750, 225), float64], Tensor[(?, 6, 7), float32], Tensor[(2, 14, 6), float32]) {
    %811 = @func_5613() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(750), float32], Tensor[(750, 1), float32], Tensor[(?, 6, 7), float32], Tensor[(750, 225), int32], Tensor[(225), float32], Tensor[(112), float32]) */;
    %812 = %811.4;
    %813 = cast(%var_6340, dtype="float32") /* ty=Tensor[(750, 225), float32] */;
    %814 = shape_of(%812, dtype="int32") /* ty=Tensor[(2), int32] */;
    %815 = cast(%812, dtype="float32") /* ty=Tensor[(750, 225), float32] */;
    %816 = dyn.reshape(%813, %814, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %817 = cast(%var_6352, dtype="float64") /* ty=Tensor[(750, 225), float64] */;
    %818 = shape_of(%812, dtype="int32") /* ty=Tensor[(2), int32] */;
    %819 = cast(%812, dtype="float64") /* ty=Tensor[(750, 225), float64] */;
    %820 = dyn.reshape(%817, %818, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %821 = @func_4210() /* ty=(Tensor[(6, 9, 12), float64], Tensor[(?, 6, 7), float32]) */;
    %822 = @func_3002() /* ty=(Tensor[(2, 14, 6), float32],) */;
    %823 = power(%815, %816) /* ty=Tensor[(750, 225), float32] */;
    %824 = floor_divide(%819, %820) /* ty=Tensor[(750, 225), float64] */;
    %825 = %821.1;
    %826 = %822.0;
    (%823, %824, %825, %826)
  };
  %827(%var_6388, %var_6389) /* ty=(Tensor[(750, 225), float32], Tensor[(750, 225), float64], Tensor[(?, 6, 7), float32], Tensor[(2, 14, 6), float32]) */
}

def @func_6568() -> (Tensor[(168), int64], Tensor[(6, 9, 12), float64]) {
  @func_6566() /* ty=(Tensor[(168), int64], Tensor[(6, 9, 12), float64]) */
}

def @func_5674() -> (Tensor[(750), float32], Tensor[(1, 6, 7), float32], uint8) {
  %828 = @func_2908() /* ty=(Tensor[(4, 14, 2), uint32], Tensor[(4, 14, 2), int8], Tensor[(1, 390), float64], Tensor[(750), float32], Tensor[(4, 14, 2), float64], Tensor[(16, 13, 4), int8], Tensor[(4, 208), int8]) */;
  %829 = cast(meta[relay.Constant][49] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %830 = reshape(%829, newshape=[]) /* ty=uint8 */;
  %831 = @func_24(%830) /* ty=(Tensor[(?, 6, 7), float32], Tensor[(1, 6, 7), float32]) */;
  %832 = %828.3;
  %833 = %831.1;
  (%832, %833, meta[relay.Constant][49] /* ty=uint8 */)
}

def @func_1617(%var_1615: Tensor[(2, 14, 6), int64]) -> (Tensor[(2, 14, 6), bool], Tensor[(2, 14, 6), int8]) {
  @func_1614(%var_1615) /* ty=(Tensor[(2, 14, 6), bool], Tensor[(2, 14, 6), int8]) */
}

def @func_5517(%var_5515: Tensor[(8, 1, 2), uint32], %var_5516: Tensor[(8, 1, 2), uint32]) -> (Tensor[(8, ?, 2), uint32],) {
  %839 = fn (%var_5508: Tensor[(8, 1, 2), uint32], %var_5509: Tensor[(8, 1, 2), uint32]) -> (Tensor[(8, ?, 2), uint32],) {
    %834 = cast(%var_5509, dtype="uint32") /* ty=Tensor[(8, 1, 2), uint32] */;
    %835 = shape_of(%var_5508, dtype="int32") /* ty=Tensor[(3), int32] */;
    %836 = cast(%var_5508, dtype="uint32") /* ty=Tensor[(8, 1, 2), uint32] */;
    %837 = dyn.reshape(%834, %835, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %838 = left_shift(%836, %837) /* ty=Tensor[(8, ?, 2), uint32] */;
    (%838,)
  };
  %839(%var_5515, %var_5516) /* ty=(Tensor[(8, ?, 2), uint32],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen265/build/output.py", line 2371, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:02:07] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

