==========mod==========
#[version = "0.0.5"]
def @func_85(%var_72: Tensor[(2, 15, 6), bool], %var_73: Tensor[(2, 15, 6), bool]) -> Tensor[(2, 15, 6), bool] {
  %0 = cast(%var_73, dtype="bool") /* ty=Tensor[(2, 15, 6), bool] */;
  %1 = shape_of(%var_72, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_72, dtype="bool") /* ty=Tensor[(2, 15, 6), bool] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%2, %3) /* ty=Tensor[(2, 15, 6), bool] */
}

def @func_3069() -> Tensor[(2, 4, 2), float64] {
  %4 = @func_2928() /* ty=(Tensor[(2, 4, 2), float64],) */;
  %5 = %4.0;
  %6 = cast(%5, dtype="float64") /* ty=Tensor[(2, 4, 2), float64] */;
  asin(%6) /* ty=Tensor[(2, 4, 2), float64] */
}

def @func_4684(%var_4680: Tensor[(8, 13), float64]) -> Tensor[(8, 13), float64] {
  %7 = cast(%var_4680, dtype="float64") /* ty=Tensor[(8, 13), float64] */;
  asin(%7) /* ty=Tensor[(8, 13), float64] */
}

def @func_708(%var_703: Tensor[(8, 15, 9), uint64], %var_704: Tensor[(8, 15, 9), uint64]) -> Tensor[(8, 15, 9), uint64] {
  %8 = cast(%var_704, dtype="uint64") /* ty=Tensor[(8, 15, 9), uint64] */;
  %9 = shape_of(%var_703, dtype="int32") /* ty=Tensor[(3), int32] */;
  %10 = cast(%var_703, dtype="uint64") /* ty=Tensor[(8, 15, 9), uint64] */;
  %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  minimum(%10, %11) /* ty=Tensor[(8, 15, 9), uint64] */
}

def @func_5572() -> (Tensor[(1080), uint64], Tensor[(2, 15, 6), bool]) {
  %12 = @func_3972() /* ty=(Tensor[(2, 10, 13), float32], Tensor[(65, 4), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64], Tensor[(5, 4, 7), float64], Tensor[(140), uint8], Tensor[(2, 4, 2), float64], Tensor[(5, 4, 7), float64]) */;
  %13 = @func_4132() /* ty=(Tensor[(2, 15, 6), bool], Tensor[(13, 6, 14), bool]) */;
  %14 = %12.3;
  %15 = %13.0;
  (%14, %15)
}

def @func_3166() -> (Tensor[(2, 4, 2), float64], Tensor[(13, 6, 14), bool], Tensor[(546, 2), uint64]) {
  %16 = @func_3069() /* ty=Tensor[(2, 4, 2), float64] */;
  %17 = cast(%16, dtype="float64") /* ty=Tensor[(2, 4, 2), float64] */;
  %18 = cast(meta[relay.Constant][0] /* ty=Tensor[(546, 2), uint64] */, dtype="uint64") /* ty=Tensor[(546, 2), uint64] */;
  %19 = cast(meta[relay.Constant][0] /* ty=Tensor[(546, 2), uint64] */, dtype="uint64") /* ty=Tensor[(546, 2), uint64] */;
  %20 = reshape(%18, newshape=[13, 6, 14]) /* ty=Tensor[(13, 6, 14), uint64] */;
  %21 = reshape(%19, newshape=[13, 6, 14]) /* ty=Tensor[(13, 6, 14), uint64] */;
  %22 = @func_2752(%20, %21) /* ty=(Tensor[(13, 6, 14), bool],) */;
  %23 = log2(%17) /* ty=Tensor[(2, 4, 2), float64] */;
  %24 = %22.0;
  (%23, %24, meta[relay.Constant][0] /* ty=Tensor[(546, 2), uint64] */)
}

def @func_6760() -> Tensor[(2, 4, 2), float64] {
  %25 = @func_3260() /* ty=(Tensor[(2, 4, 2), float64],) */;
  %25.0
}

def @func_4853(%var_4828: Tensor[(14, 44), float64], %var_4848: Tensor[(14, 44), float64]) -> (Tensor[(13, 6, 14), bool], Tensor[(14, 44), int16], Tensor[(14, 44), uint32]) {
  %26 = @func_3166() /* ty=(Tensor[(2, 4, 2), float64], Tensor[(13, 6, 14), bool], Tensor[(546, 2), uint64]) */;
  %27 = @func_4600() /* ty=(Tensor[(2, 15, 6), int8], Tensor[(180), bool], Tensor[(8, 15, 9), float64], Tensor[(14, 44), float64], Tensor[(2, 4, 2), float64]) */;
  %28 = %27.3;
  %29 = cast(%var_4828, dtype="uint32") /* ty=Tensor[(14, 44), uint32] */;
  %30 = shape_of(%28, dtype="int32") /* ty=Tensor[(2), int32] */;
  %31 = cast(%28, dtype="uint32") /* ty=Tensor[(14, 44), uint32] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %33 = bitwise_and(%31, %32) /* ty=Tensor[(14, 44), uint32] */;
  %34 = cast(%28, dtype="int16") /* ty=Tensor[(14, 44), int16] */;
  %35 = shape_of(%33, dtype="int32") /* ty=Tensor[(2), int32] */;
  %36 = cast(%33, dtype="int16") /* ty=Tensor[(14, 44), int16] */;
  %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %38 = cast(%var_4848, dtype="uint32") /* ty=Tensor[(14, 44), uint32] */;
  %39 = shape_of(%28, dtype="int32") /* ty=Tensor[(2), int32] */;
  %40 = cast(%28, dtype="uint32") /* ty=Tensor[(14, 44), uint32] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %42 = %26.1;
  %43 = left_shift(%36, %37) /* ty=Tensor[(14, 44), int16] */;
  %44 = bitwise_xor(%40, %41) /* ty=Tensor[(14, 44), uint32] */;
  (%42, %43, %44)
}

def @func_4065(%var_4058: Tensor[(2, 4, 2), float64]) -> Tensor[(2, 4, 2), uint64] {
  %45 = @func_3166() /* ty=(Tensor[(2, 4, 2), float64], Tensor[(13, 6, 14), bool], Tensor[(546, 2), uint64]) */;
  %46 = %45.0;
  %47 = cast(%var_4058, dtype="uint64") /* ty=Tensor[(2, 4, 2), uint64] */;
  %48 = shape_of(%46, dtype="int32") /* ty=Tensor[(3), int32] */;
  %49 = cast(%46, dtype="uint64") /* ty=Tensor[(2, 4, 2), uint64] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  right_shift(%49, %50) /* ty=Tensor[(2, 4, 2), uint64] */
}

def @func_6576() -> Tensor[(2, 15, 6), bool] {
  %51 = @func_5434() /* ty=(Tensor[(2, 15, 6), bool],) */;
  %51.0
}

def @func_5969() -> Tensor[(546, 2), uint64] {
  %52 = @func_3166() /* ty=(Tensor[(2, 4, 2), float64], Tensor[(13, 6, 14), bool], Tensor[(546, 2), uint64]) */;
  %52.2
}

def @func_7353(%var_7335: Tensor[(16), float64], %var_7337: Tensor[(2, 4, 2), uint64]) -> (Tensor[(2, 10, 13), float32], Tensor[(16), float64], Tensor[(2, 4, 2), float32]) {
  %53 = @func_6073() /* ty=(Tensor[(2, 4, 2), float64], Tensor[(2, 10, 13), float32], Tensor[(512), bool]) */;
  %54 = cast(%var_7335, dtype="float64") /* ty=Tensor[(16), float64] */;
  %55 = reshape(%54, newshape=[2, 4, 2]) /* ty=Tensor[(2, 4, 2), float64] */;
  %56 = @func_4065(%55) /* ty=Tensor[(2, 4, 2), uint64] */;
  %57 = cast(%var_7337, dtype="float32") /* ty=Tensor[(2, 4, 2), float32] */;
  %58 = shape_of(%56, dtype="int32") /* ty=Tensor[(3), int32] */;
  %59 = cast(%56, dtype="float32") /* ty=Tensor[(2, 4, 2), float32] */;
  %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %61 = %53.1;
  %62 = mod(%59, %60) /* ty=Tensor[(2, 4, 2), float32] */;
  (%61, %var_7335, %62)
}

def @func_6710(%var_6696: Tensor[(1080), uint64]) -> (Tensor[(2, 4, 2), float64], Tensor[(2, 4, 2), float64], Tensor[(2, 4, 2), float64], Tensor[(8, 15, 9), uint64], Tensor[(180), bool], Tensor[(1080), uint64], Tensor[(3, 12, 12), float32], Tensor[(432), float32], Tensor[(8, 15, 9), uint64]) {
  %63 = @func_3260() /* ty=(Tensor[(2, 4, 2), float64],) */;
  %64 = @func_2928() /* ty=(Tensor[(2, 4, 2), float64],) */;
  %65 = cast(meta[relay.Constant][1] /* ty=Tensor[(180), bool] */, dtype="bool") /* ty=Tensor[(180), bool] */;
  %66 = cast(%var_6696, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %67 = reshape(%65, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), bool] */;
  %68 = reshape(%66, newshape=[1080]) /* ty=Tensor[(1080), uint64] */;
  %69 = @func_6404(%67, %68) /* ty=(Tensor[(2, 15, 6), bool], Tensor[(13, 6, 14), bool], Tensor[(2, 15, 6), int8], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64]) */;
  %70 = cast(meta[relay.Constant][2] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %71 = reshape(%70, newshape=[3, 12, 12]) /* ty=Tensor[(3, 12, 12), float32] */;
  %72 = @func_679(%71) /* ty=(Tensor[(3, 12, 12), float32], Tensor[(3, 12, 12), int16]) */;
  %73 = cast(%var_6696, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %74 = %69.3;
  %75 = cast(%74, dtype="uint64") /* ty=Tensor[(8, 15, 9), uint64] */;
  %76 = reshape(%73, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %77 = reshape(%75, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %78 = %63.0;
  %79 = @func_3069() /* ty=Tensor[(2, 4, 2), float64] */;
  %80 = %64.0;
  %81 = %72.0;
  %82 = @func_708(%76, %77) /* ty=Tensor[(8, 15, 9), uint64] */;
  (%78, %79, %80, %74, meta[relay.Constant][1] /* ty=Tensor[(180), bool] */, %var_6696, %81, meta[relay.Constant][2] /* ty=Tensor[(432), float32] */, %82)
}

def @func_5545() -> (Tensor[(13, 6, 14), bool],) {
  %83 = @func_4132() /* ty=(Tensor[(2, 15, 6), bool], Tensor[(13, 6, 14), bool]) */;
  %84 = %83.1;
  (%84,)
}

def @func_6841() -> (Tensor[(13, 6, 14), float32],) {
  %85 = @func_5545() /* ty=(Tensor[(13, 6, 14), bool],) */;
  %86 = %85.0;
  %87 = cast(%86, dtype="float32") /* ty=Tensor[(13, 6, 14), float32] */;
  %88 = rsqrt(%87) /* ty=Tensor[(13, 6, 14), float32] */;
  (%88,)
}

def @func_5818(%var_5749: Tensor[(2, 16, 16), bool], %var_5750: Tensor[(2, 16, 16), bool]) -> (Tensor[(2, 16, 16), bool], Tensor[(13, 6, 14), bool], Tensor[(2, 16, 16), float64], Tensor[(2, 10, 13), float32], Tensor[(260), float64]) {
  %89 = cast(%var_5750, dtype="bool") /* ty=Tensor[(2, 16, 16), bool] */;
  %90 = shape_of(%var_5749, dtype="int32") /* ty=Tensor[(3), int32] */;
  %91 = cast(%var_5749, dtype="bool") /* ty=Tensor[(2, 16, 16), bool] */;
  %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %93 = @func_5502() /* ty=(Tensor[(13, 6, 14), bool],) */;
  %94 = cast(%var_5750, dtype="float64") /* ty=Tensor[(2, 16, 16), float64] */;
  %95 = cast(meta[relay.Constant][3] /* ty=Tensor[(260), float64] */, dtype="float64") /* ty=Tensor[(260), float64] */;
  %96 = cast(meta[relay.Constant][3] /* ty=Tensor[(260), float64] */, dtype="float64") /* ty=Tensor[(260), float64] */;
  %97 = reshape(%95, newshape=[2, 10, 13]) /* ty=Tensor[(2, 10, 13), float64] */;
  %98 = reshape(%96, newshape=[2, 10, 13]) /* ty=Tensor[(2, 10, 13), float64] */;
  %99 = logical_or(%91, %92) /* ty=Tensor[(2, 16, 16), bool] */;
  %100 = %93.0;
  %101 = log2(%94) /* ty=Tensor[(2, 16, 16), float64] */;
  %102 = @func_3683(%97, %98) /* ty=Tensor[(2, 10, 13), float32] */;
  (%99, %100, %101, %102, meta[relay.Constant][3] /* ty=Tensor[(260), float64] */)
}

def @func_7032() -> Tensor[(13, 6, 14), float64] {
  %103 = @func_4669() /* ty=(Tensor[(13, 6, 14), bool],) */;
  %104 = %103.0;
  %105 = cast(%104, dtype="float64") /* ty=Tensor[(13, 6, 14), float64] */;
  cos(%105) /* ty=Tensor[(13, 6, 14), float64] */
}

def @func_6240(%var_6224: Tensor[(546, 2), uint64], %var_6236: Tensor[(546, 2), uint64]) -> (Tensor[(546, 2), uint32], Tensor[(546, 2), float64]) {
  %106 = @func_5067() /* ty=Tensor[(546, 2), uint64] */;
  %107 = cast(%var_6224, dtype="uint32") /* ty=Tensor[(546, 2), uint32] */;
  %108 = shape_of(%106, dtype="int32") /* ty=Tensor[(2), int32] */;
  %109 = cast(%106, dtype="uint32") /* ty=Tensor[(546, 2), uint32] */;
  %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %111 = cast(%var_6236, dtype="float64") /* ty=Tensor[(546, 2), float64] */;
  %112 = shape_of(%var_6224, dtype="int32") /* ty=Tensor[(2), int32] */;
  %113 = cast(%var_6224, dtype="float64") /* ty=Tensor[(546, 2), float64] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %115 = subtract(%109, %110) /* ty=Tensor[(546, 2), uint32] */;
  %116 = floor_divide(%113, %114) /* ty=Tensor[(546, 2), float64] */;
  (%115, %116)
}

def @func_7449(%var_7444: Tensor[(13, 3, 1), int32], %var_7445: Tensor[(13, 3, 8), int32]) -> (Tensor[(13, 3, 8), int32],) {
  %117 = cast(%var_7444, dtype="int32") /* ty=Tensor[(13, 3, 1), int32] */;
  %118 = cast(%var_7445, dtype="int32") /* ty=Tensor[(13, 3, 8), int32] */;
  %119 = bitwise_or(%117, %118) /* ty=Tensor[(13, 3, 8), int32] */;
  (%119,)
}

def @func_4253(%var_4238: Tensor[(11, 4, 14), float64]) -> Tensor[(11, 4, 14), float64] {
  %120 = cast(meta[relay.Constant][4] /* ty=Tensor[(11, 4, 14), float64] */, dtype="float64") /* ty=Tensor[(11, 4, 14), float64] */;
  %121 = shape_of(%var_4238, dtype="int32") /* ty=Tensor[(3), int32] */;
  %122 = cast(%var_4238, dtype="float64") /* ty=Tensor[(11, 4, 14), float64] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  subtract(%122, %123) /* ty=Tensor[(11, 4, 14), float64] */
}

def @func_5434() -> (Tensor[(2, 15, 6), bool],) {
  %124 = @func_4132() /* ty=(Tensor[(2, 15, 6), bool], Tensor[(13, 6, 14), bool]) */;
  %125 = %124.0;
  (%125,)
}

def @func_6813() -> Tensor[(2, 15, 6), bool] {
  %126 = @func_5572() /* ty=(Tensor[(1080), uint64], Tensor[(2, 15, 6), bool]) */;
  %126.1
}

def @func_3972() -> (Tensor[(2, 10, 13), float32], Tensor[(65, 4), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64], Tensor[(5, 4, 7), float64], Tensor[(140), uint8], Tensor[(2, 4, 2), float64], Tensor[(5, 4, 7), float64]) {
  %127 = cast(meta[relay.Constant][5] /* ty=Tensor[(65, 4), float64] */, dtype="float64") /* ty=Tensor[(65, 4), float64] */;
  %128 = cast(meta[relay.Constant][5] /* ty=Tensor[(65, 4), float64] */, dtype="float64") /* ty=Tensor[(65, 4), float64] */;
  %129 = reshape(%127, newshape=[2, 10, 13]) /* ty=Tensor[(2, 10, 13), float64] */;
  %130 = reshape(%128, newshape=[2, 10, 13]) /* ty=Tensor[(2, 10, 13), float64] */;
  %131 = cast(meta[relay.Constant][6] /* ty=Tensor[(1080), uint64] */, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %132 = cast(meta[relay.Constant][6] /* ty=Tensor[(1080), uint64] */, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %133 = reshape(%131, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %134 = reshape(%132, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %135 = cast(meta[relay.Constant][7] /* ty=Tensor[(140), uint8] */, dtype="uint8") /* ty=Tensor[(140), uint8] */;
  %136 = reshape(%135, newshape=[5, 4, 7]) /* ty=Tensor[(5, 4, 7), uint8] */;
  %137 = @func_2370(%136) /* ty=(Tensor[(5, 4, 7), float64],) */;
  %138 = @func_3069() /* ty=Tensor[(2, 4, 2), float64] */;
  %139 = cast(%138, dtype="float64") /* ty=Tensor[(2, 4, 2), float64] */;
  %140 = %137.0;
  %141 = cast(%140, dtype="uint8") /* ty=Tensor[(5, 4, 7), uint8] */;
  %142 = reshape(%141, newshape=[5, 4, 7]) /* ty=Tensor[(5, 4, 7), uint8] */;
  %143 = @func_2370(%142) /* ty=(Tensor[(5, 4, 7), float64],) */;
  %144 = @func_3683(%129, %130) /* ty=Tensor[(2, 10, 13), float32] */;
  %145 = @func_708(%133, %134) /* ty=Tensor[(8, 15, 9), uint64] */;
  %146 = tan(%139) /* ty=Tensor[(2, 4, 2), float64] */;
  %147 = %143.0;
  (%144, meta[relay.Constant][5] /* ty=Tensor[(65, 4), float64] */, %145, meta[relay.Constant][6] /* ty=Tensor[(1080), uint64] */, %140, meta[relay.Constant][7] /* ty=Tensor[(140), uint8] */, %146, %147)
}

def @func_6346() -> (Tensor[(630), float32],) {
  %148 = @func_6105() /* ty=(Tensor[(2, 4, 2), float64], Tensor[(6, 15, 7), float32], Tensor[(630), float32]) */;
  %149 = %148.2;
  (%149,)
}

def @func_6901(%var_6866: Tensor[(546, 2), uint64]) -> (Tensor[(5, 4, 7), float64], Tensor[(546, 2), float64], Tensor[(546, 2), uint8], Tensor[(2, 4, 2), float64]) {
  %150 = @func_3972() /* ty=(Tensor[(2, 10, 13), float32], Tensor[(65, 4), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64], Tensor[(5, 4, 7), float64], Tensor[(140), uint8], Tensor[(2, 4, 2), float64], Tensor[(5, 4, 7), float64]) */;
  %151 = @func_6800() /* ty=Tensor[(546, 2), uint64] */;
  %152 = cast(%var_6866, dtype="uint8") /* ty=Tensor[(546, 2), uint8] */;
  %153 = shape_of(%151, dtype="int32") /* ty=Tensor[(2), int32] */;
  %154 = cast(%151, dtype="uint8") /* ty=Tensor[(546, 2), uint8] */;
  %155 = dyn.reshape(%152, %153, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %156 = minimum(%154, %155) /* ty=Tensor[(546, 2), uint8] */;
  %157 = cast(%156, dtype="uint64") /* ty=Tensor[(546, 2), uint64] */;
  %158 = cast(%151, dtype="uint64") /* ty=Tensor[(546, 2), uint64] */;
  %159 = reshape(%157, newshape=[546, 2]) /* ty=Tensor[(546, 2), uint64] */;
  %160 = reshape(%158, newshape=[546, 2]) /* ty=Tensor[(546, 2), uint64] */;
  %161 = @func_6240(%159, %160) /* ty=(Tensor[(546, 2), uint32], Tensor[(546, 2), float64]) */;
  %162 = cast(%156, dtype="float64") /* ty=Tensor[(546, 2), float64] */;
  %163 = log2(%162) /* ty=Tensor[(546, 2), float64] */;
  %164 = cast(meta[relay.Constant][8] /* ty=Tensor[(546, 2), float64] */, dtype="uint8") /* ty=Tensor[(546, 2), uint8] */;
  %165 = shape_of(%163, dtype="int32") /* ty=Tensor[(2), int32] */;
  %166 = cast(%163, dtype="uint8") /* ty=Tensor[(546, 2), uint8] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %168 = %150.4;
  %169 = %161.1;
  %170 = left_shift(%166, %167) /* ty=Tensor[(546, 2), uint8] */;
  %171 = @func_3069() /* ty=Tensor[(2, 4, 2), float64] */;
  (%168, %169, %170, %171)
}

def @func_5304(%var_5261: Tensor[(630), float32], %var_5264: Tensor[(6, 15, 7), float32], %var_5288: Tensor[(1080), uint64], %var_5292: Tensor[(1, 315), float32]) -> (Tensor[(2, 15, 6), bool], Tensor[(630), float32], Tensor[(6, 15, 7), int32], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64], Tensor[(10, 8, 5), float64], Tensor[(4, 100), float32], Tensor[(1, 315), float32], Tensor[(36), float64]) {
  %172 = @func_4132() /* ty=(Tensor[(2, 15, 6), bool], Tensor[(13, 6, 14), bool]) */;
  %173 = cast(%var_5261, dtype="float32") /* ty=Tensor[(630), float32] */;
  %174 = reshape(%173, newshape=[6, 15, 7]) /* ty=Tensor[(6, 15, 7), float32] */;
  %175 = @func_3496(%174) /* ty=Tensor[(6, 15, 7), float32] */;
  %176 = cast(%var_5264, dtype="int32") /* ty=Tensor[(6, 15, 7), int32] */;
  %177 = shape_of(%175, dtype="int32") /* ty=Tensor[(3), int32] */;
  %178 = cast(%175, dtype="int32") /* ty=Tensor[(6, 15, 7), int32] */;
  %179 = dyn.reshape(%176, %177, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %180 = cast(%var_5288, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %181 = cast(%var_5288, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %182 = reshape(%180, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %183 = reshape(%181, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %184 = cast(meta[relay.Constant][9] /* ty=Tensor[(4, 100), float32] */, dtype="float32") /* ty=Tensor[(4, 100), float32] */;
  %185 = cast(meta[relay.Constant][9] /* ty=Tensor[(4, 100), float32] */, dtype="float32") /* ty=Tensor[(4, 100), float32] */;
  %186 = cast(%var_5292, dtype="float32") /* ty=Tensor[(1, 315), float32] */;
  %187 = cast(meta[relay.Constant][10] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %188 = reshape(%184, newshape=[10, 8, 5]) /* ty=Tensor[(10, 8, 5), float32] */;
  %189 = reshape(%185, newshape=[10, 8, 5]) /* ty=Tensor[(10, 8, 5), float32] */;
  %190 = reshape(%186, newshape=[1, 315]) /* ty=Tensor[(1, 315), float32] */;
  %191 = reshape(%187, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %192 = @func_2336(%188, %189, %190, %191) /* ty=(Tensor[(8, 15, 9), uint64], Tensor[(1260), bool], Tensor[(270, 4), uint64], Tensor[(10, 8, 5), float64], Tensor[(3, 12, 12), float32], Tensor[(12, 36), float32], Tensor[(9, 5, 7), float32], Tensor[(1, 315), float32], Tensor[(10, 8, 5), float64], Tensor[(8, 15, 9), uint64], Tensor[(10, 8, 5), float64], Tensor[(3, 12, 12), float32], Tensor[(10, 8, 5), float32], Tensor[(9, 14, 10), float64], Tensor[(6, 30), bool], Tensor[(36), float64], Tensor[(6, 30), bool], Tensor[(8, 15, 9), uint64]) */;
  %193 = %172.0;
  %194 = maximum(%178, %179) /* ty=Tensor[(6, 15, 7), int32] */;
  %195 = @func_708(%182, %183) /* ty=Tensor[(8, 15, 9), uint64] */;
  %196 = %192.10;
  (%193, %var_5261, %194, %195, %var_5288, %196, meta[relay.Constant][9] /* ty=Tensor[(4, 100), float32] */, %var_5292, meta[relay.Constant][10] /* ty=Tensor[(36), float64] */)
}

def @func_1434(%var_1418: Tensor[(9, 14, 10), bool], %var_1429: Tensor[(1080), uint64]) -> (Tensor[(9, 14, 10), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64]) {
  %197 = cast(meta[relay.Constant][11] /* ty=Tensor[(9, 14, 10), float32] */, dtype="float32") /* ty=Tensor[(9, 14, 10), float32] */;
  %198 = sin(%197) /* ty=Tensor[(9, 14, 10), float32] */;
  %199 = cast(%198, dtype="bool") /* ty=Tensor[(9, 14, 10), bool] */;
  %200 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(9, 14, 10), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %201 = cast(meta[relay.Constant][11] /* ty=Tensor[(9, 14, 10), float32] */, dtype="bool") /* ty=Tensor[(9, 14, 10), bool] */;
  %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %203 = less(%201, %202) /* ty=Tensor[(9, 14, 10), bool] */;
  %204 = cast(%var_1418, dtype="float64") /* ty=Tensor[(9, 14, 10), float64] */;
  %205 = shape_of(%203, dtype="int32") /* ty=Tensor[(3), int32] */;
  %206 = cast(%203, dtype="float64") /* ty=Tensor[(9, 14, 10), float64] */;
  %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %208 = cast(%var_1429, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %209 = cast(%var_1429, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %210 = reshape(%208, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %211 = reshape(%209, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %212 = subtract(%206, %207) /* ty=Tensor[(9, 14, 10), float64] */;
  %213 = @func_708(%210, %211) /* ty=Tensor[(8, 15, 9), uint64] */;
  (%212, %213, %var_1429)
}

def @func_6656(%var_6599: Tensor[(2, 15, 6), float32], %var_6636: Tensor[(1080), uint64], %var_6637: Tensor[(1092), uint64]) -> (Tensor[(2, 15, 6), int64], Tensor[(1080), int64], Tensor[(1080), uint64], Tensor[(1092), uint64], Tensor[(432), float32], Tensor[(1386), int16], Tensor[(1260), bool], Tensor[(11, 8, 16), float32], Tensor[(704, 2), float32], Tensor[(630), float32], Tensor[(630), float32]) {
  %214 = @func_5434() /* ty=(Tensor[(2, 15, 6), bool],) */;
  %215 = %214.0;
  %216 = cast(%215, dtype="float32") /* ty=Tensor[(2, 15, 6), float32] */;
  %217 = sigmoid(%216) /* ty=Tensor[(2, 15, 6), float32] */;
  %218 = cast(%var_6599, dtype="int64") /* ty=Tensor[(2, 15, 6), int64] */;
  %219 = shape_of(%217, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%217, dtype="int64") /* ty=Tensor[(2, 15, 6), int64] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %222 = cast(%var_6636, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %223 = cast(%var_6636, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %224 = cast(%var_6637, dtype="uint64") /* ty=Tensor[(1092), uint64] */;
  %225 = cast(meta[relay.Constant][12] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %226 = cast(meta[relay.Constant][13] /* ty=Tensor[(1386), int16] */, dtype="int16") /* ty=Tensor[(1386), int16] */;
  %227 = cast(meta[relay.Constant][14] /* ty=Tensor[(1260), bool] */, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %228 = reshape(%222, newshape=[1080]) /* ty=Tensor[(1080), uint64] */;
  %229 = reshape(%223, newshape=[1080]) /* ty=Tensor[(1080), uint64] */;
  %230 = reshape(%224, newshape=[1092]) /* ty=Tensor[(1092), uint64] */;
  %231 = reshape(%225, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %232 = reshape(%226, newshape=[154, 9]) /* ty=Tensor[(154, 9), int16] */;
  %233 = reshape(%227, newshape=[1260]) /* ty=Tensor[(1260), bool] */;
  %234 = @func_3654(%228, %229, %230, %231, %232, %233) /* ty=(Tensor[(2, 4, 2), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), int64], Tensor[(13, 6, 14), bool], Tensor[(1092), uint64], Tensor[(2, 15, 6), bool], Tensor[(3, 12, 12), float32], Tensor[(432), float32], Tensor[(5, 4, 7), float64], Tensor[(140), uint8], Tensor[(14, 9, 11), bool], Tensor[(154, 9), int16], Tensor[(1080), uint64], Tensor[(1260), bool], Tensor[(1080), float64]) */;
  %235 = cast(meta[relay.Constant][15] /* ty=Tensor[(704, 2), float32] */, dtype="float32") /* ty=Tensor[(704, 2), float32] */;
  %236 = reshape(%235, newshape=[11, 8, 16]) /* ty=Tensor[(11, 8, 16), float32] */;
  %237 = @func_3985(%236) /* ty=(Tensor[(11, 8, 16), float32],) */;
  %238 = cast(meta[relay.Constant][16] /* ty=Tensor[(630), float32] */, dtype="float32") /* ty=Tensor[(630), float32] */;
  %239 = reshape(%238, newshape=[630]) /* ty=Tensor[(630), float32] */;
  %240 = @func_3881(%239) /* ty=(Tensor[(2, 15, 6), bool], Tensor[(6, 15, 7), float32], Tensor[(630), float32]) */;
  %241 = subtract(%220, %221) /* ty=Tensor[(2, 15, 6), int64] */;
  %242 = %234.2;
  %243 = %237.0;
  %244 = %240.2;
  (%241, %242, %var_6636, %var_6637, meta[relay.Constant][12] /* ty=Tensor[(432), float32] */, meta[relay.Constant][13] /* ty=Tensor[(1386), int16] */, meta[relay.Constant][14] /* ty=Tensor[(1260), bool] */, %243, meta[relay.Constant][15] /* ty=Tensor[(704, 2), float32] */, %244, meta[relay.Constant][16] /* ty=Tensor[(630), float32] */)
}

def @func_4750() -> (Tensor[(2, 4, 2), float64],) {
  %245 = @func_3260() /* ty=(Tensor[(2, 4, 2), float64],) */;
  %246 = %245.0;
  (%246,)
}

def @func_4600() -> (Tensor[(2, 15, 6), int8], Tensor[(180), bool], Tensor[(8, 15, 9), float64], Tensor[(14, 44), float64], Tensor[(2, 4, 2), float64]) {
  %247 = cast(meta[relay.Constant][17] /* ty=Tensor[(180), bool] */, dtype="bool") /* ty=Tensor[(180), bool] */;
  %248 = reshape(%247, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), bool] */;
  %249 = @func_4483(%248) /* ty=(Tensor[(2, 15, 6), int8],) */;
  %250 = cast(meta[relay.Constant][18] /* ty=Tensor[(14, 44), float64] */, dtype="float64") /* ty=Tensor[(14, 44), float64] */;
  %251 = reshape(%250, newshape=[616]) /* ty=Tensor[(616), float64] */;
  %252 = @func_4294(%251) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(11, 4, 14), float64], Tensor[(616), float64]) */;
  %253 = @func_3260() /* ty=(Tensor[(2, 4, 2), float64],) */;
  %254 = %253.0;
  %255 = cast(%254, dtype="float64") /* ty=Tensor[(2, 4, 2), float64] */;
  %256 = %249.0;
  %257 = %252.0;
  %258 = sin(%255) /* ty=Tensor[(2, 4, 2), float64] */;
  (%256, meta[relay.Constant][17] /* ty=Tensor[(180), bool] */, %257, meta[relay.Constant][18] /* ty=Tensor[(14, 44), float64] */, %258)
}

def @func_6927() -> Tensor[(546, 2), uint64] {
  @func_6800() /* ty=Tensor[(546, 2), uint64] */
}

def @func_6073() -> (Tensor[(2, 4, 2), float64], Tensor[(2, 10, 13), float32], Tensor[(512), bool]) {
  %259 = cast(meta[relay.Constant][19] /* ty=Tensor[(512), bool] */, dtype="bool") /* ty=Tensor[(512), bool] */;
  %260 = cast(meta[relay.Constant][19] /* ty=Tensor[(512), bool] */, dtype="bool") /* ty=Tensor[(512), bool] */;
  %261 = reshape(%259, newshape=[2, 16, 16]) /* ty=Tensor[(2, 16, 16), bool] */;
  %262 = reshape(%260, newshape=[2, 16, 16]) /* ty=Tensor[(2, 16, 16), bool] */;
  %263 = @func_5818(%261, %262) /* ty=(Tensor[(2, 16, 16), bool], Tensor[(13, 6, 14), bool], Tensor[(2, 16, 16), float64], Tensor[(2, 10, 13), float32], Tensor[(260), float64]) */;
  %264 = @func_3069() /* ty=Tensor[(2, 4, 2), float64] */;
  %265 = %263.3;
  (%264, %265, meta[relay.Constant][19] /* ty=Tensor[(512), bool] */)
}

def @func_7170() -> (Tensor[(1080), uint64], Tensor[(546, 2), float64], Tensor[(546, 2), bool]) {
  %266 = @func_5572() /* ty=(Tensor[(1080), uint64], Tensor[(2, 15, 6), bool]) */;
  %267 = @func_5195() /* ty=Tensor[(546, 2), uint64] */;
  %268 = cast(%267, dtype="float32") /* ty=Tensor[(546, 2), float32] */;
  %269 = tan(%268) /* ty=Tensor[(546, 2), float32] */;
  %270 = cast(%269, dtype="float64") /* ty=Tensor[(546, 2), float64] */;
  %271 = cast(%267, dtype="bool") /* ty=Tensor[(546, 2), bool] */;
  %272 = shape_of(%269, dtype="int32") /* ty=Tensor[(2), int32] */;
  %273 = cast(%269, dtype="bool") /* ty=Tensor[(546, 2), bool] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %275 = %266.0;
  %276 = acos(%270) /* ty=Tensor[(546, 2), float64] */;
  %277 = not_equal(%273, %274) /* ty=Tensor[(546, 2), bool] */;
  (%275, %276, %277)
}

def @func_1776(%var_1745: Tensor[(9, 5, 7), float32]) -> (Tensor[(9, 5, 7), float32], Tensor[(3, 12, 12), float32], Tensor[(432), float32]) {
  %278 = cast(%var_1745, dtype="float32") /* ty=Tensor[(9, 5, 7), float32] */;
  %279 = cast(meta[relay.Constant][20] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %280 = reshape(%279, newshape=[3, 12, 12]) /* ty=Tensor[(3, 12, 12), float32] */;
  %281 = @func_679(%280) /* ty=(Tensor[(3, 12, 12), float32], Tensor[(3, 12, 12), int16]) */;
  %282 = asinh(%278) /* ty=Tensor[(9, 5, 7), float32] */;
  %283 = %281.0;
  (%282, %283, meta[relay.Constant][20] /* ty=Tensor[(432), float32] */)
}

def @func_4883() -> (Tensor[(8, 15, 9), float64],) {
  %284 = @func_4600() /* ty=(Tensor[(2, 15, 6), int8], Tensor[(180), bool], Tensor[(8, 15, 9), float64], Tensor[(14, 44), float64], Tensor[(2, 4, 2), float64]) */;
  %285 = %284.2;
  (%285,)
}

def @func_7625(%var_7595: Tensor[(770), float64], %var_7596: Tensor[(36), float64], %var_7605: Tensor[(180), bool]) -> (Tensor[(2, 4, 2), float64], Tensor[(8, 15, 9), uint64], Tensor[(770), float64], Tensor[(36), float64], Tensor[(1260), bool], Tensor[(1080), uint64], Tensor[(140), float64], Tensor[(180), bool]) {
  %286 = cast(%var_7595, dtype="float64") /* ty=Tensor[(770), float64] */;
  %287 = cast(%var_7596, dtype="float64") /* ty=Tensor[(36), float64] */;
  %288 = cast(meta[relay.Constant][21] /* ty=Tensor[(1260), bool] */, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %289 = reshape(%286, newshape=[14, 11, 5]) /* ty=Tensor[(14, 11, 5), float64] */;
  %290 = reshape(%287, newshape=[18, 2]) /* ty=Tensor[(18, 2), float64] */;
  %291 = reshape(%288, newshape=[1260]) /* ty=Tensor[(1260), bool] */;
  %292 = @func_3026(%289, %290, %291) /* ty=(Tensor[(8, 15, 9), uint64], Tensor[(18, 2), float64], Tensor[(180), bool], Tensor[(1260), bool], Tensor[(14, 11, 5), float64]) */;
  %293 = cast(meta[relay.Constant][22] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
  %294 = cast(%var_7605, dtype="bool") /* ty=Tensor[(180), bool] */;
  %295 = reshape(%293, newshape=[5, 4, 7]) /* ty=Tensor[(5, 4, 7), float64] */;
  %296 = reshape(%294, newshape=[180]) /* ty=Tensor[(180), bool] */;
  %297 = @func_7569(%295, %296) /* ty=(Tensor[(5, 4, 7), int8], Tensor[(8, 15, 9), float64], Tensor[(1120), float32], Tensor[(180), bool], Tensor[(1080), uint64], Tensor[(5, 4, 7), float64]) */;
  %298 = @func_3069() /* ty=Tensor[(2, 4, 2), float64] */;
  %299 = %292.0;
  %300 = %297.4;
  (%298, %299, %var_7595, %var_7596, meta[relay.Constant][21] /* ty=Tensor[(1260), bool] */, %300, meta[relay.Constant][22] /* ty=Tensor[(140), float64] */, %var_7605)
}

def @func_3216() -> (Tensor[(13, 6, 14), bool], Tensor[(2, 15, 6), bool], Tensor[(180), bool]) {
  %301 = @func_3166() /* ty=(Tensor[(2, 4, 2), float64], Tensor[(13, 6, 14), bool], Tensor[(546, 2), uint64]) */;
  %302 = cast(meta[relay.Constant][23] /* ty=Tensor[(180), bool] */, dtype="bool") /* ty=Tensor[(180), bool] */;
  %303 = cast(meta[relay.Constant][23] /* ty=Tensor[(180), bool] */, dtype="bool") /* ty=Tensor[(180), bool] */;
  %304 = reshape(%302, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), bool] */;
  %305 = reshape(%303, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), bool] */;
  %306 = %301.1;
  %307 = @func_85(%304, %305) /* ty=Tensor[(2, 15, 6), bool] */;
  (%306, %307, meta[relay.Constant][23] /* ty=Tensor[(180), bool] */)
}

def @func_3985(%var_3977: Tensor[(11, 8, 16), float32]) -> (Tensor[(11, 8, 16), float32],) {
  %308 = cast(%var_3977, dtype="float32") /* ty=Tensor[(11, 8, 16), float32] */;
  %309 = erf(%308) /* ty=Tensor[(11, 8, 16), float32] */;
  (%309,)
}

def @func_3683(%var_3669: Tensor[(2, 10, 13), float64], %var_3670: Tensor[(2, 10, 13), float64]) -> Tensor[(2, 10, 13), float32] {
  %310 = cast(%var_3670, dtype="float64") /* ty=Tensor[(2, 10, 13), float64] */;
  %311 = shape_of(%var_3669, dtype="int32") /* ty=Tensor[(3), int32] */;
  %312 = cast(%var_3669, dtype="float64") /* ty=Tensor[(2, 10, 13), float64] */;
  %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %314 = power(%312, %313) /* ty=Tensor[(2, 10, 13), float64] */;
  %315 = cast(%var_3669, dtype="float32") /* ty=Tensor[(2, 10, 13), float32] */;
  %316 = shape_of(%314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %317 = cast(%314, dtype="float32") /* ty=Tensor[(2, 10, 13), float32] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%317, %318) /* ty=Tensor[(2, 10, 13), float32] */
}

def @func_6800() -> Tensor[(546, 2), uint64] {
  @func_5969() /* ty=Tensor[(546, 2), uint64] */
}

def @func_7228() -> (Tensor[(5, 4, 7), float32],) {
  %319 = @func_5169() /* ty=Tensor[(5, 4, 7), float64] */;
  %320 = cast(%319, dtype="float64") /* ty=Tensor[(5, 4, 7), float64] */;
  %321 = log(%320) /* ty=Tensor[(5, 4, 7), float64] */;
  %322 = cast(%321, dtype="float32") /* ty=Tensor[(5, 4, 7), float32] */;
  %323 = exp(%322) /* ty=Tensor[(5, 4, 7), float32] */;
  (%323,)
}

def @func_5854(%var_5851: Tensor[(1092), uint64]) -> (Tensor[(2, 4, 2), float64], Tensor[(13, 6, 14), bool], Tensor[(1092), uint64]) {
  %324 = cast(%var_5851, dtype="uint64") /* ty=Tensor[(1092), uint64] */;
  %325 = cast(%var_5851, dtype="uint64") /* ty=Tensor[(1092), uint64] */;
  %326 = reshape(%324, newshape=[13, 6, 14]) /* ty=Tensor[(13, 6, 14), uint64] */;
  %327 = reshape(%325, newshape=[13, 6, 14]) /* ty=Tensor[(13, 6, 14), uint64] */;
  %328 = @func_2752(%326, %327) /* ty=(Tensor[(13, 6, 14), bool],) */;
  %329 = @func_3069() /* ty=Tensor[(2, 4, 2), float64] */;
  %330 = %328.0;
  (%329, %330, %var_5851)
}

def @func_7793(%var_7758: Tensor[(165), float32], %var_7770: Tensor[(1386), int16], %var_7771: Tensor[(1260), bool], %var_7781: Tensor[(180), bool], %var_7789: Tensor[(4, 108), float32]) -> (Tensor[(546, 2), uint64], Tensor[(3, 5, 11), float32], Tensor[(165), float32], Tensor[(1080), float64], Tensor[(1080), uint64], Tensor[(1386), int16], Tensor[(1260), bool], Tensor[(2, 15, 6), bool], Tensor[(180), bool], Tensor[(4, 108), float64]) {
  %331 = @func_7258() /* ty=(Tensor[(546, 2), uint64],) */;
  %332 = cast(%var_7758, dtype="float32") /* ty=Tensor[(165), float32] */;
  %333 = reshape(%332, newshape=[3, 5, 11]) /* ty=Tensor[(3, 5, 11), float32] */;
  %334 = @func_6210(%333) /* ty=(Tensor[(3, 5, 11), float32],) */;
  %335 = cast(meta[relay.Constant][24] /* ty=Tensor[(1080), uint64] */, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %336 = cast(meta[relay.Constant][24] /* ty=Tensor[(1080), uint64] */, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %337 = %331.0;
  %338 = cast(%337, dtype="uint64") /* ty=Tensor[(546, 2), uint64] */;
  %339 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 108), float32] */, dtype="float32") /* ty=Tensor[(4, 108), float32] */;
  %340 = cast(%var_7770, dtype="int16") /* ty=Tensor[(1386), int16] */;
  %341 = cast(%var_7771, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %342 = reshape(%335, newshape=[1080]) /* ty=Tensor[(1080), uint64] */;
  %343 = reshape(%336, newshape=[1080]) /* ty=Tensor[(1080), uint64] */;
  %344 = reshape(%338, newshape=[1092]) /* ty=Tensor[(1092), uint64] */;
  %345 = reshape(%339, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %346 = reshape(%340, newshape=[154, 9]) /* ty=Tensor[(154, 9), int16] */;
  %347 = reshape(%341, newshape=[1260]) /* ty=Tensor[(1260), bool] */;
  %348 = @func_3654(%342, %343, %344, %345, %346, %347) /* ty=(Tensor[(2, 4, 2), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), int64], Tensor[(13, 6, 14), bool], Tensor[(1092), uint64], Tensor[(2, 15, 6), bool], Tensor[(3, 12, 12), float32], Tensor[(432), float32], Tensor[(5, 4, 7), float64], Tensor[(140), uint8], Tensor[(14, 9, 11), bool], Tensor[(154, 9), int16], Tensor[(1080), uint64], Tensor[(1260), bool], Tensor[(1080), float64]) */;
  %349 = cast(%var_7781, dtype="bool") /* ty=Tensor[(180), bool] */;
  %350 = reshape(%349, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), bool] */;
  %351 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 108), float32] */, dtype="float32") /* ty=Tensor[(4, 108), float32] */;
  %352 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(4, 108), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %353 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 108), float32] */, dtype="float32") /* ty=Tensor[(4, 108), float32] */;
  %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %355 = power(%353, %354) /* ty=Tensor[(4, 108), float32] */;
  %356 = cast(%var_7789, dtype="float64") /* ty=Tensor[(4, 108), float64] */;
  %357 = shape_of(%355, dtype="int32") /* ty=Tensor[(2), int32] */;
  %358 = cast(%355, dtype="float64") /* ty=Tensor[(4, 108), float64] */;
  %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %360 = %334.0;
  %361 = %348.14;
  %362 = @func_5003(%350) /* ty=Tensor[(2, 15, 6), bool] */;
  %363 = floor_mod(%358, %359) /* ty=Tensor[(4, 108), float64] */;
  (%337, %360, %var_7758, %361, meta[relay.Constant][24] /* ty=Tensor[(1080), uint64] */, %var_7770, %var_7771, %362, %var_7781, %363)
}

def @func_3417(%var_3408: Tensor[(14, 9, 11), int16], %var_3409: Tensor[(14, 9, 11), int16]) -> Tensor[(14, 9, 11), bool] {
  %364 = cast(%var_3409, dtype="bool") /* ty=Tensor[(14, 9, 11), bool] */;
  %365 = shape_of(%var_3408, dtype="int32") /* ty=Tensor[(3), int32] */;
  %366 = cast(%var_3408, dtype="bool") /* ty=Tensor[(14, 9, 11), bool] */;
  %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%366, %367) /* ty=Tensor[(14, 9, 11), bool] */
}

def @func_6210(%var_6199: Tensor[(3, 5, 11), float32]) -> (Tensor[(3, 5, 11), float32],) {
  %368 = cast(%var_6199, dtype="float32") /* ty=Tensor[(3, 5, 11), float32] */;
  %369 = tan(%368) /* ty=Tensor[(3, 5, 11), float32] */;
  (%369,)
}

def @func_5705(%var_5666: Tensor[(10, 16, 7), float32], %var_5696: Tensor[(2, 15, 6), bool]) -> (Tensor[(10, 16, 7), float32], Tensor[(8, 15, 9), float64], Tensor[(2, 15, 6), int64]) {
  %370 = cast(%var_5666, dtype="float32") /* ty=Tensor[(10, 16, 7), float32] */;
  %371 = @func_4600() /* ty=(Tensor[(2, 15, 6), int8], Tensor[(180), bool], Tensor[(8, 15, 9), float64], Tensor[(14, 44), float64], Tensor[(2, 4, 2), float64]) */;
  %372 = @func_5434() /* ty=(Tensor[(2, 15, 6), bool],) */;
  %373 = %372.0;
  %374 = cast(%var_5696, dtype="int64") /* ty=Tensor[(2, 15, 6), int64] */;
  %375 = shape_of(%373, dtype="int32") /* ty=Tensor[(3), int32] */;
  %376 = cast(%373, dtype="int64") /* ty=Tensor[(2, 15, 6), int64] */;
  %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %378 = tan(%370) /* ty=Tensor[(10, 16, 7), float32] */;
  %379 = %371.2;
  %380 = right_shift(%376, %377) /* ty=Tensor[(2, 15, 6), int64] */;
  (%378, %379, %380)
}

def @func_679(%var_674: Tensor[(3, 12, 12), float32]) -> (Tensor[(3, 12, 12), float32], Tensor[(3, 12, 12), int16]) {
  %381 = cast(meta[relay.Constant][27] /* ty=Tensor[(3, 12, 12), float32] */, dtype="float32") /* ty=Tensor[(3, 12, 12), float32] */;
  %382 = cast(%var_674, dtype="int16") /* ty=Tensor[(3, 12, 12), int16] */;
  %383 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(3, 12, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %384 = cast(meta[relay.Constant][27] /* ty=Tensor[(3, 12, 12), float32] */, dtype="int16") /* ty=Tensor[(3, 12, 12), int16] */;
  %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %386 = atan(%381) /* ty=Tensor[(3, 12, 12), float32] */;
  %387 = subtract(%384, %385) /* ty=Tensor[(3, 12, 12), int16] */;
  (%386, %387)
}

def @func_3654(%var_3569: Tensor[(1080), uint64], %var_3573: Tensor[(1080), uint64], %var_3587: Tensor[(1092), uint64], %var_3623: Tensor[(432), float32], %var_3636: Tensor[(154, 9), int16], %var_3640: Tensor[(1260), bool]) -> (Tensor[(2, 4, 2), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), int64], Tensor[(13, 6, 14), bool], Tensor[(1092), uint64], Tensor[(2, 15, 6), bool], Tensor[(3, 12, 12), float32], Tensor[(432), float32], Tensor[(5, 4, 7), float64], Tensor[(140), uint8], Tensor[(14, 9, 11), bool], Tensor[(154, 9), int16], Tensor[(1080), uint64], Tensor[(1260), bool], Tensor[(1080), float64]) {
  %388 = @func_2928() /* ty=(Tensor[(2, 4, 2), float64],) */;
  %389 = cast(%var_3569, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %390 = cast(%var_3569, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %391 = reshape(%389, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %392 = reshape(%390, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %393 = cast(%var_3573, dtype="int64") /* ty=Tensor[(1080), int64] */;
  %394 = shape_of(%var_3569, dtype="int32") /* ty=Tensor[(1), int32] */;
  %395 = cast(%var_3569, dtype="int64") /* ty=Tensor[(1080), int64] */;
  %396 = dyn.reshape(%393, %394, newshape=[]) /* ty=Tensor[(?), int64] */;
  %397 = cast(%var_3587, dtype="uint64") /* ty=Tensor[(1092), uint64] */;
  %398 = cast(%var_3587, dtype="uint64") /* ty=Tensor[(1092), uint64] */;
  %399 = reshape(%397, newshape=[13, 6, 14]) /* ty=Tensor[(13, 6, 14), uint64] */;
  %400 = reshape(%398, newshape=[13, 6, 14]) /* ty=Tensor[(13, 6, 14), uint64] */;
  %401 = @func_2752(%399, %400) /* ty=(Tensor[(13, 6, 14), bool],) */;
  %402 = @func_3216() /* ty=(Tensor[(13, 6, 14), bool], Tensor[(2, 15, 6), bool], Tensor[(180), bool]) */;
  %403 = cast(%var_3623, dtype="float32") /* ty=Tensor[(432), float32] */;
  %404 = reshape(%403, newshape=[3, 12, 12]) /* ty=Tensor[(3, 12, 12), float32] */;
  %405 = @func_679(%404) /* ty=(Tensor[(3, 12, 12), float32], Tensor[(3, 12, 12), int16]) */;
  %406 = cast(meta[relay.Constant][28] /* ty=Tensor[(140), uint8] */, dtype="uint8") /* ty=Tensor[(140), uint8] */;
  %407 = reshape(%406, newshape=[5, 4, 7]) /* ty=Tensor[(5, 4, 7), uint8] */;
  %408 = @func_2370(%407) /* ty=(Tensor[(5, 4, 7), float64],) */;
  %409 = cast(%var_3636, dtype="int16") /* ty=Tensor[(154, 9), int16] */;
  %410 = cast(%var_3636, dtype="int16") /* ty=Tensor[(154, 9), int16] */;
  %411 = reshape(%409, newshape=[14, 9, 11]) /* ty=Tensor[(14, 9, 11), int16] */;
  %412 = reshape(%410, newshape=[14, 9, 11]) /* ty=Tensor[(14, 9, 11), int16] */;
  %413 = cast(%var_3640, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %414 = bitwise_and(%395, %396) /* ty=Tensor[(1080), int64] */;
  %415 = cast(%414, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %416 = reshape(%413, newshape=[9, 14, 10]) /* ty=Tensor[(9, 14, 10), bool] */;
  %417 = reshape(%415, newshape=[1080]) /* ty=Tensor[(1080), uint64] */;
  %418 = @func_1434(%416, %417) /* ty=(Tensor[(9, 14, 10), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64]) */;
  %419 = cast(%var_3573, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %420 = atanh(%419) /* ty=Tensor[(1080), float32] */;
  %421 = cast(%420, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %422 = %388.0;
  %423 = @func_708(%391, %392) /* ty=Tensor[(8, 15, 9), uint64] */;
  %424 = %401.0;
  %425 = %402.1;
  %426 = %405.0;
  %427 = %408.0;
  %428 = @func_3417(%411, %412) /* ty=Tensor[(14, 9, 11), bool] */;
  %429 = %418.2;
  %430 = atan(%421) /* ty=Tensor[(1080), float64] */;
  (%422, %423, %414, %424, %var_3587, %425, %426, %var_3623, %427, meta[relay.Constant][28] /* ty=Tensor[(140), uint8] */, %428, %var_3636, %429, %var_3640, %430)
}

def @func_3881(%var_3877: Tensor[(630), float32]) -> (Tensor[(2, 15, 6), bool], Tensor[(6, 15, 7), float32], Tensor[(630), float32]) {
  %431 = @func_3216() /* ty=(Tensor[(13, 6, 14), bool], Tensor[(2, 15, 6), bool], Tensor[(180), bool]) */;
  %432 = cast(%var_3877, dtype="float32") /* ty=Tensor[(630), float32] */;
  %433 = reshape(%432, newshape=[6, 15, 7]) /* ty=Tensor[(6, 15, 7), float32] */;
  %434 = %431.1;
  %435 = @func_3496(%433) /* ty=Tensor[(6, 15, 7), float32] */;
  (%434, %435, %var_3877)
}

def @func_4430(%var_4372: Tensor[(1260), bool], %var_4416: Tensor[(1092), uint64]) -> (Tensor[(2, 15, 6), bool], Tensor[(180), bool], Tensor[(770), float64], Tensor[(9, 4), float64], Tensor[(1260), bool], Tensor[(2, 4, 2), float64], Tensor[(140), uint8], Tensor[(1080), uint64], Tensor[(1092), uint64], Tensor[(432), float32], Tensor[(1386), int16]) {
  %436 = @func_3216() /* ty=(Tensor[(13, 6, 14), bool], Tensor[(2, 15, 6), bool], Tensor[(180), bool]) */;
  %437 = cast(meta[relay.Constant][29] /* ty=Tensor[(770), float64] */, dtype="float64") /* ty=Tensor[(770), float64] */;
  %438 = cast(meta[relay.Constant][30] /* ty=Tensor[(9, 4), float64] */, dtype="float64") /* ty=Tensor[(9, 4), float64] */;
  %439 = cast(%var_4372, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %440 = reshape(%437, newshape=[14, 11, 5]) /* ty=Tensor[(14, 11, 5), float64] */;
  %441 = reshape(%438, newshape=[18, 2]) /* ty=Tensor[(18, 2), float64] */;
  %442 = reshape(%439, newshape=[1260]) /* ty=Tensor[(1260), bool] */;
  %443 = @func_3026(%440, %441, %442) /* ty=(Tensor[(8, 15, 9), uint64], Tensor[(18, 2), float64], Tensor[(180), bool], Tensor[(1260), bool], Tensor[(14, 11, 5), float64]) */;
  %444 = @func_3260() /* ty=(Tensor[(2, 4, 2), float64],) */;
  %445 = cast(meta[relay.Constant][31] /* ty=Tensor[(1080), uint64] */, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %446 = cast(meta[relay.Constant][31] /* ty=Tensor[(1080), uint64] */, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %447 = cast(%var_4416, dtype="uint64") /* ty=Tensor[(1092), uint64] */;
  %448 = cast(meta[relay.Constant][32] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %449 = cast(meta[relay.Constant][33] /* ty=Tensor[(1386), int16] */, dtype="int16") /* ty=Tensor[(1386), int16] */;
  %450 = cast(%var_4372, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %451 = reshape(%445, newshape=[1080]) /* ty=Tensor[(1080), uint64] */;
  %452 = reshape(%446, newshape=[1080]) /* ty=Tensor[(1080), uint64] */;
  %453 = reshape(%447, newshape=[1092]) /* ty=Tensor[(1092), uint64] */;
  %454 = reshape(%448, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %455 = reshape(%449, newshape=[154, 9]) /* ty=Tensor[(154, 9), int16] */;
  %456 = reshape(%450, newshape=[1260]) /* ty=Tensor[(1260), bool] */;
  %457 = @func_3654(%451, %452, %453, %454, %455, %456) /* ty=(Tensor[(2, 4, 2), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), int64], Tensor[(13, 6, 14), bool], Tensor[(1092), uint64], Tensor[(2, 15, 6), bool], Tensor[(3, 12, 12), float32], Tensor[(432), float32], Tensor[(5, 4, 7), float64], Tensor[(140), uint8], Tensor[(14, 9, 11), bool], Tensor[(154, 9), int16], Tensor[(1080), uint64], Tensor[(1260), bool], Tensor[(1080), float64]) */;
  %458 = %436.1;
  %459 = %443.2;
  %460 = %444.0;
  %461 = %457.9;
  (%458, %459, meta[relay.Constant][29] /* ty=Tensor[(770), float64] */, meta[relay.Constant][30] /* ty=Tensor[(9, 4), float64] */, %var_4372, %460, %461, meta[relay.Constant][31] /* ty=Tensor[(1080), uint64] */, %var_4416, meta[relay.Constant][32] /* ty=Tensor[(432), float32] */, meta[relay.Constant][33] /* ty=Tensor[(1386), int16] */)
}

def @func_4132() -> (Tensor[(2, 15, 6), bool], Tensor[(13, 6, 14), bool]) {
  %462 = @func_3216() /* ty=(Tensor[(13, 6, 14), bool], Tensor[(2, 15, 6), bool], Tensor[(180), bool]) */;
  %463 = @func_3166() /* ty=(Tensor[(2, 4, 2), float64], Tensor[(13, 6, 14), bool], Tensor[(546, 2), uint64]) */;
  %464 = %462.1;
  %465 = %463.1;
  (%464, %465)
}

def @func_7727() -> Tensor[(6, 9, 12), float64] {
  %466 = cast(meta[relay.Constant][34] /* ty=Tensor[(6, 9, 12), float64] */, dtype="float64") /* ty=Tensor[(6, 9, 12), float64] */;
  asin(%466) /* ty=Tensor[(6, 9, 12), float64] */
}

def @func_4669() -> (Tensor[(13, 6, 14), bool],) {
  %467 = @func_4132() /* ty=(Tensor[(2, 15, 6), bool], Tensor[(13, 6, 14), bool]) */;
  %468 = %467.1;
  (%468,)
}

def @func_7697(%var_7648: Tensor[(2, 4, 2), float64]) -> (Tensor[(2, 4, 2), float32], Tensor[(2, 4, 2), float64], Tensor[(2, 4, 2), float64], Tensor[(1386), int16], Tensor[(14, 9, 11), float64]) {
  %469 = @func_6760() /* ty=Tensor[(2, 4, 2), float64] */;
  %470 = cast(%var_7648, dtype="float32") /* ty=Tensor[(2, 4, 2), float32] */;
  %471 = shape_of(%469, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(%469, dtype="float32") /* ty=Tensor[(2, 4, 2), float32] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %474 = @func_2928() /* ty=(Tensor[(2, 4, 2), float64],) */;
  %475 = @func_3260() /* ty=(Tensor[(2, 4, 2), float64],) */;
  %476 = cast(meta[relay.Constant][35] /* ty=Tensor[(1386), int16] */, dtype="int16") /* ty=Tensor[(1386), int16] */;
  %477 = cast(meta[relay.Constant][35] /* ty=Tensor[(1386), int16] */, dtype="int16") /* ty=Tensor[(1386), int16] */;
  %478 = reshape(%476, newshape=[14, 9, 11]) /* ty=Tensor[(14, 9, 11), int16] */;
  %479 = reshape(%477, newshape=[14, 9, 11]) /* ty=Tensor[(14, 9, 11), int16] */;
  %480 = @func_3417(%478, %479) /* ty=Tensor[(14, 9, 11), bool] */;
  %481 = cast(%480, dtype="float64") /* ty=Tensor[(14, 9, 11), float64] */;
  %482 = floor_mod(%472, %473) /* ty=Tensor[(2, 4, 2), float32] */;
  %483 = %474.0;
  %484 = %475.0;
  %485 = cos(%481) /* ty=Tensor[(14, 9, 11), float64] */;
  (%482, %483, %484, meta[relay.Constant][35] /* ty=Tensor[(1386), int16] */, %485)
}

def @func_5067() -> Tensor[(546, 2), uint64] {
  %486 = @func_3166() /* ty=(Tensor[(2, 4, 2), float64], Tensor[(13, 6, 14), bool], Tensor[(546, 2), uint64]) */;
  %486.2
}

def @main(%var_7826: Tensor[(1408), float32]) -> (Tensor[(2, 4, 2), float64], Tensor[(1408), float64]) {
  %487 = @func_4750() /* ty=(Tensor[(2, 4, 2), float64],) */;
  %488 = cast(%var_7826, dtype="float32") /* ty=Tensor[(1408), float32] */;
  %489 = reshape(%488, newshape=[11, 8, 16]) /* ty=Tensor[(11, 8, 16), float32] */;
  %490 = @func_3985(%489) /* ty=(Tensor[(11, 8, 16), float32],) */;
  %491 = %490.0;
  %492 = cast(%491, dtype="bool") /* ty=Tensor[(11, 8, 16), bool] */;
  %493 = shape_of(%var_7826, dtype="int32") /* ty=Tensor[(1), int32] */;
  %494 = cast(%var_7826, dtype="bool") /* ty=Tensor[(1408), bool] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?), bool] */;
  %496 = greater_equal(%494, %495) /* ty=Tensor[(1408), bool] */;
  %497 = cast(%496, dtype="float64") /* ty=Tensor[(1408), float64] */;
  %498 = %487.0;
  %499 = asin(%497) /* ty=Tensor[(1408), float64] */;
  (%498, %499)
}

def @func_6105() -> (Tensor[(2, 4, 2), float64], Tensor[(6, 15, 7), float32], Tensor[(630), float32]) {
  %500 = cast(meta[relay.Constant][36] /* ty=Tensor[(630), float32] */, dtype="float32") /* ty=Tensor[(630), float32] */;
  %501 = reshape(%500, newshape=[6, 15, 7]) /* ty=Tensor[(6, 15, 7), float32] */;
  %502 = @func_3069() /* ty=Tensor[(2, 4, 2), float64] */;
  %503 = @func_3496(%501) /* ty=Tensor[(6, 15, 7), float32] */;
  (%502, %503, meta[relay.Constant][36] /* ty=Tensor[(630), float32] */)
}

def @func_6477(%var_6428: float32, %var_6447: Tensor[(432), float32], %var_6449: Tensor[(65, 4), float32]) -> (Tensor[(2, 2, 1), float32], Tensor[(8), int8], Tensor[(630), float32], Tensor[(3, 12, 12), int16], Tensor[(432), float32], Tensor[(65, 4), int64], Tensor[(630), float32], Tensor[(2, 15, 6), bool]) {
  %504 = cast(%var_6428, dtype="float32") /* ty=float32 */;
  %505 = cast(meta[relay.Constant][37] /* ty=Tensor[(2, 2, 1), float32] */, dtype="float32") /* ty=Tensor[(2, 2, 1), float32] */;
  %506 = cast(%var_6447, dtype="float32") /* ty=Tensor[(432), float32] */;
  %507 = reshape(%506, newshape=[3, 12, 12]) /* ty=Tensor[(3, 12, 12), float32] */;
  %508 = @func_679(%507) /* ty=(Tensor[(3, 12, 12), float32], Tensor[(3, 12, 12), int16]) */;
  %509 = cast(meta[relay.Constant][38] /* ty=Tensor[(8), int8] */, dtype="int8") /* ty=Tensor[(8), int8] */;
  %510 = cast(meta[relay.Constant][38] /* ty=Tensor[(8), int8] */, dtype="int8") /* ty=Tensor[(8), int8] */;
  %511 = cast(meta[relay.Constant][39] /* ty=Tensor[(630), float32] */, dtype="float32") /* ty=Tensor[(630), float32] */;
  %512 = reshape(%509, newshape=[8, 1]) /* ty=Tensor[(8, 1), int8] */;
  %513 = reshape(%510, newshape=[8, 1]) /* ty=Tensor[(8, 1), int8] */;
  %514 = reshape(%511, newshape=[10, 63]) /* ty=Tensor[(10, 63), float32] */;
  %515 = @func_4733(%512, %513, %514) /* ty=(Tensor[(8, ?), int8], Tensor[(2, 15, 6), bool], Tensor[(10, 63), float32], Tensor[(65, 4), float64], Tensor[(2, 15, 6), bool]) */;
  %516 = %515.3;
  %517 = cast(%516, dtype="float32") /* ty=Tensor[(65, 4), float32] */;
  %518 = sigmoid(%517) /* ty=Tensor[(65, 4), float32] */;
  %519 = cast(%var_6449, dtype="float64") /* ty=Tensor[(65, 4), float64] */;
  %520 = shape_of(%518, dtype="int32") /* ty=Tensor[(2), int32] */;
  %521 = cast(%518, dtype="float64") /* ty=Tensor[(65, 4), float64] */;
  %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %523 = divide(%521, %522) /* ty=Tensor[(65, 4), float64] */;
  %524 = cast(meta[relay.Constant][40] /* ty=Tensor[(65, 4), float64] */, dtype="int64") /* ty=Tensor[(65, 4), int64] */;
  %525 = shape_of(%523, dtype="int32") /* ty=Tensor[(2), int32] */;
  %526 = cast(%523, dtype="int64") /* ty=Tensor[(65, 4), int64] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %528 = cast(meta[relay.Constant][39] /* ty=Tensor[(630), float32] */, dtype="float32") /* ty=Tensor[(630), float32] */;
  %529 = reshape(%528, newshape=[630]) /* ty=Tensor[(630), float32] */;
  %530 = @func_3881(%529) /* ty=(Tensor[(2, 15, 6), bool], Tensor[(6, 15, 7), float32], Tensor[(630), float32]) */;
  %531 = @func_5434() /* ty=(Tensor[(2, 15, 6), bool],) */;
  %532 = mod(%504, %505) /* ty=Tensor[(2, 2, 1), float32] */;
  %533 = %508.1;
  %534 = bitwise_xor(%526, %527) /* ty=Tensor[(65, 4), int64] */;
  %535 = %530.2;
  %536 = %531.0;
  (%532, meta[relay.Constant][38] /* ty=Tensor[(8), int8] */, meta[relay.Constant][39] /* ty=Tensor[(630), float32] */, %533, %var_6447, %534, %535, %536)
}

def @func_2370(%var_2347: Tensor[(5, 4, 7), uint8]) -> (Tensor[(5, 4, 7), float64],) {
  %537 = cast(%var_2347, dtype="uint8") /* ty=Tensor[(5, 4, 7), uint8] */;
  %538 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(5, 4, 7), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %539 = cast(meta[relay.Constant][41] /* ty=Tensor[(5, 4, 7), uint8] */, dtype="uint8") /* ty=Tensor[(5, 4, 7), uint8] */;
  %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %541 = right_shift(%539, %540) /* ty=Tensor[(5, 4, 7), uint8] */;
  %542 = cast(%541, dtype="float32") /* ty=Tensor[(5, 4, 7), float32] */;
  %543 = acosh(%542) /* ty=Tensor[(5, 4, 7), float32] */;
  %544 = cast(%var_2347, dtype="uint16") /* ty=Tensor[(5, 4, 7), uint16] */;
  %545 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(5, 4, 7), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %546 = cast(meta[relay.Constant][41] /* ty=Tensor[(5, 4, 7), uint8] */, dtype="uint16") /* ty=Tensor[(5, 4, 7), uint16] */;
  %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %548 = left_shift(%546, %547) /* ty=Tensor[(5, 4, 7), uint16] */;
  %549 = cast(%548, dtype="float64") /* ty=Tensor[(5, 4, 7), float64] */;
  %550 = shape_of(%543, dtype="int32") /* ty=Tensor[(3), int32] */;
  %551 = cast(%543, dtype="float64") /* ty=Tensor[(5, 4, 7), float64] */;
  %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %553 = divide(%551, %552) /* ty=Tensor[(5, 4, 7), float64] */;
  (%553,)
}

def @func_7085() -> Tensor[(546, 2), float32] {
  %554 = @func_5067() /* ty=Tensor[(546, 2), uint64] */;
  %555 = cast(%554, dtype="float32") /* ty=Tensor[(546, 2), float32] */;
  exp(%555) /* ty=Tensor[(546, 2), float32] */
}

def @func_7258() -> (Tensor[(546, 2), uint64],) {
  %556 = @func_5195() /* ty=Tensor[(546, 2), uint64] */;
  (%556,)
}

def @func_5169() -> Tensor[(5, 4, 7), float64] {
  %557 = @func_3972() /* ty=(Tensor[(2, 10, 13), float32], Tensor[(65, 4), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64], Tensor[(5, 4, 7), float64], Tensor[(140), uint8], Tensor[(2, 4, 2), float64], Tensor[(5, 4, 7), float64]) */;
  %557.4
}

def @func_3496(%var_3490: Tensor[(6, 15, 7), float32]) -> Tensor[(6, 15, 7), float32] {
  %558 = cast(%var_3490, dtype="float32") /* ty=Tensor[(6, 15, 7), float32] */;
  %559 = cosh(%558) /* ty=Tensor[(6, 15, 7), float32] */;
  %560 = cast(%559, dtype="float32") /* ty=Tensor[(6, 15, 7), float32] */;
  sigmoid(%560) /* ty=Tensor[(6, 15, 7), float32] */
}

def @func_3402(%var_3384: Tensor[(36), float64], %var_3385: Tensor[(1260), bool]) -> (Tensor[(2, 4, 2), float32], Tensor[(2, 15, 6), bool], Tensor[(180), bool], Tensor[(2, 4, 2), float64], Tensor[(8, 15, 9), uint8], Tensor[(36), float64], Tensor[(1260), bool], Tensor[(2, 4, 2), uint8]) {
  %561 = @func_3069() /* ty=Tensor[(2, 4, 2), float64] */;
  %562 = cast(%561, dtype="float32") /* ty=Tensor[(2, 4, 2), float32] */;
  %563 = cast(meta[relay.Constant][42] /* ty=Tensor[(180), bool] */, dtype="bool") /* ty=Tensor[(180), bool] */;
  %564 = cast(meta[relay.Constant][42] /* ty=Tensor[(180), bool] */, dtype="bool") /* ty=Tensor[(180), bool] */;
  %565 = reshape(%563, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), bool] */;
  %566 = reshape(%564, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), bool] */;
  %567 = cast(%var_3384, dtype="float64") /* ty=Tensor[(36), float64] */;
  %568 = @func_85(%565, %566) /* ty=Tensor[(2, 15, 6), bool] */;
  %569 = cast(%568, dtype="bool") /* ty=Tensor[(2, 15, 6), bool] */;
  %570 = cast(%var_3385, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %571 = reshape(%567, newshape=[2, 2, 9]) /* ty=Tensor[(2, 2, 9), float64] */;
  %572 = reshape(%569, newshape=[6, 30]) /* ty=Tensor[(6, 30), bool] */;
  %573 = reshape(%570, newshape=[90, 14]) /* ty=Tensor[(90, 14), bool] */;
  %574 = @func_1578(%571, %572, %573) /* ty=(Tensor[(2, 2, 9), float64], Tensor[(8, 15, 9), uint64], Tensor[(8, 15, 9), uint64], Tensor[(2, 15, 6), bool], Tensor[(6, 30), bool], Tensor[(9, 14, 10), float64], Tensor[(90, 14), bool], Tensor[(8, 15, 9), uint8], Tensor[(540, 2), float32]) */;
  %575 = cast(%561, dtype="float64") /* ty=Tensor[(2, 4, 2), float64] */;
  %576 = cosh(%575) /* ty=Tensor[(2, 4, 2), float64] */;
  %577 = cast(%561, dtype="float32") /* ty=Tensor[(2, 4, 2), float32] */;
  %578 = sinh(%577) /* ty=Tensor[(2, 4, 2), float32] */;
  %579 = cast(%578, dtype="uint8") /* ty=Tensor[(2, 4, 2), uint8] */;
  %580 = shape_of(%576, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(%576, dtype="uint8") /* ty=Tensor[(2, 4, 2), uint8] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %583 = atanh(%562) /* ty=Tensor[(2, 4, 2), float32] */;
  %584 = @func_3069() /* ty=Tensor[(2, 4, 2), float64] */;
  %585 = %574.7;
  %586 = subtract(%581, %582) /* ty=Tensor[(2, 4, 2), uint8] */;
  (%583, %568, meta[relay.Constant][42] /* ty=Tensor[(180), bool] */, %584, %585, %var_3384, %var_3385, %586)
}

def @func_6547() -> (Tensor[(9, 3, 9), int8],) {
  %587 = cast(meta[relay.Constant][44] /* ty=Tensor[(9, 3, 9), int8] */, dtype="int8") /* ty=Tensor[(9, 3, 9), int8] */;
  %588 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(9, 3, 9), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %589 = cast(meta[relay.Constant][43] /* ty=Tensor[(9, 3, 9), int8] */, dtype="int8") /* ty=Tensor[(9, 3, 9), int8] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %591 = multiply(%589, %590) /* ty=Tensor[(9, 3, 9), int8] */;
  (%591,)
}

def @func_6531(%var_6521: uint8, %var_6522: Tensor[(4, 16, 1), uint8], %var_6528: Tensor[(315), float32], %var_6529: Tensor[(36), float64]) -> (Tensor[(4, 16, 1), uint8], Tensor[(3, 12, 12), float32], Tensor[(400), float32], Tensor[(315), float32], Tensor[(36), float64]) {
  %592 = cast(%var_6521, dtype="uint8") /* ty=uint8 */;
  %593 = cast(%var_6522, dtype="uint8") /* ty=Tensor[(4, 16, 1), uint8] */;
  %594 = cast(meta[relay.Constant][45] /* ty=Tensor[(400), float32] */, dtype="float32") /* ty=Tensor[(400), float32] */;
  %595 = cast(meta[relay.Constant][45] /* ty=Tensor[(400), float32] */, dtype="float32") /* ty=Tensor[(400), float32] */;
  %596 = cast(%var_6528, dtype="float32") /* ty=Tensor[(315), float32] */;
  %597 = cast(%var_6529, dtype="float64") /* ty=Tensor[(36), float64] */;
  %598 = reshape(%594, newshape=[10, 8, 5]) /* ty=Tensor[(10, 8, 5), float32] */;
  %599 = reshape(%595, newshape=[10, 8, 5]) /* ty=Tensor[(10, 8, 5), float32] */;
  %600 = reshape(%596, newshape=[1, 315]) /* ty=Tensor[(1, 315), float32] */;
  %601 = reshape(%597, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %602 = @func_2336(%598, %599, %600, %601) /* ty=(Tensor[(8, 15, 9), uint64], Tensor[(1260), bool], Tensor[(270, 4), uint64], Tensor[(10, 8, 5), float64], Tensor[(3, 12, 12), float32], Tensor[(12, 36), float32], Tensor[(9, 5, 7), float32], Tensor[(1, 315), float32], Tensor[(10, 8, 5), float64], Tensor[(8, 15, 9), uint64], Tensor[(10, 8, 5), float64], Tensor[(3, 12, 12), float32], Tensor[(10, 8, 5), float32], Tensor[(9, 14, 10), float64], Tensor[(6, 30), bool], Tensor[(36), float64], Tensor[(6, 30), bool], Tensor[(8, 15, 9), uint64]) */;
  %603 = logical_xor(%592, %593) /* ty=Tensor[(4, 16, 1), uint8] */;
  %604 = %602.11;
  (%603, %604, meta[relay.Constant][45] /* ty=Tensor[(400), float32] */, %var_6528, %var_6529)
}

def @func_2752(%var_2737: Tensor[(13, 6, 14), uint64], %var_2738: Tensor[(13, 6, 14), uint64]) -> (Tensor[(13, 6, 14), bool],) {
  %605 = cast(%var_2738, dtype="bool") /* ty=Tensor[(13, 6, 14), bool] */;
  %606 = shape_of(%var_2737, dtype="int32") /* ty=Tensor[(3), int32] */;
  %607 = cast(%var_2737, dtype="bool") /* ty=Tensor[(13, 6, 14), bool] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %609 = greater(%607, %608) /* ty=Tensor[(13, 6, 14), bool] */;
  (%609,)
}

def @func_5003(%var_4997: Tensor[(2, 15, 6), bool]) -> Tensor[(2, 15, 6), bool] {
  %610 = @func_4132() /* ty=(Tensor[(2, 15, 6), bool], Tensor[(13, 6, 14), bool]) */;
  %611 = %610.0;
  %612 = cast(%var_4997, dtype="bool") /* ty=Tensor[(2, 15, 6), bool] */;
  %613 = shape_of(%611, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(%611, dtype="bool") /* ty=Tensor[(2, 15, 6), bool] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%614, %615) /* ty=Tensor[(2, 15, 6), bool] */
}

def @func_3260() -> (Tensor[(2, 4, 2), float64],) {
  %616 = @func_3069() /* ty=Tensor[(2, 4, 2), float64] */;
  (%616,)
}

def @func_3026(%var_2952: Tensor[(14, 11, 5), float64], %var_2964: Tensor[(18, 2), float64], %var_2966: Tensor[(1260), bool]) -> (Tensor[(8, 15, 9), uint64], Tensor[(18, 2), float64], Tensor[(180), bool], Tensor[(1260), bool], Tensor[(14, 11, 5), float64]) {
  %617 = cast(%var_2964, dtype="float64") /* ty=Tensor[(18, 2), float64] */;
  %618 = cast(meta[relay.Constant][46] /* ty=Tensor[(180), bool] */, dtype="bool") /* ty=Tensor[(180), bool] */;
  %619 = cast(%var_2966, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %620 = reshape(%617, newshape=[2, 2, 9]) /* ty=Tensor[(2, 2, 9), float64] */;
  %621 = reshape(%618, newshape=[6, 30]) /* ty=Tensor[(6, 30), bool] */;
  %622 = reshape(%619, newshape=[90, 14]) /* ty=Tensor[(90, 14), bool] */;
  %623 = @func_1578(%620, %621, %622) /* ty=(Tensor[(2, 2, 9), float64], Tensor[(8, 15, 9), uint64], Tensor[(8, 15, 9), uint64], Tensor[(2, 15, 6), bool], Tensor[(6, 30), bool], Tensor[(9, 14, 10), float64], Tensor[(90, 14), bool], Tensor[(8, 15, 9), uint8], Tensor[(540, 2), float32]) */;
  %624 = cast(%var_2952, dtype="bool") /* ty=Tensor[(14, 11, 5), bool] */;
  %625 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(14, 11, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %626 = cast(meta[relay.Constant][47] /* ty=Tensor[(14, 11, 5), float64] */, dtype="bool") /* ty=Tensor[(14, 11, 5), bool] */;
  %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %628 = greater_equal(%626, %627) /* ty=Tensor[(14, 11, 5), bool] */;
  %629 = cast(%628, dtype="float32") /* ty=Tensor[(14, 11, 5), float32] */;
  %630 = tan(%629) /* ty=Tensor[(14, 11, 5), float32] */;
  %631 = cast(%630, dtype="float64") /* ty=Tensor[(14, 11, 5), float64] */;
  %632 = %623.2;
  %633 = cosh(%631) /* ty=Tensor[(14, 11, 5), float64] */;
  (%632, %var_2964, meta[relay.Constant][46] /* ty=Tensor[(180), bool] */, %var_2966, %633)
}

def @func_7458() -> (Tensor[(5, 4, 7), float64],) {
  %634 = @func_5169() /* ty=Tensor[(5, 4, 7), float64] */;
  (%634,)
}

def @func_7569(%var_7514: Tensor[(5, 4, 7), float64], %var_7536: Tensor[(180), bool]) -> (Tensor[(5, 4, 7), int8], Tensor[(8, 15, 9), float64], Tensor[(1120), float32], Tensor[(180), bool], Tensor[(1080), uint64], Tensor[(5, 4, 7), float64]) {
  %635 = @func_5169() /* ty=Tensor[(5, 4, 7), float64] */;
  %636 = cast(%var_7514, dtype="int8") /* ty=Tensor[(5, 4, 7), int8] */;
  %637 = shape_of(%635, dtype="int32") /* ty=Tensor[(3), int32] */;
  %638 = cast(%635, dtype="int8") /* ty=Tensor[(5, 4, 7), int8] */;
  %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %640 = cast(meta[relay.Constant][48] /* ty=Tensor[(1120), float32] */, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %641 = cast(%var_7536, dtype="bool") /* ty=Tensor[(180), bool] */;
  %642 = reshape(%640, newshape=[10, 16, 7]) /* ty=Tensor[(10, 16, 7), float32] */;
  %643 = reshape(%641, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), bool] */;
  %644 = @func_5705(%642, %643) /* ty=(Tensor[(10, 16, 7), float32], Tensor[(8, 15, 9), float64], Tensor[(2, 15, 6), int64]) */;
  %645 = %644.1;
  %646 = cast(%645, dtype="uint64") /* ty=Tensor[(8, 15, 9), uint64] */;
  %647 = reshape(%646, newshape=[1080]) /* ty=Tensor[(1080), uint64] */;
  %648 = @func_3844(%647) /* ty=(Tensor[(2, 4, 2), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64]) */;
  %649 = cast(%var_7514, dtype="float32") /* ty=Tensor[(5, 4, 7), float32] */;
  %650 = shape_of(%635, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(%635, dtype="float32") /* ty=Tensor[(5, 4, 7), float32] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %653 = floor_divide(%651, %652) /* ty=Tensor[(5, 4, 7), float32] */;
  %654 = cast(%653, dtype="float64") /* ty=Tensor[(5, 4, 7), float64] */;
  %655 = bitwise_xor(%638, %639) /* ty=Tensor[(5, 4, 7), int8] */;
  %656 = %648.2;
  %657 = rsqrt(%654) /* ty=Tensor[(5, 4, 7), float64] */;
  (%655, %645, meta[relay.Constant][48] /* ty=Tensor[(1120), float32] */, %var_7536, %656, %657)
}

def @func_4483(%var_4477: Tensor[(2, 15, 6), bool]) -> (Tensor[(2, 15, 6), int8],) {
  %658 = @func_3216() /* ty=(Tensor[(13, 6, 14), bool], Tensor[(2, 15, 6), bool], Tensor[(180), bool]) */;
  %659 = %658.1;
  %660 = cast(%var_4477, dtype="int8") /* ty=Tensor[(2, 15, 6), int8] */;
  %661 = shape_of(%659, dtype="int32") /* ty=Tensor[(3), int32] */;
  %662 = cast(%659, dtype="int8") /* ty=Tensor[(2, 15, 6), int8] */;
  %663 = dyn.reshape(%660, %661, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %664 = bitwise_and(%662, %663) /* ty=Tensor[(2, 15, 6), int8] */;
  (%664,)
}

def @func_7017(%var_7000: Tensor[(1080), uint64]) -> (Tensor[(13, 6, 14), float32], Tensor[(3, 12, 12), float32], Tensor[(1080), uint64], Tensor[(11, 4, 14), float64], Tensor[(616), float64], Tensor[(1080), uint64]) {
  %665 = @func_6841() /* ty=(Tensor[(13, 6, 14), float32],) */;
  %666 = cast(%var_7000, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %667 = reshape(%666, newshape=[1080]) /* ty=Tensor[(1080), uint64] */;
  %668 = @func_6710(%667) /* ty=(Tensor[(2, 4, 2), float64], Tensor[(2, 4, 2), float64], Tensor[(2, 4, 2), float64], Tensor[(8, 15, 9), uint64], Tensor[(180), bool], Tensor[(1080), uint64], Tensor[(3, 12, 12), float32], Tensor[(432), float32], Tensor[(8, 15, 9), uint64]) */;
  %669 = cast(meta[relay.Constant][49] /* ty=Tensor[(616), float64] */, dtype="float64") /* ty=Tensor[(616), float64] */;
  %670 = reshape(%669, newshape=[11, 4, 14]) /* ty=Tensor[(11, 4, 14), float64] */;
  %671 = cast(%var_7000, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %672 = reshape(%671, newshape=[1080]) /* ty=Tensor[(1080), uint64] */;
  %673 = @func_3844(%672) /* ty=(Tensor[(2, 4, 2), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64]) */;
  %674 = %665.0;
  %675 = %668.6;
  %676 = @func_4253(%670) /* ty=Tensor[(11, 4, 14), float64] */;
  %677 = %673.2;
  (%674, %675, %var_7000, %676, meta[relay.Constant][49] /* ty=Tensor[(616), float64] */, %677)
}

def @func_1578(%var_1512: Tensor[(2, 2, 9), float64], %var_1542: Tensor[(6, 30), bool], %var_1558: Tensor[(90, 14), bool]) -> (Tensor[(2, 2, 9), float64], Tensor[(8, 15, 9), uint64], Tensor[(8, 15, 9), uint64], Tensor[(2, 15, 6), bool], Tensor[(6, 30), bool], Tensor[(9, 14, 10), float64], Tensor[(90, 14), bool], Tensor[(8, 15, 9), uint8], Tensor[(540, 2), float32]) {
  %678 = cast(%var_1512, dtype="float64") /* ty=Tensor[(2, 2, 9), float64] */;
  %679 = cast(meta[relay.Constant][50] /* ty=Tensor[(540, 2), uint64] */, dtype="uint64") /* ty=Tensor[(540, 2), uint64] */;
  %680 = cast(meta[relay.Constant][50] /* ty=Tensor[(540, 2), uint64] */, dtype="uint64") /* ty=Tensor[(540, 2), uint64] */;
  %681 = reshape(%679, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %682 = reshape(%680, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %683 = cast(meta[relay.Constant][50] /* ty=Tensor[(540, 2), uint64] */, dtype="uint64") /* ty=Tensor[(540, 2), uint64] */;
  %684 = @func_708(%681, %682) /* ty=Tensor[(8, 15, 9), uint64] */;
  %685 = cast(%684, dtype="uint64") /* ty=Tensor[(8, 15, 9), uint64] */;
  %686 = reshape(%683, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %687 = reshape(%685, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %688 = cast(%var_1542, dtype="bool") /* ty=Tensor[(6, 30), bool] */;
  %689 = cast(%var_1542, dtype="bool") /* ty=Tensor[(6, 30), bool] */;
  %690 = reshape(%688, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), bool] */;
  %691 = reshape(%689, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), bool] */;
  %692 = cast(%var_1558, dtype="bool") /* ty=Tensor[(90, 14), bool] */;
  %693 = cast(%684, dtype="uint64") /* ty=Tensor[(8, 15, 9), uint64] */;
  %694 = @func_708(%686, %687) /* ty=Tensor[(8, 15, 9), uint64] */;
  %695 = cast(%694, dtype="uint64") /* ty=Tensor[(8, 15, 9), uint64] */;
  %696 = reshape(%693, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %697 = reshape(%695, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %698 = @func_708(%696, %697) /* ty=Tensor[(8, 15, 9), uint64] */;
  %699 = cast(%698, dtype="uint64") /* ty=Tensor[(8, 15, 9), uint64] */;
  %700 = reshape(%692, newshape=[9, 14, 10]) /* ty=Tensor[(9, 14, 10), bool] */;
  %701 = reshape(%699, newshape=[1080]) /* ty=Tensor[(1080), uint64] */;
  %702 = @func_1434(%700, %701) /* ty=(Tensor[(9, 14, 10), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64]) */;
  %703 = cast(meta[relay.Constant][50] /* ty=Tensor[(540, 2), uint64] */, dtype="float32") /* ty=Tensor[(540, 2), float32] */;
  %704 = log10(%703) /* ty=Tensor[(540, 2), float32] */;
  %705 = cast(%704, dtype="uint8") /* ty=Tensor[(540, 2), uint8] */;
  %706 = shape_of(%698, dtype="int32") /* ty=Tensor[(3), int32] */;
  %707 = cast(%698, dtype="uint8") /* ty=Tensor[(8, 15, 9), uint8] */;
  %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %709 = cast(%704, dtype="float32") /* ty=Tensor[(540, 2), float32] */;
  %710 = sinh(%678) /* ty=Tensor[(2, 2, 9), float64] */;
  %711 = @func_85(%690, %691) /* ty=Tensor[(2, 15, 6), bool] */;
  %712 = %702.0;
  %713 = bitwise_xor(%707, %708) /* ty=Tensor[(8, 15, 9), uint8] */;
  %714 = acos(%709) /* ty=Tensor[(540, 2), float32] */;
  (%710, %684, %694, %711, %var_1542, %712, %var_1558, %713, %714)
}

def @func_3844(%var_3839: Tensor[(1080), uint64]) -> (Tensor[(2, 4, 2), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64]) {
  %715 = @func_2928() /* ty=(Tensor[(2, 4, 2), float64],) */;
  %716 = cast(%var_3839, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %717 = cast(%var_3839, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %718 = reshape(%716, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %719 = reshape(%717, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %720 = %715.0;
  %721 = @func_708(%718, %719) /* ty=Tensor[(8, 15, 9), uint64] */;
  (%720, %721, %var_3839)
}

def @func_5644(%var_5628: Tensor[(180), bool]) -> (Tensor[(2, 4, 2), float64], Tensor[(9, 5, 7), float32], Tensor[(315), float32], Tensor[(2, 15, 6), bool], Tensor[(180), bool], Tensor[(180), bool]) {
  %722 = @func_4750() /* ty=(Tensor[(2, 4, 2), float64],) */;
  %723 = cast(meta[relay.Constant][51] /* ty=Tensor[(315), float32] */, dtype="float32") /* ty=Tensor[(315), float32] */;
  %724 = reshape(%723, newshape=[9, 5, 7]) /* ty=Tensor[(9, 5, 7), float32] */;
  %725 = @func_1776(%724) /* ty=(Tensor[(9, 5, 7), float32], Tensor[(3, 12, 12), float32], Tensor[(432), float32]) */;
  %726 = cast(%var_5628, dtype="bool") /* ty=Tensor[(180), bool] */;
  %727 = reshape(%726, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), bool] */;
  %728 = @func_4600() /* ty=(Tensor[(2, 15, 6), int8], Tensor[(180), bool], Tensor[(8, 15, 9), float64], Tensor[(14, 44), float64], Tensor[(2, 4, 2), float64]) */;
  %729 = %722.0;
  %730 = %725.0;
  %731 = @func_5003(%727) /* ty=Tensor[(2, 15, 6), bool] */;
  %732 = %728.1;
  (%729, %730, meta[relay.Constant][51] /* ty=Tensor[(315), float32] */, %731, %var_5628, %732)
}

def @func_4733(%var_4712: Tensor[(8, 1), int8], %var_4713: Tensor[(8, 1), int8], %var_4718: Tensor[(10, 63), float32]) -> (Tensor[(8, ?), int8], Tensor[(2, 15, 6), bool], Tensor[(10, 63), float32], Tensor[(65, 4), float64], Tensor[(2, 15, 6), bool]) {
  %733 = cast(%var_4713, dtype="int8") /* ty=Tensor[(8, 1), int8] */;
  %734 = shape_of(%var_4712, dtype="int32") /* ty=Tensor[(2), int32] */;
  %735 = cast(%var_4712, dtype="int8") /* ty=Tensor[(8, 1), int8] */;
  %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %737 = cast(%var_4718, dtype="float32") /* ty=Tensor[(10, 63), float32] */;
  %738 = reshape(%737, newshape=[630]) /* ty=Tensor[(630), float32] */;
  %739 = @func_3881(%738) /* ty=(Tensor[(2, 15, 6), bool], Tensor[(6, 15, 7), float32], Tensor[(630), float32]) */;
  %740 = @func_3972() /* ty=(Tensor[(2, 10, 13), float32], Tensor[(65, 4), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64], Tensor[(5, 4, 7), float64], Tensor[(140), uint8], Tensor[(2, 4, 2), float64], Tensor[(5, 4, 7), float64]) */;
  %741 = %739.0;
  %742 = cast(%741, dtype="bool") /* ty=Tensor[(2, 15, 6), bool] */;
  %743 = cast(%741, dtype="bool") /* ty=Tensor[(2, 15, 6), bool] */;
  %744 = reshape(%742, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), bool] */;
  %745 = reshape(%743, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), bool] */;
  %746 = multiply(%735, %736) /* ty=Tensor[(8, ?), int8] */;
  %747 = %740.1;
  %748 = @func_85(%744, %745) /* ty=Tensor[(2, 15, 6), bool] */;
  (%746, %741, %var_4718, %747, %748)
}

def @func_5195() -> Tensor[(546, 2), uint64] {
  @func_5067() /* ty=Tensor[(546, 2), uint64] */
}

def @func_6404(%var_6356: Tensor[(2, 15, 6), bool], %var_6398: Tensor[(1080), uint64]) -> (Tensor[(2, 15, 6), bool], Tensor[(13, 6, 14), bool], Tensor[(2, 15, 6), int8], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64]) {
  %749 = @func_3216() /* ty=(Tensor[(13, 6, 14), bool], Tensor[(2, 15, 6), bool], Tensor[(180), bool]) */;
  %750 = %749.1;
  %751 = cast(%var_6356, dtype="float64") /* ty=Tensor[(2, 15, 6), float64] */;
  %752 = shape_of(%750, dtype="int32") /* ty=Tensor[(3), int32] */;
  %753 = cast(%750, dtype="float64") /* ty=Tensor[(2, 15, 6), float64] */;
  %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %755 = floor_mod(%753, %754) /* ty=Tensor[(2, 15, 6), float64] */;
  %756 = cast(%var_6356, dtype="bool") /* ty=Tensor[(2, 15, 6), bool] */;
  %757 = shape_of(%755, dtype="int32") /* ty=Tensor[(3), int32] */;
  %758 = cast(%755, dtype="bool") /* ty=Tensor[(2, 15, 6), bool] */;
  %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %760 = @func_4669() /* ty=(Tensor[(13, 6, 14), bool],) */;
  %761 = cast(%750, dtype="float32") /* ty=Tensor[(2, 15, 6), float32] */;
  %762 = asinh(%761) /* ty=Tensor[(2, 15, 6), float32] */;
  %763 = cast(%755, dtype="int8") /* ty=Tensor[(2, 15, 6), int8] */;
  %764 = shape_of(%762, dtype="int32") /* ty=Tensor[(3), int32] */;
  %765 = cast(%762, dtype="int8") /* ty=Tensor[(2, 15, 6), int8] */;
  %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %767 = cast(%var_6398, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %768 = cast(%var_6398, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %769 = reshape(%767, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %770 = reshape(%768, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %771 = equal(%758, %759) /* ty=Tensor[(2, 15, 6), bool] */;
  %772 = %760.0;
  %773 = bitwise_or(%765, %766) /* ty=Tensor[(2, 15, 6), int8] */;
  %774 = @func_708(%769, %770) /* ty=Tensor[(8, 15, 9), uint64] */;
  (%771, %772, %773, %774, %var_6398)
}

def @func_4294(%var_4287: Tensor[(616), float64]) -> (Tensor[(8, 15, 9), float64], Tensor[(11, 4, 14), float64], Tensor[(616), float64]) {
  %775 = @func_3972() /* ty=(Tensor[(2, 10, 13), float32], Tensor[(65, 4), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64], Tensor[(5, 4, 7), float64], Tensor[(140), uint8], Tensor[(2, 4, 2), float64], Tensor[(5, 4, 7), float64]) */;
  %776 = %775.2;
  %777 = cast(meta[relay.Constant][52] /* ty=Tensor[(8, 15, 9), uint64] */, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
  %778 = shape_of(%776, dtype="int32") /* ty=Tensor[(3), int32] */;
  %779 = cast(%776, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
  %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %781 = cast(%var_4287, dtype="float64") /* ty=Tensor[(616), float64] */;
  %782 = reshape(%781, newshape=[11, 4, 14]) /* ty=Tensor[(11, 4, 14), float64] */;
  %783 = divide(%779, %780) /* ty=Tensor[(8, 15, 9), float64] */;
  %784 = @func_4253(%782) /* ty=Tensor[(11, 4, 14), float64] */;
  (%783, %784, %var_4287)
}

def @func_2336(%var_2192: Tensor[(10, 8, 5), float32], %var_2219: Tensor[(10, 8, 5), float32], %var_2234: Tensor[(1, 315), float32], %var_2310: Tensor[(36), float64]) -> (Tensor[(8, 15, 9), uint64], Tensor[(1260), bool], Tensor[(270, 4), uint64], Tensor[(10, 8, 5), float64], Tensor[(3, 12, 12), float32], Tensor[(12, 36), float32], Tensor[(9, 5, 7), float32], Tensor[(1, 315), float32], Tensor[(10, 8, 5), float64], Tensor[(8, 15, 9), uint64], Tensor[(10, 8, 5), float64], Tensor[(3, 12, 12), float32], Tensor[(10, 8, 5), float32], Tensor[(9, 14, 10), float64], Tensor[(6, 30), bool], Tensor[(36), float64], Tensor[(6, 30), bool], Tensor[(8, 15, 9), uint64]) {
  %785 = cast(meta[relay.Constant][53] /* ty=Tensor[(1260), bool] */, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %786 = cast(meta[relay.Constant][54] /* ty=Tensor[(270, 4), uint64] */, dtype="uint64") /* ty=Tensor[(270, 4), uint64] */;
  %787 = reshape(%785, newshape=[9, 14, 10]) /* ty=Tensor[(9, 14, 10), bool] */;
  %788 = reshape(%786, newshape=[1080]) /* ty=Tensor[(1080), uint64] */;
  %789 = @func_1434(%787, %788) /* ty=(Tensor[(9, 14, 10), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64]) */;
  %790 = cast(%var_2192, dtype="float32") /* ty=Tensor[(10, 8, 5), float32] */;
  %791 = sigmoid(%790) /* ty=Tensor[(10, 8, 5), float32] */;
  %792 = cast(%var_2219, dtype="bool") /* ty=Tensor[(10, 8, 5), bool] */;
  %793 = shape_of(%791, dtype="int32") /* ty=Tensor[(3), int32] */;
  %794 = cast(%791, dtype="bool") /* ty=Tensor[(10, 8, 5), bool] */;
  %795 = dyn.reshape(%792, %793, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %796 = greater_equal(%794, %795) /* ty=Tensor[(10, 8, 5), bool] */;
  %797 = cast(%796, dtype="float64") /* ty=Tensor[(10, 8, 5), float64] */;
  %798 = cast(meta[relay.Constant][55] /* ty=Tensor[(12, 36), float32] */, dtype="float32") /* ty=Tensor[(12, 36), float32] */;
  %799 = reshape(%798, newshape=[3, 12, 12]) /* ty=Tensor[(3, 12, 12), float32] */;
  %800 = @func_679(%799) /* ty=(Tensor[(3, 12, 12), float32], Tensor[(3, 12, 12), int16]) */;
  %801 = cast(%var_2234, dtype="float32") /* ty=Tensor[(1, 315), float32] */;
  %802 = reshape(%801, newshape=[9, 5, 7]) /* ty=Tensor[(9, 5, 7), float32] */;
  %803 = @func_1776(%802) /* ty=(Tensor[(9, 5, 7), float32], Tensor[(3, 12, 12), float32], Tensor[(432), float32]) */;
  %804 = cast(%796, dtype="float64") /* ty=Tensor[(10, 8, 5), float64] */;
  %805 = %789.1;
  %806 = cast(%805, dtype="uint64") /* ty=Tensor[(8, 15, 9), uint64] */;
  %807 = cast(meta[relay.Constant][54] /* ty=Tensor[(270, 4), uint64] */, dtype="uint64") /* ty=Tensor[(270, 4), uint64] */;
  %808 = reshape(%806, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %809 = reshape(%807, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %810 = cast(%791, dtype="float32") /* ty=Tensor[(10, 8, 5), float32] */;
  %811 = log(%810) /* ty=Tensor[(10, 8, 5), float32] */;
  %812 = cast(%811, dtype="uint64") /* ty=Tensor[(10, 8, 5), uint64] */;
  %813 = shape_of(%791, dtype="int32") /* ty=Tensor[(3), int32] */;
  %814 = cast(%791, dtype="uint64") /* ty=Tensor[(10, 8, 5), uint64] */;
  %815 = dyn.reshape(%812, %813, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %816 = right_shift(%814, %815) /* ty=Tensor[(10, 8, 5), uint64] */;
  %817 = cast(%816, dtype="bool") /* ty=Tensor[(10, 8, 5), bool] */;
  %818 = shape_of(%811, dtype="int32") /* ty=Tensor[(3), int32] */;
  %819 = cast(%811, dtype="bool") /* ty=Tensor[(10, 8, 5), bool] */;
  %820 = dyn.reshape(%817, %818, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %821 = equal(%819, %820) /* ty=Tensor[(10, 8, 5), bool] */;
  %822 = cast(%821, dtype="float64") /* ty=Tensor[(10, 8, 5), float64] */;
  %823 = shape_of(%796, dtype="int32") /* ty=Tensor[(3), int32] */;
  %824 = cast(%796, dtype="float64") /* ty=Tensor[(10, 8, 5), float64] */;
  %825 = dyn.reshape(%822, %823, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %826 = %800.0;
  %827 = cast(%826, dtype="float32") /* ty=Tensor[(3, 12, 12), float32] */;
  %828 = reshape(%827, newshape=[3, 12, 12]) /* ty=Tensor[(3, 12, 12), float32] */;
  %829 = @func_679(%828) /* ty=(Tensor[(3, 12, 12), float32], Tensor[(3, 12, 12), int16]) */;
  %830 = cast(%816, dtype="float32") /* ty=Tensor[(10, 8, 5), float32] */;
  %831 = cast(meta[relay.Constant][53] /* ty=Tensor[(1260), bool] */, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %832 = cast(meta[relay.Constant][54] /* ty=Tensor[(270, 4), uint64] */, dtype="uint64") /* ty=Tensor[(270, 4), uint64] */;
  %833 = reshape(%831, newshape=[9, 14, 10]) /* ty=Tensor[(9, 14, 10), bool] */;
  %834 = reshape(%832, newshape=[1080]) /* ty=Tensor[(1080), uint64] */;
  %835 = @func_1434(%833, %834) /* ty=(Tensor[(9, 14, 10), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64]) */;
  %836 = cast(%var_2310, dtype="float64") /* ty=Tensor[(36), float64] */;
  %837 = cast(meta[relay.Constant][56] /* ty=Tensor[(6, 30), bool] */, dtype="bool") /* ty=Tensor[(6, 30), bool] */;
  %838 = cast(meta[relay.Constant][53] /* ty=Tensor[(1260), bool] */, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %839 = reshape(%836, newshape=[2, 2, 9]) /* ty=Tensor[(2, 2, 9), float64] */;
  %840 = reshape(%837, newshape=[6, 30]) /* ty=Tensor[(6, 30), bool] */;
  %841 = reshape(%838, newshape=[90, 14]) /* ty=Tensor[(90, 14), bool] */;
  %842 = @func_1578(%839, %840, %841) /* ty=(Tensor[(2, 2, 9), float64], Tensor[(8, 15, 9), uint64], Tensor[(8, 15, 9), uint64], Tensor[(2, 15, 6), bool], Tensor[(6, 30), bool], Tensor[(9, 14, 10), float64], Tensor[(90, 14), bool], Tensor[(8, 15, 9), uint8], Tensor[(540, 2), float32]) */;
  %843 = %835.0;
  %844 = cast(%843, dtype="bool") /* ty=Tensor[(9, 14, 10), bool] */;
  %845 = @func_708(%808, %809) /* ty=Tensor[(8, 15, 9), uint64] */;
  %846 = cast(%845, dtype="uint64") /* ty=Tensor[(8, 15, 9), uint64] */;
  %847 = reshape(%844, newshape=[9, 14, 10]) /* ty=Tensor[(9, 14, 10), bool] */;
  %848 = reshape(%846, newshape=[1080]) /* ty=Tensor[(1080), uint64] */;
  %849 = @func_1434(%847, %848) /* ty=(Tensor[(9, 14, 10), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64]) */;
  %850 = tan(%797) /* ty=Tensor[(10, 8, 5), float64] */;
  %851 = %803.0;
  %852 = sinh(%804) /* ty=Tensor[(10, 8, 5), float64] */;
  %853 = floor_divide(%824, %825) /* ty=Tensor[(10, 8, 5), float64] */;
  %854 = %829.0;
  %855 = cos(%830) /* ty=Tensor[(10, 8, 5), float32] */;
  %856 = %842.4;
  %857 = %849.1;
  (%805, meta[relay.Constant][53] /* ty=Tensor[(1260), bool] */, meta[relay.Constant][54] /* ty=Tensor[(270, 4), uint64] */, %850, %826, meta[relay.Constant][55] /* ty=Tensor[(12, 36), float32] */, %851, %var_2234, %852, %845, %853, %854, %855, %843, %856, %var_2310, meta[relay.Constant][56] /* ty=Tensor[(6, 30), bool] */, %857)
}

def @func_4931() -> (Tensor[(180), bool],) {
  %858 = @func_3216() /* ty=(Tensor[(13, 6, 14), bool], Tensor[(2, 15, 6), bool], Tensor[(180), bool]) */;
  %859 = %858.2;
  (%859,)
}

def @func_2928() -> (Tensor[(2, 4, 2), float64],) {
  %860 = cast(meta[relay.Constant][58] /* ty=Tensor[(2, 4, 2), float64] */, dtype="float64") /* ty=Tensor[(2, 4, 2), float64] */;
  %861 = shape_of(meta[relay.Constant][57] /* ty=Tensor[(2, 4, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %862 = cast(meta[relay.Constant][57] /* ty=Tensor[(2, 4, 2), float64] */, dtype="float64") /* ty=Tensor[(2, 4, 2), float64] */;
  %863 = dyn.reshape(%860, %861, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %864 = power(%862, %863) /* ty=Tensor[(2, 4, 2), float64] */;
  (%864,)
}

def @func_7303(%var_7280: Tensor[(1408), float32]) -> (Tensor[(2, 4, 2), float64], Tensor[(11, 8, 16), float32], Tensor[(1408), float32], Tensor[(8, 15, 9), float64], Tensor[(616), float64]) {
  %865 = @func_4750() /* ty=(Tensor[(2, 4, 2), float64],) */;
  %866 = cast(%var_7280, dtype="float32") /* ty=Tensor[(1408), float32] */;
  %867 = reshape(%866, newshape=[11, 8, 16]) /* ty=Tensor[(11, 8, 16), float32] */;
  %868 = @func_3985(%867) /* ty=(Tensor[(11, 8, 16), float32],) */;
  %869 = cast(meta[relay.Constant][59] /* ty=Tensor[(616), float64] */, dtype="float64") /* ty=Tensor[(616), float64] */;
  %870 = reshape(%869, newshape=[616]) /* ty=Tensor[(616), float64] */;
  %871 = @func_4294(%870) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(11, 4, 14), float64], Tensor[(616), float64]) */;
  %872 = %865.0;
  %873 = %868.0;
  %874 = %871.0;
  (%872, %873, %var_7280, %874, meta[relay.Constant][59] /* ty=Tensor[(616), float64] */)
}

def @func_5502() -> (Tensor[(13, 6, 14), bool],) {
  %875 = @func_4669() /* ty=(Tensor[(13, 6, 14), bool],) */;
  %876 = %875.0;
  (%876,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6243(%var_6241: Tensor[(546, 2), uint64], %var_6242: Tensor[(546, 2), uint64]) -> (Tensor[(546, 2), uint32], Tensor[(546, 2), float64]) {
  %11 = fn (%var_6224: Tensor[(546, 2), uint64], %var_6236: Tensor[(546, 2), uint64]) -> (Tensor[(546, 2), uint32], Tensor[(546, 2), float64]) {
    %0 = @func_5067() /* ty=Tensor[(546, 2), uint64] */;
    %1 = cast(%var_6224, dtype="uint32") /* ty=Tensor[(546, 2), uint32] */;
    %2 = shape_of(%0, dtype="int32") /* ty=Tensor[(2), int32] */;
    %3 = cast(%0, dtype="uint32") /* ty=Tensor[(546, 2), uint32] */;
    %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %5 = cast(%var_6236, dtype="float64") /* ty=Tensor[(546, 2), float64] */;
    %6 = shape_of(%var_6224, dtype="int32") /* ty=Tensor[(2), int32] */;
    %7 = cast(%var_6224, dtype="float64") /* ty=Tensor[(546, 2), float64] */;
    %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %9 = subtract(%3, %4) /* ty=Tensor[(546, 2), uint32] */;
    %10 = floor_divide(%7, %8) /* ty=Tensor[(546, 2), float64] */;
    (%9, %10)
  };
  %11(%var_6241, %var_6242) /* ty=(Tensor[(546, 2), uint32], Tensor[(546, 2), float64]) */
}

def @func_5547() -> (Tensor[(13, 6, 14), bool],) {
  @func_5545() /* ty=(Tensor[(13, 6, 14), bool],) */
}

def @func_682(%var_680: Tensor[(3, 12, 12), float32]) -> (Tensor[(3, 12, 12), float32], Tensor[(3, 12, 12), int16]) {
  @func_679(%var_680) /* ty=(Tensor[(3, 12, 12), float32], Tensor[(3, 12, 12), int16]) */
}

def @func_5068() -> Tensor[(546, 2), uint64] {
  %13 = fn () -> Tensor[(546, 2), uint64] {
    %12 = @func_3166() /* ty=(Tensor[(2, 4, 2), float64], Tensor[(13, 6, 14), bool], Tensor[(546, 2), uint64]) */;
    %12.2
  };
  %13() /* ty=Tensor[(546, 2), uint64] */
}

def @func_7032() -> Tensor[(13, 6, 14), float64] {
  %14 = @func_4669() /* ty=(Tensor[(13, 6, 14), bool],) */;
  %15 = %14.0;
  %16 = cast(%15, dtype="float64") /* ty=Tensor[(13, 6, 14), float64] */;
  cos(%16) /* ty=Tensor[(13, 6, 14), float64] */
}

def @func_7793(%var_7758: Tensor[(165), float32], %var_7770: Tensor[(1386), int16], %var_7771: Tensor[(1260), bool], %var_7781: Tensor[(180), bool], %var_7789: Tensor[(4, 108), float32]) -> (Tensor[(546, 2), uint64], Tensor[(3, 5, 11), float32], Tensor[(165), float32], Tensor[(1080), float64], Tensor[(1080), uint64], Tensor[(1386), int16], Tensor[(1260), bool], Tensor[(2, 15, 6), bool], Tensor[(180), bool], Tensor[(4, 108), float64]) {
  %17 = @func_7258() /* ty=(Tensor[(546, 2), uint64],) */;
  %18 = cast(%var_7758, dtype="float32") /* ty=Tensor[(165), float32] */;
  %19 = reshape(%18, newshape=[3, 5, 11]) /* ty=Tensor[(3, 5, 11), float32] */;
  %20 = @func_6210(%19) /* ty=(Tensor[(3, 5, 11), float32],) */;
  %21 = cast(meta[relay.Constant][0] /* ty=Tensor[(1080), uint64] */, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %22 = cast(meta[relay.Constant][0] /* ty=Tensor[(1080), uint64] */, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %23 = %17.0;
  %24 = cast(%23, dtype="uint64") /* ty=Tensor[(546, 2), uint64] */;
  %25 = cast(meta[relay.Constant][1] /* ty=Tensor[(4, 108), float32] */, dtype="float32") /* ty=Tensor[(4, 108), float32] */;
  %26 = cast(%var_7770, dtype="int16") /* ty=Tensor[(1386), int16] */;
  %27 = cast(%var_7771, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %28 = reshape(%21, newshape=[1080]) /* ty=Tensor[(1080), uint64] */;
  %29 = reshape(%22, newshape=[1080]) /* ty=Tensor[(1080), uint64] */;
  %30 = reshape(%24, newshape=[1092]) /* ty=Tensor[(1092), uint64] */;
  %31 = reshape(%25, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %32 = reshape(%26, newshape=[154, 9]) /* ty=Tensor[(154, 9), int16] */;
  %33 = reshape(%27, newshape=[1260]) /* ty=Tensor[(1260), bool] */;
  %34 = @func_3654(%28, %29, %30, %31, %32, %33) /* ty=(Tensor[(2, 4, 2), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), int64], Tensor[(13, 6, 14), bool], Tensor[(1092), uint64], Tensor[(2, 15, 6), bool], Tensor[(3, 12, 12), float32], Tensor[(432), float32], Tensor[(5, 4, 7), float64], Tensor[(140), uint8], Tensor[(14, 9, 11), bool], Tensor[(154, 9), int16], Tensor[(1080), uint64], Tensor[(1260), bool], Tensor[(1080), float64]) */;
  %35 = cast(%var_7781, dtype="bool") /* ty=Tensor[(180), bool] */;
  %36 = reshape(%35, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), bool] */;
  %37 = cast(meta[relay.Constant][2] /* ty=Tensor[(4, 108), float32] */, dtype="float32") /* ty=Tensor[(4, 108), float32] */;
  %38 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(4, 108), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %39 = cast(meta[relay.Constant][1] /* ty=Tensor[(4, 108), float32] */, dtype="float32") /* ty=Tensor[(4, 108), float32] */;
  %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %41 = power(%39, %40) /* ty=Tensor[(4, 108), float32] */;
  %42 = cast(%var_7789, dtype="float64") /* ty=Tensor[(4, 108), float64] */;
  %43 = shape_of(%41, dtype="int32") /* ty=Tensor[(2), int32] */;
  %44 = cast(%41, dtype="float64") /* ty=Tensor[(4, 108), float64] */;
  %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %46 = %20.0;
  %47 = %34.14;
  %48 = @func_5003(%36) /* ty=Tensor[(2, 15, 6), bool] */;
  %49 = floor_mod(%44, %45) /* ty=Tensor[(4, 108), float64] */;
  (%23, %46, %var_7758, %47, meta[relay.Constant][0] /* ty=Tensor[(1080), uint64] */, %var_7770, %var_7771, %48, %var_7781, %49)
}

def @func_3883(%var_3882: Tensor[(630), float32]) -> (Tensor[(2, 15, 6), bool], Tensor[(6, 15, 7), float32], Tensor[(630), float32]) {
  %55 = fn (%var_3877: Tensor[(630), float32]) -> (Tensor[(2, 15, 6), bool], Tensor[(6, 15, 7), float32], Tensor[(630), float32]) {
    %50 = @func_3216() /* ty=(Tensor[(13, 6, 14), bool], Tensor[(2, 15, 6), bool], Tensor[(180), bool]) */;
    %51 = cast(%var_3877, dtype="float32") /* ty=Tensor[(630), float32] */;
    %52 = reshape(%51, newshape=[6, 15, 7]) /* ty=Tensor[(6, 15, 7), float32] */;
    %53 = %50.1;
    %54 = @func_3496(%52) /* ty=Tensor[(6, 15, 7), float32] */;
    (%53, %54, %var_3877)
  };
  %55(%var_3882) /* ty=(Tensor[(2, 15, 6), bool], Tensor[(6, 15, 7), float32], Tensor[(630), float32]) */
}

def @func_5818(%var_5749: Tensor[(2, 16, 16), bool], %var_5750: Tensor[(2, 16, 16), bool]) -> (Tensor[(2, 16, 16), bool], Tensor[(13, 6, 14), bool], Tensor[(2, 16, 16), float64], Tensor[(2, 10, 13), float32], Tensor[(260), float64]) {
  %56 = cast(%var_5750, dtype="bool") /* ty=Tensor[(2, 16, 16), bool] */;
  %57 = shape_of(%var_5749, dtype="int32") /* ty=Tensor[(3), int32] */;
  %58 = cast(%var_5749, dtype="bool") /* ty=Tensor[(2, 16, 16), bool] */;
  %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %60 = @func_5502() /* ty=(Tensor[(13, 6, 14), bool],) */;
  %61 = cast(%var_5750, dtype="float64") /* ty=Tensor[(2, 16, 16), float64] */;
  %62 = cast(meta[relay.Constant][3] /* ty=Tensor[(260), float64] */, dtype="float64") /* ty=Tensor[(260), float64] */;
  %63 = cast(meta[relay.Constant][3] /* ty=Tensor[(260), float64] */, dtype="float64") /* ty=Tensor[(260), float64] */;
  %64 = reshape(%62, newshape=[2, 10, 13]) /* ty=Tensor[(2, 10, 13), float64] */;
  %65 = reshape(%63, newshape=[2, 10, 13]) /* ty=Tensor[(2, 10, 13), float64] */;
  %66 = logical_or(%58, %59) /* ty=Tensor[(2, 16, 16), bool] */;
  %67 = %60.0;
  %68 = log2(%61) /* ty=Tensor[(2, 16, 16), float64] */;
  %69 = @func_3683(%64, %65) /* ty=Tensor[(2, 10, 13), float32] */;
  (%66, %67, %68, %69, meta[relay.Constant][3] /* ty=Tensor[(260), float64] */)
}

def @func_4885() -> (Tensor[(8, 15, 9), float64],) {
  @func_4883() /* ty=(Tensor[(8, 15, 9), float64],) */
}

def @func_4671() -> (Tensor[(13, 6, 14), bool],) {
  @func_4669() /* ty=(Tensor[(13, 6, 14), bool],) */
}

def @func_6813() -> Tensor[(2, 15, 6), bool] {
  %70 = @func_5572() /* ty=(Tensor[(1080), uint64], Tensor[(2, 15, 6), bool]) */;
  %70.1
}

def @func_5169() -> Tensor[(5, 4, 7), float64] {
  %71 = @func_3972() /* ty=(Tensor[(2, 10, 13), float32], Tensor[(65, 4), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64], Tensor[(5, 4, 7), float64], Tensor[(140), uint8], Tensor[(2, 4, 2), float64], Tensor[(5, 4, 7), float64]) */;
  %71.4
}

def @func_3262() -> (Tensor[(2, 4, 2), float64],) {
  @func_3260() /* ty=(Tensor[(2, 4, 2), float64],) */
}

def @func_7305(%var_7304: Tensor[(1408), float32]) -> (Tensor[(2, 4, 2), float64], Tensor[(11, 8, 16), float32], Tensor[(1408), float32], Tensor[(8, 15, 9), float64], Tensor[(616), float64]) {
  %82 = fn (%var_7280: Tensor[(1408), float32]) -> (Tensor[(2, 4, 2), float64], Tensor[(11, 8, 16), float32], Tensor[(1408), float32], Tensor[(8, 15, 9), float64], Tensor[(616), float64]) {
    %72 = @func_4750() /* ty=(Tensor[(2, 4, 2), float64],) */;
    %73 = cast(%var_7280, dtype="float32") /* ty=Tensor[(1408), float32] */;
    %74 = reshape(%73, newshape=[11, 8, 16]) /* ty=Tensor[(11, 8, 16), float32] */;
    %75 = @func_3985(%74) /* ty=(Tensor[(11, 8, 16), float32],) */;
    %76 = cast(meta[relay.Constant][4] /* ty=Tensor[(616), float64] */, dtype="float64") /* ty=Tensor[(616), float64] */;
    %77 = reshape(%76, newshape=[616]) /* ty=Tensor[(616), float64] */;
    %78 = @func_4294(%77) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(11, 4, 14), float64], Tensor[(616), float64]) */;
    %79 = %72.0;
    %80 = %75.0;
    %81 = %78.0;
    (%79, %80, %var_7280, %81, meta[relay.Constant][4] /* ty=Tensor[(616), float64] */)
  };
  %82(%var_7304) /* ty=(Tensor[(2, 4, 2), float64], Tensor[(11, 8, 16), float32], Tensor[(1408), float32], Tensor[(8, 15, 9), float64], Tensor[(616), float64]) */
}

def @func_1778(%var_1777: Tensor[(9, 5, 7), float32]) -> (Tensor[(9, 5, 7), float32], Tensor[(3, 12, 12), float32], Tensor[(432), float32]) {
  %89 = fn (%var_1745: Tensor[(9, 5, 7), float32]) -> (Tensor[(9, 5, 7), float32], Tensor[(3, 12, 12), float32], Tensor[(432), float32]) {
    %83 = cast(%var_1745, dtype="float32") /* ty=Tensor[(9, 5, 7), float32] */;
    %84 = cast(meta[relay.Constant][5] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
    %85 = reshape(%84, newshape=[3, 12, 12]) /* ty=Tensor[(3, 12, 12), float32] */;
    %86 = @func_679(%85) /* ty=(Tensor[(3, 12, 12), float32], Tensor[(3, 12, 12), int16]) */;
    %87 = asinh(%83) /* ty=Tensor[(9, 5, 7), float32] */;
    %88 = %86.0;
    (%87, %88, meta[relay.Constant][5] /* ty=Tensor[(432), float32] */)
  };
  %89(%var_1777) /* ty=(Tensor[(9, 5, 7), float32], Tensor[(3, 12, 12), float32], Tensor[(432), float32]) */
}

def @func_3402(%var_3384: Tensor[(36), float64], %var_3385: Tensor[(1260), bool]) -> (Tensor[(2, 4, 2), float32], Tensor[(2, 15, 6), bool], Tensor[(180), bool], Tensor[(2, 4, 2), float64], Tensor[(8, 15, 9), uint8], Tensor[(36), float64], Tensor[(1260), bool], Tensor[(2, 4, 2), uint8]) {
  %90 = @func_3069() /* ty=Tensor[(2, 4, 2), float64] */;
  %91 = cast(%90, dtype="float32") /* ty=Tensor[(2, 4, 2), float32] */;
  %92 = cast(meta[relay.Constant][6] /* ty=Tensor[(180), bool] */, dtype="bool") /* ty=Tensor[(180), bool] */;
  %93 = cast(meta[relay.Constant][6] /* ty=Tensor[(180), bool] */, dtype="bool") /* ty=Tensor[(180), bool] */;
  %94 = reshape(%92, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), bool] */;
  %95 = reshape(%93, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), bool] */;
  %96 = cast(%var_3384, dtype="float64") /* ty=Tensor[(36), float64] */;
  %97 = @func_85(%94, %95) /* ty=Tensor[(2, 15, 6), bool] */;
  %98 = cast(%97, dtype="bool") /* ty=Tensor[(2, 15, 6), bool] */;
  %99 = cast(%var_3385, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %100 = reshape(%96, newshape=[2, 2, 9]) /* ty=Tensor[(2, 2, 9), float64] */;
  %101 = reshape(%98, newshape=[6, 30]) /* ty=Tensor[(6, 30), bool] */;
  %102 = reshape(%99, newshape=[90, 14]) /* ty=Tensor[(90, 14), bool] */;
  %103 = @func_1578(%100, %101, %102) /* ty=(Tensor[(2, 2, 9), float64], Tensor[(8, 15, 9), uint64], Tensor[(8, 15, 9), uint64], Tensor[(2, 15, 6), bool], Tensor[(6, 30), bool], Tensor[(9, 14, 10), float64], Tensor[(90, 14), bool], Tensor[(8, 15, 9), uint8], Tensor[(540, 2), float32]) */;
  %104 = cast(%90, dtype="float64") /* ty=Tensor[(2, 4, 2), float64] */;
  %105 = cosh(%104) /* ty=Tensor[(2, 4, 2), float64] */;
  %106 = cast(%90, dtype="float32") /* ty=Tensor[(2, 4, 2), float32] */;
  %107 = sinh(%106) /* ty=Tensor[(2, 4, 2), float32] */;
  %108 = cast(%107, dtype="uint8") /* ty=Tensor[(2, 4, 2), uint8] */;
  %109 = shape_of(%105, dtype="int32") /* ty=Tensor[(3), int32] */;
  %110 = cast(%105, dtype="uint8") /* ty=Tensor[(2, 4, 2), uint8] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %112 = atanh(%91) /* ty=Tensor[(2, 4, 2), float32] */;
  %113 = @func_3069() /* ty=Tensor[(2, 4, 2), float64] */;
  %114 = %103.7;
  %115 = subtract(%110, %111) /* ty=Tensor[(2, 4, 2), uint8] */;
  (%112, %97, meta[relay.Constant][6] /* ty=Tensor[(180), bool] */, %113, %114, %var_3384, %var_3385, %115)
}

def @func_6762() -> Tensor[(2, 4, 2), float64] {
  @func_6760() /* ty=Tensor[(2, 4, 2), float64] */
}

def @func_4752() -> (Tensor[(2, 4, 2), float64],) {
  @func_4750() /* ty=(Tensor[(2, 4, 2), float64],) */
}

def @func_2928() -> (Tensor[(2, 4, 2), float64],) {
  %116 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 4, 2), float64] */, dtype="float64") /* ty=Tensor[(2, 4, 2), float64] */;
  %117 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(2, 4, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %118 = cast(meta[relay.Constant][7] /* ty=Tensor[(2, 4, 2), float64] */, dtype="float64") /* ty=Tensor[(2, 4, 2), float64] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %120 = power(%118, %119) /* ty=Tensor[(2, 4, 2), float64] */;
  (%120,)
}

def @func_6843() -> (Tensor[(13, 6, 14), float32],) {
  @func_6841() /* ty=(Tensor[(13, 6, 14), float32],) */
}

def @func_2373(%var_2371: Tensor[(5, 4, 7), uint8]) -> (Tensor[(5, 4, 7), float64],) {
  @func_2370(%var_2371) /* ty=(Tensor[(5, 4, 7), float64],) */
}

def @func_4433(%var_4431: Tensor[(1260), bool], %var_4432: Tensor[(1092), uint64]) -> (Tensor[(2, 15, 6), bool], Tensor[(180), bool], Tensor[(770), float64], Tensor[(9, 4), float64], Tensor[(1260), bool], Tensor[(2, 4, 2), float64], Tensor[(140), uint8], Tensor[(1080), uint64], Tensor[(1092), uint64], Tensor[(432), float32], Tensor[(1386), int16]) {
  %147 = fn (%var_4372: Tensor[(1260), bool], %var_4416: Tensor[(1092), uint64]) -> (Tensor[(2, 15, 6), bool], Tensor[(180), bool], Tensor[(770), float64], Tensor[(9, 4), float64], Tensor[(1260), bool], Tensor[(2, 4, 2), float64], Tensor[(140), uint8], Tensor[(1080), uint64], Tensor[(1092), uint64], Tensor[(432), float32], Tensor[(1386), int16]) {
    %121 = @func_3216() /* ty=(Tensor[(13, 6, 14), bool], Tensor[(2, 15, 6), bool], Tensor[(180), bool]) */;
    %122 = cast(meta[relay.Constant][9] /* ty=Tensor[(770), float64] */, dtype="float64") /* ty=Tensor[(770), float64] */;
    %123 = cast(meta[relay.Constant][10] /* ty=Tensor[(9, 4), float64] */, dtype="float64") /* ty=Tensor[(9, 4), float64] */;
    %124 = cast(%var_4372, dtype="bool") /* ty=Tensor[(1260), bool] */;
    %125 = reshape(%122, newshape=[14, 11, 5]) /* ty=Tensor[(14, 11, 5), float64] */;
    %126 = reshape(%123, newshape=[18, 2]) /* ty=Tensor[(18, 2), float64] */;
    %127 = reshape(%124, newshape=[1260]) /* ty=Tensor[(1260), bool] */;
    %128 = @func_3026(%125, %126, %127) /* ty=(Tensor[(8, 15, 9), uint64], Tensor[(18, 2), float64], Tensor[(180), bool], Tensor[(1260), bool], Tensor[(14, 11, 5), float64]) */;
    %129 = @func_3260() /* ty=(Tensor[(2, 4, 2), float64],) */;
    %130 = cast(meta[relay.Constant][11] /* ty=Tensor[(1080), uint64] */, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
    %131 = cast(meta[relay.Constant][11] /* ty=Tensor[(1080), uint64] */, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
    %132 = cast(%var_4416, dtype="uint64") /* ty=Tensor[(1092), uint64] */;
    %133 = cast(meta[relay.Constant][12] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
    %134 = cast(meta[relay.Constant][13] /* ty=Tensor[(1386), int16] */, dtype="int16") /* ty=Tensor[(1386), int16] */;
    %135 = cast(%var_4372, dtype="bool") /* ty=Tensor[(1260), bool] */;
    %136 = reshape(%130, newshape=[1080]) /* ty=Tensor[(1080), uint64] */;
    %137 = reshape(%131, newshape=[1080]) /* ty=Tensor[(1080), uint64] */;
    %138 = reshape(%132, newshape=[1092]) /* ty=Tensor[(1092), uint64] */;
    %139 = reshape(%133, newshape=[432]) /* ty=Tensor[(432), float32] */;
    %140 = reshape(%134, newshape=[154, 9]) /* ty=Tensor[(154, 9), int16] */;
    %141 = reshape(%135, newshape=[1260]) /* ty=Tensor[(1260), bool] */;
    %142 = @func_3654(%136, %137, %138, %139, %140, %141) /* ty=(Tensor[(2, 4, 2), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), int64], Tensor[(13, 6, 14), bool], Tensor[(1092), uint64], Tensor[(2, 15, 6), bool], Tensor[(3, 12, 12), float32], Tensor[(432), float32], Tensor[(5, 4, 7), float64], Tensor[(140), uint8], Tensor[(14, 9, 11), bool], Tensor[(154, 9), int16], Tensor[(1080), uint64], Tensor[(1260), bool], Tensor[(1080), float64]) */;
    %143 = %121.1;
    %144 = %128.2;
    %145 = %129.0;
    %146 = %142.9;
    (%143, %144, meta[relay.Constant][9] /* ty=Tensor[(770), float64] */, meta[relay.Constant][10] /* ty=Tensor[(9, 4), float64] */, %var_4372, %145, %146, meta[relay.Constant][11] /* ty=Tensor[(1080), uint64] */, %var_4416, meta[relay.Constant][12] /* ty=Tensor[(432), float32] */, meta[relay.Constant][13] /* ty=Tensor[(1386), int16] */)
  };
  %147(%var_4431, %var_4432) /* ty=(Tensor[(2, 15, 6), bool], Tensor[(180), bool], Tensor[(770), float64], Tensor[(9, 4), float64], Tensor[(1260), bool], Tensor[(2, 4, 2), float64], Tensor[(140), uint8], Tensor[(1080), uint64], Tensor[(1092), uint64], Tensor[(432), float32], Tensor[(1386), int16]) */
}

def @func_6408(%var_6406: Tensor[(2, 15, 6), bool], %var_6407: Tensor[(1080), uint64]) -> (Tensor[(2, 15, 6), bool], Tensor[(13, 6, 14), bool], Tensor[(2, 15, 6), int8], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64]) {
  @func_6404(%var_6406, %var_6407) /* ty=(Tensor[(2, 15, 6), bool], Tensor[(13, 6, 14), bool], Tensor[(2, 15, 6), int8], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64]) */
}

def @func_3417(%var_3408: Tensor[(14, 9, 11), int16], %var_3409: Tensor[(14, 9, 11), int16]) -> Tensor[(14, 9, 11), bool] {
  %148 = cast(%var_3409, dtype="bool") /* ty=Tensor[(14, 9, 11), bool] */;
  %149 = shape_of(%var_3408, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%var_3408, dtype="bool") /* ty=Tensor[(14, 9, 11), bool] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%150, %151) /* ty=Tensor[(14, 9, 11), bool] */
}

def @func_5304(%var_5261: Tensor[(630), float32], %var_5264: Tensor[(6, 15, 7), float32], %var_5288: Tensor[(1080), uint64], %var_5292: Tensor[(1, 315), float32]) -> (Tensor[(2, 15, 6), bool], Tensor[(630), float32], Tensor[(6, 15, 7), int32], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64], Tensor[(10, 8, 5), float64], Tensor[(4, 100), float32], Tensor[(1, 315), float32], Tensor[(36), float64]) {
  %152 = @func_4132() /* ty=(Tensor[(2, 15, 6), bool], Tensor[(13, 6, 14), bool]) */;
  %153 = cast(%var_5261, dtype="float32") /* ty=Tensor[(630), float32] */;
  %154 = reshape(%153, newshape=[6, 15, 7]) /* ty=Tensor[(6, 15, 7), float32] */;
  %155 = @func_3496(%154) /* ty=Tensor[(6, 15, 7), float32] */;
  %156 = cast(%var_5264, dtype="int32") /* ty=Tensor[(6, 15, 7), int32] */;
  %157 = shape_of(%155, dtype="int32") /* ty=Tensor[(3), int32] */;
  %158 = cast(%155, dtype="int32") /* ty=Tensor[(6, 15, 7), int32] */;
  %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %160 = cast(%var_5288, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %161 = cast(%var_5288, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %162 = reshape(%160, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %163 = reshape(%161, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %164 = cast(meta[relay.Constant][14] /* ty=Tensor[(4, 100), float32] */, dtype="float32") /* ty=Tensor[(4, 100), float32] */;
  %165 = cast(meta[relay.Constant][14] /* ty=Tensor[(4, 100), float32] */, dtype="float32") /* ty=Tensor[(4, 100), float32] */;
  %166 = cast(%var_5292, dtype="float32") /* ty=Tensor[(1, 315), float32] */;
  %167 = cast(meta[relay.Constant][15] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %168 = reshape(%164, newshape=[10, 8, 5]) /* ty=Tensor[(10, 8, 5), float32] */;
  %169 = reshape(%165, newshape=[10, 8, 5]) /* ty=Tensor[(10, 8, 5), float32] */;
  %170 = reshape(%166, newshape=[1, 315]) /* ty=Tensor[(1, 315), float32] */;
  %171 = reshape(%167, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %172 = @func_2336(%168, %169, %170, %171) /* ty=(Tensor[(8, 15, 9), uint64], Tensor[(1260), bool], Tensor[(270, 4), uint64], Tensor[(10, 8, 5), float64], Tensor[(3, 12, 12), float32], Tensor[(12, 36), float32], Tensor[(9, 5, 7), float32], Tensor[(1, 315), float32], Tensor[(10, 8, 5), float64], Tensor[(8, 15, 9), uint64], Tensor[(10, 8, 5), float64], Tensor[(3, 12, 12), float32], Tensor[(10, 8, 5), float32], Tensor[(9, 14, 10), float64], Tensor[(6, 30), bool], Tensor[(36), float64], Tensor[(6, 30), bool], Tensor[(8, 15, 9), uint64]) */;
  %173 = %152.0;
  %174 = maximum(%158, %159) /* ty=Tensor[(6, 15, 7), int32] */;
  %175 = @func_708(%162, %163) /* ty=Tensor[(8, 15, 9), uint64] */;
  %176 = %172.10;
  (%173, %var_5261, %174, %175, %var_5288, %176, meta[relay.Constant][14] /* ty=Tensor[(4, 100), float32] */, %var_5292, meta[relay.Constant][15] /* ty=Tensor[(36), float64] */)
}

def @func_3687(%var_3685: Tensor[(2, 10, 13), float64], %var_3686: Tensor[(2, 10, 13), float64]) -> Tensor[(2, 10, 13), float32] {
  @func_3683(%var_3685, %var_3686) /* ty=Tensor[(2, 10, 13), float32] */
}

def @func_7700(%var_7698: Tensor[(2, 4, 2), float64]) -> (Tensor[(2, 4, 2), float32], Tensor[(2, 4, 2), float64], Tensor[(2, 4, 2), float64], Tensor[(1386), int16], Tensor[(14, 9, 11), float64]) {
  @func_7697(%var_7698) /* ty=(Tensor[(2, 4, 2), float32], Tensor[(2, 4, 2), float64], Tensor[(2, 4, 2), float64], Tensor[(1386), int16], Tensor[(14, 9, 11), float64]) */
}

def @func_6549() -> (Tensor[(9, 3, 9), int8],) {
  @func_6547() /* ty=(Tensor[(9, 3, 9), int8],) */
}

def @func_6481(%var_6478: float32, %var_6479: Tensor[(432), float32], %var_6480: Tensor[(65, 4), float32]) -> (Tensor[(2, 2, 1), float32], Tensor[(8), int8], Tensor[(630), float32], Tensor[(3, 12, 12), int16], Tensor[(432), float32], Tensor[(65, 4), int64], Tensor[(630), float32], Tensor[(2, 15, 6), bool]) {
  %210 = fn (%var_6428: float32, %var_6447: Tensor[(432), float32], %var_6449: Tensor[(65, 4), float32]) -> (Tensor[(2, 2, 1), float32], Tensor[(8), int8], Tensor[(630), float32], Tensor[(3, 12, 12), int16], Tensor[(432), float32], Tensor[(65, 4), int64], Tensor[(630), float32], Tensor[(2, 15, 6), bool]) {
    %177 = cast(%var_6428, dtype="float32") /* ty=float32 */;
    %178 = cast(meta[relay.Constant][16] /* ty=Tensor[(2, 2, 1), float32] */, dtype="float32") /* ty=Tensor[(2, 2, 1), float32] */;
    %179 = cast(%var_6447, dtype="float32") /* ty=Tensor[(432), float32] */;
    %180 = reshape(%179, newshape=[3, 12, 12]) /* ty=Tensor[(3, 12, 12), float32] */;
    %181 = @func_679(%180) /* ty=(Tensor[(3, 12, 12), float32], Tensor[(3, 12, 12), int16]) */;
    %182 = cast(meta[relay.Constant][17] /* ty=Tensor[(8), int8] */, dtype="int8") /* ty=Tensor[(8), int8] */;
    %183 = cast(meta[relay.Constant][17] /* ty=Tensor[(8), int8] */, dtype="int8") /* ty=Tensor[(8), int8] */;
    %184 = cast(meta[relay.Constant][18] /* ty=Tensor[(630), float32] */, dtype="float32") /* ty=Tensor[(630), float32] */;
    %185 = reshape(%182, newshape=[8, 1]) /* ty=Tensor[(8, 1), int8] */;
    %186 = reshape(%183, newshape=[8, 1]) /* ty=Tensor[(8, 1), int8] */;
    %187 = reshape(%184, newshape=[10, 63]) /* ty=Tensor[(10, 63), float32] */;
    %188 = @func_4733(%185, %186, %187) /* ty=(Tensor[(8, ?), int8], Tensor[(2, 15, 6), bool], Tensor[(10, 63), float32], Tensor[(65, 4), float64], Tensor[(2, 15, 6), bool]) */;
    %189 = %188.3;
    %190 = cast(%189, dtype="float32") /* ty=Tensor[(65, 4), float32] */;
    %191 = sigmoid(%190) /* ty=Tensor[(65, 4), float32] */;
    %192 = cast(%var_6449, dtype="float64") /* ty=Tensor[(65, 4), float64] */;
    %193 = shape_of(%191, dtype="int32") /* ty=Tensor[(2), int32] */;
    %194 = cast(%191, dtype="float64") /* ty=Tensor[(65, 4), float64] */;
    %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %196 = divide(%194, %195) /* ty=Tensor[(65, 4), float64] */;
    %197 = cast(meta[relay.Constant][19] /* ty=Tensor[(65, 4), float64] */, dtype="int64") /* ty=Tensor[(65, 4), int64] */;
    %198 = shape_of(%196, dtype="int32") /* ty=Tensor[(2), int32] */;
    %199 = cast(%196, dtype="int64") /* ty=Tensor[(65, 4), int64] */;
    %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %201 = cast(meta[relay.Constant][18] /* ty=Tensor[(630), float32] */, dtype="float32") /* ty=Tensor[(630), float32] */;
    %202 = reshape(%201, newshape=[630]) /* ty=Tensor[(630), float32] */;
    %203 = @func_3881(%202) /* ty=(Tensor[(2, 15, 6), bool], Tensor[(6, 15, 7), float32], Tensor[(630), float32]) */;
    %204 = @func_5434() /* ty=(Tensor[(2, 15, 6), bool],) */;
    %205 = mod(%177, %178) /* ty=Tensor[(2, 2, 1), float32] */;
    %206 = %181.1;
    %207 = bitwise_xor(%199, %200) /* ty=Tensor[(65, 4), int64] */;
    %208 = %203.2;
    %209 = %204.0;
    (%205, meta[relay.Constant][17] /* ty=Tensor[(8), int8] */, meta[relay.Constant][18] /* ty=Tensor[(630), float32] */, %206, %var_6447, %207, %208, %209)
  };
  %210(%var_6478, %var_6479, %var_6480) /* ty=(Tensor[(2, 2, 1), float32], Tensor[(8), int8], Tensor[(630), float32], Tensor[(3, 12, 12), int16], Tensor[(432), float32], Tensor[(65, 4), int64], Tensor[(630), float32], Tensor[(2, 15, 6), bool]) */
}

def @func_3030(%var_3027: Tensor[(14, 11, 5), float64], %var_3028: Tensor[(18, 2), float64], %var_3029: Tensor[(1260), bool]) -> (Tensor[(8, 15, 9), uint64], Tensor[(18, 2), float64], Tensor[(180), bool], Tensor[(1260), bool], Tensor[(14, 11, 5), float64]) {
  %228 = fn (%var_2952: Tensor[(14, 11, 5), float64], %var_2964: Tensor[(18, 2), float64], %var_2966: Tensor[(1260), bool]) -> (Tensor[(8, 15, 9), uint64], Tensor[(18, 2), float64], Tensor[(180), bool], Tensor[(1260), bool], Tensor[(14, 11, 5), float64]) {
    %211 = cast(%var_2964, dtype="float64") /* ty=Tensor[(18, 2), float64] */;
    %212 = cast(meta[relay.Constant][20] /* ty=Tensor[(180), bool] */, dtype="bool") /* ty=Tensor[(180), bool] */;
    %213 = cast(%var_2966, dtype="bool") /* ty=Tensor[(1260), bool] */;
    %214 = reshape(%211, newshape=[2, 2, 9]) /* ty=Tensor[(2, 2, 9), float64] */;
    %215 = reshape(%212, newshape=[6, 30]) /* ty=Tensor[(6, 30), bool] */;
    %216 = reshape(%213, newshape=[90, 14]) /* ty=Tensor[(90, 14), bool] */;
    %217 = @func_1578(%214, %215, %216) /* ty=(Tensor[(2, 2, 9), float64], Tensor[(8, 15, 9), uint64], Tensor[(8, 15, 9), uint64], Tensor[(2, 15, 6), bool], Tensor[(6, 30), bool], Tensor[(9, 14, 10), float64], Tensor[(90, 14), bool], Tensor[(8, 15, 9), uint8], Tensor[(540, 2), float32]) */;
    %218 = cast(%var_2952, dtype="bool") /* ty=Tensor[(14, 11, 5), bool] */;
    %219 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(14, 11, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %220 = cast(meta[relay.Constant][21] /* ty=Tensor[(14, 11, 5), float64] */, dtype="bool") /* ty=Tensor[(14, 11, 5), bool] */;
    %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %222 = greater_equal(%220, %221) /* ty=Tensor[(14, 11, 5), bool] */;
    %223 = cast(%222, dtype="float32") /* ty=Tensor[(14, 11, 5), float32] */;
    %224 = tan(%223) /* ty=Tensor[(14, 11, 5), float32] */;
    %225 = cast(%224, dtype="float64") /* ty=Tensor[(14, 11, 5), float64] */;
    %226 = %217.2;
    %227 = cosh(%225) /* ty=Tensor[(14, 11, 5), float64] */;
    (%226, %var_2964, meta[relay.Constant][20] /* ty=Tensor[(180), bool] */, %var_2966, %227)
  };
  %228(%var_3027, %var_3028, %var_3029) /* ty=(Tensor[(8, 15, 9), uint64], Tensor[(18, 2), float64], Tensor[(180), bool], Tensor[(1260), bool], Tensor[(14, 11, 5), float64]) */
}

def @func_3167() -> (Tensor[(2, 4, 2), float64], Tensor[(13, 6, 14), bool], Tensor[(546, 2), uint64]) {
  %238 = fn () -> (Tensor[(2, 4, 2), float64], Tensor[(13, 6, 14), bool], Tensor[(546, 2), uint64]) {
    %229 = @func_3069() /* ty=Tensor[(2, 4, 2), float64] */;
    %230 = cast(%229, dtype="float64") /* ty=Tensor[(2, 4, 2), float64] */;
    %231 = cast(meta[relay.Constant][22] /* ty=Tensor[(546, 2), uint64] */, dtype="uint64") /* ty=Tensor[(546, 2), uint64] */;
    %232 = cast(meta[relay.Constant][22] /* ty=Tensor[(546, 2), uint64] */, dtype="uint64") /* ty=Tensor[(546, 2), uint64] */;
    %233 = reshape(%231, newshape=[13, 6, 14]) /* ty=Tensor[(13, 6, 14), uint64] */;
    %234 = reshape(%232, newshape=[13, 6, 14]) /* ty=Tensor[(13, 6, 14), uint64] */;
    %235 = @func_2752(%233, %234) /* ty=(Tensor[(13, 6, 14), bool],) */;
    %236 = log2(%230) /* ty=Tensor[(2, 4, 2), float64] */;
    %237 = %235.0;
    (%236, %237, meta[relay.Constant][22] /* ty=Tensor[(546, 2), uint64] */)
  };
  %238() /* ty=(Tensor[(2, 4, 2), float64], Tensor[(13, 6, 14), bool], Tensor[(546, 2), uint64]) */
}

def @func_4733(%var_4712: Tensor[(8, 1), int8], %var_4713: Tensor[(8, 1), int8], %var_4718: Tensor[(10, 63), float32]) -> (Tensor[(8, ?), int8], Tensor[(2, 15, 6), bool], Tensor[(10, 63), float32], Tensor[(65, 4), float64], Tensor[(2, 15, 6), bool]) {
  %239 = cast(%var_4713, dtype="int8") /* ty=Tensor[(8, 1), int8] */;
  %240 = shape_of(%var_4712, dtype="int32") /* ty=Tensor[(2), int32] */;
  %241 = cast(%var_4712, dtype="int8") /* ty=Tensor[(8, 1), int8] */;
  %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %243 = cast(%var_4718, dtype="float32") /* ty=Tensor[(10, 63), float32] */;
  %244 = reshape(%243, newshape=[630]) /* ty=Tensor[(630), float32] */;
  %245 = @func_3881(%244) /* ty=(Tensor[(2, 15, 6), bool], Tensor[(6, 15, 7), float32], Tensor[(630), float32]) */;
  %246 = @func_3972() /* ty=(Tensor[(2, 10, 13), float32], Tensor[(65, 4), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64], Tensor[(5, 4, 7), float64], Tensor[(140), uint8], Tensor[(2, 4, 2), float64], Tensor[(5, 4, 7), float64]) */;
  %247 = %245.0;
  %248 = cast(%247, dtype="bool") /* ty=Tensor[(2, 15, 6), bool] */;
  %249 = cast(%247, dtype="bool") /* ty=Tensor[(2, 15, 6), bool] */;
  %250 = reshape(%248, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), bool] */;
  %251 = reshape(%249, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), bool] */;
  %252 = multiply(%241, %242) /* ty=Tensor[(8, ?), int8] */;
  %253 = %246.1;
  %254 = @func_85(%250, %251) /* ty=Tensor[(2, 15, 6), bool] */;
  (%252, %247, %var_4718, %253, %254)
}

def @func_4134() -> (Tensor[(2, 15, 6), bool], Tensor[(13, 6, 14), bool]) {
  @func_4132() /* ty=(Tensor[(2, 15, 6), bool], Tensor[(13, 6, 14), bool]) */
}

def @func_3662(%var_3656: Tensor[(1080), uint64], %var_3657: Tensor[(1080), uint64], %var_3658: Tensor[(1092), uint64], %var_3659: Tensor[(432), float32], %var_3660: Tensor[(154, 9), int16], %var_3661: Tensor[(1260), bool]) -> (Tensor[(2, 4, 2), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), int64], Tensor[(13, 6, 14), bool], Tensor[(1092), uint64], Tensor[(2, 15, 6), bool], Tensor[(3, 12, 12), float32], Tensor[(432), float32], Tensor[(5, 4, 7), float64], Tensor[(140), uint8], Tensor[(14, 9, 11), bool], Tensor[(154, 9), int16], Tensor[(1080), uint64], Tensor[(1260), bool], Tensor[(1080), float64]) {
  @func_3654(%var_3656, %var_3657, %var_3658, %var_3659, %var_3660, %var_3661) /* ty=(Tensor[(2, 4, 2), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), int64], Tensor[(13, 6, 14), bool], Tensor[(1092), uint64], Tensor[(2, 15, 6), bool], Tensor[(3, 12, 12), float32], Tensor[(432), float32], Tensor[(5, 4, 7), float64], Tensor[(140), uint8], Tensor[(14, 9, 11), bool], Tensor[(154, 9), int16], Tensor[(1080), uint64], Tensor[(1260), bool], Tensor[(1080), float64]) */
}

def @func_5970() -> Tensor[(546, 2), uint64] {
  %256 = fn () -> Tensor[(546, 2), uint64] {
    %255 = @func_3166() /* ty=(Tensor[(2, 4, 2), float64], Tensor[(13, 6, 14), bool], Tensor[(546, 2), uint64]) */;
    %255.2
  };
  %256() /* ty=Tensor[(546, 2), uint64] */
}

def @func_88(%var_86: Tensor[(2, 15, 6), bool], %var_87: Tensor[(2, 15, 6), bool]) -> Tensor[(2, 15, 6), bool] {
  %261 = fn (%var_72: Tensor[(2, 15, 6), bool], %var_73: Tensor[(2, 15, 6), bool]) -> Tensor[(2, 15, 6), bool] {
    %257 = cast(%var_73, dtype="bool") /* ty=Tensor[(2, 15, 6), bool] */;
    %258 = shape_of(%var_72, dtype="int32") /* ty=Tensor[(3), int32] */;
    %259 = cast(%var_72, dtype="bool") /* ty=Tensor[(2, 15, 6), bool] */;
    %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%259, %260) /* ty=Tensor[(2, 15, 6), bool] */
  };
  %261(%var_86, %var_87) /* ty=Tensor[(2, 15, 6), bool] */
}

def @func_5705(%var_5666: Tensor[(10, 16, 7), float32], %var_5696: Tensor[(2, 15, 6), bool]) -> (Tensor[(10, 16, 7), float32], Tensor[(8, 15, 9), float64], Tensor[(2, 15, 6), int64]) {
  %262 = cast(%var_5666, dtype="float32") /* ty=Tensor[(10, 16, 7), float32] */;
  %263 = @func_4600() /* ty=(Tensor[(2, 15, 6), int8], Tensor[(180), bool], Tensor[(8, 15, 9), float64], Tensor[(14, 44), float64], Tensor[(2, 4, 2), float64]) */;
  %264 = @func_5434() /* ty=(Tensor[(2, 15, 6), bool],) */;
  %265 = %264.0;
  %266 = cast(%var_5696, dtype="int64") /* ty=Tensor[(2, 15, 6), int64] */;
  %267 = shape_of(%265, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%265, dtype="int64") /* ty=Tensor[(2, 15, 6), int64] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %270 = tan(%262) /* ty=Tensor[(10, 16, 7), float32] */;
  %271 = %263.2;
  %272 = right_shift(%268, %269) /* ty=Tensor[(2, 15, 6), int64] */;
  (%270, %271, %272)
}

def @func_6660(%var_6657: Tensor[(2, 15, 6), float32], %var_6658: Tensor[(1080), uint64], %var_6659: Tensor[(1092), uint64]) -> (Tensor[(2, 15, 6), int64], Tensor[(1080), int64], Tensor[(1080), uint64], Tensor[(1092), uint64], Tensor[(432), float32], Tensor[(1386), int16], Tensor[(1260), bool], Tensor[(11, 8, 16), float32], Tensor[(704, 2), float32], Tensor[(630), float32], Tensor[(630), float32]) {
  %304 = fn (%var_6599: Tensor[(2, 15, 6), float32], %var_6636: Tensor[(1080), uint64], %var_6637: Tensor[(1092), uint64]) -> (Tensor[(2, 15, 6), int64], Tensor[(1080), int64], Tensor[(1080), uint64], Tensor[(1092), uint64], Tensor[(432), float32], Tensor[(1386), int16], Tensor[(1260), bool], Tensor[(11, 8, 16), float32], Tensor[(704, 2), float32], Tensor[(630), float32], Tensor[(630), float32]) {
    %273 = @func_5434() /* ty=(Tensor[(2, 15, 6), bool],) */;
    %274 = %273.0;
    %275 = cast(%274, dtype="float32") /* ty=Tensor[(2, 15, 6), float32] */;
    %276 = sigmoid(%275) /* ty=Tensor[(2, 15, 6), float32] */;
    %277 = cast(%var_6599, dtype="int64") /* ty=Tensor[(2, 15, 6), int64] */;
    %278 = shape_of(%276, dtype="int32") /* ty=Tensor[(3), int32] */;
    %279 = cast(%276, dtype="int64") /* ty=Tensor[(2, 15, 6), int64] */;
    %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %281 = cast(%var_6636, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
    %282 = cast(%var_6636, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
    %283 = cast(%var_6637, dtype="uint64") /* ty=Tensor[(1092), uint64] */;
    %284 = cast(meta[relay.Constant][23] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
    %285 = cast(meta[relay.Constant][24] /* ty=Tensor[(1386), int16] */, dtype="int16") /* ty=Tensor[(1386), int16] */;
    %286 = cast(meta[relay.Constant][25] /* ty=Tensor[(1260), bool] */, dtype="bool") /* ty=Tensor[(1260), bool] */;
    %287 = reshape(%281, newshape=[1080]) /* ty=Tensor[(1080), uint64] */;
    %288 = reshape(%282, newshape=[1080]) /* ty=Tensor[(1080), uint64] */;
    %289 = reshape(%283, newshape=[1092]) /* ty=Tensor[(1092), uint64] */;
    %290 = reshape(%284, newshape=[432]) /* ty=Tensor[(432), float32] */;
    %291 = reshape(%285, newshape=[154, 9]) /* ty=Tensor[(154, 9), int16] */;
    %292 = reshape(%286, newshape=[1260]) /* ty=Tensor[(1260), bool] */;
    %293 = @func_3654(%287, %288, %289, %290, %291, %292) /* ty=(Tensor[(2, 4, 2), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), int64], Tensor[(13, 6, 14), bool], Tensor[(1092), uint64], Tensor[(2, 15, 6), bool], Tensor[(3, 12, 12), float32], Tensor[(432), float32], Tensor[(5, 4, 7), float64], Tensor[(140), uint8], Tensor[(14, 9, 11), bool], Tensor[(154, 9), int16], Tensor[(1080), uint64], Tensor[(1260), bool], Tensor[(1080), float64]) */;
    %294 = cast(meta[relay.Constant][26] /* ty=Tensor[(704, 2), float32] */, dtype="float32") /* ty=Tensor[(704, 2), float32] */;
    %295 = reshape(%294, newshape=[11, 8, 16]) /* ty=Tensor[(11, 8, 16), float32] */;
    %296 = @func_3985(%295) /* ty=(Tensor[(11, 8, 16), float32],) */;
    %297 = cast(meta[relay.Constant][27] /* ty=Tensor[(630), float32] */, dtype="float32") /* ty=Tensor[(630), float32] */;
    %298 = reshape(%297, newshape=[630]) /* ty=Tensor[(630), float32] */;
    %299 = @func_3881(%298) /* ty=(Tensor[(2, 15, 6), bool], Tensor[(6, 15, 7), float32], Tensor[(630), float32]) */;
    %300 = subtract(%279, %280) /* ty=Tensor[(2, 15, 6), int64] */;
    %301 = %293.2;
    %302 = %296.0;
    %303 = %299.2;
    (%300, %301, %var_6636, %var_6637, meta[relay.Constant][23] /* ty=Tensor[(432), float32] */, meta[relay.Constant][24] /* ty=Tensor[(1386), int16] */, meta[relay.Constant][25] /* ty=Tensor[(1260), bool] */, %302, meta[relay.Constant][26] /* ty=Tensor[(704, 2), float32] */, %303, meta[relay.Constant][27] /* ty=Tensor[(630), float32] */)
  };
  %304(%var_6657, %var_6658, %var_6659) /* ty=(Tensor[(2, 15, 6), int64], Tensor[(1080), int64], Tensor[(1080), uint64], Tensor[(1092), uint64], Tensor[(432), float32], Tensor[(1386), int16], Tensor[(1260), bool], Tensor[(11, 8, 16), float32], Tensor[(704, 2), float32], Tensor[(630), float32], Tensor[(630), float32]) */
}

def @func_6841() -> (Tensor[(13, 6, 14), float32],) {
  %305 = @func_5545() /* ty=(Tensor[(13, 6, 14), bool],) */;
  %306 = %305.0;
  %307 = cast(%306, dtype="float32") /* ty=Tensor[(13, 6, 14), float32] */;
  %308 = rsqrt(%307) /* ty=Tensor[(13, 6, 14), float32] */;
  (%308,)
}

def @func_6105() -> (Tensor[(2, 4, 2), float64], Tensor[(6, 15, 7), float32], Tensor[(630), float32]) {
  %309 = cast(meta[relay.Constant][28] /* ty=Tensor[(630), float32] */, dtype="float32") /* ty=Tensor[(630), float32] */;
  %310 = reshape(%309, newshape=[6, 15, 7]) /* ty=Tensor[(6, 15, 7), float32] */;
  %311 = @func_3069() /* ty=Tensor[(2, 4, 2), float64] */;
  %312 = @func_3496(%310) /* ty=Tensor[(6, 15, 7), float32] */;
  (%311, %312, meta[relay.Constant][28] /* ty=Tensor[(630), float32] */)
}

def @func_2930() -> (Tensor[(2, 4, 2), float64],) {
  @func_2928() /* ty=(Tensor[(2, 4, 2), float64],) */
}

def @func_7259() -> (Tensor[(546, 2), uint64],) {
  %314 = fn () -> (Tensor[(546, 2), uint64],) {
    %313 = @func_5195() /* ty=Tensor[(546, 2), uint64] */;
    (%313,)
  };
  %314() /* ty=(Tensor[(546, 2), uint64],) */
}

def @func_3972() -> (Tensor[(2, 10, 13), float32], Tensor[(65, 4), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64], Tensor[(5, 4, 7), float64], Tensor[(140), uint8], Tensor[(2, 4, 2), float64], Tensor[(5, 4, 7), float64]) {
  %315 = cast(meta[relay.Constant][29] /* ty=Tensor[(65, 4), float64] */, dtype="float64") /* ty=Tensor[(65, 4), float64] */;
  %316 = cast(meta[relay.Constant][29] /* ty=Tensor[(65, 4), float64] */, dtype="float64") /* ty=Tensor[(65, 4), float64] */;
  %317 = reshape(%315, newshape=[2, 10, 13]) /* ty=Tensor[(2, 10, 13), float64] */;
  %318 = reshape(%316, newshape=[2, 10, 13]) /* ty=Tensor[(2, 10, 13), float64] */;
  %319 = cast(meta[relay.Constant][30] /* ty=Tensor[(1080), uint64] */, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %320 = cast(meta[relay.Constant][30] /* ty=Tensor[(1080), uint64] */, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %321 = reshape(%319, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %322 = reshape(%320, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %323 = cast(meta[relay.Constant][31] /* ty=Tensor[(140), uint8] */, dtype="uint8") /* ty=Tensor[(140), uint8] */;
  %324 = reshape(%323, newshape=[5, 4, 7]) /* ty=Tensor[(5, 4, 7), uint8] */;
  %325 = @func_2370(%324) /* ty=(Tensor[(5, 4, 7), float64],) */;
  %326 = @func_3069() /* ty=Tensor[(2, 4, 2), float64] */;
  %327 = cast(%326, dtype="float64") /* ty=Tensor[(2, 4, 2), float64] */;
  %328 = %325.0;
  %329 = cast(%328, dtype="uint8") /* ty=Tensor[(5, 4, 7), uint8] */;
  %330 = reshape(%329, newshape=[5, 4, 7]) /* ty=Tensor[(5, 4, 7), uint8] */;
  %331 = @func_2370(%330) /* ty=(Tensor[(5, 4, 7), float64],) */;
  %332 = @func_3683(%317, %318) /* ty=Tensor[(2, 10, 13), float32] */;
  %333 = @func_708(%321, %322) /* ty=Tensor[(8, 15, 9), uint64] */;
  %334 = tan(%327) /* ty=Tensor[(2, 4, 2), float64] */;
  %335 = %331.0;
  (%332, meta[relay.Constant][29] /* ty=Tensor[(65, 4), float64] */, %333, meta[relay.Constant][30] /* ty=Tensor[(1080), uint64] */, %328, meta[relay.Constant][31] /* ty=Tensor[(140), uint8] */, %334, %335)
}

def @func_708(%var_703: Tensor[(8, 15, 9), uint64], %var_704: Tensor[(8, 15, 9), uint64]) -> Tensor[(8, 15, 9), uint64] {
  %336 = cast(%var_704, dtype="uint64") /* ty=Tensor[(8, 15, 9), uint64] */;
  %337 = shape_of(%var_703, dtype="int32") /* ty=Tensor[(3), int32] */;
  %338 = cast(%var_703, dtype="uint64") /* ty=Tensor[(8, 15, 9), uint64] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  minimum(%338, %339) /* ty=Tensor[(8, 15, 9), uint64] */
}

def @func_5545() -> (Tensor[(13, 6, 14), bool],) {
  %340 = @func_4132() /* ty=(Tensor[(2, 15, 6), bool], Tensor[(13, 6, 14), bool]) */;
  %341 = %340.1;
  (%341,)
}

def @func_6346() -> (Tensor[(630), float32],) {
  %342 = @func_6105() /* ty=(Tensor[(2, 4, 2), float64], Tensor[(6, 15, 7), float32], Tensor[(630), float32]) */;
  %343 = %342.2;
  (%343,)
}

def @func_4294(%var_4287: Tensor[(616), float64]) -> (Tensor[(8, 15, 9), float64], Tensor[(11, 4, 14), float64], Tensor[(616), float64]) {
  %344 = @func_3972() /* ty=(Tensor[(2, 10, 13), float32], Tensor[(65, 4), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64], Tensor[(5, 4, 7), float64], Tensor[(140), uint8], Tensor[(2, 4, 2), float64], Tensor[(5, 4, 7), float64]) */;
  %345 = %344.2;
  %346 = cast(meta[relay.Constant][32] /* ty=Tensor[(8, 15, 9), uint64] */, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
  %347 = shape_of(%345, dtype="int32") /* ty=Tensor[(3), int32] */;
  %348 = cast(%345, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %350 = cast(%var_4287, dtype="float64") /* ty=Tensor[(616), float64] */;
  %351 = reshape(%350, newshape=[11, 4, 14]) /* ty=Tensor[(11, 4, 14), float64] */;
  %352 = divide(%348, %349) /* ty=Tensor[(8, 15, 9), float64] */;
  %353 = @func_4253(%351) /* ty=Tensor[(11, 4, 14), float64] */;
  (%352, %353, %var_4287)
}

def @func_7229() -> (Tensor[(5, 4, 7), float32],) {
  %359 = fn () -> (Tensor[(5, 4, 7), float32],) {
    %354 = @func_5169() /* ty=Tensor[(5, 4, 7), float64] */;
    %355 = cast(%354, dtype="float64") /* ty=Tensor[(5, 4, 7), float64] */;
    %356 = log(%355) /* ty=Tensor[(5, 4, 7), float64] */;
    %357 = cast(%356, dtype="float32") /* ty=Tensor[(5, 4, 7), float32] */;
    %358 = exp(%357) /* ty=Tensor[(5, 4, 7), float32] */;
    (%358,)
  };
  %359() /* ty=(Tensor[(5, 4, 7), float32],) */
}

def @func_7697(%var_7648: Tensor[(2, 4, 2), float64]) -> (Tensor[(2, 4, 2), float32], Tensor[(2, 4, 2), float64], Tensor[(2, 4, 2), float64], Tensor[(1386), int16], Tensor[(14, 9, 11), float64]) {
  %360 = @func_6760() /* ty=Tensor[(2, 4, 2), float64] */;
  %361 = cast(%var_7648, dtype="float32") /* ty=Tensor[(2, 4, 2), float32] */;
  %362 = shape_of(%360, dtype="int32") /* ty=Tensor[(3), int32] */;
  %363 = cast(%360, dtype="float32") /* ty=Tensor[(2, 4, 2), float32] */;
  %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %365 = @func_2928() /* ty=(Tensor[(2, 4, 2), float64],) */;
  %366 = @func_3260() /* ty=(Tensor[(2, 4, 2), float64],) */;
  %367 = cast(meta[relay.Constant][33] /* ty=Tensor[(1386), int16] */, dtype="int16") /* ty=Tensor[(1386), int16] */;
  %368 = cast(meta[relay.Constant][33] /* ty=Tensor[(1386), int16] */, dtype="int16") /* ty=Tensor[(1386), int16] */;
  %369 = reshape(%367, newshape=[14, 9, 11]) /* ty=Tensor[(14, 9, 11), int16] */;
  %370 = reshape(%368, newshape=[14, 9, 11]) /* ty=Tensor[(14, 9, 11), int16] */;
  %371 = @func_3417(%369, %370) /* ty=Tensor[(14, 9, 11), bool] */;
  %372 = cast(%371, dtype="float64") /* ty=Tensor[(14, 9, 11), float64] */;
  %373 = floor_mod(%363, %364) /* ty=Tensor[(2, 4, 2), float32] */;
  %374 = %365.0;
  %375 = %366.0;
  %376 = cos(%372) /* ty=Tensor[(14, 9, 11), float64] */;
  (%373, %374, %375, meta[relay.Constant][33] /* ty=Tensor[(1386), int16] */, %376)
}

def @func_5196() -> Tensor[(546, 2), uint64] {
  %377 = fn () -> Tensor[(546, 2), uint64] {
    @func_5067() /* ty=Tensor[(546, 2), uint64] */
  };
  %377() /* ty=Tensor[(546, 2), uint64] */
}

def @func_4068(%var_4066: Tensor[(2, 4, 2), float64]) -> Tensor[(2, 4, 2), uint64] {
  @func_4065(%var_4066) /* ty=Tensor[(2, 4, 2), uint64] */
}

def @func_7630(%var_7627: Tensor[(770), float64], %var_7628: Tensor[(36), float64], %var_7629: Tensor[(180), bool]) -> (Tensor[(2, 4, 2), float64], Tensor[(8, 15, 9), uint64], Tensor[(770), float64], Tensor[(36), float64], Tensor[(1260), bool], Tensor[(1080), uint64], Tensor[(140), float64], Tensor[(180), bool]) {
  @func_7625(%var_7627, %var_7628, %var_7629) /* ty=(Tensor[(2, 4, 2), float64], Tensor[(8, 15, 9), uint64], Tensor[(770), float64], Tensor[(36), float64], Tensor[(1260), bool], Tensor[(1080), uint64], Tensor[(140), float64], Tensor[(180), bool]) */
}

def @func_3683(%var_3669: Tensor[(2, 10, 13), float64], %var_3670: Tensor[(2, 10, 13), float64]) -> Tensor[(2, 10, 13), float32] {
  %378 = cast(%var_3670, dtype="float64") /* ty=Tensor[(2, 10, 13), float64] */;
  %379 = shape_of(%var_3669, dtype="int32") /* ty=Tensor[(3), int32] */;
  %380 = cast(%var_3669, dtype="float64") /* ty=Tensor[(2, 10, 13), float64] */;
  %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %382 = power(%380, %381) /* ty=Tensor[(2, 10, 13), float64] */;
  %383 = cast(%var_3669, dtype="float32") /* ty=Tensor[(2, 10, 13), float32] */;
  %384 = shape_of(%382, dtype="int32") /* ty=Tensor[(3), int32] */;
  %385 = cast(%382, dtype="float32") /* ty=Tensor[(2, 10, 13), float32] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%385, %386) /* ty=Tensor[(2, 10, 13), float32] */
}

def @func_4883() -> (Tensor[(8, 15, 9), float64],) {
  %387 = @func_4600() /* ty=(Tensor[(2, 15, 6), int8], Tensor[(180), bool], Tensor[(8, 15, 9), float64], Tensor[(14, 44), float64], Tensor[(2, 4, 2), float64]) */;
  %388 = %387.2;
  (%388,)
}

def @func_3974() -> (Tensor[(2, 10, 13), float32], Tensor[(65, 4), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64], Tensor[(5, 4, 7), float64], Tensor[(140), uint8], Tensor[(2, 4, 2), float64], Tensor[(5, 4, 7), float64]) {
  @func_3972() /* ty=(Tensor[(2, 10, 13), float32], Tensor[(65, 4), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64], Tensor[(5, 4, 7), float64], Tensor[(140), uint8], Tensor[(2, 4, 2), float64], Tensor[(5, 4, 7), float64]) */
}

def @func_3406(%var_3404: Tensor[(36), float64], %var_3405: Tensor[(1260), bool]) -> (Tensor[(2, 4, 2), float32], Tensor[(2, 15, 6), bool], Tensor[(180), bool], Tensor[(2, 4, 2), float64], Tensor[(8, 15, 9), uint8], Tensor[(36), float64], Tensor[(1260), bool], Tensor[(2, 4, 2), uint8]) {
  @func_3402(%var_3404, %var_3405) /* ty=(Tensor[(2, 4, 2), float32], Tensor[(2, 15, 6), bool], Tensor[(180), bool], Tensor[(2, 4, 2), float64], Tensor[(8, 15, 9), uint8], Tensor[(36), float64], Tensor[(1260), bool], Tensor[(2, 4, 2), uint8]) */
}

def @func_4684(%var_4680: Tensor[(8, 13), float64]) -> Tensor[(8, 13), float64] {
  %389 = cast(%var_4680, dtype="float64") /* ty=Tensor[(8, 13), float64] */;
  asin(%389) /* ty=Tensor[(8, 13), float64] */
}

def @func_5646(%var_5645: Tensor[(180), bool]) -> (Tensor[(2, 4, 2), float64], Tensor[(9, 5, 7), float32], Tensor[(315), float32], Tensor[(2, 15, 6), bool], Tensor[(180), bool], Tensor[(180), bool]) {
  %401 = fn (%var_5628: Tensor[(180), bool]) -> (Tensor[(2, 4, 2), float64], Tensor[(9, 5, 7), float32], Tensor[(315), float32], Tensor[(2, 15, 6), bool], Tensor[(180), bool], Tensor[(180), bool]) {
    %390 = @func_4750() /* ty=(Tensor[(2, 4, 2), float64],) */;
    %391 = cast(meta[relay.Constant][34] /* ty=Tensor[(315), float32] */, dtype="float32") /* ty=Tensor[(315), float32] */;
    %392 = reshape(%391, newshape=[9, 5, 7]) /* ty=Tensor[(9, 5, 7), float32] */;
    %393 = @func_1776(%392) /* ty=(Tensor[(9, 5, 7), float32], Tensor[(3, 12, 12), float32], Tensor[(432), float32]) */;
    %394 = cast(%var_5628, dtype="bool") /* ty=Tensor[(180), bool] */;
    %395 = reshape(%394, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), bool] */;
    %396 = @func_4600() /* ty=(Tensor[(2, 15, 6), int8], Tensor[(180), bool], Tensor[(8, 15, 9), float64], Tensor[(14, 44), float64], Tensor[(2, 4, 2), float64]) */;
    %397 = %390.0;
    %398 = %393.0;
    %399 = @func_5003(%395) /* ty=Tensor[(2, 15, 6), bool] */;
    %400 = %396.1;
    (%397, %398, meta[relay.Constant][34] /* ty=Tensor[(315), float32] */, %399, %var_5628, %400)
  };
  %401(%var_5645) /* ty=(Tensor[(2, 4, 2), float64], Tensor[(9, 5, 7), float32], Tensor[(315), float32], Tensor[(2, 15, 6), bool], Tensor[(180), bool], Tensor[(180), bool]) */
}

def @func_5171() -> Tensor[(5, 4, 7), float64] {
  @func_5169() /* ty=Tensor[(5, 4, 7), float64] */
}

def @func_5435() -> (Tensor[(2, 15, 6), bool],) {
  %404 = fn () -> (Tensor[(2, 15, 6), bool],) {
    %402 = @func_4132() /* ty=(Tensor[(2, 15, 6), bool], Tensor[(13, 6, 14), bool]) */;
    %403 = %402.0;
    (%403,)
  };
  %404() /* ty=(Tensor[(2, 15, 6), bool],) */
}

def @func_3216() -> (Tensor[(13, 6, 14), bool], Tensor[(2, 15, 6), bool], Tensor[(180), bool]) {
  %405 = @func_3166() /* ty=(Tensor[(2, 4, 2), float64], Tensor[(13, 6, 14), bool], Tensor[(546, 2), uint64]) */;
  %406 = cast(meta[relay.Constant][35] /* ty=Tensor[(180), bool] */, dtype="bool") /* ty=Tensor[(180), bool] */;
  %407 = cast(meta[relay.Constant][35] /* ty=Tensor[(180), bool] */, dtype="bool") /* ty=Tensor[(180), bool] */;
  %408 = reshape(%406, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), bool] */;
  %409 = reshape(%407, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), bool] */;
  %410 = %405.1;
  %411 = @func_85(%408, %409) /* ty=Tensor[(2, 15, 6), bool] */;
  (%410, %411, meta[relay.Constant][35] /* ty=Tensor[(180), bool] */)
}

def @func_4297(%var_4295: Tensor[(616), float64]) -> (Tensor[(8, 15, 9), float64], Tensor[(11, 4, 14), float64], Tensor[(616), float64]) {
  @func_4294(%var_4295) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(11, 4, 14), float64], Tensor[(616), float64]) */
}

def @func_679(%var_674: Tensor[(3, 12, 12), float32]) -> (Tensor[(3, 12, 12), float32], Tensor[(3, 12, 12), int16]) {
  %412 = cast(meta[relay.Constant][36] /* ty=Tensor[(3, 12, 12), float32] */, dtype="float32") /* ty=Tensor[(3, 12, 12), float32] */;
  %413 = cast(%var_674, dtype="int16") /* ty=Tensor[(3, 12, 12), int16] */;
  %414 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(3, 12, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %415 = cast(meta[relay.Constant][36] /* ty=Tensor[(3, 12, 12), float32] */, dtype="int16") /* ty=Tensor[(3, 12, 12), int16] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %417 = atan(%412) /* ty=Tensor[(3, 12, 12), float32] */;
  %418 = subtract(%415, %416) /* ty=Tensor[(3, 12, 12), int16] */;
  (%417, %418)
}

def @func_3987(%var_3986: Tensor[(11, 8, 16), float32]) -> (Tensor[(11, 8, 16), float32],) {
  %421 = fn (%var_3977: Tensor[(11, 8, 16), float32]) -> (Tensor[(11, 8, 16), float32],) {
    %419 = cast(%var_3977, dtype="float32") /* ty=Tensor[(11, 8, 16), float32] */;
    %420 = erf(%419) /* ty=Tensor[(11, 8, 16), float32] */;
    (%420,)
  };
  %421(%var_3986) /* ty=(Tensor[(11, 8, 16), float32],) */
}

def @func_4256(%var_4254: Tensor[(11, 4, 14), float64]) -> Tensor[(11, 4, 14), float64] {
  @func_4253(%var_4254) /* ty=Tensor[(11, 4, 14), float64] */
}

def @func_6815() -> Tensor[(2, 15, 6), bool] {
  @func_6813() /* ty=Tensor[(2, 15, 6), bool] */
}

def @func_7019(%var_7018: Tensor[(1080), uint64]) -> (Tensor[(13, 6, 14), float32], Tensor[(3, 12, 12), float32], Tensor[(1080), uint64], Tensor[(11, 4, 14), float64], Tensor[(616), float64], Tensor[(1080), uint64]) {
  %435 = fn (%var_7000: Tensor[(1080), uint64]) -> (Tensor[(13, 6, 14), float32], Tensor[(3, 12, 12), float32], Tensor[(1080), uint64], Tensor[(11, 4, 14), float64], Tensor[(616), float64], Tensor[(1080), uint64]) {
    %422 = @func_6841() /* ty=(Tensor[(13, 6, 14), float32],) */;
    %423 = cast(%var_7000, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
    %424 = reshape(%423, newshape=[1080]) /* ty=Tensor[(1080), uint64] */;
    %425 = @func_6710(%424) /* ty=(Tensor[(2, 4, 2), float64], Tensor[(2, 4, 2), float64], Tensor[(2, 4, 2), float64], Tensor[(8, 15, 9), uint64], Tensor[(180), bool], Tensor[(1080), uint64], Tensor[(3, 12, 12), float32], Tensor[(432), float32], Tensor[(8, 15, 9), uint64]) */;
    %426 = cast(meta[relay.Constant][37] /* ty=Tensor[(616), float64] */, dtype="float64") /* ty=Tensor[(616), float64] */;
    %427 = reshape(%426, newshape=[11, 4, 14]) /* ty=Tensor[(11, 4, 14), float64] */;
    %428 = cast(%var_7000, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
    %429 = reshape(%428, newshape=[1080]) /* ty=Tensor[(1080), uint64] */;
    %430 = @func_3844(%429) /* ty=(Tensor[(2, 4, 2), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64]) */;
    %431 = %422.0;
    %432 = %425.6;
    %433 = @func_4253(%427) /* ty=Tensor[(11, 4, 14), float64] */;
    %434 = %430.2;
    (%431, %432, %var_7000, %433, meta[relay.Constant][37] /* ty=Tensor[(616), float64] */, %434)
  };
  %435(%var_7018) /* ty=(Tensor[(13, 6, 14), float32], Tensor[(3, 12, 12), float32], Tensor[(1080), uint64], Tensor[(11, 4, 14), float64], Tensor[(616), float64], Tensor[(1080), uint64]) */
}

def @func_7452(%var_7450: Tensor[(13, 3, 1), int32], %var_7451: Tensor[(13, 3, 8), int32]) -> (Tensor[(13, 3, 8), int32],) {
  %439 = fn (%var_7444: Tensor[(13, 3, 1), int32], %var_7445: Tensor[(13, 3, 8), int32]) -> (Tensor[(13, 3, 8), int32],) {
    %436 = cast(%var_7444, dtype="int32") /* ty=Tensor[(13, 3, 1), int32] */;
    %437 = cast(%var_7445, dtype="int32") /* ty=Tensor[(13, 3, 8), int32] */;
    %438 = bitwise_or(%436, %437) /* ty=Tensor[(13, 3, 8), int32] */;
    (%438,)
  };
  %439(%var_7450, %var_7451) /* ty=(Tensor[(13, 3, 8), int32],) */
}

def @func_4485(%var_4484: Tensor[(2, 15, 6), bool]) -> (Tensor[(2, 15, 6), int8],) {
  %447 = fn (%var_4477: Tensor[(2, 15, 6), bool]) -> (Tensor[(2, 15, 6), int8],) {
    %440 = @func_3216() /* ty=(Tensor[(13, 6, 14), bool], Tensor[(2, 15, 6), bool], Tensor[(180), bool]) */;
    %441 = %440.1;
    %442 = cast(%var_4477, dtype="int8") /* ty=Tensor[(2, 15, 6), int8] */;
    %443 = shape_of(%441, dtype="int32") /* ty=Tensor[(3), int32] */;
    %444 = cast(%441, dtype="int8") /* ty=Tensor[(2, 15, 6), int8] */;
    %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %446 = bitwise_and(%444, %445) /* ty=Tensor[(2, 15, 6), int8] */;
    (%446,)
  };
  %447(%var_4484) /* ty=(Tensor[(2, 15, 6), int8],) */
}

def @func_1582(%var_1579: Tensor[(2, 2, 9), float64], %var_1580: Tensor[(6, 30), bool], %var_1581: Tensor[(90, 14), bool]) -> (Tensor[(2, 2, 9), float64], Tensor[(8, 15, 9), uint64], Tensor[(8, 15, 9), uint64], Tensor[(2, 15, 6), bool], Tensor[(6, 30), bool], Tensor[(9, 14, 10), float64], Tensor[(90, 14), bool], Tensor[(8, 15, 9), uint8], Tensor[(540, 2), float32]) {
  %485 = fn (%var_1512: Tensor[(2, 2, 9), float64], %var_1542: Tensor[(6, 30), bool], %var_1558: Tensor[(90, 14), bool]) -> (Tensor[(2, 2, 9), float64], Tensor[(8, 15, 9), uint64], Tensor[(8, 15, 9), uint64], Tensor[(2, 15, 6), bool], Tensor[(6, 30), bool], Tensor[(9, 14, 10), float64], Tensor[(90, 14), bool], Tensor[(8, 15, 9), uint8], Tensor[(540, 2), float32]) {
    %448 = cast(%var_1512, dtype="float64") /* ty=Tensor[(2, 2, 9), float64] */;
    %449 = cast(meta[relay.Constant][38] /* ty=Tensor[(540, 2), uint64] */, dtype="uint64") /* ty=Tensor[(540, 2), uint64] */;
    %450 = cast(meta[relay.Constant][38] /* ty=Tensor[(540, 2), uint64] */, dtype="uint64") /* ty=Tensor[(540, 2), uint64] */;
    %451 = reshape(%449, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
    %452 = reshape(%450, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
    %453 = cast(meta[relay.Constant][38] /* ty=Tensor[(540, 2), uint64] */, dtype="uint64") /* ty=Tensor[(540, 2), uint64] */;
    %454 = @func_708(%451, %452) /* ty=Tensor[(8, 15, 9), uint64] */;
    %455 = cast(%454, dtype="uint64") /* ty=Tensor[(8, 15, 9), uint64] */;
    %456 = reshape(%453, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
    %457 = reshape(%455, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
    %458 = cast(%var_1542, dtype="bool") /* ty=Tensor[(6, 30), bool] */;
    %459 = cast(%var_1542, dtype="bool") /* ty=Tensor[(6, 30), bool] */;
    %460 = reshape(%458, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), bool] */;
    %461 = reshape(%459, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), bool] */;
    %462 = cast(%var_1558, dtype="bool") /* ty=Tensor[(90, 14), bool] */;
    %463 = cast(%454, dtype="uint64") /* ty=Tensor[(8, 15, 9), uint64] */;
    %464 = @func_708(%456, %457) /* ty=Tensor[(8, 15, 9), uint64] */;
    %465 = cast(%464, dtype="uint64") /* ty=Tensor[(8, 15, 9), uint64] */;
    %466 = reshape(%463, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
    %467 = reshape(%465, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
    %468 = @func_708(%466, %467) /* ty=Tensor[(8, 15, 9), uint64] */;
    %469 = cast(%468, dtype="uint64") /* ty=Tensor[(8, 15, 9), uint64] */;
    %470 = reshape(%462, newshape=[9, 14, 10]) /* ty=Tensor[(9, 14, 10), bool] */;
    %471 = reshape(%469, newshape=[1080]) /* ty=Tensor[(1080), uint64] */;
    %472 = @func_1434(%470, %471) /* ty=(Tensor[(9, 14, 10), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64]) */;
    %473 = cast(meta[relay.Constant][38] /* ty=Tensor[(540, 2), uint64] */, dtype="float32") /* ty=Tensor[(540, 2), float32] */;
    %474 = log10(%473) /* ty=Tensor[(540, 2), float32] */;
    %475 = cast(%474, dtype="uint8") /* ty=Tensor[(540, 2), uint8] */;
    %476 = shape_of(%468, dtype="int32") /* ty=Tensor[(3), int32] */;
    %477 = cast(%468, dtype="uint8") /* ty=Tensor[(8, 15, 9), uint8] */;
    %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %479 = cast(%474, dtype="float32") /* ty=Tensor[(540, 2), float32] */;
    %480 = sinh(%448) /* ty=Tensor[(2, 2, 9), float64] */;
    %481 = @func_85(%460, %461) /* ty=Tensor[(2, 15, 6), bool] */;
    %482 = %472.0;
    %483 = bitwise_xor(%477, %478) /* ty=Tensor[(8, 15, 9), uint8] */;
    %484 = acos(%479) /* ty=Tensor[(540, 2), float32] */;
    (%480, %454, %464, %481, %var_1542, %482, %var_1558, %483, %484)
  };
  %485(%var_1579, %var_1580, %var_1581) /* ty=(Tensor[(2, 2, 9), float64], Tensor[(8, 15, 9), uint64], Tensor[(8, 15, 9), uint64], Tensor[(2, 15, 6), bool], Tensor[(6, 30), bool], Tensor[(9, 14, 10), float64], Tensor[(90, 14), bool], Tensor[(8, 15, 9), uint8], Tensor[(540, 2), float32]) */
}

def @func_3421(%var_3419: Tensor[(14, 9, 11), int16], %var_3420: Tensor[(14, 9, 11), int16]) -> Tensor[(14, 9, 11), bool] {
  @func_3417(%var_3419, %var_3420) /* ty=Tensor[(14, 9, 11), bool] */
}

def @func_4750() -> (Tensor[(2, 4, 2), float64],) {
  %486 = @func_3260() /* ty=(Tensor[(2, 4, 2), float64],) */;
  %487 = %486.0;
  (%487,)
}

def @func_4669() -> (Tensor[(13, 6, 14), bool],) {
  %488 = @func_4132() /* ty=(Tensor[(2, 15, 6), bool], Tensor[(13, 6, 14), bool]) */;
  %489 = %488.1;
  (%489,)
}

def @func_6712(%var_6711: Tensor[(1080), uint64]) -> (Tensor[(2, 4, 2), float64], Tensor[(2, 4, 2), float64], Tensor[(2, 4, 2), float64], Tensor[(8, 15, 9), uint64], Tensor[(180), bool], Tensor[(1080), uint64], Tensor[(3, 12, 12), float32], Tensor[(432), float32], Tensor[(8, 15, 9), uint64]) {
  %510 = fn (%var_6696: Tensor[(1080), uint64]) -> (Tensor[(2, 4, 2), float64], Tensor[(2, 4, 2), float64], Tensor[(2, 4, 2), float64], Tensor[(8, 15, 9), uint64], Tensor[(180), bool], Tensor[(1080), uint64], Tensor[(3, 12, 12), float32], Tensor[(432), float32], Tensor[(8, 15, 9), uint64]) {
    %490 = @func_3260() /* ty=(Tensor[(2, 4, 2), float64],) */;
    %491 = @func_2928() /* ty=(Tensor[(2, 4, 2), float64],) */;
    %492 = cast(meta[relay.Constant][39] /* ty=Tensor[(180), bool] */, dtype="bool") /* ty=Tensor[(180), bool] */;
    %493 = cast(%var_6696, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
    %494 = reshape(%492, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), bool] */;
    %495 = reshape(%493, newshape=[1080]) /* ty=Tensor[(1080), uint64] */;
    %496 = @func_6404(%494, %495) /* ty=(Tensor[(2, 15, 6), bool], Tensor[(13, 6, 14), bool], Tensor[(2, 15, 6), int8], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64]) */;
    %497 = cast(meta[relay.Constant][40] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
    %498 = reshape(%497, newshape=[3, 12, 12]) /* ty=Tensor[(3, 12, 12), float32] */;
    %499 = @func_679(%498) /* ty=(Tensor[(3, 12, 12), float32], Tensor[(3, 12, 12), int16]) */;
    %500 = cast(%var_6696, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
    %501 = %496.3;
    %502 = cast(%501, dtype="uint64") /* ty=Tensor[(8, 15, 9), uint64] */;
    %503 = reshape(%500, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
    %504 = reshape(%502, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
    %505 = %490.0;
    %506 = @func_3069() /* ty=Tensor[(2, 4, 2), float64] */;
    %507 = %491.0;
    %508 = %499.0;
    %509 = @func_708(%503, %504) /* ty=Tensor[(8, 15, 9), uint64] */;
    (%505, %506, %507, %501, meta[relay.Constant][39] /* ty=Tensor[(180), bool] */, %var_6696, %508, meta[relay.Constant][40] /* ty=Tensor[(432), float32] */, %509)
  };
  %510(%var_6711) /* ty=(Tensor[(2, 4, 2), float64], Tensor[(2, 4, 2), float64], Tensor[(2, 4, 2), float64], Tensor[(8, 15, 9), uint64], Tensor[(180), bool], Tensor[(1080), uint64], Tensor[(3, 12, 12), float32], Tensor[(432), float32], Tensor[(8, 15, 9), uint64]) */
}

def @func_2342(%var_2338: Tensor[(10, 8, 5), float32], %var_2339: Tensor[(10, 8, 5), float32], %var_2340: Tensor[(1, 315), float32], %var_2341: Tensor[(36), float64]) -> (Tensor[(8, 15, 9), uint64], Tensor[(1260), bool], Tensor[(270, 4), uint64], Tensor[(10, 8, 5), float64], Tensor[(3, 12, 12), float32], Tensor[(12, 36), float32], Tensor[(9, 5, 7), float32], Tensor[(1, 315), float32], Tensor[(10, 8, 5), float64], Tensor[(8, 15, 9), uint64], Tensor[(10, 8, 5), float64], Tensor[(3, 12, 12), float32], Tensor[(10, 8, 5), float32], Tensor[(9, 14, 10), float64], Tensor[(6, 30), bool], Tensor[(36), float64], Tensor[(6, 30), bool], Tensor[(8, 15, 9), uint64]) {
  @func_2336(%var_2338, %var_2339, %var_2340, %var_2341) /* ty=(Tensor[(8, 15, 9), uint64], Tensor[(1260), bool], Tensor[(270, 4), uint64], Tensor[(10, 8, 5), float64], Tensor[(3, 12, 12), float32], Tensor[(12, 36), float32], Tensor[(9, 5, 7), float32], Tensor[(1, 315), float32], Tensor[(10, 8, 5), float64], Tensor[(8, 15, 9), uint64], Tensor[(10, 8, 5), float64], Tensor[(3, 12, 12), float32], Tensor[(10, 8, 5), float32], Tensor[(9, 14, 10), float64], Tensor[(6, 30), bool], Tensor[(36), float64], Tensor[(6, 30), bool], Tensor[(8, 15, 9), uint64]) */
}

def @func_4132() -> (Tensor[(2, 15, 6), bool], Tensor[(13, 6, 14), bool]) {
  %511 = @func_3216() /* ty=(Tensor[(13, 6, 14), bool], Tensor[(2, 15, 6), bool], Tensor[(180), bool]) */;
  %512 = @func_3166() /* ty=(Tensor[(2, 4, 2), float64], Tensor[(13, 6, 14), bool], Tensor[(546, 2), uint64]) */;
  %513 = %511.1;
  %514 = %512.1;
  (%513, %514)
}

def @func_7087() -> Tensor[(546, 2), float32] {
  @func_7085() /* ty=Tensor[(546, 2), float32] */
}

def @func_3070() -> Tensor[(2, 4, 2), float64] {
  %518 = fn () -> Tensor[(2, 4, 2), float64] {
    %515 = @func_2928() /* ty=(Tensor[(2, 4, 2), float64],) */;
    %516 = %515.0;
    %517 = cast(%516, dtype="float64") /* ty=Tensor[(2, 4, 2), float64] */;
    asin(%517) /* ty=Tensor[(2, 4, 2), float64] */
  };
  %518() /* ty=Tensor[(2, 4, 2), float64] */
}

def @func_6903(%var_6902: Tensor[(546, 2), uint64]) -> (Tensor[(5, 4, 7), float64], Tensor[(546, 2), float64], Tensor[(546, 2), uint8], Tensor[(2, 4, 2), float64]) {
  %541 = fn (%var_6866: Tensor[(546, 2), uint64]) -> (Tensor[(5, 4, 7), float64], Tensor[(546, 2), float64], Tensor[(546, 2), uint8], Tensor[(2, 4, 2), float64]) {
    %519 = @func_3972() /* ty=(Tensor[(2, 10, 13), float32], Tensor[(65, 4), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64], Tensor[(5, 4, 7), float64], Tensor[(140), uint8], Tensor[(2, 4, 2), float64], Tensor[(5, 4, 7), float64]) */;
    %520 = @func_6800() /* ty=Tensor[(546, 2), uint64] */;
    %521 = cast(%var_6866, dtype="uint8") /* ty=Tensor[(546, 2), uint8] */;
    %522 = shape_of(%520, dtype="int32") /* ty=Tensor[(2), int32] */;
    %523 = cast(%520, dtype="uint8") /* ty=Tensor[(546, 2), uint8] */;
    %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %525 = minimum(%523, %524) /* ty=Tensor[(546, 2), uint8] */;
    %526 = cast(%525, dtype="uint64") /* ty=Tensor[(546, 2), uint64] */;
    %527 = cast(%520, dtype="uint64") /* ty=Tensor[(546, 2), uint64] */;
    %528 = reshape(%526, newshape=[546, 2]) /* ty=Tensor[(546, 2), uint64] */;
    %529 = reshape(%527, newshape=[546, 2]) /* ty=Tensor[(546, 2), uint64] */;
    %530 = @func_6240(%528, %529) /* ty=(Tensor[(546, 2), uint32], Tensor[(546, 2), float64]) */;
    %531 = cast(%525, dtype="float64") /* ty=Tensor[(546, 2), float64] */;
    %532 = log2(%531) /* ty=Tensor[(546, 2), float64] */;
    %533 = cast(meta[relay.Constant][41] /* ty=Tensor[(546, 2), float64] */, dtype="uint8") /* ty=Tensor[(546, 2), uint8] */;
    %534 = shape_of(%532, dtype="int32") /* ty=Tensor[(2), int32] */;
    %535 = cast(%532, dtype="uint8") /* ty=Tensor[(546, 2), uint8] */;
    %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %537 = %519.4;
    %538 = %530.1;
    %539 = left_shift(%535, %536) /* ty=Tensor[(546, 2), uint8] */;
    %540 = @func_3069() /* ty=Tensor[(2, 4, 2), float64] */;
    (%537, %538, %539, %540)
  };
  %541(%var_6902) /* ty=(Tensor[(5, 4, 7), float64], Tensor[(546, 2), float64], Tensor[(546, 2), uint8], Tensor[(2, 4, 2), float64]) */
}

def @func_1437(%var_1435: Tensor[(9, 14, 10), bool], %var_1436: Tensor[(1080), uint64]) -> (Tensor[(9, 14, 10), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64]) {
  %559 = fn (%var_1418: Tensor[(9, 14, 10), bool], %var_1429: Tensor[(1080), uint64]) -> (Tensor[(9, 14, 10), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64]) {
    %542 = cast(meta[relay.Constant][42] /* ty=Tensor[(9, 14, 10), float32] */, dtype="float32") /* ty=Tensor[(9, 14, 10), float32] */;
    %543 = sin(%542) /* ty=Tensor[(9, 14, 10), float32] */;
    %544 = cast(%543, dtype="bool") /* ty=Tensor[(9, 14, 10), bool] */;
    %545 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(9, 14, 10), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %546 = cast(meta[relay.Constant][42] /* ty=Tensor[(9, 14, 10), float32] */, dtype="bool") /* ty=Tensor[(9, 14, 10), bool] */;
    %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %548 = less(%546, %547) /* ty=Tensor[(9, 14, 10), bool] */;
    %549 = cast(%var_1418, dtype="float64") /* ty=Tensor[(9, 14, 10), float64] */;
    %550 = shape_of(%548, dtype="int32") /* ty=Tensor[(3), int32] */;
    %551 = cast(%548, dtype="float64") /* ty=Tensor[(9, 14, 10), float64] */;
    %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %553 = cast(%var_1429, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
    %554 = cast(%var_1429, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
    %555 = reshape(%553, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
    %556 = reshape(%554, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
    %557 = subtract(%551, %552) /* ty=Tensor[(9, 14, 10), float64] */;
    %558 = @func_708(%555, %556) /* ty=Tensor[(8, 15, 9), uint64] */;
    (%557, %558, %var_1429)
  };
  %559(%var_1435, %var_1436) /* ty=(Tensor[(9, 14, 10), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64]) */
}

def @func_7459() -> (Tensor[(5, 4, 7), float64],) {
  %561 = fn () -> (Tensor[(5, 4, 7), float64],) {
    %560 = @func_5169() /* ty=Tensor[(5, 4, 7), float64] */;
    (%560,)
  };
  %561() /* ty=(Tensor[(5, 4, 7), float64],) */
}

def @func_7085() -> Tensor[(546, 2), float32] {
  %562 = @func_5067() /* ty=Tensor[(546, 2), uint64] */;
  %563 = cast(%562, dtype="float32") /* ty=Tensor[(546, 2), float32] */;
  exp(%563) /* ty=Tensor[(546, 2), float32] */
}

def @func_6760() -> Tensor[(2, 4, 2), float64] {
  %564 = @func_3260() /* ty=(Tensor[(2, 4, 2), float64],) */;
  %564.0
}

def @func_5857(%var_5855: Tensor[(1092), uint64]) -> (Tensor[(2, 4, 2), float64], Tensor[(13, 6, 14), bool], Tensor[(1092), uint64]) {
  @func_5854(%var_5855) /* ty=(Tensor[(2, 4, 2), float64], Tensor[(13, 6, 14), bool], Tensor[(1092), uint64]) */
}

def @func_3654(%var_3569: Tensor[(1080), uint64], %var_3573: Tensor[(1080), uint64], %var_3587: Tensor[(1092), uint64], %var_3623: Tensor[(432), float32], %var_3636: Tensor[(154, 9), int16], %var_3640: Tensor[(1260), bool]) -> (Tensor[(2, 4, 2), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), int64], Tensor[(13, 6, 14), bool], Tensor[(1092), uint64], Tensor[(2, 15, 6), bool], Tensor[(3, 12, 12), float32], Tensor[(432), float32], Tensor[(5, 4, 7), float64], Tensor[(140), uint8], Tensor[(14, 9, 11), bool], Tensor[(154, 9), int16], Tensor[(1080), uint64], Tensor[(1260), bool], Tensor[(1080), float64]) {
  %565 = @func_2928() /* ty=(Tensor[(2, 4, 2), float64],) */;
  %566 = cast(%var_3569, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %567 = cast(%var_3569, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %568 = reshape(%566, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %569 = reshape(%567, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %570 = cast(%var_3573, dtype="int64") /* ty=Tensor[(1080), int64] */;
  %571 = shape_of(%var_3569, dtype="int32") /* ty=Tensor[(1), int32] */;
  %572 = cast(%var_3569, dtype="int64") /* ty=Tensor[(1080), int64] */;
  %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?), int64] */;
  %574 = cast(%var_3587, dtype="uint64") /* ty=Tensor[(1092), uint64] */;
  %575 = cast(%var_3587, dtype="uint64") /* ty=Tensor[(1092), uint64] */;
  %576 = reshape(%574, newshape=[13, 6, 14]) /* ty=Tensor[(13, 6, 14), uint64] */;
  %577 = reshape(%575, newshape=[13, 6, 14]) /* ty=Tensor[(13, 6, 14), uint64] */;
  %578 = @func_2752(%576, %577) /* ty=(Tensor[(13, 6, 14), bool],) */;
  %579 = @func_3216() /* ty=(Tensor[(13, 6, 14), bool], Tensor[(2, 15, 6), bool], Tensor[(180), bool]) */;
  %580 = cast(%var_3623, dtype="float32") /* ty=Tensor[(432), float32] */;
  %581 = reshape(%580, newshape=[3, 12, 12]) /* ty=Tensor[(3, 12, 12), float32] */;
  %582 = @func_679(%581) /* ty=(Tensor[(3, 12, 12), float32], Tensor[(3, 12, 12), int16]) */;
  %583 = cast(meta[relay.Constant][43] /* ty=Tensor[(140), uint8] */, dtype="uint8") /* ty=Tensor[(140), uint8] */;
  %584 = reshape(%583, newshape=[5, 4, 7]) /* ty=Tensor[(5, 4, 7), uint8] */;
  %585 = @func_2370(%584) /* ty=(Tensor[(5, 4, 7), float64],) */;
  %586 = cast(%var_3636, dtype="int16") /* ty=Tensor[(154, 9), int16] */;
  %587 = cast(%var_3636, dtype="int16") /* ty=Tensor[(154, 9), int16] */;
  %588 = reshape(%586, newshape=[14, 9, 11]) /* ty=Tensor[(14, 9, 11), int16] */;
  %589 = reshape(%587, newshape=[14, 9, 11]) /* ty=Tensor[(14, 9, 11), int16] */;
  %590 = cast(%var_3640, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %591 = bitwise_and(%572, %573) /* ty=Tensor[(1080), int64] */;
  %592 = cast(%591, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %593 = reshape(%590, newshape=[9, 14, 10]) /* ty=Tensor[(9, 14, 10), bool] */;
  %594 = reshape(%592, newshape=[1080]) /* ty=Tensor[(1080), uint64] */;
  %595 = @func_1434(%593, %594) /* ty=(Tensor[(9, 14, 10), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64]) */;
  %596 = cast(%var_3573, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %597 = atanh(%596) /* ty=Tensor[(1080), float32] */;
  %598 = cast(%597, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %599 = %565.0;
  %600 = @func_708(%568, %569) /* ty=Tensor[(8, 15, 9), uint64] */;
  %601 = %578.0;
  %602 = %579.1;
  %603 = %582.0;
  %604 = %585.0;
  %605 = @func_3417(%588, %589) /* ty=Tensor[(14, 9, 11), bool] */;
  %606 = %595.2;
  %607 = atan(%598) /* ty=Tensor[(1080), float64] */;
  (%599, %600, %591, %601, %var_3587, %602, %603, %var_3623, %604, meta[relay.Constant][43] /* ty=Tensor[(140), uint8] */, %605, %var_3636, %606, %var_3640, %607)
}

def @func_7728() -> Tensor[(6, 9, 12), float64] {
  %609 = fn () -> Tensor[(6, 9, 12), float64] {
    %608 = cast(meta[relay.Constant][44] /* ty=Tensor[(6, 9, 12), float64] */, dtype="float64") /* ty=Tensor[(6, 9, 12), float64] */;
    asin(%608) /* ty=Tensor[(6, 9, 12), float64] */
  };
  %609() /* ty=Tensor[(6, 9, 12), float64] */
}

def @func_7171() -> (Tensor[(1080), uint64], Tensor[(546, 2), float64], Tensor[(546, 2), bool]) {
  %622 = fn () -> (Tensor[(1080), uint64], Tensor[(546, 2), float64], Tensor[(546, 2), bool]) {
    %610 = @func_5572() /* ty=(Tensor[(1080), uint64], Tensor[(2, 15, 6), bool]) */;
    %611 = @func_5195() /* ty=Tensor[(546, 2), uint64] */;
    %612 = cast(%611, dtype="float32") /* ty=Tensor[(546, 2), float32] */;
    %613 = tan(%612) /* ty=Tensor[(546, 2), float32] */;
    %614 = cast(%613, dtype="float64") /* ty=Tensor[(546, 2), float64] */;
    %615 = cast(%611, dtype="bool") /* ty=Tensor[(546, 2), bool] */;
    %616 = shape_of(%613, dtype="int32") /* ty=Tensor[(2), int32] */;
    %617 = cast(%613, dtype="bool") /* ty=Tensor[(546, 2), bool] */;
    %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %619 = %610.0;
    %620 = acos(%614) /* ty=Tensor[(546, 2), float64] */;
    %621 = not_equal(%617, %618) /* ty=Tensor[(546, 2), bool] */;
    (%619, %620, %621)
  };
  %622() /* ty=(Tensor[(1080), uint64], Tensor[(546, 2), float64], Tensor[(546, 2), bool]) */
}

def @func_5573() -> (Tensor[(1080), uint64], Tensor[(2, 15, 6), bool]) {
  %627 = fn () -> (Tensor[(1080), uint64], Tensor[(2, 15, 6), bool]) {
    %623 = @func_3972() /* ty=(Tensor[(2, 10, 13), float32], Tensor[(65, 4), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64], Tensor[(5, 4, 7), float64], Tensor[(140), uint8], Tensor[(2, 4, 2), float64], Tensor[(5, 4, 7), float64]) */;
    %624 = @func_4132() /* ty=(Tensor[(2, 15, 6), bool], Tensor[(13, 6, 14), bool]) */;
    %625 = %623.3;
    %626 = %624.0;
    (%625, %626)
  };
  %627() /* ty=(Tensor[(1080), uint64], Tensor[(2, 15, 6), bool]) */
}

def @func_6404(%var_6356: Tensor[(2, 15, 6), bool], %var_6398: Tensor[(1080), uint64]) -> (Tensor[(2, 15, 6), bool], Tensor[(13, 6, 14), bool], Tensor[(2, 15, 6), int8], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64]) {
  %628 = @func_3216() /* ty=(Tensor[(13, 6, 14), bool], Tensor[(2, 15, 6), bool], Tensor[(180), bool]) */;
  %629 = %628.1;
  %630 = cast(%var_6356, dtype="float64") /* ty=Tensor[(2, 15, 6), float64] */;
  %631 = shape_of(%629, dtype="int32") /* ty=Tensor[(3), int32] */;
  %632 = cast(%629, dtype="float64") /* ty=Tensor[(2, 15, 6), float64] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %634 = floor_mod(%632, %633) /* ty=Tensor[(2, 15, 6), float64] */;
  %635 = cast(%var_6356, dtype="bool") /* ty=Tensor[(2, 15, 6), bool] */;
  %636 = shape_of(%634, dtype="int32") /* ty=Tensor[(3), int32] */;
  %637 = cast(%634, dtype="bool") /* ty=Tensor[(2, 15, 6), bool] */;
  %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %639 = @func_4669() /* ty=(Tensor[(13, 6, 14), bool],) */;
  %640 = cast(%629, dtype="float32") /* ty=Tensor[(2, 15, 6), float32] */;
  %641 = asinh(%640) /* ty=Tensor[(2, 15, 6), float32] */;
  %642 = cast(%634, dtype="int8") /* ty=Tensor[(2, 15, 6), int8] */;
  %643 = shape_of(%641, dtype="int32") /* ty=Tensor[(3), int32] */;
  %644 = cast(%641, dtype="int8") /* ty=Tensor[(2, 15, 6), int8] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %646 = cast(%var_6398, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %647 = cast(%var_6398, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %648 = reshape(%646, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %649 = reshape(%647, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %650 = equal(%637, %638) /* ty=Tensor[(2, 15, 6), bool] */;
  %651 = %639.0;
  %652 = bitwise_or(%644, %645) /* ty=Tensor[(2, 15, 6), int8] */;
  %653 = @func_708(%648, %649) /* ty=Tensor[(8, 15, 9), uint64] */;
  (%650, %651, %652, %653, %var_6398)
}

def @func_2336(%var_2192: Tensor[(10, 8, 5), float32], %var_2219: Tensor[(10, 8, 5), float32], %var_2234: Tensor[(1, 315), float32], %var_2310: Tensor[(36), float64]) -> (Tensor[(8, 15, 9), uint64], Tensor[(1260), bool], Tensor[(270, 4), uint64], Tensor[(10, 8, 5), float64], Tensor[(3, 12, 12), float32], Tensor[(12, 36), float32], Tensor[(9, 5, 7), float32], Tensor[(1, 315), float32], Tensor[(10, 8, 5), float64], Tensor[(8, 15, 9), uint64], Tensor[(10, 8, 5), float64], Tensor[(3, 12, 12), float32], Tensor[(10, 8, 5), float32], Tensor[(9, 14, 10), float64], Tensor[(6, 30), bool], Tensor[(36), float64], Tensor[(6, 30), bool], Tensor[(8, 15, 9), uint64]) {
  %654 = cast(meta[relay.Constant][45] /* ty=Tensor[(1260), bool] */, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %655 = cast(meta[relay.Constant][46] /* ty=Tensor[(270, 4), uint64] */, dtype="uint64") /* ty=Tensor[(270, 4), uint64] */;
  %656 = reshape(%654, newshape=[9, 14, 10]) /* ty=Tensor[(9, 14, 10), bool] */;
  %657 = reshape(%655, newshape=[1080]) /* ty=Tensor[(1080), uint64] */;
  %658 = @func_1434(%656, %657) /* ty=(Tensor[(9, 14, 10), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64]) */;
  %659 = cast(%var_2192, dtype="float32") /* ty=Tensor[(10, 8, 5), float32] */;
  %660 = sigmoid(%659) /* ty=Tensor[(10, 8, 5), float32] */;
  %661 = cast(%var_2219, dtype="bool") /* ty=Tensor[(10, 8, 5), bool] */;
  %662 = shape_of(%660, dtype="int32") /* ty=Tensor[(3), int32] */;
  %663 = cast(%660, dtype="bool") /* ty=Tensor[(10, 8, 5), bool] */;
  %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %665 = greater_equal(%663, %664) /* ty=Tensor[(10, 8, 5), bool] */;
  %666 = cast(%665, dtype="float64") /* ty=Tensor[(10, 8, 5), float64] */;
  %667 = cast(meta[relay.Constant][47] /* ty=Tensor[(12, 36), float32] */, dtype="float32") /* ty=Tensor[(12, 36), float32] */;
  %668 = reshape(%667, newshape=[3, 12, 12]) /* ty=Tensor[(3, 12, 12), float32] */;
  %669 = @func_679(%668) /* ty=(Tensor[(3, 12, 12), float32], Tensor[(3, 12, 12), int16]) */;
  %670 = cast(%var_2234, dtype="float32") /* ty=Tensor[(1, 315), float32] */;
  %671 = reshape(%670, newshape=[9, 5, 7]) /* ty=Tensor[(9, 5, 7), float32] */;
  %672 = @func_1776(%671) /* ty=(Tensor[(9, 5, 7), float32], Tensor[(3, 12, 12), float32], Tensor[(432), float32]) */;
  %673 = cast(%665, dtype="float64") /* ty=Tensor[(10, 8, 5), float64] */;
  %674 = %658.1;
  %675 = cast(%674, dtype="uint64") /* ty=Tensor[(8, 15, 9), uint64] */;
  %676 = cast(meta[relay.Constant][46] /* ty=Tensor[(270, 4), uint64] */, dtype="uint64") /* ty=Tensor[(270, 4), uint64] */;
  %677 = reshape(%675, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %678 = reshape(%676, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
  %679 = cast(%660, dtype="float32") /* ty=Tensor[(10, 8, 5), float32] */;
  %680 = log(%679) /* ty=Tensor[(10, 8, 5), float32] */;
  %681 = cast(%680, dtype="uint64") /* ty=Tensor[(10, 8, 5), uint64] */;
  %682 = shape_of(%660, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(%660, dtype="uint64") /* ty=Tensor[(10, 8, 5), uint64] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %685 = right_shift(%683, %684) /* ty=Tensor[(10, 8, 5), uint64] */;
  %686 = cast(%685, dtype="bool") /* ty=Tensor[(10, 8, 5), bool] */;
  %687 = shape_of(%680, dtype="int32") /* ty=Tensor[(3), int32] */;
  %688 = cast(%680, dtype="bool") /* ty=Tensor[(10, 8, 5), bool] */;
  %689 = dyn.reshape(%686, %687, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %690 = equal(%688, %689) /* ty=Tensor[(10, 8, 5), bool] */;
  %691 = cast(%690, dtype="float64") /* ty=Tensor[(10, 8, 5), float64] */;
  %692 = shape_of(%665, dtype="int32") /* ty=Tensor[(3), int32] */;
  %693 = cast(%665, dtype="float64") /* ty=Tensor[(10, 8, 5), float64] */;
  %694 = dyn.reshape(%691, %692, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %695 = %669.0;
  %696 = cast(%695, dtype="float32") /* ty=Tensor[(3, 12, 12), float32] */;
  %697 = reshape(%696, newshape=[3, 12, 12]) /* ty=Tensor[(3, 12, 12), float32] */;
  %698 = @func_679(%697) /* ty=(Tensor[(3, 12, 12), float32], Tensor[(3, 12, 12), int16]) */;
  %699 = cast(%685, dtype="float32") /* ty=Tensor[(10, 8, 5), float32] */;
  %700 = cast(meta[relay.Constant][45] /* ty=Tensor[(1260), bool] */, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %701 = cast(meta[relay.Constant][46] /* ty=Tensor[(270, 4), uint64] */, dtype="uint64") /* ty=Tensor[(270, 4), uint64] */;
  %702 = reshape(%700, newshape=[9, 14, 10]) /* ty=Tensor[(9, 14, 10), bool] */;
  %703 = reshape(%701, newshape=[1080]) /* ty=Tensor[(1080), uint64] */;
  %704 = @func_1434(%702, %703) /* ty=(Tensor[(9, 14, 10), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64]) */;
  %705 = cast(%var_2310, dtype="float64") /* ty=Tensor[(36), float64] */;
  %706 = cast(meta[relay.Constant][48] /* ty=Tensor[(6, 30), bool] */, dtype="bool") /* ty=Tensor[(6, 30), bool] */;
  %707 = cast(meta[relay.Constant][45] /* ty=Tensor[(1260), bool] */, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %708 = reshape(%705, newshape=[2, 2, 9]) /* ty=Tensor[(2, 2, 9), float64] */;
  %709 = reshape(%706, newshape=[6, 30]) /* ty=Tensor[(6, 30), bool] */;
  %710 = reshape(%707, newshape=[90, 14]) /* ty=Tensor[(90, 14), bool] */;
  %711 = @func_1578(%708, %709, %710) /* ty=(Tensor[(2, 2, 9), float64], Tensor[(8, 15, 9), uint64], Tensor[(8, 15, 9), uint64], Tensor[(2, 15, 6), bool], Tensor[(6, 30), bool], Tensor[(9, 14, 10), float64], Tensor[(90, 14), bool], Tensor[(8, 15, 9), uint8], Tensor[(540, 2), float32]) */;
  %712 = %704.0;
  %713 = cast(%712, dtype="bool") /* ty=Tensor[(9, 14, 10), bool] */;
  %714 = @func_708(%677, %678) /* ty=Tensor[(8, 15, 9), uint64] */;
  %715 = cast(%714, dtype="uint64") /* ty=Tensor[(8, 15, 9), uint64] */;
  %716 = reshape(%713, newshape=[9, 14, 10]) /* ty=Tensor[(9, 14, 10), bool] */;
  %717 = reshape(%715, newshape=[1080]) /* ty=Tensor[(1080), uint64] */;
  %718 = @func_1434(%716, %717) /* ty=(Tensor[(9, 14, 10), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64]) */;
  %719 = tan(%666) /* ty=Tensor[(10, 8, 5), float64] */;
  %720 = %672.0;
  %721 = sinh(%673) /* ty=Tensor[(10, 8, 5), float64] */;
  %722 = floor_divide(%693, %694) /* ty=Tensor[(10, 8, 5), float64] */;
  %723 = %698.0;
  %724 = cos(%699) /* ty=Tensor[(10, 8, 5), float32] */;
  %725 = %711.4;
  %726 = %718.1;
  (%674, meta[relay.Constant][45] /* ty=Tensor[(1260), bool] */, meta[relay.Constant][46] /* ty=Tensor[(270, 4), uint64] */, %719, %695, meta[relay.Constant][47] /* ty=Tensor[(12, 36), float32] */, %720, %var_2234, %721, %714, %722, %723, %724, %712, %725, %var_2310, meta[relay.Constant][48] /* ty=Tensor[(6, 30), bool] */, %726)
}

def @func_3498(%var_3497: Tensor[(6, 15, 7), float32]) -> Tensor[(6, 15, 7), float32] {
  %730 = fn (%var_3490: Tensor[(6, 15, 7), float32]) -> Tensor[(6, 15, 7), float32] {
    %727 = cast(%var_3490, dtype="float32") /* ty=Tensor[(6, 15, 7), float32] */;
    %728 = cosh(%727) /* ty=Tensor[(6, 15, 7), float32] */;
    %729 = cast(%728, dtype="float32") /* ty=Tensor[(6, 15, 7), float32] */;
    sigmoid(%729) /* ty=Tensor[(6, 15, 7), float32] */
  };
  %730(%var_3497) /* ty=Tensor[(6, 15, 7), float32] */
}

def @func_3260() -> (Tensor[(2, 4, 2), float64],) {
  %731 = @func_3069() /* ty=Tensor[(2, 4, 2), float64] */;
  (%731,)
}

def @func_6210(%var_6199: Tensor[(3, 5, 11), float32]) -> (Tensor[(3, 5, 11), float32],) {
  %732 = cast(%var_6199, dtype="float32") /* ty=Tensor[(3, 5, 11), float32] */;
  %733 = tan(%732) /* ty=Tensor[(3, 5, 11), float32] */;
  (%733,)
}

def @func_5005(%var_5004: Tensor[(2, 15, 6), bool]) -> Tensor[(2, 15, 6), bool] {
  %740 = fn (%var_4997: Tensor[(2, 15, 6), bool]) -> Tensor[(2, 15, 6), bool] {
    %734 = @func_4132() /* ty=(Tensor[(2, 15, 6), bool], Tensor[(13, 6, 14), bool]) */;
    %735 = %734.0;
    %736 = cast(%var_4997, dtype="bool") /* ty=Tensor[(2, 15, 6), bool] */;
    %737 = shape_of(%735, dtype="int32") /* ty=Tensor[(3), int32] */;
    %738 = cast(%735, dtype="bool") /* ty=Tensor[(2, 15, 6), bool] */;
    %739 = dyn.reshape(%736, %737, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less(%738, %739) /* ty=Tensor[(2, 15, 6), bool] */
  };
  %740(%var_5004) /* ty=Tensor[(2, 15, 6), bool] */
}

def @func_4687(%var_4685: Tensor[(8, 13), float64]) -> Tensor[(8, 13), float64] {
  @func_4684(%var_4685) /* ty=Tensor[(8, 13), float64] */
}

def @func_4253(%var_4238: Tensor[(11, 4, 14), float64]) -> Tensor[(11, 4, 14), float64] {
  %741 = cast(meta[relay.Constant][49] /* ty=Tensor[(11, 4, 14), float64] */, dtype="float64") /* ty=Tensor[(11, 4, 14), float64] */;
  %742 = shape_of(%var_4238, dtype="int32") /* ty=Tensor[(3), int32] */;
  %743 = cast(%var_4238, dtype="float64") /* ty=Tensor[(11, 4, 14), float64] */;
  %744 = dyn.reshape(%741, %742, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  subtract(%743, %744) /* ty=Tensor[(11, 4, 14), float64] */
}

def @func_4738(%var_4735: Tensor[(8, 1), int8], %var_4736: Tensor[(8, 1), int8], %var_4737: Tensor[(10, 63), float32]) -> (Tensor[(8, ?), int8], Tensor[(2, 15, 6), bool], Tensor[(10, 63), float32], Tensor[(65, 4), float64], Tensor[(2, 15, 6), bool]) {
  @func_4733(%var_4735, %var_4736, %var_4737) /* ty=(Tensor[(8, ?), int8], Tensor[(2, 15, 6), bool], Tensor[(10, 63), float32], Tensor[(65, 4), float64], Tensor[(2, 15, 6), bool]) */
}

def @func_6348() -> (Tensor[(630), float32],) {
  @func_6346() /* ty=(Tensor[(630), float32],) */
}

def @func_4065(%var_4058: Tensor[(2, 4, 2), float64]) -> Tensor[(2, 4, 2), uint64] {
  %745 = @func_3166() /* ty=(Tensor[(2, 4, 2), float64], Tensor[(13, 6, 14), bool], Tensor[(546, 2), uint64]) */;
  %746 = %745.0;
  %747 = cast(%var_4058, dtype="uint64") /* ty=Tensor[(2, 4, 2), uint64] */;
  %748 = shape_of(%746, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%746, dtype="uint64") /* ty=Tensor[(2, 4, 2), uint64] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  right_shift(%749, %750) /* ty=Tensor[(2, 4, 2), uint64] */
}

def @func_6073() -> (Tensor[(2, 4, 2), float64], Tensor[(2, 10, 13), float32], Tensor[(512), bool]) {
  %751 = cast(meta[relay.Constant][50] /* ty=Tensor[(512), bool] */, dtype="bool") /* ty=Tensor[(512), bool] */;
  %752 = cast(meta[relay.Constant][50] /* ty=Tensor[(512), bool] */, dtype="bool") /* ty=Tensor[(512), bool] */;
  %753 = reshape(%751, newshape=[2, 16, 16]) /* ty=Tensor[(2, 16, 16), bool] */;
  %754 = reshape(%752, newshape=[2, 16, 16]) /* ty=Tensor[(2, 16, 16), bool] */;
  %755 = @func_5818(%753, %754) /* ty=(Tensor[(2, 16, 16), bool], Tensor[(13, 6, 14), bool], Tensor[(2, 16, 16), float64], Tensor[(2, 10, 13), float32], Tensor[(260), float64]) */;
  %756 = @func_3069() /* ty=Tensor[(2, 4, 2), float64] */;
  %757 = %755.3;
  (%756, %757, meta[relay.Constant][50] /* ty=Tensor[(512), bool] */)
}

def @func_3846(%var_3845: Tensor[(1080), uint64]) -> (Tensor[(2, 4, 2), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64]) {
  %765 = fn (%var_3839: Tensor[(1080), uint64]) -> (Tensor[(2, 4, 2), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64]) {
    %758 = @func_2928() /* ty=(Tensor[(2, 4, 2), float64],) */;
    %759 = cast(%var_3839, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
    %760 = cast(%var_3839, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
    %761 = reshape(%759, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
    %762 = reshape(%760, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), uint64] */;
    %763 = %758.0;
    %764 = @func_708(%761, %762) /* ty=Tensor[(8, 15, 9), uint64] */;
    (%763, %764, %var_3839)
  };
  %765(%var_3845) /* ty=(Tensor[(2, 4, 2), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64]) */
}

def @func_6075() -> (Tensor[(2, 4, 2), float64], Tensor[(2, 10, 13), float32], Tensor[(512), bool]) {
  @func_6073() /* ty=(Tensor[(2, 4, 2), float64], Tensor[(2, 10, 13), float32], Tensor[(512), bool]) */
}

def @func_7034() -> Tensor[(13, 6, 14), float64] {
  @func_7032() /* ty=Tensor[(13, 6, 14), float64] */
}

def @func_6531(%var_6521: uint8, %var_6522: Tensor[(4, 16, 1), uint8], %var_6528: Tensor[(315), float32], %var_6529: Tensor[(36), float64]) -> (Tensor[(4, 16, 1), uint8], Tensor[(3, 12, 12), float32], Tensor[(400), float32], Tensor[(315), float32], Tensor[(36), float64]) {
  %766 = cast(%var_6521, dtype="uint8") /* ty=uint8 */;
  %767 = cast(%var_6522, dtype="uint8") /* ty=Tensor[(4, 16, 1), uint8] */;
  %768 = cast(meta[relay.Constant][51] /* ty=Tensor[(400), float32] */, dtype="float32") /* ty=Tensor[(400), float32] */;
  %769 = cast(meta[relay.Constant][51] /* ty=Tensor[(400), float32] */, dtype="float32") /* ty=Tensor[(400), float32] */;
  %770 = cast(%var_6528, dtype="float32") /* ty=Tensor[(315), float32] */;
  %771 = cast(%var_6529, dtype="float64") /* ty=Tensor[(36), float64] */;
  %772 = reshape(%768, newshape=[10, 8, 5]) /* ty=Tensor[(10, 8, 5), float32] */;
  %773 = reshape(%769, newshape=[10, 8, 5]) /* ty=Tensor[(10, 8, 5), float32] */;
  %774 = reshape(%770, newshape=[1, 315]) /* ty=Tensor[(1, 315), float32] */;
  %775 = reshape(%771, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %776 = @func_2336(%772, %773, %774, %775) /* ty=(Tensor[(8, 15, 9), uint64], Tensor[(1260), bool], Tensor[(270, 4), uint64], Tensor[(10, 8, 5), float64], Tensor[(3, 12, 12), float32], Tensor[(12, 36), float32], Tensor[(9, 5, 7), float32], Tensor[(1, 315), float32], Tensor[(10, 8, 5), float64], Tensor[(8, 15, 9), uint64], Tensor[(10, 8, 5), float64], Tensor[(3, 12, 12), float32], Tensor[(10, 8, 5), float32], Tensor[(9, 14, 10), float64], Tensor[(6, 30), bool], Tensor[(36), float64], Tensor[(6, 30), bool], Tensor[(8, 15, 9), uint64]) */;
  %777 = logical_xor(%766, %767) /* ty=Tensor[(4, 16, 1), uint8] */;
  %778 = %776.11;
  (%777, %778, meta[relay.Constant][51] /* ty=Tensor[(400), float32] */, %var_6528, %var_6529)
}

def @func_4932() -> (Tensor[(180), bool],) {
  %781 = fn () -> (Tensor[(180), bool],) {
    %779 = @func_3216() /* ty=(Tensor[(13, 6, 14), bool], Tensor[(2, 15, 6), bool], Tensor[(180), bool]) */;
    %780 = %779.2;
    (%780,)
  };
  %781() /* ty=(Tensor[(180), bool],) */
}

def @func_4856(%var_4854: Tensor[(14, 44), float64], %var_4855: Tensor[(14, 44), float64]) -> (Tensor[(13, 6, 14), bool], Tensor[(14, 44), int16], Tensor[(14, 44), uint32]) {
  %801 = fn (%var_4828: Tensor[(14, 44), float64], %var_4848: Tensor[(14, 44), float64]) -> (Tensor[(13, 6, 14), bool], Tensor[(14, 44), int16], Tensor[(14, 44), uint32]) {
    %782 = @func_3166() /* ty=(Tensor[(2, 4, 2), float64], Tensor[(13, 6, 14), bool], Tensor[(546, 2), uint64]) */;
    %783 = @func_4600() /* ty=(Tensor[(2, 15, 6), int8], Tensor[(180), bool], Tensor[(8, 15, 9), float64], Tensor[(14, 44), float64], Tensor[(2, 4, 2), float64]) */;
    %784 = %783.3;
    %785 = cast(%var_4828, dtype="uint32") /* ty=Tensor[(14, 44), uint32] */;
    %786 = shape_of(%784, dtype="int32") /* ty=Tensor[(2), int32] */;
    %787 = cast(%784, dtype="uint32") /* ty=Tensor[(14, 44), uint32] */;
    %788 = dyn.reshape(%785, %786, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %789 = bitwise_and(%787, %788) /* ty=Tensor[(14, 44), uint32] */;
    %790 = cast(%784, dtype="int16") /* ty=Tensor[(14, 44), int16] */;
    %791 = shape_of(%789, dtype="int32") /* ty=Tensor[(2), int32] */;
    %792 = cast(%789, dtype="int16") /* ty=Tensor[(14, 44), int16] */;
    %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %794 = cast(%var_4848, dtype="uint32") /* ty=Tensor[(14, 44), uint32] */;
    %795 = shape_of(%784, dtype="int32") /* ty=Tensor[(2), int32] */;
    %796 = cast(%784, dtype="uint32") /* ty=Tensor[(14, 44), uint32] */;
    %797 = dyn.reshape(%794, %795, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %798 = %782.1;
    %799 = left_shift(%792, %793) /* ty=Tensor[(14, 44), int16] */;
    %800 = bitwise_xor(%796, %797) /* ty=Tensor[(14, 44), uint32] */;
    (%798, %799, %800)
  };
  %801(%var_4854, %var_4855) /* ty=(Tensor[(13, 6, 14), bool], Tensor[(14, 44), int16], Tensor[(14, 44), uint32]) */
}

def @func_7800(%var_7795: Tensor[(165), float32], %var_7796: Tensor[(1386), int16], %var_7797: Tensor[(1260), bool], %var_7798: Tensor[(180), bool], %var_7799: Tensor[(4, 108), float32]) -> (Tensor[(546, 2), uint64], Tensor[(3, 5, 11), float32], Tensor[(165), float32], Tensor[(1080), float64], Tensor[(1080), uint64], Tensor[(1386), int16], Tensor[(1260), bool], Tensor[(2, 15, 6), bool], Tensor[(180), bool], Tensor[(4, 108), float64]) {
  @func_7793(%var_7795, %var_7796, %var_7797, %var_7798, %var_7799) /* ty=(Tensor[(546, 2), uint64], Tensor[(3, 5, 11), float32], Tensor[(165), float32], Tensor[(1080), float64], Tensor[(1080), uint64], Tensor[(1386), int16], Tensor[(1260), bool], Tensor[(2, 15, 6), bool], Tensor[(180), bool], Tensor[(4, 108), float64]) */
}

def @func_2370(%var_2347: Tensor[(5, 4, 7), uint8]) -> (Tensor[(5, 4, 7), float64],) {
  %802 = cast(%var_2347, dtype="uint8") /* ty=Tensor[(5, 4, 7), uint8] */;
  %803 = shape_of(meta[relay.Constant][52] /* ty=Tensor[(5, 4, 7), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %804 = cast(meta[relay.Constant][52] /* ty=Tensor[(5, 4, 7), uint8] */, dtype="uint8") /* ty=Tensor[(5, 4, 7), uint8] */;
  %805 = dyn.reshape(%802, %803, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %806 = right_shift(%804, %805) /* ty=Tensor[(5, 4, 7), uint8] */;
  %807 = cast(%806, dtype="float32") /* ty=Tensor[(5, 4, 7), float32] */;
  %808 = acosh(%807) /* ty=Tensor[(5, 4, 7), float32] */;
  %809 = cast(%var_2347, dtype="uint16") /* ty=Tensor[(5, 4, 7), uint16] */;
  %810 = shape_of(meta[relay.Constant][52] /* ty=Tensor[(5, 4, 7), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %811 = cast(meta[relay.Constant][52] /* ty=Tensor[(5, 4, 7), uint8] */, dtype="uint16") /* ty=Tensor[(5, 4, 7), uint16] */;
  %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %813 = left_shift(%811, %812) /* ty=Tensor[(5, 4, 7), uint16] */;
  %814 = cast(%813, dtype="float64") /* ty=Tensor[(5, 4, 7), float64] */;
  %815 = shape_of(%808, dtype="int32") /* ty=Tensor[(3), int32] */;
  %816 = cast(%808, dtype="float64") /* ty=Tensor[(5, 4, 7), float64] */;
  %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %818 = divide(%816, %817) /* ty=Tensor[(5, 4, 7), float64] */;
  (%818,)
}

def @func_6577() -> Tensor[(2, 15, 6), bool] {
  %820 = fn () -> Tensor[(2, 15, 6), bool] {
    %819 = @func_5434() /* ty=(Tensor[(2, 15, 6), bool],) */;
    %819.0
  };
  %820() /* ty=Tensor[(2, 15, 6), bool] */
}

def @func_7356(%var_7354: Tensor[(16), float64], %var_7355: Tensor[(2, 4, 2), uint64]) -> (Tensor[(2, 10, 13), float32], Tensor[(16), float64], Tensor[(2, 4, 2), float32]) {
  %831 = fn (%var_7335: Tensor[(16), float64], %var_7337: Tensor[(2, 4, 2), uint64]) -> (Tensor[(2, 10, 13), float32], Tensor[(16), float64], Tensor[(2, 4, 2), float32]) {
    %821 = @func_6073() /* ty=(Tensor[(2, 4, 2), float64], Tensor[(2, 10, 13), float32], Tensor[(512), bool]) */;
    %822 = cast(%var_7335, dtype="float64") /* ty=Tensor[(16), float64] */;
    %823 = reshape(%822, newshape=[2, 4, 2]) /* ty=Tensor[(2, 4, 2), float64] */;
    %824 = @func_4065(%823) /* ty=Tensor[(2, 4, 2), uint64] */;
    %825 = cast(%var_7337, dtype="float32") /* ty=Tensor[(2, 4, 2), float32] */;
    %826 = shape_of(%824, dtype="int32") /* ty=Tensor[(3), int32] */;
    %827 = cast(%824, dtype="float32") /* ty=Tensor[(2, 4, 2), float32] */;
    %828 = dyn.reshape(%825, %826, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %829 = %821.1;
    %830 = mod(%827, %828) /* ty=Tensor[(2, 4, 2), float32] */;
    (%829, %var_7335, %830)
  };
  %831(%var_7354, %var_7355) /* ty=(Tensor[(2, 10, 13), float32], Tensor[(16), float64], Tensor[(2, 4, 2), float32]) */
}

def @func_6107() -> (Tensor[(2, 4, 2), float64], Tensor[(6, 15, 7), float32], Tensor[(630), float32]) {
  @func_6105() /* ty=(Tensor[(2, 4, 2), float64], Tensor[(6, 15, 7), float32], Tensor[(630), float32]) */
}

def @func_6537(%var_6533: uint8, %var_6534: Tensor[(4, 16, 1), uint8], %var_6535: Tensor[(315), float32], %var_6536: Tensor[(36), float64]) -> (Tensor[(4, 16, 1), uint8], Tensor[(3, 12, 12), float32], Tensor[(400), float32], Tensor[(315), float32], Tensor[(36), float64]) {
  @func_6531(%var_6533, %var_6534, %var_6535, %var_6536) /* ty=(Tensor[(4, 16, 1), uint8], Tensor[(3, 12, 12), float32], Tensor[(400), float32], Tensor[(315), float32], Tensor[(36), float64]) */
}

def @func_7572(%var_7570: Tensor[(5, 4, 7), float64], %var_7571: Tensor[(180), bool]) -> (Tensor[(5, 4, 7), int8], Tensor[(8, 15, 9), float64], Tensor[(1120), float32], Tensor[(180), bool], Tensor[(1080), uint64], Tensor[(5, 4, 7), float64]) {
  %855 = fn (%var_7514: Tensor[(5, 4, 7), float64], %var_7536: Tensor[(180), bool]) -> (Tensor[(5, 4, 7), int8], Tensor[(8, 15, 9), float64], Tensor[(1120), float32], Tensor[(180), bool], Tensor[(1080), uint64], Tensor[(5, 4, 7), float64]) {
    %832 = @func_5169() /* ty=Tensor[(5, 4, 7), float64] */;
    %833 = cast(%var_7514, dtype="int8") /* ty=Tensor[(5, 4, 7), int8] */;
    %834 = shape_of(%832, dtype="int32") /* ty=Tensor[(3), int32] */;
    %835 = cast(%832, dtype="int8") /* ty=Tensor[(5, 4, 7), int8] */;
    %836 = dyn.reshape(%833, %834, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %837 = cast(meta[relay.Constant][53] /* ty=Tensor[(1120), float32] */, dtype="float32") /* ty=Tensor[(1120), float32] */;
    %838 = cast(%var_7536, dtype="bool") /* ty=Tensor[(180), bool] */;
    %839 = reshape(%837, newshape=[10, 16, 7]) /* ty=Tensor[(10, 16, 7), float32] */;
    %840 = reshape(%838, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), bool] */;
    %841 = @func_5705(%839, %840) /* ty=(Tensor[(10, 16, 7), float32], Tensor[(8, 15, 9), float64], Tensor[(2, 15, 6), int64]) */;
    %842 = %841.1;
    %843 = cast(%842, dtype="uint64") /* ty=Tensor[(8, 15, 9), uint64] */;
    %844 = reshape(%843, newshape=[1080]) /* ty=Tensor[(1080), uint64] */;
    %845 = @func_3844(%844) /* ty=(Tensor[(2, 4, 2), float64], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64]) */;
    %846 = cast(%var_7514, dtype="float32") /* ty=Tensor[(5, 4, 7), float32] */;
    %847 = shape_of(%832, dtype="int32") /* ty=Tensor[(3), int32] */;
    %848 = cast(%832, dtype="float32") /* ty=Tensor[(5, 4, 7), float32] */;
    %849 = dyn.reshape(%846, %847, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %850 = floor_divide(%848, %849) /* ty=Tensor[(5, 4, 7), float32] */;
    %851 = cast(%850, dtype="float64") /* ty=Tensor[(5, 4, 7), float64] */;
    %852 = bitwise_xor(%835, %836) /* ty=Tensor[(5, 4, 7), int8] */;
    %853 = %845.2;
    %854 = rsqrt(%851) /* ty=Tensor[(5, 4, 7), float64] */;
    (%852, %842, meta[relay.Constant][53] /* ty=Tensor[(1120), float32] */, %var_7536, %853, %854)
  };
  %855(%var_7570, %var_7571) /* ty=(Tensor[(5, 4, 7), int8], Tensor[(8, 15, 9), float64], Tensor[(1120), float32], Tensor[(180), bool], Tensor[(1080), uint64], Tensor[(5, 4, 7), float64]) */
}

def @func_4601() -> (Tensor[(2, 15, 6), int8], Tensor[(180), bool], Tensor[(8, 15, 9), float64], Tensor[(14, 44), float64], Tensor[(2, 4, 2), float64]) {
  %868 = fn () -> (Tensor[(2, 15, 6), int8], Tensor[(180), bool], Tensor[(8, 15, 9), float64], Tensor[(14, 44), float64], Tensor[(2, 4, 2), float64]) {
    %856 = cast(meta[relay.Constant][54] /* ty=Tensor[(180), bool] */, dtype="bool") /* ty=Tensor[(180), bool] */;
    %857 = reshape(%856, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), bool] */;
    %858 = @func_4483(%857) /* ty=(Tensor[(2, 15, 6), int8],) */;
    %859 = cast(meta[relay.Constant][55] /* ty=Tensor[(14, 44), float64] */, dtype="float64") /* ty=Tensor[(14, 44), float64] */;
    %860 = reshape(%859, newshape=[616]) /* ty=Tensor[(616), float64] */;
    %861 = @func_4294(%860) /* ty=(Tensor[(8, 15, 9), float64], Tensor[(11, 4, 14), float64], Tensor[(616), float64]) */;
    %862 = @func_3260() /* ty=(Tensor[(2, 4, 2), float64],) */;
    %863 = %862.0;
    %864 = cast(%863, dtype="float64") /* ty=Tensor[(2, 4, 2), float64] */;
    %865 = %858.0;
    %866 = %861.0;
    %867 = sin(%864) /* ty=Tensor[(2, 4, 2), float64] */;
    (%865, meta[relay.Constant][54] /* ty=Tensor[(180), bool] */, %866, meta[relay.Constant][55] /* ty=Tensor[(14, 44), float64] */, %867)
  };
  %868() /* ty=(Tensor[(2, 15, 6), int8], Tensor[(180), bool], Tensor[(8, 15, 9), float64], Tensor[(14, 44), float64], Tensor[(2, 4, 2), float64]) */
}

def @func_5504() -> (Tensor[(13, 6, 14), bool],) {
  @func_5502() /* ty=(Tensor[(13, 6, 14), bool],) */
}

def @func_6928() -> Tensor[(546, 2), uint64] {
  %869 = fn () -> Tensor[(546, 2), uint64] {
    @func_6800() /* ty=Tensor[(546, 2), uint64] */
  };
  %869() /* ty=Tensor[(546, 2), uint64] */
}

def @func_5502() -> (Tensor[(13, 6, 14), bool],) {
  %870 = @func_4669() /* ty=(Tensor[(13, 6, 14), bool],) */;
  %871 = %870.0;
  (%871,)
}

def @func_712(%var_710: Tensor[(8, 15, 9), uint64], %var_711: Tensor[(8, 15, 9), uint64]) -> Tensor[(8, 15, 9), uint64] {
  @func_708(%var_710, %var_711) /* ty=Tensor[(8, 15, 9), uint64] */
}

def @func_6801() -> Tensor[(546, 2), uint64] {
  %872 = fn () -> Tensor[(546, 2), uint64] {
    @func_5969() /* ty=Tensor[(546, 2), uint64] */
  };
  %872() /* ty=Tensor[(546, 2), uint64] */
}

def @func_5709(%var_5707: Tensor[(10, 16, 7), float32], %var_5708: Tensor[(2, 15, 6), bool]) -> (Tensor[(10, 16, 7), float32], Tensor[(8, 15, 9), float64], Tensor[(2, 15, 6), int64]) {
  @func_5705(%var_5707, %var_5708) /* ty=(Tensor[(10, 16, 7), float32], Tensor[(8, 15, 9), float64], Tensor[(2, 15, 6), int64]) */
}

def @func_3218() -> (Tensor[(13, 6, 14), bool], Tensor[(2, 15, 6), bool], Tensor[(180), bool]) {
  @func_3216() /* ty=(Tensor[(13, 6, 14), bool], Tensor[(2, 15, 6), bool], Tensor[(180), bool]) */
}

def @func_5822(%var_5820: Tensor[(2, 16, 16), bool], %var_5821: Tensor[(2, 16, 16), bool]) -> (Tensor[(2, 16, 16), bool], Tensor[(13, 6, 14), bool], Tensor[(2, 16, 16), float64], Tensor[(2, 10, 13), float32], Tensor[(260), float64]) {
  @func_5818(%var_5820, %var_5821) /* ty=(Tensor[(2, 16, 16), bool], Tensor[(13, 6, 14), bool], Tensor[(2, 16, 16), float64], Tensor[(2, 10, 13), float32], Tensor[(260), float64]) */
}

def @func_5854(%var_5851: Tensor[(1092), uint64]) -> (Tensor[(2, 4, 2), float64], Tensor[(13, 6, 14), bool], Tensor[(1092), uint64]) {
  %873 = cast(%var_5851, dtype="uint64") /* ty=Tensor[(1092), uint64] */;
  %874 = cast(%var_5851, dtype="uint64") /* ty=Tensor[(1092), uint64] */;
  %875 = reshape(%873, newshape=[13, 6, 14]) /* ty=Tensor[(13, 6, 14), uint64] */;
  %876 = reshape(%874, newshape=[13, 6, 14]) /* ty=Tensor[(13, 6, 14), uint64] */;
  %877 = @func_2752(%875, %876) /* ty=(Tensor[(13, 6, 14), bool],) */;
  %878 = @func_3069() /* ty=Tensor[(2, 4, 2), float64] */;
  %879 = %877.0;
  (%878, %879, %var_5851)
}

def @func_6213(%var_6211: Tensor[(3, 5, 11), float32]) -> (Tensor[(3, 5, 11), float32],) {
  @func_6210(%var_6211) /* ty=(Tensor[(3, 5, 11), float32],) */
}

def @main(%var_7826: Tensor[(1408), float32]) -> (Tensor[(2, 4, 2), float64], Tensor[(1408), float64]) {
  %880 = @func_4752() /* ty=(Tensor[(2, 4, 2), float64],) */;
  %881 = cast(%var_7826, dtype="float32") /* ty=Tensor[(1408), float32] */;
  %882 = reshape(%881, newshape=[11, 8, 16]) /* ty=Tensor[(11, 8, 16), float32] */;
  %883 = @func_3987(%882) /* ty=(Tensor[(11, 8, 16), float32],) */;
  %884 = %883.0;
  %885 = cast(%884, dtype="bool") /* ty=Tensor[(11, 8, 16), bool] */;
  %886 = shape_of(%var_7826, dtype="int32") /* ty=Tensor[(1), int32] */;
  %887 = cast(%var_7826, dtype="bool") /* ty=Tensor[(1408), bool] */;
  %888 = dyn.reshape(%885, %886, newshape=[]) /* ty=Tensor[(?), bool] */;
  %889 = greater_equal(%887, %888) /* ty=Tensor[(1408), bool] */;
  %890 = cast(%889, dtype="float64") /* ty=Tensor[(1408), float64] */;
  %891 = %880.0;
  %892 = asin(%890) /* ty=Tensor[(1408), float64] */;
  (%891, %892)
}

def @func_2755(%var_2753: Tensor[(13, 6, 14), uint64], %var_2754: Tensor[(13, 6, 14), uint64]) -> (Tensor[(13, 6, 14), bool],) {
  %898 = fn (%var_2737: Tensor[(13, 6, 14), uint64], %var_2738: Tensor[(13, 6, 14), uint64]) -> (Tensor[(13, 6, 14), bool],) {
    %893 = cast(%var_2738, dtype="bool") /* ty=Tensor[(13, 6, 14), bool] */;
    %894 = shape_of(%var_2737, dtype="int32") /* ty=Tensor[(3), int32] */;
    %895 = cast(%var_2737, dtype="bool") /* ty=Tensor[(13, 6, 14), bool] */;
    %896 = dyn.reshape(%893, %894, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %897 = greater(%895, %896) /* ty=Tensor[(13, 6, 14), bool] */;
    (%897,)
  };
  %898(%var_2753, %var_2754) /* ty=(Tensor[(13, 6, 14), bool],) */
}

def @func_7625(%var_7595: Tensor[(770), float64], %var_7596: Tensor[(36), float64], %var_7605: Tensor[(180), bool]) -> (Tensor[(2, 4, 2), float64], Tensor[(8, 15, 9), uint64], Tensor[(770), float64], Tensor[(36), float64], Tensor[(1260), bool], Tensor[(1080), uint64], Tensor[(140), float64], Tensor[(180), bool]) {
  %899 = cast(%var_7595, dtype="float64") /* ty=Tensor[(770), float64] */;
  %900 = cast(%var_7596, dtype="float64") /* ty=Tensor[(36), float64] */;
  %901 = cast(meta[relay.Constant][56] /* ty=Tensor[(1260), bool] */, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %902 = reshape(%899, newshape=[14, 11, 5]) /* ty=Tensor[(14, 11, 5), float64] */;
  %903 = reshape(%900, newshape=[18, 2]) /* ty=Tensor[(18, 2), float64] */;
  %904 = reshape(%901, newshape=[1260]) /* ty=Tensor[(1260), bool] */;
  %905 = @func_3026(%902, %903, %904) /* ty=(Tensor[(8, 15, 9), uint64], Tensor[(18, 2), float64], Tensor[(180), bool], Tensor[(1260), bool], Tensor[(14, 11, 5), float64]) */;
  %906 = cast(meta[relay.Constant][57] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
  %907 = cast(%var_7605, dtype="bool") /* ty=Tensor[(180), bool] */;
  %908 = reshape(%906, newshape=[5, 4, 7]) /* ty=Tensor[(5, 4, 7), float64] */;
  %909 = reshape(%907, newshape=[180]) /* ty=Tensor[(180), bool] */;
  %910 = @func_7569(%908, %909) /* ty=(Tensor[(5, 4, 7), int8], Tensor[(8, 15, 9), float64], Tensor[(1120), float32], Tensor[(180), bool], Tensor[(1080), uint64], Tensor[(5, 4, 7), float64]) */;
  %911 = @func_3069() /* ty=Tensor[(2, 4, 2), float64] */;
  %912 = %905.0;
  %913 = %910.4;
  (%911, %912, %var_7595, %var_7596, meta[relay.Constant][56] /* ty=Tensor[(1260), bool] */, %913, meta[relay.Constant][57] /* ty=Tensor[(140), float64] */, %var_7605)
}

def @func_5310(%var_5306: Tensor[(630), float32], %var_5307: Tensor[(6, 15, 7), float32], %var_5308: Tensor[(1080), uint64], %var_5309: Tensor[(1, 315), float32]) -> (Tensor[(2, 15, 6), bool], Tensor[(630), float32], Tensor[(6, 15, 7), int32], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64], Tensor[(10, 8, 5), float64], Tensor[(4, 100), float32], Tensor[(1, 315), float32], Tensor[(36), float64]) {
  @func_5304(%var_5306, %var_5307, %var_5308, %var_5309) /* ty=(Tensor[(2, 15, 6), bool], Tensor[(630), float32], Tensor[(6, 15, 7), int32], Tensor[(8, 15, 9), uint64], Tensor[(1080), uint64], Tensor[(10, 8, 5), float64], Tensor[(4, 100), float32], Tensor[(1, 315), float32], Tensor[(36), float64]) */
}

def @func_6547() -> (Tensor[(9, 3, 9), int8],) {
  %914 = cast(meta[relay.Constant][59] /* ty=Tensor[(9, 3, 9), int8] */, dtype="int8") /* ty=Tensor[(9, 3, 9), int8] */;
  %915 = shape_of(meta[relay.Constant][58] /* ty=Tensor[(9, 3, 9), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %916 = cast(meta[relay.Constant][58] /* ty=Tensor[(9, 3, 9), int8] */, dtype="int8") /* ty=Tensor[(9, 3, 9), int8] */;
  %917 = dyn.reshape(%914, %915, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %918 = multiply(%916, %917) /* ty=Tensor[(9, 3, 9), int8] */;
  (%918,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen293/build/output.py", line 1975, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:04:22] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

