==========mod==========
#[version = "0.0.5"]
def @func_3207() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %0 = @func_3131() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %1 = @func_1825() /* ty=Tensor[(9, 9, 6), float32] */;
  %2 = %0.1;
  (%1, %2)
}

def @func_2393(%var_2328: Tensor[(2880), float32], %var_2329: Tensor[(126), float64], %var_2330: Tensor[(2520), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(126), float64], Tensor[(2880), float32], Tensor[(126), float64], Tensor[(2520), float64], Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(126), float64]) {
  %3 = cast(%var_2328, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %4 = cast(%var_2329, dtype="float64") /* ty=Tensor[(126), float64] */;
  %5 = cast(%var_2330, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %6 = reshape(%3, newshape=[15, 12, 16]) /* ty=Tensor[(15, 12, 16), float32] */;
  %7 = reshape(%4, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %8 = reshape(%5, newshape=[15, 12, 14]) /* ty=Tensor[(15, 12, 14), float64] */;
  %9 = @func_1433(%6, %7, %8) /* ty=(Tensor[(15, 12, 16), uint32], Tensor[(2520), float64], Tensor[(2112), float32], Tensor[(126), float64], Tensor[(15, 12, 14), uint8], Tensor[(15, 12, 16), float64]) */;
  %10 = @func_1825() /* ty=Tensor[(9, 9, 6), float32] */;
  %11 = cast(%10, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  %12 = atan(%11) /* ty=Tensor[(9, 9, 6), float32] */;
  %13 = cast(%10, dtype="float64") /* ty=Tensor[(9, 9, 6), float64] */;
  %14 = shape_of(%12, dtype="int32") /* ty=Tensor[(3), int32] */;
  %15 = cast(%12, dtype="float64") /* ty=Tensor[(9, 9, 6), float64] */;
  %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %17 = subtract(%15, %16) /* ty=Tensor[(9, 9, 6), float64] */;
  %18 = cast(%17, dtype="float64") /* ty=Tensor[(9, 9, 6), float64] */;
  %19 = cast(%var_2329, dtype="float64") /* ty=Tensor[(126), float64] */;
  %20 = reshape(%19, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %21 = @func_1892(%20) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(126), float64], Tensor[(15, 12, 14), int64]) */;
  %22 = cast(%17, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  %23 = cast(%var_2328, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %24 = %9.3;
  %25 = cast(%24, dtype="float64") /* ty=Tensor[(126), float64] */;
  %26 = cast(%var_2330, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %27 = reshape(%23, newshape=[15, 12, 16]) /* ty=Tensor[(15, 12, 16), float32] */;
  %28 = reshape(%25, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %29 = reshape(%26, newshape=[15, 12, 14]) /* ty=Tensor[(15, 12, 14), float64] */;
  %30 = @func_1433(%27, %28, %29) /* ty=(Tensor[(15, 12, 16), uint32], Tensor[(2520), float64], Tensor[(2112), float32], Tensor[(126), float64], Tensor[(15, 12, 14), uint8], Tensor[(15, 12, 16), float64]) */;
  %31 = @func_1825() /* ty=Tensor[(9, 9, 6), float32] */;
  %32 = atanh(%18) /* ty=Tensor[(9, 9, 6), float64] */;
  %33 = %21.0;
  %34 = asinh(%22) /* ty=Tensor[(9, 9, 6), float32] */;
  %35 = @func_2049() /* ty=Tensor[(9, 9, 6), float32] */;
  %36 = %30.3;
  (%31, %24, %var_2328, %var_2329, %var_2330, %32, %33, %34, %35, %36)
}

def @func_8052() -> (Tensor[(9, 9, 6), float32],) {
  %37 = @func_4031() /* ty=Tensor[(9, 9, 6), float32] */;
  (%37,)
}

def @func_8542() -> Tensor[(9, 9, 6), float32] {
  %38 = @func_7432() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %38.0
}

def @func_6322(%var_6296: Tensor[(1, 10, 12), uint32], %var_6297: Tensor[(7, 10, 12), uint32], %var_6313: Tensor[(45), float64]) -> (Tensor[(7, 10, 12), uint32], Tensor[(16, 11, 12), float32], Tensor[(45), float64]) {
  %39 = cast(%var_6296, dtype="uint32") /* ty=Tensor[(1, 10, 12), uint32] */;
  %40 = cast(%var_6297, dtype="uint32") /* ty=Tensor[(7, 10, 12), uint32] */;
  %41 = cast(%var_6313, dtype="float64") /* ty=Tensor[(45), float64] */;
  %42 = reshape(%41, newshape=[45]) /* ty=Tensor[(45), float64] */;
  %43 = @func_5222(%42) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(16, 11, 12), float32], Tensor[(45), float64]) */;
  %44 = right_shift(%39, %40) /* ty=Tensor[(7, 10, 12), uint32] */;
  %45 = %43.3;
  (%44, %45, %var_6313)
}

def @func_8499() -> (Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(9, 9, 6), float32]) {
  %46 = @func_4855() /* ty=(Tensor[(7, 6, 5), float64], Tensor[(9, 9, 6), float32]) */;
  %47 = @func_3207() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %48 = @func_7444() /* ty=Tensor[(9, 9, 6), float32] */;
  %49 = %46.0;
  %50 = %47.1;
  (%48, %49, %50)
}

def @func_5222(%var_5211: Tensor[(45), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(16, 11, 12), float32], Tensor[(45), float64]) {
  %51 = @func_2917() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %52 = @func_3642() /* ty=Tensor[(9, 9, 6), float32] */;
  %53 = cast(%52, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  %54 = reshape(%53, newshape=[9, 9, 6]) /* ty=Tensor[(9, 9, 6), float32] */;
  %55 = @func_2269(%54) /* ty=(Tensor[(9, 9, 6), bool], Tensor[(9, 9, 6), float64]) */;
  %56 = %55.1;
  %57 = cast(%56, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  %58 = cast(%var_5211, dtype="float64") /* ty=Tensor[(45), float64] */;
  %59 = reshape(%58, newshape=[45]) /* ty=Tensor[(45), float64] */;
  %60 = @func_2189(%59) /* ty=(Tensor[(45), float64], Tensor[(9, 9, 6), float64], Tensor[(15, 3, 1), float64], Tensor[(16, 11, 12), float32], Tensor[(528, 4), float32]) */;
  %61 = %51.0;
  %62 = sqrt(%57) /* ty=Tensor[(9, 9, 6), float32] */;
  %63 = %60.3;
  (%52, %61, %62, %63, %var_5211)
}

def @func_4347() -> (Tensor[(9, 9, 6), float32],) {
  %64 = @func_3873() /* ty=Tensor[(9, 9, 6), float32] */;
  (%64,)
}

def @func_14126(%var_14120: Tensor[(2, 1440), float32]) -> (Tensor[(9, 9, 6), float32], Tensor[(15, 3, 1), float64], Tensor[(2, 1440), float32], Tensor[(126), float64]) {
  %65 = cast(%var_14120, dtype="float32") /* ty=Tensor[(2, 1440), float32] */;
  %66 = cast(meta[relay.Constant][0] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
  %67 = cast(%var_14120, dtype="float32") /* ty=Tensor[(2, 1440), float32] */;
  %68 = reshape(%65, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
  %69 = reshape(%66, newshape=[126, 1]) /* ty=Tensor[(126, 1), float64] */;
  %70 = reshape(%67, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
  %71 = @func_5786(%68, %69, %70) /* ty=(Tensor[(2880), float32], Tensor[(9, 9, 6), bool], Tensor[(15, 3, 1), float64], Tensor[(126, 1), float64], Tensor[(2880), bool]) */;
  %72 = @func_10132() /* ty=Tensor[(9, 9, 6), float32] */;
  %73 = %71.2;
  (%72, %73, %var_14120, meta[relay.Constant][0] /* ty=Tensor[(126), float64] */)
}

def @func_3290() -> Tensor[(9, 9, 6), float32] {
  %74 = @func_3263() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %74.0
}

def @func_2111(%var_2095: Tensor[(2880), float32]) -> (Tensor[(9, 9, 6), float32], Tensor[(15, 12, 16), uint32], Tensor[(2880), float32], Tensor[(126), float64], Tensor[(2520), float64]) {
  %75 = @func_1852() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %76 = cast(%var_2095, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %77 = cast(meta[relay.Constant][1] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
  %78 = cast(meta[relay.Constant][2] /* ty=Tensor[(2520), float64] */, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %79 = reshape(%76, newshape=[15, 12, 16]) /* ty=Tensor[(15, 12, 16), float32] */;
  %80 = reshape(%77, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %81 = reshape(%78, newshape=[15, 12, 14]) /* ty=Tensor[(15, 12, 14), float64] */;
  %82 = @func_1433(%79, %80, %81) /* ty=(Tensor[(15, 12, 16), uint32], Tensor[(2520), float64], Tensor[(2112), float32], Tensor[(126), float64], Tensor[(15, 12, 14), uint8], Tensor[(15, 12, 16), float64]) */;
  %83 = %75.0;
  %84 = %82.0;
  (%83, %84, %var_2095, meta[relay.Constant][1] /* ty=Tensor[(126), float64] */, meta[relay.Constant][2] /* ty=Tensor[(2520), float64] */)
}

def @func_4074(%var_4060: Tensor[(3, 42), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(15, 12, 14), int64], Tensor[(3, 42), float64]) {
  %85 = cast(%var_4060, dtype="float64") /* ty=Tensor[(3, 42), float64] */;
  %86 = reshape(%85, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %87 = @func_1892(%86) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(126), float64], Tensor[(15, 12, 14), int64]) */;
  %88 = @func_1825() /* ty=Tensor[(9, 9, 6), float32] */;
  %89 = %87.3;
  (%88, %89, %var_4060)
}

def @func_13123() -> (Tensor[(210), float64], Tensor[(9, 9, 6), float32]) {
  %90 = @func_8231() /* ty=(Tensor[(210), float64],) */;
  %91 = %90.0;
  %92 = @func_8893() /* ty=Tensor[(9, 9, 6), float32] */;
  (%91, %92)
}

def @func_13254() -> (Tensor[(9, 9, 6), float32],) {
  %93 = @func_3131() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %94 = %93.0;
  (%94,)
}

def @func_7692() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool]) {
  %95 = @func_5860() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(9, 9, 6), float32]) */;
  %96 = %95.2;
  %97 = cast(%96, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  %98 = reshape(%97, newshape=[9, 9, 6]) /* ty=Tensor[(9, 9, 6), float32] */;
  %99 = @func_2768(%98) /* ty=(Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), bool]) */;
  %100 = %99.1;
  (%96, %100)
}

def @func_11648() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %101 = @func_4589() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(2880), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %102 = @func_5656() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %103 = %101.4;
  %104 = @func_5541() /* ty=Tensor[(9, 9, 6), float32] */;
  %105 = %102.0;
  (%103, %104, %105)
}

def @func_3873() -> Tensor[(9, 9, 6), float32] {
  %106 = @func_3337() /* ty=Tensor[(9, 9, 6), float32] */;
  %107 = cast(%106, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  erf(%107) /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_5860() -> (Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(9, 9, 6), float32]) {
  %108 = @func_2420() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %109 = %108.0;
  %110 = cast(meta[relay.Constant][3] /* ty=Tensor[(9, 9, 6), float32] */, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  %111 = shape_of(%109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(%109, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %114 = @func_5584() /* ty=(Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32]) */;
  %115 = cast(meta[relay.Constant][4] /* ty=Tensor[(45), float64] */, dtype="float64") /* ty=Tensor[(45), float64] */;
  %116 = reshape(%115, newshape=[45]) /* ty=Tensor[(45), float64] */;
  %117 = @func_5222(%116) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(16, 11, 12), float32], Tensor[(45), float64]) */;
  %118 = power(%112, %113) /* ty=Tensor[(9, 9, 6), float32] */;
  %119 = %114.0;
  %120 = %117.1;
  %121 = @func_2710() /* ty=Tensor[(9, 9, 6), float32] */;
  (%118, %119, %120, meta[relay.Constant][4] /* ty=Tensor[(45), float64] */, %121)
}

def @func_6031(%var_6027: Tensor[(13, 6, 4), float64]) -> (Tensor[(13, 6, 4), float64],) {
  %122 = cast(%var_6027, dtype="float64") /* ty=Tensor[(13, 6, 4), float64] */;
  %123 = cos(%122) /* ty=Tensor[(13, 6, 4), float64] */;
  (%123,)
}

def @func_10303() -> Tensor[(9, 9, 6), float32] {
  @func_9757() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_7596() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(3, 42), bool]) {
  %124 = @func_3829() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %125 = @func_5860() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(9, 9, 6), float32]) */;
  %126 = cast(meta[relay.Constant][5] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
  %127 = reshape(%126, newshape=[3, 42]) /* ty=Tensor[(3, 42), float64] */;
  %128 = @func_4074(%127) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(15, 12, 14), int64], Tensor[(3, 42), float64]) */;
  %129 = %128.2;
  %130 = cast(meta[relay.Constant][5] /* ty=Tensor[(126), float64] */, dtype="bool") /* ty=Tensor[(126), bool] */;
  %131 = shape_of(%129, dtype="int32") /* ty=Tensor[(2), int32] */;
  %132 = cast(%129, dtype="bool") /* ty=Tensor[(3, 42), bool] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %134 = %124.0;
  %135 = %125.2;
  %136 = logical_and(%132, %133) /* ty=Tensor[(3, 42), bool] */;
  (%134, %135, %136)
}

def @func_8013(%var_8003: Tensor[(8, 12, 2), int8]) -> (Tensor[(8, 12, 2), int8],) {
  %137 = cast(%var_8003, dtype="int8") /* ty=Tensor[(8, 12, 2), int8] */;
  %138 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(8, 12, 2), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(meta[relay.Constant][6] /* ty=Tensor[(8, 12, 2), int8] */, dtype="int8") /* ty=Tensor[(8, 12, 2), int8] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %141 = logical_xor(%139, %140) /* ty=Tensor[(8, 12, 2), int8] */;
  (%141,)
}

def @func_14147() -> Tensor[(210), float64] {
  %142 = @func_7979() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(210), float64]) */;
  %142.1
}

def @func_5092() -> Tensor[(9, 9, 6), float32] {
  %143 = @func_1852() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %143.0
}

def @main() -> (Tensor[(45), float32],) {
  %144 = @func_5860() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(9, 9, 6), float32]) */;
  %145 = %144.3;
  %146 = cast(%145, dtype="float32") /* ty=Tensor[(45), float32] */;
  %147 = sin(%146) /* ty=Tensor[(45), float32] */;
  (%147,)
}

def @func_13608(%var_13597: Tensor[(16, 2, 6), float64], %var_13603: Tensor[(45), float64], %var_13604: Tensor[(120), uint32]) -> (Tensor[(16, 2, 6), float64], Tensor[(9, 9, 6), uint8], Tensor[(45), float64], Tensor[(120), uint32], Tensor[(2880), float32]) {
  %148 = cast(meta[relay.Constant][7] /* ty=Tensor[(16, 1, 6), float64] */, dtype="float64") /* ty=Tensor[(16, 1, 6), float64] */;
  %149 = cast(%var_13597, dtype="float64") /* ty=Tensor[(16, 2, 6), float64] */;
  %150 = cast(%var_13603, dtype="float64") /* ty=Tensor[(45), float64] */;
  %151 = cast(%var_13604, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %152 = cast(meta[relay.Constant][8] /* ty=Tensor[(2880), float32] */, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %153 = reshape(%150, newshape=[45]) /* ty=Tensor[(45), float64] */;
  %154 = reshape(%151, newshape=[6, 20]) /* ty=Tensor[(6, 20), uint32] */;
  %155 = reshape(%152, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
  %156 = @func_7940(%153, %154, %155) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(16, 11, 12), float32], Tensor[(6, 20), uint32], Tensor[(840), uint32], Tensor[(9, 9, 6), float32], Tensor[(2880), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), uint8], Tensor[(9, 9, 6), float32]) */;
  %157 = divide(%148, %149) /* ty=Tensor[(16, 2, 6), float64] */;
  %158 = %156.10;
  (%157, %158, %var_13603, %var_13604, meta[relay.Constant][8] /* ty=Tensor[(2880), float32] */)
}

def @func_9512() -> (Tensor[(9, 9, 6), float32],) {
  %159 = @func_3271() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %160 = %159.0;
  (%160,)
}

def @func_13437(%var_13433: Tensor[(13, 5, 7), bool]) -> Tensor[(13, 5, 7), bool] {
  %161 = cast(%var_13433, dtype="bool") /* ty=Tensor[(13, 5, 7), bool] */;
  %162 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(13, 5, 7), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %163 = cast(meta[relay.Constant][9] /* ty=Tensor[(13, 5, 7), bool] */, dtype="bool") /* ty=Tensor[(13, 5, 7), bool] */;
  %164 = dyn.reshape(%161, %162, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%163, %164) /* ty=Tensor[(13, 5, 7), bool] */
}

def @func_3057(%var_3045: Tensor[(4, 15, 3), float64]) -> Tensor[(4, 15, 3), float64] {
  %165 = cast(%var_3045, dtype="float64") /* ty=Tensor[(4, 15, 3), float64] */;
  %166 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(4, 15, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %167 = cast(meta[relay.Constant][10] /* ty=Tensor[(4, 15, 3), float64] */, dtype="float64") /* ty=Tensor[(4, 15, 3), float64] */;
  %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%167, %168) /* ty=Tensor[(4, 15, 3), float64] */
}

def @func_5786(%var_5752: Tensor[(2880), float32], %var_5761: Tensor[(126, 1), float64], %var_5772: Tensor[(2880), float32]) -> (Tensor[(2880), float32], Tensor[(9, 9, 6), bool], Tensor[(15, 3, 1), float64], Tensor[(126, 1), float64], Tensor[(2880), bool]) {
  %169 = cast(%var_5752, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %170 = reshape(%169, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
  %171 = @func_2744(%170) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(2520), float64], Tensor[(2880), float32]) */;
  %172 = @func_3873() /* ty=Tensor[(9, 9, 6), float32] */;
  %173 = cast(meta[relay.Constant][11] /* ty=Tensor[(9, 9, 6), float32] */, dtype="bool") /* ty=Tensor[(9, 9, 6), bool] */;
  %174 = shape_of(%172, dtype="int32") /* ty=Tensor[(3), int32] */;
  %175 = cast(%172, dtype="bool") /* ty=Tensor[(9, 9, 6), bool] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %177 = cast(%var_5761, dtype="float64") /* ty=Tensor[(126, 1), float64] */;
  %178 = reshape(%177, newshape=[7, 3, 6]) /* ty=Tensor[(7, 3, 6), float64] */;
  %179 = @func_691(%178) /* ty=(Tensor[(16, 11, 12), float32], Tensor[(2112), float32], Tensor[(7, 3, 6), float64], Tensor[(15, 3, 1), float64], Tensor[(45), float64], Tensor[(16, 11, 12), float32], Tensor[(7, 3, 6), float64]) */;
  %180 = cast(%var_5772, dtype="bool") /* ty=Tensor[(2880), bool] */;
  %181 = shape_of(%var_5752, dtype="int32") /* ty=Tensor[(1), int32] */;
  %182 = cast(%var_5752, dtype="bool") /* ty=Tensor[(2880), bool] */;
  %183 = dyn.reshape(%180, %181, newshape=[]) /* ty=Tensor[(?), bool] */;
  %184 = %171.2;
  %185 = not_equal(%175, %176) /* ty=Tensor[(9, 9, 6), bool] */;
  %186 = %179.3;
  %187 = logical_or(%182, %183) /* ty=Tensor[(2880), bool] */;
  (%184, %185, %186, %var_5761, %187)
}

def @func_13074(%var_13065: Tensor[(4, 480), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(4, 480), bool]) {
  %188 = @func_6443() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %189 = @func_9697() /* ty=(Tensor[(4, 480), float64],) */;
  %190 = %189.0;
  %191 = cast(%var_13065, dtype="bool") /* ty=Tensor[(4, 480), bool] */;
  %192 = shape_of(%190, dtype="int32") /* ty=Tensor[(2), int32] */;
  %193 = cast(%190, dtype="bool") /* ty=Tensor[(4, 480), bool] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %195 = %188.0;
  %196 = logical_or(%193, %194) /* ty=Tensor[(4, 480), bool] */;
  (%195, %196)
}

def @func_85(%var_79: Tensor[(16, 11, 12), float32]) -> Tensor[(16, 11, 12), float32] {
  %197 = cast(%var_79, dtype="float32") /* ty=Tensor[(16, 11, 12), float32] */;
  log(%197) /* ty=Tensor[(16, 11, 12), float32] */
}

def @func_4855() -> (Tensor[(7, 6, 5), float64], Tensor[(9, 9, 6), float32]) {
  %198 = @func_4160() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(210), float64]) */;
  %199 = %198.1;
  %200 = @func_2532() /* ty=Tensor[(9, 9, 6), float32] */;
  (%199, %200)
}

def @func_6105() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %201 = @func_3779() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %202 = @func_3271() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %203 = %201.0;
  %204 = %202.0;
  (%203, %204)
}

def @func_3779() -> (Tensor[(9, 9, 6), float32],) {
  %205 = @func_2049() /* ty=Tensor[(9, 9, 6), float32] */;
  (%205,)
}

def @func_9289() -> (Tensor[(9, 9, 6), float32],) {
  %206 = @func_3779() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %207 = %206.0;
  (%207,)
}

def @func_11884() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %208 = @func_11430() /* ty=Tensor[(9, 9, 6), float32] */;
  %209 = @func_1825() /* ty=Tensor[(9, 9, 6), float32] */;
  (%208, %209)
}

def @func_2269(%var_2248: Tensor[(9, 9, 6), float32]) -> (Tensor[(9, 9, 6), bool], Tensor[(9, 9, 6), float64]) {
  %210 = @func_1852() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %211 = %210.0;
  %212 = cast(%211, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  %213 = tan(%212) /* ty=Tensor[(9, 9, 6), float32] */;
  %214 = cast(%211, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  %215 = shape_of(%213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %216 = cast(%213, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %218 = floor_divide(%216, %217) /* ty=Tensor[(9, 9, 6), float32] */;
  %219 = cast(%var_2248, dtype="bool") /* ty=Tensor[(9, 9, 6), bool] */;
  %220 = shape_of(%218, dtype="int32") /* ty=Tensor[(3), int32] */;
  %221 = cast(%218, dtype="bool") /* ty=Tensor[(9, 9, 6), bool] */;
  %222 = dyn.reshape(%219, %220, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %223 = cast(%218, dtype="float64") /* ty=Tensor[(9, 9, 6), float64] */;
  %224 = greater(%221, %222) /* ty=Tensor[(9, 9, 6), bool] */;
  %225 = log10(%223) /* ty=Tensor[(9, 9, 6), float64] */;
  (%224, %225)
}

def @func_13657() -> Tensor[(9, 9, 6), float32] {
  %226 = @func_9289() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %226.0
}

def @func_12828(%var_12809: Tensor[(4, 480), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64]) {
  %227 = @func_8535() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %228 = @func_5584() /* ty=(Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32]) */;
  %229 = %228.0;
  %230 = cast(%var_12809, dtype="uint8") /* ty=Tensor[(4, 480), uint8] */;
  %231 = shape_of(%229, dtype="int32") /* ty=Tensor[(2), int32] */;
  %232 = cast(%229, dtype="uint8") /* ty=Tensor[(4, 480), uint8] */;
  %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %234 = multiply(%232, %233) /* ty=Tensor[(4, 480), uint8] */;
  %235 = cast(%229, dtype="float64") /* ty=Tensor[(4, 480), float64] */;
  %236 = shape_of(%234, dtype="int32") /* ty=Tensor[(2), int32] */;
  %237 = cast(%234, dtype="float64") /* ty=Tensor[(4, 480), float64] */;
  %238 = dyn.reshape(%235, %236, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %239 = %227.0;
  %240 = divide(%237, %238) /* ty=Tensor[(4, 480), float64] */;
  (%239, %240)
}

def @func_2532() -> Tensor[(9, 9, 6), float32] {
  %241 = @func_2420() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %241.0
}

def @func_2596(%var_2589: Tensor[(2112), float32]) -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(16, 11, 12), float32], Tensor[(2112), float32]) {
  %242 = @func_1852() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %243 = @func_2049() /* ty=Tensor[(9, 9, 6), float32] */;
  %244 = cast(%243, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  %245 = cast(%var_2589, dtype="float32") /* ty=Tensor[(2112), float32] */;
  %246 = reshape(%245, newshape=[16, 11, 12]) /* ty=Tensor[(16, 11, 12), float32] */;
  %247 = %242.0;
  %248 = exp(%244) /* ty=Tensor[(9, 9, 6), float32] */;
  %249 = @func_85(%246) /* ty=Tensor[(16, 11, 12), float32] */;
  (%247, %248, %249, %var_2589)
}

def @func_6019() -> Tensor[(9, 9, 6), float32] {
  %250 = @func_2636() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %250.0
}

def @func_3337() -> Tensor[(9, 9, 6), float32] {
  @func_2710() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_2789() -> Tensor[(9, 9, 6), float32] {
  %251 = @func_1852() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %251.0
}

def @func_8657(%var_8649: Tensor[(10, 5, 16), uint16]) -> (Tensor[(10, 5, 16), uint16],) {
  %252 = cast(%var_8649, dtype="uint16") /* ty=Tensor[(10, 5, 16), uint16] */;
  %253 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(10, 5, 16), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %254 = cast(meta[relay.Constant][12] /* ty=Tensor[(10, 5, 16), uint16] */, dtype="uint16") /* ty=Tensor[(10, 5, 16), uint16] */;
  %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %256 = logical_xor(%254, %255) /* ty=Tensor[(10, 5, 16), uint16] */;
  (%256,)
}

def @func_8847() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(4, 15, 3), float64], Tensor[(180), float64], Tensor[(9, 9, 6), float32]) {
  %257 = @func_2420() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %258 = cast(meta[relay.Constant][13] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %259 = reshape(%258, newshape=[4, 15, 3]) /* ty=Tensor[(4, 15, 3), float64] */;
  %260 = @func_7596() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(3, 42), bool]) */;
  %261 = %257.0;
  %262 = @func_3290() /* ty=Tensor[(9, 9, 6), float32] */;
  %263 = @func_3057(%259) /* ty=Tensor[(4, 15, 3), float64] */;
  %264 = %260.0;
  (%261, %262, %263, meta[relay.Constant][13] /* ty=Tensor[(180), float64] */, %264)
}

def @func_8995() -> (Tensor[(126), float64], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %265 = @func_8112() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(2520), float64], Tensor[(2880), float32], Tensor[(126), float64]) */;
  %266 = %265.3;
  %267 = @func_3394() /* ty=Tensor[(9, 9, 6), float32] */;
  %268 = @func_4266() /* ty=Tensor[(9, 9, 6), float32] */;
  (%266, %267, %268)
}

def @func_4444() -> (Tensor[(9, 9, 6), float32],) {
  %269 = @func_3394() /* ty=Tensor[(9, 9, 6), float32] */;
  (%269,)
}

def @func_12656() -> Tensor[(9, 9, 6), float32] {
  @func_3290() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_1433(%var_1360: Tensor[(15, 12, 16), float32], %var_1407: Tensor[(126), float64], %var_1414: Tensor[(15, 12, 14), float64]) -> (Tensor[(15, 12, 16), uint32], Tensor[(2520), float64], Tensor[(2112), float32], Tensor[(126), float64], Tensor[(15, 12, 14), uint8], Tensor[(15, 12, 16), float64]) {
  %270 = cast(%var_1360, dtype="float32") /* ty=Tensor[(15, 12, 16), float32] */;
  %271 = log(%270) /* ty=Tensor[(15, 12, 16), float32] */;
  %272 = cast(%271, dtype="float64") /* ty=Tensor[(15, 12, 16), float64] */;
  %273 = shape_of(%var_1360, dtype="int32") /* ty=Tensor[(3), int32] */;
  %274 = cast(%var_1360, dtype="float64") /* ty=Tensor[(15, 12, 16), float64] */;
  %275 = dyn.reshape(%272, %273, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %276 = floor_mod(%274, %275) /* ty=Tensor[(15, 12, 16), float64] */;
  %277 = cast(%var_1360, dtype="float32") /* ty=Tensor[(15, 12, 16), float32] */;
  %278 = log10(%277) /* ty=Tensor[(15, 12, 16), float32] */;
  %279 = cast(%278, dtype="uint32") /* ty=Tensor[(15, 12, 16), uint32] */;
  %280 = shape_of(%276, dtype="int32") /* ty=Tensor[(3), int32] */;
  %281 = cast(%276, dtype="uint32") /* ty=Tensor[(15, 12, 16), uint32] */;
  %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %283 = cast(%var_1407, dtype="float64") /* ty=Tensor[(126), float64] */;
  %284 = reshape(%283, newshape=[7, 3, 6]) /* ty=Tensor[(7, 3, 6), float64] */;
  %285 = @func_691(%284) /* ty=(Tensor[(16, 11, 12), float32], Tensor[(2112), float32], Tensor[(7, 3, 6), float64], Tensor[(15, 3, 1), float64], Tensor[(45), float64], Tensor[(16, 11, 12), float32], Tensor[(7, 3, 6), float64]) */;
  %286 = cast(meta[relay.Constant][14] /* ty=Tensor[(2520), float64] */, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %287 = reshape(%286, newshape=[15, 12, 14]) /* ty=Tensor[(15, 12, 14), float64] */;
  %288 = @func_768(%287) /* ty=(Tensor[(15, 12, 14), float64],) */;
  %289 = %288.0;
  %290 = cast(%var_1414, dtype="uint8") /* ty=Tensor[(15, 12, 14), uint8] */;
  %291 = shape_of(%289, dtype="int32") /* ty=Tensor[(3), int32] */;
  %292 = cast(%289, dtype="uint8") /* ty=Tensor[(15, 12, 14), uint8] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %294 = cast(%271, dtype="float64") /* ty=Tensor[(15, 12, 16), float64] */;
  %295 = bitwise_xor(%281, %282) /* ty=Tensor[(15, 12, 16), uint32] */;
  %296 = %285.1;
  %297 = bitwise_or(%292, %293) /* ty=Tensor[(15, 12, 14), uint8] */;
  %298 = log2(%294) /* ty=Tensor[(15, 12, 16), float64] */;
  (%295, meta[relay.Constant][14] /* ty=Tensor[(2520), float64] */, %296, %var_1407, %297, %298)
}

def @func_10132() -> Tensor[(9, 9, 6), float32] {
  @func_8893() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_9983() -> Tensor[(9, 9, 6), float32] {
  %299 = @func_8995() /* ty=(Tensor[(126), float64], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %299.1
}

def @func_1738(%var_1732: Tensor[(15, 8, 16), uint8], %var_1733: Tensor[(15, 8, 16), uint8]) -> Tensor[(15, 8, 16), uint8] {
  %300 = cast(%var_1733, dtype="uint8") /* ty=Tensor[(15, 8, 16), uint8] */;
  %301 = shape_of(%var_1732, dtype="int32") /* ty=Tensor[(3), int32] */;
  %302 = cast(%var_1732, dtype="uint8") /* ty=Tensor[(15, 8, 16), uint8] */;
  %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  minimum(%302, %303) /* ty=Tensor[(15, 8, 16), uint8] */
}

def @func_12316() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(15, 8, 16), float32]) {
  %304 = @func_10285() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool], Tensor[(9, 9, 6), float32]) */;
  %305 = @func_5037() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(15, 8, 16), float32]) */;
  %306 = %304.2;
  %307 = @func_4031() /* ty=Tensor[(9, 9, 6), float32] */;
  %308 = %305.5;
  (%306, %307, %308)
}

def @func_13701() -> Tensor[(9, 9, 6), float32] {
  %309 = @func_9892() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %309.0
}

def @func_7025() -> (Tensor[(9, 9, 6), float32],) {
  %310 = @func_3263() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %311 = %310.0;
  (%311,)
}

def @func_9099() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %312 = @func_7108() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %313 = @func_6983() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64]) */;
  %314 = @func_7061() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %315 = %312.0;
  %316 = %313.0;
  %317 = %314.1;
  (%315, %316, %317)
}

def @func_12918() -> Tensor[(9, 9, 6), float32] {
  @func_11430() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_12499() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %318 = @func_4347() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %319 = @func_11594() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %320 = %318.0;
  %321 = %319.0;
  (%320, %321)
}

def @func_5070() -> (Tensor[(9, 9, 6), float32],) {
  %322 = @func_4266() /* ty=Tensor[(9, 9, 6), float32] */;
  (%322,)
}

def @func_13161() -> (Tensor[(9, 9, 6), float32],) {
  %323 = @func_10180() /* ty=Tensor[(9, 9, 6), float32] */;
  (%323,)
}

def @func_11430() -> Tensor[(9, 9, 6), float32] {
  @func_5541() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_13633() -> (Tensor[(9, 9, 6), bool],) {
  %324 = @func_4756() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool]) */;
  %325 = %324.1;
  (%325,)
}

def @func_3829() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %326 = @func_3779() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %327 = @func_2420() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %328 = %326.0;
  %329 = %327.0;
  (%328, %329)
}

def @func_12435() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool], Tensor[(9, 9, 6), float32]) {
  %330 = @func_3207() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %331 = %330.1;
  %332 = cast(%331, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  %333 = reshape(%332, newshape=[9, 9, 6]) /* ty=Tensor[(9, 9, 6), float32] */;
  %334 = @func_2768(%333) /* ty=(Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), bool]) */;
  %335 = @func_9892() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %336 = %334.1;
  %337 = %335.0;
  (%331, %336, %337)
}

def @func_6606(%var_6578: Tensor[(13, 15, 3), bool], %var_6579: Tensor[(13, 15, 3), bool], %var_6588: Tensor[(210), float64]) -> (Tensor[(13, 15, 3), bool], Tensor[(7, 6, 5), float64], Tensor[(210), float64], Tensor[(13, 15, 3), float64]) {
  %338 = cast(%var_6579, dtype="bool") /* ty=Tensor[(13, 15, 3), bool] */;
  %339 = shape_of(%var_6578, dtype="int32") /* ty=Tensor[(3), int32] */;
  %340 = cast(%var_6578, dtype="bool") /* ty=Tensor[(13, 15, 3), bool] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %342 = cast(%var_6588, dtype="float64") /* ty=Tensor[(210), float64] */;
  %343 = reshape(%342, newshape=[210, 1]) /* ty=Tensor[(210, 1), float64] */;
  %344 = @func_3316(%343) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(210, 1), float64]) */;
  %345 = cast(%var_6579, dtype="float64") /* ty=Tensor[(13, 15, 3), float64] */;
  %346 = logical_and(%340, %341) /* ty=Tensor[(13, 15, 3), bool] */;
  %347 = %344.1;
  %348 = sqrt(%345) /* ty=Tensor[(13, 15, 3), float64] */;
  (%346, %347, %var_6588, %348)
}

def @func_13808() -> (Tensor[(9, 9, 6), float32],) {
  %349 = @func_10303() /* ty=Tensor[(9, 9, 6), float32] */;
  (%349,)
}

def @func_2492() -> (Tensor[(9, 9, 6), float32],) {
  %350 = @func_1825() /* ty=Tensor[(9, 9, 6), float32] */;
  (%350,)
}

def @func_6983() -> (Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64]) {
  %351 = @func_3779() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %352 = @func_5584() /* ty=(Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32]) */;
  %353 = %351.0;
  %354 = %352.0;
  (%353, %354)
}

def @func_9262(%var_9239: Tensor[(11, 3, 7), int64]) -> (Tensor[(11, 3, 7), int64], Tensor[(11, 3, 7), float64], Tensor[(9, 9, 6), float32]) {
  %355 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 3, 7), int64] */, dtype="int64") /* ty=Tensor[(11, 3, 7), int64] */;
  %356 = shape_of(%var_9239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %357 = cast(%var_9239, dtype="int64") /* ty=Tensor[(11, 3, 7), int64] */;
  %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %359 = cast(%var_9239, dtype="float64") /* ty=Tensor[(11, 3, 7), float64] */;
  %360 = bitwise_xor(%357, %358) /* ty=Tensor[(11, 3, 7), int64] */;
  %361 = asin(%359) /* ty=Tensor[(11, 3, 7), float64] */;
  %362 = @func_6492() /* ty=Tensor[(9, 9, 6), float32] */;
  (%360, %361, %362)
}

def @func_1852() -> (Tensor[(9, 9, 6), float32],) {
  %363 = @func_1825() /* ty=Tensor[(9, 9, 6), float32] */;
  (%363,)
}

def @func_2189(%var_2169: Tensor[(45), float64]) -> (Tensor[(45), float64], Tensor[(9, 9, 6), float64], Tensor[(15, 3, 1), float64], Tensor[(16, 11, 12), float32], Tensor[(528, 4), float32]) {
  %364 = @func_2049() /* ty=Tensor[(9, 9, 6), float32] */;
  %365 = cast(%364, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  %366 = cosh(%365) /* ty=Tensor[(9, 9, 6), float32] */;
  %367 = cast(%366, dtype="float64") /* ty=Tensor[(9, 9, 6), float64] */;
  %368 = shape_of(%364, dtype="int32") /* ty=Tensor[(3), int32] */;
  %369 = cast(%364, dtype="float64") /* ty=Tensor[(9, 9, 6), float64] */;
  %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %371 = cast(%var_2169, dtype="float64") /* ty=Tensor[(45), float64] */;
  %372 = reshape(%371, newshape=[15, 3, 1]) /* ty=Tensor[(15, 3, 1), float64] */;
  %373 = @func_284(%372) /* ty=(Tensor[(15, 3, 1), float64],) */;
  %374 = %373.0;
  %375 = cast(%374, dtype="float64") /* ty=Tensor[(15, 3, 1), float64] */;
  %376 = cast(meta[relay.Constant][16] /* ty=Tensor[(528, 4), float32] */, dtype="float32") /* ty=Tensor[(528, 4), float32] */;
  %377 = reshape(%376, newshape=[16, 11, 12]) /* ty=Tensor[(16, 11, 12), float32] */;
  %378 = divide(%369, %370) /* ty=Tensor[(9, 9, 6), float64] */;
  %379 = asinh(%375) /* ty=Tensor[(15, 3, 1), float64] */;
  %380 = @func_85(%377) /* ty=Tensor[(16, 11, 12), float32] */;
  (%var_2169, %378, %379, %380, meta[relay.Constant][16] /* ty=Tensor[(528, 4), float32] */)
}

def @func_2768(%var_2754: Tensor[(9, 9, 6), float32]) -> (Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), bool]) {
  %381 = @func_2636() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %382 = %381.2;
  %383 = cast(%var_2754, dtype="float64") /* ty=Tensor[(9, 9, 6), float64] */;
  %384 = shape_of(%382, dtype="int32") /* ty=Tensor[(3), int32] */;
  %385 = cast(%382, dtype="float64") /* ty=Tensor[(9, 9, 6), float64] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %387 = cast(%382, dtype="bool") /* ty=Tensor[(9, 9, 6), bool] */;
  %388 = shape_of(%var_2754, dtype="int32") /* ty=Tensor[(3), int32] */;
  %389 = cast(%var_2754, dtype="bool") /* ty=Tensor[(9, 9, 6), bool] */;
  %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %391 = mod(%385, %386) /* ty=Tensor[(9, 9, 6), float64] */;
  %392 = less_equal(%389, %390) /* ty=Tensor[(9, 9, 6), bool] */;
  (%391, %392)
}

def @func_2049() -> Tensor[(9, 9, 6), float32] {
  %393 = @func_1852() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %393.0
}

def @func_12902() -> (Tensor[(4, 480), uint8],) {
  %394 = @func_4016() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(15, 8, 16), uint8], Tensor[(4, 480), uint8]) */;
  %395 = %394.2;
  (%395,)
}

def @func_3271() -> (Tensor[(9, 9, 6), float32],) {
  %396 = @func_1825() /* ty=Tensor[(9, 9, 6), float32] */;
  (%396,)
}

def @func_3521(%var_3447: Tensor[(3, 1, 6), int64], %var_3448: Tensor[(3, 10, 6), int64], %var_3480: Tensor[(3, 15, 6), float32], %var_3492: Tensor[(486), float32]) -> (Tensor[(3, 10, 6), bool], Tensor[(9, 9, 6), bool], Tensor[(486), float32], Tensor[(9, 9, 6), bool], Tensor[(3, 15, 6), float64], Tensor[(3, 10, 6), uint64]) {
  %397 = cast(%var_3447, dtype="bool") /* ty=Tensor[(3, 1, 6), bool] */;
  %398 = cast(%var_3448, dtype="bool") /* ty=Tensor[(3, 10, 6), bool] */;
  %399 = cast(%var_3492, dtype="float32") /* ty=Tensor[(486), float32] */;
  %400 = reshape(%399, newshape=[9, 9, 6]) /* ty=Tensor[(9, 9, 6), float32] */;
  %401 = @func_2269(%400) /* ty=(Tensor[(9, 9, 6), bool], Tensor[(9, 9, 6), float64]) */;
  %402 = %401.0;
  %403 = cast(%402, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  %404 = reshape(%403, newshape=[9, 9, 6]) /* ty=Tensor[(9, 9, 6), float32] */;
  %405 = @func_2269(%404) /* ty=(Tensor[(9, 9, 6), bool], Tensor[(9, 9, 6), float64]) */;
  %406 = cast(%var_3447, dtype="float32") /* ty=Tensor[(3, 1, 6), float32] */;
  %407 = atanh(%406) /* ty=Tensor[(3, 1, 6), float32] */;
  %408 = cast(%407, dtype="float32") /* ty=Tensor[(3, 1, 6), float32] */;
  %409 = cast(%var_3480, dtype="float32") /* ty=Tensor[(3, 15, 6), float32] */;
  %410 = power(%408, %409) /* ty=Tensor[(3, 15, 6), float32] */;
  %411 = cast(meta[relay.Constant][17] /* ty=Tensor[(3, 15, 6), float32] */, dtype="float64") /* ty=Tensor[(3, 15, 6), float64] */;
  %412 = shape_of(%410, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%410, dtype="float64") /* ty=Tensor[(3, 15, 6), float64] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %415 = cast(%407, dtype="uint64") /* ty=Tensor[(3, 1, 6), uint64] */;
  %416 = cast(%var_3448, dtype="uint64") /* ty=Tensor[(3, 10, 6), uint64] */;
  %417 = equal(%397, %398) /* ty=Tensor[(3, 10, 6), bool] */;
  %418 = %405.0;
  %419 = divide(%413, %414) /* ty=Tensor[(3, 15, 6), float64] */;
  %420 = add(%415, %416) /* ty=Tensor[(3, 10, 6), uint64] */;
  (%417, %402, %var_3492, %418, %419, %420)
}

def @func_9657() -> Tensor[(9, 9, 6), float32] {
  %421 = @func_1852() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %421.0
}

def @func_5541() -> Tensor[(9, 9, 6), float32] {
  %422 = @func_2492() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %422.0
}

def @func_7940(%var_7817: Tensor[(45), float64], %var_7820: Tensor[(6, 20), uint32], %var_7853: Tensor[(2880), float32]) -> (Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(16, 11, 12), float32], Tensor[(6, 20), uint32], Tensor[(840), uint32], Tensor[(9, 9, 6), float32], Tensor[(2880), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), uint8], Tensor[(9, 9, 6), float32]) {
  %423 = @func_4444() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %424 = cast(%var_7820, dtype="uint32") /* ty=Tensor[(6, 20), uint32] */;
  %425 = cast(meta[relay.Constant][18] /* ty=Tensor[(840), uint32] */, dtype="uint32") /* ty=Tensor[(840), uint32] */;
  %426 = cast(%var_7817, dtype="float64") /* ty=Tensor[(45), float64] */;
  %427 = reshape(%424, newshape=[1, 10, 12]) /* ty=Tensor[(1, 10, 12), uint32] */;
  %428 = reshape(%425, newshape=[7, 10, 12]) /* ty=Tensor[(7, 10, 12), uint32] */;
  %429 = reshape(%426, newshape=[45]) /* ty=Tensor[(45), float64] */;
  %430 = @func_6322(%427, %428, %429) /* ty=(Tensor[(7, 10, 12), uint32], Tensor[(16, 11, 12), float32], Tensor[(45), float64]) */;
  %431 = @func_2917() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %432 = @func_2420() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %433 = @func_4160() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(210), float64]) */;
  %434 = @func_5584() /* ty=(Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32]) */;
  %435 = cast(%var_7853, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %436 = reshape(%435, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
  %437 = @func_3019(%436) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), float32], Tensor[(2880), float32]) */;
  %438 = %437.1;
  %439 = cast(%438, dtype="float64") /* ty=Tensor[(9, 9, 6), float64] */;
  %440 = log(%439) /* ty=Tensor[(9, 9, 6), float64] */;
  %441 = cast(%var_7817, dtype="float64") /* ty=Tensor[(45), float64] */;
  %442 = reshape(%441, newshape=[45]) /* ty=Tensor[(45), float64] */;
  %443 = @func_5261(%442) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float64], Tensor[(45), float64]) */;
  %444 = %443.1;
  %445 = cast(%444, dtype="uint8") /* ty=Tensor[(9, 9, 6), uint8] */;
  %446 = shape_of(%440, dtype="int32") /* ty=Tensor[(3), int32] */;
  %447 = cast(%440, dtype="uint8") /* ty=Tensor[(9, 9, 6), uint8] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %449 = @func_7226() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %450 = %423.0;
  %451 = %430.1;
  %452 = %431.0;
  %453 = %432.0;
  %454 = %433.0;
  %455 = %434.1;
  %456 = multiply(%447, %448) /* ty=Tensor[(9, 9, 6), uint8] */;
  %457 = %449.1;
  (%450, %var_7817, %451, %var_7820, meta[relay.Constant][18] /* ty=Tensor[(840), uint32] */, %452, %var_7853, %453, %454, %455, %456, %457)
}

def @func_14225() -> (Tensor[(5, 4, 16), float64],) {
  %458 = @func_7963() /* ty=(Tensor[(5, 4, 16), float64],) */;
  %459 = %458.0;
  (%459,)
}

def @func_6922() -> Tensor[(8, 15, 13), float64] {
  %460 = cast(meta[relay.Constant][19] /* ty=Tensor[(8, 15, 13), float64] */, dtype="float64") /* ty=Tensor[(8, 15, 13), float64] */;
  sigmoid(%460) /* ty=Tensor[(8, 15, 13), float64] */
}

def @func_1892(%var_1860: Tensor[(126), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(126), float64], Tensor[(15, 12, 14), int64]) {
  %461 = @func_1852() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %462 = cast(%var_1860, dtype="float64") /* ty=Tensor[(126), float64] */;
  %463 = reshape(%462, newshape=[7, 3, 6]) /* ty=Tensor[(7, 3, 6), float64] */;
  %464 = @func_691(%463) /* ty=(Tensor[(16, 11, 12), float32], Tensor[(2112), float32], Tensor[(7, 3, 6), float64], Tensor[(15, 3, 1), float64], Tensor[(45), float64], Tensor[(16, 11, 12), float32], Tensor[(7, 3, 6), float64]) */;
  %465 = cast(meta[relay.Constant][20] /* ty=Tensor[(2520), float64] */, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %466 = reshape(%465, newshape=[15, 12, 14]) /* ty=Tensor[(15, 12, 14), float64] */;
  %467 = @func_768(%466) /* ty=(Tensor[(15, 12, 14), float64],) */;
  %468 = %467.0;
  %469 = cast(meta[relay.Constant][20] /* ty=Tensor[(2520), float64] */, dtype="int64") /* ty=Tensor[(2520), int64] */;
  %470 = shape_of(%468, dtype="int32") /* ty=Tensor[(3), int32] */;
  %471 = cast(%468, dtype="int64") /* ty=Tensor[(15, 12, 14), int64] */;
  %472 = dyn.reshape(%469, %470, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %473 = %461.0;
  %474 = %464.4;
  %475 = multiply(%471, %472) /* ty=Tensor[(15, 12, 14), int64] */;
  (%473, %474, %var_1860, %475)
}

def @func_7979() -> (Tensor[(9, 9, 6), float32], Tensor[(210), float64]) {
  %476 = @func_4160() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(210), float64]) */;
  %477 = @func_2049() /* ty=Tensor[(9, 9, 6), float32] */;
  %478 = %476.2;
  (%477, %478)
}

def @func_12112() -> Tensor[(9, 9, 6), float32] {
  @func_7387() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_10375() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %479 = @func_10285() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool], Tensor[(9, 9, 6), float32]) */;
  %480 = @func_4016() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(15, 8, 16), uint8], Tensor[(4, 480), uint8]) */;
  %481 = %479.2;
  %482 = @func_2710() /* ty=Tensor[(9, 9, 6), float32] */;
  %483 = %480.0;
  (%481, %482, %483)
}

def @func_3316(%var_3310: Tensor[(210, 1), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(210, 1), float64]) {
  %484 = @func_2420() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %485 = cast(%var_3310, dtype="float64") /* ty=Tensor[(210, 1), float64] */;
  %486 = reshape(%485, newshape=[7, 6, 5]) /* ty=Tensor[(7, 6, 5), float64] */;
  %487 = @func_1203(%486) /* ty=(Tensor[(7, 6, 5), float64],) */;
  %488 = %484.0;
  %489 = %487.0;
  (%488, %489, %var_3310)
}

def @func_2710() -> Tensor[(9, 9, 6), float32] {
  %490 = @func_1852() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %490.0
}

def @func_5656() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %491 = @func_5584() /* ty=(Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32]) */;
  %492 = %491.1;
  %493 = @func_3394() /* ty=Tensor[(9, 9, 6), float32] */;
  (%492, %493)
}

def @func_13937() -> (Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(126), float64], Tensor[(2880), float32]) {
  %494 = cast(meta[relay.Constant][21] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
  %495 = reshape(%494, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %496 = @func_2672(%495) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(126), float64]) */;
  %497 = @func_12057() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(2880), float32], Tensor[(9, 9, 6), float32], Tensor[(2880), float32]) */;
  %498 = %497.1;
  %499 = cast(%498, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %500 = @func_9657() /* ty=Tensor[(9, 9, 6), float32] */;
  %501 = %496.1;
  %502 = cosh(%499) /* ty=Tensor[(2880), float32] */;
  (%500, %501, meta[relay.Constant][21] /* ty=Tensor[(126), float64] */, %502)
}

def @func_8176(%var_8149: Tensor[(1, 624), uint8], %var_8167: Tensor[(576), uint8], %var_8169: Tensor[(2880), float32]) -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], uint8, Tensor[(1, 624), uint8], Tensor[(210), float64], Tensor[(9, 9, 6), float64], Tensor[(576), uint8], Tensor[(1920), uint8], Tensor[(2880), float32]) {
  %503 = @func_5956() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %504 = @func_7290() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64]) */;
  %505 = cast(meta[relay.Constant][22] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %506 = cast(%var_8149, dtype="uint8") /* ty=Tensor[(1, 624), uint8] */;
  %507 = cast(meta[relay.Constant][23] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
  %508 = reshape(%505, newshape=[]) /* ty=uint8 */;
  %509 = reshape(%506, newshape=[12, 4, 13]) /* ty=Tensor[(12, 4, 13), uint8] */;
  %510 = reshape(%507, newshape=[1, 210]) /* ty=Tensor[(1, 210), float64] */;
  %511 = @func_3709(%508, %509, %510) /* ty=(Tensor[(12, 4, 13), bool], Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(1, 210), float64]) */;
  %512 = cast(%var_8167, dtype="uint8") /* ty=Tensor[(576), uint8] */;
  %513 = cast(%var_8167, dtype="uint8") /* ty=Tensor[(576), uint8] */;
  %514 = cast(meta[relay.Constant][24] /* ty=Tensor[(1920), uint8] */, dtype="uint8") /* ty=Tensor[(1920), uint8] */;
  %515 = cast(%var_8169, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %516 = reshape(%512, newshape=[9, 8, 8]) /* ty=Tensor[(9, 8, 8), uint8] */;
  %517 = reshape(%513, newshape=[9, 8, 8]) /* ty=Tensor[(9, 8, 8), uint8] */;
  %518 = reshape(%514, newshape=[1920]) /* ty=Tensor[(1920), uint8] */;
  %519 = reshape(%515, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
  %520 = @func_5169(%516, %517, %518, %519) /* ty=(Tensor[(9, 8, 8), bool], Tensor[(15, 8, 16), uint8], Tensor[(1920), uint8], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), float32], Tensor[(2880), float32]) */;
  %521 = %503.0;
  %522 = %504.0;
  %523 = %511.1;
  %524 = %520.4;
  (%521, %522, %523, meta[relay.Constant][22] /* ty=uint8 */, %var_8149, meta[relay.Constant][23] /* ty=Tensor[(210), float64] */, %524, %var_8167, meta[relay.Constant][24] /* ty=Tensor[(1920), uint8] */, %var_8169)
}

def @func_14058() -> Tensor[(9, 9, 6), float32] {
  @func_13997() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_1825() -> Tensor[(9, 9, 6), float32] {
  %525 = cast(meta[relay.Constant][25] /* ty=Tensor[(9, 9, 6), float32] */, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  acosh(%525) /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_13419() -> (Tensor[(9, 9, 6), float32], Tensor[(45), float64]) {
  %526 = @func_10375() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %527 = @func_5860() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(9, 9, 6), float32]) */;
  %528 = %526.2;
  %529 = %527.3;
  (%528, %529)
}

def @func_3642() -> Tensor[(9, 9, 6), float32] {
  %530 = @func_2636() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %530.2
}

def @func_11786() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool], Tensor[(18), int64], Tensor[(180), int64], Tensor[(270), float32], Tensor[(8, 15, 13), float64]) {
  %531 = cast(meta[relay.Constant][26] /* ty=Tensor[(18), int64] */, dtype="int64") /* ty=Tensor[(18), int64] */;
  %532 = cast(meta[relay.Constant][27] /* ty=Tensor[(180), int64] */, dtype="int64") /* ty=Tensor[(180), int64] */;
  %533 = cast(meta[relay.Constant][28] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
  %534 = @func_3642() /* ty=Tensor[(9, 9, 6), float32] */;
  %535 = cast(%534, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  %536 = reshape(%531, newshape=[3, 1, 6]) /* ty=Tensor[(3, 1, 6), int64] */;
  %537 = reshape(%532, newshape=[3, 10, 6]) /* ty=Tensor[(3, 10, 6), int64] */;
  %538 = reshape(%533, newshape=[3, 15, 6]) /* ty=Tensor[(3, 15, 6), float32] */;
  %539 = reshape(%535, newshape=[486]) /* ty=Tensor[(486), float32] */;
  %540 = @func_3521(%536, %537, %538, %539) /* ty=(Tensor[(3, 10, 6), bool], Tensor[(9, 9, 6), bool], Tensor[(486), float32], Tensor[(9, 9, 6), bool], Tensor[(3, 15, 6), float64], Tensor[(3, 10, 6), uint64]) */;
  %541 = %540.1;
  %542 = @func_6922() /* ty=Tensor[(8, 15, 13), float64] */;
  (%534, %541, meta[relay.Constant][26] /* ty=Tensor[(18), int64] */, meta[relay.Constant][27] /* ty=Tensor[(180), int64] */, meta[relay.Constant][28] /* ty=Tensor[(270), float32] */, %542)
}

def @func_3599() -> (Tensor[(13, 6, 6), float32], Tensor[(4, 15, 3), float64], Tensor[(180), float64]) {
  %543 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 6, 6), float32] */, dtype="float32") /* ty=Tensor[(13, 6, 6), float32] */;
  %544 = cast(meta[relay.Constant][30] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %545 = reshape(%544, newshape=[4, 15, 3]) /* ty=Tensor[(4, 15, 3), float64] */;
  %546 = cosh(%543) /* ty=Tensor[(13, 6, 6), float32] */;
  %547 = @func_3057(%545) /* ty=Tensor[(4, 15, 3), float64] */;
  (%546, %547, meta[relay.Constant][30] /* ty=Tensor[(180), float64] */)
}

def @func_284(%var_254: Tensor[(15, 3, 1), float64]) -> (Tensor[(15, 3, 1), float64],) {
  %548 = cast(%var_254, dtype="float64") /* ty=Tensor[(15, 3, 1), float64] */;
  %549 = log2(%548) /* ty=Tensor[(15, 3, 1), float64] */;
  (%549,)
}

def @func_2459(%var_2447: Tensor[(9, 9, 6), float32]) -> (Tensor[(15, 3, 1), float64], Tensor[(45), float64], Tensor[(9, 9, 6), int16]) {
  %550 = cast(meta[relay.Constant][31] /* ty=Tensor[(45), float64] */, dtype="float64") /* ty=Tensor[(45), float64] */;
  %551 = reshape(%550, newshape=[15, 3, 1]) /* ty=Tensor[(15, 3, 1), float64] */;
  %552 = @func_284(%551) /* ty=(Tensor[(15, 3, 1), float64],) */;
  %553 = @func_2420() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %554 = %553.0;
  %555 = cast(%var_2447, dtype="int16") /* ty=Tensor[(9, 9, 6), int16] */;
  %556 = shape_of(%554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(%554, dtype="int16") /* ty=Tensor[(9, 9, 6), int16] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %559 = %552.0;
  %560 = maximum(%557, %558) /* ty=Tensor[(9, 9, 6), int16] */;
  (%559, meta[relay.Constant][31] /* ty=Tensor[(45), float64] */, %560)
}

def @func_4911() -> (Tensor[(9, 9, 6), float32], Tensor[(3, 42), float64], Tensor[(126), float64]) {
  %561 = @func_3131() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %562 = cast(meta[relay.Constant][32] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
  %563 = reshape(%562, newshape=[3, 42]) /* ty=Tensor[(3, 42), float64] */;
  %564 = @func_4074(%563) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(15, 12, 14), int64], Tensor[(3, 42), float64]) */;
  %565 = %561.1;
  %566 = %564.2;
  (%565, %566, meta[relay.Constant][32] /* ty=Tensor[(126), float64] */)
}

def @func_13429() -> (Tensor[(9, 9, 6), float32],) {
  %567 = @func_10180() /* ty=Tensor[(9, 9, 6), float32] */;
  (%567,)
}

def @func_2636() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %568 = @func_1852() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %569 = @func_2492() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %570 = %568.0;
  %571 = %569.0;
  %572 = @func_2049() /* ty=Tensor[(9, 9, 6), float32] */;
  (%570, %571, %572)
}

def @func_14268(%var_14262: Tensor[(16, 9, 14), float64]) -> (Tensor[(16, 9, 14), float64],) {
  %573 = cast(%var_14262, dtype="float64") /* ty=Tensor[(16, 9, 14), float64] */;
  %574 = log(%573) /* ty=Tensor[(16, 9, 14), float64] */;
  (%574,)
}

def @func_13997() -> Tensor[(9, 9, 6), float32] {
  @func_9657() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_7174() -> (Tensor[(9, 9, 6), float32],) {
  %575 = @func_2492() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %576 = %575.0;
  (%576,)
}

def @func_7963() -> (Tensor[(5, 4, 16), float64],) {
  %577 = cast(meta[relay.Constant][33] /* ty=Tensor[(5, 4, 16), float64] */, dtype="float64") /* ty=Tensor[(5, 4, 16), float64] */;
  %578 = rsqrt(%577) /* ty=Tensor[(5, 4, 16), float64] */;
  (%578,)
}

def @func_1203(%var_1197: Tensor[(7, 6, 5), float64]) -> (Tensor[(7, 6, 5), float64],) {
  %579 = cast(%var_1197, dtype="float64") /* ty=Tensor[(7, 6, 5), float64] */;
  %580 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(7, 6, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(meta[relay.Constant][34] /* ty=Tensor[(7, 6, 5), float64] */, dtype="float64") /* ty=Tensor[(7, 6, 5), float64] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %583 = power(%581, %582) /* ty=Tensor[(7, 6, 5), float64] */;
  (%583,)
}

def @func_9697() -> (Tensor[(4, 480), float64],) {
  %584 = @func_6983() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64]) */;
  %585 = %584.1;
  (%585,)
}

def @func_6697() -> Tensor[(9, 9, 6), float32] {
  %586 = @func_3131() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %586.1
}

def @func_9402() -> Tensor[(9, 9, 6), float32] {
  %587 = @func_3131() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %587.0
}

def @func_3758() -> (Tensor[(9, 9, 6), float32],) {
  %588 = @func_2636() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %589 = %588.1;
  (%589,)
}

def @func_11594() -> (Tensor[(9, 9, 6), float32],) {
  %590 = @func_7444() /* ty=Tensor[(9, 9, 6), float32] */;
  (%590,)
}

def @func_8112() -> (Tensor[(9, 9, 6), float32], Tensor[(2520), float64], Tensor[(2880), float32], Tensor[(126), float64]) {
  %591 = @func_4444() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %592 = cast(meta[relay.Constant][35] /* ty=Tensor[(2880), float32] */, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %593 = cast(meta[relay.Constant][36] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
  %594 = reshape(%592, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
  %595 = reshape(%593, newshape=[3, 42]) /* ty=Tensor[(3, 42), float64] */;
  %596 = @func_7789(%594, %595) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(5, 10, 14), bool], Tensor[(9, 9, 6), float32], Tensor[(2880), float32], Tensor[(2520), float64], Tensor[(3, 42), float64], Tensor[(9, 9, 6), float32], Tensor[(10), float32]) */;
  %597 = %591.0;
  %598 = %596.4;
  (%597, %598, meta[relay.Constant][35] /* ty=Tensor[(2880), float32] */, meta[relay.Constant][36] /* ty=Tensor[(126), float64] */)
}

def @func_13841() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %599 = @func_5037() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(15, 8, 16), float32]) */;
  %600 = @func_9289() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %601 = %599.0;
  %602 = %600.0;
  %603 = @func_6118() /* ty=Tensor[(9, 9, 6), float32] */;
  (%601, %602, %603)
}

def @func_8535() -> (Tensor[(9, 9, 6), float32],) {
  %604 = @func_6826() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %605 = %604.0;
  (%605,)
}

def @func_5051(%var_5049: Tensor[(2880), float32]) -> (Tensor[(9, 9, 6), float32], Tensor[(2880), float32], Tensor[(2880), float32]) {
  %606 = @func_4444() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %607 = cast(%var_5049, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %608 = reshape(%607, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
  %609 = @func_2744(%608) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(2520), float64], Tensor[(2880), float32]) */;
  %610 = %606.0;
  %611 = %609.2;
  (%610, %611, %var_5049)
}

def @func_3394() -> Tensor[(9, 9, 6), float32] {
  @func_3337() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_13010() -> Tensor[(5, 4, 16), float64] {
  %612 = @func_7963() /* ty=(Tensor[(5, 4, 16), float64],) */;
  %612.0
}

def @func_5037() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(15, 8, 16), float32]) {
  %613 = @func_3758() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %614 = @func_2420() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %615 = @func_4016() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(15, 8, 16), uint8], Tensor[(4, 480), uint8]) */;
  %616 = %615.1;
  %617 = cast(%616, dtype="float32") /* ty=Tensor[(15, 8, 16), float32] */;
  %618 = %613.0;
  %619 = @func_4641() /* ty=Tensor[(9, 9, 6), float32] */;
  %620 = @func_3873() /* ty=Tensor[(9, 9, 6), float32] */;
  %621 = %614.0;
  %622 = @func_1825() /* ty=Tensor[(9, 9, 6), float32] */;
  %623 = sin(%617) /* ty=Tensor[(15, 8, 16), float32] */;
  (%618, %619, %620, %621, %622, %623)
}

def @func_11230(%var_11198: Tensor[(15, 10, 1), bool]) -> (Tensor[(9, 9, 6), float32], Tensor[(15, 10, ?), float64]) {
  %624 = @func_1852() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %625 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %626 = cast(%var_11198, dtype="bool") /* ty=Tensor[(15, 10, 1), bool] */;
  %627 = logical_or(%625, %626) /* ty=Tensor[(15, 10, 1), bool] */;
  %628 = cast(%var_11198, dtype="bool") /* ty=Tensor[(15, 10, 1), bool] */;
  %629 = shape_of(%627, dtype="int32") /* ty=Tensor[(3), int32] */;
  %630 = cast(%627, dtype="bool") /* ty=Tensor[(15, 10, 1), bool] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %632 = greater_equal(%630, %631) /* ty=Tensor[(15, 10, ?), bool] */;
  %633 = cast(%632, dtype="float64") /* ty=Tensor[(15, 10, ?), float64] */;
  %634 = %624.0;
  %635 = sqrt(%633) /* ty=Tensor[(15, 10, ?), float64] */;
  (%634, %635)
}

def @func_6118() -> Tensor[(9, 9, 6), float32] {
  %636 = @func_3758() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %636.0
}

def @func_14079() -> (Tensor[(5, 4, 16), float64], Tensor[(16, 9, 6), bool], Tensor[(864), uint16]) {
  %637 = @func_7963() /* ty=(Tensor[(5, 4, 16), float64],) */;
  %638 = cast(meta[relay.Constant][37] /* ty=Tensor[(864), uint16] */, dtype="uint16") /* ty=Tensor[(864), uint16] */;
  %639 = reshape(%638, newshape=[16, 9, 6]) /* ty=Tensor[(16, 9, 6), uint16] */;
  %640 = %637.0;
  %641 = @func_8673(%639) /* ty=Tensor[(16, 9, 6), bool] */;
  (%640, %641, meta[relay.Constant][37] /* ty=Tensor[(864), uint16] */)
}

def @func_4641() -> Tensor[(9, 9, 6), float32] {
  @func_2789() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_12355(%var_12353: Tensor[(210, 1), float64]) -> (Tensor[(126), float64], Tensor[(4, 480), float64], Tensor[(210, 1), float64], Tensor[(210, 1), float64]) {
  %642 = @func_9044() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(126), float64], Tensor[(126), float64]) */;
  %643 = @func_6771() /* ty=(Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32]) */;
  %644 = cast(%var_12353, dtype="float64") /* ty=Tensor[(210, 1), float64] */;
  %645 = reshape(%644, newshape=[210, 1]) /* ty=Tensor[(210, 1), float64] */;
  %646 = @func_3316(%645) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(210, 1), float64]) */;
  %647 = %642.1;
  %648 = %643.0;
  %649 = %646.2;
  (%647, %648, %649, %var_12353)
}

def @func_6771() -> (Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32]) {
  %650 = @func_5860() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(9, 9, 6), float32]) */;
  %651 = %650.1;
  %652 = @func_5092() /* ty=Tensor[(9, 9, 6), float32] */;
  (%651, %652)
}

def @func_8231() -> (Tensor[(210), float64],) {
  %653 = @func_7979() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(210), float64]) */;
  %654 = %653.1;
  (%654,)
}

def @func_3131() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %655 = @func_2710() /* ty=Tensor[(9, 9, 6), float32] */;
  %656 = cast(%655, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  %657 = cast(%655, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  %658 = cos(%656) /* ty=Tensor[(9, 9, 6), float32] */;
  %659 = log2(%657) /* ty=Tensor[(9, 9, 6), float32] */;
  (%658, %659)
}

def @func_7061() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %660 = @func_1852() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %661 = @func_6368() /* ty=Tensor[(9, 9, 6), float32] */;
  %662 = %660.0;
  (%661, %662)
}

def @func_13556(%var_13550: Tensor[(4, 480), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(4, 480), bool]) {
  %663 = @func_2492() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %664 = @func_6983() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64]) */;
  %665 = %664.1;
  %666 = cast(%665, dtype="float64") /* ty=Tensor[(4, 480), float64] */;
  %667 = sigmoid(%666) /* ty=Tensor[(4, 480), float64] */;
  %668 = cast(%var_13550, dtype="bool") /* ty=Tensor[(4, 480), bool] */;
  %669 = shape_of(%667, dtype="int32") /* ty=Tensor[(2), int32] */;
  %670 = cast(%667, dtype="bool") /* ty=Tensor[(4, 480), bool] */;
  %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %672 = %663.0;
  %673 = less_equal(%670, %671) /* ty=Tensor[(4, 480), bool] */;
  (%672, %673)
}

def @func_7527() -> (Tensor[(9, 9, 6), float32],) {
  %674 = @func_1852() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %675 = %674.0;
  (%675,)
}

def @func_4589() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(2880), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %676 = cast(meta[relay.Constant][38] /* ty=Tensor[(2880), float32] */, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %677 = reshape(%676, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
  %678 = @func_2111(%677) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(15, 12, 16), uint32], Tensor[(2880), float32], Tensor[(126), float64], Tensor[(2520), float64]) */;
  %679 = @func_2492() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %680 = @func_3337() /* ty=Tensor[(9, 9, 6), float32] */;
  %681 = %678.0;
  %682 = %679.0;
  %683 = @func_3394() /* ty=Tensor[(9, 9, 6), float32] */;
  (%680, %681, meta[relay.Constant][38] /* ty=Tensor[(2880), float32] */, %682, %683)
}

def @func_5901() -> (Tensor[(9, 9, 6), float32],) {
  %684 = @func_3271() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %685 = %684.0;
  (%685,)
}

def @func_12739() -> (Tensor[(9, 9, 6), float32],) {
  %686 = @func_6019() /* ty=Tensor[(9, 9, 6), float32] */;
  (%686,)
}

def @func_4016() -> (Tensor[(9, 9, 6), float32], Tensor[(15, 8, 16), uint8], Tensor[(4, 480), uint8]) {
  %687 = cast(meta[relay.Constant][39] /* ty=Tensor[(4, 480), uint8] */, dtype="uint8") /* ty=Tensor[(4, 480), uint8] */;
  %688 = cast(meta[relay.Constant][39] /* ty=Tensor[(4, 480), uint8] */, dtype="uint8") /* ty=Tensor[(4, 480), uint8] */;
  %689 = reshape(%687, newshape=[15, 8, 16]) /* ty=Tensor[(15, 8, 16), uint8] */;
  %690 = reshape(%688, newshape=[15, 8, 16]) /* ty=Tensor[(15, 8, 16), uint8] */;
  %691 = @func_3394() /* ty=Tensor[(9, 9, 6), float32] */;
  %692 = @func_1738(%689, %690) /* ty=Tensor[(15, 8, 16), uint8] */;
  (%691, %692, meta[relay.Constant][39] /* ty=Tensor[(4, 480), uint8] */)
}

def @func_9892() -> (Tensor[(9, 9, 6), float32],) {
  %693 = @func_1852() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %694 = %693.0;
  (%694,)
}

def @func_2744(%var_2737: Tensor[(2880), float32]) -> (Tensor[(9, 9, 6), float32], Tensor[(2520), float64], Tensor[(2880), float32]) {
  %695 = cast(%var_2737, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %696 = reshape(%695, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
  %697 = @func_2111(%696) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(15, 12, 16), uint32], Tensor[(2880), float32], Tensor[(126), float64], Tensor[(2520), float64]) */;
  %698 = @func_2710() /* ty=Tensor[(9, 9, 6), float32] */;
  %699 = %697.4;
  (%698, %699, %var_2737)
}

def @func_2022(%var_1908: Tensor[(126), float64], %var_1909: Tensor[(2520), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(126), float64], Tensor[(126), float64], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(2520), float32], Tensor[(15, 12, 14), float64], Tensor[(2880), float64], Tensor[(15, 12, 14), float64], Tensor[(15, 8, 16), uint8], Tensor[(1920), uint8], Tensor[(16, 11, 12), float32]) {
  %700 = cast(%var_1908, dtype="float64") /* ty=Tensor[(126), float64] */;
  %701 = reshape(%700, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %702 = @func_1892(%701) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(126), float64], Tensor[(15, 12, 14), int64]) */;
  %703 = @func_1852() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %704 = cast(meta[relay.Constant][40] /* ty=Tensor[(2880), float32] */, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %705 = cast(%var_1908, dtype="float64") /* ty=Tensor[(126), float64] */;
  %706 = cast(%var_1909, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %707 = reshape(%704, newshape=[15, 12, 16]) /* ty=Tensor[(15, 12, 16), float32] */;
  %708 = reshape(%705, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %709 = reshape(%706, newshape=[15, 12, 14]) /* ty=Tensor[(15, 12, 14), float64] */;
  %710 = @func_1433(%707, %708, %709) /* ty=(Tensor[(15, 12, 16), uint32], Tensor[(2520), float64], Tensor[(2112), float32], Tensor[(126), float64], Tensor[(15, 12, 14), uint8], Tensor[(15, 12, 16), float64]) */;
  %711 = %710.5;
  %712 = cast(%711, dtype="float32") /* ty=Tensor[(15, 12, 16), float32] */;
  %713 = cast(%var_1908, dtype="float64") /* ty=Tensor[(126), float64] */;
  %714 = cast(%var_1909, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %715 = reshape(%712, newshape=[15, 12, 16]) /* ty=Tensor[(15, 12, 16), float32] */;
  %716 = reshape(%713, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %717 = reshape(%714, newshape=[15, 12, 14]) /* ty=Tensor[(15, 12, 14), float64] */;
  %718 = @func_1433(%715, %716, %717) /* ty=(Tensor[(15, 12, 16), uint32], Tensor[(2520), float64], Tensor[(2112), float32], Tensor[(126), float64], Tensor[(15, 12, 14), uint8], Tensor[(15, 12, 16), float64]) */;
  %719 = %718.1;
  %720 = cast(%719, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %721 = shape_of(%var_1909, dtype="int32") /* ty=Tensor[(1), int32] */;
  %722 = cast(%var_1909, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?), float32] */;
  %724 = cast(%719, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %725 = reshape(%724, newshape=[15, 12, 14]) /* ty=Tensor[(15, 12, 14), float64] */;
  %726 = @func_768(%725) /* ty=(Tensor[(15, 12, 14), float64],) */;
  %727 = cast(meta[relay.Constant][40] /* ty=Tensor[(2880), float32] */, dtype="bool") /* ty=Tensor[(2880), bool] */;
  %728 = shape_of(%711, dtype="int32") /* ty=Tensor[(3), int32] */;
  %729 = cast(%711, dtype="bool") /* ty=Tensor[(15, 12, 16), bool] */;
  %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %731 = logical_or(%729, %730) /* ty=Tensor[(15, 12, 16), bool] */;
  %732 = cast(%731, dtype="float64") /* ty=Tensor[(15, 12, 16), float64] */;
  %733 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(2880), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %734 = cast(meta[relay.Constant][40] /* ty=Tensor[(2880), float32] */, dtype="float64") /* ty=Tensor[(2880), float64] */;
  %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?), float64] */;
  %736 = cast(%var_1909, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %737 = reshape(%736, newshape=[15, 12, 14]) /* ty=Tensor[(15, 12, 14), float64] */;
  %738 = @func_768(%737) /* ty=(Tensor[(15, 12, 14), float64],) */;
  %739 = cast(meta[relay.Constant][41] /* ty=Tensor[(1920), uint8] */, dtype="uint8") /* ty=Tensor[(1920), uint8] */;
  %740 = cast(meta[relay.Constant][41] /* ty=Tensor[(1920), uint8] */, dtype="uint8") /* ty=Tensor[(1920), uint8] */;
  %741 = reshape(%739, newshape=[15, 8, 16]) /* ty=Tensor[(15, 8, 16), uint8] */;
  %742 = reshape(%740, newshape=[15, 8, 16]) /* ty=Tensor[(15, 8, 16), uint8] */;
  %743 = cast(%var_1908, dtype="float64") /* ty=Tensor[(126), float64] */;
  %744 = reshape(%743, newshape=[7, 3, 6]) /* ty=Tensor[(7, 3, 6), float64] */;
  %745 = @func_691(%744) /* ty=(Tensor[(16, 11, 12), float32], Tensor[(2112), float32], Tensor[(7, 3, 6), float64], Tensor[(15, 3, 1), float64], Tensor[(45), float64], Tensor[(16, 11, 12), float32], Tensor[(7, 3, 6), float64]) */;
  %746 = @func_1825() /* ty=Tensor[(9, 9, 6), float32] */;
  %747 = %702.2;
  %748 = %703.0;
  %749 = @func_1825() /* ty=Tensor[(9, 9, 6), float32] */;
  %750 = floor_divide(%722, %723) /* ty=Tensor[(2520), float32] */;
  %751 = %726.0;
  %752 = divide(%734, %735) /* ty=Tensor[(2880), float64] */;
  %753 = %738.0;
  %754 = @func_1738(%741, %742) /* ty=Tensor[(15, 8, 16), uint8] */;
  %755 = %745.0;
  (%746, %var_1908, %747, %748, %749, %750, %751, %752, %753, %754, meta[relay.Constant][41] /* ty=Tensor[(1920), uint8] */, %755)
}

def @func_8392() -> (Tensor[(9, 9, 6), float32],) {
  %756 = @func_3873() /* ty=Tensor[(9, 9, 6), float32] */;
  (%756,)
}

def @func_3263() -> (Tensor[(9, 9, 6), float32],) {
  %757 = @func_2532() /* ty=Tensor[(9, 9, 6), float32] */;
  (%757,)
}

def @func_2672(%var_2656: Tensor[(126), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(126), float64]) {
  %758 = @func_2532() /* ty=Tensor[(9, 9, 6), float32] */;
  %759 = cast(%758, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  %760 = cast(%var_2656, dtype="float64") /* ty=Tensor[(126), float64] */;
  %761 = reshape(%760, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %762 = @func_1892(%761) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(126), float64], Tensor[(15, 12, 14), int64]) */;
  %763 = asin(%759) /* ty=Tensor[(9, 9, 6), float32] */;
  %764 = %762.1;
  (%763, %764, %var_2656)
}

def @func_12057() -> (Tensor[(9, 9, 6), float32], Tensor[(2880), float32], Tensor[(9, 9, 6), float32], Tensor[(2880), float32]) {
  %765 = @func_8847() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(4, 15, 3), float64], Tensor[(180), float64], Tensor[(9, 9, 6), float32]) */;
  %766 = cast(meta[relay.Constant][42] /* ty=Tensor[(2880), float32] */, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %767 = reshape(%766, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
  %768 = @func_2744(%767) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(2520), float64], Tensor[(2880), float32]) */;
  %769 = cast(meta[relay.Constant][42] /* ty=Tensor[(2880), float32] */, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %770 = %765.0;
  %771 = %768.2;
  %772 = @func_3394() /* ty=Tensor[(9, 9, 6), float32] */;
  %773 = atan(%769) /* ty=Tensor[(2880), float32] */;
  (%770, %771, %772, %773)
}

def @func_10015() -> (Tensor[(9, 9, 6), float32],) {
  %774 = @func_6443() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %775 = %774.0;
  (%775,)
}

def @func_10236() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(4, 15, 3), float32]) {
  %776 = @func_3271() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %777 = @func_8893() /* ty=Tensor[(9, 9, 6), float32] */;
  %778 = %776.0;
  %779 = @func_9226() /* ty=Tensor[(4, 15, 3), float32] */;
  (%777, %778, %779)
}

def @func_10958() -> (Tensor[(9, 9, 6), float32],) {
  %780 = @func_5584() /* ty=(Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32]) */;
  %781 = %780.1;
  (%781,)
}

def @func_4756() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool]) {
  %782 = @func_4031() /* ty=Tensor[(9, 9, 6), float32] */;
  %783 = cast(%782, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  %784 = reshape(%783, newshape=[9, 9, 6]) /* ty=Tensor[(9, 9, 6), float32] */;
  %785 = @func_2768(%784) /* ty=(Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), bool]) */;
  %786 = %785.1;
  (%782, %786)
}

def @func_9044() -> (Tensor[(9, 9, 6), float32], Tensor[(126), float64], Tensor[(126), float64]) {
  %787 = @func_3131() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %788 = cast(meta[relay.Constant][43] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
  %789 = reshape(%788, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %790 = @func_1892(%789) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(126), float64], Tensor[(15, 12, 14), int64]) */;
  %791 = %787.0;
  %792 = %790.2;
  (%791, %792, meta[relay.Constant][43] /* ty=Tensor[(126), float64] */)
}

def @func_10671() -> Tensor[(9, 9, 6), float32] {
  %793 = @func_3271() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %793.0
}

def @func_12155() -> (Tensor[(9, 9, 6), float32],) {
  %794 = @func_11594() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %795 = %794.0;
  (%795,)
}

def @func_7226() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %796 = @func_2492() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %797 = %796.0;
  %798 = @func_2710() /* ty=Tensor[(9, 9, 6), float32] */;
  (%797, %798)
}

def @func_10795() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %799 = @func_4641() /* ty=Tensor[(9, 9, 6), float32] */;
  %800 = @func_3290() /* ty=Tensor[(9, 9, 6), float32] */;
  (%799, %800)
}

def @func_7290() -> (Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64]) {
  %801 = @func_5901() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %802 = @func_6771() /* ty=(Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32]) */;
  %803 = %802.0;
  %804 = cast(%803, dtype="float64") /* ty=Tensor[(4, 480), float64] */;
  %805 = %801.0;
  %806 = sinh(%804) /* ty=Tensor[(4, 480), float64] */;
  (%805, %806)
}

def @func_11507(%var_11469: float32, %var_11470: Tensor[(9, 15, 3), float32]) -> (Tensor[(9, 15, 3), float32], Tensor[(9, 9, 6), float32]) {
  %807 = cast(%var_11469, dtype="float32") /* ty=float32 */;
  %808 = cast(%var_11470, dtype="float32") /* ty=Tensor[(9, 15, 3), float32] */;
  %809 = floor_divide(%807, %808) /* ty=Tensor[(9, 15, 3), float32] */;
  %810 = @func_9402() /* ty=Tensor[(9, 9, 6), float32] */;
  (%809, %810)
}

def @func_8893() -> Tensor[(9, 9, 6), float32] {
  %811 = @func_8700() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %811.1
}

def @func_13992() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(2520), float64], Tensor[(2880), float32], Tensor[(3, 42), float64], Tensor[(2520, 1), float64], Tensor[(126), float64]) {
  %812 = @func_11340() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool], Tensor[(9, 9, 6), float32], Tensor[(8, 12, 2), int8], Tensor[(192), int8], Tensor[(126), float64], Tensor[(9, 9, 6), bool]) */;
  %813 = @func_8847() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(4, 15, 3), float64], Tensor[(180), float64], Tensor[(9, 9, 6), float32]) */;
  %814 = cast(meta[relay.Constant][44] /* ty=Tensor[(2880), float32] */, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %815 = cast(meta[relay.Constant][45] /* ty=Tensor[(3, 42), float64] */, dtype="float64") /* ty=Tensor[(3, 42), float64] */;
  %816 = cast(meta[relay.Constant][46] /* ty=Tensor[(2520, 1), float64] */, dtype="float64") /* ty=Tensor[(2520, 1), float64] */;
  %817 = reshape(%814, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
  %818 = reshape(%815, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %819 = reshape(%816, newshape=[2520]) /* ty=Tensor[(2520), float64] */;
  %820 = @func_2393(%817, %818, %819) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(126), float64], Tensor[(2880), float32], Tensor[(126), float64], Tensor[(2520), float64], Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(126), float64]) */;
  %821 = cast(meta[relay.Constant][45] /* ty=Tensor[(3, 42), float64] */, dtype="float64") /* ty=Tensor[(3, 42), float64] */;
  %822 = cast(meta[relay.Constant][46] /* ty=Tensor[(2520, 1), float64] */, dtype="float64") /* ty=Tensor[(2520, 1), float64] */;
  %823 = reshape(%821, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %824 = reshape(%822, newshape=[2520]) /* ty=Tensor[(2520), float64] */;
  %825 = @func_2022(%823, %824) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(126), float64], Tensor[(126), float64], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(2520), float32], Tensor[(15, 12, 14), float64], Tensor[(2880), float64], Tensor[(15, 12, 14), float64], Tensor[(15, 8, 16), uint8], Tensor[(1920), uint8], Tensor[(16, 11, 12), float32]) */;
  %826 = %812.2;
  %827 = %813.1;
  %828 = %820.4;
  %829 = %825.1;
  (%826, %827, %828, meta[relay.Constant][44] /* ty=Tensor[(2880), float32] */, meta[relay.Constant][45] /* ty=Tensor[(3, 42), float64] */, meta[relay.Constant][46] /* ty=Tensor[(2520, 1), float64] */, %829)
}

def @func_6492() -> Tensor[(9, 9, 6), float32] {
  @func_4031() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_9226() -> Tensor[(4, 15, 3), float32] {
  %830 = @func_8847() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(4, 15, 3), float64], Tensor[(180), float64], Tensor[(9, 9, 6), float32]) */;
  %831 = %830.2;
  %832 = cast(%831, dtype="float32") /* ty=Tensor[(4, 15, 3), float32] */;
  erf(%832) /* ty=Tensor[(4, 15, 3), float32] */
}

def @func_10835() -> (Tensor[(9, 9, 6), float32],) {
  %833 = @func_6368() /* ty=Tensor[(9, 9, 6), float32] */;
  (%833,)
}

def @func_6235(%var_6169: Tensor[(5, 10, 14), uint16], %var_6170: Tensor[(5, 10, 14), uint16]) -> (Tensor[(5, 10, 14), bool], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(5, 10, 14), float64], Tensor[(486), float32], int8, Tensor[(2366), int8]) {
  %834 = cast(%var_6170, dtype="bool") /* ty=Tensor[(5, 10, 14), bool] */;
  %835 = shape_of(%var_6169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %836 = cast(%var_6169, dtype="bool") /* ty=Tensor[(5, 10, 14), bool] */;
  %837 = dyn.reshape(%834, %835, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %838 = @func_5956() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %839 = cast(%var_6169, dtype="float32") /* ty=Tensor[(5, 10, 14), float32] */;
  %840 = acosh(%839) /* ty=Tensor[(5, 10, 14), float32] */;
  %841 = cast(%840, dtype="float64") /* ty=Tensor[(5, 10, 14), float64] */;
  %842 = cast(meta[relay.Constant][47] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %843 = cast(meta[relay.Constant][48] /* ty=Tensor[(2366), int8] */, dtype="int8") /* ty=Tensor[(2366), int8] */;
  %844 = reshape(%842, newshape=[]) /* ty=int8 */;
  %845 = reshape(%843, newshape=[13, 13, 14]) /* ty=Tensor[(13, 13, 14), int8] */;
  %846 = @func_3558(%844, %845) /* ty=(Tensor[(13, 13, 14), int8], Tensor[(9, 9, 6), bool], Tensor[(486), float32]) */;
  %847 = less(%836, %837) /* ty=Tensor[(5, 10, 14), bool] */;
  %848 = %838.0;
  %849 = @func_3642() /* ty=Tensor[(9, 9, 6), float32] */;
  %850 = @func_3642() /* ty=Tensor[(9, 9, 6), float32] */;
  %851 = atan(%841) /* ty=Tensor[(5, 10, 14), float64] */;
  %852 = %846.2;
  (%847, %848, %849, %850, %851, %852, meta[relay.Constant][47] /* ty=int8 */, meta[relay.Constant][48] /* ty=Tensor[(2366), int8] */)
}

def @func_11038(%var_11020: Tensor[(486), float32], %var_11032: Tensor[(486), float32]) -> (Tensor[(45), float64], Tensor[(9, 9, 6), float64], Tensor[(486), int16]) {
  %853 = @func_5860() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(9, 9, 6), float32]) */;
  %854 = cast(%var_11020, dtype="float32") /* ty=Tensor[(486), float32] */;
  %855 = reshape(%854, newshape=[9, 9, 6]) /* ty=Tensor[(9, 9, 6), float32] */;
  %856 = @func_2269(%855) /* ty=(Tensor[(9, 9, 6), bool], Tensor[(9, 9, 6), float64]) */;
  %857 = cast(%var_11032, dtype="int16") /* ty=Tensor[(486), int16] */;
  %858 = shape_of(%var_11020, dtype="int32") /* ty=Tensor[(1), int32] */;
  %859 = cast(%var_11020, dtype="int16") /* ty=Tensor[(486), int16] */;
  %860 = dyn.reshape(%857, %858, newshape=[]) /* ty=Tensor[(?), int16] */;
  %861 = %853.3;
  %862 = %856.1;
  %863 = logical_xor(%859, %860) /* ty=Tensor[(486), int16] */;
  (%861, %862, %863)
}

def @func_4160() -> (Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(210), float64]) {
  %864 = cast(meta[relay.Constant][49] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
  %865 = reshape(%864, newshape=[7, 6, 5]) /* ty=Tensor[(7, 6, 5), float64] */;
  %866 = @func_1203(%865) /* ty=(Tensor[(7, 6, 5), float64],) */;
  %867 = @func_3290() /* ty=Tensor[(9, 9, 6), float32] */;
  %868 = %866.0;
  (%867, %868, meta[relay.Constant][49] /* ty=Tensor[(210), float64] */)
}

def @func_14280() -> (Tensor[(9, 9, 6), float32],) {
  %869 = @func_3873() /* ty=Tensor[(9, 9, 6), float32] */;
  (%869,)
}

def @func_13343(%var_13338: Tensor[(180), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(4, 15, 3), float64], Tensor[(180), float64], Tensor[(9, 9, 6), float32]) {
  %870 = @func_6826() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %871 = cast(%var_13338, dtype="float64") /* ty=Tensor[(180), float64] */;
  %872 = reshape(%871, newshape=[4, 15, 3]) /* ty=Tensor[(4, 15, 3), float64] */;
  %873 = @func_11648() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %874 = %870.1;
  %875 = @func_3057(%872) /* ty=Tensor[(4, 15, 3), float64] */;
  %876 = %873.2;
  (%874, %875, %var_13338, %876)
}

def @func_5169(%var_5124: Tensor[(9, 8, 8), uint8], %var_5125: Tensor[(9, 8, 8), uint8], %var_5132: Tensor[(1920), uint8], %var_5155: Tensor[(2880), float32]) -> (Tensor[(9, 8, 8), bool], Tensor[(15, 8, 16), uint8], Tensor[(1920), uint8], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), float32], Tensor[(2880), float32]) {
  %877 = cast(%var_5125, dtype="bool") /* ty=Tensor[(9, 8, 8), bool] */;
  %878 = shape_of(%var_5124, dtype="int32") /* ty=Tensor[(3), int32] */;
  %879 = cast(%var_5124, dtype="bool") /* ty=Tensor[(9, 8, 8), bool] */;
  %880 = dyn.reshape(%877, %878, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %881 = cast(%var_5132, dtype="uint8") /* ty=Tensor[(1920), uint8] */;
  %882 = cast(%var_5132, dtype="uint8") /* ty=Tensor[(1920), uint8] */;
  %883 = reshape(%881, newshape=[15, 8, 16]) /* ty=Tensor[(15, 8, 16), uint8] */;
  %884 = reshape(%882, newshape=[15, 8, 16]) /* ty=Tensor[(15, 8, 16), uint8] */;
  %885 = @func_2492() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %886 = %885.0;
  %887 = cast(%886, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  %888 = reshape(%887, newshape=[9, 9, 6]) /* ty=Tensor[(9, 9, 6), float32] */;
  %889 = @func_2768(%888) /* ty=(Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), bool]) */;
  %890 = cast(%var_5155, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %891 = reshape(%890, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
  %892 = @func_3019(%891) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), float32], Tensor[(2880), float32]) */;
  %893 = less_equal(%879, %880) /* ty=Tensor[(9, 8, 8), bool] */;
  %894 = @func_1738(%883, %884) /* ty=Tensor[(15, 8, 16), uint8] */;
  %895 = %889.0;
  %896 = %892.0;
  (%893, %894, %var_5132, %886, %895, %896, %var_5155)
}

def @func_9626(%var_9516: Tensor[(12, 8, 2), float32]) -> (Tensor[(45), float64], Tensor[(45), float64], Tensor[(7, 6, 5), float64], Tensor[(9, 9, 6), float32], Tensor[(126), float64], Tensor[(12, 8, 2), float32], Tensor[(9, 9, 6), float32]) {
  %897 = cast(meta[relay.Constant][50] /* ty=Tensor[(45), float64] */, dtype="float64") /* ty=Tensor[(45), float64] */;
  %898 = reshape(%897, newshape=[45]) /* ty=Tensor[(45), float64] */;
  %899 = @func_2189(%898) /* ty=(Tensor[(45), float64], Tensor[(9, 9, 6), float64], Tensor[(15, 3, 1), float64], Tensor[(16, 11, 12), float32], Tensor[(528, 4), float32]) */;
  %900 = @func_8499() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(9, 9, 6), float32]) */;
  %901 = @func_7025() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %902 = @func_8995() /* ty=(Tensor[(126), float64], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %903 = cast(%var_9516, dtype="float32") /* ty=Tensor[(12, 8, 2), float32] */;
  %904 = cosh(%903) /* ty=Tensor[(12, 8, 2), float32] */;
  %905 = cast(%904, dtype="float32") /* ty=Tensor[(12, 8, 2), float32] */;
  %906 = @func_4589() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(2880), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %907 = %899.0;
  %908 = %900.1;
  %909 = %901.0;
  %910 = %902.0;
  %911 = acos(%905) /* ty=Tensor[(12, 8, 2), float32] */;
  %912 = %906.1;
  (%907, meta[relay.Constant][50] /* ty=Tensor[(45), float64] */, %908, %909, %910, %911, %912)
}

def @func_3709(%var_3660: uint8, %var_3661: Tensor[(12, 4, 13), uint8], %var_3687: Tensor[(1, 210), float64]) -> (Tensor[(12, 4, 13), bool], Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(1, 210), float64]) {
  %913 = cast(%var_3660, dtype="bool") /* ty=bool */;
  %914 = cast(%var_3661, dtype="bool") /* ty=Tensor[(12, 4, 13), bool] */;
  %915 = @func_2420() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %916 = cast(%var_3687, dtype="float64") /* ty=Tensor[(1, 210), float64] */;
  %917 = reshape(%916, newshape=[210, 1]) /* ty=Tensor[(210, 1), float64] */;
  %918 = @func_3316(%917) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(210, 1), float64]) */;
  %919 = less_equal(%913, %914) /* ty=Tensor[(12, 4, 13), bool] */;
  %920 = %915.0;
  %921 = %918.1;
  (%919, %920, %921, %var_3687)
}

def @func_6465() -> Tensor[(9, 9, 6), float32] {
  %922 = @func_3779() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %922.0
}

def @func_10180() -> Tensor[(9, 9, 6), float32] {
  %923 = @func_6826() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %923.0
}

def @func_7789(%var_7763: Tensor[(2880), float32], %var_7764: Tensor[(3, 42), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(5, 10, 14), bool], Tensor[(9, 9, 6), float32], Tensor[(2880), float32], Tensor[(2520), float64], Tensor[(3, 42), float64], Tensor[(9, 9, 6), float32], Tensor[(10), float32]) {
  %924 = @func_3779() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %925 = cast(meta[relay.Constant][51] /* ty=Tensor[(700), uint16] */, dtype="uint16") /* ty=Tensor[(700), uint16] */;
  %926 = cast(meta[relay.Constant][51] /* ty=Tensor[(700), uint16] */, dtype="uint16") /* ty=Tensor[(700), uint16] */;
  %927 = reshape(%925, newshape=[5, 10, 14]) /* ty=Tensor[(5, 10, 14), uint16] */;
  %928 = reshape(%926, newshape=[5, 10, 14]) /* ty=Tensor[(5, 10, 14), uint16] */;
  %929 = @func_6235(%927, %928) /* ty=(Tensor[(5, 10, 14), bool], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(5, 10, 14), float64], Tensor[(486), float32], int8, Tensor[(2366), int8]) */;
  %930 = %929.0;
  %931 = cast(meta[relay.Constant][51] /* ty=Tensor[(700), uint16] */, dtype="bool") /* ty=Tensor[(700), bool] */;
  %932 = shape_of(%930, dtype="int32") /* ty=Tensor[(3), int32] */;
  %933 = cast(%930, dtype="bool") /* ty=Tensor[(5, 10, 14), bool] */;
  %934 = dyn.reshape(%931, %932, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %935 = cast(%var_7763, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %936 = cast(%var_7764, dtype="float64") /* ty=Tensor[(3, 42), float64] */;
  %937 = cast(meta[relay.Constant][52] /* ty=Tensor[(2520), float64] */, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %938 = reshape(%935, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
  %939 = reshape(%936, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %940 = reshape(%937, newshape=[2520]) /* ty=Tensor[(2520), float64] */;
  %941 = @func_2393(%938, %939, %940) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(126), float64], Tensor[(2880), float32], Tensor[(126), float64], Tensor[(2520), float64], Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(126), float64]) */;
  %942 = cast(%var_7764, dtype="float64") /* ty=Tensor[(3, 42), float64] */;
  %943 = cast(meta[relay.Constant][53] /* ty=Tensor[(10), float32] */, dtype="float32") /* ty=Tensor[(10), float32] */;
  %944 = reshape(%943, newshape=[1, 1, 10]) /* ty=Tensor[(1, 1, 10), float32] */;
  %945 = @func_5398(%944) /* ty=(Tensor[(1, 1, 10), float64], Tensor[(9, 9, 6), float32]) */;
  %946 = %924.0;
  %947 = less_equal(%933, %934) /* ty=Tensor[(5, 10, 14), bool] */;
  %948 = %941.6;
  %949 = sqrt(%942) /* ty=Tensor[(3, 42), float64] */;
  %950 = %945.1;
  (%946, %947, %948, %var_7763, meta[relay.Constant][52] /* ty=Tensor[(2520), float64] */, %949, %950, meta[relay.Constant][53] /* ty=Tensor[(10), float32] */)
}

def @func_9829() -> (Tensor[(15, 8, 16), float32],) {
  %951 = @func_5037() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(15, 8, 16), float32]) */;
  %952 = %951.5;
  (%952,)
}

def @func_10577() -> (Tensor[(7, 6, 5), float64],) {
  %953 = @func_8499() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(9, 9, 6), float32]) */;
  %954 = %953.1;
  (%954,)
}

def @func_691(%var_616: Tensor[(7, 3, 6), float64]) -> (Tensor[(16, 11, 12), float32], Tensor[(2112), float32], Tensor[(7, 3, 6), float64], Tensor[(15, 3, 1), float64], Tensor[(45), float64], Tensor[(16, 11, 12), float32], Tensor[(7, 3, 6), float64]) {
  %955 = cast(meta[relay.Constant][54] /* ty=Tensor[(2112), float32] */, dtype="float32") /* ty=Tensor[(2112), float32] */;
  %956 = reshape(%955, newshape=[16, 11, 12]) /* ty=Tensor[(16, 11, 12), float32] */;
  %957 = cast(%var_616, dtype="float64") /* ty=Tensor[(7, 3, 6), float64] */;
  %958 = atanh(%957) /* ty=Tensor[(7, 3, 6), float64] */;
  %959 = cast(%var_616, dtype="float64") /* ty=Tensor[(7, 3, 6), float64] */;
  %960 = shape_of(%958, dtype="int32") /* ty=Tensor[(3), int32] */;
  %961 = cast(%958, dtype="float64") /* ty=Tensor[(7, 3, 6), float64] */;
  %962 = dyn.reshape(%959, %960, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %963 = cast(meta[relay.Constant][55] /* ty=Tensor[(45), float64] */, dtype="float64") /* ty=Tensor[(45), float64] */;
  %964 = reshape(%963, newshape=[15, 3, 1]) /* ty=Tensor[(15, 3, 1), float64] */;
  %965 = @func_284(%964) /* ty=(Tensor[(15, 3, 1), float64],) */;
  %966 = @func_85(%956) /* ty=Tensor[(16, 11, 12), float32] */;
  %967 = cast(%966, dtype="float32") /* ty=Tensor[(16, 11, 12), float32] */;
  %968 = reshape(%967, newshape=[16, 11, 12]) /* ty=Tensor[(16, 11, 12), float32] */;
  %969 = cast(%958, dtype="float32") /* ty=Tensor[(7, 3, 6), float32] */;
  %970 = sin(%969) /* ty=Tensor[(7, 3, 6), float32] */;
  %971 = cast(%958, dtype="bool") /* ty=Tensor[(7, 3, 6), bool] */;
  %972 = shape_of(%970, dtype="int32") /* ty=Tensor[(3), int32] */;
  %973 = cast(%970, dtype="bool") /* ty=Tensor[(7, 3, 6), bool] */;
  %974 = dyn.reshape(%971, %972, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %975 = greater_equal(%973, %974) /* ty=Tensor[(7, 3, 6), bool] */;
  %976 = cast(%975, dtype="float64") /* ty=Tensor[(7, 3, 6), float64] */;
  %977 = power(%961, %962) /* ty=Tensor[(7, 3, 6), float64] */;
  %978 = %965.0;
  %979 = @func_85(%968) /* ty=Tensor[(16, 11, 12), float32] */;
  %980 = log2(%976) /* ty=Tensor[(7, 3, 6), float64] */;
  (%966, meta[relay.Constant][54] /* ty=Tensor[(2112), float32] */, %977, %978, meta[relay.Constant][55] /* ty=Tensor[(45), float64] */, %979, %980)
}

def @func_10582() -> Tensor[(4, 14, 3), float32] {
  %981 = cast(meta[relay.Constant][56] /* ty=Tensor[(4, 14, 3), float32] */, dtype="float32") /* ty=Tensor[(4, 14, 3), float32] */;
  cos(%981) /* ty=Tensor[(4, 14, 3), float32] */
}

def @func_10285() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool], Tensor[(9, 9, 6), float32]) {
  %982 = @func_5656() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %983 = @func_4756() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool]) */;
  %984 = %982.0;
  %985 = %983.1;
  %986 = @func_2049() /* ty=Tensor[(9, 9, 6), float32] */;
  (%984, %985, %986)
}

def @func_8673(%var_8669: Tensor[(16, 9, 6), uint16]) -> Tensor[(16, 9, 6), bool] {
  %987 = cast(meta[relay.Constant][57] /* ty=uint16 */, dtype="bool") /* ty=bool */;
  %988 = cast(%var_8669, dtype="bool") /* ty=Tensor[(16, 9, 6), bool] */;
  equal(%987, %988) /* ty=Tensor[(16, 9, 6), bool] */
}

def @func_11729(%var_11718: Tensor[(486), float32]) -> (Tensor[(15, 8, 16), uint8], Tensor[(9, 9, 6), float64], Tensor[(486), float32]) {
  %989 = @func_10727() /* ty=(Tensor[(15, 8, 16), uint8],) */;
  %990 = cast(%var_11718, dtype="float32") /* ty=Tensor[(486), float32] */;
  %991 = cast(%var_11718, dtype="float32") /* ty=Tensor[(486), float32] */;
  %992 = reshape(%990, newshape=[486]) /* ty=Tensor[(486), float32] */;
  %993 = reshape(%991, newshape=[486]) /* ty=Tensor[(486), float32] */;
  %994 = @func_11038(%992, %993) /* ty=(Tensor[(45), float64], Tensor[(9, 9, 6), float64], Tensor[(486), int16]) */;
  %995 = %989.0;
  %996 = %994.1;
  (%995, %996, %var_11718)
}

def @func_12870(%var_12858: Tensor[(576), uint8], %var_12860: Tensor[(2880), float32]) -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(576), uint8], Tensor[(1920), uint8], Tensor[(2880), float32], Tensor[(7, 6, 5), float64], Tensor[(210), float64]) {
  %997 = cast(%var_12858, dtype="uint8") /* ty=Tensor[(576), uint8] */;
  %998 = cast(%var_12858, dtype="uint8") /* ty=Tensor[(576), uint8] */;
  %999 = cast(meta[relay.Constant][58] /* ty=Tensor[(1920), uint8] */, dtype="uint8") /* ty=Tensor[(1920), uint8] */;
  %1000 = cast(%var_12860, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %1001 = reshape(%997, newshape=[9, 8, 8]) /* ty=Tensor[(9, 8, 8), uint8] */;
  %1002 = reshape(%998, newshape=[9, 8, 8]) /* ty=Tensor[(9, 8, 8), uint8] */;
  %1003 = reshape(%999, newshape=[1920]) /* ty=Tensor[(1920), uint8] */;
  %1004 = reshape(%1000, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
  %1005 = @func_5169(%1001, %1002, %1003, %1004) /* ty=(Tensor[(9, 8, 8), bool], Tensor[(15, 8, 16), uint8], Tensor[(1920), uint8], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), float32], Tensor[(2880), float32]) */;
  %1006 = cast(meta[relay.Constant][59] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
  %1007 = reshape(%1006, newshape=[7, 6, 5]) /* ty=Tensor[(7, 6, 5), float64] */;
  %1008 = @func_1203(%1007) /* ty=(Tensor[(7, 6, 5), float64],) */;
  %1009 = @func_2710() /* ty=Tensor[(9, 9, 6), float32] */;
  %1010 = %1005.5;
  %1011 = %1008.0;
  (%1009, %1010, %var_12858, meta[relay.Constant][58] /* ty=Tensor[(1920), uint8] */, %var_12860, %1011, meta[relay.Constant][59] /* ty=Tensor[(210), float64] */)
}

def @func_12629(%var_12602: Tensor[(7, 8, 6), bool]) -> Tensor[(7, 8, 6), uint8] {
  %1012 = cast(%var_12602, dtype="bool") /* ty=Tensor[(7, 8, 6), bool] */;
  %1013 = shape_of(meta[relay.Constant][60] /* ty=Tensor[(7, 8, 6), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1014 = cast(meta[relay.Constant][60] /* ty=Tensor[(7, 8, 6), bool] */, dtype="bool") /* ty=Tensor[(7, 8, 6), bool] */;
  %1015 = dyn.reshape(%1012, %1013, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1016 = logical_and(%1014, %1015) /* ty=Tensor[(7, 8, 6), bool] */;
  %1017 = cast(%1016, dtype="uint8") /* ty=Tensor[(7, 8, 6), uint8] */;
  %1018 = shape_of(%var_12602, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1019 = cast(%var_12602, dtype="uint8") /* ty=Tensor[(7, 8, 6), uint8] */;
  %1020 = dyn.reshape(%1017, %1018, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  logical_xor(%1019, %1020) /* ty=Tensor[(7, 8, 6), uint8] */
}

def @func_7444() -> Tensor[(9, 9, 6), float32] {
  @func_6019() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_4193() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %1021 = @func_3290() /* ty=Tensor[(9, 9, 6), float32] */;
  %1022 = @func_1825() /* ty=Tensor[(9, 9, 6), float32] */;
  (%1021, %1022)
}

def @func_5956() -> (Tensor[(9, 9, 6), float32],) {
  %1023 = @func_3263() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %1024 = %1023.0;
  (%1024,)
}

def @func_13352() -> Tensor[(9, 9, 6), float32] {
  @func_3394() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_6826() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %1025 = @func_5901() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %1026 = @func_2049() /* ty=Tensor[(9, 9, 6), float32] */;
  %1027 = %1025.0;
  (%1026, %1027)
}

def @func_6443() -> (Tensor[(9, 9, 6), float32],) {
  %1028 = @func_6368() /* ty=Tensor[(9, 9, 6), float32] */;
  (%1028,)
}

def @func_13747() -> Tensor[(9, 9, 6), float32] {
  @func_2049() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_7432() -> (Tensor[(9, 9, 6), float32],) {
  %1029 = @func_3337() /* ty=Tensor[(9, 9, 6), float32] */;
  (%1029,)
}

def @func_11900() -> Tensor[(9, 9, 6), float32] {
  @func_11430() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_7387() -> Tensor[(9, 9, 6), float32] {
  @func_6019() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_5261(%var_5256: Tensor[(45), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float64], Tensor[(45), float64]) {
  %1030 = @func_2636() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %1031 = cast(%var_5256, dtype="float64") /* ty=Tensor[(45), float64] */;
  %1032 = reshape(%1031, newshape=[45]) /* ty=Tensor[(45), float64] */;
  %1033 = @func_2189(%1032) /* ty=(Tensor[(45), float64], Tensor[(9, 9, 6), float64], Tensor[(15, 3, 1), float64], Tensor[(16, 11, 12), float32], Tensor[(528, 4), float32]) */;
  %1034 = %1030.0;
  %1035 = %1033.1;
  (%1034, %1035, %var_5256)
}

def @func_9757() -> Tensor[(9, 9, 6), float32] {
  %1036 = @func_7061() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %1036.1
}

def @func_10569() -> (Tensor[(9, 9, 6), float32], Tensor[(5, 10, 14), float64], Tensor[(700), uint16]) {
  %1037 = @func_8499() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(9, 9, 6), float32]) */;
  %1038 = cast(meta[relay.Constant][61] /* ty=Tensor[(700), uint16] */, dtype="uint16") /* ty=Tensor[(700), uint16] */;
  %1039 = cast(meta[relay.Constant][61] /* ty=Tensor[(700), uint16] */, dtype="uint16") /* ty=Tensor[(700), uint16] */;
  %1040 = reshape(%1038, newshape=[5, 10, 14]) /* ty=Tensor[(5, 10, 14), uint16] */;
  %1041 = reshape(%1039, newshape=[5, 10, 14]) /* ty=Tensor[(5, 10, 14), uint16] */;
  %1042 = @func_6235(%1040, %1041) /* ty=(Tensor[(5, 10, 14), bool], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(5, 10, 14), float64], Tensor[(486), float32], int8, Tensor[(2366), int8]) */;
  %1043 = %1037.2;
  %1044 = %1042.4;
  (%1043, %1044, meta[relay.Constant][61] /* ty=Tensor[(700), uint16] */)
}

def @func_6368() -> Tensor[(9, 9, 6), float32] {
  @func_6019() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_8210() -> (Tensor[(9, 9, 6), float32],) {
  %1045 = @func_2917() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %1046 = %1045.0;
  (%1046,)
}

def @func_11340() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool], Tensor[(9, 9, 6), float32], Tensor[(8, 12, 2), int8], Tensor[(192), int8], Tensor[(126), float64], Tensor[(9, 9, 6), bool]) {
  %1047 = @func_9044() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(126), float64], Tensor[(126), float64]) */;
  %1048 = @func_10285() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool], Tensor[(9, 9, 6), float32]) */;
  %1049 = cast(meta[relay.Constant][62] /* ty=Tensor[(192), int8] */, dtype="int8") /* ty=Tensor[(192), int8] */;
  %1050 = reshape(%1049, newshape=[8, 12, 2]) /* ty=Tensor[(8, 12, 2), int8] */;
  %1051 = @func_8013(%1050) /* ty=(Tensor[(8, 12, 2), int8],) */;
  %1052 = @func_9044() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(126), float64], Tensor[(126), float64]) */;
  %1053 = @func_7692() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool]) */;
  %1054 = %1047.0;
  %1055 = %1048.1;
  %1056 = @func_3337() /* ty=Tensor[(9, 9, 6), float32] */;
  %1057 = %1051.0;
  %1058 = %1052.2;
  %1059 = %1053.1;
  (%1054, %1055, %1056, %1057, meta[relay.Constant][62] /* ty=Tensor[(192), int8] */, %1058, %1059)
}

def @func_7108() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %1060 = @func_1852() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %1061 = @func_5656() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %1062 = %1060.0;
  %1063 = %1061.1;
  (%1062, %1063)
}

def @func_3019(%var_2997: Tensor[(2880), float32]) -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), float32], Tensor[(2880), float32]) {
  %1064 = @func_2636() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %1065 = %1064.2;
  %1066 = cast(%1065, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  %1067 = reshape(%1066, newshape=[9, 9, 6]) /* ty=Tensor[(9, 9, 6), float32] */;
  %1068 = @func_2768(%1067) /* ty=(Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), bool]) */;
  %1069 = cast(%var_2997, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %1070 = reshape(%1069, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
  %1071 = @func_2744(%1070) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(2520), float64], Tensor[(2880), float32]) */;
  %1072 = %1068.0;
  %1073 = %1071.0;
  (%1065, %1072, %1073, %var_2997)
}

def @func_13385() -> Tensor[(9, 9, 6), float32] {
  %1074 = @func_10795() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %1074.0
}

def @func_4031() -> Tensor[(9, 9, 6), float32] {
  @func_3642() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_3558(%var_3540: int8, %var_3541: Tensor[(13, 13, 14), int8]) -> (Tensor[(13, 13, 14), int8], Tensor[(9, 9, 6), bool], Tensor[(486), float32]) {
  %1075 = cast(%var_3540, dtype="int8") /* ty=int8 */;
  %1076 = cast(%var_3541, dtype="int8") /* ty=Tensor[(13, 13, 14), int8] */;
  %1077 = cast(meta[relay.Constant][63] /* ty=Tensor[(486), float32] */, dtype="float32") /* ty=Tensor[(486), float32] */;
  %1078 = reshape(%1077, newshape=[9, 9, 6]) /* ty=Tensor[(9, 9, 6), float32] */;
  %1079 = @func_2269(%1078) /* ty=(Tensor[(9, 9, 6), bool], Tensor[(9, 9, 6), float64]) */;
  %1080 = bitwise_and(%1075, %1076) /* ty=Tensor[(13, 13, 14), int8] */;
  %1081 = %1079.0;
  (%1080, %1081, meta[relay.Constant][63] /* ty=Tensor[(486), float32] */)
}

def @func_5398(%var_5373: Tensor[(1, 1, 10), float32]) -> (Tensor[(1, 1, 10), float64], Tensor[(9, 9, 6), float32]) {
  %1082 = cast(%var_5373, dtype="float32") /* ty=Tensor[(1, 1, 10), float32] */;
  %1083 = asinh(%1082) /* ty=Tensor[(1, 1, 10), float32] */;
  %1084 = cast(%1083, dtype="float64") /* ty=Tensor[(1, 1, 10), float64] */;
  %1085 = atanh(%1084) /* ty=Tensor[(1, 1, 10), float64] */;
  %1086 = @func_3873() /* ty=Tensor[(9, 9, 6), float32] */;
  (%1085, %1086)
}

def @func_4266() -> Tensor[(9, 9, 6), float32] {
  @func_2710() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_2420() -> (Tensor[(9, 9, 6), float32],) {
  %1087 = @func_2049() /* ty=Tensor[(9, 9, 6), float32] */;
  (%1087,)
}

def @func_10727() -> (Tensor[(15, 8, 16), uint8],) {
  %1088 = @func_4016() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(15, 8, 16), uint8], Tensor[(4, 480), uint8]) */;
  %1089 = %1088.1;
  (%1089,)
}

def @func_5584() -> (Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32]) {
  %1090 = @func_4016() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(15, 8, 16), uint8], Tensor[(4, 480), uint8]) */;
  %1091 = %1090.2;
  %1092 = cast(%1091, dtype="float64") /* ty=Tensor[(4, 480), float64] */;
  %1093 = @func_3829() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %1094 = acosh(%1092) /* ty=Tensor[(4, 480), float64] */;
  %1095 = %1093.0;
  (%1094, %1095)
}

def @func_8700() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %1096 = @func_3758() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %1097 = @func_1852() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %1098 = %1096.0;
  %1099 = %1097.0;
  (%1098, %1099)
}

def @func_768(%var_760: Tensor[(15, 12, 14), float64]) -> (Tensor[(15, 12, 14), float64],) {
  %1100 = cast(%var_760, dtype="float64") /* ty=Tensor[(15, 12, 14), float64] */;
  %1101 = log10(%1100) /* ty=Tensor[(15, 12, 14), float64] */;
  (%1101,)
}

def @func_10542() -> (Tensor[(9, 9, 6), float32],) {
  %1102 = @func_3207() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %1103 = %1102.1;
  (%1103,)
}

def @func_10629() -> (Tensor[(9, 9, 6), float32],) {
  %1104 = @func_7226() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %1105 = %1104.0;
  (%1105,)
}

def @func_2917() -> (Tensor[(9, 9, 6), float32],) {
  %1106 = @func_1825() /* ty=Tensor[(9, 9, 6), float32] */;
  (%1106,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5263(%var_5262: Tensor[(45), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float64], Tensor[(45), float64]) {
  %6 = fn (%var_5256: Tensor[(45), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float64], Tensor[(45), float64]) {
    %0 = @func_2636() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
    %1 = cast(%var_5256, dtype="float64") /* ty=Tensor[(45), float64] */;
    %2 = reshape(%1, newshape=[45]) /* ty=Tensor[(45), float64] */;
    %3 = @func_2189(%2) /* ty=(Tensor[(45), float64], Tensor[(9, 9, 6), float64], Tensor[(15, 3, 1), float64], Tensor[(16, 11, 12), float32], Tensor[(528, 4), float32]) */;
    %4 = %0.0;
    %5 = %3.1;
    (%4, %5, %var_5256)
  };
  %6(%var_5262) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float64], Tensor[(45), float64]) */
}

def @func_4911() -> (Tensor[(9, 9, 6), float32], Tensor[(3, 42), float64], Tensor[(126), float64]) {
  %7 = @func_3131() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
  %9 = reshape(%8, newshape=[3, 42]) /* ty=Tensor[(3, 42), float64] */;
  %10 = @func_4074(%9) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(15, 12, 14), int64], Tensor[(3, 42), float64]) */;
  %11 = %7.1;
  %12 = %10.2;
  (%11, %12, meta[relay.Constant][0] /* ty=Tensor[(126), float64] */)
}

def @func_12740() -> (Tensor[(9, 9, 6), float32],) {
  %14 = fn () -> (Tensor[(9, 9, 6), float32],) {
    %13 = @func_6019() /* ty=Tensor[(9, 9, 6), float32] */;
    (%13,)
  };
  %14() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_3394() -> Tensor[(9, 9, 6), float32] {
  @func_3337() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_10236() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(4, 15, 3), float32]) {
  %15 = @func_3271() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %16 = @func_8893() /* ty=Tensor[(9, 9, 6), float32] */;
  %17 = %15.0;
  %18 = @func_9226() /* ty=Tensor[(4, 15, 3), float32] */;
  (%16, %17, %18)
}

def @func_1825() -> Tensor[(9, 9, 6), float32] {
  %19 = cast(meta[relay.Constant][1] /* ty=Tensor[(9, 9, 6), float32] */, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  acosh(%19) /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_8675(%var_8674: Tensor[(16, 9, 6), uint16]) -> Tensor[(16, 9, 6), bool] {
  %22 = fn (%var_8669: Tensor[(16, 9, 6), uint16]) -> Tensor[(16, 9, 6), bool] {
    %20 = cast(meta[relay.Constant][2] /* ty=uint16 */, dtype="bool") /* ty=bool */;
    %21 = cast(%var_8669, dtype="bool") /* ty=Tensor[(16, 9, 6), bool] */;
    equal(%20, %21) /* ty=Tensor[(16, 9, 6), bool] */
  };
  %22(%var_8674) /* ty=Tensor[(16, 9, 6), bool] */
}

def @func_13633() -> (Tensor[(9, 9, 6), bool],) {
  %23 = @func_4756() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool]) */;
  %24 = %23.1;
  (%24,)
}

def @func_9101() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  @func_9099() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */
}

def @func_9985() -> Tensor[(9, 9, 6), float32] {
  @func_9983() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_2421() -> (Tensor[(9, 9, 6), float32],) {
  %26 = fn () -> (Tensor[(9, 9, 6), float32],) {
    %25 = @func_2049() /* ty=Tensor[(9, 9, 6), float32] */;
    (%25,)
  };
  %26() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_9759() -> Tensor[(9, 9, 6), float32] {
  @func_9757() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_4160() -> (Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(210), float64]) {
  %27 = cast(meta[relay.Constant][3] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
  %28 = reshape(%27, newshape=[7, 6, 5]) /* ty=Tensor[(7, 6, 5), float64] */;
  %29 = @func_1203(%28) /* ty=(Tensor[(7, 6, 5), float64],) */;
  %30 = @func_3290() /* ty=Tensor[(9, 9, 6), float32] */;
  %31 = %29.0;
  (%30, %31, meta[relay.Constant][3] /* ty=Tensor[(210), float64] */)
}

def @func_10305() -> Tensor[(9, 9, 6), float32] {
  @func_10303() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_7789(%var_7763: Tensor[(2880), float32], %var_7764: Tensor[(3, 42), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(5, 10, 14), bool], Tensor[(9, 9, 6), float32], Tensor[(2880), float32], Tensor[(2520), float64], Tensor[(3, 42), float64], Tensor[(9, 9, 6), float32], Tensor[(10), float32]) {
  %32 = @func_3779() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %33 = cast(meta[relay.Constant][4] /* ty=Tensor[(700), uint16] */, dtype="uint16") /* ty=Tensor[(700), uint16] */;
  %34 = cast(meta[relay.Constant][4] /* ty=Tensor[(700), uint16] */, dtype="uint16") /* ty=Tensor[(700), uint16] */;
  %35 = reshape(%33, newshape=[5, 10, 14]) /* ty=Tensor[(5, 10, 14), uint16] */;
  %36 = reshape(%34, newshape=[5, 10, 14]) /* ty=Tensor[(5, 10, 14), uint16] */;
  %37 = @func_6235(%35, %36) /* ty=(Tensor[(5, 10, 14), bool], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(5, 10, 14), float64], Tensor[(486), float32], int8, Tensor[(2366), int8]) */;
  %38 = %37.0;
  %39 = cast(meta[relay.Constant][4] /* ty=Tensor[(700), uint16] */, dtype="bool") /* ty=Tensor[(700), bool] */;
  %40 = shape_of(%38, dtype="int32") /* ty=Tensor[(3), int32] */;
  %41 = cast(%38, dtype="bool") /* ty=Tensor[(5, 10, 14), bool] */;
  %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %43 = cast(%var_7763, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %44 = cast(%var_7764, dtype="float64") /* ty=Tensor[(3, 42), float64] */;
  %45 = cast(meta[relay.Constant][5] /* ty=Tensor[(2520), float64] */, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %46 = reshape(%43, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
  %47 = reshape(%44, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %48 = reshape(%45, newshape=[2520]) /* ty=Tensor[(2520), float64] */;
  %49 = @func_2393(%46, %47, %48) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(126), float64], Tensor[(2880), float32], Tensor[(126), float64], Tensor[(2520), float64], Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(126), float64]) */;
  %50 = cast(%var_7764, dtype="float64") /* ty=Tensor[(3, 42), float64] */;
  %51 = cast(meta[relay.Constant][6] /* ty=Tensor[(10), float32] */, dtype="float32") /* ty=Tensor[(10), float32] */;
  %52 = reshape(%51, newshape=[1, 1, 10]) /* ty=Tensor[(1, 1, 10), float32] */;
  %53 = @func_5398(%52) /* ty=(Tensor[(1, 1, 10), float64], Tensor[(9, 9, 6), float32]) */;
  %54 = %32.0;
  %55 = less_equal(%41, %42) /* ty=Tensor[(5, 10, 14), bool] */;
  %56 = %49.6;
  %57 = sqrt(%50) /* ty=Tensor[(3, 42), float64] */;
  %58 = %53.1;
  (%54, %55, %56, %var_7763, meta[relay.Constant][5] /* ty=Tensor[(2520), float64] */, %57, %58, meta[relay.Constant][6] /* ty=Tensor[(10), float32] */)
}

def @func_14270(%var_14269: Tensor[(16, 9, 14), float64]) -> (Tensor[(16, 9, 14), float64],) {
  %61 = fn (%var_14262: Tensor[(16, 9, 14), float64]) -> (Tensor[(16, 9, 14), float64],) {
    %59 = cast(%var_14262, dtype="float64") /* ty=Tensor[(16, 9, 14), float64] */;
    %60 = log(%59) /* ty=Tensor[(16, 9, 14), float64] */;
    (%60,)
  };
  %61(%var_14269) /* ty=(Tensor[(16, 9, 14), float64],) */
}

def @func_5401(%var_5399: Tensor[(1, 1, 10), float32]) -> (Tensor[(1, 1, 10), float64], Tensor[(9, 9, 6), float32]) {
  @func_5398(%var_5399) /* ty=(Tensor[(1, 1, 10), float64], Tensor[(9, 9, 6), float32]) */
}

def @func_3642() -> Tensor[(9, 9, 6), float32] {
  %62 = @func_2636() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %62.2
}

def @func_4031() -> Tensor[(9, 9, 6), float32] {
  @func_3642() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_3059(%var_3058: Tensor[(4, 15, 3), float64]) -> Tensor[(4, 15, 3), float64] {
  %67 = fn (%var_3045: Tensor[(4, 15, 3), float64]) -> Tensor[(4, 15, 3), float64] {
    %63 = cast(%var_3045, dtype="float64") /* ty=Tensor[(4, 15, 3), float64] */;
    %64 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(4, 15, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %65 = cast(meta[relay.Constant][7] /* ty=Tensor[(4, 15, 3), float64] */, dtype="float64") /* ty=Tensor[(4, 15, 3), float64] */;
    %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_divide(%65, %66) /* ty=Tensor[(4, 15, 3), float64] */
  };
  %67(%var_3058) /* ty=Tensor[(4, 15, 3), float64] */
}

def @func_1853() -> (Tensor[(9, 9, 6), float32],) {
  %69 = fn () -> (Tensor[(9, 9, 6), float32],) {
    %68 = @func_1825() /* ty=Tensor[(9, 9, 6), float32] */;
    (%68,)
  };
  %69() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_2051() -> Tensor[(9, 9, 6), float32] {
  @func_2049() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_2113(%var_2112: Tensor[(2880), float32]) -> (Tensor[(9, 9, 6), float32], Tensor[(15, 12, 16), uint32], Tensor[(2880), float32], Tensor[(126), float64], Tensor[(2520), float64]) {
  %80 = fn (%var_2095: Tensor[(2880), float32]) -> (Tensor[(9, 9, 6), float32], Tensor[(15, 12, 16), uint32], Tensor[(2880), float32], Tensor[(126), float64], Tensor[(2520), float64]) {
    %70 = @func_1852() /* ty=(Tensor[(9, 9, 6), float32],) */;
    %71 = cast(%var_2095, dtype="float32") /* ty=Tensor[(2880), float32] */;
    %72 = cast(meta[relay.Constant][8] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
    %73 = cast(meta[relay.Constant][9] /* ty=Tensor[(2520), float64] */, dtype="float64") /* ty=Tensor[(2520), float64] */;
    %74 = reshape(%71, newshape=[15, 12, 16]) /* ty=Tensor[(15, 12, 16), float32] */;
    %75 = reshape(%72, newshape=[126]) /* ty=Tensor[(126), float64] */;
    %76 = reshape(%73, newshape=[15, 12, 14]) /* ty=Tensor[(15, 12, 14), float64] */;
    %77 = @func_1433(%74, %75, %76) /* ty=(Tensor[(15, 12, 16), uint32], Tensor[(2520), float64], Tensor[(2112), float32], Tensor[(126), float64], Tensor[(15, 12, 14), uint8], Tensor[(15, 12, 16), float64]) */;
    %78 = %70.0;
    %79 = %77.0;
    (%78, %79, %var_2095, meta[relay.Constant][8] /* ty=Tensor[(126), float64] */, meta[relay.Constant][9] /* ty=Tensor[(2520), float64] */)
  };
  %80(%var_2112) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(15, 12, 16), uint32], Tensor[(2880), float32], Tensor[(126), float64], Tensor[(2520), float64]) */
}

def @func_8232() -> (Tensor[(210), float64],) {
  %83 = fn () -> (Tensor[(210), float64],) {
    %81 = @func_7979() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(210), float64]) */;
    %82 = %81.1;
    (%82,)
  };
  %83() /* ty=(Tensor[(210), float64],) */
}

def @func_5093() -> Tensor[(9, 9, 6), float32] {
  %85 = fn () -> Tensor[(9, 9, 6), float32] {
    %84 = @func_1852() /* ty=(Tensor[(9, 9, 6), float32],) */;
    %84.0
  };
  %85() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_4855() -> (Tensor[(7, 6, 5), float64], Tensor[(9, 9, 6), float32]) {
  %86 = @func_4160() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(210), float64]) */;
  %87 = %86.1;
  %88 = @func_2532() /* ty=Tensor[(9, 9, 6), float32] */;
  (%87, %88)
}

def @func_13993() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(2520), float64], Tensor[(2880), float32], Tensor[(3, 42), float64], Tensor[(2520, 1), float64], Tensor[(126), float64]) {
  %107 = fn () -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(2520), float64], Tensor[(2880), float32], Tensor[(3, 42), float64], Tensor[(2520, 1), float64], Tensor[(126), float64]) {
    %89 = @func_11340() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool], Tensor[(9, 9, 6), float32], Tensor[(8, 12, 2), int8], Tensor[(192), int8], Tensor[(126), float64], Tensor[(9, 9, 6), bool]) */;
    %90 = @func_8847() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(4, 15, 3), float64], Tensor[(180), float64], Tensor[(9, 9, 6), float32]) */;
    %91 = cast(meta[relay.Constant][10] /* ty=Tensor[(2880), float32] */, dtype="float32") /* ty=Tensor[(2880), float32] */;
    %92 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 42), float64] */, dtype="float64") /* ty=Tensor[(3, 42), float64] */;
    %93 = cast(meta[relay.Constant][12] /* ty=Tensor[(2520, 1), float64] */, dtype="float64") /* ty=Tensor[(2520, 1), float64] */;
    %94 = reshape(%91, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
    %95 = reshape(%92, newshape=[126]) /* ty=Tensor[(126), float64] */;
    %96 = reshape(%93, newshape=[2520]) /* ty=Tensor[(2520), float64] */;
    %97 = @func_2393(%94, %95, %96) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(126), float64], Tensor[(2880), float32], Tensor[(126), float64], Tensor[(2520), float64], Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(126), float64]) */;
    %98 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 42), float64] */, dtype="float64") /* ty=Tensor[(3, 42), float64] */;
    %99 = cast(meta[relay.Constant][12] /* ty=Tensor[(2520, 1), float64] */, dtype="float64") /* ty=Tensor[(2520, 1), float64] */;
    %100 = reshape(%98, newshape=[126]) /* ty=Tensor[(126), float64] */;
    %101 = reshape(%99, newshape=[2520]) /* ty=Tensor[(2520), float64] */;
    %102 = @func_2022(%100, %101) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(126), float64], Tensor[(126), float64], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(2520), float32], Tensor[(15, 12, 14), float64], Tensor[(2880), float64], Tensor[(15, 12, 14), float64], Tensor[(15, 8, 16), uint8], Tensor[(1920), uint8], Tensor[(16, 11, 12), float32]) */;
    %103 = %89.2;
    %104 = %90.1;
    %105 = %97.4;
    %106 = %102.1;
    (%103, %104, %105, meta[relay.Constant][10] /* ty=Tensor[(2880), float32] */, meta[relay.Constant][11] /* ty=Tensor[(3, 42), float64] */, meta[relay.Constant][12] /* ty=Tensor[(2520, 1), float64] */, %106)
  };
  %107() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(2520), float64], Tensor[(2880), float32], Tensor[(3, 42), float64], Tensor[(2520, 1), float64], Tensor[(126), float64]) */
}

def @func_5398(%var_5373: Tensor[(1, 1, 10), float32]) -> (Tensor[(1, 1, 10), float64], Tensor[(9, 9, 6), float32]) {
  %108 = cast(%var_5373, dtype="float32") /* ty=Tensor[(1, 1, 10), float32] */;
  %109 = asinh(%108) /* ty=Tensor[(1, 1, 10), float32] */;
  %110 = cast(%109, dtype="float64") /* ty=Tensor[(1, 1, 10), float64] */;
  %111 = atanh(%110) /* ty=Tensor[(1, 1, 10), float64] */;
  %112 = @func_3873() /* ty=Tensor[(9, 9, 6), float32] */;
  (%111, %112)
}

def @func_8894() -> Tensor[(9, 9, 6), float32] {
  %114 = fn () -> Tensor[(9, 9, 6), float32] {
    %113 = @func_8700() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
    %113.1
  };
  %114() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_10571() -> (Tensor[(9, 9, 6), float32], Tensor[(5, 10, 14), float64], Tensor[(700), uint16]) {
  @func_10569() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(5, 10, 14), float64], Tensor[(700), uint16]) */
}

def @func_13749() -> Tensor[(9, 9, 6), float32] {
  @func_13747() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_8394() -> (Tensor[(9, 9, 6), float32],) {
  @func_8392() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_7290() -> (Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64]) {
  %115 = @func_5901() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %116 = @func_6771() /* ty=(Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32]) */;
  %117 = %116.0;
  %118 = cast(%117, dtype="float64") /* ty=Tensor[(4, 480), float64] */;
  %119 = %115.0;
  %120 = sinh(%118) /* ty=Tensor[(4, 480), float64] */;
  (%119, %120)
}

def @func_11884() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %121 = @func_11430() /* ty=Tensor[(9, 9, 6), float32] */;
  %122 = @func_1825() /* ty=Tensor[(9, 9, 6), float32] */;
  (%121, %122)
}

def @func_13429() -> (Tensor[(9, 9, 6), float32],) {
  %123 = @func_10180() /* ty=Tensor[(9, 9, 6), float32] */;
  (%123,)
}

def @func_13747() -> Tensor[(9, 9, 6), float32] {
  @func_2049() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_7692() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool]) {
  %124 = @func_5860() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(9, 9, 6), float32]) */;
  %125 = %124.2;
  %126 = cast(%125, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  %127 = reshape(%126, newshape=[9, 9, 6]) /* ty=Tensor[(9, 9, 6), float32] */;
  %128 = @func_2768(%127) /* ty=(Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), bool]) */;
  %129 = %128.1;
  (%125, %129)
}

def @func_8659(%var_8658: Tensor[(10, 5, 16), uint16]) -> (Tensor[(10, 5, 16), uint16],) {
  %135 = fn (%var_8649: Tensor[(10, 5, 16), uint16]) -> (Tensor[(10, 5, 16), uint16],) {
    %130 = cast(%var_8649, dtype="uint16") /* ty=Tensor[(10, 5, 16), uint16] */;
    %131 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(10, 5, 16), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %132 = cast(meta[relay.Constant][13] /* ty=Tensor[(10, 5, 16), uint16] */, dtype="uint16") /* ty=Tensor[(10, 5, 16), uint16] */;
    %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %134 = logical_xor(%132, %133) /* ty=Tensor[(10, 5, 16), uint16] */;
    (%134,)
  };
  %135(%var_8658) /* ty=(Tensor[(10, 5, 16), uint16],) */
}

def @func_10583() -> Tensor[(4, 14, 3), float32] {
  %137 = fn () -> Tensor[(4, 14, 3), float32] {
    %136 = cast(meta[relay.Constant][14] /* ty=Tensor[(4, 14, 3), float32] */, dtype="float32") /* ty=Tensor[(4, 14, 3), float32] */;
    cos(%136) /* ty=Tensor[(4, 14, 3), float32] */
  };
  %137() /* ty=Tensor[(4, 14, 3), float32] */
}

def @func_12499() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %138 = @func_4347() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %139 = @func_11594() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %140 = %138.0;
  %141 = %139.0;
  (%140, %141)
}

def @func_2494() -> (Tensor[(9, 9, 6), float32],) {
  @func_2492() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_2534() -> Tensor[(9, 9, 6), float32] {
  @func_2532() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_3714(%var_3711: uint8, %var_3712: Tensor[(12, 4, 13), uint8], %var_3713: Tensor[(1, 210), float64]) -> (Tensor[(12, 4, 13), bool], Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(1, 210), float64]) {
  @func_3709(%var_3711, %var_3712, %var_3713) /* ty=(Tensor[(12, 4, 13), bool], Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(1, 210), float64]) */
}

def @func_13440(%var_13438: Tensor[(13, 5, 7), bool]) -> Tensor[(13, 5, 7), bool] {
  @func_13437(%var_13438) /* ty=Tensor[(13, 5, 7), bool] */
}

def @func_10133() -> Tensor[(9, 9, 6), float32] {
  %142 = fn () -> Tensor[(9, 9, 6), float32] {
    @func_8893() /* ty=Tensor[(9, 9, 6), float32] */
  };
  %142() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_12058() -> (Tensor[(9, 9, 6), float32], Tensor[(2880), float32], Tensor[(9, 9, 6), float32], Tensor[(2880), float32]) {
  %152 = fn () -> (Tensor[(9, 9, 6), float32], Tensor[(2880), float32], Tensor[(9, 9, 6), float32], Tensor[(2880), float32]) {
    %143 = @func_8847() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(4, 15, 3), float64], Tensor[(180), float64], Tensor[(9, 9, 6), float32]) */;
    %144 = cast(meta[relay.Constant][15] /* ty=Tensor[(2880), float32] */, dtype="float32") /* ty=Tensor[(2880), float32] */;
    %145 = reshape(%144, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
    %146 = @func_2744(%145) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(2520), float64], Tensor[(2880), float32]) */;
    %147 = cast(meta[relay.Constant][15] /* ty=Tensor[(2880), float32] */, dtype="float32") /* ty=Tensor[(2880), float32] */;
    %148 = %143.0;
    %149 = %146.2;
    %150 = @func_3394() /* ty=Tensor[(9, 9, 6), float32] */;
    %151 = atan(%147) /* ty=Tensor[(2880), float32] */;
    (%148, %149, %150, %151)
  };
  %152() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(2880), float32], Tensor[(9, 9, 6), float32], Tensor[(2880), float32]) */
}

def @func_5791(%var_5788: Tensor[(2880), float32], %var_5789: Tensor[(126, 1), float64], %var_5790: Tensor[(2880), float32]) -> (Tensor[(2880), float32], Tensor[(9, 9, 6), bool], Tensor[(15, 3, 1), float64], Tensor[(126, 1), float64], Tensor[(2880), bool]) {
  @func_5786(%var_5788, %var_5789, %var_5790) /* ty=(Tensor[(2880), float32], Tensor[(9, 9, 6), bool], Tensor[(15, 3, 1), float64], Tensor[(126, 1), float64], Tensor[(2880), bool]) */
}

def @func_11786() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool], Tensor[(18), int64], Tensor[(180), int64], Tensor[(270), float32], Tensor[(8, 15, 13), float64]) {
  %153 = cast(meta[relay.Constant][16] /* ty=Tensor[(18), int64] */, dtype="int64") /* ty=Tensor[(18), int64] */;
  %154 = cast(meta[relay.Constant][17] /* ty=Tensor[(180), int64] */, dtype="int64") /* ty=Tensor[(180), int64] */;
  %155 = cast(meta[relay.Constant][18] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
  %156 = @func_3642() /* ty=Tensor[(9, 9, 6), float32] */;
  %157 = cast(%156, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  %158 = reshape(%153, newshape=[3, 1, 6]) /* ty=Tensor[(3, 1, 6), int64] */;
  %159 = reshape(%154, newshape=[3, 10, 6]) /* ty=Tensor[(3, 10, 6), int64] */;
  %160 = reshape(%155, newshape=[3, 15, 6]) /* ty=Tensor[(3, 15, 6), float32] */;
  %161 = reshape(%157, newshape=[486]) /* ty=Tensor[(486), float32] */;
  %162 = @func_3521(%158, %159, %160, %161) /* ty=(Tensor[(3, 10, 6), bool], Tensor[(9, 9, 6), bool], Tensor[(486), float32], Tensor[(9, 9, 6), bool], Tensor[(3, 15, 6), float64], Tensor[(3, 10, 6), uint64]) */;
  %163 = %162.1;
  %164 = @func_6922() /* ty=Tensor[(8, 15, 13), float64] */;
  (%156, %163, meta[relay.Constant][16] /* ty=Tensor[(18), int64] */, meta[relay.Constant][17] /* ty=Tensor[(180), int64] */, meta[relay.Constant][18] /* ty=Tensor[(270), float32] */, %164)
}

def @func_4590() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(2880), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %173 = fn () -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(2880), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
    %165 = cast(meta[relay.Constant][19] /* ty=Tensor[(2880), float32] */, dtype="float32") /* ty=Tensor[(2880), float32] */;
    %166 = reshape(%165, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
    %167 = @func_2111(%166) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(15, 12, 16), uint32], Tensor[(2880), float32], Tensor[(126), float64], Tensor[(2520), float64]) */;
    %168 = @func_2492() /* ty=(Tensor[(9, 9, 6), float32],) */;
    %169 = @func_3337() /* ty=Tensor[(9, 9, 6), float32] */;
    %170 = %167.0;
    %171 = %168.0;
    %172 = @func_3394() /* ty=Tensor[(9, 9, 6), float32] */;
    (%169, %170, meta[relay.Constant][19] /* ty=Tensor[(2880), float32] */, %171, %172)
  };
  %173() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(2880), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */
}

def @func_6105() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %174 = @func_3779() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %175 = @func_3271() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %176 = %174.0;
  %177 = %175.0;
  (%176, %177)
}

def @func_9983() -> Tensor[(9, 9, 6), float32] {
  %178 = @func_8995() /* ty=(Tensor[(126), float64], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %178.1
}

def @func_2744(%var_2737: Tensor[(2880), float32]) -> (Tensor[(9, 9, 6), float32], Tensor[(2520), float64], Tensor[(2880), float32]) {
  %179 = cast(%var_2737, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %180 = reshape(%179, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
  %181 = @func_2111(%180) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(15, 12, 16), uint32], Tensor[(2880), float32], Tensor[(126), float64], Tensor[(2520), float64]) */;
  %182 = @func_2710() /* ty=Tensor[(9, 9, 6), float32] */;
  %183 = %181.4;
  (%182, %183, %var_2737)
}

def @func_5901() -> (Tensor[(9, 9, 6), float32],) {
  %184 = @func_3271() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %185 = %184.0;
  (%185,)
}

def @func_2269(%var_2248: Tensor[(9, 9, 6), float32]) -> (Tensor[(9, 9, 6), bool], Tensor[(9, 9, 6), float64]) {
  %186 = @func_1852() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %187 = %186.0;
  %188 = cast(%187, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  %189 = tan(%188) /* ty=Tensor[(9, 9, 6), float32] */;
  %190 = cast(%187, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  %191 = shape_of(%189, dtype="int32") /* ty=Tensor[(3), int32] */;
  %192 = cast(%189, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %194 = floor_divide(%192, %193) /* ty=Tensor[(9, 9, 6), float32] */;
  %195 = cast(%var_2248, dtype="bool") /* ty=Tensor[(9, 9, 6), bool] */;
  %196 = shape_of(%194, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(%194, dtype="bool") /* ty=Tensor[(9, 9, 6), bool] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %199 = cast(%194, dtype="float64") /* ty=Tensor[(9, 9, 6), float64] */;
  %200 = greater(%197, %198) /* ty=Tensor[(9, 9, 6), bool] */;
  %201 = log10(%199) /* ty=Tensor[(9, 9, 6), float64] */;
  (%200, %201)
}

def @func_6467() -> Tensor[(9, 9, 6), float32] {
  @func_6465() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_2674(%var_2673: Tensor[(126), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(126), float64]) {
  %209 = fn (%var_2656: Tensor[(126), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(126), float64]) {
    %202 = @func_2532() /* ty=Tensor[(9, 9, 6), float32] */;
    %203 = cast(%202, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
    %204 = cast(%var_2656, dtype="float64") /* ty=Tensor[(126), float64] */;
    %205 = reshape(%204, newshape=[126]) /* ty=Tensor[(126), float64] */;
    %206 = @func_1892(%205) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(126), float64], Tensor[(15, 12, 14), int64]) */;
    %207 = asin(%203) /* ty=Tensor[(9, 9, 6), float32] */;
    %208 = %206.1;
    (%207, %208, %var_2656)
  };
  %209(%var_2673) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(126), float64]) */
}

def @func_13419() -> (Tensor[(9, 9, 6), float32], Tensor[(45), float64]) {
  %210 = @func_10375() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %211 = @func_5860() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(9, 9, 6), float32]) */;
  %212 = %210.2;
  %213 = %211.3;
  (%212, %213)
}

def @func_2049() -> Tensor[(9, 9, 6), float32] {
  %214 = @func_1852() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %214.0
}

def @func_13810() -> (Tensor[(9, 9, 6), float32],) {
  @func_13808() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_6327(%var_6324: Tensor[(1, 10, 12), uint32], %var_6325: Tensor[(7, 10, 12), uint32], %var_6326: Tensor[(45), float64]) -> (Tensor[(7, 10, 12), uint32], Tensor[(16, 11, 12), float32], Tensor[(45), float64]) {
  @func_6322(%var_6324, %var_6325, %var_6326) /* ty=(Tensor[(7, 10, 12), uint32], Tensor[(16, 11, 12), float32], Tensor[(45), float64]) */
}

def @func_13421() -> (Tensor[(9, 9, 6), float32], Tensor[(45), float64]) {
  @func_13419() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(45), float64]) */
}

def @func_8700() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %215 = @func_3758() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %216 = @func_1852() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %217 = %215.0;
  %218 = %216.0;
  (%217, %218)
}

def @func_9513() -> (Tensor[(9, 9, 6), float32],) {
  %221 = fn () -> (Tensor[(9, 9, 6), float32],) {
    %219 = @func_3271() /* ty=(Tensor[(9, 9, 6), float32],) */;
    %220 = %219.0;
    (%220,)
  };
  %221() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_10017() -> (Tensor[(9, 9, 6), float32],) {
  @func_10015() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_9893() -> (Tensor[(9, 9, 6), float32],) {
  %224 = fn () -> (Tensor[(9, 9, 6), float32],) {
    %222 = @func_1852() /* ty=(Tensor[(9, 9, 6), float32],) */;
    %223 = %222.0;
    (%223,)
  };
  %224() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_12437() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool], Tensor[(9, 9, 6), float32]) {
  @func_12435() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool], Tensor[(9, 9, 6), float32]) */
}

def @func_11510(%var_11508: float32, %var_11509: Tensor[(9, 15, 3), float32]) -> (Tensor[(9, 15, 3), float32], Tensor[(9, 9, 6), float32]) {
  %229 = fn (%var_11469: float32, %var_11470: Tensor[(9, 15, 3), float32]) -> (Tensor[(9, 15, 3), float32], Tensor[(9, 9, 6), float32]) {
    %225 = cast(%var_11469, dtype="float32") /* ty=float32 */;
    %226 = cast(%var_11470, dtype="float32") /* ty=Tensor[(9, 15, 3), float32] */;
    %227 = floor_divide(%225, %226) /* ty=Tensor[(9, 15, 3), float32] */;
    %228 = @func_9402() /* ty=Tensor[(9, 9, 6), float32] */;
    (%227, %228)
  };
  %229(%var_11508, %var_11509) /* ty=(Tensor[(9, 15, 3), float32], Tensor[(9, 9, 6), float32]) */
}

def @func_13352() -> Tensor[(9, 9, 6), float32] {
  @func_3394() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_13345(%var_13344: Tensor[(180), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(4, 15, 3), float64], Tensor[(180), float64], Tensor[(9, 9, 6), float32]) {
  %237 = fn (%var_13338: Tensor[(180), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(4, 15, 3), float64], Tensor[(180), float64], Tensor[(9, 9, 6), float32]) {
    %230 = @func_6826() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
    %231 = cast(%var_13338, dtype="float64") /* ty=Tensor[(180), float64] */;
    %232 = reshape(%231, newshape=[4, 15, 3]) /* ty=Tensor[(4, 15, 3), float64] */;
    %233 = @func_11648() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
    %234 = %230.1;
    %235 = @func_3057(%232) /* ty=Tensor[(4, 15, 3), float64] */;
    %236 = %233.2;
    (%234, %235, %var_13338, %236)
  };
  %237(%var_13344) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(4, 15, 3), float64], Tensor[(180), float64], Tensor[(9, 9, 6), float32]) */
}

def @func_3600() -> (Tensor[(13, 6, 6), float32], Tensor[(4, 15, 3), float64], Tensor[(180), float64]) {
  %243 = fn () -> (Tensor[(13, 6, 6), float32], Tensor[(4, 15, 3), float64], Tensor[(180), float64]) {
    %238 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 6, 6), float32] */, dtype="float32") /* ty=Tensor[(13, 6, 6), float32] */;
    %239 = cast(meta[relay.Constant][21] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %240 = reshape(%239, newshape=[4, 15, 3]) /* ty=Tensor[(4, 15, 3), float64] */;
    %241 = cosh(%238) /* ty=Tensor[(13, 6, 6), float32] */;
    %242 = @func_3057(%240) /* ty=Tensor[(4, 15, 3), float64] */;
    (%241, %242, meta[relay.Constant][21] /* ty=Tensor[(180), float64] */)
  };
  %243() /* ty=(Tensor[(13, 6, 6), float32], Tensor[(4, 15, 3), float64], Tensor[(180), float64]) */
}

def @func_9629(%var_9627: Tensor[(12, 8, 2), float32]) -> (Tensor[(45), float64], Tensor[(45), float64], Tensor[(7, 6, 5), float64], Tensor[(9, 9, 6), float32], Tensor[(126), float64], Tensor[(12, 8, 2), float32], Tensor[(9, 9, 6), float32]) {
  @func_9626(%var_9627) /* ty=(Tensor[(45), float64], Tensor[(45), float64], Tensor[(7, 6, 5), float64], Tensor[(9, 9, 6), float32], Tensor[(126), float64], Tensor[(12, 8, 2), float32], Tensor[(9, 9, 6), float32]) */
}

def @func_9044() -> (Tensor[(9, 9, 6), float32], Tensor[(126), float64], Tensor[(126), float64]) {
  %244 = @func_3131() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %245 = cast(meta[relay.Constant][22] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
  %246 = reshape(%245, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %247 = @func_1892(%246) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(126), float64], Tensor[(15, 12, 14), int64]) */;
  %248 = %244.0;
  %249 = %247.2;
  (%248, %249, meta[relay.Constant][22] /* ty=Tensor[(126), float64] */)
}

def @func_10303() -> Tensor[(9, 9, 6), float32] {
  @func_9757() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_5542() -> Tensor[(9, 9, 6), float32] {
  %251 = fn () -> Tensor[(9, 9, 6), float32] {
    %250 = @func_2492() /* ty=(Tensor[(9, 9, 6), float32],) */;
    %250.0
  };
  %251() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_2771(%var_2769: Tensor[(9, 9, 6), float32]) -> (Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), bool]) {
  @func_2768(%var_2769) /* ty=(Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), bool]) */
}

def @func_4857() -> (Tensor[(7, 6, 5), float64], Tensor[(9, 9, 6), float32]) {
  @func_4855() /* ty=(Tensor[(7, 6, 5), float64], Tensor[(9, 9, 6), float32]) */
}

def @func_7963() -> (Tensor[(5, 4, 16), float64],) {
  %252 = cast(meta[relay.Constant][23] /* ty=Tensor[(5, 4, 16), float64] */, dtype="float64") /* ty=Tensor[(5, 4, 16), float64] */;
  %253 = rsqrt(%252) /* ty=Tensor[(5, 4, 16), float64] */;
  (%253,)
}

def @func_7062() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %257 = fn () -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
    %254 = @func_1852() /* ty=(Tensor[(9, 9, 6), float32],) */;
    %255 = @func_6368() /* ty=Tensor[(9, 9, 6), float32] */;
    %256 = %254.0;
    (%255, %256)
  };
  %257() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */
}

def @func_8536() -> (Tensor[(9, 9, 6), float32],) {
  %260 = fn () -> (Tensor[(9, 9, 6), float32],) {
    %258 = @func_6826() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
    %259 = %258.0;
    (%259,)
  };
  %260() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_4076(%var_4075: Tensor[(3, 42), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(15, 12, 14), int64], Tensor[(3, 42), float64]) {
  %266 = fn (%var_4060: Tensor[(3, 42), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(15, 12, 14), int64], Tensor[(3, 42), float64]) {
    %261 = cast(%var_4060, dtype="float64") /* ty=Tensor[(3, 42), float64] */;
    %262 = reshape(%261, newshape=[126]) /* ty=Tensor[(126), float64] */;
    %263 = @func_1892(%262) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(126), float64], Tensor[(15, 12, 14), int64]) */;
    %264 = @func_1825() /* ty=Tensor[(9, 9, 6), float32] */;
    %265 = %263.3;
    (%264, %265, %var_4060)
  };
  %266(%var_4075) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(15, 12, 14), int64], Tensor[(3, 42), float64]) */
}

def @func_2026(%var_2024: Tensor[(126), float64], %var_2025: Tensor[(2520), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(126), float64], Tensor[(126), float64], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(2520), float32], Tensor[(15, 12, 14), float64], Tensor[(2880), float64], Tensor[(15, 12, 14), float64], Tensor[(15, 8, 16), uint8], Tensor[(1920), uint8], Tensor[(16, 11, 12), float32]) {
  @func_2022(%var_2024, %var_2025) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(126), float64], Tensor[(126), float64], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(2520), float32], Tensor[(15, 12, 14), float64], Tensor[(2880), float64], Tensor[(15, 12, 14), float64], Tensor[(15, 8, 16), uint8], Tensor[(1920), uint8], Tensor[(16, 11, 12), float32]) */
}

def @func_11902() -> Tensor[(9, 9, 6), float32] {
  @func_11900() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_4913() -> (Tensor[(9, 9, 6), float32], Tensor[(3, 42), float64], Tensor[(126), float64]) {
  @func_4911() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(3, 42), float64], Tensor[(126), float64]) */
}

def @func_11233(%var_11231: Tensor[(15, 10, 1), bool]) -> (Tensor[(9, 9, 6), float32], Tensor[(15, 10, ?), float64]) {
  @func_11230(%var_11231) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(15, 10, ?), float64]) */
}

def @func_2191(%var_2190: Tensor[(45), float64]) -> (Tensor[(45), float64], Tensor[(9, 9, 6), float64], Tensor[(15, 3, 1), float64], Tensor[(16, 11, 12), float32], Tensor[(528, 4), float32]) {
  %284 = fn (%var_2169: Tensor[(45), float64]) -> (Tensor[(45), float64], Tensor[(9, 9, 6), float64], Tensor[(15, 3, 1), float64], Tensor[(16, 11, 12), float32], Tensor[(528, 4), float32]) {
    %267 = @func_2049() /* ty=Tensor[(9, 9, 6), float32] */;
    %268 = cast(%267, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
    %269 = cosh(%268) /* ty=Tensor[(9, 9, 6), float32] */;
    %270 = cast(%269, dtype="float64") /* ty=Tensor[(9, 9, 6), float64] */;
    %271 = shape_of(%267, dtype="int32") /* ty=Tensor[(3), int32] */;
    %272 = cast(%267, dtype="float64") /* ty=Tensor[(9, 9, 6), float64] */;
    %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %274 = cast(%var_2169, dtype="float64") /* ty=Tensor[(45), float64] */;
    %275 = reshape(%274, newshape=[15, 3, 1]) /* ty=Tensor[(15, 3, 1), float64] */;
    %276 = @func_284(%275) /* ty=(Tensor[(15, 3, 1), float64],) */;
    %277 = %276.0;
    %278 = cast(%277, dtype="float64") /* ty=Tensor[(15, 3, 1), float64] */;
    %279 = cast(meta[relay.Constant][24] /* ty=Tensor[(528, 4), float32] */, dtype="float32") /* ty=Tensor[(528, 4), float32] */;
    %280 = reshape(%279, newshape=[16, 11, 12]) /* ty=Tensor[(16, 11, 12), float32] */;
    %281 = divide(%272, %273) /* ty=Tensor[(9, 9, 6), float64] */;
    %282 = asinh(%278) /* ty=Tensor[(15, 3, 1), float64] */;
    %283 = @func_85(%280) /* ty=Tensor[(16, 11, 12), float32] */;
    (%var_2169, %281, %282, %283, meta[relay.Constant][24] /* ty=Tensor[(528, 4), float32] */)
  };
  %284(%var_2190) /* ty=(Tensor[(45), float64], Tensor[(9, 9, 6), float64], Tensor[(15, 3, 1), float64], Tensor[(16, 11, 12), float32], Tensor[(528, 4), float32]) */
}

def @func_6235(%var_6169: Tensor[(5, 10, 14), uint16], %var_6170: Tensor[(5, 10, 14), uint16]) -> (Tensor[(5, 10, 14), bool], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(5, 10, 14), float64], Tensor[(486), float32], int8, Tensor[(2366), int8]) {
  %285 = cast(%var_6170, dtype="bool") /* ty=Tensor[(5, 10, 14), bool] */;
  %286 = shape_of(%var_6169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %287 = cast(%var_6169, dtype="bool") /* ty=Tensor[(5, 10, 14), bool] */;
  %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %289 = @func_5956() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %290 = cast(%var_6169, dtype="float32") /* ty=Tensor[(5, 10, 14), float32] */;
  %291 = acosh(%290) /* ty=Tensor[(5, 10, 14), float32] */;
  %292 = cast(%291, dtype="float64") /* ty=Tensor[(5, 10, 14), float64] */;
  %293 = cast(meta[relay.Constant][25] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %294 = cast(meta[relay.Constant][26] /* ty=Tensor[(2366), int8] */, dtype="int8") /* ty=Tensor[(2366), int8] */;
  %295 = reshape(%293, newshape=[]) /* ty=int8 */;
  %296 = reshape(%294, newshape=[13, 13, 14]) /* ty=Tensor[(13, 13, 14), int8] */;
  %297 = @func_3558(%295, %296) /* ty=(Tensor[(13, 13, 14), int8], Tensor[(9, 9, 6), bool], Tensor[(486), float32]) */;
  %298 = less(%287, %288) /* ty=Tensor[(5, 10, 14), bool] */;
  %299 = %289.0;
  %300 = @func_3642() /* ty=Tensor[(9, 9, 6), float32] */;
  %301 = @func_3642() /* ty=Tensor[(9, 9, 6), float32] */;
  %302 = atan(%292) /* ty=Tensor[(5, 10, 14), float64] */;
  %303 = %297.2;
  (%298, %299, %300, %301, %302, %303, meta[relay.Constant][25] /* ty=int8 */, meta[relay.Constant][26] /* ty=Tensor[(2366), int8] */)
}

def @func_4756() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool]) {
  %304 = @func_4031() /* ty=Tensor[(9, 9, 6), float32] */;
  %305 = cast(%304, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  %306 = reshape(%305, newshape=[9, 9, 6]) /* ty=Tensor[(9, 9, 6), float32] */;
  %307 = @func_2768(%306) /* ty=(Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), bool]) */;
  %308 = %307.1;
  (%304, %308)
}

def @func_7694() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool]) {
  @func_7692() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool]) */
}

def @func_3290() -> Tensor[(9, 9, 6), float32] {
  %309 = @func_3263() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %309.0
}

def @func_5224(%var_5223: Tensor[(45), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(16, 11, 12), float32], Tensor[(45), float64]) {
  %323 = fn (%var_5211: Tensor[(45), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(16, 11, 12), float32], Tensor[(45), float64]) {
    %310 = @func_2917() /* ty=(Tensor[(9, 9, 6), float32],) */;
    %311 = @func_3642() /* ty=Tensor[(9, 9, 6), float32] */;
    %312 = cast(%311, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
    %313 = reshape(%312, newshape=[9, 9, 6]) /* ty=Tensor[(9, 9, 6), float32] */;
    %314 = @func_2269(%313) /* ty=(Tensor[(9, 9, 6), bool], Tensor[(9, 9, 6), float64]) */;
    %315 = %314.1;
    %316 = cast(%315, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
    %317 = cast(%var_5211, dtype="float64") /* ty=Tensor[(45), float64] */;
    %318 = reshape(%317, newshape=[45]) /* ty=Tensor[(45), float64] */;
    %319 = @func_2189(%318) /* ty=(Tensor[(45), float64], Tensor[(9, 9, 6), float64], Tensor[(15, 3, 1), float64], Tensor[(16, 11, 12), float32], Tensor[(528, 4), float32]) */;
    %320 = %310.0;
    %321 = sqrt(%316) /* ty=Tensor[(9, 9, 6), float32] */;
    %322 = %319.3;
    (%311, %320, %321, %322, %var_5211)
  };
  %323(%var_5223) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(16, 11, 12), float32], Tensor[(45), float64]) */
}

def @func_9046() -> (Tensor[(9, 9, 6), float32], Tensor[(126), float64], Tensor[(126), float64]) {
  @func_9044() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(126), float64], Tensor[(126), float64]) */
}

def @func_10578() -> (Tensor[(7, 6, 5), float64],) {
  %326 = fn () -> (Tensor[(7, 6, 5), float64],) {
    %324 = @func_8499() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(9, 9, 6), float32]) */;
    %325 = %324.1;
    (%325,)
  };
  %326() /* ty=(Tensor[(7, 6, 5), float64],) */
}

def @func_10569() -> (Tensor[(9, 9, 6), float32], Tensor[(5, 10, 14), float64], Tensor[(700), uint16]) {
  %327 = @func_8499() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(9, 9, 6), float32]) */;
  %328 = cast(meta[relay.Constant][27] /* ty=Tensor[(700), uint16] */, dtype="uint16") /* ty=Tensor[(700), uint16] */;
  %329 = cast(meta[relay.Constant][27] /* ty=Tensor[(700), uint16] */, dtype="uint16") /* ty=Tensor[(700), uint16] */;
  %330 = reshape(%328, newshape=[5, 10, 14]) /* ty=Tensor[(5, 10, 14), uint16] */;
  %331 = reshape(%329, newshape=[5, 10, 14]) /* ty=Tensor[(5, 10, 14), uint16] */;
  %332 = @func_6235(%330, %331) /* ty=(Tensor[(5, 10, 14), bool], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(5, 10, 14), float64], Tensor[(486), float32], int8, Tensor[(2366), int8]) */;
  %333 = %327.2;
  %334 = %332.4;
  (%333, %334, meta[relay.Constant][27] /* ty=Tensor[(700), uint16] */)
}

def @func_693(%var_692: Tensor[(7, 3, 6), float64]) -> (Tensor[(16, 11, 12), float32], Tensor[(2112), float32], Tensor[(7, 3, 6), float64], Tensor[(15, 3, 1), float64], Tensor[(45), float64], Tensor[(16, 11, 12), float32], Tensor[(7, 3, 6), float64]) {
  %361 = fn (%var_616: Tensor[(7, 3, 6), float64]) -> (Tensor[(16, 11, 12), float32], Tensor[(2112), float32], Tensor[(7, 3, 6), float64], Tensor[(15, 3, 1), float64], Tensor[(45), float64], Tensor[(16, 11, 12), float32], Tensor[(7, 3, 6), float64]) {
    %335 = cast(meta[relay.Constant][28] /* ty=Tensor[(2112), float32] */, dtype="float32") /* ty=Tensor[(2112), float32] */;
    %336 = reshape(%335, newshape=[16, 11, 12]) /* ty=Tensor[(16, 11, 12), float32] */;
    %337 = cast(%var_616, dtype="float64") /* ty=Tensor[(7, 3, 6), float64] */;
    %338 = atanh(%337) /* ty=Tensor[(7, 3, 6), float64] */;
    %339 = cast(%var_616, dtype="float64") /* ty=Tensor[(7, 3, 6), float64] */;
    %340 = shape_of(%338, dtype="int32") /* ty=Tensor[(3), int32] */;
    %341 = cast(%338, dtype="float64") /* ty=Tensor[(7, 3, 6), float64] */;
    %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %343 = cast(meta[relay.Constant][29] /* ty=Tensor[(45), float64] */, dtype="float64") /* ty=Tensor[(45), float64] */;
    %344 = reshape(%343, newshape=[15, 3, 1]) /* ty=Tensor[(15, 3, 1), float64] */;
    %345 = @func_284(%344) /* ty=(Tensor[(15, 3, 1), float64],) */;
    %346 = @func_85(%336) /* ty=Tensor[(16, 11, 12), float32] */;
    %347 = cast(%346, dtype="float32") /* ty=Tensor[(16, 11, 12), float32] */;
    %348 = reshape(%347, newshape=[16, 11, 12]) /* ty=Tensor[(16, 11, 12), float32] */;
    %349 = cast(%338, dtype="float32") /* ty=Tensor[(7, 3, 6), float32] */;
    %350 = sin(%349) /* ty=Tensor[(7, 3, 6), float32] */;
    %351 = cast(%338, dtype="bool") /* ty=Tensor[(7, 3, 6), bool] */;
    %352 = shape_of(%350, dtype="int32") /* ty=Tensor[(3), int32] */;
    %353 = cast(%350, dtype="bool") /* ty=Tensor[(7, 3, 6), bool] */;
    %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %355 = greater_equal(%353, %354) /* ty=Tensor[(7, 3, 6), bool] */;
    %356 = cast(%355, dtype="float64") /* ty=Tensor[(7, 3, 6), float64] */;
    %357 = power(%341, %342) /* ty=Tensor[(7, 3, 6), float64] */;
    %358 = %345.0;
    %359 = @func_85(%348) /* ty=Tensor[(16, 11, 12), float32] */;
    %360 = log2(%356) /* ty=Tensor[(7, 3, 6), float64] */;
    (%346, meta[relay.Constant][28] /* ty=Tensor[(2112), float32] */, %357, %358, meta[relay.Constant][29] /* ty=Tensor[(45), float64] */, %359, %360)
  };
  %361(%var_692) /* ty=(Tensor[(16, 11, 12), float32], Tensor[(2112), float32], Tensor[(7, 3, 6), float64], Tensor[(15, 3, 1), float64], Tensor[(45), float64], Tensor[(16, 11, 12), float32], Tensor[(7, 3, 6), float64]) */
}

def @func_6033(%var_6032: Tensor[(13, 6, 4), float64]) -> (Tensor[(13, 6, 4), float64],) {
  %364 = fn (%var_6027: Tensor[(13, 6, 4), float64]) -> (Tensor[(13, 6, 4), float64],) {
    %362 = cast(%var_6027, dtype="float64") /* ty=Tensor[(13, 6, 4), float64] */;
    %363 = cos(%362) /* ty=Tensor[(13, 6, 4), float64] */;
    (%363,)
  };
  %364(%var_6032) /* ty=(Tensor[(13, 6, 4), float64],) */
}

def @func_6119() -> Tensor[(9, 9, 6), float32] {
  %366 = fn () -> Tensor[(9, 9, 6), float32] {
    %365 = @func_3758() /* ty=(Tensor[(9, 9, 6), float32],) */;
    %365.0
  };
  %366() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_4017() -> (Tensor[(9, 9, 6), float32], Tensor[(15, 8, 16), uint8], Tensor[(4, 480), uint8]) {
  %373 = fn () -> (Tensor[(9, 9, 6), float32], Tensor[(15, 8, 16), uint8], Tensor[(4, 480), uint8]) {
    %367 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 480), uint8] */, dtype="uint8") /* ty=Tensor[(4, 480), uint8] */;
    %368 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 480), uint8] */, dtype="uint8") /* ty=Tensor[(4, 480), uint8] */;
    %369 = reshape(%367, newshape=[15, 8, 16]) /* ty=Tensor[(15, 8, 16), uint8] */;
    %370 = reshape(%368, newshape=[15, 8, 16]) /* ty=Tensor[(15, 8, 16), uint8] */;
    %371 = @func_3394() /* ty=Tensor[(9, 9, 6), float32] */;
    %372 = @func_1738(%369, %370) /* ty=Tensor[(15, 8, 16), uint8] */;
    (%371, %372, meta[relay.Constant][30] /* ty=Tensor[(4, 480), uint8] */)
  };
  %373() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(15, 8, 16), uint8], Tensor[(4, 480), uint8]) */
}

def @func_12631(%var_12630: Tensor[(7, 8, 6), bool]) -> Tensor[(7, 8, 6), uint8] {
  %383 = fn (%var_12602: Tensor[(7, 8, 6), bool]) -> Tensor[(7, 8, 6), uint8] {
    %374 = cast(%var_12602, dtype="bool") /* ty=Tensor[(7, 8, 6), bool] */;
    %375 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(7, 8, 6), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %376 = cast(meta[relay.Constant][31] /* ty=Tensor[(7, 8, 6), bool] */, dtype="bool") /* ty=Tensor[(7, 8, 6), bool] */;
    %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %378 = logical_and(%376, %377) /* ty=Tensor[(7, 8, 6), bool] */;
    %379 = cast(%378, dtype="uint8") /* ty=Tensor[(7, 8, 6), uint8] */;
    %380 = shape_of(%var_12602, dtype="int32") /* ty=Tensor[(3), int32] */;
    %381 = cast(%var_12602, dtype="uint8") /* ty=Tensor[(7, 8, 6), uint8] */;
    %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    logical_xor(%381, %382) /* ty=Tensor[(7, 8, 6), uint8] */
  };
  %383(%var_12630) /* ty=Tensor[(7, 8, 6), uint8] */
}

def @func_11042(%var_11040: Tensor[(486), float32], %var_11041: Tensor[(486), float32]) -> (Tensor[(45), float64], Tensor[(9, 9, 6), float64], Tensor[(486), int16]) {
  @func_11038(%var_11040, %var_11041) /* ty=(Tensor[(45), float64], Tensor[(9, 9, 6), float64], Tensor[(486), int16]) */
}

def @func_12830(%var_12829: Tensor[(4, 480), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64]) {
  %398 = fn (%var_12809: Tensor[(4, 480), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64]) {
    %384 = @func_8535() /* ty=(Tensor[(9, 9, 6), float32],) */;
    %385 = @func_5584() /* ty=(Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32]) */;
    %386 = %385.0;
    %387 = cast(%var_12809, dtype="uint8") /* ty=Tensor[(4, 480), uint8] */;
    %388 = shape_of(%386, dtype="int32") /* ty=Tensor[(2), int32] */;
    %389 = cast(%386, dtype="uint8") /* ty=Tensor[(4, 480), uint8] */;
    %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %391 = multiply(%389, %390) /* ty=Tensor[(4, 480), uint8] */;
    %392 = cast(%386, dtype="float64") /* ty=Tensor[(4, 480), float64] */;
    %393 = shape_of(%391, dtype="int32") /* ty=Tensor[(2), int32] */;
    %394 = cast(%391, dtype="float64") /* ty=Tensor[(4, 480), float64] */;
    %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %396 = %384.0;
    %397 = divide(%394, %395) /* ty=Tensor[(4, 480), float64] */;
    (%396, %397)
  };
  %398(%var_12829) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64]) */
}

def @func_3272() -> (Tensor[(9, 9, 6), float32],) {
  %400 = fn () -> (Tensor[(9, 9, 6), float32],) {
    %399 = @func_1825() /* ty=Tensor[(9, 9, 6), float32] */;
    (%399,)
  };
  %400() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_2638() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  @func_2636() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */
}

def @func_11788() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool], Tensor[(18), int64], Tensor[(180), int64], Tensor[(270), float32], Tensor[(8, 15, 13), float64]) {
  @func_11786() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool], Tensor[(18), int64], Tensor[(180), int64], Tensor[(270), float32], Tensor[(8, 15, 13), float64]) */
}

def @func_3022(%var_3020: Tensor[(2880), float32]) -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), float32], Tensor[(2880), float32]) {
  @func_3019(%var_3020) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), float32], Tensor[(2880), float32]) */
}

def @func_7227() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %404 = fn () -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
    %401 = @func_2492() /* ty=(Tensor[(9, 9, 6), float32],) */;
    %402 = %401.0;
    %403 = @func_2710() /* ty=Tensor[(9, 9, 6), float32] */;
    (%402, %403)
  };
  %404() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */
}

def @func_8053() -> (Tensor[(9, 9, 6), float32],) {
  %406 = fn () -> (Tensor[(9, 9, 6), float32],) {
    %405 = @func_4031() /* ty=Tensor[(9, 9, 6), float32] */;
    (%405,)
  };
  %406() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @main() -> (Tensor[(45), float32],) {
  %407 = @func_5861() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(9, 9, 6), float32]) */;
  %408 = %407.3;
  %409 = cast(%408, dtype="float32") /* ty=Tensor[(45), float32] */;
  %410 = sin(%409) /* ty=Tensor[(45), float32] */;
  (%410,)
}

def @func_7292() -> (Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64]) {
  @func_7290() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64]) */
}

def @func_2790() -> Tensor[(9, 9, 6), float32] {
  %412 = fn () -> Tensor[(9, 9, 6), float32] {
    %411 = @func_1852() /* ty=(Tensor[(9, 9, 6), float32],) */;
    %411.0
  };
  %412() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_1433(%var_1360: Tensor[(15, 12, 16), float32], %var_1407: Tensor[(126), float64], %var_1414: Tensor[(15, 12, 14), float64]) -> (Tensor[(15, 12, 16), uint32], Tensor[(2520), float64], Tensor[(2112), float32], Tensor[(126), float64], Tensor[(15, 12, 14), uint8], Tensor[(15, 12, 16), float64]) {
  %413 = cast(%var_1360, dtype="float32") /* ty=Tensor[(15, 12, 16), float32] */;
  %414 = log(%413) /* ty=Tensor[(15, 12, 16), float32] */;
  %415 = cast(%414, dtype="float64") /* ty=Tensor[(15, 12, 16), float64] */;
  %416 = shape_of(%var_1360, dtype="int32") /* ty=Tensor[(3), int32] */;
  %417 = cast(%var_1360, dtype="float64") /* ty=Tensor[(15, 12, 16), float64] */;
  %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %419 = floor_mod(%417, %418) /* ty=Tensor[(15, 12, 16), float64] */;
  %420 = cast(%var_1360, dtype="float32") /* ty=Tensor[(15, 12, 16), float32] */;
  %421 = log10(%420) /* ty=Tensor[(15, 12, 16), float32] */;
  %422 = cast(%421, dtype="uint32") /* ty=Tensor[(15, 12, 16), uint32] */;
  %423 = shape_of(%419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %424 = cast(%419, dtype="uint32") /* ty=Tensor[(15, 12, 16), uint32] */;
  %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %426 = cast(%var_1407, dtype="float64") /* ty=Tensor[(126), float64] */;
  %427 = reshape(%426, newshape=[7, 3, 6]) /* ty=Tensor[(7, 3, 6), float64] */;
  %428 = @func_691(%427) /* ty=(Tensor[(16, 11, 12), float32], Tensor[(2112), float32], Tensor[(7, 3, 6), float64], Tensor[(15, 3, 1), float64], Tensor[(45), float64], Tensor[(16, 11, 12), float32], Tensor[(7, 3, 6), float64]) */;
  %429 = cast(meta[relay.Constant][32] /* ty=Tensor[(2520), float64] */, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %430 = reshape(%429, newshape=[15, 12, 14]) /* ty=Tensor[(15, 12, 14), float64] */;
  %431 = @func_768(%430) /* ty=(Tensor[(15, 12, 14), float64],) */;
  %432 = %431.0;
  %433 = cast(%var_1414, dtype="uint8") /* ty=Tensor[(15, 12, 14), uint8] */;
  %434 = shape_of(%432, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%432, dtype="uint8") /* ty=Tensor[(15, 12, 14), uint8] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %437 = cast(%414, dtype="float64") /* ty=Tensor[(15, 12, 16), float64] */;
  %438 = bitwise_xor(%424, %425) /* ty=Tensor[(15, 12, 16), uint32] */;
  %439 = %428.1;
  %440 = bitwise_or(%435, %436) /* ty=Tensor[(15, 12, 14), uint8] */;
  %441 = log2(%437) /* ty=Tensor[(15, 12, 16), float64] */;
  (%438, meta[relay.Constant][32] /* ty=Tensor[(2520), float64] */, %439, %var_1407, %440, %441)
}

def @func_10286() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool], Tensor[(9, 9, 6), float32]) {
  %447 = fn () -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool], Tensor[(9, 9, 6), float32]) {
    %442 = @func_5656() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
    %443 = @func_4756() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool]) */;
    %444 = %442.0;
    %445 = %443.1;
    %446 = @func_2049() /* ty=Tensor[(9, 9, 6), float32] */;
    (%444, %445, %446)
  };
  %447() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool], Tensor[(9, 9, 6), float32]) */
}

def @func_2598(%var_2597: Tensor[(2112), float32]) -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(16, 11, 12), float32], Tensor[(2112), float32]) {
  %456 = fn (%var_2589: Tensor[(2112), float32]) -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(16, 11, 12), float32], Tensor[(2112), float32]) {
    %448 = @func_1852() /* ty=(Tensor[(9, 9, 6), float32],) */;
    %449 = @func_2049() /* ty=Tensor[(9, 9, 6), float32] */;
    %450 = cast(%449, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
    %451 = cast(%var_2589, dtype="float32") /* ty=Tensor[(2112), float32] */;
    %452 = reshape(%451, newshape=[16, 11, 12]) /* ty=Tensor[(16, 11, 12), float32] */;
    %453 = %448.0;
    %454 = exp(%450) /* ty=Tensor[(9, 9, 6), float32] */;
    %455 = @func_85(%452) /* ty=Tensor[(16, 11, 12), float32] */;
    (%453, %454, %455, %var_2589)
  };
  %456(%var_2597) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(16, 11, 12), float32], Tensor[(2112), float32]) */
}

def @func_14148() -> Tensor[(210), float64] {
  %458 = fn () -> Tensor[(210), float64] {
    %457 = @func_7979() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(210), float64]) */;
    %457.1
  };
  %458() /* ty=Tensor[(210), float64] */
}

def @func_11230(%var_11198: Tensor[(15, 10, 1), bool]) -> (Tensor[(9, 9, 6), float32], Tensor[(15, 10, ?), float64]) {
  %459 = @func_1852() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %460 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %461 = cast(%var_11198, dtype="bool") /* ty=Tensor[(15, 10, 1), bool] */;
  %462 = logical_or(%460, %461) /* ty=Tensor[(15, 10, 1), bool] */;
  %463 = cast(%var_11198, dtype="bool") /* ty=Tensor[(15, 10, 1), bool] */;
  %464 = shape_of(%462, dtype="int32") /* ty=Tensor[(3), int32] */;
  %465 = cast(%462, dtype="bool") /* ty=Tensor[(15, 10, 1), bool] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %467 = greater_equal(%465, %466) /* ty=Tensor[(15, 10, ?), bool] */;
  %468 = cast(%467, dtype="float64") /* ty=Tensor[(15, 10, ?), float64] */;
  %469 = %459.0;
  %470 = sqrt(%468) /* ty=Tensor[(15, 10, ?), float64] */;
  (%469, %470)
}

def @func_5072() -> (Tensor[(9, 9, 6), float32],) {
  @func_5070() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_1206(%var_1204: Tensor[(7, 6, 5), float64]) -> (Tensor[(7, 6, 5), float64],) {
  @func_1203(%var_1204) /* ty=(Tensor[(7, 6, 5), float64],) */
}

def @func_6494() -> Tensor[(9, 9, 6), float32] {
  @func_6492() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_9264(%var_9263: Tensor[(11, 3, 7), int64]) -> (Tensor[(11, 3, 7), int64], Tensor[(11, 3, 7), float64], Tensor[(9, 9, 6), float32]) {
  %479 = fn (%var_9239: Tensor[(11, 3, 7), int64]) -> (Tensor[(11, 3, 7), int64], Tensor[(11, 3, 7), float64], Tensor[(9, 9, 6), float32]) {
    %471 = cast(meta[relay.Constant][33] /* ty=Tensor[(11, 3, 7), int64] */, dtype="int64") /* ty=Tensor[(11, 3, 7), int64] */;
    %472 = shape_of(%var_9239, dtype="int32") /* ty=Tensor[(3), int32] */;
    %473 = cast(%var_9239, dtype="int64") /* ty=Tensor[(11, 3, 7), int64] */;
    %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %475 = cast(%var_9239, dtype="float64") /* ty=Tensor[(11, 3, 7), float64] */;
    %476 = bitwise_xor(%473, %474) /* ty=Tensor[(11, 3, 7), int64] */;
    %477 = asin(%475) /* ty=Tensor[(11, 3, 7), float64] */;
    %478 = @func_6492() /* ty=Tensor[(9, 9, 6), float32] */;
    (%476, %477, %478)
  };
  %479(%var_9263) /* ty=(Tensor[(11, 3, 7), int64], Tensor[(11, 3, 7), float64], Tensor[(9, 9, 6), float32]) */
}

def @func_12920() -> Tensor[(9, 9, 6), float32] {
  @func_12918() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_3132() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %485 = fn () -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
    %480 = @func_2710() /* ty=Tensor[(9, 9, 6), float32] */;
    %481 = cast(%480, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
    %482 = cast(%480, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
    %483 = cos(%481) /* ty=Tensor[(9, 9, 6), float32] */;
    %484 = log2(%482) /* ty=Tensor[(9, 9, 6), float32] */;
    (%483, %484)
  };
  %485() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */
}

def @func_7529() -> (Tensor[(9, 9, 6), float32],) {
  @func_7527() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_13658() -> Tensor[(9, 9, 6), float32] {
  %487 = fn () -> Tensor[(9, 9, 6), float32] {
    %486 = @func_9289() /* ty=(Tensor[(9, 9, 6), float32],) */;
    %486.0
  };
  %487() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_14129(%var_14127: Tensor[(2, 1440), float32]) -> (Tensor[(9, 9, 6), float32], Tensor[(15, 3, 1), float64], Tensor[(2, 1440), float32], Tensor[(126), float64]) {
  @func_14126(%var_14127) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(15, 3, 1), float64], Tensor[(2, 1440), float32], Tensor[(126), float64]) */
}

def @func_3561(%var_3559: int8, %var_3560: Tensor[(13, 13, 14), int8]) -> (Tensor[(13, 13, 14), int8], Tensor[(9, 9, 6), bool], Tensor[(486), float32]) {
  %495 = fn (%var_3540: int8, %var_3541: Tensor[(13, 13, 14), int8]) -> (Tensor[(13, 13, 14), int8], Tensor[(9, 9, 6), bool], Tensor[(486), float32]) {
    %488 = cast(%var_3540, dtype="int8") /* ty=int8 */;
    %489 = cast(%var_3541, dtype="int8") /* ty=Tensor[(13, 13, 14), int8] */;
    %490 = cast(meta[relay.Constant][34] /* ty=Tensor[(486), float32] */, dtype="float32") /* ty=Tensor[(486), float32] */;
    %491 = reshape(%490, newshape=[9, 9, 6]) /* ty=Tensor[(9, 9, 6), float32] */;
    %492 = @func_2269(%491) /* ty=(Tensor[(9, 9, 6), bool], Tensor[(9, 9, 6), float64]) */;
    %493 = bitwise_and(%488, %489) /* ty=Tensor[(13, 13, 14), int8] */;
    %494 = %492.0;
    (%493, %494, meta[relay.Constant][34] /* ty=Tensor[(486), float32] */)
  };
  %495(%var_3559, %var_3560) /* ty=(Tensor[(13, 13, 14), int8], Tensor[(9, 9, 6), bool], Tensor[(486), float32]) */
}

def @func_3875() -> Tensor[(9, 9, 6), float32] {
  @func_3873() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_9657() -> Tensor[(9, 9, 6), float32] {
  %496 = @func_1852() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %496.0
}

def @func_11650() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  @func_11648() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */
}

def @func_2459(%var_2447: Tensor[(9, 9, 6), float32]) -> (Tensor[(15, 3, 1), float64], Tensor[(45), float64], Tensor[(9, 9, 6), int16]) {
  %497 = cast(meta[relay.Constant][35] /* ty=Tensor[(45), float64] */, dtype="float64") /* ty=Tensor[(45), float64] */;
  %498 = reshape(%497, newshape=[15, 3, 1]) /* ty=Tensor[(15, 3, 1), float64] */;
  %499 = @func_284(%498) /* ty=(Tensor[(15, 3, 1), float64],) */;
  %500 = @func_2420() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %501 = %500.0;
  %502 = cast(%var_2447, dtype="int16") /* ty=Tensor[(9, 9, 6), int16] */;
  %503 = shape_of(%501, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(%501, dtype="int16") /* ty=Tensor[(9, 9, 6), int16] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %506 = %499.0;
  %507 = maximum(%504, %505) /* ty=Tensor[(9, 9, 6), int16] */;
  (%506, meta[relay.Constant][35] /* ty=Tensor[(45), float64] */, %507)
}

def @func_8211() -> (Tensor[(9, 9, 6), float32],) {
  %510 = fn () -> (Tensor[(9, 9, 6), float32],) {
    %508 = @func_2917() /* ty=(Tensor[(9, 9, 6), float32],) */;
    %509 = %508.0;
    (%509,)
  };
  %510() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_5861() -> (Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(9, 9, 6), float32]) {
  %525 = fn () -> (Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(9, 9, 6), float32]) {
    %511 = @func_2420() /* ty=(Tensor[(9, 9, 6), float32],) */;
    %512 = %511.0;
    %513 = cast(meta[relay.Constant][36] /* ty=Tensor[(9, 9, 6), float32] */, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
    %514 = shape_of(%512, dtype="int32") /* ty=Tensor[(3), int32] */;
    %515 = cast(%512, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
    %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %517 = @func_5584() /* ty=(Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32]) */;
    %518 = cast(meta[relay.Constant][37] /* ty=Tensor[(45), float64] */, dtype="float64") /* ty=Tensor[(45), float64] */;
    %519 = reshape(%518, newshape=[45]) /* ty=Tensor[(45), float64] */;
    %520 = @func_5222(%519) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(16, 11, 12), float32], Tensor[(45), float64]) */;
    %521 = power(%515, %516) /* ty=Tensor[(9, 9, 6), float32] */;
    %522 = %517.0;
    %523 = %520.1;
    %524 = @func_2710() /* ty=Tensor[(9, 9, 6), float32] */;
    (%521, %522, %523, meta[relay.Constant][37] /* ty=Tensor[(45), float64] */, %524)
  };
  %525() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(9, 9, 6), float32]) */
}

def @func_11731(%var_11730: Tensor[(486), float32]) -> (Tensor[(15, 8, 16), uint8], Tensor[(9, 9, 6), float64], Tensor[(486), float32]) {
  %534 = fn (%var_11718: Tensor[(486), float32]) -> (Tensor[(15, 8, 16), uint8], Tensor[(9, 9, 6), float64], Tensor[(486), float32]) {
    %526 = @func_10727() /* ty=(Tensor[(15, 8, 16), uint8],) */;
    %527 = cast(%var_11718, dtype="float32") /* ty=Tensor[(486), float32] */;
    %528 = cast(%var_11718, dtype="float32") /* ty=Tensor[(486), float32] */;
    %529 = reshape(%527, newshape=[486]) /* ty=Tensor[(486), float32] */;
    %530 = reshape(%528, newshape=[486]) /* ty=Tensor[(486), float32] */;
    %531 = @func_11038(%529, %530) /* ty=(Tensor[(45), float64], Tensor[(9, 9, 6), float64], Tensor[(486), int16]) */;
    %532 = %526.0;
    %533 = %531.1;
    (%532, %533, %var_11718)
  };
  %534(%var_11730) /* ty=(Tensor[(15, 8, 16), uint8], Tensor[(9, 9, 6), float64], Tensor[(486), float32]) */
}

def @func_6610(%var_6607: Tensor[(13, 15, 3), bool], %var_6608: Tensor[(13, 15, 3), bool], %var_6609: Tensor[(210), float64]) -> (Tensor[(13, 15, 3), bool], Tensor[(7, 6, 5), float64], Tensor[(210), float64], Tensor[(13, 15, 3), float64]) {
  %546 = fn (%var_6578: Tensor[(13, 15, 3), bool], %var_6579: Tensor[(13, 15, 3), bool], %var_6588: Tensor[(210), float64]) -> (Tensor[(13, 15, 3), bool], Tensor[(7, 6, 5), float64], Tensor[(210), float64], Tensor[(13, 15, 3), float64]) {
    %535 = cast(%var_6579, dtype="bool") /* ty=Tensor[(13, 15, 3), bool] */;
    %536 = shape_of(%var_6578, dtype="int32") /* ty=Tensor[(3), int32] */;
    %537 = cast(%var_6578, dtype="bool") /* ty=Tensor[(13, 15, 3), bool] */;
    %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %539 = cast(%var_6588, dtype="float64") /* ty=Tensor[(210), float64] */;
    %540 = reshape(%539, newshape=[210, 1]) /* ty=Tensor[(210, 1), float64] */;
    %541 = @func_3316(%540) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(210, 1), float64]) */;
    %542 = cast(%var_6579, dtype="float64") /* ty=Tensor[(13, 15, 3), float64] */;
    %543 = logical_and(%537, %538) /* ty=Tensor[(13, 15, 3), bool] */;
    %544 = %541.1;
    %545 = sqrt(%542) /* ty=Tensor[(13, 15, 3), float64] */;
    (%543, %544, %var_6588, %545)
  };
  %546(%var_6607, %var_6608, %var_6609) /* ty=(Tensor[(13, 15, 3), bool], Tensor[(7, 6, 5), float64], Tensor[(210), float64], Tensor[(13, 15, 3), float64]) */
}

def @func_13612(%var_13609: Tensor[(16, 2, 6), float64], %var_13610: Tensor[(45), float64], %var_13611: Tensor[(120), uint32]) -> (Tensor[(16, 2, 6), float64], Tensor[(9, 9, 6), uint8], Tensor[(45), float64], Tensor[(120), uint32], Tensor[(2880), float32]) {
  %558 = fn (%var_13597: Tensor[(16, 2, 6), float64], %var_13603: Tensor[(45), float64], %var_13604: Tensor[(120), uint32]) -> (Tensor[(16, 2, 6), float64], Tensor[(9, 9, 6), uint8], Tensor[(45), float64], Tensor[(120), uint32], Tensor[(2880), float32]) {
    %547 = cast(meta[relay.Constant][38] /* ty=Tensor[(16, 1, 6), float64] */, dtype="float64") /* ty=Tensor[(16, 1, 6), float64] */;
    %548 = cast(%var_13597, dtype="float64") /* ty=Tensor[(16, 2, 6), float64] */;
    %549 = cast(%var_13603, dtype="float64") /* ty=Tensor[(45), float64] */;
    %550 = cast(%var_13604, dtype="uint32") /* ty=Tensor[(120), uint32] */;
    %551 = cast(meta[relay.Constant][39] /* ty=Tensor[(2880), float32] */, dtype="float32") /* ty=Tensor[(2880), float32] */;
    %552 = reshape(%549, newshape=[45]) /* ty=Tensor[(45), float64] */;
    %553 = reshape(%550, newshape=[6, 20]) /* ty=Tensor[(6, 20), uint32] */;
    %554 = reshape(%551, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
    %555 = @func_7940(%552, %553, %554) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(16, 11, 12), float32], Tensor[(6, 20), uint32], Tensor[(840), uint32], Tensor[(9, 9, 6), float32], Tensor[(2880), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), uint8], Tensor[(9, 9, 6), float32]) */;
    %556 = divide(%547, %548) /* ty=Tensor[(16, 2, 6), float64] */;
    %557 = %555.10;
    (%556, %557, %var_13603, %var_13604, meta[relay.Constant][39] /* ty=Tensor[(2880), float32] */)
  };
  %558(%var_13609, %var_13610, %var_13611) /* ty=(Tensor[(16, 2, 6), float64], Tensor[(9, 9, 6), uint8], Tensor[(45), float64], Tensor[(120), uint32], Tensor[(2880), float32]) */
}

def @func_3781() -> (Tensor[(9, 9, 6), float32],) {
  @func_3779() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_10672() -> Tensor[(9, 9, 6), float32] {
  %560 = fn () -> Tensor[(9, 9, 6), float32] {
    %559 = @func_3271() /* ty=(Tensor[(9, 9, 6), float32],) */;
    %559.0
  };
  %560() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_9830() -> (Tensor[(15, 8, 16), float32],) {
  %563 = fn () -> (Tensor[(15, 8, 16), float32],) {
    %561 = @func_5037() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(15, 8, 16), float32]) */;
    %562 = %561.5;
    (%562,)
  };
  %563() /* ty=(Tensor[(15, 8, 16), float32],) */
}

def @func_3831() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  @func_3829() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */
}

def @func_8500() -> (Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(9, 9, 6), float32]) {
  %569 = fn () -> (Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(9, 9, 6), float32]) {
    %564 = @func_4855() /* ty=(Tensor[(7, 6, 5), float64], Tensor[(9, 9, 6), float32]) */;
    %565 = @func_3207() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
    %566 = @func_7444() /* ty=Tensor[(9, 9, 6), float32] */;
    %567 = %564.0;
    %568 = %565.1;
    (%566, %567, %568)
  };
  %569() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(9, 9, 6), float32]) */
}

def @func_12316() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(15, 8, 16), float32]) {
  %570 = @func_10285() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool], Tensor[(9, 9, 6), float32]) */;
  %571 = @func_5037() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(15, 8, 16), float32]) */;
  %572 = %570.2;
  %573 = @func_4031() /* ty=Tensor[(9, 9, 6), float32] */;
  %574 = %571.5;
  (%572, %573, %574)
}

def @func_10015() -> (Tensor[(9, 9, 6), float32],) {
  %575 = @func_6443() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %576 = %575.0;
  (%576,)
}

def @func_4446() -> (Tensor[(9, 9, 6), float32],) {
  @func_4444() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_9757() -> Tensor[(9, 9, 6), float32] {
  %577 = @func_7061() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %577.1
}

def @func_10543() -> (Tensor[(9, 9, 6), float32],) {
  %580 = fn () -> (Tensor[(9, 9, 6), float32],) {
    %578 = @func_3207() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
    %579 = %578.1;
    (%579,)
  };
  %580() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_1741(%var_1739: Tensor[(15, 8, 16), uint8], %var_1740: Tensor[(15, 8, 16), uint8]) -> Tensor[(15, 8, 16), uint8] {
  %585 = fn (%var_1732: Tensor[(15, 8, 16), uint8], %var_1733: Tensor[(15, 8, 16), uint8]) -> Tensor[(15, 8, 16), uint8] {
    %581 = cast(%var_1733, dtype="uint8") /* ty=Tensor[(15, 8, 16), uint8] */;
    %582 = shape_of(%var_1732, dtype="int32") /* ty=Tensor[(3), int32] */;
    %583 = cast(%var_1732, dtype="uint8") /* ty=Tensor[(15, 8, 16), uint8] */;
    %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    minimum(%583, %584) /* ty=Tensor[(15, 8, 16), uint8] */
  };
  %585(%var_1739, %var_1740) /* ty=Tensor[(15, 8, 16), uint8] */
}

def @func_9228() -> Tensor[(4, 15, 3), float32] {
  @func_9226() /* ty=Tensor[(4, 15, 3), float32] */
}

def @func_13556(%var_13550: Tensor[(4, 480), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(4, 480), bool]) {
  %586 = @func_2492() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %587 = @func_6983() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64]) */;
  %588 = %587.1;
  %589 = cast(%588, dtype="float64") /* ty=Tensor[(4, 480), float64] */;
  %590 = sigmoid(%589) /* ty=Tensor[(4, 480), float64] */;
  %591 = cast(%var_13550, dtype="bool") /* ty=Tensor[(4, 480), bool] */;
  %592 = shape_of(%590, dtype="int32") /* ty=Tensor[(2), int32] */;
  %593 = cast(%590, dtype="bool") /* ty=Tensor[(4, 480), bool] */;
  %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %595 = %586.0;
  %596 = less_equal(%593, %594) /* ty=Tensor[(4, 480), bool] */;
  (%595, %596)
}

def @func_5903() -> (Tensor[(9, 9, 6), float32],) {
  @func_5901() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_4642() -> Tensor[(9, 9, 6), float32] {
  %597 = fn () -> Tensor[(9, 9, 6), float32] {
    @func_2789() /* ty=Tensor[(9, 9, 6), float32] */
  };
  %597() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_12435() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool], Tensor[(9, 9, 6), float32]) {
  %598 = @func_3207() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %599 = %598.1;
  %600 = cast(%599, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  %601 = reshape(%600, newshape=[9, 9, 6]) /* ty=Tensor[(9, 9, 6), float32] */;
  %602 = @func_2768(%601) /* ty=(Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), bool]) */;
  %603 = @func_9892() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %604 = %602.1;
  %605 = %603.0;
  (%599, %604, %605)
}

def @func_11342() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool], Tensor[(9, 9, 6), float32], Tensor[(8, 12, 2), int8], Tensor[(192), int8], Tensor[(126), float64], Tensor[(9, 9, 6), bool]) {
  @func_11340() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool], Tensor[(9, 9, 6), float32], Tensor[(8, 12, 2), int8], Tensor[(192), int8], Tensor[(126), float64], Tensor[(9, 9, 6), bool]) */
}

def @func_10836() -> (Tensor[(9, 9, 6), float32],) {
  %607 = fn () -> (Tensor[(9, 9, 6), float32],) {
    %606 = @func_6368() /* ty=Tensor[(9, 9, 6), float32] */;
    (%606,)
  };
  %607() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_13939() -> (Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(126), float64], Tensor[(2880), float32]) {
  @func_13937() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(126), float64], Tensor[(2880), float32]) */
}

def @func_7445() -> Tensor[(9, 9, 6), float32] {
  %608 = fn () -> Tensor[(9, 9, 6), float32] {
    @func_6019() /* ty=Tensor[(9, 9, 6), float32] */
  };
  %608() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_10376() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %614 = fn () -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
    %609 = @func_10285() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool], Tensor[(9, 9, 6), float32]) */;
    %610 = @func_4016() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(15, 8, 16), uint8], Tensor[(4, 480), uint8]) */;
    %611 = %609.2;
    %612 = @func_2710() /* ty=Tensor[(9, 9, 6), float32] */;
    %613 = %610.0;
    (%611, %612, %613)
  };
  %614() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */
}

def @func_12114() -> Tensor[(9, 9, 6), float32] {
  @func_12112() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_2492() -> (Tensor[(9, 9, 6), float32],) {
  %615 = @func_1825() /* ty=Tensor[(9, 9, 6), float32] */;
  (%615,)
}

def @func_12918() -> Tensor[(9, 9, 6), float32] {
  @func_11430() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_6445() -> (Tensor[(9, 9, 6), float32],) {
  @func_6443() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_10958() -> (Tensor[(9, 9, 6), float32],) {
  %616 = @func_5584() /* ty=(Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32]) */;
  %617 = %616.1;
  (%617,)
}

def @func_13559(%var_13557: Tensor[(4, 480), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(4, 480), bool]) {
  @func_13556(%var_13557) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(4, 480), bool]) */
}

def @func_5054(%var_5052: Tensor[(2880), float32]) -> (Tensor[(9, 9, 6), float32], Tensor[(2880), float32], Tensor[(2880), float32]) {
  @func_5051(%var_5052) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(2880), float32], Tensor[(2880), float32]) */
}

def @func_13431() -> (Tensor[(9, 9, 6), float32],) {
  @func_13429() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_11595() -> (Tensor[(9, 9, 6), float32],) {
  %619 = fn () -> (Tensor[(9, 9, 6), float32],) {
    %618 = @func_7444() /* ty=Tensor[(9, 9, 6), float32] */;
    (%618,)
  };
  %619() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_10796() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %622 = fn () -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
    %620 = @func_4641() /* ty=Tensor[(9, 9, 6), float32] */;
    %621 = @func_3290() /* ty=Tensor[(9, 9, 6), float32] */;
    (%620, %621)
  };
  %622() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */
}

def @func_7793(%var_7791: Tensor[(2880), float32], %var_7792: Tensor[(3, 42), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(5, 10, 14), bool], Tensor[(9, 9, 6), float32], Tensor[(2880), float32], Tensor[(2520), float64], Tensor[(3, 42), float64], Tensor[(9, 9, 6), float32], Tensor[(10), float32]) {
  @func_7789(%var_7791, %var_7792) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(5, 10, 14), bool], Tensor[(9, 9, 6), float32], Tensor[(2880), float32], Tensor[(2520), float64], Tensor[(3, 42), float64], Tensor[(9, 9, 6), float32], Tensor[(10), float32]) */
}

def @func_7108() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %623 = @func_1852() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %624 = @func_5656() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %625 = %623.0;
  %626 = %624.1;
  (%625, %626)
}

def @func_11430() -> Tensor[(9, 9, 6), float32] {
  @func_5541() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_7965() -> (Tensor[(5, 4, 16), float64],) {
  @func_7963() /* ty=(Tensor[(5, 4, 16), float64],) */
}

def @func_11340() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool], Tensor[(9, 9, 6), float32], Tensor[(8, 12, 2), int8], Tensor[(192), int8], Tensor[(126), float64], Tensor[(9, 9, 6), bool]) {
  %627 = @func_9044() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(126), float64], Tensor[(126), float64]) */;
  %628 = @func_10285() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool], Tensor[(9, 9, 6), float32]) */;
  %629 = cast(meta[relay.Constant][40] /* ty=Tensor[(192), int8] */, dtype="int8") /* ty=Tensor[(192), int8] */;
  %630 = reshape(%629, newshape=[8, 12, 2]) /* ty=Tensor[(8, 12, 2), int8] */;
  %631 = @func_8013(%630) /* ty=(Tensor[(8, 12, 2), int8],) */;
  %632 = @func_9044() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(126), float64], Tensor[(126), float64]) */;
  %633 = @func_7692() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool]) */;
  %634 = %627.0;
  %635 = %628.1;
  %636 = @func_3337() /* ty=Tensor[(9, 9, 6), float32] */;
  %637 = %631.0;
  %638 = %632.2;
  %639 = %633.1;
  (%634, %635, %636, %637, meta[relay.Constant][40] /* ty=Tensor[(192), int8] */, %638, %639)
}

def @func_13255() -> (Tensor[(9, 9, 6), float32],) {
  %642 = fn () -> (Tensor[(9, 9, 6), float32],) {
    %640 = @func_3131() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
    %641 = %640.0;
    (%641,)
  };
  %642() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_4162() -> (Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(210), float64]) {
  @func_4160() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(210), float64]) */
}

def @func_6239(%var_6237: Tensor[(5, 10, 14), uint16], %var_6238: Tensor[(5, 10, 14), uint16]) -> (Tensor[(5, 10, 14), bool], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(5, 10, 14), float64], Tensor[(486), float32], int8, Tensor[(2366), int8]) {
  @func_6235(%var_6237, %var_6238) /* ty=(Tensor[(5, 10, 14), bool], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(5, 10, 14), float64], Tensor[(486), float32], int8, Tensor[(2366), int8]) */
}

def @func_5174(%var_5170: Tensor[(9, 8, 8), uint8], %var_5171: Tensor[(9, 8, 8), uint8], %var_5172: Tensor[(1920), uint8], %var_5173: Tensor[(2880), float32]) -> (Tensor[(9, 8, 8), bool], Tensor[(15, 8, 16), uint8], Tensor[(1920), uint8], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), float32], Tensor[(2880), float32]) {
  %663 = fn (%var_5124: Tensor[(9, 8, 8), uint8], %var_5125: Tensor[(9, 8, 8), uint8], %var_5132: Tensor[(1920), uint8], %var_5155: Tensor[(2880), float32]) -> (Tensor[(9, 8, 8), bool], Tensor[(15, 8, 16), uint8], Tensor[(1920), uint8], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), float32], Tensor[(2880), float32]) {
    %643 = cast(%var_5125, dtype="bool") /* ty=Tensor[(9, 8, 8), bool] */;
    %644 = shape_of(%var_5124, dtype="int32") /* ty=Tensor[(3), int32] */;
    %645 = cast(%var_5124, dtype="bool") /* ty=Tensor[(9, 8, 8), bool] */;
    %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %647 = cast(%var_5132, dtype="uint8") /* ty=Tensor[(1920), uint8] */;
    %648 = cast(%var_5132, dtype="uint8") /* ty=Tensor[(1920), uint8] */;
    %649 = reshape(%647, newshape=[15, 8, 16]) /* ty=Tensor[(15, 8, 16), uint8] */;
    %650 = reshape(%648, newshape=[15, 8, 16]) /* ty=Tensor[(15, 8, 16), uint8] */;
    %651 = @func_2492() /* ty=(Tensor[(9, 9, 6), float32],) */;
    %652 = %651.0;
    %653 = cast(%652, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
    %654 = reshape(%653, newshape=[9, 9, 6]) /* ty=Tensor[(9, 9, 6), float32] */;
    %655 = @func_2768(%654) /* ty=(Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), bool]) */;
    %656 = cast(%var_5155, dtype="float32") /* ty=Tensor[(2880), float32] */;
    %657 = reshape(%656, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
    %658 = @func_3019(%657) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), float32], Tensor[(2880), float32]) */;
    %659 = less_equal(%645, %646) /* ty=Tensor[(9, 8, 8), bool] */;
    %660 = @func_1738(%649, %650) /* ty=Tensor[(15, 8, 16), uint8] */;
    %661 = %655.0;
    %662 = %658.0;
    (%659, %660, %var_5132, %652, %661, %662, %var_5155)
  };
  %663(%var_5170, %var_5171, %var_5172, %var_5173) /* ty=(Tensor[(9, 8, 8), bool], Tensor[(15, 8, 16), uint8], Tensor[(1920), uint8], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), float32], Tensor[(2880), float32]) */
}

def @func_1203(%var_1197: Tensor[(7, 6, 5), float64]) -> (Tensor[(7, 6, 5), float64],) {
  %664 = cast(%var_1197, dtype="float64") /* ty=Tensor[(7, 6, 5), float64] */;
  %665 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(7, 6, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %666 = cast(meta[relay.Constant][41] /* ty=Tensor[(7, 6, 5), float64] */, dtype="float64") /* ty=Tensor[(7, 6, 5), float64] */;
  %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %668 = power(%666, %667) /* ty=Tensor[(7, 6, 5), float64] */;
  (%668,)
}

def @func_12873(%var_12871: Tensor[(576), uint8], %var_12872: Tensor[(2880), float32]) -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(576), uint8], Tensor[(1920), uint8], Tensor[(2880), float32], Tensor[(7, 6, 5), float64], Tensor[(210), float64]) {
  %684 = fn (%var_12858: Tensor[(576), uint8], %var_12860: Tensor[(2880), float32]) -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(576), uint8], Tensor[(1920), uint8], Tensor[(2880), float32], Tensor[(7, 6, 5), float64], Tensor[(210), float64]) {
    %669 = cast(%var_12858, dtype="uint8") /* ty=Tensor[(576), uint8] */;
    %670 = cast(%var_12858, dtype="uint8") /* ty=Tensor[(576), uint8] */;
    %671 = cast(meta[relay.Constant][42] /* ty=Tensor[(1920), uint8] */, dtype="uint8") /* ty=Tensor[(1920), uint8] */;
    %672 = cast(%var_12860, dtype="float32") /* ty=Tensor[(2880), float32] */;
    %673 = reshape(%669, newshape=[9, 8, 8]) /* ty=Tensor[(9, 8, 8), uint8] */;
    %674 = reshape(%670, newshape=[9, 8, 8]) /* ty=Tensor[(9, 8, 8), uint8] */;
    %675 = reshape(%671, newshape=[1920]) /* ty=Tensor[(1920), uint8] */;
    %676 = reshape(%672, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
    %677 = @func_5169(%673, %674, %675, %676) /* ty=(Tensor[(9, 8, 8), bool], Tensor[(15, 8, 16), uint8], Tensor[(1920), uint8], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), float32], Tensor[(2880), float32]) */;
    %678 = cast(meta[relay.Constant][43] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
    %679 = reshape(%678, newshape=[7, 6, 5]) /* ty=Tensor[(7, 6, 5), float64] */;
    %680 = @func_1203(%679) /* ty=(Tensor[(7, 6, 5), float64],) */;
    %681 = @func_2710() /* ty=Tensor[(9, 9, 6), float32] */;
    %682 = %677.5;
    %683 = %680.0;
    (%681, %682, %var_12858, meta[relay.Constant][42] /* ty=Tensor[(1920), uint8] */, %var_12860, %683, meta[relay.Constant][43] /* ty=Tensor[(210), float64] */)
  };
  %684(%var_12871, %var_12872) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(576), uint8], Tensor[(1920), uint8], Tensor[(2880), float32], Tensor[(7, 6, 5), float64], Tensor[(210), float64]) */
}

def @func_7433() -> (Tensor[(9, 9, 6), float32],) {
  %686 = fn () -> (Tensor[(9, 9, 6), float32],) {
    %685 = @func_3337() /* ty=Tensor[(9, 9, 6), float32] */;
    (%685,)
  };
  %686() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_13701() -> Tensor[(9, 9, 6), float32] {
  %687 = @func_9892() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %687.0
}

def @func_13386() -> Tensor[(9, 9, 6), float32] {
  %689 = fn () -> Tensor[(9, 9, 6), float32] {
    %688 = @func_10795() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
    %688.0
  };
  %689() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_4033() -> Tensor[(9, 9, 6), float32] {
  @func_4031() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_2532() -> Tensor[(9, 9, 6), float32] {
  %690 = @func_2420() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %690.0
}

def @func_771(%var_769: Tensor[(15, 12, 14), float64]) -> (Tensor[(15, 12, 14), float64],) {
  @func_768(%var_769) /* ty=(Tensor[(15, 12, 14), float64],) */
}

def @func_12156() -> (Tensor[(9, 9, 6), float32],) {
  %693 = fn () -> (Tensor[(9, 9, 6), float32],) {
    %691 = @func_11594() /* ty=(Tensor[(9, 9, 6), float32],) */;
    %692 = %691.0;
    (%692,)
  };
  %693() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_5586() -> (Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32]) {
  @func_5584() /* ty=(Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32]) */
}

def @func_9626(%var_9516: Tensor[(12, 8, 2), float32]) -> (Tensor[(45), float64], Tensor[(45), float64], Tensor[(7, 6, 5), float64], Tensor[(9, 9, 6), float32], Tensor[(126), float64], Tensor[(12, 8, 2), float32], Tensor[(9, 9, 6), float32]) {
  %694 = cast(meta[relay.Constant][44] /* ty=Tensor[(45), float64] */, dtype="float64") /* ty=Tensor[(45), float64] */;
  %695 = reshape(%694, newshape=[45]) /* ty=Tensor[(45), float64] */;
  %696 = @func_2189(%695) /* ty=(Tensor[(45), float64], Tensor[(9, 9, 6), float64], Tensor[(15, 3, 1), float64], Tensor[(16, 11, 12), float32], Tensor[(528, 4), float32]) */;
  %697 = @func_8499() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(9, 9, 6), float32]) */;
  %698 = @func_7025() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %699 = @func_8995() /* ty=(Tensor[(126), float64], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %700 = cast(%var_9516, dtype="float32") /* ty=Tensor[(12, 8, 2), float32] */;
  %701 = cosh(%700) /* ty=Tensor[(12, 8, 2), float32] */;
  %702 = cast(%701, dtype="float32") /* ty=Tensor[(12, 8, 2), float32] */;
  %703 = @func_4589() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(2880), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %704 = %696.0;
  %705 = %697.1;
  %706 = %698.0;
  %707 = %699.0;
  %708 = acos(%702) /* ty=Tensor[(12, 8, 2), float32] */;
  %709 = %703.1;
  (%704, meta[relay.Constant][44] /* ty=Tensor[(45), float64] */, %705, %706, %707, %708, %709)
}

def @func_1827() -> Tensor[(9, 9, 6), float32] {
  @func_1825() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_3396() -> Tensor[(9, 9, 6), float32] {
  @func_3394() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_7025() -> (Tensor[(9, 9, 6), float32],) {
  %710 = @func_3263() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %711 = %710.0;
  (%711,)
}

def @func_10728() -> (Tensor[(15, 8, 16), uint8],) {
  %714 = fn () -> (Tensor[(15, 8, 16), uint8],) {
    %712 = @func_4016() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(15, 8, 16), uint8], Tensor[(4, 480), uint8]) */;
    %713 = %712.1;
    (%713,)
  };
  %714() /* ty=(Tensor[(15, 8, 16), uint8],) */
}

def @func_2272(%var_2270: Tensor[(9, 9, 6), float32]) -> (Tensor[(9, 9, 6), bool], Tensor[(9, 9, 6), float64]) {
  @func_2269(%var_2270) /* ty=(Tensor[(9, 9, 6), bool], Tensor[(9, 9, 6), float64]) */
}

def @func_7527() -> (Tensor[(9, 9, 6), float32],) {
  %715 = @func_1852() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %716 = %715.0;
  (%716,)
}

def @func_4349() -> (Tensor[(9, 9, 6), float32],) {
  @func_4347() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_11900() -> Tensor[(9, 9, 6), float32] {
  @func_11430() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_5038() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(15, 8, 16), float32]) {
  %728 = fn () -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(15, 8, 16), float32]) {
    %717 = @func_3758() /* ty=(Tensor[(9, 9, 6), float32],) */;
    %718 = @func_2420() /* ty=(Tensor[(9, 9, 6), float32],) */;
    %719 = @func_4016() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(15, 8, 16), uint8], Tensor[(4, 480), uint8]) */;
    %720 = %719.1;
    %721 = cast(%720, dtype="float32") /* ty=Tensor[(15, 8, 16), float32] */;
    %722 = %717.0;
    %723 = @func_4641() /* ty=Tensor[(9, 9, 6), float32] */;
    %724 = @func_3873() /* ty=Tensor[(9, 9, 6), float32] */;
    %725 = %718.0;
    %726 = @func_1825() /* ty=Tensor[(9, 9, 6), float32] */;
    %727 = sin(%721) /* ty=Tensor[(15, 8, 16), float32] */;
    (%722, %723, %724, %725, %726, %727)
  };
  %728() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(15, 8, 16), float32]) */
}

def @func_7175() -> (Tensor[(9, 9, 6), float32],) {
  %731 = fn () -> (Tensor[(9, 9, 6), float32],) {
    %729 = @func_2492() /* ty=(Tensor[(9, 9, 6), float32],) */;
    %730 = %729.0;
    (%730,)
  };
  %731() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_5051(%var_5049: Tensor[(2880), float32]) -> (Tensor[(9, 9, 6), float32], Tensor[(2880), float32], Tensor[(2880), float32]) {
  %732 = @func_4444() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %733 = cast(%var_5049, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %734 = reshape(%733, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
  %735 = @func_2744(%734) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(2520), float64], Tensor[(2880), float32]) */;
  %736 = %732.0;
  %737 = %735.2;
  (%736, %737, %var_5049)
}

def @func_4194() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %740 = fn () -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
    %738 = @func_3290() /* ty=Tensor[(9, 9, 6), float32] */;
    %739 = @func_1825() /* ty=Tensor[(9, 9, 6), float32] */;
    (%738, %739)
  };
  %740() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */
}

def @func_13703() -> Tensor[(9, 9, 6), float32] {
  @func_13701() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_87(%var_86: Tensor[(16, 11, 12), float32]) -> Tensor[(16, 11, 12), float32] {
  %742 = fn (%var_79: Tensor[(16, 11, 12), float32]) -> Tensor[(16, 11, 12), float32] {
    %741 = cast(%var_79, dtype="float32") /* ty=Tensor[(16, 11, 12), float32] */;
    log(%741) /* ty=Tensor[(16, 11, 12), float32] */
  };
  %742(%var_86) /* ty=Tensor[(16, 11, 12), float32] */
}

def @func_3339() -> Tensor[(9, 9, 6), float32] {
  @func_3337() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_12358(%var_12356: Tensor[(210, 1), float64]) -> (Tensor[(126), float64], Tensor[(4, 480), float64], Tensor[(210, 1), float64], Tensor[(210, 1), float64]) {
  @func_12355(%var_12356) /* ty=(Tensor[(126), float64], Tensor[(4, 480), float64], Tensor[(210, 1), float64], Tensor[(210, 1), float64]) */
}

def @func_13354() -> Tensor[(9, 9, 6), float32] {
  @func_13352() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_8995() -> (Tensor[(126), float64], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %743 = @func_8112() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(2520), float64], Tensor[(2880), float32], Tensor[(126), float64]) */;
  %744 = %743.3;
  %745 = @func_3394() /* ty=Tensor[(9, 9, 6), float32] */;
  %746 = @func_4266() /* ty=Tensor[(9, 9, 6), float32] */;
  (%744, %745, %746)
}

def @func_5786(%var_5752: Tensor[(2880), float32], %var_5761: Tensor[(126, 1), float64], %var_5772: Tensor[(2880), float32]) -> (Tensor[(2880), float32], Tensor[(9, 9, 6), bool], Tensor[(15, 3, 1), float64], Tensor[(126, 1), float64], Tensor[(2880), bool]) {
  %747 = cast(%var_5752, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %748 = reshape(%747, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
  %749 = @func_2744(%748) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(2520), float64], Tensor[(2880), float32]) */;
  %750 = @func_3873() /* ty=Tensor[(9, 9, 6), float32] */;
  %751 = cast(meta[relay.Constant][45] /* ty=Tensor[(9, 9, 6), float32] */, dtype="bool") /* ty=Tensor[(9, 9, 6), bool] */;
  %752 = shape_of(%750, dtype="int32") /* ty=Tensor[(3), int32] */;
  %753 = cast(%750, dtype="bool") /* ty=Tensor[(9, 9, 6), bool] */;
  %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %755 = cast(%var_5761, dtype="float64") /* ty=Tensor[(126, 1), float64] */;
  %756 = reshape(%755, newshape=[7, 3, 6]) /* ty=Tensor[(7, 3, 6), float64] */;
  %757 = @func_691(%756) /* ty=(Tensor[(16, 11, 12), float32], Tensor[(2112), float32], Tensor[(7, 3, 6), float64], Tensor[(15, 3, 1), float64], Tensor[(45), float64], Tensor[(16, 11, 12), float32], Tensor[(7, 3, 6), float64]) */;
  %758 = cast(%var_5772, dtype="bool") /* ty=Tensor[(2880), bool] */;
  %759 = shape_of(%var_5752, dtype="int32") /* ty=Tensor[(1), int32] */;
  %760 = cast(%var_5752, dtype="bool") /* ty=Tensor[(2880), bool] */;
  %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?), bool] */;
  %762 = %749.2;
  %763 = not_equal(%753, %754) /* ty=Tensor[(9, 9, 6), bool] */;
  %764 = %757.3;
  %765 = logical_or(%760, %761) /* ty=Tensor[(2880), bool] */;
  (%762, %763, %764, %var_5761, %765)
}

def @func_2918() -> (Tensor[(9, 9, 6), float32],) {
  %767 = fn () -> (Tensor[(9, 9, 6), float32],) {
    %766 = @func_1825() /* ty=Tensor[(9, 9, 6), float32] */;
    (%766,)
  };
  %767() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_2022(%var_1908: Tensor[(126), float64], %var_1909: Tensor[(2520), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(126), float64], Tensor[(126), float64], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(2520), float32], Tensor[(15, 12, 14), float64], Tensor[(2880), float64], Tensor[(15, 12, 14), float64], Tensor[(15, 8, 16), uint8], Tensor[(1920), uint8], Tensor[(16, 11, 12), float32]) {
  %768 = cast(%var_1908, dtype="float64") /* ty=Tensor[(126), float64] */;
  %769 = reshape(%768, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %770 = @func_1892(%769) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(126), float64], Tensor[(15, 12, 14), int64]) */;
  %771 = @func_1852() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %772 = cast(meta[relay.Constant][46] /* ty=Tensor[(2880), float32] */, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %773 = cast(%var_1908, dtype="float64") /* ty=Tensor[(126), float64] */;
  %774 = cast(%var_1909, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %775 = reshape(%772, newshape=[15, 12, 16]) /* ty=Tensor[(15, 12, 16), float32] */;
  %776 = reshape(%773, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %777 = reshape(%774, newshape=[15, 12, 14]) /* ty=Tensor[(15, 12, 14), float64] */;
  %778 = @func_1433(%775, %776, %777) /* ty=(Tensor[(15, 12, 16), uint32], Tensor[(2520), float64], Tensor[(2112), float32], Tensor[(126), float64], Tensor[(15, 12, 14), uint8], Tensor[(15, 12, 16), float64]) */;
  %779 = %778.5;
  %780 = cast(%779, dtype="float32") /* ty=Tensor[(15, 12, 16), float32] */;
  %781 = cast(%var_1908, dtype="float64") /* ty=Tensor[(126), float64] */;
  %782 = cast(%var_1909, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %783 = reshape(%780, newshape=[15, 12, 16]) /* ty=Tensor[(15, 12, 16), float32] */;
  %784 = reshape(%781, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %785 = reshape(%782, newshape=[15, 12, 14]) /* ty=Tensor[(15, 12, 14), float64] */;
  %786 = @func_1433(%783, %784, %785) /* ty=(Tensor[(15, 12, 16), uint32], Tensor[(2520), float64], Tensor[(2112), float32], Tensor[(126), float64], Tensor[(15, 12, 14), uint8], Tensor[(15, 12, 16), float64]) */;
  %787 = %786.1;
  %788 = cast(%787, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %789 = shape_of(%var_1909, dtype="int32") /* ty=Tensor[(1), int32] */;
  %790 = cast(%var_1909, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?), float32] */;
  %792 = cast(%787, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %793 = reshape(%792, newshape=[15, 12, 14]) /* ty=Tensor[(15, 12, 14), float64] */;
  %794 = @func_768(%793) /* ty=(Tensor[(15, 12, 14), float64],) */;
  %795 = cast(meta[relay.Constant][46] /* ty=Tensor[(2880), float32] */, dtype="bool") /* ty=Tensor[(2880), bool] */;
  %796 = shape_of(%779, dtype="int32") /* ty=Tensor[(3), int32] */;
  %797 = cast(%779, dtype="bool") /* ty=Tensor[(15, 12, 16), bool] */;
  %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %799 = logical_or(%797, %798) /* ty=Tensor[(15, 12, 16), bool] */;
  %800 = cast(%799, dtype="float64") /* ty=Tensor[(15, 12, 16), float64] */;
  %801 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(2880), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %802 = cast(meta[relay.Constant][46] /* ty=Tensor[(2880), float32] */, dtype="float64") /* ty=Tensor[(2880), float64] */;
  %803 = dyn.reshape(%800, %801, newshape=[]) /* ty=Tensor[(?), float64] */;
  %804 = cast(%var_1909, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %805 = reshape(%804, newshape=[15, 12, 14]) /* ty=Tensor[(15, 12, 14), float64] */;
  %806 = @func_768(%805) /* ty=(Tensor[(15, 12, 14), float64],) */;
  %807 = cast(meta[relay.Constant][47] /* ty=Tensor[(1920), uint8] */, dtype="uint8") /* ty=Tensor[(1920), uint8] */;
  %808 = cast(meta[relay.Constant][47] /* ty=Tensor[(1920), uint8] */, dtype="uint8") /* ty=Tensor[(1920), uint8] */;
  %809 = reshape(%807, newshape=[15, 8, 16]) /* ty=Tensor[(15, 8, 16), uint8] */;
  %810 = reshape(%808, newshape=[15, 8, 16]) /* ty=Tensor[(15, 8, 16), uint8] */;
  %811 = cast(%var_1908, dtype="float64") /* ty=Tensor[(126), float64] */;
  %812 = reshape(%811, newshape=[7, 3, 6]) /* ty=Tensor[(7, 3, 6), float64] */;
  %813 = @func_691(%812) /* ty=(Tensor[(16, 11, 12), float32], Tensor[(2112), float32], Tensor[(7, 3, 6), float64], Tensor[(15, 3, 1), float64], Tensor[(45), float64], Tensor[(16, 11, 12), float32], Tensor[(7, 3, 6), float64]) */;
  %814 = @func_1825() /* ty=Tensor[(9, 9, 6), float32] */;
  %815 = %770.2;
  %816 = %771.0;
  %817 = @func_1825() /* ty=Tensor[(9, 9, 6), float32] */;
  %818 = floor_divide(%790, %791) /* ty=Tensor[(2520), float32] */;
  %819 = %794.0;
  %820 = divide(%802, %803) /* ty=Tensor[(2880), float64] */;
  %821 = %806.0;
  %822 = @func_1738(%809, %810) /* ty=Tensor[(15, 8, 16), uint8] */;
  %823 = %813.0;
  (%814, %var_1908, %815, %816, %817, %818, %819, %820, %821, %822, meta[relay.Constant][47] /* ty=Tensor[(1920), uint8] */, %823)
}

def @func_4444() -> (Tensor[(9, 9, 6), float32],) {
  %824 = @func_3394() /* ty=Tensor[(9, 9, 6), float32] */;
  (%824,)
}

def @func_5070() -> (Tensor[(9, 9, 6), float32],) {
  %825 = @func_4266() /* ty=Tensor[(9, 9, 6), float32] */;
  (%825,)
}

def @func_12318() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(15, 8, 16), float32]) {
  @func_12316() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(15, 8, 16), float32]) */
}

def @func_6322(%var_6296: Tensor[(1, 10, 12), uint32], %var_6297: Tensor[(7, 10, 12), uint32], %var_6313: Tensor[(45), float64]) -> (Tensor[(7, 10, 12), uint32], Tensor[(16, 11, 12), float32], Tensor[(45), float64]) {
  %826 = cast(%var_6296, dtype="uint32") /* ty=Tensor[(1, 10, 12), uint32] */;
  %827 = cast(%var_6297, dtype="uint32") /* ty=Tensor[(7, 10, 12), uint32] */;
  %828 = cast(%var_6313, dtype="float64") /* ty=Tensor[(45), float64] */;
  %829 = reshape(%828, newshape=[45]) /* ty=Tensor[(45), float64] */;
  %830 = @func_5222(%829) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(16, 11, 12), float32], Tensor[(45), float64]) */;
  %831 = right_shift(%826, %827) /* ty=Tensor[(7, 10, 12), uint32] */;
  %832 = %830.3;
  (%831, %832, %var_6313)
}

def @func_11648() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %833 = @func_4589() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(2880), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %834 = @func_5656() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %835 = %833.4;
  %836 = @func_5541() /* ty=Tensor[(9, 9, 6), float32] */;
  %837 = %834.0;
  (%835, %836, %837)
}

def @func_6369() -> Tensor[(9, 9, 6), float32] {
  %838 = fn () -> Tensor[(9, 9, 6), float32] {
    @func_6019() /* ty=Tensor[(9, 9, 6), float32] */
  };
  %838() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_8113() -> (Tensor[(9, 9, 6), float32], Tensor[(2520), float64], Tensor[(2880), float32], Tensor[(126), float64]) {
  %847 = fn () -> (Tensor[(9, 9, 6), float32], Tensor[(2520), float64], Tensor[(2880), float32], Tensor[(126), float64]) {
    %839 = @func_4444() /* ty=(Tensor[(9, 9, 6), float32],) */;
    %840 = cast(meta[relay.Constant][48] /* ty=Tensor[(2880), float32] */, dtype="float32") /* ty=Tensor[(2880), float32] */;
    %841 = cast(meta[relay.Constant][49] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
    %842 = reshape(%840, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
    %843 = reshape(%841, newshape=[3, 42]) /* ty=Tensor[(3, 42), float64] */;
    %844 = @func_7789(%842, %843) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(5, 10, 14), bool], Tensor[(9, 9, 6), float32], Tensor[(2880), float32], Tensor[(2520), float64], Tensor[(3, 42), float64], Tensor[(9, 9, 6), float32], Tensor[(10), float32]) */;
    %845 = %839.0;
    %846 = %844.4;
    (%845, %846, meta[relay.Constant][48] /* ty=Tensor[(2880), float32] */, meta[relay.Constant][49] /* ty=Tensor[(126), float64] */)
  };
  %847() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(2520), float64], Tensor[(2880), float32], Tensor[(126), float64]) */
}

def @func_9659() -> Tensor[(9, 9, 6), float32] {
  @func_9657() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_6465() -> Tensor[(9, 9, 6), float32] {
  %848 = @func_3779() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %848.0
}

def @func_9226() -> Tensor[(4, 15, 3), float32] {
  %849 = @func_8847() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(4, 15, 3), float64], Tensor[(180), float64], Tensor[(9, 9, 6), float32]) */;
  %850 = %849.2;
  %851 = cast(%850, dtype="float32") /* ty=Tensor[(4, 15, 3), float32] */;
  erf(%851) /* ty=Tensor[(4, 15, 3), float32] */
}

def @func_8180(%var_8177: Tensor[(1, 624), uint8], %var_8178: Tensor[(576), uint8], %var_8179: Tensor[(2880), float32]) -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], uint8, Tensor[(1, 624), uint8], Tensor[(210), float64], Tensor[(9, 9, 6), float64], Tensor[(576), uint8], Tensor[(1920), uint8], Tensor[(2880), float32]) {
  %874 = fn (%var_8149: Tensor[(1, 624), uint8], %var_8167: Tensor[(576), uint8], %var_8169: Tensor[(2880), float32]) -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], uint8, Tensor[(1, 624), uint8], Tensor[(210), float64], Tensor[(9, 9, 6), float64], Tensor[(576), uint8], Tensor[(1920), uint8], Tensor[(2880), float32]) {
    %852 = @func_5956() /* ty=(Tensor[(9, 9, 6), float32],) */;
    %853 = @func_7290() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64]) */;
    %854 = cast(meta[relay.Constant][50] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %855 = cast(%var_8149, dtype="uint8") /* ty=Tensor[(1, 624), uint8] */;
    %856 = cast(meta[relay.Constant][51] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
    %857 = reshape(%854, newshape=[]) /* ty=uint8 */;
    %858 = reshape(%855, newshape=[12, 4, 13]) /* ty=Tensor[(12, 4, 13), uint8] */;
    %859 = reshape(%856, newshape=[1, 210]) /* ty=Tensor[(1, 210), float64] */;
    %860 = @func_3709(%857, %858, %859) /* ty=(Tensor[(12, 4, 13), bool], Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(1, 210), float64]) */;
    %861 = cast(%var_8167, dtype="uint8") /* ty=Tensor[(576), uint8] */;
    %862 = cast(%var_8167, dtype="uint8") /* ty=Tensor[(576), uint8] */;
    %863 = cast(meta[relay.Constant][52] /* ty=Tensor[(1920), uint8] */, dtype="uint8") /* ty=Tensor[(1920), uint8] */;
    %864 = cast(%var_8169, dtype="float32") /* ty=Tensor[(2880), float32] */;
    %865 = reshape(%861, newshape=[9, 8, 8]) /* ty=Tensor[(9, 8, 8), uint8] */;
    %866 = reshape(%862, newshape=[9, 8, 8]) /* ty=Tensor[(9, 8, 8), uint8] */;
    %867 = reshape(%863, newshape=[1920]) /* ty=Tensor[(1920), uint8] */;
    %868 = reshape(%864, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
    %869 = @func_5169(%865, %866, %867, %868) /* ty=(Tensor[(9, 8, 8), bool], Tensor[(15, 8, 16), uint8], Tensor[(1920), uint8], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), float32], Tensor[(2880), float32]) */;
    %870 = %852.0;
    %871 = %853.0;
    %872 = %860.1;
    %873 = %869.4;
    (%870, %871, %872, meta[relay.Constant][50] /* ty=uint8 */, %var_8149, meta[relay.Constant][51] /* ty=Tensor[(210), float64] */, %873, %var_8167, meta[relay.Constant][52] /* ty=Tensor[(1920), uint8] */, %var_8169)
  };
  %874(%var_8177, %var_8178, %var_8179) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], uint8, Tensor[(1, 624), uint8], Tensor[(210), float64], Tensor[(9, 9, 6), float64], Tensor[(576), uint8], Tensor[(1920), uint8], Tensor[(2880), float32]) */
}

def @func_13808() -> (Tensor[(9, 9, 6), float32],) {
  %875 = @func_10303() /* ty=Tensor[(9, 9, 6), float32] */;
  (%875,)
}

def @func_3829() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %876 = @func_3779() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %877 = @func_2420() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %878 = %876.0;
  %879 = %877.0;
  (%878, %879)
}

def @func_1438(%var_1435: Tensor[(15, 12, 16), float32], %var_1436: Tensor[(126), float64], %var_1437: Tensor[(15, 12, 14), float64]) -> (Tensor[(15, 12, 16), uint32], Tensor[(2520), float64], Tensor[(2112), float32], Tensor[(126), float64], Tensor[(15, 12, 14), uint8], Tensor[(15, 12, 16), float64]) {
  @func_1433(%var_1435, %var_1436, %var_1437) /* ty=(Tensor[(15, 12, 16), uint32], Tensor[(2520), float64], Tensor[(2112), float32], Tensor[(126), float64], Tensor[(15, 12, 14), uint8], Tensor[(15, 12, 16), float64]) */
}

def @func_13842() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %885 = fn () -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
    %880 = @func_5037() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(15, 8, 16), float32]) */;
    %881 = @func_9289() /* ty=(Tensor[(9, 9, 6), float32],) */;
    %882 = %880.0;
    %883 = %881.0;
    %884 = @func_6118() /* ty=Tensor[(9, 9, 6), float32] */;
    (%882, %883, %884)
  };
  %885() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */
}

def @func_10238() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(4, 15, 3), float32]) {
  @func_10236() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(4, 15, 3), float32]) */
}

def @func_6698() -> Tensor[(9, 9, 6), float32] {
  %887 = fn () -> Tensor[(9, 9, 6), float32] {
    %886 = @func_3131() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
    %886.1
  };
  %887() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_6019() -> Tensor[(9, 9, 6), float32] {
  %888 = @func_2636() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %888.0
}

def @func_8997() -> (Tensor[(126), float64], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  @func_8995() /* ty=(Tensor[(126), float64], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */
}

def @func_3526(%var_3522: Tensor[(3, 1, 6), int64], %var_3523: Tensor[(3, 10, 6), int64], %var_3524: Tensor[(3, 15, 6), float32], %var_3525: Tensor[(486), float32]) -> (Tensor[(3, 10, 6), bool], Tensor[(9, 9, 6), bool], Tensor[(486), float32], Tensor[(9, 9, 6), bool], Tensor[(3, 15, 6), float64], Tensor[(3, 10, 6), uint64]) {
  %913 = fn (%var_3447: Tensor[(3, 1, 6), int64], %var_3448: Tensor[(3, 10, 6), int64], %var_3480: Tensor[(3, 15, 6), float32], %var_3492: Tensor[(486), float32]) -> (Tensor[(3, 10, 6), bool], Tensor[(9, 9, 6), bool], Tensor[(486), float32], Tensor[(9, 9, 6), bool], Tensor[(3, 15, 6), float64], Tensor[(3, 10, 6), uint64]) {
    %889 = cast(%var_3447, dtype="bool") /* ty=Tensor[(3, 1, 6), bool] */;
    %890 = cast(%var_3448, dtype="bool") /* ty=Tensor[(3, 10, 6), bool] */;
    %891 = cast(%var_3492, dtype="float32") /* ty=Tensor[(486), float32] */;
    %892 = reshape(%891, newshape=[9, 9, 6]) /* ty=Tensor[(9, 9, 6), float32] */;
    %893 = @func_2269(%892) /* ty=(Tensor[(9, 9, 6), bool], Tensor[(9, 9, 6), float64]) */;
    %894 = %893.0;
    %895 = cast(%894, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
    %896 = reshape(%895, newshape=[9, 9, 6]) /* ty=Tensor[(9, 9, 6), float32] */;
    %897 = @func_2269(%896) /* ty=(Tensor[(9, 9, 6), bool], Tensor[(9, 9, 6), float64]) */;
    %898 = cast(%var_3447, dtype="float32") /* ty=Tensor[(3, 1, 6), float32] */;
    %899 = atanh(%898) /* ty=Tensor[(3, 1, 6), float32] */;
    %900 = cast(%899, dtype="float32") /* ty=Tensor[(3, 1, 6), float32] */;
    %901 = cast(%var_3480, dtype="float32") /* ty=Tensor[(3, 15, 6), float32] */;
    %902 = power(%900, %901) /* ty=Tensor[(3, 15, 6), float32] */;
    %903 = cast(meta[relay.Constant][53] /* ty=Tensor[(3, 15, 6), float32] */, dtype="float64") /* ty=Tensor[(3, 15, 6), float64] */;
    %904 = shape_of(%902, dtype="int32") /* ty=Tensor[(3), int32] */;
    %905 = cast(%902, dtype="float64") /* ty=Tensor[(3, 15, 6), float64] */;
    %906 = dyn.reshape(%903, %904, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %907 = cast(%899, dtype="uint64") /* ty=Tensor[(3, 1, 6), uint64] */;
    %908 = cast(%var_3448, dtype="uint64") /* ty=Tensor[(3, 10, 6), uint64] */;
    %909 = equal(%889, %890) /* ty=Tensor[(3, 10, 6), bool] */;
    %910 = %897.0;
    %911 = divide(%905, %906) /* ty=Tensor[(3, 15, 6), float64] */;
    %912 = add(%907, %908) /* ty=Tensor[(3, 10, 6), uint64] */;
    (%909, %894, %var_3492, %910, %911, %912)
  };
  %913(%var_3522, %var_3523, %var_3524, %var_3525) /* ty=(Tensor[(3, 10, 6), bool], Tensor[(9, 9, 6), bool], Tensor[(486), float32], Tensor[(9, 9, 6), bool], Tensor[(3, 15, 6), float64], Tensor[(3, 10, 6), uint64]) */
}

def @func_3873() -> Tensor[(9, 9, 6), float32] {
  %914 = @func_3337() /* ty=Tensor[(9, 9, 6), float32] */;
  %915 = cast(%914, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  erf(%915) /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_13635() -> (Tensor[(9, 9, 6), bool],) {
  @func_13633() /* ty=(Tensor[(9, 9, 6), bool],) */
}

def @func_12501() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  @func_12499() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */
}

def @func_10181() -> Tensor[(9, 9, 6), float32] {
  %917 = fn () -> Tensor[(9, 9, 6), float32] {
    %916 = @func_6826() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
    %916.0
  };
  %917() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_4758() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool]) {
  @func_4756() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), bool]) */
}

def @func_13937() -> (Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(126), float64], Tensor[(2880), float32]) {
  %918 = cast(meta[relay.Constant][54] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
  %919 = reshape(%918, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %920 = @func_2672(%919) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(126), float64]) */;
  %921 = @func_12057() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(2880), float32], Tensor[(9, 9, 6), float32], Tensor[(2880), float32]) */;
  %922 = %921.1;
  %923 = cast(%922, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %924 = @func_9657() /* ty=Tensor[(9, 9, 6), float32] */;
  %925 = %920.1;
  %926 = cosh(%923) /* ty=Tensor[(2880), float32] */;
  (%924, %925, meta[relay.Constant][54] /* ty=Tensor[(126), float64] */, %926)
}

def @func_10630() -> (Tensor[(9, 9, 6), float32],) {
  %929 = fn () -> (Tensor[(9, 9, 6), float32],) {
    %927 = @func_7226() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
    %928 = %927.0;
    (%928,)
  };
  %929() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_5584() -> (Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32]) {
  %930 = @func_4016() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(15, 8, 16), uint8], Tensor[(4, 480), uint8]) */;
  %931 = %930.2;
  %932 = cast(%931, dtype="float64") /* ty=Tensor[(4, 480), float64] */;
  %933 = @func_3829() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %934 = acosh(%932) /* ty=Tensor[(4, 480), float64] */;
  %935 = %933.0;
  (%934, %935)
}

def @func_6924() -> Tensor[(8, 15, 13), float64] {
  @func_6922() /* ty=Tensor[(8, 15, 13), float64] */
}

def @func_4347() -> (Tensor[(9, 9, 6), float32],) {
  %936 = @func_3873() /* ty=Tensor[(9, 9, 6), float32] */;
  (%936,)
}

def @func_3337() -> Tensor[(9, 9, 6), float32] {
  @func_2710() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_3318(%var_3317: Tensor[(210, 1), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(210, 1), float64]) {
  %943 = fn (%var_3310: Tensor[(210, 1), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(210, 1), float64]) {
    %937 = @func_2420() /* ty=(Tensor[(9, 9, 6), float32],) */;
    %938 = cast(%var_3310, dtype="float64") /* ty=Tensor[(210, 1), float64] */;
    %939 = reshape(%938, newshape=[7, 6, 5]) /* ty=Tensor[(7, 6, 5), float64] */;
    %940 = @func_1203(%939) /* ty=(Tensor[(7, 6, 5), float64],) */;
    %941 = %937.0;
    %942 = %940.0;
    (%941, %942, %var_3310)
  };
  %943(%var_3317) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(210, 1), float64]) */
}

def @func_284(%var_254: Tensor[(15, 3, 1), float64]) -> (Tensor[(15, 3, 1), float64],) {
  %944 = cast(%var_254, dtype="float64") /* ty=Tensor[(15, 3, 1), float64] */;
  %945 = log2(%944) /* ty=Tensor[(15, 3, 1), float64] */;
  (%945,)
}

def @func_8543() -> Tensor[(9, 9, 6), float32] {
  %947 = fn () -> Tensor[(9, 9, 6), float32] {
    %946 = @func_7432() /* ty=(Tensor[(9, 9, 6), float32],) */;
    %946.0
  };
  %947() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_2398(%var_2395: Tensor[(2880), float32], %var_2396: Tensor[(126), float64], %var_2397: Tensor[(2520), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(126), float64], Tensor[(2880), float32], Tensor[(126), float64], Tensor[(2520), float64], Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(126), float64]) {
  @func_2393(%var_2395, %var_2396, %var_2397) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(126), float64], Tensor[(2880), float32], Tensor[(126), float64], Tensor[(2520), float64], Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(126), float64]) */
}

def @func_13012() -> Tensor[(5, 4, 16), float64] {
  @func_13010() /* ty=Tensor[(5, 4, 16), float64] */
}

def @func_6492() -> Tensor[(9, 9, 6), float32] {
  @func_4031() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_3209() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  @func_3207() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */
}

def @func_6107() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  @func_6105() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */
}

def @func_2462(%var_2460: Tensor[(9, 9, 6), float32]) -> (Tensor[(15, 3, 1), float64], Tensor[(45), float64], Tensor[(9, 9, 6), int16]) {
  @func_2459(%var_2460) /* ty=(Tensor[(15, 3, 1), float64], Tensor[(45), float64], Tensor[(9, 9, 6), int16]) */
}

def @func_3644() -> Tensor[(9, 9, 6), float32] {
  @func_3642() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_8702() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  @func_8700() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */
}

def @func_14058() -> Tensor[(9, 9, 6), float32] {
  @func_13997() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_6772() -> (Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32]) {
  %951 = fn () -> (Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32]) {
    %948 = @func_5860() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(9, 9, 6), float32]) */;
    %949 = %948.1;
    %950 = @func_5092() /* ty=Tensor[(9, 9, 6), float32] */;
    (%949, %950)
  };
  %951() /* ty=(Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32]) */
}

def @func_9290() -> (Tensor[(9, 9, 6), float32],) {
  %954 = fn () -> (Tensor[(9, 9, 6), float32],) {
    %952 = @func_3779() /* ty=(Tensor[(9, 9, 6), float32],) */;
    %953 = %952.0;
    (%953,)
  };
  %954() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_2711() -> Tensor[(9, 9, 6), float32] {
  %956 = fn () -> Tensor[(9, 9, 6), float32] {
    %955 = @func_1852() /* ty=(Tensor[(9, 9, 6), float32],) */;
    %955.0
  };
  %956() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_6021() -> Tensor[(9, 9, 6), float32] {
  @func_6019() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_13077(%var_13075: Tensor[(4, 480), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(4, 480), bool]) {
  @func_13074(%var_13075) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(4, 480), bool]) */
}

def @func_7388() -> Tensor[(9, 9, 6), float32] {
  %957 = fn () -> Tensor[(9, 9, 6), float32] {
    @func_6019() /* ty=Tensor[(9, 9, 6), float32] */
  };
  %957() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_9099() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %958 = @func_7108() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %959 = @func_6983() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64]) */;
  %960 = @func_7061() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %961 = %958.0;
  %962 = %959.0;
  %963 = %960.1;
  (%961, %962, %963)
}

def @func_2768(%var_2754: Tensor[(9, 9, 6), float32]) -> (Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), bool]) {
  %964 = @func_2636() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %965 = %964.2;
  %966 = cast(%var_2754, dtype="float64") /* ty=Tensor[(9, 9, 6), float64] */;
  %967 = shape_of(%965, dtype="int32") /* ty=Tensor[(3), int32] */;
  %968 = cast(%965, dtype="float64") /* ty=Tensor[(9, 9, 6), float64] */;
  %969 = dyn.reshape(%966, %967, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %970 = cast(%965, dtype="bool") /* ty=Tensor[(9, 9, 6), bool] */;
  %971 = shape_of(%var_2754, dtype="int32") /* ty=Tensor[(3), int32] */;
  %972 = cast(%var_2754, dtype="bool") /* ty=Tensor[(9, 9, 6), bool] */;
  %973 = dyn.reshape(%970, %971, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %974 = mod(%968, %969) /* ty=Tensor[(9, 9, 6), float64] */;
  %975 = less_equal(%972, %973) /* ty=Tensor[(9, 9, 6), bool] */;
  (%974, %975)
}

def @func_3264() -> (Tensor[(9, 9, 6), float32],) {
  %977 = fn () -> (Tensor[(9, 9, 6), float32],) {
    %976 = @func_2532() /* ty=Tensor[(9, 9, 6), float32] */;
    (%976,)
  };
  %977() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_1892(%var_1860: Tensor[(126), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(126), float64], Tensor[(15, 12, 14), int64]) {
  %978 = @func_1852() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %979 = cast(%var_1860, dtype="float64") /* ty=Tensor[(126), float64] */;
  %980 = reshape(%979, newshape=[7, 3, 6]) /* ty=Tensor[(7, 3, 6), float64] */;
  %981 = @func_691(%980) /* ty=(Tensor[(16, 11, 12), float32], Tensor[(2112), float32], Tensor[(7, 3, 6), float64], Tensor[(15, 3, 1), float64], Tensor[(45), float64], Tensor[(16, 11, 12), float32], Tensor[(7, 3, 6), float64]) */;
  %982 = cast(meta[relay.Constant][55] /* ty=Tensor[(2520), float64] */, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %983 = reshape(%982, newshape=[15, 12, 14]) /* ty=Tensor[(15, 12, 14), float64] */;
  %984 = @func_768(%983) /* ty=(Tensor[(15, 12, 14), float64],) */;
  %985 = %984.0;
  %986 = cast(meta[relay.Constant][55] /* ty=Tensor[(2520), float64] */, dtype="int64") /* ty=Tensor[(2520), int64] */;
  %987 = shape_of(%985, dtype="int32") /* ty=Tensor[(3), int32] */;
  %988 = cast(%985, dtype="int64") /* ty=Tensor[(15, 12, 14), int64] */;
  %989 = dyn.reshape(%986, %987, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %990 = %978.0;
  %991 = %981.4;
  %992 = multiply(%988, %989) /* ty=Tensor[(15, 12, 14), int64] */;
  (%990, %991, %var_1860, %992)
}

def @func_5657() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %996 = fn () -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
    %993 = @func_5584() /* ty=(Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32]) */;
    %994 = %993.1;
    %995 = @func_3394() /* ty=Tensor[(9, 9, 6), float32] */;
    (%994, %995)
  };
  %996() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */
}

def @func_7110() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  @func_7108() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */
}

def @func_2636() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %997 = @func_1852() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %998 = @func_2492() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %999 = %997.0;
  %1000 = %998.0;
  %1001 = @func_2049() /* ty=Tensor[(9, 9, 6), float32] */;
  (%999, %1000, %1001)
}

def @func_9699() -> (Tensor[(4, 480), float64],) {
  @func_9697() /* ty=(Tensor[(4, 480), float64],) */
}

def @func_768(%var_760: Tensor[(15, 12, 14), float64]) -> (Tensor[(15, 12, 14), float64],) {
  %1002 = cast(%var_760, dtype="float64") /* ty=Tensor[(15, 12, 14), float64] */;
  %1003 = log10(%1002) /* ty=Tensor[(15, 12, 14), float64] */;
  (%1003,)
}

def @func_7027() -> (Tensor[(9, 9, 6), float32],) {
  @func_7025() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_6983() -> (Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64]) {
  %1004 = @func_3779() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %1005 = @func_5584() /* ty=(Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32]) */;
  %1006 = %1004.0;
  %1007 = %1005.0;
  (%1006, %1007)
}

def @func_13162() -> (Tensor[(9, 9, 6), float32],) {
  %1009 = fn () -> (Tensor[(9, 9, 6), float32],) {
    %1008 = @func_10180() /* ty=Tensor[(9, 9, 6), float32] */;
    (%1008,)
  };
  %1009() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_9697() -> (Tensor[(4, 480), float64],) {
  %1010 = @func_6983() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64]) */;
  %1011 = %1010.1;
  (%1011,)
}

def @func_13437(%var_13433: Tensor[(13, 5, 7), bool]) -> Tensor[(13, 5, 7), bool] {
  %1012 = cast(%var_13433, dtype="bool") /* ty=Tensor[(13, 5, 7), bool] */;
  %1013 = shape_of(meta[relay.Constant][56] /* ty=Tensor[(13, 5, 7), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1014 = cast(meta[relay.Constant][56] /* ty=Tensor[(13, 5, 7), bool] */, dtype="bool") /* ty=Tensor[(13, 5, 7), bool] */;
  %1015 = dyn.reshape(%1012, %1013, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%1014, %1015) /* ty=Tensor[(13, 5, 7), bool] */
}

def @func_14080() -> (Tensor[(5, 4, 16), float64], Tensor[(16, 9, 6), bool], Tensor[(864), uint16]) {
  %1021 = fn () -> (Tensor[(5, 4, 16), float64], Tensor[(16, 9, 6), bool], Tensor[(864), uint16]) {
    %1016 = @func_7963() /* ty=(Tensor[(5, 4, 16), float64],) */;
    %1017 = cast(meta[relay.Constant][57] /* ty=Tensor[(864), uint16] */, dtype="uint16") /* ty=Tensor[(864), uint16] */;
    %1018 = reshape(%1017, newshape=[16, 9, 6]) /* ty=Tensor[(16, 9, 6), uint16] */;
    %1019 = %1016.0;
    %1020 = @func_8673(%1018) /* ty=Tensor[(16, 9, 6), bool] */;
    (%1019, %1020, meta[relay.Constant][57] /* ty=Tensor[(864), uint16] */)
  };
  %1021() /* ty=(Tensor[(5, 4, 16), float64], Tensor[(16, 9, 6), bool], Tensor[(864), uint16]) */
}

def @func_12355(%var_12353: Tensor[(210, 1), float64]) -> (Tensor[(126), float64], Tensor[(4, 480), float64], Tensor[(210, 1), float64], Tensor[(210, 1), float64]) {
  %1022 = @func_9044() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(126), float64], Tensor[(126), float64]) */;
  %1023 = @func_6771() /* ty=(Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32]) */;
  %1024 = cast(%var_12353, dtype="float64") /* ty=Tensor[(210, 1), float64] */;
  %1025 = reshape(%1024, newshape=[210, 1]) /* ty=Tensor[(210, 1), float64] */;
  %1026 = @func_3316(%1025) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(210, 1), float64]) */;
  %1027 = %1022.1;
  %1028 = %1023.0;
  %1029 = %1026.2;
  (%1027, %1028, %1029, %var_12353)
}

def @func_3019(%var_2997: Tensor[(2880), float32]) -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), float32], Tensor[(2880), float32]) {
  %1030 = @func_2636() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %1031 = %1030.2;
  %1032 = cast(%1031, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  %1033 = reshape(%1032, newshape=[9, 9, 6]) /* ty=Tensor[(9, 9, 6), float32] */;
  %1034 = @func_2768(%1033) /* ty=(Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), bool]) */;
  %1035 = cast(%var_2997, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %1036 = reshape(%1035, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
  %1037 = @func_2744(%1036) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(2520), float64], Tensor[(2880), float32]) */;
  %1038 = %1034.0;
  %1039 = %1037.0;
  (%1031, %1038, %1039, %var_2997)
}

def @func_3709(%var_3660: uint8, %var_3661: Tensor[(12, 4, 13), uint8], %var_3687: Tensor[(1, 210), float64]) -> (Tensor[(12, 4, 13), bool], Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(1, 210), float64]) {
  %1040 = cast(%var_3660, dtype="bool") /* ty=bool */;
  %1041 = cast(%var_3661, dtype="bool") /* ty=Tensor[(12, 4, 13), bool] */;
  %1042 = @func_2420() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %1043 = cast(%var_3687, dtype="float64") /* ty=Tensor[(1, 210), float64] */;
  %1044 = reshape(%1043, newshape=[210, 1]) /* ty=Tensor[(210, 1), float64] */;
  %1045 = @func_3316(%1044) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(210, 1), float64]) */;
  %1046 = less_equal(%1040, %1041) /* ty=Tensor[(12, 4, 13), bool] */;
  %1047 = %1042.0;
  %1048 = %1045.1;
  (%1046, %1047, %1048, %var_3687)
}

def @func_9403() -> Tensor[(9, 9, 6), float32] {
  %1050 = fn () -> Tensor[(9, 9, 6), float32] {
    %1049 = @func_3131() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
    %1049.0
  };
  %1050() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_11038(%var_11020: Tensor[(486), float32], %var_11032: Tensor[(486), float32]) -> (Tensor[(45), float64], Tensor[(9, 9, 6), float64], Tensor[(486), int16]) {
  %1051 = @func_5860() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(9, 9, 6), float32]) */;
  %1052 = cast(%var_11020, dtype="float32") /* ty=Tensor[(486), float32] */;
  %1053 = reshape(%1052, newshape=[9, 9, 6]) /* ty=Tensor[(9, 9, 6), float32] */;
  %1054 = @func_2269(%1053) /* ty=(Tensor[(9, 9, 6), bool], Tensor[(9, 9, 6), float64]) */;
  %1055 = cast(%var_11032, dtype="int16") /* ty=Tensor[(486), int16] */;
  %1056 = shape_of(%var_11020, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1057 = cast(%var_11020, dtype="int16") /* ty=Tensor[(486), int16] */;
  %1058 = dyn.reshape(%1055, %1056, newshape=[]) /* ty=Tensor[(?), int16] */;
  %1059 = %1051.3;
  %1060 = %1054.1;
  %1061 = logical_xor(%1057, %1058) /* ty=Tensor[(486), int16] */;
  (%1059, %1060, %1061)
}

def @func_14281() -> (Tensor[(9, 9, 6), float32],) {
  %1063 = fn () -> (Tensor[(9, 9, 6), float32],) {
    %1062 = @func_3873() /* ty=Tensor[(9, 9, 6), float32] */;
    (%1062,)
  };
  %1063() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_10960() -> (Tensor[(9, 9, 6), float32],) {
  @func_10958() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_14126(%var_14120: Tensor[(2, 1440), float32]) -> (Tensor[(9, 9, 6), float32], Tensor[(15, 3, 1), float64], Tensor[(2, 1440), float32], Tensor[(126), float64]) {
  %1064 = cast(%var_14120, dtype="float32") /* ty=Tensor[(2, 1440), float32] */;
  %1065 = cast(meta[relay.Constant][58] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
  %1066 = cast(%var_14120, dtype="float32") /* ty=Tensor[(2, 1440), float32] */;
  %1067 = reshape(%1064, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
  %1068 = reshape(%1065, newshape=[126, 1]) /* ty=Tensor[(126, 1), float64] */;
  %1069 = reshape(%1066, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
  %1070 = @func_5786(%1067, %1068, %1069) /* ty=(Tensor[(2880), float32], Tensor[(9, 9, 6), bool], Tensor[(15, 3, 1), float64], Tensor[(126, 1), float64], Tensor[(2880), bool]) */;
  %1071 = @func_10132() /* ty=Tensor[(9, 9, 6), float32] */;
  %1072 = %1070.2;
  (%1071, %1072, %var_14120, meta[relay.Constant][58] /* ty=Tensor[(126), float64] */)
}

def @func_12657() -> Tensor[(9, 9, 6), float32] {
  %1073 = fn () -> Tensor[(9, 9, 6), float32] {
    @func_3290() /* ty=Tensor[(9, 9, 6), float32] */
  };
  %1073() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_8015(%var_8014: Tensor[(8, 12, 2), int8]) -> (Tensor[(8, 12, 2), int8],) {
  %1079 = fn (%var_8003: Tensor[(8, 12, 2), int8]) -> (Tensor[(8, 12, 2), int8],) {
    %1074 = cast(%var_8003, dtype="int8") /* ty=Tensor[(8, 12, 2), int8] */;
    %1075 = shape_of(meta[relay.Constant][59] /* ty=Tensor[(8, 12, 2), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1076 = cast(meta[relay.Constant][59] /* ty=Tensor[(8, 12, 2), int8] */, dtype="int8") /* ty=Tensor[(8, 12, 2), int8] */;
    %1077 = dyn.reshape(%1074, %1075, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %1078 = logical_xor(%1076, %1077) /* ty=Tensor[(8, 12, 2), int8] */;
    (%1078,)
  };
  %1079(%var_8014) /* ty=(Tensor[(8, 12, 2), int8],) */
}

def @func_3292() -> Tensor[(9, 9, 6), float32] {
  @func_3290() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_6443() -> (Tensor[(9, 9, 6), float32],) {
  %1080 = @func_6368() /* ty=Tensor[(9, 9, 6), float32] */;
  (%1080,)
}

def @func_11432() -> Tensor[(9, 9, 6), float32] {
  @func_11430() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_6985() -> (Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64]) {
  @func_6983() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64]) */
}

def @func_13998() -> Tensor[(9, 9, 6), float32] {
  %1081 = fn () -> Tensor[(9, 9, 6), float32] {
    @func_9657() /* ty=Tensor[(9, 9, 6), float32] */
  };
  %1081() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_6827() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %1085 = fn () -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
    %1082 = @func_5901() /* ty=(Tensor[(9, 9, 6), float32],) */;
    %1083 = @func_2049() /* ty=Tensor[(9, 9, 6), float32] */;
    %1084 = %1082.0;
    (%1083, %1084)
  };
  %1085() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */
}

def @func_12903() -> (Tensor[(4, 480), uint8],) {
  %1088 = fn () -> (Tensor[(4, 480), uint8],) {
    %1086 = @func_4016() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(15, 8, 16), uint8], Tensor[(4, 480), uint8]) */;
    %1087 = %1086.2;
    (%1087,)
  };
  %1088() /* ty=(Tensor[(4, 480), uint8],) */
}

def @func_6922() -> Tensor[(8, 15, 13), float64] {
  %1089 = cast(meta[relay.Constant][60] /* ty=Tensor[(8, 15, 13), float64] */, dtype="float64") /* ty=Tensor[(8, 15, 13), float64] */;
  sigmoid(%1089) /* ty=Tensor[(8, 15, 13), float64] */
}

def @func_7980() -> (Tensor[(9, 9, 6), float32], Tensor[(210), float64]) {
  %1093 = fn () -> (Tensor[(9, 9, 6), float32], Tensor[(210), float64]) {
    %1090 = @func_4160() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(210), float64]) */;
    %1091 = @func_2049() /* ty=Tensor[(9, 9, 6), float32] */;
    %1092 = %1090.2;
    (%1091, %1092)
  };
  %1093() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(210), float64]) */
}

def @func_2393(%var_2328: Tensor[(2880), float32], %var_2329: Tensor[(126), float64], %var_2330: Tensor[(2520), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(126), float64], Tensor[(2880), float32], Tensor[(126), float64], Tensor[(2520), float64], Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(126), float64]) {
  %1094 = cast(%var_2328, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %1095 = cast(%var_2329, dtype="float64") /* ty=Tensor[(126), float64] */;
  %1096 = cast(%var_2330, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %1097 = reshape(%1094, newshape=[15, 12, 16]) /* ty=Tensor[(15, 12, 16), float32] */;
  %1098 = reshape(%1095, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %1099 = reshape(%1096, newshape=[15, 12, 14]) /* ty=Tensor[(15, 12, 14), float64] */;
  %1100 = @func_1433(%1097, %1098, %1099) /* ty=(Tensor[(15, 12, 16), uint32], Tensor[(2520), float64], Tensor[(2112), float32], Tensor[(126), float64], Tensor[(15, 12, 14), uint8], Tensor[(15, 12, 16), float64]) */;
  %1101 = @func_1825() /* ty=Tensor[(9, 9, 6), float32] */;
  %1102 = cast(%1101, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  %1103 = atan(%1102) /* ty=Tensor[(9, 9, 6), float32] */;
  %1104 = cast(%1101, dtype="float64") /* ty=Tensor[(9, 9, 6), float64] */;
  %1105 = shape_of(%1103, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1106 = cast(%1103, dtype="float64") /* ty=Tensor[(9, 9, 6), float64] */;
  %1107 = dyn.reshape(%1104, %1105, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1108 = subtract(%1106, %1107) /* ty=Tensor[(9, 9, 6), float64] */;
  %1109 = cast(%1108, dtype="float64") /* ty=Tensor[(9, 9, 6), float64] */;
  %1110 = cast(%var_2329, dtype="float64") /* ty=Tensor[(126), float64] */;
  %1111 = reshape(%1110, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %1112 = @func_1892(%1111) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(126), float64], Tensor[(15, 12, 14), int64]) */;
  %1113 = cast(%1108, dtype="float32") /* ty=Tensor[(9, 9, 6), float32] */;
  %1114 = cast(%var_2328, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %1115 = %1100.3;
  %1116 = cast(%1115, dtype="float64") /* ty=Tensor[(126), float64] */;
  %1117 = cast(%var_2330, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %1118 = reshape(%1114, newshape=[15, 12, 16]) /* ty=Tensor[(15, 12, 16), float32] */;
  %1119 = reshape(%1116, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %1120 = reshape(%1117, newshape=[15, 12, 14]) /* ty=Tensor[(15, 12, 14), float64] */;
  %1121 = @func_1433(%1118, %1119, %1120) /* ty=(Tensor[(15, 12, 16), uint32], Tensor[(2520), float64], Tensor[(2112), float32], Tensor[(126), float64], Tensor[(15, 12, 14), uint8], Tensor[(15, 12, 16), float64]) */;
  %1122 = @func_1825() /* ty=Tensor[(9, 9, 6), float32] */;
  %1123 = atanh(%1109) /* ty=Tensor[(9, 9, 6), float64] */;
  %1124 = %1112.0;
  %1125 = asinh(%1113) /* ty=Tensor[(9, 9, 6), float32] */;
  %1126 = @func_2049() /* ty=Tensor[(9, 9, 6), float32] */;
  %1127 = %1121.3;
  (%1122, %1115, %var_2328, %var_2329, %var_2330, %1123, %1124, %1125, %1126, %1127)
}

def @func_7945(%var_7942: Tensor[(45), float64], %var_7943: Tensor[(6, 20), uint32], %var_7944: Tensor[(2880), float32]) -> (Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(16, 11, 12), float32], Tensor[(6, 20), uint32], Tensor[(840), uint32], Tensor[(9, 9, 6), float32], Tensor[(2880), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), uint8], Tensor[(9, 9, 6), float32]) {
  @func_7940(%var_7942, %var_7943, %var_7944) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(16, 11, 12), float32], Tensor[(6, 20), uint32], Tensor[(840), uint32], Tensor[(9, 9, 6), float32], Tensor[(2880), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), uint8], Tensor[(9, 9, 6), float32]) */
}

def @func_8848() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(4, 15, 3), float64], Tensor[(180), float64], Tensor[(9, 9, 6), float32]) {
  %1136 = fn () -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(4, 15, 3), float64], Tensor[(180), float64], Tensor[(9, 9, 6), float32]) {
    %1128 = @func_2420() /* ty=(Tensor[(9, 9, 6), float32],) */;
    %1129 = cast(meta[relay.Constant][61] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %1130 = reshape(%1129, newshape=[4, 15, 3]) /* ty=Tensor[(4, 15, 3), float64] */;
    %1131 = @func_7596() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(3, 42), bool]) */;
    %1132 = %1128.0;
    %1133 = @func_3290() /* ty=Tensor[(9, 9, 6), float32] */;
    %1134 = @func_3057(%1130) /* ty=Tensor[(4, 15, 3), float64] */;
    %1135 = %1131.0;
    (%1132, %1133, %1134, meta[relay.Constant][61] /* ty=Tensor[(180), float64] */, %1135)
  };
  %1136() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(4, 15, 3), float64], Tensor[(180), float64], Tensor[(9, 9, 6), float32]) */
}

def @func_3779() -> (Tensor[(9, 9, 6), float32],) {
  %1137 = @func_2049() /* ty=Tensor[(9, 9, 6), float32] */;
  (%1137,)
}

def @func_287(%var_285: Tensor[(15, 3, 1), float64]) -> (Tensor[(15, 3, 1), float64],) {
  @func_284(%var_285) /* ty=(Tensor[(15, 3, 1), float64],) */
}

def @func_13010() -> Tensor[(5, 4, 16), float64] {
  %1138 = @func_7963() /* ty=(Tensor[(5, 4, 16), float64],) */;
  %1138.0
}

def @func_3207() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  %1139 = @func_3131() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %1140 = @func_1825() /* ty=Tensor[(9, 9, 6), float32] */;
  %1141 = %1139.1;
  (%1140, %1141)
}

def @func_3759() -> (Tensor[(9, 9, 6), float32],) {
  %1144 = fn () -> (Tensor[(9, 9, 6), float32],) {
    %1142 = @func_2636() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
    %1143 = %1142.1;
    (%1143,)
  };
  %1144() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_13074(%var_13065: Tensor[(4, 480), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(4, 480), bool]) {
  %1145 = @func_6443() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %1146 = @func_9697() /* ty=(Tensor[(4, 480), float64],) */;
  %1147 = %1146.0;
  %1148 = cast(%var_13065, dtype="bool") /* ty=Tensor[(4, 480), bool] */;
  %1149 = shape_of(%1147, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1150 = cast(%1147, dtype="bool") /* ty=Tensor[(4, 480), bool] */;
  %1151 = dyn.reshape(%1148, %1149, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1152 = %1145.0;
  %1153 = logical_or(%1150, %1151) /* ty=Tensor[(4, 480), bool] */;
  (%1152, %1153)
}

def @func_4266() -> Tensor[(9, 9, 6), float32] {
  @func_2710() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_14226() -> (Tensor[(5, 4, 16), float64],) {
  %1156 = fn () -> (Tensor[(5, 4, 16), float64],) {
    %1154 = @func_7963() /* ty=(Tensor[(5, 4, 16), float64],) */;
    %1155 = %1154.0;
    (%1155,)
  };
  %1156() /* ty=(Tensor[(5, 4, 16), float64],) */
}

def @func_11886() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) {
  @func_11884() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */
}

def @func_14060() -> Tensor[(9, 9, 6), float32] {
  @func_14058() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_8392() -> (Tensor[(9, 9, 6), float32],) {
  %1157 = @func_3873() /* ty=Tensor[(9, 9, 6), float32] */;
  (%1157,)
}

def @func_4268() -> Tensor[(9, 9, 6), float32] {
  @func_4266() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_7940(%var_7817: Tensor[(45), float64], %var_7820: Tensor[(6, 20), uint32], %var_7853: Tensor[(2880), float32]) -> (Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(16, 11, 12), float32], Tensor[(6, 20), uint32], Tensor[(840), uint32], Tensor[(9, 9, 6), float32], Tensor[(2880), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), uint8], Tensor[(9, 9, 6), float32]) {
  %1158 = @func_4444() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %1159 = cast(%var_7820, dtype="uint32") /* ty=Tensor[(6, 20), uint32] */;
  %1160 = cast(meta[relay.Constant][62] /* ty=Tensor[(840), uint32] */, dtype="uint32") /* ty=Tensor[(840), uint32] */;
  %1161 = cast(%var_7817, dtype="float64") /* ty=Tensor[(45), float64] */;
  %1162 = reshape(%1159, newshape=[1, 10, 12]) /* ty=Tensor[(1, 10, 12), uint32] */;
  %1163 = reshape(%1160, newshape=[7, 10, 12]) /* ty=Tensor[(7, 10, 12), uint32] */;
  %1164 = reshape(%1161, newshape=[45]) /* ty=Tensor[(45), float64] */;
  %1165 = @func_6322(%1162, %1163, %1164) /* ty=(Tensor[(7, 10, 12), uint32], Tensor[(16, 11, 12), float32], Tensor[(45), float64]) */;
  %1166 = @func_2917() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %1167 = @func_2420() /* ty=(Tensor[(9, 9, 6), float32],) */;
  %1168 = @func_4160() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(7, 6, 5), float64], Tensor[(210), float64]) */;
  %1169 = @func_5584() /* ty=(Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32]) */;
  %1170 = cast(%var_7853, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %1171 = reshape(%1170, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
  %1172 = @func_3019(%1171) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float64], Tensor[(9, 9, 6), float32], Tensor[(2880), float32]) */;
  %1173 = %1172.1;
  %1174 = cast(%1173, dtype="float64") /* ty=Tensor[(9, 9, 6), float64] */;
  %1175 = log(%1174) /* ty=Tensor[(9, 9, 6), float64] */;
  %1176 = cast(%var_7817, dtype="float64") /* ty=Tensor[(45), float64] */;
  %1177 = reshape(%1176, newshape=[45]) /* ty=Tensor[(45), float64] */;
  %1178 = @func_5261(%1177) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float64], Tensor[(45), float64]) */;
  %1179 = %1178.1;
  %1180 = cast(%1179, dtype="uint8") /* ty=Tensor[(9, 9, 6), uint8] */;
  %1181 = shape_of(%1175, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1182 = cast(%1175, dtype="uint8") /* ty=Tensor[(9, 9, 6), uint8] */;
  %1183 = dyn.reshape(%1180, %1181, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1184 = @func_7226() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
  %1185 = %1158.0;
  %1186 = %1165.1;
  %1187 = %1166.0;
  %1188 = %1167.0;
  %1189 = %1168.0;
  %1190 = %1169.1;
  %1191 = multiply(%1182, %1183) /* ty=Tensor[(9, 9, 6), uint8] */;
  %1192 = %1184.1;
  (%1185, %var_7817, %1186, %var_7820, meta[relay.Constant][62] /* ty=Tensor[(840), uint32] */, %1187, %var_7853, %1188, %1189, %1190, %1191, %1192)
}

def @func_5957() -> (Tensor[(9, 9, 6), float32],) {
  %1195 = fn () -> (Tensor[(9, 9, 6), float32],) {
    %1193 = @func_3263() /* ty=(Tensor[(9, 9, 6), float32],) */;
    %1194 = %1193.0;
    (%1194,)
  };
  %1195() /* ty=(Tensor[(9, 9, 6), float32],) */
}

def @func_2747(%var_2745: Tensor[(2880), float32]) -> (Tensor[(9, 9, 6), float32], Tensor[(2520), float64], Tensor[(2880), float32]) {
  @func_2744(%var_2745) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(2520), float64], Tensor[(2880), float32]) */
}

def @func_13124() -> (Tensor[(210), float64], Tensor[(9, 9, 6), float32]) {
  %1199 = fn () -> (Tensor[(210), float64], Tensor[(9, 9, 6), float32]) {
    %1196 = @func_8231() /* ty=(Tensor[(210), float64],) */;
    %1197 = %1196.0;
    %1198 = @func_8893() /* ty=Tensor[(9, 9, 6), float32] */;
    (%1197, %1198)
  };
  %1199() /* ty=(Tensor[(210), float64], Tensor[(9, 9, 6), float32]) */
}

def @func_1895(%var_1893: Tensor[(126), float64]) -> (Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(126), float64], Tensor[(15, 12, 14), int64]) {
  @func_1892(%var_1893) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(126), float64], Tensor[(15, 12, 14), int64]) */
}

def @func_12112() -> Tensor[(9, 9, 6), float32] {
  @func_7387() /* ty=Tensor[(9, 9, 6), float32] */
}

def @func_7597() -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(3, 42), bool]) {
  %1213 = fn () -> (Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(3, 42), bool]) {
    %1200 = @func_3829() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32]) */;
    %1201 = @func_5860() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(4, 480), float64], Tensor[(9, 9, 6), float32], Tensor[(45), float64], Tensor[(9, 9, 6), float32]) */;
    %1202 = cast(meta[relay.Constant][63] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
    %1203 = reshape(%1202, newshape=[3, 42]) /* ty=Tensor[(3, 42), float64] */;
    %1204 = @func_4074(%1203) /* ty=(Tensor[(9, 9, 6), float32], Tensor[(15, 12, 14), int64], Tensor[(3, 42), float64]) */;
    %1205 = %1204.2;
    %1206 = cast(meta[relay.Constant][63] /* ty=Tensor[(126), float64] */, dtype="bool") /* ty=Tensor[(126), bool] */;
    %1207 = shape_of(%1205, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1208 = cast(%1205, dtype="bool") /* ty=Tensor[(3, 42), bool] */;
    %1209 = dyn.reshape(%1206, %1207, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %1210 = %1200.0;
    %1211 = %1201.2;
    %1212 = logical_and(%1208, %1209) /* ty=Tensor[(3, 42), bool] */;
    (%1210, %1211, %1212)
  };
  %1213() /* ty=(Tensor[(9, 9, 6), float32], Tensor[(9, 9, 6), float32], Tensor[(3, 42), bool]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen545/build/output.py", line 4085, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:30:44] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

