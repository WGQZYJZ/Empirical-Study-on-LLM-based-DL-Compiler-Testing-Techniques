==========mod==========
#[version = "0.0.5"]
def @func_2611(%var_2603: Tensor[(728), float64], %var_2604: Tensor[(416), uint32], %var_2605: Tensor[(440), float64], %var_2608: Tensor[(52), uint32]) -> (Tensor[(3, 9, 7), float32], Tensor[(55, 4), bool], Tensor[(416), uint32], Tensor[(728), float64], Tensor[(416), uint32], Tensor[(440), float64], Tensor[(416), uint32], Tensor[(52), uint32], Tensor[(105), int8]) {
  %0 = @func_1157() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(55, 4), float32] */, dtype="float32") /* ty=Tensor[(55, 4), float32] */;
  %2 = reshape(%1, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), float32] */;
  %3 = @func_1197(%2) /* ty=Tensor[(2, 11, 10), float32] */;
  %4 = cast(%3, dtype="bool") /* ty=Tensor[(2, 11, 10), bool] */;
  %5 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(55, 4), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(55, 4), float32] */, dtype="bool") /* ty=Tensor[(55, 4), bool] */;
  %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %8 = cast(%var_2603, dtype="float64") /* ty=Tensor[(728), float64] */;
  %9 = cast(%var_2603, dtype="float64") /* ty=Tensor[(728), float64] */;
  %10 = cast(%var_2604, dtype="uint32") /* ty=Tensor[(416), uint32] */;
  %11 = cast(%var_2605, dtype="float64") /* ty=Tensor[(440), float64] */;
  %12 = reshape(%8, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), float64] */;
  %13 = reshape(%9, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), float64] */;
  %14 = reshape(%10, newshape=[416]) /* ty=Tensor[(416), uint32] */;
  %15 = reshape(%11, newshape=[440]) /* ty=Tensor[(440), float64] */;
  %16 = @func_1125(%12, %13, %14, %15) /* ty=(Tensor[(4, 14, 13), float64], Tensor[(416), uint32], Tensor[(21, 5), int8], Tensor[(13, 4), uint32], Tensor[(416), uint32], Tensor[(8, 52), uint32], Tensor[(440), float64], Tensor[(13, 4, 8), bool]) */;
  %17 = cast(%var_2608, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %18 = cast(meta[relay.Constant][1] /* ty=Tensor[(105), int8] */, dtype="int8") /* ty=Tensor[(105), int8] */;
  %19 = cast(%var_2604, dtype="uint32") /* ty=Tensor[(416), uint32] */;
  %20 = reshape(%17, newshape=[1, 52]) /* ty=Tensor[(1, 52), uint32] */;
  %21 = reshape(%18, newshape=[105]) /* ty=Tensor[(105), int8] */;
  %22 = reshape(%19, newshape=[416]) /* ty=Tensor[(416), uint32] */;
  %23 = @func_894(%20, %21, %22) /* ty=(Tensor[(8, 10, 5), float64], Tensor[(52), uint32], Tensor[(1, 52), uint32], Tensor[(13, 4, 8), bool], Tensor[(105), int8], Tensor[(416), uint32], Tensor[(13, 4, 8), bool]) */;
  %24 = %0.0;
  %25 = logical_and(%6, %7) /* ty=Tensor[(55, 4), bool] */;
  %26 = %16.4;
  %27 = %23.5;
  (%24, %25, %26, %var_2603, %var_2604, %var_2605, %27, %var_2608, meta[relay.Constant][1] /* ty=Tensor[(105), int8] */)
}

def @func_2691(%var_2679: Tensor[(3, 9, 7), float32]) -> Tensor[(3, 9, 7), float64] {
  %28 = @func_1212() /* ty=Tensor[(3, 9, 7), float32] */;
  %29 = cast(%var_2679, dtype="float64") /* ty=Tensor[(3, 9, 7), float64] */;
  %30 = shape_of(%28, dtype="int32") /* ty=Tensor[(3), int32] */;
  %31 = cast(%28, dtype="float64") /* ty=Tensor[(3, 9, 7), float64] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%31, %32) /* ty=Tensor[(3, 9, 7), float64] */
}

def @func_2375(%var_2230: Tensor[(3, 9, 7), float32], %var_2301: Tensor[(7, 10), int32], %var_2338: Tensor[(3, 9, 7), float32], %var_2360: Tensor[(3, 9, 7), float32]) -> (Tensor[(2, 11, 10), float32], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(440), float64], Tensor[(3, 9, 7), float64], Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(160), float32], Tensor[(416), uint32], Tensor[(3, 9, 7), float32], Tensor[(7, 10), int32], Tensor[(105), int8], Tensor[(416, 728), bool], Tensor[(3, 9, 7), float32], Tensor[(8, 5, 11), uint8], Tensor[(3, 9, 7), int32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), bool], Tensor[(3, 9, 7), float32], Tensor[(13, 4, 8), bool]) {
  %33 = @func_1764() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %34 = %33.0;
  %35 = cast(%34, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
  %36 = cast(meta[relay.Constant][2] /* ty=Tensor[(105), int8] */, dtype="int8") /* ty=Tensor[(105), int8] */;
  %37 = cast(meta[relay.Constant][3] /* ty=Tensor[(52), uint32] */, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %38 = cast(meta[relay.Constant][4] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %39 = cast(meta[relay.Constant][5] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %40 = reshape(%35, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float32] */;
  %41 = reshape(%36, newshape=[105]) /* ty=Tensor[(105), int8] */;
  %42 = reshape(%37, newshape=[52]) /* ty=Tensor[(52), uint32] */;
  %43 = reshape(%38, newshape=[5, 88]) /* ty=Tensor[(5, 88), float64] */;
  %44 = reshape(%39, newshape=[7, 104]) /* ty=Tensor[(7, 104), float64] */;
  %45 = @func_2161(%40, %41, %42, %43, %44) /* ty=(Tensor[(3, 9, 7), bool], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(8, 5, 11), float64], Tensor[(7, 104), float64], Tensor[(5, 88), uint64], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(110, 4), float32], Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(2, 11, 10), float32], Tensor[(2, 11, 10), float32], Tensor[(220, 416), int32], Tensor[(220, 52), bool]) */;
  %46 = cast(%var_2230, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
  %47 = atanh(%46) /* ty=Tensor[(3, 9, 7), float32] */;
  %48 = cast(%var_2230, dtype="uint16") /* ty=Tensor[(3, 9, 7), uint16] */;
  %49 = shape_of(%34, dtype="int32") /* ty=Tensor[(3), int32] */;
  %50 = cast(%34, dtype="uint16") /* ty=Tensor[(3, 9, 7), uint16] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %52 = multiply(%50, %51) /* ty=Tensor[(3, 9, 7), uint16] */;
  %53 = cast(%52, dtype="float64") /* ty=Tensor[(3, 9, 7), float64] */;
  %54 = shape_of(%47, dtype="int32") /* ty=Tensor[(3), int32] */;
  %55 = cast(%47, dtype="float64") /* ty=Tensor[(3, 9, 7), float64] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %57 = cast(%47, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
  %58 = cast(meta[relay.Constant][2] /* ty=Tensor[(105), int8] */, dtype="int8") /* ty=Tensor[(105), int8] */;
  %59 = cast(meta[relay.Constant][3] /* ty=Tensor[(52), uint32] */, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %60 = cast(meta[relay.Constant][4] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %61 = cast(meta[relay.Constant][5] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %62 = reshape(%57, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float32] */;
  %63 = reshape(%58, newshape=[105]) /* ty=Tensor[(105), int8] */;
  %64 = reshape(%59, newshape=[52]) /* ty=Tensor[(52), uint32] */;
  %65 = reshape(%60, newshape=[5, 88]) /* ty=Tensor[(5, 88), float64] */;
  %66 = reshape(%61, newshape=[7, 104]) /* ty=Tensor[(7, 104), float64] */;
  %67 = @func_2161(%62, %63, %64, %65, %66) /* ty=(Tensor[(3, 9, 7), bool], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(8, 5, 11), float64], Tensor[(7, 104), float64], Tensor[(5, 88), uint64], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(110, 4), float32], Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(2, 11, 10), float32], Tensor[(2, 11, 10), float32], Tensor[(220, 416), int32], Tensor[(220, 52), bool]) */;
  %68 = cast(meta[relay.Constant][6] /* ty=Tensor[(160), float32] */, dtype="float32") /* ty=Tensor[(160), float32] */;
  %69 = reshape(%68, newshape=[10, 2, 8]) /* ty=Tensor[(10, 2, 8), float32] */;
  %70 = cast(meta[relay.Constant][3] /* ty=Tensor[(52), uint32] */, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %71 = cast(meta[relay.Constant][2] /* ty=Tensor[(105), int8] */, dtype="int8") /* ty=Tensor[(105), int8] */;
  %72 = cast(meta[relay.Constant][7] /* ty=Tensor[(416, 1), uint32] */, dtype="uint32") /* ty=Tensor[(416, 1), uint32] */;
  %73 = reshape(%70, newshape=[1, 52]) /* ty=Tensor[(1, 52), uint32] */;
  %74 = reshape(%71, newshape=[105]) /* ty=Tensor[(105), int8] */;
  %75 = reshape(%72, newshape=[416]) /* ty=Tensor[(416), uint32] */;
  %76 = @func_894(%73, %74, %75) /* ty=(Tensor[(8, 10, 5), float64], Tensor[(52), uint32], Tensor[(1, 52), uint32], Tensor[(13, 4, 8), bool], Tensor[(105), int8], Tensor[(416), uint32], Tensor[(13, 4, 8), bool]) */;
  %77 = cast(%var_2301, dtype="int32") /* ty=Tensor[(7, 10), int32] */;
  %78 = reshape(%77, newshape=[5, 7, 2]) /* ty=Tensor[(5, 7, 2), int32] */;
  %79 = @func_1890(%78) /* ty=(Tensor[(5, 7, 2), int32], Tensor[(3, 9, 7), float32]) */;
  %80 = %79.1;
  %81 = cast(%80, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
  %82 = cast(meta[relay.Constant][2] /* ty=Tensor[(105), int8] */, dtype="int8") /* ty=Tensor[(105), int8] */;
  %83 = cast(meta[relay.Constant][3] /* ty=Tensor[(52), uint32] */, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %84 = cast(meta[relay.Constant][4] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %85 = cast(meta[relay.Constant][5] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %86 = reshape(%81, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float32] */;
  %87 = reshape(%82, newshape=[105]) /* ty=Tensor[(105), int8] */;
  %88 = reshape(%83, newshape=[52]) /* ty=Tensor[(52), uint32] */;
  %89 = reshape(%84, newshape=[5, 88]) /* ty=Tensor[(5, 88), float64] */;
  %90 = reshape(%85, newshape=[7, 104]) /* ty=Tensor[(7, 104), float64] */;
  %91 = @func_2161(%86, %87, %88, %89, %90) /* ty=(Tensor[(3, 9, 7), bool], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(8, 5, 11), float64], Tensor[(7, 104), float64], Tensor[(5, 88), uint64], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(110, 4), float32], Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(2, 11, 10), float32], Tensor[(2, 11, 10), float32], Tensor[(220, 416), int32], Tensor[(220, 52), bool]) */;
  %92 = cast(meta[relay.Constant][5] /* ty=Tensor[(728), float64] */, dtype="bool") /* ty=Tensor[(728), bool] */;
  %93 = cast(meta[relay.Constant][7] /* ty=Tensor[(416, 1), uint32] */, dtype="bool") /* ty=Tensor[(416, 1), bool] */;
  %94 = @func_1764() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %95 = cast(meta[relay.Constant][4] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %96 = cast(meta[relay.Constant][4] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %97 = reshape(%95, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
  %98 = reshape(%96, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
  %99 = @func_769(%97, %98) /* ty=(Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(8, 52), uint32], Tensor[(8, 5, 11), bool], Tensor[(8, 5, 11), uint8], Tensor[(8, 5, 11), float64]) */;
  %100 = cast(%var_2338, dtype="int32") /* ty=Tensor[(3, 9, 7), int32] */;
  %101 = shape_of(%47, dtype="int32") /* ty=Tensor[(3), int32] */;
  %102 = cast(%47, dtype="int32") /* ty=Tensor[(3, 9, 7), int32] */;
  %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %104 = @func_1157() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %105 = cast(%var_2360, dtype="bool") /* ty=Tensor[(3, 9, 7), bool] */;
  %106 = shape_of(%47, dtype="int32") /* ty=Tensor[(3), int32] */;
  %107 = cast(%47, dtype="bool") /* ty=Tensor[(3, 9, 7), bool] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %109 = @func_1721() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(160), float32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) */;
  %110 = cast(meta[relay.Constant][3] /* ty=Tensor[(52), uint32] */, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %111 = reshape(%110, newshape=[52]) /* ty=Tensor[(52), uint32] */;
  %112 = @func_477(%111) /* ty=(Tensor[(7, 14, 14), bool], Tensor[(7, 14, 14), bool], Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(416), uint32], Tensor[(13, 4, 8), bool]) */;
  %113 = %45.12;
  %114 = floor_divide(%55, %56) /* ty=Tensor[(3, 9, 7), float64] */;
  %115 = %67.6;
  %116 = @func_1664(%69) /* ty=Tensor[(10, 2, 8), float32] */;
  %117 = %76.5;
  %118 = %91.1;
  %119 = logical_or(%92, %93) /* ty=Tensor[(416, 728), bool] */;
  %120 = %94.0;
  %121 = %99.4;
  %122 = minimum(%102, %103) /* ty=Tensor[(3, 9, 7), int32] */;
  %123 = %104.0;
  %124 = logical_and(%107, %108) /* ty=Tensor[(3, 9, 7), bool] */;
  %125 = %109.4;
  %126 = %112.5;
  (%113, meta[relay.Constant][2] /* ty=Tensor[(105), int8] */, meta[relay.Constant][3] /* ty=Tensor[(52), uint32] */, meta[relay.Constant][4] /* ty=Tensor[(440), float64] */, %114, %115, %116, meta[relay.Constant][6] /* ty=Tensor[(160), float32] */, %117, %80, %var_2301, %118, %119, %120, %121, %122, %123, %124, %125, %126)
}

def @func_3464() -> (Tensor[(3, 9, 7), float32],) {
  %127 = @func_1819() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %128 = %127.0;
  (%128,)
}

def @main(%var_6570: Tensor[(1, 11, 12), int8], %var_6571: Tensor[(2, 11, 12), int8]) -> Tensor[(2, 11, 12), int8] {
  %129 = cast(%var_6570, dtype="int8") /* ty=Tensor[(1, 11, 12), int8] */;
  %130 = cast(%var_6571, dtype="int8") /* ty=Tensor[(2, 11, 12), int8] */;
  bitwise_xor(%129, %130) /* ty=Tensor[(2, 11, 12), int8] */
}

def @func_4857() -> (Tensor[(3, 9, 7), float32], Tensor[(52), uint32], Tensor[(13, 4, 8), bool], Tensor[(3, 9, 7), float32]) {
  %131 = cast(meta[relay.Constant][8] /* ty=Tensor[(52), uint32] */, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %132 = cast(meta[relay.Constant][9] /* ty=Tensor[(416), uint32] */, dtype="uint32") /* ty=Tensor[(416), uint32] */;
  %133 = reshape(%131, newshape=[13, 4, 1]) /* ty=Tensor[(13, 4, 1), uint32] */;
  %134 = reshape(%132, newshape=[13, 4, 8]) /* ty=Tensor[(13, 4, 8), uint32] */;
  %135 = @func_420(%133, %134) /* ty=(Tensor[(13, 4, 8), bool],) */;
  %136 = %135.0;
  %137 = cast(meta[relay.Constant][9] /* ty=Tensor[(416), uint32] */, dtype="bool") /* ty=Tensor[(416), bool] */;
  %138 = shape_of(%136, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(%136, dtype="bool") /* ty=Tensor[(13, 4, 8), bool] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %141 = @func_1764() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %142 = @func_2721() /* ty=Tensor[(3, 9, 7), float32] */;
  %143 = logical_or(%139, %140) /* ty=Tensor[(13, 4, 8), bool] */;
  %144 = %141.0;
  (%142, meta[relay.Constant][8] /* ty=Tensor[(52), uint32] */, %143, %144)
}

def @func_1279(%var_1270: Tensor[(3, 9, 7), float32]) -> Tensor[(3, 9, 7), float32] {
  %145 = @func_1157() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %146 = %145.0;
  %147 = cast(%var_1270, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
  %148 = shape_of(%146, dtype="int32") /* ty=Tensor[(3), int32] */;
  %149 = cast(%146, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%149, %150) /* ty=Tensor[(3, 9, 7), float32] */
}

def @func_4563(%var_4552: Tensor[(416), uint32], %var_4553: Tensor[(440), float64]) -> (Tensor[(3, 9, 7), float32], Tensor[(21, 5), int8], Tensor[(728), float64], Tensor[(416), uint32], Tensor[(440), float64]) {
  %151 = cast(meta[relay.Constant][10] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %152 = cast(meta[relay.Constant][10] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %153 = cast(%var_4552, dtype="uint32") /* ty=Tensor[(416), uint32] */;
  %154 = cast(%var_4553, dtype="float64") /* ty=Tensor[(440), float64] */;
  %155 = reshape(%151, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), float64] */;
  %156 = reshape(%152, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), float64] */;
  %157 = reshape(%153, newshape=[416]) /* ty=Tensor[(416), uint32] */;
  %158 = reshape(%154, newshape=[440]) /* ty=Tensor[(440), float64] */;
  %159 = @func_1125(%155, %156, %157, %158) /* ty=(Tensor[(4, 14, 13), float64], Tensor[(416), uint32], Tensor[(21, 5), int8], Tensor[(13, 4), uint32], Tensor[(416), uint32], Tensor[(8, 52), uint32], Tensor[(440), float64], Tensor[(13, 4, 8), bool]) */;
  %160 = @func_3431() /* ty=Tensor[(3, 9, 7), float32] */;
  %161 = %159.2;
  (%160, %161, meta[relay.Constant][10] /* ty=Tensor[(728), float64] */, %var_4552, %var_4553)
}

def @func_6186(%var_6181: Tensor[(5, 13, 2), float32]) -> Tensor[(5, 13, 2), float32] {
  %162 = cast(%var_6181, dtype="float32") /* ty=Tensor[(5, 13, 2), float32] */;
  erf(%162) /* ty=Tensor[(5, 13, 2), float32] */
}

def @func_4669(%var_4655: Tensor[(10, 5, 13), float64], %var_4661: Tensor[(144), int8], %var_4663: Tensor[(52), uint32]) -> (Tensor[(10, 5, 13), float64], Tensor[(3, 9, 7), float32], Tensor[(8, 3, 6), bool], Tensor[(144), int8], Tensor[(1, 105), int8], Tensor[(52), uint32]) {
  %163 = cast(%var_4655, dtype="float64") /* ty=Tensor[(10, 5, 13), float64] */;
  %164 = cast(%var_4661, dtype="int8") /* ty=Tensor[(144), int8] */;
  %165 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 105), int8] */, dtype="int8") /* ty=Tensor[(1, 105), int8] */;
  %166 = cast(%var_4663, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %167 = reshape(%164, newshape=[8, 3, 6]) /* ty=Tensor[(8, 3, 6), int8] */;
  %168 = reshape(%165, newshape=[21, 5]) /* ty=Tensor[(21, 5), int8] */;
  %169 = reshape(%166, newshape=[52]) /* ty=Tensor[(52), uint32] */;
  %170 = @func_3058(%167, %168, %169) /* ty=(Tensor[(8, 3, 6), bool], Tensor[(13, 4, 8), bool], Tensor[(21, 5), int8], Tensor[(52), uint32], Tensor[(416), uint32]) */;
  %171 = cosh(%163) /* ty=Tensor[(10, 5, 13), float64] */;
  %172 = @func_1811() /* ty=Tensor[(3, 9, 7), float32] */;
  %173 = %170.0;
  (%171, %172, %173, %var_4661, meta[relay.Constant][11] /* ty=Tensor[(1, 105), int8] */, %var_4663)
}

def @func_3431() -> Tensor[(3, 9, 7), float32] {
  %174 = @func_1046() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %174.0
}

def @func_5890() -> Tensor[(3, 9, 7), float32] {
  %175 = @func_3821() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) */;
  %175.1
}

def @func_5192(%var_5162: Tensor[(5, 8, 2), float32], %var_5173: Tensor[(252), uint16]) -> (Tensor[(5, 8, 2), float32], Tensor[(3, 9, 7), float32], Tensor[(252), uint16], Tensor[(3, 9, 7), float32], Tensor[(5, 8, 2), float32]) {
  %176 = cast(%var_5162, dtype="float32") /* ty=Tensor[(5, 8, 2), float32] */;
  %177 = cast(%var_5173, dtype="uint16") /* ty=Tensor[(252), uint16] */;
  %178 = reshape(%177, newshape=[252]) /* ty=Tensor[(252), uint16] */;
  %179 = @func_4881(%178) /* ty=(Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(252), uint16], Tensor[(3, 9, 7), float32]) */;
  %180 = cast(%var_5162, dtype="float32") /* ty=Tensor[(5, 8, 2), float32] */;
  %181 = acos(%176) /* ty=Tensor[(5, 8, 2), float32] */;
  %182 = %179.3;
  %183 = @func_5133() /* ty=Tensor[(3, 9, 7), float32] */;
  %184 = log2(%180) /* ty=Tensor[(5, 8, 2), float32] */;
  (%181, %182, %var_5173, %183, %184)
}

def @func_4973() -> (Tensor[(3, 9, 7), float32],) {
  %185 = @func_4857() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(52), uint32], Tensor[(13, 4, 8), bool], Tensor[(3, 9, 7), float32]) */;
  %186 = %185.3;
  (%186,)
}

def @func_4126() -> (Tensor[(52), uint32], Tensor[(3, 9, 7), float32]) {
  %187 = @func_3591() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(52), uint32], Tensor[(52), uint32]) */;
  %188 = %187.1;
  %189 = @func_1832() /* ty=Tensor[(3, 9, 7), float32] */;
  (%188, %189)
}

def @func_5133() -> Tensor[(3, 9, 7), float32] {
  @func_1212() /* ty=Tensor[(3, 9, 7), float32] */
}

def @func_4694() -> (Tensor[(3, 9, 7), float32],) {
  %190 = @func_1819() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %191 = %190.0;
  (%191,)
}

def @func_1721() -> (Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(160), float32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) {
  %192 = @func_1046() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %193 = cast(meta[relay.Constant][12] /* ty=Tensor[(160), float32] */, dtype="float32") /* ty=Tensor[(160), float32] */;
  %194 = reshape(%193, newshape=[10, 2, 8]) /* ty=Tensor[(10, 2, 8), float32] */;
  %195 = @func_1157() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %196 = %192.0;
  %197 = @func_1664(%194) /* ty=Tensor[(10, 2, 8), float32] */;
  %198 = %195.0;
  %199 = @func_1212() /* ty=Tensor[(3, 9, 7), float32] */;
  (%196, %197, meta[relay.Constant][12] /* ty=Tensor[(160), float32] */, %198, %199)
}

def @func_5550(%var_5500: Tensor[(7, 13, 10), float32], %var_5510: Tensor[(7, 13, 10), float32]) -> (Tensor[(7, 13, 10), int32], Tensor[(7, 13, 10), float64], Tensor[(52), uint32], Tensor[(7, 13, 10), bool]) {
  %200 = cast(%var_5500, dtype="float32") /* ty=Tensor[(7, 13, 10), float32] */;
  %201 = asin(%200) /* ty=Tensor[(7, 13, 10), float32] */;
  %202 = cast(%var_5510, dtype="int32") /* ty=Tensor[(7, 13, 10), int32] */;
  %203 = shape_of(%201, dtype="int32") /* ty=Tensor[(3), int32] */;
  %204 = cast(%201, dtype="int32") /* ty=Tensor[(7, 13, 10), int32] */;
  %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %206 = cast(%201, dtype="float64") /* ty=Tensor[(7, 13, 10), float64] */;
  %207 = sinh(%206) /* ty=Tensor[(7, 13, 10), float64] */;
  %208 = cast(%201, dtype="float64") /* ty=Tensor[(7, 13, 10), float64] */;
  %209 = shape_of(%207, dtype="int32") /* ty=Tensor[(3), int32] */;
  %210 = cast(%207, dtype="float64") /* ty=Tensor[(7, 13, 10), float64] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %212 = cast(%201, dtype="bool") /* ty=Tensor[(7, 13, 10), bool] */;
  %213 = shape_of(%207, dtype="int32") /* ty=Tensor[(3), int32] */;
  %214 = cast(%207, dtype="bool") /* ty=Tensor[(7, 13, 10), bool] */;
  %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %216 = right_shift(%204, %205) /* ty=Tensor[(7, 13, 10), int32] */;
  %217 = floor_mod(%210, %211) /* ty=Tensor[(7, 13, 10), float64] */;
  %218 = @func_5220() /* ty=Tensor[(52), uint32] */;
  %219 = less(%214, %215) /* ty=Tensor[(7, 13, 10), bool] */;
  (%216, %217, %218, %219)
}

def @func_5389(%var_5353: Tensor[(66, 9), float32], %var_5373: Tensor[(150), uint64], %var_5383: Tensor[(252), uint16]) -> (Tensor[(3, 9, 7), float32], Tensor[(7, 10), int32], Tensor[(2, 15, 5), uint64], Tensor[(150), uint64], Tensor[(10, 2, 8), float32], Tensor[(252), uint16], Tensor[(66, 9), bool]) {
  %220 = @func_4126() /* ty=(Tensor[(52), uint32], Tensor[(3, 9, 7), float32]) */;
  %221 = cast(%var_5353, dtype="float32") /* ty=Tensor[(66, 9), float32] */;
  %222 = reshape(%221, newshape=[11, 6, 9]) /* ty=Tensor[(11, 6, 9), float32] */;
  %223 = @func_4446(%222) /* ty=(Tensor[(11, 6, 9), bool], Tensor[(10, 2, 8), float32], Tensor[(189), float32], Tensor[(7, 10), int32]) */;
  %224 = cast(%var_5373, dtype="uint64") /* ty=Tensor[(150), uint64] */;
  %225 = reshape(%224, newshape=[2, 15, 5]) /* ty=Tensor[(2, 15, 5), uint64] */;
  %226 = cast(%var_5383, dtype="uint16") /* ty=Tensor[(252), uint16] */;
  %227 = cast(%var_5383, dtype="uint16") /* ty=Tensor[(252), uint16] */;
  %228 = reshape(%226, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), uint16] */;
  %229 = reshape(%227, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), uint16] */;
  %230 = @func_3377(%228, %229) /* ty=(Tensor[(3, 7, 12), uint16], Tensor[(10, 2, 8), float32], Tensor[(160), float32]) */;
  %231 = cast(%var_5353, dtype="float64") /* ty=Tensor[(66, 9), float64] */;
  %232 = rsqrt(%231) /* ty=Tensor[(66, 9), float64] */;
  %233 = cast(%var_5353, dtype="bool") /* ty=Tensor[(66, 9), bool] */;
  %234 = shape_of(%232, dtype="int32") /* ty=Tensor[(2), int32] */;
  %235 = cast(%232, dtype="bool") /* ty=Tensor[(66, 9), bool] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %237 = %220.1;
  %238 = %223.3;
  %239 = @func_4771(%225) /* ty=Tensor[(2, 15, 5), uint64] */;
  %240 = %230.1;
  %241 = equal(%235, %236) /* ty=Tensor[(66, 9), bool] */;
  (%237, %238, %239, %var_5373, %240, %var_5383, %241)
}

def @func_4446(%var_4431: Tensor[(11, 6, 9), float32]) -> (Tensor[(11, 6, 9), bool], Tensor[(10, 2, 8), float32], Tensor[(189), float32], Tensor[(7, 10), int32]) {
  %242 = cast(%var_4431, dtype="float32") /* ty=Tensor[(11, 6, 9), float32] */;
  %243 = asinh(%242) /* ty=Tensor[(11, 6, 9), float32] */;
  %244 = cast(%243, dtype="bool") /* ty=Tensor[(11, 6, 9), bool] */;
  %245 = shape_of(%var_4431, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(%var_4431, dtype="bool") /* ty=Tensor[(11, 6, 9), bool] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %248 = cast(meta[relay.Constant][13] /* ty=Tensor[(189), float32] */, dtype="float32") /* ty=Tensor[(189), float32] */;
  %249 = cast(meta[relay.Constant][14] /* ty=Tensor[(7, 10), int32] */, dtype="int32") /* ty=Tensor[(7, 10), int32] */;
  %250 = cast(meta[relay.Constant][13] /* ty=Tensor[(189), float32] */, dtype="float32") /* ty=Tensor[(189), float32] */;
  %251 = cast(meta[relay.Constant][13] /* ty=Tensor[(189), float32] */, dtype="float32") /* ty=Tensor[(189), float32] */;
  %252 = reshape(%248, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float32] */;
  %253 = reshape(%249, newshape=[7, 10]) /* ty=Tensor[(7, 10), int32] */;
  %254 = reshape(%250, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float32] */;
  %255 = reshape(%251, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float32] */;
  %256 = @func_2375(%252, %253, %254, %255) /* ty=(Tensor[(2, 11, 10), float32], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(440), float64], Tensor[(3, 9, 7), float64], Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(160), float32], Tensor[(416), uint32], Tensor[(3, 9, 7), float32], Tensor[(7, 10), int32], Tensor[(105), int8], Tensor[(416, 728), bool], Tensor[(3, 9, 7), float32], Tensor[(8, 5, 11), uint8], Tensor[(3, 9, 7), int32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), bool], Tensor[(3, 9, 7), float32], Tensor[(13, 4, 8), bool]) */;
  %257 = greater(%246, %247) /* ty=Tensor[(11, 6, 9), bool] */;
  %258 = %256.6;
  (%257, %258, meta[relay.Constant][13] /* ty=Tensor[(189), float32] */, meta[relay.Constant][14] /* ty=Tensor[(7, 10), int32] */)
}

def @func_3903(%var_3886: Tensor[(70), int32]) -> (Tensor[(3, 9, 7), float32], Tensor[(52), bool], Tensor[(5, 7, 2), int32], Tensor[(70), int32]) {
  %259 = @func_3591() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(52), uint32], Tensor[(52), uint32]) */;
  %260 = %259.2;
  %261 = cast(meta[relay.Constant][15] /* ty=Tensor[(52), uint32] */, dtype="bool") /* ty=Tensor[(52), bool] */;
  %262 = shape_of(%260, dtype="int32") /* ty=Tensor[(1), int32] */;
  %263 = cast(%260, dtype="bool") /* ty=Tensor[(52), bool] */;
  %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?), bool] */;
  %265 = cast(%var_3886, dtype="int32") /* ty=Tensor[(70), int32] */;
  %266 = reshape(%265, newshape=[5, 7, 2]) /* ty=Tensor[(5, 7, 2), int32] */;
  %267 = @func_1890(%266) /* ty=(Tensor[(5, 7, 2), int32], Tensor[(3, 9, 7), float32]) */;
  %268 = @func_3431() /* ty=Tensor[(3, 9, 7), float32] */;
  %269 = logical_and(%263, %264) /* ty=Tensor[(52), bool] */;
  %270 = %267.0;
  (%268, %269, %270, %var_3886)
}

def @func_1811() -> Tensor[(3, 9, 7), float32] {
  %271 = @func_1764() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %271.0
}

def @func_3058(%var_3036: Tensor[(8, 3, 6), int8], %var_3054: Tensor[(21, 5), int8], %var_3055: Tensor[(52), uint32]) -> (Tensor[(8, 3, 6), bool], Tensor[(13, 4, 8), bool], Tensor[(21, 5), int8], Tensor[(52), uint32], Tensor[(416), uint32]) {
  %272 = cast(meta[relay.Constant][16] /* ty=Tensor[(8, 3, 6), int8] */, dtype="bool") /* ty=Tensor[(8, 3, 6), bool] */;
  %273 = shape_of(%var_3036, dtype="int32") /* ty=Tensor[(3), int32] */;
  %274 = cast(%var_3036, dtype="bool") /* ty=Tensor[(8, 3, 6), bool] */;
  %275 = dyn.reshape(%272, %273, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %276 = cast(%var_3054, dtype="int8") /* ty=Tensor[(21, 5), int8] */;
  %277 = cast(%var_3055, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %278 = cast(meta[relay.Constant][17] /* ty=Tensor[(416), uint32] */, dtype="uint32") /* ty=Tensor[(416), uint32] */;
  %279 = reshape(%276, newshape=[5, 3, 7]) /* ty=Tensor[(5, 3, 7), int8] */;
  %280 = reshape(%277, newshape=[52, 1]) /* ty=Tensor[(52, 1), uint32] */;
  %281 = reshape(%278, newshape=[416]) /* ty=Tensor[(416), uint32] */;
  %282 = @func_597(%279, %280, %281) /* ty=(Tensor[(5, 3, 7), int8], Tensor[(13, 4, 8), bool], Tensor[(416), uint32], Tensor[(52), bool]) */;
  %283 = equal(%274, %275) /* ty=Tensor[(8, 3, 6), bool] */;
  %284 = %282.1;
  (%283, %284, %var_3054, %var_3055, meta[relay.Constant][17] /* ty=Tensor[(416), uint32] */)
}

def @func_4603() -> (Tensor[(3, 9, 7), float32],) {
  %285 = @func_3464() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %286 = %285.0;
  (%286,)
}

def @func_5072() -> Tensor[(160), float32] {
  %287 = @func_1721() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(160), float32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) */;
  %287.2
}

def @func_894(%var_861: Tensor[(1, 52), uint32], %var_865: Tensor[(105), int8], %var_866: Tensor[(416), uint32]) -> (Tensor[(8, 10, 5), float64], Tensor[(52), uint32], Tensor[(1, 52), uint32], Tensor[(13, 4, 8), bool], Tensor[(105), int8], Tensor[(416), uint32], Tensor[(13, 4, 8), bool]) {
  %288 = cast(meta[relay.Constant][18] /* ty=Tensor[(8, 10, 5), float64] */, dtype="float64") /* ty=Tensor[(8, 10, 5), float64] */;
  %289 = cast(%var_861, dtype="uint32") /* ty=Tensor[(1, 52), uint32] */;
  %290 = reshape(%289, newshape=[52]) /* ty=Tensor[(52), uint32] */;
  %291 = @func_477(%290) /* ty=(Tensor[(7, 14, 14), bool], Tensor[(7, 14, 14), bool], Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(416), uint32], Tensor[(13, 4, 8), bool]) */;
  %292 = cast(%var_865, dtype="int8") /* ty=Tensor[(105), int8] */;
  %293 = cast(%var_861, dtype="uint32") /* ty=Tensor[(1, 52), uint32] */;
  %294 = cast(%var_866, dtype="uint32") /* ty=Tensor[(416), uint32] */;
  %295 = reshape(%292, newshape=[5, 3, 7]) /* ty=Tensor[(5, 3, 7), int8] */;
  %296 = reshape(%293, newshape=[52, 1]) /* ty=Tensor[(52, 1), uint32] */;
  %297 = reshape(%294, newshape=[416]) /* ty=Tensor[(416), uint32] */;
  %298 = @func_597(%295, %296, %297) /* ty=(Tensor[(5, 3, 7), int8], Tensor[(13, 4, 8), bool], Tensor[(416), uint32], Tensor[(52), bool]) */;
  %299 = cast(%var_861, dtype="uint32") /* ty=Tensor[(1, 52), uint32] */;
  %300 = cast(%var_866, dtype="uint32") /* ty=Tensor[(416), uint32] */;
  %301 = reshape(%299, newshape=[13, 4, 1]) /* ty=Tensor[(13, 4, 1), uint32] */;
  %302 = reshape(%300, newshape=[13, 4, 8]) /* ty=Tensor[(13, 4, 8), uint32] */;
  %303 = @func_420(%301, %302) /* ty=(Tensor[(13, 4, 8), bool],) */;
  %304 = atan(%288) /* ty=Tensor[(8, 10, 5), float64] */;
  %305 = %291.3;
  %306 = %298.1;
  %307 = %303.0;
  (%304, %305, %var_861, %306, %var_865, %var_866, %307)
}

def @func_4386(%var_4376: Tensor[(52), uint32], %var_4377: Tensor[(105), int8], %var_4378: Tensor[(416), uint32]) -> (Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(416), uint32], Tensor[(52), uint32], Tensor[(105), int8], Tensor[(416), uint32]) {
  %308 = @func_1157() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %309 = @func_1764() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %310 = cast(%var_4376, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %311 = cast(%var_4377, dtype="int8") /* ty=Tensor[(105), int8] */;
  %312 = cast(%var_4378, dtype="uint32") /* ty=Tensor[(416), uint32] */;
  %313 = reshape(%310, newshape=[1, 52]) /* ty=Tensor[(1, 52), uint32] */;
  %314 = reshape(%311, newshape=[105]) /* ty=Tensor[(105), int8] */;
  %315 = reshape(%312, newshape=[416]) /* ty=Tensor[(416), uint32] */;
  %316 = @func_894(%313, %314, %315) /* ty=(Tensor[(8, 10, 5), float64], Tensor[(52), uint32], Tensor[(1, 52), uint32], Tensor[(13, 4, 8), bool], Tensor[(105), int8], Tensor[(416), uint32], Tensor[(13, 4, 8), bool]) */;
  %317 = %308.0;
  %318 = %309.0;
  %319 = %316.5;
  (%317, %318, %319, %var_4376, %var_4377, %var_4378)
}

def @func_1961(%var_1953: Tensor[(3, 9, 7), float32]) -> (Tensor[(160), float32], Tensor[(440), float64], Tensor[(220), float32], Tensor[(728), float64], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float64], Tensor[(3, 9, 7), uint8], Tensor[(3, 9, 7), float32]) {
  %320 = @func_1721() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(160), float32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) */;
  %321 = cast(meta[relay.Constant][19] /* ty=Tensor[(220), float32] */, dtype="float32") /* ty=Tensor[(220), float32] */;
  %322 = cast(meta[relay.Constant][20] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %323 = reshape(%321, newshape=[220]) /* ty=Tensor[(220), float32] */;
  %324 = reshape(%322, newshape=[728]) /* ty=Tensor[(728), float64] */;
  %325 = @func_1542(%323, %324) /* ty=(Tensor[(3, 9, 7), float32], Tensor[(2, 11, 10), float32], Tensor[(220), float32], Tensor[(2, 11, 10), float32], Tensor[(440), float64], Tensor[(728), float64], Tensor[(416), uint32], Tensor[(110, 4), float64], Tensor[(3, 9, 7), float32], Tensor[(10, 2, 16), float32], Tensor[(4, 80), bool], Tensor[(5, 3, 7), int8], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(3, 9, 7), float32], Tensor[(8, 5, 11), bool], Tensor[(8, 5, 11), float32], Tensor[(8, 5, 11), float32]) */;
  %326 = @func_1157() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %327 = @func_1157() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %328 = %327.0;
  %329 = cast(%328, dtype="float64") /* ty=Tensor[(3, 9, 7), float64] */;
  %330 = cast(%328, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
  %331 = erf(%330) /* ty=Tensor[(3, 9, 7), float32] */;
  %332 = cast(%var_1953, dtype="uint8") /* ty=Tensor[(3, 9, 7), uint8] */;
  %333 = shape_of(%331, dtype="int32") /* ty=Tensor[(3), int32] */;
  %334 = cast(%331, dtype="uint8") /* ty=Tensor[(3, 9, 7), uint8] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %336 = cast(%var_1953, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
  %337 = reshape(%336, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float32] */;
  %338 = %320.2;
  %339 = %325.4;
  %340 = %326.0;
  %341 = exp(%329) /* ty=Tensor[(3, 9, 7), float64] */;
  %342 = logical_xor(%334, %335) /* ty=Tensor[(3, 9, 7), uint8] */;
  %343 = @func_1279(%337) /* ty=Tensor[(3, 9, 7), float32] */;
  (%338, %339, meta[relay.Constant][19] /* ty=Tensor[(220), float32] */, meta[relay.Constant][20] /* ty=Tensor[(728), float64] */, %340, %341, %342, %343)
}

def @func_3725(%var_3697: Tensor[(1, 728), float64]) -> (Tensor[(3, 9, 7), float32], Tensor[(220, 52), bool], Tensor[(105, 1), int8], Tensor[(52), uint32], Tensor[(5, 88), float64], Tensor[(1, 728), float64], Tensor[(3, 9, 7), float32]) {
  %344 = @func_3068() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %345 = %344.0;
  %346 = cast(%345, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
  %347 = cast(meta[relay.Constant][21] /* ty=Tensor[(105, 1), int8] */, dtype="int8") /* ty=Tensor[(105, 1), int8] */;
  %348 = cast(meta[relay.Constant][22] /* ty=Tensor[(52), uint32] */, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %349 = cast(meta[relay.Constant][23] /* ty=Tensor[(5, 88), float64] */, dtype="float64") /* ty=Tensor[(5, 88), float64] */;
  %350 = cast(%var_3697, dtype="float64") /* ty=Tensor[(1, 728), float64] */;
  %351 = reshape(%346, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float32] */;
  %352 = reshape(%347, newshape=[105]) /* ty=Tensor[(105), int8] */;
  %353 = reshape(%348, newshape=[52]) /* ty=Tensor[(52), uint32] */;
  %354 = reshape(%349, newshape=[5, 88]) /* ty=Tensor[(5, 88), float64] */;
  %355 = reshape(%350, newshape=[7, 104]) /* ty=Tensor[(7, 104), float64] */;
  %356 = @func_2161(%351, %352, %353, %354, %355) /* ty=(Tensor[(3, 9, 7), bool], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(8, 5, 11), float64], Tensor[(7, 104), float64], Tensor[(5, 88), uint64], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(110, 4), float32], Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(2, 11, 10), float32], Tensor[(2, 11, 10), float32], Tensor[(220, 416), int32], Tensor[(220, 52), bool]) */;
  %357 = @func_3068() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %358 = %356.14;
  %359 = %357.0;
  (%345, %358, meta[relay.Constant][21] /* ty=Tensor[(105, 1), int8] */, meta[relay.Constant][22] /* ty=Tensor[(52), uint32] */, meta[relay.Constant][23] /* ty=Tensor[(5, 88), float64] */, %var_3697, %359)
}

def @func_4755() -> (Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) {
  %360 = @func_4728() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %361 = %360.0;
  %362 = @func_1811() /* ty=Tensor[(3, 9, 7), float32] */;
  (%361, %362)
}

def @func_5814() -> Tensor[(3, 9, 7), float32] {
  @func_4629() /* ty=Tensor[(3, 9, 7), float32] */
}

def @func_1764() -> (Tensor[(3, 9, 7), float32],) {
  %363 = @func_1212() /* ty=Tensor[(3, 9, 7), float32] */;
  (%363,)
}

def @func_1046() -> (Tensor[(3, 9, 7), float32],) {
  %364 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 9, 7), float32] */, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
  %365 = acos(%364) /* ty=Tensor[(3, 9, 7), float32] */;
  (%365,)
}

def @func_769(%var_699: Tensor[(8, 5, 11), float64], %var_737: Tensor[(8, 5, 11), float64]) -> (Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(8, 52), uint32], Tensor[(8, 5, 11), bool], Tensor[(8, 5, 11), uint8], Tensor[(8, 5, 11), float64]) {
  %366 = cast(meta[relay.Constant][25] /* ty=Tensor[(52), uint32] */, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %367 = cast(meta[relay.Constant][26] /* ty=Tensor[(8, 52), uint32] */, dtype="uint32") /* ty=Tensor[(8, 52), uint32] */;
  %368 = reshape(%366, newshape=[13, 4, 1]) /* ty=Tensor[(13, 4, 1), uint32] */;
  %369 = reshape(%367, newshape=[13, 4, 8]) /* ty=Tensor[(13, 4, 8), uint32] */;
  %370 = @func_420(%368, %369) /* ty=(Tensor[(13, 4, 8), bool],) */;
  %371 = cast(%var_699, dtype="float64") /* ty=Tensor[(8, 5, 11), float64] */;
  %372 = tan(%371) /* ty=Tensor[(8, 5, 11), float64] */;
  %373 = cast(%372, dtype="int64") /* ty=Tensor[(8, 5, 11), int64] */;
  %374 = shape_of(%var_699, dtype="int32") /* ty=Tensor[(3), int32] */;
  %375 = cast(%var_699, dtype="int64") /* ty=Tensor[(8, 5, 11), int64] */;
  %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %377 = left_shift(%375, %376) /* ty=Tensor[(8, 5, 11), int64] */;
  %378 = cast(%377, dtype="float64") /* ty=Tensor[(8, 5, 11), float64] */;
  %379 = cos(%378) /* ty=Tensor[(8, 5, 11), float64] */;
  %380 = cast(%var_737, dtype="bool") /* ty=Tensor[(8, 5, 11), bool] */;
  %381 = shape_of(%379, dtype="int32") /* ty=Tensor[(3), int32] */;
  %382 = cast(%379, dtype="bool") /* ty=Tensor[(8, 5, 11), bool] */;
  %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %384 = cast(%var_699, dtype="uint8") /* ty=Tensor[(8, 5, 11), uint8] */;
  %385 = shape_of(%379, dtype="int32") /* ty=Tensor[(3), int32] */;
  %386 = cast(%379, dtype="uint8") /* ty=Tensor[(8, 5, 11), uint8] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %388 = cast(%372, dtype="float64") /* ty=Tensor[(8, 5, 11), float64] */;
  %389 = %370.0;
  %390 = less_equal(%382, %383) /* ty=Tensor[(8, 5, 11), bool] */;
  %391 = bitwise_or(%386, %387) /* ty=Tensor[(8, 5, 11), uint8] */;
  %392 = sinh(%388) /* ty=Tensor[(8, 5, 11), float64] */;
  (%389, meta[relay.Constant][25] /* ty=Tensor[(52), uint32] */, meta[relay.Constant][26] /* ty=Tensor[(8, 52), uint32] */, %390, %391, %392)
}

def @func_4728() -> (Tensor[(3, 9, 7), float32],) {
  %393 = @func_1832() /* ty=Tensor[(3, 9, 7), float32] */;
  (%393,)
}

def @func_3985(%var_3935: Tensor[(52), uint32], %var_3936: Tensor[(416), uint32], %var_3975: Tensor[(13, 4, 8), float32]) -> (Tensor[(3, 9, 7), float32], Tensor[(52), uint32], Tensor[(416), uint32], Tensor[(13, 4, 8), float64], Tensor[(13, 4, 8), uint64]) {
  %394 = @func_1157() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %395 = cast(%var_3935, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %396 = cast(%var_3936, dtype="uint32") /* ty=Tensor[(416), uint32] */;
  %397 = reshape(%395, newshape=[13, 4, 1]) /* ty=Tensor[(13, 4, 1), uint32] */;
  %398 = reshape(%396, newshape=[13, 4, 8]) /* ty=Tensor[(13, 4, 8), uint32] */;
  %399 = @func_420(%397, %398) /* ty=(Tensor[(13, 4, 8), bool],) */;
  %400 = %399.0;
  %401 = cast(%400, dtype="float32") /* ty=Tensor[(13, 4, 8), float32] */;
  %402 = acos(%401) /* ty=Tensor[(13, 4, 8), float32] */;
  %403 = cast(%402, dtype="float64") /* ty=Tensor[(13, 4, 8), float64] */;
  %404 = sinh(%403) /* ty=Tensor[(13, 4, 8), float64] */;
  %405 = cast(%404, dtype="float64") /* ty=Tensor[(13, 4, 8), float64] */;
  %406 = cast(%var_3975, dtype="uint64") /* ty=Tensor[(13, 4, 8), uint64] */;
  %407 = shape_of(%402, dtype="int32") /* ty=Tensor[(3), int32] */;
  %408 = cast(%402, dtype="uint64") /* ty=Tensor[(13, 4, 8), uint64] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %410 = %394.0;
  %411 = sigmoid(%405) /* ty=Tensor[(13, 4, 8), float64] */;
  %412 = maximum(%408, %409) /* ty=Tensor[(13, 4, 8), uint64] */;
  (%410, %var_3935, %var_3936, %411, %412)
}

def @func_5993() -> Tensor[(13, 4, 8), bool] {
  @func_5983() /* ty=Tensor[(13, 4, 8), bool] */
}

def @func_6075() -> (Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) {
  %413 = @func_5814() /* ty=Tensor[(3, 9, 7), float32] */;
  %414 = cast(%413, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
  %415 = sigmoid(%414) /* ty=Tensor[(3, 9, 7), float32] */;
  %416 = @func_1212() /* ty=Tensor[(3, 9, 7), float32] */;
  (%415, %416)
}

def @func_2721() -> Tensor[(3, 9, 7), float32] {
  %417 = @func_1819() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %417.0
}

def @func_3068() -> (Tensor[(3, 9, 7), float32],) {
  %418 = @func_1764() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %419 = %418.0;
  (%419,)
}

def @func_5427() -> (Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) {
  %420 = @func_1811() /* ty=Tensor[(3, 9, 7), float32] */;
  %421 = @func_1832() /* ty=Tensor[(3, 9, 7), float32] */;
  (%420, %421)
}

def @func_4908() -> Tensor[(52), uint32] {
  %422 = @func_3591() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(52), uint32], Tensor[(52), uint32]) */;
  %422.2
}

def @func_5628() -> (Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) {
  %423 = @func_3431() /* ty=Tensor[(3, 9, 7), float32] */;
  %424 = @func_1811() /* ty=Tensor[(3, 9, 7), float32] */;
  %425 = @func_4629() /* ty=Tensor[(3, 9, 7), float32] */;
  (%423, %424, %425)
}

def @func_1664(%var_1659: Tensor[(10, 2, 8), float32]) -> Tensor[(10, 2, 8), float32] {
  %426 = cast(%var_1659, dtype="float32") /* ty=Tensor[(10, 2, 8), float32] */;
  atan(%426) /* ty=Tensor[(10, 2, 8), float32] */
}

def @func_4629() -> Tensor[(3, 9, 7), float32] {
  @func_3637() /* ty=Tensor[(3, 9, 7), float32] */
}

def @func_3377(%var_3335: Tensor[(3, 7, 12), uint16], %var_3336: Tensor[(3, 7, 12), uint16]) -> (Tensor[(3, 7, 12), uint16], Tensor[(10, 2, 8), float32], Tensor[(160), float32]) {
  %427 = cast(%var_3336, dtype="uint16") /* ty=Tensor[(3, 7, 12), uint16] */;
  %428 = shape_of(%var_3335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %429 = cast(%var_3335, dtype="uint16") /* ty=Tensor[(3, 7, 12), uint16] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %431 = cast(meta[relay.Constant][27] /* ty=Tensor[(160), float32] */, dtype="float32") /* ty=Tensor[(160), float32] */;
  %432 = reshape(%431, newshape=[10, 2, 8]) /* ty=Tensor[(10, 2, 8), float32] */;
  %433 = right_shift(%429, %430) /* ty=Tensor[(3, 7, 12), uint16] */;
  %434 = @func_1664(%432) /* ty=Tensor[(10, 2, 8), float32] */;
  (%433, %434, meta[relay.Constant][27] /* ty=Tensor[(160), float32] */)
}

def @func_6272() -> (Tensor[(3, 9, 7), float32],) {
  %435 = @func_4267() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(13, 4, 8), bool], Tensor[(3, 9, 7), float32]) */;
  %436 = %435.0;
  (%436,)
}

def @func_5220() -> Tensor[(52), uint32] {
  %437 = @func_4857() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(52), uint32], Tensor[(13, 4, 8), bool], Tensor[(3, 9, 7), float32]) */;
  %437.1
}

def @func_1338(%var_1292: Tensor[(10, 2, 16), bool], %var_1293: Tensor[(10, 2, 16), bool]) -> (Tensor[(10, 2, 16), float32], Tensor[(10, 2, 16), float64]) {
  %438 = cast(%var_1293, dtype="float32") /* ty=Tensor[(10, 2, 16), float32] */;
  %439 = cast(%var_1293, dtype="bool") /* ty=Tensor[(10, 2, 16), bool] */;
  %440 = shape_of(%var_1292, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%var_1292, dtype="bool") /* ty=Tensor[(10, 2, 16), bool] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %443 = logical_or(%441, %442) /* ty=Tensor[(10, 2, 16), bool] */;
  %444 = cast(%var_1292, dtype="float32") /* ty=Tensor[(10, 2, 16), float32] */;
  %445 = shape_of(%443, dtype="int32") /* ty=Tensor[(3), int32] */;
  %446 = cast(%443, dtype="float32") /* ty=Tensor[(10, 2, 16), float32] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %448 = floor_divide(%446, %447) /* ty=Tensor[(10, 2, 16), float32] */;
  %449 = cast(%448, dtype="float64") /* ty=Tensor[(10, 2, 16), float64] */;
  %450 = shape_of(%443, dtype="int32") /* ty=Tensor[(3), int32] */;
  %451 = cast(%443, dtype="float64") /* ty=Tensor[(10, 2, 16), float64] */;
  %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %453 = atanh(%438) /* ty=Tensor[(10, 2, 16), float32] */;
  %454 = power(%451, %452) /* ty=Tensor[(10, 2, 16), float64] */;
  (%453, %454)
}

def @func_6494() -> (Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) {
  %455 = @func_4973() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %456 = @func_5628() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) */;
  %457 = %455.0;
  %458 = %456.0;
  (%457, %458)
}

def @func_1819() -> (Tensor[(3, 9, 7), float32],) {
  %459 = @func_1212() /* ty=Tensor[(3, 9, 7), float32] */;
  (%459,)
}

def @func_597(%var_558: Tensor[(5, 3, 7), int8], %var_565: Tensor[(52, 1), uint32], %var_566: Tensor[(416), uint32]) -> (Tensor[(5, 3, 7), int8], Tensor[(13, 4, 8), bool], Tensor[(416), uint32], Tensor[(52), bool]) {
  %460 = cast(%var_558, dtype="int8") /* ty=Tensor[(5, 3, 7), int8] */;
  %461 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(5, 3, 7), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %462 = cast(meta[relay.Constant][28] /* ty=Tensor[(5, 3, 7), int8] */, dtype="int8") /* ty=Tensor[(5, 3, 7), int8] */;
  %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %464 = cast(%var_565, dtype="uint32") /* ty=Tensor[(52, 1), uint32] */;
  %465 = cast(%var_566, dtype="uint32") /* ty=Tensor[(416), uint32] */;
  %466 = reshape(%464, newshape=[13, 4, 1]) /* ty=Tensor[(13, 4, 1), uint32] */;
  %467 = reshape(%465, newshape=[13, 4, 8]) /* ty=Tensor[(13, 4, 8), uint32] */;
  %468 = @func_420(%466, %467) /* ty=(Tensor[(13, 4, 8), bool],) */;
  %469 = cast(%var_565, dtype="uint32") /* ty=Tensor[(52, 1), uint32] */;
  %470 = reshape(%469, newshape=[52]) /* ty=Tensor[(52), uint32] */;
  %471 = @func_477(%470) /* ty=(Tensor[(7, 14, 14), bool], Tensor[(7, 14, 14), bool], Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(416), uint32], Tensor[(13, 4, 8), bool]) */;
  %472 = %471.3;
  %473 = cast(%var_565, dtype="bool") /* ty=Tensor[(52, 1), bool] */;
  %474 = shape_of(%472, dtype="int32") /* ty=Tensor[(1), int32] */;
  %475 = cast(%472, dtype="bool") /* ty=Tensor[(52), bool] */;
  %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?), bool] */;
  %477 = bitwise_or(%462, %463) /* ty=Tensor[(5, 3, 7), int8] */;
  %478 = %468.0;
  %479 = greater_equal(%475, %476) /* ty=Tensor[(52), bool] */;
  (%477, %478, %var_566, %479)
}

def @func_1832() -> Tensor[(3, 9, 7), float32] {
  %480 = @func_1157() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %480.0
}

def @func_3325(%var_3181: Tensor[(10, 9, 5), uint32], %var_3217: Tensor[(728), float64], %var_3234: Tensor[(728), uint8], %var_3274: Tensor[(3, 9, 7), float64], %var_3280: Tensor[(728), uint8], %var_3314: Tensor[(52), uint32]) -> (Tensor[(440), float64], Tensor[(416), uint32], Tensor[(440), float64], Tensor[(10, 9, 5), float32], Tensor[(728), uint64], Tensor[(10, 9, 5), bool], Tensor[(728), int16], Tensor[(728), float64], Tensor[(3, 9, 7), float32], Tensor[(728), bool], Tensor[(13, 4, 8), bool], Tensor[(3, 9, 7), float32], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(8, 5, 11), float64]) {
  %481 = cast(meta[relay.Constant][29] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %482 = cast(meta[relay.Constant][29] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %483 = cast(meta[relay.Constant][30] /* ty=Tensor[(416), uint32] */, dtype="uint32") /* ty=Tensor[(416), uint32] */;
  %484 = cast(meta[relay.Constant][31] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %485 = reshape(%481, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), float64] */;
  %486 = reshape(%482, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), float64] */;
  %487 = reshape(%483, newshape=[416]) /* ty=Tensor[(416), uint32] */;
  %488 = reshape(%484, newshape=[440]) /* ty=Tensor[(440), float64] */;
  %489 = @func_1125(%485, %486, %487, %488) /* ty=(Tensor[(4, 14, 13), float64], Tensor[(416), uint32], Tensor[(21, 5), int8], Tensor[(13, 4), uint32], Tensor[(416), uint32], Tensor[(8, 52), uint32], Tensor[(440), float64], Tensor[(13, 4, 8), bool]) */;
  %490 = cast(%var_3181, dtype="uint32") /* ty=Tensor[(10, 9, 5), uint32] */;
  %491 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(10, 9, 5), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %492 = cast(meta[relay.Constant][32] /* ty=Tensor[(10, 9, 5), uint32] */, dtype="uint32") /* ty=Tensor[(10, 9, 5), uint32] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %494 = logical_xor(%492, %493) /* ty=Tensor[(10, 9, 5), uint32] */;
  %495 = cast(%494, dtype="float32") /* ty=Tensor[(10, 9, 5), float32] */;
  %496 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(10, 9, 5), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %497 = cast(meta[relay.Constant][32] /* ty=Tensor[(10, 9, 5), uint32] */, dtype="float32") /* ty=Tensor[(10, 9, 5), float32] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %499 = cast(meta[relay.Constant][29] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %500 = atan(%499) /* ty=Tensor[(728), float64] */;
  %501 = cast(%var_3217, dtype="uint64") /* ty=Tensor[(728), uint64] */;
  %502 = shape_of(%500, dtype="int32") /* ty=Tensor[(1), int32] */;
  %503 = cast(%500, dtype="uint64") /* ty=Tensor[(728), uint64] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %505 = cast(meta[relay.Constant][33] /* ty=Tensor[(10, 9, 5), uint32] */, dtype="bool") /* ty=Tensor[(10, 9, 5), bool] */;
  %506 = shape_of(%var_3181, dtype="int32") /* ty=Tensor[(3), int32] */;
  %507 = cast(%var_3181, dtype="bool") /* ty=Tensor[(10, 9, 5), bool] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %509 = cast(%var_3217, dtype="uint8") /* ty=Tensor[(728), uint8] */;
  %510 = shape_of(%500, dtype="int32") /* ty=Tensor[(1), int32] */;
  %511 = cast(%500, dtype="uint8") /* ty=Tensor[(728), uint8] */;
  %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %513 = bitwise_and(%511, %512) /* ty=Tensor[(728), uint8] */;
  %514 = cast(%var_3234, dtype="bool") /* ty=Tensor[(728), bool] */;
  %515 = shape_of(%513, dtype="int32") /* ty=Tensor[(1), int32] */;
  %516 = cast(%513, dtype="bool") /* ty=Tensor[(728), bool] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?), bool] */;
  %518 = greater(%516, %517) /* ty=Tensor[(728), bool] */;
  %519 = cast(%var_3234, dtype="int32") /* ty=Tensor[(728), int32] */;
  %520 = shape_of(%518, dtype="int32") /* ty=Tensor[(1), int32] */;
  %521 = cast(%518, dtype="int32") /* ty=Tensor[(728), int32] */;
  %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?), int32] */;
  %523 = multiply(%521, %522) /* ty=Tensor[(728), int32] */;
  %524 = cast(%523, dtype="int16") /* ty=Tensor[(728), int16] */;
  %525 = shape_of(%513, dtype="int32") /* ty=Tensor[(1), int32] */;
  %526 = cast(%513, dtype="int16") /* ty=Tensor[(728), int16] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?), int16] */;
  %528 = cast(%var_3234, dtype="float64") /* ty=Tensor[(728), float64] */;
  %529 = shape_of(%var_3217, dtype="int32") /* ty=Tensor[(1), int32] */;
  %530 = cast(%var_3217, dtype="float64") /* ty=Tensor[(728), float64] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?), float64] */;
  %532 = @func_2552() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(3, 9, 7), float64]) */;
  %533 = %532.3;
  %534 = cast(%var_3274, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
  %535 = shape_of(%533, dtype="int32") /* ty=Tensor[(3), int32] */;
  %536 = cast(%533, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
  %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %538 = cast(%var_3280, dtype="bool") /* ty=Tensor[(728), bool] */;
  %539 = shape_of(%var_3234, dtype="int32") /* ty=Tensor[(1), int32] */;
  %540 = cast(%var_3234, dtype="bool") /* ty=Tensor[(728), bool] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?), bool] */;
  %542 = cast(meta[relay.Constant][31] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %543 = %489.6;
  %544 = cast(%543, dtype="float64") /* ty=Tensor[(440), float64] */;
  %545 = reshape(%542, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
  %546 = reshape(%544, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
  %547 = @func_769(%545, %546) /* ty=(Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(8, 52), uint32], Tensor[(8, 5, 11), bool], Tensor[(8, 5, 11), uint8], Tensor[(8, 5, 11), float64]) */;
  %548 = @func_1819() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %549 = cast(%var_3314, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %550 = reshape(%549, newshape=[26, 2]) /* ty=Tensor[(26, 2), uint32] */;
  %551 = @func_3107(%550) /* ty=(Tensor[(3, 9, 7), float32], Tensor[(416), uint32], Tensor[(105), int8], Tensor[(26, 2), uint32], Tensor[(416), uint32]) */;
  %552 = %548.0;
  %553 = cast(%552, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
  %554 = %551.2;
  %555 = cast(%554, dtype="int8") /* ty=Tensor[(105), int8] */;
  %556 = cast(%var_3314, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %557 = cast(%543, dtype="float64") /* ty=Tensor[(440), float64] */;
  %558 = cast(%518, dtype="float64") /* ty=Tensor[(728), float64] */;
  %559 = reshape(%553, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float32] */;
  %560 = reshape(%555, newshape=[105]) /* ty=Tensor[(105), int8] */;
  %561 = reshape(%556, newshape=[52]) /* ty=Tensor[(52), uint32] */;
  %562 = reshape(%557, newshape=[5, 88]) /* ty=Tensor[(5, 88), float64] */;
  %563 = reshape(%558, newshape=[7, 104]) /* ty=Tensor[(7, 104), float64] */;
  %564 = @func_2161(%559, %560, %561, %562, %563) /* ty=(Tensor[(3, 9, 7), bool], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(8, 5, 11), float64], Tensor[(7, 104), float64], Tensor[(5, 88), uint64], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(110, 4), float32], Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(2, 11, 10), float32], Tensor[(2, 11, 10), float32], Tensor[(220, 416), int32], Tensor[(220, 52), bool]) */;
  %565 = power(%497, %498) /* ty=Tensor[(10, 9, 5), float32] */;
  %566 = right_shift(%503, %504) /* ty=Tensor[(728), uint64] */;
  %567 = logical_or(%507, %508) /* ty=Tensor[(10, 9, 5), bool] */;
  %568 = bitwise_xor(%526, %527) /* ty=Tensor[(728), int16] */;
  %569 = mod(%530, %531) /* ty=Tensor[(728), float64] */;
  %570 = power(%536, %537) /* ty=Tensor[(3, 9, 7), float32] */;
  %571 = less(%540, %541) /* ty=Tensor[(728), bool] */;
  %572 = %547.0;
  %573 = %564.3;
  (%543, meta[relay.Constant][30] /* ty=Tensor[(416), uint32] */, meta[relay.Constant][31] /* ty=Tensor[(440), float64] */, %565, %566, %567, %568, %569, %570, %571, %572, %552, %554, %var_3314, %573)
}

def @func_1197(%var_1189: Tensor[(2, 11, 10), float32]) -> Tensor[(2, 11, 10), float32] {
  %574 = cast(meta[relay.Constant][34] /* ty=Tensor[(2, 11, 10), float32] */, dtype="float32") /* ty=Tensor[(2, 11, 10), float32] */;
  %575 = shape_of(%var_1189, dtype="int32") /* ty=Tensor[(3), int32] */;
  %576 = cast(%var_1189, dtype="float32") /* ty=Tensor[(2, 11, 10), float32] */;
  %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%576, %577) /* ty=Tensor[(2, 11, 10), float32] */
}

def @func_5016() -> (Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) {
  %578 = @func_3068() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %579 = @func_4629() /* ty=Tensor[(3, 9, 7), float32] */;
  %580 = %578.0;
  (%579, %580)
}

def @func_3591() -> (Tensor[(3, 9, 7), float32], Tensor[(52), uint32], Tensor[(52), uint32]) {
  %581 = @func_1046() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %582 = cast(meta[relay.Constant][35] /* ty=Tensor[(52), uint32] */, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %583 = reshape(%582, newshape=[52]) /* ty=Tensor[(52), uint32] */;
  %584 = @func_477(%583) /* ty=(Tensor[(7, 14, 14), bool], Tensor[(7, 14, 14), bool], Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(416), uint32], Tensor[(13, 4, 8), bool]) */;
  %585 = %581.0;
  %586 = %584.3;
  (%585, %586, meta[relay.Constant][35] /* ty=Tensor[(52), uint32] */)
}

def @func_4267() -> (Tensor[(3, 9, 7), float32], Tensor[(13, 4, 8), bool], Tensor[(3, 9, 7), float32]) {
  %587 = @func_2552() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(3, 9, 7), float64]) */;
  %588 = @func_1046() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %589 = @func_2721() /* ty=Tensor[(3, 9, 7), float32] */;
  %590 = %587.1;
  %591 = %588.0;
  (%589, %590, %591)
}

def @func_2161(%var_1996: Tensor[(3, 9, 7), float32], %var_2003: Tensor[(105), int8], %var_2004: Tensor[(52), uint32], %var_2016: Tensor[(5, 88), float64], %var_2022: Tensor[(7, 104), float64]) -> (Tensor[(3, 9, 7), bool], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(8, 5, 11), float64], Tensor[(7, 104), float64], Tensor[(5, 88), uint64], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(110, 4), float32], Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(2, 11, 10), float32], Tensor[(2, 11, 10), float32], Tensor[(220, 416), int32], Tensor[(220, 52), bool]) {
  %592 = @func_1212() /* ty=Tensor[(3, 9, 7), float32] */;
  %593 = cast(%var_1996, dtype="bool") /* ty=Tensor[(3, 9, 7), bool] */;
  %594 = shape_of(%592, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(%592, dtype="bool") /* ty=Tensor[(3, 9, 7), bool] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %597 = cast(%var_2016, dtype="float64") /* ty=Tensor[(5, 88), float64] */;
  %598 = cast(%var_2016, dtype="float64") /* ty=Tensor[(5, 88), float64] */;
  %599 = reshape(%597, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
  %600 = reshape(%598, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
  %601 = @func_769(%599, %600) /* ty=(Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(8, 52), uint32], Tensor[(8, 5, 11), bool], Tensor[(8, 5, 11), uint8], Tensor[(8, 5, 11), float64]) */;
  %602 = cast(meta[relay.Constant][36] /* ty=Tensor[(220, 1), float32] */, dtype="float32") /* ty=Tensor[(220, 1), float32] */;
  %603 = cast(%var_2022, dtype="float64") /* ty=Tensor[(7, 104), float64] */;
  %604 = reshape(%602, newshape=[220]) /* ty=Tensor[(220), float32] */;
  %605 = reshape(%603, newshape=[728]) /* ty=Tensor[(728), float64] */;
  %606 = @func_1542(%604, %605) /* ty=(Tensor[(3, 9, 7), float32], Tensor[(2, 11, 10), float32], Tensor[(220), float32], Tensor[(2, 11, 10), float32], Tensor[(440), float64], Tensor[(728), float64], Tensor[(416), uint32], Tensor[(110, 4), float64], Tensor[(3, 9, 7), float32], Tensor[(10, 2, 16), float32], Tensor[(4, 80), bool], Tensor[(5, 3, 7), int8], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(3, 9, 7), float32], Tensor[(8, 5, 11), bool], Tensor[(8, 5, 11), float32], Tensor[(8, 5, 11), float32]) */;
  %607 = %606.7;
  %608 = cast(%607, dtype="uint64") /* ty=Tensor[(110, 4), uint64] */;
  %609 = shape_of(%var_2016, dtype="int32") /* ty=Tensor[(2), int32] */;
  %610 = cast(%var_2016, dtype="uint64") /* ty=Tensor[(5, 88), uint64] */;
  %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %612 = @func_1157() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %613 = @func_1157() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %614 = cast(%var_2016, dtype="float32") /* ty=Tensor[(5, 88), float32] */;
  %615 = shape_of(%607, dtype="int32") /* ty=Tensor[(2), int32] */;
  %616 = cast(%607, dtype="float32") /* ty=Tensor[(110, 4), float32] */;
  %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %618 = @func_1721() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(160), float32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) */;
  %619 = cast(meta[relay.Constant][36] /* ty=Tensor[(220, 1), float32] */, dtype="float32") /* ty=Tensor[(220, 1), float32] */;
  %620 = reshape(%619, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), float32] */;
  %621 = @func_1197(%620) /* ty=Tensor[(2, 11, 10), float32] */;
  %622 = cast(%621, dtype="float32") /* ty=Tensor[(2, 11, 10), float32] */;
  %623 = reshape(%622, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), float32] */;
  %624 = cast(meta[relay.Constant][36] /* ty=Tensor[(220, 1), float32] */, dtype="bool") /* ty=Tensor[(220, 1), bool] */;
  %625 = cast(meta[relay.Constant][37] /* ty=Tensor[(416), uint32] */, dtype="bool") /* ty=Tensor[(416), bool] */;
  %626 = logical_and(%624, %625) /* ty=Tensor[(220, 416), bool] */;
  %627 = cast(%626, dtype="int32") /* ty=Tensor[(220, 416), int32] */;
  %628 = cast(meta[relay.Constant][37] /* ty=Tensor[(416), uint32] */, dtype="int32") /* ty=Tensor[(416), int32] */;
  %629 = cast(%var_2003, dtype="int8") /* ty=Tensor[(105), int8] */;
  %630 = cast(%var_2004, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %631 = cast(meta[relay.Constant][37] /* ty=Tensor[(416), uint32] */, dtype="uint32") /* ty=Tensor[(416), uint32] */;
  %632 = reshape(%629, newshape=[5, 3, 7]) /* ty=Tensor[(5, 3, 7), int8] */;
  %633 = reshape(%630, newshape=[52, 1]) /* ty=Tensor[(52, 1), uint32] */;
  %634 = reshape(%631, newshape=[416]) /* ty=Tensor[(416), uint32] */;
  %635 = @func_597(%632, %633, %634) /* ty=(Tensor[(5, 3, 7), int8], Tensor[(13, 4, 8), bool], Tensor[(416), uint32], Tensor[(52), bool]) */;
  %636 = %635.3;
  %637 = cast(meta[relay.Constant][36] /* ty=Tensor[(220, 1), float32] */, dtype="bool") /* ty=Tensor[(220, 1), bool] */;
  %638 = cast(%636, dtype="bool") /* ty=Tensor[(52), bool] */;
  %639 = not_equal(%595, %596) /* ty=Tensor[(3, 9, 7), bool] */;
  %640 = %601.5;
  %641 = subtract(%610, %611) /* ty=Tensor[(5, 88), uint64] */;
  %642 = %612.0;
  %643 = %613.0;
  %644 = floor_mod(%616, %617) /* ty=Tensor[(110, 4), float32] */;
  %645 = @func_1212() /* ty=Tensor[(3, 9, 7), float32] */;
  %646 = %618.1;
  %647 = @func_1197(%623) /* ty=Tensor[(2, 11, 10), float32] */;
  %648 = bitwise_xor(%627, %628) /* ty=Tensor[(220, 416), int32] */;
  %649 = logical_or(%637, %638) /* ty=Tensor[(220, 52), bool] */;
  (%639, %var_2003, %var_2004, %640, %var_2022, %641, %642, %643, %644, %645, %646, %621, %647, %648, %649)
}

def @func_3821() -> (Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) {
  %650 = @func_1832() /* ty=Tensor[(3, 9, 7), float32] */;
  %651 = cast(%650, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
  %652 = sinh(%651) /* ty=Tensor[(3, 9, 7), float32] */;
  %653 = @func_1811() /* ty=Tensor[(3, 9, 7), float32] */;
  (%652, %653)
}

def @func_3637() -> Tensor[(3, 9, 7), float32] {
  %654 = @func_1157() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %654.0
}

def @func_5755() -> Tensor[(52), uint32] {
  %655 = @func_3591() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(52), uint32], Tensor[(52), uint32]) */;
  %655.1
}

def @func_6041(%var_6039: Tensor[(220), float32]) -> (Tensor[(13, 4, 8), bool], Tensor[(2, 11, 10), float32], Tensor[(220), float32]) {
  %656 = cast(%var_6039, dtype="float32") /* ty=Tensor[(220), float32] */;
  %657 = reshape(%656, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), float32] */;
  %658 = @func_5983() /* ty=Tensor[(13, 4, 8), bool] */;
  %659 = @func_1197(%657) /* ty=Tensor[(2, 11, 10), float32] */;
  (%658, %659, %var_6039)
}

def @func_3541() -> Tensor[(3, 9, 7), float32] {
  @func_1212() /* ty=Tensor[(3, 9, 7), float32] */
}

def @func_5256() -> (Tensor[(3, 9, 7), float32], Tensor[(52), uint32]) {
  %660 = @func_4694() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %661 = @func_4857() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(52), uint32], Tensor[(13, 4, 8), bool], Tensor[(3, 9, 7), float32]) */;
  %662 = %660.0;
  %663 = %661.1;
  (%662, %663)
}

def @func_2836(%var_2755: Tensor[(70), int32], %var_2798: Tensor[(105), int8], %var_2800: Tensor[(416), uint32]) -> (Tensor[(70), int32], Tensor[(3, 9, 7), int8], Tensor[(5, 3, 7), int8], Tensor[(105), int8], Tensor[(1, 52), uint32], Tensor[(416), uint32]) {
  %664 = @func_1721() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(160), float32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) */;
  %665 = %664.3;
  %666 = cast(%var_2755, dtype="int32") /* ty=Tensor[(70), int32] */;
  %667 = reshape(%666, newshape=[5, 7, 2]) /* ty=Tensor[(5, 7, 2), int32] */;
  %668 = @func_1890(%667) /* ty=(Tensor[(5, 7, 2), int32], Tensor[(3, 9, 7), float32]) */;
  %669 = %668.1;
  %670 = cast(%669, dtype="int8") /* ty=Tensor[(3, 9, 7), int8] */;
  %671 = shape_of(%665, dtype="int32") /* ty=Tensor[(3), int32] */;
  %672 = cast(%665, dtype="int8") /* ty=Tensor[(3, 9, 7), int8] */;
  %673 = dyn.reshape(%670, %671, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %674 = cast(%var_2798, dtype="int8") /* ty=Tensor[(105), int8] */;
  %675 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 52), uint32] */, dtype="uint32") /* ty=Tensor[(1, 52), uint32] */;
  %676 = cast(%var_2800, dtype="uint32") /* ty=Tensor[(416), uint32] */;
  %677 = reshape(%674, newshape=[5, 3, 7]) /* ty=Tensor[(5, 3, 7), int8] */;
  %678 = reshape(%675, newshape=[52, 1]) /* ty=Tensor[(52, 1), uint32] */;
  %679 = reshape(%676, newshape=[416]) /* ty=Tensor[(416), uint32] */;
  %680 = @func_597(%677, %678, %679) /* ty=(Tensor[(5, 3, 7), int8], Tensor[(13, 4, 8), bool], Tensor[(416), uint32], Tensor[(52), bool]) */;
  %681 = maximum(%672, %673) /* ty=Tensor[(3, 9, 7), int8] */;
  %682 = %680.0;
  (%var_2755, %681, %682, %var_2798, meta[relay.Constant][38] /* ty=Tensor[(1, 52), uint32] */, %var_2800)
}

def @func_420(%var_407: Tensor[(13, 4, 1), uint32], %var_408: Tensor[(13, 4, 8), uint32]) -> (Tensor[(13, 4, 8), bool],) {
  %683 = cast(%var_407, dtype="bool") /* ty=Tensor[(13, 4, 1), bool] */;
  %684 = cast(%var_408, dtype="bool") /* ty=Tensor[(13, 4, 8), bool] */;
  %685 = greater_equal(%683, %684) /* ty=Tensor[(13, 4, 8), bool] */;
  (%685,)
}

def @func_1212() -> Tensor[(3, 9, 7), float32] {
  %686 = @func_1046() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %686.0
}

def @func_6380() -> Tensor[(3, 9, 7), float32] {
  %687 = @func_1819() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %687.0
}

def @func_4336(%var_4281: Tensor[(220), float32], %var_4295: Tensor[(220), float32], %var_4306: Tensor[(220), float32], %var_4317: Tensor[(220), uint8]) -> (Tensor[(3, 9, 7), float32], Tensor[(2, 11, 10), float32], Tensor[(3, 9, 7), float32], Tensor[(52), uint32], Tensor[(220), uint8], Tensor[(220), int64]) {
  %688 = cast(%var_4281, dtype="float32") /* ty=Tensor[(220), float32] */;
  %689 = reshape(%688, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), float32] */;
  %690 = @func_1721() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(160), float32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) */;
  %691 = @func_2552() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(3, 9, 7), float64]) */;
  %692 = cast(%var_4295, dtype="uint8") /* ty=Tensor[(220), uint8] */;
  %693 = shape_of(%var_4281, dtype="int32") /* ty=Tensor[(1), int32] */;
  %694 = cast(%var_4281, dtype="uint8") /* ty=Tensor[(220), uint8] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %696 = cast(%var_4306, dtype="uint8") /* ty=Tensor[(220), uint8] */;
  %697 = shape_of(%var_4281, dtype="int32") /* ty=Tensor[(1), int32] */;
  %698 = cast(%var_4281, dtype="uint8") /* ty=Tensor[(220), uint8] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %700 = bitwise_and(%698, %699) /* ty=Tensor[(220), uint8] */;
  %701 = cast(%var_4317, dtype="float64") /* ty=Tensor[(220), float64] */;
  %702 = shape_of(%700, dtype="int32") /* ty=Tensor[(1), int32] */;
  %703 = cast(%700, dtype="float64") /* ty=Tensor[(220), float64] */;
  %704 = dyn.reshape(%701, %702, newshape=[]) /* ty=Tensor[(?), float64] */;
  %705 = divide(%703, %704) /* ty=Tensor[(220), float64] */;
  %706 = cast(%var_4295, dtype="int64") /* ty=Tensor[(220), int64] */;
  %707 = shape_of(%705, dtype="int32") /* ty=Tensor[(1), int32] */;
  %708 = cast(%705, dtype="int64") /* ty=Tensor[(220), int64] */;
  %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?), int64] */;
  %710 = @func_1832() /* ty=Tensor[(3, 9, 7), float32] */;
  %711 = @func_1197(%689) /* ty=Tensor[(2, 11, 10), float32] */;
  %712 = %690.0;
  %713 = %691.2;
  %714 = bitwise_or(%694, %695) /* ty=Tensor[(220), uint8] */;
  %715 = multiply(%708, %709) /* ty=Tensor[(220), int64] */;
  (%710, %711, %712, %713, %714, %715)
}

def @func_6427(%var_6402: Tensor[(594), float32], %var_6411: Tensor[(189), float32]) -> (Tensor[(3, 9, 7), float32], Tensor[(594), float32], Tensor[(189), float32], Tensor[(10, 2, 8), float32]) {
  %716 = @func_4603() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %717 = cast(%var_6402, dtype="float32") /* ty=Tensor[(594), float32] */;
  %718 = reshape(%717, newshape=[11, 6, 9]) /* ty=Tensor[(11, 6, 9), float32] */;
  %719 = @func_4446(%718) /* ty=(Tensor[(11, 6, 9), bool], Tensor[(10, 2, 8), float32], Tensor[(189), float32], Tensor[(7, 10), int32]) */;
  %720 = %719.2;
  %721 = cast(%var_6411, dtype="float32") /* ty=Tensor[(189), float32] */;
  %722 = shape_of(%720, dtype="int32") /* ty=Tensor[(1), int32] */;
  %723 = cast(%720, dtype="float32") /* ty=Tensor[(189), float32] */;
  %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?), float32] */;
  %725 = @func_1721() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(160), float32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) */;
  %726 = %716.0;
  %727 = divide(%723, %724) /* ty=Tensor[(189), float32] */;
  %728 = %725.1;
  (%726, %var_6402, %727, %728)
}

def @func_6127(%var_6097: Tensor[(70), int32]) -> (Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(70), int32]) {
  %729 = @func_4755() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) */;
  %730 = cast(%var_6097, dtype="int32") /* ty=Tensor[(70), int32] */;
  %731 = reshape(%730, newshape=[70]) /* ty=Tensor[(70), int32] */;
  %732 = @func_3903(%731) /* ty=(Tensor[(3, 9, 7), float32], Tensor[(52), bool], Tensor[(5, 7, 2), int32], Tensor[(70), int32]) */;
  %733 = @func_5133() /* ty=Tensor[(3, 9, 7), float32] */;
  %734 = %729.0;
  %735 = %732.0;
  (%733, %734, %735, %var_6097)
}

def @func_2883(%var_2879: Tensor[(7, 2, 4), float64]) -> (Tensor[(7, 2, 4), float64],) {
  %736 = cast(%var_2879, dtype="float64") /* ty=Tensor[(7, 2, 4), float64] */;
  %737 = acosh(%736) /* ty=Tensor[(7, 2, 4), float64] */;
  (%737,)
}

def @func_4771(%var_4766: Tensor[(2, 15, 5), uint64]) -> Tensor[(2, 15, 5), uint64] {
  %738 = cast(meta[relay.Constant][39] /* ty=Tensor[(2, 15, 5), uint64] */, dtype="uint64") /* ty=Tensor[(2, 15, 5), uint64] */;
  %739 = shape_of(%var_4766, dtype="int32") /* ty=Tensor[(3), int32] */;
  %740 = cast(%var_4766, dtype="uint64") /* ty=Tensor[(2, 15, 5), uint64] */;
  %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  bitwise_or(%740, %741) /* ty=Tensor[(2, 15, 5), uint64] */
}

def @func_5983() -> Tensor[(13, 4, 8), bool] {
  %742 = @func_4267() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(13, 4, 8), bool], Tensor[(3, 9, 7), float32]) */;
  %742.1
}

def @func_4186(%var_4177: Tensor[(252), uint16]) -> (Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(252), uint16]) {
  %743 = @func_4052() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(105), int8], Tensor[(70), int32]) */;
  %744 = cast(%var_4177, dtype="uint16") /* ty=Tensor[(252), uint16] */;
  %745 = cast(%var_4177, dtype="uint16") /* ty=Tensor[(252), uint16] */;
  %746 = reshape(%744, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), uint16] */;
  %747 = reshape(%745, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), uint16] */;
  %748 = @func_3377(%746, %747) /* ty=(Tensor[(3, 7, 12), uint16], Tensor[(10, 2, 8), float32], Tensor[(160), float32]) */;
  %749 = %743.0;
  %750 = %748.1;
  (%749, %750, %var_4177)
}

def @func_477(%var_472: Tensor[(52), uint32]) -> (Tensor[(7, 14, 14), bool], Tensor[(7, 14, 14), bool], Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(416), uint32], Tensor[(13, 4, 8), bool]) {
  %751 = cast(meta[relay.Constant][41] /* ty=Tensor[(7, 14, 14), float64] */, dtype="bool") /* ty=Tensor[(7, 14, 14), bool] */;
  %752 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(7, 14, 14), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %753 = cast(meta[relay.Constant][40] /* ty=Tensor[(7, 14, 14), float64] */, dtype="bool") /* ty=Tensor[(7, 14, 14), bool] */;
  %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %755 = cast(meta[relay.Constant][40] /* ty=Tensor[(7, 14, 14), float64] */, dtype="float32") /* ty=Tensor[(7, 14, 14), float32] */;
  %756 = cos(%755) /* ty=Tensor[(7, 14, 14), float32] */;
  %757 = cast(meta[relay.Constant][40] /* ty=Tensor[(7, 14, 14), float64] */, dtype="bool") /* ty=Tensor[(7, 14, 14), bool] */;
  %758 = shape_of(%756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %759 = cast(%756, dtype="bool") /* ty=Tensor[(7, 14, 14), bool] */;
  %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %761 = cast(%var_472, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %762 = cast(meta[relay.Constant][42] /* ty=Tensor[(416), uint32] */, dtype="uint32") /* ty=Tensor[(416), uint32] */;
  %763 = reshape(%761, newshape=[13, 4, 1]) /* ty=Tensor[(13, 4, 1), uint32] */;
  %764 = reshape(%762, newshape=[13, 4, 8]) /* ty=Tensor[(13, 4, 8), uint32] */;
  %765 = @func_420(%763, %764) /* ty=(Tensor[(13, 4, 8), bool],) */;
  %766 = cast(%var_472, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %767 = cast(meta[relay.Constant][42] /* ty=Tensor[(416), uint32] */, dtype="uint32") /* ty=Tensor[(416), uint32] */;
  %768 = reshape(%766, newshape=[13, 4, 1]) /* ty=Tensor[(13, 4, 1), uint32] */;
  %769 = reshape(%767, newshape=[13, 4, 8]) /* ty=Tensor[(13, 4, 8), uint32] */;
  %770 = @func_420(%768, %769) /* ty=(Tensor[(13, 4, 8), bool],) */;
  %771 = equal(%753, %754) /* ty=Tensor[(7, 14, 14), bool] */;
  %772 = greater(%759, %760) /* ty=Tensor[(7, 14, 14), bool] */;
  %773 = %765.0;
  %774 = %770.0;
  (%771, %772, %773, %var_472, meta[relay.Constant][42] /* ty=Tensor[(416), uint32] */, %774)
}

def @func_5325(%var_5319: Tensor[(3, 9, 7), float32]) -> Tensor[(3, 9, 7), bool] {
  %775 = @func_3522() /* ty=Tensor[(3, 9, 7), float32] */;
  %776 = cast(%var_5319, dtype="bool") /* ty=Tensor[(3, 9, 7), bool] */;
  %777 = shape_of(%775, dtype="int32") /* ty=Tensor[(3), int32] */;
  %778 = cast(%775, dtype="bool") /* ty=Tensor[(3, 9, 7), bool] */;
  %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%778, %779) /* ty=Tensor[(3, 9, 7), bool] */
}

def @func_1542(%var_1381: Tensor[(220), float32], %var_1398: Tensor[(728), float64]) -> (Tensor[(3, 9, 7), float32], Tensor[(2, 11, 10), float32], Tensor[(220), float32], Tensor[(2, 11, 10), float32], Tensor[(440), float64], Tensor[(728), float64], Tensor[(416), uint32], Tensor[(110, 4), float64], Tensor[(3, 9, 7), float32], Tensor[(10, 2, 16), float32], Tensor[(4, 80), bool], Tensor[(5, 3, 7), int8], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(3, 9, 7), float32], Tensor[(8, 5, 11), bool], Tensor[(8, 5, 11), float32], Tensor[(8, 5, 11), float32]) {
  %780 = cast(%var_1381, dtype="float32") /* ty=Tensor[(220), float32] */;
  %781 = reshape(%780, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), float32] */;
  %782 = cast(%var_1381, dtype="float32") /* ty=Tensor[(220), float32] */;
  %783 = reshape(%782, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), float32] */;
  %784 = cast(%var_1398, dtype="float64") /* ty=Tensor[(728), float64] */;
  %785 = cast(%var_1398, dtype="float64") /* ty=Tensor[(728), float64] */;
  %786 = cast(meta[relay.Constant][43] /* ty=Tensor[(416), uint32] */, dtype="uint32") /* ty=Tensor[(416), uint32] */;
  %787 = cast(meta[relay.Constant][44] /* ty=Tensor[(110, 4), float64] */, dtype="float64") /* ty=Tensor[(110, 4), float64] */;
  %788 = reshape(%784, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), float64] */;
  %789 = reshape(%785, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), float64] */;
  %790 = reshape(%786, newshape=[416]) /* ty=Tensor[(416), uint32] */;
  %791 = reshape(%787, newshape=[440]) /* ty=Tensor[(440), float64] */;
  %792 = @func_1125(%788, %789, %790, %791) /* ty=(Tensor[(4, 14, 13), float64], Tensor[(416), uint32], Tensor[(21, 5), int8], Tensor[(13, 4), uint32], Tensor[(416), uint32], Tensor[(8, 52), uint32], Tensor[(440), float64], Tensor[(13, 4, 8), bool]) */;
  %793 = @func_1046() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %794 = cast(meta[relay.Constant][45] /* ty=Tensor[(4, 80), bool] */, dtype="bool") /* ty=Tensor[(4, 80), bool] */;
  %795 = cast(meta[relay.Constant][45] /* ty=Tensor[(4, 80), bool] */, dtype="bool") /* ty=Tensor[(4, 80), bool] */;
  %796 = reshape(%794, newshape=[10, 2, 16]) /* ty=Tensor[(10, 2, 16), bool] */;
  %797 = reshape(%795, newshape=[10, 2, 16]) /* ty=Tensor[(10, 2, 16), bool] */;
  %798 = @func_1338(%796, %797) /* ty=(Tensor[(10, 2, 16), float32], Tensor[(10, 2, 16), float64]) */;
  %799 = cast(meta[relay.Constant][46] /* ty=Tensor[(105), int8] */, dtype="int8") /* ty=Tensor[(105), int8] */;
  %800 = cast(meta[relay.Constant][47] /* ty=Tensor[(52), uint32] */, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %801 = cast(meta[relay.Constant][43] /* ty=Tensor[(416), uint32] */, dtype="uint32") /* ty=Tensor[(416), uint32] */;
  %802 = reshape(%799, newshape=[5, 3, 7]) /* ty=Tensor[(5, 3, 7), int8] */;
  %803 = reshape(%800, newshape=[52, 1]) /* ty=Tensor[(52, 1), uint32] */;
  %804 = reshape(%801, newshape=[416]) /* ty=Tensor[(416), uint32] */;
  %805 = @func_597(%802, %803, %804) /* ty=(Tensor[(5, 3, 7), int8], Tensor[(13, 4, 8), bool], Tensor[(416), uint32], Tensor[(52), bool]) */;
  %806 = @func_1212() /* ty=Tensor[(3, 9, 7), float32] */;
  %807 = cast(%806, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
  %808 = reshape(%807, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float32] */;
  %809 = cast(meta[relay.Constant][44] /* ty=Tensor[(110, 4), float64] */, dtype="float64") /* ty=Tensor[(110, 4), float64] */;
  %810 = %792.6;
  %811 = cast(%810, dtype="float64") /* ty=Tensor[(440), float64] */;
  %812 = reshape(%809, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
  %813 = reshape(%811, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
  %814 = @func_769(%812, %813) /* ty=(Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(8, 52), uint32], Tensor[(8, 5, 11), bool], Tensor[(8, 5, 11), uint8], Tensor[(8, 5, 11), float64]) */;
  %815 = %814.5;
  %816 = cast(%815, dtype="float32") /* ty=Tensor[(8, 5, 11), float32] */;
  %817 = sqrt(%816) /* ty=Tensor[(8, 5, 11), float32] */;
  %818 = cast(%817, dtype="float64") /* ty=Tensor[(8, 5, 11), float64] */;
  %819 = cast(meta[relay.Constant][44] /* ty=Tensor[(110, 4), float64] */, dtype="float64") /* ty=Tensor[(110, 4), float64] */;
  %820 = reshape(%818, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
  %821 = reshape(%819, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
  %822 = @func_769(%820, %821) /* ty=(Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(8, 52), uint32], Tensor[(8, 5, 11), bool], Tensor[(8, 5, 11), uint8], Tensor[(8, 5, 11), float64]) */;
  %823 = cast(%817, dtype="float32") /* ty=Tensor[(8, 5, 11), float32] */;
  %824 = cast(%817, dtype="float32") /* ty=Tensor[(8, 5, 11), float32] */;
  %825 = @func_1197(%781) /* ty=Tensor[(2, 11, 10), float32] */;
  %826 = @func_1197(%783) /* ty=Tensor[(2, 11, 10), float32] */;
  %827 = %793.0;
  %828 = %798.0;
  %829 = %805.0;
  %830 = @func_1279(%808) /* ty=Tensor[(3, 9, 7), float32] */;
  %831 = %822.3;
  %832 = log(%823) /* ty=Tensor[(8, 5, 11), float32] */;
  %833 = log2(%824) /* ty=Tensor[(8, 5, 11), float32] */;
  (%806, %825, %var_1381, %826, %810, %var_1398, meta[relay.Constant][43] /* ty=Tensor[(416), uint32] */, meta[relay.Constant][44] /* ty=Tensor[(110, 4), float64] */, %827, %828, meta[relay.Constant][45] /* ty=Tensor[(4, 80), bool] */, %829, meta[relay.Constant][46] /* ty=Tensor[(105), int8] */, meta[relay.Constant][47] /* ty=Tensor[(52), uint32] */, %830, %831, %832, %833)
}

def @func_6312() -> Tensor[(52), uint32] {
  %834 = @func_5256() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(52), uint32]) */;
  %834.1
}

def @func_6158() -> Tensor[(3, 9, 7), float32] {
  %835 = @func_4267() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(13, 4, 8), bool], Tensor[(3, 9, 7), float32]) */;
  %835.0
}

def @func_3107(%var_3095: Tensor[(26, 2), uint32]) -> (Tensor[(3, 9, 7), float32], Tensor[(416), uint32], Tensor[(105), int8], Tensor[(26, 2), uint32], Tensor[(416), uint32]) {
  %836 = @func_1046() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %837 = cast(meta[relay.Constant][48] /* ty=Tensor[(105), int8] */, dtype="int8") /* ty=Tensor[(105), int8] */;
  %838 = cast(%var_3095, dtype="uint32") /* ty=Tensor[(26, 2), uint32] */;
  %839 = cast(meta[relay.Constant][49] /* ty=Tensor[(416), uint32] */, dtype="uint32") /* ty=Tensor[(416), uint32] */;
  %840 = reshape(%837, newshape=[5, 3, 7]) /* ty=Tensor[(5, 3, 7), int8] */;
  %841 = reshape(%838, newshape=[52, 1]) /* ty=Tensor[(52, 1), uint32] */;
  %842 = reshape(%839, newshape=[416]) /* ty=Tensor[(416), uint32] */;
  %843 = @func_597(%840, %841, %842) /* ty=(Tensor[(5, 3, 7), int8], Tensor[(13, 4, 8), bool], Tensor[(416), uint32], Tensor[(52), bool]) */;
  %844 = %836.0;
  %845 = %843.2;
  (%844, %845, meta[relay.Constant][48] /* ty=Tensor[(105), int8] */, %var_3095, meta[relay.Constant][49] /* ty=Tensor[(416), uint32] */)
}

def @func_2552() -> (Tensor[(3, 9, 7), float32], Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(3, 9, 7), float64]) {
  %846 = cast(meta[relay.Constant][50] /* ty=Tensor[(52), uint32] */, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %847 = reshape(%846, newshape=[52]) /* ty=Tensor[(52), uint32] */;
  %848 = @func_477(%847) /* ty=(Tensor[(7, 14, 14), bool], Tensor[(7, 14, 14), bool], Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(416), uint32], Tensor[(13, 4, 8), bool]) */;
  %849 = @func_1046() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %850 = %849.0;
  %851 = cast(%850, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
  %852 = asinh(%851) /* ty=Tensor[(3, 9, 7), float32] */;
  %853 = cast(%852, dtype="float64") /* ty=Tensor[(3, 9, 7), float64] */;
  %854 = @func_1832() /* ty=Tensor[(3, 9, 7), float32] */;
  %855 = %848.2;
  %856 = log2(%853) /* ty=Tensor[(3, 9, 7), float64] */;
  (%854, %855, meta[relay.Constant][50] /* ty=Tensor[(52), uint32] */, %856)
}

def @func_3752() -> (Tensor[(3, 9, 7), float64],) {
  %857 = @func_3431() /* ty=Tensor[(3, 9, 7), float32] */;
  %858 = cast(%857, dtype="float64") /* ty=Tensor[(3, 9, 7), float64] */;
  %859 = atan(%858) /* ty=Tensor[(3, 9, 7), float64] */;
  (%859,)
}

def @func_4052() -> (Tensor[(3, 9, 7), float32], Tensor[(105), int8], Tensor[(70), int32]) {
  %860 = @func_2721() /* ty=Tensor[(3, 9, 7), float32] */;
  %861 = cast(%860, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
  %862 = cast(meta[relay.Constant][51] /* ty=Tensor[(70), int32] */, dtype="int32") /* ty=Tensor[(70), int32] */;
  %863 = cast(%860, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
  %864 = cast(%860, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
  %865 = reshape(%861, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float32] */;
  %866 = reshape(%862, newshape=[7, 10]) /* ty=Tensor[(7, 10), int32] */;
  %867 = reshape(%863, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float32] */;
  %868 = reshape(%864, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float32] */;
  %869 = @func_2375(%865, %866, %867, %868) /* ty=(Tensor[(2, 11, 10), float32], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(440), float64], Tensor[(3, 9, 7), float64], Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(160), float32], Tensor[(416), uint32], Tensor[(3, 9, 7), float32], Tensor[(7, 10), int32], Tensor[(105), int8], Tensor[(416, 728), bool], Tensor[(3, 9, 7), float32], Tensor[(8, 5, 11), uint8], Tensor[(3, 9, 7), int32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), bool], Tensor[(3, 9, 7), float32], Tensor[(13, 4, 8), bool]) */;
  %870 = %869.1;
  (%860, %870, meta[relay.Constant][51] /* ty=Tensor[(70), int32] */)
}

def @func_1157() -> (Tensor[(3, 9, 7), float32],) {
  %871 = @func_1046() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %872 = %871.0;
  (%872,)
}

def @func_1125(%var_1078: Tensor[(4, 14, 13), float64], %var_1079: Tensor[(4, 14, 13), float64], %var_1088: Tensor[(416), uint32], %var_1097: Tensor[(440), float64]) -> (Tensor[(4, 14, 13), float64], Tensor[(416), uint32], Tensor[(21, 5), int8], Tensor[(13, 4), uint32], Tensor[(416), uint32], Tensor[(8, 52), uint32], Tensor[(440), float64], Tensor[(13, 4, 8), bool]) {
  %873 = cast(%var_1079, dtype="float64") /* ty=Tensor[(4, 14, 13), float64] */;
  %874 = shape_of(%var_1078, dtype="int32") /* ty=Tensor[(3), int32] */;
  %875 = cast(%var_1078, dtype="float64") /* ty=Tensor[(4, 14, 13), float64] */;
  %876 = dyn.reshape(%873, %874, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %877 = cast(meta[relay.Constant][52] /* ty=Tensor[(21, 5), int8] */, dtype="int8") /* ty=Tensor[(21, 5), int8] */;
  %878 = cast(meta[relay.Constant][53] /* ty=Tensor[(13, 4), uint32] */, dtype="uint32") /* ty=Tensor[(13, 4), uint32] */;
  %879 = cast(%var_1088, dtype="uint32") /* ty=Tensor[(416), uint32] */;
  %880 = reshape(%877, newshape=[5, 3, 7]) /* ty=Tensor[(5, 3, 7), int8] */;
  %881 = reshape(%878, newshape=[52, 1]) /* ty=Tensor[(52, 1), uint32] */;
  %882 = reshape(%879, newshape=[416]) /* ty=Tensor[(416), uint32] */;
  %883 = @func_597(%880, %881, %882) /* ty=(Tensor[(5, 3, 7), int8], Tensor[(13, 4, 8), bool], Tensor[(416), uint32], Tensor[(52), bool]) */;
  %884 = cast(%var_1097, dtype="float64") /* ty=Tensor[(440), float64] */;
  %885 = cast(%var_1097, dtype="float64") /* ty=Tensor[(440), float64] */;
  %886 = reshape(%884, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
  %887 = reshape(%885, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
  %888 = @func_769(%886, %887) /* ty=(Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(8, 52), uint32], Tensor[(8, 5, 11), bool], Tensor[(8, 5, 11), uint8], Tensor[(8, 5, 11), float64]) */;
  %889 = cast(%var_1097, dtype="float64") /* ty=Tensor[(440), float64] */;
  %890 = cast(%var_1097, dtype="float64") /* ty=Tensor[(440), float64] */;
  %891 = reshape(%889, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
  %892 = reshape(%890, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
  %893 = @func_769(%891, %892) /* ty=(Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(8, 52), uint32], Tensor[(8, 5, 11), bool], Tensor[(8, 5, 11), uint8], Tensor[(8, 5, 11), float64]) */;
  %894 = floor_mod(%875, %876) /* ty=Tensor[(4, 14, 13), float64] */;
  %895 = %883.2;
  %896 = %888.2;
  %897 = %893.0;
  (%894, %895, meta[relay.Constant][52] /* ty=Tensor[(21, 5), int8] */, meta[relay.Constant][53] /* ty=Tensor[(13, 4), uint32] */, %var_1088, %896, %var_1097, %897)
}

def @func_3522() -> Tensor[(3, 9, 7), float32] {
  %898 = @func_1046() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %898.0
}

def @func_3660() -> (Tensor[(3, 9, 7), float32],) {
  %899 = @func_1721() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(160), float32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) */;
  %900 = %899.0;
  %901 = cast(%900, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
  %902 = log10(%901) /* ty=Tensor[(3, 9, 7), float32] */;
  (%902,)
}

def @func_5701(%var_5673: float64, %var_5674: Tensor[(4, 3, 16), float64]) -> (Tensor[(3, 9, 7), float32], Tensor[(4, 3, 16), uint8]) {
  %903 = @func_1721() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(160), float32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) */;
  %904 = cast(%var_5674, dtype="float64") /* ty=Tensor[(4, 3, 16), float64] */;
  %905 = sigmoid(%904) /* ty=Tensor[(4, 3, 16), float64] */;
  %906 = cast(%var_5673, dtype="float64") /* ty=float64 */;
  %907 = cast(%var_5674, dtype="float64") /* ty=Tensor[(4, 3, 16), float64] */;
  %908 = power(%906, %907) /* ty=Tensor[(4, 3, 16), float64] */;
  %909 = cast(%908, dtype="uint8") /* ty=Tensor[(4, 3, 16), uint8] */;
  %910 = shape_of(%905, dtype="int32") /* ty=Tensor[(3), int32] */;
  %911 = cast(%905, dtype="uint8") /* ty=Tensor[(4, 3, 16), uint8] */;
  %912 = dyn.reshape(%909, %910, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %913 = %903.4;
  %914 = multiply(%911, %912) /* ty=Tensor[(4, 3, 16), uint8] */;
  (%913, %914)
}

def @func_1890(%var_1870: Tensor[(5, 7, 2), int32]) -> (Tensor[(5, 7, 2), int32], Tensor[(3, 9, 7), float32]) {
  %915 = cast(meta[relay.Constant][54] /* ty=Tensor[(5, 7, 2), int32] */, dtype="int32") /* ty=Tensor[(5, 7, 2), int32] */;
  %916 = shape_of(%var_1870, dtype="int32") /* ty=Tensor[(3), int32] */;
  %917 = cast(%var_1870, dtype="int32") /* ty=Tensor[(5, 7, 2), int32] */;
  %918 = dyn.reshape(%915, %916, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %919 = @func_1832() /* ty=Tensor[(3, 9, 7), float32] */;
  %920 = cast(%919, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
  %921 = left_shift(%917, %918) /* ty=Tensor[(5, 7, 2), int32] */;
  %922 = log(%920) /* ty=Tensor[(3, 9, 7), float32] */;
  (%921, %922)
}

def @func_5464(%var_5438: Tensor[(11, 13, 7), float32], %var_5453: Tensor[(728, 1), float64], %var_5454: Tensor[(52), uint32]) -> (Tensor[(11, 13, 7), float64], Tensor[(3, 9, 7), float32], Tensor[(13, 4, 8), bool], Tensor[(450), uint32], Tensor[(728, 1), float64], Tensor[(52), uint32], Tensor[(3, 9, 7), float32], Tensor[(11, 13, 7), float64], Tensor[(8, 5, 11), uint8], Tensor[(440), float64]) {
  %923 = cast(%var_5438, dtype="float32") /* ty=Tensor[(11, 13, 7), float32] */;
  %924 = sinh(%923) /* ty=Tensor[(11, 13, 7), float32] */;
  %925 = cast(%924, dtype="float64") /* ty=Tensor[(11, 13, 7), float64] */;
  %926 = @func_3464() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %927 = cast(meta[relay.Constant][55] /* ty=Tensor[(450), uint32] */, dtype="uint32") /* ty=Tensor[(450), uint32] */;
  %928 = cast(%var_5453, dtype="float64") /* ty=Tensor[(728, 1), float64] */;
  %929 = cast(%var_5453, dtype="uint8") /* ty=Tensor[(728, 1), uint8] */;
  %930 = %926.0;
  %931 = cast(%930, dtype="float64") /* ty=Tensor[(3, 9, 7), float64] */;
  %932 = cast(%var_5453, dtype="uint8") /* ty=Tensor[(728, 1), uint8] */;
  %933 = cast(%var_5454, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %934 = reshape(%927, newshape=[10, 9, 5]) /* ty=Tensor[(10, 9, 5), uint32] */;
  %935 = reshape(%928, newshape=[728]) /* ty=Tensor[(728), float64] */;
  %936 = reshape(%929, newshape=[728]) /* ty=Tensor[(728), uint8] */;
  %937 = reshape(%931, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float64] */;
  %938 = reshape(%932, newshape=[728]) /* ty=Tensor[(728), uint8] */;
  %939 = reshape(%933, newshape=[52]) /* ty=Tensor[(52), uint32] */;
  %940 = @func_3325(%934, %935, %936, %937, %938, %939) /* ty=(Tensor[(440), float64], Tensor[(416), uint32], Tensor[(440), float64], Tensor[(10, 9, 5), float32], Tensor[(728), uint64], Tensor[(10, 9, 5), bool], Tensor[(728), int16], Tensor[(728), float64], Tensor[(3, 9, 7), float32], Tensor[(728), bool], Tensor[(13, 4, 8), bool], Tensor[(3, 9, 7), float32], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(8, 5, 11), float64]) */;
  %941 = cast(%924, dtype="float64") /* ty=Tensor[(11, 13, 7), float64] */;
  %942 = cast(meta[relay.Constant][56] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %943 = cast(meta[relay.Constant][56] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %944 = reshape(%942, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
  %945 = reshape(%943, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
  %946 = @func_769(%944, %945) /* ty=(Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(8, 52), uint32], Tensor[(8, 5, 11), bool], Tensor[(8, 5, 11), uint8], Tensor[(8, 5, 11), float64]) */;
  %947 = erf(%925) /* ty=Tensor[(11, 13, 7), float64] */;
  %948 = %940.10;
  %949 = @func_2721() /* ty=Tensor[(3, 9, 7), float32] */;
  %950 = log2(%941) /* ty=Tensor[(11, 13, 7), float64] */;
  %951 = %946.4;
  (%947, %930, %948, meta[relay.Constant][55] /* ty=Tensor[(450), uint32] */, %var_5453, %var_5454, %949, %950, %951, meta[relay.Constant][56] /* ty=Tensor[(440), float64] */)
}

def @func_5866() -> Tensor[(3, 9, 7), float32] {
  @func_1212() /* ty=Tensor[(3, 9, 7), float32] */
}

def @func_4881(%var_4871: Tensor[(252), uint16]) -> (Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(252), uint16], Tensor[(3, 9, 7), float32]) {
  %952 = cast(%var_4871, dtype="uint16") /* ty=Tensor[(252), uint16] */;
  %953 = reshape(%952, newshape=[252]) /* ty=Tensor[(252), uint16] */;
  %954 = @func_4186(%953) /* ty=(Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(252), uint16]) */;
  %955 = @func_3068() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %956 = @func_4629() /* ty=Tensor[(3, 9, 7), float32] */;
  %957 = %954.0;
  %958 = %955.0;
  (%956, %957, %var_4871, %958)
}

def @func_4995() -> Tensor[(3, 9, 7), float32] {
  @func_3522() /* ty=Tensor[(3, 9, 7), float32] */
}

def @func_6256(%var_6235: Tensor[(3, 9, 7), float32], %var_6242: Tensor[(450), uint32], %var_6244: Tensor[(52), uint32]) -> (Tensor[(3, 9, 7), int64], Tensor[(10, 9, 5), float32], Tensor[(450), uint32], Tensor[(728), float64], Tensor[(52), uint32]) {
  %959 = @func_5814() /* ty=Tensor[(3, 9, 7), float32] */;
  %960 = cast(%var_6235, dtype="int64") /* ty=Tensor[(3, 9, 7), int64] */;
  %961 = shape_of(%959, dtype="int32") /* ty=Tensor[(3), int32] */;
  %962 = cast(%959, dtype="int64") /* ty=Tensor[(3, 9, 7), int64] */;
  %963 = dyn.reshape(%960, %961, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %964 = cast(%var_6242, dtype="uint32") /* ty=Tensor[(450), uint32] */;
  %965 = cast(meta[relay.Constant][57] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %966 = cast(meta[relay.Constant][57] /* ty=Tensor[(728), float64] */, dtype="uint8") /* ty=Tensor[(728), uint8] */;
  %967 = cast(%959, dtype="float64") /* ty=Tensor[(3, 9, 7), float64] */;
  %968 = cast(meta[relay.Constant][57] /* ty=Tensor[(728), float64] */, dtype="uint8") /* ty=Tensor[(728), uint8] */;
  %969 = cast(%var_6244, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %970 = reshape(%964, newshape=[10, 9, 5]) /* ty=Tensor[(10, 9, 5), uint32] */;
  %971 = reshape(%965, newshape=[728]) /* ty=Tensor[(728), float64] */;
  %972 = reshape(%966, newshape=[728]) /* ty=Tensor[(728), uint8] */;
  %973 = reshape(%967, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float64] */;
  %974 = reshape(%968, newshape=[728]) /* ty=Tensor[(728), uint8] */;
  %975 = reshape(%969, newshape=[52]) /* ty=Tensor[(52), uint32] */;
  %976 = @func_3325(%970, %971, %972, %973, %974, %975) /* ty=(Tensor[(440), float64], Tensor[(416), uint32], Tensor[(440), float64], Tensor[(10, 9, 5), float32], Tensor[(728), uint64], Tensor[(10, 9, 5), bool], Tensor[(728), int16], Tensor[(728), float64], Tensor[(3, 9, 7), float32], Tensor[(728), bool], Tensor[(13, 4, 8), bool], Tensor[(3, 9, 7), float32], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(8, 5, 11), float64]) */;
  %977 = left_shift(%962, %963) /* ty=Tensor[(3, 9, 7), int64] */;
  %978 = %976.3;
  (%977, %978, %var_6242, meta[relay.Constant][57] /* ty=Tensor[(728), float64] */, %var_6244)
}

def @func_6336() -> (Tensor[(3, 9, 7), float32],) {
  %979 = @func_1721() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(160), float32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) */;
  %980 = %979.3;
  (%980,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4391(%var_4388: Tensor[(52), uint32], %var_4389: Tensor[(105), int8], %var_4390: Tensor[(416), uint32]) -> (Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(416), uint32], Tensor[(52), uint32], Tensor[(105), int8], Tensor[(416), uint32]) {
  @func_4386(%var_4388, %var_4389, %var_4390) /* ty=(Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(416), uint32], Tensor[(52), uint32], Tensor[(105), int8], Tensor[(416), uint32]) */
}

def @func_4629() -> Tensor[(3, 9, 7), float32] {
  @func_3637() /* ty=Tensor[(3, 9, 7), float32] */
}

def @func_2840(%var_2837: Tensor[(70), int32], %var_2838: Tensor[(105), int8], %var_2839: Tensor[(416), uint32]) -> (Tensor[(70), int32], Tensor[(3, 9, 7), int8], Tensor[(5, 3, 7), int8], Tensor[(105), int8], Tensor[(1, 52), uint32], Tensor[(416), uint32]) {
  %19 = fn (%var_2755: Tensor[(70), int32], %var_2798: Tensor[(105), int8], %var_2800: Tensor[(416), uint32]) -> (Tensor[(70), int32], Tensor[(3, 9, 7), int8], Tensor[(5, 3, 7), int8], Tensor[(105), int8], Tensor[(1, 52), uint32], Tensor[(416), uint32]) {
    %0 = @func_1721() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(160), float32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) */;
    %1 = %0.3;
    %2 = cast(%var_2755, dtype="int32") /* ty=Tensor[(70), int32] */;
    %3 = reshape(%2, newshape=[5, 7, 2]) /* ty=Tensor[(5, 7, 2), int32] */;
    %4 = @func_1890(%3) /* ty=(Tensor[(5, 7, 2), int32], Tensor[(3, 9, 7), float32]) */;
    %5 = %4.1;
    %6 = cast(%5, dtype="int8") /* ty=Tensor[(3, 9, 7), int8] */;
    %7 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
    %8 = cast(%1, dtype="int8") /* ty=Tensor[(3, 9, 7), int8] */;
    %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %10 = cast(%var_2798, dtype="int8") /* ty=Tensor[(105), int8] */;
    %11 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 52), uint32] */, dtype="uint32") /* ty=Tensor[(1, 52), uint32] */;
    %12 = cast(%var_2800, dtype="uint32") /* ty=Tensor[(416), uint32] */;
    %13 = reshape(%10, newshape=[5, 3, 7]) /* ty=Tensor[(5, 3, 7), int8] */;
    %14 = reshape(%11, newshape=[52, 1]) /* ty=Tensor[(52, 1), uint32] */;
    %15 = reshape(%12, newshape=[416]) /* ty=Tensor[(416), uint32] */;
    %16 = @func_597(%13, %14, %15) /* ty=(Tensor[(5, 3, 7), int8], Tensor[(13, 4, 8), bool], Tensor[(416), uint32], Tensor[(52), bool]) */;
    %17 = maximum(%8, %9) /* ty=Tensor[(3, 9, 7), int8] */;
    %18 = %16.0;
    (%var_2755, %17, %18, %var_2798, meta[relay.Constant][0] /* ty=Tensor[(1, 52), uint32] */, %var_2800)
  };
  %19(%var_2837, %var_2838, %var_2839) /* ty=(Tensor[(70), int32], Tensor[(3, 9, 7), int8], Tensor[(5, 3, 7), int8], Tensor[(105), int8], Tensor[(1, 52), uint32], Tensor[(416), uint32]) */
}

def @func_4755() -> (Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) {
  %20 = @func_4728() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %21 = %20.0;
  %22 = @func_1811() /* ty=Tensor[(3, 9, 7), float32] */;
  (%21, %22)
}

def @func_4053() -> (Tensor[(3, 9, 7), float32], Tensor[(105), int8], Tensor[(70), int32]) {
  %34 = fn () -> (Tensor[(3, 9, 7), float32], Tensor[(105), int8], Tensor[(70), int32]) {
    %23 = @func_2721() /* ty=Tensor[(3, 9, 7), float32] */;
    %24 = cast(%23, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
    %25 = cast(meta[relay.Constant][1] /* ty=Tensor[(70), int32] */, dtype="int32") /* ty=Tensor[(70), int32] */;
    %26 = cast(%23, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
    %27 = cast(%23, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
    %28 = reshape(%24, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float32] */;
    %29 = reshape(%25, newshape=[7, 10]) /* ty=Tensor[(7, 10), int32] */;
    %30 = reshape(%26, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float32] */;
    %31 = reshape(%27, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float32] */;
    %32 = @func_2375(%28, %29, %30, %31) /* ty=(Tensor[(2, 11, 10), float32], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(440), float64], Tensor[(3, 9, 7), float64], Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(160), float32], Tensor[(416), uint32], Tensor[(3, 9, 7), float32], Tensor[(7, 10), int32], Tensor[(105), int8], Tensor[(416, 728), bool], Tensor[(3, 9, 7), float32], Tensor[(8, 5, 11), uint8], Tensor[(3, 9, 7), int32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), bool], Tensor[(3, 9, 7), float32], Tensor[(13, 4, 8), bool]) */;
    %33 = %32.1;
    (%23, %33, meta[relay.Constant][1] /* ty=Tensor[(70), int32] */)
  };
  %34() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(105), int8], Tensor[(70), int32]) */
}

def @func_1812() -> Tensor[(3, 9, 7), float32] {
  %36 = fn () -> Tensor[(3, 9, 7), float32] {
    %35 = @func_1764() /* ty=(Tensor[(3, 9, 7), float32],) */;
    %35.0
  };
  %36() /* ty=Tensor[(3, 9, 7), float32] */
}

def @func_1765() -> (Tensor[(3, 9, 7), float32],) {
  %38 = fn () -> (Tensor[(3, 9, 7), float32],) {
    %37 = @func_1212() /* ty=Tensor[(3, 9, 7), float32] */;
    (%37,)
  };
  %38() /* ty=(Tensor[(3, 9, 7), float32],) */
}

def @func_5222() -> Tensor[(52), uint32] {
  @func_5220() /* ty=Tensor[(52), uint32] */
}

def @func_5256() -> (Tensor[(3, 9, 7), float32], Tensor[(52), uint32]) {
  %39 = @func_4694() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %40 = @func_4857() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(52), uint32], Tensor[(13, 4, 8), bool], Tensor[(3, 9, 7), float32]) */;
  %41 = %39.0;
  %42 = %40.1;
  (%41, %42)
}

def @func_4674(%var_4671: Tensor[(10, 5, 13), float64], %var_4672: Tensor[(144), int8], %var_4673: Tensor[(52), uint32]) -> (Tensor[(10, 5, 13), float64], Tensor[(3, 9, 7), float32], Tensor[(8, 3, 6), bool], Tensor[(144), int8], Tensor[(1, 105), int8], Tensor[(52), uint32]) {
  @func_4669(%var_4671, %var_4672, %var_4673) /* ty=(Tensor[(10, 5, 13), float64], Tensor[(3, 9, 7), float32], Tensor[(8, 3, 6), bool], Tensor[(144), int8], Tensor[(1, 105), int8], Tensor[(52), uint32]) */
}

def @func_4730() -> (Tensor[(3, 9, 7), float32],) {
  @func_4728() /* ty=(Tensor[(3, 9, 7), float32],) */
}

def @func_3109(%var_3108: Tensor[(26, 2), uint32]) -> (Tensor[(3, 9, 7), float32], Tensor[(416), uint32], Tensor[(105), int8], Tensor[(26, 2), uint32], Tensor[(416), uint32]) {
  %53 = fn (%var_3095: Tensor[(26, 2), uint32]) -> (Tensor[(3, 9, 7), float32], Tensor[(416), uint32], Tensor[(105), int8], Tensor[(26, 2), uint32], Tensor[(416), uint32]) {
    %43 = @func_1046() /* ty=(Tensor[(3, 9, 7), float32],) */;
    %44 = cast(meta[relay.Constant][2] /* ty=Tensor[(105), int8] */, dtype="int8") /* ty=Tensor[(105), int8] */;
    %45 = cast(%var_3095, dtype="uint32") /* ty=Tensor[(26, 2), uint32] */;
    %46 = cast(meta[relay.Constant][3] /* ty=Tensor[(416), uint32] */, dtype="uint32") /* ty=Tensor[(416), uint32] */;
    %47 = reshape(%44, newshape=[5, 3, 7]) /* ty=Tensor[(5, 3, 7), int8] */;
    %48 = reshape(%45, newshape=[52, 1]) /* ty=Tensor[(52, 1), uint32] */;
    %49 = reshape(%46, newshape=[416]) /* ty=Tensor[(416), uint32] */;
    %50 = @func_597(%47, %48, %49) /* ty=(Tensor[(5, 3, 7), int8], Tensor[(13, 4, 8), bool], Tensor[(416), uint32], Tensor[(52), bool]) */;
    %51 = %43.0;
    %52 = %50.2;
    (%51, %52, meta[relay.Constant][2] /* ty=Tensor[(105), int8] */, %var_3095, meta[relay.Constant][3] /* ty=Tensor[(416), uint32] */)
  };
  %53(%var_3108) /* ty=(Tensor[(3, 9, 7), float32], Tensor[(416), uint32], Tensor[(105), int8], Tensor[(26, 2), uint32], Tensor[(416), uint32]) */
}

def @func_5628() -> (Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) {
  %54 = @func_3431() /* ty=Tensor[(3, 9, 7), float32] */;
  %55 = @func_1811() /* ty=Tensor[(3, 9, 7), float32] */;
  %56 = @func_4629() /* ty=Tensor[(3, 9, 7), float32] */;
  (%54, %55, %56)
}

def @func_2168(%var_2163: Tensor[(3, 9, 7), float32], %var_2164: Tensor[(105), int8], %var_2165: Tensor[(52), uint32], %var_2166: Tensor[(5, 88), float64], %var_2167: Tensor[(7, 104), float64]) -> (Tensor[(3, 9, 7), bool], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(8, 5, 11), float64], Tensor[(7, 104), float64], Tensor[(5, 88), uint64], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(110, 4), float32], Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(2, 11, 10), float32], Tensor[(2, 11, 10), float32], Tensor[(220, 416), int32], Tensor[(220, 52), bool]) {
  @func_2161(%var_2163, %var_2164, %var_2165, %var_2166, %var_2167) /* ty=(Tensor[(3, 9, 7), bool], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(8, 5, 11), float64], Tensor[(7, 104), float64], Tensor[(5, 88), uint64], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(110, 4), float32], Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(2, 11, 10), float32], Tensor[(2, 11, 10), float32], Tensor[(220, 416), int32], Tensor[(220, 52), bool]) */
}

def @func_5985() -> Tensor[(13, 4, 8), bool] {
  @func_5983() /* ty=Tensor[(13, 4, 8), bool] */
}

def @func_5704(%var_5702: float64, %var_5703: Tensor[(4, 3, 16), float64]) -> (Tensor[(3, 9, 7), float32], Tensor[(4, 3, 16), uint8]) {
  %69 = fn (%var_5673: float64, %var_5674: Tensor[(4, 3, 16), float64]) -> (Tensor[(3, 9, 7), float32], Tensor[(4, 3, 16), uint8]) {
    %57 = @func_1721() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(160), float32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) */;
    %58 = cast(%var_5674, dtype="float64") /* ty=Tensor[(4, 3, 16), float64] */;
    %59 = sigmoid(%58) /* ty=Tensor[(4, 3, 16), float64] */;
    %60 = cast(%var_5673, dtype="float64") /* ty=float64 */;
    %61 = cast(%var_5674, dtype="float64") /* ty=Tensor[(4, 3, 16), float64] */;
    %62 = power(%60, %61) /* ty=Tensor[(4, 3, 16), float64] */;
    %63 = cast(%62, dtype="uint8") /* ty=Tensor[(4, 3, 16), uint8] */;
    %64 = shape_of(%59, dtype="int32") /* ty=Tensor[(3), int32] */;
    %65 = cast(%59, dtype="uint8") /* ty=Tensor[(4, 3, 16), uint8] */;
    %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %67 = %57.4;
    %68 = multiply(%65, %66) /* ty=Tensor[(4, 3, 16), uint8] */;
    (%67, %68)
  };
  %69(%var_5702, %var_5703) /* ty=(Tensor[(3, 9, 7), float32], Tensor[(4, 3, 16), uint8]) */
}

def @func_4997() -> Tensor[(3, 9, 7), float32] {
  @func_4995() /* ty=Tensor[(3, 9, 7), float32] */
}

def @func_2611(%var_2603: Tensor[(728), float64], %var_2604: Tensor[(416), uint32], %var_2605: Tensor[(440), float64], %var_2608: Tensor[(52), uint32]) -> (Tensor[(3, 9, 7), float32], Tensor[(55, 4), bool], Tensor[(416), uint32], Tensor[(728), float64], Tensor[(416), uint32], Tensor[(440), float64], Tensor[(416), uint32], Tensor[(52), uint32], Tensor[(105), int8]) {
  %70 = @func_1157() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %71 = cast(meta[relay.Constant][4] /* ty=Tensor[(55, 4), float32] */, dtype="float32") /* ty=Tensor[(55, 4), float32] */;
  %72 = reshape(%71, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), float32] */;
  %73 = @func_1197(%72) /* ty=Tensor[(2, 11, 10), float32] */;
  %74 = cast(%73, dtype="bool") /* ty=Tensor[(2, 11, 10), bool] */;
  %75 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(55, 4), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %76 = cast(meta[relay.Constant][4] /* ty=Tensor[(55, 4), float32] */, dtype="bool") /* ty=Tensor[(55, 4), bool] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %78 = cast(%var_2603, dtype="float64") /* ty=Tensor[(728), float64] */;
  %79 = cast(%var_2603, dtype="float64") /* ty=Tensor[(728), float64] */;
  %80 = cast(%var_2604, dtype="uint32") /* ty=Tensor[(416), uint32] */;
  %81 = cast(%var_2605, dtype="float64") /* ty=Tensor[(440), float64] */;
  %82 = reshape(%78, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), float64] */;
  %83 = reshape(%79, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), float64] */;
  %84 = reshape(%80, newshape=[416]) /* ty=Tensor[(416), uint32] */;
  %85 = reshape(%81, newshape=[440]) /* ty=Tensor[(440), float64] */;
  %86 = @func_1125(%82, %83, %84, %85) /* ty=(Tensor[(4, 14, 13), float64], Tensor[(416), uint32], Tensor[(21, 5), int8], Tensor[(13, 4), uint32], Tensor[(416), uint32], Tensor[(8, 52), uint32], Tensor[(440), float64], Tensor[(13, 4, 8), bool]) */;
  %87 = cast(%var_2608, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %88 = cast(meta[relay.Constant][5] /* ty=Tensor[(105), int8] */, dtype="int8") /* ty=Tensor[(105), int8] */;
  %89 = cast(%var_2604, dtype="uint32") /* ty=Tensor[(416), uint32] */;
  %90 = reshape(%87, newshape=[1, 52]) /* ty=Tensor[(1, 52), uint32] */;
  %91 = reshape(%88, newshape=[105]) /* ty=Tensor[(105), int8] */;
  %92 = reshape(%89, newshape=[416]) /* ty=Tensor[(416), uint32] */;
  %93 = @func_894(%90, %91, %92) /* ty=(Tensor[(8, 10, 5), float64], Tensor[(52), uint32], Tensor[(1, 52), uint32], Tensor[(13, 4, 8), bool], Tensor[(105), int8], Tensor[(416), uint32], Tensor[(13, 4, 8), bool]) */;
  %94 = %70.0;
  %95 = logical_and(%76, %77) /* ty=Tensor[(55, 4), bool] */;
  %96 = %86.4;
  %97 = %93.5;
  (%94, %95, %96, %var_2603, %var_2604, %var_2605, %97, %var_2608, meta[relay.Constant][5] /* ty=Tensor[(105), int8] */)
}

def @func_3990(%var_3987: Tensor[(52), uint32], %var_3988: Tensor[(416), uint32], %var_3989: Tensor[(13, 4, 8), float32]) -> (Tensor[(3, 9, 7), float32], Tensor[(52), uint32], Tensor[(416), uint32], Tensor[(13, 4, 8), float64], Tensor[(13, 4, 8), uint64]) {
  @func_3985(%var_3987, %var_3988, %var_3989) /* ty=(Tensor[(3, 9, 7), float32], Tensor[(52), uint32], Tensor[(416), uint32], Tensor[(13, 4, 8), float64], Tensor[(13, 4, 8), uint64]) */
}

def @func_2885(%var_2884: Tensor[(7, 2, 4), float64]) -> (Tensor[(7, 2, 4), float64],) {
  %100 = fn (%var_2879: Tensor[(7, 2, 4), float64]) -> (Tensor[(7, 2, 4), float64],) {
    %98 = cast(%var_2879, dtype="float64") /* ty=Tensor[(7, 2, 4), float64] */;
    %99 = acosh(%98) /* ty=Tensor[(7, 2, 4), float64] */;
    (%99,)
  };
  %100(%var_2884) /* ty=(Tensor[(7, 2, 4), float64],) */
}

def @func_3325(%var_3181: Tensor[(10, 9, 5), uint32], %var_3217: Tensor[(728), float64], %var_3234: Tensor[(728), uint8], %var_3274: Tensor[(3, 9, 7), float64], %var_3280: Tensor[(728), uint8], %var_3314: Tensor[(52), uint32]) -> (Tensor[(440), float64], Tensor[(416), uint32], Tensor[(440), float64], Tensor[(10, 9, 5), float32], Tensor[(728), uint64], Tensor[(10, 9, 5), bool], Tensor[(728), int16], Tensor[(728), float64], Tensor[(3, 9, 7), float32], Tensor[(728), bool], Tensor[(13, 4, 8), bool], Tensor[(3, 9, 7), float32], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(8, 5, 11), float64]) {
  %101 = cast(meta[relay.Constant][6] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %102 = cast(meta[relay.Constant][6] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %103 = cast(meta[relay.Constant][7] /* ty=Tensor[(416), uint32] */, dtype="uint32") /* ty=Tensor[(416), uint32] */;
  %104 = cast(meta[relay.Constant][8] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %105 = reshape(%101, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), float64] */;
  %106 = reshape(%102, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), float64] */;
  %107 = reshape(%103, newshape=[416]) /* ty=Tensor[(416), uint32] */;
  %108 = reshape(%104, newshape=[440]) /* ty=Tensor[(440), float64] */;
  %109 = @func_1125(%105, %106, %107, %108) /* ty=(Tensor[(4, 14, 13), float64], Tensor[(416), uint32], Tensor[(21, 5), int8], Tensor[(13, 4), uint32], Tensor[(416), uint32], Tensor[(8, 52), uint32], Tensor[(440), float64], Tensor[(13, 4, 8), bool]) */;
  %110 = cast(%var_3181, dtype="uint32") /* ty=Tensor[(10, 9, 5), uint32] */;
  %111 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(10, 9, 5), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(meta[relay.Constant][9] /* ty=Tensor[(10, 9, 5), uint32] */, dtype="uint32") /* ty=Tensor[(10, 9, 5), uint32] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %114 = logical_xor(%112, %113) /* ty=Tensor[(10, 9, 5), uint32] */;
  %115 = cast(%114, dtype="float32") /* ty=Tensor[(10, 9, 5), float32] */;
  %116 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(10, 9, 5), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %117 = cast(meta[relay.Constant][9] /* ty=Tensor[(10, 9, 5), uint32] */, dtype="float32") /* ty=Tensor[(10, 9, 5), float32] */;
  %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %119 = cast(meta[relay.Constant][6] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %120 = atan(%119) /* ty=Tensor[(728), float64] */;
  %121 = cast(%var_3217, dtype="uint64") /* ty=Tensor[(728), uint64] */;
  %122 = shape_of(%120, dtype="int32") /* ty=Tensor[(1), int32] */;
  %123 = cast(%120, dtype="uint64") /* ty=Tensor[(728), uint64] */;
  %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %125 = cast(meta[relay.Constant][10] /* ty=Tensor[(10, 9, 5), uint32] */, dtype="bool") /* ty=Tensor[(10, 9, 5), bool] */;
  %126 = shape_of(%var_3181, dtype="int32") /* ty=Tensor[(3), int32] */;
  %127 = cast(%var_3181, dtype="bool") /* ty=Tensor[(10, 9, 5), bool] */;
  %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %129 = cast(%var_3217, dtype="uint8") /* ty=Tensor[(728), uint8] */;
  %130 = shape_of(%120, dtype="int32") /* ty=Tensor[(1), int32] */;
  %131 = cast(%120, dtype="uint8") /* ty=Tensor[(728), uint8] */;
  %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %133 = bitwise_and(%131, %132) /* ty=Tensor[(728), uint8] */;
  %134 = cast(%var_3234, dtype="bool") /* ty=Tensor[(728), bool] */;
  %135 = shape_of(%133, dtype="int32") /* ty=Tensor[(1), int32] */;
  %136 = cast(%133, dtype="bool") /* ty=Tensor[(728), bool] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?), bool] */;
  %138 = greater(%136, %137) /* ty=Tensor[(728), bool] */;
  %139 = cast(%var_3234, dtype="int32") /* ty=Tensor[(728), int32] */;
  %140 = shape_of(%138, dtype="int32") /* ty=Tensor[(1), int32] */;
  %141 = cast(%138, dtype="int32") /* ty=Tensor[(728), int32] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?), int32] */;
  %143 = multiply(%141, %142) /* ty=Tensor[(728), int32] */;
  %144 = cast(%143, dtype="int16") /* ty=Tensor[(728), int16] */;
  %145 = shape_of(%133, dtype="int32") /* ty=Tensor[(1), int32] */;
  %146 = cast(%133, dtype="int16") /* ty=Tensor[(728), int16] */;
  %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?), int16] */;
  %148 = cast(%var_3234, dtype="float64") /* ty=Tensor[(728), float64] */;
  %149 = shape_of(%var_3217, dtype="int32") /* ty=Tensor[(1), int32] */;
  %150 = cast(%var_3217, dtype="float64") /* ty=Tensor[(728), float64] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?), float64] */;
  %152 = @func_2552() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(3, 9, 7), float64]) */;
  %153 = %152.3;
  %154 = cast(%var_3274, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
  %155 = shape_of(%153, dtype="int32") /* ty=Tensor[(3), int32] */;
  %156 = cast(%153, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %158 = cast(%var_3280, dtype="bool") /* ty=Tensor[(728), bool] */;
  %159 = shape_of(%var_3234, dtype="int32") /* ty=Tensor[(1), int32] */;
  %160 = cast(%var_3234, dtype="bool") /* ty=Tensor[(728), bool] */;
  %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?), bool] */;
  %162 = cast(meta[relay.Constant][8] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %163 = %109.6;
  %164 = cast(%163, dtype="float64") /* ty=Tensor[(440), float64] */;
  %165 = reshape(%162, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
  %166 = reshape(%164, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
  %167 = @func_769(%165, %166) /* ty=(Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(8, 52), uint32], Tensor[(8, 5, 11), bool], Tensor[(8, 5, 11), uint8], Tensor[(8, 5, 11), float64]) */;
  %168 = @func_1819() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %169 = cast(%var_3314, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %170 = reshape(%169, newshape=[26, 2]) /* ty=Tensor[(26, 2), uint32] */;
  %171 = @func_3107(%170) /* ty=(Tensor[(3, 9, 7), float32], Tensor[(416), uint32], Tensor[(105), int8], Tensor[(26, 2), uint32], Tensor[(416), uint32]) */;
  %172 = %168.0;
  %173 = cast(%172, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
  %174 = %171.2;
  %175 = cast(%174, dtype="int8") /* ty=Tensor[(105), int8] */;
  %176 = cast(%var_3314, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %177 = cast(%163, dtype="float64") /* ty=Tensor[(440), float64] */;
  %178 = cast(%138, dtype="float64") /* ty=Tensor[(728), float64] */;
  %179 = reshape(%173, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float32] */;
  %180 = reshape(%175, newshape=[105]) /* ty=Tensor[(105), int8] */;
  %181 = reshape(%176, newshape=[52]) /* ty=Tensor[(52), uint32] */;
  %182 = reshape(%177, newshape=[5, 88]) /* ty=Tensor[(5, 88), float64] */;
  %183 = reshape(%178, newshape=[7, 104]) /* ty=Tensor[(7, 104), float64] */;
  %184 = @func_2161(%179, %180, %181, %182, %183) /* ty=(Tensor[(3, 9, 7), bool], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(8, 5, 11), float64], Tensor[(7, 104), float64], Tensor[(5, 88), uint64], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(110, 4), float32], Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(2, 11, 10), float32], Tensor[(2, 11, 10), float32], Tensor[(220, 416), int32], Tensor[(220, 52), bool]) */;
  %185 = power(%117, %118) /* ty=Tensor[(10, 9, 5), float32] */;
  %186 = right_shift(%123, %124) /* ty=Tensor[(728), uint64] */;
  %187 = logical_or(%127, %128) /* ty=Tensor[(10, 9, 5), bool] */;
  %188 = bitwise_xor(%146, %147) /* ty=Tensor[(728), int16] */;
  %189 = mod(%150, %151) /* ty=Tensor[(728), float64] */;
  %190 = power(%156, %157) /* ty=Tensor[(3, 9, 7), float32] */;
  %191 = less(%160, %161) /* ty=Tensor[(728), bool] */;
  %192 = %167.0;
  %193 = %184.3;
  (%163, meta[relay.Constant][7] /* ty=Tensor[(416), uint32] */, meta[relay.Constant][8] /* ty=Tensor[(440), float64] */, %185, %186, %187, %188, %189, %190, %191, %192, %172, %174, %var_3314, %193)
}

def @func_3542() -> Tensor[(3, 9, 7), float32] {
  %194 = fn () -> Tensor[(3, 9, 7), float32] {
    @func_1212() /* ty=Tensor[(3, 9, 7), float32] */
  };
  %194() /* ty=Tensor[(3, 9, 7), float32] */
}

def @func_3062(%var_3059: Tensor[(8, 3, 6), int8], %var_3060: Tensor[(21, 5), int8], %var_3061: Tensor[(52), uint32]) -> (Tensor[(8, 3, 6), bool], Tensor[(13, 4, 8), bool], Tensor[(21, 5), int8], Tensor[(52), uint32], Tensor[(416), uint32]) {
  %208 = fn (%var_3036: Tensor[(8, 3, 6), int8], %var_3054: Tensor[(21, 5), int8], %var_3055: Tensor[(52), uint32]) -> (Tensor[(8, 3, 6), bool], Tensor[(13, 4, 8), bool], Tensor[(21, 5), int8], Tensor[(52), uint32], Tensor[(416), uint32]) {
    %195 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 3, 6), int8] */, dtype="bool") /* ty=Tensor[(8, 3, 6), bool] */;
    %196 = shape_of(%var_3036, dtype="int32") /* ty=Tensor[(3), int32] */;
    %197 = cast(%var_3036, dtype="bool") /* ty=Tensor[(8, 3, 6), bool] */;
    %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %199 = cast(%var_3054, dtype="int8") /* ty=Tensor[(21, 5), int8] */;
    %200 = cast(%var_3055, dtype="uint32") /* ty=Tensor[(52), uint32] */;
    %201 = cast(meta[relay.Constant][12] /* ty=Tensor[(416), uint32] */, dtype="uint32") /* ty=Tensor[(416), uint32] */;
    %202 = reshape(%199, newshape=[5, 3, 7]) /* ty=Tensor[(5, 3, 7), int8] */;
    %203 = reshape(%200, newshape=[52, 1]) /* ty=Tensor[(52, 1), uint32] */;
    %204 = reshape(%201, newshape=[416]) /* ty=Tensor[(416), uint32] */;
    %205 = @func_597(%202, %203, %204) /* ty=(Tensor[(5, 3, 7), int8], Tensor[(13, 4, 8), bool], Tensor[(416), uint32], Tensor[(52), bool]) */;
    %206 = equal(%197, %198) /* ty=Tensor[(8, 3, 6), bool] */;
    %207 = %205.1;
    (%206, %207, %var_3054, %var_3055, meta[relay.Constant][12] /* ty=Tensor[(416), uint32] */)
  };
  %208(%var_3059, %var_3060, %var_3061) /* ty=(Tensor[(8, 3, 6), bool], Tensor[(13, 4, 8), bool], Tensor[(21, 5), int8], Tensor[(52), uint32], Tensor[(416), uint32]) */
}

def @func_5074() -> Tensor[(160), float32] {
  @func_5072() /* ty=Tensor[(160), float32] */
}

def @func_4669(%var_4655: Tensor[(10, 5, 13), float64], %var_4661: Tensor[(144), int8], %var_4663: Tensor[(52), uint32]) -> (Tensor[(10, 5, 13), float64], Tensor[(3, 9, 7), float32], Tensor[(8, 3, 6), bool], Tensor[(144), int8], Tensor[(1, 105), int8], Tensor[(52), uint32]) {
  %209 = cast(%var_4655, dtype="float64") /* ty=Tensor[(10, 5, 13), float64] */;
  %210 = cast(%var_4661, dtype="int8") /* ty=Tensor[(144), int8] */;
  %211 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 105), int8] */, dtype="int8") /* ty=Tensor[(1, 105), int8] */;
  %212 = cast(%var_4663, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %213 = reshape(%210, newshape=[8, 3, 6]) /* ty=Tensor[(8, 3, 6), int8] */;
  %214 = reshape(%211, newshape=[21, 5]) /* ty=Tensor[(21, 5), int8] */;
  %215 = reshape(%212, newshape=[52]) /* ty=Tensor[(52), uint32] */;
  %216 = @func_3058(%213, %214, %215) /* ty=(Tensor[(8, 3, 6), bool], Tensor[(13, 4, 8), bool], Tensor[(21, 5), int8], Tensor[(52), uint32], Tensor[(416), uint32]) */;
  %217 = cosh(%209) /* ty=Tensor[(10, 5, 13), float64] */;
  %218 = @func_1811() /* ty=Tensor[(3, 9, 7), float32] */;
  %219 = %216.0;
  (%217, %218, %219, %var_4661, meta[relay.Constant][13] /* ty=Tensor[(1, 105), int8] */, %var_4663)
}

def @func_3725(%var_3697: Tensor[(1, 728), float64]) -> (Tensor[(3, 9, 7), float32], Tensor[(220, 52), bool], Tensor[(105, 1), int8], Tensor[(52), uint32], Tensor[(5, 88), float64], Tensor[(1, 728), float64], Tensor[(3, 9, 7), float32]) {
  %220 = @func_3068() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %221 = %220.0;
  %222 = cast(%221, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
  %223 = cast(meta[relay.Constant][14] /* ty=Tensor[(105, 1), int8] */, dtype="int8") /* ty=Tensor[(105, 1), int8] */;
  %224 = cast(meta[relay.Constant][15] /* ty=Tensor[(52), uint32] */, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %225 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 88), float64] */, dtype="float64") /* ty=Tensor[(5, 88), float64] */;
  %226 = cast(%var_3697, dtype="float64") /* ty=Tensor[(1, 728), float64] */;
  %227 = reshape(%222, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float32] */;
  %228 = reshape(%223, newshape=[105]) /* ty=Tensor[(105), int8] */;
  %229 = reshape(%224, newshape=[52]) /* ty=Tensor[(52), uint32] */;
  %230 = reshape(%225, newshape=[5, 88]) /* ty=Tensor[(5, 88), float64] */;
  %231 = reshape(%226, newshape=[7, 104]) /* ty=Tensor[(7, 104), float64] */;
  %232 = @func_2161(%227, %228, %229, %230, %231) /* ty=(Tensor[(3, 9, 7), bool], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(8, 5, 11), float64], Tensor[(7, 104), float64], Tensor[(5, 88), uint64], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(110, 4), float32], Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(2, 11, 10), float32], Tensor[(2, 11, 10), float32], Tensor[(220, 416), int32], Tensor[(220, 52), bool]) */;
  %233 = @func_3068() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %234 = %232.14;
  %235 = %233.0;
  (%221, %234, meta[relay.Constant][14] /* ty=Tensor[(105, 1), int8] */, meta[relay.Constant][15] /* ty=Tensor[(52), uint32] */, meta[relay.Constant][16] /* ty=Tensor[(5, 88), float64] */, %var_3697, %235)
}

def @func_1964(%var_1962: Tensor[(3, 9, 7), float32]) -> (Tensor[(160), float32], Tensor[(440), float64], Tensor[(220), float32], Tensor[(728), float64], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float64], Tensor[(3, 9, 7), uint8], Tensor[(3, 9, 7), float32]) {
  @func_1961(%var_1962) /* ty=(Tensor[(160), float32], Tensor[(440), float64], Tensor[(220), float32], Tensor[(728), float64], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float64], Tensor[(3, 9, 7), uint8], Tensor[(3, 9, 7), float32]) */
}

def @func_1820() -> (Tensor[(3, 9, 7), float32],) {
  %237 = fn () -> (Tensor[(3, 9, 7), float32],) {
    %236 = @func_1212() /* ty=Tensor[(3, 9, 7), float32] */;
    (%236,)
  };
  %237() /* ty=(Tensor[(3, 9, 7), float32],) */
}

def @func_1159() -> (Tensor[(3, 9, 7), float32],) {
  @func_1157() /* ty=(Tensor[(3, 9, 7), float32],) */
}

def @func_1667(%var_1665: Tensor[(10, 2, 8), float32]) -> Tensor[(10, 2, 8), float32] {
  @func_1664(%var_1665) /* ty=Tensor[(10, 2, 8), float32] */
}

def @func_4973() -> (Tensor[(3, 9, 7), float32],) {
  %238 = @func_4857() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(52), uint32], Tensor[(13, 4, 8), bool], Tensor[(3, 9, 7), float32]) */;
  %239 = %238.3;
  (%239,)
}

def @func_3822() -> (Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) {
  %244 = fn () -> (Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) {
    %240 = @func_1832() /* ty=Tensor[(3, 9, 7), float32] */;
    %241 = cast(%240, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
    %242 = sinh(%241) /* ty=Tensor[(3, 9, 7), float32] */;
    %243 = @func_1811() /* ty=Tensor[(3, 9, 7), float32] */;
    (%242, %243)
  };
  %244() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) */
}

def @func_3432() -> Tensor[(3, 9, 7), float32] {
  %246 = fn () -> Tensor[(3, 9, 7), float32] {
    %245 = @func_1046() /* ty=(Tensor[(3, 9, 7), float32],) */;
    %245.0
  };
  %246() /* ty=Tensor[(3, 9, 7), float32] */
}

def @func_4188(%var_4187: Tensor[(252), uint16]) -> (Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(252), uint16]) {
  %255 = fn (%var_4177: Tensor[(252), uint16]) -> (Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(252), uint16]) {
    %247 = @func_4052() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(105), int8], Tensor[(70), int32]) */;
    %248 = cast(%var_4177, dtype="uint16") /* ty=Tensor[(252), uint16] */;
    %249 = cast(%var_4177, dtype="uint16") /* ty=Tensor[(252), uint16] */;
    %250 = reshape(%248, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), uint16] */;
    %251 = reshape(%249, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), uint16] */;
    %252 = @func_3377(%250, %251) /* ty=(Tensor[(3, 7, 12), uint16], Tensor[(10, 2, 8), float32], Tensor[(160), float32]) */;
    %253 = %247.0;
    %254 = %252.1;
    (%253, %254, %var_4177)
  };
  %255(%var_4187) /* ty=(Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(252), uint16]) */
}

def @func_6313() -> Tensor[(52), uint32] {
  %257 = fn () -> Tensor[(52), uint32] {
    %256 = @func_5256() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(52), uint32]) */;
    %256.1
  };
  %257() /* ty=Tensor[(52), uint32] */
}

def @func_4757() -> (Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) {
  @func_4755() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) */
}

def @func_6076() -> (Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) {
  %262 = fn () -> (Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) {
    %258 = @func_5814() /* ty=Tensor[(3, 9, 7), float32] */;
    %259 = cast(%258, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
    %260 = sigmoid(%259) /* ty=Tensor[(3, 9, 7), float32] */;
    %261 = @func_1212() /* ty=Tensor[(3, 9, 7), float32] */;
    (%260, %261)
  };
  %262() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) */
}

def @func_3906(%var_3904: Tensor[(70), int32]) -> (Tensor[(3, 9, 7), float32], Tensor[(52), bool], Tensor[(5, 7, 2), int32], Tensor[(70), int32]) {
  @func_3903(%var_3904) /* ty=(Tensor[(3, 9, 7), float32], Tensor[(52), bool], Tensor[(5, 7, 2), int32], Tensor[(70), int32]) */
}

def @func_602(%var_599: Tensor[(5, 3, 7), int8], %var_600: Tensor[(52, 1), uint32], %var_601: Tensor[(416), uint32]) -> (Tensor[(5, 3, 7), int8], Tensor[(13, 4, 8), bool], Tensor[(416), uint32], Tensor[(52), bool]) {
  @func_597(%var_599, %var_600, %var_601) /* ty=(Tensor[(5, 3, 7), int8], Tensor[(13, 4, 8), bool], Tensor[(416), uint32], Tensor[(52), bool]) */
}

def @func_5195(%var_5193: Tensor[(5, 8, 2), float32], %var_5194: Tensor[(252), uint16]) -> (Tensor[(5, 8, 2), float32], Tensor[(3, 9, 7), float32], Tensor[(252), uint16], Tensor[(3, 9, 7), float32], Tensor[(5, 8, 2), float32]) {
  %272 = fn (%var_5162: Tensor[(5, 8, 2), float32], %var_5173: Tensor[(252), uint16]) -> (Tensor[(5, 8, 2), float32], Tensor[(3, 9, 7), float32], Tensor[(252), uint16], Tensor[(3, 9, 7), float32], Tensor[(5, 8, 2), float32]) {
    %263 = cast(%var_5162, dtype="float32") /* ty=Tensor[(5, 8, 2), float32] */;
    %264 = cast(%var_5173, dtype="uint16") /* ty=Tensor[(252), uint16] */;
    %265 = reshape(%264, newshape=[252]) /* ty=Tensor[(252), uint16] */;
    %266 = @func_4881(%265) /* ty=(Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(252), uint16], Tensor[(3, 9, 7), float32]) */;
    %267 = cast(%var_5162, dtype="float32") /* ty=Tensor[(5, 8, 2), float32] */;
    %268 = acos(%263) /* ty=Tensor[(5, 8, 2), float32] */;
    %269 = %266.3;
    %270 = @func_5133() /* ty=Tensor[(3, 9, 7), float32] */;
    %271 = log2(%267) /* ty=Tensor[(5, 8, 2), float32] */;
    (%268, %269, %var_5173, %270, %271)
  };
  %272(%var_5193, %var_5194) /* ty=(Tensor[(5, 8, 2), float32], Tensor[(3, 9, 7), float32], Tensor[(252), uint16], Tensor[(3, 9, 7), float32], Tensor[(5, 8, 2), float32]) */
}

def @func_4694() -> (Tensor[(3, 9, 7), float32],) {
  %273 = @func_1819() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %274 = %273.0;
  (%274,)
}

def @func_5994() -> Tensor[(13, 4, 8), bool] {
  %275 = fn () -> Tensor[(13, 4, 8), bool] {
    @func_5983() /* ty=Tensor[(13, 4, 8), bool] */
  };
  %275() /* ty=Tensor[(13, 4, 8), bool] */
}

def @func_4857() -> (Tensor[(3, 9, 7), float32], Tensor[(52), uint32], Tensor[(13, 4, 8), bool], Tensor[(3, 9, 7), float32]) {
  %276 = cast(meta[relay.Constant][17] /* ty=Tensor[(52), uint32] */, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %277 = cast(meta[relay.Constant][18] /* ty=Tensor[(416), uint32] */, dtype="uint32") /* ty=Tensor[(416), uint32] */;
  %278 = reshape(%276, newshape=[13, 4, 1]) /* ty=Tensor[(13, 4, 1), uint32] */;
  %279 = reshape(%277, newshape=[13, 4, 8]) /* ty=Tensor[(13, 4, 8), uint32] */;
  %280 = @func_420(%278, %279) /* ty=(Tensor[(13, 4, 8), bool],) */;
  %281 = %280.0;
  %282 = cast(meta[relay.Constant][18] /* ty=Tensor[(416), uint32] */, dtype="bool") /* ty=Tensor[(416), bool] */;
  %283 = shape_of(%281, dtype="int32") /* ty=Tensor[(3), int32] */;
  %284 = cast(%281, dtype="bool") /* ty=Tensor[(13, 4, 8), bool] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %286 = @func_1764() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %287 = @func_2721() /* ty=Tensor[(3, 9, 7), float32] */;
  %288 = logical_or(%284, %285) /* ty=Tensor[(13, 4, 8), bool] */;
  %289 = %286.0;
  (%287, meta[relay.Constant][17] /* ty=Tensor[(52), uint32] */, %288, %289)
}

def @func_3070() -> (Tensor[(3, 9, 7), float32],) {
  @func_3068() /* ty=(Tensor[(3, 9, 7), float32],) */
}

def @func_5258() -> (Tensor[(3, 9, 7), float32], Tensor[(52), uint32]) {
  @func_5256() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(52), uint32]) */
}

def @func_899(%var_896: Tensor[(1, 52), uint32], %var_897: Tensor[(105), int8], %var_898: Tensor[(416), uint32]) -> (Tensor[(8, 10, 5), float64], Tensor[(52), uint32], Tensor[(1, 52), uint32], Tensor[(13, 4, 8), bool], Tensor[(105), int8], Tensor[(416), uint32], Tensor[(13, 4, 8), bool]) {
  @func_894(%var_896, %var_897, %var_898) /* ty=(Tensor[(8, 10, 5), float64], Tensor[(52), uint32], Tensor[(1, 52), uint32], Tensor[(13, 4, 8), bool], Tensor[(105), int8], Tensor[(416), uint32], Tensor[(13, 4, 8), bool]) */
}

def @func_423(%var_421: Tensor[(13, 4, 1), uint32], %var_422: Tensor[(13, 4, 8), uint32]) -> (Tensor[(13, 4, 8), bool],) {
  %293 = fn (%var_407: Tensor[(13, 4, 1), uint32], %var_408: Tensor[(13, 4, 8), uint32]) -> (Tensor[(13, 4, 8), bool],) {
    %290 = cast(%var_407, dtype="bool") /* ty=Tensor[(13, 4, 1), bool] */;
    %291 = cast(%var_408, dtype="bool") /* ty=Tensor[(13, 4, 8), bool] */;
    %292 = greater_equal(%290, %291) /* ty=Tensor[(13, 4, 8), bool] */;
    (%292,)
  };
  %293(%var_421, %var_422) /* ty=(Tensor[(13, 4, 8), bool],) */
}

def @func_4859() -> (Tensor[(3, 9, 7), float32], Tensor[(52), uint32], Tensor[(13, 4, 8), bool], Tensor[(3, 9, 7), float32]) {
  @func_4857() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(52), uint32], Tensor[(13, 4, 8), bool], Tensor[(3, 9, 7), float32]) */
}

def @func_4563(%var_4552: Tensor[(416), uint32], %var_4553: Tensor[(440), float64]) -> (Tensor[(3, 9, 7), float32], Tensor[(21, 5), int8], Tensor[(728), float64], Tensor[(416), uint32], Tensor[(440), float64]) {
  %294 = cast(meta[relay.Constant][19] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %295 = cast(meta[relay.Constant][19] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %296 = cast(%var_4552, dtype="uint32") /* ty=Tensor[(416), uint32] */;
  %297 = cast(%var_4553, dtype="float64") /* ty=Tensor[(440), float64] */;
  %298 = reshape(%294, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), float64] */;
  %299 = reshape(%295, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), float64] */;
  %300 = reshape(%296, newshape=[416]) /* ty=Tensor[(416), uint32] */;
  %301 = reshape(%297, newshape=[440]) /* ty=Tensor[(440), float64] */;
  %302 = @func_1125(%298, %299, %300, %301) /* ty=(Tensor[(4, 14, 13), float64], Tensor[(416), uint32], Tensor[(21, 5), int8], Tensor[(13, 4), uint32], Tensor[(416), uint32], Tensor[(8, 52), uint32], Tensor[(440), float64], Tensor[(13, 4, 8), bool]) */;
  %303 = @func_3431() /* ty=Tensor[(3, 9, 7), float32] */;
  %304 = %302.2;
  (%303, %304, meta[relay.Constant][19] /* ty=Tensor[(728), float64] */, %var_4552, %var_4553)
}

def @func_1833() -> Tensor[(3, 9, 7), float32] {
  %306 = fn () -> Tensor[(3, 9, 7), float32] {
    %305 = @func_1157() /* ty=(Tensor[(3, 9, 7), float32],) */;
    %305.0
  };
  %306() /* ty=Tensor[(3, 9, 7), float32] */
}

def @func_3523() -> Tensor[(3, 9, 7), float32] {
  %308 = fn () -> Tensor[(3, 9, 7), float32] {
    %307 = @func_1046() /* ty=(Tensor[(3, 9, 7), float32],) */;
    %307.0
  };
  %308() /* ty=Tensor[(3, 9, 7), float32] */
}

def @func_5327(%var_5326: Tensor[(3, 9, 7), float32]) -> Tensor[(3, 9, 7), bool] {
  %314 = fn (%var_5319: Tensor[(3, 9, 7), float32]) -> Tensor[(3, 9, 7), bool] {
    %309 = @func_3522() /* ty=Tensor[(3, 9, 7), float32] */;
    %310 = cast(%var_5319, dtype="bool") /* ty=Tensor[(3, 9, 7), bool] */;
    %311 = shape_of(%309, dtype="int32") /* ty=Tensor[(3), int32] */;
    %312 = cast(%309, dtype="bool") /* ty=Tensor[(3, 9, 7), bool] */;
    %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less(%312, %313) /* ty=Tensor[(3, 9, 7), bool] */
  };
  %314(%var_5326) /* ty=Tensor[(3, 9, 7), bool] */
}

def @func_5756() -> Tensor[(52), uint32] {
  %316 = fn () -> Tensor[(52), uint32] {
    %315 = @func_3591() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(52), uint32], Tensor[(52), uint32]) */;
    %315.1
  };
  %316() /* ty=Tensor[(52), uint32] */
}

def @func_1130(%var_1126: Tensor[(4, 14, 13), float64], %var_1127: Tensor[(4, 14, 13), float64], %var_1128: Tensor[(416), uint32], %var_1129: Tensor[(440), float64]) -> (Tensor[(4, 14, 13), float64], Tensor[(416), uint32], Tensor[(21, 5), int8], Tensor[(13, 4), uint32], Tensor[(416), uint32], Tensor[(8, 52), uint32], Tensor[(440), float64], Tensor[(13, 4, 8), bool]) {
  %342 = fn (%var_1078: Tensor[(4, 14, 13), float64], %var_1079: Tensor[(4, 14, 13), float64], %var_1088: Tensor[(416), uint32], %var_1097: Tensor[(440), float64]) -> (Tensor[(4, 14, 13), float64], Tensor[(416), uint32], Tensor[(21, 5), int8], Tensor[(13, 4), uint32], Tensor[(416), uint32], Tensor[(8, 52), uint32], Tensor[(440), float64], Tensor[(13, 4, 8), bool]) {
    %317 = cast(%var_1079, dtype="float64") /* ty=Tensor[(4, 14, 13), float64] */;
    %318 = shape_of(%var_1078, dtype="int32") /* ty=Tensor[(3), int32] */;
    %319 = cast(%var_1078, dtype="float64") /* ty=Tensor[(4, 14, 13), float64] */;
    %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %321 = cast(meta[relay.Constant][20] /* ty=Tensor[(21, 5), int8] */, dtype="int8") /* ty=Tensor[(21, 5), int8] */;
    %322 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 4), uint32] */, dtype="uint32") /* ty=Tensor[(13, 4), uint32] */;
    %323 = cast(%var_1088, dtype="uint32") /* ty=Tensor[(416), uint32] */;
    %324 = reshape(%321, newshape=[5, 3, 7]) /* ty=Tensor[(5, 3, 7), int8] */;
    %325 = reshape(%322, newshape=[52, 1]) /* ty=Tensor[(52, 1), uint32] */;
    %326 = reshape(%323, newshape=[416]) /* ty=Tensor[(416), uint32] */;
    %327 = @func_597(%324, %325, %326) /* ty=(Tensor[(5, 3, 7), int8], Tensor[(13, 4, 8), bool], Tensor[(416), uint32], Tensor[(52), bool]) */;
    %328 = cast(%var_1097, dtype="float64") /* ty=Tensor[(440), float64] */;
    %329 = cast(%var_1097, dtype="float64") /* ty=Tensor[(440), float64] */;
    %330 = reshape(%328, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
    %331 = reshape(%329, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
    %332 = @func_769(%330, %331) /* ty=(Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(8, 52), uint32], Tensor[(8, 5, 11), bool], Tensor[(8, 5, 11), uint8], Tensor[(8, 5, 11), float64]) */;
    %333 = cast(%var_1097, dtype="float64") /* ty=Tensor[(440), float64] */;
    %334 = cast(%var_1097, dtype="float64") /* ty=Tensor[(440), float64] */;
    %335 = reshape(%333, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
    %336 = reshape(%334, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
    %337 = @func_769(%335, %336) /* ty=(Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(8, 52), uint32], Tensor[(8, 5, 11), bool], Tensor[(8, 5, 11), uint8], Tensor[(8, 5, 11), float64]) */;
    %338 = floor_mod(%319, %320) /* ty=Tensor[(4, 14, 13), float64] */;
    %339 = %327.2;
    %340 = %332.2;
    %341 = %337.0;
    (%338, %339, meta[relay.Constant][20] /* ty=Tensor[(21, 5), int8] */, meta[relay.Constant][21] /* ty=Tensor[(13, 4), uint32] */, %var_1088, %340, %var_1097, %341)
  };
  %342(%var_1126, %var_1127, %var_1128, %var_1129) /* ty=(Tensor[(4, 14, 13), float64], Tensor[(416), uint32], Tensor[(21, 5), int8], Tensor[(13, 4), uint32], Tensor[(416), uint32], Tensor[(8, 52), uint32], Tensor[(440), float64], Tensor[(13, 4, 8), bool]) */
}

def @func_4631() -> Tensor[(3, 9, 7), float32] {
  @func_4629() /* ty=Tensor[(3, 9, 7), float32] */
}

def @func_3985(%var_3935: Tensor[(52), uint32], %var_3936: Tensor[(416), uint32], %var_3975: Tensor[(13, 4, 8), float32]) -> (Tensor[(3, 9, 7), float32], Tensor[(52), uint32], Tensor[(416), uint32], Tensor[(13, 4, 8), float64], Tensor[(13, 4, 8), uint64]) {
  %343 = @func_1157() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %344 = cast(%var_3935, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %345 = cast(%var_3936, dtype="uint32") /* ty=Tensor[(416), uint32] */;
  %346 = reshape(%344, newshape=[13, 4, 1]) /* ty=Tensor[(13, 4, 1), uint32] */;
  %347 = reshape(%345, newshape=[13, 4, 8]) /* ty=Tensor[(13, 4, 8), uint32] */;
  %348 = @func_420(%346, %347) /* ty=(Tensor[(13, 4, 8), bool],) */;
  %349 = %348.0;
  %350 = cast(%349, dtype="float32") /* ty=Tensor[(13, 4, 8), float32] */;
  %351 = acos(%350) /* ty=Tensor[(13, 4, 8), float32] */;
  %352 = cast(%351, dtype="float64") /* ty=Tensor[(13, 4, 8), float64] */;
  %353 = sinh(%352) /* ty=Tensor[(13, 4, 8), float64] */;
  %354 = cast(%353, dtype="float64") /* ty=Tensor[(13, 4, 8), float64] */;
  %355 = cast(%var_3975, dtype="uint64") /* ty=Tensor[(13, 4, 8), uint64] */;
  %356 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %357 = cast(%351, dtype="uint64") /* ty=Tensor[(13, 4, 8), uint64] */;
  %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %359 = %343.0;
  %360 = sigmoid(%354) /* ty=Tensor[(13, 4, 8), float64] */;
  %361 = maximum(%357, %358) /* ty=Tensor[(13, 4, 8), uint64] */;
  (%359, %var_3935, %var_3936, %360, %361)
}

def @func_4773(%var_4772: Tensor[(2, 15, 5), uint64]) -> Tensor[(2, 15, 5), uint64] {
  %366 = fn (%var_4766: Tensor[(2, 15, 5), uint64]) -> Tensor[(2, 15, 5), uint64] {
    %362 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 15, 5), uint64] */, dtype="uint64") /* ty=Tensor[(2, 15, 5), uint64] */;
    %363 = shape_of(%var_4766, dtype="int32") /* ty=Tensor[(3), int32] */;
    %364 = cast(%var_4766, dtype="uint64") /* ty=Tensor[(2, 15, 5), uint64] */;
    %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    bitwise_or(%364, %365) /* ty=Tensor[(2, 15, 5), uint64] */
  };
  %366(%var_4772) /* ty=Tensor[(2, 15, 5), uint64] */
}

def @func_6494() -> (Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) {
  %367 = @func_4973() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %368 = @func_5628() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) */;
  %369 = %367.0;
  %370 = %368.0;
  (%369, %370)
}

def @func_6380() -> Tensor[(3, 9, 7), float32] {
  %371 = @func_1819() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %371.0
}

def @func_3466() -> (Tensor[(3, 9, 7), float32],) {
  @func_3464() /* ty=(Tensor[(3, 9, 7), float32],) */
}

def @func_5468(%var_5465: Tensor[(11, 13, 7), float32], %var_5466: Tensor[(728, 1), float64], %var_5467: Tensor[(52), uint32]) -> (Tensor[(11, 13, 7), float64], Tensor[(3, 9, 7), float32], Tensor[(13, 4, 8), bool], Tensor[(450), uint32], Tensor[(728, 1), float64], Tensor[(52), uint32], Tensor[(3, 9, 7), float32], Tensor[(11, 13, 7), float64], Tensor[(8, 5, 11), uint8], Tensor[(440), float64]) {
  %401 = fn (%var_5438: Tensor[(11, 13, 7), float32], %var_5453: Tensor[(728, 1), float64], %var_5454: Tensor[(52), uint32]) -> (Tensor[(11, 13, 7), float64], Tensor[(3, 9, 7), float32], Tensor[(13, 4, 8), bool], Tensor[(450), uint32], Tensor[(728, 1), float64], Tensor[(52), uint32], Tensor[(3, 9, 7), float32], Tensor[(11, 13, 7), float64], Tensor[(8, 5, 11), uint8], Tensor[(440), float64]) {
    %372 = cast(%var_5438, dtype="float32") /* ty=Tensor[(11, 13, 7), float32] */;
    %373 = sinh(%372) /* ty=Tensor[(11, 13, 7), float32] */;
    %374 = cast(%373, dtype="float64") /* ty=Tensor[(11, 13, 7), float64] */;
    %375 = @func_3464() /* ty=(Tensor[(3, 9, 7), float32],) */;
    %376 = cast(meta[relay.Constant][23] /* ty=Tensor[(450), uint32] */, dtype="uint32") /* ty=Tensor[(450), uint32] */;
    %377 = cast(%var_5453, dtype="float64") /* ty=Tensor[(728, 1), float64] */;
    %378 = cast(%var_5453, dtype="uint8") /* ty=Tensor[(728, 1), uint8] */;
    %379 = %375.0;
    %380 = cast(%379, dtype="float64") /* ty=Tensor[(3, 9, 7), float64] */;
    %381 = cast(%var_5453, dtype="uint8") /* ty=Tensor[(728, 1), uint8] */;
    %382 = cast(%var_5454, dtype="uint32") /* ty=Tensor[(52), uint32] */;
    %383 = reshape(%376, newshape=[10, 9, 5]) /* ty=Tensor[(10, 9, 5), uint32] */;
    %384 = reshape(%377, newshape=[728]) /* ty=Tensor[(728), float64] */;
    %385 = reshape(%378, newshape=[728]) /* ty=Tensor[(728), uint8] */;
    %386 = reshape(%380, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float64] */;
    %387 = reshape(%381, newshape=[728]) /* ty=Tensor[(728), uint8] */;
    %388 = reshape(%382, newshape=[52]) /* ty=Tensor[(52), uint32] */;
    %389 = @func_3325(%383, %384, %385, %386, %387, %388) /* ty=(Tensor[(440), float64], Tensor[(416), uint32], Tensor[(440), float64], Tensor[(10, 9, 5), float32], Tensor[(728), uint64], Tensor[(10, 9, 5), bool], Tensor[(728), int16], Tensor[(728), float64], Tensor[(3, 9, 7), float32], Tensor[(728), bool], Tensor[(13, 4, 8), bool], Tensor[(3, 9, 7), float32], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(8, 5, 11), float64]) */;
    %390 = cast(%373, dtype="float64") /* ty=Tensor[(11, 13, 7), float64] */;
    %391 = cast(meta[relay.Constant][24] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
    %392 = cast(meta[relay.Constant][24] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
    %393 = reshape(%391, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
    %394 = reshape(%392, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
    %395 = @func_769(%393, %394) /* ty=(Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(8, 52), uint32], Tensor[(8, 5, 11), bool], Tensor[(8, 5, 11), uint8], Tensor[(8, 5, 11), float64]) */;
    %396 = erf(%374) /* ty=Tensor[(11, 13, 7), float64] */;
    %397 = %389.10;
    %398 = @func_2721() /* ty=Tensor[(3, 9, 7), float32] */;
    %399 = log2(%390) /* ty=Tensor[(11, 13, 7), float64] */;
    %400 = %395.4;
    (%396, %379, %397, meta[relay.Constant][23] /* ty=Tensor[(450), uint32] */, %var_5453, %var_5454, %398, %399, %400, meta[relay.Constant][24] /* ty=Tensor[(440), float64] */)
  };
  %401(%var_5465, %var_5466, %var_5467) /* ty=(Tensor[(11, 13, 7), float64], Tensor[(3, 9, 7), float32], Tensor[(13, 4, 8), bool], Tensor[(450), uint32], Tensor[(728, 1), float64], Tensor[(52), uint32], Tensor[(3, 9, 7), float32], Tensor[(11, 13, 7), float64], Tensor[(8, 5, 11), uint8], Tensor[(440), float64]) */
}

def @func_5630() -> (Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) {
  @func_5628() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) */
}

def @func_1961(%var_1953: Tensor[(3, 9, 7), float32]) -> (Tensor[(160), float32], Tensor[(440), float64], Tensor[(220), float32], Tensor[(728), float64], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float64], Tensor[(3, 9, 7), uint8], Tensor[(3, 9, 7), float32]) {
  %402 = @func_1721() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(160), float32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) */;
  %403 = cast(meta[relay.Constant][25] /* ty=Tensor[(220), float32] */, dtype="float32") /* ty=Tensor[(220), float32] */;
  %404 = cast(meta[relay.Constant][26] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %405 = reshape(%403, newshape=[220]) /* ty=Tensor[(220), float32] */;
  %406 = reshape(%404, newshape=[728]) /* ty=Tensor[(728), float64] */;
  %407 = @func_1542(%405, %406) /* ty=(Tensor[(3, 9, 7), float32], Tensor[(2, 11, 10), float32], Tensor[(220), float32], Tensor[(2, 11, 10), float32], Tensor[(440), float64], Tensor[(728), float64], Tensor[(416), uint32], Tensor[(110, 4), float64], Tensor[(3, 9, 7), float32], Tensor[(10, 2, 16), float32], Tensor[(4, 80), bool], Tensor[(5, 3, 7), int8], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(3, 9, 7), float32], Tensor[(8, 5, 11), bool], Tensor[(8, 5, 11), float32], Tensor[(8, 5, 11), float32]) */;
  %408 = @func_1157() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %409 = @func_1157() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %410 = %409.0;
  %411 = cast(%410, dtype="float64") /* ty=Tensor[(3, 9, 7), float64] */;
  %412 = cast(%410, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
  %413 = erf(%412) /* ty=Tensor[(3, 9, 7), float32] */;
  %414 = cast(%var_1953, dtype="uint8") /* ty=Tensor[(3, 9, 7), uint8] */;
  %415 = shape_of(%413, dtype="int32") /* ty=Tensor[(3), int32] */;
  %416 = cast(%413, dtype="uint8") /* ty=Tensor[(3, 9, 7), uint8] */;
  %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %418 = cast(%var_1953, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
  %419 = reshape(%418, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float32] */;
  %420 = %402.2;
  %421 = %407.4;
  %422 = %408.0;
  %423 = exp(%411) /* ty=Tensor[(3, 9, 7), float64] */;
  %424 = logical_xor(%416, %417) /* ty=Tensor[(3, 9, 7), uint8] */;
  %425 = @func_1279(%419) /* ty=Tensor[(3, 9, 7), float32] */;
  (%420, %421, meta[relay.Constant][25] /* ty=Tensor[(220), float32] */, meta[relay.Constant][26] /* ty=Tensor[(728), float64] */, %422, %423, %424, %425)
}

def @func_4884(%var_4882: Tensor[(252), uint16]) -> (Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(252), uint16], Tensor[(3, 9, 7), float32]) {
  @func_4881(%var_4882) /* ty=(Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(252), uint16], Tensor[(3, 9, 7), float32]) */
}

def @func_5553(%var_5551: Tensor[(7, 13, 10), float32], %var_5552: Tensor[(7, 13, 10), float32]) -> (Tensor[(7, 13, 10), int32], Tensor[(7, 13, 10), float64], Tensor[(52), uint32], Tensor[(7, 13, 10), bool]) {
  %446 = fn (%var_5500: Tensor[(7, 13, 10), float32], %var_5510: Tensor[(7, 13, 10), float32]) -> (Tensor[(7, 13, 10), int32], Tensor[(7, 13, 10), float64], Tensor[(52), uint32], Tensor[(7, 13, 10), bool]) {
    %426 = cast(%var_5500, dtype="float32") /* ty=Tensor[(7, 13, 10), float32] */;
    %427 = asin(%426) /* ty=Tensor[(7, 13, 10), float32] */;
    %428 = cast(%var_5510, dtype="int32") /* ty=Tensor[(7, 13, 10), int32] */;
    %429 = shape_of(%427, dtype="int32") /* ty=Tensor[(3), int32] */;
    %430 = cast(%427, dtype="int32") /* ty=Tensor[(7, 13, 10), int32] */;
    %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %432 = cast(%427, dtype="float64") /* ty=Tensor[(7, 13, 10), float64] */;
    %433 = sinh(%432) /* ty=Tensor[(7, 13, 10), float64] */;
    %434 = cast(%427, dtype="float64") /* ty=Tensor[(7, 13, 10), float64] */;
    %435 = shape_of(%433, dtype="int32") /* ty=Tensor[(3), int32] */;
    %436 = cast(%433, dtype="float64") /* ty=Tensor[(7, 13, 10), float64] */;
    %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %438 = cast(%427, dtype="bool") /* ty=Tensor[(7, 13, 10), bool] */;
    %439 = shape_of(%433, dtype="int32") /* ty=Tensor[(3), int32] */;
    %440 = cast(%433, dtype="bool") /* ty=Tensor[(7, 13, 10), bool] */;
    %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %442 = right_shift(%430, %431) /* ty=Tensor[(7, 13, 10), int32] */;
    %443 = floor_mod(%436, %437) /* ty=Tensor[(7, 13, 10), float64] */;
    %444 = @func_5220() /* ty=Tensor[(52), uint32] */;
    %445 = less(%440, %441) /* ty=Tensor[(7, 13, 10), bool] */;
    (%442, %443, %444, %445)
  };
  %446(%var_5551, %var_5552) /* ty=(Tensor[(7, 13, 10), int32], Tensor[(7, 13, 10), float64], Tensor[(52), uint32], Tensor[(7, 13, 10), bool]) */
}

def @func_6159() -> Tensor[(3, 9, 7), float32] {
  %448 = fn () -> Tensor[(3, 9, 7), float32] {
    %447 = @func_4267() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(13, 4, 8), bool], Tensor[(3, 9, 7), float32]) */;
    %447.0
  };
  %448() /* ty=Tensor[(3, 9, 7), float32] */
}

def @func_5892() -> Tensor[(3, 9, 7), float32] {
  @func_5890() /* ty=Tensor[(3, 9, 7), float32] */
}

def @func_1157() -> (Tensor[(3, 9, 7), float32],) {
  %449 = @func_1046() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %450 = %449.0;
  (%450,)
}

def @func_6273() -> (Tensor[(3, 9, 7), float32],) {
  %453 = fn () -> (Tensor[(3, 9, 7), float32],) {
    %451 = @func_4267() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(13, 4, 8), bool], Tensor[(3, 9, 7), float32]) */;
    %452 = %451.0;
    (%452,)
  };
  %453() /* ty=(Tensor[(3, 9, 7), float32],) */
}

def @func_4728() -> (Tensor[(3, 9, 7), float32],) {
  %454 = @func_1832() /* ty=Tensor[(3, 9, 7), float32] */;
  (%454,)
}

def @func_6260(%var_6257: Tensor[(3, 9, 7), float32], %var_6258: Tensor[(450), uint32], %var_6259: Tensor[(52), uint32]) -> (Tensor[(3, 9, 7), int64], Tensor[(10, 9, 5), float32], Tensor[(450), uint32], Tensor[(728), float64], Tensor[(52), uint32]) {
  %475 = fn (%var_6235: Tensor[(3, 9, 7), float32], %var_6242: Tensor[(450), uint32], %var_6244: Tensor[(52), uint32]) -> (Tensor[(3, 9, 7), int64], Tensor[(10, 9, 5), float32], Tensor[(450), uint32], Tensor[(728), float64], Tensor[(52), uint32]) {
    %455 = @func_5814() /* ty=Tensor[(3, 9, 7), float32] */;
    %456 = cast(%var_6235, dtype="int64") /* ty=Tensor[(3, 9, 7), int64] */;
    %457 = shape_of(%455, dtype="int32") /* ty=Tensor[(3), int32] */;
    %458 = cast(%455, dtype="int64") /* ty=Tensor[(3, 9, 7), int64] */;
    %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %460 = cast(%var_6242, dtype="uint32") /* ty=Tensor[(450), uint32] */;
    %461 = cast(meta[relay.Constant][27] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
    %462 = cast(meta[relay.Constant][27] /* ty=Tensor[(728), float64] */, dtype="uint8") /* ty=Tensor[(728), uint8] */;
    %463 = cast(%455, dtype="float64") /* ty=Tensor[(3, 9, 7), float64] */;
    %464 = cast(meta[relay.Constant][27] /* ty=Tensor[(728), float64] */, dtype="uint8") /* ty=Tensor[(728), uint8] */;
    %465 = cast(%var_6244, dtype="uint32") /* ty=Tensor[(52), uint32] */;
    %466 = reshape(%460, newshape=[10, 9, 5]) /* ty=Tensor[(10, 9, 5), uint32] */;
    %467 = reshape(%461, newshape=[728]) /* ty=Tensor[(728), float64] */;
    %468 = reshape(%462, newshape=[728]) /* ty=Tensor[(728), uint8] */;
    %469 = reshape(%463, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float64] */;
    %470 = reshape(%464, newshape=[728]) /* ty=Tensor[(728), uint8] */;
    %471 = reshape(%465, newshape=[52]) /* ty=Tensor[(52), uint32] */;
    %472 = @func_3325(%466, %467, %468, %469, %470, %471) /* ty=(Tensor[(440), float64], Tensor[(416), uint32], Tensor[(440), float64], Tensor[(10, 9, 5), float32], Tensor[(728), uint64], Tensor[(10, 9, 5), bool], Tensor[(728), int16], Tensor[(728), float64], Tensor[(3, 9, 7), float32], Tensor[(728), bool], Tensor[(13, 4, 8), bool], Tensor[(3, 9, 7), float32], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(8, 5, 11), float64]) */;
    %473 = left_shift(%458, %459) /* ty=Tensor[(3, 9, 7), int64] */;
    %474 = %472.3;
    (%473, %474, %var_6242, meta[relay.Constant][27] /* ty=Tensor[(728), float64] */, %var_6244)
  };
  %475(%var_6257, %var_6258, %var_6259) /* ty=(Tensor[(3, 9, 7), int64], Tensor[(10, 9, 5), float32], Tensor[(450), uint32], Tensor[(728), float64], Tensor[(52), uint32]) */
}

def @func_3661() -> (Tensor[(3, 9, 7), float32],) {
  %480 = fn () -> (Tensor[(3, 9, 7), float32],) {
    %476 = @func_1721() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(160), float32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) */;
    %477 = %476.0;
    %478 = cast(%477, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
    %479 = log10(%478) /* ty=Tensor[(3, 9, 7), float32] */;
    (%479,)
  };
  %480() /* ty=(Tensor[(3, 9, 7), float32],) */
}

def @func_6044(%var_6042: Tensor[(220), float32]) -> (Tensor[(13, 4, 8), bool], Tensor[(2, 11, 10), float32], Tensor[(220), float32]) {
  @func_6041(%var_6042) /* ty=(Tensor[(13, 4, 8), bool], Tensor[(2, 11, 10), float32], Tensor[(220), float32]) */
}

def @func_6337() -> (Tensor[(3, 9, 7), float32],) {
  %483 = fn () -> (Tensor[(3, 9, 7), float32],) {
    %481 = @func_1721() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(160), float32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) */;
    %482 = %481.3;
    (%482,)
  };
  %483() /* ty=(Tensor[(3, 9, 7), float32],) */
}

def @func_1542(%var_1381: Tensor[(220), float32], %var_1398: Tensor[(728), float64]) -> (Tensor[(3, 9, 7), float32], Tensor[(2, 11, 10), float32], Tensor[(220), float32], Tensor[(2, 11, 10), float32], Tensor[(440), float64], Tensor[(728), float64], Tensor[(416), uint32], Tensor[(110, 4), float64], Tensor[(3, 9, 7), float32], Tensor[(10, 2, 16), float32], Tensor[(4, 80), bool], Tensor[(5, 3, 7), int8], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(3, 9, 7), float32], Tensor[(8, 5, 11), bool], Tensor[(8, 5, 11), float32], Tensor[(8, 5, 11), float32]) {
  %484 = cast(%var_1381, dtype="float32") /* ty=Tensor[(220), float32] */;
  %485 = reshape(%484, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), float32] */;
  %486 = cast(%var_1381, dtype="float32") /* ty=Tensor[(220), float32] */;
  %487 = reshape(%486, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), float32] */;
  %488 = cast(%var_1398, dtype="float64") /* ty=Tensor[(728), float64] */;
  %489 = cast(%var_1398, dtype="float64") /* ty=Tensor[(728), float64] */;
  %490 = cast(meta[relay.Constant][28] /* ty=Tensor[(416), uint32] */, dtype="uint32") /* ty=Tensor[(416), uint32] */;
  %491 = cast(meta[relay.Constant][29] /* ty=Tensor[(110, 4), float64] */, dtype="float64") /* ty=Tensor[(110, 4), float64] */;
  %492 = reshape(%488, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), float64] */;
  %493 = reshape(%489, newshape=[4, 14, 13]) /* ty=Tensor[(4, 14, 13), float64] */;
  %494 = reshape(%490, newshape=[416]) /* ty=Tensor[(416), uint32] */;
  %495 = reshape(%491, newshape=[440]) /* ty=Tensor[(440), float64] */;
  %496 = @func_1125(%492, %493, %494, %495) /* ty=(Tensor[(4, 14, 13), float64], Tensor[(416), uint32], Tensor[(21, 5), int8], Tensor[(13, 4), uint32], Tensor[(416), uint32], Tensor[(8, 52), uint32], Tensor[(440), float64], Tensor[(13, 4, 8), bool]) */;
  %497 = @func_1046() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %498 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 80), bool] */, dtype="bool") /* ty=Tensor[(4, 80), bool] */;
  %499 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 80), bool] */, dtype="bool") /* ty=Tensor[(4, 80), bool] */;
  %500 = reshape(%498, newshape=[10, 2, 16]) /* ty=Tensor[(10, 2, 16), bool] */;
  %501 = reshape(%499, newshape=[10, 2, 16]) /* ty=Tensor[(10, 2, 16), bool] */;
  %502 = @func_1338(%500, %501) /* ty=(Tensor[(10, 2, 16), float32], Tensor[(10, 2, 16), float64]) */;
  %503 = cast(meta[relay.Constant][31] /* ty=Tensor[(105), int8] */, dtype="int8") /* ty=Tensor[(105), int8] */;
  %504 = cast(meta[relay.Constant][32] /* ty=Tensor[(52), uint32] */, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %505 = cast(meta[relay.Constant][28] /* ty=Tensor[(416), uint32] */, dtype="uint32") /* ty=Tensor[(416), uint32] */;
  %506 = reshape(%503, newshape=[5, 3, 7]) /* ty=Tensor[(5, 3, 7), int8] */;
  %507 = reshape(%504, newshape=[52, 1]) /* ty=Tensor[(52, 1), uint32] */;
  %508 = reshape(%505, newshape=[416]) /* ty=Tensor[(416), uint32] */;
  %509 = @func_597(%506, %507, %508) /* ty=(Tensor[(5, 3, 7), int8], Tensor[(13, 4, 8), bool], Tensor[(416), uint32], Tensor[(52), bool]) */;
  %510 = @func_1212() /* ty=Tensor[(3, 9, 7), float32] */;
  %511 = cast(%510, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
  %512 = reshape(%511, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float32] */;
  %513 = cast(meta[relay.Constant][29] /* ty=Tensor[(110, 4), float64] */, dtype="float64") /* ty=Tensor[(110, 4), float64] */;
  %514 = %496.6;
  %515 = cast(%514, dtype="float64") /* ty=Tensor[(440), float64] */;
  %516 = reshape(%513, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
  %517 = reshape(%515, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
  %518 = @func_769(%516, %517) /* ty=(Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(8, 52), uint32], Tensor[(8, 5, 11), bool], Tensor[(8, 5, 11), uint8], Tensor[(8, 5, 11), float64]) */;
  %519 = %518.5;
  %520 = cast(%519, dtype="float32") /* ty=Tensor[(8, 5, 11), float32] */;
  %521 = sqrt(%520) /* ty=Tensor[(8, 5, 11), float32] */;
  %522 = cast(%521, dtype="float64") /* ty=Tensor[(8, 5, 11), float64] */;
  %523 = cast(meta[relay.Constant][29] /* ty=Tensor[(110, 4), float64] */, dtype="float64") /* ty=Tensor[(110, 4), float64] */;
  %524 = reshape(%522, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
  %525 = reshape(%523, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
  %526 = @func_769(%524, %525) /* ty=(Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(8, 52), uint32], Tensor[(8, 5, 11), bool], Tensor[(8, 5, 11), uint8], Tensor[(8, 5, 11), float64]) */;
  %527 = cast(%521, dtype="float32") /* ty=Tensor[(8, 5, 11), float32] */;
  %528 = cast(%521, dtype="float32") /* ty=Tensor[(8, 5, 11), float32] */;
  %529 = @func_1197(%485) /* ty=Tensor[(2, 11, 10), float32] */;
  %530 = @func_1197(%487) /* ty=Tensor[(2, 11, 10), float32] */;
  %531 = %497.0;
  %532 = %502.0;
  %533 = %509.0;
  %534 = @func_1279(%512) /* ty=Tensor[(3, 9, 7), float32] */;
  %535 = %526.3;
  %536 = log(%527) /* ty=Tensor[(8, 5, 11), float32] */;
  %537 = log2(%528) /* ty=Tensor[(8, 5, 11), float32] */;
  (%510, %529, %var_1381, %530, %514, %var_1398, meta[relay.Constant][28] /* ty=Tensor[(416), uint32] */, meta[relay.Constant][29] /* ty=Tensor[(110, 4), float64] */, %531, %532, meta[relay.Constant][30] /* ty=Tensor[(4, 80), bool] */, %533, meta[relay.Constant][31] /* ty=Tensor[(105), int8] */, meta[relay.Constant][32] /* ty=Tensor[(52), uint32] */, %534, %535, %536, %537)
}

def @func_2617(%var_2613: Tensor[(728), float64], %var_2614: Tensor[(416), uint32], %var_2615: Tensor[(440), float64], %var_2616: Tensor[(52), uint32]) -> (Tensor[(3, 9, 7), float32], Tensor[(55, 4), bool], Tensor[(416), uint32], Tensor[(728), float64], Tensor[(416), uint32], Tensor[(440), float64], Tensor[(416), uint32], Tensor[(52), uint32], Tensor[(105), int8]) {
  @func_2611(%var_2613, %var_2614, %var_2615, %var_2616) /* ty=(Tensor[(3, 9, 7), float32], Tensor[(55, 4), bool], Tensor[(416), uint32], Tensor[(728), float64], Tensor[(416), uint32], Tensor[(440), float64], Tensor[(416), uint32], Tensor[(52), uint32], Tensor[(105), int8]) */
}

def @func_4696() -> (Tensor[(3, 9, 7), float32],) {
  @func_4694() /* ty=(Tensor[(3, 9, 7), float32],) */
}

def @func_5890() -> Tensor[(3, 9, 7), float32] {
  %538 = @func_3821() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) */;
  %538.1
}

def @func_5867() -> Tensor[(3, 9, 7), float32] {
  %539 = fn () -> Tensor[(3, 9, 7), float32] {
    @func_1212() /* ty=Tensor[(3, 9, 7), float32] */
  };
  %539() /* ty=Tensor[(3, 9, 7), float32] */
}

def @func_6189(%var_6187: Tensor[(5, 13, 2), float32]) -> Tensor[(5, 13, 2), float32] {
  @func_6186(%var_6187) /* ty=Tensor[(5, 13, 2), float32] */
}

def @func_5220() -> Tensor[(52), uint32] {
  %540 = @func_4857() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(52), uint32], Tensor[(13, 4, 8), bool], Tensor[(3, 9, 7), float32]) */;
  %540.1
}

def @func_5135() -> Tensor[(3, 9, 7), float32] {
  @func_5133() /* ty=Tensor[(3, 9, 7), float32] */
}

def @func_894(%var_861: Tensor[(1, 52), uint32], %var_865: Tensor[(105), int8], %var_866: Tensor[(416), uint32]) -> (Tensor[(8, 10, 5), float64], Tensor[(52), uint32], Tensor[(1, 52), uint32], Tensor[(13, 4, 8), bool], Tensor[(105), int8], Tensor[(416), uint32], Tensor[(13, 4, 8), bool]) {
  %541 = cast(meta[relay.Constant][33] /* ty=Tensor[(8, 10, 5), float64] */, dtype="float64") /* ty=Tensor[(8, 10, 5), float64] */;
  %542 = cast(%var_861, dtype="uint32") /* ty=Tensor[(1, 52), uint32] */;
  %543 = reshape(%542, newshape=[52]) /* ty=Tensor[(52), uint32] */;
  %544 = @func_477(%543) /* ty=(Tensor[(7, 14, 14), bool], Tensor[(7, 14, 14), bool], Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(416), uint32], Tensor[(13, 4, 8), bool]) */;
  %545 = cast(%var_865, dtype="int8") /* ty=Tensor[(105), int8] */;
  %546 = cast(%var_861, dtype="uint32") /* ty=Tensor[(1, 52), uint32] */;
  %547 = cast(%var_866, dtype="uint32") /* ty=Tensor[(416), uint32] */;
  %548 = reshape(%545, newshape=[5, 3, 7]) /* ty=Tensor[(5, 3, 7), int8] */;
  %549 = reshape(%546, newshape=[52, 1]) /* ty=Tensor[(52, 1), uint32] */;
  %550 = reshape(%547, newshape=[416]) /* ty=Tensor[(416), uint32] */;
  %551 = @func_597(%548, %549, %550) /* ty=(Tensor[(5, 3, 7), int8], Tensor[(13, 4, 8), bool], Tensor[(416), uint32], Tensor[(52), bool]) */;
  %552 = cast(%var_861, dtype="uint32") /* ty=Tensor[(1, 52), uint32] */;
  %553 = cast(%var_866, dtype="uint32") /* ty=Tensor[(416), uint32] */;
  %554 = reshape(%552, newshape=[13, 4, 1]) /* ty=Tensor[(13, 4, 1), uint32] */;
  %555 = reshape(%553, newshape=[13, 4, 8]) /* ty=Tensor[(13, 4, 8), uint32] */;
  %556 = @func_420(%554, %555) /* ty=(Tensor[(13, 4, 8), bool],) */;
  %557 = atan(%541) /* ty=Tensor[(8, 10, 5), float64] */;
  %558 = %544.3;
  %559 = %551.1;
  %560 = %556.0;
  (%557, %558, %var_861, %559, %var_865, %var_866, %560)
}

def @func_6129(%var_6128: Tensor[(70), int32]) -> (Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(70), int32]) {
  %568 = fn (%var_6097: Tensor[(70), int32]) -> (Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(70), int32]) {
    %561 = @func_4755() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) */;
    %562 = cast(%var_6097, dtype="int32") /* ty=Tensor[(70), int32] */;
    %563 = reshape(%562, newshape=[70]) /* ty=Tensor[(70), int32] */;
    %564 = @func_3903(%563) /* ty=(Tensor[(3, 9, 7), float32], Tensor[(52), bool], Tensor[(5, 7, 2), int32], Tensor[(70), int32]) */;
    %565 = @func_5133() /* ty=Tensor[(3, 9, 7), float32] */;
    %566 = %561.0;
    %567 = %564.0;
    (%565, %566, %567, %var_6097)
  };
  %568(%var_6128) /* ty=(Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(70), int32]) */
}

def @func_2380(%var_2376: Tensor[(3, 9, 7), float32], %var_2377: Tensor[(7, 10), int32], %var_2378: Tensor[(3, 9, 7), float32], %var_2379: Tensor[(3, 9, 7), float32]) -> (Tensor[(2, 11, 10), float32], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(440), float64], Tensor[(3, 9, 7), float64], Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(160), float32], Tensor[(416), uint32], Tensor[(3, 9, 7), float32], Tensor[(7, 10), int32], Tensor[(105), int8], Tensor[(416, 728), bool], Tensor[(3, 9, 7), float32], Tensor[(8, 5, 11), uint8], Tensor[(3, 9, 7), int32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), bool], Tensor[(3, 9, 7), float32], Tensor[(13, 4, 8), bool]) {
  %663 = fn (%var_2230: Tensor[(3, 9, 7), float32], %var_2301: Tensor[(7, 10), int32], %var_2338: Tensor[(3, 9, 7), float32], %var_2360: Tensor[(3, 9, 7), float32]) -> (Tensor[(2, 11, 10), float32], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(440), float64], Tensor[(3, 9, 7), float64], Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(160), float32], Tensor[(416), uint32], Tensor[(3, 9, 7), float32], Tensor[(7, 10), int32], Tensor[(105), int8], Tensor[(416, 728), bool], Tensor[(3, 9, 7), float32], Tensor[(8, 5, 11), uint8], Tensor[(3, 9, 7), int32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), bool], Tensor[(3, 9, 7), float32], Tensor[(13, 4, 8), bool]) {
    %569 = @func_1764() /* ty=(Tensor[(3, 9, 7), float32],) */;
    %570 = %569.0;
    %571 = cast(%570, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
    %572 = cast(meta[relay.Constant][34] /* ty=Tensor[(105), int8] */, dtype="int8") /* ty=Tensor[(105), int8] */;
    %573 = cast(meta[relay.Constant][35] /* ty=Tensor[(52), uint32] */, dtype="uint32") /* ty=Tensor[(52), uint32] */;
    %574 = cast(meta[relay.Constant][36] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
    %575 = cast(meta[relay.Constant][37] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
    %576 = reshape(%571, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float32] */;
    %577 = reshape(%572, newshape=[105]) /* ty=Tensor[(105), int8] */;
    %578 = reshape(%573, newshape=[52]) /* ty=Tensor[(52), uint32] */;
    %579 = reshape(%574, newshape=[5, 88]) /* ty=Tensor[(5, 88), float64] */;
    %580 = reshape(%575, newshape=[7, 104]) /* ty=Tensor[(7, 104), float64] */;
    %581 = @func_2161(%576, %577, %578, %579, %580) /* ty=(Tensor[(3, 9, 7), bool], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(8, 5, 11), float64], Tensor[(7, 104), float64], Tensor[(5, 88), uint64], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(110, 4), float32], Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(2, 11, 10), float32], Tensor[(2, 11, 10), float32], Tensor[(220, 416), int32], Tensor[(220, 52), bool]) */;
    %582 = cast(%var_2230, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
    %583 = atanh(%582) /* ty=Tensor[(3, 9, 7), float32] */;
    %584 = cast(%var_2230, dtype="uint16") /* ty=Tensor[(3, 9, 7), uint16] */;
    %585 = shape_of(%570, dtype="int32") /* ty=Tensor[(3), int32] */;
    %586 = cast(%570, dtype="uint16") /* ty=Tensor[(3, 9, 7), uint16] */;
    %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %588 = multiply(%586, %587) /* ty=Tensor[(3, 9, 7), uint16] */;
    %589 = cast(%588, dtype="float64") /* ty=Tensor[(3, 9, 7), float64] */;
    %590 = shape_of(%583, dtype="int32") /* ty=Tensor[(3), int32] */;
    %591 = cast(%583, dtype="float64") /* ty=Tensor[(3, 9, 7), float64] */;
    %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %593 = cast(%583, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
    %594 = cast(meta[relay.Constant][34] /* ty=Tensor[(105), int8] */, dtype="int8") /* ty=Tensor[(105), int8] */;
    %595 = cast(meta[relay.Constant][35] /* ty=Tensor[(52), uint32] */, dtype="uint32") /* ty=Tensor[(52), uint32] */;
    %596 = cast(meta[relay.Constant][36] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
    %597 = cast(meta[relay.Constant][37] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
    %598 = reshape(%593, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float32] */;
    %599 = reshape(%594, newshape=[105]) /* ty=Tensor[(105), int8] */;
    %600 = reshape(%595, newshape=[52]) /* ty=Tensor[(52), uint32] */;
    %601 = reshape(%596, newshape=[5, 88]) /* ty=Tensor[(5, 88), float64] */;
    %602 = reshape(%597, newshape=[7, 104]) /* ty=Tensor[(7, 104), float64] */;
    %603 = @func_2161(%598, %599, %600, %601, %602) /* ty=(Tensor[(3, 9, 7), bool], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(8, 5, 11), float64], Tensor[(7, 104), float64], Tensor[(5, 88), uint64], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(110, 4), float32], Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(2, 11, 10), float32], Tensor[(2, 11, 10), float32], Tensor[(220, 416), int32], Tensor[(220, 52), bool]) */;
    %604 = cast(meta[relay.Constant][38] /* ty=Tensor[(160), float32] */, dtype="float32") /* ty=Tensor[(160), float32] */;
    %605 = reshape(%604, newshape=[10, 2, 8]) /* ty=Tensor[(10, 2, 8), float32] */;
    %606 = cast(meta[relay.Constant][35] /* ty=Tensor[(52), uint32] */, dtype="uint32") /* ty=Tensor[(52), uint32] */;
    %607 = cast(meta[relay.Constant][34] /* ty=Tensor[(105), int8] */, dtype="int8") /* ty=Tensor[(105), int8] */;
    %608 = cast(meta[relay.Constant][39] /* ty=Tensor[(416, 1), uint32] */, dtype="uint32") /* ty=Tensor[(416, 1), uint32] */;
    %609 = reshape(%606, newshape=[1, 52]) /* ty=Tensor[(1, 52), uint32] */;
    %610 = reshape(%607, newshape=[105]) /* ty=Tensor[(105), int8] */;
    %611 = reshape(%608, newshape=[416]) /* ty=Tensor[(416), uint32] */;
    %612 = @func_894(%609, %610, %611) /* ty=(Tensor[(8, 10, 5), float64], Tensor[(52), uint32], Tensor[(1, 52), uint32], Tensor[(13, 4, 8), bool], Tensor[(105), int8], Tensor[(416), uint32], Tensor[(13, 4, 8), bool]) */;
    %613 = cast(%var_2301, dtype="int32") /* ty=Tensor[(7, 10), int32] */;
    %614 = reshape(%613, newshape=[5, 7, 2]) /* ty=Tensor[(5, 7, 2), int32] */;
    %615 = @func_1890(%614) /* ty=(Tensor[(5, 7, 2), int32], Tensor[(3, 9, 7), float32]) */;
    %616 = %615.1;
    %617 = cast(%616, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
    %618 = cast(meta[relay.Constant][34] /* ty=Tensor[(105), int8] */, dtype="int8") /* ty=Tensor[(105), int8] */;
    %619 = cast(meta[relay.Constant][35] /* ty=Tensor[(52), uint32] */, dtype="uint32") /* ty=Tensor[(52), uint32] */;
    %620 = cast(meta[relay.Constant][36] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
    %621 = cast(meta[relay.Constant][37] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
    %622 = reshape(%617, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float32] */;
    %623 = reshape(%618, newshape=[105]) /* ty=Tensor[(105), int8] */;
    %624 = reshape(%619, newshape=[52]) /* ty=Tensor[(52), uint32] */;
    %625 = reshape(%620, newshape=[5, 88]) /* ty=Tensor[(5, 88), float64] */;
    %626 = reshape(%621, newshape=[7, 104]) /* ty=Tensor[(7, 104), float64] */;
    %627 = @func_2161(%622, %623, %624, %625, %626) /* ty=(Tensor[(3, 9, 7), bool], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(8, 5, 11), float64], Tensor[(7, 104), float64], Tensor[(5, 88), uint64], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(110, 4), float32], Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(2, 11, 10), float32], Tensor[(2, 11, 10), float32], Tensor[(220, 416), int32], Tensor[(220, 52), bool]) */;
    %628 = cast(meta[relay.Constant][37] /* ty=Tensor[(728), float64] */, dtype="bool") /* ty=Tensor[(728), bool] */;
    %629 = cast(meta[relay.Constant][39] /* ty=Tensor[(416, 1), uint32] */, dtype="bool") /* ty=Tensor[(416, 1), bool] */;
    %630 = @func_1764() /* ty=(Tensor[(3, 9, 7), float32],) */;
    %631 = cast(meta[relay.Constant][36] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
    %632 = cast(meta[relay.Constant][36] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
    %633 = reshape(%631, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
    %634 = reshape(%632, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
    %635 = @func_769(%633, %634) /* ty=(Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(8, 52), uint32], Tensor[(8, 5, 11), bool], Tensor[(8, 5, 11), uint8], Tensor[(8, 5, 11), float64]) */;
    %636 = cast(%var_2338, dtype="int32") /* ty=Tensor[(3, 9, 7), int32] */;
    %637 = shape_of(%583, dtype="int32") /* ty=Tensor[(3), int32] */;
    %638 = cast(%583, dtype="int32") /* ty=Tensor[(3, 9, 7), int32] */;
    %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %640 = @func_1157() /* ty=(Tensor[(3, 9, 7), float32],) */;
    %641 = cast(%var_2360, dtype="bool") /* ty=Tensor[(3, 9, 7), bool] */;
    %642 = shape_of(%583, dtype="int32") /* ty=Tensor[(3), int32] */;
    %643 = cast(%583, dtype="bool") /* ty=Tensor[(3, 9, 7), bool] */;
    %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %645 = @func_1721() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(160), float32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) */;
    %646 = cast(meta[relay.Constant][35] /* ty=Tensor[(52), uint32] */, dtype="uint32") /* ty=Tensor[(52), uint32] */;
    %647 = reshape(%646, newshape=[52]) /* ty=Tensor[(52), uint32] */;
    %648 = @func_477(%647) /* ty=(Tensor[(7, 14, 14), bool], Tensor[(7, 14, 14), bool], Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(416), uint32], Tensor[(13, 4, 8), bool]) */;
    %649 = %581.12;
    %650 = floor_divide(%591, %592) /* ty=Tensor[(3, 9, 7), float64] */;
    %651 = %603.6;
    %652 = @func_1664(%605) /* ty=Tensor[(10, 2, 8), float32] */;
    %653 = %612.5;
    %654 = %627.1;
    %655 = logical_or(%628, %629) /* ty=Tensor[(416, 728), bool] */;
    %656 = %630.0;
    %657 = %635.4;
    %658 = minimum(%638, %639) /* ty=Tensor[(3, 9, 7), int32] */;
    %659 = %640.0;
    %660 = logical_and(%643, %644) /* ty=Tensor[(3, 9, 7), bool] */;
    %661 = %645.4;
    %662 = %648.5;
    (%649, meta[relay.Constant][34] /* ty=Tensor[(105), int8] */, meta[relay.Constant][35] /* ty=Tensor[(52), uint32] */, meta[relay.Constant][36] /* ty=Tensor[(440), float64] */, %650, %651, %652, meta[relay.Constant][38] /* ty=Tensor[(160), float32] */, %653, %616, %var_2301, %654, %655, %656, %657, %658, %659, %660, %661, %662)
  };
  %663(%var_2376, %var_2377, %var_2378, %var_2379) /* ty=(Tensor[(2, 11, 10), float32], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(440), float64], Tensor[(3, 9, 7), float64], Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(160), float32], Tensor[(416), uint32], Tensor[(3, 9, 7), float32], Tensor[(7, 10), int32], Tensor[(105), int8], Tensor[(416, 728), bool], Tensor[(3, 9, 7), float32], Tensor[(8, 5, 11), uint8], Tensor[(3, 9, 7), int32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), bool], Tensor[(3, 9, 7), float32], Tensor[(13, 4, 8), bool]) */
}

def @func_4995() -> Tensor[(3, 9, 7), float32] {
  @func_3522() /* ty=Tensor[(3, 9, 7), float32] */
}

def @func_4567(%var_4565: Tensor[(416), uint32], %var_4566: Tensor[(440), float64]) -> (Tensor[(3, 9, 7), float32], Tensor[(21, 5), int8], Tensor[(728), float64], Tensor[(416), uint32], Tensor[(440), float64]) {
  @func_4563(%var_4565, %var_4566) /* ty=(Tensor[(3, 9, 7), float32], Tensor[(21, 5), int8], Tensor[(728), float64], Tensor[(416), uint32], Tensor[(440), float64]) */
}

def @func_4448(%var_4447: Tensor[(11, 6, 9), float32]) -> (Tensor[(11, 6, 9), bool], Tensor[(10, 2, 8), float32], Tensor[(189), float32], Tensor[(7, 10), int32]) {
  %681 = fn (%var_4431: Tensor[(11, 6, 9), float32]) -> (Tensor[(11, 6, 9), bool], Tensor[(10, 2, 8), float32], Tensor[(189), float32], Tensor[(7, 10), int32]) {
    %664 = cast(%var_4431, dtype="float32") /* ty=Tensor[(11, 6, 9), float32] */;
    %665 = asinh(%664) /* ty=Tensor[(11, 6, 9), float32] */;
    %666 = cast(%665, dtype="bool") /* ty=Tensor[(11, 6, 9), bool] */;
    %667 = shape_of(%var_4431, dtype="int32") /* ty=Tensor[(3), int32] */;
    %668 = cast(%var_4431, dtype="bool") /* ty=Tensor[(11, 6, 9), bool] */;
    %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %670 = cast(meta[relay.Constant][40] /* ty=Tensor[(189), float32] */, dtype="float32") /* ty=Tensor[(189), float32] */;
    %671 = cast(meta[relay.Constant][41] /* ty=Tensor[(7, 10), int32] */, dtype="int32") /* ty=Tensor[(7, 10), int32] */;
    %672 = cast(meta[relay.Constant][40] /* ty=Tensor[(189), float32] */, dtype="float32") /* ty=Tensor[(189), float32] */;
    %673 = cast(meta[relay.Constant][40] /* ty=Tensor[(189), float32] */, dtype="float32") /* ty=Tensor[(189), float32] */;
    %674 = reshape(%670, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float32] */;
    %675 = reshape(%671, newshape=[7, 10]) /* ty=Tensor[(7, 10), int32] */;
    %676 = reshape(%672, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float32] */;
    %677 = reshape(%673, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float32] */;
    %678 = @func_2375(%674, %675, %676, %677) /* ty=(Tensor[(2, 11, 10), float32], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(440), float64], Tensor[(3, 9, 7), float64], Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(160), float32], Tensor[(416), uint32], Tensor[(3, 9, 7), float32], Tensor[(7, 10), int32], Tensor[(105), int8], Tensor[(416, 728), bool], Tensor[(3, 9, 7), float32], Tensor[(8, 5, 11), uint8], Tensor[(3, 9, 7), int32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), bool], Tensor[(3, 9, 7), float32], Tensor[(13, 4, 8), bool]) */;
    %679 = greater(%668, %669) /* ty=Tensor[(11, 6, 9), bool] */;
    %680 = %678.6;
    (%679, %680, meta[relay.Constant][40] /* ty=Tensor[(189), float32] */, meta[relay.Constant][41] /* ty=Tensor[(7, 10), int32] */)
  };
  %681(%var_4447) /* ty=(Tensor[(11, 6, 9), bool], Tensor[(10, 2, 8), float32], Tensor[(189), float32], Tensor[(7, 10), int32]) */
}

def @func_1722() -> (Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(160), float32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) {
  %690 = fn () -> (Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(160), float32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) {
    %682 = @func_1046() /* ty=(Tensor[(3, 9, 7), float32],) */;
    %683 = cast(meta[relay.Constant][42] /* ty=Tensor[(160), float32] */, dtype="float32") /* ty=Tensor[(160), float32] */;
    %684 = reshape(%683, newshape=[10, 2, 8]) /* ty=Tensor[(10, 2, 8), float32] */;
    %685 = @func_1157() /* ty=(Tensor[(3, 9, 7), float32],) */;
    %686 = %682.0;
    %687 = @func_1664(%684) /* ty=Tensor[(10, 2, 8), float32] */;
    %688 = %685.0;
    %689 = @func_1212() /* ty=Tensor[(3, 9, 7), float32] */;
    (%686, %687, meta[relay.Constant][42] /* ty=Tensor[(160), float32] */, %688, %689)
  };
  %690() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(160), float32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) */
}

def @func_4268() -> (Tensor[(3, 9, 7), float32], Tensor[(13, 4, 8), bool], Tensor[(3, 9, 7), float32]) {
  %696 = fn () -> (Tensor[(3, 9, 7), float32], Tensor[(13, 4, 8), bool], Tensor[(3, 9, 7), float32]) {
    %691 = @func_2552() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(3, 9, 7), float64]) */;
    %692 = @func_1046() /* ty=(Tensor[(3, 9, 7), float32],) */;
    %693 = @func_2721() /* ty=Tensor[(3, 9, 7), float32] */;
    %694 = %691.1;
    %695 = %692.0;
    (%693, %694, %695)
  };
  %696() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(13, 4, 8), bool], Tensor[(3, 9, 7), float32]) */
}

def @func_1341(%var_1339: Tensor[(10, 2, 16), bool], %var_1340: Tensor[(10, 2, 16), bool]) -> (Tensor[(10, 2, 16), float32], Tensor[(10, 2, 16), float64]) {
  %714 = fn (%var_1292: Tensor[(10, 2, 16), bool], %var_1293: Tensor[(10, 2, 16), bool]) -> (Tensor[(10, 2, 16), float32], Tensor[(10, 2, 16), float64]) {
    %697 = cast(%var_1293, dtype="float32") /* ty=Tensor[(10, 2, 16), float32] */;
    %698 = cast(%var_1293, dtype="bool") /* ty=Tensor[(10, 2, 16), bool] */;
    %699 = shape_of(%var_1292, dtype="int32") /* ty=Tensor[(3), int32] */;
    %700 = cast(%var_1292, dtype="bool") /* ty=Tensor[(10, 2, 16), bool] */;
    %701 = dyn.reshape(%698, %699, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %702 = logical_or(%700, %701) /* ty=Tensor[(10, 2, 16), bool] */;
    %703 = cast(%var_1292, dtype="float32") /* ty=Tensor[(10, 2, 16), float32] */;
    %704 = shape_of(%702, dtype="int32") /* ty=Tensor[(3), int32] */;
    %705 = cast(%702, dtype="float32") /* ty=Tensor[(10, 2, 16), float32] */;
    %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %707 = floor_divide(%705, %706) /* ty=Tensor[(10, 2, 16), float32] */;
    %708 = cast(%707, dtype="float64") /* ty=Tensor[(10, 2, 16), float64] */;
    %709 = shape_of(%702, dtype="int32") /* ty=Tensor[(3), int32] */;
    %710 = cast(%702, dtype="float64") /* ty=Tensor[(10, 2, 16), float64] */;
    %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %712 = atanh(%697) /* ty=Tensor[(10, 2, 16), float32] */;
    %713 = power(%710, %711) /* ty=Tensor[(10, 2, 16), float64] */;
    (%712, %713)
  };
  %714(%var_1339, %var_1340) /* ty=(Tensor[(10, 2, 16), float32], Tensor[(10, 2, 16), float64]) */
}

def @func_4881(%var_4871: Tensor[(252), uint16]) -> (Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(252), uint16], Tensor[(3, 9, 7), float32]) {
  %715 = cast(%var_4871, dtype="uint16") /* ty=Tensor[(252), uint16] */;
  %716 = reshape(%715, newshape=[252]) /* ty=Tensor[(252), uint16] */;
  %717 = @func_4186(%716) /* ty=(Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(252), uint16]) */;
  %718 = @func_3068() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %719 = @func_4629() /* ty=Tensor[(3, 9, 7), float32] */;
  %720 = %717.0;
  %721 = %718.0;
  (%719, %720, %var_4871, %721)
}

def @func_3753() -> (Tensor[(3, 9, 7), float64],) {
  %725 = fn () -> (Tensor[(3, 9, 7), float64],) {
    %722 = @func_3431() /* ty=Tensor[(3, 9, 7), float32] */;
    %723 = cast(%722, dtype="float64") /* ty=Tensor[(3, 9, 7), float64] */;
    %724 = atan(%723) /* ty=Tensor[(3, 9, 7), float64] */;
    (%724,)
  };
  %725() /* ty=(Tensor[(3, 9, 7), float64],) */
}

def @func_1664(%var_1659: Tensor[(10, 2, 8), float32]) -> Tensor[(10, 2, 8), float32] {
  %726 = cast(%var_1659, dtype="float32") /* ty=Tensor[(10, 2, 8), float32] */;
  atan(%726) /* ty=Tensor[(10, 2, 8), float32] */
}

def @func_4910() -> Tensor[(52), uint32] {
  @func_4908() /* ty=Tensor[(52), uint32] */
}

def @func_4386(%var_4376: Tensor[(52), uint32], %var_4377: Tensor[(105), int8], %var_4378: Tensor[(416), uint32]) -> (Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(416), uint32], Tensor[(52), uint32], Tensor[(105), int8], Tensor[(416), uint32]) {
  %727 = @func_1157() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %728 = @func_1764() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %729 = cast(%var_4376, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %730 = cast(%var_4377, dtype="int8") /* ty=Tensor[(105), int8] */;
  %731 = cast(%var_4378, dtype="uint32") /* ty=Tensor[(416), uint32] */;
  %732 = reshape(%729, newshape=[1, 52]) /* ty=Tensor[(1, 52), uint32] */;
  %733 = reshape(%730, newshape=[105]) /* ty=Tensor[(105), int8] */;
  %734 = reshape(%731, newshape=[416]) /* ty=Tensor[(416), uint32] */;
  %735 = @func_894(%732, %733, %734) /* ty=(Tensor[(8, 10, 5), float64], Tensor[(52), uint32], Tensor[(1, 52), uint32], Tensor[(13, 4, 8), bool], Tensor[(105), int8], Tensor[(416), uint32], Tensor[(13, 4, 8), bool]) */;
  %736 = %727.0;
  %737 = %728.0;
  %738 = %735.5;
  (%736, %737, %738, %var_4376, %var_4377, %var_4378)
}

def @func_4975() -> (Tensor[(3, 9, 7), float32],) {
  @func_4973() /* ty=(Tensor[(3, 9, 7), float32],) */
}

def @func_3637() -> Tensor[(3, 9, 7), float32] {
  %739 = @func_1157() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %739.0
}

def @func_1892(%var_1891: Tensor[(5, 7, 2), int32]) -> (Tensor[(5, 7, 2), int32], Tensor[(3, 9, 7), float32]) {
  %748 = fn (%var_1870: Tensor[(5, 7, 2), int32]) -> (Tensor[(5, 7, 2), int32], Tensor[(3, 9, 7), float32]) {
    %740 = cast(meta[relay.Constant][43] /* ty=Tensor[(5, 7, 2), int32] */, dtype="int32") /* ty=Tensor[(5, 7, 2), int32] */;
    %741 = shape_of(%var_1870, dtype="int32") /* ty=Tensor[(3), int32] */;
    %742 = cast(%var_1870, dtype="int32") /* ty=Tensor[(5, 7, 2), int32] */;
    %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %744 = @func_1832() /* ty=Tensor[(3, 9, 7), float32] */;
    %745 = cast(%744, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
    %746 = left_shift(%742, %743) /* ty=Tensor[(5, 7, 2), int32] */;
    %747 = log(%745) /* ty=Tensor[(3, 9, 7), float32] */;
    (%746, %747)
  };
  %748(%var_1891) /* ty=(Tensor[(5, 7, 2), int32], Tensor[(3, 9, 7), float32]) */
}

def @func_5394(%var_5391: Tensor[(66, 9), float32], %var_5392: Tensor[(150), uint64], %var_5393: Tensor[(252), uint16]) -> (Tensor[(3, 9, 7), float32], Tensor[(7, 10), int32], Tensor[(2, 15, 5), uint64], Tensor[(150), uint64], Tensor[(10, 2, 8), float32], Tensor[(252), uint16], Tensor[(66, 9), bool]) {
  @func_5389(%var_5391, %var_5392, %var_5393) /* ty=(Tensor[(3, 9, 7), float32], Tensor[(7, 10), int32], Tensor[(2, 15, 5), uint64], Tensor[(150), uint64], Tensor[(10, 2, 8), float32], Tensor[(252), uint16], Tensor[(66, 9), bool]) */
}

def @func_5428() -> (Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) {
  %751 = fn () -> (Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) {
    %749 = @func_1811() /* ty=Tensor[(3, 9, 7), float32] */;
    %750 = @func_1832() /* ty=Tensor[(3, 9, 7), float32] */;
    (%749, %750)
  };
  %751() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) */
}

def @func_1281(%var_1280: Tensor[(3, 9, 7), float32]) -> Tensor[(3, 9, 7), float32] {
  %758 = fn (%var_1270: Tensor[(3, 9, 7), float32]) -> Tensor[(3, 9, 7), float32] {
    %752 = @func_1157() /* ty=(Tensor[(3, 9, 7), float32],) */;
    %753 = %752.0;
    %754 = cast(%var_1270, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
    %755 = shape_of(%753, dtype="int32") /* ty=Tensor[(3), int32] */;
    %756 = cast(%753, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
    %757 = dyn.reshape(%754, %755, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_mod(%756, %757) /* ty=Tensor[(3, 9, 7), float32] */
  };
  %758(%var_1280) /* ty=Tensor[(3, 9, 7), float32] */
}

def @func_4126() -> (Tensor[(52), uint32], Tensor[(3, 9, 7), float32]) {
  %759 = @func_3591() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(52), uint32], Tensor[(52), uint32]) */;
  %760 = %759.1;
  %761 = @func_1832() /* ty=Tensor[(3, 9, 7), float32] */;
  (%760, %761)
}

def @func_6431(%var_6429: Tensor[(594), float32], %var_6430: Tensor[(189), float32]) -> (Tensor[(3, 9, 7), float32], Tensor[(594), float32], Tensor[(189), float32], Tensor[(10, 2, 8), float32]) {
  @func_6427(%var_6429, %var_6430) /* ty=(Tensor[(3, 9, 7), float32], Tensor[(594), float32], Tensor[(189), float32], Tensor[(10, 2, 8), float32]) */
}

def @func_1546(%var_1544: Tensor[(220), float32], %var_1545: Tensor[(728), float64]) -> (Tensor[(3, 9, 7), float32], Tensor[(2, 11, 10), float32], Tensor[(220), float32], Tensor[(2, 11, 10), float32], Tensor[(440), float64], Tensor[(728), float64], Tensor[(416), uint32], Tensor[(110, 4), float64], Tensor[(3, 9, 7), float32], Tensor[(10, 2, 16), float32], Tensor[(4, 80), bool], Tensor[(5, 3, 7), int8], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(3, 9, 7), float32], Tensor[(8, 5, 11), bool], Tensor[(8, 5, 11), float32], Tensor[(8, 5, 11), float32]) {
  @func_1542(%var_1544, %var_1545) /* ty=(Tensor[(3, 9, 7), float32], Tensor[(2, 11, 10), float32], Tensor[(220), float32], Tensor[(2, 11, 10), float32], Tensor[(440), float64], Tensor[(728), float64], Tensor[(416), uint32], Tensor[(110, 4), float64], Tensor[(3, 9, 7), float32], Tensor[(10, 2, 16), float32], Tensor[(4, 80), bool], Tensor[(5, 3, 7), int8], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(3, 9, 7), float32], Tensor[(8, 5, 11), bool], Tensor[(8, 5, 11), float32], Tensor[(8, 5, 11), float32]) */
}

def @func_5133() -> Tensor[(3, 9, 7), float32] {
  @func_1212() /* ty=Tensor[(3, 9, 7), float32] */
}

def @func_3593() -> (Tensor[(3, 9, 7), float32], Tensor[(52), uint32], Tensor[(52), uint32]) {
  @func_3591() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(52), uint32], Tensor[(52), uint32]) */
}

def @func_3728(%var_3726: Tensor[(1, 728), float64]) -> (Tensor[(3, 9, 7), float32], Tensor[(220, 52), bool], Tensor[(105, 1), int8], Tensor[(52), uint32], Tensor[(5, 88), float64], Tensor[(1, 728), float64], Tensor[(3, 9, 7), float32]) {
  @func_3725(%var_3726) /* ty=(Tensor[(3, 9, 7), float32], Tensor[(220, 52), bool], Tensor[(105, 1), int8], Tensor[(52), uint32], Tensor[(5, 88), float64], Tensor[(1, 728), float64], Tensor[(3, 9, 7), float32]) */
}

def @func_5816() -> Tensor[(3, 9, 7), float32] {
  @func_5814() /* ty=Tensor[(3, 9, 7), float32] */
}

def @func_2553() -> (Tensor[(3, 9, 7), float32], Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(3, 9, 7), float64]) {
  %773 = fn () -> (Tensor[(3, 9, 7), float32], Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(3, 9, 7), float64]) {
    %762 = cast(meta[relay.Constant][44] /* ty=Tensor[(52), uint32] */, dtype="uint32") /* ty=Tensor[(52), uint32] */;
    %763 = reshape(%762, newshape=[52]) /* ty=Tensor[(52), uint32] */;
    %764 = @func_477(%763) /* ty=(Tensor[(7, 14, 14), bool], Tensor[(7, 14, 14), bool], Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(416), uint32], Tensor[(13, 4, 8), bool]) */;
    %765 = @func_1046() /* ty=(Tensor[(3, 9, 7), float32],) */;
    %766 = %765.0;
    %767 = cast(%766, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
    %768 = asinh(%767) /* ty=Tensor[(3, 9, 7), float32] */;
    %769 = cast(%768, dtype="float64") /* ty=Tensor[(3, 9, 7), float64] */;
    %770 = @func_1832() /* ty=Tensor[(3, 9, 7), float32] */;
    %771 = %764.2;
    %772 = log2(%769) /* ty=Tensor[(3, 9, 7), float64] */;
    (%770, %771, meta[relay.Constant][44] /* ty=Tensor[(52), uint32] */, %772)
  };
  %773() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(3, 9, 7), float64]) */
}

def @func_3591() -> (Tensor[(3, 9, 7), float32], Tensor[(52), uint32], Tensor[(52), uint32]) {
  %774 = @func_1046() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %775 = cast(meta[relay.Constant][45] /* ty=Tensor[(52), uint32] */, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %776 = reshape(%775, newshape=[52]) /* ty=Tensor[(52), uint32] */;
  %777 = @func_477(%776) /* ty=(Tensor[(7, 14, 14), bool], Tensor[(7, 14, 14), bool], Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(416), uint32], Tensor[(13, 4, 8), bool]) */;
  %778 = %774.0;
  %779 = %777.3;
  (%778, %779, meta[relay.Constant][45] /* ty=Tensor[(52), uint32] */)
}

def @func_2693(%var_2692: Tensor[(3, 9, 7), float32]) -> Tensor[(3, 9, 7), float64] {
  %785 = fn (%var_2679: Tensor[(3, 9, 7), float32]) -> Tensor[(3, 9, 7), float64] {
    %780 = @func_1212() /* ty=Tensor[(3, 9, 7), float32] */;
    %781 = cast(%var_2679, dtype="float64") /* ty=Tensor[(3, 9, 7), float64] */;
    %782 = shape_of(%780, dtype="int32") /* ty=Tensor[(3), int32] */;
    %783 = cast(%780, dtype="float64") /* ty=Tensor[(3, 9, 7), float64] */;
    %784 = dyn.reshape(%781, %782, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    mod(%783, %784) /* ty=Tensor[(3, 9, 7), float64] */
  };
  %785(%var_2692) /* ty=Tensor[(3, 9, 7), float64] */
}

def @func_1197(%var_1189: Tensor[(2, 11, 10), float32]) -> Tensor[(2, 11, 10), float32] {
  %786 = cast(meta[relay.Constant][46] /* ty=Tensor[(2, 11, 10), float32] */, dtype="float32") /* ty=Tensor[(2, 11, 10), float32] */;
  %787 = shape_of(%var_1189, dtype="int32") /* ty=Tensor[(3), int32] */;
  %788 = cast(%var_1189, dtype="float32") /* ty=Tensor[(2, 11, 10), float32] */;
  %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%788, %789) /* ty=Tensor[(2, 11, 10), float32] */
}

def @func_6427(%var_6402: Tensor[(594), float32], %var_6411: Tensor[(189), float32]) -> (Tensor[(3, 9, 7), float32], Tensor[(594), float32], Tensor[(189), float32], Tensor[(10, 2, 8), float32]) {
  %790 = @func_4603() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %791 = cast(%var_6402, dtype="float32") /* ty=Tensor[(594), float32] */;
  %792 = reshape(%791, newshape=[11, 6, 9]) /* ty=Tensor[(11, 6, 9), float32] */;
  %793 = @func_4446(%792) /* ty=(Tensor[(11, 6, 9), bool], Tensor[(10, 2, 8), float32], Tensor[(189), float32], Tensor[(7, 10), int32]) */;
  %794 = %793.2;
  %795 = cast(%var_6411, dtype="float32") /* ty=Tensor[(189), float32] */;
  %796 = shape_of(%794, dtype="int32") /* ty=Tensor[(1), int32] */;
  %797 = cast(%794, dtype="float32") /* ty=Tensor[(189), float32] */;
  %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?), float32] */;
  %799 = @func_1721() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(160), float32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) */;
  %800 = %790.0;
  %801 = divide(%797, %798) /* ty=Tensor[(189), float32] */;
  %802 = %799.1;
  (%800, %var_6402, %801, %802)
}

def @func_6382() -> Tensor[(3, 9, 7), float32] {
  @func_6380() /* ty=Tensor[(3, 9, 7), float32] */
}

def @func_4603() -> (Tensor[(3, 9, 7), float32],) {
  %803 = @func_3464() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %804 = %803.0;
  (%804,)
}

def @func_4341(%var_4337: Tensor[(220), float32], %var_4338: Tensor[(220), float32], %var_4339: Tensor[(220), float32], %var_4340: Tensor[(220), uint8]) -> (Tensor[(3, 9, 7), float32], Tensor[(2, 11, 10), float32], Tensor[(3, 9, 7), float32], Tensor[(52), uint32], Tensor[(220), uint8], Tensor[(220), int64]) {
  %833 = fn (%var_4281: Tensor[(220), float32], %var_4295: Tensor[(220), float32], %var_4306: Tensor[(220), float32], %var_4317: Tensor[(220), uint8]) -> (Tensor[(3, 9, 7), float32], Tensor[(2, 11, 10), float32], Tensor[(3, 9, 7), float32], Tensor[(52), uint32], Tensor[(220), uint8], Tensor[(220), int64]) {
    %805 = cast(%var_4281, dtype="float32") /* ty=Tensor[(220), float32] */;
    %806 = reshape(%805, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), float32] */;
    %807 = @func_1721() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(160), float32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) */;
    %808 = @func_2552() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(3, 9, 7), float64]) */;
    %809 = cast(%var_4295, dtype="uint8") /* ty=Tensor[(220), uint8] */;
    %810 = shape_of(%var_4281, dtype="int32") /* ty=Tensor[(1), int32] */;
    %811 = cast(%var_4281, dtype="uint8") /* ty=Tensor[(220), uint8] */;
    %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %813 = cast(%var_4306, dtype="uint8") /* ty=Tensor[(220), uint8] */;
    %814 = shape_of(%var_4281, dtype="int32") /* ty=Tensor[(1), int32] */;
    %815 = cast(%var_4281, dtype="uint8") /* ty=Tensor[(220), uint8] */;
    %816 = dyn.reshape(%813, %814, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %817 = bitwise_and(%815, %816) /* ty=Tensor[(220), uint8] */;
    %818 = cast(%var_4317, dtype="float64") /* ty=Tensor[(220), float64] */;
    %819 = shape_of(%817, dtype="int32") /* ty=Tensor[(1), int32] */;
    %820 = cast(%817, dtype="float64") /* ty=Tensor[(220), float64] */;
    %821 = dyn.reshape(%818, %819, newshape=[]) /* ty=Tensor[(?), float64] */;
    %822 = divide(%820, %821) /* ty=Tensor[(220), float64] */;
    %823 = cast(%var_4295, dtype="int64") /* ty=Tensor[(220), int64] */;
    %824 = shape_of(%822, dtype="int32") /* ty=Tensor[(1), int32] */;
    %825 = cast(%822, dtype="int64") /* ty=Tensor[(220), int64] */;
    %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?), int64] */;
    %827 = @func_1832() /* ty=Tensor[(3, 9, 7), float32] */;
    %828 = @func_1197(%806) /* ty=Tensor[(2, 11, 10), float32] */;
    %829 = %807.0;
    %830 = %808.2;
    %831 = bitwise_or(%811, %812) /* ty=Tensor[(220), uint8] */;
    %832 = multiply(%825, %826) /* ty=Tensor[(220), int64] */;
    (%827, %828, %829, %830, %831, %832)
  };
  %833(%var_4337, %var_4338, %var_4339, %var_4340) /* ty=(Tensor[(3, 9, 7), float32], Tensor[(2, 11, 10), float32], Tensor[(3, 9, 7), float32], Tensor[(52), uint32], Tensor[(220), uint8], Tensor[(220), int64]) */
}

def @func_597(%var_558: Tensor[(5, 3, 7), int8], %var_565: Tensor[(52, 1), uint32], %var_566: Tensor[(416), uint32]) -> (Tensor[(5, 3, 7), int8], Tensor[(13, 4, 8), bool], Tensor[(416), uint32], Tensor[(52), bool]) {
  %834 = cast(%var_558, dtype="int8") /* ty=Tensor[(5, 3, 7), int8] */;
  %835 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(5, 3, 7), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %836 = cast(meta[relay.Constant][47] /* ty=Tensor[(5, 3, 7), int8] */, dtype="int8") /* ty=Tensor[(5, 3, 7), int8] */;
  %837 = dyn.reshape(%834, %835, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %838 = cast(%var_565, dtype="uint32") /* ty=Tensor[(52, 1), uint32] */;
  %839 = cast(%var_566, dtype="uint32") /* ty=Tensor[(416), uint32] */;
  %840 = reshape(%838, newshape=[13, 4, 1]) /* ty=Tensor[(13, 4, 1), uint32] */;
  %841 = reshape(%839, newshape=[13, 4, 8]) /* ty=Tensor[(13, 4, 8), uint32] */;
  %842 = @func_420(%840, %841) /* ty=(Tensor[(13, 4, 8), bool],) */;
  %843 = cast(%var_565, dtype="uint32") /* ty=Tensor[(52, 1), uint32] */;
  %844 = reshape(%843, newshape=[52]) /* ty=Tensor[(52), uint32] */;
  %845 = @func_477(%844) /* ty=(Tensor[(7, 14, 14), bool], Tensor[(7, 14, 14), bool], Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(416), uint32], Tensor[(13, 4, 8), bool]) */;
  %846 = %845.3;
  %847 = cast(%var_565, dtype="bool") /* ty=Tensor[(52, 1), bool] */;
  %848 = shape_of(%846, dtype="int32") /* ty=Tensor[(1), int32] */;
  %849 = cast(%846, dtype="bool") /* ty=Tensor[(52), bool] */;
  %850 = dyn.reshape(%847, %848, newshape=[]) /* ty=Tensor[(?), bool] */;
  %851 = bitwise_or(%836, %837) /* ty=Tensor[(5, 3, 7), int8] */;
  %852 = %842.0;
  %853 = greater_equal(%849, %850) /* ty=Tensor[(52), bool] */;
  (%851, %852, %var_566, %853)
}

def @func_2161(%var_1996: Tensor[(3, 9, 7), float32], %var_2003: Tensor[(105), int8], %var_2004: Tensor[(52), uint32], %var_2016: Tensor[(5, 88), float64], %var_2022: Tensor[(7, 104), float64]) -> (Tensor[(3, 9, 7), bool], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(8, 5, 11), float64], Tensor[(7, 104), float64], Tensor[(5, 88), uint64], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32], Tensor[(110, 4), float32], Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(2, 11, 10), float32], Tensor[(2, 11, 10), float32], Tensor[(220, 416), int32], Tensor[(220, 52), bool]) {
  %854 = @func_1212() /* ty=Tensor[(3, 9, 7), float32] */;
  %855 = cast(%var_1996, dtype="bool") /* ty=Tensor[(3, 9, 7), bool] */;
  %856 = shape_of(%854, dtype="int32") /* ty=Tensor[(3), int32] */;
  %857 = cast(%854, dtype="bool") /* ty=Tensor[(3, 9, 7), bool] */;
  %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %859 = cast(%var_2016, dtype="float64") /* ty=Tensor[(5, 88), float64] */;
  %860 = cast(%var_2016, dtype="float64") /* ty=Tensor[(5, 88), float64] */;
  %861 = reshape(%859, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
  %862 = reshape(%860, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
  %863 = @func_769(%861, %862) /* ty=(Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(8, 52), uint32], Tensor[(8, 5, 11), bool], Tensor[(8, 5, 11), uint8], Tensor[(8, 5, 11), float64]) */;
  %864 = cast(meta[relay.Constant][48] /* ty=Tensor[(220, 1), float32] */, dtype="float32") /* ty=Tensor[(220, 1), float32] */;
  %865 = cast(%var_2022, dtype="float64") /* ty=Tensor[(7, 104), float64] */;
  %866 = reshape(%864, newshape=[220]) /* ty=Tensor[(220), float32] */;
  %867 = reshape(%865, newshape=[728]) /* ty=Tensor[(728), float64] */;
  %868 = @func_1542(%866, %867) /* ty=(Tensor[(3, 9, 7), float32], Tensor[(2, 11, 10), float32], Tensor[(220), float32], Tensor[(2, 11, 10), float32], Tensor[(440), float64], Tensor[(728), float64], Tensor[(416), uint32], Tensor[(110, 4), float64], Tensor[(3, 9, 7), float32], Tensor[(10, 2, 16), float32], Tensor[(4, 80), bool], Tensor[(5, 3, 7), int8], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(3, 9, 7), float32], Tensor[(8, 5, 11), bool], Tensor[(8, 5, 11), float32], Tensor[(8, 5, 11), float32]) */;
  %869 = %868.7;
  %870 = cast(%869, dtype="uint64") /* ty=Tensor[(110, 4), uint64] */;
  %871 = shape_of(%var_2016, dtype="int32") /* ty=Tensor[(2), int32] */;
  %872 = cast(%var_2016, dtype="uint64") /* ty=Tensor[(5, 88), uint64] */;
  %873 = dyn.reshape(%870, %871, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %874 = @func_1157() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %875 = @func_1157() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %876 = cast(%var_2016, dtype="float32") /* ty=Tensor[(5, 88), float32] */;
  %877 = shape_of(%869, dtype="int32") /* ty=Tensor[(2), int32] */;
  %878 = cast(%869, dtype="float32") /* ty=Tensor[(110, 4), float32] */;
  %879 = dyn.reshape(%876, %877, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %880 = @func_1721() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(160), float32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) */;
  %881 = cast(meta[relay.Constant][48] /* ty=Tensor[(220, 1), float32] */, dtype="float32") /* ty=Tensor[(220, 1), float32] */;
  %882 = reshape(%881, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), float32] */;
  %883 = @func_1197(%882) /* ty=Tensor[(2, 11, 10), float32] */;
  %884 = cast(%883, dtype="float32") /* ty=Tensor[(2, 11, 10), float32] */;
  %885 = reshape(%884, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), float32] */;
  %886 = cast(meta[relay.Constant][48] /* ty=Tensor[(220, 1), float32] */, dtype="bool") /* ty=Tensor[(220, 1), bool] */;
  %887 = cast(meta[relay.Constant][49] /* ty=Tensor[(416), uint32] */, dtype="bool") /* ty=Tensor[(416), bool] */;
  %888 = logical_and(%886, %887) /* ty=Tensor[(220, 416), bool] */;
  %889 = cast(%888, dtype="int32") /* ty=Tensor[(220, 416), int32] */;
  %890 = cast(meta[relay.Constant][49] /* ty=Tensor[(416), uint32] */, dtype="int32") /* ty=Tensor[(416), int32] */;
  %891 = cast(%var_2003, dtype="int8") /* ty=Tensor[(105), int8] */;
  %892 = cast(%var_2004, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %893 = cast(meta[relay.Constant][49] /* ty=Tensor[(416), uint32] */, dtype="uint32") /* ty=Tensor[(416), uint32] */;
  %894 = reshape(%891, newshape=[5, 3, 7]) /* ty=Tensor[(5, 3, 7), int8] */;
  %895 = reshape(%892, newshape=[52, 1]) /* ty=Tensor[(52, 1), uint32] */;
  %896 = reshape(%893, newshape=[416]) /* ty=Tensor[(416), uint32] */;
  %897 = @func_597(%894, %895, %896) /* ty=(Tensor[(5, 3, 7), int8], Tensor[(13, 4, 8), bool], Tensor[(416), uint32], Tensor[(52), bool]) */;
  %898 = %897.3;
  %899 = cast(meta[relay.Constant][48] /* ty=Tensor[(220, 1), float32] */, dtype="bool") /* ty=Tensor[(220, 1), bool] */;
  %900 = cast(%898, dtype="bool") /* ty=Tensor[(52), bool] */;
  %901 = not_equal(%857, %858) /* ty=Tensor[(3, 9, 7), bool] */;
  %902 = %863.5;
  %903 = subtract(%872, %873) /* ty=Tensor[(5, 88), uint64] */;
  %904 = %874.0;
  %905 = %875.0;
  %906 = floor_mod(%878, %879) /* ty=Tensor[(110, 4), float32] */;
  %907 = @func_1212() /* ty=Tensor[(3, 9, 7), float32] */;
  %908 = %880.1;
  %909 = @func_1197(%885) /* ty=Tensor[(2, 11, 10), float32] */;
  %910 = bitwise_xor(%889, %890) /* ty=Tensor[(220, 416), int32] */;
  %911 = logical_or(%899, %900) /* ty=Tensor[(220, 52), bool] */;
  (%901, %var_2003, %var_2004, %902, %var_2022, %903, %904, %905, %906, %907, %908, %883, %909, %910, %911)
}

def @func_5017() -> (Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) {
  %915 = fn () -> (Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) {
    %912 = @func_3068() /* ty=(Tensor[(3, 9, 7), float32],) */;
    %913 = @func_4629() /* ty=Tensor[(3, 9, 7), float32] */;
    %914 = %912.0;
    (%913, %914)
  };
  %915() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) */
}

def @func_5814() -> Tensor[(3, 9, 7), float32] {
  @func_4629() /* ty=Tensor[(3, 9, 7), float32] */
}

def @func_479(%var_478: Tensor[(52), uint32]) -> (Tensor[(7, 14, 14), bool], Tensor[(7, 14, 14), bool], Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(416), uint32], Tensor[(13, 4, 8), bool]) {
  %940 = fn (%var_472: Tensor[(52), uint32]) -> (Tensor[(7, 14, 14), bool], Tensor[(7, 14, 14), bool], Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(416), uint32], Tensor[(13, 4, 8), bool]) {
    %916 = cast(meta[relay.Constant][51] /* ty=Tensor[(7, 14, 14), float64] */, dtype="bool") /* ty=Tensor[(7, 14, 14), bool] */;
    %917 = shape_of(meta[relay.Constant][50] /* ty=Tensor[(7, 14, 14), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %918 = cast(meta[relay.Constant][50] /* ty=Tensor[(7, 14, 14), float64] */, dtype="bool") /* ty=Tensor[(7, 14, 14), bool] */;
    %919 = dyn.reshape(%916, %917, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %920 = cast(meta[relay.Constant][50] /* ty=Tensor[(7, 14, 14), float64] */, dtype="float32") /* ty=Tensor[(7, 14, 14), float32] */;
    %921 = cos(%920) /* ty=Tensor[(7, 14, 14), float32] */;
    %922 = cast(meta[relay.Constant][50] /* ty=Tensor[(7, 14, 14), float64] */, dtype="bool") /* ty=Tensor[(7, 14, 14), bool] */;
    %923 = shape_of(%921, dtype="int32") /* ty=Tensor[(3), int32] */;
    %924 = cast(%921, dtype="bool") /* ty=Tensor[(7, 14, 14), bool] */;
    %925 = dyn.reshape(%922, %923, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %926 = cast(%var_472, dtype="uint32") /* ty=Tensor[(52), uint32] */;
    %927 = cast(meta[relay.Constant][52] /* ty=Tensor[(416), uint32] */, dtype="uint32") /* ty=Tensor[(416), uint32] */;
    %928 = reshape(%926, newshape=[13, 4, 1]) /* ty=Tensor[(13, 4, 1), uint32] */;
    %929 = reshape(%927, newshape=[13, 4, 8]) /* ty=Tensor[(13, 4, 8), uint32] */;
    %930 = @func_420(%928, %929) /* ty=(Tensor[(13, 4, 8), bool],) */;
    %931 = cast(%var_472, dtype="uint32") /* ty=Tensor[(52), uint32] */;
    %932 = cast(meta[relay.Constant][52] /* ty=Tensor[(416), uint32] */, dtype="uint32") /* ty=Tensor[(416), uint32] */;
    %933 = reshape(%931, newshape=[13, 4, 1]) /* ty=Tensor[(13, 4, 1), uint32] */;
    %934 = reshape(%932, newshape=[13, 4, 8]) /* ty=Tensor[(13, 4, 8), uint32] */;
    %935 = @func_420(%933, %934) /* ty=(Tensor[(13, 4, 8), bool],) */;
    %936 = equal(%918, %919) /* ty=Tensor[(7, 14, 14), bool] */;
    %937 = greater(%924, %925) /* ty=Tensor[(7, 14, 14), bool] */;
    %938 = %930.0;
    %939 = %935.0;
    (%936, %937, %938, %var_472, meta[relay.Constant][52] /* ty=Tensor[(416), uint32] */, %939)
  };
  %940(%var_478) /* ty=(Tensor[(7, 14, 14), bool], Tensor[(7, 14, 14), bool], Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(416), uint32], Tensor[(13, 4, 8), bool]) */
}

def @func_3333(%var_3327: Tensor[(10, 9, 5), uint32], %var_3328: Tensor[(728), float64], %var_3329: Tensor[(728), uint8], %var_3330: Tensor[(3, 9, 7), float64], %var_3331: Tensor[(728), uint8], %var_3332: Tensor[(52), uint32]) -> (Tensor[(440), float64], Tensor[(416), uint32], Tensor[(440), float64], Tensor[(10, 9, 5), float32], Tensor[(728), uint64], Tensor[(10, 9, 5), bool], Tensor[(728), int16], Tensor[(728), float64], Tensor[(3, 9, 7), float32], Tensor[(728), bool], Tensor[(13, 4, 8), bool], Tensor[(3, 9, 7), float32], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(8, 5, 11), float64]) {
  @func_3325(%var_3327, %var_3328, %var_3329, %var_3330, %var_3331, %var_3332) /* ty=(Tensor[(440), float64], Tensor[(416), uint32], Tensor[(440), float64], Tensor[(10, 9, 5), float32], Tensor[(728), uint64], Tensor[(10, 9, 5), bool], Tensor[(728), int16], Tensor[(728), float64], Tensor[(3, 9, 7), float32], Tensor[(728), bool], Tensor[(13, 4, 8), bool], Tensor[(3, 9, 7), float32], Tensor[(105), int8], Tensor[(52), uint32], Tensor[(8, 5, 11), float64]) */
}

def @func_3903(%var_3886: Tensor[(70), int32]) -> (Tensor[(3, 9, 7), float32], Tensor[(52), bool], Tensor[(5, 7, 2), int32], Tensor[(70), int32]) {
  %941 = @func_3591() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(52), uint32], Tensor[(52), uint32]) */;
  %942 = %941.2;
  %943 = cast(meta[relay.Constant][53] /* ty=Tensor[(52), uint32] */, dtype="bool") /* ty=Tensor[(52), bool] */;
  %944 = shape_of(%942, dtype="int32") /* ty=Tensor[(1), int32] */;
  %945 = cast(%942, dtype="bool") /* ty=Tensor[(52), bool] */;
  %946 = dyn.reshape(%943, %944, newshape=[]) /* ty=Tensor[(?), bool] */;
  %947 = cast(%var_3886, dtype="int32") /* ty=Tensor[(70), int32] */;
  %948 = reshape(%947, newshape=[5, 7, 2]) /* ty=Tensor[(5, 7, 2), int32] */;
  %949 = @func_1890(%948) /* ty=(Tensor[(5, 7, 2), int32], Tensor[(3, 9, 7), float32]) */;
  %950 = @func_3431() /* ty=Tensor[(3, 9, 7), float32] */;
  %951 = logical_and(%945, %946) /* ty=Tensor[(52), bool] */;
  %952 = %949.0;
  (%950, %951, %952, %var_3886)
}

def @func_5072() -> Tensor[(160), float32] {
  %953 = @func_1721() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(10, 2, 8), float32], Tensor[(160), float32], Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) */;
  %953.2
}

def @func_5983() -> Tensor[(13, 4, 8), bool] {
  %954 = @func_4267() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(13, 4, 8), bool], Tensor[(3, 9, 7), float32]) */;
  %954.1
}

def @func_1047() -> (Tensor[(3, 9, 7), float32],) {
  %957 = fn () -> (Tensor[(3, 9, 7), float32],) {
    %955 = cast(meta[relay.Constant][54] /* ty=Tensor[(3, 9, 7), float32] */, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
    %956 = acos(%955) /* ty=Tensor[(3, 9, 7), float32] */;
    (%956,)
  };
  %957() /* ty=(Tensor[(3, 9, 7), float32],) */
}

def @func_6041(%var_6039: Tensor[(220), float32]) -> (Tensor[(13, 4, 8), bool], Tensor[(2, 11, 10), float32], Tensor[(220), float32]) {
  %958 = cast(%var_6039, dtype="float32") /* ty=Tensor[(220), float32] */;
  %959 = reshape(%958, newshape=[2, 11, 10]) /* ty=Tensor[(2, 11, 10), float32] */;
  %960 = @func_5983() /* ty=Tensor[(13, 4, 8), bool] */;
  %961 = @func_1197(%959) /* ty=Tensor[(2, 11, 10), float32] */;
  (%960, %961, %var_6039)
}

def @func_1213() -> Tensor[(3, 9, 7), float32] {
  %963 = fn () -> Tensor[(3, 9, 7), float32] {
    %962 = @func_1046() /* ty=(Tensor[(3, 9, 7), float32],) */;
    %962.0
  };
  %963() /* ty=Tensor[(3, 9, 7), float32] */
}

def @func_5389(%var_5353: Tensor[(66, 9), float32], %var_5373: Tensor[(150), uint64], %var_5383: Tensor[(252), uint16]) -> (Tensor[(3, 9, 7), float32], Tensor[(7, 10), int32], Tensor[(2, 15, 5), uint64], Tensor[(150), uint64], Tensor[(10, 2, 8), float32], Tensor[(252), uint16], Tensor[(66, 9), bool]) {
  %964 = @func_4126() /* ty=(Tensor[(52), uint32], Tensor[(3, 9, 7), float32]) */;
  %965 = cast(%var_5353, dtype="float32") /* ty=Tensor[(66, 9), float32] */;
  %966 = reshape(%965, newshape=[11, 6, 9]) /* ty=Tensor[(11, 6, 9), float32] */;
  %967 = @func_4446(%966) /* ty=(Tensor[(11, 6, 9), bool], Tensor[(10, 2, 8), float32], Tensor[(189), float32], Tensor[(7, 10), int32]) */;
  %968 = cast(%var_5373, dtype="uint64") /* ty=Tensor[(150), uint64] */;
  %969 = reshape(%968, newshape=[2, 15, 5]) /* ty=Tensor[(2, 15, 5), uint64] */;
  %970 = cast(%var_5383, dtype="uint16") /* ty=Tensor[(252), uint16] */;
  %971 = cast(%var_5383, dtype="uint16") /* ty=Tensor[(252), uint16] */;
  %972 = reshape(%970, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), uint16] */;
  %973 = reshape(%971, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), uint16] */;
  %974 = @func_3377(%972, %973) /* ty=(Tensor[(3, 7, 12), uint16], Tensor[(10, 2, 8), float32], Tensor[(160), float32]) */;
  %975 = cast(%var_5353, dtype="float64") /* ty=Tensor[(66, 9), float64] */;
  %976 = rsqrt(%975) /* ty=Tensor[(66, 9), float64] */;
  %977 = cast(%var_5353, dtype="bool") /* ty=Tensor[(66, 9), bool] */;
  %978 = shape_of(%976, dtype="int32") /* ty=Tensor[(2), int32] */;
  %979 = cast(%976, dtype="bool") /* ty=Tensor[(66, 9), bool] */;
  %980 = dyn.reshape(%977, %978, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %981 = %964.1;
  %982 = %967.3;
  %983 = @func_4771(%969) /* ty=Tensor[(2, 15, 5), uint64] */;
  %984 = %974.1;
  %985 = equal(%979, %980) /* ty=Tensor[(66, 9), bool] */;
  (%981, %982, %983, %var_5373, %984, %var_5383, %985)
}

def @func_3464() -> (Tensor[(3, 9, 7), float32],) {
  %986 = @func_1819() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %987 = %986.0;
  (%987,)
}

def @func_2722() -> Tensor[(3, 9, 7), float32] {
  %989 = fn () -> Tensor[(3, 9, 7), float32] {
    %988 = @func_1819() /* ty=(Tensor[(3, 9, 7), float32],) */;
    %988.0
  };
  %989() /* ty=Tensor[(3, 9, 7), float32] */
}

def @func_3380(%var_3378: Tensor[(3, 7, 12), uint16], %var_3379: Tensor[(3, 7, 12), uint16]) -> (Tensor[(3, 7, 12), uint16], Tensor[(10, 2, 8), float32], Tensor[(160), float32]) {
  %998 = fn (%var_3335: Tensor[(3, 7, 12), uint16], %var_3336: Tensor[(3, 7, 12), uint16]) -> (Tensor[(3, 7, 12), uint16], Tensor[(10, 2, 8), float32], Tensor[(160), float32]) {
    %990 = cast(%var_3336, dtype="uint16") /* ty=Tensor[(3, 7, 12), uint16] */;
    %991 = shape_of(%var_3335, dtype="int32") /* ty=Tensor[(3), int32] */;
    %992 = cast(%var_3335, dtype="uint16") /* ty=Tensor[(3, 7, 12), uint16] */;
    %993 = dyn.reshape(%990, %991, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %994 = cast(meta[relay.Constant][55] /* ty=Tensor[(160), float32] */, dtype="float32") /* ty=Tensor[(160), float32] */;
    %995 = reshape(%994, newshape=[10, 2, 8]) /* ty=Tensor[(10, 2, 8), float32] */;
    %996 = right_shift(%992, %993) /* ty=Tensor[(3, 7, 12), uint16] */;
    %997 = @func_1664(%995) /* ty=Tensor[(10, 2, 8), float32] */;
    (%996, %997, meta[relay.Constant][55] /* ty=Tensor[(160), float32] */)
  };
  %998(%var_3378, %var_3379) /* ty=(Tensor[(3, 7, 12), uint16], Tensor[(10, 2, 8), float32], Tensor[(160), float32]) */
}

def @func_4908() -> Tensor[(52), uint32] {
  %999 = @func_3591() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(52), uint32], Tensor[(52), uint32]) */;
  %999.2
}

def @func_773(%var_771: Tensor[(8, 5, 11), float64], %var_772: Tensor[(8, 5, 11), float64]) -> (Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(8, 52), uint32], Tensor[(8, 5, 11), bool], Tensor[(8, 5, 11), uint8], Tensor[(8, 5, 11), float64]) {
  @func_769(%var_771, %var_772) /* ty=(Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(8, 52), uint32], Tensor[(8, 5, 11), bool], Tensor[(8, 5, 11), uint8], Tensor[(8, 5, 11), float64]) */
}

def @func_1200(%var_1198: Tensor[(2, 11, 10), float32]) -> Tensor[(2, 11, 10), float32] {
  @func_1197(%var_1198) /* ty=Tensor[(2, 11, 10), float32] */
}

def @func_3639() -> Tensor[(3, 9, 7), float32] {
  @func_3637() /* ty=Tensor[(3, 9, 7), float32] */
}

def @main(%var_6570: Tensor[(1, 11, 12), int8], %var_6571: Tensor[(2, 11, 12), int8]) -> Tensor[(2, 11, 12), int8] {
  %1000 = cast(%var_6570, dtype="int8") /* ty=Tensor[(1, 11, 12), int8] */;
  %1001 = cast(%var_6571, dtype="int8") /* ty=Tensor[(2, 11, 12), int8] */;
  bitwise_xor(%1000, %1001) /* ty=Tensor[(2, 11, 12), int8] */
}

def @func_6496() -> (Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) {
  @func_6494() /* ty=(Tensor[(3, 9, 7), float32], Tensor[(3, 9, 7), float32]) */
}

def @func_769(%var_699: Tensor[(8, 5, 11), float64], %var_737: Tensor[(8, 5, 11), float64]) -> (Tensor[(13, 4, 8), bool], Tensor[(52), uint32], Tensor[(8, 52), uint32], Tensor[(8, 5, 11), bool], Tensor[(8, 5, 11), uint8], Tensor[(8, 5, 11), float64]) {
  %1002 = cast(meta[relay.Constant][56] /* ty=Tensor[(52), uint32] */, dtype="uint32") /* ty=Tensor[(52), uint32] */;
  %1003 = cast(meta[relay.Constant][57] /* ty=Tensor[(8, 52), uint32] */, dtype="uint32") /* ty=Tensor[(8, 52), uint32] */;
  %1004 = reshape(%1002, newshape=[13, 4, 1]) /* ty=Tensor[(13, 4, 1), uint32] */;
  %1005 = reshape(%1003, newshape=[13, 4, 8]) /* ty=Tensor[(13, 4, 8), uint32] */;
  %1006 = @func_420(%1004, %1005) /* ty=(Tensor[(13, 4, 8), bool],) */;
  %1007 = cast(%var_699, dtype="float64") /* ty=Tensor[(8, 5, 11), float64] */;
  %1008 = tan(%1007) /* ty=Tensor[(8, 5, 11), float64] */;
  %1009 = cast(%1008, dtype="int64") /* ty=Tensor[(8, 5, 11), int64] */;
  %1010 = shape_of(%var_699, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1011 = cast(%var_699, dtype="int64") /* ty=Tensor[(8, 5, 11), int64] */;
  %1012 = dyn.reshape(%1009, %1010, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1013 = left_shift(%1011, %1012) /* ty=Tensor[(8, 5, 11), int64] */;
  %1014 = cast(%1013, dtype="float64") /* ty=Tensor[(8, 5, 11), float64] */;
  %1015 = cos(%1014) /* ty=Tensor[(8, 5, 11), float64] */;
  %1016 = cast(%var_737, dtype="bool") /* ty=Tensor[(8, 5, 11), bool] */;
  %1017 = shape_of(%1015, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1018 = cast(%1015, dtype="bool") /* ty=Tensor[(8, 5, 11), bool] */;
  %1019 = dyn.reshape(%1016, %1017, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1020 = cast(%var_699, dtype="uint8") /* ty=Tensor[(8, 5, 11), uint8] */;
  %1021 = shape_of(%1015, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1022 = cast(%1015, dtype="uint8") /* ty=Tensor[(8, 5, 11), uint8] */;
  %1023 = dyn.reshape(%1020, %1021, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1024 = cast(%1008, dtype="float64") /* ty=Tensor[(8, 5, 11), float64] */;
  %1025 = %1006.0;
  %1026 = less_equal(%1018, %1019) /* ty=Tensor[(8, 5, 11), bool] */;
  %1027 = bitwise_or(%1022, %1023) /* ty=Tensor[(8, 5, 11), uint8] */;
  %1028 = sinh(%1024) /* ty=Tensor[(8, 5, 11), float64] */;
  (%1025, meta[relay.Constant][56] /* ty=Tensor[(52), uint32] */, meta[relay.Constant][57] /* ty=Tensor[(8, 52), uint32] */, %1026, %1027, %1028)
}

def @func_3068() -> (Tensor[(3, 9, 7), float32],) {
  %1029 = @func_1764() /* ty=(Tensor[(3, 9, 7), float32],) */;
  %1030 = %1029.0;
  (%1030,)
}

def @func_4128() -> (Tensor[(52), uint32], Tensor[(3, 9, 7), float32]) {
  @func_4126() /* ty=(Tensor[(52), uint32], Tensor[(3, 9, 7), float32]) */
}

def @func_4605() -> (Tensor[(3, 9, 7), float32],) {
  @func_4603() /* ty=(Tensor[(3, 9, 7), float32],) */
}

def @func_6186(%var_6181: Tensor[(5, 13, 2), float32]) -> Tensor[(5, 13, 2), float32] {
  %1031 = cast(%var_6181, dtype="float32") /* ty=Tensor[(5, 13, 2), float32] */;
  erf(%1031) /* ty=Tensor[(5, 13, 2), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen390/build/output.py:2217: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen390/build/output.py", line 2222, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(264) tvmgen_default_fused_bitwise_xor_kernel0(signed char* __restrict__ T_bitwise_xor, signed char* __restrict__ placeholder, signed char* __restrict__ placeholder1) {
  T_bitwise_xor[(((int)threadIdx.x))] = (placeholder[((((int)threadIdx.x) % 132))] ^ placeholder1[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

