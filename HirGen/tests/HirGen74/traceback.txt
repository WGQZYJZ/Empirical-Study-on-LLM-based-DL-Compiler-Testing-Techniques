==========mod==========
#[version = "0.0.5"]
def @func_364(%var_351: Tensor[(16, 16, 1), uint64]) -> (Tensor[(16, 16, 5), uint64], Tensor[(16, 16, 5), float32]) {
  %0 = cast(%var_351, dtype="uint64") /* ty=Tensor[(16, 16, 1), uint64] */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(16, 16, 5), uint64] */, dtype="uint64") /* ty=Tensor[(16, 16, 5), uint64] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(16, 16, 5), uint64] */, dtype="float32") /* ty=Tensor[(16, 16, 5), float32] */;
  %3 = bitwise_and(%0, %1) /* ty=Tensor[(16, 16, 5), uint64] */;
  %4 = log2(%2) /* ty=Tensor[(16, 16, 5), float32] */;
  (%3, %4)
}

def @func_3664(%var_3610: Tensor[(8, 11, 1), float32], %var_3616: Tensor[(8, 11, 16), float32], %var_3642: Tensor[(8, 11, 5), float32]) -> (Tensor[(8, 11, 16), float64], Tensor[(8, 11, 16), bool], Tensor[(8, 11, ?), float64], Tensor[(7, 12, 16), float32], Tensor[(28, 48), float32], Tensor[(8, 11, 5), uint8], Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32]) {
  %5 = cast(%var_3610, dtype="float64") /* ty=Tensor[(8, 11, 1), float64] */;
  %6 = cast(%var_3616, dtype="float64") /* ty=Tensor[(8, 11, 16), float64] */;
  %7 = @func_3166() /* ty=Tensor[(8, 11, 1), float32] */;
  %8 = cast(%var_3610, dtype="uint16") /* ty=Tensor[(8, 11, 1), uint16] */;
  %9 = shape_of(%7, dtype="int32") /* ty=Tensor[(3), int32] */;
  %10 = cast(%7, dtype="uint16") /* ty=Tensor[(8, 11, 1), uint16] */;
  %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %12 = multiply(%10, %11) /* ty=Tensor[(8, 11, ?), uint16] */;
  %13 = cast(%12, dtype="float32") /* ty=Tensor[(8, 11, ?), float32] */;
  %14 = atan(%13) /* ty=Tensor[(8, 11, ?), float32] */;
  %15 = cast(%14, dtype="bool") /* ty=Tensor[(8, 11, ?), bool] */;
  %16 = cast(%var_3616, dtype="bool") /* ty=Tensor[(8, 11, 16), bool] */;
  %17 = cast(%14, dtype="float64") /* ty=Tensor[(8, 11, ?), float64] */;
  %18 = cast(meta[relay.Constant][1] /* ty=Tensor[(28, 48), float32] */, dtype="float32") /* ty=Tensor[(28, 48), float32] */;
  %19 = reshape(%18, newshape=[7, 12, 16]) /* ty=Tensor[(7, 12, 16), float32] */;
  %20 = @func_728(%19) /* ty=(Tensor[(7, 12, 16), float32],) */;
  %21 = cast(%14, dtype="uint8") /* ty=Tensor[(8, 11, ?), uint8] */;
  %22 = cast(%var_3642, dtype="uint8") /* ty=Tensor[(8, 11, 5), uint8] */;
  %23 = @func_3189() /* ty=(Tensor[(8, 11, 1), float32],) */;
  %24 = mod(%5, %6) /* ty=Tensor[(8, 11, 16), float64] */;
  %25 = greater_equal(%15, %16) /* ty=Tensor[(8, 11, 16), bool] */;
  %26 = sigmoid(%17) /* ty=Tensor[(8, 11, ?), float64] */;
  %27 = %20.0;
  %28 = bitwise_or(%21, %22) /* ty=Tensor[(8, 11, 5), uint8] */;
  %29 = %23.0;
  %30 = @func_3310() /* ty=Tensor[(8, 11, 1), float32] */;
  (%24, %25, %26, %27, meta[relay.Constant][1] /* ty=Tensor[(28, 48), float32] */, %28, %29, %30)
}

def @func_958(%var_946: Tensor[(14, 7, 6), int32], %var_952: Tensor[(192), float64]) -> (Tensor[(14, 7, 6), int32], Tensor[(16, 2, 6), float64], Tensor[(192), float64]) {
  %31 = cast(%var_946, dtype="int32") /* ty=Tensor[(14, 7, 6), int32] */;
  %32 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(14, 7, 6), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(meta[relay.Constant][2] /* ty=Tensor[(14, 7, 6), int32] */, dtype="int32") /* ty=Tensor[(14, 7, 6), int32] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %35 = cast(%var_952, dtype="float64") /* ty=Tensor[(192), float64] */;
  %36 = reshape(%35, newshape=[16, 2, 6]) /* ty=Tensor[(16, 2, 6), float64] */;
  %37 = subtract(%33, %34) /* ty=Tensor[(14, 7, 6), int32] */;
  %38 = @func_265(%36) /* ty=Tensor[(16, 2, 6), float64] */;
  (%37, %38, %var_952)
}

def @func_1161(%var_1119: Tensor[(13, 9, 10), float32], %var_1137: Tensor[(448), bool]) -> (Tensor[(7, 8, 8), float64], Tensor[(448), bool], Tensor[(13, 9, 10), float32], Tensor[(1050, ?), uint32]) {
  %39 = cast(%var_1137, dtype="bool") /* ty=Tensor[(448), bool] */;
  %40 = cast(%var_1137, dtype="bool") /* ty=Tensor[(448), bool] */;
  %41 = reshape(%39, newshape=[7, 8, 8]) /* ty=Tensor[(7, 8, 8), bool] */;
  %42 = reshape(%40, newshape=[7, 8, 8]) /* ty=Tensor[(7, 8, 8), bool] */;
  %43 = @func_151(%41, %42) /* ty=(Tensor[(7, 8, 8), bool], Tensor[(1050, ?), uint32], Tensor[(7, 8, 8), float64]) */;
  %44 = cast(%var_1119, dtype="float32") /* ty=Tensor[(13, 9, 10), float32] */;
  %45 = asinh(%44) /* ty=Tensor[(13, 9, 10), float32] */;
  %46 = cast(%var_1119, dtype="uint32") /* ty=Tensor[(13, 9, 10), uint32] */;
  %47 = shape_of(%45, dtype="int32") /* ty=Tensor[(3), int32] */;
  %48 = cast(%45, dtype="uint32") /* ty=Tensor[(13, 9, 10), uint32] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %50 = bitwise_or(%48, %49) /* ty=Tensor[(13, 9, 10), uint32] */;
  %51 = cast(meta[relay.Constant][3] /* ty=Tensor[(13, 9, 10), uint32] */, dtype="float32") /* ty=Tensor[(13, 9, 10), float32] */;
  %52 = shape_of(%50, dtype="int32") /* ty=Tensor[(3), int32] */;
  %53 = cast(%50, dtype="float32") /* ty=Tensor[(13, 9, 10), float32] */;
  %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %55 = cast(%var_1137, dtype="bool") /* ty=Tensor[(448), bool] */;
  %56 = %43.2;
  %57 = cast(%56, dtype="bool") /* ty=Tensor[(7, 8, 8), bool] */;
  %58 = reshape(%55, newshape=[7, 8, 8]) /* ty=Tensor[(7, 8, 8), bool] */;
  %59 = reshape(%57, newshape=[7, 8, 8]) /* ty=Tensor[(7, 8, 8), bool] */;
  %60 = @func_151(%58, %59) /* ty=(Tensor[(7, 8, 8), bool], Tensor[(1050, ?), uint32], Tensor[(7, 8, 8), float64]) */;
  %61 = mod(%53, %54) /* ty=Tensor[(13, 9, 10), float32] */;
  %62 = %60.1;
  (%56, %var_1137, %61, %62)
}

def @func_4163() -> (Tensor[(8, 11, 1), float32], Tensor[(7, 8, 8), float64], Tensor[(1170), float32], Tensor[(4, 112), bool], Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32], Tensor[(1320), float32]) {
  %63 = @func_2923() /* ty=(Tensor[(8, 11, 1), float32],) */;
  %64 = cast(meta[relay.Constant][4] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %65 = cast(meta[relay.Constant][5] /* ty=Tensor[(4, 112), bool] */, dtype="bool") /* ty=Tensor[(4, 112), bool] */;
  %66 = reshape(%64, newshape=[13, 9, 10]) /* ty=Tensor[(13, 9, 10), float32] */;
  %67 = reshape(%65, newshape=[448]) /* ty=Tensor[(448), bool] */;
  %68 = @func_1161(%66, %67) /* ty=(Tensor[(7, 8, 8), float64], Tensor[(448), bool], Tensor[(13, 9, 10), float32], Tensor[(1050, ?), uint32]) */;
  %69 = cast(meta[relay.Constant][6] /* ty=Tensor[(1320), float32] */, dtype="float32") /* ty=Tensor[(1320), float32] */;
  %70 = reshape(%69, newshape=[8, 11, 15]) /* ty=Tensor[(8, 11, 15), float32] */;
  %71 = @func_3233(%70) /* ty=(Tensor[(8, 11, 15), bool], Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32]) */;
  %72 = %63.0;
  %73 = %68.0;
  %74 = @func_3310() /* ty=Tensor[(8, 11, 1), float32] */;
  %75 = %71.1;
  (%72, %73, meta[relay.Constant][4] /* ty=Tensor[(1170), float32] */, meta[relay.Constant][5] /* ty=Tensor[(4, 112), bool] */, %74, %75, meta[relay.Constant][6] /* ty=Tensor[(1320), float32] */)
}

def @func_3986(%var_3877: Tensor[(640), int16]) -> (Tensor[(8, 11, 1), float32], Tensor[(640), float32], Tensor[(640), int16], Tensor[(1344), float32], Tensor[(8, 11, 1), bool], Tensor[(8, 11, ?), int64]) {
  %76 = cast(meta[relay.Constant][7] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %77 = cast(%var_3877, dtype="int16") /* ty=Tensor[(640), int16] */;
  %78 = cast(meta[relay.Constant][8] /* ty=Tensor[(1344), float32] */, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %79 = reshape(%76, newshape=[]) /* ty=int16 */;
  %80 = reshape(%77, newshape=[640]) /* ty=Tensor[(640), int16] */;
  %81 = reshape(%78, newshape=[1344]) /* ty=Tensor[(1344), float32] */;
  %82 = @func_2983(%79, %80, %81) /* ty=(Tensor[(8, 11, 1), float32], Tensor[(16, 8, 5), float32], Tensor[(1344), float32], Tensor[(7, 12, 16), float32], Tensor[(640), float32], Tensor[(8, 11, 1), float32]) */;
  %83 = @func_2873() /* ty=Tensor[(8, 11, 1), float32] */;
  %84 = cast(%83, dtype="bool") /* ty=Tensor[(8, 11, 1), bool] */;
  %85 = cast(meta[relay.Constant][7] /* ty=int16 */, dtype="bool") /* ty=bool */;
  %86 = @func_3400() /* ty=(Tensor[(8, 11, 1), float32],) */;
  %87 = %86.0;
  %88 = cast(%87, dtype="float32") /* ty=Tensor[(8, 11, 1), float32] */;
  %89 = cos(%88) /* ty=Tensor[(8, 11, 1), float32] */;
  %90 = cast(meta[relay.Constant][9] /* ty=Tensor[(8, 11, 1), float32] */, dtype="int64") /* ty=Tensor[(8, 11, 1), int64] */;
  %91 = shape_of(%89, dtype="int32") /* ty=Tensor[(3), int32] */;
  %92 = cast(%89, dtype="int64") /* ty=Tensor[(8, 11, 1), int64] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %94 = @func_3166() /* ty=Tensor[(8, 11, 1), float32] */;
  %95 = %82.4;
  %96 = not_equal(%84, %85) /* ty=Tensor[(8, 11, 1), bool] */;
  %97 = bitwise_and(%92, %93) /* ty=Tensor[(8, 11, ?), int64] */;
  (%94, %95, %var_3877, meta[relay.Constant][8] /* ty=Tensor[(1344), float32] */, %96, %97)
}

def @func_5606() -> Tensor[(8, 11, 1), float32] {
  %98 = @func_2923() /* ty=(Tensor[(8, 11, 1), float32],) */;
  %98.0
}

def @main(%var_5969: Tensor[(650), int64]) -> (Tensor[(650), int64],) {
  %99 = @func_5332() /* ty=(Tensor[(650), int64],) */;
  %100 = %99.0;
  %101 = cast(%var_5969, dtype="int64") /* ty=Tensor[(650), int64] */;
  %102 = shape_of(%100, dtype="int32") /* ty=Tensor[(1), int32] */;
  %103 = cast(%100, dtype="int64") /* ty=Tensor[(650), int64] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?), int64] */;
  %105 = left_shift(%103, %104) /* ty=Tensor[(650), int64] */;
  (%105,)
}

def @func_4193(%var_4182: Tensor[(8, 11, 3), float32]) -> Tensor[(8, 11, 3), bool] {
  %106 = @func_4068() /* ty=Tensor[(8, 11, 1), float32] */;
  %107 = cast(%106, dtype="bool") /* ty=Tensor[(8, 11, 1), bool] */;
  %108 = cast(%var_4182, dtype="bool") /* ty=Tensor[(8, 11, 3), bool] */;
  logical_and(%107, %108) /* ty=Tensor[(8, 11, 3), bool] */
}

def @func_728(%var_713: Tensor[(7, 12, 16), float32]) -> (Tensor[(7, 12, 16), float32],) {
  %109 = cast(%var_713, dtype="float32") /* ty=Tensor[(7, 12, 16), float32] */;
  %110 = asinh(%109) /* ty=Tensor[(7, 12, 16), float32] */;
  (%110,)
}

def @func_901(%var_855: Tensor[(7, 14, 5), float32]) -> (Tensor[(7, 14, 5), float64], Tensor[(15, 10, 7), uint32], Tensor[(1050), uint32]) {
  %111 = cast(%var_855, dtype="float32") /* ty=Tensor[(7, 14, 5), float32] */;
  %112 = sin(%111) /* ty=Tensor[(7, 14, 5), float32] */;
  %113 = cast(%112, dtype="float64") /* ty=Tensor[(7, 14, 5), float64] */;
  %114 = cast(meta[relay.Constant][10] /* ty=Tensor[(1050), uint32] */, dtype="uint32") /* ty=Tensor[(1050), uint32] */;
  %115 = reshape(%114, newshape=[15, 10, 7]) /* ty=Tensor[(15, 10, 7), uint32] */;
  %116 = erf(%113) /* ty=Tensor[(7, 14, 5), float64] */;
  %117 = @func_55(%115) /* ty=Tensor[(15, 10, 7), uint32] */;
  (%116, %117, meta[relay.Constant][10] /* ty=Tensor[(1050), uint32] */)
}

def @func_2873() -> Tensor[(8, 11, 1), float32] {
  @func_2845() /* ty=Tensor[(8, 11, 1), float32] */
}

def @func_3087(%var_3046: Tensor[(8, 11, 13), float32], %var_3076: Tensor[(1170), float32], %var_3077: Tensor[(112, 4), bool]) -> (Tensor[(2, 12, 6), bool], Tensor[(24), float64], Tensor[(144), float32], Tensor[(8, 11, 13), float64], Tensor[(7, 8, 8), float64], Tensor[(1170), float32], Tensor[(112, 4), bool], Tensor[(15, 10, 7), uint32], Tensor[(490), float32]) {
  %118 = cast(meta[relay.Constant][11] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %119 = cast(meta[relay.Constant][12] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %120 = reshape(%118, newshape=[2, 12, 1]) /* ty=Tensor[(2, 12, 1), float64] */;
  %121 = reshape(%119, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), float32] */;
  %122 = @func_1982(%120, %121) /* ty=(Tensor[(2, 12, 16), float64], Tensor[(2, 12, 6), bool], Tensor[(2, 12, 1), float32]) */;
  %123 = @func_2845() /* ty=Tensor[(8, 11, 1), float32] */;
  %124 = cast(%123, dtype="bool") /* ty=Tensor[(8, 11, 1), bool] */;
  %125 = cast(%var_3046, dtype="bool") /* ty=Tensor[(8, 11, 13), bool] */;
  %126 = logical_and(%124, %125) /* ty=Tensor[(8, 11, 13), bool] */;
  %127 = cast(%var_3046, dtype="float64") /* ty=Tensor[(8, 11, 13), float64] */;
  %128 = shape_of(%126, dtype="int32") /* ty=Tensor[(3), int32] */;
  %129 = cast(%126, dtype="float64") /* ty=Tensor[(8, 11, 13), float64] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %131 = cast(%var_3076, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %132 = cast(%var_3077, dtype="bool") /* ty=Tensor[(112, 4), bool] */;
  %133 = reshape(%131, newshape=[13, 9, 10]) /* ty=Tensor[(13, 9, 10), float32] */;
  %134 = reshape(%132, newshape=[448]) /* ty=Tensor[(448), bool] */;
  %135 = @func_1161(%133, %134) /* ty=(Tensor[(7, 8, 8), float64], Tensor[(448), bool], Tensor[(13, 9, 10), float32], Tensor[(1050, ?), uint32]) */;
  %136 = cast(meta[relay.Constant][13] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %137 = reshape(%136, newshape=[7, 14, 5]) /* ty=Tensor[(7, 14, 5), float32] */;
  %138 = @func_901(%137) /* ty=(Tensor[(7, 14, 5), float64], Tensor[(15, 10, 7), uint32], Tensor[(1050), uint32]) */;
  %139 = %122.1;
  %140 = multiply(%129, %130) /* ty=Tensor[(8, 11, 13), float64] */;
  %141 = %135.0;
  %142 = %138.1;
  (%139, meta[relay.Constant][11] /* ty=Tensor[(24), float64] */, meta[relay.Constant][12] /* ty=Tensor[(144), float32] */, %140, %141, %var_3076, %var_3077, %142, meta[relay.Constant][13] /* ty=Tensor[(490), float32] */)
}

def @func_265(%var_261: Tensor[(16, 2, 6), float64]) -> Tensor[(16, 2, 6), float64] {
  %143 = cast(%var_261, dtype="float64") /* ty=Tensor[(16, 2, 6), float64] */;
  asin(%143) /* ty=Tensor[(16, 2, 6), float64] */
}

def @func_2894() -> Tensor[(8, 11, 1), float32] {
  @func_2845() /* ty=Tensor[(8, 11, 1), float32] */
}

def @func_5144(%var_5139: Tensor[(3, 15, 7), float32], %var_5140: Tensor[(3, 15, 7), float32]) -> Tensor[(3, 15, 7), float32] {
  %144 = cast(%var_5140, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
  %145 = shape_of(%var_5139, dtype="int32") /* ty=Tensor[(3), int32] */;
  %146 = cast(%var_5139, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
  %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%146, %147) /* ty=Tensor[(3, 15, 7), float32] */
}

def @func_5746(%var_5697: int16, %var_5717: Tensor[(4, 16, 14), float64]) -> (Tensor[(640), int16], Tensor[(1344), float32], Tensor[(4, 16, 14), int64], Tensor[(8, 11, 1), float32], Tensor[(4, 16, 14), int16]) {
  %148 = cast(meta[relay.Constant][16] /* ty=Tensor[(4, 16, 14), float64] */, dtype="float64") /* ty=Tensor[(4, 16, 14), float64] */;
  %149 = atanh(%148) /* ty=Tensor[(4, 16, 14), float64] */;
  %150 = cast(%149, dtype="float64") /* ty=Tensor[(4, 16, 14), float64] */;
  %151 = cast(%var_5697, dtype="float64") /* ty=float64 */;
  %152 = floor_divide(%150, %151) /* ty=Tensor[(4, 16, 14), float64] */;
  %153 = cast(%var_5717, dtype="int64") /* ty=Tensor[(4, 16, 14), int64] */;
  %154 = shape_of(%152, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(%152, dtype="int64") /* ty=Tensor[(4, 16, 14), int64] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %157 = cast(%var_5697, dtype="int16") /* ty=int16 */;
  %158 = cast(meta[relay.Constant][14] /* ty=Tensor[(640), int16] */, dtype="int16") /* ty=Tensor[(640), int16] */;
  %159 = cast(meta[relay.Constant][15] /* ty=Tensor[(1344), float32] */, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %160 = reshape(%157, newshape=[]) /* ty=int16 */;
  %161 = reshape(%158, newshape=[640]) /* ty=Tensor[(640), int16] */;
  %162 = reshape(%159, newshape=[1344]) /* ty=Tensor[(1344), float32] */;
  %163 = @func_2983(%160, %161, %162) /* ty=(Tensor[(8, 11, 1), float32], Tensor[(16, 8, 5), float32], Tensor[(1344), float32], Tensor[(7, 12, 16), float32], Tensor[(640), float32], Tensor[(8, 11, 1), float32]) */;
  %164 = %163.0;
  %165 = cast(%164, dtype="float32") /* ty=Tensor[(8, 11, 1), float32] */;
  %166 = cast(meta[relay.Constant][16] /* ty=Tensor[(4, 16, 14), float64] */, dtype="int16") /* ty=Tensor[(4, 16, 14), int16] */;
  %167 = shape_of(%152, dtype="int32") /* ty=Tensor[(3), int32] */;
  %168 = cast(%152, dtype="int16") /* ty=Tensor[(4, 16, 14), int16] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %170 = bitwise_xor(%155, %156) /* ty=Tensor[(4, 16, 14), int64] */;
  %171 = acos(%165) /* ty=Tensor[(8, 11, 1), float32] */;
  %172 = bitwise_or(%168, %169) /* ty=Tensor[(4, 16, 14), int16] */;
  (meta[relay.Constant][14] /* ty=Tensor[(640), int16] */, meta[relay.Constant][15] /* ty=Tensor[(1344), float32] */, %170, %171, %172)
}

def @func_5649() -> Tensor[(8, 11, 1), float32] {
  %173 = @func_5069() /* ty=(Tensor[(8, 11, 1), float32],) */;
  %173.0
}

def @func_5306(%var_5269: float64, %var_5270: Tensor[(5, 9, 2), float64], %var_5275: Tensor[(256), uint64]) -> (Tensor[(5, 9, 2), float64], Tensor[(16, 16, 5), float32], Tensor[(256), uint64], Tensor[(10, 6, 6), bool], Tensor[(24, 8), float64], Tensor[(16, 2, 6), float64]) {
  %174 = cast(%var_5269, dtype="float64") /* ty=float64 */;
  %175 = cast(%var_5270, dtype="float64") /* ty=Tensor[(5, 9, 2), float64] */;
  %176 = cast(%var_5275, dtype="uint64") /* ty=Tensor[(256), uint64] */;
  %177 = reshape(%176, newshape=[16, 16, 1]) /* ty=Tensor[(16, 16, 1), uint64] */;
  %178 = @func_364(%177) /* ty=(Tensor[(16, 16, 5), uint64], Tensor[(16, 16, 5), float32]) */;
  %179 = cast(meta[relay.Constant][17] /* ty=Tensor[(24, 8), float64] */, dtype="float64") /* ty=Tensor[(24, 8), float64] */;
  %180 = reshape(%179, newshape=[192]) /* ty=Tensor[(192), float64] */;
  %181 = @func_1019(%180) /* ty=(Tensor[(10, 6, 6), bool], Tensor[(16, 2, 6), float64], Tensor[(192), float64]) */;
  %182 = cast(meta[relay.Constant][17] /* ty=Tensor[(24, 8), float64] */, dtype="float64") /* ty=Tensor[(24, 8), float64] */;
  %183 = reshape(%182, newshape=[192]) /* ty=Tensor[(192), float64] */;
  %184 = @func_1019(%183) /* ty=(Tensor[(10, 6, 6), bool], Tensor[(16, 2, 6), float64], Tensor[(192), float64]) */;
  %185 = power(%174, %175) /* ty=Tensor[(5, 9, 2), float64] */;
  %186 = %178.1;
  %187 = %181.0;
  %188 = %184.1;
  (%185, %186, %var_5275, %187, meta[relay.Constant][17] /* ty=Tensor[(24, 8), float64] */, %188)
}

def @func_5090(%var_5088: Tensor[(192), float64]) -> (Tensor[(8, 11, 1), float32], Tensor[(16, 2, 6), float64], Tensor[(7, 84), int32], Tensor[(192), float64]) {
  %189 = cast(meta[relay.Constant][18] /* ty=Tensor[(7, 84), int32] */, dtype="int32") /* ty=Tensor[(7, 84), int32] */;
  %190 = cast(%var_5088, dtype="float64") /* ty=Tensor[(192), float64] */;
  %191 = reshape(%189, newshape=[14, 7, 6]) /* ty=Tensor[(14, 7, 6), int32] */;
  %192 = reshape(%190, newshape=[192]) /* ty=Tensor[(192), float64] */;
  %193 = @func_958(%191, %192) /* ty=(Tensor[(14, 7, 6), int32], Tensor[(16, 2, 6), float64], Tensor[(192), float64]) */;
  %194 = @func_3166() /* ty=Tensor[(8, 11, 1), float32] */;
  %195 = %193.1;
  (%194, %195, meta[relay.Constant][18] /* ty=Tensor[(7, 84), int32] */, %var_5088)
}

def @func_3400() -> (Tensor[(8, 11, 1), float32],) {
  %196 = @func_3189() /* ty=(Tensor[(8, 11, 1), float32],) */;
  %197 = %196.0;
  %198 = cast(%197, dtype="float32") /* ty=Tensor[(8, 11, 1), float32] */;
  %199 = sqrt(%198) /* ty=Tensor[(8, 11, 1), float32] */;
  (%199,)
}

def @func_3547(%var_3512: int64, %var_3513: Tensor[(8, 7, 12), int64], %var_3539: Tensor[(1344), float32], %var_3544: Tensor[(1320), float32]) -> (Tensor[(8, 7, 12), int64], Tensor[(8, 11, 1), float32], Tensor[(640), int16], Tensor[(1344), float32], Tensor[(8, 11, 1), float32], Tensor[(1320), float32]) {
  %200 = cast(%var_3512, dtype="int64") /* ty=int64 */;
  %201 = cast(%var_3513, dtype="int64") /* ty=Tensor[(8, 7, 12), int64] */;
  %202 = cast(%var_3512, dtype="int16") /* ty=int16 */;
  %203 = cast(meta[relay.Constant][19] /* ty=Tensor[(640), int16] */, dtype="int16") /* ty=Tensor[(640), int16] */;
  %204 = cast(%var_3539, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %205 = reshape(%202, newshape=[]) /* ty=int16 */;
  %206 = reshape(%203, newshape=[640]) /* ty=Tensor[(640), int16] */;
  %207 = reshape(%204, newshape=[1344]) /* ty=Tensor[(1344), float32] */;
  %208 = @func_2983(%205, %206, %207) /* ty=(Tensor[(8, 11, 1), float32], Tensor[(16, 8, 5), float32], Tensor[(1344), float32], Tensor[(7, 12, 16), float32], Tensor[(640), float32], Tensor[(8, 11, 1), float32]) */;
  %209 = cast(%var_3544, dtype="float32") /* ty=Tensor[(1320), float32] */;
  %210 = reshape(%209, newshape=[8, 11, 15]) /* ty=Tensor[(8, 11, 15), float32] */;
  %211 = @func_3233(%210) /* ty=(Tensor[(8, 11, 15), bool], Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32]) */;
  %212 = left_shift(%200, %201) /* ty=Tensor[(8, 7, 12), int64] */;
  %213 = %208.0;
  %214 = %211.2;
  (%212, %213, meta[relay.Constant][19] /* ty=Tensor[(640), int16] */, %var_3539, %214, %var_3544)
}

def @func_2786(%var_2769: Tensor[(5, 13, 10), int64], %var_2770: Tensor[(5, 13, 10), int64]) -> (Tensor[(5, 13, 10), bool], Tensor[(1050, ?), uint32], Tensor[(1170), float32], Tensor[(448), bool]) {
  %215 = cast(%var_2770, dtype="bool") /* ty=Tensor[(5, 13, 10), bool] */;
  %216 = shape_of(%var_2769, dtype="int32") /* ty=Tensor[(3), int32] */;
  %217 = cast(%var_2769, dtype="bool") /* ty=Tensor[(5, 13, 10), bool] */;
  %218 = dyn.reshape(%215, %216, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %219 = cast(meta[relay.Constant][20] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %220 = cast(meta[relay.Constant][21] /* ty=Tensor[(448), bool] */, dtype="bool") /* ty=Tensor[(448), bool] */;
  %221 = reshape(%219, newshape=[13, 9, 10]) /* ty=Tensor[(13, 9, 10), float32] */;
  %222 = reshape(%220, newshape=[448]) /* ty=Tensor[(448), bool] */;
  %223 = @func_1161(%221, %222) /* ty=(Tensor[(7, 8, 8), float64], Tensor[(448), bool], Tensor[(13, 9, 10), float32], Tensor[(1050, ?), uint32]) */;
  %224 = greater(%217, %218) /* ty=Tensor[(5, 13, 10), bool] */;
  %225 = %223.3;
  (%224, %225, meta[relay.Constant][20] /* ty=Tensor[(1170), float32] */, meta[relay.Constant][21] /* ty=Tensor[(448), bool] */)
}

def @func_4921(%var_4827: Tensor[(8, 11, 15), float32], %var_4885: Tensor[(1344), float32]) -> (Tensor[(8, 11, 15), uint16], Tensor[(8, 11, 8), bool], Tensor[(704), float32], int64, Tensor[(1344), float32]) {
  %226 = @func_4163() /* ty=(Tensor[(8, 11, 1), float32], Tensor[(7, 8, 8), float64], Tensor[(1170), float32], Tensor[(4, 112), bool], Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32], Tensor[(1320), float32]) */;
  %227 = %226.4;
  %228 = cast(%227, dtype="uint64") /* ty=Tensor[(8, 11, 1), uint64] */;
  %229 = cast(%var_4827, dtype="uint64") /* ty=Tensor[(8, 11, 15), uint64] */;
  %230 = bitwise_or(%228, %229) /* ty=Tensor[(8, 11, 15), uint64] */;
  %231 = cast(%230, dtype="float32") /* ty=Tensor[(8, 11, 15), float32] */;
  %232 = log2(%231) /* ty=Tensor[(8, 11, 15), float32] */;
  %233 = cast(%230, dtype="uint16") /* ty=Tensor[(8, 11, 15), uint16] */;
  %234 = shape_of(%232, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(%232, dtype="uint16") /* ty=Tensor[(8, 11, 15), uint16] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %237 = cast(meta[relay.Constant][22] /* ty=Tensor[(704), float32] */, dtype="float32") /* ty=Tensor[(704), float32] */;
  %238 = reshape(%237, newshape=[8, 11, 8]) /* ty=Tensor[(8, 11, 8), float32] */;
  %239 = @func_4708(%238) /* ty=(Tensor[(8, 11, 8), bool],) */;
  %240 = cast(%var_4885, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %241 = maximum(%235, %236) /* ty=Tensor[(8, 11, 15), uint16] */;
  %242 = cast(%241, dtype="float32") /* ty=Tensor[(8, 11, 15), float32] */;
  %243 = reshape(%240, newshape=[2, 672]) /* ty=Tensor[(2, 672), float32] */;
  %244 = reshape(%242, newshape=[1320]) /* ty=Tensor[(1320), float32] */;
  %245 = @func_4261(%243, %244) /* ty=(Tensor[(7, 13, 11), float64], Tensor[(8, 11, 1), float32], int64, Tensor[(8, 84), int64], Tensor[(2, 672), float32], Tensor[(1320), float32]) */;
  %246 = %239.0;
  %247 = %245.2;
  (%241, %246, meta[relay.Constant][22] /* ty=Tensor[(704), float32] */, %247, %var_4885)
}

def @func_3198() -> (Tensor[(8, 11, 1), float32],) {
  %248 = @func_3189() /* ty=(Tensor[(8, 11, 1), float32],) */;
  %249 = %248.0;
  (%249,)
}

def @func_434(%var_407: Tensor[(10, 10, 7), int32], %var_408: Tensor[(10, 10, 7), int32], %var_429: Tensor[(256), uint64]) -> (Tensor[(10, 10, 7), int32], Tensor[(16, 16, 5), uint64], Tensor[(256), uint64]) {
  %250 = cast(%var_408, dtype="int32") /* ty=Tensor[(10, 10, 7), int32] */;
  %251 = shape_of(%var_407, dtype="int32") /* ty=Tensor[(3), int32] */;
  %252 = cast(%var_407, dtype="int32") /* ty=Tensor[(10, 10, 7), int32] */;
  %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %254 = cast(%var_429, dtype="uint64") /* ty=Tensor[(256), uint64] */;
  %255 = reshape(%254, newshape=[16, 16, 1]) /* ty=Tensor[(16, 16, 1), uint64] */;
  %256 = @func_364(%255) /* ty=(Tensor[(16, 16, 5), uint64], Tensor[(16, 16, 5), float32]) */;
  %257 = bitwise_xor(%252, %253) /* ty=Tensor[(10, 10, 7), int32] */;
  %258 = %256.0;
  (%257, %258, %var_429)
}

def @func_3794(%var_3740: int16) -> (Tensor[(16, 8, 5), float32], int16, Tensor[(640), int16], Tensor[(1050, ?), uint32], Tensor[(650), int64], Tensor[(8, 11, 550), float64], Tensor[(8, 11, 1), float32], Tensor[(16, 8, 5), float32]) {
  %259 = cast(%var_3740, dtype="int16") /* ty=int16 */;
  %260 = cast(meta[relay.Constant][23] /* ty=Tensor[(640), int16] */, dtype="int16") /* ty=Tensor[(640), int16] */;
  %261 = reshape(%259, newshape=[]) /* ty=int16 */;
  %262 = reshape(%260, newshape=[16, 8, 5]) /* ty=Tensor[(16, 8, 5), int16] */;
  %263 = cast(meta[relay.Constant][24] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
  %264 = cast(meta[relay.Constant][24] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
  %265 = reshape(%263, newshape=[5, 13, 10]) /* ty=Tensor[(5, 13, 10), int64] */;
  %266 = reshape(%264, newshape=[5, 13, 10]) /* ty=Tensor[(5, 13, 10), int64] */;
  %267 = @func_2786(%265, %266) /* ty=(Tensor[(5, 13, 10), bool], Tensor[(1050, ?), uint32], Tensor[(1170), float32], Tensor[(448), bool]) */;
  %268 = @func_2845() /* ty=Tensor[(8, 11, 1), float32] */;
  %269 = @func_3166() /* ty=Tensor[(8, 11, 1), float32] */;
  %270 = cast(%269, dtype="int16") /* ty=Tensor[(8, 11, 1), int16] */;
  %271 = shape_of(%268, dtype="int32") /* ty=Tensor[(3), int32] */;
  %272 = cast(%268, dtype="int16") /* ty=Tensor[(8, 11, 1), int16] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %274 = right_shift(%272, %273) /* ty=Tensor[(8, 11, ?), int16] */;
  %275 = cast(meta[relay.Constant][25] /* ty=Tensor[(550), uint32] */, dtype="uint32") /* ty=Tensor[(550), uint32] */;
  %276 = cast(meta[relay.Constant][25] /* ty=Tensor[(550), uint32] */, dtype="uint32") /* ty=Tensor[(550), uint32] */;
  %277 = reshape(%275, newshape=[10, 5, 11]) /* ty=Tensor[(10, 5, 11), uint32] */;
  %278 = reshape(%276, newshape=[10, 5, 11]) /* ty=Tensor[(10, 5, 11), uint32] */;
  %279 = @func_2027(%277, %278) /* ty=(Tensor[(10, 5, 11), uint32],) */;
  %280 = %279.0;
  %281 = cast(%280, dtype="float32") /* ty=Tensor[(10, 5, 11), float32] */;
  %282 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(550), uint32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %283 = cast(meta[relay.Constant][25] /* ty=Tensor[(550), uint32] */, dtype="float32") /* ty=Tensor[(550), float32] */;
  %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?), float32] */;
  %285 = floor_divide(%283, %284) /* ty=Tensor[(550), float32] */;
  %286 = cast(%274, dtype="float64") /* ty=Tensor[(8, 11, ?), float64] */;
  %287 = cast(%285, dtype="float64") /* ty=Tensor[(550), float64] */;
  %288 = cast(%269, dtype="float32") /* ty=Tensor[(8, 11, 1), float32] */;
  %289 = cast(%var_3740, dtype="int16") /* ty=int16 */;
  %290 = cast(meta[relay.Constant][23] /* ty=Tensor[(640), int16] */, dtype="int16") /* ty=Tensor[(640), int16] */;
  %291 = reshape(%289, newshape=[]) /* ty=int16 */;
  %292 = reshape(%290, newshape=[16, 8, 5]) /* ty=Tensor[(16, 8, 5), int16] */;
  %293 = @func_2649(%261, %262) /* ty=Tensor[(16, 8, 5), float32] */;
  %294 = %267.1;
  %295 = subtract(%286, %287) /* ty=Tensor[(8, 11, 550), float64] */;
  %296 = asin(%288) /* ty=Tensor[(8, 11, 1), float32] */;
  %297 = @func_2649(%291, %292) /* ty=Tensor[(16, 8, 5), float32] */;
  (%293, %var_3740, meta[relay.Constant][23] /* ty=Tensor[(640), int16] */, %294, meta[relay.Constant][24] /* ty=Tensor[(650), int64] */, %295, %296, %297)
}

def @func_3166() -> Tensor[(8, 11, 1), float32] {
  %298 = @func_2923() /* ty=(Tensor[(8, 11, 1), float32],) */;
  %298.0
}

def @func_1580(%var_1565: Tensor[(1, 13, 7), uint64], %var_1574: Tensor[(192), float64]) -> (Tensor[(16, 13, 7), bool], Tensor[(10, 6, 6), bool], Tensor[(192), float64]) {
  %299 = cast(%var_1565, dtype="bool") /* ty=Tensor[(1, 13, 7), bool] */;
  %300 = cast(meta[relay.Constant][26] /* ty=Tensor[(16, 13, 7), uint64] */, dtype="bool") /* ty=Tensor[(16, 13, 7), bool] */;
  %301 = cast(%var_1574, dtype="float64") /* ty=Tensor[(192), float64] */;
  %302 = reshape(%301, newshape=[192]) /* ty=Tensor[(192), float64] */;
  %303 = @func_1019(%302) /* ty=(Tensor[(10, 6, 6), bool], Tensor[(16, 2, 6), float64], Tensor[(192), float64]) */;
  %304 = less(%299, %300) /* ty=Tensor[(16, 13, 7), bool] */;
  %305 = %303.0;
  (%304, %305, %var_1574)
}

def @func_5332() -> (Tensor[(650), int64],) {
  %306 = @func_3842() /* ty=(Tensor[(650), int64], Tensor[(1050, ?), uint32], Tensor[(8, 11, 448), bool]) */;
  %307 = %306.0;
  (%307,)
}

def @func_3463(%var_3457: uint64) -> Tensor[(12, 1, 6), uint64] {
  %308 = cast(%var_3457, dtype="uint64") /* ty=uint64 */;
  %309 = cast(meta[relay.Constant][27] /* ty=Tensor[(12, 1, 6), uint64] */, dtype="uint64") /* ty=Tensor[(12, 1, 6), uint64] */;
  subtract(%308, %309) /* ty=Tensor[(12, 1, 6), uint64] */
}

def @func_4567() -> Tensor[(8, 11, 1), float32] {
  @func_4068() /* ty=Tensor[(8, 11, 1), float32] */
}

def @func_151(%var_77: Tensor[(7, 8, 8), bool], %var_78: Tensor[(7, 8, 8), bool]) -> (Tensor[(7, 8, 8), bool], Tensor[(1050, ?), uint32], Tensor[(7, 8, 8), float64]) {
  %310 = cast(%var_78, dtype="bool") /* ty=Tensor[(7, 8, 8), bool] */;
  %311 = shape_of(%var_77, dtype="int32") /* ty=Tensor[(3), int32] */;
  %312 = cast(%var_77, dtype="bool") /* ty=Tensor[(7, 8, 8), bool] */;
  %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %314 = cast(meta[relay.Constant][28] /* ty=Tensor[(1050, 1), uint32] */, dtype="uint32") /* ty=Tensor[(1050, 1), uint32] */;
  %315 = reshape(%314, newshape=[15, 10, 7]) /* ty=Tensor[(15, 10, 7), uint32] */;
  %316 = @func_55(%315) /* ty=Tensor[(15, 10, 7), uint32] */;
  %317 = cast(%316, dtype="float32") /* ty=Tensor[(15, 10, 7), float32] */;
  %318 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(1050, 1), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %319 = cast(meta[relay.Constant][28] /* ty=Tensor[(1050, 1), uint32] */, dtype="float32") /* ty=Tensor[(1050, 1), float32] */;
  %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %321 = power(%319, %320) /* ty=Tensor[(1050, ?), float32] */;
  %322 = cast(meta[relay.Constant][28] /* ty=Tensor[(1050, 1), uint32] */, dtype="uint32") /* ty=Tensor[(1050, 1), uint32] */;
  %323 = shape_of(%321, dtype="int32") /* ty=Tensor[(2), int32] */;
  %324 = cast(%321, dtype="uint32") /* ty=Tensor[(1050, ?), uint32] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %326 = cast(%var_77, dtype="float32") /* ty=Tensor[(7, 8, 8), float32] */;
  %327 = cosh(%326) /* ty=Tensor[(7, 8, 8), float32] */;
  %328 = cast(%327, dtype="float64") /* ty=Tensor[(7, 8, 8), float64] */;
  %329 = logical_and(%312, %313) /* ty=Tensor[(7, 8, 8), bool] */;
  %330 = bitwise_xor(%324, %325) /* ty=Tensor[(1050, ?), uint32] */;
  %331 = sin(%328) /* ty=Tensor[(7, 8, 8), float64] */;
  (%329, %330, %331)
}

def @func_1019(%var_1005: Tensor[(192), float64]) -> (Tensor[(10, 6, 6), bool], Tensor[(16, 2, 6), float64], Tensor[(192), float64]) {
  %332 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 6, 6), float64] */, dtype="float64") /* ty=Tensor[(10, 6, 6), float64] */;
  %333 = cosh(%332) /* ty=Tensor[(10, 6, 6), float64] */;
  %334 = cast(%333, dtype="float64") /* ty=Tensor[(10, 6, 6), float64] */;
  %335 = acosh(%334) /* ty=Tensor[(10, 6, 6), float64] */;
  %336 = cast(%335, dtype="bool") /* ty=Tensor[(10, 6, 6), bool] */;
  %337 = shape_of(%333, dtype="int32") /* ty=Tensor[(3), int32] */;
  %338 = cast(%333, dtype="bool") /* ty=Tensor[(10, 6, 6), bool] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %340 = cast(%var_1005, dtype="float64") /* ty=Tensor[(192), float64] */;
  %341 = reshape(%340, newshape=[16, 2, 6]) /* ty=Tensor[(16, 2, 6), float64] */;
  %342 = greater(%338, %339) /* ty=Tensor[(10, 6, 6), bool] */;
  %343 = @func_265(%341) /* ty=Tensor[(16, 2, 6), float64] */;
  (%342, %343, %var_1005)
}

def @func_55(%var_40: Tensor[(15, 10, 7), uint32]) -> Tensor[(15, 10, 7), uint32] {
  %344 = cast(meta[relay.Constant][30] /* ty=Tensor[(15, 10, 7), uint32] */, dtype="uint32") /* ty=Tensor[(15, 10, 7), uint32] */;
  %345 = shape_of(%var_40, dtype="int32") /* ty=Tensor[(3), int32] */;
  %346 = cast(%var_40, dtype="uint32") /* ty=Tensor[(15, 10, 7), uint32] */;
  %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  multiply(%346, %347) /* ty=Tensor[(15, 10, 7), uint32] */
}

def @func_4098(%var_4090: Tensor[(91), uint64], %var_4091: Tensor[(192), float64]) -> (Tensor[(8, 11, 1), float32], Tensor[(7, 12, 16), float32], Tensor[(1344), float32], Tensor[(192), float64], Tensor[(91), uint64], Tensor[(192), float64]) {
  %348 = cast(meta[relay.Constant][31] /* ty=Tensor[(1344), float32] */, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %349 = reshape(%348, newshape=[7, 12, 16]) /* ty=Tensor[(7, 12, 16), float32] */;
  %350 = @func_728(%349) /* ty=(Tensor[(7, 12, 16), float32],) */;
  %351 = cast(%var_4090, dtype="uint64") /* ty=Tensor[(91), uint64] */;
  %352 = cast(%var_4091, dtype="float64") /* ty=Tensor[(192), float64] */;
  %353 = reshape(%351, newshape=[1, 13, 7]) /* ty=Tensor[(1, 13, 7), uint64] */;
  %354 = reshape(%352, newshape=[192]) /* ty=Tensor[(192), float64] */;
  %355 = @func_1580(%353, %354) /* ty=(Tensor[(16, 13, 7), bool], Tensor[(10, 6, 6), bool], Tensor[(192), float64]) */;
  %356 = @func_4068() /* ty=Tensor[(8, 11, 1), float32] */;
  %357 = %350.0;
  %358 = %355.2;
  (%356, %357, meta[relay.Constant][31] /* ty=Tensor[(1344), float32] */, %358, %var_4090, %var_4091)
}

def @func_3189() -> (Tensor[(8, 11, 1), float32],) {
  %359 = @func_2894() /* ty=Tensor[(8, 11, 1), float32] */;
  (%359,)
}

def @func_5512(%var_5423: Tensor[(8, 11, 5), float32], %var_5491: Tensor[(91), uint64], %var_5492: Tensor[(192), float64]) -> (Tensor[(8, 11, 5), float64], Tensor[(10, 6, 6), bool], Tensor[(91), uint64], Tensor[(192), float64], Tensor[(8, 11, 5), float32]) {
  %360 = @func_4567() /* ty=Tensor[(8, 11, 1), float32] */;
  %361 = cast(%360, dtype="uint64") /* ty=Tensor[(8, 11, 1), uint64] */;
  %362 = cast(%var_5423, dtype="uint64") /* ty=Tensor[(8, 11, 5), uint64] */;
  %363 = logical_xor(%361, %362) /* ty=Tensor[(8, 11, 5), uint64] */;
  %364 = cast(%363, dtype="float64") /* ty=Tensor[(8, 11, 5), float64] */;
  %365 = cast(%var_5491, dtype="uint64") /* ty=Tensor[(91), uint64] */;
  %366 = cast(%var_5492, dtype="float64") /* ty=Tensor[(192), float64] */;
  %367 = reshape(%365, newshape=[1, 13, 7]) /* ty=Tensor[(1, 13, 7), uint64] */;
  %368 = reshape(%366, newshape=[192]) /* ty=Tensor[(192), float64] */;
  %369 = @func_1580(%367, %368) /* ty=(Tensor[(16, 13, 7), bool], Tensor[(10, 6, 6), bool], Tensor[(192), float64]) */;
  %370 = cast(%363, dtype="float32") /* ty=Tensor[(8, 11, 5), float32] */;
  %371 = asinh(%370) /* ty=Tensor[(8, 11, 5), float32] */;
  %372 = cast(%363, dtype="bool") /* ty=Tensor[(8, 11, 5), bool] */;
  %373 = shape_of(%371, dtype="int32") /* ty=Tensor[(3), int32] */;
  %374 = cast(%371, dtype="bool") /* ty=Tensor[(8, 11, 5), bool] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %376 = less_equal(%374, %375) /* ty=Tensor[(8, 11, 5), bool] */;
  %377 = cast(%var_5423, dtype="float32") /* ty=Tensor[(8, 11, 5), float32] */;
  %378 = shape_of(%376, dtype="int32") /* ty=Tensor[(3), int32] */;
  %379 = cast(%376, dtype="float32") /* ty=Tensor[(8, 11, 5), float32] */;
  %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %381 = acos(%364) /* ty=Tensor[(8, 11, 5), float64] */;
  %382 = %369.1;
  %383 = divide(%379, %380) /* ty=Tensor[(8, 11, 5), float32] */;
  (%381, %382, %var_5491, %var_5492, %383)
}

def @func_4475(%var_4415: Tensor[(8, 6, 11), uint32], %var_4416: Tensor[(8, 6, 11), uint32], %var_4435: Tensor[(594), float64], %var_4436: Tensor[(715), int16], %var_4469: Tensor[(880), float32]) -> (Tensor[(490), float32], Tensor[(594), float64], Tensor[(715), int16], Tensor[(8, 6, 11), uint64], Tensor[(8, 11, 1), float32], Tensor[(8, 11, 13), float64], Tensor[(880), float32], Tensor[(1144), float32]) {
  %384 = cast(%var_4435, dtype="float64") /* ty=Tensor[(594), float64] */;
  %385 = cast(%var_4436, dtype="int16") /* ty=Tensor[(715), int16] */;
  %386 = cast(%var_4436, dtype="int16") /* ty=Tensor[(715), int16] */;
  %387 = reshape(%384, newshape=[6, 11, 9]) /* ty=Tensor[(6, 11, 9), float64] */;
  %388 = reshape(%385, newshape=[715]) /* ty=Tensor[(715), int16] */;
  %389 = reshape(%386, newshape=[715]) /* ty=Tensor[(715), int16] */;
  %390 = @func_1807(%387, %388, %389) /* ty=(Tensor[(7, 70), float32], Tensor[(490), float32], Tensor[(715), bool], Tensor[(6, 11, 9), float64], Tensor[(6, 11, 9), bool]) */;
  %391 = cast(%var_4416, dtype="uint32") /* ty=Tensor[(8, 6, 11), uint32] */;
  %392 = shape_of(%var_4415, dtype="int32") /* ty=Tensor[(3), int32] */;
  %393 = cast(%var_4415, dtype="uint32") /* ty=Tensor[(8, 6, 11), uint32] */;
  %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %395 = logical_xor(%393, %394) /* ty=Tensor[(8, 6, 11), uint32] */;
  %396 = cast(%var_4416, dtype="bool") /* ty=Tensor[(8, 6, 11), bool] */;
  %397 = shape_of(%395, dtype="int32") /* ty=Tensor[(3), int32] */;
  %398 = cast(%395, dtype="bool") /* ty=Tensor[(8, 6, 11), bool] */;
  %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %400 = logical_or(%398, %399) /* ty=Tensor[(8, 6, 11), bool] */;
  %401 = cast(%400, dtype="uint64") /* ty=Tensor[(8, 6, 11), uint64] */;
  %402 = shape_of(%395, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(%395, dtype="uint64") /* ty=Tensor[(8, 6, 11), uint64] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %405 = @func_2923() /* ty=(Tensor[(8, 11, 1), float32],) */;
  %406 = cast(%var_4469, dtype="float32") /* ty=Tensor[(880), float32] */;
  %407 = cast(meta[relay.Constant][32] /* ty=Tensor[(1144), float32] */, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %408 = reshape(%406, newshape=[8, 11, 10]) /* ty=Tensor[(8, 11, 10), float32] */;
  %409 = reshape(%407, newshape=[8, 11, 13]) /* ty=Tensor[(8, 11, 13), float32] */;
  %410 = @func_4337(%408, %409) /* ty=(Tensor[(8, 11, 10), uint64], Tensor[(8, 11, 1), float32], Tensor[(8, 11, 13), float64]) */;
  %411 = %390.1;
  %412 = bitwise_xor(%403, %404) /* ty=Tensor[(8, 6, 11), uint64] */;
  %413 = %405.0;
  %414 = %410.2;
  (%411, %var_4435, %var_4436, %412, %413, %414, %var_4469, meta[relay.Constant][32] /* ty=Tensor[(1144), float32] */)
}

def @func_4708(%var_4694: Tensor[(8, 11, 8), float32]) -> (Tensor[(8, 11, 8), bool],) {
  %415 = @func_2923() /* ty=(Tensor[(8, 11, 1), float32],) */;
  %416 = %415.0;
  %417 = cast(%416, dtype="bool") /* ty=Tensor[(8, 11, 1), bool] */;
  %418 = cast(%var_4694, dtype="bool") /* ty=Tensor[(8, 11, 8), bool] */;
  %419 = logical_and(%417, %418) /* ty=Tensor[(8, 11, 8), bool] */;
  (%419,)
}

def @func_3233(%var_3214: Tensor[(8, 11, 15), float32]) -> (Tensor[(8, 11, 15), bool], Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32]) {
  %420 = @func_2845() /* ty=Tensor[(8, 11, 1), float32] */;
  %421 = cast(%420, dtype="bool") /* ty=Tensor[(8, 11, 1), bool] */;
  %422 = cast(%var_3214, dtype="bool") /* ty=Tensor[(8, 11, 15), bool] */;
  %423 = cast(%420, dtype="float32") /* ty=Tensor[(8, 11, 1), float32] */;
  %424 = not_equal(%421, %422) /* ty=Tensor[(8, 11, 15), bool] */;
  %425 = @func_2894() /* ty=Tensor[(8, 11, 1), float32] */;
  %426 = cosh(%423) /* ty=Tensor[(8, 11, 1), float32] */;
  (%424, %425, %426)
}

def @func_1912(%var_1877: Tensor[(16, 14, 11), bool], %var_1885: Tensor[(715), int16], %var_1886: Tensor[(7, 70), float32]) -> (Tensor[(16, 14, 11), bool], Tensor[(715), int16], Tensor[(7, 70), float32], Tensor[(11, 13, 5), float32], Tensor[(1050), uint32]) {
  %427 = cast(meta[relay.Constant][33] /* ty=Tensor[(16, 14, 11), bool] */, dtype="bool") /* ty=Tensor[(16, 14, 11), bool] */;
  %428 = shape_of(%var_1877, dtype="int32") /* ty=Tensor[(3), int32] */;
  %429 = cast(%var_1877, dtype="bool") /* ty=Tensor[(16, 14, 11), bool] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %431 = cast(%var_1885, dtype="int16") /* ty=Tensor[(715), int16] */;
  %432 = cast(%var_1886, dtype="float32") /* ty=Tensor[(7, 70), float32] */;
  %433 = reshape(%431, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), int16] */;
  %434 = reshape(%432, newshape=[7, 70]) /* ty=Tensor[(7, 70), float32] */;
  %435 = @func_1271(%433, %434) /* ty=(Tensor[(11, 13, 5), bool], Tensor[(1050), uint32], Tensor[(7, 70), float32]) */;
  %436 = %435.0;
  %437 = cast(%436, dtype="float32") /* ty=Tensor[(11, 13, 5), float32] */;
  %438 = cast(%var_1886, dtype="float32") /* ty=Tensor[(7, 70), float32] */;
  %439 = reshape(%438, newshape=[7, 14, 5]) /* ty=Tensor[(7, 14, 5), float32] */;
  %440 = @func_901(%439) /* ty=(Tensor[(7, 14, 5), float64], Tensor[(15, 10, 7), uint32], Tensor[(1050), uint32]) */;
  %441 = logical_or(%429, %430) /* ty=Tensor[(16, 14, 11), bool] */;
  %442 = tan(%437) /* ty=Tensor[(11, 13, 5), float32] */;
  %443 = %440.2;
  (%441, %var_1885, %var_1886, %442, %443)
}

def @func_2027(%var_2017: Tensor[(10, 5, 11), uint32], %var_2018: Tensor[(10, 5, 11), uint32]) -> (Tensor[(10, 5, 11), uint32],) {
  %444 = cast(%var_2018, dtype="uint32") /* ty=Tensor[(10, 5, 11), uint32] */;
  %445 = shape_of(%var_2017, dtype="int32") /* ty=Tensor[(3), int32] */;
  %446 = cast(%var_2017, dtype="uint32") /* ty=Tensor[(10, 5, 11), uint32] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %448 = maximum(%446, %447) /* ty=Tensor[(10, 5, 11), uint32] */;
  (%448,)
}

def @func_5948(%var_5943: Tensor[(24), float64]) -> (Tensor[(8, 11, 1), float32], Tensor[(2, 12, 1), float32], Tensor[(24), float64], Tensor[(144), float32]) {
  %449 = cast(%var_5943, dtype="float64") /* ty=Tensor[(24), float64] */;
  %450 = cast(meta[relay.Constant][34] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %451 = reshape(%449, newshape=[2, 12, 1]) /* ty=Tensor[(2, 12, 1), float64] */;
  %452 = reshape(%450, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), float32] */;
  %453 = @func_1982(%451, %452) /* ty=(Tensor[(2, 12, 16), float64], Tensor[(2, 12, 6), bool], Tensor[(2, 12, 1), float32]) */;
  %454 = @func_4567() /* ty=Tensor[(8, 11, 1), float32] */;
  %455 = %453.2;
  (%454, %455, %var_5943, meta[relay.Constant][34] /* ty=Tensor[(144), float32] */)
}

def @func_2923() -> (Tensor[(8, 11, 1), float32],) {
  %456 = @func_2873() /* ty=Tensor[(8, 11, 1), float32] */;
  (%456,)
}

def @func_5851() -> (Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32]) {
  %457 = @func_2894() /* ty=Tensor[(8, 11, 1), float32] */;
  %458 = cast(%457, dtype="float32") /* ty=Tensor[(8, 11, 1), float32] */;
  %459 = @func_4723() /* ty=Tensor[(8, 11, 1), float32] */;
  %460 = sin(%458) /* ty=Tensor[(8, 11, 1), float32] */;
  %461 = @func_5649() /* ty=Tensor[(8, 11, 1), float32] */;
  (%459, %460, %461)
}

def @func_5388(%var_5379: Tensor[(192), float64]) -> (Tensor[(8, 11, 1), float32], Tensor[(16, 2, 6), int32]) {
  %462 = cast(%var_5379, dtype="float64") /* ty=Tensor[(192), float64] */;
  %463 = reshape(%462, newshape=[16, 2, 6]) /* ty=Tensor[(16, 2, 6), float64] */;
  %464 = @func_265(%463) /* ty=Tensor[(16, 2, 6), float64] */;
  %465 = cast(%var_5379, dtype="int32") /* ty=Tensor[(192), int32] */;
  %466 = shape_of(%464, dtype="int32") /* ty=Tensor[(3), int32] */;
  %467 = cast(%464, dtype="int32") /* ty=Tensor[(16, 2, 6), int32] */;
  %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %469 = @func_4723() /* ty=Tensor[(8, 11, 1), float32] */;
  %470 = left_shift(%467, %468) /* ty=Tensor[(16, 2, 6), int32] */;
  (%469, %470)
}

def @func_5013(%var_4982: Tensor[(4, 9, 3), int8], %var_4983: Tensor[(4, 9, 3), int8]) -> (Tensor[(4, 9, 3), bool], Tensor[(11, 13, 5), bool], Tensor[(715, 1), int16], Tensor[(490), float32], Tensor[(4, 9, 3), bool]) {
  %471 = cast(%var_4983, dtype="bool") /* ty=Tensor[(4, 9, 3), bool] */;
  %472 = shape_of(%var_4982, dtype="int32") /* ty=Tensor[(3), int32] */;
  %473 = cast(%var_4982, dtype="bool") /* ty=Tensor[(4, 9, 3), bool] */;
  %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %475 = cast(meta[relay.Constant][35] /* ty=Tensor[(715, 1), int16] */, dtype="int16") /* ty=Tensor[(715, 1), int16] */;
  %476 = cast(meta[relay.Constant][36] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %477 = reshape(%475, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), int16] */;
  %478 = reshape(%476, newshape=[7, 70]) /* ty=Tensor[(7, 70), float32] */;
  %479 = @func_1271(%477, %478) /* ty=(Tensor[(11, 13, 5), bool], Tensor[(1050), uint32], Tensor[(7, 70), float32]) */;
  %480 = cast(%var_4982, dtype="int64") /* ty=Tensor[(4, 9, 3), int64] */;
  %481 = shape_of(%var_4983, dtype="int32") /* ty=Tensor[(3), int32] */;
  %482 = cast(%var_4983, dtype="int64") /* ty=Tensor[(4, 9, 3), int64] */;
  %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %484 = bitwise_or(%482, %483) /* ty=Tensor[(4, 9, 3), int64] */;
  %485 = cast(%var_4983, dtype="bool") /* ty=Tensor[(4, 9, 3), bool] */;
  %486 = shape_of(%484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(%484, dtype="bool") /* ty=Tensor[(4, 9, 3), bool] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %489 = greater_equal(%473, %474) /* ty=Tensor[(4, 9, 3), bool] */;
  %490 = %479.0;
  %491 = logical_and(%487, %488) /* ty=Tensor[(4, 9, 3), bool] */;
  (%489, %490, meta[relay.Constant][35] /* ty=Tensor[(715, 1), int16] */, meta[relay.Constant][36] /* ty=Tensor[(490), float32] */, %491)
}

def @func_4934() -> Tensor[(8, 11, 1), float32] {
  @func_4068() /* ty=Tensor[(8, 11, 1), float32] */
}

def @func_3594(%var_3591: Tensor[(715), int16]) -> (Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32], Tensor[(16, 13, 7), bool], Tensor[(91), uint64], Tensor[(192), float64], Tensor[(1050), uint32], Tensor[(715), int16], Tensor[(490), float32]) {
  %492 = cast(meta[relay.Constant][37] /* ty=Tensor[(91), uint64] */, dtype="uint64") /* ty=Tensor[(91), uint64] */;
  %493 = cast(meta[relay.Constant][38] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %494 = reshape(%492, newshape=[1, 13, 7]) /* ty=Tensor[(1, 13, 7), uint64] */;
  %495 = reshape(%493, newshape=[192]) /* ty=Tensor[(192), float64] */;
  %496 = @func_1580(%494, %495) /* ty=(Tensor[(16, 13, 7), bool], Tensor[(10, 6, 6), bool], Tensor[(192), float64]) */;
  %497 = cast(%var_3591, dtype="int16") /* ty=Tensor[(715), int16] */;
  %498 = cast(meta[relay.Constant][39] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %499 = reshape(%497, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), int16] */;
  %500 = reshape(%498, newshape=[7, 70]) /* ty=Tensor[(7, 70), float32] */;
  %501 = @func_1271(%499, %500) /* ty=(Tensor[(11, 13, 5), bool], Tensor[(1050), uint32], Tensor[(7, 70), float32]) */;
  %502 = @func_3166() /* ty=Tensor[(8, 11, 1), float32] */;
  %503 = @func_2873() /* ty=Tensor[(8, 11, 1), float32] */;
  %504 = %496.0;
  %505 = %501.1;
  (%502, %503, %504, meta[relay.Constant][37] /* ty=Tensor[(91), uint64] */, meta[relay.Constant][38] /* ty=Tensor[(192), float64] */, %505, %var_3591, meta[relay.Constant][39] /* ty=Tensor[(490), float32] */)
}

def @func_1807(%var_1755: Tensor[(6, 11, 9), float64], %var_1768: Tensor[(715), int16], %var_1782: Tensor[(715), int16]) -> (Tensor[(7, 70), float32], Tensor[(490), float32], Tensor[(715), bool], Tensor[(6, 11, 9), float64], Tensor[(6, 11, 9), bool]) {
  %506 = cast(%var_1768, dtype="int16") /* ty=Tensor[(715), int16] */;
  %507 = cast(meta[relay.Constant][40] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %508 = reshape(%506, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), int16] */;
  %509 = reshape(%507, newshape=[7, 70]) /* ty=Tensor[(7, 70), float32] */;
  %510 = @func_1271(%508, %509) /* ty=(Tensor[(11, 13, 5), bool], Tensor[(1050), uint32], Tensor[(7, 70), float32]) */;
  %511 = cast(%var_1782, dtype="bool") /* ty=Tensor[(715), bool] */;
  %512 = shape_of(%var_1768, dtype="int32") /* ty=Tensor[(1), int32] */;
  %513 = cast(%var_1768, dtype="bool") /* ty=Tensor[(715), bool] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?), bool] */;
  %515 = cast(%var_1755, dtype="float64") /* ty=Tensor[(6, 11, 9), float64] */;
  %516 = cosh(%515) /* ty=Tensor[(6, 11, 9), float64] */;
  %517 = cast(%var_1755, dtype="float64") /* ty=Tensor[(6, 11, 9), float64] */;
  %518 = shape_of(%516, dtype="int32") /* ty=Tensor[(3), int32] */;
  %519 = cast(%516, dtype="float64") /* ty=Tensor[(6, 11, 9), float64] */;
  %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %521 = cast(%var_1755, dtype="bool") /* ty=Tensor[(6, 11, 9), bool] */;
  %522 = shape_of(%516, dtype="int32") /* ty=Tensor[(3), int32] */;
  %523 = cast(%516, dtype="bool") /* ty=Tensor[(6, 11, 9), bool] */;
  %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %525 = %510.2;
  %526 = greater_equal(%513, %514) /* ty=Tensor[(715), bool] */;
  %527 = floor_mod(%519, %520) /* ty=Tensor[(6, 11, 9), float64] */;
  %528 = greater_equal(%523, %524) /* ty=Tensor[(6, 11, 9), bool] */;
  (%525, meta[relay.Constant][40] /* ty=Tensor[(490), float32] */, %526, %527, %528)
}

def @func_4723() -> Tensor[(8, 11, 1), float32] {
  @func_3310() /* ty=Tensor[(8, 11, 1), float32] */
}

def @func_2649(%var_2631: int16, %var_2632: Tensor[(16, 8, 5), int16]) -> Tensor[(16, 8, 5), float32] {
  %529 = cast(%var_2631, dtype="int16") /* ty=int16 */;
  %530 = cast(%var_2632, dtype="int16") /* ty=Tensor[(16, 8, 5), int16] */;
  %531 = maximum(%529, %530) /* ty=Tensor[(16, 8, 5), int16] */;
  %532 = cast(%531, dtype="float32") /* ty=Tensor[(16, 8, 5), float32] */;
  %533 = shape_of(%var_2632, dtype="int32") /* ty=Tensor[(3), int32] */;
  %534 = cast(%var_2632, dtype="float32") /* ty=Tensor[(16, 8, 5), float32] */;
  %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%534, %535) /* ty=Tensor[(16, 8, 5), float32] */
}

def @func_5069() -> (Tensor[(8, 11, 1), float32],) {
  %536 = @func_2923() /* ty=(Tensor[(8, 11, 1), float32],) */;
  %537 = %536.0;
  (%537,)
}

def @func_2729(%var_2722: Tensor[(6, 16, 15), uint16], %var_2723: Tensor[(6, 16, 15), uint16]) -> Tensor[(6, 16, 15), uint16] {
  %538 = cast(%var_2723, dtype="uint16") /* ty=Tensor[(6, 16, 15), uint16] */;
  %539 = shape_of(%var_2722, dtype="int32") /* ty=Tensor[(3), int32] */;
  %540 = cast(%var_2722, dtype="uint16") /* ty=Tensor[(6, 16, 15), uint16] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_xor(%540, %541) /* ty=Tensor[(6, 16, 15), uint16] */
}

def @func_3310() -> Tensor[(8, 11, 1), float32] {
  %542 = @func_2923() /* ty=(Tensor[(8, 11, 1), float32],) */;
  %542.0
}

def @func_5872() -> Tensor[(8, 11, 1), float32] {
  %543 = @func_3198() /* ty=(Tensor[(8, 11, 1), float32],) */;
  %543.0
}

def @func_5553() -> (Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32], int64, Tensor[(672), int64], Tensor[(1344), float32], Tensor[(12, 110), float32], Tensor[(8, 11, ?), int8]) {
  %544 = @func_3400() /* ty=(Tensor[(8, 11, 1), float32],) */;
  %545 = @func_2923() /* ty=(Tensor[(8, 11, 1), float32],) */;
  %546 = cast(-8 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %547 = cast(meta[relay.Constant][41] /* ty=Tensor[(672), int64] */, dtype="int64") /* ty=Tensor[(672), int64] */;
  %548 = cast(meta[relay.Constant][42] /* ty=Tensor[(1344), float32] */, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %549 = cast(meta[relay.Constant][43] /* ty=Tensor[(12, 110), float32] */, dtype="float32") /* ty=Tensor[(12, 110), float32] */;
  %550 = reshape(%546, newshape=[]) /* ty=int64 */;
  %551 = reshape(%547, newshape=[8, 7, 12]) /* ty=Tensor[(8, 7, 12), int64] */;
  %552 = reshape(%548, newshape=[1344]) /* ty=Tensor[(1344), float32] */;
  %553 = reshape(%549, newshape=[1320]) /* ty=Tensor[(1320), float32] */;
  %554 = @func_3547(%550, %551, %552, %553) /* ty=(Tensor[(8, 7, 12), int64], Tensor[(8, 11, 1), float32], Tensor[(640), int16], Tensor[(1344), float32], Tensor[(8, 11, 1), float32], Tensor[(1320), float32]) */;
  %555 = %554.4;
  %556 = cast(meta[relay.Constant][44] /* ty=Tensor[(8, 11, 1), float32] */, dtype="int8") /* ty=Tensor[(8, 11, 1), int8] */;
  %557 = shape_of(%555, dtype="int32") /* ty=Tensor[(3), int32] */;
  %558 = cast(%555, dtype="int8") /* ty=Tensor[(8, 11, 1), int8] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %560 = %544.0;
  %561 = %545.0;
  %562 = minimum(%558, %559) /* ty=Tensor[(8, 11, ?), int8] */;
  (%560, %561, -8 /* ty=int64 */, meta[relay.Constant][41] /* ty=Tensor[(672), int64] */, meta[relay.Constant][42] /* ty=Tensor[(1344), float32] */, meta[relay.Constant][43] /* ty=Tensor[(12, 110), float32] */, %562)
}

def @func_4337(%var_4296: Tensor[(8, 11, 10), float32], %var_4324: Tensor[(8, 11, 13), float32]) -> (Tensor[(8, 11, 10), uint64], Tensor[(8, 11, 1), float32], Tensor[(8, 11, 13), float64]) {
  %563 = @func_2845() /* ty=Tensor[(8, 11, 1), float32] */;
  %564 = cast(%563, dtype="uint64") /* ty=Tensor[(8, 11, 1), uint64] */;
  %565 = cast(%var_4296, dtype="uint64") /* ty=Tensor[(8, 11, 10), uint64] */;
  %566 = cast(%563, dtype="float32") /* ty=Tensor[(8, 11, 1), float32] */;
  %567 = cast(%563, dtype="float32") /* ty=Tensor[(8, 11, 1), float32] */;
  %568 = erf(%567) /* ty=Tensor[(8, 11, 1), float32] */;
  %569 = cast(%568, dtype="int32") /* ty=Tensor[(8, 11, 1), int32] */;
  %570 = cast(%var_4324, dtype="int32") /* ty=Tensor[(8, 11, 13), int32] */;
  %571 = logical_xor(%569, %570) /* ty=Tensor[(8, 11, 13), int32] */;
  %572 = cast(%571, dtype="float64") /* ty=Tensor[(8, 11, 13), float64] */;
  %573 = multiply(%564, %565) /* ty=Tensor[(8, 11, 10), uint64] */;
  %574 = acosh(%566) /* ty=Tensor[(8, 11, 1), float32] */;
  %575 = log2(%572) /* ty=Tensor[(8, 11, 13), float64] */;
  (%573, %574, %575)
}

def @func_3351(%var_3338: Tensor[(4, 14, 10), float64]) -> (Tensor[(4, 14, 10), float64], Tensor[(490), float32], Tensor[(6, 99), float64], Tensor[(715), int16]) {
  %576 = cast(%var_3338, dtype="float64") /* ty=Tensor[(4, 14, 10), float64] */;
  %577 = cast(meta[relay.Constant][45] /* ty=Tensor[(6, 99), float64] */, dtype="float64") /* ty=Tensor[(6, 99), float64] */;
  %578 = cast(meta[relay.Constant][46] /* ty=Tensor[(715), int16] */, dtype="int16") /* ty=Tensor[(715), int16] */;
  %579 = cast(meta[relay.Constant][46] /* ty=Tensor[(715), int16] */, dtype="int16") /* ty=Tensor[(715), int16] */;
  %580 = reshape(%577, newshape=[6, 11, 9]) /* ty=Tensor[(6, 11, 9), float64] */;
  %581 = reshape(%578, newshape=[715]) /* ty=Tensor[(715), int16] */;
  %582 = reshape(%579, newshape=[715]) /* ty=Tensor[(715), int16] */;
  %583 = @func_1807(%580, %581, %582) /* ty=(Tensor[(7, 70), float32], Tensor[(490), float32], Tensor[(715), bool], Tensor[(6, 11, 9), float64], Tensor[(6, 11, 9), bool]) */;
  %584 = cosh(%576) /* ty=Tensor[(4, 14, 10), float64] */;
  %585 = %583.1;
  (%584, %585, meta[relay.Constant][45] /* ty=Tensor[(6, 99), float64] */, meta[relay.Constant][46] /* ty=Tensor[(715), int16] */)
}

def @func_5796() -> (Tensor[(8, 11, 1), float32], Tensor[(8, 11, 16), float64], Tensor[(1408), float32], Tensor[(440), float32]) {
  %586 = @func_4723() /* ty=Tensor[(8, 11, 1), float32] */;
  %587 = cast(%586, dtype="float32") /* ty=Tensor[(8, 11, 1), float32] */;
  %588 = cast(meta[relay.Constant][47] /* ty=Tensor[(1408), float32] */, dtype="float32") /* ty=Tensor[(1408), float32] */;
  %589 = cast(meta[relay.Constant][48] /* ty=Tensor[(440), float32] */, dtype="float32") /* ty=Tensor[(440), float32] */;
  %590 = reshape(%587, newshape=[8, 11, 1]) /* ty=Tensor[(8, 11, 1), float32] */;
  %591 = reshape(%588, newshape=[8, 11, 16]) /* ty=Tensor[(8, 11, 16), float32] */;
  %592 = reshape(%589, newshape=[8, 11, 5]) /* ty=Tensor[(8, 11, 5), float32] */;
  %593 = @func_3664(%590, %591, %592) /* ty=(Tensor[(8, 11, 16), float64], Tensor[(8, 11, 16), bool], Tensor[(8, 11, ?), float64], Tensor[(7, 12, 16), float32], Tensor[(28, 48), float32], Tensor[(8, 11, 5), uint8], Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32]) */;
  %594 = %593.0;
  (%586, %594, meta[relay.Constant][47] /* ty=Tensor[(1408), float32] */, meta[relay.Constant][48] /* ty=Tensor[(440), float32] */)
}

def @func_3842() -> (Tensor[(650), int64], Tensor[(1050, ?), uint32], Tensor[(8, 11, 448), bool]) {
  %595 = cast(meta[relay.Constant][49] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
  %596 = cast(meta[relay.Constant][49] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
  %597 = reshape(%595, newshape=[5, 13, 10]) /* ty=Tensor[(5, 13, 10), int64] */;
  %598 = reshape(%596, newshape=[5, 13, 10]) /* ty=Tensor[(5, 13, 10), int64] */;
  %599 = @func_2786(%597, %598) /* ty=(Tensor[(5, 13, 10), bool], Tensor[(1050, ?), uint32], Tensor[(1170), float32], Tensor[(448), bool]) */;
  %600 = @func_2894() /* ty=Tensor[(8, 11, 1), float32] */;
  %601 = cast(meta[relay.Constant][49] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
  %602 = cast(meta[relay.Constant][49] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
  %603 = reshape(%601, newshape=[5, 13, 10]) /* ty=Tensor[(5, 13, 10), int64] */;
  %604 = reshape(%602, newshape=[5, 13, 10]) /* ty=Tensor[(5, 13, 10), int64] */;
  %605 = @func_2786(%603, %604) /* ty=(Tensor[(5, 13, 10), bool], Tensor[(1050, ?), uint32], Tensor[(1170), float32], Tensor[(448), bool]) */;
  %606 = %605.3;
  %607 = cast(%600, dtype="bool") /* ty=Tensor[(8, 11, 1), bool] */;
  %608 = cast(%606, dtype="bool") /* ty=Tensor[(448), bool] */;
  %609 = %599.1;
  %610 = logical_or(%607, %608) /* ty=Tensor[(8, 11, 448), bool] */;
  (meta[relay.Constant][49] /* ty=Tensor[(650), int64] */, %609, %610)
}

def @func_4261(%var_4245: Tensor[(2, 672), float32], %var_4246: Tensor[(1320), float32]) -> (Tensor[(7, 13, 11), float64], Tensor[(8, 11, 1), float32], int64, Tensor[(8, 84), int64], Tensor[(2, 672), float32], Tensor[(1320), float32]) {
  %611 = cast(meta[relay.Constant][50] /* ty=Tensor[(7, 13, 11), float64] */, dtype="float64") /* ty=Tensor[(7, 13, 11), float64] */;
  %612 = cast(-8 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %613 = cast(meta[relay.Constant][51] /* ty=Tensor[(8, 84), int64] */, dtype="int64") /* ty=Tensor[(8, 84), int64] */;
  %614 = cast(%var_4245, dtype="float32") /* ty=Tensor[(2, 672), float32] */;
  %615 = cast(%var_4246, dtype="float32") /* ty=Tensor[(1320), float32] */;
  %616 = reshape(%612, newshape=[]) /* ty=int64 */;
  %617 = reshape(%613, newshape=[8, 7, 12]) /* ty=Tensor[(8, 7, 12), int64] */;
  %618 = reshape(%614, newshape=[1344]) /* ty=Tensor[(1344), float32] */;
  %619 = reshape(%615, newshape=[1320]) /* ty=Tensor[(1320), float32] */;
  %620 = @func_3547(%616, %617, %618, %619) /* ty=(Tensor[(8, 7, 12), int64], Tensor[(8, 11, 1), float32], Tensor[(640), int16], Tensor[(1344), float32], Tensor[(8, 11, 1), float32], Tensor[(1320), float32]) */;
  %621 = asin(%611) /* ty=Tensor[(7, 13, 11), float64] */;
  %622 = %620.4;
  (%621, %622, -8 /* ty=int64 */, meta[relay.Constant][51] /* ty=Tensor[(8, 84), int64] */, %var_4245, %var_4246)
}

def @func_4068() -> Tensor[(8, 11, 1), float32] {
  %623 = @func_3310() /* ty=Tensor[(8, 11, 1), float32] */;
  %624 = cast(%623, dtype="float32") /* ty=Tensor[(8, 11, 1), float32] */;
  tan(%624) /* ty=Tensor[(8, 11, 1), float32] */
}

def @func_1271(%var_1250: Tensor[(11, 13, 5), int16], %var_1256: Tensor[(7, 70), float32]) -> (Tensor[(11, 13, 5), bool], Tensor[(1050), uint32], Tensor[(7, 70), float32]) {
  %625 = cast(meta[relay.Constant][52] /* ty=Tensor[(11, 13, 5), int16] */, dtype="bool") /* ty=Tensor[(11, 13, 5), bool] */;
  %626 = shape_of(%var_1250, dtype="int32") /* ty=Tensor[(3), int32] */;
  %627 = cast(%var_1250, dtype="bool") /* ty=Tensor[(11, 13, 5), bool] */;
  %628 = dyn.reshape(%625, %626, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %629 = cast(%var_1256, dtype="float32") /* ty=Tensor[(7, 70), float32] */;
  %630 = reshape(%629, newshape=[7, 14, 5]) /* ty=Tensor[(7, 14, 5), float32] */;
  %631 = @func_901(%630) /* ty=(Tensor[(7, 14, 5), float64], Tensor[(15, 10, 7), uint32], Tensor[(1050), uint32]) */;
  %632 = not_equal(%627, %628) /* ty=Tensor[(11, 13, 5), bool] */;
  %633 = %631.2;
  (%632, %633, %var_1256)
}

def @func_1982(%var_1947: Tensor[(2, 12, 1), float64], %var_1970: Tensor[(2, 12, 6), float32]) -> (Tensor[(2, 12, 16), float64], Tensor[(2, 12, 6), bool], Tensor[(2, 12, 1), float32]) {
  %634 = cast(%var_1947, dtype="float64") /* ty=Tensor[(2, 12, 1), float64] */;
  %635 = cast(meta[relay.Constant][53] /* ty=Tensor[(2, 12, 16), float64] */, dtype="float64") /* ty=Tensor[(2, 12, 16), float64] */;
  %636 = cast(%var_1947, dtype="float32") /* ty=Tensor[(2, 12, 1), float32] */;
  %637 = sigmoid(%636) /* ty=Tensor[(2, 12, 1), float32] */;
  %638 = cast(%637, dtype="bool") /* ty=Tensor[(2, 12, 1), bool] */;
  %639 = cast(%var_1970, dtype="bool") /* ty=Tensor[(2, 12, 6), bool] */;
  %640 = cast(%637, dtype="float64") /* ty=Tensor[(2, 12, 1), float64] */;
  %641 = atanh(%640) /* ty=Tensor[(2, 12, 1), float64] */;
  %642 = cast(%641, dtype="float32") /* ty=Tensor[(2, 12, 1), float32] */;
  %643 = floor_divide(%634, %635) /* ty=Tensor[(2, 12, 16), float64] */;
  %644 = greater(%638, %639) /* ty=Tensor[(2, 12, 6), bool] */;
  %645 = acos(%642) /* ty=Tensor[(2, 12, 1), float32] */;
  (%643, %644, %645)
}

def @func_5767(%var_5754: Tensor[(1, 2, 6), float32]) -> (Tensor[(?, 2, 6), bool], Tensor[(8, 11, 1), float32]) {
  %646 = cast(%var_5754, dtype="float32") /* ty=Tensor[(1, 2, 6), float32] */;
  %647 = sigmoid(%646) /* ty=Tensor[(1, 2, 6), float32] */;
  %648 = cast(%var_5754, dtype="bool") /* ty=Tensor[(1, 2, 6), bool] */;
  %649 = shape_of(%647, dtype="int32") /* ty=Tensor[(3), int32] */;
  %650 = cast(%647, dtype="bool") /* ty=Tensor[(1, 2, 6), bool] */;
  %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %652 = less_equal(%650, %651) /* ty=Tensor[(?, 2, 6), bool] */;
  %653 = @func_5649() /* ty=Tensor[(8, 11, 1), float32] */;
  (%652, %653)
}

def @func_2983(%var_2934: int16, %var_2935: Tensor[(640), int16], %var_2945: Tensor[(1344), float32]) -> (Tensor[(8, 11, 1), float32], Tensor[(16, 8, 5), float32], Tensor[(1344), float32], Tensor[(7, 12, 16), float32], Tensor[(640), float32], Tensor[(8, 11, 1), float32]) {
  %654 = cast(%var_2934, dtype="int16") /* ty=int16 */;
  %655 = cast(%var_2935, dtype="int16") /* ty=Tensor[(640), int16] */;
  %656 = reshape(%654, newshape=[]) /* ty=int16 */;
  %657 = reshape(%655, newshape=[16, 8, 5]) /* ty=Tensor[(16, 8, 5), int16] */;
  %658 = cast(%var_2945, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %659 = reshape(%658, newshape=[7, 12, 16]) /* ty=Tensor[(7, 12, 16), float32] */;
  %660 = @func_728(%659) /* ty=(Tensor[(7, 12, 16), float32],) */;
  %661 = %660.0;
  %662 = cast(%661, dtype="float32") /* ty=Tensor[(7, 12, 16), float32] */;
  %663 = cast(%var_2934, dtype="float32") /* ty=float32 */;
  %664 = cast(%var_2935, dtype="float32") /* ty=Tensor[(640), float32] */;
  %665 = @func_2923() /* ty=(Tensor[(8, 11, 1), float32],) */;
  %666 = @func_2845() /* ty=Tensor[(8, 11, 1), float32] */;
  %667 = @func_2649(%656, %657) /* ty=Tensor[(16, 8, 5), float32] */;
  %668 = add(%662, %663) /* ty=Tensor[(7, 12, 16), float32] */;
  %669 = asin(%664) /* ty=Tensor[(640), float32] */;
  %670 = %665.0;
  (%666, %667, %var_2945, %668, %669, %670)
}

def @func_5179(%var_5171: Tensor[(1, 4, 9), float64]) -> Tensor[(1, 4, 9), float64] {
  %671 = cast(%var_5171, dtype="float64") /* ty=Tensor[(1, 4, 9), float64] */;
  tan(%671) /* ty=Tensor[(1, 4, 9), float64] */
}

def @func_2845() -> Tensor[(8, 11, 1), float32] {
  %672 = cast(meta[relay.Constant][54] /* ty=Tensor[(8, 11, 1), float32] */, dtype="float32") /* ty=Tensor[(8, 11, 1), float32] */;
  asinh(%672) /* ty=Tensor[(8, 11, 1), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5767(%var_5754: Tensor[(1, 2, 6), float32]) -> (Tensor[(?, 2, 6), bool], Tensor[(8, 11, 1), float32]) {
  %0 = cast(%var_5754, dtype="float32") /* ty=Tensor[(1, 2, 6), float32] */;
  %1 = sigmoid(%0) /* ty=Tensor[(1, 2, 6), float32] */;
  %2 = cast(%var_5754, dtype="bool") /* ty=Tensor[(1, 2, 6), bool] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="bool") /* ty=Tensor[(1, 2, 6), bool] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %6 = less_equal(%4, %5) /* ty=Tensor[(?, 2, 6), bool] */;
  %7 = @func_5649() /* ty=Tensor[(8, 11, 1), float32] */;
  (%6, %7)
}

def @func_4481(%var_4476: Tensor[(8, 6, 11), uint32], %var_4477: Tensor[(8, 6, 11), uint32], %var_4478: Tensor[(594), float64], %var_4479: Tensor[(715), int16], %var_4480: Tensor[(880), float32]) -> (Tensor[(490), float32], Tensor[(594), float64], Tensor[(715), int16], Tensor[(8, 6, 11), uint64], Tensor[(8, 11, 1), float32], Tensor[(8, 11, 13), float64], Tensor[(880), float32], Tensor[(1144), float32]) {
  %39 = fn (%var_4415: Tensor[(8, 6, 11), uint32], %var_4416: Tensor[(8, 6, 11), uint32], %var_4435: Tensor[(594), float64], %var_4436: Tensor[(715), int16], %var_4469: Tensor[(880), float32]) -> (Tensor[(490), float32], Tensor[(594), float64], Tensor[(715), int16], Tensor[(8, 6, 11), uint64], Tensor[(8, 11, 1), float32], Tensor[(8, 11, 13), float64], Tensor[(880), float32], Tensor[(1144), float32]) {
    %8 = cast(%var_4435, dtype="float64") /* ty=Tensor[(594), float64] */;
    %9 = cast(%var_4436, dtype="int16") /* ty=Tensor[(715), int16] */;
    %10 = cast(%var_4436, dtype="int16") /* ty=Tensor[(715), int16] */;
    %11 = reshape(%8, newshape=[6, 11, 9]) /* ty=Tensor[(6, 11, 9), float64] */;
    %12 = reshape(%9, newshape=[715]) /* ty=Tensor[(715), int16] */;
    %13 = reshape(%10, newshape=[715]) /* ty=Tensor[(715), int16] */;
    %14 = @func_1807(%11, %12, %13) /* ty=(Tensor[(7, 70), float32], Tensor[(490), float32], Tensor[(715), bool], Tensor[(6, 11, 9), float64], Tensor[(6, 11, 9), bool]) */;
    %15 = cast(%var_4416, dtype="uint32") /* ty=Tensor[(8, 6, 11), uint32] */;
    %16 = shape_of(%var_4415, dtype="int32") /* ty=Tensor[(3), int32] */;
    %17 = cast(%var_4415, dtype="uint32") /* ty=Tensor[(8, 6, 11), uint32] */;
    %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %19 = logical_xor(%17, %18) /* ty=Tensor[(8, 6, 11), uint32] */;
    %20 = cast(%var_4416, dtype="bool") /* ty=Tensor[(8, 6, 11), bool] */;
    %21 = shape_of(%19, dtype="int32") /* ty=Tensor[(3), int32] */;
    %22 = cast(%19, dtype="bool") /* ty=Tensor[(8, 6, 11), bool] */;
    %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %24 = logical_or(%22, %23) /* ty=Tensor[(8, 6, 11), bool] */;
    %25 = cast(%24, dtype="uint64") /* ty=Tensor[(8, 6, 11), uint64] */;
    %26 = shape_of(%19, dtype="int32") /* ty=Tensor[(3), int32] */;
    %27 = cast(%19, dtype="uint64") /* ty=Tensor[(8, 6, 11), uint64] */;
    %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %29 = @func_2923() /* ty=(Tensor[(8, 11, 1), float32],) */;
    %30 = cast(%var_4469, dtype="float32") /* ty=Tensor[(880), float32] */;
    %31 = cast(meta[relay.Constant][0] /* ty=Tensor[(1144), float32] */, dtype="float32") /* ty=Tensor[(1144), float32] */;
    %32 = reshape(%30, newshape=[8, 11, 10]) /* ty=Tensor[(8, 11, 10), float32] */;
    %33 = reshape(%31, newshape=[8, 11, 13]) /* ty=Tensor[(8, 11, 13), float32] */;
    %34 = @func_4337(%32, %33) /* ty=(Tensor[(8, 11, 10), uint64], Tensor[(8, 11, 1), float32], Tensor[(8, 11, 13), float64]) */;
    %35 = %14.1;
    %36 = bitwise_xor(%27, %28) /* ty=Tensor[(8, 6, 11), uint64] */;
    %37 = %29.0;
    %38 = %34.2;
    (%35, %var_4435, %var_4436, %36, %37, %38, %var_4469, meta[relay.Constant][0] /* ty=Tensor[(1144), float32] */)
  };
  %39(%var_4476, %var_4477, %var_4478, %var_4479, %var_4480) /* ty=(Tensor[(490), float32], Tensor[(594), float64], Tensor[(715), int16], Tensor[(8, 6, 11), uint64], Tensor[(8, 11, 1), float32], Tensor[(8, 11, 13), float64], Tensor[(880), float32], Tensor[(1144), float32]) */
}

def @func_3168() -> Tensor[(8, 11, 1), float32] {
  @func_3166() /* ty=Tensor[(8, 11, 1), float32] */
}

def @func_2729(%var_2722: Tensor[(6, 16, 15), uint16], %var_2723: Tensor[(6, 16, 15), uint16]) -> Tensor[(6, 16, 15), uint16] {
  %40 = cast(%var_2723, dtype="uint16") /* ty=Tensor[(6, 16, 15), uint16] */;
  %41 = shape_of(%var_2722, dtype="int32") /* ty=Tensor[(3), int32] */;
  %42 = cast(%var_2722, dtype="uint16") /* ty=Tensor[(6, 16, 15), uint16] */;
  %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_xor(%42, %43) /* ty=Tensor[(6, 16, 15), uint16] */
}

def @func_958(%var_946: Tensor[(14, 7, 6), int32], %var_952: Tensor[(192), float64]) -> (Tensor[(14, 7, 6), int32], Tensor[(16, 2, 6), float64], Tensor[(192), float64]) {
  %44 = cast(%var_946, dtype="int32") /* ty=Tensor[(14, 7, 6), int32] */;
  %45 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(14, 7, 6), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(meta[relay.Constant][1] /* ty=Tensor[(14, 7, 6), int32] */, dtype="int32") /* ty=Tensor[(14, 7, 6), int32] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %48 = cast(%var_952, dtype="float64") /* ty=Tensor[(192), float64] */;
  %49 = reshape(%48, newshape=[16, 2, 6]) /* ty=Tensor[(16, 2, 6), float64] */;
  %50 = subtract(%46, %47) /* ty=Tensor[(14, 7, 6), int32] */;
  %51 = @func_265(%49) /* ty=Tensor[(16, 2, 6), float64] */;
  (%50, %51, %var_952)
}

def @func_1274(%var_1272: Tensor[(11, 13, 5), int16], %var_1273: Tensor[(7, 70), float32]) -> (Tensor[(11, 13, 5), bool], Tensor[(1050), uint32], Tensor[(7, 70), float32]) {
  %61 = fn (%var_1250: Tensor[(11, 13, 5), int16], %var_1256: Tensor[(7, 70), float32]) -> (Tensor[(11, 13, 5), bool], Tensor[(1050), uint32], Tensor[(7, 70), float32]) {
    %52 = cast(meta[relay.Constant][2] /* ty=Tensor[(11, 13, 5), int16] */, dtype="bool") /* ty=Tensor[(11, 13, 5), bool] */;
    %53 = shape_of(%var_1250, dtype="int32") /* ty=Tensor[(3), int32] */;
    %54 = cast(%var_1250, dtype="bool") /* ty=Tensor[(11, 13, 5), bool] */;
    %55 = dyn.reshape(%52, %53, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %56 = cast(%var_1256, dtype="float32") /* ty=Tensor[(7, 70), float32] */;
    %57 = reshape(%56, newshape=[7, 14, 5]) /* ty=Tensor[(7, 14, 5), float32] */;
    %58 = @func_901(%57) /* ty=(Tensor[(7, 14, 5), float64], Tensor[(15, 10, 7), uint32], Tensor[(1050), uint32]) */;
    %59 = not_equal(%54, %55) /* ty=Tensor[(11, 13, 5), bool] */;
    %60 = %58.2;
    (%59, %60, %var_1256)
  };
  %61(%var_1272, %var_1273) /* ty=(Tensor[(11, 13, 5), bool], Tensor[(1050), uint32], Tensor[(7, 70), float32]) */
}

def @func_3594(%var_3591: Tensor[(715), int16]) -> (Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32], Tensor[(16, 13, 7), bool], Tensor[(91), uint64], Tensor[(192), float64], Tensor[(1050), uint32], Tensor[(715), int16], Tensor[(490), float32]) {
  %62 = cast(meta[relay.Constant][3] /* ty=Tensor[(91), uint64] */, dtype="uint64") /* ty=Tensor[(91), uint64] */;
  %63 = cast(meta[relay.Constant][4] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %64 = reshape(%62, newshape=[1, 13, 7]) /* ty=Tensor[(1, 13, 7), uint64] */;
  %65 = reshape(%63, newshape=[192]) /* ty=Tensor[(192), float64] */;
  %66 = @func_1580(%64, %65) /* ty=(Tensor[(16, 13, 7), bool], Tensor[(10, 6, 6), bool], Tensor[(192), float64]) */;
  %67 = cast(%var_3591, dtype="int16") /* ty=Tensor[(715), int16] */;
  %68 = cast(meta[relay.Constant][5] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %69 = reshape(%67, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), int16] */;
  %70 = reshape(%68, newshape=[7, 70]) /* ty=Tensor[(7, 70), float32] */;
  %71 = @func_1271(%69, %70) /* ty=(Tensor[(11, 13, 5), bool], Tensor[(1050), uint32], Tensor[(7, 70), float32]) */;
  %72 = @func_3166() /* ty=Tensor[(8, 11, 1), float32] */;
  %73 = @func_2873() /* ty=Tensor[(8, 11, 1), float32] */;
  %74 = %66.0;
  %75 = %71.1;
  (%72, %73, %74, meta[relay.Constant][3] /* ty=Tensor[(91), uint64] */, meta[relay.Constant][4] /* ty=Tensor[(192), float64] */, %75, %var_3591, meta[relay.Constant][5] /* ty=Tensor[(490), float32] */)
}

def @func_268(%var_266: Tensor[(16, 2, 6), float64]) -> Tensor[(16, 2, 6), float64] {
  @func_265(%var_266) /* ty=Tensor[(16, 2, 6), float64] */
}

def @func_2031(%var_2029: Tensor[(10, 5, 11), uint32], %var_2030: Tensor[(10, 5, 11), uint32]) -> (Tensor[(10, 5, 11), uint32],) {
  @func_2027(%var_2029, %var_2030) /* ty=(Tensor[(10, 5, 11), uint32],) */
}

def @func_5872() -> Tensor[(8, 11, 1), float32] {
  %76 = @func_3198() /* ty=(Tensor[(8, 11, 1), float32],) */;
  %76.0
}

def @func_3190() -> (Tensor[(8, 11, 1), float32],) {
  %78 = fn () -> (Tensor[(8, 11, 1), float32],) {
    %77 = @func_2894() /* ty=Tensor[(8, 11, 1), float32] */;
    (%77,)
  };
  %78() /* ty=(Tensor[(8, 11, 1), float32],) */
}

def @func_1583(%var_1581: Tensor[(1, 13, 7), uint64], %var_1582: Tensor[(192), float64]) -> (Tensor[(16, 13, 7), bool], Tensor[(10, 6, 6), bool], Tensor[(192), float64]) {
  %86 = fn (%var_1565: Tensor[(1, 13, 7), uint64], %var_1574: Tensor[(192), float64]) -> (Tensor[(16, 13, 7), bool], Tensor[(10, 6, 6), bool], Tensor[(192), float64]) {
    %79 = cast(%var_1565, dtype="bool") /* ty=Tensor[(1, 13, 7), bool] */;
    %80 = cast(meta[relay.Constant][6] /* ty=Tensor[(16, 13, 7), uint64] */, dtype="bool") /* ty=Tensor[(16, 13, 7), bool] */;
    %81 = cast(%var_1574, dtype="float64") /* ty=Tensor[(192), float64] */;
    %82 = reshape(%81, newshape=[192]) /* ty=Tensor[(192), float64] */;
    %83 = @func_1019(%82) /* ty=(Tensor[(10, 6, 6), bool], Tensor[(16, 2, 6), float64], Tensor[(192), float64]) */;
    %84 = less(%79, %80) /* ty=Tensor[(16, 13, 7), bool] */;
    %85 = %83.0;
    (%84, %85, %var_1574)
  };
  %86(%var_1581, %var_1582) /* ty=(Tensor[(16, 13, 7), bool], Tensor[(10, 6, 6), bool], Tensor[(192), float64]) */
}

def @func_2649(%var_2631: int16, %var_2632: Tensor[(16, 8, 5), int16]) -> Tensor[(16, 8, 5), float32] {
  %87 = cast(%var_2631, dtype="int16") /* ty=int16 */;
  %88 = cast(%var_2632, dtype="int16") /* ty=Tensor[(16, 8, 5), int16] */;
  %89 = maximum(%87, %88) /* ty=Tensor[(16, 8, 5), int16] */;
  %90 = cast(%89, dtype="float32") /* ty=Tensor[(16, 8, 5), float32] */;
  %91 = shape_of(%var_2632, dtype="int32") /* ty=Tensor[(3), int32] */;
  %92 = cast(%var_2632, dtype="float32") /* ty=Tensor[(16, 8, 5), float32] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%92, %93) /* ty=Tensor[(16, 8, 5), float32] */
}

def @func_3796(%var_3795: int16) -> (Tensor[(16, 8, 5), float32], int16, Tensor[(640), int16], Tensor[(1050, ?), uint32], Tensor[(650), int64], Tensor[(8, 11, 550), float64], Tensor[(8, 11, 1), float32], Tensor[(16, 8, 5), float32]) {
  %133 = fn (%var_3740: int16) -> (Tensor[(16, 8, 5), float32], int16, Tensor[(640), int16], Tensor[(1050, ?), uint32], Tensor[(650), int64], Tensor[(8, 11, 550), float64], Tensor[(8, 11, 1), float32], Tensor[(16, 8, 5), float32]) {
    %94 = cast(%var_3740, dtype="int16") /* ty=int16 */;
    %95 = cast(meta[relay.Constant][7] /* ty=Tensor[(640), int16] */, dtype="int16") /* ty=Tensor[(640), int16] */;
    %96 = reshape(%94, newshape=[]) /* ty=int16 */;
    %97 = reshape(%95, newshape=[16, 8, 5]) /* ty=Tensor[(16, 8, 5), int16] */;
    %98 = cast(meta[relay.Constant][8] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
    %99 = cast(meta[relay.Constant][8] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
    %100 = reshape(%98, newshape=[5, 13, 10]) /* ty=Tensor[(5, 13, 10), int64] */;
    %101 = reshape(%99, newshape=[5, 13, 10]) /* ty=Tensor[(5, 13, 10), int64] */;
    %102 = @func_2786(%100, %101) /* ty=(Tensor[(5, 13, 10), bool], Tensor[(1050, ?), uint32], Tensor[(1170), float32], Tensor[(448), bool]) */;
    %103 = @func_2845() /* ty=Tensor[(8, 11, 1), float32] */;
    %104 = @func_3166() /* ty=Tensor[(8, 11, 1), float32] */;
    %105 = cast(%104, dtype="int16") /* ty=Tensor[(8, 11, 1), int16] */;
    %106 = shape_of(%103, dtype="int32") /* ty=Tensor[(3), int32] */;
    %107 = cast(%103, dtype="int16") /* ty=Tensor[(8, 11, 1), int16] */;
    %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %109 = right_shift(%107, %108) /* ty=Tensor[(8, 11, ?), int16] */;
    %110 = cast(meta[relay.Constant][9] /* ty=Tensor[(550), uint32] */, dtype="uint32") /* ty=Tensor[(550), uint32] */;
    %111 = cast(meta[relay.Constant][9] /* ty=Tensor[(550), uint32] */, dtype="uint32") /* ty=Tensor[(550), uint32] */;
    %112 = reshape(%110, newshape=[10, 5, 11]) /* ty=Tensor[(10, 5, 11), uint32] */;
    %113 = reshape(%111, newshape=[10, 5, 11]) /* ty=Tensor[(10, 5, 11), uint32] */;
    %114 = @func_2027(%112, %113) /* ty=(Tensor[(10, 5, 11), uint32],) */;
    %115 = %114.0;
    %116 = cast(%115, dtype="float32") /* ty=Tensor[(10, 5, 11), float32] */;
    %117 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(550), uint32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %118 = cast(meta[relay.Constant][9] /* ty=Tensor[(550), uint32] */, dtype="float32") /* ty=Tensor[(550), float32] */;
    %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?), float32] */;
    %120 = floor_divide(%118, %119) /* ty=Tensor[(550), float32] */;
    %121 = cast(%109, dtype="float64") /* ty=Tensor[(8, 11, ?), float64] */;
    %122 = cast(%120, dtype="float64") /* ty=Tensor[(550), float64] */;
    %123 = cast(%104, dtype="float32") /* ty=Tensor[(8, 11, 1), float32] */;
    %124 = cast(%var_3740, dtype="int16") /* ty=int16 */;
    %125 = cast(meta[relay.Constant][7] /* ty=Tensor[(640), int16] */, dtype="int16") /* ty=Tensor[(640), int16] */;
    %126 = reshape(%124, newshape=[]) /* ty=int16 */;
    %127 = reshape(%125, newshape=[16, 8, 5]) /* ty=Tensor[(16, 8, 5), int16] */;
    %128 = @func_2649(%96, %97) /* ty=Tensor[(16, 8, 5), float32] */;
    %129 = %102.1;
    %130 = subtract(%121, %122) /* ty=Tensor[(8, 11, 550), float64] */;
    %131 = asin(%123) /* ty=Tensor[(8, 11, 1), float32] */;
    %132 = @func_2649(%126, %127) /* ty=Tensor[(16, 8, 5), float32] */;
    (%128, %var_3740, meta[relay.Constant][7] /* ty=Tensor[(640), int16] */, %129, meta[relay.Constant][8] /* ty=Tensor[(650), int64] */, %130, %131, %132)
  };
  %133(%var_3795) /* ty=(Tensor[(16, 8, 5), float32], int16, Tensor[(640), int16], Tensor[(1050, ?), uint32], Tensor[(650), int64], Tensor[(8, 11, 550), float64], Tensor[(8, 11, 1), float32], Tensor[(16, 8, 5), float32]) */
}

def @func_1811(%var_1808: Tensor[(6, 11, 9), float64], %var_1809: Tensor[(715), int16], %var_1810: Tensor[(715), int16]) -> (Tensor[(7, 70), float32], Tensor[(490), float32], Tensor[(715), bool], Tensor[(6, 11, 9), float64], Tensor[(6, 11, 9), bool]) {
  %157 = fn (%var_1755: Tensor[(6, 11, 9), float64], %var_1768: Tensor[(715), int16], %var_1782: Tensor[(715), int16]) -> (Tensor[(7, 70), float32], Tensor[(490), float32], Tensor[(715), bool], Tensor[(6, 11, 9), float64], Tensor[(6, 11, 9), bool]) {
    %134 = cast(%var_1768, dtype="int16") /* ty=Tensor[(715), int16] */;
    %135 = cast(meta[relay.Constant][10] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
    %136 = reshape(%134, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), int16] */;
    %137 = reshape(%135, newshape=[7, 70]) /* ty=Tensor[(7, 70), float32] */;
    %138 = @func_1271(%136, %137) /* ty=(Tensor[(11, 13, 5), bool], Tensor[(1050), uint32], Tensor[(7, 70), float32]) */;
    %139 = cast(%var_1782, dtype="bool") /* ty=Tensor[(715), bool] */;
    %140 = shape_of(%var_1768, dtype="int32") /* ty=Tensor[(1), int32] */;
    %141 = cast(%var_1768, dtype="bool") /* ty=Tensor[(715), bool] */;
    %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?), bool] */;
    %143 = cast(%var_1755, dtype="float64") /* ty=Tensor[(6, 11, 9), float64] */;
    %144 = cosh(%143) /* ty=Tensor[(6, 11, 9), float64] */;
    %145 = cast(%var_1755, dtype="float64") /* ty=Tensor[(6, 11, 9), float64] */;
    %146 = shape_of(%144, dtype="int32") /* ty=Tensor[(3), int32] */;
    %147 = cast(%144, dtype="float64") /* ty=Tensor[(6, 11, 9), float64] */;
    %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %149 = cast(%var_1755, dtype="bool") /* ty=Tensor[(6, 11, 9), bool] */;
    %150 = shape_of(%144, dtype="int32") /* ty=Tensor[(3), int32] */;
    %151 = cast(%144, dtype="bool") /* ty=Tensor[(6, 11, 9), bool] */;
    %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %153 = %138.2;
    %154 = greater_equal(%141, %142) /* ty=Tensor[(715), bool] */;
    %155 = floor_mod(%147, %148) /* ty=Tensor[(6, 11, 9), float64] */;
    %156 = greater_equal(%151, %152) /* ty=Tensor[(6, 11, 9), bool] */;
    (%153, meta[relay.Constant][10] /* ty=Tensor[(490), float32] */, %154, %155, %156)
  };
  %157(%var_1808, %var_1809, %var_1810) /* ty=(Tensor[(7, 70), float32], Tensor[(490), float32], Tensor[(715), bool], Tensor[(6, 11, 9), float64], Tensor[(6, 11, 9), bool]) */
}

def @func_5853() -> (Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32]) {
  @func_5851() /* ty=(Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32]) */
}

def @func_2845() -> Tensor[(8, 11, 1), float32] {
  %158 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 11, 1), float32] */, dtype="float32") /* ty=Tensor[(8, 11, 1), float32] */;
  asinh(%158) /* ty=Tensor[(8, 11, 1), float32] */
}

def @func_439(%var_436: Tensor[(10, 10, 7), int32], %var_437: Tensor[(10, 10, 7), int32], %var_438: Tensor[(256), uint64]) -> (Tensor[(10, 10, 7), int32], Tensor[(16, 16, 5), uint64], Tensor[(256), uint64]) {
  @func_434(%var_436, %var_437, %var_438) /* ty=(Tensor[(10, 10, 7), int32], Tensor[(16, 16, 5), uint64], Tensor[(256), uint64]) */
}

def @func_4708(%var_4694: Tensor[(8, 11, 8), float32]) -> (Tensor[(8, 11, 8), bool],) {
  %159 = @func_2923() /* ty=(Tensor[(8, 11, 1), float32],) */;
  %160 = %159.0;
  %161 = cast(%160, dtype="bool") /* ty=Tensor[(8, 11, 1), bool] */;
  %162 = cast(%var_4694, dtype="bool") /* ty=Tensor[(8, 11, 8), bool] */;
  %163 = logical_and(%161, %162) /* ty=Tensor[(8, 11, 8), bool] */;
  (%163,)
}

def @func_5874() -> Tensor[(8, 11, 1), float32] {
  @func_5872() /* ty=Tensor[(8, 11, 1), float32] */
}

def @func_5069() -> (Tensor[(8, 11, 1), float32],) {
  %164 = @func_2923() /* ty=(Tensor[(8, 11, 1), float32],) */;
  %165 = %164.0;
  (%165,)
}

def @func_265(%var_261: Tensor[(16, 2, 6), float64]) -> Tensor[(16, 2, 6), float64] {
  %166 = cast(%var_261, dtype="float64") /* ty=Tensor[(16, 2, 6), float64] */;
  asin(%166) /* ty=Tensor[(16, 2, 6), float64] */
}

def @func_434(%var_407: Tensor[(10, 10, 7), int32], %var_408: Tensor[(10, 10, 7), int32], %var_429: Tensor[(256), uint64]) -> (Tensor[(10, 10, 7), int32], Tensor[(16, 16, 5), uint64], Tensor[(256), uint64]) {
  %167 = cast(%var_408, dtype="int32") /* ty=Tensor[(10, 10, 7), int32] */;
  %168 = shape_of(%var_407, dtype="int32") /* ty=Tensor[(3), int32] */;
  %169 = cast(%var_407, dtype="int32") /* ty=Tensor[(10, 10, 7), int32] */;
  %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %171 = cast(%var_429, dtype="uint64") /* ty=Tensor[(256), uint64] */;
  %172 = reshape(%171, newshape=[16, 16, 1]) /* ty=Tensor[(16, 16, 1), uint64] */;
  %173 = @func_364(%172) /* ty=(Tensor[(16, 16, 5), uint64], Tensor[(16, 16, 5), float32]) */;
  %174 = bitwise_xor(%169, %170) /* ty=Tensor[(10, 10, 7), int32] */;
  %175 = %173.0;
  (%174, %175, %var_429)
}

def @func_2988(%var_2985: int16, %var_2986: Tensor[(640), int16], %var_2987: Tensor[(1344), float32]) -> (Tensor[(8, 11, 1), float32], Tensor[(16, 8, 5), float32], Tensor[(1344), float32], Tensor[(7, 12, 16), float32], Tensor[(640), float32], Tensor[(8, 11, 1), float32]) {
  @func_2983(%var_2985, %var_2986, %var_2987) /* ty=(Tensor[(8, 11, 1), float32], Tensor[(16, 8, 5), float32], Tensor[(1344), float32], Tensor[(7, 12, 16), float32], Tensor[(640), float32], Tensor[(8, 11, 1), float32]) */
}

def @func_4070() -> Tensor[(8, 11, 1), float32] {
  @func_4068() /* ty=Tensor[(8, 11, 1), float32] */
}

def @func_5851() -> (Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32]) {
  %176 = @func_2894() /* ty=Tensor[(8, 11, 1), float32] */;
  %177 = cast(%176, dtype="float32") /* ty=Tensor[(8, 11, 1), float32] */;
  %178 = @func_4723() /* ty=Tensor[(8, 11, 1), float32] */;
  %179 = sin(%177) /* ty=Tensor[(8, 11, 1), float32] */;
  %180 = @func_5649() /* ty=Tensor[(8, 11, 1), float32] */;
  (%178, %179, %180)
}

def @func_5554() -> (Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32], int64, Tensor[(672), int64], Tensor[(1344), float32], Tensor[(12, 110), float32], Tensor[(8, 11, ?), int8]) {
  %200 = fn () -> (Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32], int64, Tensor[(672), int64], Tensor[(1344), float32], Tensor[(12, 110), float32], Tensor[(8, 11, ?), int8]) {
    %181 = @func_3400() /* ty=(Tensor[(8, 11, 1), float32],) */;
    %182 = @func_2923() /* ty=(Tensor[(8, 11, 1), float32],) */;
    %183 = cast(-8 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %184 = cast(meta[relay.Constant][12] /* ty=Tensor[(672), int64] */, dtype="int64") /* ty=Tensor[(672), int64] */;
    %185 = cast(meta[relay.Constant][13] /* ty=Tensor[(1344), float32] */, dtype="float32") /* ty=Tensor[(1344), float32] */;
    %186 = cast(meta[relay.Constant][14] /* ty=Tensor[(12, 110), float32] */, dtype="float32") /* ty=Tensor[(12, 110), float32] */;
    %187 = reshape(%183, newshape=[]) /* ty=int64 */;
    %188 = reshape(%184, newshape=[8, 7, 12]) /* ty=Tensor[(8, 7, 12), int64] */;
    %189 = reshape(%185, newshape=[1344]) /* ty=Tensor[(1344), float32] */;
    %190 = reshape(%186, newshape=[1320]) /* ty=Tensor[(1320), float32] */;
    %191 = @func_3547(%187, %188, %189, %190) /* ty=(Tensor[(8, 7, 12), int64], Tensor[(8, 11, 1), float32], Tensor[(640), int16], Tensor[(1344), float32], Tensor[(8, 11, 1), float32], Tensor[(1320), float32]) */;
    %192 = %191.4;
    %193 = cast(meta[relay.Constant][15] /* ty=Tensor[(8, 11, 1), float32] */, dtype="int8") /* ty=Tensor[(8, 11, 1), int8] */;
    %194 = shape_of(%192, dtype="int32") /* ty=Tensor[(3), int32] */;
    %195 = cast(%192, dtype="int8") /* ty=Tensor[(8, 11, 1), int8] */;
    %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %197 = %181.0;
    %198 = %182.0;
    %199 = minimum(%195, %196) /* ty=Tensor[(8, 11, ?), int8] */;
    (%197, %198, -8 /* ty=int64 */, meta[relay.Constant][12] /* ty=Tensor[(672), int64] */, meta[relay.Constant][13] /* ty=Tensor[(1344), float32] */, meta[relay.Constant][14] /* ty=Tensor[(12, 110), float32] */, %199)
  };
  %200() /* ty=(Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32], int64, Tensor[(672), int64], Tensor[(1344), float32], Tensor[(12, 110), float32], Tensor[(8, 11, ?), int8]) */
}

def @func_154(%var_152: Tensor[(7, 8, 8), bool], %var_153: Tensor[(7, 8, 8), bool]) -> (Tensor[(7, 8, 8), bool], Tensor[(1050, ?), uint32], Tensor[(7, 8, 8), float64]) {
  %223 = fn (%var_77: Tensor[(7, 8, 8), bool], %var_78: Tensor[(7, 8, 8), bool]) -> (Tensor[(7, 8, 8), bool], Tensor[(1050, ?), uint32], Tensor[(7, 8, 8), float64]) {
    %201 = cast(%var_78, dtype="bool") /* ty=Tensor[(7, 8, 8), bool] */;
    %202 = shape_of(%var_77, dtype="int32") /* ty=Tensor[(3), int32] */;
    %203 = cast(%var_77, dtype="bool") /* ty=Tensor[(7, 8, 8), bool] */;
    %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %205 = cast(meta[relay.Constant][16] /* ty=Tensor[(1050, 1), uint32] */, dtype="uint32") /* ty=Tensor[(1050, 1), uint32] */;
    %206 = reshape(%205, newshape=[15, 10, 7]) /* ty=Tensor[(15, 10, 7), uint32] */;
    %207 = @func_55(%206) /* ty=Tensor[(15, 10, 7), uint32] */;
    %208 = cast(%207, dtype="float32") /* ty=Tensor[(15, 10, 7), float32] */;
    %209 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(1050, 1), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %210 = cast(meta[relay.Constant][16] /* ty=Tensor[(1050, 1), uint32] */, dtype="float32") /* ty=Tensor[(1050, 1), float32] */;
    %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %212 = power(%210, %211) /* ty=Tensor[(1050, ?), float32] */;
    %213 = cast(meta[relay.Constant][16] /* ty=Tensor[(1050, 1), uint32] */, dtype="uint32") /* ty=Tensor[(1050, 1), uint32] */;
    %214 = shape_of(%212, dtype="int32") /* ty=Tensor[(2), int32] */;
    %215 = cast(%212, dtype="uint32") /* ty=Tensor[(1050, ?), uint32] */;
    %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %217 = cast(%var_77, dtype="float32") /* ty=Tensor[(7, 8, 8), float32] */;
    %218 = cosh(%217) /* ty=Tensor[(7, 8, 8), float32] */;
    %219 = cast(%218, dtype="float64") /* ty=Tensor[(7, 8, 8), float64] */;
    %220 = logical_and(%203, %204) /* ty=Tensor[(7, 8, 8), bool] */;
    %221 = bitwise_xor(%215, %216) /* ty=Tensor[(1050, ?), uint32] */;
    %222 = sin(%219) /* ty=Tensor[(7, 8, 8), float64] */;
    (%220, %221, %222)
  };
  %223(%var_152, %var_153) /* ty=(Tensor[(7, 8, 8), bool], Tensor[(1050, ?), uint32], Tensor[(7, 8, 8), float64]) */
}

def @func_5181(%var_5180: Tensor[(1, 4, 9), float64]) -> Tensor[(1, 4, 9), float64] {
  %225 = fn (%var_5171: Tensor[(1, 4, 9), float64]) -> Tensor[(1, 4, 9), float64] {
    %224 = cast(%var_5171, dtype="float64") /* ty=Tensor[(1, 4, 9), float64] */;
    tan(%224) /* ty=Tensor[(1, 4, 9), float64] */
  };
  %225(%var_5180) /* ty=Tensor[(1, 4, 9), float64] */
}

def @func_3353(%var_3352: Tensor[(4, 14, 10), float64]) -> (Tensor[(4, 14, 10), float64], Tensor[(490), float32], Tensor[(6, 99), float64], Tensor[(715), int16]) {
  %236 = fn (%var_3338: Tensor[(4, 14, 10), float64]) -> (Tensor[(4, 14, 10), float64], Tensor[(490), float32], Tensor[(6, 99), float64], Tensor[(715), int16]) {
    %226 = cast(%var_3338, dtype="float64") /* ty=Tensor[(4, 14, 10), float64] */;
    %227 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 99), float64] */, dtype="float64") /* ty=Tensor[(6, 99), float64] */;
    %228 = cast(meta[relay.Constant][18] /* ty=Tensor[(715), int16] */, dtype="int16") /* ty=Tensor[(715), int16] */;
    %229 = cast(meta[relay.Constant][18] /* ty=Tensor[(715), int16] */, dtype="int16") /* ty=Tensor[(715), int16] */;
    %230 = reshape(%227, newshape=[6, 11, 9]) /* ty=Tensor[(6, 11, 9), float64] */;
    %231 = reshape(%228, newshape=[715]) /* ty=Tensor[(715), int16] */;
    %232 = reshape(%229, newshape=[715]) /* ty=Tensor[(715), int16] */;
    %233 = @func_1807(%230, %231, %232) /* ty=(Tensor[(7, 70), float32], Tensor[(490), float32], Tensor[(715), bool], Tensor[(6, 11, 9), float64], Tensor[(6, 11, 9), bool]) */;
    %234 = cosh(%226) /* ty=Tensor[(4, 14, 10), float64] */;
    %235 = %233.1;
    (%234, %235, meta[relay.Constant][17] /* ty=Tensor[(6, 99), float64] */, meta[relay.Constant][18] /* ty=Tensor[(715), int16] */)
  };
  %236(%var_3352) /* ty=(Tensor[(4, 14, 10), float64], Tensor[(490), float32], Tensor[(6, 99), float64], Tensor[(715), int16]) */
}

def @func_5148(%var_5146: Tensor[(3, 15, 7), float32], %var_5147: Tensor[(3, 15, 7), float32]) -> Tensor[(3, 15, 7), float32] {
  @func_5144(%var_5146, %var_5147) /* ty=Tensor[(3, 15, 7), float32] */
}

def @func_5071() -> (Tensor[(8, 11, 1), float32],) {
  @func_5069() /* ty=(Tensor[(8, 11, 1), float32],) */
}

def @func_4934() -> Tensor[(8, 11, 1), float32] {
  @func_4068() /* ty=Tensor[(8, 11, 1), float32] */
}

def @func_5651() -> Tensor[(8, 11, 1), float32] {
  @func_5649() /* ty=Tensor[(8, 11, 1), float32] */
}

def @func_1019(%var_1005: Tensor[(192), float64]) -> (Tensor[(10, 6, 6), bool], Tensor[(16, 2, 6), float64], Tensor[(192), float64]) {
  %237 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 6, 6), float64] */, dtype="float64") /* ty=Tensor[(10, 6, 6), float64] */;
  %238 = cosh(%237) /* ty=Tensor[(10, 6, 6), float64] */;
  %239 = cast(%238, dtype="float64") /* ty=Tensor[(10, 6, 6), float64] */;
  %240 = acosh(%239) /* ty=Tensor[(10, 6, 6), float64] */;
  %241 = cast(%240, dtype="bool") /* ty=Tensor[(10, 6, 6), bool] */;
  %242 = shape_of(%238, dtype="int32") /* ty=Tensor[(3), int32] */;
  %243 = cast(%238, dtype="bool") /* ty=Tensor[(10, 6, 6), bool] */;
  %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %245 = cast(%var_1005, dtype="float64") /* ty=Tensor[(192), float64] */;
  %246 = reshape(%245, newshape=[16, 2, 6]) /* ty=Tensor[(16, 2, 6), float64] */;
  %247 = greater(%243, %244) /* ty=Tensor[(10, 6, 6), bool] */;
  %248 = @func_265(%246) /* ty=Tensor[(16, 2, 6), float64] */;
  (%247, %248, %var_1005)
}

def @func_2653(%var_2651: int16, %var_2652: Tensor[(16, 8, 5), int16]) -> Tensor[(16, 8, 5), float32] {
  @func_2649(%var_2651, %var_2652) /* ty=Tensor[(16, 8, 5), float32] */
}

def @func_1022(%var_1020: Tensor[(192), float64]) -> (Tensor[(10, 6, 6), bool], Tensor[(16, 2, 6), float64], Tensor[(192), float64]) {
  @func_1019(%var_1020) /* ty=(Tensor[(10, 6, 6), bool], Tensor[(16, 2, 6), float64], Tensor[(192), float64]) */
}

def @func_4196(%var_4194: Tensor[(8, 11, 3), float32]) -> Tensor[(8, 11, 3), bool] {
  @func_4193(%var_4194) /* ty=Tensor[(8, 11, 3), bool] */
}

def @func_5749(%var_5747: int16, %var_5748: Tensor[(4, 16, 14), float64]) -> (Tensor[(640), int16], Tensor[(1344), float32], Tensor[(4, 16, 14), int64], Tensor[(8, 11, 1), float32], Tensor[(4, 16, 14), int16]) {
  %274 = fn (%var_5697: int16, %var_5717: Tensor[(4, 16, 14), float64]) -> (Tensor[(640), int16], Tensor[(1344), float32], Tensor[(4, 16, 14), int64], Tensor[(8, 11, 1), float32], Tensor[(4, 16, 14), int16]) {
    %249 = cast(meta[relay.Constant][22] /* ty=Tensor[(4, 16, 14), float64] */, dtype="float64") /* ty=Tensor[(4, 16, 14), float64] */;
    %250 = atanh(%249) /* ty=Tensor[(4, 16, 14), float64] */;
    %251 = cast(%250, dtype="float64") /* ty=Tensor[(4, 16, 14), float64] */;
    %252 = cast(%var_5697, dtype="float64") /* ty=float64 */;
    %253 = floor_divide(%251, %252) /* ty=Tensor[(4, 16, 14), float64] */;
    %254 = cast(%var_5717, dtype="int64") /* ty=Tensor[(4, 16, 14), int64] */;
    %255 = shape_of(%253, dtype="int32") /* ty=Tensor[(3), int32] */;
    %256 = cast(%253, dtype="int64") /* ty=Tensor[(4, 16, 14), int64] */;
    %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %258 = cast(%var_5697, dtype="int16") /* ty=int16 */;
    %259 = cast(meta[relay.Constant][20] /* ty=Tensor[(640), int16] */, dtype="int16") /* ty=Tensor[(640), int16] */;
    %260 = cast(meta[relay.Constant][21] /* ty=Tensor[(1344), float32] */, dtype="float32") /* ty=Tensor[(1344), float32] */;
    %261 = reshape(%258, newshape=[]) /* ty=int16 */;
    %262 = reshape(%259, newshape=[640]) /* ty=Tensor[(640), int16] */;
    %263 = reshape(%260, newshape=[1344]) /* ty=Tensor[(1344), float32] */;
    %264 = @func_2983(%261, %262, %263) /* ty=(Tensor[(8, 11, 1), float32], Tensor[(16, 8, 5), float32], Tensor[(1344), float32], Tensor[(7, 12, 16), float32], Tensor[(640), float32], Tensor[(8, 11, 1), float32]) */;
    %265 = %264.0;
    %266 = cast(%265, dtype="float32") /* ty=Tensor[(8, 11, 1), float32] */;
    %267 = cast(meta[relay.Constant][22] /* ty=Tensor[(4, 16, 14), float64] */, dtype="int16") /* ty=Tensor[(4, 16, 14), int16] */;
    %268 = shape_of(%253, dtype="int32") /* ty=Tensor[(3), int32] */;
    %269 = cast(%253, dtype="int16") /* ty=Tensor[(4, 16, 14), int16] */;
    %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %271 = bitwise_xor(%256, %257) /* ty=Tensor[(4, 16, 14), int64] */;
    %272 = acos(%266) /* ty=Tensor[(8, 11, 1), float32] */;
    %273 = bitwise_or(%269, %270) /* ty=Tensor[(4, 16, 14), int16] */;
    (meta[relay.Constant][20] /* ty=Tensor[(640), int16] */, meta[relay.Constant][21] /* ty=Tensor[(1344), float32] */, %271, %272, %273)
  };
  %274(%var_5747, %var_5748) /* ty=(Tensor[(640), int16], Tensor[(1344), float32], Tensor[(4, 16, 14), int64], Tensor[(8, 11, 1), float32], Tensor[(4, 16, 14), int16]) */
}

def @func_3597(%var_3595: Tensor[(715), int16]) -> (Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32], Tensor[(16, 13, 7), bool], Tensor[(91), uint64], Tensor[(192), float64], Tensor[(1050), uint32], Tensor[(715), int16], Tensor[(490), float32]) {
  @func_3594(%var_3595) /* ty=(Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32], Tensor[(16, 13, 7), bool], Tensor[(91), uint64], Tensor[(192), float64], Tensor[(1050), uint32], Tensor[(715), int16], Tensor[(490), float32]) */
}

def @func_3843() -> (Tensor[(650), int64], Tensor[(1050, ?), uint32], Tensor[(8, 11, 448), bool]) {
  %291 = fn () -> (Tensor[(650), int64], Tensor[(1050, ?), uint32], Tensor[(8, 11, 448), bool]) {
    %275 = cast(meta[relay.Constant][23] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
    %276 = cast(meta[relay.Constant][23] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
    %277 = reshape(%275, newshape=[5, 13, 10]) /* ty=Tensor[(5, 13, 10), int64] */;
    %278 = reshape(%276, newshape=[5, 13, 10]) /* ty=Tensor[(5, 13, 10), int64] */;
    %279 = @func_2786(%277, %278) /* ty=(Tensor[(5, 13, 10), bool], Tensor[(1050, ?), uint32], Tensor[(1170), float32], Tensor[(448), bool]) */;
    %280 = @func_2894() /* ty=Tensor[(8, 11, 1), float32] */;
    %281 = cast(meta[relay.Constant][23] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
    %282 = cast(meta[relay.Constant][23] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
    %283 = reshape(%281, newshape=[5, 13, 10]) /* ty=Tensor[(5, 13, 10), int64] */;
    %284 = reshape(%282, newshape=[5, 13, 10]) /* ty=Tensor[(5, 13, 10), int64] */;
    %285 = @func_2786(%283, %284) /* ty=(Tensor[(5, 13, 10), bool], Tensor[(1050, ?), uint32], Tensor[(1170), float32], Tensor[(448), bool]) */;
    %286 = %285.3;
    %287 = cast(%280, dtype="bool") /* ty=Tensor[(8, 11, 1), bool] */;
    %288 = cast(%286, dtype="bool") /* ty=Tensor[(448), bool] */;
    %289 = %279.1;
    %290 = logical_or(%287, %288) /* ty=Tensor[(8, 11, 448), bool] */;
    (meta[relay.Constant][23] /* ty=Tensor[(650), int64] */, %289, %290)
  };
  %291() /* ty=(Tensor[(650), int64], Tensor[(1050, ?), uint32], Tensor[(8, 11, 448), bool]) */
}

def @func_4101(%var_4099: Tensor[(91), uint64], %var_4100: Tensor[(192), float64]) -> (Tensor[(8, 11, 1), float32], Tensor[(7, 12, 16), float32], Tensor[(1344), float32], Tensor[(192), float64], Tensor[(91), uint64], Tensor[(192), float64]) {
  %303 = fn (%var_4090: Tensor[(91), uint64], %var_4091: Tensor[(192), float64]) -> (Tensor[(8, 11, 1), float32], Tensor[(7, 12, 16), float32], Tensor[(1344), float32], Tensor[(192), float64], Tensor[(91), uint64], Tensor[(192), float64]) {
    %292 = cast(meta[relay.Constant][24] /* ty=Tensor[(1344), float32] */, dtype="float32") /* ty=Tensor[(1344), float32] */;
    %293 = reshape(%292, newshape=[7, 12, 16]) /* ty=Tensor[(7, 12, 16), float32] */;
    %294 = @func_728(%293) /* ty=(Tensor[(7, 12, 16), float32],) */;
    %295 = cast(%var_4090, dtype="uint64") /* ty=Tensor[(91), uint64] */;
    %296 = cast(%var_4091, dtype="float64") /* ty=Tensor[(192), float64] */;
    %297 = reshape(%295, newshape=[1, 13, 7]) /* ty=Tensor[(1, 13, 7), uint64] */;
    %298 = reshape(%296, newshape=[192]) /* ty=Tensor[(192), float64] */;
    %299 = @func_1580(%297, %298) /* ty=(Tensor[(16, 13, 7), bool], Tensor[(10, 6, 6), bool], Tensor[(192), float64]) */;
    %300 = @func_4068() /* ty=Tensor[(8, 11, 1), float32] */;
    %301 = %294.0;
    %302 = %299.2;
    (%300, %301, meta[relay.Constant][24] /* ty=Tensor[(1344), float32] */, %302, %var_4090, %var_4091)
  };
  %303(%var_4099, %var_4100) /* ty=(Tensor[(8, 11, 1), float32], Tensor[(7, 12, 16), float32], Tensor[(1344), float32], Tensor[(192), float64], Tensor[(91), uint64], Tensor[(192), float64]) */
}

def @func_4165() -> (Tensor[(8, 11, 1), float32], Tensor[(7, 8, 8), float64], Tensor[(1170), float32], Tensor[(4, 112), bool], Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32], Tensor[(1320), float32]) {
  @func_4163() /* ty=(Tensor[(8, 11, 1), float32], Tensor[(7, 8, 8), float64], Tensor[(1170), float32], Tensor[(4, 112), bool], Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32], Tensor[(1320), float32]) */
}

def @func_728(%var_713: Tensor[(7, 12, 16), float32]) -> (Tensor[(7, 12, 16), float32],) {
  %304 = cast(%var_713, dtype="float32") /* ty=Tensor[(7, 12, 16), float32] */;
  %305 = asinh(%304) /* ty=Tensor[(7, 12, 16), float32] */;
  (%305,)
}

def @func_1161(%var_1119: Tensor[(13, 9, 10), float32], %var_1137: Tensor[(448), bool]) -> (Tensor[(7, 8, 8), float64], Tensor[(448), bool], Tensor[(13, 9, 10), float32], Tensor[(1050, ?), uint32]) {
  %306 = cast(%var_1137, dtype="bool") /* ty=Tensor[(448), bool] */;
  %307 = cast(%var_1137, dtype="bool") /* ty=Tensor[(448), bool] */;
  %308 = reshape(%306, newshape=[7, 8, 8]) /* ty=Tensor[(7, 8, 8), bool] */;
  %309 = reshape(%307, newshape=[7, 8, 8]) /* ty=Tensor[(7, 8, 8), bool] */;
  %310 = @func_151(%308, %309) /* ty=(Tensor[(7, 8, 8), bool], Tensor[(1050, ?), uint32], Tensor[(7, 8, 8), float64]) */;
  %311 = cast(%var_1119, dtype="float32") /* ty=Tensor[(13, 9, 10), float32] */;
  %312 = asinh(%311) /* ty=Tensor[(13, 9, 10), float32] */;
  %313 = cast(%var_1119, dtype="uint32") /* ty=Tensor[(13, 9, 10), uint32] */;
  %314 = shape_of(%312, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%312, dtype="uint32") /* ty=Tensor[(13, 9, 10), uint32] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %317 = bitwise_or(%315, %316) /* ty=Tensor[(13, 9, 10), uint32] */;
  %318 = cast(meta[relay.Constant][25] /* ty=Tensor[(13, 9, 10), uint32] */, dtype="float32") /* ty=Tensor[(13, 9, 10), float32] */;
  %319 = shape_of(%317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%317, dtype="float32") /* ty=Tensor[(13, 9, 10), float32] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %322 = cast(%var_1137, dtype="bool") /* ty=Tensor[(448), bool] */;
  %323 = %310.2;
  %324 = cast(%323, dtype="bool") /* ty=Tensor[(7, 8, 8), bool] */;
  %325 = reshape(%322, newshape=[7, 8, 8]) /* ty=Tensor[(7, 8, 8), bool] */;
  %326 = reshape(%324, newshape=[7, 8, 8]) /* ty=Tensor[(7, 8, 8), bool] */;
  %327 = @func_151(%325, %326) /* ty=(Tensor[(7, 8, 8), bool], Tensor[(1050, ?), uint32], Tensor[(7, 8, 8), float64]) */;
  %328 = mod(%320, %321) /* ty=Tensor[(13, 9, 10), float32] */;
  %329 = %327.1;
  (%323, %var_1137, %328, %329)
}

def @func_5770(%var_5768: Tensor[(1, 2, 6), float32]) -> (Tensor[(?, 2, 6), bool], Tensor[(8, 11, 1), float32]) {
  @func_5767(%var_5768) /* ty=(Tensor[(?, 2, 6), bool], Tensor[(8, 11, 1), float32]) */
}

def @func_5797() -> (Tensor[(8, 11, 1), float32], Tensor[(8, 11, 16), float64], Tensor[(1408), float32], Tensor[(440), float32]) {
  %339 = fn () -> (Tensor[(8, 11, 1), float32], Tensor[(8, 11, 16), float64], Tensor[(1408), float32], Tensor[(440), float32]) {
    %330 = @func_4723() /* ty=Tensor[(8, 11, 1), float32] */;
    %331 = cast(%330, dtype="float32") /* ty=Tensor[(8, 11, 1), float32] */;
    %332 = cast(meta[relay.Constant][26] /* ty=Tensor[(1408), float32] */, dtype="float32") /* ty=Tensor[(1408), float32] */;
    %333 = cast(meta[relay.Constant][27] /* ty=Tensor[(440), float32] */, dtype="float32") /* ty=Tensor[(440), float32] */;
    %334 = reshape(%331, newshape=[8, 11, 1]) /* ty=Tensor[(8, 11, 1), float32] */;
    %335 = reshape(%332, newshape=[8, 11, 16]) /* ty=Tensor[(8, 11, 16), float32] */;
    %336 = reshape(%333, newshape=[8, 11, 5]) /* ty=Tensor[(8, 11, 5), float32] */;
    %337 = @func_3664(%334, %335, %336) /* ty=(Tensor[(8, 11, 16), float64], Tensor[(8, 11, 16), bool], Tensor[(8, 11, ?), float64], Tensor[(7, 12, 16), float32], Tensor[(28, 48), float32], Tensor[(8, 11, 5), uint8], Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32]) */;
    %338 = %337.0;
    (%330, %338, meta[relay.Constant][26] /* ty=Tensor[(1408), float32] */, meta[relay.Constant][27] /* ty=Tensor[(440), float32] */)
  };
  %339() /* ty=(Tensor[(8, 11, 1), float32], Tensor[(8, 11, 16), float64], Tensor[(1408), float32], Tensor[(440), float32]) */
}

def @func_3199() -> (Tensor[(8, 11, 1), float32],) {
  %342 = fn () -> (Tensor[(8, 11, 1), float32],) {
    %340 = @func_3189() /* ty=(Tensor[(8, 11, 1), float32],) */;
    %341 = %340.0;
    (%341,)
  };
  %342() /* ty=(Tensor[(8, 11, 1), float32],) */
}

def @func_1917(%var_1914: Tensor[(16, 14, 11), bool], %var_1915: Tensor[(715), int16], %var_1916: Tensor[(7, 70), float32]) -> (Tensor[(16, 14, 11), bool], Tensor[(715), int16], Tensor[(7, 70), float32], Tensor[(11, 13, 5), float32], Tensor[(1050), uint32]) {
  @func_1912(%var_1914, %var_1915, %var_1916) /* ty=(Tensor[(16, 14, 11), bool], Tensor[(715), int16], Tensor[(7, 70), float32], Tensor[(11, 13, 5), float32], Tensor[(1050), uint32]) */
}

def @main(%var_5969: Tensor[(650), int64]) -> (Tensor[(650), int64],) {
  %343 = @func_5334() /* ty=(Tensor[(650), int64],) */;
  %344 = %343.0;
  %345 = cast(%var_5969, dtype="int64") /* ty=Tensor[(650), int64] */;
  %346 = shape_of(%344, dtype="int32") /* ty=Tensor[(1), int32] */;
  %347 = cast(%344, dtype="int64") /* ty=Tensor[(650), int64] */;
  %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?), int64] */;
  %349 = left_shift(%347, %348) /* ty=Tensor[(650), int64] */;
  (%349,)
}

def @func_4924(%var_4922: Tensor[(8, 11, 15), float32], %var_4923: Tensor[(1344), float32]) -> (Tensor[(8, 11, 15), uint16], Tensor[(8, 11, 8), bool], Tensor[(704), float32], int64, Tensor[(1344), float32]) {
  %372 = fn (%var_4827: Tensor[(8, 11, 15), float32], %var_4885: Tensor[(1344), float32]) -> (Tensor[(8, 11, 15), uint16], Tensor[(8, 11, 8), bool], Tensor[(704), float32], int64, Tensor[(1344), float32]) {
    %350 = @func_4163() /* ty=(Tensor[(8, 11, 1), float32], Tensor[(7, 8, 8), float64], Tensor[(1170), float32], Tensor[(4, 112), bool], Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32], Tensor[(1320), float32]) */;
    %351 = %350.4;
    %352 = cast(%351, dtype="uint64") /* ty=Tensor[(8, 11, 1), uint64] */;
    %353 = cast(%var_4827, dtype="uint64") /* ty=Tensor[(8, 11, 15), uint64] */;
    %354 = bitwise_or(%352, %353) /* ty=Tensor[(8, 11, 15), uint64] */;
    %355 = cast(%354, dtype="float32") /* ty=Tensor[(8, 11, 15), float32] */;
    %356 = log2(%355) /* ty=Tensor[(8, 11, 15), float32] */;
    %357 = cast(%354, dtype="uint16") /* ty=Tensor[(8, 11, 15), uint16] */;
    %358 = shape_of(%356, dtype="int32") /* ty=Tensor[(3), int32] */;
    %359 = cast(%356, dtype="uint16") /* ty=Tensor[(8, 11, 15), uint16] */;
    %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %361 = cast(meta[relay.Constant][28] /* ty=Tensor[(704), float32] */, dtype="float32") /* ty=Tensor[(704), float32] */;
    %362 = reshape(%361, newshape=[8, 11, 8]) /* ty=Tensor[(8, 11, 8), float32] */;
    %363 = @func_4708(%362) /* ty=(Tensor[(8, 11, 8), bool],) */;
    %364 = cast(%var_4885, dtype="float32") /* ty=Tensor[(1344), float32] */;
    %365 = maximum(%359, %360) /* ty=Tensor[(8, 11, 15), uint16] */;
    %366 = cast(%365, dtype="float32") /* ty=Tensor[(8, 11, 15), float32] */;
    %367 = reshape(%364, newshape=[2, 672]) /* ty=Tensor[(2, 672), float32] */;
    %368 = reshape(%366, newshape=[1320]) /* ty=Tensor[(1320), float32] */;
    %369 = @func_4261(%367, %368) /* ty=(Tensor[(7, 13, 11), float64], Tensor[(8, 11, 1), float32], int64, Tensor[(8, 84), int64], Tensor[(2, 672), float32], Tensor[(1320), float32]) */;
    %370 = %363.0;
    %371 = %369.2;
    (%365, %370, meta[relay.Constant][28] /* ty=Tensor[(704), float32] */, %371, %var_4885)
  };
  %372(%var_4922, %var_4923) /* ty=(Tensor[(8, 11, 15), uint16], Tensor[(8, 11, 8), bool], Tensor[(704), float32], int64, Tensor[(1344), float32]) */
}

def @func_3311() -> Tensor[(8, 11, 1), float32] {
  %374 = fn () -> Tensor[(8, 11, 1), float32] {
    %373 = @func_2923() /* ty=(Tensor[(8, 11, 1), float32],) */;
    %373.0
  };
  %374() /* ty=Tensor[(8, 11, 1), float32] */
}

def @func_2027(%var_2017: Tensor[(10, 5, 11), uint32], %var_2018: Tensor[(10, 5, 11), uint32]) -> (Tensor[(10, 5, 11), uint32],) {
  %375 = cast(%var_2018, dtype="uint32") /* ty=Tensor[(10, 5, 11), uint32] */;
  %376 = shape_of(%var_2017, dtype="int32") /* ty=Tensor[(3), int32] */;
  %377 = cast(%var_2017, dtype="uint32") /* ty=Tensor[(10, 5, 11), uint32] */;
  %378 = dyn.reshape(%375, %376, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %379 = maximum(%377, %378) /* ty=Tensor[(10, 5, 11), uint32] */;
  (%379,)
}

def @func_3552(%var_3548: int64, %var_3549: Tensor[(8, 7, 12), int64], %var_3550: Tensor[(1344), float32], %var_3551: Tensor[(1320), float32]) -> (Tensor[(8, 7, 12), int64], Tensor[(8, 11, 1), float32], Tensor[(640), int16], Tensor[(1344), float32], Tensor[(8, 11, 1), float32], Tensor[(1320), float32]) {
  %395 = fn (%var_3512: int64, %var_3513: Tensor[(8, 7, 12), int64], %var_3539: Tensor[(1344), float32], %var_3544: Tensor[(1320), float32]) -> (Tensor[(8, 7, 12), int64], Tensor[(8, 11, 1), float32], Tensor[(640), int16], Tensor[(1344), float32], Tensor[(8, 11, 1), float32], Tensor[(1320), float32]) {
    %380 = cast(%var_3512, dtype="int64") /* ty=int64 */;
    %381 = cast(%var_3513, dtype="int64") /* ty=Tensor[(8, 7, 12), int64] */;
    %382 = cast(%var_3512, dtype="int16") /* ty=int16 */;
    %383 = cast(meta[relay.Constant][29] /* ty=Tensor[(640), int16] */, dtype="int16") /* ty=Tensor[(640), int16] */;
    %384 = cast(%var_3539, dtype="float32") /* ty=Tensor[(1344), float32] */;
    %385 = reshape(%382, newshape=[]) /* ty=int16 */;
    %386 = reshape(%383, newshape=[640]) /* ty=Tensor[(640), int16] */;
    %387 = reshape(%384, newshape=[1344]) /* ty=Tensor[(1344), float32] */;
    %388 = @func_2983(%385, %386, %387) /* ty=(Tensor[(8, 11, 1), float32], Tensor[(16, 8, 5), float32], Tensor[(1344), float32], Tensor[(7, 12, 16), float32], Tensor[(640), float32], Tensor[(8, 11, 1), float32]) */;
    %389 = cast(%var_3544, dtype="float32") /* ty=Tensor[(1320), float32] */;
    %390 = reshape(%389, newshape=[8, 11, 15]) /* ty=Tensor[(8, 11, 15), float32] */;
    %391 = @func_3233(%390) /* ty=(Tensor[(8, 11, 15), bool], Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32]) */;
    %392 = left_shift(%380, %381) /* ty=Tensor[(8, 7, 12), int64] */;
    %393 = %388.0;
    %394 = %391.2;
    (%392, %393, meta[relay.Constant][29] /* ty=Tensor[(640), int16] */, %var_3539, %394, %var_3544)
  };
  %395(%var_3548, %var_3549, %var_3550, %var_3551) /* ty=(Tensor[(8, 7, 12), int64], Tensor[(8, 11, 1), float32], Tensor[(640), int16], Tensor[(1344), float32], Tensor[(8, 11, 1), float32], Tensor[(1320), float32]) */
}

def @func_5332() -> (Tensor[(650), int64],) {
  %396 = @func_3842() /* ty=(Tensor[(650), int64], Tensor[(1050, ?), uint32], Tensor[(8, 11, 448), bool]) */;
  %397 = %396.0;
  (%397,)
}

def @func_5092(%var_5091: Tensor[(192), float64]) -> (Tensor[(8, 11, 1), float32], Tensor[(16, 2, 6), float64], Tensor[(7, 84), int32], Tensor[(192), float64]) {
  %405 = fn (%var_5088: Tensor[(192), float64]) -> (Tensor[(8, 11, 1), float32], Tensor[(16, 2, 6), float64], Tensor[(7, 84), int32], Tensor[(192), float64]) {
    %398 = cast(meta[relay.Constant][30] /* ty=Tensor[(7, 84), int32] */, dtype="int32") /* ty=Tensor[(7, 84), int32] */;
    %399 = cast(%var_5088, dtype="float64") /* ty=Tensor[(192), float64] */;
    %400 = reshape(%398, newshape=[14, 7, 6]) /* ty=Tensor[(14, 7, 6), int32] */;
    %401 = reshape(%399, newshape=[192]) /* ty=Tensor[(192), float64] */;
    %402 = @func_958(%400, %401) /* ty=(Tensor[(14, 7, 6), int32], Tensor[(16, 2, 6), float64], Tensor[(192), float64]) */;
    %403 = @func_3166() /* ty=Tensor[(8, 11, 1), float32] */;
    %404 = %402.1;
    (%403, %404, meta[relay.Constant][30] /* ty=Tensor[(7, 84), int32] */, %var_5088)
  };
  %405(%var_5091) /* ty=(Tensor[(8, 11, 1), float32], Tensor[(16, 2, 6), float64], Tensor[(7, 84), int32], Tensor[(192), float64]) */
}

def @func_3466(%var_3464: uint64) -> Tensor[(12, 1, 6), uint64] {
  @func_3463(%var_3464) /* ty=Tensor[(12, 1, 6), uint64] */
}

def @func_4261(%var_4245: Tensor[(2, 672), float32], %var_4246: Tensor[(1320), float32]) -> (Tensor[(7, 13, 11), float64], Tensor[(8, 11, 1), float32], int64, Tensor[(8, 84), int64], Tensor[(2, 672), float32], Tensor[(1320), float32]) {
  %406 = cast(meta[relay.Constant][31] /* ty=Tensor[(7, 13, 11), float64] */, dtype="float64") /* ty=Tensor[(7, 13, 11), float64] */;
  %407 = cast(-8 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %408 = cast(meta[relay.Constant][32] /* ty=Tensor[(8, 84), int64] */, dtype="int64") /* ty=Tensor[(8, 84), int64] */;
  %409 = cast(%var_4245, dtype="float32") /* ty=Tensor[(2, 672), float32] */;
  %410 = cast(%var_4246, dtype="float32") /* ty=Tensor[(1320), float32] */;
  %411 = reshape(%407, newshape=[]) /* ty=int64 */;
  %412 = reshape(%408, newshape=[8, 7, 12]) /* ty=Tensor[(8, 7, 12), int64] */;
  %413 = reshape(%409, newshape=[1344]) /* ty=Tensor[(1344), float32] */;
  %414 = reshape(%410, newshape=[1320]) /* ty=Tensor[(1320), float32] */;
  %415 = @func_3547(%411, %412, %413, %414) /* ty=(Tensor[(8, 7, 12), int64], Tensor[(8, 11, 1), float32], Tensor[(640), int16], Tensor[(1344), float32], Tensor[(8, 11, 1), float32], Tensor[(1320), float32]) */;
  %416 = asin(%406) /* ty=Tensor[(7, 13, 11), float64] */;
  %417 = %415.4;
  (%416, %417, -8 /* ty=int64 */, meta[relay.Constant][32] /* ty=Tensor[(8, 84), int64] */, %var_4245, %var_4246)
}

def @func_1912(%var_1877: Tensor[(16, 14, 11), bool], %var_1885: Tensor[(715), int16], %var_1886: Tensor[(7, 70), float32]) -> (Tensor[(16, 14, 11), bool], Tensor[(715), int16], Tensor[(7, 70), float32], Tensor[(11, 13, 5), float32], Tensor[(1050), uint32]) {
  %418 = cast(meta[relay.Constant][33] /* ty=Tensor[(16, 14, 11), bool] */, dtype="bool") /* ty=Tensor[(16, 14, 11), bool] */;
  %419 = shape_of(%var_1877, dtype="int32") /* ty=Tensor[(3), int32] */;
  %420 = cast(%var_1877, dtype="bool") /* ty=Tensor[(16, 14, 11), bool] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %422 = cast(%var_1885, dtype="int16") /* ty=Tensor[(715), int16] */;
  %423 = cast(%var_1886, dtype="float32") /* ty=Tensor[(7, 70), float32] */;
  %424 = reshape(%422, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), int16] */;
  %425 = reshape(%423, newshape=[7, 70]) /* ty=Tensor[(7, 70), float32] */;
  %426 = @func_1271(%424, %425) /* ty=(Tensor[(11, 13, 5), bool], Tensor[(1050), uint32], Tensor[(7, 70), float32]) */;
  %427 = %426.0;
  %428 = cast(%427, dtype="float32") /* ty=Tensor[(11, 13, 5), float32] */;
  %429 = cast(%var_1886, dtype="float32") /* ty=Tensor[(7, 70), float32] */;
  %430 = reshape(%429, newshape=[7, 14, 5]) /* ty=Tensor[(7, 14, 5), float32] */;
  %431 = @func_901(%430) /* ty=(Tensor[(7, 14, 5), float64], Tensor[(15, 10, 7), uint32], Tensor[(1050), uint32]) */;
  %432 = logical_or(%420, %421) /* ty=Tensor[(16, 14, 11), bool] */;
  %433 = tan(%428) /* ty=Tensor[(11, 13, 5), float32] */;
  %434 = %431.2;
  (%432, %var_1885, %var_1886, %433, %434)
}

def @func_5013(%var_4982: Tensor[(4, 9, 3), int8], %var_4983: Tensor[(4, 9, 3), int8]) -> (Tensor[(4, 9, 3), bool], Tensor[(11, 13, 5), bool], Tensor[(715, 1), int16], Tensor[(490), float32], Tensor[(4, 9, 3), bool]) {
  %435 = cast(%var_4983, dtype="bool") /* ty=Tensor[(4, 9, 3), bool] */;
  %436 = shape_of(%var_4982, dtype="int32") /* ty=Tensor[(3), int32] */;
  %437 = cast(%var_4982, dtype="bool") /* ty=Tensor[(4, 9, 3), bool] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %439 = cast(meta[relay.Constant][34] /* ty=Tensor[(715, 1), int16] */, dtype="int16") /* ty=Tensor[(715, 1), int16] */;
  %440 = cast(meta[relay.Constant][35] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %441 = reshape(%439, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), int16] */;
  %442 = reshape(%440, newshape=[7, 70]) /* ty=Tensor[(7, 70), float32] */;
  %443 = @func_1271(%441, %442) /* ty=(Tensor[(11, 13, 5), bool], Tensor[(1050), uint32], Tensor[(7, 70), float32]) */;
  %444 = cast(%var_4982, dtype="int64") /* ty=Tensor[(4, 9, 3), int64] */;
  %445 = shape_of(%var_4983, dtype="int32") /* ty=Tensor[(3), int32] */;
  %446 = cast(%var_4983, dtype="int64") /* ty=Tensor[(4, 9, 3), int64] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %448 = bitwise_or(%446, %447) /* ty=Tensor[(4, 9, 3), int64] */;
  %449 = cast(%var_4983, dtype="bool") /* ty=Tensor[(4, 9, 3), bool] */;
  %450 = shape_of(%448, dtype="int32") /* ty=Tensor[(3), int32] */;
  %451 = cast(%448, dtype="bool") /* ty=Tensor[(4, 9, 3), bool] */;
  %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %453 = greater_equal(%437, %438) /* ty=Tensor[(4, 9, 3), bool] */;
  %454 = %443.0;
  %455 = logical_and(%451, %452) /* ty=Tensor[(4, 9, 3), bool] */;
  (%453, %454, meta[relay.Constant][34] /* ty=Tensor[(715, 1), int16] */, meta[relay.Constant][35] /* ty=Tensor[(490), float32] */, %455)
}

def @func_4193(%var_4182: Tensor[(8, 11, 3), float32]) -> Tensor[(8, 11, 3), bool] {
  %456 = @func_4068() /* ty=Tensor[(8, 11, 1), float32] */;
  %457 = cast(%456, dtype="bool") /* ty=Tensor[(8, 11, 1), bool] */;
  %458 = cast(%var_4182, dtype="bool") /* ty=Tensor[(8, 11, 3), bool] */;
  logical_and(%457, %458) /* ty=Tensor[(8, 11, 3), bool] */
}

def @func_4723() -> Tensor[(8, 11, 1), float32] {
  @func_3310() /* ty=Tensor[(8, 11, 1), float32] */
}

def @func_904(%var_902: Tensor[(7, 14, 5), float32]) -> (Tensor[(7, 14, 5), float64], Tensor[(15, 10, 7), uint32], Tensor[(1050), uint32]) {
  @func_901(%var_902) /* ty=(Tensor[(7, 14, 5), float64], Tensor[(15, 10, 7), uint32], Tensor[(1050), uint32]) */
}

def @func_5516(%var_5513: Tensor[(8, 11, 5), float32], %var_5514: Tensor[(91), uint64], %var_5515: Tensor[(192), float64]) -> (Tensor[(8, 11, 5), float64], Tensor[(10, 6, 6), bool], Tensor[(91), uint64], Tensor[(192), float64], Tensor[(8, 11, 5), float32]) {
  %483 = fn (%var_5423: Tensor[(8, 11, 5), float32], %var_5491: Tensor[(91), uint64], %var_5492: Tensor[(192), float64]) -> (Tensor[(8, 11, 5), float64], Tensor[(10, 6, 6), bool], Tensor[(91), uint64], Tensor[(192), float64], Tensor[(8, 11, 5), float32]) {
    %459 = @func_4567() /* ty=Tensor[(8, 11, 1), float32] */;
    %460 = cast(%459, dtype="uint64") /* ty=Tensor[(8, 11, 1), uint64] */;
    %461 = cast(%var_5423, dtype="uint64") /* ty=Tensor[(8, 11, 5), uint64] */;
    %462 = logical_xor(%460, %461) /* ty=Tensor[(8, 11, 5), uint64] */;
    %463 = cast(%462, dtype="float64") /* ty=Tensor[(8, 11, 5), float64] */;
    %464 = cast(%var_5491, dtype="uint64") /* ty=Tensor[(91), uint64] */;
    %465 = cast(%var_5492, dtype="float64") /* ty=Tensor[(192), float64] */;
    %466 = reshape(%464, newshape=[1, 13, 7]) /* ty=Tensor[(1, 13, 7), uint64] */;
    %467 = reshape(%465, newshape=[192]) /* ty=Tensor[(192), float64] */;
    %468 = @func_1580(%466, %467) /* ty=(Tensor[(16, 13, 7), bool], Tensor[(10, 6, 6), bool], Tensor[(192), float64]) */;
    %469 = cast(%462, dtype="float32") /* ty=Tensor[(8, 11, 5), float32] */;
    %470 = asinh(%469) /* ty=Tensor[(8, 11, 5), float32] */;
    %471 = cast(%462, dtype="bool") /* ty=Tensor[(8, 11, 5), bool] */;
    %472 = shape_of(%470, dtype="int32") /* ty=Tensor[(3), int32] */;
    %473 = cast(%470, dtype="bool") /* ty=Tensor[(8, 11, 5), bool] */;
    %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %475 = less_equal(%473, %474) /* ty=Tensor[(8, 11, 5), bool] */;
    %476 = cast(%var_5423, dtype="float32") /* ty=Tensor[(8, 11, 5), float32] */;
    %477 = shape_of(%475, dtype="int32") /* ty=Tensor[(3), int32] */;
    %478 = cast(%475, dtype="float32") /* ty=Tensor[(8, 11, 5), float32] */;
    %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %480 = acos(%463) /* ty=Tensor[(8, 11, 5), float64] */;
    %481 = %468.1;
    %482 = divide(%478, %479) /* ty=Tensor[(8, 11, 5), float32] */;
    (%480, %481, %var_5491, %var_5492, %482)
  };
  %483(%var_5513, %var_5514, %var_5515) /* ty=(Tensor[(8, 11, 5), float64], Tensor[(10, 6, 6), bool], Tensor[(91), uint64], Tensor[(192), float64], Tensor[(8, 11, 5), float32]) */
}

def @func_3092(%var_3089: Tensor[(8, 11, 13), float32], %var_3090: Tensor[(1170), float32], %var_3091: Tensor[(112, 4), bool]) -> (Tensor[(2, 12, 6), bool], Tensor[(24), float64], Tensor[(144), float32], Tensor[(8, 11, 13), float64], Tensor[(7, 8, 8), float64], Tensor[(1170), float32], Tensor[(112, 4), bool], Tensor[(15, 10, 7), uint32], Tensor[(490), float32]) {
  @func_3087(%var_3089, %var_3090, %var_3091) /* ty=(Tensor[(2, 12, 6), bool], Tensor[(24), float64], Tensor[(144), float32], Tensor[(8, 11, 13), float64], Tensor[(7, 8, 8), float64], Tensor[(1170), float32], Tensor[(112, 4), bool], Tensor[(15, 10, 7), uint32], Tensor[(490), float32]) */
}

def @func_1165(%var_1163: Tensor[(13, 9, 10), float32], %var_1164: Tensor[(448), bool]) -> (Tensor[(7, 8, 8), float64], Tensor[(448), bool], Tensor[(13, 9, 10), float32], Tensor[(1050, ?), uint32]) {
  @func_1161(%var_1163, %var_1164) /* ty=(Tensor[(7, 8, 8), float64], Tensor[(448), bool], Tensor[(13, 9, 10), float32], Tensor[(1050, ?), uint32]) */
}

def @func_3166() -> Tensor[(8, 11, 1), float32] {
  %484 = @func_2923() /* ty=(Tensor[(8, 11, 1), float32],) */;
  %484.0
}

def @func_3988(%var_3987: Tensor[(640), int16]) -> (Tensor[(8, 11, 1), float32], Tensor[(640), float32], Tensor[(640), int16], Tensor[(1344), float32], Tensor[(8, 11, 1), bool], Tensor[(8, 11, ?), int64]) {
  %507 = fn (%var_3877: Tensor[(640), int16]) -> (Tensor[(8, 11, 1), float32], Tensor[(640), float32], Tensor[(640), int16], Tensor[(1344), float32], Tensor[(8, 11, 1), bool], Tensor[(8, 11, ?), int64]) {
    %485 = cast(meta[relay.Constant][36] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %486 = cast(%var_3877, dtype="int16") /* ty=Tensor[(640), int16] */;
    %487 = cast(meta[relay.Constant][37] /* ty=Tensor[(1344), float32] */, dtype="float32") /* ty=Tensor[(1344), float32] */;
    %488 = reshape(%485, newshape=[]) /* ty=int16 */;
    %489 = reshape(%486, newshape=[640]) /* ty=Tensor[(640), int16] */;
    %490 = reshape(%487, newshape=[1344]) /* ty=Tensor[(1344), float32] */;
    %491 = @func_2983(%488, %489, %490) /* ty=(Tensor[(8, 11, 1), float32], Tensor[(16, 8, 5), float32], Tensor[(1344), float32], Tensor[(7, 12, 16), float32], Tensor[(640), float32], Tensor[(8, 11, 1), float32]) */;
    %492 = @func_2873() /* ty=Tensor[(8, 11, 1), float32] */;
    %493 = cast(%492, dtype="bool") /* ty=Tensor[(8, 11, 1), bool] */;
    %494 = cast(meta[relay.Constant][36] /* ty=int16 */, dtype="bool") /* ty=bool */;
    %495 = @func_3400() /* ty=(Tensor[(8, 11, 1), float32],) */;
    %496 = %495.0;
    %497 = cast(%496, dtype="float32") /* ty=Tensor[(8, 11, 1), float32] */;
    %498 = cos(%497) /* ty=Tensor[(8, 11, 1), float32] */;
    %499 = cast(meta[relay.Constant][38] /* ty=Tensor[(8, 11, 1), float32] */, dtype="int64") /* ty=Tensor[(8, 11, 1), int64] */;
    %500 = shape_of(%498, dtype="int32") /* ty=Tensor[(3), int32] */;
    %501 = cast(%498, dtype="int64") /* ty=Tensor[(8, 11, 1), int64] */;
    %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %503 = @func_3166() /* ty=Tensor[(8, 11, 1), float32] */;
    %504 = %491.4;
    %505 = not_equal(%493, %494) /* ty=Tensor[(8, 11, 1), bool] */;
    %506 = bitwise_and(%501, %502) /* ty=Tensor[(8, 11, ?), int64] */;
    (%503, %504, %var_3877, meta[relay.Constant][37] /* ty=Tensor[(1344), float32] */, %505, %506)
  };
  %507(%var_3987) /* ty=(Tensor[(8, 11, 1), float32], Tensor[(640), float32], Tensor[(640), int16], Tensor[(1344), float32], Tensor[(8, 11, 1), bool], Tensor[(8, 11, ?), int64]) */
}

def @func_5950(%var_5949: Tensor[(24), float64]) -> (Tensor[(8, 11, 1), float32], Tensor[(2, 12, 1), float32], Tensor[(24), float64], Tensor[(144), float32]) {
  %515 = fn (%var_5943: Tensor[(24), float64]) -> (Tensor[(8, 11, 1), float32], Tensor[(2, 12, 1), float32], Tensor[(24), float64], Tensor[(144), float32]) {
    %508 = cast(%var_5943, dtype="float64") /* ty=Tensor[(24), float64] */;
    %509 = cast(meta[relay.Constant][39] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
    %510 = reshape(%508, newshape=[2, 12, 1]) /* ty=Tensor[(2, 12, 1), float64] */;
    %511 = reshape(%509, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), float32] */;
    %512 = @func_1982(%510, %511) /* ty=(Tensor[(2, 12, 16), float64], Tensor[(2, 12, 6), bool], Tensor[(2, 12, 1), float32]) */;
    %513 = @func_4567() /* ty=Tensor[(8, 11, 1), float32] */;
    %514 = %512.2;
    (%513, %514, %var_5943, meta[relay.Constant][39] /* ty=Tensor[(144), float32] */)
  };
  %515(%var_5949) /* ty=(Tensor[(8, 11, 1), float32], Tensor[(2, 12, 1), float32], Tensor[(24), float64], Tensor[(144), float32]) */
}

def @func_4340(%var_4338: Tensor[(8, 11, 10), float32], %var_4339: Tensor[(8, 11, 13), float32]) -> (Tensor[(8, 11, 10), uint64], Tensor[(8, 11, 1), float32], Tensor[(8, 11, 13), float64]) {
  %529 = fn (%var_4296: Tensor[(8, 11, 10), float32], %var_4324: Tensor[(8, 11, 13), float32]) -> (Tensor[(8, 11, 10), uint64], Tensor[(8, 11, 1), float32], Tensor[(8, 11, 13), float64]) {
    %516 = @func_2845() /* ty=Tensor[(8, 11, 1), float32] */;
    %517 = cast(%516, dtype="uint64") /* ty=Tensor[(8, 11, 1), uint64] */;
    %518 = cast(%var_4296, dtype="uint64") /* ty=Tensor[(8, 11, 10), uint64] */;
    %519 = cast(%516, dtype="float32") /* ty=Tensor[(8, 11, 1), float32] */;
    %520 = cast(%516, dtype="float32") /* ty=Tensor[(8, 11, 1), float32] */;
    %521 = erf(%520) /* ty=Tensor[(8, 11, 1), float32] */;
    %522 = cast(%521, dtype="int32") /* ty=Tensor[(8, 11, 1), int32] */;
    %523 = cast(%var_4324, dtype="int32") /* ty=Tensor[(8, 11, 13), int32] */;
    %524 = logical_xor(%522, %523) /* ty=Tensor[(8, 11, 13), int32] */;
    %525 = cast(%524, dtype="float64") /* ty=Tensor[(8, 11, 13), float64] */;
    %526 = multiply(%517, %518) /* ty=Tensor[(8, 11, 10), uint64] */;
    %527 = acosh(%519) /* ty=Tensor[(8, 11, 1), float32] */;
    %528 = log2(%525) /* ty=Tensor[(8, 11, 13), float64] */;
    (%526, %527, %528)
  };
  %529(%var_4338, %var_4339) /* ty=(Tensor[(8, 11, 10), uint64], Tensor[(8, 11, 1), float32], Tensor[(8, 11, 13), float64]) */
}

def @func_5390(%var_5389: Tensor[(192), float64]) -> (Tensor[(8, 11, 1), float32], Tensor[(16, 2, 6), int32]) {
  %539 = fn (%var_5379: Tensor[(192), float64]) -> (Tensor[(8, 11, 1), float32], Tensor[(16, 2, 6), int32]) {
    %530 = cast(%var_5379, dtype="float64") /* ty=Tensor[(192), float64] */;
    %531 = reshape(%530, newshape=[16, 2, 6]) /* ty=Tensor[(16, 2, 6), float64] */;
    %532 = @func_265(%531) /* ty=Tensor[(16, 2, 6), float64] */;
    %533 = cast(%var_5379, dtype="int32") /* ty=Tensor[(192), int32] */;
    %534 = shape_of(%532, dtype="int32") /* ty=Tensor[(3), int32] */;
    %535 = cast(%532, dtype="int32") /* ty=Tensor[(16, 2, 6), int32] */;
    %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %537 = @func_4723() /* ty=Tensor[(8, 11, 1), float32] */;
    %538 = left_shift(%535, %536) /* ty=Tensor[(16, 2, 6), int32] */;
    (%537, %538)
  };
  %539(%var_5389) /* ty=(Tensor[(8, 11, 1), float32], Tensor[(16, 2, 6), int32]) */
}

def @func_5017(%var_5015: Tensor[(4, 9, 3), int8], %var_5016: Tensor[(4, 9, 3), int8]) -> (Tensor[(4, 9, 3), bool], Tensor[(11, 13, 5), bool], Tensor[(715, 1), int16], Tensor[(490), float32], Tensor[(4, 9, 3), bool]) {
  @func_5013(%var_5015, %var_5016) /* ty=(Tensor[(4, 9, 3), bool], Tensor[(11, 13, 5), bool], Tensor[(715, 1), int16], Tensor[(490), float32], Tensor[(4, 9, 3), bool]) */
}

def @func_5144(%var_5139: Tensor[(3, 15, 7), float32], %var_5140: Tensor[(3, 15, 7), float32]) -> Tensor[(3, 15, 7), float32] {
  %540 = cast(%var_5140, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
  %541 = shape_of(%var_5139, dtype="int32") /* ty=Tensor[(3), int32] */;
  %542 = cast(%var_5139, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
  %543 = dyn.reshape(%540, %541, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%542, %543) /* ty=Tensor[(3, 15, 7), float32] */
}

def @func_4265(%var_4263: Tensor[(2, 672), float32], %var_4264: Tensor[(1320), float32]) -> (Tensor[(7, 13, 11), float64], Tensor[(8, 11, 1), float32], int64, Tensor[(8, 84), int64], Tensor[(2, 672), float32], Tensor[(1320), float32]) {
  @func_4261(%var_4263, %var_4264) /* ty=(Tensor[(7, 13, 11), float64], Tensor[(8, 11, 1), float32], int64, Tensor[(8, 84), int64], Tensor[(2, 672), float32], Tensor[(1320), float32]) */
}

def @func_4567() -> Tensor[(8, 11, 1), float32] {
  @func_4068() /* ty=Tensor[(8, 11, 1), float32] */
}

def @func_962(%var_960: Tensor[(14, 7, 6), int32], %var_961: Tensor[(192), float64]) -> (Tensor[(14, 7, 6), int32], Tensor[(16, 2, 6), float64], Tensor[(192), float64]) {
  @func_958(%var_960, %var_961) /* ty=(Tensor[(14, 7, 6), int32], Tensor[(16, 2, 6), float64], Tensor[(192), float64]) */
}

def @func_5334() -> (Tensor[(650), int64],) {
  @func_5332() /* ty=(Tensor[(650), int64],) */
}

def @func_5607() -> Tensor[(8, 11, 1), float32] {
  %545 = fn () -> Tensor[(8, 11, 1), float32] {
    %544 = @func_2923() /* ty=(Tensor[(8, 11, 1), float32],) */;
    %544.0
  };
  %545() /* ty=Tensor[(8, 11, 1), float32] */
}

def @func_4725() -> Tensor[(8, 11, 1), float32] {
  @func_4723() /* ty=Tensor[(8, 11, 1), float32] */
}

def @func_4569() -> Tensor[(8, 11, 1), float32] {
  @func_4567() /* ty=Tensor[(8, 11, 1), float32] */
}

def @func_3463(%var_3457: uint64) -> Tensor[(12, 1, 6), uint64] {
  %546 = cast(%var_3457, dtype="uint64") /* ty=uint64 */;
  %547 = cast(meta[relay.Constant][40] /* ty=Tensor[(12, 1, 6), uint64] */, dtype="uint64") /* ty=Tensor[(12, 1, 6), uint64] */;
  subtract(%546, %547) /* ty=Tensor[(12, 1, 6), uint64] */
}

def @func_4936() -> Tensor[(8, 11, 1), float32] {
  @func_4934() /* ty=Tensor[(8, 11, 1), float32] */
}

def @func_2733(%var_2731: Tensor[(6, 16, 15), uint16], %var_2732: Tensor[(6, 16, 15), uint16]) -> Tensor[(6, 16, 15), uint16] {
  @func_2729(%var_2731, %var_2732) /* ty=Tensor[(6, 16, 15), uint16] */
}

def @func_3233(%var_3214: Tensor[(8, 11, 15), float32]) -> (Tensor[(8, 11, 15), bool], Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32]) {
  %548 = @func_2845() /* ty=Tensor[(8, 11, 1), float32] */;
  %549 = cast(%548, dtype="bool") /* ty=Tensor[(8, 11, 1), bool] */;
  %550 = cast(%var_3214, dtype="bool") /* ty=Tensor[(8, 11, 15), bool] */;
  %551 = cast(%548, dtype="float32") /* ty=Tensor[(8, 11, 1), float32] */;
  %552 = not_equal(%549, %550) /* ty=Tensor[(8, 11, 15), bool] */;
  %553 = @func_2894() /* ty=Tensor[(8, 11, 1), float32] */;
  %554 = cosh(%551) /* ty=Tensor[(8, 11, 1), float32] */;
  (%552, %553, %554)
}

def @func_2875() -> Tensor[(8, 11, 1), float32] {
  @func_2873() /* ty=Tensor[(8, 11, 1), float32] */
}

def @func_2983(%var_2934: int16, %var_2935: Tensor[(640), int16], %var_2945: Tensor[(1344), float32]) -> (Tensor[(8, 11, 1), float32], Tensor[(16, 8, 5), float32], Tensor[(1344), float32], Tensor[(7, 12, 16), float32], Tensor[(640), float32], Tensor[(8, 11, 1), float32]) {
  %555 = cast(%var_2934, dtype="int16") /* ty=int16 */;
  %556 = cast(%var_2935, dtype="int16") /* ty=Tensor[(640), int16] */;
  %557 = reshape(%555, newshape=[]) /* ty=int16 */;
  %558 = reshape(%556, newshape=[16, 8, 5]) /* ty=Tensor[(16, 8, 5), int16] */;
  %559 = cast(%var_2945, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %560 = reshape(%559, newshape=[7, 12, 16]) /* ty=Tensor[(7, 12, 16), float32] */;
  %561 = @func_728(%560) /* ty=(Tensor[(7, 12, 16), float32],) */;
  %562 = %561.0;
  %563 = cast(%562, dtype="float32") /* ty=Tensor[(7, 12, 16), float32] */;
  %564 = cast(%var_2934, dtype="float32") /* ty=float32 */;
  %565 = cast(%var_2935, dtype="float32") /* ty=Tensor[(640), float32] */;
  %566 = @func_2923() /* ty=(Tensor[(8, 11, 1), float32],) */;
  %567 = @func_2845() /* ty=Tensor[(8, 11, 1), float32] */;
  %568 = @func_2649(%557, %558) /* ty=Tensor[(16, 8, 5), float32] */;
  %569 = add(%563, %564) /* ty=Tensor[(7, 12, 16), float32] */;
  %570 = asin(%565) /* ty=Tensor[(640), float32] */;
  %571 = %566.0;
  (%567, %568, %var_2945, %569, %570, %571)
}

def @func_57(%var_56: Tensor[(15, 10, 7), uint32]) -> Tensor[(15, 10, 7), uint32] {
  %576 = fn (%var_40: Tensor[(15, 10, 7), uint32]) -> Tensor[(15, 10, 7), uint32] {
    %572 = cast(meta[relay.Constant][41] /* ty=Tensor[(15, 10, 7), uint32] */, dtype="uint32") /* ty=Tensor[(15, 10, 7), uint32] */;
    %573 = shape_of(%var_40, dtype="int32") /* ty=Tensor[(3), int32] */;
    %574 = cast(%var_40, dtype="uint32") /* ty=Tensor[(15, 10, 7), uint32] */;
    %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    multiply(%574, %575) /* ty=Tensor[(15, 10, 7), uint32] */
  };
  %576(%var_56) /* ty=Tensor[(15, 10, 7), uint32] */
}

def @func_901(%var_855: Tensor[(7, 14, 5), float32]) -> (Tensor[(7, 14, 5), float64], Tensor[(15, 10, 7), uint32], Tensor[(1050), uint32]) {
  %577 = cast(%var_855, dtype="float32") /* ty=Tensor[(7, 14, 5), float32] */;
  %578 = sin(%577) /* ty=Tensor[(7, 14, 5), float32] */;
  %579 = cast(%578, dtype="float64") /* ty=Tensor[(7, 14, 5), float64] */;
  %580 = cast(meta[relay.Constant][42] /* ty=Tensor[(1050), uint32] */, dtype="uint32") /* ty=Tensor[(1050), uint32] */;
  %581 = reshape(%580, newshape=[15, 10, 7]) /* ty=Tensor[(15, 10, 7), uint32] */;
  %582 = erf(%579) /* ty=Tensor[(7, 14, 5), float64] */;
  %583 = @func_55(%581) /* ty=Tensor[(15, 10, 7), uint32] */;
  (%582, %583, meta[relay.Constant][42] /* ty=Tensor[(1050), uint32] */)
}

def @func_364(%var_351: Tensor[(16, 16, 1), uint64]) -> (Tensor[(16, 16, 5), uint64], Tensor[(16, 16, 5), float32]) {
  %584 = cast(%var_351, dtype="uint64") /* ty=Tensor[(16, 16, 1), uint64] */;
  %585 = cast(meta[relay.Constant][43] /* ty=Tensor[(16, 16, 5), uint64] */, dtype="uint64") /* ty=Tensor[(16, 16, 5), uint64] */;
  %586 = cast(meta[relay.Constant][43] /* ty=Tensor[(16, 16, 5), uint64] */, dtype="float32") /* ty=Tensor[(16, 16, 5), float32] */;
  %587 = bitwise_and(%584, %585) /* ty=Tensor[(16, 16, 5), uint64] */;
  %588 = log2(%586) /* ty=Tensor[(16, 16, 5), float32] */;
  (%587, %588)
}

def @func_1985(%var_1983: Tensor[(2, 12, 1), float64], %var_1984: Tensor[(2, 12, 6), float32]) -> (Tensor[(2, 12, 16), float64], Tensor[(2, 12, 6), bool], Tensor[(2, 12, 1), float32]) {
  %601 = fn (%var_1947: Tensor[(2, 12, 1), float64], %var_1970: Tensor[(2, 12, 6), float32]) -> (Tensor[(2, 12, 16), float64], Tensor[(2, 12, 6), bool], Tensor[(2, 12, 1), float32]) {
    %589 = cast(%var_1947, dtype="float64") /* ty=Tensor[(2, 12, 1), float64] */;
    %590 = cast(meta[relay.Constant][44] /* ty=Tensor[(2, 12, 16), float64] */, dtype="float64") /* ty=Tensor[(2, 12, 16), float64] */;
    %591 = cast(%var_1947, dtype="float32") /* ty=Tensor[(2, 12, 1), float32] */;
    %592 = sigmoid(%591) /* ty=Tensor[(2, 12, 1), float32] */;
    %593 = cast(%592, dtype="bool") /* ty=Tensor[(2, 12, 1), bool] */;
    %594 = cast(%var_1970, dtype="bool") /* ty=Tensor[(2, 12, 6), bool] */;
    %595 = cast(%592, dtype="float64") /* ty=Tensor[(2, 12, 1), float64] */;
    %596 = atanh(%595) /* ty=Tensor[(2, 12, 1), float64] */;
    %597 = cast(%596, dtype="float32") /* ty=Tensor[(2, 12, 1), float32] */;
    %598 = floor_divide(%589, %590) /* ty=Tensor[(2, 12, 16), float64] */;
    %599 = greater(%593, %594) /* ty=Tensor[(2, 12, 6), bool] */;
    %600 = acos(%597) /* ty=Tensor[(2, 12, 1), float32] */;
    (%598, %599, %600)
  };
  %601(%var_1983, %var_1984) /* ty=(Tensor[(2, 12, 16), float64], Tensor[(2, 12, 6), bool], Tensor[(2, 12, 1), float32]) */
}

def @func_3668(%var_3665: Tensor[(8, 11, 1), float32], %var_3666: Tensor[(8, 11, 16), float32], %var_3667: Tensor[(8, 11, 5), float32]) -> (Tensor[(8, 11, 16), float64], Tensor[(8, 11, 16), bool], Tensor[(8, 11, ?), float64], Tensor[(7, 12, 16), float32], Tensor[(28, 48), float32], Tensor[(8, 11, 5), uint8], Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32]) {
  %628 = fn (%var_3610: Tensor[(8, 11, 1), float32], %var_3616: Tensor[(8, 11, 16), float32], %var_3642: Tensor[(8, 11, 5), float32]) -> (Tensor[(8, 11, 16), float64], Tensor[(8, 11, 16), bool], Tensor[(8, 11, ?), float64], Tensor[(7, 12, 16), float32], Tensor[(28, 48), float32], Tensor[(8, 11, 5), uint8], Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32]) {
    %602 = cast(%var_3610, dtype="float64") /* ty=Tensor[(8, 11, 1), float64] */;
    %603 = cast(%var_3616, dtype="float64") /* ty=Tensor[(8, 11, 16), float64] */;
    %604 = @func_3166() /* ty=Tensor[(8, 11, 1), float32] */;
    %605 = cast(%var_3610, dtype="uint16") /* ty=Tensor[(8, 11, 1), uint16] */;
    %606 = shape_of(%604, dtype="int32") /* ty=Tensor[(3), int32] */;
    %607 = cast(%604, dtype="uint16") /* ty=Tensor[(8, 11, 1), uint16] */;
    %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %609 = multiply(%607, %608) /* ty=Tensor[(8, 11, ?), uint16] */;
    %610 = cast(%609, dtype="float32") /* ty=Tensor[(8, 11, ?), float32] */;
    %611 = atan(%610) /* ty=Tensor[(8, 11, ?), float32] */;
    %612 = cast(%611, dtype="bool") /* ty=Tensor[(8, 11, ?), bool] */;
    %613 = cast(%var_3616, dtype="bool") /* ty=Tensor[(8, 11, 16), bool] */;
    %614 = cast(%611, dtype="float64") /* ty=Tensor[(8, 11, ?), float64] */;
    %615 = cast(meta[relay.Constant][45] /* ty=Tensor[(28, 48), float32] */, dtype="float32") /* ty=Tensor[(28, 48), float32] */;
    %616 = reshape(%615, newshape=[7, 12, 16]) /* ty=Tensor[(7, 12, 16), float32] */;
    %617 = @func_728(%616) /* ty=(Tensor[(7, 12, 16), float32],) */;
    %618 = cast(%611, dtype="uint8") /* ty=Tensor[(8, 11, ?), uint8] */;
    %619 = cast(%var_3642, dtype="uint8") /* ty=Tensor[(8, 11, 5), uint8] */;
    %620 = @func_3189() /* ty=(Tensor[(8, 11, 1), float32],) */;
    %621 = mod(%602, %603) /* ty=Tensor[(8, 11, 16), float64] */;
    %622 = greater_equal(%612, %613) /* ty=Tensor[(8, 11, 16), bool] */;
    %623 = sigmoid(%614) /* ty=Tensor[(8, 11, ?), float64] */;
    %624 = %617.0;
    %625 = bitwise_or(%618, %619) /* ty=Tensor[(8, 11, 5), uint8] */;
    %626 = %620.0;
    %627 = @func_3310() /* ty=Tensor[(8, 11, 1), float32] */;
    (%621, %622, %623, %624, meta[relay.Constant][45] /* ty=Tensor[(28, 48), float32] */, %625, %626, %627)
  };
  %628(%var_3665, %var_3666, %var_3667) /* ty=(Tensor[(8, 11, 16), float64], Tensor[(8, 11, 16), bool], Tensor[(8, 11, ?), float64], Tensor[(7, 12, 16), float32], Tensor[(28, 48), float32], Tensor[(8, 11, 5), uint8], Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32]) */
}

def @func_367(%var_365: Tensor[(16, 16, 1), uint64]) -> (Tensor[(16, 16, 5), uint64], Tensor[(16, 16, 5), float32]) {
  @func_364(%var_365) /* ty=(Tensor[(16, 16, 5), uint64], Tensor[(16, 16, 5), float32]) */
}

def @func_3401() -> (Tensor[(8, 11, 1), float32],) {
  %633 = fn () -> (Tensor[(8, 11, 1), float32],) {
    %629 = @func_3189() /* ty=(Tensor[(8, 11, 1), float32],) */;
    %630 = %629.0;
    %631 = cast(%630, dtype="float32") /* ty=Tensor[(8, 11, 1), float32] */;
    %632 = sqrt(%631) /* ty=Tensor[(8, 11, 1), float32] */;
    (%632,)
  };
  %633() /* ty=(Tensor[(8, 11, 1), float32],) */
}

def @func_2786(%var_2769: Tensor[(5, 13, 10), int64], %var_2770: Tensor[(5, 13, 10), int64]) -> (Tensor[(5, 13, 10), bool], Tensor[(1050, ?), uint32], Tensor[(1170), float32], Tensor[(448), bool]) {
  %634 = cast(%var_2770, dtype="bool") /* ty=Tensor[(5, 13, 10), bool] */;
  %635 = shape_of(%var_2769, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%var_2769, dtype="bool") /* ty=Tensor[(5, 13, 10), bool] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %638 = cast(meta[relay.Constant][46] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %639 = cast(meta[relay.Constant][47] /* ty=Tensor[(448), bool] */, dtype="bool") /* ty=Tensor[(448), bool] */;
  %640 = reshape(%638, newshape=[13, 9, 10]) /* ty=Tensor[(13, 9, 10), float32] */;
  %641 = reshape(%639, newshape=[448]) /* ty=Tensor[(448), bool] */;
  %642 = @func_1161(%640, %641) /* ty=(Tensor[(7, 8, 8), float64], Tensor[(448), bool], Tensor[(13, 9, 10), float32], Tensor[(1050, ?), uint32]) */;
  %643 = greater(%636, %637) /* ty=Tensor[(5, 13, 10), bool] */;
  %644 = %642.3;
  (%643, %644, meta[relay.Constant][46] /* ty=Tensor[(1170), float32] */, meta[relay.Constant][47] /* ty=Tensor[(448), bool] */)
}

def @func_4163() -> (Tensor[(8, 11, 1), float32], Tensor[(7, 8, 8), float64], Tensor[(1170), float32], Tensor[(4, 112), bool], Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32], Tensor[(1320), float32]) {
  %645 = @func_2923() /* ty=(Tensor[(8, 11, 1), float32],) */;
  %646 = cast(meta[relay.Constant][48] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %647 = cast(meta[relay.Constant][49] /* ty=Tensor[(4, 112), bool] */, dtype="bool") /* ty=Tensor[(4, 112), bool] */;
  %648 = reshape(%646, newshape=[13, 9, 10]) /* ty=Tensor[(13, 9, 10), float32] */;
  %649 = reshape(%647, newshape=[448]) /* ty=Tensor[(448), bool] */;
  %650 = @func_1161(%648, %649) /* ty=(Tensor[(7, 8, 8), float64], Tensor[(448), bool], Tensor[(13, 9, 10), float32], Tensor[(1050, ?), uint32]) */;
  %651 = cast(meta[relay.Constant][50] /* ty=Tensor[(1320), float32] */, dtype="float32") /* ty=Tensor[(1320), float32] */;
  %652 = reshape(%651, newshape=[8, 11, 15]) /* ty=Tensor[(8, 11, 15), float32] */;
  %653 = @func_3233(%652) /* ty=(Tensor[(8, 11, 15), bool], Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32]) */;
  %654 = %645.0;
  %655 = %650.0;
  %656 = @func_3310() /* ty=Tensor[(8, 11, 1), float32] */;
  %657 = %653.1;
  (%654, %655, meta[relay.Constant][48] /* ty=Tensor[(1170), float32] */, meta[relay.Constant][49] /* ty=Tensor[(4, 112), bool] */, %656, %657, meta[relay.Constant][50] /* ty=Tensor[(1320), float32] */)
}

def @func_731(%var_729: Tensor[(7, 12, 16), float32]) -> (Tensor[(7, 12, 16), float32],) {
  @func_728(%var_729) /* ty=(Tensor[(7, 12, 16), float32],) */
}

def @func_2895() -> Tensor[(8, 11, 1), float32] {
  %658 = fn () -> Tensor[(8, 11, 1), float32] {
    @func_2845() /* ty=Tensor[(8, 11, 1), float32] */
  };
  %658() /* ty=Tensor[(8, 11, 1), float32] */
}

def @func_3236(%var_3234: Tensor[(8, 11, 15), float32]) -> (Tensor[(8, 11, 15), bool], Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32]) {
  @func_3233(%var_3234) /* ty=(Tensor[(8, 11, 15), bool], Tensor[(8, 11, 1), float32], Tensor[(8, 11, 1), float32]) */
}

def @func_2790(%var_2788: Tensor[(5, 13, 10), int64], %var_2789: Tensor[(5, 13, 10), int64]) -> (Tensor[(5, 13, 10), bool], Tensor[(1050, ?), uint32], Tensor[(1170), float32], Tensor[(448), bool]) {
  @func_2786(%var_2788, %var_2789) /* ty=(Tensor[(5, 13, 10), bool], Tensor[(1050, ?), uint32], Tensor[(1170), float32], Tensor[(448), bool]) */
}

def @func_4068() -> Tensor[(8, 11, 1), float32] {
  %659 = @func_3310() /* ty=Tensor[(8, 11, 1), float32] */;
  %660 = cast(%659, dtype="float32") /* ty=Tensor[(8, 11, 1), float32] */;
  tan(%660) /* ty=Tensor[(8, 11, 1), float32] */
}

def @func_2847() -> Tensor[(8, 11, 1), float32] {
  @func_2845() /* ty=Tensor[(8, 11, 1), float32] */
}

def @func_2873() -> Tensor[(8, 11, 1), float32] {
  @func_2845() /* ty=Tensor[(8, 11, 1), float32] */
}

def @func_2924() -> (Tensor[(8, 11, 1), float32],) {
  %662 = fn () -> (Tensor[(8, 11, 1), float32],) {
    %661 = @func_2873() /* ty=Tensor[(8, 11, 1), float32] */;
    (%661,)
  };
  %662() /* ty=(Tensor[(8, 11, 1), float32],) */
}

def @func_3087(%var_3046: Tensor[(8, 11, 13), float32], %var_3076: Tensor[(1170), float32], %var_3077: Tensor[(112, 4), bool]) -> (Tensor[(2, 12, 6), bool], Tensor[(24), float64], Tensor[(144), float32], Tensor[(8, 11, 13), float64], Tensor[(7, 8, 8), float64], Tensor[(1170), float32], Tensor[(112, 4), bool], Tensor[(15, 10, 7), uint32], Tensor[(490), float32]) {
  %663 = cast(meta[relay.Constant][51] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %664 = cast(meta[relay.Constant][52] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %665 = reshape(%663, newshape=[2, 12, 1]) /* ty=Tensor[(2, 12, 1), float64] */;
  %666 = reshape(%664, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), float32] */;
  %667 = @func_1982(%665, %666) /* ty=(Tensor[(2, 12, 16), float64], Tensor[(2, 12, 6), bool], Tensor[(2, 12, 1), float32]) */;
  %668 = @func_2845() /* ty=Tensor[(8, 11, 1), float32] */;
  %669 = cast(%668, dtype="bool") /* ty=Tensor[(8, 11, 1), bool] */;
  %670 = cast(%var_3046, dtype="bool") /* ty=Tensor[(8, 11, 13), bool] */;
  %671 = logical_and(%669, %670) /* ty=Tensor[(8, 11, 13), bool] */;
  %672 = cast(%var_3046, dtype="float64") /* ty=Tensor[(8, 11, 13), float64] */;
  %673 = shape_of(%671, dtype="int32") /* ty=Tensor[(3), int32] */;
  %674 = cast(%671, dtype="float64") /* ty=Tensor[(8, 11, 13), float64] */;
  %675 = dyn.reshape(%672, %673, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %676 = cast(%var_3076, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %677 = cast(%var_3077, dtype="bool") /* ty=Tensor[(112, 4), bool] */;
  %678 = reshape(%676, newshape=[13, 9, 10]) /* ty=Tensor[(13, 9, 10), float32] */;
  %679 = reshape(%677, newshape=[448]) /* ty=Tensor[(448), bool] */;
  %680 = @func_1161(%678, %679) /* ty=(Tensor[(7, 8, 8), float64], Tensor[(448), bool], Tensor[(13, 9, 10), float32], Tensor[(1050, ?), uint32]) */;
  %681 = cast(meta[relay.Constant][53] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %682 = reshape(%681, newshape=[7, 14, 5]) /* ty=Tensor[(7, 14, 5), float32] */;
  %683 = @func_901(%682) /* ty=(Tensor[(7, 14, 5), float64], Tensor[(15, 10, 7), uint32], Tensor[(1050), uint32]) */;
  %684 = %667.1;
  %685 = multiply(%674, %675) /* ty=Tensor[(8, 11, 13), float64] */;
  %686 = %680.0;
  %687 = %683.1;
  (%684, meta[relay.Constant][51] /* ty=Tensor[(24), float64] */, meta[relay.Constant][52] /* ty=Tensor[(144), float32] */, %685, %686, %var_3076, %var_3077, %687, meta[relay.Constant][53] /* ty=Tensor[(490), float32] */)
}

def @func_5649() -> Tensor[(8, 11, 1), float32] {
  %688 = @func_5069() /* ty=(Tensor[(8, 11, 1), float32],) */;
  %688.0
}

def @func_5310(%var_5307: float64, %var_5308: Tensor[(5, 9, 2), float64], %var_5309: Tensor[(256), uint64]) -> (Tensor[(5, 9, 2), float64], Tensor[(16, 16, 5), float32], Tensor[(256), uint64], Tensor[(10, 6, 6), bool], Tensor[(24, 8), float64], Tensor[(16, 2, 6), float64]) {
  %704 = fn (%var_5269: float64, %var_5270: Tensor[(5, 9, 2), float64], %var_5275: Tensor[(256), uint64]) -> (Tensor[(5, 9, 2), float64], Tensor[(16, 16, 5), float32], Tensor[(256), uint64], Tensor[(10, 6, 6), bool], Tensor[(24, 8), float64], Tensor[(16, 2, 6), float64]) {
    %689 = cast(%var_5269, dtype="float64") /* ty=float64 */;
    %690 = cast(%var_5270, dtype="float64") /* ty=Tensor[(5, 9, 2), float64] */;
    %691 = cast(%var_5275, dtype="uint64") /* ty=Tensor[(256), uint64] */;
    %692 = reshape(%691, newshape=[16, 16, 1]) /* ty=Tensor[(16, 16, 1), uint64] */;
    %693 = @func_364(%692) /* ty=(Tensor[(16, 16, 5), uint64], Tensor[(16, 16, 5), float32]) */;
    %694 = cast(meta[relay.Constant][54] /* ty=Tensor[(24, 8), float64] */, dtype="float64") /* ty=Tensor[(24, 8), float64] */;
    %695 = reshape(%694, newshape=[192]) /* ty=Tensor[(192), float64] */;
    %696 = @func_1019(%695) /* ty=(Tensor[(10, 6, 6), bool], Tensor[(16, 2, 6), float64], Tensor[(192), float64]) */;
    %697 = cast(meta[relay.Constant][54] /* ty=Tensor[(24, 8), float64] */, dtype="float64") /* ty=Tensor[(24, 8), float64] */;
    %698 = reshape(%697, newshape=[192]) /* ty=Tensor[(192), float64] */;
    %699 = @func_1019(%698) /* ty=(Tensor[(10, 6, 6), bool], Tensor[(16, 2, 6), float64], Tensor[(192), float64]) */;
    %700 = power(%689, %690) /* ty=Tensor[(5, 9, 2), float64] */;
    %701 = %693.1;
    %702 = %696.0;
    %703 = %699.1;
    (%700, %701, %var_5275, %702, meta[relay.Constant][54] /* ty=Tensor[(24, 8), float64] */, %703)
  };
  %704(%var_5307, %var_5308, %var_5309) /* ty=(Tensor[(5, 9, 2), float64], Tensor[(16, 16, 5), float32], Tensor[(256), uint64], Tensor[(10, 6, 6), bool], Tensor[(24, 8), float64], Tensor[(16, 2, 6), float64]) */
}

def @func_4711(%var_4709: Tensor[(8, 11, 8), float32]) -> (Tensor[(8, 11, 8), bool],) {
  @func_4708(%var_4709) /* ty=(Tensor[(8, 11, 8), bool],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen74/build/output.py", line 1580, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:47:56] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

