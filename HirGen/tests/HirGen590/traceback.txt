==========mod==========
#[version = "0.0.5"]
def @func_5497() -> (Tensor[(10, 16, 13), uint32],) {
  %0 = @func_5088() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32]) */;
  %1 = %0.0;
  (%1,)
}

def @func_12293() -> (Tensor[(10, 16, 13), uint32],) {
  %2 = @func_4607() /* ty=Tensor[(10, 16, 13), uint32] */;
  (%2,)
}

def @func_2052() -> Tensor[(10, 16, 13), int64] {
  @func_1469() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_8676(%var_8645: Tensor[(1, 11, 8), float32]) -> (Tensor[(1, 11, 8), float32], Tensor[(10, 16, 13), float64]) {
  %3 = cast(%var_8645, dtype="float32") /* ty=Tensor[(1, 11, 8), float32] */;
  %4 = @func_6490() /* ty=(Tensor[(10, 16, 13), float64],) */;
  %5 = erf(%3) /* ty=Tensor[(1, 11, 8), float32] */;
  %6 = %4.0;
  (%5, %6)
}

def @func_12079(%var_12039: Tensor[(5, 12, 14), bool], %var_12058: Tensor[(208, 4), float32]) -> (Tensor[(5, 12, 14), bool], Tensor[(10, 16, 13), int64], Tensor[(5, 6, 11), int64], Tensor[(1, 55), uint64], Tensor[(330), uint64], Tensor[(1440), float32], Tensor[(400), float64], Tensor[(400), float64], Tensor[(208, 4), float32], Tensor[(10, 16, 13), uint32], Tensor[(240), float32]) {
  %7 = cast(%var_12039, dtype="bool") /* ty=Tensor[(5, 12, 14), bool] */;
  %8 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(5, 12, 14), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 12, 14), bool] */, dtype="bool") /* ty=Tensor[(5, 12, 14), bool] */;
  %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %11 = @func_3050() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %12 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 55), uint64] */, dtype="uint64") /* ty=Tensor[(1, 55), uint64] */;
  %13 = cast(meta[relay.Constant][2] /* ty=Tensor[(330), uint64] */, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %14 = cast(meta[relay.Constant][3] /* ty=Tensor[(1440), float32] */, dtype="float32") /* ty=Tensor[(1440), float32] */;
  %15 = reshape(%12, newshape=[5, 1, 11]) /* ty=Tensor[(5, 1, 11), uint64] */;
  %16 = reshape(%13, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), uint64] */;
  %17 = reshape(%14, newshape=[1440]) /* ty=Tensor[(1440), float32] */;
  %18 = @func_11812(%15, %16, %17) /* ty=(Tensor[(5, 6, 11), int64], Tensor[(10, 16, 13), uint32], Tensor[(15, 8, 12), float32], Tensor[(1440), float32], Tensor[(5, 1, 11), float64], Tensor[(10, 16, 13), uint32]) */;
  %19 = cast(meta[relay.Constant][4] /* ty=Tensor[(400), float64] */, dtype="float64") /* ty=Tensor[(400), float64] */;
  %20 = cast(%var_12058, dtype="float32") /* ty=Tensor[(208, 4), float32] */;
  %21 = reshape(%19, newshape=[400]) /* ty=Tensor[(400), float64] */;
  %22 = reshape(%20, newshape=[832]) /* ty=Tensor[(832), float32] */;
  %23 = @func_10089(%21, %22) /* ty=(Tensor[(10, 16, 13), float32], Tensor[(8, 13, 8), float64], Tensor[(400), float64], Tensor[(832), float32]) */;
  %24 = cast(meta[relay.Constant][5] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %25 = reshape(%24, newshape=[16, 1, 15]) /* ty=Tensor[(16, 1, 15), float32] */;
  %26 = @func_5940(%25) /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(16, ?, 15), float64]) */;
  %27 = logical_or(%9, %10) /* ty=Tensor[(5, 12, 14), bool] */;
  %28 = %11.0;
  %29 = %18.0;
  %30 = %23.2;
  %31 = %26.0;
  (%27, %28, %29, meta[relay.Constant][1] /* ty=Tensor[(1, 55), uint64] */, meta[relay.Constant][2] /* ty=Tensor[(330), uint64] */, meta[relay.Constant][3] /* ty=Tensor[(1440), float32] */, %30, meta[relay.Constant][4] /* ty=Tensor[(400), float64] */, %var_12058, %31, meta[relay.Constant][5] /* ty=Tensor[(240), float32] */)
}

def @func_1176(%var_1136: Tensor[(15, 8, 12), float32]) -> Tensor[(15, 8, 12), float32] {
  %32 = cast(-9.43723f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %33 = cast(%var_1136, dtype="float32") /* ty=Tensor[(15, 8, 12), float32] */;
  %34 = floor_mod(%32, %33) /* ty=Tensor[(15, 8, 12), float32] */;
  %35 = cast(%34, dtype="float32") /* ty=Tensor[(15, 8, 12), float32] */;
  acos(%35) /* ty=Tensor[(15, 8, 12), float32] */
}

def @func_1986(%var_1981: Tensor[(6, 11, 10), int32]) -> (Tensor[(6, 11, 10), bool],) {
  %36 = cast(%var_1981, dtype="bool") /* ty=Tensor[(6, 11, 10), bool] */;
  %37 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(6, 11, 10), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %38 = cast(meta[relay.Constant][6] /* ty=Tensor[(6, 11, 10), int32] */, dtype="bool") /* ty=Tensor[(6, 11, 10), bool] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %40 = greater(%38, %39) /* ty=Tensor[(6, 11, 10), bool] */;
  (%40,)
}

def @func_8044() -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32]) {
  %41 = @func_1816() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32], Tensor[(15, 8, 12), float32], Tensor[(2, 720), float32]) */;
  %42 = @func_6789() /* ty=Tensor[(10, 16, 13), uint32] */;
  %43 = %41.2;
  (%42, %43)
}

def @func_7869() -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64]) {
  %44 = @func_7757() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) */;
  %45 = @func_5141() /* ty=Tensor[(10, 16, 13), uint32] */;
  %46 = %44.0;
  (%45, %46)
}

def @func_6104() -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32]) {
  %47 = @func_1677() /* ty=(Tensor[(10, 16, 13), uint32],) */;
  %48 = @func_1937() /* ty=Tensor[(10, 16, 13), uint32] */;
  %49 = %47.0;
  (%48, %49)
}

def @func_10986() -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64], Tensor[(728), float32]) {
  %50 = @func_3034() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %51 = @func_3034() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %52 = cast(meta[relay.Constant][7] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
  %53 = reshape(%52, newshape=[728]) /* ty=Tensor[(728), float32] */;
  %54 = @func_1274(%53) /* ty=(Tensor[(10, 16, 13), int64], Tensor[(13, 4, 14), float32], Tensor[(78), float64], Tensor[(728), float32], Tensor[(234), float64], Tensor[(2, 11, 5), float64], Tensor[(110), float64]) */;
  %55 = %50.0;
  %56 = %51.0;
  %57 = %54.0;
  (%55, %56, %57, meta[relay.Constant][7] /* ty=Tensor[(728), float32] */)
}

def @func_7596() -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) {
  %58 = @func_3515() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %59 = @func_5141() /* ty=Tensor[(10, 16, 13), uint32] */;
  %60 = @func_1469() /* ty=Tensor[(10, 16, 13), int64] */;
  %61 = %58.0;
  (%59, %60, %61)
}

def @func_8724() -> Tensor[(3, 13, 8), float64] {
  @func_8531() /* ty=Tensor[(3, 13, 8), float64] */
}

def @func_2905(%var_2899: Tensor[(6, 6, 4), float64]) -> (Tensor[(6, 6, 4), float64], Tensor[(10, 16, 13), int64]) {
  %62 = cast(%var_2899, dtype="float64") /* ty=Tensor[(6, 6, 4), float64] */;
  %63 = @func_2825() /* ty=(Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64]) */;
  %64 = asinh(%62) /* ty=Tensor[(6, 6, 4), float64] */;
  %65 = %63.1;
  (%64, %65)
}

def @func_5773() -> (Tensor[(5, 4, 15), float64],) {
  %66 = @func_4134() /* ty=(Tensor[(5, 4, 15), float32],) */;
  %67 = %66.0;
  %68 = cast(%67, dtype="float64") /* ty=Tensor[(5, 4, 15), float64] */;
  %69 = tan(%68) /* ty=Tensor[(5, 4, 15), float64] */;
  (%69,)
}

def @func_5940(%var_5934: Tensor[(16, 1, 15), float32]) -> (Tensor[(10, 16, 13), uint32], Tensor[(16, ?, 15), float64]) {
  %70 = @func_3115() /* ty=(Tensor[(2, 720), float32], Tensor[(10, 16, 13), uint32]) */;
  %71 = @func_5706() /* ty=(Tensor[(16, 1, 15), float32],) */;
  %72 = %71.0;
  %73 = cast(%var_5934, dtype="float64") /* ty=Tensor[(16, 1, 15), float64] */;
  %74 = shape_of(%72, dtype="int32") /* ty=Tensor[(3), int32] */;
  %75 = cast(%72, dtype="float64") /* ty=Tensor[(16, 1, 15), float64] */;
  %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %77 = %70.1;
  %78 = maximum(%75, %76) /* ty=Tensor[(16, ?, 15), float64] */;
  (%77, %78)
}

def @func_11577() -> (Tensor[(300), float32], Tensor[(10, 16, 13), int64]) {
  %79 = @func_2727() /* ty=(Tensor[(300), float32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64]) */;
  %80 = %79.0;
  %81 = @func_8604() /* ty=Tensor[(10, 16, 13), int64] */;
  (%80, %81)
}

def @func_7208() -> Tensor[(10, 16, 13), int64] {
  @func_2449() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_7025(%var_7011: Tensor[(14, 300), float32]) -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(14, 300), float32], Tensor[(10, 16, 13), int64]) {
  %82 = cast(meta[relay.Constant][8] /* ty=Tensor[(1, 300), float32] */, dtype="float32") /* ty=Tensor[(1, 300), float32] */;
  %83 = reshape(%82, newshape=[300]) /* ty=Tensor[(300), float32] */;
  %84 = @func_3619(%83) /* ty=(Tensor[(15, 9, 12), float64], Tensor[(5, 4, 15), float32], Tensor[(300), float32], Tensor[(10, 16, 13), int64], Tensor[(2080), uint32]) */;
  %85 = cast(meta[relay.Constant][8] /* ty=Tensor[(1, 300), float32] */, dtype="float32") /* ty=Tensor[(1, 300), float32] */;
  %86 = cast(%var_7011, dtype="float32") /* ty=Tensor[(14, 300), float32] */;
  %87 = @func_3071() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %88 = @func_1937() /* ty=Tensor[(10, 16, 13), uint32] */;
  %89 = %84.3;
  %90 = floor_divide(%85, %86) /* ty=Tensor[(14, 300), float32] */;
  %91 = %87.0;
  (%88, %89, %90, %91)
}

def @func_11732() -> (Tensor[(5, 4, 15), float32], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), float64]) {
  %92 = @func_2370() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(5, 4, 15), float32], Tensor[(300), float32]) */;
  %93 = @func_5470() /* ty=Tensor[(10, 16, 13), uint32] */;
  %94 = cast(%93, dtype="int64") /* ty=Tensor[(10, 16, 13), int64] */;
  %95 = reshape(%94, newshape=[10, 16, 13]) /* ty=Tensor[(10, 16, 13), int64] */;
  %96 = @func_8470(%95) /* ty=(Tensor[(10, 16, 13), float64], Tensor[(10, 16, 13), float64]) */;
  %97 = %92.1;
  %98 = %96.1;
  (%97, %93, %98)
}

def @func_10349() -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32]) {
  %99 = @func_5009() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %100 = @func_1816() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32], Tensor[(15, 8, 12), float32], Tensor[(2, 720), float32]) */;
  %101 = %99.0;
  %102 = %100.2;
  (%101, %102)
}

def @func_1274(%var_1258: Tensor[(728), float32]) -> (Tensor[(10, 16, 13), int64], Tensor[(13, 4, 14), float32], Tensor[(78), float64], Tensor[(728), float32], Tensor[(234), float64], Tensor[(2, 11, 5), float64], Tensor[(110), float64]) {
  %103 = @func_1191() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %104 = cast(meta[relay.Constant][9] /* ty=Tensor[(78), float64] */, dtype="float64") /* ty=Tensor[(78), float64] */;
  %105 = cast(%var_1258, dtype="float32") /* ty=Tensor[(728), float32] */;
  %106 = cast(meta[relay.Constant][10] /* ty=Tensor[(234), float64] */, dtype="float64") /* ty=Tensor[(234), float64] */;
  %107 = reshape(%104, newshape=[1, 6, 13]) /* ty=Tensor[(1, 6, 13), float64] */;
  %108 = reshape(%105, newshape=[728]) /* ty=Tensor[(728), float32] */;
  %109 = reshape(%106, newshape=[3, 6, 13]) /* ty=Tensor[(3, 6, 13), float64] */;
  %110 = @func_311(%107, %108, %109) /* ty=(Tensor[(?, 6, 13), bool], Tensor[(13, 4, 14), float32], Tensor[(728), float32], Tensor[(13, 4, 14), float32], Tensor[(3, 6, 13), bool], Tensor[(13, 4, 14), float32]) */;
  %111 = cast(meta[relay.Constant][11] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
  %112 = reshape(%111, newshape=[2, 11, 5]) /* ty=Tensor[(2, 11, 5), float64] */;
  %113 = @func_661(%112) /* ty=(Tensor[(2, 11, 5), bool], Tensor[(2, 11, 5), float32], Tensor[(2, 11, 5), float64]) */;
  %114 = %103.0;
  %115 = %110.1;
  %116 = %113.2;
  (%114, %115, meta[relay.Constant][9] /* ty=Tensor[(78), float64] */, %var_1258, meta[relay.Constant][10] /* ty=Tensor[(234), float64] */, %116, meta[relay.Constant][11] /* ty=Tensor[(110), float64] */)
}

def @func_2651(%var_2646: Tensor[(13, 5, 6), float32]) -> Tensor[(13, 5, 6), float32] {
  %117 = cast(%var_2646, dtype="float32") /* ty=Tensor[(13, 5, 6), float32] */;
  asinh(%117) /* ty=Tensor[(13, 5, 6), float32] */
}

def @func_3115() -> (Tensor[(2, 720), float32], Tensor[(10, 16, 13), uint32]) {
  %118 = @func_1918() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(2, 720), float32]) */;
  %119 = %118.1;
  %120 = @func_2394() /* ty=Tensor[(10, 16, 13), uint32] */;
  (%119, %120)
}

def @func_5088() -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32]) {
  %121 = @func_2370() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(5, 4, 15), float32], Tensor[(300), float32]) */;
  %122 = @func_2394() /* ty=Tensor[(10, 16, 13), uint32] */;
  %123 = %121.0;
  (%122, %123)
}

def @func_3619(%var_3612: Tensor[(300), float32]) -> (Tensor[(15, 9, 12), float64], Tensor[(5, 4, 15), float32], Tensor[(300), float32], Tensor[(10, 16, 13), int64], Tensor[(2080), uint32]) {
  %124 = cast(meta[relay.Constant][13] /* ty=Tensor[(15, 9, 12), float64] */, dtype="float64") /* ty=Tensor[(15, 9, 12), float64] */;
  %125 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(15, 9, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %126 = cast(meta[relay.Constant][12] /* ty=Tensor[(15, 9, 12), float64] */, dtype="float64") /* ty=Tensor[(15, 9, 12), float64] */;
  %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %128 = cast(%var_3612, dtype="float32") /* ty=Tensor[(300), float32] */;
  %129 = cast(%var_3612, dtype="float32") /* ty=Tensor[(300), float32] */;
  %130 = reshape(%128, newshape=[5, 4, 15]) /* ty=Tensor[(5, 4, 15), float32] */;
  %131 = reshape(%129, newshape=[5, 4, 15]) /* ty=Tensor[(5, 4, 15), float32] */;
  %132 = @func_1100(%130, %131) /* ty=(Tensor[(5, 4, 15), float32],) */;
  %133 = cast(meta[relay.Constant][14] /* ty=Tensor[(2080), uint32] */, dtype="uint32") /* ty=Tensor[(2080), uint32] */;
  %134 = reshape(%133, newshape=[10, 16, 13]) /* ty=Tensor[(10, 16, 13), uint32] */;
  %135 = @func_2951(%134) /* ty=(Tensor[(10, 16, 13), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), int64]) */;
  %136 = power(%126, %127) /* ty=Tensor[(15, 9, 12), float64] */;
  %137 = %132.0;
  %138 = %135.2;
  (%136, %137, %var_3612, %138, meta[relay.Constant][14] /* ty=Tensor[(2080), uint32] */)
}

def @func_6848(%var_6804: Tensor[(10, 10, 4), float64], %var_6839: Tensor[(832), float32]) -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 10, 4), bool], Tensor[(8, 13, 8), float64], Tensor[(832), float32]) {
  %139 = cast(%var_6804, dtype="float64") /* ty=Tensor[(10, 10, 4), float64] */;
  %140 = tan(%139) /* ty=Tensor[(10, 10, 4), float64] */;
  %141 = cast(%var_6804, dtype="bool") /* ty=Tensor[(10, 10, 4), bool] */;
  %142 = shape_of(%140, dtype="int32") /* ty=Tensor[(3), int32] */;
  %143 = cast(%140, dtype="bool") /* ty=Tensor[(10, 10, 4), bool] */;
  %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %145 = cast(%var_6839, dtype="float32") /* ty=Tensor[(832), float32] */;
  %146 = reshape(%145, newshape=[8, 13, 8]) /* ty=Tensor[(8, 13, 8), float32] */;
  %147 = @func_3872(%146) /* ty=(Tensor[(8, 13, 8), float64],) */;
  %148 = @func_1937() /* ty=Tensor[(10, 16, 13), uint32] */;
  %149 = greater_equal(%143, %144) /* ty=Tensor[(10, 10, 4), bool] */;
  %150 = %147.0;
  (%148, %149, %150, %var_6839)
}

def @func_4881(%var_4794: Tensor[(728), float32], %var_4867: Tensor[(1440), float32]) -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64], Tensor[(78), float64], Tensor[(728), float32], Tensor[(10, 16, 13), int32], Tensor[(234), uint64], Tensor[(2, 11, 5), bool], Tensor[(15, 8, 12), float32], Tensor[(1440), float32], Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64]) {
  %151 = @func_2640() /* ty=Tensor[(10, 16, 13), int64] */;
  %152 = cast(%151, dtype="int64") /* ty=Tensor[(10, 16, 13), int64] */;
  %153 = reshape(%152, newshape=[10, 16, 13]) /* ty=Tensor[(10, 16, 13), int64] */;
  %154 = @func_1439(%153) /* ty=(Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int32]) */;
  %155 = cast(meta[relay.Constant][15] /* ty=Tensor[(78), float64] */, dtype="float64") /* ty=Tensor[(78), float64] */;
  %156 = cast(%var_4794, dtype="float32") /* ty=Tensor[(728), float32] */;
  %157 = cast(meta[relay.Constant][16] /* ty=Tensor[(234), float64] */, dtype="float64") /* ty=Tensor[(234), float64] */;
  %158 = reshape(%155, newshape=[1, 6, 13]) /* ty=Tensor[(1, 6, 13), float64] */;
  %159 = reshape(%156, newshape=[728]) /* ty=Tensor[(728), float32] */;
  %160 = reshape(%157, newshape=[3, 6, 13]) /* ty=Tensor[(3, 6, 13), float64] */;
  %161 = @func_311(%158, %159, %160) /* ty=(Tensor[(?, 6, 13), bool], Tensor[(13, 4, 14), float32], Tensor[(728), float32], Tensor[(13, 4, 14), float32], Tensor[(3, 6, 13), bool], Tensor[(13, 4, 14), float32]) */;
  %162 = %161.4;
  %163 = cast(%162, dtype="uint64") /* ty=Tensor[(3, 6, 13), uint64] */;
  %164 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(234), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %165 = cast(meta[relay.Constant][16] /* ty=Tensor[(234), float64] */, dtype="uint64") /* ty=Tensor[(234), uint64] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %167 = @func_1745() /* ty=(Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64], Tensor[(2, 11, 5), bool], Tensor[(11, 10), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), int64]) */;
  %168 = cast(%var_4867, dtype="float32") /* ty=Tensor[(1440), float32] */;
  %169 = reshape(%168, newshape=[15, 8, 12]) /* ty=Tensor[(15, 8, 12), float32] */;
  %170 = @func_4478() /* ty=(Tensor[(10, 16, 13), float32],) */;
  %171 = @func_4769() /* ty=Tensor[(10, 16, 13), int64] */;
  %172 = %154.1;
  %173 = maximum(%165, %166) /* ty=Tensor[(234), uint64] */;
  %174 = %167.2;
  %175 = @func_1176(%169) /* ty=Tensor[(15, 8, 12), float32] */;
  %176 = %170.0;
  %177 = @func_4549() /* ty=Tensor[(10, 16, 13), int64] */;
  (%171, %151, meta[relay.Constant][15] /* ty=Tensor[(78), float64] */, %var_4794, %172, %173, %174, %175, %var_4867, %176, %177)
}

def @func_5893(%var_5850: Tensor[(728, 1), float32]) -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), float64], Tensor[(728, 7), bool], Tensor[(10, 16, 13), int64]) {
  %178 = @func_3034() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %179 = cast(%var_5850, dtype="float32") /* ty=Tensor[(728, 1), float32] */;
  %180 = reshape(%179, newshape=[728]) /* ty=Tensor[(728), float32] */;
  %181 = @func_3501(%180) /* ty=(Tensor[(10, 16, 13), int64], Tensor[(13, 4, 14), float32], Tensor[(78), float64], Tensor[(728), float32], Tensor[(234), float64]) */;
  %182 = cast(%var_5850, dtype="bool") /* ty=Tensor[(728, 1), bool] */;
  %183 = cast(meta[relay.Constant][17] /* ty=Tensor[(728, 7), float32] */, dtype="bool") /* ty=Tensor[(728, 7), bool] */;
  %184 = %178.0;
  %185 = %181.0;
  %186 = @func_3842() /* ty=Tensor[(10, 16, 13), float64] */;
  %187 = less(%182, %183) /* ty=Tensor[(728, 7), bool] */;
  %188 = @func_4769() /* ty=Tensor[(10, 16, 13), int64] */;
  (%184, %185, %186, %187, %188)
}

def @func_7792() -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) {
  %189 = @func_3050() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %190 = @func_3050() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %191 = %189.0;
  %192 = %190.0;
  (%191, %192)
}

def @func_8822() -> (Tensor[(10, 16, 13), int64],) {
  %193 = @func_3515() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %194 = %193.0;
  (%194,)
}

def @func_10405() -> Tensor[(300), float32] {
  %195 = @func_8068() /* ty=(Tensor[(300), float32], Tensor[(10, 16, 13), uint32]) */;
  %195.0
}

def @func_4453() -> Tensor[(10, 16, 13), float32] {
  %196 = @func_2825() /* ty=(Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64]) */;
  %196.0
}

def @func_3515() -> (Tensor[(10, 16, 13), int64],) {
  %197 = @func_3323() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) */;
  %198 = %197.1;
  (%198,)
}

def @func_4945(%var_4942: Tensor[(260), uint8]) -> (Tensor[(10, 16, 13), int64], Tensor[(5, 13, 4), float64], Tensor[(260), uint8]) {
  %199 = cast(%var_4942, dtype="uint8") /* ty=Tensor[(260), uint8] */;
  %200 = reshape(%199, newshape=[260]) /* ty=Tensor[(260), uint8] */;
  %201 = @func_4111(%200) /* ty=(Tensor[(10, 16, 13), int64], Tensor[(5, 13, 4), float64], Tensor[(260), uint8], Tensor[(10, 16, 13), int64]) */;
  %202 = @func_4650() /* ty=Tensor[(10, 16, 13), int64] */;
  %203 = %201.1;
  (%202, %203, %var_4942)
}

def @func_1100(%var_1095: Tensor[(5, 4, 15), float32], %var_1096: Tensor[(5, 4, 15), float32]) -> (Tensor[(5, 4, 15), float32],) {
  %204 = cast(%var_1096, dtype="float32") /* ty=Tensor[(5, 4, 15), float32] */;
  %205 = shape_of(%var_1095, dtype="int32") /* ty=Tensor[(3), int32] */;
  %206 = cast(%var_1095, dtype="float32") /* ty=Tensor[(5, 4, 15), float32] */;
  %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %208 = power(%206, %207) /* ty=Tensor[(5, 4, 15), float32] */;
  (%208,)
}

def @func_6167() -> Tensor[(2, 720), float64] {
  %209 = @func_3115() /* ty=(Tensor[(2, 720), float32], Tensor[(10, 16, 13), uint32]) */;
  %210 = %209.0;
  %211 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 720), float32] */, dtype="float64") /* ty=Tensor[(2, 720), float64] */;
  %212 = shape_of(%210, dtype="int32") /* ty=Tensor[(2), int32] */;
  %213 = cast(%210, dtype="float64") /* ty=Tensor[(2, 720), float64] */;
  %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  floor_mod(%213, %214) /* ty=Tensor[(2, 720), float64] */
}

def @func_8166() -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), float32], Tensor[(1440), float32]) {
  %215 = cast(meta[relay.Constant][19] /* ty=Tensor[(1440), float32] */, dtype="float32") /* ty=Tensor[(1440), float32] */;
  %216 = reshape(%215, newshape=[60, 24]) /* ty=Tensor[(60, 24), float32] */;
  %217 = @func_1874(%216) /* ty=(Tensor[(10, 16, 13), float32], Tensor[(15, 8, 12), int32], Tensor[(60, 24), float32]) */;
  %218 = @func_4769() /* ty=Tensor[(10, 16, 13), int64] */;
  %219 = %217.0;
  (%218, %219, meta[relay.Constant][19] /* ty=Tensor[(1440), float32] */)
}

def @func_9195() -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) {
  %220 = @func_3184() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), float32]) */;
  %221 = @func_8375() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %222 = @func_5470() /* ty=Tensor[(10, 16, 13), uint32] */;
  %223 = %220.0;
  %224 = %221.0;
  (%222, %223, %224)
}

def @func_11812(%var_11783: Tensor[(5, 1, 11), uint64], %var_11784: Tensor[(5, 6, 11), uint64], %var_11800: Tensor[(1440), float32]) -> (Tensor[(5, 6, 11), int64], Tensor[(10, 16, 13), uint32], Tensor[(15, 8, 12), float32], Tensor[(1440), float32], Tensor[(5, 1, 11), float64], Tensor[(10, 16, 13), uint32]) {
  %225 = cast(%var_11783, dtype="uint64") /* ty=Tensor[(5, 1, 11), uint64] */;
  %226 = cast(%var_11784, dtype="uint64") /* ty=Tensor[(5, 6, 11), uint64] */;
  %227 = logical_xor(%225, %226) /* ty=Tensor[(5, 6, 11), uint64] */;
  %228 = cast(%227, dtype="int64") /* ty=Tensor[(5, 6, 11), int64] */;
  %229 = cast(%var_11783, dtype="int64") /* ty=Tensor[(5, 1, 11), int64] */;
  %230 = cast(%var_11800, dtype="float32") /* ty=Tensor[(1440), float32] */;
  %231 = reshape(%230, newshape=[15, 8, 12]) /* ty=Tensor[(15, 8, 12), float32] */;
  %232 = cast(%var_11783, dtype="float64") /* ty=Tensor[(5, 1, 11), float64] */;
  %233 = subtract(%228, %229) /* ty=Tensor[(5, 6, 11), int64] */;
  %234 = @func_5141() /* ty=Tensor[(10, 16, 13), uint32] */;
  %235 = @func_1176(%231) /* ty=Tensor[(15, 8, 12), float32] */;
  %236 = log(%232) /* ty=Tensor[(5, 1, 11), float64] */;
  %237 = @func_1937() /* ty=Tensor[(10, 16, 13), uint32] */;
  (%233, %234, %235, %var_11800, %236, %237)
}

def @func_11686(%var_11674: Tensor[(864), uint64], %var_11684: Tensor[(832), float32]) -> (Tensor[(10, 16, 13), int64], Tensor[(9, 12, 8), uint64], Tensor[(864), uint64], Tensor[(8, 13, 8), float64], Tensor[(832), float32]) {
  %238 = @func_3323() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) */;
  %239 = cast(%var_11674, dtype="uint64") /* ty=Tensor[(864), uint64] */;
  %240 = cast(%var_11674, dtype="uint64") /* ty=Tensor[(864), uint64] */;
  %241 = reshape(%239, newshape=[9, 12, 8]) /* ty=Tensor[(9, 12, 8), uint64] */;
  %242 = reshape(%240, newshape=[9, 12, 8]) /* ty=Tensor[(9, 12, 8), uint64] */;
  %243 = cast(%var_11684, dtype="float32") /* ty=Tensor[(832), float32] */;
  %244 = reshape(%243, newshape=[8, 13, 8]) /* ty=Tensor[(8, 13, 8), float32] */;
  %245 = @func_3872(%244) /* ty=(Tensor[(8, 13, 8), float64],) */;
  %246 = %238.0;
  %247 = @func_4328(%241, %242) /* ty=Tensor[(9, 12, 8), uint64] */;
  %248 = %245.0;
  (%246, %247, %var_11674, %248, %var_11684)
}

def @func_5141() -> Tensor[(10, 16, 13), uint32] {
  %249 = @func_2424() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(300), float32], Tensor[(10, 16, 13), int64]) */;
  %249.0
}

def @func_4962() -> (Tensor[(10, 16, 13), int64],) {
  %250 = @func_4650() /* ty=Tensor[(10, 16, 13), int64] */;
  (%250,)
}

def @func_10778(%var_10770: Tensor[(8, 4, 5), int16], %var_10771: Tensor[(8, 4, 5), int16]) -> Tensor[(8, 4, 5), bool] {
  %251 = cast(%var_10771, dtype="bool") /* ty=Tensor[(8, 4, 5), bool] */;
  %252 = shape_of(%var_10770, dtype="int32") /* ty=Tensor[(3), int32] */;
  %253 = cast(%var_10770, dtype="bool") /* ty=Tensor[(8, 4, 5), bool] */;
  %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%253, %254) /* ty=Tensor[(8, 4, 5), bool] */
}

def @func_3145() -> (Tensor[(10, 16, 13), int64], Tensor[(2, 720), float32]) {
  %255 = @func_3071() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %256 = @func_1816() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32], Tensor[(15, 8, 12), float32], Tensor[(2, 720), float32]) */;
  %257 = %255.0;
  %258 = %256.4;
  (%257, %258)
}

def @func_10275(%var_10241: Tensor[(260), uint8]) -> (Tensor[(10, 16, 13), int64], Tensor[(6, 11, 10), bool], Tensor[(110, 6), int32], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(5, 13, 4), int8]) {
  %259 = cast(meta[relay.Constant][20] /* ty=Tensor[(110, 6), int32] */, dtype="int32") /* ty=Tensor[(110, 6), int32] */;
  %260 = reshape(%259, newshape=[6, 11, 10]) /* ty=Tensor[(6, 11, 10), int32] */;
  %261 = @func_1986(%260) /* ty=(Tensor[(6, 11, 10), bool],) */;
  %262 = @func_1191() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %263 = cast(%var_10241, dtype="uint8") /* ty=Tensor[(260), uint8] */;
  %264 = cast(%var_10241, dtype="uint8") /* ty=Tensor[(260), uint8] */;
  %265 = reshape(%263, newshape=[5, 13, 4]) /* ty=Tensor[(5, 13, 4), uint8] */;
  %266 = reshape(%264, newshape=[5, 13, 4]) /* ty=Tensor[(5, 13, 4), uint8] */;
  %267 = @func_1349(%265, %266) /* ty=(Tensor[(5, 13, 4), float64],) */;
  %268 = %267.0;
  %269 = cast(%var_10241, dtype="int8") /* ty=Tensor[(260), int8] */;
  %270 = shape_of(%268, dtype="int32") /* ty=Tensor[(3), int32] */;
  %271 = cast(%268, dtype="int8") /* ty=Tensor[(5, 13, 4), int8] */;
  %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %273 = @func_7208() /* ty=Tensor[(10, 16, 13), int64] */;
  %274 = %261.0;
  %275 = @func_2394() /* ty=Tensor[(10, 16, 13), uint32] */;
  %276 = %262.0;
  %277 = bitwise_and(%271, %272) /* ty=Tensor[(5, 13, 4), int8] */;
  (%273, %274, meta[relay.Constant][20] /* ty=Tensor[(110, 6), int32] */, %275, %276, %277)
}

def @func_11835() -> (Tensor[(10, 16, 13), uint32],) {
  %278 = @func_6731() /* ty=(Tensor[(10, 16, 13), float64], Tensor[(10, 16, 13), uint32]) */;
  %279 = %278.1;
  (%279,)
}

def @func_12143() -> (Tensor[(10, 16, 13), uint32],) {
  %280 = @func_7596() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) */;
  %281 = %280.0;
  (%281,)
}

def @func_4478() -> (Tensor[(10, 16, 13), float32],) {
  %282 = @func_1745() /* ty=(Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64], Tensor[(2, 11, 5), bool], Tensor[(11, 10), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), int64]) */;
  %283 = %282.0;
  (%283,)
}

def @main(%var_12571: Tensor[(864), uint64], %var_12572: Tensor[(832), float32], %var_12575: Tensor[(864), uint64], %var_12588: Tensor[(300), float32]) -> (Tensor[(10, 16, 13), float32], Tensor[(2, 720), float32], Tensor[(10, 16, 13), uint32], Tensor[(8, 13, 8), float64], Tensor[(832), float32], Tensor[(864), float32], Tensor[(300), float32], Tensor[(300), float32], Tensor[(864), bool]) {
  %284 = @func_5312() /* ty=(Tensor[(10, 16, 13), float32],) */;
  %285 = @func_11910() /* ty=(Tensor[(2, 720), float32], Tensor[(10, 16, 13), int64]) */;
  %286 = @func_12293() /* ty=(Tensor[(10, 16, 13), uint32],) */;
  %287 = cast(%var_12571, dtype="uint64") /* ty=Tensor[(864), uint64] */;
  %288 = cast(%var_12572, dtype="float32") /* ty=Tensor[(832), float32] */;
  %289 = reshape(%287, newshape=[864]) /* ty=Tensor[(864), uint64] */;
  %290 = reshape(%288, newshape=[832]) /* ty=Tensor[(832), float32] */;
  %291 = @func_11686(%289, %290) /* ty=(Tensor[(10, 16, 13), int64], Tensor[(9, 12, 8), uint64], Tensor[(864), uint64], Tensor[(8, 13, 8), float64], Tensor[(832), float32]) */;
  %292 = cast(%var_12575, dtype="float32") /* ty=Tensor[(864), float32] */;
  %293 = shape_of(%var_12571, dtype="int32") /* ty=Tensor[(1), int32] */;
  %294 = cast(%var_12571, dtype="float32") /* ty=Tensor[(864), float32] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?), float32] */;
  %296 = cast(%var_12588, dtype="float32") /* ty=Tensor[(300), float32] */;
  %297 = reshape(%296, newshape=[300]) /* ty=Tensor[(300), float32] */;
  %298 = @func_3908(%297) /* ty=(Tensor[(10, 16, 13), int64], Tensor[(300), float32], Tensor[(300), float32]) */;
  %299 = cast(%var_12571, dtype="float32") /* ty=Tensor[(864), float32] */;
  %300 = tan(%299) /* ty=Tensor[(864), float32] */;
  %301 = cast(%300, dtype="bool") /* ty=Tensor[(864), bool] */;
  %302 = shape_of(%var_12575, dtype="int32") /* ty=Tensor[(1), int32] */;
  %303 = cast(%var_12575, dtype="bool") /* ty=Tensor[(864), bool] */;
  %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?), bool] */;
  %305 = %284.0;
  %306 = %285.0;
  %307 = %286.0;
  %308 = %291.3;
  %309 = floor_mod(%294, %295) /* ty=Tensor[(864), float32] */;
  %310 = %298.1;
  %311 = equal(%303, %304) /* ty=Tensor[(864), bool] */;
  (%305, %306, %307, %308, %var_12572, %309, %310, %var_12588, %311)
}

def @func_3071() -> (Tensor[(10, 16, 13), int64],) {
  %312 = @func_2052() /* ty=Tensor[(10, 16, 13), int64] */;
  (%312,)
}

def @func_9592(%var_9498: Tensor[(2, 12, 2), float64], %var_9568: Tensor[(2, 12, 2), float32]) -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(2, 12, 2), bool], Tensor[(10, 16, 13), float64], Tensor[(2, 12, 2), bool], Tensor[(10, 16, 13), uint32], Tensor[(2, 12, 2), float32], Tensor[(2, 12, 2), int8]) {
  %313 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 12, 2), float64] */, dtype="float32") /* ty=Tensor[(2, 12, 2), float32] */;
  %314 = atan(%313) /* ty=Tensor[(2, 12, 2), float32] */;
  %315 = cast(%var_9498, dtype="float32") /* ty=Tensor[(2, 12, 2), float32] */;
  %316 = shape_of(%314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %317 = cast(%314, dtype="float32") /* ty=Tensor[(2, 12, 2), float32] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %319 = power(%317, %318) /* ty=Tensor[(2, 12, 2), float32] */;
  %320 = cast(%314, dtype="uint32") /* ty=Tensor[(2, 12, 2), uint32] */;
  %321 = shape_of(%319, dtype="int32") /* ty=Tensor[(3), int32] */;
  %322 = cast(%319, dtype="uint32") /* ty=Tensor[(2, 12, 2), uint32] */;
  %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %324 = left_shift(%322, %323) /* ty=Tensor[(2, 12, 2), uint32] */;
  %325 = cast(%319, dtype="bool") /* ty=Tensor[(2, 12, 2), bool] */;
  %326 = shape_of(%324, dtype="int32") /* ty=Tensor[(3), int32] */;
  %327 = cast(%324, dtype="bool") /* ty=Tensor[(2, 12, 2), bool] */;
  %328 = dyn.reshape(%325, %326, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %329 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 12, 2), float64] */, dtype="float64") /* ty=Tensor[(2, 12, 2), float64] */;
  %330 = shape_of(%var_9498, dtype="int32") /* ty=Tensor[(3), int32] */;
  %331 = cast(%var_9498, dtype="float64") /* ty=Tensor[(2, 12, 2), float64] */;
  %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %333 = floor_mod(%331, %332) /* ty=Tensor[(2, 12, 2), float64] */;
  %334 = cast(%324, dtype="bool") /* ty=Tensor[(2, 12, 2), bool] */;
  %335 = shape_of(%333, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(%333, dtype="bool") /* ty=Tensor[(2, 12, 2), bool] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %338 = @func_5816() /* ty=(Tensor[(10, 16, 13), uint32],) */;
  %339 = cast(%314, dtype="float32") /* ty=Tensor[(2, 12, 2), float32] */;
  %340 = cast(%var_9568, dtype="int8") /* ty=Tensor[(2, 12, 2), int8] */;
  %341 = shape_of(%314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %342 = cast(%314, dtype="int8") /* ty=Tensor[(2, 12, 2), int8] */;
  %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %344 = @func_4000() /* ty=Tensor[(10, 16, 13), uint32] */;
  %345 = @func_1408() /* ty=Tensor[(10, 16, 13), int64] */;
  %346 = not_equal(%327, %328) /* ty=Tensor[(2, 12, 2), bool] */;
  %347 = @func_7953() /* ty=Tensor[(10, 16, 13), float64] */;
  %348 = greater(%336, %337) /* ty=Tensor[(2, 12, 2), bool] */;
  %349 = %338.0;
  %350 = erf(%339) /* ty=Tensor[(2, 12, 2), float32] */;
  %351 = maximum(%342, %343) /* ty=Tensor[(2, 12, 2), int8] */;
  (%344, %345, %346, %347, %348, %349, %350, %351)
}

def @func_6789() -> Tensor[(10, 16, 13), uint32] {
  @func_4000() /* ty=Tensor[(10, 16, 13), uint32] */
}

def @func_8375() -> (Tensor[(10, 16, 13), int64],) {
  %352 = @func_4650() /* ty=Tensor[(10, 16, 13), int64] */;
  (%352,)
}

def @func_6091() -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64]) {
  %353 = @func_3785() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32]) */;
  %354 = %353.1;
  %355 = @func_4650() /* ty=Tensor[(10, 16, 13), int64] */;
  (%354, %355)
}

def @func_11625() -> (Tensor[(10, 16, 13), uint32],) {
  %356 = @func_4607() /* ty=Tensor[(10, 16, 13), uint32] */;
  (%356,)
}

def @func_10755() -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64]) {
  %357 = @func_6036() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %358 = @func_1937() /* ty=Tensor[(10, 16, 13), uint32] */;
  %359 = @func_2394() /* ty=Tensor[(10, 16, 13), uint32] */;
  %360 = %357.0;
  (%358, %359, %360)
}

def @func_3842() -> Tensor[(10, 16, 13), float64] {
  %361 = @func_2870() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %362 = %361.0;
  %363 = cast(%362, dtype="float64") /* ty=Tensor[(10, 16, 13), float64] */;
  cosh(%363) /* ty=Tensor[(10, 16, 13), float64] */
}

def @func_7509() -> (Tensor[(10, 16, 13), float32],) {
  %364 = @func_6451() /* ty=(Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32]) */;
  %365 = %364.0;
  (%365,)
}

def @func_8340() -> Tensor[(2, 11, 5), float64] {
  %366 = @func_1745() /* ty=(Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64], Tensor[(2, 11, 5), bool], Tensor[(11, 10), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), int64]) */;
  %366.4
}

def @func_8309() -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32]) {
  %367 = @func_7596() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) */;
  %368 = @func_3954() /* ty=(Tensor[(10, 16, 13), uint32],) */;
  %369 = %367.1;
  %370 = %368.0;
  (%369, %370)
}

def @func_7316() -> (Tensor[(300), float32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), float32], Tensor[(2, 6, 16), float32], Tensor[(10, 16, 13), float64]) {
  %371 = @func_2424() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(300), float32], Tensor[(10, 16, 13), int64]) */;
  %372 = @func_1191() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %373 = @func_4478() /* ty=(Tensor[(10, 16, 13), float32],) */;
  %374 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 6, 16), float32] */, dtype="float32") /* ty=Tensor[(2, 6, 16), float32] */;
  %375 = cos(%374) /* ty=Tensor[(2, 6, 16), float32] */;
  %376 = cast(%375, dtype="float32") /* ty=Tensor[(2, 6, 16), float32] */;
  %377 = @func_6731() /* ty=(Tensor[(10, 16, 13), float64], Tensor[(10, 16, 13), uint32]) */;
  %378 = %371.1;
  %379 = %372.0;
  %380 = %373.0;
  %381 = @func_1469() /* ty=Tensor[(10, 16, 13), int64] */;
  %382 = @func_4453() /* ty=Tensor[(10, 16, 13), float32] */;
  %383 = atan(%376) /* ty=Tensor[(2, 6, 16), float32] */;
  %384 = %377.0;
  (%378, %379, %380, %381, %382, %383, %384)
}

def @func_2585(%var_2560: Tensor[(9, 10, 5), uint32]) -> Tensor[(9, 10, 5), uint32] {
  %385 = cast(%var_2560, dtype="uint32") /* ty=Tensor[(9, 10, 5), uint32] */;
  %386 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(9, 10, 5), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %387 = cast(meta[relay.Constant][23] /* ty=Tensor[(9, 10, 5), uint32] */, dtype="uint32") /* ty=Tensor[(9, 10, 5), uint32] */;
  %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  minimum(%387, %388) /* ty=Tensor[(9, 10, 5), uint32] */
}

def @func_8126() -> (Tensor[(10, 16, 13), int64],) {
  %389 = @func_7869() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64]) */;
  %390 = %389.1;
  (%390,)
}

def @func_9632(%var_9626: Tensor[(3, 11, 7), float32], %var_9627: Tensor[(3, 11, 7), float32]) -> (Tensor[(3, 11, 7), float32],) {
  %391 = cast(%var_9627, dtype="float32") /* ty=Tensor[(3, 11, 7), float32] */;
  %392 = shape_of(%var_9626, dtype="int32") /* ty=Tensor[(3), int32] */;
  %393 = cast(%var_9626, dtype="float32") /* ty=Tensor[(3, 11, 7), float32] */;
  %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %395 = mod(%393, %394) /* ty=Tensor[(3, 11, 7), float32] */;
  (%395,)
}

def @func_11522() -> Tensor[(10, 16, 13), uint32] {
  @func_4000() /* ty=Tensor[(10, 16, 13), uint32] */
}

def @func_1745() -> (Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64], Tensor[(2, 11, 5), bool], Tensor[(11, 10), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), int64]) {
  %396 = @func_1191() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %397 = cast(meta[relay.Constant][24] /* ty=Tensor[(11, 10), float64] */, dtype="float64") /* ty=Tensor[(11, 10), float64] */;
  %398 = reshape(%397, newshape=[2, 11, 5]) /* ty=Tensor[(2, 11, 5), float64] */;
  %399 = @func_661(%398) /* ty=(Tensor[(2, 11, 5), bool], Tensor[(2, 11, 5), float32], Tensor[(2, 11, 5), float64]) */;
  %400 = cast(meta[relay.Constant][24] /* ty=Tensor[(11, 10), float64] */, dtype="float64") /* ty=Tensor[(11, 10), float64] */;
  %401 = reshape(%400, newshape=[2, 11, 5]) /* ty=Tensor[(2, 11, 5), float64] */;
  %402 = @func_661(%401) /* ty=(Tensor[(2, 11, 5), bool], Tensor[(2, 11, 5), float32], Tensor[(2, 11, 5), float64]) */;
  %403 = @func_1643() /* ty=Tensor[(10, 16, 13), float32] */;
  %404 = %396.0;
  %405 = %399.0;
  %406 = %402.2;
  %407 = @func_1408() /* ty=Tensor[(10, 16, 13), int64] */;
  (%403, %404, %405, meta[relay.Constant][24] /* ty=Tensor[(11, 10), float64] */, %406, %407)
}

def @func_7978() -> Tensor[(10, 16, 13), int64] {
  @func_4769() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_7706(%var_7703: Tensor[(300), float32]) -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), float64], Tensor[(10, 16, 13), uint32], Tensor[(5, 4, 15), float32], Tensor[(300), float32]) {
  %408 = @func_2727() /* ty=(Tensor[(300), float32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64]) */;
  %409 = @func_6548() /* ty=(Tensor[(10, 16, 13), float64],) */;
  %410 = cast(%var_7703, dtype="float32") /* ty=Tensor[(300), float32] */;
  %411 = cast(%var_7703, dtype="float32") /* ty=Tensor[(300), float32] */;
  %412 = reshape(%410, newshape=[5, 4, 15]) /* ty=Tensor[(5, 4, 15), float32] */;
  %413 = reshape(%411, newshape=[5, 4, 15]) /* ty=Tensor[(5, 4, 15), float32] */;
  %414 = @func_1100(%412, %413) /* ty=(Tensor[(5, 4, 15), float32],) */;
  %415 = @func_2394() /* ty=Tensor[(10, 16, 13), uint32] */;
  %416 = %408.3;
  %417 = %409.0;
  %418 = @func_4000() /* ty=Tensor[(10, 16, 13), uint32] */;
  %419 = %414.0;
  (%415, %416, %417, %418, %419, %var_7703)
}

def @func_6207(%var_6188: Tensor[(3, 14, 4), float32], %var_6189: Tensor[(3, 14, 4), float32]) -> (Tensor[(3, 14, 4), float32],) {
  %420 = cast(%var_6189, dtype="float32") /* ty=Tensor[(3, 14, 4), float32] */;
  %421 = shape_of(%var_6188, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(%var_6188, dtype="float32") /* ty=Tensor[(3, 14, 4), float32] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %424 = floor_mod(%422, %423) /* ty=Tensor[(3, 14, 4), float32] */;
  (%424,)
}

def @func_4298(%var_4220: Tensor[(234), float64]) -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64], Tensor[(728), float32], Tensor[(624), uint64], Tensor[(10, 16, 13), float64], Tensor[(78), float64], Tensor[(300), float32], Tensor[(300), float32], Tensor[(234), int64], Tensor[(10, 16, 13), float32], Tensor[(2, 720), float32], Tensor[(10, 16, 13), uint32]) {
  %425 = @func_1191() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %426 = cast(meta[relay.Constant][25] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
  %427 = reshape(%426, newshape=[728]) /* ty=Tensor[(728), float32] */;
  %428 = @func_3501(%427) /* ty=(Tensor[(10, 16, 13), int64], Tensor[(13, 4, 14), float32], Tensor[(78), float64], Tensor[(728), float32], Tensor[(234), float64]) */;
  %429 = cast(meta[relay.Constant][26] /* ty=Tensor[(624), uint64] */, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %430 = cast(meta[relay.Constant][26] /* ty=Tensor[(624), uint64] */, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %431 = reshape(%429, newshape=[6, 8, 13]) /* ty=Tensor[(6, 8, 13), uint64] */;
  %432 = reshape(%430, newshape=[6, 8, 13]) /* ty=Tensor[(6, 8, 13), uint64] */;
  %433 = @func_2170(%431, %432) /* ty=(Tensor[(6, 8, 13), uint64], Tensor[(10, 16, 13), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), uint32]) */;
  %434 = %433.1;
  %435 = cast(%434, dtype="float64") /* ty=Tensor[(10, 16, 13), float64] */;
  %436 = cast(meta[relay.Constant][28] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %437 = reshape(%436, newshape=[300]) /* ty=Tensor[(300), float32] */;
  %438 = @func_3908(%437) /* ty=(Tensor[(10, 16, 13), int64], Tensor[(300), float32], Tensor[(300), float32]) */;
  %439 = cast(meta[relay.Constant][27] /* ty=Tensor[(78), float64] */, dtype="float64") /* ty=Tensor[(78), float64] */;
  %440 = cast(meta[relay.Constant][25] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
  %441 = cast(%var_4220, dtype="float64") /* ty=Tensor[(234), float64] */;
  %442 = reshape(%439, newshape=[1, 6, 13]) /* ty=Tensor[(1, 6, 13), float64] */;
  %443 = reshape(%440, newshape=[728]) /* ty=Tensor[(728), float32] */;
  %444 = reshape(%441, newshape=[3, 6, 13]) /* ty=Tensor[(3, 6, 13), float64] */;
  %445 = @func_311(%442, %443, %444) /* ty=(Tensor[(?, 6, 13), bool], Tensor[(13, 4, 14), float32], Tensor[(728), float32], Tensor[(13, 4, 14), float32], Tensor[(3, 6, 13), bool], Tensor[(13, 4, 14), float32]) */;
  %446 = %445.4;
  %447 = cast(%446, dtype="int64") /* ty=Tensor[(3, 6, 13), int64] */;
  %448 = shape_of(%var_4220, dtype="int32") /* ty=Tensor[(1), int32] */;
  %449 = cast(%var_4220, dtype="int64") /* ty=Tensor[(234), int64] */;
  %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?), int64] */;
  %451 = @func_1191() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %452 = %451.0;
  %453 = cast(%452, dtype="float32") /* ty=Tensor[(10, 16, 13), float32] */;
  %454 = @func_1918() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(2, 720), float32]) */;
  %455 = @func_3785() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32]) */;
  %456 = %425.0;
  %457 = %428.0;
  %458 = asinh(%435) /* ty=Tensor[(10, 16, 13), float64] */;
  %459 = %438.1;
  %460 = left_shift(%449, %450) /* ty=Tensor[(234), int64] */;
  %461 = acosh(%453) /* ty=Tensor[(10, 16, 13), float32] */;
  %462 = %454.1;
  %463 = %455.1;
  (%456, %457, meta[relay.Constant][25] /* ty=Tensor[(728), float32] */, meta[relay.Constant][26] /* ty=Tensor[(624), uint64] */, %458, meta[relay.Constant][27] /* ty=Tensor[(78), float64] */, %459, meta[relay.Constant][28] /* ty=Tensor[(300), float32] */, %460, %461, %462, %463)
}

def @func_2449() -> Tensor[(10, 16, 13), int64] {
  @func_1299() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_4688(%var_4675: Tensor[(3, 2, 13), uint16], %var_4676: Tensor[(3, 2, 13), uint16]) -> (Tensor[(3, 2, 13), uint16], Tensor[(13, 5, 6), float32], Tensor[(390), float32]) {
  %464 = cast(%var_4676, dtype="uint16") /* ty=Tensor[(3, 2, 13), uint16] */;
  %465 = shape_of(%var_4675, dtype="int32") /* ty=Tensor[(3), int32] */;
  %466 = cast(%var_4675, dtype="uint16") /* ty=Tensor[(3, 2, 13), uint16] */;
  %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %468 = cast(meta[relay.Constant][29] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %469 = reshape(%468, newshape=[13, 5, 6]) /* ty=Tensor[(13, 5, 6), float32] */;
  %470 = right_shift(%466, %467) /* ty=Tensor[(3, 2, 13), uint16] */;
  %471 = @func_2651(%469) /* ty=Tensor[(13, 5, 6), float32] */;
  (%470, %471, meta[relay.Constant][29] /* ty=Tensor[(390), float32] */)
}

def @func_12490(%var_12477: Tensor[(8, 15, 5), uint16]) -> (Tensor[(8, 15, 5), uint16], Tensor[(10, 16, 13), int64]) {
  %472 = cast(meta[relay.Constant][30] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %473 = cast(%var_12477, dtype="uint16") /* ty=Tensor[(8, 15, 5), uint16] */;
  %474 = @func_5009() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %475 = right_shift(%472, %473) /* ty=Tensor[(8, 15, 5), uint16] */;
  %476 = %474.0;
  (%475, %476)
}

def @func_12397() -> (Tensor[(10, 16, 13), int64], Tensor[(2, 720), float32], Tensor[(10, 16, 13), int64]) {
  %477 = @func_10986() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64], Tensor[(728), float32]) */;
  %478 = @func_1918() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(2, 720), float32]) */;
  %479 = @func_2870() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %480 = %477.0;
  %481 = %478.1;
  %482 = %479.0;
  (%480, %481, %482)
}

def @func_2370() -> (Tensor[(10, 16, 13), uint32], Tensor[(5, 4, 15), float32], Tensor[(300), float32]) {
  %483 = @func_1677() /* ty=(Tensor[(10, 16, 13), uint32],) */;
  %484 = cast(meta[relay.Constant][31] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %485 = cast(meta[relay.Constant][31] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %486 = reshape(%484, newshape=[5, 4, 15]) /* ty=Tensor[(5, 4, 15), float32] */;
  %487 = reshape(%485, newshape=[5, 4, 15]) /* ty=Tensor[(5, 4, 15), float32] */;
  %488 = @func_1100(%486, %487) /* ty=(Tensor[(5, 4, 15), float32],) */;
  %489 = %483.0;
  %490 = %488.0;
  (%489, %490, meta[relay.Constant][31] /* ty=Tensor[(300), float32] */)
}

def @func_10036() -> (Tensor[(10, 16, 13), int64], Tensor[(2, 720), uint8]) {
  %491 = @func_3071() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %492 = @func_3145() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(2, 720), float32]) */;
  %493 = %492.1;
  %494 = cast(%493, dtype="float64") /* ty=Tensor[(2, 720), float64] */;
  %495 = log(%494) /* ty=Tensor[(2, 720), float64] */;
  %496 = cast(%493, dtype="uint8") /* ty=Tensor[(2, 720), uint8] */;
  %497 = shape_of(%495, dtype="int32") /* ty=Tensor[(2), int32] */;
  %498 = cast(%495, dtype="uint8") /* ty=Tensor[(2, 720), uint8] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %500 = %491.0;
  %501 = maximum(%498, %499) /* ty=Tensor[(2, 720), uint8] */;
  (%500, %501)
}

def @func_4549() -> Tensor[(10, 16, 13), int64] {
  @func_4534() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_9894(%var_9859: Tensor[(15, 7, 7), bool]) -> (Tensor[(15, 7, 7), bool], Tensor[(10, 16, 13), float64], Tensor[(15, 7, 7), float32], Tensor[(3, 13, 8), float64]) {
  %502 = cast(meta[relay.Constant][32] /* ty=Tensor[(15, 7, 7), bool] */, dtype="bool") /* ty=Tensor[(15, 7, 7), bool] */;
  %503 = shape_of(%var_9859, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(%var_9859, dtype="bool") /* ty=Tensor[(15, 7, 7), bool] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %506 = cast(meta[relay.Constant][32] /* ty=Tensor[(15, 7, 7), bool] */, dtype="float32") /* ty=Tensor[(15, 7, 7), float32] */;
  %507 = shape_of(%var_9859, dtype="int32") /* ty=Tensor[(3), int32] */;
  %508 = cast(%var_9859, dtype="float32") /* ty=Tensor[(15, 7, 7), float32] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %510 = logical_or(%504, %505) /* ty=Tensor[(15, 7, 7), bool] */;
  %511 = @func_7953() /* ty=Tensor[(10, 16, 13), float64] */;
  %512 = mod(%508, %509) /* ty=Tensor[(15, 7, 7), float32] */;
  %513 = @func_8531() /* ty=Tensor[(3, 13, 8), float64] */;
  (%510, %511, %512, %513)
}

def @func_8705() -> (Tensor[(10, 16, 13), int64],) {
  %514 = @func_3071() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %515 = %514.0;
  (%515,)
}

def @func_10139() -> (Tensor[(2, 720), float32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) {
  %516 = @func_8554() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(2, 720), float32]) */;
  %517 = @func_9195() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) */;
  %518 = @func_2870() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %519 = %516.1;
  %520 = %517.1;
  %521 = %518.0;
  (%519, %520, %521)
}

def @func_3699(%var_3687: Tensor[(8, 15, 6), float32]) -> (Tensor[(8, 15, 6), float32], Tensor[(300), float32]) {
  %522 = cast(%var_3687, dtype="float32") /* ty=Tensor[(8, 15, 6), float32] */;
  %523 = @func_2424() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(300), float32], Tensor[(10, 16, 13), int64]) */;
  %524 = log2(%522) /* ty=Tensor[(8, 15, 6), float32] */;
  %525 = %523.1;
  (%524, %525)
}

def @func_10436() -> (Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64]) {
  %526 = @func_3184() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), float32]) */;
  %527 = @func_10036() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(2, 720), uint8]) */;
  %528 = %526.1;
  %529 = %527.0;
  (%528, %529)
}

def @func_8940(%var_8898: Tensor[(12, 4, 4), int32], %var_8899: Tensor[(12, 4, 4), int32], %var_8916: Tensor[(12, 4, 4), int32], %var_8927: Tensor[(240), float32]) -> (Tensor[(12, 4, 4), bool], Tensor[(5, 4, 15), float32], Tensor[(12, 4, 4), int16], Tensor[(10, 16, 13), uint32], Tensor[(240), float32]) {
  %530 = cast(%var_8899, dtype="bool") /* ty=Tensor[(12, 4, 4), bool] */;
  %531 = shape_of(%var_8898, dtype="int32") /* ty=Tensor[(3), int32] */;
  %532 = cast(%var_8898, dtype="bool") /* ty=Tensor[(12, 4, 4), bool] */;
  %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %534 = @func_4134() /* ty=(Tensor[(5, 4, 15), float32],) */;
  %535 = cast(%var_8916, dtype="int16") /* ty=Tensor[(12, 4, 4), int16] */;
  %536 = shape_of(%var_8899, dtype="int32") /* ty=Tensor[(3), int32] */;
  %537 = cast(%var_8899, dtype="int16") /* ty=Tensor[(12, 4, 4), int16] */;
  %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %539 = cast(%var_8927, dtype="float32") /* ty=Tensor[(240), float32] */;
  %540 = reshape(%539, newshape=[16, 1, 15]) /* ty=Tensor[(16, 1, 15), float32] */;
  %541 = @func_5940(%540) /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(16, ?, 15), float64]) */;
  %542 = not_equal(%532, %533) /* ty=Tensor[(12, 4, 4), bool] */;
  %543 = %534.0;
  %544 = maximum(%537, %538) /* ty=Tensor[(12, 4, 4), int16] */;
  %545 = %541.0;
  (%542, %543, %544, %545, %var_8927)
}

def @func_3210(%var_3200: Tensor[(4, 1, 10), float32]) -> (Tensor[(4, 1, 10), float32], Tensor[(10, 16, 13), uint32], Tensor[(624), uint64], Tensor[(10, 16, 13), bool], Tensor[(300), float32]) {
  %546 = cast(%var_3200, dtype="float32") /* ty=Tensor[(4, 1, 10), float32] */;
  %547 = cast(meta[relay.Constant][33] /* ty=Tensor[(624), uint64] */, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %548 = cast(meta[relay.Constant][33] /* ty=Tensor[(624), uint64] */, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %549 = reshape(%547, newshape=[6, 8, 13]) /* ty=Tensor[(6, 8, 13), uint64] */;
  %550 = reshape(%548, newshape=[6, 8, 13]) /* ty=Tensor[(6, 8, 13), uint64] */;
  %551 = @func_2170(%549, %550) /* ty=(Tensor[(6, 8, 13), uint64], Tensor[(10, 16, 13), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), uint32]) */;
  %552 = cast(meta[relay.Constant][34] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %553 = reshape(%552, newshape=[300]) /* ty=Tensor[(300), float32] */;
  %554 = @func_2495(%553) /* ty=(Tensor[(10, 16, 13), bool], Tensor[(5, 4, 15), float32], Tensor[(300), float32]) */;
  %555 = log(%546) /* ty=Tensor[(4, 1, 10), float32] */;
  %556 = %551.3;
  %557 = %554.0;
  (%555, %556, meta[relay.Constant][33] /* ty=Tensor[(624), uint64] */, %557, meta[relay.Constant][34] /* ty=Tensor[(300), float32] */)
}

def @func_9707() -> (Tensor[(10, 16, 13), uint32],) {
  %558 = @func_5186() /* ty=(Tensor[(10, 16, 13), uint32],) */;
  %559 = %558.0;
  (%559,)
}

def @func_6451() -> (Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32]) {
  %560 = @func_4478() /* ty=(Tensor[(10, 16, 13), float32],) */;
  %561 = @func_3785() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32]) */;
  %562 = %560.0;
  %563 = %561.0;
  %564 = @func_2394() /* ty=Tensor[(10, 16, 13), uint32] */;
  (%562, %563, %564)
}

def @func_6548() -> (Tensor[(10, 16, 13), float64],) {
  %565 = @func_6490() /* ty=(Tensor[(10, 16, 13), float64],) */;
  %566 = %565.0;
  (%566,)
}

def @func_5312() -> (Tensor[(10, 16, 13), float32],) {
  %567 = @func_1643() /* ty=Tensor[(10, 16, 13), float32] */;
  (%567,)
}

def @func_5203() -> Tensor[(10, 16, 13), int64] {
  %568 = @func_3071() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %568.0
}

def @func_11603() -> (Tensor[(10, 16, 13), int64],) {
  %569 = @func_6021() /* ty=Tensor[(10, 16, 13), int64] */;
  (%569,)
}

def @func_11311(%var_11298: Tensor[(11, 15, 11), float64]) -> (Tensor[(11, 15, 11), float64], Tensor[(10, 16, 13), float32]) {
  %570 = cast(%var_11298, dtype="float64") /* ty=Tensor[(11, 15, 11), float64] */;
  %571 = @func_4478() /* ty=(Tensor[(10, 16, 13), float32],) */;
  %572 = log2(%570) /* ty=Tensor[(11, 15, 11), float64] */;
  %573 = %571.0;
  (%572, %573)
}

def @func_11995() -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32]) {
  %574 = @func_8309() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32]) */;
  %575 = @func_11218() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %576 = @func_11835() /* ty=(Tensor[(10, 16, 13), uint32],) */;
  %577 = %574.0;
  %578 = %575.0;
  %579 = %576.0;
  (%577, %578, %579)
}

def @func_11067() -> (Tensor[(10, 16, 13), float64],) {
  %580 = @func_6731() /* ty=(Tensor[(10, 16, 13), float64], Tensor[(10, 16, 13), uint32]) */;
  %581 = %580.0;
  (%581,)
}

def @func_2170(%var_2134: Tensor[(6, 8, 13), uint64], %var_2135: Tensor[(6, 8, 13), uint64]) -> (Tensor[(6, 8, 13), uint64], Tensor[(10, 16, 13), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), uint32]) {
  %582 = cast(%var_2135, dtype="uint64") /* ty=Tensor[(6, 8, 13), uint64] */;
  %583 = shape_of(%var_2134, dtype="int32") /* ty=Tensor[(3), int32] */;
  %584 = cast(%var_2134, dtype="uint64") /* ty=Tensor[(6, 8, 13), uint64] */;
  %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %586 = @func_1643() /* ty=Tensor[(10, 16, 13), float32] */;
  %587 = cast(meta[relay.Constant][35] /* ty=Tensor[(10, 16, 13), float32] */, dtype="float64") /* ty=Tensor[(10, 16, 13), float64] */;
  %588 = shape_of(%586, dtype="int32") /* ty=Tensor[(3), int32] */;
  %589 = cast(%586, dtype="float64") /* ty=Tensor[(10, 16, 13), float64] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %591 = @func_1745() /* ty=(Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64], Tensor[(2, 11, 5), bool], Tensor[(11, 10), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), int64]) */;
  %592 = @func_1677() /* ty=(Tensor[(10, 16, 13), uint32],) */;
  %593 = logical_xor(%584, %585) /* ty=Tensor[(6, 8, 13), uint64] */;
  %594 = mod(%589, %590) /* ty=Tensor[(10, 16, 13), float64] */;
  %595 = %591.4;
  %596 = %592.0;
  (%593, %594, %595, %596)
}

def @func_5186() -> (Tensor[(10, 16, 13), uint32],) {
  %597 = @func_2394() /* ty=Tensor[(10, 16, 13), uint32] */;
  (%597,)
}

def @func_11483(%var_11387: Tensor[(300), float32]) -> (Tensor[(10, 16, 13), int64], Tensor[(300), float32], Tensor[(300), float32], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(2, 720), float64], Tensor[(10, 16, 13), float64]) {
  %598 = @func_7792() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) */;
  %599 = cast(%var_11387, dtype="float32") /* ty=Tensor[(300), float32] */;
  %600 = reshape(%599, newshape=[300]) /* ty=Tensor[(300), float32] */;
  %601 = @func_3908(%600) /* ty=(Tensor[(10, 16, 13), int64], Tensor[(300), float32], Tensor[(300), float32]) */;
  %602 = @func_1918() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(2, 720), float32]) */;
  %603 = %602.1;
  %604 = cast(%603, dtype="float64") /* ty=Tensor[(2, 720), float64] */;
  %605 = sin(%604) /* ty=Tensor[(2, 720), float64] */;
  %606 = cast(%605, dtype="float64") /* ty=Tensor[(2, 720), float64] */;
  %607 = @func_6548() /* ty=(Tensor[(10, 16, 13), float64],) */;
  %608 = %598.0;
  %609 = %601.2;
  %610 = @func_4607() /* ty=Tensor[(10, 16, 13), uint32] */;
  %611 = @func_1299() /* ty=Tensor[(10, 16, 13), int64] */;
  %612 = asinh(%606) /* ty=Tensor[(2, 720), float64] */;
  %613 = %607.0;
  (%608, %609, %var_11387, %610, %611, %612, %613)
}

def @func_10555() -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) {
  %614 = @func_3034() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %615 = %614.0;
  %616 = @func_7208() /* ty=Tensor[(10, 16, 13), int64] */;
  (%615, %616)
}

def @func_2495(%var_2480: Tensor[(300), float32]) -> (Tensor[(10, 16, 13), bool], Tensor[(5, 4, 15), float32], Tensor[(300), float32]) {
  %617 = @func_1677() /* ty=(Tensor[(10, 16, 13), uint32],) */;
  %618 = %617.0;
  %619 = @func_2052() /* ty=Tensor[(10, 16, 13), int64] */;
  %620 = cast(%619, dtype="bool") /* ty=Tensor[(10, 16, 13), bool] */;
  %621 = shape_of(%618, dtype="int32") /* ty=Tensor[(3), int32] */;
  %622 = cast(%618, dtype="bool") /* ty=Tensor[(10, 16, 13), bool] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %624 = cast(%var_2480, dtype="float32") /* ty=Tensor[(300), float32] */;
  %625 = cast(%var_2480, dtype="float32") /* ty=Tensor[(300), float32] */;
  %626 = reshape(%624, newshape=[5, 4, 15]) /* ty=Tensor[(5, 4, 15), float32] */;
  %627 = reshape(%625, newshape=[5, 4, 15]) /* ty=Tensor[(5, 4, 15), float32] */;
  %628 = @func_1100(%626, %627) /* ty=(Tensor[(5, 4, 15), float32],) */;
  %629 = greater(%622, %623) /* ty=Tensor[(10, 16, 13), bool] */;
  %630 = %628.0;
  (%629, %630, %var_2480)
}

def @func_5470() -> Tensor[(10, 16, 13), uint32] {
  @func_5141() /* ty=Tensor[(10, 16, 13), uint32] */
}

def @func_8505() -> (Tensor[(10, 16, 13), int64],) {
  %631 = @func_6036() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %632 = %631.0;
  (%632,)
}

def @func_8785() -> (Tensor[(10, 16, 13), uint32], Tensor[(3, 13, 8), float64]) {
  %633 = @func_8531() /* ty=Tensor[(3, 13, 8), float64] */;
  %634 = cast(%633, dtype="float64") /* ty=Tensor[(3, 13, 8), float64] */;
  %635 = @func_6789() /* ty=Tensor[(10, 16, 13), uint32] */;
  %636 = tan(%634) /* ty=Tensor[(3, 13, 8), float64] */;
  (%635, %636)
}

def @func_8531() -> Tensor[(3, 13, 8), float64] {
  %637 = @func_6119() /* ty=(Tensor[(3, 13, 8), float64],) */;
  %637.0
}

def @func_9400(%var_9383: Tensor[(2080), int64]) -> (Tensor[(2, 11, 5), bool], Tensor[(300), float32], Tensor[(10, 16, 13), int64], Tensor[(2080), int64], Tensor[(10, 16, 13), int16], Tensor[(10, 16, 13), uint32]) {
  %638 = @func_1745() /* ty=(Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64], Tensor[(2, 11, 5), bool], Tensor[(11, 10), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), int64]) */;
  %639 = @func_2370() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(5, 4, 15), float32], Tensor[(300), float32]) */;
  %640 = cast(%var_9383, dtype="int64") /* ty=Tensor[(2080), int64] */;
  %641 = reshape(%640, newshape=[10, 16, 13]) /* ty=Tensor[(10, 16, 13), int64] */;
  %642 = @func_3585(%641) /* ty=(Tensor[(10, 16, 13), bool], Tensor[(10, 16, 13), int64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), int32]) */;
  %643 = %642.1;
  %644 = cast(%643, dtype="int64") /* ty=Tensor[(10, 16, 13), int64] */;
  %645 = reshape(%644, newshape=[10, 16, 13]) /* ty=Tensor[(10, 16, 13), int64] */;
  %646 = @func_4667(%645) /* ty=(Tensor[(10, 16, 13), int16],) */;
  %647 = @func_8785() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(3, 13, 8), float64]) */;
  %648 = %638.2;
  %649 = %639.2;
  %650 = %646.0;
  %651 = %647.0;
  (%648, %649, %643, %var_9383, %650, %651)
}

def @func_2870() -> (Tensor[(10, 16, 13), int64],) {
  %652 = @func_1408() /* ty=Tensor[(10, 16, 13), int64] */;
  (%652,)
}

def @func_5009() -> (Tensor[(10, 16, 13), int64],) {
  %653 = @func_3050() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %654 = %653.0;
  (%654,)
}

def @func_4534() -> Tensor[(10, 16, 13), int64] {
  %655 = @func_3145() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(2, 720), float32]) */;
  %655.0
}

def @func_12437() -> (Tensor[(10, 16, 13), int64],) {
  %656 = @func_6036() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %657 = %656.0;
  (%657,)
}

def @func_8604() -> Tensor[(10, 16, 13), int64] {
  %658 = @func_1191() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %658.0
}

def @func_4650() -> Tensor[(10, 16, 13), int64] {
  %659 = @func_1745() /* ty=(Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64], Tensor[(2, 11, 5), bool], Tensor[(11, 10), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), int64]) */;
  %659.1
}

def @func_3785() -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32]) {
  %660 = @func_2727() /* ty=(Tensor[(300), float32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64]) */;
  %661 = @func_1299() /* ty=Tensor[(10, 16, 13), int64] */;
  %662 = %660.2;
  (%661, %662)
}

def @func_9085() -> (Tensor[(10, 16, 13), float32],) {
  %663 = @func_4453() /* ty=Tensor[(10, 16, 13), float32] */;
  (%663,)
}

def @func_7953() -> Tensor[(10, 16, 13), float64] {
  @func_2776() /* ty=Tensor[(10, 16, 13), float64] */
}

def @func_6036() -> (Tensor[(10, 16, 13), int64],) {
  %664 = @func_3468() /* ty=Tensor[(10, 16, 13), int64] */;
  (%664,)
}

def @func_6119() -> (Tensor[(3, 13, 8), float64],) {
  %665 = cast(meta[relay.Constant][36] /* ty=Tensor[(3, 13, 8), float64] */, dtype="float64") /* ty=Tensor[(3, 13, 8), float64] */;
  %666 = asin(%665) /* ty=Tensor[(3, 13, 8), float64] */;
  (%666,)
}

def @func_11359(%var_11333: Tensor[(15, 10, 11), float32]) -> (Tensor[(15, 10, 11), float32], Tensor[(10, 16, 13), int64], Tensor[(3, 13, 8), float64]) {
  %667 = cast(%var_11333, dtype="float32") /* ty=Tensor[(15, 10, 11), float32] */;
  %668 = @func_1745() /* ty=(Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64], Tensor[(2, 11, 5), bool], Tensor[(11, 10), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), int64]) */;
  %669 = atanh(%667) /* ty=Tensor[(15, 10, 11), float32] */;
  %670 = %668.1;
  %671 = @func_8531() /* ty=Tensor[(3, 13, 8), float64] */;
  (%669, %670, %671)
}

def @func_3323() -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) {
  %672 = @func_2052() /* ty=Tensor[(10, 16, 13), int64] */;
  %673 = @func_1408() /* ty=Tensor[(10, 16, 13), int64] */;
  (%672, %673)
}

def @func_10089(%var_10084: Tensor[(400), float64], %var_10085: Tensor[(832), float32]) -> (Tensor[(10, 16, 13), float32], Tensor[(8, 13, 8), float64], Tensor[(400), float64], Tensor[(832), float32]) {
  %674 = @func_3184() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), float32]) */;
  %675 = cast(%var_10084, dtype="float64") /* ty=Tensor[(400), float64] */;
  %676 = cast(%var_10085, dtype="float32") /* ty=Tensor[(832), float32] */;
  %677 = reshape(%675, newshape=[10, 10, 4]) /* ty=Tensor[(10, 10, 4), float64] */;
  %678 = reshape(%676, newshape=[832]) /* ty=Tensor[(832), float32] */;
  %679 = @func_6848(%677, %678) /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(10, 10, 4), bool], Tensor[(8, 13, 8), float64], Tensor[(832), float32]) */;
  %680 = %674.1;
  %681 = %679.2;
  (%680, %681, %var_10084, %var_10085)
}

def @func_4769() -> Tensor[(10, 16, 13), int64] {
  @func_2640() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_311(%var_261: Tensor[(1, 6, 13), float64], %var_288: Tensor[(728), float32], %var_296: Tensor[(3, 6, 13), float64]) -> (Tensor[(?, 6, 13), bool], Tensor[(13, 4, 14), float32], Tensor[(728), float32], Tensor[(13, 4, 14), float32], Tensor[(3, 6, 13), bool], Tensor[(13, 4, 14), float32]) {
  %682 = cast(%var_261, dtype="float64") /* ty=Tensor[(1, 6, 13), float64] */;
  %683 = erf(%682) /* ty=Tensor[(1, 6, 13), float64] */;
  %684 = cast(%var_261, dtype="uint16") /* ty=Tensor[(1, 6, 13), uint16] */;
  %685 = shape_of(%683, dtype="int32") /* ty=Tensor[(3), int32] */;
  %686 = cast(%683, dtype="uint16") /* ty=Tensor[(1, 6, 13), uint16] */;
  %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %688 = bitwise_or(%686, %687) /* ty=Tensor[(?, 6, 13), uint16] */;
  %689 = cast(%688, dtype="bool") /* ty=Tensor[(?, 6, 13), bool] */;
  %690 = shape_of(%683, dtype="int32") /* ty=Tensor[(3), int32] */;
  %691 = cast(%683, dtype="bool") /* ty=Tensor[(1, 6, 13), bool] */;
  %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %693 = cast(%var_288, dtype="float32") /* ty=Tensor[(728), float32] */;
  %694 = reshape(%693, newshape=[13, 4, 14]) /* ty=Tensor[(13, 4, 14), float32] */;
  %695 = @func_175(%694) /* ty=(Tensor[(13, 4, 14), float32],) */;
  %696 = cast(%var_288, dtype="float32") /* ty=Tensor[(728), float32] */;
  %697 = reshape(%696, newshape=[13, 4, 14]) /* ty=Tensor[(13, 4, 14), float32] */;
  %698 = @func_175(%697) /* ty=(Tensor[(13, 4, 14), float32],) */;
  %699 = cast(%683, dtype="float64") /* ty=Tensor[(1, 6, 13), float64] */;
  %700 = acosh(%699) /* ty=Tensor[(1, 6, 13), float64] */;
  %701 = cast(%700, dtype="bool") /* ty=Tensor[(1, 6, 13), bool] */;
  %702 = cast(%var_296, dtype="bool") /* ty=Tensor[(3, 6, 13), bool] */;
  %703 = %695.0;
  %704 = cast(%703, dtype="float32") /* ty=Tensor[(13, 4, 14), float32] */;
  %705 = reshape(%704, newshape=[13, 4, 14]) /* ty=Tensor[(13, 4, 14), float32] */;
  %706 = @func_175(%705) /* ty=(Tensor[(13, 4, 14), float32],) */;
  %707 = greater(%691, %692) /* ty=Tensor[(?, 6, 13), bool] */;
  %708 = %698.0;
  %709 = less_equal(%701, %702) /* ty=Tensor[(3, 6, 13), bool] */;
  %710 = %706.0;
  (%707, %703, %var_288, %708, %709, %710)
}

def @func_8197() -> (Tensor[(5, 4, 15), float64],) {
  %711 = @func_5773() /* ty=(Tensor[(5, 4, 15), float64],) */;
  %712 = %711.0;
  (%712,)
}

def @func_2394() -> Tensor[(10, 16, 13), uint32] {
  %713 = @func_1677() /* ty=(Tensor[(10, 16, 13), uint32],) */;
  %713.0
}

def @func_1918() -> (Tensor[(10, 16, 13), int64], Tensor[(2, 720), float32]) {
  %714 = @func_1816() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32], Tensor[(15, 8, 12), float32], Tensor[(2, 720), float32]) */;
  %715 = @func_1469() /* ty=Tensor[(10, 16, 13), int64] */;
  %716 = %714.4;
  (%715, %716)
}

def @func_3184() -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), float32]) {
  %717 = @func_1469() /* ty=Tensor[(10, 16, 13), int64] */;
  %718 = @func_1643() /* ty=Tensor[(10, 16, 13), float32] */;
  (%717, %718)
}

def @func_8470(%var_8451: Tensor[(10, 16, 13), int64]) -> (Tensor[(10, 16, 13), float64], Tensor[(10, 16, 13), float64]) {
  %719 = @func_3323() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) */;
  %720 = %719.0;
  %721 = cast(%var_8451, dtype="float64") /* ty=Tensor[(10, 16, 13), float64] */;
  %722 = shape_of(%720, dtype="int32") /* ty=Tensor[(3), int32] */;
  %723 = cast(%720, dtype="float64") /* ty=Tensor[(10, 16, 13), float64] */;
  %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %725 = @func_2776() /* ty=Tensor[(10, 16, 13), float64] */;
  %726 = divide(%723, %724) /* ty=Tensor[(10, 16, 13), float64] */;
  (%725, %726)
}

def @func_4667(%var_4662: Tensor[(10, 16, 13), int64]) -> (Tensor[(10, 16, 13), int16],) {
  %727 = @func_4650() /* ty=Tensor[(10, 16, 13), int64] */;
  %728 = cast(%var_4662, dtype="int16") /* ty=Tensor[(10, 16, 13), int16] */;
  %729 = shape_of(%727, dtype="int32") /* ty=Tensor[(3), int32] */;
  %730 = cast(%727, dtype="int16") /* ty=Tensor[(10, 16, 13), int16] */;
  %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %732 = multiply(%730, %731) /* ty=Tensor[(10, 16, 13), int16] */;
  (%732,)
}

def @func_9326(%var_9300: Tensor[(9, 14, 8), float32], %var_9315: Tensor[(9, 14, 8), bool]) -> (Tensor[(10, 16, 13), int64], Tensor[(9, 14, 8), uint32]) {
  %733 = cast(%var_9300, dtype="float32") /* ty=Tensor[(9, 14, 8), float32] */;
  %734 = sinh(%733) /* ty=Tensor[(9, 14, 8), float32] */;
  %735 = cast(%734, dtype="bool") /* ty=Tensor[(9, 14, 8), bool] */;
  %736 = shape_of(%var_9300, dtype="int32") /* ty=Tensor[(3), int32] */;
  %737 = cast(%var_9300, dtype="bool") /* ty=Tensor[(9, 14, 8), bool] */;
  %738 = dyn.reshape(%735, %736, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %739 = less(%737, %738) /* ty=Tensor[(9, 14, 8), bool] */;
  %740 = cast(%var_9315, dtype="uint32") /* ty=Tensor[(9, 14, 8), uint32] */;
  %741 = shape_of(%739, dtype="int32") /* ty=Tensor[(3), int32] */;
  %742 = cast(%739, dtype="uint32") /* ty=Tensor[(9, 14, 8), uint32] */;
  %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %744 = @func_2640() /* ty=Tensor[(10, 16, 13), int64] */;
  %745 = minimum(%742, %743) /* ty=Tensor[(9, 14, 8), uint32] */;
  (%744, %745)
}

def @func_11218() -> (Tensor[(10, 16, 13), int64],) {
  %746 = @func_1191() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %747 = %746.0;
  (%747,)
}

def @func_5706() -> (Tensor[(16, 1, 15), float32],) {
  %748 = cast(meta[relay.Constant][37] /* ty=Tensor[(16, 1, 15), float32] */, dtype="float32") /* ty=Tensor[(16, 1, 15), float32] */;
  %749 = sinh(%748) /* ty=Tensor[(16, 1, 15), float32] */;
  (%749,)
}

def @func_12018() -> Tensor[(10, 16, 13), uint32] {
  %750 = @func_3115() /* ty=(Tensor[(2, 720), float32], Tensor[(10, 16, 13), uint32]) */;
  %750.1
}

def @func_9811(%var_9785: Tensor[(5, 16, 16), int32], %var_9786: Tensor[(5, 16, 16), int32]) -> Tensor[(5, 16, 16), int32] {
  %751 = cast(%var_9786, dtype="int32") /* ty=Tensor[(5, 16, 16), int32] */;
  %752 = shape_of(%var_9785, dtype="int32") /* ty=Tensor[(3), int32] */;
  %753 = cast(%var_9785, dtype="int32") /* ty=Tensor[(5, 16, 16), int32] */;
  %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  add(%753, %754) /* ty=Tensor[(5, 16, 16), int32] */
}

def @func_175(%var_165: Tensor[(13, 4, 14), float32]) -> (Tensor[(13, 4, 14), float32],) {
  %755 = cast(meta[relay.Constant][38] /* ty=Tensor[(13, 4, 14), float32] */, dtype="float32") /* ty=Tensor[(13, 4, 14), float32] */;
  %756 = shape_of(%var_165, dtype="int32") /* ty=Tensor[(3), int32] */;
  %757 = cast(%var_165, dtype="float32") /* ty=Tensor[(13, 4, 14), float32] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %759 = floor_mod(%757, %758) /* ty=Tensor[(13, 4, 14), float32] */;
  (%759,)
}

def @func_8810() -> (Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), uint32]) {
  %760 = @func_1677() /* ty=(Tensor[(10, 16, 13), uint32],) */;
  %761 = @func_8340() /* ty=Tensor[(2, 11, 5), float64] */;
  %762 = %760.0;
  (%761, %762)
}

def @func_11287() -> Tensor[(3, 13, 8), float64] {
  %763 = @func_6119() /* ty=(Tensor[(3, 13, 8), float64],) */;
  %763.0
}

def @func_1643() -> Tensor[(10, 16, 13), float32] {
  %764 = @func_1191() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %765 = %764.0;
  %766 = cast(%765, dtype="float32") /* ty=Tensor[(10, 16, 13), float32] */;
  %767 = cos(%766) /* ty=Tensor[(10, 16, 13), float32] */;
  %768 = cast(%767, dtype="float32") /* ty=Tensor[(10, 16, 13), float32] */;
  tan(%768) /* ty=Tensor[(10, 16, 13), float32] */
}

def @func_8554() -> (Tensor[(10, 16, 13), uint32], Tensor[(2, 720), float32]) {
  %769 = @func_6167() /* ty=Tensor[(2, 720), float64] */;
  %770 = cast(%769, dtype="float32") /* ty=Tensor[(2, 720), float32] */;
  %771 = @func_5141() /* ty=Tensor[(10, 16, 13), uint32] */;
  %772 = log2(%770) /* ty=Tensor[(2, 720), float32] */;
  (%771, %772)
}

def @func_1677() -> (Tensor[(10, 16, 13), uint32],) {
  %773 = @func_1469() /* ty=Tensor[(10, 16, 13), int64] */;
  %774 = cast(meta[relay.Constant][39] /* ty=Tensor[(10, 16, 13), int64] */, dtype="uint32") /* ty=Tensor[(10, 16, 13), uint32] */;
  %775 = shape_of(%773, dtype="int32") /* ty=Tensor[(3), int32] */;
  %776 = cast(%773, dtype="uint32") /* ty=Tensor[(10, 16, 13), uint32] */;
  %777 = dyn.reshape(%774, %775, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %778 = right_shift(%776, %777) /* ty=Tensor[(10, 16, 13), uint32] */;
  (%778,)
}

def @func_2825() -> (Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64]) {
  %779 = @func_1816() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32], Tensor[(15, 8, 12), float32], Tensor[(2, 720), float32]) */;
  %780 = %779.1;
  %781 = cast(meta[relay.Constant][40] /* ty=Tensor[(10, 16, 13), uint32] */, dtype="float32") /* ty=Tensor[(10, 16, 13), float32] */;
  %782 = shape_of(%780, dtype="int32") /* ty=Tensor[(3), int32] */;
  %783 = cast(%780, dtype="float32") /* ty=Tensor[(10, 16, 13), float32] */;
  %784 = dyn.reshape(%781, %782, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %785 = power(%783, %784) /* ty=Tensor[(10, 16, 13), float32] */;
  %786 = @func_2640() /* ty=Tensor[(10, 16, 13), int64] */;
  (%785, %786)
}

def @func_10705() -> (Tensor[(2, 720), float32],) {
  %787 = @func_1918() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(2, 720), float32]) */;
  %788 = %787.1;
  (%788,)
}

def @func_12215() -> (Tensor[(10, 16, 13), int64], Tensor[(2080), int64]) {
  %789 = @func_4962() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %790 = %789.0;
  %791 = cast(%790, dtype="int64") /* ty=Tensor[(10, 16, 13), int64] */;
  %792 = reshape(%791, newshape=[2080]) /* ty=Tensor[(2080), int64] */;
  %793 = @func_9400(%792) /* ty=(Tensor[(2, 11, 5), bool], Tensor[(300), float32], Tensor[(10, 16, 13), int64], Tensor[(2080), int64], Tensor[(10, 16, 13), int16], Tensor[(10, 16, 13), uint32]) */;
  %794 = %793.3;
  (%790, %794)
}

def @func_8868() -> (Tensor[(10, 16, 13), int64],) {
  %795 = @func_7978() /* ty=Tensor[(10, 16, 13), int64] */;
  (%795,)
}

def @func_9007() -> (Tensor[(3, 13, 8), float64],) {
  %796 = @func_8531() /* ty=Tensor[(3, 13, 8), float64] */;
  (%796,)
}

def @func_5816() -> (Tensor[(10, 16, 13), uint32],) {
  %797 = @func_5186() /* ty=(Tensor[(10, 16, 13), uint32],) */;
  %798 = %797.0;
  (%798,)
}

def @func_10822() -> (Tensor[(10, 16, 13), float32],) {
  %799 = @func_4478() /* ty=(Tensor[(10, 16, 13), float32],) */;
  %800 = %799.0;
  (%800,)
}

def @func_6490() -> (Tensor[(10, 16, 13), float64],) {
  %801 = @func_3034() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %802 = %801.0;
  %803 = cast(%802, dtype="float64") /* ty=Tensor[(10, 16, 13), float64] */;
  %804 = log(%803) /* ty=Tensor[(10, 16, 13), float64] */;
  %805 = cast(%804, dtype="float64") /* ty=Tensor[(10, 16, 13), float64] */;
  %806 = log10(%805) /* ty=Tensor[(10, 16, 13), float64] */;
  (%806,)
}

def @func_3050() -> (Tensor[(10, 16, 13), int64],) {
  %807 = @func_3034() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %808 = %807.0;
  (%808,)
}

def @func_11910() -> (Tensor[(2, 720), float32], Tensor[(10, 16, 13), int64]) {
  %809 = @func_1918() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(2, 720), float32]) */;
  %810 = @func_10555() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) */;
  %811 = %809.1;
  %812 = %810.0;
  (%811, %812)
}

def @func_12372() -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int16]) {
  %813 = @func_3323() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) */;
  %814 = %813.1;
  %815 = cast(%814, dtype="int64") /* ty=Tensor[(10, 16, 13), int64] */;
  %816 = reshape(%815, newshape=[2080]) /* ty=Tensor[(2080), int64] */;
  %817 = @func_9400(%816) /* ty=(Tensor[(2, 11, 5), bool], Tensor[(300), float32], Tensor[(10, 16, 13), int64], Tensor[(2080), int64], Tensor[(10, 16, 13), int16], Tensor[(10, 16, 13), uint32]) */;
  %818 = %817.4;
  (%814, %818)
}

def @func_1408() -> Tensor[(10, 16, 13), int64] {
  @func_1299() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_2727() -> (Tensor[(300), float32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64]) {
  %819 = @func_2424() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(300), float32], Tensor[(10, 16, 13), int64]) */;
  %820 = @func_1191() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %821 = @func_1191() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %822 = %819.1;
  %823 = %820.0;
  %824 = @func_1937() /* ty=Tensor[(10, 16, 13), uint32] */;
  %825 = %821.0;
  (%822, %823, %824, %825)
}

def @func_1439(%var_1434: Tensor[(10, 16, 13), int64]) -> (Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int32]) {
  %826 = @func_1191() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %827 = %826.0;
  %828 = cast(%827, dtype="float32") /* ty=Tensor[(10, 16, 13), float32] */;
  %829 = cast(%var_1434, dtype="int32") /* ty=Tensor[(10, 16, 13), int32] */;
  %830 = shape_of(%827, dtype="int32") /* ty=Tensor[(3), int32] */;
  %831 = cast(%827, dtype="int32") /* ty=Tensor[(10, 16, 13), int32] */;
  %832 = dyn.reshape(%829, %830, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %833 = rsqrt(%828) /* ty=Tensor[(10, 16, 13), float32] */;
  %834 = left_shift(%831, %832) /* ty=Tensor[(10, 16, 13), int32] */;
  (%833, %834)
}

def @func_1874(%var_1855: Tensor[(60, 24), float32]) -> (Tensor[(10, 16, 13), float32], Tensor[(15, 8, 12), int32], Tensor[(60, 24), float32]) {
  %835 = cast(%var_1855, dtype="float32") /* ty=Tensor[(60, 24), float32] */;
  %836 = reshape(%835, newshape=[15, 8, 12]) /* ty=Tensor[(15, 8, 12), float32] */;
  %837 = @func_1176(%836) /* ty=Tensor[(15, 8, 12), float32] */;
  %838 = cast(%var_1855, dtype="int32") /* ty=Tensor[(60, 24), int32] */;
  %839 = shape_of(%837, dtype="int32") /* ty=Tensor[(3), int32] */;
  %840 = cast(%837, dtype="int32") /* ty=Tensor[(15, 8, 12), int32] */;
  %841 = dyn.reshape(%838, %839, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %842 = cast(%var_1855, dtype="float32") /* ty=Tensor[(60, 24), float32] */;
  %843 = @func_1643() /* ty=Tensor[(10, 16, 13), float32] */;
  %844 = minimum(%840, %841) /* ty=Tensor[(15, 8, 12), int32] */;
  %845 = rsqrt(%842) /* ty=Tensor[(60, 24), float32] */;
  (%843, %844, %845)
}

def @func_3908(%var_3905: Tensor[(300), float32]) -> (Tensor[(10, 16, 13), int64], Tensor[(300), float32], Tensor[(300), float32]) {
  %846 = @func_1191() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %847 = cast(%var_3905, dtype="float32") /* ty=Tensor[(300), float32] */;
  %848 = reshape(%847, newshape=[300]) /* ty=Tensor[(300), float32] */;
  %849 = @func_2495(%848) /* ty=(Tensor[(10, 16, 13), bool], Tensor[(5, 4, 15), float32], Tensor[(300), float32]) */;
  %850 = %846.0;
  %851 = %849.2;
  (%850, %851, %var_3905)
}

def @func_1469() -> Tensor[(10, 16, 13), int64] {
  @func_1408() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_1349(%var_1332: Tensor[(5, 13, 4), uint8], %var_1333: Tensor[(5, 13, 4), uint8]) -> (Tensor[(5, 13, 4), float64],) {
  %852 = cast(%var_1333, dtype="uint8") /* ty=Tensor[(5, 13, 4), uint8] */;
  %853 = shape_of(%var_1332, dtype="int32") /* ty=Tensor[(3), int32] */;
  %854 = cast(%var_1332, dtype="uint8") /* ty=Tensor[(5, 13, 4), uint8] */;
  %855 = dyn.reshape(%852, %853, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %856 = left_shift(%854, %855) /* ty=Tensor[(5, 13, 4), uint8] */;
  %857 = cast(%var_1333, dtype="float64") /* ty=Tensor[(5, 13, 4), float64] */;
  %858 = shape_of(%856, dtype="int32") /* ty=Tensor[(3), int32] */;
  %859 = cast(%856, dtype="float64") /* ty=Tensor[(5, 13, 4), float64] */;
  %860 = dyn.reshape(%857, %858, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %861 = minimum(%859, %860) /* ty=Tensor[(5, 13, 4), float64] */;
  (%861,)
}

def @func_2776() -> Tensor[(10, 16, 13), float64] {
  %862 = @func_1677() /* ty=(Tensor[(10, 16, 13), uint32],) */;
  %863 = %862.0;
  %864 = cast(%863, dtype="float64") /* ty=Tensor[(10, 16, 13), float64] */;
  exp(%864) /* ty=Tensor[(10, 16, 13), float64] */
}

def @func_3034() -> (Tensor[(10, 16, 13), int64],) {
  %865 = @func_1191() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %866 = %865.0;
  (%866,)
}

def @func_10576() -> Tensor[(10, 16, 13), float32] {
  %867 = @func_4478() /* ty=(Tensor[(10, 16, 13), float32],) */;
  %867.0
}

def @func_3501(%var_3488: Tensor[(728), float32]) -> (Tensor[(10, 16, 13), int64], Tensor[(13, 4, 14), float32], Tensor[(78), float64], Tensor[(728), float32], Tensor[(234), float64]) {
  %868 = cast(meta[relay.Constant][41] /* ty=Tensor[(78), float64] */, dtype="float64") /* ty=Tensor[(78), float64] */;
  %869 = cast(%var_3488, dtype="float32") /* ty=Tensor[(728), float32] */;
  %870 = cast(meta[relay.Constant][42] /* ty=Tensor[(234), float64] */, dtype="float64") /* ty=Tensor[(234), float64] */;
  %871 = reshape(%868, newshape=[1, 6, 13]) /* ty=Tensor[(1, 6, 13), float64] */;
  %872 = reshape(%869, newshape=[728]) /* ty=Tensor[(728), float32] */;
  %873 = reshape(%870, newshape=[3, 6, 13]) /* ty=Tensor[(3, 6, 13), float64] */;
  %874 = @func_311(%871, %872, %873) /* ty=(Tensor[(?, 6, 13), bool], Tensor[(13, 4, 14), float32], Tensor[(728), float32], Tensor[(13, 4, 14), float32], Tensor[(3, 6, 13), bool], Tensor[(13, 4, 14), float32]) */;
  %875 = @func_2640() /* ty=Tensor[(10, 16, 13), int64] */;
  %876 = %874.5;
  (%875, %876, meta[relay.Constant][41] /* ty=Tensor[(78), float64] */, %var_3488, meta[relay.Constant][42] /* ty=Tensor[(234), float64] */)
}

def @func_1299() -> Tensor[(10, 16, 13), int64] {
  %877 = @func_1191() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %877.0
}

def @func_9272() -> (Tensor[(10, 16, 13), float64], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32], Tensor[(3, 13, 8), float64]) {
  %878 = @func_3785() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32]) */;
  %879 = @func_7596() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) */;
  %880 = @func_2776() /* ty=Tensor[(10, 16, 13), float64] */;
  %881 = %878.0;
  %882 = %879.0;
  %883 = @func_8531() /* ty=Tensor[(3, 13, 8), float64] */;
  (%880, %881, %882, %883)
}

def @func_6021() -> Tensor[(10, 16, 13), int64] {
  @func_2052() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_6731() -> (Tensor[(10, 16, 13), float64], Tensor[(10, 16, 13), uint32]) {
  %884 = @func_3842() /* ty=Tensor[(10, 16, 13), float64] */;
  %885 = @func_2394() /* ty=Tensor[(10, 16, 13), uint32] */;
  (%884, %885)
}

def @func_9756() -> (Tensor[(10, 16, 13), int64],) {
  %886 = @func_9195() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) */;
  %887 = %886.2;
  (%887,)
}

def @func_4111(%var_4104: Tensor[(260), uint8]) -> (Tensor[(10, 16, 13), int64], Tensor[(5, 13, 4), float64], Tensor[(260), uint8], Tensor[(10, 16, 13), int64]) {
  %888 = cast(%var_4104, dtype="uint8") /* ty=Tensor[(260), uint8] */;
  %889 = cast(%var_4104, dtype="uint8") /* ty=Tensor[(260), uint8] */;
  %890 = reshape(%888, newshape=[5, 13, 4]) /* ty=Tensor[(5, 13, 4), uint8] */;
  %891 = reshape(%889, newshape=[5, 13, 4]) /* ty=Tensor[(5, 13, 4), uint8] */;
  %892 = @func_1349(%890, %891) /* ty=(Tensor[(5, 13, 4), float64],) */;
  %893 = @func_2052() /* ty=Tensor[(10, 16, 13), int64] */;
  %894 = %892.0;
  %895 = @func_2052() /* ty=Tensor[(10, 16, 13), int64] */;
  (%893, %894, %var_4104, %895)
}

def @func_11021(%var_11006: Tensor[(1440), float32], %var_11012: Tensor[(1008), float32]) -> (Tensor[(1440), uint64], Tensor[(9, 14, 8), uint32], Tensor[(1008), float32]) {
  %896 = @func_8166() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), float32], Tensor[(1440), float32]) */;
  %897 = %896.2;
  %898 = cast(%var_11006, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
  %899 = shape_of(%897, dtype="int32") /* ty=Tensor[(1), int32] */;
  %900 = cast(%897, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
  %901 = dyn.reshape(%898, %899, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %902 = cast(%var_11012, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %903 = cast(%var_11012, dtype="bool") /* ty=Tensor[(1008), bool] */;
  %904 = reshape(%902, newshape=[9, 14, 8]) /* ty=Tensor[(9, 14, 8), float32] */;
  %905 = reshape(%903, newshape=[9, 14, 8]) /* ty=Tensor[(9, 14, 8), bool] */;
  %906 = @func_9326(%904, %905) /* ty=(Tensor[(10, 16, 13), int64], Tensor[(9, 14, 8), uint32]) */;
  %907 = minimum(%900, %901) /* ty=Tensor[(1440), uint64] */;
  %908 = %906.1;
  (%907, %908, %var_11012)
}

def @func_11946() -> (Tensor[(10, 16, 13), int64],) {
  %909 = @func_3323() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) */;
  %910 = %909.1;
  (%910,)
}

def @func_10853() -> Tensor[(10, 16, 13), int64] {
  %911 = @func_1191() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %911.0
}

def @func_4000() -> Tensor[(10, 16, 13), uint32] {
  %912 = @func_3954() /* ty=(Tensor[(10, 16, 13), uint32],) */;
  %912.0
}

def @func_4607() -> Tensor[(10, 16, 13), uint32] {
  @func_2394() /* ty=Tensor[(10, 16, 13), uint32] */
}

def @func_2424() -> (Tensor[(10, 16, 13), uint32], Tensor[(300), float32], Tensor[(10, 16, 13), int64]) {
  %913 = @func_2370() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(5, 4, 15), float32], Tensor[(300), float32]) */;
  %914 = @func_1937() /* ty=Tensor[(10, 16, 13), uint32] */;
  %915 = %913.2;
  %916 = @func_1469() /* ty=Tensor[(10, 16, 13), int64] */;
  (%914, %915, %916)
}

def @func_7141() -> Tensor[(10, 16, 13), uint32] {
  %917 = @func_3954() /* ty=(Tensor[(10, 16, 13), uint32],) */;
  %917.0
}

def @func_4134() -> (Tensor[(5, 4, 15), float32],) {
  %918 = @func_2370() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(5, 4, 15), float32], Tensor[(300), float32]) */;
  %919 = %918.1;
  (%919,)
}

def @func_661(%var_621: Tensor[(2, 11, 5), float64]) -> (Tensor[(2, 11, 5), bool], Tensor[(2, 11, 5), float32], Tensor[(2, 11, 5), float64]) {
  %920 = cast(%var_621, dtype="float64") /* ty=Tensor[(2, 11, 5), float64] */;
  %921 = erf(%920) /* ty=Tensor[(2, 11, 5), float64] */;
  %922 = cast(%var_621, dtype="bool") /* ty=Tensor[(2, 11, 5), bool] */;
  %923 = shape_of(%921, dtype="int32") /* ty=Tensor[(3), int32] */;
  %924 = cast(%921, dtype="bool") /* ty=Tensor[(2, 11, 5), bool] */;
  %925 = dyn.reshape(%922, %923, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %926 = cast(%921, dtype="float64") /* ty=Tensor[(2, 11, 5), float64] */;
  %927 = acos(%926) /* ty=Tensor[(2, 11, 5), float64] */;
  %928 = cast(%var_621, dtype="float32") /* ty=Tensor[(2, 11, 5), float32] */;
  %929 = shape_of(%927, dtype="int32") /* ty=Tensor[(3), int32] */;
  %930 = cast(%927, dtype="float32") /* ty=Tensor[(2, 11, 5), float32] */;
  %931 = dyn.reshape(%928, %929, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %932 = cast(%var_621, dtype="float64") /* ty=Tensor[(2, 11, 5), float64] */;
  %933 = logical_and(%924, %925) /* ty=Tensor[(2, 11, 5), bool] */;
  %934 = divide(%930, %931) /* ty=Tensor[(2, 11, 5), float32] */;
  %935 = log(%932) /* ty=Tensor[(2, 11, 5), float64] */;
  (%933, %934, %935)
}

def @func_3954() -> (Tensor[(10, 16, 13), uint32],) {
  %936 = @func_1816() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32], Tensor[(15, 8, 12), float32], Tensor[(2, 720), float32]) */;
  %937 = %936.1;
  (%937,)
}

def @func_10947() -> Tensor[(10, 16, 13), int64] {
  @func_6021() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_7757() -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) {
  %938 = @func_3468() /* ty=Tensor[(10, 16, 13), int64] */;
  %939 = @func_1408() /* ty=Tensor[(10, 16, 13), int64] */;
  (%938, %939)
}

def @func_2951(%var_2931: Tensor[(10, 16, 13), uint32]) -> (Tensor[(10, 16, 13), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), int64]) {
  %940 = @func_1937() /* ty=Tensor[(10, 16, 13), uint32] */;
  %941 = cast(%var_2931, dtype="float64") /* ty=Tensor[(10, 16, 13), float64] */;
  %942 = shape_of(%940, dtype="int32") /* ty=Tensor[(3), int32] */;
  %943 = cast(%940, dtype="float64") /* ty=Tensor[(10, 16, 13), float64] */;
  %944 = dyn.reshape(%941, %942, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %945 = @func_1745() /* ty=(Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64], Tensor[(2, 11, 5), bool], Tensor[(11, 10), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), int64]) */;
  %946 = floor_mod(%943, %944) /* ty=Tensor[(10, 16, 13), float64] */;
  %947 = %945.4;
  %948 = @func_2449() /* ty=Tensor[(10, 16, 13), int64] */;
  (%946, %947, %948)
}

def @func_4340() -> Tensor[(10, 16, 13), int64] {
  @func_1469() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_3468() -> Tensor[(10, 16, 13), int64] {
  %949 = @func_3071() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %949.0
}

def @func_8068() -> (Tensor[(300), float32], Tensor[(10, 16, 13), uint32]) {
  %950 = @func_2370() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(5, 4, 15), float32], Tensor[(300), float32]) */;
  %951 = @func_5088() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32]) */;
  %952 = %950.2;
  %953 = %951.0;
  (%952, %953)
}

def @func_1937() -> Tensor[(10, 16, 13), uint32] {
  %954 = @func_1677() /* ty=(Tensor[(10, 16, 13), uint32],) */;
  %954.0
}

def @func_1191() -> (Tensor[(10, 16, 13), int64],) {
  %955 = cast(meta[relay.Constant][44] /* ty=Tensor[(10, 16, 13), int64] */, dtype="int64") /* ty=Tensor[(10, 16, 13), int64] */;
  %956 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(10, 16, 13), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %957 = cast(meta[relay.Constant][43] /* ty=Tensor[(10, 16, 13), int64] */, dtype="int64") /* ty=Tensor[(10, 16, 13), int64] */;
  %958 = dyn.reshape(%955, %956, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %959 = bitwise_or(%957, %958) /* ty=Tensor[(10, 16, 13), int64] */;
  (%959,)
}

def @func_3585(%var_3556: Tensor[(10, 16, 13), int64]) -> (Tensor[(10, 16, 13), bool], Tensor[(10, 16, 13), int64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), int32]) {
  %960 = @func_2640() /* ty=Tensor[(10, 16, 13), int64] */;
  %961 = cast(%var_3556, dtype="bool") /* ty=Tensor[(10, 16, 13), bool] */;
  %962 = shape_of(%960, dtype="int32") /* ty=Tensor[(3), int32] */;
  %963 = cast(%960, dtype="bool") /* ty=Tensor[(10, 16, 13), bool] */;
  %964 = dyn.reshape(%961, %962, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %965 = @func_2640() /* ty=Tensor[(10, 16, 13), int64] */;
  %966 = cast(%965, dtype="uint32") /* ty=Tensor[(10, 16, 13), uint32] */;
  %967 = reshape(%966, newshape=[10, 16, 13]) /* ty=Tensor[(10, 16, 13), uint32] */;
  %968 = @func_2951(%967) /* ty=(Tensor[(10, 16, 13), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), int64]) */;
  %969 = cast(%965, dtype="int64") /* ty=Tensor[(10, 16, 13), int64] */;
  %970 = reshape(%969, newshape=[10, 16, 13]) /* ty=Tensor[(10, 16, 13), int64] */;
  %971 = @func_1439(%970) /* ty=(Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int32]) */;
  %972 = logical_or(%963, %964) /* ty=Tensor[(10, 16, 13), bool] */;
  %973 = %968.1;
  %974 = %971.1;
  (%972, %965, %973, %974)
}

def @func_12033() -> (Tensor[(10, 16, 13), uint32],) {
  %975 = @func_1816() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32], Tensor[(15, 8, 12), float32], Tensor[(2, 720), float32]) */;
  %976 = %975.1;
  (%976,)
}

def @func_4328(%var_4323: Tensor[(9, 12, 8), uint64], %var_4324: Tensor[(9, 12, 8), uint64]) -> Tensor[(9, 12, 8), uint64] {
  %977 = cast(%var_4324, dtype="uint64") /* ty=Tensor[(9, 12, 8), uint64] */;
  %978 = shape_of(%var_4323, dtype="int32") /* ty=Tensor[(3), int32] */;
  %979 = cast(%var_4323, dtype="uint64") /* ty=Tensor[(9, 12, 8), uint64] */;
  %980 = dyn.reshape(%977, %978, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  minimum(%979, %980) /* ty=Tensor[(9, 12, 8), uint64] */
}

def @func_3872(%var_3857: Tensor[(8, 13, 8), float32]) -> (Tensor[(8, 13, 8), float64],) {
  %981 = cast(%var_3857, dtype="float32") /* ty=Tensor[(8, 13, 8), float32] */;
  %982 = log10(%981) /* ty=Tensor[(8, 13, 8), float32] */;
  %983 = cast(%982, dtype="float64") /* ty=Tensor[(8, 13, 8), float64] */;
  %984 = sigmoid(%983) /* ty=Tensor[(8, 13, 8), float64] */;
  (%984,)
}

def @func_2640() -> Tensor[(10, 16, 13), int64] {
  @func_1469() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_1816() -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32], Tensor[(15, 8, 12), float32], Tensor[(2, 720), float32]) {
  %985 = @func_1677() /* ty=(Tensor[(10, 16, 13), uint32],) */;
  %986 = @func_1677() /* ty=(Tensor[(10, 16, 13), uint32],) */;
  %987 = cast(meta[relay.Constant][45] /* ty=Tensor[(2, 720), float32] */, dtype="float32") /* ty=Tensor[(2, 720), float32] */;
  %988 = reshape(%987, newshape=[15, 8, 12]) /* ty=Tensor[(15, 8, 12), float32] */;
  %989 = @func_1299() /* ty=Tensor[(10, 16, 13), int64] */;
  %990 = %985.0;
  %991 = %986.0;
  %992 = @func_1176(%988) /* ty=Tensor[(15, 8, 12), float32] */;
  (%989, %990, %991, %992, meta[relay.Constant][45] /* ty=Tensor[(2, 720), float32] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_11812(%var_11783: Tensor[(5, 1, 11), uint64], %var_11784: Tensor[(5, 6, 11), uint64], %var_11800: Tensor[(1440), float32]) -> (Tensor[(5, 6, 11), int64], Tensor[(10, 16, 13), uint32], Tensor[(15, 8, 12), float32], Tensor[(1440), float32], Tensor[(5, 1, 11), float64], Tensor[(10, 16, 13), uint32]) {
  %0 = cast(%var_11783, dtype="uint64") /* ty=Tensor[(5, 1, 11), uint64] */;
  %1 = cast(%var_11784, dtype="uint64") /* ty=Tensor[(5, 6, 11), uint64] */;
  %2 = logical_xor(%0, %1) /* ty=Tensor[(5, 6, 11), uint64] */;
  %3 = cast(%2, dtype="int64") /* ty=Tensor[(5, 6, 11), int64] */;
  %4 = cast(%var_11783, dtype="int64") /* ty=Tensor[(5, 1, 11), int64] */;
  %5 = cast(%var_11800, dtype="float32") /* ty=Tensor[(1440), float32] */;
  %6 = reshape(%5, newshape=[15, 8, 12]) /* ty=Tensor[(15, 8, 12), float32] */;
  %7 = cast(%var_11783, dtype="float64") /* ty=Tensor[(5, 1, 11), float64] */;
  %8 = subtract(%3, %4) /* ty=Tensor[(5, 6, 11), int64] */;
  %9 = @func_5141() /* ty=Tensor[(10, 16, 13), uint32] */;
  %10 = @func_1176(%6) /* ty=Tensor[(15, 8, 12), float32] */;
  %11 = log(%7) /* ty=Tensor[(5, 1, 11), float64] */;
  %12 = @func_1937() /* ty=Tensor[(10, 16, 13), uint32] */;
  (%8, %9, %10, %var_11800, %11, %12)
}

def @func_1937() -> Tensor[(10, 16, 13), uint32] {
  %13 = @func_1677() /* ty=(Tensor[(10, 16, 13), uint32],) */;
  %13.0
}

def @func_7027(%var_7026: Tensor[(14, 300), float32]) -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(14, 300), float32], Tensor[(10, 16, 13), int64]) {
  %24 = fn (%var_7011: Tensor[(14, 300), float32]) -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(14, 300), float32], Tensor[(10, 16, 13), int64]) {
    %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 300), float32] */, dtype="float32") /* ty=Tensor[(1, 300), float32] */;
    %15 = reshape(%14, newshape=[300]) /* ty=Tensor[(300), float32] */;
    %16 = @func_3619(%15) /* ty=(Tensor[(15, 9, 12), float64], Tensor[(5, 4, 15), float32], Tensor[(300), float32], Tensor[(10, 16, 13), int64], Tensor[(2080), uint32]) */;
    %17 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 300), float32] */, dtype="float32") /* ty=Tensor[(1, 300), float32] */;
    %18 = cast(%var_7011, dtype="float32") /* ty=Tensor[(14, 300), float32] */;
    %19 = @func_3071() /* ty=(Tensor[(10, 16, 13), int64],) */;
    %20 = @func_1937() /* ty=Tensor[(10, 16, 13), uint32] */;
    %21 = %16.3;
    %22 = floor_divide(%17, %18) /* ty=Tensor[(14, 300), float32] */;
    %23 = %19.0;
    (%20, %21, %22, %23)
  };
  %24(%var_7026) /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(14, 300), float32], Tensor[(10, 16, 13), int64]) */
}

def @func_5143() -> Tensor[(10, 16, 13), uint32] {
  @func_5141() /* ty=Tensor[(10, 16, 13), uint32] */
}

def @func_12439() -> (Tensor[(10, 16, 13), int64],) {
  @func_12437() /* ty=(Tensor[(10, 16, 13), int64],) */
}

def @func_6549() -> (Tensor[(10, 16, 13), float64],) {
  %27 = fn () -> (Tensor[(10, 16, 13), float64],) {
    %25 = @func_6490() /* ty=(Tensor[(10, 16, 13), float64],) */;
    %26 = %25.0;
    (%26,)
  };
  %27() /* ty=(Tensor[(10, 16, 13), float64],) */
}

def @func_11836() -> (Tensor[(10, 16, 13), uint32],) {
  %30 = fn () -> (Tensor[(10, 16, 13), uint32],) {
    %28 = @func_6731() /* ty=(Tensor[(10, 16, 13), float64], Tensor[(10, 16, 13), uint32]) */;
    %29 = %28.1;
    (%29,)
  };
  %30() /* ty=(Tensor[(10, 16, 13), uint32],) */
}

def @func_5470() -> Tensor[(10, 16, 13), uint32] {
  @func_5141() /* ty=Tensor[(10, 16, 13), uint32] */
}

def @func_4479() -> (Tensor[(10, 16, 13), float32],) {
  %33 = fn () -> (Tensor[(10, 16, 13), float32],) {
    %31 = @func_1745() /* ty=(Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64], Tensor[(2, 11, 5), bool], Tensor[(11, 10), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), int64]) */;
    %32 = %31.0;
    (%32,)
  };
  %33() /* ty=(Tensor[(10, 16, 13), float32],) */
}

def @func_10406() -> Tensor[(300), float32] {
  %35 = fn () -> Tensor[(300), float32] {
    %34 = @func_8068() /* ty=(Tensor[(300), float32], Tensor[(10, 16, 13), uint32]) */;
    %34.0
  };
  %35() /* ty=Tensor[(300), float32] */
}

def @func_6492() -> (Tensor[(10, 16, 13), float64],) {
  @func_6490() /* ty=(Tensor[(10, 16, 13), float64],) */
}

def @func_6167() -> Tensor[(2, 720), float64] {
  %36 = @func_3115() /* ty=(Tensor[(2, 720), float32], Tensor[(10, 16, 13), uint32]) */;
  %37 = %36.0;
  %38 = cast(meta[relay.Constant][1] /* ty=Tensor[(2, 720), float32] */, dtype="float64") /* ty=Tensor[(2, 720), float64] */;
  %39 = shape_of(%37, dtype="int32") /* ty=Tensor[(2), int32] */;
  %40 = cast(%37, dtype="float64") /* ty=Tensor[(2, 720), float64] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  floor_mod(%40, %41) /* ty=Tensor[(2, 720), float64] */
}

def @func_9274() -> (Tensor[(10, 16, 13), float64], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32], Tensor[(3, 13, 8), float64]) {
  @func_9272() /* ty=(Tensor[(10, 16, 13), float64], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32], Tensor[(3, 13, 8), float64]) */
}

def @func_10576() -> Tensor[(10, 16, 13), float32] {
  %42 = @func_4478() /* ty=(Tensor[(10, 16, 13), float32],) */;
  %42.0
}

def @func_9197() -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) {
  @func_9195() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) */
}

def @func_10988() -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64], Tensor[(728), float32]) {
  @func_10986() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64], Tensor[(728), float32]) */
}

def @func_2372() -> (Tensor[(10, 16, 13), uint32], Tensor[(5, 4, 15), float32], Tensor[(300), float32]) {
  @func_2370() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(5, 4, 15), float32], Tensor[(300), float32]) */
}

def @func_11605() -> (Tensor[(10, 16, 13), int64],) {
  @func_11603() /* ty=(Tensor[(10, 16, 13), int64],) */
}

def @func_5141() -> Tensor[(10, 16, 13), uint32] {
  %43 = @func_2424() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(300), float32], Tensor[(10, 16, 13), int64]) */;
  %43.0
}

def @func_2588(%var_2586: Tensor[(9, 10, 5), uint32]) -> Tensor[(9, 10, 5), uint32] {
  @func_2585(%var_2586) /* ty=Tensor[(9, 10, 5), uint32] */
}

def @func_9811(%var_9785: Tensor[(5, 16, 16), int32], %var_9786: Tensor[(5, 16, 16), int32]) -> Tensor[(5, 16, 16), int32] {
  %44 = cast(%var_9786, dtype="int32") /* ty=Tensor[(5, 16, 16), int32] */;
  %45 = shape_of(%var_9785, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(%var_9785, dtype="int32") /* ty=Tensor[(5, 16, 16), int32] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  add(%46, %47) /* ty=Tensor[(5, 16, 16), int32] */
}

def @func_6092() -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64]) {
  %51 = fn () -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64]) {
    %48 = @func_3785() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32]) */;
    %49 = %48.1;
    %50 = @func_4650() /* ty=Tensor[(10, 16, 13), int64] */;
    (%49, %50)
  };
  %51() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64]) */
}

def @func_3186() -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), float32]) {
  @func_3184() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), float32]) */
}

def @func_1876(%var_1875: Tensor[(60, 24), float32]) -> (Tensor[(10, 16, 13), float32], Tensor[(15, 8, 12), int32], Tensor[(60, 24), float32]) {
  %63 = fn (%var_1855: Tensor[(60, 24), float32]) -> (Tensor[(10, 16, 13), float32], Tensor[(15, 8, 12), int32], Tensor[(60, 24), float32]) {
    %52 = cast(%var_1855, dtype="float32") /* ty=Tensor[(60, 24), float32] */;
    %53 = reshape(%52, newshape=[15, 8, 12]) /* ty=Tensor[(15, 8, 12), float32] */;
    %54 = @func_1176(%53) /* ty=Tensor[(15, 8, 12), float32] */;
    %55 = cast(%var_1855, dtype="int32") /* ty=Tensor[(60, 24), int32] */;
    %56 = shape_of(%54, dtype="int32") /* ty=Tensor[(3), int32] */;
    %57 = cast(%54, dtype="int32") /* ty=Tensor[(15, 8, 12), int32] */;
    %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %59 = cast(%var_1855, dtype="float32") /* ty=Tensor[(60, 24), float32] */;
    %60 = @func_1643() /* ty=Tensor[(10, 16, 13), float32] */;
    %61 = minimum(%57, %58) /* ty=Tensor[(15, 8, 12), int32] */;
    %62 = rsqrt(%59) /* ty=Tensor[(60, 24), float32] */;
    (%60, %61, %62)
  };
  %63(%var_1875) /* ty=(Tensor[(10, 16, 13), float32], Tensor[(15, 8, 12), int32], Tensor[(60, 24), float32]) */
}

def @func_7316() -> (Tensor[(300), float32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), float32], Tensor[(2, 6, 16), float32], Tensor[(10, 16, 13), float64]) {
  %64 = @func_2424() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(300), float32], Tensor[(10, 16, 13), int64]) */;
  %65 = @func_1191() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %66 = @func_4478() /* ty=(Tensor[(10, 16, 13), float32],) */;
  %67 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 6, 16), float32] */, dtype="float32") /* ty=Tensor[(2, 6, 16), float32] */;
  %68 = cos(%67) /* ty=Tensor[(2, 6, 16), float32] */;
  %69 = cast(%68, dtype="float32") /* ty=Tensor[(2, 6, 16), float32] */;
  %70 = @func_6731() /* ty=(Tensor[(10, 16, 13), float64], Tensor[(10, 16, 13), uint32]) */;
  %71 = %64.1;
  %72 = %65.0;
  %73 = %66.0;
  %74 = @func_1469() /* ty=Tensor[(10, 16, 13), int64] */;
  %75 = @func_4453() /* ty=Tensor[(10, 16, 13), float32] */;
  %76 = atan(%69) /* ty=Tensor[(2, 6, 16), float32] */;
  %77 = %70.0;
  (%71, %72, %73, %74, %75, %76, %77)
}

def @func_3116() -> (Tensor[(2, 720), float32], Tensor[(10, 16, 13), uint32]) {
  %81 = fn () -> (Tensor[(2, 720), float32], Tensor[(10, 16, 13), uint32]) {
    %78 = @func_1918() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(2, 720), float32]) */;
    %79 = %78.1;
    %80 = @func_2394() /* ty=Tensor[(10, 16, 13), uint32] */;
    (%79, %80)
  };
  %81() /* ty=(Tensor[(2, 720), float32], Tensor[(10, 16, 13), uint32]) */
}

def @func_9595(%var_9593: Tensor[(2, 12, 2), float64], %var_9594: Tensor[(2, 12, 2), float32]) -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(2, 12, 2), bool], Tensor[(10, 16, 13), float64], Tensor[(2, 12, 2), bool], Tensor[(10, 16, 13), uint32], Tensor[(2, 12, 2), float32], Tensor[(2, 12, 2), int8]) {
  %121 = fn (%var_9498: Tensor[(2, 12, 2), float64], %var_9568: Tensor[(2, 12, 2), float32]) -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(2, 12, 2), bool], Tensor[(10, 16, 13), float64], Tensor[(2, 12, 2), bool], Tensor[(10, 16, 13), uint32], Tensor[(2, 12, 2), float32], Tensor[(2, 12, 2), int8]) {
    %82 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 12, 2), float64] */, dtype="float32") /* ty=Tensor[(2, 12, 2), float32] */;
    %83 = atan(%82) /* ty=Tensor[(2, 12, 2), float32] */;
    %84 = cast(%var_9498, dtype="float32") /* ty=Tensor[(2, 12, 2), float32] */;
    %85 = shape_of(%83, dtype="int32") /* ty=Tensor[(3), int32] */;
    %86 = cast(%83, dtype="float32") /* ty=Tensor[(2, 12, 2), float32] */;
    %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %88 = power(%86, %87) /* ty=Tensor[(2, 12, 2), float32] */;
    %89 = cast(%83, dtype="uint32") /* ty=Tensor[(2, 12, 2), uint32] */;
    %90 = shape_of(%88, dtype="int32") /* ty=Tensor[(3), int32] */;
    %91 = cast(%88, dtype="uint32") /* ty=Tensor[(2, 12, 2), uint32] */;
    %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %93 = left_shift(%91, %92) /* ty=Tensor[(2, 12, 2), uint32] */;
    %94 = cast(%88, dtype="bool") /* ty=Tensor[(2, 12, 2), bool] */;
    %95 = shape_of(%93, dtype="int32") /* ty=Tensor[(3), int32] */;
    %96 = cast(%93, dtype="bool") /* ty=Tensor[(2, 12, 2), bool] */;
    %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %98 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 12, 2), float64] */, dtype="float64") /* ty=Tensor[(2, 12, 2), float64] */;
    %99 = shape_of(%var_9498, dtype="int32") /* ty=Tensor[(3), int32] */;
    %100 = cast(%var_9498, dtype="float64") /* ty=Tensor[(2, 12, 2), float64] */;
    %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %102 = floor_mod(%100, %101) /* ty=Tensor[(2, 12, 2), float64] */;
    %103 = cast(%93, dtype="bool") /* ty=Tensor[(2, 12, 2), bool] */;
    %104 = shape_of(%102, dtype="int32") /* ty=Tensor[(3), int32] */;
    %105 = cast(%102, dtype="bool") /* ty=Tensor[(2, 12, 2), bool] */;
    %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %107 = @func_5816() /* ty=(Tensor[(10, 16, 13), uint32],) */;
    %108 = cast(%83, dtype="float32") /* ty=Tensor[(2, 12, 2), float32] */;
    %109 = cast(%var_9568, dtype="int8") /* ty=Tensor[(2, 12, 2), int8] */;
    %110 = shape_of(%83, dtype="int32") /* ty=Tensor[(3), int32] */;
    %111 = cast(%83, dtype="int8") /* ty=Tensor[(2, 12, 2), int8] */;
    %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %113 = @func_4000() /* ty=Tensor[(10, 16, 13), uint32] */;
    %114 = @func_1408() /* ty=Tensor[(10, 16, 13), int64] */;
    %115 = not_equal(%96, %97) /* ty=Tensor[(2, 12, 2), bool] */;
    %116 = @func_7953() /* ty=Tensor[(10, 16, 13), float64] */;
    %117 = greater(%105, %106) /* ty=Tensor[(2, 12, 2), bool] */;
    %118 = %107.0;
    %119 = erf(%108) /* ty=Tensor[(2, 12, 2), float32] */;
    %120 = maximum(%111, %112) /* ty=Tensor[(2, 12, 2), int8] */;
    (%113, %114, %115, %116, %117, %118, %119, %120)
  };
  %121(%var_9593, %var_9594) /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(2, 12, 2), bool], Tensor[(10, 16, 13), float64], Tensor[(2, 12, 2), bool], Tensor[(10, 16, 13), uint32], Tensor[(2, 12, 2), float32], Tensor[(2, 12, 2), int8]) */
}

def @func_9894(%var_9859: Tensor[(15, 7, 7), bool]) -> (Tensor[(15, 7, 7), bool], Tensor[(10, 16, 13), float64], Tensor[(15, 7, 7), float32], Tensor[(3, 13, 8), float64]) {
  %122 = cast(meta[relay.Constant][4] /* ty=Tensor[(15, 7, 7), bool] */, dtype="bool") /* ty=Tensor[(15, 7, 7), bool] */;
  %123 = shape_of(%var_9859, dtype="int32") /* ty=Tensor[(3), int32] */;
  %124 = cast(%var_9859, dtype="bool") /* ty=Tensor[(15, 7, 7), bool] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %126 = cast(meta[relay.Constant][4] /* ty=Tensor[(15, 7, 7), bool] */, dtype="float32") /* ty=Tensor[(15, 7, 7), float32] */;
  %127 = shape_of(%var_9859, dtype="int32") /* ty=Tensor[(3), int32] */;
  %128 = cast(%var_9859, dtype="float32") /* ty=Tensor[(15, 7, 7), float32] */;
  %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %130 = logical_or(%124, %125) /* ty=Tensor[(15, 7, 7), bool] */;
  %131 = @func_7953() /* ty=Tensor[(10, 16, 13), float64] */;
  %132 = mod(%128, %129) /* ty=Tensor[(15, 7, 7), float32] */;
  %133 = @func_8531() /* ty=Tensor[(3, 13, 8), float64] */;
  (%130, %131, %132, %133)
}

def @func_11024(%var_11022: Tensor[(1440), float32], %var_11023: Tensor[(1008), float32]) -> (Tensor[(1440), uint64], Tensor[(9, 14, 8), uint32], Tensor[(1008), float32]) {
  %147 = fn (%var_11006: Tensor[(1440), float32], %var_11012: Tensor[(1008), float32]) -> (Tensor[(1440), uint64], Tensor[(9, 14, 8), uint32], Tensor[(1008), float32]) {
    %134 = @func_8166() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), float32], Tensor[(1440), float32]) */;
    %135 = %134.2;
    %136 = cast(%var_11006, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
    %137 = shape_of(%135, dtype="int32") /* ty=Tensor[(1), int32] */;
    %138 = cast(%135, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
    %139 = dyn.reshape(%136, %137, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %140 = cast(%var_11012, dtype="float32") /* ty=Tensor[(1008), float32] */;
    %141 = cast(%var_11012, dtype="bool") /* ty=Tensor[(1008), bool] */;
    %142 = reshape(%140, newshape=[9, 14, 8]) /* ty=Tensor[(9, 14, 8), float32] */;
    %143 = reshape(%141, newshape=[9, 14, 8]) /* ty=Tensor[(9, 14, 8), bool] */;
    %144 = @func_9326(%142, %143) /* ty=(Tensor[(10, 16, 13), int64], Tensor[(9, 14, 8), uint32]) */;
    %145 = minimum(%138, %139) /* ty=Tensor[(1440), uint64] */;
    %146 = %144.1;
    (%145, %146, %var_11012)
  };
  %147(%var_11022, %var_11023) /* ty=(Tensor[(1440), uint64], Tensor[(9, 14, 8), uint32], Tensor[(1008), float32]) */
}

def @func_12216() -> (Tensor[(10, 16, 13), int64], Tensor[(2080), int64]) {
  %154 = fn () -> (Tensor[(10, 16, 13), int64], Tensor[(2080), int64]) {
    %148 = @func_4962() /* ty=(Tensor[(10, 16, 13), int64],) */;
    %149 = %148.0;
    %150 = cast(%149, dtype="int64") /* ty=Tensor[(10, 16, 13), int64] */;
    %151 = reshape(%150, newshape=[2080]) /* ty=Tensor[(2080), int64] */;
    %152 = @func_9400(%151) /* ty=(Tensor[(2, 11, 5), bool], Tensor[(300), float32], Tensor[(10, 16, 13), int64], Tensor[(2080), int64], Tensor[(10, 16, 13), int16], Tensor[(10, 16, 13), uint32]) */;
    %153 = %152.3;
    (%149, %153)
  };
  %154() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(2080), int64]) */
}

def @func_7793() -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) {
  %159 = fn () -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) {
    %155 = @func_3050() /* ty=(Tensor[(10, 16, 13), int64],) */;
    %156 = @func_3050() /* ty=(Tensor[(10, 16, 13), int64],) */;
    %157 = %155.0;
    %158 = %156.0;
    (%157, %158)
  };
  %159() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) */
}

def @func_6021() -> Tensor[(10, 16, 13), int64] {
  @func_2052() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_1818() -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32], Tensor[(15, 8, 12), float32], Tensor[(2, 720), float32]) {
  @func_1816() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32], Tensor[(15, 8, 12), float32], Tensor[(2, 720), float32]) */
}

def @func_2908(%var_2906: Tensor[(6, 6, 4), float64]) -> (Tensor[(6, 6, 4), float64], Tensor[(10, 16, 13), int64]) {
  @func_2905(%var_2906) /* ty=(Tensor[(6, 6, 4), float64], Tensor[(10, 16, 13), int64]) */
}

def @func_9635(%var_9633: Tensor[(3, 11, 7), float32], %var_9634: Tensor[(3, 11, 7), float32]) -> (Tensor[(3, 11, 7), float32],) {
  %165 = fn (%var_9626: Tensor[(3, 11, 7), float32], %var_9627: Tensor[(3, 11, 7), float32]) -> (Tensor[(3, 11, 7), float32],) {
    %160 = cast(%var_9627, dtype="float32") /* ty=Tensor[(3, 11, 7), float32] */;
    %161 = shape_of(%var_9626, dtype="int32") /* ty=Tensor[(3), int32] */;
    %162 = cast(%var_9626, dtype="float32") /* ty=Tensor[(3, 11, 7), float32] */;
    %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %164 = mod(%162, %163) /* ty=Tensor[(3, 11, 7), float32] */;
    (%164,)
  };
  %165(%var_9633, %var_9634) /* ty=(Tensor[(3, 11, 7), float32],) */
}

def @func_10436() -> (Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64]) {
  %166 = @func_3184() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), float32]) */;
  %167 = @func_10036() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(2, 720), uint8]) */;
  %168 = %166.1;
  %169 = %167.0;
  (%168, %169)
}

def @func_7596() -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) {
  %170 = @func_3515() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %171 = @func_5141() /* ty=Tensor[(10, 16, 13), uint32] */;
  %172 = @func_1469() /* ty=Tensor[(10, 16, 13), int64] */;
  %173 = %170.0;
  (%171, %172, %173)
}

def @func_8507() -> (Tensor[(10, 16, 13), int64],) {
  @func_8505() /* ty=(Tensor[(10, 16, 13), int64],) */
}

def @func_9087() -> (Tensor[(10, 16, 13), float32],) {
  @func_9085() /* ty=(Tensor[(10, 16, 13), float32],) */
}

def @func_5818() -> (Tensor[(10, 16, 13), uint32],) {
  @func_5816() /* ty=(Tensor[(10, 16, 13), uint32],) */
}

def @func_2170(%var_2134: Tensor[(6, 8, 13), uint64], %var_2135: Tensor[(6, 8, 13), uint64]) -> (Tensor[(6, 8, 13), uint64], Tensor[(10, 16, 13), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), uint32]) {
  %174 = cast(%var_2135, dtype="uint64") /* ty=Tensor[(6, 8, 13), uint64] */;
  %175 = shape_of(%var_2134, dtype="int32") /* ty=Tensor[(3), int32] */;
  %176 = cast(%var_2134, dtype="uint64") /* ty=Tensor[(6, 8, 13), uint64] */;
  %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %178 = @func_1643() /* ty=Tensor[(10, 16, 13), float32] */;
  %179 = cast(meta[relay.Constant][5] /* ty=Tensor[(10, 16, 13), float32] */, dtype="float64") /* ty=Tensor[(10, 16, 13), float64] */;
  %180 = shape_of(%178, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(%178, dtype="float64") /* ty=Tensor[(10, 16, 13), float64] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %183 = @func_1745() /* ty=(Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64], Tensor[(2, 11, 5), bool], Tensor[(11, 10), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), int64]) */;
  %184 = @func_1677() /* ty=(Tensor[(10, 16, 13), uint32],) */;
  %185 = logical_xor(%176, %177) /* ty=Tensor[(6, 8, 13), uint64] */;
  %186 = mod(%181, %182) /* ty=Tensor[(10, 16, 13), float64] */;
  %187 = %183.4;
  %188 = %184.0;
  (%185, %186, %187, %188)
}

def @func_2495(%var_2480: Tensor[(300), float32]) -> (Tensor[(10, 16, 13), bool], Tensor[(5, 4, 15), float32], Tensor[(300), float32]) {
  %189 = @func_1677() /* ty=(Tensor[(10, 16, 13), uint32],) */;
  %190 = %189.0;
  %191 = @func_2052() /* ty=Tensor[(10, 16, 13), int64] */;
  %192 = cast(%191, dtype="bool") /* ty=Tensor[(10, 16, 13), bool] */;
  %193 = shape_of(%190, dtype="int32") /* ty=Tensor[(3), int32] */;
  %194 = cast(%190, dtype="bool") /* ty=Tensor[(10, 16, 13), bool] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %196 = cast(%var_2480, dtype="float32") /* ty=Tensor[(300), float32] */;
  %197 = cast(%var_2480, dtype="float32") /* ty=Tensor[(300), float32] */;
  %198 = reshape(%196, newshape=[5, 4, 15]) /* ty=Tensor[(5, 4, 15), float32] */;
  %199 = reshape(%197, newshape=[5, 4, 15]) /* ty=Tensor[(5, 4, 15), float32] */;
  %200 = @func_1100(%198, %199) /* ty=(Tensor[(5, 4, 15), float32],) */;
  %201 = greater(%194, %195) /* ty=Tensor[(10, 16, 13), bool] */;
  %202 = %200.0;
  (%201, %202, %var_2480)
}

def @func_1816() -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32], Tensor[(15, 8, 12), float32], Tensor[(2, 720), float32]) {
  %203 = @func_1677() /* ty=(Tensor[(10, 16, 13), uint32],) */;
  %204 = @func_1677() /* ty=(Tensor[(10, 16, 13), uint32],) */;
  %205 = cast(meta[relay.Constant][6] /* ty=Tensor[(2, 720), float32] */, dtype="float32") /* ty=Tensor[(2, 720), float32] */;
  %206 = reshape(%205, newshape=[15, 8, 12]) /* ty=Tensor[(15, 8, 12), float32] */;
  %207 = @func_1299() /* ty=Tensor[(10, 16, 13), int64] */;
  %208 = %203.0;
  %209 = %204.0;
  %210 = @func_1176(%206) /* ty=Tensor[(15, 8, 12), float32] */;
  (%207, %208, %209, %210, meta[relay.Constant][6] /* ty=Tensor[(2, 720), float32] */)
}

def @func_3324() -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) {
  %213 = fn () -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) {
    %211 = @func_2052() /* ty=Tensor[(10, 16, 13), int64] */;
    %212 = @func_1408() /* ty=Tensor[(10, 16, 13), int64] */;
    (%211, %212)
  };
  %213() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) */
}

def @func_8823() -> (Tensor[(10, 16, 13), int64],) {
  %216 = fn () -> (Tensor[(10, 16, 13), int64],) {
    %214 = @func_3515() /* ty=(Tensor[(10, 16, 13), int64],) */;
    %215 = %214.0;
    (%215,)
  };
  %216() /* ty=(Tensor[(10, 16, 13), int64],) */
}

def @func_12372() -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int16]) {
  %217 = @func_3323() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) */;
  %218 = %217.1;
  %219 = cast(%218, dtype="int64") /* ty=Tensor[(10, 16, 13), int64] */;
  %220 = reshape(%219, newshape=[2080]) /* ty=Tensor[(2080), int64] */;
  %221 = @func_9400(%220) /* ty=(Tensor[(2, 11, 5), bool], Tensor[(300), float32], Tensor[(10, 16, 13), int64], Tensor[(2080), int64], Tensor[(10, 16, 13), int16], Tensor[(10, 16, 13), uint32]) */;
  %222 = %221.4;
  (%218, %222)
}

def @func_5943(%var_5941: Tensor[(16, 1, 15), float32]) -> (Tensor[(10, 16, 13), uint32], Tensor[(16, ?, 15), float64]) {
  @func_5940(%var_5941) /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(16, ?, 15), float64]) */
}

def @func_3052() -> (Tensor[(10, 16, 13), int64],) {
  @func_3050() /* ty=(Tensor[(10, 16, 13), int64],) */
}

def @func_10092(%var_10090: Tensor[(400), float64], %var_10091: Tensor[(832), float32]) -> (Tensor[(10, 16, 13), float32], Tensor[(8, 13, 8), float64], Tensor[(400), float64], Tensor[(832), float32]) {
  %231 = fn (%var_10084: Tensor[(400), float64], %var_10085: Tensor[(832), float32]) -> (Tensor[(10, 16, 13), float32], Tensor[(8, 13, 8), float64], Tensor[(400), float64], Tensor[(832), float32]) {
    %223 = @func_3184() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), float32]) */;
    %224 = cast(%var_10084, dtype="float64") /* ty=Tensor[(400), float64] */;
    %225 = cast(%var_10085, dtype="float32") /* ty=Tensor[(832), float32] */;
    %226 = reshape(%224, newshape=[10, 10, 4]) /* ty=Tensor[(10, 10, 4), float64] */;
    %227 = reshape(%225, newshape=[832]) /* ty=Tensor[(832), float32] */;
    %228 = @func_6848(%226, %227) /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(10, 10, 4), bool], Tensor[(8, 13, 8), float64], Tensor[(832), float32]) */;
    %229 = %223.1;
    %230 = %228.2;
    (%229, %230, %var_10084, %var_10085)
  };
  %231(%var_10090, %var_10091) /* ty=(Tensor[(10, 16, 13), float32], Tensor[(8, 13, 8), float64], Tensor[(400), float64], Tensor[(832), float32]) */
}

def @func_1919() -> (Tensor[(10, 16, 13), int64], Tensor[(2, 720), float32]) {
  %235 = fn () -> (Tensor[(10, 16, 13), int64], Tensor[(2, 720), float32]) {
    %232 = @func_1816() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32], Tensor[(15, 8, 12), float32], Tensor[(2, 720), float32]) */;
    %233 = @func_1469() /* ty=Tensor[(10, 16, 13), int64] */;
    %234 = %232.4;
    (%233, %234)
  };
  %235() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(2, 720), float32]) */
}

def @func_8472(%var_8471: Tensor[(10, 16, 13), int64]) -> (Tensor[(10, 16, 13), float64], Tensor[(10, 16, 13), float64]) {
  %244 = fn (%var_8451: Tensor[(10, 16, 13), int64]) -> (Tensor[(10, 16, 13), float64], Tensor[(10, 16, 13), float64]) {
    %236 = @func_3323() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) */;
    %237 = %236.0;
    %238 = cast(%var_8451, dtype="float64") /* ty=Tensor[(10, 16, 13), float64] */;
    %239 = shape_of(%237, dtype="int32") /* ty=Tensor[(3), int32] */;
    %240 = cast(%237, dtype="float64") /* ty=Tensor[(10, 16, 13), float64] */;
    %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %242 = @func_2776() /* ty=Tensor[(10, 16, 13), float64] */;
    %243 = divide(%240, %241) /* ty=Tensor[(10, 16, 13), float64] */;
    (%242, %243)
  };
  %244(%var_8471) /* ty=(Tensor[(10, 16, 13), float64], Tensor[(10, 16, 13), float64]) */
}

def @func_3785() -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32]) {
  %245 = @func_2727() /* ty=(Tensor[(300), float32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64]) */;
  %246 = @func_1299() /* ty=Tensor[(10, 16, 13), int64] */;
  %247 = %245.2;
  (%246, %247)
}

def @func_11522() -> Tensor[(10, 16, 13), uint32] {
  @func_4000() /* ty=Tensor[(10, 16, 13), uint32] */
}

def @func_5707() -> (Tensor[(16, 1, 15), float32],) {
  %250 = fn () -> (Tensor[(16, 1, 15), float32],) {
    %248 = cast(meta[relay.Constant][7] /* ty=Tensor[(16, 1, 15), float32] */, dtype="float32") /* ty=Tensor[(16, 1, 15), float32] */;
    %249 = sinh(%248) /* ty=Tensor[(16, 1, 15), float32] */;
    (%249,)
  };
  %250() /* ty=(Tensor[(16, 1, 15), float32],) */
}

def @func_3787() -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32]) {
  @func_3785() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32]) */
}

def @func_12082(%var_12080: Tensor[(5, 12, 14), bool], %var_12081: Tensor[(208, 4), float32]) -> (Tensor[(5, 12, 14), bool], Tensor[(10, 16, 13), int64], Tensor[(5, 6, 11), int64], Tensor[(1, 55), uint64], Tensor[(330), uint64], Tensor[(1440), float32], Tensor[(400), float64], Tensor[(400), float64], Tensor[(208, 4), float32], Tensor[(10, 16, 13), uint32], Tensor[(240), float32]) {
  %276 = fn (%var_12039: Tensor[(5, 12, 14), bool], %var_12058: Tensor[(208, 4), float32]) -> (Tensor[(5, 12, 14), bool], Tensor[(10, 16, 13), int64], Tensor[(5, 6, 11), int64], Tensor[(1, 55), uint64], Tensor[(330), uint64], Tensor[(1440), float32], Tensor[(400), float64], Tensor[(400), float64], Tensor[(208, 4), float32], Tensor[(10, 16, 13), uint32], Tensor[(240), float32]) {
    %251 = cast(%var_12039, dtype="bool") /* ty=Tensor[(5, 12, 14), bool] */;
    %252 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(5, 12, 14), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %253 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 12, 14), bool] */, dtype="bool") /* ty=Tensor[(5, 12, 14), bool] */;
    %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %255 = @func_3050() /* ty=(Tensor[(10, 16, 13), int64],) */;
    %256 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 55), uint64] */, dtype="uint64") /* ty=Tensor[(1, 55), uint64] */;
    %257 = cast(meta[relay.Constant][10] /* ty=Tensor[(330), uint64] */, dtype="uint64") /* ty=Tensor[(330), uint64] */;
    %258 = cast(meta[relay.Constant][11] /* ty=Tensor[(1440), float32] */, dtype="float32") /* ty=Tensor[(1440), float32] */;
    %259 = reshape(%256, newshape=[5, 1, 11]) /* ty=Tensor[(5, 1, 11), uint64] */;
    %260 = reshape(%257, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), uint64] */;
    %261 = reshape(%258, newshape=[1440]) /* ty=Tensor[(1440), float32] */;
    %262 = @func_11812(%259, %260, %261) /* ty=(Tensor[(5, 6, 11), int64], Tensor[(10, 16, 13), uint32], Tensor[(15, 8, 12), float32], Tensor[(1440), float32], Tensor[(5, 1, 11), float64], Tensor[(10, 16, 13), uint32]) */;
    %263 = cast(meta[relay.Constant][12] /* ty=Tensor[(400), float64] */, dtype="float64") /* ty=Tensor[(400), float64] */;
    %264 = cast(%var_12058, dtype="float32") /* ty=Tensor[(208, 4), float32] */;
    %265 = reshape(%263, newshape=[400]) /* ty=Tensor[(400), float64] */;
    %266 = reshape(%264, newshape=[832]) /* ty=Tensor[(832), float32] */;
    %267 = @func_10089(%265, %266) /* ty=(Tensor[(10, 16, 13), float32], Tensor[(8, 13, 8), float64], Tensor[(400), float64], Tensor[(832), float32]) */;
    %268 = cast(meta[relay.Constant][13] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
    %269 = reshape(%268, newshape=[16, 1, 15]) /* ty=Tensor[(16, 1, 15), float32] */;
    %270 = @func_5940(%269) /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(16, ?, 15), float64]) */;
    %271 = logical_or(%253, %254) /* ty=Tensor[(5, 12, 14), bool] */;
    %272 = %255.0;
    %273 = %262.0;
    %274 = %267.2;
    %275 = %270.0;
    (%271, %272, %273, meta[relay.Constant][9] /* ty=Tensor[(1, 55), uint64] */, meta[relay.Constant][10] /* ty=Tensor[(330), uint64] */, meta[relay.Constant][11] /* ty=Tensor[(1440), float32] */, %274, meta[relay.Constant][12] /* ty=Tensor[(400), float64] */, %var_12058, %275, meta[relay.Constant][13] /* ty=Tensor[(240), float32] */)
  };
  %276(%var_12080, %var_12081) /* ty=(Tensor[(5, 12, 14), bool], Tensor[(10, 16, 13), int64], Tensor[(5, 6, 11), int64], Tensor[(1, 55), uint64], Tensor[(330), uint64], Tensor[(1440), float32], Tensor[(400), float64], Tensor[(400), float64], Tensor[(208, 4), float32], Tensor[(10, 16, 13), uint32], Tensor[(240), float32]) */
}

def @func_1408() -> Tensor[(10, 16, 13), int64] {
  @func_1299() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_1178(%var_1177: Tensor[(15, 8, 12), float32]) -> Tensor[(15, 8, 12), float32] {
  %281 = fn (%var_1136: Tensor[(15, 8, 12), float32]) -> Tensor[(15, 8, 12), float32] {
    %277 = cast(-9.43723f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %278 = cast(%var_1136, dtype="float32") /* ty=Tensor[(15, 8, 12), float32] */;
    %279 = floor_mod(%277, %278) /* ty=Tensor[(15, 8, 12), float32] */;
    %280 = cast(%279, dtype="float32") /* ty=Tensor[(15, 8, 12), float32] */;
    acos(%280) /* ty=Tensor[(15, 8, 12), float32] */
  };
  %281(%var_1177) /* ty=Tensor[(15, 8, 12), float32] */
}

def @func_9272() -> (Tensor[(10, 16, 13), float64], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32], Tensor[(3, 13, 8), float64]) {
  %282 = @func_3785() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32]) */;
  %283 = @func_7596() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) */;
  %284 = @func_2776() /* ty=Tensor[(10, 16, 13), float64] */;
  %285 = %282.0;
  %286 = %283.0;
  %287 = @func_8531() /* ty=Tensor[(3, 13, 8), float64] */;
  (%284, %285, %286, %287)
}

def @func_7953() -> Tensor[(10, 16, 13), float64] {
  @func_2776() /* ty=Tensor[(10, 16, 13), float64] */
}

def @func_4881(%var_4794: Tensor[(728), float32], %var_4867: Tensor[(1440), float32]) -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64], Tensor[(78), float64], Tensor[(728), float32], Tensor[(10, 16, 13), int32], Tensor[(234), uint64], Tensor[(2, 11, 5), bool], Tensor[(15, 8, 12), float32], Tensor[(1440), float32], Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64]) {
  %288 = @func_2640() /* ty=Tensor[(10, 16, 13), int64] */;
  %289 = cast(%288, dtype="int64") /* ty=Tensor[(10, 16, 13), int64] */;
  %290 = reshape(%289, newshape=[10, 16, 13]) /* ty=Tensor[(10, 16, 13), int64] */;
  %291 = @func_1439(%290) /* ty=(Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int32]) */;
  %292 = cast(meta[relay.Constant][14] /* ty=Tensor[(78), float64] */, dtype="float64") /* ty=Tensor[(78), float64] */;
  %293 = cast(%var_4794, dtype="float32") /* ty=Tensor[(728), float32] */;
  %294 = cast(meta[relay.Constant][15] /* ty=Tensor[(234), float64] */, dtype="float64") /* ty=Tensor[(234), float64] */;
  %295 = reshape(%292, newshape=[1, 6, 13]) /* ty=Tensor[(1, 6, 13), float64] */;
  %296 = reshape(%293, newshape=[728]) /* ty=Tensor[(728), float32] */;
  %297 = reshape(%294, newshape=[3, 6, 13]) /* ty=Tensor[(3, 6, 13), float64] */;
  %298 = @func_311(%295, %296, %297) /* ty=(Tensor[(?, 6, 13), bool], Tensor[(13, 4, 14), float32], Tensor[(728), float32], Tensor[(13, 4, 14), float32], Tensor[(3, 6, 13), bool], Tensor[(13, 4, 14), float32]) */;
  %299 = %298.4;
  %300 = cast(%299, dtype="uint64") /* ty=Tensor[(3, 6, 13), uint64] */;
  %301 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(234), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %302 = cast(meta[relay.Constant][15] /* ty=Tensor[(234), float64] */, dtype="uint64") /* ty=Tensor[(234), uint64] */;
  %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %304 = @func_1745() /* ty=(Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64], Tensor[(2, 11, 5), bool], Tensor[(11, 10), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), int64]) */;
  %305 = cast(%var_4867, dtype="float32") /* ty=Tensor[(1440), float32] */;
  %306 = reshape(%305, newshape=[15, 8, 12]) /* ty=Tensor[(15, 8, 12), float32] */;
  %307 = @func_4478() /* ty=(Tensor[(10, 16, 13), float32],) */;
  %308 = @func_4769() /* ty=Tensor[(10, 16, 13), int64] */;
  %309 = %291.1;
  %310 = maximum(%302, %303) /* ty=Tensor[(234), uint64] */;
  %311 = %304.2;
  %312 = @func_1176(%306) /* ty=Tensor[(15, 8, 12), float32] */;
  %313 = %307.0;
  %314 = @func_4549() /* ty=Tensor[(10, 16, 13), int64] */;
  (%308, %288, meta[relay.Constant][14] /* ty=Tensor[(78), float64] */, %var_4794, %309, %310, %311, %312, %var_4867, %313, %314)
}

def @func_5204() -> Tensor[(10, 16, 13), int64] {
  %316 = fn () -> Tensor[(10, 16, 13), int64] {
    %315 = @func_3071() /* ty=(Tensor[(10, 16, 13), int64],) */;
    %315.0
  };
  %316() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_6105() -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32]) {
  %320 = fn () -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32]) {
    %317 = @func_1677() /* ty=(Tensor[(10, 16, 13), uint32],) */;
    %318 = @func_1937() /* ty=Tensor[(10, 16, 13), uint32] */;
    %319 = %317.0;
    (%318, %319)
  };
  %320() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32]) */
}

def @func_9195() -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) {
  %321 = @func_3184() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), float32]) */;
  %322 = @func_8375() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %323 = @func_5470() /* ty=Tensor[(10, 16, 13), uint32] */;
  %324 = %321.0;
  %325 = %322.0;
  (%323, %324, %325)
}

def @func_177(%var_176: Tensor[(13, 4, 14), float32]) -> (Tensor[(13, 4, 14), float32],) {
  %331 = fn (%var_165: Tensor[(13, 4, 14), float32]) -> (Tensor[(13, 4, 14), float32],) {
    %326 = cast(meta[relay.Constant][16] /* ty=Tensor[(13, 4, 14), float32] */, dtype="float32") /* ty=Tensor[(13, 4, 14), float32] */;
    %327 = shape_of(%var_165, dtype="int32") /* ty=Tensor[(3), int32] */;
    %328 = cast(%var_165, dtype="float32") /* ty=Tensor[(13, 4, 14), float32] */;
    %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %330 = floor_mod(%328, %329) /* ty=Tensor[(13, 4, 14), float32] */;
    (%330,)
  };
  %331(%var_176) /* ty=(Tensor[(13, 4, 14), float32],) */
}

def @func_1410() -> Tensor[(10, 16, 13), int64] {
  @func_1408() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_4667(%var_4662: Tensor[(10, 16, 13), int64]) -> (Tensor[(10, 16, 13), int16],) {
  %332 = @func_4650() /* ty=Tensor[(10, 16, 13), int64] */;
  %333 = cast(%var_4662, dtype="int16") /* ty=Tensor[(10, 16, 13), int16] */;
  %334 = shape_of(%332, dtype="int32") /* ty=Tensor[(3), int32] */;
  %335 = cast(%332, dtype="int16") /* ty=Tensor[(10, 16, 13), int16] */;
  %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %337 = multiply(%335, %336) /* ty=Tensor[(10, 16, 13), int16] */;
  (%337,)
}

def @func_8555() -> (Tensor[(10, 16, 13), uint32], Tensor[(2, 720), float32]) {
  %342 = fn () -> (Tensor[(10, 16, 13), uint32], Tensor[(2, 720), float32]) {
    %338 = @func_6167() /* ty=Tensor[(2, 720), float64] */;
    %339 = cast(%338, dtype="float32") /* ty=Tensor[(2, 720), float32] */;
    %340 = @func_5141() /* ty=Tensor[(10, 16, 13), uint32] */;
    %341 = log2(%339) /* ty=Tensor[(2, 720), float32] */;
    (%340, %341)
  };
  %342() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(2, 720), float32]) */
}

def @func_4301(%var_4299: Tensor[(234), float64]) -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64], Tensor[(728), float32], Tensor[(624), uint64], Tensor[(10, 16, 13), float64], Tensor[(78), float64], Tensor[(300), float32], Tensor[(300), float32], Tensor[(234), int64], Tensor[(10, 16, 13), float32], Tensor[(2, 720), float32], Tensor[(10, 16, 13), uint32]) {
  @func_4298(%var_4299) /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64], Tensor[(728), float32], Tensor[(624), uint64], Tensor[(10, 16, 13), float64], Tensor[(78), float64], Tensor[(300), float32], Tensor[(300), float32], Tensor[(234), int64], Tensor[(10, 16, 13), float32], Tensor[(2, 720), float32], Tensor[(10, 16, 13), uint32]) */
}

def @func_4328(%var_4323: Tensor[(9, 12, 8), uint64], %var_4324: Tensor[(9, 12, 8), uint64]) -> Tensor[(9, 12, 8), uint64] {
  %343 = cast(%var_4324, dtype="uint64") /* ty=Tensor[(9, 12, 8), uint64] */;
  %344 = shape_of(%var_4323, dtype="int32") /* ty=Tensor[(3), int32] */;
  %345 = cast(%var_4323, dtype="uint64") /* ty=Tensor[(9, 12, 8), uint64] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  minimum(%345, %346) /* ty=Tensor[(9, 12, 8), uint64] */
}

def @func_6848(%var_6804: Tensor[(10, 10, 4), float64], %var_6839: Tensor[(832), float32]) -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 10, 4), bool], Tensor[(8, 13, 8), float64], Tensor[(832), float32]) {
  %347 = cast(%var_6804, dtype="float64") /* ty=Tensor[(10, 10, 4), float64] */;
  %348 = tan(%347) /* ty=Tensor[(10, 10, 4), float64] */;
  %349 = cast(%var_6804, dtype="bool") /* ty=Tensor[(10, 10, 4), bool] */;
  %350 = shape_of(%348, dtype="int32") /* ty=Tensor[(3), int32] */;
  %351 = cast(%348, dtype="bool") /* ty=Tensor[(10, 10, 4), bool] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %353 = cast(%var_6839, dtype="float32") /* ty=Tensor[(832), float32] */;
  %354 = reshape(%353, newshape=[8, 13, 8]) /* ty=Tensor[(8, 13, 8), float32] */;
  %355 = @func_3872(%354) /* ty=(Tensor[(8, 13, 8), float64],) */;
  %356 = @func_1937() /* ty=Tensor[(10, 16, 13), uint32] */;
  %357 = greater_equal(%351, %352) /* ty=Tensor[(10, 10, 4), bool] */;
  %358 = %355.0;
  (%356, %357, %358, %var_6839)
}

def @func_3699(%var_3687: Tensor[(8, 15, 6), float32]) -> (Tensor[(8, 15, 6), float32], Tensor[(300), float32]) {
  %359 = cast(%var_3687, dtype="float32") /* ty=Tensor[(8, 15, 6), float32] */;
  %360 = @func_2424() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(300), float32], Tensor[(10, 16, 13), int64]) */;
  %361 = log2(%359) /* ty=Tensor[(8, 15, 6), float32] */;
  %362 = %360.1;
  (%361, %362)
}

def @func_11734() -> (Tensor[(5, 4, 15), float32], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), float64]) {
  @func_11732() /* ty=(Tensor[(5, 4, 15), float32], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), float64]) */
}

def @func_3910(%var_3909: Tensor[(300), float32]) -> (Tensor[(10, 16, 13), int64], Tensor[(300), float32], Tensor[(300), float32]) {
  %369 = fn (%var_3905: Tensor[(300), float32]) -> (Tensor[(10, 16, 13), int64], Tensor[(300), float32], Tensor[(300), float32]) {
    %363 = @func_1191() /* ty=(Tensor[(10, 16, 13), int64],) */;
    %364 = cast(%var_3905, dtype="float32") /* ty=Tensor[(300), float32] */;
    %365 = reshape(%364, newshape=[300]) /* ty=Tensor[(300), float32] */;
    %366 = @func_2495(%365) /* ty=(Tensor[(10, 16, 13), bool], Tensor[(5, 4, 15), float32], Tensor[(300), float32]) */;
    %367 = %363.0;
    %368 = %366.2;
    (%367, %368, %var_3905)
  };
  %369(%var_3909) /* ty=(Tensor[(10, 16, 13), int64], Tensor[(300), float32], Tensor[(300), float32]) */
}

def @func_4650() -> Tensor[(10, 16, 13), int64] {
  %370 = @func_1745() /* ty=(Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64], Tensor[(2, 11, 5), bool], Tensor[(11, 10), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), int64]) */;
  %370.1
}

def @func_12145() -> (Tensor[(10, 16, 13), uint32],) {
  @func_12143() /* ty=(Tensor[(10, 16, 13), uint32],) */
}

def @func_10037() -> (Tensor[(10, 16, 13), int64], Tensor[(2, 720), uint8]) {
  %382 = fn () -> (Tensor[(10, 16, 13), int64], Tensor[(2, 720), uint8]) {
    %371 = @func_3071() /* ty=(Tensor[(10, 16, 13), int64],) */;
    %372 = @func_3145() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(2, 720), float32]) */;
    %373 = %372.1;
    %374 = cast(%373, dtype="float64") /* ty=Tensor[(2, 720), float64] */;
    %375 = log(%374) /* ty=Tensor[(2, 720), float64] */;
    %376 = cast(%373, dtype="uint8") /* ty=Tensor[(2, 720), uint8] */;
    %377 = shape_of(%375, dtype="int32") /* ty=Tensor[(2), int32] */;
    %378 = cast(%375, dtype="uint8") /* ty=Tensor[(2, 720), uint8] */;
    %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %380 = %371.0;
    %381 = maximum(%378, %379) /* ty=Tensor[(2, 720), uint8] */;
    (%380, %381)
  };
  %382() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(2, 720), uint8]) */
}

def @func_8870() -> (Tensor[(10, 16, 13), int64],) {
  @func_8868() /* ty=(Tensor[(10, 16, 13), int64],) */
}

def @func_11626() -> (Tensor[(10, 16, 13), uint32],) {
  %384 = fn () -> (Tensor[(10, 16, 13), uint32],) {
    %383 = @func_4607() /* ty=Tensor[(10, 16, 13), uint32] */;
    (%383,)
  };
  %384() /* ty=(Tensor[(10, 16, 13), uint32],) */
}

def @func_3702(%var_3700: Tensor[(8, 15, 6), float32]) -> (Tensor[(8, 15, 6), float32], Tensor[(300), float32]) {
  @func_3699(%var_3700) /* ty=(Tensor[(8, 15, 6), float32], Tensor[(300), float32]) */
}

def @func_5499() -> (Tensor[(10, 16, 13), uint32],) {
  @func_5497() /* ty=(Tensor[(10, 16, 13), uint32],) */
}

def @func_11524() -> Tensor[(10, 16, 13), uint32] {
  @func_11522() /* ty=Tensor[(10, 16, 13), uint32] */
}

def @func_4341() -> Tensor[(10, 16, 13), int64] {
  %385 = fn () -> Tensor[(10, 16, 13), int64] {
    @func_1469() /* ty=Tensor[(10, 16, 13), int64] */
  };
  %385() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_8676(%var_8645: Tensor[(1, 11, 8), float32]) -> (Tensor[(1, 11, 8), float32], Tensor[(10, 16, 13), float64]) {
  %386 = cast(%var_8645, dtype="float32") /* ty=Tensor[(1, 11, 8), float32] */;
  %387 = @func_6490() /* ty=(Tensor[(10, 16, 13), float64],) */;
  %388 = erf(%386) /* ty=Tensor[(1, 11, 8), float32] */;
  %389 = %387.0;
  (%388, %389)
}

def @func_7709(%var_7707: Tensor[(300), float32]) -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), float64], Tensor[(10, 16, 13), uint32], Tensor[(5, 4, 15), float32], Tensor[(300), float32]) {
  @func_7706(%var_7707) /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), float64], Tensor[(10, 16, 13), uint32], Tensor[(5, 4, 15), float32], Tensor[(300), float32]) */
}

def @func_12018() -> Tensor[(10, 16, 13), uint32] {
  %390 = @func_3115() /* ty=(Tensor[(2, 720), float32], Tensor[(10, 16, 13), uint32]) */;
  %390.1
}

def @func_9707() -> (Tensor[(10, 16, 13), uint32],) {
  %391 = @func_5186() /* ty=(Tensor[(10, 16, 13), uint32],) */;
  %392 = %391.0;
  (%392,)
}

def @func_10350() -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32]) {
  %397 = fn () -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32]) {
    %393 = @func_5009() /* ty=(Tensor[(10, 16, 13), int64],) */;
    %394 = @func_1816() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32], Tensor[(15, 8, 12), float32], Tensor[(2, 720), float32]) */;
    %395 = %393.0;
    %396 = %394.2;
    (%395, %396)
  };
  %397() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32]) */
}

def @func_6023() -> Tensor[(10, 16, 13), int64] {
  @func_6021() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_4536() -> Tensor[(10, 16, 13), int64] {
  @func_4534() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_3469() -> Tensor[(10, 16, 13), int64] {
  %399 = fn () -> Tensor[(10, 16, 13), int64] {
    %398 = @func_3071() /* ty=(Tensor[(10, 16, 13), int64],) */;
    %398.0
  };
  %399() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_10278(%var_10276: Tensor[(260), uint8]) -> (Tensor[(10, 16, 13), int64], Tensor[(6, 11, 10), bool], Tensor[(110, 6), int32], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(5, 13, 4), int8]) {
  @func_10275(%var_10276) /* ty=(Tensor[(10, 16, 13), int64], Tensor[(6, 11, 10), bool], Tensor[(110, 6), int32], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(5, 13, 4), int8]) */
}

def @func_5497() -> (Tensor[(10, 16, 13), uint32],) {
  %400 = @func_5088() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32]) */;
  %401 = %400.0;
  (%401,)
}

def @func_3956() -> (Tensor[(10, 16, 13), uint32],) {
  @func_3954() /* ty=(Tensor[(10, 16, 13), uint32],) */
}

def @func_7759() -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) {
  @func_7757() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) */
}

def @func_6169() -> Tensor[(2, 720), float64] {
  @func_6167() /* ty=Tensor[(2, 720), float64] */
}

def @func_4136() -> (Tensor[(5, 4, 15), float32],) {
  @func_4134() /* ty=(Tensor[(5, 4, 15), float32],) */
}

def @func_8605() -> Tensor[(10, 16, 13), int64] {
  %403 = fn () -> Tensor[(10, 16, 13), int64] {
    %402 = @func_1191() /* ty=(Tensor[(10, 16, 13), int64],) */;
    %402.0
  };
  %403() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_3954() -> (Tensor[(10, 16, 13), uint32],) {
  %404 = @func_1816() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32], Tensor[(15, 8, 12), float32], Tensor[(2, 720), float32]) */;
  %405 = %404.1;
  (%405,)
}

def @func_6789() -> Tensor[(10, 16, 13), uint32] {
  @func_4000() /* ty=Tensor[(10, 16, 13), uint32] */
}

def @func_2778() -> Tensor[(10, 16, 13), float64] {
  @func_2776() /* ty=Tensor[(10, 16, 13), float64] */
}

def @func_8128() -> (Tensor[(10, 16, 13), int64],) {
  @func_8126() /* ty=(Tensor[(10, 16, 13), int64],) */
}

def @func_2728() -> (Tensor[(300), float32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64]) {
  %413 = fn () -> (Tensor[(300), float32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64]) {
    %406 = @func_2424() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(300), float32], Tensor[(10, 16, 13), int64]) */;
    %407 = @func_1191() /* ty=(Tensor[(10, 16, 13), int64],) */;
    %408 = @func_1191() /* ty=(Tensor[(10, 16, 13), int64],) */;
    %409 = %406.1;
    %410 = %407.0;
    %411 = @func_1937() /* ty=Tensor[(10, 16, 13), uint32] */;
    %412 = %408.0;
    (%409, %410, %411, %412)
  };
  %413() /* ty=(Tensor[(300), float32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64]) */
}

def @func_4134() -> (Tensor[(5, 4, 15), float32],) {
  %414 = @func_2370() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(5, 4, 15), float32], Tensor[(300), float32]) */;
  %415 = %414.1;
  (%415,)
}

def @func_3212(%var_3211: Tensor[(4, 1, 10), float32]) -> (Tensor[(4, 1, 10), float32], Tensor[(10, 16, 13), uint32], Tensor[(624), uint64], Tensor[(10, 16, 13), bool], Tensor[(300), float32]) {
  %428 = fn (%var_3200: Tensor[(4, 1, 10), float32]) -> (Tensor[(4, 1, 10), float32], Tensor[(10, 16, 13), uint32], Tensor[(624), uint64], Tensor[(10, 16, 13), bool], Tensor[(300), float32]) {
    %416 = cast(%var_3200, dtype="float32") /* ty=Tensor[(4, 1, 10), float32] */;
    %417 = cast(meta[relay.Constant][17] /* ty=Tensor[(624), uint64] */, dtype="uint64") /* ty=Tensor[(624), uint64] */;
    %418 = cast(meta[relay.Constant][17] /* ty=Tensor[(624), uint64] */, dtype="uint64") /* ty=Tensor[(624), uint64] */;
    %419 = reshape(%417, newshape=[6, 8, 13]) /* ty=Tensor[(6, 8, 13), uint64] */;
    %420 = reshape(%418, newshape=[6, 8, 13]) /* ty=Tensor[(6, 8, 13), uint64] */;
    %421 = @func_2170(%419, %420) /* ty=(Tensor[(6, 8, 13), uint64], Tensor[(10, 16, 13), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), uint32]) */;
    %422 = cast(meta[relay.Constant][18] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
    %423 = reshape(%422, newshape=[300]) /* ty=Tensor[(300), float32] */;
    %424 = @func_2495(%423) /* ty=(Tensor[(10, 16, 13), bool], Tensor[(5, 4, 15), float32], Tensor[(300), float32]) */;
    %425 = log(%416) /* ty=Tensor[(4, 1, 10), float32] */;
    %426 = %421.3;
    %427 = %424.0;
    (%425, %426, meta[relay.Constant][17] /* ty=Tensor[(624), uint64] */, %427, meta[relay.Constant][18] /* ty=Tensor[(300), float32] */)
  };
  %428(%var_3211) /* ty=(Tensor[(4, 1, 10), float32], Tensor[(10, 16, 13), uint32], Tensor[(624), uint64], Tensor[(10, 16, 13), bool], Tensor[(300), float32]) */
}

def @func_1469() -> Tensor[(10, 16, 13), int64] {
  @func_1408() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_6490() -> (Tensor[(10, 16, 13), float64],) {
  %429 = @func_3034() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %430 = %429.0;
  %431 = cast(%430, dtype="float64") /* ty=Tensor[(10, 16, 13), float64] */;
  %432 = log(%431) /* ty=Tensor[(10, 16, 13), float64] */;
  %433 = cast(%432, dtype="float64") /* ty=Tensor[(10, 16, 13), float64] */;
  %434 = log10(%433) /* ty=Tensor[(10, 16, 13), float64] */;
  (%434,)
}

def @func_3872(%var_3857: Tensor[(8, 13, 8), float32]) -> (Tensor[(8, 13, 8), float64],) {
  %435 = cast(%var_3857, dtype="float32") /* ty=Tensor[(8, 13, 8), float32] */;
  %436 = log10(%435) /* ty=Tensor[(8, 13, 8), float32] */;
  %437 = cast(%436, dtype="float64") /* ty=Tensor[(8, 13, 8), float64] */;
  %438 = sigmoid(%437) /* ty=Tensor[(8, 13, 8), float64] */;
  (%438,)
}

def @func_5472() -> Tensor[(10, 16, 13), uint32] {
  @func_5470() /* ty=Tensor[(10, 16, 13), uint32] */
}

def @func_4670(%var_4668: Tensor[(10, 16, 13), int64]) -> (Tensor[(10, 16, 13), int16],) {
  @func_4667(%var_4668) /* ty=(Tensor[(10, 16, 13), int16],) */
}

def @func_9329(%var_9327: Tensor[(9, 14, 8), float32], %var_9328: Tensor[(9, 14, 8), bool]) -> (Tensor[(10, 16, 13), int64], Tensor[(9, 14, 8), uint32]) {
  %452 = fn (%var_9300: Tensor[(9, 14, 8), float32], %var_9315: Tensor[(9, 14, 8), bool]) -> (Tensor[(10, 16, 13), int64], Tensor[(9, 14, 8), uint32]) {
    %439 = cast(%var_9300, dtype="float32") /* ty=Tensor[(9, 14, 8), float32] */;
    %440 = sinh(%439) /* ty=Tensor[(9, 14, 8), float32] */;
    %441 = cast(%440, dtype="bool") /* ty=Tensor[(9, 14, 8), bool] */;
    %442 = shape_of(%var_9300, dtype="int32") /* ty=Tensor[(3), int32] */;
    %443 = cast(%var_9300, dtype="bool") /* ty=Tensor[(9, 14, 8), bool] */;
    %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %445 = less(%443, %444) /* ty=Tensor[(9, 14, 8), bool] */;
    %446 = cast(%var_9315, dtype="uint32") /* ty=Tensor[(9, 14, 8), uint32] */;
    %447 = shape_of(%445, dtype="int32") /* ty=Tensor[(3), int32] */;
    %448 = cast(%445, dtype="uint32") /* ty=Tensor[(9, 14, 8), uint32] */;
    %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %450 = @func_2640() /* ty=Tensor[(10, 16, 13), int64] */;
    %451 = minimum(%448, %449) /* ty=Tensor[(9, 14, 8), uint32] */;
    (%450, %451)
  };
  %452(%var_9327, %var_9328) /* ty=(Tensor[(10, 16, 13), int64], Tensor[(9, 14, 8), uint32]) */
}

def @func_4688(%var_4675: Tensor[(3, 2, 13), uint16], %var_4676: Tensor[(3, 2, 13), uint16]) -> (Tensor[(3, 2, 13), uint16], Tensor[(13, 5, 6), float32], Tensor[(390), float32]) {
  %453 = cast(%var_4676, dtype="uint16") /* ty=Tensor[(3, 2, 13), uint16] */;
  %454 = shape_of(%var_4675, dtype="int32") /* ty=Tensor[(3), int32] */;
  %455 = cast(%var_4675, dtype="uint16") /* ty=Tensor[(3, 2, 13), uint16] */;
  %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %457 = cast(meta[relay.Constant][19] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %458 = reshape(%457, newshape=[13, 5, 6]) /* ty=Tensor[(13, 5, 6), float32] */;
  %459 = right_shift(%455, %456) /* ty=Tensor[(3, 2, 13), uint16] */;
  %460 = @func_2651(%458) /* ty=Tensor[(13, 5, 6), float32] */;
  (%459, %460, meta[relay.Constant][19] /* ty=Tensor[(390), float32] */)
}

def @func_7979() -> Tensor[(10, 16, 13), int64] {
  %461 = fn () -> Tensor[(10, 16, 13), int64] {
    @func_4769() /* ty=Tensor[(10, 16, 13), int64] */
  };
  %461() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_8168() -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), float32], Tensor[(1440), float32]) {
  @func_8166() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), float32], Tensor[(1440), float32]) */
}

def @func_12437() -> (Tensor[(10, 16, 13), int64],) {
  %462 = @func_6036() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %463 = %462.0;
  (%463,)
}

def @func_7142() -> Tensor[(10, 16, 13), uint32] {
  %465 = fn () -> Tensor[(10, 16, 13), uint32] {
    %464 = @func_3954() /* ty=(Tensor[(10, 16, 13), uint32],) */;
    %464.0
  };
  %465() /* ty=Tensor[(10, 16, 13), uint32] */
}

def @func_8787() -> (Tensor[(10, 16, 13), uint32], Tensor[(3, 13, 8), float64]) {
  @func_8785() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(3, 13, 8), float64]) */
}

def @func_2776() -> Tensor[(10, 16, 13), float64] {
  %466 = @func_1677() /* ty=(Tensor[(10, 16, 13), uint32],) */;
  %467 = %466.0;
  %468 = cast(%467, dtype="float64") /* ty=Tensor[(10, 16, 13), float64] */;
  exp(%468) /* ty=Tensor[(10, 16, 13), float64] */
}

def @func_7706(%var_7703: Tensor[(300), float32]) -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), float64], Tensor[(10, 16, 13), uint32], Tensor[(5, 4, 15), float32], Tensor[(300), float32]) {
  %469 = @func_2727() /* ty=(Tensor[(300), float32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64]) */;
  %470 = @func_6548() /* ty=(Tensor[(10, 16, 13), float64],) */;
  %471 = cast(%var_7703, dtype="float32") /* ty=Tensor[(300), float32] */;
  %472 = cast(%var_7703, dtype="float32") /* ty=Tensor[(300), float32] */;
  %473 = reshape(%471, newshape=[5, 4, 15]) /* ty=Tensor[(5, 4, 15), float32] */;
  %474 = reshape(%472, newshape=[5, 4, 15]) /* ty=Tensor[(5, 4, 15), float32] */;
  %475 = @func_1100(%473, %474) /* ty=(Tensor[(5, 4, 15), float32],) */;
  %476 = @func_2394() /* ty=Tensor[(10, 16, 13), uint32] */;
  %477 = %469.3;
  %478 = %470.0;
  %479 = @func_4000() /* ty=Tensor[(10, 16, 13), uint32] */;
  %480 = %475.0;
  (%476, %477, %478, %479, %480, %var_7703)
}

def @func_7955() -> Tensor[(10, 16, 13), float64] {
  @func_7953() /* ty=Tensor[(10, 16, 13), float64] */
}

def @func_11912() -> (Tensor[(2, 720), float32], Tensor[(10, 16, 13), int64]) {
  @func_11910() /* ty=(Tensor[(2, 720), float32], Tensor[(10, 16, 13), int64]) */
}

def @func_6453() -> (Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32]) {
  @func_6451() /* ty=(Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32]) */
}

def @func_6037() -> (Tensor[(10, 16, 13), int64],) {
  %482 = fn () -> (Tensor[(10, 16, 13), int64],) {
    %481 = @func_3468() /* ty=Tensor[(10, 16, 13), int64] */;
    (%481,)
  };
  %482() /* ty=(Tensor[(10, 16, 13), int64],) */
}

def @func_6119() -> (Tensor[(3, 13, 8), float64],) {
  %483 = cast(meta[relay.Constant][20] /* ty=Tensor[(3, 13, 8), float64] */, dtype="float64") /* ty=Tensor[(3, 13, 8), float64] */;
  %484 = asin(%483) /* ty=Tensor[(3, 13, 8), float64] */;
  (%484,)
}

def @func_2450() -> Tensor[(10, 16, 13), int64] {
  %485 = fn () -> Tensor[(10, 16, 13), int64] {
    @func_1299() /* ty=Tensor[(10, 16, 13), int64] */
  };
  %485() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_11603() -> (Tensor[(10, 16, 13), int64],) {
  %486 = @func_6021() /* ty=Tensor[(10, 16, 13), int64] */;
  (%486,)
}

def @func_10556() -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) {
  %490 = fn () -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) {
    %487 = @func_3034() /* ty=(Tensor[(10, 16, 13), int64],) */;
    %488 = %487.0;
    %489 = @func_7208() /* ty=Tensor[(10, 16, 13), int64] */;
    (%488, %489)
  };
  %490() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) */
}

def @func_2498(%var_2496: Tensor[(300), float32]) -> (Tensor[(10, 16, 13), bool], Tensor[(5, 4, 15), float32], Tensor[(300), float32]) {
  @func_2495(%var_2496) /* ty=(Tensor[(10, 16, 13), bool], Tensor[(5, 4, 15), float32], Tensor[(300), float32]) */
}

def @func_11287() -> Tensor[(3, 13, 8), float64] {
  %491 = @func_6119() /* ty=(Tensor[(3, 13, 8), float64],) */;
  %491.0
}

def @func_11947() -> (Tensor[(10, 16, 13), int64],) {
  %494 = fn () -> (Tensor[(10, 16, 13), int64],) {
    %492 = @func_3323() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) */;
    %493 = %492.1;
    (%493,)
  };
  %494() /* ty=(Tensor[(10, 16, 13), int64],) */
}

def @func_5895(%var_5894: Tensor[(728, 1), float32]) -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), float64], Tensor[(728, 7), bool], Tensor[(10, 16, 13), int64]) {
  %506 = fn (%var_5850: Tensor[(728, 1), float32]) -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), float64], Tensor[(728, 7), bool], Tensor[(10, 16, 13), int64]) {
    %495 = @func_3034() /* ty=(Tensor[(10, 16, 13), int64],) */;
    %496 = cast(%var_5850, dtype="float32") /* ty=Tensor[(728, 1), float32] */;
    %497 = reshape(%496, newshape=[728]) /* ty=Tensor[(728), float32] */;
    %498 = @func_3501(%497) /* ty=(Tensor[(10, 16, 13), int64], Tensor[(13, 4, 14), float32], Tensor[(78), float64], Tensor[(728), float32], Tensor[(234), float64]) */;
    %499 = cast(%var_5850, dtype="bool") /* ty=Tensor[(728, 1), bool] */;
    %500 = cast(meta[relay.Constant][21] /* ty=Tensor[(728, 7), float32] */, dtype="bool") /* ty=Tensor[(728, 7), bool] */;
    %501 = %495.0;
    %502 = %498.0;
    %503 = @func_3842() /* ty=Tensor[(10, 16, 13), float64] */;
    %504 = less(%499, %500) /* ty=Tensor[(728, 7), bool] */;
    %505 = @func_4769() /* ty=Tensor[(10, 16, 13), int64] */;
    (%501, %502, %503, %504, %505)
  };
  %506(%var_5894) /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), float64], Tensor[(728, 7), bool], Tensor[(10, 16, 13), int64]) */
}

def @func_11578() -> (Tensor[(300), float32], Tensor[(10, 16, 13), int64]) {
  %510 = fn () -> (Tensor[(300), float32], Tensor[(10, 16, 13), int64]) {
    %507 = @func_2727() /* ty=(Tensor[(300), float32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64]) */;
    %508 = %507.0;
    %509 = @func_8604() /* ty=Tensor[(10, 16, 13), int64] */;
    (%508, %509)
  };
  %510() /* ty=(Tensor[(300), float32], Tensor[(10, 16, 13), int64]) */
}

def @func_8705() -> (Tensor[(10, 16, 13), int64],) {
  %511 = @func_3071() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %512 = %511.0;
  (%512,)
}

def @func_8166() -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), float32], Tensor[(1440), float32]) {
  %513 = cast(meta[relay.Constant][22] /* ty=Tensor[(1440), float32] */, dtype="float32") /* ty=Tensor[(1440), float32] */;
  %514 = reshape(%513, newshape=[60, 24]) /* ty=Tensor[(60, 24), float32] */;
  %515 = @func_1874(%514) /* ty=(Tensor[(10, 16, 13), float32], Tensor[(15, 8, 12), int32], Tensor[(60, 24), float32]) */;
  %516 = @func_4769() /* ty=Tensor[(10, 16, 13), int64] */;
  %517 = %515.0;
  (%516, %517, meta[relay.Constant][22] /* ty=Tensor[(1440), float32] */)
}

def @func_4534() -> Tensor[(10, 16, 13), int64] {
  %518 = @func_3145() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(2, 720), float32]) */;
  %518.0
}

def @func_9897(%var_9895: Tensor[(15, 7, 7), bool]) -> (Tensor[(15, 7, 7), bool], Tensor[(10, 16, 13), float64], Tensor[(15, 7, 7), float32], Tensor[(3, 13, 8), float64]) {
  @func_9894(%var_9895) /* ty=(Tensor[(15, 7, 7), bool], Tensor[(10, 16, 13), float64], Tensor[(15, 7, 7), float32], Tensor[(3, 13, 8), float64]) */
}

def @func_11689(%var_11687: Tensor[(864), uint64], %var_11688: Tensor[(832), float32]) -> (Tensor[(10, 16, 13), int64], Tensor[(9, 12, 8), uint64], Tensor[(864), uint64], Tensor[(8, 13, 8), float64], Tensor[(832), float32]) {
  %530 = fn (%var_11674: Tensor[(864), uint64], %var_11684: Tensor[(832), float32]) -> (Tensor[(10, 16, 13), int64], Tensor[(9, 12, 8), uint64], Tensor[(864), uint64], Tensor[(8, 13, 8), float64], Tensor[(832), float32]) {
    %519 = @func_3323() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) */;
    %520 = cast(%var_11674, dtype="uint64") /* ty=Tensor[(864), uint64] */;
    %521 = cast(%var_11674, dtype="uint64") /* ty=Tensor[(864), uint64] */;
    %522 = reshape(%520, newshape=[9, 12, 8]) /* ty=Tensor[(9, 12, 8), uint64] */;
    %523 = reshape(%521, newshape=[9, 12, 8]) /* ty=Tensor[(9, 12, 8), uint64] */;
    %524 = cast(%var_11684, dtype="float32") /* ty=Tensor[(832), float32] */;
    %525 = reshape(%524, newshape=[8, 13, 8]) /* ty=Tensor[(8, 13, 8), float32] */;
    %526 = @func_3872(%525) /* ty=(Tensor[(8, 13, 8), float64],) */;
    %527 = %519.0;
    %528 = @func_4328(%522, %523) /* ty=Tensor[(9, 12, 8), uint64] */;
    %529 = %526.0;
    (%527, %528, %var_11674, %529, %var_11684)
  };
  %530(%var_11687, %var_11688) /* ty=(Tensor[(10, 16, 13), int64], Tensor[(9, 12, 8), uint64], Tensor[(864), uint64], Tensor[(8, 13, 8), float64], Tensor[(832), float32]) */
}

def @func_10757() -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64]) {
  @func_10755() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64]) */
}

def @func_4298(%var_4220: Tensor[(234), float64]) -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64], Tensor[(728), float32], Tensor[(624), uint64], Tensor[(10, 16, 13), float64], Tensor[(78), float64], Tensor[(300), float32], Tensor[(300), float32], Tensor[(234), int64], Tensor[(10, 16, 13), float32], Tensor[(2, 720), float32], Tensor[(10, 16, 13), uint32]) {
  %531 = @func_1191() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %532 = cast(meta[relay.Constant][23] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
  %533 = reshape(%532, newshape=[728]) /* ty=Tensor[(728), float32] */;
  %534 = @func_3501(%533) /* ty=(Tensor[(10, 16, 13), int64], Tensor[(13, 4, 14), float32], Tensor[(78), float64], Tensor[(728), float32], Tensor[(234), float64]) */;
  %535 = cast(meta[relay.Constant][24] /* ty=Tensor[(624), uint64] */, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %536 = cast(meta[relay.Constant][24] /* ty=Tensor[(624), uint64] */, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %537 = reshape(%535, newshape=[6, 8, 13]) /* ty=Tensor[(6, 8, 13), uint64] */;
  %538 = reshape(%536, newshape=[6, 8, 13]) /* ty=Tensor[(6, 8, 13), uint64] */;
  %539 = @func_2170(%537, %538) /* ty=(Tensor[(6, 8, 13), uint64], Tensor[(10, 16, 13), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), uint32]) */;
  %540 = %539.1;
  %541 = cast(%540, dtype="float64") /* ty=Tensor[(10, 16, 13), float64] */;
  %542 = cast(meta[relay.Constant][26] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %543 = reshape(%542, newshape=[300]) /* ty=Tensor[(300), float32] */;
  %544 = @func_3908(%543) /* ty=(Tensor[(10, 16, 13), int64], Tensor[(300), float32], Tensor[(300), float32]) */;
  %545 = cast(meta[relay.Constant][25] /* ty=Tensor[(78), float64] */, dtype="float64") /* ty=Tensor[(78), float64] */;
  %546 = cast(meta[relay.Constant][23] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
  %547 = cast(%var_4220, dtype="float64") /* ty=Tensor[(234), float64] */;
  %548 = reshape(%545, newshape=[1, 6, 13]) /* ty=Tensor[(1, 6, 13), float64] */;
  %549 = reshape(%546, newshape=[728]) /* ty=Tensor[(728), float32] */;
  %550 = reshape(%547, newshape=[3, 6, 13]) /* ty=Tensor[(3, 6, 13), float64] */;
  %551 = @func_311(%548, %549, %550) /* ty=(Tensor[(?, 6, 13), bool], Tensor[(13, 4, 14), float32], Tensor[(728), float32], Tensor[(13, 4, 14), float32], Tensor[(3, 6, 13), bool], Tensor[(13, 4, 14), float32]) */;
  %552 = %551.4;
  %553 = cast(%552, dtype="int64") /* ty=Tensor[(3, 6, 13), int64] */;
  %554 = shape_of(%var_4220, dtype="int32") /* ty=Tensor[(1), int32] */;
  %555 = cast(%var_4220, dtype="int64") /* ty=Tensor[(234), int64] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?), int64] */;
  %557 = @func_1191() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %558 = %557.0;
  %559 = cast(%558, dtype="float32") /* ty=Tensor[(10, 16, 13), float32] */;
  %560 = @func_1918() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(2, 720), float32]) */;
  %561 = @func_3785() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32]) */;
  %562 = %531.0;
  %563 = %534.0;
  %564 = asinh(%541) /* ty=Tensor[(10, 16, 13), float64] */;
  %565 = %544.1;
  %566 = left_shift(%555, %556) /* ty=Tensor[(234), int64] */;
  %567 = acosh(%559) /* ty=Tensor[(10, 16, 13), float32] */;
  %568 = %560.1;
  %569 = %561.1;
  (%562, %563, meta[relay.Constant][23] /* ty=Tensor[(728), float32] */, meta[relay.Constant][24] /* ty=Tensor[(624), uint64] */, %564, meta[relay.Constant][25] /* ty=Tensor[(78), float64] */, %565, meta[relay.Constant][26] /* ty=Tensor[(300), float32] */, %566, %567, %568, %569)
}

def @func_1193() -> (Tensor[(10, 16, 13), int64],) {
  @func_1191() /* ty=(Tensor[(10, 16, 13), int64],) */
}

def @func_3875(%var_3873: Tensor[(8, 13, 8), float32]) -> (Tensor[(8, 13, 8), float64],) {
  @func_3872(%var_3873) /* ty=(Tensor[(8, 13, 8), float64],) */
}

def @func_4652() -> Tensor[(10, 16, 13), int64] {
  @func_4650() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_4608() -> Tensor[(10, 16, 13), uint32] {
  %570 = fn () -> Tensor[(10, 16, 13), uint32] {
    @func_2394() /* ty=Tensor[(10, 16, 13), uint32] */
  };
  %570() /* ty=Tensor[(10, 16, 13), uint32] */
}

def @func_10706() -> (Tensor[(2, 720), float32],) {
  %573 = fn () -> (Tensor[(2, 720), float32],) {
    %571 = @func_1918() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(2, 720), float32]) */;
    %572 = %571.1;
    (%572,)
  };
  %573() /* ty=(Tensor[(2, 720), float32],) */
}

def @func_4769() -> Tensor[(10, 16, 13), int64] {
  @func_2640() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_7318() -> (Tensor[(300), float32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), float32], Tensor[(2, 6, 16), float32], Tensor[(10, 16, 13), float64]) {
  @func_7316() /* ty=(Tensor[(300), float32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), float32], Tensor[(2, 6, 16), float32], Tensor[(10, 16, 13), float64]) */
}

def @func_2424() -> (Tensor[(10, 16, 13), uint32], Tensor[(300), float32], Tensor[(10, 16, 13), int64]) {
  %574 = @func_2370() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(5, 4, 15), float32], Tensor[(300), float32]) */;
  %575 = @func_1937() /* ty=Tensor[(10, 16, 13), uint32] */;
  %576 = %574.2;
  %577 = @func_1469() /* ty=Tensor[(10, 16, 13), int64] */;
  (%575, %576, %577)
}

def @func_10781(%var_10779: Tensor[(8, 4, 5), int16], %var_10780: Tensor[(8, 4, 5), int16]) -> Tensor[(8, 4, 5), bool] {
  %582 = fn (%var_10770: Tensor[(8, 4, 5), int16], %var_10771: Tensor[(8, 4, 5), int16]) -> Tensor[(8, 4, 5), bool] {
    %578 = cast(%var_10771, dtype="bool") /* ty=Tensor[(8, 4, 5), bool] */;
    %579 = shape_of(%var_10770, dtype="int32") /* ty=Tensor[(3), int32] */;
    %580 = cast(%var_10770, dtype="bool") /* ty=Tensor[(8, 4, 5), bool] */;
    %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%580, %581) /* ty=Tensor[(8, 4, 5), bool] */
  };
  %582(%var_10779, %var_10780) /* ty=Tensor[(8, 4, 5), bool] */
}

def @func_4948(%var_4946: Tensor[(260), uint8]) -> (Tensor[(10, 16, 13), int64], Tensor[(5, 13, 4), float64], Tensor[(260), uint8]) {
  @func_4945(%var_4946) /* ty=(Tensor[(10, 16, 13), int64], Tensor[(5, 13, 4), float64], Tensor[(260), uint8]) */
}

def @func_11817(%var_11814: Tensor[(5, 1, 11), uint64], %var_11815: Tensor[(5, 6, 11), uint64], %var_11816: Tensor[(1440), float32]) -> (Tensor[(5, 6, 11), int64], Tensor[(10, 16, 13), uint32], Tensor[(15, 8, 12), float32], Tensor[(1440), float32], Tensor[(5, 1, 11), float64], Tensor[(10, 16, 13), uint32]) {
  @func_11812(%var_11814, %var_11815, %var_11816) /* ty=(Tensor[(5, 6, 11), int64], Tensor[(10, 16, 13), uint32], Tensor[(15, 8, 12), float32], Tensor[(1440), float32], Tensor[(5, 1, 11), float64], Tensor[(10, 16, 13), uint32]) */
}

def @func_10854() -> Tensor[(10, 16, 13), int64] {
  %584 = fn () -> Tensor[(10, 16, 13), int64] {
    %583 = @func_1191() /* ty=(Tensor[(10, 16, 13), int64],) */;
    %583.0
  };
  %584() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_3050() -> (Tensor[(10, 16, 13), int64],) {
  %585 = @func_3034() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %586 = %585.0;
  (%586,)
}

def @func_11732() -> (Tensor[(5, 4, 15), float32], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), float64]) {
  %587 = @func_2370() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(5, 4, 15), float32], Tensor[(300), float32]) */;
  %588 = @func_5470() /* ty=Tensor[(10, 16, 13), uint32] */;
  %589 = cast(%588, dtype="int64") /* ty=Tensor[(10, 16, 13), int64] */;
  %590 = reshape(%589, newshape=[10, 16, 13]) /* ty=Tensor[(10, 16, 13), int64] */;
  %591 = @func_8470(%590) /* ty=(Tensor[(10, 16, 13), float64], Tensor[(10, 16, 13), float64]) */;
  %592 = %587.1;
  %593 = %591.1;
  (%592, %588, %593)
}

def @func_12293() -> (Tensor[(10, 16, 13), uint32],) {
  %594 = @func_4607() /* ty=Tensor[(10, 16, 13), uint32] */;
  (%594,)
}

def @func_10140() -> (Tensor[(2, 720), float32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) {
  %601 = fn () -> (Tensor[(2, 720), float32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) {
    %595 = @func_8554() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(2, 720), float32]) */;
    %596 = @func_9195() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) */;
    %597 = @func_2870() /* ty=(Tensor[(10, 16, 13), int64],) */;
    %598 = %595.1;
    %599 = %596.1;
    %600 = %597.0;
    (%598, %599, %600)
  };
  %601() /* ty=(Tensor[(2, 720), float32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) */
}

def @func_2394() -> Tensor[(10, 16, 13), uint32] {
  %602 = @func_1677() /* ty=(Tensor[(10, 16, 13), uint32],) */;
  %602.0
}

def @func_2872() -> (Tensor[(10, 16, 13), int64],) {
  @func_2870() /* ty=(Tensor[(10, 16, 13), int64],) */
}

def @func_12374() -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int16]) {
  @func_12372() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int16]) */
}

def @func_7209() -> Tensor[(10, 16, 13), int64] {
  %603 = fn () -> Tensor[(10, 16, 13), int64] {
    @func_2449() /* ty=Tensor[(10, 16, 13), int64] */
  };
  %603() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_2174(%var_2172: Tensor[(6, 8, 13), uint64], %var_2173: Tensor[(6, 8, 13), uint64]) -> (Tensor[(6, 8, 13), uint64], Tensor[(10, 16, 13), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), uint32]) {
  @func_2170(%var_2172, %var_2173) /* ty=(Tensor[(6, 8, 13), uint64], Tensor[(10, 16, 13), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), uint32]) */
}

def @func_6733() -> (Tensor[(10, 16, 13), float64], Tensor[(10, 16, 13), uint32]) {
  @func_6731() /* ty=(Tensor[(10, 16, 13), float64], Tensor[(10, 16, 13), uint32]) */
}

def @func_6451() -> (Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32]) {
  %604 = @func_4478() /* ty=(Tensor[(10, 16, 13), float32],) */;
  %605 = @func_3785() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32]) */;
  %606 = %604.0;
  %607 = %605.0;
  %608 = @func_2394() /* ty=Tensor[(10, 16, 13), uint32] */;
  (%606, %607, %608)
}

def @func_11314(%var_11312: Tensor[(11, 15, 11), float64]) -> (Tensor[(11, 15, 11), float64], Tensor[(10, 16, 13), float32]) {
  @func_11311(%var_11312) /* ty=(Tensor[(11, 15, 11), float64], Tensor[(10, 16, 13), float32]) */
}

def @func_2426() -> (Tensor[(10, 16, 13), uint32], Tensor[(300), float32], Tensor[(10, 16, 13), int64]) {
  @func_2424() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(300), float32], Tensor[(10, 16, 13), int64]) */
}

def @func_5940(%var_5934: Tensor[(16, 1, 15), float32]) -> (Tensor[(10, 16, 13), uint32], Tensor[(16, ?, 15), float64]) {
  %609 = @func_3115() /* ty=(Tensor[(2, 720), float32], Tensor[(10, 16, 13), uint32]) */;
  %610 = @func_5706() /* ty=(Tensor[(16, 1, 15), float32],) */;
  %611 = %610.0;
  %612 = cast(%var_5934, dtype="float64") /* ty=Tensor[(16, 1, 15), float64] */;
  %613 = shape_of(%611, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(%611, dtype="float64") /* ty=Tensor[(16, 1, 15), float64] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %616 = %609.1;
  %617 = maximum(%614, %615) /* ty=Tensor[(16, ?, 15), float64] */;
  (%616, %617)
}

def @func_9815(%var_9813: Tensor[(5, 16, 16), int32], %var_9814: Tensor[(5, 16, 16), int32]) -> Tensor[(5, 16, 16), int32] {
  @func_9811(%var_9813, %var_9814) /* ty=Tensor[(5, 16, 16), int32] */
}

def @func_11361(%var_11360: Tensor[(15, 10, 11), float32]) -> (Tensor[(15, 10, 11), float32], Tensor[(10, 16, 13), int64], Tensor[(3, 13, 8), float64]) {
  %623 = fn (%var_11333: Tensor[(15, 10, 11), float32]) -> (Tensor[(15, 10, 11), float32], Tensor[(10, 16, 13), int64], Tensor[(3, 13, 8), float64]) {
    %618 = cast(%var_11333, dtype="float32") /* ty=Tensor[(15, 10, 11), float32] */;
    %619 = @func_1745() /* ty=(Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64], Tensor[(2, 11, 5), bool], Tensor[(11, 10), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), int64]) */;
    %620 = atanh(%618) /* ty=Tensor[(15, 10, 11), float32] */;
    %621 = %619.1;
    %622 = @func_8531() /* ty=Tensor[(3, 13, 8), float64] */;
    (%620, %621, %622)
  };
  %623(%var_11360) /* ty=(Tensor[(15, 10, 11), float32], Tensor[(10, 16, 13), int64], Tensor[(3, 13, 8), float64]) */
}

def @func_3145() -> (Tensor[(10, 16, 13), int64], Tensor[(2, 720), float32]) {
  %624 = @func_3071() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %625 = @func_1816() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32], Tensor[(15, 8, 12), float32], Tensor[(2, 720), float32]) */;
  %626 = %624.0;
  %627 = %625.4;
  (%626, %627)
}

def @func_11289() -> Tensor[(3, 13, 8), float64] {
  @func_11287() /* ty=Tensor[(3, 13, 8), float64] */
}

def @func_11311(%var_11298: Tensor[(11, 15, 11), float64]) -> (Tensor[(11, 15, 11), float64], Tensor[(10, 16, 13), float32]) {
  %628 = cast(%var_11298, dtype="float64") /* ty=Tensor[(11, 15, 11), float64] */;
  %629 = @func_4478() /* ty=(Tensor[(10, 16, 13), float32],) */;
  %630 = log2(%628) /* ty=Tensor[(11, 15, 11), float64] */;
  %631 = %629.0;
  (%630, %631)
}

def @func_2370() -> (Tensor[(10, 16, 13), uint32], Tensor[(5, 4, 15), float32], Tensor[(300), float32]) {
  %632 = @func_1677() /* ty=(Tensor[(10, 16, 13), uint32],) */;
  %633 = cast(meta[relay.Constant][27] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %634 = cast(meta[relay.Constant][27] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %635 = reshape(%633, newshape=[5, 4, 15]) /* ty=Tensor[(5, 4, 15), float32] */;
  %636 = reshape(%634, newshape=[5, 4, 15]) /* ty=Tensor[(5, 4, 15), float32] */;
  %637 = @func_1100(%635, %636) /* ty=(Tensor[(5, 4, 15), float32],) */;
  %638 = %632.0;
  %639 = %637.0;
  (%638, %639, meta[relay.Constant][27] /* ty=Tensor[(300), float32] */)
}

def @func_12399() -> (Tensor[(10, 16, 13), int64], Tensor[(2, 720), float32], Tensor[(10, 16, 13), int64]) {
  @func_12397() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(2, 720), float32], Tensor[(10, 16, 13), int64]) */
}

def @func_315(%var_312: Tensor[(1, 6, 13), float64], %var_313: Tensor[(728), float32], %var_314: Tensor[(3, 6, 13), float64]) -> (Tensor[(?, 6, 13), bool], Tensor[(13, 4, 14), float32], Tensor[(728), float32], Tensor[(13, 4, 14), float32], Tensor[(3, 6, 13), bool], Tensor[(13, 4, 14), float32]) {
  %669 = fn (%var_261: Tensor[(1, 6, 13), float64], %var_288: Tensor[(728), float32], %var_296: Tensor[(3, 6, 13), float64]) -> (Tensor[(?, 6, 13), bool], Tensor[(13, 4, 14), float32], Tensor[(728), float32], Tensor[(13, 4, 14), float32], Tensor[(3, 6, 13), bool], Tensor[(13, 4, 14), float32]) {
    %640 = cast(%var_261, dtype="float64") /* ty=Tensor[(1, 6, 13), float64] */;
    %641 = erf(%640) /* ty=Tensor[(1, 6, 13), float64] */;
    %642 = cast(%var_261, dtype="uint16") /* ty=Tensor[(1, 6, 13), uint16] */;
    %643 = shape_of(%641, dtype="int32") /* ty=Tensor[(3), int32] */;
    %644 = cast(%641, dtype="uint16") /* ty=Tensor[(1, 6, 13), uint16] */;
    %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %646 = bitwise_or(%644, %645) /* ty=Tensor[(?, 6, 13), uint16] */;
    %647 = cast(%646, dtype="bool") /* ty=Tensor[(?, 6, 13), bool] */;
    %648 = shape_of(%641, dtype="int32") /* ty=Tensor[(3), int32] */;
    %649 = cast(%641, dtype="bool") /* ty=Tensor[(1, 6, 13), bool] */;
    %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %651 = cast(%var_288, dtype="float32") /* ty=Tensor[(728), float32] */;
    %652 = reshape(%651, newshape=[13, 4, 14]) /* ty=Tensor[(13, 4, 14), float32] */;
    %653 = @func_175(%652) /* ty=(Tensor[(13, 4, 14), float32],) */;
    %654 = cast(%var_288, dtype="float32") /* ty=Tensor[(728), float32] */;
    %655 = reshape(%654, newshape=[13, 4, 14]) /* ty=Tensor[(13, 4, 14), float32] */;
    %656 = @func_175(%655) /* ty=(Tensor[(13, 4, 14), float32],) */;
    %657 = cast(%641, dtype="float64") /* ty=Tensor[(1, 6, 13), float64] */;
    %658 = acosh(%657) /* ty=Tensor[(1, 6, 13), float64] */;
    %659 = cast(%658, dtype="bool") /* ty=Tensor[(1, 6, 13), bool] */;
    %660 = cast(%var_296, dtype="bool") /* ty=Tensor[(3, 6, 13), bool] */;
    %661 = %653.0;
    %662 = cast(%661, dtype="float32") /* ty=Tensor[(13, 4, 14), float32] */;
    %663 = reshape(%662, newshape=[13, 4, 14]) /* ty=Tensor[(13, 4, 14), float32] */;
    %664 = @func_175(%663) /* ty=(Tensor[(13, 4, 14), float32],) */;
    %665 = greater(%649, %650) /* ty=Tensor[(?, 6, 13), bool] */;
    %666 = %656.0;
    %667 = less_equal(%659, %660) /* ty=Tensor[(3, 6, 13), bool] */;
    %668 = %664.0;
    (%665, %661, %var_288, %666, %667, %668)
  };
  %669(%var_312, %var_313, %var_314) /* ty=(Tensor[(?, 6, 13), bool], Tensor[(13, 4, 14), float32], Tensor[(728), float32], Tensor[(13, 4, 14), float32], Tensor[(3, 6, 13), bool], Tensor[(13, 4, 14), float32]) */
}

def @func_10948() -> Tensor[(10, 16, 13), int64] {
  %670 = fn () -> Tensor[(10, 16, 13), int64] {
    @func_6021() /* ty=Tensor[(10, 16, 13), int64] */
  };
  %670() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_5774() -> (Tensor[(5, 4, 15), float64],) {
  %675 = fn () -> (Tensor[(5, 4, 15), float64],) {
    %671 = @func_4134() /* ty=(Tensor[(5, 4, 15), float32],) */;
    %672 = %671.0;
    %673 = cast(%672, dtype="float64") /* ty=Tensor[(5, 4, 15), float64] */;
    %674 = tan(%673) /* ty=Tensor[(5, 4, 15), float64] */;
    (%674,)
  };
  %675() /* ty=(Tensor[(5, 4, 15), float64],) */
}

def @func_2053() -> Tensor[(10, 16, 13), int64] {
  %676 = fn () -> Tensor[(10, 16, 13), int64] {
    @func_1469() /* ty=Tensor[(10, 16, 13), int64] */
  };
  %676() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_4114(%var_4112: Tensor[(260), uint8]) -> (Tensor[(10, 16, 13), int64], Tensor[(5, 13, 4), float64], Tensor[(260), uint8], Tensor[(10, 16, 13), int64]) {
  @func_4111(%var_4112) /* ty=(Tensor[(10, 16, 13), int64], Tensor[(5, 13, 4), float64], Tensor[(260), uint8], Tensor[(10, 16, 13), int64]) */
}

def @func_11219() -> (Tensor[(10, 16, 13), int64],) {
  %679 = fn () -> (Tensor[(10, 16, 13), int64],) {
    %677 = @func_1191() /* ty=(Tensor[(10, 16, 13), int64],) */;
    %678 = %677.0;
    (%678,)
  };
  %679() /* ty=(Tensor[(10, 16, 13), int64],) */
}

def @func_9757() -> (Tensor[(10, 16, 13), int64],) {
  %682 = fn () -> (Tensor[(10, 16, 13), int64],) {
    %680 = @func_9195() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) */;
    %681 = %680.2;
    (%681,)
  };
  %682() /* ty=(Tensor[(10, 16, 13), int64],) */
}

def @func_6731() -> (Tensor[(10, 16, 13), float64], Tensor[(10, 16, 13), uint32]) {
  %683 = @func_3842() /* ty=Tensor[(10, 16, 13), float64] */;
  %684 = @func_2394() /* ty=Tensor[(10, 16, 13), uint32] */;
  (%683, %684)
}

def @func_9008() -> (Tensor[(3, 13, 8), float64],) {
  %686 = fn () -> (Tensor[(3, 13, 8), float64],) {
    %685 = @func_8531() /* ty=Tensor[(3, 13, 8), float64] */;
    (%685,)
  };
  %686() /* ty=(Tensor[(3, 13, 8), float64],) */
}

def @func_12493(%var_12491: Tensor[(8, 15, 5), uint16]) -> (Tensor[(8, 15, 5), uint16], Tensor[(10, 16, 13), int64]) {
  @func_12490(%var_12491) /* ty=(Tensor[(8, 15, 5), uint16], Tensor[(10, 16, 13), int64]) */
}

def @func_4964() -> (Tensor[(10, 16, 13), int64],) {
  @func_4962() /* ty=(Tensor[(10, 16, 13), int64],) */
}

def @func_5090() -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32]) {
  @func_5088() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32]) */
}

def @func_11068() -> (Tensor[(10, 16, 13), float64],) {
  %689 = fn () -> (Tensor[(10, 16, 13), float64],) {
    %687 = @func_6731() /* ty=(Tensor[(10, 16, 13), float64], Tensor[(10, 16, 13), uint32]) */;
    %688 = %687.0;
    (%688,)
  };
  %689() /* ty=(Tensor[(10, 16, 13), float64],) */
}

def @func_10578() -> Tensor[(10, 16, 13), float32] {
  @func_10576() /* ty=Tensor[(10, 16, 13), float32] */
}

def @func_2870() -> (Tensor[(10, 16, 13), int64],) {
  %690 = @func_1408() /* ty=Tensor[(10, 16, 13), int64] */;
  (%690,)
}

def @func_4945(%var_4942: Tensor[(260), uint8]) -> (Tensor[(10, 16, 13), int64], Tensor[(5, 13, 4), float64], Tensor[(260), uint8]) {
  %691 = cast(%var_4942, dtype="uint8") /* ty=Tensor[(260), uint8] */;
  %692 = reshape(%691, newshape=[260]) /* ty=Tensor[(260), uint8] */;
  %693 = @func_4111(%692) /* ty=(Tensor[(10, 16, 13), int64], Tensor[(5, 13, 4), float64], Tensor[(260), uint8], Tensor[(10, 16, 13), int64]) */;
  %694 = @func_4650() /* ty=Tensor[(10, 16, 13), int64] */;
  %695 = %693.1;
  (%694, %695, %var_4942)
}

def @func_2953(%var_2952: Tensor[(10, 16, 13), uint32]) -> (Tensor[(10, 16, 13), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), int64]) {
  %705 = fn (%var_2931: Tensor[(10, 16, 13), uint32]) -> (Tensor[(10, 16, 13), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), int64]) {
    %696 = @func_1937() /* ty=Tensor[(10, 16, 13), uint32] */;
    %697 = cast(%var_2931, dtype="float64") /* ty=Tensor[(10, 16, 13), float64] */;
    %698 = shape_of(%696, dtype="int32") /* ty=Tensor[(3), int32] */;
    %699 = cast(%696, dtype="float64") /* ty=Tensor[(10, 16, 13), float64] */;
    %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %701 = @func_1745() /* ty=(Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64], Tensor[(2, 11, 5), bool], Tensor[(11, 10), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), int64]) */;
    %702 = floor_mod(%699, %700) /* ty=Tensor[(10, 16, 13), float64] */;
    %703 = %701.4;
    %704 = @func_2449() /* ty=Tensor[(10, 16, 13), int64] */;
    (%702, %703, %704)
  };
  %705(%var_2952) /* ty=(Tensor[(10, 16, 13), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), int64]) */
}

def @func_7870() -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64]) {
  %709 = fn () -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64]) {
    %706 = @func_7757() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) */;
    %707 = @func_5141() /* ty=Tensor[(10, 16, 13), uint32] */;
    %708 = %706.0;
    (%707, %708)
  };
  %709() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64]) */
}

def @func_1471() -> Tensor[(10, 16, 13), int64] {
  @func_1469() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_2585(%var_2560: Tensor[(9, 10, 5), uint32]) -> Tensor[(9, 10, 5), uint32] {
  %710 = cast(%var_2560, dtype="uint32") /* ty=Tensor[(9, 10, 5), uint32] */;
  %711 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(9, 10, 5), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %712 = cast(meta[relay.Constant][28] /* ty=Tensor[(9, 10, 5), uint32] */, dtype="uint32") /* ty=Tensor[(9, 10, 5), uint32] */;
  %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  minimum(%712, %713) /* ty=Tensor[(9, 10, 5), uint32] */
}

def @func_4962() -> (Tensor[(10, 16, 13), int64],) {
  %714 = @func_4650() /* ty=Tensor[(10, 16, 13), int64] */;
  (%714,)
}

def @func_5009() -> (Tensor[(10, 16, 13), int64],) {
  %715 = @func_3050() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %716 = %715.0;
  (%716,)
}

def @func_5313() -> (Tensor[(10, 16, 13), float32],) {
  %718 = fn () -> (Tensor[(10, 16, 13), float32],) {
    %717 = @func_1643() /* ty=Tensor[(10, 16, 13), float32] */;
    (%717,)
  };
  %718() /* ty=(Tensor[(10, 16, 13), float32],) */
}

def @func_3147() -> (Tensor[(10, 16, 13), int64], Tensor[(2, 720), float32]) {
  @func_3145() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(2, 720), float32]) */
}

def @func_4550() -> Tensor[(10, 16, 13), int64] {
  %719 = fn () -> Tensor[(10, 16, 13), int64] {
    @func_4534() /* ty=Tensor[(10, 16, 13), int64] */
  };
  %719() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_3622(%var_3620: Tensor[(300), float32]) -> (Tensor[(15, 9, 12), float64], Tensor[(5, 4, 15), float32], Tensor[(300), float32], Tensor[(10, 16, 13), int64], Tensor[(2080), uint32]) {
  @func_3619(%var_3620) /* ty=(Tensor[(15, 9, 12), float64], Tensor[(5, 4, 15), float32], Tensor[(300), float32], Tensor[(10, 16, 13), int64], Tensor[(2080), uint32]) */
}

def @func_4000() -> Tensor[(10, 16, 13), uint32] {
  %720 = @func_3954() /* ty=(Tensor[(10, 16, 13), uint32],) */;
  %720.0
}

def @func_4771() -> Tensor[(10, 16, 13), int64] {
  @func_4769() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_3587(%var_3586: Tensor[(10, 16, 13), int64]) -> (Tensor[(10, 16, 13), bool], Tensor[(10, 16, 13), int64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), int32]) {
  %736 = fn (%var_3556: Tensor[(10, 16, 13), int64]) -> (Tensor[(10, 16, 13), bool], Tensor[(10, 16, 13), int64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), int32]) {
    %721 = @func_2640() /* ty=Tensor[(10, 16, 13), int64] */;
    %722 = cast(%var_3556, dtype="bool") /* ty=Tensor[(10, 16, 13), bool] */;
    %723 = shape_of(%721, dtype="int32") /* ty=Tensor[(3), int32] */;
    %724 = cast(%721, dtype="bool") /* ty=Tensor[(10, 16, 13), bool] */;
    %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %726 = @func_2640() /* ty=Tensor[(10, 16, 13), int64] */;
    %727 = cast(%726, dtype="uint32") /* ty=Tensor[(10, 16, 13), uint32] */;
    %728 = reshape(%727, newshape=[10, 16, 13]) /* ty=Tensor[(10, 16, 13), uint32] */;
    %729 = @func_2951(%728) /* ty=(Tensor[(10, 16, 13), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), int64]) */;
    %730 = cast(%726, dtype="int64") /* ty=Tensor[(10, 16, 13), int64] */;
    %731 = reshape(%730, newshape=[10, 16, 13]) /* ty=Tensor[(10, 16, 13), int64] */;
    %732 = @func_1439(%731) /* ty=(Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int32]) */;
    %733 = logical_or(%724, %725) /* ty=Tensor[(10, 16, 13), bool] */;
    %734 = %729.1;
    %735 = %732.1;
    (%733, %726, %734, %735)
  };
  %736(%var_3586) /* ty=(Tensor[(10, 16, 13), bool], Tensor[(10, 16, 13), int64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), int32]) */
}

def @func_4692(%var_4690: Tensor[(3, 2, 13), uint16], %var_4691: Tensor[(3, 2, 13), uint16]) -> (Tensor[(3, 2, 13), uint16], Tensor[(13, 5, 6), float32], Tensor[(390), float32]) {
  @func_4688(%var_4690, %var_4691) /* ty=(Tensor[(3, 2, 13), uint16], Tensor[(13, 5, 6), float32], Tensor[(390), float32]) */
}

def @func_8310() -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32]) {
  %741 = fn () -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32]) {
    %737 = @func_7596() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) */;
    %738 = @func_3954() /* ty=(Tensor[(10, 16, 13), uint32],) */;
    %739 = %737.1;
    %740 = %738.0;
    (%739, %740)
  };
  %741() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32]) */
}

def @func_6852(%var_6850: Tensor[(10, 10, 4), float64], %var_6851: Tensor[(832), float32]) -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 10, 4), bool], Tensor[(8, 13, 8), float64], Tensor[(832), float32]) {
  @func_6848(%var_6850, %var_6851) /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(10, 10, 4), bool], Tensor[(8, 13, 8), float64], Tensor[(832), float32]) */
}

def @func_2826() -> (Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64]) {
  %750 = fn () -> (Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64]) {
    %742 = @func_1816() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32], Tensor[(15, 8, 12), float32], Tensor[(2, 720), float32]) */;
    %743 = %742.1;
    %744 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 16, 13), uint32] */, dtype="float32") /* ty=Tensor[(10, 16, 13), float32] */;
    %745 = shape_of(%743, dtype="int32") /* ty=Tensor[(3), int32] */;
    %746 = cast(%743, dtype="float32") /* ty=Tensor[(10, 16, 13), float32] */;
    %747 = dyn.reshape(%744, %745, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %748 = power(%746, %747) /* ty=Tensor[(10, 16, 13), float32] */;
    %749 = @func_2640() /* ty=Tensor[(10, 16, 13), int64] */;
    (%748, %749)
  };
  %750() /* ty=(Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64]) */
}

def @func_3619(%var_3612: Tensor[(300), float32]) -> (Tensor[(15, 9, 12), float64], Tensor[(5, 4, 15), float32], Tensor[(300), float32], Tensor[(10, 16, 13), int64], Tensor[(2080), uint32]) {
  %751 = cast(meta[relay.Constant][31] /* ty=Tensor[(15, 9, 12), float64] */, dtype="float64") /* ty=Tensor[(15, 9, 12), float64] */;
  %752 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(15, 9, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %753 = cast(meta[relay.Constant][30] /* ty=Tensor[(15, 9, 12), float64] */, dtype="float64") /* ty=Tensor[(15, 9, 12), float64] */;
  %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %755 = cast(%var_3612, dtype="float32") /* ty=Tensor[(300), float32] */;
  %756 = cast(%var_3612, dtype="float32") /* ty=Tensor[(300), float32] */;
  %757 = reshape(%755, newshape=[5, 4, 15]) /* ty=Tensor[(5, 4, 15), float32] */;
  %758 = reshape(%756, newshape=[5, 4, 15]) /* ty=Tensor[(5, 4, 15), float32] */;
  %759 = @func_1100(%757, %758) /* ty=(Tensor[(5, 4, 15), float32],) */;
  %760 = cast(meta[relay.Constant][32] /* ty=Tensor[(2080), uint32] */, dtype="uint32") /* ty=Tensor[(2080), uint32] */;
  %761 = reshape(%760, newshape=[10, 16, 13]) /* ty=Tensor[(10, 16, 13), uint32] */;
  %762 = @func_2951(%761) /* ty=(Tensor[(10, 16, 13), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), int64]) */;
  %763 = power(%753, %754) /* ty=Tensor[(15, 9, 12), float64] */;
  %764 = %759.0;
  %765 = %762.2;
  (%763, %764, %var_3612, %765, meta[relay.Constant][32] /* ty=Tensor[(2080), uint32] */)
}

def @func_4454() -> Tensor[(10, 16, 13), float32] {
  %767 = fn () -> Tensor[(10, 16, 13), float32] {
    %766 = @func_2825() /* ty=(Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64]) */;
    %766.0
  };
  %767() /* ty=Tensor[(10, 16, 13), float32] */
}

def @func_10822() -> (Tensor[(10, 16, 13), float32],) {
  %768 = @func_4478() /* ty=(Tensor[(10, 16, 13), float32],) */;
  %769 = %768.0;
  (%769,)
}

def @func_1191() -> (Tensor[(10, 16, 13), int64],) {
  %770 = cast(meta[relay.Constant][34] /* ty=Tensor[(10, 16, 13), int64] */, dtype="int64") /* ty=Tensor[(10, 16, 13), int64] */;
  %771 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(10, 16, 13), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %772 = cast(meta[relay.Constant][33] /* ty=Tensor[(10, 16, 13), int64] */, dtype="int64") /* ty=Tensor[(10, 16, 13), int64] */;
  %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %774 = bitwise_or(%772, %773) /* ty=Tensor[(10, 16, 13), int64] */;
  (%774,)
}

def @func_8868() -> (Tensor[(10, 16, 13), int64],) {
  %775 = @func_7978() /* ty=Tensor[(10, 16, 13), int64] */;
  (%775,)
}

def @func_2396() -> Tensor[(10, 16, 13), uint32] {
  @func_2394() /* ty=Tensor[(10, 16, 13), uint32] */
}

def @func_6121() -> (Tensor[(3, 13, 8), float64],) {
  @func_6119() /* ty=(Tensor[(3, 13, 8), float64],) */
}

def @func_3072() -> (Tensor[(10, 16, 13), int64],) {
  %777 = fn () -> (Tensor[(10, 16, 13), int64],) {
    %776 = @func_2052() /* ty=Tensor[(10, 16, 13), int64] */;
    (%776,)
  };
  %777() /* ty=(Tensor[(10, 16, 13), int64],) */
}

def @func_1442(%var_1440: Tensor[(10, 16, 13), int64]) -> (Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int32]) {
  @func_1439(%var_1440) /* ty=(Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int32]) */
}

def @func_8198() -> (Tensor[(5, 4, 15), float64],) {
  %780 = fn () -> (Tensor[(5, 4, 15), float64],) {
    %778 = @func_5773() /* ty=(Tensor[(5, 4, 15), float64],) */;
    %779 = %778.0;
    (%779,)
  };
  %780() /* ty=(Tensor[(5, 4, 15), float64],) */
}

def @func_1678() -> (Tensor[(10, 16, 13), uint32],) {
  %787 = fn () -> (Tensor[(10, 16, 13), uint32],) {
    %781 = @func_1469() /* ty=Tensor[(10, 16, 13), int64] */;
    %782 = cast(meta[relay.Constant][35] /* ty=Tensor[(10, 16, 13), int64] */, dtype="uint32") /* ty=Tensor[(10, 16, 13), uint32] */;
    %783 = shape_of(%781, dtype="int32") /* ty=Tensor[(3), int32] */;
    %784 = cast(%781, dtype="uint32") /* ty=Tensor[(10, 16, 13), uint32] */;
    %785 = dyn.reshape(%782, %783, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %786 = right_shift(%784, %785) /* ty=Tensor[(10, 16, 13), uint32] */;
    (%786,)
  };
  %787() /* ty=(Tensor[(10, 16, 13), uint32],) */
}

def @func_10986() -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64], Tensor[(728), float32]) {
  %788 = @func_3034() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %789 = @func_3034() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %790 = cast(meta[relay.Constant][36] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
  %791 = reshape(%790, newshape=[728]) /* ty=Tensor[(728), float32] */;
  %792 = @func_1274(%791) /* ty=(Tensor[(10, 16, 13), int64], Tensor[(13, 4, 14), float32], Tensor[(78), float64], Tensor[(728), float32], Tensor[(234), float64], Tensor[(2, 11, 5), float64], Tensor[(110), float64]) */;
  %793 = %788.0;
  %794 = %789.0;
  %795 = %792.0;
  (%793, %794, %795, meta[relay.Constant][36] /* ty=Tensor[(728), float32] */)
}

def @func_2905(%var_2899: Tensor[(6, 6, 4), float64]) -> (Tensor[(6, 6, 4), float64], Tensor[(10, 16, 13), int64]) {
  %796 = cast(%var_2899, dtype="float64") /* ty=Tensor[(6, 6, 4), float64] */;
  %797 = @func_2825() /* ty=(Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64]) */;
  %798 = asinh(%796) /* ty=Tensor[(6, 6, 4), float64] */;
  %799 = %797.1;
  (%798, %799)
}

def @func_5816() -> (Tensor[(10, 16, 13), uint32],) {
  %800 = @func_5186() /* ty=(Tensor[(10, 16, 13), uint32],) */;
  %801 = %800.0;
  (%801,)
}

def @func_5011() -> (Tensor[(10, 16, 13), int64],) {
  @func_5009() /* ty=(Tensor[(10, 16, 13), int64],) */
}

def @func_1300() -> Tensor[(10, 16, 13), int64] {
  %803 = fn () -> Tensor[(10, 16, 13), int64] {
    %802 = @func_1191() /* ty=(Tensor[(10, 16, 13), int64],) */;
    %802.0
  };
  %803() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_3184() -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), float32]) {
  %804 = @func_1469() /* ty=Tensor[(10, 16, 13), int64] */;
  %805 = @func_1643() /* ty=Tensor[(10, 16, 13), float32] */;
  (%804, %805)
}

def @func_8785() -> (Tensor[(10, 16, 13), uint32], Tensor[(3, 13, 8), float64]) {
  %806 = @func_8531() /* ty=Tensor[(3, 13, 8), float64] */;
  %807 = cast(%806, dtype="float64") /* ty=Tensor[(3, 13, 8), float64] */;
  %808 = @func_6789() /* ty=Tensor[(10, 16, 13), uint32] */;
  %809 = tan(%807) /* ty=Tensor[(3, 13, 8), float64] */;
  (%808, %809)
}

def @func_2641() -> Tensor[(10, 16, 13), int64] {
  %810 = fn () -> Tensor[(10, 16, 13), int64] {
    @func_1469() /* ty=Tensor[(10, 16, 13), int64] */
  };
  %810() /* ty=Tensor[(10, 16, 13), int64] */
}

def @func_663(%var_662: Tensor[(2, 11, 5), float64]) -> (Tensor[(2, 11, 5), bool], Tensor[(2, 11, 5), float32], Tensor[(2, 11, 5), float64]) {
  %827 = fn (%var_621: Tensor[(2, 11, 5), float64]) -> (Tensor[(2, 11, 5), bool], Tensor[(2, 11, 5), float32], Tensor[(2, 11, 5), float64]) {
    %811 = cast(%var_621, dtype="float64") /* ty=Tensor[(2, 11, 5), float64] */;
    %812 = erf(%811) /* ty=Tensor[(2, 11, 5), float64] */;
    %813 = cast(%var_621, dtype="bool") /* ty=Tensor[(2, 11, 5), bool] */;
    %814 = shape_of(%812, dtype="int32") /* ty=Tensor[(3), int32] */;
    %815 = cast(%812, dtype="bool") /* ty=Tensor[(2, 11, 5), bool] */;
    %816 = dyn.reshape(%813, %814, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %817 = cast(%812, dtype="float64") /* ty=Tensor[(2, 11, 5), float64] */;
    %818 = acos(%817) /* ty=Tensor[(2, 11, 5), float64] */;
    %819 = cast(%var_621, dtype="float32") /* ty=Tensor[(2, 11, 5), float32] */;
    %820 = shape_of(%818, dtype="int32") /* ty=Tensor[(3), int32] */;
    %821 = cast(%818, dtype="float32") /* ty=Tensor[(2, 11, 5), float32] */;
    %822 = dyn.reshape(%819, %820, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %823 = cast(%var_621, dtype="float64") /* ty=Tensor[(2, 11, 5), float64] */;
    %824 = logical_and(%815, %816) /* ty=Tensor[(2, 11, 5), bool] */;
    %825 = divide(%821, %822) /* ty=Tensor[(2, 11, 5), float32] */;
    %826 = log(%823) /* ty=Tensor[(2, 11, 5), float64] */;
    (%824, %825, %826)
  };
  %827(%var_662) /* ty=(Tensor[(2, 11, 5), bool], Tensor[(2, 11, 5), float32], Tensor[(2, 11, 5), float64]) */
}

def @func_8376() -> (Tensor[(10, 16, 13), int64],) {
  %829 = fn () -> (Tensor[(10, 16, 13), int64],) {
    %828 = @func_4650() /* ty=Tensor[(10, 16, 13), int64] */;
    (%828,)
  };
  %829() /* ty=(Tensor[(10, 16, 13), int64],) */
}

def @func_8810() -> (Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), uint32]) {
  %830 = @func_1677() /* ty=(Tensor[(10, 16, 13), uint32],) */;
  %831 = @func_8340() /* ty=Tensor[(2, 11, 5), float64] */;
  %832 = %830.0;
  (%831, %832)
}

def @func_3035() -> (Tensor[(10, 16, 13), int64],) {
  %835 = fn () -> (Tensor[(10, 16, 13), int64],) {
    %833 = @func_1191() /* ty=(Tensor[(10, 16, 13), int64],) */;
    %834 = %833.0;
    (%834,)
  };
  %835() /* ty=(Tensor[(10, 16, 13), int64],) */
}

def @func_4885(%var_4883: Tensor[(728), float32], %var_4884: Tensor[(1440), float32]) -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64], Tensor[(78), float64], Tensor[(728), float32], Tensor[(10, 16, 13), int32], Tensor[(234), uint64], Tensor[(2, 11, 5), bool], Tensor[(15, 8, 12), float32], Tensor[(1440), float32], Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64]) {
  @func_4881(%var_4883, %var_4884) /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64], Tensor[(78), float64], Tensor[(728), float32], Tensor[(10, 16, 13), int32], Tensor[(234), uint64], Tensor[(2, 11, 5), bool], Tensor[(15, 8, 12), float32], Tensor[(1440), float32], Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64]) */
}

def @func_4002() -> Tensor[(10, 16, 13), uint32] {
  @func_4000() /* ty=Tensor[(10, 16, 13), uint32] */
}

def @func_11996() -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32]) {
  %842 = fn () -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32]) {
    %836 = @func_8309() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32]) */;
    %837 = @func_11218() /* ty=(Tensor[(10, 16, 13), int64],) */;
    %838 = @func_11835() /* ty=(Tensor[(10, 16, 13), uint32],) */;
    %839 = %836.0;
    %840 = %837.0;
    %841 = %838.0;
    (%839, %840, %841)
  };
  %842() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32]) */
}

def @func_8679(%var_8677: Tensor[(1, 11, 8), float32]) -> (Tensor[(1, 11, 8), float32], Tensor[(10, 16, 13), float64]) {
  @func_8676(%var_8677) /* ty=(Tensor[(1, 11, 8), float32], Tensor[(10, 16, 13), float64]) */
}

def @main(%var_12571: Tensor[(864), uint64], %var_12572: Tensor[(832), float32], %var_12575: Tensor[(864), uint64], %var_12588: Tensor[(300), float32]) -> (Tensor[(10, 16, 13), float32], Tensor[(2, 720), float32], Tensor[(10, 16, 13), uint32], Tensor[(8, 13, 8), float64], Tensor[(832), float32], Tensor[(864), float32], Tensor[(300), float32], Tensor[(300), float32], Tensor[(864), bool]) {
  %843 = @func_5313() /* ty=(Tensor[(10, 16, 13), float32],) */;
  %844 = @func_11912() /* ty=(Tensor[(2, 720), float32], Tensor[(10, 16, 13), int64]) */;
  %845 = @func_12295() /* ty=(Tensor[(10, 16, 13), uint32],) */;
  %846 = cast(%var_12571, dtype="uint64") /* ty=Tensor[(864), uint64] */;
  %847 = cast(%var_12572, dtype="float32") /* ty=Tensor[(832), float32] */;
  %848 = reshape(%846, newshape=[864]) /* ty=Tensor[(864), uint64] */;
  %849 = reshape(%847, newshape=[832]) /* ty=Tensor[(832), float32] */;
  %850 = @func_11689(%848, %849) /* ty=(Tensor[(10, 16, 13), int64], Tensor[(9, 12, 8), uint64], Tensor[(864), uint64], Tensor[(8, 13, 8), float64], Tensor[(832), float32]) */;
  %851 = cast(%var_12575, dtype="float32") /* ty=Tensor[(864), float32] */;
  %852 = shape_of(%var_12571, dtype="int32") /* ty=Tensor[(1), int32] */;
  %853 = cast(%var_12571, dtype="float32") /* ty=Tensor[(864), float32] */;
  %854 = dyn.reshape(%851, %852, newshape=[]) /* ty=Tensor[(?), float32] */;
  %855 = cast(%var_12588, dtype="float32") /* ty=Tensor[(300), float32] */;
  %856 = reshape(%855, newshape=[300]) /* ty=Tensor[(300), float32] */;
  %857 = @func_3910(%856) /* ty=(Tensor[(10, 16, 13), int64], Tensor[(300), float32], Tensor[(300), float32]) */;
  %858 = cast(%var_12571, dtype="float32") /* ty=Tensor[(864), float32] */;
  %859 = tan(%858) /* ty=Tensor[(864), float32] */;
  %860 = cast(%859, dtype="bool") /* ty=Tensor[(864), bool] */;
  %861 = shape_of(%var_12575, dtype="int32") /* ty=Tensor[(1), int32] */;
  %862 = cast(%var_12575, dtype="bool") /* ty=Tensor[(864), bool] */;
  %863 = dyn.reshape(%860, %861, newshape=[]) /* ty=Tensor[(?), bool] */;
  %864 = %843.0;
  %865 = %844.0;
  %866 = %845.0;
  %867 = %850.3;
  %868 = floor_mod(%853, %854) /* ty=Tensor[(864), float32] */;
  %869 = %857.1;
  %870 = equal(%862, %863) /* ty=Tensor[(864), bool] */;
  (%864, %865, %866, %867, %var_12572, %868, %869, %var_12588, %870)
}

def @func_3843() -> Tensor[(10, 16, 13), float64] {
  %874 = fn () -> Tensor[(10, 16, 13), float64] {
    %871 = @func_2870() /* ty=(Tensor[(10, 16, 13), int64],) */;
    %872 = %871.0;
    %873 = cast(%872, dtype="float64") /* ty=Tensor[(10, 16, 13), float64] */;
    cosh(%873) /* ty=Tensor[(10, 16, 13), float64] */
  };
  %874() /* ty=Tensor[(10, 16, 13), float64] */
}

def @func_11485(%var_11484: Tensor[(300), float32]) -> (Tensor[(10, 16, 13), int64], Tensor[(300), float32], Tensor[(300), float32], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(2, 720), float64], Tensor[(10, 16, 13), float64]) {
  %891 = fn (%var_11387: Tensor[(300), float32]) -> (Tensor[(10, 16, 13), int64], Tensor[(300), float32], Tensor[(300), float32], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(2, 720), float64], Tensor[(10, 16, 13), float64]) {
    %875 = @func_7792() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) */;
    %876 = cast(%var_11387, dtype="float32") /* ty=Tensor[(300), float32] */;
    %877 = reshape(%876, newshape=[300]) /* ty=Tensor[(300), float32] */;
    %878 = @func_3908(%877) /* ty=(Tensor[(10, 16, 13), int64], Tensor[(300), float32], Tensor[(300), float32]) */;
    %879 = @func_1918() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(2, 720), float32]) */;
    %880 = %879.1;
    %881 = cast(%880, dtype="float64") /* ty=Tensor[(2, 720), float64] */;
    %882 = sin(%881) /* ty=Tensor[(2, 720), float64] */;
    %883 = cast(%882, dtype="float64") /* ty=Tensor[(2, 720), float64] */;
    %884 = @func_6548() /* ty=(Tensor[(10, 16, 13), float64],) */;
    %885 = %875.0;
    %886 = %878.2;
    %887 = @func_4607() /* ty=Tensor[(10, 16, 13), uint32] */;
    %888 = @func_1299() /* ty=Tensor[(10, 16, 13), int64] */;
    %889 = asinh(%883) /* ty=Tensor[(2, 720), float64] */;
    %890 = %884.0;
    (%885, %886, %var_11387, %887, %888, %889, %890)
  };
  %891(%var_11484) /* ty=(Tensor[(10, 16, 13), int64], Tensor[(300), float32], Tensor[(300), float32], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(2, 720), float64], Tensor[(10, 16, 13), float64]) */
}

def @func_10755() -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64]) {
  %892 = @func_6036() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %893 = @func_1937() /* ty=Tensor[(10, 16, 13), uint32] */;
  %894 = @func_2394() /* ty=Tensor[(10, 16, 13), uint32] */;
  %895 = %892.0;
  (%893, %894, %895)
}

def @func_1349(%var_1332: Tensor[(5, 13, 4), uint8], %var_1333: Tensor[(5, 13, 4), uint8]) -> (Tensor[(5, 13, 4), float64],) {
  %896 = cast(%var_1333, dtype="uint8") /* ty=Tensor[(5, 13, 4), uint8] */;
  %897 = shape_of(%var_1332, dtype="int32") /* ty=Tensor[(3), int32] */;
  %898 = cast(%var_1332, dtype="uint8") /* ty=Tensor[(5, 13, 4), uint8] */;
  %899 = dyn.reshape(%896, %897, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %900 = left_shift(%898, %899) /* ty=Tensor[(5, 13, 4), uint8] */;
  %901 = cast(%var_1333, dtype="float64") /* ty=Tensor[(5, 13, 4), float64] */;
  %902 = shape_of(%900, dtype="int32") /* ty=Tensor[(3), int32] */;
  %903 = cast(%900, dtype="float64") /* ty=Tensor[(5, 13, 4), float64] */;
  %904 = dyn.reshape(%901, %902, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %905 = minimum(%903, %904) /* ty=Tensor[(5, 13, 4), float64] */;
  (%905,)
}

def @func_8044() -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32]) {
  %906 = @func_1816() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32], Tensor[(15, 8, 12), float32], Tensor[(2, 720), float32]) */;
  %907 = @func_6789() /* ty=Tensor[(10, 16, 13), uint32] */;
  %908 = %906.2;
  (%907, %908)
}

def @func_1644() -> Tensor[(10, 16, 13), float32] {
  %914 = fn () -> Tensor[(10, 16, 13), float32] {
    %909 = @func_1191() /* ty=(Tensor[(10, 16, 13), int64],) */;
    %910 = %909.0;
    %911 = cast(%910, dtype="float32") /* ty=Tensor[(10, 16, 13), float32] */;
    %912 = cos(%911) /* ty=Tensor[(10, 16, 13), float32] */;
    %913 = cast(%912, dtype="float32") /* ty=Tensor[(10, 16, 13), float32] */;
    tan(%913) /* ty=Tensor[(10, 16, 13), float32] */
  };
  %914() /* ty=Tensor[(10, 16, 13), float32] */
}

def @func_8046() -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32]) {
  @func_8044() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32]) */
}

def @func_1988(%var_1987: Tensor[(6, 11, 10), int32]) -> (Tensor[(6, 11, 10), bool],) {
  %920 = fn (%var_1981: Tensor[(6, 11, 10), int32]) -> (Tensor[(6, 11, 10), bool],) {
    %915 = cast(%var_1981, dtype="bool") /* ty=Tensor[(6, 11, 10), bool] */;
    %916 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(6, 11, 10), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %917 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 11, 10), int32] */, dtype="bool") /* ty=Tensor[(6, 11, 10), bool] */;
    %918 = dyn.reshape(%915, %916, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %919 = greater(%917, %918) /* ty=Tensor[(6, 11, 10), bool] */;
    (%919,)
  };
  %920(%var_1987) /* ty=(Tensor[(6, 11, 10), bool],) */
}

def @func_7757() -> (Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) {
  %921 = @func_3468() /* ty=Tensor[(10, 16, 13), int64] */;
  %922 = @func_1408() /* ty=Tensor[(10, 16, 13), int64] */;
  (%921, %922)
}

def @func_10824() -> (Tensor[(10, 16, 13), float32],) {
  @func_10822() /* ty=(Tensor[(10, 16, 13), float32],) */
}

def @func_8812() -> (Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), uint32]) {
  @func_8810() /* ty=(Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), uint32]) */
}

def @func_9709() -> (Tensor[(10, 16, 13), uint32],) {
  @func_9707() /* ty=(Tensor[(10, 16, 13), uint32],) */
}

def @func_12490(%var_12477: Tensor[(8, 15, 5), uint16]) -> (Tensor[(8, 15, 5), uint16], Tensor[(10, 16, 13), int64]) {
  %923 = cast(meta[relay.Constant][38] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %924 = cast(%var_12477, dtype="uint16") /* ty=Tensor[(8, 15, 5), uint16] */;
  %925 = @func_5009() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %926 = right_shift(%923, %924) /* ty=Tensor[(8, 15, 5), uint16] */;
  %927 = %925.0;
  (%926, %927)
}

def @func_1103(%var_1101: Tensor[(5, 4, 15), float32], %var_1102: Tensor[(5, 4, 15), float32]) -> (Tensor[(5, 4, 15), float32],) {
  %933 = fn (%var_1095: Tensor[(5, 4, 15), float32], %var_1096: Tensor[(5, 4, 15), float32]) -> (Tensor[(5, 4, 15), float32],) {
    %928 = cast(%var_1096, dtype="float32") /* ty=Tensor[(5, 4, 15), float32] */;
    %929 = shape_of(%var_1095, dtype="int32") /* ty=Tensor[(3), int32] */;
    %930 = cast(%var_1095, dtype="float32") /* ty=Tensor[(5, 4, 15), float32] */;
    %931 = dyn.reshape(%928, %929, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %932 = power(%930, %931) /* ty=Tensor[(5, 4, 15), float32] */;
    (%932,)
  };
  %933(%var_1101, %var_1102) /* ty=(Tensor[(5, 4, 15), float32],) */
}

def @func_3516() -> (Tensor[(10, 16, 13), int64],) {
  %936 = fn () -> (Tensor[(10, 16, 13), int64],) {
    %934 = @func_3323() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) */;
    %935 = %934.1;
    (%935,)
  };
  %936() /* ty=(Tensor[(10, 16, 13), int64],) */
}

def @func_8725() -> Tensor[(3, 13, 8), float64] {
  %937 = fn () -> Tensor[(3, 13, 8), float64] {
    @func_8531() /* ty=Tensor[(3, 13, 8), float64] */
  };
  %937() /* ty=Tensor[(3, 13, 8), float64] */
}

def @func_10438() -> (Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64]) {
  @func_10436() /* ty=(Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64]) */
}

def @func_8341() -> Tensor[(2, 11, 5), float64] {
  %939 = fn () -> Tensor[(2, 11, 5), float64] {
    %938 = @func_1745() /* ty=(Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64], Tensor[(2, 11, 5), bool], Tensor[(11, 10), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), int64]) */;
    %938.4
  };
  %939() /* ty=Tensor[(2, 11, 5), float64] */
}

def @func_3504(%var_3502: Tensor[(728), float32]) -> (Tensor[(10, 16, 13), int64], Tensor[(13, 4, 14), float32], Tensor[(78), float64], Tensor[(728), float32], Tensor[(234), float64]) {
  @func_3501(%var_3502) /* ty=(Tensor[(10, 16, 13), int64], Tensor[(13, 4, 14), float32], Tensor[(78), float64], Tensor[(728), float32], Tensor[(234), float64]) */
}

def @func_4332(%var_4330: Tensor[(9, 12, 8), uint64], %var_4331: Tensor[(9, 12, 8), uint64]) -> Tensor[(9, 12, 8), uint64] {
  @func_4328(%var_4330, %var_4331) /* ty=Tensor[(9, 12, 8), uint64] */
}

def @func_1939() -> Tensor[(10, 16, 13), uint32] {
  @func_1937() /* ty=Tensor[(10, 16, 13), uint32] */
}

def @func_5187() -> (Tensor[(10, 16, 13), uint32],) {
  %941 = fn () -> (Tensor[(10, 16, 13), uint32],) {
    %940 = @func_2394() /* ty=Tensor[(10, 16, 13), uint32] */;
    (%940,)
  };
  %941() /* ty=(Tensor[(10, 16, 13), uint32],) */
}

def @func_5088() -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32]) {
  %942 = @func_2370() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(5, 4, 15), float32], Tensor[(300), float32]) */;
  %943 = @func_2394() /* ty=Tensor[(10, 16, 13), uint32] */;
  %944 = %942.0;
  (%943, %944)
}

def @func_1439(%var_1434: Tensor[(10, 16, 13), int64]) -> (Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int32]) {
  %945 = @func_1191() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %946 = %945.0;
  %947 = cast(%946, dtype="float32") /* ty=Tensor[(10, 16, 13), float32] */;
  %948 = cast(%var_1434, dtype="int32") /* ty=Tensor[(10, 16, 13), int32] */;
  %949 = shape_of(%946, dtype="int32") /* ty=Tensor[(3), int32] */;
  %950 = cast(%946, dtype="int32") /* ty=Tensor[(10, 16, 13), int32] */;
  %951 = dyn.reshape(%948, %949, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %952 = rsqrt(%947) /* ty=Tensor[(10, 16, 13), float32] */;
  %953 = left_shift(%950, %951) /* ty=Tensor[(10, 16, 13), int32] */;
  (%952, %953)
}

def @func_1746() -> (Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64], Tensor[(2, 11, 5), bool], Tensor[(11, 10), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), int64]) {
  %966 = fn () -> (Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64], Tensor[(2, 11, 5), bool], Tensor[(11, 10), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), int64]) {
    %954 = @func_1191() /* ty=(Tensor[(10, 16, 13), int64],) */;
    %955 = cast(meta[relay.Constant][39] /* ty=Tensor[(11, 10), float64] */, dtype="float64") /* ty=Tensor[(11, 10), float64] */;
    %956 = reshape(%955, newshape=[2, 11, 5]) /* ty=Tensor[(2, 11, 5), float64] */;
    %957 = @func_661(%956) /* ty=(Tensor[(2, 11, 5), bool], Tensor[(2, 11, 5), float32], Tensor[(2, 11, 5), float64]) */;
    %958 = cast(meta[relay.Constant][39] /* ty=Tensor[(11, 10), float64] */, dtype="float64") /* ty=Tensor[(11, 10), float64] */;
    %959 = reshape(%958, newshape=[2, 11, 5]) /* ty=Tensor[(2, 11, 5), float64] */;
    %960 = @func_661(%959) /* ty=(Tensor[(2, 11, 5), bool], Tensor[(2, 11, 5), float32], Tensor[(2, 11, 5), float64]) */;
    %961 = @func_1643() /* ty=Tensor[(10, 16, 13), float32] */;
    %962 = %954.0;
    %963 = %957.0;
    %964 = %960.2;
    %965 = @func_1408() /* ty=Tensor[(10, 16, 13), int64] */;
    (%961, %962, %963, meta[relay.Constant][39] /* ty=Tensor[(11, 10), float64] */, %964, %965)
  };
  %966() /* ty=(Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64], Tensor[(2, 11, 5), bool], Tensor[(11, 10), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), int64]) */
}

def @func_2653(%var_2652: Tensor[(13, 5, 6), float32]) -> Tensor[(13, 5, 6), float32] {
  %968 = fn (%var_2646: Tensor[(13, 5, 6), float32]) -> Tensor[(13, 5, 6), float32] {
    %967 = cast(%var_2646, dtype="float32") /* ty=Tensor[(13, 5, 6), float32] */;
    asinh(%967) /* ty=Tensor[(13, 5, 6), float32] */
  };
  %968(%var_2652) /* ty=Tensor[(13, 5, 6), float32] */
}

def @func_6791() -> Tensor[(10, 16, 13), uint32] {
  @func_6789() /* ty=Tensor[(10, 16, 13), uint32] */
}

def @func_12397() -> (Tensor[(10, 16, 13), int64], Tensor[(2, 720), float32], Tensor[(10, 16, 13), int64]) {
  %969 = @func_10986() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64], Tensor[(728), float32]) */;
  %970 = @func_1918() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(2, 720), float32]) */;
  %971 = @func_2870() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %972 = %969.0;
  %973 = %970.1;
  %974 = %971.0;
  (%972, %973, %974)
}

def @func_12295() -> (Tensor[(10, 16, 13), uint32],) {
  @func_12293() /* ty=(Tensor[(10, 16, 13), uint32],) */
}

def @func_10275(%var_10241: Tensor[(260), uint8]) -> (Tensor[(10, 16, 13), int64], Tensor[(6, 11, 10), bool], Tensor[(110, 6), int32], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(5, 13, 4), int8]) {
  %975 = cast(meta[relay.Constant][40] /* ty=Tensor[(110, 6), int32] */, dtype="int32") /* ty=Tensor[(110, 6), int32] */;
  %976 = reshape(%975, newshape=[6, 11, 10]) /* ty=Tensor[(6, 11, 10), int32] */;
  %977 = @func_1986(%976) /* ty=(Tensor[(6, 11, 10), bool],) */;
  %978 = @func_1191() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %979 = cast(%var_10241, dtype="uint8") /* ty=Tensor[(260), uint8] */;
  %980 = cast(%var_10241, dtype="uint8") /* ty=Tensor[(260), uint8] */;
  %981 = reshape(%979, newshape=[5, 13, 4]) /* ty=Tensor[(5, 13, 4), uint8] */;
  %982 = reshape(%980, newshape=[5, 13, 4]) /* ty=Tensor[(5, 13, 4), uint8] */;
  %983 = @func_1349(%981, %982) /* ty=(Tensor[(5, 13, 4), float64],) */;
  %984 = %983.0;
  %985 = cast(%var_10241, dtype="int8") /* ty=Tensor[(260), int8] */;
  %986 = shape_of(%984, dtype="int32") /* ty=Tensor[(3), int32] */;
  %987 = cast(%984, dtype="int8") /* ty=Tensor[(5, 13, 4), int8] */;
  %988 = dyn.reshape(%985, %986, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %989 = @func_7208() /* ty=Tensor[(10, 16, 13), int64] */;
  %990 = %977.0;
  %991 = @func_2394() /* ty=Tensor[(10, 16, 13), uint32] */;
  %992 = %978.0;
  %993 = bitwise_and(%987, %988) /* ty=Tensor[(5, 13, 4), int8] */;
  (%989, %990, meta[relay.Constant][40] /* ty=Tensor[(110, 6), int32] */, %991, %992, %993)
}

def @func_8126() -> (Tensor[(10, 16, 13), int64],) {
  %994 = @func_7869() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64]) */;
  %995 = %994.1;
  (%995,)
}

def @func_6210(%var_6208: Tensor[(3, 14, 4), float32], %var_6209: Tensor[(3, 14, 4), float32]) -> (Tensor[(3, 14, 4), float32],) {
  %1001 = fn (%var_6188: Tensor[(3, 14, 4), float32], %var_6189: Tensor[(3, 14, 4), float32]) -> (Tensor[(3, 14, 4), float32],) {
    %996 = cast(%var_6189, dtype="float32") /* ty=Tensor[(3, 14, 4), float32] */;
    %997 = shape_of(%var_6188, dtype="int32") /* ty=Tensor[(3), int32] */;
    %998 = cast(%var_6188, dtype="float32") /* ty=Tensor[(3, 14, 4), float32] */;
    %999 = dyn.reshape(%996, %997, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1000 = floor_mod(%998, %999) /* ty=Tensor[(3, 14, 4), float32] */;
    (%1000,)
  };
  %1001(%var_6208, %var_6209) /* ty=(Tensor[(3, 14, 4), float32],) */
}

def @func_12034() -> (Tensor[(10, 16, 13), uint32],) {
  %1004 = fn () -> (Tensor[(10, 16, 13), uint32],) {
    %1002 = @func_1816() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32], Tensor[(15, 8, 12), float32], Tensor[(2, 720), float32]) */;
    %1003 = %1002.1;
    (%1003,)
  };
  %1004() /* ty=(Tensor[(10, 16, 13), uint32],) */
}

def @func_12143() -> (Tensor[(10, 16, 13), uint32],) {
  %1005 = @func_7596() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) */;
  %1006 = %1005.0;
  (%1006,)
}

def @func_9402(%var_9401: Tensor[(2080), int64]) -> (Tensor[(2, 11, 5), bool], Tensor[(300), float32], Tensor[(10, 16, 13), int64], Tensor[(2080), int64], Tensor[(10, 16, 13), int16], Tensor[(10, 16, 13), uint32]) {
  %1021 = fn (%var_9383: Tensor[(2080), int64]) -> (Tensor[(2, 11, 5), bool], Tensor[(300), float32], Tensor[(10, 16, 13), int64], Tensor[(2080), int64], Tensor[(10, 16, 13), int16], Tensor[(10, 16, 13), uint32]) {
    %1007 = @func_1745() /* ty=(Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64], Tensor[(2, 11, 5), bool], Tensor[(11, 10), float64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), int64]) */;
    %1008 = @func_2370() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(5, 4, 15), float32], Tensor[(300), float32]) */;
    %1009 = cast(%var_9383, dtype="int64") /* ty=Tensor[(2080), int64] */;
    %1010 = reshape(%1009, newshape=[10, 16, 13]) /* ty=Tensor[(10, 16, 13), int64] */;
    %1011 = @func_3585(%1010) /* ty=(Tensor[(10, 16, 13), bool], Tensor[(10, 16, 13), int64], Tensor[(2, 11, 5), float64], Tensor[(10, 16, 13), int32]) */;
    %1012 = %1011.1;
    %1013 = cast(%1012, dtype="int64") /* ty=Tensor[(10, 16, 13), int64] */;
    %1014 = reshape(%1013, newshape=[10, 16, 13]) /* ty=Tensor[(10, 16, 13), int64] */;
    %1015 = @func_4667(%1014) /* ty=(Tensor[(10, 16, 13), int16],) */;
    %1016 = @func_8785() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(3, 13, 8), float64]) */;
    %1017 = %1007.2;
    %1018 = %1008.2;
    %1019 = %1015.0;
    %1020 = %1016.0;
    (%1017, %1018, %1012, %var_9383, %1019, %1020)
  };
  %1021(%var_9401) /* ty=(Tensor[(2, 11, 5), bool], Tensor[(300), float32], Tensor[(10, 16, 13), int64], Tensor[(2080), int64], Tensor[(10, 16, 13), int16], Tensor[(10, 16, 13), uint32]) */
}

def @func_8707() -> (Tensor[(10, 16, 13), int64],) {
  @func_8705() /* ty=(Tensor[(10, 16, 13), int64],) */
}

def @func_9085() -> (Tensor[(10, 16, 13), float32],) {
  %1022 = @func_4453() /* ty=Tensor[(10, 16, 13), float32] */;
  (%1022,)
}

def @func_8532() -> Tensor[(3, 13, 8), float64] {
  %1024 = fn () -> Tensor[(3, 13, 8), float64] {
    %1023 = @func_6119() /* ty=(Tensor[(3, 13, 8), float64],) */;
    %1023.0
  };
  %1024() /* ty=Tensor[(3, 13, 8), float64] */
}

def @func_7598() -> (Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) {
  @func_7596() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) */
}

def @func_8945(%var_8941: Tensor[(12, 4, 4), int32], %var_8942: Tensor[(12, 4, 4), int32], %var_8943: Tensor[(12, 4, 4), int32], %var_8944: Tensor[(240), float32]) -> (Tensor[(12, 4, 4), bool], Tensor[(5, 4, 15), float32], Tensor[(12, 4, 4), int16], Tensor[(10, 16, 13), uint32], Tensor[(240), float32]) {
  %1041 = fn (%var_8898: Tensor[(12, 4, 4), int32], %var_8899: Tensor[(12, 4, 4), int32], %var_8916: Tensor[(12, 4, 4), int32], %var_8927: Tensor[(240), float32]) -> (Tensor[(12, 4, 4), bool], Tensor[(5, 4, 15), float32], Tensor[(12, 4, 4), int16], Tensor[(10, 16, 13), uint32], Tensor[(240), float32]) {
    %1025 = cast(%var_8899, dtype="bool") /* ty=Tensor[(12, 4, 4), bool] */;
    %1026 = shape_of(%var_8898, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1027 = cast(%var_8898, dtype="bool") /* ty=Tensor[(12, 4, 4), bool] */;
    %1028 = dyn.reshape(%1025, %1026, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1029 = @func_4134() /* ty=(Tensor[(5, 4, 15), float32],) */;
    %1030 = cast(%var_8916, dtype="int16") /* ty=Tensor[(12, 4, 4), int16] */;
    %1031 = shape_of(%var_8899, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1032 = cast(%var_8899, dtype="int16") /* ty=Tensor[(12, 4, 4), int16] */;
    %1033 = dyn.reshape(%1030, %1031, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %1034 = cast(%var_8927, dtype="float32") /* ty=Tensor[(240), float32] */;
    %1035 = reshape(%1034, newshape=[16, 1, 15]) /* ty=Tensor[(16, 1, 15), float32] */;
    %1036 = @func_5940(%1035) /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(16, ?, 15), float64]) */;
    %1037 = not_equal(%1027, %1028) /* ty=Tensor[(12, 4, 4), bool] */;
    %1038 = %1029.0;
    %1039 = maximum(%1032, %1033) /* ty=Tensor[(12, 4, 4), int16] */;
    %1040 = %1036.0;
    (%1037, %1038, %1039, %1040, %var_8927)
  };
  %1041(%var_8941, %var_8942, %var_8943, %var_8944) /* ty=(Tensor[(12, 4, 4), bool], Tensor[(5, 4, 15), float32], Tensor[(12, 4, 4), int16], Tensor[(10, 16, 13), uint32], Tensor[(240), float32]) */
}

def @func_4111(%var_4104: Tensor[(260), uint8]) -> (Tensor[(10, 16, 13), int64], Tensor[(5, 13, 4), float64], Tensor[(260), uint8], Tensor[(10, 16, 13), int64]) {
  %1042 = cast(%var_4104, dtype="uint8") /* ty=Tensor[(260), uint8] */;
  %1043 = cast(%var_4104, dtype="uint8") /* ty=Tensor[(260), uint8] */;
  %1044 = reshape(%1042, newshape=[5, 13, 4]) /* ty=Tensor[(5, 13, 4), uint8] */;
  %1045 = reshape(%1043, newshape=[5, 13, 4]) /* ty=Tensor[(5, 13, 4), uint8] */;
  %1046 = @func_1349(%1044, %1045) /* ty=(Tensor[(5, 13, 4), float64],) */;
  %1047 = @func_2052() /* ty=Tensor[(10, 16, 13), int64] */;
  %1048 = %1046.0;
  %1049 = @func_2052() /* ty=Tensor[(10, 16, 13), int64] */;
  (%1047, %1048, %var_4104, %1049)
}

def @func_12020() -> Tensor[(10, 16, 13), uint32] {
  @func_12018() /* ty=Tensor[(10, 16, 13), uint32] */
}

def @func_11910() -> (Tensor[(2, 720), float32], Tensor[(10, 16, 13), int64]) {
  %1050 = @func_1918() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(2, 720), float32]) */;
  %1051 = @func_10555() /* ty=(Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), int64]) */;
  %1052 = %1050.1;
  %1053 = %1051.0;
  (%1052, %1053)
}

def @func_8505() -> (Tensor[(10, 16, 13), int64],) {
  %1054 = @func_6036() /* ty=(Tensor[(10, 16, 13), int64],) */;
  %1055 = %1054.0;
  (%1055,)
}

def @func_8069() -> (Tensor[(300), float32], Tensor[(10, 16, 13), uint32]) {
  %1060 = fn () -> (Tensor[(300), float32], Tensor[(10, 16, 13), uint32]) {
    %1056 = @func_2370() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(5, 4, 15), float32], Tensor[(300), float32]) */;
    %1057 = @func_5088() /* ty=(Tensor[(10, 16, 13), uint32], Tensor[(10, 16, 13), uint32]) */;
    %1058 = %1056.2;
    %1059 = %1057.0;
    (%1058, %1059)
  };
  %1060() /* ty=(Tensor[(300), float32], Tensor[(10, 16, 13), uint32]) */
}

def @func_1353(%var_1351: Tensor[(5, 13, 4), uint8], %var_1352: Tensor[(5, 13, 4), uint8]) -> (Tensor[(5, 13, 4), float64],) {
  @func_1349(%var_1351, %var_1352) /* ty=(Tensor[(5, 13, 4), float64],) */
}

def @func_1276(%var_1275: Tensor[(728), float32]) -> (Tensor[(10, 16, 13), int64], Tensor[(13, 4, 14), float32], Tensor[(78), float64], Tensor[(728), float32], Tensor[(234), float64], Tensor[(2, 11, 5), float64], Tensor[(110), float64]) {
  %1075 = fn (%var_1258: Tensor[(728), float32]) -> (Tensor[(10, 16, 13), int64], Tensor[(13, 4, 14), float32], Tensor[(78), float64], Tensor[(728), float32], Tensor[(234), float64], Tensor[(2, 11, 5), float64], Tensor[(110), float64]) {
    %1061 = @func_1191() /* ty=(Tensor[(10, 16, 13), int64],) */;
    %1062 = cast(meta[relay.Constant][41] /* ty=Tensor[(78), float64] */, dtype="float64") /* ty=Tensor[(78), float64] */;
    %1063 = cast(%var_1258, dtype="float32") /* ty=Tensor[(728), float32] */;
    %1064 = cast(meta[relay.Constant][42] /* ty=Tensor[(234), float64] */, dtype="float64") /* ty=Tensor[(234), float64] */;
    %1065 = reshape(%1062, newshape=[1, 6, 13]) /* ty=Tensor[(1, 6, 13), float64] */;
    %1066 = reshape(%1063, newshape=[728]) /* ty=Tensor[(728), float32] */;
    %1067 = reshape(%1064, newshape=[3, 6, 13]) /* ty=Tensor[(3, 6, 13), float64] */;
    %1068 = @func_311(%1065, %1066, %1067) /* ty=(Tensor[(?, 6, 13), bool], Tensor[(13, 4, 14), float32], Tensor[(728), float32], Tensor[(13, 4, 14), float32], Tensor[(3, 6, 13), bool], Tensor[(13, 4, 14), float32]) */;
    %1069 = cast(meta[relay.Constant][43] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
    %1070 = reshape(%1069, newshape=[2, 11, 5]) /* ty=Tensor[(2, 11, 5), float64] */;
    %1071 = @func_661(%1070) /* ty=(Tensor[(2, 11, 5), bool], Tensor[(2, 11, 5), float32], Tensor[(2, 11, 5), float64]) */;
    %1072 = %1061.0;
    %1073 = %1068.1;
    %1074 = %1071.2;
    (%1072, %1073, meta[relay.Constant][41] /* ty=Tensor[(78), float64] */, %var_1258, meta[relay.Constant][42] /* ty=Tensor[(234), float64] */, %1074, meta[relay.Constant][43] /* ty=Tensor[(110), float64] */)
  };
  %1075(%var_1275) /* ty=(Tensor[(10, 16, 13), int64], Tensor[(13, 4, 14), float32], Tensor[(78), float64], Tensor[(728), float32], Tensor[(234), float64], Tensor[(2, 11, 5), float64], Tensor[(110), float64]) */
}

def @func_7510() -> (Tensor[(10, 16, 13), float32],) {
  %1078 = fn () -> (Tensor[(10, 16, 13), float32],) {
    %1076 = @func_6451() /* ty=(Tensor[(10, 16, 13), float32], Tensor[(10, 16, 13), int64], Tensor[(10, 16, 13), uint32]) */;
    %1077 = %1076.0;
    (%1077,)
  };
  %1078() /* ty=(Tensor[(10, 16, 13), float32],) */
}

def @func_3501(%var_3488: Tensor[(728), float32]) -> (Tensor[(10, 16, 13), int64], Tensor[(13, 4, 14), float32], Tensor[(78), float64], Tensor[(728), float32], Tensor[(234), float64]) {
  %1079 = cast(meta[relay.Constant][44] /* ty=Tensor[(78), float64] */, dtype="float64") /* ty=Tensor[(78), float64] */;
  %1080 = cast(%var_3488, dtype="float32") /* ty=Tensor[(728), float32] */;
  %1081 = cast(meta[relay.Constant][45] /* ty=Tensor[(234), float64] */, dtype="float64") /* ty=Tensor[(234), float64] */;
  %1082 = reshape(%1079, newshape=[1, 6, 13]) /* ty=Tensor[(1, 6, 13), float64] */;
  %1083 = reshape(%1080, newshape=[728]) /* ty=Tensor[(728), float32] */;
  %1084 = reshape(%1081, newshape=[3, 6, 13]) /* ty=Tensor[(3, 6, 13), float64] */;
  %1085 = @func_311(%1082, %1083, %1084) /* ty=(Tensor[(?, 6, 13), bool], Tensor[(13, 4, 14), float32], Tensor[(728), float32], Tensor[(13, 4, 14), float32], Tensor[(3, 6, 13), bool], Tensor[(13, 4, 14), float32]) */;
  %1086 = @func_2640() /* ty=Tensor[(10, 16, 13), int64] */;
  %1087 = %1085.5;
  (%1086, %1087, meta[relay.Constant][44] /* ty=Tensor[(78), float64] */, %var_3488, meta[relay.Constant][45] /* ty=Tensor[(234), float64] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen590/build/output.py", line 3705, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:36:52] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

