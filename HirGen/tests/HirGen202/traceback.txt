==========mod==========
#[version = "0.0.5"]
def @func_1824(%var_1802: Tensor[(1755), float64], %var_1808: Tensor[(36, 6), uint8], %var_1816: Tensor[(1800), uint16]) -> (Tensor[(9, 5, 11), float32], Tensor[(216), uint8], Tensor[(5, 14, 14), float32], Tensor[(1755), float64], Tensor[(36, 6), uint32], Tensor[(12, 10, 15), float64], Tensor[(1800), uint16]) {
  %0 = @func_1694() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %1 = cast(%var_1802, dtype="float64") /* ty=Tensor[(1755), float64] */;
  %2 = reshape(%1, newshape=[15, 13, 9]) /* ty=Tensor[(15, 13, 9), float64] */;
  %3 = @func_792(%2) /* ty=(Tensor[(15, 13, 9), float64], Tensor[(12, 10, 15), float64], Tensor[(3, 600), uint16], Tensor[(980), float32], Tensor[(48), uint32], Tensor[(5, 14, 14), float32], Tensor[(12, 10, 15), float64]) */;
  %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(216), uint8] */, dtype="uint8") /* ty=Tensor[(216), uint8] */;
  %5 = reshape(%4, newshape=[36, 6]) /* ty=Tensor[(36, 6), uint8] */;
  %6 = @func_1751(%5) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(2, 12, 9), uint8], Tensor[(36, 6), uint8]) */;
  %7 = %6.3;
  %8 = cast(%var_1808, dtype="uint32") /* ty=Tensor[(36, 6), uint32] */;
  %9 = shape_of(%7, dtype="int32") /* ty=Tensor[(2), int32] */;
  %10 = cast(%7, dtype="uint32") /* ty=Tensor[(36, 6), uint32] */;
  %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %12 = cast(%var_1816, dtype="uint16") /* ty=Tensor[(1800), uint16] */;
  %13 = cast(%var_1816, dtype="uint16") /* ty=Tensor[(1800), uint16] */;
  %14 = reshape(%12, newshape=[12, 10, 15]) /* ty=Tensor[(12, 10, 15), uint16] */;
  %15 = reshape(%13, newshape=[12, 10, 15]) /* ty=Tensor[(12, 10, 15), uint16] */;
  %16 = %0.0;
  %17 = %3.5;
  %18 = multiply(%10, %11) /* ty=Tensor[(36, 6), uint32] */;
  %19 = @func_324(%14, %15) /* ty=Tensor[(12, 10, 15), float64] */;
  (%16, meta[relay.Constant][0] /* ty=Tensor[(216), uint8] */, %17, %var_1802, %18, %19, %var_1816)
}

def @func_5925(%var_5912: Tensor[(9, 5, 11), float64]) -> (Tensor[(9, 5, 11), bool],) {
  %20 = @func_4675() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %21 = %20.0;
  %22 = cast(%21, dtype="float64") /* ty=Tensor[(9, 5, 11), float64] */;
  %23 = cos(%22) /* ty=Tensor[(9, 5, 11), float64] */;
  %24 = cast(%var_5912, dtype="bool") /* ty=Tensor[(9, 5, 11), bool] */;
  %25 = shape_of(%23, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%23, dtype="bool") /* ty=Tensor[(9, 5, 11), bool] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %28 = logical_or(%26, %27) /* ty=Tensor[(9, 5, 11), bool] */;
  (%28,)
}

def @func_3396() -> (Tensor[(9, 5, 11), float32],) {
  %29 = @func_1694() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %30 = %29.0;
  (%30,)
}

def @func_3868() -> (Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) {
  %31 = @func_1908() /* ty=(Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float64]) */;
  %32 = @func_1457() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %33 = @func_3588() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %34 = %31.0;
  %35 = %32.0;
  %36 = %33.0;
  (%34, %35, %36)
}

def @func_6220() -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) {
  %37 = @func_4184() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %38 = @func_4143() /* ty=(Tensor[(1, 1755), float64],) */;
  %39 = @func_1530() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) */;
  %40 = %37.0;
  %41 = @func_5475() /* ty=Tensor[(9, 5, 11), float32] */;
  %42 = %38.0;
  %43 = @func_3236() /* ty=Tensor[(9, 5, 11), float32] */;
  %44 = %39.1;
  (%40, %41, %42, %43, %44)
}

def @func_1367() -> (Tensor[(9, 5, 11), float32],) {
  %45 = @func_1201() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %46 = %45.0;
  (%46,)
}

def @func_2693(%var_2658: Tensor[(980, 1), float32], %var_2665: Tensor[(300), int64]) -> (Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(980, 1), float32], Tensor[(2, 10, 15), float32], Tensor[(300), int64], Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64]) {
  %47 = @func_1694() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %48 = cast(%var_2658, dtype="float32") /* ty=Tensor[(980, 1), float32] */;
  %49 = reshape(%48, newshape=[5, 14, 14]) /* ty=Tensor[(5, 14, 14), float32] */;
  %50 = @func_40(%49) /* ty=(Tensor[(5, 14, 14), float32],) */;
  %51 = cast(%var_2665, dtype="int64") /* ty=Tensor[(300), int64] */;
  %52 = cast(%var_2665, dtype="int64") /* ty=Tensor[(300), int64] */;
  %53 = reshape(%51, newshape=[2, 10, 15]) /* ty=Tensor[(2, 10, 15), int64] */;
  %54 = reshape(%52, newshape=[2, 10, 15]) /* ty=Tensor[(2, 10, 15), int64] */;
  %55 = @func_1729(%53, %54) /* ty=(Tensor[(2, 10, 15), float32], Tensor[(2, 10, 15), uint64], Tensor[(980), float32], Tensor[(1, 1755), float64]) */;
  %56 = @func_1457() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %57 = %55.0;
  %58 = cast(%57, dtype="int64") /* ty=Tensor[(2, 10, 15), int64] */;
  %59 = cast(%57, dtype="int64") /* ty=Tensor[(2, 10, 15), int64] */;
  %60 = reshape(%58, newshape=[2, 10, 15]) /* ty=Tensor[(2, 10, 15), int64] */;
  %61 = reshape(%59, newshape=[2, 10, 15]) /* ty=Tensor[(2, 10, 15), int64] */;
  %62 = @func_1729(%60, %61) /* ty=(Tensor[(2, 10, 15), float32], Tensor[(2, 10, 15), uint64], Tensor[(980), float32], Tensor[(1, 1755), float64]) */;
  %63 = %47.0;
  %64 = %50.0;
  %65 = %56.0;
  %66 = %62.3;
  (%63, %64, %var_2658, %57, %var_2665, %65, %66)
}

def @func_8535(%var_8518: Tensor[(980), float32], %var_8519: Tensor[(300), int64]) -> (Tensor[(9, 5, 11), float32], Tensor[(300), int64], Tensor[(980), float32], Tensor[(300), int64]) {
  %67 = @func_3142() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %68 = cast(%var_8518, dtype="float32") /* ty=Tensor[(980), float32] */;
  %69 = cast(%var_8519, dtype="int64") /* ty=Tensor[(300), int64] */;
  %70 = reshape(%68, newshape=[980, 1]) /* ty=Tensor[(980, 1), float32] */;
  %71 = reshape(%69, newshape=[300]) /* ty=Tensor[(300), int64] */;
  %72 = @func_2693(%70, %71) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(980, 1), float32], Tensor[(2, 10, 15), float32], Tensor[(300), int64], Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64]) */;
  %73 = %67.0;
  %74 = %72.4;
  (%73, %74, %var_8518, %var_8519)
}

def @func_5499(%var_5494: Tensor[(300), int64]) -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float64], Tensor[(1, 1755), float64], Tensor[(980), float32], Tensor[(300), int64]) {
  %75 = @func_2258() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %76 = cast(meta[relay.Constant][1] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
  %77 = cast(%var_5494, dtype="int64") /* ty=Tensor[(300), int64] */;
  %78 = reshape(%76, newshape=[980, 1]) /* ty=Tensor[(980, 1), float32] */;
  %79 = reshape(%77, newshape=[300]) /* ty=Tensor[(300), int64] */;
  %80 = @func_2693(%78, %79) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(980, 1), float32], Tensor[(2, 10, 15), float32], Tensor[(300), int64], Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64]) */;
  %81 = %75.0;
  %82 = @func_3213() /* ty=Tensor[(9, 5, 11), float64] */;
  %83 = %80.6;
  (%81, %82, %83, meta[relay.Constant][1] /* ty=Tensor[(980), float32] */, %var_5494)
}

def @func_7629() -> (Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32]) {
  %84 = @func_5103() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), int16]) */;
  %85 = %84.0;
  %86 = cast(%85, dtype="float64") /* ty=Tensor[(9, 5, 11), float64] */;
  %87 = @func_4855() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %88 = sigmoid(%86) /* ty=Tensor[(9, 5, 11), float64] */;
  %89 = %87.0;
  (%88, %89)
}

def @func_4184() -> (Tensor[(9, 5, 11), float32],) {
  %90 = @func_1160() /* ty=Tensor[(9, 5, 11), float32] */;
  (%90,)
}

def @func_5994() -> (Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), bool]) {
  %91 = @func_3693() /* ty=(Tensor[(9, 5, 11), float64],) */;
  %92 = @func_3142() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %93 = %92.0;
  %94 = cast(%93, dtype="float64") /* ty=Tensor[(9, 5, 11), float64] */;
  %95 = reshape(%94, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), float64] */;
  %96 = @func_5925(%95) /* ty=(Tensor[(9, 5, 11), bool],) */;
  %97 = %91.0;
  %98 = %96.0;
  (%97, %93, %98)
}

def @func_792(%var_761: Tensor[(15, 13, 9), float64]) -> (Tensor[(15, 13, 9), float64], Tensor[(12, 10, 15), float64], Tensor[(3, 600), uint16], Tensor[(980), float32], Tensor[(48), uint32], Tensor[(5, 14, 14), float32], Tensor[(12, 10, 15), float64]) {
  %99 = cast(%var_761, dtype="float64") /* ty=Tensor[(15, 13, 9), float64] */;
  %100 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(15, 13, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %101 = cast(meta[relay.Constant][2] /* ty=Tensor[(15, 13, 9), float64] */, dtype="float64") /* ty=Tensor[(15, 13, 9), float64] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %103 = cast(meta[relay.Constant][3] /* ty=Tensor[(3, 600), uint16] */, dtype="uint16") /* ty=Tensor[(3, 600), uint16] */;
  %104 = cast(meta[relay.Constant][3] /* ty=Tensor[(3, 600), uint16] */, dtype="uint16") /* ty=Tensor[(3, 600), uint16] */;
  %105 = reshape(%103, newshape=[12, 10, 15]) /* ty=Tensor[(12, 10, 15), uint16] */;
  %106 = reshape(%104, newshape=[12, 10, 15]) /* ty=Tensor[(12, 10, 15), uint16] */;
  %107 = cast(meta[relay.Constant][4] /* ty=Tensor[(48), uint32] */, dtype="uint32") /* ty=Tensor[(48), uint32] */;
  %108 = reshape(%107, newshape=[12, 4, 1]) /* ty=Tensor[(12, 4, 1), uint32] */;
  %109 = @func_749(%108) /* ty=(Tensor[(12, 4, 11), uint32], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) */;
  %110 = cast(meta[relay.Constant][4] /* ty=Tensor[(48), uint32] */, dtype="uint32") /* ty=Tensor[(48), uint32] */;
  %111 = reshape(%110, newshape=[12, 4, 1]) /* ty=Tensor[(12, 4, 1), uint32] */;
  %112 = @func_749(%111) /* ty=(Tensor[(12, 4, 11), uint32], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) */;
  %113 = cast(meta[relay.Constant][3] /* ty=Tensor[(3, 600), uint16] */, dtype="uint16") /* ty=Tensor[(3, 600), uint16] */;
  %114 = @func_324(%105, %106) /* ty=Tensor[(12, 10, 15), float64] */;
  %115 = cast(%114, dtype="uint16") /* ty=Tensor[(12, 10, 15), uint16] */;
  %116 = reshape(%113, newshape=[12, 10, 15]) /* ty=Tensor[(12, 10, 15), uint16] */;
  %117 = reshape(%115, newshape=[12, 10, 15]) /* ty=Tensor[(12, 10, 15), uint16] */;
  %118 = floor_divide(%101, %102) /* ty=Tensor[(15, 13, 9), float64] */;
  %119 = %109.2;
  %120 = %112.1;
  %121 = @func_324(%116, %117) /* ty=Tensor[(12, 10, 15), float64] */;
  (%118, %114, meta[relay.Constant][3] /* ty=Tensor[(3, 600), uint16] */, %119, meta[relay.Constant][4] /* ty=Tensor[(48), uint32] */, %120, %121)
}

def @func_6605() -> (Tensor[(9, 5, 11), float64],) {
  %122 = @func_3213() /* ty=Tensor[(9, 5, 11), float64] */;
  (%122,)
}

def @func_7715() -> Tensor[(300), int64] {
  %123 = @func_3762() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(300), int64]) */;
  %123.2
}

def @func_4821(%var_4799: Tensor[(9, 5, 11), float32]) -> (Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float64]) {
  %124 = @func_3236() /* ty=Tensor[(9, 5, 11), float32] */;
  %125 = cast(%var_4799, dtype="float64") /* ty=Tensor[(9, 5, 11), float64] */;
  %126 = shape_of(%124, dtype="int32") /* ty=Tensor[(3), int32] */;
  %127 = cast(%124, dtype="float64") /* ty=Tensor[(9, 5, 11), float64] */;
  %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %129 = @func_3693() /* ty=(Tensor[(9, 5, 11), float64],) */;
  %130 = floor_mod(%127, %128) /* ty=Tensor[(9, 5, 11), float64] */;
  %131 = %129.0;
  (%130, %131)
}

def @func_1999() -> Tensor[(9, 5, 11), float32] {
  @func_1963() /* ty=Tensor[(9, 5, 11), float32] */
}

def @func_5056() -> (Tensor[(9, 5, 11), float64],) {
  %132 = @func_3213() /* ty=Tensor[(9, 5, 11), float64] */;
  (%132,)
}

def @func_2078() -> (Tensor[(9, 5, 11), uint16],) {
  %133 = @func_1999() /* ty=Tensor[(9, 5, 11), float32] */;
  %134 = cast(%133, dtype="float64") /* ty=Tensor[(9, 5, 11), float64] */;
  %135 = reshape(%134, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), float64] */;
  %136 = @func_1613(%135) /* ty=(Tensor[(9, 5, 11), int8], Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float32]) */;
  %137 = %136.0;
  %138 = cast(%137, dtype="bool") /* ty=Tensor[(9, 5, 11), bool] */;
  %139 = shape_of(%133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %140 = cast(%133, dtype="bool") /* ty=Tensor[(9, 5, 11), bool] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %142 = less_equal(%140, %141) /* ty=Tensor[(9, 5, 11), bool] */;
  %143 = cast(%142, dtype="uint16") /* ty=Tensor[(9, 5, 11), uint16] */;
  %144 = shape_of(%133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(%133, dtype="uint16") /* ty=Tensor[(9, 5, 11), uint16] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %147 = bitwise_or(%145, %146) /* ty=Tensor[(9, 5, 11), uint16] */;
  (%147,)
}

def @func_324(%var_311: Tensor[(12, 10, 15), uint16], %var_318: Tensor[(12, 10, 15), uint16]) -> Tensor[(12, 10, 15), float64] {
  %148 = cast(meta[relay.Constant][5] /* ty=Tensor[(12, 10, 15), uint16] */, dtype="uint16") /* ty=Tensor[(12, 10, 15), uint16] */;
  %149 = shape_of(%var_311, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%var_311, dtype="uint16") /* ty=Tensor[(12, 10, 15), uint16] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %152 = bitwise_xor(%150, %151) /* ty=Tensor[(12, 10, 15), uint16] */;
  %153 = cast(%var_318, dtype="float64") /* ty=Tensor[(12, 10, 15), float64] */;
  %154 = shape_of(%152, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(%152, dtype="float64") /* ty=Tensor[(12, 10, 15), float64] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%155, %156) /* ty=Tensor[(12, 10, 15), float64] */
}

def @func_1530() -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) {
  %157 = @func_1201() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %158 = %157.0;
  %159 = cast(%158, dtype="float32") /* ty=Tensor[(9, 5, 11), float32] */;
  %160 = cast(%158, dtype="float64") /* ty=Tensor[(9, 5, 11), float64] */;
  %161 = reshape(%159, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), float32] */;
  %162 = reshape(%160, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), float64] */;
  %163 = @func_1233(%161, %162) /* ty=(Tensor[(9, 5, 11), bool], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) */;
  %164 = cast(%158, dtype="float32") /* ty=Tensor[(9, 5, 11), float32] */;
  %165 = %163.2;
  %166 = cast(%165, dtype="float64") /* ty=Tensor[(9, 5, 11), float64] */;
  %167 = reshape(%164, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), float32] */;
  %168 = reshape(%166, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), float64] */;
  %169 = @func_1233(%167, %168) /* ty=(Tensor[(9, 5, 11), bool], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) */;
  %170 = %169.2;
  %171 = cast(%170, dtype="float32") /* ty=Tensor[(9, 5, 11), float32] */;
  %172 = cast(meta[relay.Constant][6] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
  %173 = reshape(%172, newshape=[5, 14, 14]) /* ty=Tensor[(5, 14, 14), float32] */;
  %174 = @func_40(%173) /* ty=(Tensor[(5, 14, 14), float32],) */;
  %175 = sqrt(%171) /* ty=Tensor[(9, 5, 11), float32] */;
  %176 = %174.0;
  (%158, %165, %175, %176, meta[relay.Constant][6] /* ty=Tensor[(980), float32] */)
}

def @func_696(%var_670: Tensor[(13, 6, 12), uint64], %var_671: Tensor[(13, 6, 12), uint64]) -> (Tensor[(13, 6, 12), uint64], Tensor[(5, 14, 14), float32], Tensor[(980), float32], Tensor[(13, 6, 12), float32]) {
  %177 = cast(%var_671, dtype="uint64") /* ty=Tensor[(13, 6, 12), uint64] */;
  %178 = shape_of(%var_670, dtype="int32") /* ty=Tensor[(3), int32] */;
  %179 = cast(%var_670, dtype="uint64") /* ty=Tensor[(13, 6, 12), uint64] */;
  %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %181 = cast(meta[relay.Constant][7] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
  %182 = reshape(%181, newshape=[5, 14, 14]) /* ty=Tensor[(5, 14, 14), float32] */;
  %183 = @func_40(%182) /* ty=(Tensor[(5, 14, 14), float32],) */;
  %184 = cast(%var_671, dtype="float32") /* ty=Tensor[(13, 6, 12), float32] */;
  %185 = maximum(%179, %180) /* ty=Tensor[(13, 6, 12), uint64] */;
  %186 = %183.0;
  %187 = sqrt(%184) /* ty=Tensor[(13, 6, 12), float32] */;
  (%185, %186, meta[relay.Constant][7] /* ty=Tensor[(980), float32] */, %187)
}

def @func_3135() -> (Tensor[(9, 5, 11), uint16], Tensor[(9, 5, 11), float32]) {
  %188 = @func_2078() /* ty=(Tensor[(9, 5, 11), uint16],) */;
  %189 = @func_2629() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %190 = %188.0;
  %191 = %189.0;
  (%190, %191)
}

def @func_1637(%var_1631: Tensor[(1, 1800), uint16]) -> (Tensor[(9, 5, 11), float32], Tensor[(12, 10, 15), float64], Tensor[(1, 1800), uint16]) {
  %192 = @func_1201() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %193 = cast(%var_1631, dtype="uint16") /* ty=Tensor[(1, 1800), uint16] */;
  %194 = cast(%var_1631, dtype="uint16") /* ty=Tensor[(1, 1800), uint16] */;
  %195 = reshape(%193, newshape=[12, 10, 15]) /* ty=Tensor[(12, 10, 15), uint16] */;
  %196 = reshape(%194, newshape=[12, 10, 15]) /* ty=Tensor[(12, 10, 15), uint16] */;
  %197 = %192.0;
  %198 = @func_324(%195, %196) /* ty=Tensor[(12, 10, 15), float64] */;
  (%197, %198, %var_1631)
}

def @func_7071() -> (Tensor[(9, 5, 11), float64],) {
  %199 = @func_7013() /* ty=(Tensor[(9, 5, 11), float64],) */;
  %200 = %199.0;
  (%200,)
}

def @func_1613(%var_1574: Tensor[(9, 5, 11), float64]) -> (Tensor[(9, 5, 11), int8], Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float32]) {
  %201 = @func_1201() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %202 = %201.0;
  %203 = cast(%202, dtype="float64") /* ty=Tensor[(9, 5, 11), float64] */;
  %204 = asinh(%203) /* ty=Tensor[(9, 5, 11), float64] */;
  %205 = cast(%var_1574, dtype="int8") /* ty=Tensor[(9, 5, 11), int8] */;
  %206 = shape_of(%204, dtype="int32") /* ty=Tensor[(3), int32] */;
  %207 = cast(%204, dtype="int8") /* ty=Tensor[(9, 5, 11), int8] */;
  %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %209 = cast(%var_1574, dtype="int16") /* ty=Tensor[(9, 5, 11), int16] */;
  %210 = shape_of(%204, dtype="int32") /* ty=Tensor[(3), int32] */;
  %211 = cast(%204, dtype="int16") /* ty=Tensor[(9, 5, 11), int16] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %213 = @func_1457() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %214 = logical_xor(%207, %208) /* ty=Tensor[(9, 5, 11), int8] */;
  %215 = multiply(%211, %212) /* ty=Tensor[(9, 5, 11), int16] */;
  %216 = %213.0;
  (%214, %215, %216)
}

def @func_4249() -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) {
  %217 = @func_4184() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %218 = @func_1908() /* ty=(Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float64]) */;
  %219 = %218.1;
  %220 = cast(%219, dtype="float32") /* ty=Tensor[(9, 5, 11), float32] */;
  %221 = %217.0;
  %222 = tan(%220) /* ty=Tensor[(9, 5, 11), float32] */;
  (%221, %222)
}

def @func_3436() -> (Tensor[(9, 5, 11), float32],) {
  %223 = @func_3305() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %224 = %223.0;
  (%224,)
}

def @func_6117() -> Tensor[(5, 14, 14), float32] {
  %225 = @func_1530() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) */;
  %225.3
}

def @func_2258() -> (Tensor[(9, 5, 11), float32],) {
  %226 = @func_1891() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %227 = %226.0;
  (%227,)
}

def @func_4036() -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) {
  %228 = @func_3762() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(300), int64]) */;
  %229 = @func_1963() /* ty=Tensor[(9, 5, 11), float32] */;
  %230 = %228.0;
  (%229, %230)
}

def @func_2928(%var_2883: Tensor[(9, 5, 11), float32]) -> (Tensor[(9, 5, 11), uint32], Tensor[(9, 5, 11), uint8], Tensor[(9, 5, 11), bool]) {
  %231 = @func_2258() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %232 = %231.0;
  %233 = cast(%var_2883, dtype="uint32") /* ty=Tensor[(9, 5, 11), uint32] */;
  %234 = shape_of(%232, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(%232, dtype="uint32") /* ty=Tensor[(9, 5, 11), uint32] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %237 = cast(%232, dtype="uint8") /* ty=Tensor[(9, 5, 11), uint8] */;
  %238 = shape_of(%var_2883, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(%var_2883, dtype="uint8") /* ty=Tensor[(9, 5, 11), uint8] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %241 = cast(%232, dtype="float32") /* ty=Tensor[(9, 5, 11), float32] */;
  %242 = exp(%241) /* ty=Tensor[(9, 5, 11), float32] */;
  %243 = @func_1201() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %244 = %243.0;
  %245 = cast(%244, dtype="bool") /* ty=Tensor[(9, 5, 11), bool] */;
  %246 = shape_of(%242, dtype="int32") /* ty=Tensor[(3), int32] */;
  %247 = cast(%242, dtype="bool") /* ty=Tensor[(9, 5, 11), bool] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %249 = bitwise_xor(%235, %236) /* ty=Tensor[(9, 5, 11), uint32] */;
  %250 = bitwise_and(%239, %240) /* ty=Tensor[(9, 5, 11), uint8] */;
  %251 = not_equal(%247, %248) /* ty=Tensor[(9, 5, 11), bool] */;
  (%249, %250, %251)
}

def @func_7358() -> (Tensor[(9, 5, 11), float32],) {
  %252 = @func_1999() /* ty=Tensor[(9, 5, 11), float32] */;
  (%252,)
}

def @func_3588() -> (Tensor[(9, 5, 11), float32],) {
  %253 = @func_3142() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %254 = %253.0;
  (%254,)
}

def @func_2393(%var_2391: Tensor[(936), uint64]) -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(980), float32], Tensor[(936), uint64]) {
  %255 = @func_1891() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %256 = cast(%var_2391, dtype="uint64") /* ty=Tensor[(936), uint64] */;
  %257 = cast(%var_2391, dtype="uint64") /* ty=Tensor[(936), uint64] */;
  %258 = reshape(%256, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), uint64] */;
  %259 = reshape(%257, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), uint64] */;
  %260 = @func_696(%258, %259) /* ty=(Tensor[(13, 6, 12), uint64], Tensor[(5, 14, 14), float32], Tensor[(980), float32], Tensor[(13, 6, 12), float32]) */;
  %261 = %255.0;
  %262 = @func_1160() /* ty=Tensor[(9, 5, 11), float32] */;
  %263 = %260.2;
  (%261, %262, %263, %var_2391)
}

def @func_3251(%var_3239: Tensor[(4, 9, 1), float64]) -> (Tensor[(4, 9, 1), float64], Tensor[(4, 9, 1), float64]) {
  %264 = cast(%var_3239, dtype="float64") /* ty=Tensor[(4, 9, 1), float64] */;
  %265 = cast(%var_3239, dtype="float64") /* ty=Tensor[(4, 9, 1), float64] */;
  %266 = sin(%264) /* ty=Tensor[(4, 9, 1), float64] */;
  %267 = log2(%265) /* ty=Tensor[(4, 9, 1), float64] */;
  (%266, %267)
}

def @func_8865(%var_8845: Tensor[(7, 3, 10), float32]) -> (Tensor[(9, 5, 11), float32], Tensor[(7, 3, 10), uint32]) {
  %268 = @func_8322() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %269 = cast(%var_8845, dtype="float32") /* ty=Tensor[(7, 3, 10), float32] */;
  %270 = sin(%269) /* ty=Tensor[(7, 3, 10), float32] */;
  %271 = cast(%var_8845, dtype="uint32") /* ty=Tensor[(7, 3, 10), uint32] */;
  %272 = shape_of(%270, dtype="int32") /* ty=Tensor[(3), int32] */;
  %273 = cast(%270, dtype="uint32") /* ty=Tensor[(7, 3, 10), uint32] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %275 = %268.0;
  %276 = right_shift(%273, %274) /* ty=Tensor[(7, 3, 10), uint32] */;
  (%275, %276)
}

def @func_8233() -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(12, 10, 15), float64], Tensor[(900), float32], Tensor[(9, 5, 11), float32]) {
  %277 = @func_6220() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) */;
  %278 = @func_6040() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), uint16]) */;
  %279 = cast(meta[relay.Constant][8] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %280 = reshape(%279, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %281 = @func_5276(%280) /* ty=(Tensor[(12, 10, 15), float64], Tensor[(10, 15, 6), bool]) */;
  %282 = %277.0;
  %283 = %278.0;
  %284 = %281.0;
  %285 = @func_3236() /* ty=Tensor[(9, 5, 11), float32] */;
  (%282, %283, %284, meta[relay.Constant][8] /* ty=Tensor[(900), float32] */, %285)
}

def @func_6679(%var_6664: float32) -> (Tensor[(13, 1, 8), float32],) {
  %286 = cast(%var_6664, dtype="float32") /* ty=float32 */;
  %287 = cast(meta[relay.Constant][9] /* ty=Tensor[(13, 1, 8), float32] */, dtype="float32") /* ty=Tensor[(13, 1, 8), float32] */;
  %288 = floor_mod(%286, %287) /* ty=Tensor[(13, 1, 8), float32] */;
  (%288,)
}

def @func_5560() -> Tensor[(9, 5, 11), float32] {
  @func_4879() /* ty=Tensor[(9, 5, 11), float32] */
}

def @func_7583(%var_7574: Tensor[(12285, 1), float32], %var_7581: Tensor[(36), float64]) -> (Tensor[(9, 5, 11), uint16], Tensor[(9, 5, 11), float32], Tensor[(12285, 1), float32], Tensor[(4, 9, 1), float64], Tensor[(36), float64]) {
  %289 = @func_3135() /* ty=(Tensor[(9, 5, 11), uint16], Tensor[(9, 5, 11), float32]) */;
  %290 = cast(%var_7574, dtype="float32") /* ty=Tensor[(12285, 1), float32] */;
  %291 = reshape(%290, newshape=[12285]) /* ty=Tensor[(12285), float32] */;
  %292 = @func_6156(%291) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(12285), float32]) */;
  %293 = cast(%var_7581, dtype="float64") /* ty=Tensor[(36), float64] */;
  %294 = reshape(%293, newshape=[4, 9, 1]) /* ty=Tensor[(4, 9, 1), float64] */;
  %295 = @func_3251(%294) /* ty=(Tensor[(4, 9, 1), float64], Tensor[(4, 9, 1), float64]) */;
  %296 = %289.0;
  %297 = %292.0;
  %298 = %295.0;
  (%296, %297, %var_7574, %298, %var_7581)
}

def @func_4675() -> (Tensor[(9, 5, 11), float32],) {
  %299 = @func_1694() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %300 = %299.0;
  (%300,)
}

def @func_4745(%var_4711: Tensor[(208), float32], %var_4714: Tensor[(910), uint16]) -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(2640), float32], Tensor[(900), float32], Tensor[(48), uint32], Tensor[(208), float32], Tensor[(5, 14, 14), float32], Tensor[(910), uint16]) {
  %301 = @func_3762() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(300), int64]) */;
  %302 = cast(meta[relay.Constant][10] /* ty=Tensor[(2640), float32] */, dtype="float32") /* ty=Tensor[(2640), float32] */;
  %303 = cast(meta[relay.Constant][11] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %304 = reshape(%302, newshape=[2640]) /* ty=Tensor[(2640), float32] */;
  %305 = reshape(%303, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %306 = @func_4620(%304, %305) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(1755), float64], Tensor[(2640), float32], Tensor[(9, 5, 11), float32], Tensor[(10, 15, 6), float64], Tensor[(900), float32], Tensor[(2, 12, 9), uint8], Tensor[(36, 6), uint8]) */;
  %307 = cast(%var_4711, dtype="float32") /* ty=Tensor[(208), float32] */;
  %308 = reshape(%307, newshape=[4, 4, 13]) /* ty=Tensor[(4, 4, 13), float32] */;
  %309 = @func_2359(%308) /* ty=(Tensor[(4, 4, 13), uint32], Tensor[(4, 4, 13), int64], Tensor[(48), uint32], Tensor[(1755), float64]) */;
  %310 = cast(%var_4714, dtype="uint16") /* ty=Tensor[(910), uint16] */;
  %311 = reshape(%310, newshape=[10, 13, 7]) /* ty=Tensor[(10, 13, 7), uint16] */;
  %312 = @func_101(%311) /* ty=(Tensor[(10, 13, 7), uint16], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) */;
  %313 = %301.0;
  %314 = %306.0;
  %315 = %309.2;
  %316 = %312.1;
  (%313, %314, meta[relay.Constant][10] /* ty=Tensor[(2640), float32] */, meta[relay.Constant][11] /* ty=Tensor[(900), float32] */, %315, %var_4711, %316, %var_4714)
}

def @func_2842(%var_2763: Tensor[(15, 8, 5), float64], %var_2764: Tensor[(15, 8, 5), float64], %var_2787: Tensor[(208), float32], %var_2789: Tensor[(15, 8, 5), bool], %var_2813: Tensor[(15, 8, 5), float64]) -> (Tensor[(48), uint32], Tensor[(208), float32], Tensor[(15, 8, 5), bool], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(15, 8, 5), int32]) {
  %317 = cast(%var_2787, dtype="float32") /* ty=Tensor[(208), float32] */;
  %318 = reshape(%317, newshape=[4, 4, 13]) /* ty=Tensor[(4, 4, 13), float32] */;
  %319 = @func_2359(%318) /* ty=(Tensor[(4, 4, 13), uint32], Tensor[(4, 4, 13), int64], Tensor[(48), uint32], Tensor[(1755), float64]) */;
  %320 = cast(%var_2764, dtype="bool") /* ty=Tensor[(15, 8, 5), bool] */;
  %321 = shape_of(%var_2763, dtype="int32") /* ty=Tensor[(3), int32] */;
  %322 = cast(%var_2763, dtype="bool") /* ty=Tensor[(15, 8, 5), bool] */;
  %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %324 = not_equal(%322, %323) /* ty=Tensor[(15, 8, 5), bool] */;
  %325 = cast(%var_2789, dtype="bool") /* ty=Tensor[(15, 8, 5), bool] */;
  %326 = shape_of(%324, dtype="int32") /* ty=Tensor[(3), int32] */;
  %327 = cast(%324, dtype="bool") /* ty=Tensor[(15, 8, 5), bool] */;
  %328 = dyn.reshape(%325, %326, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %329 = cast(%324, dtype="float64") /* ty=Tensor[(15, 8, 5), float64] */;
  %330 = tan(%329) /* ty=Tensor[(15, 8, 5), float64] */;
  %331 = cast(%var_2813, dtype="uint64") /* ty=Tensor[(15, 8, 5), uint64] */;
  %332 = shape_of(%330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(%330, dtype="uint64") /* ty=Tensor[(15, 8, 5), uint64] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %335 = minimum(%333, %334) /* ty=Tensor[(15, 8, 5), uint64] */;
  %336 = cast(%335, dtype="int32") /* ty=Tensor[(15, 8, 5), int32] */;
  %337 = shape_of(%330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %338 = cast(%330, dtype="int32") /* ty=Tensor[(15, 8, 5), int32] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %340 = %319.2;
  %341 = greater_equal(%327, %328) /* ty=Tensor[(15, 8, 5), bool] */;
  %342 = @func_1160() /* ty=Tensor[(9, 5, 11), float32] */;
  %343 = @func_1160() /* ty=Tensor[(9, 5, 11), float32] */;
  %344 = bitwise_xor(%338, %339) /* ty=Tensor[(15, 8, 5), int32] */;
  (%340, %var_2787, %341, %342, %343, %344)
}

def @func_5417(%var_5397: Tensor[(900, 1), float32]) -> (Tensor[(9, 5, 11), float32], Tensor[(10, 15, 6), float64], Tensor[(900, 1), float32]) {
  %345 = @func_1367() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %346 = cast(%var_5397, dtype="float32") /* ty=Tensor[(900, 1), float32] */;
  %347 = reshape(%346, newshape=[10, 15, 6]) /* ty=Tensor[(10, 15, 6), float32] */;
  %348 = @func_3885(%347) /* ty=(Tensor[(10, 15, 6), float64],) */;
  %349 = cast(%var_5397, dtype="float32") /* ty=Tensor[(900, 1), float32] */;
  %350 = tan(%349) /* ty=Tensor[(900, 1), float32] */;
  %351 = cast(%350, dtype="float32") /* ty=Tensor[(900, 1), float32] */;
  %352 = %345.0;
  %353 = %348.0;
  %354 = atanh(%351) /* ty=Tensor[(900, 1), float32] */;
  (%352, %353, %354)
}

def @func_8497() -> Tensor[(9, 5, 11), float64] {
  %355 = @func_5056() /* ty=(Tensor[(9, 5, 11), float64],) */;
  %355.0
}

def @func_5802() -> (Tensor[(9, 5, 11), float32], Tensor[(10, 11, 5), float64], Tensor[(550), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(936), uint64], Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32]) {
  %356 = cast(meta[relay.Constant][12] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
  %357 = reshape(%356, newshape=[10, 11, 5]) /* ty=Tensor[(10, 11, 5), float64] */;
  %358 = @func_3737(%357) /* ty=(Tensor[(10, 11, 5), int32], Tensor[(10, 11, 5), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) */;
  %359 = @func_5103() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), int16]) */;
  %360 = cast(meta[relay.Constant][13] /* ty=Tensor[(936), uint64] */, dtype="uint64") /* ty=Tensor[(936), uint64] */;
  %361 = cast(meta[relay.Constant][13] /* ty=Tensor[(936), uint64] */, dtype="uint64") /* ty=Tensor[(936), uint64] */;
  %362 = reshape(%360, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), uint64] */;
  %363 = reshape(%361, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), uint64] */;
  %364 = @func_696(%362, %363) /* ty=(Tensor[(13, 6, 12), uint64], Tensor[(5, 14, 14), float32], Tensor[(980), float32], Tensor[(13, 6, 12), float32]) */;
  %365 = @func_5432() /* ty=(Tensor[(9, 5, 11), float64],) */;
  %366 = @func_1530() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) */;
  %367 = @func_3526() /* ty=Tensor[(9, 5, 11), float32] */;
  %368 = %358.1;
  %369 = %359.0;
  %370 = @func_1160() /* ty=Tensor[(9, 5, 11), float32] */;
  %371 = %364.1;
  %372 = %365.0;
  %373 = %366.1;
  (%367, %368, meta[relay.Constant][12] /* ty=Tensor[(550), float64] */, %369, %370, %371, meta[relay.Constant][13] /* ty=Tensor[(936), uint64] */, %372, %373)
}

def @func_3027(%var_2990: Tensor[(600), float64], %var_2991: Tensor[(208, 1), float32], %var_3017: Tensor[(936), uint64]) -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(10, 13, 7), uint16], Tensor[(91, 10), uint16], Tensor[(13, 6, 12), uint64], Tensor[(936), uint64], Tensor[(208, 600), bool]) {
  %374 = @func_1694() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %375 = cast(%var_2990, dtype="float64") /* ty=Tensor[(600), float64] */;
  %376 = cast(%var_2990, dtype="float64") /* ty=Tensor[(600), float64] */;
  %377 = cast(%var_2991, dtype="float32") /* ty=Tensor[(208, 1), float32] */;
  %378 = cast(%var_2990, dtype="bool") /* ty=Tensor[(600), bool] */;
  %379 = cast(%var_2990, dtype="float64") /* ty=Tensor[(600), float64] */;
  %380 = reshape(%375, newshape=[15, 8, 5]) /* ty=Tensor[(15, 8, 5), float64] */;
  %381 = reshape(%376, newshape=[15, 8, 5]) /* ty=Tensor[(15, 8, 5), float64] */;
  %382 = reshape(%377, newshape=[208]) /* ty=Tensor[(208), float32] */;
  %383 = reshape(%378, newshape=[15, 8, 5]) /* ty=Tensor[(15, 8, 5), bool] */;
  %384 = reshape(%379, newshape=[15, 8, 5]) /* ty=Tensor[(15, 8, 5), float64] */;
  %385 = @func_2842(%380, %381, %382, %383, %384) /* ty=(Tensor[(48), uint32], Tensor[(208), float32], Tensor[(15, 8, 5), bool], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(15, 8, 5), int32]) */;
  %386 = cast(meta[relay.Constant][14] /* ty=Tensor[(91, 10), uint16] */, dtype="uint16") /* ty=Tensor[(91, 10), uint16] */;
  %387 = reshape(%386, newshape=[7, 130]) /* ty=Tensor[(7, 130), uint16] */;
  %388 = @func_2430(%387) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(10, 13, 7), uint16], Tensor[(7, 130), uint16]) */;
  %389 = cast(%var_3017, dtype="uint64") /* ty=Tensor[(936), uint64] */;
  %390 = cast(%var_3017, dtype="uint64") /* ty=Tensor[(936), uint64] */;
  %391 = reshape(%389, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), uint64] */;
  %392 = reshape(%390, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), uint64] */;
  %393 = @func_696(%391, %392) /* ty=(Tensor[(13, 6, 12), uint64], Tensor[(5, 14, 14), float32], Tensor[(980), float32], Tensor[(13, 6, 12), float32]) */;
  %394 = cast(%var_2990, dtype="float32") /* ty=Tensor[(600), float32] */;
  %395 = sqrt(%394) /* ty=Tensor[(600), float32] */;
  %396 = cast(%395, dtype="bool") /* ty=Tensor[(600), bool] */;
  %397 = cast(%var_2991, dtype="bool") /* ty=Tensor[(208, 1), bool] */;
  %398 = %374.0;
  %399 = %385.4;
  %400 = %388.1;
  %401 = %393.0;
  %402 = logical_and(%396, %397) /* ty=Tensor[(208, 600), bool] */;
  (%398, %399, %400, meta[relay.Constant][14] /* ty=Tensor[(91, 10), uint16] */, %401, %var_3017, %402)
}

def @func_1160() -> Tensor[(9, 5, 11), float32] {
  %403 = cast(meta[relay.Constant][15] /* ty=Tensor[(9, 5, 11), float32] */, dtype="float32") /* ty=Tensor[(9, 5, 11), float32] */;
  %404 = acos(%403) /* ty=Tensor[(9, 5, 11), float32] */;
  %405 = cast(%404, dtype="float32") /* ty=Tensor[(9, 5, 11), float32] */;
  sin(%405) /* ty=Tensor[(9, 5, 11), float32] */
}

def @func_2430(%var_2428: Tensor[(7, 130), uint16]) -> (Tensor[(9, 5, 11), float32], Tensor[(10, 13, 7), uint16], Tensor[(7, 130), uint16]) {
  %406 = @func_1891() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %407 = cast(%var_2428, dtype="uint16") /* ty=Tensor[(7, 130), uint16] */;
  %408 = reshape(%407, newshape=[10, 13, 7]) /* ty=Tensor[(10, 13, 7), uint16] */;
  %409 = @func_101(%408) /* ty=(Tensor[(10, 13, 7), uint16], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) */;
  %410 = %406.0;
  %411 = %409.0;
  (%410, %411, %var_2428)
}

def @func_6899(%var_6841: Tensor[(9, 10, 13), int16], %var_6842: Tensor[(9, 10, 13), int16], %var_6889: Tensor[(495, 1), float32]) -> (Tensor[(9, 10, 13), bool], Tensor[(9, 10, 13), uint16], Tensor[(9, 5, 11), float64], Tensor[(495, 1), float32], Tensor[(9, 5, 11), float32]) {
  %412 = cast(%var_6842, dtype="bool") /* ty=Tensor[(9, 10, 13), bool] */;
  %413 = shape_of(%var_6841, dtype="int32") /* ty=Tensor[(3), int32] */;
  %414 = cast(%var_6841, dtype="bool") /* ty=Tensor[(9, 10, 13), bool] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %416 = equal(%414, %415) /* ty=Tensor[(9, 10, 13), bool] */;
  %417 = cast(%var_6842, dtype="bool") /* ty=Tensor[(9, 10, 13), bool] */;
  %418 = shape_of(%416, dtype="int32") /* ty=Tensor[(3), int32] */;
  %419 = cast(%416, dtype="bool") /* ty=Tensor[(9, 10, 13), bool] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %421 = cast(%416, dtype="uint16") /* ty=Tensor[(9, 10, 13), uint16] */;
  %422 = shape_of(%var_6841, dtype="int32") /* ty=Tensor[(3), int32] */;
  %423 = cast(%var_6841, dtype="uint16") /* ty=Tensor[(9, 10, 13), uint16] */;
  %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %425 = cast(%var_6889, dtype="float32") /* ty=Tensor[(495, 1), float32] */;
  %426 = reshape(%425, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), float32] */;
  %427 = @func_4855() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %428 = greater(%419, %420) /* ty=Tensor[(9, 10, 13), bool] */;
  %429 = bitwise_and(%423, %424) /* ty=Tensor[(9, 10, 13), uint16] */;
  %430 = @func_3334(%426) /* ty=Tensor[(9, 5, 11), float64] */;
  %431 = %427.0;
  (%428, %429, %430, %var_6889, %431)
}

def @func_8258() -> (Tensor[(9, 5, 11), uint16], Tensor[(2, 12, 9), uint8], Tensor[(216), uint8], Tensor[(9, 5, 11), float32]) {
  %432 = cast(meta[relay.Constant][16] /* ty=Tensor[(216), uint8] */, dtype="uint8") /* ty=Tensor[(216), uint8] */;
  %433 = reshape(%432, newshape=[2, 12, 9]) /* ty=Tensor[(2, 12, 9), uint8] */;
  %434 = @func_1265(%433) /* ty=(Tensor[(2, 12, 9), uint8],) */;
  %435 = @func_3365() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %436 = @func_6735() /* ty=Tensor[(9, 5, 11), uint16] */;
  %437 = %434.0;
  %438 = %435.0;
  (%436, %437, meta[relay.Constant][16] /* ty=Tensor[(216), uint8] */, %438)
}

def @func_6428(%var_6419: Tensor[(36, 1), float64]) -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(4, 9, 1), float64], Tensor[(36, 1), float64]) {
  %439 = @func_3588() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %440 = @func_3762() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(300), int64]) */;
  %441 = cast(%var_6419, dtype="float64") /* ty=Tensor[(36, 1), float64] */;
  %442 = reshape(%441, newshape=[4, 9, 1]) /* ty=Tensor[(4, 9, 1), float64] */;
  %443 = @func_3251(%442) /* ty=(Tensor[(4, 9, 1), float64], Tensor[(4, 9, 1), float64]) */;
  %444 = %439.0;
  %445 = %440.0;
  %446 = %443.0;
  (%444, %445, %446, %var_6419)
}

def @func_5103() -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), int16]) {
  %447 = @func_4675() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %448 = @func_3868() /* ty=(Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) */;
  %449 = @func_3868() /* ty=(Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) */;
  %450 = %447.0;
  %451 = %448.1;
  %452 = %449.0;
  (%450, %451, %452)
}

def @func_8143() -> Tensor[(9, 5, 11), float64] {
  @func_7277() /* ty=Tensor[(9, 5, 11), float64] */
}

def @func_3142() -> (Tensor[(9, 5, 11), float32],) {
  %453 = @func_1891() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %454 = %453.0;
  (%454,)
}

def @func_6519() -> (Tensor[(9, 5, 11), float32],) {
  %455 = @func_3135() /* ty=(Tensor[(9, 5, 11), uint16], Tensor[(9, 5, 11), float32]) */;
  %456 = %455.1;
  (%456,)
}

def @func_5276(%var_5253: Tensor[(900), float32]) -> (Tensor[(12, 10, 15), float64], Tensor[(10, 15, 6), bool]) {
  %457 = @func_4548() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(12, 10, 15), float64], Tensor[(1800), uint16], Tensor[(12, 10, 15), float64]) */;
  %458 = cast(%var_5253, dtype="float32") /* ty=Tensor[(900), float32] */;
  %459 = reshape(%458, newshape=[10, 15, 6]) /* ty=Tensor[(10, 15, 6), float32] */;
  %460 = @func_3885(%459) /* ty=(Tensor[(10, 15, 6), float64],) */;
  %461 = %460.0;
  %462 = cast(%var_5253, dtype="bool") /* ty=Tensor[(900), bool] */;
  %463 = shape_of(%461, dtype="int32") /* ty=Tensor[(3), int32] */;
  %464 = cast(%461, dtype="bool") /* ty=Tensor[(10, 15, 6), bool] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %466 = %457.1;
  %467 = greater(%464, %465) /* ty=Tensor[(10, 15, 6), bool] */;
  (%466, %467)
}

def @func_6343() -> (Tensor[(9, 5, 11), float32],) {
  %468 = @func_3365() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %469 = %468.0;
  (%469,)
}

def @func_9163() -> (Tensor[(9, 5, 11), float32],) {
  %470 = @func_1160() /* ty=Tensor[(9, 5, 11), float32] */;
  (%470,)
}

def @func_5475() -> Tensor[(9, 5, 11), float32] {
  %471 = @func_3588() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %471.0
}

def @func_3365() -> (Tensor[(9, 5, 11), float32],) {
  %472 = @func_1694() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %473 = %472.0;
  (%473,)
}

def @func_3320() -> Tensor[(9, 5, 11), float32] {
  @func_1963() /* ty=Tensor[(9, 5, 11), float32] */
}

def @func_7188(%var_7153: Tensor[(2, 108), uint8], %var_7156: Tensor[(2640), float32], %var_7167: Tensor[(1755), float64]) -> (Tensor[(9, 5, 11), float32], Tensor[(2, 12, 9), uint8], Tensor[(2, 108), uint8], Tensor[(2640), float32], Tensor[(1755), int32], Tensor[(1755), int8]) {
  %474 = @func_3365() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %475 = cast(%var_7153, dtype="uint8") /* ty=Tensor[(2, 108), uint8] */;
  %476 = reshape(%475, newshape=[36, 6]) /* ty=Tensor[(36, 6), uint8] */;
  %477 = @func_1751(%476) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(2, 12, 9), uint8], Tensor[(36, 6), uint8]) */;
  %478 = cast(%var_7156, dtype="float32") /* ty=Tensor[(2640), float32] */;
  %479 = reshape(%478, newshape=[2640]) /* ty=Tensor[(2640), float32] */;
  %480 = @func_5170(%479) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(16, 15, 11), float32], Tensor[(2640), float32], Tensor[(1755), float64], Tensor[(9, 5, 11), float64]) */;
  %481 = %480.3;
  %482 = cast(%var_7167, dtype="int32") /* ty=Tensor[(1755), int32] */;
  %483 = shape_of(%481, dtype="int32") /* ty=Tensor[(1), int32] */;
  %484 = cast(%481, dtype="int32") /* ty=Tensor[(1755), int32] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?), int32] */;
  %486 = cast(%var_7167, dtype="int8") /* ty=Tensor[(1755), int8] */;
  %487 = shape_of(%481, dtype="int32") /* ty=Tensor[(1), int32] */;
  %488 = cast(%481, dtype="int8") /* ty=Tensor[(1755), int8] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?), int8] */;
  %490 = %474.0;
  %491 = %477.2;
  %492 = right_shift(%484, %485) /* ty=Tensor[(1755), int32] */;
  %493 = minimum(%488, %489) /* ty=Tensor[(1755), int8] */;
  (%490, %491, %var_7153, %var_7156, %492, %493)
}

def @func_5170(%var_5162: Tensor[(2640), float32]) -> (Tensor[(9, 5, 11), float32], Tensor[(16, 15, 11), float32], Tensor[(2640), float32], Tensor[(1755), float64], Tensor[(9, 5, 11), float64]) {
  %494 = @func_4675() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %495 = cast(%var_5162, dtype="float32") /* ty=Tensor[(2640), float32] */;
  %496 = cast(meta[relay.Constant][17] /* ty=Tensor[(1755), float64] */, dtype="float64") /* ty=Tensor[(1755), float64] */;
  %497 = reshape(%495, newshape=[16, 15, 11]) /* ty=Tensor[(16, 15, 11), float32] */;
  %498 = reshape(%496, newshape=[1755]) /* ty=Tensor[(1755), float64] */;
  %499 = @func_905(%497, %498) /* ty=(Tensor[(16, 15, 11), float32], Tensor[(980), float32], Tensor[(936), uint64], Tensor[(12, 10, 15), float64], Tensor[(1755), float64]) */;
  %500 = %494.0;
  %501 = cast(%500, dtype="float32") /* ty=Tensor[(9, 5, 11), float32] */;
  %502 = reshape(%501, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), float32] */;
  %503 = @func_4821(%502) /* ty=(Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float64]) */;
  %504 = %499.0;
  %505 = %503.0;
  (%500, %504, %var_5162, meta[relay.Constant][17] /* ty=Tensor[(1755), float64] */, %505)
}

def @func_4620(%var_4575: Tensor[(2640), float32], %var_4608: Tensor[(900), float32]) -> (Tensor[(9, 5, 11), float32], Tensor[(1755), float64], Tensor[(2640), float32], Tensor[(9, 5, 11), float32], Tensor[(10, 15, 6), float64], Tensor[(900), float32], Tensor[(2, 12, 9), uint8], Tensor[(36, 6), uint8]) {
  %506 = cast(%var_4575, dtype="float32") /* ty=Tensor[(2640), float32] */;
  %507 = reshape(%506, newshape=[2640]) /* ty=Tensor[(2640), float32] */;
  %508 = @func_1858(%507) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(936), uint64], Tensor[(2640), float32], Tensor[(1755), float64]) */;
  %509 = %508.3;
  %510 = cast(%509, dtype="float64") /* ty=Tensor[(1755), float64] */;
  %511 = cast(%var_4575, dtype="float32") /* ty=Tensor[(2640), float32] */;
  %512 = erf(%511) /* ty=Tensor[(2640), float32] */;
  %513 = cast(%512, dtype="float32") /* ty=Tensor[(2640), float32] */;
  %514 = reshape(%513, newshape=[2640]) /* ty=Tensor[(2640), float32] */;
  %515 = @func_1858(%514) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(936), uint64], Tensor[(2640), float32], Tensor[(1755), float64]) */;
  %516 = cast(%var_4608, dtype="float32") /* ty=Tensor[(900), float32] */;
  %517 = reshape(%516, newshape=[10, 15, 6]) /* ty=Tensor[(10, 15, 6), float32] */;
  %518 = @func_3885(%517) /* ty=(Tensor[(10, 15, 6), float64],) */;
  %519 = cast(meta[relay.Constant][18] /* ty=Tensor[(36, 6), uint8] */, dtype="uint8") /* ty=Tensor[(36, 6), uint8] */;
  %520 = reshape(%519, newshape=[2, 12, 9]) /* ty=Tensor[(2, 12, 9), uint8] */;
  %521 = @func_1265(%520) /* ty=(Tensor[(2, 12, 9), uint8],) */;
  %522 = @func_1160() /* ty=Tensor[(9, 5, 11), float32] */;
  %523 = cos(%510) /* ty=Tensor[(1755), float64] */;
  %524 = %515.0;
  %525 = %518.0;
  %526 = %521.0;
  (%522, %523, %512, %524, %525, %var_4608, %526, meta[relay.Constant][18] /* ty=Tensor[(36, 6), uint8] */)
}

def @func_6040() -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), uint16]) {
  %527 = @func_1694() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %528 = @func_2078() /* ty=(Tensor[(9, 5, 11), uint16],) */;
  %529 = %527.0;
  %530 = %528.0;
  (%529, %530)
}

def @func_6639(%var_6610: Tensor[(5, 6, 12), float64], %var_6611: Tensor[(5, 6, 12), float64], %var_6634: Tensor[(910), uint16]) -> (Tensor[(5, 6, 12), float64], Tensor[(9, 5, 11), float64], Tensor[(495), float32], Tensor[(9, 5, 11), float64], Tensor[(10, 13, 7), uint16], Tensor[(910), uint16]) {
  %531 = cast(%var_6611, dtype="float64") /* ty=Tensor[(5, 6, 12), float64] */;
  %532 = shape_of(%var_6610, dtype="int32") /* ty=Tensor[(3), int32] */;
  %533 = cast(%var_6610, dtype="float64") /* ty=Tensor[(5, 6, 12), float64] */;
  %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %535 = cast(meta[relay.Constant][19] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
  %536 = reshape(%535, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), float32] */;
  %537 = @func_3693() /* ty=(Tensor[(9, 5, 11), float64],) */;
  %538 = cast(%var_6634, dtype="uint16") /* ty=Tensor[(910), uint16] */;
  %539 = reshape(%538, newshape=[10, 13, 7]) /* ty=Tensor[(10, 13, 7), uint16] */;
  %540 = @func_101(%539) /* ty=(Tensor[(10, 13, 7), uint16], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) */;
  %541 = floor_divide(%533, %534) /* ty=Tensor[(5, 6, 12), float64] */;
  %542 = @func_3334(%536) /* ty=Tensor[(9, 5, 11), float64] */;
  %543 = %537.0;
  %544 = %540.0;
  (%541, %542, meta[relay.Constant][19] /* ty=Tensor[(495), float32] */, %543, %544, %var_6634)
}

def @func_8595() -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) {
  %545 = @func_5994() /* ty=(Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), bool]) */;
  %546 = @func_8446() /* ty=(Tensor[(9, 5, 11), float64],) */;
  %547 = @func_4184() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %548 = @func_3365() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %549 = %545.1;
  %550 = %546.0;
  %551 = %547.0;
  %552 = %548.0;
  (%549, %550, %551, %552)
}

def @func_6509(%var_6491: Tensor[(11, 16, 13), float64]) -> Tensor[(11, 16, 13), float64] {
  %553 = cast(%var_6491, dtype="float64") /* ty=Tensor[(11, 16, 13), float64] */;
  atan(%553) /* ty=Tensor[(11, 16, 13), float64] */
}

def @func_905(%var_870: Tensor[(16, 15, 11), float32], %var_896: Tensor[(1755), float64]) -> (Tensor[(16, 15, 11), float32], Tensor[(980), float32], Tensor[(936), uint64], Tensor[(12, 10, 15), float64], Tensor[(1755), float64]) {
  %554 = cast(%var_870, dtype="float32") /* ty=Tensor[(16, 15, 11), float32] */;
  %555 = cast(meta[relay.Constant][20] /* ty=Tensor[(936), uint64] */, dtype="uint64") /* ty=Tensor[(936), uint64] */;
  %556 = cast(meta[relay.Constant][20] /* ty=Tensor[(936), uint64] */, dtype="uint64") /* ty=Tensor[(936), uint64] */;
  %557 = reshape(%555, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), uint64] */;
  %558 = reshape(%556, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), uint64] */;
  %559 = @func_696(%557, %558) /* ty=(Tensor[(13, 6, 12), uint64], Tensor[(5, 14, 14), float32], Tensor[(980), float32], Tensor[(13, 6, 12), float32]) */;
  %560 = cast(%var_896, dtype="float64") /* ty=Tensor[(1755), float64] */;
  %561 = reshape(%560, newshape=[15, 13, 9]) /* ty=Tensor[(15, 13, 9), float64] */;
  %562 = @func_792(%561) /* ty=(Tensor[(15, 13, 9), float64], Tensor[(12, 10, 15), float64], Tensor[(3, 600), uint16], Tensor[(980), float32], Tensor[(48), uint32], Tensor[(5, 14, 14), float32], Tensor[(12, 10, 15), float64]) */;
  %563 = rsqrt(%554) /* ty=Tensor[(16, 15, 11), float32] */;
  %564 = %559.2;
  %565 = %562.1;
  (%563, %564, meta[relay.Constant][20] /* ty=Tensor[(936), uint64] */, %565, %var_896)
}

def @func_3213() -> Tensor[(9, 5, 11), float64] {
  %566 = @func_1908() /* ty=(Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float64]) */;
  %566.1
}

def @func_8446() -> (Tensor[(9, 5, 11), float64],) {
  %567 = @func_8143() /* ty=Tensor[(9, 5, 11), float64] */;
  (%567,)
}

def @func_8038(%var_8018: Tensor[(900), float32]) -> (Tensor[(9, 5, 11), float32], Tensor[(12, 10, 15), float64], Tensor[(900), float32], Tensor[(9, 5, 11), float32]) {
  %568 = @func_3588() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %569 = cast(%var_8018, dtype="float32") /* ty=Tensor[(900), float32] */;
  %570 = reshape(%569, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %571 = @func_5276(%570) /* ty=(Tensor[(12, 10, 15), float64], Tensor[(10, 15, 6), bool]) */;
  %572 = @func_3868() /* ty=(Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) */;
  %573 = %568.0;
  %574 = %571.0;
  %575 = %572.2;
  (%573, %574, %var_8018, %575)
}

def @func_8465() -> (Tensor[(300), int64], Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64]) {
  %576 = @func_1530() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) */;
  %577 = @func_7715() /* ty=Tensor[(300), int64] */;
  %578 = cast(%577, dtype="int64") /* ty=Tensor[(300), int64] */;
  %579 = reshape(%578, newshape=[300]) /* ty=Tensor[(300), int64] */;
  %580 = @func_3292(%579) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(300), int64]) */;
  %581 = %576.1;
  %582 = %580.1;
  (%577, %581, %582)
}

def @func_2629() -> (Tensor[(9, 5, 11), float32],) {
  %583 = @func_1891() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %584 = %583.0;
  (%584,)
}

def @func_4548() -> (Tensor[(9, 5, 11), float32], Tensor[(12, 10, 15), float64], Tensor[(1800), uint16], Tensor[(12, 10, 15), float64]) {
  %585 = @func_2629() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %586 = cast(meta[relay.Constant][21] /* ty=Tensor[(1800), uint16] */, dtype="uint16") /* ty=Tensor[(1800), uint16] */;
  %587 = cast(meta[relay.Constant][21] /* ty=Tensor[(1800), uint16] */, dtype="uint16") /* ty=Tensor[(1800), uint16] */;
  %588 = reshape(%586, newshape=[12, 10, 15]) /* ty=Tensor[(12, 10, 15), uint16] */;
  %589 = reshape(%587, newshape=[12, 10, 15]) /* ty=Tensor[(12, 10, 15), uint16] */;
  %590 = @func_324(%588, %589) /* ty=Tensor[(12, 10, 15), float64] */;
  %591 = cast(%590, dtype="uint16") /* ty=Tensor[(12, 10, 15), uint16] */;
  %592 = cast(meta[relay.Constant][21] /* ty=Tensor[(1800), uint16] */, dtype="uint16") /* ty=Tensor[(1800), uint16] */;
  %593 = reshape(%591, newshape=[12, 10, 15]) /* ty=Tensor[(12, 10, 15), uint16] */;
  %594 = reshape(%592, newshape=[12, 10, 15]) /* ty=Tensor[(12, 10, 15), uint16] */;
  %595 = %585.0;
  %596 = @func_324(%593, %594) /* ty=Tensor[(12, 10, 15), float64] */;
  (%595, %590, meta[relay.Constant][21] /* ty=Tensor[(1800), uint16] */, %596)
}

def @func_7889() -> (Tensor[(9, 5, 11), float32],) {
  %597 = @func_7613() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %598 = %597.0;
  (%598,)
}

def @func_4009(%var_4001: Tensor[(4, 12, 12), uint8]) -> (Tensor[(4, 12, 12), uint8],) {
  %599 = cast(meta[relay.Constant][22] /* ty=Tensor[(4, 12, 12), uint8] */, dtype="uint8") /* ty=Tensor[(4, 12, 12), uint8] */;
  %600 = shape_of(%var_4001, dtype="int32") /* ty=Tensor[(3), int32] */;
  %601 = cast(%var_4001, dtype="uint8") /* ty=Tensor[(4, 12, 12), uint8] */;
  %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %603 = subtract(%601, %602) /* ty=Tensor[(4, 12, 12), uint8] */;
  (%603,)
}

def @func_3636(%var_3606: Tensor[(16, 6, 8), float32]) -> (Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32], Tensor[(16, 6, 8), float64]) {
  %604 = @func_1908() /* ty=(Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float64]) */;
  %605 = @func_2258() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %606 = cast(%var_3606, dtype="float32") /* ty=Tensor[(16, 6, 8), float32] */;
  %607 = acos(%606) /* ty=Tensor[(16, 6, 8), float32] */;
  %608 = cast(%607, dtype="float64") /* ty=Tensor[(16, 6, 8), float64] */;
  %609 = %604.1;
  %610 = %605.0;
  %611 = sinh(%608) /* ty=Tensor[(16, 6, 8), float64] */;
  (%609, %610, %611)
}

def @func_1751(%var_1742: Tensor[(36, 6), uint8]) -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(2, 12, 9), uint8], Tensor[(36, 6), uint8]) {
  %612 = @func_1201() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %613 = @func_1367() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %614 = cast(%var_1742, dtype="uint8") /* ty=Tensor[(36, 6), uint8] */;
  %615 = reshape(%614, newshape=[2, 12, 9]) /* ty=Tensor[(2, 12, 9), uint8] */;
  %616 = @func_1265(%615) /* ty=(Tensor[(2, 12, 9), uint8],) */;
  %617 = %612.0;
  %618 = %613.0;
  %619 = %616.0;
  (%617, %618, %619, %var_1742)
}

def @func_6156(%var_6154: Tensor[(12285), float32]) -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(12285), float32]) {
  %620 = @func_3436() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %621 = cast(%var_6154, dtype="float32") /* ty=Tensor[(12285), float32] */;
  %622 = reshape(%621, newshape=[7, 1755]) /* ty=Tensor[(7, 1755), float32] */;
  %623 = @func_5328(%622) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(2, 24), float32], Tensor[(980), float32], Tensor[(9, 5, 11), float64], Tensor[(?, 1755), int64], Tensor[(7, 1755), float32]) */;
  %624 = %620.0;
  %625 = %623.1;
  (%624, %625, %var_6154)
}

def @func_5432() -> (Tensor[(9, 5, 11), float64],) {
  %626 = @func_1908() /* ty=(Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float64]) */;
  %627 = %626.1;
  (%627,)
}

def @func_4855() -> (Tensor[(9, 5, 11), float32],) {
  %628 = @func_3135() /* ty=(Tensor[(9, 5, 11), uint16], Tensor[(9, 5, 11), float32]) */;
  %629 = %628.1;
  (%629,)
}

def @func_8425() -> Tensor[(9, 5, 11), float32] {
  %630 = @func_3365() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %630.0
}

def @func_7247(%var_7209: Tensor[(4, 660), float32], %var_7240: Tensor[(1755), float64]) -> (Tensor[(9, 5, 11), float32], Tensor[(4, 660), float32], Tensor[(9, 5, 11), float64], Tensor[(1755), uint8]) {
  %631 = @func_5056() /* ty=(Tensor[(9, 5, 11), float64],) */;
  %632 = cast(%var_7209, dtype="float32") /* ty=Tensor[(4, 660), float32] */;
  %633 = reshape(%632, newshape=[2640]) /* ty=Tensor[(2640), float32] */;
  %634 = @func_1858(%633) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(936), uint64], Tensor[(2640), float32], Tensor[(1755), float64]) */;
  %635 = %634.3;
  %636 = cast(%var_7240, dtype="uint8") /* ty=Tensor[(1755), uint8] */;
  %637 = shape_of(%635, dtype="int32") /* ty=Tensor[(1), int32] */;
  %638 = cast(%635, dtype="uint8") /* ty=Tensor[(1755), uint8] */;
  %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %640 = @func_4879() /* ty=Tensor[(9, 5, 11), float32] */;
  %641 = %631.0;
  %642 = maximum(%638, %639) /* ty=Tensor[(1755), uint8] */;
  (%640, %var_7209, %641, %642)
}

def @func_1457() -> (Tensor[(9, 5, 11), float32],) {
  %643 = @func_1160() /* ty=Tensor[(9, 5, 11), float32] */;
  (%643,)
}

def @func_8055() -> (Tensor[(9, 5, 11), float32],) {
  %644 = @func_3396() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %645 = %644.0;
  (%645,)
}

def @func_8836() -> (Tensor[(9, 5, 11), float32],) {
  %646 = @func_8384() /* ty=(Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) */;
  %647 = %646.2;
  (%647,)
}

def @func_8094() -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) {
  %648 = @func_7629() /* ty=(Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32]) */;
  %649 = @func_5544() /* ty=Tensor[(9, 5, 11), float32] */;
  %650 = %648.1;
  (%649, %650)
}

def @func_2416() -> Tensor[(9, 5, 11), float32] {
  %651 = @func_1694() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %651.0
}

def @func_7372() -> (Tensor[(9, 5, 11), float64],) {
  %652 = @func_3693() /* ty=(Tensor[(9, 5, 11), float64],) */;
  %653 = %652.0;
  (%653,)
}

def @func_3305() -> (Tensor[(9, 5, 11), float32],) {
  %654 = @func_2258() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %655 = %654.0;
  (%655,)
}

def @func_7693(%var_7686: Tensor[(24, 2), float32]) -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(24, 2), float32], Tensor[(980), float32]) {
  %656 = @func_2629() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %657 = cast(%var_7686, dtype="float32") /* ty=Tensor[(24, 2), float32] */;
  %658 = cast(meta[relay.Constant][23] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
  %659 = reshape(%657, newshape=[6, 1, 8]) /* ty=Tensor[(6, 1, 8), float32] */;
  %660 = reshape(%658, newshape=[980, 1]) /* ty=Tensor[(980, 1), float32] */;
  %661 = @func_3798(%659, %660) /* ty=(Tensor[(6, 1, 8), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(980, 1), float32], Tensor[(300), int64]) */;
  %662 = %656.0;
  %663 = %661.2;
  (%662, %663, %var_7686, meta[relay.Constant][23] /* ty=Tensor[(980), float32] */)
}

def @func_3334(%var_3324: Tensor[(9, 5, 11), float32]) -> Tensor[(9, 5, 11), float64] {
  %664 = @func_1694() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %665 = %664.0;
  %666 = cast(%var_3324, dtype="float64") /* ty=Tensor[(9, 5, 11), float64] */;
  %667 = shape_of(%665, dtype="int32") /* ty=Tensor[(3), int32] */;
  %668 = cast(%665, dtype="float64") /* ty=Tensor[(9, 5, 11), float64] */;
  %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%668, %669) /* ty=Tensor[(9, 5, 11), float64] */
}

def @func_7091() -> (Tensor[(9, 5, 11), float32],) {
  %670 = @func_4879() /* ty=Tensor[(9, 5, 11), float32] */;
  (%670,)
}

def @func_9060(%var_9052: int32, %var_9053: Tensor[(15, 9, 6), int32]) -> (Tensor[(15, 9, 6), int32], Tensor[(9, 5, 11), float32]) {
  %671 = cast(%var_9052, dtype="int32") /* ty=int32 */;
  %672 = cast(%var_9053, dtype="int32") /* ty=Tensor[(15, 9, 6), int32] */;
  %673 = @func_1530() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) */;
  %674 = subtract(%671, %672) /* ty=Tensor[(15, 9, 6), int32] */;
  %675 = %673.0;
  (%674, %675)
}

def @func_3762() -> (Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(300), int64]) {
  %676 = @func_1201() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %677 = cast(meta[relay.Constant][24] /* ty=Tensor[(300), int64] */, dtype="int64") /* ty=Tensor[(300), int64] */;
  %678 = reshape(%677, newshape=[300]) /* ty=Tensor[(300), int64] */;
  %679 = @func_3292(%678) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(300), int64]) */;
  %680 = %676.0;
  %681 = %679.1;
  (%680, %681, meta[relay.Constant][24] /* ty=Tensor[(300), int64] */)
}

def @func_6370() -> (Tensor[(9, 5, 11), float64], Tensor[(10, 15, 6), float64], Tensor[(900), float32]) {
  %682 = cast(meta[relay.Constant][25] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %683 = reshape(%682, newshape=[10, 15, 6]) /* ty=Tensor[(10, 15, 6), float32] */;
  %684 = @func_3885(%683) /* ty=(Tensor[(10, 15, 6), float64],) */;
  %685 = @func_3213() /* ty=Tensor[(9, 5, 11), float64] */;
  %686 = %684.0;
  (%685, %686, meta[relay.Constant][25] /* ty=Tensor[(900), float32] */)
}

def @func_4879() -> Tensor[(9, 5, 11), float32] {
  %687 = @func_4855() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %687.0
}

def @func_4929(%var_4910: Tensor[(10, 12, 12), int64]) -> (Tensor[(10, 12, 12), int64], Tensor[(9, 5, 11), float32]) {
  %688 = cast(%var_4910, dtype="int64") /* ty=Tensor[(10, 12, 12), int64] */;
  %689 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(10, 12, 12), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %690 = cast(meta[relay.Constant][26] /* ty=Tensor[(10, 12, 12), int64] */, dtype="int64") /* ty=Tensor[(10, 12, 12), int64] */;
  %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %692 = left_shift(%690, %691) /* ty=Tensor[(10, 12, 12), int64] */;
  %693 = @func_1160() /* ty=Tensor[(9, 5, 11), float32] */;
  (%692, %693)
}

def @func_2208(%var_2158: Tensor[(9, 5, 11), float32], %var_2166: Tensor[(1755), float64]) -> (Tensor[(9, 5, 11), int8], Tensor[(980), float32], Tensor[(2640), float32], Tensor[(1755), float64], Tensor[(9, 5, 11), float32]) {
  %694 = @func_1160() /* ty=Tensor[(9, 5, 11), float32] */;
  %695 = cast(%var_2158, dtype="int8") /* ty=Tensor[(9, 5, 11), int8] */;
  %696 = shape_of(%694, dtype="int32") /* ty=Tensor[(3), int32] */;
  %697 = cast(%694, dtype="int8") /* ty=Tensor[(9, 5, 11), int8] */;
  %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %699 = cast(meta[relay.Constant][27] /* ty=Tensor[(2640), float32] */, dtype="float32") /* ty=Tensor[(2640), float32] */;
  %700 = cast(%var_2166, dtype="float64") /* ty=Tensor[(1755), float64] */;
  %701 = reshape(%699, newshape=[16, 15, 11]) /* ty=Tensor[(16, 15, 11), float32] */;
  %702 = reshape(%700, newshape=[1755]) /* ty=Tensor[(1755), float64] */;
  %703 = @func_905(%701, %702) /* ty=(Tensor[(16, 15, 11), float32], Tensor[(980), float32], Tensor[(936), uint64], Tensor[(12, 10, 15), float64], Tensor[(1755), float64]) */;
  %704 = cast(%694, dtype="float32") /* ty=Tensor[(9, 5, 11), float32] */;
  %705 = subtract(%697, %698) /* ty=Tensor[(9, 5, 11), int8] */;
  %706 = %703.1;
  %707 = asin(%704) /* ty=Tensor[(9, 5, 11), float32] */;
  (%705, %706, meta[relay.Constant][27] /* ty=Tensor[(2640), float32] */, %var_2166, %707)
}

def @func_5544() -> Tensor[(9, 5, 11), float32] {
  %708 = @func_1530() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) */;
  %708.0
}

def @func_7143() -> Tensor[(980), float32] {
  %709 = @func_1530() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) */;
  %709.4
}

def @func_1201() -> (Tensor[(9, 5, 11), float32],) {
  %710 = @func_1160() /* ty=Tensor[(9, 5, 11), float32] */;
  (%710,)
}

def @func_6557() -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(10, 12, 12), int64], Tensor[(180, 8), int64], Tensor[(9, 5, 11), float64]) {
  %711 = @func_2258() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %712 = %711.0;
  %713 = cast(%712, dtype="float32") /* ty=Tensor[(9, 5, 11), float32] */;
  %714 = cast(%712, dtype="float64") /* ty=Tensor[(9, 5, 11), float64] */;
  %715 = reshape(%713, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), float32] */;
  %716 = reshape(%714, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), float64] */;
  %717 = @func_1233(%715, %716) /* ty=(Tensor[(9, 5, 11), bool], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) */;
  %718 = cast(meta[relay.Constant][28] /* ty=Tensor[(180, 8), int64] */, dtype="int64") /* ty=Tensor[(180, 8), int64] */;
  %719 = reshape(%718, newshape=[10, 12, 12]) /* ty=Tensor[(10, 12, 12), int64] */;
  %720 = @func_4929(%719) /* ty=(Tensor[(10, 12, 12), int64], Tensor[(9, 5, 11), float32]) */;
  %721 = @func_5056() /* ty=(Tensor[(9, 5, 11), float64],) */;
  %722 = %717.2;
  %723 = %720.0;
  %724 = %721.0;
  (%712, %722, %723, meta[relay.Constant][28] /* ty=Tensor[(180, 8), int64] */, %724)
}

def @func_7013() -> (Tensor[(9, 5, 11), float64],) {
  %725 = @func_5056() /* ty=(Tensor[(9, 5, 11), float64],) */;
  %726 = %725.0;
  (%726,)
}

def @func_4143() -> (Tensor[(1, 1755), float64],) {
  %727 = @func_3762() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(300), int64]) */;
  %728 = %727.1;
  %729 = cast(%728, dtype="float64") /* ty=Tensor[(1, 1755), float64] */;
  %730 = exp(%729) /* ty=Tensor[(1, 1755), float64] */;
  (%730,)
}

def @func_6735() -> Tensor[(9, 5, 11), uint16] {
  %731 = @func_2078() /* ty=(Tensor[(9, 5, 11), uint16],) */;
  %731.0
}

def @func_3693() -> (Tensor[(9, 5, 11), float64],) {
  %732 = @func_3213() /* ty=Tensor[(9, 5, 11), float64] */;
  (%732,)
}

def @func_8384() -> (Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) {
  %733 = @func_6370() /* ty=(Tensor[(9, 5, 11), float64], Tensor[(10, 15, 6), float64], Tensor[(900), float32]) */;
  %734 = @func_4249() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) */;
  %735 = @func_3396() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %736 = @func_2629() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %737 = @func_3588() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %738 = %733.0;
  %739 = %734.0;
  %740 = %735.0;
  %741 = %736.0;
  %742 = %737.0;
  %743 = @func_3526() /* ty=Tensor[(9, 5, 11), float32] */;
  (%738, %739, %740, %741, %742, %743)
}

def @func_8894() -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float64], Tensor[(384, 2), float32]) {
  %744 = @func_6343() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %745 = @func_3135() /* ty=(Tensor[(9, 5, 11), uint16], Tensor[(9, 5, 11), float32]) */;
  %746 = cast(meta[relay.Constant][29] /* ty=Tensor[(384, 2), float32] */, dtype="float32") /* ty=Tensor[(384, 2), float32] */;
  %747 = reshape(%746, newshape=[16, 6, 8]) /* ty=Tensor[(16, 6, 8), float32] */;
  %748 = @func_3636(%747) /* ty=(Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32], Tensor[(16, 6, 8), float64]) */;
  %749 = %744.0;
  %750 = %745.1;
  %751 = %748.0;
  (%749, %750, %751, meta[relay.Constant][29] /* ty=Tensor[(384, 2), float32] */)
}

def @func_3292(%var_3271: Tensor[(300), int64]) -> (Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(300), int64]) {
  %752 = @func_2629() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %753 = cast(%var_3271, dtype="int64") /* ty=Tensor[(300), int64] */;
  %754 = cast(%var_3271, dtype="int64") /* ty=Tensor[(300), int64] */;
  %755 = reshape(%753, newshape=[2, 10, 15]) /* ty=Tensor[(2, 10, 15), int64] */;
  %756 = reshape(%754, newshape=[2, 10, 15]) /* ty=Tensor[(2, 10, 15), int64] */;
  %757 = @func_1729(%755, %756) /* ty=(Tensor[(2, 10, 15), float32], Tensor[(2, 10, 15), uint64], Tensor[(980), float32], Tensor[(1, 1755), float64]) */;
  %758 = %752.0;
  %759 = %757.3;
  (%758, %759, %var_3271)
}

def @func_8299() -> (Tensor[(1800), uint16],) {
  %760 = @func_4548() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(12, 10, 15), float64], Tensor[(1800), uint16], Tensor[(12, 10, 15), float64]) */;
  %761 = %760.2;
  (%761,)
}

def @func_9012() -> Tensor[(9, 5, 11), float32] {
  @func_5544() /* ty=Tensor[(9, 5, 11), float32] */
}

def @main() -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(36), float64], Tensor[(12285), float32]) {
  %762 = @func_3868() /* ty=(Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) */;
  %763 = cast(meta[relay.Constant][30] /* ty=Tensor[(12285), float32] */, dtype="float32") /* ty=Tensor[(12285), float32] */;
  %764 = cast(meta[relay.Constant][31] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %765 = reshape(%763, newshape=[12285, 1]) /* ty=Tensor[(12285, 1), float32] */;
  %766 = reshape(%764, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %767 = @func_7583(%765, %766) /* ty=(Tensor[(9, 5, 11), uint16], Tensor[(9, 5, 11), float32], Tensor[(12285, 1), float32], Tensor[(4, 9, 1), float64], Tensor[(36), float64]) */;
  %768 = cast(meta[relay.Constant][30] /* ty=Tensor[(12285), float32] */, dtype="float32") /* ty=Tensor[(12285), float32] */;
  %769 = %762.2;
  %770 = %767.1;
  %771 = sin(%768) /* ty=Tensor[(12285), float32] */;
  (%769, %770, meta[relay.Constant][31] /* ty=Tensor[(36), float64] */, %771)
}

def @func_8956(%var_8937: Tensor[(900), float32]) -> (Tensor[(900), uint8],) {
  %772 = @func_6370() /* ty=(Tensor[(9, 5, 11), float64], Tensor[(10, 15, 6), float64], Tensor[(900), float32]) */;
  %773 = %772.2;
  %774 = cast(%var_8937, dtype="uint8") /* ty=Tensor[(900), uint8] */;
  %775 = shape_of(%773, dtype="int32") /* ty=Tensor[(1), int32] */;
  %776 = cast(%773, dtype="uint8") /* ty=Tensor[(900), uint8] */;
  %777 = dyn.reshape(%774, %775, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %778 = add(%776, %777) /* ty=Tensor[(900), uint8] */;
  (%778,)
}

def @func_8717() -> (Tensor[(9, 5, 11), float32],) {
  %779 = @func_4548() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(12, 10, 15), float64], Tensor[(1800), uint16], Tensor[(12, 10, 15), float64]) */;
  %780 = %779.0;
  (%780,)
}

def @func_749(%var_726: Tensor[(12, 4, 1), uint32]) -> (Tensor[(12, 4, 11), uint32], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) {
  %781 = cast(%var_726, dtype="uint32") /* ty=Tensor[(12, 4, 1), uint32] */;
  %782 = cast(meta[relay.Constant][32] /* ty=Tensor[(12, 4, 11), uint32] */, dtype="uint32") /* ty=Tensor[(12, 4, 11), uint32] */;
  %783 = cast(meta[relay.Constant][33] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
  %784 = reshape(%783, newshape=[5, 14, 14]) /* ty=Tensor[(5, 14, 14), float32] */;
  %785 = @func_40(%784) /* ty=(Tensor[(5, 14, 14), float32],) */;
  %786 = subtract(%781, %782) /* ty=Tensor[(12, 4, 11), uint32] */;
  %787 = %785.0;
  (%786, %787, meta[relay.Constant][33] /* ty=Tensor[(980), float32] */)
}

def @func_1908() -> (Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float64]) {
  %788 = @func_1160() /* ty=Tensor[(9, 5, 11), float32] */;
  %789 = cast(%788, dtype="float64") /* ty=Tensor[(9, 5, 11), float64] */;
  %790 = reshape(%789, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), float64] */;
  %791 = @func_1613(%790) /* ty=(Tensor[(9, 5, 11), int8], Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float32]) */;
  %792 = cast(%788, dtype="float64") /* ty=Tensor[(9, 5, 11), float64] */;
  %793 = %791.1;
  %794 = log2(%792) /* ty=Tensor[(9, 5, 11), float64] */;
  (%793, %794)
}

def @func_9126() -> Tensor[(9, 5, 11), float64] {
  @func_8497() /* ty=Tensor[(9, 5, 11), float64] */
}

def @func_2322(%var_2267: Tensor[(9, 5, 11), float32], %var_2284: Tensor[(195, 9), float64]) -> (Tensor[(9, 5, 11), bool], Tensor[(1755), float64], Tensor[(195, 9), float64], Tensor[(12, 10, 15), float64], Tensor[(216), uint8], Tensor[(1800), uint16]) {
  %795 = @func_1963() /* ty=Tensor[(9, 5, 11), float32] */;
  %796 = cast(%var_2267, dtype="bool") /* ty=Tensor[(9, 5, 11), bool] */;
  %797 = shape_of(%795, dtype="int32") /* ty=Tensor[(3), int32] */;
  %798 = cast(%795, dtype="bool") /* ty=Tensor[(9, 5, 11), bool] */;
  %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %800 = logical_and(%798, %799) /* ty=Tensor[(9, 5, 11), bool] */;
  %801 = cast(%var_2267, dtype="bool") /* ty=Tensor[(9, 5, 11), bool] */;
  %802 = shape_of(%800, dtype="int32") /* ty=Tensor[(3), int32] */;
  %803 = cast(%800, dtype="bool") /* ty=Tensor[(9, 5, 11), bool] */;
  %804 = dyn.reshape(%801, %802, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %805 = cast(%var_2267, dtype="float32") /* ty=Tensor[(9, 5, 11), float32] */;
  %806 = cast(%var_2284, dtype="float64") /* ty=Tensor[(195, 9), float64] */;
  %807 = reshape(%805, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), float32] */;
  %808 = reshape(%806, newshape=[1755]) /* ty=Tensor[(1755), float64] */;
  %809 = @func_2208(%807, %808) /* ty=(Tensor[(9, 5, 11), int8], Tensor[(980), float32], Tensor[(2640), float32], Tensor[(1755), float64], Tensor[(9, 5, 11), float32]) */;
  %810 = %809.3;
  %811 = cast(%810, dtype="float64") /* ty=Tensor[(1755), float64] */;
  %812 = cast(meta[relay.Constant][34] /* ty=Tensor[(216), uint8] */, dtype="uint8") /* ty=Tensor[(216), uint8] */;
  %813 = cast(meta[relay.Constant][35] /* ty=Tensor[(1800), uint16] */, dtype="uint16") /* ty=Tensor[(1800), uint16] */;
  %814 = reshape(%811, newshape=[1755]) /* ty=Tensor[(1755), float64] */;
  %815 = reshape(%812, newshape=[36, 6]) /* ty=Tensor[(36, 6), uint8] */;
  %816 = reshape(%813, newshape=[1800]) /* ty=Tensor[(1800), uint16] */;
  %817 = @func_1824(%814, %815, %816) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(216), uint8], Tensor[(5, 14, 14), float32], Tensor[(1755), float64], Tensor[(36, 6), uint32], Tensor[(12, 10, 15), float64], Tensor[(1800), uint16]) */;
  %818 = greater_equal(%803, %804) /* ty=Tensor[(9, 5, 11), bool] */;
  %819 = %817.5;
  (%818, %810, %var_2284, %819, meta[relay.Constant][34] /* ty=Tensor[(216), uint8] */, meta[relay.Constant][35] /* ty=Tensor[(1800), uint16] */)
}

def @func_8322() -> (Tensor[(9, 5, 11), float32],) {
  %820 = @func_7091() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %821 = %820.0;
  (%821,)
}

def @func_40(%var_6: Tensor[(5, 14, 14), float32]) -> (Tensor[(5, 14, 14), float32],) {
  %822 = cast(%var_6, dtype="float32") /* ty=Tensor[(5, 14, 14), float32] */;
  %823 = cosh(%822) /* ty=Tensor[(5, 14, 14), float32] */;
  (%823,)
}

def @func_1858(%var_1853: Tensor[(2640), float32]) -> (Tensor[(9, 5, 11), float32], Tensor[(936), uint64], Tensor[(2640), float32], Tensor[(1755), float64]) {
  %824 = @func_1457() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %825 = cast(%var_1853, dtype="float32") /* ty=Tensor[(2640), float32] */;
  %826 = cast(meta[relay.Constant][36] /* ty=Tensor[(1755), float64] */, dtype="float64") /* ty=Tensor[(1755), float64] */;
  %827 = reshape(%825, newshape=[16, 15, 11]) /* ty=Tensor[(16, 15, 11), float32] */;
  %828 = reshape(%826, newshape=[1755]) /* ty=Tensor[(1755), float64] */;
  %829 = @func_905(%827, %828) /* ty=(Tensor[(16, 15, 11), float32], Tensor[(980), float32], Tensor[(936), uint64], Tensor[(12, 10, 15), float64], Tensor[(1755), float64]) */;
  %830 = %824.0;
  %831 = %829.2;
  (%830, %831, %var_1853, meta[relay.Constant][36] /* ty=Tensor[(1755), float64] */)
}

def @func_1233(%var_1215: Tensor[(9, 5, 11), float32], %var_1226: Tensor[(9, 5, 11), float64]) -> (Tensor[(9, 5, 11), bool], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) {
  %832 = @func_1160() /* ty=Tensor[(9, 5, 11), float32] */;
  %833 = cast(%var_1215, dtype="bool") /* ty=Tensor[(9, 5, 11), bool] */;
  %834 = shape_of(%832, dtype="int32") /* ty=Tensor[(3), int32] */;
  %835 = cast(%832, dtype="bool") /* ty=Tensor[(9, 5, 11), bool] */;
  %836 = dyn.reshape(%833, %834, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %837 = cast(%var_1215, dtype="float64") /* ty=Tensor[(9, 5, 11), float64] */;
  %838 = rsqrt(%837) /* ty=Tensor[(9, 5, 11), float64] */;
  %839 = cast(%var_1226, dtype="float32") /* ty=Tensor[(9, 5, 11), float32] */;
  %840 = shape_of(%838, dtype="int32") /* ty=Tensor[(3), int32] */;
  %841 = cast(%838, dtype="float32") /* ty=Tensor[(9, 5, 11), float32] */;
  %842 = dyn.reshape(%839, %840, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %843 = cast(%838, dtype="float32") /* ty=Tensor[(9, 5, 11), float32] */;
  %844 = equal(%835, %836) /* ty=Tensor[(9, 5, 11), bool] */;
  %845 = power(%841, %842) /* ty=Tensor[(9, 5, 11), float32] */;
  %846 = sinh(%843) /* ty=Tensor[(9, 5, 11), float32] */;
  (%844, %845, %846)
}

def @func_1891() -> (Tensor[(9, 5, 11), float32],) {
  %847 = @func_1367() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %848 = %847.0;
  %849 = cast(%848, dtype="float64") /* ty=Tensor[(9, 5, 11), float64] */;
  %850 = cosh(%849) /* ty=Tensor[(9, 5, 11), float64] */;
  %851 = cast(%850, dtype="float32") /* ty=Tensor[(9, 5, 11), float32] */;
  %852 = log10(%851) /* ty=Tensor[(9, 5, 11), float32] */;
  (%852,)
}

def @func_3526() -> Tensor[(9, 5, 11), float32] {
  %853 = @func_1201() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %853.0
}

def @func_3737(%var_3707: Tensor[(10, 11, 5), float64]) -> (Tensor[(10, 11, 5), int32], Tensor[(10, 11, 5), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) {
  %854 = cast(%var_3707, dtype="float64") /* ty=Tensor[(10, 11, 5), float64] */;
  %855 = exp(%854) /* ty=Tensor[(10, 11, 5), float64] */;
  %856 = cast(%var_3707, dtype="int32") /* ty=Tensor[(10, 11, 5), int32] */;
  %857 = shape_of(%855, dtype="int32") /* ty=Tensor[(3), int32] */;
  %858 = cast(%855, dtype="int32") /* ty=Tensor[(10, 11, 5), int32] */;
  %859 = dyn.reshape(%856, %857, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %860 = cast(%var_3707, dtype="float64") /* ty=Tensor[(10, 11, 5), float64] */;
  %861 = @func_1201() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %862 = @func_3365() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %863 = bitwise_and(%858, %859) /* ty=Tensor[(10, 11, 5), int32] */;
  %864 = erf(%860) /* ty=Tensor[(10, 11, 5), float64] */;
  %865 = @func_3236() /* ty=Tensor[(9, 5, 11), float32] */;
  %866 = %861.0;
  %867 = %862.0;
  (%863, %864, %865, %866, %867)
}

def @func_1694() -> (Tensor[(9, 5, 11), float32],) {
  %868 = @func_1457() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %869 = %868.0;
  (%869,)
}

def @func_101(%var_88: Tensor[(10, 13, 7), uint16]) -> (Tensor[(10, 13, 7), uint16], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) {
  %870 = cast(meta[relay.Constant][37] /* ty=Tensor[(10, 13, 7), uint16] */, dtype="uint16") /* ty=Tensor[(10, 13, 7), uint16] */;
  %871 = shape_of(%var_88, dtype="int32") /* ty=Tensor[(3), int32] */;
  %872 = cast(%var_88, dtype="uint16") /* ty=Tensor[(10, 13, 7), uint16] */;
  %873 = dyn.reshape(%870, %871, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %874 = cast(meta[relay.Constant][38] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
  %875 = reshape(%874, newshape=[5, 14, 14]) /* ty=Tensor[(5, 14, 14), float32] */;
  %876 = @func_40(%875) /* ty=(Tensor[(5, 14, 14), float32],) */;
  %877 = maximum(%872, %873) /* ty=Tensor[(10, 13, 7), uint16] */;
  %878 = %876.0;
  (%877, %878, meta[relay.Constant][38] /* ty=Tensor[(980), float32] */)
}

def @func_7613() -> (Tensor[(9, 5, 11), float32],) {
  %879 = @func_5802() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(10, 11, 5), float64], Tensor[(550), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(936), uint64], Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32]) */;
  %880 = %879.4;
  (%880,)
}

def @func_3970(%var_3933: int32, %var_3934: Tensor[(2, 15, 12), int32]) -> (Tensor[(9, 5, 11), float32], Tensor[(495), float64], Tensor[(2, 15, 12), bool]) {
  %881 = cast(meta[relay.Constant][39] /* ty=Tensor[(495), float64] */, dtype="float64") /* ty=Tensor[(495), float64] */;
  %882 = reshape(%881, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), float64] */;
  %883 = @func_1613(%882) /* ty=(Tensor[(9, 5, 11), int8], Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float32]) */;
  %884 = cast(%var_3933, dtype="bool") /* ty=bool */;
  %885 = cast(%var_3934, dtype="bool") /* ty=Tensor[(2, 15, 12), bool] */;
  %886 = equal(%884, %885) /* ty=Tensor[(2, 15, 12), bool] */;
  %887 = cast(%var_3934, dtype="float32") /* ty=Tensor[(2, 15, 12), float32] */;
  %888 = shape_of(%886, dtype="int32") /* ty=Tensor[(3), int32] */;
  %889 = cast(%886, dtype="float32") /* ty=Tensor[(2, 15, 12), float32] */;
  %890 = dyn.reshape(%887, %888, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %891 = add(%889, %890) /* ty=Tensor[(2, 15, 12), float32] */;
  %892 = cast(%891, dtype="bool") /* ty=Tensor[(2, 15, 12), bool] */;
  %893 = shape_of(%886, dtype="int32") /* ty=Tensor[(3), int32] */;
  %894 = cast(%886, dtype="bool") /* ty=Tensor[(2, 15, 12), bool] */;
  %895 = dyn.reshape(%892, %893, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %896 = %883.2;
  %897 = logical_and(%894, %895) /* ty=Tensor[(2, 15, 12), bool] */;
  (%896, meta[relay.Constant][39] /* ty=Tensor[(495), float64] */, %897)
}

def @func_9199() -> (Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32], Tensor[(32, 2), float64], Tensor[(900), float64]) {
  %898 = @func_8446() /* ty=(Tensor[(9, 5, 11), float64],) */;
  %899 = cast(meta[relay.Constant][40] /* ty=Tensor[(32, 2), float64] */, dtype="float64") /* ty=Tensor[(32, 2), float64] */;
  %900 = cast(meta[relay.Constant][41] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %901 = reshape(%899, newshape=[8, 8, 1]) /* ty=Tensor[(8, 8, 1), float64] */;
  %902 = reshape(%900, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %903 = @func_8671(%901, %902) /* ty=(Tensor[(8, 8, 1), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(36), float64], Tensor[(12, 10, 15), float64], Tensor[(900), float32], Tensor[(9, 5, 11), float32]) */;
  %904 = cast(meta[relay.Constant][41] /* ty=Tensor[(900), float32] */, dtype="float64") /* ty=Tensor[(900), float64] */;
  %905 = %898.0;
  %906 = %903.6;
  %907 = log10(%904) /* ty=Tensor[(900), float64] */;
  (%905, %906, meta[relay.Constant][40] /* ty=Tensor[(32, 2), float64] */, %907)
}

def @func_3236() -> Tensor[(9, 5, 11), float32] {
  %908 = @func_1891() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %908.0
}

def @func_3885(%var_3873: Tensor[(10, 15, 6), float32]) -> (Tensor[(10, 15, 6), float64],) {
  %909 = cast(%var_3873, dtype="float32") /* ty=Tensor[(10, 15, 6), float32] */;
  %910 = erf(%909) /* ty=Tensor[(10, 15, 6), float32] */;
  %911 = cast(%910, dtype="float64") /* ty=Tensor[(10, 15, 6), float64] */;
  %912 = shape_of(%var_3873, dtype="int32") /* ty=Tensor[(3), int32] */;
  %913 = cast(%var_3873, dtype="float64") /* ty=Tensor[(10, 15, 6), float64] */;
  %914 = dyn.reshape(%911, %912, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %915 = power(%913, %914) /* ty=Tensor[(10, 15, 6), float64] */;
  (%915,)
}

def @func_4980() -> Tensor[(9, 5, 11), float32] {
  %916 = @func_3762() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(300), int64]) */;
  %916.0
}

def @func_7996() -> (Tensor[(300), float32], Tensor[(9, 5, 11), float32], Tensor[(48), float32], Tensor[(980), float32], Tensor[(9, 5, 11), float32]) {
  %917 = @func_7715() /* ty=Tensor[(300), int64] */;
  %918 = cast(%917, dtype="float32") /* ty=Tensor[(300), float32] */;
  %919 = cast(meta[relay.Constant][42] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %920 = cast(meta[relay.Constant][43] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
  %921 = reshape(%919, newshape=[6, 1, 8]) /* ty=Tensor[(6, 1, 8), float32] */;
  %922 = reshape(%920, newshape=[980, 1]) /* ty=Tensor[(980, 1), float32] */;
  %923 = @func_3798(%921, %922) /* ty=(Tensor[(6, 1, 8), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(980, 1), float32], Tensor[(300), int64]) */;
  %924 = @func_3305() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %925 = acos(%918) /* ty=Tensor[(300), float32] */;
  %926 = %923.1;
  %927 = %924.0;
  (%925, %926, meta[relay.Constant][42] /* ty=Tensor[(48), float32] */, meta[relay.Constant][43] /* ty=Tensor[(980), float32] */, %927)
}

def @func_5328(%var_5323: Tensor[(7, 1755), float32]) -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(2, 24), float32], Tensor[(980), float32], Tensor[(9, 5, 11), float64], Tensor[(?, 1755), int64], Tensor[(7, 1755), float32]) {
  %928 = @func_3305() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %929 = @func_1891() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %930 = %929.0;
  %931 = cast(%930, dtype="float32") /* ty=Tensor[(9, 5, 11), float32] */;
  %932 = reshape(%931, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), float32] */;
  %933 = @func_2124(%932) /* ty=(Tensor[(9, 5, 11), float64],) */;
  %934 = cast(meta[relay.Constant][44] /* ty=Tensor[(2, 24), float32] */, dtype="float32") /* ty=Tensor[(2, 24), float32] */;
  %935 = cast(meta[relay.Constant][45] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
  %936 = reshape(%934, newshape=[6, 1, 8]) /* ty=Tensor[(6, 1, 8), float32] */;
  %937 = reshape(%935, newshape=[980, 1]) /* ty=Tensor[(980, 1), float32] */;
  %938 = @func_3798(%936, %937) /* ty=(Tensor[(6, 1, 8), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(980, 1), float32], Tensor[(300), int64]) */;
  %939 = %938.4;
  %940 = cast(%939, dtype="float32") /* ty=Tensor[(1, 1755), float32] */;
  %941 = sinh(%940) /* ty=Tensor[(1, 1755), float32] */;
  %942 = cast(%939, dtype="int64") /* ty=Tensor[(1, 1755), int64] */;
  %943 = shape_of(%941, dtype="int32") /* ty=Tensor[(2), int32] */;
  %944 = cast(%941, dtype="int64") /* ty=Tensor[(1, 1755), int64] */;
  %945 = dyn.reshape(%942, %943, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %946 = cast(%941, dtype="float32") /* ty=Tensor[(1, 1755), float32] */;
  %947 = cast(%var_5323, dtype="float32") /* ty=Tensor[(7, 1755), float32] */;
  %948 = %928.0;
  %949 = %933.0;
  %950 = maximum(%944, %945) /* ty=Tensor[(?, 1755), int64] */;
  %951 = floor_mod(%946, %947) /* ty=Tensor[(7, 1755), float32] */;
  (%948, %930, meta[relay.Constant][44] /* ty=Tensor[(2, 24), float32] */, meta[relay.Constant][45] /* ty=Tensor[(980), float32] */, %949, %950, %951)
}

def @func_1963() -> Tensor[(9, 5, 11), float32] {
  %952 = @func_1694() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %952.0
}

def @func_8671(%var_8632: Tensor[(8, 8, 1), float64], %var_8659: Tensor[(900), float32]) -> (Tensor[(8, 8, 1), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(36), float64], Tensor[(12, 10, 15), float64], Tensor[(900), float32], Tensor[(9, 5, 11), float32]) {
  %953 = cast(%var_8632, dtype="float64") /* ty=Tensor[(8, 8, 1), float64] */;
  %954 = @func_6786() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) */;
  %955 = cast(meta[relay.Constant][46] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %956 = reshape(%955, newshape=[36, 1]) /* ty=Tensor[(36, 1), float64] */;
  %957 = @func_6428(%956) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(4, 9, 1), float64], Tensor[(36, 1), float64]) */;
  %958 = cast(%var_8659, dtype="float32") /* ty=Tensor[(900), float32] */;
  %959 = reshape(%958, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %960 = @func_8038(%959) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(12, 10, 15), float64], Tensor[(900), float32], Tensor[(9, 5, 11), float32]) */;
  %961 = @func_1457() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %962 = tan(%953) /* ty=Tensor[(8, 8, 1), float64] */;
  %963 = %954.1;
  %964 = %957.1;
  %965 = %960.1;
  %966 = %961.0;
  (%962, %963, %964, meta[relay.Constant][46] /* ty=Tensor[(36), float64] */, %965, %var_8659, %966)
}

def @func_8112(%var_8100: Tensor[(10, 3, 6), int64], %var_8101: Tensor[(10, 3, 6), int64]) -> (Tensor[(10, 3, 6), int64], Tensor[(10, 3, 6), float32]) {
  %967 = cast(%var_8101, dtype="int64") /* ty=Tensor[(10, 3, 6), int64] */;
  %968 = shape_of(%var_8100, dtype="int32") /* ty=Tensor[(3), int32] */;
  %969 = cast(%var_8100, dtype="int64") /* ty=Tensor[(10, 3, 6), int64] */;
  %970 = dyn.reshape(%967, %968, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %971 = cast(%var_8100, dtype="float32") /* ty=Tensor[(10, 3, 6), float32] */;
  %972 = shape_of(%var_8101, dtype="int32") /* ty=Tensor[(3), int32] */;
  %973 = cast(%var_8101, dtype="float32") /* ty=Tensor[(10, 3, 6), float32] */;
  %974 = dyn.reshape(%971, %972, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %975 = bitwise_and(%969, %970) /* ty=Tensor[(10, 3, 6), int64] */;
  %976 = mod(%973, %974) /* ty=Tensor[(10, 3, 6), float32] */;
  (%975, %976)
}

def @func_7791() -> (Tensor[(9, 5, 11), float32],) {
  %977 = @func_3320() /* ty=Tensor[(9, 5, 11), float32] */;
  (%977,)
}

def @func_1729(%var_1697: Tensor[(2, 10, 15), int64], %var_1698: Tensor[(2, 10, 15), int64]) -> (Tensor[(2, 10, 15), float32], Tensor[(2, 10, 15), uint64], Tensor[(980), float32], Tensor[(1, 1755), float64]) {
  %978 = cast(%var_1698, dtype="int64") /* ty=Tensor[(2, 10, 15), int64] */;
  %979 = shape_of(%var_1697, dtype="int32") /* ty=Tensor[(3), int32] */;
  %980 = cast(%var_1697, dtype="int64") /* ty=Tensor[(2, 10, 15), int64] */;
  %981 = dyn.reshape(%978, %979, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %982 = subtract(%980, %981) /* ty=Tensor[(2, 10, 15), int64] */;
  %983 = cast(%982, dtype="float32") /* ty=Tensor[(2, 10, 15), float32] */;
  %984 = cast(%var_1697, dtype="float32") /* ty=Tensor[(2, 10, 15), float32] */;
  %985 = exp(%984) /* ty=Tensor[(2, 10, 15), float32] */;
  %986 = cast(%982, dtype="uint64") /* ty=Tensor[(2, 10, 15), uint64] */;
  %987 = shape_of(%985, dtype="int32") /* ty=Tensor[(3), int32] */;
  %988 = cast(%985, dtype="uint64") /* ty=Tensor[(2, 10, 15), uint64] */;
  %989 = dyn.reshape(%986, %987, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %990 = cast(meta[relay.Constant][47] /* ty=Tensor[(1, 1755), float64] */, dtype="float64") /* ty=Tensor[(1, 1755), float64] */;
  %991 = reshape(%990, newshape=[15, 13, 9]) /* ty=Tensor[(15, 13, 9), float64] */;
  %992 = @func_792(%991) /* ty=(Tensor[(15, 13, 9), float64], Tensor[(12, 10, 15), float64], Tensor[(3, 600), uint16], Tensor[(980), float32], Tensor[(48), uint32], Tensor[(5, 14, 14), float32], Tensor[(12, 10, 15), float64]) */;
  %993 = atan(%983) /* ty=Tensor[(2, 10, 15), float32] */;
  %994 = minimum(%988, %989) /* ty=Tensor[(2, 10, 15), uint64] */;
  %995 = %992.3;
  (%993, %994, %995, meta[relay.Constant][47] /* ty=Tensor[(1, 1755), float64] */)
}

def @func_1265(%var_1259: Tensor[(2, 12, 9), uint8]) -> (Tensor[(2, 12, 9), uint8],) {
  %996 = cast(meta[relay.Constant][48] /* ty=Tensor[(2, 12, 9), uint8] */, dtype="uint8") /* ty=Tensor[(2, 12, 9), uint8] */;
  %997 = shape_of(%var_1259, dtype="int32") /* ty=Tensor[(3), int32] */;
  %998 = cast(%var_1259, dtype="uint8") /* ty=Tensor[(2, 12, 9), uint8] */;
  %999 = dyn.reshape(%996, %997, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1000 = left_shift(%998, %999) /* ty=Tensor[(2, 12, 9), uint8] */;
  (%1000,)
}

def @func_2359(%var_2331: Tensor[(4, 4, 13), float32]) -> (Tensor[(4, 4, 13), uint32], Tensor[(4, 4, 13), int64], Tensor[(48), uint32], Tensor[(1755), float64]) {
  %1001 = cast(%var_2331, dtype="float32") /* ty=Tensor[(4, 4, 13), float32] */;
  %1002 = cos(%1001) /* ty=Tensor[(4, 4, 13), float32] */;
  %1003 = cast(meta[relay.Constant][49] /* ty=Tensor[(4, 4, 13), float32] */, dtype="uint32") /* ty=Tensor[(4, 4, 13), uint32] */;
  %1004 = shape_of(%1002, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1005 = cast(%1002, dtype="uint32") /* ty=Tensor[(4, 4, 13), uint32] */;
  %1006 = dyn.reshape(%1003, %1004, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1007 = cast(meta[relay.Constant][49] /* ty=Tensor[(4, 4, 13), float32] */, dtype="float64") /* ty=Tensor[(4, 4, 13), float64] */;
  %1008 = shape_of(%1002, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1009 = cast(%1002, dtype="float64") /* ty=Tensor[(4, 4, 13), float64] */;
  %1010 = dyn.reshape(%1007, %1008, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1011 = subtract(%1009, %1010) /* ty=Tensor[(4, 4, 13), float64] */;
  %1012 = cast(%1011, dtype="int64") /* ty=Tensor[(4, 4, 13), int64] */;
  %1013 = shape_of(%var_2331, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1014 = cast(%var_2331, dtype="int64") /* ty=Tensor[(4, 4, 13), int64] */;
  %1015 = dyn.reshape(%1012, %1013, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1016 = cast(meta[relay.Constant][50] /* ty=Tensor[(1755), float64] */, dtype="float64") /* ty=Tensor[(1755), float64] */;
  %1017 = reshape(%1016, newshape=[15, 13, 9]) /* ty=Tensor[(15, 13, 9), float64] */;
  %1018 = @func_792(%1017) /* ty=(Tensor[(15, 13, 9), float64], Tensor[(12, 10, 15), float64], Tensor[(3, 600), uint16], Tensor[(980), float32], Tensor[(48), uint32], Tensor[(5, 14, 14), float32], Tensor[(12, 10, 15), float64]) */;
  %1019 = logical_xor(%1005, %1006) /* ty=Tensor[(4, 4, 13), uint32] */;
  %1020 = bitwise_and(%1014, %1015) /* ty=Tensor[(4, 4, 13), int64] */;
  %1021 = %1018.4;
  (%1019, %1020, %1021, meta[relay.Constant][50] /* ty=Tensor[(1755), float64] */)
}

def @func_6786() -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) {
  %1022 = @func_4879() /* ty=Tensor[(9, 5, 11), float32] */;
  %1023 = @func_3320() /* ty=Tensor[(9, 5, 11), float32] */;
  (%1022, %1023)
}

def @func_2124(%var_2110: Tensor[(9, 5, 11), float32]) -> (Tensor[(9, 5, 11), float64],) {
  %1024 = @func_1160() /* ty=Tensor[(9, 5, 11), float32] */;
  %1025 = cast(%var_2110, dtype="int64") /* ty=Tensor[(9, 5, 11), int64] */;
  %1026 = shape_of(%1024, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1027 = cast(%1024, dtype="int64") /* ty=Tensor[(9, 5, 11), int64] */;
  %1028 = dyn.reshape(%1025, %1026, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1029 = right_shift(%1027, %1028) /* ty=Tensor[(9, 5, 11), int64] */;
  %1030 = cast(%1029, dtype="float64") /* ty=Tensor[(9, 5, 11), float64] */;
  %1031 = log(%1030) /* ty=Tensor[(9, 5, 11), float64] */;
  (%1031,)
}

def @func_3798(%var_3777: Tensor[(6, 1, 8), float32], %var_3794: Tensor[(980, 1), float32]) -> (Tensor[(6, 1, 8), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(980, 1), float32], Tensor[(300), int64]) {
  %1032 = cast(%var_3777, dtype="float32") /* ty=Tensor[(6, 1, 8), float32] */;
  %1033 = @func_3396() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %1034 = @func_1891() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %1035 = cast(%var_3794, dtype="float32") /* ty=Tensor[(980, 1), float32] */;
  %1036 = cast(meta[relay.Constant][51] /* ty=Tensor[(300), int64] */, dtype="int64") /* ty=Tensor[(300), int64] */;
  %1037 = reshape(%1035, newshape=[980, 1]) /* ty=Tensor[(980, 1), float32] */;
  %1038 = reshape(%1036, newshape=[300]) /* ty=Tensor[(300), int64] */;
  %1039 = @func_2693(%1037, %1038) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(980, 1), float32], Tensor[(2, 10, 15), float32], Tensor[(300), int64], Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64]) */;
  %1040 = tan(%1032) /* ty=Tensor[(6, 1, 8), float32] */;
  %1041 = %1033.0;
  %1042 = @func_3526() /* ty=Tensor[(9, 5, 11), float32] */;
  %1043 = %1034.0;
  %1044 = %1039.6;
  (%1040, %1041, %1042, %1043, %1044, %var_3794, meta[relay.Constant][51] /* ty=Tensor[(300), int64] */)
}

def @func_4305(%var_4300: Tensor[(910), uint16]) -> (Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(910), uint16]) {
  %1045 = @func_1201() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %1046 = cast(%var_4300, dtype="uint16") /* ty=Tensor[(910), uint16] */;
  %1047 = reshape(%1046, newshape=[10, 13, 7]) /* ty=Tensor[(10, 13, 7), uint16] */;
  %1048 = @func_101(%1047) /* ty=(Tensor[(10, 13, 7), uint16], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) */;
  %1049 = %1045.0;
  %1050 = %1048.1;
  (%1049, %1050, %var_4300)
}

def @func_7277() -> Tensor[(9, 5, 11), float64] {
  %1051 = @func_7071() /* ty=(Tensor[(9, 5, 11), float64],) */;
  %1051.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1203() -> (Tensor[(9, 5, 11), float32],) {
  @func_1201() /* ty=(Tensor[(9, 5, 11), float32],) */
}

def @func_8096() -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) {
  @func_8094() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) */
}

def @main() -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(36), float64], Tensor[(12285), float32]) {
  %0 = @func_3869() /* ty=(Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(12285), float32] */, dtype="float32") /* ty=Tensor[(12285), float32] */;
  %2 = cast(meta[relay.Constant][1] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %3 = reshape(%1, newshape=[12285, 1]) /* ty=Tensor[(12285, 1), float32] */;
  %4 = reshape(%2, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %5 = @func_7586(%3, %4) /* ty=(Tensor[(9, 5, 11), uint16], Tensor[(9, 5, 11), float32], Tensor[(12285, 1), float32], Tensor[(4, 9, 1), float64], Tensor[(36), float64]) */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(12285), float32] */, dtype="float32") /* ty=Tensor[(12285), float32] */;
  %7 = %0.2;
  %8 = %5.1;
  %9 = sin(%6) /* ty=Tensor[(12285), float32] */;
  (%7, %8, meta[relay.Constant][1] /* ty=Tensor[(36), float64] */, %9)
}

def @func_9126() -> Tensor[(9, 5, 11), float64] {
  @func_8497() /* ty=Tensor[(9, 5, 11), float64] */
}

def @func_4748(%var_4746: Tensor[(208), float32], %var_4747: Tensor[(910), uint16]) -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(2640), float32], Tensor[(900), float32], Tensor[(48), uint32], Tensor[(208), float32], Tensor[(5, 14, 14), float32], Tensor[(910), uint16]) {
  %26 = fn (%var_4711: Tensor[(208), float32], %var_4714: Tensor[(910), uint16]) -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(2640), float32], Tensor[(900), float32], Tensor[(48), uint32], Tensor[(208), float32], Tensor[(5, 14, 14), float32], Tensor[(910), uint16]) {
    %10 = @func_3762() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(300), int64]) */;
    %11 = cast(meta[relay.Constant][2] /* ty=Tensor[(2640), float32] */, dtype="float32") /* ty=Tensor[(2640), float32] */;
    %12 = cast(meta[relay.Constant][3] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
    %13 = reshape(%11, newshape=[2640]) /* ty=Tensor[(2640), float32] */;
    %14 = reshape(%12, newshape=[900]) /* ty=Tensor[(900), float32] */;
    %15 = @func_4620(%13, %14) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(1755), float64], Tensor[(2640), float32], Tensor[(9, 5, 11), float32], Tensor[(10, 15, 6), float64], Tensor[(900), float32], Tensor[(2, 12, 9), uint8], Tensor[(36, 6), uint8]) */;
    %16 = cast(%var_4711, dtype="float32") /* ty=Tensor[(208), float32] */;
    %17 = reshape(%16, newshape=[4, 4, 13]) /* ty=Tensor[(4, 4, 13), float32] */;
    %18 = @func_2359(%17) /* ty=(Tensor[(4, 4, 13), uint32], Tensor[(4, 4, 13), int64], Tensor[(48), uint32], Tensor[(1755), float64]) */;
    %19 = cast(%var_4714, dtype="uint16") /* ty=Tensor[(910), uint16] */;
    %20 = reshape(%19, newshape=[10, 13, 7]) /* ty=Tensor[(10, 13, 7), uint16] */;
    %21 = @func_101(%20) /* ty=(Tensor[(10, 13, 7), uint16], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) */;
    %22 = %10.0;
    %23 = %15.0;
    %24 = %18.2;
    %25 = %21.1;
    (%22, %23, meta[relay.Constant][2] /* ty=Tensor[(2640), float32] */, meta[relay.Constant][3] /* ty=Tensor[(900), float32] */, %24, %var_4711, %25, %var_4714)
  };
  %26(%var_4746, %var_4747) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(2640), float32], Tensor[(900), float32], Tensor[(48), uint32], Tensor[(208), float32], Tensor[(5, 14, 14), float32], Tensor[(910), uint16]) */
}

def @func_104(%var_102: Tensor[(10, 13, 7), uint16]) -> (Tensor[(10, 13, 7), uint16], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) {
  @func_101(%var_102) /* ty=(Tensor[(10, 13, 7), uint16], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) */
}

def @func_9063(%var_9061: int32, %var_9062: Tensor[(15, 9, 6), int32]) -> (Tensor[(15, 9, 6), int32], Tensor[(9, 5, 11), float32]) {
  %32 = fn (%var_9052: int32, %var_9053: Tensor[(15, 9, 6), int32]) -> (Tensor[(15, 9, 6), int32], Tensor[(9, 5, 11), float32]) {
    %27 = cast(%var_9052, dtype="int32") /* ty=int32 */;
    %28 = cast(%var_9053, dtype="int32") /* ty=Tensor[(15, 9, 6), int32] */;
    %29 = @func_1530() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) */;
    %30 = subtract(%27, %28) /* ty=Tensor[(15, 9, 6), int32] */;
    %31 = %29.0;
    (%30, %31)
  };
  %32(%var_9061, %var_9062) /* ty=(Tensor[(15, 9, 6), int32], Tensor[(9, 5, 11), float32]) */
}

def @func_1268(%var_1266: Tensor[(2, 12, 9), uint8]) -> (Tensor[(2, 12, 9), uint8],) {
  @func_1265(%var_1266) /* ty=(Tensor[(2, 12, 9), uint8],) */
}

def @func_4881() -> Tensor[(9, 5, 11), float32] {
  @func_4879() /* ty=Tensor[(9, 5, 11), float32] */
}

def @func_7192(%var_7189: Tensor[(2, 108), uint8], %var_7190: Tensor[(2640), float32], %var_7191: Tensor[(1755), float64]) -> (Tensor[(9, 5, 11), float32], Tensor[(2, 12, 9), uint8], Tensor[(2, 108), uint8], Tensor[(2640), float32], Tensor[(1755), int32], Tensor[(1755), int8]) {
  %53 = fn (%var_7153: Tensor[(2, 108), uint8], %var_7156: Tensor[(2640), float32], %var_7167: Tensor[(1755), float64]) -> (Tensor[(9, 5, 11), float32], Tensor[(2, 12, 9), uint8], Tensor[(2, 108), uint8], Tensor[(2640), float32], Tensor[(1755), int32], Tensor[(1755), int8]) {
    %33 = @func_3365() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %34 = cast(%var_7153, dtype="uint8") /* ty=Tensor[(2, 108), uint8] */;
    %35 = reshape(%34, newshape=[36, 6]) /* ty=Tensor[(36, 6), uint8] */;
    %36 = @func_1751(%35) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(2, 12, 9), uint8], Tensor[(36, 6), uint8]) */;
    %37 = cast(%var_7156, dtype="float32") /* ty=Tensor[(2640), float32] */;
    %38 = reshape(%37, newshape=[2640]) /* ty=Tensor[(2640), float32] */;
    %39 = @func_5170(%38) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(16, 15, 11), float32], Tensor[(2640), float32], Tensor[(1755), float64], Tensor[(9, 5, 11), float64]) */;
    %40 = %39.3;
    %41 = cast(%var_7167, dtype="int32") /* ty=Tensor[(1755), int32] */;
    %42 = shape_of(%40, dtype="int32") /* ty=Tensor[(1), int32] */;
    %43 = cast(%40, dtype="int32") /* ty=Tensor[(1755), int32] */;
    %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?), int32] */;
    %45 = cast(%var_7167, dtype="int8") /* ty=Tensor[(1755), int8] */;
    %46 = shape_of(%40, dtype="int32") /* ty=Tensor[(1), int32] */;
    %47 = cast(%40, dtype="int8") /* ty=Tensor[(1755), int8] */;
    %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?), int8] */;
    %49 = %33.0;
    %50 = %36.2;
    %51 = right_shift(%43, %44) /* ty=Tensor[(1755), int32] */;
    %52 = minimum(%47, %48) /* ty=Tensor[(1755), int8] */;
    (%49, %50, %var_7153, %var_7156, %51, %52)
  };
  %53(%var_7189, %var_7190, %var_7191) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(2, 12, 9), uint8], Tensor[(2, 108), uint8], Tensor[(2640), float32], Tensor[(1755), int32], Tensor[(1755), int8]) */
}

def @func_9128() -> Tensor[(9, 5, 11), float64] {
  @func_9126() /* ty=Tensor[(9, 5, 11), float64] */
}

def @func_9163() -> (Tensor[(9, 5, 11), float32],) {
  %54 = @func_1160() /* ty=Tensor[(9, 5, 11), float32] */;
  (%54,)
}

def @func_1368() -> (Tensor[(9, 5, 11), float32],) {
  %57 = fn () -> (Tensor[(9, 5, 11), float32],) {
    %55 = @func_1201() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %56 = %55.0;
    (%56,)
  };
  %57() /* ty=(Tensor[(9, 5, 11), float32],) */
}

def @func_3143() -> (Tensor[(9, 5, 11), float32],) {
  %60 = fn () -> (Tensor[(9, 5, 11), float32],) {
    %58 = @func_1891() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %59 = %58.0;
    (%59,)
  };
  %60() /* ty=(Tensor[(9, 5, 11), float32],) */
}

def @func_9199() -> (Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32], Tensor[(32, 2), float64], Tensor[(900), float64]) {
  %61 = @func_8446() /* ty=(Tensor[(9, 5, 11), float64],) */;
  %62 = cast(meta[relay.Constant][4] /* ty=Tensor[(32, 2), float64] */, dtype="float64") /* ty=Tensor[(32, 2), float64] */;
  %63 = cast(meta[relay.Constant][5] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %64 = reshape(%62, newshape=[8, 8, 1]) /* ty=Tensor[(8, 8, 1), float64] */;
  %65 = reshape(%63, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %66 = @func_8671(%64, %65) /* ty=(Tensor[(8, 8, 1), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(36), float64], Tensor[(12, 10, 15), float64], Tensor[(900), float32], Tensor[(9, 5, 11), float32]) */;
  %67 = cast(meta[relay.Constant][5] /* ty=Tensor[(900), float32] */, dtype="float64") /* ty=Tensor[(900), float64] */;
  %68 = %61.0;
  %69 = %66.6;
  %70 = log10(%67) /* ty=Tensor[(900), float64] */;
  (%68, %69, meta[relay.Constant][4] /* ty=Tensor[(32, 2), float64] */, %70)
}

def @func_8386() -> (Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) {
  @func_8384() /* ty=(Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) */
}

def @func_1729(%var_1697: Tensor[(2, 10, 15), int64], %var_1698: Tensor[(2, 10, 15), int64]) -> (Tensor[(2, 10, 15), float32], Tensor[(2, 10, 15), uint64], Tensor[(980), float32], Tensor[(1, 1755), float64]) {
  %71 = cast(%var_1698, dtype="int64") /* ty=Tensor[(2, 10, 15), int64] */;
  %72 = shape_of(%var_1697, dtype="int32") /* ty=Tensor[(3), int32] */;
  %73 = cast(%var_1697, dtype="int64") /* ty=Tensor[(2, 10, 15), int64] */;
  %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %75 = subtract(%73, %74) /* ty=Tensor[(2, 10, 15), int64] */;
  %76 = cast(%75, dtype="float32") /* ty=Tensor[(2, 10, 15), float32] */;
  %77 = cast(%var_1697, dtype="float32") /* ty=Tensor[(2, 10, 15), float32] */;
  %78 = exp(%77) /* ty=Tensor[(2, 10, 15), float32] */;
  %79 = cast(%75, dtype="uint64") /* ty=Tensor[(2, 10, 15), uint64] */;
  %80 = shape_of(%78, dtype="int32") /* ty=Tensor[(3), int32] */;
  %81 = cast(%78, dtype="uint64") /* ty=Tensor[(2, 10, 15), uint64] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %83 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 1755), float64] */, dtype="float64") /* ty=Tensor[(1, 1755), float64] */;
  %84 = reshape(%83, newshape=[15, 13, 9]) /* ty=Tensor[(15, 13, 9), float64] */;
  %85 = @func_792(%84) /* ty=(Tensor[(15, 13, 9), float64], Tensor[(12, 10, 15), float64], Tensor[(3, 600), uint16], Tensor[(980), float32], Tensor[(48), uint32], Tensor[(5, 14, 14), float32], Tensor[(12, 10, 15), float64]) */;
  %86 = atan(%76) /* ty=Tensor[(2, 10, 15), float32] */;
  %87 = minimum(%81, %82) /* ty=Tensor[(2, 10, 15), uint64] */;
  %88 = %85.3;
  (%86, %87, %88, meta[relay.Constant][6] /* ty=Tensor[(1, 1755), float64] */)
}

def @func_4307(%var_4306: Tensor[(910), uint16]) -> (Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(910), uint16]) {
  %95 = fn (%var_4300: Tensor[(910), uint16]) -> (Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(910), uint16]) {
    %89 = @func_1201() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %90 = cast(%var_4300, dtype="uint16") /* ty=Tensor[(910), uint16] */;
    %91 = reshape(%90, newshape=[10, 13, 7]) /* ty=Tensor[(10, 13, 7), uint16] */;
    %92 = @func_101(%91) /* ty=(Tensor[(10, 13, 7), uint16], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) */;
    %93 = %89.0;
    %94 = %92.1;
    (%93, %94, %var_4300)
  };
  %95(%var_4306) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(910), uint16]) */
}

def @func_4548() -> (Tensor[(9, 5, 11), float32], Tensor[(12, 10, 15), float64], Tensor[(1800), uint16], Tensor[(12, 10, 15), float64]) {
  %96 = @func_2629() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %97 = cast(meta[relay.Constant][7] /* ty=Tensor[(1800), uint16] */, dtype="uint16") /* ty=Tensor[(1800), uint16] */;
  %98 = cast(meta[relay.Constant][7] /* ty=Tensor[(1800), uint16] */, dtype="uint16") /* ty=Tensor[(1800), uint16] */;
  %99 = reshape(%97, newshape=[12, 10, 15]) /* ty=Tensor[(12, 10, 15), uint16] */;
  %100 = reshape(%98, newshape=[12, 10, 15]) /* ty=Tensor[(12, 10, 15), uint16] */;
  %101 = @func_324(%99, %100) /* ty=Tensor[(12, 10, 15), float64] */;
  %102 = cast(%101, dtype="uint16") /* ty=Tensor[(12, 10, 15), uint16] */;
  %103 = cast(meta[relay.Constant][7] /* ty=Tensor[(1800), uint16] */, dtype="uint16") /* ty=Tensor[(1800), uint16] */;
  %104 = reshape(%102, newshape=[12, 10, 15]) /* ty=Tensor[(12, 10, 15), uint16] */;
  %105 = reshape(%103, newshape=[12, 10, 15]) /* ty=Tensor[(12, 10, 15), uint16] */;
  %106 = %96.0;
  %107 = @func_324(%104, %105) /* ty=Tensor[(12, 10, 15), float64] */;
  (%106, %101, meta[relay.Constant][7] /* ty=Tensor[(1800), uint16] */, %107)
}

def @func_3306() -> (Tensor[(9, 5, 11), float32],) {
  %110 = fn () -> (Tensor[(9, 5, 11), float32],) {
    %108 = @func_2258() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %109 = %108.0;
    (%109,)
  };
  %110() /* ty=(Tensor[(9, 5, 11), float32],) */
}

def @func_3638(%var_3637: Tensor[(16, 6, 8), float32]) -> (Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32], Tensor[(16, 6, 8), float64]) {
  %119 = fn (%var_3606: Tensor[(16, 6, 8), float32]) -> (Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32], Tensor[(16, 6, 8), float64]) {
    %111 = @func_1908() /* ty=(Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float64]) */;
    %112 = @func_2258() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %113 = cast(%var_3606, dtype="float32") /* ty=Tensor[(16, 6, 8), float32] */;
    %114 = acos(%113) /* ty=Tensor[(16, 6, 8), float32] */;
    %115 = cast(%114, dtype="float64") /* ty=Tensor[(16, 6, 8), float64] */;
    %116 = %111.1;
    %117 = %112.0;
    %118 = sinh(%115) /* ty=Tensor[(16, 6, 8), float64] */;
    (%116, %117, %118)
  };
  %119(%var_3637) /* ty=(Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32], Tensor[(16, 6, 8), float64]) */
}

def @func_6156(%var_6154: Tensor[(12285), float32]) -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(12285), float32]) {
  %120 = @func_3436() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %121 = cast(%var_6154, dtype="float32") /* ty=Tensor[(12285), float32] */;
  %122 = reshape(%121, newshape=[7, 1755]) /* ty=Tensor[(7, 1755), float32] */;
  %123 = @func_5328(%122) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(2, 24), float32], Tensor[(980), float32], Tensor[(9, 5, 11), float64], Tensor[(?, 1755), int64], Tensor[(7, 1755), float32]) */;
  %124 = %120.0;
  %125 = %123.1;
  (%124, %125, %var_6154)
}

def @func_8235() -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(12, 10, 15), float64], Tensor[(900), float32], Tensor[(9, 5, 11), float32]) {
  @func_8233() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(12, 10, 15), float64], Tensor[(900), float32], Tensor[(9, 5, 11), float32]) */
}

def @func_8865(%var_8845: Tensor[(7, 3, 10), float32]) -> (Tensor[(9, 5, 11), float32], Tensor[(7, 3, 10), uint32]) {
  %126 = @func_8322() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %127 = cast(%var_8845, dtype="float32") /* ty=Tensor[(7, 3, 10), float32] */;
  %128 = sin(%127) /* ty=Tensor[(7, 3, 10), float32] */;
  %129 = cast(%var_8845, dtype="uint32") /* ty=Tensor[(7, 3, 10), uint32] */;
  %130 = shape_of(%128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %131 = cast(%128, dtype="uint32") /* ty=Tensor[(7, 3, 10), uint32] */;
  %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %133 = %126.0;
  %134 = right_shift(%131, %132) /* ty=Tensor[(7, 3, 10), uint32] */;
  (%133, %134)
}

def @func_700(%var_698: Tensor[(13, 6, 12), uint64], %var_699: Tensor[(13, 6, 12), uint64]) -> (Tensor[(13, 6, 12), uint64], Tensor[(5, 14, 14), float32], Tensor[(980), float32], Tensor[(13, 6, 12), float32]) {
  @func_696(%var_698, %var_699) /* ty=(Tensor[(13, 6, 12), uint64], Tensor[(5, 14, 14), float32], Tensor[(980), float32], Tensor[(13, 6, 12), float32]) */
}

def @func_7374() -> (Tensor[(9, 5, 11), float64],) {
  @func_7372() /* ty=(Tensor[(9, 5, 11), float64],) */
}

def @func_6511(%var_6510: Tensor[(11, 16, 13), float64]) -> Tensor[(11, 16, 13), float64] {
  %136 = fn (%var_6491: Tensor[(11, 16, 13), float64]) -> Tensor[(11, 16, 13), float64] {
    %135 = cast(%var_6491, dtype="float64") /* ty=Tensor[(11, 16, 13), float64] */;
    atan(%135) /* ty=Tensor[(11, 16, 13), float64] */
  };
  %136(%var_6510) /* ty=Tensor[(11, 16, 13), float64] */
}

def @func_7696(%var_7694: Tensor[(24, 2), float32]) -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(24, 2), float32], Tensor[(980), float32]) {
  @func_7693(%var_7694) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(24, 2), float32], Tensor[(980), float32]) */
}

def @func_7793() -> (Tensor[(9, 5, 11), float32],) {
  @func_7791() /* ty=(Tensor[(9, 5, 11), float32],) */
}

def @func_8115(%var_8113: Tensor[(10, 3, 6), int64], %var_8114: Tensor[(10, 3, 6), int64]) -> (Tensor[(10, 3, 6), int64], Tensor[(10, 3, 6), float32]) {
  %147 = fn (%var_8100: Tensor[(10, 3, 6), int64], %var_8101: Tensor[(10, 3, 6), int64]) -> (Tensor[(10, 3, 6), int64], Tensor[(10, 3, 6), float32]) {
    %137 = cast(%var_8101, dtype="int64") /* ty=Tensor[(10, 3, 6), int64] */;
    %138 = shape_of(%var_8100, dtype="int32") /* ty=Tensor[(3), int32] */;
    %139 = cast(%var_8100, dtype="int64") /* ty=Tensor[(10, 3, 6), int64] */;
    %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %141 = cast(%var_8100, dtype="float32") /* ty=Tensor[(10, 3, 6), float32] */;
    %142 = shape_of(%var_8101, dtype="int32") /* ty=Tensor[(3), int32] */;
    %143 = cast(%var_8101, dtype="float32") /* ty=Tensor[(10, 3, 6), float32] */;
    %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %145 = bitwise_and(%139, %140) /* ty=Tensor[(10, 3, 6), int64] */;
    %146 = mod(%143, %144) /* ty=Tensor[(10, 3, 6), float32] */;
    (%145, %146)
  };
  %147(%var_8113, %var_8114) /* ty=(Tensor[(10, 3, 6), int64], Tensor[(10, 3, 6), float32]) */
}

def @func_6605() -> (Tensor[(9, 5, 11), float64],) {
  %148 = @func_3213() /* ty=Tensor[(9, 5, 11), float64] */;
  (%148,)
}

def @func_5170(%var_5162: Tensor[(2640), float32]) -> (Tensor[(9, 5, 11), float32], Tensor[(16, 15, 11), float32], Tensor[(2640), float32], Tensor[(1755), float64], Tensor[(9, 5, 11), float64]) {
  %149 = @func_4675() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %150 = cast(%var_5162, dtype="float32") /* ty=Tensor[(2640), float32] */;
  %151 = cast(meta[relay.Constant][8] /* ty=Tensor[(1755), float64] */, dtype="float64") /* ty=Tensor[(1755), float64] */;
  %152 = reshape(%150, newshape=[16, 15, 11]) /* ty=Tensor[(16, 15, 11), float32] */;
  %153 = reshape(%151, newshape=[1755]) /* ty=Tensor[(1755), float64] */;
  %154 = @func_905(%152, %153) /* ty=(Tensor[(16, 15, 11), float32], Tensor[(980), float32], Tensor[(936), uint64], Tensor[(12, 10, 15), float64], Tensor[(1755), float64]) */;
  %155 = %149.0;
  %156 = cast(%155, dtype="float32") /* ty=Tensor[(9, 5, 11), float32] */;
  %157 = reshape(%156, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), float32] */;
  %158 = @func_4821(%157) /* ty=(Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float64]) */;
  %159 = %154.0;
  %160 = %158.0;
  (%155, %159, %var_5162, meta[relay.Constant][8] /* ty=Tensor[(1755), float64] */, %160)
}

def @func_4009(%var_4001: Tensor[(4, 12, 12), uint8]) -> (Tensor[(4, 12, 12), uint8],) {
  %161 = cast(meta[relay.Constant][9] /* ty=Tensor[(4, 12, 12), uint8] */, dtype="uint8") /* ty=Tensor[(4, 12, 12), uint8] */;
  %162 = shape_of(%var_4001, dtype="int32") /* ty=Tensor[(3), int32] */;
  %163 = cast(%var_4001, dtype="uint8") /* ty=Tensor[(4, 12, 12), uint8] */;
  %164 = dyn.reshape(%161, %162, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %165 = subtract(%163, %164) /* ty=Tensor[(4, 12, 12), uint8] */;
  (%165,)
}

def @func_1909() -> (Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float64]) {
  %173 = fn () -> (Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float64]) {
    %166 = @func_1160() /* ty=Tensor[(9, 5, 11), float32] */;
    %167 = cast(%166, dtype="float64") /* ty=Tensor[(9, 5, 11), float64] */;
    %168 = reshape(%167, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), float64] */;
    %169 = @func_1613(%168) /* ty=(Tensor[(9, 5, 11), int8], Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float32]) */;
    %170 = cast(%166, dtype="float64") /* ty=Tensor[(9, 5, 11), float64] */;
    %171 = %169.1;
    %172 = log2(%170) /* ty=Tensor[(9, 5, 11), float64] */;
    (%171, %172)
  };
  %173() /* ty=(Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float64]) */
}

def @func_2433(%var_2431: Tensor[(7, 130), uint16]) -> (Tensor[(9, 5, 11), float32], Tensor[(10, 13, 7), uint16], Tensor[(7, 130), uint16]) {
  @func_2430(%var_2431) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(10, 13, 7), uint16], Tensor[(7, 130), uint16]) */
}

def @func_6682(%var_6680: float32) -> (Tensor[(13, 1, 8), float32],) {
  @func_6679(%var_6680) /* ty=(Tensor[(13, 1, 8), float32],) */
}

def @func_2848(%var_2843: Tensor[(15, 8, 5), float64], %var_2844: Tensor[(15, 8, 5), float64], %var_2845: Tensor[(208), float32], %var_2846: Tensor[(15, 8, 5), bool], %var_2847: Tensor[(15, 8, 5), float64]) -> (Tensor[(48), uint32], Tensor[(208), float32], Tensor[(15, 8, 5), bool], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(15, 8, 5), int32]) {
  %202 = fn (%var_2763: Tensor[(15, 8, 5), float64], %var_2764: Tensor[(15, 8, 5), float64], %var_2787: Tensor[(208), float32], %var_2789: Tensor[(15, 8, 5), bool], %var_2813: Tensor[(15, 8, 5), float64]) -> (Tensor[(48), uint32], Tensor[(208), float32], Tensor[(15, 8, 5), bool], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(15, 8, 5), int32]) {
    %174 = cast(%var_2787, dtype="float32") /* ty=Tensor[(208), float32] */;
    %175 = reshape(%174, newshape=[4, 4, 13]) /* ty=Tensor[(4, 4, 13), float32] */;
    %176 = @func_2359(%175) /* ty=(Tensor[(4, 4, 13), uint32], Tensor[(4, 4, 13), int64], Tensor[(48), uint32], Tensor[(1755), float64]) */;
    %177 = cast(%var_2764, dtype="bool") /* ty=Tensor[(15, 8, 5), bool] */;
    %178 = shape_of(%var_2763, dtype="int32") /* ty=Tensor[(3), int32] */;
    %179 = cast(%var_2763, dtype="bool") /* ty=Tensor[(15, 8, 5), bool] */;
    %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %181 = not_equal(%179, %180) /* ty=Tensor[(15, 8, 5), bool] */;
    %182 = cast(%var_2789, dtype="bool") /* ty=Tensor[(15, 8, 5), bool] */;
    %183 = shape_of(%181, dtype="int32") /* ty=Tensor[(3), int32] */;
    %184 = cast(%181, dtype="bool") /* ty=Tensor[(15, 8, 5), bool] */;
    %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %186 = cast(%181, dtype="float64") /* ty=Tensor[(15, 8, 5), float64] */;
    %187 = tan(%186) /* ty=Tensor[(15, 8, 5), float64] */;
    %188 = cast(%var_2813, dtype="uint64") /* ty=Tensor[(15, 8, 5), uint64] */;
    %189 = shape_of(%187, dtype="int32") /* ty=Tensor[(3), int32] */;
    %190 = cast(%187, dtype="uint64") /* ty=Tensor[(15, 8, 5), uint64] */;
    %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %192 = minimum(%190, %191) /* ty=Tensor[(15, 8, 5), uint64] */;
    %193 = cast(%192, dtype="int32") /* ty=Tensor[(15, 8, 5), int32] */;
    %194 = shape_of(%187, dtype="int32") /* ty=Tensor[(3), int32] */;
    %195 = cast(%187, dtype="int32") /* ty=Tensor[(15, 8, 5), int32] */;
    %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %197 = %176.2;
    %198 = greater_equal(%184, %185) /* ty=Tensor[(15, 8, 5), bool] */;
    %199 = @func_1160() /* ty=Tensor[(9, 5, 11), float32] */;
    %200 = @func_1160() /* ty=Tensor[(9, 5, 11), float32] */;
    %201 = bitwise_xor(%195, %196) /* ty=Tensor[(15, 8, 5), int32] */;
    (%197, %var_2787, %198, %199, %200, %201)
  };
  %202(%var_2843, %var_2844, %var_2845, %var_2846, %var_2847) /* ty=(Tensor[(48), uint32], Tensor[(208), float32], Tensor[(15, 8, 5), bool], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(15, 8, 5), int32]) */
}

def @func_3802(%var_3800: Tensor[(6, 1, 8), float32], %var_3801: Tensor[(980, 1), float32]) -> (Tensor[(6, 1, 8), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(980, 1), float32], Tensor[(300), int64]) {
  @func_3798(%var_3800, %var_3801) /* ty=(Tensor[(6, 1, 8), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(980, 1), float32], Tensor[(300), int64]) */
}

def @func_4550() -> (Tensor[(9, 5, 11), float32], Tensor[(12, 10, 15), float64], Tensor[(1800), uint16], Tensor[(12, 10, 15), float64]) {
  @func_4548() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(12, 10, 15), float64], Tensor[(1800), uint16], Tensor[(12, 10, 15), float64]) */
}

def @func_4249() -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) {
  %203 = @func_4184() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %204 = @func_1908() /* ty=(Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float64]) */;
  %205 = %204.1;
  %206 = cast(%205, dtype="float32") /* ty=Tensor[(9, 5, 11), float32] */;
  %207 = %203.0;
  %208 = tan(%206) /* ty=Tensor[(9, 5, 11), float32] */;
  (%207, %208)
}

def @func_6344() -> (Tensor[(9, 5, 11), float32],) {
  %211 = fn () -> (Tensor[(9, 5, 11), float32],) {
    %209 = @func_3365() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %210 = %209.0;
    (%210,)
  };
  %211() /* ty=(Tensor[(9, 5, 11), float32],) */
}

def @func_4879() -> Tensor[(9, 5, 11), float32] {
  %212 = @func_4855() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %212.0
}

def @func_3397() -> (Tensor[(9, 5, 11), float32],) {
  %215 = fn () -> (Tensor[(9, 5, 11), float32],) {
    %213 = @func_1694() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %214 = %213.0;
    (%214,)
  };
  %215() /* ty=(Tensor[(9, 5, 11), float32],) */
}

def @func_3437() -> (Tensor[(9, 5, 11), float32],) {
  %218 = fn () -> (Tensor[(9, 5, 11), float32],) {
    %216 = @func_3305() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %217 = %216.0;
    (%217,)
  };
  %218() /* ty=(Tensor[(9, 5, 11), float32],) */
}

def @func_4012(%var_4010: Tensor[(4, 12, 12), uint8]) -> (Tensor[(4, 12, 12), uint8],) {
  @func_4009(%var_4010) /* ty=(Tensor[(4, 12, 12), uint8],) */
}

def @func_4932(%var_4930: Tensor[(10, 12, 12), int64]) -> (Tensor[(10, 12, 12), int64], Tensor[(9, 5, 11), float32]) {
  @func_4929(%var_4930) /* ty=(Tensor[(10, 12, 12), int64], Tensor[(9, 5, 11), float32]) */
}

def @func_2417() -> Tensor[(9, 5, 11), float32] {
  %220 = fn () -> Tensor[(9, 5, 11), float32] {
    %219 = @func_1694() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %219.0
  };
  %220() /* ty=Tensor[(9, 5, 11), float32] */
}

def @func_2630() -> (Tensor[(9, 5, 11), float32],) {
  %223 = fn () -> (Tensor[(9, 5, 11), float32],) {
    %221 = @func_1891() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %222 = %221.0;
    (%222,)
  };
  %223() /* ty=(Tensor[(9, 5, 11), float32],) */
}

def @func_5104() -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), int16]) {
  %230 = fn () -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), int16]) {
    %224 = @func_4675() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %225 = @func_3868() /* ty=(Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) */;
    %226 = @func_3868() /* ty=(Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) */;
    %227 = %224.0;
    %228 = %225.1;
    %229 = %226.0;
    (%227, %228, %229)
  };
  %230() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), int16]) */
}

def @func_1458() -> (Tensor[(9, 5, 11), float32],) {
  %232 = fn () -> (Tensor[(9, 5, 11), float32],) {
    %231 = @func_1160() /* ty=Tensor[(9, 5, 11), float32] */;
    (%231,)
  };
  %232() /* ty=(Tensor[(9, 5, 11), float32],) */
}

def @func_3590() -> (Tensor[(9, 5, 11), float32],) {
  @func_3588() /* ty=(Tensor[(9, 5, 11), float32],) */
}

def @func_6159(%var_6157: Tensor[(12285), float32]) -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(12285), float32]) {
  @func_6156(%var_6157) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(12285), float32]) */
}

def @func_6679(%var_6664: float32) -> (Tensor[(13, 1, 8), float32],) {
  %233 = cast(%var_6664, dtype="float32") /* ty=float32 */;
  %234 = cast(meta[relay.Constant][10] /* ty=Tensor[(13, 1, 8), float32] */, dtype="float32") /* ty=Tensor[(13, 1, 8), float32] */;
  %235 = floor_mod(%233, %234) /* ty=Tensor[(13, 1, 8), float32] */;
  (%235,)
}

def @func_6735() -> Tensor[(9, 5, 11), uint16] {
  %236 = @func_2078() /* ty=(Tensor[(9, 5, 11), uint16],) */;
  %236.0
}

def @func_3031(%var_3028: Tensor[(600), float64], %var_3029: Tensor[(208, 1), float32], %var_3030: Tensor[(936), uint64]) -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(10, 13, 7), uint16], Tensor[(91, 10), uint16], Tensor[(13, 6, 12), uint64], Tensor[(936), uint64], Tensor[(208, 600), bool]) {
  %266 = fn (%var_2990: Tensor[(600), float64], %var_2991: Tensor[(208, 1), float32], %var_3017: Tensor[(936), uint64]) -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(10, 13, 7), uint16], Tensor[(91, 10), uint16], Tensor[(13, 6, 12), uint64], Tensor[(936), uint64], Tensor[(208, 600), bool]) {
    %237 = @func_1694() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %238 = cast(%var_2990, dtype="float64") /* ty=Tensor[(600), float64] */;
    %239 = cast(%var_2990, dtype="float64") /* ty=Tensor[(600), float64] */;
    %240 = cast(%var_2991, dtype="float32") /* ty=Tensor[(208, 1), float32] */;
    %241 = cast(%var_2990, dtype="bool") /* ty=Tensor[(600), bool] */;
    %242 = cast(%var_2990, dtype="float64") /* ty=Tensor[(600), float64] */;
    %243 = reshape(%238, newshape=[15, 8, 5]) /* ty=Tensor[(15, 8, 5), float64] */;
    %244 = reshape(%239, newshape=[15, 8, 5]) /* ty=Tensor[(15, 8, 5), float64] */;
    %245 = reshape(%240, newshape=[208]) /* ty=Tensor[(208), float32] */;
    %246 = reshape(%241, newshape=[15, 8, 5]) /* ty=Tensor[(15, 8, 5), bool] */;
    %247 = reshape(%242, newshape=[15, 8, 5]) /* ty=Tensor[(15, 8, 5), float64] */;
    %248 = @func_2842(%243, %244, %245, %246, %247) /* ty=(Tensor[(48), uint32], Tensor[(208), float32], Tensor[(15, 8, 5), bool], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(15, 8, 5), int32]) */;
    %249 = cast(meta[relay.Constant][11] /* ty=Tensor[(91, 10), uint16] */, dtype="uint16") /* ty=Tensor[(91, 10), uint16] */;
    %250 = reshape(%249, newshape=[7, 130]) /* ty=Tensor[(7, 130), uint16] */;
    %251 = @func_2430(%250) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(10, 13, 7), uint16], Tensor[(7, 130), uint16]) */;
    %252 = cast(%var_3017, dtype="uint64") /* ty=Tensor[(936), uint64] */;
    %253 = cast(%var_3017, dtype="uint64") /* ty=Tensor[(936), uint64] */;
    %254 = reshape(%252, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), uint64] */;
    %255 = reshape(%253, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), uint64] */;
    %256 = @func_696(%254, %255) /* ty=(Tensor[(13, 6, 12), uint64], Tensor[(5, 14, 14), float32], Tensor[(980), float32], Tensor[(13, 6, 12), float32]) */;
    %257 = cast(%var_2990, dtype="float32") /* ty=Tensor[(600), float32] */;
    %258 = sqrt(%257) /* ty=Tensor[(600), float32] */;
    %259 = cast(%258, dtype="bool") /* ty=Tensor[(600), bool] */;
    %260 = cast(%var_2991, dtype="bool") /* ty=Tensor[(208, 1), bool] */;
    %261 = %237.0;
    %262 = %248.4;
    %263 = %251.1;
    %264 = %256.0;
    %265 = logical_and(%259, %260) /* ty=Tensor[(208, 600), bool] */;
    (%261, %262, %263, meta[relay.Constant][11] /* ty=Tensor[(91, 10), uint16] */, %264, %var_3017, %265)
  };
  %266(%var_3028, %var_3029, %var_3030) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(10, 13, 7), uint16], Tensor[(91, 10), uint16], Tensor[(13, 6, 12), uint64], Tensor[(936), uint64], Tensor[(208, 600), bool]) */
}

def @func_1733(%var_1731: Tensor[(2, 10, 15), int64], %var_1732: Tensor[(2, 10, 15), int64]) -> (Tensor[(2, 10, 15), float32], Tensor[(2, 10, 15), uint64], Tensor[(980), float32], Tensor[(1, 1755), float64]) {
  @func_1729(%var_1731, %var_1732) /* ty=(Tensor[(2, 10, 15), float32], Tensor[(2, 10, 15), uint64], Tensor[(980), float32], Tensor[(1, 1755), float64]) */
}

def @func_4856() -> (Tensor[(9, 5, 11), float32],) {
  %269 = fn () -> (Tensor[(9, 5, 11), float32],) {
    %267 = @func_3135() /* ty=(Tensor[(9, 5, 11), uint16], Tensor[(9, 5, 11), float32]) */;
    %268 = %267.1;
    (%268,)
  };
  %269() /* ty=(Tensor[(9, 5, 11), float32],) */
}

def @func_1891() -> (Tensor[(9, 5, 11), float32],) {
  %270 = @func_1367() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %271 = %270.0;
  %272 = cast(%271, dtype="float64") /* ty=Tensor[(9, 5, 11), float64] */;
  %273 = cosh(%272) /* ty=Tensor[(9, 5, 11), float64] */;
  %274 = cast(%273, dtype="float32") /* ty=Tensor[(9, 5, 11), float32] */;
  %275 = log10(%274) /* ty=Tensor[(9, 5, 11), float32] */;
  (%275,)
}

def @func_5278(%var_5277: Tensor[(900), float32]) -> (Tensor[(12, 10, 15), float64], Tensor[(10, 15, 6), bool]) {
  %287 = fn (%var_5253: Tensor[(900), float32]) -> (Tensor[(12, 10, 15), float64], Tensor[(10, 15, 6), bool]) {
    %276 = @func_4548() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(12, 10, 15), float64], Tensor[(1800), uint16], Tensor[(12, 10, 15), float64]) */;
    %277 = cast(%var_5253, dtype="float32") /* ty=Tensor[(900), float32] */;
    %278 = reshape(%277, newshape=[10, 15, 6]) /* ty=Tensor[(10, 15, 6), float32] */;
    %279 = @func_3885(%278) /* ty=(Tensor[(10, 15, 6), float64],) */;
    %280 = %279.0;
    %281 = cast(%var_5253, dtype="bool") /* ty=Tensor[(900), bool] */;
    %282 = shape_of(%280, dtype="int32") /* ty=Tensor[(3), int32] */;
    %283 = cast(%280, dtype="bool") /* ty=Tensor[(10, 15, 6), bool] */;
    %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %285 = %276.1;
    %286 = greater(%283, %284) /* ty=Tensor[(10, 15, 6), bool] */;
    (%285, %286)
  };
  %287(%var_5277) /* ty=(Tensor[(12, 10, 15), float64], Tensor[(10, 15, 6), bool]) */
}

def @func_7372() -> (Tensor[(9, 5, 11), float64],) {
  %288 = @func_3693() /* ty=(Tensor[(9, 5, 11), float64],) */;
  %289 = %288.0;
  (%289,)
}

def @func_5544() -> Tensor[(9, 5, 11), float32] {
  %290 = @func_1530() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) */;
  %290.0
}

def @func_3236() -> Tensor[(9, 5, 11), float32] {
  %291 = @func_1891() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %291.0
}

def @func_2326(%var_2324: Tensor[(9, 5, 11), float32], %var_2325: Tensor[(195, 9), float64]) -> (Tensor[(9, 5, 11), bool], Tensor[(1755), float64], Tensor[(195, 9), float64], Tensor[(12, 10, 15), float64], Tensor[(216), uint8], Tensor[(1800), uint16]) {
  @func_2322(%var_2324, %var_2325) /* ty=(Tensor[(9, 5, 11), bool], Tensor[(1755), float64], Tensor[(195, 9), float64], Tensor[(12, 10, 15), float64], Tensor[(216), uint8], Tensor[(1800), uint16]) */
}

def @func_4623(%var_4621: Tensor[(2640), float32], %var_4622: Tensor[(900), float32]) -> (Tensor[(9, 5, 11), float32], Tensor[(1755), float64], Tensor[(2640), float32], Tensor[(9, 5, 11), float32], Tensor[(10, 15, 6), float64], Tensor[(900), float32], Tensor[(2, 12, 9), uint8], Tensor[(36, 6), uint8]) {
  %313 = fn (%var_4575: Tensor[(2640), float32], %var_4608: Tensor[(900), float32]) -> (Tensor[(9, 5, 11), float32], Tensor[(1755), float64], Tensor[(2640), float32], Tensor[(9, 5, 11), float32], Tensor[(10, 15, 6), float64], Tensor[(900), float32], Tensor[(2, 12, 9), uint8], Tensor[(36, 6), uint8]) {
    %292 = cast(%var_4575, dtype="float32") /* ty=Tensor[(2640), float32] */;
    %293 = reshape(%292, newshape=[2640]) /* ty=Tensor[(2640), float32] */;
    %294 = @func_1858(%293) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(936), uint64], Tensor[(2640), float32], Tensor[(1755), float64]) */;
    %295 = %294.3;
    %296 = cast(%295, dtype="float64") /* ty=Tensor[(1755), float64] */;
    %297 = cast(%var_4575, dtype="float32") /* ty=Tensor[(2640), float32] */;
    %298 = erf(%297) /* ty=Tensor[(2640), float32] */;
    %299 = cast(%298, dtype="float32") /* ty=Tensor[(2640), float32] */;
    %300 = reshape(%299, newshape=[2640]) /* ty=Tensor[(2640), float32] */;
    %301 = @func_1858(%300) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(936), uint64], Tensor[(2640), float32], Tensor[(1755), float64]) */;
    %302 = cast(%var_4608, dtype="float32") /* ty=Tensor[(900), float32] */;
    %303 = reshape(%302, newshape=[10, 15, 6]) /* ty=Tensor[(10, 15, 6), float32] */;
    %304 = @func_3885(%303) /* ty=(Tensor[(10, 15, 6), float64],) */;
    %305 = cast(meta[relay.Constant][12] /* ty=Tensor[(36, 6), uint8] */, dtype="uint8") /* ty=Tensor[(36, 6), uint8] */;
    %306 = reshape(%305, newshape=[2, 12, 9]) /* ty=Tensor[(2, 12, 9), uint8] */;
    %307 = @func_1265(%306) /* ty=(Tensor[(2, 12, 9), uint8],) */;
    %308 = @func_1160() /* ty=Tensor[(9, 5, 11), float32] */;
    %309 = cos(%296) /* ty=Tensor[(1755), float64] */;
    %310 = %301.0;
    %311 = %304.0;
    %312 = %307.0;
    (%308, %309, %298, %310, %311, %var_4608, %312, meta[relay.Constant][12] /* ty=Tensor[(36, 6), uint8] */)
  };
  %313(%var_4621, %var_4622) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(1755), float64], Tensor[(2640), float32], Tensor[(9, 5, 11), float32], Tensor[(10, 15, 6), float64], Tensor[(900), float32], Tensor[(2, 12, 9), uint8], Tensor[(36, 6), uint8]) */
}

def @func_8145() -> Tensor[(9, 5, 11), float64] {
  @func_8143() /* ty=Tensor[(9, 5, 11), float64] */
}

def @func_7072() -> (Tensor[(9, 5, 11), float64],) {
  %316 = fn () -> (Tensor[(9, 5, 11), float64],) {
    %314 = @func_7013() /* ty=(Tensor[(9, 5, 11), float64],) */;
    %315 = %314.0;
    (%315,)
  };
  %316() /* ty=(Tensor[(9, 5, 11), float64],) */
}

def @func_8233() -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(12, 10, 15), float64], Tensor[(900), float32], Tensor[(9, 5, 11), float32]) {
  %317 = @func_6220() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) */;
  %318 = @func_6040() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), uint16]) */;
  %319 = cast(meta[relay.Constant][13] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %320 = reshape(%319, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %321 = @func_5276(%320) /* ty=(Tensor[(12, 10, 15), float64], Tensor[(10, 15, 6), bool]) */;
  %322 = %317.0;
  %323 = %318.0;
  %324 = %321.0;
  %325 = @func_3236() /* ty=Tensor[(9, 5, 11), float32] */;
  (%322, %323, %324, meta[relay.Constant][13] /* ty=Tensor[(900), float32] */, %325)
}

def @func_1828(%var_1825: Tensor[(1755), float64], %var_1826: Tensor[(36, 6), uint8], %var_1827: Tensor[(1800), uint16]) -> (Tensor[(9, 5, 11), float32], Tensor[(216), uint8], Tensor[(5, 14, 14), float32], Tensor[(1755), float64], Tensor[(36, 6), uint32], Tensor[(12, 10, 15), float64], Tensor[(1800), uint16]) {
  %346 = fn (%var_1802: Tensor[(1755), float64], %var_1808: Tensor[(36, 6), uint8], %var_1816: Tensor[(1800), uint16]) -> (Tensor[(9, 5, 11), float32], Tensor[(216), uint8], Tensor[(5, 14, 14), float32], Tensor[(1755), float64], Tensor[(36, 6), uint32], Tensor[(12, 10, 15), float64], Tensor[(1800), uint16]) {
    %326 = @func_1694() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %327 = cast(%var_1802, dtype="float64") /* ty=Tensor[(1755), float64] */;
    %328 = reshape(%327, newshape=[15, 13, 9]) /* ty=Tensor[(15, 13, 9), float64] */;
    %329 = @func_792(%328) /* ty=(Tensor[(15, 13, 9), float64], Tensor[(12, 10, 15), float64], Tensor[(3, 600), uint16], Tensor[(980), float32], Tensor[(48), uint32], Tensor[(5, 14, 14), float32], Tensor[(12, 10, 15), float64]) */;
    %330 = cast(meta[relay.Constant][14] /* ty=Tensor[(216), uint8] */, dtype="uint8") /* ty=Tensor[(216), uint8] */;
    %331 = reshape(%330, newshape=[36, 6]) /* ty=Tensor[(36, 6), uint8] */;
    %332 = @func_1751(%331) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(2, 12, 9), uint8], Tensor[(36, 6), uint8]) */;
    %333 = %332.3;
    %334 = cast(%var_1808, dtype="uint32") /* ty=Tensor[(36, 6), uint32] */;
    %335 = shape_of(%333, dtype="int32") /* ty=Tensor[(2), int32] */;
    %336 = cast(%333, dtype="uint32") /* ty=Tensor[(36, 6), uint32] */;
    %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %338 = cast(%var_1816, dtype="uint16") /* ty=Tensor[(1800), uint16] */;
    %339 = cast(%var_1816, dtype="uint16") /* ty=Tensor[(1800), uint16] */;
    %340 = reshape(%338, newshape=[12, 10, 15]) /* ty=Tensor[(12, 10, 15), uint16] */;
    %341 = reshape(%339, newshape=[12, 10, 15]) /* ty=Tensor[(12, 10, 15), uint16] */;
    %342 = %326.0;
    %343 = %329.5;
    %344 = multiply(%336, %337) /* ty=Tensor[(36, 6), uint32] */;
    %345 = @func_324(%340, %341) /* ty=Tensor[(12, 10, 15), float64] */;
    (%342, meta[relay.Constant][14] /* ty=Tensor[(216), uint8] */, %343, %var_1802, %344, %345, %var_1816)
  };
  %346(%var_1825, %var_1826, %var_1827) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(216), uint8], Tensor[(5, 14, 14), float32], Tensor[(1755), float64], Tensor[(36, 6), uint32], Tensor[(12, 10, 15), float64], Tensor[(1800), uint16]) */
}

def @func_8055() -> (Tensor[(9, 5, 11), float32],) {
  %347 = @func_3396() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %348 = %347.0;
  (%348,)
}

def @func_2395(%var_2394: Tensor[(936), uint64]) -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(980), float32], Tensor[(936), uint64]) {
  %358 = fn (%var_2391: Tensor[(936), uint64]) -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(980), float32], Tensor[(936), uint64]) {
    %349 = @func_1891() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %350 = cast(%var_2391, dtype="uint64") /* ty=Tensor[(936), uint64] */;
    %351 = cast(%var_2391, dtype="uint64") /* ty=Tensor[(936), uint64] */;
    %352 = reshape(%350, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), uint64] */;
    %353 = reshape(%351, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), uint64] */;
    %354 = @func_696(%352, %353) /* ty=(Tensor[(13, 6, 12), uint64], Tensor[(5, 14, 14), float32], Tensor[(980), float32], Tensor[(13, 6, 12), float32]) */;
    %355 = %349.0;
    %356 = @func_1160() /* ty=Tensor[(9, 5, 11), float32] */;
    %357 = %354.2;
    (%355, %356, %357, %var_2391)
  };
  %358(%var_2394) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(980), float32], Tensor[(936), uint64]) */
}

def @func_5562() -> Tensor[(9, 5, 11), float32] {
  @func_5560() /* ty=Tensor[(9, 5, 11), float32] */
}

def @func_6788() -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) {
  @func_6786() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) */
}

def @func_7996() -> (Tensor[(300), float32], Tensor[(9, 5, 11), float32], Tensor[(48), float32], Tensor[(980), float32], Tensor[(9, 5, 11), float32]) {
  %359 = @func_7715() /* ty=Tensor[(300), int64] */;
  %360 = cast(%359, dtype="float32") /* ty=Tensor[(300), float32] */;
  %361 = cast(meta[relay.Constant][15] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %362 = cast(meta[relay.Constant][16] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
  %363 = reshape(%361, newshape=[6, 1, 8]) /* ty=Tensor[(6, 1, 8), float32] */;
  %364 = reshape(%362, newshape=[980, 1]) /* ty=Tensor[(980, 1), float32] */;
  %365 = @func_3798(%363, %364) /* ty=(Tensor[(6, 1, 8), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(980, 1), float32], Tensor[(300), int64]) */;
  %366 = @func_3305() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %367 = acos(%360) /* ty=Tensor[(300), float32] */;
  %368 = %365.1;
  %369 = %366.0;
  (%367, %368, meta[relay.Constant][15] /* ty=Tensor[(48), float32] */, meta[relay.Constant][16] /* ty=Tensor[(980), float32] */, %369)
}

def @func_2208(%var_2158: Tensor[(9, 5, 11), float32], %var_2166: Tensor[(1755), float64]) -> (Tensor[(9, 5, 11), int8], Tensor[(980), float32], Tensor[(2640), float32], Tensor[(1755), float64], Tensor[(9, 5, 11), float32]) {
  %370 = @func_1160() /* ty=Tensor[(9, 5, 11), float32] */;
  %371 = cast(%var_2158, dtype="int8") /* ty=Tensor[(9, 5, 11), int8] */;
  %372 = shape_of(%370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%370, dtype="int8") /* ty=Tensor[(9, 5, 11), int8] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %375 = cast(meta[relay.Constant][17] /* ty=Tensor[(2640), float32] */, dtype="float32") /* ty=Tensor[(2640), float32] */;
  %376 = cast(%var_2166, dtype="float64") /* ty=Tensor[(1755), float64] */;
  %377 = reshape(%375, newshape=[16, 15, 11]) /* ty=Tensor[(16, 15, 11), float32] */;
  %378 = reshape(%376, newshape=[1755]) /* ty=Tensor[(1755), float64] */;
  %379 = @func_905(%377, %378) /* ty=(Tensor[(16, 15, 11), float32], Tensor[(980), float32], Tensor[(936), uint64], Tensor[(12, 10, 15), float64], Tensor[(1755), float64]) */;
  %380 = cast(%370, dtype="float32") /* ty=Tensor[(9, 5, 11), float32] */;
  %381 = subtract(%373, %374) /* ty=Tensor[(9, 5, 11), int8] */;
  %382 = %379.1;
  %383 = asin(%380) /* ty=Tensor[(9, 5, 11), float32] */;
  (%381, %382, meta[relay.Constant][17] /* ty=Tensor[(2640), float32] */, %var_2166, %383)
}

def @func_4981() -> Tensor[(9, 5, 11), float32] {
  %385 = fn () -> Tensor[(9, 5, 11), float32] {
    %384 = @func_3762() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(300), int64]) */;
    %384.0
  };
  %385() /* ty=Tensor[(9, 5, 11), float32] */
}

def @func_3739(%var_3738: Tensor[(10, 11, 5), float64]) -> (Tensor[(10, 11, 5), int32], Tensor[(10, 11, 5), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) {
  %400 = fn (%var_3707: Tensor[(10, 11, 5), float64]) -> (Tensor[(10, 11, 5), int32], Tensor[(10, 11, 5), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) {
    %386 = cast(%var_3707, dtype="float64") /* ty=Tensor[(10, 11, 5), float64] */;
    %387 = exp(%386) /* ty=Tensor[(10, 11, 5), float64] */;
    %388 = cast(%var_3707, dtype="int32") /* ty=Tensor[(10, 11, 5), int32] */;
    %389 = shape_of(%387, dtype="int32") /* ty=Tensor[(3), int32] */;
    %390 = cast(%387, dtype="int32") /* ty=Tensor[(10, 11, 5), int32] */;
    %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %392 = cast(%var_3707, dtype="float64") /* ty=Tensor[(10, 11, 5), float64] */;
    %393 = @func_1201() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %394 = @func_3365() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %395 = bitwise_and(%390, %391) /* ty=Tensor[(10, 11, 5), int32] */;
    %396 = erf(%392) /* ty=Tensor[(10, 11, 5), float64] */;
    %397 = @func_3236() /* ty=Tensor[(9, 5, 11), float32] */;
    %398 = %393.0;
    %399 = %394.0;
    (%395, %396, %397, %398, %399)
  };
  %400(%var_3738) /* ty=(Tensor[(10, 11, 5), int32], Tensor[(10, 11, 5), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) */
}

def @func_8498() -> Tensor[(9, 5, 11), float64] {
  %402 = fn () -> Tensor[(9, 5, 11), float64] {
    %401 = @func_5056() /* ty=(Tensor[(9, 5, 11), float64],) */;
    %401.0
  };
  %402() /* ty=Tensor[(9, 5, 11), float64] */
}

def @func_8384() -> (Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) {
  %403 = @func_6370() /* ty=(Tensor[(9, 5, 11), float64], Tensor[(10, 15, 6), float64], Tensor[(900), float32]) */;
  %404 = @func_4249() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) */;
  %405 = @func_3396() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %406 = @func_2629() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %407 = @func_3588() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %408 = %403.0;
  %409 = %404.0;
  %410 = %405.0;
  %411 = %406.0;
  %412 = %407.0;
  %413 = @func_3526() /* ty=Tensor[(9, 5, 11), float32] */;
  (%408, %409, %410, %411, %412, %413)
}

def @func_7791() -> (Tensor[(9, 5, 11), float32],) {
  %414 = @func_3320() /* ty=Tensor[(9, 5, 11), float32] */;
  (%414,)
}

def @func_6899(%var_6841: Tensor[(9, 10, 13), int16], %var_6842: Tensor[(9, 10, 13), int16], %var_6889: Tensor[(495, 1), float32]) -> (Tensor[(9, 10, 13), bool], Tensor[(9, 10, 13), uint16], Tensor[(9, 5, 11), float64], Tensor[(495, 1), float32], Tensor[(9, 5, 11), float32]) {
  %415 = cast(%var_6842, dtype="bool") /* ty=Tensor[(9, 10, 13), bool] */;
  %416 = shape_of(%var_6841, dtype="int32") /* ty=Tensor[(3), int32] */;
  %417 = cast(%var_6841, dtype="bool") /* ty=Tensor[(9, 10, 13), bool] */;
  %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %419 = equal(%417, %418) /* ty=Tensor[(9, 10, 13), bool] */;
  %420 = cast(%var_6842, dtype="bool") /* ty=Tensor[(9, 10, 13), bool] */;
  %421 = shape_of(%419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(%419, dtype="bool") /* ty=Tensor[(9, 10, 13), bool] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %424 = cast(%419, dtype="uint16") /* ty=Tensor[(9, 10, 13), uint16] */;
  %425 = shape_of(%var_6841, dtype="int32") /* ty=Tensor[(3), int32] */;
  %426 = cast(%var_6841, dtype="uint16") /* ty=Tensor[(9, 10, 13), uint16] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %428 = cast(%var_6889, dtype="float32") /* ty=Tensor[(495, 1), float32] */;
  %429 = reshape(%428, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), float32] */;
  %430 = @func_4855() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %431 = greater(%422, %423) /* ty=Tensor[(9, 10, 13), bool] */;
  %432 = bitwise_and(%426, %427) /* ty=Tensor[(9, 10, 13), uint16] */;
  %433 = @func_3334(%429) /* ty=Tensor[(9, 5, 11), float64] */;
  %434 = %430.0;
  (%431, %432, %433, %var_6889, %434)
}

def @func_7890() -> (Tensor[(9, 5, 11), float32],) {
  %437 = fn () -> (Tensor[(9, 5, 11), float32],) {
    %435 = @func_7613() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %436 = %435.0;
    (%436,)
  };
  %437() /* ty=(Tensor[(9, 5, 11), float32],) */
}

def @func_3321() -> Tensor[(9, 5, 11), float32] {
  %438 = fn () -> Tensor[(9, 5, 11), float32] {
    @func_1963() /* ty=Tensor[(9, 5, 11), float32] */
  };
  %438() /* ty=Tensor[(9, 5, 11), float32] */
}

def @func_8675(%var_8673: Tensor[(8, 8, 1), float64], %var_8674: Tensor[(900), float32]) -> (Tensor[(8, 8, 1), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(36), float64], Tensor[(12, 10, 15), float64], Tensor[(900), float32], Tensor[(9, 5, 11), float32]) {
  @func_8671(%var_8673, %var_8674) /* ty=(Tensor[(8, 8, 1), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(36), float64], Tensor[(12, 10, 15), float64], Tensor[(900), float32], Tensor[(9, 5, 11), float32]) */
}

def @func_1233(%var_1215: Tensor[(9, 5, 11), float32], %var_1226: Tensor[(9, 5, 11), float64]) -> (Tensor[(9, 5, 11), bool], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) {
  %439 = @func_1160() /* ty=Tensor[(9, 5, 11), float32] */;
  %440 = cast(%var_1215, dtype="bool") /* ty=Tensor[(9, 5, 11), bool] */;
  %441 = shape_of(%439, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%439, dtype="bool") /* ty=Tensor[(9, 5, 11), bool] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %444 = cast(%var_1215, dtype="float64") /* ty=Tensor[(9, 5, 11), float64] */;
  %445 = rsqrt(%444) /* ty=Tensor[(9, 5, 11), float64] */;
  %446 = cast(%var_1226, dtype="float32") /* ty=Tensor[(9, 5, 11), float32] */;
  %447 = shape_of(%445, dtype="int32") /* ty=Tensor[(3), int32] */;
  %448 = cast(%445, dtype="float32") /* ty=Tensor[(9, 5, 11), float32] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %450 = cast(%445, dtype="float32") /* ty=Tensor[(9, 5, 11), float32] */;
  %451 = equal(%442, %443) /* ty=Tensor[(9, 5, 11), bool] */;
  %452 = power(%448, %449) /* ty=Tensor[(9, 5, 11), float32] */;
  %453 = sinh(%450) /* ty=Tensor[(9, 5, 11), float32] */;
  (%451, %452, %453)
}

def @func_2696(%var_2694: Tensor[(980, 1), float32], %var_2695: Tensor[(300), int64]) -> (Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(980, 1), float32], Tensor[(2, 10, 15), float32], Tensor[(300), int64], Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64]) {
  %474 = fn (%var_2658: Tensor[(980, 1), float32], %var_2665: Tensor[(300), int64]) -> (Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(980, 1), float32], Tensor[(2, 10, 15), float32], Tensor[(300), int64], Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64]) {
    %454 = @func_1694() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %455 = cast(%var_2658, dtype="float32") /* ty=Tensor[(980, 1), float32] */;
    %456 = reshape(%455, newshape=[5, 14, 14]) /* ty=Tensor[(5, 14, 14), float32] */;
    %457 = @func_40(%456) /* ty=(Tensor[(5, 14, 14), float32],) */;
    %458 = cast(%var_2665, dtype="int64") /* ty=Tensor[(300), int64] */;
    %459 = cast(%var_2665, dtype="int64") /* ty=Tensor[(300), int64] */;
    %460 = reshape(%458, newshape=[2, 10, 15]) /* ty=Tensor[(2, 10, 15), int64] */;
    %461 = reshape(%459, newshape=[2, 10, 15]) /* ty=Tensor[(2, 10, 15), int64] */;
    %462 = @func_1729(%460, %461) /* ty=(Tensor[(2, 10, 15), float32], Tensor[(2, 10, 15), uint64], Tensor[(980), float32], Tensor[(1, 1755), float64]) */;
    %463 = @func_1457() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %464 = %462.0;
    %465 = cast(%464, dtype="int64") /* ty=Tensor[(2, 10, 15), int64] */;
    %466 = cast(%464, dtype="int64") /* ty=Tensor[(2, 10, 15), int64] */;
    %467 = reshape(%465, newshape=[2, 10, 15]) /* ty=Tensor[(2, 10, 15), int64] */;
    %468 = reshape(%466, newshape=[2, 10, 15]) /* ty=Tensor[(2, 10, 15), int64] */;
    %469 = @func_1729(%467, %468) /* ty=(Tensor[(2, 10, 15), float32], Tensor[(2, 10, 15), uint64], Tensor[(980), float32], Tensor[(1, 1755), float64]) */;
    %470 = %454.0;
    %471 = %457.0;
    %472 = %463.0;
    %473 = %469.3;
    (%470, %471, %var_2658, %464, %var_2665, %472, %473)
  };
  %474(%var_2694, %var_2695) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(980, 1), float32], Tensor[(2, 10, 15), float32], Tensor[(300), int64], Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64]) */
}

def @func_3365() -> (Tensor[(9, 5, 11), float32],) {
  %475 = @func_1694() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %476 = %475.0;
  (%476,)
}

def @func_3588() -> (Tensor[(9, 5, 11), float32],) {
  %477 = @func_3142() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %478 = %477.0;
  (%478,)
}

def @func_2928(%var_2883: Tensor[(9, 5, 11), float32]) -> (Tensor[(9, 5, 11), uint32], Tensor[(9, 5, 11), uint8], Tensor[(9, 5, 11), bool]) {
  %479 = @func_2258() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %480 = %479.0;
  %481 = cast(%var_2883, dtype="uint32") /* ty=Tensor[(9, 5, 11), uint32] */;
  %482 = shape_of(%480, dtype="int32") /* ty=Tensor[(3), int32] */;
  %483 = cast(%480, dtype="uint32") /* ty=Tensor[(9, 5, 11), uint32] */;
  %484 = dyn.reshape(%481, %482, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %485 = cast(%480, dtype="uint8") /* ty=Tensor[(9, 5, 11), uint8] */;
  %486 = shape_of(%var_2883, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(%var_2883, dtype="uint8") /* ty=Tensor[(9, 5, 11), uint8] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %489 = cast(%480, dtype="float32") /* ty=Tensor[(9, 5, 11), float32] */;
  %490 = exp(%489) /* ty=Tensor[(9, 5, 11), float32] */;
  %491 = @func_1201() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %492 = %491.0;
  %493 = cast(%492, dtype="bool") /* ty=Tensor[(9, 5, 11), bool] */;
  %494 = shape_of(%490, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(%490, dtype="bool") /* ty=Tensor[(9, 5, 11), bool] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %497 = bitwise_xor(%483, %484) /* ty=Tensor[(9, 5, 11), uint32] */;
  %498 = bitwise_and(%487, %488) /* ty=Tensor[(9, 5, 11), uint8] */;
  %499 = not_equal(%495, %496) /* ty=Tensor[(9, 5, 11), bool] */;
  (%497, %498, %499)
}

def @func_3337(%var_3335: Tensor[(9, 5, 11), float32]) -> Tensor[(9, 5, 11), float64] {
  @func_3334(%var_3335) /* ty=Tensor[(9, 5, 11), float64] */
}

def @func_8671(%var_8632: Tensor[(8, 8, 1), float64], %var_8659: Tensor[(900), float32]) -> (Tensor[(8, 8, 1), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(36), float64], Tensor[(12, 10, 15), float64], Tensor[(900), float32], Tensor[(9, 5, 11), float32]) {
  %500 = cast(%var_8632, dtype="float64") /* ty=Tensor[(8, 8, 1), float64] */;
  %501 = @func_6786() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) */;
  %502 = cast(meta[relay.Constant][18] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %503 = reshape(%502, newshape=[36, 1]) /* ty=Tensor[(36, 1), float64] */;
  %504 = @func_6428(%503) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(4, 9, 1), float64], Tensor[(36, 1), float64]) */;
  %505 = cast(%var_8659, dtype="float32") /* ty=Tensor[(900), float32] */;
  %506 = reshape(%505, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %507 = @func_8038(%506) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(12, 10, 15), float64], Tensor[(900), float32], Tensor[(9, 5, 11), float32]) */;
  %508 = @func_1457() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %509 = tan(%500) /* ty=Tensor[(8, 8, 1), float64] */;
  %510 = %501.1;
  %511 = %504.1;
  %512 = %507.1;
  %513 = %508.0;
  (%509, %510, %511, meta[relay.Constant][18] /* ty=Tensor[(36), float64] */, %512, %var_8659, %513)
}

def @func_3527() -> Tensor[(9, 5, 11), float32] {
  %515 = fn () -> Tensor[(9, 5, 11), float32] {
    %514 = @func_1201() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %514.0
  };
  %515() /* ty=Tensor[(9, 5, 11), float32] */
}

def @func_5417(%var_5397: Tensor[(900, 1), float32]) -> (Tensor[(9, 5, 11), float32], Tensor[(10, 15, 6), float64], Tensor[(900, 1), float32]) {
  %516 = @func_1367() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %517 = cast(%var_5397, dtype="float32") /* ty=Tensor[(900, 1), float32] */;
  %518 = reshape(%517, newshape=[10, 15, 6]) /* ty=Tensor[(10, 15, 6), float32] */;
  %519 = @func_3885(%518) /* ty=(Tensor[(10, 15, 6), float64],) */;
  %520 = cast(%var_5397, dtype="float32") /* ty=Tensor[(900, 1), float32] */;
  %521 = tan(%520) /* ty=Tensor[(900, 1), float32] */;
  %522 = cast(%521, dtype="float32") /* ty=Tensor[(900, 1), float32] */;
  %523 = %516.0;
  %524 = %519.0;
  %525 = atanh(%522) /* ty=Tensor[(900, 1), float32] */;
  (%523, %524, %525)
}

def @func_3693() -> (Tensor[(9, 5, 11), float64],) {
  %526 = @func_3213() /* ty=Tensor[(9, 5, 11), float64] */;
  (%526,)
}

def @func_1201() -> (Tensor[(9, 5, 11), float32],) {
  %527 = @func_1160() /* ty=Tensor[(9, 5, 11), float32] */;
  (%527,)
}

def @func_3294(%var_3293: Tensor[(300), int64]) -> (Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(300), int64]) {
  %536 = fn (%var_3271: Tensor[(300), int64]) -> (Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(300), int64]) {
    %528 = @func_2629() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %529 = cast(%var_3271, dtype="int64") /* ty=Tensor[(300), int64] */;
    %530 = cast(%var_3271, dtype="int64") /* ty=Tensor[(300), int64] */;
    %531 = reshape(%529, newshape=[2, 10, 15]) /* ty=Tensor[(2, 10, 15), int64] */;
    %532 = reshape(%530, newshape=[2, 10, 15]) /* ty=Tensor[(2, 10, 15), int64] */;
    %533 = @func_1729(%531, %532) /* ty=(Tensor[(2, 10, 15), float32], Tensor[(2, 10, 15), uint64], Tensor[(980), float32], Tensor[(1, 1755), float64]) */;
    %534 = %528.0;
    %535 = %533.3;
    (%534, %535, %var_3271)
  };
  %536(%var_3293) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(300), int64]) */
}

def @func_4036() -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) {
  %537 = @func_3762() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(300), int64]) */;
  %538 = @func_1963() /* ty=Tensor[(9, 5, 11), float32] */;
  %539 = %537.0;
  (%538, %539)
}

def @func_4145() -> (Tensor[(1, 1755), float64],) {
  @func_4143() /* ty=(Tensor[(1, 1755), float64],) */
}

def @func_6220() -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) {
  %540 = @func_4184() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %541 = @func_4143() /* ty=(Tensor[(1, 1755), float64],) */;
  %542 = @func_1530() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) */;
  %543 = %540.0;
  %544 = @func_5475() /* ty=Tensor[(9, 5, 11), float32] */;
  %545 = %541.0;
  %546 = @func_3236() /* ty=Tensor[(9, 5, 11), float32] */;
  %547 = %542.1;
  (%543, %544, %545, %546, %547)
}

def @func_1965() -> Tensor[(9, 5, 11), float32] {
  @func_1963() /* ty=Tensor[(9, 5, 11), float32] */
}

def @func_8836() -> (Tensor[(9, 5, 11), float32],) {
  %548 = @func_8384() /* ty=(Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) */;
  %549 = %548.2;
  (%549,)
}

def @func_7013() -> (Tensor[(9, 5, 11), float64],) {
  %550 = @func_5056() /* ty=(Tensor[(9, 5, 11), float64],) */;
  %551 = %550.0;
  (%551,)
}

def @func_8143() -> Tensor[(9, 5, 11), float64] {
  @func_7277() /* ty=Tensor[(9, 5, 11), float64] */
}

def @func_2000() -> Tensor[(9, 5, 11), float32] {
  %552 = fn () -> Tensor[(9, 5, 11), float32] {
    @func_1963() /* ty=Tensor[(9, 5, 11), float32] */
  };
  %552() /* ty=Tensor[(9, 5, 11), float32] */
}

def @func_1861(%var_1859: Tensor[(2640), float32]) -> (Tensor[(9, 5, 11), float32], Tensor[(936), uint64], Tensor[(2640), float32], Tensor[(1755), float64]) {
  @func_1858(%var_1859) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(936), uint64], Tensor[(2640), float32], Tensor[(1755), float64]) */
}

def @func_2430(%var_2428: Tensor[(7, 130), uint16]) -> (Tensor[(9, 5, 11), float32], Tensor[(10, 13, 7), uint16], Tensor[(7, 130), uint16]) {
  %553 = @func_1891() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %554 = cast(%var_2428, dtype="uint16") /* ty=Tensor[(7, 130), uint16] */;
  %555 = reshape(%554, newshape=[10, 13, 7]) /* ty=Tensor[(10, 13, 7), uint16] */;
  %556 = @func_101(%555) /* ty=(Tensor[(10, 13, 7), uint16], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) */;
  %557 = %553.0;
  %558 = %556.0;
  (%557, %558, %var_2428)
}

def @func_5420(%var_5418: Tensor[(900, 1), float32]) -> (Tensor[(9, 5, 11), float32], Tensor[(10, 15, 6), float64], Tensor[(900, 1), float32]) {
  @func_5417(%var_5418) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(10, 15, 6), float64], Tensor[(900, 1), float32]) */
}

def @func_8038(%var_8018: Tensor[(900), float32]) -> (Tensor[(9, 5, 11), float32], Tensor[(12, 10, 15), float64], Tensor[(900), float32], Tensor[(9, 5, 11), float32]) {
  %559 = @func_3588() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %560 = cast(%var_8018, dtype="float32") /* ty=Tensor[(900), float32] */;
  %561 = reshape(%560, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %562 = @func_5276(%561) /* ty=(Tensor[(12, 10, 15), float64], Tensor[(10, 15, 6), bool]) */;
  %563 = @func_3868() /* ty=(Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) */;
  %564 = %559.0;
  %565 = %562.0;
  %566 = %563.2;
  (%564, %565, %var_8018, %566)
}

def @func_3762() -> (Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(300), int64]) {
  %567 = @func_1201() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %568 = cast(meta[relay.Constant][19] /* ty=Tensor[(300), int64] */, dtype="int64") /* ty=Tensor[(300), int64] */;
  %569 = reshape(%568, newshape=[300]) /* ty=Tensor[(300), int64] */;
  %570 = @func_3292(%569) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(300), int64]) */;
  %571 = %567.0;
  %572 = %570.1;
  (%571, %572, meta[relay.Constant][19] /* ty=Tensor[(300), int64] */)
}

def @func_2361(%var_2360: Tensor[(4, 4, 13), float32]) -> (Tensor[(4, 4, 13), uint32], Tensor[(4, 4, 13), int64], Tensor[(48), uint32], Tensor[(1755), float64]) {
  %594 = fn (%var_2331: Tensor[(4, 4, 13), float32]) -> (Tensor[(4, 4, 13), uint32], Tensor[(4, 4, 13), int64], Tensor[(48), uint32], Tensor[(1755), float64]) {
    %573 = cast(%var_2331, dtype="float32") /* ty=Tensor[(4, 4, 13), float32] */;
    %574 = cos(%573) /* ty=Tensor[(4, 4, 13), float32] */;
    %575 = cast(meta[relay.Constant][20] /* ty=Tensor[(4, 4, 13), float32] */, dtype="uint32") /* ty=Tensor[(4, 4, 13), uint32] */;
    %576 = shape_of(%574, dtype="int32") /* ty=Tensor[(3), int32] */;
    %577 = cast(%574, dtype="uint32") /* ty=Tensor[(4, 4, 13), uint32] */;
    %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %579 = cast(meta[relay.Constant][20] /* ty=Tensor[(4, 4, 13), float32] */, dtype="float64") /* ty=Tensor[(4, 4, 13), float64] */;
    %580 = shape_of(%574, dtype="int32") /* ty=Tensor[(3), int32] */;
    %581 = cast(%574, dtype="float64") /* ty=Tensor[(4, 4, 13), float64] */;
    %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %583 = subtract(%581, %582) /* ty=Tensor[(4, 4, 13), float64] */;
    %584 = cast(%583, dtype="int64") /* ty=Tensor[(4, 4, 13), int64] */;
    %585 = shape_of(%var_2331, dtype="int32") /* ty=Tensor[(3), int32] */;
    %586 = cast(%var_2331, dtype="int64") /* ty=Tensor[(4, 4, 13), int64] */;
    %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %588 = cast(meta[relay.Constant][21] /* ty=Tensor[(1755), float64] */, dtype="float64") /* ty=Tensor[(1755), float64] */;
    %589 = reshape(%588, newshape=[15, 13, 9]) /* ty=Tensor[(15, 13, 9), float64] */;
    %590 = @func_792(%589) /* ty=(Tensor[(15, 13, 9), float64], Tensor[(12, 10, 15), float64], Tensor[(3, 600), uint16], Tensor[(980), float32], Tensor[(48), uint32], Tensor[(5, 14, 14), float32], Tensor[(12, 10, 15), float64]) */;
    %591 = logical_xor(%577, %578) /* ty=Tensor[(4, 4, 13), uint32] */;
    %592 = bitwise_and(%586, %587) /* ty=Tensor[(4, 4, 13), int64] */;
    %593 = %590.4;
    (%591, %592, %593, meta[relay.Constant][21] /* ty=Tensor[(1755), float64] */)
  };
  %594(%var_2360) /* ty=(Tensor[(4, 4, 13), uint32], Tensor[(4, 4, 13), int64], Tensor[(48), uint32], Tensor[(1755), float64]) */
}

def @func_6559() -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(10, 12, 12), int64], Tensor[(180, 8), int64], Tensor[(9, 5, 11), float64]) {
  @func_6557() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(10, 12, 12), int64], Tensor[(180, 8), int64], Tensor[(9, 5, 11), float64]) */
}

def @func_2322(%var_2267: Tensor[(9, 5, 11), float32], %var_2284: Tensor[(195, 9), float64]) -> (Tensor[(9, 5, 11), bool], Tensor[(1755), float64], Tensor[(195, 9), float64], Tensor[(12, 10, 15), float64], Tensor[(216), uint8], Tensor[(1800), uint16]) {
  %595 = @func_1963() /* ty=Tensor[(9, 5, 11), float32] */;
  %596 = cast(%var_2267, dtype="bool") /* ty=Tensor[(9, 5, 11), bool] */;
  %597 = shape_of(%595, dtype="int32") /* ty=Tensor[(3), int32] */;
  %598 = cast(%595, dtype="bool") /* ty=Tensor[(9, 5, 11), bool] */;
  %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %600 = logical_and(%598, %599) /* ty=Tensor[(9, 5, 11), bool] */;
  %601 = cast(%var_2267, dtype="bool") /* ty=Tensor[(9, 5, 11), bool] */;
  %602 = shape_of(%600, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%600, dtype="bool") /* ty=Tensor[(9, 5, 11), bool] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %605 = cast(%var_2267, dtype="float32") /* ty=Tensor[(9, 5, 11), float32] */;
  %606 = cast(%var_2284, dtype="float64") /* ty=Tensor[(195, 9), float64] */;
  %607 = reshape(%605, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), float32] */;
  %608 = reshape(%606, newshape=[1755]) /* ty=Tensor[(1755), float64] */;
  %609 = @func_2208(%607, %608) /* ty=(Tensor[(9, 5, 11), int8], Tensor[(980), float32], Tensor[(2640), float32], Tensor[(1755), float64], Tensor[(9, 5, 11), float32]) */;
  %610 = %609.3;
  %611 = cast(%610, dtype="float64") /* ty=Tensor[(1755), float64] */;
  %612 = cast(meta[relay.Constant][22] /* ty=Tensor[(216), uint8] */, dtype="uint8") /* ty=Tensor[(216), uint8] */;
  %613 = cast(meta[relay.Constant][23] /* ty=Tensor[(1800), uint16] */, dtype="uint16") /* ty=Tensor[(1800), uint16] */;
  %614 = reshape(%611, newshape=[1755]) /* ty=Tensor[(1755), float64] */;
  %615 = reshape(%612, newshape=[36, 6]) /* ty=Tensor[(36, 6), uint8] */;
  %616 = reshape(%613, newshape=[1800]) /* ty=Tensor[(1800), uint16] */;
  %617 = @func_1824(%614, %615, %616) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(216), uint8], Tensor[(5, 14, 14), float32], Tensor[(1755), float64], Tensor[(36, 6), uint32], Tensor[(12, 10, 15), float64], Tensor[(1800), uint16]) */;
  %618 = greater_equal(%603, %604) /* ty=Tensor[(9, 5, 11), bool] */;
  %619 = %617.5;
  (%618, %610, %var_2284, %619, meta[relay.Constant][22] /* ty=Tensor[(216), uint8] */, meta[relay.Constant][23] /* ty=Tensor[(1800), uint16] */)
}

def @func_8895() -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float64], Tensor[(384, 2), float32]) {
  %628 = fn () -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float64], Tensor[(384, 2), float32]) {
    %620 = @func_6343() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %621 = @func_3135() /* ty=(Tensor[(9, 5, 11), uint16], Tensor[(9, 5, 11), float32]) */;
    %622 = cast(meta[relay.Constant][24] /* ty=Tensor[(384, 2), float32] */, dtype="float32") /* ty=Tensor[(384, 2), float32] */;
    %623 = reshape(%622, newshape=[16, 6, 8]) /* ty=Tensor[(16, 6, 8), float32] */;
    %624 = @func_3636(%623) /* ty=(Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32], Tensor[(16, 6, 8), float64]) */;
    %625 = %620.0;
    %626 = %621.1;
    %627 = %624.0;
    (%625, %626, %627, meta[relay.Constant][24] /* ty=Tensor[(384, 2), float32] */)
  };
  %628() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float64], Tensor[(384, 2), float32]) */
}

def @func_5057() -> (Tensor[(9, 5, 11), float64],) {
  %630 = fn () -> (Tensor[(9, 5, 11), float64],) {
    %629 = @func_3213() /* ty=Tensor[(9, 5, 11), float64] */;
    (%629,)
  };
  %630() /* ty=(Tensor[(9, 5, 11), float64],) */
}

def @func_2078() -> (Tensor[(9, 5, 11), uint16],) {
  %631 = @func_1999() /* ty=Tensor[(9, 5, 11), float32] */;
  %632 = cast(%631, dtype="float64") /* ty=Tensor[(9, 5, 11), float64] */;
  %633 = reshape(%632, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), float64] */;
  %634 = @func_1613(%633) /* ty=(Tensor[(9, 5, 11), int8], Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float32]) */;
  %635 = %634.0;
  %636 = cast(%635, dtype="bool") /* ty=Tensor[(9, 5, 11), bool] */;
  %637 = shape_of(%631, dtype="int32") /* ty=Tensor[(3), int32] */;
  %638 = cast(%631, dtype="bool") /* ty=Tensor[(9, 5, 11), bool] */;
  %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %640 = less_equal(%638, %639) /* ty=Tensor[(9, 5, 11), bool] */;
  %641 = cast(%640, dtype="uint16") /* ty=Tensor[(9, 5, 11), uint16] */;
  %642 = shape_of(%631, dtype="int32") /* ty=Tensor[(3), int32] */;
  %643 = cast(%631, dtype="uint16") /* ty=Tensor[(9, 5, 11), uint16] */;
  %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %645 = bitwise_or(%643, %644) /* ty=Tensor[(9, 5, 11), uint16] */;
  (%645,)
}

def @func_7693(%var_7686: Tensor[(24, 2), float32]) -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(24, 2), float32], Tensor[(980), float32]) {
  %646 = @func_2629() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %647 = cast(%var_7686, dtype="float32") /* ty=Tensor[(24, 2), float32] */;
  %648 = cast(meta[relay.Constant][25] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
  %649 = reshape(%647, newshape=[6, 1, 8]) /* ty=Tensor[(6, 1, 8), float32] */;
  %650 = reshape(%648, newshape=[980, 1]) /* ty=Tensor[(980, 1), float32] */;
  %651 = @func_3798(%649, %650) /* ty=(Tensor[(6, 1, 8), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(980, 1), float32], Tensor[(300), int64]) */;
  %652 = %646.0;
  %653 = %651.2;
  (%652, %653, %var_7686, meta[relay.Constant][25] /* ty=Tensor[(980), float32] */)
}

def @func_7586(%var_7584: Tensor[(12285, 1), float32], %var_7585: Tensor[(36), float64]) -> (Tensor[(9, 5, 11), uint16], Tensor[(9, 5, 11), float32], Tensor[(12285, 1), float32], Tensor[(4, 9, 1), float64], Tensor[(36), float64]) {
  %664 = fn (%var_7574: Tensor[(12285, 1), float32], %var_7581: Tensor[(36), float64]) -> (Tensor[(9, 5, 11), uint16], Tensor[(9, 5, 11), float32], Tensor[(12285, 1), float32], Tensor[(4, 9, 1), float64], Tensor[(36), float64]) {
    %654 = @func_3135() /* ty=(Tensor[(9, 5, 11), uint16], Tensor[(9, 5, 11), float32]) */;
    %655 = cast(%var_7574, dtype="float32") /* ty=Tensor[(12285, 1), float32] */;
    %656 = reshape(%655, newshape=[12285]) /* ty=Tensor[(12285), float32] */;
    %657 = @func_6156(%656) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(12285), float32]) */;
    %658 = cast(%var_7581, dtype="float64") /* ty=Tensor[(36), float64] */;
    %659 = reshape(%658, newshape=[4, 9, 1]) /* ty=Tensor[(4, 9, 1), float64] */;
    %660 = @func_3251(%659) /* ty=(Tensor[(4, 9, 1), float64], Tensor[(4, 9, 1), float64]) */;
    %661 = %654.0;
    %662 = %657.0;
    %663 = %660.0;
    (%661, %662, %var_7574, %663, %var_7581)
  };
  %664(%var_7584, %var_7585) /* ty=(Tensor[(9, 5, 11), uint16], Tensor[(9, 5, 11), float32], Tensor[(12285, 1), float32], Tensor[(4, 9, 1), float64], Tensor[(36), float64]) */
}

def @func_3887(%var_3886: Tensor[(10, 15, 6), float32]) -> (Tensor[(10, 15, 6), float64],) {
  %672 = fn (%var_3873: Tensor[(10, 15, 6), float32]) -> (Tensor[(10, 15, 6), float64],) {
    %665 = cast(%var_3873, dtype="float32") /* ty=Tensor[(10, 15, 6), float32] */;
    %666 = erf(%665) /* ty=Tensor[(10, 15, 6), float32] */;
    %667 = cast(%666, dtype="float64") /* ty=Tensor[(10, 15, 6), float64] */;
    %668 = shape_of(%var_3873, dtype="int32") /* ty=Tensor[(3), int32] */;
    %669 = cast(%var_3873, dtype="float64") /* ty=Tensor[(10, 15, 6), float64] */;
    %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %671 = power(%669, %670) /* ty=Tensor[(10, 15, 6), float64] */;
    (%671,)
  };
  %672(%var_3886) /* ty=(Tensor[(10, 15, 6), float64],) */
}

def @func_8258() -> (Tensor[(9, 5, 11), uint16], Tensor[(2, 12, 9), uint8], Tensor[(216), uint8], Tensor[(9, 5, 11), float32]) {
  %673 = cast(meta[relay.Constant][26] /* ty=Tensor[(216), uint8] */, dtype="uint8") /* ty=Tensor[(216), uint8] */;
  %674 = reshape(%673, newshape=[2, 12, 9]) /* ty=Tensor[(2, 12, 9), uint8] */;
  %675 = @func_1265(%674) /* ty=(Tensor[(2, 12, 9), uint8],) */;
  %676 = @func_3365() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %677 = @func_6735() /* ty=Tensor[(9, 5, 11), uint16] */;
  %678 = %675.0;
  %679 = %676.0;
  (%677, %678, meta[relay.Constant][26] /* ty=Tensor[(216), uint8] */, %679)
}

def @func_6370() -> (Tensor[(9, 5, 11), float64], Tensor[(10, 15, 6), float64], Tensor[(900), float32]) {
  %680 = cast(meta[relay.Constant][27] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %681 = reshape(%680, newshape=[10, 15, 6]) /* ty=Tensor[(10, 15, 6), float32] */;
  %682 = @func_3885(%681) /* ty=(Tensor[(10, 15, 6), float64],) */;
  %683 = @func_3213() /* ty=Tensor[(9, 5, 11), float64] */;
  %684 = %682.0;
  (%683, %684, meta[relay.Constant][27] /* ty=Tensor[(900), float32] */)
}

def @func_3137() -> (Tensor[(9, 5, 11), uint16], Tensor[(9, 5, 11), float32]) {
  @func_3135() /* ty=(Tensor[(9, 5, 11), uint16], Tensor[(9, 5, 11), float32]) */
}

def @func_7613() -> (Tensor[(9, 5, 11), float32],) {
  %685 = @func_5802() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(10, 11, 5), float64], Tensor[(550), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(936), uint64], Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32]) */;
  %686 = %685.4;
  (%686,)
}

def @func_3215() -> Tensor[(9, 5, 11), float64] {
  @func_3213() /* ty=Tensor[(9, 5, 11), float64] */
}

def @func_7250(%var_7248: Tensor[(4, 660), float32], %var_7249: Tensor[(1755), float64]) -> (Tensor[(9, 5, 11), float32], Tensor[(4, 660), float32], Tensor[(9, 5, 11), float64], Tensor[(1755), uint8]) {
  %699 = fn (%var_7209: Tensor[(4, 660), float32], %var_7240: Tensor[(1755), float64]) -> (Tensor[(9, 5, 11), float32], Tensor[(4, 660), float32], Tensor[(9, 5, 11), float64], Tensor[(1755), uint8]) {
    %687 = @func_5056() /* ty=(Tensor[(9, 5, 11), float64],) */;
    %688 = cast(%var_7209, dtype="float32") /* ty=Tensor[(4, 660), float32] */;
    %689 = reshape(%688, newshape=[2640]) /* ty=Tensor[(2640), float32] */;
    %690 = @func_1858(%689) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(936), uint64], Tensor[(2640), float32], Tensor[(1755), float64]) */;
    %691 = %690.3;
    %692 = cast(%var_7240, dtype="uint8") /* ty=Tensor[(1755), uint8] */;
    %693 = shape_of(%691, dtype="int32") /* ty=Tensor[(1), int32] */;
    %694 = cast(%691, dtype="uint8") /* ty=Tensor[(1755), uint8] */;
    %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %696 = @func_4879() /* ty=Tensor[(9, 5, 11), float32] */;
    %697 = %687.0;
    %698 = maximum(%694, %695) /* ty=Tensor[(1755), uint8] */;
    (%696, %var_7209, %697, %698)
  };
  %699(%var_7248, %var_7249) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(4, 660), float32], Tensor[(9, 5, 11), float64], Tensor[(1755), uint8]) */
}

def @func_7277() -> Tensor[(9, 5, 11), float64] {
  %700 = @func_7071() /* ty=(Tensor[(9, 5, 11), float64],) */;
  %700.0
}

def @func_6557() -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(10, 12, 12), int64], Tensor[(180, 8), int64], Tensor[(9, 5, 11), float64]) {
  %701 = @func_2258() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %702 = %701.0;
  %703 = cast(%702, dtype="float32") /* ty=Tensor[(9, 5, 11), float32] */;
  %704 = cast(%702, dtype="float64") /* ty=Tensor[(9, 5, 11), float64] */;
  %705 = reshape(%703, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), float32] */;
  %706 = reshape(%704, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), float64] */;
  %707 = @func_1233(%705, %706) /* ty=(Tensor[(9, 5, 11), bool], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) */;
  %708 = cast(meta[relay.Constant][28] /* ty=Tensor[(180, 8), int64] */, dtype="int64") /* ty=Tensor[(180, 8), int64] */;
  %709 = reshape(%708, newshape=[10, 12, 12]) /* ty=Tensor[(10, 12, 12), int64] */;
  %710 = @func_4929(%709) /* ty=(Tensor[(10, 12, 12), int64], Tensor[(9, 5, 11), float32]) */;
  %711 = @func_5056() /* ty=(Tensor[(9, 5, 11), float64],) */;
  %712 = %707.2;
  %713 = %710.0;
  %714 = %711.0;
  (%702, %712, %713, meta[relay.Constant][28] /* ty=Tensor[(180, 8), int64] */, %714)
}

def @func_6904(%var_6901: Tensor[(9, 10, 13), int16], %var_6902: Tensor[(9, 10, 13), int16], %var_6903: Tensor[(495, 1), float32]) -> (Tensor[(9, 10, 13), bool], Tensor[(9, 10, 13), uint16], Tensor[(9, 5, 11), float64], Tensor[(495, 1), float32], Tensor[(9, 5, 11), float32]) {
  @func_6899(%var_6901, %var_6902, %var_6903) /* ty=(Tensor[(9, 10, 13), bool], Tensor[(9, 10, 13), uint16], Tensor[(9, 5, 11), float64], Tensor[(495, 1), float32], Tensor[(9, 5, 11), float32]) */
}

def @func_749(%var_726: Tensor[(12, 4, 1), uint32]) -> (Tensor[(12, 4, 11), uint32], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) {
  %715 = cast(%var_726, dtype="uint32") /* ty=Tensor[(12, 4, 1), uint32] */;
  %716 = cast(meta[relay.Constant][29] /* ty=Tensor[(12, 4, 11), uint32] */, dtype="uint32") /* ty=Tensor[(12, 4, 11), uint32] */;
  %717 = cast(meta[relay.Constant][30] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
  %718 = reshape(%717, newshape=[5, 14, 14]) /* ty=Tensor[(5, 14, 14), float32] */;
  %719 = @func_40(%718) /* ty=(Tensor[(5, 14, 14), float32],) */;
  %720 = subtract(%715, %716) /* ty=Tensor[(12, 4, 11), uint32] */;
  %721 = %719.0;
  (%720, %721, meta[relay.Constant][30] /* ty=Tensor[(980), float32] */)
}

def @func_4929(%var_4910: Tensor[(10, 12, 12), int64]) -> (Tensor[(10, 12, 12), int64], Tensor[(9, 5, 11), float32]) {
  %722 = cast(%var_4910, dtype="int64") /* ty=Tensor[(10, 12, 12), int64] */;
  %723 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(10, 12, 12), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %724 = cast(meta[relay.Constant][31] /* ty=Tensor[(10, 12, 12), int64] */, dtype="int64") /* ty=Tensor[(10, 12, 12), int64] */;
  %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %726 = left_shift(%724, %725) /* ty=Tensor[(10, 12, 12), int64] */;
  %727 = @func_1160() /* ty=Tensor[(9, 5, 11), float32] */;
  (%726, %727)
}

def @func_8959(%var_8957: Tensor[(900), float32]) -> (Tensor[(900), uint8],) {
  @func_8956(%var_8957) /* ty=(Tensor[(900), uint8],) */
}

def @func_2259() -> (Tensor[(9, 5, 11), float32],) {
  %730 = fn () -> (Tensor[(9, 5, 11), float32],) {
    %728 = @func_1891() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %729 = %728.0;
    (%729,)
  };
  %730() /* ty=(Tensor[(9, 5, 11), float32],) */
}

def @func_5434() -> (Tensor[(9, 5, 11), float64],) {
  @func_5432() /* ty=(Tensor[(9, 5, 11), float64],) */
}

def @func_7358() -> (Tensor[(9, 5, 11), float32],) {
  %731 = @func_1999() /* ty=Tensor[(9, 5, 11), float32] */;
  (%731,)
}

def @func_8717() -> (Tensor[(9, 5, 11), float32],) {
  %732 = @func_4548() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(12, 10, 15), float64], Tensor[(1800), uint16], Tensor[(12, 10, 15), float64]) */;
  %733 = %732.0;
  (%733,)
}

def @func_3238() -> Tensor[(9, 5, 11), float32] {
  @func_3236() /* ty=Tensor[(9, 5, 11), float32] */
}

def @func_5173(%var_5171: Tensor[(2640), float32]) -> (Tensor[(9, 5, 11), float32], Tensor[(16, 15, 11), float32], Tensor[(2640), float32], Tensor[(1755), float64], Tensor[(9, 5, 11), float64]) {
  @func_5170(%var_5171) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(16, 15, 11), float32], Tensor[(2640), float32], Tensor[(1755), float64], Tensor[(9, 5, 11), float64]) */
}

def @func_1637(%var_1631: Tensor[(1, 1800), uint16]) -> (Tensor[(9, 5, 11), float32], Tensor[(12, 10, 15), float64], Tensor[(1, 1800), uint16]) {
  %734 = @func_1201() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %735 = cast(%var_1631, dtype="uint16") /* ty=Tensor[(1, 1800), uint16] */;
  %736 = cast(%var_1631, dtype="uint16") /* ty=Tensor[(1, 1800), uint16] */;
  %737 = reshape(%735, newshape=[12, 10, 15]) /* ty=Tensor[(12, 10, 15), uint16] */;
  %738 = reshape(%736, newshape=[12, 10, 15]) /* ty=Tensor[(12, 10, 15), uint16] */;
  %739 = %734.0;
  %740 = @func_324(%737, %738) /* ty=Tensor[(12, 10, 15), float64] */;
  (%739, %740, %var_1631)
}

def @func_1640(%var_1638: Tensor[(1, 1800), uint16]) -> (Tensor[(9, 5, 11), float32], Tensor[(12, 10, 15), float64], Tensor[(1, 1800), uint16]) {
  @func_1637(%var_1638) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(12, 10, 15), float64], Tensor[(1, 1800), uint16]) */
}

def @func_3974(%var_3972: int32, %var_3973: Tensor[(2, 15, 12), int32]) -> (Tensor[(9, 5, 11), float32], Tensor[(495), float64], Tensor[(2, 15, 12), bool]) {
  @func_3970(%var_3972, %var_3973) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(495), float64], Tensor[(2, 15, 12), bool]) */
}

def @func_1613(%var_1574: Tensor[(9, 5, 11), float64]) -> (Tensor[(9, 5, 11), int8], Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float32]) {
  %741 = @func_1201() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %742 = %741.0;
  %743 = cast(%742, dtype="float64") /* ty=Tensor[(9, 5, 11), float64] */;
  %744 = asinh(%743) /* ty=Tensor[(9, 5, 11), float64] */;
  %745 = cast(%var_1574, dtype="int8") /* ty=Tensor[(9, 5, 11), int8] */;
  %746 = shape_of(%744, dtype="int32") /* ty=Tensor[(3), int32] */;
  %747 = cast(%744, dtype="int8") /* ty=Tensor[(9, 5, 11), int8] */;
  %748 = dyn.reshape(%745, %746, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %749 = cast(%var_1574, dtype="int16") /* ty=Tensor[(9, 5, 11), int16] */;
  %750 = shape_of(%744, dtype="int32") /* ty=Tensor[(3), int32] */;
  %751 = cast(%744, dtype="int16") /* ty=Tensor[(9, 5, 11), int16] */;
  %752 = dyn.reshape(%749, %750, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %753 = @func_1457() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %754 = logical_xor(%747, %748) /* ty=Tensor[(9, 5, 11), int8] */;
  %755 = multiply(%751, %752) /* ty=Tensor[(9, 5, 11), int16] */;
  %756 = %753.0;
  (%754, %755, %756)
}

def @func_5560() -> Tensor[(9, 5, 11), float32] {
  @func_4879() /* ty=Tensor[(9, 5, 11), float32] */
}

def @func_3798(%var_3777: Tensor[(6, 1, 8), float32], %var_3794: Tensor[(980, 1), float32]) -> (Tensor[(6, 1, 8), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(980, 1), float32], Tensor[(300), int64]) {
  %757 = cast(%var_3777, dtype="float32") /* ty=Tensor[(6, 1, 8), float32] */;
  %758 = @func_3396() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %759 = @func_1891() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %760 = cast(%var_3794, dtype="float32") /* ty=Tensor[(980, 1), float32] */;
  %761 = cast(meta[relay.Constant][32] /* ty=Tensor[(300), int64] */, dtype="int64") /* ty=Tensor[(300), int64] */;
  %762 = reshape(%760, newshape=[980, 1]) /* ty=Tensor[(980, 1), float32] */;
  %763 = reshape(%761, newshape=[300]) /* ty=Tensor[(300), int64] */;
  %764 = @func_2693(%762, %763) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(980, 1), float32], Tensor[(2, 10, 15), float32], Tensor[(300), int64], Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64]) */;
  %765 = tan(%757) /* ty=Tensor[(6, 1, 8), float32] */;
  %766 = %758.0;
  %767 = @func_3526() /* ty=Tensor[(9, 5, 11), float32] */;
  %768 = %759.0;
  %769 = %764.6;
  (%765, %766, %767, %768, %769, %var_3794, meta[relay.Constant][32] /* ty=Tensor[(300), int64] */)
}

def @func_3970(%var_3933: int32, %var_3934: Tensor[(2, 15, 12), int32]) -> (Tensor[(9, 5, 11), float32], Tensor[(495), float64], Tensor[(2, 15, 12), bool]) {
  %770 = cast(meta[relay.Constant][33] /* ty=Tensor[(495), float64] */, dtype="float64") /* ty=Tensor[(495), float64] */;
  %771 = reshape(%770, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), float64] */;
  %772 = @func_1613(%771) /* ty=(Tensor[(9, 5, 11), int8], Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float32]) */;
  %773 = cast(%var_3933, dtype="bool") /* ty=bool */;
  %774 = cast(%var_3934, dtype="bool") /* ty=Tensor[(2, 15, 12), bool] */;
  %775 = equal(%773, %774) /* ty=Tensor[(2, 15, 12), bool] */;
  %776 = cast(%var_3934, dtype="float32") /* ty=Tensor[(2, 15, 12), float32] */;
  %777 = shape_of(%775, dtype="int32") /* ty=Tensor[(3), int32] */;
  %778 = cast(%775, dtype="float32") /* ty=Tensor[(2, 15, 12), float32] */;
  %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %780 = add(%778, %779) /* ty=Tensor[(2, 15, 12), float32] */;
  %781 = cast(%780, dtype="bool") /* ty=Tensor[(2, 15, 12), bool] */;
  %782 = shape_of(%775, dtype="int32") /* ty=Tensor[(3), int32] */;
  %783 = cast(%775, dtype="bool") /* ty=Tensor[(2, 15, 12), bool] */;
  %784 = dyn.reshape(%781, %782, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %785 = %772.2;
  %786 = logical_and(%783, %784) /* ty=Tensor[(2, 15, 12), bool] */;
  (%785, meta[relay.Constant][33] /* ty=Tensor[(495), float64] */, %786)
}

def @func_8426() -> Tensor[(9, 5, 11), float32] {
  %788 = fn () -> Tensor[(9, 5, 11), float32] {
    %787 = @func_3365() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %787.0
  };
  %788() /* ty=Tensor[(9, 5, 11), float32] */
}

def @func_8539(%var_8537: Tensor[(980), float32], %var_8538: Tensor[(300), int64]) -> (Tensor[(9, 5, 11), float32], Tensor[(300), int64], Tensor[(980), float32], Tensor[(300), int64]) {
  @func_8535(%var_8537, %var_8538) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(300), int64], Tensor[(980), float32], Tensor[(300), int64]) */
}

def @func_7630() -> (Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32]) {
  %795 = fn () -> (Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32]) {
    %789 = @func_5103() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), int16]) */;
    %790 = %789.0;
    %791 = cast(%790, dtype="float64") /* ty=Tensor[(9, 5, 11), float64] */;
    %792 = @func_4855() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %793 = sigmoid(%791) /* ty=Tensor[(9, 5, 11), float64] */;
    %794 = %792.0;
    (%793, %794)
  };
  %795() /* ty=(Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32]) */
}

def @func_696(%var_670: Tensor[(13, 6, 12), uint64], %var_671: Tensor[(13, 6, 12), uint64]) -> (Tensor[(13, 6, 12), uint64], Tensor[(5, 14, 14), float32], Tensor[(980), float32], Tensor[(13, 6, 12), float32]) {
  %796 = cast(%var_671, dtype="uint64") /* ty=Tensor[(13, 6, 12), uint64] */;
  %797 = shape_of(%var_670, dtype="int32") /* ty=Tensor[(3), int32] */;
  %798 = cast(%var_670, dtype="uint64") /* ty=Tensor[(13, 6, 12), uint64] */;
  %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %800 = cast(meta[relay.Constant][34] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
  %801 = reshape(%800, newshape=[5, 14, 14]) /* ty=Tensor[(5, 14, 14), float32] */;
  %802 = @func_40(%801) /* ty=(Tensor[(5, 14, 14), float32],) */;
  %803 = cast(%var_671, dtype="float32") /* ty=Tensor[(13, 6, 12), float32] */;
  %804 = maximum(%798, %799) /* ty=Tensor[(13, 6, 12), uint64] */;
  %805 = %802.0;
  %806 = sqrt(%803) /* ty=Tensor[(13, 6, 12), float32] */;
  (%804, %805, meta[relay.Constant][34] /* ty=Tensor[(980), float32] */, %806)
}

def @func_4143() -> (Tensor[(1, 1755), float64],) {
  %807 = @func_3762() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(300), int64]) */;
  %808 = %807.1;
  %809 = cast(%808, dtype="float64") /* ty=Tensor[(1, 1755), float64] */;
  %810 = exp(%809) /* ty=Tensor[(1, 1755), float64] */;
  (%810,)
}

def @func_4676() -> (Tensor[(9, 5, 11), float32],) {
  %813 = fn () -> (Tensor[(9, 5, 11), float32],) {
    %811 = @func_1694() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %812 = %811.0;
    (%812,)
  };
  %813() /* ty=(Tensor[(9, 5, 11), float32],) */
}

def @func_6607() -> (Tensor[(9, 5, 11), float64],) {
  @func_6605() /* ty=(Tensor[(9, 5, 11), float64],) */
}

def @func_5499(%var_5494: Tensor[(300), int64]) -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float64], Tensor[(1, 1755), float64], Tensor[(980), float32], Tensor[(300), int64]) {
  %814 = @func_2258() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %815 = cast(meta[relay.Constant][35] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
  %816 = cast(%var_5494, dtype="int64") /* ty=Tensor[(300), int64] */;
  %817 = reshape(%815, newshape=[980, 1]) /* ty=Tensor[(980, 1), float32] */;
  %818 = reshape(%816, newshape=[300]) /* ty=Tensor[(300), int64] */;
  %819 = @func_2693(%817, %818) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(980, 1), float32], Tensor[(2, 10, 15), float32], Tensor[(300), int64], Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64]) */;
  %820 = %814.0;
  %821 = @func_3213() /* ty=Tensor[(9, 5, 11), float64] */;
  %822 = %819.6;
  (%820, %821, %822, meta[relay.Constant][35] /* ty=Tensor[(980), float32] */, %var_5494)
}

def @func_1694() -> (Tensor[(9, 5, 11), float32],) {
  %823 = @func_1457() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %824 = %823.0;
  (%824,)
}

def @func_794(%var_793: Tensor[(15, 13, 9), float64]) -> (Tensor[(15, 13, 9), float64], Tensor[(12, 10, 15), float64], Tensor[(3, 600), uint16], Tensor[(980), float32], Tensor[(48), uint32], Tensor[(5, 14, 14), float32], Tensor[(12, 10, 15), float64]) {
  %848 = fn (%var_761: Tensor[(15, 13, 9), float64]) -> (Tensor[(15, 13, 9), float64], Tensor[(12, 10, 15), float64], Tensor[(3, 600), uint16], Tensor[(980), float32], Tensor[(48), uint32], Tensor[(5, 14, 14), float32], Tensor[(12, 10, 15), float64]) {
    %825 = cast(%var_761, dtype="float64") /* ty=Tensor[(15, 13, 9), float64] */;
    %826 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(15, 13, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %827 = cast(meta[relay.Constant][36] /* ty=Tensor[(15, 13, 9), float64] */, dtype="float64") /* ty=Tensor[(15, 13, 9), float64] */;
    %828 = dyn.reshape(%825, %826, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %829 = cast(meta[relay.Constant][37] /* ty=Tensor[(3, 600), uint16] */, dtype="uint16") /* ty=Tensor[(3, 600), uint16] */;
    %830 = cast(meta[relay.Constant][37] /* ty=Tensor[(3, 600), uint16] */, dtype="uint16") /* ty=Tensor[(3, 600), uint16] */;
    %831 = reshape(%829, newshape=[12, 10, 15]) /* ty=Tensor[(12, 10, 15), uint16] */;
    %832 = reshape(%830, newshape=[12, 10, 15]) /* ty=Tensor[(12, 10, 15), uint16] */;
    %833 = cast(meta[relay.Constant][38] /* ty=Tensor[(48), uint32] */, dtype="uint32") /* ty=Tensor[(48), uint32] */;
    %834 = reshape(%833, newshape=[12, 4, 1]) /* ty=Tensor[(12, 4, 1), uint32] */;
    %835 = @func_749(%834) /* ty=(Tensor[(12, 4, 11), uint32], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) */;
    %836 = cast(meta[relay.Constant][38] /* ty=Tensor[(48), uint32] */, dtype="uint32") /* ty=Tensor[(48), uint32] */;
    %837 = reshape(%836, newshape=[12, 4, 1]) /* ty=Tensor[(12, 4, 1), uint32] */;
    %838 = @func_749(%837) /* ty=(Tensor[(12, 4, 11), uint32], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) */;
    %839 = cast(meta[relay.Constant][37] /* ty=Tensor[(3, 600), uint16] */, dtype="uint16") /* ty=Tensor[(3, 600), uint16] */;
    %840 = @func_324(%831, %832) /* ty=Tensor[(12, 10, 15), float64] */;
    %841 = cast(%840, dtype="uint16") /* ty=Tensor[(12, 10, 15), uint16] */;
    %842 = reshape(%839, newshape=[12, 10, 15]) /* ty=Tensor[(12, 10, 15), uint16] */;
    %843 = reshape(%841, newshape=[12, 10, 15]) /* ty=Tensor[(12, 10, 15), uint16] */;
    %844 = floor_divide(%827, %828) /* ty=Tensor[(15, 13, 9), float64] */;
    %845 = %835.2;
    %846 = %838.1;
    %847 = @func_324(%842, %843) /* ty=Tensor[(12, 10, 15), float64] */;
    (%844, %840, meta[relay.Constant][37] /* ty=Tensor[(3, 600), uint16] */, %845, meta[relay.Constant][38] /* ty=Tensor[(48), uint32] */, %846, %847)
  };
  %848(%var_793) /* ty=(Tensor[(15, 13, 9), float64], Tensor[(12, 10, 15), float64], Tensor[(3, 600), uint16], Tensor[(980), float32], Tensor[(48), uint32], Tensor[(5, 14, 14), float32], Tensor[(12, 10, 15), float64]) */
}

def @func_8041(%var_8039: Tensor[(900), float32]) -> (Tensor[(9, 5, 11), float32], Tensor[(12, 10, 15), float64], Tensor[(900), float32], Tensor[(9, 5, 11), float32]) {
  @func_8038(%var_8039) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(12, 10, 15), float64], Tensor[(900), float32], Tensor[(9, 5, 11), float32]) */
}

def @func_8535(%var_8518: Tensor[(980), float32], %var_8519: Tensor[(300), int64]) -> (Tensor[(9, 5, 11), float32], Tensor[(300), int64], Tensor[(980), float32], Tensor[(300), int64]) {
  %849 = @func_3142() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %850 = cast(%var_8518, dtype="float32") /* ty=Tensor[(980), float32] */;
  %851 = cast(%var_8519, dtype="int64") /* ty=Tensor[(300), int64] */;
  %852 = reshape(%850, newshape=[980, 1]) /* ty=Tensor[(980, 1), float32] */;
  %853 = reshape(%851, newshape=[300]) /* ty=Tensor[(300), int64] */;
  %854 = @func_2693(%852, %853) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(980, 1), float32], Tensor[(2, 10, 15), float32], Tensor[(300), int64], Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64]) */;
  %855 = %849.0;
  %856 = %854.4;
  (%855, %856, %var_8518, %var_8519)
}

def @func_1531() -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) {
  %877 = fn () -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) {
    %857 = @func_1201() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %858 = %857.0;
    %859 = cast(%858, dtype="float32") /* ty=Tensor[(9, 5, 11), float32] */;
    %860 = cast(%858, dtype="float64") /* ty=Tensor[(9, 5, 11), float64] */;
    %861 = reshape(%859, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), float32] */;
    %862 = reshape(%860, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), float64] */;
    %863 = @func_1233(%861, %862) /* ty=(Tensor[(9, 5, 11), bool], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) */;
    %864 = cast(%858, dtype="float32") /* ty=Tensor[(9, 5, 11), float32] */;
    %865 = %863.2;
    %866 = cast(%865, dtype="float64") /* ty=Tensor[(9, 5, 11), float64] */;
    %867 = reshape(%864, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), float32] */;
    %868 = reshape(%866, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), float64] */;
    %869 = @func_1233(%867, %868) /* ty=(Tensor[(9, 5, 11), bool], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) */;
    %870 = %869.2;
    %871 = cast(%870, dtype="float32") /* ty=Tensor[(9, 5, 11), float32] */;
    %872 = cast(meta[relay.Constant][39] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
    %873 = reshape(%872, newshape=[5, 14, 14]) /* ty=Tensor[(5, 14, 14), float32] */;
    %874 = @func_40(%873) /* ty=(Tensor[(5, 14, 14), float32],) */;
    %875 = sqrt(%871) /* ty=Tensor[(9, 5, 11), float32] */;
    %876 = %874.0;
    (%858, %865, %875, %876, meta[relay.Constant][39] /* ty=Tensor[(980), float32] */)
  };
  %877() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) */
}

def @func_3367() -> (Tensor[(9, 5, 11), float32],) {
  @func_3365() /* ty=(Tensor[(9, 5, 11), float32],) */
}

def @func_5546() -> Tensor[(9, 5, 11), float32] {
  @func_5544() /* ty=Tensor[(9, 5, 11), float32] */
}

def @func_2080() -> (Tensor[(9, 5, 11), uint16],) {
  @func_2078() /* ty=(Tensor[(9, 5, 11), uint16],) */
}

def @func_1696() -> (Tensor[(9, 5, 11), float32],) {
  @func_1694() /* ty=(Tensor[(9, 5, 11), float32],) */
}

def @func_3213() -> Tensor[(9, 5, 11), float64] {
  %878 = @func_1908() /* ty=(Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float64]) */;
  %878.1
}

def @func_101(%var_88: Tensor[(10, 13, 7), uint16]) -> (Tensor[(10, 13, 7), uint16], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) {
  %879 = cast(meta[relay.Constant][40] /* ty=Tensor[(10, 13, 7), uint16] */, dtype="uint16") /* ty=Tensor[(10, 13, 7), uint16] */;
  %880 = shape_of(%var_88, dtype="int32") /* ty=Tensor[(3), int32] */;
  %881 = cast(%var_88, dtype="uint16") /* ty=Tensor[(10, 13, 7), uint16] */;
  %882 = dyn.reshape(%879, %880, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %883 = cast(meta[relay.Constant][41] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
  %884 = reshape(%883, newshape=[5, 14, 14]) /* ty=Tensor[(5, 14, 14), float32] */;
  %885 = @func_40(%884) /* ty=(Tensor[(5, 14, 14), float32],) */;
  %886 = maximum(%881, %882) /* ty=Tensor[(10, 13, 7), uint16] */;
  %887 = %885.0;
  (%886, %887, meta[relay.Constant][41] /* ty=Tensor[(980), float32] */)
}

def @func_8300() -> (Tensor[(1800), uint16],) {
  %890 = fn () -> (Tensor[(1800), uint16],) {
    %888 = @func_4548() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(12, 10, 15), float64], Tensor[(1800), uint16], Tensor[(12, 10, 15), float64]) */;
    %889 = %888.2;
    (%889,)
  };
  %890() /* ty=(Tensor[(1800), uint16],) */
}

def @func_8057() -> (Tensor[(9, 5, 11), float32],) {
  @func_8055() /* ty=(Tensor[(9, 5, 11), float32],) */
}

def @func_7093() -> (Tensor[(9, 5, 11), float32],) {
  @func_7091() /* ty=(Tensor[(9, 5, 11), float32],) */
}

def @func_6118() -> Tensor[(5, 14, 14), float32] {
  %892 = fn () -> Tensor[(5, 14, 14), float32] {
    %891 = @func_1530() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) */;
    %891.3
  };
  %892() /* ty=Tensor[(5, 14, 14), float32] */
}

def @func_905(%var_870: Tensor[(16, 15, 11), float32], %var_896: Tensor[(1755), float64]) -> (Tensor[(16, 15, 11), float32], Tensor[(980), float32], Tensor[(936), uint64], Tensor[(12, 10, 15), float64], Tensor[(1755), float64]) {
  %893 = cast(%var_870, dtype="float32") /* ty=Tensor[(16, 15, 11), float32] */;
  %894 = cast(meta[relay.Constant][42] /* ty=Tensor[(936), uint64] */, dtype="uint64") /* ty=Tensor[(936), uint64] */;
  %895 = cast(meta[relay.Constant][42] /* ty=Tensor[(936), uint64] */, dtype="uint64") /* ty=Tensor[(936), uint64] */;
  %896 = reshape(%894, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), uint64] */;
  %897 = reshape(%895, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), uint64] */;
  %898 = @func_696(%896, %897) /* ty=(Tensor[(13, 6, 12), uint64], Tensor[(5, 14, 14), float32], Tensor[(980), float32], Tensor[(13, 6, 12), float32]) */;
  %899 = cast(%var_896, dtype="float64") /* ty=Tensor[(1755), float64] */;
  %900 = reshape(%899, newshape=[15, 13, 9]) /* ty=Tensor[(15, 13, 9), float64] */;
  %901 = @func_792(%900) /* ty=(Tensor[(15, 13, 9), float64], Tensor[(12, 10, 15), float64], Tensor[(3, 600), uint16], Tensor[(980), float32], Tensor[(48), uint32], Tensor[(5, 14, 14), float32], Tensor[(12, 10, 15), float64]) */;
  %902 = rsqrt(%893) /* ty=Tensor[(16, 15, 11), float32] */;
  %903 = %898.2;
  %904 = %901.1;
  (%902, %903, meta[relay.Constant][42] /* ty=Tensor[(936), uint64] */, %904, %var_896)
}

def @func_5994() -> (Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), bool]) {
  %905 = @func_3693() /* ty=(Tensor[(9, 5, 11), float64],) */;
  %906 = @func_3142() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %907 = %906.0;
  %908 = cast(%907, dtype="float64") /* ty=Tensor[(9, 5, 11), float64] */;
  %909 = reshape(%908, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), float64] */;
  %910 = @func_5925(%909) /* ty=(Tensor[(9, 5, 11), bool],) */;
  %911 = %905.0;
  %912 = %910.0;
  (%911, %907, %912)
}

def @func_9165() -> (Tensor[(9, 5, 11), float32],) {
  @func_9163() /* ty=(Tensor[(9, 5, 11), float32],) */
}

def @func_5927(%var_5926: Tensor[(9, 5, 11), float64]) -> (Tensor[(9, 5, 11), bool],) {
  %922 = fn (%var_5912: Tensor[(9, 5, 11), float64]) -> (Tensor[(9, 5, 11), bool],) {
    %913 = @func_4675() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %914 = %913.0;
    %915 = cast(%914, dtype="float64") /* ty=Tensor[(9, 5, 11), float64] */;
    %916 = cos(%915) /* ty=Tensor[(9, 5, 11), float64] */;
    %917 = cast(%var_5912, dtype="bool") /* ty=Tensor[(9, 5, 11), bool] */;
    %918 = shape_of(%916, dtype="int32") /* ty=Tensor[(3), int32] */;
    %919 = cast(%916, dtype="bool") /* ty=Tensor[(9, 5, 11), bool] */;
    %920 = dyn.reshape(%917, %918, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %921 = logical_or(%919, %920) /* ty=Tensor[(9, 5, 11), bool] */;
    (%921,)
  };
  %922(%var_5926) /* ty=(Tensor[(9, 5, 11), bool],) */
}

def @func_5502(%var_5500: Tensor[(300), int64]) -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float64], Tensor[(1, 1755), float64], Tensor[(980), float32], Tensor[(300), int64]) {
  @func_5499(%var_5500) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float64], Tensor[(1, 1755), float64], Tensor[(980), float32], Tensor[(300), int64]) */
}

def @func_4824(%var_4822: Tensor[(9, 5, 11), float32]) -> (Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float64]) {
  @func_4821(%var_4822) /* ty=(Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float64]) */
}

def @func_6520() -> (Tensor[(9, 5, 11), float32],) {
  %925 = fn () -> (Tensor[(9, 5, 11), float32],) {
    %923 = @func_3135() /* ty=(Tensor[(9, 5, 11), uint16], Tensor[(9, 5, 11), float32]) */;
    %924 = %923.1;
    (%924,)
  };
  %925() /* ty=(Tensor[(9, 5, 11), float32],) */
}

def @func_7015() -> (Tensor[(9, 5, 11), float64],) {
  @func_7013() /* ty=(Tensor[(9, 5, 11), float64],) */
}

def @func_4184() -> (Tensor[(9, 5, 11), float32],) {
  %926 = @func_1160() /* ty=Tensor[(9, 5, 11), float32] */;
  (%926,)
}

def @func_327(%var_325: Tensor[(12, 10, 15), uint16], %var_326: Tensor[(12, 10, 15), uint16]) -> Tensor[(12, 10, 15), float64] {
  %936 = fn (%var_311: Tensor[(12, 10, 15), uint16], %var_318: Tensor[(12, 10, 15), uint16]) -> Tensor[(12, 10, 15), float64] {
    %927 = cast(meta[relay.Constant][43] /* ty=Tensor[(12, 10, 15), uint16] */, dtype="uint16") /* ty=Tensor[(12, 10, 15), uint16] */;
    %928 = shape_of(%var_311, dtype="int32") /* ty=Tensor[(3), int32] */;
    %929 = cast(%var_311, dtype="uint16") /* ty=Tensor[(12, 10, 15), uint16] */;
    %930 = dyn.reshape(%927, %928, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %931 = bitwise_xor(%929, %930) /* ty=Tensor[(12, 10, 15), uint16] */;
    %932 = cast(%var_318, dtype="float64") /* ty=Tensor[(12, 10, 15), float64] */;
    %933 = shape_of(%931, dtype="int32") /* ty=Tensor[(3), int32] */;
    %934 = cast(%931, dtype="float64") /* ty=Tensor[(12, 10, 15), float64] */;
    %935 = dyn.reshape(%932, %933, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_divide(%934, %935) /* ty=Tensor[(12, 10, 15), float64] */
  };
  %936(%var_325, %var_326) /* ty=Tensor[(12, 10, 15), float64] */
}

def @func_1893() -> (Tensor[(9, 5, 11), float32],) {
  @func_1891() /* ty=(Tensor[(9, 5, 11), float32],) */
}

def @func_3135() -> (Tensor[(9, 5, 11), uint16], Tensor[(9, 5, 11), float32]) {
  %937 = @func_2078() /* ty=(Tensor[(9, 5, 11), uint16],) */;
  %938 = @func_2629() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %939 = %937.0;
  %940 = %938.0;
  (%939, %940)
}

def @func_909(%var_907: Tensor[(16, 15, 11), float32], %var_908: Tensor[(1755), float64]) -> (Tensor[(16, 15, 11), float32], Tensor[(980), float32], Tensor[(936), uint64], Tensor[(12, 10, 15), float64], Tensor[(1755), float64]) {
  @func_905(%var_907, %var_908) /* ty=(Tensor[(16, 15, 11), float32], Tensor[(980), float32], Tensor[(936), uint64], Tensor[(12, 10, 15), float64], Tensor[(1755), float64]) */
}

def @func_1858(%var_1853: Tensor[(2640), float32]) -> (Tensor[(9, 5, 11), float32], Tensor[(936), uint64], Tensor[(2640), float32], Tensor[(1755), float64]) {
  %941 = @func_1457() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %942 = cast(%var_1853, dtype="float32") /* ty=Tensor[(2640), float32] */;
  %943 = cast(meta[relay.Constant][44] /* ty=Tensor[(1755), float64] */, dtype="float64") /* ty=Tensor[(1755), float64] */;
  %944 = reshape(%942, newshape=[16, 15, 11]) /* ty=Tensor[(16, 15, 11), float32] */;
  %945 = reshape(%943, newshape=[1755]) /* ty=Tensor[(1755), float64] */;
  %946 = @func_905(%944, %945) /* ty=(Tensor[(16, 15, 11), float32], Tensor[(980), float32], Tensor[(936), uint64], Tensor[(12, 10, 15), float64], Tensor[(1755), float64]) */;
  %947 = %941.0;
  %948 = %946.2;
  (%947, %948, %var_1853, meta[relay.Constant][44] /* ty=Tensor[(1755), float64] */)
}

def @func_3334(%var_3324: Tensor[(9, 5, 11), float32]) -> Tensor[(9, 5, 11), float64] {
  %949 = @func_1694() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %950 = %949.0;
  %951 = cast(%var_3324, dtype="float64") /* ty=Tensor[(9, 5, 11), float64] */;
  %952 = shape_of(%950, dtype="int32") /* ty=Tensor[(3), int32] */;
  %953 = cast(%950, dtype="float64") /* ty=Tensor[(9, 5, 11), float64] */;
  %954 = dyn.reshape(%951, %952, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%953, %954) /* ty=Tensor[(9, 5, 11), float64] */
}

def @func_8260() -> (Tensor[(9, 5, 11), uint16], Tensor[(2, 12, 9), uint8], Tensor[(216), uint8], Tensor[(9, 5, 11), float32]) {
  @func_8258() /* ty=(Tensor[(9, 5, 11), uint16], Tensor[(2, 12, 9), uint8], Tensor[(216), uint8], Tensor[(9, 5, 11), float32]) */
}

def @func_7091() -> (Tensor[(9, 5, 11), float32],) {
  %955 = @func_4879() /* ty=Tensor[(9, 5, 11), float32] */;
  (%955,)
}

def @func_1616(%var_1614: Tensor[(9, 5, 11), float64]) -> (Tensor[(9, 5, 11), int8], Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float32]) {
  @func_1613(%var_1614) /* ty=(Tensor[(9, 5, 11), int8], Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float32]) */
}

def @func_1265(%var_1259: Tensor[(2, 12, 9), uint8]) -> (Tensor[(2, 12, 9), uint8],) {
  %956 = cast(meta[relay.Constant][45] /* ty=Tensor[(2, 12, 9), uint8] */, dtype="uint8") /* ty=Tensor[(2, 12, 9), uint8] */;
  %957 = shape_of(%var_1259, dtype="int32") /* ty=Tensor[(3), int32] */;
  %958 = cast(%var_1259, dtype="uint8") /* ty=Tensor[(2, 12, 9), uint8] */;
  %959 = dyn.reshape(%956, %957, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %960 = left_shift(%958, %959) /* ty=Tensor[(2, 12, 9), uint8] */;
  (%960,)
}

def @func_6786() -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) {
  %961 = @func_4879() /* ty=Tensor[(9, 5, 11), float32] */;
  %962 = @func_3320() /* ty=Tensor[(9, 5, 11), float32] */;
  (%961, %962)
}

def @func_8868(%var_8866: Tensor[(7, 3, 10), float32]) -> (Tensor[(9, 5, 11), float32], Tensor[(7, 3, 10), uint32]) {
  @func_8865(%var_8866) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(7, 3, 10), uint32]) */
}

def @func_7360() -> (Tensor[(9, 5, 11), float32],) {
  @func_7358() /* ty=(Tensor[(9, 5, 11), float32],) */
}

def @func_6431(%var_6429: Tensor[(36, 1), float64]) -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(4, 9, 1), float64], Tensor[(36, 1), float64]) {
  @func_6428(%var_6429) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(4, 9, 1), float64], Tensor[(36, 1), float64]) */
}

def @func_6222() -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) {
  @func_6220() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) */
}

def @func_7615() -> (Tensor[(9, 5, 11), float32],) {
  @func_7613() /* ty=(Tensor[(9, 5, 11), float32],) */
}

def @func_6428(%var_6419: Tensor[(36, 1), float64]) -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(4, 9, 1), float64], Tensor[(36, 1), float64]) {
  %963 = @func_3588() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %964 = @func_3762() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(300), int64]) */;
  %965 = cast(%var_6419, dtype="float64") /* ty=Tensor[(36, 1), float64] */;
  %966 = reshape(%965, newshape=[4, 9, 1]) /* ty=Tensor[(4, 9, 1), float64] */;
  %967 = @func_3251(%966) /* ty=(Tensor[(4, 9, 1), float64], Tensor[(4, 9, 1), float64]) */;
  %968 = %963.0;
  %969 = %964.0;
  %970 = %967.0;
  (%968, %969, %970, %var_6419)
}

def @func_8719() -> (Tensor[(9, 5, 11), float32],) {
  @func_8717() /* ty=(Tensor[(9, 5, 11), float32],) */
}

def @func_3695() -> (Tensor[(9, 5, 11), float64],) {
  @func_3693() /* ty=(Tensor[(9, 5, 11), float64],) */
}

def @func_8094() -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) {
  %971 = @func_7629() /* ty=(Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32]) */;
  %972 = @func_5544() /* ty=Tensor[(9, 5, 11), float32] */;
  %973 = %971.1;
  (%972, %973)
}

def @func_4821(%var_4799: Tensor[(9, 5, 11), float32]) -> (Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float64]) {
  %974 = @func_3236() /* ty=Tensor[(9, 5, 11), float32] */;
  %975 = cast(%var_4799, dtype="float64") /* ty=Tensor[(9, 5, 11), float64] */;
  %976 = shape_of(%974, dtype="int32") /* ty=Tensor[(3), int32] */;
  %977 = cast(%974, dtype="float64") /* ty=Tensor[(9, 5, 11), float64] */;
  %978 = dyn.reshape(%975, %976, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %979 = @func_3693() /* ty=(Tensor[(9, 5, 11), float64],) */;
  %980 = floor_mod(%977, %978) /* ty=Tensor[(9, 5, 11), float64] */;
  %981 = %979.0;
  (%980, %981)
}

def @func_752(%var_750: Tensor[(12, 4, 1), uint32]) -> (Tensor[(12, 4, 11), uint32], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) {
  @func_749(%var_750) /* ty=(Tensor[(12, 4, 11), uint32], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) */
}

def @func_4038() -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) {
  @func_4036() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) */
}

def @func_7279() -> Tensor[(9, 5, 11), float64] {
  @func_7277() /* ty=Tensor[(9, 5, 11), float64] */
}

def @func_1963() -> Tensor[(9, 5, 11), float32] {
  %982 = @func_1694() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %982.0
}

def @func_7998() -> (Tensor[(300), float32], Tensor[(9, 5, 11), float32], Tensor[(48), float32], Tensor[(980), float32], Tensor[(9, 5, 11), float32]) {
  @func_7996() /* ty=(Tensor[(300), float32], Tensor[(9, 5, 11), float32], Tensor[(48), float32], Tensor[(980), float32], Tensor[(9, 5, 11), float32]) */
}

def @func_8466() -> (Tensor[(300), int64], Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64]) {
  %990 = fn () -> (Tensor[(300), int64], Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64]) {
    %983 = @func_1530() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) */;
    %984 = @func_7715() /* ty=Tensor[(300), int64] */;
    %985 = cast(%984, dtype="int64") /* ty=Tensor[(300), int64] */;
    %986 = reshape(%985, newshape=[300]) /* ty=Tensor[(300), int64] */;
    %987 = @func_3292(%986) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(300), int64]) */;
    %988 = %983.1;
    %989 = %987.1;
    (%984, %988, %989)
  };
  %990() /* ty=(Tensor[(300), int64], Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64]) */
}

def @func_5432() -> (Tensor[(9, 5, 11), float64],) {
  %991 = @func_1908() /* ty=(Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float64]) */;
  %992 = %991.1;
  (%992,)
}

def @func_3253(%var_3252: Tensor[(4, 9, 1), float64]) -> (Tensor[(4, 9, 1), float64], Tensor[(4, 9, 1), float64]) {
  %997 = fn (%var_3239: Tensor[(4, 9, 1), float64]) -> (Tensor[(4, 9, 1), float64], Tensor[(4, 9, 1), float64]) {
    %993 = cast(%var_3239, dtype="float64") /* ty=Tensor[(4, 9, 1), float64] */;
    %994 = cast(%var_3239, dtype="float64") /* ty=Tensor[(4, 9, 1), float64] */;
    %995 = sin(%993) /* ty=Tensor[(4, 9, 1), float64] */;
    %996 = log2(%994) /* ty=Tensor[(4, 9, 1), float64] */;
    (%995, %996)
  };
  %997(%var_3252) /* ty=(Tensor[(4, 9, 1), float64], Tensor[(4, 9, 1), float64]) */
}

def @func_6643(%var_6640: Tensor[(5, 6, 12), float64], %var_6641: Tensor[(5, 6, 12), float64], %var_6642: Tensor[(910), uint16]) -> (Tensor[(5, 6, 12), float64], Tensor[(9, 5, 11), float64], Tensor[(495), float32], Tensor[(9, 5, 11), float64], Tensor[(10, 13, 7), uint16], Tensor[(910), uint16]) {
  %1012 = fn (%var_6610: Tensor[(5, 6, 12), float64], %var_6611: Tensor[(5, 6, 12), float64], %var_6634: Tensor[(910), uint16]) -> (Tensor[(5, 6, 12), float64], Tensor[(9, 5, 11), float64], Tensor[(495), float32], Tensor[(9, 5, 11), float64], Tensor[(10, 13, 7), uint16], Tensor[(910), uint16]) {
    %998 = cast(%var_6611, dtype="float64") /* ty=Tensor[(5, 6, 12), float64] */;
    %999 = shape_of(%var_6610, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1000 = cast(%var_6610, dtype="float64") /* ty=Tensor[(5, 6, 12), float64] */;
    %1001 = dyn.reshape(%998, %999, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1002 = cast(meta[relay.Constant][46] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
    %1003 = reshape(%1002, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), float32] */;
    %1004 = @func_3693() /* ty=(Tensor[(9, 5, 11), float64],) */;
    %1005 = cast(%var_6634, dtype="uint16") /* ty=Tensor[(910), uint16] */;
    %1006 = reshape(%1005, newshape=[10, 13, 7]) /* ty=Tensor[(10, 13, 7), uint16] */;
    %1007 = @func_101(%1006) /* ty=(Tensor[(10, 13, 7), uint16], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) */;
    %1008 = floor_divide(%1000, %1001) /* ty=Tensor[(5, 6, 12), float64] */;
    %1009 = @func_3334(%1003) /* ty=Tensor[(9, 5, 11), float64] */;
    %1010 = %1004.0;
    %1011 = %1007.0;
    (%1008, %1009, meta[relay.Constant][46] /* ty=Tensor[(495), float32] */, %1010, %1011, %var_6634)
  };
  %1012(%var_6640, %var_6641, %var_6642) /* ty=(Tensor[(5, 6, 12), float64], Tensor[(9, 5, 11), float64], Tensor[(495), float32], Tensor[(9, 5, 11), float64], Tensor[(10, 13, 7), uint16], Tensor[(910), uint16]) */
}

def @func_8838() -> (Tensor[(9, 5, 11), float32],) {
  @func_8836() /* ty=(Tensor[(9, 5, 11), float32],) */
}

def @func_8323() -> (Tensor[(9, 5, 11), float32],) {
  %1015 = fn () -> (Tensor[(9, 5, 11), float32],) {
    %1013 = @func_7091() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %1014 = %1013.0;
    (%1014,)
  };
  %1015() /* ty=(Tensor[(9, 5, 11), float32],) */
}

def @func_1751(%var_1742: Tensor[(36, 6), uint8]) -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(2, 12, 9), uint8], Tensor[(36, 6), uint8]) {
  %1016 = @func_1201() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %1017 = @func_1367() /* ty=(Tensor[(9, 5, 11), float32],) */;
  %1018 = cast(%var_1742, dtype="uint8") /* ty=Tensor[(36, 6), uint8] */;
  %1019 = reshape(%1018, newshape=[2, 12, 9]) /* ty=Tensor[(2, 12, 9), uint8] */;
  %1020 = @func_1265(%1019) /* ty=(Tensor[(2, 12, 9), uint8],) */;
  %1021 = %1016.0;
  %1022 = %1017.0;
  %1023 = %1020.0;
  (%1021, %1022, %1023, %var_1742)
}

def @func_2212(%var_2210: Tensor[(9, 5, 11), float32], %var_2211: Tensor[(1755), float64]) -> (Tensor[(9, 5, 11), int8], Tensor[(980), float32], Tensor[(2640), float32], Tensor[(1755), float64], Tensor[(9, 5, 11), float32]) {
  @func_2208(%var_2210, %var_2211) /* ty=(Tensor[(9, 5, 11), int8], Tensor[(980), float32], Tensor[(2640), float32], Tensor[(1755), float64], Tensor[(9, 5, 11), float32]) */
}

def @func_42(%var_41: Tensor[(5, 14, 14), float32]) -> (Tensor[(5, 14, 14), float32],) {
  %1026 = fn (%var_6: Tensor[(5, 14, 14), float32]) -> (Tensor[(5, 14, 14), float32],) {
    %1024 = cast(%var_6, dtype="float32") /* ty=Tensor[(5, 14, 14), float32] */;
    %1025 = cosh(%1024) /* ty=Tensor[(5, 14, 14), float32] */;
    (%1025,)
  };
  %1026(%var_41) /* ty=(Tensor[(5, 14, 14), float32],) */
}

def @func_4251() -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) {
  @func_4249() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) */
}

def @func_1237(%var_1235: Tensor[(9, 5, 11), float32], %var_1236: Tensor[(9, 5, 11), float64]) -> (Tensor[(9, 5, 11), bool], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) {
  @func_1233(%var_1235, %var_1236) /* ty=(Tensor[(9, 5, 11), bool], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) */
}

def @func_4186() -> (Tensor[(9, 5, 11), float32],) {
  @func_4184() /* ty=(Tensor[(9, 5, 11), float32],) */
}

def @func_1754(%var_1752: Tensor[(36, 6), uint8]) -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(2, 12, 9), uint8], Tensor[(36, 6), uint8]) {
  @func_1751(%var_1752) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(2, 12, 9), uint8], Tensor[(36, 6), uint8]) */
}

def @func_9013() -> Tensor[(9, 5, 11), float32] {
  %1027 = fn () -> Tensor[(9, 5, 11), float32] {
    @func_5544() /* ty=Tensor[(9, 5, 11), float32] */
  };
  %1027() /* ty=Tensor[(9, 5, 11), float32] */
}

def @func_7144() -> Tensor[(980), float32] {
  %1029 = fn () -> Tensor[(980), float32] {
    %1028 = @func_1530() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) */;
    %1028.4
  };
  %1029() /* ty=Tensor[(980), float32] */
}

def @func_3764() -> (Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(300), int64]) {
  @func_3762() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(300), int64]) */
}

def @func_6372() -> (Tensor[(9, 5, 11), float64], Tensor[(10, 15, 6), float64], Tensor[(900), float32]) {
  @func_6370() /* ty=(Tensor[(9, 5, 11), float64], Tensor[(10, 15, 6), float64], Tensor[(900), float32]) */
}

def @func_1161() -> Tensor[(9, 5, 11), float32] {
  %1033 = fn () -> Tensor[(9, 5, 11), float32] {
    %1030 = cast(meta[relay.Constant][47] /* ty=Tensor[(9, 5, 11), float32] */, dtype="float32") /* ty=Tensor[(9, 5, 11), float32] */;
    %1031 = acos(%1030) /* ty=Tensor[(9, 5, 11), float32] */;
    %1032 = cast(%1031, dtype="float32") /* ty=Tensor[(9, 5, 11), float32] */;
    sin(%1032) /* ty=Tensor[(9, 5, 11), float32] */
  };
  %1033() /* ty=Tensor[(9, 5, 11), float32] */
}

def @func_6737() -> Tensor[(9, 5, 11), uint16] {
  @func_6735() /* ty=Tensor[(9, 5, 11), uint16] */
}

def @func_2931(%var_2929: Tensor[(9, 5, 11), float32]) -> (Tensor[(9, 5, 11), uint32], Tensor[(9, 5, 11), uint8], Tensor[(9, 5, 11), bool]) {
  @func_2928(%var_2929) /* ty=(Tensor[(9, 5, 11), uint32], Tensor[(9, 5, 11), uint8], Tensor[(9, 5, 11), bool]) */
}

def @func_7715() -> Tensor[(300), int64] {
  %1034 = @func_3762() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(300), int64]) */;
  %1034.2
}

def @func_8596() -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) {
  %1043 = fn () -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) {
    %1035 = @func_5994() /* ty=(Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), bool]) */;
    %1036 = @func_8446() /* ty=(Tensor[(9, 5, 11), float64],) */;
    %1037 = @func_4184() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %1038 = @func_3365() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %1039 = %1035.1;
    %1040 = %1036.0;
    %1041 = %1037.0;
    %1042 = %1038.0;
    (%1039, %1040, %1041, %1042)
  };
  %1043() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) */
}

def @func_8956(%var_8937: Tensor[(900), float32]) -> (Tensor[(900), uint8],) {
  %1044 = @func_6370() /* ty=(Tensor[(9, 5, 11), float64], Tensor[(10, 15, 6), float64], Tensor[(900), float32]) */;
  %1045 = %1044.2;
  %1046 = cast(%var_8937, dtype="uint8") /* ty=Tensor[(900), uint8] */;
  %1047 = shape_of(%1045, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1048 = cast(%1045, dtype="uint8") /* ty=Tensor[(900), uint8] */;
  %1049 = dyn.reshape(%1046, %1047, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %1050 = add(%1048, %1049) /* ty=Tensor[(900), uint8] */;
  (%1050,)
}

def @func_5476() -> Tensor[(9, 5, 11), float32] {
  %1052 = fn () -> Tensor[(9, 5, 11), float32] {
    %1051 = @func_3588() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %1051.0
  };
  %1052() /* ty=Tensor[(9, 5, 11), float32] */
}

def @func_3869() -> (Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) {
  %1059 = fn () -> (Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) {
    %1053 = @func_1908() /* ty=(Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float64]) */;
    %1054 = @func_1457() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %1055 = @func_3588() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %1056 = %1053.0;
    %1057 = %1054.0;
    %1058 = %1055.0;
    (%1056, %1057, %1058)
  };
  %1059() /* ty=(Tensor[(9, 5, 11), int16], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) */
}

def @func_7717() -> Tensor[(300), int64] {
  @func_7715() /* ty=Tensor[(300), int64] */
}

def @func_9201() -> (Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32], Tensor[(32, 2), float64], Tensor[(900), float64]) {
  @func_9199() /* ty=(Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32], Tensor[(32, 2), float64], Tensor[(900), float64]) */
}

def @func_5803() -> (Tensor[(9, 5, 11), float32], Tensor[(10, 11, 5), float64], Tensor[(550), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(936), uint64], Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32]) {
  %1078 = fn () -> (Tensor[(9, 5, 11), float32], Tensor[(10, 11, 5), float64], Tensor[(550), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(936), uint64], Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32]) {
    %1060 = cast(meta[relay.Constant][48] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
    %1061 = reshape(%1060, newshape=[10, 11, 5]) /* ty=Tensor[(10, 11, 5), float64] */;
    %1062 = @func_3737(%1061) /* ty=(Tensor[(10, 11, 5), int32], Tensor[(10, 11, 5), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32]) */;
    %1063 = @func_5103() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), int16]) */;
    %1064 = cast(meta[relay.Constant][49] /* ty=Tensor[(936), uint64] */, dtype="uint64") /* ty=Tensor[(936), uint64] */;
    %1065 = cast(meta[relay.Constant][49] /* ty=Tensor[(936), uint64] */, dtype="uint64") /* ty=Tensor[(936), uint64] */;
    %1066 = reshape(%1064, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), uint64] */;
    %1067 = reshape(%1065, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), uint64] */;
    %1068 = @func_696(%1066, %1067) /* ty=(Tensor[(13, 6, 12), uint64], Tensor[(5, 14, 14), float32], Tensor[(980), float32], Tensor[(13, 6, 12), float32]) */;
    %1069 = @func_5432() /* ty=(Tensor[(9, 5, 11), float64],) */;
    %1070 = @func_1530() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(980), float32]) */;
    %1071 = @func_3526() /* ty=Tensor[(9, 5, 11), float32] */;
    %1072 = %1062.1;
    %1073 = %1063.0;
    %1074 = @func_1160() /* ty=Tensor[(9, 5, 11), float32] */;
    %1075 = %1068.1;
    %1076 = %1069.0;
    %1077 = %1070.1;
    (%1071, %1072, meta[relay.Constant][48] /* ty=Tensor[(550), float64] */, %1073, %1074, %1075, meta[relay.Constant][49] /* ty=Tensor[(936), uint64] */, %1076, %1077)
  };
  %1078() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(10, 11, 5), float64], Tensor[(550), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(5, 14, 14), float32], Tensor[(936), uint64], Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32]) */
}

def @func_8447() -> (Tensor[(9, 5, 11), float64],) {
  %1080 = fn () -> (Tensor[(9, 5, 11), float64],) {
    %1079 = @func_8143() /* ty=Tensor[(9, 5, 11), float64] */;
    (%1079,)
  };
  %1080() /* ty=(Tensor[(9, 5, 11), float64],) */
}

def @func_5996() -> (Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), bool]) {
  @func_5994() /* ty=(Tensor[(9, 5, 11), float64], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), bool]) */
}

def @func_2126(%var_2125: Tensor[(9, 5, 11), float32]) -> (Tensor[(9, 5, 11), float64],) {
  %1089 = fn (%var_2110: Tensor[(9, 5, 11), float32]) -> (Tensor[(9, 5, 11), float64],) {
    %1081 = @func_1160() /* ty=Tensor[(9, 5, 11), float32] */;
    %1082 = cast(%var_2110, dtype="int64") /* ty=Tensor[(9, 5, 11), int64] */;
    %1083 = shape_of(%1081, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1084 = cast(%1081, dtype="int64") /* ty=Tensor[(9, 5, 11), int64] */;
    %1085 = dyn.reshape(%1082, %1083, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %1086 = right_shift(%1084, %1085) /* ty=Tensor[(9, 5, 11), int64] */;
    %1087 = cast(%1086, dtype="float64") /* ty=Tensor[(9, 5, 11), float64] */;
    %1088 = log(%1087) /* ty=Tensor[(9, 5, 11), float64] */;
    (%1088,)
  };
  %1089(%var_2125) /* ty=(Tensor[(9, 5, 11), float64],) */
}

def @func_5330(%var_5329: Tensor[(7, 1755), float32]) -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(2, 24), float32], Tensor[(980), float32], Tensor[(9, 5, 11), float64], Tensor[(?, 1755), int64], Tensor[(7, 1755), float32]) {
  %1114 = fn (%var_5323: Tensor[(7, 1755), float32]) -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(2, 24), float32], Tensor[(980), float32], Tensor[(9, 5, 11), float64], Tensor[(?, 1755), int64], Tensor[(7, 1755), float32]) {
    %1090 = @func_3305() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %1091 = @func_1891() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %1092 = %1091.0;
    %1093 = cast(%1092, dtype="float32") /* ty=Tensor[(9, 5, 11), float32] */;
    %1094 = reshape(%1093, newshape=[9, 5, 11]) /* ty=Tensor[(9, 5, 11), float32] */;
    %1095 = @func_2124(%1094) /* ty=(Tensor[(9, 5, 11), float64],) */;
    %1096 = cast(meta[relay.Constant][50] /* ty=Tensor[(2, 24), float32] */, dtype="float32") /* ty=Tensor[(2, 24), float32] */;
    %1097 = cast(meta[relay.Constant][51] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
    %1098 = reshape(%1096, newshape=[6, 1, 8]) /* ty=Tensor[(6, 1, 8), float32] */;
    %1099 = reshape(%1097, newshape=[980, 1]) /* ty=Tensor[(980, 1), float32] */;
    %1100 = @func_3798(%1098, %1099) /* ty=(Tensor[(6, 1, 8), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(1, 1755), float64], Tensor[(980, 1), float32], Tensor[(300), int64]) */;
    %1101 = %1100.4;
    %1102 = cast(%1101, dtype="float32") /* ty=Tensor[(1, 1755), float32] */;
    %1103 = sinh(%1102) /* ty=Tensor[(1, 1755), float32] */;
    %1104 = cast(%1101, dtype="int64") /* ty=Tensor[(1, 1755), int64] */;
    %1105 = shape_of(%1103, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1106 = cast(%1103, dtype="int64") /* ty=Tensor[(1, 1755), int64] */;
    %1107 = dyn.reshape(%1104, %1105, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %1108 = cast(%1103, dtype="float32") /* ty=Tensor[(1, 1755), float32] */;
    %1109 = cast(%var_5323, dtype="float32") /* ty=Tensor[(7, 1755), float32] */;
    %1110 = %1090.0;
    %1111 = %1095.0;
    %1112 = maximum(%1106, %1107) /* ty=Tensor[(?, 1755), int64] */;
    %1113 = floor_mod(%1108, %1109) /* ty=Tensor[(7, 1755), float32] */;
    (%1110, %1092, meta[relay.Constant][50] /* ty=Tensor[(2, 24), float32] */, meta[relay.Constant][51] /* ty=Tensor[(980), float32] */, %1111, %1112, %1113)
  };
  %1114(%var_5329) /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), float32], Tensor[(2, 24), float32], Tensor[(980), float32], Tensor[(9, 5, 11), float64], Tensor[(?, 1755), int64], Tensor[(7, 1755), float32]) */
}

def @func_6041() -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), uint16]) {
  %1119 = fn () -> (Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), uint16]) {
    %1115 = @func_1694() /* ty=(Tensor[(9, 5, 11), float32],) */;
    %1116 = @func_2078() /* ty=(Tensor[(9, 5, 11), uint16],) */;
    %1117 = %1115.0;
    %1118 = %1116.0;
    (%1117, %1118)
  };
  %1119() /* ty=(Tensor[(9, 5, 11), float32], Tensor[(9, 5, 11), uint16]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen202/build/output.py", line 3154, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:57:02] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

