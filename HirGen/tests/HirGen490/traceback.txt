==========mod==========
#[version = "0.0.5"]
def @func_3160() -> (Tensor[(12, 13, 4), float64],) {
  %0 = @func_2427() /* ty=Tensor[(12, 13, 4), float64] */;
  (%0,)
}

def @func_9726() -> Tensor[(12, 9, 4), float64] {
  @func_9688() /* ty=Tensor[(12, 9, 4), float64] */
}

def @func_5904() -> (Tensor[(180, 8), float32], Tensor[(12, 9, 4), float64], Tensor[(12, 13, 4), bool]) {
  %1 = @func_3792() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), bool], Tensor[(432), float32], Tensor[(180, 8), float32]) */;
  %2 = @func_3561() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64]) */;
  %3 = @func_2574() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool]) */;
  %4 = %1.3;
  %5 = %2.1;
  %6 = %3.2;
  (%4, %5, %6)
}

def @func_7745() -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), bool], Tensor[(12, 9, 4), float64]) {
  %7 = @func_6312() /* ty=(Tensor[(624), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), bool]) */;
  %8 = %7.1;
  %9 = @func_4181() /* ty=Tensor[(12, 13, 4), float64] */;
  %10 = @func_5586() /* ty=Tensor[(12, 13, 4), bool] */;
  %11 = @func_7262() /* ty=Tensor[(12, 9, 4), float64] */;
  (%8, %9, %10, %11)
}

def @func_8775(%var_8736: Tensor[(1440), float32]) -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64], Tensor[(728), uint8], Tensor[(1440), float32], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) {
  %12 = @func_4304() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %13 = cast(%var_8736, dtype="float32") /* ty=Tensor[(1440), float32] */;
  %14 = reshape(%13, newshape=[10, 9, 16]) /* ty=Tensor[(10, 9, 16), float32] */;
  %15 = @func_738(%14) /* ty=(Tensor[(13, 14, 4), float64], Tensor[(728), uint8], Tensor[(432), float32], Tensor[(10, 9, 16), float32]) */;
  %16 = @func_6735() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64]) */;
  %17 = @func_2113() /* ty=Tensor[(12, 13, 4), float64] */;
  %18 = @func_5586() /* ty=Tensor[(12, 13, 4), bool] */;
  %19 = %12.0;
  %20 = %15.1;
  %21 = %16.0;
  %22 = @func_2304() /* ty=Tensor[(12, 13, 4), float32] */;
  (%17, %18, %19, %20, %var_8736, %21, %22)
}

def @func_5650() -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) {
  %23 = @func_1254() /* ty=(Tensor[(15, 15, 7), float32], Tensor[(12, 13, 4), float64], Tensor[(624), float64]) */;
  %24 = %23.1;
  %25 = cast(%24, dtype="bool") /* ty=Tensor[(12, 13, 4), bool] */;
  %26 = reshape(%25, newshape=[12, 13, 4]) /* ty=Tensor[(12, 13, 4), bool] */;
  %27 = @func_1843(%26) /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64]) */;
  %28 = %27.0;
  (%24, %28)
}

def @func_4236(%var_4188: Tensor[(11, 16, 13), float64]) -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64], Tensor[(11, 16, 13), bool], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64]) {
  %29 = @func_1402() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %30 = @func_2842() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %31 = cast(%var_4188, dtype="float64") /* ty=Tensor[(11, 16, 13), float64] */;
  %32 = acosh(%31) /* ty=Tensor[(11, 16, 13), float64] */;
  %33 = cast(%var_4188, dtype="bool") /* ty=Tensor[(11, 16, 13), bool] */;
  %34 = shape_of(%32, dtype="int32") /* ty=Tensor[(3), int32] */;
  %35 = cast(%32, dtype="bool") /* ty=Tensor[(11, 16, 13), bool] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %37 = @func_2574() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool]) */;
  %38 = @func_4181() /* ty=Tensor[(12, 13, 4), float64] */;
  %39 = %29.0;
  %40 = %30.0;
  %41 = less(%35, %36) /* ty=Tensor[(11, 16, 13), bool] */;
  %42 = %37.1;
  %43 = @func_2113() /* ty=Tensor[(12, 13, 4), float64] */;
  (%38, %39, %40, %41, %42, %43)
}

def @func_7980(%var_7951: Tensor[(7, 104), uint8], %var_7962: Tensor[(7, 104), int64], %var_7968: Tensor[(7, 104), uint8]) -> (Tensor[(7, 104), int16], Tensor[(7, 104), uint16], Tensor[(7, 104), float32], Tensor[(12, 13, 4), float64]) {
  %44 = @func_6841() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(728), float32], Tensor[(7, 104), uint8]) */;
  %45 = %44.2;
  %46 = cast(%var_7951, dtype="int64") /* ty=Tensor[(7, 104), int64] */;
  %47 = shape_of(%45, dtype="int32") /* ty=Tensor[(2), int32] */;
  %48 = cast(%45, dtype="int64") /* ty=Tensor[(7, 104), int64] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %50 = add(%48, %49) /* ty=Tensor[(7, 104), int64] */;
  %51 = cast(%var_7962, dtype="int16") /* ty=Tensor[(7, 104), int16] */;
  %52 = shape_of(%50, dtype="int32") /* ty=Tensor[(2), int32] */;
  %53 = cast(%50, dtype="int16") /* ty=Tensor[(7, 104), int16] */;
  %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %55 = cast(%var_7968, dtype="uint16") /* ty=Tensor[(7, 104), uint16] */;
  %56 = shape_of(%45, dtype="int32") /* ty=Tensor[(2), int32] */;
  %57 = cast(%45, dtype="uint16") /* ty=Tensor[(7, 104), uint16] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %59 = cast(%var_7951, dtype="float32") /* ty=Tensor[(7, 104), float32] */;
  %60 = @func_6735() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64]) */;
  %61 = bitwise_or(%53, %54) /* ty=Tensor[(7, 104), int16] */;
  %62 = logical_xor(%57, %58) /* ty=Tensor[(7, 104), uint16] */;
  %63 = sinh(%59) /* ty=Tensor[(7, 104), float32] */;
  %64 = %60.1;
  (%61, %62, %63, %64)
}

def @func_6794() -> Tensor[(728), float64] {
  @func_3200() /* ty=Tensor[(728), float64] */
}

def @func_3792() -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), bool], Tensor[(432), float32], Tensor[(180, 8), float32]) {
  %65 = @func_2357() /* ty=Tensor[(12, 13, 4), float64] */;
  %66 = cast(%65, dtype="float32") /* ty=Tensor[(12, 13, 4), float32] */;
  %67 = reshape(%66, newshape=[12, 13, 4]) /* ty=Tensor[(12, 13, 4), float32] */;
  %68 = cast(meta[relay.Constant][0] /* ty=Tensor[(180, 8), float32] */, dtype="float32") /* ty=Tensor[(180, 8), float32] */;
  %69 = reshape(%68, newshape=[10, 9, 16]) /* ty=Tensor[(10, 9, 16), float32] */;
  %70 = @func_738(%69) /* ty=(Tensor[(13, 14, 4), float64], Tensor[(728), uint8], Tensor[(432), float32], Tensor[(10, 9, 16), float32]) */;
  %71 = @func_3326(%67) /* ty=Tensor[(12, 13, 4), bool] */;
  %72 = %70.2;
  (%65, %71, %72, meta[relay.Constant][0] /* ty=Tensor[(180, 8), float32] */)
}

def @func_2785(%var_2777: Tensor[(270), float32]) -> (Tensor[(12, 13, 4), float32], Tensor[(15, 9, 2), float32], Tensor[(270), float32], Tensor[(624), float64]) {
  %73 = @func_1990() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(13, 14, 4), float64], Tensor[(1440, 1), float32], Tensor[(12, 13, 4), float32]) */;
  %74 = cast(%var_2777, dtype="float32") /* ty=Tensor[(270), float32] */;
  %75 = reshape(%74, newshape=[15, 9, 2]) /* ty=Tensor[(15, 9, 2), float32] */;
  %76 = @func_1018(%75) /* ty=(Tensor[(15, 9, 2), float32],) */;
  %77 = @func_1254() /* ty=(Tensor[(15, 15, 7), float32], Tensor[(12, 13, 4), float64], Tensor[(624), float64]) */;
  %78 = %73.3;
  %79 = %76.0;
  %80 = %77.2;
  (%78, %79, %var_2777, %80)
}

def @func_5281() -> Tensor[(12, 13, 4), float64] {
  @func_4181() /* ty=Tensor[(12, 13, 4), float64] */
}

def @func_8911(%var_8871: Tensor[(12, 13, 4), float64]) -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(11, 10, 7), uint16], float64, Tensor[(770), float64]) {
  %81 = @func_4181() /* ty=Tensor[(12, 13, 4), float64] */;
  %82 = cast(%var_8871, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %83 = shape_of(%81, dtype="int32") /* ty=Tensor[(3), int32] */;
  %84 = cast(%81, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %86 = @func_1402() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %87 = cast(9.60122f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %88 = cast(meta[relay.Constant][1] /* ty=Tensor[(770), float64] */, dtype="float64") /* ty=Tensor[(770), float64] */;
  %89 = cast(meta[relay.Constant][1] /* ty=Tensor[(770), float64] */, dtype="float64") /* ty=Tensor[(770), float64] */;
  %90 = reshape(%87, newshape=[]) /* ty=float64 */;
  %91 = reshape(%88, newshape=[11, 10, 7]) /* ty=Tensor[(11, 10, 7), float64] */;
  %92 = reshape(%89, newshape=[11, 10, 7]) /* ty=Tensor[(11, 10, 7), float64] */;
  %93 = @func_7319(%90, %91, %92) /* ty=(Tensor[(11, 10, 7), uint16], Tensor[(11, 10, 7), uint64]) */;
  %94 = floor_mod(%84, %85) /* ty=Tensor[(12, 13, 4), float64] */;
  %95 = %86.0;
  %96 = %93.0;
  (%94, %95, %96, 9.60122f64 /* ty=float64 */, meta[relay.Constant][1] /* ty=Tensor[(770), float64] */)
}

def @func_2655(%var_2644: Tensor[(12, 13, 4), float64]) -> (Tensor[(12, 13, 4), bool],) {
  %97 = @func_2219() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %98 = %97.0;
  %99 = cast(%var_2644, dtype="bool") /* ty=Tensor[(12, 13, 4), bool] */;
  %100 = shape_of(%98, dtype="int32") /* ty=Tensor[(3), int32] */;
  %101 = cast(%98, dtype="bool") /* ty=Tensor[(12, 13, 4), bool] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %103 = greater_equal(%101, %102) /* ty=Tensor[(12, 13, 4), bool] */;
  (%103,)
}

def @func_5194() -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64]) {
  %104 = @func_3122() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %105 = @func_1402() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %106 = @func_2842() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %107 = %104.0;
  %108 = @func_2113() /* ty=Tensor[(12, 13, 4), float64] */;
  %109 = %105.0;
  %110 = %106.0;
  (%107, %108, %109, %110)
}

def @func_2739() -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) {
  %111 = @func_2219() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %112 = %111.0;
  %113 = cast(%112, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %114 = @func_2613() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %115 = rsqrt(%113) /* ty=Tensor[(12, 13, 4), float64] */;
  %116 = %114.0;
  (%115, %116)
}

def @func_8118() -> (Tensor[(12, 13, 4), float32], Tensor[(432), float32], Tensor[(8, 84), uint64]) {
  %117 = @func_7821() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) */;
  %118 = cast(meta[relay.Constant][2] /* ty=Tensor[(8, 84), uint64] */, dtype="uint64") /* ty=Tensor[(8, 84), uint64] */;
  %119 = reshape(%118, newshape=[672]) /* ty=Tensor[(672), uint64] */;
  %120 = @func_4881(%119) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(16, 6, 7), uint64], Tensor[(672), uint64], Tensor[(432), float32]) */;
  %121 = %117.1;
  %122 = %120.3;
  (%121, %122, meta[relay.Constant][2] /* ty=Tensor[(8, 84), uint64] */)
}

def @func_8207() -> Tensor[(12, 13, 4), float64] {
  %123 = @func_4304() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %123.0
}

def @func_4274(%var_4269: float64) -> Tensor[(14, 6, 15), float64] {
  %124 = cast(%var_4269, dtype="float64") /* ty=float64 */;
  %125 = cast(meta[relay.Constant][3] /* ty=Tensor[(14, 6, 15), float64] */, dtype="float64") /* ty=Tensor[(14, 6, 15), float64] */;
  power(%124, %125) /* ty=Tensor[(14, 6, 15), float64] */
}

def @func_9052() -> (Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) {
  %126 = @func_6623() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %127 = @func_4134() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %128 = @func_6312() /* ty=(Tensor[(624), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), bool]) */;
  %129 = @func_7821() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) */;
  %130 = %126.0;
  %131 = %127.0;
  %132 = %128.1;
  %133 = %129.1;
  (%130, %131, %132, %133)
}

def @func_3615() -> (Tensor[(728), float64],) {
  %134 = @func_3200() /* ty=Tensor[(728), float64] */;
  %135 = cast(%134, dtype="float64") /* ty=Tensor[(728), float64] */;
  %136 = sigmoid(%135) /* ty=Tensor[(728), float64] */;
  (%136,)
}

def @func_5762() -> Tensor[(12, 13, 4), float32] {
  %137 = @func_2467() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %138 = %137.0;
  %139 = cast(meta[relay.Constant][4] /* ty=Tensor[(12, 13, 4), float32] */, dtype="float32") /* ty=Tensor[(12, 13, 4), float32] */;
  %140 = shape_of(%138, dtype="int32") /* ty=Tensor[(3), int32] */;
  %141 = cast(%138, dtype="float32") /* ty=Tensor[(12, 13, 4), float32] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%141, %142) /* ty=Tensor[(12, 13, 4), float32] */
}

def @func_6841() -> (Tensor[(12, 13, 4), float32], Tensor[(728), float32], Tensor[(7, 104), uint8]) {
  %143 = cast(meta[relay.Constant][5] /* ty=Tensor[(7, 104), uint8] */, dtype="uint8") /* ty=Tensor[(7, 104), uint8] */;
  %144 = cast(meta[relay.Constant][5] /* ty=Tensor[(7, 104), uint8] */, dtype="uint8") /* ty=Tensor[(7, 104), uint8] */;
  %145 = reshape(%143, newshape=[728]) /* ty=Tensor[(728), uint8] */;
  %146 = reshape(%144, newshape=[728]) /* ty=Tensor[(728), uint8] */;
  %147 = @func_3495(%145, %146) /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(728), uint8], Tensor[(728), uint16], Tensor[(12, 13, 4), float32], Tensor[(728), float32]) */;
  %148 = @func_5762() /* ty=Tensor[(12, 13, 4), float32] */;
  %149 = %147.7;
  (%148, %149, meta[relay.Constant][5] /* ty=Tensor[(7, 104), uint8] */)
}

def @func_9688() -> Tensor[(12, 9, 4), float64] {
  %150 = @func_8661() /* ty=(Tensor[(12, 9, 4), float64],) */;
  %150.0
}

def @func_1254() -> (Tensor[(15, 15, 7), float32], Tensor[(12, 13, 4), float64], Tensor[(624), float64]) {
  %151 = cast(-9.05289f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %152 = cast(meta[relay.Constant][6] /* ty=Tensor[(15, 15, 7), float32] */, dtype="float32") /* ty=Tensor[(15, 15, 7), float32] */;
  %153 = cast(meta[relay.Constant][7] /* ty=Tensor[(624), float64] */, dtype="float64") /* ty=Tensor[(624), float64] */;
  %154 = reshape(%153, newshape=[12, 13, 4]) /* ty=Tensor[(12, 13, 4), float64] */;
  %155 = @func_247(%154) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 9, 4), float64], Tensor[(432), float32]) */;
  %156 = power(%151, %152) /* ty=Tensor[(15, 15, 7), float32] */;
  %157 = %155.0;
  (%156, %157, meta[relay.Constant][7] /* ty=Tensor[(624), float64] */)
}

def @func_2019() -> (Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64]) {
  %158 = @func_1402() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %159 = %158.0;
  %160 = cast(%159, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %161 = reshape(%160, newshape=[12, 13, 4]) /* ty=Tensor[(12, 13, 4), float64] */;
  %162 = @func_247(%161) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 9, 4), float64], Tensor[(432), float32]) */;
  %163 = %162.1;
  (%159, %163)
}

def @func_3832(%var_3819: Tensor[(3, 2, 16), float32]) -> Tensor[(3, 2, 16), float32] {
  %164 = cast(meta[relay.Constant][8] /* ty=Tensor[(3, 2, 16), float32] */, dtype="float32") /* ty=Tensor[(3, 2, 16), float32] */;
  %165 = shape_of(%var_3819, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(%var_3819, dtype="float32") /* ty=Tensor[(3, 2, 16), float32] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  maximum(%166, %167) /* ty=Tensor[(3, 2, 16), float32] */
}

def @func_5586() -> Tensor[(12, 13, 4), bool] {
  %168 = @func_4412() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 9, 4), float64], Tensor[(728), uint8], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64], Tensor[(728), uint8], Tensor[(12, 9, 4), float64]) */;
  %168.0
}

def @func_2510() -> (Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(624), float64]) {
  %169 = @func_2019() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64]) */;
  %170 = @func_2155() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32]) */;
  %171 = @func_1254() /* ty=(Tensor[(15, 15, 7), float32], Tensor[(12, 13, 4), float64], Tensor[(624), float64]) */;
  %172 = %169.0;
  %173 = %170.0;
  %174 = %171.2;
  (%172, %173, %174)
}

def @func_2304() -> Tensor[(12, 13, 4), float32] {
  %175 = @func_2155() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32]) */;
  %175.0
}

def @func_6623() -> (Tensor[(12, 13, 4), float32],) {
  %176 = @func_5650() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) */;
  %177 = %176.1;
  (%177,)
}

def @func_8972(%var_8966: Tensor[(5, 14, 7), float64]) -> Tensor[(5, 14, 7), float64] {
  %178 = cast(%var_8966, dtype="float64") /* ty=Tensor[(5, 14, 7), float64] */;
  rsqrt(%178) /* ty=Tensor[(5, 14, 7), float64] */
}

def @func_2991() -> Tensor[(12, 9, 4), float64] {
  %179 = @func_2019() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64]) */;
  %179.1
}

def @func_7044() -> (Tensor[(12, 13, 4), float32],) {
  %180 = @func_3351() /* ty=Tensor[(12, 13, 4), float32] */;
  (%180,)
}

def @func_9405(%var_9360: Tensor[(672), uint64], %var_9395: float64) -> (Tensor[(12, 13, 4), float64], Tensor[(16, 6, 7), uint64], Tensor[(672), uint64], Tensor[(12, 13, 4), float32], Tensor[(728), uint8], float64, Tensor[(384), float64]) {
  %181 = @func_4134() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %182 = cast(%var_9360, dtype="uint64") /* ty=Tensor[(672), uint64] */;
  %183 = reshape(%182, newshape=[672]) /* ty=Tensor[(672), uint64] */;
  %184 = @func_6684(%183) /* ty=(Tensor[(12, 13, 4), bool], Tensor[(16, 6, 7), uint64], Tensor[(672), uint64], Tensor[(12, 13, 4), float64]) */;
  %185 = @func_8041() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float32]) */;
  %186 = cast(%var_9395, dtype="float64") /* ty=float64 */;
  %187 = cast(meta[relay.Constant][9] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %188 = reshape(%186, newshape=[]) /* ty=float64 */;
  %189 = reshape(%187, newshape=[8, 3, 16]) /* ty=Tensor[(8, 3, 16), float64] */;
  %190 = @func_4573(%188, %189) /* ty=(Tensor[(8, 3, 16), float64], Tensor[(15, 9, 2), float32], Tensor[(270), float32], Tensor[(728), uint8]) */;
  %191 = %181.0;
  %192 = %184.1;
  %193 = %185.2;
  %194 = %190.3;
  (%191, %192, %var_9360, %193, %194, %var_9395, meta[relay.Constant][9] /* ty=Tensor[(384), float64] */)
}

def @func_5481() -> Tensor[(624), float64] {
  %195 = @func_2510() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(624), float64]) */;
  %195.2
}

def @func_6254() -> (Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64], Tensor[(432), float32]) {
  %196 = @func_2155() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32]) */;
  %197 = @func_4837() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64], Tensor[(12, 9, 4), float64]) */;
  %198 = cast(meta[relay.Constant][10] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %199 = reshape(%198, newshape=[12, 9, 4]) /* ty=Tensor[(12, 9, 4), float32] */;
  %200 = @func_71(%199) /* ty=(Tensor[(12, 9, 4), float64],) */;
  %201 = %196.0;
  %202 = %197.3;
  %203 = %200.0;
  (%201, %202, %203, meta[relay.Constant][10] /* ty=Tensor[(432), float32] */)
}

def @func_1018(%var_1011: Tensor[(15, 9, 2), float32]) -> (Tensor[(15, 9, 2), float32],) {
  %204 = cast(%var_1011, dtype="float32") /* ty=Tensor[(15, 9, 2), float32] */;
  %205 = sin(%204) /* ty=Tensor[(15, 9, 2), float32] */;
  (%205,)
}

def @func_4488(%var_4477: Tensor[(1, 2288), float64], %var_4484: Tensor[(432), float32]) -> (Tensor[(12, 13, 4), uint32], Tensor[(12, 13, 4), float64], Tensor[(1, 2288), float64], Tensor[(12, 9, 4), float64], Tensor[(432), float32]) {
  %206 = @func_3921() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %207 = %206.0;
  %208 = @func_2467() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %209 = %208.0;
  %210 = cast(%209, dtype="uint32") /* ty=Tensor[(12, 13, 4), uint32] */;
  %211 = shape_of(%207, dtype="int32") /* ty=Tensor[(3), int32] */;
  %212 = cast(%207, dtype="uint32") /* ty=Tensor[(12, 13, 4), uint32] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %214 = cast(%var_4477, dtype="float64") /* ty=Tensor[(1, 2288), float64] */;
  %215 = reshape(%214, newshape=[11, 16, 13]) /* ty=Tensor[(11, 16, 13), float64] */;
  %216 = @func_4236(%215) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64], Tensor[(11, 16, 13), bool], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64]) */;
  %217 = cast(%var_4484, dtype="float32") /* ty=Tensor[(432), float32] */;
  %218 = reshape(%217, newshape=[12, 9, 4]) /* ty=Tensor[(12, 9, 4), float32] */;
  %219 = @func_71(%218) /* ty=(Tensor[(12, 9, 4), float64],) */;
  %220 = bitwise_and(%212, %213) /* ty=Tensor[(12, 13, 4), uint32] */;
  %221 = %216.2;
  %222 = %219.0;
  (%220, %221, %var_4477, %222, %var_4484)
}

def @func_4503(%var_4500: Tensor[(3, 7, 4), float32]) -> Tensor[(3, 7, 4), float32] {
  %223 = cast(%var_4500, dtype="float32") /* ty=Tensor[(3, 7, 4), float32] */;
  asinh(%223) /* ty=Tensor[(3, 7, 4), float32] */
}

def @func_8142() -> (Tensor[(728), float64],) {
  %224 = @func_6794() /* ty=Tensor[(728), float64] */;
  %225 = cast(%224, dtype="float64") /* ty=Tensor[(728), float64] */;
  %226 = erf(%225) /* ty=Tensor[(728), float64] */;
  (%226,)
}

def @func_6684(%var_6674: Tensor[(672), uint64]) -> (Tensor[(12, 13, 4), bool], Tensor[(16, 6, 7), uint64], Tensor[(672), uint64], Tensor[(12, 13, 4), float64]) {
  %227 = @func_2574() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool]) */;
  %228 = cast(%var_6674, dtype="uint64") /* ty=Tensor[(672), uint64] */;
  %229 = reshape(%228, newshape=[672]) /* ty=Tensor[(672), uint64] */;
  %230 = @func_4881(%229) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(16, 6, 7), uint64], Tensor[(672), uint64], Tensor[(432), float32]) */;
  %231 = @func_3122() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %232 = %227.2;
  %233 = %230.1;
  %234 = %231.0;
  (%232, %233, %var_6674, %234)
}

def @func_7937() -> (Tensor[(12, 13, 4), float32],) {
  %235 = @func_3351() /* ty=Tensor[(12, 13, 4), float32] */;
  (%235,)
}

def @func_4134() -> (Tensor[(12, 13, 4), float64],) {
  %236 = @func_3122() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %237 = %236.0;
  (%237,)
}

def @func_8048() -> Tensor[(12, 13, 4), bool] {
  %238 = @func_2574() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool]) */;
  %238.0
}

def @func_1301() -> Tensor[(12, 13, 4), float32] {
  %239 = @func_1254() /* ty=(Tensor[(15, 15, 7), float32], Tensor[(12, 13, 4), float64], Tensor[(624), float64]) */;
  %240 = %239.1;
  %241 = cast(%240, dtype="float32") /* ty=Tensor[(12, 13, 4), float32] */;
  log10(%241) /* ty=Tensor[(12, 13, 4), float32] */
}

def @func_1448() -> Tensor[(12, 13, 4), float64] {
  %242 = @func_1402() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %243 = %242.0;
  %244 = cast(%243, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  log2(%244) /* ty=Tensor[(12, 13, 4), float64] */
}

def @func_6471() -> Tensor[(12, 13, 4), float32] {
  %245 = @func_3661() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(728), float64]) */;
  %245.0
}

def @main(%var_9993: Tensor[(180, 8), uint16]) -> (Tensor[(12, 13, 4), bool], Tensor[(180, 8), uint64], Tensor[(15, 9, 2), float32], Tensor[(180, 8), float64], Tensor[(728), float64], Tensor[(180, 8), float32], Tensor[(180, 8), bool], Tensor[(180, 8), float64]) {
  %246 = @func_2574() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool]) */;
  %247 = @func_8558() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(180, 8), uint8], Tensor[(12, 13, 4), float64], Tensor[(180, 8), float64], Tensor[(12, 13, 4), float32]) */;
  %248 = %247.1;
  %249 = cast(%248, dtype="float64") /* ty=Tensor[(180, 8), float64] */;
  %250 = log(%249) /* ty=Tensor[(180, 8), float64] */;
  %251 = cast(%248, dtype="uint16") /* ty=Tensor[(180, 8), uint16] */;
  %252 = shape_of(%250, dtype="int32") /* ty=Tensor[(2), int32] */;
  %253 = cast(%250, dtype="uint16") /* ty=Tensor[(180, 8), uint16] */;
  %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %255 = left_shift(%253, %254) /* ty=Tensor[(180, 8), uint16] */;
  %256 = cast(%var_9993, dtype="int64") /* ty=Tensor[(180, 8), int64] */;
  %257 = shape_of(%255, dtype="int32") /* ty=Tensor[(2), int32] */;
  %258 = cast(%255, dtype="int64") /* ty=Tensor[(180, 8), int64] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %260 = multiply(%258, %259) /* ty=Tensor[(180, 8), int64] */;
  %261 = cast(%255, dtype="uint64") /* ty=Tensor[(180, 8), uint64] */;
  %262 = shape_of(%260, dtype="int32") /* ty=Tensor[(2), int32] */;
  %263 = cast(%260, dtype="uint64") /* ty=Tensor[(180, 8), uint64] */;
  %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %265 = @func_5304() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(15, 9, 2), float32], Tensor[(6, 45), float32]) */;
  %266 = cast(%var_9993, dtype="float64") /* ty=Tensor[(180, 8), float64] */;
  %267 = @func_6561() /* ty=(Tensor[(728), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) */;
  %268 = cast(%260, dtype="float32") /* ty=Tensor[(180, 8), float32] */;
  %269 = cast(%260, dtype="float64") /* ty=Tensor[(180, 8), float64] */;
  %270 = tan(%269) /* ty=Tensor[(180, 8), float64] */;
  %271 = cast(%270, dtype="float32") /* ty=Tensor[(180, 8), float32] */;
  %272 = sinh(%271) /* ty=Tensor[(180, 8), float32] */;
  %273 = cast(%270, dtype="float64") /* ty=Tensor[(180, 8), float64] */;
  %274 = shape_of(%272, dtype="int32") /* ty=Tensor[(2), int32] */;
  %275 = cast(%272, dtype="float64") /* ty=Tensor[(180, 8), float64] */;
  %276 = dyn.reshape(%273, %274, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %277 = floor_divide(%275, %276) /* ty=Tensor[(180, 8), float64] */;
  %278 = cast(%248, dtype="bool") /* ty=Tensor[(180, 8), bool] */;
  %279 = shape_of(%277, dtype="int32") /* ty=Tensor[(2), int32] */;
  %280 = cast(%277, dtype="bool") /* ty=Tensor[(180, 8), bool] */;
  %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %282 = cast(%272, dtype="float64") /* ty=Tensor[(180, 8), float64] */;
  %283 = %246.2;
  %284 = minimum(%263, %264) /* ty=Tensor[(180, 8), uint64] */;
  %285 = %265.1;
  %286 = erf(%266) /* ty=Tensor[(180, 8), float64] */;
  %287 = %267.0;
  %288 = asinh(%268) /* ty=Tensor[(180, 8), float32] */;
  %289 = less_equal(%280, %281) /* ty=Tensor[(180, 8), bool] */;
  %290 = exp(%282) /* ty=Tensor[(180, 8), float64] */;
  (%283, %284, %285, %286, %287, %288, %289, %290)
}

def @func_3882(%var_3872: Tensor[(6, 3, 11), uint64]) -> Tensor[(6, 3, 11), bool] {
  %291 = cast(meta[relay.Constant][11] /* ty=Tensor[(6, 3, 11), uint64] */, dtype="bool") /* ty=Tensor[(6, 3, 11), bool] */;
  %292 = shape_of(%var_3872, dtype="int32") /* ty=Tensor[(3), int32] */;
  %293 = cast(%var_3872, dtype="bool") /* ty=Tensor[(6, 3, 11), bool] */;
  %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%293, %294) /* ty=Tensor[(6, 3, 11), bool] */
}

def @func_2842() -> (Tensor[(12, 13, 4), float64],) {
  %295 = @func_2357() /* ty=Tensor[(12, 13, 4), float64] */;
  (%295,)
}

def @func_3012() -> Tensor[(12, 13, 4), float64] {
  %296 = @func_1254() /* ty=(Tensor[(15, 15, 7), float32], Tensor[(12, 13, 4), float64], Tensor[(624), float64]) */;
  %296.1
}

def @func_2574() -> (Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool]) {
  %297 = @func_1737() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64]) */;
  %298 = @func_1737() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64]) */;
  %299 = @func_1737() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64]) */;
  %300 = %297.0;
  %301 = %298.0;
  %302 = %299.0;
  (%300, %301, %302)
}

def @func_4304() -> (Tensor[(12, 13, 4), float64],) {
  %303 = @func_4019() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %304 = %303.0;
  (%304,)
}

def @func_7612() -> Tensor[(12, 13, 4), float64] {
  @func_4181() /* ty=Tensor[(12, 13, 4), float64] */
}

def @func_1645(%var_1633: Tensor[(672), uint64]) -> (Tensor[(12, 13, 4), float32], Tensor[(16, 6, 7), uint64], Tensor[(672), uint64], Tensor[(12, 13, 4), float32]) {
  %305 = @func_1402() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %306 = cast(%var_1633, dtype="uint64") /* ty=Tensor[(672), uint64] */;
  %307 = reshape(%306, newshape=[16, 6, 7]) /* ty=Tensor[(16, 6, 7), uint64] */;
  %308 = %305.0;
  %309 = cast(%308, dtype="uint32") /* ty=Tensor[(12, 13, 4), uint32] */;
  %310 = reshape(%309, newshape=[12, 13, 4]) /* ty=Tensor[(12, 13, 4), uint32] */;
  %311 = @func_1612(%310) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(15, 9, 2), float32], Tensor[(30, 9), float32], Tensor[(15, 9, 2), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64]) */;
  %312 = %311.8;
  %313 = cast(%312, dtype="float32") /* ty=Tensor[(12, 13, 4), float32] */;
  %314 = @func_977(%307) /* ty=Tensor[(16, 6, 7), uint64] */;
  %315 = cos(%313) /* ty=Tensor[(12, 13, 4), float32] */;
  (%308, %314, %var_1633, %315)
}

def @func_2613() -> (Tensor[(12, 13, 4), float32],) {
  %316 = @func_2019() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64]) */;
  %317 = %316.0;
  (%317,)
}

def @func_3904() -> (Tensor[(12, 13, 4), bool],) {
  %318 = @func_2574() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool]) */;
  %319 = %318.1;
  (%319,)
}

def @func_7081() -> (Tensor[(728), uint8],) {
  %320 = @func_3064() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(1440, 1), float32], Tensor[(728), uint8], Tensor[(728), float64]) */;
  %321 = %320.2;
  (%321,)
}

def @func_6100() -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(10, 9, 16), float32], Tensor[(1440), float32]) {
  %322 = @func_3561() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64]) */;
  %323 = cast(meta[relay.Constant][12] /* ty=Tensor[(1440), float32] */, dtype="float32") /* ty=Tensor[(1440), float32] */;
  %324 = reshape(%323, newshape=[10, 9, 16]) /* ty=Tensor[(10, 9, 16), float32] */;
  %325 = @func_738(%324) /* ty=(Tensor[(13, 14, 4), float64], Tensor[(728), uint8], Tensor[(432), float32], Tensor[(10, 9, 16), float32]) */;
  %326 = @func_4181() /* ty=Tensor[(12, 13, 4), float64] */;
  %327 = %322.0;
  %328 = %325.3;
  (%326, %327, %328, meta[relay.Constant][12] /* ty=Tensor[(1440), float32] */)
}

def @func_8558() -> (Tensor[(12, 13, 4), float64], Tensor[(180, 8), uint8], Tensor[(12, 13, 4), float64], Tensor[(180, 8), float64], Tensor[(12, 13, 4), float32]) {
  %329 = @func_3792() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), bool], Tensor[(432), float32], Tensor[(180, 8), float32]) */;
  %330 = @func_7770() /* ty=Tensor[(180, 8), float32] */;
  %331 = cast(meta[relay.Constant][13] /* ty=Tensor[(180, 8), float32] */, dtype="uint8") /* ty=Tensor[(180, 8), uint8] */;
  %332 = shape_of(%330, dtype="int32") /* ty=Tensor[(2), int32] */;
  %333 = cast(%330, dtype="uint8") /* ty=Tensor[(180, 8), uint8] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %335 = @func_4019() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %336 = cast(meta[relay.Constant][13] /* ty=Tensor[(180, 8), float32] */, dtype="float32") /* ty=Tensor[(180, 8), float32] */;
  %337 = shape_of(%330, dtype="int32") /* ty=Tensor[(2), int32] */;
  %338 = cast(%330, dtype="float32") /* ty=Tensor[(180, 8), float32] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %340 = power(%338, %339) /* ty=Tensor[(180, 8), float32] */;
  %341 = cast(%340, dtype="float32") /* ty=Tensor[(180, 8), float32] */;
  %342 = sigmoid(%341) /* ty=Tensor[(180, 8), float32] */;
  %343 = cast(%342, dtype="float64") /* ty=Tensor[(180, 8), float64] */;
  %344 = sqrt(%343) /* ty=Tensor[(180, 8), float64] */;
  %345 = cast(%344, dtype="float64") /* ty=Tensor[(180, 8), float64] */;
  %346 = @func_6254() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64], Tensor[(432), float32]) */;
  %347 = %329.0;
  %348 = right_shift(%333, %334) /* ty=Tensor[(180, 8), uint8] */;
  %349 = %335.0;
  %350 = cos(%345) /* ty=Tensor[(180, 8), float64] */;
  %351 = %346.0;
  (%347, %348, %349, %350, %351)
}

def @func_2219() -> (Tensor[(12, 13, 4), float64],) {
  %352 = @func_1301() /* ty=Tensor[(12, 13, 4), float32] */;
  %353 = cast(%352, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %354 = erf(%353) /* ty=Tensor[(12, 13, 4), float64] */;
  (%354,)
}

def @func_9921() -> (Tensor[(12, 13, 4), float32],) {
  %355 = @func_6623() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %356 = %355.0;
  (%356,)
}

def @func_7821() -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) {
  %357 = @func_2739() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) */;
  %358 = @func_6100() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(10, 9, 16), float32], Tensor[(1440), float32]) */;
  %359 = %357.0;
  %360 = %358.1;
  (%359, %360)
}

def @func_4019() -> (Tensor[(12, 13, 4), float64],) {
  %361 = @func_3988() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(728), uint8], Tensor[(728), uint8], Tensor[(12, 13, 4), float64]) */;
  %362 = %361.3;
  (%362,)
}

def @func_8661() -> (Tensor[(12, 9, 4), float64],) {
  %363 = @func_6177() /* ty=Tensor[(12, 9, 4), float64] */;
  (%363,)
}

def @func_2915() -> (Tensor[(12, 9, 4), float64],) {
  %364 = @func_2019() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64]) */;
  %365 = %364.1;
  (%365,)
}

def @func_9583(%var_9535: float32, %var_9536: Tensor[(12, 4, 5), float32], %var_9547: Tensor[(48, 2), float32]) -> (Tensor[(12, 4, 5), float32], Tensor[(12, 13, 4), bool], Tensor[(3, 2, 16), float64], Tensor[(12, 4, 5), float32]) {
  %366 = cast(%var_9535, dtype="float32") /* ty=float32 */;
  %367 = cast(%var_9536, dtype="float32") /* ty=Tensor[(12, 4, 5), float32] */;
  %368 = cast(%var_9547, dtype="float32") /* ty=Tensor[(48, 2), float32] */;
  %369 = reshape(%368, newshape=[3, 2, 16]) /* ty=Tensor[(3, 2, 16), float32] */;
  %370 = @func_3832(%369) /* ty=Tensor[(3, 2, 16), float32] */;
  %371 = cast(%var_9547, dtype="float64") /* ty=Tensor[(48, 2), float64] */;
  %372 = shape_of(%370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%370, dtype="float64") /* ty=Tensor[(3, 2, 16), float64] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %375 = cast(%var_9536, dtype="float64") /* ty=Tensor[(12, 4, 5), float64] */;
  %376 = cos(%375) /* ty=Tensor[(12, 4, 5), float64] */;
  %377 = cast(%376, dtype="float32") /* ty=Tensor[(12, 4, 5), float32] */;
  %378 = power(%366, %367) /* ty=Tensor[(12, 4, 5), float32] */;
  %379 = @func_8048() /* ty=Tensor[(12, 13, 4), bool] */;
  %380 = divide(%373, %374) /* ty=Tensor[(3, 2, 16), float64] */;
  %381 = sin(%377) /* ty=Tensor[(12, 4, 5), float32] */;
  (%378, %379, %380, %381)
}

def @func_3495(%var_3441: Tensor[(728), uint8], %var_3449: Tensor[(728), uint8]) -> (Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(728), uint8], Tensor[(728), uint16], Tensor[(12, 13, 4), float32], Tensor[(728), float32]) {
  %382 = @func_2739() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) */;
  %383 = @func_2915() /* ty=(Tensor[(12, 9, 4), float64],) */;
  %384 = cast(meta[relay.Constant][14] /* ty=Tensor[(728), uint8] */, dtype="uint8") /* ty=Tensor[(728), uint8] */;
  %385 = shape_of(%var_3441, dtype="int32") /* ty=Tensor[(1), int32] */;
  %386 = cast(%var_3441, dtype="uint8") /* ty=Tensor[(728), uint8] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %388 = cast(%var_3449, dtype="uint16") /* ty=Tensor[(728), uint16] */;
  %389 = shape_of(%var_3441, dtype="int32") /* ty=Tensor[(1), int32] */;
  %390 = cast(%var_3441, dtype="uint16") /* ty=Tensor[(728), uint16] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %392 = @func_2510() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(624), float64]) */;
  %393 = cast(%var_3441, dtype="uint8") /* ty=Tensor[(728), uint8] */;
  %394 = reshape(%393, newshape=[728]) /* ty=Tensor[(728), uint8] */;
  %395 = @func_2880(%394) /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool], Tensor[(13, 14, 4), float64], Tensor[(728), uint8], Tensor[(432), float32]) */;
  %396 = %395.3;
  %397 = cast(%396, dtype="float32") /* ty=Tensor[(728), float32] */;
  %398 = %382.1;
  %399 = @func_2304() /* ty=Tensor[(12, 13, 4), float32] */;
  %400 = %383.0;
  %401 = @func_1448() /* ty=Tensor[(12, 13, 4), float64] */;
  %402 = logical_xor(%386, %387) /* ty=Tensor[(728), uint8] */;
  %403 = bitwise_or(%390, %391) /* ty=Tensor[(728), uint16] */;
  %404 = %392.1;
  %405 = cos(%397) /* ty=Tensor[(728), float32] */;
  (%398, %399, %400, %401, %402, %403, %404, %405)
}

def @func_2357() -> Tensor[(12, 13, 4), float64] {
  @func_1448() /* ty=Tensor[(12, 13, 4), float64] */
}

def @func_7319(%var_7274: float64, %var_7275: Tensor[(11, 10, 7), float64], %var_7284: Tensor[(11, 10, 7), float64]) -> (Tensor[(11, 10, 7), uint16], Tensor[(11, 10, 7), uint64]) {
  %406 = cast(%var_7274, dtype="float64") /* ty=float64 */;
  %407 = cast(%var_7275, dtype="float64") /* ty=Tensor[(11, 10, 7), float64] */;
  %408 = floor_divide(%406, %407) /* ty=Tensor[(11, 10, 7), float64] */;
  %409 = cast(%var_7284, dtype="uint16") /* ty=Tensor[(11, 10, 7), uint16] */;
  %410 = shape_of(%408, dtype="int32") /* ty=Tensor[(3), int32] */;
  %411 = cast(%408, dtype="uint16") /* ty=Tensor[(11, 10, 7), uint16] */;
  %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %413 = cast(%var_7274, dtype="uint64") /* ty=uint64 */;
  %414 = cast(%var_7275, dtype="uint64") /* ty=Tensor[(11, 10, 7), uint64] */;
  %415 = minimum(%411, %412) /* ty=Tensor[(11, 10, 7), uint16] */;
  %416 = bitwise_or(%413, %414) /* ty=Tensor[(11, 10, 7), uint64] */;
  (%415, %416)
}

def @func_3326(%var_3313: Tensor[(12, 13, 4), float32]) -> Tensor[(12, 13, 4), bool] {
  %417 = @func_2304() /* ty=Tensor[(12, 13, 4), float32] */;
  %418 = cast(%var_3313, dtype="bool") /* ty=Tensor[(12, 13, 4), bool] */;
  %419 = shape_of(%417, dtype="int32") /* ty=Tensor[(3), int32] */;
  %420 = cast(%417, dtype="bool") /* ty=Tensor[(12, 13, 4), bool] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%420, %421) /* ty=Tensor[(12, 13, 4), bool] */
}

def @func_4573(%var_4544: float64, %var_4545: Tensor[(8, 3, 16), float64]) -> (Tensor[(8, 3, 16), float64], Tensor[(15, 9, 2), float32], Tensor[(270), float32], Tensor[(728), uint8]) {
  %422 = cast(%var_4544, dtype="float64") /* ty=float64 */;
  %423 = cast(%var_4545, dtype="float64") /* ty=Tensor[(8, 3, 16), float64] */;
  %424 = cast(meta[relay.Constant][15] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
  %425 = reshape(%424, newshape=[15, 9, 2]) /* ty=Tensor[(15, 9, 2), float32] */;
  %426 = @func_1018(%425) /* ty=(Tensor[(15, 9, 2), float32],) */;
  %427 = @func_3988() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(728), uint8], Tensor[(728), uint8], Tensor[(12, 13, 4), float64]) */;
  %428 = floor_divide(%422, %423) /* ty=Tensor[(8, 3, 16), float64] */;
  %429 = %426.0;
  %430 = %427.2;
  (%428, %429, meta[relay.Constant][15] /* ty=Tensor[(270), float32] */, %430)
}

def @func_3351() -> Tensor[(12, 13, 4), float32] {
  %431 = @func_2613() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %431.0
}

def @func_8857() -> Tensor[(728), uint8] {
  %432 = @func_7081() /* ty=(Tensor[(728), uint8],) */;
  %432.0
}

def @func_8330() -> (Tensor[(12, 13, 4), bool],) {
  %433 = @func_5904() /* ty=(Tensor[(180, 8), float32], Tensor[(12, 9, 4), float64], Tensor[(12, 13, 4), bool]) */;
  %434 = %433.2;
  (%434,)
}

def @func_5271() -> (Tensor[(12, 13, 4), float64],) {
  %435 = @func_5194() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64]) */;
  %436 = %435.0;
  (%436,)
}

def @func_7897(%var_7854: Tensor[(8, 4, 14), float64]) -> (Tensor[(8, 4, 14), float64], Tensor[(12, 13, 4), float32], Tensor[(8, 4, 14), int32]) {
  %437 = cast(%var_7854, dtype="float64") /* ty=Tensor[(8, 4, 14), float64] */;
  %438 = @func_5650() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) */;
  %439 = cast(%var_7854, dtype="float32") /* ty=Tensor[(8, 4, 14), float32] */;
  %440 = asin(%439) /* ty=Tensor[(8, 4, 14), float32] */;
  %441 = cast(%440, dtype="float64") /* ty=Tensor[(8, 4, 14), float64] */;
  %442 = shape_of(%var_7854, dtype="int32") /* ty=Tensor[(3), int32] */;
  %443 = cast(%var_7854, dtype="float64") /* ty=Tensor[(8, 4, 14), float64] */;
  %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %445 = floor_divide(%443, %444) /* ty=Tensor[(8, 4, 14), float64] */;
  %446 = cast(%440, dtype="int32") /* ty=Tensor[(8, 4, 14), int32] */;
  %447 = shape_of(%445, dtype="int32") /* ty=Tensor[(3), int32] */;
  %448 = cast(%445, dtype="int32") /* ty=Tensor[(8, 4, 14), int32] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %450 = erf(%437) /* ty=Tensor[(8, 4, 14), float64] */;
  %451 = %438.1;
  %452 = bitwise_or(%448, %449) /* ty=Tensor[(8, 4, 14), int32] */;
  (%450, %451, %452)
}

def @func_2467() -> (Tensor[(12, 13, 4), float32],) {
  %453 = @func_1301() /* ty=Tensor[(12, 13, 4), float32] */;
  (%453,)
}

def @func_247(%var_235: Tensor[(12, 13, 4), float64]) -> (Tensor[(12, 13, 4), float64], Tensor[(12, 9, 4), float64], Tensor[(432), float32]) {
  %454 = cast(%var_235, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %455 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(12, 13, 4), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %456 = cast(meta[relay.Constant][16] /* ty=Tensor[(12, 13, 4), float64] */, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %458 = cast(meta[relay.Constant][17] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %459 = reshape(%458, newshape=[12, 9, 4]) /* ty=Tensor[(12, 9, 4), float32] */;
  %460 = @func_71(%459) /* ty=(Tensor[(12, 9, 4), float64],) */;
  %461 = minimum(%456, %457) /* ty=Tensor[(12, 13, 4), float64] */;
  %462 = %460.0;
  (%461, %462, meta[relay.Constant][17] /* ty=Tensor[(432), float32] */)
}

def @func_5304() -> (Tensor[(12, 13, 4), float32], Tensor[(15, 9, 2), float32], Tensor[(6, 45), float32]) {
  %463 = cast(meta[relay.Constant][18] /* ty=Tensor[(6, 45), float32] */, dtype="float32") /* ty=Tensor[(6, 45), float32] */;
  %464 = reshape(%463, newshape=[15, 9, 2]) /* ty=Tensor[(15, 9, 2), float32] */;
  %465 = @func_1018(%464) /* ty=(Tensor[(15, 9, 2), float32],) */;
  %466 = @func_2896() /* ty=Tensor[(12, 13, 4), float32] */;
  %467 = %465.0;
  (%466, %467, meta[relay.Constant][18] /* ty=Tensor[(6, 45), float32] */)
}

def @func_1843(%var_1793: Tensor[(12, 13, 4), bool]) -> (Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64]) {
  %468 = @func_1737() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64]) */;
  %469 = %468.0;
  %470 = cast(%var_1793, dtype="uint32") /* ty=Tensor[(12, 13, 4), uint32] */;
  %471 = shape_of(%469, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(%469, dtype="uint32") /* ty=Tensor[(12, 13, 4), uint32] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %474 = maximum(%472, %473) /* ty=Tensor[(12, 13, 4), uint32] */;
  %475 = cast(%474, dtype="bool") /* ty=Tensor[(12, 13, 4), bool] */;
  %476 = shape_of(%469, dtype="int32") /* ty=Tensor[(3), int32] */;
  %477 = cast(%469, dtype="bool") /* ty=Tensor[(12, 13, 4), bool] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %479 = cast(%474, dtype="float32") /* ty=Tensor[(12, 13, 4), float32] */;
  %480 = @func_1301() /* ty=Tensor[(12, 13, 4), float32] */;
  %481 = not_equal(%477, %478) /* ty=Tensor[(12, 13, 4), bool] */;
  %482 = acosh(%479) /* ty=Tensor[(12, 13, 4), float32] */;
  %483 = @func_1448() /* ty=Tensor[(12, 13, 4), float64] */;
  (%480, %481, %482, %483)
}

def @func_621(%var_606: Tensor[(13, 14, 4), uint8], %var_619: Tensor[(2, 216), float32]) -> (Tensor[(13, 14, 4), float64], Tensor[(12, 9, 4), float64], Tensor[(2, 216), float32]) {
  %484 = cast(meta[relay.Constant][19] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %485 = cast(%var_606, dtype="uint8") /* ty=Tensor[(13, 14, 4), uint8] */;
  %486 = bitwise_xor(%484, %485) /* ty=Tensor[(13, 14, 4), uint8] */;
  %487 = cast(%486, dtype="float64") /* ty=Tensor[(13, 14, 4), float64] */;
  %488 = cast(%var_619, dtype="float32") /* ty=Tensor[(2, 216), float32] */;
  %489 = reshape(%488, newshape=[12, 9, 4]) /* ty=Tensor[(12, 9, 4), float32] */;
  %490 = @func_71(%489) /* ty=(Tensor[(12, 9, 4), float64],) */;
  %491 = atanh(%487) /* ty=Tensor[(13, 14, 4), float64] */;
  %492 = %490.0;
  (%491, %492, %var_619)
}

def @func_6561() -> (Tensor[(728), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) {
  %493 = @func_3988() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(728), uint8], Tensor[(728), uint8], Tensor[(12, 13, 4), float64]) */;
  %494 = %493.2;
  %495 = cast(%494, dtype="float64") /* ty=Tensor[(728), float64] */;
  %496 = log2(%495) /* ty=Tensor[(728), float64] */;
  %497 = @func_3012() /* ty=Tensor[(12, 13, 4), float64] */;
  %498 = @func_1301() /* ty=Tensor[(12, 13, 4), float32] */;
  (%496, %497, %498)
}

def @func_2427() -> Tensor[(12, 13, 4), float64] {
  @func_2113() /* ty=Tensor[(12, 13, 4), float64] */
}

def @func_4837() -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64], Tensor[(12, 9, 4), float64]) {
  %499 = @func_2896() /* ty=Tensor[(12, 13, 4), float32] */;
  %500 = cast(meta[relay.Constant][20] /* ty=Tensor[(12, 13, 4), float32] */, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %501 = shape_of(%499, dtype="int32") /* ty=Tensor[(3), int32] */;
  %502 = cast(%499, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %504 = @func_2842() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %505 = @func_2467() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %506 = @func_2991() /* ty=Tensor[(12, 9, 4), float64] */;
  %507 = cast(meta[relay.Constant][21] /* ty=Tensor[(12, 9, 4), float64] */, dtype="float64") /* ty=Tensor[(12, 9, 4), float64] */;
  %508 = shape_of(%506, dtype="int32") /* ty=Tensor[(3), int32] */;
  %509 = cast(%506, dtype="float64") /* ty=Tensor[(12, 9, 4), float64] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %511 = cast(%506, dtype="float32") /* ty=Tensor[(12, 9, 4), float32] */;
  %512 = reshape(%511, newshape=[12, 9, 4]) /* ty=Tensor[(12, 9, 4), float32] */;
  %513 = @func_71(%512) /* ty=(Tensor[(12, 9, 4), float64],) */;
  %514 = mod(%502, %503) /* ty=Tensor[(12, 13, 4), float64] */;
  %515 = %504.0;
  %516 = @func_1301() /* ty=Tensor[(12, 13, 4), float32] */;
  %517 = %505.0;
  %518 = floor_divide(%509, %510) /* ty=Tensor[(12, 9, 4), float64] */;
  %519 = %513.0;
  (%514, %515, %516, %517, %518, %519)
}

def @func_7262() -> Tensor[(12, 9, 4), float64] {
  %520 = @func_5566() /* ty=(Tensor[(12, 9, 4), float64], Tensor[(12, 13, 4), float32]) */;
  %520.0
}

def @func_7211() -> Tensor[(12, 13, 4), float64] {
  %521 = @func_2113() /* ty=Tensor[(12, 13, 4), float64] */;
  %522 = cast(%521, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  tan(%522) /* ty=Tensor[(12, 13, 4), float64] */
}

def @func_4412() -> (Tensor[(12, 13, 4), bool], Tensor[(12, 9, 4), float64], Tensor[(728), uint8], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64], Tensor[(728), uint8], Tensor[(12, 9, 4), float64]) {
  %523 = @func_3904() /* ty=(Tensor[(12, 13, 4), bool],) */;
  %524 = cast(meta[relay.Constant][22] /* ty=Tensor[(728), uint8] */, dtype="uint8") /* ty=Tensor[(728), uint8] */;
  %525 = cast(meta[relay.Constant][22] /* ty=Tensor[(728), uint8] */, dtype="uint8") /* ty=Tensor[(728), uint8] */;
  %526 = reshape(%524, newshape=[728]) /* ty=Tensor[(728), uint8] */;
  %527 = reshape(%525, newshape=[728]) /* ty=Tensor[(728), uint8] */;
  %528 = @func_3495(%526, %527) /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(728), uint8], Tensor[(728), uint16], Tensor[(12, 13, 4), float32], Tensor[(728), float32]) */;
  %529 = @func_2574() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool]) */;
  %530 = @func_3988() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(728), uint8], Tensor[(728), uint8], Tensor[(12, 13, 4), float64]) */;
  %531 = @func_2915() /* ty=(Tensor[(12, 9, 4), float64],) */;
  %532 = %523.0;
  %533 = %528.2;
  %534 = %529.2;
  %535 = @func_3012() /* ty=Tensor[(12, 13, 4), float64] */;
  %536 = %530.2;
  %537 = %531.0;
  (%532, %533, meta[relay.Constant][22] /* ty=Tensor[(728), uint8] */, %534, %535, %536, %537)
}

def @func_3122() -> (Tensor[(12, 13, 4), float64],) {
  %538 = @func_2357() /* ty=Tensor[(12, 13, 4), float64] */;
  (%538,)
}

def @func_3921() -> (Tensor[(12, 13, 4), float32],) {
  %539 = @func_2467() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %540 = %539.0;
  (%540,)
}

def @func_8952(%var_8922: Tensor[(12, 9, 4), float64]) -> (Tensor[(12, 9, 4), int64], Tensor[(12, 13, 4), float64]) {
  %541 = @func_5566() /* ty=(Tensor[(12, 9, 4), float64], Tensor[(12, 13, 4), float32]) */;
  %542 = %541.0;
  %543 = cast(%var_8922, dtype="int64") /* ty=Tensor[(12, 9, 4), int64] */;
  %544 = shape_of(%542, dtype="int32") /* ty=Tensor[(3), int32] */;
  %545 = cast(%542, dtype="int64") /* ty=Tensor[(12, 9, 4), int64] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %547 = right_shift(%545, %546) /* ty=Tensor[(12, 9, 4), int64] */;
  %548 = @func_4181() /* ty=Tensor[(12, 13, 4), float64] */;
  (%547, %548)
}

def @func_9136() -> Tensor[(12, 13, 4), bool] {
  @func_8048() /* ty=Tensor[(12, 13, 4), bool] */
}

def @func_9514(%var_9492: Tensor[(1440), float32]) -> (Tensor[(12, 13, 4), float64], Tensor[(10, 9, 16), float32], Tensor[(1440), float32], Tensor[(12, 13, 4), float32]) {
  %549 = cast(%var_9492, dtype="float32") /* ty=Tensor[(1440), float32] */;
  %550 = reshape(%549, newshape=[10, 9, 16]) /* ty=Tensor[(10, 9, 16), float32] */;
  %551 = @func_738(%550) /* ty=(Tensor[(13, 14, 4), float64], Tensor[(728), uint8], Tensor[(432), float32], Tensor[(10, 9, 16), float32]) */;
  %552 = @func_3921() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %553 = @func_7612() /* ty=Tensor[(12, 13, 4), float64] */;
  %554 = %551.3;
  %555 = %552.0;
  (%553, %554, %var_9492, %555)
}

def @func_9837() -> (Tensor[(12, 13, 4), float64],) {
  %556 = @func_7211() /* ty=Tensor[(12, 13, 4), float64] */;
  (%556,)
}

def @func_7770() -> Tensor[(180, 8), float32] {
  %557 = @func_3792() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), bool], Tensor[(432), float32], Tensor[(180, 8), float32]) */;
  %557.3
}

def @func_1857(%var_1855: Tensor[(672), uint64]) -> (Tensor[(12, 13, 4), float64], Tensor[(16, 6, 7), uint64], Tensor[(672), uint64]) {
  %558 = @func_1737() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64]) */;
  %559 = cast(%var_1855, dtype="uint64") /* ty=Tensor[(672), uint64] */;
  %560 = reshape(%559, newshape=[16, 6, 7]) /* ty=Tensor[(16, 6, 7), uint64] */;
  %561 = %558.1;
  %562 = @func_977(%560) /* ty=Tensor[(16, 6, 7), uint64] */;
  (%561, %562, %var_1855)
}

def @func_4181() -> Tensor[(12, 13, 4), float64] {
  %563 = @func_2842() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %563.0
}

def @func_9858() -> (Tensor[(12, 13, 4), bool],) {
  %564 = @func_5586() /* ty=Tensor[(12, 13, 4), bool] */;
  (%564,)
}

def @func_3200() -> Tensor[(728), float64] {
  %565 = @func_3064() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(1440, 1), float32], Tensor[(728), uint8], Tensor[(728), float64]) */;
  %565.3
}

def @func_7496() -> (Tensor[(624), float64], Tensor[(12, 9, 4), float64], Tensor[(2, 216), float32]) {
  %566 = cast(meta[relay.Constant][23] /* ty=Tensor[(2, 216), float32] */, dtype="float32") /* ty=Tensor[(2, 216), float32] */;
  %567 = reshape(%566, newshape=[12, 9, 4]) /* ty=Tensor[(12, 9, 4), float32] */;
  %568 = @func_71(%567) /* ty=(Tensor[(12, 9, 4), float64],) */;
  %569 = @func_5481() /* ty=Tensor[(624), float64] */;
  %570 = %568.0;
  (%569, %570, meta[relay.Constant][23] /* ty=Tensor[(2, 216), float32] */)
}

def @func_71(%var_16: Tensor[(12, 9, 4), float32]) -> (Tensor[(12, 9, 4), float64],) {
  %571 = cast(%var_16, dtype="float32") /* ty=Tensor[(12, 9, 4), float32] */;
  %572 = rsqrt(%571) /* ty=Tensor[(12, 9, 4), float32] */;
  %573 = cast(%572, dtype="float64") /* ty=Tensor[(12, 9, 4), float64] */;
  %574 = log10(%573) /* ty=Tensor[(12, 9, 4), float64] */;
  (%574,)
}

def @func_6312() -> (Tensor[(624), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), bool]) {
  %575 = @func_4019() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %576 = @func_5481() /* ty=Tensor[(624), float64] */;
  %577 = cast(%576, dtype="float64") /* ty=Tensor[(624), float64] */;
  %578 = reshape(%577, newshape=[12, 13, 4]) /* ty=Tensor[(12, 13, 4), float64] */;
  %579 = @func_2655(%578) /* ty=(Tensor[(12, 13, 4), bool],) */;
  %580 = %575.0;
  %581 = %579.0;
  (%576, %580, %581)
}

def @func_5693() -> (Tensor[(12, 9, 4), float64], Tensor[(624), float64], Tensor[(728), float32], Tensor[(728), uint8], Tensor[(12, 13, 4), float64]) {
  %582 = @func_4837() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64], Tensor[(12, 9, 4), float64]) */;
  %583 = cast(meta[relay.Constant][24] /* ty=Tensor[(728), uint8] */, dtype="uint8") /* ty=Tensor[(728), uint8] */;
  %584 = cast(meta[relay.Constant][24] /* ty=Tensor[(728), uint8] */, dtype="uint8") /* ty=Tensor[(728), uint8] */;
  %585 = reshape(%583, newshape=[728]) /* ty=Tensor[(728), uint8] */;
  %586 = reshape(%584, newshape=[728]) /* ty=Tensor[(728), uint8] */;
  %587 = @func_3495(%585, %586) /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(728), uint8], Tensor[(728), uint16], Tensor[(12, 13, 4), float32], Tensor[(728), float32]) */;
  %588 = %582.5;
  %589 = @func_5481() /* ty=Tensor[(624), float64] */;
  %590 = %587.7;
  %591 = @func_3012() /* ty=Tensor[(12, 13, 4), float64] */;
  (%588, %589, %590, meta[relay.Constant][24] /* ty=Tensor[(728), uint8] */, %591)
}

def @func_7534() -> (Tensor[(12, 13, 4), float64],) {
  %592 = @func_6735() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64]) */;
  %593 = %592.0;
  (%593,)
}

def @func_7648() -> Tensor[(12, 13, 4), float32] {
  @func_5762() /* ty=Tensor[(12, 13, 4), float32] */
}

def @func_8610() -> (Tensor[(12, 13, 4), float32],) {
  %594 = @func_7365() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %595 = %594.0;
  (%595,)
}

def @func_8041() -> (Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float32]) {
  %596 = @func_6254() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64], Tensor[(432), float32]) */;
  %597 = @func_3904() /* ty=(Tensor[(12, 13, 4), bool],) */;
  %598 = @func_2510() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(624), float64]) */;
  %599 = %596.1;
  %600 = %597.0;
  %601 = %598.0;
  (%599, %600, %601)
}

def @func_1402() -> (Tensor[(12, 13, 4), float32],) {
  %602 = @func_1301() /* ty=Tensor[(12, 13, 4), float32] */;
  (%602,)
}

def @func_8797(%var_8795: Tensor[(84), float32]) -> (Tensor[(12, 13, 4), float32], Tensor[(3, 7, 4), float32], Tensor[(84), float32]) {
  %603 = @func_2467() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %604 = cast(%var_8795, dtype="float32") /* ty=Tensor[(84), float32] */;
  %605 = reshape(%604, newshape=[3, 7, 4]) /* ty=Tensor[(3, 7, 4), float32] */;
  %606 = %603.0;
  %607 = @func_4503(%605) /* ty=Tensor[(3, 7, 4), float32] */;
  (%606, %607, %var_8795)
}

def @func_9153() -> Tensor[(12, 13, 4), float64] {
  %608 = @func_3122() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %608.0
}

def @func_6667() -> (Tensor[(728), float32], Tensor[(624), float64]) {
  %609 = @func_6014() /* ty=(Tensor[(728), float64], Tensor[(13, 14, 4), float64], Tensor[(728), float64], Tensor[(624), float64]) */;
  %610 = %609.2;
  %611 = cast(%610, dtype="float32") /* ty=Tensor[(728), float32] */;
  %612 = @func_2510() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(624), float64]) */;
  %613 = log10(%611) /* ty=Tensor[(728), float32] */;
  %614 = %612.2;
  (%613, %614)
}

def @func_5445(%var_5378: Tensor[(1440), float32], %var_5433: Tensor[(1, 270), float32]) -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64], Tensor[(728), uint8], Tensor[(1440), float32], Tensor[(1440, 1), float32], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(624), float64], Tensor[(1, 270), float32], Tensor[(12, 13, 4), float64], Tensor[(12, 9, 4), float64]) {
  %615 = @func_3160() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %616 = @func_3904() /* ty=(Tensor[(12, 13, 4), bool],) */;
  %617 = cast(%var_5378, dtype="float32") /* ty=Tensor[(1440), float32] */;
  %618 = reshape(%617, newshape=[10, 9, 16]) /* ty=Tensor[(10, 9, 16), float32] */;
  %619 = @func_738(%618) /* ty=(Tensor[(13, 14, 4), float64], Tensor[(728), uint8], Tensor[(432), float32], Tensor[(10, 9, 16), float32]) */;
  %620 = @func_3064() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(1440, 1), float32], Tensor[(728), uint8], Tensor[(728), float64]) */;
  %621 = cast(%var_5433, dtype="float32") /* ty=Tensor[(1, 270), float32] */;
  %622 = reshape(%621, newshape=[270]) /* ty=Tensor[(270), float32] */;
  %623 = @func_2785(%622) /* ty=(Tensor[(12, 13, 4), float32], Tensor[(15, 9, 2), float32], Tensor[(270), float32], Tensor[(624), float64]) */;
  %624 = @func_3122() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %625 = @func_2915() /* ty=(Tensor[(12, 9, 4), float64],) */;
  %626 = %615.0;
  %627 = %616.0;
  %628 = @func_2357() /* ty=Tensor[(12, 13, 4), float64] */;
  %629 = %619.1;
  %630 = %620.1;
  %631 = @func_1448() /* ty=Tensor[(12, 13, 4), float64] */;
  %632 = @func_2427() /* ty=Tensor[(12, 13, 4), float64] */;
  %633 = %623.3;
  %634 = %624.0;
  %635 = %625.0;
  (%626, %627, %628, %629, %var_5378, %630, %631, %632, %633, %var_5433, %634, %635)
}

def @func_7127() -> Tensor[(12, 13, 4), float32] {
  %636 = @func_2613() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %636.0
}

def @func_2113() -> Tensor[(12, 13, 4), float64] {
  %637 = @func_1737() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64]) */;
  %637.1
}

def @func_8495(%var_8478: Tensor[(12, 13, 4), float64]) -> (Tensor[(12, 13, 4), int64], Tensor[(12, 13, 4), int8]) {
  %638 = @func_2427() /* ty=Tensor[(12, 13, 4), float64] */;
  %639 = cast(%var_8478, dtype="int64") /* ty=Tensor[(12, 13, 4), int64] */;
  %640 = shape_of(%638, dtype="int32") /* ty=Tensor[(3), int32] */;
  %641 = cast(%638, dtype="int64") /* ty=Tensor[(12, 13, 4), int64] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %643 = cast(%var_8478, dtype="int8") /* ty=Tensor[(12, 13, 4), int8] */;
  %644 = shape_of(%638, dtype="int32") /* ty=Tensor[(3), int32] */;
  %645 = cast(%638, dtype="int8") /* ty=Tensor[(12, 13, 4), int8] */;
  %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %647 = bitwise_or(%641, %642) /* ty=Tensor[(12, 13, 4), int64] */;
  %648 = add(%645, %646) /* ty=Tensor[(12, 13, 4), int8] */;
  (%647, %648)
}

def @func_7463() -> (Tensor[(12, 13, 4), float64],) {
  %649 = @func_2842() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %650 = %649.0;
  (%650,)
}

def @func_2896() -> Tensor[(12, 13, 4), float32] {
  %651 = @func_1402() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %651.0
}

def @func_9222() -> (Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64]) {
  %652 = @func_4652() /* ty=(Tensor[(12, 9, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(624), uint32]) */;
  %653 = @func_8558() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(180, 8), uint8], Tensor[(12, 13, 4), float64], Tensor[(180, 8), float64], Tensor[(12, 13, 4), float32]) */;
  %654 = %652.1;
  %655 = %653.2;
  (%654, %655)
}

def @func_3514() -> (Tensor[(12, 13, 4), float64],) {
  %656 = @func_2842() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %657 = %656.0;
  %658 = cast(%657, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %659 = sigmoid(%658) /* ty=Tensor[(12, 13, 4), float64] */;
  (%659,)
}

def @func_3661() -> (Tensor[(12, 13, 4), float32], Tensor[(728), float64]) {
  %660 = @func_2155() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32]) */;
  %661 = %660.1;
  %662 = @func_3200() /* ty=Tensor[(728), float64] */;
  (%661, %662)
}

def @func_8719() -> Tensor[(12, 13, 4), float32] {
  @func_5762() /* ty=Tensor[(12, 13, 4), float32] */
}

def @func_7005() -> (Tensor[(624), float64], Tensor[(8, 3, 16), float64], float64, Tensor[(384), float64]) {
  %663 = cast(5.0271f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %664 = cast(meta[relay.Constant][25] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %665 = reshape(%663, newshape=[]) /* ty=float64 */;
  %666 = reshape(%664, newshape=[8, 3, 16]) /* ty=Tensor[(8, 3, 16), float64] */;
  %667 = @func_4573(%665, %666) /* ty=(Tensor[(8, 3, 16), float64], Tensor[(15, 9, 2), float32], Tensor[(270), float32], Tensor[(728), uint8]) */;
  %668 = @func_5481() /* ty=Tensor[(624), float64] */;
  %669 = %667.0;
  (%668, %669, 5.0271f64 /* ty=float64 */, meta[relay.Constant][25] /* ty=Tensor[(384), float64] */)
}

def @func_6177() -> Tensor[(12, 9, 4), float64] {
  %670 = @func_2019() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64]) */;
  %670.1
}

def @func_8188() -> Tensor[(12, 13, 4), float32] {
  %671 = @func_4837() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64], Tensor[(12, 9, 4), float64]) */;
  %671.2
}

def @func_6735() -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64]) {
  %672 = @func_3988() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(728), uint8], Tensor[(728), uint8], Tensor[(12, 13, 4), float64]) */;
  %673 = %672.3;
  %674 = @func_2427() /* ty=Tensor[(12, 13, 4), float64] */;
  (%673, %674)
}

def @func_9193(%var_9171: Tensor[(180, 8), uint8]) -> (Tensor[(270), float32], Tensor[(6, 45), float32], Tensor[(180, 8), bool], Tensor[(180, 8), bool], Tensor[(12, 9, 4), float64]) {
  %675 = cast(meta[relay.Constant][26] /* ty=Tensor[(6, 45), float32] */, dtype="float32") /* ty=Tensor[(6, 45), float32] */;
  %676 = reshape(%675, newshape=[270]) /* ty=Tensor[(270), float32] */;
  %677 = @func_2785(%676) /* ty=(Tensor[(12, 13, 4), float32], Tensor[(15, 9, 2), float32], Tensor[(270), float32], Tensor[(624), float64]) */;
  %678 = @func_8558() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(180, 8), uint8], Tensor[(12, 13, 4), float64], Tensor[(180, 8), float64], Tensor[(12, 13, 4), float32]) */;
  %679 = %678.1;
  %680 = cast(%var_9171, dtype="int32") /* ty=Tensor[(180, 8), int32] */;
  %681 = shape_of(%679, dtype="int32") /* ty=Tensor[(2), int32] */;
  %682 = cast(%679, dtype="int32") /* ty=Tensor[(180, 8), int32] */;
  %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %684 = subtract(%682, %683) /* ty=Tensor[(180, 8), int32] */;
  %685 = cast(%684, dtype="bool") /* ty=Tensor[(180, 8), bool] */;
  %686 = shape_of(%679, dtype="int32") /* ty=Tensor[(2), int32] */;
  %687 = cast(%679, dtype="bool") /* ty=Tensor[(180, 8), bool] */;
  %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %689 = cast(%var_9171, dtype="bool") /* ty=Tensor[(180, 8), bool] */;
  %690 = shape_of(%679, dtype="int32") /* ty=Tensor[(2), int32] */;
  %691 = cast(%679, dtype="bool") /* ty=Tensor[(180, 8), bool] */;
  %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %693 = @func_5693() /* ty=(Tensor[(12, 9, 4), float64], Tensor[(624), float64], Tensor[(728), float32], Tensor[(728), uint8], Tensor[(12, 13, 4), float64]) */;
  %694 = %677.2;
  %695 = greater(%687, %688) /* ty=Tensor[(180, 8), bool] */;
  %696 = logical_and(%691, %692) /* ty=Tensor[(180, 8), bool] */;
  %697 = %693.0;
  (%694, meta[relay.Constant][26] /* ty=Tensor[(6, 45), float32] */, %695, %696, %697)
}

def @func_1990() -> (Tensor[(12, 13, 4), float32], Tensor[(13, 14, 4), float64], Tensor[(1440, 1), float32], Tensor[(12, 13, 4), float32]) {
  %698 = @func_1402() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %699 = cast(meta[relay.Constant][27] /* ty=Tensor[(1440, 1), float32] */, dtype="float32") /* ty=Tensor[(1440, 1), float32] */;
  %700 = reshape(%699, newshape=[10, 9, 16]) /* ty=Tensor[(10, 9, 16), float32] */;
  %701 = @func_738(%700) /* ty=(Tensor[(13, 14, 4), float64], Tensor[(728), uint8], Tensor[(432), float32], Tensor[(10, 9, 16), float32]) */;
  %702 = cast(meta[relay.Constant][27] /* ty=Tensor[(1440, 1), float32] */, dtype="float32") /* ty=Tensor[(1440, 1), float32] */;
  %703 = log(%702) /* ty=Tensor[(1440, 1), float32] */;
  %704 = cast(%703, dtype="float32") /* ty=Tensor[(1440, 1), float32] */;
  %705 = %698.0;
  %706 = %701.0;
  %707 = acos(%704) /* ty=Tensor[(1440, 1), float32] */;
  %708 = @func_1301() /* ty=Tensor[(12, 13, 4), float32] */;
  (%705, %706, %707, %708)
}

def @func_1737() -> (Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64]) {
  %709 = @func_1301() /* ty=Tensor[(12, 13, 4), float32] */;
  %710 = cast(meta[relay.Constant][28] /* ty=Tensor[(12, 13, 4), float32] */, dtype="bool") /* ty=Tensor[(12, 13, 4), bool] */;
  %711 = shape_of(%709, dtype="int32") /* ty=Tensor[(3), int32] */;
  %712 = cast(%709, dtype="bool") /* ty=Tensor[(12, 13, 4), bool] */;
  %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %714 = cast(meta[relay.Constant][28] /* ty=Tensor[(12, 13, 4), float32] */, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %715 = reshape(%714, newshape=[12, 13, 4]) /* ty=Tensor[(12, 13, 4), float64] */;
  %716 = @func_247(%715) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 9, 4), float64], Tensor[(432), float32]) */;
  %717 = less_equal(%712, %713) /* ty=Tensor[(12, 13, 4), bool] */;
  %718 = %716.0;
  (%717, %718)
}

def @func_6919(%var_6883: Tensor[(15, 1, 6), float32]) -> (Tensor[(15, 1, 6), float32], Tensor[(12, 13, 4), bool], Tensor[(728), uint8], Tensor[(12, 13, 4), float64]) {
  %719 = cast(%var_6883, dtype="float32") /* ty=Tensor[(15, 1, 6), float32] */;
  %720 = cast(meta[relay.Constant][29] /* ty=Tensor[(728), uint8] */, dtype="uint8") /* ty=Tensor[(728), uint8] */;
  %721 = reshape(%720, newshape=[728]) /* ty=Tensor[(728), uint8] */;
  %722 = @func_2880(%721) /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool], Tensor[(13, 14, 4), float64], Tensor[(728), uint8], Tensor[(432), float32]) */;
  %723 = @func_5194() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64]) */;
  %724 = rsqrt(%719) /* ty=Tensor[(15, 1, 6), float32] */;
  %725 = %722.1;
  %726 = %723.3;
  (%724, %725, meta[relay.Constant][29] /* ty=Tensor[(728), uint8] */, %726)
}

def @func_7424() -> (Tensor[(624), uint32], Tensor[(12, 13, 4), float64], Tensor[(12, 9, 4), float64]) {
  %727 = @func_4652() /* ty=(Tensor[(12, 9, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(624), uint32]) */;
  %728 = @func_4134() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %729 = %727.2;
  %730 = %728.0;
  %731 = @func_7262() /* ty=Tensor[(12, 9, 4), float64] */;
  (%729, %730, %731)
}

def @func_1612(%var_1544: Tensor[(12, 13, 4), uint32]) -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(15, 9, 2), float32], Tensor[(30, 9), float32], Tensor[(15, 9, 2), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64]) {
  %732 = @func_1301() /* ty=Tensor[(12, 13, 4), float32] */;
  %733 = cast(meta[relay.Constant][30] /* ty=Tensor[(12, 13, 4), float32] */, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %734 = shape_of(%732, dtype="int32") /* ty=Tensor[(3), int32] */;
  %735 = cast(%732, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %737 = @func_1402() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %738 = cast(meta[relay.Constant][31] /* ty=Tensor[(30, 9), float32] */, dtype="float32") /* ty=Tensor[(30, 9), float32] */;
  %739 = reshape(%738, newshape=[15, 9, 2]) /* ty=Tensor[(15, 9, 2), float32] */;
  %740 = @func_1018(%739) /* ty=(Tensor[(15, 9, 2), float32],) */;
  %741 = cast(meta[relay.Constant][31] /* ty=Tensor[(30, 9), float32] */, dtype="float32") /* ty=Tensor[(30, 9), float32] */;
  %742 = reshape(%741, newshape=[15, 9, 2]) /* ty=Tensor[(15, 9, 2), float32] */;
  %743 = @func_1018(%742) /* ty=(Tensor[(15, 9, 2), float32],) */;
  %744 = @func_1402() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %745 = @func_1448() /* ty=Tensor[(12, 13, 4), float64] */;
  %746 = cast(%745, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %747 = asinh(%746) /* ty=Tensor[(12, 13, 4), float64] */;
  %748 = cast(%747, dtype="float32") /* ty=Tensor[(12, 13, 4), float32] */;
  %749 = exp(%748) /* ty=Tensor[(12, 13, 4), float32] */;
  %750 = cast(meta[relay.Constant][30] /* ty=Tensor[(12, 13, 4), float32] */, dtype="uint32") /* ty=Tensor[(12, 13, 4), uint32] */;
  %751 = shape_of(%749, dtype="int32") /* ty=Tensor[(3), int32] */;
  %752 = cast(%749, dtype="uint32") /* ty=Tensor[(12, 13, 4), uint32] */;
  %753 = dyn.reshape(%750, %751, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %754 = logical_xor(%752, %753) /* ty=Tensor[(12, 13, 4), uint32] */;
  %755 = cast(%var_1544, dtype="bool") /* ty=Tensor[(12, 13, 4), bool] */;
  %756 = shape_of(%754, dtype="int32") /* ty=Tensor[(3), int32] */;
  %757 = cast(%754, dtype="bool") /* ty=Tensor[(12, 13, 4), bool] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %759 = less(%757, %758) /* ty=Tensor[(12, 13, 4), bool] */;
  %760 = cast(%759, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %761 = sinh(%760) /* ty=Tensor[(12, 13, 4), float64] */;
  %762 = cast(%761, dtype="float32") /* ty=Tensor[(12, 13, 4), float32] */;
  %763 = sin(%762) /* ty=Tensor[(12, 13, 4), float32] */;
  %764 = cast(%763, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %765 = divide(%735, %736) /* ty=Tensor[(12, 13, 4), float64] */;
  %766 = %737.0;
  %767 = %740.0;
  %768 = %743.0;
  %769 = @func_1301() /* ty=Tensor[(12, 13, 4), float32] */;
  %770 = %744.0;
  %771 = @func_1448() /* ty=Tensor[(12, 13, 4), float64] */;
  %772 = asin(%764) /* ty=Tensor[(12, 13, 4), float64] */;
  (%765, %766, %767, meta[relay.Constant][31] /* ty=Tensor[(30, 9), float32] */, %768, %769, %770, %771, %772)
}

def @func_4420() -> Tensor[(728), float64] {
  %773 = @func_3615() /* ty=(Tensor[(728), float64],) */;
  %773.0
}

def @func_977(%var_968: Tensor[(16, 6, 7), uint64]) -> Tensor[(16, 6, 7), uint64] {
  %774 = cast(meta[relay.Constant][32] /* ty=Tensor[(16, 6, 7), uint64] */, dtype="uint64") /* ty=Tensor[(16, 6, 7), uint64] */;
  %775 = shape_of(%var_968, dtype="int32") /* ty=Tensor[(3), int32] */;
  %776 = cast(%var_968, dtype="uint64") /* ty=Tensor[(16, 6, 7), uint64] */;
  %777 = dyn.reshape(%774, %775, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  multiply(%776, %777) /* ty=Tensor[(16, 6, 7), uint64] */
}

def @func_3988() -> (Tensor[(12, 13, 4), float32], Tensor[(728), uint8], Tensor[(728), uint8], Tensor[(12, 13, 4), float64]) {
  %778 = @func_3921() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %779 = cast(meta[relay.Constant][33] /* ty=Tensor[(728), uint8] */, dtype="uint8") /* ty=Tensor[(728), uint8] */;
  %780 = reshape(%779, newshape=[728]) /* ty=Tensor[(728), uint8] */;
  %781 = @func_2880(%780) /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool], Tensor[(13, 14, 4), float64], Tensor[(728), uint8], Tensor[(432), float32]) */;
  %782 = @func_2613() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %783 = %782.0;
  %784 = cast(%783, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %785 = %778.0;
  %786 = %781.3;
  %787 = atan(%784) /* ty=Tensor[(12, 13, 4), float64] */;
  (%785, %786, meta[relay.Constant][33] /* ty=Tensor[(728), uint8] */, %787)
}

def @func_4652() -> (Tensor[(12, 9, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(624), uint32]) {
  %788 = cast(meta[relay.Constant][34] /* ty=Tensor[(624), uint32] */, dtype="uint32") /* ty=Tensor[(624), uint32] */;
  %789 = reshape(%788, newshape=[12, 13, 4]) /* ty=Tensor[(12, 13, 4), uint32] */;
  %790 = @func_1612(%789) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(15, 9, 2), float32], Tensor[(30, 9), float32], Tensor[(15, 9, 2), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64]) */;
  %791 = @func_2991() /* ty=Tensor[(12, 9, 4), float64] */;
  %792 = %790.6;
  (%791, %792, meta[relay.Constant][34] /* ty=Tensor[(624), uint32] */)
}

def @func_4881(%var_4862: Tensor[(672), uint64]) -> (Tensor[(12, 13, 4), float64], Tensor[(16, 6, 7), uint64], Tensor[(672), uint64], Tensor[(432), float32]) {
  %793 = cast(%var_4862, dtype="uint64") /* ty=Tensor[(672), uint64] */;
  %794 = reshape(%793, newshape=[16, 6, 7]) /* ty=Tensor[(16, 6, 7), uint64] */;
  %795 = @func_2113() /* ty=Tensor[(12, 13, 4), float64] */;
  %796 = cast(%795, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %797 = reshape(%796, newshape=[12, 13, 4]) /* ty=Tensor[(12, 13, 4), float64] */;
  %798 = @func_247(%797) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 9, 4), float64], Tensor[(432), float32]) */;
  %799 = @func_977(%794) /* ty=Tensor[(16, 6, 7), uint64] */;
  %800 = %798.2;
  (%795, %799, %var_4862, %800)
}

def @func_9647() -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float32], Tensor[(624), float64]) {
  %801 = @func_2467() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %802 = @func_1254() /* ty=(Tensor[(15, 15, 7), float32], Tensor[(12, 13, 4), float64], Tensor[(624), float64]) */;
  %803 = @func_1448() /* ty=Tensor[(12, 13, 4), float64] */;
  %804 = @func_8048() /* ty=Tensor[(12, 13, 4), bool] */;
  %805 = %801.0;
  %806 = %802.2;
  (%803, %804, %805, %806)
}

def @func_7365() -> (Tensor[(12, 13, 4), float32],) {
  %807 = @func_1301() /* ty=Tensor[(12, 13, 4), float32] */;
  (%807,)
}

def @func_2155() -> (Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32]) {
  %808 = @func_1402() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %809 = @func_2019() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64]) */;
  %810 = %808.0;
  %811 = %809.0;
  (%810, %811)
}

def @func_8273() -> Tensor[(12, 9, 4), float64] {
  %812 = @func_2915() /* ty=(Tensor[(12, 9, 4), float64],) */;
  %812.0
}

def @func_2982(%var_2974: Tensor[(728), uint8]) -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), bool], Tensor[(728), uint8], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32]) {
  %813 = @func_2739() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) */;
  %814 = %813.0;
  %815 = cast(%814, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %816 = cast(%var_2974, dtype="uint8") /* ty=Tensor[(728), uint8] */;
  %817 = reshape(%816, newshape=[728]) /* ty=Tensor[(728), uint8] */;
  %818 = @func_2880(%817) /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool], Tensor[(13, 14, 4), float64], Tensor[(728), uint8], Tensor[(432), float32]) */;
  %819 = log(%815) /* ty=Tensor[(12, 13, 4), float64] */;
  %820 = cast(%819, dtype="bool") /* ty=Tensor[(12, 13, 4), bool] */;
  %821 = reshape(%820, newshape=[12, 13, 4]) /* ty=Tensor[(12, 13, 4), bool] */;
  %822 = @func_1843(%821) /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64]) */;
  %823 = @func_1301() /* ty=Tensor[(12, 13, 4), float32] */;
  %824 = %818.0;
  %825 = %822.2;
  %826 = @func_1301() /* ty=Tensor[(12, 13, 4), float32] */;
  (%819, %823, %824, %var_2974, %825, %826)
}

def @func_3561() -> (Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64]) {
  %827 = @func_3351() /* ty=Tensor[(12, 13, 4), float32] */;
  %828 = @func_2991() /* ty=Tensor[(12, 9, 4), float64] */;
  (%827, %828)
}

def @func_6073() -> Tensor[(12, 13, 4), float64] {
  %829 = @func_1737() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64]) */;
  %829.1
}

def @func_6014() -> (Tensor[(728), float64], Tensor[(13, 14, 4), float64], Tensor[(728), float64], Tensor[(624), float64]) {
  %830 = @func_3615() /* ty=(Tensor[(728), float64],) */;
  %831 = @func_1990() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(13, 14, 4), float64], Tensor[(1440, 1), float32], Tensor[(12, 13, 4), float32]) */;
  %832 = %830.0;
  %833 = %831.1;
  %834 = @func_3200() /* ty=Tensor[(728), float64] */;
  %835 = @func_5481() /* ty=Tensor[(624), float64] */;
  (%832, %833, %834, %835)
}

def @func_3064() -> (Tensor[(12, 13, 4), float64], Tensor[(1440, 1), float32], Tensor[(728), uint8], Tensor[(728), float64]) {
  %836 = @func_1990() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(13, 14, 4), float64], Tensor[(1440, 1), float32], Tensor[(12, 13, 4), float32]) */;
  %837 = cast(meta[relay.Constant][35] /* ty=Tensor[(728), uint8] */, dtype="uint8") /* ty=Tensor[(728), uint8] */;
  %838 = reshape(%837, newshape=[728]) /* ty=Tensor[(728), uint8] */;
  %839 = @func_2880(%838) /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool], Tensor[(13, 14, 4), float64], Tensor[(728), uint8], Tensor[(432), float32]) */;
  %840 = cast(meta[relay.Constant][35] /* ty=Tensor[(728), uint8] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %841 = @func_3012() /* ty=Tensor[(12, 13, 4), float64] */;
  %842 = %836.2;
  %843 = %839.3;
  %844 = tan(%840) /* ty=Tensor[(728), float64] */;
  (%841, %842, %843, %844)
}

def @func_738(%var_695: Tensor[(10, 9, 16), float32]) -> (Tensor[(13, 14, 4), float64], Tensor[(728), uint8], Tensor[(432), float32], Tensor[(10, 9, 16), float32]) {
  %845 = cast(meta[relay.Constant][36] /* ty=Tensor[(728), uint8] */, dtype="uint8") /* ty=Tensor[(728), uint8] */;
  %846 = cast(meta[relay.Constant][37] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %847 = reshape(%845, newshape=[13, 14, 4]) /* ty=Tensor[(13, 14, 4), uint8] */;
  %848 = reshape(%846, newshape=[2, 216]) /* ty=Tensor[(2, 216), float32] */;
  %849 = @func_621(%847, %848) /* ty=(Tensor[(13, 14, 4), float64], Tensor[(12, 9, 4), float64], Tensor[(2, 216), float32]) */;
  %850 = cast(%var_695, dtype="float32") /* ty=Tensor[(10, 9, 16), float32] */;
  %851 = sigmoid(%850) /* ty=Tensor[(10, 9, 16), float32] */;
  %852 = cast(%var_695, dtype="float32") /* ty=Tensor[(10, 9, 16), float32] */;
  %853 = shape_of(%851, dtype="int32") /* ty=Tensor[(3), int32] */;
  %854 = cast(%851, dtype="float32") /* ty=Tensor[(10, 9, 16), float32] */;
  %855 = dyn.reshape(%852, %853, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %856 = %849.0;
  %857 = maximum(%854, %855) /* ty=Tensor[(10, 9, 16), float32] */;
  (%856, meta[relay.Constant][36] /* ty=Tensor[(728), uint8] */, meta[relay.Constant][37] /* ty=Tensor[(432), float32] */, %857)
}

def @func_6357() -> (Tensor[(12, 13, 4), float64], Tensor[(3, 66), bool], Tensor[(3, 66), int8]) {
  %858 = cast(meta[relay.Constant][38] /* ty=Tensor[(3, 66), uint64] */, dtype="float32") /* ty=Tensor[(3, 66), float32] */;
  %859 = rsqrt(%858) /* ty=Tensor[(3, 66), float32] */;
  %860 = cast(%859, dtype="float32") /* ty=Tensor[(3, 66), float32] */;
  %861 = tan(%860) /* ty=Tensor[(3, 66), float32] */;
  %862 = cast(%859, dtype="bool") /* ty=Tensor[(3, 66), bool] */;
  %863 = shape_of(%861, dtype="int32") /* ty=Tensor[(2), int32] */;
  %864 = cast(%861, dtype="bool") /* ty=Tensor[(3, 66), bool] */;
  %865 = dyn.reshape(%862, %863, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %866 = cast(meta[relay.Constant][38] /* ty=Tensor[(3, 66), uint64] */, dtype="uint64") /* ty=Tensor[(3, 66), uint64] */;
  %867 = reshape(%866, newshape=[6, 3, 11]) /* ty=Tensor[(6, 3, 11), uint64] */;
  %868 = @func_3882(%867) /* ty=Tensor[(6, 3, 11), bool] */;
  %869 = cast(%868, dtype="int8") /* ty=Tensor[(6, 3, 11), int8] */;
  %870 = shape_of(%861, dtype="int32") /* ty=Tensor[(2), int32] */;
  %871 = cast(%861, dtype="int8") /* ty=Tensor[(3, 66), int8] */;
  %872 = dyn.reshape(%869, %870, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %873 = @func_3012() /* ty=Tensor[(12, 13, 4), float64] */;
  %874 = less_equal(%864, %865) /* ty=Tensor[(3, 66), bool] */;
  %875 = minimum(%871, %872) /* ty=Tensor[(3, 66), int8] */;
  (%873, %874, %875)
}

def @func_5566() -> (Tensor[(12, 9, 4), float64], Tensor[(12, 13, 4), float32]) {
  %876 = @func_4837() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64], Tensor[(12, 9, 4), float64]) */;
  %877 = @func_4837() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64], Tensor[(12, 9, 4), float64]) */;
  %878 = %876.5;
  %879 = %877.2;
  (%878, %879)
}

def @func_5846(%var_5820: Tensor[(9, 16, 7), int64], %var_5821: Tensor[(9, 16, 7), int64], %var_5840: Tensor[(728), uint8]) -> (Tensor[(9, 16, 7), int64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(728), uint8]) {
  %880 = cast(%var_5821, dtype="int64") /* ty=Tensor[(9, 16, 7), int64] */;
  %881 = shape_of(%var_5820, dtype="int32") /* ty=Tensor[(3), int32] */;
  %882 = cast(%var_5820, dtype="int64") /* ty=Tensor[(9, 16, 7), int64] */;
  %883 = dyn.reshape(%880, %881, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %884 = cast(%var_5840, dtype="uint8") /* ty=Tensor[(728), uint8] */;
  %885 = reshape(%884, newshape=[728]) /* ty=Tensor[(728), uint8] */;
  %886 = @func_2982(%885) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), bool], Tensor[(728), uint8], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32]) */;
  %887 = bitwise_or(%882, %883) /* ty=Tensor[(9, 16, 7), int64] */;
  %888 = @func_2357() /* ty=Tensor[(12, 13, 4), float64] */;
  %889 = %886.5;
  (%887, %888, %889, %var_5840)
}

def @func_4677(%var_4673: Tensor[(13, 16, 10), uint32]) -> (Tensor[(13, 16, 10), uint32],) {
  %890 = cast(%var_4673, dtype="uint32") /* ty=Tensor[(13, 16, 10), uint32] */;
  %891 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(13, 16, 10), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %892 = cast(meta[relay.Constant][39] /* ty=Tensor[(13, 16, 10), uint32] */, dtype="uint32") /* ty=Tensor[(13, 16, 10), uint32] */;
  %893 = dyn.reshape(%890, %891, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %894 = bitwise_or(%892, %893) /* ty=Tensor[(13, 16, 10), uint32] */;
  (%894,)
}

def @func_2880(%var_2874: Tensor[(728), uint8]) -> (Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool], Tensor[(13, 14, 4), float64], Tensor[(728), uint8], Tensor[(432), float32]) {
  %895 = @func_2574() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool]) */;
  %896 = %895.1;
  %897 = cast(%896, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %898 = reshape(%897, newshape=[12, 13, 4]) /* ty=Tensor[(12, 13, 4), float64] */;
  %899 = @func_2655(%898) /* ty=(Tensor[(12, 13, 4), bool],) */;
  %900 = cast(%var_2874, dtype="uint8") /* ty=Tensor[(728), uint8] */;
  %901 = cast(meta[relay.Constant][40] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %902 = reshape(%900, newshape=[13, 14, 4]) /* ty=Tensor[(13, 14, 4), uint8] */;
  %903 = reshape(%901, newshape=[2, 216]) /* ty=Tensor[(2, 216), float32] */;
  %904 = @func_621(%902, %903) /* ty=(Tensor[(13, 14, 4), float64], Tensor[(12, 9, 4), float64], Tensor[(2, 216), float32]) */;
  %905 = %899.0;
  %906 = %904.0;
  (%896, %905, %906, %var_2874, meta[relay.Constant][40] /* ty=Tensor[(432), float32] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_7465() -> (Tensor[(12, 13, 4), float64],) {
  @func_7463() /* ty=(Tensor[(12, 13, 4), float64],) */
}

def @func_3499(%var_3497: Tensor[(728), uint8], %var_3498: Tensor[(728), uint8]) -> (Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(728), uint8], Tensor[(728), uint16], Tensor[(12, 13, 4), float32], Tensor[(728), float32]) {
  @func_3495(%var_3497, %var_3498) /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(728), uint8], Tensor[(728), uint16], Tensor[(12, 13, 4), float32], Tensor[(728), float32]) */
}

def @func_7612() -> Tensor[(12, 13, 4), float64] {
  @func_4181() /* ty=Tensor[(12, 13, 4), float64] */
}

def @func_2883(%var_2881: Tensor[(728), uint8]) -> (Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool], Tensor[(13, 14, 4), float64], Tensor[(728), uint8], Tensor[(432), float32]) {
  @func_2880(%var_2881) /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool], Tensor[(13, 14, 4), float64], Tensor[(728), uint8], Tensor[(432), float32]) */
}

def @func_6075() -> Tensor[(12, 13, 4), float64] {
  @func_6073() /* ty=Tensor[(12, 13, 4), float64] */
}

def @func_1738() -> (Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64]) {
  %10 = fn () -> (Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64]) {
    %0 = @func_1301() /* ty=Tensor[(12, 13, 4), float32] */;
    %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 13, 4), float32] */, dtype="bool") /* ty=Tensor[(12, 13, 4), bool] */;
    %2 = shape_of(%0, dtype="int32") /* ty=Tensor[(3), int32] */;
    %3 = cast(%0, dtype="bool") /* ty=Tensor[(12, 13, 4), bool] */;
    %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 13, 4), float32] */, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
    %6 = reshape(%5, newshape=[12, 13, 4]) /* ty=Tensor[(12, 13, 4), float64] */;
    %7 = @func_247(%6) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 9, 4), float64], Tensor[(432), float32]) */;
    %8 = less_equal(%3, %4) /* ty=Tensor[(12, 13, 4), bool] */;
    %9 = %7.0;
    (%8, %9)
  };
  %10() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64]) */
}

def @func_7319(%var_7274: float64, %var_7275: Tensor[(11, 10, 7), float64], %var_7284: Tensor[(11, 10, 7), float64]) -> (Tensor[(11, 10, 7), uint16], Tensor[(11, 10, 7), uint64]) {
  %11 = cast(%var_7274, dtype="float64") /* ty=float64 */;
  %12 = cast(%var_7275, dtype="float64") /* ty=Tensor[(11, 10, 7), float64] */;
  %13 = floor_divide(%11, %12) /* ty=Tensor[(11, 10, 7), float64] */;
  %14 = cast(%var_7284, dtype="uint16") /* ty=Tensor[(11, 10, 7), uint16] */;
  %15 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%13, dtype="uint16") /* ty=Tensor[(11, 10, 7), uint16] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %18 = cast(%var_7274, dtype="uint64") /* ty=uint64 */;
  %19 = cast(%var_7275, dtype="uint64") /* ty=Tensor[(11, 10, 7), uint64] */;
  %20 = minimum(%16, %17) /* ty=Tensor[(11, 10, 7), uint16] */;
  %21 = bitwise_or(%18, %19) /* ty=Tensor[(11, 10, 7), uint64] */;
  (%20, %21)
}

def @func_6668() -> (Tensor[(728), float32], Tensor[(624), float64]) {
  %28 = fn () -> (Tensor[(728), float32], Tensor[(624), float64]) {
    %22 = @func_6014() /* ty=(Tensor[(728), float64], Tensor[(13, 14, 4), float64], Tensor[(728), float64], Tensor[(624), float64]) */;
    %23 = %22.2;
    %24 = cast(%23, dtype="float32") /* ty=Tensor[(728), float32] */;
    %25 = @func_2510() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(624), float64]) */;
    %26 = log10(%24) /* ty=Tensor[(728), float32] */;
    %27 = %25.2;
    (%26, %27)
  };
  %28() /* ty=(Tensor[(728), float32], Tensor[(624), float64]) */
}

def @func_8721() -> Tensor[(12, 13, 4), float32] {
  @func_8719() /* ty=Tensor[(12, 13, 4), float32] */
}

def @func_9839() -> (Tensor[(12, 13, 4), float64],) {
  @func_9837() /* ty=(Tensor[(12, 13, 4), float64],) */
}

def @func_7367() -> (Tensor[(12, 13, 4), float32],) {
  @func_7365() /* ty=(Tensor[(12, 13, 4), float32],) */
}

def @func_3617() -> (Tensor[(728), float64],) {
  @func_3615() /* ty=(Tensor[(728), float64],) */
}

def @func_7821() -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) {
  %29 = @func_2739() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) */;
  %30 = @func_6100() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(10, 9, 16), float32], Tensor[(1440), float32]) */;
  %31 = %29.0;
  %32 = %30.1;
  (%31, %32)
}

def @func_8497(%var_8496: Tensor[(12, 13, 4), float64]) -> (Tensor[(12, 13, 4), int64], Tensor[(12, 13, 4), int8]) {
  %44 = fn (%var_8478: Tensor[(12, 13, 4), float64]) -> (Tensor[(12, 13, 4), int64], Tensor[(12, 13, 4), int8]) {
    %33 = @func_2427() /* ty=Tensor[(12, 13, 4), float64] */;
    %34 = cast(%var_8478, dtype="int64") /* ty=Tensor[(12, 13, 4), int64] */;
    %35 = shape_of(%33, dtype="int32") /* ty=Tensor[(3), int32] */;
    %36 = cast(%33, dtype="int64") /* ty=Tensor[(12, 13, 4), int64] */;
    %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %38 = cast(%var_8478, dtype="int8") /* ty=Tensor[(12, 13, 4), int8] */;
    %39 = shape_of(%33, dtype="int32") /* ty=Tensor[(3), int32] */;
    %40 = cast(%33, dtype="int8") /* ty=Tensor[(12, 13, 4), int8] */;
    %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %42 = bitwise_or(%36, %37) /* ty=Tensor[(12, 13, 4), int64] */;
    %43 = add(%40, %41) /* ty=Tensor[(12, 13, 4), int8] */;
    (%42, %43)
  };
  %44(%var_8496) /* ty=(Tensor[(12, 13, 4), int64], Tensor[(12, 13, 4), int8]) */
}

def @func_2468() -> (Tensor[(12, 13, 4), float32],) {
  %46 = fn () -> (Tensor[(12, 13, 4), float32],) {
    %45 = @func_1301() /* ty=Tensor[(12, 13, 4), float32] */;
    (%45,)
  };
  %46() /* ty=(Tensor[(12, 13, 4), float32],) */
}

def @func_5587() -> Tensor[(12, 13, 4), bool] {
  %48 = fn () -> Tensor[(12, 13, 4), bool] {
    %47 = @func_4412() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 9, 4), float64], Tensor[(728), uint8], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64], Tensor[(728), uint8], Tensor[(12, 9, 4), float64]) */;
    %47.0
  };
  %48() /* ty=Tensor[(12, 13, 4), bool] */
}

def @func_4883(%var_4882: Tensor[(672), uint64]) -> (Tensor[(12, 13, 4), float64], Tensor[(16, 6, 7), uint64], Tensor[(672), uint64], Tensor[(432), float32]) {
  %57 = fn (%var_4862: Tensor[(672), uint64]) -> (Tensor[(12, 13, 4), float64], Tensor[(16, 6, 7), uint64], Tensor[(672), uint64], Tensor[(432), float32]) {
    %49 = cast(%var_4862, dtype="uint64") /* ty=Tensor[(672), uint64] */;
    %50 = reshape(%49, newshape=[16, 6, 7]) /* ty=Tensor[(16, 6, 7), uint64] */;
    %51 = @func_2113() /* ty=Tensor[(12, 13, 4), float64] */;
    %52 = cast(%51, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
    %53 = reshape(%52, newshape=[12, 13, 4]) /* ty=Tensor[(12, 13, 4), float64] */;
    %54 = @func_247(%53) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 9, 4), float64], Tensor[(432), float32]) */;
    %55 = @func_977(%50) /* ty=Tensor[(16, 6, 7), uint64] */;
    %56 = %54.2;
    (%51, %55, %var_4862, %56)
  };
  %57(%var_4882) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(16, 6, 7), uint64], Tensor[(672), uint64], Tensor[(432), float32]) */
}

def @func_5651() -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) {
  %64 = fn () -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) {
    %58 = @func_1254() /* ty=(Tensor[(15, 15, 7), float32], Tensor[(12, 13, 4), float64], Tensor[(624), float64]) */;
    %59 = %58.1;
    %60 = cast(%59, dtype="bool") /* ty=Tensor[(12, 13, 4), bool] */;
    %61 = reshape(%60, newshape=[12, 13, 4]) /* ty=Tensor[(12, 13, 4), bool] */;
    %62 = @func_1843(%61) /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64]) */;
    %63 = %62.0;
    (%59, %63)
  };
  %64() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) */
}

def @func_2842() -> (Tensor[(12, 13, 4), float64],) {
  %65 = @func_2357() /* ty=Tensor[(12, 13, 4), float64] */;
  (%65,)
}

def @func_9859() -> (Tensor[(12, 13, 4), bool],) {
  %67 = fn () -> (Tensor[(12, 13, 4), bool],) {
    %66 = @func_5586() /* ty=Tensor[(12, 13, 4), bool] */;
    (%66,)
  };
  %67() /* ty=(Tensor[(12, 13, 4), bool],) */
}

def @func_1846(%var_1844: Tensor[(12, 13, 4), bool]) -> (Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64]) {
  @func_1843(%var_1844) /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64]) */
}

def @func_7980(%var_7951: Tensor[(7, 104), uint8], %var_7962: Tensor[(7, 104), int64], %var_7968: Tensor[(7, 104), uint8]) -> (Tensor[(7, 104), int16], Tensor[(7, 104), uint16], Tensor[(7, 104), float32], Tensor[(12, 13, 4), float64]) {
  %68 = @func_6841() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(728), float32], Tensor[(7, 104), uint8]) */;
  %69 = %68.2;
  %70 = cast(%var_7951, dtype="int64") /* ty=Tensor[(7, 104), int64] */;
  %71 = shape_of(%69, dtype="int32") /* ty=Tensor[(2), int32] */;
  %72 = cast(%69, dtype="int64") /* ty=Tensor[(7, 104), int64] */;
  %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %74 = add(%72, %73) /* ty=Tensor[(7, 104), int64] */;
  %75 = cast(%var_7962, dtype="int16") /* ty=Tensor[(7, 104), int16] */;
  %76 = shape_of(%74, dtype="int32") /* ty=Tensor[(2), int32] */;
  %77 = cast(%74, dtype="int16") /* ty=Tensor[(7, 104), int16] */;
  %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %79 = cast(%var_7968, dtype="uint16") /* ty=Tensor[(7, 104), uint16] */;
  %80 = shape_of(%69, dtype="int32") /* ty=Tensor[(2), int32] */;
  %81 = cast(%69, dtype="uint16") /* ty=Tensor[(7, 104), uint16] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %83 = cast(%var_7951, dtype="float32") /* ty=Tensor[(7, 104), float32] */;
  %84 = @func_6735() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64]) */;
  %85 = bitwise_or(%77, %78) /* ty=Tensor[(7, 104), int16] */;
  %86 = logical_xor(%81, %82) /* ty=Tensor[(7, 104), uint16] */;
  %87 = sinh(%83) /* ty=Tensor[(7, 104), float32] */;
  %88 = %84.1;
  (%85, %86, %87, %88)
}

def @func_2219() -> (Tensor[(12, 13, 4), float64],) {
  %89 = @func_1301() /* ty=Tensor[(12, 13, 4), float32] */;
  %90 = cast(%89, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %91 = erf(%90) /* ty=Tensor[(12, 13, 4), float64] */;
  (%91,)
}

def @func_7498() -> (Tensor[(624), float64], Tensor[(12, 9, 4), float64], Tensor[(2, 216), float32]) {
  @func_7496() /* ty=(Tensor[(624), float64], Tensor[(12, 9, 4), float64], Tensor[(2, 216), float32]) */
}

def @func_5283() -> Tensor[(12, 13, 4), float64] {
  @func_5281() /* ty=Tensor[(12, 13, 4), float64] */
}

def @func_6473() -> Tensor[(12, 13, 4), float32] {
  @func_6471() /* ty=Tensor[(12, 13, 4), float32] */
}

def @func_247(%var_235: Tensor[(12, 13, 4), float64]) -> (Tensor[(12, 13, 4), float64], Tensor[(12, 9, 4), float64], Tensor[(432), float32]) {
  %92 = cast(%var_235, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %93 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(12, 13, 4), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %94 = cast(meta[relay.Constant][1] /* ty=Tensor[(12, 13, 4), float64] */, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %96 = cast(meta[relay.Constant][2] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %97 = reshape(%96, newshape=[12, 9, 4]) /* ty=Tensor[(12, 9, 4), float32] */;
  %98 = @func_71(%97) /* ty=(Tensor[(12, 9, 4), float64],) */;
  %99 = minimum(%94, %95) /* ty=Tensor[(12, 13, 4), float64] */;
  %100 = %98.0;
  (%99, %100, meta[relay.Constant][2] /* ty=Tensor[(432), float32] */)
}

def @func_1859(%var_1858: Tensor[(672), uint64]) -> (Tensor[(12, 13, 4), float64], Tensor[(16, 6, 7), uint64], Tensor[(672), uint64]) {
  %106 = fn (%var_1855: Tensor[(672), uint64]) -> (Tensor[(12, 13, 4), float64], Tensor[(16, 6, 7), uint64], Tensor[(672), uint64]) {
    %101 = @func_1737() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64]) */;
    %102 = cast(%var_1855, dtype="uint64") /* ty=Tensor[(672), uint64] */;
    %103 = reshape(%102, newshape=[16, 6, 7]) /* ty=Tensor[(16, 6, 7), uint64] */;
    %104 = %101.1;
    %105 = @func_977(%103) /* ty=Tensor[(16, 6, 7), uint64] */;
    (%104, %105, %var_1855)
  };
  %106(%var_1858) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(16, 6, 7), uint64], Tensor[(672), uint64]) */
}

def @func_7463() -> (Tensor[(12, 13, 4), float64],) {
  %107 = @func_2842() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %108 = %107.0;
  (%108,)
}

def @func_1018(%var_1011: Tensor[(15, 9, 2), float32]) -> (Tensor[(15, 9, 2), float32],) {
  %109 = cast(%var_1011, dtype="float32") /* ty=Tensor[(15, 9, 2), float32] */;
  %110 = sin(%109) /* ty=Tensor[(15, 9, 2), float32] */;
  (%110,)
}

def @func_3160() -> (Tensor[(12, 13, 4), float64],) {
  %111 = @func_2427() /* ty=Tensor[(12, 13, 4), float64] */;
  (%111,)
}

def @func_3794() -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), bool], Tensor[(432), float32], Tensor[(180, 8), float32]) {
  @func_3792() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), bool], Tensor[(432), float32], Tensor[(180, 8), float32]) */
}

def @func_4576(%var_4574: float64, %var_4575: Tensor[(8, 3, 16), float64]) -> (Tensor[(8, 3, 16), float64], Tensor[(15, 9, 2), float32], Tensor[(270), float32], Tensor[(728), uint8]) {
  %121 = fn (%var_4544: float64, %var_4545: Tensor[(8, 3, 16), float64]) -> (Tensor[(8, 3, 16), float64], Tensor[(15, 9, 2), float32], Tensor[(270), float32], Tensor[(728), uint8]) {
    %112 = cast(%var_4544, dtype="float64") /* ty=float64 */;
    %113 = cast(%var_4545, dtype="float64") /* ty=Tensor[(8, 3, 16), float64] */;
    %114 = cast(meta[relay.Constant][3] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
    %115 = reshape(%114, newshape=[15, 9, 2]) /* ty=Tensor[(15, 9, 2), float32] */;
    %116 = @func_1018(%115) /* ty=(Tensor[(15, 9, 2), float32],) */;
    %117 = @func_3988() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(728), uint8], Tensor[(728), uint8], Tensor[(12, 13, 4), float64]) */;
    %118 = floor_divide(%112, %113) /* ty=Tensor[(8, 3, 16), float64] */;
    %119 = %116.0;
    %120 = %117.2;
    (%118, %119, meta[relay.Constant][3] /* ty=Tensor[(270), float32] */, %120)
  };
  %121(%var_4574, %var_4575) /* ty=(Tensor[(8, 3, 16), float64], Tensor[(15, 9, 2), float32], Tensor[(270), float32], Tensor[(728), uint8]) */
}

def @func_8189() -> Tensor[(12, 13, 4), float32] {
  %123 = fn () -> Tensor[(12, 13, 4), float32] {
    %122 = @func_4837() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64], Tensor[(12, 9, 4), float64]) */;
    %122.2
  };
  %123() /* ty=Tensor[(12, 13, 4), float32] */
}

def @func_9193(%var_9171: Tensor[(180, 8), uint8]) -> (Tensor[(270), float32], Tensor[(6, 45), float32], Tensor[(180, 8), bool], Tensor[(180, 8), bool], Tensor[(12, 9, 4), float64]) {
  %124 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 45), float32] */, dtype="float32") /* ty=Tensor[(6, 45), float32] */;
  %125 = reshape(%124, newshape=[270]) /* ty=Tensor[(270), float32] */;
  %126 = @func_2785(%125) /* ty=(Tensor[(12, 13, 4), float32], Tensor[(15, 9, 2), float32], Tensor[(270), float32], Tensor[(624), float64]) */;
  %127 = @func_8558() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(180, 8), uint8], Tensor[(12, 13, 4), float64], Tensor[(180, 8), float64], Tensor[(12, 13, 4), float32]) */;
  %128 = %127.1;
  %129 = cast(%var_9171, dtype="int32") /* ty=Tensor[(180, 8), int32] */;
  %130 = shape_of(%128, dtype="int32") /* ty=Tensor[(2), int32] */;
  %131 = cast(%128, dtype="int32") /* ty=Tensor[(180, 8), int32] */;
  %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %133 = subtract(%131, %132) /* ty=Tensor[(180, 8), int32] */;
  %134 = cast(%133, dtype="bool") /* ty=Tensor[(180, 8), bool] */;
  %135 = shape_of(%128, dtype="int32") /* ty=Tensor[(2), int32] */;
  %136 = cast(%128, dtype="bool") /* ty=Tensor[(180, 8), bool] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %138 = cast(%var_9171, dtype="bool") /* ty=Tensor[(180, 8), bool] */;
  %139 = shape_of(%128, dtype="int32") /* ty=Tensor[(2), int32] */;
  %140 = cast(%128, dtype="bool") /* ty=Tensor[(180, 8), bool] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %142 = @func_5693() /* ty=(Tensor[(12, 9, 4), float64], Tensor[(624), float64], Tensor[(728), float32], Tensor[(728), uint8], Tensor[(12, 13, 4), float64]) */;
  %143 = %126.2;
  %144 = greater(%136, %137) /* ty=Tensor[(180, 8), bool] */;
  %145 = logical_and(%140, %141) /* ty=Tensor[(180, 8), bool] */;
  %146 = %142.0;
  (%143, meta[relay.Constant][4] /* ty=Tensor[(6, 45), float32] */, %144, %145, %146)
}

def @func_6471() -> Tensor[(12, 13, 4), float32] {
  %147 = @func_3661() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(728), float64]) */;
  %147.0
}

def @func_7938() -> (Tensor[(12, 13, 4), float32],) {
  %149 = fn () -> (Tensor[(12, 13, 4), float32],) {
    %148 = @func_3351() /* ty=Tensor[(12, 13, 4), float32] */;
    (%148,)
  };
  %149() /* ty=(Tensor[(12, 13, 4), float32],) */
}

def @func_8974(%var_8973: Tensor[(5, 14, 7), float64]) -> Tensor[(5, 14, 7), float64] {
  %151 = fn (%var_8966: Tensor[(5, 14, 7), float64]) -> Tensor[(5, 14, 7), float64] {
    %150 = cast(%var_8966, dtype="float64") /* ty=Tensor[(5, 14, 7), float64] */;
    rsqrt(%150) /* ty=Tensor[(5, 14, 7), float64] */
  };
  %151(%var_8973) /* ty=Tensor[(5, 14, 7), float64] */
}

def @func_9138() -> Tensor[(12, 13, 4), bool] {
  @func_9136() /* ty=Tensor[(12, 13, 4), bool] */
}

def @func_9923() -> (Tensor[(12, 13, 4), float32],) {
  @func_9921() /* ty=(Tensor[(12, 13, 4), float32],) */
}

def @func_250(%var_248: Tensor[(12, 13, 4), float64]) -> (Tensor[(12, 13, 4), float64], Tensor[(12, 9, 4), float64], Tensor[(432), float32]) {
  @func_247(%var_248) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 9, 4), float64], Tensor[(432), float32]) */
}

def @func_4654() -> (Tensor[(12, 9, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(624), uint32]) {
  @func_4652() /* ty=(Tensor[(12, 9, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(624), uint32]) */
}

def @func_4304() -> (Tensor[(12, 13, 4), float64],) {
  %152 = @func_4019() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %153 = %152.0;
  (%153,)
}

def @func_5482() -> Tensor[(624), float64] {
  %155 = fn () -> Tensor[(624), float64] {
    %154 = @func_2510() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(624), float64]) */;
    %154.2
  };
  %155() /* ty=Tensor[(624), float64] */
}

def @func_9648() -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float32], Tensor[(624), float64]) {
  %162 = fn () -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float32], Tensor[(624), float64]) {
    %156 = @func_2467() /* ty=(Tensor[(12, 13, 4), float32],) */;
    %157 = @func_1254() /* ty=(Tensor[(15, 15, 7), float32], Tensor[(12, 13, 4), float64], Tensor[(624), float64]) */;
    %158 = @func_1448() /* ty=Tensor[(12, 13, 4), float64] */;
    %159 = @func_8048() /* ty=Tensor[(12, 13, 4), bool] */;
    %160 = %156.0;
    %161 = %157.2;
    (%158, %159, %160, %161)
  };
  %162() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float32], Tensor[(624), float64]) */
}

def @func_6015() -> (Tensor[(728), float64], Tensor[(13, 14, 4), float64], Tensor[(728), float64], Tensor[(624), float64]) {
  %169 = fn () -> (Tensor[(728), float64], Tensor[(13, 14, 4), float64], Tensor[(728), float64], Tensor[(624), float64]) {
    %163 = @func_3615() /* ty=(Tensor[(728), float64],) */;
    %164 = @func_1990() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(13, 14, 4), float64], Tensor[(1440, 1), float32], Tensor[(12, 13, 4), float32]) */;
    %165 = %163.0;
    %166 = %164.1;
    %167 = @func_3200() /* ty=Tensor[(728), float64] */;
    %168 = @func_5481() /* ty=Tensor[(624), float64] */;
    (%165, %166, %167, %168)
  };
  %169() /* ty=(Tensor[(728), float64], Tensor[(13, 14, 4), float64], Tensor[(728), float64], Tensor[(624), float64]) */
}

def @func_1615(%var_1613: Tensor[(12, 13, 4), uint32]) -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(15, 9, 2), float32], Tensor[(30, 9), float32], Tensor[(15, 9, 2), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64]) {
  @func_1612(%var_1613) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(15, 9, 2), float32], Tensor[(30, 9), float32], Tensor[(15, 9, 2), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64]) */
}

def @func_8144() -> (Tensor[(728), float64],) {
  @func_8142() /* ty=(Tensor[(728), float64],) */
}

def @func_3884(%var_3883: Tensor[(6, 3, 11), uint64]) -> Tensor[(6, 3, 11), bool] {
  %174 = fn (%var_3872: Tensor[(6, 3, 11), uint64]) -> Tensor[(6, 3, 11), bool] {
    %170 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 3, 11), uint64] */, dtype="bool") /* ty=Tensor[(6, 3, 11), bool] */;
    %171 = shape_of(%var_3872, dtype="int32") /* ty=Tensor[(3), int32] */;
    %172 = cast(%var_3872, dtype="bool") /* ty=Tensor[(6, 3, 11), bool] */;
    %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%172, %173) /* ty=Tensor[(6, 3, 11), bool] */
  };
  %174(%var_3883) /* ty=Tensor[(6, 3, 11), bool] */
}

def @func_2915() -> (Tensor[(12, 9, 4), float64],) {
  %175 = @func_2019() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64]) */;
  %176 = %175.1;
  (%176,)
}

def @func_9196(%var_9194: Tensor[(180, 8), uint8]) -> (Tensor[(270), float32], Tensor[(6, 45), float32], Tensor[(180, 8), bool], Tensor[(180, 8), bool], Tensor[(12, 9, 4), float64]) {
  @func_9193(%var_9194) /* ty=(Tensor[(270), float32], Tensor[(6, 45), float32], Tensor[(180, 8), bool], Tensor[(180, 8), bool], Tensor[(12, 9, 4), float64]) */
}

def @func_5281() -> Tensor[(12, 13, 4), float64] {
  @func_4181() /* ty=Tensor[(12, 13, 4), float64] */
}

def @func_4274(%var_4269: float64) -> Tensor[(14, 6, 15), float64] {
  %177 = cast(%var_4269, dtype="float64") /* ty=float64 */;
  %178 = cast(meta[relay.Constant][6] /* ty=Tensor[(14, 6, 15), float64] */, dtype="float64") /* ty=Tensor[(14, 6, 15), float64] */;
  power(%177, %178) /* ty=Tensor[(14, 6, 15), float64] */
}

def @func_2221() -> (Tensor[(12, 13, 4), float64],) {
  @func_2219() /* ty=(Tensor[(12, 13, 4), float64],) */
}

def @func_980(%var_978: Tensor[(16, 6, 7), uint64]) -> Tensor[(16, 6, 7), uint64] {
  @func_977(%var_978) /* ty=Tensor[(16, 6, 7), uint64] */
}

def @func_3200() -> Tensor[(728), float64] {
  %179 = @func_3064() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(1440, 1), float32], Tensor[(728), uint8], Tensor[(728), float64]) */;
  %179.3
}

def @func_7127() -> Tensor[(12, 13, 4), float32] {
  %180 = @func_2613() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %180.0
}

def @func_6563() -> (Tensor[(728), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) {
  @func_6561() /* ty=(Tensor[(728), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) */
}

def @func_8611() -> (Tensor[(12, 13, 4), float32],) {
  %183 = fn () -> (Tensor[(12, 13, 4), float32],) {
    %181 = @func_7365() /* ty=(Tensor[(12, 13, 4), float32],) */;
    %182 = %181.0;
    (%182,)
  };
  %183() /* ty=(Tensor[(12, 13, 4), float32],) */
}

def @func_8331() -> (Tensor[(12, 13, 4), bool],) {
  %186 = fn () -> (Tensor[(12, 13, 4), bool],) {
    %184 = @func_5904() /* ty=(Tensor[(180, 8), float32], Tensor[(12, 9, 4), float64], Tensor[(12, 13, 4), bool]) */;
    %185 = %184.2;
    (%185,)
  };
  %186() /* ty=(Tensor[(12, 13, 4), bool],) */
}

def @func_4019() -> (Tensor[(12, 13, 4), float64],) {
  %187 = @func_3988() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(728), uint8], Tensor[(728), uint8], Tensor[(12, 13, 4), float64]) */;
  %188 = %187.3;
  (%188,)
}

def @func_9588(%var_9585: float32, %var_9586: Tensor[(12, 4, 5), float32], %var_9587: Tensor[(48, 2), float32]) -> (Tensor[(12, 4, 5), float32], Tensor[(12, 13, 4), bool], Tensor[(3, 2, 16), float64], Tensor[(12, 4, 5), float32]) {
  @func_9583(%var_9585, %var_9586, %var_9587) /* ty=(Tensor[(12, 4, 5), float32], Tensor[(12, 13, 4), bool], Tensor[(3, 2, 16), float64], Tensor[(12, 4, 5), float32]) */
}

def @func_4679(%var_4678: Tensor[(13, 16, 10), uint32]) -> (Tensor[(13, 16, 10), uint32],) {
  %194 = fn (%var_4673: Tensor[(13, 16, 10), uint32]) -> (Tensor[(13, 16, 10), uint32],) {
    %189 = cast(%var_4673, dtype="uint32") /* ty=Tensor[(13, 16, 10), uint32] */;
    %190 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(13, 16, 10), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %191 = cast(meta[relay.Constant][7] /* ty=Tensor[(13, 16, 10), uint32] */, dtype="uint32") /* ty=Tensor[(13, 16, 10), uint32] */;
    %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %193 = bitwise_or(%191, %192) /* ty=Tensor[(13, 16, 10), uint32] */;
    (%193,)
  };
  %194(%var_4678) /* ty=(Tensor[(13, 16, 10), uint32],) */
}

def @func_7046() -> (Tensor[(12, 13, 4), float32],) {
  @func_7044() /* ty=(Tensor[(12, 13, 4), float32],) */
}

def @func_7007() -> (Tensor[(624), float64], Tensor[(8, 3, 16), float64], float64, Tensor[(384), float64]) {
  @func_7005() /* ty=(Tensor[(624), float64], Tensor[(8, 3, 16), float64], float64, Tensor[(384), float64]) */
}

def @func_7083() -> (Tensor[(728), uint8],) {
  @func_7081() /* ty=(Tensor[(728), uint8],) */
}

def @func_8120() -> (Tensor[(12, 13, 4), float32], Tensor[(432), float32], Tensor[(8, 84), uint64]) {
  @func_8118() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(432), float32], Tensor[(8, 84), uint64]) */
}

def @func_6359() -> (Tensor[(12, 13, 4), float64], Tensor[(3, 66), bool], Tensor[(3, 66), int8]) {
  @func_6357() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(3, 66), bool], Tensor[(3, 66), int8]) */
}

def @func_8043() -> (Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float32]) {
  @func_8041() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float32]) */
}

def @func_3516() -> (Tensor[(12, 13, 4), float64],) {
  @func_3514() /* ty=(Tensor[(12, 13, 4), float64],) */
}

def @func_2155() -> (Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32]) {
  %195 = @func_1402() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %196 = @func_2019() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64]) */;
  %197 = %195.0;
  %198 = %196.0;
  (%197, %198)
}

def @func_7211() -> Tensor[(12, 13, 4), float64] {
  %199 = @func_2113() /* ty=Tensor[(12, 13, 4), float64] */;
  %200 = cast(%199, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  tan(%200) /* ty=Tensor[(12, 13, 4), float64] */
}

def @func_7747() -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), bool], Tensor[(12, 9, 4), float64]) {
  @func_7745() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), bool], Tensor[(12, 9, 4), float64]) */
}

def @func_3792() -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), bool], Tensor[(432), float32], Tensor[(180, 8), float32]) {
  %201 = @func_2357() /* ty=Tensor[(12, 13, 4), float64] */;
  %202 = cast(%201, dtype="float32") /* ty=Tensor[(12, 13, 4), float32] */;
  %203 = reshape(%202, newshape=[12, 13, 4]) /* ty=Tensor[(12, 13, 4), float32] */;
  %204 = cast(meta[relay.Constant][8] /* ty=Tensor[(180, 8), float32] */, dtype="float32") /* ty=Tensor[(180, 8), float32] */;
  %205 = reshape(%204, newshape=[10, 9, 16]) /* ty=Tensor[(10, 9, 16), float32] */;
  %206 = @func_738(%205) /* ty=(Tensor[(13, 14, 4), float64], Tensor[(728), uint8], Tensor[(432), float32], Tensor[(10, 9, 16), float32]) */;
  %207 = @func_3326(%203) /* ty=Tensor[(12, 13, 4), bool] */;
  %208 = %206.2;
  (%201, %207, %208, meta[relay.Constant][8] /* ty=Tensor[(180, 8), float32] */)
}

def @func_9224() -> (Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64]) {
  @func_9222() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64]) */
}

def @func_7496() -> (Tensor[(624), float64], Tensor[(12, 9, 4), float64], Tensor[(2, 216), float32]) {
  %209 = cast(meta[relay.Constant][9] /* ty=Tensor[(2, 216), float32] */, dtype="float32") /* ty=Tensor[(2, 216), float32] */;
  %210 = reshape(%209, newshape=[12, 9, 4]) /* ty=Tensor[(12, 9, 4), float32] */;
  %211 = @func_71(%210) /* ty=(Tensor[(12, 9, 4), float64],) */;
  %212 = @func_5481() /* ty=Tensor[(624), float64] */;
  %213 = %211.0;
  (%212, %213, meta[relay.Constant][9] /* ty=Tensor[(2, 216), float32] */)
}

def @func_5196() -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64]) {
  @func_5194() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64]) */
}

def @func_8662() -> (Tensor[(12, 9, 4), float64],) {
  %215 = fn () -> (Tensor[(12, 9, 4), float64],) {
    %214 = @func_6177() /* ty=Tensor[(12, 9, 4), float64] */;
    (%214,)
  };
  %215() /* ty=(Tensor[(12, 9, 4), float64],) */
}

def @func_8797(%var_8795: Tensor[(84), float32]) -> (Tensor[(12, 13, 4), float32], Tensor[(3, 7, 4), float32], Tensor[(84), float32]) {
  %216 = @func_2467() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %217 = cast(%var_8795, dtype="float32") /* ty=Tensor[(84), float32] */;
  %218 = reshape(%217, newshape=[3, 7, 4]) /* ty=Tensor[(3, 7, 4), float32] */;
  %219 = %216.0;
  %220 = @func_4503(%218) /* ty=Tensor[(3, 7, 4), float32] */;
  (%219, %220, %var_8795)
}

def @func_3561() -> (Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64]) {
  %221 = @func_3351() /* ty=Tensor[(12, 13, 4), float32] */;
  %222 = @func_2991() /* ty=Tensor[(12, 9, 4), float64] */;
  (%221, %222)
}

def @func_2657(%var_2656: Tensor[(12, 13, 4), float64]) -> (Tensor[(12, 13, 4), bool],) {
  %230 = fn (%var_2644: Tensor[(12, 13, 4), float64]) -> (Tensor[(12, 13, 4), bool],) {
    %223 = @func_2219() /* ty=(Tensor[(12, 13, 4), float64],) */;
    %224 = %223.0;
    %225 = cast(%var_2644, dtype="bool") /* ty=Tensor[(12, 13, 4), bool] */;
    %226 = shape_of(%224, dtype="int32") /* ty=Tensor[(3), int32] */;
    %227 = cast(%224, dtype="bool") /* ty=Tensor[(12, 13, 4), bool] */;
    %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %229 = greater_equal(%227, %228) /* ty=Tensor[(12, 13, 4), bool] */;
    (%229,)
  };
  %230(%var_2656) /* ty=(Tensor[(12, 13, 4), bool],) */
}

def @func_3352() -> Tensor[(12, 13, 4), float32] {
  %232 = fn () -> Tensor[(12, 13, 4), float32] {
    %231 = @func_2613() /* ty=(Tensor[(12, 13, 4), float32],) */;
    %231.0
  };
  %232() /* ty=Tensor[(12, 13, 4), float32] */
}

def @func_4492(%var_4490: Tensor[(1, 2288), float64], %var_4491: Tensor[(432), float32]) -> (Tensor[(12, 13, 4), uint32], Tensor[(12, 13, 4), float64], Tensor[(1, 2288), float64], Tensor[(12, 9, 4), float64], Tensor[(432), float32]) {
  @func_4488(%var_4490, %var_4491) /* ty=(Tensor[(12, 13, 4), uint32], Tensor[(12, 13, 4), float64], Tensor[(1, 2288), float64], Tensor[(12, 9, 4), float64], Tensor[(432), float32]) */
}

def @func_2157() -> (Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32]) {
  @func_2155() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32]) */
}

def @func_6841() -> (Tensor[(12, 13, 4), float32], Tensor[(728), float32], Tensor[(7, 104), uint8]) {
  %233 = cast(meta[relay.Constant][10] /* ty=Tensor[(7, 104), uint8] */, dtype="uint8") /* ty=Tensor[(7, 104), uint8] */;
  %234 = cast(meta[relay.Constant][10] /* ty=Tensor[(7, 104), uint8] */, dtype="uint8") /* ty=Tensor[(7, 104), uint8] */;
  %235 = reshape(%233, newshape=[728]) /* ty=Tensor[(728), uint8] */;
  %236 = reshape(%234, newshape=[728]) /* ty=Tensor[(728), uint8] */;
  %237 = @func_3495(%235, %236) /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(728), uint8], Tensor[(728), uint16], Tensor[(12, 13, 4), float32], Tensor[(728), float32]) */;
  %238 = @func_5762() /* ty=Tensor[(12, 13, 4), float32] */;
  %239 = %237.7;
  (%238, %239, meta[relay.Constant][10] /* ty=Tensor[(7, 104), uint8] */)
}

def @func_2113() -> Tensor[(12, 13, 4), float64] {
  %240 = @func_1737() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64]) */;
  %240.1
}

def @func_5448(%var_5446: Tensor[(1440), float32], %var_5447: Tensor[(1, 270), float32]) -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64], Tensor[(728), uint8], Tensor[(1440), float32], Tensor[(1440, 1), float32], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(624), float64], Tensor[(1, 270), float32], Tensor[(12, 13, 4), float64], Tensor[(12, 9, 4), float64]) {
  %262 = fn (%var_5378: Tensor[(1440), float32], %var_5433: Tensor[(1, 270), float32]) -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64], Tensor[(728), uint8], Tensor[(1440), float32], Tensor[(1440, 1), float32], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(624), float64], Tensor[(1, 270), float32], Tensor[(12, 13, 4), float64], Tensor[(12, 9, 4), float64]) {
    %241 = @func_3160() /* ty=(Tensor[(12, 13, 4), float64],) */;
    %242 = @func_3904() /* ty=(Tensor[(12, 13, 4), bool],) */;
    %243 = cast(%var_5378, dtype="float32") /* ty=Tensor[(1440), float32] */;
    %244 = reshape(%243, newshape=[10, 9, 16]) /* ty=Tensor[(10, 9, 16), float32] */;
    %245 = @func_738(%244) /* ty=(Tensor[(13, 14, 4), float64], Tensor[(728), uint8], Tensor[(432), float32], Tensor[(10, 9, 16), float32]) */;
    %246 = @func_3064() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(1440, 1), float32], Tensor[(728), uint8], Tensor[(728), float64]) */;
    %247 = cast(%var_5433, dtype="float32") /* ty=Tensor[(1, 270), float32] */;
    %248 = reshape(%247, newshape=[270]) /* ty=Tensor[(270), float32] */;
    %249 = @func_2785(%248) /* ty=(Tensor[(12, 13, 4), float32], Tensor[(15, 9, 2), float32], Tensor[(270), float32], Tensor[(624), float64]) */;
    %250 = @func_3122() /* ty=(Tensor[(12, 13, 4), float64],) */;
    %251 = @func_2915() /* ty=(Tensor[(12, 9, 4), float64],) */;
    %252 = %241.0;
    %253 = %242.0;
    %254 = @func_2357() /* ty=Tensor[(12, 13, 4), float64] */;
    %255 = %245.1;
    %256 = %246.1;
    %257 = @func_1448() /* ty=Tensor[(12, 13, 4), float64] */;
    %258 = @func_2427() /* ty=Tensor[(12, 13, 4), float64] */;
    %259 = %249.3;
    %260 = %250.0;
    %261 = %251.0;
    (%252, %253, %254, %255, %var_5378, %256, %257, %258, %259, %var_5433, %260, %261)
  };
  %262(%var_5446, %var_5447) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64], Tensor[(728), uint8], Tensor[(1440), float32], Tensor[(1440, 1), float32], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(624), float64], Tensor[(1, 270), float32], Tensor[(12, 13, 4), float64], Tensor[(12, 9, 4), float64]) */
}

def @func_3014() -> Tensor[(12, 13, 4), float64] {
  @func_3012() /* ty=Tensor[(12, 13, 4), float64] */
}

def @func_7129() -> Tensor[(12, 13, 4), float32] {
  @func_7127() /* ty=Tensor[(12, 13, 4), float32] */
}

def @func_3012() -> Tensor[(12, 13, 4), float64] {
  %263 = @func_1254() /* ty=(Tensor[(15, 15, 7), float32], Tensor[(12, 13, 4), float64], Tensor[(624), float64]) */;
  %263.1
}

def @func_8041() -> (Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float32]) {
  %264 = @func_6254() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64], Tensor[(432), float32]) */;
  %265 = @func_3904() /* ty=(Tensor[(12, 13, 4), bool],) */;
  %266 = @func_2510() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(624), float64]) */;
  %267 = %264.1;
  %268 = %265.0;
  %269 = %266.0;
  (%267, %268, %269)
}

def @func_2115() -> Tensor[(12, 13, 4), float64] {
  @func_2113() /* ty=Tensor[(12, 13, 4), float64] */
}

def @func_7044() -> (Tensor[(12, 13, 4), float32],) {
  %270 = @func_3351() /* ty=Tensor[(12, 13, 4), float32] */;
  (%270,)
}

def @func_8800(%var_8798: Tensor[(84), float32]) -> (Tensor[(12, 13, 4), float32], Tensor[(3, 7, 4), float32], Tensor[(84), float32]) {
  @func_8797(%var_8798) /* ty=(Tensor[(12, 13, 4), float32], Tensor[(3, 7, 4), float32], Tensor[(84), float32]) */
}

def @func_3329(%var_3327: Tensor[(12, 13, 4), float32]) -> Tensor[(12, 13, 4), bool] {
  @func_3326(%var_3327) /* ty=Tensor[(12, 13, 4), bool] */
}

def @func_6178() -> Tensor[(12, 9, 4), float64] {
  %272 = fn () -> Tensor[(12, 9, 4), float64] {
    %271 = @func_2019() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64]) */;
    %271.1
  };
  %272() /* ty=Tensor[(12, 9, 4), float64] */
}

def @func_9052() -> (Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) {
  %273 = @func_6623() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %274 = @func_4134() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %275 = @func_6312() /* ty=(Tensor[(624), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), bool]) */;
  %276 = @func_7821() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) */;
  %277 = %273.0;
  %278 = %274.0;
  %279 = %275.1;
  %280 = %276.1;
  (%277, %278, %279, %280)
}

def @func_9921() -> (Tensor[(12, 13, 4), float32],) {
  %281 = @func_6623() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %282 = %281.0;
  (%282,)
}

def @func_4839() -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64], Tensor[(12, 9, 4), float64]) {
  @func_4837() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64], Tensor[(12, 9, 4), float64]) */
}

def @func_8913(%var_8912: Tensor[(12, 13, 4), float64]) -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(11, 10, 7), uint16], float64, Tensor[(770), float64]) {
  %299 = fn (%var_8871: Tensor[(12, 13, 4), float64]) -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(11, 10, 7), uint16], float64, Tensor[(770), float64]) {
    %283 = @func_4181() /* ty=Tensor[(12, 13, 4), float64] */;
    %284 = cast(%var_8871, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
    %285 = shape_of(%283, dtype="int32") /* ty=Tensor[(3), int32] */;
    %286 = cast(%283, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
    %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %288 = @func_1402() /* ty=(Tensor[(12, 13, 4), float32],) */;
    %289 = cast(9.60122f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %290 = cast(meta[relay.Constant][11] /* ty=Tensor[(770), float64] */, dtype="float64") /* ty=Tensor[(770), float64] */;
    %291 = cast(meta[relay.Constant][11] /* ty=Tensor[(770), float64] */, dtype="float64") /* ty=Tensor[(770), float64] */;
    %292 = reshape(%289, newshape=[]) /* ty=float64 */;
    %293 = reshape(%290, newshape=[11, 10, 7]) /* ty=Tensor[(11, 10, 7), float64] */;
    %294 = reshape(%291, newshape=[11, 10, 7]) /* ty=Tensor[(11, 10, 7), float64] */;
    %295 = @func_7319(%292, %293, %294) /* ty=(Tensor[(11, 10, 7), uint16], Tensor[(11, 10, 7), uint64]) */;
    %296 = floor_mod(%286, %287) /* ty=Tensor[(12, 13, 4), float64] */;
    %297 = %288.0;
    %298 = %295.0;
    (%296, %297, %298, 9.60122f64 /* ty=float64 */, meta[relay.Constant][11] /* ty=Tensor[(770), float64] */)
  };
  %299(%var_8912) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(11, 10, 7), uint16], float64, Tensor[(770), float64]) */
}

def @func_6357() -> (Tensor[(12, 13, 4), float64], Tensor[(3, 66), bool], Tensor[(3, 66), int8]) {
  %300 = cast(meta[relay.Constant][12] /* ty=Tensor[(3, 66), uint64] */, dtype="float32") /* ty=Tensor[(3, 66), float32] */;
  %301 = rsqrt(%300) /* ty=Tensor[(3, 66), float32] */;
  %302 = cast(%301, dtype="float32") /* ty=Tensor[(3, 66), float32] */;
  %303 = tan(%302) /* ty=Tensor[(3, 66), float32] */;
  %304 = cast(%301, dtype="bool") /* ty=Tensor[(3, 66), bool] */;
  %305 = shape_of(%303, dtype="int32") /* ty=Tensor[(2), int32] */;
  %306 = cast(%303, dtype="bool") /* ty=Tensor[(3, 66), bool] */;
  %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %308 = cast(meta[relay.Constant][12] /* ty=Tensor[(3, 66), uint64] */, dtype="uint64") /* ty=Tensor[(3, 66), uint64] */;
  %309 = reshape(%308, newshape=[6, 3, 11]) /* ty=Tensor[(6, 3, 11), uint64] */;
  %310 = @func_3882(%309) /* ty=Tensor[(6, 3, 11), bool] */;
  %311 = cast(%310, dtype="int8") /* ty=Tensor[(6, 3, 11), int8] */;
  %312 = shape_of(%303, dtype="int32") /* ty=Tensor[(2), int32] */;
  %313 = cast(%303, dtype="int8") /* ty=Tensor[(3, 66), int8] */;
  %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %315 = @func_3012() /* ty=Tensor[(12, 13, 4), float64] */;
  %316 = less_equal(%306, %307) /* ty=Tensor[(3, 66), bool] */;
  %317 = minimum(%313, %314) /* ty=Tensor[(3, 66), int8] */;
  (%315, %316, %317)
}

def @func_5764() -> Tensor[(12, 13, 4), float32] {
  @func_5762() /* ty=Tensor[(12, 13, 4), float32] */
}

def @func_6256() -> (Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64], Tensor[(432), float32]) {
  @func_6254() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64], Tensor[(432), float32]) */
}

def @func_3835(%var_3833: Tensor[(3, 2, 16), float32]) -> Tensor[(3, 2, 16), float32] {
  @func_3832(%var_3833) /* ty=Tensor[(3, 2, 16), float32] */
}

def @func_6073() -> Tensor[(12, 13, 4), float64] {
  %318 = @func_1737() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64]) */;
  %318.1
}

def @func_9837() -> (Tensor[(12, 13, 4), float64],) {
  %319 = @func_7211() /* ty=Tensor[(12, 13, 4), float64] */;
  (%319,)
}

def @func_1302() -> Tensor[(12, 13, 4), float32] {
  %323 = fn () -> Tensor[(12, 13, 4), float32] {
    %320 = @func_1254() /* ty=(Tensor[(15, 15, 7), float32], Tensor[(12, 13, 4), float64], Tensor[(624), float64]) */;
    %321 = %320.1;
    %322 = cast(%321, dtype="float32") /* ty=Tensor[(12, 13, 4), float32] */;
    log10(%322) /* ty=Tensor[(12, 13, 4), float32] */
  };
  %323() /* ty=Tensor[(12, 13, 4), float32] */
}

def @func_4421() -> Tensor[(728), float64] {
  %325 = fn () -> Tensor[(728), float64] {
    %324 = @func_3615() /* ty=(Tensor[(728), float64],) */;
    %324.0
  };
  %325() /* ty=Tensor[(728), float64] */
}

def @func_4236(%var_4188: Tensor[(11, 16, 13), float64]) -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64], Tensor[(11, 16, 13), bool], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64]) {
  %326 = @func_1402() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %327 = @func_2842() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %328 = cast(%var_4188, dtype="float64") /* ty=Tensor[(11, 16, 13), float64] */;
  %329 = acosh(%328) /* ty=Tensor[(11, 16, 13), float64] */;
  %330 = cast(%var_4188, dtype="bool") /* ty=Tensor[(11, 16, 13), bool] */;
  %331 = shape_of(%329, dtype="int32") /* ty=Tensor[(3), int32] */;
  %332 = cast(%329, dtype="bool") /* ty=Tensor[(11, 16, 13), bool] */;
  %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %334 = @func_2574() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool]) */;
  %335 = @func_4181() /* ty=Tensor[(12, 13, 4), float64] */;
  %336 = %326.0;
  %337 = %327.0;
  %338 = less(%332, %333) /* ty=Tensor[(11, 16, 13), bool] */;
  %339 = %334.1;
  %340 = @func_2113() /* ty=Tensor[(12, 13, 4), float64] */;
  (%335, %336, %337, %338, %339, %340)
}

def @func_6843() -> (Tensor[(12, 13, 4), float32], Tensor[(728), float32], Tensor[(7, 104), uint8]) {
  @func_6841() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(728), float32], Tensor[(7, 104), uint8]) */
}

def @func_7649() -> Tensor[(12, 13, 4), float32] {
  %341 = fn () -> Tensor[(12, 13, 4), float32] {
    @func_5762() /* ty=Tensor[(12, 13, 4), float32] */
  };
  %341() /* ty=Tensor[(12, 13, 4), float32] */
}

def @func_6101() -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(10, 9, 16), float32], Tensor[(1440), float32]) {
  %349 = fn () -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(10, 9, 16), float32], Tensor[(1440), float32]) {
    %342 = @func_3561() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64]) */;
    %343 = cast(meta[relay.Constant][13] /* ty=Tensor[(1440), float32] */, dtype="float32") /* ty=Tensor[(1440), float32] */;
    %344 = reshape(%343, newshape=[10, 9, 16]) /* ty=Tensor[(10, 9, 16), float32] */;
    %345 = @func_738(%344) /* ty=(Tensor[(13, 14, 4), float64], Tensor[(728), uint8], Tensor[(432), float32], Tensor[(10, 9, 16), float32]) */;
    %346 = @func_4181() /* ty=Tensor[(12, 13, 4), float64] */;
    %347 = %342.0;
    %348 = %345.3;
    (%346, %347, %348, meta[relay.Constant][13] /* ty=Tensor[(1440), float32] */)
  };
  %349() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(10, 9, 16), float32], Tensor[(1440), float32]) */
}

def @func_741(%var_739: Tensor[(10, 9, 16), float32]) -> (Tensor[(13, 14, 4), float64], Tensor[(728), uint8], Tensor[(432), float32], Tensor[(10, 9, 16), float32]) {
  @func_738(%var_739) /* ty=(Tensor[(13, 14, 4), float64], Tensor[(728), uint8], Tensor[(432), float32], Tensor[(10, 9, 16), float32]) */
}

def @func_3988() -> (Tensor[(12, 13, 4), float32], Tensor[(728), uint8], Tensor[(728), uint8], Tensor[(12, 13, 4), float64]) {
  %350 = @func_3921() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %351 = cast(meta[relay.Constant][14] /* ty=Tensor[(728), uint8] */, dtype="uint8") /* ty=Tensor[(728), uint8] */;
  %352 = reshape(%351, newshape=[728]) /* ty=Tensor[(728), uint8] */;
  %353 = @func_2880(%352) /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool], Tensor[(13, 14, 4), float64], Tensor[(728), uint8], Tensor[(432), float32]) */;
  %354 = @func_2613() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %355 = %354.0;
  %356 = cast(%355, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %357 = %350.0;
  %358 = %353.3;
  %359 = atan(%356) /* ty=Tensor[(12, 13, 4), float64] */;
  (%357, %358, meta[relay.Constant][14] /* ty=Tensor[(728), uint8] */, %359)
}

def @func_7263() -> Tensor[(12, 9, 4), float64] {
  %361 = fn () -> Tensor[(12, 9, 4), float64] {
    %360 = @func_5566() /* ty=(Tensor[(12, 9, 4), float64], Tensor[(12, 13, 4), float32]) */;
    %360.0
  };
  %361() /* ty=Tensor[(12, 9, 4), float64] */
}

def @func_1403() -> (Tensor[(12, 13, 4), float32],) {
  %363 = fn () -> (Tensor[(12, 13, 4), float32],) {
    %362 = @func_1301() /* ty=Tensor[(12, 13, 4), float32] */;
    (%362,)
  };
  %363() /* ty=(Tensor[(12, 13, 4), float32],) */
}

def @func_7081() -> (Tensor[(728), uint8],) {
  %364 = @func_3064() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(1440, 1), float32], Tensor[(728), uint8], Tensor[(728), float64]) */;
  %365 = %364.2;
  (%365,)
}

def @func_71(%var_16: Tensor[(12, 9, 4), float32]) -> (Tensor[(12, 9, 4), float64],) {
  %366 = cast(%var_16, dtype="float32") /* ty=Tensor[(12, 9, 4), float32] */;
  %367 = rsqrt(%366) /* ty=Tensor[(12, 9, 4), float32] */;
  %368 = cast(%367, dtype="float64") /* ty=Tensor[(12, 9, 4), float64] */;
  %369 = log10(%368) /* ty=Tensor[(12, 9, 4), float64] */;
  (%369,)
}

def @func_9514(%var_9492: Tensor[(1440), float32]) -> (Tensor[(12, 13, 4), float64], Tensor[(10, 9, 16), float32], Tensor[(1440), float32], Tensor[(12, 13, 4), float32]) {
  %370 = cast(%var_9492, dtype="float32") /* ty=Tensor[(1440), float32] */;
  %371 = reshape(%370, newshape=[10, 9, 16]) /* ty=Tensor[(10, 9, 16), float32] */;
  %372 = @func_738(%371) /* ty=(Tensor[(13, 14, 4), float64], Tensor[(728), uint8], Tensor[(432), float32], Tensor[(10, 9, 16), float32]) */;
  %373 = @func_3921() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %374 = @func_7612() /* ty=Tensor[(12, 13, 4), float64] */;
  %375 = %372.3;
  %376 = %373.0;
  (%374, %375, %var_9492, %376)
}

def @func_3495(%var_3441: Tensor[(728), uint8], %var_3449: Tensor[(728), uint8]) -> (Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(728), uint8], Tensor[(728), uint16], Tensor[(12, 13, 4), float32], Tensor[(728), float32]) {
  %377 = @func_2739() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) */;
  %378 = @func_2915() /* ty=(Tensor[(12, 9, 4), float64],) */;
  %379 = cast(meta[relay.Constant][15] /* ty=Tensor[(728), uint8] */, dtype="uint8") /* ty=Tensor[(728), uint8] */;
  %380 = shape_of(%var_3441, dtype="int32") /* ty=Tensor[(1), int32] */;
  %381 = cast(%var_3441, dtype="uint8") /* ty=Tensor[(728), uint8] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %383 = cast(%var_3449, dtype="uint16") /* ty=Tensor[(728), uint16] */;
  %384 = shape_of(%var_3441, dtype="int32") /* ty=Tensor[(1), int32] */;
  %385 = cast(%var_3441, dtype="uint16") /* ty=Tensor[(728), uint16] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %387 = @func_2510() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(624), float64]) */;
  %388 = cast(%var_3441, dtype="uint8") /* ty=Tensor[(728), uint8] */;
  %389 = reshape(%388, newshape=[728]) /* ty=Tensor[(728), uint8] */;
  %390 = @func_2880(%389) /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool], Tensor[(13, 14, 4), float64], Tensor[(728), uint8], Tensor[(432), float32]) */;
  %391 = %390.3;
  %392 = cast(%391, dtype="float32") /* ty=Tensor[(728), float32] */;
  %393 = %377.1;
  %394 = @func_2304() /* ty=Tensor[(12, 13, 4), float32] */;
  %395 = %378.0;
  %396 = @func_1448() /* ty=Tensor[(12, 13, 4), float64] */;
  %397 = logical_xor(%381, %382) /* ty=Tensor[(728), uint8] */;
  %398 = bitwise_or(%385, %386) /* ty=Tensor[(728), uint16] */;
  %399 = %387.1;
  %400 = cos(%392) /* ty=Tensor[(728), float32] */;
  (%393, %394, %395, %396, %397, %398, %399, %400)
}

def @func_4652() -> (Tensor[(12, 9, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(624), uint32]) {
  %401 = cast(meta[relay.Constant][16] /* ty=Tensor[(624), uint32] */, dtype="uint32") /* ty=Tensor[(624), uint32] */;
  %402 = reshape(%401, newshape=[12, 13, 4]) /* ty=Tensor[(12, 13, 4), uint32] */;
  %403 = @func_1612(%402) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(15, 9, 2), float32], Tensor[(30, 9), float32], Tensor[(15, 9, 2), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64]) */;
  %404 = @func_2991() /* ty=Tensor[(12, 9, 4), float64] */;
  %405 = %403.6;
  (%404, %405, meta[relay.Constant][16] /* ty=Tensor[(624), uint32] */)
}

def @main(%var_9993: Tensor[(180, 8), uint16]) -> (Tensor[(12, 13, 4), bool], Tensor[(180, 8), uint64], Tensor[(15, 9, 2), float32], Tensor[(180, 8), float64], Tensor[(728), float64], Tensor[(180, 8), float32], Tensor[(180, 8), bool], Tensor[(180, 8), float64]) {
  %406 = @func_2575() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool]) */;
  %407 = @func_8560() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(180, 8), uint8], Tensor[(12, 13, 4), float64], Tensor[(180, 8), float64], Tensor[(12, 13, 4), float32]) */;
  %408 = %407.1;
  %409 = cast(%408, dtype="float64") /* ty=Tensor[(180, 8), float64] */;
  %410 = log(%409) /* ty=Tensor[(180, 8), float64] */;
  %411 = cast(%408, dtype="uint16") /* ty=Tensor[(180, 8), uint16] */;
  %412 = shape_of(%410, dtype="int32") /* ty=Tensor[(2), int32] */;
  %413 = cast(%410, dtype="uint16") /* ty=Tensor[(180, 8), uint16] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %415 = left_shift(%413, %414) /* ty=Tensor[(180, 8), uint16] */;
  %416 = cast(%var_9993, dtype="int64") /* ty=Tensor[(180, 8), int64] */;
  %417 = shape_of(%415, dtype="int32") /* ty=Tensor[(2), int32] */;
  %418 = cast(%415, dtype="int64") /* ty=Tensor[(180, 8), int64] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %420 = multiply(%418, %419) /* ty=Tensor[(180, 8), int64] */;
  %421 = cast(%415, dtype="uint64") /* ty=Tensor[(180, 8), uint64] */;
  %422 = shape_of(%420, dtype="int32") /* ty=Tensor[(2), int32] */;
  %423 = cast(%420, dtype="uint64") /* ty=Tensor[(180, 8), uint64] */;
  %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %425 = @func_5306() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(15, 9, 2), float32], Tensor[(6, 45), float32]) */;
  %426 = cast(%var_9993, dtype="float64") /* ty=Tensor[(180, 8), float64] */;
  %427 = @func_6563() /* ty=(Tensor[(728), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) */;
  %428 = cast(%420, dtype="float32") /* ty=Tensor[(180, 8), float32] */;
  %429 = cast(%420, dtype="float64") /* ty=Tensor[(180, 8), float64] */;
  %430 = tan(%429) /* ty=Tensor[(180, 8), float64] */;
  %431 = cast(%430, dtype="float32") /* ty=Tensor[(180, 8), float32] */;
  %432 = sinh(%431) /* ty=Tensor[(180, 8), float32] */;
  %433 = cast(%430, dtype="float64") /* ty=Tensor[(180, 8), float64] */;
  %434 = shape_of(%432, dtype="int32") /* ty=Tensor[(2), int32] */;
  %435 = cast(%432, dtype="float64") /* ty=Tensor[(180, 8), float64] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %437 = floor_divide(%435, %436) /* ty=Tensor[(180, 8), float64] */;
  %438 = cast(%408, dtype="bool") /* ty=Tensor[(180, 8), bool] */;
  %439 = shape_of(%437, dtype="int32") /* ty=Tensor[(2), int32] */;
  %440 = cast(%437, dtype="bool") /* ty=Tensor[(180, 8), bool] */;
  %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %442 = cast(%432, dtype="float64") /* ty=Tensor[(180, 8), float64] */;
  %443 = %406.2;
  %444 = minimum(%423, %424) /* ty=Tensor[(180, 8), uint64] */;
  %445 = %425.1;
  %446 = erf(%426) /* ty=Tensor[(180, 8), float64] */;
  %447 = %427.0;
  %448 = asinh(%428) /* ty=Tensor[(180, 8), float32] */;
  %449 = less_equal(%440, %441) /* ty=Tensor[(180, 8), bool] */;
  %450 = exp(%442) /* ty=Tensor[(180, 8), float64] */;
  (%443, %444, %445, %446, %447, %448, %449, %450)
}

def @func_3905() -> (Tensor[(12, 13, 4), bool],) {
  %453 = fn () -> (Tensor[(12, 13, 4), bool],) {
    %451 = @func_2574() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool]) */;
    %452 = %451.1;
    (%452,)
  };
  %453() /* ty=(Tensor[(12, 13, 4), bool],) */
}

def @func_9689() -> Tensor[(12, 9, 4), float64] {
  %455 = fn () -> Tensor[(12, 9, 4), float64] {
    %454 = @func_8661() /* ty=(Tensor[(12, 9, 4), float64],) */;
    %454.0
  };
  %455() /* ty=Tensor[(12, 9, 4), float64] */
}

def @func_6684(%var_6674: Tensor[(672), uint64]) -> (Tensor[(12, 13, 4), bool], Tensor[(16, 6, 7), uint64], Tensor[(672), uint64], Tensor[(12, 13, 4), float64]) {
  %456 = @func_2574() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool]) */;
  %457 = cast(%var_6674, dtype="uint64") /* ty=Tensor[(672), uint64] */;
  %458 = reshape(%457, newshape=[672]) /* ty=Tensor[(672), uint64] */;
  %459 = @func_4881(%458) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(16, 6, 7), uint64], Tensor[(672), uint64], Tensor[(432), float32]) */;
  %460 = @func_3122() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %461 = %456.2;
  %462 = %459.1;
  %463 = %460.0;
  (%461, %462, %var_6674, %463)
}

def @func_5272() -> (Tensor[(12, 13, 4), float64],) {
  %466 = fn () -> (Tensor[(12, 13, 4), float64],) {
    %464 = @func_5194() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64]) */;
    %465 = %464.0;
    (%465,)
  };
  %466() /* ty=(Tensor[(12, 13, 4), float64],) */
}

def @func_625(%var_623: Tensor[(13, 14, 4), uint8], %var_624: Tensor[(2, 216), float32]) -> (Tensor[(13, 14, 4), float64], Tensor[(12, 9, 4), float64], Tensor[(2, 216), float32]) {
  @func_621(%var_623, %var_624) /* ty=(Tensor[(13, 14, 4), float64], Tensor[(12, 9, 4), float64], Tensor[(2, 216), float32]) */
}

def @func_6921(%var_6920: Tensor[(15, 1, 6), float32]) -> (Tensor[(15, 1, 6), float32], Tensor[(12, 13, 4), bool], Tensor[(728), uint8], Tensor[(12, 13, 4), float64]) {
  %475 = fn (%var_6883: Tensor[(15, 1, 6), float32]) -> (Tensor[(15, 1, 6), float32], Tensor[(12, 13, 4), bool], Tensor[(728), uint8], Tensor[(12, 13, 4), float64]) {
    %467 = cast(%var_6883, dtype="float32") /* ty=Tensor[(15, 1, 6), float32] */;
    %468 = cast(meta[relay.Constant][17] /* ty=Tensor[(728), uint8] */, dtype="uint8") /* ty=Tensor[(728), uint8] */;
    %469 = reshape(%468, newshape=[728]) /* ty=Tensor[(728), uint8] */;
    %470 = @func_2880(%469) /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool], Tensor[(13, 14, 4), float64], Tensor[(728), uint8], Tensor[(432), float32]) */;
    %471 = @func_5194() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64]) */;
    %472 = rsqrt(%467) /* ty=Tensor[(15, 1, 6), float32] */;
    %473 = %470.1;
    %474 = %471.3;
    (%472, %473, meta[relay.Constant][17] /* ty=Tensor[(728), uint8] */, %474)
  };
  %475(%var_6920) /* ty=(Tensor[(15, 1, 6), float32], Tensor[(12, 13, 4), bool], Tensor[(728), uint8], Tensor[(12, 13, 4), float64]) */
}

def @func_6735() -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64]) {
  %476 = @func_3988() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(728), uint8], Tensor[(728), uint8], Tensor[(12, 13, 4), float64]) */;
  %477 = %476.3;
  %478 = @func_2427() /* ty=Tensor[(12, 13, 4), float64] */;
  (%477, %478)
}

def @func_3921() -> (Tensor[(12, 13, 4), float32],) {
  %479 = @func_2467() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %480 = %479.0;
  (%480,)
}

def @func_7005() -> (Tensor[(624), float64], Tensor[(8, 3, 16), float64], float64, Tensor[(384), float64]) {
  %481 = cast(5.0271f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %482 = cast(meta[relay.Constant][18] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %483 = reshape(%481, newshape=[]) /* ty=float64 */;
  %484 = reshape(%482, newshape=[8, 3, 16]) /* ty=Tensor[(8, 3, 16), float64] */;
  %485 = @func_4573(%483, %484) /* ty=(Tensor[(8, 3, 16), float64], Tensor[(15, 9, 2), float32], Tensor[(270), float32], Tensor[(728), uint8]) */;
  %486 = @func_5481() /* ty=Tensor[(624), float64] */;
  %487 = %485.0;
  (%486, %487, 5.0271f64 /* ty=float64 */, meta[relay.Constant][18] /* ty=Tensor[(384), float64] */)
}

def @func_7770() -> Tensor[(180, 8), float32] {
  %488 = @func_3792() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), bool], Tensor[(432), float32], Tensor[(180, 8), float32]) */;
  %488.3
}

def @func_6687(%var_6685: Tensor[(672), uint64]) -> (Tensor[(12, 13, 4), bool], Tensor[(16, 6, 7), uint64], Tensor[(672), uint64], Tensor[(12, 13, 4), float64]) {
  @func_6684(%var_6685) /* ty=(Tensor[(12, 13, 4), bool], Tensor[(16, 6, 7), uint64], Tensor[(672), uint64], Tensor[(12, 13, 4), float64]) */
}

def @func_8778(%var_8776: Tensor[(1440), float32]) -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64], Tensor[(728), uint8], Tensor[(1440), float32], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) {
  @func_8775(%var_8776) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64], Tensor[(728), uint8], Tensor[(1440), float32], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) */
}

def @func_8049() -> Tensor[(12, 13, 4), bool] {
  %490 = fn () -> Tensor[(12, 13, 4), bool] {
    %489 = @func_2574() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool]) */;
    %489.0
  };
  %490() /* ty=Tensor[(12, 13, 4), bool] */
}

def @func_8775(%var_8736: Tensor[(1440), float32]) -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64], Tensor[(728), uint8], Tensor[(1440), float32], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) {
  %491 = @func_4304() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %492 = cast(%var_8736, dtype="float32") /* ty=Tensor[(1440), float32] */;
  %493 = reshape(%492, newshape=[10, 9, 16]) /* ty=Tensor[(10, 9, 16), float32] */;
  %494 = @func_738(%493) /* ty=(Tensor[(13, 14, 4), float64], Tensor[(728), uint8], Tensor[(432), float32], Tensor[(10, 9, 16), float32]) */;
  %495 = @func_6735() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64]) */;
  %496 = @func_2113() /* ty=Tensor[(12, 13, 4), float64] */;
  %497 = @func_5586() /* ty=Tensor[(12, 13, 4), bool] */;
  %498 = %491.0;
  %499 = %494.1;
  %500 = %495.0;
  %501 = @func_2304() /* ty=Tensor[(12, 13, 4), float32] */;
  (%496, %497, %498, %499, %var_8736, %500, %501)
}

def @func_6254() -> (Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64], Tensor[(432), float32]) {
  %502 = @func_2155() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32]) */;
  %503 = @func_4837() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64], Tensor[(12, 9, 4), float64]) */;
  %504 = cast(meta[relay.Constant][19] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %505 = reshape(%504, newshape=[12, 9, 4]) /* ty=Tensor[(12, 9, 4), float32] */;
  %506 = @func_71(%505) /* ty=(Tensor[(12, 9, 4), float64],) */;
  %507 = %502.0;
  %508 = %503.3;
  %509 = %506.0;
  (%507, %508, %509, meta[relay.Constant][19] /* ty=Tensor[(432), float32] */)
}

def @func_9727() -> Tensor[(12, 9, 4), float64] {
  %510 = fn () -> Tensor[(12, 9, 4), float64] {
    @func_9688() /* ty=Tensor[(12, 9, 4), float64] */
  };
  %510() /* ty=Tensor[(12, 9, 4), float64] */
}

def @func_3990() -> (Tensor[(12, 13, 4), float32], Tensor[(728), uint8], Tensor[(728), uint8], Tensor[(12, 13, 4), float64]) {
  @func_3988() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(728), uint8], Tensor[(728), uint8], Tensor[(12, 13, 4), float64]) */
}

def @func_3563() -> (Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64]) {
  @func_3561() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64]) */
}

def @func_4239(%var_4237: Tensor[(11, 16, 13), float64]) -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64], Tensor[(11, 16, 13), bool], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64]) {
  @func_4236(%var_4237) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64], Tensor[(11, 16, 13), bool], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64]) */
}

def @func_1256() -> (Tensor[(15, 15, 7), float32], Tensor[(12, 13, 4), float64], Tensor[(624), float64]) {
  @func_1254() /* ty=(Tensor[(15, 15, 7), float32], Tensor[(12, 13, 4), float64], Tensor[(624), float64]) */
}

def @func_5306() -> (Tensor[(12, 13, 4), float32], Tensor[(15, 9, 2), float32], Tensor[(6, 45), float32]) {
  @func_5304() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(15, 9, 2), float32], Tensor[(6, 45), float32]) */
}

def @func_3202() -> Tensor[(728), float64] {
  @func_3200() /* ty=Tensor[(728), float64] */
}

def @func_621(%var_606: Tensor[(13, 14, 4), uint8], %var_619: Tensor[(2, 216), float32]) -> (Tensor[(13, 14, 4), float64], Tensor[(12, 9, 4), float64], Tensor[(2, 216), float32]) {
  %511 = cast(meta[relay.Constant][20] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %512 = cast(%var_606, dtype="uint8") /* ty=Tensor[(13, 14, 4), uint8] */;
  %513 = bitwise_xor(%511, %512) /* ty=Tensor[(13, 14, 4), uint8] */;
  %514 = cast(%513, dtype="float64") /* ty=Tensor[(13, 14, 4), float64] */;
  %515 = cast(%var_619, dtype="float32") /* ty=Tensor[(2, 216), float32] */;
  %516 = reshape(%515, newshape=[12, 9, 4]) /* ty=Tensor[(12, 9, 4), float32] */;
  %517 = @func_71(%516) /* ty=(Tensor[(12, 9, 4), float64],) */;
  %518 = atanh(%514) /* ty=Tensor[(13, 14, 4), float64] */;
  %519 = %517.0;
  (%518, %519, %var_619)
}

def @func_2614() -> (Tensor[(12, 13, 4), float32],) {
  %522 = fn () -> (Tensor[(12, 13, 4), float32],) {
    %520 = @func_2019() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64]) */;
    %521 = %520.0;
    (%521,)
  };
  %522() /* ty=(Tensor[(12, 13, 4), float32],) */
}

def @func_2739() -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) {
  %523 = @func_2219() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %524 = %523.0;
  %525 = cast(%524, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %526 = @func_2613() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %527 = rsqrt(%525) /* ty=Tensor[(12, 13, 4), float64] */;
  %528 = %526.0;
  (%527, %528)
}

def @func_7535() -> (Tensor[(12, 13, 4), float64],) {
  %531 = fn () -> (Tensor[(12, 13, 4), float64],) {
    %529 = @func_6735() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64]) */;
    %530 = %529.0;
    (%530,)
  };
  %531() /* ty=(Tensor[(12, 13, 4), float64],) */
}

def @func_7985(%var_7982: Tensor[(7, 104), uint8], %var_7983: Tensor[(7, 104), int64], %var_7984: Tensor[(7, 104), uint8]) -> (Tensor[(7, 104), int16], Tensor[(7, 104), uint16], Tensor[(7, 104), float32], Tensor[(12, 13, 4), float64]) {
  @func_7980(%var_7982, %var_7983, %var_7984) /* ty=(Tensor[(7, 104), int16], Tensor[(7, 104), uint16], Tensor[(7, 104), float32], Tensor[(12, 13, 4), float64]) */
}

def @func_1990() -> (Tensor[(12, 13, 4), float32], Tensor[(13, 14, 4), float64], Tensor[(1440, 1), float32], Tensor[(12, 13, 4), float32]) {
  %532 = @func_1402() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %533 = cast(meta[relay.Constant][21] /* ty=Tensor[(1440, 1), float32] */, dtype="float32") /* ty=Tensor[(1440, 1), float32] */;
  %534 = reshape(%533, newshape=[10, 9, 16]) /* ty=Tensor[(10, 9, 16), float32] */;
  %535 = @func_738(%534) /* ty=(Tensor[(13, 14, 4), float64], Tensor[(728), uint8], Tensor[(432), float32], Tensor[(10, 9, 16), float32]) */;
  %536 = cast(meta[relay.Constant][21] /* ty=Tensor[(1440, 1), float32] */, dtype="float32") /* ty=Tensor[(1440, 1), float32] */;
  %537 = log(%536) /* ty=Tensor[(1440, 1), float32] */;
  %538 = cast(%537, dtype="float32") /* ty=Tensor[(1440, 1), float32] */;
  %539 = %532.0;
  %540 = %535.0;
  %541 = acos(%538) /* ty=Tensor[(1440, 1), float32] */;
  %542 = @func_1301() /* ty=Tensor[(12, 13, 4), float32] */;
  (%539, %540, %541, %542)
}

def @func_5762() -> Tensor[(12, 13, 4), float32] {
  %543 = @func_2467() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %544 = %543.0;
  %545 = cast(meta[relay.Constant][22] /* ty=Tensor[(12, 13, 4), float32] */, dtype="float32") /* ty=Tensor[(12, 13, 4), float32] */;
  %546 = shape_of(%544, dtype="int32") /* ty=Tensor[(3), int32] */;
  %547 = cast(%544, dtype="float32") /* ty=Tensor[(12, 13, 4), float32] */;
  %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%547, %548) /* ty=Tensor[(12, 13, 4), float32] */
}

def @func_2917() -> (Tensor[(12, 9, 4), float64],) {
  @func_2915() /* ty=(Tensor[(12, 9, 4), float64],) */
}

def @func_3923() -> (Tensor[(12, 13, 4), float32],) {
  @func_3921() /* ty=(Tensor[(12, 13, 4), float32],) */
}

def @func_6561() -> (Tensor[(728), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) {
  %549 = @func_3988() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(728), uint8], Tensor[(728), uint8], Tensor[(12, 13, 4), float64]) */;
  %550 = %549.2;
  %551 = cast(%550, dtype="float64") /* ty=Tensor[(728), float64] */;
  %552 = log2(%551) /* ty=Tensor[(728), float64] */;
  %553 = @func_3012() /* ty=Tensor[(12, 13, 4), float64] */;
  %554 = @func_1301() /* ty=Tensor[(12, 13, 4), float32] */;
  (%552, %553, %554)
}

def @func_4414() -> (Tensor[(12, 13, 4), bool], Tensor[(12, 9, 4), float64], Tensor[(728), uint8], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64], Tensor[(728), uint8], Tensor[(12, 9, 4), float64]) {
  @func_4412() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 9, 4), float64], Tensor[(728), uint8], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64], Tensor[(728), uint8], Tensor[(12, 9, 4), float64]) */
}

def @func_2510() -> (Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(624), float64]) {
  %555 = @func_2019() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64]) */;
  %556 = @func_2155() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32]) */;
  %557 = @func_1254() /* ty=(Tensor[(15, 15, 7), float32], Tensor[(12, 13, 4), float64], Tensor[(624), float64]) */;
  %558 = %555.0;
  %559 = %556.0;
  %560 = %557.2;
  (%558, %559, %560)
}

def @func_2985(%var_2983: Tensor[(728), uint8]) -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), bool], Tensor[(728), uint8], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32]) {
  @func_2982(%var_2983) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), bool], Tensor[(728), uint8], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32]) */
}

def @func_4488(%var_4477: Tensor[(1, 2288), float64], %var_4484: Tensor[(432), float32]) -> (Tensor[(12, 13, 4), uint32], Tensor[(12, 13, 4), float64], Tensor[(1, 2288), float64], Tensor[(12, 9, 4), float64], Tensor[(432), float32]) {
  %561 = @func_3921() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %562 = %561.0;
  %563 = @func_2467() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %564 = %563.0;
  %565 = cast(%564, dtype="uint32") /* ty=Tensor[(12, 13, 4), uint32] */;
  %566 = shape_of(%562, dtype="int32") /* ty=Tensor[(3), int32] */;
  %567 = cast(%562, dtype="uint32") /* ty=Tensor[(12, 13, 4), uint32] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %569 = cast(%var_4477, dtype="float64") /* ty=Tensor[(1, 2288), float64] */;
  %570 = reshape(%569, newshape=[11, 16, 13]) /* ty=Tensor[(11, 16, 13), float64] */;
  %571 = @func_4236(%570) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64], Tensor[(11, 16, 13), bool], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64]) */;
  %572 = cast(%var_4484, dtype="float32") /* ty=Tensor[(432), float32] */;
  %573 = reshape(%572, newshape=[12, 9, 4]) /* ty=Tensor[(12, 9, 4), float32] */;
  %574 = @func_71(%573) /* ty=(Tensor[(12, 9, 4), float64],) */;
  %575 = bitwise_and(%567, %568) /* ty=Tensor[(12, 13, 4), uint32] */;
  %576 = %571.2;
  %577 = %574.0;
  (%575, %576, %var_4477, %577, %var_4484)
}

def @func_4505(%var_4504: Tensor[(3, 7, 4), float32]) -> Tensor[(3, 7, 4), float32] {
  %579 = fn (%var_4500: Tensor[(3, 7, 4), float32]) -> Tensor[(3, 7, 4), float32] {
    %578 = cast(%var_4500, dtype="float32") /* ty=Tensor[(3, 7, 4), float32] */;
    asinh(%578) /* ty=Tensor[(3, 7, 4), float32] */
  };
  %579(%var_4504) /* ty=Tensor[(3, 7, 4), float32] */
}

def @func_6313() -> (Tensor[(624), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), bool]) {
  %587 = fn () -> (Tensor[(624), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), bool]) {
    %580 = @func_4019() /* ty=(Tensor[(12, 13, 4), float64],) */;
    %581 = @func_5481() /* ty=Tensor[(624), float64] */;
    %582 = cast(%581, dtype="float64") /* ty=Tensor[(624), float64] */;
    %583 = reshape(%582, newshape=[12, 13, 4]) /* ty=Tensor[(12, 13, 4), float64] */;
    %584 = @func_2655(%583) /* ty=(Tensor[(12, 13, 4), bool],) */;
    %585 = %580.0;
    %586 = %584.0;
    (%581, %585, %586)
  };
  %587() /* ty=(Tensor[(624), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), bool]) */
}

def @func_1612(%var_1544: Tensor[(12, 13, 4), uint32]) -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(15, 9, 2), float32], Tensor[(30, 9), float32], Tensor[(15, 9, 2), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64]) {
  %588 = @func_1301() /* ty=Tensor[(12, 13, 4), float32] */;
  %589 = cast(meta[relay.Constant][23] /* ty=Tensor[(12, 13, 4), float32] */, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %590 = shape_of(%588, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(%588, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %593 = @func_1402() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %594 = cast(meta[relay.Constant][24] /* ty=Tensor[(30, 9), float32] */, dtype="float32") /* ty=Tensor[(30, 9), float32] */;
  %595 = reshape(%594, newshape=[15, 9, 2]) /* ty=Tensor[(15, 9, 2), float32] */;
  %596 = @func_1018(%595) /* ty=(Tensor[(15, 9, 2), float32],) */;
  %597 = cast(meta[relay.Constant][24] /* ty=Tensor[(30, 9), float32] */, dtype="float32") /* ty=Tensor[(30, 9), float32] */;
  %598 = reshape(%597, newshape=[15, 9, 2]) /* ty=Tensor[(15, 9, 2), float32] */;
  %599 = @func_1018(%598) /* ty=(Tensor[(15, 9, 2), float32],) */;
  %600 = @func_1402() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %601 = @func_1448() /* ty=Tensor[(12, 13, 4), float64] */;
  %602 = cast(%601, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %603 = asinh(%602) /* ty=Tensor[(12, 13, 4), float64] */;
  %604 = cast(%603, dtype="float32") /* ty=Tensor[(12, 13, 4), float32] */;
  %605 = exp(%604) /* ty=Tensor[(12, 13, 4), float32] */;
  %606 = cast(meta[relay.Constant][23] /* ty=Tensor[(12, 13, 4), float32] */, dtype="uint32") /* ty=Tensor[(12, 13, 4), uint32] */;
  %607 = shape_of(%605, dtype="int32") /* ty=Tensor[(3), int32] */;
  %608 = cast(%605, dtype="uint32") /* ty=Tensor[(12, 13, 4), uint32] */;
  %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %610 = logical_xor(%608, %609) /* ty=Tensor[(12, 13, 4), uint32] */;
  %611 = cast(%var_1544, dtype="bool") /* ty=Tensor[(12, 13, 4), bool] */;
  %612 = shape_of(%610, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(%610, dtype="bool") /* ty=Tensor[(12, 13, 4), bool] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %615 = less(%613, %614) /* ty=Tensor[(12, 13, 4), bool] */;
  %616 = cast(%615, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %617 = sinh(%616) /* ty=Tensor[(12, 13, 4), float64] */;
  %618 = cast(%617, dtype="float32") /* ty=Tensor[(12, 13, 4), float32] */;
  %619 = sin(%618) /* ty=Tensor[(12, 13, 4), float32] */;
  %620 = cast(%619, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %621 = divide(%591, %592) /* ty=Tensor[(12, 13, 4), float64] */;
  %622 = %593.0;
  %623 = %596.0;
  %624 = %599.0;
  %625 = @func_1301() /* ty=Tensor[(12, 13, 4), float32] */;
  %626 = %600.0;
  %627 = @func_1448() /* ty=Tensor[(12, 13, 4), float64] */;
  %628 = asin(%620) /* ty=Tensor[(12, 13, 4), float64] */;
  (%621, %622, %623, meta[relay.Constant][24] /* ty=Tensor[(30, 9), float32] */, %624, %625, %626, %627, %628)
}

def @func_2897() -> Tensor[(12, 13, 4), float32] {
  %630 = fn () -> Tensor[(12, 13, 4), float32] {
    %629 = @func_1402() /* ty=(Tensor[(12, 13, 4), float32],) */;
    %629.0
  };
  %630() /* ty=Tensor[(12, 13, 4), float32] */
}

def @func_4021() -> (Tensor[(12, 13, 4), float64],) {
  @func_4019() /* ty=(Tensor[(12, 13, 4), float64],) */
}

def @func_7365() -> (Tensor[(12, 13, 4), float32],) {
  %631 = @func_1301() /* ty=Tensor[(12, 13, 4), float32] */;
  (%631,)
}

def @func_5194() -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64]) {
  %632 = @func_3122() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %633 = @func_1402() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %634 = @func_2842() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %635 = %632.0;
  %636 = @func_2113() /* ty=Tensor[(12, 13, 4), float64] */;
  %637 = %633.0;
  %638 = %634.0;
  (%635, %636, %637, %638)
}

def @func_3615() -> (Tensor[(728), float64],) {
  %639 = @func_3200() /* ty=Tensor[(728), float64] */;
  %640 = cast(%639, dtype="float64") /* ty=Tensor[(728), float64] */;
  %641 = sigmoid(%640) /* ty=Tensor[(728), float64] */;
  (%641,)
}

def @func_1450() -> Tensor[(12, 13, 4), float64] {
  @func_1448() /* ty=Tensor[(12, 13, 4), float64] */
}

def @func_6795() -> Tensor[(728), float64] {
  %642 = fn () -> Tensor[(728), float64] {
    @func_3200() /* ty=Tensor[(728), float64] */
  };
  %642() /* ty=Tensor[(728), float64] */
}

def @func_5568() -> (Tensor[(12, 9, 4), float64], Tensor[(12, 13, 4), float32]) {
  @func_5566() /* ty=(Tensor[(12, 9, 4), float64], Tensor[(12, 13, 4), float32]) */
}

def @func_5850(%var_5847: Tensor[(9, 16, 7), int64], %var_5848: Tensor[(9, 16, 7), int64], %var_5849: Tensor[(728), uint8]) -> (Tensor[(9, 16, 7), int64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(728), uint8]) {
  %653 = fn (%var_5820: Tensor[(9, 16, 7), int64], %var_5821: Tensor[(9, 16, 7), int64], %var_5840: Tensor[(728), uint8]) -> (Tensor[(9, 16, 7), int64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(728), uint8]) {
    %643 = cast(%var_5821, dtype="int64") /* ty=Tensor[(9, 16, 7), int64] */;
    %644 = shape_of(%var_5820, dtype="int32") /* ty=Tensor[(3), int32] */;
    %645 = cast(%var_5820, dtype="int64") /* ty=Tensor[(9, 16, 7), int64] */;
    %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %647 = cast(%var_5840, dtype="uint8") /* ty=Tensor[(728), uint8] */;
    %648 = reshape(%647, newshape=[728]) /* ty=Tensor[(728), uint8] */;
    %649 = @func_2982(%648) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), bool], Tensor[(728), uint8], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32]) */;
    %650 = bitwise_or(%645, %646) /* ty=Tensor[(9, 16, 7), int64] */;
    %651 = @func_2357() /* ty=Tensor[(12, 13, 4), float64] */;
    %652 = %649.5;
    (%650, %651, %652, %var_5840)
  };
  %653(%var_5847, %var_5848, %var_5849) /* ty=(Tensor[(9, 16, 7), int64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(728), uint8]) */
}

def @func_8118() -> (Tensor[(12, 13, 4), float32], Tensor[(432), float32], Tensor[(8, 84), uint64]) {
  %654 = @func_7821() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) */;
  %655 = cast(meta[relay.Constant][25] /* ty=Tensor[(8, 84), uint64] */, dtype="uint64") /* ty=Tensor[(8, 84), uint64] */;
  %656 = reshape(%655, newshape=[672]) /* ty=Tensor[(672), uint64] */;
  %657 = @func_4881(%656) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(16, 6, 7), uint64], Tensor[(672), uint64], Tensor[(432), float32]) */;
  %658 = %654.1;
  %659 = %657.3;
  (%658, %659, meta[relay.Constant][25] /* ty=Tensor[(8, 84), uint64] */)
}

def @func_8719() -> Tensor[(12, 13, 4), float32] {
  @func_5762() /* ty=Tensor[(12, 13, 4), float32] */
}

def @func_8954(%var_8953: Tensor[(12, 9, 4), float64]) -> (Tensor[(12, 9, 4), int64], Tensor[(12, 13, 4), float64]) {
  %668 = fn (%var_8922: Tensor[(12, 9, 4), float64]) -> (Tensor[(12, 9, 4), int64], Tensor[(12, 13, 4), float64]) {
    %660 = @func_5566() /* ty=(Tensor[(12, 9, 4), float64], Tensor[(12, 13, 4), float32]) */;
    %661 = %660.0;
    %662 = cast(%var_8922, dtype="int64") /* ty=Tensor[(12, 9, 4), int64] */;
    %663 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
    %664 = cast(%661, dtype="int64") /* ty=Tensor[(12, 9, 4), int64] */;
    %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %666 = right_shift(%664, %665) /* ty=Tensor[(12, 9, 4), int64] */;
    %667 = @func_4181() /* ty=Tensor[(12, 13, 4), float64] */;
    (%666, %667)
  };
  %668(%var_8953) /* ty=(Tensor[(12, 9, 4), int64], Tensor[(12, 13, 4), float64]) */
}

def @func_3162() -> (Tensor[(12, 13, 4), float64],) {
  @func_3160() /* ty=(Tensor[(12, 13, 4), float64],) */
}

def @func_74(%var_72: Tensor[(12, 9, 4), float32]) -> (Tensor[(12, 9, 4), float64],) {
  @func_71(%var_72) /* ty=(Tensor[(12, 9, 4), float64],) */
}

def @func_8142() -> (Tensor[(728), float64],) {
  %669 = @func_6794() /* ty=Tensor[(728), float64] */;
  %670 = cast(%669, dtype="float64") /* ty=Tensor[(728), float64] */;
  %671 = erf(%670) /* ty=Tensor[(728), float64] */;
  (%671,)
}

def @func_2992() -> Tensor[(12, 9, 4), float64] {
  %673 = fn () -> Tensor[(12, 9, 4), float64] {
    %672 = @func_2019() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64]) */;
    %672.1
  };
  %673() /* ty=Tensor[(12, 9, 4), float64] */
}

def @func_8858() -> Tensor[(728), uint8] {
  %675 = fn () -> Tensor[(728), uint8] {
    %674 = @func_7081() /* ty=(Tensor[(728), uint8],) */;
    %674.0
  };
  %675() /* ty=Tensor[(728), uint8] */
}

def @func_6737() -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64]) {
  @func_6735() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64]) */
}

def @func_977(%var_968: Tensor[(16, 6, 7), uint64]) -> Tensor[(16, 6, 7), uint64] {
  %676 = cast(meta[relay.Constant][26] /* ty=Tensor[(16, 6, 7), uint64] */, dtype="uint64") /* ty=Tensor[(16, 6, 7), uint64] */;
  %677 = shape_of(%var_968, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%var_968, dtype="uint64") /* ty=Tensor[(16, 6, 7), uint64] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  multiply(%678, %679) /* ty=Tensor[(16, 6, 7), uint64] */
}

def @func_7424() -> (Tensor[(624), uint32], Tensor[(12, 13, 4), float64], Tensor[(12, 9, 4), float64]) {
  %680 = @func_4652() /* ty=(Tensor[(12, 9, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(624), uint32]) */;
  %681 = @func_4134() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %682 = %680.2;
  %683 = %681.0;
  %684 = @func_7262() /* ty=Tensor[(12, 9, 4), float64] */;
  (%682, %683, %684)
}

def @func_7823() -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) {
  @func_7821() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) */
}

def @func_8560() -> (Tensor[(12, 13, 4), float64], Tensor[(180, 8), uint8], Tensor[(12, 13, 4), float64], Tensor[(180, 8), float64], Tensor[(12, 13, 4), float32]) {
  @func_8558() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(180, 8), uint8], Tensor[(12, 13, 4), float64], Tensor[(180, 8), float64], Tensor[(12, 13, 4), float32]) */
}

def @func_5905() -> (Tensor[(180, 8), float32], Tensor[(12, 9, 4), float64], Tensor[(12, 13, 4), bool]) {
  %691 = fn () -> (Tensor[(180, 8), float32], Tensor[(12, 9, 4), float64], Tensor[(12, 13, 4), bool]) {
    %685 = @func_3792() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), bool], Tensor[(432), float32], Tensor[(180, 8), float32]) */;
    %686 = @func_3561() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64]) */;
    %687 = @func_2574() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool]) */;
    %688 = %685.3;
    %689 = %686.1;
    %690 = %687.2;
    (%688, %689, %690)
  };
  %691() /* ty=(Tensor[(180, 8), float32], Tensor[(12, 9, 4), float64], Tensor[(12, 13, 4), bool]) */
}

def @func_9054() -> (Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) {
  @func_9052() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) */
}

def @func_4412() -> (Tensor[(12, 13, 4), bool], Tensor[(12, 9, 4), float64], Tensor[(728), uint8], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64], Tensor[(728), uint8], Tensor[(12, 9, 4), float64]) {
  %692 = @func_3904() /* ty=(Tensor[(12, 13, 4), bool],) */;
  %693 = cast(meta[relay.Constant][27] /* ty=Tensor[(728), uint8] */, dtype="uint8") /* ty=Tensor[(728), uint8] */;
  %694 = cast(meta[relay.Constant][27] /* ty=Tensor[(728), uint8] */, dtype="uint8") /* ty=Tensor[(728), uint8] */;
  %695 = reshape(%693, newshape=[728]) /* ty=Tensor[(728), uint8] */;
  %696 = reshape(%694, newshape=[728]) /* ty=Tensor[(728), uint8] */;
  %697 = @func_3495(%695, %696) /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(728), uint8], Tensor[(728), uint16], Tensor[(12, 13, 4), float32], Tensor[(728), float32]) */;
  %698 = @func_2574() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool]) */;
  %699 = @func_3988() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(728), uint8], Tensor[(728), uint8], Tensor[(12, 13, 4), float64]) */;
  %700 = @func_2915() /* ty=(Tensor[(12, 9, 4), float64],) */;
  %701 = %692.0;
  %702 = %697.2;
  %703 = %698.2;
  %704 = @func_3012() /* ty=Tensor[(12, 13, 4), float64] */;
  %705 = %699.2;
  %706 = %700.0;
  (%701, %702, meta[relay.Constant][27] /* ty=Tensor[(728), uint8] */, %703, %704, %705, %706)
}

def @func_7324(%var_7321: float64, %var_7322: Tensor[(11, 10, 7), float64], %var_7323: Tensor[(11, 10, 7), float64]) -> (Tensor[(11, 10, 7), uint16], Tensor[(11, 10, 7), uint64]) {
  @func_7319(%var_7321, %var_7322, %var_7323) /* ty=(Tensor[(11, 10, 7), uint16], Tensor[(11, 10, 7), uint64]) */
}

def @func_7614() -> Tensor[(12, 13, 4), float64] {
  @func_7612() /* ty=Tensor[(12, 13, 4), float64] */
}

def @func_7899(%var_7898: Tensor[(8, 4, 14), float64]) -> (Tensor[(8, 4, 14), float64], Tensor[(12, 13, 4), float32], Tensor[(8, 4, 14), int32]) {
  %723 = fn (%var_7854: Tensor[(8, 4, 14), float64]) -> (Tensor[(8, 4, 14), float64], Tensor[(12, 13, 4), float32], Tensor[(8, 4, 14), int32]) {
    %707 = cast(%var_7854, dtype="float64") /* ty=Tensor[(8, 4, 14), float64] */;
    %708 = @func_5650() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) */;
    %709 = cast(%var_7854, dtype="float32") /* ty=Tensor[(8, 4, 14), float32] */;
    %710 = asin(%709) /* ty=Tensor[(8, 4, 14), float32] */;
    %711 = cast(%710, dtype="float64") /* ty=Tensor[(8, 4, 14), float64] */;
    %712 = shape_of(%var_7854, dtype="int32") /* ty=Tensor[(3), int32] */;
    %713 = cast(%var_7854, dtype="float64") /* ty=Tensor[(8, 4, 14), float64] */;
    %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %715 = floor_divide(%713, %714) /* ty=Tensor[(8, 4, 14), float64] */;
    %716 = cast(%710, dtype="int32") /* ty=Tensor[(8, 4, 14), int32] */;
    %717 = shape_of(%715, dtype="int32") /* ty=Tensor[(3), int32] */;
    %718 = cast(%715, dtype="int32") /* ty=Tensor[(8, 4, 14), int32] */;
    %719 = dyn.reshape(%716, %717, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %720 = erf(%707) /* ty=Tensor[(8, 4, 14), float64] */;
    %721 = %708.1;
    %722 = bitwise_or(%718, %719) /* ty=Tensor[(8, 4, 14), int32] */;
    (%720, %721, %722)
  };
  %723(%var_7898) /* ty=(Tensor[(8, 4, 14), float64], Tensor[(12, 13, 4), float32], Tensor[(8, 4, 14), int32]) */
}

def @func_2428() -> Tensor[(12, 13, 4), float64] {
  %724 = fn () -> Tensor[(12, 13, 4), float64] {
    @func_2113() /* ty=Tensor[(12, 13, 4), float64] */
  };
  %724() /* ty=Tensor[(12, 13, 4), float64] */
}

def @func_3514() -> (Tensor[(12, 13, 4), float64],) {
  %725 = @func_2842() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %726 = %725.0;
  %727 = cast(%726, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %728 = sigmoid(%727) /* ty=Tensor[(12, 13, 4), float64] */;
  (%728,)
}

def @func_3123() -> (Tensor[(12, 13, 4), float64],) {
  %730 = fn () -> (Tensor[(12, 13, 4), float64],) {
    %729 = @func_2357() /* ty=Tensor[(12, 13, 4), float64] */;
    (%729,)
  };
  %730() /* ty=(Tensor[(12, 13, 4), float64],) */
}

def @func_2788(%var_2786: Tensor[(270), float32]) -> (Tensor[(12, 13, 4), float32], Tensor[(15, 9, 2), float32], Tensor[(270), float32], Tensor[(624), float64]) {
  @func_2785(%var_2786) /* ty=(Tensor[(12, 13, 4), float32], Tensor[(15, 9, 2), float32], Tensor[(270), float32], Tensor[(624), float64]) */
}

def @func_2982(%var_2974: Tensor[(728), uint8]) -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), bool], Tensor[(728), uint8], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32]) {
  %731 = @func_2739() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) */;
  %732 = %731.0;
  %733 = cast(%732, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %734 = cast(%var_2974, dtype="uint8") /* ty=Tensor[(728), uint8] */;
  %735 = reshape(%734, newshape=[728]) /* ty=Tensor[(728), uint8] */;
  %736 = @func_2880(%735) /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool], Tensor[(13, 14, 4), float64], Tensor[(728), uint8], Tensor[(432), float32]) */;
  %737 = log(%733) /* ty=Tensor[(12, 13, 4), float64] */;
  %738 = cast(%737, dtype="bool") /* ty=Tensor[(12, 13, 4), bool] */;
  %739 = reshape(%738, newshape=[12, 13, 4]) /* ty=Tensor[(12, 13, 4), bool] */;
  %740 = @func_1843(%739) /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64]) */;
  %741 = @func_1301() /* ty=Tensor[(12, 13, 4), float32] */;
  %742 = %736.0;
  %743 = %740.2;
  %744 = @func_1301() /* ty=Tensor[(12, 13, 4), float32] */;
  (%737, %741, %742, %var_2974, %743, %744)
}

def @func_8274() -> Tensor[(12, 9, 4), float64] {
  %746 = fn () -> Tensor[(12, 9, 4), float64] {
    %745 = @func_2915() /* ty=(Tensor[(12, 9, 4), float64],) */;
    %745.0
  };
  %746() /* ty=Tensor[(12, 9, 4), float64] */
}

def @func_8208() -> Tensor[(12, 13, 4), float64] {
  %748 = fn () -> Tensor[(12, 13, 4), float64] {
    %747 = @func_4304() /* ty=(Tensor[(12, 13, 4), float64],) */;
    %747.0
  };
  %748() /* ty=Tensor[(12, 13, 4), float64] */
}

def @func_9136() -> Tensor[(12, 13, 4), bool] {
  @func_8048() /* ty=Tensor[(12, 13, 4), bool] */
}

def @func_2880(%var_2874: Tensor[(728), uint8]) -> (Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool], Tensor[(13, 14, 4), float64], Tensor[(728), uint8], Tensor[(432), float32]) {
  %749 = @func_2574() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool]) */;
  %750 = %749.1;
  %751 = cast(%750, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %752 = reshape(%751, newshape=[12, 13, 4]) /* ty=Tensor[(12, 13, 4), float64] */;
  %753 = @func_2655(%752) /* ty=(Tensor[(12, 13, 4), bool],) */;
  %754 = cast(%var_2874, dtype="uint8") /* ty=Tensor[(728), uint8] */;
  %755 = cast(meta[relay.Constant][28] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %756 = reshape(%754, newshape=[13, 14, 4]) /* ty=Tensor[(13, 14, 4), uint8] */;
  %757 = reshape(%755, newshape=[2, 216]) /* ty=Tensor[(2, 216), float32] */;
  %758 = @func_621(%756, %757) /* ty=(Tensor[(13, 14, 4), float64], Tensor[(12, 9, 4), float64], Tensor[(2, 216), float32]) */;
  %759 = %753.0;
  %760 = %758.0;
  (%750, %759, %760, %var_2874, meta[relay.Constant][28] /* ty=Tensor[(432), float32] */)
}

def @func_2305() -> Tensor[(12, 13, 4), float32] {
  %762 = fn () -> Tensor[(12, 13, 4), float32] {
    %761 = @func_2155() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32]) */;
    %761.0
  };
  %762() /* ty=Tensor[(12, 13, 4), float32] */
}

def @func_3662() -> (Tensor[(12, 13, 4), float32], Tensor[(728), float64]) {
  %766 = fn () -> (Tensor[(12, 13, 4), float32], Tensor[(728), float64]) {
    %763 = @func_2155() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32]) */;
    %764 = %763.1;
    %765 = @func_3200() /* ty=Tensor[(728), float64] */;
    (%764, %765)
  };
  %766() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(728), float64]) */
}

def @func_2020() -> (Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64]) {
  %773 = fn () -> (Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64]) {
    %767 = @func_1402() /* ty=(Tensor[(12, 13, 4), float32],) */;
    %768 = %767.0;
    %769 = cast(%768, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
    %770 = reshape(%769, newshape=[12, 13, 4]) /* ty=Tensor[(12, 13, 4), float64] */;
    %771 = @func_247(%770) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 9, 4), float64], Tensor[(432), float32]) */;
    %772 = %771.1;
    (%768, %772)
  };
  %773() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64]) */
}

def @func_2844() -> (Tensor[(12, 13, 4), float64],) {
  @func_2842() /* ty=(Tensor[(12, 13, 4), float64],) */
}

def @func_5693() -> (Tensor[(12, 9, 4), float64], Tensor[(624), float64], Tensor[(728), float32], Tensor[(728), uint8], Tensor[(12, 13, 4), float64]) {
  %774 = @func_4837() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64], Tensor[(12, 9, 4), float64]) */;
  %775 = cast(meta[relay.Constant][29] /* ty=Tensor[(728), uint8] */, dtype="uint8") /* ty=Tensor[(728), uint8] */;
  %776 = cast(meta[relay.Constant][29] /* ty=Tensor[(728), uint8] */, dtype="uint8") /* ty=Tensor[(728), uint8] */;
  %777 = reshape(%775, newshape=[728]) /* ty=Tensor[(728), uint8] */;
  %778 = reshape(%776, newshape=[728]) /* ty=Tensor[(728), uint8] */;
  %779 = @func_3495(%777, %778) /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(728), uint8], Tensor[(728), uint16], Tensor[(12, 13, 4), float32], Tensor[(728), float32]) */;
  %780 = %774.5;
  %781 = @func_5481() /* ty=Tensor[(624), float64] */;
  %782 = %779.7;
  %783 = @func_3012() /* ty=Tensor[(12, 13, 4), float64] */;
  (%780, %781, %782, meta[relay.Constant][29] /* ty=Tensor[(728), uint8] */, %783)
}

def @func_6624() -> (Tensor[(12, 13, 4), float32],) {
  %786 = fn () -> (Tensor[(12, 13, 4), float32],) {
    %784 = @func_5650() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) */;
    %785 = %784.1;
    (%785,)
  };
  %786() /* ty=(Tensor[(12, 13, 4), float32],) */
}

def @func_5304() -> (Tensor[(12, 13, 4), float32], Tensor[(15, 9, 2), float32], Tensor[(6, 45), float32]) {
  %787 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 45), float32] */, dtype="float32") /* ty=Tensor[(6, 45), float32] */;
  %788 = reshape(%787, newshape=[15, 9, 2]) /* ty=Tensor[(15, 9, 2), float32] */;
  %789 = @func_1018(%788) /* ty=(Tensor[(15, 9, 2), float32],) */;
  %790 = @func_2896() /* ty=Tensor[(12, 13, 4), float32] */;
  %791 = %789.0;
  (%790, %791, meta[relay.Constant][30] /* ty=Tensor[(6, 45), float32] */)
}

def @func_4277(%var_4275: float64) -> Tensor[(14, 6, 15), float64] {
  @func_4274(%var_4275) /* ty=Tensor[(14, 6, 15), float64] */
}

def @func_4182() -> Tensor[(12, 13, 4), float64] {
  %793 = fn () -> Tensor[(12, 13, 4), float64] {
    %792 = @func_2842() /* ty=(Tensor[(12, 13, 4), float64],) */;
    %792.0
  };
  %793() /* ty=Tensor[(12, 13, 4), float64] */
}

def @func_9222() -> (Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64]) {
  %794 = @func_4652() /* ty=(Tensor[(12, 9, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(624), uint32]) */;
  %795 = @func_8558() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(180, 8), uint8], Tensor[(12, 13, 4), float64], Tensor[(180, 8), float64], Tensor[(12, 13, 4), float32]) */;
  %796 = %794.1;
  %797 = %795.2;
  (%796, %797)
}

def @func_1992() -> (Tensor[(12, 13, 4), float32], Tensor[(13, 14, 4), float64], Tensor[(1440, 1), float32], Tensor[(12, 13, 4), float32]) {
  @func_1990() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(13, 14, 4), float64], Tensor[(1440, 1), float32], Tensor[(12, 13, 4), float32]) */
}

def @func_9154() -> Tensor[(12, 13, 4), float64] {
  %799 = fn () -> Tensor[(12, 13, 4), float64] {
    %798 = @func_3122() /* ty=(Tensor[(12, 13, 4), float64],) */;
    %798.0
  };
  %799() /* ty=Tensor[(12, 13, 4), float64] */
}

def @func_2575() -> (Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool]) {
  %806 = fn () -> (Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool]) {
    %800 = @func_1737() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64]) */;
    %801 = @func_1737() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64]) */;
    %802 = @func_1737() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64]) */;
    %803 = %800.0;
    %804 = %801.0;
    %805 = %802.0;
    (%803, %804, %805)
  };
  %806() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool]) */
}

def @func_9583(%var_9535: float32, %var_9536: Tensor[(12, 4, 5), float32], %var_9547: Tensor[(48, 2), float32]) -> (Tensor[(12, 4, 5), float32], Tensor[(12, 13, 4), bool], Tensor[(3, 2, 16), float64], Tensor[(12, 4, 5), float32]) {
  %807 = cast(%var_9535, dtype="float32") /* ty=float32 */;
  %808 = cast(%var_9536, dtype="float32") /* ty=Tensor[(12, 4, 5), float32] */;
  %809 = cast(%var_9547, dtype="float32") /* ty=Tensor[(48, 2), float32] */;
  %810 = reshape(%809, newshape=[3, 2, 16]) /* ty=Tensor[(3, 2, 16), float32] */;
  %811 = @func_3832(%810) /* ty=Tensor[(3, 2, 16), float32] */;
  %812 = cast(%var_9547, dtype="float64") /* ty=Tensor[(48, 2), float64] */;
  %813 = shape_of(%811, dtype="int32") /* ty=Tensor[(3), int32] */;
  %814 = cast(%811, dtype="float64") /* ty=Tensor[(3, 2, 16), float64] */;
  %815 = dyn.reshape(%812, %813, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %816 = cast(%var_9536, dtype="float64") /* ty=Tensor[(12, 4, 5), float64] */;
  %817 = cos(%816) /* ty=Tensor[(12, 4, 5), float64] */;
  %818 = cast(%817, dtype="float32") /* ty=Tensor[(12, 4, 5), float32] */;
  %819 = power(%807, %808) /* ty=Tensor[(12, 4, 5), float32] */;
  %820 = @func_8048() /* ty=Tensor[(12, 13, 4), bool] */;
  %821 = divide(%814, %815) /* ty=Tensor[(3, 2, 16), float64] */;
  %822 = sin(%818) /* ty=Tensor[(12, 4, 5), float32] */;
  (%819, %820, %821, %822)
}

def @func_2512() -> (Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(624), float64]) {
  @func_2510() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(624), float64]) */
}

def @func_7213() -> Tensor[(12, 13, 4), float64] {
  @func_7211() /* ty=Tensor[(12, 13, 4), float64] */
}

def @func_3065() -> (Tensor[(12, 13, 4), float64], Tensor[(1440, 1), float32], Tensor[(728), uint8], Tensor[(728), float64]) {
  %832 = fn () -> (Tensor[(12, 13, 4), float64], Tensor[(1440, 1), float32], Tensor[(728), uint8], Tensor[(728), float64]) {
    %823 = @func_1990() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(13, 14, 4), float64], Tensor[(1440, 1), float32], Tensor[(12, 13, 4), float32]) */;
    %824 = cast(meta[relay.Constant][31] /* ty=Tensor[(728), uint8] */, dtype="uint8") /* ty=Tensor[(728), uint8] */;
    %825 = reshape(%824, newshape=[728]) /* ty=Tensor[(728), uint8] */;
    %826 = @func_2880(%825) /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), bool], Tensor[(13, 14, 4), float64], Tensor[(728), uint8], Tensor[(432), float32]) */;
    %827 = cast(meta[relay.Constant][31] /* ty=Tensor[(728), uint8] */, dtype="float64") /* ty=Tensor[(728), float64] */;
    %828 = @func_3012() /* ty=Tensor[(12, 13, 4), float64] */;
    %829 = %823.2;
    %830 = %826.3;
    %831 = tan(%827) /* ty=Tensor[(728), float64] */;
    (%828, %829, %830, %831)
  };
  %832() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(1440, 1), float32], Tensor[(728), uint8], Tensor[(728), float64]) */
}

def @func_7745() -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), bool], Tensor[(12, 9, 4), float64]) {
  %833 = @func_6312() /* ty=(Tensor[(624), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), bool]) */;
  %834 = %833.1;
  %835 = @func_4181() /* ty=Tensor[(12, 13, 4), float64] */;
  %836 = @func_5586() /* ty=Tensor[(12, 13, 4), bool] */;
  %837 = @func_7262() /* ty=Tensor[(12, 9, 4), float64] */;
  (%834, %835, %836, %837)
}

def @func_3832(%var_3819: Tensor[(3, 2, 16), float32]) -> Tensor[(3, 2, 16), float32] {
  %838 = cast(meta[relay.Constant][32] /* ty=Tensor[(3, 2, 16), float32] */, dtype="float32") /* ty=Tensor[(3, 2, 16), float32] */;
  %839 = shape_of(%var_3819, dtype="int32") /* ty=Tensor[(3), int32] */;
  %840 = cast(%var_3819, dtype="float32") /* ty=Tensor[(3, 2, 16), float32] */;
  %841 = dyn.reshape(%838, %839, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  maximum(%840, %841) /* ty=Tensor[(3, 2, 16), float32] */
}

def @func_738(%var_695: Tensor[(10, 9, 16), float32]) -> (Tensor[(13, 14, 4), float64], Tensor[(728), uint8], Tensor[(432), float32], Tensor[(10, 9, 16), float32]) {
  %842 = cast(meta[relay.Constant][33] /* ty=Tensor[(728), uint8] */, dtype="uint8") /* ty=Tensor[(728), uint8] */;
  %843 = cast(meta[relay.Constant][34] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %844 = reshape(%842, newshape=[13, 14, 4]) /* ty=Tensor[(13, 14, 4), uint8] */;
  %845 = reshape(%843, newshape=[2, 216]) /* ty=Tensor[(2, 216), float32] */;
  %846 = @func_621(%844, %845) /* ty=(Tensor[(13, 14, 4), float64], Tensor[(12, 9, 4), float64], Tensor[(2, 216), float32]) */;
  %847 = cast(%var_695, dtype="float32") /* ty=Tensor[(10, 9, 16), float32] */;
  %848 = sigmoid(%847) /* ty=Tensor[(10, 9, 16), float32] */;
  %849 = cast(%var_695, dtype="float32") /* ty=Tensor[(10, 9, 16), float32] */;
  %850 = shape_of(%848, dtype="int32") /* ty=Tensor[(3), int32] */;
  %851 = cast(%848, dtype="float32") /* ty=Tensor[(10, 9, 16), float32] */;
  %852 = dyn.reshape(%849, %850, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %853 = %846.0;
  %854 = maximum(%851, %852) /* ty=Tensor[(10, 9, 16), float32] */;
  (%853, meta[relay.Constant][33] /* ty=Tensor[(728), uint8] */, meta[relay.Constant][34] /* ty=Tensor[(432), float32] */, %854)
}

def @func_5566() -> (Tensor[(12, 9, 4), float64], Tensor[(12, 13, 4), float32]) {
  %855 = @func_4837() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64], Tensor[(12, 9, 4), float64]) */;
  %856 = @func_4837() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64], Tensor[(12, 9, 4), float64]) */;
  %857 = %855.5;
  %858 = %856.2;
  (%857, %858)
}

def @func_4135() -> (Tensor[(12, 13, 4), float64],) {
  %861 = fn () -> (Tensor[(12, 13, 4), float64],) {
    %859 = @func_3122() /* ty=(Tensor[(12, 13, 4), float64],) */;
    %860 = %859.0;
    (%860,)
  };
  %861() /* ty=(Tensor[(12, 13, 4), float64],) */
}

def @func_3326(%var_3313: Tensor[(12, 13, 4), float32]) -> Tensor[(12, 13, 4), bool] {
  %862 = @func_2304() /* ty=Tensor[(12, 13, 4), float32] */;
  %863 = cast(%var_3313, dtype="bool") /* ty=Tensor[(12, 13, 4), bool] */;
  %864 = shape_of(%862, dtype="int32") /* ty=Tensor[(3), int32] */;
  %865 = cast(%862, dtype="bool") /* ty=Tensor[(12, 13, 4), bool] */;
  %866 = dyn.reshape(%863, %864, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%865, %866) /* ty=Tensor[(12, 13, 4), bool] */
}

def @func_1021(%var_1019: Tensor[(15, 9, 2), float32]) -> (Tensor[(15, 9, 2), float32],) {
  @func_1018(%var_1019) /* ty=(Tensor[(15, 9, 2), float32],) */
}

def @func_1448() -> Tensor[(12, 13, 4), float64] {
  %867 = @func_1402() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %868 = %867.0;
  %869 = cast(%868, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  log2(%869) /* ty=Tensor[(12, 13, 4), float64] */
}

def @func_2785(%var_2777: Tensor[(270), float32]) -> (Tensor[(12, 13, 4), float32], Tensor[(15, 9, 2), float32], Tensor[(270), float32], Tensor[(624), float64]) {
  %870 = @func_1990() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(13, 14, 4), float64], Tensor[(1440, 1), float32], Tensor[(12, 13, 4), float32]) */;
  %871 = cast(%var_2777, dtype="float32") /* ty=Tensor[(270), float32] */;
  %872 = reshape(%871, newshape=[15, 9, 2]) /* ty=Tensor[(15, 9, 2), float32] */;
  %873 = @func_1018(%872) /* ty=(Tensor[(15, 9, 2), float32],) */;
  %874 = @func_1254() /* ty=(Tensor[(15, 15, 7), float32], Tensor[(12, 13, 4), float64], Tensor[(624), float64]) */;
  %875 = %870.3;
  %876 = %873.0;
  %877 = %874.2;
  (%875, %876, %var_2777, %877)
}

def @func_1843(%var_1793: Tensor[(12, 13, 4), bool]) -> (Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64]) {
  %878 = @func_1737() /* ty=(Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float64]) */;
  %879 = %878.0;
  %880 = cast(%var_1793, dtype="uint32") /* ty=Tensor[(12, 13, 4), uint32] */;
  %881 = shape_of(%879, dtype="int32") /* ty=Tensor[(3), int32] */;
  %882 = cast(%879, dtype="uint32") /* ty=Tensor[(12, 13, 4), uint32] */;
  %883 = dyn.reshape(%880, %881, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %884 = maximum(%882, %883) /* ty=Tensor[(12, 13, 4), uint32] */;
  %885 = cast(%884, dtype="bool") /* ty=Tensor[(12, 13, 4), bool] */;
  %886 = shape_of(%879, dtype="int32") /* ty=Tensor[(3), int32] */;
  %887 = cast(%879, dtype="bool") /* ty=Tensor[(12, 13, 4), bool] */;
  %888 = dyn.reshape(%885, %886, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %889 = cast(%884, dtype="float32") /* ty=Tensor[(12, 13, 4), float32] */;
  %890 = @func_1301() /* ty=Tensor[(12, 13, 4), float32] */;
  %891 = not_equal(%887, %888) /* ty=Tensor[(12, 13, 4), bool] */;
  %892 = acosh(%889) /* ty=Tensor[(12, 13, 4), float32] */;
  %893 = @func_1448() /* ty=Tensor[(12, 13, 4), float64] */;
  (%890, %891, %892, %893)
}

def @func_1254() -> (Tensor[(15, 15, 7), float32], Tensor[(12, 13, 4), float64], Tensor[(624), float64]) {
  %894 = cast(-9.05289f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %895 = cast(meta[relay.Constant][35] /* ty=Tensor[(15, 15, 7), float32] */, dtype="float32") /* ty=Tensor[(15, 15, 7), float32] */;
  %896 = cast(meta[relay.Constant][36] /* ty=Tensor[(624), float64] */, dtype="float64") /* ty=Tensor[(624), float64] */;
  %897 = reshape(%896, newshape=[12, 13, 4]) /* ty=Tensor[(12, 13, 4), float64] */;
  %898 = @func_247(%897) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 9, 4), float64], Tensor[(432), float32]) */;
  %899 = power(%894, %895) /* ty=Tensor[(15, 15, 7), float32] */;
  %900 = %898.0;
  (%899, %900, meta[relay.Constant][36] /* ty=Tensor[(624), float64] */)
}

def @func_2359() -> Tensor[(12, 13, 4), float64] {
  @func_2357() /* ty=Tensor[(12, 13, 4), float64] */
}

def @func_9517(%var_9515: Tensor[(1440), float32]) -> (Tensor[(12, 13, 4), float64], Tensor[(10, 9, 16), float32], Tensor[(1440), float32], Tensor[(12, 13, 4), float32]) {
  @func_9514(%var_9515) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(10, 9, 16), float32], Tensor[(1440), float32], Tensor[(12, 13, 4), float32]) */
}

def @func_2357() -> Tensor[(12, 13, 4), float64] {
  @func_1448() /* ty=Tensor[(12, 13, 4), float64] */
}

def @func_5695() -> (Tensor[(12, 9, 4), float64], Tensor[(624), float64], Tensor[(728), float32], Tensor[(728), uint8], Tensor[(12, 13, 4), float64]) {
  @func_5693() /* ty=(Tensor[(12, 9, 4), float64], Tensor[(624), float64], Tensor[(728), float32], Tensor[(728), uint8], Tensor[(12, 13, 4), float64]) */
}

def @func_2741() -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) {
  @func_2739() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32]) */
}

def @func_1647(%var_1646: Tensor[(672), uint64]) -> (Tensor[(12, 13, 4), float32], Tensor[(16, 6, 7), uint64], Tensor[(672), uint64], Tensor[(12, 13, 4), float32]) {
  %912 = fn (%var_1633: Tensor[(672), uint64]) -> (Tensor[(12, 13, 4), float32], Tensor[(16, 6, 7), uint64], Tensor[(672), uint64], Tensor[(12, 13, 4), float32]) {
    %901 = @func_1402() /* ty=(Tensor[(12, 13, 4), float32],) */;
    %902 = cast(%var_1633, dtype="uint64") /* ty=Tensor[(672), uint64] */;
    %903 = reshape(%902, newshape=[16, 6, 7]) /* ty=Tensor[(16, 6, 7), uint64] */;
    %904 = %901.0;
    %905 = cast(%904, dtype="uint32") /* ty=Tensor[(12, 13, 4), uint32] */;
    %906 = reshape(%905, newshape=[12, 13, 4]) /* ty=Tensor[(12, 13, 4), uint32] */;
    %907 = @func_1612(%906) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(15, 9, 2), float32], Tensor[(30, 9), float32], Tensor[(15, 9, 2), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64]) */;
    %908 = %907.8;
    %909 = cast(%908, dtype="float32") /* ty=Tensor[(12, 13, 4), float32] */;
    %910 = @func_977(%903) /* ty=Tensor[(16, 6, 7), uint64] */;
    %911 = cos(%909) /* ty=Tensor[(12, 13, 4), float32] */;
    (%904, %910, %var_1633, %911)
  };
  %912(%var_1646) /* ty=(Tensor[(12, 13, 4), float32], Tensor[(16, 6, 7), uint64], Tensor[(672), uint64], Tensor[(12, 13, 4), float32]) */
}

def @func_4837() -> (Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64], Tensor[(12, 9, 4), float64]) {
  %913 = @func_2896() /* ty=Tensor[(12, 13, 4), float32] */;
  %914 = cast(meta[relay.Constant][37] /* ty=Tensor[(12, 13, 4), float32] */, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %915 = shape_of(%913, dtype="int32") /* ty=Tensor[(3), int32] */;
  %916 = cast(%913, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %917 = dyn.reshape(%914, %915, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %918 = @func_2842() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %919 = @func_2467() /* ty=(Tensor[(12, 13, 4), float32],) */;
  %920 = @func_2991() /* ty=Tensor[(12, 9, 4), float64] */;
  %921 = cast(meta[relay.Constant][38] /* ty=Tensor[(12, 9, 4), float64] */, dtype="float64") /* ty=Tensor[(12, 9, 4), float64] */;
  %922 = shape_of(%920, dtype="int32") /* ty=Tensor[(3), int32] */;
  %923 = cast(%920, dtype="float64") /* ty=Tensor[(12, 9, 4), float64] */;
  %924 = dyn.reshape(%921, %922, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %925 = cast(%920, dtype="float32") /* ty=Tensor[(12, 9, 4), float32] */;
  %926 = reshape(%925, newshape=[12, 9, 4]) /* ty=Tensor[(12, 9, 4), float32] */;
  %927 = @func_71(%926) /* ty=(Tensor[(12, 9, 4), float64],) */;
  %928 = mod(%916, %917) /* ty=Tensor[(12, 13, 4), float64] */;
  %929 = %918.0;
  %930 = @func_1301() /* ty=Tensor[(12, 13, 4), float32] */;
  %931 = %919.0;
  %932 = floor_divide(%923, %924) /* ty=Tensor[(12, 9, 4), float64] */;
  %933 = %927.0;
  (%928, %929, %930, %931, %932, %933)
}

def @func_7772() -> Tensor[(180, 8), float32] {
  @func_7770() /* ty=Tensor[(180, 8), float32] */
}

def @func_9408(%var_9406: Tensor[(672), uint64], %var_9407: float64) -> (Tensor[(12, 13, 4), float64], Tensor[(16, 6, 7), uint64], Tensor[(672), uint64], Tensor[(12, 13, 4), float32], Tensor[(728), uint8], float64, Tensor[(384), float64]) {
  %948 = fn (%var_9360: Tensor[(672), uint64], %var_9395: float64) -> (Tensor[(12, 13, 4), float64], Tensor[(16, 6, 7), uint64], Tensor[(672), uint64], Tensor[(12, 13, 4), float32], Tensor[(728), uint8], float64, Tensor[(384), float64]) {
    %934 = @func_4134() /* ty=(Tensor[(12, 13, 4), float64],) */;
    %935 = cast(%var_9360, dtype="uint64") /* ty=Tensor[(672), uint64] */;
    %936 = reshape(%935, newshape=[672]) /* ty=Tensor[(672), uint64] */;
    %937 = @func_6684(%936) /* ty=(Tensor[(12, 13, 4), bool], Tensor[(16, 6, 7), uint64], Tensor[(672), uint64], Tensor[(12, 13, 4), float64]) */;
    %938 = @func_8041() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), bool], Tensor[(12, 13, 4), float32]) */;
    %939 = cast(%var_9395, dtype="float64") /* ty=float64 */;
    %940 = cast(meta[relay.Constant][39] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
    %941 = reshape(%939, newshape=[]) /* ty=float64 */;
    %942 = reshape(%940, newshape=[8, 3, 16]) /* ty=Tensor[(8, 3, 16), float64] */;
    %943 = @func_4573(%941, %942) /* ty=(Tensor[(8, 3, 16), float64], Tensor[(15, 9, 2), float32], Tensor[(270), float32], Tensor[(728), uint8]) */;
    %944 = %934.0;
    %945 = %937.1;
    %946 = %938.2;
    %947 = %943.3;
    (%944, %945, %var_9360, %946, %947, %var_9395, meta[relay.Constant][39] /* ty=Tensor[(384), float64] */)
  };
  %948(%var_9406, %var_9407) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(16, 6, 7), uint64], Tensor[(672), uint64], Tensor[(12, 13, 4), float32], Tensor[(728), uint8], float64, Tensor[(384), float64]) */
}

def @func_7426() -> (Tensor[(624), uint32], Tensor[(12, 13, 4), float64], Tensor[(12, 9, 4), float64]) {
  @func_7424() /* ty=(Tensor[(624), uint32], Tensor[(12, 13, 4), float64], Tensor[(12, 9, 4), float64]) */
}

def @func_4306() -> (Tensor[(12, 13, 4), float64],) {
  @func_4304() /* ty=(Tensor[(12, 13, 4), float64],) */
}

def @func_8558() -> (Tensor[(12, 13, 4), float64], Tensor[(180, 8), uint8], Tensor[(12, 13, 4), float64], Tensor[(180, 8), float64], Tensor[(12, 13, 4), float32]) {
  %949 = @func_3792() /* ty=(Tensor[(12, 13, 4), float64], Tensor[(12, 13, 4), bool], Tensor[(432), float32], Tensor[(180, 8), float32]) */;
  %950 = @func_7770() /* ty=Tensor[(180, 8), float32] */;
  %951 = cast(meta[relay.Constant][40] /* ty=Tensor[(180, 8), float32] */, dtype="uint8") /* ty=Tensor[(180, 8), uint8] */;
  %952 = shape_of(%950, dtype="int32") /* ty=Tensor[(2), int32] */;
  %953 = cast(%950, dtype="uint8") /* ty=Tensor[(180, 8), uint8] */;
  %954 = dyn.reshape(%951, %952, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %955 = @func_4019() /* ty=(Tensor[(12, 13, 4), float64],) */;
  %956 = cast(meta[relay.Constant][40] /* ty=Tensor[(180, 8), float32] */, dtype="float32") /* ty=Tensor[(180, 8), float32] */;
  %957 = shape_of(%950, dtype="int32") /* ty=Tensor[(2), int32] */;
  %958 = cast(%950, dtype="float32") /* ty=Tensor[(180, 8), float32] */;
  %959 = dyn.reshape(%956, %957, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %960 = power(%958, %959) /* ty=Tensor[(180, 8), float32] */;
  %961 = cast(%960, dtype="float32") /* ty=Tensor[(180, 8), float32] */;
  %962 = sigmoid(%961) /* ty=Tensor[(180, 8), float32] */;
  %963 = cast(%962, dtype="float64") /* ty=Tensor[(180, 8), float64] */;
  %964 = sqrt(%963) /* ty=Tensor[(180, 8), float64] */;
  %965 = cast(%964, dtype="float64") /* ty=Tensor[(180, 8), float64] */;
  %966 = @func_6254() /* ty=(Tensor[(12, 13, 4), float32], Tensor[(12, 13, 4), float32], Tensor[(12, 9, 4), float64], Tensor[(432), float32]) */;
  %967 = %949.0;
  %968 = right_shift(%953, %954) /* ty=Tensor[(180, 8), uint8] */;
  %969 = %955.0;
  %970 = cos(%965) /* ty=Tensor[(180, 8), float64] */;
  %971 = %966.0;
  (%967, %968, %969, %970, %971)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen490/build/output.py", line 3189, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:23:15] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

