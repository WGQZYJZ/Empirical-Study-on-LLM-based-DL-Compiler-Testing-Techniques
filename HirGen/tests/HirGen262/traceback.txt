==========mod==========
#[version = "0.0.5"]
def @func_6361(%var_6349: Tensor[(44), uint64]) -> (Tensor[(11, 13, 3), float64], Tensor[(?, 126), float32], Tensor[(429), bool], Tensor[(1, 126), float64], Tensor[(1, 126), float64], Tensor[(1, 126), float32], Tensor[(1, 14, 9), float64], Tensor[(44), int64], Tensor[(44), uint64], Tensor[(?, 126), float64]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(429), float64] */, dtype="float64") /* ty=Tensor[(429), float64] */;
  %1 = reshape(%0, newshape=[11, 13, 3]) /* ty=Tensor[(11, 13, 3), float64] */;
  %2 = @func_1878(%1) /* ty=(Tensor[(11, 13, 3), bool], Tensor[(11, 13, 3), float64]) */;
  %3 = @func_4046() /* ty=Tensor[(1, 126), float64] */;
  %4 = @func_5999() /* ty=(Tensor[(1, 126), float64],) */;
  %5 = %4.0;
  %6 = cast(%3, dtype="bool") /* ty=Tensor[(1, 126), bool] */;
  %7 = shape_of(%5, dtype="int32") /* ty=Tensor[(2), int32] */;
  %8 = cast(%5, dtype="bool") /* ty=Tensor[(1, 126), bool] */;
  %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %10 = logical_and(%8, %9) /* ty=Tensor[(?, 126), bool] */;
  %11 = cast(%10, dtype="float32") /* ty=Tensor[(?, 126), float32] */;
  %12 = shape_of(%3, dtype="int32") /* ty=Tensor[(2), int32] */;
  %13 = cast(%3, dtype="float32") /* ty=Tensor[(1, 126), float32] */;
  %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %15 = cast(meta[relay.Constant][1] /* ty=Tensor[(429), float64] */, dtype="bool") /* ty=Tensor[(429), bool] */;
  %16 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(429), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %17 = cast(meta[relay.Constant][0] /* ty=Tensor[(429), float64] */, dtype="bool") /* ty=Tensor[(429), bool] */;
  %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?), bool] */;
  %19 = @func_3338() /* ty=(Tensor[(1, 126), float64],) */;
  %20 = @func_5037() /* ty=Tensor[(1, 126), float64] */;
  %21 = cast(%20, dtype="float64") /* ty=Tensor[(1, 126), float64] */;
  %22 = atan(%21) /* ty=Tensor[(1, 126), float64] */;
  %23 = cast(%22, dtype="float32") /* ty=Tensor[(1, 126), float32] */;
  %24 = cast(%var_6349, dtype="uint64") /* ty=Tensor[(44), uint64] */;
  %25 = reshape(%24, newshape=[44]) /* ty=Tensor[(44), uint64] */;
  %26 = cast(%22, dtype="float64") /* ty=Tensor[(1, 126), float64] */;
  %27 = acos(%26) /* ty=Tensor[(1, 126), float64] */;
  %28 = cast(%27, dtype="float64") /* ty=Tensor[(1, 126), float64] */;
  %29 = atanh(%28) /* ty=Tensor[(1, 126), float64] */;
  %30 = cast(%5, dtype="uint32") /* ty=Tensor[(1, 126), uint32] */;
  %31 = shape_of(%27, dtype="int32") /* ty=Tensor[(2), int32] */;
  %32 = cast(%27, dtype="uint32") /* ty=Tensor[(1, 126), uint32] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %34 = add(%32, %33) /* ty=Tensor[(?, 126), uint32] */;
  %35 = cast(%34, dtype="float64") /* ty=Tensor[(?, 126), float64] */;
  %36 = shape_of(%29, dtype="int32") /* ty=Tensor[(2), int32] */;
  %37 = cast(%29, dtype="float64") /* ty=Tensor[(1, 126), float64] */;
  %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %39 = %2.1;
  %40 = mod(%13, %14) /* ty=Tensor[(?, 126), float32] */;
  %41 = greater_equal(%17, %18) /* ty=Tensor[(429), bool] */;
  %42 = @func_5603() /* ty=Tensor[(1, 126), float64] */;
  %43 = %19.0;
  %44 = asinh(%23) /* ty=Tensor[(1, 126), float32] */;
  %45 = @func_3500() /* ty=Tensor[(1, 14, 9), float64] */;
  %46 = @func_3150(%25) /* ty=Tensor[(44), int64] */;
  %47 = floor_divide(%37, %38) /* ty=Tensor[(?, 126), float64] */;
  (%39, %40, %41, %42, %43, %44, %45, %46, %var_6349, %47)
}

def @func_6919(%var_6897: Tensor[(11), float32]) -> (Tensor[(1, 126), float64], Tensor[(9, 9, 10), bool], Tensor[(384), float64], Tensor[(11), float32], Tensor[(810), float64]) {
  %48 = cast(meta[relay.Constant][2] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %49 = cast(%var_6897, dtype="float32") /* ty=Tensor[(11), float32] */;
  %50 = cast(meta[relay.Constant][3] /* ty=Tensor[(810), float64] */, dtype="float64") /* ty=Tensor[(810), float64] */;
  %51 = reshape(%48, newshape=[1, 384]) /* ty=Tensor[(1, 384), float64] */;
  %52 = reshape(%49, newshape=[11]) /* ty=Tensor[(11), float32] */;
  %53 = reshape(%50, newshape=[9, 9, 10]) /* ty=Tensor[(9, 9, 10), float64] */;
  %54 = @func_2916(%51, %52, %53) /* ty=(Tensor[(9, ?, 10), int16], Tensor[(44), uint64], Tensor[(1, 384), float64], Tensor[(1, 14, 9), float64], Tensor[(21, 6), float64], Tensor[(120, 2), int16], Tensor[(8, 6, 8), float32], Tensor[(8, 6, 8), float64], Tensor[(9, 9, 10), bool], Tensor[(2, 2, 11), uint64], Tensor[(11, ?), bool]) */;
  %55 = @func_5037() /* ty=Tensor[(1, 126), float64] */;
  %56 = %54.8;
  (%55, %56, meta[relay.Constant][2] /* ty=Tensor[(384), float64] */, %var_6897, meta[relay.Constant][3] /* ty=Tensor[(810), float64] */)
}

def @func_3500() -> Tensor[(1, 14, 9), float64] {
  %57 = @func_3010() /* ty=(Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(1, 126), float64]) */;
  %57.1
}

def @func_2526(%var_2464: Tensor[(44), uint64], %var_2501: Tensor[(126), float64]) -> (Tensor[(44), bool], Tensor[(2, 2, 11), uint64], Tensor[(637), float32], Tensor[(675), uint8], Tensor[(126), float64], Tensor[(2, 2, 11), uint64]) {
  %58 = @func_2419() /* ty=(Tensor[(9, ?, 10), int64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64]) */;
  %59 = %58.2;
  %60 = cast(%var_2464, dtype="bool") /* ty=Tensor[(44), bool] */;
  %61 = shape_of(%59, dtype="int32") /* ty=Tensor[(1), int32] */;
  %62 = cast(%59, dtype="bool") /* ty=Tensor[(44), bool] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?), bool] */;
  %64 = cast(meta[relay.Constant][4] /* ty=Tensor[(637), float32] */, dtype="float32") /* ty=Tensor[(637), float32] */;
  %65 = cast(meta[relay.Constant][5] /* ty=Tensor[(675), uint8] */, dtype="uint8") /* ty=Tensor[(675), uint8] */;
  %66 = cast(%var_2501, dtype="float64") /* ty=Tensor[(126), float64] */;
  %67 = reshape(%64, newshape=[7, 13, 7]) /* ty=Tensor[(7, 13, 7), float32] */;
  %68 = reshape(%65, newshape=[5, 135]) /* ty=Tensor[(5, 135), uint8] */;
  %69 = reshape(%66, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %70 = @func_1638(%67, %68, %69) /* ty=(Tensor[(7, 13, 7), float32], Tensor[(5, 135), uint8], Tensor[(24, 16), float64], Tensor[(8, 6, 8), float64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(126), float64]) */;
  %71 = cast(%var_2464, dtype="uint64") /* ty=Tensor[(44), uint64] */;
  %72 = cast(%var_2464, dtype="uint64") /* ty=Tensor[(44), uint64] */;
  %73 = reshape(%71, newshape=[2, 2, 11]) /* ty=Tensor[(2, 2, 11), uint64] */;
  %74 = reshape(%72, newshape=[2, 2, 11]) /* ty=Tensor[(2, 2, 11), uint64] */;
  %75 = not_equal(%62, %63) /* ty=Tensor[(44), bool] */;
  %76 = %70.4;
  %77 = @func_1552(%73, %74) /* ty=Tensor[(2, 2, 11), uint64] */;
  (%75, %76, meta[relay.Constant][4] /* ty=Tensor[(637), float32] */, meta[relay.Constant][5] /* ty=Tensor[(675), uint8] */, %var_2501, %77)
}

def @func_4071(%var_4061: Tensor[(637), float32]) -> (Tensor[(1, 126), float64], Tensor[(5, 135), uint8], Tensor[(637), float32], Tensor[(675), uint8]) {
  %78 = cast(%var_4061, dtype="float32") /* ty=Tensor[(637), float32] */;
  %79 = cast(meta[relay.Constant][6] /* ty=Tensor[(675), uint8] */, dtype="uint8") /* ty=Tensor[(675), uint8] */;
  %80 = @func_4046() /* ty=Tensor[(1, 126), float64] */;
  %81 = cast(%80, dtype="float64") /* ty=Tensor[(1, 126), float64] */;
  %82 = reshape(%78, newshape=[7, 13, 7]) /* ty=Tensor[(7, 13, 7), float32] */;
  %83 = reshape(%79, newshape=[5, 135]) /* ty=Tensor[(5, 135), uint8] */;
  %84 = reshape(%81, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %85 = @func_1638(%82, %83, %84) /* ty=(Tensor[(7, 13, 7), float32], Tensor[(5, 135), uint8], Tensor[(24, 16), float64], Tensor[(8, 6, 8), float64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(126), float64]) */;
  %86 = %85.1;
  (%80, %86, %var_4061, meta[relay.Constant][6] /* ty=Tensor[(675), uint8] */)
}

def @main(%var_7015: Tensor[(2, 13, 9), float32]) -> (Tensor[(2, 13, 9), float32],) {
  %87 = cast(%var_7015, dtype="float32") /* ty=Tensor[(2, 13, 9), float32] */;
  %88 = acosh(%87) /* ty=Tensor[(2, 13, 9), float32] */;
  (%88,)
}

def @func_6804() -> (Tensor[(8, 6, 8), int64],) {
  %89 = @func_5572() /* ty=(Tensor[(1, 126), float64], Tensor[(240), int8], Tensor[(8, 6, 8), int64]) */;
  %90 = %89.2;
  (%90,)
}

def @func_1552(%var_1546: Tensor[(2, 2, 11), uint64], %var_1547: Tensor[(2, 2, 11), uint64]) -> Tensor[(2, 2, 11), uint64] {
  %91 = cast(%var_1547, dtype="uint64") /* ty=Tensor[(2, 2, 11), uint64] */;
  %92 = shape_of(%var_1546, dtype="int32") /* ty=Tensor[(3), int32] */;
  %93 = cast(%var_1546, dtype="uint64") /* ty=Tensor[(2, 2, 11), uint64] */;
  %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  minimum(%93, %94) /* ty=Tensor[(2, 2, 11), uint64] */
}

def @func_6989(%var_6982: Tensor[(4, 126), float32]) -> (Tensor[(4, 126), uint64],) {
  %95 = @func_4019() /* ty=Tensor[(1, 126), float32] */;
  %96 = cast(%95, dtype="uint64") /* ty=Tensor[(1, 126), uint64] */;
  %97 = cast(%var_6982, dtype="uint64") /* ty=Tensor[(4, 126), uint64] */;
  %98 = maximum(%96, %97) /* ty=Tensor[(4, 126), uint64] */;
  (%98,)
}

def @func_4099() -> (Tensor[(1, 126), float64], Tensor[(1, 126), float64], Tensor[(1, 126), float64]) {
  %99 = @func_3060() /* ty=Tensor[(1, 126), float64] */;
  %100 = cast(%99, dtype="float64") /* ty=Tensor[(1, 126), float64] */;
  %101 = cast(%99, dtype="float64") /* ty=Tensor[(1, 126), float64] */;
  %102 = log2(%100) /* ty=Tensor[(1, 126), float64] */;
  %103 = acosh(%101) /* ty=Tensor[(1, 126), float64] */;
  %104 = @func_4046() /* ty=Tensor[(1, 126), float64] */;
  (%102, %103, %104)
}

def @func_5262() -> Tensor[(1, 126), float64] {
  %105 = @func_4706() /* ty=(Tensor[(1, 126), float64],) */;
  %105.0
}

def @func_3038() -> (Tensor[(44), uint64],) {
  %106 = @func_3010() /* ty=(Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(1, 126), float64]) */;
  %107 = %106.0;
  (%107,)
}

def @func_2419() -> (Tensor[(9, ?, 10), int64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64]) {
  %108 = cast(meta[relay.Constant][7] /* ty=Tensor[(9, 1, 10), float32] */, dtype="float32") /* ty=Tensor[(9, 1, 10), float32] */;
  %109 = tan(%108) /* ty=Tensor[(9, 1, 10), float32] */;
  %110 = cast(meta[relay.Constant][7] /* ty=Tensor[(9, 1, 10), float32] */, dtype="int64") /* ty=Tensor[(9, 1, 10), int64] */;
  %111 = shape_of(%109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(%109, dtype="int64") /* ty=Tensor[(9, 1, 10), int64] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %114 = cast(meta[relay.Constant][8] /* ty=Tensor[(44), uint64] */, dtype="uint64") /* ty=Tensor[(44), uint64] */;
  %115 = cast(meta[relay.Constant][8] /* ty=Tensor[(44), uint64] */, dtype="uint64") /* ty=Tensor[(44), uint64] */;
  %116 = reshape(%114, newshape=[2, 2, 11]) /* ty=Tensor[(2, 2, 11), uint64] */;
  %117 = reshape(%115, newshape=[2, 2, 11]) /* ty=Tensor[(2, 2, 11), uint64] */;
  %118 = minimum(%112, %113) /* ty=Tensor[(9, ?, 10), int64] */;
  %119 = @func_1552(%116, %117) /* ty=Tensor[(2, 2, 11), uint64] */;
  (%118, %119, meta[relay.Constant][8] /* ty=Tensor[(44), uint64] */)
}

def @func_6228(%var_6221: Tensor[(504, 2), int32]) -> (Tensor[(44), uint64], Tensor[(16, 7, 9), bool], Tensor[(504, 2), int32]) {
  %120 = @func_3010() /* ty=(Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(1, 126), float64]) */;
  %121 = cast(%var_6221, dtype="int32") /* ty=Tensor[(504, 2), int32] */;
  %122 = reshape(%121, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), int32] */;
  %123 = @func_5422(%122) /* ty=(Tensor[(16, 7, 9), bool],) */;
  %124 = %120.0;
  %125 = %123.0;
  (%124, %125, %var_6221)
}

def @func_3726(%var_3697: Tensor[(8, 2, 8), float32], %var_3719: Tensor[(637), float32]) -> (Tensor[(8, 2, 8), float32], Tensor[(1, 14, 9), float64], Tensor[(675), uint8], Tensor[(637), float32], Tensor[(11, 1), float32], Tensor[(11), float32]) {
  %126 = cast(%var_3697, dtype="float32") /* ty=Tensor[(8, 2, 8), float32] */;
  %127 = @func_3010() /* ty=(Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(1, 126), float64]) */;
  %128 = cast(%var_3719, dtype="float32") /* ty=Tensor[(637), float32] */;
  %129 = %127.1;
  %130 = cast(%129, dtype="float64") /* ty=Tensor[(1, 14, 9), float64] */;
  %131 = reshape(%128, newshape=[637]) /* ty=Tensor[(637), float32] */;
  %132 = reshape(%130, newshape=[21, 6]) /* ty=Tensor[(21, 6), float64] */;
  %133 = @func_3607(%131, %132) /* ty=(Tensor[(44), uint64], Tensor[(7, 13, 7), float32], Tensor[(637), float32], Tensor[(675), uint8], Tensor[(21, 6), float64]) */;
  %134 = cast(meta[relay.Constant][9] /* ty=Tensor[(11), float32] */, dtype="float32") /* ty=Tensor[(11), float32] */;
  %135 = reshape(%134, newshape=[11, 1]) /* ty=Tensor[(11, 1), float32] */;
  %136 = sigmoid(%126) /* ty=Tensor[(8, 2, 8), float32] */;
  %137 = %133.3;
  %138 = @func_383(%135) /* ty=Tensor[(11, 1), float32] */;
  (%136, %129, %137, %var_3719, %138, meta[relay.Constant][9] /* ty=Tensor[(11), float32] */)
}

def @func_4893(%var_4890: Tensor[(13, 5, 11), float64]) -> Tensor[(13, 5, 11), float64] {
  %139 = cast(%var_4890, dtype="float64") /* ty=Tensor[(13, 5, 11), float64] */;
  cos(%139) /* ty=Tensor[(13, 5, 11), float64] */
}

def @func_3891() -> Tensor[(1, 126), float32] {
  %140 = @func_3419() /* ty=Tensor[(1, 126), float32] */;
  %141 = cast(%140, dtype="float32") /* ty=Tensor[(1, 126), float32] */;
  log(%141) /* ty=Tensor[(1, 126), float32] */
}

def @func_4255(%var_4183: Tensor[(9, 10, 10), int64], %var_4207: Tensor[(44), uint64], %var_4224: Tensor[(9, 10, 10), float32], %var_4229: Tensor[(9, 10, 10), float32]) -> (Tensor[(1, 126), float32], Tensor[(9, 10, 10), float64], Tensor[(4, 6, 9), uint8], Tensor[(3, 12), uint8], Tensor[(44), int64], Tensor[(44), uint64], Tensor[(9, 10, 10), bool], Tensor[(9, 10, 10), int64]) {
  %142 = @func_2945() /* ty=Tensor[(9, ?, 10), int64] */;
  %143 = cast(%142, dtype="float64") /* ty=Tensor[(9, ?, 10), float64] */;
  %144 = cast(%var_4183, dtype="float64") /* ty=Tensor[(9, 10, 10), float64] */;
  %145 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 12), uint8] */, dtype="uint8") /* ty=Tensor[(3, 12), uint8] */;
  %146 = reshape(%145, newshape=[4, 1, 9]) /* ty=Tensor[(4, 1, 9), uint8] */;
  %147 = @func_2786(%146) /* ty=(Tensor[(4, 6, 9), uint8], Tensor[(11, 13, 3), bool], Tensor[(429), float64]) */;
  %148 = cast(%var_4207, dtype="uint64") /* ty=Tensor[(44), uint64] */;
  %149 = @func_3419() /* ty=Tensor[(1, 126), float32] */;
  %150 = cast(%149, dtype="float64") /* ty=Tensor[(1, 126), float64] */;
  %151 = reshape(%148, newshape=[44]) /* ty=Tensor[(44), uint64] */;
  %152 = reshape(%150, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %153 = @func_3395(%151, %152) /* ty=(Tensor[(9, ?, 10), float64], Tensor[(44), int64], Tensor[(44), uint64], Tensor[(637), float32], Tensor[(126), float64], Tensor[(1, 126), float64]) */;
  %154 = cast(%var_4183, dtype="float32") /* ty=Tensor[(9, 10, 10), float32] */;
  %155 = log2(%154) /* ty=Tensor[(9, 10, 10), float32] */;
  %156 = cast(%var_4224, dtype="bool") /* ty=Tensor[(9, 10, 10), bool] */;
  %157 = shape_of(%155, dtype="int32") /* ty=Tensor[(3), int32] */;
  %158 = cast(%155, dtype="bool") /* ty=Tensor[(9, 10, 10), bool] */;
  %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %160 = cast(%155, dtype="float32") /* ty=Tensor[(9, 10, 10), float32] */;
  %161 = cast(%142, dtype="float32") /* ty=Tensor[(9, ?, 10), float32] */;
  %162 = floor_divide(%160, %161) /* ty=Tensor[(9, 10, 10), float32] */;
  %163 = cast(%var_4229, dtype="int64") /* ty=Tensor[(9, 10, 10), int64] */;
  %164 = shape_of(%162, dtype="int32") /* ty=Tensor[(3), int32] */;
  %165 = cast(%162, dtype="int64") /* ty=Tensor[(9, 10, 10), int64] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %167 = power(%143, %144) /* ty=Tensor[(9, 10, 10), float64] */;
  %168 = %147.0;
  %169 = %153.1;
  %170 = logical_or(%158, %159) /* ty=Tensor[(9, 10, 10), bool] */;
  %171 = bitwise_xor(%165, %166) /* ty=Tensor[(9, 10, 10), int64] */;
  (%149, %167, %168, meta[relay.Constant][10] /* ty=Tensor[(3, 12), uint8] */, %169, %var_4207, %170, %171)
}

def @func_4706() -> (Tensor[(1, 126), float64],) {
  %172 = @func_4099() /* ty=(Tensor[(1, 126), float64], Tensor[(1, 126), float64], Tensor[(1, 126), float64]) */;
  %173 = %172.1;
  (%173,)
}

def @func_5999() -> (Tensor[(1, 126), float64],) {
  %174 = @func_3060() /* ty=Tensor[(1, 126), float64] */;
  (%174,)
}

def @func_5537(%var_5515: Tensor[(1, 126), float32]) -> (Tensor[(?, 126), bool], Tensor[(14, 126), uint64]) {
  %175 = @func_4019() /* ty=Tensor[(1, 126), float32] */;
  %176 = cast(%var_5515, dtype="bool") /* ty=Tensor[(1, 126), bool] */;
  %177 = shape_of(%175, dtype="int32") /* ty=Tensor[(2), int32] */;
  %178 = cast(%175, dtype="bool") /* ty=Tensor[(1, 126), bool] */;
  %179 = dyn.reshape(%176, %177, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %180 = @func_4163() /* ty=(Tensor[(14, 126), uint64],) */;
  %181 = logical_or(%178, %179) /* ty=Tensor[(?, 126), bool] */;
  %182 = %180.0;
  (%181, %182)
}

def @func_4374(%var_4309: Tensor[(192, 2), uint16], %var_4350: Tensor[(240), int8], %var_4360: Tensor[(8, 126), bool]) -> (Tensor[(1, 126), float32], Tensor[(675), uint8], Tensor[(637), float32], Tensor[(6, 16, 4), uint16], uint16, Tensor[(192, 2), uint16], Tensor[(32, 4), int16], Tensor[(126), float64], Tensor[(?, 126), uint8], Tensor[(?, 126), float64], Tensor[(11), float32], Tensor[(240), int8], Tensor[(1, 126), float32], Tensor[(8, 126), uint8], Tensor[(5, 135), uint8]) {
  %183 = cast(meta[relay.Constant][11] /* ty=Tensor[(32, 4), float32] */, dtype="float32") /* ty=Tensor[(32, 4), float32] */;
  %184 = cast(meta[relay.Constant][12] /* ty=Tensor[(637), float32] */, dtype="float32") /* ty=Tensor[(637), float32] */;
  %185 = reshape(%183, newshape=[2, 64]) /* ty=Tensor[(2, 64), float32] */;
  %186 = reshape(%184, newshape=[637]) /* ty=Tensor[(637), float32] */;
  %187 = @func_3977(%185, %186) /* ty=(Tensor[(1, 126), float64], Tensor[(2, 64), float32], Tensor[(675), uint8], Tensor[(637), uint16]) */;
  %188 = cast(meta[relay.Constant][13] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %189 = cast(%var_4309, dtype="uint16") /* ty=Tensor[(192, 2), uint16] */;
  %190 = reshape(%188, newshape=[]) /* ty=uint16 */;
  %191 = reshape(%189, newshape=[6, 16, 4]) /* ty=Tensor[(6, 16, 4), uint16] */;
  %192 = @func_3444(%190, %191) /* ty=(Tensor[(6, 16, 4), uint16],) */;
  %193 = cast(meta[relay.Constant][14] /* ty=Tensor[(32, 4), float32] */, dtype="int16") /* ty=Tensor[(32, 4), int16] */;
  %194 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(32, 4), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %195 = cast(meta[relay.Constant][11] /* ty=Tensor[(32, 4), float32] */, dtype="int16") /* ty=Tensor[(32, 4), int16] */;
  %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %197 = cast(meta[relay.Constant][12] /* ty=Tensor[(637), float32] */, dtype="float32") /* ty=Tensor[(637), float32] */;
  %198 = %187.2;
  %199 = cast(%198, dtype="uint8") /* ty=Tensor[(675), uint8] */;
  %200 = @func_4046() /* ty=Tensor[(1, 126), float64] */;
  %201 = cast(%200, dtype="float64") /* ty=Tensor[(1, 126), float64] */;
  %202 = reshape(%197, newshape=[7, 13, 7]) /* ty=Tensor[(7, 13, 7), float32] */;
  %203 = reshape(%199, newshape=[5, 135]) /* ty=Tensor[(5, 135), uint8] */;
  %204 = reshape(%201, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %205 = @func_1638(%202, %203, %204) /* ty=(Tensor[(7, 13, 7), float32], Tensor[(5, 135), uint8], Tensor[(24, 16), float64], Tensor[(8, 6, 8), float64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(126), float64]) */;
  %206 = cast(%200, dtype="float32") /* ty=Tensor[(1, 126), float32] */;
  %207 = asin(%206) /* ty=Tensor[(1, 126), float32] */;
  %208 = cast(%200, dtype="bool") /* ty=Tensor[(1, 126), bool] */;
  %209 = shape_of(%207, dtype="int32") /* ty=Tensor[(2), int32] */;
  %210 = cast(%207, dtype="bool") /* ty=Tensor[(1, 126), bool] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %212 = equal(%210, %211) /* ty=Tensor[(?, 126), bool] */;
  %213 = cast(%200, dtype="uint8") /* ty=Tensor[(1, 126), uint8] */;
  %214 = shape_of(%212, dtype="int32") /* ty=Tensor[(2), int32] */;
  %215 = cast(%212, dtype="uint8") /* ty=Tensor[(?, 126), uint8] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %217 = cast(%212, dtype="float64") /* ty=Tensor[(?, 126), float64] */;
  %218 = cast(%var_4350, dtype="int8") /* ty=Tensor[(240), int8] */;
  %219 = cast(%var_4309, dtype="float64") /* ty=Tensor[(192, 2), float64] */;
  %220 = reshape(%218, newshape=[240]) /* ty=Tensor[(240), int8] */;
  %221 = reshape(%219, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
  %222 = @func_2655(%220, %221) /* ty=(Tensor[(44), uint64], Tensor[(3, 10, 8), float64], Tensor[(240), int8], Tensor[(384), float64], Tensor[(637), float32], Tensor[(126), float64], Tensor[(8, 6, 8), float32], Tensor[(8, 6, 8), float32], Tensor[(11, 1), float32], Tensor[(11), float32]) */;
  %223 = cast(%207, dtype="float32") /* ty=Tensor[(1, 126), float32] */;
  %224 = cast(%212, dtype="uint8") /* ty=Tensor[(?, 126), uint8] */;
  %225 = cast(%var_4360, dtype="uint8") /* ty=Tensor[(8, 126), uint8] */;
  %226 = cast(meta[relay.Constant][12] /* ty=Tensor[(637), float32] */, dtype="float32") /* ty=Tensor[(637), float32] */;
  %227 = cast(%198, dtype="uint8") /* ty=Tensor[(675), uint8] */;
  %228 = @func_4019() /* ty=Tensor[(1, 126), float32] */;
  %229 = cast(%228, dtype="float64") /* ty=Tensor[(1, 126), float64] */;
  %230 = reshape(%226, newshape=[7, 13, 7]) /* ty=Tensor[(7, 13, 7), float32] */;
  %231 = reshape(%227, newshape=[5, 135]) /* ty=Tensor[(5, 135), uint8] */;
  %232 = reshape(%229, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %233 = @func_1638(%230, %231, %232) /* ty=(Tensor[(7, 13, 7), float32], Tensor[(5, 135), uint8], Tensor[(24, 16), float64], Tensor[(8, 6, 8), float64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(126), float64]) */;
  %234 = %192.0;
  %235 = subtract(%195, %196) /* ty=Tensor[(32, 4), int16] */;
  %236 = %205.7;
  %237 = bitwise_and(%215, %216) /* ty=Tensor[(?, 126), uint8] */;
  %238 = exp(%217) /* ty=Tensor[(?, 126), float64] */;
  %239 = %222.9;
  %240 = erf(%223) /* ty=Tensor[(1, 126), float32] */;
  %241 = bitwise_or(%224, %225) /* ty=Tensor[(8, 126), uint8] */;
  %242 = %233.1;
  (%228, %198, meta[relay.Constant][12] /* ty=Tensor[(637), float32] */, %234, meta[relay.Constant][13] /* ty=uint16 */, %var_4309, %235, %236, %237, %238, %239, %var_4350, %240, %241, %242)
}

def @func_5388(%var_5380: Tensor[(2, 9, 4), float64], %var_5381: Tensor[(2, 9, 4), float64]) -> (Tensor[(2, 9, 4), float64],) {
  %243 = cast(%var_5381, dtype="float64") /* ty=Tensor[(2, 9, 4), float64] */;
  %244 = shape_of(%var_5380, dtype="int32") /* ty=Tensor[(3), int32] */;
  %245 = cast(%var_5380, dtype="float64") /* ty=Tensor[(2, 9, 4), float64] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %247 = floor_divide(%245, %246) /* ty=Tensor[(2, 9, 4), float64] */;
  (%247,)
}

def @func_4809() -> Tensor[(2, 2, 11), uint64] {
  %248 = @func_2419() /* ty=(Tensor[(9, ?, 10), int64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64]) */;
  %248.1
}

def @func_6853() -> (Tensor[(1, 126), float32],) {
  %249 = @func_3667() /* ty=(Tensor[(1, 126), float64],) */;
  %250 = %249.0;
  %251 = cast(%250, dtype="float32") /* ty=Tensor[(1, 126), float32] */;
  %252 = cosh(%251) /* ty=Tensor[(1, 126), float32] */;
  (%252,)
}

def @func_383(%var_376: Tensor[(11, 1), float32]) -> Tensor[(11, 1), float32] {
  %253 = cast(%var_376, dtype="float32") /* ty=Tensor[(11, 1), float32] */;
  asin(%253) /* ty=Tensor[(11, 1), float32] */
}

def @func_6634() -> Tensor[(44), uint64] {
  %254 = @func_3038() /* ty=(Tensor[(44), uint64],) */;
  %254.0
}

def @func_5037() -> Tensor[(1, 126), float64] {
  %255 = @func_4706() /* ty=(Tensor[(1, 126), float64],) */;
  %255.0
}

def @func_6384() -> Tensor[(1, 126), float64] {
  @func_5037() /* ty=Tensor[(1, 126), float64] */
}

def @func_3667() -> (Tensor[(1, 126), float64],) {
  %256 = @func_3338() /* ty=(Tensor[(1, 126), float64],) */;
  %257 = %256.0;
  (%257,)
}

def @func_5960() -> (Tensor[(14, 126), uint64], Tensor[(1, 126), float32]) {
  %258 = @func_4837() /* ty=(Tensor[(14, 126), uint64],) */;
  %259 = %258.0;
  %260 = @func_4019() /* ty=Tensor[(1, 126), float32] */;
  (%259, %260)
}

def @func_3877() -> Tensor[(9, ?, 10), int64] {
  @func_2945() /* ty=Tensor[(9, ?, 10), int64] */
}

def @func_3395(%var_3377: Tensor[(44), uint64], %var_3384: Tensor[(126), float64]) -> (Tensor[(9, ?, 10), float64], Tensor[(44), int64], Tensor[(44), uint64], Tensor[(637), float32], Tensor[(126), float64], Tensor[(1, 126), float64]) {
  %261 = @func_2945() /* ty=Tensor[(9, ?, 10), int64] */;
  %262 = cast(%261, dtype="float32") /* ty=Tensor[(9, ?, 10), float32] */;
  %263 = rsqrt(%262) /* ty=Tensor[(9, ?, 10), float32] */;
  %264 = cast(%263, dtype="float64") /* ty=Tensor[(9, ?, 10), float64] */;
  %265 = cast(%var_3377, dtype="uint64") /* ty=Tensor[(44), uint64] */;
  %266 = reshape(%265, newshape=[44]) /* ty=Tensor[(44), uint64] */;
  %267 = cast(%var_3377, dtype="uint64") /* ty=Tensor[(44), uint64] */;
  %268 = cast(%var_3384, dtype="float64") /* ty=Tensor[(126), float64] */;
  %269 = reshape(%267, newshape=[44]) /* ty=Tensor[(44), uint64] */;
  %270 = reshape(%268, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %271 = @func_2526(%269, %270) /* ty=(Tensor[(44), bool], Tensor[(2, 2, 11), uint64], Tensor[(637), float32], Tensor[(675), uint8], Tensor[(126), float64], Tensor[(2, 2, 11), uint64]) */;
  %272 = @func_3010() /* ty=(Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(1, 126), float64]) */;
  %273 = sigmoid(%264) /* ty=Tensor[(9, ?, 10), float64] */;
  %274 = @func_3150(%266) /* ty=Tensor[(44), int64] */;
  %275 = %271.2;
  %276 = %272.2;
  (%273, %274, %var_3377, %275, %var_3384, %276)
}

def @func_3060() -> Tensor[(1, 126), float64] {
  %277 = @func_3010() /* ty=(Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(1, 126), float64]) */;
  %277.2
}

def @func_5333(%var_5309: Tensor[(2, 126), float64]) -> (Tensor[(1, 126), float64], Tensor[(9, ?, 10), int64], Tensor[(2, 126), bool]) {
  %278 = @func_3667() /* ty=(Tensor[(1, 126), float64],) */;
  %279 = %278.0;
  %280 = cast(%279, dtype="int64") /* ty=Tensor[(1, 126), int64] */;
  %281 = cast(%var_5309, dtype="int64") /* ty=Tensor[(2, 126), int64] */;
  %282 = right_shift(%280, %281) /* ty=Tensor[(2, 126), int64] */;
  %283 = @func_4046() /* ty=Tensor[(1, 126), float64] */;
  %284 = cast(%282, dtype="bool") /* ty=Tensor[(2, 126), bool] */;
  %285 = cast(%283, dtype="bool") /* ty=Tensor[(1, 126), bool] */;
  %286 = @func_3060() /* ty=Tensor[(1, 126), float64] */;
  %287 = @func_2945() /* ty=Tensor[(9, ?, 10), int64] */;
  %288 = not_equal(%284, %285) /* ty=Tensor[(2, 126), bool] */;
  (%286, %287, %288)
}

def @func_4985() -> Tensor[(1, 14, 9), float64] {
  @func_3500() /* ty=Tensor[(1, 14, 9), float64] */
}

def @func_5717() -> Tensor[(1, 126), float64] {
  @func_4046() /* ty=Tensor[(1, 126), float64] */
}

def @func_5464(%var_5459: Tensor[(1008), int32]) -> (Tensor[(44), uint64], Tensor[(15, 126), int64], Tensor[(2, 2, 11), float64], Tensor[(675), uint8], Tensor[(384), float64], Tensor[(16, 7, 9), bool], Tensor[(1008), int32]) {
  %289 = @func_4643() /* ty=(Tensor[(1, 126), float64], Tensor[(126), float64], Tensor[(44), uint64]) */;
  %290 = @func_4046() /* ty=Tensor[(1, 126), float64] */;
  %291 = cast(%290, dtype="int64") /* ty=Tensor[(1, 126), int64] */;
  %292 = cast(meta[relay.Constant][15] /* ty=Tensor[(15, 126), float64] */, dtype="int64") /* ty=Tensor[(15, 126), int64] */;
  %293 = cast(meta[relay.Constant][16] /* ty=Tensor[(675), uint8] */, dtype="uint8") /* ty=Tensor[(675), uint8] */;
  %294 = cast(meta[relay.Constant][17] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %295 = reshape(%293, newshape=[675]) /* ty=Tensor[(675), uint8] */;
  %296 = reshape(%294, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %297 = @func_3794(%295, %296) /* ty=(Tensor[(44), uint64], Tensor[(8, 6, 8), float64], Tensor[(675), uint8], Tensor[(384), float64], Tensor[(2, 2, 11), float64]) */;
  %298 = cast(%var_5459, dtype="int32") /* ty=Tensor[(1008), int32] */;
  %299 = reshape(%298, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), int32] */;
  %300 = @func_5422(%299) /* ty=(Tensor[(16, 7, 9), bool],) */;
  %301 = %289.2;
  %302 = left_shift(%291, %292) /* ty=Tensor[(15, 126), int64] */;
  %303 = %297.4;
  %304 = %300.0;
  (%301, %302, %303, meta[relay.Constant][16] /* ty=Tensor[(675), uint8] */, meta[relay.Constant][17] /* ty=Tensor[(384), float64] */, %304, %var_5459)
}

def @func_3010() -> (Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(1, 126), float64]) {
  %305 = @func_2419() /* ty=(Tensor[(9, ?, 10), int64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64]) */;
  %306 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 126), float64] */, dtype="float64") /* ty=Tensor[(1, 126), float64] */;
  %307 = reshape(%306, newshape=[1, 14, 9]) /* ty=Tensor[(1, 14, 9), float64] */;
  %308 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 126), float64] */, dtype="float64") /* ty=Tensor[(1, 126), float64] */;
  %309 = %305.2;
  %310 = @func_1036(%307) /* ty=Tensor[(1, 14, 9), float64] */;
  %311 = sinh(%308) /* ty=Tensor[(1, 126), float64] */;
  (%309, %310, %311)
}

def @func_4019() -> Tensor[(1, 126), float32] {
  @func_3419() /* ty=Tensor[(1, 126), float32] */
}

def @func_3096(%var_3078: Tensor[(10, 126), float64], %var_3086: Tensor[(384), float64], %var_3087: Tensor[(11), float32], %var_3088: Tensor[(810), float64]) -> (Tensor[(10, 126), float32], Tensor[(21, 6), float64], Tensor[(384), float64], Tensor[(11), float32], Tensor[(810), float64]) {
  %312 = @func_3060() /* ty=Tensor[(1, 126), float64] */;
  %313 = cast(%312, dtype="float32") /* ty=Tensor[(1, 126), float32] */;
  %314 = cast(%var_3078, dtype="float32") /* ty=Tensor[(10, 126), float32] */;
  %315 = cast(%var_3086, dtype="float64") /* ty=Tensor[(384), float64] */;
  %316 = cast(%var_3087, dtype="float32") /* ty=Tensor[(11), float32] */;
  %317 = cast(%var_3088, dtype="float64") /* ty=Tensor[(810), float64] */;
  %318 = reshape(%315, newshape=[1, 384]) /* ty=Tensor[(1, 384), float64] */;
  %319 = reshape(%316, newshape=[11]) /* ty=Tensor[(11), float32] */;
  %320 = reshape(%317, newshape=[9, 9, 10]) /* ty=Tensor[(9, 9, 10), float64] */;
  %321 = @func_2916(%318, %319, %320) /* ty=(Tensor[(9, ?, 10), int16], Tensor[(44), uint64], Tensor[(1, 384), float64], Tensor[(1, 14, 9), float64], Tensor[(21, 6), float64], Tensor[(120, 2), int16], Tensor[(8, 6, 8), float32], Tensor[(8, 6, 8), float64], Tensor[(9, 9, 10), bool], Tensor[(2, 2, 11), uint64], Tensor[(11, ?), bool]) */;
  %322 = power(%313, %314) /* ty=Tensor[(10, 126), float32] */;
  %323 = %321.4;
  (%322, %323, %var_3086, %var_3087, %var_3088)
}

def @func_4133(%var_4119: Tensor[(12, 14, 9), float64]) -> (Tensor[(12, 14, 9), int16],) {
  %324 = @func_3500() /* ty=Tensor[(1, 14, 9), float64] */;
  %325 = cast(%324, dtype="int16") /* ty=Tensor[(1, 14, 9), int16] */;
  %326 = cast(%var_4119, dtype="int16") /* ty=Tensor[(12, 14, 9), int16] */;
  %327 = subtract(%325, %326) /* ty=Tensor[(12, 14, 9), int16] */;
  (%327,)
}

def @func_3338() -> (Tensor[(1, 126), float64],) {
  %328 = @func_3060() /* ty=Tensor[(1, 126), float64] */;
  (%328,)
}

def @func_2737(%var_2704: Tensor[(675), uint8], %var_2705: Tensor[(126), float64]) -> (Tensor[(24, 16), float64], Tensor[(637), float32], Tensor[(675), uint8], Tensor[(126), float64], Tensor[(8, 6, 8), float64], Tensor[(2, 2, 11), float32]) {
  %329 = cast(meta[relay.Constant][19] /* ty=Tensor[(637), float32] */, dtype="float32") /* ty=Tensor[(637), float32] */;
  %330 = cast(%var_2704, dtype="uint8") /* ty=Tensor[(675), uint8] */;
  %331 = cast(%var_2705, dtype="float64") /* ty=Tensor[(126), float64] */;
  %332 = reshape(%329, newshape=[7, 13, 7]) /* ty=Tensor[(7, 13, 7), float32] */;
  %333 = reshape(%330, newshape=[5, 135]) /* ty=Tensor[(5, 135), uint8] */;
  %334 = reshape(%331, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %335 = @func_1638(%332, %333, %334) /* ty=(Tensor[(7, 13, 7), float32], Tensor[(5, 135), uint8], Tensor[(24, 16), float64], Tensor[(8, 6, 8), float64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(126), float64]) */;
  %336 = %335.2;
  %337 = cast(%336, dtype="float64") /* ty=Tensor[(24, 16), float64] */;
  %338 = reshape(%337, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
  %339 = @func_2419() /* ty=(Tensor[(9, ?, 10), int64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64]) */;
  %340 = %339.1;
  %341 = cast(%340, dtype="float64") /* ty=Tensor[(2, 2, 11), float64] */;
  %342 = sqrt(%341) /* ty=Tensor[(2, 2, 11), float64] */;
  %343 = cast(%342, dtype="float32") /* ty=Tensor[(2, 2, 11), float32] */;
  %344 = @func_193(%338) /* ty=Tensor[(8, 6, 8), float64] */;
  %345 = atan(%343) /* ty=Tensor[(2, 2, 11), float32] */;
  (%336, meta[relay.Constant][19] /* ty=Tensor[(637), float32] */, %var_2704, %var_2705, %344, %345)
}

def @func_3419() -> Tensor[(1, 126), float32] {
  %346 = @func_3338() /* ty=(Tensor[(1, 126), float64],) */;
  %347 = %346.0;
  %348 = cast(%347, dtype="float32") /* ty=Tensor[(1, 126), float32] */;
  cos(%348) /* ty=Tensor[(1, 126), float32] */
}

def @func_435(%var_411: Tensor[(9, 5, 15), uint8], %var_412: Tensor[(9, 5, 15), uint8], %var_423: Tensor[(384), float64]) -> (Tensor[(9, 5, 15), uint8], Tensor[(3, 10, 8), bool], Tensor[(240), int8], Tensor[(384), float64], Tensor[(8, 6, 8), float64]) {
  %349 = cast(%var_412, dtype="uint8") /* ty=Tensor[(9, 5, 15), uint8] */;
  %350 = shape_of(%var_411, dtype="int32") /* ty=Tensor[(3), int32] */;
  %351 = cast(%var_411, dtype="uint8") /* ty=Tensor[(9, 5, 15), uint8] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %353 = cast(meta[relay.Constant][20] /* ty=Tensor[(240), int8] */, dtype="int8") /* ty=Tensor[(240), int8] */;
  %354 = cast(meta[relay.Constant][20] /* ty=Tensor[(240), int8] */, dtype="int8") /* ty=Tensor[(240), int8] */;
  %355 = cast(%var_423, dtype="float64") /* ty=Tensor[(384), float64] */;
  %356 = cast(meta[relay.Constant][20] /* ty=Tensor[(240), int8] */, dtype="int8") /* ty=Tensor[(240), int8] */;
  %357 = reshape(%353, newshape=[3, 10, 8]) /* ty=Tensor[(3, 10, 8), int8] */;
  %358 = reshape(%354, newshape=[3, 10, 8]) /* ty=Tensor[(3, 10, 8), int8] */;
  %359 = reshape(%355, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %360 = reshape(%356, newshape=[3, 10, 8]) /* ty=Tensor[(3, 10, 8), int8] */;
  %361 = @func_368(%357, %358, %359, %360) /* ty=(Tensor[(3, 10, 8), uint32], Tensor[(8, 6, 8), float64], Tensor[(384), float64], Tensor[(8, 6, 8), float64], Tensor[(3, 10, 8), float64], Tensor[(8, 6, 8), float64], Tensor[(8, 6, 8), float64], Tensor[(3, 10, 8), bool]) */;
  %362 = %361.7;
  %363 = cast(%362, dtype="int8") /* ty=Tensor[(3, 10, 8), int8] */;
  %364 = cast(meta[relay.Constant][20] /* ty=Tensor[(240), int8] */, dtype="int8") /* ty=Tensor[(240), int8] */;
  %365 = cast(%var_423, dtype="float64") /* ty=Tensor[(384), float64] */;
  %366 = cast(%362, dtype="int8") /* ty=Tensor[(3, 10, 8), int8] */;
  %367 = reshape(%363, newshape=[3, 10, 8]) /* ty=Tensor[(3, 10, 8), int8] */;
  %368 = reshape(%364, newshape=[3, 10, 8]) /* ty=Tensor[(3, 10, 8), int8] */;
  %369 = reshape(%365, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %370 = reshape(%366, newshape=[3, 10, 8]) /* ty=Tensor[(3, 10, 8), int8] */;
  %371 = @func_368(%367, %368, %369, %370) /* ty=(Tensor[(3, 10, 8), uint32], Tensor[(8, 6, 8), float64], Tensor[(384), float64], Tensor[(8, 6, 8), float64], Tensor[(3, 10, 8), float64], Tensor[(8, 6, 8), float64], Tensor[(8, 6, 8), float64], Tensor[(3, 10, 8), bool]) */;
  %372 = bitwise_or(%351, %352) /* ty=Tensor[(9, 5, 15), uint8] */;
  %373 = %371.1;
  (%372, %362, meta[relay.Constant][20] /* ty=Tensor[(240), int8] */, %var_423, %373)
}

def @func_3607(%var_3601: Tensor[(637), float32], %var_3603: Tensor[(21, 6), float64]) -> (Tensor[(44), uint64], Tensor[(7, 13, 7), float32], Tensor[(637), float32], Tensor[(675), uint8], Tensor[(21, 6), float64]) {
  %374 = @func_2419() /* ty=(Tensor[(9, ?, 10), int64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64]) */;
  %375 = cast(%var_3601, dtype="float32") /* ty=Tensor[(637), float32] */;
  %376 = cast(meta[relay.Constant][21] /* ty=Tensor[(675), uint8] */, dtype="uint8") /* ty=Tensor[(675), uint8] */;
  %377 = cast(%var_3603, dtype="float64") /* ty=Tensor[(21, 6), float64] */;
  %378 = reshape(%375, newshape=[7, 13, 7]) /* ty=Tensor[(7, 13, 7), float32] */;
  %379 = reshape(%376, newshape=[5, 135]) /* ty=Tensor[(5, 135), uint8] */;
  %380 = reshape(%377, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %381 = @func_1638(%378, %379, %380) /* ty=(Tensor[(7, 13, 7), float32], Tensor[(5, 135), uint8], Tensor[(24, 16), float64], Tensor[(8, 6, 8), float64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(126), float64]) */;
  %382 = %374.2;
  %383 = %381.0;
  (%382, %383, %var_3601, meta[relay.Constant][21] /* ty=Tensor[(675), uint8] */, %var_3603)
}

def @func_3999() -> Tensor[(1, 126), float64] {
  @func_3060() /* ty=Tensor[(1, 126), float64] */
}

def @func_5864() -> (Tensor[(1, 126), float64],) {
  %384 = @func_3667() /* ty=(Tensor[(1, 126), float64],) */;
  %385 = %384.0;
  (%385,)
}

def @func_5588() -> Tensor[(9, ?, 10), float64] {
  %386 = @func_3877() /* ty=Tensor[(9, ?, 10), int64] */;
  %387 = cast(%386, dtype="float64") /* ty=Tensor[(9, ?, 10), float64] */;
  sin(%387) /* ty=Tensor[(9, ?, 10), float64] */
}

def @func_4163() -> (Tensor[(14, 126), uint64],) {
  %388 = @func_3667() /* ty=(Tensor[(1, 126), float64],) */;
  %389 = %388.0;
  %390 = cast(%389, dtype="uint64") /* ty=Tensor[(1, 126), uint64] */;
  %391 = cast(meta[relay.Constant][22] /* ty=Tensor[(14, 126), float64] */, dtype="uint64") /* ty=Tensor[(14, 126), uint64] */;
  %392 = right_shift(%390, %391) /* ty=Tensor[(14, 126), uint64] */;
  (%392,)
}

def @func_5117(%var_5072: Tensor[(14, 126), float64], %var_5079: Tensor[(14, 126), float32], %var_5108: float64, %var_5109: Tensor[(180), float64]) -> (Tensor[(14, 126), bool], Tensor[(15, 3, 4), float64], float64, Tensor[(180), float64], Tensor[(15, 3, 4), float64]) {
  %393 = @func_4099() /* ty=(Tensor[(1, 126), float64], Tensor[(1, 126), float64], Tensor[(1, 126), float64]) */;
  %394 = %393.0;
  %395 = cast(%394, dtype="float32") /* ty=Tensor[(1, 126), float32] */;
  %396 = cast(%var_5072, dtype="float32") /* ty=Tensor[(14, 126), float32] */;
  %397 = power(%395, %396) /* ty=Tensor[(14, 126), float32] */;
  %398 = cast(%var_5079, dtype="uint64") /* ty=Tensor[(14, 126), uint64] */;
  %399 = shape_of(%397, dtype="int32") /* ty=Tensor[(2), int32] */;
  %400 = cast(%397, dtype="uint64") /* ty=Tensor[(14, 126), uint64] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %402 = bitwise_and(%400, %401) /* ty=Tensor[(14, 126), uint64] */;
  %403 = cast(%397, dtype="bool") /* ty=Tensor[(14, 126), bool] */;
  %404 = shape_of(%402, dtype="int32") /* ty=Tensor[(2), int32] */;
  %405 = cast(%402, dtype="bool") /* ty=Tensor[(14, 126), bool] */;
  %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %407 = cast(%var_5108, dtype="float64") /* ty=float64 */;
  %408 = cast(%var_5109, dtype="float64") /* ty=Tensor[(180), float64] */;
  %409 = reshape(%407, newshape=[]) /* ty=float64 */;
  %410 = reshape(%408, newshape=[15, 3, 4]) /* ty=Tensor[(15, 3, 4), float64] */;
  %411 = @func_4621(%409, %410) /* ty=(Tensor[(15, 3, 4), float64],) */;
  %412 = cast(%var_5108, dtype="float64") /* ty=float64 */;
  %413 = cast(%var_5109, dtype="float64") /* ty=Tensor[(180), float64] */;
  %414 = reshape(%412, newshape=[]) /* ty=float64 */;
  %415 = reshape(%413, newshape=[15, 3, 4]) /* ty=Tensor[(15, 3, 4), float64] */;
  %416 = @func_4621(%414, %415) /* ty=(Tensor[(15, 3, 4), float64],) */;
  %417 = logical_or(%405, %406) /* ty=Tensor[(14, 126), bool] */;
  %418 = %411.0;
  %419 = %416.0;
  (%417, %418, %var_5108, %var_5109, %419)
}

def @func_4790() -> Tensor[(44), uint64] {
  %420 = @func_3038() /* ty=(Tensor[(44), uint64],) */;
  %420.0
}

def @func_6169(%var_6150: Tensor[(128), float32]) -> (Tensor[(1, 126), float64], Tensor[(675), uint8], Tensor[(128), float32], Tensor[(637), float32], Tensor[(1, 126), float64]) {
  %421 = @func_4706() /* ty=(Tensor[(1, 126), float64],) */;
  %422 = cast(%var_6150, dtype="float32") /* ty=Tensor[(128), float32] */;
  %423 = cast(meta[relay.Constant][23] /* ty=Tensor[(637), float32] */, dtype="float32") /* ty=Tensor[(637), float32] */;
  %424 = reshape(%422, newshape=[8, 2, 8]) /* ty=Tensor[(8, 2, 8), float32] */;
  %425 = reshape(%423, newshape=[637]) /* ty=Tensor[(637), float32] */;
  %426 = @func_3726(%424, %425) /* ty=(Tensor[(8, 2, 8), float32], Tensor[(1, 14, 9), float64], Tensor[(675), uint8], Tensor[(637), float32], Tensor[(11, 1), float32], Tensor[(11), float32]) */;
  %427 = %421.0;
  %428 = %426.2;
  %429 = @func_5351() /* ty=Tensor[(1, 126), float64] */;
  (%427, %428, %var_6150, meta[relay.Constant][23] /* ty=Tensor[(637), float32] */, %429)
}

def @func_5408() -> Tensor[(1, 14, 9), float64] {
  @func_4985() /* ty=Tensor[(1, 14, 9), float64] */
}

def @func_4837() -> (Tensor[(14, 126), uint64],) {
  %430 = @func_4163() /* ty=(Tensor[(14, 126), uint64],) */;
  %431 = %430.0;
  (%431,)
}

def @func_6616() -> Tensor[(2, 2, 11), bool] {
  %432 = @func_4809() /* ty=Tensor[(2, 2, 11), uint64] */;
  %433 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 2, 11), uint64] */, dtype="int16") /* ty=Tensor[(2, 2, 11), int16] */;
  %434 = shape_of(%432, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%432, dtype="int16") /* ty=Tensor[(2, 2, 11), int16] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %437 = logical_xor(%435, %436) /* ty=Tensor[(2, 2, 11), int16] */;
  %438 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 2, 11), uint64] */, dtype="bool") /* ty=Tensor[(2, 2, 11), bool] */;
  %439 = shape_of(%437, dtype="int32") /* ty=Tensor[(3), int32] */;
  %440 = cast(%437, dtype="bool") /* ty=Tensor[(2, 2, 11), bool] */;
  %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%440, %441) /* ty=Tensor[(2, 2, 11), bool] */
}

def @func_6755() -> (Tensor[(1, 14, 9), float64],) {
  %442 = @func_3010() /* ty=(Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(1, 126), float64]) */;
  %443 = %442.1;
  (%443,)
}

def @func_4643() -> (Tensor[(1, 126), float64], Tensor[(126), float64], Tensor[(44), uint64]) {
  %444 = @func_3338() /* ty=(Tensor[(1, 126), float64],) */;
  %445 = cast(meta[relay.Constant][25] /* ty=Tensor[(44), uint64] */, dtype="uint64") /* ty=Tensor[(44), uint64] */;
  %446 = %444.0;
  %447 = cast(%446, dtype="float64") /* ty=Tensor[(1, 126), float64] */;
  %448 = reshape(%445, newshape=[44]) /* ty=Tensor[(44), uint64] */;
  %449 = reshape(%447, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %450 = @func_3395(%448, %449) /* ty=(Tensor[(9, ?, 10), float64], Tensor[(44), int64], Tensor[(44), uint64], Tensor[(637), float32], Tensor[(126), float64], Tensor[(1, 126), float64]) */;
  %451 = %450.4;
  (%446, %451, meta[relay.Constant][25] /* ty=Tensor[(44), uint64] */)
}

def @func_5603() -> Tensor[(1, 126), float64] {
  @func_5351() /* ty=Tensor[(1, 126), float64] */
}

def @func_4486() -> Tensor[(2, 126), float64] {
  %452 = @func_3338() /* ty=(Tensor[(1, 126), float64],) */;
  %453 = %452.0;
  %454 = cast(%453, dtype="float64") /* ty=Tensor[(1, 126), float64] */;
  %455 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 126), float64] */, dtype="float64") /* ty=Tensor[(2, 126), float64] */;
  floor_mod(%454, %455) /* ty=Tensor[(2, 126), float64] */
}

def @func_3977(%var_3934: Tensor[(2, 64), float32], %var_3935: Tensor[(637), float32]) -> (Tensor[(1, 126), float64], Tensor[(2, 64), float32], Tensor[(675), uint8], Tensor[(637), uint16]) {
  %456 = @func_3667() /* ty=(Tensor[(1, 126), float64],) */;
  %457 = cast(%var_3934, dtype="float32") /* ty=Tensor[(2, 64), float32] */;
  %458 = cast(%var_3934, dtype="float32") /* ty=Tensor[(2, 64), float32] */;
  %459 = cast(%var_3935, dtype="float32") /* ty=Tensor[(637), float32] */;
  %460 = reshape(%458, newshape=[8, 2, 8]) /* ty=Tensor[(8, 2, 8), float32] */;
  %461 = reshape(%459, newshape=[637]) /* ty=Tensor[(637), float32] */;
  %462 = @func_3726(%460, %461) /* ty=(Tensor[(8, 2, 8), float32], Tensor[(1, 14, 9), float64], Tensor[(675), uint8], Tensor[(637), float32], Tensor[(11, 1), float32], Tensor[(11), float32]) */;
  %463 = %462.3;
  %464 = cast(%463, dtype="float32") /* ty=Tensor[(637), float32] */;
  %465 = reshape(%457, newshape=[8, 2, 8]) /* ty=Tensor[(8, 2, 8), float32] */;
  %466 = reshape(%464, newshape=[637]) /* ty=Tensor[(637), float32] */;
  %467 = @func_3726(%465, %466) /* ty=(Tensor[(8, 2, 8), float32], Tensor[(1, 14, 9), float64], Tensor[(675), uint8], Tensor[(637), float32], Tensor[(11, 1), float32], Tensor[(11), float32]) */;
  %468 = cast(%var_3935, dtype="float32") /* ty=Tensor[(637), float32] */;
  %469 = rsqrt(%468) /* ty=Tensor[(637), float32] */;
  %470 = cast(%463, dtype="bool") /* ty=Tensor[(637), bool] */;
  %471 = shape_of(%469, dtype="int32") /* ty=Tensor[(1), int32] */;
  %472 = cast(%469, dtype="bool") /* ty=Tensor[(637), bool] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?), bool] */;
  %474 = less(%472, %473) /* ty=Tensor[(637), bool] */;
  %475 = cast(%474, dtype="uint16") /* ty=Tensor[(637), uint16] */;
  %476 = shape_of(%469, dtype="int32") /* ty=Tensor[(1), int32] */;
  %477 = cast(%469, dtype="uint16") /* ty=Tensor[(637), uint16] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %479 = %456.0;
  %480 = %467.2;
  %481 = multiply(%477, %478) /* ty=Tensor[(637), uint16] */;
  (%479, %var_3934, %480, %481)
}

def @func_5832(%var_5809: Tensor[(11, 126), float32]) -> (Tensor[(11, 126), float32],) {
  %482 = @func_3419() /* ty=Tensor[(1, 126), float32] */;
  %483 = cast(%482, dtype="bool") /* ty=Tensor[(1, 126), bool] */;
  %484 = cast(%var_5809, dtype="bool") /* ty=Tensor[(11, 126), bool] */;
  %485 = equal(%483, %484) /* ty=Tensor[(11, 126), bool] */;
  %486 = cast(%482, dtype="float32") /* ty=Tensor[(1, 126), float32] */;
  %487 = sigmoid(%486) /* ty=Tensor[(1, 126), float32] */;
  %488 = cast(%485, dtype="float32") /* ty=Tensor[(11, 126), float32] */;
  %489 = cast(%487, dtype="float32") /* ty=Tensor[(1, 126), float32] */;
  %490 = minimum(%488, %489) /* ty=Tensor[(11, 126), float32] */;
  (%490,)
}

def @func_3444(%var_3433: uint16, %var_3434: Tensor[(6, 16, 4), uint16]) -> (Tensor[(6, 16, 4), uint16],) {
  %491 = cast(%var_3433, dtype="uint16") /* ty=uint16 */;
  %492 = cast(%var_3434, dtype="uint16") /* ty=Tensor[(6, 16, 4), uint16] */;
  %493 = logical_xor(%491, %492) /* ty=Tensor[(6, 16, 4), uint16] */;
  (%493,)
}

def @func_1036(%var_1027: Tensor[(1, 14, 9), float64]) -> Tensor[(1, 14, 9), float64] {
  %494 = cast(%var_1027, dtype="float64") /* ty=Tensor[(1, 14, 9), float64] */;
  sin(%494) /* ty=Tensor[(1, 14, 9), float64] */
}

def @func_6556(%var_6505: Tensor[(1008), bool], %var_6519: Tensor[(1008), bool]) -> (Tensor[(44), uint64], Tensor[(126), float64], Tensor[(126), float64], Tensor[(48, 8), uint16], Tensor[(240), int8], Tensor[(8, 6, 8), int64], Tensor[(1008), bool], Tensor[(44), int64], Tensor[(1, 126), float64], Tensor[(9, ?, 10), float64]) {
  %495 = @func_3038() /* ty=(Tensor[(44), uint64],) */;
  %496 = @func_4643() /* ty=(Tensor[(1, 126), float64], Tensor[(126), float64], Tensor[(44), uint64]) */;
  %497 = cast(meta[relay.Constant][27] /* ty=Tensor[(48, 8), uint16] */, dtype="uint16") /* ty=Tensor[(48, 8), uint16] */;
  %498 = cast(meta[relay.Constant][28] /* ty=Tensor[(240), int8] */, dtype="int8") /* ty=Tensor[(240), int8] */;
  %499 = cast(%var_6505, dtype="bool") /* ty=Tensor[(1008), bool] */;
  %500 = reshape(%497, newshape=[192, 2]) /* ty=Tensor[(192, 2), uint16] */;
  %501 = reshape(%498, newshape=[240]) /* ty=Tensor[(240), int8] */;
  %502 = reshape(%499, newshape=[8, 126]) /* ty=Tensor[(8, 126), bool] */;
  %503 = @func_4374(%500, %501, %502) /* ty=(Tensor[(1, 126), float32], Tensor[(675), uint8], Tensor[(637), float32], Tensor[(6, 16, 4), uint16], uint16, Tensor[(192, 2), uint16], Tensor[(32, 4), int16], Tensor[(126), float64], Tensor[(?, 126), uint8], Tensor[(?, 126), float64], Tensor[(11), float32], Tensor[(240), int8], Tensor[(1, 126), float32], Tensor[(8, 126), uint8], Tensor[(5, 135), uint8]) */;
  %504 = @func_5987() /* ty=(Tensor[(2, 2, 11), uint64], Tensor[(8, 6, 8), int64], Tensor[(8, 126), uint64]) */;
  %505 = cast(%var_6519, dtype="bool") /* ty=Tensor[(1008), bool] */;
  %506 = shape_of(%var_6505, dtype="int32") /* ty=Tensor[(1), int32] */;
  %507 = cast(%var_6505, dtype="bool") /* ty=Tensor[(1008), bool] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?), bool] */;
  %509 = %495.0;
  %510 = cast(%509, dtype="uint64") /* ty=Tensor[(44), uint64] */;
  %511 = reshape(%510, newshape=[44]) /* ty=Tensor[(44), uint64] */;
  %512 = @func_3150(%511) /* ty=Tensor[(44), int64] */;
  %513 = cast(%512, dtype="uint64") /* ty=Tensor[(44), uint64] */;
  %514 = @func_5351() /* ty=Tensor[(1, 126), float64] */;
  %515 = cast(%514, dtype="float64") /* ty=Tensor[(1, 126), float64] */;
  %516 = reshape(%513, newshape=[44]) /* ty=Tensor[(44), uint64] */;
  %517 = reshape(%515, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %518 = @func_3395(%516, %517) /* ty=(Tensor[(9, ?, 10), float64], Tensor[(44), int64], Tensor[(44), uint64], Tensor[(637), float32], Tensor[(126), float64], Tensor[(1, 126), float64]) */;
  %519 = %496.1;
  %520 = %503.7;
  %521 = %504.1;
  %522 = logical_and(%507, %508) /* ty=Tensor[(1008), bool] */;
  %523 = %518.0;
  (%509, %519, %520, meta[relay.Constant][27] /* ty=Tensor[(48, 8), uint16] */, meta[relay.Constant][28] /* ty=Tensor[(240), int8] */, %521, %522, %512, %514, %523)
}

def @func_5422(%var_5415: Tensor[(16, 7, 9), int32]) -> (Tensor[(16, 7, 9), bool],) {
  %524 = cast(meta[relay.Constant][29] /* ty=Tensor[(16, 7, 9), int32] */, dtype="bool") /* ty=Tensor[(16, 7, 9), bool] */;
  %525 = shape_of(%var_5415, dtype="int32") /* ty=Tensor[(3), int32] */;
  %526 = cast(%var_5415, dtype="bool") /* ty=Tensor[(16, 7, 9), bool] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %528 = greater_equal(%526, %527) /* ty=Tensor[(16, 7, 9), bool] */;
  (%528,)
}

def @func_2655(%var_2586: Tensor[(240), int8], %var_2624: Tensor[(8, 6, 8), float64]) -> (Tensor[(44), uint64], Tensor[(3, 10, 8), float64], Tensor[(240), int8], Tensor[(384), float64], Tensor[(637), float32], Tensor[(126), float64], Tensor[(8, 6, 8), float32], Tensor[(8, 6, 8), float32], Tensor[(11, 1), float32], Tensor[(11), float32]) {
  %529 = @func_2419() /* ty=(Tensor[(9, ?, 10), int64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64]) */;
  %530 = cast(%var_2586, dtype="int8") /* ty=Tensor[(240), int8] */;
  %531 = cast(%var_2586, dtype="int8") /* ty=Tensor[(240), int8] */;
  %532 = cast(meta[relay.Constant][30] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %533 = cast(%var_2586, dtype="int8") /* ty=Tensor[(240), int8] */;
  %534 = reshape(%530, newshape=[3, 10, 8]) /* ty=Tensor[(3, 10, 8), int8] */;
  %535 = reshape(%531, newshape=[3, 10, 8]) /* ty=Tensor[(3, 10, 8), int8] */;
  %536 = reshape(%532, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %537 = reshape(%533, newshape=[3, 10, 8]) /* ty=Tensor[(3, 10, 8), int8] */;
  %538 = @func_368(%534, %535, %536, %537) /* ty=(Tensor[(3, 10, 8), uint32], Tensor[(8, 6, 8), float64], Tensor[(384), float64], Tensor[(8, 6, 8), float64], Tensor[(3, 10, 8), float64], Tensor[(8, 6, 8), float64], Tensor[(8, 6, 8), float64], Tensor[(3, 10, 8), bool]) */;
  %539 = %529.2;
  %540 = cast(%539, dtype="uint64") /* ty=Tensor[(44), uint64] */;
  %541 = cast(meta[relay.Constant][31] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
  %542 = reshape(%540, newshape=[44]) /* ty=Tensor[(44), uint64] */;
  %543 = reshape(%541, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %544 = @func_2526(%542, %543) /* ty=(Tensor[(44), bool], Tensor[(2, 2, 11), uint64], Tensor[(637), float32], Tensor[(675), uint8], Tensor[(126), float64], Tensor[(2, 2, 11), uint64]) */;
  %545 = cast(meta[relay.Constant][30] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %546 = reshape(%545, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
  %547 = @func_193(%546) /* ty=Tensor[(8, 6, 8), float64] */;
  %548 = cast(%var_2624, dtype="float32") /* ty=Tensor[(8, 6, 8), float32] */;
  %549 = shape_of(%547, dtype="int32") /* ty=Tensor[(3), int32] */;
  %550 = cast(%547, dtype="float32") /* ty=Tensor[(8, 6, 8), float32] */;
  %551 = dyn.reshape(%548, %549, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %552 = cast(%var_2624, dtype="float32") /* ty=Tensor[(8, 6, 8), float32] */;
  %553 = cast(meta[relay.Constant][32] /* ty=Tensor[(11), float32] */, dtype="float32") /* ty=Tensor[(11), float32] */;
  %554 = reshape(%553, newshape=[11, 1]) /* ty=Tensor[(11, 1), float32] */;
  %555 = %538.4;
  %556 = %544.2;
  %557 = divide(%550, %551) /* ty=Tensor[(8, 6, 8), float32] */;
  %558 = sqrt(%552) /* ty=Tensor[(8, 6, 8), float32] */;
  %559 = @func_383(%554) /* ty=Tensor[(11, 1), float32] */;
  (%539, %555, %var_2586, meta[relay.Constant][30] /* ty=Tensor[(384), float64] */, %556, meta[relay.Constant][31] /* ty=Tensor[(126), float64] */, %557, %558, %559, meta[relay.Constant][32] /* ty=Tensor[(11), float32] */)
}

def @func_5734(%var_5719: uint32, %var_5720: Tensor[(12, 1, 2), uint32]) -> (Tensor[(12, 1, 2), uint32],) {
  %560 = cast(%var_5719, dtype="uint32") /* ty=uint32 */;
  %561 = cast(%var_5720, dtype="uint32") /* ty=Tensor[(12, 1, 2), uint32] */;
  %562 = multiply(%560, %561) /* ty=Tensor[(12, 1, 2), uint32] */;
  (%562,)
}

def @func_5667() -> (Tensor[(1, 126), float64], Tensor[(44), uint64]) {
  %563 = @func_4706() /* ty=(Tensor[(1, 126), float64],) */;
  %564 = %563.0;
  %565 = @func_4790() /* ty=Tensor[(44), uint64] */;
  (%564, %565)
}

def @func_4046() -> Tensor[(1, 126), float64] {
  %566 = @func_3338() /* ty=(Tensor[(1, 126), float64],) */;
  %566.0
}

def @func_3243(%var_3204: Tensor[(9, 14, 10), int64], %var_3214: Tensor[(11), float32], %var_3238: Tensor[(13, 33), float64]) -> (Tensor[(9, 14, 10), int16], Tensor[(11, 1), float32], Tensor[(11), float32], Tensor[(9, 14, 10), bool], Tensor[(11, 13, 3), float64], Tensor[(13, 33), float64]) {
  %567 = @func_2945() /* ty=Tensor[(9, ?, 10), int64] */;
  %568 = cast(%567, dtype="int16") /* ty=Tensor[(9, ?, 10), int16] */;
  %569 = cast(%var_3204, dtype="int16") /* ty=Tensor[(9, 14, 10), int16] */;
  %570 = cast(%var_3214, dtype="float32") /* ty=Tensor[(11), float32] */;
  %571 = reshape(%570, newshape=[11, 1]) /* ty=Tensor[(11, 1), float32] */;
  %572 = cast(%var_3204, dtype="bool") /* ty=Tensor[(9, 14, 10), bool] */;
  %573 = cast(%567, dtype="bool") /* ty=Tensor[(9, ?, 10), bool] */;
  %574 = cast(%var_3238, dtype="float64") /* ty=Tensor[(13, 33), float64] */;
  %575 = reshape(%574, newshape=[11, 13, 3]) /* ty=Tensor[(11, 13, 3), float64] */;
  %576 = @func_1878(%575) /* ty=(Tensor[(11, 13, 3), bool], Tensor[(11, 13, 3), float64]) */;
  %577 = right_shift(%568, %569) /* ty=Tensor[(9, 14, 10), int16] */;
  %578 = @func_383(%571) /* ty=Tensor[(11, 1), float32] */;
  %579 = equal(%572, %573) /* ty=Tensor[(9, 14, 10), bool] */;
  %580 = %576.1;
  (%577, %578, %var_3214, %579, %580, %var_3238)
}

def @func_2786(%var_2762: Tensor[(4, 1, 9), uint8]) -> (Tensor[(4, 6, 9), uint8], Tensor[(11, 13, 3), bool], Tensor[(429), float64]) {
  %581 = cast(%var_2762, dtype="uint8") /* ty=Tensor[(4, 1, 9), uint8] */;
  %582 = cast(meta[relay.Constant][33] /* ty=Tensor[(4, 6, 9), uint8] */, dtype="uint8") /* ty=Tensor[(4, 6, 9), uint8] */;
  %583 = cast(meta[relay.Constant][34] /* ty=Tensor[(429), float64] */, dtype="float64") /* ty=Tensor[(429), float64] */;
  %584 = reshape(%583, newshape=[11, 13, 3]) /* ty=Tensor[(11, 13, 3), float64] */;
  %585 = @func_1878(%584) /* ty=(Tensor[(11, 13, 3), bool], Tensor[(11, 13, 3), float64]) */;
  %586 = left_shift(%581, %582) /* ty=Tensor[(4, 6, 9), uint8] */;
  %587 = %585.0;
  (%586, %587, meta[relay.Constant][34] /* ty=Tensor[(429), float64] */)
}

def @func_368(%var_300: Tensor[(3, 10, 8), int8], %var_301: Tensor[(3, 10, 8), int8], %var_321: Tensor[(384), float64], %var_362: Tensor[(3, 10, 8), int8]) -> (Tensor[(3, 10, 8), uint32], Tensor[(8, 6, 8), float64], Tensor[(384), float64], Tensor[(8, 6, 8), float64], Tensor[(3, 10, 8), float64], Tensor[(8, 6, 8), float64], Tensor[(8, 6, 8), float64], Tensor[(3, 10, 8), bool]) {
  %588 = cast(%var_301, dtype="int8") /* ty=Tensor[(3, 10, 8), int8] */;
  %589 = shape_of(%var_300, dtype="int32") /* ty=Tensor[(3), int32] */;
  %590 = cast(%var_300, dtype="int8") /* ty=Tensor[(3, 10, 8), int8] */;
  %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %592 = subtract(%590, %591) /* ty=Tensor[(3, 10, 8), int8] */;
  %593 = cast(%592, dtype="uint32") /* ty=Tensor[(3, 10, 8), uint32] */;
  %594 = shape_of(%var_300, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(%var_300, dtype="uint32") /* ty=Tensor[(3, 10, 8), uint32] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %597 = cast(%var_321, dtype="float64") /* ty=Tensor[(384), float64] */;
  %598 = reshape(%597, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
  %599 = cast(%var_321, dtype="float64") /* ty=Tensor[(384), float64] */;
  %600 = reshape(%599, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
  %601 = cast(%var_300, dtype="uint32") /* ty=Tensor[(3, 10, 8), uint32] */;
  %602 = shape_of(%var_301, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%var_301, dtype="uint32") /* ty=Tensor[(3, 10, 8), uint32] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %605 = add(%603, %604) /* ty=Tensor[(3, 10, 8), uint32] */;
  %606 = cast(%605, dtype="float64") /* ty=Tensor[(3, 10, 8), float64] */;
  %607 = cast(%var_321, dtype="float64") /* ty=Tensor[(384), float64] */;
  %608 = reshape(%607, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
  %609 = cast(%var_321, dtype="float64") /* ty=Tensor[(384), float64] */;
  %610 = reshape(%609, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
  %611 = cast(%var_362, dtype="bool") /* ty=Tensor[(3, 10, 8), bool] */;
  %612 = shape_of(%var_300, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(%var_300, dtype="bool") /* ty=Tensor[(3, 10, 8), bool] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %615 = logical_xor(%595, %596) /* ty=Tensor[(3, 10, 8), uint32] */;
  %616 = @func_193(%598) /* ty=Tensor[(8, 6, 8), float64] */;
  %617 = @func_193(%600) /* ty=Tensor[(8, 6, 8), float64] */;
  %618 = sigmoid(%606) /* ty=Tensor[(3, 10, 8), float64] */;
  %619 = @func_193(%608) /* ty=Tensor[(8, 6, 8), float64] */;
  %620 = @func_193(%610) /* ty=Tensor[(8, 6, 8), float64] */;
  %621 = logical_and(%613, %614) /* ty=Tensor[(3, 10, 8), bool] */;
  (%615, %616, %var_321, %617, %618, %619, %620, %621)
}

def @func_4621(%var_4602: float64, %var_4603: Tensor[(15, 3, 4), float64]) -> (Tensor[(15, 3, 4), float64],) {
  %622 = cast(%var_4602, dtype="float64") /* ty=float64 */;
  %623 = cast(%var_4603, dtype="float64") /* ty=Tensor[(15, 3, 4), float64] */;
  %624 = power(%622, %623) /* ty=Tensor[(15, 3, 4), float64] */;
  (%624,)
}

def @func_4776() -> (Tensor[(1, 126), float64],) {
  %625 = @func_3891() /* ty=Tensor[(1, 126), float32] */;
  %626 = cast(%625, dtype="float32") /* ty=Tensor[(1, 126), float32] */;
  %627 = rsqrt(%626) /* ty=Tensor[(1, 126), float32] */;
  %628 = cast(%627, dtype="float64") /* ty=Tensor[(1, 126), float64] */;
  %629 = sin(%628) /* ty=Tensor[(1, 126), float64] */;
  (%629,)
}

def @func_5987() -> (Tensor[(2, 2, 11), uint64], Tensor[(8, 6, 8), int64], Tensor[(8, 126), uint64]) {
  %630 = @func_5572() /* ty=(Tensor[(1, 126), float64], Tensor[(240), int8], Tensor[(8, 6, 8), int64]) */;
  %631 = @func_5351() /* ty=Tensor[(1, 126), float64] */;
  %632 = cast(%631, dtype="uint64") /* ty=Tensor[(1, 126), uint64] */;
  %633 = cast(meta[relay.Constant][35] /* ty=Tensor[(8, 126), float64] */, dtype="uint64") /* ty=Tensor[(8, 126), uint64] */;
  %634 = @func_4809() /* ty=Tensor[(2, 2, 11), uint64] */;
  %635 = %630.2;
  %636 = bitwise_xor(%632, %633) /* ty=Tensor[(8, 126), uint64] */;
  (%634, %635, %636)
}

def @func_3150(%var_3144: Tensor[(44), uint64]) -> Tensor[(44), int64] {
  %637 = @func_3010() /* ty=(Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(1, 126), float64]) */;
  %638 = %637.0;
  %639 = cast(%var_3144, dtype="int64") /* ty=Tensor[(44), int64] */;
  %640 = shape_of(%638, dtype="int32") /* ty=Tensor[(1), int32] */;
  %641 = cast(%638, dtype="int64") /* ty=Tensor[(44), int64] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?), int64] */;
  minimum(%641, %642) /* ty=Tensor[(44), int64] */
}

def @func_6422() -> Tensor[(9, ?, 10), int64] {
  @func_3877() /* ty=Tensor[(9, ?, 10), int64] */
}

def @func_4952(%var_4937: Tensor[(2, 126), float32]) -> Tensor[(2, 126), uint16] {
  %643 = @func_4486() /* ty=Tensor[(2, 126), float64] */;
  %644 = cast(%643, dtype="float32") /* ty=Tensor[(2, 126), float32] */;
  %645 = acosh(%644) /* ty=Tensor[(2, 126), float32] */;
  %646 = cast(%var_4937, dtype="bool") /* ty=Tensor[(2, 126), bool] */;
  %647 = shape_of(%645, dtype="int32") /* ty=Tensor[(2), int32] */;
  %648 = cast(%645, dtype="bool") /* ty=Tensor[(2, 126), bool] */;
  %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %650 = greater_equal(%648, %649) /* ty=Tensor[(2, 126), bool] */;
  %651 = @func_4706() /* ty=(Tensor[(1, 126), float64],) */;
  %652 = %651.0;
  %653 = cast(%650, dtype="uint16") /* ty=Tensor[(2, 126), uint16] */;
  %654 = cast(%652, dtype="uint16") /* ty=Tensor[(1, 126), uint16] */;
  bitwise_and(%653, %654) /* ty=Tensor[(2, 126), uint16] */
}

def @func_5239(%var_5223: Tensor[(1512), float64]) -> (Tensor[(9, ?, 10), int64], Tensor[(1512), float64], Tensor[(12, 14, 9), uint16], Tensor[(1, 126), float64]) {
  %655 = @func_4985() /* ty=Tensor[(1, 14, 9), float64] */;
  %656 = cast(%var_5223, dtype="float64") /* ty=Tensor[(1512), float64] */;
  %657 = reshape(%656, newshape=[12, 14, 9]) /* ty=Tensor[(12, 14, 9), float64] */;
  %658 = @func_4133(%657) /* ty=(Tensor[(12, 14, 9), int16],) */;
  %659 = %658.0;
  %660 = cast(%655, dtype="uint16") /* ty=Tensor[(1, 14, 9), uint16] */;
  %661 = cast(%659, dtype="uint16") /* ty=Tensor[(12, 14, 9), uint16] */;
  %662 = @func_2945() /* ty=Tensor[(9, ?, 10), int64] */;
  %663 = left_shift(%660, %661) /* ty=Tensor[(12, 14, 9), uint16] */;
  %664 = @func_5037() /* ty=Tensor[(1, 126), float64] */;
  (%662, %var_5223, %663, %664)
}

def @func_3794(%var_3774: Tensor[(675), uint8], %var_3775: Tensor[(384), float64]) -> (Tensor[(44), uint64], Tensor[(8, 6, 8), float64], Tensor[(675), uint8], Tensor[(384), float64], Tensor[(2, 2, 11), float64]) {
  %665 = @func_3010() /* ty=(Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(1, 126), float64]) */;
  %666 = cast(%var_3774, dtype="uint8") /* ty=Tensor[(675), uint8] */;
  %667 = cast(%var_3774, dtype="uint8") /* ty=Tensor[(675), uint8] */;
  %668 = cast(%var_3775, dtype="float64") /* ty=Tensor[(384), float64] */;
  %669 = reshape(%666, newshape=[9, 5, 15]) /* ty=Tensor[(9, 5, 15), uint8] */;
  %670 = reshape(%667, newshape=[9, 5, 15]) /* ty=Tensor[(9, 5, 15), uint8] */;
  %671 = reshape(%668, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %672 = @func_435(%669, %670, %671) /* ty=(Tensor[(9, 5, 15), uint8], Tensor[(3, 10, 8), bool], Tensor[(240), int8], Tensor[(384), float64], Tensor[(8, 6, 8), float64]) */;
  %673 = @func_2419() /* ty=(Tensor[(9, ?, 10), int64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64]) */;
  %674 = %673.1;
  %675 = cast(%674, dtype="float64") /* ty=Tensor[(2, 2, 11), float64] */;
  %676 = %665.0;
  %677 = %672.4;
  %678 = erf(%675) /* ty=Tensor[(2, 2, 11), float64] */;
  (%676, %677, %var_3774, %var_3775, %678)
}

def @func_1878(%var_1863: Tensor[(11, 13, 3), float64]) -> (Tensor[(11, 13, 3), bool], Tensor[(11, 13, 3), float64]) {
  %679 = cast(meta[relay.Constant][36] /* ty=Tensor[(11, 13, 3), float64] */, dtype="float64") /* ty=Tensor[(11, 13, 3), float64] */;
  %680 = sigmoid(%679) /* ty=Tensor[(11, 13, 3), float64] */;
  %681 = cast(%var_1863, dtype="bool") /* ty=Tensor[(11, 13, 3), bool] */;
  %682 = shape_of(%680, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(%680, dtype="bool") /* ty=Tensor[(11, 13, 3), bool] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %685 = cast(meta[relay.Constant][36] /* ty=Tensor[(11, 13, 3), float64] */, dtype="float64") /* ty=Tensor[(11, 13, 3), float64] */;
  %686 = less_equal(%683, %684) /* ty=Tensor[(11, 13, 3), bool] */;
  %687 = cos(%685) /* ty=Tensor[(11, 13, 3), float64] */;
  (%686, %687)
}

def @func_2945() -> Tensor[(9, ?, 10), int64] {
  %688 = @func_2419() /* ty=(Tensor[(9, ?, 10), int64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64]) */;
  %688.0
}

def @func_5351() -> Tensor[(1, 126), float64] {
  @func_5037() /* ty=Tensor[(1, 126), float64] */
}

def @func_2916(%var_2833: Tensor[(1, 384), float64], %var_2855: Tensor[(11), float32], %var_2893: Tensor[(9, 9, 10), float64]) -> (Tensor[(9, ?, 10), int16], Tensor[(44), uint64], Tensor[(1, 384), float64], Tensor[(1, 14, 9), float64], Tensor[(21, 6), float64], Tensor[(120, 2), int16], Tensor[(8, 6, 8), float32], Tensor[(8, 6, 8), float64], Tensor[(9, 9, 10), bool], Tensor[(2, 2, 11), uint64], Tensor[(11, ?), bool]) {
  %689 = @func_2419() /* ty=(Tensor[(9, ?, 10), int64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64]) */;
  %690 = %689.0;
  %691 = cast(%690, dtype="float64") /* ty=Tensor[(9, ?, 10), float64] */;
  %692 = atan(%691) /* ty=Tensor[(9, ?, 10), float64] */;
  %693 = cast(%690, dtype="int16") /* ty=Tensor[(9, ?, 10), int16] */;
  %694 = shape_of(%692, dtype="int32") /* ty=Tensor[(3), int32] */;
  %695 = cast(%692, dtype="int16") /* ty=Tensor[(9, ?, 10), int16] */;
  %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %697 = cast(meta[relay.Constant][37] /* ty=Tensor[(120, 2), int8] */, dtype="int8") /* ty=Tensor[(120, 2), int8] */;
  %698 = cast(%var_2833, dtype="float64") /* ty=Tensor[(1, 384), float64] */;
  %699 = reshape(%697, newshape=[240]) /* ty=Tensor[(240), int8] */;
  %700 = reshape(%698, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
  %701 = @func_2655(%699, %700) /* ty=(Tensor[(44), uint64], Tensor[(3, 10, 8), float64], Tensor[(240), int8], Tensor[(384), float64], Tensor[(637), float32], Tensor[(126), float64], Tensor[(8, 6, 8), float32], Tensor[(8, 6, 8), float32], Tensor[(11, 1), float32], Tensor[(11), float32]) */;
  %702 = cast(meta[relay.Constant][38] /* ty=Tensor[(21, 6), float64] */, dtype="float64") /* ty=Tensor[(21, 6), float64] */;
  %703 = reshape(%702, newshape=[1, 14, 9]) /* ty=Tensor[(1, 14, 9), float64] */;
  %704 = cast(meta[relay.Constant][37] /* ty=Tensor[(120, 2), int8] */, dtype="float64") /* ty=Tensor[(120, 2), float64] */;
  %705 = tan(%704) /* ty=Tensor[(120, 2), float64] */;
  %706 = cast(meta[relay.Constant][37] /* ty=Tensor[(120, 2), int8] */, dtype="int16") /* ty=Tensor[(120, 2), int16] */;
  %707 = shape_of(%705, dtype="int32") /* ty=Tensor[(2), int32] */;
  %708 = cast(%705, dtype="int16") /* ty=Tensor[(120, 2), int16] */;
  %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %710 = cast(%705, dtype="int8") /* ty=Tensor[(120, 2), int8] */;
  %711 = cast(%var_2833, dtype="float64") /* ty=Tensor[(1, 384), float64] */;
  %712 = reshape(%710, newshape=[240]) /* ty=Tensor[(240), int8] */;
  %713 = reshape(%711, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
  %714 = @func_2655(%712, %713) /* ty=(Tensor[(44), uint64], Tensor[(3, 10, 8), float64], Tensor[(240), int8], Tensor[(384), float64], Tensor[(637), float32], Tensor[(126), float64], Tensor[(8, 6, 8), float32], Tensor[(8, 6, 8), float32], Tensor[(11, 1), float32], Tensor[(11), float32]) */;
  %715 = %714.7;
  %716 = cast(%715, dtype="float64") /* ty=Tensor[(8, 6, 8), float64] */;
  %717 = reshape(%716, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
  %718 = cast(%692, dtype="bool") /* ty=Tensor[(9, ?, 10), bool] */;
  %719 = cast(%var_2893, dtype="bool") /* ty=Tensor[(9, 9, 10), bool] */;
  %720 = %701.0;
  %721 = cast(%720, dtype="uint64") /* ty=Tensor[(44), uint64] */;
  %722 = cast(meta[relay.Constant][38] /* ty=Tensor[(21, 6), float64] */, dtype="float64") /* ty=Tensor[(21, 6), float64] */;
  %723 = reshape(%721, newshape=[44]) /* ty=Tensor[(44), uint64] */;
  %724 = reshape(%722, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %725 = @func_2526(%723, %724) /* ty=(Tensor[(44), bool], Tensor[(2, 2, 11), uint64], Tensor[(637), float32], Tensor[(675), uint8], Tensor[(126), float64], Tensor[(2, 2, 11), uint64]) */;
  %726 = cast(%var_2855, dtype="float32") /* ty=Tensor[(11), float32] */;
  %727 = reshape(%726, newshape=[11, 1]) /* ty=Tensor[(11, 1), float32] */;
  %728 = @func_383(%727) /* ty=Tensor[(11, 1), float32] */;
  %729 = cast(%var_2855, dtype="bool") /* ty=Tensor[(11), bool] */;
  %730 = shape_of(%728, dtype="int32") /* ty=Tensor[(2), int32] */;
  %731 = cast(%728, dtype="bool") /* ty=Tensor[(11, 1), bool] */;
  %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %733 = bitwise_and(%695, %696) /* ty=Tensor[(9, ?, 10), int16] */;
  %734 = @func_1036(%703) /* ty=Tensor[(1, 14, 9), float64] */;
  %735 = bitwise_or(%708, %709) /* ty=Tensor[(120, 2), int16] */;
  %736 = @func_193(%717) /* ty=Tensor[(8, 6, 8), float64] */;
  %737 = less_equal(%718, %719) /* ty=Tensor[(9, 9, 10), bool] */;
  %738 = %725.5;
  %739 = logical_and(%731, %732) /* ty=Tensor[(11, ?), bool] */;
  (%733, %720, %var_2833, %734, meta[relay.Constant][38] /* ty=Tensor[(21, 6), float64] */, %735, %715, %736, %737, %738, %739)
}

def @func_1638(%var_1571: Tensor[(7, 13, 7), float32], %var_1575: Tensor[(5, 135), uint8], %var_1602: Tensor[(126), float64]) -> (Tensor[(7, 13, 7), float32], Tensor[(5, 135), uint8], Tensor[(24, 16), float64], Tensor[(8, 6, 8), float64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(126), float64]) {
  %740 = cast(%var_1571, dtype="float32") /* ty=Tensor[(7, 13, 7), float32] */;
  %741 = cast(%var_1575, dtype="uint8") /* ty=Tensor[(5, 135), uint8] */;
  %742 = cast(%var_1575, dtype="uint8") /* ty=Tensor[(5, 135), uint8] */;
  %743 = cast(meta[relay.Constant][39] /* ty=Tensor[(24, 16), float64] */, dtype="float64") /* ty=Tensor[(24, 16), float64] */;
  %744 = reshape(%741, newshape=[9, 5, 15]) /* ty=Tensor[(9, 5, 15), uint8] */;
  %745 = reshape(%742, newshape=[9, 5, 15]) /* ty=Tensor[(9, 5, 15), uint8] */;
  %746 = reshape(%743, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %747 = @func_435(%744, %745, %746) /* ty=(Tensor[(9, 5, 15), uint8], Tensor[(3, 10, 8), bool], Tensor[(240), int8], Tensor[(384), float64], Tensor[(8, 6, 8), float64]) */;
  %748 = %747.4;
  %749 = cast(%748, dtype="float64") /* ty=Tensor[(8, 6, 8), float64] */;
  %750 = cast(meta[relay.Constant][40] /* ty=Tensor[(44), uint64] */, dtype="uint64") /* ty=Tensor[(44), uint64] */;
  %751 = cast(meta[relay.Constant][40] /* ty=Tensor[(44), uint64] */, dtype="uint64") /* ty=Tensor[(44), uint64] */;
  %752 = reshape(%750, newshape=[2, 2, 11]) /* ty=Tensor[(2, 2, 11), uint64] */;
  %753 = reshape(%751, newshape=[2, 2, 11]) /* ty=Tensor[(2, 2, 11), uint64] */;
  %754 = cast(%var_1602, dtype="float64") /* ty=Tensor[(126), float64] */;
  %755 = reshape(%754, newshape=[1, 14, 9]) /* ty=Tensor[(1, 14, 9), float64] */;
  %756 = acosh(%740) /* ty=Tensor[(7, 13, 7), float32] */;
  %757 = atanh(%749) /* ty=Tensor[(8, 6, 8), float64] */;
  %758 = @func_1552(%752, %753) /* ty=Tensor[(2, 2, 11), uint64] */;
  %759 = @func_1036(%755) /* ty=Tensor[(1, 14, 9), float64] */;
  (%756, %var_1575, meta[relay.Constant][39] /* ty=Tensor[(24, 16), float64] */, %757, %758, meta[relay.Constant][40] /* ty=Tensor[(44), uint64] */, %759, %var_1602)
}

def @func_6662() -> Tensor[(14, 126), uint64] {
  %760 = @func_4163() /* ty=(Tensor[(14, 126), uint64],) */;
  %760.0
}

def @func_193(%var_186: Tensor[(8, 6, 8), float64]) -> Tensor[(8, 6, 8), float64] {
  %761 = cast(%var_186, dtype="float64") /* ty=Tensor[(8, 6, 8), float64] */;
  cos(%761) /* ty=Tensor[(8, 6, 8), float64] */
}

def @func_5572() -> (Tensor[(1, 126), float64], Tensor[(240), int8], Tensor[(8, 6, 8), int64]) {
  %762 = @func_3667() /* ty=(Tensor[(1, 126), float64],) */;
  %763 = cast(meta[relay.Constant][41] /* ty=Tensor[(240), int8] */, dtype="int8") /* ty=Tensor[(240), int8] */;
  %764 = cast(meta[relay.Constant][41] /* ty=Tensor[(240), int8] */, dtype="int8") /* ty=Tensor[(240), int8] */;
  %765 = cast(meta[relay.Constant][42] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %766 = cast(meta[relay.Constant][41] /* ty=Tensor[(240), int8] */, dtype="int8") /* ty=Tensor[(240), int8] */;
  %767 = reshape(%763, newshape=[3, 10, 8]) /* ty=Tensor[(3, 10, 8), int8] */;
  %768 = reshape(%764, newshape=[3, 10, 8]) /* ty=Tensor[(3, 10, 8), int8] */;
  %769 = reshape(%765, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %770 = reshape(%766, newshape=[3, 10, 8]) /* ty=Tensor[(3, 10, 8), int8] */;
  %771 = @func_368(%767, %768, %769, %770) /* ty=(Tensor[(3, 10, 8), uint32], Tensor[(8, 6, 8), float64], Tensor[(384), float64], Tensor[(8, 6, 8), float64], Tensor[(3, 10, 8), float64], Tensor[(8, 6, 8), float64], Tensor[(8, 6, 8), float64], Tensor[(3, 10, 8), bool]) */;
  %772 = %771.5;
  %773 = cast(meta[relay.Constant][42] /* ty=Tensor[(384), float64] */, dtype="int64") /* ty=Tensor[(384), int64] */;
  %774 = shape_of(%772, dtype="int32") /* ty=Tensor[(3), int32] */;
  %775 = cast(%772, dtype="int64") /* ty=Tensor[(8, 6, 8), int64] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %777 = %762.0;
  %778 = multiply(%775, %776) /* ty=Tensor[(8, 6, 8), int64] */;
  (%777, meta[relay.Constant][41] /* ty=Tensor[(240), int8] */, %778)
}

def @func_4665() -> (Tensor[(1, 126), float64],) {
  %779 = @func_4643() /* ty=(Tensor[(1, 126), float64], Tensor[(126), float64], Tensor[(44), uint64]) */;
  %780 = %779.0;
  (%780,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4838() -> (Tensor[(14, 126), uint64],) {
  %2 = fn () -> (Tensor[(14, 126), uint64],) {
    %0 = @func_4163() /* ty=(Tensor[(14, 126), uint64],) */;
    %1 = %0.0;
    (%1,)
  };
  %2() /* ty=(Tensor[(14, 126), uint64],) */
}

def @func_3444(%var_3433: uint16, %var_3434: Tensor[(6, 16, 4), uint16]) -> (Tensor[(6, 16, 4), uint16],) {
  %3 = cast(%var_3433, dtype="uint16") /* ty=uint16 */;
  %4 = cast(%var_3434, dtype="uint16") /* ty=Tensor[(6, 16, 4), uint16] */;
  %5 = logical_xor(%3, %4) /* ty=Tensor[(6, 16, 4), uint16] */;
  (%5,)
}

def @func_5539(%var_5538: Tensor[(1, 126), float32]) -> (Tensor[(?, 126), bool], Tensor[(14, 126), uint64]) {
  %14 = fn (%var_5515: Tensor[(1, 126), float32]) -> (Tensor[(?, 126), bool], Tensor[(14, 126), uint64]) {
    %6 = @func_4019() /* ty=Tensor[(1, 126), float32] */;
    %7 = cast(%var_5515, dtype="bool") /* ty=Tensor[(1, 126), bool] */;
    %8 = shape_of(%6, dtype="int32") /* ty=Tensor[(2), int32] */;
    %9 = cast(%6, dtype="bool") /* ty=Tensor[(1, 126), bool] */;
    %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %11 = @func_4163() /* ty=(Tensor[(14, 126), uint64],) */;
    %12 = logical_or(%9, %10) /* ty=Tensor[(?, 126), bool] */;
    %13 = %11.0;
    (%12, %13)
  };
  %14(%var_5538) /* ty=(Tensor[(?, 126), bool], Tensor[(14, 126), uint64]) */
}

def @func_6171(%var_6170: Tensor[(128), float32]) -> (Tensor[(1, 126), float64], Tensor[(675), uint8], Tensor[(128), float32], Tensor[(637), float32], Tensor[(1, 126), float64]) {
  %24 = fn (%var_6150: Tensor[(128), float32]) -> (Tensor[(1, 126), float64], Tensor[(675), uint8], Tensor[(128), float32], Tensor[(637), float32], Tensor[(1, 126), float64]) {
    %15 = @func_4706() /* ty=(Tensor[(1, 126), float64],) */;
    %16 = cast(%var_6150, dtype="float32") /* ty=Tensor[(128), float32] */;
    %17 = cast(meta[relay.Constant][0] /* ty=Tensor[(637), float32] */, dtype="float32") /* ty=Tensor[(637), float32] */;
    %18 = reshape(%16, newshape=[8, 2, 8]) /* ty=Tensor[(8, 2, 8), float32] */;
    %19 = reshape(%17, newshape=[637]) /* ty=Tensor[(637), float32] */;
    %20 = @func_3726(%18, %19) /* ty=(Tensor[(8, 2, 8), float32], Tensor[(1, 14, 9), float64], Tensor[(675), uint8], Tensor[(637), float32], Tensor[(11, 1), float32], Tensor[(11), float32]) */;
    %21 = %15.0;
    %22 = %20.2;
    %23 = @func_5351() /* ty=Tensor[(1, 126), float64] */;
    (%21, %22, %var_6150, meta[relay.Constant][0] /* ty=Tensor[(637), float32] */, %23)
  };
  %24(%var_6170) /* ty=(Tensor[(1, 126), float64], Tensor[(675), uint8], Tensor[(128), float32], Tensor[(637), float32], Tensor[(1, 126), float64]) */
}

def @func_6423() -> Tensor[(9, ?, 10), int64] {
  %25 = fn () -> Tensor[(9, ?, 10), int64] {
    @func_3877() /* ty=Tensor[(9, ?, 10), int64] */
  };
  %25() /* ty=Tensor[(9, ?, 10), int64] */
}

def @func_2916(%var_2833: Tensor[(1, 384), float64], %var_2855: Tensor[(11), float32], %var_2893: Tensor[(9, 9, 10), float64]) -> (Tensor[(9, ?, 10), int16], Tensor[(44), uint64], Tensor[(1, 384), float64], Tensor[(1, 14, 9), float64], Tensor[(21, 6), float64], Tensor[(120, 2), int16], Tensor[(8, 6, 8), float32], Tensor[(8, 6, 8), float64], Tensor[(9, 9, 10), bool], Tensor[(2, 2, 11), uint64], Tensor[(11, ?), bool]) {
  %26 = @func_2419() /* ty=(Tensor[(9, ?, 10), int64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64]) */;
  %27 = %26.0;
  %28 = cast(%27, dtype="float64") /* ty=Tensor[(9, ?, 10), float64] */;
  %29 = atan(%28) /* ty=Tensor[(9, ?, 10), float64] */;
  %30 = cast(%27, dtype="int16") /* ty=Tensor[(9, ?, 10), int16] */;
  %31 = shape_of(%29, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(%29, dtype="int16") /* ty=Tensor[(9, ?, 10), int16] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %34 = cast(meta[relay.Constant][1] /* ty=Tensor[(120, 2), int8] */, dtype="int8") /* ty=Tensor[(120, 2), int8] */;
  %35 = cast(%var_2833, dtype="float64") /* ty=Tensor[(1, 384), float64] */;
  %36 = reshape(%34, newshape=[240]) /* ty=Tensor[(240), int8] */;
  %37 = reshape(%35, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
  %38 = @func_2655(%36, %37) /* ty=(Tensor[(44), uint64], Tensor[(3, 10, 8), float64], Tensor[(240), int8], Tensor[(384), float64], Tensor[(637), float32], Tensor[(126), float64], Tensor[(8, 6, 8), float32], Tensor[(8, 6, 8), float32], Tensor[(11, 1), float32], Tensor[(11), float32]) */;
  %39 = cast(meta[relay.Constant][2] /* ty=Tensor[(21, 6), float64] */, dtype="float64") /* ty=Tensor[(21, 6), float64] */;
  %40 = reshape(%39, newshape=[1, 14, 9]) /* ty=Tensor[(1, 14, 9), float64] */;
  %41 = cast(meta[relay.Constant][1] /* ty=Tensor[(120, 2), int8] */, dtype="float64") /* ty=Tensor[(120, 2), float64] */;
  %42 = tan(%41) /* ty=Tensor[(120, 2), float64] */;
  %43 = cast(meta[relay.Constant][1] /* ty=Tensor[(120, 2), int8] */, dtype="int16") /* ty=Tensor[(120, 2), int16] */;
  %44 = shape_of(%42, dtype="int32") /* ty=Tensor[(2), int32] */;
  %45 = cast(%42, dtype="int16") /* ty=Tensor[(120, 2), int16] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %47 = cast(%42, dtype="int8") /* ty=Tensor[(120, 2), int8] */;
  %48 = cast(%var_2833, dtype="float64") /* ty=Tensor[(1, 384), float64] */;
  %49 = reshape(%47, newshape=[240]) /* ty=Tensor[(240), int8] */;
  %50 = reshape(%48, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
  %51 = @func_2655(%49, %50) /* ty=(Tensor[(44), uint64], Tensor[(3, 10, 8), float64], Tensor[(240), int8], Tensor[(384), float64], Tensor[(637), float32], Tensor[(126), float64], Tensor[(8, 6, 8), float32], Tensor[(8, 6, 8), float32], Tensor[(11, 1), float32], Tensor[(11), float32]) */;
  %52 = %51.7;
  %53 = cast(%52, dtype="float64") /* ty=Tensor[(8, 6, 8), float64] */;
  %54 = reshape(%53, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
  %55 = cast(%29, dtype="bool") /* ty=Tensor[(9, ?, 10), bool] */;
  %56 = cast(%var_2893, dtype="bool") /* ty=Tensor[(9, 9, 10), bool] */;
  %57 = %38.0;
  %58 = cast(%57, dtype="uint64") /* ty=Tensor[(44), uint64] */;
  %59 = cast(meta[relay.Constant][2] /* ty=Tensor[(21, 6), float64] */, dtype="float64") /* ty=Tensor[(21, 6), float64] */;
  %60 = reshape(%58, newshape=[44]) /* ty=Tensor[(44), uint64] */;
  %61 = reshape(%59, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %62 = @func_2526(%60, %61) /* ty=(Tensor[(44), bool], Tensor[(2, 2, 11), uint64], Tensor[(637), float32], Tensor[(675), uint8], Tensor[(126), float64], Tensor[(2, 2, 11), uint64]) */;
  %63 = cast(%var_2855, dtype="float32") /* ty=Tensor[(11), float32] */;
  %64 = reshape(%63, newshape=[11, 1]) /* ty=Tensor[(11, 1), float32] */;
  %65 = @func_383(%64) /* ty=Tensor[(11, 1), float32] */;
  %66 = cast(%var_2855, dtype="bool") /* ty=Tensor[(11), bool] */;
  %67 = shape_of(%65, dtype="int32") /* ty=Tensor[(2), int32] */;
  %68 = cast(%65, dtype="bool") /* ty=Tensor[(11, 1), bool] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %70 = bitwise_and(%32, %33) /* ty=Tensor[(9, ?, 10), int16] */;
  %71 = @func_1036(%40) /* ty=Tensor[(1, 14, 9), float64] */;
  %72 = bitwise_or(%45, %46) /* ty=Tensor[(120, 2), int16] */;
  %73 = @func_193(%54) /* ty=Tensor[(8, 6, 8), float64] */;
  %74 = less_equal(%55, %56) /* ty=Tensor[(9, 9, 10), bool] */;
  %75 = %62.5;
  %76 = logical_and(%68, %69) /* ty=Tensor[(11, ?), bool] */;
  (%70, %57, %var_2833, %71, meta[relay.Constant][2] /* ty=Tensor[(21, 6), float64] */, %72, %52, %73, %74, %75, %76)
}

def @func_196(%var_194: Tensor[(8, 6, 8), float64]) -> Tensor[(8, 6, 8), float64] {
  @func_193(%var_194) /* ty=Tensor[(8, 6, 8), float64] */
}

def @func_5335(%var_5334: Tensor[(2, 126), float64]) -> (Tensor[(1, 126), float64], Tensor[(9, ?, 10), int64], Tensor[(2, 126), bool]) {
  %88 = fn (%var_5309: Tensor[(2, 126), float64]) -> (Tensor[(1, 126), float64], Tensor[(9, ?, 10), int64], Tensor[(2, 126), bool]) {
    %77 = @func_3667() /* ty=(Tensor[(1, 126), float64],) */;
    %78 = %77.0;
    %79 = cast(%78, dtype="int64") /* ty=Tensor[(1, 126), int64] */;
    %80 = cast(%var_5309, dtype="int64") /* ty=Tensor[(2, 126), int64] */;
    %81 = right_shift(%79, %80) /* ty=Tensor[(2, 126), int64] */;
    %82 = @func_4046() /* ty=Tensor[(1, 126), float64] */;
    %83 = cast(%81, dtype="bool") /* ty=Tensor[(2, 126), bool] */;
    %84 = cast(%82, dtype="bool") /* ty=Tensor[(1, 126), bool] */;
    %85 = @func_3060() /* ty=Tensor[(1, 126), float64] */;
    %86 = @func_2945() /* ty=Tensor[(9, ?, 10), int64] */;
    %87 = not_equal(%83, %84) /* ty=Tensor[(2, 126), bool] */;
    (%85, %86, %87)
  };
  %88(%var_5334) /* ty=(Tensor[(1, 126), float64], Tensor[(9, ?, 10), int64], Tensor[(2, 126), bool]) */
}

def @func_6634() -> Tensor[(44), uint64] {
  %89 = @func_3038() /* ty=(Tensor[(44), uint64],) */;
  %89.0
}

def @func_4624(%var_4622: float64, %var_4623: Tensor[(15, 3, 4), float64]) -> (Tensor[(15, 3, 4), float64],) {
  %93 = fn (%var_4602: float64, %var_4603: Tensor[(15, 3, 4), float64]) -> (Tensor[(15, 3, 4), float64],) {
    %90 = cast(%var_4602, dtype="float64") /* ty=float64 */;
    %91 = cast(%var_4603, dtype="float64") /* ty=Tensor[(15, 3, 4), float64] */;
    %92 = power(%90, %91) /* ty=Tensor[(15, 3, 4), float64] */;
    (%92,)
  };
  %93(%var_4622, %var_4623) /* ty=(Tensor[(15, 3, 4), float64],) */
}

def @func_5464(%var_5459: Tensor[(1008), int32]) -> (Tensor[(44), uint64], Tensor[(15, 126), int64], Tensor[(2, 2, 11), float64], Tensor[(675), uint8], Tensor[(384), float64], Tensor[(16, 7, 9), bool], Tensor[(1008), int32]) {
  %94 = @func_4643() /* ty=(Tensor[(1, 126), float64], Tensor[(126), float64], Tensor[(44), uint64]) */;
  %95 = @func_4046() /* ty=Tensor[(1, 126), float64] */;
  %96 = cast(%95, dtype="int64") /* ty=Tensor[(1, 126), int64] */;
  %97 = cast(meta[relay.Constant][3] /* ty=Tensor[(15, 126), float64] */, dtype="int64") /* ty=Tensor[(15, 126), int64] */;
  %98 = cast(meta[relay.Constant][4] /* ty=Tensor[(675), uint8] */, dtype="uint8") /* ty=Tensor[(675), uint8] */;
  %99 = cast(meta[relay.Constant][5] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %100 = reshape(%98, newshape=[675]) /* ty=Tensor[(675), uint8] */;
  %101 = reshape(%99, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %102 = @func_3794(%100, %101) /* ty=(Tensor[(44), uint64], Tensor[(8, 6, 8), float64], Tensor[(675), uint8], Tensor[(384), float64], Tensor[(2, 2, 11), float64]) */;
  %103 = cast(%var_5459, dtype="int32") /* ty=Tensor[(1008), int32] */;
  %104 = reshape(%103, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), int32] */;
  %105 = @func_5422(%104) /* ty=(Tensor[(16, 7, 9), bool],) */;
  %106 = %94.2;
  %107 = left_shift(%96, %97) /* ty=Tensor[(15, 126), int64] */;
  %108 = %102.4;
  %109 = %105.0;
  (%106, %107, %108, meta[relay.Constant][4] /* ty=Tensor[(675), uint8] */, meta[relay.Constant][5] /* ty=Tensor[(384), float64] */, %109, %var_5459)
}

def @func_4952(%var_4937: Tensor[(2, 126), float32]) -> Tensor[(2, 126), uint16] {
  %110 = @func_4486() /* ty=Tensor[(2, 126), float64] */;
  %111 = cast(%110, dtype="float32") /* ty=Tensor[(2, 126), float32] */;
  %112 = acosh(%111) /* ty=Tensor[(2, 126), float32] */;
  %113 = cast(%var_4937, dtype="bool") /* ty=Tensor[(2, 126), bool] */;
  %114 = shape_of(%112, dtype="int32") /* ty=Tensor[(2), int32] */;
  %115 = cast(%112, dtype="bool") /* ty=Tensor[(2, 126), bool] */;
  %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %117 = greater_equal(%115, %116) /* ty=Tensor[(2, 126), bool] */;
  %118 = @func_4706() /* ty=(Tensor[(1, 126), float64],) */;
  %119 = %118.0;
  %120 = cast(%117, dtype="uint16") /* ty=Tensor[(2, 126), uint16] */;
  %121 = cast(%119, dtype="uint16") /* ty=Tensor[(1, 126), uint16] */;
  bitwise_and(%120, %121) /* ty=Tensor[(2, 126), uint16] */
}

def @func_374(%var_370: Tensor[(3, 10, 8), int8], %var_371: Tensor[(3, 10, 8), int8], %var_372: Tensor[(384), float64], %var_373: Tensor[(3, 10, 8), int8]) -> (Tensor[(3, 10, 8), uint32], Tensor[(8, 6, 8), float64], Tensor[(384), float64], Tensor[(8, 6, 8), float64], Tensor[(3, 10, 8), float64], Tensor[(8, 6, 8), float64], Tensor[(8, 6, 8), float64], Tensor[(3, 10, 8), bool]) {
  @func_368(%var_370, %var_371, %var_372, %var_373) /* ty=(Tensor[(3, 10, 8), uint32], Tensor[(8, 6, 8), float64], Tensor[(384), float64], Tensor[(8, 6, 8), float64], Tensor[(3, 10, 8), float64], Tensor[(8, 6, 8), float64], Tensor[(8, 6, 8), float64], Tensor[(3, 10, 8), bool]) */
}

def @func_2421() -> (Tensor[(9, ?, 10), int64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64]) {
  @func_2419() /* ty=(Tensor[(9, ?, 10), int64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64]) */
}

def @func_5988() -> (Tensor[(2, 2, 11), uint64], Tensor[(8, 6, 8), int64], Tensor[(8, 126), uint64]) {
  %129 = fn () -> (Tensor[(2, 2, 11), uint64], Tensor[(8, 6, 8), int64], Tensor[(8, 126), uint64]) {
    %122 = @func_5572() /* ty=(Tensor[(1, 126), float64], Tensor[(240), int8], Tensor[(8, 6, 8), int64]) */;
    %123 = @func_5351() /* ty=Tensor[(1, 126), float64] */;
    %124 = cast(%123, dtype="uint64") /* ty=Tensor[(1, 126), uint64] */;
    %125 = cast(meta[relay.Constant][6] /* ty=Tensor[(8, 126), float64] */, dtype="uint64") /* ty=Tensor[(8, 126), uint64] */;
    %126 = @func_4809() /* ty=Tensor[(2, 2, 11), uint64] */;
    %127 = %122.2;
    %128 = bitwise_xor(%124, %125) /* ty=Tensor[(8, 126), uint64] */;
    (%126, %127, %128)
  };
  %129() /* ty=(Tensor[(2, 2, 11), uint64], Tensor[(8, 6, 8), int64], Tensor[(8, 126), uint64]) */
}

def @func_3798(%var_3796: Tensor[(675), uint8], %var_3797: Tensor[(384), float64]) -> (Tensor[(44), uint64], Tensor[(8, 6, 8), float64], Tensor[(675), uint8], Tensor[(384), float64], Tensor[(2, 2, 11), float64]) {
  @func_3794(%var_3796, %var_3797) /* ty=(Tensor[(44), uint64], Tensor[(8, 6, 8), float64], Tensor[(675), uint8], Tensor[(384), float64], Tensor[(2, 2, 11), float64]) */
}

def @func_4955(%var_4953: Tensor[(2, 126), float32]) -> Tensor[(2, 126), uint16] {
  @func_4952(%var_4953) /* ty=Tensor[(2, 126), uint16] */
}

def @func_6361(%var_6349: Tensor[(44), uint64]) -> (Tensor[(11, 13, 3), float64], Tensor[(?, 126), float32], Tensor[(429), bool], Tensor[(1, 126), float64], Tensor[(1, 126), float64], Tensor[(1, 126), float32], Tensor[(1, 14, 9), float64], Tensor[(44), int64], Tensor[(44), uint64], Tensor[(?, 126), float64]) {
  %130 = cast(meta[relay.Constant][7] /* ty=Tensor[(429), float64] */, dtype="float64") /* ty=Tensor[(429), float64] */;
  %131 = reshape(%130, newshape=[11, 13, 3]) /* ty=Tensor[(11, 13, 3), float64] */;
  %132 = @func_1878(%131) /* ty=(Tensor[(11, 13, 3), bool], Tensor[(11, 13, 3), float64]) */;
  %133 = @func_4046() /* ty=Tensor[(1, 126), float64] */;
  %134 = @func_5999() /* ty=(Tensor[(1, 126), float64],) */;
  %135 = %134.0;
  %136 = cast(%133, dtype="bool") /* ty=Tensor[(1, 126), bool] */;
  %137 = shape_of(%135, dtype="int32") /* ty=Tensor[(2), int32] */;
  %138 = cast(%135, dtype="bool") /* ty=Tensor[(1, 126), bool] */;
  %139 = dyn.reshape(%136, %137, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %140 = logical_and(%138, %139) /* ty=Tensor[(?, 126), bool] */;
  %141 = cast(%140, dtype="float32") /* ty=Tensor[(?, 126), float32] */;
  %142 = shape_of(%133, dtype="int32") /* ty=Tensor[(2), int32] */;
  %143 = cast(%133, dtype="float32") /* ty=Tensor[(1, 126), float32] */;
  %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %145 = cast(meta[relay.Constant][8] /* ty=Tensor[(429), float64] */, dtype="bool") /* ty=Tensor[(429), bool] */;
  %146 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(429), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %147 = cast(meta[relay.Constant][7] /* ty=Tensor[(429), float64] */, dtype="bool") /* ty=Tensor[(429), bool] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?), bool] */;
  %149 = @func_3338() /* ty=(Tensor[(1, 126), float64],) */;
  %150 = @func_5037() /* ty=Tensor[(1, 126), float64] */;
  %151 = cast(%150, dtype="float64") /* ty=Tensor[(1, 126), float64] */;
  %152 = atan(%151) /* ty=Tensor[(1, 126), float64] */;
  %153 = cast(%152, dtype="float32") /* ty=Tensor[(1, 126), float32] */;
  %154 = cast(%var_6349, dtype="uint64") /* ty=Tensor[(44), uint64] */;
  %155 = reshape(%154, newshape=[44]) /* ty=Tensor[(44), uint64] */;
  %156 = cast(%152, dtype="float64") /* ty=Tensor[(1, 126), float64] */;
  %157 = acos(%156) /* ty=Tensor[(1, 126), float64] */;
  %158 = cast(%157, dtype="float64") /* ty=Tensor[(1, 126), float64] */;
  %159 = atanh(%158) /* ty=Tensor[(1, 126), float64] */;
  %160 = cast(%135, dtype="uint32") /* ty=Tensor[(1, 126), uint32] */;
  %161 = shape_of(%157, dtype="int32") /* ty=Tensor[(2), int32] */;
  %162 = cast(%157, dtype="uint32") /* ty=Tensor[(1, 126), uint32] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %164 = add(%162, %163) /* ty=Tensor[(?, 126), uint32] */;
  %165 = cast(%164, dtype="float64") /* ty=Tensor[(?, 126), float64] */;
  %166 = shape_of(%159, dtype="int32") /* ty=Tensor[(2), int32] */;
  %167 = cast(%159, dtype="float64") /* ty=Tensor[(1, 126), float64] */;
  %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %169 = %132.1;
  %170 = mod(%143, %144) /* ty=Tensor[(?, 126), float32] */;
  %171 = greater_equal(%147, %148) /* ty=Tensor[(429), bool] */;
  %172 = @func_5603() /* ty=Tensor[(1, 126), float64] */;
  %173 = %149.0;
  %174 = asinh(%153) /* ty=Tensor[(1, 126), float32] */;
  %175 = @func_3500() /* ty=Tensor[(1, 14, 9), float64] */;
  %176 = @func_3150(%155) /* ty=Tensor[(44), int64] */;
  %177 = floor_divide(%167, %168) /* ty=Tensor[(?, 126), float64] */;
  (%169, %170, %171, %172, %173, %174, %175, %176, %var_6349, %177)
}

def @func_2946() -> Tensor[(9, ?, 10), int64] {
  %179 = fn () -> Tensor[(9, ?, 10), int64] {
    %178 = @func_2419() /* ty=(Tensor[(9, ?, 10), int64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64]) */;
    %178.0
  };
  %179() /* ty=Tensor[(9, ?, 10), int64] */
}

def @func_3892() -> Tensor[(1, 126), float32] {
  %182 = fn () -> Tensor[(1, 126), float32] {
    %180 = @func_3419() /* ty=Tensor[(1, 126), float32] */;
    %181 = cast(%180, dtype="float32") /* ty=Tensor[(1, 126), float32] */;
    log(%181) /* ty=Tensor[(1, 126), float32] */
  };
  %182() /* ty=Tensor[(1, 126), float32] */
}

def @func_4987() -> Tensor[(1, 14, 9), float64] {
  @func_4985() /* ty=Tensor[(1, 14, 9), float64] */
}

def @func_3667() -> (Tensor[(1, 126), float64],) {
  %183 = @func_3338() /* ty=(Tensor[(1, 126), float64],) */;
  %184 = %183.0;
  (%184,)
}

def @func_3448(%var_3446: uint16, %var_3447: Tensor[(6, 16, 4), uint16]) -> (Tensor[(6, 16, 4), uint16],) {
  @func_3444(%var_3446, %var_3447) /* ty=(Tensor[(6, 16, 4), uint16],) */
}

def @func_4707() -> (Tensor[(1, 126), float64],) {
  %187 = fn () -> (Tensor[(1, 126), float64],) {
    %185 = @func_4099() /* ty=(Tensor[(1, 126), float64], Tensor[(1, 126), float64], Tensor[(1, 126), float64]) */;
    %186 = %185.1;
    (%186,)
  };
  %187() /* ty=(Tensor[(1, 126), float64],) */
}

def @func_4985() -> Tensor[(1, 14, 9), float64] {
  @func_3500() /* ty=Tensor[(1, 14, 9), float64] */
}

def @func_3419() -> Tensor[(1, 126), float32] {
  %188 = @func_3338() /* ty=(Tensor[(1, 126), float64],) */;
  %189 = %188.0;
  %190 = cast(%189, dtype="float32") /* ty=Tensor[(1, 126), float32] */;
  cos(%190) /* ty=Tensor[(1, 126), float32] */
}

def @func_3153(%var_3151: Tensor[(44), uint64]) -> Tensor[(44), int64] {
  @func_3150(%var_3151) /* ty=Tensor[(44), int64] */
}

def @func_5122(%var_5118: Tensor[(14, 126), float64], %var_5119: Tensor[(14, 126), float32], %var_5120: float64, %var_5121: Tensor[(180), float64]) -> (Tensor[(14, 126), bool], Tensor[(15, 3, 4), float64], float64, Tensor[(180), float64], Tensor[(15, 3, 4), float64]) {
  %218 = fn (%var_5072: Tensor[(14, 126), float64], %var_5079: Tensor[(14, 126), float32], %var_5108: float64, %var_5109: Tensor[(180), float64]) -> (Tensor[(14, 126), bool], Tensor[(15, 3, 4), float64], float64, Tensor[(180), float64], Tensor[(15, 3, 4), float64]) {
    %191 = @func_4099() /* ty=(Tensor[(1, 126), float64], Tensor[(1, 126), float64], Tensor[(1, 126), float64]) */;
    %192 = %191.0;
    %193 = cast(%192, dtype="float32") /* ty=Tensor[(1, 126), float32] */;
    %194 = cast(%var_5072, dtype="float32") /* ty=Tensor[(14, 126), float32] */;
    %195 = power(%193, %194) /* ty=Tensor[(14, 126), float32] */;
    %196 = cast(%var_5079, dtype="uint64") /* ty=Tensor[(14, 126), uint64] */;
    %197 = shape_of(%195, dtype="int32") /* ty=Tensor[(2), int32] */;
    %198 = cast(%195, dtype="uint64") /* ty=Tensor[(14, 126), uint64] */;
    %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %200 = bitwise_and(%198, %199) /* ty=Tensor[(14, 126), uint64] */;
    %201 = cast(%195, dtype="bool") /* ty=Tensor[(14, 126), bool] */;
    %202 = shape_of(%200, dtype="int32") /* ty=Tensor[(2), int32] */;
    %203 = cast(%200, dtype="bool") /* ty=Tensor[(14, 126), bool] */;
    %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %205 = cast(%var_5108, dtype="float64") /* ty=float64 */;
    %206 = cast(%var_5109, dtype="float64") /* ty=Tensor[(180), float64] */;
    %207 = reshape(%205, newshape=[]) /* ty=float64 */;
    %208 = reshape(%206, newshape=[15, 3, 4]) /* ty=Tensor[(15, 3, 4), float64] */;
    %209 = @func_4621(%207, %208) /* ty=(Tensor[(15, 3, 4), float64],) */;
    %210 = cast(%var_5108, dtype="float64") /* ty=float64 */;
    %211 = cast(%var_5109, dtype="float64") /* ty=Tensor[(180), float64] */;
    %212 = reshape(%210, newshape=[]) /* ty=float64 */;
    %213 = reshape(%211, newshape=[15, 3, 4]) /* ty=Tensor[(15, 3, 4), float64] */;
    %214 = @func_4621(%212, %213) /* ty=(Tensor[(15, 3, 4), float64],) */;
    %215 = logical_or(%203, %204) /* ty=Tensor[(14, 126), bool] */;
    %216 = %209.0;
    %217 = %214.0;
    (%215, %216, %var_5108, %var_5109, %217)
  };
  %218(%var_5118, %var_5119, %var_5120, %var_5121) /* ty=(Tensor[(14, 126), bool], Tensor[(15, 3, 4), float64], float64, Tensor[(180), float64], Tensor[(15, 3, 4), float64]) */
}

def @func_3977(%var_3934: Tensor[(2, 64), float32], %var_3935: Tensor[(637), float32]) -> (Tensor[(1, 126), float64], Tensor[(2, 64), float32], Tensor[(675), uint8], Tensor[(637), uint16]) {
  %219 = @func_3667() /* ty=(Tensor[(1, 126), float64],) */;
  %220 = cast(%var_3934, dtype="float32") /* ty=Tensor[(2, 64), float32] */;
  %221 = cast(%var_3934, dtype="float32") /* ty=Tensor[(2, 64), float32] */;
  %222 = cast(%var_3935, dtype="float32") /* ty=Tensor[(637), float32] */;
  %223 = reshape(%221, newshape=[8, 2, 8]) /* ty=Tensor[(8, 2, 8), float32] */;
  %224 = reshape(%222, newshape=[637]) /* ty=Tensor[(637), float32] */;
  %225 = @func_3726(%223, %224) /* ty=(Tensor[(8, 2, 8), float32], Tensor[(1, 14, 9), float64], Tensor[(675), uint8], Tensor[(637), float32], Tensor[(11, 1), float32], Tensor[(11), float32]) */;
  %226 = %225.3;
  %227 = cast(%226, dtype="float32") /* ty=Tensor[(637), float32] */;
  %228 = reshape(%220, newshape=[8, 2, 8]) /* ty=Tensor[(8, 2, 8), float32] */;
  %229 = reshape(%227, newshape=[637]) /* ty=Tensor[(637), float32] */;
  %230 = @func_3726(%228, %229) /* ty=(Tensor[(8, 2, 8), float32], Tensor[(1, 14, 9), float64], Tensor[(675), uint8], Tensor[(637), float32], Tensor[(11, 1), float32], Tensor[(11), float32]) */;
  %231 = cast(%var_3935, dtype="float32") /* ty=Tensor[(637), float32] */;
  %232 = rsqrt(%231) /* ty=Tensor[(637), float32] */;
  %233 = cast(%226, dtype="bool") /* ty=Tensor[(637), bool] */;
  %234 = shape_of(%232, dtype="int32") /* ty=Tensor[(1), int32] */;
  %235 = cast(%232, dtype="bool") /* ty=Tensor[(637), bool] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?), bool] */;
  %237 = less(%235, %236) /* ty=Tensor[(637), bool] */;
  %238 = cast(%237, dtype="uint16") /* ty=Tensor[(637), uint16] */;
  %239 = shape_of(%232, dtype="int32") /* ty=Tensor[(1), int32] */;
  %240 = cast(%232, dtype="uint16") /* ty=Tensor[(637), uint16] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %242 = %219.0;
  %243 = %230.2;
  %244 = multiply(%240, %241) /* ty=Tensor[(637), uint16] */;
  (%242, %var_3934, %243, %244)
}

def @func_5718() -> Tensor[(1, 126), float64] {
  %245 = fn () -> Tensor[(1, 126), float64] {
    @func_4046() /* ty=Tensor[(1, 126), float64] */
  };
  %245() /* ty=Tensor[(1, 126), float64] */
}

def @func_6757() -> (Tensor[(1, 14, 9), float64],) {
  @func_6755() /* ty=(Tensor[(1, 14, 9), float64],) */
}

def @func_3877() -> Tensor[(9, ?, 10), int64] {
  @func_2945() /* ty=Tensor[(9, ?, 10), int64] */
}

def @func_3101(%var_3097: Tensor[(10, 126), float64], %var_3098: Tensor[(384), float64], %var_3099: Tensor[(11), float32], %var_3100: Tensor[(810), float64]) -> (Tensor[(10, 126), float32], Tensor[(21, 6), float64], Tensor[(384), float64], Tensor[(11), float32], Tensor[(810), float64]) {
  %258 = fn (%var_3078: Tensor[(10, 126), float64], %var_3086: Tensor[(384), float64], %var_3087: Tensor[(11), float32], %var_3088: Tensor[(810), float64]) -> (Tensor[(10, 126), float32], Tensor[(21, 6), float64], Tensor[(384), float64], Tensor[(11), float32], Tensor[(810), float64]) {
    %246 = @func_3060() /* ty=Tensor[(1, 126), float64] */;
    %247 = cast(%246, dtype="float32") /* ty=Tensor[(1, 126), float32] */;
    %248 = cast(%var_3078, dtype="float32") /* ty=Tensor[(10, 126), float32] */;
    %249 = cast(%var_3086, dtype="float64") /* ty=Tensor[(384), float64] */;
    %250 = cast(%var_3087, dtype="float32") /* ty=Tensor[(11), float32] */;
    %251 = cast(%var_3088, dtype="float64") /* ty=Tensor[(810), float64] */;
    %252 = reshape(%249, newshape=[1, 384]) /* ty=Tensor[(1, 384), float64] */;
    %253 = reshape(%250, newshape=[11]) /* ty=Tensor[(11), float32] */;
    %254 = reshape(%251, newshape=[9, 9, 10]) /* ty=Tensor[(9, 9, 10), float64] */;
    %255 = @func_2916(%252, %253, %254) /* ty=(Tensor[(9, ?, 10), int16], Tensor[(44), uint64], Tensor[(1, 384), float64], Tensor[(1, 14, 9), float64], Tensor[(21, 6), float64], Tensor[(120, 2), int16], Tensor[(8, 6, 8), float32], Tensor[(8, 6, 8), float64], Tensor[(9, 9, 10), bool], Tensor[(2, 2, 11), uint64], Tensor[(11, ?), bool]) */;
    %256 = power(%247, %248) /* ty=Tensor[(10, 126), float32] */;
    %257 = %255.4;
    (%256, %257, %var_3086, %var_3087, %var_3088)
  };
  %258(%var_3097, %var_3098, %var_3099, %var_3100) /* ty=(Tensor[(10, 126), float32], Tensor[(21, 6), float64], Tensor[(384), float64], Tensor[(11), float32], Tensor[(810), float64]) */
}

def @func_4163() -> (Tensor[(14, 126), uint64],) {
  %259 = @func_3667() /* ty=(Tensor[(1, 126), float64],) */;
  %260 = %259.0;
  %261 = cast(%260, dtype="uint64") /* ty=Tensor[(1, 126), uint64] */;
  %262 = cast(meta[relay.Constant][9] /* ty=Tensor[(14, 126), float64] */, dtype="uint64") /* ty=Tensor[(14, 126), uint64] */;
  %263 = right_shift(%261, %262) /* ty=Tensor[(14, 126), uint64] */;
  (%263,)
}

def @func_3610(%var_3608: Tensor[(637), float32], %var_3609: Tensor[(21, 6), float64]) -> (Tensor[(44), uint64], Tensor[(7, 13, 7), float32], Tensor[(637), float32], Tensor[(675), uint8], Tensor[(21, 6), float64]) {
  %274 = fn (%var_3601: Tensor[(637), float32], %var_3603: Tensor[(21, 6), float64]) -> (Tensor[(44), uint64], Tensor[(7, 13, 7), float32], Tensor[(637), float32], Tensor[(675), uint8], Tensor[(21, 6), float64]) {
    %264 = @func_2419() /* ty=(Tensor[(9, ?, 10), int64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64]) */;
    %265 = cast(%var_3601, dtype="float32") /* ty=Tensor[(637), float32] */;
    %266 = cast(meta[relay.Constant][10] /* ty=Tensor[(675), uint8] */, dtype="uint8") /* ty=Tensor[(675), uint8] */;
    %267 = cast(%var_3603, dtype="float64") /* ty=Tensor[(21, 6), float64] */;
    %268 = reshape(%265, newshape=[7, 13, 7]) /* ty=Tensor[(7, 13, 7), float32] */;
    %269 = reshape(%266, newshape=[5, 135]) /* ty=Tensor[(5, 135), uint8] */;
    %270 = reshape(%267, newshape=[126]) /* ty=Tensor[(126), float64] */;
    %271 = @func_1638(%268, %269, %270) /* ty=(Tensor[(7, 13, 7), float32], Tensor[(5, 135), uint8], Tensor[(24, 16), float64], Tensor[(8, 6, 8), float64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(126), float64]) */;
    %272 = %264.2;
    %273 = %271.0;
    (%272, %273, %var_3601, meta[relay.Constant][10] /* ty=Tensor[(675), uint8] */, %var_3603)
  };
  %274(%var_3608, %var_3609) /* ty=(Tensor[(44), uint64], Tensor[(7, 13, 7), float32], Tensor[(637), float32], Tensor[(675), uint8], Tensor[(21, 6), float64]) */
}

def @func_6618() -> Tensor[(2, 2, 11), bool] {
  @func_6616() /* ty=Tensor[(2, 2, 11), bool] */
}

def @func_6854() -> (Tensor[(1, 126), float32],) {
  %279 = fn () -> (Tensor[(1, 126), float32],) {
    %275 = @func_3667() /* ty=(Tensor[(1, 126), float64],) */;
    %276 = %275.0;
    %277 = cast(%276, dtype="float32") /* ty=Tensor[(1, 126), float32] */;
    %278 = cosh(%277) /* ty=Tensor[(1, 126), float32] */;
    (%278,)
  };
  %279() /* ty=(Tensor[(1, 126), float32],) */
}

def @func_5239(%var_5223: Tensor[(1512), float64]) -> (Tensor[(9, ?, 10), int64], Tensor[(1512), float64], Tensor[(12, 14, 9), uint16], Tensor[(1, 126), float64]) {
  %280 = @func_4985() /* ty=Tensor[(1, 14, 9), float64] */;
  %281 = cast(%var_5223, dtype="float64") /* ty=Tensor[(1512), float64] */;
  %282 = reshape(%281, newshape=[12, 14, 9]) /* ty=Tensor[(12, 14, 9), float64] */;
  %283 = @func_4133(%282) /* ty=(Tensor[(12, 14, 9), int16],) */;
  %284 = %283.0;
  %285 = cast(%280, dtype="uint16") /* ty=Tensor[(1, 14, 9), uint16] */;
  %286 = cast(%284, dtype="uint16") /* ty=Tensor[(12, 14, 9), uint16] */;
  %287 = @func_2945() /* ty=Tensor[(9, ?, 10), int64] */;
  %288 = left_shift(%285, %286) /* ty=Tensor[(12, 14, 9), uint16] */;
  %289 = @func_5037() /* ty=Tensor[(1, 126), float64] */;
  (%287, %var_5223, %288, %289)
}

def @func_6922(%var_6920: Tensor[(11), float32]) -> (Tensor[(1, 126), float64], Tensor[(9, 9, 10), bool], Tensor[(384), float64], Tensor[(11), float32], Tensor[(810), float64]) {
  @func_6919(%var_6920) /* ty=(Tensor[(1, 126), float64], Tensor[(9, 9, 10), bool], Tensor[(384), float64], Tensor[(11), float32], Tensor[(810), float64]) */
}

def @func_2921(%var_2918: Tensor[(1, 384), float64], %var_2919: Tensor[(11), float32], %var_2920: Tensor[(9, 9, 10), float64]) -> (Tensor[(9, ?, 10), int16], Tensor[(44), uint64], Tensor[(1, 384), float64], Tensor[(1, 14, 9), float64], Tensor[(21, 6), float64], Tensor[(120, 2), int16], Tensor[(8, 6, 8), float32], Tensor[(8, 6, 8), float64], Tensor[(9, 9, 10), bool], Tensor[(2, 2, 11), uint64], Tensor[(11, ?), bool]) {
  @func_2916(%var_2918, %var_2919, %var_2920) /* ty=(Tensor[(9, ?, 10), int16], Tensor[(44), uint64], Tensor[(1, 384), float64], Tensor[(1, 14, 9), float64], Tensor[(21, 6), float64], Tensor[(120, 2), int16], Tensor[(8, 6, 8), float32], Tensor[(8, 6, 8), float64], Tensor[(9, 9, 10), bool], Tensor[(2, 2, 11), uint64], Tensor[(11, ?), bool]) */
}

def @func_5467(%var_5465: Tensor[(1008), int32]) -> (Tensor[(44), uint64], Tensor[(15, 126), int64], Tensor[(2, 2, 11), float64], Tensor[(675), uint8], Tensor[(384), float64], Tensor[(16, 7, 9), bool], Tensor[(1008), int32]) {
  @func_5464(%var_5465) /* ty=(Tensor[(44), uint64], Tensor[(15, 126), int64], Tensor[(2, 2, 11), float64], Tensor[(675), uint8], Tensor[(384), float64], Tensor[(16, 7, 9), bool], Tensor[(1008), int32]) */
}

def @func_2659(%var_2657: Tensor[(240), int8], %var_2658: Tensor[(8, 6, 8), float64]) -> (Tensor[(44), uint64], Tensor[(3, 10, 8), float64], Tensor[(240), int8], Tensor[(384), float64], Tensor[(637), float32], Tensor[(126), float64], Tensor[(8, 6, 8), float32], Tensor[(8, 6, 8), float32], Tensor[(11, 1), float32], Tensor[(11), float32]) {
  @func_2655(%var_2657, %var_2658) /* ty=(Tensor[(44), uint64], Tensor[(3, 10, 8), float64], Tensor[(240), int8], Tensor[(384), float64], Tensor[(637), float32], Tensor[(126), float64], Tensor[(8, 6, 8), float32], Tensor[(8, 6, 8), float32], Tensor[(11, 1), float32], Tensor[(11), float32]) */
}

def @func_3794(%var_3774: Tensor[(675), uint8], %var_3775: Tensor[(384), float64]) -> (Tensor[(44), uint64], Tensor[(8, 6, 8), float64], Tensor[(675), uint8], Tensor[(384), float64], Tensor[(2, 2, 11), float64]) {
  %290 = @func_3010() /* ty=(Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(1, 126), float64]) */;
  %291 = cast(%var_3774, dtype="uint8") /* ty=Tensor[(675), uint8] */;
  %292 = cast(%var_3774, dtype="uint8") /* ty=Tensor[(675), uint8] */;
  %293 = cast(%var_3775, dtype="float64") /* ty=Tensor[(384), float64] */;
  %294 = reshape(%291, newshape=[9, 5, 15]) /* ty=Tensor[(9, 5, 15), uint8] */;
  %295 = reshape(%292, newshape=[9, 5, 15]) /* ty=Tensor[(9, 5, 15), uint8] */;
  %296 = reshape(%293, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %297 = @func_435(%294, %295, %296) /* ty=(Tensor[(9, 5, 15), uint8], Tensor[(3, 10, 8), bool], Tensor[(240), int8], Tensor[(384), float64], Tensor[(8, 6, 8), float64]) */;
  %298 = @func_2419() /* ty=(Tensor[(9, ?, 10), int64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64]) */;
  %299 = %298.1;
  %300 = cast(%299, dtype="float64") /* ty=Tensor[(2, 2, 11), float64] */;
  %301 = %290.0;
  %302 = %297.4;
  %303 = erf(%300) /* ty=Tensor[(2, 2, 11), float64] */;
  (%301, %302, %var_3774, %var_3775, %303)
}

def @func_4791() -> Tensor[(44), uint64] {
  %305 = fn () -> Tensor[(44), uint64] {
    %304 = @func_3038() /* ty=(Tensor[(44), uint64],) */;
    %304.0
  };
  %305() /* ty=Tensor[(44), uint64] */
}

def @func_4046() -> Tensor[(1, 126), float64] {
  %306 = @func_3338() /* ty=(Tensor[(1, 126), float64],) */;
  %306.0
}

def @func_6919(%var_6897: Tensor[(11), float32]) -> (Tensor[(1, 126), float64], Tensor[(9, 9, 10), bool], Tensor[(384), float64], Tensor[(11), float32], Tensor[(810), float64]) {
  %307 = cast(meta[relay.Constant][11] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %308 = cast(%var_6897, dtype="float32") /* ty=Tensor[(11), float32] */;
  %309 = cast(meta[relay.Constant][12] /* ty=Tensor[(810), float64] */, dtype="float64") /* ty=Tensor[(810), float64] */;
  %310 = reshape(%307, newshape=[1, 384]) /* ty=Tensor[(1, 384), float64] */;
  %311 = reshape(%308, newshape=[11]) /* ty=Tensor[(11), float32] */;
  %312 = reshape(%309, newshape=[9, 9, 10]) /* ty=Tensor[(9, 9, 10), float64] */;
  %313 = @func_2916(%310, %311, %312) /* ty=(Tensor[(9, ?, 10), int16], Tensor[(44), uint64], Tensor[(1, 384), float64], Tensor[(1, 14, 9), float64], Tensor[(21, 6), float64], Tensor[(120, 2), int16], Tensor[(8, 6, 8), float32], Tensor[(8, 6, 8), float64], Tensor[(9, 9, 10), bool], Tensor[(2, 2, 11), uint64], Tensor[(11, ?), bool]) */;
  %314 = @func_5037() /* ty=Tensor[(1, 126), float64] */;
  %315 = %313.8;
  (%314, %315, meta[relay.Constant][11] /* ty=Tensor[(384), float64] */, %var_6897, meta[relay.Constant][12] /* ty=Tensor[(810), float64] */)
}

def @func_2740(%var_2738: Tensor[(675), uint8], %var_2739: Tensor[(126), float64]) -> (Tensor[(24, 16), float64], Tensor[(637), float32], Tensor[(675), uint8], Tensor[(126), float64], Tensor[(8, 6, 8), float64], Tensor[(2, 2, 11), float32]) {
  %333 = fn (%var_2704: Tensor[(675), uint8], %var_2705: Tensor[(126), float64]) -> (Tensor[(24, 16), float64], Tensor[(637), float32], Tensor[(675), uint8], Tensor[(126), float64], Tensor[(8, 6, 8), float64], Tensor[(2, 2, 11), float32]) {
    %316 = cast(meta[relay.Constant][13] /* ty=Tensor[(637), float32] */, dtype="float32") /* ty=Tensor[(637), float32] */;
    %317 = cast(%var_2704, dtype="uint8") /* ty=Tensor[(675), uint8] */;
    %318 = cast(%var_2705, dtype="float64") /* ty=Tensor[(126), float64] */;
    %319 = reshape(%316, newshape=[7, 13, 7]) /* ty=Tensor[(7, 13, 7), float32] */;
    %320 = reshape(%317, newshape=[5, 135]) /* ty=Tensor[(5, 135), uint8] */;
    %321 = reshape(%318, newshape=[126]) /* ty=Tensor[(126), float64] */;
    %322 = @func_1638(%319, %320, %321) /* ty=(Tensor[(7, 13, 7), float32], Tensor[(5, 135), uint8], Tensor[(24, 16), float64], Tensor[(8, 6, 8), float64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(126), float64]) */;
    %323 = %322.2;
    %324 = cast(%323, dtype="float64") /* ty=Tensor[(24, 16), float64] */;
    %325 = reshape(%324, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
    %326 = @func_2419() /* ty=(Tensor[(9, ?, 10), int64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64]) */;
    %327 = %326.1;
    %328 = cast(%327, dtype="float64") /* ty=Tensor[(2, 2, 11), float64] */;
    %329 = sqrt(%328) /* ty=Tensor[(2, 2, 11), float64] */;
    %330 = cast(%329, dtype="float32") /* ty=Tensor[(2, 2, 11), float32] */;
    %331 = @func_193(%325) /* ty=Tensor[(8, 6, 8), float64] */;
    %332 = atan(%330) /* ty=Tensor[(2, 2, 11), float32] */;
    (%323, meta[relay.Constant][13] /* ty=Tensor[(637), float32] */, %var_2704, %var_2705, %331, %332)
  };
  %333(%var_2738, %var_2739) /* ty=(Tensor[(24, 16), float64], Tensor[(637), float32], Tensor[(675), uint8], Tensor[(126), float64], Tensor[(8, 6, 8), float64], Tensor[(2, 2, 11), float32]) */
}

def @func_4048() -> Tensor[(1, 126), float64] {
  @func_4046() /* ty=Tensor[(1, 126), float64] */
}

def @func_5264() -> Tensor[(1, 126), float64] {
  @func_5262() /* ty=Tensor[(1, 126), float64] */
}

def @func_5392(%var_5390: Tensor[(2, 9, 4), float64], %var_5391: Tensor[(2, 9, 4), float64]) -> (Tensor[(2, 9, 4), float64],) {
  @func_5388(%var_5390, %var_5391) /* ty=(Tensor[(2, 9, 4), float64],) */
}

def @func_435(%var_411: Tensor[(9, 5, 15), uint8], %var_412: Tensor[(9, 5, 15), uint8], %var_423: Tensor[(384), float64]) -> (Tensor[(9, 5, 15), uint8], Tensor[(3, 10, 8), bool], Tensor[(240), int8], Tensor[(384), float64], Tensor[(8, 6, 8), float64]) {
  %334 = cast(%var_412, dtype="uint8") /* ty=Tensor[(9, 5, 15), uint8] */;
  %335 = shape_of(%var_411, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(%var_411, dtype="uint8") /* ty=Tensor[(9, 5, 15), uint8] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %338 = cast(meta[relay.Constant][14] /* ty=Tensor[(240), int8] */, dtype="int8") /* ty=Tensor[(240), int8] */;
  %339 = cast(meta[relay.Constant][14] /* ty=Tensor[(240), int8] */, dtype="int8") /* ty=Tensor[(240), int8] */;
  %340 = cast(%var_423, dtype="float64") /* ty=Tensor[(384), float64] */;
  %341 = cast(meta[relay.Constant][14] /* ty=Tensor[(240), int8] */, dtype="int8") /* ty=Tensor[(240), int8] */;
  %342 = reshape(%338, newshape=[3, 10, 8]) /* ty=Tensor[(3, 10, 8), int8] */;
  %343 = reshape(%339, newshape=[3, 10, 8]) /* ty=Tensor[(3, 10, 8), int8] */;
  %344 = reshape(%340, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %345 = reshape(%341, newshape=[3, 10, 8]) /* ty=Tensor[(3, 10, 8), int8] */;
  %346 = @func_368(%342, %343, %344, %345) /* ty=(Tensor[(3, 10, 8), uint32], Tensor[(8, 6, 8), float64], Tensor[(384), float64], Tensor[(8, 6, 8), float64], Tensor[(3, 10, 8), float64], Tensor[(8, 6, 8), float64], Tensor[(8, 6, 8), float64], Tensor[(3, 10, 8), bool]) */;
  %347 = %346.7;
  %348 = cast(%347, dtype="int8") /* ty=Tensor[(3, 10, 8), int8] */;
  %349 = cast(meta[relay.Constant][14] /* ty=Tensor[(240), int8] */, dtype="int8") /* ty=Tensor[(240), int8] */;
  %350 = cast(%var_423, dtype="float64") /* ty=Tensor[(384), float64] */;
  %351 = cast(%347, dtype="int8") /* ty=Tensor[(3, 10, 8), int8] */;
  %352 = reshape(%348, newshape=[3, 10, 8]) /* ty=Tensor[(3, 10, 8), int8] */;
  %353 = reshape(%349, newshape=[3, 10, 8]) /* ty=Tensor[(3, 10, 8), int8] */;
  %354 = reshape(%350, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %355 = reshape(%351, newshape=[3, 10, 8]) /* ty=Tensor[(3, 10, 8), int8] */;
  %356 = @func_368(%352, %353, %354, %355) /* ty=(Tensor[(3, 10, 8), uint32], Tensor[(8, 6, 8), float64], Tensor[(384), float64], Tensor[(8, 6, 8), float64], Tensor[(3, 10, 8), float64], Tensor[(8, 6, 8), float64], Tensor[(8, 6, 8), float64], Tensor[(3, 10, 8), bool]) */;
  %357 = bitwise_or(%336, %337) /* ty=Tensor[(9, 5, 15), uint8] */;
  %358 = %356.1;
  (%357, %347, meta[relay.Constant][14] /* ty=Tensor[(240), int8] */, %var_423, %358)
}

def @func_3012() -> (Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(1, 126), float64]) {
  @func_3010() /* ty=(Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(1, 126), float64]) */
}

def @func_3060() -> Tensor[(1, 126), float64] {
  %359 = @func_3010() /* ty=(Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(1, 126), float64]) */;
  %359.2
}

def @func_5409() -> Tensor[(1, 14, 9), float64] {
  %360 = fn () -> Tensor[(1, 14, 9), float64] {
    @func_4985() /* ty=Tensor[(1, 14, 9), float64] */
  };
  %360() /* ty=Tensor[(1, 14, 9), float64] */
}

def @func_3729(%var_3727: Tensor[(8, 2, 8), float32], %var_3728: Tensor[(637), float32]) -> (Tensor[(8, 2, 8), float32], Tensor[(1, 14, 9), float64], Tensor[(675), uint8], Tensor[(637), float32], Tensor[(11, 1), float32], Tensor[(11), float32]) {
  %374 = fn (%var_3697: Tensor[(8, 2, 8), float32], %var_3719: Tensor[(637), float32]) -> (Tensor[(8, 2, 8), float32], Tensor[(1, 14, 9), float64], Tensor[(675), uint8], Tensor[(637), float32], Tensor[(11, 1), float32], Tensor[(11), float32]) {
    %361 = cast(%var_3697, dtype="float32") /* ty=Tensor[(8, 2, 8), float32] */;
    %362 = @func_3010() /* ty=(Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(1, 126), float64]) */;
    %363 = cast(%var_3719, dtype="float32") /* ty=Tensor[(637), float32] */;
    %364 = %362.1;
    %365 = cast(%364, dtype="float64") /* ty=Tensor[(1, 14, 9), float64] */;
    %366 = reshape(%363, newshape=[637]) /* ty=Tensor[(637), float32] */;
    %367 = reshape(%365, newshape=[21, 6]) /* ty=Tensor[(21, 6), float64] */;
    %368 = @func_3607(%366, %367) /* ty=(Tensor[(44), uint64], Tensor[(7, 13, 7), float32], Tensor[(637), float32], Tensor[(675), uint8], Tensor[(21, 6), float64]) */;
    %369 = cast(meta[relay.Constant][15] /* ty=Tensor[(11), float32] */, dtype="float32") /* ty=Tensor[(11), float32] */;
    %370 = reshape(%369, newshape=[11, 1]) /* ty=Tensor[(11, 1), float32] */;
    %371 = sigmoid(%361) /* ty=Tensor[(8, 2, 8), float32] */;
    %372 = %368.3;
    %373 = @func_383(%370) /* ty=Tensor[(11, 1), float32] */;
    (%371, %364, %372, %var_3719, %373, meta[relay.Constant][15] /* ty=Tensor[(11), float32] */)
  };
  %374(%var_3727, %var_3728) /* ty=(Tensor[(8, 2, 8), float32], Tensor[(1, 14, 9), float64], Tensor[(675), uint8], Tensor[(637), float32], Tensor[(11, 1), float32], Tensor[(11), float32]) */
}

def @func_5242(%var_5240: Tensor[(1512), float64]) -> (Tensor[(9, ?, 10), int64], Tensor[(1512), float64], Tensor[(12, 14, 9), uint16], Tensor[(1, 126), float64]) {
  @func_5239(%var_5240) /* ty=(Tensor[(9, ?, 10), int64], Tensor[(1512), float64], Tensor[(12, 14, 9), uint16], Tensor[(1, 126), float64]) */
}

def @func_3150(%var_3144: Tensor[(44), uint64]) -> Tensor[(44), int64] {
  %375 = @func_3010() /* ty=(Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(1, 126), float64]) */;
  %376 = %375.0;
  %377 = cast(%var_3144, dtype="int64") /* ty=Tensor[(44), int64] */;
  %378 = shape_of(%376, dtype="int32") /* ty=Tensor[(1), int32] */;
  %379 = cast(%376, dtype="int64") /* ty=Tensor[(44), int64] */;
  %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?), int64] */;
  minimum(%379, %380) /* ty=Tensor[(44), int64] */
}

def @func_5668() -> (Tensor[(1, 126), float64], Tensor[(44), uint64]) {
  %384 = fn () -> (Tensor[(1, 126), float64], Tensor[(44), uint64]) {
    %381 = @func_4706() /* ty=(Tensor[(1, 126), float64],) */;
    %382 = %381.0;
    %383 = @func_4790() /* ty=Tensor[(44), uint64] */;
    (%382, %383)
  };
  %384() /* ty=(Tensor[(1, 126), float64], Tensor[(44), uint64]) */
}

def @func_4896(%var_4894: Tensor[(13, 5, 11), float64]) -> Tensor[(13, 5, 11), float64] {
  @func_4893(%var_4894) /* ty=Tensor[(13, 5, 11), float64] */
}

def @func_440(%var_437: Tensor[(9, 5, 15), uint8], %var_438: Tensor[(9, 5, 15), uint8], %var_439: Tensor[(384), float64]) -> (Tensor[(9, 5, 15), uint8], Tensor[(3, 10, 8), bool], Tensor[(240), int8], Tensor[(384), float64], Tensor[(8, 6, 8), float64]) {
  @func_435(%var_437, %var_438, %var_439) /* ty=(Tensor[(9, 5, 15), uint8], Tensor[(3, 10, 8), bool], Tensor[(240), int8], Tensor[(384), float64], Tensor[(8, 6, 8), float64]) */
}

def @func_2529(%var_2527: Tensor[(44), uint64], %var_2528: Tensor[(126), float64]) -> (Tensor[(44), bool], Tensor[(2, 2, 11), uint64], Tensor[(637), float32], Tensor[(675), uint8], Tensor[(126), float64], Tensor[(2, 2, 11), uint64]) {
  %405 = fn (%var_2464: Tensor[(44), uint64], %var_2501: Tensor[(126), float64]) -> (Tensor[(44), bool], Tensor[(2, 2, 11), uint64], Tensor[(637), float32], Tensor[(675), uint8], Tensor[(126), float64], Tensor[(2, 2, 11), uint64]) {
    %385 = @func_2419() /* ty=(Tensor[(9, ?, 10), int64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64]) */;
    %386 = %385.2;
    %387 = cast(%var_2464, dtype="bool") /* ty=Tensor[(44), bool] */;
    %388 = shape_of(%386, dtype="int32") /* ty=Tensor[(1), int32] */;
    %389 = cast(%386, dtype="bool") /* ty=Tensor[(44), bool] */;
    %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?), bool] */;
    %391 = cast(meta[relay.Constant][16] /* ty=Tensor[(637), float32] */, dtype="float32") /* ty=Tensor[(637), float32] */;
    %392 = cast(meta[relay.Constant][17] /* ty=Tensor[(675), uint8] */, dtype="uint8") /* ty=Tensor[(675), uint8] */;
    %393 = cast(%var_2501, dtype="float64") /* ty=Tensor[(126), float64] */;
    %394 = reshape(%391, newshape=[7, 13, 7]) /* ty=Tensor[(7, 13, 7), float32] */;
    %395 = reshape(%392, newshape=[5, 135]) /* ty=Tensor[(5, 135), uint8] */;
    %396 = reshape(%393, newshape=[126]) /* ty=Tensor[(126), float64] */;
    %397 = @func_1638(%394, %395, %396) /* ty=(Tensor[(7, 13, 7), float32], Tensor[(5, 135), uint8], Tensor[(24, 16), float64], Tensor[(8, 6, 8), float64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(126), float64]) */;
    %398 = cast(%var_2464, dtype="uint64") /* ty=Tensor[(44), uint64] */;
    %399 = cast(%var_2464, dtype="uint64") /* ty=Tensor[(44), uint64] */;
    %400 = reshape(%398, newshape=[2, 2, 11]) /* ty=Tensor[(2, 2, 11), uint64] */;
    %401 = reshape(%399, newshape=[2, 2, 11]) /* ty=Tensor[(2, 2, 11), uint64] */;
    %402 = not_equal(%389, %390) /* ty=Tensor[(44), bool] */;
    %403 = %397.4;
    %404 = @func_1552(%400, %401) /* ty=Tensor[(2, 2, 11), uint64] */;
    (%402, %403, meta[relay.Constant][16] /* ty=Tensor[(637), float32] */, meta[relay.Constant][17] /* ty=Tensor[(675), uint8] */, %var_2501, %404)
  };
  %405(%var_2527, %var_2528) /* ty=(Tensor[(44), bool], Tensor[(2, 2, 11), uint64], Tensor[(637), float32], Tensor[(675), uint8], Tensor[(126), float64], Tensor[(2, 2, 11), uint64]) */
}

def @func_193(%var_186: Tensor[(8, 6, 8), float64]) -> Tensor[(8, 6, 8), float64] {
  %406 = cast(%var_186, dtype="float64") /* ty=Tensor[(8, 6, 8), float64] */;
  cos(%406) /* ty=Tensor[(8, 6, 8), float64] */
}

def @func_6384() -> Tensor[(1, 126), float64] {
  @func_5037() /* ty=Tensor[(1, 126), float64] */
}

def @func_6364(%var_6362: Tensor[(44), uint64]) -> (Tensor[(11, 13, 3), float64], Tensor[(?, 126), float32], Tensor[(429), bool], Tensor[(1, 126), float64], Tensor[(1, 126), float64], Tensor[(1, 126), float32], Tensor[(1, 14, 9), float64], Tensor[(44), int64], Tensor[(44), uint64], Tensor[(?, 126), float64]) {
  @func_6361(%var_6362) /* ty=(Tensor[(11, 13, 3), float64], Tensor[(?, 126), float32], Tensor[(429), bool], Tensor[(1, 126), float64], Tensor[(1, 126), float64], Tensor[(1, 126), float32], Tensor[(1, 14, 9), float64], Tensor[(44), int64], Tensor[(44), uint64], Tensor[(?, 126), float64]) */
}

def @func_4165() -> (Tensor[(14, 126), uint64],) {
  @func_4163() /* ty=(Tensor[(14, 126), uint64],) */
}

def @func_3500() -> Tensor[(1, 14, 9), float64] {
  %407 = @func_3010() /* ty=(Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(1, 126), float64]) */;
  %407.1
}

def @func_6228(%var_6221: Tensor[(504, 2), int32]) -> (Tensor[(44), uint64], Tensor[(16, 7, 9), bool], Tensor[(504, 2), int32]) {
  %408 = @func_3010() /* ty=(Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(1, 126), float64]) */;
  %409 = cast(%var_6221, dtype="int32") /* ty=Tensor[(504, 2), int32] */;
  %410 = reshape(%409, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), int32] */;
  %411 = @func_5422(%410) /* ty=(Tensor[(16, 7, 9), bool],) */;
  %412 = %408.0;
  %413 = %411.0;
  (%412, %413, %var_6221)
}

def @func_1039(%var_1037: Tensor[(1, 14, 9), float64]) -> Tensor[(1, 14, 9), float64] {
  @func_1036(%var_1037) /* ty=Tensor[(1, 14, 9), float64] */
}

def @func_6000() -> (Tensor[(1, 126), float64],) {
  %415 = fn () -> (Tensor[(1, 126), float64],) {
    %414 = @func_3060() /* ty=Tensor[(1, 126), float64] */;
    (%414,)
  };
  %415() /* ty=(Tensor[(1, 126), float64],) */
}

def @func_1880(%var_1879: Tensor[(11, 13, 3), float64]) -> (Tensor[(11, 13, 3), bool], Tensor[(11, 13, 3), float64]) {
  %425 = fn (%var_1863: Tensor[(11, 13, 3), float64]) -> (Tensor[(11, 13, 3), bool], Tensor[(11, 13, 3), float64]) {
    %416 = cast(meta[relay.Constant][18] /* ty=Tensor[(11, 13, 3), float64] */, dtype="float64") /* ty=Tensor[(11, 13, 3), float64] */;
    %417 = sigmoid(%416) /* ty=Tensor[(11, 13, 3), float64] */;
    %418 = cast(%var_1863, dtype="bool") /* ty=Tensor[(11, 13, 3), bool] */;
    %419 = shape_of(%417, dtype="int32") /* ty=Tensor[(3), int32] */;
    %420 = cast(%417, dtype="bool") /* ty=Tensor[(11, 13, 3), bool] */;
    %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %422 = cast(meta[relay.Constant][18] /* ty=Tensor[(11, 13, 3), float64] */, dtype="float64") /* ty=Tensor[(11, 13, 3), float64] */;
    %423 = less_equal(%420, %421) /* ty=Tensor[(11, 13, 3), bool] */;
    %424 = cos(%422) /* ty=Tensor[(11, 13, 3), float64] */;
    (%423, %424)
  };
  %425(%var_1879) /* ty=(Tensor[(11, 13, 3), bool], Tensor[(11, 13, 3), float64]) */
}

def @func_1555(%var_1553: Tensor[(2, 2, 11), uint64], %var_1554: Tensor[(2, 2, 11), uint64]) -> Tensor[(2, 2, 11), uint64] {
  %430 = fn (%var_1546: Tensor[(2, 2, 11), uint64], %var_1547: Tensor[(2, 2, 11), uint64]) -> Tensor[(2, 2, 11), uint64] {
    %426 = cast(%var_1547, dtype="uint64") /* ty=Tensor[(2, 2, 11), uint64] */;
    %427 = shape_of(%var_1546, dtype="int32") /* ty=Tensor[(3), int32] */;
    %428 = cast(%var_1546, dtype="uint64") /* ty=Tensor[(2, 2, 11), uint64] */;
    %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    minimum(%428, %429) /* ty=Tensor[(2, 2, 11), uint64] */
  };
  %430(%var_1553, %var_1554) /* ty=Tensor[(2, 2, 11), uint64] */
}

def @func_6992(%var_6990: Tensor[(4, 126), float32]) -> (Tensor[(4, 126), uint64],) {
  @func_6989(%var_6990) /* ty=(Tensor[(4, 126), uint64],) */
}

def @func_6231(%var_6229: Tensor[(504, 2), int32]) -> (Tensor[(44), uint64], Tensor[(16, 7, 9), bool], Tensor[(504, 2), int32]) {
  @func_6228(%var_6229) /* ty=(Tensor[(44), uint64], Tensor[(16, 7, 9), bool], Tensor[(504, 2), int32]) */
}

def @func_6755() -> (Tensor[(1, 14, 9), float64],) {
  %431 = @func_3010() /* ty=(Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(1, 126), float64]) */;
  %432 = %431.1;
  (%432,)
}

def @func_386(%var_384: Tensor[(11, 1), float32]) -> Tensor[(11, 1), float32] {
  @func_383(%var_384) /* ty=Tensor[(11, 1), float32] */
}

def @func_6616() -> Tensor[(2, 2, 11), bool] {
  %433 = @func_4809() /* ty=Tensor[(2, 2, 11), uint64] */;
  %434 = cast(meta[relay.Constant][19] /* ty=Tensor[(2, 2, 11), uint64] */, dtype="int16") /* ty=Tensor[(2, 2, 11), int16] */;
  %435 = shape_of(%433, dtype="int32") /* ty=Tensor[(3), int32] */;
  %436 = cast(%433, dtype="int16") /* ty=Tensor[(2, 2, 11), int16] */;
  %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %438 = logical_xor(%436, %437) /* ty=Tensor[(2, 2, 11), int16] */;
  %439 = cast(meta[relay.Constant][19] /* ty=Tensor[(2, 2, 11), uint64] */, dtype="bool") /* ty=Tensor[(2, 2, 11), bool] */;
  %440 = shape_of(%438, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%438, dtype="bool") /* ty=Tensor[(2, 2, 11), bool] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%441, %442) /* ty=Tensor[(2, 2, 11), bool] */
}

def @func_6556(%var_6505: Tensor[(1008), bool], %var_6519: Tensor[(1008), bool]) -> (Tensor[(44), uint64], Tensor[(126), float64], Tensor[(126), float64], Tensor[(48, 8), uint16], Tensor[(240), int8], Tensor[(8, 6, 8), int64], Tensor[(1008), bool], Tensor[(44), int64], Tensor[(1, 126), float64], Tensor[(9, ?, 10), float64]) {
  %443 = @func_3038() /* ty=(Tensor[(44), uint64],) */;
  %444 = @func_4643() /* ty=(Tensor[(1, 126), float64], Tensor[(126), float64], Tensor[(44), uint64]) */;
  %445 = cast(meta[relay.Constant][20] /* ty=Tensor[(48, 8), uint16] */, dtype="uint16") /* ty=Tensor[(48, 8), uint16] */;
  %446 = cast(meta[relay.Constant][21] /* ty=Tensor[(240), int8] */, dtype="int8") /* ty=Tensor[(240), int8] */;
  %447 = cast(%var_6505, dtype="bool") /* ty=Tensor[(1008), bool] */;
  %448 = reshape(%445, newshape=[192, 2]) /* ty=Tensor[(192, 2), uint16] */;
  %449 = reshape(%446, newshape=[240]) /* ty=Tensor[(240), int8] */;
  %450 = reshape(%447, newshape=[8, 126]) /* ty=Tensor[(8, 126), bool] */;
  %451 = @func_4374(%448, %449, %450) /* ty=(Tensor[(1, 126), float32], Tensor[(675), uint8], Tensor[(637), float32], Tensor[(6, 16, 4), uint16], uint16, Tensor[(192, 2), uint16], Tensor[(32, 4), int16], Tensor[(126), float64], Tensor[(?, 126), uint8], Tensor[(?, 126), float64], Tensor[(11), float32], Tensor[(240), int8], Tensor[(1, 126), float32], Tensor[(8, 126), uint8], Tensor[(5, 135), uint8]) */;
  %452 = @func_5987() /* ty=(Tensor[(2, 2, 11), uint64], Tensor[(8, 6, 8), int64], Tensor[(8, 126), uint64]) */;
  %453 = cast(%var_6519, dtype="bool") /* ty=Tensor[(1008), bool] */;
  %454 = shape_of(%var_6505, dtype="int32") /* ty=Tensor[(1), int32] */;
  %455 = cast(%var_6505, dtype="bool") /* ty=Tensor[(1008), bool] */;
  %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?), bool] */;
  %457 = %443.0;
  %458 = cast(%457, dtype="uint64") /* ty=Tensor[(44), uint64] */;
  %459 = reshape(%458, newshape=[44]) /* ty=Tensor[(44), uint64] */;
  %460 = @func_3150(%459) /* ty=Tensor[(44), int64] */;
  %461 = cast(%460, dtype="uint64") /* ty=Tensor[(44), uint64] */;
  %462 = @func_5351() /* ty=Tensor[(1, 126), float64] */;
  %463 = cast(%462, dtype="float64") /* ty=Tensor[(1, 126), float64] */;
  %464 = reshape(%461, newshape=[44]) /* ty=Tensor[(44), uint64] */;
  %465 = reshape(%463, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %466 = @func_3395(%464, %465) /* ty=(Tensor[(9, ?, 10), float64], Tensor[(44), int64], Tensor[(44), uint64], Tensor[(637), float32], Tensor[(126), float64], Tensor[(1, 126), float64]) */;
  %467 = %444.1;
  %468 = %451.7;
  %469 = %452.1;
  %470 = logical_and(%455, %456) /* ty=Tensor[(1008), bool] */;
  %471 = %466.0;
  (%457, %467, %468, meta[relay.Constant][20] /* ty=Tensor[(48, 8), uint16] */, meta[relay.Constant][21] /* ty=Tensor[(240), int8] */, %469, %470, %460, %462, %471)
}

def @func_5961() -> (Tensor[(14, 126), uint64], Tensor[(1, 126), float32]) {
  %475 = fn () -> (Tensor[(14, 126), uint64], Tensor[(1, 126), float32]) {
    %472 = @func_4837() /* ty=(Tensor[(14, 126), uint64],) */;
    %473 = %472.0;
    %474 = @func_4019() /* ty=Tensor[(1, 126), float32] */;
    (%473, %474)
  };
  %475() /* ty=(Tensor[(14, 126), uint64], Tensor[(1, 126), float32]) */
}

def @func_6989(%var_6982: Tensor[(4, 126), float32]) -> (Tensor[(4, 126), uint64],) {
  %476 = @func_4019() /* ty=Tensor[(1, 126), float32] */;
  %477 = cast(%476, dtype="uint64") /* ty=Tensor[(1, 126), uint64] */;
  %478 = cast(%var_6982, dtype="uint64") /* ty=Tensor[(4, 126), uint64] */;
  %479 = maximum(%477, %478) /* ty=Tensor[(4, 126), uint64] */;
  (%479,)
}

def @func_6636() -> Tensor[(44), uint64] {
  @func_6634() /* ty=Tensor[(44), uint64] */
}

def @func_3340() -> (Tensor[(1, 126), float64],) {
  @func_3338() /* ty=(Tensor[(1, 126), float64],) */
}

def @func_4100() -> (Tensor[(1, 126), float64], Tensor[(1, 126), float64], Tensor[(1, 126), float64]) {
  %486 = fn () -> (Tensor[(1, 126), float64], Tensor[(1, 126), float64], Tensor[(1, 126), float64]) {
    %480 = @func_3060() /* ty=Tensor[(1, 126), float64] */;
    %481 = cast(%480, dtype="float64") /* ty=Tensor[(1, 126), float64] */;
    %482 = cast(%480, dtype="float64") /* ty=Tensor[(1, 126), float64] */;
    %483 = log2(%481) /* ty=Tensor[(1, 126), float64] */;
    %484 = acosh(%482) /* ty=Tensor[(1, 126), float64] */;
    %485 = @func_4046() /* ty=Tensor[(1, 126), float64] */;
    (%483, %484, %485)
  };
  %486() /* ty=(Tensor[(1, 126), float64], Tensor[(1, 126), float64], Tensor[(1, 126), float64]) */
}

def @func_3421() -> Tensor[(1, 126), float32] {
  @func_3419() /* ty=Tensor[(1, 126), float32] */
}

def @func_6386() -> Tensor[(1, 126), float64] {
  @func_6384() /* ty=Tensor[(1, 126), float64] */
}

def @func_5864() -> (Tensor[(1, 126), float64],) {
  %487 = @func_3667() /* ty=(Tensor[(1, 126), float64],) */;
  %488 = %487.0;
  (%488,)
}

def @func_4073(%var_4072: Tensor[(637), float32]) -> (Tensor[(1, 126), float64], Tensor[(5, 135), uint8], Tensor[(637), float32], Tensor[(675), uint8]) {
  %498 = fn (%var_4061: Tensor[(637), float32]) -> (Tensor[(1, 126), float64], Tensor[(5, 135), uint8], Tensor[(637), float32], Tensor[(675), uint8]) {
    %489 = cast(%var_4061, dtype="float32") /* ty=Tensor[(637), float32] */;
    %490 = cast(meta[relay.Constant][22] /* ty=Tensor[(675), uint8] */, dtype="uint8") /* ty=Tensor[(675), uint8] */;
    %491 = @func_4046() /* ty=Tensor[(1, 126), float64] */;
    %492 = cast(%491, dtype="float64") /* ty=Tensor[(1, 126), float64] */;
    %493 = reshape(%489, newshape=[7, 13, 7]) /* ty=Tensor[(7, 13, 7), float32] */;
    %494 = reshape(%490, newshape=[5, 135]) /* ty=Tensor[(5, 135), uint8] */;
    %495 = reshape(%492, newshape=[126]) /* ty=Tensor[(126), float64] */;
    %496 = @func_1638(%493, %494, %495) /* ty=(Tensor[(7, 13, 7), float32], Tensor[(5, 135), uint8], Tensor[(24, 16), float64], Tensor[(8, 6, 8), float64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(126), float64]) */;
    %497 = %496.1;
    (%491, %497, %var_4061, meta[relay.Constant][22] /* ty=Tensor[(675), uint8] */)
  };
  %498(%var_4072) /* ty=(Tensor[(1, 126), float64], Tensor[(5, 135), uint8], Tensor[(637), float32], Tensor[(675), uint8]) */
}

def @func_5388(%var_5380: Tensor[(2, 9, 4), float64], %var_5381: Tensor[(2, 9, 4), float64]) -> (Tensor[(2, 9, 4), float64],) {
  %499 = cast(%var_5381, dtype="float64") /* ty=Tensor[(2, 9, 4), float64] */;
  %500 = shape_of(%var_5380, dtype="int32") /* ty=Tensor[(3), int32] */;
  %501 = cast(%var_5380, dtype="float64") /* ty=Tensor[(2, 9, 4), float64] */;
  %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %503 = floor_divide(%501, %502) /* ty=Tensor[(2, 9, 4), float64] */;
  (%503,)
}

def @func_4777() -> (Tensor[(1, 126), float64],) {
  %509 = fn () -> (Tensor[(1, 126), float64],) {
    %504 = @func_3891() /* ty=Tensor[(1, 126), float32] */;
    %505 = cast(%504, dtype="float32") /* ty=Tensor[(1, 126), float32] */;
    %506 = rsqrt(%505) /* ty=Tensor[(1, 126), float32] */;
    %507 = cast(%506, dtype="float64") /* ty=Tensor[(1, 126), float64] */;
    %508 = sin(%507) /* ty=Tensor[(1, 126), float64] */;
    (%508,)
  };
  %509() /* ty=(Tensor[(1, 126), float64],) */
}

def @func_6663() -> Tensor[(14, 126), uint64] {
  %511 = fn () -> Tensor[(14, 126), uint64] {
    %510 = @func_4163() /* ty=(Tensor[(14, 126), uint64],) */;
    %510.0
  };
  %511() /* ty=Tensor[(14, 126), uint64] */
}

def @func_5604() -> Tensor[(1, 126), float64] {
  %512 = fn () -> Tensor[(1, 126), float64] {
    @func_5351() /* ty=Tensor[(1, 126), float64] */
  };
  %512() /* ty=Tensor[(1, 126), float64] */
}

def @func_2788(%var_2787: Tensor[(4, 1, 9), uint8]) -> (Tensor[(4, 6, 9), uint8], Tensor[(11, 13, 3), bool], Tensor[(429), float64]) {
  %520 = fn (%var_2762: Tensor[(4, 1, 9), uint8]) -> (Tensor[(4, 6, 9), uint8], Tensor[(11, 13, 3), bool], Tensor[(429), float64]) {
    %513 = cast(%var_2762, dtype="uint8") /* ty=Tensor[(4, 1, 9), uint8] */;
    %514 = cast(meta[relay.Constant][23] /* ty=Tensor[(4, 6, 9), uint8] */, dtype="uint8") /* ty=Tensor[(4, 6, 9), uint8] */;
    %515 = cast(meta[relay.Constant][24] /* ty=Tensor[(429), float64] */, dtype="float64") /* ty=Tensor[(429), float64] */;
    %516 = reshape(%515, newshape=[11, 13, 3]) /* ty=Tensor[(11, 13, 3), float64] */;
    %517 = @func_1878(%516) /* ty=(Tensor[(11, 13, 3), bool], Tensor[(11, 13, 3), float64]) */;
    %518 = left_shift(%513, %514) /* ty=Tensor[(4, 6, 9), uint8] */;
    %519 = %517.0;
    (%518, %519, meta[relay.Constant][24] /* ty=Tensor[(429), float64] */)
  };
  %520(%var_2787) /* ty=(Tensor[(4, 6, 9), uint8], Tensor[(11, 13, 3), bool], Tensor[(429), float64]) */
}

def @func_3248(%var_3245: Tensor[(9, 14, 10), int64], %var_3246: Tensor[(11), float32], %var_3247: Tensor[(13, 33), float64]) -> (Tensor[(9, 14, 10), int16], Tensor[(11, 1), float32], Tensor[(11), float32], Tensor[(9, 14, 10), bool], Tensor[(11, 13, 3), float64], Tensor[(13, 33), float64]) {
  @func_3243(%var_3245, %var_3246, %var_3247) /* ty=(Tensor[(9, 14, 10), int16], Tensor[(11, 1), float32], Tensor[(11), float32], Tensor[(9, 14, 10), bool], Tensor[(11, 13, 3), float64], Tensor[(13, 33), float64]) */
}

def @func_3010() -> (Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(1, 126), float64]) {
  %521 = @func_2419() /* ty=(Tensor[(9, ?, 10), int64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64]) */;
  %522 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 126), float64] */, dtype="float64") /* ty=Tensor[(1, 126), float64] */;
  %523 = reshape(%522, newshape=[1, 14, 9]) /* ty=Tensor[(1, 14, 9), float64] */;
  %524 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 126), float64] */, dtype="float64") /* ty=Tensor[(1, 126), float64] */;
  %525 = %521.2;
  %526 = @func_1036(%523) /* ty=Tensor[(1, 14, 9), float64] */;
  %527 = sinh(%524) /* ty=Tensor[(1, 126), float64] */;
  (%525, %526, %527)
}

def @func_3398(%var_3396: Tensor[(44), uint64], %var_3397: Tensor[(126), float64]) -> (Tensor[(9, ?, 10), float64], Tensor[(44), int64], Tensor[(44), uint64], Tensor[(637), float32], Tensor[(126), float64], Tensor[(1, 126), float64]) {
  %544 = fn (%var_3377: Tensor[(44), uint64], %var_3384: Tensor[(126), float64]) -> (Tensor[(9, ?, 10), float64], Tensor[(44), int64], Tensor[(44), uint64], Tensor[(637), float32], Tensor[(126), float64], Tensor[(1, 126), float64]) {
    %528 = @func_2945() /* ty=Tensor[(9, ?, 10), int64] */;
    %529 = cast(%528, dtype="float32") /* ty=Tensor[(9, ?, 10), float32] */;
    %530 = rsqrt(%529) /* ty=Tensor[(9, ?, 10), float32] */;
    %531 = cast(%530, dtype="float64") /* ty=Tensor[(9, ?, 10), float64] */;
    %532 = cast(%var_3377, dtype="uint64") /* ty=Tensor[(44), uint64] */;
    %533 = reshape(%532, newshape=[44]) /* ty=Tensor[(44), uint64] */;
    %534 = cast(%var_3377, dtype="uint64") /* ty=Tensor[(44), uint64] */;
    %535 = cast(%var_3384, dtype="float64") /* ty=Tensor[(126), float64] */;
    %536 = reshape(%534, newshape=[44]) /* ty=Tensor[(44), uint64] */;
    %537 = reshape(%535, newshape=[126]) /* ty=Tensor[(126), float64] */;
    %538 = @func_2526(%536, %537) /* ty=(Tensor[(44), bool], Tensor[(2, 2, 11), uint64], Tensor[(637), float32], Tensor[(675), uint8], Tensor[(126), float64], Tensor[(2, 2, 11), uint64]) */;
    %539 = @func_3010() /* ty=(Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(1, 126), float64]) */;
    %540 = sigmoid(%531) /* ty=Tensor[(9, ?, 10), float64] */;
    %541 = @func_3150(%533) /* ty=Tensor[(44), int64] */;
    %542 = %538.2;
    %543 = %539.2;
    (%540, %541, %var_3377, %542, %var_3384, %543)
  };
  %544(%var_3396, %var_3397) /* ty=(Tensor[(9, ?, 10), float64], Tensor[(44), int64], Tensor[(44), uint64], Tensor[(637), float32], Tensor[(126), float64], Tensor[(1, 126), float64]) */
}

def @func_4019() -> Tensor[(1, 126), float32] {
  @func_3419() /* ty=Tensor[(1, 126), float32] */
}

def @func_6560(%var_6558: Tensor[(1008), bool], %var_6559: Tensor[(1008), bool]) -> (Tensor[(44), uint64], Tensor[(126), float64], Tensor[(126), float64], Tensor[(48, 8), uint16], Tensor[(240), int8], Tensor[(8, 6, 8), int64], Tensor[(1008), bool], Tensor[(44), int64], Tensor[(1, 126), float64], Tensor[(9, ?, 10), float64]) {
  @func_6556(%var_6558, %var_6559) /* ty=(Tensor[(44), uint64], Tensor[(126), float64], Tensor[(126), float64], Tensor[(48, 8), uint16], Tensor[(240), int8], Tensor[(8, 6, 8), int64], Tensor[(1008), bool], Tensor[(44), int64], Tensor[(1, 126), float64], Tensor[(9, ?, 10), float64]) */
}

def @func_4666() -> (Tensor[(1, 126), float64],) {
  %547 = fn () -> (Tensor[(1, 126), float64],) {
    %545 = @func_4643() /* ty=(Tensor[(1, 126), float64], Tensor[(126), float64], Tensor[(44), uint64]) */;
    %546 = %545.0;
    (%546,)
  };
  %547() /* ty=(Tensor[(1, 126), float64],) */
}

def @func_5866() -> (Tensor[(1, 126), float64],) {
  @func_5864() /* ty=(Tensor[(1, 126), float64],) */
}

def @func_1642(%var_1639: Tensor[(7, 13, 7), float32], %var_1640: Tensor[(5, 135), uint8], %var_1641: Tensor[(126), float64]) -> (Tensor[(7, 13, 7), float32], Tensor[(5, 135), uint8], Tensor[(24, 16), float64], Tensor[(8, 6, 8), float64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(126), float64]) {
  %568 = fn (%var_1571: Tensor[(7, 13, 7), float32], %var_1575: Tensor[(5, 135), uint8], %var_1602: Tensor[(126), float64]) -> (Tensor[(7, 13, 7), float32], Tensor[(5, 135), uint8], Tensor[(24, 16), float64], Tensor[(8, 6, 8), float64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(126), float64]) {
    %548 = cast(%var_1571, dtype="float32") /* ty=Tensor[(7, 13, 7), float32] */;
    %549 = cast(%var_1575, dtype="uint8") /* ty=Tensor[(5, 135), uint8] */;
    %550 = cast(%var_1575, dtype="uint8") /* ty=Tensor[(5, 135), uint8] */;
    %551 = cast(meta[relay.Constant][26] /* ty=Tensor[(24, 16), float64] */, dtype="float64") /* ty=Tensor[(24, 16), float64] */;
    %552 = reshape(%549, newshape=[9, 5, 15]) /* ty=Tensor[(9, 5, 15), uint8] */;
    %553 = reshape(%550, newshape=[9, 5, 15]) /* ty=Tensor[(9, 5, 15), uint8] */;
    %554 = reshape(%551, newshape=[384]) /* ty=Tensor[(384), float64] */;
    %555 = @func_435(%552, %553, %554) /* ty=(Tensor[(9, 5, 15), uint8], Tensor[(3, 10, 8), bool], Tensor[(240), int8], Tensor[(384), float64], Tensor[(8, 6, 8), float64]) */;
    %556 = %555.4;
    %557 = cast(%556, dtype="float64") /* ty=Tensor[(8, 6, 8), float64] */;
    %558 = cast(meta[relay.Constant][27] /* ty=Tensor[(44), uint64] */, dtype="uint64") /* ty=Tensor[(44), uint64] */;
    %559 = cast(meta[relay.Constant][27] /* ty=Tensor[(44), uint64] */, dtype="uint64") /* ty=Tensor[(44), uint64] */;
    %560 = reshape(%558, newshape=[2, 2, 11]) /* ty=Tensor[(2, 2, 11), uint64] */;
    %561 = reshape(%559, newshape=[2, 2, 11]) /* ty=Tensor[(2, 2, 11), uint64] */;
    %562 = cast(%var_1602, dtype="float64") /* ty=Tensor[(126), float64] */;
    %563 = reshape(%562, newshape=[1, 14, 9]) /* ty=Tensor[(1, 14, 9), float64] */;
    %564 = acosh(%548) /* ty=Tensor[(7, 13, 7), float32] */;
    %565 = atanh(%557) /* ty=Tensor[(8, 6, 8), float64] */;
    %566 = @func_1552(%560, %561) /* ty=Tensor[(2, 2, 11), uint64] */;
    %567 = @func_1036(%563) /* ty=Tensor[(1, 14, 9), float64] */;
    (%564, %var_1575, meta[relay.Constant][26] /* ty=Tensor[(24, 16), float64] */, %565, %566, meta[relay.Constant][27] /* ty=Tensor[(44), uint64] */, %567, %var_1602)
  };
  %568(%var_1639, %var_1640, %var_1641) /* ty=(Tensor[(7, 13, 7), float32], Tensor[(5, 135), uint8], Tensor[(24, 16), float64], Tensor[(8, 6, 8), float64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(126), float64]) */
}

def @func_2419() -> (Tensor[(9, ?, 10), int64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64]) {
  %569 = cast(meta[relay.Constant][28] /* ty=Tensor[(9, 1, 10), float32] */, dtype="float32") /* ty=Tensor[(9, 1, 10), float32] */;
  %570 = tan(%569) /* ty=Tensor[(9, 1, 10), float32] */;
  %571 = cast(meta[relay.Constant][28] /* ty=Tensor[(9, 1, 10), float32] */, dtype="int64") /* ty=Tensor[(9, 1, 10), int64] */;
  %572 = shape_of(%570, dtype="int32") /* ty=Tensor[(3), int32] */;
  %573 = cast(%570, dtype="int64") /* ty=Tensor[(9, 1, 10), int64] */;
  %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %575 = cast(meta[relay.Constant][29] /* ty=Tensor[(44), uint64] */, dtype="uint64") /* ty=Tensor[(44), uint64] */;
  %576 = cast(meta[relay.Constant][29] /* ty=Tensor[(44), uint64] */, dtype="uint64") /* ty=Tensor[(44), uint64] */;
  %577 = reshape(%575, newshape=[2, 2, 11]) /* ty=Tensor[(2, 2, 11), uint64] */;
  %578 = reshape(%576, newshape=[2, 2, 11]) /* ty=Tensor[(2, 2, 11), uint64] */;
  %579 = minimum(%573, %574) /* ty=Tensor[(9, ?, 10), int64] */;
  %580 = @func_1552(%577, %578) /* ty=Tensor[(2, 2, 11), uint64] */;
  (%579, %580, meta[relay.Constant][29] /* ty=Tensor[(44), uint64] */)
}

def @func_4893(%var_4890: Tensor[(13, 5, 11), float64]) -> Tensor[(13, 5, 11), float64] {
  %581 = cast(%var_4890, dtype="float64") /* ty=Tensor[(13, 5, 11), float64] */;
  cos(%581) /* ty=Tensor[(13, 5, 11), float64] */
}

def @func_5832(%var_5809: Tensor[(11, 126), float32]) -> (Tensor[(11, 126), float32],) {
  %582 = @func_3419() /* ty=Tensor[(1, 126), float32] */;
  %583 = cast(%582, dtype="bool") /* ty=Tensor[(1, 126), bool] */;
  %584 = cast(%var_5809, dtype="bool") /* ty=Tensor[(11, 126), bool] */;
  %585 = equal(%583, %584) /* ty=Tensor[(11, 126), bool] */;
  %586 = cast(%582, dtype="float32") /* ty=Tensor[(1, 126), float32] */;
  %587 = sigmoid(%586) /* ty=Tensor[(1, 126), float32] */;
  %588 = cast(%585, dtype="float32") /* ty=Tensor[(11, 126), float32] */;
  %589 = cast(%587, dtype="float32") /* ty=Tensor[(1, 126), float32] */;
  %590 = minimum(%588, %589) /* ty=Tensor[(11, 126), float32] */;
  (%590,)
}

def @func_4644() -> (Tensor[(1, 126), float64], Tensor[(126), float64], Tensor[(44), uint64]) {
  %599 = fn () -> (Tensor[(1, 126), float64], Tensor[(126), float64], Tensor[(44), uint64]) {
    %591 = @func_3338() /* ty=(Tensor[(1, 126), float64],) */;
    %592 = cast(meta[relay.Constant][30] /* ty=Tensor[(44), uint64] */, dtype="uint64") /* ty=Tensor[(44), uint64] */;
    %593 = %591.0;
    %594 = cast(%593, dtype="float64") /* ty=Tensor[(1, 126), float64] */;
    %595 = reshape(%592, newshape=[44]) /* ty=Tensor[(44), uint64] */;
    %596 = reshape(%594, newshape=[126]) /* ty=Tensor[(126), float64] */;
    %597 = @func_3395(%595, %596) /* ty=(Tensor[(9, ?, 10), float64], Tensor[(44), int64], Tensor[(44), uint64], Tensor[(637), float32], Tensor[(126), float64], Tensor[(1, 126), float64]) */;
    %598 = %597.4;
    (%593, %598, meta[relay.Constant][30] /* ty=Tensor[(44), uint64] */)
  };
  %599() /* ty=(Tensor[(1, 126), float64], Tensor[(126), float64], Tensor[(44), uint64]) */
}

def @func_3039() -> (Tensor[(44), uint64],) {
  %602 = fn () -> (Tensor[(44), uint64],) {
    %600 = @func_3010() /* ty=(Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(1, 126), float64]) */;
    %601 = %600.0;
    (%601,)
  };
  %602() /* ty=(Tensor[(44), uint64],) */
}

def @func_3243(%var_3204: Tensor[(9, 14, 10), int64], %var_3214: Tensor[(11), float32], %var_3238: Tensor[(13, 33), float64]) -> (Tensor[(9, 14, 10), int16], Tensor[(11, 1), float32], Tensor[(11), float32], Tensor[(9, 14, 10), bool], Tensor[(11, 13, 3), float64], Tensor[(13, 33), float64]) {
  %603 = @func_2945() /* ty=Tensor[(9, ?, 10), int64] */;
  %604 = cast(%603, dtype="int16") /* ty=Tensor[(9, ?, 10), int16] */;
  %605 = cast(%var_3204, dtype="int16") /* ty=Tensor[(9, 14, 10), int16] */;
  %606 = cast(%var_3214, dtype="float32") /* ty=Tensor[(11), float32] */;
  %607 = reshape(%606, newshape=[11, 1]) /* ty=Tensor[(11, 1), float32] */;
  %608 = cast(%var_3204, dtype="bool") /* ty=Tensor[(9, 14, 10), bool] */;
  %609 = cast(%603, dtype="bool") /* ty=Tensor[(9, ?, 10), bool] */;
  %610 = cast(%var_3238, dtype="float64") /* ty=Tensor[(13, 33), float64] */;
  %611 = reshape(%610, newshape=[11, 13, 3]) /* ty=Tensor[(11, 13, 3), float64] */;
  %612 = @func_1878(%611) /* ty=(Tensor[(11, 13, 3), bool], Tensor[(11, 13, 3), float64]) */;
  %613 = right_shift(%604, %605) /* ty=Tensor[(9, 14, 10), int16] */;
  %614 = @func_383(%607) /* ty=Tensor[(11, 1), float32] */;
  %615 = equal(%608, %609) /* ty=Tensor[(9, 14, 10), bool] */;
  %616 = %612.1;
  (%613, %614, %var_3214, %615, %616, %var_3238)
}

def @func_368(%var_300: Tensor[(3, 10, 8), int8], %var_301: Tensor[(3, 10, 8), int8], %var_321: Tensor[(384), float64], %var_362: Tensor[(3, 10, 8), int8]) -> (Tensor[(3, 10, 8), uint32], Tensor[(8, 6, 8), float64], Tensor[(384), float64], Tensor[(8, 6, 8), float64], Tensor[(3, 10, 8), float64], Tensor[(8, 6, 8), float64], Tensor[(8, 6, 8), float64], Tensor[(3, 10, 8), bool]) {
  %617 = cast(%var_301, dtype="int8") /* ty=Tensor[(3, 10, 8), int8] */;
  %618 = shape_of(%var_300, dtype="int32") /* ty=Tensor[(3), int32] */;
  %619 = cast(%var_300, dtype="int8") /* ty=Tensor[(3, 10, 8), int8] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %621 = subtract(%619, %620) /* ty=Tensor[(3, 10, 8), int8] */;
  %622 = cast(%621, dtype="uint32") /* ty=Tensor[(3, 10, 8), uint32] */;
  %623 = shape_of(%var_300, dtype="int32") /* ty=Tensor[(3), int32] */;
  %624 = cast(%var_300, dtype="uint32") /* ty=Tensor[(3, 10, 8), uint32] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %626 = cast(%var_321, dtype="float64") /* ty=Tensor[(384), float64] */;
  %627 = reshape(%626, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
  %628 = cast(%var_321, dtype="float64") /* ty=Tensor[(384), float64] */;
  %629 = reshape(%628, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
  %630 = cast(%var_300, dtype="uint32") /* ty=Tensor[(3, 10, 8), uint32] */;
  %631 = shape_of(%var_301, dtype="int32") /* ty=Tensor[(3), int32] */;
  %632 = cast(%var_301, dtype="uint32") /* ty=Tensor[(3, 10, 8), uint32] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %634 = add(%632, %633) /* ty=Tensor[(3, 10, 8), uint32] */;
  %635 = cast(%634, dtype="float64") /* ty=Tensor[(3, 10, 8), float64] */;
  %636 = cast(%var_321, dtype="float64") /* ty=Tensor[(384), float64] */;
  %637 = reshape(%636, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
  %638 = cast(%var_321, dtype="float64") /* ty=Tensor[(384), float64] */;
  %639 = reshape(%638, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
  %640 = cast(%var_362, dtype="bool") /* ty=Tensor[(3, 10, 8), bool] */;
  %641 = shape_of(%var_300, dtype="int32") /* ty=Tensor[(3), int32] */;
  %642 = cast(%var_300, dtype="bool") /* ty=Tensor[(3, 10, 8), bool] */;
  %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %644 = logical_xor(%624, %625) /* ty=Tensor[(3, 10, 8), uint32] */;
  %645 = @func_193(%627) /* ty=Tensor[(8, 6, 8), float64] */;
  %646 = @func_193(%629) /* ty=Tensor[(8, 6, 8), float64] */;
  %647 = sigmoid(%635) /* ty=Tensor[(3, 10, 8), float64] */;
  %648 = @func_193(%637) /* ty=Tensor[(8, 6, 8), float64] */;
  %649 = @func_193(%639) /* ty=Tensor[(8, 6, 8), float64] */;
  %650 = logical_and(%642, %643) /* ty=Tensor[(3, 10, 8), bool] */;
  (%644, %645, %var_321, %646, %647, %648, %649, %650)
}

def @func_1036(%var_1027: Tensor[(1, 14, 9), float64]) -> Tensor[(1, 14, 9), float64] {
  %651 = cast(%var_1027, dtype="float64") /* ty=Tensor[(1, 14, 9), float64] */;
  sin(%651) /* ty=Tensor[(1, 14, 9), float64] */
}

def @func_5737(%var_5735: uint32, %var_5736: Tensor[(12, 1, 2), uint32]) -> (Tensor[(12, 1, 2), uint32],) {
  %655 = fn (%var_5719: uint32, %var_5720: Tensor[(12, 1, 2), uint32]) -> (Tensor[(12, 1, 2), uint32],) {
    %652 = cast(%var_5719, dtype="uint32") /* ty=uint32 */;
    %653 = cast(%var_5720, dtype="uint32") /* ty=Tensor[(12, 1, 2), uint32] */;
    %654 = multiply(%652, %653) /* ty=Tensor[(12, 1, 2), uint32] */;
    (%654,)
  };
  %655(%var_5735, %var_5736) /* ty=(Tensor[(12, 1, 2), uint32],) */
}

def @main(%var_7015: Tensor[(2, 13, 9), float32]) -> (Tensor[(2, 13, 9), float32],) {
  %656 = cast(%var_7015, dtype="float32") /* ty=Tensor[(2, 13, 9), float32] */;
  %657 = acosh(%656) /* ty=Tensor[(2, 13, 9), float32] */;
  (%657,)
}

def @func_3669() -> (Tensor[(1, 126), float64],) {
  @func_3667() /* ty=(Tensor[(1, 126), float64],) */
}

def @func_3062() -> Tensor[(1, 126), float64] {
  @func_3060() /* ty=Tensor[(1, 126), float64] */
}

def @func_5037() -> Tensor[(1, 126), float64] {
  %658 = @func_4706() /* ty=(Tensor[(1, 126), float64],) */;
  %658.0
}

def @func_4000() -> Tensor[(1, 126), float64] {
  %659 = fn () -> Tensor[(1, 126), float64] {
    @func_3060() /* ty=Tensor[(1, 126), float64] */
  };
  %659() /* ty=Tensor[(1, 126), float64] */
}

def @func_2655(%var_2586: Tensor[(240), int8], %var_2624: Tensor[(8, 6, 8), float64]) -> (Tensor[(44), uint64], Tensor[(3, 10, 8), float64], Tensor[(240), int8], Tensor[(384), float64], Tensor[(637), float32], Tensor[(126), float64], Tensor[(8, 6, 8), float32], Tensor[(8, 6, 8), float32], Tensor[(11, 1), float32], Tensor[(11), float32]) {
  %660 = @func_2419() /* ty=(Tensor[(9, ?, 10), int64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64]) */;
  %661 = cast(%var_2586, dtype="int8") /* ty=Tensor[(240), int8] */;
  %662 = cast(%var_2586, dtype="int8") /* ty=Tensor[(240), int8] */;
  %663 = cast(meta[relay.Constant][31] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %664 = cast(%var_2586, dtype="int8") /* ty=Tensor[(240), int8] */;
  %665 = reshape(%661, newshape=[3, 10, 8]) /* ty=Tensor[(3, 10, 8), int8] */;
  %666 = reshape(%662, newshape=[3, 10, 8]) /* ty=Tensor[(3, 10, 8), int8] */;
  %667 = reshape(%663, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %668 = reshape(%664, newshape=[3, 10, 8]) /* ty=Tensor[(3, 10, 8), int8] */;
  %669 = @func_368(%665, %666, %667, %668) /* ty=(Tensor[(3, 10, 8), uint32], Tensor[(8, 6, 8), float64], Tensor[(384), float64], Tensor[(8, 6, 8), float64], Tensor[(3, 10, 8), float64], Tensor[(8, 6, 8), float64], Tensor[(8, 6, 8), float64], Tensor[(3, 10, 8), bool]) */;
  %670 = %660.2;
  %671 = cast(%670, dtype="uint64") /* ty=Tensor[(44), uint64] */;
  %672 = cast(meta[relay.Constant][32] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
  %673 = reshape(%671, newshape=[44]) /* ty=Tensor[(44), uint64] */;
  %674 = reshape(%672, newshape=[126]) /* ty=Tensor[(126), float64] */;
  %675 = @func_2526(%673, %674) /* ty=(Tensor[(44), bool], Tensor[(2, 2, 11), uint64], Tensor[(637), float32], Tensor[(675), uint8], Tensor[(126), float64], Tensor[(2, 2, 11), uint64]) */;
  %676 = cast(meta[relay.Constant][31] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %677 = reshape(%676, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
  %678 = @func_193(%677) /* ty=Tensor[(8, 6, 8), float64] */;
  %679 = cast(%var_2624, dtype="float32") /* ty=Tensor[(8, 6, 8), float32] */;
  %680 = shape_of(%678, dtype="int32") /* ty=Tensor[(3), int32] */;
  %681 = cast(%678, dtype="float32") /* ty=Tensor[(8, 6, 8), float32] */;
  %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %683 = cast(%var_2624, dtype="float32") /* ty=Tensor[(8, 6, 8), float32] */;
  %684 = cast(meta[relay.Constant][33] /* ty=Tensor[(11), float32] */, dtype="float32") /* ty=Tensor[(11), float32] */;
  %685 = reshape(%684, newshape=[11, 1]) /* ty=Tensor[(11, 1), float32] */;
  %686 = %669.4;
  %687 = %675.2;
  %688 = divide(%681, %682) /* ty=Tensor[(8, 6, 8), float32] */;
  %689 = sqrt(%683) /* ty=Tensor[(8, 6, 8), float32] */;
  %690 = @func_383(%685) /* ty=Tensor[(11, 1), float32] */;
  (%670, %686, %var_2586, meta[relay.Constant][31] /* ty=Tensor[(384), float64] */, %687, meta[relay.Constant][32] /* ty=Tensor[(126), float64] */, %688, %689, %690, meta[relay.Constant][33] /* ty=Tensor[(11), float32] */)
}

def @func_383(%var_376: Tensor[(11, 1), float32]) -> Tensor[(11, 1), float32] {
  %691 = cast(%var_376, dtype="float32") /* ty=Tensor[(11, 1), float32] */;
  asin(%691) /* ty=Tensor[(11, 1), float32] */
}

def @func_5835(%var_5833: Tensor[(11, 126), float32]) -> (Tensor[(11, 126), float32],) {
  @func_5832(%var_5833) /* ty=(Tensor[(11, 126), float32],) */
}

def @func_5589() -> Tensor[(9, ?, 10), float64] {
  %694 = fn () -> Tensor[(9, ?, 10), float64] {
    %692 = @func_3877() /* ty=Tensor[(9, ?, 10), int64] */;
    %693 = cast(%692, dtype="float64") /* ty=Tensor[(9, ?, 10), float64] */;
    sin(%693) /* ty=Tensor[(9, ?, 10), float64] */
  };
  %694() /* ty=Tensor[(9, ?, 10), float64] */
}

def @func_5262() -> Tensor[(1, 126), float64] {
  %695 = @func_4706() /* ty=(Tensor[(1, 126), float64],) */;
  %695.0
}

def @func_4810() -> Tensor[(2, 2, 11), uint64] {
  %697 = fn () -> Tensor[(2, 2, 11), uint64] {
    %696 = @func_2419() /* ty=(Tensor[(9, ?, 10), int64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64]) */;
    %696.1
  };
  %697() /* ty=Tensor[(2, 2, 11), uint64] */
}

def @func_4487() -> Tensor[(2, 126), float64] {
  %702 = fn () -> Tensor[(2, 126), float64] {
    %698 = @func_3338() /* ty=(Tensor[(1, 126), float64],) */;
    %699 = %698.0;
    %700 = cast(%699, dtype="float64") /* ty=Tensor[(1, 126), float64] */;
    %701 = cast(meta[relay.Constant][34] /* ty=Tensor[(2, 126), float64] */, dtype="float64") /* ty=Tensor[(2, 126), float64] */;
    floor_mod(%700, %701) /* ty=Tensor[(2, 126), float64] */
  };
  %702() /* ty=Tensor[(2, 126), float64] */
}

def @func_3981(%var_3979: Tensor[(2, 64), float32], %var_3980: Tensor[(637), float32]) -> (Tensor[(1, 126), float64], Tensor[(2, 64), float32], Tensor[(675), uint8], Tensor[(637), uint16]) {
  @func_3977(%var_3979, %var_3980) /* ty=(Tensor[(1, 126), float64], Tensor[(2, 64), float32], Tensor[(675), uint8], Tensor[(637), uint16]) */
}

def @func_6805() -> (Tensor[(8, 6, 8), int64],) {
  %705 = fn () -> (Tensor[(8, 6, 8), int64],) {
    %703 = @func_5572() /* ty=(Tensor[(1, 126), float64], Tensor[(240), int8], Tensor[(8, 6, 8), int64]) */;
    %704 = %703.2;
    (%704,)
  };
  %705() /* ty=(Tensor[(8, 6, 8), int64],) */
}

def @func_4135(%var_4134: Tensor[(12, 14, 9), float64]) -> (Tensor[(12, 14, 9), int16],) {
  %710 = fn (%var_4119: Tensor[(12, 14, 9), float64]) -> (Tensor[(12, 14, 9), int16],) {
    %706 = @func_3500() /* ty=Tensor[(1, 14, 9), float64] */;
    %707 = cast(%706, dtype="int16") /* ty=Tensor[(1, 14, 9), int16] */;
    %708 = cast(%var_4119, dtype="int16") /* ty=Tensor[(12, 14, 9), int16] */;
    %709 = subtract(%707, %708) /* ty=Tensor[(12, 14, 9), int16] */;
    (%709,)
  };
  %710(%var_4134) /* ty=(Tensor[(12, 14, 9), int16],) */
}

def @func_5352() -> Tensor[(1, 126), float64] {
  %711 = fn () -> Tensor[(1, 126), float64] {
    @func_5037() /* ty=Tensor[(1, 126), float64] */
  };
  %711() /* ty=Tensor[(1, 126), float64] */
}

def @func_3338() -> (Tensor[(1, 126), float64],) {
  %712 = @func_3060() /* ty=Tensor[(1, 126), float64] */;
  (%712,)
}

def @func_5039() -> Tensor[(1, 126), float64] {
  @func_5037() /* ty=Tensor[(1, 126), float64] */
}

def @func_5573() -> (Tensor[(1, 126), float64], Tensor[(240), int8], Tensor[(8, 6, 8), int64]) {
  %730 = fn () -> (Tensor[(1, 126), float64], Tensor[(240), int8], Tensor[(8, 6, 8), int64]) {
    %713 = @func_3667() /* ty=(Tensor[(1, 126), float64],) */;
    %714 = cast(meta[relay.Constant][35] /* ty=Tensor[(240), int8] */, dtype="int8") /* ty=Tensor[(240), int8] */;
    %715 = cast(meta[relay.Constant][35] /* ty=Tensor[(240), int8] */, dtype="int8") /* ty=Tensor[(240), int8] */;
    %716 = cast(meta[relay.Constant][36] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
    %717 = cast(meta[relay.Constant][35] /* ty=Tensor[(240), int8] */, dtype="int8") /* ty=Tensor[(240), int8] */;
    %718 = reshape(%714, newshape=[3, 10, 8]) /* ty=Tensor[(3, 10, 8), int8] */;
    %719 = reshape(%715, newshape=[3, 10, 8]) /* ty=Tensor[(3, 10, 8), int8] */;
    %720 = reshape(%716, newshape=[384]) /* ty=Tensor[(384), float64] */;
    %721 = reshape(%717, newshape=[3, 10, 8]) /* ty=Tensor[(3, 10, 8), int8] */;
    %722 = @func_368(%718, %719, %720, %721) /* ty=(Tensor[(3, 10, 8), uint32], Tensor[(8, 6, 8), float64], Tensor[(384), float64], Tensor[(8, 6, 8), float64], Tensor[(3, 10, 8), float64], Tensor[(8, 6, 8), float64], Tensor[(8, 6, 8), float64], Tensor[(3, 10, 8), bool]) */;
    %723 = %722.5;
    %724 = cast(meta[relay.Constant][36] /* ty=Tensor[(384), float64] */, dtype="int64") /* ty=Tensor[(384), int64] */;
    %725 = shape_of(%723, dtype="int32") /* ty=Tensor[(3), int32] */;
    %726 = cast(%723, dtype="int64") /* ty=Tensor[(8, 6, 8), int64] */;
    %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %728 = %713.0;
    %729 = multiply(%726, %727) /* ty=Tensor[(8, 6, 8), int64] */;
    (%728, meta[relay.Constant][35] /* ty=Tensor[(240), int8] */, %729)
  };
  %730() /* ty=(Tensor[(1, 126), float64], Tensor[(240), int8], Tensor[(8, 6, 8), int64]) */
}

def @func_4378(%var_4375: Tensor[(192, 2), uint16], %var_4376: Tensor[(240), int8], %var_4377: Tensor[(8, 126), bool]) -> (Tensor[(1, 126), float32], Tensor[(675), uint8], Tensor[(637), float32], Tensor[(6, 16, 4), uint16], uint16, Tensor[(192, 2), uint16], Tensor[(32, 4), int16], Tensor[(126), float64], Tensor[(?, 126), uint8], Tensor[(?, 126), float64], Tensor[(11), float32], Tensor[(240), int8], Tensor[(1, 126), float32], Tensor[(8, 126), uint8], Tensor[(5, 135), uint8]) {
  %791 = fn (%var_4309: Tensor[(192, 2), uint16], %var_4350: Tensor[(240), int8], %var_4360: Tensor[(8, 126), bool]) -> (Tensor[(1, 126), float32], Tensor[(675), uint8], Tensor[(637), float32], Tensor[(6, 16, 4), uint16], uint16, Tensor[(192, 2), uint16], Tensor[(32, 4), int16], Tensor[(126), float64], Tensor[(?, 126), uint8], Tensor[(?, 126), float64], Tensor[(11), float32], Tensor[(240), int8], Tensor[(1, 126), float32], Tensor[(8, 126), uint8], Tensor[(5, 135), uint8]) {
    %731 = cast(meta[relay.Constant][37] /* ty=Tensor[(32, 4), float32] */, dtype="float32") /* ty=Tensor[(32, 4), float32] */;
    %732 = cast(meta[relay.Constant][38] /* ty=Tensor[(637), float32] */, dtype="float32") /* ty=Tensor[(637), float32] */;
    %733 = reshape(%731, newshape=[2, 64]) /* ty=Tensor[(2, 64), float32] */;
    %734 = reshape(%732, newshape=[637]) /* ty=Tensor[(637), float32] */;
    %735 = @func_3977(%733, %734) /* ty=(Tensor[(1, 126), float64], Tensor[(2, 64), float32], Tensor[(675), uint8], Tensor[(637), uint16]) */;
    %736 = cast(meta[relay.Constant][39] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %737 = cast(%var_4309, dtype="uint16") /* ty=Tensor[(192, 2), uint16] */;
    %738 = reshape(%736, newshape=[]) /* ty=uint16 */;
    %739 = reshape(%737, newshape=[6, 16, 4]) /* ty=Tensor[(6, 16, 4), uint16] */;
    %740 = @func_3444(%738, %739) /* ty=(Tensor[(6, 16, 4), uint16],) */;
    %741 = cast(meta[relay.Constant][40] /* ty=Tensor[(32, 4), float32] */, dtype="int16") /* ty=Tensor[(32, 4), int16] */;
    %742 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(32, 4), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %743 = cast(meta[relay.Constant][37] /* ty=Tensor[(32, 4), float32] */, dtype="int16") /* ty=Tensor[(32, 4), int16] */;
    %744 = dyn.reshape(%741, %742, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %745 = cast(meta[relay.Constant][38] /* ty=Tensor[(637), float32] */, dtype="float32") /* ty=Tensor[(637), float32] */;
    %746 = %735.2;
    %747 = cast(%746, dtype="uint8") /* ty=Tensor[(675), uint8] */;
    %748 = @func_4046() /* ty=Tensor[(1, 126), float64] */;
    %749 = cast(%748, dtype="float64") /* ty=Tensor[(1, 126), float64] */;
    %750 = reshape(%745, newshape=[7, 13, 7]) /* ty=Tensor[(7, 13, 7), float32] */;
    %751 = reshape(%747, newshape=[5, 135]) /* ty=Tensor[(5, 135), uint8] */;
    %752 = reshape(%749, newshape=[126]) /* ty=Tensor[(126), float64] */;
    %753 = @func_1638(%750, %751, %752) /* ty=(Tensor[(7, 13, 7), float32], Tensor[(5, 135), uint8], Tensor[(24, 16), float64], Tensor[(8, 6, 8), float64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(126), float64]) */;
    %754 = cast(%748, dtype="float32") /* ty=Tensor[(1, 126), float32] */;
    %755 = asin(%754) /* ty=Tensor[(1, 126), float32] */;
    %756 = cast(%748, dtype="bool") /* ty=Tensor[(1, 126), bool] */;
    %757 = shape_of(%755, dtype="int32") /* ty=Tensor[(2), int32] */;
    %758 = cast(%755, dtype="bool") /* ty=Tensor[(1, 126), bool] */;
    %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %760 = equal(%758, %759) /* ty=Tensor[(?, 126), bool] */;
    %761 = cast(%748, dtype="uint8") /* ty=Tensor[(1, 126), uint8] */;
    %762 = shape_of(%760, dtype="int32") /* ty=Tensor[(2), int32] */;
    %763 = cast(%760, dtype="uint8") /* ty=Tensor[(?, 126), uint8] */;
    %764 = dyn.reshape(%761, %762, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %765 = cast(%760, dtype="float64") /* ty=Tensor[(?, 126), float64] */;
    %766 = cast(%var_4350, dtype="int8") /* ty=Tensor[(240), int8] */;
    %767 = cast(%var_4309, dtype="float64") /* ty=Tensor[(192, 2), float64] */;
    %768 = reshape(%766, newshape=[240]) /* ty=Tensor[(240), int8] */;
    %769 = reshape(%767, newshape=[8, 6, 8]) /* ty=Tensor[(8, 6, 8), float64] */;
    %770 = @func_2655(%768, %769) /* ty=(Tensor[(44), uint64], Tensor[(3, 10, 8), float64], Tensor[(240), int8], Tensor[(384), float64], Tensor[(637), float32], Tensor[(126), float64], Tensor[(8, 6, 8), float32], Tensor[(8, 6, 8), float32], Tensor[(11, 1), float32], Tensor[(11), float32]) */;
    %771 = cast(%755, dtype="float32") /* ty=Tensor[(1, 126), float32] */;
    %772 = cast(%760, dtype="uint8") /* ty=Tensor[(?, 126), uint8] */;
    %773 = cast(%var_4360, dtype="uint8") /* ty=Tensor[(8, 126), uint8] */;
    %774 = cast(meta[relay.Constant][38] /* ty=Tensor[(637), float32] */, dtype="float32") /* ty=Tensor[(637), float32] */;
    %775 = cast(%746, dtype="uint8") /* ty=Tensor[(675), uint8] */;
    %776 = @func_4019() /* ty=Tensor[(1, 126), float32] */;
    %777 = cast(%776, dtype="float64") /* ty=Tensor[(1, 126), float64] */;
    %778 = reshape(%774, newshape=[7, 13, 7]) /* ty=Tensor[(7, 13, 7), float32] */;
    %779 = reshape(%775, newshape=[5, 135]) /* ty=Tensor[(5, 135), uint8] */;
    %780 = reshape(%777, newshape=[126]) /* ty=Tensor[(126), float64] */;
    %781 = @func_1638(%778, %779, %780) /* ty=(Tensor[(7, 13, 7), float32], Tensor[(5, 135), uint8], Tensor[(24, 16), float64], Tensor[(8, 6, 8), float64], Tensor[(2, 2, 11), uint64], Tensor[(44), uint64], Tensor[(1, 14, 9), float64], Tensor[(126), float64]) */;
    %782 = %740.0;
    %783 = subtract(%743, %744) /* ty=Tensor[(32, 4), int16] */;
    %784 = %753.7;
    %785 = bitwise_and(%763, %764) /* ty=Tensor[(?, 126), uint8] */;
    %786 = exp(%765) /* ty=Tensor[(?, 126), float64] */;
    %787 = %770.9;
    %788 = erf(%771) /* ty=Tensor[(1, 126), float32] */;
    %789 = bitwise_or(%772, %773) /* ty=Tensor[(8, 126), uint8] */;
    %790 = %781.1;
    (%776, %746, meta[relay.Constant][38] /* ty=Tensor[(637), float32] */, %782, meta[relay.Constant][39] /* ty=uint16 */, %var_4309, %783, %784, %785, %786, %787, %var_4350, %788, %789, %790)
  };
  %791(%var_4375, %var_4376, %var_4377) /* ty=(Tensor[(1, 126), float32], Tensor[(675), uint8], Tensor[(637), float32], Tensor[(6, 16, 4), uint16], uint16, Tensor[(192, 2), uint16], Tensor[(32, 4), int16], Tensor[(126), float64], Tensor[(?, 126), uint8], Tensor[(?, 126), float64], Tensor[(11), float32], Tensor[(240), int8], Tensor[(1, 126), float32], Tensor[(8, 126), uint8], Tensor[(5, 135), uint8]) */
}

def @func_3502() -> Tensor[(1, 14, 9), float64] {
  @func_3500() /* ty=Tensor[(1, 14, 9), float64] */
}

def @func_5424(%var_5423: Tensor[(16, 7, 9), int32]) -> (Tensor[(16, 7, 9), bool],) {
  %797 = fn (%var_5415: Tensor[(16, 7, 9), int32]) -> (Tensor[(16, 7, 9), bool],) {
    %792 = cast(meta[relay.Constant][41] /* ty=Tensor[(16, 7, 9), int32] */, dtype="bool") /* ty=Tensor[(16, 7, 9), bool] */;
    %793 = shape_of(%var_5415, dtype="int32") /* ty=Tensor[(3), int32] */;
    %794 = cast(%var_5415, dtype="bool") /* ty=Tensor[(16, 7, 9), bool] */;
    %795 = dyn.reshape(%792, %793, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %796 = greater_equal(%794, %795) /* ty=Tensor[(16, 7, 9), bool] */;
    (%796,)
  };
  %797(%var_5423) /* ty=(Tensor[(16, 7, 9), bool],) */
}

def @func_4021() -> Tensor[(1, 126), float32] {
  @func_4019() /* ty=Tensor[(1, 126), float32] */
}

def @func_3879() -> Tensor[(9, ?, 10), int64] {
  @func_3877() /* ty=Tensor[(9, ?, 10), int64] */
}

def @func_4260(%var_4256: Tensor[(9, 10, 10), int64], %var_4257: Tensor[(44), uint64], %var_4258: Tensor[(9, 10, 10), float32], %var_4259: Tensor[(9, 10, 10), float32]) -> (Tensor[(1, 126), float32], Tensor[(9, 10, 10), float64], Tensor[(4, 6, 9), uint8], Tensor[(3, 12), uint8], Tensor[(44), int64], Tensor[(44), uint64], Tensor[(9, 10, 10), bool], Tensor[(9, 10, 10), int64]) {
  %828 = fn (%var_4183: Tensor[(9, 10, 10), int64], %var_4207: Tensor[(44), uint64], %var_4224: Tensor[(9, 10, 10), float32], %var_4229: Tensor[(9, 10, 10), float32]) -> (Tensor[(1, 126), float32], Tensor[(9, 10, 10), float64], Tensor[(4, 6, 9), uint8], Tensor[(3, 12), uint8], Tensor[(44), int64], Tensor[(44), uint64], Tensor[(9, 10, 10), bool], Tensor[(9, 10, 10), int64]) {
    %798 = @func_2945() /* ty=Tensor[(9, ?, 10), int64] */;
    %799 = cast(%798, dtype="float64") /* ty=Tensor[(9, ?, 10), float64] */;
    %800 = cast(%var_4183, dtype="float64") /* ty=Tensor[(9, 10, 10), float64] */;
    %801 = cast(meta[relay.Constant][42] /* ty=Tensor[(3, 12), uint8] */, dtype="uint8") /* ty=Tensor[(3, 12), uint8] */;
    %802 = reshape(%801, newshape=[4, 1, 9]) /* ty=Tensor[(4, 1, 9), uint8] */;
    %803 = @func_2786(%802) /* ty=(Tensor[(4, 6, 9), uint8], Tensor[(11, 13, 3), bool], Tensor[(429), float64]) */;
    %804 = cast(%var_4207, dtype="uint64") /* ty=Tensor[(44), uint64] */;
    %805 = @func_3419() /* ty=Tensor[(1, 126), float32] */;
    %806 = cast(%805, dtype="float64") /* ty=Tensor[(1, 126), float64] */;
    %807 = reshape(%804, newshape=[44]) /* ty=Tensor[(44), uint64] */;
    %808 = reshape(%806, newshape=[126]) /* ty=Tensor[(126), float64] */;
    %809 = @func_3395(%807, %808) /* ty=(Tensor[(9, ?, 10), float64], Tensor[(44), int64], Tensor[(44), uint64], Tensor[(637), float32], Tensor[(126), float64], Tensor[(1, 126), float64]) */;
    %810 = cast(%var_4183, dtype="float32") /* ty=Tensor[(9, 10, 10), float32] */;
    %811 = log2(%810) /* ty=Tensor[(9, 10, 10), float32] */;
    %812 = cast(%var_4224, dtype="bool") /* ty=Tensor[(9, 10, 10), bool] */;
    %813 = shape_of(%811, dtype="int32") /* ty=Tensor[(3), int32] */;
    %814 = cast(%811, dtype="bool") /* ty=Tensor[(9, 10, 10), bool] */;
    %815 = dyn.reshape(%812, %813, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %816 = cast(%811, dtype="float32") /* ty=Tensor[(9, 10, 10), float32] */;
    %817 = cast(%798, dtype="float32") /* ty=Tensor[(9, ?, 10), float32] */;
    %818 = floor_divide(%816, %817) /* ty=Tensor[(9, 10, 10), float32] */;
    %819 = cast(%var_4229, dtype="int64") /* ty=Tensor[(9, 10, 10), int64] */;
    %820 = shape_of(%818, dtype="int32") /* ty=Tensor[(3), int32] */;
    %821 = cast(%818, dtype="int64") /* ty=Tensor[(9, 10, 10), int64] */;
    %822 = dyn.reshape(%819, %820, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %823 = power(%799, %800) /* ty=Tensor[(9, 10, 10), float64] */;
    %824 = %803.0;
    %825 = %809.1;
    %826 = logical_or(%814, %815) /* ty=Tensor[(9, 10, 10), bool] */;
    %827 = bitwise_xor(%821, %822) /* ty=Tensor[(9, 10, 10), int64] */;
    (%805, %823, %824, meta[relay.Constant][42] /* ty=Tensor[(3, 12), uint8] */, %825, %var_4207, %826, %827)
  };
  %828(%var_4256, %var_4257, %var_4258, %var_4259) /* ty=(Tensor[(1, 126), float32], Tensor[(9, 10, 10), float64], Tensor[(4, 6, 9), uint8], Tensor[(3, 12), uint8], Tensor[(44), int64], Tensor[(44), uint64], Tensor[(9, 10, 10), bool], Tensor[(9, 10, 10), int64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen262/build/output.py:2009: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen262/build/output.py", line 2014, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(234) tvmgen_default_fused_acosh_kernel0(float* __restrict__ T_acosh, float* __restrict__ placeholder) {
  T_acosh[(((int)threadIdx.x))] = acoshf(placeholder[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

