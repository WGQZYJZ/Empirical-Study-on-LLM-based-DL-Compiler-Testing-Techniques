==========mod==========
#[version = "0.0.5"]
def @main(%var_9954: Tensor[(1408), uint16], %var_9969: Tensor[(20, 108), float64], %var_9972: Tensor[(112), float64]) -> (Tensor[(1040), int32], Tensor[(1408), bool], Tensor[(9, 16, 15), float64], Tensor[(1320), float32], Tensor[(20, 108), float64], Tensor[(112), float64], Tensor[(112), float64], Tensor[(8, 4, 3), float32], Tensor[(8, 4, 3), bool], Tensor[(1408), float64]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(1408), uint16] */, dtype="uint16") /* ty=Tensor[(1408), uint16] */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(1408), uint16] */, dtype="uint16") /* ty=Tensor[(1408), uint16] */;
  %2 = reshape(%0, newshape=[8, 16, 11]) /* ty=Tensor[(8, 16, 11), uint16] */;
  %3 = reshape(%1, newshape=[8, 16, 11]) /* ty=Tensor[(8, 16, 11), uint16] */;
  %4 = @func_2655(%2, %3) /* ty=(Tensor[(8, 16, 11), float64], Tensor[(8, 10, 13), int32], Tensor[(1040), int32]) */;
  %5 = cast(%var_9954, dtype="bool") /* ty=Tensor[(1408), bool] */;
  %6 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(1408), uint16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(1408), uint16] */, dtype="bool") /* ty=Tensor[(1408), bool] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?), bool] */;
  %9 = cast(meta[relay.Constant][1] /* ty=Tensor[(1320), float32] */, dtype="float32") /* ty=Tensor[(1320), float32] */;
  %10 = cast(%var_9969, dtype="float64") /* ty=Tensor[(20, 108), float64] */;
  %11 = reshape(%9, newshape=[11, 10, 12]) /* ty=Tensor[(11, 10, 12), float32] */;
  %12 = reshape(%10, newshape=[2160]) /* ty=Tensor[(2160), float64] */;
  %13 = @func_7682(%11, %12) /* ty=(Tensor[(11, 10, 12), float32], Tensor[(8, 6, 13), bool], Tensor[(48), float64], Tensor[(624), float64], Tensor[(9, 16, 15), float64], Tensor[(2160), float64]) */;
  %14 = cast(%var_9972, dtype="float64") /* ty=Tensor[(112), float64] */;
  %15 = reshape(%14, newshape=[112]) /* ty=Tensor[(112), float64] */;
  %16 = @func_9235(%15) /* ty=(Tensor[(2160), float64], Tensor[(1320), float32], Tensor[(20, 108), float64], Tensor[(8, 6, 9), int16], Tensor[(176), uint16], Tensor[(240), float64], Tensor[(112), float64], Tensor[(3, 11, 4), float64]) */;
  %17 = @func_9448() /* ty=(Tensor[(8, 4, 3), int64],) */;
  %18 = %17.0;
  %19 = cast(%18, dtype="int64") /* ty=Tensor[(8, 4, 3), int64] */;
  %20 = reshape(%19, newshape=[8, 4, 3]) /* ty=Tensor[(8, 4, 3), int64] */;
  %21 = @func_9571(%20) /* ty=Tensor[(8, 4, 3), int8] */;
  %22 = cast(%18, dtype="float32") /* ty=Tensor[(8, 4, 3), float32] */;
  %23 = shape_of(%21, dtype="int32") /* ty=Tensor[(3), int32] */;
  %24 = cast(%21, dtype="float32") /* ty=Tensor[(8, 4, 3), float32] */;
  %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %26 = floor_divide(%24, %25) /* ty=Tensor[(8, 4, 3), float32] */;
  %27 = cast(%26, dtype="int64") /* ty=Tensor[(8, 4, 3), int64] */;
  %28 = reshape(%27, newshape=[8, 4, 3]) /* ty=Tensor[(8, 4, 3), int64] */;
  %29 = @func_9026(%28) /* ty=(Tensor[(8, 4, 3), bool], Tensor[(8, 4, 3), float64], Tensor[(8, 4, 3), bool], Tensor[(8, 4, 3), int64]) */;
  %30 = cast(meta[relay.Constant][0] /* ty=Tensor[(1408), uint16] */, dtype="float64") /* ty=Tensor[(1408), float64] */;
  %31 = %4.2;
  %32 = not_equal(%7, %8) /* ty=Tensor[(1408), bool] */;
  %33 = %13.4;
  %34 = %16.6;
  %35 = %29.2;
  %36 = log2(%30) /* ty=Tensor[(1408), float64] */;
  (%31, %32, %33, meta[relay.Constant][1] /* ty=Tensor[(1320), float32] */, %var_9969, %34, %var_9972, %26, %35, %36)
}

def @func_8463(%var_8452: float64, %var_8453: Tensor[(9, 13, 5), float64]) -> (Tensor[(9, 13, 5), float64],) {
  %37 = cast(%var_8452, dtype="float64") /* ty=float64 */;
  %38 = cast(%var_8453, dtype="float64") /* ty=Tensor[(9, 13, 5), float64] */;
  %39 = power(%37, %38) /* ty=Tensor[(9, 13, 5), float64] */;
  (%39,)
}

def @func_9174() -> (Tensor[(11, 9, 11), uint8],) {
  %40 = @func_8353() /* ty=Tensor[(11, 9, 11), uint8] */;
  (%40,)
}

def @func_1701(%var_1640: Tensor[(8, 13, 6), int32], %var_1649: Tensor[(117), int8], %var_1650: Tensor[(240), float64], %var_1651: float64) -> (Tensor[(8, 13, 6), int32], Tensor[(240), float64], Tensor[(117), int8], Tensor[(240), float64], float64, Tensor[(3, 2, 2), int8], Tensor[(12), float64], Tensor[(10, 6, 4), float64], Tensor[(8, 13, 6), float32], Tensor[(1040), int32], Tensor[(1, 1848), float64]) {
  %41 = cast(%var_1640, dtype="int32") /* ty=Tensor[(8, 13, 6), int32] */;
  %42 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(8, 13, 6), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %43 = cast(meta[relay.Constant][2] /* ty=Tensor[(8, 13, 6), int32] */, dtype="int32") /* ty=Tensor[(8, 13, 6), int32] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %45 = cast(%var_1649, dtype="int8") /* ty=Tensor[(117), int8] */;
  %46 = cast(%var_1649, dtype="int8") /* ty=Tensor[(117), int8] */;
  %47 = cast(%var_1650, dtype="float64") /* ty=Tensor[(240), float64] */;
  %48 = cast(%var_1651, dtype="float64") /* ty=float64 */;
  %49 = cast(%var_1650, dtype="float64") /* ty=Tensor[(240), float64] */;
  %50 = reshape(%45, newshape=[13, 3, 3]) /* ty=Tensor[(13, 3, 3), int8] */;
  %51 = reshape(%46, newshape=[13, 3, 3]) /* ty=Tensor[(13, 3, 3), int8] */;
  %52 = reshape(%47, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %53 = reshape(%48, newshape=[]) /* ty=float64 */;
  %54 = reshape(%49, newshape=[10, 6, 4]) /* ty=Tensor[(10, 6, 4), float64] */;
  %55 = @func_832(%50, %51, %52, %53, %54) /* ty=(Tensor[(13, 3, 3), float64], Tensor[(240), float64], Tensor[(8, 14, 1), float32], float64, Tensor[(56, 2), float64], Tensor[(10, 6, 4), float64]) */;
  %56 = cast(meta[relay.Constant][3] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
  %57 = reshape(%56, newshape=[3, 2, 2]) /* ty=Tensor[(3, 2, 2), float64] */;
  %58 = cast(%var_1650, dtype="float64") /* ty=Tensor[(240), float64] */;
  %59 = reshape(%58, newshape=[10, 6, 4]) /* ty=Tensor[(10, 6, 4), float64] */;
  %60 = @func_706(%59) /* ty=(Tensor[(10, 6, 4), float64],) */;
  %61 = cast(%var_1640, dtype="float32") /* ty=Tensor[(8, 13, 6), float32] */;
  %62 = cast(%var_1651, dtype="float64") /* ty=float64 */;
  %63 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 1848), float64] */, dtype="float64") /* ty=Tensor[(1, 1848), float64] */;
  %64 = reshape(%62, newshape=[]) /* ty=float64 */;
  %65 = reshape(%63, newshape=[11, 14, 12]) /* ty=Tensor[(11, 14, 12), float64] */;
  %66 = @func_1510(%64, %65) /* ty=(Tensor[(11, 14, 12), float64], Tensor[(9, 11, 14), uint8], Tensor[(1386), uint8], Tensor[(1386), uint8], Tensor[(1040), int32]) */;
  %67 = right_shift(%43, %44) /* ty=Tensor[(8, 13, 6), int32] */;
  %68 = %55.1;
  %69 = @func_967(%57) /* ty=Tensor[(3, 2, 2), int8] */;
  %70 = %60.0;
  %71 = asinh(%61) /* ty=Tensor[(8, 13, 6), float32] */;
  %72 = %66.4;
  (%67, %68, %var_1649, %var_1650, %var_1651, %69, meta[relay.Constant][3] /* ty=Tensor[(12), float64] */, %70, %71, %72, meta[relay.Constant][4] /* ty=Tensor[(1, 1848), float64] */)
}

def @func_9605(%var_9600: Tensor[(13, 16, 14), float32]) -> Tensor[(13, 16, 14), float32] {
  %73 = cast(%var_9600, dtype="float32") /* ty=Tensor[(13, 16, 14), float32] */;
  exp(%73) /* ty=Tensor[(13, 16, 14), float32] */
}

def @func_7453(%var_7439: Tensor[(9, 3, 13), float64], %var_7440: Tensor[(9, 3, 13), float64], %var_7447: Tensor[(240, 1), float64]) -> (Tensor[(9, 3, 13), float64], float64, Tensor[(160), float32], Tensor[(240, 1), float64]) {
  %74 = cast(%var_7440, dtype="float64") /* ty=Tensor[(9, 3, 13), float64] */;
  %75 = shape_of(%var_7439, dtype="int32") /* ty=Tensor[(3), int32] */;
  %76 = cast(%var_7439, dtype="float64") /* ty=Tensor[(9, 3, 13), float64] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %78 = cast(meta[relay.Constant][5] /* ty=Tensor[(160), float32] */, dtype="float32") /* ty=Tensor[(160), float32] */;
  %79 = cast(%var_7447, dtype="float64") /* ty=Tensor[(240, 1), float64] */;
  %80 = reshape(%78, newshape=[16, 5, 2]) /* ty=Tensor[(16, 5, 2), float32] */;
  %81 = reshape(%79, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %82 = @func_5931(%80, %81) /* ty=(Tensor[(16, 5, 2), float32], Tensor[(56, 2), float64], Tensor[(117), int8], Tensor[(240), float64], float64) */;
  %83 = multiply(%76, %77) /* ty=Tensor[(9, 3, 13), float64] */;
  %84 = %82.4;
  (%83, %84, meta[relay.Constant][5] /* ty=Tensor[(160), float32] */, %var_7447)
}

def @func_7341(%var_7329: Tensor[(8, 6, 1), float64], %var_7330: Tensor[(8, 6, 13), float64]) -> (Tensor[(8, 6, 13), bool],) {
  %85 = cast(%var_7329, dtype="bool") /* ty=Tensor[(8, 6, 1), bool] */;
  %86 = cast(%var_7330, dtype="bool") /* ty=Tensor[(8, 6, 13), bool] */;
  %87 = not_equal(%85, %86) /* ty=Tensor[(8, 6, 13), bool] */;
  (%87,)
}

def @func_8353() -> Tensor[(11, 9, 11), uint8] {
  %88 = cast(meta[relay.Constant][7] /* ty=Tensor[(11, 9, 11), uint8] */, dtype="uint8") /* ty=Tensor[(11, 9, 11), uint8] */;
  %89 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(11, 9, 11), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %90 = cast(meta[relay.Constant][6] /* ty=Tensor[(11, 9, 11), uint8] */, dtype="uint8") /* ty=Tensor[(11, 9, 11), uint8] */;
  %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_and(%90, %91) /* ty=Tensor[(11, 9, 11), uint8] */
}

def @func_9448() -> (Tensor[(8, 4, 3), int64],) {
  %92 = @func_8375() /* ty=Tensor[(8, 4, 3), int64] */;
  (%92,)
}

def @func_3434(%var_3411: Tensor[(5, 14, 6), float64]) -> (Tensor[(5, 14, 6), float64], Tensor[(1, 112), uint64], Tensor[(135), int8]) {
  %93 = cast(%var_3411, dtype="float64") /* ty=Tensor[(5, 14, 6), float64] */;
  %94 = asin(%93) /* ty=Tensor[(5, 14, 6), float64] */;
  %95 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 14, 6), float64] */, dtype="float64") /* ty=Tensor[(5, 14, 6), float64] */;
  %96 = shape_of(%94, dtype="int32") /* ty=Tensor[(3), int32] */;
  %97 = cast(%94, dtype="float64") /* ty=Tensor[(5, 14, 6), float64] */;
  %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %99 = cast(meta[relay.Constant][9] /* ty=Tensor[(135), int8] */, dtype="int8") /* ty=Tensor[(135), int8] */;
  %100 = reshape(%99, newshape=[5, 3, 9]) /* ty=Tensor[(5, 3, 9), int8] */;
  %101 = @func_2184(%100) /* ty=(Tensor[(5, 3, 9), int8], Tensor[(5, 3, 9), bool], Tensor[(8, 14, 1), float32], Tensor[(1, 112), uint64]) */;
  %102 = minimum(%97, %98) /* ty=Tensor[(5, 14, 6), float64] */;
  %103 = %101.3;
  (%102, %103, meta[relay.Constant][9] /* ty=Tensor[(135), int8] */)
}

def @func_8075(%var_8055: uint16, %var_8056: Tensor[(1, 16, 13), uint16], %var_8064: Tensor[(624), int32], %var_8066: Tensor[(240), float64]) -> (Tensor[(1, 16, 13), bool], Tensor[(117), int8], Tensor[(88), float32], Tensor[(2, 616), float32], Tensor[(624), int32], Tensor[(117), int8], Tensor[(240), float64]) {
  %104 = cast(%var_8055, dtype="bool") /* ty=bool */;
  %105 = cast(%var_8056, dtype="bool") /* ty=Tensor[(1, 16, 13), bool] */;
  %106 = cast(meta[relay.Constant][10] /* ty=Tensor[(88), float32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
  %107 = cast(meta[relay.Constant][11] /* ty=Tensor[(2, 616), float32] */, dtype="float32") /* ty=Tensor[(2, 616), float32] */;
  %108 = cast(%var_8064, dtype="int32") /* ty=Tensor[(624), int32] */;
  %109 = cast(meta[relay.Constant][12] /* ty=Tensor[(117), int8] */, dtype="int8") /* ty=Tensor[(117), int8] */;
  %110 = cast(%var_8066, dtype="float64") /* ty=Tensor[(240), float64] */;
  %111 = reshape(%106, newshape=[11, 8, 1]) /* ty=Tensor[(11, 8, 1), float32] */;
  %112 = reshape(%107, newshape=[11, 8, 14]) /* ty=Tensor[(11, 8, 14), float32] */;
  %113 = reshape(%108, newshape=[624]) /* ty=Tensor[(624), int32] */;
  %114 = reshape(%109, newshape=[117]) /* ty=Tensor[(117), int8] */;
  %115 = reshape(%110, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %116 = @func_4348(%111, %112, %113, %114, %115) /* ty=(Tensor[(11, 8, 14), int64], Tensor[(624), int32], Tensor[(117), int8], Tensor[(240), float64], float64, Tensor[(11, 8, 117), bool]) */;
  %117 = less_equal(%104, %105) /* ty=Tensor[(1, 16, 13), bool] */;
  %118 = %116.2;
  (%117, %118, meta[relay.Constant][10] /* ty=Tensor[(88), float32] */, meta[relay.Constant][11] /* ty=Tensor[(2, 616), float32] */, %var_8064, meta[relay.Constant][12] /* ty=Tensor[(117), int8] */, %var_8066)
}

def @func_9235(%var_9213: Tensor[(112), float64]) -> (Tensor[(2160), float64], Tensor[(1320), float32], Tensor[(20, 108), float64], Tensor[(8, 6, 9), int16], Tensor[(176), uint16], Tensor[(240), float64], Tensor[(112), float64], Tensor[(3, 11, 4), float64]) {
  %119 = cast(meta[relay.Constant][13] /* ty=Tensor[(1320), float32] */, dtype="float32") /* ty=Tensor[(1320), float32] */;
  %120 = cast(meta[relay.Constant][14] /* ty=Tensor[(20, 108), float64] */, dtype="float64") /* ty=Tensor[(20, 108), float64] */;
  %121 = reshape(%119, newshape=[11, 10, 12]) /* ty=Tensor[(11, 10, 12), float32] */;
  %122 = reshape(%120, newshape=[2160]) /* ty=Tensor[(2160), float64] */;
  %123 = @func_7682(%121, %122) /* ty=(Tensor[(11, 10, 12), float32], Tensor[(8, 6, 13), bool], Tensor[(48), float64], Tensor[(624), float64], Tensor[(9, 16, 15), float64], Tensor[(2160), float64]) */;
  %124 = cast(meta[relay.Constant][15] /* ty=Tensor[(176), uint16] */, dtype="uint16") /* ty=Tensor[(176), uint16] */;
  %125 = cast(meta[relay.Constant][16] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %126 = cast(%var_9213, dtype="float64") /* ty=Tensor[(112), float64] */;
  %127 = reshape(%124, newshape=[2, 11, 8]) /* ty=Tensor[(2, 11, 8), uint16] */;
  %128 = reshape(%125, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %129 = reshape(%126, newshape=[112]) /* ty=Tensor[(112), float64] */;
  %130 = @func_4124(%127, %128, %129) /* ty=(Tensor[(2, 11, 8), uint16], Tensor[(240), float64], Tensor[(9, 11, 14), uint8], Tensor[(1, 1386), uint8], Tensor[(8, 6, 9), int16], Tensor[(112), float64], Tensor[(10, 6, 4), float64]) */;
  %131 = cast(meta[relay.Constant][17] /* ty=Tensor[(3, 11, 4), float32] */, dtype="float32") /* ty=Tensor[(3, 11, 4), float32] */;
  %132 = rsqrt(%131) /* ty=Tensor[(3, 11, 4), float32] */;
  %133 = cast(%132, dtype="float32") /* ty=Tensor[(3, 11, 4), float32] */;
  %134 = acos(%133) /* ty=Tensor[(3, 11, 4), float32] */;
  %135 = cast(%134, dtype="float64") /* ty=Tensor[(3, 11, 4), float64] */;
  %136 = %123.5;
  %137 = %130.4;
  %138 = sinh(%135) /* ty=Tensor[(3, 11, 4), float64] */;
  (%136, meta[relay.Constant][13] /* ty=Tensor[(1320), float32] */, meta[relay.Constant][14] /* ty=Tensor[(20, 108), float64] */, %137, meta[relay.Constant][15] /* ty=Tensor[(176), uint16] */, meta[relay.Constant][16] /* ty=Tensor[(240), float64] */, %var_9213, %138)
}

def @func_8894() -> Tensor[(8, 4, 3), int64] {
  @func_8651() /* ty=Tensor[(8, 4, 3), int64] */
}

def @func_9026(%var_8986: Tensor[(8, 4, 3), int64]) -> (Tensor[(8, 4, 3), bool], Tensor[(8, 4, 3), float64], Tensor[(8, 4, 3), bool], Tensor[(8, 4, 3), int64]) {
  %139 = @func_8894() /* ty=Tensor[(8, 4, 3), int64] */;
  %140 = cast(%var_8986, dtype="bool") /* ty=Tensor[(8, 4, 3), bool] */;
  %141 = shape_of(%139, dtype="int32") /* ty=Tensor[(3), int32] */;
  %142 = cast(%139, dtype="bool") /* ty=Tensor[(8, 4, 3), bool] */;
  %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %144 = cast(%var_8986, dtype="bool") /* ty=Tensor[(8, 4, 3), bool] */;
  %145 = shape_of(%139, dtype="int32") /* ty=Tensor[(3), int32] */;
  %146 = cast(%139, dtype="bool") /* ty=Tensor[(8, 4, 3), bool] */;
  %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %148 = greater_equal(%142, %143) /* ty=Tensor[(8, 4, 3), bool] */;
  %149 = @func_7872() /* ty=Tensor[(8, 4, 3), float64] */;
  %150 = not_equal(%146, %147) /* ty=Tensor[(8, 4, 3), bool] */;
  %151 = @func_7484() /* ty=Tensor[(8, 4, 3), int64] */;
  (%148, %149, %150, %151)
}

def @func_7211() -> (Tensor[(8, 4, 3), int64],) {
  %152 = cast(meta[relay.Constant][18] /* ty=Tensor[(8, 4, 3), float32] */, dtype="float32") /* ty=Tensor[(8, 4, 3), float32] */;
  %153 = sin(%152) /* ty=Tensor[(8, 4, 3), float32] */;
  %154 = cast(meta[relay.Constant][18] /* ty=Tensor[(8, 4, 3), float32] */, dtype="int64") /* ty=Tensor[(8, 4, 3), int64] */;
  %155 = shape_of(%153, dtype="int32") /* ty=Tensor[(3), int32] */;
  %156 = cast(%153, dtype="int64") /* ty=Tensor[(8, 4, 3), int64] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %158 = logical_xor(%156, %157) /* ty=Tensor[(8, 4, 3), int64] */;
  (%158,)
}

def @func_7318(%var_7302: Tensor[(8, 4, 3), int64], %var_7309: Tensor[(432), float64]) -> (Tensor[(2160), float64], Tensor[(3, 2, 2), float64], Tensor[(9, 16, 15), float32], Tensor[(8, 4, 3), float64], Tensor[(216, 2), float64], uint32, Tensor[(432), float64]) {
  %159 = cast(meta[relay.Constant][20] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
  %160 = reshape(%159, newshape=[3, 2, 2]) /* ty=Tensor[(3, 2, 2), float64] */;
  %161 = @func_967(%160) /* ty=Tensor[(3, 2, 2), int8] */;
  %162 = cast(meta[relay.Constant][20] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
  %163 = shape_of(%161, dtype="int32") /* ty=Tensor[(3), int32] */;
  %164 = cast(%161, dtype="float64") /* ty=Tensor[(3, 2, 2), float64] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %166 = cast(meta[relay.Constant][19] /* ty=Tensor[(2160), float64] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %167 = reshape(%166, newshape=[9, 16, 15]) /* ty=Tensor[(9, 16, 15), float64] */;
  %168 = @func_1330(%167) /* ty=(Tensor[(9, 16, 15), float64],) */;
  %169 = %168.0;
  %170 = cast(%169, dtype="float32") /* ty=Tensor[(9, 16, 15), float32] */;
  %171 = @func_7211() /* ty=(Tensor[(8, 4, 3), int64],) */;
  %172 = %171.0;
  %173 = cast(%var_7302, dtype="float64") /* ty=Tensor[(8, 4, 3), float64] */;
  %174 = shape_of(%172, dtype="int32") /* ty=Tensor[(3), int32] */;
  %175 = cast(%172, dtype="float64") /* ty=Tensor[(8, 4, 3), float64] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %177 = cast(meta[relay.Constant][21] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %178 = cast(%var_7309, dtype="float64") /* ty=Tensor[(432), float64] */;
  %179 = reshape(%177, newshape=[]) /* ty=uint32 */;
  %180 = reshape(%178, newshape=[216, 2]) /* ty=Tensor[(216, 2), float64] */;
  %181 = @func_6115(%179, %180) /* ty=(Tensor[(12, 16, 9), uint32], Tensor[(12, 4, 9), float64], Tensor[(216, 2), float64]) */;
  %182 = divide(%164, %165) /* ty=Tensor[(3, 2, 2), float64] */;
  %183 = atan(%170) /* ty=Tensor[(9, 16, 15), float32] */;
  %184 = power(%175, %176) /* ty=Tensor[(8, 4, 3), float64] */;
  %185 = %181.2;
  (meta[relay.Constant][19] /* ty=Tensor[(2160), float64] */, %182, %183, %184, %185, meta[relay.Constant][21] /* ty=uint32 */, %var_7309)
}

def @func_3469(%var_3456: Tensor[(12, 4, 9), float64]) -> (Tensor[(12, 4, 9), float64],) {
  %186 = cast(%var_3456, dtype="float64") /* ty=Tensor[(12, 4, 9), float64] */;
  %187 = sinh(%186) /* ty=Tensor[(12, 4, 9), float64] */;
  (%187,)
}

def @func_4893(%var_4866: Tensor[(9, 14, 14), bool], %var_4867: Tensor[(9, 14, 14), bool]) -> (Tensor[(9, 14, 14), bool],) {
  %188 = cast(%var_4867, dtype="bool") /* ty=Tensor[(9, 14, 14), bool] */;
  %189 = shape_of(%var_4866, dtype="int32") /* ty=Tensor[(3), int32] */;
  %190 = cast(%var_4866, dtype="bool") /* ty=Tensor[(9, 14, 14), bool] */;
  %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %192 = logical_or(%190, %191) /* ty=Tensor[(9, 14, 14), bool] */;
  (%192,)
}

def @func_3637(%var_3591: Tensor[(1, 9, 8), float32], %var_3607: Tensor[(5, 4), float32], %var_3608: Tensor[(1, 60), float32], %var_3610: Tensor[(240), float64], %var_3612: Tensor[(1040), int32]) -> (Tensor[(?, 9, 8), float32], Tensor[(2, 10, 3), float32], Tensor[(5, 4), float32], Tensor[(1, 60), float32], Tensor[(1, 117), int8], Tensor[(240), float64], float64, Tensor[(1040), int32]) {
  %193 = cast(%var_3591, dtype="float32") /* ty=Tensor[(1, 9, 8), float32] */;
  %194 = atanh(%193) /* ty=Tensor[(1, 9, 8), float32] */;
  %195 = cast(%var_3591, dtype="float32") /* ty=Tensor[(1, 9, 8), float32] */;
  %196 = shape_of(%194, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(%194, dtype="float32") /* ty=Tensor[(1, 9, 8), float32] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %199 = cast(%var_3607, dtype="float32") /* ty=Tensor[(5, 4), float32] */;
  %200 = cast(%var_3608, dtype="float32") /* ty=Tensor[(1, 60), float32] */;
  %201 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 117), int8] */, dtype="int8") /* ty=Tensor[(1, 117), int8] */;
  %202 = cast(%var_3610, dtype="float64") /* ty=Tensor[(240), float64] */;
  %203 = cast(-4.25259f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %204 = cast(%var_3612, dtype="int32") /* ty=Tensor[(1040), int32] */;
  %205 = reshape(%199, newshape=[2, 10, 1]) /* ty=Tensor[(2, 10, 1), float32] */;
  %206 = reshape(%200, newshape=[2, 10, 3]) /* ty=Tensor[(2, 10, 3), float32] */;
  %207 = reshape(%201, newshape=[117]) /* ty=Tensor[(117), int8] */;
  %208 = reshape(%202, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %209 = reshape(%203, newshape=[]) /* ty=float64 */;
  %210 = reshape(%204, newshape=[1040]) /* ty=Tensor[(1040), int32] */;
  %211 = @func_2063(%205, %206, %207, %208, %209, %210) /* ty=(Tensor[(2, 10, 3), float32], Tensor[(240), float64], float64, Tensor[(624), int32], Tensor[(2, 10, 3), int8], Tensor[(8, 14, 1), float32], Tensor[(28, 4), float64], Tensor[(13, 3, 3), bool], Tensor[(1040), float64], Tensor[(13, 3, 3), uint16]) */;
  %212 = subtract(%197, %198) /* ty=Tensor[(?, 9, 8), float32] */;
  %213 = %211.0;
  (%212, %213, %var_3607, %var_3608, meta[relay.Constant][22] /* ty=Tensor[(1, 117), int8] */, %var_3610, -4.25259f64 /* ty=float64 */, %var_3612)
}

def @func_6224(%var_6204: Tensor[(10, 5, 10), int8]) -> Tensor[(10, 5, 10), bool] {
  %214 = cast(%var_6204, dtype="int8") /* ty=Tensor[(10, 5, 10), int8] */;
  %215 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(10, 5, 10), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %216 = cast(meta[relay.Constant][23] /* ty=Tensor[(10, 5, 10), int8] */, dtype="int8") /* ty=Tensor[(10, 5, 10), int8] */;
  %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %218 = right_shift(%216, %217) /* ty=Tensor[(10, 5, 10), int8] */;
  %219 = cast(%var_6204, dtype="bool") /* ty=Tensor[(10, 5, 10), bool] */;
  %220 = shape_of(%218, dtype="int32") /* ty=Tensor[(3), int32] */;
  %221 = cast(%218, dtype="bool") /* ty=Tensor[(10, 5, 10), bool] */;
  %222 = dyn.reshape(%219, %220, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%221, %222) /* ty=Tensor[(10, 5, 10), bool] */
}

def @func_2063(%var_1943: Tensor[(2, 10, 1), float32], %var_1944: Tensor[(2, 10, 3), float32], %var_1964: Tensor[(117), int8], %var_1965: Tensor[(240), float64], %var_1966: float64, %var_2022: Tensor[(1040), int32]) -> (Tensor[(2, 10, 3), float32], Tensor[(240), float64], float64, Tensor[(624), int32], Tensor[(2, 10, 3), int8], Tensor[(8, 14, 1), float32], Tensor[(28, 4), float64], Tensor[(13, 3, 3), bool], Tensor[(1040), float64], Tensor[(13, 3, 3), uint16]) {
  %223 = cast(%var_1943, dtype="float32") /* ty=Tensor[(2, 10, 1), float32] */;
  %224 = cast(%var_1944, dtype="float32") /* ty=Tensor[(2, 10, 3), float32] */;
  %225 = cast(%var_1943, dtype="int8") /* ty=Tensor[(2, 10, 1), int8] */;
  %226 = cast(%var_1944, dtype="int8") /* ty=Tensor[(2, 10, 3), int8] */;
  %227 = cast(%var_1966, dtype="float64") /* ty=float64 */;
  %228 = cast(meta[relay.Constant][25] /* ty=Tensor[(28, 4), float64] */, dtype="float64") /* ty=Tensor[(28, 4), float64] */;
  %229 = reshape(%227, newshape=[]) /* ty=float64 */;
  %230 = reshape(%228, newshape=[8, 14, 1]) /* ty=Tensor[(8, 14, 1), float64] */;
  %231 = cast(%var_1964, dtype="int8") /* ty=Tensor[(117), int8] */;
  %232 = cast(%var_1964, dtype="int8") /* ty=Tensor[(117), int8] */;
  %233 = cast(%var_1965, dtype="float64") /* ty=Tensor[(240), float64] */;
  %234 = cast(%var_1966, dtype="float64") /* ty=float64 */;
  %235 = cast(%var_1965, dtype="float64") /* ty=Tensor[(240), float64] */;
  %236 = reshape(%231, newshape=[13, 3, 3]) /* ty=Tensor[(13, 3, 3), int8] */;
  %237 = reshape(%232, newshape=[13, 3, 3]) /* ty=Tensor[(13, 3, 3), int8] */;
  %238 = reshape(%233, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %239 = reshape(%234, newshape=[]) /* ty=float64 */;
  %240 = reshape(%235, newshape=[10, 6, 4]) /* ty=Tensor[(10, 6, 4), float64] */;
  %241 = @func_832(%236, %237, %238, %239, %240) /* ty=(Tensor[(13, 3, 3), float64], Tensor[(240), float64], Tensor[(8, 14, 1), float32], float64, Tensor[(56, 2), float64], Tensor[(10, 6, 4), float64]) */;
  %242 = %241.0;
  %243 = cast(%var_1964, dtype="bool") /* ty=Tensor[(117), bool] */;
  %244 = shape_of(%242, dtype="int32") /* ty=Tensor[(3), int32] */;
  %245 = cast(%242, dtype="bool") /* ty=Tensor[(13, 3, 3), bool] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %247 = cast(meta[relay.Constant][24] /* ty=Tensor[(624), int32] */, dtype="int32") /* ty=Tensor[(624), int32] */;
  %248 = cast(%var_1964, dtype="int8") /* ty=Tensor[(117), int8] */;
  %249 = cast(%var_1965, dtype="float64") /* ty=Tensor[(240), float64] */;
  %250 = cast(%var_1966, dtype="float64") /* ty=float64 */;
  %251 = reshape(%247, newshape=[8, 13, 6]) /* ty=Tensor[(8, 13, 6), int32] */;
  %252 = reshape(%248, newshape=[117]) /* ty=Tensor[(117), int8] */;
  %253 = reshape(%249, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %254 = reshape(%250, newshape=[]) /* ty=float64 */;
  %255 = @func_1701(%251, %252, %253, %254) /* ty=(Tensor[(8, 13, 6), int32], Tensor[(240), float64], Tensor[(117), int8], Tensor[(240), float64], float64, Tensor[(3, 2, 2), int8], Tensor[(12), float64], Tensor[(10, 6, 4), float64], Tensor[(8, 13, 6), float32], Tensor[(1040), int32], Tensor[(1, 1848), float64]) */;
  %256 = %255.9;
  %257 = cast(%var_2022, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %258 = shape_of(%256, dtype="int32") /* ty=Tensor[(1), int32] */;
  %259 = cast(%256, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?), float64] */;
  %261 = cast(%242, dtype="float32") /* ty=Tensor[(13, 3, 3), float32] */;
  %262 = sigmoid(%261) /* ty=Tensor[(13, 3, 3), float32] */;
  %263 = cast(%262, dtype="uint16") /* ty=Tensor[(13, 3, 3), uint16] */;
  %264 = shape_of(%242, dtype="int32") /* ty=Tensor[(3), int32] */;
  %265 = cast(%242, dtype="uint16") /* ty=Tensor[(13, 3, 3), uint16] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %267 = floor_mod(%223, %224) /* ty=Tensor[(2, 10, 3), float32] */;
  %268 = left_shift(%225, %226) /* ty=Tensor[(2, 10, 3), int8] */;
  %269 = @func_275(%229, %230) /* ty=Tensor[(8, 14, 1), float32] */;
  %270 = greater(%245, %246) /* ty=Tensor[(13, 3, 3), bool] */;
  %271 = floor_mod(%259, %260) /* ty=Tensor[(1040), float64] */;
  %272 = subtract(%265, %266) /* ty=Tensor[(13, 3, 3), uint16] */;
  (%267, %var_1965, %var_1966, meta[relay.Constant][24] /* ty=Tensor[(624), int32] */, %268, %269, meta[relay.Constant][25] /* ty=Tensor[(28, 4), float64] */, %270, %271, %272)
}

def @func_832(%var_766: Tensor[(13, 3, 3), int8], %var_767: Tensor[(13, 3, 3), int8], %var_777: Tensor[(240), float64], %var_794: float64, %var_810: Tensor[(10, 6, 4), float64]) -> (Tensor[(13, 3, 3), float64], Tensor[(240), float64], Tensor[(8, 14, 1), float32], float64, Tensor[(56, 2), float64], Tensor[(10, 6, 4), float64]) {
  %273 = cast(%var_767, dtype="int8") /* ty=Tensor[(13, 3, 3), int8] */;
  %274 = shape_of(%var_766, dtype="int32") /* ty=Tensor[(3), int32] */;
  %275 = cast(%var_766, dtype="int8") /* ty=Tensor[(13, 3, 3), int8] */;
  %276 = dyn.reshape(%273, %274, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %277 = bitwise_or(%275, %276) /* ty=Tensor[(13, 3, 3), int8] */;
  %278 = cast(%277, dtype="float64") /* ty=Tensor[(13, 3, 3), float64] */;
  %279 = shape_of(%var_767, dtype="int32") /* ty=Tensor[(3), int32] */;
  %280 = cast(%var_767, dtype="float64") /* ty=Tensor[(13, 3, 3), float64] */;
  %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %282 = cast(%var_794, dtype="float64") /* ty=float64 */;
  %283 = cast(meta[relay.Constant][26] /* ty=Tensor[(56, 2), float64] */, dtype="float64") /* ty=Tensor[(56, 2), float64] */;
  %284 = reshape(%282, newshape=[]) /* ty=float64 */;
  %285 = reshape(%283, newshape=[8, 14, 1]) /* ty=Tensor[(8, 14, 1), float64] */;
  %286 = cast(%var_777, dtype="float64") /* ty=Tensor[(240), float64] */;
  %287 = reshape(%286, newshape=[10, 6, 4]) /* ty=Tensor[(10, 6, 4), float64] */;
  %288 = @func_706(%287) /* ty=(Tensor[(10, 6, 4), float64],) */;
  %289 = %288.0;
  %290 = cast(%var_810, dtype="float32") /* ty=Tensor[(10, 6, 4), float32] */;
  %291 = shape_of(%289, dtype="int32") /* ty=Tensor[(3), int32] */;
  %292 = cast(%289, dtype="float32") /* ty=Tensor[(10, 6, 4), float32] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %294 = floor_divide(%292, %293) /* ty=Tensor[(10, 6, 4), float32] */;
  %295 = cast(%294, dtype="float64") /* ty=Tensor[(10, 6, 4), float64] */;
  %296 = floor_mod(%280, %281) /* ty=Tensor[(13, 3, 3), float64] */;
  %297 = @func_275(%284, %285) /* ty=Tensor[(8, 14, 1), float32] */;
  %298 = log2(%295) /* ty=Tensor[(10, 6, 4), float64] */;
  (%296, %var_777, %297, %var_794, meta[relay.Constant][26] /* ty=Tensor[(56, 2), float64] */, %298)
}

def @func_8860(%var_8821: Tensor[(72), float64]) -> (Tensor[(8, 4, 3), int64], Tensor[(2, 12, 3), float64], Tensor[(72), float64]) {
  %299 = cast(%var_8821, dtype="float64") /* ty=Tensor[(72), float64] */;
  %300 = reshape(%299, newshape=[2, 12, 3]) /* ty=Tensor[(2, 12, 3), float64] */;
  %301 = @func_8375() /* ty=Tensor[(8, 4, 3), int64] */;
  %302 = @func_3999(%300) /* ty=Tensor[(2, 12, 3), float64] */;
  (%301, %302, %var_8821)
}

def @func_967(%var_960: Tensor[(3, 2, 2), float64]) -> Tensor[(3, 2, 2), int8] {
  %303 = cast(%var_960, dtype="float64") /* ty=Tensor[(3, 2, 2), float64] */;
  %304 = cos(%303) /* ty=Tensor[(3, 2, 2), float64] */;
  %305 = cast(%304, dtype="int8") /* ty=Tensor[(3, 2, 2), int8] */;
  %306 = shape_of(%var_960, dtype="int32") /* ty=Tensor[(3), int32] */;
  %307 = cast(%var_960, dtype="int8") /* ty=Tensor[(3, 2, 2), int8] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_and(%307, %308) /* ty=Tensor[(3, 2, 2), int8] */
}

def @func_7872() -> Tensor[(8, 4, 3), float64] {
  %309 = @func_7778() /* ty=(Tensor[(8, 4, 3), float64],) */;
  %310 = %309.0;
  %311 = cast(%310, dtype="float64") /* ty=Tensor[(8, 4, 3), float64] */;
  erf(%311) /* ty=Tensor[(8, 4, 3), float64] */
}

def @func_2524(%var_2509: Tensor[(7, 3, 2), int64], %var_2519: Tensor[(1040), int32]) -> (Tensor[(7, 3, 2), int64], Tensor[(9, 11, 14), uint8], Tensor[(1040), int32]) {
  %312 = cast(meta[relay.Constant][27] /* ty=Tensor[(7, 3, 2), int64] */, dtype="int64") /* ty=Tensor[(7, 3, 2), int64] */;
  %313 = shape_of(%var_2509, dtype="int32") /* ty=Tensor[(3), int32] */;
  %314 = cast(%var_2509, dtype="int64") /* ty=Tensor[(7, 3, 2), int64] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %316 = cast(%var_2519, dtype="int32") /* ty=Tensor[(1040), int32] */;
  %317 = reshape(%316, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), int32] */;
  %318 = @func_1264(%317) /* ty=(Tensor[(8, 10, 13), int32], Tensor[(9, 11, 14), uint8], Tensor[(1386), uint8]) */;
  %319 = logical_xor(%314, %315) /* ty=Tensor[(7, 3, 2), int64] */;
  %320 = %318.1;
  (%319, %320, %var_2519)
}

def @func_7235(%var_7230: float64) -> (Tensor[(8, 4, 3), int64], Tensor[(1848), float64], Tensor[(600), int32], Tensor[(1386), uint8], float64, Tensor[(6, 9, 16), float32], Tensor[(432, 2), float32]) {
  %321 = @func_7211() /* ty=(Tensor[(8, 4, 3), int64],) */;
  %322 = cast(meta[relay.Constant][28] /* ty=Tensor[(600), int32] */, dtype="int32") /* ty=Tensor[(600), int32] */;
  %323 = cast(meta[relay.Constant][29] /* ty=Tensor[(1386), uint8] */, dtype="uint8") /* ty=Tensor[(1386), uint8] */;
  %324 = cast(%var_7230, dtype="float64") /* ty=float64 */;
  %325 = reshape(%322, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), int32] */;
  %326 = reshape(%323, newshape=[1386]) /* ty=Tensor[(1386), uint8] */;
  %327 = reshape(%324, newshape=[]) /* ty=float64 */;
  %328 = @func_6075(%325, %326, %327) /* ty=(Tensor[(5, 12, 10), bool], Tensor[(9, 11, 14), uint8], Tensor[(1386), uint8], Tensor[(1848), float64], Tensor[(1040), bool]) */;
  %329 = cast(meta[relay.Constant][30] /* ty=Tensor[(432, 2), float32] */, dtype="float32") /* ty=Tensor[(432, 2), float32] */;
  %330 = reshape(%329, newshape=[6, 9, 16]) /* ty=Tensor[(6, 9, 16), float32] */;
  %331 = @func_4544(%330) /* ty=(Tensor[(6, 9, 16), float32],) */;
  %332 = %321.0;
  %333 = %328.3;
  %334 = %331.0;
  (%332, %333, meta[relay.Constant][28] /* ty=Tensor[(600), int32] */, meta[relay.Constant][29] /* ty=Tensor[(1386), uint8] */, %var_7230, %334, meta[relay.Constant][30] /* ty=Tensor[(432, 2), float32] */)
}

def @func_2475(%var_2465: Tensor[(4, 2, 11), float64]) -> (Tensor[(4, 2, 11), bool],) {
  %335 = cast(%var_2465, dtype="bool") /* ty=Tensor[(4, 2, 11), bool] */;
  %336 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(4, 2, 11), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %337 = cast(meta[relay.Constant][31] /* ty=Tensor[(4, 2, 11), float64] */, dtype="bool") /* ty=Tensor[(4, 2, 11), bool] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %339 = equal(%337, %338) /* ty=Tensor[(4, 2, 11), bool] */;
  (%339,)
}

def @func_8314(%var_8301: Tensor[(117), int8]) -> (Tensor[(8, 4, 3), float64], Tensor[(10, 6, 4), float64], Tensor[(624), int32], Tensor[(117), int8], Tensor[(24, 10), float64], float64) {
  %340 = @func_7778() /* ty=(Tensor[(8, 4, 3), float64],) */;
  %341 = cast(meta[relay.Constant][32] /* ty=Tensor[(624), int32] */, dtype="int32") /* ty=Tensor[(624), int32] */;
  %342 = cast(%var_8301, dtype="int8") /* ty=Tensor[(117), int8] */;
  %343 = cast(meta[relay.Constant][33] /* ty=Tensor[(24, 10), float64] */, dtype="float64") /* ty=Tensor[(24, 10), float64] */;
  %344 = cast(-8.60749f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %345 = reshape(%341, newshape=[8, 13, 6]) /* ty=Tensor[(8, 13, 6), int32] */;
  %346 = reshape(%342, newshape=[117]) /* ty=Tensor[(117), int8] */;
  %347 = reshape(%343, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %348 = reshape(%344, newshape=[]) /* ty=float64 */;
  %349 = @func_1701(%345, %346, %347, %348) /* ty=(Tensor[(8, 13, 6), int32], Tensor[(240), float64], Tensor[(117), int8], Tensor[(240), float64], float64, Tensor[(3, 2, 2), int8], Tensor[(12), float64], Tensor[(10, 6, 4), float64], Tensor[(8, 13, 6), float32], Tensor[(1040), int32], Tensor[(1, 1848), float64]) */;
  %350 = %340.0;
  %351 = %349.7;
  (%350, %351, meta[relay.Constant][32] /* ty=Tensor[(624), int32] */, %var_8301, meta[relay.Constant][33] /* ty=Tensor[(24, 10), float64] */, -8.60749f64 /* ty=float64 */)
}

def @func_8651() -> Tensor[(8, 4, 3), int64] {
  @func_7484() /* ty=Tensor[(8, 4, 3), int64] */
}

def @func_9500(%var_9478: Tensor[(8, 4, 3), int64], %var_9497: float64) -> (Tensor[(8, 4, 3), float32], Tensor[(9, 13, 5), float64], float64, Tensor[(585), float64]) {
  %352 = @func_8375() /* ty=Tensor[(8, 4, 3), int64] */;
  %353 = cast(%var_9478, dtype="float32") /* ty=Tensor[(8, 4, 3), float32] */;
  %354 = shape_of(%352, dtype="int32") /* ty=Tensor[(3), int32] */;
  %355 = cast(%352, dtype="float32") /* ty=Tensor[(8, 4, 3), float32] */;
  %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %357 = cast(%var_9497, dtype="float64") /* ty=float64 */;
  %358 = cast(meta[relay.Constant][34] /* ty=Tensor[(585), float64] */, dtype="float64") /* ty=Tensor[(585), float64] */;
  %359 = reshape(%357, newshape=[]) /* ty=float64 */;
  %360 = reshape(%358, newshape=[9, 13, 5]) /* ty=Tensor[(9, 13, 5), float64] */;
  %361 = @func_8463(%359, %360) /* ty=(Tensor[(9, 13, 5), float64],) */;
  %362 = floor_mod(%355, %356) /* ty=Tensor[(8, 4, 3), float32] */;
  %363 = %361.0;
  (%362, %363, %var_9497, meta[relay.Constant][34] /* ty=Tensor[(585), float64] */)
}

def @func_8375() -> Tensor[(8, 4, 3), int64] {
  @func_7399() /* ty=Tensor[(8, 4, 3), int64] */
}

def @func_8604(%var_8602: Tensor[(144), float32]) -> (Tensor[(11, 9, 11), uint8], Tensor[(4, 6, 6), float32], Tensor[(144), float32]) {
  %364 = @func_8386() /* ty=(Tensor[(11, 9, 11), uint8],) */;
  %365 = cast(%var_8602, dtype="float32") /* ty=Tensor[(144), float32] */;
  %366 = reshape(%365, newshape=[4, 6, 6]) /* ty=Tensor[(4, 6, 6), float32] */;
  %367 = @func_5443(%366) /* ty=(Tensor[(4, 6, 6), float32],) */;
  %368 = %364.0;
  %369 = %367.0;
  (%368, %369, %var_8602)
}

def @func_8768(%var_8745: Tensor[(2, 4, 15), uint32], %var_8746: Tensor[(2, 4, 15), uint32], %var_8753: float64, %var_8757: Tensor[(2160), float64]) -> (Tensor[(2, 4, 15), uint32], Tensor[(8, 14, 1), float32], Tensor[(13, 9), int8], Tensor[(24, 10), float64], float64, Tensor[(9, 16, 15), float64], Tensor[(1320), float32], Tensor[(2160), float64], Tensor[(13, 4, 4), int64], Tensor[(208), int64]) {
  %370 = cast(%var_8746, dtype="uint32") /* ty=Tensor[(2, 4, 15), uint32] */;
  %371 = shape_of(%var_8745, dtype="int32") /* ty=Tensor[(3), int32] */;
  %372 = cast(%var_8745, dtype="uint32") /* ty=Tensor[(2, 4, 15), uint32] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %374 = cast(meta[relay.Constant][35] /* ty=Tensor[(13, 9), int8] */, dtype="int8") /* ty=Tensor[(13, 9), int8] */;
  %375 = cast(meta[relay.Constant][35] /* ty=Tensor[(13, 9), int8] */, dtype="int8") /* ty=Tensor[(13, 9), int8] */;
  %376 = cast(meta[relay.Constant][36] /* ty=Tensor[(24, 10), float64] */, dtype="float64") /* ty=Tensor[(24, 10), float64] */;
  %377 = cast(%var_8753, dtype="float64") /* ty=float64 */;
  %378 = cast(meta[relay.Constant][36] /* ty=Tensor[(24, 10), float64] */, dtype="float64") /* ty=Tensor[(24, 10), float64] */;
  %379 = reshape(%374, newshape=[13, 3, 3]) /* ty=Tensor[(13, 3, 3), int8] */;
  %380 = reshape(%375, newshape=[13, 3, 3]) /* ty=Tensor[(13, 3, 3), int8] */;
  %381 = reshape(%376, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %382 = reshape(%377, newshape=[]) /* ty=float64 */;
  %383 = reshape(%378, newshape=[10, 6, 4]) /* ty=Tensor[(10, 6, 4), float64] */;
  %384 = @func_832(%379, %380, %381, %382, %383) /* ty=(Tensor[(13, 3, 3), float64], Tensor[(240), float64], Tensor[(8, 14, 1), float32], float64, Tensor[(56, 2), float64], Tensor[(10, 6, 4), float64]) */;
  %385 = cast(meta[relay.Constant][37] /* ty=Tensor[(1320), float32] */, dtype="float32") /* ty=Tensor[(1320), float32] */;
  %386 = cast(%var_8757, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %387 = reshape(%385, newshape=[11, 10, 12]) /* ty=Tensor[(11, 10, 12), float32] */;
  %388 = reshape(%386, newshape=[2160]) /* ty=Tensor[(2160), float64] */;
  %389 = @func_7682(%387, %388) /* ty=(Tensor[(11, 10, 12), float32], Tensor[(8, 6, 13), bool], Tensor[(48), float64], Tensor[(624), float64], Tensor[(9, 16, 15), float64], Tensor[(2160), float64]) */;
  %390 = cast(meta[relay.Constant][38] /* ty=Tensor[(208), int64] */, dtype="int64") /* ty=Tensor[(208), int64] */;
  %391 = cast(meta[relay.Constant][38] /* ty=Tensor[(208), int64] */, dtype="int64") /* ty=Tensor[(208), int64] */;
  %392 = reshape(%390, newshape=[13, 4, 4]) /* ty=Tensor[(13, 4, 4), int64] */;
  %393 = reshape(%391, newshape=[13, 4, 4]) /* ty=Tensor[(13, 4, 4), int64] */;
  %394 = logical_xor(%372, %373) /* ty=Tensor[(2, 4, 15), uint32] */;
  %395 = %384.2;
  %396 = %389.4;
  %397 = @func_6714(%392, %393) /* ty=Tensor[(13, 4, 4), int64] */;
  (%394, %395, meta[relay.Constant][35] /* ty=Tensor[(13, 9), int8] */, meta[relay.Constant][36] /* ty=Tensor[(24, 10), float64] */, %var_8753, %396, meta[relay.Constant][37] /* ty=Tensor[(1320), float32] */, %var_8757, %397, meta[relay.Constant][38] /* ty=Tensor[(208), int64] */)
}

def @func_8025(%var_8016: Tensor[(8, 12, 11), int64], %var_8017: Tensor[(8, 12, 11), int64]) -> Tensor[(8, 12, 11), int64] {
  %398 = cast(%var_8017, dtype="int64") /* ty=Tensor[(8, 12, 11), int64] */;
  %399 = shape_of(%var_8016, dtype="int32") /* ty=Tensor[(3), int32] */;
  %400 = cast(%var_8016, dtype="int64") /* ty=Tensor[(8, 12, 11), int64] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  right_shift(%400, %401) /* ty=Tensor[(8, 12, 11), int64] */
}

def @func_9257() -> (Tensor[(11, 9, 11), uint8],) {
  %402 = @func_9174() /* ty=(Tensor[(11, 9, 11), uint8],) */;
  %403 = %402.0;
  (%403,)
}

def @func_7778() -> (Tensor[(8, 4, 3), float64],) {
  %404 = @func_7484() /* ty=Tensor[(8, 4, 3), int64] */;
  %405 = cast(%404, dtype="float64") /* ty=Tensor[(8, 4, 3), float64] */;
  %406 = log10(%405) /* ty=Tensor[(8, 4, 3), float64] */;
  (%406,)
}

def @func_6075(%var_6047: Tensor[(5, 12, 10), int32], %var_6058: Tensor[(1386), uint8], %var_6062: float64) -> (Tensor[(5, 12, 10), bool], Tensor[(9, 11, 14), uint8], Tensor[(1386), uint8], Tensor[(1848), float64], Tensor[(1040), bool]) {
  %407 = cast(%var_6047, dtype="bool") /* ty=Tensor[(5, 12, 10), bool] */;
  %408 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(5, 12, 10), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %409 = cast(meta[relay.Constant][39] /* ty=Tensor[(5, 12, 10), int32] */, dtype="bool") /* ty=Tensor[(5, 12, 10), bool] */;
  %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %411 = cast(%var_6058, dtype="uint8") /* ty=Tensor[(1386), uint8] */;
  %412 = reshape(%411, newshape=[9, 11, 14]) /* ty=Tensor[(9, 11, 14), uint8] */;
  %413 = @func_597(%412) /* ty=(Tensor[(9, 11, 14), uint8],) */;
  %414 = cast(%var_6062, dtype="float64") /* ty=float64 */;
  %415 = cast(meta[relay.Constant][40] /* ty=Tensor[(1848), float64] */, dtype="float64") /* ty=Tensor[(1848), float64] */;
  %416 = reshape(%414, newshape=[]) /* ty=float64 */;
  %417 = reshape(%415, newshape=[11, 14, 12]) /* ty=Tensor[(11, 14, 12), float64] */;
  %418 = @func_1510(%416, %417) /* ty=(Tensor[(11, 14, 12), float64], Tensor[(9, 11, 14), uint8], Tensor[(1386), uint8], Tensor[(1386), uint8], Tensor[(1040), int32]) */;
  %419 = %418.4;
  %420 = cast(%419, dtype="bool") /* ty=Tensor[(1040), bool] */;
  %421 = cast(%var_6062, dtype="bool") /* ty=bool */;
  %422 = not_equal(%409, %410) /* ty=Tensor[(5, 12, 10), bool] */;
  %423 = %413.0;
  %424 = less(%420, %421) /* ty=Tensor[(1040), bool] */;
  (%422, %423, %var_6058, meta[relay.Constant][40] /* ty=Tensor[(1848), float64] */, %424)
}

def @func_3999(%var_3995: Tensor[(2, 12, 3), float64]) -> Tensor[(2, 12, 3), float64] {
  %425 = cast(%var_3995, dtype="float64") /* ty=Tensor[(2, 12, 3), float64] */;
  cos(%425) /* ty=Tensor[(2, 12, 3), float64] */
}

def @func_9352() -> (Tensor[(10, 9, 15), float32], Tensor[(1386), uint8], Tensor[(600), int32], Tensor[(1386), uint8], float64) {
  %426 = cast(meta[relay.Constant][41] /* ty=Tensor[(10, 9, 15), float32] */, dtype="float32") /* ty=Tensor[(10, 9, 15), float32] */;
  %427 = tan(%426) /* ty=Tensor[(10, 9, 15), float32] */;
  %428 = cast(meta[relay.Constant][41] /* ty=Tensor[(10, 9, 15), float32] */, dtype="float32") /* ty=Tensor[(10, 9, 15), float32] */;
  %429 = shape_of(%427, dtype="int32") /* ty=Tensor[(3), int32] */;
  %430 = cast(%427, dtype="float32") /* ty=Tensor[(10, 9, 15), float32] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %432 = cast(meta[relay.Constant][42] /* ty=Tensor[(600), int32] */, dtype="int32") /* ty=Tensor[(600), int32] */;
  %433 = cast(meta[relay.Constant][43] /* ty=Tensor[(1386), uint8] */, dtype="uint8") /* ty=Tensor[(1386), uint8] */;
  %434 = cast(9.67418f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %435 = reshape(%432, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), int32] */;
  %436 = reshape(%433, newshape=[1386]) /* ty=Tensor[(1386), uint8] */;
  %437 = reshape(%434, newshape=[]) /* ty=float64 */;
  %438 = @func_6075(%435, %436, %437) /* ty=(Tensor[(5, 12, 10), bool], Tensor[(9, 11, 14), uint8], Tensor[(1386), uint8], Tensor[(1848), float64], Tensor[(1040), bool]) */;
  %439 = divide(%430, %431) /* ty=Tensor[(10, 9, 15), float32] */;
  %440 = %438.2;
  (%439, %440, meta[relay.Constant][42] /* ty=Tensor[(600), int32] */, meta[relay.Constant][43] /* ty=Tensor[(1386), uint8] */, 9.67418f64 /* ty=float64 */)
}

def @func_8198(%var_8171: Tensor[(1408), uint16]) -> (Tensor[(1040), int32], Tensor[(1408), uint16], Tensor[(8, 4, 3), float32]) {
  %441 = cast(%var_8171, dtype="uint16") /* ty=Tensor[(1408), uint16] */;
  %442 = cast(%var_8171, dtype="uint16") /* ty=Tensor[(1408), uint16] */;
  %443 = reshape(%441, newshape=[8, 16, 11]) /* ty=Tensor[(8, 16, 11), uint16] */;
  %444 = reshape(%442, newshape=[8, 16, 11]) /* ty=Tensor[(8, 16, 11), uint16] */;
  %445 = @func_2655(%443, %444) /* ty=(Tensor[(8, 16, 11), float64], Tensor[(8, 10, 13), int32], Tensor[(1040), int32]) */;
  %446 = @func_7778() /* ty=(Tensor[(8, 4, 3), float64],) */;
  %447 = %446.0;
  %448 = cast(%447, dtype="float32") /* ty=Tensor[(8, 4, 3), float32] */;
  %449 = %445.2;
  %450 = acos(%448) /* ty=Tensor[(8, 4, 3), float32] */;
  (%449, %var_8171, %450)
}

def @func_7821(%var_7791: Tensor[(128), uint8], %var_7818: Tensor[(28, 4), float64]) -> (Tensor[(8, 8, 2), uint8], Tensor[(128), uint8], Tensor[(8, 4, 3), float32], Tensor[(8, 4, 3), int64], Tensor[(1, 1386), uint8], Tensor[(4, 44), uint16], Tensor[(240), float64], Tensor[(28, 4), float64]) {
  %451 = cast(%var_7791, dtype="uint8") /* ty=Tensor[(128), uint8] */;
  %452 = cast(%var_7791, dtype="uint8") /* ty=Tensor[(128), uint8] */;
  %453 = reshape(%451, newshape=[8, 8, 2]) /* ty=Tensor[(8, 8, 2), uint8] */;
  %454 = reshape(%452, newshape=[8, 8, 2]) /* ty=Tensor[(8, 8, 2), uint8] */;
  %455 = @func_7211() /* ty=(Tensor[(8, 4, 3), int64],) */;
  %456 = %455.0;
  %457 = cast(%456, dtype="float32") /* ty=Tensor[(8, 4, 3), float32] */;
  %458 = cast(meta[relay.Constant][44] /* ty=Tensor[(4, 44), uint16] */, dtype="uint16") /* ty=Tensor[(4, 44), uint16] */;
  %459 = cast(meta[relay.Constant][45] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %460 = cast(%var_7818, dtype="float64") /* ty=Tensor[(28, 4), float64] */;
  %461 = reshape(%458, newshape=[2, 11, 8]) /* ty=Tensor[(2, 11, 8), uint16] */;
  %462 = reshape(%459, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %463 = reshape(%460, newshape=[112]) /* ty=Tensor[(112), float64] */;
  %464 = @func_4124(%461, %462, %463) /* ty=(Tensor[(2, 11, 8), uint16], Tensor[(240), float64], Tensor[(9, 11, 14), uint8], Tensor[(1, 1386), uint8], Tensor[(8, 6, 9), int16], Tensor[(112), float64], Tensor[(10, 6, 4), float64]) */;
  %465 = @func_2962(%453, %454) /* ty=Tensor[(8, 8, 2), uint8] */;
  %466 = asin(%457) /* ty=Tensor[(8, 4, 3), float32] */;
  %467 = @func_7399() /* ty=Tensor[(8, 4, 3), int64] */;
  %468 = %464.3;
  (%465, %var_7791, %466, %467, %468, meta[relay.Constant][44] /* ty=Tensor[(4, 44), uint16] */, meta[relay.Constant][45] /* ty=Tensor[(240), float64] */, %var_7818)
}

def @func_8118(%var_8092: Tensor[(72), float32], %var_8095: Tensor[(120, 2), float64], %var_8101: Tensor[(135), int8]) -> (Tensor[(8, 4, 3), float64], Tensor[(2, 10, 3), float32], Tensor[(72), float32], Tensor[(20), float32], Tensor[(60), float32], Tensor[(120, 2), float64], Tensor[(40, 26), int32], Tensor[(1, 112), uint64], Tensor[(135), int8]) {
  %469 = @func_7778() /* ty=(Tensor[(8, 4, 3), float64],) */;
  %470 = cast(%var_8092, dtype="float32") /* ty=Tensor[(72), float32] */;
  %471 = cast(meta[relay.Constant][46] /* ty=Tensor[(20), float32] */, dtype="float32") /* ty=Tensor[(20), float32] */;
  %472 = cast(meta[relay.Constant][47] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %473 = cast(%var_8095, dtype="float64") /* ty=Tensor[(120, 2), float64] */;
  %474 = cast(meta[relay.Constant][48] /* ty=Tensor[(40, 26), int32] */, dtype="int32") /* ty=Tensor[(40, 26), int32] */;
  %475 = reshape(%470, newshape=[1, 9, 8]) /* ty=Tensor[(1, 9, 8), float32] */;
  %476 = reshape(%471, newshape=[5, 4]) /* ty=Tensor[(5, 4), float32] */;
  %477 = reshape(%472, newshape=[1, 60]) /* ty=Tensor[(1, 60), float32] */;
  %478 = reshape(%473, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %479 = reshape(%474, newshape=[1040]) /* ty=Tensor[(1040), int32] */;
  %480 = @func_3637(%475, %476, %477, %478, %479) /* ty=(Tensor[(?, 9, 8), float32], Tensor[(2, 10, 3), float32], Tensor[(5, 4), float32], Tensor[(1, 60), float32], Tensor[(1, 117), int8], Tensor[(240), float64], float64, Tensor[(1040), int32]) */;
  %481 = cast(%var_8101, dtype="int8") /* ty=Tensor[(135), int8] */;
  %482 = reshape(%481, newshape=[5, 3, 9]) /* ty=Tensor[(5, 3, 9), int8] */;
  %483 = @func_2184(%482) /* ty=(Tensor[(5, 3, 9), int8], Tensor[(5, 3, 9), bool], Tensor[(8, 14, 1), float32], Tensor[(1, 112), uint64]) */;
  %484 = %469.0;
  %485 = %480.1;
  %486 = %483.3;
  (%484, %485, %var_8092, meta[relay.Constant][46] /* ty=Tensor[(20), float32] */, meta[relay.Constant][47] /* ty=Tensor[(60), float32] */, %var_8095, meta[relay.Constant][48] /* ty=Tensor[(40, 26), int32] */, %486, %var_8101)
}

def @func_5250(%var_5223: Tensor[(5, 1, 12), uint8], %var_5247: Tensor[(7, 198), uint8]) -> (Tensor[(5, 1, 12), uint8], Tensor[(9, 11, 14), uint8], Tensor[(7, 198), uint8]) {
  %487 = cast(meta[relay.Constant][49] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %488 = cast(%var_5223, dtype="uint8") /* ty=Tensor[(5, 1, 12), uint8] */;
  %489 = cast(%var_5247, dtype="uint8") /* ty=Tensor[(7, 198), uint8] */;
  %490 = reshape(%489, newshape=[9, 11, 14]) /* ty=Tensor[(9, 11, 14), uint8] */;
  %491 = @func_597(%490) /* ty=(Tensor[(9, 11, 14), uint8],) */;
  %492 = add(%487, %488) /* ty=Tensor[(5, 1, 12), uint8] */;
  %493 = %491.0;
  (%492, %493, %var_5247)
}

def @func_7682(%var_7652: Tensor[(11, 10, 12), float32], %var_7677: Tensor[(2160), float64]) -> (Tensor[(11, 10, 12), float32], Tensor[(8, 6, 13), bool], Tensor[(48), float64], Tensor[(624), float64], Tensor[(9, 16, 15), float64], Tensor[(2160), float64]) {
  %494 = cast(%var_7652, dtype="float32") /* ty=Tensor[(11, 10, 12), float32] */;
  %495 = cast(meta[relay.Constant][50] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %496 = cast(meta[relay.Constant][51] /* ty=Tensor[(624), float64] */, dtype="float64") /* ty=Tensor[(624), float64] */;
  %497 = reshape(%495, newshape=[8, 6, 1]) /* ty=Tensor[(8, 6, 1), float64] */;
  %498 = reshape(%496, newshape=[8, 6, 13]) /* ty=Tensor[(8, 6, 13), float64] */;
  %499 = @func_7341(%497, %498) /* ty=(Tensor[(8, 6, 13), bool],) */;
  %500 = cast(%var_7677, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %501 = reshape(%500, newshape=[2160]) /* ty=Tensor[(2160), float64] */;
  %502 = @func_7631(%501) /* ty=(Tensor[(8, 4, 3), int64], Tensor[(9, 16, 15), float64], Tensor[(2160), float64]) */;
  %503 = acos(%494) /* ty=Tensor[(11, 10, 12), float32] */;
  %504 = %499.0;
  %505 = %502.1;
  (%503, %504, meta[relay.Constant][50] /* ty=Tensor[(48), float64] */, meta[relay.Constant][51] /* ty=Tensor[(624), float64] */, %505, %var_7677)
}

def @func_8536(%var_8496: Tensor[(8, 4, 3), int64]) -> (Tensor[(8, 4, 3), int64],) {
  %506 = @func_7211() /* ty=(Tensor[(8, 4, 3), int64],) */;
  %507 = %506.0;
  %508 = cast(%var_8496, dtype="bool") /* ty=Tensor[(8, 4, 3), bool] */;
  %509 = shape_of(%507, dtype="int32") /* ty=Tensor[(3), int32] */;
  %510 = cast(%507, dtype="bool") /* ty=Tensor[(8, 4, 3), bool] */;
  %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %512 = logical_and(%510, %511) /* ty=Tensor[(8, 4, 3), bool] */;
  %513 = cast(%507, dtype="int64") /* ty=Tensor[(8, 4, 3), int64] */;
  %514 = shape_of(%512, dtype="int32") /* ty=Tensor[(3), int32] */;
  %515 = cast(%512, dtype="int64") /* ty=Tensor[(8, 4, 3), int64] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %517 = add(%515, %516) /* ty=Tensor[(8, 4, 3), int64] */;
  (%517,)
}

def @func_742(%var_735: Tensor[(1, 16, 7), float64]) -> (Tensor[(6, 16, 7), float64], Tensor[(6, 16, 7), float64]) {
  %518 = cast(%var_735, dtype="float64") /* ty=Tensor[(1, 16, 7), float64] */;
  %519 = cast(meta[relay.Constant][52] /* ty=Tensor[(6, 16, 7), float64] */, dtype="float64") /* ty=Tensor[(6, 16, 7), float64] */;
  %520 = cast(meta[relay.Constant][52] /* ty=Tensor[(6, 16, 7), float64] */, dtype="float64") /* ty=Tensor[(6, 16, 7), float64] */;
  %521 = divide(%518, %519) /* ty=Tensor[(6, 16, 7), float64] */;
  %522 = sigmoid(%520) /* ty=Tensor[(6, 16, 7), float64] */;
  (%521, %522)
}

def @func_2962(%var_2956: Tensor[(8, 8, 2), uint8], %var_2957: Tensor[(8, 8, 2), uint8]) -> Tensor[(8, 8, 2), uint8] {
  %523 = cast(%var_2957, dtype="uint8") /* ty=Tensor[(8, 8, 2), uint8] */;
  %524 = shape_of(%var_2956, dtype="int32") /* ty=Tensor[(3), int32] */;
  %525 = cast(%var_2956, dtype="uint8") /* ty=Tensor[(8, 8, 2), uint8] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_or(%525, %526) /* ty=Tensor[(8, 8, 2), uint8] */
}

def @func_2655(%var_2609: Tensor[(8, 16, 11), uint16], %var_2610: Tensor[(8, 16, 11), uint16]) -> (Tensor[(8, 16, 11), float64], Tensor[(8, 10, 13), int32], Tensor[(1040), int32]) {
  %527 = cast(%var_2610, dtype="bool") /* ty=Tensor[(8, 16, 11), bool] */;
  %528 = shape_of(%var_2609, dtype="int32") /* ty=Tensor[(3), int32] */;
  %529 = cast(%var_2609, dtype="bool") /* ty=Tensor[(8, 16, 11), bool] */;
  %530 = dyn.reshape(%527, %528, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %531 = greater_equal(%529, %530) /* ty=Tensor[(8, 16, 11), bool] */;
  %532 = cast(%531, dtype="float64") /* ty=Tensor[(8, 16, 11), float64] */;
  %533 = cast(meta[relay.Constant][53] /* ty=Tensor[(1040), int32] */, dtype="int32") /* ty=Tensor[(1040), int32] */;
  %534 = reshape(%533, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), int32] */;
  %535 = @func_1264(%534) /* ty=(Tensor[(8, 10, 13), int32], Tensor[(9, 11, 14), uint8], Tensor[(1386), uint8]) */;
  %536 = asin(%532) /* ty=Tensor[(8, 16, 11), float64] */;
  %537 = %535.0;
  (%536, %537, meta[relay.Constant][53] /* ty=Tensor[(1040), int32] */)
}

def @func_1264(%var_1253: Tensor[(8, 10, 13), int32]) -> (Tensor[(8, 10, 13), int32], Tensor[(9, 11, 14), uint8], Tensor[(1386), uint8]) {
  %538 = cast(meta[relay.Constant][54] /* ty=Tensor[(8, 10, 13), int32] */, dtype="int32") /* ty=Tensor[(8, 10, 13), int32] */;
  %539 = shape_of(%var_1253, dtype="int32") /* ty=Tensor[(3), int32] */;
  %540 = cast(%var_1253, dtype="int32") /* ty=Tensor[(8, 10, 13), int32] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %542 = cast(meta[relay.Constant][55] /* ty=Tensor[(1386), uint8] */, dtype="uint8") /* ty=Tensor[(1386), uint8] */;
  %543 = reshape(%542, newshape=[9, 11, 14]) /* ty=Tensor[(9, 11, 14), uint8] */;
  %544 = @func_597(%543) /* ty=(Tensor[(9, 11, 14), uint8],) */;
  %545 = left_shift(%540, %541) /* ty=Tensor[(8, 10, 13), int32] */;
  %546 = %544.0;
  (%545, %546, meta[relay.Constant][55] /* ty=Tensor[(1386), uint8] */)
}

def @func_5931(%var_5909: Tensor[(16, 5, 2), float32], %var_5920: Tensor[(240), float64]) -> (Tensor[(16, 5, 2), float32], Tensor[(56, 2), float64], Tensor[(117), int8], Tensor[(240), float64], float64) {
  %547 = cast(%var_5909, dtype="float32") /* ty=Tensor[(16, 5, 2), float32] */;
  %548 = cast(meta[relay.Constant][56] /* ty=Tensor[(117), int8] */, dtype="int8") /* ty=Tensor[(117), int8] */;
  %549 = cast(meta[relay.Constant][56] /* ty=Tensor[(117), int8] */, dtype="int8") /* ty=Tensor[(117), int8] */;
  %550 = cast(%var_5920, dtype="float64") /* ty=Tensor[(240), float64] */;
  %551 = cast(-0.979457f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %552 = cast(%var_5920, dtype="float64") /* ty=Tensor[(240), float64] */;
  %553 = reshape(%548, newshape=[13, 3, 3]) /* ty=Tensor[(13, 3, 3), int8] */;
  %554 = reshape(%549, newshape=[13, 3, 3]) /* ty=Tensor[(13, 3, 3), int8] */;
  %555 = reshape(%550, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %556 = reshape(%551, newshape=[]) /* ty=float64 */;
  %557 = reshape(%552, newshape=[10, 6, 4]) /* ty=Tensor[(10, 6, 4), float64] */;
  %558 = @func_832(%553, %554, %555, %556, %557) /* ty=(Tensor[(13, 3, 3), float64], Tensor[(240), float64], Tensor[(8, 14, 1), float32], float64, Tensor[(56, 2), float64], Tensor[(10, 6, 4), float64]) */;
  %559 = atanh(%547) /* ty=Tensor[(16, 5, 2), float32] */;
  %560 = %558.4;
  (%559, %560, meta[relay.Constant][56] /* ty=Tensor[(117), int8] */, %var_5920, -0.979457f64 /* ty=float64 */)
}

def @func_7243(%var_7240: Tensor[(4, 15, 2), float32]) -> (Tensor[(4, 15, 2), float32],) {
  %561 = cast(%var_7240, dtype="float32") /* ty=Tensor[(4, 15, 2), float32] */;
  %562 = cos(%561) /* ty=Tensor[(4, 15, 2), float32] */;
  (%562,)
}

def @func_8693() -> Tensor[(8, 4, 3), int64] {
  @func_7399() /* ty=Tensor[(8, 4, 3), int64] */
}

def @func_9149(%var_9089: Tensor[(1386), uint8], %var_9094: Tensor[(1040), int32]) -> (Tensor[(8, 4, 3), float64], Tensor[(9, 11, 14), uint8], Tensor[(42), int64], Tensor[(1040), int32], Tensor[(9, 11, 14), bool]) {
  %563 = cast(%var_9089, dtype="uint8") /* ty=Tensor[(1386), uint8] */;
  %564 = reshape(%563, newshape=[9, 11, 14]) /* ty=Tensor[(9, 11, 14), uint8] */;
  %565 = @func_597(%564) /* ty=(Tensor[(9, 11, 14), uint8],) */;
  %566 = cast(meta[relay.Constant][57] /* ty=Tensor[(42), int64] */, dtype="int64") /* ty=Tensor[(42), int64] */;
  %567 = cast(%var_9094, dtype="int32") /* ty=Tensor[(1040), int32] */;
  %568 = reshape(%566, newshape=[7, 3, 2]) /* ty=Tensor[(7, 3, 2), int64] */;
  %569 = reshape(%567, newshape=[1040]) /* ty=Tensor[(1040), int32] */;
  %570 = @func_2524(%568, %569) /* ty=(Tensor[(7, 3, 2), int64], Tensor[(9, 11, 14), uint8], Tensor[(1040), int32]) */;
  %571 = %570.1;
  %572 = cast(%571, dtype="float64") /* ty=Tensor[(9, 11, 14), float64] */;
  %573 = tan(%572) /* ty=Tensor[(9, 11, 14), float64] */;
  %574 = cast(%var_9089, dtype="bool") /* ty=Tensor[(1386), bool] */;
  %575 = shape_of(%573, dtype="int32") /* ty=Tensor[(3), int32] */;
  %576 = cast(%573, dtype="bool") /* ty=Tensor[(9, 11, 14), bool] */;
  %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %578 = @func_7872() /* ty=Tensor[(8, 4, 3), float64] */;
  %579 = %565.0;
  %580 = equal(%576, %577) /* ty=Tensor[(9, 11, 14), bool] */;
  (%578, %579, meta[relay.Constant][57] /* ty=Tensor[(42), int64] */, %var_9094, %580)
}

def @func_7631(%var_7629: Tensor[(2160), float64]) -> (Tensor[(8, 4, 3), int64], Tensor[(9, 16, 15), float64], Tensor[(2160), float64]) {
  %581 = @func_7211() /* ty=(Tensor[(8, 4, 3), int64],) */;
  %582 = cast(%var_7629, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %583 = reshape(%582, newshape=[9, 16, 15]) /* ty=Tensor[(9, 16, 15), float64] */;
  %584 = @func_1330(%583) /* ty=(Tensor[(9, 16, 15), float64],) */;
  %585 = %581.0;
  %586 = %584.0;
  (%585, %586, %var_7629)
}

def @func_2887(%var_2885: Tensor[(1, 112), float64]) -> (Tensor[(8, 6, 9), int16], Tensor[(6, 16, 7), float64], Tensor[(1, 112), float64]) {
  %587 = cast(meta[relay.Constant][59] /* ty=Tensor[(8, 6, 9), int16] */, dtype="int16") /* ty=Tensor[(8, 6, 9), int16] */;
  %588 = shape_of(meta[relay.Constant][58] /* ty=Tensor[(8, 6, 9), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %589 = cast(meta[relay.Constant][58] /* ty=Tensor[(8, 6, 9), int16] */, dtype="int16") /* ty=Tensor[(8, 6, 9), int16] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %591 = cast(%var_2885, dtype="float64") /* ty=Tensor[(1, 112), float64] */;
  %592 = reshape(%591, newshape=[1, 16, 7]) /* ty=Tensor[(1, 16, 7), float64] */;
  %593 = @func_742(%592) /* ty=(Tensor[(6, 16, 7), float64], Tensor[(6, 16, 7), float64]) */;
  %594 = multiply(%589, %590) /* ty=Tensor[(8, 6, 9), int16] */;
  %595 = %593.0;
  (%594, %595, %var_2885)
}

def @func_275(%var_225: float64, %var_226: Tensor[(8, 14, 1), float64]) -> Tensor[(8, 14, 1), float32] {
  %596 = cast(%var_225, dtype="float64") /* ty=float64 */;
  %597 = cast(%var_226, dtype="float64") /* ty=Tensor[(8, 14, 1), float64] */;
  %598 = subtract(%596, %597) /* ty=Tensor[(8, 14, 1), float64] */;
  %599 = cast(%var_225, dtype="float32") /* ty=float32 */;
  %600 = cast(%598, dtype="float32") /* ty=Tensor[(8, 14, 1), float32] */;
  floor_divide(%599, %600) /* ty=Tensor[(8, 14, 1), float32] */
}

def @func_9652() -> (Tensor[(8, 4, 3), uint64],) {
  %601 = @func_7211() /* ty=(Tensor[(8, 4, 3), int64],) */;
  %602 = %601.0;
  %603 = cast(meta[relay.Constant][60] /* ty=Tensor[(8, 4, 3), int64] */, dtype="uint64") /* ty=Tensor[(8, 4, 3), uint64] */;
  %604 = shape_of(%602, dtype="int32") /* ty=Tensor[(3), int32] */;
  %605 = cast(%602, dtype="uint64") /* ty=Tensor[(8, 4, 3), uint64] */;
  %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %607 = subtract(%605, %606) /* ty=Tensor[(8, 4, 3), uint64] */;
  (%607,)
}

def @func_7993() -> (Tensor[(8, 4, 3), float64],) {
  %608 = @func_7872() /* ty=Tensor[(8, 4, 3), float64] */;
  (%608,)
}

def @func_6115(%var_6102: uint32, %var_6110: Tensor[(216, 2), float64]) -> (Tensor[(12, 16, 9), uint32], Tensor[(12, 4, 9), float64], Tensor[(216, 2), float64]) {
  %609 = cast(%var_6102, dtype="uint32") /* ty=uint32 */;
  %610 = cast(meta[relay.Constant][61] /* ty=Tensor[(12, 16, 9), uint32] */, dtype="uint32") /* ty=Tensor[(12, 16, 9), uint32] */;
  %611 = cast(%var_6110, dtype="float64") /* ty=Tensor[(216, 2), float64] */;
  %612 = reshape(%611, newshape=[12, 4, 9]) /* ty=Tensor[(12, 4, 9), float64] */;
  %613 = @func_3469(%612) /* ty=(Tensor[(12, 4, 9), float64],) */;
  %614 = bitwise_xor(%609, %610) /* ty=Tensor[(12, 16, 9), uint32] */;
  %615 = %613.0;
  (%614, %615, %var_6110)
}

def @func_9743() -> (Tensor[(8, 4, 3), float64], Tensor[(6, 9, 16), float32], Tensor[(1, 112), float64], Tensor[(112), float64], Tensor[(864), float64]) {
  %616 = @func_7778() /* ty=(Tensor[(8, 4, 3), float64],) */;
  %617 = cast(meta[relay.Constant][62] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %618 = reshape(%617, newshape=[6, 9, 16]) /* ty=Tensor[(6, 9, 16), float32] */;
  %619 = @func_4544(%618) /* ty=(Tensor[(6, 9, 16), float32],) */;
  %620 = cast(meta[relay.Constant][63] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
  %621 = reshape(%620, newshape=[1, 112]) /* ty=Tensor[(1, 112), float64] */;
  %622 = @func_2887(%621) /* ty=(Tensor[(8, 6, 9), int16], Tensor[(6, 16, 7), float64], Tensor[(1, 112), float64]) */;
  %623 = cast(meta[relay.Constant][62] /* ty=Tensor[(864), float32] */, dtype="float64") /* ty=Tensor[(864), float64] */;
  %624 = %616.0;
  %625 = %619.0;
  %626 = %622.2;
  %627 = sqrt(%623) /* ty=Tensor[(864), float64] */;
  (%624, %625, %626, meta[relay.Constant][63] /* ty=Tensor[(112), float64] */, %627)
}

def @func_9848(%var_9792: Tensor[(8, 4, 3), int64], %var_9800: Tensor[(8, 4, 3), int64], %var_9808: Tensor[(42), int64], %var_9828: Tensor[(144), float32], %var_9845: Tensor[(1320), float32], %var_9846: Tensor[(2160), float64]) -> (Tensor[(8, 4, 3), float64], Tensor[(8, 4, 3), float64], Tensor[(9, 11, 14), uint8], Tensor[(42), int64], Tensor[(1040, 1), int32], Tensor[(4, 6, 6), bool], Tensor[(624), float64], Tensor[(1320), float32], Tensor[(2160), float64]) {
  %628 = @func_9448() /* ty=(Tensor[(8, 4, 3), int64],) */;
  %629 = %628.0;
  %630 = cast(%var_9792, dtype="float64") /* ty=Tensor[(8, 4, 3), float64] */;
  %631 = shape_of(%629, dtype="int32") /* ty=Tensor[(3), int32] */;
  %632 = cast(%629, dtype="float64") /* ty=Tensor[(8, 4, 3), float64] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %634 = cast(%var_9800, dtype="float64") /* ty=Tensor[(8, 4, 3), float64] */;
  %635 = shape_of(%629, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%629, dtype="float64") /* ty=Tensor[(8, 4, 3), float64] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %638 = cast(%var_9808, dtype="int64") /* ty=Tensor[(42), int64] */;
  %639 = cast(meta[relay.Constant][64] /* ty=Tensor[(1040, 1), int32] */, dtype="int32") /* ty=Tensor[(1040, 1), int32] */;
  %640 = reshape(%638, newshape=[7, 3, 2]) /* ty=Tensor[(7, 3, 2), int64] */;
  %641 = reshape(%639, newshape=[1040]) /* ty=Tensor[(1040), int32] */;
  %642 = @func_2524(%640, %641) /* ty=(Tensor[(7, 3, 2), int64], Tensor[(9, 11, 14), uint8], Tensor[(1040), int32]) */;
  %643 = cast(%var_9828, dtype="float32") /* ty=Tensor[(144), float32] */;
  %644 = reshape(%643, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %645 = @func_8604(%644) /* ty=(Tensor[(11, 9, 11), uint8], Tensor[(4, 6, 6), float32], Tensor[(144), float32]) */;
  %646 = %645.1;
  %647 = cast(%var_9828, dtype="bool") /* ty=Tensor[(144), bool] */;
  %648 = shape_of(%646, dtype="int32") /* ty=Tensor[(3), int32] */;
  %649 = cast(%646, dtype="bool") /* ty=Tensor[(4, 6, 6), bool] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %651 = cast(%var_9845, dtype="float32") /* ty=Tensor[(1320), float32] */;
  %652 = cast(%var_9846, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %653 = reshape(%651, newshape=[11, 10, 12]) /* ty=Tensor[(11, 10, 12), float32] */;
  %654 = reshape(%652, newshape=[2160]) /* ty=Tensor[(2160), float64] */;
  %655 = @func_7682(%653, %654) /* ty=(Tensor[(11, 10, 12), float32], Tensor[(8, 6, 13), bool], Tensor[(48), float64], Tensor[(624), float64], Tensor[(9, 16, 15), float64], Tensor[(2160), float64]) */;
  %656 = multiply(%632, %633) /* ty=Tensor[(8, 4, 3), float64] */;
  %657 = divide(%636, %637) /* ty=Tensor[(8, 4, 3), float64] */;
  %658 = %642.1;
  %659 = less(%649, %650) /* ty=Tensor[(4, 6, 6), bool] */;
  %660 = %655.3;
  (%656, %657, %658, %var_9808, meta[relay.Constant][64] /* ty=Tensor[(1040, 1), int32] */, %659, %660, %var_9845, %var_9846)
}

def @func_5670(%var_5662: Tensor[(7, 5, 10), bool]) -> Tensor[(7, 5, 10), bool] {
  %661 = cast(meta[relay.Constant][65] /* ty=Tensor[(7, 5, 10), bool] */, dtype="bool") /* ty=Tensor[(7, 5, 10), bool] */;
  %662 = shape_of(%var_5662, dtype="int32") /* ty=Tensor[(3), int32] */;
  %663 = cast(%var_5662, dtype="bool") /* ty=Tensor[(7, 5, 10), bool] */;
  %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%663, %664) /* ty=Tensor[(7, 5, 10), bool] */
}

def @func_7584(%var_7559: Tensor[(12, 1), float64]) -> (Tensor[(8, 4, 3), int64], Tensor[(9, 16, 15), float64], Tensor[(2, 1080), float64], Tensor[(3, 2, 2), int8], Tensor[(12, 1), float64], Tensor[(8, 4, 3), float64]) {
  %665 = cast(meta[relay.Constant][66] /* ty=Tensor[(2, 1080), float64] */, dtype="float64") /* ty=Tensor[(2, 1080), float64] */;
  %666 = reshape(%665, newshape=[9, 16, 15]) /* ty=Tensor[(9, 16, 15), float64] */;
  %667 = @func_1330(%666) /* ty=(Tensor[(9, 16, 15), float64],) */;
  %668 = cast(%var_7559, dtype="float64") /* ty=Tensor[(12, 1), float64] */;
  %669 = reshape(%668, newshape=[3, 2, 2]) /* ty=Tensor[(3, 2, 2), float64] */;
  %670 = @func_7399() /* ty=Tensor[(8, 4, 3), int64] */;
  %671 = cast(%670, dtype="float64") /* ty=Tensor[(8, 4, 3), float64] */;
  %672 = @func_7484() /* ty=Tensor[(8, 4, 3), int64] */;
  %673 = %667.0;
  %674 = @func_967(%669) /* ty=Tensor[(3, 2, 2), int8] */;
  %675 = log(%671) /* ty=Tensor[(8, 4, 3), float64] */;
  (%672, %673, meta[relay.Constant][66] /* ty=Tensor[(2, 1080), float64] */, %674, %var_7559, %675)
}

def @func_706(%var_697: Tensor[(10, 6, 4), float64]) -> (Tensor[(10, 6, 4), float64],) {
  %676 = cast(%var_697, dtype="float64") /* ty=Tensor[(10, 6, 4), float64] */;
  %677 = sin(%676) /* ty=Tensor[(10, 6, 4), float64] */;
  (%677,)
}

def @func_7484() -> Tensor[(8, 4, 3), int64] {
  %678 = @func_7211() /* ty=(Tensor[(8, 4, 3), int64],) */;
  %678.0
}

def @func_7399() -> Tensor[(8, 4, 3), int64] {
  %679 = @func_7211() /* ty=(Tensor[(8, 4, 3), int64],) */;
  %679.0
}

def @func_9571(%var_9562: Tensor[(8, 4, 3), int64]) -> Tensor[(8, 4, 3), int8] {
  %680 = @func_8375() /* ty=Tensor[(8, 4, 3), int64] */;
  %681 = cast(%var_9562, dtype="int8") /* ty=Tensor[(8, 4, 3), int8] */;
  %682 = shape_of(%680, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(%680, dtype="int8") /* ty=Tensor[(8, 4, 3), int8] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_or(%683, %684) /* ty=Tensor[(8, 4, 3), int8] */
}

def @func_8329(%var_8326: Tensor[(13, 2, 12), float64]) -> Tensor[(13, 2, 12), float64] {
  %685 = cast(%var_8326, dtype="float64") /* ty=Tensor[(13, 2, 12), float64] */;
  acos(%685) /* ty=Tensor[(13, 2, 12), float64] */
}

def @func_1330(%var_1321: Tensor[(9, 16, 15), float64]) -> (Tensor[(9, 16, 15), float64],) {
  %686 = cast(%var_1321, dtype="float64") /* ty=Tensor[(9, 16, 15), float64] */;
  %687 = cos(%686) /* ty=Tensor[(9, 16, 15), float64] */;
  (%687,)
}

def @func_6714(%var_6685: Tensor[(13, 4, 4), int64], %var_6686: Tensor[(13, 4, 4), int64]) -> Tensor[(13, 4, 4), int64] {
  %688 = cast(%var_6686, dtype="int64") /* ty=Tensor[(13, 4, 4), int64] */;
  %689 = shape_of(%var_6685, dtype="int32") /* ty=Tensor[(3), int32] */;
  %690 = cast(%var_6685, dtype="int64") /* ty=Tensor[(13, 4, 4), int64] */;
  %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  logical_xor(%690, %691) /* ty=Tensor[(13, 4, 4), int64] */
}

def @func_8386() -> (Tensor[(11, 9, 11), uint8],) {
  %692 = @func_8353() /* ty=Tensor[(11, 9, 11), uint8] */;
  (%692,)
}

def @func_1510(%var_1485: float64, %var_1486: Tensor[(11, 14, 12), float64]) -> (Tensor[(11, 14, 12), float64], Tensor[(9, 11, 14), uint8], Tensor[(1386), uint8], Tensor[(1386), uint8], Tensor[(1040), int32]) {
  %693 = cast(%var_1485, dtype="float64") /* ty=float64 */;
  %694 = cast(%var_1486, dtype="float64") /* ty=Tensor[(11, 14, 12), float64] */;
  %695 = cast(meta[relay.Constant][67] /* ty=Tensor[(1386), uint8] */, dtype="uint8") /* ty=Tensor[(1386), uint8] */;
  %696 = reshape(%695, newshape=[9, 11, 14]) /* ty=Tensor[(9, 11, 14), uint8] */;
  %697 = @func_597(%696) /* ty=(Tensor[(9, 11, 14), uint8],) */;
  %698 = cast(meta[relay.Constant][68] /* ty=Tensor[(1040), int32] */, dtype="int32") /* ty=Tensor[(1040), int32] */;
  %699 = reshape(%698, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), int32] */;
  %700 = @func_1264(%699) /* ty=(Tensor[(8, 10, 13), int32], Tensor[(9, 11, 14), uint8], Tensor[(1386), uint8]) */;
  %701 = floor_mod(%693, %694) /* ty=Tensor[(11, 14, 12), float64] */;
  %702 = %697.0;
  %703 = %700.2;
  (%701, %702, meta[relay.Constant][67] /* ty=Tensor[(1386), uint8] */, %703, meta[relay.Constant][68] /* ty=Tensor[(1040), int32] */)
}

def @func_4348(%var_4308: Tensor[(11, 8, 1), float32], %var_4329: Tensor[(11, 8, 14), float32], %var_4336: Tensor[(624), int32], %var_4337: Tensor[(117), int8], %var_4338: Tensor[(240), float64]) -> (Tensor[(11, 8, 14), int64], Tensor[(624), int32], Tensor[(117), int8], Tensor[(240), float64], float64, Tensor[(11, 8, 117), bool]) {
  %704 = cast(%var_4308, dtype="float32") /* ty=Tensor[(11, 8, 1), float32] */;
  %705 = sinh(%704) /* ty=Tensor[(11, 8, 1), float32] */;
  %706 = cast(%705, dtype="int64") /* ty=Tensor[(11, 8, 1), int64] */;
  %707 = cast(%var_4329, dtype="int64") /* ty=Tensor[(11, 8, 14), int64] */;
  %708 = cast(%705, dtype="float32") /* ty=Tensor[(11, 8, 1), float32] */;
  %709 = asinh(%708) /* ty=Tensor[(11, 8, 1), float32] */;
  %710 = cast(%var_4336, dtype="int32") /* ty=Tensor[(624), int32] */;
  %711 = cast(%var_4337, dtype="int8") /* ty=Tensor[(117), int8] */;
  %712 = cast(%var_4338, dtype="float64") /* ty=Tensor[(240), float64] */;
  %713 = cast(1.47186f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %714 = reshape(%710, newshape=[8, 13, 6]) /* ty=Tensor[(8, 13, 6), int32] */;
  %715 = reshape(%711, newshape=[117]) /* ty=Tensor[(117), int8] */;
  %716 = reshape(%712, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %717 = reshape(%713, newshape=[]) /* ty=float64 */;
  %718 = @func_1701(%714, %715, %716, %717) /* ty=(Tensor[(8, 13, 6), int32], Tensor[(240), float64], Tensor[(117), int8], Tensor[(240), float64], float64, Tensor[(3, 2, 2), int8], Tensor[(12), float64], Tensor[(10, 6, 4), float64], Tensor[(8, 13, 6), float32], Tensor[(1040), int32], Tensor[(1, 1848), float64]) */;
  %719 = %718.2;
  %720 = cast(%709, dtype="bool") /* ty=Tensor[(11, 8, 1), bool] */;
  %721 = cast(%719, dtype="bool") /* ty=Tensor[(117), bool] */;
  %722 = bitwise_or(%706, %707) /* ty=Tensor[(11, 8, 14), int64] */;
  %723 = logical_and(%720, %721) /* ty=Tensor[(11, 8, 117), bool] */;
  (%722, %var_4336, %var_4337, %var_4338, 1.47186f64 /* ty=float64 */, %723)
}

def @func_4544(%var_4534: Tensor[(6, 9, 16), float32]) -> (Tensor[(6, 9, 16), float32],) {
  %724 = cast(%var_4534, dtype="float32") /* ty=Tensor[(6, 9, 16), float32] */;
  %725 = sqrt(%724) /* ty=Tensor[(6, 9, 16), float32] */;
  (%725,)
}

def @func_8430(%var_8410: Tensor[(312), float64]) -> (Tensor[(8, 4, 3), bool], Tensor[(13, 2, 12), float64], Tensor[(312), float64], Tensor[(8, 4, 3), int64]) {
  %726 = @func_8375() /* ty=Tensor[(8, 4, 3), int64] */;
  %727 = cast(meta[relay.Constant][69] /* ty=Tensor[(8, 4, 3), int64] */, dtype="bool") /* ty=Tensor[(8, 4, 3), bool] */;
  %728 = shape_of(%726, dtype="int32") /* ty=Tensor[(3), int32] */;
  %729 = cast(%726, dtype="bool") /* ty=Tensor[(8, 4, 3), bool] */;
  %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %731 = cast(%var_8410, dtype="float64") /* ty=Tensor[(312), float64] */;
  %732 = reshape(%731, newshape=[13, 2, 12]) /* ty=Tensor[(13, 2, 12), float64] */;
  %733 = greater(%729, %730) /* ty=Tensor[(8, 4, 3), bool] */;
  %734 = @func_8329(%732) /* ty=Tensor[(13, 2, 12), float64] */;
  %735 = @func_7484() /* ty=Tensor[(8, 4, 3), int64] */;
  (%733, %734, %var_8410, %735)
}

def @func_4124(%var_4082: Tensor[(2, 11, 8), uint16], %var_4090: Tensor[(240), float64], %var_4116: Tensor[(112), float64]) -> (Tensor[(2, 11, 8), uint16], Tensor[(240), float64], Tensor[(9, 11, 14), uint8], Tensor[(1, 1386), uint8], Tensor[(8, 6, 9), int16], Tensor[(112), float64], Tensor[(10, 6, 4), float64]) {
  %736 = cast(meta[relay.Constant][70] /* ty=Tensor[(2, 11, 8), uint16] */, dtype="uint16") /* ty=Tensor[(2, 11, 8), uint16] */;
  %737 = shape_of(%var_4082, dtype="int32") /* ty=Tensor[(3), int32] */;
  %738 = cast(%var_4082, dtype="uint16") /* ty=Tensor[(2, 11, 8), uint16] */;
  %739 = dyn.reshape(%736, %737, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %740 = cast(meta[relay.Constant][71] /* ty=Tensor[(1, 1386), uint8] */, dtype="uint8") /* ty=Tensor[(1, 1386), uint8] */;
  %741 = reshape(%740, newshape=[9, 11, 14]) /* ty=Tensor[(9, 11, 14), uint8] */;
  %742 = @func_597(%741) /* ty=(Tensor[(9, 11, 14), uint8],) */;
  %743 = cast(%var_4116, dtype="float64") /* ty=Tensor[(112), float64] */;
  %744 = reshape(%743, newshape=[1, 112]) /* ty=Tensor[(1, 112), float64] */;
  %745 = @func_2887(%744) /* ty=(Tensor[(8, 6, 9), int16], Tensor[(6, 16, 7), float64], Tensor[(1, 112), float64]) */;
  %746 = cast(%var_4090, dtype="float64") /* ty=Tensor[(240), float64] */;
  %747 = reshape(%746, newshape=[10, 6, 4]) /* ty=Tensor[(10, 6, 4), float64] */;
  %748 = @func_706(%747) /* ty=(Tensor[(10, 6, 4), float64],) */;
  %749 = %748.0;
  %750 = cast(%749, dtype="float64") /* ty=Tensor[(10, 6, 4), float64] */;
  %751 = atanh(%750) /* ty=Tensor[(10, 6, 4), float64] */;
  %752 = cast(%751, dtype="float64") /* ty=Tensor[(10, 6, 4), float64] */;
  %753 = bitwise_or(%738, %739) /* ty=Tensor[(2, 11, 8), uint16] */;
  %754 = %742.0;
  %755 = %745.0;
  %756 = acosh(%752) /* ty=Tensor[(10, 6, 4), float64] */;
  (%753, %var_4090, %754, meta[relay.Constant][71] /* ty=Tensor[(1, 1386), uint8] */, %755, %var_4116, %756)
}

def @func_5443(%var_5440: Tensor[(4, 6, 6), float32]) -> (Tensor[(4, 6, 6), float32],) {
  %757 = cast(%var_5440, dtype="float32") /* ty=Tensor[(4, 6, 6), float32] */;
  %758 = rsqrt(%757) /* ty=Tensor[(4, 6, 6), float32] */;
  (%758,)
}

def @func_2184(%var_2145: Tensor[(5, 3, 9), int8]) -> (Tensor[(5, 3, 9), int8], Tensor[(5, 3, 9), bool], Tensor[(8, 14, 1), float32], Tensor[(1, 112), uint64]) {
  %759 = cast(meta[relay.Constant][72] /* ty=Tensor[(5, 3, 1), int8] */, dtype="int8") /* ty=Tensor[(5, 3, 1), int8] */;
  %760 = cast(%var_2145, dtype="int8") /* ty=Tensor[(5, 3, 9), int8] */;
  %761 = cast(%var_2145, dtype="bool") /* ty=Tensor[(5, 3, 9), bool] */;
  %762 = cast(meta[relay.Constant][72] /* ty=Tensor[(5, 3, 1), int8] */, dtype="bool") /* ty=Tensor[(5, 3, 1), bool] */;
  %763 = cast(0.313337f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %764 = cast(meta[relay.Constant][73] /* ty=Tensor[(1, 112), float64] */, dtype="float64") /* ty=Tensor[(1, 112), float64] */;
  %765 = reshape(%763, newshape=[]) /* ty=float64 */;
  %766 = reshape(%764, newshape=[8, 14, 1]) /* ty=Tensor[(8, 14, 1), float64] */;
  %767 = cast(0.313337f64 /* ty=float64 */, dtype="uint64") /* ty=uint64 */;
  %768 = cast(meta[relay.Constant][73] /* ty=Tensor[(1, 112), float64] */, dtype="uint64") /* ty=Tensor[(1, 112), uint64] */;
  %769 = multiply(%759, %760) /* ty=Tensor[(5, 3, 9), int8] */;
  %770 = logical_or(%761, %762) /* ty=Tensor[(5, 3, 9), bool] */;
  %771 = @func_275(%765, %766) /* ty=Tensor[(8, 14, 1), float32] */;
  %772 = bitwise_xor(%767, %768) /* ty=Tensor[(1, 112), uint64] */;
  (%769, %770, %771, %772)
}

def @func_597(%var_588: Tensor[(9, 11, 14), uint8]) -> (Tensor[(9, 11, 14), uint8],) {
  %773 = cast(meta[relay.Constant][74] /* ty=Tensor[(9, 11, 14), uint8] */, dtype="uint8") /* ty=Tensor[(9, 11, 14), uint8] */;
  %774 = shape_of(%var_588, dtype="int32") /* ty=Tensor[(3), int32] */;
  %775 = cast(%var_588, dtype="uint8") /* ty=Tensor[(9, 11, 14), uint8] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %777 = minimum(%775, %776) /* ty=Tensor[(9, 11, 14), uint8] */;
  (%777,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_8375() -> Tensor[(8, 4, 3), int64] {
  @func_7399() /* ty=Tensor[(8, 4, 3), int64] */
}

def @func_7345(%var_7343: Tensor[(8, 6, 1), float64], %var_7344: Tensor[(8, 6, 13), float64]) -> (Tensor[(8, 6, 13), bool],) {
  @func_7341(%var_7343, %var_7344) /* ty=(Tensor[(8, 6, 13), bool],) */
}

def @func_7874() -> Tensor[(8, 4, 3), float64] {
  @func_7872() /* ty=Tensor[(8, 4, 3), float64] */
}

def @func_8377() -> Tensor[(8, 4, 3), int64] {
  @func_8375() /* ty=Tensor[(8, 4, 3), int64] */
}

def @func_8695() -> Tensor[(8, 4, 3), int64] {
  @func_8693() /* ty=Tensor[(8, 4, 3), int64] */
}

def @func_9605(%var_9600: Tensor[(13, 16, 14), float32]) -> Tensor[(13, 16, 14), float32] {
  %0 = cast(%var_9600, dtype="float32") /* ty=Tensor[(13, 16, 14), float32] */;
  exp(%0) /* ty=Tensor[(13, 16, 14), float32] */
}

def @func_2527(%var_2525: Tensor[(7, 3, 2), int64], %var_2526: Tensor[(1040), int32]) -> (Tensor[(7, 3, 2), int64], Tensor[(9, 11, 14), uint8], Tensor[(1040), int32]) {
  %10 = fn (%var_2509: Tensor[(7, 3, 2), int64], %var_2519: Tensor[(1040), int32]) -> (Tensor[(7, 3, 2), int64], Tensor[(9, 11, 14), uint8], Tensor[(1040), int32]) {
    %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(7, 3, 2), int64] */, dtype="int64") /* ty=Tensor[(7, 3, 2), int64] */;
    %2 = shape_of(%var_2509, dtype="int32") /* ty=Tensor[(3), int32] */;
    %3 = cast(%var_2509, dtype="int64") /* ty=Tensor[(7, 3, 2), int64] */;
    %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %5 = cast(%var_2519, dtype="int32") /* ty=Tensor[(1040), int32] */;
    %6 = reshape(%5, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), int32] */;
    %7 = @func_1264(%6) /* ty=(Tensor[(8, 10, 13), int32], Tensor[(9, 11, 14), uint8], Tensor[(1386), uint8]) */;
    %8 = logical_xor(%3, %4) /* ty=Tensor[(7, 3, 2), int64] */;
    %9 = %7.1;
    (%8, %9, %var_2519)
  };
  %10(%var_2525, %var_2526) /* ty=(Tensor[(7, 3, 2), int64], Tensor[(9, 11, 14), uint8], Tensor[(1040), int32]) */
}

def @func_4001(%var_4000: Tensor[(2, 12, 3), float64]) -> Tensor[(2, 12, 3), float64] {
  %12 = fn (%var_3995: Tensor[(2, 12, 3), float64]) -> Tensor[(2, 12, 3), float64] {
    %11 = cast(%var_3995, dtype="float64") /* ty=Tensor[(2, 12, 3), float64] */;
    cos(%11) /* ty=Tensor[(2, 12, 3), float64] */
  };
  %12(%var_4000) /* ty=Tensor[(2, 12, 3), float64] */
}

def @func_7243(%var_7240: Tensor[(4, 15, 2), float32]) -> (Tensor[(4, 15, 2), float32],) {
  %13 = cast(%var_7240, dtype="float32") /* ty=Tensor[(4, 15, 2), float32] */;
  %14 = cos(%13) /* ty=Tensor[(4, 15, 2), float32] */;
  (%14,)
}

def @func_7213() -> (Tensor[(8, 4, 3), int64],) {
  @func_7211() /* ty=(Tensor[(8, 4, 3), int64],) */
}

def @func_4348(%var_4308: Tensor[(11, 8, 1), float32], %var_4329: Tensor[(11, 8, 14), float32], %var_4336: Tensor[(624), int32], %var_4337: Tensor[(117), int8], %var_4338: Tensor[(240), float64]) -> (Tensor[(11, 8, 14), int64], Tensor[(624), int32], Tensor[(117), int8], Tensor[(240), float64], float64, Tensor[(11, 8, 117), bool]) {
  %15 = cast(%var_4308, dtype="float32") /* ty=Tensor[(11, 8, 1), float32] */;
  %16 = sinh(%15) /* ty=Tensor[(11, 8, 1), float32] */;
  %17 = cast(%16, dtype="int64") /* ty=Tensor[(11, 8, 1), int64] */;
  %18 = cast(%var_4329, dtype="int64") /* ty=Tensor[(11, 8, 14), int64] */;
  %19 = cast(%16, dtype="float32") /* ty=Tensor[(11, 8, 1), float32] */;
  %20 = asinh(%19) /* ty=Tensor[(11, 8, 1), float32] */;
  %21 = cast(%var_4336, dtype="int32") /* ty=Tensor[(624), int32] */;
  %22 = cast(%var_4337, dtype="int8") /* ty=Tensor[(117), int8] */;
  %23 = cast(%var_4338, dtype="float64") /* ty=Tensor[(240), float64] */;
  %24 = cast(1.47186f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %25 = reshape(%21, newshape=[8, 13, 6]) /* ty=Tensor[(8, 13, 6), int32] */;
  %26 = reshape(%22, newshape=[117]) /* ty=Tensor[(117), int8] */;
  %27 = reshape(%23, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %28 = reshape(%24, newshape=[]) /* ty=float64 */;
  %29 = @func_1701(%25, %26, %27, %28) /* ty=(Tensor[(8, 13, 6), int32], Tensor[(240), float64], Tensor[(117), int8], Tensor[(240), float64], float64, Tensor[(3, 2, 2), int8], Tensor[(12), float64], Tensor[(10, 6, 4), float64], Tensor[(8, 13, 6), float32], Tensor[(1040), int32], Tensor[(1, 1848), float64]) */;
  %30 = %29.2;
  %31 = cast(%20, dtype="bool") /* ty=Tensor[(11, 8, 1), bool] */;
  %32 = cast(%30, dtype="bool") /* ty=Tensor[(117), bool] */;
  %33 = bitwise_or(%17, %18) /* ty=Tensor[(11, 8, 14), int64] */;
  %34 = logical_and(%31, %32) /* ty=Tensor[(11, 8, 117), bool] */;
  (%33, %var_4336, %var_4337, %var_4338, 1.47186f64 /* ty=float64 */, %34)
}

def @func_6226(%var_6225: Tensor[(10, 5, 10), int8]) -> Tensor[(10, 5, 10), bool] {
  %44 = fn (%var_6204: Tensor[(10, 5, 10), int8]) -> Tensor[(10, 5, 10), bool] {
    %35 = cast(%var_6204, dtype="int8") /* ty=Tensor[(10, 5, 10), int8] */;
    %36 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(10, 5, 10), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %37 = cast(meta[relay.Constant][1] /* ty=Tensor[(10, 5, 10), int8] */, dtype="int8") /* ty=Tensor[(10, 5, 10), int8] */;
    %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %39 = right_shift(%37, %38) /* ty=Tensor[(10, 5, 10), int8] */;
    %40 = cast(%var_6204, dtype="bool") /* ty=Tensor[(10, 5, 10), bool] */;
    %41 = shape_of(%39, dtype="int32") /* ty=Tensor[(3), int32] */;
    %42 = cast(%39, dtype="bool") /* ty=Tensor[(10, 5, 10), bool] */;
    %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%42, %43) /* ty=Tensor[(10, 5, 10), bool] */
  };
  %44(%var_6225) /* ty=Tensor[(10, 5, 10), bool] */
}

def @func_7211() -> (Tensor[(8, 4, 3), int64],) {
  %45 = cast(meta[relay.Constant][2] /* ty=Tensor[(8, 4, 3), float32] */, dtype="float32") /* ty=Tensor[(8, 4, 3), float32] */;
  %46 = sin(%45) /* ty=Tensor[(8, 4, 3), float32] */;
  %47 = cast(meta[relay.Constant][2] /* ty=Tensor[(8, 4, 3), float32] */, dtype="int64") /* ty=Tensor[(8, 4, 3), int64] */;
  %48 = shape_of(%46, dtype="int32") /* ty=Tensor[(3), int32] */;
  %49 = cast(%46, dtype="int64") /* ty=Tensor[(8, 4, 3), int64] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %51 = logical_xor(%49, %50) /* ty=Tensor[(8, 4, 3), int64] */;
  (%51,)
}

def @func_3472(%var_3470: Tensor[(12, 4, 9), float64]) -> (Tensor[(12, 4, 9), float64],) {
  @func_3469(%var_3470) /* ty=(Tensor[(12, 4, 9), float64],) */
}

def @func_9856(%var_9850: Tensor[(8, 4, 3), int64], %var_9851: Tensor[(8, 4, 3), int64], %var_9852: Tensor[(42), int64], %var_9853: Tensor[(144), float32], %var_9854: Tensor[(1320), float32], %var_9855: Tensor[(2160), float64]) -> (Tensor[(8, 4, 3), float64], Tensor[(8, 4, 3), float64], Tensor[(9, 11, 14), uint8], Tensor[(42), int64], Tensor[(1040, 1), int32], Tensor[(4, 6, 6), bool], Tensor[(624), float64], Tensor[(1320), float32], Tensor[(2160), float64]) {
  @func_9848(%var_9850, %var_9851, %var_9852, %var_9853, %var_9854, %var_9855) /* ty=(Tensor[(8, 4, 3), float64], Tensor[(8, 4, 3), float64], Tensor[(9, 11, 14), uint8], Tensor[(42), int64], Tensor[(1040, 1), int32], Tensor[(4, 6, 6), bool], Tensor[(624), float64], Tensor[(1320), float32], Tensor[(2160), float64]) */
}

def @func_967(%var_960: Tensor[(3, 2, 2), float64]) -> Tensor[(3, 2, 2), int8] {
  %52 = cast(%var_960, dtype="float64") /* ty=Tensor[(3, 2, 2), float64] */;
  %53 = cos(%52) /* ty=Tensor[(3, 2, 2), float64] */;
  %54 = cast(%53, dtype="int8") /* ty=Tensor[(3, 2, 2), int8] */;
  %55 = shape_of(%var_960, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(%var_960, dtype="int8") /* ty=Tensor[(3, 2, 2), int8] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_and(%56, %57) /* ty=Tensor[(3, 2, 2), int8] */
}

def @func_970(%var_968: Tensor[(3, 2, 2), float64]) -> Tensor[(3, 2, 2), int8] {
  @func_967(%var_968) /* ty=Tensor[(3, 2, 2), int8] */
}

def @func_7633(%var_7632: Tensor[(2160), float64]) -> (Tensor[(8, 4, 3), int64], Tensor[(9, 16, 15), float64], Tensor[(2160), float64]) {
  %64 = fn (%var_7629: Tensor[(2160), float64]) -> (Tensor[(8, 4, 3), int64], Tensor[(9, 16, 15), float64], Tensor[(2160), float64]) {
    %58 = @func_7211() /* ty=(Tensor[(8, 4, 3), int64],) */;
    %59 = cast(%var_7629, dtype="float64") /* ty=Tensor[(2160), float64] */;
    %60 = reshape(%59, newshape=[9, 16, 15]) /* ty=Tensor[(9, 16, 15), float64] */;
    %61 = @func_1330(%60) /* ty=(Tensor[(9, 16, 15), float64],) */;
    %62 = %58.0;
    %63 = %61.0;
    (%62, %63, %var_7629)
  };
  %64(%var_7632) /* ty=(Tensor[(8, 4, 3), int64], Tensor[(9, 16, 15), float64], Tensor[(2160), float64]) */
}

def @func_2966(%var_2964: Tensor[(8, 8, 2), uint8], %var_2965: Tensor[(8, 8, 2), uint8]) -> Tensor[(8, 8, 2), uint8] {
  @func_2962(%var_2964, %var_2965) /* ty=Tensor[(8, 8, 2), uint8] */
}

def @func_744(%var_743: Tensor[(1, 16, 7), float64]) -> (Tensor[(6, 16, 7), float64], Tensor[(6, 16, 7), float64]) {
  %70 = fn (%var_735: Tensor[(1, 16, 7), float64]) -> (Tensor[(6, 16, 7), float64], Tensor[(6, 16, 7), float64]) {
    %65 = cast(%var_735, dtype="float64") /* ty=Tensor[(1, 16, 7), float64] */;
    %66 = cast(meta[relay.Constant][3] /* ty=Tensor[(6, 16, 7), float64] */, dtype="float64") /* ty=Tensor[(6, 16, 7), float64] */;
    %67 = cast(meta[relay.Constant][3] /* ty=Tensor[(6, 16, 7), float64] */, dtype="float64") /* ty=Tensor[(6, 16, 7), float64] */;
    %68 = divide(%65, %66) /* ty=Tensor[(6, 16, 7), float64] */;
    %69 = sigmoid(%67) /* ty=Tensor[(6, 16, 7), float64] */;
    (%68, %69)
  };
  %70(%var_743) /* ty=(Tensor[(6, 16, 7), float64], Tensor[(6, 16, 7), float64]) */
}

def @func_6079(%var_6076: Tensor[(5, 12, 10), int32], %var_6077: Tensor[(1386), uint8], %var_6078: float64) -> (Tensor[(5, 12, 10), bool], Tensor[(9, 11, 14), uint8], Tensor[(1386), uint8], Tensor[(1848), float64], Tensor[(1040), bool]) {
  %89 = fn (%var_6047: Tensor[(5, 12, 10), int32], %var_6058: Tensor[(1386), uint8], %var_6062: float64) -> (Tensor[(5, 12, 10), bool], Tensor[(9, 11, 14), uint8], Tensor[(1386), uint8], Tensor[(1848), float64], Tensor[(1040), bool]) {
    %71 = cast(%var_6047, dtype="bool") /* ty=Tensor[(5, 12, 10), bool] */;
    %72 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(5, 12, 10), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %73 = cast(meta[relay.Constant][4] /* ty=Tensor[(5, 12, 10), int32] */, dtype="bool") /* ty=Tensor[(5, 12, 10), bool] */;
    %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %75 = cast(%var_6058, dtype="uint8") /* ty=Tensor[(1386), uint8] */;
    %76 = reshape(%75, newshape=[9, 11, 14]) /* ty=Tensor[(9, 11, 14), uint8] */;
    %77 = @func_597(%76) /* ty=(Tensor[(9, 11, 14), uint8],) */;
    %78 = cast(%var_6062, dtype="float64") /* ty=float64 */;
    %79 = cast(meta[relay.Constant][5] /* ty=Tensor[(1848), float64] */, dtype="float64") /* ty=Tensor[(1848), float64] */;
    %80 = reshape(%78, newshape=[]) /* ty=float64 */;
    %81 = reshape(%79, newshape=[11, 14, 12]) /* ty=Tensor[(11, 14, 12), float64] */;
    %82 = @func_1510(%80, %81) /* ty=(Tensor[(11, 14, 12), float64], Tensor[(9, 11, 14), uint8], Tensor[(1386), uint8], Tensor[(1386), uint8], Tensor[(1040), int32]) */;
    %83 = %82.4;
    %84 = cast(%83, dtype="bool") /* ty=Tensor[(1040), bool] */;
    %85 = cast(%var_6062, dtype="bool") /* ty=bool */;
    %86 = not_equal(%73, %74) /* ty=Tensor[(5, 12, 10), bool] */;
    %87 = %77.0;
    %88 = less(%84, %85) /* ty=Tensor[(1040), bool] */;
    (%86, %87, %var_6058, meta[relay.Constant][5] /* ty=Tensor[(1848), float64] */, %88)
  };
  %89(%var_6076, %var_6077, %var_6078) /* ty=(Tensor[(5, 12, 10), bool], Tensor[(9, 11, 14), uint8], Tensor[(1386), uint8], Tensor[(1848), float64], Tensor[(1040), bool]) */
}

def @func_8316(%var_8315: Tensor[(117), int8]) -> (Tensor[(8, 4, 3), float64], Tensor[(10, 6, 4), float64], Tensor[(624), int32], Tensor[(117), int8], Tensor[(24, 10), float64], float64) {
  %102 = fn (%var_8301: Tensor[(117), int8]) -> (Tensor[(8, 4, 3), float64], Tensor[(10, 6, 4), float64], Tensor[(624), int32], Tensor[(117), int8], Tensor[(24, 10), float64], float64) {
    %90 = @func_7778() /* ty=(Tensor[(8, 4, 3), float64],) */;
    %91 = cast(meta[relay.Constant][6] /* ty=Tensor[(624), int32] */, dtype="int32") /* ty=Tensor[(624), int32] */;
    %92 = cast(%var_8301, dtype="int8") /* ty=Tensor[(117), int8] */;
    %93 = cast(meta[relay.Constant][7] /* ty=Tensor[(24, 10), float64] */, dtype="float64") /* ty=Tensor[(24, 10), float64] */;
    %94 = cast(-8.60749f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %95 = reshape(%91, newshape=[8, 13, 6]) /* ty=Tensor[(8, 13, 6), int32] */;
    %96 = reshape(%92, newshape=[117]) /* ty=Tensor[(117), int8] */;
    %97 = reshape(%93, newshape=[240]) /* ty=Tensor[(240), float64] */;
    %98 = reshape(%94, newshape=[]) /* ty=float64 */;
    %99 = @func_1701(%95, %96, %97, %98) /* ty=(Tensor[(8, 13, 6), int32], Tensor[(240), float64], Tensor[(117), int8], Tensor[(240), float64], float64, Tensor[(3, 2, 2), int8], Tensor[(12), float64], Tensor[(10, 6, 4), float64], Tensor[(8, 13, 6), float32], Tensor[(1040), int32], Tensor[(1, 1848), float64]) */;
    %100 = %90.0;
    %101 = %99.7;
    (%100, %101, meta[relay.Constant][6] /* ty=Tensor[(624), int32] */, %var_8301, meta[relay.Constant][7] /* ty=Tensor[(24, 10), float64] */, -8.60749f64 /* ty=float64 */)
  };
  %102(%var_8315) /* ty=(Tensor[(8, 4, 3), float64], Tensor[(10, 6, 4), float64], Tensor[(624), int32], Tensor[(117), int8], Tensor[(24, 10), float64], float64) */
}

def @func_9353() -> (Tensor[(10, 9, 15), float32], Tensor[(1386), uint8], Tensor[(600), int32], Tensor[(1386), uint8], float64) {
  %118 = fn () -> (Tensor[(10, 9, 15), float32], Tensor[(1386), uint8], Tensor[(600), int32], Tensor[(1386), uint8], float64) {
    %103 = cast(meta[relay.Constant][8] /* ty=Tensor[(10, 9, 15), float32] */, dtype="float32") /* ty=Tensor[(10, 9, 15), float32] */;
    %104 = tan(%103) /* ty=Tensor[(10, 9, 15), float32] */;
    %105 = cast(meta[relay.Constant][8] /* ty=Tensor[(10, 9, 15), float32] */, dtype="float32") /* ty=Tensor[(10, 9, 15), float32] */;
    %106 = shape_of(%104, dtype="int32") /* ty=Tensor[(3), int32] */;
    %107 = cast(%104, dtype="float32") /* ty=Tensor[(10, 9, 15), float32] */;
    %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %109 = cast(meta[relay.Constant][9] /* ty=Tensor[(600), int32] */, dtype="int32") /* ty=Tensor[(600), int32] */;
    %110 = cast(meta[relay.Constant][10] /* ty=Tensor[(1386), uint8] */, dtype="uint8") /* ty=Tensor[(1386), uint8] */;
    %111 = cast(9.67418f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %112 = reshape(%109, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), int32] */;
    %113 = reshape(%110, newshape=[1386]) /* ty=Tensor[(1386), uint8] */;
    %114 = reshape(%111, newshape=[]) /* ty=float64 */;
    %115 = @func_6075(%112, %113, %114) /* ty=(Tensor[(5, 12, 10), bool], Tensor[(9, 11, 14), uint8], Tensor[(1386), uint8], Tensor[(1848), float64], Tensor[(1040), bool]) */;
    %116 = divide(%107, %108) /* ty=Tensor[(10, 9, 15), float32] */;
    %117 = %115.2;
    (%116, %117, meta[relay.Constant][9] /* ty=Tensor[(600), int32] */, meta[relay.Constant][10] /* ty=Tensor[(1386), uint8] */, 9.67418f64 /* ty=float64 */)
  };
  %118() /* ty=(Tensor[(10, 9, 15), float32], Tensor[(1386), uint8], Tensor[(600), int32], Tensor[(1386), uint8], float64) */
}

def @func_8353() -> Tensor[(11, 9, 11), uint8] {
  %119 = cast(meta[relay.Constant][12] /* ty=Tensor[(11, 9, 11), uint8] */, dtype="uint8") /* ty=Tensor[(11, 9, 11), uint8] */;
  %120 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(11, 9, 11), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %121 = cast(meta[relay.Constant][11] /* ty=Tensor[(11, 9, 11), uint8] */, dtype="uint8") /* ty=Tensor[(11, 9, 11), uint8] */;
  %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_and(%121, %122) /* ty=Tensor[(11, 9, 11), uint8] */
}

def @func_8467(%var_8465: float64, %var_8466: Tensor[(9, 13, 5), float64]) -> (Tensor[(9, 13, 5), float64],) {
  @func_8463(%var_8465, %var_8466) /* ty=(Tensor[(9, 13, 5), float64],) */
}

def @func_8768(%var_8745: Tensor[(2, 4, 15), uint32], %var_8746: Tensor[(2, 4, 15), uint32], %var_8753: float64, %var_8757: Tensor[(2160), float64]) -> (Tensor[(2, 4, 15), uint32], Tensor[(8, 14, 1), float32], Tensor[(13, 9), int8], Tensor[(24, 10), float64], float64, Tensor[(9, 16, 15), float64], Tensor[(1320), float32], Tensor[(2160), float64], Tensor[(13, 4, 4), int64], Tensor[(208), int64]) {
  %123 = cast(%var_8746, dtype="uint32") /* ty=Tensor[(2, 4, 15), uint32] */;
  %124 = shape_of(%var_8745, dtype="int32") /* ty=Tensor[(3), int32] */;
  %125 = cast(%var_8745, dtype="uint32") /* ty=Tensor[(2, 4, 15), uint32] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %127 = cast(meta[relay.Constant][13] /* ty=Tensor[(13, 9), int8] */, dtype="int8") /* ty=Tensor[(13, 9), int8] */;
  %128 = cast(meta[relay.Constant][13] /* ty=Tensor[(13, 9), int8] */, dtype="int8") /* ty=Tensor[(13, 9), int8] */;
  %129 = cast(meta[relay.Constant][14] /* ty=Tensor[(24, 10), float64] */, dtype="float64") /* ty=Tensor[(24, 10), float64] */;
  %130 = cast(%var_8753, dtype="float64") /* ty=float64 */;
  %131 = cast(meta[relay.Constant][14] /* ty=Tensor[(24, 10), float64] */, dtype="float64") /* ty=Tensor[(24, 10), float64] */;
  %132 = reshape(%127, newshape=[13, 3, 3]) /* ty=Tensor[(13, 3, 3), int8] */;
  %133 = reshape(%128, newshape=[13, 3, 3]) /* ty=Tensor[(13, 3, 3), int8] */;
  %134 = reshape(%129, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %135 = reshape(%130, newshape=[]) /* ty=float64 */;
  %136 = reshape(%131, newshape=[10, 6, 4]) /* ty=Tensor[(10, 6, 4), float64] */;
  %137 = @func_832(%132, %133, %134, %135, %136) /* ty=(Tensor[(13, 3, 3), float64], Tensor[(240), float64], Tensor[(8, 14, 1), float32], float64, Tensor[(56, 2), float64], Tensor[(10, 6, 4), float64]) */;
  %138 = cast(meta[relay.Constant][15] /* ty=Tensor[(1320), float32] */, dtype="float32") /* ty=Tensor[(1320), float32] */;
  %139 = cast(%var_8757, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %140 = reshape(%138, newshape=[11, 10, 12]) /* ty=Tensor[(11, 10, 12), float32] */;
  %141 = reshape(%139, newshape=[2160]) /* ty=Tensor[(2160), float64] */;
  %142 = @func_7682(%140, %141) /* ty=(Tensor[(11, 10, 12), float32], Tensor[(8, 6, 13), bool], Tensor[(48), float64], Tensor[(624), float64], Tensor[(9, 16, 15), float64], Tensor[(2160), float64]) */;
  %143 = cast(meta[relay.Constant][16] /* ty=Tensor[(208), int64] */, dtype="int64") /* ty=Tensor[(208), int64] */;
  %144 = cast(meta[relay.Constant][16] /* ty=Tensor[(208), int64] */, dtype="int64") /* ty=Tensor[(208), int64] */;
  %145 = reshape(%143, newshape=[13, 4, 4]) /* ty=Tensor[(13, 4, 4), int64] */;
  %146 = reshape(%144, newshape=[13, 4, 4]) /* ty=Tensor[(13, 4, 4), int64] */;
  %147 = logical_xor(%125, %126) /* ty=Tensor[(2, 4, 15), uint32] */;
  %148 = %137.2;
  %149 = %142.4;
  %150 = @func_6714(%145, %146) /* ty=Tensor[(13, 4, 4), int64] */;
  (%147, %148, meta[relay.Constant][13] /* ty=Tensor[(13, 9), int8] */, meta[relay.Constant][14] /* ty=Tensor[(24, 10), float64] */, %var_8753, %149, meta[relay.Constant][15] /* ty=Tensor[(1320), float32] */, %var_8757, %150, meta[relay.Constant][16] /* ty=Tensor[(208), int64] */)
}

def @func_839(%var_834: Tensor[(13, 3, 3), int8], %var_835: Tensor[(13, 3, 3), int8], %var_836: Tensor[(240), float64], %var_837: float64, %var_838: Tensor[(10, 6, 4), float64]) -> (Tensor[(13, 3, 3), float64], Tensor[(240), float64], Tensor[(8, 14, 1), float32], float64, Tensor[(56, 2), float64], Tensor[(10, 6, 4), float64]) {
  @func_832(%var_834, %var_835, %var_836, %var_837, %var_838) /* ty=(Tensor[(13, 3, 3), float64], Tensor[(240), float64], Tensor[(8, 14, 1), float32], float64, Tensor[(56, 2), float64], Tensor[(10, 6, 4), float64]) */
}

def @func_9571(%var_9562: Tensor[(8, 4, 3), int64]) -> Tensor[(8, 4, 3), int8] {
  %151 = @func_8375() /* ty=Tensor[(8, 4, 3), int64] */;
  %152 = cast(%var_9562, dtype="int8") /* ty=Tensor[(8, 4, 3), int8] */;
  %153 = shape_of(%151, dtype="int32") /* ty=Tensor[(3), int32] */;
  %154 = cast(%151, dtype="int8") /* ty=Tensor[(8, 4, 3), int8] */;
  %155 = dyn.reshape(%152, %153, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_or(%154, %155) /* ty=Tensor[(8, 4, 3), int8] */
}

def @func_7235(%var_7230: float64) -> (Tensor[(8, 4, 3), int64], Tensor[(1848), float64], Tensor[(600), int32], Tensor[(1386), uint8], float64, Tensor[(6, 9, 16), float32], Tensor[(432, 2), float32]) {
  %156 = @func_7211() /* ty=(Tensor[(8, 4, 3), int64],) */;
  %157 = cast(meta[relay.Constant][17] /* ty=Tensor[(600), int32] */, dtype="int32") /* ty=Tensor[(600), int32] */;
  %158 = cast(meta[relay.Constant][18] /* ty=Tensor[(1386), uint8] */, dtype="uint8") /* ty=Tensor[(1386), uint8] */;
  %159 = cast(%var_7230, dtype="float64") /* ty=float64 */;
  %160 = reshape(%157, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), int32] */;
  %161 = reshape(%158, newshape=[1386]) /* ty=Tensor[(1386), uint8] */;
  %162 = reshape(%159, newshape=[]) /* ty=float64 */;
  %163 = @func_6075(%160, %161, %162) /* ty=(Tensor[(5, 12, 10), bool], Tensor[(9, 11, 14), uint8], Tensor[(1386), uint8], Tensor[(1848), float64], Tensor[(1040), bool]) */;
  %164 = cast(meta[relay.Constant][19] /* ty=Tensor[(432, 2), float32] */, dtype="float32") /* ty=Tensor[(432, 2), float32] */;
  %165 = reshape(%164, newshape=[6, 9, 16]) /* ty=Tensor[(6, 9, 16), float32] */;
  %166 = @func_4544(%165) /* ty=(Tensor[(6, 9, 16), float32],) */;
  %167 = %156.0;
  %168 = %163.3;
  %169 = %166.0;
  (%167, %168, meta[relay.Constant][17] /* ty=Tensor[(600), int32] */, meta[relay.Constant][18] /* ty=Tensor[(1386), uint8] */, %var_7230, %169, meta[relay.Constant][19] /* ty=Tensor[(432, 2), float32] */)
}

def @func_9238(%var_9236: Tensor[(112), float64]) -> (Tensor[(2160), float64], Tensor[(1320), float32], Tensor[(20, 108), float64], Tensor[(8, 6, 9), int16], Tensor[(176), uint16], Tensor[(240), float64], Tensor[(112), float64], Tensor[(3, 11, 4), float64]) {
  @func_9235(%var_9236) /* ty=(Tensor[(2160), float64], Tensor[(1320), float32], Tensor[(20, 108), float64], Tensor[(8, 6, 9), int16], Tensor[(176), uint16], Tensor[(240), float64], Tensor[(112), float64], Tensor[(3, 11, 4), float64]) */
}

def @func_8075(%var_8055: uint16, %var_8056: Tensor[(1, 16, 13), uint16], %var_8064: Tensor[(624), int32], %var_8066: Tensor[(240), float64]) -> (Tensor[(1, 16, 13), bool], Tensor[(117), int8], Tensor[(88), float32], Tensor[(2, 616), float32], Tensor[(624), int32], Tensor[(117), int8], Tensor[(240), float64]) {
  %170 = cast(%var_8055, dtype="bool") /* ty=bool */;
  %171 = cast(%var_8056, dtype="bool") /* ty=Tensor[(1, 16, 13), bool] */;
  %172 = cast(meta[relay.Constant][20] /* ty=Tensor[(88), float32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
  %173 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 616), float32] */, dtype="float32") /* ty=Tensor[(2, 616), float32] */;
  %174 = cast(%var_8064, dtype="int32") /* ty=Tensor[(624), int32] */;
  %175 = cast(meta[relay.Constant][22] /* ty=Tensor[(117), int8] */, dtype="int8") /* ty=Tensor[(117), int8] */;
  %176 = cast(%var_8066, dtype="float64") /* ty=Tensor[(240), float64] */;
  %177 = reshape(%172, newshape=[11, 8, 1]) /* ty=Tensor[(11, 8, 1), float32] */;
  %178 = reshape(%173, newshape=[11, 8, 14]) /* ty=Tensor[(11, 8, 14), float32] */;
  %179 = reshape(%174, newshape=[624]) /* ty=Tensor[(624), int32] */;
  %180 = reshape(%175, newshape=[117]) /* ty=Tensor[(117), int8] */;
  %181 = reshape(%176, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %182 = @func_4348(%177, %178, %179, %180, %181) /* ty=(Tensor[(11, 8, 14), int64], Tensor[(624), int32], Tensor[(117), int8], Tensor[(240), float64], float64, Tensor[(11, 8, 117), bool]) */;
  %183 = less_equal(%170, %171) /* ty=Tensor[(1, 16, 13), bool] */;
  %184 = %182.2;
  (%183, %184, meta[relay.Constant][20] /* ty=Tensor[(88), float32] */, meta[relay.Constant][21] /* ty=Tensor[(2, 616), float32] */, %var_8064, meta[relay.Constant][22] /* ty=Tensor[(117), int8] */, %var_8066)
}

def @func_9449() -> (Tensor[(8, 4, 3), int64],) {
  %186 = fn () -> (Tensor[(8, 4, 3), int64],) {
    %185 = @func_8375() /* ty=Tensor[(8, 4, 3), int64] */;
    (%185,)
  };
  %186() /* ty=(Tensor[(8, 4, 3), int64],) */
}

def @func_8895() -> Tensor[(8, 4, 3), int64] {
  %187 = fn () -> Tensor[(8, 4, 3), int64] {
    @func_8651() /* ty=Tensor[(8, 4, 3), int64] */
  };
  %187() /* ty=Tensor[(8, 4, 3), int64] */
}

def @func_279(%var_277: float64, %var_278: Tensor[(8, 14, 1), float64]) -> Tensor[(8, 14, 1), float32] {
  @func_275(%var_277, %var_278) /* ty=Tensor[(8, 14, 1), float32] */
}

def @func_8652() -> Tensor[(8, 4, 3), int64] {
  %188 = fn () -> Tensor[(8, 4, 3), int64] {
    @func_7484() /* ty=Tensor[(8, 4, 3), int64] */
  };
  %188() /* ty=Tensor[(8, 4, 3), int64] */
}

def @func_8331(%var_8330: Tensor[(13, 2, 12), float64]) -> Tensor[(13, 2, 12), float64] {
  %190 = fn (%var_8326: Tensor[(13, 2, 12), float64]) -> Tensor[(13, 2, 12), float64] {
    %189 = cast(%var_8326, dtype="float64") /* ty=Tensor[(13, 2, 12), float64] */;
    acos(%189) /* ty=Tensor[(13, 2, 12), float64] */
  };
  %190(%var_8330) /* ty=Tensor[(13, 2, 12), float64] */
}

def @func_1332(%var_1331: Tensor[(9, 16, 15), float64]) -> (Tensor[(9, 16, 15), float64],) {
  %193 = fn (%var_1321: Tensor[(9, 16, 15), float64]) -> (Tensor[(9, 16, 15), float64],) {
    %191 = cast(%var_1321, dtype="float64") /* ty=Tensor[(9, 16, 15), float64] */;
    %192 = cos(%191) /* ty=Tensor[(9, 16, 15), float64] */;
    (%192,)
  };
  %193(%var_1331) /* ty=(Tensor[(9, 16, 15), float64],) */
}

def @func_706(%var_697: Tensor[(10, 6, 4), float64]) -> (Tensor[(10, 6, 4), float64],) {
  %194 = cast(%var_697, dtype="float64") /* ty=Tensor[(10, 6, 4), float64] */;
  %195 = sin(%194) /* ty=Tensor[(10, 6, 4), float64] */;
  (%195,)
}

def @func_9503(%var_9501: Tensor[(8, 4, 3), int64], %var_9502: float64) -> (Tensor[(8, 4, 3), float32], Tensor[(9, 13, 5), float64], float64, Tensor[(585), float64]) {
  %208 = fn (%var_9478: Tensor[(8, 4, 3), int64], %var_9497: float64) -> (Tensor[(8, 4, 3), float32], Tensor[(9, 13, 5), float64], float64, Tensor[(585), float64]) {
    %196 = @func_8375() /* ty=Tensor[(8, 4, 3), int64] */;
    %197 = cast(%var_9478, dtype="float32") /* ty=Tensor[(8, 4, 3), float32] */;
    %198 = shape_of(%196, dtype="int32") /* ty=Tensor[(3), int32] */;
    %199 = cast(%196, dtype="float32") /* ty=Tensor[(8, 4, 3), float32] */;
    %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %201 = cast(%var_9497, dtype="float64") /* ty=float64 */;
    %202 = cast(meta[relay.Constant][23] /* ty=Tensor[(585), float64] */, dtype="float64") /* ty=Tensor[(585), float64] */;
    %203 = reshape(%201, newshape=[]) /* ty=float64 */;
    %204 = reshape(%202, newshape=[9, 13, 5]) /* ty=Tensor[(9, 13, 5), float64] */;
    %205 = @func_8463(%203, %204) /* ty=(Tensor[(9, 13, 5), float64],) */;
    %206 = floor_mod(%199, %200) /* ty=Tensor[(8, 4, 3), float32] */;
    %207 = %205.0;
    (%206, %207, %var_9497, meta[relay.Constant][23] /* ty=Tensor[(585), float64] */)
  };
  %208(%var_9501, %var_9502) /* ty=(Tensor[(8, 4, 3), float32], Tensor[(9, 13, 5), float64], float64, Tensor[(585), float64]) */
}

def @func_6119(%var_6117: uint32, %var_6118: Tensor[(216, 2), float64]) -> (Tensor[(12, 16, 9), uint32], Tensor[(12, 4, 9), float64], Tensor[(216, 2), float64]) {
  @func_6115(%var_6117, %var_6118) /* ty=(Tensor[(12, 16, 9), uint32], Tensor[(12, 4, 9), float64], Tensor[(216, 2), float64]) */
}

def @func_6115(%var_6102: uint32, %var_6110: Tensor[(216, 2), float64]) -> (Tensor[(12, 16, 9), uint32], Tensor[(12, 4, 9), float64], Tensor[(216, 2), float64]) {
  %209 = cast(%var_6102, dtype="uint32") /* ty=uint32 */;
  %210 = cast(meta[relay.Constant][24] /* ty=Tensor[(12, 16, 9), uint32] */, dtype="uint32") /* ty=Tensor[(12, 16, 9), uint32] */;
  %211 = cast(%var_6110, dtype="float64") /* ty=Tensor[(216, 2), float64] */;
  %212 = reshape(%211, newshape=[12, 4, 9]) /* ty=Tensor[(12, 4, 9), float64] */;
  %213 = @func_3469(%212) /* ty=(Tensor[(12, 4, 9), float64],) */;
  %214 = bitwise_xor(%209, %210) /* ty=Tensor[(12, 16, 9), uint32] */;
  %215 = %213.0;
  (%214, %215, %var_6110)
}

def @func_9848(%var_9792: Tensor[(8, 4, 3), int64], %var_9800: Tensor[(8, 4, 3), int64], %var_9808: Tensor[(42), int64], %var_9828: Tensor[(144), float32], %var_9845: Tensor[(1320), float32], %var_9846: Tensor[(2160), float64]) -> (Tensor[(8, 4, 3), float64], Tensor[(8, 4, 3), float64], Tensor[(9, 11, 14), uint8], Tensor[(42), int64], Tensor[(1040, 1), int32], Tensor[(4, 6, 6), bool], Tensor[(624), float64], Tensor[(1320), float32], Tensor[(2160), float64]) {
  %216 = @func_9448() /* ty=(Tensor[(8, 4, 3), int64],) */;
  %217 = %216.0;
  %218 = cast(%var_9792, dtype="float64") /* ty=Tensor[(8, 4, 3), float64] */;
  %219 = shape_of(%217, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%217, dtype="float64") /* ty=Tensor[(8, 4, 3), float64] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %222 = cast(%var_9800, dtype="float64") /* ty=Tensor[(8, 4, 3), float64] */;
  %223 = shape_of(%217, dtype="int32") /* ty=Tensor[(3), int32] */;
  %224 = cast(%217, dtype="float64") /* ty=Tensor[(8, 4, 3), float64] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %226 = cast(%var_9808, dtype="int64") /* ty=Tensor[(42), int64] */;
  %227 = cast(meta[relay.Constant][25] /* ty=Tensor[(1040, 1), int32] */, dtype="int32") /* ty=Tensor[(1040, 1), int32] */;
  %228 = reshape(%226, newshape=[7, 3, 2]) /* ty=Tensor[(7, 3, 2), int64] */;
  %229 = reshape(%227, newshape=[1040]) /* ty=Tensor[(1040), int32] */;
  %230 = @func_2524(%228, %229) /* ty=(Tensor[(7, 3, 2), int64], Tensor[(9, 11, 14), uint8], Tensor[(1040), int32]) */;
  %231 = cast(%var_9828, dtype="float32") /* ty=Tensor[(144), float32] */;
  %232 = reshape(%231, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %233 = @func_8604(%232) /* ty=(Tensor[(11, 9, 11), uint8], Tensor[(4, 6, 6), float32], Tensor[(144), float32]) */;
  %234 = %233.1;
  %235 = cast(%var_9828, dtype="bool") /* ty=Tensor[(144), bool] */;
  %236 = shape_of(%234, dtype="int32") /* ty=Tensor[(3), int32] */;
  %237 = cast(%234, dtype="bool") /* ty=Tensor[(4, 6, 6), bool] */;
  %238 = dyn.reshape(%235, %236, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %239 = cast(%var_9845, dtype="float32") /* ty=Tensor[(1320), float32] */;
  %240 = cast(%var_9846, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %241 = reshape(%239, newshape=[11, 10, 12]) /* ty=Tensor[(11, 10, 12), float32] */;
  %242 = reshape(%240, newshape=[2160]) /* ty=Tensor[(2160), float64] */;
  %243 = @func_7682(%241, %242) /* ty=(Tensor[(11, 10, 12), float32], Tensor[(8, 6, 13), bool], Tensor[(48), float64], Tensor[(624), float64], Tensor[(9, 16, 15), float64], Tensor[(2160), float64]) */;
  %244 = multiply(%220, %221) /* ty=Tensor[(8, 4, 3), float64] */;
  %245 = divide(%224, %225) /* ty=Tensor[(8, 4, 3), float64] */;
  %246 = %230.1;
  %247 = less(%237, %238) /* ty=Tensor[(4, 6, 6), bool] */;
  %248 = %243.3;
  (%244, %245, %246, %var_9808, meta[relay.Constant][25] /* ty=Tensor[(1040, 1), int32] */, %247, %248, %var_9845, %var_9846)
}

def @func_9028(%var_9027: Tensor[(8, 4, 3), int64]) -> (Tensor[(8, 4, 3), bool], Tensor[(8, 4, 3), float64], Tensor[(8, 4, 3), bool], Tensor[(8, 4, 3), int64]) {
  %262 = fn (%var_8986: Tensor[(8, 4, 3), int64]) -> (Tensor[(8, 4, 3), bool], Tensor[(8, 4, 3), float64], Tensor[(8, 4, 3), bool], Tensor[(8, 4, 3), int64]) {
    %249 = @func_8894() /* ty=Tensor[(8, 4, 3), int64] */;
    %250 = cast(%var_8986, dtype="bool") /* ty=Tensor[(8, 4, 3), bool] */;
    %251 = shape_of(%249, dtype="int32") /* ty=Tensor[(3), int32] */;
    %252 = cast(%249, dtype="bool") /* ty=Tensor[(8, 4, 3), bool] */;
    %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %254 = cast(%var_8986, dtype="bool") /* ty=Tensor[(8, 4, 3), bool] */;
    %255 = shape_of(%249, dtype="int32") /* ty=Tensor[(3), int32] */;
    %256 = cast(%249, dtype="bool") /* ty=Tensor[(8, 4, 3), bool] */;
    %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %258 = greater_equal(%252, %253) /* ty=Tensor[(8, 4, 3), bool] */;
    %259 = @func_7872() /* ty=Tensor[(8, 4, 3), float64] */;
    %260 = not_equal(%256, %257) /* ty=Tensor[(8, 4, 3), bool] */;
    %261 = @func_7484() /* ty=Tensor[(8, 4, 3), int64] */;
    (%258, %259, %260, %261)
  };
  %262(%var_9027) /* ty=(Tensor[(8, 4, 3), bool], Tensor[(8, 4, 3), float64], Tensor[(8, 4, 3), bool], Tensor[(8, 4, 3), int64]) */
}

def @func_9745() -> (Tensor[(8, 4, 3), float64], Tensor[(6, 9, 16), float32], Tensor[(1, 112), float64], Tensor[(112), float64], Tensor[(864), float64]) {
  @func_9743() /* ty=(Tensor[(8, 4, 3), float64], Tensor[(6, 9, 16), float32], Tensor[(1, 112), float64], Tensor[(112), float64], Tensor[(864), float64]) */
}

def @func_9743() -> (Tensor[(8, 4, 3), float64], Tensor[(6, 9, 16), float32], Tensor[(1, 112), float64], Tensor[(112), float64], Tensor[(864), float64]) {
  %263 = @func_7778() /* ty=(Tensor[(8, 4, 3), float64],) */;
  %264 = cast(meta[relay.Constant][26] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %265 = reshape(%264, newshape=[6, 9, 16]) /* ty=Tensor[(6, 9, 16), float32] */;
  %266 = @func_4544(%265) /* ty=(Tensor[(6, 9, 16), float32],) */;
  %267 = cast(meta[relay.Constant][27] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
  %268 = reshape(%267, newshape=[1, 112]) /* ty=Tensor[(1, 112), float64] */;
  %269 = @func_2887(%268) /* ty=(Tensor[(8, 6, 9), int16], Tensor[(6, 16, 7), float64], Tensor[(1, 112), float64]) */;
  %270 = cast(meta[relay.Constant][26] /* ty=Tensor[(864), float32] */, dtype="float64") /* ty=Tensor[(864), float64] */;
  %271 = %263.0;
  %272 = %266.0;
  %273 = %269.2;
  %274 = sqrt(%270) /* ty=Tensor[(864), float64] */;
  (%271, %272, %273, meta[relay.Constant][27] /* ty=Tensor[(112), float64] */, %274)
}

def @func_1706(%var_1702: Tensor[(8, 13, 6), int32], %var_1703: Tensor[(117), int8], %var_1704: Tensor[(240), float64], %var_1705: float64) -> (Tensor[(8, 13, 6), int32], Tensor[(240), float64], Tensor[(117), int8], Tensor[(240), float64], float64, Tensor[(3, 2, 2), int8], Tensor[(12), float64], Tensor[(10, 6, 4), float64], Tensor[(8, 13, 6), float32], Tensor[(1040), int32], Tensor[(1, 1848), float64]) {
  %307 = fn (%var_1640: Tensor[(8, 13, 6), int32], %var_1649: Tensor[(117), int8], %var_1650: Tensor[(240), float64], %var_1651: float64) -> (Tensor[(8, 13, 6), int32], Tensor[(240), float64], Tensor[(117), int8], Tensor[(240), float64], float64, Tensor[(3, 2, 2), int8], Tensor[(12), float64], Tensor[(10, 6, 4), float64], Tensor[(8, 13, 6), float32], Tensor[(1040), int32], Tensor[(1, 1848), float64]) {
    %275 = cast(%var_1640, dtype="int32") /* ty=Tensor[(8, 13, 6), int32] */;
    %276 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(8, 13, 6), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %277 = cast(meta[relay.Constant][28] /* ty=Tensor[(8, 13, 6), int32] */, dtype="int32") /* ty=Tensor[(8, 13, 6), int32] */;
    %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %279 = cast(%var_1649, dtype="int8") /* ty=Tensor[(117), int8] */;
    %280 = cast(%var_1649, dtype="int8") /* ty=Tensor[(117), int8] */;
    %281 = cast(%var_1650, dtype="float64") /* ty=Tensor[(240), float64] */;
    %282 = cast(%var_1651, dtype="float64") /* ty=float64 */;
    %283 = cast(%var_1650, dtype="float64") /* ty=Tensor[(240), float64] */;
    %284 = reshape(%279, newshape=[13, 3, 3]) /* ty=Tensor[(13, 3, 3), int8] */;
    %285 = reshape(%280, newshape=[13, 3, 3]) /* ty=Tensor[(13, 3, 3), int8] */;
    %286 = reshape(%281, newshape=[240]) /* ty=Tensor[(240), float64] */;
    %287 = reshape(%282, newshape=[]) /* ty=float64 */;
    %288 = reshape(%283, newshape=[10, 6, 4]) /* ty=Tensor[(10, 6, 4), float64] */;
    %289 = @func_832(%284, %285, %286, %287, %288) /* ty=(Tensor[(13, 3, 3), float64], Tensor[(240), float64], Tensor[(8, 14, 1), float32], float64, Tensor[(56, 2), float64], Tensor[(10, 6, 4), float64]) */;
    %290 = cast(meta[relay.Constant][29] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
    %291 = reshape(%290, newshape=[3, 2, 2]) /* ty=Tensor[(3, 2, 2), float64] */;
    %292 = cast(%var_1650, dtype="float64") /* ty=Tensor[(240), float64] */;
    %293 = reshape(%292, newshape=[10, 6, 4]) /* ty=Tensor[(10, 6, 4), float64] */;
    %294 = @func_706(%293) /* ty=(Tensor[(10, 6, 4), float64],) */;
    %295 = cast(%var_1640, dtype="float32") /* ty=Tensor[(8, 13, 6), float32] */;
    %296 = cast(%var_1651, dtype="float64") /* ty=float64 */;
    %297 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 1848), float64] */, dtype="float64") /* ty=Tensor[(1, 1848), float64] */;
    %298 = reshape(%296, newshape=[]) /* ty=float64 */;
    %299 = reshape(%297, newshape=[11, 14, 12]) /* ty=Tensor[(11, 14, 12), float64] */;
    %300 = @func_1510(%298, %299) /* ty=(Tensor[(11, 14, 12), float64], Tensor[(9, 11, 14), uint8], Tensor[(1386), uint8], Tensor[(1386), uint8], Tensor[(1040), int32]) */;
    %301 = right_shift(%277, %278) /* ty=Tensor[(8, 13, 6), int32] */;
    %302 = %289.1;
    %303 = @func_967(%291) /* ty=Tensor[(3, 2, 2), int8] */;
    %304 = %294.0;
    %305 = asinh(%295) /* ty=Tensor[(8, 13, 6), float32] */;
    %306 = %300.4;
    (%301, %302, %var_1649, %var_1650, %var_1651, %303, meta[relay.Constant][29] /* ty=Tensor[(12), float64] */, %304, %305, %306, meta[relay.Constant][30] /* ty=Tensor[(1, 1848), float64] */)
  };
  %307(%var_1702, %var_1703, %var_1704, %var_1705) /* ty=(Tensor[(8, 13, 6), int32], Tensor[(240), float64], Tensor[(117), int8], Tensor[(240), float64], float64, Tensor[(3, 2, 2), int8], Tensor[(12), float64], Tensor[(10, 6, 4), float64], Tensor[(8, 13, 6), float32], Tensor[(1040), int32], Tensor[(1, 1848), float64]) */
}

def @func_709(%var_707: Tensor[(10, 6, 4), float64]) -> (Tensor[(10, 6, 4), float64],) {
  @func_706(%var_707) /* ty=(Tensor[(10, 6, 4), float64],) */
}

def @func_1510(%var_1485: float64, %var_1486: Tensor[(11, 14, 12), float64]) -> (Tensor[(11, 14, 12), float64], Tensor[(9, 11, 14), uint8], Tensor[(1386), uint8], Tensor[(1386), uint8], Tensor[(1040), int32]) {
  %308 = cast(%var_1485, dtype="float64") /* ty=float64 */;
  %309 = cast(%var_1486, dtype="float64") /* ty=Tensor[(11, 14, 12), float64] */;
  %310 = cast(meta[relay.Constant][31] /* ty=Tensor[(1386), uint8] */, dtype="uint8") /* ty=Tensor[(1386), uint8] */;
  %311 = reshape(%310, newshape=[9, 11, 14]) /* ty=Tensor[(9, 11, 14), uint8] */;
  %312 = @func_597(%311) /* ty=(Tensor[(9, 11, 14), uint8],) */;
  %313 = cast(meta[relay.Constant][32] /* ty=Tensor[(1040), int32] */, dtype="int32") /* ty=Tensor[(1040), int32] */;
  %314 = reshape(%313, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), int32] */;
  %315 = @func_1264(%314) /* ty=(Tensor[(8, 10, 13), int32], Tensor[(9, 11, 14), uint8], Tensor[(1386), uint8]) */;
  %316 = floor_mod(%308, %309) /* ty=Tensor[(11, 14, 12), float64] */;
  %317 = %312.0;
  %318 = %315.2;
  (%316, %317, meta[relay.Constant][31] /* ty=Tensor[(1386), uint8] */, %318, meta[relay.Constant][32] /* ty=Tensor[(1040), int32] */)
}

def @func_7994() -> (Tensor[(8, 4, 3), float64],) {
  %320 = fn () -> (Tensor[(8, 4, 3), float64],) {
    %319 = @func_7872() /* ty=Tensor[(8, 4, 3), float64] */;
    (%319,)
  };
  %320() /* ty=(Tensor[(8, 4, 3), float64],) */
}

def @func_2655(%var_2609: Tensor[(8, 16, 11), uint16], %var_2610: Tensor[(8, 16, 11), uint16]) -> (Tensor[(8, 16, 11), float64], Tensor[(8, 10, 13), int32], Tensor[(1040), int32]) {
  %321 = cast(%var_2610, dtype="bool") /* ty=Tensor[(8, 16, 11), bool] */;
  %322 = shape_of(%var_2609, dtype="int32") /* ty=Tensor[(3), int32] */;
  %323 = cast(%var_2609, dtype="bool") /* ty=Tensor[(8, 16, 11), bool] */;
  %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %325 = greater_equal(%323, %324) /* ty=Tensor[(8, 16, 11), bool] */;
  %326 = cast(%325, dtype="float64") /* ty=Tensor[(8, 16, 11), float64] */;
  %327 = cast(meta[relay.Constant][33] /* ty=Tensor[(1040), int32] */, dtype="int32") /* ty=Tensor[(1040), int32] */;
  %328 = reshape(%327, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), int32] */;
  %329 = @func_1264(%328) /* ty=(Tensor[(8, 10, 13), int32], Tensor[(9, 11, 14), uint8], Tensor[(1386), uint8]) */;
  %330 = asin(%326) /* ty=Tensor[(8, 16, 11), float64] */;
  %331 = %329.0;
  (%330, %331, meta[relay.Constant][33] /* ty=Tensor[(1040), int32] */)
}

def @func_8862(%var_8861: Tensor[(72), float64]) -> (Tensor[(8, 4, 3), int64], Tensor[(2, 12, 3), float64], Tensor[(72), float64]) {
  %336 = fn (%var_8821: Tensor[(72), float64]) -> (Tensor[(8, 4, 3), int64], Tensor[(2, 12, 3), float64], Tensor[(72), float64]) {
    %332 = cast(%var_8821, dtype="float64") /* ty=Tensor[(72), float64] */;
    %333 = reshape(%332, newshape=[2, 12, 3]) /* ty=Tensor[(2, 12, 3), float64] */;
    %334 = @func_8375() /* ty=Tensor[(8, 4, 3), int64] */;
    %335 = @func_3999(%333) /* ty=Tensor[(2, 12, 3), float64] */;
    (%334, %335, %var_8821)
  };
  %336(%var_8861) /* ty=(Tensor[(8, 4, 3), int64], Tensor[(2, 12, 3), float64], Tensor[(72), float64]) */
}

def @func_5250(%var_5223: Tensor[(5, 1, 12), uint8], %var_5247: Tensor[(7, 198), uint8]) -> (Tensor[(5, 1, 12), uint8], Tensor[(9, 11, 14), uint8], Tensor[(7, 198), uint8]) {
  %337 = cast(meta[relay.Constant][34] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %338 = cast(%var_5223, dtype="uint8") /* ty=Tensor[(5, 1, 12), uint8] */;
  %339 = cast(%var_5247, dtype="uint8") /* ty=Tensor[(7, 198), uint8] */;
  %340 = reshape(%339, newshape=[9, 11, 14]) /* ty=Tensor[(9, 11, 14), uint8] */;
  %341 = @func_597(%340) /* ty=(Tensor[(9, 11, 14), uint8],) */;
  %342 = add(%337, %338) /* ty=Tensor[(5, 1, 12), uint8] */;
  %343 = %341.0;
  (%342, %343, %var_5247)
}

def @func_7484() -> Tensor[(8, 4, 3), int64] {
  %344 = @func_7211() /* ty=(Tensor[(8, 4, 3), int64],) */;
  %344.0
}

def @func_8201(%var_8199: Tensor[(1408), uint16]) -> (Tensor[(1040), int32], Tensor[(1408), uint16], Tensor[(8, 4, 3), float32]) {
  @func_8198(%var_8199) /* ty=(Tensor[(1040), int32], Tensor[(1408), uint16], Tensor[(8, 4, 3), float32]) */
}

def @func_4544(%var_4534: Tensor[(6, 9, 16), float32]) -> (Tensor[(6, 9, 16), float32],) {
  %345 = cast(%var_4534, dtype="float32") /* ty=Tensor[(6, 9, 16), float32] */;
  %346 = sqrt(%345) /* ty=Tensor[(6, 9, 16), float32] */;
  (%346,)
}

def @func_9574(%var_9572: Tensor[(8, 4, 3), int64]) -> Tensor[(8, 4, 3), int8] {
  @func_9571(%var_9572) /* ty=Tensor[(8, 4, 3), int8] */
}

def @func_1266(%var_1265: Tensor[(8, 10, 13), int32]) -> (Tensor[(8, 10, 13), int32], Tensor[(9, 11, 14), uint8], Tensor[(1386), uint8]) {
  %356 = fn (%var_1253: Tensor[(8, 10, 13), int32]) -> (Tensor[(8, 10, 13), int32], Tensor[(9, 11, 14), uint8], Tensor[(1386), uint8]) {
    %347 = cast(meta[relay.Constant][35] /* ty=Tensor[(8, 10, 13), int32] */, dtype="int32") /* ty=Tensor[(8, 10, 13), int32] */;
    %348 = shape_of(%var_1253, dtype="int32") /* ty=Tensor[(3), int32] */;
    %349 = cast(%var_1253, dtype="int32") /* ty=Tensor[(8, 10, 13), int32] */;
    %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %351 = cast(meta[relay.Constant][36] /* ty=Tensor[(1386), uint8] */, dtype="uint8") /* ty=Tensor[(1386), uint8] */;
    %352 = reshape(%351, newshape=[9, 11, 14]) /* ty=Tensor[(9, 11, 14), uint8] */;
    %353 = @func_597(%352) /* ty=(Tensor[(9, 11, 14), uint8],) */;
    %354 = left_shift(%349, %350) /* ty=Tensor[(8, 10, 13), int32] */;
    %355 = %353.0;
    (%354, %355, meta[relay.Constant][36] /* ty=Tensor[(1386), uint8] */)
  };
  %356(%var_1265) /* ty=(Tensor[(8, 10, 13), int32], Tensor[(9, 11, 14), uint8], Tensor[(1386), uint8]) */
}

def @func_2962(%var_2956: Tensor[(8, 8, 2), uint8], %var_2957: Tensor[(8, 8, 2), uint8]) -> Tensor[(8, 8, 2), uint8] {
  %357 = cast(%var_2957, dtype="uint8") /* ty=Tensor[(8, 8, 2), uint8] */;
  %358 = shape_of(%var_2956, dtype="int32") /* ty=Tensor[(3), int32] */;
  %359 = cast(%var_2956, dtype="uint8") /* ty=Tensor[(8, 8, 2), uint8] */;
  %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_or(%359, %360) /* ty=Tensor[(8, 8, 2), uint8] */
}

def @func_7586(%var_7585: Tensor[(12, 1), float64]) -> (Tensor[(8, 4, 3), int64], Tensor[(9, 16, 15), float64], Tensor[(2, 1080), float64], Tensor[(3, 2, 2), int8], Tensor[(12, 1), float64], Tensor[(8, 4, 3), float64]) {
  %372 = fn (%var_7559: Tensor[(12, 1), float64]) -> (Tensor[(8, 4, 3), int64], Tensor[(9, 16, 15), float64], Tensor[(2, 1080), float64], Tensor[(3, 2, 2), int8], Tensor[(12, 1), float64], Tensor[(8, 4, 3), float64]) {
    %361 = cast(meta[relay.Constant][37] /* ty=Tensor[(2, 1080), float64] */, dtype="float64") /* ty=Tensor[(2, 1080), float64] */;
    %362 = reshape(%361, newshape=[9, 16, 15]) /* ty=Tensor[(9, 16, 15), float64] */;
    %363 = @func_1330(%362) /* ty=(Tensor[(9, 16, 15), float64],) */;
    %364 = cast(%var_7559, dtype="float64") /* ty=Tensor[(12, 1), float64] */;
    %365 = reshape(%364, newshape=[3, 2, 2]) /* ty=Tensor[(3, 2, 2), float64] */;
    %366 = @func_7399() /* ty=Tensor[(8, 4, 3), int64] */;
    %367 = cast(%366, dtype="float64") /* ty=Tensor[(8, 4, 3), float64] */;
    %368 = @func_7484() /* ty=Tensor[(8, 4, 3), int64] */;
    %369 = %363.0;
    %370 = @func_967(%365) /* ty=Tensor[(3, 2, 2), int8] */;
    %371 = log(%367) /* ty=Tensor[(8, 4, 3), float64] */;
    (%368, %369, meta[relay.Constant][37] /* ty=Tensor[(2, 1080), float64] */, %370, %var_7559, %371)
  };
  %372(%var_7585) /* ty=(Tensor[(8, 4, 3), int64], Tensor[(9, 16, 15), float64], Tensor[(2, 1080), float64], Tensor[(3, 2, 2), int8], Tensor[(12, 1), float64], Tensor[(8, 4, 3), float64]) */
}

def @func_4124(%var_4082: Tensor[(2, 11, 8), uint16], %var_4090: Tensor[(240), float64], %var_4116: Tensor[(112), float64]) -> (Tensor[(2, 11, 8), uint16], Tensor[(240), float64], Tensor[(9, 11, 14), uint8], Tensor[(1, 1386), uint8], Tensor[(8, 6, 9), int16], Tensor[(112), float64], Tensor[(10, 6, 4), float64]) {
  %373 = cast(meta[relay.Constant][38] /* ty=Tensor[(2, 11, 8), uint16] */, dtype="uint16") /* ty=Tensor[(2, 11, 8), uint16] */;
  %374 = shape_of(%var_4082, dtype="int32") /* ty=Tensor[(3), int32] */;
  %375 = cast(%var_4082, dtype="uint16") /* ty=Tensor[(2, 11, 8), uint16] */;
  %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %377 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 1386), uint8] */, dtype="uint8") /* ty=Tensor[(1, 1386), uint8] */;
  %378 = reshape(%377, newshape=[9, 11, 14]) /* ty=Tensor[(9, 11, 14), uint8] */;
  %379 = @func_597(%378) /* ty=(Tensor[(9, 11, 14), uint8],) */;
  %380 = cast(%var_4116, dtype="float64") /* ty=Tensor[(112), float64] */;
  %381 = reshape(%380, newshape=[1, 112]) /* ty=Tensor[(1, 112), float64] */;
  %382 = @func_2887(%381) /* ty=(Tensor[(8, 6, 9), int16], Tensor[(6, 16, 7), float64], Tensor[(1, 112), float64]) */;
  %383 = cast(%var_4090, dtype="float64") /* ty=Tensor[(240), float64] */;
  %384 = reshape(%383, newshape=[10, 6, 4]) /* ty=Tensor[(10, 6, 4), float64] */;
  %385 = @func_706(%384) /* ty=(Tensor[(10, 6, 4), float64],) */;
  %386 = %385.0;
  %387 = cast(%386, dtype="float64") /* ty=Tensor[(10, 6, 4), float64] */;
  %388 = atanh(%387) /* ty=Tensor[(10, 6, 4), float64] */;
  %389 = cast(%388, dtype="float64") /* ty=Tensor[(10, 6, 4), float64] */;
  %390 = bitwise_or(%375, %376) /* ty=Tensor[(2, 11, 8), uint16] */;
  %391 = %379.0;
  %392 = %382.0;
  %393 = acosh(%389) /* ty=Tensor[(10, 6, 4), float64] */;
  (%390, %var_4090, %391, meta[relay.Constant][39] /* ty=Tensor[(1, 1386), uint8] */, %392, %var_4116, %393)
}

def @func_1514(%var_1512: float64, %var_1513: Tensor[(11, 14, 12), float64]) -> (Tensor[(11, 14, 12), float64], Tensor[(9, 11, 14), uint8], Tensor[(1386), uint8], Tensor[(1386), uint8], Tensor[(1040), int32]) {
  @func_1510(%var_1512, %var_1513) /* ty=(Tensor[(11, 14, 12), float64], Tensor[(9, 11, 14), uint8], Tensor[(1386), uint8], Tensor[(1386), uint8], Tensor[(1040), int32]) */
}

def @func_9653() -> (Tensor[(8, 4, 3), uint64],) {
  %401 = fn () -> (Tensor[(8, 4, 3), uint64],) {
    %394 = @func_7211() /* ty=(Tensor[(8, 4, 3), int64],) */;
    %395 = %394.0;
    %396 = cast(meta[relay.Constant][40] /* ty=Tensor[(8, 4, 3), int64] */, dtype="uint64") /* ty=Tensor[(8, 4, 3), uint64] */;
    %397 = shape_of(%395, dtype="int32") /* ty=Tensor[(3), int32] */;
    %398 = cast(%395, dtype="uint64") /* ty=Tensor[(8, 4, 3), uint64] */;
    %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %400 = subtract(%398, %399) /* ty=Tensor[(8, 4, 3), uint64] */;
    (%400,)
  };
  %401() /* ty=(Tensor[(8, 4, 3), uint64],) */
}

def @func_8432(%var_8431: Tensor[(312), float64]) -> (Tensor[(8, 4, 3), bool], Tensor[(13, 2, 12), float64], Tensor[(312), float64], Tensor[(8, 4, 3), int64]) {
  %412 = fn (%var_8410: Tensor[(312), float64]) -> (Tensor[(8, 4, 3), bool], Tensor[(13, 2, 12), float64], Tensor[(312), float64], Tensor[(8, 4, 3), int64]) {
    %402 = @func_8375() /* ty=Tensor[(8, 4, 3), int64] */;
    %403 = cast(meta[relay.Constant][41] /* ty=Tensor[(8, 4, 3), int64] */, dtype="bool") /* ty=Tensor[(8, 4, 3), bool] */;
    %404 = shape_of(%402, dtype="int32") /* ty=Tensor[(3), int32] */;
    %405 = cast(%402, dtype="bool") /* ty=Tensor[(8, 4, 3), bool] */;
    %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %407 = cast(%var_8410, dtype="float64") /* ty=Tensor[(312), float64] */;
    %408 = reshape(%407, newshape=[13, 2, 12]) /* ty=Tensor[(13, 2, 12), float64] */;
    %409 = greater(%405, %406) /* ty=Tensor[(8, 4, 3), bool] */;
    %410 = @func_8329(%408) /* ty=Tensor[(13, 2, 12), float64] */;
    %411 = @func_7484() /* ty=Tensor[(8, 4, 3), int64] */;
    (%409, %410, %var_8410, %411)
  };
  %412(%var_8431) /* ty=(Tensor[(8, 4, 3), bool], Tensor[(13, 2, 12), float64], Tensor[(312), float64], Tensor[(8, 4, 3), int64]) */
}

def @func_3469(%var_3456: Tensor[(12, 4, 9), float64]) -> (Tensor[(12, 4, 9), float64],) {
  %413 = cast(%var_3456, dtype="float64") /* ty=Tensor[(12, 4, 9), float64] */;
  %414 = sinh(%413) /* ty=Tensor[(12, 4, 9), float64] */;
  (%414,)
}

def @func_2659(%var_2657: Tensor[(8, 16, 11), uint16], %var_2658: Tensor[(8, 16, 11), uint16]) -> (Tensor[(8, 16, 11), float64], Tensor[(8, 10, 13), int32], Tensor[(1040), int32]) {
  @func_2655(%var_2657, %var_2658) /* ty=(Tensor[(8, 16, 11), float64], Tensor[(8, 10, 13), int32], Tensor[(1040), int32]) */
}

def @func_7872() -> Tensor[(8, 4, 3), float64] {
  %415 = @func_7778() /* ty=(Tensor[(8, 4, 3), float64],) */;
  %416 = %415.0;
  %417 = cast(%416, dtype="float64") /* ty=Tensor[(8, 4, 3), float64] */;
  erf(%417) /* ty=Tensor[(8, 4, 3), float64] */
}

def @func_5443(%var_5440: Tensor[(4, 6, 6), float32]) -> (Tensor[(4, 6, 6), float32],) {
  %418 = cast(%var_5440, dtype="float32") /* ty=Tensor[(4, 6, 6), float32] */;
  %419 = rsqrt(%418) /* ty=Tensor[(4, 6, 6), float32] */;
  (%419,)
}

def @func_832(%var_766: Tensor[(13, 3, 3), int8], %var_767: Tensor[(13, 3, 3), int8], %var_777: Tensor[(240), float64], %var_794: float64, %var_810: Tensor[(10, 6, 4), float64]) -> (Tensor[(13, 3, 3), float64], Tensor[(240), float64], Tensor[(8, 14, 1), float32], float64, Tensor[(56, 2), float64], Tensor[(10, 6, 4), float64]) {
  %420 = cast(%var_767, dtype="int8") /* ty=Tensor[(13, 3, 3), int8] */;
  %421 = shape_of(%var_766, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(%var_766, dtype="int8") /* ty=Tensor[(13, 3, 3), int8] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %424 = bitwise_or(%422, %423) /* ty=Tensor[(13, 3, 3), int8] */;
  %425 = cast(%424, dtype="float64") /* ty=Tensor[(13, 3, 3), float64] */;
  %426 = shape_of(%var_767, dtype="int32") /* ty=Tensor[(3), int32] */;
  %427 = cast(%var_767, dtype="float64") /* ty=Tensor[(13, 3, 3), float64] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %429 = cast(%var_794, dtype="float64") /* ty=float64 */;
  %430 = cast(meta[relay.Constant][42] /* ty=Tensor[(56, 2), float64] */, dtype="float64") /* ty=Tensor[(56, 2), float64] */;
  %431 = reshape(%429, newshape=[]) /* ty=float64 */;
  %432 = reshape(%430, newshape=[8, 14, 1]) /* ty=Tensor[(8, 14, 1), float64] */;
  %433 = cast(%var_777, dtype="float64") /* ty=Tensor[(240), float64] */;
  %434 = reshape(%433, newshape=[10, 6, 4]) /* ty=Tensor[(10, 6, 4), float64] */;
  %435 = @func_706(%434) /* ty=(Tensor[(10, 6, 4), float64],) */;
  %436 = %435.0;
  %437 = cast(%var_810, dtype="float32") /* ty=Tensor[(10, 6, 4), float32] */;
  %438 = shape_of(%436, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%436, dtype="float32") /* ty=Tensor[(10, 6, 4), float32] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %441 = floor_divide(%439, %440) /* ty=Tensor[(10, 6, 4), float32] */;
  %442 = cast(%441, dtype="float64") /* ty=Tensor[(10, 6, 4), float64] */;
  %443 = floor_mod(%427, %428) /* ty=Tensor[(13, 3, 3), float64] */;
  %444 = @func_275(%431, %432) /* ty=Tensor[(8, 14, 1), float32] */;
  %445 = log2(%442) /* ty=Tensor[(10, 6, 4), float64] */;
  (%443, %var_777, %444, %var_794, meta[relay.Constant][42] /* ty=Tensor[(56, 2), float64] */, %445)
}

def @func_8693() -> Tensor[(8, 4, 3), int64] {
  @func_7399() /* ty=Tensor[(8, 4, 3), int64] */
}

def @func_8118(%var_8092: Tensor[(72), float32], %var_8095: Tensor[(120, 2), float64], %var_8101: Tensor[(135), int8]) -> (Tensor[(8, 4, 3), float64], Tensor[(2, 10, 3), float32], Tensor[(72), float32], Tensor[(20), float32], Tensor[(60), float32], Tensor[(120, 2), float64], Tensor[(40, 26), int32], Tensor[(1, 112), uint64], Tensor[(135), int8]) {
  %446 = @func_7778() /* ty=(Tensor[(8, 4, 3), float64],) */;
  %447 = cast(%var_8092, dtype="float32") /* ty=Tensor[(72), float32] */;
  %448 = cast(meta[relay.Constant][43] /* ty=Tensor[(20), float32] */, dtype="float32") /* ty=Tensor[(20), float32] */;
  %449 = cast(meta[relay.Constant][44] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %450 = cast(%var_8095, dtype="float64") /* ty=Tensor[(120, 2), float64] */;
  %451 = cast(meta[relay.Constant][45] /* ty=Tensor[(40, 26), int32] */, dtype="int32") /* ty=Tensor[(40, 26), int32] */;
  %452 = reshape(%447, newshape=[1, 9, 8]) /* ty=Tensor[(1, 9, 8), float32] */;
  %453 = reshape(%448, newshape=[5, 4]) /* ty=Tensor[(5, 4), float32] */;
  %454 = reshape(%449, newshape=[1, 60]) /* ty=Tensor[(1, 60), float32] */;
  %455 = reshape(%450, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %456 = reshape(%451, newshape=[1040]) /* ty=Tensor[(1040), int32] */;
  %457 = @func_3637(%452, %453, %454, %455, %456) /* ty=(Tensor[(?, 9, 8), float32], Tensor[(2, 10, 3), float32], Tensor[(5, 4), float32], Tensor[(1, 60), float32], Tensor[(1, 117), int8], Tensor[(240), float64], float64, Tensor[(1040), int32]) */;
  %458 = cast(%var_8101, dtype="int8") /* ty=Tensor[(135), int8] */;
  %459 = reshape(%458, newshape=[5, 3, 9]) /* ty=Tensor[(5, 3, 9), int8] */;
  %460 = @func_2184(%459) /* ty=(Tensor[(5, 3, 9), int8], Tensor[(5, 3, 9), bool], Tensor[(8, 14, 1), float32], Tensor[(1, 112), uint64]) */;
  %461 = %446.0;
  %462 = %457.1;
  %463 = %460.3;
  (%461, %462, %var_8092, meta[relay.Constant][43] /* ty=Tensor[(20), float32] */, meta[relay.Constant][44] /* ty=Tensor[(60), float32] */, %var_8095, meta[relay.Constant][45] /* ty=Tensor[(40, 26), int32] */, %463, %var_8101)
}

def @func_8123(%var_8120: Tensor[(72), float32], %var_8121: Tensor[(120, 2), float64], %var_8122: Tensor[(135), int8]) -> (Tensor[(8, 4, 3), float64], Tensor[(2, 10, 3), float32], Tensor[(72), float32], Tensor[(20), float32], Tensor[(60), float32], Tensor[(120, 2), float64], Tensor[(40, 26), int32], Tensor[(1, 112), uint64], Tensor[(135), int8]) {
  @func_8118(%var_8120, %var_8121, %var_8122) /* ty=(Tensor[(8, 4, 3), float64], Tensor[(2, 10, 3), float32], Tensor[(72), float32], Tensor[(20), float32], Tensor[(60), float32], Tensor[(120, 2), float64], Tensor[(40, 26), int32], Tensor[(1, 112), uint64], Tensor[(135), int8]) */
}

def @func_8198(%var_8171: Tensor[(1408), uint16]) -> (Tensor[(1040), int32], Tensor[(1408), uint16], Tensor[(8, 4, 3), float32]) {
  %464 = cast(%var_8171, dtype="uint16") /* ty=Tensor[(1408), uint16] */;
  %465 = cast(%var_8171, dtype="uint16") /* ty=Tensor[(1408), uint16] */;
  %466 = reshape(%464, newshape=[8, 16, 11]) /* ty=Tensor[(8, 16, 11), uint16] */;
  %467 = reshape(%465, newshape=[8, 16, 11]) /* ty=Tensor[(8, 16, 11), uint16] */;
  %468 = @func_2655(%466, %467) /* ty=(Tensor[(8, 16, 11), float64], Tensor[(8, 10, 13), int32], Tensor[(1040), int32]) */;
  %469 = @func_7778() /* ty=(Tensor[(8, 4, 3), float64],) */;
  %470 = %469.0;
  %471 = cast(%470, dtype="float32") /* ty=Tensor[(8, 4, 3), float32] */;
  %472 = %468.2;
  %473 = acos(%471) /* ty=Tensor[(8, 4, 3), float32] */;
  (%472, %var_8171, %473)
}

def @func_275(%var_225: float64, %var_226: Tensor[(8, 14, 1), float64]) -> Tensor[(8, 14, 1), float32] {
  %474 = cast(%var_225, dtype="float64") /* ty=float64 */;
  %475 = cast(%var_226, dtype="float64") /* ty=Tensor[(8, 14, 1), float64] */;
  %476 = subtract(%474, %475) /* ty=Tensor[(8, 14, 1), float64] */;
  %477 = cast(%var_225, dtype="float32") /* ty=float32 */;
  %478 = cast(%476, dtype="float32") /* ty=Tensor[(8, 14, 1), float32] */;
  floor_divide(%477, %478) /* ty=Tensor[(8, 14, 1), float32] */
}

def @func_4355(%var_4350: Tensor[(11, 8, 1), float32], %var_4351: Tensor[(11, 8, 14), float32], %var_4352: Tensor[(624), int32], %var_4353: Tensor[(117), int8], %var_4354: Tensor[(240), float64]) -> (Tensor[(11, 8, 14), int64], Tensor[(624), int32], Tensor[(117), int8], Tensor[(240), float64], float64, Tensor[(11, 8, 117), bool]) {
  @func_4348(%var_4350, %var_4351, %var_4352, %var_4353, %var_4354) /* ty=(Tensor[(11, 8, 14), int64], Tensor[(624), int32], Tensor[(117), int8], Tensor[(240), float64], float64, Tensor[(11, 8, 117), bool]) */
}

def @func_7486() -> Tensor[(8, 4, 3), int64] {
  @func_7484() /* ty=Tensor[(8, 4, 3), int64] */
}

def @func_2475(%var_2465: Tensor[(4, 2, 11), float64]) -> (Tensor[(4, 2, 11), bool],) {
  %479 = cast(%var_2465, dtype="bool") /* ty=Tensor[(4, 2, 11), bool] */;
  %480 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(4, 2, 11), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %481 = cast(meta[relay.Constant][46] /* ty=Tensor[(4, 2, 11), float64] */, dtype="bool") /* ty=Tensor[(4, 2, 11), bool] */;
  %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %483 = equal(%481, %482) /* ty=Tensor[(4, 2, 11), bool] */;
  (%483,)
}

def @func_8463(%var_8452: float64, %var_8453: Tensor[(9, 13, 5), float64]) -> (Tensor[(9, 13, 5), float64],) {
  %484 = cast(%var_8452, dtype="float64") /* ty=float64 */;
  %485 = cast(%var_8453, dtype="float64") /* ty=Tensor[(9, 13, 5), float64] */;
  %486 = power(%484, %485) /* ty=Tensor[(9, 13, 5), float64] */;
  (%486,)
}

def @func_4547(%var_4545: Tensor[(6, 9, 16), float32]) -> (Tensor[(6, 9, 16), float32],) {
  @func_4544(%var_4545) /* ty=(Tensor[(6, 9, 16), float32],) */
}

def @func_3437(%var_3435: Tensor[(5, 14, 6), float64]) -> (Tensor[(5, 14, 6), float64], Tensor[(1, 112), uint64], Tensor[(135), int8]) {
  @func_3434(%var_3435) /* ty=(Tensor[(5, 14, 6), float64], Tensor[(1, 112), uint64], Tensor[(135), int8]) */
}

def @func_3643(%var_3638: Tensor[(1, 9, 8), float32], %var_3639: Tensor[(5, 4), float32], %var_3640: Tensor[(1, 60), float32], %var_3641: Tensor[(240), float64], %var_3642: Tensor[(1040), int32]) -> (Tensor[(?, 9, 8), float32], Tensor[(2, 10, 3), float32], Tensor[(5, 4), float32], Tensor[(1, 60), float32], Tensor[(1, 117), int8], Tensor[(240), float64], float64, Tensor[(1040), int32]) {
  %508 = fn (%var_3591: Tensor[(1, 9, 8), float32], %var_3607: Tensor[(5, 4), float32], %var_3608: Tensor[(1, 60), float32], %var_3610: Tensor[(240), float64], %var_3612: Tensor[(1040), int32]) -> (Tensor[(?, 9, 8), float32], Tensor[(2, 10, 3), float32], Tensor[(5, 4), float32], Tensor[(1, 60), float32], Tensor[(1, 117), int8], Tensor[(240), float64], float64, Tensor[(1040), int32]) {
    %487 = cast(%var_3591, dtype="float32") /* ty=Tensor[(1, 9, 8), float32] */;
    %488 = atanh(%487) /* ty=Tensor[(1, 9, 8), float32] */;
    %489 = cast(%var_3591, dtype="float32") /* ty=Tensor[(1, 9, 8), float32] */;
    %490 = shape_of(%488, dtype="int32") /* ty=Tensor[(3), int32] */;
    %491 = cast(%488, dtype="float32") /* ty=Tensor[(1, 9, 8), float32] */;
    %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %493 = cast(%var_3607, dtype="float32") /* ty=Tensor[(5, 4), float32] */;
    %494 = cast(%var_3608, dtype="float32") /* ty=Tensor[(1, 60), float32] */;
    %495 = cast(meta[relay.Constant][47] /* ty=Tensor[(1, 117), int8] */, dtype="int8") /* ty=Tensor[(1, 117), int8] */;
    %496 = cast(%var_3610, dtype="float64") /* ty=Tensor[(240), float64] */;
    %497 = cast(-4.25259f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %498 = cast(%var_3612, dtype="int32") /* ty=Tensor[(1040), int32] */;
    %499 = reshape(%493, newshape=[2, 10, 1]) /* ty=Tensor[(2, 10, 1), float32] */;
    %500 = reshape(%494, newshape=[2, 10, 3]) /* ty=Tensor[(2, 10, 3), float32] */;
    %501 = reshape(%495, newshape=[117]) /* ty=Tensor[(117), int8] */;
    %502 = reshape(%496, newshape=[240]) /* ty=Tensor[(240), float64] */;
    %503 = reshape(%497, newshape=[]) /* ty=float64 */;
    %504 = reshape(%498, newshape=[1040]) /* ty=Tensor[(1040), int32] */;
    %505 = @func_2063(%499, %500, %501, %502, %503, %504) /* ty=(Tensor[(2, 10, 3), float32], Tensor[(240), float64], float64, Tensor[(624), int32], Tensor[(2, 10, 3), int8], Tensor[(8, 14, 1), float32], Tensor[(28, 4), float64], Tensor[(13, 3, 3), bool], Tensor[(1040), float64], Tensor[(13, 3, 3), uint16]) */;
    %506 = subtract(%491, %492) /* ty=Tensor[(?, 9, 8), float32] */;
    %507 = %505.0;
    (%506, %507, %var_3607, %var_3608, meta[relay.Constant][47] /* ty=Tensor[(1, 117), int8] */, %var_3610, -4.25259f64 /* ty=float64 */, %var_3612)
  };
  %508(%var_3638, %var_3639, %var_3640, %var_3641, %var_3642) /* ty=(Tensor[(?, 9, 8), float32], Tensor[(2, 10, 3), float32], Tensor[(5, 4), float32], Tensor[(1, 60), float32], Tensor[(1, 117), int8], Tensor[(240), float64], float64, Tensor[(1040), int32]) */
}

def @func_7779() -> (Tensor[(8, 4, 3), float64],) {
  %512 = fn () -> (Tensor[(8, 4, 3), float64],) {
    %509 = @func_7484() /* ty=Tensor[(8, 4, 3), int64] */;
    %510 = cast(%509, dtype="float64") /* ty=Tensor[(8, 4, 3), float64] */;
    %511 = log10(%510) /* ty=Tensor[(8, 4, 3), float64] */;
    (%511,)
  };
  %512() /* ty=(Tensor[(8, 4, 3), float64],) */
}

def @func_6718(%var_6716: Tensor[(13, 4, 4), int64], %var_6717: Tensor[(13, 4, 4), int64]) -> Tensor[(13, 4, 4), int64] {
  @func_6714(%var_6716, %var_6717) /* ty=Tensor[(13, 4, 4), int64] */
}

def @func_2889(%var_2888: Tensor[(1, 112), float64]) -> (Tensor[(8, 6, 9), int16], Tensor[(6, 16, 7), float64], Tensor[(1, 112), float64]) {
  %522 = fn (%var_2885: Tensor[(1, 112), float64]) -> (Tensor[(8, 6, 9), int16], Tensor[(6, 16, 7), float64], Tensor[(1, 112), float64]) {
    %513 = cast(meta[relay.Constant][49] /* ty=Tensor[(8, 6, 9), int16] */, dtype="int16") /* ty=Tensor[(8, 6, 9), int16] */;
    %514 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(8, 6, 9), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %515 = cast(meta[relay.Constant][48] /* ty=Tensor[(8, 6, 9), int16] */, dtype="int16") /* ty=Tensor[(8, 6, 9), int16] */;
    %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %517 = cast(%var_2885, dtype="float64") /* ty=Tensor[(1, 112), float64] */;
    %518 = reshape(%517, newshape=[1, 16, 7]) /* ty=Tensor[(1, 16, 7), float64] */;
    %519 = @func_742(%518) /* ty=(Tensor[(6, 16, 7), float64], Tensor[(6, 16, 7), float64]) */;
    %520 = multiply(%515, %516) /* ty=Tensor[(8, 6, 9), int16] */;
    %521 = %519.0;
    (%520, %521, %var_2885)
  };
  %522(%var_2888) /* ty=(Tensor[(8, 6, 9), int16], Tensor[(6, 16, 7), float64], Tensor[(1, 112), float64]) */
}

def @func_7321(%var_7319: Tensor[(8, 4, 3), int64], %var_7320: Tensor[(432), float64]) -> (Tensor[(2160), float64], Tensor[(3, 2, 2), float64], Tensor[(9, 16, 15), float32], Tensor[(8, 4, 3), float64], Tensor[(216, 2), float64], uint32, Tensor[(432), float64]) {
  %550 = fn (%var_7302: Tensor[(8, 4, 3), int64], %var_7309: Tensor[(432), float64]) -> (Tensor[(2160), float64], Tensor[(3, 2, 2), float64], Tensor[(9, 16, 15), float32], Tensor[(8, 4, 3), float64], Tensor[(216, 2), float64], uint32, Tensor[(432), float64]) {
    %523 = cast(meta[relay.Constant][51] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
    %524 = reshape(%523, newshape=[3, 2, 2]) /* ty=Tensor[(3, 2, 2), float64] */;
    %525 = @func_967(%524) /* ty=Tensor[(3, 2, 2), int8] */;
    %526 = cast(meta[relay.Constant][51] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
    %527 = shape_of(%525, dtype="int32") /* ty=Tensor[(3), int32] */;
    %528 = cast(%525, dtype="float64") /* ty=Tensor[(3, 2, 2), float64] */;
    %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %530 = cast(meta[relay.Constant][50] /* ty=Tensor[(2160), float64] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
    %531 = reshape(%530, newshape=[9, 16, 15]) /* ty=Tensor[(9, 16, 15), float64] */;
    %532 = @func_1330(%531) /* ty=(Tensor[(9, 16, 15), float64],) */;
    %533 = %532.0;
    %534 = cast(%533, dtype="float32") /* ty=Tensor[(9, 16, 15), float32] */;
    %535 = @func_7211() /* ty=(Tensor[(8, 4, 3), int64],) */;
    %536 = %535.0;
    %537 = cast(%var_7302, dtype="float64") /* ty=Tensor[(8, 4, 3), float64] */;
    %538 = shape_of(%536, dtype="int32") /* ty=Tensor[(3), int32] */;
    %539 = cast(%536, dtype="float64") /* ty=Tensor[(8, 4, 3), float64] */;
    %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %541 = cast(meta[relay.Constant][52] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %542 = cast(%var_7309, dtype="float64") /* ty=Tensor[(432), float64] */;
    %543 = reshape(%541, newshape=[]) /* ty=uint32 */;
    %544 = reshape(%542, newshape=[216, 2]) /* ty=Tensor[(216, 2), float64] */;
    %545 = @func_6115(%543, %544) /* ty=(Tensor[(12, 16, 9), uint32], Tensor[(12, 4, 9), float64], Tensor[(216, 2), float64]) */;
    %546 = divide(%528, %529) /* ty=Tensor[(3, 2, 2), float64] */;
    %547 = atan(%534) /* ty=Tensor[(9, 16, 15), float32] */;
    %548 = power(%539, %540) /* ty=Tensor[(8, 4, 3), float64] */;
    %549 = %545.2;
    (meta[relay.Constant][50] /* ty=Tensor[(2160), float64] */, %546, %547, %548, %549, meta[relay.Constant][52] /* ty=uint32 */, %var_7309)
  };
  %550(%var_7319, %var_7320) /* ty=(Tensor[(2160), float64], Tensor[(3, 2, 2), float64], Tensor[(9, 16, 15), float32], Tensor[(8, 4, 3), float64], Tensor[(216, 2), float64], uint32, Tensor[(432), float64]) */
}

def @func_7246(%var_7244: Tensor[(4, 15, 2), float32]) -> (Tensor[(4, 15, 2), float32],) {
  @func_7243(%var_7244) /* ty=(Tensor[(4, 15, 2), float32],) */
}

def @func_5446(%var_5444: Tensor[(4, 6, 6), float32]) -> (Tensor[(4, 6, 6), float32],) {
  @func_5443(%var_5444) /* ty=(Tensor[(4, 6, 6), float32],) */
}

def @func_2478(%var_2476: Tensor[(4, 2, 11), float64]) -> (Tensor[(4, 2, 11), bool],) {
  @func_2475(%var_2476) /* ty=(Tensor[(4, 2, 11), bool],) */
}

def @func_5673(%var_5671: Tensor[(7, 5, 10), bool]) -> Tensor[(7, 5, 10), bool] {
  @func_5670(%var_5671) /* ty=Tensor[(7, 5, 10), bool] */
}

def @func_2186(%var_2185: Tensor[(5, 3, 9), int8]) -> (Tensor[(5, 3, 9), int8], Tensor[(5, 3, 9), bool], Tensor[(8, 14, 1), float32], Tensor[(1, 112), uint64]) {
  %565 = fn (%var_2145: Tensor[(5, 3, 9), int8]) -> (Tensor[(5, 3, 9), int8], Tensor[(5, 3, 9), bool], Tensor[(8, 14, 1), float32], Tensor[(1, 112), uint64]) {
    %551 = cast(meta[relay.Constant][53] /* ty=Tensor[(5, 3, 1), int8] */, dtype="int8") /* ty=Tensor[(5, 3, 1), int8] */;
    %552 = cast(%var_2145, dtype="int8") /* ty=Tensor[(5, 3, 9), int8] */;
    %553 = cast(%var_2145, dtype="bool") /* ty=Tensor[(5, 3, 9), bool] */;
    %554 = cast(meta[relay.Constant][53] /* ty=Tensor[(5, 3, 1), int8] */, dtype="bool") /* ty=Tensor[(5, 3, 1), bool] */;
    %555 = cast(0.313337f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %556 = cast(meta[relay.Constant][54] /* ty=Tensor[(1, 112), float64] */, dtype="float64") /* ty=Tensor[(1, 112), float64] */;
    %557 = reshape(%555, newshape=[]) /* ty=float64 */;
    %558 = reshape(%556, newshape=[8, 14, 1]) /* ty=Tensor[(8, 14, 1), float64] */;
    %559 = cast(0.313337f64 /* ty=float64 */, dtype="uint64") /* ty=uint64 */;
    %560 = cast(meta[relay.Constant][54] /* ty=Tensor[(1, 112), float64] */, dtype="uint64") /* ty=Tensor[(1, 112), uint64] */;
    %561 = multiply(%551, %552) /* ty=Tensor[(5, 3, 9), int8] */;
    %562 = logical_or(%553, %554) /* ty=Tensor[(5, 3, 9), bool] */;
    %563 = @func_275(%557, %558) /* ty=Tensor[(8, 14, 1), float32] */;
    %564 = bitwise_xor(%559, %560) /* ty=Tensor[(1, 112), uint64] */;
    (%561, %562, %563, %564)
  };
  %565(%var_2185) /* ty=(Tensor[(5, 3, 9), int8], Tensor[(5, 3, 9), bool], Tensor[(8, 14, 1), float32], Tensor[(1, 112), uint64]) */
}

def @func_4129(%var_4126: Tensor[(2, 11, 8), uint16], %var_4127: Tensor[(240), float64], %var_4128: Tensor[(112), float64]) -> (Tensor[(2, 11, 8), uint16], Tensor[(240), float64], Tensor[(9, 11, 14), uint8], Tensor[(1, 1386), uint8], Tensor[(8, 6, 9), int16], Tensor[(112), float64], Tensor[(10, 6, 4), float64]) {
  @func_4124(%var_4126, %var_4127, %var_4128) /* ty=(Tensor[(2, 11, 8), uint16], Tensor[(240), float64], Tensor[(9, 11, 14), uint8], Tensor[(1, 1386), uint8], Tensor[(8, 6, 9), int16], Tensor[(112), float64], Tensor[(10, 6, 4), float64]) */
}

def @func_5254(%var_5252: Tensor[(5, 1, 12), uint8], %var_5253: Tensor[(7, 198), uint8]) -> (Tensor[(5, 1, 12), uint8], Tensor[(9, 11, 14), uint8], Tensor[(7, 198), uint8]) {
  @func_5250(%var_5252, %var_5253) /* ty=(Tensor[(5, 1, 12), uint8], Tensor[(9, 11, 14), uint8], Tensor[(7, 198), uint8]) */
}

def @func_7824(%var_7822: Tensor[(128), uint8], %var_7823: Tensor[(28, 4), float64]) -> (Tensor[(8, 8, 2), uint8], Tensor[(128), uint8], Tensor[(8, 4, 3), float32], Tensor[(8, 4, 3), int64], Tensor[(1, 1386), uint8], Tensor[(4, 44), uint16], Tensor[(240), float64], Tensor[(28, 4), float64]) {
  %584 = fn (%var_7791: Tensor[(128), uint8], %var_7818: Tensor[(28, 4), float64]) -> (Tensor[(8, 8, 2), uint8], Tensor[(128), uint8], Tensor[(8, 4, 3), float32], Tensor[(8, 4, 3), int64], Tensor[(1, 1386), uint8], Tensor[(4, 44), uint16], Tensor[(240), float64], Tensor[(28, 4), float64]) {
    %566 = cast(%var_7791, dtype="uint8") /* ty=Tensor[(128), uint8] */;
    %567 = cast(%var_7791, dtype="uint8") /* ty=Tensor[(128), uint8] */;
    %568 = reshape(%566, newshape=[8, 8, 2]) /* ty=Tensor[(8, 8, 2), uint8] */;
    %569 = reshape(%567, newshape=[8, 8, 2]) /* ty=Tensor[(8, 8, 2), uint8] */;
    %570 = @func_7211() /* ty=(Tensor[(8, 4, 3), int64],) */;
    %571 = %570.0;
    %572 = cast(%571, dtype="float32") /* ty=Tensor[(8, 4, 3), float32] */;
    %573 = cast(meta[relay.Constant][55] /* ty=Tensor[(4, 44), uint16] */, dtype="uint16") /* ty=Tensor[(4, 44), uint16] */;
    %574 = cast(meta[relay.Constant][56] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
    %575 = cast(%var_7818, dtype="float64") /* ty=Tensor[(28, 4), float64] */;
    %576 = reshape(%573, newshape=[2, 11, 8]) /* ty=Tensor[(2, 11, 8), uint16] */;
    %577 = reshape(%574, newshape=[240]) /* ty=Tensor[(240), float64] */;
    %578 = reshape(%575, newshape=[112]) /* ty=Tensor[(112), float64] */;
    %579 = @func_4124(%576, %577, %578) /* ty=(Tensor[(2, 11, 8), uint16], Tensor[(240), float64], Tensor[(9, 11, 14), uint8], Tensor[(1, 1386), uint8], Tensor[(8, 6, 9), int16], Tensor[(112), float64], Tensor[(10, 6, 4), float64]) */;
    %580 = @func_2962(%568, %569) /* ty=Tensor[(8, 8, 2), uint8] */;
    %581 = asin(%572) /* ty=Tensor[(8, 4, 3), float32] */;
    %582 = @func_7399() /* ty=Tensor[(8, 4, 3), int64] */;
    %583 = %579.3;
    (%580, %var_7791, %581, %582, %583, meta[relay.Constant][55] /* ty=Tensor[(4, 44), uint16] */, meta[relay.Constant][56] /* ty=Tensor[(240), float64] */, %var_7818)
  };
  %584(%var_7822, %var_7823) /* ty=(Tensor[(8, 8, 2), uint8], Tensor[(128), uint8], Tensor[(8, 4, 3), float32], Tensor[(8, 4, 3), int64], Tensor[(1, 1386), uint8], Tensor[(4, 44), uint16], Tensor[(240), float64], Tensor[(28, 4), float64]) */
}

def @func_8028(%var_8026: Tensor[(8, 12, 11), int64], %var_8027: Tensor[(8, 12, 11), int64]) -> Tensor[(8, 12, 11), int64] {
  %589 = fn (%var_8016: Tensor[(8, 12, 11), int64], %var_8017: Tensor[(8, 12, 11), int64]) -> Tensor[(8, 12, 11), int64] {
    %585 = cast(%var_8017, dtype="int64") /* ty=Tensor[(8, 12, 11), int64] */;
    %586 = shape_of(%var_8016, dtype="int32") /* ty=Tensor[(3), int32] */;
    %587 = cast(%var_8016, dtype="int64") /* ty=Tensor[(8, 12, 11), int64] */;
    %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    right_shift(%587, %588) /* ty=Tensor[(8, 12, 11), int64] */
  };
  %589(%var_8026, %var_8027) /* ty=Tensor[(8, 12, 11), int64] */
}

def @func_8387() -> (Tensor[(11, 9, 11), uint8],) {
  %591 = fn () -> (Tensor[(11, 9, 11), uint8],) {
    %590 = @func_8353() /* ty=Tensor[(11, 9, 11), uint8] */;
    (%590,)
  };
  %591() /* ty=(Tensor[(11, 9, 11), uint8],) */
}

def @func_9258() -> (Tensor[(11, 9, 11), uint8],) {
  %594 = fn () -> (Tensor[(11, 9, 11), uint8],) {
    %592 = @func_9174() /* ty=(Tensor[(11, 9, 11), uint8],) */;
    %593 = %592.0;
    (%593,)
  };
  %594() /* ty=(Tensor[(11, 9, 11), uint8],) */
}

def @func_597(%var_588: Tensor[(9, 11, 14), uint8]) -> (Tensor[(9, 11, 14), uint8],) {
  %595 = cast(meta[relay.Constant][57] /* ty=Tensor[(9, 11, 14), uint8] */, dtype="uint8") /* ty=Tensor[(9, 11, 14), uint8] */;
  %596 = shape_of(%var_588, dtype="int32") /* ty=Tensor[(3), int32] */;
  %597 = cast(%var_588, dtype="uint8") /* ty=Tensor[(9, 11, 14), uint8] */;
  %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %599 = minimum(%597, %598) /* ty=Tensor[(9, 11, 14), uint8] */;
  (%599,)
}

def @func_4896(%var_4894: Tensor[(9, 14, 14), bool], %var_4895: Tensor[(9, 14, 14), bool]) -> (Tensor[(9, 14, 14), bool],) {
  %605 = fn (%var_4866: Tensor[(9, 14, 14), bool], %var_4867: Tensor[(9, 14, 14), bool]) -> (Tensor[(9, 14, 14), bool],) {
    %600 = cast(%var_4867, dtype="bool") /* ty=Tensor[(9, 14, 14), bool] */;
    %601 = shape_of(%var_4866, dtype="int32") /* ty=Tensor[(3), int32] */;
    %602 = cast(%var_4866, dtype="bool") /* ty=Tensor[(9, 14, 14), bool] */;
    %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %604 = logical_or(%602, %603) /* ty=Tensor[(9, 14, 14), bool] */;
    (%604,)
  };
  %605(%var_4894, %var_4895) /* ty=(Tensor[(9, 14, 14), bool],) */
}

def @func_9152(%var_9150: Tensor[(1386), uint8], %var_9151: Tensor[(1040), int32]) -> (Tensor[(8, 4, 3), float64], Tensor[(9, 11, 14), uint8], Tensor[(42), int64], Tensor[(1040), int32], Tensor[(9, 11, 14), bool]) {
  %624 = fn (%var_9089: Tensor[(1386), uint8], %var_9094: Tensor[(1040), int32]) -> (Tensor[(8, 4, 3), float64], Tensor[(9, 11, 14), uint8], Tensor[(42), int64], Tensor[(1040), int32], Tensor[(9, 11, 14), bool]) {
    %606 = cast(%var_9089, dtype="uint8") /* ty=Tensor[(1386), uint8] */;
    %607 = reshape(%606, newshape=[9, 11, 14]) /* ty=Tensor[(9, 11, 14), uint8] */;
    %608 = @func_597(%607) /* ty=(Tensor[(9, 11, 14), uint8],) */;
    %609 = cast(meta[relay.Constant][58] /* ty=Tensor[(42), int64] */, dtype="int64") /* ty=Tensor[(42), int64] */;
    %610 = cast(%var_9094, dtype="int32") /* ty=Tensor[(1040), int32] */;
    %611 = reshape(%609, newshape=[7, 3, 2]) /* ty=Tensor[(7, 3, 2), int64] */;
    %612 = reshape(%610, newshape=[1040]) /* ty=Tensor[(1040), int32] */;
    %613 = @func_2524(%611, %612) /* ty=(Tensor[(7, 3, 2), int64], Tensor[(9, 11, 14), uint8], Tensor[(1040), int32]) */;
    %614 = %613.1;
    %615 = cast(%614, dtype="float64") /* ty=Tensor[(9, 11, 14), float64] */;
    %616 = tan(%615) /* ty=Tensor[(9, 11, 14), float64] */;
    %617 = cast(%var_9089, dtype="bool") /* ty=Tensor[(1386), bool] */;
    %618 = shape_of(%616, dtype="int32") /* ty=Tensor[(3), int32] */;
    %619 = cast(%616, dtype="bool") /* ty=Tensor[(9, 11, 14), bool] */;
    %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %621 = @func_7872() /* ty=Tensor[(8, 4, 3), float64] */;
    %622 = %608.0;
    %623 = equal(%619, %620) /* ty=Tensor[(9, 11, 14), bool] */;
    (%621, %622, meta[relay.Constant][58] /* ty=Tensor[(42), int64] */, %var_9094, %623)
  };
  %624(%var_9150, %var_9151) /* ty=(Tensor[(8, 4, 3), float64], Tensor[(9, 11, 14), uint8], Tensor[(42), int64], Tensor[(1040), int32], Tensor[(9, 11, 14), bool]) */
}

def @func_2070(%var_2064: Tensor[(2, 10, 1), float32], %var_2065: Tensor[(2, 10, 3), float32], %var_2066: Tensor[(117), int8], %var_2067: Tensor[(240), float64], %var_2068: float64, %var_2069: Tensor[(1040), int32]) -> (Tensor[(2, 10, 3), float32], Tensor[(240), float64], float64, Tensor[(624), int32], Tensor[(2, 10, 3), int8], Tensor[(8, 14, 1), float32], Tensor[(28, 4), float64], Tensor[(13, 3, 3), bool], Tensor[(1040), float64], Tensor[(13, 3, 3), uint16]) {
  %675 = fn (%var_1943: Tensor[(2, 10, 1), float32], %var_1944: Tensor[(2, 10, 3), float32], %var_1964: Tensor[(117), int8], %var_1965: Tensor[(240), float64], %var_1966: float64, %var_2022: Tensor[(1040), int32]) -> (Tensor[(2, 10, 3), float32], Tensor[(240), float64], float64, Tensor[(624), int32], Tensor[(2, 10, 3), int8], Tensor[(8, 14, 1), float32], Tensor[(28, 4), float64], Tensor[(13, 3, 3), bool], Tensor[(1040), float64], Tensor[(13, 3, 3), uint16]) {
    %625 = cast(%var_1943, dtype="float32") /* ty=Tensor[(2, 10, 1), float32] */;
    %626 = cast(%var_1944, dtype="float32") /* ty=Tensor[(2, 10, 3), float32] */;
    %627 = cast(%var_1943, dtype="int8") /* ty=Tensor[(2, 10, 1), int8] */;
    %628 = cast(%var_1944, dtype="int8") /* ty=Tensor[(2, 10, 3), int8] */;
    %629 = cast(%var_1966, dtype="float64") /* ty=float64 */;
    %630 = cast(meta[relay.Constant][60] /* ty=Tensor[(28, 4), float64] */, dtype="float64") /* ty=Tensor[(28, 4), float64] */;
    %631 = reshape(%629, newshape=[]) /* ty=float64 */;
    %632 = reshape(%630, newshape=[8, 14, 1]) /* ty=Tensor[(8, 14, 1), float64] */;
    %633 = cast(%var_1964, dtype="int8") /* ty=Tensor[(117), int8] */;
    %634 = cast(%var_1964, dtype="int8") /* ty=Tensor[(117), int8] */;
    %635 = cast(%var_1965, dtype="float64") /* ty=Tensor[(240), float64] */;
    %636 = cast(%var_1966, dtype="float64") /* ty=float64 */;
    %637 = cast(%var_1965, dtype="float64") /* ty=Tensor[(240), float64] */;
    %638 = reshape(%633, newshape=[13, 3, 3]) /* ty=Tensor[(13, 3, 3), int8] */;
    %639 = reshape(%634, newshape=[13, 3, 3]) /* ty=Tensor[(13, 3, 3), int8] */;
    %640 = reshape(%635, newshape=[240]) /* ty=Tensor[(240), float64] */;
    %641 = reshape(%636, newshape=[]) /* ty=float64 */;
    %642 = reshape(%637, newshape=[10, 6, 4]) /* ty=Tensor[(10, 6, 4), float64] */;
    %643 = @func_832(%638, %639, %640, %641, %642) /* ty=(Tensor[(13, 3, 3), float64], Tensor[(240), float64], Tensor[(8, 14, 1), float32], float64, Tensor[(56, 2), float64], Tensor[(10, 6, 4), float64]) */;
    %644 = %643.0;
    %645 = cast(%var_1964, dtype="bool") /* ty=Tensor[(117), bool] */;
    %646 = shape_of(%644, dtype="int32") /* ty=Tensor[(3), int32] */;
    %647 = cast(%644, dtype="bool") /* ty=Tensor[(13, 3, 3), bool] */;
    %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %649 = cast(meta[relay.Constant][59] /* ty=Tensor[(624), int32] */, dtype="int32") /* ty=Tensor[(624), int32] */;
    %650 = cast(%var_1964, dtype="int8") /* ty=Tensor[(117), int8] */;
    %651 = cast(%var_1965, dtype="float64") /* ty=Tensor[(240), float64] */;
    %652 = cast(%var_1966, dtype="float64") /* ty=float64 */;
    %653 = reshape(%649, newshape=[8, 13, 6]) /* ty=Tensor[(8, 13, 6), int32] */;
    %654 = reshape(%650, newshape=[117]) /* ty=Tensor[(117), int8] */;
    %655 = reshape(%651, newshape=[240]) /* ty=Tensor[(240), float64] */;
    %656 = reshape(%652, newshape=[]) /* ty=float64 */;
    %657 = @func_1701(%653, %654, %655, %656) /* ty=(Tensor[(8, 13, 6), int32], Tensor[(240), float64], Tensor[(117), int8], Tensor[(240), float64], float64, Tensor[(3, 2, 2), int8], Tensor[(12), float64], Tensor[(10, 6, 4), float64], Tensor[(8, 13, 6), float32], Tensor[(1040), int32], Tensor[(1, 1848), float64]) */;
    %658 = %657.9;
    %659 = cast(%var_2022, dtype="float64") /* ty=Tensor[(1040), float64] */;
    %660 = shape_of(%658, dtype="int32") /* ty=Tensor[(1), int32] */;
    %661 = cast(%658, dtype="float64") /* ty=Tensor[(1040), float64] */;
    %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?), float64] */;
    %663 = cast(%644, dtype="float32") /* ty=Tensor[(13, 3, 3), float32] */;
    %664 = sigmoid(%663) /* ty=Tensor[(13, 3, 3), float32] */;
    %665 = cast(%664, dtype="uint16") /* ty=Tensor[(13, 3, 3), uint16] */;
    %666 = shape_of(%644, dtype="int32") /* ty=Tensor[(3), int32] */;
    %667 = cast(%644, dtype="uint16") /* ty=Tensor[(13, 3, 3), uint16] */;
    %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %669 = floor_mod(%625, %626) /* ty=Tensor[(2, 10, 3), float32] */;
    %670 = left_shift(%627, %628) /* ty=Tensor[(2, 10, 3), int8] */;
    %671 = @func_275(%631, %632) /* ty=Tensor[(8, 14, 1), float32] */;
    %672 = greater(%647, %648) /* ty=Tensor[(13, 3, 3), bool] */;
    %673 = floor_mod(%661, %662) /* ty=Tensor[(1040), float64] */;
    %674 = subtract(%667, %668) /* ty=Tensor[(13, 3, 3), uint16] */;
    (%669, %var_1965, %var_1966, meta[relay.Constant][59] /* ty=Tensor[(624), int32] */, %670, %671, meta[relay.Constant][60] /* ty=Tensor[(28, 4), float64] */, %672, %673, %674)
  };
  %675(%var_2064, %var_2065, %var_2066, %var_2067, %var_2068, %var_2069) /* ty=(Tensor[(2, 10, 3), float32], Tensor[(240), float64], float64, Tensor[(624), int32], Tensor[(2, 10, 3), int8], Tensor[(8, 14, 1), float32], Tensor[(28, 4), float64], Tensor[(13, 3, 3), bool], Tensor[(1040), float64], Tensor[(13, 3, 3), uint16]) */
}

def @func_7685(%var_7683: Tensor[(11, 10, 12), float32], %var_7684: Tensor[(2160), float64]) -> (Tensor[(11, 10, 12), float32], Tensor[(8, 6, 13), bool], Tensor[(48), float64], Tensor[(624), float64], Tensor[(9, 16, 15), float64], Tensor[(2160), float64]) {
  %688 = fn (%var_7652: Tensor[(11, 10, 12), float32], %var_7677: Tensor[(2160), float64]) -> (Tensor[(11, 10, 12), float32], Tensor[(8, 6, 13), bool], Tensor[(48), float64], Tensor[(624), float64], Tensor[(9, 16, 15), float64], Tensor[(2160), float64]) {
    %676 = cast(%var_7652, dtype="float32") /* ty=Tensor[(11, 10, 12), float32] */;
    %677 = cast(meta[relay.Constant][61] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
    %678 = cast(meta[relay.Constant][62] /* ty=Tensor[(624), float64] */, dtype="float64") /* ty=Tensor[(624), float64] */;
    %679 = reshape(%677, newshape=[8, 6, 1]) /* ty=Tensor[(8, 6, 1), float64] */;
    %680 = reshape(%678, newshape=[8, 6, 13]) /* ty=Tensor[(8, 6, 13), float64] */;
    %681 = @func_7341(%679, %680) /* ty=(Tensor[(8, 6, 13), bool],) */;
    %682 = cast(%var_7677, dtype="float64") /* ty=Tensor[(2160), float64] */;
    %683 = reshape(%682, newshape=[2160]) /* ty=Tensor[(2160), float64] */;
    %684 = @func_7631(%683) /* ty=(Tensor[(8, 4, 3), int64], Tensor[(9, 16, 15), float64], Tensor[(2160), float64]) */;
    %685 = acos(%676) /* ty=Tensor[(11, 10, 12), float32] */;
    %686 = %681.0;
    %687 = %684.1;
    (%685, %686, meta[relay.Constant][61] /* ty=Tensor[(48), float64] */, meta[relay.Constant][62] /* ty=Tensor[(624), float64] */, %687, %var_7677)
  };
  %688(%var_7683, %var_7684) /* ty=(Tensor[(11, 10, 12), float32], Tensor[(8, 6, 13), bool], Tensor[(48), float64], Tensor[(624), float64], Tensor[(9, 16, 15), float64], Tensor[(2160), float64]) */
}

def @func_8606(%var_8605: Tensor[(144), float32]) -> (Tensor[(11, 9, 11), uint8], Tensor[(4, 6, 6), float32], Tensor[(144), float32]) {
  %695 = fn (%var_8602: Tensor[(144), float32]) -> (Tensor[(11, 9, 11), uint8], Tensor[(4, 6, 6), float32], Tensor[(144), float32]) {
    %689 = @func_8386() /* ty=(Tensor[(11, 9, 11), uint8],) */;
    %690 = cast(%var_8602, dtype="float32") /* ty=Tensor[(144), float32] */;
    %691 = reshape(%690, newshape=[4, 6, 6]) /* ty=Tensor[(4, 6, 6), float32] */;
    %692 = @func_5443(%691) /* ty=(Tensor[(4, 6, 6), float32],) */;
    %693 = %689.0;
    %694 = %692.0;
    (%693, %694, %var_8602)
  };
  %695(%var_8605) /* ty=(Tensor[(11, 9, 11), uint8], Tensor[(4, 6, 6), float32], Tensor[(144), float32]) */
}

def @func_600(%var_598: Tensor[(9, 11, 14), uint8]) -> (Tensor[(9, 11, 14), uint8],) {
  @func_597(%var_598) /* ty=(Tensor[(9, 11, 14), uint8],) */
}

def @func_7238(%var_7236: float64) -> (Tensor[(8, 4, 3), int64], Tensor[(1848), float64], Tensor[(600), int32], Tensor[(1386), uint8], float64, Tensor[(6, 9, 16), float32], Tensor[(432, 2), float32]) {
  @func_7235(%var_7236) /* ty=(Tensor[(8, 4, 3), int64], Tensor[(1848), float64], Tensor[(600), int32], Tensor[(1386), uint8], float64, Tensor[(6, 9, 16), float32], Tensor[(432, 2), float32]) */
}

def @func_8539(%var_8537: Tensor[(8, 4, 3), int64]) -> (Tensor[(8, 4, 3), int64],) {
  @func_8536(%var_8537) /* ty=(Tensor[(8, 4, 3), int64],) */
}

def @main(%var_9954: Tensor[(1408), uint16], %var_9969: Tensor[(20, 108), float64], %var_9972: Tensor[(112), float64]) -> (Tensor[(1040), int32], Tensor[(1408), bool], Tensor[(9, 16, 15), float64], Tensor[(1320), float32], Tensor[(20, 108), float64], Tensor[(112), float64], Tensor[(112), float64], Tensor[(8, 4, 3), float32], Tensor[(8, 4, 3), bool], Tensor[(1408), float64]) {
  %696 = cast(meta[relay.Constant][63] /* ty=Tensor[(1408), uint16] */, dtype="uint16") /* ty=Tensor[(1408), uint16] */;
  %697 = cast(meta[relay.Constant][63] /* ty=Tensor[(1408), uint16] */, dtype="uint16") /* ty=Tensor[(1408), uint16] */;
  %698 = reshape(%696, newshape=[8, 16, 11]) /* ty=Tensor[(8, 16, 11), uint16] */;
  %699 = reshape(%697, newshape=[8, 16, 11]) /* ty=Tensor[(8, 16, 11), uint16] */;
  %700 = @func_2659(%698, %699) /* ty=(Tensor[(8, 16, 11), float64], Tensor[(8, 10, 13), int32], Tensor[(1040), int32]) */;
  %701 = cast(%var_9954, dtype="bool") /* ty=Tensor[(1408), bool] */;
  %702 = shape_of(meta[relay.Constant][63] /* ty=Tensor[(1408), uint16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %703 = cast(meta[relay.Constant][63] /* ty=Tensor[(1408), uint16] */, dtype="bool") /* ty=Tensor[(1408), bool] */;
  %704 = dyn.reshape(%701, %702, newshape=[]) /* ty=Tensor[(?), bool] */;
  %705 = cast(meta[relay.Constant][64] /* ty=Tensor[(1320), float32] */, dtype="float32") /* ty=Tensor[(1320), float32] */;
  %706 = cast(%var_9969, dtype="float64") /* ty=Tensor[(20, 108), float64] */;
  %707 = reshape(%705, newshape=[11, 10, 12]) /* ty=Tensor[(11, 10, 12), float32] */;
  %708 = reshape(%706, newshape=[2160]) /* ty=Tensor[(2160), float64] */;
  %709 = @func_7685(%707, %708) /* ty=(Tensor[(11, 10, 12), float32], Tensor[(8, 6, 13), bool], Tensor[(48), float64], Tensor[(624), float64], Tensor[(9, 16, 15), float64], Tensor[(2160), float64]) */;
  %710 = cast(%var_9972, dtype="float64") /* ty=Tensor[(112), float64] */;
  %711 = reshape(%710, newshape=[112]) /* ty=Tensor[(112), float64] */;
  %712 = @func_9238(%711) /* ty=(Tensor[(2160), float64], Tensor[(1320), float32], Tensor[(20, 108), float64], Tensor[(8, 6, 9), int16], Tensor[(176), uint16], Tensor[(240), float64], Tensor[(112), float64], Tensor[(3, 11, 4), float64]) */;
  %713 = @func_9448() /* ty=(Tensor[(8, 4, 3), int64],) */;
  %714 = %713.0;
  %715 = cast(%714, dtype="int64") /* ty=Tensor[(8, 4, 3), int64] */;
  %716 = reshape(%715, newshape=[8, 4, 3]) /* ty=Tensor[(8, 4, 3), int64] */;
  %717 = @func_9571(%716) /* ty=Tensor[(8, 4, 3), int8] */;
  %718 = @func_9449() /* ty=(Tensor[(8, 4, 3), int64],) */;
  %719 = %718.0;
  %720 = cast(%719, dtype="float32") /* ty=Tensor[(8, 4, 3), float32] */;
  %721 = shape_of(%717, dtype="int32") /* ty=Tensor[(3), int32] */;
  %722 = cast(%717, dtype="float32") /* ty=Tensor[(8, 4, 3), float32] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %724 = cast(%714, dtype="int64") /* ty=Tensor[(8, 4, 3), int64] */;
  %725 = reshape(%724, newshape=[8, 4, 3]) /* ty=Tensor[(8, 4, 3), int64] */;
  %726 = @func_9571(%725) /* ty=Tensor[(8, 4, 3), int8] */;
  %727 = cast(%714, dtype="float32") /* ty=Tensor[(8, 4, 3), float32] */;
  %728 = shape_of(%726, dtype="int32") /* ty=Tensor[(3), int32] */;
  %729 = cast(%726, dtype="float32") /* ty=Tensor[(8, 4, 3), float32] */;
  %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %731 = floor_divide(%729, %730) /* ty=Tensor[(8, 4, 3), float32] */;
  %732 = cast(%731, dtype="int64") /* ty=Tensor[(8, 4, 3), int64] */;
  %733 = reshape(%732, newshape=[8, 4, 3]) /* ty=Tensor[(8, 4, 3), int64] */;
  %734 = @func_9028(%733) /* ty=(Tensor[(8, 4, 3), bool], Tensor[(8, 4, 3), float64], Tensor[(8, 4, 3), bool], Tensor[(8, 4, 3), int64]) */;
  %735 = cast(meta[relay.Constant][63] /* ty=Tensor[(1408), uint16] */, dtype="float64") /* ty=Tensor[(1408), float64] */;
  %736 = %700.2;
  %737 = not_equal(%703, %704) /* ty=Tensor[(1408), bool] */;
  %738 = %709.4;
  %739 = %712.6;
  %740 = floor_divide(%722, %723) /* ty=Tensor[(8, 4, 3), float32] */;
  %741 = %734.2;
  %742 = log2(%735) /* ty=Tensor[(1408), float64] */;
  (%736, %737, %738, meta[relay.Constant][64] /* ty=Tensor[(1320), float32] */, %var_9969, %739, %var_9972, %740, %741, %742)
}

def @func_8355() -> Tensor[(11, 9, 11), uint8] {
  @func_8353() /* ty=Tensor[(11, 9, 11), uint8] */
}

def @func_6714(%var_6685: Tensor[(13, 4, 4), int64], %var_6686: Tensor[(13, 4, 4), int64]) -> Tensor[(13, 4, 4), int64] {
  %743 = cast(%var_6686, dtype="int64") /* ty=Tensor[(13, 4, 4), int64] */;
  %744 = shape_of(%var_6685, dtype="int32") /* ty=Tensor[(3), int32] */;
  %745 = cast(%var_6685, dtype="int64") /* ty=Tensor[(13, 4, 4), int64] */;
  %746 = dyn.reshape(%743, %744, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  logical_xor(%745, %746) /* ty=Tensor[(13, 4, 4), int64] */
}

def @func_8774(%var_8770: Tensor[(2, 4, 15), uint32], %var_8771: Tensor[(2, 4, 15), uint32], %var_8772: float64, %var_8773: Tensor[(2160), float64]) -> (Tensor[(2, 4, 15), uint32], Tensor[(8, 14, 1), float32], Tensor[(13, 9), int8], Tensor[(24, 10), float64], float64, Tensor[(9, 16, 15), float64], Tensor[(1320), float32], Tensor[(2160), float64], Tensor[(13, 4, 4), int64], Tensor[(208), int64]) {
  @func_8768(%var_8770, %var_8771, %var_8772, %var_8773) /* ty=(Tensor[(2, 4, 15), uint32], Tensor[(8, 14, 1), float32], Tensor[(13, 9), int8], Tensor[(24, 10), float64], float64, Tensor[(9, 16, 15), float64], Tensor[(1320), float32], Tensor[(2160), float64], Tensor[(13, 4, 4), int64], Tensor[(208), int64]) */
}

def @func_5670(%var_5662: Tensor[(7, 5, 10), bool]) -> Tensor[(7, 5, 10), bool] {
  %747 = cast(meta[relay.Constant][65] /* ty=Tensor[(7, 5, 10), bool] */, dtype="bool") /* ty=Tensor[(7, 5, 10), bool] */;
  %748 = shape_of(%var_5662, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%var_5662, dtype="bool") /* ty=Tensor[(7, 5, 10), bool] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%749, %750) /* ty=Tensor[(7, 5, 10), bool] */
}

def @func_7400() -> Tensor[(8, 4, 3), int64] {
  %752 = fn () -> Tensor[(8, 4, 3), int64] {
    %751 = @func_7211() /* ty=(Tensor[(8, 4, 3), int64],) */;
    %751.0
  };
  %752() /* ty=Tensor[(8, 4, 3), int64] */
}

def @func_3434(%var_3411: Tensor[(5, 14, 6), float64]) -> (Tensor[(5, 14, 6), float64], Tensor[(1, 112), uint64], Tensor[(135), int8]) {
  %753 = cast(%var_3411, dtype="float64") /* ty=Tensor[(5, 14, 6), float64] */;
  %754 = asin(%753) /* ty=Tensor[(5, 14, 6), float64] */;
  %755 = cast(meta[relay.Constant][66] /* ty=Tensor[(5, 14, 6), float64] */, dtype="float64") /* ty=Tensor[(5, 14, 6), float64] */;
  %756 = shape_of(%754, dtype="int32") /* ty=Tensor[(3), int32] */;
  %757 = cast(%754, dtype="float64") /* ty=Tensor[(5, 14, 6), float64] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %759 = cast(meta[relay.Constant][67] /* ty=Tensor[(135), int8] */, dtype="int8") /* ty=Tensor[(135), int8] */;
  %760 = reshape(%759, newshape=[5, 3, 9]) /* ty=Tensor[(5, 3, 9), int8] */;
  %761 = @func_2184(%760) /* ty=(Tensor[(5, 3, 9), int8], Tensor[(5, 3, 9), bool], Tensor[(8, 14, 1), float32], Tensor[(1, 112), uint64]) */;
  %762 = minimum(%757, %758) /* ty=Tensor[(5, 14, 6), float64] */;
  %763 = %761.3;
  (%762, %763, meta[relay.Constant][67] /* ty=Tensor[(135), int8] */)
}

def @func_8536(%var_8496: Tensor[(8, 4, 3), int64]) -> (Tensor[(8, 4, 3), int64],) {
  %764 = @func_7211() /* ty=(Tensor[(8, 4, 3), int64],) */;
  %765 = %764.0;
  %766 = cast(%var_8496, dtype="bool") /* ty=Tensor[(8, 4, 3), bool] */;
  %767 = shape_of(%765, dtype="int32") /* ty=Tensor[(3), int32] */;
  %768 = cast(%765, dtype="bool") /* ty=Tensor[(8, 4, 3), bool] */;
  %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %770 = logical_and(%768, %769) /* ty=Tensor[(8, 4, 3), bool] */;
  %771 = cast(%765, dtype="int64") /* ty=Tensor[(8, 4, 3), int64] */;
  %772 = shape_of(%770, dtype="int32") /* ty=Tensor[(3), int32] */;
  %773 = cast(%770, dtype="int64") /* ty=Tensor[(8, 4, 3), int64] */;
  %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %775 = add(%773, %774) /* ty=Tensor[(8, 4, 3), int64] */;
  (%775,)
}

def @func_5934(%var_5932: Tensor[(16, 5, 2), float32], %var_5933: Tensor[(240), float64]) -> (Tensor[(16, 5, 2), float32], Tensor[(56, 2), float64], Tensor[(117), int8], Tensor[(240), float64], float64) {
  %790 = fn (%var_5909: Tensor[(16, 5, 2), float32], %var_5920: Tensor[(240), float64]) -> (Tensor[(16, 5, 2), float32], Tensor[(56, 2), float64], Tensor[(117), int8], Tensor[(240), float64], float64) {
    %776 = cast(%var_5909, dtype="float32") /* ty=Tensor[(16, 5, 2), float32] */;
    %777 = cast(meta[relay.Constant][68] /* ty=Tensor[(117), int8] */, dtype="int8") /* ty=Tensor[(117), int8] */;
    %778 = cast(meta[relay.Constant][68] /* ty=Tensor[(117), int8] */, dtype="int8") /* ty=Tensor[(117), int8] */;
    %779 = cast(%var_5920, dtype="float64") /* ty=Tensor[(240), float64] */;
    %780 = cast(-0.979457f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %781 = cast(%var_5920, dtype="float64") /* ty=Tensor[(240), float64] */;
    %782 = reshape(%777, newshape=[13, 3, 3]) /* ty=Tensor[(13, 3, 3), int8] */;
    %783 = reshape(%778, newshape=[13, 3, 3]) /* ty=Tensor[(13, 3, 3), int8] */;
    %784 = reshape(%779, newshape=[240]) /* ty=Tensor[(240), float64] */;
    %785 = reshape(%780, newshape=[]) /* ty=float64 */;
    %786 = reshape(%781, newshape=[10, 6, 4]) /* ty=Tensor[(10, 6, 4), float64] */;
    %787 = @func_832(%782, %783, %784, %785, %786) /* ty=(Tensor[(13, 3, 3), float64], Tensor[(240), float64], Tensor[(8, 14, 1), float32], float64, Tensor[(56, 2), float64], Tensor[(10, 6, 4), float64]) */;
    %788 = atanh(%776) /* ty=Tensor[(16, 5, 2), float32] */;
    %789 = %787.4;
    (%788, %789, meta[relay.Constant][68] /* ty=Tensor[(117), int8] */, %var_5920, -0.979457f64 /* ty=float64 */)
  };
  %790(%var_5932, %var_5933) /* ty=(Tensor[(16, 5, 2), float32], Tensor[(56, 2), float64], Tensor[(117), int8], Tensor[(240), float64], float64) */
}

def @func_9608(%var_9606: Tensor[(13, 16, 14), float32]) -> Tensor[(13, 16, 14), float32] {
  @func_9605(%var_9606) /* ty=Tensor[(13, 16, 14), float32] */
}

def @func_7457(%var_7454: Tensor[(9, 3, 13), float64], %var_7455: Tensor[(9, 3, 13), float64], %var_7456: Tensor[(240, 1), float64]) -> (Tensor[(9, 3, 13), float64], float64, Tensor[(160), float32], Tensor[(240, 1), float64]) {
  %802 = fn (%var_7439: Tensor[(9, 3, 13), float64], %var_7440: Tensor[(9, 3, 13), float64], %var_7447: Tensor[(240, 1), float64]) -> (Tensor[(9, 3, 13), float64], float64, Tensor[(160), float32], Tensor[(240, 1), float64]) {
    %791 = cast(%var_7440, dtype="float64") /* ty=Tensor[(9, 3, 13), float64] */;
    %792 = shape_of(%var_7439, dtype="int32") /* ty=Tensor[(3), int32] */;
    %793 = cast(%var_7439, dtype="float64") /* ty=Tensor[(9, 3, 13), float64] */;
    %794 = dyn.reshape(%791, %792, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %795 = cast(meta[relay.Constant][69] /* ty=Tensor[(160), float32] */, dtype="float32") /* ty=Tensor[(160), float32] */;
    %796 = cast(%var_7447, dtype="float64") /* ty=Tensor[(240, 1), float64] */;
    %797 = reshape(%795, newshape=[16, 5, 2]) /* ty=Tensor[(16, 5, 2), float32] */;
    %798 = reshape(%796, newshape=[240]) /* ty=Tensor[(240), float64] */;
    %799 = @func_5931(%797, %798) /* ty=(Tensor[(16, 5, 2), float32], Tensor[(56, 2), float64], Tensor[(117), int8], Tensor[(240), float64], float64) */;
    %800 = multiply(%793, %794) /* ty=Tensor[(9, 3, 13), float64] */;
    %801 = %799.4;
    (%800, %801, meta[relay.Constant][69] /* ty=Tensor[(160), float32] */, %var_7447)
  };
  %802(%var_7454, %var_7455, %var_7456) /* ty=(Tensor[(9, 3, 13), float64], float64, Tensor[(160), float32], Tensor[(240, 1), float64]) */
}

def @func_7341(%var_7329: Tensor[(8, 6, 1), float64], %var_7330: Tensor[(8, 6, 13), float64]) -> (Tensor[(8, 6, 13), bool],) {
  %803 = cast(%var_7329, dtype="bool") /* ty=Tensor[(8, 6, 1), bool] */;
  %804 = cast(%var_7330, dtype="bool") /* ty=Tensor[(8, 6, 13), bool] */;
  %805 = not_equal(%803, %804) /* ty=Tensor[(8, 6, 13), bool] */;
  (%805,)
}

def @func_8081(%var_8077: uint16, %var_8078: Tensor[(1, 16, 13), uint16], %var_8079: Tensor[(624), int32], %var_8080: Tensor[(240), float64]) -> (Tensor[(1, 16, 13), bool], Tensor[(117), int8], Tensor[(88), float32], Tensor[(2, 616), float32], Tensor[(624), int32], Tensor[(117), int8], Tensor[(240), float64]) {
  @func_8075(%var_8077, %var_8078, %var_8079, %var_8080) /* ty=(Tensor[(1, 16, 13), bool], Tensor[(117), int8], Tensor[(88), float32], Tensor[(2, 616), float32], Tensor[(624), int32], Tensor[(117), int8], Tensor[(240), float64]) */
}

def @func_9175() -> (Tensor[(11, 9, 11), uint8],) {
  %807 = fn () -> (Tensor[(11, 9, 11), uint8],) {
    %806 = @func_8353() /* ty=Tensor[(11, 9, 11), uint8] */;
    (%806,)
  };
  %807() /* ty=(Tensor[(11, 9, 11), uint8],) */
}

def @func_9235(%var_9213: Tensor[(112), float64]) -> (Tensor[(2160), float64], Tensor[(1320), float32], Tensor[(20, 108), float64], Tensor[(8, 6, 9), int16], Tensor[(176), uint16], Tensor[(240), float64], Tensor[(112), float64], Tensor[(3, 11, 4), float64]) {
  %808 = cast(meta[relay.Constant][70] /* ty=Tensor[(1320), float32] */, dtype="float32") /* ty=Tensor[(1320), float32] */;
  %809 = cast(meta[relay.Constant][71] /* ty=Tensor[(20, 108), float64] */, dtype="float64") /* ty=Tensor[(20, 108), float64] */;
  %810 = reshape(%808, newshape=[11, 10, 12]) /* ty=Tensor[(11, 10, 12), float32] */;
  %811 = reshape(%809, newshape=[2160]) /* ty=Tensor[(2160), float64] */;
  %812 = @func_7682(%810, %811) /* ty=(Tensor[(11, 10, 12), float32], Tensor[(8, 6, 13), bool], Tensor[(48), float64], Tensor[(624), float64], Tensor[(9, 16, 15), float64], Tensor[(2160), float64]) */;
  %813 = cast(meta[relay.Constant][72] /* ty=Tensor[(176), uint16] */, dtype="uint16") /* ty=Tensor[(176), uint16] */;
  %814 = cast(meta[relay.Constant][73] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %815 = cast(%var_9213, dtype="float64") /* ty=Tensor[(112), float64] */;
  %816 = reshape(%813, newshape=[2, 11, 8]) /* ty=Tensor[(2, 11, 8), uint16] */;
  %817 = reshape(%814, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %818 = reshape(%815, newshape=[112]) /* ty=Tensor[(112), float64] */;
  %819 = @func_4124(%816, %817, %818) /* ty=(Tensor[(2, 11, 8), uint16], Tensor[(240), float64], Tensor[(9, 11, 14), uint8], Tensor[(1, 1386), uint8], Tensor[(8, 6, 9), int16], Tensor[(112), float64], Tensor[(10, 6, 4), float64]) */;
  %820 = cast(meta[relay.Constant][74] /* ty=Tensor[(3, 11, 4), float32] */, dtype="float32") /* ty=Tensor[(3, 11, 4), float32] */;
  %821 = rsqrt(%820) /* ty=Tensor[(3, 11, 4), float32] */;
  %822 = cast(%821, dtype="float32") /* ty=Tensor[(3, 11, 4), float32] */;
  %823 = acos(%822) /* ty=Tensor[(3, 11, 4), float32] */;
  %824 = cast(%823, dtype="float64") /* ty=Tensor[(3, 11, 4), float64] */;
  %825 = %812.5;
  %826 = %819.4;
  %827 = sinh(%824) /* ty=Tensor[(3, 11, 4), float64] */;
  (%825, meta[relay.Constant][70] /* ty=Tensor[(1320), float32] */, meta[relay.Constant][71] /* ty=Tensor[(20, 108), float64] */, %826, meta[relay.Constant][72] /* ty=Tensor[(176), uint16] */, meta[relay.Constant][73] /* ty=Tensor[(240), float64] */, %var_9213, %827)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen423/build/output.py", line 1761, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:16:08] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

