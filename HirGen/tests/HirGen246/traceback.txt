==========mod==========
#[version = "0.0.5"]
def @func_9660() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(5, 3, 5), float32], Tensor[(5, 15), float32]) {
  %0 = @func_6470() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %1 = @func_3645() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), bool]) */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 15), float32] */, dtype="float32") /* ty=Tensor[(5, 15), float32] */;
  %3 = reshape(%2, newshape=[5, 3, 5]) /* ty=Tensor[(5, 3, 5), float32] */;
  %4 = %0.1;
  %5 = %1.1;
  %6 = @func_1995(%3) /* ty=Tensor[(5, 3, 5), float32] */;
  (%4, %5, %6, meta[relay.Constant][0] /* ty=Tensor[(5, 15), float32] */)
}

def @func_9371() -> Tensor[(12, 3, 11), float32] {
  %7 = @func_2459() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %7.0
}

def @func_9949() -> (Tensor[(12, 3, 11), float32],) {
  %8 = @func_6470() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %9 = %8.2;
  (%9,)
}

def @func_11039() -> (Tensor[(12, 3, 11), float32],) {
  %10 = @func_8187() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %11 = %10.0;
  (%11,)
}

def @func_3923() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %12 = @func_1334() /* ty=(Tensor[(2, 13, 2), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %13 = @func_2712() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %14 = %12.2;
  %15 = %13.0;
  (%14, %15)
}

def @func_9319() -> (Tensor[(12, 3, 11), float32],) {
  %16 = @func_1957() /* ty=Tensor[(12, 3, 11), float32] */;
  (%16,)
}

def @func_8224(%var_8209: Tensor[(12, 9, 6), uint16], %var_8210: Tensor[(12, 9, 6), uint16]) -> Tensor[(12, 9, 6), uint16] {
  %17 = cast(%var_8210, dtype="uint16") /* ty=Tensor[(12, 9, 6), uint16] */;
  %18 = shape_of(%var_8209, dtype="int32") /* ty=Tensor[(3), int32] */;
  %19 = cast(%var_8209, dtype="uint16") /* ty=Tensor[(12, 9, 6), uint16] */;
  %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_xor(%19, %20) /* ty=Tensor[(12, 9, 6), uint16] */
}

def @func_9135() -> Tensor[(2, 13, 2), float32] {
  %21 = @func_1334() /* ty=(Tensor[(2, 13, 2), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %21.0
}

def @func_8979() -> (Tensor[(12, 3, 11), float32], Tensor[(6, 10, 14), float64], Tensor[(2, 420), float64]) {
  %22 = @func_5873() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), int8]) */;
  %23 = cast(meta[relay.Constant][1] /* ty=Tensor[(2, 420), float64] */, dtype="float64") /* ty=Tensor[(2, 420), float64] */;
  %24 = reshape(%23, newshape=[6, 10, 14]) /* ty=Tensor[(6, 10, 14), float64] */;
  %25 = %22.0;
  %26 = @func_5947(%24) /* ty=Tensor[(6, 10, 14), float64] */;
  (%25, %26, meta[relay.Constant][1] /* ty=Tensor[(2, 420), float64] */)
}

def @func_974() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %27 = @func_775() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %28 = %27.2;
  %29 = cast(%28, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
  %30 = reshape(%29, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
  %31 = @func_67(%30) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
  %32 = %31.1;
  (%28, %32)
}

def @func_1266(%var_1249: Tensor[(12, 3, 11), float32]) -> Tensor[(12, 3, 11), uint16] {
  %33 = @func_142() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
  %34 = %33.2;
  %35 = cast(%var_1249, dtype="uint16") /* ty=Tensor[(12, 3, 11), uint16] */;
  %36 = shape_of(%34, dtype="int32") /* ty=Tensor[(3), int32] */;
  %37 = cast(%34, dtype="uint16") /* ty=Tensor[(12, 3, 11), uint16] */;
  %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_or(%37, %38) /* ty=Tensor[(12, 3, 11), uint16] */
}

def @func_9630() -> Tensor[(12, 3, 11), float32] {
  %39 = @func_2368() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %39.0
}

def @func_7726() -> Tensor[(12, 3, 11), float32] {
  %40 = @func_6141() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(11, 4, 13), float64]) */;
  %40.0
}

def @func_8552(%var_8546: uint64, %var_8547: Tensor[(4, 3, 7), uint64]) -> (Tensor[(4, 3, 7), uint64],) {
  %41 = cast(%var_8546, dtype="uint64") /* ty=uint64 */;
  %42 = cast(%var_8547, dtype="uint64") /* ty=Tensor[(4, 3, 7), uint64] */;
  %43 = minimum(%41, %42) /* ty=Tensor[(4, 3, 7), uint64] */;
  (%43,)
}

def @func_1204() -> (Tensor[(2, 13, 2), float32], Tensor[(2, 13, 2), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %44 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 13, 2), int16] */, dtype="int16") /* ty=Tensor[(2, 13, 2), int16] */;
  %45 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(2, 13, 2), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 13, 2), int16] */, dtype="int16") /* ty=Tensor[(2, 13, 2), int16] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %48 = add(%46, %47) /* ty=Tensor[(2, 13, 2), int16] */;
  %49 = cast(%48, dtype="uint32") /* ty=Tensor[(2, 13, 2), uint32] */;
  %50 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(2, 13, 2), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %51 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 13, 2), int16] */, dtype="uint32") /* ty=Tensor[(2, 13, 2), uint32] */;
  %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %53 = bitwise_or(%51, %52) /* ty=Tensor[(2, 13, 2), uint32] */;
  %54 = cast(%53, dtype="float32") /* ty=Tensor[(2, 13, 2), float32] */;
  %55 = shape_of(%48, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(%48, dtype="float32") /* ty=Tensor[(2, 13, 2), float32] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %58 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 13, 2), int16] */, dtype="float64") /* ty=Tensor[(2, 13, 2), float64] */;
  %59 = sigmoid(%58) /* ty=Tensor[(2, 13, 2), float64] */;
  %60 = cast(%53, dtype="bool") /* ty=Tensor[(2, 13, 2), bool] */;
  %61 = shape_of(%59, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(%59, dtype="bool") /* ty=Tensor[(2, 13, 2), bool] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %64 = @func_536() /* ty=Tensor[(12, 3, 11), float32] */;
  %65 = cast(%64, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
  %66 = minimum(%56, %57) /* ty=Tensor[(2, 13, 2), float32] */;
  %67 = equal(%62, %63) /* ty=Tensor[(2, 13, 2), bool] */;
  %68 = log(%65) /* ty=Tensor[(12, 3, 11), float32] */;
  %69 = @func_231() /* ty=Tensor[(12, 3, 11), float32] */;
  (%66, %67, %68, %69)
}

def @func_4503() -> (Tensor[(5, 10, 9), float64], Tensor[(12, 3, 11), float32]) {
  %70 = cast(meta[relay.Constant][4] /* ty=Tensor[(5, 10, 9), float64] */, dtype="float64") /* ty=Tensor[(5, 10, 9), float64] */;
  %71 = asinh(%70) /* ty=Tensor[(5, 10, 9), float64] */;
  %72 = @func_2973() /* ty=Tensor[(12, 3, 11), float32] */;
  (%71, %72)
}

def @func_7406() -> Tensor[(12, 3, 11), float32] {
  %73 = @func_2481() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %73.0
}

def @func_7698() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %74 = @func_5841() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %75 = @func_2973() /* ty=Tensor[(12, 3, 11), float32] */;
  %76 = %74.4;
  (%75, %76)
}

def @func_11196(%var_11055: Tensor[(432, 2), bool], %var_11110: Tensor[(432, 2), float32]) -> (Tensor[(12, 3, 11), float32], Tensor[(432, 2), bool], Tensor[(12, 3, 11), float32], Tensor[(432, 2), int32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(432, 2), float64], Tensor[(5, 9, 8), float32], Tensor[(12, 3, 11), float32]) {
  %77 = @func_10839() /* ty=(Tensor[(13, 9, 6), bool], Tensor[(140), uint8], Tensor[(1092), float64], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(9, 16, 1), bool], Tensor[(144), uint64], Tensor[(12, 3, 11), float32], Tensor[(7, 3, 1), float32], Tensor[(1092), float64]) */;
  %78 = cast(%var_11055, dtype="bool") /* ty=Tensor[(432, 2), bool] */;
  %79 = reshape(%78, newshape=[864]) /* ty=Tensor[(864), bool] */;
  %80 = @func_7445(%79) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(1, 1092), float32], Tensor[(14, 78), float64], Tensor[(12, 3, 11), float32], Tensor[(864), bool], Tensor[(12, 3, 11), float32]) */;
  %81 = %80.4;
  %82 = cast(%81, dtype="bool") /* ty=Tensor[(864), bool] */;
  %83 = shape_of(%var_11055, dtype="int32") /* ty=Tensor[(2), int32] */;
  %84 = cast(%var_11055, dtype="bool") /* ty=Tensor[(432, 2), bool] */;
  %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %86 = @func_1664() /* ty=(Tensor[(12, 3, 11), bool], Tensor[(12, 3, 11), float32]) */;
  %87 = cast(%81, dtype="int64") /* ty=Tensor[(864), int64] */;
  %88 = shape_of(%var_11055, dtype="int32") /* ty=Tensor[(2), int32] */;
  %89 = cast(%var_11055, dtype="int64") /* ty=Tensor[(432, 2), int64] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %91 = maximum(%89, %90) /* ty=Tensor[(432, 2), int64] */;
  %92 = cast(%91, dtype="float32") /* ty=Tensor[(432, 2), float32] */;
  %93 = tan(%92) /* ty=Tensor[(432, 2), float32] */;
  %94 = cast(%var_11110, dtype="int32") /* ty=Tensor[(432, 2), int32] */;
  %95 = shape_of(%93, dtype="int32") /* ty=Tensor[(2), int32] */;
  %96 = cast(%93, dtype="int32") /* ty=Tensor[(432, 2), int32] */;
  %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %98 = @func_9223() /* ty=(Tensor[(2, 13, 2), bool], Tensor[(572), float32], Tensor[(12, 3, 11), float32]) */;
  %99 = cast(%93, dtype="float64") /* ty=Tensor[(432, 2), float64] */;
  %100 = cosh(%99) /* ty=Tensor[(432, 2), float64] */;
  %101 = cast(%100, dtype="float64") /* ty=Tensor[(432, 2), float64] */;
  %102 = acos(%101) /* ty=Tensor[(432, 2), float64] */;
  %103 = cast(%102, dtype="float64") /* ty=Tensor[(432, 2), float64] */;
  %104 = cos(%103) /* ty=Tensor[(432, 2), float64] */;
  %105 = cast(%104, dtype="float32") /* ty=Tensor[(432, 2), float32] */;
  %106 = shape_of(%102, dtype="int32") /* ty=Tensor[(2), int32] */;
  %107 = cast(%102, dtype="float32") /* ty=Tensor[(432, 2), float32] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %109 = divide(%107, %108) /* ty=Tensor[(432, 2), float32] */;
  %110 = cast(%109, dtype="float64") /* ty=Tensor[(432, 2), float64] */;
  %111 = @func_6629() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(5, 9, 8), float32]) */;
  %112 = %77.3;
  %113 = logical_and(%84, %85) /* ty=Tensor[(432, 2), bool] */;
  %114 = %86.1;
  %115 = left_shift(%96, %97) /* ty=Tensor[(432, 2), int32] */;
  %116 = @func_9931() /* ty=Tensor[(12, 3, 11), float32] */;
  %117 = %98.2;
  %118 = @func_2446() /* ty=Tensor[(13, 9, 6), bool] */;
  %119 = sinh(%110) /* ty=Tensor[(432, 2), float64] */;
  %120 = %111.1;
  %121 = @func_4483() /* ty=Tensor[(12, 3, 11), float32] */;
  (%112, %113, %114, %115, %116, %117, %118, %119, %120, %121)
}

def @func_5286() -> Tensor[(572), float64] {
  %122 = @func_1584() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(11, 4, 13), float64], Tensor[(572), float64], Tensor[(12, 3, 11), float32]) */;
  %122.2
}

def @func_9269() -> Tensor[(12, 3, 11), float32] {
  @func_1410() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_6847() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 7, 4), uint64], Tensor[(364), uint64], Tensor[(13, 9, 6), bool], Tensor[(1092), float32]) {
  %123 = @func_4066() /* ty=(Tensor[(11, 4, 13), float64], Tensor[(12, 3, 11), float32]) */;
  %124 = cast(meta[relay.Constant][5] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %125 = reshape(%124, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %126 = @func_6549(%125) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(1092), float64]) */;
  %127 = @func_2273() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %128 = cast(meta[relay.Constant][6] /* ty=Tensor[(364), uint64] */, dtype="uint64") /* ty=Tensor[(364), uint64] */;
  %129 = reshape(%128, newshape=[13, 7, 4]) /* ty=Tensor[(13, 7, 4), uint64] */;
  %130 = @func_464(%129) /* ty=(Tensor[(13, 7, 4), uint64], Tensor[(12, 3, 11), float32], Tensor[(396), float32]) */;
  %131 = @func_5731() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) */;
  %132 = cast(meta[relay.Constant][5] /* ty=Tensor[(1092), float64] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %133 = %123.1;
  %134 = @func_1410() /* ty=Tensor[(12, 3, 11), float32] */;
  %135 = %126.0;
  %136 = %127.0;
  %137 = %130.0;
  %138 = %131.1;
  %139 = sigmoid(%132) /* ty=Tensor[(1092), float32] */;
  (%133, %134, %135, %136, %137, meta[relay.Constant][6] /* ty=Tensor[(364), uint64] */, %138, %139)
}

def @func_1836() -> (Tensor[(12, 3, 11), float32],) {
  %140 = @func_974() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %141 = %140.0;
  (%141,)
}

def @func_3568() -> Tensor[(12, 3, 11), float32] {
  %142 = @func_775() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %142.1
}

def @func_6873() -> (Tensor[(12, 3, 11), float32],) {
  %143 = @func_1334() /* ty=(Tensor[(2, 13, 2), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %144 = %143.1;
  (%144,)
}

def @func_142() -> (Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) {
  %145 = @func_21() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %146 = %145.0;
  %147 = cast(%146, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
  %148 = reshape(%147, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
  %149 = @func_67(%148) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
  %150 = @func_21() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %151 = %149.0;
  %152 = %150.0;
  (%146, %151, %152)
}

def @func_6449() -> (Tensor[(12, 3, 11), float32], Tensor[(5, 3, 5), float32], Tensor[(75), float32], Tensor[(12, 3, 11), float32]) {
  %153 = cast(meta[relay.Constant][7] /* ty=Tensor[(75), float32] */, dtype="float32") /* ty=Tensor[(75), float32] */;
  %154 = reshape(%153, newshape=[5, 3, 5]) /* ty=Tensor[(5, 3, 5), float32] */;
  %155 = @func_3750() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %156 = @func_404() /* ty=Tensor[(12, 3, 11), float32] */;
  %157 = @func_1995(%154) /* ty=Tensor[(5, 3, 5), float32] */;
  %158 = %155.0;
  (%156, %157, meta[relay.Constant][7] /* ty=Tensor[(75), float32] */, %158)
}

def @func_1664() -> (Tensor[(12, 3, 11), bool], Tensor[(12, 3, 11), float32]) {
  %159 = @func_404() /* ty=Tensor[(12, 3, 11), float32] */;
  %160 = cast(%159, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
  %161 = cosh(%160) /* ty=Tensor[(12, 3, 11), float32] */;
  %162 = cast(%159, dtype="bool") /* ty=Tensor[(12, 3, 11), bool] */;
  %163 = shape_of(%161, dtype="int32") /* ty=Tensor[(3), int32] */;
  %164 = cast(%161, dtype="bool") /* ty=Tensor[(12, 3, 11), bool] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %166 = greater(%164, %165) /* ty=Tensor[(12, 3, 11), bool] */;
  %167 = @func_404() /* ty=Tensor[(12, 3, 11), float32] */;
  (%166, %167)
}

def @func_4790() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float64]) {
  %168 = @func_3887() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %169 = @func_2712() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %170 = @func_2911() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %171 = %168.0;
  %172 = %169.0;
  %173 = %170.0;
  %174 = @func_2402() /* ty=Tensor[(12, 3, 11), float64] */;
  (%171, %172, %173, %174)
}

def @func_11337(%var_11289: Tensor[(6, 1, 6), float32], %var_11320: Tensor[(50), uint32]) -> (Tensor[(6, 1, 6), float32], Tensor[(50), uint32], Tensor[(5, 2, 5), float64]) {
  %175 = cast(%var_11289, dtype="float32") /* ty=Tensor[(6, 1, 6), float32] */;
  %176 = cast(%var_11320, dtype="uint32") /* ty=Tensor[(50), uint32] */;
  %177 = reshape(%176, newshape=[5, 2, 5]) /* ty=Tensor[(5, 2, 5), uint32] */;
  %178 = @func_10599(%177) /* ty=(Tensor[(5, 2, 5), bool],) */;
  %179 = %178.0;
  %180 = cast(%179, dtype="float64") /* ty=Tensor[(5, 2, 5), float64] */;
  %181 = atanh(%175) /* ty=Tensor[(6, 1, 6), float32] */;
  %182 = tan(%180) /* ty=Tensor[(5, 2, 5), float64] */;
  (%181, %var_11320, %182)
}

def @func_1995(%var_1986: Tensor[(5, 3, 5), float32]) -> Tensor[(5, 3, 5), float32] {
  %183 = cast(%var_1986, dtype="float32") /* ty=Tensor[(5, 3, 5), float32] */;
  log10(%183) /* ty=Tensor[(5, 3, 5), float32] */
}

def @func_2402() -> Tensor[(12, 3, 11), float64] {
  %184 = @func_2273() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %185 = %184.0;
  %186 = cast(%185, dtype="float64") /* ty=Tensor[(12, 3, 11), float64] */;
  sinh(%186) /* ty=Tensor[(12, 3, 11), float64] */
}

def @func_6549(%var_6546: Tensor[(1092), float64]) -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(1092), float64]) {
  %187 = @func_2911() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %188 = cast(%var_6546, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %189 = reshape(%188, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %190 = @func_804(%189) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(6, 13, 14), int8], Tensor[(1092), float64]) */;
  %191 = %187.0;
  %192 = @func_404() /* ty=Tensor[(12, 3, 11), float32] */;
  %193 = %190.0;
  (%191, %192, %193, %var_6546)
}

def @func_2770() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %194 = @func_2712() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %195 = @func_974() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %196 = %194.0;
  %197 = %195.1;
  (%196, %197)
}

def @func_868(%var_860: Tensor[(5, 5, 4), float64]) -> (Tensor[(5, 5, 4), float64],) {
  %198 = cast(%var_860, dtype="float64") /* ty=Tensor[(5, 5, 4), float64] */;
  %199 = log10(%198) /* ty=Tensor[(5, 5, 4), float64] */;
  (%199,)
}

def @func_1817() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(14, 78), float64]) {
  %200 = @func_1664() /* ty=(Tensor[(12, 3, 11), bool], Tensor[(12, 3, 11), float32]) */;
  %201 = %200.1;
  %202 = cast(%201, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
  %203 = cast(meta[relay.Constant][8] /* ty=Tensor[(14, 78), float64] */, dtype="float64") /* ty=Tensor[(14, 78), float64] */;
  %204 = reshape(%203, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %205 = @func_804(%204) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(6, 13, 14), int8], Tensor[(1092), float64]) */;
  %206 = log10(%202) /* ty=Tensor[(12, 3, 11), float32] */;
  %207 = @func_337() /* ty=Tensor[(12, 3, 11), float32] */;
  %208 = %205.0;
  (%206, %207, %208, meta[relay.Constant][8] /* ty=Tensor[(14, 78), float64] */)
}

def @func_8050() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %209 = @func_6847() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 7, 4), uint64], Tensor[(364), uint64], Tensor[(13, 9, 6), bool], Tensor[(1092), float32]) */;
  %210 = @func_4790() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float64]) */;
  %211 = %209.2;
  %212 = %210.1;
  (%211, %212)
}

def @func_5036() -> (Tensor[(12, 3, 11), float32],) {
  %213 = @func_775() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %214 = %213.2;
  (%214,)
}

def @func_10058() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %215 = @func_3598() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %216 = @func_7526() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %217 = @func_8544() /* ty=Tensor[(12, 3, 11), float32] */;
  %218 = %215.0;
  %219 = %216.0;
  (%217, %218, %219)
}

def @func_8187() -> (Tensor[(12, 3, 11), float32],) {
  %220 = @func_1204() /* ty=(Tensor[(2, 13, 2), float32], Tensor[(2, 13, 2), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %221 = %220.3;
  (%221,)
}

def @func_7046() -> Tensor[(13, 9, 6), bool] {
  %222 = @func_142() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
  %222.1
}

def @func_10868() -> (Tensor[(13, 9, 6), bool],) {
  %223 = @func_8470() /* ty=Tensor[(13, 9, 6), bool] */;
  (%223,)
}

def @func_1386() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(364), uint64]) {
  %224 = @func_21() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %225 = @func_775() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %226 = @func_21() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %227 = cast(meta[relay.Constant][9] /* ty=Tensor[(364), uint64] */, dtype="uint64") /* ty=Tensor[(364), uint64] */;
  %228 = reshape(%227, newshape=[13, 7, 4]) /* ty=Tensor[(13, 7, 4), uint64] */;
  %229 = @func_464(%228) /* ty=(Tensor[(13, 7, 4), uint64], Tensor[(12, 3, 11), float32], Tensor[(396), float32]) */;
  %230 = %224.0;
  %231 = %225.2;
  %232 = %226.0;
  %233 = %229.1;
  (%230, %231, %232, %233, meta[relay.Constant][9] /* ty=Tensor[(364), uint64] */)
}

def @func_8470() -> Tensor[(13, 9, 6), bool] {
  @func_7046() /* ty=Tensor[(13, 9, 6), bool] */
}

def @func_5744() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), bool]) {
  %234 = @func_4066() /* ty=(Tensor[(11, 4, 13), float64], Tensor[(12, 3, 11), float32]) */;
  %235 = @func_3645() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), bool]) */;
  %236 = %234.1;
  %237 = %235.2;
  (%236, %237)
}

def @func_3809(%var_3795: Tensor[(10, 5, 1), int8], %var_3796: Tensor[(10, 5, 3), int8]) -> (Tensor[(10, 5, 3), bool], Tensor[(12, 3, 11), float32]) {
  %238 = cast(%var_3795, dtype="bool") /* ty=Tensor[(10, 5, 1), bool] */;
  %239 = cast(%var_3796, dtype="bool") /* ty=Tensor[(10, 5, 3), bool] */;
  %240 = @func_2273() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %241 = less(%238, %239) /* ty=Tensor[(10, 5, 3), bool] */;
  %242 = %240.0;
  (%241, %242)
}

def @func_8887(%var_8846: Tensor[(112), float32], %var_8883: int32, %var_8884: Tensor[(1, 13), int32]) -> (Tensor[(11, 4, 13), float64], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(7, 2, 8), uint32], Tensor[(112), float32], Tensor[(1, 13), bool], int32, Tensor[(1, 13), int32]) {
  %243 = @func_3062() /* ty=(Tensor[(11, 4, 13), float64],) */;
  %244 = @func_7788() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %245 = cast(%var_8846, dtype="float32") /* ty=Tensor[(112), float32] */;
  %246 = reshape(%245, newshape=[7, 2, 8]) /* ty=Tensor[(7, 2, 8), float32] */;
  %247 = cast(%var_8883, dtype="int32") /* ty=int32 */;
  %248 = cast(%var_8884, dtype="int32") /* ty=Tensor[(1, 13), int32] */;
  %249 = reshape(%247, newshape=[]) /* ty=int32 */;
  %250 = reshape(%248, newshape=[1, 13]) /* ty=Tensor[(1, 13), int32] */;
  %251 = @func_2299(%249, %250) /* ty=(Tensor[(1, 13), bool],) */;
  %252 = %243.0;
  %253 = @func_2960() /* ty=Tensor[(12, 3, 11), float32] */;
  %254 = %244.0;
  %255 = @func_6518(%246) /* ty=Tensor[(7, 2, 8), uint32] */;
  %256 = %251.0;
  (%252, %253, %254, %255, %var_8846, %256, %var_8883, %var_8884)
}

def @func_10133(%var_10128: float32, %var_10129: Tensor[(13, 1, 11), float32]) -> Tensor[(13, 1, 11), float32] {
  %257 = cast(%var_10128, dtype="float32") /* ty=float32 */;
  %258 = cast(%var_10129, dtype="float32") /* ty=Tensor[(13, 1, 11), float32] */;
  power(%257, %258) /* ty=Tensor[(13, 1, 11), float32] */
}

def @func_5873() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), int8]) {
  %259 = @func_4965() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %260 = %259.1;
  %261 = cast(%260, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
  %262 = reshape(%261, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
  %263 = @func_4129(%262) /* ty=(Tensor[(12, 3, 11), int8], Tensor[(12, 3, 11), float32], Tensor[(4, 4, 11), float64], Tensor[(176), float64]) */;
  %264 = %263.0;
  (%260, %264)
}

def @func_1584() -> (Tensor[(12, 3, 11), float32], Tensor[(11, 4, 13), float64], Tensor[(572), float64], Tensor[(12, 3, 11), float32]) {
  %265 = cast(meta[relay.Constant][10] /* ty=Tensor[(572), float64] */, dtype="float64") /* ty=Tensor[(572), float64] */;
  %266 = reshape(%265, newshape=[11, 4, 13]) /* ty=Tensor[(11, 4, 13), float64] */;
  %267 = @func_894(%266) /* ty=(Tensor[(11, 4, 13), float64], Tensor[(5, 5, 4), float64], Tensor[(100), float64]) */;
  %268 = @func_1485() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %269 = @func_536() /* ty=Tensor[(12, 3, 11), float32] */;
  %270 = %267.0;
  %271 = %268.0;
  (%269, %270, meta[relay.Constant][10] /* ty=Tensor[(572), float64] */, %271)
}

def @func_10708() -> (Tensor[(12, 3, 11), float32],) {
  %272 = @func_8198() /* ty=Tensor[(12, 3, 11), float32] */;
  (%272,)
}

def @func_4260() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %273 = @func_1415() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %274 = @func_992() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %275 = %273.0;
  %276 = %274.0;
  (%275, %276)
}

def @func_67(%var_62: Tensor[(12, 3, 11), float32]) -> (Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) {
  %277 = cast(meta[relay.Constant][12] /* ty=Tensor[(13, 9, 6), float32] */, dtype="bool") /* ty=Tensor[(13, 9, 6), bool] */;
  %278 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(13, 9, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %279 = cast(meta[relay.Constant][11] /* ty=Tensor[(13, 9, 6), float32] */, dtype="bool") /* ty=Tensor[(13, 9, 6), bool] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %281 = @func_21() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %282 = %281.0;
  %283 = cast(%var_62, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
  %284 = shape_of(%282, dtype="int32") /* ty=Tensor[(3), int32] */;
  %285 = cast(%282, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
  %286 = dyn.reshape(%283, %284, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %287 = less_equal(%279, %280) /* ty=Tensor[(13, 9, 6), bool] */;
  %288 = mod(%285, %286) /* ty=Tensor[(12, 3, 11), float32] */;
  (%287, %288)
}

def @func_3988() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), uint16]) {
  %289 = @func_2459() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %290 = %289.0;
  %291 = cast(%290, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
  %292 = reshape(%291, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
  %293 = @func_1266(%292) /* ty=Tensor[(12, 3, 11), uint16] */;
  (%290, %293)
}

def @func_4483() -> Tensor[(12, 3, 11), float32] {
  %294 = @func_3887() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %294.1
}

def @func_2481() -> (Tensor[(12, 3, 11), float32],) {
  %295 = @func_2459() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %296 = %295.0;
  (%296,)
}

def @func_4826() -> (Tensor[(12, 3, 11), float32],) {
  %297 = @func_4260() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %298 = %297.0;
  (%298,)
}

def @func_10326(%var_10316: Tensor[(14, 1, 12), float64]) -> (Tensor[(14, 1, 12), float64],) {
  %299 = cast(%var_10316, dtype="float64") /* ty=Tensor[(14, 1, 12), float64] */;
  %300 = sigmoid(%299) /* ty=Tensor[(14, 1, 12), float64] */;
  (%300,)
}

def @func_7507(%var_7491: Tensor[(48), float32]) -> (Tensor[(6, 2, 4), bool], Tensor[(48), float32], Tensor[(13, 16, 176), uint64]) {
  %301 = cast(%var_7491, dtype="float32") /* ty=Tensor[(48), float32] */;
  %302 = cast(%var_7491, dtype="float32") /* ty=Tensor[(48), float32] */;
  %303 = reshape(%301, newshape=[6, 2, 4]) /* ty=Tensor[(6, 2, 4), float32] */;
  %304 = reshape(%302, newshape=[6, 2, 4]) /* ty=Tensor[(6, 2, 4), float32] */;
  %305 = @func_4332() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(176), float64], Tensor[(13, 16, 176), bool], uint8, Tensor[(208), uint8], Tensor[(13, 16, 176), bool]) */;
  %306 = %305.3;
  %307 = cast(%306, dtype="float32") /* ty=Tensor[(13, 16, 176), float32] */;
  %308 = log10(%307) /* ty=Tensor[(13, 16, 176), float32] */;
  %309 = cast(%306, dtype="uint64") /* ty=Tensor[(13, 16, 176), uint64] */;
  %310 = shape_of(%308, dtype="int32") /* ty=Tensor[(3), int32] */;
  %311 = cast(%308, dtype="uint64") /* ty=Tensor[(13, 16, 176), uint64] */;
  %312 = dyn.reshape(%309, %310, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %313 = @func_6351(%303, %304) /* ty=Tensor[(6, 2, 4), bool] */;
  %314 = bitwise_or(%311, %312) /* ty=Tensor[(13, 16, 176), uint64] */;
  (%313, %var_7491, %314)
}

def @func_7649() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %315 = @func_1836() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %316 = @func_2368() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %317 = %315.0;
  %318 = %316.2;
  (%317, %318)
}

def @func_1920() -> (Tensor[(12, 3, 11), float32],) {
  %319 = @func_536() /* ty=Tensor[(12, 3, 11), float32] */;
  (%319,)
}

def @func_2960() -> Tensor[(12, 3, 11), float32] {
  %320 = @func_2481() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %320.0
}

def @func_1485() -> (Tensor[(12, 3, 11), float32],) {
  %321 = @func_992() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %322 = %321.0;
  (%322,)
}

def @func_7553(%var_7545: Tensor[(14, 4, 8), float64]) -> Tensor[(14, 4, 8), float64] {
  %323 = cast(%var_7545, dtype="float64") /* ty=Tensor[(14, 4, 8), float64] */;
  sigmoid(%323) /* ty=Tensor[(14, 4, 8), float64] */
}

def @func_6732() -> (Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) {
  %324 = @func_2960() /* ty=Tensor[(12, 3, 11), float32] */;
  %325 = cast(%324, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
  %326 = reshape(%325, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
  %327 = @func_67(%326) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
  %328 = %327.0;
  (%324, %328)
}

def @func_11279() -> (Tensor[(12, 3, 11), float32],) {
  %329 = @func_9630() /* ty=Tensor[(12, 3, 11), float32] */;
  (%329,)
}

def @func_9482() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %330 = @func_7526() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %331 = @func_3031() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float64]) */;
  %332 = %330.0;
  %333 = %331.1;
  (%332, %333)
}

def @func_9118() -> Tensor[(12, 3, 11), float32] {
  @func_404() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_8512() -> (Tensor[(12, 3, 11), float32],) {
  %334 = @func_1836() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %335 = %334.0;
  (%335,)
}

def @func_9870(%var_9838: uint8, %var_9839: Tensor[(2, 104), uint8]) -> (Tensor[(12, 3, 11), float32], Tensor[(2, 104), uint8], Tensor[(13, 9, 6), bool], Tensor[(13, 16, 176), bool]) {
  %336 = @func_9446() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %337 = %336.0;
  %338 = cast(%337, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
  %339 = reshape(%338, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
  %340 = @func_67(%339) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
  %341 = cast(%var_9838, dtype="uint8") /* ty=uint8 */;
  %342 = cast(%var_9839, dtype="uint8") /* ty=Tensor[(2, 104), uint8] */;
  %343 = cast(meta[relay.Constant][13] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %344 = reshape(%341, newshape=[]) /* ty=uint8 */;
  %345 = reshape(%342, newshape=[13, 16, 1]) /* ty=Tensor[(13, 16, 1), uint8] */;
  %346 = reshape(%343, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %347 = @func_1744(%344, %345, %346) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(176), bool], Tensor[(13, 16, 176), bool]) */;
  %348 = %347.2;
  %349 = cast(%var_9838, dtype="bool") /* ty=bool */;
  %350 = cast(%348, dtype="bool") /* ty=Tensor[(13, 16, 176), bool] */;
  %351 = logical_and(%349, %350) /* ty=Tensor[(13, 16, 176), bool] */;
  %352 = cast(%351, dtype="bool") /* ty=Tensor[(13, 16, 176), bool] */;
  %353 = cast(meta[relay.Constant][13] /* ty=Tensor[(176), float64] */, dtype="bool") /* ty=Tensor[(176), bool] */;
  %354 = %340.0;
  %355 = greater(%352, %353) /* ty=Tensor[(13, 16, 176), bool] */;
  (%337, %var_9839, %354, %355)
}

def @func_7744() -> Tensor[(12, 3, 11), float32] {
  @func_2960() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_5123(%var_5107: Tensor[(12, 12, 6), bool]) -> (Tensor[(12, 12, 6), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %356 = cast(%var_5107, dtype="bool") /* ty=Tensor[(12, 12, 6), bool] */;
  %357 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(12, 12, 6), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %358 = cast(meta[relay.Constant][14] /* ty=Tensor[(12, 12, 6), bool] */, dtype="bool") /* ty=Tensor[(12, 12, 6), bool] */;
  %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %360 = @func_4625() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(2, 13, 2), float32], Tensor[(12, 3, 11), float32]) */;
  %361 = logical_and(%358, %359) /* ty=Tensor[(12, 12, 6), bool] */;
  %362 = %360.0;
  %363 = @func_231() /* ty=Tensor[(12, 3, 11), float32] */;
  (%361, %362, %363)
}

def @func_10033() -> (Tensor[(572), float64],) {
  %364 = @func_5286() /* ty=Tensor[(572), float64] */;
  (%364,)
}

def @func_3489(%var_3430: Tensor[(12, 3, 11), float32], %var_3456: Tensor[(364), uint64]) -> (Tensor[(12, 3, 11), uint16], Tensor[(12, 3, 11), float32], Tensor[(364), uint32]) {
  %365 = @func_974() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %366 = %365.0;
  %367 = cast(%var_3430, dtype="uint16") /* ty=Tensor[(12, 3, 11), uint16] */;
  %368 = shape_of(%366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %369 = cast(%366, dtype="uint16") /* ty=Tensor[(12, 3, 11), uint16] */;
  %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %371 = cast(%var_3456, dtype="uint64") /* ty=Tensor[(364), uint64] */;
  %372 = reshape(%371, newshape=[13, 7, 4]) /* ty=Tensor[(13, 7, 4), uint64] */;
  %373 = @func_464(%372) /* ty=(Tensor[(13, 7, 4), uint64], Tensor[(12, 3, 11), float32], Tensor[(396), float32]) */;
  %374 = cast(meta[relay.Constant][15] /* ty=Tensor[(364), uint64] */, dtype="uint32") /* ty=Tensor[(364), uint32] */;
  %375 = shape_of(%var_3456, dtype="int32") /* ty=Tensor[(1), int32] */;
  %376 = cast(%var_3456, dtype="uint32") /* ty=Tensor[(364), uint32] */;
  %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %378 = right_shift(%369, %370) /* ty=Tensor[(12, 3, 11), uint16] */;
  %379 = %373.1;
  %380 = add(%376, %377) /* ty=Tensor[(364), uint32] */;
  (%378, %379, %380)
}

def @func_1410() -> Tensor[(12, 3, 11), float32] {
  @func_536() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_5841() -> (Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %381 = @func_5731() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) */;
  %382 = @func_2273() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %383 = @func_5333() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %384 = @func_4483() /* ty=Tensor[(12, 3, 11), float32] */;
  %385 = %381.1;
  %386 = %382.0;
  %387 = @func_337() /* ty=Tensor[(12, 3, 11), float32] */;
  %388 = %383.0;
  (%384, %385, %386, %387, %388)
}

def @func_4981(%var_4974: Tensor[(15, 13, 4), float32]) -> (Tensor[(15, 13, 4), float32], Tensor[(12, 3, 11), float32]) {
  %389 = cast(%var_4974, dtype="float32") /* ty=Tensor[(15, 13, 4), float32] */;
  %390 = @func_1836() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %391 = asinh(%389) /* ty=Tensor[(15, 13, 4), float32] */;
  %392 = %390.0;
  (%391, %392)
}

def @func_3031() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float64]) {
  %393 = @func_1836() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %394 = @func_1920() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %395 = @func_2911() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %396 = %395.0;
  %397 = cast(%396, dtype="float64") /* ty=Tensor[(12, 3, 11), float64] */;
  %398 = %393.0;
  %399 = %394.0;
  %400 = tan(%397) /* ty=Tensor[(12, 3, 11), float64] */;
  (%398, %399, %400)
}

def @func_8198() -> Tensor[(12, 3, 11), float32] {
  %401 = @func_7788() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %401.1
}

def @func_4625() -> (Tensor[(12, 3, 11), float32], Tensor[(2, 13, 2), float32], Tensor[(12, 3, 11), float32]) {
  %402 = @func_4260() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %403 = @func_1204() /* ty=(Tensor[(2, 13, 2), float32], Tensor[(2, 13, 2), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %404 = @func_1664() /* ty=(Tensor[(12, 3, 11), bool], Tensor[(12, 3, 11), float32]) */;
  %405 = %402.0;
  %406 = %403.0;
  %407 = %404.1;
  (%405, %406, %407)
}

def @func_4965() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %408 = @func_2481() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %409 = %408.0;
  %410 = @func_337() /* ty=Tensor[(12, 3, 11), float32] */;
  (%409, %410)
}

def @func_5479() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %411 = @func_252() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) */;
  %412 = %411.0;
  %413 = cast(%412, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
  %414 = reshape(%413, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
  %415 = @func_4129(%414) /* ty=(Tensor[(12, 3, 11), int8], Tensor[(12, 3, 11), float32], Tensor[(4, 4, 11), float64], Tensor[(176), float64]) */;
  %416 = @func_775() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %417 = @func_2094() /* ty=Tensor[(12, 3, 11), float32] */;
  %418 = %415.1;
  %419 = %416.0;
  %420 = @func_2094() /* ty=Tensor[(12, 3, 11), float32] */;
  (%412, %417, %418, %419, %420)
}

def @func_2368() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %421 = @func_1817() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(14, 78), float64]) */;
  %422 = @func_21() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %423 = @func_974() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %424 = %421.2;
  %425 = %422.0;
  %426 = %423.1;
  (%424, %425, %426)
}

def @func_6085() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %427 = @func_3887() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %428 = @func_5036() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %429 = @func_1386() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(364), uint64]) */;
  %430 = %427.0;
  %431 = %428.0;
  %432 = %429.0;
  (%430, %431, %432)
}

def @func_10839() -> (Tensor[(13, 9, 6), bool], Tensor[(140), uint8], Tensor[(1092), float64], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(9, 16, 1), bool], Tensor[(144), uint64], Tensor[(12, 3, 11), float32], Tensor[(7, 3, 1), float32], Tensor[(1092), float64]) {
  %433 = @func_7098() /* ty=(Tensor[(13, 9, 6), bool],) */;
  %434 = cast(meta[relay.Constant][16] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %435 = reshape(%434, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %436 = @func_9598(%435) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(4, 7, 5), float32], Tensor[(140), uint8], Tensor[(12, 3, 11), float32], Tensor[(9, 11, 5), int64], Tensor[(495), int64], Tensor[(7, 3, 1), float32], Tensor[(21), float32], Tensor[(12, 3, 11), float32], Tensor[(1092), float64], Tensor[(1092), float64], Tensor[(780), float32], Tensor[(5, 12, 4), int8], Tensor[(12, 3, 11), float32], Tensor[(5, 10, 9), float64]) */;
  %437 = @func_5744() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), bool]) */;
  %438 = cast(meta[relay.Constant][17] /* ty=Tensor[(144), uint64] */, dtype="uint64") /* ty=Tensor[(144), uint64] */;
  %439 = reshape(%438, newshape=[9, 16, 1]) /* ty=Tensor[(9, 16, 1), uint64] */;
  %440 = @func_2712() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %441 = @func_10314() /* ty=(Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32], Tensor[(7, 3, 1), float32], Tensor[(21), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), bool]) */;
  %442 = cast(meta[relay.Constant][16] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %443 = reshape(%442, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %444 = @func_804(%443) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(6, 13, 14), int8], Tensor[(1092), float64]) */;
  %445 = %433.0;
  %446 = %436.3;
  %447 = %437.0;
  %448 = @func_536() /* ty=Tensor[(12, 3, 11), float32] */;
  %449 = @func_4908(%439) /* ty=Tensor[(9, 16, 1), bool] */;
  %450 = %440.0;
  %451 = %441.2;
  %452 = %444.2;
  (%445, %446, meta[relay.Constant][16] /* ty=Tensor[(1092), float64] */, %447, %448, %449, meta[relay.Constant][17] /* ty=Tensor[(144), uint64] */, %450, %451, %452)
}

def @func_4129(%var_4099: Tensor[(12, 3, 11), float32]) -> (Tensor[(12, 3, 11), int8], Tensor[(12, 3, 11), float32], Tensor[(4, 4, 11), float64], Tensor[(176), float64]) {
  %453 = @func_252() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) */;
  %454 = %453.0;
  %455 = cast(%var_4099, dtype="int8") /* ty=Tensor[(12, 3, 11), int8] */;
  %456 = shape_of(%454, dtype="int32") /* ty=Tensor[(3), int32] */;
  %457 = cast(%454, dtype="int8") /* ty=Tensor[(12, 3, 11), int8] */;
  %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %459 = cast(meta[relay.Constant][18] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %460 = cast(meta[relay.Constant][18] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %461 = reshape(%459, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
  %462 = reshape(%460, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
  %463 = @func_311(%461, %462) /* ty=(Tensor[(4, 4, 11), float64], Tensor[(13, 9, 6), bool], Tensor[(396), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) */;
  %464 = logical_xor(%457, %458) /* ty=Tensor[(12, 3, 11), int8] */;
  %465 = @func_404() /* ty=Tensor[(12, 3, 11), float32] */;
  %466 = %463.0;
  (%464, %465, %466, meta[relay.Constant][18] /* ty=Tensor[(176), float64] */)
}

def @func_9724() -> (Tensor[(12, 3, 11), float32], Tensor[(9, 16, 1), bool], Tensor[(144), uint64]) {
  %467 = @func_5036() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %468 = cast(meta[relay.Constant][19] /* ty=Tensor[(144), uint64] */, dtype="uint64") /* ty=Tensor[(144), uint64] */;
  %469 = reshape(%468, newshape=[9, 16, 1]) /* ty=Tensor[(9, 16, 1), uint64] */;
  %470 = %467.0;
  %471 = @func_4908(%469) /* ty=Tensor[(9, 16, 1), bool] */;
  (%470, %471, meta[relay.Constant][19] /* ty=Tensor[(144), uint64] */)
}

def @func_8251() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %472 = @func_6085() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %473 = %472.1;
  %474 = @func_7979() /* ty=Tensor[(12, 3, 11), float32] */;
  (%473, %474)
}

def @func_10109() -> Tensor[(12, 3, 11), float32] {
  %475 = @func_4840() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %475.0
}

def @func_2854(%var_2826: Tensor[(4, 7, 5), uint8]) -> (Tensor[(12, 3, 11), float32], Tensor[(1092), float64], Tensor[(4, 7, 5), float32]) {
  %476 = cast(meta[relay.Constant][20] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %477 = reshape(%476, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %478 = @func_2195(%477) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(364), uint64], Tensor[(1092), float64], Tensor[(1092), float64]) */;
  %479 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 1, 5), uint8] */, dtype="uint8") /* ty=Tensor[(4, 1, 5), uint8] */;
  %480 = cast(%var_2826, dtype="uint8") /* ty=Tensor[(4, 7, 5), uint8] */;
  %481 = left_shift(%479, %480) /* ty=Tensor[(4, 7, 5), uint8] */;
  %482 = cast(%481, dtype="float32") /* ty=Tensor[(4, 7, 5), float32] */;
  %483 = %478.0;
  %484 = cos(%482) /* ty=Tensor[(4, 7, 5), float32] */;
  (%483, meta[relay.Constant][20] /* ty=Tensor[(1092), float64] */, %484)
}

def @func_7936() -> (Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32], Tensor[(176), float64], Tensor[(1092), uint64], Tensor[(396), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), int8]) {
  %485 = cast(meta[relay.Constant][22] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %486 = reshape(%485, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %487 = @func_2195(%486) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(364), uint64], Tensor[(1092), float64], Tensor[(1092), float64]) */;
  %488 = cast(meta[relay.Constant][24] /* ty=Tensor[(1092), float64] */, dtype="uint64") /* ty=Tensor[(1092), uint64] */;
  %489 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(1092), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %490 = cast(meta[relay.Constant][22] /* ty=Tensor[(1092), float64] */, dtype="uint64") /* ty=Tensor[(1092), uint64] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %492 = cast(meta[relay.Constant][23] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %493 = cast(meta[relay.Constant][23] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %494 = reshape(%492, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
  %495 = reshape(%493, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
  %496 = @func_311(%494, %495) /* ty=(Tensor[(4, 4, 11), float64], Tensor[(13, 9, 6), bool], Tensor[(396), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) */;
  %497 = %496.2;
  %498 = @func_7788() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %499 = %498.0;
  %500 = cast(%499, dtype="bool") /* ty=Tensor[(12, 3, 11), bool] */;
  %501 = shape_of(%497, dtype="int32") /* ty=Tensor[(1), int32] */;
  %502 = cast(%497, dtype="bool") /* ty=Tensor[(396), bool] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?), bool] */;
  %504 = @func_2273() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %505 = @func_5873() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), int8]) */;
  %506 = @func_2446() /* ty=Tensor[(13, 9, 6), bool] */;
  %507 = %487.0;
  %508 = right_shift(%490, %491) /* ty=Tensor[(1092), uint64] */;
  %509 = less_equal(%502, %503) /* ty=Tensor[(396), bool] */;
  %510 = %504.0;
  %511 = %505.1;
  (%506, %507, meta[relay.Constant][23] /* ty=Tensor[(176), float64] */, %508, %509, %510, %511)
}

def @func_536() -> Tensor[(12, 3, 11), float32] {
  @func_404() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_2033(%var_2029: Tensor[(100), float64]) -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(5, 5, 4), float64], Tensor[(100), float64]) {
  %512 = @func_1584() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(11, 4, 13), float64], Tensor[(572), float64], Tensor[(12, 3, 11), float32]) */;
  %513 = cast(%var_2029, dtype="float64") /* ty=Tensor[(100), float64] */;
  %514 = reshape(%513, newshape=[5, 5, 4]) /* ty=Tensor[(5, 5, 4), float64] */;
  %515 = @func_868(%514) /* ty=(Tensor[(5, 5, 4), float64],) */;
  %516 = %512.0;
  %517 = @func_404() /* ty=Tensor[(12, 3, 11), float32] */;
  %518 = %515.0;
  (%516, %517, %518, %var_2029)
}

def @func_8155() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(5, 9, 8), float32], Tensor[(13, 9, 6), bool]) {
  %519 = @func_4840() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %520 = @func_6629() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(5, 9, 8), float32]) */;
  %521 = @func_5841() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %522 = @func_404() /* ty=Tensor[(12, 3, 11), float32] */;
  %523 = %519.0;
  %524 = %520.1;
  %525 = %521.1;
  (%522, %523, %524, %525)
}

def @func_9446() -> (Tensor[(12, 3, 11), float32],) {
  %526 = @func_7649() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %527 = %526.1;
  (%527,)
}

def @func_10599(%var_10579: Tensor[(5, 2, 5), uint32]) -> (Tensor[(5, 2, 5), bool],) {
  %528 = cast(meta[relay.Constant][25] /* ty=Tensor[(5, 2, 5), uint32] */, dtype="bool") /* ty=Tensor[(5, 2, 5), bool] */;
  %529 = shape_of(%var_10579, dtype="int32") /* ty=Tensor[(3), int32] */;
  %530 = cast(%var_10579, dtype="bool") /* ty=Tensor[(5, 2, 5), bool] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %532 = not_equal(%530, %531) /* ty=Tensor[(5, 2, 5), bool] */;
  (%532,)
}

def @func_2299(%var_2285: int32, %var_2286: Tensor[(1, 13), int32]) -> (Tensor[(1, 13), bool],) {
  %533 = cast(%var_2285, dtype="bool") /* ty=bool */;
  %534 = cast(%var_2286, dtype="bool") /* ty=Tensor[(1, 13), bool] */;
  %535 = not_equal(%533, %534) /* ty=Tensor[(1, 13), bool] */;
  (%535,)
}

def @func_6629() -> (Tensor[(12, 3, 11), float32], Tensor[(5, 9, 8), float32]) {
  %536 = @func_2528() /* ty=Tensor[(12, 3, 11), float32] */;
  %537 = @func_6185() /* ty=Tensor[(5, 9, 8), float32] */;
  (%536, %537)
}

def @func_9094() -> (Tensor[(12, 3, 11), float32], Tensor[(44, 4), float64], Tensor[(396), float32], Tensor[(12, 3, 11), float32]) {
  %538 = @func_2459() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %539 = cast(meta[relay.Constant][26] /* ty=Tensor[(44, 4), float64] */, dtype="float64") /* ty=Tensor[(44, 4), float64] */;
  %540 = cast(meta[relay.Constant][26] /* ty=Tensor[(44, 4), float64] */, dtype="float64") /* ty=Tensor[(44, 4), float64] */;
  %541 = reshape(%539, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
  %542 = reshape(%540, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
  %543 = @func_311(%541, %542) /* ty=(Tensor[(4, 4, 11), float64], Tensor[(13, 9, 6), bool], Tensor[(396), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) */;
  %544 = %543.2;
  %545 = cast(%544, dtype="float32") /* ty=Tensor[(396), float32] */;
  %546 = @func_2368() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %547 = %538.0;
  %548 = log2(%545) /* ty=Tensor[(396), float32] */;
  %549 = %546.2;
  (%547, meta[relay.Constant][26] /* ty=Tensor[(44, 4), float64] */, %548, %549)
}

def @func_10432() -> (Tensor[(12, 3, 11), float32], Tensor[(208), uint8], Tensor[(4, 4, 11), float64]) {
  %550 = @func_4332() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(176), float64], Tensor[(13, 16, 176), bool], uint8, Tensor[(208), uint8], Tensor[(13, 16, 176), bool]) */;
  %551 = @func_9630() /* ty=Tensor[(12, 3, 11), float32] */;
  %552 = cast(%551, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
  %553 = reshape(%552, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
  %554 = @func_4129(%553) /* ty=(Tensor[(12, 3, 11), int8], Tensor[(12, 3, 11), float32], Tensor[(4, 4, 11), float64], Tensor[(176), float64]) */;
  %555 = %550.5;
  %556 = %554.2;
  (%551, %555, %556)
}

def @func_2094() -> Tensor[(12, 3, 11), float32] {
  @func_1957() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_4066() -> (Tensor[(11, 4, 13), float64], Tensor[(12, 3, 11), float32]) {
  %557 = @func_3062() /* ty=(Tensor[(11, 4, 13), float64],) */;
  %558 = @func_1334() /* ty=(Tensor[(2, 13, 2), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %559 = %557.0;
  %560 = %558.2;
  (%559, %560)
}

def @func_3645() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), bool]) {
  %561 = @func_775() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %562 = @func_536() /* ty=Tensor[(12, 3, 11), float32] */;
  %563 = cast(%562, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
  %564 = reshape(%563, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
  %565 = %561.2;
  %566 = @func_3114(%564) /* ty=Tensor[(12, 3, 11), bool] */;
  (%562, %565, %566)
}

def @func_6518(%var_6501: Tensor[(7, 2, 8), float32]) -> Tensor[(7, 2, 8), uint32] {
  %567 = cast(%var_6501, dtype="float32") /* ty=Tensor[(7, 2, 8), float32] */;
  %568 = acosh(%567) /* ty=Tensor[(7, 2, 8), float32] */;
  %569 = cast(%var_6501, dtype="uint32") /* ty=Tensor[(7, 2, 8), uint32] */;
  %570 = shape_of(%568, dtype="int32") /* ty=Tensor[(3), int32] */;
  %571 = cast(%568, dtype="uint32") /* ty=Tensor[(7, 2, 8), uint32] */;
  %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  subtract(%571, %572) /* ty=Tensor[(7, 2, 8), uint32] */
}

def @func_7013(%var_6985: Tensor[(1092), float64], %var_6997: Tensor[(1, 780), float32]) -> (Tensor[(12, 3, 11), int8], Tensor[(12, 3, 11), bool], Tensor[(13, 9, 6), bool], Tensor[(1092), float64], Tensor[(12, 3, 11), float32], Tensor[(1, 780), float32]) {
  %573 = @func_5873() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), int8]) */;
  %574 = @func_3645() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), bool]) */;
  %575 = cast(%var_6985, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %576 = reshape(%575, newshape=[6, 13, 14]) /* ty=Tensor[(6, 13, 14), float64] */;
  %577 = @func_670(%576) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(6, 13, 14), int8], Tensor[(12, 3, 11), float32], Tensor[(396), float64], Tensor[(12, 3, 11), float32]) */;
  %578 = cast(%var_6997, dtype="float32") /* ty=Tensor[(1, 780), float32] */;
  %579 = reshape(%578, newshape=[15, 13, 4]) /* ty=Tensor[(15, 13, 4), float32] */;
  %580 = @func_4981(%579) /* ty=(Tensor[(15, 13, 4), float32], Tensor[(12, 3, 11), float32]) */;
  %581 = cast(%var_6997, dtype="float32") /* ty=Tensor[(1, 780), float32] */;
  %582 = %573.1;
  %583 = %574.2;
  %584 = %577.0;
  %585 = %580.1;
  %586 = sinh(%581) /* ty=Tensor[(1, 780), float32] */;
  (%582, %583, %584, %var_6985, %585, %586)
}

def @func_4332() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(176), float64], Tensor[(13, 16, 176), bool], uint8, Tensor[(208), uint8], Tensor[(13, 16, 176), bool]) {
  %587 = @func_1415() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %588 = %587.0;
  %589 = cast(%588, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
  %590 = reshape(%589, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
  %591 = @func_4129(%590) /* ty=(Tensor[(12, 3, 11), int8], Tensor[(12, 3, 11), float32], Tensor[(4, 4, 11), float64], Tensor[(176), float64]) */;
  %592 = cast(meta[relay.Constant][27] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %593 = cast(meta[relay.Constant][28] /* ty=Tensor[(208), uint8] */, dtype="uint8") /* ty=Tensor[(208), uint8] */;
  %594 = %591.3;
  %595 = cast(%594, dtype="float64") /* ty=Tensor[(176), float64] */;
  %596 = reshape(%592, newshape=[]) /* ty=uint8 */;
  %597 = reshape(%593, newshape=[13, 16, 1]) /* ty=Tensor[(13, 16, 1), uint8] */;
  %598 = reshape(%595, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %599 = @func_1744(%596, %597, %598) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(176), bool], Tensor[(13, 16, 176), bool]) */;
  %600 = cast(meta[relay.Constant][27] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %601 = cast(meta[relay.Constant][28] /* ty=Tensor[(208), uint8] */, dtype="uint8") /* ty=Tensor[(208), uint8] */;
  %602 = cast(%594, dtype="float64") /* ty=Tensor[(176), float64] */;
  %603 = reshape(%600, newshape=[]) /* ty=uint8 */;
  %604 = reshape(%601, newshape=[13, 16, 1]) /* ty=Tensor[(13, 16, 1), uint8] */;
  %605 = reshape(%602, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %606 = @func_1744(%603, %604, %605) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(176), bool], Tensor[(13, 16, 176), bool]) */;
  %607 = @func_1410() /* ty=Tensor[(12, 3, 11), float32] */;
  %608 = %599.2;
  %609 = %606.2;
  (%607, %588, %594, %608, meta[relay.Constant][27] /* ty=uint8 */, meta[relay.Constant][28] /* ty=Tensor[(208), uint8] */, %609)
}

def @func_6754(%var_6747: uint8, %var_6748: Tensor[(4, 52), uint8], %var_6749: Tensor[(176), float64]) -> (Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], uint8, Tensor[(4, 52), uint8], Tensor[(176), float64]) {
  %610 = @func_1664() /* ty=(Tensor[(12, 3, 11), bool], Tensor[(12, 3, 11), float32]) */;
  %611 = cast(%var_6747, dtype="uint8") /* ty=uint8 */;
  %612 = cast(%var_6748, dtype="uint8") /* ty=Tensor[(4, 52), uint8] */;
  %613 = cast(%var_6749, dtype="float64") /* ty=Tensor[(176), float64] */;
  %614 = reshape(%611, newshape=[]) /* ty=uint8 */;
  %615 = reshape(%612, newshape=[13, 16, 1]) /* ty=Tensor[(13, 16, 1), uint8] */;
  %616 = reshape(%613, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %617 = @func_1744(%614, %615, %616) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(176), bool], Tensor[(13, 16, 176), bool]) */;
  %618 = %610.1;
  %619 = %617.0;
  (%618, %619, %var_6747, %var_6748, %var_6749)
}

def @func_7236() -> Tensor[(12, 3, 11), float32] {
  %620 = @func_2368() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %620.1
}

def @func_6470() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %621 = @func_5996() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %622 = @func_21() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %623 = %621.0;
  %624 = %622.0;
  %625 = @func_3568() /* ty=Tensor[(12, 3, 11), float32] */;
  (%623, %624, %625)
}

def @func_6285(%var_6281: Tensor[(495), int64]) -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(9, 11, 5), int64], Tensor[(495), int64]) {
  %626 = @func_6085() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %627 = @func_5479() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %628 = @func_1415() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %629 = cast(%var_6281, dtype="int64") /* ty=Tensor[(495), int64] */;
  %630 = cast(%var_6281, dtype="int64") /* ty=Tensor[(495), int64] */;
  %631 = reshape(%629, newshape=[9, 11, 5]) /* ty=Tensor[(9, 11, 5), int64] */;
  %632 = reshape(%630, newshape=[9, 11, 5]) /* ty=Tensor[(9, 11, 5), int64] */;
  %633 = @func_4741(%631, %632) /* ty=(Tensor[(9, 11, 5), int64], Tensor[(12, 3, 11), float32], Tensor[(9, 11, 5), int16]) */;
  %634 = %626.1;
  %635 = %627.2;
  %636 = %628.0;
  %637 = %633.0;
  (%634, %635, %636, %637, %var_6281)
}

def @func_9802() -> (Tensor[(144), uint64], Tensor[(13, 9, 6), bool]) {
  %638 = @func_9724() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(9, 16, 1), bool], Tensor[(144), uint64]) */;
  %639 = %638.2;
  %640 = @func_8470() /* ty=Tensor[(13, 9, 6), bool] */;
  (%639, %640)
}

def @func_10459() -> Tensor[(176), float64] {
  %641 = @func_7936() /* ty=(Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32], Tensor[(176), float64], Tensor[(1092), uint64], Tensor[(396), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), int8]) */;
  %641.2
}

def @func_3114(%var_3093: Tensor[(12, 3, 11), float32]) -> Tensor[(12, 3, 11), bool] {
  %642 = @func_3031() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float64]) */;
  %643 = %642.1;
  %644 = cast(%var_3093, dtype="bool") /* ty=Tensor[(12, 3, 11), bool] */;
  %645 = shape_of(%643, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(%643, dtype="bool") /* ty=Tensor[(12, 3, 11), bool] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%646, %647) /* ty=Tensor[(12, 3, 11), bool] */
}

def @main() -> (Tensor[(2, 13, 2), float64],) {
  %648 = @func_9223() /* ty=(Tensor[(2, 13, 2), bool], Tensor[(572), float32], Tensor[(12, 3, 11), float32]) */;
  %649 = %648.0;
  %650 = cast(%649, dtype="float64") /* ty=Tensor[(2, 13, 2), float64] */;
  %651 = acosh(%650) /* ty=Tensor[(2, 13, 2), float64] */;
  (%651,)
}

def @func_670(%var_641: Tensor[(6, 13, 14), float64]) -> (Tensor[(13, 9, 6), bool], Tensor[(6, 13, 14), int8], Tensor[(12, 3, 11), float32], Tensor[(396), float64], Tensor[(12, 3, 11), float32]) {
  %652 = cast(meta[relay.Constant][29] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
  %653 = reshape(%652, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
  %654 = @func_67(%653) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
  %655 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 13, 14), float64] */, dtype="float64") /* ty=Tensor[(6, 13, 14), float64] */;
  %656 = asinh(%655) /* ty=Tensor[(6, 13, 14), float64] */;
  %657 = cast(%var_641, dtype="int8") /* ty=Tensor[(6, 13, 14), int8] */;
  %658 = shape_of(%656, dtype="int32") /* ty=Tensor[(3), int32] */;
  %659 = cast(%656, dtype="int8") /* ty=Tensor[(6, 13, 14), int8] */;
  %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %661 = cast(meta[relay.Constant][29] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
  %662 = reshape(%661, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
  %663 = @func_67(%662) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
  %664 = cast(meta[relay.Constant][29] /* ty=Tensor[(396), float32] */, dtype="float64") /* ty=Tensor[(396), float64] */;
  %665 = %663.1;
  %666 = cast(%665, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
  %667 = reshape(%666, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
  %668 = @func_67(%667) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
  %669 = %654.0;
  %670 = logical_xor(%659, %660) /* ty=Tensor[(6, 13, 14), int8] */;
  %671 = atan(%664) /* ty=Tensor[(396), float64] */;
  %672 = %668.1;
  (%669, %670, %665, %671, %672)
}

def @func_9032() -> Tensor[(12, 3, 11), float32] {
  @func_2094() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_3062() -> (Tensor[(11, 4, 13), float64],) {
  %673 = @func_1584() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(11, 4, 13), float64], Tensor[(572), float64], Tensor[(12, 3, 11), float32]) */;
  %674 = %673.1;
  (%674,)
}

def @func_10644() -> (Tensor[(12, 3, 11), float64], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %675 = @func_3031() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float64]) */;
  %676 = @func_4965() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %677 = %675.2;
  %678 = %676.0;
  %679 = @func_7979() /* ty=Tensor[(12, 3, 11), float32] */;
  (%677, %678, %679)
}

def @func_3269() -> (Tensor[(12, 3, 11), float32], Tensor[(11, 4, 13), float64]) {
  %680 = @func_3062() /* ty=(Tensor[(11, 4, 13), float64],) */;
  %681 = @func_1957() /* ty=Tensor[(12, 3, 11), float32] */;
  %682 = %680.0;
  (%681, %682)
}

def @func_5947(%var_5944: Tensor[(6, 10, 14), float64]) -> Tensor[(6, 10, 14), float64] {
  %683 = cast(%var_5944, dtype="float64") /* ty=Tensor[(6, 10, 14), float64] */;
  atanh(%683) /* ty=Tensor[(6, 10, 14), float64] */
}

def @func_6185() -> Tensor[(5, 9, 8), float32] {
  %684 = cast(meta[relay.Constant][32] /* ty=Tensor[(5, 9, 8), float32] */, dtype="float32") /* ty=Tensor[(5, 9, 8), float32] */;
  %685 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(5, 9, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %686 = cast(meta[relay.Constant][31] /* ty=Tensor[(5, 9, 8), float32] */, dtype="float32") /* ty=Tensor[(5, 9, 8), float32] */;
  %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%686, %687) /* ty=Tensor[(5, 9, 8), float32] */
}

def @func_10314() -> (Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32], Tensor[(7, 3, 1), float32], Tensor[(21), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), bool]) {
  %688 = cast(meta[relay.Constant][33] /* ty=Tensor[(21), float32] */, dtype="float32") /* ty=Tensor[(21), float32] */;
  %689 = reshape(%688, newshape=[7, 3, 1]) /* ty=Tensor[(7, 3, 1), float32] */;
  %690 = @func_936(%689) /* ty=(Tensor[(7, 3, 1), float32],) */;
  %691 = @func_4965() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %692 = @func_5996() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %693 = @func_5744() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), bool]) */;
  %694 = @func_7046() /* ty=Tensor[(13, 9, 6), bool] */;
  %695 = @func_7236() /* ty=Tensor[(12, 3, 11), float32] */;
  %696 = %690.0;
  %697 = %691.1;
  %698 = %692.0;
  %699 = @func_8198() /* ty=Tensor[(12, 3, 11), float32] */;
  %700 = %693.1;
  (%694, %695, %696, meta[relay.Constant][33] /* ty=Tensor[(21), float32] */, %697, %698, %699, %700)
}

def @func_7445(%var_7431: Tensor[(864), bool]) -> (Tensor[(12, 3, 11), float32], Tensor[(1, 1092), float32], Tensor[(14, 78), float64], Tensor[(12, 3, 11), float32], Tensor[(864), bool], Tensor[(12, 3, 11), float32]) {
  %701 = @func_1334() /* ty=(Tensor[(2, 13, 2), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %702 = cast(meta[relay.Constant][34] /* ty=Tensor[(14, 78), float64] */, dtype="float64") /* ty=Tensor[(14, 78), float64] */;
  %703 = reshape(%702, newshape=[1, 1092]) /* ty=Tensor[(1, 1092), float64] */;
  %704 = @func_5545(%703) /* ty=(Tensor[(2, 13, 2), float32], Tensor[(396), float64], Tensor[(12, 3, 11), bool], Tensor[(1, 1092), float32]) */;
  %705 = cast(%var_7431, dtype="bool") /* ty=Tensor[(864), bool] */;
  %706 = reshape(%705, newshape=[12, 12, 6]) /* ty=Tensor[(12, 12, 6), bool] */;
  %707 = @func_5123(%706) /* ty=(Tensor[(12, 12, 6), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %708 = @func_1836() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %709 = %701.1;
  %710 = %704.3;
  %711 = %707.1;
  %712 = %708.0;
  (%709, %710, meta[relay.Constant][34] /* ty=Tensor[(14, 78), float64] */, %711, %var_7431, %712)
}

def @func_2973() -> Tensor[(12, 3, 11), float32] {
  %713 = @func_2712() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %713.0
}

def @func_3750() -> (Tensor[(12, 3, 11), float32],) {
  %714 = @func_775() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %715 = %714.0;
  (%715,)
}

def @func_6895(%var_6876: Tensor[(4, 2, 10), float64]) -> (Tensor[(4, 2, 10), float64], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %716 = cast(%var_6876, dtype="float64") /* ty=Tensor[(4, 2, 10), float64] */;
  %717 = @func_1584() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(11, 4, 13), float64], Tensor[(572), float64], Tensor[(12, 3, 11), float32]) */;
  %718 = sigmoid(%716) /* ty=Tensor[(4, 2, 10), float64] */;
  %719 = @func_231() /* ty=Tensor[(12, 3, 11), float32] */;
  %720 = %717.0;
  (%718, %719, %720)
}

def @func_2273() -> (Tensor[(12, 3, 11), float32],) {
  %721 = @func_21() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %722 = %721.0;
  (%722,)
}

def @func_2528() -> Tensor[(12, 3, 11), float32] {
  @func_404() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_3236(%var_3162: Tensor[(8, 1, 5), uint64], %var_3163: Tensor[(8, 15, 5), uint64], %var_3184: Tensor[(8, 15, 5), uint64]) -> (Tensor[(8, 15, 5), uint64], Tensor[(8, 15, 5), float32], Tensor[(8, 15, 5), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %723 = cast(%var_3162, dtype="uint64") /* ty=Tensor[(8, 1, 5), uint64] */;
  %724 = cast(%var_3163, dtype="uint64") /* ty=Tensor[(8, 15, 5), uint64] */;
  %725 = cast(%var_3162, dtype="float32") /* ty=Tensor[(8, 1, 5), float32] */;
  %726 = cast(%var_3163, dtype="float32") /* ty=Tensor[(8, 15, 5), float32] */;
  %727 = cast(%var_3184, dtype="bool") /* ty=Tensor[(8, 15, 5), bool] */;
  %728 = shape_of(%var_3163, dtype="int32") /* ty=Tensor[(3), int32] */;
  %729 = cast(%var_3163, dtype="bool") /* ty=Tensor[(8, 15, 5), bool] */;
  %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %731 = @func_775() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %732 = @func_2911() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %733 = bitwise_xor(%723, %724) /* ty=Tensor[(8, 15, 5), uint64] */;
  %734 = floor_divide(%725, %726) /* ty=Tensor[(8, 15, 5), float32] */;
  %735 = greater_equal(%729, %730) /* ty=Tensor[(8, 15, 5), bool] */;
  %736 = %731.1;
  %737 = %732.0;
  (%733, %734, %735, %736, %737)
}

def @func_1957() -> Tensor[(12, 3, 11), float32] {
  %738 = @func_1485() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %738.0
}

def @func_1415() -> (Tensor[(12, 3, 11), float32],) {
  %739 = @func_252() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) */;
  %740 = %739.0;
  (%740,)
}

def @func_4908(%var_4901: Tensor[(9, 16, 1), uint64]) -> Tensor[(9, 16, 1), bool] {
  %741 = cast(meta[relay.Constant][35] /* ty=uint64 */, dtype="bool") /* ty=bool */;
  %742 = cast(%var_4901, dtype="bool") /* ty=Tensor[(9, 16, 1), bool] */;
  not_equal(%741, %742) /* ty=Tensor[(9, 16, 1), bool] */
}

def @func_775() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %743 = @func_21() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %744 = %743.0;
  %745 = cast(%744, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
  %746 = reshape(%745, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
  %747 = @func_67(%746) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
  %748 = @func_337() /* ty=Tensor[(12, 3, 11), float32] */;
  %749 = %747.1;
  (%744, %748, %749)
}

def @func_464(%var_442: Tensor[(13, 7, 4), uint64]) -> (Tensor[(13, 7, 4), uint64], Tensor[(12, 3, 11), float32], Tensor[(396), float32]) {
  %750 = cast(%var_442, dtype="uint64") /* ty=Tensor[(13, 7, 4), uint64] */;
  %751 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(13, 7, 4), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %752 = cast(meta[relay.Constant][36] /* ty=Tensor[(13, 7, 4), uint64] */, dtype="uint64") /* ty=Tensor[(13, 7, 4), uint64] */;
  %753 = dyn.reshape(%750, %751, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %754 = cast(meta[relay.Constant][37] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
  %755 = reshape(%754, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
  %756 = @func_67(%755) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
  %757 = bitwise_and(%752, %753) /* ty=Tensor[(13, 7, 4), uint64] */;
  %758 = %756.1;
  (%757, %758, meta[relay.Constant][37] /* ty=Tensor[(396), float32] */)
}

def @func_5102(%var_5094: int32) -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), uint16], Tensor[(1, 13), bool], int32, Tensor[(13), int32], Tensor[(12, 3, 11), float32]) {
  %759 = @func_231() /* ty=Tensor[(12, 3, 11), float32] */;
  %760 = cast(%759, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
  %761 = reshape(%760, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
  %762 = cast(%var_5094, dtype="int32") /* ty=int32 */;
  %763 = cast(meta[relay.Constant][38] /* ty=Tensor[(13), int32] */, dtype="int32") /* ty=Tensor[(13), int32] */;
  %764 = reshape(%762, newshape=[]) /* ty=int32 */;
  %765 = reshape(%763, newshape=[1, 13]) /* ty=Tensor[(1, 13), int32] */;
  %766 = @func_2299(%764, %765) /* ty=(Tensor[(1, 13), bool],) */;
  %767 = @func_4840() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %768 = @func_1266(%761) /* ty=Tensor[(12, 3, 11), uint16] */;
  %769 = %766.0;
  %770 = %767.0;
  (%759, %768, %769, %var_5094, meta[relay.Constant][38] /* ty=Tensor[(13), int32] */, %770)
}

def @func_6489() -> Tensor[(12, 3, 11), float32] {
  @func_2973() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_2459() -> (Tensor[(12, 3, 11), float32],) {
  %771 = @func_21() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %772 = %771.0;
  (%772,)
}

def @func_5333() -> (Tensor[(12, 3, 11), float32],) {
  %773 = @func_142() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
  %774 = %773.0;
  (%774,)
}

def @func_21() -> (Tensor[(12, 3, 11), float32],) {
  %775 = cast(meta[relay.Constant][39] /* ty=Tensor[(12, 3, 11), float32] */, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
  %776 = sigmoid(%775) /* ty=Tensor[(12, 3, 11), float32] */;
  (%776,)
}

def @func_6351(%var_6328: Tensor[(6, 2, 4), float32], %var_6329: Tensor[(6, 2, 4), float32]) -> Tensor[(6, 2, 4), bool] {
  %777 = cast(%var_6329, dtype="bool") /* ty=Tensor[(6, 2, 4), bool] */;
  %778 = shape_of(%var_6328, dtype="int32") /* ty=Tensor[(3), int32] */;
  %779 = cast(%var_6328, dtype="bool") /* ty=Tensor[(6, 2, 4), bool] */;
  %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%779, %780) /* ty=Tensor[(6, 2, 4), bool] */
}

def @func_894(%var_885: Tensor[(11, 4, 13), float64]) -> (Tensor[(11, 4, 13), float64], Tensor[(5, 5, 4), float64], Tensor[(100), float64]) {
  %781 = cast(%var_885, dtype="float64") /* ty=Tensor[(11, 4, 13), float64] */;
  %782 = cast(meta[relay.Constant][40] /* ty=Tensor[(100), float64] */, dtype="float64") /* ty=Tensor[(100), float64] */;
  %783 = reshape(%782, newshape=[5, 5, 4]) /* ty=Tensor[(5, 5, 4), float64] */;
  %784 = @func_868(%783) /* ty=(Tensor[(5, 5, 4), float64],) */;
  %785 = log10(%781) /* ty=Tensor[(11, 4, 13), float64] */;
  %786 = %784.0;
  (%785, %786, meta[relay.Constant][40] /* ty=Tensor[(100), float64] */)
}

def @func_7135() -> Tensor[(12, 3, 11), float32] {
  %787 = @func_6873() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %787.0
}

def @func_10944(%var_10935: float64) -> (Tensor[(7, 16, 10), float64], Tensor[(12, 3, 11), float32]) {
  %788 = cast(%var_10935, dtype="float64") /* ty=float64 */;
  %789 = cast(meta[relay.Constant][41] /* ty=Tensor[(7, 16, 10), float64] */, dtype="float64") /* ty=Tensor[(7, 16, 10), float64] */;
  %790 = @func_5907() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %791 = floor_mod(%788, %789) /* ty=Tensor[(7, 16, 10), float64] */;
  %792 = %790.1;
  (%791, %792)
}

def @func_10502(%var_10472: Tensor[(13, 13, 14), float64]) -> (Tensor[(13, 13, 14), int16],) {
  %793 = cast(%var_10472, dtype="float64") /* ty=Tensor[(13, 13, 14), float64] */;
  %794 = asin(%793) /* ty=Tensor[(13, 13, 14), float64] */;
  %795 = cast(%var_10472, dtype="int16") /* ty=Tensor[(13, 13, 14), int16] */;
  %796 = shape_of(%794, dtype="int32") /* ty=Tensor[(3), int32] */;
  %797 = cast(%794, dtype="int16") /* ty=Tensor[(13, 13, 14), int16] */;
  %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %799 = minimum(%797, %798) /* ty=Tensor[(13, 13, 14), int16] */;
  (%799,)
}

def @func_252() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) {
  %800 = @func_142() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
  %801 = @func_21() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %802 = @func_142() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
  %803 = %800.0;
  %804 = %801.0;
  %805 = %802.1;
  (%803, %804, %805)
}

def @func_6141() -> (Tensor[(12, 3, 11), float32], Tensor[(11, 4, 13), float64]) {
  %806 = @func_252() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) */;
  %807 = @func_3062() /* ty=(Tensor[(11, 4, 13), float64],) */;
  %808 = %806.0;
  %809 = %807.0;
  (%808, %809)
}

def @func_7788() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %810 = @func_2911() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %811 = %810.0;
  %812 = @func_2960() /* ty=Tensor[(12, 3, 11), float32] */;
  (%811, %812)
}

def @func_6931(%var_6926: Tensor[(13, 15, 1), float32]) -> (Tensor[(13, 15, 1), float32],) {
  %813 = cast(%var_6926, dtype="float32") /* ty=Tensor[(13, 15, 1), float32] */;
  %814 = atanh(%813) /* ty=Tensor[(13, 15, 1), float32] */;
  (%814,)
}

def @func_311(%var_276: Tensor[(4, 4, 11), float64], %var_277: Tensor[(4, 4, 11), float64]) -> (Tensor[(4, 4, 11), float64], Tensor[(13, 9, 6), bool], Tensor[(396), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) {
  %815 = cast(%var_277, dtype="float64") /* ty=Tensor[(4, 4, 11), float64] */;
  %816 = shape_of(%var_276, dtype="int32") /* ty=Tensor[(3), int32] */;
  %817 = cast(%var_276, dtype="float64") /* ty=Tensor[(4, 4, 11), float64] */;
  %818 = dyn.reshape(%815, %816, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %819 = cast(meta[relay.Constant][42] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
  %820 = reshape(%819, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
  %821 = @func_67(%820) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
  %822 = @func_231() /* ty=Tensor[(12, 3, 11), float32] */;
  %823 = cast(%822, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
  %824 = reshape(%823, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
  %825 = @func_67(%824) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
  %826 = power(%817, %818) /* ty=Tensor[(4, 4, 11), float64] */;
  %827 = %821.0;
  %828 = %825.0;
  (%826, %827, meta[relay.Constant][42] /* ty=Tensor[(396), float32] */, %822, %828)
}

def @func_3598() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %829 = @func_2911() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %830 = @func_2094() /* ty=Tensor[(12, 3, 11), float32] */;
  %831 = @func_2094() /* ty=Tensor[(12, 3, 11), float32] */;
  %832 = %829.0;
  (%830, %831, %832)
}

def @func_5250(%var_5228: Tensor[(1, 1092), float64]) -> (Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(1, 1092), float32]) {
  %833 = @func_2911() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %834 = cast(%var_5228, dtype="float64") /* ty=Tensor[(1, 1092), float64] */;
  %835 = reshape(%834, newshape=[6, 13, 14]) /* ty=Tensor[(6, 13, 14), float64] */;
  %836 = @func_670(%835) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(6, 13, 14), int8], Tensor[(12, 3, 11), float32], Tensor[(396), float64], Tensor[(12, 3, 11), float32]) */;
  %837 = cast(%var_5228, dtype="float32") /* ty=Tensor[(1, 1092), float32] */;
  %838 = %833.0;
  %839 = %836.0;
  %840 = atanh(%837) /* ty=Tensor[(1, 1092), float32] */;
  (%838, %839, %840)
}

def @func_845(%var_839: Tensor[(176), float64]) -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(176), float64]) {
  %841 = @func_775() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %842 = cast(%var_839, dtype="float64") /* ty=Tensor[(176), float64] */;
  %843 = cast(%var_839, dtype="float64") /* ty=Tensor[(176), float64] */;
  %844 = reshape(%842, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
  %845 = reshape(%843, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
  %846 = @func_311(%844, %845) /* ty=(Tensor[(4, 4, 11), float64], Tensor[(13, 9, 6), bool], Tensor[(396), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) */;
  %847 = %841.1;
  %848 = %846.3;
  (%847, %848, %var_839)
}

def @func_8544() -> Tensor[(12, 3, 11), float32] {
  @func_2973() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_7526() -> (Tensor[(12, 3, 11), float32],) {
  %849 = @func_3568() /* ty=Tensor[(12, 3, 11), float32] */;
  (%849,)
}

def @func_7364() -> (Tensor[(12, 3, 11), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(14, 78), float64], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %850 = @func_5744() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), bool]) */;
  %851 = cast(meta[relay.Constant][43] /* ty=Tensor[(14, 78), float64] */, dtype="float64") /* ty=Tensor[(14, 78), float64] */;
  %852 = reshape(%851, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %853 = @func_6549(%852) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(1092), float64]) */;
  %854 = @func_4625() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(2, 13, 2), float32], Tensor[(12, 3, 11), float32]) */;
  %855 = @func_5996() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %856 = @func_1204() /* ty=(Tensor[(2, 13, 2), float32], Tensor[(2, 13, 2), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %857 = %850.1;
  %858 = @func_231() /* ty=Tensor[(12, 3, 11), float32] */;
  %859 = %853.1;
  %860 = %854.2;
  %861 = %855.0;
  %862 = %856.3;
  (%857, %858, %859, meta[relay.Constant][43] /* ty=Tensor[(14, 78), float64] */, %860, %861, %862)
}

def @func_5186() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %863 = @func_4826() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %864 = @func_2712() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %865 = %863.0;
  %866 = %864.0;
  (%865, %866)
}

def @func_9931() -> Tensor[(12, 3, 11), float32] {
  %867 = @func_6067() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %867.1
}

def @func_1065(%var_1037: float64) -> (Tensor[(4, 15, 12), float64], Tensor[(7, 3, 1), float32], Tensor[(21), float32]) {
  %868 = cast(%var_1037, dtype="float64") /* ty=float64 */;
  %869 = cast(meta[relay.Constant][44] /* ty=Tensor[(4, 15, 12), float64] */, dtype="float64") /* ty=Tensor[(4, 15, 12), float64] */;
  %870 = cast(meta[relay.Constant][45] /* ty=Tensor[(21), float32] */, dtype="float32") /* ty=Tensor[(21), float32] */;
  %871 = reshape(%870, newshape=[7, 3, 1]) /* ty=Tensor[(7, 3, 1), float32] */;
  %872 = @func_936(%871) /* ty=(Tensor[(7, 3, 1), float32],) */;
  %873 = floor_mod(%868, %869) /* ty=Tensor[(4, 15, 12), float64] */;
  %874 = %872.0;
  (%873, %874, meta[relay.Constant][45] /* ty=Tensor[(21), float32] */)
}

def @func_9598(%var_9540: Tensor[(1092), float64]) -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(4, 7, 5), float32], Tensor[(140), uint8], Tensor[(12, 3, 11), float32], Tensor[(9, 11, 5), int64], Tensor[(495), int64], Tensor[(7, 3, 1), float32], Tensor[(21), float32], Tensor[(12, 3, 11), float32], Tensor[(1092), float64], Tensor[(1092), float64], Tensor[(780), float32], Tensor[(5, 12, 4), int8], Tensor[(12, 3, 11), float32], Tensor[(5, 10, 9), float64]) {
  %875 = @func_4625() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(2, 13, 2), float32], Tensor[(12, 3, 11), float32]) */;
  %876 = @func_8251() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %877 = cast(meta[relay.Constant][46] /* ty=Tensor[(140), uint8] */, dtype="uint8") /* ty=Tensor[(140), uint8] */;
  %878 = reshape(%877, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), uint8] */;
  %879 = @func_2854(%878) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(1092), float64], Tensor[(4, 7, 5), float32]) */;
  %880 = @func_1204() /* ty=(Tensor[(2, 13, 2), float32], Tensor[(2, 13, 2), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %881 = cast(meta[relay.Constant][47] /* ty=Tensor[(495), int64] */, dtype="int64") /* ty=Tensor[(495), int64] */;
  %882 = cast(meta[relay.Constant][47] /* ty=Tensor[(495), int64] */, dtype="int64") /* ty=Tensor[(495), int64] */;
  %883 = reshape(%881, newshape=[9, 11, 5]) /* ty=Tensor[(9, 11, 5), int64] */;
  %884 = reshape(%882, newshape=[9, 11, 5]) /* ty=Tensor[(9, 11, 5), int64] */;
  %885 = @func_4741(%883, %884) /* ty=(Tensor[(9, 11, 5), int64], Tensor[(12, 3, 11), float32], Tensor[(9, 11, 5), int16]) */;
  %886 = cast(meta[relay.Constant][48] /* ty=Tensor[(21), float32] */, dtype="float32") /* ty=Tensor[(21), float32] */;
  %887 = reshape(%886, newshape=[7, 3, 1]) /* ty=Tensor[(7, 3, 1), float32] */;
  %888 = @func_936(%887) /* ty=(Tensor[(7, 3, 1), float32],) */;
  %889 = @func_1386() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(364), uint64]) */;
  %890 = cast(%var_9540, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %891 = cast(meta[relay.Constant][49] /* ty=Tensor[(780), float32] */, dtype="float32") /* ty=Tensor[(780), float32] */;
  %892 = reshape(%890, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %893 = reshape(%891, newshape=[1, 780]) /* ty=Tensor[(1, 780), float32] */;
  %894 = @func_7013(%892, %893) /* ty=(Tensor[(12, 3, 11), int8], Tensor[(12, 3, 11), bool], Tensor[(13, 9, 6), bool], Tensor[(1092), float64], Tensor[(12, 3, 11), float32], Tensor[(1, 780), float32]) */;
  %895 = cast(meta[relay.Constant][50] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %896 = reshape(%895, newshape=[5, 12, 4]) /* ty=Tensor[(5, 12, 4), float32] */;
  %897 = @func_7182(%896) /* ty=Tensor[(5, 12, 4), bool] */;
  %898 = cast(%897, dtype="float32") /* ty=Tensor[(5, 12, 4), float32] */;
  %899 = log(%898) /* ty=Tensor[(5, 12, 4), float32] */;
  %900 = cast(meta[relay.Constant][50] /* ty=Tensor[(240), float32] */, dtype="int8") /* ty=Tensor[(240), int8] */;
  %901 = shape_of(%899, dtype="int32") /* ty=Tensor[(3), int32] */;
  %902 = cast(%899, dtype="int8") /* ty=Tensor[(5, 12, 4), int8] */;
  %903 = dyn.reshape(%900, %901, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %904 = @func_8251() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %905 = @func_4503() /* ty=(Tensor[(5, 10, 9), float64], Tensor[(12, 3, 11), float32]) */;
  %906 = %875.2;
  %907 = %876.1;
  %908 = %879.2;
  %909 = %880.3;
  %910 = %885.0;
  %911 = %888.0;
  %912 = %889.1;
  %913 = %894.3;
  %914 = right_shift(%902, %903) /* ty=Tensor[(5, 12, 4), int8] */;
  %915 = %904.1;
  %916 = %905.0;
  (%906, %907, %908, meta[relay.Constant][46] /* ty=Tensor[(140), uint8] */, %909, %910, meta[relay.Constant][47] /* ty=Tensor[(495), int64] */, %911, meta[relay.Constant][48] /* ty=Tensor[(21), float32] */, %912, %913, %var_9540, meta[relay.Constant][49] /* ty=Tensor[(780), float32] */, %914, %915, %916)
}

def @func_2911() -> (Tensor[(12, 3, 11), float32],) {
  %917 = @func_2273() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %918 = %917.0;
  (%918,)
}

def @func_7979() -> Tensor[(12, 3, 11), float32] {
  %919 = @func_974() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %919.0
}

def @func_10123(%var_10117: Tensor[(4, 9, 16), float32]) -> (Tensor[(4, 9, 16), float32],) {
  %920 = cast(%var_10117, dtype="float32") /* ty=Tensor[(4, 9, 16), float32] */;
  %921 = rsqrt(%920) /* ty=Tensor[(4, 9, 16), float32] */;
  (%921,)
}

def @func_10211(%var_10198: Tensor[(11, 4, 13), float64]) -> (Tensor[(12, 3, 11), float32], Tensor[(11, 4, 13), bool]) {
  %922 = @func_5841() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %923 = @func_3062() /* ty=(Tensor[(11, 4, 13), float64],) */;
  %924 = %923.0;
  %925 = cast(%var_10198, dtype="bool") /* ty=Tensor[(11, 4, 13), bool] */;
  %926 = shape_of(%924, dtype="int32") /* ty=Tensor[(3), int32] */;
  %927 = cast(%924, dtype="bool") /* ty=Tensor[(11, 4, 13), bool] */;
  %928 = dyn.reshape(%925, %926, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %929 = %922.3;
  %930 = greater(%927, %928) /* ty=Tensor[(11, 4, 13), bool] */;
  (%929, %930)
}

def @func_8349(%var_8300: Tensor[(1092), float64], %var_8326: Tensor[(15, 1092), float32]) -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(364), uint64], Tensor[(1092), float64], Tensor[(15, 1092), int32], Tensor[(15, 1092), float64]) {
  %931 = @func_4826() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %932 = @func_6847() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 7, 4), uint64], Tensor[(364), uint64], Tensor[(13, 9, 6), bool], Tensor[(1092), float32]) */;
  %933 = cast(%var_8300, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %934 = reshape(%933, newshape=[1, 1092]) /* ty=Tensor[(1, 1092), float64] */;
  %935 = @func_5250(%934) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(1, 1092), float32]) */;
  %936 = %935.2;
  %937 = cast(%936, dtype="int32") /* ty=Tensor[(1, 1092), int32] */;
  %938 = cast(%var_8326, dtype="int32") /* ty=Tensor[(15, 1092), int32] */;
  %939 = cast(%var_8326, dtype="float64") /* ty=Tensor[(15, 1092), float64] */;
  %940 = cast(%936, dtype="float64") /* ty=Tensor[(1, 1092), float64] */;
  %941 = %931.0;
  %942 = @func_1957() /* ty=Tensor[(12, 3, 11), float32] */;
  %943 = %932.5;
  %944 = bitwise_and(%937, %938) /* ty=Tensor[(15, 1092), int32] */;
  %945 = maximum(%939, %940) /* ty=Tensor[(15, 1092), float64] */;
  (%941, %942, %943, %var_8300, %944, %945)
}

def @func_936(%var_933: Tensor[(7, 3, 1), float32]) -> (Tensor[(7, 3, 1), float32],) {
  %946 = cast(%var_933, dtype="float32") /* ty=Tensor[(7, 3, 1), float32] */;
  %947 = tan(%946) /* ty=Tensor[(7, 3, 1), float32] */;
  (%947,)
}

def @func_9174(%var_9160: Tensor[(3, 7, 3), float64]) -> (Tensor[(3, 7, 3), bool], Tensor[(5, 3, 5), float32]) {
  %948 = cast(%var_9160, dtype="float64") /* ty=Tensor[(3, 7, 3), float64] */;
  %949 = asinh(%948) /* ty=Tensor[(3, 7, 3), float64] */;
  %950 = cast(%949, dtype="bool") /* ty=Tensor[(3, 7, 3), bool] */;
  %951 = shape_of(%var_9160, dtype="int32") /* ty=Tensor[(3), int32] */;
  %952 = cast(%var_9160, dtype="bool") /* ty=Tensor[(3, 7, 3), bool] */;
  %953 = dyn.reshape(%950, %951, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %954 = @func_6449() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(5, 3, 5), float32], Tensor[(75), float32], Tensor[(12, 3, 11), float32]) */;
  %955 = less_equal(%952, %953) /* ty=Tensor[(3, 7, 3), bool] */;
  %956 = %954.1;
  (%955, %956)
}

def @func_1744(%var_1697: uint8, %var_1698: Tensor[(13, 16, 1), uint8], %var_1730: Tensor[(176), float64]) -> (Tensor[(13, 9, 6), bool], Tensor[(176), bool], Tensor[(13, 16, 176), bool]) {
  %957 = cast(meta[relay.Constant][51] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %958 = cast(meta[relay.Constant][51] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %959 = reshape(%957, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
  %960 = reshape(%958, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
  %961 = @func_311(%959, %960) /* ty=(Tensor[(4, 4, 11), float64], Tensor[(13, 9, 6), bool], Tensor[(396), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) */;
  %962 = cast(%var_1730, dtype="bool") /* ty=Tensor[(176), bool] */;
  %963 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(176), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %964 = cast(meta[relay.Constant][51] /* ty=Tensor[(176), float64] */, dtype="bool") /* ty=Tensor[(176), bool] */;
  %965 = dyn.reshape(%962, %963, newshape=[]) /* ty=Tensor[(?), bool] */;
  %966 = cast(%var_1697, dtype="uint8") /* ty=uint8 */;
  %967 = cast(%var_1698, dtype="uint8") /* ty=Tensor[(13, 16, 1), uint8] */;
  %968 = bitwise_or(%966, %967) /* ty=Tensor[(13, 16, 1), uint8] */;
  %969 = cast(%968, dtype="bool") /* ty=Tensor[(13, 16, 1), bool] */;
  %970 = cast(meta[relay.Constant][51] /* ty=Tensor[(176), float64] */, dtype="bool") /* ty=Tensor[(176), bool] */;
  %971 = %961.1;
  %972 = not_equal(%964, %965) /* ty=Tensor[(176), bool] */;
  %973 = logical_or(%969, %970) /* ty=Tensor[(13, 16, 176), bool] */;
  (%971, %972, %973)
}

def @func_6381() -> (Tensor[(12, 3, 11), float32],) {
  %974 = @func_3923() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %975 = %974.0;
  (%975,)
}

def @func_337() -> Tensor[(12, 3, 11), float32] {
  %976 = @func_142() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
  %976.0
}

def @func_2446() -> Tensor[(13, 9, 6), bool] {
  %977 = @func_142() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
  %977.1
}

def @func_2712() -> (Tensor[(12, 3, 11), float32],) {
  %978 = @func_2402() /* ty=Tensor[(12, 3, 11), float64] */;
  %979 = cast(%978, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
  %980 = asin(%979) /* ty=Tensor[(12, 3, 11), float32] */;
  (%980,)
}

def @func_8797(%var_8720: Tensor[(5, 156), float32], %var_8748: Tensor[(864, 1), bool]) -> (Tensor[(208), uint8], Tensor[(12, 3, 11), float32], Tensor[(1092), float64], Tensor[(5, 156), float32], Tensor[(12, 3, 11), float32], Tensor[(864, 1), bool], Tensor[(4, 4, 11), float64], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %981 = @func_4332() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(176), float64], Tensor[(13, 16, 176), bool], uint8, Tensor[(208), uint8], Tensor[(13, 16, 176), bool]) */;
  %982 = cast(meta[relay.Constant][52] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %983 = cast(%var_8720, dtype="float32") /* ty=Tensor[(5, 156), float32] */;
  %984 = reshape(%982, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %985 = reshape(%983, newshape=[1, 780]) /* ty=Tensor[(1, 780), float32] */;
  %986 = @func_7013(%984, %985) /* ty=(Tensor[(12, 3, 11), int8], Tensor[(12, 3, 11), bool], Tensor[(13, 9, 6), bool], Tensor[(1092), float64], Tensor[(12, 3, 11), float32], Tensor[(1, 780), float32]) */;
  %987 = cast(%var_8748, dtype="bool") /* ty=Tensor[(864, 1), bool] */;
  %988 = reshape(%987, newshape=[12, 12, 6]) /* ty=Tensor[(12, 12, 6), bool] */;
  %989 = @func_5123(%988) /* ty=(Tensor[(12, 12, 6), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %990 = %986.4;
  %991 = cast(%990, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
  %992 = reshape(%991, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
  %993 = @func_4129(%992) /* ty=(Tensor[(12, 3, 11), int8], Tensor[(12, 3, 11), float32], Tensor[(4, 4, 11), float64], Tensor[(176), float64]) */;
  %994 = @func_1415() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %995 = cast(meta[relay.Constant][52] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %996 = reshape(%995, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %997 = @func_6549(%996) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(1092), float64]) */;
  %998 = %981.5;
  %999 = %989.1;
  %1000 = %993.2;
  %1001 = %994.0;
  %1002 = @func_8198() /* ty=Tensor[(12, 3, 11), float32] */;
  %1003 = %997.1;
  (%998, %990, meta[relay.Constant][52] /* ty=Tensor[(1092), float64] */, %var_8720, %999, %var_8748, %1000, %1001, %1002, %1003)
}

def @func_4840() -> (Tensor[(12, 3, 11), float32],) {
  %1004 = @func_1334() /* ty=(Tensor[(2, 13, 2), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %1005 = %1004.1;
  (%1005,)
}

def @func_9991() -> (Tensor[(12, 3, 11), float32],) {
  %1006 = @func_9032() /* ty=Tensor[(12, 3, 11), float32] */;
  (%1006,)
}

def @func_10917() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %1007 = @func_3923() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %1008 = @func_7135() /* ty=Tensor[(12, 3, 11), float32] */;
  %1009 = %1007.0;
  (%1008, %1009)
}

def @func_7182(%var_7175: Tensor[(5, 12, 4), float32]) -> Tensor[(5, 12, 4), bool] {
  %1010 = cast(%var_7175, dtype="bool") /* ty=Tensor[(5, 12, 4), bool] */;
  %1011 = shape_of(meta[relay.Constant][53] /* ty=Tensor[(5, 12, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1012 = cast(meta[relay.Constant][53] /* ty=Tensor[(5, 12, 4), float32] */, dtype="bool") /* ty=Tensor[(5, 12, 4), bool] */;
  %1013 = dyn.reshape(%1010, %1011, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%1012, %1013) /* ty=Tensor[(5, 12, 4), bool] */
}

def @func_10241() -> Tensor[(12, 3, 11), float32] {
  @func_7744() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_9223() -> (Tensor[(2, 13, 2), bool], Tensor[(572), float32], Tensor[(12, 3, 11), float32]) {
  %1014 = @func_1204() /* ty=(Tensor[(2, 13, 2), float32], Tensor[(2, 13, 2), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %1015 = @func_7623() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(572), float32]) */;
  %1016 = %1014.1;
  %1017 = %1015.1;
  %1018 = @func_8198() /* ty=Tensor[(12, 3, 11), float32] */;
  (%1016, %1017, %1018)
}

def @func_11023() -> (Tensor[(572), float32], Tensor[(144), uint64]) {
  %1019 = @func_7623() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(572), float32]) */;
  %1020 = @func_9802() /* ty=(Tensor[(144), uint64], Tensor[(13, 9, 6), bool]) */;
  %1021 = %1019.1;
  %1022 = %1020.0;
  (%1021, %1022)
}

def @func_231() -> Tensor[(12, 3, 11), float32] {
  %1023 = @func_142() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
  %1023.2
}

def @func_992() -> (Tensor[(12, 3, 11), float32],) {
  %1024 = @func_404() /* ty=Tensor[(12, 3, 11), float32] */;
  (%1024,)
}

def @func_5907() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %1025 = @func_992() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %1026 = @func_1386() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(364), uint64]) */;
  %1027 = %1025.0;
  %1028 = %1026.1;
  (%1027, %1028)
}

def @func_10446() -> (Tensor[(12, 3, 11), float32], Tensor[(364), uint64], Tensor[(14, 78), float64]) {
  %1029 = @func_252() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) */;
  %1030 = cast(meta[relay.Constant][54] /* ty=Tensor[(14, 78), float64] */, dtype="float64") /* ty=Tensor[(14, 78), float64] */;
  %1031 = reshape(%1030, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %1032 = @func_2195(%1031) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(364), uint64], Tensor[(1092), float64], Tensor[(1092), float64]) */;
  %1033 = %1029.1;
  %1034 = %1032.3;
  (%1033, %1034, meta[relay.Constant][54] /* ty=Tensor[(14, 78), float64] */)
}

def @func_8656(%var_8623: Tensor[(1, 48), float32], %var_8637: Tensor[(88, 2), float64]) -> (Tensor[(5, 10, 9), float64], Tensor[(12, 3, 11), float32], Tensor[(88, 2), float64], Tensor[(12, 3, 11), float32], Tensor[(?, 48), int64]) {
  %1035 = @func_4503() /* ty=(Tensor[(5, 10, 9), float64], Tensor[(12, 3, 11), float32]) */;
  %1036 = cast(%var_8637, dtype="float64") /* ty=Tensor[(88, 2), float64] */;
  %1037 = reshape(%1036, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %1038 = @func_845(%1037) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(176), float64]) */;
  %1039 = @func_1334() /* ty=(Tensor[(2, 13, 2), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %1040 = cast(%var_8623, dtype="float32") /* ty=Tensor[(1, 48), float32] */;
  %1041 = reshape(%1040, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %1042 = @func_7507(%1041) /* ty=(Tensor[(6, 2, 4), bool], Tensor[(48), float32], Tensor[(13, 16, 176), uint64]) */;
  %1043 = %1042.1;
  %1044 = cast(%1043, dtype="int64") /* ty=Tensor[(48), int64] */;
  %1045 = shape_of(%var_8623, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1046 = cast(%var_8623, dtype="int64") /* ty=Tensor[(1, 48), int64] */;
  %1047 = dyn.reshape(%1044, %1045, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %1048 = %1035.0;
  %1049 = %1038.1;
  %1050 = %1039.2;
  %1051 = left_shift(%1046, %1047) /* ty=Tensor[(?, 48), int64] */;
  (%1048, %1049, %var_8637, %1050, %1051)
}

def @func_1334() -> (Tensor[(2, 13, 2), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %1052 = @func_1204() /* ty=(Tensor[(2, 13, 2), float32], Tensor[(2, 13, 2), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %1053 = @func_21() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %1054 = %1052.0;
  %1055 = @func_404() /* ty=Tensor[(12, 3, 11), float32] */;
  %1056 = %1053.0;
  (%1054, %1055, %1056)
}

def @func_404() -> Tensor[(12, 3, 11), float32] {
  @func_337() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_1597() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %1057 = @func_1334() /* ty=(Tensor[(2, 13, 2), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %1058 = @func_1334() /* ty=(Tensor[(2, 13, 2), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %1059 = %1057.2;
  %1060 = %1058.1;
  (%1059, %1060)
}

def @func_6775() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %1061 = @func_2911() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %1062 = %1061.0;
  %1063 = @func_1410() /* ty=Tensor[(12, 3, 11), float32] */;
  (%1062, %1063)
}

def @func_8431() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %1064 = @func_3598() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %1065 = @func_5036() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %1066 = %1064.2;
  %1067 = %1065.0;
  (%1066, %1067)
}

def @func_3887() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %1068 = @func_3750() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %1069 = %1068.0;
  %1070 = @func_2960() /* ty=Tensor[(12, 3, 11), float32] */;
  (%1069, %1070)
}

def @func_5731() -> (Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) {
  %1071 = @func_4066() /* ty=(Tensor[(11, 4, 13), float64], Tensor[(12, 3, 11), float32]) */;
  %1072 = %1071.1;
  %1073 = @func_2446() /* ty=Tensor[(13, 9, 6), bool] */;
  (%1072, %1073)
}

def @func_804(%var_799: Tensor[(1092), float64]) -> (Tensor[(12, 3, 11), float32], Tensor[(6, 13, 14), int8], Tensor[(1092), float64]) {
  %1074 = cast(%var_799, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %1075 = reshape(%1074, newshape=[6, 13, 14]) /* ty=Tensor[(6, 13, 14), float64] */;
  %1076 = @func_670(%1075) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(6, 13, 14), int8], Tensor[(12, 3, 11), float32], Tensor[(396), float64], Tensor[(12, 3, 11), float32]) */;
  %1077 = @func_404() /* ty=Tensor[(12, 3, 11), float32] */;
  %1078 = %1076.1;
  (%1077, %1078, %var_799)
}

def @func_9924(%var_9896: Tensor[(14, 6, 4), int32]) -> (Tensor[(14, 6, 4), bool], Tensor[(12, 3, 11), float32]) {
  %1079 = cast(%var_9896, dtype="bool") /* ty=Tensor[(14, 6, 4), bool] */;
  %1080 = shape_of(meta[relay.Constant][55] /* ty=Tensor[(14, 6, 4), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1081 = cast(meta[relay.Constant][55] /* ty=Tensor[(14, 6, 4), int32] */, dtype="bool") /* ty=Tensor[(14, 6, 4), bool] */;
  %1082 = dyn.reshape(%1079, %1080, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1083 = greater_equal(%1081, %1082) /* ty=Tensor[(14, 6, 4), bool] */;
  %1084 = @func_2973() /* ty=Tensor[(12, 3, 11), float32] */;
  (%1083, %1084)
}

def @func_3369() -> Tensor[(12, 3, 11), float32] {
  %1085 = @func_2273() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %1085.0
}

def @func_7098() -> (Tensor[(13, 9, 6), bool],) {
  %1086 = @func_142() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
  %1087 = %1086.1;
  (%1087,)
}

def @func_5996() -> (Tensor[(12, 3, 11), float32],) {
  %1088 = @func_2960() /* ty=Tensor[(12, 3, 11), float32] */;
  (%1088,)
}

def @func_7623() -> (Tensor[(12, 3, 11), float32], Tensor[(572), float32]) {
  %1089 = @func_4965() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %1090 = @func_5286() /* ty=Tensor[(572), float64] */;
  %1091 = cast(%1090, dtype="float32") /* ty=Tensor[(572), float32] */;
  %1092 = %1089.1;
  %1093 = cos(%1091) /* ty=Tensor[(572), float32] */;
  (%1092, %1093)
}

def @func_6067() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %1094 = @func_775() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %1095 = @func_1485() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %1096 = %1094.1;
  %1097 = %1095.0;
  (%1096, %1097)
}

def @func_7835() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %1098 = @func_4483() /* ty=Tensor[(12, 3, 11), float32] */;
  %1099 = @func_231() /* ty=Tensor[(12, 3, 11), float32] */;
  (%1098, %1099)
}

def @func_11399(%var_11367: Tensor[(3, 7, 1), float64]) -> (Tensor[(3, 7, ?), bool], Tensor[(13), int32], int32, Tensor[(3, 7, 1), float64], Tensor[(12, 3, 11), float32], Tensor[(2, 88), float64]) {
  %1100 = cast(%var_11367, dtype="float64") /* ty=Tensor[(3, 7, 1), float64] */;
  %1101 = cos(%1100) /* ty=Tensor[(3, 7, 1), float64] */;
  %1102 = cast(%var_11367, dtype="bool") /* ty=Tensor[(3, 7, 1), bool] */;
  %1103 = shape_of(%1101, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1104 = cast(%1101, dtype="bool") /* ty=Tensor[(3, 7, 1), bool] */;
  %1105 = dyn.reshape(%1102, %1103, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1106 = cast(-5 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %1107 = reshape(%1106, newshape=[]) /* ty=int32 */;
  %1108 = @func_5102(%1107) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), uint16], Tensor[(1, 13), bool], int32, Tensor[(13), int32], Tensor[(12, 3, 11), float32]) */;
  %1109 = cast(%var_11367, dtype="float64") /* ty=Tensor[(3, 7, 1), float64] */;
  %1110 = cast(meta[relay.Constant][56] /* ty=Tensor[(2, 88), float64] */, dtype="float64") /* ty=Tensor[(2, 88), float64] */;
  %1111 = reshape(%1110, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %1112 = @func_845(%1111) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(176), float64]) */;
  %1113 = less_equal(%1104, %1105) /* ty=Tensor[(3, 7, ?), bool] */;
  %1114 = %1108.4;
  %1115 = sqrt(%1109) /* ty=Tensor[(3, 7, 1), float64] */;
  %1116 = %1112.0;
  (%1113, %1114, -5 /* ty=int32 */, %1115, %1116, meta[relay.Constant][56] /* ty=Tensor[(2, 88), float64] */)
}

def @func_2195(%var_2193: Tensor[(1092), float64]) -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(364), uint64], Tensor[(1092), float64], Tensor[(1092), float64]) {
  %1117 = @func_775() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %1118 = cast(meta[relay.Constant][57] /* ty=Tensor[(364), uint64] */, dtype="uint64") /* ty=Tensor[(364), uint64] */;
  %1119 = reshape(%1118, newshape=[13, 7, 4]) /* ty=Tensor[(13, 7, 4), uint64] */;
  %1120 = @func_464(%1119) /* ty=(Tensor[(13, 7, 4), uint64], Tensor[(12, 3, 11), float32], Tensor[(396), float32]) */;
  %1121 = cast(%var_2193, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %1122 = reshape(%1121, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %1123 = @func_804(%1122) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(6, 13, 14), int8], Tensor[(1092), float64]) */;
  %1124 = @func_2094() /* ty=Tensor[(12, 3, 11), float32] */;
  %1125 = %1117.1;
  %1126 = %1120.1;
  %1127 = %1123.2;
  (%1124, %1125, %1126, meta[relay.Constant][57] /* ty=Tensor[(364), uint64] */, %1127, %var_2193)
}

def @func_4741(%var_4708: Tensor[(9, 11, 5), int64], %var_4737: Tensor[(9, 11, 5), int64]) -> (Tensor[(9, 11, 5), int64], Tensor[(12, 3, 11), float32], Tensor[(9, 11, 5), int16]) {
  %1128 = cast(meta[relay.Constant][58] /* ty=Tensor[(9, 11, 5), int64] */, dtype="int64") /* ty=Tensor[(9, 11, 5), int64] */;
  %1129 = shape_of(%var_4708, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1130 = cast(%var_4708, dtype="int64") /* ty=Tensor[(9, 11, 5), int64] */;
  %1131 = dyn.reshape(%1128, %1129, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1132 = cast(%var_4737, dtype="int16") /* ty=Tensor[(9, 11, 5), int16] */;
  %1133 = shape_of(%var_4708, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1134 = cast(%var_4708, dtype="int16") /* ty=Tensor[(9, 11, 5), int16] */;
  %1135 = dyn.reshape(%1132, %1133, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1136 = bitwise_and(%1130, %1131) /* ty=Tensor[(9, 11, 5), int64] */;
  %1137 = @func_337() /* ty=Tensor[(12, 3, 11), float32] */;
  %1138 = subtract(%1134, %1135) /* ty=Tensor[(9, 11, 5), int16] */;
  (%1136, %1137, %1138)
}

def @func_5545(%var_5507: Tensor[(1, 1092), float64]) -> (Tensor[(2, 13, 2), float32], Tensor[(396), float64], Tensor[(12, 3, 11), bool], Tensor[(1, 1092), float32]) {
  %1139 = @func_1334() /* ty=(Tensor[(2, 13, 2), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %1140 = cast(%var_5507, dtype="float64") /* ty=Tensor[(1, 1092), float64] */;
  %1141 = reshape(%1140, newshape=[6, 13, 14]) /* ty=Tensor[(6, 13, 14), float64] */;
  %1142 = @func_670(%1141) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(6, 13, 14), int8], Tensor[(12, 3, 11), float32], Tensor[(396), float64], Tensor[(12, 3, 11), float32]) */;
  %1143 = %1142.3;
  %1144 = cast(%1143, dtype="float32") /* ty=Tensor[(396), float32] */;
  %1145 = reshape(%1144, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
  %1146 = cast(%var_5507, dtype="float32") /* ty=Tensor[(1, 1092), float32] */;
  %1147 = %1139.0;
  %1148 = @func_3114(%1145) /* ty=Tensor[(12, 3, 11), bool] */;
  %1149 = asin(%1146) /* ty=Tensor[(1, 1092), float32] */;
  (%1147, %1143, %1148, %1149)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_7136() -> Tensor[(12, 3, 11), float32] {
  %1 = fn () -> Tensor[(12, 3, 11), float32] {
    %0 = @func_6873() /* ty=(Tensor[(12, 3, 11), float32],) */;
    %0.0
  };
  %1() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_8660(%var_8658: Tensor[(1, 48), float32], %var_8659: Tensor[(88, 2), float64]) -> (Tensor[(5, 10, 9), float64], Tensor[(12, 3, 11), float32], Tensor[(88, 2), float64], Tensor[(12, 3, 11), float32], Tensor[(?, 48), int64]) {
  @func_8656(%var_8658, %var_8659) /* ty=(Tensor[(5, 10, 9), float64], Tensor[(12, 3, 11), float32], Tensor[(88, 2), float64], Tensor[(12, 3, 11), float32], Tensor[(?, 48), int64]) */
}

def @func_8251() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %2 = @func_6085() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %3 = %2.1;
  %4 = @func_7979() /* ty=Tensor[(12, 3, 11), float32] */;
  (%3, %4)
}

def @func_8253() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  @func_8251() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_8224(%var_8209: Tensor[(12, 9, 6), uint16], %var_8210: Tensor[(12, 9, 6), uint16]) -> Tensor[(12, 9, 6), uint16] {
  %5 = cast(%var_8210, dtype="uint16") /* ty=Tensor[(12, 9, 6), uint16] */;
  %6 = shape_of(%var_8209, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%var_8209, dtype="uint16") /* ty=Tensor[(12, 9, 6), uint16] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_xor(%7, %8) /* ty=Tensor[(12, 9, 6), uint16] */
}

def @func_6288(%var_6286: Tensor[(495), int64]) -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(9, 11, 5), int64], Tensor[(495), int64]) {
  @func_6285(%var_6286) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(9, 11, 5), int64], Tensor[(495), int64]) */
}

def @func_5873() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), int8]) {
  %9 = @func_4965() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %10 = %9.1;
  %11 = cast(%10, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
  %12 = reshape(%11, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
  %13 = @func_4129(%12) /* ty=(Tensor[(12, 3, 11), int8], Tensor[(12, 3, 11), float32], Tensor[(4, 4, 11), float64], Tensor[(176), float64]) */;
  %14 = %13.0;
  (%10, %14)
}

def @func_7745() -> Tensor[(12, 3, 11), float32] {
  %15 = fn () -> Tensor[(12, 3, 11), float32] {
    @func_2960() /* ty=Tensor[(12, 3, 11), float32] */
  };
  %15() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_7835() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %16 = @func_4483() /* ty=Tensor[(12, 3, 11), float32] */;
  %17 = @func_231() /* ty=Tensor[(12, 3, 11), float32] */;
  (%16, %17)
}

def @func_7979() -> Tensor[(12, 3, 11), float32] {
  %18 = @func_974() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %18.0
}

def @func_10505(%var_10503: Tensor[(13, 13, 14), float64]) -> (Tensor[(13, 13, 14), int16],) {
  @func_10502(%var_10503) /* ty=(Tensor[(13, 13, 14), int16],) */
}

def @func_7788() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %19 = @func_2911() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %20 = %19.0;
  %21 = @func_2960() /* ty=Tensor[(12, 3, 11), float32] */;
  (%20, %21)
}

def @func_9120() -> Tensor[(12, 3, 11), float32] {
  @func_9118() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_11040() -> (Tensor[(12, 3, 11), float32],) {
  %24 = fn () -> (Tensor[(12, 3, 11), float32],) {
    %22 = @func_8187() /* ty=(Tensor[(12, 3, 11), float32],) */;
    %23 = %22.0;
    (%23,)
  };
  %24() /* ty=(Tensor[(12, 3, 11), float32],) */
}

def @func_5998() -> (Tensor[(12, 3, 11), float32],) {
  @func_5996() /* ty=(Tensor[(12, 3, 11), float32],) */
}

def @func_9870(%var_9838: uint8, %var_9839: Tensor[(2, 104), uint8]) -> (Tensor[(12, 3, 11), float32], Tensor[(2, 104), uint8], Tensor[(13, 9, 6), bool], Tensor[(13, 16, 176), bool]) {
  %25 = @func_9446() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %26 = %25.0;
  %27 = cast(%26, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
  %28 = reshape(%27, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
  %29 = @func_67(%28) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
  %30 = cast(%var_9838, dtype="uint8") /* ty=uint8 */;
  %31 = cast(%var_9839, dtype="uint8") /* ty=Tensor[(2, 104), uint8] */;
  %32 = cast(meta[relay.Constant][0] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %33 = reshape(%30, newshape=[]) /* ty=uint8 */;
  %34 = reshape(%31, newshape=[13, 16, 1]) /* ty=Tensor[(13, 16, 1), uint8] */;
  %35 = reshape(%32, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %36 = @func_1744(%33, %34, %35) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(176), bool], Tensor[(13, 16, 176), bool]) */;
  %37 = %36.2;
  %38 = cast(%var_9838, dtype="bool") /* ty=bool */;
  %39 = cast(%37, dtype="bool") /* ty=Tensor[(13, 16, 176), bool] */;
  %40 = logical_and(%38, %39) /* ty=Tensor[(13, 16, 176), bool] */;
  %41 = cast(%40, dtype="bool") /* ty=Tensor[(13, 16, 176), bool] */;
  %42 = cast(meta[relay.Constant][0] /* ty=Tensor[(176), float64] */, dtype="bool") /* ty=Tensor[(176), bool] */;
  %43 = %29.0;
  %44 = greater(%41, %42) /* ty=Tensor[(13, 16, 176), bool] */;
  (%26, %var_9839, %43, %44)
}

def @func_9931() -> Tensor[(12, 3, 11), float32] {
  %45 = @func_6067() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %45.1
}

def @func_1838() -> (Tensor[(12, 3, 11), float32],) {
  @func_1836() /* ty=(Tensor[(12, 3, 11), float32],) */
}

def @func_1584() -> (Tensor[(12, 3, 11), float32], Tensor[(11, 4, 13), float64], Tensor[(572), float64], Tensor[(12, 3, 11), float32]) {
  %46 = cast(meta[relay.Constant][1] /* ty=Tensor[(572), float64] */, dtype="float64") /* ty=Tensor[(572), float64] */;
  %47 = reshape(%46, newshape=[11, 4, 13]) /* ty=Tensor[(11, 4, 13), float64] */;
  %48 = @func_894(%47) /* ty=(Tensor[(11, 4, 13), float64], Tensor[(5, 5, 4), float64], Tensor[(100), float64]) */;
  %49 = @func_1485() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %50 = @func_536() /* ty=Tensor[(12, 3, 11), float32] */;
  %51 = %48.0;
  %52 = %49.0;
  (%50, %51, meta[relay.Constant][1] /* ty=Tensor[(572), float64] */, %52)
}

def @func_4741(%var_4708: Tensor[(9, 11, 5), int64], %var_4737: Tensor[(9, 11, 5), int64]) -> (Tensor[(9, 11, 5), int64], Tensor[(12, 3, 11), float32], Tensor[(9, 11, 5), int16]) {
  %53 = cast(meta[relay.Constant][2] /* ty=Tensor[(9, 11, 5), int64] */, dtype="int64") /* ty=Tensor[(9, 11, 5), int64] */;
  %54 = shape_of(%var_4708, dtype="int32") /* ty=Tensor[(3), int32] */;
  %55 = cast(%var_4708, dtype="int64") /* ty=Tensor[(9, 11, 5), int64] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %57 = cast(%var_4737, dtype="int16") /* ty=Tensor[(9, 11, 5), int16] */;
  %58 = shape_of(%var_4708, dtype="int32") /* ty=Tensor[(3), int32] */;
  %59 = cast(%var_4708, dtype="int16") /* ty=Tensor[(9, 11, 5), int16] */;
  %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %61 = bitwise_and(%55, %56) /* ty=Tensor[(9, 11, 5), int64] */;
  %62 = @func_337() /* ty=Tensor[(12, 3, 11), float32] */;
  %63 = subtract(%59, %60) /* ty=Tensor[(9, 11, 5), int16] */;
  (%61, %62, %63)
}

def @func_3600() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  @func_3598() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_5548(%var_5546: Tensor[(1, 1092), float64]) -> (Tensor[(2, 13, 2), float32], Tensor[(396), float64], Tensor[(12, 3, 11), bool], Tensor[(1, 1092), float32]) {
  @func_5545(%var_5546) /* ty=(Tensor[(2, 13, 2), float32], Tensor[(396), float64], Tensor[(12, 3, 11), bool], Tensor[(1, 1092), float32]) */
}

def @func_2772() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  @func_2770() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_2368() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %64 = @func_1817() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(14, 78), float64]) */;
  %65 = @func_21() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %66 = @func_974() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %67 = %64.2;
  %68 = %65.0;
  %69 = %66.1;
  (%67, %68, %69)
}

def @func_3033() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float64]) {
  @func_3031() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float64]) */
}

def @func_338() -> Tensor[(12, 3, 11), float32] {
  %71 = fn () -> Tensor[(12, 3, 11), float32] {
    %70 = @func_142() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
    %70.0
  };
  %71() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_2402() -> Tensor[(12, 3, 11), float64] {
  %72 = @func_2273() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %73 = %72.0;
  %74 = cast(%73, dtype="float64") /* ty=Tensor[(12, 3, 11), float64] */;
  sinh(%74) /* ty=Tensor[(12, 3, 11), float64] */
}

def @func_9223() -> (Tensor[(2, 13, 2), bool], Tensor[(572), float32], Tensor[(12, 3, 11), float32]) {
  %75 = @func_1204() /* ty=(Tensor[(2, 13, 2), float32], Tensor[(2, 13, 2), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %76 = @func_7623() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(572), float32]) */;
  %77 = %75.1;
  %78 = %76.1;
  %79 = @func_8198() /* ty=Tensor[(12, 3, 11), float32] */;
  (%77, %78, %79)
}

def @func_9095() -> (Tensor[(12, 3, 11), float32], Tensor[(44, 4), float64], Tensor[(396), float32], Tensor[(12, 3, 11), float32]) {
  %92 = fn () -> (Tensor[(12, 3, 11), float32], Tensor[(44, 4), float64], Tensor[(396), float32], Tensor[(12, 3, 11), float32]) {
    %80 = @func_2459() /* ty=(Tensor[(12, 3, 11), float32],) */;
    %81 = cast(meta[relay.Constant][3] /* ty=Tensor[(44, 4), float64] */, dtype="float64") /* ty=Tensor[(44, 4), float64] */;
    %82 = cast(meta[relay.Constant][3] /* ty=Tensor[(44, 4), float64] */, dtype="float64") /* ty=Tensor[(44, 4), float64] */;
    %83 = reshape(%81, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
    %84 = reshape(%82, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
    %85 = @func_311(%83, %84) /* ty=(Tensor[(4, 4, 11), float64], Tensor[(13, 9, 6), bool], Tensor[(396), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) */;
    %86 = %85.2;
    %87 = cast(%86, dtype="float32") /* ty=Tensor[(396), float32] */;
    %88 = @func_2368() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
    %89 = %80.0;
    %90 = log2(%87) /* ty=Tensor[(396), float32] */;
    %91 = %88.2;
    (%89, meta[relay.Constant][3] /* ty=Tensor[(44, 4), float64] */, %90, %91)
  };
  %92() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(44, 4), float64], Tensor[(396), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_9225() -> (Tensor[(2, 13, 2), bool], Tensor[(572), float32], Tensor[(12, 3, 11), float32]) {
  @func_9223() /* ty=(Tensor[(2, 13, 2), bool], Tensor[(572), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_6520(%var_6519: Tensor[(7, 2, 8), float32]) -> Tensor[(7, 2, 8), uint32] {
  %99 = fn (%var_6501: Tensor[(7, 2, 8), float32]) -> Tensor[(7, 2, 8), uint32] {
    %93 = cast(%var_6501, dtype="float32") /* ty=Tensor[(7, 2, 8), float32] */;
    %94 = acosh(%93) /* ty=Tensor[(7, 2, 8), float32] */;
    %95 = cast(%var_6501, dtype="uint32") /* ty=Tensor[(7, 2, 8), uint32] */;
    %96 = shape_of(%94, dtype="int32") /* ty=Tensor[(3), int32] */;
    %97 = cast(%94, dtype="uint32") /* ty=Tensor[(7, 2, 8), uint32] */;
    %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    subtract(%97, %98) /* ty=Tensor[(7, 2, 8), uint32] */
  };
  %99(%var_6519) /* ty=Tensor[(7, 2, 8), uint32] */
}

def @func_2033(%var_2029: Tensor[(100), float64]) -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(5, 5, 4), float64], Tensor[(100), float64]) {
  %100 = @func_1584() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(11, 4, 13), float64], Tensor[(572), float64], Tensor[(12, 3, 11), float32]) */;
  %101 = cast(%var_2029, dtype="float64") /* ty=Tensor[(100), float64] */;
  %102 = reshape(%101, newshape=[5, 5, 4]) /* ty=Tensor[(5, 5, 4), float64] */;
  %103 = @func_868(%102) /* ty=(Tensor[(5, 5, 4), float64],) */;
  %104 = %100.0;
  %105 = @func_404() /* ty=Tensor[(12, 3, 11), float32] */;
  %106 = %103.0;
  (%104, %105, %106, %var_2029)
}

def @func_2095() -> Tensor[(12, 3, 11), float32] {
  %107 = fn () -> Tensor[(12, 3, 11), float32] {
    @func_1957() /* ty=Tensor[(12, 3, 11), float32] */
  };
  %107() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_776() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %115 = fn () -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
    %108 = @func_21() /* ty=(Tensor[(12, 3, 11), float32],) */;
    %109 = %108.0;
    %110 = cast(%109, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
    %111 = reshape(%110, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
    %112 = @func_67(%111) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
    %113 = @func_337() /* ty=Tensor[(12, 3, 11), float32] */;
    %114 = %112.1;
    (%109, %113, %114)
  };
  %115() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_1486() -> (Tensor[(12, 3, 11), float32],) {
  %118 = fn () -> (Tensor[(12, 3, 11), float32],) {
    %116 = @func_992() /* ty=(Tensor[(12, 3, 11), float32],) */;
    %117 = %116.0;
    (%117,)
  };
  %118() /* ty=(Tensor[(12, 3, 11), float32],) */
}

def @func_6354(%var_6352: Tensor[(6, 2, 4), float32], %var_6353: Tensor[(6, 2, 4), float32]) -> Tensor[(6, 2, 4), bool] {
  %123 = fn (%var_6328: Tensor[(6, 2, 4), float32], %var_6329: Tensor[(6, 2, 4), float32]) -> Tensor[(6, 2, 4), bool] {
    %119 = cast(%var_6329, dtype="bool") /* ty=Tensor[(6, 2, 4), bool] */;
    %120 = shape_of(%var_6328, dtype="int32") /* ty=Tensor[(3), int32] */;
    %121 = cast(%var_6328, dtype="bool") /* ty=Tensor[(6, 2, 4), bool] */;
    %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%121, %122) /* ty=Tensor[(6, 2, 4), bool] */
  };
  %123(%var_6352, %var_6353) /* ty=Tensor[(6, 2, 4), bool] */
}

def @func_2195(%var_2193: Tensor[(1092), float64]) -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(364), uint64], Tensor[(1092), float64], Tensor[(1092), float64]) {
  %124 = @func_775() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %125 = cast(meta[relay.Constant][4] /* ty=Tensor[(364), uint64] */, dtype="uint64") /* ty=Tensor[(364), uint64] */;
  %126 = reshape(%125, newshape=[13, 7, 4]) /* ty=Tensor[(13, 7, 4), uint64] */;
  %127 = @func_464(%126) /* ty=(Tensor[(13, 7, 4), uint64], Tensor[(12, 3, 11), float32], Tensor[(396), float32]) */;
  %128 = cast(%var_2193, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %129 = reshape(%128, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %130 = @func_804(%129) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(6, 13, 14), int8], Tensor[(1092), float64]) */;
  %131 = @func_2094() /* ty=Tensor[(12, 3, 11), float32] */;
  %132 = %124.1;
  %133 = %127.1;
  %134 = %130.2;
  (%131, %132, %133, meta[relay.Constant][4] /* ty=Tensor[(364), uint64] */, %134, %var_2193)
}

def @func_4505() -> (Tensor[(5, 10, 9), float64], Tensor[(12, 3, 11), float32]) {
  @func_4503() /* ty=(Tensor[(5, 10, 9), float64], Tensor[(12, 3, 11), float32]) */
}

def @func_1921() -> (Tensor[(12, 3, 11), float32],) {
  %136 = fn () -> (Tensor[(12, 3, 11), float32],) {
    %135 = @func_536() /* ty=Tensor[(12, 3, 11), float32] */;
    (%135,)
  };
  %136() /* ty=(Tensor[(12, 3, 11), float32],) */
}

def @func_3062() -> (Tensor[(11, 4, 13), float64],) {
  %137 = @func_1584() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(11, 4, 13), float64], Tensor[(572), float64], Tensor[(12, 3, 11), float32]) */;
  %138 = %137.1;
  (%138,)
}

def @func_5287() -> Tensor[(572), float64] {
  %140 = fn () -> Tensor[(572), float64] {
    %139 = @func_1584() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(11, 4, 13), float64], Tensor[(572), float64], Tensor[(12, 3, 11), float32]) */;
    %139.2
  };
  %140() /* ty=Tensor[(572), float64] */
}

def @func_7726() -> Tensor[(12, 3, 11), float32] {
  %141 = @func_6141() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(11, 4, 13), float64]) */;
  %141.0
}

def @func_9660() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(5, 3, 5), float32], Tensor[(5, 15), float32]) {
  %142 = @func_6470() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %143 = @func_3645() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), bool]) */;
  %144 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 15), float32] */, dtype="float32") /* ty=Tensor[(5, 15), float32] */;
  %145 = reshape(%144, newshape=[5, 3, 5]) /* ty=Tensor[(5, 3, 5), float32] */;
  %146 = %142.1;
  %147 = %143.1;
  %148 = @func_1995(%145) /* ty=Tensor[(5, 3, 5), float32] */;
  (%146, %147, %148, meta[relay.Constant][5] /* ty=Tensor[(5, 15), float32] */)
}

def @func_10460() -> Tensor[(176), float64] {
  %150 = fn () -> Tensor[(176), float64] {
    %149 = @func_7936() /* ty=(Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32], Tensor[(176), float64], Tensor[(1092), uint64], Tensor[(396), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), int8]) */;
    %149.2
  };
  %150() /* ty=Tensor[(176), float64] */
}

def @func_3031() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float64]) {
  %151 = @func_1836() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %152 = @func_1920() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %153 = @func_2911() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %154 = %153.0;
  %155 = cast(%154, dtype="float64") /* ty=Tensor[(12, 3, 11), float64] */;
  %156 = %151.0;
  %157 = %152.0;
  %158 = tan(%155) /* ty=Tensor[(12, 3, 11), float64] */;
  (%156, %157, %158)
}

def @func_6873() -> (Tensor[(12, 3, 11), float32],) {
  %159 = @func_1334() /* ty=(Tensor[(2, 13, 2), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %160 = %159.1;
  (%160,)
}

def @func_6490() -> Tensor[(12, 3, 11), float32] {
  %161 = fn () -> Tensor[(12, 3, 11), float32] {
    @func_2973() /* ty=Tensor[(12, 3, 11), float32] */
  };
  %161() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_6775() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %162 = @func_2911() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %163 = %162.0;
  %164 = @func_1410() /* ty=Tensor[(12, 3, 11), float32] */;
  (%163, %164)
}

def @func_7237() -> Tensor[(12, 3, 11), float32] {
  %166 = fn () -> Tensor[(12, 3, 11), float32] {
    %165 = @func_2368() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
    %165.1
  };
  %166() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_9269() -> Tensor[(12, 3, 11), float32] {
  @func_1410() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_7016(%var_7014: Tensor[(1092), float64], %var_7015: Tensor[(1, 780), float32]) -> (Tensor[(12, 3, 11), int8], Tensor[(12, 3, 11), bool], Tensor[(13, 9, 6), bool], Tensor[(1092), float64], Tensor[(12, 3, 11), float32], Tensor[(1, 780), float32]) {
  %181 = fn (%var_6985: Tensor[(1092), float64], %var_6997: Tensor[(1, 780), float32]) -> (Tensor[(12, 3, 11), int8], Tensor[(12, 3, 11), bool], Tensor[(13, 9, 6), bool], Tensor[(1092), float64], Tensor[(12, 3, 11), float32], Tensor[(1, 780), float32]) {
    %167 = @func_5873() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), int8]) */;
    %168 = @func_3645() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), bool]) */;
    %169 = cast(%var_6985, dtype="float64") /* ty=Tensor[(1092), float64] */;
    %170 = reshape(%169, newshape=[6, 13, 14]) /* ty=Tensor[(6, 13, 14), float64] */;
    %171 = @func_670(%170) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(6, 13, 14), int8], Tensor[(12, 3, 11), float32], Tensor[(396), float64], Tensor[(12, 3, 11), float32]) */;
    %172 = cast(%var_6997, dtype="float32") /* ty=Tensor[(1, 780), float32] */;
    %173 = reshape(%172, newshape=[15, 13, 4]) /* ty=Tensor[(15, 13, 4), float32] */;
    %174 = @func_4981(%173) /* ty=(Tensor[(15, 13, 4), float32], Tensor[(12, 3, 11), float32]) */;
    %175 = cast(%var_6997, dtype="float32") /* ty=Tensor[(1, 780), float32] */;
    %176 = %167.1;
    %177 = %168.2;
    %178 = %171.0;
    %179 = %174.1;
    %180 = sinh(%175) /* ty=Tensor[(1, 780), float32] */;
    (%176, %177, %178, %var_6985, %179, %180)
  };
  %181(%var_7014, %var_7015) /* ty=(Tensor[(12, 3, 11), int8], Tensor[(12, 3, 11), bool], Tensor[(13, 9, 6), bool], Tensor[(1092), float64], Tensor[(12, 3, 11), float32], Tensor[(1, 780), float32]) */
}

def @func_1410() -> Tensor[(12, 3, 11), float32] {
  @func_536() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_4828() -> (Tensor[(12, 3, 11), float32],) {
  @func_4826() /* ty=(Tensor[(12, 3, 11), float32],) */
}

def @func_2712() -> (Tensor[(12, 3, 11), float32],) {
  %182 = @func_2402() /* ty=Tensor[(12, 3, 11), float64] */;
  %183 = cast(%182, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
  %184 = asin(%183) /* ty=Tensor[(12, 3, 11), float32] */;
  (%184,)
}

def @func_3369() -> Tensor[(12, 3, 11), float32] {
  %185 = @func_2273() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %185.0
}

def @func_8228(%var_8226: Tensor[(12, 9, 6), uint16], %var_8227: Tensor[(12, 9, 6), uint16]) -> Tensor[(12, 9, 6), uint16] {
  @func_8224(%var_8226, %var_8227) /* ty=Tensor[(12, 9, 6), uint16] */
}

def @func_11399(%var_11367: Tensor[(3, 7, 1), float64]) -> (Tensor[(3, 7, ?), bool], Tensor[(13), int32], int32, Tensor[(3, 7, 1), float64], Tensor[(12, 3, 11), float32], Tensor[(2, 88), float64]) {
  %186 = cast(%var_11367, dtype="float64") /* ty=Tensor[(3, 7, 1), float64] */;
  %187 = cos(%186) /* ty=Tensor[(3, 7, 1), float64] */;
  %188 = cast(%var_11367, dtype="bool") /* ty=Tensor[(3, 7, 1), bool] */;
  %189 = shape_of(%187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %190 = cast(%187, dtype="bool") /* ty=Tensor[(3, 7, 1), bool] */;
  %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %192 = cast(-5 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %193 = reshape(%192, newshape=[]) /* ty=int32 */;
  %194 = @func_5102(%193) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), uint16], Tensor[(1, 13), bool], int32, Tensor[(13), int32], Tensor[(12, 3, 11), float32]) */;
  %195 = cast(%var_11367, dtype="float64") /* ty=Tensor[(3, 7, 1), float64] */;
  %196 = cast(meta[relay.Constant][6] /* ty=Tensor[(2, 88), float64] */, dtype="float64") /* ty=Tensor[(2, 88), float64] */;
  %197 = reshape(%196, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %198 = @func_845(%197) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(176), float64]) */;
  %199 = less_equal(%190, %191) /* ty=Tensor[(3, 7, ?), bool] */;
  %200 = %194.4;
  %201 = sqrt(%195) /* ty=Tensor[(3, 7, 1), float64] */;
  %202 = %198.0;
  (%199, %200, -5 /* ty=int32 */, %201, %202, meta[relay.Constant][6] /* ty=Tensor[(2, 88), float64] */)
}

def @func_3888() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %206 = fn () -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
    %203 = @func_3750() /* ty=(Tensor[(12, 3, 11), float32],) */;
    %204 = %203.0;
    %205 = @func_2960() /* ty=Tensor[(12, 3, 11), float32] */;
    (%204, %205)
  };
  %206() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_9662() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(5, 3, 5), float32], Tensor[(5, 15), float32]) {
  @func_9660() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(5, 3, 5), float32], Tensor[(5, 15), float32]) */
}

def @func_9924(%var_9896: Tensor[(14, 6, 4), int32]) -> (Tensor[(14, 6, 4), bool], Tensor[(12, 3, 11), float32]) {
  %207 = cast(%var_9896, dtype="bool") /* ty=Tensor[(14, 6, 4), bool] */;
  %208 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(14, 6, 4), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(meta[relay.Constant][7] /* ty=Tensor[(14, 6, 4), int32] */, dtype="bool") /* ty=Tensor[(14, 6, 4), bool] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %211 = greater_equal(%209, %210) /* ty=Tensor[(14, 6, 4), bool] */;
  %212 = @func_2973() /* ty=Tensor[(12, 3, 11), float32] */;
  (%211, %212)
}

def @func_8801(%var_8799: Tensor[(5, 156), float32], %var_8800: Tensor[(864, 1), bool]) -> (Tensor[(208), uint8], Tensor[(12, 3, 11), float32], Tensor[(1092), float64], Tensor[(5, 156), float32], Tensor[(12, 3, 11), float32], Tensor[(864, 1), bool], Tensor[(4, 4, 11), float64], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  @func_8797(%var_8799, %var_8800) /* ty=(Tensor[(208), uint8], Tensor[(12, 3, 11), float32], Tensor[(1092), float64], Tensor[(5, 156), float32], Tensor[(12, 3, 11), float32], Tensor[(864, 1), bool], Tensor[(4, 4, 11), float64], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_7366() -> (Tensor[(12, 3, 11), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(14, 78), float64], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  @func_7364() /* ty=(Tensor[(12, 3, 11), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(14, 78), float64], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_232() -> Tensor[(12, 3, 11), float32] {
  %214 = fn () -> Tensor[(12, 3, 11), float32] {
    %213 = @func_142() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
    %213.2
  };
  %214() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_8199() -> Tensor[(12, 3, 11), float32] {
  %216 = fn () -> Tensor[(12, 3, 11), float32] {
    %215 = @func_7788() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
    %215.1
  };
  %216() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_3598() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %217 = @func_2911() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %218 = @func_2094() /* ty=Tensor[(12, 3, 11), float32] */;
  %219 = @func_2094() /* ty=Tensor[(12, 3, 11), float32] */;
  %220 = %217.0;
  (%218, %219, %220)
}

def @func_2198(%var_2196: Tensor[(1092), float64]) -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(364), uint64], Tensor[(1092), float64], Tensor[(1092), float64]) {
  @func_2195(%var_2196) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(364), uint64], Tensor[(1092), float64], Tensor[(1092), float64]) */
}

def @func_1412() -> Tensor[(12, 3, 11), float32] {
  @func_1410() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_1206() -> (Tensor[(2, 13, 2), float32], Tensor[(2, 13, 2), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  @func_1204() /* ty=(Tensor[(2, 13, 2), float32], Tensor[(2, 13, 2), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_807(%var_805: Tensor[(1092), float64]) -> (Tensor[(12, 3, 11), float32], Tensor[(6, 13, 14), int8], Tensor[(1092), float64]) {
  @func_804(%var_805) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(6, 13, 14), int8], Tensor[(1092), float64]) */
}

def @func_868(%var_860: Tensor[(5, 5, 4), float64]) -> (Tensor[(5, 5, 4), float64],) {
  %221 = cast(%var_860, dtype="float64") /* ty=Tensor[(5, 5, 4), float64] */;
  %222 = log10(%221) /* ty=Tensor[(5, 5, 4), float64] */;
  (%222,)
}

def @func_8980() -> (Tensor[(12, 3, 11), float32], Tensor[(6, 10, 14), float64], Tensor[(2, 420), float64]) {
  %228 = fn () -> (Tensor[(12, 3, 11), float32], Tensor[(6, 10, 14), float64], Tensor[(2, 420), float64]) {
    %223 = @func_5873() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), int8]) */;
    %224 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 420), float64] */, dtype="float64") /* ty=Tensor[(2, 420), float64] */;
    %225 = reshape(%224, newshape=[6, 10, 14]) /* ty=Tensor[(6, 10, 14), float64] */;
    %226 = %223.0;
    %227 = @func_5947(%225) /* ty=Tensor[(6, 10, 14), float64] */;
    (%226, %227, meta[relay.Constant][8] /* ty=Tensor[(2, 420), float64] */)
  };
  %228() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(6, 10, 14), float64], Tensor[(2, 420), float64]) */
}

def @func_2962() -> Tensor[(12, 3, 11), float32] {
  @func_2960() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_2446() -> Tensor[(13, 9, 6), bool] {
  %229 = @func_142() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
  %229.1
}

def @func_4965() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %230 = @func_2481() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %231 = %230.0;
  %232 = @func_337() /* ty=Tensor[(12, 3, 11), float32] */;
  (%231, %232)
}

def @func_7364() -> (Tensor[(12, 3, 11), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(14, 78), float64], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %233 = @func_5744() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), bool]) */;
  %234 = cast(meta[relay.Constant][9] /* ty=Tensor[(14, 78), float64] */, dtype="float64") /* ty=Tensor[(14, 78), float64] */;
  %235 = reshape(%234, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %236 = @func_6549(%235) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(1092), float64]) */;
  %237 = @func_4625() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(2, 13, 2), float32], Tensor[(12, 3, 11), float32]) */;
  %238 = @func_5996() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %239 = @func_1204() /* ty=(Tensor[(2, 13, 2), float32], Tensor[(2, 13, 2), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %240 = %233.1;
  %241 = @func_231() /* ty=Tensor[(12, 3, 11), float32] */;
  %242 = %236.1;
  %243 = %237.2;
  %244 = %238.0;
  %245 = %239.3;
  (%240, %241, %242, meta[relay.Constant][9] /* ty=Tensor[(14, 78), float64] */, %243, %244, %245)
}

def @func_6085() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %246 = @func_3887() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %247 = @func_5036() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %248 = @func_1386() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(364), uint64]) */;
  %249 = %246.0;
  %250 = %247.0;
  %251 = %248.0;
  (%249, %250, %251)
}

def @func_9950() -> (Tensor[(12, 3, 11), float32],) {
  %254 = fn () -> (Tensor[(12, 3, 11), float32],) {
    %252 = @func_6470() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
    %253 = %252.2;
    (%253,)
  };
  %254() /* ty=(Tensor[(12, 3, 11), float32],) */
}

def @func_9174(%var_9160: Tensor[(3, 7, 3), float64]) -> (Tensor[(3, 7, 3), bool], Tensor[(5, 3, 5), float32]) {
  %255 = cast(%var_9160, dtype="float64") /* ty=Tensor[(3, 7, 3), float64] */;
  %256 = asinh(%255) /* ty=Tensor[(3, 7, 3), float64] */;
  %257 = cast(%256, dtype="bool") /* ty=Tensor[(3, 7, 3), bool] */;
  %258 = shape_of(%var_9160, dtype="int32") /* ty=Tensor[(3), int32] */;
  %259 = cast(%var_9160, dtype="bool") /* ty=Tensor[(3, 7, 3), bool] */;
  %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %261 = @func_6449() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(5, 3, 5), float32], Tensor[(75), float32], Tensor[(12, 3, 11), float32]) */;
  %262 = less_equal(%259, %260) /* ty=Tensor[(3, 7, 3), bool] */;
  %263 = %261.1;
  (%262, %263)
}

def @func_1748(%var_1745: uint8, %var_1746: Tensor[(13, 16, 1), uint8], %var_1747: Tensor[(176), float64]) -> (Tensor[(13, 9, 6), bool], Tensor[(176), bool], Tensor[(13, 16, 176), bool]) {
  %281 = fn (%var_1697: uint8, %var_1698: Tensor[(13, 16, 1), uint8], %var_1730: Tensor[(176), float64]) -> (Tensor[(13, 9, 6), bool], Tensor[(176), bool], Tensor[(13, 16, 176), bool]) {
    %264 = cast(meta[relay.Constant][10] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
    %265 = cast(meta[relay.Constant][10] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
    %266 = reshape(%264, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
    %267 = reshape(%265, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
    %268 = @func_311(%266, %267) /* ty=(Tensor[(4, 4, 11), float64], Tensor[(13, 9, 6), bool], Tensor[(396), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) */;
    %269 = cast(%var_1730, dtype="bool") /* ty=Tensor[(176), bool] */;
    %270 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(176), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %271 = cast(meta[relay.Constant][10] /* ty=Tensor[(176), float64] */, dtype="bool") /* ty=Tensor[(176), bool] */;
    %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?), bool] */;
    %273 = cast(%var_1697, dtype="uint8") /* ty=uint8 */;
    %274 = cast(%var_1698, dtype="uint8") /* ty=Tensor[(13, 16, 1), uint8] */;
    %275 = bitwise_or(%273, %274) /* ty=Tensor[(13, 16, 1), uint8] */;
    %276 = cast(%275, dtype="bool") /* ty=Tensor[(13, 16, 1), bool] */;
    %277 = cast(meta[relay.Constant][10] /* ty=Tensor[(176), float64] */, dtype="bool") /* ty=Tensor[(176), bool] */;
    %278 = %268.1;
    %279 = not_equal(%271, %272) /* ty=Tensor[(176), bool] */;
    %280 = logical_or(%276, %277) /* ty=Tensor[(13, 16, 176), bool] */;
    (%278, %279, %280)
  };
  %281(%var_1745, %var_1746, %var_1747) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(176), bool], Tensor[(13, 16, 176), bool]) */
}

def @func_8352(%var_8350: Tensor[(1092), float64], %var_8351: Tensor[(15, 1092), float32]) -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(364), uint64], Tensor[(1092), float64], Tensor[(15, 1092), int32], Tensor[(15, 1092), float64]) {
  %297 = fn (%var_8300: Tensor[(1092), float64], %var_8326: Tensor[(15, 1092), float32]) -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(364), uint64], Tensor[(1092), float64], Tensor[(15, 1092), int32], Tensor[(15, 1092), float64]) {
    %282 = @func_4826() /* ty=(Tensor[(12, 3, 11), float32],) */;
    %283 = @func_6847() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 7, 4), uint64], Tensor[(364), uint64], Tensor[(13, 9, 6), bool], Tensor[(1092), float32]) */;
    %284 = cast(%var_8300, dtype="float64") /* ty=Tensor[(1092), float64] */;
    %285 = reshape(%284, newshape=[1, 1092]) /* ty=Tensor[(1, 1092), float64] */;
    %286 = @func_5250(%285) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(1, 1092), float32]) */;
    %287 = %286.2;
    %288 = cast(%287, dtype="int32") /* ty=Tensor[(1, 1092), int32] */;
    %289 = cast(%var_8326, dtype="int32") /* ty=Tensor[(15, 1092), int32] */;
    %290 = cast(%var_8326, dtype="float64") /* ty=Tensor[(15, 1092), float64] */;
    %291 = cast(%287, dtype="float64") /* ty=Tensor[(1, 1092), float64] */;
    %292 = %282.0;
    %293 = @func_1957() /* ty=Tensor[(12, 3, 11), float32] */;
    %294 = %283.5;
    %295 = bitwise_and(%288, %289) /* ty=Tensor[(15, 1092), int32] */;
    %296 = maximum(%290, %291) /* ty=Tensor[(15, 1092), float64] */;
    (%292, %293, %294, %var_8300, %295, %296)
  };
  %297(%var_8350, %var_8351) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(364), uint64], Tensor[(1092), float64], Tensor[(15, 1092), int32], Tensor[(15, 1092), float64]) */
}

def @func_1068(%var_1066: float64) -> (Tensor[(4, 15, 12), float64], Tensor[(7, 3, 1), float32], Tensor[(21), float32]) {
  @func_1065(%var_1066) /* ty=(Tensor[(4, 15, 12), float64], Tensor[(7, 3, 1), float32], Tensor[(21), float32]) */
}

def @func_7728() -> Tensor[(12, 3, 11), float32] {
  @func_7726() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_6186() -> Tensor[(5, 9, 8), float32] {
  %302 = fn () -> Tensor[(5, 9, 8), float32] {
    %298 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 9, 8), float32] */, dtype="float32") /* ty=Tensor[(5, 9, 8), float32] */;
    %299 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(5, 9, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %300 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 9, 8), float32] */, dtype="float32") /* ty=Tensor[(5, 9, 8), float32] */;
    %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_divide(%300, %301) /* ty=Tensor[(5, 9, 8), float32] */
  };
  %302() /* ty=Tensor[(5, 9, 8), float32] */
}

def @func_7938() -> (Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32], Tensor[(176), float64], Tensor[(1092), uint64], Tensor[(396), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), int8]) {
  @func_7936() /* ty=(Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32], Tensor[(176), float64], Tensor[(1092), uint64], Tensor[(396), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), int8]) */
}

def @func_1818() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(14, 78), float64]) {
  %312 = fn () -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(14, 78), float64]) {
    %303 = @func_1664() /* ty=(Tensor[(12, 3, 11), bool], Tensor[(12, 3, 11), float32]) */;
    %304 = %303.1;
    %305 = cast(%304, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
    %306 = cast(meta[relay.Constant][13] /* ty=Tensor[(14, 78), float64] */, dtype="float64") /* ty=Tensor[(14, 78), float64] */;
    %307 = reshape(%306, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
    %308 = @func_804(%307) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(6, 13, 14), int8], Tensor[(1092), float64]) */;
    %309 = log10(%305) /* ty=Tensor[(12, 3, 11), float32] */;
    %310 = @func_337() /* ty=Tensor[(12, 3, 11), float32] */;
    %311 = %308.0;
    (%309, %310, %311, meta[relay.Constant][13] /* ty=Tensor[(14, 78), float64] */)
  };
  %312() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(14, 78), float64]) */
}

def @func_2960() -> Tensor[(12, 3, 11), float32] {
  %313 = @func_2481() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %313.0
}

def @func_7406() -> Tensor[(12, 3, 11), float32] {
  %314 = @func_2481() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %314.0
}

def @func_11279() -> (Tensor[(12, 3, 11), float32],) {
  %315 = @func_9630() /* ty=Tensor[(12, 3, 11), float32] */;
  (%315,)
}

def @func_10060() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  @func_10058() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_5187() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %320 = fn () -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
    %316 = @func_4826() /* ty=(Tensor[(12, 3, 11), float32],) */;
    %317 = @func_2712() /* ty=(Tensor[(12, 3, 11), float32],) */;
    %318 = %316.0;
    %319 = %317.0;
    (%318, %319)
  };
  %320() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_6934(%var_6932: Tensor[(13, 15, 1), float32]) -> (Tensor[(13, 15, 1), float32],) {
  @func_6931(%var_6932) /* ty=(Tensor[(13, 15, 1), float32],) */
}

def @func_10839() -> (Tensor[(13, 9, 6), bool], Tensor[(140), uint8], Tensor[(1092), float64], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(9, 16, 1), bool], Tensor[(144), uint64], Tensor[(12, 3, 11), float32], Tensor[(7, 3, 1), float32], Tensor[(1092), float64]) {
  %321 = @func_7098() /* ty=(Tensor[(13, 9, 6), bool],) */;
  %322 = cast(meta[relay.Constant][14] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %323 = reshape(%322, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %324 = @func_9598(%323) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(4, 7, 5), float32], Tensor[(140), uint8], Tensor[(12, 3, 11), float32], Tensor[(9, 11, 5), int64], Tensor[(495), int64], Tensor[(7, 3, 1), float32], Tensor[(21), float32], Tensor[(12, 3, 11), float32], Tensor[(1092), float64], Tensor[(1092), float64], Tensor[(780), float32], Tensor[(5, 12, 4), int8], Tensor[(12, 3, 11), float32], Tensor[(5, 10, 9), float64]) */;
  %325 = @func_5744() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), bool]) */;
  %326 = cast(meta[relay.Constant][15] /* ty=Tensor[(144), uint64] */, dtype="uint64") /* ty=Tensor[(144), uint64] */;
  %327 = reshape(%326, newshape=[9, 16, 1]) /* ty=Tensor[(9, 16, 1), uint64] */;
  %328 = @func_2712() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %329 = @func_10314() /* ty=(Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32], Tensor[(7, 3, 1), float32], Tensor[(21), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), bool]) */;
  %330 = cast(meta[relay.Constant][14] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %331 = reshape(%330, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %332 = @func_804(%331) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(6, 13, 14), int8], Tensor[(1092), float64]) */;
  %333 = %321.0;
  %334 = %324.3;
  %335 = %325.0;
  %336 = @func_536() /* ty=Tensor[(12, 3, 11), float32] */;
  %337 = @func_4908(%327) /* ty=Tensor[(9, 16, 1), bool] */;
  %338 = %328.0;
  %339 = %329.2;
  %340 = %332.2;
  (%333, %334, meta[relay.Constant][14] /* ty=Tensor[(1092), float64] */, %335, %336, %337, meta[relay.Constant][15] /* ty=Tensor[(144), uint64] */, %338, %339, %340)
}

def @func_10502(%var_10472: Tensor[(13, 13, 14), float64]) -> (Tensor[(13, 13, 14), int16],) {
  %341 = cast(%var_10472, dtype="float64") /* ty=Tensor[(13, 13, 14), float64] */;
  %342 = asin(%341) /* ty=Tensor[(13, 13, 14), float64] */;
  %343 = cast(%var_10472, dtype="int16") /* ty=Tensor[(13, 13, 14), int16] */;
  %344 = shape_of(%342, dtype="int32") /* ty=Tensor[(3), int32] */;
  %345 = cast(%342, dtype="int16") /* ty=Tensor[(13, 13, 14), int16] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %347 = minimum(%345, %346) /* ty=Tensor[(13, 13, 14), int16] */;
  (%347,)
}

def @func_6875() -> (Tensor[(12, 3, 11), float32],) {
  @func_6873() /* ty=(Tensor[(12, 3, 11), float32],) */
}

def @func_3750() -> (Tensor[(12, 3, 11), float32],) {
  %348 = @func_775() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %349 = %348.0;
  (%349,)
}

def @func_5252(%var_5251: Tensor[(1, 1092), float64]) -> (Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(1, 1092), float32]) {
  %358 = fn (%var_5228: Tensor[(1, 1092), float64]) -> (Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(1, 1092), float32]) {
    %350 = @func_2911() /* ty=(Tensor[(12, 3, 11), float32],) */;
    %351 = cast(%var_5228, dtype="float64") /* ty=Tensor[(1, 1092), float64] */;
    %352 = reshape(%351, newshape=[6, 13, 14]) /* ty=Tensor[(6, 13, 14), float64] */;
    %353 = @func_670(%352) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(6, 13, 14), int8], Tensor[(12, 3, 11), float32], Tensor[(396), float64], Tensor[(12, 3, 11), float32]) */;
    %354 = cast(%var_5228, dtype="float32") /* ty=Tensor[(1, 1092), float32] */;
    %355 = %350.0;
    %356 = %353.0;
    %357 = atanh(%354) /* ty=Tensor[(1, 1092), float32] */;
    (%355, %356, %357)
  };
  %358(%var_5251) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(1, 1092), float32]) */
}

def @func_6451() -> (Tensor[(12, 3, 11), float32], Tensor[(5, 3, 5), float32], Tensor[(75), float32], Tensor[(12, 3, 11), float32]) {
  @func_6449() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(5, 3, 5), float32], Tensor[(75), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_3813(%var_3811: Tensor[(10, 5, 1), int8], %var_3812: Tensor[(10, 5, 3), int8]) -> (Tensor[(10, 5, 3), bool], Tensor[(12, 3, 11), float32]) {
  @func_3809(%var_3811, %var_3812) /* ty=(Tensor[(10, 5, 3), bool], Tensor[(12, 3, 11), float32]) */
}

def @func_5123(%var_5107: Tensor[(12, 12, 6), bool]) -> (Tensor[(12, 12, 6), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %359 = cast(%var_5107, dtype="bool") /* ty=Tensor[(12, 12, 6), bool] */;
  %360 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(12, 12, 6), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %361 = cast(meta[relay.Constant][16] /* ty=Tensor[(12, 12, 6), bool] */, dtype="bool") /* ty=Tensor[(12, 12, 6), bool] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %363 = @func_4625() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(2, 13, 2), float32], Tensor[(12, 3, 11), float32]) */;
  %364 = logical_and(%361, %362) /* ty=Tensor[(12, 12, 6), bool] */;
  %365 = %363.0;
  %366 = @func_231() /* ty=Tensor[(12, 3, 11), float32] */;
  (%364, %365, %366)
}

def @func_404() -> Tensor[(12, 3, 11), float32] {
  @func_337() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_2973() -> Tensor[(12, 3, 11), float32] {
  %367 = @func_2712() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %367.0
}

def @func_9373() -> Tensor[(12, 3, 11), float32] {
  @func_9371() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_9631() -> Tensor[(12, 3, 11), float32] {
  %369 = fn () -> Tensor[(12, 3, 11), float32] {
    %368 = @func_2368() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
    %368.0
  };
  %369() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_10211(%var_10198: Tensor[(11, 4, 13), float64]) -> (Tensor[(12, 3, 11), float32], Tensor[(11, 4, 13), bool]) {
  %370 = @func_5841() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %371 = @func_3062() /* ty=(Tensor[(11, 4, 13), float64],) */;
  %372 = %371.0;
  %373 = cast(%var_10198, dtype="bool") /* ty=Tensor[(11, 4, 13), bool] */;
  %374 = shape_of(%372, dtype="int32") /* ty=Tensor[(3), int32] */;
  %375 = cast(%372, dtype="bool") /* ty=Tensor[(11, 4, 13), bool] */;
  %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %377 = %370.3;
  %378 = greater(%375, %376) /* ty=Tensor[(11, 4, 13), bool] */;
  (%377, %378)
}

def @func_10111() -> Tensor[(12, 3, 11), float32] {
  @func_10109() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_8471() -> Tensor[(13, 9, 6), bool] {
  %379 = fn () -> Tensor[(13, 9, 6), bool] {
    @func_7046() /* ty=Tensor[(13, 9, 6), bool] */
  };
  %379() /* ty=Tensor[(13, 9, 6), bool] */
}

def @func_7981() -> Tensor[(12, 3, 11), float32] {
  @func_7979() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_3646() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), bool]) {
  %386 = fn () -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), bool]) {
    %380 = @func_775() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
    %381 = @func_536() /* ty=Tensor[(12, 3, 11), float32] */;
    %382 = cast(%381, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
    %383 = reshape(%382, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
    %384 = %380.2;
    %385 = @func_3114(%383) /* ty=Tensor[(12, 3, 11), bool] */;
    (%381, %384, %385)
  };
  %386() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), bool]) */
}

def @func_9933() -> Tensor[(12, 3, 11), float32] {
  @func_9931() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_3236(%var_3162: Tensor[(8, 1, 5), uint64], %var_3163: Tensor[(8, 15, 5), uint64], %var_3184: Tensor[(8, 15, 5), uint64]) -> (Tensor[(8, 15, 5), uint64], Tensor[(8, 15, 5), float32], Tensor[(8, 15, 5), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %387 = cast(%var_3162, dtype="uint64") /* ty=Tensor[(8, 1, 5), uint64] */;
  %388 = cast(%var_3163, dtype="uint64") /* ty=Tensor[(8, 15, 5), uint64] */;
  %389 = cast(%var_3162, dtype="float32") /* ty=Tensor[(8, 1, 5), float32] */;
  %390 = cast(%var_3163, dtype="float32") /* ty=Tensor[(8, 15, 5), float32] */;
  %391 = cast(%var_3184, dtype="bool") /* ty=Tensor[(8, 15, 5), bool] */;
  %392 = shape_of(%var_3163, dtype="int32") /* ty=Tensor[(3), int32] */;
  %393 = cast(%var_3163, dtype="bool") /* ty=Tensor[(8, 15, 5), bool] */;
  %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %395 = @func_775() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %396 = @func_2911() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %397 = bitwise_xor(%387, %388) /* ty=Tensor[(8, 15, 5), uint64] */;
  %398 = floor_divide(%389, %390) /* ty=Tensor[(8, 15, 5), float32] */;
  %399 = greater_equal(%393, %394) /* ty=Tensor[(8, 15, 5), bool] */;
  %400 = %395.1;
  %401 = %396.0;
  (%397, %398, %399, %400, %401)
}

def @func_804(%var_799: Tensor[(1092), float64]) -> (Tensor[(12, 3, 11), float32], Tensor[(6, 13, 14), int8], Tensor[(1092), float64]) {
  %402 = cast(%var_799, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %403 = reshape(%402, newshape=[6, 13, 14]) /* ty=Tensor[(6, 13, 14), float64] */;
  %404 = @func_670(%403) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(6, 13, 14), int8], Tensor[(12, 3, 11), float32], Tensor[(396), float64], Tensor[(12, 3, 11), float32]) */;
  %405 = @func_404() /* ty=Tensor[(12, 3, 11), float32] */;
  %406 = %404.1;
  (%405, %406, %var_799)
}

def @func_5335() -> (Tensor[(12, 3, 11), float32],) {
  @func_5333() /* ty=(Tensor[(12, 3, 11), float32],) */
}

def @func_9927(%var_9925: Tensor[(14, 6, 4), int32]) -> (Tensor[(14, 6, 4), bool], Tensor[(12, 3, 11), float32]) {
  @func_9924(%var_9925) /* ty=(Tensor[(14, 6, 4), bool], Tensor[(12, 3, 11), float32]) */
}

def @func_2404() -> Tensor[(12, 3, 11), float64] {
  @func_2402() /* ty=Tensor[(12, 3, 11), float64] */
}

def @func_2714() -> (Tensor[(12, 3, 11), float32],) {
  @func_2712() /* ty=(Tensor[(12, 3, 11), float32],) */
}

def @func_10328(%var_10327: Tensor[(14, 1, 12), float64]) -> (Tensor[(14, 1, 12), float64],) {
  %409 = fn (%var_10316: Tensor[(14, 1, 12), float64]) -> (Tensor[(14, 1, 12), float64],) {
    %407 = cast(%var_10316, dtype="float64") /* ty=Tensor[(14, 1, 12), float64] */;
    %408 = sigmoid(%407) /* ty=Tensor[(14, 1, 12), float64] */;
    (%408,)
  };
  %409(%var_10327) /* ty=(Tensor[(14, 1, 12), float64],) */
}

def @func_3489(%var_3430: Tensor[(12, 3, 11), float32], %var_3456: Tensor[(364), uint64]) -> (Tensor[(12, 3, 11), uint16], Tensor[(12, 3, 11), float32], Tensor[(364), uint32]) {
  %410 = @func_974() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %411 = %410.0;
  %412 = cast(%var_3430, dtype="uint16") /* ty=Tensor[(12, 3, 11), uint16] */;
  %413 = shape_of(%411, dtype="int32") /* ty=Tensor[(3), int32] */;
  %414 = cast(%411, dtype="uint16") /* ty=Tensor[(12, 3, 11), uint16] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %416 = cast(%var_3456, dtype="uint64") /* ty=Tensor[(364), uint64] */;
  %417 = reshape(%416, newshape=[13, 7, 4]) /* ty=Tensor[(13, 7, 4), uint64] */;
  %418 = @func_464(%417) /* ty=(Tensor[(13, 7, 4), uint64], Tensor[(12, 3, 11), float32], Tensor[(396), float32]) */;
  %419 = cast(meta[relay.Constant][17] /* ty=Tensor[(364), uint64] */, dtype="uint32") /* ty=Tensor[(364), uint32] */;
  %420 = shape_of(%var_3456, dtype="int32") /* ty=Tensor[(1), int32] */;
  %421 = cast(%var_3456, dtype="uint32") /* ty=Tensor[(364), uint32] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %423 = right_shift(%414, %415) /* ty=Tensor[(12, 3, 11), uint16] */;
  %424 = %418.1;
  %425 = add(%421, %422) /* ty=Tensor[(364), uint32] */;
  (%423, %424, %425)
}

def @func_3570() -> Tensor[(12, 3, 11), float32] {
  @func_3568() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_1204() -> (Tensor[(2, 13, 2), float32], Tensor[(2, 13, 2), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %426 = cast(meta[relay.Constant][19] /* ty=Tensor[(2, 13, 2), int16] */, dtype="int16") /* ty=Tensor[(2, 13, 2), int16] */;
  %427 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(2, 13, 2), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %428 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 13, 2), int16] */, dtype="int16") /* ty=Tensor[(2, 13, 2), int16] */;
  %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %430 = add(%428, %429) /* ty=Tensor[(2, 13, 2), int16] */;
  %431 = cast(%430, dtype="uint32") /* ty=Tensor[(2, 13, 2), uint32] */;
  %432 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(2, 13, 2), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %433 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 13, 2), int16] */, dtype="uint32") /* ty=Tensor[(2, 13, 2), uint32] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %435 = bitwise_or(%433, %434) /* ty=Tensor[(2, 13, 2), uint32] */;
  %436 = cast(%435, dtype="float32") /* ty=Tensor[(2, 13, 2), float32] */;
  %437 = shape_of(%430, dtype="int32") /* ty=Tensor[(3), int32] */;
  %438 = cast(%430, dtype="float32") /* ty=Tensor[(2, 13, 2), float32] */;
  %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %440 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 13, 2), int16] */, dtype="float64") /* ty=Tensor[(2, 13, 2), float64] */;
  %441 = sigmoid(%440) /* ty=Tensor[(2, 13, 2), float64] */;
  %442 = cast(%435, dtype="bool") /* ty=Tensor[(2, 13, 2), bool] */;
  %443 = shape_of(%441, dtype="int32") /* ty=Tensor[(3), int32] */;
  %444 = cast(%441, dtype="bool") /* ty=Tensor[(2, 13, 2), bool] */;
  %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %446 = @func_536() /* ty=Tensor[(12, 3, 11), float32] */;
  %447 = cast(%446, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
  %448 = minimum(%438, %439) /* ty=Tensor[(2, 13, 2), float32] */;
  %449 = equal(%444, %445) /* ty=Tensor[(2, 13, 2), bool] */;
  %450 = log(%447) /* ty=Tensor[(12, 3, 11), float32] */;
  %451 = @func_231() /* ty=Tensor[(12, 3, 11), float32] */;
  (%448, %449, %450, %451)
}

def @func_406() -> Tensor[(12, 3, 11), float32] {
  @func_404() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_8891(%var_8888: Tensor[(112), float32], %var_8889: int32, %var_8890: Tensor[(1, 13), int32]) -> (Tensor[(11, 4, 13), float64], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(7, 2, 8), uint32], Tensor[(112), float32], Tensor[(1, 13), bool], int32, Tensor[(1, 13), int32]) {
  %466 = fn (%var_8846: Tensor[(112), float32], %var_8883: int32, %var_8884: Tensor[(1, 13), int32]) -> (Tensor[(11, 4, 13), float64], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(7, 2, 8), uint32], Tensor[(112), float32], Tensor[(1, 13), bool], int32, Tensor[(1, 13), int32]) {
    %452 = @func_3062() /* ty=(Tensor[(11, 4, 13), float64],) */;
    %453 = @func_7788() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
    %454 = cast(%var_8846, dtype="float32") /* ty=Tensor[(112), float32] */;
    %455 = reshape(%454, newshape=[7, 2, 8]) /* ty=Tensor[(7, 2, 8), float32] */;
    %456 = cast(%var_8883, dtype="int32") /* ty=int32 */;
    %457 = cast(%var_8884, dtype="int32") /* ty=Tensor[(1, 13), int32] */;
    %458 = reshape(%456, newshape=[]) /* ty=int32 */;
    %459 = reshape(%457, newshape=[1, 13]) /* ty=Tensor[(1, 13), int32] */;
    %460 = @func_2299(%458, %459) /* ty=(Tensor[(1, 13), bool],) */;
    %461 = %452.0;
    %462 = @func_2960() /* ty=Tensor[(12, 3, 11), float32] */;
    %463 = %453.0;
    %464 = @func_6518(%455) /* ty=Tensor[(7, 2, 8), uint32] */;
    %465 = %460.0;
    (%461, %462, %463, %464, %var_8846, %465, %var_8883, %var_8884)
  };
  %466(%var_8888, %var_8889, %var_8890) /* ty=(Tensor[(11, 4, 13), float64], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(7, 2, 8), uint32], Tensor[(112), float32], Tensor[(1, 13), bool], int32, Tensor[(1, 13), int32]) */
}

def @func_7099() -> (Tensor[(13, 9, 6), bool],) {
  %469 = fn () -> (Tensor[(13, 9, 6), bool],) {
    %467 = @func_142() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
    %468 = %467.1;
    (%468,)
  };
  %469() /* ty=(Tensor[(13, 9, 6), bool],) */
}

def @func_9447() -> (Tensor[(12, 3, 11), float32],) {
  %472 = fn () -> (Tensor[(12, 3, 11), float32],) {
    %470 = @func_7649() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
    %471 = %470.1;
    (%471,)
  };
  %472() /* ty=(Tensor[(12, 3, 11), float32],) */
}

def @func_3989() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), uint16]) {
  %478 = fn () -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), uint16]) {
    %473 = @func_2459() /* ty=(Tensor[(12, 3, 11), float32],) */;
    %474 = %473.0;
    %475 = cast(%474, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
    %476 = reshape(%475, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
    %477 = @func_1266(%476) /* ty=Tensor[(12, 3, 11), uint16] */;
    (%474, %477)
  };
  %478() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), uint16]) */
}

def @func_5126(%var_5124: Tensor[(12, 12, 6), bool]) -> (Tensor[(12, 12, 6), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  @func_5123(%var_5124) /* ty=(Tensor[(12, 12, 6), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_6383() -> (Tensor[(12, 3, 11), float32],) {
  @func_6381() /* ty=(Tensor[(12, 3, 11), float32],) */
}

def @func_4503() -> (Tensor[(5, 10, 9), float64], Tensor[(12, 3, 11), float32]) {
  %479 = cast(meta[relay.Constant][20] /* ty=Tensor[(5, 10, 9), float64] */, dtype="float64") /* ty=Tensor[(5, 10, 9), float64] */;
  %480 = asinh(%479) /* ty=Tensor[(5, 10, 9), float64] */;
  %481 = @func_2973() /* ty=Tensor[(12, 3, 11), float32] */;
  (%480, %481)
}

def @func_5746() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), bool]) {
  @func_5744() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), bool]) */
}

def @func_9601(%var_9599: Tensor[(1092), float64]) -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(4, 7, 5), float32], Tensor[(140), uint8], Tensor[(12, 3, 11), float32], Tensor[(9, 11, 5), int64], Tensor[(495), int64], Tensor[(7, 3, 1), float32], Tensor[(21), float32], Tensor[(12, 3, 11), float32], Tensor[(1092), float64], Tensor[(1092), float64], Tensor[(780), float32], Tensor[(5, 12, 4), int8], Tensor[(12, 3, 11), float32], Tensor[(5, 10, 9), float64]) {
  @func_9598(%var_9599) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(4, 7, 5), float32], Tensor[(140), uint8], Tensor[(12, 3, 11), float32], Tensor[(9, 11, 5), int64], Tensor[(495), int64], Tensor[(7, 3, 1), float32], Tensor[(21), float32], Tensor[(12, 3, 11), float32], Tensor[(1092), float64], Tensor[(1092), float64], Tensor[(780), float32], Tensor[(5, 12, 4), int8], Tensor[(12, 3, 11), float32], Tensor[(5, 10, 9), float64]) */
}

def @func_8432() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %486 = fn () -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
    %482 = @func_3598() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
    %483 = @func_5036() /* ty=(Tensor[(12, 3, 11), float32],) */;
    %484 = %482.2;
    %485 = %483.0;
    (%484, %485)
  };
  %486() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_10868() -> (Tensor[(13, 9, 6), bool],) {
  %487 = @func_8470() /* ty=Tensor[(13, 9, 6), bool] */;
  (%487,)
}

def @func_464(%var_442: Tensor[(13, 7, 4), uint64]) -> (Tensor[(13, 7, 4), uint64], Tensor[(12, 3, 11), float32], Tensor[(396), float32]) {
  %488 = cast(%var_442, dtype="uint64") /* ty=Tensor[(13, 7, 4), uint64] */;
  %489 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(13, 7, 4), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %490 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 7, 4), uint64] */, dtype="uint64") /* ty=Tensor[(13, 7, 4), uint64] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %492 = cast(meta[relay.Constant][22] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
  %493 = reshape(%492, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
  %494 = @func_67(%493) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
  %495 = bitwise_and(%490, %491) /* ty=Tensor[(13, 7, 4), uint64] */;
  %496 = %494.1;
  (%495, %496, meta[relay.Constant][22] /* ty=Tensor[(396), float32] */)
}

def @func_2483() -> (Tensor[(12, 3, 11), float32],) {
  @func_2481() /* ty=(Tensor[(12, 3, 11), float32],) */
}

def @func_1336() -> (Tensor[(2, 13, 2), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  @func_1334() /* ty=(Tensor[(2, 13, 2), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_670(%var_641: Tensor[(6, 13, 14), float64]) -> (Tensor[(13, 9, 6), bool], Tensor[(6, 13, 14), int8], Tensor[(12, 3, 11), float32], Tensor[(396), float64], Tensor[(12, 3, 11), float32]) {
  %497 = cast(meta[relay.Constant][23] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
  %498 = reshape(%497, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
  %499 = @func_67(%498) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
  %500 = cast(meta[relay.Constant][24] /* ty=Tensor[(6, 13, 14), float64] */, dtype="float64") /* ty=Tensor[(6, 13, 14), float64] */;
  %501 = asinh(%500) /* ty=Tensor[(6, 13, 14), float64] */;
  %502 = cast(%var_641, dtype="int8") /* ty=Tensor[(6, 13, 14), int8] */;
  %503 = shape_of(%501, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(%501, dtype="int8") /* ty=Tensor[(6, 13, 14), int8] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %506 = cast(meta[relay.Constant][23] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
  %507 = reshape(%506, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
  %508 = @func_67(%507) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
  %509 = cast(meta[relay.Constant][23] /* ty=Tensor[(396), float32] */, dtype="float64") /* ty=Tensor[(396), float64] */;
  %510 = %508.1;
  %511 = cast(%510, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
  %512 = reshape(%511, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
  %513 = @func_67(%512) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
  %514 = %499.0;
  %515 = logical_xor(%504, %505) /* ty=Tensor[(6, 13, 14), int8] */;
  %516 = atan(%509) /* ty=Tensor[(396), float64] */;
  %517 = %513.1;
  (%514, %515, %510, %516, %517)
}

def @func_4826() -> (Tensor[(12, 3, 11), float32],) {
  %518 = @func_4260() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %519 = %518.0;
  (%519,)
}

def @func_673(%var_671: Tensor[(6, 13, 14), float64]) -> (Tensor[(13, 9, 6), bool], Tensor[(6, 13, 14), int8], Tensor[(12, 3, 11), float32], Tensor[(396), float64], Tensor[(12, 3, 11), float32]) {
  @func_670(%var_671) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(6, 13, 14), int8], Tensor[(12, 3, 11), float32], Tensor[(396), float64], Tensor[(12, 3, 11), float32]) */
}

def @func_1997(%var_1996: Tensor[(5, 3, 5), float32]) -> Tensor[(5, 3, 5), float32] {
  %521 = fn (%var_1986: Tensor[(5, 3, 5), float32]) -> Tensor[(5, 3, 5), float32] {
    %520 = cast(%var_1986, dtype="float32") /* ty=Tensor[(5, 3, 5), float32] */;
    log10(%520) /* ty=Tensor[(5, 3, 5), float32] */
  };
  %521(%var_1996) /* ty=Tensor[(5, 3, 5), float32] */
}

def @func_8513() -> (Tensor[(12, 3, 11), float32],) {
  %524 = fn () -> (Tensor[(12, 3, 11), float32],) {
    %522 = @func_1836() /* ty=(Tensor[(12, 3, 11), float32],) */;
    %523 = %522.0;
    (%523,)
  };
  %524() /* ty=(Tensor[(12, 3, 11), float32],) */
}

def @func_6143() -> (Tensor[(12, 3, 11), float32], Tensor[(11, 4, 13), float64]) {
  @func_6141() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(11, 4, 13), float64]) */
}

def @func_11402(%var_11400: Tensor[(3, 7, 1), float64]) -> (Tensor[(3, 7, ?), bool], Tensor[(13), int32], int32, Tensor[(3, 7, 1), float64], Tensor[(12, 3, 11), float32], Tensor[(2, 88), float64]) {
  @func_11399(%var_11400) /* ty=(Tensor[(3, 7, ?), bool], Tensor[(13), int32], int32, Tensor[(3, 7, 1), float64], Tensor[(12, 3, 11), float32], Tensor[(2, 88), float64]) */
}

def @func_3752() -> (Tensor[(12, 3, 11), float32],) {
  @func_3750() /* ty=(Tensor[(12, 3, 11), float32],) */
}

def @func_10709() -> (Tensor[(12, 3, 11), float32],) {
  %526 = fn () -> (Tensor[(12, 3, 11), float32],) {
    %525 = @func_8198() /* ty=Tensor[(12, 3, 11), float32] */;
    (%525,)
  };
  %526() /* ty=(Tensor[(12, 3, 11), float32],) */
}

def @func_9271() -> Tensor[(12, 3, 11), float32] {
  @func_9269() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_69(%var_68: Tensor[(12, 3, 11), float32]) -> (Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) {
  %539 = fn (%var_62: Tensor[(12, 3, 11), float32]) -> (Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) {
    %527 = cast(meta[relay.Constant][26] /* ty=Tensor[(13, 9, 6), float32] */, dtype="bool") /* ty=Tensor[(13, 9, 6), bool] */;
    %528 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(13, 9, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %529 = cast(meta[relay.Constant][25] /* ty=Tensor[(13, 9, 6), float32] */, dtype="bool") /* ty=Tensor[(13, 9, 6), bool] */;
    %530 = dyn.reshape(%527, %528, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %531 = @func_21() /* ty=(Tensor[(12, 3, 11), float32],) */;
    %532 = %531.0;
    %533 = cast(%var_62, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
    %534 = shape_of(%532, dtype="int32") /* ty=Tensor[(3), int32] */;
    %535 = cast(%532, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
    %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %537 = less_equal(%529, %530) /* ty=Tensor[(13, 9, 6), bool] */;
    %538 = mod(%535, %536) /* ty=Tensor[(12, 3, 11), float32] */;
    (%537, %538)
  };
  %539(%var_68) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */
}

def @func_3568() -> Tensor[(12, 3, 11), float32] {
  %540 = @func_775() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %540.1
}

def @func_5480() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %551 = fn () -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
    %541 = @func_252() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) */;
    %542 = %541.0;
    %543 = cast(%542, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
    %544 = reshape(%543, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
    %545 = @func_4129(%544) /* ty=(Tensor[(12, 3, 11), int8], Tensor[(12, 3, 11), float32], Tensor[(4, 4, 11), float64], Tensor[(176), float64]) */;
    %546 = @func_775() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
    %547 = @func_2094() /* ty=Tensor[(12, 3, 11), float32] */;
    %548 = %545.1;
    %549 = %546.0;
    %550 = @func_2094() /* ty=Tensor[(12, 3, 11), float32] */;
    (%542, %547, %548, %549, %550)
  };
  %551() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_9598(%var_9540: Tensor[(1092), float64]) -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(4, 7, 5), float32], Tensor[(140), uint8], Tensor[(12, 3, 11), float32], Tensor[(9, 11, 5), int64], Tensor[(495), int64], Tensor[(7, 3, 1), float32], Tensor[(21), float32], Tensor[(12, 3, 11), float32], Tensor[(1092), float64], Tensor[(1092), float64], Tensor[(780), float32], Tensor[(5, 12, 4), int8], Tensor[(12, 3, 11), float32], Tensor[(5, 10, 9), float64]) {
  %552 = @func_4625() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(2, 13, 2), float32], Tensor[(12, 3, 11), float32]) */;
  %553 = @func_8251() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %554 = cast(meta[relay.Constant][27] /* ty=Tensor[(140), uint8] */, dtype="uint8") /* ty=Tensor[(140), uint8] */;
  %555 = reshape(%554, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), uint8] */;
  %556 = @func_2854(%555) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(1092), float64], Tensor[(4, 7, 5), float32]) */;
  %557 = @func_1204() /* ty=(Tensor[(2, 13, 2), float32], Tensor[(2, 13, 2), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %558 = cast(meta[relay.Constant][28] /* ty=Tensor[(495), int64] */, dtype="int64") /* ty=Tensor[(495), int64] */;
  %559 = cast(meta[relay.Constant][28] /* ty=Tensor[(495), int64] */, dtype="int64") /* ty=Tensor[(495), int64] */;
  %560 = reshape(%558, newshape=[9, 11, 5]) /* ty=Tensor[(9, 11, 5), int64] */;
  %561 = reshape(%559, newshape=[9, 11, 5]) /* ty=Tensor[(9, 11, 5), int64] */;
  %562 = @func_4741(%560, %561) /* ty=(Tensor[(9, 11, 5), int64], Tensor[(12, 3, 11), float32], Tensor[(9, 11, 5), int16]) */;
  %563 = cast(meta[relay.Constant][29] /* ty=Tensor[(21), float32] */, dtype="float32") /* ty=Tensor[(21), float32] */;
  %564 = reshape(%563, newshape=[7, 3, 1]) /* ty=Tensor[(7, 3, 1), float32] */;
  %565 = @func_936(%564) /* ty=(Tensor[(7, 3, 1), float32],) */;
  %566 = @func_1386() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(364), uint64]) */;
  %567 = cast(%var_9540, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %568 = cast(meta[relay.Constant][30] /* ty=Tensor[(780), float32] */, dtype="float32") /* ty=Tensor[(780), float32] */;
  %569 = reshape(%567, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %570 = reshape(%568, newshape=[1, 780]) /* ty=Tensor[(1, 780), float32] */;
  %571 = @func_7013(%569, %570) /* ty=(Tensor[(12, 3, 11), int8], Tensor[(12, 3, 11), bool], Tensor[(13, 9, 6), bool], Tensor[(1092), float64], Tensor[(12, 3, 11), float32], Tensor[(1, 780), float32]) */;
  %572 = cast(meta[relay.Constant][31] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %573 = reshape(%572, newshape=[5, 12, 4]) /* ty=Tensor[(5, 12, 4), float32] */;
  %574 = @func_7182(%573) /* ty=Tensor[(5, 12, 4), bool] */;
  %575 = cast(%574, dtype="float32") /* ty=Tensor[(5, 12, 4), float32] */;
  %576 = log(%575) /* ty=Tensor[(5, 12, 4), float32] */;
  %577 = cast(meta[relay.Constant][31] /* ty=Tensor[(240), float32] */, dtype="int8") /* ty=Tensor[(240), int8] */;
  %578 = shape_of(%576, dtype="int32") /* ty=Tensor[(3), int32] */;
  %579 = cast(%576, dtype="int8") /* ty=Tensor[(5, 12, 4), int8] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %581 = @func_8251() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %582 = @func_4503() /* ty=(Tensor[(5, 10, 9), float64], Tensor[(12, 3, 11), float32]) */;
  %583 = %552.2;
  %584 = %553.1;
  %585 = %556.2;
  %586 = %557.3;
  %587 = %562.0;
  %588 = %565.0;
  %589 = %566.1;
  %590 = %571.3;
  %591 = right_shift(%579, %580) /* ty=Tensor[(5, 12, 4), int8] */;
  %592 = %581.1;
  %593 = %582.0;
  (%583, %584, %585, meta[relay.Constant][27] /* ty=Tensor[(140), uint8] */, %586, %587, meta[relay.Constant][28] /* ty=Tensor[(495), int64] */, %588, meta[relay.Constant][29] /* ty=Tensor[(21), float32] */, %589, %590, %var_9540, meta[relay.Constant][30] /* ty=Tensor[(780), float32] */, %591, %592, %593)
}

def @func_252() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) {
  %594 = @func_142() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
  %595 = @func_21() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %596 = @func_142() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
  %597 = %594.0;
  %598 = %595.0;
  %599 = %596.1;
  (%597, %598, %599)
}

def @func_7527() -> (Tensor[(12, 3, 11), float32],) {
  %601 = fn () -> (Tensor[(12, 3, 11), float32],) {
    %600 = @func_3568() /* ty=Tensor[(12, 3, 11), float32] */;
    (%600,)
  };
  %601() /* ty=(Tensor[(12, 3, 11), float32],) */
}

def @func_6847() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 7, 4), uint64], Tensor[(364), uint64], Tensor[(13, 9, 6), bool], Tensor[(1092), float32]) {
  %602 = @func_4066() /* ty=(Tensor[(11, 4, 13), float64], Tensor[(12, 3, 11), float32]) */;
  %603 = cast(meta[relay.Constant][32] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %604 = reshape(%603, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %605 = @func_6549(%604) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(1092), float64]) */;
  %606 = @func_2273() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %607 = cast(meta[relay.Constant][33] /* ty=Tensor[(364), uint64] */, dtype="uint64") /* ty=Tensor[(364), uint64] */;
  %608 = reshape(%607, newshape=[13, 7, 4]) /* ty=Tensor[(13, 7, 4), uint64] */;
  %609 = @func_464(%608) /* ty=(Tensor[(13, 7, 4), uint64], Tensor[(12, 3, 11), float32], Tensor[(396), float32]) */;
  %610 = @func_5731() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) */;
  %611 = cast(meta[relay.Constant][32] /* ty=Tensor[(1092), float64] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %612 = %602.1;
  %613 = @func_1410() /* ty=Tensor[(12, 3, 11), float32] */;
  %614 = %605.0;
  %615 = %606.0;
  %616 = %609.0;
  %617 = %610.1;
  %618 = sigmoid(%611) /* ty=Tensor[(1092), float32] */;
  (%612, %613, %614, %615, %616, meta[relay.Constant][33] /* ty=Tensor[(364), uint64] */, %617, %618)
}

def @func_6381() -> (Tensor[(12, 3, 11), float32],) {
  %619 = @func_3923() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %620 = %619.0;
  (%620,)
}

def @func_8656(%var_8623: Tensor[(1, 48), float32], %var_8637: Tensor[(88, 2), float64]) -> (Tensor[(5, 10, 9), float64], Tensor[(12, 3, 11), float32], Tensor[(88, 2), float64], Tensor[(12, 3, 11), float32], Tensor[(?, 48), int64]) {
  %621 = @func_4503() /* ty=(Tensor[(5, 10, 9), float64], Tensor[(12, 3, 11), float32]) */;
  %622 = cast(%var_8637, dtype="float64") /* ty=Tensor[(88, 2), float64] */;
  %623 = reshape(%622, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %624 = @func_845(%623) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(176), float64]) */;
  %625 = @func_1334() /* ty=(Tensor[(2, 13, 2), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %626 = cast(%var_8623, dtype="float32") /* ty=Tensor[(1, 48), float32] */;
  %627 = reshape(%626, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %628 = @func_7507(%627) /* ty=(Tensor[(6, 2, 4), bool], Tensor[(48), float32], Tensor[(13, 16, 176), uint64]) */;
  %629 = %628.1;
  %630 = cast(%629, dtype="int64") /* ty=Tensor[(48), int64] */;
  %631 = shape_of(%var_8623, dtype="int32") /* ty=Tensor[(2), int32] */;
  %632 = cast(%var_8623, dtype="int64") /* ty=Tensor[(1, 48), int64] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %634 = %621.0;
  %635 = %624.1;
  %636 = %625.2;
  %637 = left_shift(%632, %633) /* ty=Tensor[(?, 48), int64] */;
  (%634, %635, %var_8637, %636, %637)
}

def @func_976() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  @func_974() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_4332() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(176), float64], Tensor[(13, 16, 176), bool], uint8, Tensor[(208), uint8], Tensor[(13, 16, 176), bool]) {
  %638 = @func_1415() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %639 = %638.0;
  %640 = cast(%639, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
  %641 = reshape(%640, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
  %642 = @func_4129(%641) /* ty=(Tensor[(12, 3, 11), int8], Tensor[(12, 3, 11), float32], Tensor[(4, 4, 11), float64], Tensor[(176), float64]) */;
  %643 = cast(meta[relay.Constant][34] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %644 = cast(meta[relay.Constant][35] /* ty=Tensor[(208), uint8] */, dtype="uint8") /* ty=Tensor[(208), uint8] */;
  %645 = %642.3;
  %646 = cast(%645, dtype="float64") /* ty=Tensor[(176), float64] */;
  %647 = reshape(%643, newshape=[]) /* ty=uint8 */;
  %648 = reshape(%644, newshape=[13, 16, 1]) /* ty=Tensor[(13, 16, 1), uint8] */;
  %649 = reshape(%646, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %650 = @func_1744(%647, %648, %649) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(176), bool], Tensor[(13, 16, 176), bool]) */;
  %651 = cast(meta[relay.Constant][34] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %652 = cast(meta[relay.Constant][35] /* ty=Tensor[(208), uint8] */, dtype="uint8") /* ty=Tensor[(208), uint8] */;
  %653 = cast(%645, dtype="float64") /* ty=Tensor[(176), float64] */;
  %654 = reshape(%651, newshape=[]) /* ty=uint8 */;
  %655 = reshape(%652, newshape=[13, 16, 1]) /* ty=Tensor[(13, 16, 1), uint8] */;
  %656 = reshape(%653, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %657 = @func_1744(%654, %655, %656) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(176), bool], Tensor[(13, 16, 176), bool]) */;
  %658 = @func_1410() /* ty=Tensor[(12, 3, 11), float32] */;
  %659 = %650.2;
  %660 = %657.2;
  (%658, %639, %645, %659, meta[relay.Constant][34] /* ty=uint8 */, meta[relay.Constant][35] /* ty=Tensor[(208), uint8] */, %660)
}

def @func_6931(%var_6926: Tensor[(13, 15, 1), float32]) -> (Tensor[(13, 15, 1), float32],) {
  %661 = cast(%var_6926, dtype="float32") /* ty=Tensor[(13, 15, 1), float32] */;
  %662 = atanh(%661) /* ty=Tensor[(13, 15, 1), float32] */;
  (%662,)
}

def @func_1836() -> (Tensor[(12, 3, 11), float32],) {
  %663 = @func_974() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %664 = %663.0;
  (%664,)
}

def @func_10214(%var_10212: Tensor[(11, 4, 13), float64]) -> (Tensor[(12, 3, 11), float32], Tensor[(11, 4, 13), bool]) {
  @func_10211(%var_10212) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(11, 4, 13), bool]) */
}

def @func_22() -> (Tensor[(12, 3, 11), float32],) {
  %667 = fn () -> (Tensor[(12, 3, 11), float32],) {
    %665 = cast(meta[relay.Constant][36] /* ty=Tensor[(12, 3, 11), float32] */, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
    %666 = sigmoid(%665) /* ty=Tensor[(12, 3, 11), float32] */;
    (%666,)
  };
  %667() /* ty=(Tensor[(12, 3, 11), float32],) */
}

def @func_4131(%var_4130: Tensor[(12, 3, 11), float32]) -> (Tensor[(12, 3, 11), int8], Tensor[(12, 3, 11), float32], Tensor[(4, 4, 11), float64], Tensor[(176), float64]) {
  %682 = fn (%var_4099: Tensor[(12, 3, 11), float32]) -> (Tensor[(12, 3, 11), int8], Tensor[(12, 3, 11), float32], Tensor[(4, 4, 11), float64], Tensor[(176), float64]) {
    %668 = @func_252() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) */;
    %669 = %668.0;
    %670 = cast(%var_4099, dtype="int8") /* ty=Tensor[(12, 3, 11), int8] */;
    %671 = shape_of(%669, dtype="int32") /* ty=Tensor[(3), int32] */;
    %672 = cast(%669, dtype="int8") /* ty=Tensor[(12, 3, 11), int8] */;
    %673 = dyn.reshape(%670, %671, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %674 = cast(meta[relay.Constant][37] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
    %675 = cast(meta[relay.Constant][37] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
    %676 = reshape(%674, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
    %677 = reshape(%675, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
    %678 = @func_311(%676, %677) /* ty=(Tensor[(4, 4, 11), float64], Tensor[(13, 9, 6), bool], Tensor[(396), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) */;
    %679 = logical_xor(%672, %673) /* ty=Tensor[(12, 3, 11), int8] */;
    %680 = @func_404() /* ty=Tensor[(12, 3, 11), float32] */;
    %681 = %678.0;
    (%679, %680, %681, meta[relay.Constant][37] /* ty=Tensor[(176), float64] */)
  };
  %682(%var_4130) /* ty=(Tensor[(12, 3, 11), int8], Tensor[(12, 3, 11), float32], Tensor[(4, 4, 11), float64], Tensor[(176), float64]) */
}

def @func_1268(%var_1267: Tensor[(12, 3, 11), float32]) -> Tensor[(12, 3, 11), uint16] {
  %689 = fn (%var_1249: Tensor[(12, 3, 11), float32]) -> Tensor[(12, 3, 11), uint16] {
    %683 = @func_142() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
    %684 = %683.2;
    %685 = cast(%var_1249, dtype="uint16") /* ty=Tensor[(12, 3, 11), uint16] */;
    %686 = shape_of(%684, dtype="int32") /* ty=Tensor[(3), int32] */;
    %687 = cast(%684, dtype="uint16") /* ty=Tensor[(12, 3, 11), uint16] */;
    %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    bitwise_or(%687, %688) /* ty=Tensor[(12, 3, 11), uint16] */
  };
  %689(%var_1267) /* ty=Tensor[(12, 3, 11), uint16] */
}

def @func_9993() -> (Tensor[(12, 3, 11), float32],) {
  @func_9991() /* ty=(Tensor[(12, 3, 11), float32],) */
}

def @func_10133(%var_10128: float32, %var_10129: Tensor[(13, 1, 11), float32]) -> Tensor[(13, 1, 11), float32] {
  %690 = cast(%var_10128, dtype="float32") /* ty=float32 */;
  %691 = cast(%var_10129, dtype="float32") /* ty=Tensor[(13, 1, 11), float32] */;
  power(%690, %691) /* ty=Tensor[(13, 1, 11), float32] */
}

def @func_4626() -> (Tensor[(12, 3, 11), float32], Tensor[(2, 13, 2), float32], Tensor[(12, 3, 11), float32]) {
  %698 = fn () -> (Tensor[(12, 3, 11), float32], Tensor[(2, 13, 2), float32], Tensor[(12, 3, 11), float32]) {
    %692 = @func_4260() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
    %693 = @func_1204() /* ty=(Tensor[(2, 13, 2), float32], Tensor[(2, 13, 2), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
    %694 = @func_1664() /* ty=(Tensor[(12, 3, 11), bool], Tensor[(12, 3, 11), float32]) */;
    %695 = %692.0;
    %696 = %693.0;
    %697 = %694.1;
    (%695, %696, %697)
  };
  %698() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(2, 13, 2), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_1387() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(364), uint64]) {
  %709 = fn () -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(364), uint64]) {
    %699 = @func_21() /* ty=(Tensor[(12, 3, 11), float32],) */;
    %700 = @func_775() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
    %701 = @func_21() /* ty=(Tensor[(12, 3, 11), float32],) */;
    %702 = cast(meta[relay.Constant][38] /* ty=Tensor[(364), uint64] */, dtype="uint64") /* ty=Tensor[(364), uint64] */;
    %703 = reshape(%702, newshape=[13, 7, 4]) /* ty=Tensor[(13, 7, 4), uint64] */;
    %704 = @func_464(%703) /* ty=(Tensor[(13, 7, 4), uint64], Tensor[(12, 3, 11), float32], Tensor[(396), float32]) */;
    %705 = %699.0;
    %706 = %700.2;
    %707 = %701.0;
    %708 = %704.1;
    (%705, %706, %707, %708, meta[relay.Constant][38] /* ty=Tensor[(364), uint64] */)
  };
  %709() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(364), uint64]) */
}

def @func_5947(%var_5944: Tensor[(6, 10, 14), float64]) -> Tensor[(6, 10, 14), float64] {
  %710 = cast(%var_5944, dtype="float64") /* ty=Tensor[(6, 10, 14), float64] */;
  atanh(%710) /* ty=Tensor[(6, 10, 14), float64] */
}

def @func_8157() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(5, 9, 8), float32], Tensor[(13, 9, 6), bool]) {
  @func_8155() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(5, 9, 8), float32], Tensor[(13, 9, 6), bool]) */
}

def @func_2481() -> (Tensor[(12, 3, 11), float32],) {
  %711 = @func_2459() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %712 = %711.0;
  (%712,)
}

def @func_9118() -> Tensor[(12, 3, 11), float32] {
  @func_404() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_9802() -> (Tensor[(144), uint64], Tensor[(13, 9, 6), bool]) {
  %713 = @func_9724() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(9, 16, 1), bool], Tensor[(144), uint64]) */;
  %714 = %713.2;
  %715 = @func_8470() /* ty=Tensor[(13, 9, 6), bool] */;
  (%714, %715)
}

def @func_8545() -> Tensor[(12, 3, 11), float32] {
  %716 = fn () -> Tensor[(12, 3, 11), float32] {
    @func_2973() /* ty=Tensor[(12, 3, 11), float32] */
  };
  %716() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_10123(%var_10117: Tensor[(4, 9, 16), float32]) -> (Tensor[(4, 9, 16), float32],) {
  %717 = cast(%var_10117, dtype="float32") /* ty=Tensor[(4, 9, 16), float32] */;
  %718 = rsqrt(%717) /* ty=Tensor[(4, 9, 16), float32] */;
  (%718,)
}

def @func_6733() -> (Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) {
  %724 = fn () -> (Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) {
    %719 = @func_2960() /* ty=Tensor[(12, 3, 11), float32] */;
    %720 = cast(%719, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
    %721 = reshape(%720, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
    %722 = @func_67(%721) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
    %723 = %722.0;
    (%719, %723)
  };
  %724() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) */
}

def @func_3064() -> (Tensor[(11, 4, 13), float64],) {
  @func_3062() /* ty=(Tensor[(11, 4, 13), float64],) */
}

def @func_7625() -> (Tensor[(12, 3, 11), float32], Tensor[(572), float32]) {
  @func_7623() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(572), float32]) */
}

def @func_10242() -> Tensor[(12, 3, 11), float32] {
  %725 = fn () -> Tensor[(12, 3, 11), float32] {
    @func_7744() /* ty=Tensor[(12, 3, 11), float32] */
  };
  %725() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_4983(%var_4982: Tensor[(15, 13, 4), float32]) -> (Tensor[(15, 13, 4), float32], Tensor[(12, 3, 11), float32]) {
  %730 = fn (%var_4974: Tensor[(15, 13, 4), float32]) -> (Tensor[(15, 13, 4), float32], Tensor[(12, 3, 11), float32]) {
    %726 = cast(%var_4974, dtype="float32") /* ty=Tensor[(15, 13, 4), float32] */;
    %727 = @func_1836() /* ty=(Tensor[(12, 3, 11), float32],) */;
    %728 = asinh(%726) /* ty=Tensor[(15, 13, 4), float32] */;
    %729 = %727.0;
    (%728, %729)
  };
  %730(%var_4982) /* ty=(Tensor[(15, 13, 4), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_537() -> Tensor[(12, 3, 11), float32] {
  %731 = fn () -> Tensor[(12, 3, 11), float32] {
    @func_404() /* ty=Tensor[(12, 3, 11), float32] */
  };
  %731() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_7047() -> Tensor[(13, 9, 6), bool] {
  %733 = fn () -> Tensor[(13, 9, 6), bool] {
    %732 = @func_142() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
    %732.1
  };
  %733() /* ty=Tensor[(13, 9, 6), bool] */
}

def @func_6631() -> (Tensor[(12, 3, 11), float32], Tensor[(5, 9, 8), float32]) {
  @func_6629() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(5, 9, 8), float32]) */
}

def @func_6897(%var_6896: Tensor[(4, 2, 10), float64]) -> (Tensor[(4, 2, 10), float64], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %739 = fn (%var_6876: Tensor[(4, 2, 10), float64]) -> (Tensor[(4, 2, 10), float64], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
    %734 = cast(%var_6876, dtype="float64") /* ty=Tensor[(4, 2, 10), float64] */;
    %735 = @func_1584() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(11, 4, 13), float64], Tensor[(572), float64], Tensor[(12, 3, 11), float32]) */;
    %736 = sigmoid(%734) /* ty=Tensor[(4, 2, 10), float64] */;
    %737 = @func_231() /* ty=Tensor[(12, 3, 11), float32] */;
    %738 = %735.0;
    (%736, %737, %738)
  };
  %739(%var_6896) /* ty=(Tensor[(4, 2, 10), float64], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_5732() -> (Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) {
  %743 = fn () -> (Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) {
    %740 = @func_4066() /* ty=(Tensor[(11, 4, 13), float64], Tensor[(12, 3, 11), float32]) */;
    %741 = %740.1;
    %742 = @func_2446() /* ty=Tensor[(13, 9, 6), bool] */;
    (%741, %742)
  };
  %743() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) */
}

def @func_1416() -> (Tensor[(12, 3, 11), float32],) {
  %746 = fn () -> (Tensor[(12, 3, 11), float32],) {
    %744 = @func_252() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) */;
    %745 = %744.0;
    (%745,)
  };
  %746() /* ty=(Tensor[(12, 3, 11), float32],) */
}

def @func_2912() -> (Tensor[(12, 3, 11), float32],) {
  %749 = fn () -> (Tensor[(12, 3, 11), float32],) {
    %747 = @func_2273() /* ty=(Tensor[(12, 3, 11), float32],) */;
    %748 = %747.0;
    (%748,)
  };
  %749() /* ty=(Tensor[(12, 3, 11), float32],) */
}

def @func_6849() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 7, 4), uint64], Tensor[(364), uint64], Tensor[(13, 9, 6), bool], Tensor[(1092), float32]) {
  @func_6847() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 7, 4), uint64], Tensor[(364), uint64], Tensor[(13, 9, 6), bool], Tensor[(1092), float32]) */
}

def @func_4910(%var_4909: Tensor[(9, 16, 1), uint64]) -> Tensor[(9, 16, 1), bool] {
  %752 = fn (%var_4901: Tensor[(9, 16, 1), uint64]) -> Tensor[(9, 16, 1), bool] {
    %750 = cast(meta[relay.Constant][39] /* ty=uint64 */, dtype="bool") /* ty=bool */;
    %751 = cast(%var_4901, dtype="bool") /* ty=Tensor[(9, 16, 1), bool] */;
    not_equal(%750, %751) /* ty=Tensor[(9, 16, 1), bool] */
  };
  %752(%var_4909) /* ty=Tensor[(9, 16, 1), bool] */
}

def @func_8556(%var_8554: uint64, %var_8555: Tensor[(4, 3, 7), uint64]) -> (Tensor[(4, 3, 7), uint64],) {
  @func_8552(%var_8554, %var_8555) /* ty=(Tensor[(4, 3, 7), uint64],) */
}

def @func_11340(%var_11338: Tensor[(6, 1, 6), float32], %var_11339: Tensor[(50), uint32]) -> (Tensor[(6, 1, 6), float32], Tensor[(50), uint32], Tensor[(5, 2, 5), float64]) {
  %761 = fn (%var_11289: Tensor[(6, 1, 6), float32], %var_11320: Tensor[(50), uint32]) -> (Tensor[(6, 1, 6), float32], Tensor[(50), uint32], Tensor[(5, 2, 5), float64]) {
    %753 = cast(%var_11289, dtype="float32") /* ty=Tensor[(6, 1, 6), float32] */;
    %754 = cast(%var_11320, dtype="uint32") /* ty=Tensor[(50), uint32] */;
    %755 = reshape(%754, newshape=[5, 2, 5]) /* ty=Tensor[(5, 2, 5), uint32] */;
    %756 = @func_10599(%755) /* ty=(Tensor[(5, 2, 5), bool],) */;
    %757 = %756.0;
    %758 = cast(%757, dtype="float64") /* ty=Tensor[(5, 2, 5), float64] */;
    %759 = atanh(%753) /* ty=Tensor[(6, 1, 6), float32] */;
    %760 = tan(%758) /* ty=Tensor[(5, 2, 5), float64] */;
    (%759, %var_11320, %760)
  };
  %761(%var_11338, %var_11339) /* ty=(Tensor[(6, 1, 6), float32], Tensor[(50), uint32], Tensor[(5, 2, 5), float64]) */
}

def @func_6069() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  @func_6067() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_6629() -> (Tensor[(12, 3, 11), float32], Tensor[(5, 9, 8), float32]) {
  %762 = @func_2528() /* ty=Tensor[(12, 3, 11), float32] */;
  %763 = @func_6185() /* ty=Tensor[(5, 9, 8), float32] */;
  (%762, %763)
}

def @func_9371() -> Tensor[(12, 3, 11), float32] {
  %764 = @func_2459() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %764.0
}

def @func_7555(%var_7554: Tensor[(14, 4, 8), float64]) -> Tensor[(14, 4, 8), float64] {
  %766 = fn (%var_7545: Tensor[(14, 4, 8), float64]) -> Tensor[(14, 4, 8), float64] {
    %765 = cast(%var_7545, dtype="float64") /* ty=Tensor[(14, 4, 8), float64] */;
    sigmoid(%765) /* ty=Tensor[(14, 4, 8), float64] */
  };
  %766(%var_7554) /* ty=Tensor[(14, 4, 8), float64] */
}

def @func_4484() -> Tensor[(12, 3, 11), float32] {
  %768 = fn () -> Tensor[(12, 3, 11), float32] {
    %767 = @func_3887() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
    %767.1
  };
  %768() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_8051() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %773 = fn () -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
    %769 = @func_6847() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 7, 4), uint64], Tensor[(364), uint64], Tensor[(13, 9, 6), bool], Tensor[(1092), float32]) */;
    %770 = @func_4790() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float64]) */;
    %771 = %769.2;
    %772 = %770.1;
    (%771, %772)
  };
  %773() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_847(%var_846: Tensor[(176), float64]) -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(176), float64]) {
  %782 = fn (%var_839: Tensor[(176), float64]) -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(176), float64]) {
    %774 = @func_775() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
    %775 = cast(%var_839, dtype="float64") /* ty=Tensor[(176), float64] */;
    %776 = cast(%var_839, dtype="float64") /* ty=Tensor[(176), float64] */;
    %777 = reshape(%775, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
    %778 = reshape(%776, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
    %779 = @func_311(%777, %778) /* ty=(Tensor[(4, 4, 11), float64], Tensor[(13, 9, 6), bool], Tensor[(396), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) */;
    %780 = %774.1;
    %781 = %779.3;
    (%780, %781, %var_839)
  };
  %782(%var_846) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(176), float64]) */
}

def @func_5104(%var_5103: int32) -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), uint16], Tensor[(1, 13), bool], int32, Tensor[(13), int32], Tensor[(12, 3, 11), float32]) {
  %795 = fn (%var_5094: int32) -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), uint16], Tensor[(1, 13), bool], int32, Tensor[(13), int32], Tensor[(12, 3, 11), float32]) {
    %783 = @func_231() /* ty=Tensor[(12, 3, 11), float32] */;
    %784 = cast(%783, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
    %785 = reshape(%784, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
    %786 = cast(%var_5094, dtype="int32") /* ty=int32 */;
    %787 = cast(meta[relay.Constant][40] /* ty=Tensor[(13), int32] */, dtype="int32") /* ty=Tensor[(13), int32] */;
    %788 = reshape(%786, newshape=[]) /* ty=int32 */;
    %789 = reshape(%787, newshape=[1, 13]) /* ty=Tensor[(1, 13), int32] */;
    %790 = @func_2299(%788, %789) /* ty=(Tensor[(1, 13), bool],) */;
    %791 = @func_4840() /* ty=(Tensor[(12, 3, 11), float32],) */;
    %792 = @func_1266(%785) /* ty=Tensor[(12, 3, 11), uint16] */;
    %793 = %790.0;
    %794 = %791.0;
    (%783, %792, %793, %var_5094, meta[relay.Constant][40] /* ty=Tensor[(13), int32] */, %794)
  };
  %795(%var_5103) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), uint16], Tensor[(1, 13), bool], int32, Tensor[(13), int32], Tensor[(12, 3, 11), float32]) */
}

def @func_5842() -> (Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %804 = fn () -> (Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
    %796 = @func_5731() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) */;
    %797 = @func_2273() /* ty=(Tensor[(12, 3, 11), float32],) */;
    %798 = @func_5333() /* ty=(Tensor[(12, 3, 11), float32],) */;
    %799 = @func_4483() /* ty=Tensor[(12, 3, 11), float32] */;
    %800 = %796.1;
    %801 = %797.0;
    %802 = @func_337() /* ty=Tensor[(12, 3, 11), float32] */;
    %803 = %798.0;
    (%799, %800, %801, %802, %803)
  };
  %804() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_1586() -> (Tensor[(12, 3, 11), float32], Tensor[(11, 4, 13), float64], Tensor[(572), float64], Tensor[(12, 3, 11), float32]) {
  @func_1584() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(11, 4, 13), float64], Tensor[(572), float64], Tensor[(12, 3, 11), float32]) */
}

def @func_11281() -> (Tensor[(12, 3, 11), float32],) {
  @func_11279() /* ty=(Tensor[(12, 3, 11), float32],) */
}

def @func_3270() -> (Tensor[(12, 3, 11), float32], Tensor[(11, 4, 13), float64]) {
  %808 = fn () -> (Tensor[(12, 3, 11), float32], Tensor[(11, 4, 13), float64]) {
    %805 = @func_3062() /* ty=(Tensor[(11, 4, 13), float64],) */;
    %806 = @func_1957() /* ty=Tensor[(12, 3, 11), float32] */;
    %807 = %805.0;
    (%806, %807)
  };
  %808() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(11, 4, 13), float64]) */
}

def @func_6141() -> (Tensor[(12, 3, 11), float32], Tensor[(11, 4, 13), float64]) {
  %809 = @func_252() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) */;
  %810 = @func_3062() /* ty=(Tensor[(11, 4, 13), float64],) */;
  %811 = %809.0;
  %812 = %810.0;
  (%811, %812)
}

def @func_2370() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  @func_2368() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_10126(%var_10124: Tensor[(4, 9, 16), float32]) -> (Tensor[(4, 9, 16), float32],) {
  @func_10123(%var_10124) /* ty=(Tensor[(4, 9, 16), float32],) */
}

def @func_10646() -> (Tensor[(12, 3, 11), float64], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  @func_10644() /* ty=(Tensor[(12, 3, 11), float64], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_10448() -> (Tensor[(12, 3, 11), float32], Tensor[(364), uint64], Tensor[(14, 78), float64]) {
  @func_10446() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(364), uint64], Tensor[(14, 78), float64]) */
}

def @func_6285(%var_6281: Tensor[(495), int64]) -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(9, 11, 5), int64], Tensor[(495), int64]) {
  %813 = @func_6085() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %814 = @func_5479() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %815 = @func_1415() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %816 = cast(%var_6281, dtype="int64") /* ty=Tensor[(495), int64] */;
  %817 = cast(%var_6281, dtype="int64") /* ty=Tensor[(495), int64] */;
  %818 = reshape(%816, newshape=[9, 11, 5]) /* ty=Tensor[(9, 11, 5), int64] */;
  %819 = reshape(%817, newshape=[9, 11, 5]) /* ty=Tensor[(9, 11, 5), int64] */;
  %820 = @func_4741(%818, %819) /* ty=(Tensor[(9, 11, 5), int64], Tensor[(12, 3, 11), float32], Tensor[(9, 11, 5), int16]) */;
  %821 = %813.1;
  %822 = %814.2;
  %823 = %815.0;
  %824 = %820.0;
  (%821, %822, %823, %824, %var_6281)
}

def @func_9991() -> (Tensor[(12, 3, 11), float32],) {
  %825 = @func_9032() /* ty=Tensor[(12, 3, 11), float32] */;
  (%825,)
}

def @func_1957() -> Tensor[(12, 3, 11), float32] {
  %826 = @func_1485() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %826.0
}

def @func_938(%var_937: Tensor[(7, 3, 1), float32]) -> (Tensor[(7, 3, 1), float32],) {
  %829 = fn (%var_933: Tensor[(7, 3, 1), float32]) -> (Tensor[(7, 3, 1), float32],) {
    %827 = cast(%var_933, dtype="float32") /* ty=Tensor[(7, 3, 1), float32] */;
    %828 = tan(%827) /* ty=Tensor[(7, 3, 1), float32] */;
    (%828,)
  };
  %829(%var_937) /* ty=(Tensor[(7, 3, 1), float32],) */
}

def @func_4790() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float64]) {
  %830 = @func_3887() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %831 = @func_2712() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %832 = @func_2911() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %833 = %830.0;
  %834 = %831.0;
  %835 = %832.0;
  %836 = @func_2402() /* ty=Tensor[(12, 3, 11), float64] */;
  (%833, %834, %835, %836)
}

def @func_2975() -> Tensor[(12, 3, 11), float32] {
  @func_2973() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_7837() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  @func_7835() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_10058() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %837 = @func_3598() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %838 = @func_7526() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %839 = @func_8544() /* ty=Tensor[(12, 3, 11), float32] */;
  %840 = %837.0;
  %841 = %838.0;
  (%839, %840, %841)
}

def @func_4967() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  @func_4965() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_7623() -> (Tensor[(12, 3, 11), float32], Tensor[(572), float32]) {
  %842 = @func_4965() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %843 = @func_5286() /* ty=Tensor[(572), float64] */;
  %844 = cast(%843, dtype="float32") /* ty=Tensor[(572), float32] */;
  %845 = %842.1;
  %846 = cos(%844) /* ty=Tensor[(572), float32] */;
  (%845, %846)
}

def @func_9874(%var_9872: uint8, %var_9873: Tensor[(2, 104), uint8]) -> (Tensor[(12, 3, 11), float32], Tensor[(2, 104), uint8], Tensor[(13, 9, 6), bool], Tensor[(13, 16, 176), bool]) {
  @func_9870(%var_9872, %var_9873) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(2, 104), uint8], Tensor[(13, 9, 6), bool], Tensor[(13, 16, 176), bool]) */
}

def @func_10841() -> (Tensor[(13, 9, 6), bool], Tensor[(140), uint8], Tensor[(1092), float64], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(9, 16, 1), bool], Tensor[(144), uint64], Tensor[(12, 3, 11), float32], Tensor[(7, 3, 1), float32], Tensor[(1092), float64]) {
  @func_10839() /* ty=(Tensor[(13, 9, 6), bool], Tensor[(140), uint8], Tensor[(1092), float64], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(9, 16, 1), bool], Tensor[(144), uint64], Tensor[(12, 3, 11), float32], Tensor[(7, 3, 1), float32], Tensor[(1092), float64]) */
}

def @func_10870() -> (Tensor[(13, 9, 6), bool],) {
  @func_10868() /* ty=(Tensor[(13, 9, 6), bool],) */
}

def @func_3371() -> Tensor[(12, 3, 11), float32] {
  @func_3369() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_5875() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), int8]) {
  @func_5873() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), int8]) */
}

def @func_2459() -> (Tensor[(12, 3, 11), float32],) {
  %847 = @func_21() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %848 = %847.0;
  (%848,)
}

def @func_9319() -> (Tensor[(12, 3, 11), float32],) {
  %849 = @func_1957() /* ty=Tensor[(12, 3, 11), float32] */;
  (%849,)
}

def @func_9483() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %854 = fn () -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
    %850 = @func_7526() /* ty=(Tensor[(12, 3, 11), float32],) */;
    %851 = @func_3031() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float64]) */;
    %852 = %850.0;
    %853 = %851.1;
    (%852, %853)
  };
  %854() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_6551(%var_6550: Tensor[(1092), float64]) -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(1092), float64]) {
  %862 = fn (%var_6546: Tensor[(1092), float64]) -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(1092), float64]) {
    %855 = @func_2911() /* ty=(Tensor[(12, 3, 11), float32],) */;
    %856 = cast(%var_6546, dtype="float64") /* ty=Tensor[(1092), float64] */;
    %857 = reshape(%856, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
    %858 = @func_804(%857) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(6, 13, 14), int8], Tensor[(1092), float64]) */;
    %859 = %855.0;
    %860 = @func_404() /* ty=Tensor[(12, 3, 11), float32] */;
    %861 = %858.0;
    (%859, %860, %861, %var_6546)
  };
  %862(%var_6550) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(1092), float64]) */
}

def @func_8797(%var_8720: Tensor[(5, 156), float32], %var_8748: Tensor[(864, 1), bool]) -> (Tensor[(208), uint8], Tensor[(12, 3, 11), float32], Tensor[(1092), float64], Tensor[(5, 156), float32], Tensor[(12, 3, 11), float32], Tensor[(864, 1), bool], Tensor[(4, 4, 11), float64], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %863 = @func_4332() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(176), float64], Tensor[(13, 16, 176), bool], uint8, Tensor[(208), uint8], Tensor[(13, 16, 176), bool]) */;
  %864 = cast(meta[relay.Constant][41] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %865 = cast(%var_8720, dtype="float32") /* ty=Tensor[(5, 156), float32] */;
  %866 = reshape(%864, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %867 = reshape(%865, newshape=[1, 780]) /* ty=Tensor[(1, 780), float32] */;
  %868 = @func_7013(%866, %867) /* ty=(Tensor[(12, 3, 11), int8], Tensor[(12, 3, 11), bool], Tensor[(13, 9, 6), bool], Tensor[(1092), float64], Tensor[(12, 3, 11), float32], Tensor[(1, 780), float32]) */;
  %869 = cast(%var_8748, dtype="bool") /* ty=Tensor[(864, 1), bool] */;
  %870 = reshape(%869, newshape=[12, 12, 6]) /* ty=Tensor[(12, 12, 6), bool] */;
  %871 = @func_5123(%870) /* ty=(Tensor[(12, 12, 6), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %872 = %868.4;
  %873 = cast(%872, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
  %874 = reshape(%873, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
  %875 = @func_4129(%874) /* ty=(Tensor[(12, 3, 11), int8], Tensor[(12, 3, 11), float32], Tensor[(4, 4, 11), float64], Tensor[(176), float64]) */;
  %876 = @func_1415() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %877 = cast(meta[relay.Constant][41] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %878 = reshape(%877, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %879 = @func_6549(%878) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(1092), float64]) */;
  %880 = %863.5;
  %881 = %871.1;
  %882 = %875.2;
  %883 = %876.0;
  %884 = @func_8198() /* ty=Tensor[(12, 3, 11), float32] */;
  %885 = %879.1;
  (%880, %872, meta[relay.Constant][41] /* ty=Tensor[(1092), float64] */, %var_8720, %881, %var_8748, %882, %883, %884, %885)
}

def @func_254() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) {
  @func_252() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) */
}

def @func_7509(%var_7508: Tensor[(48), float32]) -> (Tensor[(6, 2, 4), bool], Tensor[(48), float32], Tensor[(13, 16, 176), uint64]) {
  %900 = fn (%var_7491: Tensor[(48), float32]) -> (Tensor[(6, 2, 4), bool], Tensor[(48), float32], Tensor[(13, 16, 176), uint64]) {
    %886 = cast(%var_7491, dtype="float32") /* ty=Tensor[(48), float32] */;
    %887 = cast(%var_7491, dtype="float32") /* ty=Tensor[(48), float32] */;
    %888 = reshape(%886, newshape=[6, 2, 4]) /* ty=Tensor[(6, 2, 4), float32] */;
    %889 = reshape(%887, newshape=[6, 2, 4]) /* ty=Tensor[(6, 2, 4), float32] */;
    %890 = @func_4332() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(176), float64], Tensor[(13, 16, 176), bool], uint8, Tensor[(208), uint8], Tensor[(13, 16, 176), bool]) */;
    %891 = %890.3;
    %892 = cast(%891, dtype="float32") /* ty=Tensor[(13, 16, 176), float32] */;
    %893 = log10(%892) /* ty=Tensor[(13, 16, 176), float32] */;
    %894 = cast(%891, dtype="uint64") /* ty=Tensor[(13, 16, 176), uint64] */;
    %895 = shape_of(%893, dtype="int32") /* ty=Tensor[(3), int32] */;
    %896 = cast(%893, dtype="uint64") /* ty=Tensor[(13, 16, 176), uint64] */;
    %897 = dyn.reshape(%894, %895, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %898 = @func_6351(%888, %889) /* ty=Tensor[(6, 2, 4), bool] */;
    %899 = bitwise_or(%896, %897) /* ty=Tensor[(13, 16, 176), uint64] */;
    (%898, %var_7491, %899)
  };
  %900(%var_7508) /* ty=(Tensor[(6, 2, 4), bool], Tensor[(48), float32], Tensor[(13, 16, 176), uint64]) */
}

def @func_10315() -> (Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32], Tensor[(7, 3, 1), float32], Tensor[(21), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), bool]) {
  %914 = fn () -> (Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32], Tensor[(7, 3, 1), float32], Tensor[(21), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), bool]) {
    %901 = cast(meta[relay.Constant][42] /* ty=Tensor[(21), float32] */, dtype="float32") /* ty=Tensor[(21), float32] */;
    %902 = reshape(%901, newshape=[7, 3, 1]) /* ty=Tensor[(7, 3, 1), float32] */;
    %903 = @func_936(%902) /* ty=(Tensor[(7, 3, 1), float32],) */;
    %904 = @func_4965() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
    %905 = @func_5996() /* ty=(Tensor[(12, 3, 11), float32],) */;
    %906 = @func_5744() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), bool]) */;
    %907 = @func_7046() /* ty=Tensor[(13, 9, 6), bool] */;
    %908 = @func_7236() /* ty=Tensor[(12, 3, 11), float32] */;
    %909 = %903.0;
    %910 = %904.1;
    %911 = %905.0;
    %912 = @func_8198() /* ty=Tensor[(12, 3, 11), float32] */;
    %913 = %906.1;
    (%907, %908, %909, meta[relay.Constant][42] /* ty=Tensor[(21), float32] */, %910, %911, %912, %913)
  };
  %914() /* ty=(Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32], Tensor[(7, 3, 1), float32], Tensor[(21), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), bool]) */
}

def @func_5996() -> (Tensor[(12, 3, 11), float32],) {
  %915 = @func_2960() /* ty=Tensor[(12, 3, 11), float32] */;
  (%915,)
}

def @func_9804() -> (Tensor[(144), uint64], Tensor[(13, 9, 6), bool]) {
  @func_9802() /* ty=(Tensor[(144), uint64], Tensor[(13, 9, 6), bool]) */
}

def @func_10946(%var_10945: float64) -> (Tensor[(7, 16, 10), float64], Tensor[(12, 3, 11), float32]) {
  %921 = fn (%var_10935: float64) -> (Tensor[(7, 16, 10), float64], Tensor[(12, 3, 11), float32]) {
    %916 = cast(%var_10935, dtype="float64") /* ty=float64 */;
    %917 = cast(meta[relay.Constant][43] /* ty=Tensor[(7, 16, 10), float64] */, dtype="float64") /* ty=Tensor[(7, 16, 10), float64] */;
    %918 = @func_5907() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
    %919 = floor_mod(%916, %917) /* ty=Tensor[(7, 16, 10), float64] */;
    %920 = %918.1;
    (%919, %920)
  };
  %921(%var_10945) /* ty=(Tensor[(7, 16, 10), float64], Tensor[(12, 3, 11), float32]) */
}

def @func_5744() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), bool]) {
  %922 = @func_4066() /* ty=(Tensor[(11, 4, 13), float64], Tensor[(12, 3, 11), float32]) */;
  %923 = @func_3645() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), bool]) */;
  %924 = %922.1;
  %925 = %923.2;
  (%924, %925)
}

def @func_7184(%var_7183: Tensor[(5, 12, 4), float32]) -> Tensor[(5, 12, 4), bool] {
  %930 = fn (%var_7175: Tensor[(5, 12, 4), float32]) -> Tensor[(5, 12, 4), bool] {
    %926 = cast(%var_7175, dtype="bool") /* ty=Tensor[(5, 12, 4), bool] */;
    %927 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(5, 12, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %928 = cast(meta[relay.Constant][44] /* ty=Tensor[(5, 12, 4), float32] */, dtype="bool") /* ty=Tensor[(5, 12, 4), bool] */;
    %929 = dyn.reshape(%926, %927, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less(%928, %929) /* ty=Tensor[(5, 12, 4), bool] */
  };
  %930(%var_7183) /* ty=Tensor[(5, 12, 4), bool] */
}

def @func_8189() -> (Tensor[(12, 3, 11), float32],) {
  @func_8187() /* ty=(Tensor[(12, 3, 11), float32],) */
}

def @func_3493(%var_3491: Tensor[(12, 3, 11), float32], %var_3492: Tensor[(364), uint64]) -> (Tensor[(12, 3, 11), uint16], Tensor[(12, 3, 11), float32], Tensor[(364), uint32]) {
  @func_3489(%var_3491, %var_3492) /* ty=(Tensor[(12, 3, 11), uint16], Tensor[(12, 3, 11), float32], Tensor[(364), uint32]) */
}

def @func_6067() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %931 = @func_775() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %932 = @func_1485() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %933 = %931.1;
  %934 = %932.0;
  (%933, %934)
}

def @func_974() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %935 = @func_775() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %936 = %935.2;
  %937 = cast(%936, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
  %938 = reshape(%937, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
  %939 = @func_67(%938) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
  %940 = %939.1;
  (%936, %940)
}

def @func_3809(%var_3795: Tensor[(10, 5, 1), int8], %var_3796: Tensor[(10, 5, 3), int8]) -> (Tensor[(10, 5, 3), bool], Tensor[(12, 3, 11), float32]) {
  %941 = cast(%var_3795, dtype="bool") /* ty=Tensor[(10, 5, 1), bool] */;
  %942 = cast(%var_3796, dtype="bool") /* ty=Tensor[(10, 5, 3), bool] */;
  %943 = @func_2273() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %944 = less(%941, %942) /* ty=Tensor[(10, 5, 3), bool] */;
  %945 = %943.0;
  (%944, %945)
}

def @func_3241(%var_3238: Tensor[(8, 1, 5), uint64], %var_3239: Tensor[(8, 15, 5), uint64], %var_3240: Tensor[(8, 15, 5), uint64]) -> (Tensor[(8, 15, 5), uint64], Tensor[(8, 15, 5), float32], Tensor[(8, 15, 5), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  @func_3236(%var_3238, %var_3239, %var_3240) /* ty=(Tensor[(8, 15, 5), uint64], Tensor[(8, 15, 5), float32], Tensor[(8, 15, 5), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_7447(%var_7446: Tensor[(864), bool]) -> (Tensor[(12, 3, 11), float32], Tensor[(1, 1092), float32], Tensor[(14, 78), float64], Tensor[(12, 3, 11), float32], Tensor[(864), bool], Tensor[(12, 3, 11), float32]) {
  %958 = fn (%var_7431: Tensor[(864), bool]) -> (Tensor[(12, 3, 11), float32], Tensor[(1, 1092), float32], Tensor[(14, 78), float64], Tensor[(12, 3, 11), float32], Tensor[(864), bool], Tensor[(12, 3, 11), float32]) {
    %946 = @func_1334() /* ty=(Tensor[(2, 13, 2), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
    %947 = cast(meta[relay.Constant][45] /* ty=Tensor[(14, 78), float64] */, dtype="float64") /* ty=Tensor[(14, 78), float64] */;
    %948 = reshape(%947, newshape=[1, 1092]) /* ty=Tensor[(1, 1092), float64] */;
    %949 = @func_5545(%948) /* ty=(Tensor[(2, 13, 2), float32], Tensor[(396), float64], Tensor[(12, 3, 11), bool], Tensor[(1, 1092), float32]) */;
    %950 = cast(%var_7431, dtype="bool") /* ty=Tensor[(864), bool] */;
    %951 = reshape(%950, newshape=[12, 12, 6]) /* ty=Tensor[(12, 12, 6), bool] */;
    %952 = @func_5123(%951) /* ty=(Tensor[(12, 12, 6), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
    %953 = @func_1836() /* ty=(Tensor[(12, 3, 11), float32],) */;
    %954 = %946.1;
    %955 = %949.3;
    %956 = %952.1;
    %957 = %953.0;
    (%954, %955, meta[relay.Constant][45] /* ty=Tensor[(14, 78), float64] */, %956, %var_7431, %957)
  };
  %958(%var_7446) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(1, 1092), float32], Tensor[(14, 78), float64], Tensor[(12, 3, 11), float32], Tensor[(864), bool], Tensor[(12, 3, 11), float32]) */
}

def @func_6449() -> (Tensor[(12, 3, 11), float32], Tensor[(5, 3, 5), float32], Tensor[(75), float32], Tensor[(12, 3, 11), float32]) {
  %959 = cast(meta[relay.Constant][46] /* ty=Tensor[(75), float32] */, dtype="float32") /* ty=Tensor[(75), float32] */;
  %960 = reshape(%959, newshape=[5, 3, 5]) /* ty=Tensor[(5, 3, 5), float32] */;
  %961 = @func_3750() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %962 = @func_404() /* ty=Tensor[(12, 3, 11), float32] */;
  %963 = @func_1995(%960) /* ty=Tensor[(5, 3, 5), float32] */;
  %964 = %961.0;
  (%962, %963, meta[relay.Constant][46] /* ty=Tensor[(75), float32] */, %964)
}

def @func_143() -> (Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) {
  %973 = fn () -> (Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) {
    %965 = @func_21() /* ty=(Tensor[(12, 3, 11), float32],) */;
    %966 = %965.0;
    %967 = cast(%966, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
    %968 = reshape(%967, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
    %969 = @func_67(%968) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
    %970 = @func_21() /* ty=(Tensor[(12, 3, 11), float32],) */;
    %971 = %969.0;
    %972 = %970.0;
    (%966, %971, %972)
  };
  %973() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */
}

def @func_2857(%var_2855: Tensor[(4, 7, 5), uint8]) -> (Tensor[(12, 3, 11), float32], Tensor[(1092), float64], Tensor[(4, 7, 5), float32]) {
  @func_2854(%var_2855) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(1092), float64], Tensor[(4, 7, 5), float32]) */
}

def @func_3923() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %974 = @func_1334() /* ty=(Tensor[(2, 13, 2), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %975 = @func_2712() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %976 = %974.2;
  %977 = %975.0;
  (%976, %977)
}

def @func_2530() -> Tensor[(12, 3, 11), float32] {
  @func_2528() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_4261() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %982 = fn () -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
    %978 = @func_1415() /* ty=(Tensor[(12, 3, 11), float32],) */;
    %979 = @func_992() /* ty=(Tensor[(12, 3, 11), float32],) */;
    %980 = %978.0;
    %981 = %979.0;
    (%980, %981)
  };
  %982() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_992() -> (Tensor[(12, 3, 11), float32],) {
  %983 = @func_404() /* ty=Tensor[(12, 3, 11), float32] */;
  (%983,)
}

def @func_4841() -> (Tensor[(12, 3, 11), float32],) {
  %986 = fn () -> (Tensor[(12, 3, 11), float32],) {
    %984 = @func_1334() /* ty=(Tensor[(2, 13, 2), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
    %985 = %984.1;
    (%985,)
  };
  %986() /* ty=(Tensor[(12, 3, 11), float32],) */
}

def @func_3925() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  @func_3923() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_2461() -> (Tensor[(12, 3, 11), float32],) {
  @func_2459() /* ty=(Tensor[(12, 3, 11), float32],) */
}

def @func_2274() -> (Tensor[(12, 3, 11), float32],) {
  %989 = fn () -> (Tensor[(12, 3, 11), float32],) {
    %987 = @func_21() /* ty=(Tensor[(12, 3, 11), float32],) */;
    %988 = %987.0;
    (%988,)
  };
  %989() /* ty=(Tensor[(12, 3, 11), float32],) */
}

def @func_994() -> (Tensor[(12, 3, 11), float32],) {
  @func_992() /* ty=(Tensor[(12, 3, 11), float32],) */
}

def @func_11199(%var_11197: Tensor[(432, 2), bool], %var_11198: Tensor[(432, 2), float32]) -> (Tensor[(12, 3, 11), float32], Tensor[(432, 2), bool], Tensor[(12, 3, 11), float32], Tensor[(432, 2), int32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(432, 2), float64], Tensor[(5, 9, 8), float32], Tensor[(12, 3, 11), float32]) {
  %1035 = fn (%var_11055: Tensor[(432, 2), bool], %var_11110: Tensor[(432, 2), float32]) -> (Tensor[(12, 3, 11), float32], Tensor[(432, 2), bool], Tensor[(12, 3, 11), float32], Tensor[(432, 2), int32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(432, 2), float64], Tensor[(5, 9, 8), float32], Tensor[(12, 3, 11), float32]) {
    %990 = @func_10839() /* ty=(Tensor[(13, 9, 6), bool], Tensor[(140), uint8], Tensor[(1092), float64], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(9, 16, 1), bool], Tensor[(144), uint64], Tensor[(12, 3, 11), float32], Tensor[(7, 3, 1), float32], Tensor[(1092), float64]) */;
    %991 = cast(%var_11055, dtype="bool") /* ty=Tensor[(432, 2), bool] */;
    %992 = reshape(%991, newshape=[864]) /* ty=Tensor[(864), bool] */;
    %993 = @func_7445(%992) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(1, 1092), float32], Tensor[(14, 78), float64], Tensor[(12, 3, 11), float32], Tensor[(864), bool], Tensor[(12, 3, 11), float32]) */;
    %994 = %993.4;
    %995 = cast(%994, dtype="bool") /* ty=Tensor[(864), bool] */;
    %996 = shape_of(%var_11055, dtype="int32") /* ty=Tensor[(2), int32] */;
    %997 = cast(%var_11055, dtype="bool") /* ty=Tensor[(432, 2), bool] */;
    %998 = dyn.reshape(%995, %996, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %999 = @func_1664() /* ty=(Tensor[(12, 3, 11), bool], Tensor[(12, 3, 11), float32]) */;
    %1000 = cast(%994, dtype="int64") /* ty=Tensor[(864), int64] */;
    %1001 = shape_of(%var_11055, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1002 = cast(%var_11055, dtype="int64") /* ty=Tensor[(432, 2), int64] */;
    %1003 = dyn.reshape(%1000, %1001, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %1004 = maximum(%1002, %1003) /* ty=Tensor[(432, 2), int64] */;
    %1005 = cast(%1004, dtype="float32") /* ty=Tensor[(432, 2), float32] */;
    %1006 = tan(%1005) /* ty=Tensor[(432, 2), float32] */;
    %1007 = cast(%var_11110, dtype="int32") /* ty=Tensor[(432, 2), int32] */;
    %1008 = shape_of(%1006, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1009 = cast(%1006, dtype="int32") /* ty=Tensor[(432, 2), int32] */;
    %1010 = dyn.reshape(%1007, %1008, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %1011 = @func_9223() /* ty=(Tensor[(2, 13, 2), bool], Tensor[(572), float32], Tensor[(12, 3, 11), float32]) */;
    %1012 = cast(%1006, dtype="float64") /* ty=Tensor[(432, 2), float64] */;
    %1013 = cosh(%1012) /* ty=Tensor[(432, 2), float64] */;
    %1014 = cast(%1013, dtype="float64") /* ty=Tensor[(432, 2), float64] */;
    %1015 = acos(%1014) /* ty=Tensor[(432, 2), float64] */;
    %1016 = cast(%1015, dtype="float64") /* ty=Tensor[(432, 2), float64] */;
    %1017 = cos(%1016) /* ty=Tensor[(432, 2), float64] */;
    %1018 = cast(%1017, dtype="float32") /* ty=Tensor[(432, 2), float32] */;
    %1019 = shape_of(%1015, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1020 = cast(%1015, dtype="float32") /* ty=Tensor[(432, 2), float32] */;
    %1021 = dyn.reshape(%1018, %1019, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %1022 = divide(%1020, %1021) /* ty=Tensor[(432, 2), float32] */;
    %1023 = cast(%1022, dtype="float64") /* ty=Tensor[(432, 2), float64] */;
    %1024 = @func_6629() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(5, 9, 8), float32]) */;
    %1025 = %990.3;
    %1026 = logical_and(%997, %998) /* ty=Tensor[(432, 2), bool] */;
    %1027 = %999.1;
    %1028 = left_shift(%1009, %1010) /* ty=Tensor[(432, 2), int32] */;
    %1029 = @func_9931() /* ty=Tensor[(12, 3, 11), float32] */;
    %1030 = %1011.2;
    %1031 = @func_2446() /* ty=Tensor[(13, 9, 6), bool] */;
    %1032 = sinh(%1023) /* ty=Tensor[(432, 2), float64] */;
    %1033 = %1024.1;
    %1034 = @func_4483() /* ty=Tensor[(12, 3, 11), float32] */;
    (%1025, %1026, %1027, %1028, %1029, %1030, %1031, %1032, %1033, %1034)
  };
  %1035(%var_11197, %var_11198) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(432, 2), bool], Tensor[(12, 3, 11), float32], Tensor[(432, 2), int32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(432, 2), float64], Tensor[(5, 9, 8), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_4067() -> (Tensor[(11, 4, 13), float64], Tensor[(12, 3, 11), float32]) {
  %1040 = fn () -> (Tensor[(11, 4, 13), float64], Tensor[(12, 3, 11), float32]) {
    %1036 = @func_3062() /* ty=(Tensor[(11, 4, 13), float64],) */;
    %1037 = @func_1334() /* ty=(Tensor[(2, 13, 2), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
    %1038 = %1036.0;
    %1039 = %1037.2;
    (%1038, %1039)
  };
  %1040() /* ty=(Tensor[(11, 4, 13), float64], Tensor[(12, 3, 11), float32]) */
}

def @func_6087() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  @func_6085() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @main() -> (Tensor[(2, 13, 2), float64],) {
  %1041 = @func_9225() /* ty=(Tensor[(2, 13, 2), bool], Tensor[(572), float32], Tensor[(12, 3, 11), float32]) */;
  %1042 = %1041.0;
  %1043 = cast(%1042, dtype="float64") /* ty=Tensor[(2, 13, 2), float64] */;
  %1044 = acosh(%1043) /* ty=Tensor[(2, 13, 2), float64] */;
  (%1044,)
}

def @func_2036(%var_2034: Tensor[(100), float64]) -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(5, 5, 4), float64], Tensor[(100), float64]) {
  @func_2033(%var_2034) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(5, 5, 4), float64], Tensor[(100), float64]) */
}

def @func_6777() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  @func_6775() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_5037() -> (Tensor[(12, 3, 11), float32],) {
  %1047 = fn () -> (Tensor[(12, 3, 11), float32],) {
    %1045 = @func_775() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
    %1046 = %1045.2;
    (%1046,)
  };
  %1047() /* ty=(Tensor[(12, 3, 11), float32],) */
}

def @func_871(%var_869: Tensor[(5, 5, 4), float64]) -> (Tensor[(5, 5, 4), float64],) {
  @func_868(%var_869) /* ty=(Tensor[(5, 5, 4), float64],) */
}

def @func_10034() -> (Tensor[(572), float64],) {
  %1049 = fn () -> (Tensor[(572), float64],) {
    %1048 = @func_5286() /* ty=Tensor[(572), float64] */;
    (%1048,)
  };
  %1049() /* ty=(Tensor[(572), float64],) */
}

def @func_1666() -> (Tensor[(12, 3, 11), bool], Tensor[(12, 3, 11), float32]) {
  @func_1664() /* ty=(Tensor[(12, 3, 11), bool], Tensor[(12, 3, 11), float32]) */
}

def @func_8187() -> (Tensor[(12, 3, 11), float32],) {
  %1050 = @func_1204() /* ty=(Tensor[(2, 13, 2), float32], Tensor[(2, 13, 2), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %1051 = %1050.3;
  (%1051,)
}

def @func_9726() -> (Tensor[(12, 3, 11), float32], Tensor[(9, 16, 1), bool], Tensor[(144), uint64]) {
  @func_9724() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(9, 16, 1), bool], Tensor[(144), uint64]) */
}

def @func_1065(%var_1037: float64) -> (Tensor[(4, 15, 12), float64], Tensor[(7, 3, 1), float32], Tensor[(21), float32]) {
  %1052 = cast(%var_1037, dtype="float64") /* ty=float64 */;
  %1053 = cast(meta[relay.Constant][47] /* ty=Tensor[(4, 15, 12), float64] */, dtype="float64") /* ty=Tensor[(4, 15, 12), float64] */;
  %1054 = cast(meta[relay.Constant][48] /* ty=Tensor[(21), float32] */, dtype="float32") /* ty=Tensor[(21), float32] */;
  %1055 = reshape(%1054, newshape=[7, 3, 1]) /* ty=Tensor[(7, 3, 1), float32] */;
  %1056 = @func_936(%1055) /* ty=(Tensor[(7, 3, 1), float32],) */;
  %1057 = floor_mod(%1052, %1053) /* ty=Tensor[(4, 15, 12), float64] */;
  %1058 = %1056.0;
  (%1057, %1058, meta[relay.Constant][48] /* ty=Tensor[(21), float32] */)
}

def @func_2528() -> Tensor[(12, 3, 11), float32] {
  @func_404() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_9724() -> (Tensor[(12, 3, 11), float32], Tensor[(9, 16, 1), bool], Tensor[(144), uint64]) {
  %1059 = @func_5036() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %1060 = cast(meta[relay.Constant][49] /* ty=Tensor[(144), uint64] */, dtype="uint64") /* ty=Tensor[(144), uint64] */;
  %1061 = reshape(%1060, newshape=[9, 16, 1]) /* ty=Tensor[(9, 16, 1), uint64] */;
  %1062 = %1059.0;
  %1063 = @func_4908(%1061) /* ty=Tensor[(9, 16, 1), bool] */;
  (%1062, %1063, meta[relay.Constant][49] /* ty=Tensor[(144), uint64] */)
}

def @func_6758(%var_6755: uint8, %var_6756: Tensor[(4, 52), uint8], %var_6757: Tensor[(176), float64]) -> (Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], uint8, Tensor[(4, 52), uint8], Tensor[(176), float64]) {
  %1074 = fn (%var_6747: uint8, %var_6748: Tensor[(4, 52), uint8], %var_6749: Tensor[(176), float64]) -> (Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], uint8, Tensor[(4, 52), uint8], Tensor[(176), float64]) {
    %1064 = @func_1664() /* ty=(Tensor[(12, 3, 11), bool], Tensor[(12, 3, 11), float32]) */;
    %1065 = cast(%var_6747, dtype="uint8") /* ty=uint8 */;
    %1066 = cast(%var_6748, dtype="uint8") /* ty=Tensor[(4, 52), uint8] */;
    %1067 = cast(%var_6749, dtype="float64") /* ty=Tensor[(176), float64] */;
    %1068 = reshape(%1065, newshape=[]) /* ty=uint8 */;
    %1069 = reshape(%1066, newshape=[13, 16, 1]) /* ty=Tensor[(13, 16, 1), uint8] */;
    %1070 = reshape(%1067, newshape=[176]) /* ty=Tensor[(176), float64] */;
    %1071 = @func_1744(%1068, %1069, %1070) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(176), bool], Tensor[(13, 16, 176), bool]) */;
    %1072 = %1064.1;
    %1073 = %1071.0;
    (%1072, %1073, %var_6747, %var_6748, %var_6749)
  };
  %1074(%var_6755, %var_6756, %var_6757) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], uint8, Tensor[(4, 52), uint8], Tensor[(176), float64]) */
}

def @func_7408() -> Tensor[(12, 3, 11), float32] {
  @func_7406() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_7650() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %1079 = fn () -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
    %1075 = @func_1836() /* ty=(Tensor[(12, 3, 11), float32],) */;
    %1076 = @func_2368() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
    %1077 = %1075.0;
    %1078 = %1076.2;
    (%1077, %1078)
  };
  %1079() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_4745(%var_4743: Tensor[(9, 11, 5), int64], %var_4744: Tensor[(9, 11, 5), int64]) -> (Tensor[(9, 11, 5), int64], Tensor[(12, 3, 11), float32], Tensor[(9, 11, 5), int16]) {
  @func_4741(%var_4743, %var_4744) /* ty=(Tensor[(9, 11, 5), int64], Tensor[(12, 3, 11), float32], Tensor[(9, 11, 5), int16]) */
}

def @func_5545(%var_5507: Tensor[(1, 1092), float64]) -> (Tensor[(2, 13, 2), float32], Tensor[(396), float64], Tensor[(12, 3, 11), bool], Tensor[(1, 1092), float32]) {
  %1080 = @func_1334() /* ty=(Tensor[(2, 13, 2), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %1081 = cast(%var_5507, dtype="float64") /* ty=Tensor[(1, 1092), float64] */;
  %1082 = reshape(%1081, newshape=[6, 13, 14]) /* ty=Tensor[(6, 13, 14), float64] */;
  %1083 = @func_670(%1082) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(6, 13, 14), int8], Tensor[(12, 3, 11), float32], Tensor[(396), float64], Tensor[(12, 3, 11), float32]) */;
  %1084 = %1083.3;
  %1085 = cast(%1084, dtype="float32") /* ty=Tensor[(396), float32] */;
  %1086 = reshape(%1085, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
  %1087 = cast(%var_5507, dtype="float32") /* ty=Tensor[(1, 1092), float32] */;
  %1088 = %1080.0;
  %1089 = @func_3114(%1086) /* ty=Tensor[(12, 3, 11), bool] */;
  %1090 = asin(%1087) /* ty=Tensor[(1, 1092), float32] */;
  (%1088, %1084, %1089, %1090)
}

def @func_5950(%var_5948: Tensor[(6, 10, 14), float64]) -> Tensor[(6, 10, 14), float64] {
  @func_5947(%var_5948) /* ty=Tensor[(6, 10, 14), float64] */
}

def @func_5908() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %1095 = fn () -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
    %1091 = @func_992() /* ty=(Tensor[(12, 3, 11), float32],) */;
    %1092 = @func_1386() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(364), uint64]) */;
    %1093 = %1091.0;
    %1094 = %1092.1;
    (%1093, %1094)
  };
  %1095() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_10137(%var_10135: float32, %var_10136: Tensor[(13, 1, 11), float32]) -> Tensor[(13, 1, 11), float32] {
  @func_10133(%var_10135, %var_10136) /* ty=Tensor[(13, 1, 11), float32] */
}

def @func_10446() -> (Tensor[(12, 3, 11), float32], Tensor[(364), uint64], Tensor[(14, 78), float64]) {
  %1096 = @func_252() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) */;
  %1097 = cast(meta[relay.Constant][50] /* ty=Tensor[(14, 78), float64] */, dtype="float64") /* ty=Tensor[(14, 78), float64] */;
  %1098 = reshape(%1097, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %1099 = @func_2195(%1098) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(364), uint64], Tensor[(1092), float64], Tensor[(1092), float64]) */;
  %1100 = %1096.1;
  %1101 = %1099.3;
  (%1100, %1101, meta[relay.Constant][50] /* ty=Tensor[(14, 78), float64] */)
}

def @func_7699() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %1105 = fn () -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
    %1102 = @func_5841() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
    %1103 = @func_2973() /* ty=Tensor[(12, 3, 11), float32] */;
    %1104 = %1102.4;
    (%1103, %1104)
  };
  %1105() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_9321() -> (Tensor[(12, 3, 11), float32],) {
  @func_9319() /* ty=(Tensor[(12, 3, 11), float32],) */
}

def @func_10109() -> Tensor[(12, 3, 11), float32] {
  %1106 = @func_4840() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %1106.0
}

def @func_9177(%var_9175: Tensor[(3, 7, 3), float64]) -> (Tensor[(3, 7, 3), bool], Tensor[(5, 3, 5), float32]) {
  @func_9174(%var_9175) /* ty=(Tensor[(3, 7, 3), bool], Tensor[(5, 3, 5), float32]) */
}

def @func_8552(%var_8546: uint64, %var_8547: Tensor[(4, 3, 7), uint64]) -> (Tensor[(4, 3, 7), uint64],) {
  %1107 = cast(%var_8546, dtype="uint64") /* ty=uint64 */;
  %1108 = cast(%var_8547, dtype="uint64") /* ty=Tensor[(4, 3, 7), uint64] */;
  %1109 = minimum(%1107, %1108) /* ty=Tensor[(4, 3, 7), uint64] */;
  (%1109,)
}

def @func_1664() -> (Tensor[(12, 3, 11), bool], Tensor[(12, 3, 11), float32]) {
  %1110 = @func_404() /* ty=Tensor[(12, 3, 11), float32] */;
  %1111 = cast(%1110, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
  %1112 = cosh(%1111) /* ty=Tensor[(12, 3, 11), float32] */;
  %1113 = cast(%1110, dtype="bool") /* ty=Tensor[(12, 3, 11), bool] */;
  %1114 = shape_of(%1112, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1115 = cast(%1112, dtype="bool") /* ty=Tensor[(12, 3, 11), bool] */;
  %1116 = dyn.reshape(%1113, %1114, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1117 = greater(%1115, %1116) /* ty=Tensor[(12, 3, 11), bool] */;
  %1118 = @func_404() /* ty=Tensor[(12, 3, 11), float32] */;
  (%1117, %1118)
}

def @func_5333() -> (Tensor[(12, 3, 11), float32],) {
  %1119 = @func_142() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
  %1120 = %1119.0;
  (%1120,)
}

def @func_896(%var_895: Tensor[(11, 4, 13), float64]) -> (Tensor[(11, 4, 13), float64], Tensor[(5, 5, 4), float64], Tensor[(100), float64]) {
  %1127 = fn (%var_885: Tensor[(11, 4, 13), float64]) -> (Tensor[(11, 4, 13), float64], Tensor[(5, 5, 4), float64], Tensor[(100), float64]) {
    %1121 = cast(%var_885, dtype="float64") /* ty=Tensor[(11, 4, 13), float64] */;
    %1122 = cast(meta[relay.Constant][51] /* ty=Tensor[(100), float64] */, dtype="float64") /* ty=Tensor[(100), float64] */;
    %1123 = reshape(%1122, newshape=[5, 5, 4]) /* ty=Tensor[(5, 5, 4), float64] */;
    %1124 = @func_868(%1123) /* ty=(Tensor[(5, 5, 4), float64],) */;
    %1125 = log10(%1121) /* ty=Tensor[(11, 4, 13), float64] */;
    %1126 = %1124.0;
    (%1125, %1126, meta[relay.Constant][51] /* ty=Tensor[(100), float64] */)
  };
  %1127(%var_895) /* ty=(Tensor[(11, 4, 13), float64], Tensor[(5, 5, 4), float64], Tensor[(100), float64]) */
}

def @func_2770() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %1128 = @func_2712() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %1129 = @func_974() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %1130 = %1128.0;
  %1131 = %1129.1;
  (%1130, %1131)
}

def @func_7790() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  @func_7788() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_1334() -> (Tensor[(2, 13, 2), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %1132 = @func_1204() /* ty=(Tensor[(2, 13, 2), float32], Tensor[(2, 13, 2), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %1133 = @func_21() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %1134 = %1132.0;
  %1135 = @func_404() /* ty=Tensor[(12, 3, 11), float32] */;
  %1136 = %1133.0;
  (%1134, %1135, %1136)
}

def @func_10644() -> (Tensor[(12, 3, 11), float64], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %1137 = @func_3031() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float64]) */;
  %1138 = @func_4965() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %1139 = %1137.2;
  %1140 = %1138.0;
  %1141 = @func_7979() /* ty=Tensor[(12, 3, 11), float32] */;
  (%1139, %1140, %1141)
}

def @func_9136() -> Tensor[(2, 13, 2), float32] {
  %1143 = fn () -> Tensor[(2, 13, 2), float32] {
    %1142 = @func_1334() /* ty=(Tensor[(2, 13, 2), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
    %1142.0
  };
  %1143() /* ty=Tensor[(2, 13, 2), float32] */
}

def @func_10433() -> (Tensor[(12, 3, 11), float32], Tensor[(208), uint8], Tensor[(4, 4, 11), float64]) {
  %1151 = fn () -> (Tensor[(12, 3, 11), float32], Tensor[(208), uint8], Tensor[(4, 4, 11), float64]) {
    %1144 = @func_4332() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(176), float64], Tensor[(13, 16, 176), bool], uint8, Tensor[(208), uint8], Tensor[(13, 16, 176), bool]) */;
    %1145 = @func_9630() /* ty=Tensor[(12, 3, 11), float32] */;
    %1146 = cast(%1145, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
    %1147 = reshape(%1146, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
    %1148 = @func_4129(%1147) /* ty=(Tensor[(12, 3, 11), int8], Tensor[(12, 3, 11), float32], Tensor[(4, 4, 11), float64], Tensor[(176), float64]) */;
    %1149 = %1144.5;
    %1150 = %1148.2;
    (%1145, %1149, %1150)
  };
  %1151() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(208), uint8], Tensor[(4, 4, 11), float64]) */
}

def @func_314(%var_312: Tensor[(4, 4, 11), float64], %var_313: Tensor[(4, 4, 11), float64]) -> (Tensor[(4, 4, 11), float64], Tensor[(13, 9, 6), bool], Tensor[(396), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) {
  %1166 = fn (%var_276: Tensor[(4, 4, 11), float64], %var_277: Tensor[(4, 4, 11), float64]) -> (Tensor[(4, 4, 11), float64], Tensor[(13, 9, 6), bool], Tensor[(396), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) {
    %1152 = cast(%var_277, dtype="float64") /* ty=Tensor[(4, 4, 11), float64] */;
    %1153 = shape_of(%var_276, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1154 = cast(%var_276, dtype="float64") /* ty=Tensor[(4, 4, 11), float64] */;
    %1155 = dyn.reshape(%1152, %1153, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1156 = cast(meta[relay.Constant][52] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
    %1157 = reshape(%1156, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
    %1158 = @func_67(%1157) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
    %1159 = @func_231() /* ty=Tensor[(12, 3, 11), float32] */;
    %1160 = cast(%1159, dtype="float32") /* ty=Tensor[(12, 3, 11), float32] */;
    %1161 = reshape(%1160, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), float32] */;
    %1162 = @func_67(%1161) /* ty=(Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32]) */;
    %1163 = power(%1154, %1155) /* ty=Tensor[(4, 4, 11), float64] */;
    %1164 = %1158.0;
    %1165 = %1162.0;
    (%1163, %1164, meta[relay.Constant][52] /* ty=Tensor[(396), float32] */, %1159, %1165)
  };
  %1166(%var_312, %var_313) /* ty=(Tensor[(4, 4, 11), float64], Tensor[(13, 9, 6), bool], Tensor[(396), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) */
}

def @func_4792() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float64]) {
  @func_4790() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float64]) */
}

def @func_2854(%var_2826: Tensor[(4, 7, 5), uint8]) -> (Tensor[(12, 3, 11), float32], Tensor[(1092), float64], Tensor[(4, 7, 5), float32]) {
  %1167 = cast(meta[relay.Constant][53] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %1168 = reshape(%1167, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %1169 = @func_2195(%1168) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(364), uint64], Tensor[(1092), float64], Tensor[(1092), float64]) */;
  %1170 = cast(meta[relay.Constant][54] /* ty=Tensor[(4, 1, 5), uint8] */, dtype="uint8") /* ty=Tensor[(4, 1, 5), uint8] */;
  %1171 = cast(%var_2826, dtype="uint8") /* ty=Tensor[(4, 7, 5), uint8] */;
  %1172 = left_shift(%1170, %1171) /* ty=Tensor[(4, 7, 5), uint8] */;
  %1173 = cast(%1172, dtype="float32") /* ty=Tensor[(4, 7, 5), float32] */;
  %1174 = %1169.0;
  %1175 = cos(%1173) /* ty=Tensor[(4, 7, 5), float32] */;
  (%1174, meta[relay.Constant][53] /* ty=Tensor[(1092), float64] */, %1175)
}

def @func_9033() -> Tensor[(12, 3, 11), float32] {
  %1176 = fn () -> Tensor[(12, 3, 11), float32] {
    @func_2094() /* ty=Tensor[(12, 3, 11), float32] */
  };
  %1176() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_1598() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %1181 = fn () -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
    %1177 = @func_1334() /* ty=(Tensor[(2, 13, 2), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
    %1178 = @func_1334() /* ty=(Tensor[(2, 13, 2), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
    %1179 = %1177.2;
    %1180 = %1178.1;
    (%1179, %1180)
  };
  %1181() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_10918() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %1185 = fn () -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
    %1182 = @func_3923() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
    %1183 = @func_7135() /* ty=Tensor[(12, 3, 11), float32] */;
    %1184 = %1182.0;
    (%1183, %1184)
  };
  %1185() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_2448() -> Tensor[(13, 9, 6), bool] {
  @func_2446() /* ty=Tensor[(13, 9, 6), bool] */
}

def @func_6471() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
  %1191 = fn () -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) {
    %1186 = @func_5996() /* ty=(Tensor[(12, 3, 11), float32],) */;
    %1187 = @func_21() /* ty=(Tensor[(12, 3, 11), float32],) */;
    %1188 = %1186.0;
    %1189 = %1187.0;
    %1190 = @func_3568() /* ty=Tensor[(12, 3, 11), float32] */;
    (%1188, %1189, %1190)
  };
  %1191() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */
}

def @func_11024() -> (Tensor[(572), float32], Tensor[(144), uint64]) {
  %1196 = fn () -> (Tensor[(572), float32], Tensor[(144), uint64]) {
    %1192 = @func_7623() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(572), float32]) */;
    %1193 = @func_9802() /* ty=(Tensor[(144), uint64], Tensor[(13, 9, 6), bool]) */;
    %1194 = %1192.1;
    %1195 = %1193.0;
    (%1194, %1195)
  };
  %1196() /* ty=(Tensor[(572), float32], Tensor[(144), uint64]) */
}

def @func_2302(%var_2300: int32, %var_2301: Tensor[(1, 13), int32]) -> (Tensor[(1, 13), bool],) {
  %1200 = fn (%var_2285: int32, %var_2286: Tensor[(1, 13), int32]) -> (Tensor[(1, 13), bool],) {
    %1197 = cast(%var_2285, dtype="bool") /* ty=bool */;
    %1198 = cast(%var_2286, dtype="bool") /* ty=Tensor[(1, 13), bool] */;
    %1199 = not_equal(%1197, %1198) /* ty=Tensor[(1, 13), bool] */;
    (%1199,)
  };
  %1200(%var_2300, %var_2301) /* ty=(Tensor[(1, 13), bool],) */
}

def @func_4334() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(176), float64], Tensor[(13, 16, 176), bool], uint8, Tensor[(208), uint8], Tensor[(13, 16, 176), bool]) {
  @func_4332() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(176), float64], Tensor[(13, 16, 176), bool], uint8, Tensor[(208), uint8], Tensor[(13, 16, 176), bool]) */
}

def @func_1959() -> Tensor[(12, 3, 11), float32] {
  @func_1957() /* ty=Tensor[(12, 3, 11), float32] */
}

def @func_8155() -> (Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(5, 9, 8), float32], Tensor[(13, 9, 6), bool]) {
  %1201 = @func_4840() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %1202 = @func_6629() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(5, 9, 8), float32]) */;
  %1203 = @func_5841() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %1204 = @func_404() /* ty=Tensor[(12, 3, 11), float32] */;
  %1205 = %1201.0;
  %1206 = %1202.1;
  %1207 = %1203.1;
  (%1204, %1205, %1206, %1207)
}

def @func_467(%var_465: Tensor[(13, 7, 4), uint64]) -> (Tensor[(13, 7, 4), uint64], Tensor[(12, 3, 11), float32], Tensor[(396), float32]) {
  @func_464(%var_465) /* ty=(Tensor[(13, 7, 4), uint64], Tensor[(12, 3, 11), float32], Tensor[(396), float32]) */
}

def @func_10601(%var_10600: Tensor[(5, 2, 5), uint32]) -> (Tensor[(5, 2, 5), bool],) {
  %1213 = fn (%var_10579: Tensor[(5, 2, 5), uint32]) -> (Tensor[(5, 2, 5), bool],) {
    %1208 = cast(meta[relay.Constant][55] /* ty=Tensor[(5, 2, 5), uint32] */, dtype="bool") /* ty=Tensor[(5, 2, 5), bool] */;
    %1209 = shape_of(%var_10579, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1210 = cast(%var_10579, dtype="bool") /* ty=Tensor[(5, 2, 5), bool] */;
    %1211 = dyn.reshape(%1208, %1209, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1212 = not_equal(%1210, %1211) /* ty=Tensor[(5, 2, 5), bool] */;
    (%1212,)
  };
  %1213(%var_10600) /* ty=(Tensor[(5, 2, 5), bool],) */
}

def @func_3116(%var_3115: Tensor[(12, 3, 11), float32]) -> Tensor[(12, 3, 11), bool] {
  %1220 = fn (%var_3093: Tensor[(12, 3, 11), float32]) -> Tensor[(12, 3, 11), bool] {
    %1214 = @func_3031() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float64]) */;
    %1215 = %1214.1;
    %1216 = cast(%var_3093, dtype="bool") /* ty=Tensor[(12, 3, 11), bool] */;
    %1217 = shape_of(%1215, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1218 = cast(%1215, dtype="bool") /* ty=Tensor[(12, 3, 11), bool] */;
    %1219 = dyn.reshape(%1216, %1217, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%1218, %1219) /* ty=Tensor[(12, 3, 11), bool] */
  };
  %1220(%var_3115) /* ty=Tensor[(12, 3, 11), bool] */
}

def @func_7936() -> (Tensor[(13, 9, 6), bool], Tensor[(12, 3, 11), float32], Tensor[(176), float64], Tensor[(1092), uint64], Tensor[(396), bool], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), int8]) {
  %1221 = cast(meta[relay.Constant][56] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %1222 = reshape(%1221, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %1223 = @func_2195(%1222) /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32], Tensor[(364), uint64], Tensor[(1092), float64], Tensor[(1092), float64]) */;
  %1224 = cast(meta[relay.Constant][58] /* ty=Tensor[(1092), float64] */, dtype="uint64") /* ty=Tensor[(1092), uint64] */;
  %1225 = shape_of(meta[relay.Constant][56] /* ty=Tensor[(1092), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1226 = cast(meta[relay.Constant][56] /* ty=Tensor[(1092), float64] */, dtype="uint64") /* ty=Tensor[(1092), uint64] */;
  %1227 = dyn.reshape(%1224, %1225, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %1228 = cast(meta[relay.Constant][57] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %1229 = cast(meta[relay.Constant][57] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %1230 = reshape(%1228, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
  %1231 = reshape(%1229, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
  %1232 = @func_311(%1230, %1231) /* ty=(Tensor[(4, 4, 11), float64], Tensor[(13, 9, 6), bool], Tensor[(396), float32], Tensor[(12, 3, 11), float32], Tensor[(13, 9, 6), bool]) */;
  %1233 = %1232.2;
  %1234 = @func_7788() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), float32]) */;
  %1235 = %1234.0;
  %1236 = cast(%1235, dtype="bool") /* ty=Tensor[(12, 3, 11), bool] */;
  %1237 = shape_of(%1233, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1238 = cast(%1233, dtype="bool") /* ty=Tensor[(396), bool] */;
  %1239 = dyn.reshape(%1236, %1237, newshape=[]) /* ty=Tensor[(?), bool] */;
  %1240 = @func_2273() /* ty=(Tensor[(12, 3, 11), float32],) */;
  %1241 = @func_5873() /* ty=(Tensor[(12, 3, 11), float32], Tensor[(12, 3, 11), int8]) */;
  %1242 = @func_2446() /* ty=Tensor[(13, 9, 6), bool] */;
  %1243 = %1223.0;
  %1244 = right_shift(%1226, %1227) /* ty=Tensor[(1092), uint64] */;
  %1245 = less_equal(%1238, %1239) /* ty=Tensor[(396), bool] */;
  %1246 = %1240.0;
  %1247 = %1241.1;
  (%1242, %1243, meta[relay.Constant][57] /* ty=Tensor[(176), float64] */, %1244, %1245, %1246, %1247)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen246/build/output.py", line 4152, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:00:36] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

