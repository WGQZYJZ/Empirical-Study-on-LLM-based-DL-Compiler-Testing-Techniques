==========mod==========
#[version = "0.0.5"]
def @func_8342(%var_8329: Tensor[(180), float64]) -> (Tensor[(75, 2), float64], Tensor[(5, 6, 6), float64], Tensor[(660), float32], Tensor[(180), float64]) {
  %0 = @func_6673() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(16, 12, 9), float32], Tensor[(288, 6), float64], Tensor[(90), int8], Tensor[(5, 6, 6), float64], Tensor[(13, 12, 13), float64], Tensor[(140), float32], Tensor[(70, 2), float32], Tensor[(5, 132), uint32], Tensor[(13, 12, 13), float64], Tensor[(75, 2), float64], Tensor[(4, 4, 13), float32], Tensor[(52, 4), float32], Tensor[(144), float32], Tensor[(75, 2), float64]) */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
  %2 = cast(%var_8329, dtype="float64") /* ty=Tensor[(180), float64] */;
  %3 = reshape(%1, newshape=[11, 15, 4]) /* ty=Tensor[(11, 15, 4), float32] */;
  %4 = reshape(%2, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %5 = @func_311(%3, %4) /* ty=(Tensor[(11, 15, 4), float32], Tensor[(5, 6, 6), float64], Tensor[(180), float64]) */;
  %6 = %0.10;
  %7 = %5.1;
  (%6, %7, meta[relay.Constant][0] /* ty=Tensor[(660), float32] */, %var_8329)
}

def @func_6463() -> Tensor[(13, 12, 13), float64] {
  %8 = @func_6328() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %8.0
}

def @func_9437() -> Tensor[(13, 12, 13), float64] {
  @func_5749() /* ty=Tensor[(13, 12, 13), float64] */
}

def @func_11376(%var_11371: Tensor[(4, 10, 14), float32]) -> (Tensor[(4, 10, 14), float32],) {
  %9 = cast(%var_11371, dtype="float32") /* ty=Tensor[(4, 10, 14), float32] */;
  %10 = log2(%9) /* ty=Tensor[(4, 10, 14), float32] */;
  (%10,)
}

def @func_1888(%var_1771: Tensor[(2, 15, 5), float64], %var_1800: Tensor[(660), float32], %var_1801: Tensor[(180), float64]) -> (Tensor[(180), float64], Tensor[(660), float32], Tensor[(180), float64], Tensor[(2, 15, 5), int16], Tensor[(5, 6, 6), float64], Tensor[(2, 15, 5), uint32], Tensor[(13, 3, 8), float64], Tensor[(5, 6, 6), float64], Tensor[(180), float64]) {
  %11 = cast(%var_1800, dtype="float32") /* ty=Tensor[(660), float32] */;
  %12 = cast(%var_1801, dtype="float64") /* ty=Tensor[(180), float64] */;
  %13 = reshape(%11, newshape=[11, 15, 4]) /* ty=Tensor[(11, 15, 4), float32] */;
  %14 = reshape(%12, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %15 = @func_311(%13, %14) /* ty=(Tensor[(11, 15, 4), float32], Tensor[(5, 6, 6), float64], Tensor[(180), float64]) */;
  %16 = cast(%var_1771, dtype="float64") /* ty=Tensor[(2, 15, 5), float64] */;
  %17 = sigmoid(%16) /* ty=Tensor[(2, 15, 5), float64] */;
  %18 = cast(meta[relay.Constant][1] /* ty=Tensor[(2, 15, 5), float64] */, dtype="int16") /* ty=Tensor[(2, 15, 5), int16] */;
  %19 = shape_of(%17, dtype="int32") /* ty=Tensor[(3), int32] */;
  %20 = cast(%17, dtype="int16") /* ty=Tensor[(2, 15, 5), int16] */;
  %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %22 = %15.2;
  %23 = cast(%22, dtype="float64") /* ty=Tensor[(180), float64] */;
  %24 = reshape(%23, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), float64] */;
  %25 = cast(%17, dtype="float32") /* ty=Tensor[(2, 15, 5), float32] */;
  %26 = rsqrt(%25) /* ty=Tensor[(2, 15, 5), float32] */;
  %27 = cast(%17, dtype="uint32") /* ty=Tensor[(2, 15, 5), uint32] */;
  %28 = shape_of(%26, dtype="int32") /* ty=Tensor[(3), int32] */;
  %29 = cast(%26, dtype="uint32") /* ty=Tensor[(2, 15, 5), uint32] */;
  %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %31 = cast(%var_1800, dtype="float32") /* ty=Tensor[(660), float32] */;
  %32 = reshape(%31, newshape=[660]) /* ty=Tensor[(660), float32] */;
  %33 = @func_680(%32) /* ty=(Tensor[(13, 3, 8), float64], Tensor[(180), float64], Tensor[(660), float32], Tensor[(180), float64]) */;
  %34 = cast(%var_1800, dtype="float32") /* ty=Tensor[(660), float32] */;
  %35 = cast(%22, dtype="float64") /* ty=Tensor[(180), float64] */;
  %36 = reshape(%34, newshape=[11, 4, 15]) /* ty=Tensor[(11, 4, 15), float32] */;
  %37 = reshape(%35, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %38 = @func_488(%36, %37) /* ty=(Tensor[(5, 6, 6), float64], Tensor[(180), float64], Tensor[(11, 4, 15), uint16], Tensor[(5, 6, 6), float64]) */;
  %39 = cast(%var_1800, dtype="float32") /* ty=Tensor[(660), float32] */;
  %40 = @func_212(%24) /* ty=Tensor[(5, 6, 6), float64] */;
  %41 = cast(%40, dtype="float64") /* ty=Tensor[(5, 6, 6), float64] */;
  %42 = reshape(%39, newshape=[11, 15, 4]) /* ty=Tensor[(11, 15, 4), float32] */;
  %43 = reshape(%41, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %44 = @func_311(%42, %43) /* ty=(Tensor[(11, 15, 4), float32], Tensor[(5, 6, 6), float64], Tensor[(180), float64]) */;
  %45 = bitwise_and(%20, %21) /* ty=Tensor[(2, 15, 5), int16] */;
  %46 = minimum(%29, %30) /* ty=Tensor[(2, 15, 5), uint32] */;
  %47 = %33.0;
  %48 = %38.3;
  %49 = %44.2;
  (%22, %var_1800, %var_1801, %45, %40, %46, %47, %48, %49)
}

def @func_212(%var_183: Tensor[(5, 6, 6), float64]) -> Tensor[(5, 6, 6), float64] {
  %50 = cast(%var_183, dtype="float64") /* ty=Tensor[(5, 6, 6), float64] */;
  tan(%50) /* ty=Tensor[(5, 6, 6), float64] */
}

def @func_8246() -> (Tensor[(16), int16],) {
  %51 = @func_6210() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), int16], Tensor[(16), int16]) */;
  %52 = %51.2;
  (%52,)
}

def @func_11230() -> (Tensor[(13, 12, 13), float64],) {
  %53 = @func_6436() /* ty=Tensor[(13, 12, 13), float64] */;
  (%53,)
}

def @func_4315(%var_4304: Tensor[(1, 4, 4), int16]) -> (Tensor[(?, 4, 4), int16],) {
  %54 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 4, 4), int16] */, dtype="int16") /* ty=Tensor[(1, 4, 4), int16] */;
  %55 = shape_of(%var_4304, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(%var_4304, dtype="int16") /* ty=Tensor[(1, 4, 4), int16] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %58 = bitwise_or(%56, %57) /* ty=Tensor[(?, 4, 4), int16] */;
  (%58,)
}

def @func_4947(%var_4933: Tensor[(144), float32], %var_4935: Tensor[(90), int8], %var_4937: Tensor[(90, 2), float64]) -> (Tensor[(13, 12, 13), float64], Tensor[(144), float32], Tensor[(90), int8], Tensor[(660), uint32], Tensor[(90, 2), float64], Tensor[(1584), bool]) {
  %59 = @func_4924() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %60 = cast(%var_4933, dtype="float32") /* ty=Tensor[(144), float32] */;
  %61 = cast(meta[relay.Constant][4] /* ty=Tensor[(1584), float32] */, dtype="float32") /* ty=Tensor[(1584), float32] */;
  %62 = cast(%var_4935, dtype="int8") /* ty=Tensor[(90), int8] */;
  %63 = cast(meta[relay.Constant][3] /* ty=Tensor[(660), uint32] */, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %64 = cast(%var_4937, dtype="float64") /* ty=Tensor[(90, 2), float64] */;
  %65 = reshape(%60, newshape=[12, 12, 1]) /* ty=Tensor[(12, 12, 1), float32] */;
  %66 = reshape(%61, newshape=[12, 12, 11]) /* ty=Tensor[(12, 12, 11), float32] */;
  %67 = reshape(%62, newshape=[90]) /* ty=Tensor[(90), int8] */;
  %68 = reshape(%63, newshape=[110, 6]) /* ty=Tensor[(110, 6), uint32] */;
  %69 = reshape(%64, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %70 = @func_2906(%65, %66, %67, %68, %69) /* ty=(Tensor[(12, 12, 11), bool], Tensor[(2, 9, 5), bool], Tensor[(90), int8], Tensor[(110, 6), uint32], Tensor[(150), float64], Tensor[(5, 6, 6), float64], Tensor[(180), float64], Tensor[(180), float64]) */;
  %71 = %70.0;
  %72 = cast(%71, dtype="bool") /* ty=Tensor[(12, 12, 11), bool] */;
  %73 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(1584), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %74 = cast(meta[relay.Constant][4] /* ty=Tensor[(1584), float32] */, dtype="bool") /* ty=Tensor[(1584), bool] */;
  %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?), bool] */;
  %76 = %59.0;
  %77 = logical_and(%74, %75) /* ty=Tensor[(1584), bool] */;
  (%76, %var_4933, %var_4935, meta[relay.Constant][3] /* ty=Tensor[(660), uint32] */, %var_4937, %77)
}

def @func_8444() -> (Tensor[(13, 12, 13), float64],) {
  %78 = @func_6553() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %79 = %78.0;
  %80 = cast(%79, dtype="float64") /* ty=Tensor[(13, 12, 13), float64] */;
  %81 = erf(%80) /* ty=Tensor[(13, 12, 13), float64] */;
  (%81,)
}

def @func_6339() -> (Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(99), float32]) {
  %82 = @func_6328() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %83 = cast(meta[relay.Constant][5] /* ty=Tensor[(99), float32] */, dtype="float32") /* ty=Tensor[(99), float32] */;
  %84 = reshape(%83, newshape=[99]) /* ty=Tensor[(99), float32] */;
  %85 = @func_5384(%84) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(3, 3, 11), float32], Tensor[(99), float32]) */;
  %86 = %82.0;
  %87 = %85.0;
  (%86, %87, meta[relay.Constant][5] /* ty=Tensor[(99), float32] */)
}

def @func_10283(%var_10249: Tensor[(13, 12, 13), float64]) -> (Tensor[(13, 12, 13), float64], Tensor[(660, 1), uint32], Tensor[(162, 4), float64], Tensor[(144), float32], Tensor[(90), int8]) {
  %88 = @func_9406() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %89 = %88.0;
  %90 = cast(%var_10249, dtype="float64") /* ty=Tensor[(13, 12, 13), float64] */;
  %91 = shape_of(%89, dtype="int32") /* ty=Tensor[(3), int32] */;
  %92 = cast(%89, dtype="float64") /* ty=Tensor[(13, 12, 13), float64] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %94 = cast(meta[relay.Constant][6] /* ty=Tensor[(162, 4), float64] */, dtype="float64") /* ty=Tensor[(162, 4), float64] */;
  %95 = cast(meta[relay.Constant][7] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %96 = cast(meta[relay.Constant][8] /* ty=Tensor[(90), int8] */, dtype="int8") /* ty=Tensor[(90), int8] */;
  %97 = reshape(%94, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float64] */;
  %98 = reshape(%95, newshape=[2, 72]) /* ty=Tensor[(2, 72), float32] */;
  %99 = reshape(%96, newshape=[90]) /* ty=Tensor[(90), int8] */;
  %100 = @func_3471(%97, %98, %99) /* ty=(Tensor[(9, 9, 8), float64], Tensor[(110, 6), uint32], Tensor[(2, 72), float32], Tensor[(1584), float32], Tensor[(90), int8], Tensor[(660, 1), uint32], Tensor[(3, 60), float64]) */;
  %101 = multiply(%92, %93) /* ty=Tensor[(13, 12, 13), float64] */;
  %102 = %100.5;
  (%101, %102, meta[relay.Constant][6] /* ty=Tensor[(162, 4), float64] */, meta[relay.Constant][7] /* ty=Tensor[(144), float32] */, meta[relay.Constant][8] /* ty=Tensor[(90), int8] */)
}

def @func_7402() -> (Tensor[(13, 12, 13), float64],) {
  %103 = @func_6463() /* ty=Tensor[(13, 12, 13), float64] */;
  (%103,)
}

def @func_6088(%var_6057: Tensor[(150), float64]) -> (Tensor[(13, 12, 13), float64], Tensor[(2, 9, 5), float32], Tensor[(90), int8], Tensor[(660), uint32], Tensor[(150), float64]) {
  %104 = @func_5295() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %105 = cast(meta[relay.Constant][9] /* ty=Tensor[(90), int8] */, dtype="int8") /* ty=Tensor[(90), int8] */;
  %106 = cast(meta[relay.Constant][10] /* ty=Tensor[(660), uint32] */, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %107 = cast(%var_6057, dtype="float64") /* ty=Tensor[(150), float64] */;
  %108 = reshape(%105, newshape=[2, 9, 5]) /* ty=Tensor[(2, 9, 5), int8] */;
  %109 = reshape(%106, newshape=[660]) /* ty=Tensor[(660), uint32] */;
  %110 = reshape(%107, newshape=[1, 150]) /* ty=Tensor[(1, 150), float64] */;
  %111 = @func_2306(%108, %109, %110) /* ty=(Tensor[(2, 9, 5), bool], Tensor[(660), uint32], Tensor[(?, 150), bool], Tensor[(2, 9, 5), float32]) */;
  %112 = %104.0;
  %113 = %111.3;
  (%112, %113, meta[relay.Constant][9] /* ty=Tensor[(90), int8] */, meta[relay.Constant][10] /* ty=Tensor[(660), uint32] */, %var_6057)
}

def @func_8832(%var_8794: Tensor[(4, 4, 13), float32], %var_8825: Tensor[(140), float32]) -> (Tensor[(13, 12, 13), float64], Tensor[(4, 4, 13), float64], Tensor[(660), uint32], Tensor[(140), float32], Tensor[(660), uint32]) {
  %114 = @func_6210() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), int16], Tensor[(16), int16]) */;
  %115 = @func_7105() /* ty=(Tensor[(4, 4, 13), float32],) */;
  %116 = %115.0;
  %117 = cast(%var_8794, dtype="float64") /* ty=Tensor[(4, 4, 13), float64] */;
  %118 = shape_of(%116, dtype="int32") /* ty=Tensor[(3), int32] */;
  %119 = cast(%116, dtype="float64") /* ty=Tensor[(4, 4, 13), float64] */;
  %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %121 = multiply(%119, %120) /* ty=Tensor[(4, 4, 13), float64] */;
  %122 = cast(%121, dtype="float64") /* ty=Tensor[(4, 4, 13), float64] */;
  %123 = cast(%var_8825, dtype="float32") /* ty=Tensor[(140), float32] */;
  %124 = cast(meta[relay.Constant][11] /* ty=Tensor[(660), uint32] */, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %125 = reshape(%123, newshape=[4, 5, 7]) /* ty=Tensor[(4, 5, 7), float32] */;
  %126 = reshape(%124, newshape=[660]) /* ty=Tensor[(660), uint32] */;
  %127 = @func_5186(%125, %126) /* ty=(Tensor[(4, 5, 7), float32], Tensor[(150), float64], Tensor[(660), uint32], Tensor[(150), float64]) */;
  %128 = %114.0;
  %129 = atan(%122) /* ty=Tensor[(4, 4, 13), float64] */;
  %130 = %127.2;
  (%128, %129, %130, %var_8825, meta[relay.Constant][11] /* ty=Tensor[(660), uint32] */)
}

def @func_11414() -> (Tensor[(660), float32],) {
  %131 = @func_10927() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(660), float32], Tensor[(660), float32], Tensor[(180), float64], Tensor[(13, 12, 13), int32]) */;
  %132 = %131.1;
  (%132,)
}

def @func_6880() -> (Tensor[(16, 12, 11), float64], Tensor[(13, 12, 13), float64], Tensor[(75, 2), float64]) {
  %133 = @func_6673() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(16, 12, 9), float32], Tensor[(288, 6), float64], Tensor[(90), int8], Tensor[(5, 6, 6), float64], Tensor[(13, 12, 13), float64], Tensor[(140), float32], Tensor[(70, 2), float32], Tensor[(5, 132), uint32], Tensor[(13, 12, 13), float64], Tensor[(75, 2), float64], Tensor[(4, 4, 13), float32], Tensor[(52, 4), float32], Tensor[(144), float32], Tensor[(75, 2), float64]) */;
  %134 = @func_6723() /* ty=Tensor[(16, 12, 11), float64] */;
  %135 = @func_5749() /* ty=Tensor[(13, 12, 13), float64] */;
  %136 = %133.10;
  (%134, %135, %136)
}

def @func_11215(%var_11205: Tensor[(3, 11, 12), int8], %var_11206: Tensor[(3, 11, 12), int8]) -> (Tensor[(3, 11, 12), bool], Tensor[(3, 11, 12), float64]) {
  %137 = cast(%var_11206, dtype="bool") /* ty=Tensor[(3, 11, 12), bool] */;
  %138 = shape_of(%var_11205, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(%var_11205, dtype="bool") /* ty=Tensor[(3, 11, 12), bool] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %141 = cast(%var_11205, dtype="float64") /* ty=Tensor[(3, 11, 12), float64] */;
  %142 = less_equal(%139, %140) /* ty=Tensor[(3, 11, 12), bool] */;
  %143 = log2(%141) /* ty=Tensor[(3, 11, 12), float64] */;
  (%142, %143)
}

def @func_4349(%var_4341: Tensor[(3, 3, 11), float32]) -> (Tensor[(3, 3, 11), float32],) {
  %144 = cast(%var_4341, dtype="float32") /* ty=Tensor[(3, 3, 11), float32] */;
  %145 = asin(%144) /* ty=Tensor[(3, 3, 11), float32] */;
  (%145,)
}

def @func_9406() -> (Tensor[(13, 12, 13), float64],) {
  %146 = @func_9024() /* ty=Tensor[(13, 12, 13), float64] */;
  %147 = cast(meta[relay.Constant][12] /* ty=Tensor[(13, 12, 13), float64] */, dtype="float64") /* ty=Tensor[(13, 12, 13), float64] */;
  %148 = shape_of(%146, dtype="int32") /* ty=Tensor[(3), int32] */;
  %149 = cast(%146, dtype="float64") /* ty=Tensor[(13, 12, 13), float64] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %151 = mod(%149, %150) /* ty=Tensor[(13, 12, 13), float64] */;
  (%151,)
}

def @func_6365() -> Tensor[(?, 4, 4), float64] {
  %152 = @func_6210() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), int16], Tensor[(16), int16]) */;
  %153 = %152.1;
  %154 = cast(%153, dtype="float64") /* ty=Tensor[(?, 4, 4), float64] */;
  rsqrt(%154) /* ty=Tensor[(?, 4, 4), float64] */
}

def @func_8947() -> (Tensor[(99), float32],) {
  %155 = @func_6339() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(99), float32]) */;
  %156 = %155.2;
  (%156,)
}

def @func_8172() -> Tensor[(90), int8] {
  %157 = @func_6673() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(16, 12, 9), float32], Tensor[(288, 6), float64], Tensor[(90), int8], Tensor[(5, 6, 6), float64], Tensor[(13, 12, 13), float64], Tensor[(140), float32], Tensor[(70, 2), float32], Tensor[(5, 132), uint32], Tensor[(13, 12, 13), float64], Tensor[(75, 2), float64], Tensor[(4, 4, 13), float32], Tensor[(52, 4), float32], Tensor[(144), float32], Tensor[(75, 2), float64]) */;
  %157.3
}

def @func_5749() -> Tensor[(13, 12, 13), float64] {
  %158 = @func_4924() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %158.0
}

def @main(%var_11486: Tensor[(16, 12, 11), float64]) -> (Tensor[(16, 12, 11), float64], Tensor[(13, 12, 13), float64], Tensor[(16, 12, 11), float64]) {
  %159 = @func_6723() /* ty=Tensor[(16, 12, 11), float64] */;
  %160 = cast(%var_11486, dtype="float64") /* ty=Tensor[(16, 12, 11), float64] */;
  %161 = shape_of(%159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %162 = cast(%159, dtype="float64") /* ty=Tensor[(16, 12, 11), float64] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %164 = @func_9258() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) */;
  %165 = cast(%var_11486, dtype="bool") /* ty=Tensor[(16, 12, 11), bool] */;
  %166 = shape_of(%159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %167 = cast(%159, dtype="bool") /* ty=Tensor[(16, 12, 11), bool] */;
  %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %169 = greater(%167, %168) /* ty=Tensor[(16, 12, 11), bool] */;
  %170 = cast(%169, dtype="float64") /* ty=Tensor[(16, 12, 11), float64] */;
  %171 = minimum(%162, %163) /* ty=Tensor[(16, 12, 11), float64] */;
  %172 = %164.1;
  %173 = acos(%170) /* ty=Tensor[(16, 12, 11), float64] */;
  (%171, %172, %173)
}

def @func_5601(%var_5586: Tensor[(660), float32], %var_5587: Tensor[(180), float64], %var_5592: Tensor[(2, 360), int64]) -> (Tensor[(10, 15, 8), float64], Tensor[(180), float64], Tensor[(660), float32], Tensor[(180), float64], Tensor[(660, 1), float32], Tensor[(13, 156), float64], Tensor[(2, 360), int64]) {
  %174 = cast(meta[relay.Constant][13] /* ty=Tensor[(10, 15, 8), float64] */, dtype="float64") /* ty=Tensor[(10, 15, 8), float64] */;
  %175 = cast(%var_5586, dtype="float32") /* ty=Tensor[(660), float32] */;
  %176 = cast(%var_5587, dtype="float64") /* ty=Tensor[(180), float64] */;
  %177 = reshape(%175, newshape=[11, 15, 4]) /* ty=Tensor[(11, 15, 4), float32] */;
  %178 = reshape(%176, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %179 = @func_311(%177, %178) /* ty=(Tensor[(11, 15, 4), float32], Tensor[(5, 6, 6), float64], Tensor[(180), float64]) */;
  %180 = cast(meta[relay.Constant][14] /* ty=Tensor[(13, 156), float64] */, dtype="float64") /* ty=Tensor[(13, 156), float64] */;
  %181 = cast(%var_5592, dtype="int64") /* ty=Tensor[(2, 360), int64] */;
  %182 = cast(%var_5586, dtype="float32") /* ty=Tensor[(660), float32] */;
  %183 = %179.2;
  %184 = cast(%183, dtype="float64") /* ty=Tensor[(180), float64] */;
  %185 = reshape(%180, newshape=[13, 12, 13]) /* ty=Tensor[(13, 12, 13), float64] */;
  %186 = reshape(%181, newshape=[720]) /* ty=Tensor[(720), int64] */;
  %187 = reshape(%182, newshape=[660, 1]) /* ty=Tensor[(660, 1), float32] */;
  %188 = reshape(%184, newshape=[90, 2]) /* ty=Tensor[(90, 2), float64] */;
  %189 = @func_5058(%185, %186, %187, %188) /* ty=(Tensor[(648), float64], Tensor[(720), int64], Tensor[(660, 1), float32], Tensor[(13, 3, 8), float32], Tensor[(11, 4, 15), uint16], Tensor[(90, 2), float64], Tensor[(13, 12, 13), uint32]) */;
  %190 = log10(%174) /* ty=Tensor[(10, 15, 8), float64] */;
  %191 = %189.2;
  (%190, %183, %var_5586, %var_5587, %191, meta[relay.Constant][14] /* ty=Tensor[(13, 156), float64] */, %var_5592)
}

def @func_6723() -> Tensor[(16, 12, 11), float64] {
  %192 = cast(meta[relay.Constant][15] /* ty=Tensor[(16, 12, 11), float64] */, dtype="float64") /* ty=Tensor[(16, 12, 11), float64] */;
  rsqrt(%192) /* ty=Tensor[(16, 12, 11), float64] */
}

def @func_8138() -> (Tensor[(4, 4, 13), float32], Tensor[(13, 12, 13), float64]) {
  %193 = @func_6673() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(16, 12, 9), float32], Tensor[(288, 6), float64], Tensor[(90), int8], Tensor[(5, 6, 6), float64], Tensor[(13, 12, 13), float64], Tensor[(140), float32], Tensor[(70, 2), float32], Tensor[(5, 132), uint32], Tensor[(13, 12, 13), float64], Tensor[(75, 2), float64], Tensor[(4, 4, 13), float32], Tensor[(52, 4), float32], Tensor[(144), float32], Tensor[(75, 2), float64]) */;
  %194 = %193.11;
  %195 = cast(%194, dtype="float32") /* ty=Tensor[(4, 4, 13), float32] */;
  %196 = log(%195) /* ty=Tensor[(4, 4, 13), float32] */;
  %197 = @func_7230() /* ty=Tensor[(13, 12, 13), float64] */;
  (%196, %197)
}

def @func_8313(%var_8281: Tensor[(5, 14, 1), float64]) -> (Tensor[(5, 14, ?), bool],) {
  %198 = cast(%var_8281, dtype="float64") /* ty=Tensor[(5, 14, 1), float64] */;
  %199 = cosh(%198) /* ty=Tensor[(5, 14, 1), float64] */;
  %200 = cast(%var_8281, dtype="int64") /* ty=Tensor[(5, 14, 1), int64] */;
  %201 = shape_of(%199, dtype="int32") /* ty=Tensor[(3), int32] */;
  %202 = cast(%199, dtype="int64") /* ty=Tensor[(5, 14, 1), int64] */;
  %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %204 = bitwise_or(%202, %203) /* ty=Tensor[(5, 14, ?), int64] */;
  %205 = cast(%204, dtype="bool") /* ty=Tensor[(5, 14, ?), bool] */;
  %206 = shape_of(%199, dtype="int32") /* ty=Tensor[(3), int32] */;
  %207 = cast(%199, dtype="bool") /* ty=Tensor[(5, 14, 1), bool] */;
  %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %209 = greater_equal(%207, %208) /* ty=Tensor[(5, 14, ?), bool] */;
  (%209,)
}

def @func_5882() -> Tensor[(4, 4, 13), float32] {
  @func_5745() /* ty=Tensor[(4, 4, 13), float32] */
}

def @func_8910() -> (Tensor[(?, 4, 4), float32], Tensor[(150), float64], Tensor[(5, 30), float64]) {
  %210 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 30), float64] */, dtype="float64") /* ty=Tensor[(5, 30), float64] */;
  %211 = reshape(%210, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %212 = @func_6088(%211) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(2, 9, 5), float32], Tensor[(90), int8], Tensor[(660), uint32], Tensor[(150), float64]) */;
  %213 = @func_8279() /* ty=Tensor[(?, 4, 4), float32] */;
  %214 = %212.4;
  (%213, %214, meta[relay.Constant][16] /* ty=Tensor[(5, 30), float64] */)
}

def @func_11075(%var_11070: Tensor[(7, 12, 6), int16]) -> Tensor[(7, 12, 6), bool] {
  %215 = cast(meta[relay.Constant][17] /* ty=Tensor[(7, 1, 6), int16] */, dtype="bool") /* ty=Tensor[(7, 1, 6), bool] */;
  %216 = cast(%var_11070, dtype="bool") /* ty=Tensor[(7, 12, 6), bool] */;
  less_equal(%215, %216) /* ty=Tensor[(7, 12, 6), bool] */
}

def @func_9579() -> Tensor[(13, 12, 13), float64] {
  %217 = @func_8138() /* ty=(Tensor[(4, 4, 13), float32], Tensor[(13, 12, 13), float64]) */;
  %218 = %217.1;
  %219 = cast(%218, dtype="float64") /* ty=Tensor[(13, 12, 13), float64] */;
  sigmoid(%219) /* ty=Tensor[(13, 12, 13), float64] */
}

def @func_5264(%var_5202: Tensor[(99), float32], %var_5205: Tensor[(1, 16), int16]) -> (Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), int16], Tensor[(1, 16), int16], Tensor[(2, 9, 5), bool], Tensor[(90), int8], Tensor[(660), uint32], Tensor[(150), float64], Tensor[(3, 3, 11), float32], Tensor[(90), int8], Tensor[(144), float32], Tensor[(4, 396), float32], Tensor[(180), float64]) {
  %220 = @func_5131() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %221 = cast(%var_5205, dtype="int16") /* ty=Tensor[(1, 16), int16] */;
  %222 = reshape(%221, newshape=[1, 4, 4]) /* ty=Tensor[(1, 4, 4), int16] */;
  %223 = @func_4315(%222) /* ty=(Tensor[(?, 4, 4), int16],) */;
  %224 = cast(meta[relay.Constant][18] /* ty=Tensor[(90), int8] */, dtype="int8") /* ty=Tensor[(90), int8] */;
  %225 = cast(meta[relay.Constant][19] /* ty=Tensor[(660), uint32] */, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %226 = cast(meta[relay.Constant][20] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %227 = reshape(%224, newshape=[2, 9, 5]) /* ty=Tensor[(2, 9, 5), int8] */;
  %228 = reshape(%225, newshape=[660]) /* ty=Tensor[(660), uint32] */;
  %229 = reshape(%226, newshape=[1, 150]) /* ty=Tensor[(1, 150), float64] */;
  %230 = @func_2306(%227, %228, %229) /* ty=(Tensor[(2, 9, 5), bool], Tensor[(660), uint32], Tensor[(?, 150), bool], Tensor[(2, 9, 5), float32]) */;
  %231 = cast(%var_5202, dtype="float32") /* ty=Tensor[(99), float32] */;
  %232 = reshape(%231, newshape=[3, 3, 11]) /* ty=Tensor[(3, 3, 11), float32] */;
  %233 = @func_4349(%232) /* ty=(Tensor[(3, 3, 11), float32],) */;
  %234 = %233.0;
  %235 = cast(%var_5202, dtype="float32") /* ty=Tensor[(99), float32] */;
  %236 = shape_of(%234, dtype="int32") /* ty=Tensor[(3), int32] */;
  %237 = cast(%234, dtype="float32") /* ty=Tensor[(3, 3, 11), float32] */;
  %238 = dyn.reshape(%235, %236, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %239 = cast(meta[relay.Constant][21] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %240 = cast(meta[relay.Constant][22] /* ty=Tensor[(4, 396), float32] */, dtype="float32") /* ty=Tensor[(4, 396), float32] */;
  %241 = cast(meta[relay.Constant][18] /* ty=Tensor[(90), int8] */, dtype="int8") /* ty=Tensor[(90), int8] */;
  %242 = cast(meta[relay.Constant][19] /* ty=Tensor[(660), uint32] */, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %243 = cast(meta[relay.Constant][23] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %244 = reshape(%239, newshape=[12, 12, 1]) /* ty=Tensor[(12, 12, 1), float32] */;
  %245 = reshape(%240, newshape=[12, 12, 11]) /* ty=Tensor[(12, 12, 11), float32] */;
  %246 = reshape(%241, newshape=[90]) /* ty=Tensor[(90), int8] */;
  %247 = reshape(%242, newshape=[110, 6]) /* ty=Tensor[(110, 6), uint32] */;
  %248 = reshape(%243, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %249 = @func_2906(%244, %245, %246, %247, %248) /* ty=(Tensor[(12, 12, 11), bool], Tensor[(2, 9, 5), bool], Tensor[(90), int8], Tensor[(110, 6), uint32], Tensor[(150), float64], Tensor[(5, 6, 6), float64], Tensor[(180), float64], Tensor[(180), float64]) */;
  %250 = %220.0;
  %251 = %223.0;
  %252 = %230.0;
  %253 = floor_mod(%237, %238) /* ty=Tensor[(3, 3, 11), float32] */;
  %254 = %249.2;
  (%250, %251, %var_5205, %252, meta[relay.Constant][18] /* ty=Tensor[(90), int8] */, meta[relay.Constant][19] /* ty=Tensor[(660), uint32] */, meta[relay.Constant][20] /* ty=Tensor[(150), float64] */, %253, %254, meta[relay.Constant][21] /* ty=Tensor[(144), float32] */, meta[relay.Constant][22] /* ty=Tensor[(4, 396), float32] */, meta[relay.Constant][23] /* ty=Tensor[(180), float64] */)
}

def @func_10437(%var_10422: Tensor[(660), float32]) -> (Tensor[(180), float64], Tensor[(660), float32], Tensor[(180), float64], Tensor[(13, 12, 13), bool]) {
  %255 = cast(%var_10422, dtype="float32") /* ty=Tensor[(660), float32] */;
  %256 = cast(meta[relay.Constant][24] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %257 = reshape(%255, newshape=[660]) /* ty=Tensor[(660), float32] */;
  %258 = reshape(%256, newshape=[1, 180]) /* ty=Tensor[(1, 180), float64] */;
  %259 = @func_7210(%257, %258) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(180), float64], Tensor[(660), float32], Tensor[(1, 180), float64], Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), float64]) */;
  %260 = @func_6553() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %261 = %260.0;
  %262 = cast(meta[relay.Constant][25] /* ty=Tensor[(13, 12, 13), float64] */, dtype="bool") /* ty=Tensor[(13, 12, 13), bool] */;
  %263 = shape_of(%261, dtype="int32") /* ty=Tensor[(3), int32] */;
  %264 = cast(%261, dtype="bool") /* ty=Tensor[(13, 12, 13), bool] */;
  %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %266 = %259.1;
  %267 = greater_equal(%264, %265) /* ty=Tensor[(13, 12, 13), bool] */;
  (%266, %var_10422, meta[relay.Constant][24] /* ty=Tensor[(180), float64] */, %267)
}

def @func_7120() -> Tensor[(4, 4, 13), float32] {
  @func_5745() /* ty=Tensor[(4, 4, 13), float32] */
}

def @func_7512(%var_7478: Tensor[(11, 16, 15), uint16], %var_7479: Tensor[(11, 16, 15), uint16], %var_7504: Tensor[(90), int8], %var_7505: Tensor[(110, 6), uint32]) -> (Tensor[(11, 16, 15), uint16], Tensor[(4, 4, 13), float32], Tensor[(2, 9, 5), bool], Tensor[(144), float32], Tensor[(1584), float32], Tensor[(90), int8], Tensor[(110, 6), uint32], Tensor[(180), float64]) {
  %268 = cast(%var_7479, dtype="uint16") /* ty=Tensor[(11, 16, 15), uint16] */;
  %269 = shape_of(%var_7478, dtype="int32") /* ty=Tensor[(3), int32] */;
  %270 = cast(%var_7478, dtype="uint16") /* ty=Tensor[(11, 16, 15), uint16] */;
  %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %272 = cast(meta[relay.Constant][26] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %273 = cast(meta[relay.Constant][27] /* ty=Tensor[(1584), float32] */, dtype="float32") /* ty=Tensor[(1584), float32] */;
  %274 = cast(%var_7504, dtype="int8") /* ty=Tensor[(90), int8] */;
  %275 = cast(%var_7505, dtype="uint32") /* ty=Tensor[(110, 6), uint32] */;
  %276 = cast(meta[relay.Constant][28] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %277 = reshape(%272, newshape=[12, 12, 1]) /* ty=Tensor[(12, 12, 1), float32] */;
  %278 = reshape(%273, newshape=[12, 12, 11]) /* ty=Tensor[(12, 12, 11), float32] */;
  %279 = reshape(%274, newshape=[90]) /* ty=Tensor[(90), int8] */;
  %280 = reshape(%275, newshape=[110, 6]) /* ty=Tensor[(110, 6), uint32] */;
  %281 = reshape(%276, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %282 = @func_2906(%277, %278, %279, %280, %281) /* ty=(Tensor[(12, 12, 11), bool], Tensor[(2, 9, 5), bool], Tensor[(90), int8], Tensor[(110, 6), uint32], Tensor[(150), float64], Tensor[(5, 6, 6), float64], Tensor[(180), float64], Tensor[(180), float64]) */;
  %283 = minimum(%270, %271) /* ty=Tensor[(11, 16, 15), uint16] */;
  %284 = @func_7120() /* ty=Tensor[(4, 4, 13), float32] */;
  %285 = %282.1;
  (%283, %284, %285, meta[relay.Constant][26] /* ty=Tensor[(144), float32] */, meta[relay.Constant][27] /* ty=Tensor[(1584), float32] */, %var_7504, %var_7505, meta[relay.Constant][28] /* ty=Tensor[(180), float64] */)
}

def @func_11089(%var_11081: Tensor[(14, 13, 13), float64]) -> (Tensor[(14, 13, 13), int8],) {
  %286 = cast(%var_11081, dtype="float64") /* ty=Tensor[(14, 13, 13), float64] */;
  %287 = cosh(%286) /* ty=Tensor[(14, 13, 13), float64] */;
  %288 = cast(%var_11081, dtype="int8") /* ty=Tensor[(14, 13, 13), int8] */;
  %289 = shape_of(%287, dtype="int32") /* ty=Tensor[(3), int32] */;
  %290 = cast(%287, dtype="int8") /* ty=Tensor[(14, 13, 13), int8] */;
  %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %292 = minimum(%290, %291) /* ty=Tensor[(14, 13, 13), int8] */;
  (%292,)
}

def @func_7172() -> (Tensor[(13, 12, 13), float64],) {
  %293 = @func_6328() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %294 = %293.0;
  %295 = cast(%294, dtype="float64") /* ty=Tensor[(13, 12, 13), float64] */;
  %296 = sinh(%295) /* ty=Tensor[(13, 12, 13), float64] */;
  (%296,)
}

def @func_6328() -> (Tensor[(13, 12, 13), float64],) {
  %297 = @func_5131() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %298 = %297.0;
  (%298,)
}

def @func_9490() -> (Tensor[(13, 12, 13), float64],) {
  %299 = @func_6339() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(99), float32]) */;
  %300 = %299.1;
  (%300,)
}

def @func_10354(%var_10341: Tensor[(660), float32], %var_10342: Tensor[(90, 2), float64]) -> (Tensor[(13, 12, 13), float64], Tensor[(16, 12, 11), float64], Tensor[(660), float32], Tensor[(660), float32], Tensor[(90, 2), float64], Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), float32]) {
  %301 = cast(%var_10341, dtype="float32") /* ty=Tensor[(660), float32] */;
  %302 = cast(%var_10342, dtype="float64") /* ty=Tensor[(90, 2), float64] */;
  %303 = reshape(%301, newshape=[660]) /* ty=Tensor[(660), float32] */;
  %304 = reshape(%302, newshape=[1, 180]) /* ty=Tensor[(1, 180), float64] */;
  %305 = @func_7210(%303, %304) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(180), float64], Tensor[(660), float32], Tensor[(1, 180), float64], Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), float64]) */;
  %306 = @func_9024() /* ty=Tensor[(13, 12, 13), float64] */;
  %307 = @func_6723() /* ty=Tensor[(16, 12, 11), float64] */;
  %308 = %305.2;
  %309 = @func_9579() /* ty=Tensor[(13, 12, 13), float64] */;
  %310 = @func_8279() /* ty=Tensor[(?, 4, 4), float32] */;
  (%306, %307, %308, %var_10341, %var_10342, %309, %310)
}

def @func_6210() -> (Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), int16], Tensor[(16), int16]) {
  %311 = @func_5295() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %312 = cast(meta[relay.Constant][29] /* ty=Tensor[(16), int16] */, dtype="int16") /* ty=Tensor[(16), int16] */;
  %313 = reshape(%312, newshape=[1, 4, 4]) /* ty=Tensor[(1, 4, 4), int16] */;
  %314 = @func_4315(%313) /* ty=(Tensor[(?, 4, 4), int16],) */;
  %315 = %311.0;
  %316 = %314.0;
  (%315, %316, meta[relay.Constant][29] /* ty=Tensor[(16), int16] */)
}

def @func_7988(%var_7950: Tensor[(13, 12, 13), float64]) -> (Tensor[(13, 12, 13), float32], Tensor[(4, 4, 13), int8], Tensor[(208), float32], Tensor[(13, 12, 13), float64], Tensor[(4, 4, 13), float32]) {
  %317 = @func_7402() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %318 = %317.0;
  %319 = cast(%var_7950, dtype="bool") /* ty=Tensor[(13, 12, 13), bool] */;
  %320 = shape_of(%318, dtype="int32") /* ty=Tensor[(3), int32] */;
  %321 = cast(%318, dtype="bool") /* ty=Tensor[(13, 12, 13), bool] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %323 = equal(%321, %322) /* ty=Tensor[(13, 12, 13), bool] */;
  %324 = cast(%323, dtype="float32") /* ty=Tensor[(13, 12, 13), float32] */;
  %325 = cast(meta[relay.Constant][30] /* ty=Tensor[(208), float32] */, dtype="float32") /* ty=Tensor[(208), float32] */;
  %326 = reshape(%325, newshape=[4, 4, 13]) /* ty=Tensor[(4, 4, 13), float32] */;
  %327 = @func_5951(%326) /* ty=(Tensor[(4, 4, 13), int8],) */;
  %328 = @func_7105() /* ty=(Tensor[(4, 4, 13), float32],) */;
  %329 = log2(%324) /* ty=Tensor[(13, 12, 13), float32] */;
  %330 = %327.0;
  %331 = @func_5749() /* ty=Tensor[(13, 12, 13), float64] */;
  %332 = %328.0;
  (%329, %330, meta[relay.Constant][30] /* ty=Tensor[(208), float32] */, %331, %332)
}

def @func_9428() -> Tensor[(13, 12, 13), float64] {
  %333 = @func_8991() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %333.0
}

def @func_5131() -> (Tensor[(13, 12, 13), float64],) {
  %334 = @func_4924() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %335 = %334.0;
  (%335,)
}

def @func_11122() -> (Tensor[(13, 12, 13), float64],) {
  %336 = @func_9406() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %337 = %336.0;
  (%337,)
}

def @func_10588(%var_10567: Tensor[(13, 12, 13), float64]) -> (Tensor[(13, 12, 13), int32],) {
  %338 = @func_10514() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) */;
  %339 = %338.0;
  %340 = cast(%var_10567, dtype="int32") /* ty=Tensor[(13, 12, 13), int32] */;
  %341 = shape_of(%339, dtype="int32") /* ty=Tensor[(3), int32] */;
  %342 = cast(%339, dtype="int32") /* ty=Tensor[(13, 12, 13), int32] */;
  %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %344 = left_shift(%342, %343) /* ty=Tensor[(13, 12, 13), int32] */;
  (%344,)
}

def @func_10022(%var_10005: Tensor[(660), uint32], %var_10013: Tensor[(8, 216), float64]) -> (Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(99), float32], Tensor[(3, 3, 11), float32], Tensor[(4, 5, 7), float32], Tensor[(140), float32], Tensor[(660), uint32], Tensor[(13, 12, 13), float64], Tensor[(8, 216), float64], Tensor[(90), int8], Tensor[(648, 1), float64], Tensor[(1, 144), float32], Tensor[(4, 4, 13), float32]) {
  %345 = @func_5295() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %346 = cast(meta[relay.Constant][31] /* ty=Tensor[(99), float32] */, dtype="float32") /* ty=Tensor[(99), float32] */;
  %347 = cast(meta[relay.Constant][31] /* ty=Tensor[(99), float32] */, dtype="float32") /* ty=Tensor[(99), float32] */;
  %348 = reshape(%346, newshape=[99]) /* ty=Tensor[(99), float32] */;
  %349 = reshape(%347, newshape=[3, 3, 11]) /* ty=Tensor[(3, 3, 11), float32] */;
  %350 = @func_9726(%348, %349) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(99), float32], Tensor[(8, 4, 10), float32], Tensor[(320), float32], Tensor[(?, 4, 4), int16], Tensor[(4, 4, 13), float32], Tensor[(3, 3, 11), int8]) */;
  %351 = cast(meta[relay.Constant][31] /* ty=Tensor[(99), float32] */, dtype="float32") /* ty=Tensor[(99), float32] */;
  %352 = reshape(%351, newshape=[99]) /* ty=Tensor[(99), float32] */;
  %353 = @func_7756(%352) /* ty=(Tensor[(?, 4, 4), int16], Tensor[(3, 3, 11), float32], Tensor[(99), float32]) */;
  %354 = cast(meta[relay.Constant][32] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %355 = cast(%var_10005, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %356 = reshape(%354, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %357 = reshape(%355, newshape=[660]) /* ty=Tensor[(660), uint32] */;
  %358 = @func_5339(%356, %357) /* ty=(Tensor[(13, 12, 13), float32], Tensor[(4, 5, 7), float32], Tensor[(140), float32], Tensor[(660), uint32]) */;
  %359 = cast(%var_10013, dtype="float64") /* ty=Tensor[(8, 216), float64] */;
  %360 = cast(meta[relay.Constant][33] /* ty=Tensor[(90), int8] */, dtype="int8") /* ty=Tensor[(90), int8] */;
  %361 = cast(meta[relay.Constant][34] /* ty=Tensor[(648, 1), float64] */, dtype="float64") /* ty=Tensor[(648, 1), float64] */;
  %362 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 144), float32] */, dtype="float32") /* ty=Tensor[(1, 144), float32] */;
  %363 = reshape(%359, newshape=[1728]) /* ty=Tensor[(1728), float64] */;
  %364 = reshape(%360, newshape=[90]) /* ty=Tensor[(90), int8] */;
  %365 = reshape(%361, newshape=[648]) /* ty=Tensor[(648), float64] */;
  %366 = reshape(%362, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %367 = @func_8704(%363, %364, %365, %366) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(660), uint32], Tensor[(1728), float64], Tensor[(90), int8], Tensor[(25, 6), bool], Tensor[(2, 72), float32], Tensor[(648), float64], Tensor[(144), float32], Tensor[(25, 6), int16], Tensor[(25, 6), float64], Tensor[(180), float64], Tensor[(16), int16], Tensor[(13, 12, 13), float64]) */;
  %368 = %345.0;
  %369 = %350.0;
  %370 = %353.1;
  %371 = %358.1;
  %372 = %367.0;
  %373 = @func_7318() /* ty=Tensor[(4, 4, 13), float32] */;
  (%368, %369, meta[relay.Constant][31] /* ty=Tensor[(99), float32] */, %370, %371, meta[relay.Constant][32] /* ty=Tensor[(140), float32] */, %var_10005, %372, %var_10013, meta[relay.Constant][33] /* ty=Tensor[(90), int8] */, meta[relay.Constant][34] /* ty=Tensor[(648, 1), float64] */, meta[relay.Constant][35] /* ty=Tensor[(1, 144), float32] */, %373)
}

def @func_11464() -> Tensor[(13, 12, 13), float64] {
  %374 = @func_11230() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %374.0
}

def @func_7833(%var_7777: Tensor[(6, 8, 5), uint16], %var_7778: Tensor[(6, 8, 5), uint16]) -> (Tensor[(6, 8, 5), bool], Tensor[(13, 12, 13), float64], Tensor[(4, 4, 13), float32]) {
  %375 = cast(%var_7778, dtype="bool") /* ty=Tensor[(6, 8, 5), bool] */;
  %376 = shape_of(%var_7777, dtype="int32") /* ty=Tensor[(3), int32] */;
  %377 = cast(%var_7777, dtype="bool") /* ty=Tensor[(6, 8, 5), bool] */;
  %378 = dyn.reshape(%375, %376, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %379 = @func_7172() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %380 = @func_5966() /* ty=(Tensor[(4, 4, 13), float32],) */;
  %381 = less_equal(%377, %378) /* ty=Tensor[(6, 8, 5), bool] */;
  %382 = %379.0;
  %383 = %380.0;
  (%381, %382, %383)
}

def @func_5384(%var_5363: Tensor[(99), float32]) -> (Tensor[(13, 12, 13), float64], Tensor[(3, 3, 11), float32], Tensor[(99), float32]) {
  %384 = @func_4924() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %385 = cast(%var_5363, dtype="float32") /* ty=Tensor[(99), float32] */;
  %386 = reshape(%385, newshape=[3, 3, 11]) /* ty=Tensor[(3, 3, 11), float32] */;
  %387 = @func_4349(%386) /* ty=(Tensor[(3, 3, 11), float32],) */;
  %388 = %384.0;
  %389 = %387.0;
  (%388, %389, %var_5363)
}

def @func_8056() -> (Tensor[(4, 4, 13), float32], Tensor[(13, 12, 13), float64]) {
  %390 = @func_6553() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %391 = @func_7120() /* ty=Tensor[(4, 4, 13), float32] */;
  %392 = %390.0;
  (%391, %392)
}

def @func_7556() -> (Tensor[(4, 4, 13), float64], Tensor[(75, 2), float64]) {
  %393 = @func_5745() /* ty=Tensor[(4, 4, 13), float32] */;
  %394 = cast(%393, dtype="float64") /* ty=Tensor[(4, 4, 13), float64] */;
  %395 = @func_6880() /* ty=(Tensor[(16, 12, 11), float64], Tensor[(13, 12, 13), float64], Tensor[(75, 2), float64]) */;
  %396 = asinh(%394) /* ty=Tensor[(4, 4, 13), float64] */;
  %397 = %395.2;
  (%396, %397)
}

def @func_2906(%var_2851: Tensor[(12, 12, 1), float32], %var_2861: Tensor[(12, 12, 11), float32], %var_2888: Tensor[(90), int8], %var_2889: Tensor[(110, 6), uint32], %var_2895: Tensor[(180), float64]) -> (Tensor[(12, 12, 11), bool], Tensor[(2, 9, 5), bool], Tensor[(90), int8], Tensor[(110, 6), uint32], Tensor[(150), float64], Tensor[(5, 6, 6), float64], Tensor[(180), float64], Tensor[(180), float64]) {
  %398 = cast(%var_2851, dtype="float32") /* ty=Tensor[(12, 12, 1), float32] */;
  %399 = asin(%398) /* ty=Tensor[(12, 12, 1), float32] */;
  %400 = cast(%399, dtype="bool") /* ty=Tensor[(12, 12, 1), bool] */;
  %401 = cast(%var_2861, dtype="bool") /* ty=Tensor[(12, 12, 11), bool] */;
  %402 = cast(%var_2888, dtype="int8") /* ty=Tensor[(90), int8] */;
  %403 = cast(%var_2889, dtype="uint32") /* ty=Tensor[(110, 6), uint32] */;
  %404 = cast(meta[relay.Constant][36] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %405 = reshape(%402, newshape=[2, 9, 5]) /* ty=Tensor[(2, 9, 5), int8] */;
  %406 = reshape(%403, newshape=[660]) /* ty=Tensor[(660), uint32] */;
  %407 = reshape(%404, newshape=[1, 150]) /* ty=Tensor[(1, 150), float64] */;
  %408 = @func_2306(%405, %406, %407) /* ty=(Tensor[(2, 9, 5), bool], Tensor[(660), uint32], Tensor[(?, 150), bool], Tensor[(2, 9, 5), float32]) */;
  %409 = cast(%var_2895, dtype="float64") /* ty=Tensor[(180), float64] */;
  %410 = reshape(%409, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), float64] */;
  %411 = cast(%var_2889, dtype="float32") /* ty=Tensor[(110, 6), float32] */;
  %412 = reshape(%411, newshape=[660]) /* ty=Tensor[(660), float32] */;
  %413 = @func_680(%412) /* ty=(Tensor[(13, 3, 8), float64], Tensor[(180), float64], Tensor[(660), float32], Tensor[(180), float64]) */;
  %414 = greater_equal(%400, %401) /* ty=Tensor[(12, 12, 11), bool] */;
  %415 = %408.0;
  %416 = @func_212(%410) /* ty=Tensor[(5, 6, 6), float64] */;
  %417 = %413.1;
  (%414, %415, %var_2888, %var_2889, meta[relay.Constant][36] /* ty=Tensor[(150), float64] */, %416, %var_2895, %417)
}

def @func_5058(%var_4994: Tensor[(13, 12, 13), float64], %var_5018: Tensor[(720), int64], %var_5021: Tensor[(660, 1), float32], %var_5041: Tensor[(90, 2), float64]) -> (Tensor[(648), float64], Tensor[(720), int64], Tensor[(660, 1), float32], Tensor[(13, 3, 8), float32], Tensor[(11, 4, 15), uint16], Tensor[(90, 2), float64], Tensor[(13, 12, 13), uint32]) {
  %418 = cast(%var_5018, dtype="int64") /* ty=Tensor[(720), int64] */;
  %419 = reshape(%418, newshape=[12, 5, 12]) /* ty=Tensor[(12, 5, 12), int64] */;
  %420 = @func_4475(%419) /* ty=(Tensor[(12, 5, 12), bool], Tensor[(9, 9, 8), float64], Tensor[(648), float64], Tensor[(144), float32], Tensor[(90), int8]) */;
  %421 = cast(%var_5021, dtype="float32") /* ty=Tensor[(660, 1), float32] */;
  %422 = reshape(%421, newshape=[660]) /* ty=Tensor[(660), float32] */;
  %423 = @func_680(%422) /* ty=(Tensor[(13, 3, 8), float64], Tensor[(180), float64], Tensor[(660), float32], Tensor[(180), float64]) */;
  %424 = %423.0;
  %425 = cast(%424, dtype="float32") /* ty=Tensor[(13, 3, 8), float32] */;
  %426 = cast(%var_5021, dtype="float32") /* ty=Tensor[(660, 1), float32] */;
  %427 = cast(%var_5041, dtype="float64") /* ty=Tensor[(90, 2), float64] */;
  %428 = reshape(%426, newshape=[11, 4, 15]) /* ty=Tensor[(11, 4, 15), float32] */;
  %429 = reshape(%427, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %430 = @func_488(%428, %429) /* ty=(Tensor[(5, 6, 6), float64], Tensor[(180), float64], Tensor[(11, 4, 15), uint16], Tensor[(5, 6, 6), float64]) */;
  %431 = @func_4924() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %432 = %431.0;
  %433 = cast(%var_4994, dtype="float64") /* ty=Tensor[(13, 12, 13), float64] */;
  %434 = shape_of(%432, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%432, dtype="float64") /* ty=Tensor[(13, 12, 13), float64] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %437 = divide(%435, %436) /* ty=Tensor[(13, 12, 13), float64] */;
  %438 = cast(%437, dtype="uint32") /* ty=Tensor[(13, 12, 13), uint32] */;
  %439 = shape_of(%432, dtype="int32") /* ty=Tensor[(3), int32] */;
  %440 = cast(%432, dtype="uint32") /* ty=Tensor[(13, 12, 13), uint32] */;
  %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %442 = %420.2;
  %443 = tan(%425) /* ty=Tensor[(13, 3, 8), float32] */;
  %444 = %430.2;
  %445 = add(%440, %441) /* ty=Tensor[(13, 12, 13), uint32] */;
  (%442, %var_5018, %var_5021, %443, %444, %var_5041, %445)
}

def @func_7473(%var_7444: Tensor[(10, 4, 3), float32]) -> (Tensor[(10, 4, 3), float32], Tensor[(75, 2), float64], Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(4, 4, 13), float32], Tensor[(16), int16]) {
  %446 = cast(%var_7444, dtype="float32") /* ty=Tensor[(10, 4, 3), float32] */;
  %447 = @func_6880() /* ty=(Tensor[(16, 12, 11), float64], Tensor[(13, 12, 13), float64], Tensor[(75, 2), float64]) */;
  %448 = @func_6826() /* ty=(Tensor[(?, 4, 4), float64], Tensor[(13, 12, 13), uint8], Tensor[(13, 12, 13), float64]) */;
  %449 = @func_6210() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), int16], Tensor[(16), int16]) */;
  %450 = @func_6210() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), int16], Tensor[(16), int16]) */;
  %451 = rsqrt(%446) /* ty=Tensor[(10, 4, 3), float32] */;
  %452 = %447.2;
  %453 = @func_6436() /* ty=Tensor[(13, 12, 13), float64] */;
  %454 = %448.2;
  %455 = %449.0;
  %456 = @func_5745() /* ty=Tensor[(4, 4, 13), float32] */;
  %457 = %450.2;
  (%451, %452, %453, %454, %455, %456, %457)
}

def @func_9630() -> (Tensor[(99), float32], Tensor[(99), float32], Tensor[(13, 12, 13), float64]) {
  %458 = @func_6339() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(99), float32]) */;
  %459 = %458.2;
  %460 = cast(%459, dtype="float32") /* ty=Tensor[(99), float32] */;
  %461 = reshape(%460, newshape=[99]) /* ty=Tensor[(99), float32] */;
  %462 = @func_9116(%461) /* ty=(Tensor[(12, 15, 7), float32], Tensor[(3, 3, 11), float32], Tensor[(99), float32]) */;
  %463 = %462.2;
  %464 = @func_5749() /* ty=Tensor[(13, 12, 13), float64] */;
  (%459, %463, %464)
}

def @func_10514() -> (Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) {
  %465 = @func_9925() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %466 = @func_7686() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) */;
  %467 = %465.0;
  %468 = %466.1;
  (%467, %468)
}

def @func_7886() -> (Tensor[(?, 4, 4), int16], Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) {
  %469 = @func_6210() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), int16], Tensor[(16), int16]) */;
  %470 = @func_7686() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) */;
  %471 = %469.1;
  %472 = %470.1;
  %473 = @func_7230() /* ty=Tensor[(13, 12, 13), float64] */;
  (%471, %472, %473)
}

def @func_10558() -> (Tensor[(13, 12, 13), float64],) {
  %474 = @func_9925() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %475 = %474.0;
  (%475,)
}

def @func_10763() -> (Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), int32], Tensor[(13, 12, 13), float64]) {
  %476 = @func_7886() /* ty=(Tensor[(?, 4, 4), int16], Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) */;
  %477 = %476.2;
  %478 = cast(%477, dtype="float64") /* ty=Tensor[(13, 12, 13), float64] */;
  %479 = reshape(%478, newshape=[13, 12, 13]) /* ty=Tensor[(13, 12, 13), float64] */;
  %480 = @func_10588(%479) /* ty=(Tensor[(13, 12, 13), int32],) */;
  %481 = %480.0;
  %482 = @func_9428() /* ty=Tensor[(13, 12, 13), float64] */;
  (%477, %481, %482)
}

def @func_8528() -> (Tensor[(4, 4, 13), float32], Tensor[(13, 12, 13), float64]) {
  %483 = @func_7105() /* ty=(Tensor[(4, 4, 13), float32],) */;
  %484 = @func_7402() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %485 = %483.0;
  %486 = %484.0;
  (%485, %486)
}

def @func_6436() -> Tensor[(13, 12, 13), float64] {
  @func_5749() /* ty=Tensor[(13, 12, 13), float64] */
}

def @func_3471(%var_3459: Tensor[(9, 9, 8), float64], %var_3464: Tensor[(2, 72), float32], %var_3466: Tensor[(90), int8]) -> (Tensor[(9, 9, 8), float64], Tensor[(110, 6), uint32], Tensor[(2, 72), float32], Tensor[(1584), float32], Tensor[(90), int8], Tensor[(660, 1), uint32], Tensor[(3, 60), float64]) {
  %487 = cast(%var_3459, dtype="float64") /* ty=Tensor[(9, 9, 8), float64] */;
  %488 = cast(%var_3464, dtype="float32") /* ty=Tensor[(2, 72), float32] */;
  %489 = cast(meta[relay.Constant][37] /* ty=Tensor[(1584), float32] */, dtype="float32") /* ty=Tensor[(1584), float32] */;
  %490 = cast(%var_3466, dtype="int8") /* ty=Tensor[(90), int8] */;
  %491 = cast(meta[relay.Constant][38] /* ty=Tensor[(660, 1), uint32] */, dtype="uint32") /* ty=Tensor[(660, 1), uint32] */;
  %492 = cast(meta[relay.Constant][39] /* ty=Tensor[(3, 60), float64] */, dtype="float64") /* ty=Tensor[(3, 60), float64] */;
  %493 = reshape(%488, newshape=[12, 12, 1]) /* ty=Tensor[(12, 12, 1), float32] */;
  %494 = reshape(%489, newshape=[12, 12, 11]) /* ty=Tensor[(12, 12, 11), float32] */;
  %495 = reshape(%490, newshape=[90]) /* ty=Tensor[(90), int8] */;
  %496 = reshape(%491, newshape=[110, 6]) /* ty=Tensor[(110, 6), uint32] */;
  %497 = reshape(%492, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %498 = @func_2906(%493, %494, %495, %496, %497) /* ty=(Tensor[(12, 12, 11), bool], Tensor[(2, 9, 5), bool], Tensor[(90), int8], Tensor[(110, 6), uint32], Tensor[(150), float64], Tensor[(5, 6, 6), float64], Tensor[(180), float64], Tensor[(180), float64]) */;
  %499 = sigmoid(%487) /* ty=Tensor[(9, 9, 8), float64] */;
  %500 = %498.3;
  (%499, %500, %var_3464, meta[relay.Constant][37] /* ty=Tensor[(1584), float32] */, %var_3466, meta[relay.Constant][38] /* ty=Tensor[(660, 1), uint32] */, meta[relay.Constant][39] /* ty=Tensor[(3, 60), float64] */)
}

def @func_4660(%var_4617: Tensor[(4, 2, 16), int16], %var_4618: Tensor[(4, 2, 16), int16]) -> (Tensor[(4, 2, 16), bool], Tensor[(15, 4, 11), float32], Tensor[(660), uint32], Tensor[(15, 4, 11), float32], Tensor[(150), float64]) {
  %501 = cast(%var_4618, dtype="bool") /* ty=Tensor[(4, 2, 16), bool] */;
  %502 = shape_of(%var_4617, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(%var_4617, dtype="bool") /* ty=Tensor[(4, 2, 16), bool] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %505 = cast(meta[relay.Constant][40] /* ty=Tensor[(660), uint32] */, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %506 = cast(meta[relay.Constant][41] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %507 = reshape(%505, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), uint32] */;
  %508 = reshape(%506, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %509 = @func_2017(%507, %508) /* ty=(Tensor[(180), float64], Tensor[(150), float64], Tensor[(180), float64], Tensor[(180), float64], Tensor[(15, 4, 11), float32]) */;
  %510 = cast(meta[relay.Constant][40] /* ty=Tensor[(660), uint32] */, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %511 = cast(meta[relay.Constant][41] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %512 = reshape(%510, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), uint32] */;
  %513 = reshape(%511, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %514 = @func_2017(%512, %513) /* ty=(Tensor[(180), float64], Tensor[(150), float64], Tensor[(180), float64], Tensor[(180), float64], Tensor[(15, 4, 11), float32]) */;
  %515 = cast(meta[relay.Constant][41] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %516 = equal(%503, %504) /* ty=Tensor[(4, 2, 16), bool] */;
  %517 = %509.4;
  %518 = %514.4;
  %519 = acosh(%515) /* ty=Tensor[(150), float64] */;
  (%516, %517, meta[relay.Constant][40] /* ty=Tensor[(660), uint32] */, %518, %519)
}

def @func_5339(%var_5330: Tensor[(140), float32], %var_5331: Tensor[(660), uint32]) -> (Tensor[(13, 12, 13), float32], Tensor[(4, 5, 7), float32], Tensor[(140), float32], Tensor[(660), uint32]) {
  %520 = @func_5131() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %521 = %520.0;
  %522 = cast(%521, dtype="float64") /* ty=Tensor[(13, 12, 13), float64] */;
  %523 = acos(%522) /* ty=Tensor[(13, 12, 13), float64] */;
  %524 = cast(%523, dtype="float32") /* ty=Tensor[(13, 12, 13), float32] */;
  %525 = cast(%var_5330, dtype="float32") /* ty=Tensor[(140), float32] */;
  %526 = cast(%var_5331, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %527 = reshape(%525, newshape=[4, 5, 7]) /* ty=Tensor[(4, 5, 7), float32] */;
  %528 = reshape(%526, newshape=[660]) /* ty=Tensor[(660), uint32] */;
  %529 = @func_5186(%527, %528) /* ty=(Tensor[(4, 5, 7), float32], Tensor[(150), float64], Tensor[(660), uint32], Tensor[(150), float64]) */;
  %530 = acosh(%524) /* ty=Tensor[(13, 12, 13), float32] */;
  %531 = %529.0;
  (%530, %531, %var_5330, %var_5331)
}

def @func_9907() -> (Tensor[(150), float64], Tensor[(?, 4, 4), float64]) {
  %532 = @func_6316() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(2, 9, 5), bool], Tensor[(15, 6), int8], Tensor[(660), uint32], Tensor[(150), float64]) */;
  %533 = %532.4;
  %534 = @func_6365() /* ty=Tensor[(?, 4, 4), float64] */;
  (%533, %534)
}

def @func_7210(%var_7198: Tensor[(660), float32], %var_7199: Tensor[(1, 180), float64]) -> (Tensor[(13, 12, 13), float64], Tensor[(180), float64], Tensor[(660), float32], Tensor[(1, 180), float64], Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), float64]) {
  %535 = cast(%var_7198, dtype="float32") /* ty=Tensor[(660), float32] */;
  %536 = cast(%var_7199, dtype="float64") /* ty=Tensor[(1, 180), float64] */;
  %537 = reshape(%535, newshape=[11, 15, 4]) /* ty=Tensor[(11, 15, 4), float32] */;
  %538 = reshape(%536, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %539 = @func_311(%537, %538) /* ty=(Tensor[(11, 15, 4), float32], Tensor[(5, 6, 6), float64], Tensor[(180), float64]) */;
  %540 = @func_4924() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %541 = @func_6826() /* ty=(Tensor[(?, 4, 4), float64], Tensor[(13, 12, 13), uint8], Tensor[(13, 12, 13), float64]) */;
  %542 = @func_5835() /* ty=Tensor[(13, 12, 13), float64] */;
  %543 = %539.2;
  %544 = %540.0;
  %545 = %541.0;
  (%542, %543, %var_7198, %var_7199, %544, %545)
}

def @func_4924() -> (Tensor[(13, 12, 13), float64],) {
  %546 = cast(meta[relay.Constant][42] /* ty=Tensor[(13, 12, 13), float64] */, dtype="float64") /* ty=Tensor[(13, 12, 13), float64] */;
  %547 = sin(%546) /* ty=Tensor[(13, 12, 13), float64] */;
  (%547,)
}

def @func_9803() -> (Tensor[(13, 12, 13), float64], Tensor[(128), int16], Tensor[(15, 4, 11), float64], Tensor[(13, 12, 13), float64]) {
  %548 = @func_9490() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %549 = cast(meta[relay.Constant][43] /* ty=Tensor[(128), int16] */, dtype="int16") /* ty=Tensor[(128), int16] */;
  %550 = cast(meta[relay.Constant][43] /* ty=Tensor[(128), int16] */, dtype="int16") /* ty=Tensor[(128), int16] */;
  %551 = reshape(%549, newshape=[4, 2, 16]) /* ty=Tensor[(4, 2, 16), int16] */;
  %552 = reshape(%550, newshape=[4, 2, 16]) /* ty=Tensor[(4, 2, 16), int16] */;
  %553 = @func_4660(%551, %552) /* ty=(Tensor[(4, 2, 16), bool], Tensor[(15, 4, 11), float32], Tensor[(660), uint32], Tensor[(15, 4, 11), float32], Tensor[(150), float64]) */;
  %554 = %553.3;
  %555 = cast(%554, dtype="float64") /* ty=Tensor[(15, 4, 11), float64] */;
  %556 = %548.0;
  %557 = sinh(%555) /* ty=Tensor[(15, 4, 11), float64] */;
  %558 = @func_6463() /* ty=Tensor[(13, 12, 13), float64] */;
  (%556, meta[relay.Constant][43] /* ty=Tensor[(128), int16] */, %557, %558)
}

def @func_11064() -> Tensor[(13, 12, 13), float64] {
  %559 = @func_8476() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) */;
  %559.1
}

def @func_9514() -> (Tensor[(?, 4, 4), float32], Tensor[(13, 12, 13), float64]) {
  %560 = @func_8279() /* ty=Tensor[(?, 4, 4), float32] */;
  %561 = @func_5749() /* ty=Tensor[(13, 12, 13), float64] */;
  (%560, %561)
}

def @func_9726(%var_9656: Tensor[(99), float32], %var_9704: Tensor[(3, 3, 11), float32]) -> (Tensor[(13, 12, 13), float64], Tensor[(99), float32], Tensor[(8, 4, 10), float32], Tensor[(320), float32], Tensor[(?, 4, 4), int16], Tensor[(4, 4, 13), float32], Tensor[(3, 3, 11), int8]) {
  %562 = cast(meta[relay.Constant][44] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %563 = reshape(%562, newshape=[8, 4, 10]) /* ty=Tensor[(8, 4, 10), float32] */;
  %564 = @func_7001(%563) /* ty=(Tensor[(8, 4, 10), float32],) */;
  %565 = @func_9361() /* ty=(Tensor[(?, 4, 4), int16],) */;
  %566 = cast(%var_9656, dtype="float32") /* ty=Tensor[(99), float32] */;
  %567 = reshape(%566, newshape=[3, 3, 11]) /* ty=Tensor[(3, 3, 11), float32] */;
  %568 = @func_4349(%567) /* ty=(Tensor[(3, 3, 11), float32],) */;
  %569 = %568.0;
  %570 = cast(%var_9704, dtype="int8") /* ty=Tensor[(3, 3, 11), int8] */;
  %571 = shape_of(%569, dtype="int32") /* ty=Tensor[(3), int32] */;
  %572 = cast(%569, dtype="int8") /* ty=Tensor[(3, 3, 11), int8] */;
  %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %574 = @func_9428() /* ty=Tensor[(13, 12, 13), float64] */;
  %575 = %564.0;
  %576 = %565.0;
  %577 = @func_7120() /* ty=Tensor[(4, 4, 13), float32] */;
  %578 = subtract(%572, %573) /* ty=Tensor[(3, 3, 11), int8] */;
  (%574, %var_9656, %575, meta[relay.Constant][44] /* ty=Tensor[(320), float32] */, %576, %577, %578)
}

def @func_6316() -> (Tensor[(13, 12, 13), float64], Tensor[(2, 9, 5), bool], Tensor[(15, 6), int8], Tensor[(660), uint32], Tensor[(150), float64]) {
  %579 = @func_5131() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %580 = cast(meta[relay.Constant][45] /* ty=Tensor[(15, 6), int8] */, dtype="int8") /* ty=Tensor[(15, 6), int8] */;
  %581 = cast(meta[relay.Constant][46] /* ty=Tensor[(660), uint32] */, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %582 = cast(meta[relay.Constant][47] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %583 = reshape(%580, newshape=[2, 9, 5]) /* ty=Tensor[(2, 9, 5), int8] */;
  %584 = reshape(%581, newshape=[660]) /* ty=Tensor[(660), uint32] */;
  %585 = reshape(%582, newshape=[1, 150]) /* ty=Tensor[(1, 150), float64] */;
  %586 = @func_2306(%583, %584, %585) /* ty=(Tensor[(2, 9, 5), bool], Tensor[(660), uint32], Tensor[(?, 150), bool], Tensor[(2, 9, 5), float32]) */;
  %587 = %579.0;
  %588 = %586.0;
  (%587, %588, meta[relay.Constant][45] /* ty=Tensor[(15, 6), int8] */, meta[relay.Constant][46] /* ty=Tensor[(660), uint32] */, meta[relay.Constant][47] /* ty=Tensor[(150), float64] */)
}

def @func_6987() -> (Tensor[(13, 12, 13), float64], Tensor[(180), float64], Tensor[(660), float32], Tensor[(180), float64]) {
  %589 = cast(meta[relay.Constant][48] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
  %590 = cast(meta[relay.Constant][49] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %591 = reshape(%589, newshape=[11, 4, 15]) /* ty=Tensor[(11, 4, 15), float32] */;
  %592 = reshape(%590, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %593 = @func_488(%591, %592) /* ty=(Tensor[(5, 6, 6), float64], Tensor[(180), float64], Tensor[(11, 4, 15), uint16], Tensor[(5, 6, 6), float64]) */;
  %594 = @func_6463() /* ty=Tensor[(13, 12, 13), float64] */;
  %595 = %593.1;
  (%594, %595, meta[relay.Constant][48] /* ty=Tensor[(660), float32] */, meta[relay.Constant][49] /* ty=Tensor[(180), float64] */)
}

def @func_9024() -> Tensor[(13, 12, 13), float64] {
  @func_5749() /* ty=Tensor[(13, 12, 13), float64] */
}

def @func_8704(%var_8598: Tensor[(1728), float64], %var_8599: Tensor[(90), int8], %var_8635: Tensor[(648), float64], %var_8636: Tensor[(144), float32]) -> (Tensor[(13, 12, 13), float64], Tensor[(660), uint32], Tensor[(1728), float64], Tensor[(90), int8], Tensor[(25, 6), bool], Tensor[(2, 72), float32], Tensor[(648), float64], Tensor[(144), float32], Tensor[(25, 6), int16], Tensor[(25, 6), float64], Tensor[(180), float64], Tensor[(16), int16], Tensor[(13, 12, 13), float64]) {
  %596 = @func_7686() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) */;
  %597 = cast(%var_8598, dtype="float64") /* ty=Tensor[(1728), float64] */;
  %598 = cast(%var_8599, dtype="int8") /* ty=Tensor[(90), int8] */;
  %599 = cast(meta[relay.Constant][50] /* ty=Tensor[(25, 6), float64] */, dtype="float64") /* ty=Tensor[(25, 6), float64] */;
  %600 = cast(%var_8598, dtype="float32") /* ty=Tensor[(1728), float32] */;
  %601 = reshape(%597, newshape=[16, 12, 9]) /* ty=Tensor[(16, 12, 9), float64] */;
  %602 = reshape(%598, newshape=[90]) /* ty=Tensor[(90), int8] */;
  %603 = reshape(%599, newshape=[75, 2]) /* ty=Tensor[(75, 2), float64] */;
  %604 = reshape(%600, newshape=[16, 12, 9]) /* ty=Tensor[(16, 12, 9), float32] */;
  %605 = @func_3156(%601, %602, %603, %604) /* ty=(Tensor[(11, 4, 15), uint16], Tensor[(660), float32], Tensor[(180), float64], Tensor[(16, 12, 9), float32], Tensor[(660), uint32], Tensor[(90), int8], Tensor[(75, 2), float64], Tensor[(16, 12, 9), float32], Tensor[(5, 6, 6), float64]) */;
  %606 = cast(meta[relay.Constant][51] /* ty=Tensor[(25, 6), float64] */, dtype="float64") /* ty=Tensor[(25, 6), float64] */;
  %607 = sqrt(%606) /* ty=Tensor[(25, 6), float64] */;
  %608 = cast(meta[relay.Constant][51] /* ty=Tensor[(25, 6), float64] */, dtype="bool") /* ty=Tensor[(25, 6), bool] */;
  %609 = shape_of(%607, dtype="int32") /* ty=Tensor[(2), int32] */;
  %610 = cast(%607, dtype="bool") /* ty=Tensor[(25, 6), bool] */;
  %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %612 = cast(%var_8635, dtype="float64") /* ty=Tensor[(648), float64] */;
  %613 = cast(%var_8636, dtype="float32") /* ty=Tensor[(144), float32] */;
  %614 = cast(%var_8599, dtype="int8") /* ty=Tensor[(90), int8] */;
  %615 = reshape(%612, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float64] */;
  %616 = reshape(%613, newshape=[2, 72]) /* ty=Tensor[(2, 72), float32] */;
  %617 = reshape(%614, newshape=[90]) /* ty=Tensor[(90), int8] */;
  %618 = @func_3471(%615, %616, %617) /* ty=(Tensor[(9, 9, 8), float64], Tensor[(110, 6), uint32], Tensor[(2, 72), float32], Tensor[(1584), float32], Tensor[(90), int8], Tensor[(660, 1), uint32], Tensor[(3, 60), float64]) */;
  %619 = cast(%607, dtype="int16") /* ty=Tensor[(25, 6), int16] */;
  %620 = shape_of(meta[relay.Constant][50] /* ty=Tensor[(25, 6), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %621 = cast(meta[relay.Constant][50] /* ty=Tensor[(25, 6), float64] */, dtype="int16") /* ty=Tensor[(25, 6), int16] */;
  %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %623 = cast(meta[relay.Constant][51] /* ty=Tensor[(25, 6), float64] */, dtype="uint64") /* ty=Tensor[(25, 6), uint64] */;
  %624 = shape_of(meta[relay.Constant][50] /* ty=Tensor[(25, 6), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %625 = cast(meta[relay.Constant][50] /* ty=Tensor[(25, 6), float64] */, dtype="uint64") /* ty=Tensor[(25, 6), uint64] */;
  %626 = dyn.reshape(%623, %624, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %627 = bitwise_or(%625, %626) /* ty=Tensor[(25, 6), uint64] */;
  %628 = cast(%627, dtype="float64") /* ty=Tensor[(25, 6), float64] */;
  %629 = %605.4;
  %630 = cast(%629, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %631 = cast(meta[relay.Constant][51] /* ty=Tensor[(25, 6), float64] */, dtype="float64") /* ty=Tensor[(25, 6), float64] */;
  %632 = reshape(%630, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), uint32] */;
  %633 = reshape(%631, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %634 = @func_2017(%632, %633) /* ty=(Tensor[(180), float64], Tensor[(150), float64], Tensor[(180), float64], Tensor[(180), float64], Tensor[(15, 4, 11), float32]) */;
  %635 = @func_6210() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), int16], Tensor[(16), int16]) */;
  %636 = cast(%627, dtype="float64") /* ty=Tensor[(25, 6), float64] */;
  %637 = reshape(%636, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %638 = @func_6088(%637) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(2, 9, 5), float32], Tensor[(90), int8], Tensor[(660), uint32], Tensor[(150), float64]) */;
  %639 = %596.0;
  %640 = equal(%610, %611) /* ty=Tensor[(25, 6), bool] */;
  %641 = %618.2;
  %642 = maximum(%621, %622) /* ty=Tensor[(25, 6), int16] */;
  %643 = sigmoid(%628) /* ty=Tensor[(25, 6), float64] */;
  %644 = %634.2;
  %645 = %635.2;
  %646 = %638.0;
  (%639, %629, %var_8598, %var_8599, %640, %641, %var_8635, %var_8636, %642, %643, %644, %645, %646)
}

def @func_9007() -> Tensor[(13, 12, 13), float64] {
  %647 = @func_6673() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(16, 12, 9), float32], Tensor[(288, 6), float64], Tensor[(90), int8], Tensor[(5, 6, 6), float64], Tensor[(13, 12, 13), float64], Tensor[(140), float32], Tensor[(70, 2), float32], Tensor[(5, 132), uint32], Tensor[(13, 12, 13), float64], Tensor[(75, 2), float64], Tensor[(4, 4, 13), float32], Tensor[(52, 4), float32], Tensor[(144), float32], Tensor[(75, 2), float64]) */;
  %647.0
}

def @func_5745() -> Tensor[(4, 4, 13), float32] {
  %648 = cast(meta[relay.Constant][52] /* ty=Tensor[(4, 4, 13), float32] */, dtype="float32") /* ty=Tensor[(4, 4, 13), float32] */;
  acosh(%648) /* ty=Tensor[(4, 4, 13), float32] */
}

def @func_6673() -> (Tensor[(13, 12, 13), float64], Tensor[(16, 12, 9), float32], Tensor[(288, 6), float64], Tensor[(90), int8], Tensor[(5, 6, 6), float64], Tensor[(13, 12, 13), float64], Tensor[(140), float32], Tensor[(70, 2), float32], Tensor[(5, 132), uint32], Tensor[(13, 12, 13), float64], Tensor[(75, 2), float64], Tensor[(4, 4, 13), float32], Tensor[(52, 4), float32], Tensor[(144), float32], Tensor[(75, 2), float64]) {
  %649 = @func_5295() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %650 = cast(meta[relay.Constant][53] /* ty=Tensor[(288, 6), float64] */, dtype="float64") /* ty=Tensor[(288, 6), float64] */;
  %651 = cast(meta[relay.Constant][54] /* ty=Tensor[(90), int8] */, dtype="int8") /* ty=Tensor[(90), int8] */;
  %652 = cast(meta[relay.Constant][55] /* ty=Tensor[(75, 2), float64] */, dtype="float64") /* ty=Tensor[(75, 2), float64] */;
  %653 = cast(meta[relay.Constant][53] /* ty=Tensor[(288, 6), float64] */, dtype="float32") /* ty=Tensor[(288, 6), float32] */;
  %654 = reshape(%650, newshape=[16, 12, 9]) /* ty=Tensor[(16, 12, 9), float64] */;
  %655 = reshape(%651, newshape=[90]) /* ty=Tensor[(90), int8] */;
  %656 = reshape(%652, newshape=[75, 2]) /* ty=Tensor[(75, 2), float64] */;
  %657 = reshape(%653, newshape=[16, 12, 9]) /* ty=Tensor[(16, 12, 9), float32] */;
  %658 = @func_3156(%654, %655, %656, %657) /* ty=(Tensor[(11, 4, 15), uint16], Tensor[(660), float32], Tensor[(180), float64], Tensor[(16, 12, 9), float32], Tensor[(660), uint32], Tensor[(90), int8], Tensor[(75, 2), float64], Tensor[(16, 12, 9), float32], Tensor[(5, 6, 6), float64]) */;
  %659 = cast(meta[relay.Constant][53] /* ty=Tensor[(288, 6), float64] */, dtype="float64") /* ty=Tensor[(288, 6), float64] */;
  %660 = cast(meta[relay.Constant][54] /* ty=Tensor[(90), int8] */, dtype="int8") /* ty=Tensor[(90), int8] */;
  %661 = cast(meta[relay.Constant][55] /* ty=Tensor[(75, 2), float64] */, dtype="float64") /* ty=Tensor[(75, 2), float64] */;
  %662 = tan(%661) /* ty=Tensor[(75, 2), float64] */;
  %663 = cast(%662, dtype="float64") /* ty=Tensor[(75, 2), float64] */;
  %664 = %658.7;
  %665 = cast(%664, dtype="float32") /* ty=Tensor[(16, 12, 9), float32] */;
  %666 = reshape(%659, newshape=[16, 12, 9]) /* ty=Tensor[(16, 12, 9), float64] */;
  %667 = reshape(%660, newshape=[90]) /* ty=Tensor[(90), int8] */;
  %668 = reshape(%663, newshape=[75, 2]) /* ty=Tensor[(75, 2), float64] */;
  %669 = reshape(%665, newshape=[16, 12, 9]) /* ty=Tensor[(16, 12, 9), float32] */;
  %670 = @func_3156(%666, %667, %668, %669) /* ty=(Tensor[(11, 4, 15), uint16], Tensor[(660), float32], Tensor[(180), float64], Tensor[(16, 12, 9), float32], Tensor[(660), uint32], Tensor[(90), int8], Tensor[(75, 2), float64], Tensor[(16, 12, 9), float32], Tensor[(5, 6, 6), float64]) */;
  %671 = @func_4924() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %672 = cast(meta[relay.Constant][56] /* ty=Tensor[(70, 2), float32] */, dtype="float32") /* ty=Tensor[(70, 2), float32] */;
  %673 = cast(meta[relay.Constant][57] /* ty=Tensor[(5, 132), uint32] */, dtype="uint32") /* ty=Tensor[(5, 132), uint32] */;
  %674 = reshape(%672, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %675 = reshape(%673, newshape=[660]) /* ty=Tensor[(660), uint32] */;
  %676 = @func_5339(%674, %675) /* ty=(Tensor[(13, 12, 13), float32], Tensor[(4, 5, 7), float32], Tensor[(140), float32], Tensor[(660), uint32]) */;
  %677 = cast(meta[relay.Constant][55] /* ty=Tensor[(75, 2), float64] */, dtype="bool") /* ty=Tensor[(75, 2), bool] */;
  %678 = shape_of(%662, dtype="int32") /* ty=Tensor[(2), int32] */;
  %679 = cast(%662, dtype="bool") /* ty=Tensor[(75, 2), bool] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %681 = not_equal(%679, %680) /* ty=Tensor[(75, 2), bool] */;
  %682 = cast(%681, dtype="float64") /* ty=Tensor[(75, 2), float64] */;
  %683 = cast(meta[relay.Constant][58] /* ty=Tensor[(52, 4), float32] */, dtype="float32") /* ty=Tensor[(52, 4), float32] */;
  %684 = cast(meta[relay.Constant][59] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %685 = cast(meta[relay.Constant][53] /* ty=Tensor[(288, 6), float64] */, dtype="float64") /* ty=Tensor[(288, 6), float64] */;
  %686 = reshape(%683, newshape=[4, 4, 13]) /* ty=Tensor[(4, 4, 13), float32] */;
  %687 = reshape(%684, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %688 = reshape(%685, newshape=[1728]) /* ty=Tensor[(1728), float64] */;
  %689 = @func_6145(%686, %687, %688) /* ty=(Tensor[(4, 4, 13), int32], Tensor[(13, 12, 13), float64], Tensor[(144), float32], Tensor[(90), int8], Tensor[(180), float64], Tensor[(2, 9, 5), float32], Tensor[(150), float64], Tensor[(1728), float64], Tensor[(1728), float64], Tensor[(4, 4, 13), float32]) */;
  %690 = cast(meta[relay.Constant][55] /* ty=Tensor[(75, 2), float64] */, dtype="float64") /* ty=Tensor[(75, 2), float64] */;
  %691 = shape_of(%662, dtype="int32") /* ty=Tensor[(2), int32] */;
  %692 = cast(%662, dtype="float64") /* ty=Tensor[(75, 2), float64] */;
  %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %694 = %649.0;
  %695 = %670.8;
  %696 = %671.0;
  %697 = %676.2;
  %698 = @func_5749() /* ty=Tensor[(13, 12, 13), float64] */;
  %699 = cos(%682) /* ty=Tensor[(75, 2), float64] */;
  %700 = %689.9;
  %701 = divide(%692, %693) /* ty=Tensor[(75, 2), float64] */;
  (%694, %664, meta[relay.Constant][53] /* ty=Tensor[(288, 6), float64] */, meta[relay.Constant][54] /* ty=Tensor[(90), int8] */, %695, %696, %697, meta[relay.Constant][56] /* ty=Tensor[(70, 2), float32] */, meta[relay.Constant][57] /* ty=Tensor[(5, 132), uint32] */, %698, %699, %700, meta[relay.Constant][58] /* ty=Tensor[(52, 4), float32] */, meta[relay.Constant][59] /* ty=Tensor[(144), float32] */, %701)
}

def @func_10092(%var_10058: Tensor[(648), float64], %var_10059: Tensor[(144), float32], %var_10060: Tensor[(90), int8]) -> (Tensor[(99), float32], Tensor[(13, 12, 13), float64], Tensor[(110, 6), uint32], Tensor[(648), float64], Tensor[(144), float32], Tensor[(90), int8], Tensor[(180), float64]) {
  %702 = @func_9630() /* ty=(Tensor[(99), float32], Tensor[(99), float32], Tensor[(13, 12, 13), float64]) */;
  %703 = @func_7172() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %704 = cast(%var_10058, dtype="float64") /* ty=Tensor[(648), float64] */;
  %705 = cast(%var_10059, dtype="float32") /* ty=Tensor[(144), float32] */;
  %706 = cast(%var_10060, dtype="int8") /* ty=Tensor[(90), int8] */;
  %707 = reshape(%704, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float64] */;
  %708 = reshape(%705, newshape=[2, 72]) /* ty=Tensor[(2, 72), float32] */;
  %709 = reshape(%706, newshape=[90]) /* ty=Tensor[(90), int8] */;
  %710 = @func_3471(%707, %708, %709) /* ty=(Tensor[(9, 9, 8), float64], Tensor[(110, 6), uint32], Tensor[(2, 72), float32], Tensor[(1584), float32], Tensor[(90), int8], Tensor[(660, 1), uint32], Tensor[(3, 60), float64]) */;
  %711 = %710.1;
  %712 = cast(%711, dtype="float32") /* ty=Tensor[(110, 6), float32] */;
  %713 = reshape(%712, newshape=[660]) /* ty=Tensor[(660), float32] */;
  %714 = @func_680(%713) /* ty=(Tensor[(13, 3, 8), float64], Tensor[(180), float64], Tensor[(660), float32], Tensor[(180), float64]) */;
  %715 = %702.0;
  %716 = %703.0;
  %717 = %714.3;
  (%715, %716, %711, %var_10058, %var_10059, %var_10060, %717)
}

def @func_11292(%var_11271: Tensor[(660), uint32], %var_11272: Tensor[(150), float64]) -> (Tensor[(13, 12, 13), float64], Tensor[(?, 150), bool], Tensor[(660), uint32], Tensor[(150), float64], Tensor[(13, 12, 13), float64], Tensor[(90), int8], Tensor[(45, 2), float32], Tensor[(13, 12, 13), float64]) {
  %718 = @func_9925() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %719 = cast(meta[relay.Constant][60] /* ty=Tensor[(45, 2), int8] */, dtype="int8") /* ty=Tensor[(45, 2), int8] */;
  %720 = cast(%var_11271, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %721 = cast(%var_11272, dtype="float64") /* ty=Tensor[(150), float64] */;
  %722 = reshape(%719, newshape=[2, 9, 5]) /* ty=Tensor[(2, 9, 5), int8] */;
  %723 = reshape(%720, newshape=[660]) /* ty=Tensor[(660), uint32] */;
  %724 = reshape(%721, newshape=[1, 150]) /* ty=Tensor[(1, 150), float64] */;
  %725 = @func_2306(%722, %723, %724) /* ty=(Tensor[(2, 9, 5), bool], Tensor[(660), uint32], Tensor[(?, 150), bool], Tensor[(2, 9, 5), float32]) */;
  %726 = cast(meta[relay.Constant][60] /* ty=Tensor[(45, 2), int8] */, dtype="float32") /* ty=Tensor[(45, 2), float32] */;
  %727 = @func_7886() /* ty=(Tensor[(?, 4, 4), int16], Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) */;
  %728 = %718.0;
  %729 = %725.2;
  %730 = @func_6436() /* ty=Tensor[(13, 12, 13), float64] */;
  %731 = @func_8172() /* ty=Tensor[(90), int8] */;
  %732 = sin(%726) /* ty=Tensor[(45, 2), float32] */;
  %733 = %727.2;
  (%728, %729, %var_11271, %var_11272, %730, %731, %732, %733)
}

def @func_8752(%var_8720: uint16, %var_8721: Tensor[(6, 4, 1), uint16]) -> (Tensor[(6, 4, 1), uint16], Tensor[(6, 4, 1), float32]) {
  %734 = cast(%var_8720, dtype="uint16") /* ty=uint16 */;
  %735 = cast(%var_8721, dtype="uint16") /* ty=Tensor[(6, 4, 1), uint16] */;
  %736 = cast(%var_8721, dtype="float32") /* ty=Tensor[(6, 4, 1), float32] */;
  %737 = maximum(%734, %735) /* ty=Tensor[(6, 4, 1), uint16] */;
  %738 = log10(%736) /* ty=Tensor[(6, 4, 1), float32] */;
  (%737, %738)
}

def @func_311(%var_285: Tensor[(11, 15, 4), float32], %var_293: Tensor[(180), float64]) -> (Tensor[(11, 15, 4), float32], Tensor[(5, 6, 6), float64], Tensor[(180), float64]) {
  %739 = cast(%var_285, dtype="float32") /* ty=Tensor[(11, 15, 4), float32] */;
  %740 = cast(%var_293, dtype="float64") /* ty=Tensor[(180), float64] */;
  %741 = reshape(%740, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), float64] */;
  %742 = atan(%739) /* ty=Tensor[(11, 15, 4), float32] */;
  %743 = @func_212(%741) /* ty=Tensor[(5, 6, 6), float64] */;
  (%742, %743, %var_293)
}

def @func_8562() -> (Tensor[(13, 12, 13), float64],) {
  %744 = @func_5131() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %745 = %744.0;
  (%745,)
}

def @func_7756(%var_7754: Tensor[(99), float32]) -> (Tensor[(?, 4, 4), int16], Tensor[(3, 3, 11), float32], Tensor[(99), float32]) {
  %746 = @func_6253() /* ty=(Tensor[(?, 4, 4), int16],) */;
  %747 = cast(%var_7754, dtype="float32") /* ty=Tensor[(99), float32] */;
  %748 = reshape(%747, newshape=[99]) /* ty=Tensor[(99), float32] */;
  %749 = @func_5384(%748) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(3, 3, 11), float32], Tensor[(99), float32]) */;
  %750 = %746.0;
  %751 = %749.1;
  (%750, %751, %var_7754)
}

def @func_9258() -> (Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) {
  %752 = @func_6826() /* ty=(Tensor[(?, 4, 4), float64], Tensor[(13, 12, 13), uint8], Tensor[(13, 12, 13), float64]) */;
  %753 = @func_5295() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %754 = %752.2;
  %755 = %753.0;
  (%754, %755)
}

def @func_9361() -> (Tensor[(?, 4, 4), int16],) {
  %756 = @func_6253() /* ty=(Tensor[(?, 4, 4), int16],) */;
  %757 = %756.0;
  (%757,)
}

def @func_9925() -> (Tensor[(13, 12, 13), float64],) {
  %758 = @func_8056() /* ty=(Tensor[(4, 4, 13), float32], Tensor[(13, 12, 13), float64]) */;
  %759 = %758.1;
  (%759,)
}

def @func_4475(%var_4448: Tensor[(12, 5, 12), int64]) -> (Tensor[(12, 5, 12), bool], Tensor[(9, 9, 8), float64], Tensor[(648), float64], Tensor[(144), float32], Tensor[(90), int8]) {
  %760 = cast(%var_4448, dtype="bool") /* ty=Tensor[(12, 5, 12), bool] */;
  %761 = shape_of(meta[relay.Constant][61] /* ty=Tensor[(12, 5, 12), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %762 = cast(meta[relay.Constant][61] /* ty=Tensor[(12, 5, 12), int64] */, dtype="bool") /* ty=Tensor[(12, 5, 12), bool] */;
  %763 = dyn.reshape(%760, %761, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %764 = cast(meta[relay.Constant][62] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
  %765 = cast(meta[relay.Constant][63] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %766 = cast(meta[relay.Constant][64] /* ty=Tensor[(90), int8] */, dtype="int8") /* ty=Tensor[(90), int8] */;
  %767 = reshape(%764, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float64] */;
  %768 = reshape(%765, newshape=[2, 72]) /* ty=Tensor[(2, 72), float32] */;
  %769 = reshape(%766, newshape=[90]) /* ty=Tensor[(90), int8] */;
  %770 = @func_3471(%767, %768, %769) /* ty=(Tensor[(9, 9, 8), float64], Tensor[(110, 6), uint32], Tensor[(2, 72), float32], Tensor[(1584), float32], Tensor[(90), int8], Tensor[(660, 1), uint32], Tensor[(3, 60), float64]) */;
  %771 = less(%762, %763) /* ty=Tensor[(12, 5, 12), bool] */;
  %772 = %770.0;
  (%771, %772, meta[relay.Constant][62] /* ty=Tensor[(648), float64] */, meta[relay.Constant][63] /* ty=Tensor[(144), float32] */, meta[relay.Constant][64] /* ty=Tensor[(90), int8] */)
}

def @func_8476() -> (Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) {
  %773 = @func_7172() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %774 = @func_4924() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %775 = @func_5131() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %776 = %773.0;
  %777 = %774.0;
  %778 = %775.0;
  (%776, %777, %778)
}

def @func_10640() -> (Tensor[(13, 12, 13), float64],) {
  %779 = @func_5835() /* ty=Tensor[(13, 12, 13), float64] */;
  (%779,)
}

def @func_5811(%var_5784: Tensor[(660), float32]) -> (Tensor[(13, 12, 13), float64], Tensor[(5, 6, 6), float64], Tensor[(660), float32], Tensor[(180, 1), float32], Tensor[(140), float32], Tensor[(140), float32], Tensor[(13, 3, 8), float64], Tensor[(150), float64]) {
  %780 = @func_4924() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %781 = cast(%var_5784, dtype="float32") /* ty=Tensor[(660), float32] */;
  %782 = cast(meta[relay.Constant][65] /* ty=Tensor[(180, 1), float64] */, dtype="float64") /* ty=Tensor[(180, 1), float64] */;
  %783 = reshape(%781, newshape=[11, 15, 4]) /* ty=Tensor[(11, 15, 4), float32] */;
  %784 = reshape(%782, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %785 = @func_311(%783, %784) /* ty=(Tensor[(11, 15, 4), float32], Tensor[(5, 6, 6), float64], Tensor[(180), float64]) */;
  %786 = cast(meta[relay.Constant][65] /* ty=Tensor[(180, 1), float64] */, dtype="float64") /* ty=Tensor[(180, 1), float64] */;
  %787 = rsqrt(%786) /* ty=Tensor[(180, 1), float64] */;
  %788 = cast(%787, dtype="float32") /* ty=Tensor[(180, 1), float32] */;
  %789 = cast(meta[relay.Constant][66] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %790 = cast(%var_5784, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %791 = reshape(%789, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %792 = reshape(%790, newshape=[660]) /* ty=Tensor[(660), uint32] */;
  %793 = @func_5339(%791, %792) /* ty=(Tensor[(13, 12, 13), float32], Tensor[(4, 5, 7), float32], Tensor[(140), float32], Tensor[(660), uint32]) */;
  %794 = cast(meta[relay.Constant][67] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %795 = cast(%var_5784, dtype="float32") /* ty=Tensor[(660), float32] */;
  %796 = sigmoid(%788) /* ty=Tensor[(180, 1), float32] */;
  %797 = cast(%796, dtype="float64") /* ty=Tensor[(180, 1), float64] */;
  %798 = reshape(%794, newshape=[2, 15, 5]) /* ty=Tensor[(2, 15, 5), float64] */;
  %799 = reshape(%795, newshape=[660]) /* ty=Tensor[(660), float32] */;
  %800 = reshape(%797, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %801 = @func_1888(%798, %799, %800) /* ty=(Tensor[(180), float64], Tensor[(660), float32], Tensor[(180), float64], Tensor[(2, 15, 5), int16], Tensor[(5, 6, 6), float64], Tensor[(2, 15, 5), uint32], Tensor[(13, 3, 8), float64], Tensor[(5, 6, 6), float64], Tensor[(180), float64]) */;
  %802 = %780.0;
  %803 = %785.1;
  %804 = %793.2;
  %805 = %801.6;
  (%802, %803, %var_5784, %796, %804, meta[relay.Constant][66] /* ty=Tensor[(140), float32] */, %805, meta[relay.Constant][67] /* ty=Tensor[(150), float64] */)
}

def @func_9116(%var_9103: Tensor[(99), float32]) -> (Tensor[(12, 15, 7), float32], Tensor[(3, 3, 11), float32], Tensor[(99), float32]) {
  %806 = cast(meta[relay.Constant][68] /* ty=Tensor[(12, 15, 7), float32] */, dtype="float32") /* ty=Tensor[(12, 15, 7), float32] */;
  %807 = cast(%var_9103, dtype="float32") /* ty=Tensor[(99), float32] */;
  %808 = reshape(%807, newshape=[99]) /* ty=Tensor[(99), float32] */;
  %809 = @func_5384(%808) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(3, 3, 11), float32], Tensor[(99), float32]) */;
  %810 = acos(%806) /* ty=Tensor[(12, 15, 7), float32] */;
  %811 = %809.1;
  (%810, %811, %var_9103)
}

def @func_7318() -> Tensor[(4, 4, 13), float32] {
  %812 = @func_5966() /* ty=(Tensor[(4, 4, 13), float32],) */;
  %812.0
}

def @func_5966() -> (Tensor[(4, 4, 13), float32],) {
  %813 = @func_5882() /* ty=Tensor[(4, 4, 13), float32] */;
  (%813,)
}

def @func_11009(%var_10976: Tensor[(7, 13, 6), uint16], %var_10977: Tensor[(7, 13, 6), uint16]) -> (Tensor[(7, 13, 6), uint16], Tensor[(7, 13, 6), float32]) {
  %814 = cast(%var_10977, dtype="uint16") /* ty=Tensor[(7, 13, 6), uint16] */;
  %815 = shape_of(%var_10976, dtype="int32") /* ty=Tensor[(3), int32] */;
  %816 = cast(%var_10976, dtype="uint16") /* ty=Tensor[(7, 13, 6), uint16] */;
  %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %818 = cast(%var_10976, dtype="float32") /* ty=Tensor[(7, 13, 6), float32] */;
  %819 = left_shift(%816, %817) /* ty=Tensor[(7, 13, 6), uint16] */;
  %820 = acos(%818) /* ty=Tensor[(7, 13, 6), float32] */;
  (%819, %820)
}

def @func_7001(%var_6991: Tensor[(8, 4, 10), float32]) -> (Tensor[(8, 4, 10), float32],) {
  %821 = cast(meta[relay.Constant][69] /* ty=Tensor[(8, 4, 10), float32] */, dtype="float32") /* ty=Tensor[(8, 4, 10), float32] */;
  %822 = shape_of(%var_6991, dtype="int32") /* ty=Tensor[(3), int32] */;
  %823 = cast(%var_6991, dtype="float32") /* ty=Tensor[(8, 4, 10), float32] */;
  %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %825 = subtract(%823, %824) /* ty=Tensor[(8, 4, 10), float32] */;
  (%825,)
}

def @func_10145(%var_10142: Tensor[(4, 432), float64]) -> (Tensor[(?, 4, 4), int16], Tensor[(1728), float64], Tensor[(208), float32], Tensor[(144), float32], Tensor[(4, 432), float64]) {
  %826 = @func_9361() /* ty=(Tensor[(?, 4, 4), int16],) */;
  %827 = cast(meta[relay.Constant][70] /* ty=Tensor[(208), float32] */, dtype="float32") /* ty=Tensor[(208), float32] */;
  %828 = cast(meta[relay.Constant][71] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %829 = cast(%var_10142, dtype="float64") /* ty=Tensor[(4, 432), float64] */;
  %830 = reshape(%827, newshape=[4, 4, 13]) /* ty=Tensor[(4, 4, 13), float32] */;
  %831 = reshape(%828, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %832 = reshape(%829, newshape=[1728]) /* ty=Tensor[(1728), float64] */;
  %833 = @func_6145(%830, %831, %832) /* ty=(Tensor[(4, 4, 13), int32], Tensor[(13, 12, 13), float64], Tensor[(144), float32], Tensor[(90), int8], Tensor[(180), float64], Tensor[(2, 9, 5), float32], Tensor[(150), float64], Tensor[(1728), float64], Tensor[(1728), float64], Tensor[(4, 4, 13), float32]) */;
  %834 = %826.0;
  %835 = %833.8;
  (%834, %835, meta[relay.Constant][70] /* ty=Tensor[(208), float32] */, meta[relay.Constant][71] /* ty=Tensor[(144), float32] */, %var_10142)
}

def @func_10821(%var_10772: Tensor[(4, 9, 14), uint8], %var_10773: Tensor[(4, 9, 14), uint8], %var_10785: Tensor[(4, 9, 14), uint8]) -> (Tensor[(4, 9, 14), float64], Tensor[(4, 9, 14), uint16], Tensor[(4, 9, 14), float32], Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) {
  %836 = cast(%var_10785, dtype="float64") /* ty=Tensor[(4, 9, 14), float64] */;
  %837 = shape_of(%var_10772, dtype="int32") /* ty=Tensor[(3), int32] */;
  %838 = cast(%var_10772, dtype="float64") /* ty=Tensor[(4, 9, 14), float64] */;
  %839 = dyn.reshape(%836, %837, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %840 = cast(meta[relay.Constant][72] /* ty=Tensor[(4, 9, 14), uint8] */, dtype="uint16") /* ty=Tensor[(4, 9, 14), uint16] */;
  %841 = shape_of(%var_10773, dtype="int32") /* ty=Tensor[(3), int32] */;
  %842 = cast(%var_10773, dtype="uint16") /* ty=Tensor[(4, 9, 14), uint16] */;
  %843 = dyn.reshape(%840, %841, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %844 = cast(%var_10773, dtype="bool") /* ty=Tensor[(4, 9, 14), bool] */;
  %845 = shape_of(%var_10772, dtype="int32") /* ty=Tensor[(3), int32] */;
  %846 = cast(%var_10772, dtype="bool") /* ty=Tensor[(4, 9, 14), bool] */;
  %847 = dyn.reshape(%844, %845, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %848 = not_equal(%846, %847) /* ty=Tensor[(4, 9, 14), bool] */;
  %849 = cast(%848, dtype="float32") /* ty=Tensor[(4, 9, 14), float32] */;
  %850 = @func_8562() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %851 = @func_10640() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %852 = floor_mod(%838, %839) /* ty=Tensor[(4, 9, 14), float64] */;
  %853 = maximum(%842, %843) /* ty=Tensor[(4, 9, 14), uint16] */;
  %854 = sqrt(%849) /* ty=Tensor[(4, 9, 14), float32] */;
  %855 = %850.0;
  %856 = %851.0;
  (%852, %853, %854, %855, %856)
}

def @func_7105() -> (Tensor[(4, 4, 13), float32],) {
  %857 = @func_5882() /* ty=Tensor[(4, 4, 13), float32] */;
  (%857,)
}

def @func_10944() -> (Tensor[(13, 12, 13), float64],) {
  %858 = @func_7230() /* ty=Tensor[(13, 12, 13), float64] */;
  (%858,)
}

def @func_10218(%var_10197: Tensor[(90), int8], %var_10203: Tensor[(660), float32]) -> (Tensor[(13, 12, 13), float64], Tensor[(5, 6, 6), float64], Tensor[(6, 30), float64], Tensor[(90, 2), float64], Tensor[(144), float32], Tensor[(90), int8], Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(660), float32], Tensor[(2, 9, 5), bool], Tensor[(150), float64]) {
  %859 = @func_9925() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %860 = cast(meta[relay.Constant][73] /* ty=Tensor[(6, 30), float64] */, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
  %861 = reshape(%860, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), float64] */;
  %862 = cast(meta[relay.Constant][74] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %863 = cast(%var_10197, dtype="int8") /* ty=Tensor[(90), int8] */;
  %864 = cast(meta[relay.Constant][73] /* ty=Tensor[(6, 30), float64] */, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
  %865 = reshape(%862, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %866 = reshape(%863, newshape=[90]) /* ty=Tensor[(90), int8] */;
  %867 = reshape(%864, newshape=[90, 2]) /* ty=Tensor[(90, 2), float64] */;
  %868 = @func_4947(%865, %866, %867) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(144), float32], Tensor[(90), int8], Tensor[(660), uint32], Tensor[(90, 2), float64], Tensor[(1584), bool]) */;
  %869 = @func_9925() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %870 = cast(%var_10203, dtype="float32") /* ty=Tensor[(660), float32] */;
  %871 = reshape(%870, newshape=[660]) /* ty=Tensor[(660), float32] */;
  %872 = @func_5811(%871) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(5, 6, 6), float64], Tensor[(660), float32], Tensor[(180, 1), float32], Tensor[(140), float32], Tensor[(140), float32], Tensor[(13, 3, 8), float64], Tensor[(150), float64]) */;
  %873 = cast(%var_10197, dtype="int8") /* ty=Tensor[(90), int8] */;
  %874 = cast(%var_10203, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %875 = cast(meta[relay.Constant][75] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %876 = reshape(%873, newshape=[2, 9, 5]) /* ty=Tensor[(2, 9, 5), int8] */;
  %877 = reshape(%874, newshape=[660]) /* ty=Tensor[(660), uint32] */;
  %878 = reshape(%875, newshape=[1, 150]) /* ty=Tensor[(1, 150), float64] */;
  %879 = @func_2306(%876, %877, %878) /* ty=(Tensor[(2, 9, 5), bool], Tensor[(660), uint32], Tensor[(?, 150), bool], Tensor[(2, 9, 5), float32]) */;
  %880 = %859.0;
  %881 = @func_212(%861) /* ty=Tensor[(5, 6, 6), float64] */;
  %882 = %868.4;
  %883 = %869.0;
  %884 = %872.0;
  %885 = %879.0;
  (%880, %881, meta[relay.Constant][73] /* ty=Tensor[(6, 30), float64] */, %882, meta[relay.Constant][74] /* ty=Tensor[(144), float32] */, %var_10197, %883, %884, %var_10203, %885, meta[relay.Constant][75] /* ty=Tensor[(150), float64] */)
}

def @func_7230() -> Tensor[(13, 12, 13), float64] {
  %886 = @func_6826() /* ty=(Tensor[(?, 4, 4), float64], Tensor[(13, 12, 13), uint8], Tensor[(13, 12, 13), float64]) */;
  %886.2
}

def @func_488(%var_464: Tensor[(11, 4, 15), float32], %var_469: Tensor[(180), float64]) -> (Tensor[(5, 6, 6), float64], Tensor[(180), float64], Tensor[(11, 4, 15), uint16], Tensor[(5, 6, 6), float64]) {
  %887 = cast(%var_469, dtype="float64") /* ty=Tensor[(180), float64] */;
  %888 = reshape(%887, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), float64] */;
  %889 = cast(%var_464, dtype="float32") /* ty=Tensor[(11, 4, 15), float32] */;
  %890 = asinh(%889) /* ty=Tensor[(11, 4, 15), float32] */;
  %891 = cast(%890, dtype="uint16") /* ty=Tensor[(11, 4, 15), uint16] */;
  %892 = shape_of(%var_464, dtype="int32") /* ty=Tensor[(3), int32] */;
  %893 = cast(%var_464, dtype="uint16") /* ty=Tensor[(11, 4, 15), uint16] */;
  %894 = dyn.reshape(%891, %892, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %895 = cast(%var_469, dtype="float64") /* ty=Tensor[(180), float64] */;
  %896 = reshape(%895, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), float64] */;
  %897 = @func_212(%888) /* ty=Tensor[(5, 6, 6), float64] */;
  %898 = minimum(%893, %894) /* ty=Tensor[(11, 4, 15), uint16] */;
  %899 = @func_212(%896) /* ty=Tensor[(5, 6, 6), float64] */;
  (%897, %var_469, %898, %899)
}

def @func_6826() -> (Tensor[(?, 4, 4), float64], Tensor[(13, 12, 13), uint8], Tensor[(13, 12, 13), float64]) {
  %900 = @func_5835() /* ty=Tensor[(13, 12, 13), float64] */;
  %901 = cast(%900, dtype="float32") /* ty=Tensor[(13, 12, 13), float32] */;
  %902 = tan(%901) /* ty=Tensor[(13, 12, 13), float32] */;
  %903 = cast(%902, dtype="float64") /* ty=Tensor[(13, 12, 13), float64] */;
  %904 = cosh(%903) /* ty=Tensor[(13, 12, 13), float64] */;
  %905 = cast(meta[relay.Constant][76] /* ty=Tensor[(13, 12, 13), float64] */, dtype="uint8") /* ty=Tensor[(13, 12, 13), uint8] */;
  %906 = shape_of(%904, dtype="int32") /* ty=Tensor[(3), int32] */;
  %907 = cast(%904, dtype="uint8") /* ty=Tensor[(13, 12, 13), uint8] */;
  %908 = dyn.reshape(%905, %906, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %909 = @func_6365() /* ty=Tensor[(?, 4, 4), float64] */;
  %910 = bitwise_xor(%907, %908) /* ty=Tensor[(13, 12, 13), uint8] */;
  %911 = @func_6463() /* ty=Tensor[(13, 12, 13), float64] */;
  (%909, %910, %911)
}

def @func_5512(%var_5506: Tensor[(1728), float64], %var_5508: Tensor[(150), float64]) -> (Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(16, 12, 9), float32], Tensor[(1728), float64], Tensor[(90), int8], Tensor[(150), float64]) {
  %912 = @func_5295() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %913 = @func_5295() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %914 = cast(%var_5506, dtype="float64") /* ty=Tensor[(1728), float64] */;
  %915 = cast(meta[relay.Constant][77] /* ty=Tensor[(90), int8] */, dtype="int8") /* ty=Tensor[(90), int8] */;
  %916 = cast(%var_5508, dtype="float64") /* ty=Tensor[(150), float64] */;
  %917 = cast(%var_5506, dtype="float32") /* ty=Tensor[(1728), float32] */;
  %918 = reshape(%914, newshape=[16, 12, 9]) /* ty=Tensor[(16, 12, 9), float64] */;
  %919 = reshape(%915, newshape=[90]) /* ty=Tensor[(90), int8] */;
  %920 = reshape(%916, newshape=[75, 2]) /* ty=Tensor[(75, 2), float64] */;
  %921 = reshape(%917, newshape=[16, 12, 9]) /* ty=Tensor[(16, 12, 9), float32] */;
  %922 = @func_3156(%918, %919, %920, %921) /* ty=(Tensor[(11, 4, 15), uint16], Tensor[(660), float32], Tensor[(180), float64], Tensor[(16, 12, 9), float32], Tensor[(660), uint32], Tensor[(90), int8], Tensor[(75, 2), float64], Tensor[(16, 12, 9), float32], Tensor[(5, 6, 6), float64]) */;
  %923 = %912.0;
  %924 = %913.0;
  %925 = %922.7;
  (%923, %924, %925, %var_5506, meta[relay.Constant][77] /* ty=Tensor[(90), int8] */, %var_5508)
}

def @func_3156(%var_3086: Tensor[(16, 12, 9), float64], %var_3108: Tensor[(90), int8], %var_3122: Tensor[(75, 2), float64], %var_3126: Tensor[(16, 12, 9), float32]) -> (Tensor[(11, 4, 15), uint16], Tensor[(660), float32], Tensor[(180), float64], Tensor[(16, 12, 9), float32], Tensor[(660), uint32], Tensor[(90), int8], Tensor[(75, 2), float64], Tensor[(16, 12, 9), float32], Tensor[(5, 6, 6), float64]) {
  %926 = cast(meta[relay.Constant][78] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
  %927 = cast(meta[relay.Constant][79] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %928 = reshape(%926, newshape=[11, 4, 15]) /* ty=Tensor[(11, 4, 15), float32] */;
  %929 = reshape(%927, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %930 = @func_488(%928, %929) /* ty=(Tensor[(5, 6, 6), float64], Tensor[(180), float64], Tensor[(11, 4, 15), uint16], Tensor[(5, 6, 6), float64]) */;
  %931 = cast(meta[relay.Constant][80] /* ty=Tensor[(16, 12, 9), float64] */, dtype="float64") /* ty=Tensor[(16, 12, 9), float64] */;
  %932 = atan(%931) /* ty=Tensor[(16, 12, 9), float64] */;
  %933 = cast(%var_3086, dtype="float32") /* ty=Tensor[(16, 12, 9), float32] */;
  %934 = shape_of(%932, dtype="int32") /* ty=Tensor[(3), int32] */;
  %935 = cast(%932, dtype="float32") /* ty=Tensor[(16, 12, 9), float32] */;
  %936 = dyn.reshape(%933, %934, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %937 = cast(%var_3108, dtype="int8") /* ty=Tensor[(90), int8] */;
  %938 = %930.2;
  %939 = cast(%938, dtype="uint32") /* ty=Tensor[(11, 4, 15), uint32] */;
  %940 = cast(meta[relay.Constant][81] /* ty=Tensor[(75, 2), float64] */, dtype="float64") /* ty=Tensor[(75, 2), float64] */;
  %941 = reshape(%937, newshape=[2, 9, 5]) /* ty=Tensor[(2, 9, 5), int8] */;
  %942 = reshape(%939, newshape=[660]) /* ty=Tensor[(660), uint32] */;
  %943 = reshape(%940, newshape=[1, 150]) /* ty=Tensor[(1, 150), float64] */;
  %944 = @func_2306(%941, %942, %943) /* ty=(Tensor[(2, 9, 5), bool], Tensor[(660), uint32], Tensor[(?, 150), bool], Tensor[(2, 9, 5), float32]) */;
  %945 = cast(%var_3122, dtype="float64") /* ty=Tensor[(75, 2), float64] */;
  %946 = shape_of(meta[relay.Constant][81] /* ty=Tensor[(75, 2), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %947 = cast(meta[relay.Constant][81] /* ty=Tensor[(75, 2), float64] */, dtype="float64") /* ty=Tensor[(75, 2), float64] */;
  %948 = dyn.reshape(%945, %946, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %949 = cast(%932, dtype="float32") /* ty=Tensor[(16, 12, 9), float32] */;
  %950 = asin(%949) /* ty=Tensor[(16, 12, 9), float32] */;
  %951 = cast(%var_3126, dtype="float32") /* ty=Tensor[(16, 12, 9), float32] */;
  %952 = shape_of(%950, dtype="int32") /* ty=Tensor[(3), int32] */;
  %953 = cast(%950, dtype="float32") /* ty=Tensor[(16, 12, 9), float32] */;
  %954 = dyn.reshape(%951, %952, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %955 = cast(meta[relay.Constant][78] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
  %956 = cast(meta[relay.Constant][79] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %957 = reshape(%955, newshape=[11, 15, 4]) /* ty=Tensor[(11, 15, 4), float32] */;
  %958 = reshape(%956, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %959 = @func_311(%957, %958) /* ty=(Tensor[(11, 15, 4), float32], Tensor[(5, 6, 6), float64], Tensor[(180), float64]) */;
  %960 = floor_divide(%935, %936) /* ty=Tensor[(16, 12, 9), float32] */;
  %961 = %944.1;
  %962 = floor_divide(%947, %948) /* ty=Tensor[(75, 2), float64] */;
  %963 = mod(%953, %954) /* ty=Tensor[(16, 12, 9), float32] */;
  %964 = %959.1;
  (%938, meta[relay.Constant][78] /* ty=Tensor[(660), float32] */, meta[relay.Constant][79] /* ty=Tensor[(180), float64] */, %960, %961, %var_3108, %962, %963, %964)
}

def @func_10707() -> Tensor[(13, 12, 13), float64] {
  %965 = @func_7886() /* ty=(Tensor[(?, 4, 4), int16], Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) */;
  %965.1
}

def @func_5186(%var_5179: Tensor[(4, 5, 7), float32], %var_5183: Tensor[(660), uint32]) -> (Tensor[(4, 5, 7), float32], Tensor[(150), float64], Tensor[(660), uint32], Tensor[(150), float64]) {
  %966 = cast(%var_5179, dtype="float32") /* ty=Tensor[(4, 5, 7), float32] */;
  %967 = cast(%var_5183, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %968 = cast(meta[relay.Constant][82] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %969 = reshape(%967, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), uint32] */;
  %970 = reshape(%968, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %971 = @func_2017(%969, %970) /* ty=(Tensor[(180), float64], Tensor[(150), float64], Tensor[(180), float64], Tensor[(180), float64], Tensor[(15, 4, 11), float32]) */;
  %972 = log(%966) /* ty=Tensor[(4, 5, 7), float32] */;
  %973 = %971.1;
  (%972, %973, %var_5183, meta[relay.Constant][82] /* ty=Tensor[(150), float64] */)
}

def @func_6553() -> (Tensor[(13, 12, 13), float64],) {
  %974 = @func_6210() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), int16], Tensor[(16), int16]) */;
  %975 = %974.0;
  (%975,)
}

def @func_10487(%var_10474: Tensor[(75, 2), float64]) -> (Tensor[(75, 2), int16], Tensor[(150), float64], Tensor[(150), float64]) {
  %976 = @func_7556() /* ty=(Tensor[(4, 4, 13), float64], Tensor[(75, 2), float64]) */;
  %977 = %976.1;
  %978 = cast(%var_10474, dtype="int16") /* ty=Tensor[(75, 2), int16] */;
  %979 = shape_of(%977, dtype="int32") /* ty=Tensor[(2), int32] */;
  %980 = cast(%977, dtype="int16") /* ty=Tensor[(75, 2), int16] */;
  %981 = dyn.reshape(%978, %979, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %982 = @func_6316() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(2, 9, 5), bool], Tensor[(15, 6), int8], Tensor[(660), uint32], Tensor[(150), float64]) */;
  %983 = @func_9907() /* ty=(Tensor[(150), float64], Tensor[(?, 4, 4), float64]) */;
  %984 = left_shift(%980, %981) /* ty=Tensor[(75, 2), int16] */;
  %985 = %982.4;
  %986 = %983.0;
  (%984, %985, %986)
}

def @func_5835() -> Tensor[(13, 12, 13), float64] {
  %987 = @func_5295() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %987.0
}

def @func_6145(%var_6109: Tensor[(4, 4, 13), float32], %var_6119: Tensor[(144), float32], %var_6135: Tensor[(1728), float64]) -> (Tensor[(4, 4, 13), int32], Tensor[(13, 12, 13), float64], Tensor[(144), float32], Tensor[(90), int8], Tensor[(180), float64], Tensor[(2, 9, 5), float32], Tensor[(150), float64], Tensor[(1728), float64], Tensor[(1728), float64], Tensor[(4, 4, 13), float32]) {
  %988 = @func_5745() /* ty=Tensor[(4, 4, 13), float32] */;
  %989 = cast(%var_6109, dtype="int32") /* ty=Tensor[(4, 4, 13), int32] */;
  %990 = shape_of(%988, dtype="int32") /* ty=Tensor[(3), int32] */;
  %991 = cast(%988, dtype="int32") /* ty=Tensor[(4, 4, 13), int32] */;
  %992 = dyn.reshape(%989, %990, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %993 = cast(%var_6119, dtype="float32") /* ty=Tensor[(144), float32] */;
  %994 = cast(meta[relay.Constant][83] /* ty=Tensor[(90), int8] */, dtype="int8") /* ty=Tensor[(90), int8] */;
  %995 = cast(meta[relay.Constant][84] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %996 = reshape(%993, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %997 = reshape(%994, newshape=[90]) /* ty=Tensor[(90), int8] */;
  %998 = reshape(%995, newshape=[90, 2]) /* ty=Tensor[(90, 2), float64] */;
  %999 = @func_4947(%996, %997, %998) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(144), float32], Tensor[(90), int8], Tensor[(660), uint32], Tensor[(90, 2), float64], Tensor[(1584), bool]) */;
  %1000 = cast(meta[relay.Constant][85] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %1001 = reshape(%1000, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %1002 = @func_6088(%1001) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(2, 9, 5), float32], Tensor[(90), int8], Tensor[(660), uint32], Tensor[(150), float64]) */;
  %1003 = cast(%var_6135, dtype="float64") /* ty=Tensor[(1728), float64] */;
  %1004 = cast(meta[relay.Constant][85] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %1005 = reshape(%1003, newshape=[1728]) /* ty=Tensor[(1728), float64] */;
  %1006 = reshape(%1004, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %1007 = @func_5512(%1005, %1006) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(16, 12, 9), float32], Tensor[(1728), float64], Tensor[(90), int8], Tensor[(150), float64]) */;
  %1008 = bitwise_xor(%991, %992) /* ty=Tensor[(4, 4, 13), int32] */;
  %1009 = %999.0;
  %1010 = %1002.1;
  %1011 = %1007.3;
  %1012 = @func_5745() /* ty=Tensor[(4, 4, 13), float32] */;
  (%1008, %1009, %var_6119, meta[relay.Constant][83] /* ty=Tensor[(90), int8] */, meta[relay.Constant][84] /* ty=Tensor[(180), float64] */, %1010, meta[relay.Constant][85] /* ty=Tensor[(150), float64] */, %1011, %var_6135, %1012)
}

def @func_9457() -> (Tensor[(4, 4, 13), float32],) {
  %1013 = @func_5745() /* ty=Tensor[(4, 4, 13), float32] */;
  (%1013,)
}

def @func_5951(%var_5925: Tensor[(4, 4, 13), float32]) -> (Tensor[(4, 4, 13), int8],) {
  %1014 = @func_5882() /* ty=Tensor[(4, 4, 13), float32] */;
  %1015 = cast(%var_5925, dtype="int8") /* ty=Tensor[(4, 4, 13), int8] */;
  %1016 = shape_of(%1014, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1017 = cast(%1014, dtype="int8") /* ty=Tensor[(4, 4, 13), int8] */;
  %1018 = dyn.reshape(%1015, %1016, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1019 = bitwise_or(%1017, %1018) /* ty=Tensor[(4, 4, 13), int8] */;
  (%1019,)
}

def @func_5295() -> (Tensor[(13, 12, 13), float64],) {
  %1020 = @func_5131() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %1021 = %1020.0;
  (%1021,)
}

def @func_10867() -> (Tensor[(4, 4, 13), float32], Tensor[(13, 12, 13), int32], Tensor[(2028), float64]) {
  %1022 = cast(meta[relay.Constant][86] /* ty=Tensor[(2028), float64] */, dtype="float64") /* ty=Tensor[(2028), float64] */;
  %1023 = reshape(%1022, newshape=[13, 12, 13]) /* ty=Tensor[(13, 12, 13), float64] */;
  %1024 = @func_10588(%1023) /* ty=(Tensor[(13, 12, 13), int32],) */;
  %1025 = @func_5882() /* ty=Tensor[(4, 4, 13), float32] */;
  %1026 = %1024.0;
  (%1025, %1026, meta[relay.Constant][86] /* ty=Tensor[(2028), float64] */)
}

def @func_6253() -> (Tensor[(?, 4, 4), int16],) {
  %1027 = @func_6210() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), int16], Tensor[(16), int16]) */;
  %1028 = %1027.1;
  (%1028,)
}

def @func_9938() -> Tensor[(?, 4, 4), int16] {
  %1029 = @func_7886() /* ty=(Tensor[(?, 4, 4), int16], Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) */;
  %1029.0
}

def @func_7686() -> (Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) {
  %1030 = @func_7172() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %1031 = %1030.0;
  %1032 = @func_6463() /* ty=Tensor[(13, 12, 13), float64] */;
  (%1031, %1032)
}

def @func_2306(%var_2254: Tensor[(2, 9, 5), int8], %var_2278: Tensor[(660), uint32], %var_2279: Tensor[(1, 150), float64]) -> (Tensor[(2, 9, 5), bool], Tensor[(660), uint32], Tensor[(?, 150), bool], Tensor[(2, 9, 5), float32]) {
  %1033 = cast(meta[relay.Constant][87] /* ty=Tensor[(2, 1, 5), int8] */, dtype="bool") /* ty=Tensor[(2, 1, 5), bool] */;
  %1034 = cast(%var_2254, dtype="bool") /* ty=Tensor[(2, 9, 5), bool] */;
  %1035 = cast(%var_2278, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %1036 = cast(%var_2279, dtype="float64") /* ty=Tensor[(1, 150), float64] */;
  %1037 = reshape(%1035, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), uint32] */;
  %1038 = reshape(%1036, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %1039 = @func_2017(%1037, %1038) /* ty=(Tensor[(180), float64], Tensor[(150), float64], Tensor[(180), float64], Tensor[(180), float64], Tensor[(15, 4, 11), float32]) */;
  %1040 = %1039.1;
  %1041 = cast(%1040, dtype="bool") /* ty=Tensor[(150), bool] */;
  %1042 = shape_of(%var_2279, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1043 = cast(%var_2279, dtype="bool") /* ty=Tensor[(1, 150), bool] */;
  %1044 = dyn.reshape(%1041, %1042, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1045 = cast(%var_2254, dtype="float64") /* ty=Tensor[(2, 9, 5), float64] */;
  %1046 = acosh(%1045) /* ty=Tensor[(2, 9, 5), float64] */;
  %1047 = cast(%1046, dtype="float32") /* ty=Tensor[(2, 9, 5), float32] */;
  %1048 = less(%1033, %1034) /* ty=Tensor[(2, 9, 5), bool] */;
  %1049 = less_equal(%1043, %1044) /* ty=Tensor[(?, 150), bool] */;
  %1050 = cosh(%1047) /* ty=Tensor[(2, 9, 5), float32] */;
  (%1048, %var_2278, %1049, %1050)
}

def @func_680(%var_674: Tensor[(660), float32]) -> (Tensor[(13, 3, 8), float64], Tensor[(180), float64], Tensor[(660), float32], Tensor[(180), float64]) {
  %1051 = cast(meta[relay.Constant][88] /* ty=Tensor[(13, 3, 8), float64] */, dtype="float64") /* ty=Tensor[(13, 3, 8), float64] */;
  %1052 = cast(%var_674, dtype="float32") /* ty=Tensor[(660), float32] */;
  %1053 = cast(meta[relay.Constant][89] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %1054 = reshape(%1052, newshape=[11, 15, 4]) /* ty=Tensor[(11, 15, 4), float32] */;
  %1055 = reshape(%1053, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %1056 = @func_311(%1054, %1055) /* ty=(Tensor[(11, 15, 4), float32], Tensor[(5, 6, 6), float64], Tensor[(180), float64]) */;
  %1057 = exp(%1051) /* ty=Tensor[(13, 3, 8), float64] */;
  %1058 = %1056.2;
  (%1057, %1058, %var_674, meta[relay.Constant][89] /* ty=Tensor[(180), float64] */)
}

def @func_8279() -> Tensor[(?, 4, 4), float32] {
  %1059 = @func_6253() /* ty=(Tensor[(?, 4, 4), int16],) */;
  %1060 = %1059.0;
  %1061 = cast(%1060, dtype="float32") /* ty=Tensor[(?, 4, 4), float32] */;
  sinh(%1061) /* ty=Tensor[(?, 4, 4), float32] */
}

def @func_8991() -> (Tensor[(13, 12, 13), float64],) {
  %1062 = @func_8444() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %1063 = %1062.0;
  (%1063,)
}

def @func_2017(%var_1984: Tensor[(15, 4, 11), uint32], %var_2000: Tensor[(150), float64]) -> (Tensor[(180), float64], Tensor[(150), float64], Tensor[(180), float64], Tensor[(180), float64], Tensor[(15, 4, 11), float32]) {
  %1064 = cast(%var_2000, dtype="float64") /* ty=Tensor[(150), float64] */;
  %1065 = cast(meta[relay.Constant][90] /* ty=Tensor[(15, 4, 11), uint32] */, dtype="float32") /* ty=Tensor[(15, 4, 11), float32] */;
  %1066 = cast(meta[relay.Constant][91] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %1067 = reshape(%1064, newshape=[2, 15, 5]) /* ty=Tensor[(2, 15, 5), float64] */;
  %1068 = reshape(%1065, newshape=[660]) /* ty=Tensor[(660), float32] */;
  %1069 = reshape(%1066, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %1070 = @func_1888(%1067, %1068, %1069) /* ty=(Tensor[(180), float64], Tensor[(660), float32], Tensor[(180), float64], Tensor[(2, 15, 5), int16], Tensor[(5, 6, 6), float64], Tensor[(2, 15, 5), uint32], Tensor[(13, 3, 8), float64], Tensor[(5, 6, 6), float64], Tensor[(180), float64]) */;
  %1071 = cast(%var_2000, dtype="float64") /* ty=Tensor[(150), float64] */;
  %1072 = cast(meta[relay.Constant][90] /* ty=Tensor[(15, 4, 11), uint32] */, dtype="float32") /* ty=Tensor[(15, 4, 11), float32] */;
  %1073 = cast(meta[relay.Constant][91] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %1074 = reshape(%1071, newshape=[2, 15, 5]) /* ty=Tensor[(2, 15, 5), float64] */;
  %1075 = reshape(%1072, newshape=[660]) /* ty=Tensor[(660), float32] */;
  %1076 = reshape(%1073, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %1077 = @func_1888(%1074, %1075, %1076) /* ty=(Tensor[(180), float64], Tensor[(660), float32], Tensor[(180), float64], Tensor[(2, 15, 5), int16], Tensor[(5, 6, 6), float64], Tensor[(2, 15, 5), uint32], Tensor[(13, 3, 8), float64], Tensor[(5, 6, 6), float64], Tensor[(180), float64]) */;
  %1078 = cast(meta[relay.Constant][90] /* ty=Tensor[(15, 4, 11), uint32] */, dtype="bool") /* ty=Tensor[(15, 4, 11), bool] */;
  %1079 = shape_of(%var_1984, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1080 = cast(%var_1984, dtype="bool") /* ty=Tensor[(15, 4, 11), bool] */;
  %1081 = dyn.reshape(%1078, %1079, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1082 = greater(%1080, %1081) /* ty=Tensor[(15, 4, 11), bool] */;
  %1083 = cast(%1082, dtype="float32") /* ty=Tensor[(15, 4, 11), float32] */;
  %1084 = %1070.0;
  %1085 = %1077.0;
  %1086 = sigmoid(%1083) /* ty=Tensor[(15, 4, 11), float32] */;
  (%1084, %var_2000, meta[relay.Constant][91] /* ty=Tensor[(180), float64] */, %1085, %1086)
}

def @func_11192() -> Tensor[(13, 12, 13), float64] {
  %1087 = @func_10514() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) */;
  %1087.1
}

def @func_10927() -> (Tensor[(13, 12, 13), float64], Tensor[(660), float32], Tensor[(660), float32], Tensor[(180), float64], Tensor[(13, 12, 13), int32]) {
  %1088 = cast(meta[relay.Constant][92] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
  %1089 = cast(meta[relay.Constant][93] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %1090 = reshape(%1088, newshape=[660]) /* ty=Tensor[(660), float32] */;
  %1091 = reshape(%1089, newshape=[1, 180]) /* ty=Tensor[(1, 180), float64] */;
  %1092 = @func_7210(%1090, %1091) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(180), float64], Tensor[(660), float32], Tensor[(1, 180), float64], Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), float64]) */;
  %1093 = @func_5835() /* ty=Tensor[(13, 12, 13), float64] */;
  %1094 = cast(%1093, dtype="float64") /* ty=Tensor[(13, 12, 13), float64] */;
  %1095 = reshape(%1094, newshape=[13, 12, 13]) /* ty=Tensor[(13, 12, 13), float64] */;
  %1096 = @func_10588(%1095) /* ty=(Tensor[(13, 12, 13), int32],) */;
  %1097 = %1092.2;
  %1098 = %1096.0;
  (%1093, %1097, meta[relay.Constant][92] /* ty=Tensor[(660), float32] */, meta[relay.Constant][93] /* ty=Tensor[(180), float64] */, %1098)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5882() -> Tensor[(4, 4, 13), float32] {
  @func_5745() /* ty=Tensor[(4, 4, 13), float32] */
}

def @func_6675() -> (Tensor[(13, 12, 13), float64], Tensor[(16, 12, 9), float32], Tensor[(288, 6), float64], Tensor[(90), int8], Tensor[(5, 6, 6), float64], Tensor[(13, 12, 13), float64], Tensor[(140), float32], Tensor[(70, 2), float32], Tensor[(5, 132), uint32], Tensor[(13, 12, 13), float64], Tensor[(75, 2), float64], Tensor[(4, 4, 13), float32], Tensor[(52, 4), float32], Tensor[(144), float32], Tensor[(75, 2), float64]) {
  @func_6673() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(16, 12, 9), float32], Tensor[(288, 6), float64], Tensor[(90), int8], Tensor[(5, 6, 6), float64], Tensor[(13, 12, 13), float64], Tensor[(140), float32], Tensor[(70, 2), float32], Tensor[(5, 132), uint32], Tensor[(13, 12, 13), float64], Tensor[(75, 2), float64], Tensor[(4, 4, 13), float32], Tensor[(52, 4), float32], Tensor[(144), float32], Tensor[(75, 2), float64]) */
}

def @func_8910() -> (Tensor[(?, 4, 4), float32], Tensor[(150), float64], Tensor[(5, 30), float64]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 30), float64] */, dtype="float64") /* ty=Tensor[(5, 30), float64] */;
  %1 = reshape(%0, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %2 = @func_6088(%1) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(2, 9, 5), float32], Tensor[(90), int8], Tensor[(660), uint32], Tensor[(150), float64]) */;
  %3 = @func_8279() /* ty=Tensor[(?, 4, 4), float32] */;
  %4 = %2.4;
  (%3, %4, meta[relay.Constant][0] /* ty=Tensor[(5, 30), float64] */)
}

def @func_11012(%var_11010: Tensor[(7, 13, 6), uint16], %var_11011: Tensor[(7, 13, 6), uint16]) -> (Tensor[(7, 13, 6), uint16], Tensor[(7, 13, 6), float32]) {
  %12 = fn (%var_10976: Tensor[(7, 13, 6), uint16], %var_10977: Tensor[(7, 13, 6), uint16]) -> (Tensor[(7, 13, 6), uint16], Tensor[(7, 13, 6), float32]) {
    %5 = cast(%var_10977, dtype="uint16") /* ty=Tensor[(7, 13, 6), uint16] */;
    %6 = shape_of(%var_10976, dtype="int32") /* ty=Tensor[(3), int32] */;
    %7 = cast(%var_10976, dtype="uint16") /* ty=Tensor[(7, 13, 6), uint16] */;
    %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %9 = cast(%var_10976, dtype="float32") /* ty=Tensor[(7, 13, 6), float32] */;
    %10 = left_shift(%7, %8) /* ty=Tensor[(7, 13, 6), uint16] */;
    %11 = acos(%9) /* ty=Tensor[(7, 13, 6), float32] */;
    (%10, %11)
  };
  %12(%var_11010, %var_11011) /* ty=(Tensor[(7, 13, 6), uint16], Tensor[(7, 13, 6), float32]) */
}

def @func_6673() -> (Tensor[(13, 12, 13), float64], Tensor[(16, 12, 9), float32], Tensor[(288, 6), float64], Tensor[(90), int8], Tensor[(5, 6, 6), float64], Tensor[(13, 12, 13), float64], Tensor[(140), float32], Tensor[(70, 2), float32], Tensor[(5, 132), uint32], Tensor[(13, 12, 13), float64], Tensor[(75, 2), float64], Tensor[(4, 4, 13), float32], Tensor[(52, 4), float32], Tensor[(144), float32], Tensor[(75, 2), float64]) {
  %13 = @func_5295() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %14 = cast(meta[relay.Constant][1] /* ty=Tensor[(288, 6), float64] */, dtype="float64") /* ty=Tensor[(288, 6), float64] */;
  %15 = cast(meta[relay.Constant][2] /* ty=Tensor[(90), int8] */, dtype="int8") /* ty=Tensor[(90), int8] */;
  %16 = cast(meta[relay.Constant][3] /* ty=Tensor[(75, 2), float64] */, dtype="float64") /* ty=Tensor[(75, 2), float64] */;
  %17 = cast(meta[relay.Constant][1] /* ty=Tensor[(288, 6), float64] */, dtype="float32") /* ty=Tensor[(288, 6), float32] */;
  %18 = reshape(%14, newshape=[16, 12, 9]) /* ty=Tensor[(16, 12, 9), float64] */;
  %19 = reshape(%15, newshape=[90]) /* ty=Tensor[(90), int8] */;
  %20 = reshape(%16, newshape=[75, 2]) /* ty=Tensor[(75, 2), float64] */;
  %21 = reshape(%17, newshape=[16, 12, 9]) /* ty=Tensor[(16, 12, 9), float32] */;
  %22 = @func_3156(%18, %19, %20, %21) /* ty=(Tensor[(11, 4, 15), uint16], Tensor[(660), float32], Tensor[(180), float64], Tensor[(16, 12, 9), float32], Tensor[(660), uint32], Tensor[(90), int8], Tensor[(75, 2), float64], Tensor[(16, 12, 9), float32], Tensor[(5, 6, 6), float64]) */;
  %23 = cast(meta[relay.Constant][1] /* ty=Tensor[(288, 6), float64] */, dtype="float64") /* ty=Tensor[(288, 6), float64] */;
  %24 = cast(meta[relay.Constant][2] /* ty=Tensor[(90), int8] */, dtype="int8") /* ty=Tensor[(90), int8] */;
  %25 = cast(meta[relay.Constant][3] /* ty=Tensor[(75, 2), float64] */, dtype="float64") /* ty=Tensor[(75, 2), float64] */;
  %26 = tan(%25) /* ty=Tensor[(75, 2), float64] */;
  %27 = cast(%26, dtype="float64") /* ty=Tensor[(75, 2), float64] */;
  %28 = %22.7;
  %29 = cast(%28, dtype="float32") /* ty=Tensor[(16, 12, 9), float32] */;
  %30 = reshape(%23, newshape=[16, 12, 9]) /* ty=Tensor[(16, 12, 9), float64] */;
  %31 = reshape(%24, newshape=[90]) /* ty=Tensor[(90), int8] */;
  %32 = reshape(%27, newshape=[75, 2]) /* ty=Tensor[(75, 2), float64] */;
  %33 = reshape(%29, newshape=[16, 12, 9]) /* ty=Tensor[(16, 12, 9), float32] */;
  %34 = @func_3156(%30, %31, %32, %33) /* ty=(Tensor[(11, 4, 15), uint16], Tensor[(660), float32], Tensor[(180), float64], Tensor[(16, 12, 9), float32], Tensor[(660), uint32], Tensor[(90), int8], Tensor[(75, 2), float64], Tensor[(16, 12, 9), float32], Tensor[(5, 6, 6), float64]) */;
  %35 = @func_4924() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %36 = cast(meta[relay.Constant][4] /* ty=Tensor[(70, 2), float32] */, dtype="float32") /* ty=Tensor[(70, 2), float32] */;
  %37 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 132), uint32] */, dtype="uint32") /* ty=Tensor[(5, 132), uint32] */;
  %38 = reshape(%36, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %39 = reshape(%37, newshape=[660]) /* ty=Tensor[(660), uint32] */;
  %40 = @func_5339(%38, %39) /* ty=(Tensor[(13, 12, 13), float32], Tensor[(4, 5, 7), float32], Tensor[(140), float32], Tensor[(660), uint32]) */;
  %41 = cast(meta[relay.Constant][3] /* ty=Tensor[(75, 2), float64] */, dtype="bool") /* ty=Tensor[(75, 2), bool] */;
  %42 = shape_of(%26, dtype="int32") /* ty=Tensor[(2), int32] */;
  %43 = cast(%26, dtype="bool") /* ty=Tensor[(75, 2), bool] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %45 = not_equal(%43, %44) /* ty=Tensor[(75, 2), bool] */;
  %46 = cast(%45, dtype="float64") /* ty=Tensor[(75, 2), float64] */;
  %47 = cast(meta[relay.Constant][6] /* ty=Tensor[(52, 4), float32] */, dtype="float32") /* ty=Tensor[(52, 4), float32] */;
  %48 = cast(meta[relay.Constant][7] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %49 = cast(meta[relay.Constant][1] /* ty=Tensor[(288, 6), float64] */, dtype="float64") /* ty=Tensor[(288, 6), float64] */;
  %50 = reshape(%47, newshape=[4, 4, 13]) /* ty=Tensor[(4, 4, 13), float32] */;
  %51 = reshape(%48, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %52 = reshape(%49, newshape=[1728]) /* ty=Tensor[(1728), float64] */;
  %53 = @func_6145(%50, %51, %52) /* ty=(Tensor[(4, 4, 13), int32], Tensor[(13, 12, 13), float64], Tensor[(144), float32], Tensor[(90), int8], Tensor[(180), float64], Tensor[(2, 9, 5), float32], Tensor[(150), float64], Tensor[(1728), float64], Tensor[(1728), float64], Tensor[(4, 4, 13), float32]) */;
  %54 = cast(meta[relay.Constant][3] /* ty=Tensor[(75, 2), float64] */, dtype="float64") /* ty=Tensor[(75, 2), float64] */;
  %55 = shape_of(%26, dtype="int32") /* ty=Tensor[(2), int32] */;
  %56 = cast(%26, dtype="float64") /* ty=Tensor[(75, 2), float64] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %58 = %13.0;
  %59 = %34.8;
  %60 = %35.0;
  %61 = %40.2;
  %62 = @func_5749() /* ty=Tensor[(13, 12, 13), float64] */;
  %63 = cos(%46) /* ty=Tensor[(75, 2), float64] */;
  %64 = %53.9;
  %65 = divide(%56, %57) /* ty=Tensor[(75, 2), float64] */;
  (%58, %28, meta[relay.Constant][1] /* ty=Tensor[(288, 6), float64] */, meta[relay.Constant][2] /* ty=Tensor[(90), int8] */, %59, %60, %61, meta[relay.Constant][4] /* ty=Tensor[(70, 2), float32] */, meta[relay.Constant][5] /* ty=Tensor[(5, 132), uint32] */, %62, %63, %64, meta[relay.Constant][6] /* ty=Tensor[(52, 4), float32] */, meta[relay.Constant][7] /* ty=Tensor[(144), float32] */, %65)
}

def @func_9459() -> (Tensor[(4, 4, 13), float32],) {
  @func_9457() /* ty=(Tensor[(4, 4, 13), float32],) */
}

def @func_9631() -> (Tensor[(99), float32], Tensor[(99), float32], Tensor[(13, 12, 13), float64]) {
  %73 = fn () -> (Tensor[(99), float32], Tensor[(99), float32], Tensor[(13, 12, 13), float64]) {
    %66 = @func_6339() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(99), float32]) */;
    %67 = %66.2;
    %68 = cast(%67, dtype="float32") /* ty=Tensor[(99), float32] */;
    %69 = reshape(%68, newshape=[99]) /* ty=Tensor[(99), float32] */;
    %70 = @func_9116(%69) /* ty=(Tensor[(12, 15, 7), float32], Tensor[(3, 3, 11), float32], Tensor[(99), float32]) */;
    %71 = %70.2;
    %72 = @func_5749() /* ty=Tensor[(13, 12, 13), float64] */;
    (%67, %71, %72)
  };
  %73() /* ty=(Tensor[(99), float32], Tensor[(99), float32], Tensor[(13, 12, 13), float64]) */
}

def @func_5836() -> Tensor[(13, 12, 13), float64] {
  %75 = fn () -> Tensor[(13, 12, 13), float64] {
    %74 = @func_5295() /* ty=(Tensor[(13, 12, 13), float64],) */;
    %74.0
  };
  %75() /* ty=Tensor[(13, 12, 13), float64] */
}

def @func_11230() -> (Tensor[(13, 12, 13), float64],) {
  %76 = @func_6436() /* ty=Tensor[(13, 12, 13), float64] */;
  (%76,)
}

def @func_5133() -> (Tensor[(13, 12, 13), float64],) {
  @func_5131() /* ty=(Tensor[(13, 12, 13), float64],) */
}

def @func_11296(%var_11294: Tensor[(660), uint32], %var_11295: Tensor[(150), float64]) -> (Tensor[(13, 12, 13), float64], Tensor[(?, 150), bool], Tensor[(660), uint32], Tensor[(150), float64], Tensor[(13, 12, 13), float64], Tensor[(90), int8], Tensor[(45, 2), float32], Tensor[(13, 12, 13), float64]) {
  @func_11292(%var_11294, %var_11295) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(?, 150), bool], Tensor[(660), uint32], Tensor[(150), float64], Tensor[(13, 12, 13), float64], Tensor[(90), int8], Tensor[(45, 2), float32], Tensor[(13, 12, 13), float64]) */
}

def @func_5884() -> Tensor[(4, 4, 13), float32] {
  @func_5882() /* ty=Tensor[(4, 4, 13), float32] */
}

def @func_488(%var_464: Tensor[(11, 4, 15), float32], %var_469: Tensor[(180), float64]) -> (Tensor[(5, 6, 6), float64], Tensor[(180), float64], Tensor[(11, 4, 15), uint16], Tensor[(5, 6, 6), float64]) {
  %77 = cast(%var_469, dtype="float64") /* ty=Tensor[(180), float64] */;
  %78 = reshape(%77, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), float64] */;
  %79 = cast(%var_464, dtype="float32") /* ty=Tensor[(11, 4, 15), float32] */;
  %80 = asinh(%79) /* ty=Tensor[(11, 4, 15), float32] */;
  %81 = cast(%80, dtype="uint16") /* ty=Tensor[(11, 4, 15), uint16] */;
  %82 = shape_of(%var_464, dtype="int32") /* ty=Tensor[(3), int32] */;
  %83 = cast(%var_464, dtype="uint16") /* ty=Tensor[(11, 4, 15), uint16] */;
  %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %85 = cast(%var_469, dtype="float64") /* ty=Tensor[(180), float64] */;
  %86 = reshape(%85, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), float64] */;
  %87 = @func_212(%78) /* ty=Tensor[(5, 6, 6), float64] */;
  %88 = minimum(%83, %84) /* ty=Tensor[(11, 4, 15), uint16] */;
  %89 = @func_212(%86) /* ty=Tensor[(5, 6, 6), float64] */;
  (%87, %var_469, %88, %89)
}

def @func_8832(%var_8794: Tensor[(4, 4, 13), float32], %var_8825: Tensor[(140), float32]) -> (Tensor[(13, 12, 13), float64], Tensor[(4, 4, 13), float64], Tensor[(660), uint32], Tensor[(140), float32], Tensor[(660), uint32]) {
  %90 = @func_6210() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), int16], Tensor[(16), int16]) */;
  %91 = @func_7105() /* ty=(Tensor[(4, 4, 13), float32],) */;
  %92 = %91.0;
  %93 = cast(%var_8794, dtype="float64") /* ty=Tensor[(4, 4, 13), float64] */;
  %94 = shape_of(%92, dtype="int32") /* ty=Tensor[(3), int32] */;
  %95 = cast(%92, dtype="float64") /* ty=Tensor[(4, 4, 13), float64] */;
  %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %97 = multiply(%95, %96) /* ty=Tensor[(4, 4, 13), float64] */;
  %98 = cast(%97, dtype="float64") /* ty=Tensor[(4, 4, 13), float64] */;
  %99 = cast(%var_8825, dtype="float32") /* ty=Tensor[(140), float32] */;
  %100 = cast(meta[relay.Constant][8] /* ty=Tensor[(660), uint32] */, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %101 = reshape(%99, newshape=[4, 5, 7]) /* ty=Tensor[(4, 5, 7), float32] */;
  %102 = reshape(%100, newshape=[660]) /* ty=Tensor[(660), uint32] */;
  %103 = @func_5186(%101, %102) /* ty=(Tensor[(4, 5, 7), float32], Tensor[(150), float64], Tensor[(660), uint32], Tensor[(150), float64]) */;
  %104 = %90.0;
  %105 = atan(%98) /* ty=Tensor[(4, 4, 13), float64] */;
  %106 = %103.2;
  (%104, %105, %106, %var_8825, meta[relay.Constant][8] /* ty=Tensor[(660), uint32] */)
}

def @func_9362() -> (Tensor[(?, 4, 4), int16],) {
  %109 = fn () -> (Tensor[(?, 4, 4), int16],) {
    %107 = @func_6253() /* ty=(Tensor[(?, 4, 4), int16],) */;
    %108 = %107.0;
    (%108,)
  };
  %109() /* ty=(Tensor[(?, 4, 4), int16],) */
}

def @func_6827() -> (Tensor[(?, 4, 4), float64], Tensor[(13, 12, 13), uint8], Tensor[(13, 12, 13), float64]) {
  %122 = fn () -> (Tensor[(?, 4, 4), float64], Tensor[(13, 12, 13), uint8], Tensor[(13, 12, 13), float64]) {
    %110 = @func_5835() /* ty=Tensor[(13, 12, 13), float64] */;
    %111 = cast(%110, dtype="float32") /* ty=Tensor[(13, 12, 13), float32] */;
    %112 = tan(%111) /* ty=Tensor[(13, 12, 13), float32] */;
    %113 = cast(%112, dtype="float64") /* ty=Tensor[(13, 12, 13), float64] */;
    %114 = cosh(%113) /* ty=Tensor[(13, 12, 13), float64] */;
    %115 = cast(meta[relay.Constant][9] /* ty=Tensor[(13, 12, 13), float64] */, dtype="uint8") /* ty=Tensor[(13, 12, 13), uint8] */;
    %116 = shape_of(%114, dtype="int32") /* ty=Tensor[(3), int32] */;
    %117 = cast(%114, dtype="uint8") /* ty=Tensor[(13, 12, 13), uint8] */;
    %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %119 = @func_6365() /* ty=Tensor[(?, 4, 4), float64] */;
    %120 = bitwise_xor(%117, %118) /* ty=Tensor[(13, 12, 13), uint8] */;
    %121 = @func_6463() /* ty=Tensor[(13, 12, 13), float64] */;
    (%119, %120, %121)
  };
  %122() /* ty=(Tensor[(?, 4, 4), float64], Tensor[(13, 12, 13), uint8], Tensor[(13, 12, 13), float64]) */
}

def @func_9729(%var_9727: Tensor[(99), float32], %var_9728: Tensor[(3, 3, 11), float32]) -> (Tensor[(13, 12, 13), float64], Tensor[(99), float32], Tensor[(8, 4, 10), float32], Tensor[(320), float32], Tensor[(?, 4, 4), int16], Tensor[(4, 4, 13), float32], Tensor[(3, 3, 11), int8]) {
  %140 = fn (%var_9656: Tensor[(99), float32], %var_9704: Tensor[(3, 3, 11), float32]) -> (Tensor[(13, 12, 13), float64], Tensor[(99), float32], Tensor[(8, 4, 10), float32], Tensor[(320), float32], Tensor[(?, 4, 4), int16], Tensor[(4, 4, 13), float32], Tensor[(3, 3, 11), int8]) {
    %123 = cast(meta[relay.Constant][10] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
    %124 = reshape(%123, newshape=[8, 4, 10]) /* ty=Tensor[(8, 4, 10), float32] */;
    %125 = @func_7001(%124) /* ty=(Tensor[(8, 4, 10), float32],) */;
    %126 = @func_9361() /* ty=(Tensor[(?, 4, 4), int16],) */;
    %127 = cast(%var_9656, dtype="float32") /* ty=Tensor[(99), float32] */;
    %128 = reshape(%127, newshape=[3, 3, 11]) /* ty=Tensor[(3, 3, 11), float32] */;
    %129 = @func_4349(%128) /* ty=(Tensor[(3, 3, 11), float32],) */;
    %130 = %129.0;
    %131 = cast(%var_9704, dtype="int8") /* ty=Tensor[(3, 3, 11), int8] */;
    %132 = shape_of(%130, dtype="int32") /* ty=Tensor[(3), int32] */;
    %133 = cast(%130, dtype="int8") /* ty=Tensor[(3, 3, 11), int8] */;
    %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %135 = @func_9428() /* ty=Tensor[(13, 12, 13), float64] */;
    %136 = %125.0;
    %137 = %126.0;
    %138 = @func_7120() /* ty=Tensor[(4, 4, 13), float32] */;
    %139 = subtract(%133, %134) /* ty=Tensor[(3, 3, 11), int8] */;
    (%135, %var_9656, %136, meta[relay.Constant][10] /* ty=Tensor[(320), float32] */, %137, %138, %139)
  };
  %140(%var_9727, %var_9728) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(99), float32], Tensor[(8, 4, 10), float32], Tensor[(320), float32], Tensor[(?, 4, 4), int16], Tensor[(4, 4, 13), float32], Tensor[(3, 3, 11), int8]) */
}

def @func_10825(%var_10822: Tensor[(4, 9, 14), uint8], %var_10823: Tensor[(4, 9, 14), uint8], %var_10824: Tensor[(4, 9, 14), uint8]) -> (Tensor[(4, 9, 14), float64], Tensor[(4, 9, 14), uint16], Tensor[(4, 9, 14), float32], Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) {
  %162 = fn (%var_10772: Tensor[(4, 9, 14), uint8], %var_10773: Tensor[(4, 9, 14), uint8], %var_10785: Tensor[(4, 9, 14), uint8]) -> (Tensor[(4, 9, 14), float64], Tensor[(4, 9, 14), uint16], Tensor[(4, 9, 14), float32], Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) {
    %141 = cast(%var_10785, dtype="float64") /* ty=Tensor[(4, 9, 14), float64] */;
    %142 = shape_of(%var_10772, dtype="int32") /* ty=Tensor[(3), int32] */;
    %143 = cast(%var_10772, dtype="float64") /* ty=Tensor[(4, 9, 14), float64] */;
    %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %145 = cast(meta[relay.Constant][11] /* ty=Tensor[(4, 9, 14), uint8] */, dtype="uint16") /* ty=Tensor[(4, 9, 14), uint16] */;
    %146 = shape_of(%var_10773, dtype="int32") /* ty=Tensor[(3), int32] */;
    %147 = cast(%var_10773, dtype="uint16") /* ty=Tensor[(4, 9, 14), uint16] */;
    %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %149 = cast(%var_10773, dtype="bool") /* ty=Tensor[(4, 9, 14), bool] */;
    %150 = shape_of(%var_10772, dtype="int32") /* ty=Tensor[(3), int32] */;
    %151 = cast(%var_10772, dtype="bool") /* ty=Tensor[(4, 9, 14), bool] */;
    %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %153 = not_equal(%151, %152) /* ty=Tensor[(4, 9, 14), bool] */;
    %154 = cast(%153, dtype="float32") /* ty=Tensor[(4, 9, 14), float32] */;
    %155 = @func_8562() /* ty=(Tensor[(13, 12, 13), float64],) */;
    %156 = @func_10640() /* ty=(Tensor[(13, 12, 13), float64],) */;
    %157 = floor_mod(%143, %144) /* ty=Tensor[(4, 9, 14), float64] */;
    %158 = maximum(%147, %148) /* ty=Tensor[(4, 9, 14), uint16] */;
    %159 = sqrt(%154) /* ty=Tensor[(4, 9, 14), float32] */;
    %160 = %155.0;
    %161 = %156.0;
    (%157, %158, %159, %160, %161)
  };
  %162(%var_10822, %var_10823, %var_10824) /* ty=(Tensor[(4, 9, 14), float64], Tensor[(4, 9, 14), uint16], Tensor[(4, 9, 14), float32], Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) */
}

def @func_6465() -> Tensor[(13, 12, 13), float64] {
  @func_6463() /* ty=Tensor[(13, 12, 13), float64] */
}

def @func_11089(%var_11081: Tensor[(14, 13, 13), float64]) -> (Tensor[(14, 13, 13), int8],) {
  %163 = cast(%var_11081, dtype="float64") /* ty=Tensor[(14, 13, 13), float64] */;
  %164 = cosh(%163) /* ty=Tensor[(14, 13, 13), float64] */;
  %165 = cast(%var_11081, dtype="int8") /* ty=Tensor[(14, 13, 13), int8] */;
  %166 = shape_of(%164, dtype="int32") /* ty=Tensor[(3), int32] */;
  %167 = cast(%164, dtype="int8") /* ty=Tensor[(14, 13, 13), int8] */;
  %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %169 = minimum(%167, %168) /* ty=Tensor[(14, 13, 13), int8] */;
  (%169,)
}

def @func_8528() -> (Tensor[(4, 4, 13), float32], Tensor[(13, 12, 13), float64]) {
  %170 = @func_7105() /* ty=(Tensor[(4, 4, 13), float32],) */;
  %171 = @func_7402() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %172 = %170.0;
  %173 = %171.0;
  (%172, %173)
}

def @func_9429() -> Tensor[(13, 12, 13), float64] {
  %175 = fn () -> Tensor[(13, 12, 13), float64] {
    %174 = @func_8991() /* ty=(Tensor[(13, 12, 13), float64],) */;
    %174.0
  };
  %175() /* ty=Tensor[(13, 12, 13), float64] */
}

def @func_10221(%var_10219: Tensor[(90), int8], %var_10220: Tensor[(660), float32]) -> (Tensor[(13, 12, 13), float64], Tensor[(5, 6, 6), float64], Tensor[(6, 30), float64], Tensor[(90, 2), float64], Tensor[(144), float32], Tensor[(90), int8], Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(660), float32], Tensor[(2, 9, 5), bool], Tensor[(150), float64]) {
  %203 = fn (%var_10197: Tensor[(90), int8], %var_10203: Tensor[(660), float32]) -> (Tensor[(13, 12, 13), float64], Tensor[(5, 6, 6), float64], Tensor[(6, 30), float64], Tensor[(90, 2), float64], Tensor[(144), float32], Tensor[(90), int8], Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(660), float32], Tensor[(2, 9, 5), bool], Tensor[(150), float64]) {
    %176 = @func_9925() /* ty=(Tensor[(13, 12, 13), float64],) */;
    %177 = cast(meta[relay.Constant][12] /* ty=Tensor[(6, 30), float64] */, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
    %178 = reshape(%177, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), float64] */;
    %179 = cast(meta[relay.Constant][13] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
    %180 = cast(%var_10197, dtype="int8") /* ty=Tensor[(90), int8] */;
    %181 = cast(meta[relay.Constant][12] /* ty=Tensor[(6, 30), float64] */, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
    %182 = reshape(%179, newshape=[144]) /* ty=Tensor[(144), float32] */;
    %183 = reshape(%180, newshape=[90]) /* ty=Tensor[(90), int8] */;
    %184 = reshape(%181, newshape=[90, 2]) /* ty=Tensor[(90, 2), float64] */;
    %185 = @func_4947(%182, %183, %184) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(144), float32], Tensor[(90), int8], Tensor[(660), uint32], Tensor[(90, 2), float64], Tensor[(1584), bool]) */;
    %186 = @func_9925() /* ty=(Tensor[(13, 12, 13), float64],) */;
    %187 = cast(%var_10203, dtype="float32") /* ty=Tensor[(660), float32] */;
    %188 = reshape(%187, newshape=[660]) /* ty=Tensor[(660), float32] */;
    %189 = @func_5811(%188) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(5, 6, 6), float64], Tensor[(660), float32], Tensor[(180, 1), float32], Tensor[(140), float32], Tensor[(140), float32], Tensor[(13, 3, 8), float64], Tensor[(150), float64]) */;
    %190 = cast(%var_10197, dtype="int8") /* ty=Tensor[(90), int8] */;
    %191 = cast(%var_10203, dtype="uint32") /* ty=Tensor[(660), uint32] */;
    %192 = cast(meta[relay.Constant][14] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
    %193 = reshape(%190, newshape=[2, 9, 5]) /* ty=Tensor[(2, 9, 5), int8] */;
    %194 = reshape(%191, newshape=[660]) /* ty=Tensor[(660), uint32] */;
    %195 = reshape(%192, newshape=[1, 150]) /* ty=Tensor[(1, 150), float64] */;
    %196 = @func_2306(%193, %194, %195) /* ty=(Tensor[(2, 9, 5), bool], Tensor[(660), uint32], Tensor[(?, 150), bool], Tensor[(2, 9, 5), float32]) */;
    %197 = %176.0;
    %198 = @func_212(%178) /* ty=Tensor[(5, 6, 6), float64] */;
    %199 = %185.4;
    %200 = %186.0;
    %201 = %189.0;
    %202 = %196.0;
    (%197, %198, meta[relay.Constant][12] /* ty=Tensor[(6, 30), float64] */, %199, meta[relay.Constant][13] /* ty=Tensor[(144), float32] */, %var_10197, %200, %201, %var_10203, %202, meta[relay.Constant][14] /* ty=Tensor[(150), float64] */)
  };
  %203(%var_10219, %var_10220) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(5, 6, 6), float64], Tensor[(6, 30), float64], Tensor[(90, 2), float64], Tensor[(144), float32], Tensor[(90), int8], Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(660), float32], Tensor[(2, 9, 5), bool], Tensor[(150), float64]) */
}

def @main(%var_11486: Tensor[(16, 12, 11), float64]) -> (Tensor[(16, 12, 11), float64], Tensor[(13, 12, 13), float64], Tensor[(16, 12, 11), float64]) {
  %204 = @func_6723() /* ty=Tensor[(16, 12, 11), float64] */;
  %205 = cast(%var_11486, dtype="float64") /* ty=Tensor[(16, 12, 11), float64] */;
  %206 = shape_of(%204, dtype="int32") /* ty=Tensor[(3), int32] */;
  %207 = cast(%204, dtype="float64") /* ty=Tensor[(16, 12, 11), float64] */;
  %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %209 = @func_9260() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) */;
  %210 = cast(%var_11486, dtype="bool") /* ty=Tensor[(16, 12, 11), bool] */;
  %211 = shape_of(%204, dtype="int32") /* ty=Tensor[(3), int32] */;
  %212 = cast(%204, dtype="bool") /* ty=Tensor[(16, 12, 11), bool] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %214 = greater(%212, %213) /* ty=Tensor[(16, 12, 11), bool] */;
  %215 = cast(%214, dtype="float64") /* ty=Tensor[(16, 12, 11), float64] */;
  %216 = minimum(%207, %208) /* ty=Tensor[(16, 12, 11), float64] */;
  %217 = %209.1;
  %218 = acos(%215) /* ty=Tensor[(16, 12, 11), float64] */;
  (%216, %217, %218)
}

def @func_6090(%var_6089: Tensor[(150), float64]) -> (Tensor[(13, 12, 13), float64], Tensor[(2, 9, 5), float32], Tensor[(90), int8], Tensor[(660), uint32], Tensor[(150), float64]) {
  %229 = fn (%var_6057: Tensor[(150), float64]) -> (Tensor[(13, 12, 13), float64], Tensor[(2, 9, 5), float32], Tensor[(90), int8], Tensor[(660), uint32], Tensor[(150), float64]) {
    %219 = @func_5295() /* ty=(Tensor[(13, 12, 13), float64],) */;
    %220 = cast(meta[relay.Constant][15] /* ty=Tensor[(90), int8] */, dtype="int8") /* ty=Tensor[(90), int8] */;
    %221 = cast(meta[relay.Constant][16] /* ty=Tensor[(660), uint32] */, dtype="uint32") /* ty=Tensor[(660), uint32] */;
    %222 = cast(%var_6057, dtype="float64") /* ty=Tensor[(150), float64] */;
    %223 = reshape(%220, newshape=[2, 9, 5]) /* ty=Tensor[(2, 9, 5), int8] */;
    %224 = reshape(%221, newshape=[660]) /* ty=Tensor[(660), uint32] */;
    %225 = reshape(%222, newshape=[1, 150]) /* ty=Tensor[(1, 150), float64] */;
    %226 = @func_2306(%223, %224, %225) /* ty=(Tensor[(2, 9, 5), bool], Tensor[(660), uint32], Tensor[(?, 150), bool], Tensor[(2, 9, 5), float32]) */;
    %227 = %219.0;
    %228 = %226.3;
    (%227, %228, meta[relay.Constant][15] /* ty=Tensor[(90), int8] */, meta[relay.Constant][16] /* ty=Tensor[(660), uint32] */, %var_6057)
  };
  %229(%var_6089) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(2, 9, 5), float32], Tensor[(90), int8], Tensor[(660), uint32], Tensor[(150), float64]) */
}

def @func_8056() -> (Tensor[(4, 4, 13), float32], Tensor[(13, 12, 13), float64]) {
  %230 = @func_6553() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %231 = @func_7120() /* ty=Tensor[(4, 4, 13), float32] */;
  %232 = %230.0;
  (%231, %232)
}

def @func_6211() -> (Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), int16], Tensor[(16), int16]) {
  %239 = fn () -> (Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), int16], Tensor[(16), int16]) {
    %233 = @func_5295() /* ty=(Tensor[(13, 12, 13), float64],) */;
    %234 = cast(meta[relay.Constant][17] /* ty=Tensor[(16), int16] */, dtype="int16") /* ty=Tensor[(16), int16] */;
    %235 = reshape(%234, newshape=[1, 4, 4]) /* ty=Tensor[(1, 4, 4), int16] */;
    %236 = @func_4315(%235) /* ty=(Tensor[(?, 4, 4), int16],) */;
    %237 = %233.0;
    %238 = %236.0;
    (%237, %238, meta[relay.Constant][17] /* ty=Tensor[(16), int16] */)
  };
  %239() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), int16], Tensor[(16), int16]) */
}

def @func_5516(%var_5514: Tensor[(1728), float64], %var_5515: Tensor[(150), float64]) -> (Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(16, 12, 9), float32], Tensor[(1728), float64], Tensor[(90), int8], Tensor[(150), float64]) {
  @func_5512(%var_5514, %var_5515) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(16, 12, 9), float32], Tensor[(1728), float64], Tensor[(90), int8], Tensor[(150), float64]) */
}

def @func_11232() -> (Tensor[(13, 12, 13), float64],) {
  @func_11230() /* ty=(Tensor[(13, 12, 13), float64],) */
}

def @func_7404() -> (Tensor[(13, 12, 13), float64],) {
  @func_7402() /* ty=(Tensor[(13, 12, 13), float64],) */
}

def @func_5746() -> Tensor[(4, 4, 13), float32] {
  %241 = fn () -> Tensor[(4, 4, 13), float32] {
    %240 = cast(meta[relay.Constant][18] /* ty=Tensor[(4, 4, 13), float32] */, dtype="float32") /* ty=Tensor[(4, 4, 13), float32] */;
    acosh(%240) /* ty=Tensor[(4, 4, 13), float32] */
  };
  %241() /* ty=Tensor[(4, 4, 13), float32] */
}

def @func_8280() -> Tensor[(?, 4, 4), float32] {
  %245 = fn () -> Tensor[(?, 4, 4), float32] {
    %242 = @func_6253() /* ty=(Tensor[(?, 4, 4), int16],) */;
    %243 = %242.0;
    %244 = cast(%243, dtype="float32") /* ty=Tensor[(?, 4, 4), float32] */;
    sinh(%244) /* ty=Tensor[(?, 4, 4), float32] */
  };
  %245() /* ty=Tensor[(?, 4, 4), float32] */
}

def @func_8342(%var_8329: Tensor[(180), float64]) -> (Tensor[(75, 2), float64], Tensor[(5, 6, 6), float64], Tensor[(660), float32], Tensor[(180), float64]) {
  %246 = @func_6673() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(16, 12, 9), float32], Tensor[(288, 6), float64], Tensor[(90), int8], Tensor[(5, 6, 6), float64], Tensor[(13, 12, 13), float64], Tensor[(140), float32], Tensor[(70, 2), float32], Tensor[(5, 132), uint32], Tensor[(13, 12, 13), float64], Tensor[(75, 2), float64], Tensor[(4, 4, 13), float32], Tensor[(52, 4), float32], Tensor[(144), float32], Tensor[(75, 2), float64]) */;
  %247 = cast(meta[relay.Constant][19] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
  %248 = cast(%var_8329, dtype="float64") /* ty=Tensor[(180), float64] */;
  %249 = reshape(%247, newshape=[11, 15, 4]) /* ty=Tensor[(11, 15, 4), float32] */;
  %250 = reshape(%248, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %251 = @func_311(%249, %250) /* ty=(Tensor[(11, 15, 4), float32], Tensor[(5, 6, 6), float64], Tensor[(180), float64]) */;
  %252 = %246.10;
  %253 = %251.1;
  (%252, %253, meta[relay.Constant][19] /* ty=Tensor[(660), float32] */, %var_8329)
}

def @func_10439(%var_10438: Tensor[(660), float32]) -> (Tensor[(180), float64], Tensor[(660), float32], Tensor[(180), float64], Tensor[(13, 12, 13), bool]) {
  %267 = fn (%var_10422: Tensor[(660), float32]) -> (Tensor[(180), float64], Tensor[(660), float32], Tensor[(180), float64], Tensor[(13, 12, 13), bool]) {
    %254 = cast(%var_10422, dtype="float32") /* ty=Tensor[(660), float32] */;
    %255 = cast(meta[relay.Constant][20] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %256 = reshape(%254, newshape=[660]) /* ty=Tensor[(660), float32] */;
    %257 = reshape(%255, newshape=[1, 180]) /* ty=Tensor[(1, 180), float64] */;
    %258 = @func_7210(%256, %257) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(180), float64], Tensor[(660), float32], Tensor[(1, 180), float64], Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), float64]) */;
    %259 = @func_6553() /* ty=(Tensor[(13, 12, 13), float64],) */;
    %260 = %259.0;
    %261 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 12, 13), float64] */, dtype="bool") /* ty=Tensor[(13, 12, 13), bool] */;
    %262 = shape_of(%260, dtype="int32") /* ty=Tensor[(3), int32] */;
    %263 = cast(%260, dtype="bool") /* ty=Tensor[(13, 12, 13), bool] */;
    %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %265 = %258.1;
    %266 = greater_equal(%263, %264) /* ty=Tensor[(13, 12, 13), bool] */;
    (%265, %var_10422, meta[relay.Constant][20] /* ty=Tensor[(180), float64] */, %266)
  };
  %267(%var_10438) /* ty=(Tensor[(180), float64], Tensor[(660), float32], Tensor[(180), float64], Tensor[(13, 12, 13), bool]) */
}

def @func_6339() -> (Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(99), float32]) {
  %268 = @func_6328() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %269 = cast(meta[relay.Constant][22] /* ty=Tensor[(99), float32] */, dtype="float32") /* ty=Tensor[(99), float32] */;
  %270 = reshape(%269, newshape=[99]) /* ty=Tensor[(99), float32] */;
  %271 = @func_5384(%270) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(3, 3, 11), float32], Tensor[(99), float32]) */;
  %272 = %268.0;
  %273 = %271.0;
  (%272, %273, meta[relay.Constant][22] /* ty=Tensor[(99), float32] */)
}

def @func_11416() -> (Tensor[(660), float32],) {
  @func_11414() /* ty=(Tensor[(660), float32],) */
}

def @func_5968() -> (Tensor[(4, 4, 13), float32],) {
  @func_5966() /* ty=(Tensor[(4, 4, 13), float32],) */
}

def @func_4926() -> (Tensor[(13, 12, 13), float64],) {
  @func_4924() /* ty=(Tensor[(13, 12, 13), float64],) */
}

def @func_8445() -> (Tensor[(13, 12, 13), float64],) {
  %278 = fn () -> (Tensor[(13, 12, 13), float64],) {
    %274 = @func_6553() /* ty=(Tensor[(13, 12, 13), float64],) */;
    %275 = %274.0;
    %276 = cast(%275, dtype="float64") /* ty=Tensor[(13, 12, 13), float64] */;
    %277 = erf(%276) /* ty=Tensor[(13, 12, 13), float64] */;
    (%277,)
  };
  %278() /* ty=(Tensor[(13, 12, 13), float64],) */
}

def @func_9909() -> (Tensor[(150), float64], Tensor[(?, 4, 4), float64]) {
  @func_9907() /* ty=(Tensor[(150), float64], Tensor[(?, 4, 4), float64]) */
}

def @func_10707() -> Tensor[(13, 12, 13), float64] {
  %279 = @func_7886() /* ty=(Tensor[(?, 4, 4), int16], Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) */;
  %279.1
}

def @func_492(%var_490: Tensor[(11, 4, 15), float32], %var_491: Tensor[(180), float64]) -> (Tensor[(5, 6, 6), float64], Tensor[(180), float64], Tensor[(11, 4, 15), uint16], Tensor[(5, 6, 6), float64]) {
  @func_488(%var_490, %var_491) /* ty=(Tensor[(5, 6, 6), float64], Tensor[(180), float64], Tensor[(11, 4, 15), uint16], Tensor[(5, 6, 6), float64]) */
}

def @func_11193() -> Tensor[(13, 12, 13), float64] {
  %281 = fn () -> Tensor[(13, 12, 13), float64] {
    %280 = @func_10514() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) */;
    %280.1
  };
  %281() /* ty=Tensor[(13, 12, 13), float64] */
}

def @func_11379(%var_11377: Tensor[(4, 10, 14), float32]) -> (Tensor[(4, 10, 14), float32],) {
  @func_11376(%var_11377) /* ty=(Tensor[(4, 10, 14), float32],) */
}

def @func_9926() -> (Tensor[(13, 12, 13), float64],) {
  %284 = fn () -> (Tensor[(13, 12, 13), float64],) {
    %282 = @func_8056() /* ty=(Tensor[(4, 4, 13), float32], Tensor[(13, 12, 13), float64]) */;
    %283 = %282.1;
    (%283,)
  };
  %284() /* ty=(Tensor[(13, 12, 13), float64],) */
}

def @func_10357(%var_10355: Tensor[(660), float32], %var_10356: Tensor[(90, 2), float64]) -> (Tensor[(13, 12, 13), float64], Tensor[(16, 12, 11), float64], Tensor[(660), float32], Tensor[(660), float32], Tensor[(90, 2), float64], Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), float32]) {
  %295 = fn (%var_10341: Tensor[(660), float32], %var_10342: Tensor[(90, 2), float64]) -> (Tensor[(13, 12, 13), float64], Tensor[(16, 12, 11), float64], Tensor[(660), float32], Tensor[(660), float32], Tensor[(90, 2), float64], Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), float32]) {
    %285 = cast(%var_10341, dtype="float32") /* ty=Tensor[(660), float32] */;
    %286 = cast(%var_10342, dtype="float64") /* ty=Tensor[(90, 2), float64] */;
    %287 = reshape(%285, newshape=[660]) /* ty=Tensor[(660), float32] */;
    %288 = reshape(%286, newshape=[1, 180]) /* ty=Tensor[(1, 180), float64] */;
    %289 = @func_7210(%287, %288) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(180), float64], Tensor[(660), float32], Tensor[(1, 180), float64], Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), float64]) */;
    %290 = @func_9024() /* ty=Tensor[(13, 12, 13), float64] */;
    %291 = @func_6723() /* ty=Tensor[(16, 12, 11), float64] */;
    %292 = %289.2;
    %293 = @func_9579() /* ty=Tensor[(13, 12, 13), float64] */;
    %294 = @func_8279() /* ty=Tensor[(?, 4, 4), float32] */;
    (%290, %291, %292, %var_10341, %var_10342, %293, %294)
  };
  %295(%var_10355, %var_10356) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(16, 12, 11), float64], Tensor[(660), float32], Tensor[(660), float32], Tensor[(90, 2), float64], Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), float32]) */
}

def @func_4664(%var_4662: Tensor[(4, 2, 16), int16], %var_4663: Tensor[(4, 2, 16), int16]) -> (Tensor[(4, 2, 16), bool], Tensor[(15, 4, 11), float32], Tensor[(660), uint32], Tensor[(15, 4, 11), float32], Tensor[(150), float64]) {
  @func_4660(%var_4662, %var_4663) /* ty=(Tensor[(4, 2, 16), bool], Tensor[(15, 4, 11), float32], Tensor[(660), uint32], Tensor[(15, 4, 11), float32], Tensor[(150), float64]) */
}

def @func_8139() -> (Tensor[(4, 4, 13), float32], Tensor[(13, 12, 13), float64]) {
  %301 = fn () -> (Tensor[(4, 4, 13), float32], Tensor[(13, 12, 13), float64]) {
    %296 = @func_6673() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(16, 12, 9), float32], Tensor[(288, 6), float64], Tensor[(90), int8], Tensor[(5, 6, 6), float64], Tensor[(13, 12, 13), float64], Tensor[(140), float32], Tensor[(70, 2), float32], Tensor[(5, 132), uint32], Tensor[(13, 12, 13), float64], Tensor[(75, 2), float64], Tensor[(4, 4, 13), float32], Tensor[(52, 4), float32], Tensor[(144), float32], Tensor[(75, 2), float64]) */;
    %297 = %296.11;
    %298 = cast(%297, dtype="float32") /* ty=Tensor[(4, 4, 13), float32] */;
    %299 = log(%298) /* ty=Tensor[(4, 4, 13), float32] */;
    %300 = @func_7230() /* ty=Tensor[(13, 12, 13), float64] */;
    (%299, %300)
  };
  %301() /* ty=(Tensor[(4, 4, 13), float32], Tensor[(13, 12, 13), float64]) */
}

def @func_4315(%var_4304: Tensor[(1, 4, 4), int16]) -> (Tensor[(?, 4, 4), int16],) {
  %302 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 4, 4), int16] */, dtype="int16") /* ty=Tensor[(1, 4, 4), int16] */;
  %303 = shape_of(%var_4304, dtype="int32") /* ty=Tensor[(3), int32] */;
  %304 = cast(%var_4304, dtype="int16") /* ty=Tensor[(1, 4, 4), int16] */;
  %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %306 = bitwise_or(%304, %305) /* ty=Tensor[(?, 4, 4), int16] */;
  (%306,)
}

def @func_9009() -> Tensor[(13, 12, 13), float64] {
  @func_9007() /* ty=Tensor[(13, 12, 13), float64] */
}

def @func_7686() -> (Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) {
  %307 = @func_7172() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %308 = %307.0;
  %309 = @func_6463() /* ty=Tensor[(13, 12, 13), float64] */;
  (%308, %309)
}

def @func_6366() -> Tensor[(?, 4, 4), float64] {
  %313 = fn () -> Tensor[(?, 4, 4), float64] {
    %310 = @func_6210() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), int16], Tensor[(16), int16]) */;
    %311 = %310.1;
    %312 = cast(%311, dtype="float64") /* ty=Tensor[(?, 4, 4), float64] */;
    rsqrt(%312) /* ty=Tensor[(?, 4, 4), float64] */
  };
  %313() /* ty=Tensor[(?, 4, 4), float64] */
}

def @func_9025() -> Tensor[(13, 12, 13), float64] {
  %314 = fn () -> Tensor[(13, 12, 13), float64] {
    @func_5749() /* ty=Tensor[(13, 12, 13), float64] */
  };
  %314() /* ty=Tensor[(13, 12, 13), float64] */
}

def @func_7172() -> (Tensor[(13, 12, 13), float64],) {
  %315 = @func_6328() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %316 = %315.0;
  %317 = cast(%316, dtype="float64") /* ty=Tensor[(13, 12, 13), float64] */;
  %318 = sinh(%317) /* ty=Tensor[(13, 12, 13), float64] */;
  (%318,)
}

def @func_8172() -> Tensor[(90), int8] {
  %319 = @func_6673() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(16, 12, 9), float32], Tensor[(288, 6), float64], Tensor[(90), int8], Tensor[(5, 6, 6), float64], Tensor[(13, 12, 13), float64], Tensor[(140), float32], Tensor[(70, 2), float32], Tensor[(5, 132), uint32], Tensor[(13, 12, 13), float64], Tensor[(75, 2), float64], Tensor[(4, 4, 13), float32], Tensor[(52, 4), float32], Tensor[(144), float32], Tensor[(75, 2), float64]) */;
  %319.3
}

def @func_9439() -> Tensor[(13, 12, 13), float64] {
  @func_9437() /* ty=Tensor[(13, 12, 13), float64] */
}

def @func_7756(%var_7754: Tensor[(99), float32]) -> (Tensor[(?, 4, 4), int16], Tensor[(3, 3, 11), float32], Tensor[(99), float32]) {
  %320 = @func_6253() /* ty=(Tensor[(?, 4, 4), int16],) */;
  %321 = cast(%var_7754, dtype="float32") /* ty=Tensor[(99), float32] */;
  %322 = reshape(%321, newshape=[99]) /* ty=Tensor[(99), float32] */;
  %323 = @func_5384(%322) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(3, 3, 11), float32], Tensor[(99), float32]) */;
  %324 = %320.0;
  %325 = %323.1;
  (%324, %325, %var_7754)
}

def @func_4951(%var_4948: Tensor[(144), float32], %var_4949: Tensor[(90), int8], %var_4950: Tensor[(90, 2), float64]) -> (Tensor[(13, 12, 13), float64], Tensor[(144), float32], Tensor[(90), int8], Tensor[(660), uint32], Tensor[(90, 2), float64], Tensor[(1584), bool]) {
  %345 = fn (%var_4933: Tensor[(144), float32], %var_4935: Tensor[(90), int8], %var_4937: Tensor[(90, 2), float64]) -> (Tensor[(13, 12, 13), float64], Tensor[(144), float32], Tensor[(90), int8], Tensor[(660), uint32], Tensor[(90, 2), float64], Tensor[(1584), bool]) {
    %326 = @func_4924() /* ty=(Tensor[(13, 12, 13), float64],) */;
    %327 = cast(%var_4933, dtype="float32") /* ty=Tensor[(144), float32] */;
    %328 = cast(meta[relay.Constant][25] /* ty=Tensor[(1584), float32] */, dtype="float32") /* ty=Tensor[(1584), float32] */;
    %329 = cast(%var_4935, dtype="int8") /* ty=Tensor[(90), int8] */;
    %330 = cast(meta[relay.Constant][24] /* ty=Tensor[(660), uint32] */, dtype="uint32") /* ty=Tensor[(660), uint32] */;
    %331 = cast(%var_4937, dtype="float64") /* ty=Tensor[(90, 2), float64] */;
    %332 = reshape(%327, newshape=[12, 12, 1]) /* ty=Tensor[(12, 12, 1), float32] */;
    %333 = reshape(%328, newshape=[12, 12, 11]) /* ty=Tensor[(12, 12, 11), float32] */;
    %334 = reshape(%329, newshape=[90]) /* ty=Tensor[(90), int8] */;
    %335 = reshape(%330, newshape=[110, 6]) /* ty=Tensor[(110, 6), uint32] */;
    %336 = reshape(%331, newshape=[180]) /* ty=Tensor[(180), float64] */;
    %337 = @func_2906(%332, %333, %334, %335, %336) /* ty=(Tensor[(12, 12, 11), bool], Tensor[(2, 9, 5), bool], Tensor[(90), int8], Tensor[(110, 6), uint32], Tensor[(150), float64], Tensor[(5, 6, 6), float64], Tensor[(180), float64], Tensor[(180), float64]) */;
    %338 = %337.0;
    %339 = cast(%338, dtype="bool") /* ty=Tensor[(12, 12, 11), bool] */;
    %340 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(1584), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %341 = cast(meta[relay.Constant][25] /* ty=Tensor[(1584), float32] */, dtype="bool") /* ty=Tensor[(1584), bool] */;
    %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?), bool] */;
    %343 = %326.0;
    %344 = logical_and(%341, %342) /* ty=Tensor[(1584), bool] */;
    (%343, %var_4933, %var_4935, meta[relay.Constant][24] /* ty=Tensor[(660), uint32] */, %var_4937, %344)
  };
  %345(%var_4948, %var_4949, %var_4950) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(144), float32], Tensor[(90), int8], Tensor[(660), uint32], Tensor[(90, 2), float64], Tensor[(1584), bool]) */
}

def @func_5296() -> (Tensor[(13, 12, 13), float64],) {
  %348 = fn () -> (Tensor[(13, 12, 13), float64],) {
    %346 = @func_5131() /* ty=(Tensor[(13, 12, 13), float64],) */;
    %347 = %346.0;
    (%347,)
  };
  %348() /* ty=(Tensor[(13, 12, 13), float64],) */
}

def @func_5811(%var_5784: Tensor[(660), float32]) -> (Tensor[(13, 12, 13), float64], Tensor[(5, 6, 6), float64], Tensor[(660), float32], Tensor[(180, 1), float32], Tensor[(140), float32], Tensor[(140), float32], Tensor[(13, 3, 8), float64], Tensor[(150), float64]) {
  %349 = @func_4924() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %350 = cast(%var_5784, dtype="float32") /* ty=Tensor[(660), float32] */;
  %351 = cast(meta[relay.Constant][26] /* ty=Tensor[(180, 1), float64] */, dtype="float64") /* ty=Tensor[(180, 1), float64] */;
  %352 = reshape(%350, newshape=[11, 15, 4]) /* ty=Tensor[(11, 15, 4), float32] */;
  %353 = reshape(%351, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %354 = @func_311(%352, %353) /* ty=(Tensor[(11, 15, 4), float32], Tensor[(5, 6, 6), float64], Tensor[(180), float64]) */;
  %355 = cast(meta[relay.Constant][26] /* ty=Tensor[(180, 1), float64] */, dtype="float64") /* ty=Tensor[(180, 1), float64] */;
  %356 = rsqrt(%355) /* ty=Tensor[(180, 1), float64] */;
  %357 = cast(%356, dtype="float32") /* ty=Tensor[(180, 1), float32] */;
  %358 = cast(meta[relay.Constant][27] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %359 = cast(%var_5784, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %360 = reshape(%358, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %361 = reshape(%359, newshape=[660]) /* ty=Tensor[(660), uint32] */;
  %362 = @func_5339(%360, %361) /* ty=(Tensor[(13, 12, 13), float32], Tensor[(4, 5, 7), float32], Tensor[(140), float32], Tensor[(660), uint32]) */;
  %363 = cast(meta[relay.Constant][28] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %364 = cast(%var_5784, dtype="float32") /* ty=Tensor[(660), float32] */;
  %365 = sigmoid(%357) /* ty=Tensor[(180, 1), float32] */;
  %366 = cast(%365, dtype="float64") /* ty=Tensor[(180, 1), float64] */;
  %367 = reshape(%363, newshape=[2, 15, 5]) /* ty=Tensor[(2, 15, 5), float64] */;
  %368 = reshape(%364, newshape=[660]) /* ty=Tensor[(660), float32] */;
  %369 = reshape(%366, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %370 = @func_1888(%367, %368, %369) /* ty=(Tensor[(180), float64], Tensor[(660), float32], Tensor[(180), float64], Tensor[(2, 15, 5), int16], Tensor[(5, 6, 6), float64], Tensor[(2, 15, 5), uint32], Tensor[(13, 3, 8), float64], Tensor[(5, 6, 6), float64], Tensor[(180), float64]) */;
  %371 = %349.0;
  %372 = %354.1;
  %373 = %362.2;
  %374 = %370.6;
  (%371, %372, %var_5784, %365, %373, meta[relay.Constant][27] /* ty=Tensor[(140), float32] */, %374, meta[relay.Constant][28] /* ty=Tensor[(150), float64] */)
}

def @func_8993() -> (Tensor[(13, 12, 13), float64],) {
  @func_8991() /* ty=(Tensor[(13, 12, 13), float64],) */
}

def @func_7886() -> (Tensor[(?, 4, 4), int16], Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) {
  %375 = @func_6210() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), int16], Tensor[(16), int16]) */;
  %376 = @func_7686() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) */;
  %377 = %375.1;
  %378 = %376.1;
  %379 = @func_7230() /* ty=Tensor[(13, 12, 13), float64] */;
  (%377, %378, %379)
}

def @func_2906(%var_2851: Tensor[(12, 12, 1), float32], %var_2861: Tensor[(12, 12, 11), float32], %var_2888: Tensor[(90), int8], %var_2889: Tensor[(110, 6), uint32], %var_2895: Tensor[(180), float64]) -> (Tensor[(12, 12, 11), bool], Tensor[(2, 9, 5), bool], Tensor[(90), int8], Tensor[(110, 6), uint32], Tensor[(150), float64], Tensor[(5, 6, 6), float64], Tensor[(180), float64], Tensor[(180), float64]) {
  %380 = cast(%var_2851, dtype="float32") /* ty=Tensor[(12, 12, 1), float32] */;
  %381 = asin(%380) /* ty=Tensor[(12, 12, 1), float32] */;
  %382 = cast(%381, dtype="bool") /* ty=Tensor[(12, 12, 1), bool] */;
  %383 = cast(%var_2861, dtype="bool") /* ty=Tensor[(12, 12, 11), bool] */;
  %384 = cast(%var_2888, dtype="int8") /* ty=Tensor[(90), int8] */;
  %385 = cast(%var_2889, dtype="uint32") /* ty=Tensor[(110, 6), uint32] */;
  %386 = cast(meta[relay.Constant][29] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %387 = reshape(%384, newshape=[2, 9, 5]) /* ty=Tensor[(2, 9, 5), int8] */;
  %388 = reshape(%385, newshape=[660]) /* ty=Tensor[(660), uint32] */;
  %389 = reshape(%386, newshape=[1, 150]) /* ty=Tensor[(1, 150), float64] */;
  %390 = @func_2306(%387, %388, %389) /* ty=(Tensor[(2, 9, 5), bool], Tensor[(660), uint32], Tensor[(?, 150), bool], Tensor[(2, 9, 5), float32]) */;
  %391 = cast(%var_2895, dtype="float64") /* ty=Tensor[(180), float64] */;
  %392 = reshape(%391, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), float64] */;
  %393 = cast(%var_2889, dtype="float32") /* ty=Tensor[(110, 6), float32] */;
  %394 = reshape(%393, newshape=[660]) /* ty=Tensor[(660), float32] */;
  %395 = @func_680(%394) /* ty=(Tensor[(13, 3, 8), float64], Tensor[(180), float64], Tensor[(660), float32], Tensor[(180), float64]) */;
  %396 = greater_equal(%382, %383) /* ty=Tensor[(12, 12, 11), bool] */;
  %397 = %390.0;
  %398 = @func_212(%392) /* ty=Tensor[(5, 6, 6), float64] */;
  %399 = %395.1;
  (%396, %397, %var_2888, %var_2889, meta[relay.Constant][29] /* ty=Tensor[(150), float64] */, %398, %var_2895, %399)
}

def @func_7122() -> Tensor[(4, 4, 13), float32] {
  @func_7120() /* ty=Tensor[(4, 4, 13), float32] */
}

def @func_8058() -> (Tensor[(4, 4, 13), float32], Tensor[(13, 12, 13), float64]) {
  @func_8056() /* ty=(Tensor[(4, 4, 13), float32], Tensor[(13, 12, 13), float64]) */
}

def @func_6463() -> Tensor[(13, 12, 13), float64] {
  %400 = @func_6328() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %400.0
}

def @func_6880() -> (Tensor[(16, 12, 11), float64], Tensor[(13, 12, 13), float64], Tensor[(75, 2), float64]) {
  %401 = @func_6673() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(16, 12, 9), float32], Tensor[(288, 6), float64], Tensor[(90), int8], Tensor[(5, 6, 6), float64], Tensor[(13, 12, 13), float64], Tensor[(140), float32], Tensor[(70, 2), float32], Tensor[(5, 132), uint32], Tensor[(13, 12, 13), float64], Tensor[(75, 2), float64], Tensor[(4, 4, 13), float32], Tensor[(52, 4), float32], Tensor[(144), float32], Tensor[(75, 2), float64]) */;
  %402 = @func_6723() /* ty=Tensor[(16, 12, 11), float64] */;
  %403 = @func_5749() /* ty=Tensor[(13, 12, 13), float64] */;
  %404 = %401.10;
  (%402, %403, %404)
}

def @func_9805() -> (Tensor[(13, 12, 13), float64], Tensor[(128), int16], Tensor[(15, 4, 11), float64], Tensor[(13, 12, 13), float64]) {
  @func_9803() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(128), int16], Tensor[(15, 4, 11), float64], Tensor[(13, 12, 13), float64]) */
}

def @func_8313(%var_8281: Tensor[(5, 14, 1), float64]) -> (Tensor[(5, 14, ?), bool],) {
  %405 = cast(%var_8281, dtype="float64") /* ty=Tensor[(5, 14, 1), float64] */;
  %406 = cosh(%405) /* ty=Tensor[(5, 14, 1), float64] */;
  %407 = cast(%var_8281, dtype="int64") /* ty=Tensor[(5, 14, 1), int64] */;
  %408 = shape_of(%406, dtype="int32") /* ty=Tensor[(3), int32] */;
  %409 = cast(%406, dtype="int64") /* ty=Tensor[(5, 14, 1), int64] */;
  %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %411 = bitwise_or(%409, %410) /* ty=Tensor[(5, 14, ?), int64] */;
  %412 = cast(%411, dtype="bool") /* ty=Tensor[(5, 14, ?), bool] */;
  %413 = shape_of(%406, dtype="int32") /* ty=Tensor[(3), int32] */;
  %414 = cast(%406, dtype="bool") /* ty=Tensor[(5, 14, 1), bool] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %416 = greater_equal(%414, %415) /* ty=Tensor[(5, 14, ?), bool] */;
  (%416,)
}

def @func_8477() -> (Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) {
  %423 = fn () -> (Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) {
    %417 = @func_7172() /* ty=(Tensor[(13, 12, 13), float64],) */;
    %418 = @func_4924() /* ty=(Tensor[(13, 12, 13), float64],) */;
    %419 = @func_5131() /* ty=(Tensor[(13, 12, 13), float64],) */;
    %420 = %417.0;
    %421 = %418.0;
    %422 = %419.0;
    (%420, %421, %422)
  };
  %423() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) */
}

def @func_2310(%var_2307: Tensor[(2, 9, 5), int8], %var_2308: Tensor[(660), uint32], %var_2309: Tensor[(1, 150), float64]) -> (Tensor[(2, 9, 5), bool], Tensor[(660), uint32], Tensor[(?, 150), bool], Tensor[(2, 9, 5), float32]) {
  %442 = fn (%var_2254: Tensor[(2, 9, 5), int8], %var_2278: Tensor[(660), uint32], %var_2279: Tensor[(1, 150), float64]) -> (Tensor[(2, 9, 5), bool], Tensor[(660), uint32], Tensor[(?, 150), bool], Tensor[(2, 9, 5), float32]) {
    %424 = cast(meta[relay.Constant][30] /* ty=Tensor[(2, 1, 5), int8] */, dtype="bool") /* ty=Tensor[(2, 1, 5), bool] */;
    %425 = cast(%var_2254, dtype="bool") /* ty=Tensor[(2, 9, 5), bool] */;
    %426 = cast(%var_2278, dtype="uint32") /* ty=Tensor[(660), uint32] */;
    %427 = cast(%var_2279, dtype="float64") /* ty=Tensor[(1, 150), float64] */;
    %428 = reshape(%426, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), uint32] */;
    %429 = reshape(%427, newshape=[150]) /* ty=Tensor[(150), float64] */;
    %430 = @func_2017(%428, %429) /* ty=(Tensor[(180), float64], Tensor[(150), float64], Tensor[(180), float64], Tensor[(180), float64], Tensor[(15, 4, 11), float32]) */;
    %431 = %430.1;
    %432 = cast(%431, dtype="bool") /* ty=Tensor[(150), bool] */;
    %433 = shape_of(%var_2279, dtype="int32") /* ty=Tensor[(2), int32] */;
    %434 = cast(%var_2279, dtype="bool") /* ty=Tensor[(1, 150), bool] */;
    %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %436 = cast(%var_2254, dtype="float64") /* ty=Tensor[(2, 9, 5), float64] */;
    %437 = acosh(%436) /* ty=Tensor[(2, 9, 5), float64] */;
    %438 = cast(%437, dtype="float32") /* ty=Tensor[(2, 9, 5), float32] */;
    %439 = less(%424, %425) /* ty=Tensor[(2, 9, 5), bool] */;
    %440 = less_equal(%434, %435) /* ty=Tensor[(?, 150), bool] */;
    %441 = cosh(%438) /* ty=Tensor[(2, 9, 5), float32] */;
    (%439, %var_2278, %440, %441)
  };
  %442(%var_2307, %var_2308, %var_2309) /* ty=(Tensor[(2, 9, 5), bool], Tensor[(660), uint32], Tensor[(?, 150), bool], Tensor[(2, 9, 5), float32]) */
}

def @func_7990(%var_7989: Tensor[(13, 12, 13), float64]) -> (Tensor[(13, 12, 13), float32], Tensor[(4, 4, 13), int8], Tensor[(208), float32], Tensor[(13, 12, 13), float64], Tensor[(4, 4, 13), float32]) {
  %459 = fn (%var_7950: Tensor[(13, 12, 13), float64]) -> (Tensor[(13, 12, 13), float32], Tensor[(4, 4, 13), int8], Tensor[(208), float32], Tensor[(13, 12, 13), float64], Tensor[(4, 4, 13), float32]) {
    %443 = @func_7402() /* ty=(Tensor[(13, 12, 13), float64],) */;
    %444 = %443.0;
    %445 = cast(%var_7950, dtype="bool") /* ty=Tensor[(13, 12, 13), bool] */;
    %446 = shape_of(%444, dtype="int32") /* ty=Tensor[(3), int32] */;
    %447 = cast(%444, dtype="bool") /* ty=Tensor[(13, 12, 13), bool] */;
    %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %449 = equal(%447, %448) /* ty=Tensor[(13, 12, 13), bool] */;
    %450 = cast(%449, dtype="float32") /* ty=Tensor[(13, 12, 13), float32] */;
    %451 = cast(meta[relay.Constant][31] /* ty=Tensor[(208), float32] */, dtype="float32") /* ty=Tensor[(208), float32] */;
    %452 = reshape(%451, newshape=[4, 4, 13]) /* ty=Tensor[(4, 4, 13), float32] */;
    %453 = @func_5951(%452) /* ty=(Tensor[(4, 4, 13), int8],) */;
    %454 = @func_7105() /* ty=(Tensor[(4, 4, 13), float32],) */;
    %455 = log2(%450) /* ty=Tensor[(13, 12, 13), float32] */;
    %456 = %453.0;
    %457 = @func_5749() /* ty=Tensor[(13, 12, 13), float64] */;
    %458 = %454.0;
    (%455, %456, meta[relay.Constant][31] /* ty=Tensor[(208), float32] */, %457, %458)
  };
  %459(%var_7989) /* ty=(Tensor[(13, 12, 13), float32], Tensor[(4, 4, 13), int8], Tensor[(208), float32], Tensor[(13, 12, 13), float64], Tensor[(4, 4, 13), float32]) */
}

def @func_3156(%var_3086: Tensor[(16, 12, 9), float64], %var_3108: Tensor[(90), int8], %var_3122: Tensor[(75, 2), float64], %var_3126: Tensor[(16, 12, 9), float32]) -> (Tensor[(11, 4, 15), uint16], Tensor[(660), float32], Tensor[(180), float64], Tensor[(16, 12, 9), float32], Tensor[(660), uint32], Tensor[(90), int8], Tensor[(75, 2), float64], Tensor[(16, 12, 9), float32], Tensor[(5, 6, 6), float64]) {
  %460 = cast(meta[relay.Constant][32] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
  %461 = cast(meta[relay.Constant][33] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %462 = reshape(%460, newshape=[11, 4, 15]) /* ty=Tensor[(11, 4, 15), float32] */;
  %463 = reshape(%461, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %464 = @func_488(%462, %463) /* ty=(Tensor[(5, 6, 6), float64], Tensor[(180), float64], Tensor[(11, 4, 15), uint16], Tensor[(5, 6, 6), float64]) */;
  %465 = cast(meta[relay.Constant][34] /* ty=Tensor[(16, 12, 9), float64] */, dtype="float64") /* ty=Tensor[(16, 12, 9), float64] */;
  %466 = atan(%465) /* ty=Tensor[(16, 12, 9), float64] */;
  %467 = cast(%var_3086, dtype="float32") /* ty=Tensor[(16, 12, 9), float32] */;
  %468 = shape_of(%466, dtype="int32") /* ty=Tensor[(3), int32] */;
  %469 = cast(%466, dtype="float32") /* ty=Tensor[(16, 12, 9), float32] */;
  %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %471 = cast(%var_3108, dtype="int8") /* ty=Tensor[(90), int8] */;
  %472 = %464.2;
  %473 = cast(%472, dtype="uint32") /* ty=Tensor[(11, 4, 15), uint32] */;
  %474 = cast(meta[relay.Constant][35] /* ty=Tensor[(75, 2), float64] */, dtype="float64") /* ty=Tensor[(75, 2), float64] */;
  %475 = reshape(%471, newshape=[2, 9, 5]) /* ty=Tensor[(2, 9, 5), int8] */;
  %476 = reshape(%473, newshape=[660]) /* ty=Tensor[(660), uint32] */;
  %477 = reshape(%474, newshape=[1, 150]) /* ty=Tensor[(1, 150), float64] */;
  %478 = @func_2306(%475, %476, %477) /* ty=(Tensor[(2, 9, 5), bool], Tensor[(660), uint32], Tensor[(?, 150), bool], Tensor[(2, 9, 5), float32]) */;
  %479 = cast(%var_3122, dtype="float64") /* ty=Tensor[(75, 2), float64] */;
  %480 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(75, 2), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %481 = cast(meta[relay.Constant][35] /* ty=Tensor[(75, 2), float64] */, dtype="float64") /* ty=Tensor[(75, 2), float64] */;
  %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %483 = cast(%466, dtype="float32") /* ty=Tensor[(16, 12, 9), float32] */;
  %484 = asin(%483) /* ty=Tensor[(16, 12, 9), float32] */;
  %485 = cast(%var_3126, dtype="float32") /* ty=Tensor[(16, 12, 9), float32] */;
  %486 = shape_of(%484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(%484, dtype="float32") /* ty=Tensor[(16, 12, 9), float32] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %489 = cast(meta[relay.Constant][32] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
  %490 = cast(meta[relay.Constant][33] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %491 = reshape(%489, newshape=[11, 15, 4]) /* ty=Tensor[(11, 15, 4), float32] */;
  %492 = reshape(%490, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %493 = @func_311(%491, %492) /* ty=(Tensor[(11, 15, 4), float32], Tensor[(5, 6, 6), float64], Tensor[(180), float64]) */;
  %494 = floor_divide(%469, %470) /* ty=Tensor[(16, 12, 9), float32] */;
  %495 = %478.1;
  %496 = floor_divide(%481, %482) /* ty=Tensor[(75, 2), float64] */;
  %497 = mod(%487, %488) /* ty=Tensor[(16, 12, 9), float32] */;
  %498 = %493.1;
  (%472, meta[relay.Constant][32] /* ty=Tensor[(660), float32] */, meta[relay.Constant][33] /* ty=Tensor[(180), float64] */, %494, %495, %var_3108, %496, %497, %498)
}

def @func_9516() -> (Tensor[(?, 4, 4), float32], Tensor[(13, 12, 13), float64]) {
  @func_9514() /* ty=(Tensor[(?, 4, 4), float32], Tensor[(13, 12, 13), float64]) */
}

def @func_5268(%var_5266: Tensor[(99), float32], %var_5267: Tensor[(1, 16), int16]) -> (Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), int16], Tensor[(1, 16), int16], Tensor[(2, 9, 5), bool], Tensor[(90), int8], Tensor[(660), uint32], Tensor[(150), float64], Tensor[(3, 3, 11), float32], Tensor[(90), int8], Tensor[(144), float32], Tensor[(4, 396), float32], Tensor[(180), float64]) {
  @func_5264(%var_5266, %var_5267) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), int16], Tensor[(1, 16), int16], Tensor[(2, 9, 5), bool], Tensor[(90), int8], Tensor[(660), uint32], Tensor[(150), float64], Tensor[(3, 3, 11), float32], Tensor[(90), int8], Tensor[(144), float32], Tensor[(4, 396), float32], Tensor[(180), float64]) */
}

def @func_4352(%var_4350: Tensor[(3, 3, 11), float32]) -> (Tensor[(3, 3, 11), float32],) {
  @func_4349(%var_4350) /* ty=(Tensor[(3, 3, 11), float32],) */
}

def @func_2021(%var_2019: Tensor[(15, 4, 11), uint32], %var_2020: Tensor[(150), float64]) -> (Tensor[(180), float64], Tensor[(150), float64], Tensor[(180), float64], Tensor[(180), float64], Tensor[(15, 4, 11), float32]) {
  @func_2017(%var_2019, %var_2020) /* ty=(Tensor[(180), float64], Tensor[(150), float64], Tensor[(180), float64], Tensor[(180), float64], Tensor[(15, 4, 11), float32]) */
}

def @func_7688() -> (Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) {
  @func_7686() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) */
}

def @func_8991() -> (Tensor[(13, 12, 13), float64],) {
  %499 = @func_8444() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %500 = %499.0;
  (%500,)
}

def @func_5606(%var_5603: Tensor[(660), float32], %var_5604: Tensor[(180), float64], %var_5605: Tensor[(2, 360), int64]) -> (Tensor[(10, 15, 8), float64], Tensor[(180), float64], Tensor[(660), float32], Tensor[(180), float64], Tensor[(660, 1), float32], Tensor[(13, 156), float64], Tensor[(2, 360), int64]) {
  @func_5601(%var_5603, %var_5604, %var_5605) /* ty=(Tensor[(10, 15, 8), float64], Tensor[(180), float64], Tensor[(660), float32], Tensor[(180), float64], Tensor[(660, 1), float32], Tensor[(13, 156), float64], Tensor[(2, 360), int64]) */
}

def @func_9907() -> (Tensor[(150), float64], Tensor[(?, 4, 4), float64]) {
  %501 = @func_6316() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(2, 9, 5), bool], Tensor[(15, 6), int8], Tensor[(660), uint32], Tensor[(150), float64]) */;
  %502 = %501.4;
  %503 = @func_6365() /* ty=Tensor[(?, 4, 4), float64] */;
  (%502, %503)
}

def @func_1893(%var_1890: Tensor[(2, 15, 5), float64], %var_1891: Tensor[(660), float32], %var_1892: Tensor[(180), float64]) -> (Tensor[(180), float64], Tensor[(660), float32], Tensor[(180), float64], Tensor[(2, 15, 5), int16], Tensor[(5, 6, 6), float64], Tensor[(2, 15, 5), uint32], Tensor[(13, 3, 8), float64], Tensor[(5, 6, 6), float64], Tensor[(180), float64]) {
  @func_1888(%var_1890, %var_1891, %var_1892) /* ty=(Tensor[(180), float64], Tensor[(660), float32], Tensor[(180), float64], Tensor[(2, 15, 5), int16], Tensor[(5, 6, 6), float64], Tensor[(2, 15, 5), uint32], Tensor[(13, 3, 8), float64], Tensor[(5, 6, 6), float64], Tensor[(180), float64]) */
}

def @func_5131() -> (Tensor[(13, 12, 13), float64],) {
  %504 = @func_4924() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %505 = %504.0;
  (%505,)
}

def @func_6438() -> Tensor[(13, 12, 13), float64] {
  @func_6436() /* ty=Tensor[(13, 12, 13), float64] */
}

def @func_8752(%var_8720: uint16, %var_8721: Tensor[(6, 4, 1), uint16]) -> (Tensor[(6, 4, 1), uint16], Tensor[(6, 4, 1), float32]) {
  %506 = cast(%var_8720, dtype="uint16") /* ty=uint16 */;
  %507 = cast(%var_8721, dtype="uint16") /* ty=Tensor[(6, 4, 1), uint16] */;
  %508 = cast(%var_8721, dtype="float32") /* ty=Tensor[(6, 4, 1), float32] */;
  %509 = maximum(%506, %507) /* ty=Tensor[(6, 4, 1), uint16] */;
  %510 = log10(%508) /* ty=Tensor[(6, 4, 1), float32] */;
  (%509, %510)
}

def @func_10022(%var_10005: Tensor[(660), uint32], %var_10013: Tensor[(8, 216), float64]) -> (Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(99), float32], Tensor[(3, 3, 11), float32], Tensor[(4, 5, 7), float32], Tensor[(140), float32], Tensor[(660), uint32], Tensor[(13, 12, 13), float64], Tensor[(8, 216), float64], Tensor[(90), int8], Tensor[(648, 1), float64], Tensor[(1, 144), float32], Tensor[(4, 4, 13), float32]) {
  %511 = @func_5295() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %512 = cast(meta[relay.Constant][36] /* ty=Tensor[(99), float32] */, dtype="float32") /* ty=Tensor[(99), float32] */;
  %513 = cast(meta[relay.Constant][36] /* ty=Tensor[(99), float32] */, dtype="float32") /* ty=Tensor[(99), float32] */;
  %514 = reshape(%512, newshape=[99]) /* ty=Tensor[(99), float32] */;
  %515 = reshape(%513, newshape=[3, 3, 11]) /* ty=Tensor[(3, 3, 11), float32] */;
  %516 = @func_9726(%514, %515) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(99), float32], Tensor[(8, 4, 10), float32], Tensor[(320), float32], Tensor[(?, 4, 4), int16], Tensor[(4, 4, 13), float32], Tensor[(3, 3, 11), int8]) */;
  %517 = cast(meta[relay.Constant][36] /* ty=Tensor[(99), float32] */, dtype="float32") /* ty=Tensor[(99), float32] */;
  %518 = reshape(%517, newshape=[99]) /* ty=Tensor[(99), float32] */;
  %519 = @func_7756(%518) /* ty=(Tensor[(?, 4, 4), int16], Tensor[(3, 3, 11), float32], Tensor[(99), float32]) */;
  %520 = cast(meta[relay.Constant][37] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %521 = cast(%var_10005, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %522 = reshape(%520, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %523 = reshape(%521, newshape=[660]) /* ty=Tensor[(660), uint32] */;
  %524 = @func_5339(%522, %523) /* ty=(Tensor[(13, 12, 13), float32], Tensor[(4, 5, 7), float32], Tensor[(140), float32], Tensor[(660), uint32]) */;
  %525 = cast(%var_10013, dtype="float64") /* ty=Tensor[(8, 216), float64] */;
  %526 = cast(meta[relay.Constant][38] /* ty=Tensor[(90), int8] */, dtype="int8") /* ty=Tensor[(90), int8] */;
  %527 = cast(meta[relay.Constant][39] /* ty=Tensor[(648, 1), float64] */, dtype="float64") /* ty=Tensor[(648, 1), float64] */;
  %528 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 144), float32] */, dtype="float32") /* ty=Tensor[(1, 144), float32] */;
  %529 = reshape(%525, newshape=[1728]) /* ty=Tensor[(1728), float64] */;
  %530 = reshape(%526, newshape=[90]) /* ty=Tensor[(90), int8] */;
  %531 = reshape(%527, newshape=[648]) /* ty=Tensor[(648), float64] */;
  %532 = reshape(%528, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %533 = @func_8704(%529, %530, %531, %532) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(660), uint32], Tensor[(1728), float64], Tensor[(90), int8], Tensor[(25, 6), bool], Tensor[(2, 72), float32], Tensor[(648), float64], Tensor[(144), float32], Tensor[(25, 6), int16], Tensor[(25, 6), float64], Tensor[(180), float64], Tensor[(16), int16], Tensor[(13, 12, 13), float64]) */;
  %534 = %511.0;
  %535 = %516.0;
  %536 = %519.1;
  %537 = %524.1;
  %538 = %533.0;
  %539 = @func_7318() /* ty=Tensor[(4, 4, 13), float32] */;
  (%534, %535, meta[relay.Constant][36] /* ty=Tensor[(99), float32] */, %536, %537, meta[relay.Constant][37] /* ty=Tensor[(140), float32] */, %var_10005, %538, %var_10013, meta[relay.Constant][38] /* ty=Tensor[(90), int8] */, meta[relay.Constant][39] /* ty=Tensor[(648, 1), float64] */, meta[relay.Constant][40] /* ty=Tensor[(1, 144), float32] */, %539)
}

def @func_10928() -> (Tensor[(13, 12, 13), float64], Tensor[(660), float32], Tensor[(660), float32], Tensor[(180), float64], Tensor[(13, 12, 13), int32]) {
  %551 = fn () -> (Tensor[(13, 12, 13), float64], Tensor[(660), float32], Tensor[(660), float32], Tensor[(180), float64], Tensor[(13, 12, 13), int32]) {
    %540 = cast(meta[relay.Constant][41] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
    %541 = cast(meta[relay.Constant][42] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %542 = reshape(%540, newshape=[660]) /* ty=Tensor[(660), float32] */;
    %543 = reshape(%541, newshape=[1, 180]) /* ty=Tensor[(1, 180), float64] */;
    %544 = @func_7210(%542, %543) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(180), float64], Tensor[(660), float32], Tensor[(1, 180), float64], Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), float64]) */;
    %545 = @func_5835() /* ty=Tensor[(13, 12, 13), float64] */;
    %546 = cast(%545, dtype="float64") /* ty=Tensor[(13, 12, 13), float64] */;
    %547 = reshape(%546, newshape=[13, 12, 13]) /* ty=Tensor[(13, 12, 13), float64] */;
    %548 = @func_10588(%547) /* ty=(Tensor[(13, 12, 13), int32],) */;
    %549 = %544.2;
    %550 = %548.0;
    (%545, %549, meta[relay.Constant][41] /* ty=Tensor[(660), float32] */, meta[relay.Constant][42] /* ty=Tensor[(180), float64] */, %550)
  };
  %551() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(660), float32], Tensor[(660), float32], Tensor[(180), float64], Tensor[(13, 12, 13), int32]) */
}

def @func_10763() -> (Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), int32], Tensor[(13, 12, 13), float64]) {
  %552 = @func_7886() /* ty=(Tensor[(?, 4, 4), int16], Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) */;
  %553 = %552.2;
  %554 = cast(%553, dtype="float64") /* ty=Tensor[(13, 12, 13), float64] */;
  %555 = reshape(%554, newshape=[13, 12, 13]) /* ty=Tensor[(13, 12, 13), float64] */;
  %556 = @func_10588(%555) /* ty=(Tensor[(13, 12, 13), int32],) */;
  %557 = %556.0;
  %558 = @func_9428() /* ty=Tensor[(13, 12, 13), float64] */;
  (%553, %557, %558)
}

def @func_6724() -> Tensor[(16, 12, 11), float64] {
  %560 = fn () -> Tensor[(16, 12, 11), float64] {
    %559 = cast(meta[relay.Constant][43] /* ty=Tensor[(16, 12, 11), float64] */, dtype="float64") /* ty=Tensor[(16, 12, 11), float64] */;
    rsqrt(%559) /* ty=Tensor[(16, 12, 11), float64] */
  };
  %560() /* ty=Tensor[(16, 12, 11), float64] */
}

def @func_7120() -> Tensor[(4, 4, 13), float32] {
  @func_5745() /* ty=Tensor[(4, 4, 13), float32] */
}

def @func_8912() -> (Tensor[(?, 4, 4), float32], Tensor[(150), float64], Tensor[(5, 30), float64]) {
  @func_8910() /* ty=(Tensor[(?, 4, 4), float32], Tensor[(150), float64], Tensor[(5, 30), float64]) */
}

def @func_5342(%var_5340: Tensor[(140), float32], %var_5341: Tensor[(660), uint32]) -> (Tensor[(13, 12, 13), float32], Tensor[(4, 5, 7), float32], Tensor[(140), float32], Tensor[(660), uint32]) {
  %573 = fn (%var_5330: Tensor[(140), float32], %var_5331: Tensor[(660), uint32]) -> (Tensor[(13, 12, 13), float32], Tensor[(4, 5, 7), float32], Tensor[(140), float32], Tensor[(660), uint32]) {
    %561 = @func_5131() /* ty=(Tensor[(13, 12, 13), float64],) */;
    %562 = %561.0;
    %563 = cast(%562, dtype="float64") /* ty=Tensor[(13, 12, 13), float64] */;
    %564 = acos(%563) /* ty=Tensor[(13, 12, 13), float64] */;
    %565 = cast(%564, dtype="float32") /* ty=Tensor[(13, 12, 13), float32] */;
    %566 = cast(%var_5330, dtype="float32") /* ty=Tensor[(140), float32] */;
    %567 = cast(%var_5331, dtype="uint32") /* ty=Tensor[(660), uint32] */;
    %568 = reshape(%566, newshape=[4, 5, 7]) /* ty=Tensor[(4, 5, 7), float32] */;
    %569 = reshape(%567, newshape=[660]) /* ty=Tensor[(660), uint32] */;
    %570 = @func_5186(%568, %569) /* ty=(Tensor[(4, 5, 7), float32], Tensor[(150), float64], Tensor[(660), uint32], Tensor[(150), float64]) */;
    %571 = acosh(%565) /* ty=Tensor[(13, 12, 13), float32] */;
    %572 = %570.0;
    (%571, %572, %var_5330, %var_5331)
  };
  %573(%var_5340, %var_5341) /* ty=(Tensor[(13, 12, 13), float32], Tensor[(4, 5, 7), float32], Tensor[(140), float32], Tensor[(660), uint32]) */
}

def @func_9491() -> (Tensor[(13, 12, 13), float64],) {
  %576 = fn () -> (Tensor[(13, 12, 13), float64],) {
    %574 = @func_6339() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(99), float32]) */;
    %575 = %574.1;
    (%575,)
  };
  %576() /* ty=(Tensor[(13, 12, 13), float64],) */
}

def @func_214(%var_213: Tensor[(5, 6, 6), float64]) -> Tensor[(5, 6, 6), float64] {
  %578 = fn (%var_183: Tensor[(5, 6, 6), float64]) -> Tensor[(5, 6, 6), float64] {
    %577 = cast(%var_183, dtype="float64") /* ty=Tensor[(5, 6, 6), float64] */;
    tan(%577) /* ty=Tensor[(5, 6, 6), float64] */
  };
  %578(%var_213) /* ty=Tensor[(5, 6, 6), float64] */
}

def @func_10026(%var_10024: Tensor[(660), uint32], %var_10025: Tensor[(8, 216), float64]) -> (Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(99), float32], Tensor[(3, 3, 11), float32], Tensor[(4, 5, 7), float32], Tensor[(140), float32], Tensor[(660), uint32], Tensor[(13, 12, 13), float64], Tensor[(8, 216), float64], Tensor[(90), int8], Tensor[(648, 1), float64], Tensor[(1, 144), float32], Tensor[(4, 4, 13), float32]) {
  @func_10022(%var_10024, %var_10025) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(99), float32], Tensor[(3, 3, 11), float32], Tensor[(4, 5, 7), float32], Tensor[(140), float32], Tensor[(660), uint32], Tensor[(13, 12, 13), float64], Tensor[(8, 216), float64], Tensor[(90), int8], Tensor[(648, 1), float64], Tensor[(1, 144), float32], Tensor[(4, 4, 13), float32]) */
}

def @func_6316() -> (Tensor[(13, 12, 13), float64], Tensor[(2, 9, 5), bool], Tensor[(15, 6), int8], Tensor[(660), uint32], Tensor[(150), float64]) {
  %579 = @func_5131() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %580 = cast(meta[relay.Constant][44] /* ty=Tensor[(15, 6), int8] */, dtype="int8") /* ty=Tensor[(15, 6), int8] */;
  %581 = cast(meta[relay.Constant][45] /* ty=Tensor[(660), uint32] */, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %582 = cast(meta[relay.Constant][46] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %583 = reshape(%580, newshape=[2, 9, 5]) /* ty=Tensor[(2, 9, 5), int8] */;
  %584 = reshape(%581, newshape=[660]) /* ty=Tensor[(660), uint32] */;
  %585 = reshape(%582, newshape=[1, 150]) /* ty=Tensor[(1, 150), float64] */;
  %586 = @func_2306(%583, %584, %585) /* ty=(Tensor[(2, 9, 5), bool], Tensor[(660), uint32], Tensor[(?, 150), bool], Tensor[(2, 9, 5), float32]) */;
  %587 = %579.0;
  %588 = %586.0;
  (%587, %588, meta[relay.Constant][44] /* ty=Tensor[(15, 6), int8] */, meta[relay.Constant][45] /* ty=Tensor[(660), uint32] */, meta[relay.Constant][46] /* ty=Tensor[(150), float64] */)
}

def @func_8836(%var_8834: Tensor[(4, 4, 13), float32], %var_8835: Tensor[(140), float32]) -> (Tensor[(13, 12, 13), float64], Tensor[(4, 4, 13), float64], Tensor[(660), uint32], Tensor[(140), float32], Tensor[(660), uint32]) {
  @func_8832(%var_8834, %var_8835) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(4, 4, 13), float64], Tensor[(660), uint32], Tensor[(140), float32], Tensor[(660), uint32]) */
}

def @func_11376(%var_11371: Tensor[(4, 10, 14), float32]) -> (Tensor[(4, 10, 14), float32],) {
  %589 = cast(%var_11371, dtype="float32") /* ty=Tensor[(4, 10, 14), float32] */;
  %590 = log2(%589) /* ty=Tensor[(4, 10, 14), float32] */;
  (%590,)
}

def @func_10097(%var_10094: Tensor[(648), float64], %var_10095: Tensor[(144), float32], %var_10096: Tensor[(90), int8]) -> (Tensor[(99), float32], Tensor[(13, 12, 13), float64], Tensor[(110, 6), uint32], Tensor[(648), float64], Tensor[(144), float32], Tensor[(90), int8], Tensor[(180), float64]) {
  @func_10092(%var_10094, %var_10095, %var_10096) /* ty=(Tensor[(99), float32], Tensor[(13, 12, 13), float64], Tensor[(110, 6), uint32], Tensor[(648), float64], Tensor[(144), float32], Tensor[(90), int8], Tensor[(180), float64]) */
}

def @func_11092(%var_11090: Tensor[(14, 13, 13), float64]) -> (Tensor[(14, 13, 13), int8],) {
  @func_11089(%var_11090) /* ty=(Tensor[(14, 13, 13), int8],) */
}

def @func_6341() -> (Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(99), float32]) {
  @func_6339() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(99), float32]) */
}

def @func_9007() -> Tensor[(13, 12, 13), float64] {
  %591 = @func_6673() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(16, 12, 9), float32], Tensor[(288, 6), float64], Tensor[(90), int8], Tensor[(5, 6, 6), float64], Tensor[(13, 12, 13), float64], Tensor[(140), float32], Tensor[(70, 2), float32], Tensor[(5, 132), uint32], Tensor[(13, 12, 13), float64], Tensor[(75, 2), float64], Tensor[(4, 4, 13), float32], Tensor[(52, 4), float32], Tensor[(144), float32], Tensor[(75, 2), float64]) */;
  %591.0
}

def @func_9940() -> Tensor[(?, 4, 4), int16] {
  @func_9938() /* ty=Tensor[(?, 4, 4), int16] */
}

def @func_7473(%var_7444: Tensor[(10, 4, 3), float32]) -> (Tensor[(10, 4, 3), float32], Tensor[(75, 2), float64], Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(4, 4, 13), float32], Tensor[(16), int16]) {
  %592 = cast(%var_7444, dtype="float32") /* ty=Tensor[(10, 4, 3), float32] */;
  %593 = @func_6880() /* ty=(Tensor[(16, 12, 11), float64], Tensor[(13, 12, 13), float64], Tensor[(75, 2), float64]) */;
  %594 = @func_6826() /* ty=(Tensor[(?, 4, 4), float64], Tensor[(13, 12, 13), uint8], Tensor[(13, 12, 13), float64]) */;
  %595 = @func_6210() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), int16], Tensor[(16), int16]) */;
  %596 = @func_6210() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), int16], Tensor[(16), int16]) */;
  %597 = rsqrt(%592) /* ty=Tensor[(10, 4, 3), float32] */;
  %598 = %593.2;
  %599 = @func_6436() /* ty=Tensor[(13, 12, 13), float64] */;
  %600 = %594.2;
  %601 = %595.0;
  %602 = @func_5745() /* ty=Tensor[(4, 4, 13), float32] */;
  %603 = %596.2;
  (%597, %598, %599, %600, %601, %602, %603)
}

def @func_7888() -> (Tensor[(?, 4, 4), int16], Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) {
  @func_7886() /* ty=(Tensor[(?, 4, 4), int16], Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) */
}

def @func_2913(%var_2908: Tensor[(12, 12, 1), float32], %var_2909: Tensor[(12, 12, 11), float32], %var_2910: Tensor[(90), int8], %var_2911: Tensor[(110, 6), uint32], %var_2912: Tensor[(180), float64]) -> (Tensor[(12, 12, 11), bool], Tensor[(2, 9, 5), bool], Tensor[(90), int8], Tensor[(110, 6), uint32], Tensor[(150), float64], Tensor[(5, 6, 6), float64], Tensor[(180), float64], Tensor[(180), float64]) {
  @func_2906(%var_2908, %var_2909, %var_2910, %var_2911, %var_2912) /* ty=(Tensor[(12, 12, 11), bool], Tensor[(2, 9, 5), bool], Tensor[(90), int8], Tensor[(110, 6), uint32], Tensor[(150), float64], Tensor[(5, 6, 6), float64], Tensor[(180), float64], Tensor[(180), float64]) */
}

def @func_11414() -> (Tensor[(660), float32],) {
  %604 = @func_10927() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(660), float32], Tensor[(660), float32], Tensor[(180), float64], Tensor[(13, 12, 13), int32]) */;
  %605 = %604.1;
  (%605,)
}

def @func_8345(%var_8343: Tensor[(180), float64]) -> (Tensor[(75, 2), float64], Tensor[(5, 6, 6), float64], Tensor[(660), float32], Tensor[(180), float64]) {
  @func_8342(%var_8343) /* ty=(Tensor[(75, 2), float64], Tensor[(5, 6, 6), float64], Tensor[(660), float32], Tensor[(180), float64]) */
}

def @func_7476(%var_7474: Tensor[(10, 4, 3), float32]) -> (Tensor[(10, 4, 3), float32], Tensor[(75, 2), float64], Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(4, 4, 13), float32], Tensor[(16), int16]) {
  @func_7473(%var_7474) /* ty=(Tensor[(10, 4, 3), float32], Tensor[(75, 2), float64], Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(4, 4, 13), float32], Tensor[(16), int16]) */
}

def @func_8248() -> (Tensor[(16), int16],) {
  @func_8246() /* ty=(Tensor[(16), int16],) */
}

def @func_10867() -> (Tensor[(4, 4, 13), float32], Tensor[(13, 12, 13), int32], Tensor[(2028), float64]) {
  %606 = cast(meta[relay.Constant][47] /* ty=Tensor[(2028), float64] */, dtype="float64") /* ty=Tensor[(2028), float64] */;
  %607 = reshape(%606, newshape=[13, 12, 13]) /* ty=Tensor[(13, 12, 13), float64] */;
  %608 = @func_10588(%607) /* ty=(Tensor[(13, 12, 13), int32],) */;
  %609 = @func_5882() /* ty=Tensor[(4, 4, 13), float32] */;
  %610 = %608.0;
  (%609, %610, meta[relay.Constant][47] /* ty=Tensor[(2028), float64] */)
}

def @func_311(%var_285: Tensor[(11, 15, 4), float32], %var_293: Tensor[(180), float64]) -> (Tensor[(11, 15, 4), float32], Tensor[(5, 6, 6), float64], Tensor[(180), float64]) {
  %611 = cast(%var_285, dtype="float32") /* ty=Tensor[(11, 15, 4), float32] */;
  %612 = cast(%var_293, dtype="float64") /* ty=Tensor[(180), float64] */;
  %613 = reshape(%612, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), float64] */;
  %614 = atan(%611) /* ty=Tensor[(11, 15, 4), float32] */;
  %615 = @func_212(%613) /* ty=Tensor[(5, 6, 6), float64] */;
  (%614, %615, %var_293)
}

def @func_11292(%var_11271: Tensor[(660), uint32], %var_11272: Tensor[(150), float64]) -> (Tensor[(13, 12, 13), float64], Tensor[(?, 150), bool], Tensor[(660), uint32], Tensor[(150), float64], Tensor[(13, 12, 13), float64], Tensor[(90), int8], Tensor[(45, 2), float32], Tensor[(13, 12, 13), float64]) {
  %616 = @func_9925() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %617 = cast(meta[relay.Constant][48] /* ty=Tensor[(45, 2), int8] */, dtype="int8") /* ty=Tensor[(45, 2), int8] */;
  %618 = cast(%var_11271, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %619 = cast(%var_11272, dtype="float64") /* ty=Tensor[(150), float64] */;
  %620 = reshape(%617, newshape=[2, 9, 5]) /* ty=Tensor[(2, 9, 5), int8] */;
  %621 = reshape(%618, newshape=[660]) /* ty=Tensor[(660), uint32] */;
  %622 = reshape(%619, newshape=[1, 150]) /* ty=Tensor[(1, 150), float64] */;
  %623 = @func_2306(%620, %621, %622) /* ty=(Tensor[(2, 9, 5), bool], Tensor[(660), uint32], Tensor[(?, 150), bool], Tensor[(2, 9, 5), float32]) */;
  %624 = cast(meta[relay.Constant][48] /* ty=Tensor[(45, 2), int8] */, dtype="float32") /* ty=Tensor[(45, 2), float32] */;
  %625 = @func_7886() /* ty=(Tensor[(?, 4, 4), int16], Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) */;
  %626 = %616.0;
  %627 = %623.2;
  %628 = @func_6436() /* ty=Tensor[(13, 12, 13), float64] */;
  %629 = @func_8172() /* ty=Tensor[(90), int8] */;
  %630 = sin(%624) /* ty=Tensor[(45, 2), float32] */;
  %631 = %625.2;
  (%626, %627, %var_11271, %var_11272, %628, %629, %630, %631)
}

def @func_4477(%var_4476: Tensor[(12, 5, 12), int64]) -> (Tensor[(12, 5, 12), bool], Tensor[(9, 9, 8), float64], Tensor[(648), float64], Tensor[(144), float32], Tensor[(90), int8]) {
  %645 = fn (%var_4448: Tensor[(12, 5, 12), int64]) -> (Tensor[(12, 5, 12), bool], Tensor[(9, 9, 8), float64], Tensor[(648), float64], Tensor[(144), float32], Tensor[(90), int8]) {
    %632 = cast(%var_4448, dtype="bool") /* ty=Tensor[(12, 5, 12), bool] */;
    %633 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(12, 5, 12), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %634 = cast(meta[relay.Constant][49] /* ty=Tensor[(12, 5, 12), int64] */, dtype="bool") /* ty=Tensor[(12, 5, 12), bool] */;
    %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %636 = cast(meta[relay.Constant][50] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
    %637 = cast(meta[relay.Constant][51] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
    %638 = cast(meta[relay.Constant][52] /* ty=Tensor[(90), int8] */, dtype="int8") /* ty=Tensor[(90), int8] */;
    %639 = reshape(%636, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float64] */;
    %640 = reshape(%637, newshape=[2, 72]) /* ty=Tensor[(2, 72), float32] */;
    %641 = reshape(%638, newshape=[90]) /* ty=Tensor[(90), int8] */;
    %642 = @func_3471(%639, %640, %641) /* ty=(Tensor[(9, 9, 8), float64], Tensor[(110, 6), uint32], Tensor[(2, 72), float32], Tensor[(1584), float32], Tensor[(90), int8], Tensor[(660, 1), uint32], Tensor[(3, 60), float64]) */;
    %643 = less(%634, %635) /* ty=Tensor[(12, 5, 12), bool] */;
    %644 = %642.0;
    (%643, %644, meta[relay.Constant][50] /* ty=Tensor[(648), float64] */, meta[relay.Constant][51] /* ty=Tensor[(144), float32] */, meta[relay.Constant][52] /* ty=Tensor[(90), int8] */)
  };
  %645(%var_4476) /* ty=(Tensor[(12, 5, 12), bool], Tensor[(9, 9, 8), float64], Tensor[(648), float64], Tensor[(144), float32], Tensor[(90), int8]) */
}

def @func_9457() -> (Tensor[(4, 4, 13), float32],) {
  %646 = @func_5745() /* ty=Tensor[(4, 4, 13), float32] */;
  (%646,)
}

def @func_6330() -> (Tensor[(13, 12, 13), float64],) {
  @func_6328() /* ty=(Tensor[(13, 12, 13), float64],) */
}

def @func_10709() -> Tensor[(13, 12, 13), float64] {
  @func_10707() /* ty=Tensor[(13, 12, 13), float64] */
}

def @func_11065() -> Tensor[(13, 12, 13), float64] {
  %648 = fn () -> Tensor[(13, 12, 13), float64] {
    %647 = @func_8476() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) */;
    %647.1
  };
  %648() /* ty=Tensor[(13, 12, 13), float64] */
}

def @func_11077(%var_11076: Tensor[(7, 12, 6), int16]) -> Tensor[(7, 12, 6), bool] {
  %651 = fn (%var_11070: Tensor[(7, 12, 6), int16]) -> Tensor[(7, 12, 6), bool] {
    %649 = cast(meta[relay.Constant][53] /* ty=Tensor[(7, 1, 6), int16] */, dtype="bool") /* ty=Tensor[(7, 1, 6), bool] */;
    %650 = cast(%var_11070, dtype="bool") /* ty=Tensor[(7, 12, 6), bool] */;
    less_equal(%649, %650) /* ty=Tensor[(7, 12, 6), bool] */
  };
  %651(%var_11076) /* ty=Tensor[(7, 12, 6), bool] */
}

def @func_10559() -> (Tensor[(13, 12, 13), float64],) {
  %654 = fn () -> (Tensor[(13, 12, 13), float64],) {
    %652 = @func_9925() /* ty=(Tensor[(13, 12, 13), float64],) */;
    %653 = %652.0;
    (%653,)
  };
  %654() /* ty=(Tensor[(13, 12, 13), float64],) */
}

def @func_9258() -> (Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) {
  %655 = @func_6826() /* ty=(Tensor[(?, 4, 4), float64], Tensor[(13, 12, 13), uint8], Tensor[(13, 12, 13), float64]) */;
  %656 = @func_5295() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %657 = %655.2;
  %658 = %656.0;
  (%657, %658)
}

def @func_4660(%var_4617: Tensor[(4, 2, 16), int16], %var_4618: Tensor[(4, 2, 16), int16]) -> (Tensor[(4, 2, 16), bool], Tensor[(15, 4, 11), float32], Tensor[(660), uint32], Tensor[(15, 4, 11), float32], Tensor[(150), float64]) {
  %659 = cast(%var_4618, dtype="bool") /* ty=Tensor[(4, 2, 16), bool] */;
  %660 = shape_of(%var_4617, dtype="int32") /* ty=Tensor[(3), int32] */;
  %661 = cast(%var_4617, dtype="bool") /* ty=Tensor[(4, 2, 16), bool] */;
  %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %663 = cast(meta[relay.Constant][54] /* ty=Tensor[(660), uint32] */, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %664 = cast(meta[relay.Constant][55] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %665 = reshape(%663, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), uint32] */;
  %666 = reshape(%664, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %667 = @func_2017(%665, %666) /* ty=(Tensor[(180), float64], Tensor[(150), float64], Tensor[(180), float64], Tensor[(180), float64], Tensor[(15, 4, 11), float32]) */;
  %668 = cast(meta[relay.Constant][54] /* ty=Tensor[(660), uint32] */, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %669 = cast(meta[relay.Constant][55] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %670 = reshape(%668, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), uint32] */;
  %671 = reshape(%669, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %672 = @func_2017(%670, %671) /* ty=(Tensor[(180), float64], Tensor[(150), float64], Tensor[(180), float64], Tensor[(180), float64], Tensor[(15, 4, 11), float32]) */;
  %673 = cast(meta[relay.Constant][55] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %674 = equal(%661, %662) /* ty=Tensor[(4, 2, 16), bool] */;
  %675 = %667.4;
  %676 = %672.4;
  %677 = acosh(%673) /* ty=Tensor[(150), float64] */;
  (%674, %675, meta[relay.Constant][54] /* ty=Tensor[(660), uint32] */, %676, %677)
}

def @func_10490(%var_10488: Tensor[(75, 2), float64]) -> (Tensor[(75, 2), int16], Tensor[(150), float64], Tensor[(150), float64]) {
  @func_10487(%var_10488) /* ty=(Tensor[(75, 2), int16], Tensor[(150), float64], Tensor[(150), float64]) */
}

def @func_5601(%var_5586: Tensor[(660), float32], %var_5587: Tensor[(180), float64], %var_5592: Tensor[(2, 360), int64]) -> (Tensor[(10, 15, 8), float64], Tensor[(180), float64], Tensor[(660), float32], Tensor[(180), float64], Tensor[(660, 1), float32], Tensor[(13, 156), float64], Tensor[(2, 360), int64]) {
  %678 = cast(meta[relay.Constant][56] /* ty=Tensor[(10, 15, 8), float64] */, dtype="float64") /* ty=Tensor[(10, 15, 8), float64] */;
  %679 = cast(%var_5586, dtype="float32") /* ty=Tensor[(660), float32] */;
  %680 = cast(%var_5587, dtype="float64") /* ty=Tensor[(180), float64] */;
  %681 = reshape(%679, newshape=[11, 15, 4]) /* ty=Tensor[(11, 15, 4), float32] */;
  %682 = reshape(%680, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %683 = @func_311(%681, %682) /* ty=(Tensor[(11, 15, 4), float32], Tensor[(5, 6, 6), float64], Tensor[(180), float64]) */;
  %684 = cast(meta[relay.Constant][57] /* ty=Tensor[(13, 156), float64] */, dtype="float64") /* ty=Tensor[(13, 156), float64] */;
  %685 = cast(%var_5592, dtype="int64") /* ty=Tensor[(2, 360), int64] */;
  %686 = cast(%var_5586, dtype="float32") /* ty=Tensor[(660), float32] */;
  %687 = %683.2;
  %688 = cast(%687, dtype="float64") /* ty=Tensor[(180), float64] */;
  %689 = reshape(%684, newshape=[13, 12, 13]) /* ty=Tensor[(13, 12, 13), float64] */;
  %690 = reshape(%685, newshape=[720]) /* ty=Tensor[(720), int64] */;
  %691 = reshape(%686, newshape=[660, 1]) /* ty=Tensor[(660, 1), float32] */;
  %692 = reshape(%688, newshape=[90, 2]) /* ty=Tensor[(90, 2), float64] */;
  %693 = @func_5058(%689, %690, %691, %692) /* ty=(Tensor[(648), float64], Tensor[(720), int64], Tensor[(660, 1), float32], Tensor[(13, 3, 8), float32], Tensor[(11, 4, 15), uint16], Tensor[(90, 2), float64], Tensor[(13, 12, 13), uint32]) */;
  %694 = log10(%678) /* ty=Tensor[(10, 15, 8), float64] */;
  %695 = %693.2;
  (%694, %687, %var_5586, %var_5587, %695, meta[relay.Constant][57] /* ty=Tensor[(13, 156), float64] */, %var_5592)
}

def @func_10514() -> (Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) {
  %696 = @func_9925() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %697 = @func_7686() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) */;
  %698 = %696.0;
  %699 = %697.1;
  (%698, %699)
}

def @func_7759(%var_7757: Tensor[(99), float32]) -> (Tensor[(?, 4, 4), int16], Tensor[(3, 3, 11), float32], Tensor[(99), float32]) {
  @func_7756(%var_7757) /* ty=(Tensor[(?, 4, 4), int16], Tensor[(3, 3, 11), float32], Tensor[(99), float32]) */
}

def @func_10590(%var_10589: Tensor[(13, 12, 13), float64]) -> (Tensor[(13, 12, 13), int32],) {
  %707 = fn (%var_10567: Tensor[(13, 12, 13), float64]) -> (Tensor[(13, 12, 13), int32],) {
    %700 = @func_10514() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) */;
    %701 = %700.0;
    %702 = cast(%var_10567, dtype="int32") /* ty=Tensor[(13, 12, 13), int32] */;
    %703 = shape_of(%701, dtype="int32") /* ty=Tensor[(3), int32] */;
    %704 = cast(%701, dtype="int32") /* ty=Tensor[(13, 12, 13), int32] */;
    %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %706 = left_shift(%704, %705) /* ty=Tensor[(13, 12, 13), int32] */;
    (%706,)
  };
  %707(%var_10589) /* ty=(Tensor[(13, 12, 13), int32],) */
}

def @func_9514() -> (Tensor[(?, 4, 4), float32], Tensor[(13, 12, 13), float64]) {
  %708 = @func_8279() /* ty=Tensor[(?, 4, 4), float32] */;
  %709 = @func_5749() /* ty=Tensor[(13, 12, 13), float64] */;
  (%708, %709)
}

def @func_11465() -> Tensor[(13, 12, 13), float64] {
  %711 = fn () -> Tensor[(13, 12, 13), float64] {
    %710 = @func_11230() /* ty=(Tensor[(13, 12, 13), float64],) */;
    %710.0
  };
  %711() /* ty=Tensor[(13, 12, 13), float64] */
}

def @func_7517(%var_7513: Tensor[(11, 16, 15), uint16], %var_7514: Tensor[(11, 16, 15), uint16], %var_7515: Tensor[(90), int8], %var_7516: Tensor[(110, 6), uint32]) -> (Tensor[(11, 16, 15), uint16], Tensor[(4, 4, 13), float32], Tensor[(2, 9, 5), bool], Tensor[(144), float32], Tensor[(1584), float32], Tensor[(90), int8], Tensor[(110, 6), uint32], Tensor[(180), float64]) {
  %730 = fn (%var_7478: Tensor[(11, 16, 15), uint16], %var_7479: Tensor[(11, 16, 15), uint16], %var_7504: Tensor[(90), int8], %var_7505: Tensor[(110, 6), uint32]) -> (Tensor[(11, 16, 15), uint16], Tensor[(4, 4, 13), float32], Tensor[(2, 9, 5), bool], Tensor[(144), float32], Tensor[(1584), float32], Tensor[(90), int8], Tensor[(110, 6), uint32], Tensor[(180), float64]) {
    %712 = cast(%var_7479, dtype="uint16") /* ty=Tensor[(11, 16, 15), uint16] */;
    %713 = shape_of(%var_7478, dtype="int32") /* ty=Tensor[(3), int32] */;
    %714 = cast(%var_7478, dtype="uint16") /* ty=Tensor[(11, 16, 15), uint16] */;
    %715 = dyn.reshape(%712, %713, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %716 = cast(meta[relay.Constant][58] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
    %717 = cast(meta[relay.Constant][59] /* ty=Tensor[(1584), float32] */, dtype="float32") /* ty=Tensor[(1584), float32] */;
    %718 = cast(%var_7504, dtype="int8") /* ty=Tensor[(90), int8] */;
    %719 = cast(%var_7505, dtype="uint32") /* ty=Tensor[(110, 6), uint32] */;
    %720 = cast(meta[relay.Constant][60] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %721 = reshape(%716, newshape=[12, 12, 1]) /* ty=Tensor[(12, 12, 1), float32] */;
    %722 = reshape(%717, newshape=[12, 12, 11]) /* ty=Tensor[(12, 12, 11), float32] */;
    %723 = reshape(%718, newshape=[90]) /* ty=Tensor[(90), int8] */;
    %724 = reshape(%719, newshape=[110, 6]) /* ty=Tensor[(110, 6), uint32] */;
    %725 = reshape(%720, newshape=[180]) /* ty=Tensor[(180), float64] */;
    %726 = @func_2906(%721, %722, %723, %724, %725) /* ty=(Tensor[(12, 12, 11), bool], Tensor[(2, 9, 5), bool], Tensor[(90), int8], Tensor[(110, 6), uint32], Tensor[(150), float64], Tensor[(5, 6, 6), float64], Tensor[(180), float64], Tensor[(180), float64]) */;
    %727 = minimum(%714, %715) /* ty=Tensor[(11, 16, 15), uint16] */;
    %728 = @func_7120() /* ty=Tensor[(4, 4, 13), float32] */;
    %729 = %726.1;
    (%727, %728, %729, meta[relay.Constant][58] /* ty=Tensor[(144), float32] */, meta[relay.Constant][59] /* ty=Tensor[(1584), float32] */, %var_7504, %var_7505, meta[relay.Constant][60] /* ty=Tensor[(180), float64] */)
  };
  %730(%var_7513, %var_7514, %var_7515, %var_7516) /* ty=(Tensor[(11, 16, 15), uint16], Tensor[(4, 4, 13), float32], Tensor[(2, 9, 5), bool], Tensor[(144), float32], Tensor[(1584), float32], Tensor[(90), int8], Tensor[(110, 6), uint32], Tensor[(180), float64]) */
}

def @func_7319() -> Tensor[(4, 4, 13), float32] {
  %732 = fn () -> Tensor[(4, 4, 13), float32] {
    %731 = @func_5966() /* ty=(Tensor[(4, 4, 13), float32],) */;
    %731.0
  };
  %732() /* ty=Tensor[(4, 4, 13), float32] */
}

def @func_8316(%var_8314: Tensor[(5, 14, 1), float64]) -> (Tensor[(5, 14, ?), bool],) {
  @func_8313(%var_8314) /* ty=(Tensor[(5, 14, ?), bool],) */
}

def @func_6254() -> (Tensor[(?, 4, 4), int16],) {
  %735 = fn () -> (Tensor[(?, 4, 4), int16],) {
    %733 = @func_6210() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), int16], Tensor[(16), int16]) */;
    %734 = %733.1;
    (%734,)
  };
  %735() /* ty=(Tensor[(?, 4, 4), int16],) */
}

def @func_11123() -> (Tensor[(13, 12, 13), float64],) {
  %738 = fn () -> (Tensor[(13, 12, 13), float64],) {
    %736 = @func_9406() /* ty=(Tensor[(13, 12, 13), float64],) */;
    %737 = %736.0;
    (%737,)
  };
  %738() /* ty=(Tensor[(13, 12, 13), float64],) */
}

def @func_7174() -> (Tensor[(13, 12, 13), float64],) {
  @func_7172() /* ty=(Tensor[(13, 12, 13), float64],) */
}

def @func_4924() -> (Tensor[(13, 12, 13), float64],) {
  %739 = cast(meta[relay.Constant][61] /* ty=Tensor[(13, 12, 13), float64] */, dtype="float64") /* ty=Tensor[(13, 12, 13), float64] */;
  %740 = sin(%739) /* ty=Tensor[(13, 12, 13), float64] */;
  (%740,)
}

def @func_6149(%var_6146: Tensor[(4, 4, 13), float32], %var_6147: Tensor[(144), float32], %var_6148: Tensor[(1728), float64]) -> (Tensor[(4, 4, 13), int32], Tensor[(13, 12, 13), float64], Tensor[(144), float32], Tensor[(90), int8], Tensor[(180), float64], Tensor[(2, 9, 5), float32], Tensor[(150), float64], Tensor[(1728), float64], Tensor[(1728), float64], Tensor[(4, 4, 13), float32]) {
  %766 = fn (%var_6109: Tensor[(4, 4, 13), float32], %var_6119: Tensor[(144), float32], %var_6135: Tensor[(1728), float64]) -> (Tensor[(4, 4, 13), int32], Tensor[(13, 12, 13), float64], Tensor[(144), float32], Tensor[(90), int8], Tensor[(180), float64], Tensor[(2, 9, 5), float32], Tensor[(150), float64], Tensor[(1728), float64], Tensor[(1728), float64], Tensor[(4, 4, 13), float32]) {
    %741 = @func_5745() /* ty=Tensor[(4, 4, 13), float32] */;
    %742 = cast(%var_6109, dtype="int32") /* ty=Tensor[(4, 4, 13), int32] */;
    %743 = shape_of(%741, dtype="int32") /* ty=Tensor[(3), int32] */;
    %744 = cast(%741, dtype="int32") /* ty=Tensor[(4, 4, 13), int32] */;
    %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %746 = cast(%var_6119, dtype="float32") /* ty=Tensor[(144), float32] */;
    %747 = cast(meta[relay.Constant][62] /* ty=Tensor[(90), int8] */, dtype="int8") /* ty=Tensor[(90), int8] */;
    %748 = cast(meta[relay.Constant][63] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %749 = reshape(%746, newshape=[144]) /* ty=Tensor[(144), float32] */;
    %750 = reshape(%747, newshape=[90]) /* ty=Tensor[(90), int8] */;
    %751 = reshape(%748, newshape=[90, 2]) /* ty=Tensor[(90, 2), float64] */;
    %752 = @func_4947(%749, %750, %751) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(144), float32], Tensor[(90), int8], Tensor[(660), uint32], Tensor[(90, 2), float64], Tensor[(1584), bool]) */;
    %753 = cast(meta[relay.Constant][64] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
    %754 = reshape(%753, newshape=[150]) /* ty=Tensor[(150), float64] */;
    %755 = @func_6088(%754) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(2, 9, 5), float32], Tensor[(90), int8], Tensor[(660), uint32], Tensor[(150), float64]) */;
    %756 = cast(%var_6135, dtype="float64") /* ty=Tensor[(1728), float64] */;
    %757 = cast(meta[relay.Constant][64] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
    %758 = reshape(%756, newshape=[1728]) /* ty=Tensor[(1728), float64] */;
    %759 = reshape(%757, newshape=[150]) /* ty=Tensor[(150), float64] */;
    %760 = @func_5512(%758, %759) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(16, 12, 9), float32], Tensor[(1728), float64], Tensor[(90), int8], Tensor[(150), float64]) */;
    %761 = bitwise_xor(%744, %745) /* ty=Tensor[(4, 4, 13), int32] */;
    %762 = %752.0;
    %763 = %755.1;
    %764 = %760.3;
    %765 = @func_5745() /* ty=Tensor[(4, 4, 13), float32] */;
    (%761, %762, %var_6119, meta[relay.Constant][62] /* ty=Tensor[(90), int8] */, meta[relay.Constant][63] /* ty=Tensor[(180), float64] */, %763, meta[relay.Constant][64] /* ty=Tensor[(150), float64] */, %764, %var_6135, %765)
  };
  %766(%var_6146, %var_6147, %var_6148) /* ty=(Tensor[(4, 4, 13), int32], Tensor[(13, 12, 13), float64], Tensor[(144), float32], Tensor[(90), int8], Tensor[(180), float64], Tensor[(2, 9, 5), float32], Tensor[(150), float64], Tensor[(1728), float64], Tensor[(1728), float64], Tensor[(4, 4, 13), float32]) */
}

def @func_5750() -> Tensor[(13, 12, 13), float64] {
  %768 = fn () -> Tensor[(13, 12, 13), float64] {
    %767 = @func_4924() /* ty=(Tensor[(13, 12, 13), float64],) */;
    %767.0
  };
  %768() /* ty=Tensor[(13, 12, 13), float64] */
}

def @func_9437() -> Tensor[(13, 12, 13), float64] {
  @func_5749() /* ty=Tensor[(13, 12, 13), float64] */
}

def @func_7106() -> (Tensor[(4, 4, 13), float32],) {
  %770 = fn () -> (Tensor[(4, 4, 13), float32],) {
    %769 = @func_5882() /* ty=Tensor[(4, 4, 13), float32] */;
    (%769,)
  };
  %770() /* ty=(Tensor[(4, 4, 13), float32],) */
}

def @func_8563() -> (Tensor[(13, 12, 13), float64],) {
  %773 = fn () -> (Tensor[(13, 12, 13), float64],) {
    %771 = @func_5131() /* ty=(Tensor[(13, 12, 13), float64],) */;
    %772 = %771.0;
    (%772,)
  };
  %773() /* ty=(Tensor[(13, 12, 13), float64],) */
}

def @func_9118(%var_9117: Tensor[(99), float32]) -> (Tensor[(12, 15, 7), float32], Tensor[(3, 3, 11), float32], Tensor[(99), float32]) {
  %780 = fn (%var_9103: Tensor[(99), float32]) -> (Tensor[(12, 15, 7), float32], Tensor[(3, 3, 11), float32], Tensor[(99), float32]) {
    %774 = cast(meta[relay.Constant][65] /* ty=Tensor[(12, 15, 7), float32] */, dtype="float32") /* ty=Tensor[(12, 15, 7), float32] */;
    %775 = cast(%var_9103, dtype="float32") /* ty=Tensor[(99), float32] */;
    %776 = reshape(%775, newshape=[99]) /* ty=Tensor[(99), float32] */;
    %777 = @func_5384(%776) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(3, 3, 11), float32], Tensor[(99), float32]) */;
    %778 = acos(%774) /* ty=Tensor[(12, 15, 7), float32] */;
    %779 = %777.1;
    (%778, %779, %var_9103)
  };
  %780(%var_9117) /* ty=(Tensor[(12, 15, 7), float32], Tensor[(3, 3, 11), float32], Tensor[(99), float32]) */
}

def @func_6554() -> (Tensor[(13, 12, 13), float64],) {
  %783 = fn () -> (Tensor[(13, 12, 13), float64],) {
    %781 = @func_6210() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), int16], Tensor[(16), int16]) */;
    %782 = %781.0;
    (%782,)
  };
  %783() /* ty=(Tensor[(13, 12, 13), float64],) */
}

def @func_5814(%var_5812: Tensor[(660), float32]) -> (Tensor[(13, 12, 13), float64], Tensor[(5, 6, 6), float64], Tensor[(660), float32], Tensor[(180, 1), float32], Tensor[(140), float32], Tensor[(140), float32], Tensor[(13, 3, 8), float64], Tensor[(150), float64]) {
  @func_5811(%var_5812) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(5, 6, 6), float64], Tensor[(660), float32], Tensor[(180, 1), float32], Tensor[(140), float32], Tensor[(140), float32], Tensor[(13, 3, 8), float64], Tensor[(150), float64]) */
}

def @func_7231() -> Tensor[(13, 12, 13), float64] {
  %785 = fn () -> Tensor[(13, 12, 13), float64] {
    %784 = @func_6826() /* ty=(Tensor[(?, 4, 4), float64], Tensor[(13, 12, 13), uint8], Tensor[(13, 12, 13), float64]) */;
    %784.2
  };
  %785() /* ty=Tensor[(13, 12, 13), float64] */
}

def @func_8756(%var_8754: uint16, %var_8755: Tensor[(6, 4, 1), uint16]) -> (Tensor[(6, 4, 1), uint16], Tensor[(6, 4, 1), float32]) {
  @func_8752(%var_8754, %var_8755) /* ty=(Tensor[(6, 4, 1), uint16], Tensor[(6, 4, 1), float32]) */
}

def @func_9408() -> (Tensor[(13, 12, 13), float64],) {
  @func_9406() /* ty=(Tensor[(13, 12, 13), float64],) */
}

def @func_10765() -> (Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), int32], Tensor[(13, 12, 13), float64]) {
  @func_10763() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), int32], Tensor[(13, 12, 13), float64]) */
}

def @func_10092(%var_10058: Tensor[(648), float64], %var_10059: Tensor[(144), float32], %var_10060: Tensor[(90), int8]) -> (Tensor[(99), float32], Tensor[(13, 12, 13), float64], Tensor[(110, 6), uint32], Tensor[(648), float64], Tensor[(144), float32], Tensor[(90), int8], Tensor[(180), float64]) {
  %786 = @func_9630() /* ty=(Tensor[(99), float32], Tensor[(99), float32], Tensor[(13, 12, 13), float64]) */;
  %787 = @func_7172() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %788 = cast(%var_10058, dtype="float64") /* ty=Tensor[(648), float64] */;
  %789 = cast(%var_10059, dtype="float32") /* ty=Tensor[(144), float32] */;
  %790 = cast(%var_10060, dtype="int8") /* ty=Tensor[(90), int8] */;
  %791 = reshape(%788, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float64] */;
  %792 = reshape(%789, newshape=[2, 72]) /* ty=Tensor[(2, 72), float32] */;
  %793 = reshape(%790, newshape=[90]) /* ty=Tensor[(90), int8] */;
  %794 = @func_3471(%791, %792, %793) /* ty=(Tensor[(9, 9, 8), float64], Tensor[(110, 6), uint32], Tensor[(2, 72), float32], Tensor[(1584), float32], Tensor[(90), int8], Tensor[(660, 1), uint32], Tensor[(3, 60), float64]) */;
  %795 = %794.1;
  %796 = cast(%795, dtype="float32") /* ty=Tensor[(110, 6), float32] */;
  %797 = reshape(%796, newshape=[660]) /* ty=Tensor[(660), float32] */;
  %798 = @func_680(%797) /* ty=(Tensor[(13, 3, 8), float64], Tensor[(180), float64], Tensor[(660), float32], Tensor[(180), float64]) */;
  %799 = %786.0;
  %800 = %787.0;
  %801 = %798.3;
  (%799, %800, %795, %var_10058, %var_10059, %var_10060, %801)
}

def @func_5966() -> (Tensor[(4, 4, 13), float32],) {
  %802 = @func_5882() /* ty=Tensor[(4, 4, 13), float32] */;
  (%802,)
}

def @func_9938() -> Tensor[(?, 4, 4), int16] {
  %803 = @func_7886() /* ty=(Tensor[(?, 4, 4), int16], Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) */;
  %803.0
}

def @func_9580() -> Tensor[(13, 12, 13), float64] {
  %807 = fn () -> Tensor[(13, 12, 13), float64] {
    %804 = @func_8138() /* ty=(Tensor[(4, 4, 13), float32], Tensor[(13, 12, 13), float64]) */;
    %805 = %804.1;
    %806 = cast(%805, dtype="float64") /* ty=Tensor[(13, 12, 13), float64] */;
    sigmoid(%806) /* ty=Tensor[(13, 12, 13), float64] */
  };
  %807() /* ty=Tensor[(13, 12, 13), float64] */
}

def @func_7837(%var_7835: Tensor[(6, 8, 5), uint16], %var_7836: Tensor[(6, 8, 5), uint16]) -> (Tensor[(6, 8, 5), bool], Tensor[(13, 12, 13), float64], Tensor[(4, 4, 13), float32]) {
  @func_7833(%var_7835, %var_7836) /* ty=(Tensor[(6, 8, 5), bool], Tensor[(13, 12, 13), float64], Tensor[(4, 4, 13), float32]) */
}

def @func_5264(%var_5202: Tensor[(99), float32], %var_5205: Tensor[(1, 16), int16]) -> (Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), int16], Tensor[(1, 16), int16], Tensor[(2, 9, 5), bool], Tensor[(90), int8], Tensor[(660), uint32], Tensor[(150), float64], Tensor[(3, 3, 11), float32], Tensor[(90), int8], Tensor[(144), float32], Tensor[(4, 396), float32], Tensor[(180), float64]) {
  %808 = @func_5131() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %809 = cast(%var_5205, dtype="int16") /* ty=Tensor[(1, 16), int16] */;
  %810 = reshape(%809, newshape=[1, 4, 4]) /* ty=Tensor[(1, 4, 4), int16] */;
  %811 = @func_4315(%810) /* ty=(Tensor[(?, 4, 4), int16],) */;
  %812 = cast(meta[relay.Constant][66] /* ty=Tensor[(90), int8] */, dtype="int8") /* ty=Tensor[(90), int8] */;
  %813 = cast(meta[relay.Constant][67] /* ty=Tensor[(660), uint32] */, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %814 = cast(meta[relay.Constant][68] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %815 = reshape(%812, newshape=[2, 9, 5]) /* ty=Tensor[(2, 9, 5), int8] */;
  %816 = reshape(%813, newshape=[660]) /* ty=Tensor[(660), uint32] */;
  %817 = reshape(%814, newshape=[1, 150]) /* ty=Tensor[(1, 150), float64] */;
  %818 = @func_2306(%815, %816, %817) /* ty=(Tensor[(2, 9, 5), bool], Tensor[(660), uint32], Tensor[(?, 150), bool], Tensor[(2, 9, 5), float32]) */;
  %819 = cast(%var_5202, dtype="float32") /* ty=Tensor[(99), float32] */;
  %820 = reshape(%819, newshape=[3, 3, 11]) /* ty=Tensor[(3, 3, 11), float32] */;
  %821 = @func_4349(%820) /* ty=(Tensor[(3, 3, 11), float32],) */;
  %822 = %821.0;
  %823 = cast(%var_5202, dtype="float32") /* ty=Tensor[(99), float32] */;
  %824 = shape_of(%822, dtype="int32") /* ty=Tensor[(3), int32] */;
  %825 = cast(%822, dtype="float32") /* ty=Tensor[(3, 3, 11), float32] */;
  %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %827 = cast(meta[relay.Constant][69] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %828 = cast(meta[relay.Constant][70] /* ty=Tensor[(4, 396), float32] */, dtype="float32") /* ty=Tensor[(4, 396), float32] */;
  %829 = cast(meta[relay.Constant][66] /* ty=Tensor[(90), int8] */, dtype="int8") /* ty=Tensor[(90), int8] */;
  %830 = cast(meta[relay.Constant][67] /* ty=Tensor[(660), uint32] */, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %831 = cast(meta[relay.Constant][71] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %832 = reshape(%827, newshape=[12, 12, 1]) /* ty=Tensor[(12, 12, 1), float32] */;
  %833 = reshape(%828, newshape=[12, 12, 11]) /* ty=Tensor[(12, 12, 11), float32] */;
  %834 = reshape(%829, newshape=[90]) /* ty=Tensor[(90), int8] */;
  %835 = reshape(%830, newshape=[110, 6]) /* ty=Tensor[(110, 6), uint32] */;
  %836 = reshape(%831, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %837 = @func_2906(%832, %833, %834, %835, %836) /* ty=(Tensor[(12, 12, 11), bool], Tensor[(2, 9, 5), bool], Tensor[(90), int8], Tensor[(110, 6), uint32], Tensor[(150), float64], Tensor[(5, 6, 6), float64], Tensor[(180), float64], Tensor[(180), float64]) */;
  %838 = %808.0;
  %839 = %811.0;
  %840 = %818.0;
  %841 = floor_mod(%825, %826) /* ty=Tensor[(3, 3, 11), float32] */;
  %842 = %837.2;
  (%838, %839, %var_5205, %840, meta[relay.Constant][66] /* ty=Tensor[(90), int8] */, meta[relay.Constant][67] /* ty=Tensor[(660), uint32] */, meta[relay.Constant][68] /* ty=Tensor[(150), float64] */, %841, %842, meta[relay.Constant][69] /* ty=Tensor[(144), float32] */, meta[relay.Constant][70] /* ty=Tensor[(4, 396), float32] */, meta[relay.Constant][71] /* ty=Tensor[(180), float64] */)
}

def @func_7833(%var_7777: Tensor[(6, 8, 5), uint16], %var_7778: Tensor[(6, 8, 5), uint16]) -> (Tensor[(6, 8, 5), bool], Tensor[(13, 12, 13), float64], Tensor[(4, 4, 13), float32]) {
  %843 = cast(%var_7778, dtype="bool") /* ty=Tensor[(6, 8, 5), bool] */;
  %844 = shape_of(%var_7777, dtype="int32") /* ty=Tensor[(3), int32] */;
  %845 = cast(%var_7777, dtype="bool") /* ty=Tensor[(6, 8, 5), bool] */;
  %846 = dyn.reshape(%843, %844, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %847 = @func_7172() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %848 = @func_5966() /* ty=(Tensor[(4, 4, 13), float32],) */;
  %849 = less_equal(%845, %846) /* ty=Tensor[(6, 8, 5), bool] */;
  %850 = %847.0;
  %851 = %848.0;
  (%849, %850, %851)
}

def @func_7213(%var_7211: Tensor[(660), float32], %var_7212: Tensor[(1, 180), float64]) -> (Tensor[(13, 12, 13), float64], Tensor[(180), float64], Tensor[(660), float32], Tensor[(1, 180), float64], Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), float64]) {
  %863 = fn (%var_7198: Tensor[(660), float32], %var_7199: Tensor[(1, 180), float64]) -> (Tensor[(13, 12, 13), float64], Tensor[(180), float64], Tensor[(660), float32], Tensor[(1, 180), float64], Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), float64]) {
    %852 = cast(%var_7198, dtype="float32") /* ty=Tensor[(660), float32] */;
    %853 = cast(%var_7199, dtype="float64") /* ty=Tensor[(1, 180), float64] */;
    %854 = reshape(%852, newshape=[11, 15, 4]) /* ty=Tensor[(11, 15, 4), float32] */;
    %855 = reshape(%853, newshape=[180]) /* ty=Tensor[(180), float64] */;
    %856 = @func_311(%854, %855) /* ty=(Tensor[(11, 15, 4), float32], Tensor[(5, 6, 6), float64], Tensor[(180), float64]) */;
    %857 = @func_4924() /* ty=(Tensor[(13, 12, 13), float64],) */;
    %858 = @func_6826() /* ty=(Tensor[(?, 4, 4), float64], Tensor[(13, 12, 13), uint8], Tensor[(13, 12, 13), float64]) */;
    %859 = @func_5835() /* ty=Tensor[(13, 12, 13), float64] */;
    %860 = %856.2;
    %861 = %857.0;
    %862 = %858.0;
    (%859, %860, %var_7198, %var_7199, %861, %862)
  };
  %863(%var_7211, %var_7212) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(180), float64], Tensor[(660), float32], Tensor[(1, 180), float64], Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), float64]) */
}

def @func_7557() -> (Tensor[(4, 4, 13), float64], Tensor[(75, 2), float64]) {
  %869 = fn () -> (Tensor[(4, 4, 13), float64], Tensor[(75, 2), float64]) {
    %864 = @func_5745() /* ty=Tensor[(4, 4, 13), float32] */;
    %865 = cast(%864, dtype="float64") /* ty=Tensor[(4, 4, 13), float64] */;
    %866 = @func_6880() /* ty=(Tensor[(16, 12, 11), float64], Tensor[(13, 12, 13), float64], Tensor[(75, 2), float64]) */;
    %867 = asinh(%865) /* ty=Tensor[(4, 4, 13), float64] */;
    %868 = %866.2;
    (%867, %868)
  };
  %869() /* ty=(Tensor[(4, 4, 13), float64], Tensor[(75, 2), float64]) */
}

def @func_10944() -> (Tensor[(13, 12, 13), float64],) {
  %870 = @func_7230() /* ty=Tensor[(13, 12, 13), float64] */;
  (%870,)
}

def @func_8530() -> (Tensor[(4, 4, 13), float32], Tensor[(13, 12, 13), float64]) {
  @func_8528() /* ty=(Tensor[(4, 4, 13), float32], Tensor[(13, 12, 13), float64]) */
}

def @func_1888(%var_1771: Tensor[(2, 15, 5), float64], %var_1800: Tensor[(660), float32], %var_1801: Tensor[(180), float64]) -> (Tensor[(180), float64], Tensor[(660), float32], Tensor[(180), float64], Tensor[(2, 15, 5), int16], Tensor[(5, 6, 6), float64], Tensor[(2, 15, 5), uint32], Tensor[(13, 3, 8), float64], Tensor[(5, 6, 6), float64], Tensor[(180), float64]) {
  %871 = cast(%var_1800, dtype="float32") /* ty=Tensor[(660), float32] */;
  %872 = cast(%var_1801, dtype="float64") /* ty=Tensor[(180), float64] */;
  %873 = reshape(%871, newshape=[11, 15, 4]) /* ty=Tensor[(11, 15, 4), float32] */;
  %874 = reshape(%872, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %875 = @func_311(%873, %874) /* ty=(Tensor[(11, 15, 4), float32], Tensor[(5, 6, 6), float64], Tensor[(180), float64]) */;
  %876 = cast(%var_1771, dtype="float64") /* ty=Tensor[(2, 15, 5), float64] */;
  %877 = sigmoid(%876) /* ty=Tensor[(2, 15, 5), float64] */;
  %878 = cast(meta[relay.Constant][72] /* ty=Tensor[(2, 15, 5), float64] */, dtype="int16") /* ty=Tensor[(2, 15, 5), int16] */;
  %879 = shape_of(%877, dtype="int32") /* ty=Tensor[(3), int32] */;
  %880 = cast(%877, dtype="int16") /* ty=Tensor[(2, 15, 5), int16] */;
  %881 = dyn.reshape(%878, %879, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %882 = %875.2;
  %883 = cast(%882, dtype="float64") /* ty=Tensor[(180), float64] */;
  %884 = reshape(%883, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), float64] */;
  %885 = cast(%877, dtype="float32") /* ty=Tensor[(2, 15, 5), float32] */;
  %886 = rsqrt(%885) /* ty=Tensor[(2, 15, 5), float32] */;
  %887 = cast(%877, dtype="uint32") /* ty=Tensor[(2, 15, 5), uint32] */;
  %888 = shape_of(%886, dtype="int32") /* ty=Tensor[(3), int32] */;
  %889 = cast(%886, dtype="uint32") /* ty=Tensor[(2, 15, 5), uint32] */;
  %890 = dyn.reshape(%887, %888, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %891 = cast(%var_1800, dtype="float32") /* ty=Tensor[(660), float32] */;
  %892 = reshape(%891, newshape=[660]) /* ty=Tensor[(660), float32] */;
  %893 = @func_680(%892) /* ty=(Tensor[(13, 3, 8), float64], Tensor[(180), float64], Tensor[(660), float32], Tensor[(180), float64]) */;
  %894 = cast(%var_1800, dtype="float32") /* ty=Tensor[(660), float32] */;
  %895 = cast(%882, dtype="float64") /* ty=Tensor[(180), float64] */;
  %896 = reshape(%894, newshape=[11, 4, 15]) /* ty=Tensor[(11, 4, 15), float32] */;
  %897 = reshape(%895, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %898 = @func_488(%896, %897) /* ty=(Tensor[(5, 6, 6), float64], Tensor[(180), float64], Tensor[(11, 4, 15), uint16], Tensor[(5, 6, 6), float64]) */;
  %899 = cast(%var_1800, dtype="float32") /* ty=Tensor[(660), float32] */;
  %900 = @func_212(%884) /* ty=Tensor[(5, 6, 6), float64] */;
  %901 = cast(%900, dtype="float64") /* ty=Tensor[(5, 6, 6), float64] */;
  %902 = reshape(%899, newshape=[11, 15, 4]) /* ty=Tensor[(11, 15, 4), float32] */;
  %903 = reshape(%901, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %904 = @func_311(%902, %903) /* ty=(Tensor[(11, 15, 4), float32], Tensor[(5, 6, 6), float64], Tensor[(180), float64]) */;
  %905 = bitwise_and(%880, %881) /* ty=Tensor[(2, 15, 5), int16] */;
  %906 = minimum(%889, %890) /* ty=Tensor[(2, 15, 5), uint32] */;
  %907 = %893.0;
  %908 = %898.3;
  %909 = %904.2;
  (%882, %var_1800, %var_1801, %905, %900, %906, %907, %908, %909)
}

def @func_5189(%var_5187: Tensor[(4, 5, 7), float32], %var_5188: Tensor[(660), uint32]) -> (Tensor[(4, 5, 7), float32], Tensor[(150), float64], Tensor[(660), uint32], Tensor[(150), float64]) {
  %918 = fn (%var_5179: Tensor[(4, 5, 7), float32], %var_5183: Tensor[(660), uint32]) -> (Tensor[(4, 5, 7), float32], Tensor[(150), float64], Tensor[(660), uint32], Tensor[(150), float64]) {
    %910 = cast(%var_5179, dtype="float32") /* ty=Tensor[(4, 5, 7), float32] */;
    %911 = cast(%var_5183, dtype="uint32") /* ty=Tensor[(660), uint32] */;
    %912 = cast(meta[relay.Constant][73] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
    %913 = reshape(%911, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), uint32] */;
    %914 = reshape(%912, newshape=[150]) /* ty=Tensor[(150), float64] */;
    %915 = @func_2017(%913, %914) /* ty=(Tensor[(180), float64], Tensor[(150), float64], Tensor[(180), float64], Tensor[(180), float64], Tensor[(15, 4, 11), float32]) */;
    %916 = log(%910) /* ty=Tensor[(4, 5, 7), float32] */;
    %917 = %915.1;
    (%916, %917, %var_5183, meta[relay.Constant][73] /* ty=Tensor[(150), float64] */)
  };
  %918(%var_5187, %var_5188) /* ty=(Tensor[(4, 5, 7), float32], Tensor[(150), float64], Tensor[(660), uint32], Tensor[(150), float64]) */
}

def @func_682(%var_681: Tensor[(660), float32]) -> (Tensor[(13, 3, 8), float64], Tensor[(180), float64], Tensor[(660), float32], Tensor[(180), float64]) {
  %927 = fn (%var_674: Tensor[(660), float32]) -> (Tensor[(13, 3, 8), float64], Tensor[(180), float64], Tensor[(660), float32], Tensor[(180), float64]) {
    %919 = cast(meta[relay.Constant][74] /* ty=Tensor[(13, 3, 8), float64] */, dtype="float64") /* ty=Tensor[(13, 3, 8), float64] */;
    %920 = cast(%var_674, dtype="float32") /* ty=Tensor[(660), float32] */;
    %921 = cast(meta[relay.Constant][75] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %922 = reshape(%920, newshape=[11, 15, 4]) /* ty=Tensor[(11, 15, 4), float32] */;
    %923 = reshape(%921, newshape=[180]) /* ty=Tensor[(180), float64] */;
    %924 = @func_311(%922, %923) /* ty=(Tensor[(11, 15, 4), float32], Tensor[(5, 6, 6), float64], Tensor[(180), float64]) */;
    %925 = exp(%919) /* ty=Tensor[(13, 3, 8), float64] */;
    %926 = %924.2;
    (%925, %926, %var_674, meta[relay.Constant][75] /* ty=Tensor[(180), float64] */)
  };
  %927(%var_681) /* ty=(Tensor[(13, 3, 8), float64], Tensor[(180), float64], Tensor[(660), float32], Tensor[(180), float64]) */
}

def @func_2017(%var_1984: Tensor[(15, 4, 11), uint32], %var_2000: Tensor[(150), float64]) -> (Tensor[(180), float64], Tensor[(150), float64], Tensor[(180), float64], Tensor[(180), float64], Tensor[(15, 4, 11), float32]) {
  %928 = cast(%var_2000, dtype="float64") /* ty=Tensor[(150), float64] */;
  %929 = cast(meta[relay.Constant][76] /* ty=Tensor[(15, 4, 11), uint32] */, dtype="float32") /* ty=Tensor[(15, 4, 11), float32] */;
  %930 = cast(meta[relay.Constant][77] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %931 = reshape(%928, newshape=[2, 15, 5]) /* ty=Tensor[(2, 15, 5), float64] */;
  %932 = reshape(%929, newshape=[660]) /* ty=Tensor[(660), float32] */;
  %933 = reshape(%930, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %934 = @func_1888(%931, %932, %933) /* ty=(Tensor[(180), float64], Tensor[(660), float32], Tensor[(180), float64], Tensor[(2, 15, 5), int16], Tensor[(5, 6, 6), float64], Tensor[(2, 15, 5), uint32], Tensor[(13, 3, 8), float64], Tensor[(5, 6, 6), float64], Tensor[(180), float64]) */;
  %935 = cast(%var_2000, dtype="float64") /* ty=Tensor[(150), float64] */;
  %936 = cast(meta[relay.Constant][76] /* ty=Tensor[(15, 4, 11), uint32] */, dtype="float32") /* ty=Tensor[(15, 4, 11), float32] */;
  %937 = cast(meta[relay.Constant][77] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %938 = reshape(%935, newshape=[2, 15, 5]) /* ty=Tensor[(2, 15, 5), float64] */;
  %939 = reshape(%936, newshape=[660]) /* ty=Tensor[(660), float32] */;
  %940 = reshape(%937, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %941 = @func_1888(%938, %939, %940) /* ty=(Tensor[(180), float64], Tensor[(660), float32], Tensor[(180), float64], Tensor[(2, 15, 5), int16], Tensor[(5, 6, 6), float64], Tensor[(2, 15, 5), uint32], Tensor[(13, 3, 8), float64], Tensor[(5, 6, 6), float64], Tensor[(180), float64]) */;
  %942 = cast(meta[relay.Constant][76] /* ty=Tensor[(15, 4, 11), uint32] */, dtype="bool") /* ty=Tensor[(15, 4, 11), bool] */;
  %943 = shape_of(%var_1984, dtype="int32") /* ty=Tensor[(3), int32] */;
  %944 = cast(%var_1984, dtype="bool") /* ty=Tensor[(15, 4, 11), bool] */;
  %945 = dyn.reshape(%942, %943, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %946 = greater(%944, %945) /* ty=Tensor[(15, 4, 11), bool] */;
  %947 = cast(%946, dtype="float32") /* ty=Tensor[(15, 4, 11), float32] */;
  %948 = %934.0;
  %949 = %941.0;
  %950 = sigmoid(%947) /* ty=Tensor[(15, 4, 11), float32] */;
  (%948, %var_2000, meta[relay.Constant][77] /* ty=Tensor[(180), float64] */, %949, %950)
}

def @func_11218(%var_11216: Tensor[(3, 11, 12), int8], %var_11217: Tensor[(3, 11, 12), int8]) -> (Tensor[(3, 11, 12), bool], Tensor[(3, 11, 12), float64]) {
  %958 = fn (%var_11205: Tensor[(3, 11, 12), int8], %var_11206: Tensor[(3, 11, 12), int8]) -> (Tensor[(3, 11, 12), bool], Tensor[(3, 11, 12), float64]) {
    %951 = cast(%var_11206, dtype="bool") /* ty=Tensor[(3, 11, 12), bool] */;
    %952 = shape_of(%var_11205, dtype="int32") /* ty=Tensor[(3), int32] */;
    %953 = cast(%var_11205, dtype="bool") /* ty=Tensor[(3, 11, 12), bool] */;
    %954 = dyn.reshape(%951, %952, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %955 = cast(%var_11205, dtype="float64") /* ty=Tensor[(3, 11, 12), float64] */;
    %956 = less_equal(%953, %954) /* ty=Tensor[(3, 11, 12), bool] */;
    %957 = log2(%955) /* ty=Tensor[(3, 11, 12), float64] */;
    (%956, %957)
  };
  %958(%var_11216, %var_11217) /* ty=(Tensor[(3, 11, 12), bool], Tensor[(3, 11, 12), float64]) */
}

def @func_5953(%var_5952: Tensor[(4, 4, 13), float32]) -> (Tensor[(4, 4, 13), int8],) {
  %965 = fn (%var_5925: Tensor[(4, 4, 13), float32]) -> (Tensor[(4, 4, 13), int8],) {
    %959 = @func_5882() /* ty=Tensor[(4, 4, 13), float32] */;
    %960 = cast(%var_5925, dtype="int8") /* ty=Tensor[(4, 4, 13), int8] */;
    %961 = shape_of(%959, dtype="int32") /* ty=Tensor[(3), int32] */;
    %962 = cast(%959, dtype="int8") /* ty=Tensor[(4, 4, 13), int8] */;
    %963 = dyn.reshape(%960, %961, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %964 = bitwise_or(%962, %963) /* ty=Tensor[(4, 4, 13), int8] */;
    (%964,)
  };
  %965(%var_5952) /* ty=(Tensor[(4, 4, 13), int8],) */
}

def @func_10641() -> (Tensor[(13, 12, 13), float64],) {
  %967 = fn () -> (Tensor[(13, 12, 13), float64],) {
    %966 = @func_5835() /* ty=Tensor[(13, 12, 13), float64] */;
    (%966,)
  };
  %967() /* ty=(Tensor[(13, 12, 13), float64],) */
}

def @func_7003(%var_7002: Tensor[(8, 4, 10), float32]) -> (Tensor[(8, 4, 10), float32],) {
  %973 = fn (%var_6991: Tensor[(8, 4, 10), float32]) -> (Tensor[(8, 4, 10), float32],) {
    %968 = cast(meta[relay.Constant][78] /* ty=Tensor[(8, 4, 10), float32] */, dtype="float32") /* ty=Tensor[(8, 4, 10), float32] */;
    %969 = shape_of(%var_6991, dtype="int32") /* ty=Tensor[(3), int32] */;
    %970 = cast(%var_6991, dtype="float32") /* ty=Tensor[(8, 4, 10), float32] */;
    %971 = dyn.reshape(%968, %969, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %972 = subtract(%970, %971) /* ty=Tensor[(8, 4, 10), float32] */;
    (%972,)
  };
  %973(%var_7002) /* ty=(Tensor[(8, 4, 10), float32],) */
}

def @func_6988() -> (Tensor[(13, 12, 13), float64], Tensor[(180), float64], Tensor[(660), float32], Tensor[(180), float64]) {
  %981 = fn () -> (Tensor[(13, 12, 13), float64], Tensor[(180), float64], Tensor[(660), float32], Tensor[(180), float64]) {
    %974 = cast(meta[relay.Constant][79] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
    %975 = cast(meta[relay.Constant][80] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %976 = reshape(%974, newshape=[11, 4, 15]) /* ty=Tensor[(11, 4, 15), float32] */;
    %977 = reshape(%975, newshape=[180]) /* ty=Tensor[(180), float64] */;
    %978 = @func_488(%976, %977) /* ty=(Tensor[(5, 6, 6), float64], Tensor[(180), float64], Tensor[(11, 4, 15), uint16], Tensor[(5, 6, 6), float64]) */;
    %979 = @func_6463() /* ty=Tensor[(13, 12, 13), float64] */;
    %980 = %978.1;
    (%979, %980, meta[relay.Constant][79] /* ty=Tensor[(660), float32] */, meta[relay.Constant][80] /* ty=Tensor[(180), float64] */)
  };
  %981() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(180), float64], Tensor[(660), float32], Tensor[(180), float64]) */
}

def @func_10946() -> (Tensor[(13, 12, 13), float64],) {
  @func_10944() /* ty=(Tensor[(13, 12, 13), float64],) */
}

def @func_6328() -> (Tensor[(13, 12, 13), float64],) {
  %982 = @func_5131() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %983 = %982.0;
  (%983,)
}

def @func_6318() -> (Tensor[(13, 12, 13), float64], Tensor[(2, 9, 5), bool], Tensor[(15, 6), int8], Tensor[(660), uint32], Tensor[(150), float64]) {
  @func_6316() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(2, 9, 5), bool], Tensor[(15, 6), int8], Tensor[(660), uint32], Tensor[(150), float64]) */
}

def @func_10487(%var_10474: Tensor[(75, 2), float64]) -> (Tensor[(75, 2), int16], Tensor[(150), float64], Tensor[(150), float64]) {
  %984 = @func_7556() /* ty=(Tensor[(4, 4, 13), float64], Tensor[(75, 2), float64]) */;
  %985 = %984.1;
  %986 = cast(%var_10474, dtype="int16") /* ty=Tensor[(75, 2), int16] */;
  %987 = shape_of(%985, dtype="int32") /* ty=Tensor[(2), int32] */;
  %988 = cast(%985, dtype="int16") /* ty=Tensor[(75, 2), int16] */;
  %989 = dyn.reshape(%986, %987, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %990 = @func_6316() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(2, 9, 5), bool], Tensor[(15, 6), int8], Tensor[(660), uint32], Tensor[(150), float64]) */;
  %991 = @func_9907() /* ty=(Tensor[(150), float64], Tensor[(?, 4, 4), float64]) */;
  %992 = left_shift(%988, %989) /* ty=Tensor[(75, 2), int16] */;
  %993 = %990.4;
  %994 = %991.0;
  (%992, %993, %994)
}

def @func_5063(%var_5059: Tensor[(13, 12, 13), float64], %var_5060: Tensor[(720), int64], %var_5061: Tensor[(660, 1), float32], %var_5062: Tensor[(90, 2), float64]) -> (Tensor[(648), float64], Tensor[(720), int64], Tensor[(660, 1), float32], Tensor[(13, 3, 8), float32], Tensor[(11, 4, 15), uint16], Tensor[(90, 2), float64], Tensor[(13, 12, 13), uint32]) {
  %1023 = fn (%var_4994: Tensor[(13, 12, 13), float64], %var_5018: Tensor[(720), int64], %var_5021: Tensor[(660, 1), float32], %var_5041: Tensor[(90, 2), float64]) -> (Tensor[(648), float64], Tensor[(720), int64], Tensor[(660, 1), float32], Tensor[(13, 3, 8), float32], Tensor[(11, 4, 15), uint16], Tensor[(90, 2), float64], Tensor[(13, 12, 13), uint32]) {
    %995 = cast(%var_5018, dtype="int64") /* ty=Tensor[(720), int64] */;
    %996 = reshape(%995, newshape=[12, 5, 12]) /* ty=Tensor[(12, 5, 12), int64] */;
    %997 = @func_4475(%996) /* ty=(Tensor[(12, 5, 12), bool], Tensor[(9, 9, 8), float64], Tensor[(648), float64], Tensor[(144), float32], Tensor[(90), int8]) */;
    %998 = cast(%var_5021, dtype="float32") /* ty=Tensor[(660, 1), float32] */;
    %999 = reshape(%998, newshape=[660]) /* ty=Tensor[(660), float32] */;
    %1000 = @func_680(%999) /* ty=(Tensor[(13, 3, 8), float64], Tensor[(180), float64], Tensor[(660), float32], Tensor[(180), float64]) */;
    %1001 = %1000.0;
    %1002 = cast(%1001, dtype="float32") /* ty=Tensor[(13, 3, 8), float32] */;
    %1003 = cast(%var_5021, dtype="float32") /* ty=Tensor[(660, 1), float32] */;
    %1004 = cast(%var_5041, dtype="float64") /* ty=Tensor[(90, 2), float64] */;
    %1005 = reshape(%1003, newshape=[11, 4, 15]) /* ty=Tensor[(11, 4, 15), float32] */;
    %1006 = reshape(%1004, newshape=[180]) /* ty=Tensor[(180), float64] */;
    %1007 = @func_488(%1005, %1006) /* ty=(Tensor[(5, 6, 6), float64], Tensor[(180), float64], Tensor[(11, 4, 15), uint16], Tensor[(5, 6, 6), float64]) */;
    %1008 = @func_4924() /* ty=(Tensor[(13, 12, 13), float64],) */;
    %1009 = %1008.0;
    %1010 = cast(%var_4994, dtype="float64") /* ty=Tensor[(13, 12, 13), float64] */;
    %1011 = shape_of(%1009, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1012 = cast(%1009, dtype="float64") /* ty=Tensor[(13, 12, 13), float64] */;
    %1013 = dyn.reshape(%1010, %1011, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1014 = divide(%1012, %1013) /* ty=Tensor[(13, 12, 13), float64] */;
    %1015 = cast(%1014, dtype="uint32") /* ty=Tensor[(13, 12, 13), uint32] */;
    %1016 = shape_of(%1009, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1017 = cast(%1009, dtype="uint32") /* ty=Tensor[(13, 12, 13), uint32] */;
    %1018 = dyn.reshape(%1015, %1016, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %1019 = %997.2;
    %1020 = tan(%1002) /* ty=Tensor[(13, 3, 8), float32] */;
    %1021 = %1007.2;
    %1022 = add(%1017, %1018) /* ty=Tensor[(13, 12, 13), uint32] */;
    (%1019, %var_5018, %var_5021, %1020, %1021, %var_5041, %1022)
  };
  %1023(%var_5059, %var_5060, %var_5061, %var_5062) /* ty=(Tensor[(648), float64], Tensor[(720), int64], Tensor[(660, 1), float32], Tensor[(13, 3, 8), float32], Tensor[(11, 4, 15), uint16], Tensor[(90, 2), float64], Tensor[(13, 12, 13), uint32]) */
}

def @func_9260() -> (Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) {
  @func_9258() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) */
}

def @func_8948() -> (Tensor[(99), float32],) {
  %1026 = fn () -> (Tensor[(99), float32],) {
    %1024 = @func_6339() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(99), float32]) */;
    %1025 = %1024.2;
    (%1025,)
  };
  %1026() /* ty=(Tensor[(99), float32],) */
}

def @func_8246() -> (Tensor[(16), int16],) {
  %1027 = @func_6210() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), int16], Tensor[(16), int16]) */;
  %1028 = %1027.2;
  (%1028,)
}

def @func_7402() -> (Tensor[(13, 12, 13), float64],) {
  %1029 = @func_6463() /* ty=Tensor[(13, 12, 13), float64] */;
  (%1029,)
}

def @func_9406() -> (Tensor[(13, 12, 13), float64],) {
  %1030 = @func_9024() /* ty=Tensor[(13, 12, 13), float64] */;
  %1031 = cast(meta[relay.Constant][81] /* ty=Tensor[(13, 12, 13), float64] */, dtype="float64") /* ty=Tensor[(13, 12, 13), float64] */;
  %1032 = shape_of(%1030, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1033 = cast(%1030, dtype="float64") /* ty=Tensor[(13, 12, 13), float64] */;
  %1034 = dyn.reshape(%1031, %1032, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1035 = mod(%1033, %1034) /* ty=Tensor[(13, 12, 13), float64] */;
  (%1035,)
}

def @func_4349(%var_4341: Tensor[(3, 3, 11), float32]) -> (Tensor[(3, 3, 11), float32],) {
  %1036 = cast(%var_4341, dtype="float32") /* ty=Tensor[(3, 3, 11), float32] */;
  %1037 = asin(%1036) /* ty=Tensor[(3, 3, 11), float32] */;
  (%1037,)
}

def @func_6882() -> (Tensor[(16, 12, 11), float64], Tensor[(13, 12, 13), float64], Tensor[(75, 2), float64]) {
  @func_6880() /* ty=(Tensor[(16, 12, 11), float64], Tensor[(13, 12, 13), float64], Tensor[(75, 2), float64]) */
}

def @func_9803() -> (Tensor[(13, 12, 13), float64], Tensor[(128), int16], Tensor[(15, 4, 11), float64], Tensor[(13, 12, 13), float64]) {
  %1038 = @func_9490() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %1039 = cast(meta[relay.Constant][82] /* ty=Tensor[(128), int16] */, dtype="int16") /* ty=Tensor[(128), int16] */;
  %1040 = cast(meta[relay.Constant][82] /* ty=Tensor[(128), int16] */, dtype="int16") /* ty=Tensor[(128), int16] */;
  %1041 = reshape(%1039, newshape=[4, 2, 16]) /* ty=Tensor[(4, 2, 16), int16] */;
  %1042 = reshape(%1040, newshape=[4, 2, 16]) /* ty=Tensor[(4, 2, 16), int16] */;
  %1043 = @func_4660(%1041, %1042) /* ty=(Tensor[(4, 2, 16), bool], Tensor[(15, 4, 11), float32], Tensor[(660), uint32], Tensor[(15, 4, 11), float32], Tensor[(150), float64]) */;
  %1044 = %1043.3;
  %1045 = cast(%1044, dtype="float64") /* ty=Tensor[(15, 4, 11), float64] */;
  %1046 = %1038.0;
  %1047 = sinh(%1045) /* ty=Tensor[(15, 4, 11), float64] */;
  %1048 = @func_6463() /* ty=Tensor[(13, 12, 13), float64] */;
  (%1046, meta[relay.Constant][82] /* ty=Tensor[(128), int16] */, %1047, %1048)
}

def @func_6436() -> Tensor[(13, 12, 13), float64] {
  @func_5749() /* ty=Tensor[(13, 12, 13), float64] */
}

def @func_8174() -> Tensor[(90), int8] {
  @func_8172() /* ty=Tensor[(90), int8] */
}

def @func_10285(%var_10284: Tensor[(13, 12, 13), float64]) -> (Tensor[(13, 12, 13), float64], Tensor[(660, 1), uint32], Tensor[(162, 4), float64], Tensor[(144), float32], Tensor[(90), int8]) {
  %1064 = fn (%var_10249: Tensor[(13, 12, 13), float64]) -> (Tensor[(13, 12, 13), float64], Tensor[(660, 1), uint32], Tensor[(162, 4), float64], Tensor[(144), float32], Tensor[(90), int8]) {
    %1049 = @func_9406() /* ty=(Tensor[(13, 12, 13), float64],) */;
    %1050 = %1049.0;
    %1051 = cast(%var_10249, dtype="float64") /* ty=Tensor[(13, 12, 13), float64] */;
    %1052 = shape_of(%1050, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1053 = cast(%1050, dtype="float64") /* ty=Tensor[(13, 12, 13), float64] */;
    %1054 = dyn.reshape(%1051, %1052, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1055 = cast(meta[relay.Constant][83] /* ty=Tensor[(162, 4), float64] */, dtype="float64") /* ty=Tensor[(162, 4), float64] */;
    %1056 = cast(meta[relay.Constant][84] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
    %1057 = cast(meta[relay.Constant][85] /* ty=Tensor[(90), int8] */, dtype="int8") /* ty=Tensor[(90), int8] */;
    %1058 = reshape(%1055, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float64] */;
    %1059 = reshape(%1056, newshape=[2, 72]) /* ty=Tensor[(2, 72), float32] */;
    %1060 = reshape(%1057, newshape=[90]) /* ty=Tensor[(90), int8] */;
    %1061 = @func_3471(%1058, %1059, %1060) /* ty=(Tensor[(9, 9, 8), float64], Tensor[(110, 6), uint32], Tensor[(2, 72), float32], Tensor[(1584), float32], Tensor[(90), int8], Tensor[(660, 1), uint32], Tensor[(3, 60), float64]) */;
    %1062 = multiply(%1053, %1054) /* ty=Tensor[(13, 12, 13), float64] */;
    %1063 = %1061.5;
    (%1062, %1063, meta[relay.Constant][83] /* ty=Tensor[(162, 4), float64] */, meta[relay.Constant][84] /* ty=Tensor[(144), float32] */, meta[relay.Constant][85] /* ty=Tensor[(90), int8] */)
  };
  %1064(%var_10284) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(660, 1), uint32], Tensor[(162, 4), float64], Tensor[(144), float32], Tensor[(90), int8]) */
}

def @func_3162(%var_3158: Tensor[(16, 12, 9), float64], %var_3159: Tensor[(90), int8], %var_3160: Tensor[(75, 2), float64], %var_3161: Tensor[(16, 12, 9), float32]) -> (Tensor[(11, 4, 15), uint16], Tensor[(660), float32], Tensor[(180), float64], Tensor[(16, 12, 9), float32], Tensor[(660), uint32], Tensor[(90), int8], Tensor[(75, 2), float64], Tensor[(16, 12, 9), float32], Tensor[(5, 6, 6), float64]) {
  @func_3156(%var_3158, %var_3159, %var_3160, %var_3161) /* ty=(Tensor[(11, 4, 15), uint16], Tensor[(660), float32], Tensor[(180), float64], Tensor[(16, 12, 9), float32], Tensor[(660), uint32], Tensor[(90), int8], Tensor[(75, 2), float64], Tensor[(16, 12, 9), float32], Tensor[(5, 6, 6), float64]) */
}

def @func_5386(%var_5385: Tensor[(99), float32]) -> (Tensor[(13, 12, 13), float64], Tensor[(3, 3, 11), float32], Tensor[(99), float32]) {
  %1071 = fn (%var_5363: Tensor[(99), float32]) -> (Tensor[(13, 12, 13), float64], Tensor[(3, 3, 11), float32], Tensor[(99), float32]) {
    %1065 = @func_4924() /* ty=(Tensor[(13, 12, 13), float64],) */;
    %1066 = cast(%var_5363, dtype="float32") /* ty=Tensor[(99), float32] */;
    %1067 = reshape(%1066, newshape=[3, 3, 11]) /* ty=Tensor[(3, 3, 11), float32] */;
    %1068 = @func_4349(%1067) /* ty=(Tensor[(3, 3, 11), float32],) */;
    %1069 = %1065.0;
    %1070 = %1068.0;
    (%1069, %1070, %var_5363)
  };
  %1071(%var_5385) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(3, 3, 11), float32], Tensor[(99), float32]) */
}

def @func_315(%var_313: Tensor[(11, 15, 4), float32], %var_314: Tensor[(180), float64]) -> (Tensor[(11, 15, 4), float32], Tensor[(5, 6, 6), float64], Tensor[(180), float64]) {
  @func_311(%var_313, %var_314) /* ty=(Tensor[(11, 15, 4), float32], Tensor[(5, 6, 6), float64], Tensor[(180), float64]) */
}

def @func_3475(%var_3472: Tensor[(9, 9, 8), float64], %var_3473: Tensor[(2, 72), float32], %var_3474: Tensor[(90), int8]) -> (Tensor[(9, 9, 8), float64], Tensor[(110, 6), uint32], Tensor[(2, 72), float32], Tensor[(1584), float32], Tensor[(90), int8], Tensor[(660, 1), uint32], Tensor[(3, 60), float64]) {
  %1086 = fn (%var_3459: Tensor[(9, 9, 8), float64], %var_3464: Tensor[(2, 72), float32], %var_3466: Tensor[(90), int8]) -> (Tensor[(9, 9, 8), float64], Tensor[(110, 6), uint32], Tensor[(2, 72), float32], Tensor[(1584), float32], Tensor[(90), int8], Tensor[(660, 1), uint32], Tensor[(3, 60), float64]) {
    %1072 = cast(%var_3459, dtype="float64") /* ty=Tensor[(9, 9, 8), float64] */;
    %1073 = cast(%var_3464, dtype="float32") /* ty=Tensor[(2, 72), float32] */;
    %1074 = cast(meta[relay.Constant][86] /* ty=Tensor[(1584), float32] */, dtype="float32") /* ty=Tensor[(1584), float32] */;
    %1075 = cast(%var_3466, dtype="int8") /* ty=Tensor[(90), int8] */;
    %1076 = cast(meta[relay.Constant][87] /* ty=Tensor[(660, 1), uint32] */, dtype="uint32") /* ty=Tensor[(660, 1), uint32] */;
    %1077 = cast(meta[relay.Constant][88] /* ty=Tensor[(3, 60), float64] */, dtype="float64") /* ty=Tensor[(3, 60), float64] */;
    %1078 = reshape(%1073, newshape=[12, 12, 1]) /* ty=Tensor[(12, 12, 1), float32] */;
    %1079 = reshape(%1074, newshape=[12, 12, 11]) /* ty=Tensor[(12, 12, 11), float32] */;
    %1080 = reshape(%1075, newshape=[90]) /* ty=Tensor[(90), int8] */;
    %1081 = reshape(%1076, newshape=[110, 6]) /* ty=Tensor[(110, 6), uint32] */;
    %1082 = reshape(%1077, newshape=[180]) /* ty=Tensor[(180), float64] */;
    %1083 = @func_2906(%1078, %1079, %1080, %1081, %1082) /* ty=(Tensor[(12, 12, 11), bool], Tensor[(2, 9, 5), bool], Tensor[(90), int8], Tensor[(110, 6), uint32], Tensor[(150), float64], Tensor[(5, 6, 6), float64], Tensor[(180), float64], Tensor[(180), float64]) */;
    %1084 = sigmoid(%1072) /* ty=Tensor[(9, 9, 8), float64] */;
    %1085 = %1083.3;
    (%1084, %1085, %var_3464, meta[relay.Constant][86] /* ty=Tensor[(1584), float32] */, %var_3466, meta[relay.Constant][87] /* ty=Tensor[(660, 1), uint32] */, meta[relay.Constant][88] /* ty=Tensor[(3, 60), float64] */)
  };
  %1086(%var_3472, %var_3473, %var_3474) /* ty=(Tensor[(9, 9, 8), float64], Tensor[(110, 6), uint32], Tensor[(2, 72), float32], Tensor[(1584), float32], Tensor[(90), int8], Tensor[(660, 1), uint32], Tensor[(3, 60), float64]) */
}

def @func_5512(%var_5506: Tensor[(1728), float64], %var_5508: Tensor[(150), float64]) -> (Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64], Tensor[(16, 12, 9), float32], Tensor[(1728), float64], Tensor[(90), int8], Tensor[(150), float64]) {
  %1087 = @func_5295() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %1088 = @func_5295() /* ty=(Tensor[(13, 12, 13), float64],) */;
  %1089 = cast(%var_5506, dtype="float64") /* ty=Tensor[(1728), float64] */;
  %1090 = cast(meta[relay.Constant][89] /* ty=Tensor[(90), int8] */, dtype="int8") /* ty=Tensor[(90), int8] */;
  %1091 = cast(%var_5508, dtype="float64") /* ty=Tensor[(150), float64] */;
  %1092 = cast(%var_5506, dtype="float32") /* ty=Tensor[(1728), float32] */;
  %1093 = reshape(%1089, newshape=[16, 12, 9]) /* ty=Tensor[(16, 12, 9), float64] */;
  %1094 = reshape(%1090, newshape=[90]) /* ty=Tensor[(90), int8] */;
  %1095 = reshape(%1091, newshape=[75, 2]) /* ty=Tensor[(75, 2), float64] */;
  %1096 = reshape(%1092, newshape=[16, 12, 9]) /* ty=Tensor[(16, 12, 9), float32] */;
  %1097 = @func_3156(%1093, %1094, %1095, %1096) /* ty=(Tensor[(11, 4, 15), uint16], Tensor[(660), float32], Tensor[(180), float64], Tensor[(16, 12, 9), float32], Tensor[(660), uint32], Tensor[(90), int8], Tensor[(75, 2), float64], Tensor[(16, 12, 9), float32], Tensor[(5, 6, 6), float64]) */;
  %1098 = %1087.0;
  %1099 = %1088.0;
  %1100 = %1097.7;
  (%1098, %1099, %1100, %var_5506, meta[relay.Constant][89] /* ty=Tensor[(90), int8] */, %var_5508)
}

def @func_10148(%var_10146: Tensor[(4, 432), float64]) -> (Tensor[(?, 4, 4), int16], Tensor[(1728), float64], Tensor[(208), float32], Tensor[(144), float32], Tensor[(4, 432), float64]) {
  @func_10145(%var_10146) /* ty=(Tensor[(?, 4, 4), int16], Tensor[(1728), float64], Tensor[(208), float32], Tensor[(144), float32], Tensor[(4, 432), float64]) */
}

def @func_10516() -> (Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) {
  @func_10514() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) */
}

def @func_8709(%var_8705: Tensor[(1728), float64], %var_8706: Tensor[(90), int8], %var_8707: Tensor[(648), float64], %var_8708: Tensor[(144), float32]) -> (Tensor[(13, 12, 13), float64], Tensor[(660), uint32], Tensor[(1728), float64], Tensor[(90), int8], Tensor[(25, 6), bool], Tensor[(2, 72), float32], Tensor[(648), float64], Tensor[(144), float32], Tensor[(25, 6), int16], Tensor[(25, 6), float64], Tensor[(180), float64], Tensor[(16), int16], Tensor[(13, 12, 13), float64]) {
  %1152 = fn (%var_8598: Tensor[(1728), float64], %var_8599: Tensor[(90), int8], %var_8635: Tensor[(648), float64], %var_8636: Tensor[(144), float32]) -> (Tensor[(13, 12, 13), float64], Tensor[(660), uint32], Tensor[(1728), float64], Tensor[(90), int8], Tensor[(25, 6), bool], Tensor[(2, 72), float32], Tensor[(648), float64], Tensor[(144), float32], Tensor[(25, 6), int16], Tensor[(25, 6), float64], Tensor[(180), float64], Tensor[(16), int16], Tensor[(13, 12, 13), float64]) {
    %1101 = @func_7686() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(13, 12, 13), float64]) */;
    %1102 = cast(%var_8598, dtype="float64") /* ty=Tensor[(1728), float64] */;
    %1103 = cast(%var_8599, dtype="int8") /* ty=Tensor[(90), int8] */;
    %1104 = cast(meta[relay.Constant][90] /* ty=Tensor[(25, 6), float64] */, dtype="float64") /* ty=Tensor[(25, 6), float64] */;
    %1105 = cast(%var_8598, dtype="float32") /* ty=Tensor[(1728), float32] */;
    %1106 = reshape(%1102, newshape=[16, 12, 9]) /* ty=Tensor[(16, 12, 9), float64] */;
    %1107 = reshape(%1103, newshape=[90]) /* ty=Tensor[(90), int8] */;
    %1108 = reshape(%1104, newshape=[75, 2]) /* ty=Tensor[(75, 2), float64] */;
    %1109 = reshape(%1105, newshape=[16, 12, 9]) /* ty=Tensor[(16, 12, 9), float32] */;
    %1110 = @func_3156(%1106, %1107, %1108, %1109) /* ty=(Tensor[(11, 4, 15), uint16], Tensor[(660), float32], Tensor[(180), float64], Tensor[(16, 12, 9), float32], Tensor[(660), uint32], Tensor[(90), int8], Tensor[(75, 2), float64], Tensor[(16, 12, 9), float32], Tensor[(5, 6, 6), float64]) */;
    %1111 = cast(meta[relay.Constant][91] /* ty=Tensor[(25, 6), float64] */, dtype="float64") /* ty=Tensor[(25, 6), float64] */;
    %1112 = sqrt(%1111) /* ty=Tensor[(25, 6), float64] */;
    %1113 = cast(meta[relay.Constant][91] /* ty=Tensor[(25, 6), float64] */, dtype="bool") /* ty=Tensor[(25, 6), bool] */;
    %1114 = shape_of(%1112, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1115 = cast(%1112, dtype="bool") /* ty=Tensor[(25, 6), bool] */;
    %1116 = dyn.reshape(%1113, %1114, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %1117 = cast(%var_8635, dtype="float64") /* ty=Tensor[(648), float64] */;
    %1118 = cast(%var_8636, dtype="float32") /* ty=Tensor[(144), float32] */;
    %1119 = cast(%var_8599, dtype="int8") /* ty=Tensor[(90), int8] */;
    %1120 = reshape(%1117, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float64] */;
    %1121 = reshape(%1118, newshape=[2, 72]) /* ty=Tensor[(2, 72), float32] */;
    %1122 = reshape(%1119, newshape=[90]) /* ty=Tensor[(90), int8] */;
    %1123 = @func_3471(%1120, %1121, %1122) /* ty=(Tensor[(9, 9, 8), float64], Tensor[(110, 6), uint32], Tensor[(2, 72), float32], Tensor[(1584), float32], Tensor[(90), int8], Tensor[(660, 1), uint32], Tensor[(3, 60), float64]) */;
    %1124 = cast(%1112, dtype="int16") /* ty=Tensor[(25, 6), int16] */;
    %1125 = shape_of(meta[relay.Constant][90] /* ty=Tensor[(25, 6), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1126 = cast(meta[relay.Constant][90] /* ty=Tensor[(25, 6), float64] */, dtype="int16") /* ty=Tensor[(25, 6), int16] */;
    %1127 = dyn.reshape(%1124, %1125, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %1128 = cast(meta[relay.Constant][91] /* ty=Tensor[(25, 6), float64] */, dtype="uint64") /* ty=Tensor[(25, 6), uint64] */;
    %1129 = shape_of(meta[relay.Constant][90] /* ty=Tensor[(25, 6), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1130 = cast(meta[relay.Constant][90] /* ty=Tensor[(25, 6), float64] */, dtype="uint64") /* ty=Tensor[(25, 6), uint64] */;
    %1131 = dyn.reshape(%1128, %1129, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %1132 = bitwise_or(%1130, %1131) /* ty=Tensor[(25, 6), uint64] */;
    %1133 = cast(%1132, dtype="float64") /* ty=Tensor[(25, 6), float64] */;
    %1134 = %1110.4;
    %1135 = cast(%1134, dtype="uint32") /* ty=Tensor[(660), uint32] */;
    %1136 = cast(meta[relay.Constant][91] /* ty=Tensor[(25, 6), float64] */, dtype="float64") /* ty=Tensor[(25, 6), float64] */;
    %1137 = reshape(%1135, newshape=[15, 4, 11]) /* ty=Tensor[(15, 4, 11), uint32] */;
    %1138 = reshape(%1136, newshape=[150]) /* ty=Tensor[(150), float64] */;
    %1139 = @func_2017(%1137, %1138) /* ty=(Tensor[(180), float64], Tensor[(150), float64], Tensor[(180), float64], Tensor[(180), float64], Tensor[(15, 4, 11), float32]) */;
    %1140 = @func_6210() /* ty=(Tensor[(13, 12, 13), float64], Tensor[(?, 4, 4), int16], Tensor[(16), int16]) */;
    %1141 = cast(%1132, dtype="float64") /* ty=Tensor[(25, 6), float64] */;
    %1142 = reshape(%1141, newshape=[150]) /* ty=Tensor[(150), float64] */;
    %1143 = @func_6088(%1142) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(2, 9, 5), float32], Tensor[(90), int8], Tensor[(660), uint32], Tensor[(150), float64]) */;
    %1144 = %1101.0;
    %1145 = equal(%1115, %1116) /* ty=Tensor[(25, 6), bool] */;
    %1146 = %1123.2;
    %1147 = maximum(%1126, %1127) /* ty=Tensor[(25, 6), int16] */;
    %1148 = sigmoid(%1133) /* ty=Tensor[(25, 6), float64] */;
    %1149 = %1139.2;
    %1150 = %1140.2;
    %1151 = %1143.0;
    (%1144, %1134, %var_8598, %var_8599, %1145, %1146, %var_8635, %var_8636, %1147, %1148, %1149, %1150, %1151)
  };
  %1152(%var_8705, %var_8706, %var_8707, %var_8708) /* ty=(Tensor[(13, 12, 13), float64], Tensor[(660), uint32], Tensor[(1728), float64], Tensor[(90), int8], Tensor[(25, 6), bool], Tensor[(2, 72), float32], Tensor[(648), float64], Tensor[(144), float32], Tensor[(25, 6), int16], Tensor[(25, 6), float64], Tensor[(180), float64], Tensor[(16), int16], Tensor[(13, 12, 13), float64]) */
}

def @func_10869() -> (Tensor[(4, 4, 13), float32], Tensor[(13, 12, 13), int32], Tensor[(2028), float64]) {
  @func_10867() /* ty=(Tensor[(4, 4, 13), float32], Tensor[(13, 12, 13), int32], Tensor[(2028), float64]) */
}

def @func_10145(%var_10142: Tensor[(4, 432), float64]) -> (Tensor[(?, 4, 4), int16], Tensor[(1728), float64], Tensor[(208), float32], Tensor[(144), float32], Tensor[(4, 432), float64]) {
  %1153 = @func_9361() /* ty=(Tensor[(?, 4, 4), int16],) */;
  %1154 = cast(meta[relay.Constant][92] /* ty=Tensor[(208), float32] */, dtype="float32") /* ty=Tensor[(208), float32] */;
  %1155 = cast(meta[relay.Constant][93] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %1156 = cast(%var_10142, dtype="float64") /* ty=Tensor[(4, 432), float64] */;
  %1157 = reshape(%1154, newshape=[4, 4, 13]) /* ty=Tensor[(4, 4, 13), float32] */;
  %1158 = reshape(%1155, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %1159 = reshape(%1156, newshape=[1728]) /* ty=Tensor[(1728), float64] */;
  %1160 = @func_6145(%1157, %1158, %1159) /* ty=(Tensor[(4, 4, 13), int32], Tensor[(13, 12, 13), float64], Tensor[(144), float32], Tensor[(90), int8], Tensor[(180), float64], Tensor[(2, 9, 5), float32], Tensor[(150), float64], Tensor[(1728), float64], Tensor[(1728), float64], Tensor[(4, 4, 13), float32]) */;
  %1161 = %1153.0;
  %1162 = %1160.8;
  (%1161, %1162, meta[relay.Constant][92] /* ty=Tensor[(208), float32] */, meta[relay.Constant][93] /* ty=Tensor[(144), float32] */, %var_10142)
}

def @func_4318(%var_4316: Tensor[(1, 4, 4), int16]) -> (Tensor[(?, 4, 4), int16],) {
  @func_4315(%var_4316) /* ty=(Tensor[(?, 4, 4), int16],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen359/build/output.py", line 2842, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:10:05] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

