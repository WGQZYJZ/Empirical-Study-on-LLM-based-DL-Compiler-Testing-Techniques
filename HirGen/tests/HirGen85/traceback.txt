==========mod==========
#[version = "0.0.5"]
def @func_1930() -> Tensor[(9, 3, 16), float64] {
  %0 = @func_699() /* ty=(Tensor[(9, 3, 16), float64], Tensor[(9, 3, 16), float64]) */;
  %0.1
}

def @func_2885(%var_2832: Tensor[(10, 11, 12), uint64], %var_2833: Tensor[(10, 11, 12), uint64], %var_2857: int64, %var_2858: Tensor[(4), int64]) -> (Tensor[(10, 11, 12), uint64], Tensor[(9, 3, 16), bool], Tensor[(12, 6, ?), float32], Tensor[(4, 1), bool], int64, Tensor[(4), int64], Tensor[(10, 11, 12), bool], Tensor[(16, 14, 12), float64]) {
  %1 = cast(%var_2833, dtype="uint64") /* ty=Tensor[(10, 11, 12), uint64] */;
  %2 = shape_of(%var_2832, dtype="int32") /* ty=Tensor[(3), int32] */;
  %3 = cast(%var_2832, dtype="uint64") /* ty=Tensor[(10, 11, 12), uint64] */;
  %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
  %7 = reshape(%5, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
  %8 = reshape(%6, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
  %9 = @func_169(%7, %8) /* ty=(Tensor[(9, 3, 16), float64],) */;
  %10 = %9.0;
  %11 = cast(meta[relay.Constant][0] /* ty=Tensor[(432), float64] */, dtype="bool") /* ty=Tensor[(432), bool] */;
  %12 = shape_of(%10, dtype="int32") /* ty=Tensor[(3), int32] */;
  %13 = cast(%10, dtype="bool") /* ty=Tensor[(9, 3, 16), bool] */;
  %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %15 = @func_330() /* ty=(Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64], Tensor[(432), float64], Tensor[(9, 3, 16), float64]) */;
  %16 = cast(%var_2857, dtype="int64") /* ty=int64 */;
  %17 = cast(%var_2858, dtype="int64") /* ty=Tensor[(4), int64] */;
  %18 = reshape(%16, newshape=[]) /* ty=int64 */;
  %19 = reshape(%17, newshape=[4, 1]) /* ty=Tensor[(4, 1), int64] */;
  %20 = @func_2419(%18, %19) /* ty=(Tensor[(4, 1), bool],) */;
  %21 = cast(meta[relay.Constant][1] /* ty=Tensor[(10, 11, 12), uint64] */, dtype="bool") /* ty=Tensor[(10, 11, 12), bool] */;
  %22 = shape_of(%var_2833, dtype="int32") /* ty=Tensor[(3), int32] */;
  %23 = cast(%var_2833, dtype="bool") /* ty=Tensor[(10, 11, 12), bool] */;
  %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %25 = multiply(%3, %4) /* ty=Tensor[(10, 11, 12), uint64] */;
  %26 = equal(%13, %14) /* ty=Tensor[(9, 3, 16), bool] */;
  %27 = %15.0;
  %28 = %20.0;
  %29 = logical_and(%23, %24) /* ty=Tensor[(10, 11, 12), bool] */;
  %30 = @func_1074() /* ty=Tensor[(16, 14, 12), float64] */;
  (%25, %26, %27, %28, %var_2857, %var_2858, %29, %30)
}

def @func_3515() -> Tensor[(9, 3, 16), float64] {
  @func_1240() /* ty=Tensor[(9, 3, 16), float64] */
}

def @func_3892() -> Tensor[(9, 3, 16), float64] {
  %31 = @func_699() /* ty=(Tensor[(9, 3, 16), float64], Tensor[(9, 3, 16), float64]) */;
  %32 = %31.0;
  %33 = cast(%32, dtype="float64") /* ty=Tensor[(9, 3, 16), float64] */;
  atan(%33) /* ty=Tensor[(9, 3, 16), float64] */
}

def @func_330() -> (Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64], Tensor[(432), float64], Tensor[(9, 3, 16), float64]) {
  %34 = cast(meta[relay.Constant][2] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
  %35 = cast(meta[relay.Constant][2] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
  %36 = reshape(%34, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
  %37 = reshape(%35, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
  %38 = @func_169(%36, %37) /* ty=(Tensor[(9, 3, 16), float64],) */;
  %39 = %38.0;
  %40 = cast(%39, dtype="float64") /* ty=Tensor[(9, 3, 16), float64] */;
  %41 = cast(meta[relay.Constant][2] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
  %42 = reshape(%40, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
  %43 = reshape(%41, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
  %44 = @func_169(%42, %43) /* ty=(Tensor[(9, 3, 16), float64],) */;
  %45 = %44.0;
  %46 = cast(%45, dtype="float64") /* ty=Tensor[(9, 3, 16), float64] */;
  %47 = @func_52() /* ty=Tensor[(12, 6, ?), float32] */;
  %48 = acosh(%46) /* ty=Tensor[(9, 3, 16), float64] */;
  (%47, %39, meta[relay.Constant][2] /* ty=Tensor[(432), float64] */, %48)
}

def @func_275() -> Tensor[(12, 6, ?), float32] {
  @func_52() /* ty=Tensor[(12, 6, ?), float32] */
}

def @func_1328() -> (Tensor[(5, 9, 8), float32],) {
  %49 = cast(meta[relay.Constant][3] /* ty=Tensor[(5, 9, 8), float32] */, dtype="float32") /* ty=Tensor[(5, 9, 8), float32] */;
  %50 = sqrt(%49) /* ty=Tensor[(5, 9, 8), float32] */;
  %51 = cast(%50, dtype="float32") /* ty=Tensor[(5, 9, 8), float32] */;
  %52 = sin(%51) /* ty=Tensor[(5, 9, 8), float32] */;
  (%52,)
}

def @func_4760() -> (Tensor[(9, 3, 16), float64],) {
  %53 = @func_2737() /* ty=(Tensor[(9, 3, 16), float64],) */;
  %54 = %53.0;
  (%54,)
}

def @func_4875() -> (Tensor[(432), float64], Tensor[(12, 6, ?), float32]) {
  %55 = @func_1405() /* ty=(Tensor[(432), float64],) */;
  %56 = @func_1010() /* ty=(Tensor[(12, 6, ?), float32],) */;
  %57 = %55.0;
  %58 = %56.0;
  (%57, %58)
}

def @func_1138(%var_1106: Tensor[(10, 4, 1), int64], %var_1107: Tensor[(10, 4, 12), int64]) -> (Tensor[(10, 4, 12), int64], Tensor[(9, 3, 16), float64], Tensor[(10, 4, 12), float32], Tensor[(10, 4, 12), float64]) {
  %59 = cast(%var_1106, dtype="int64") /* ty=Tensor[(10, 4, 1), int64] */;
  %60 = cast(%var_1107, dtype="int64") /* ty=Tensor[(10, 4, 12), int64] */;
  %61 = @func_699() /* ty=(Tensor[(9, 3, 16), float64], Tensor[(9, 3, 16), float64]) */;
  %62 = cast(%var_1107, dtype="float32") /* ty=Tensor[(10, 4, 12), float32] */;
  %63 = cast(%var_1107, dtype="float64") /* ty=Tensor[(10, 4, 12), float64] */;
  %64 = subtract(%59, %60) /* ty=Tensor[(10, 4, 12), int64] */;
  %65 = %61.0;
  %66 = acos(%62) /* ty=Tensor[(10, 4, 12), float32] */;
  %67 = tan(%63) /* ty=Tensor[(10, 4, 12), float64] */;
  (%64, %65, %66, %67)
}

def @func_2099(%var_2076: Tensor[(3, 7, 15), float64]) -> (Tensor[(9, 3, 16), float64], Tensor[(3, 7, 15), uint32]) {
  %68 = cast(%var_2076, dtype="float64") /* ty=Tensor[(3, 7, 15), float64] */;
  %69 = rsqrt(%68) /* ty=Tensor[(3, 7, 15), float64] */;
  %70 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 7, 15), float64] */, dtype="int8") /* ty=Tensor[(3, 7, 15), int8] */;
  %71 = shape_of(%69, dtype="int32") /* ty=Tensor[(3), int32] */;
  %72 = cast(%69, dtype="int8") /* ty=Tensor[(3, 7, 15), int8] */;
  %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %74 = maximum(%72, %73) /* ty=Tensor[(3, 7, 15), int8] */;
  %75 = cast(%69, dtype="uint32") /* ty=Tensor[(3, 7, 15), uint32] */;
  %76 = shape_of(%74, dtype="int32") /* ty=Tensor[(3), int32] */;
  %77 = cast(%74, dtype="uint32") /* ty=Tensor[(3, 7, 15), uint32] */;
  %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %79 = @func_1240() /* ty=Tensor[(9, 3, 16), float64] */;
  %80 = minimum(%77, %78) /* ty=Tensor[(3, 7, 15), uint32] */;
  (%79, %80)
}

def @func_1240() -> Tensor[(9, 3, 16), float64] {
  %81 = @func_1053() /* ty=(Tensor[(9, 3, 16), float32], Tensor[(9, 3, 16), float32], Tensor[(9, 3, 16), float64]) */;
  %81.2
}

def @func_52() -> Tensor[(12, 6, ?), float32] {
  %82 = cast(meta[relay.Constant][5] /* ty=Tensor[(12, 6, 1), float32] */, dtype="float32") /* ty=Tensor[(12, 6, 1), float32] */;
  %83 = sin(%82) /* ty=Tensor[(12, 6, 1), float32] */;
  %84 = cast(%83, dtype="float32") /* ty=Tensor[(12, 6, 1), float32] */;
  %85 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(12, 6, 1), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %86 = cast(meta[relay.Constant][5] /* ty=Tensor[(12, 6, 1), float32] */, dtype="float32") /* ty=Tensor[(12, 6, 1), float32] */;
  %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  multiply(%86, %87) /* ty=Tensor[(12, 6, ?), float32] */
}

def @func_485() -> (Tensor[(9, 3, 16), float64],) {
  %88 = @func_330() /* ty=(Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64], Tensor[(432), float64], Tensor[(9, 3, 16), float64]) */;
  %89 = %88.3;
  (%89,)
}

def @func_4051(%var_4048: Tensor[(9, 16, 5), float64]) -> Tensor[(9, 16, 5), float64] {
  %90 = cast(%var_4048, dtype="float64") /* ty=Tensor[(9, 16, 5), float64] */;
  sinh(%90) /* ty=Tensor[(9, 16, 5), float64] */
}

def @func_2662(%var_2641: Tensor[(432), float64]) -> (Tensor[(11, 15, 4), float32], Tensor[(5, 9, 8), float32], Tensor[(432), float64], Tensor[(832), uint16], Tensor[(432), float64], Tensor[(12, 6, ?), float32]) {
  %91 = cast(meta[relay.Constant][6] /* ty=Tensor[(11, 15, 4), float32] */, dtype="float32") /* ty=Tensor[(11, 15, 4), float32] */;
  %92 = @func_1328() /* ty=(Tensor[(5, 9, 8), float32],) */;
  %93 = cast(meta[relay.Constant][7] /* ty=Tensor[(832), uint16] */, dtype="uint16") /* ty=Tensor[(832), uint16] */;
  %94 = cast(meta[relay.Constant][7] /* ty=Tensor[(832), uint16] */, dtype="uint16") /* ty=Tensor[(832), uint16] */;
  %95 = cast(meta[relay.Constant][7] /* ty=Tensor[(832), uint16] */, dtype="uint16") /* ty=Tensor[(832), uint16] */;
  %96 = cast(%var_2641, dtype="float64") /* ty=Tensor[(432), float64] */;
  %97 = reshape(%93, newshape=[13, 8, 8]) /* ty=Tensor[(13, 8, 8), uint16] */;
  %98 = reshape(%94, newshape=[13, 8, 8]) /* ty=Tensor[(13, 8, 8), uint16] */;
  %99 = reshape(%95, newshape=[13, 8, 8]) /* ty=Tensor[(13, 8, 8), uint16] */;
  %100 = reshape(%96, newshape=[432]) /* ty=Tensor[(432), float64] */;
  %101 = @func_974(%97, %98, %99, %100) /* ty=(Tensor[(13, 8, 8), uint16], Tensor[(12, 6, ?), float32], Tensor[(432), float64], Tensor[(13, 8, 8), bool], Tensor[(13, 8, 8), float32]) */;
  %102 = @func_431() /* ty=(Tensor[(12, 6, ?), float32], Tensor[(12, 6, ?), float32], Tensor[(12, 6, ?), float32], Tensor[(216, 2), float64], Tensor[(12, 6, ?), float32]) */;
  %103 = sinh(%91) /* ty=Tensor[(11, 15, 4), float32] */;
  %104 = %92.0;
  %105 = %101.2;
  %106 = %102.4;
  (%103, %104, %105, meta[relay.Constant][7] /* ty=Tensor[(832), uint16] */, %var_2641, %106)
}

def @func_4855() -> (Tensor[(16, 14, 12), float64], Tensor[(12, 6, 5), uint32]) {
  %107 = @func_4666() /* ty=Tensor[(12, 6, ?), float32] */;
  %108 = cast(%107, dtype="uint32") /* ty=Tensor[(12, 6, ?), uint32] */;
  %109 = cast(meta[relay.Constant][8] /* ty=Tensor[(12, 6, 5), float32] */, dtype="uint32") /* ty=Tensor[(12, 6, 5), uint32] */;
  %110 = @func_1074() /* ty=Tensor[(16, 14, 12), float64] */;
  %111 = left_shift(%108, %109) /* ty=Tensor[(12, 6, 5), uint32] */;
  (%110, %111)
}

def @func_2554() -> (Tensor[(9, 3, 16), float64],) {
  %112 = @func_1930() /* ty=Tensor[(9, 3, 16), float64] */;
  (%112,)
}

def @func_1074() -> Tensor[(16, 14, 12), float64] {
  %113 = @func_858() /* ty=(Tensor[(16, 14, 12), float64],) */;
  %113.0
}

def @func_3705(%var_3640: Tensor[(16, 1, 11), float64], %var_3659: Tensor[(324), float64], %var_3697: Tensor[(540), uint16]) -> (Tensor[(12, 15, 5), float64], Tensor[(16, ?, 11), int16], Tensor[(12, 6, ?), bool], Tensor[(324), float64], Tensor[(12, 6, ?), float32], Tensor[(6, 6, 15), bool], Tensor[(540), uint16], Tensor[(16, ?, 11), float32]) {
  %114 = @func_3291() /* ty=(Tensor[(12, 15, 5), float64],) */;
  %115 = cast(%var_3640, dtype="float64") /* ty=Tensor[(16, 1, 11), float64] */;
  %116 = exp(%115) /* ty=Tensor[(16, 1, 11), float64] */;
  %117 = cast(%116, dtype="float32") /* ty=Tensor[(16, 1, 11), float32] */;
  %118 = rsqrt(%117) /* ty=Tensor[(16, 1, 11), float32] */;
  %119 = cast(%118, dtype="int16") /* ty=Tensor[(16, 1, 11), int16] */;
  %120 = shape_of(%116, dtype="int32") /* ty=Tensor[(3), int32] */;
  %121 = cast(%116, dtype="int16") /* ty=Tensor[(16, 1, 11), int16] */;
  %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %123 = cast(%var_3659, dtype="float64") /* ty=Tensor[(324), float64] */;
  %124 = reshape(%123, newshape=[162, 2]) /* ty=Tensor[(162, 2), float64] */;
  %125 = @func_3024(%124) /* ty=(Tensor[(12, 6, ?), bool], Tensor[(5, 9, 8), float32], Tensor[(12, 6, ?), float64], Tensor[(12, 6, 432), bool], Tensor[(162, 2), float64]) */;
  %126 = @func_1104() /* ty=(Tensor[(12, 6, ?), float32],) */;
  %127 = cast(%var_3697, dtype="uint16") /* ty=Tensor[(540), uint16] */;
  %128 = reshape(%127, newshape=[6, 6, 15]) /* ty=Tensor[(6, 6, 15), uint16] */;
  %129 = cast(%118, dtype="float32") /* ty=Tensor[(16, 1, 11), float32] */;
  %130 = acos(%129) /* ty=Tensor[(16, 1, 11), float32] */;
  %131 = cast(%116, dtype="float32") /* ty=Tensor[(16, 1, 11), float32] */;
  %132 = shape_of(%130, dtype="int32") /* ty=Tensor[(3), int32] */;
  %133 = cast(%130, dtype="float32") /* ty=Tensor[(16, 1, 11), float32] */;
  %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %135 = floor_divide(%133, %134) /* ty=Tensor[(16, ?, 11), float32] */;
  %136 = cast(%135, dtype="float32") /* ty=Tensor[(16, ?, 11), float32] */;
  %137 = %114.0;
  %138 = logical_xor(%121, %122) /* ty=Tensor[(16, ?, 11), int16] */;
  %139 = %125.0;
  %140 = %126.0;
  %141 = @func_1457(%128) /* ty=Tensor[(6, 6, 15), bool] */;
  %142 = log2(%136) /* ty=Tensor[(16, ?, 11), float32] */;
  (%137, %138, %139, %var_3659, %140, %141, %var_3697, %142)
}

def @func_3587(%var_3572: Tensor[(12, 6, 10), float32], %var_3584: int64, %var_3585: Tensor[(4), int64]) -> (Tensor[(12, 6, 10), bool], Tensor[(4, 1), bool], int64, Tensor[(4), int64]) {
  %143 = @func_52() /* ty=Tensor[(12, 6, ?), float32] */;
  %144 = cast(%143, dtype="bool") /* ty=Tensor[(12, 6, ?), bool] */;
  %145 = cast(%var_3572, dtype="bool") /* ty=Tensor[(12, 6, 10), bool] */;
  %146 = cast(%var_3584, dtype="int64") /* ty=int64 */;
  %147 = cast(%var_3585, dtype="int64") /* ty=Tensor[(4), int64] */;
  %148 = reshape(%146, newshape=[]) /* ty=int64 */;
  %149 = reshape(%147, newshape=[4, 1]) /* ty=Tensor[(4, 1), int64] */;
  %150 = @func_2419(%148, %149) /* ty=(Tensor[(4, 1), bool],) */;
  %151 = equal(%144, %145) /* ty=Tensor[(12, 6, 10), bool] */;
  %152 = %150.0;
  (%151, %152, %var_3584, %var_3585)
}

def @func_1457(%var_1447: Tensor[(6, 6, 15), uint16]) -> Tensor[(6, 6, 15), bool] {
  %153 = cast(%var_1447, dtype="bool") /* ty=Tensor[(6, 6, 15), bool] */;
  %154 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(6, 6, 15), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(meta[relay.Constant][9] /* ty=Tensor[(6, 6, 15), uint16] */, dtype="bool") /* ty=Tensor[(6, 6, 15), bool] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%155, %156) /* ty=Tensor[(6, 6, 15), bool] */
}

def @func_3825(%var_3809: Tensor[(1, 5, 14), float64]) -> (Tensor[(1, 5, 14), float64], Tensor[(9, 3, 16), float32]) {
  %157 = cast(%var_3809, dtype="float64") /* ty=Tensor[(1, 5, 14), float64] */;
  %158 = @func_1053() /* ty=(Tensor[(9, 3, 16), float32], Tensor[(9, 3, 16), float32], Tensor[(9, 3, 16), float64]) */;
  %159 = asinh(%157) /* ty=Tensor[(1, 5, 14), float64] */;
  %160 = %158.0;
  (%159, %160)
}

def @func_4550() -> (Tensor[(12, 6, 9), int32], Tensor[(12, 6, 9), uint32]) {
  %161 = @func_1155() /* ty=Tensor[(12, 6, ?), float32] */;
  %162 = cast(%161, dtype="int32") /* ty=Tensor[(12, 6, ?), int32] */;
  %163 = cast(meta[relay.Constant][10] /* ty=Tensor[(12, 6, 9), float32] */, dtype="int32") /* ty=Tensor[(12, 6, 9), int32] */;
  %164 = cast(meta[relay.Constant][10] /* ty=Tensor[(12, 6, 9), float32] */, dtype="uint32") /* ty=Tensor[(12, 6, 9), uint32] */;
  %165 = cast(%161, dtype="uint32") /* ty=Tensor[(12, 6, ?), uint32] */;
  %166 = right_shift(%162, %163) /* ty=Tensor[(12, 6, 9), int32] */;
  %167 = bitwise_xor(%164, %165) /* ty=Tensor[(12, 6, 9), uint32] */;
  (%166, %167)
}

def @func_3205() -> (Tensor[(9, 3, 16), float64], Tensor[(6, 6, 15), bool], Tensor[(54, 10), uint16], Tensor[(12, 6, ?), uint8], Tensor[(12, 6, ?), float32], Tensor[(12, 6, ?), float64], Tensor[(12, 6, ?), float64], Tensor[(12, 30), float32], Tensor[(9, 3, 16), float64], Tensor[(9, 3, 16), float64]) {
  %168 = @func_2692() /* ty=(Tensor[(9, 3, 16), float64],) */;
  %169 = cast(meta[relay.Constant][11] /* ty=Tensor[(54, 10), uint16] */, dtype="uint16") /* ty=Tensor[(54, 10), uint16] */;
  %170 = reshape(%169, newshape=[6, 6, 15]) /* ty=Tensor[(6, 6, 15), uint16] */;
  %171 = @func_1104() /* ty=(Tensor[(12, 6, ?), float32],) */;
  %172 = %171.0;
  %173 = cast(%172, dtype="float32") /* ty=Tensor[(12, 6, ?), float32] */;
  %174 = atan(%173) /* ty=Tensor[(12, 6, ?), float32] */;
  %175 = cast(%172, dtype="uint8") /* ty=Tensor[(12, 6, ?), uint8] */;
  %176 = shape_of(%174, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(%174, dtype="uint8") /* ty=Tensor[(12, 6, ?), uint8] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %179 = @func_1104() /* ty=(Tensor[(12, 6, ?), float32],) */;
  %180 = cast(%174, dtype="float64") /* ty=Tensor[(12, 6, ?), float64] */;
  %181 = cast(meta[relay.Constant][12] /* ty=Tensor[(12, 30), float32] */, dtype="float32") /* ty=Tensor[(12, 30), float32] */;
  %182 = reshape(%181, newshape=[5, 9, 8]) /* ty=Tensor[(5, 9, 8), float32] */;
  %183 = @func_1585(%182) /* ty=(Tensor[(5, 9, 8), int64], Tensor[(12, 6, ?), float64]) */;
  %184 = @func_330() /* ty=(Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64], Tensor[(432), float64], Tensor[(9, 3, 16), float64]) */;
  %185 = %168.0;
  %186 = cast(%185, dtype="float64") /* ty=Tensor[(9, 3, 16), float64] */;
  %187 = cast(%185, dtype="float64") /* ty=Tensor[(9, 3, 16), float64] */;
  %188 = reshape(%186, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
  %189 = reshape(%187, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
  %190 = @func_169(%188, %189) /* ty=(Tensor[(9, 3, 16), float64],) */;
  %191 = @func_1457(%170) /* ty=Tensor[(6, 6, 15), bool] */;
  %192 = right_shift(%177, %178) /* ty=Tensor[(12, 6, ?), uint8] */;
  %193 = %179.0;
  %194 = sinh(%180) /* ty=Tensor[(12, 6, ?), float64] */;
  %195 = %183.1;
  %196 = %184.1;
  %197 = %190.0;
  (%185, %191, meta[relay.Constant][11] /* ty=Tensor[(54, 10), uint16] */, %192, %193, %194, %195, meta[relay.Constant][12] /* ty=Tensor[(12, 30), float32] */, %196, %197)
}

def @func_1086(%var_1079: uint64, %var_1080: Tensor[(3, 3, 2), uint64]) -> Tensor[(3, 3, 2), uint64] {
  %198 = cast(%var_1079, dtype="uint64") /* ty=uint64 */;
  %199 = cast(%var_1080, dtype="uint64") /* ty=Tensor[(3, 3, 2), uint64] */;
  bitwise_and(%198, %199) /* ty=Tensor[(3, 3, 2), uint64] */
}

def @func_4568() -> (Tensor[(12, 6, ?), float32],) {
  %200 = @func_2339() /* ty=(Tensor[(12, 6, ?), float32],) */;
  %201 = %200.0;
  (%201,)
}

def @func_1185() -> (Tensor[(12, 15, 5), float64],) {
  %202 = cast(meta[relay.Constant][13] /* ty=Tensor[(12, 15, 5), float64] */, dtype="float64") /* ty=Tensor[(12, 15, 5), float64] */;
  %203 = log10(%202) /* ty=Tensor[(12, 15, 5), float64] */;
  (%203,)
}

def @func_1010() -> (Tensor[(12, 6, ?), float32],) {
  %204 = @func_330() /* ty=(Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64], Tensor[(432), float64], Tensor[(9, 3, 16), float64]) */;
  %205 = %204.0;
  (%205,)
}

def @func_1813(%var_1802: Tensor[(12, 6, 4), float32]) -> (Tensor[(12, 6, 4), uint64], Tensor[(9, 3, 16), float64], Tensor[(1, 432), float64]) {
  %206 = @func_431() /* ty=(Tensor[(12, 6, ?), float32], Tensor[(12, 6, ?), float32], Tensor[(12, 6, ?), float32], Tensor[(216, 2), float64], Tensor[(12, 6, ?), float32]) */;
  %207 = %206.0;
  %208 = cast(%207, dtype="uint64") /* ty=Tensor[(12, 6, ?), uint64] */;
  %209 = cast(%var_1802, dtype="uint64") /* ty=Tensor[(12, 6, 4), uint64] */;
  %210 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 432), float64] */, dtype="float64") /* ty=Tensor[(1, 432), float64] */;
  %211 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 432), float64] */, dtype="float64") /* ty=Tensor[(1, 432), float64] */;
  %212 = reshape(%210, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
  %213 = reshape(%211, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
  %214 = @func_169(%212, %213) /* ty=(Tensor[(9, 3, 16), float64],) */;
  %215 = bitwise_and(%208, %209) /* ty=Tensor[(12, 6, 4), uint64] */;
  %216 = %214.0;
  (%215, %216, meta[relay.Constant][14] /* ty=Tensor[(1, 432), float64] */)
}

def @func_4709() -> Tensor[(9, 3, 16), float64] {
  %217 = @func_485() /* ty=(Tensor[(9, 3, 16), float64],) */;
  %217.0
}

def @func_3291() -> (Tensor[(12, 15, 5), float64],) {
  %218 = @func_1185() /* ty=(Tensor[(12, 15, 5), float64],) */;
  %219 = %218.0;
  (%219,)
}

def @func_699() -> (Tensor[(9, 3, 16), float64], Tensor[(9, 3, 16), float64]) {
  %220 = @func_485() /* ty=(Tensor[(9, 3, 16), float64],) */;
  %221 = %220.0;
  %222 = cast(%221, dtype="float64") /* ty=Tensor[(9, 3, 16), float64] */;
  %223 = cast(%221, dtype="float64") /* ty=Tensor[(9, 3, 16), float64] */;
  %224 = reshape(%222, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
  %225 = reshape(%223, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
  %226 = @func_169(%224, %225) /* ty=(Tensor[(9, 3, 16), float64],) */;
  %227 = %226.0;
  (%221, %227)
}

def @func_4143(%var_4126: Tensor[(12, 6, 1), float32]) -> (Tensor[(12, 6, ?), bool], Tensor[(5, 9, 8), float32]) {
  %228 = @func_2339() /* ty=(Tensor[(12, 6, ?), float32],) */;
  %229 = %228.0;
  %230 = cast(%var_4126, dtype="bool") /* ty=Tensor[(12, 6, 1), bool] */;
  %231 = shape_of(%229, dtype="int32") /* ty=Tensor[(3), int32] */;
  %232 = cast(%229, dtype="bool") /* ty=Tensor[(12, 6, ?), bool] */;
  %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %234 = @func_1328() /* ty=(Tensor[(5, 9, 8), float32],) */;
  %235 = less_equal(%232, %233) /* ty=Tensor[(12, 6, ?), bool] */;
  %236 = %234.0;
  (%235, %236)
}

def @func_2035(%var_1980: Tensor[(12, 12, 2), float32], %var_2013: Tensor[(12, 12, 2), float32], %var_2029: Tensor[(12, 12, 2), bool]) -> (Tensor[(12, 12, 2), float32], Tensor[(12, 12, 2), float64], Tensor[(12, 6, ?), float32], Tensor[(12, 12, 2), uint16]) {
  %237 = cast(%var_1980, dtype="float32") /* ty=Tensor[(12, 12, 2), float32] */;
  %238 = cast(%var_1980, dtype="float64") /* ty=Tensor[(12, 12, 2), float64] */;
  %239 = cast(%var_2013, dtype="bool") /* ty=Tensor[(12, 12, 2), bool] */;
  %240 = shape_of(%var_1980, dtype="int32") /* ty=Tensor[(3), int32] */;
  %241 = cast(%var_1980, dtype="bool") /* ty=Tensor[(12, 12, 2), bool] */;
  %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %243 = not_equal(%241, %242) /* ty=Tensor[(12, 12, 2), bool] */;
  %244 = cast(%var_2029, dtype="uint16") /* ty=Tensor[(12, 12, 2), uint16] */;
  %245 = shape_of(%243, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(%243, dtype="uint16") /* ty=Tensor[(12, 12, 2), uint16] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %248 = tan(%237) /* ty=Tensor[(12, 12, 2), float32] */;
  %249 = sqrt(%238) /* ty=Tensor[(12, 12, 2), float64] */;
  %250 = @func_1155() /* ty=Tensor[(12, 6, ?), float32] */;
  %251 = maximum(%246, %247) /* ty=Tensor[(12, 12, 2), uint16] */;
  (%248, %249, %250, %251)
}

def @func_2692() -> (Tensor[(9, 3, 16), float64],) {
  %252 = @func_2554() /* ty=(Tensor[(9, 3, 16), float64],) */;
  %253 = %252.0;
  %254 = cast(%253, dtype="float64") /* ty=Tensor[(9, 3, 16), float64] */;
  %255 = sqrt(%254) /* ty=Tensor[(9, 3, 16), float64] */;
  (%255,)
}

def @func_1532(%var_1526: Tensor[(480, 1), int64]) -> (Tensor[(16, 14, 12), bool], Tensor[(10, 4, 12), float32], Tensor[(1, 40), int64], Tensor[(480, 1), int64]) {
  %256 = @func_858() /* ty=(Tensor[(16, 14, 12), float64],) */;
  %257 = %256.0;
  %258 = cast(meta[relay.Constant][15] /* ty=Tensor[(16, 14, 12), float64] */, dtype="bool") /* ty=Tensor[(16, 14, 12), bool] */;
  %259 = shape_of(%257, dtype="int32") /* ty=Tensor[(3), int32] */;
  %260 = cast(%257, dtype="bool") /* ty=Tensor[(16, 14, 12), bool] */;
  %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %262 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 40), int64] */, dtype="int64") /* ty=Tensor[(1, 40), int64] */;
  %263 = cast(%var_1526, dtype="int64") /* ty=Tensor[(480, 1), int64] */;
  %264 = reshape(%262, newshape=[10, 4, 1]) /* ty=Tensor[(10, 4, 1), int64] */;
  %265 = reshape(%263, newshape=[10, 4, 12]) /* ty=Tensor[(10, 4, 12), int64] */;
  %266 = @func_1138(%264, %265) /* ty=(Tensor[(10, 4, 12), int64], Tensor[(9, 3, 16), float64], Tensor[(10, 4, 12), float32], Tensor[(10, 4, 12), float64]) */;
  %267 = logical_and(%260, %261) /* ty=Tensor[(16, 14, 12), bool] */;
  %268 = %266.2;
  (%267, %268, meta[relay.Constant][16] /* ty=Tensor[(1, 40), int64] */, %var_1526)
}

def @func_1155() -> Tensor[(12, 6, ?), float32] {
  @func_52() /* ty=Tensor[(12, 6, ?), float32] */
}

def @func_4742() -> Tensor[(12, 6, ?), float32] {
  %269 = @func_1104() /* ty=(Tensor[(12, 6, ?), float32],) */;
  %269.0
}

def @func_431() -> (Tensor[(12, 6, ?), float32], Tensor[(12, 6, ?), float32], Tensor[(12, 6, ?), float32], Tensor[(216, 2), float64], Tensor[(12, 6, ?), float32]) {
  %270 = cast(meta[relay.Constant][17] /* ty=Tensor[(216, 2), float64] */, dtype="float64") /* ty=Tensor[(216, 2), float64] */;
  %271 = reshape(%270, newshape=[432]) /* ty=Tensor[(432), float64] */;
  %272 = @func_234(%271) /* ty=(Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64], Tensor[(432), float64]) */;
  %273 = @func_52() /* ty=Tensor[(12, 6, ?), float32] */;
  %274 = @func_275() /* ty=Tensor[(12, 6, ?), float32] */;
  %275 = %272.0;
  %276 = @func_275() /* ty=Tensor[(12, 6, ?), float32] */;
  (%273, %274, %275, meta[relay.Constant][17] /* ty=Tensor[(216, 2), float64] */, %276)
}

def @func_4653() -> (Tensor[(9, 3, 16), float64], Tensor[(1, 5, 14), float64], Tensor[(7, 10), float64]) {
  %277 = @func_699() /* ty=(Tensor[(9, 3, 16), float64], Tensor[(9, 3, 16), float64]) */;
  %278 = cast(meta[relay.Constant][18] /* ty=Tensor[(7, 10), float64] */, dtype="float64") /* ty=Tensor[(7, 10), float64] */;
  %279 = reshape(%278, newshape=[1, 5, 14]) /* ty=Tensor[(1, 5, 14), float64] */;
  %280 = @func_3825(%279) /* ty=(Tensor[(1, 5, 14), float64], Tensor[(9, 3, 16), float32]) */;
  %281 = %277.0;
  %282 = %280.0;
  (%281, %282, meta[relay.Constant][18] /* ty=Tensor[(7, 10), float64] */)
}

def @func_2214(%var_2211: Tensor[(10, 6, 6), float64]) -> (Tensor[(10, 6, 6), float64],) {
  %283 = cast(%var_2211, dtype="float64") /* ty=Tensor[(10, 6, 6), float64] */;
  %284 = acos(%283) /* ty=Tensor[(10, 6, 6), float64] */;
  (%284,)
}

def @func_2339() -> (Tensor[(12, 6, ?), float32],) {
  %285 = @func_431() /* ty=(Tensor[(12, 6, ?), float32], Tensor[(12, 6, ?), float32], Tensor[(12, 6, ?), float32], Tensor[(216, 2), float64], Tensor[(12, 6, ?), float32]) */;
  %286 = %285.2;
  (%286,)
}

def @func_1916() -> (Tensor[(9, 3, 16), float64], Tensor[(9, 3, 16), float64], Tensor[(12, 6, 432), bool]) {
  %287 = @func_485() /* ty=(Tensor[(9, 3, 16), float64],) */;
  %288 = %287.0;
  %289 = cast(%288, dtype="float64") /* ty=Tensor[(9, 3, 16), float64] */;
  %290 = cast(%288, dtype="float64") /* ty=Tensor[(9, 3, 16), float64] */;
  %291 = asin(%289) /* ty=Tensor[(9, 3, 16), float64] */;
  %292 = cast(%291, dtype="float64") /* ty=Tensor[(9, 3, 16), float64] */;
  %293 = reshape(%290, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
  %294 = reshape(%292, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
  %295 = @func_169(%293, %294) /* ty=(Tensor[(9, 3, 16), float64],) */;
  %296 = @func_1155() /* ty=Tensor[(12, 6, ?), float32] */;
  %297 = @func_1405() /* ty=(Tensor[(432), float64],) */;
  %298 = %297.0;
  %299 = cast(%296, dtype="bool") /* ty=Tensor[(12, 6, ?), bool] */;
  %300 = cast(%298, dtype="bool") /* ty=Tensor[(432), bool] */;
  %301 = %295.0;
  %302 = not_equal(%299, %300) /* ty=Tensor[(12, 6, 432), bool] */;
  (%291, %301, %302)
}

def @func_109(%var_83: Tensor[(9, 12, 3), float64]) -> (Tensor[(9, 12, 3), float64], Tensor[(12, 6, ?), float32]) {
  %303 = cast(%var_83, dtype="float64") /* ty=Tensor[(9, 12, 3), float64] */;
  %304 = atan(%303) /* ty=Tensor[(9, 12, 3), float64] */;
  %305 = @func_52() /* ty=Tensor[(12, 6, ?), float32] */;
  (%304, %305)
}

def @func_2419(%var_2400: int64, %var_2401: Tensor[(4, 1), int64]) -> (Tensor[(4, 1), bool],) {
  %306 = cast(%var_2400, dtype="bool") /* ty=bool */;
  %307 = cast(%var_2401, dtype="bool") /* ty=Tensor[(4, 1), bool] */;
  %308 = equal(%306, %307) /* ty=Tensor[(4, 1), bool] */;
  (%308,)
}

def @func_2621(%var_2597: Tensor[(2, 4, 11), float64], %var_2604: Tensor[(432), float64]) -> (Tensor[(9, 3, 16), float64], Tensor[(432), float64], Tensor[(2, 4, 11), bool]) {
  %309 = cast(%var_2604, dtype="float64") /* ty=Tensor[(432), float64] */;
  %310 = cast(%var_2604, dtype="float64") /* ty=Tensor[(432), float64] */;
  %311 = reshape(%309, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
  %312 = reshape(%310, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
  %313 = @func_169(%311, %312) /* ty=(Tensor[(9, 3, 16), float64],) */;
  %314 = cast(%var_2597, dtype="float64") /* ty=Tensor[(2, 4, 11), float64] */;
  %315 = log10(%314) /* ty=Tensor[(2, 4, 11), float64] */;
  %316 = cast(meta[relay.Constant][19] /* ty=Tensor[(2, 4, 11), float64] */, dtype="bool") /* ty=Tensor[(2, 4, 11), bool] */;
  %317 = shape_of(%315, dtype="int32") /* ty=Tensor[(3), int32] */;
  %318 = cast(%315, dtype="bool") /* ty=Tensor[(2, 4, 11), bool] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %320 = %313.0;
  %321 = not_equal(%318, %319) /* ty=Tensor[(2, 4, 11), bool] */;
  (%320, %var_2604, %321)
}

def @func_4574() -> Tensor[(432), float64] {
  %322 = @func_1405() /* ty=(Tensor[(432), float64],) */;
  %322.0
}

def @func_858() -> (Tensor[(16, 14, 12), float64],) {
  %323 = cast(meta[relay.Constant][20] /* ty=Tensor[(16, 14, 12), float64] */, dtype="float64") /* ty=Tensor[(16, 14, 12), float64] */;
  %324 = cos(%323) /* ty=Tensor[(16, 14, 12), float64] */;
  (%324,)
}

def @func_4666() -> Tensor[(12, 6, ?), float32] {
  @func_275() /* ty=Tensor[(12, 6, ?), float32] */
}

def @func_169(%var_164: Tensor[(9, 3, 16), float64], %var_165: Tensor[(9, 3, 16), float64]) -> (Tensor[(9, 3, 16), float64],) {
  %325 = cast(%var_165, dtype="float64") /* ty=Tensor[(9, 3, 16), float64] */;
  %326 = shape_of(%var_164, dtype="int32") /* ty=Tensor[(3), int32] */;
  %327 = cast(%var_164, dtype="float64") /* ty=Tensor[(9, 3, 16), float64] */;
  %328 = dyn.reshape(%325, %326, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %329 = floor_divide(%327, %328) /* ty=Tensor[(9, 3, 16), float64] */;
  (%329,)
}

def @func_1053() -> (Tensor[(9, 3, 16), float32], Tensor[(9, 3, 16), float32], Tensor[(9, 3, 16), float64]) {
  %330 = @func_699() /* ty=(Tensor[(9, 3, 16), float64], Tensor[(9, 3, 16), float64]) */;
  %331 = %330.0;
  %332 = cast(%331, dtype="float32") /* ty=Tensor[(9, 3, 16), float32] */;
  %333 = cast(%331, dtype="float32") /* ty=Tensor[(9, 3, 16), float32] */;
  %334 = @func_485() /* ty=(Tensor[(9, 3, 16), float64],) */;
  %335 = acos(%332) /* ty=Tensor[(9, 3, 16), float32] */;
  %336 = sinh(%333) /* ty=Tensor[(9, 3, 16), float32] */;
  %337 = %334.0;
  (%335, %336, %337)
}

def @func_2203(%var_2181: Tensor[(432), float32], %var_2190: Tensor[(2, 20), int64]) -> (Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), float64], Tensor[(9, 3, 16), float32], Tensor[(432), float32], Tensor[(324), float64], Tensor[(23328), float32], Tensor[(9, 3, 16), float64], Tensor[(2, 20), int64], Tensor[(480), int64]) {
  %338 = @func_858() /* ty=(Tensor[(16, 14, 12), float64],) */;
  %339 = cast(%var_2181, dtype="float32") /* ty=Tensor[(432), float32] */;
  %340 = cast(meta[relay.Constant][21] /* ty=Tensor[(324), float64] */, dtype="float64") /* ty=Tensor[(324), float64] */;
  %341 = cast(meta[relay.Constant][22] /* ty=Tensor[(23328), float32] */, dtype="float32") /* ty=Tensor[(23328), float32] */;
  %342 = reshape(%339, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float32] */;
  %343 = reshape(%340, newshape=[324]) /* ty=Tensor[(324), float64] */;
  %344 = reshape(%341, newshape=[12, 6, 324]) /* ty=Tensor[(12, 6, 324), float32] */;
  %345 = @func_1709(%342, %343, %344) /* ty=(Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float32], Tensor[(9, 3, 16), bool], Tensor[(12, 6, 324), bool]) */;
  %346 = cast(%var_2190, dtype="int64") /* ty=Tensor[(2, 20), int64] */;
  %347 = cast(meta[relay.Constant][23] /* ty=Tensor[(480), int64] */, dtype="int64") /* ty=Tensor[(480), int64] */;
  %348 = reshape(%346, newshape=[10, 4, 1]) /* ty=Tensor[(10, 4, 1), int64] */;
  %349 = reshape(%347, newshape=[10, 4, 12]) /* ty=Tensor[(10, 4, 12), int64] */;
  %350 = @func_1138(%348, %349) /* ty=(Tensor[(10, 4, 12), int64], Tensor[(9, 3, 16), float64], Tensor[(10, 4, 12), float32], Tensor[(10, 4, 12), float64]) */;
  %351 = %338.0;
  %352 = @func_1074() /* ty=Tensor[(16, 14, 12), float64] */;
  %353 = %345.1;
  %354 = %350.1;
  (%351, %352, %353, %var_2181, meta[relay.Constant][21] /* ty=Tensor[(324), float64] */, meta[relay.Constant][22] /* ty=Tensor[(23328), float32] */, %354, %var_2190, meta[relay.Constant][23] /* ty=Tensor[(480), int64] */)
}

def @func_1709(%var_1657: Tensor[(9, 3, 16), float32], %var_1671: Tensor[(324), float64], %var_1695: Tensor[(12, 6, 324), float32]) -> (Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float32], Tensor[(9, 3, 16), bool], Tensor[(12, 6, 324), bool]) {
  %355 = @func_1104() /* ty=(Tensor[(12, 6, ?), float32],) */;
  %356 = @func_1053() /* ty=(Tensor[(9, 3, 16), float32], Tensor[(9, 3, 16), float32], Tensor[(9, 3, 16), float64]) */;
  %357 = %356.0;
  %358 = cast(meta[relay.Constant][24] /* ty=Tensor[(9, 3, 16), float32] */, dtype="float32") /* ty=Tensor[(9, 3, 16), float32] */;
  %359 = shape_of(%357, dtype="int32") /* ty=Tensor[(3), int32] */;
  %360 = cast(%357, dtype="float32") /* ty=Tensor[(9, 3, 16), float32] */;
  %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %362 = cast(%var_1657, dtype="bool") /* ty=Tensor[(9, 3, 16), bool] */;
  %363 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(9, 3, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %364 = cast(meta[relay.Constant][24] /* ty=Tensor[(9, 3, 16), float32] */, dtype="bool") /* ty=Tensor[(9, 3, 16), bool] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %366 = cast(%var_1671, dtype="float64") /* ty=Tensor[(324), float64] */;
  %367 = reshape(%366, newshape=[9, 12, 3]) /* ty=Tensor[(9, 12, 3), float64] */;
  %368 = @func_109(%367) /* ty=(Tensor[(9, 12, 3), float64], Tensor[(12, 6, ?), float32]) */;
  %369 = %368.1;
  %370 = cast(%369, dtype="float32") /* ty=Tensor[(12, 6, ?), float32] */;
  %371 = cosh(%370) /* ty=Tensor[(12, 6, ?), float32] */;
  %372 = cast(%371, dtype="float32") /* ty=Tensor[(12, 6, ?), float32] */;
  %373 = cast(%var_1671, dtype="float32") /* ty=Tensor[(324), float32] */;
  %374 = power(%372, %373) /* ty=Tensor[(12, 6, 324), float32] */;
  %375 = cast(%var_1695, dtype="bool") /* ty=Tensor[(12, 6, 324), bool] */;
  %376 = shape_of(%374, dtype="int32") /* ty=Tensor[(3), int32] */;
  %377 = cast(%374, dtype="bool") /* ty=Tensor[(12, 6, 324), bool] */;
  %378 = dyn.reshape(%375, %376, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %379 = %355.0;
  %380 = floor_mod(%360, %361) /* ty=Tensor[(9, 3, 16), float32] */;
  %381 = greater(%364, %365) /* ty=Tensor[(9, 3, 16), bool] */;
  %382 = less_equal(%377, %378) /* ty=Tensor[(12, 6, 324), bool] */;
  (%379, %380, %381, %382)
}

def @func_1585(%var_1566: Tensor[(5, 9, 8), float32]) -> (Tensor[(5, 9, 8), int64], Tensor[(12, 6, ?), float64]) {
  %383 = @func_1328() /* ty=(Tensor[(5, 9, 8), float32],) */;
  %384 = %383.0;
  %385 = cast(%var_1566, dtype="int64") /* ty=Tensor[(5, 9, 8), int64] */;
  %386 = shape_of(%384, dtype="int32") /* ty=Tensor[(3), int32] */;
  %387 = cast(%384, dtype="int64") /* ty=Tensor[(5, 9, 8), int64] */;
  %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %389 = @func_275() /* ty=Tensor[(12, 6, ?), float32] */;
  %390 = cast(%389, dtype="float64") /* ty=Tensor[(12, 6, ?), float64] */;
  %391 = right_shift(%387, %388) /* ty=Tensor[(5, 9, 8), int64] */;
  %392 = acosh(%390) /* ty=Tensor[(12, 6, ?), float64] */;
  (%391, %392)
}

def @func_1104() -> (Tensor[(12, 6, ?), float32],) {
  %393 = @func_1010() /* ty=(Tensor[(12, 6, ?), float32],) */;
  %394 = %393.0;
  (%394,)
}

def @func_4207() -> Tensor[(16, 14, 12), float64] {
  %395 = @func_858() /* ty=(Tensor[(16, 14, 12), float64],) */;
  %395.0
}

def @main(%var_4919: Tensor[(9, 3, 16), float64]) -> (Tensor[(9, 3, 16), uint64],) {
  %396 = @func_699() /* ty=(Tensor[(9, 3, 16), float64], Tensor[(9, 3, 16), float64]) */;
  %397 = %396.1;
  %398 = cast(%var_4919, dtype="uint64") /* ty=Tensor[(9, 3, 16), uint64] */;
  %399 = shape_of(%397, dtype="int32") /* ty=Tensor[(3), int32] */;
  %400 = cast(%397, dtype="uint64") /* ty=Tensor[(9, 3, 16), uint64] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %402 = bitwise_and(%400, %401) /* ty=Tensor[(9, 3, 16), uint64] */;
  (%402,)
}

def @func_3355(%var_3306: Tensor[(4, 6, 4), uint8], %var_3314: Tensor[(4, 6, 4), uint8], %var_3349: Tensor[(432), float64]) -> (Tensor[(4, 6, 4), uint8], Tensor[(4, 6, 4), float32], Tensor[(4, 6, 4), uint64], Tensor[(9, 3, 16), float64], Tensor[(432), float64], Tensor[(16, 14, 12), float64], Tensor[(10, 8), float32]) {
  %403 = cast(%var_3306, dtype="uint8") /* ty=Tensor[(4, 6, 4), uint8] */;
  %404 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(4, 6, 4), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %405 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 6, 4), uint8] */, dtype="uint8") /* ty=Tensor[(4, 6, 4), uint8] */;
  %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %407 = cast(%var_3314, dtype="float32") /* ty=Tensor[(4, 6, 4), float32] */;
  %408 = shape_of(%var_3306, dtype="int32") /* ty=Tensor[(3), int32] */;
  %409 = cast(%var_3306, dtype="float32") /* ty=Tensor[(4, 6, 4), float32] */;
  %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %411 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 6, 4), uint8] */, dtype="uint64") /* ty=Tensor[(4, 6, 4), uint64] */;
  %412 = shape_of(%var_3314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%var_3314, dtype="uint64") /* ty=Tensor[(4, 6, 4), uint64] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %415 = cast(%var_3349, dtype="float64") /* ty=Tensor[(432), float64] */;
  %416 = cast(%var_3349, dtype="float64") /* ty=Tensor[(432), float64] */;
  %417 = reshape(%415, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
  %418 = reshape(%416, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
  %419 = @func_169(%417, %418) /* ty=(Tensor[(9, 3, 16), float64],) */;
  %420 = @func_1860() /* ty=(Tensor[(10, 8), float32],) */;
  %421 = add(%405, %406) /* ty=Tensor[(4, 6, 4), uint8] */;
  %422 = power(%409, %410) /* ty=Tensor[(4, 6, 4), float32] */;
  %423 = left_shift(%413, %414) /* ty=Tensor[(4, 6, 4), uint64] */;
  %424 = %419.0;
  %425 = @func_1074() /* ty=Tensor[(16, 14, 12), float64] */;
  %426 = %420.0;
  (%421, %422, %423, %424, %var_3349, %425, %426)
}

def @func_1860() -> (Tensor[(10, 8), float32],) {
  %427 = cast(meta[relay.Constant][26] /* ty=Tensor[(10, 8), float32] */, dtype="float32") /* ty=Tensor[(10, 8), float32] */;
  %428 = asin(%427) /* ty=Tensor[(10, 8), float32] */;
  (%428,)
}

def @func_4807() -> (Tensor[(9, 3, 16), float64],) {
  %429 = @func_3892() /* ty=Tensor[(9, 3, 16), float64] */;
  (%429,)
}

def @func_2593() -> (Tensor[(16, 14, 12), float64],) {
  %430 = @func_858() /* ty=(Tensor[(16, 14, 12), float64],) */;
  %431 = %430.0;
  (%431,)
}

def @func_4788() -> Tensor[(9, 3, 16), float64] {
  @func_3892() /* ty=Tensor[(9, 3, 16), float64] */
}

def @func_4469(%var_4419: Tensor[(16, 14, 12), float64]) -> (Tensor[(16, 14, 12), uint8], Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64]) {
  %432 = @func_1074() /* ty=Tensor[(16, 14, 12), float64] */;
  %433 = cast(%var_4419, dtype="uint8") /* ty=Tensor[(16, 14, 12), uint8] */;
  %434 = shape_of(%432, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%432, dtype="uint8") /* ty=Tensor[(16, 14, 12), uint8] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %437 = @func_330() /* ty=(Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64], Tensor[(432), float64], Tensor[(9, 3, 16), float64]) */;
  %438 = %437.3;
  %439 = cast(%438, dtype="float64") /* ty=Tensor[(9, 3, 16), float64] */;
  %440 = right_shift(%435, %436) /* ty=Tensor[(16, 14, 12), uint8] */;
  %441 = @func_52() /* ty=Tensor[(12, 6, ?), float32] */;
  %442 = cos(%439) /* ty=Tensor[(9, 3, 16), float64] */;
  (%440, %441, %442)
}

def @func_908(%var_883: Tensor[(12, 6, 10), float32]) -> (Tensor[(12, 6, 10), bool], Tensor[(12, 6, ?), float32], Tensor[(12, 6, 10), int16]) {
  %443 = @func_431() /* ty=(Tensor[(12, 6, ?), float32], Tensor[(12, 6, ?), float32], Tensor[(12, 6, ?), float32], Tensor[(216, 2), float64], Tensor[(12, 6, ?), float32]) */;
  %444 = %443.1;
  %445 = cast(%444, dtype="int8") /* ty=Tensor[(12, 6, ?), int8] */;
  %446 = cast(%var_883, dtype="int8") /* ty=Tensor[(12, 6, 10), int8] */;
  %447 = multiply(%445, %446) /* ty=Tensor[(12, 6, 10), int8] */;
  %448 = cast(%var_883, dtype="bool") /* ty=Tensor[(12, 6, 10), bool] */;
  %449 = shape_of(%447, dtype="int32") /* ty=Tensor[(3), int32] */;
  %450 = cast(%447, dtype="bool") /* ty=Tensor[(12, 6, 10), bool] */;
  %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %452 = cast(%444, dtype="int16") /* ty=Tensor[(12, 6, ?), int16] */;
  %453 = cast(%447, dtype="int16") /* ty=Tensor[(12, 6, 10), int16] */;
  %454 = greater(%450, %451) /* ty=Tensor[(12, 6, 10), bool] */;
  %455 = @func_275() /* ty=Tensor[(12, 6, ?), float32] */;
  %456 = subtract(%452, %453) /* ty=Tensor[(12, 6, 10), int16] */;
  (%454, %455, %456)
}

def @func_1966() -> Tensor[(9, 3, 16), float64] {
  @func_1240() /* ty=Tensor[(9, 3, 16), float64] */
}

def @func_3753() -> (Tensor[(16, 14, 12), float64],) {
  %457 = @func_2593() /* ty=(Tensor[(16, 14, 12), float64],) */;
  %458 = %457.0;
  (%458,)
}

def @func_2823(%var_2769: Tensor[(3, 9, 7), uint64], %var_2770: Tensor[(3, 9, 7), uint64]) -> (Tensor[(3, 9, 7), uint64], Tensor[(1, 14), float64], Tensor[(10, 8), float32], Tensor[(9, 3, 16), float64]) {
  %459 = cast(%var_2770, dtype="uint64") /* ty=Tensor[(3, 9, 7), uint64] */;
  %460 = shape_of(%var_2769, dtype="int32") /* ty=Tensor[(3), int32] */;
  %461 = cast(%var_2769, dtype="uint64") /* ty=Tensor[(3, 9, 7), uint64] */;
  %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %463 = @func_1387() /* ty=(Tensor[(1, 14), float64],) */;
  %464 = @func_1860() /* ty=(Tensor[(10, 8), float32],) */;
  %465 = @func_485() /* ty=(Tensor[(9, 3, 16), float64],) */;
  %466 = add(%461, %462) /* ty=Tensor[(3, 9, 7), uint64] */;
  %467 = %463.0;
  %468 = %464.0;
  %469 = %465.0;
  (%466, %467, %468, %469)
}

def @func_3024(%var_2949: Tensor[(162, 2), float64]) -> (Tensor[(12, 6, ?), bool], Tensor[(5, 9, 8), float32], Tensor[(12, 6, ?), float64], Tensor[(12, 6, 432), bool], Tensor[(162, 2), float64]) {
  %470 = @func_1010() /* ty=(Tensor[(12, 6, ?), float32],) */;
  %471 = %470.0;
  %472 = cast(%471, dtype="float64") /* ty=Tensor[(12, 6, ?), float64] */;
  %473 = cos(%472) /* ty=Tensor[(12, 6, ?), float64] */;
  %474 = cast(%var_2949, dtype="float64") /* ty=Tensor[(162, 2), float64] */;
  %475 = reshape(%474, newshape=[9, 12, 3]) /* ty=Tensor[(9, 12, 3), float64] */;
  %476 = @func_109(%475) /* ty=(Tensor[(9, 12, 3), float64], Tensor[(12, 6, ?), float32]) */;
  %477 = %476.1;
  %478 = cast(%477, dtype="bool") /* ty=Tensor[(12, 6, ?), bool] */;
  %479 = shape_of(%473, dtype="int32") /* ty=Tensor[(3), int32] */;
  %480 = cast(%473, dtype="bool") /* ty=Tensor[(12, 6, ?), bool] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %482 = @func_1328() /* ty=(Tensor[(5, 9, 8), float32],) */;
  %483 = %482.0;
  %484 = cast(%483, dtype="float32") /* ty=Tensor[(5, 9, 8), float32] */;
  %485 = reshape(%484, newshape=[5, 9, 8]) /* ty=Tensor[(5, 9, 8), float32] */;
  %486 = @func_1585(%485) /* ty=(Tensor[(5, 9, 8), int64], Tensor[(12, 6, ?), float64]) */;
  %487 = @func_1916() /* ty=(Tensor[(9, 3, 16), float64], Tensor[(9, 3, 16), float64], Tensor[(12, 6, 432), bool]) */;
  %488 = %487.2;
  %489 = cast(%488, dtype="float32") /* ty=Tensor[(12, 6, 432), float32] */;
  %490 = log(%489) /* ty=Tensor[(12, 6, 432), float32] */;
  %491 = cast(%473, dtype="bool") /* ty=Tensor[(12, 6, ?), bool] */;
  %492 = cast(%490, dtype="bool") /* ty=Tensor[(12, 6, 432), bool] */;
  %493 = cast(meta[relay.Constant][27] /* ty=Tensor[(162, 2), float64] */, dtype="bool") /* ty=Tensor[(162, 2), bool] */;
  %494 = shape_of(%var_2949, dtype="int32") /* ty=Tensor[(2), int32] */;
  %495 = cast(%var_2949, dtype="bool") /* ty=Tensor[(162, 2), bool] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %497 = less(%495, %496) /* ty=Tensor[(162, 2), bool] */;
  %498 = cast(%497, dtype="float64") /* ty=Tensor[(162, 2), float64] */;
  %499 = equal(%480, %481) /* ty=Tensor[(12, 6, ?), bool] */;
  %500 = %486.1;
  %501 = greater_equal(%491, %492) /* ty=Tensor[(12, 6, 432), bool] */;
  %502 = sinh(%498) /* ty=Tensor[(162, 2), float64] */;
  (%499, %483, %500, %501, %502)
}

def @func_1279(%var_1270: Tensor[(6, 8, 16), float32]) -> (Tensor[(6, 8, 16), float32], Tensor[(6, 8, 16), float64]) {
  %503 = cast(%var_1270, dtype="float32") /* ty=Tensor[(6, 8, 16), float32] */;
  %504 = cast(%var_1270, dtype="float64") /* ty=Tensor[(6, 8, 16), float64] */;
  %505 = exp(%503) /* ty=Tensor[(6, 8, 16), float32] */;
  %506 = sigmoid(%504) /* ty=Tensor[(6, 8, 16), float64] */;
  (%505, %506)
}

def @func_4201(%var_4186: Tensor[(9, 3, 16), float32]) -> (Tensor[(9, 3, 16), float64], Tensor[(9, 3, 16), uint32], Tensor[(12, 6, 4), uint64], Tensor[(288), float32]) {
  %507 = @func_3892() /* ty=Tensor[(9, 3, 16), float64] */;
  %508 = cast(%507, dtype="float32") /* ty=Tensor[(9, 3, 16), float32] */;
  %509 = sin(%508) /* ty=Tensor[(9, 3, 16), float32] */;
  %510 = cast(%var_4186, dtype="uint32") /* ty=Tensor[(9, 3, 16), uint32] */;
  %511 = shape_of(%509, dtype="int32") /* ty=Tensor[(3), int32] */;
  %512 = cast(%509, dtype="uint32") /* ty=Tensor[(9, 3, 16), uint32] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %514 = cast(meta[relay.Constant][28] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %515 = reshape(%514, newshape=[12, 6, 4]) /* ty=Tensor[(12, 6, 4), float32] */;
  %516 = @func_1813(%515) /* ty=(Tensor[(12, 6, 4), uint64], Tensor[(9, 3, 16), float64], Tensor[(1, 432), float64]) */;
  %517 = @func_1966() /* ty=Tensor[(9, 3, 16), float64] */;
  %518 = right_shift(%512, %513) /* ty=Tensor[(9, 3, 16), uint32] */;
  %519 = %516.0;
  (%517, %518, %519, meta[relay.Constant][28] /* ty=Tensor[(288), float32] */)
}

def @func_1387() -> (Tensor[(1, 14), float64],) {
  %520 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 14), float64] */, dtype="float64") /* ty=Tensor[(1, 14), float64] */;
  %521 = atanh(%520) /* ty=Tensor[(1, 14), float64] */;
  (%521,)
}

def @func_3623(%var_3607: Tensor[(9, 11, 5), uint16], %var_3608: Tensor[(9, 11, 5), uint16]) -> (Tensor[(9, 11, 5), uint16], Tensor[(9, 3, 16), float64]) {
  %522 = cast(%var_3608, dtype="uint16") /* ty=Tensor[(9, 11, 5), uint16] */;
  %523 = shape_of(%var_3607, dtype="int32") /* ty=Tensor[(3), int32] */;
  %524 = cast(%var_3607, dtype="uint16") /* ty=Tensor[(9, 11, 5), uint16] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %526 = @func_485() /* ty=(Tensor[(9, 3, 16), float64],) */;
  %527 = multiply(%524, %525) /* ty=Tensor[(9, 11, 5), uint16] */;
  %528 = %526.0;
  (%527, %528)
}

def @func_3417(%var_3383: Tensor[(12, 15, 5), float64], %var_3400: Tensor[(324), float64]) -> (Tensor[(12, 15, 5), float64], Tensor[(12, 6, ?), float32], Tensor[(12, 6, ?), float32], Tensor[(162, 2), bool]) {
  %529 = @func_3291() /* ty=(Tensor[(12, 15, 5), float64],) */;
  %530 = %529.0;
  %531 = cast(%var_3383, dtype="float64") /* ty=Tensor[(12, 15, 5), float64] */;
  %532 = shape_of(%530, dtype="int32") /* ty=Tensor[(3), int32] */;
  %533 = cast(%530, dtype="float64") /* ty=Tensor[(12, 15, 5), float64] */;
  %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %535 = @func_330() /* ty=(Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64], Tensor[(432), float64], Tensor[(9, 3, 16), float64]) */;
  %536 = @func_330() /* ty=(Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64], Tensor[(432), float64], Tensor[(9, 3, 16), float64]) */;
  %537 = cast(%var_3400, dtype="float64") /* ty=Tensor[(324), float64] */;
  %538 = reshape(%537, newshape=[162, 2]) /* ty=Tensor[(162, 2), float64] */;
  %539 = @func_3024(%538) /* ty=(Tensor[(12, 6, ?), bool], Tensor[(5, 9, 8), float32], Tensor[(12, 6, ?), float64], Tensor[(12, 6, 432), bool], Tensor[(162, 2), float64]) */;
  %540 = %539.4;
  %541 = cast(%var_3400, dtype="bool") /* ty=Tensor[(324), bool] */;
  %542 = shape_of(%540, dtype="int32") /* ty=Tensor[(2), int32] */;
  %543 = cast(%540, dtype="bool") /* ty=Tensor[(162, 2), bool] */;
  %544 = dyn.reshape(%541, %542, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %545 = minimum(%533, %534) /* ty=Tensor[(12, 15, 5), float64] */;
  %546 = %535.0;
  %547 = %536.0;
  %548 = not_equal(%543, %544) /* ty=Tensor[(162, 2), bool] */;
  (%545, %546, %547, %548)
}

def @func_1405() -> (Tensor[(432), float64],) {
  %549 = @func_330() /* ty=(Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64], Tensor[(432), float64], Tensor[(9, 3, 16), float64]) */;
  %550 = %549.2;
  (%550,)
}

def @func_4008() -> (Tensor[(16, 14, 12), float64], Tensor[(5, 9, 8), bool], Tensor[(5, 9, 8), float64]) {
  %551 = @func_858() /* ty=(Tensor[(16, 14, 12), float64],) */;
  %552 = @func_1328() /* ty=(Tensor[(5, 9, 8), float32],) */;
  %553 = %552.0;
  %554 = cast(%553, dtype="float32") /* ty=Tensor[(5, 9, 8), float32] */;
  %555 = asin(%554) /* ty=Tensor[(5, 9, 8), float32] */;
  %556 = cast(%555, dtype="float64") /* ty=Tensor[(5, 9, 8), float64] */;
  %557 = erf(%556) /* ty=Tensor[(5, 9, 8), float64] */;
  %558 = cast(%555, dtype="float32") /* ty=Tensor[(5, 9, 8), float32] */;
  %559 = log(%558) /* ty=Tensor[(5, 9, 8), float32] */;
  %560 = cast(%559, dtype="bool") /* ty=Tensor[(5, 9, 8), bool] */;
  %561 = shape_of(%557, dtype="int32") /* ty=Tensor[(3), int32] */;
  %562 = cast(%557, dtype="bool") /* ty=Tensor[(5, 9, 8), bool] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %564 = cast(%559, dtype="float32") /* ty=Tensor[(5, 9, 8), float32] */;
  %565 = tan(%564) /* ty=Tensor[(5, 9, 8), float32] */;
  %566 = cast(%559, dtype="bool") /* ty=Tensor[(5, 9, 8), bool] */;
  %567 = shape_of(%565, dtype="int32") /* ty=Tensor[(3), int32] */;
  %568 = cast(%565, dtype="bool") /* ty=Tensor[(5, 9, 8), bool] */;
  %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %570 = equal(%568, %569) /* ty=Tensor[(5, 9, 8), bool] */;
  %571 = cast(%570, dtype="float64") /* ty=Tensor[(5, 9, 8), float64] */;
  %572 = %551.0;
  %573 = greater_equal(%562, %563) /* ty=Tensor[(5, 9, 8), bool] */;
  %574 = sigmoid(%571) /* ty=Tensor[(5, 9, 8), float64] */;
  (%572, %573, %574)
}

def @func_4603(%var_4594: uint64) -> (Tensor[(9, 1, 14), uint64],) {
  %575 = cast(%var_4594, dtype="uint64") /* ty=uint64 */;
  %576 = cast(meta[relay.Constant][30] /* ty=Tensor[(9, 1, 14), uint64] */, dtype="uint64") /* ty=Tensor[(9, 1, 14), uint64] */;
  %577 = bitwise_or(%575, %576) /* ty=Tensor[(9, 1, 14), uint64] */;
  (%577,)
}

def @func_4328(%var_4300: Tensor[(5, 11), float64]) -> (Tensor[(5, 11), float64], Tensor[(10, 8), float32], Tensor[(12, 6, 10), bool], Tensor[(720), float32]) {
  %578 = cast(%var_4300, dtype="float64") /* ty=Tensor[(5, 11), float64] */;
  %579 = @func_1860() /* ty=(Tensor[(10, 8), float32],) */;
  %580 = cast(meta[relay.Constant][31] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %581 = reshape(%580, newshape=[12, 6, 10]) /* ty=Tensor[(12, 6, 10), float32] */;
  %582 = @func_908(%581) /* ty=(Tensor[(12, 6, 10), bool], Tensor[(12, 6, ?), float32], Tensor[(12, 6, 10), int16]) */;
  %583 = asinh(%578) /* ty=Tensor[(5, 11), float64] */;
  %584 = %579.0;
  %585 = %582.0;
  (%583, %584, %585, meta[relay.Constant][31] /* ty=Tensor[(720), float32] */)
}

def @func_974(%var_922: Tensor[(13, 8, 8), uint16], %var_923: Tensor[(13, 8, 8), uint16], %var_930: Tensor[(13, 8, 8), uint16], %var_940: Tensor[(432), float64]) -> (Tensor[(13, 8, 8), uint16], Tensor[(12, 6, ?), float32], Tensor[(432), float64], Tensor[(13, 8, 8), bool], Tensor[(13, 8, 8), float32]) {
  %586 = cast(%var_923, dtype="uint16") /* ty=Tensor[(13, 8, 8), uint16] */;
  %587 = shape_of(%var_922, dtype="int32") /* ty=Tensor[(3), int32] */;
  %588 = cast(%var_922, dtype="uint16") /* ty=Tensor[(13, 8, 8), uint16] */;
  %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %590 = cast(%var_940, dtype="float64") /* ty=Tensor[(432), float64] */;
  %591 = reshape(%590, newshape=[432]) /* ty=Tensor[(432), float64] */;
  %592 = @func_234(%591) /* ty=(Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64], Tensor[(432), float64]) */;
  %593 = cast(%var_930, dtype="bool") /* ty=Tensor[(13, 8, 8), bool] */;
  %594 = shape_of(%var_923, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(%var_923, dtype="bool") /* ty=Tensor[(13, 8, 8), bool] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %597 = logical_or(%595, %596) /* ty=Tensor[(13, 8, 8), bool] */;
  %598 = cast(%var_930, dtype="int16") /* ty=Tensor[(13, 8, 8), int16] */;
  %599 = shape_of(%597, dtype="int32") /* ty=Tensor[(3), int32] */;
  %600 = cast(%597, dtype="int16") /* ty=Tensor[(13, 8, 8), int16] */;
  %601 = dyn.reshape(%598, %599, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %602 = add(%600, %601) /* ty=Tensor[(13, 8, 8), int16] */;
  %603 = cast(%var_930, dtype="uint32") /* ty=Tensor[(13, 8, 8), uint32] */;
  %604 = shape_of(%var_923, dtype="int32") /* ty=Tensor[(3), int32] */;
  %605 = cast(%var_923, dtype="uint32") /* ty=Tensor[(13, 8, 8), uint32] */;
  %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %607 = logical_xor(%605, %606) /* ty=Tensor[(13, 8, 8), uint32] */;
  %608 = cast(%607, dtype="bool") /* ty=Tensor[(13, 8, 8), bool] */;
  %609 = shape_of(%602, dtype="int32") /* ty=Tensor[(3), int32] */;
  %610 = cast(%602, dtype="bool") /* ty=Tensor[(13, 8, 8), bool] */;
  %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %612 = cast(%607, dtype="float32") /* ty=Tensor[(13, 8, 8), float32] */;
  %613 = left_shift(%588, %589) /* ty=Tensor[(13, 8, 8), uint16] */;
  %614 = %592.0;
  %615 = greater(%610, %611) /* ty=Tensor[(13, 8, 8), bool] */;
  %616 = rsqrt(%612) /* ty=Tensor[(13, 8, 8), float32] */;
  (%613, %614, %var_940, %615, %616)
}

def @func_3078() -> (Tensor[(9, 3, 16), float64], Tensor[(1, 14), float64]) {
  %617 = @func_2737() /* ty=(Tensor[(9, 3, 16), float64],) */;
  %618 = @func_1387() /* ty=(Tensor[(1, 14), float64],) */;
  %619 = %617.0;
  %620 = %618.0;
  (%619, %620)
}

def @func_2365() -> (Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64]) {
  %621 = @func_1104() /* ty=(Tensor[(12, 6, ?), float32],) */;
  %622 = @func_1916() /* ty=(Tensor[(9, 3, 16), float64], Tensor[(9, 3, 16), float64], Tensor[(12, 6, 432), bool]) */;
  %623 = %621.0;
  %624 = %622.1;
  (%623, %624)
}

def @func_234(%var_220: Tensor[(432), float64]) -> (Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64], Tensor[(432), float64]) {
  %625 = cast(%var_220, dtype="float64") /* ty=Tensor[(432), float64] */;
  %626 = cast(%var_220, dtype="float64") /* ty=Tensor[(432), float64] */;
  %627 = reshape(%625, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
  %628 = reshape(%626, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
  %629 = @func_169(%627, %628) /* ty=(Tensor[(9, 3, 16), float64],) */;
  %630 = @func_52() /* ty=Tensor[(12, 6, ?), float32] */;
  %631 = %629.0;
  (%630, %631, %var_220)
}

def @func_2737() -> (Tensor[(9, 3, 16), float64],) {
  %632 = @func_2365() /* ty=(Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64]) */;
  %633 = %632.1;
  (%633,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_332() -> (Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64], Tensor[(432), float64], Tensor[(9, 3, 16), float64]) {
  @func_330() /* ty=(Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64], Tensor[(432), float64], Tensor[(9, 3, 16), float64]) */
}

def @func_2340() -> (Tensor[(12, 6, ?), float32],) {
  %2 = fn () -> (Tensor[(12, 6, ?), float32],) {
    %0 = @func_431() /* ty=(Tensor[(12, 6, ?), float32], Tensor[(12, 6, ?), float32], Tensor[(12, 6, ?), float32], Tensor[(216, 2), float64], Tensor[(12, 6, ?), float32]) */;
    %1 = %0.2;
    (%1,)
  };
  %2() /* ty=(Tensor[(12, 6, ?), float32],) */
}

def @func_1012() -> (Tensor[(12, 6, ?), float32],) {
  @func_1010() /* ty=(Tensor[(12, 6, ?), float32],) */
}

def @func_4761() -> (Tensor[(9, 3, 16), float64],) {
  %5 = fn () -> (Tensor[(9, 3, 16), float64],) {
    %3 = @func_2737() /* ty=(Tensor[(9, 3, 16), float64],) */;
    %4 = %3.0;
    (%4,)
  };
  %5() /* ty=(Tensor[(9, 3, 16), float64],) */
}

def @main(%var_4919: Tensor[(9, 3, 16), float64]) -> (Tensor[(9, 3, 16), uint64],) {
  %6 = @func_701() /* ty=(Tensor[(9, 3, 16), float64], Tensor[(9, 3, 16), float64]) */;
  %7 = %6.1;
  %8 = cast(%var_4919, dtype="uint64") /* ty=Tensor[(9, 3, 16), uint64] */;
  %9 = shape_of(%7, dtype="int32") /* ty=Tensor[(3), int32] */;
  %10 = cast(%7, dtype="uint64") /* ty=Tensor[(9, 3, 16), uint64] */;
  %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %12 = bitwise_and(%10, %11) /* ty=Tensor[(9, 3, 16), uint64] */;
  (%12,)
}

def @func_4146(%var_4144: Tensor[(12, 6, 1), float32]) -> (Tensor[(12, 6, ?), bool], Tensor[(5, 9, 8), float32]) {
  @func_4143(%var_4144) /* ty=(Tensor[(12, 6, ?), bool], Tensor[(5, 9, 8), float32]) */
}

def @func_3592(%var_3589: Tensor[(12, 6, 10), float32], %var_3590: int64, %var_3591: Tensor[(4), int64]) -> (Tensor[(12, 6, 10), bool], Tensor[(4, 1), bool], int64, Tensor[(4), int64]) {
  @func_3587(%var_3589, %var_3590, %var_3591) /* ty=(Tensor[(12, 6, 10), bool], Tensor[(4, 1), bool], int64, Tensor[(4), int64]) */
}

def @func_1388() -> (Tensor[(1, 14), float64],) {
  %15 = fn () -> (Tensor[(1, 14), float64],) {
    %13 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 14), float64] */, dtype="float64") /* ty=Tensor[(1, 14), float64] */;
    %14 = atanh(%13) /* ty=Tensor[(1, 14), float64] */;
    (%14,)
  };
  %15() /* ty=(Tensor[(1, 14), float64],) */
}

def @func_1053() -> (Tensor[(9, 3, 16), float32], Tensor[(9, 3, 16), float32], Tensor[(9, 3, 16), float64]) {
  %16 = @func_699() /* ty=(Tensor[(9, 3, 16), float64], Tensor[(9, 3, 16), float64]) */;
  %17 = %16.0;
  %18 = cast(%17, dtype="float32") /* ty=Tensor[(9, 3, 16), float32] */;
  %19 = cast(%17, dtype="float32") /* ty=Tensor[(9, 3, 16), float32] */;
  %20 = @func_485() /* ty=(Tensor[(9, 3, 16), float64],) */;
  %21 = acos(%18) /* ty=Tensor[(9, 3, 16), float32] */;
  %22 = sinh(%19) /* ty=Tensor[(9, 3, 16), float32] */;
  %23 = %20.0;
  (%21, %22, %23)
}

def @func_1815(%var_1814: Tensor[(12, 6, 4), float32]) -> (Tensor[(12, 6, 4), uint64], Tensor[(9, 3, 16), float64], Tensor[(1, 432), float64]) {
  %35 = fn (%var_1802: Tensor[(12, 6, 4), float32]) -> (Tensor[(12, 6, 4), uint64], Tensor[(9, 3, 16), float64], Tensor[(1, 432), float64]) {
    %24 = @func_431() /* ty=(Tensor[(12, 6, ?), float32], Tensor[(12, 6, ?), float32], Tensor[(12, 6, ?), float32], Tensor[(216, 2), float64], Tensor[(12, 6, ?), float32]) */;
    %25 = %24.0;
    %26 = cast(%25, dtype="uint64") /* ty=Tensor[(12, 6, ?), uint64] */;
    %27 = cast(%var_1802, dtype="uint64") /* ty=Tensor[(12, 6, 4), uint64] */;
    %28 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 432), float64] */, dtype="float64") /* ty=Tensor[(1, 432), float64] */;
    %29 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 432), float64] */, dtype="float64") /* ty=Tensor[(1, 432), float64] */;
    %30 = reshape(%28, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
    %31 = reshape(%29, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
    %32 = @func_169(%30, %31) /* ty=(Tensor[(9, 3, 16), float64],) */;
    %33 = bitwise_and(%26, %27) /* ty=Tensor[(12, 6, 4), uint64] */;
    %34 = %32.0;
    (%33, %34, meta[relay.Constant][1] /* ty=Tensor[(1, 432), float64] */)
  };
  %35(%var_1814) /* ty=(Tensor[(12, 6, 4), uint64], Tensor[(9, 3, 16), float64], Tensor[(1, 432), float64]) */
}

def @func_1861() -> (Tensor[(10, 8), float32],) {
  %38 = fn () -> (Tensor[(10, 8), float32],) {
    %36 = cast(meta[relay.Constant][2] /* ty=Tensor[(10, 8), float32] */, dtype="float32") /* ty=Tensor[(10, 8), float32] */;
    %37 = asin(%36) /* ty=Tensor[(10, 8), float32] */;
    (%37,)
  };
  %38() /* ty=(Tensor[(10, 8), float32],) */
}

def @func_1585(%var_1566: Tensor[(5, 9, 8), float32]) -> (Tensor[(5, 9, 8), int64], Tensor[(12, 6, ?), float64]) {
  %39 = @func_1328() /* ty=(Tensor[(5, 9, 8), float32],) */;
  %40 = %39.0;
  %41 = cast(%var_1566, dtype="int64") /* ty=Tensor[(5, 9, 8), int64] */;
  %42 = shape_of(%40, dtype="int32") /* ty=Tensor[(3), int32] */;
  %43 = cast(%40, dtype="int64") /* ty=Tensor[(5, 9, 8), int64] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %45 = @func_275() /* ty=Tensor[(12, 6, ?), float32] */;
  %46 = cast(%45, dtype="float64") /* ty=Tensor[(12, 6, ?), float64] */;
  %47 = right_shift(%43, %44) /* ty=Tensor[(5, 9, 8), int64] */;
  %48 = acosh(%46) /* ty=Tensor[(12, 6, ?), float64] */;
  (%47, %48)
}

def @func_3710(%var_3707: Tensor[(16, 1, 11), float64], %var_3708: Tensor[(324), float64], %var_3709: Tensor[(540), uint16]) -> (Tensor[(12, 15, 5), float64], Tensor[(16, ?, 11), int16], Tensor[(12, 6, ?), bool], Tensor[(324), float64], Tensor[(12, 6, ?), float32], Tensor[(6, 6, 15), bool], Tensor[(540), uint16], Tensor[(16, ?, 11), float32]) {
  @func_3705(%var_3707, %var_3708, %var_3709) /* ty=(Tensor[(12, 15, 5), float64], Tensor[(16, ?, 11), int16], Tensor[(12, 6, ?), bool], Tensor[(324), float64], Tensor[(12, 6, ?), float32], Tensor[(6, 6, 15), bool], Tensor[(540), uint16], Tensor[(16, ?, 11), float32]) */
}

def @func_2665(%var_2663: Tensor[(432), float64]) -> (Tensor[(11, 15, 4), float32], Tensor[(5, 9, 8), float32], Tensor[(432), float64], Tensor[(832), uint16], Tensor[(432), float64], Tensor[(12, 6, ?), float32]) {
  @func_2662(%var_2663) /* ty=(Tensor[(11, 15, 4), float32], Tensor[(5, 9, 8), float32], Tensor[(432), float64], Tensor[(832), uint16], Tensor[(432), float64], Tensor[(12, 6, ?), float32]) */
}

def @func_699() -> (Tensor[(9, 3, 16), float64], Tensor[(9, 3, 16), float64]) {
  %49 = @func_485() /* ty=(Tensor[(9, 3, 16), float64],) */;
  %50 = %49.0;
  %51 = cast(%50, dtype="float64") /* ty=Tensor[(9, 3, 16), float64] */;
  %52 = cast(%50, dtype="float64") /* ty=Tensor[(9, 3, 16), float64] */;
  %53 = reshape(%51, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
  %54 = reshape(%52, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
  %55 = @func_169(%53, %54) /* ty=(Tensor[(9, 3, 16), float64],) */;
  %56 = %55.0;
  (%50, %56)
}

def @func_4051(%var_4048: Tensor[(9, 16, 5), float64]) -> Tensor[(9, 16, 5), float64] {
  %57 = cast(%var_4048, dtype="float64") /* ty=Tensor[(9, 16, 5), float64] */;
  sinh(%57) /* ty=Tensor[(9, 16, 5), float64] */
}

def @func_3627(%var_3625: Tensor[(9, 11, 5), uint16], %var_3626: Tensor[(9, 11, 5), uint16]) -> (Tensor[(9, 11, 5), uint16], Tensor[(9, 3, 16), float64]) {
  @func_3623(%var_3625, %var_3626) /* ty=(Tensor[(9, 11, 5), uint16], Tensor[(9, 3, 16), float64]) */
}

def @func_1588(%var_1586: Tensor[(5, 9, 8), float32]) -> (Tensor[(5, 9, 8), int64], Tensor[(12, 6, ?), float64]) {
  @func_1585(%var_1586) /* ty=(Tensor[(5, 9, 8), int64], Tensor[(12, 6, ?), float64]) */
}

def @func_1142(%var_1140: Tensor[(10, 4, 1), int64], %var_1141: Tensor[(10, 4, 12), int64]) -> (Tensor[(10, 4, 12), int64], Tensor[(9, 3, 16), float64], Tensor[(10, 4, 12), float32], Tensor[(10, 4, 12), float64]) {
  @func_1138(%var_1140, %var_1141) /* ty=(Tensor[(10, 4, 12), int64], Tensor[(9, 3, 16), float64], Tensor[(10, 4, 12), float32], Tensor[(10, 4, 12), float64]) */
}

def @func_2624(%var_2622: Tensor[(2, 4, 11), float64], %var_2623: Tensor[(432), float64]) -> (Tensor[(9, 3, 16), float64], Tensor[(432), float64], Tensor[(2, 4, 11), bool]) {
  %71 = fn (%var_2597: Tensor[(2, 4, 11), float64], %var_2604: Tensor[(432), float64]) -> (Tensor[(9, 3, 16), float64], Tensor[(432), float64], Tensor[(2, 4, 11), bool]) {
    %58 = cast(%var_2604, dtype="float64") /* ty=Tensor[(432), float64] */;
    %59 = cast(%var_2604, dtype="float64") /* ty=Tensor[(432), float64] */;
    %60 = reshape(%58, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
    %61 = reshape(%59, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
    %62 = @func_169(%60, %61) /* ty=(Tensor[(9, 3, 16), float64],) */;
    %63 = cast(%var_2597, dtype="float64") /* ty=Tensor[(2, 4, 11), float64] */;
    %64 = log10(%63) /* ty=Tensor[(2, 4, 11), float64] */;
    %65 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 4, 11), float64] */, dtype="bool") /* ty=Tensor[(2, 4, 11), bool] */;
    %66 = shape_of(%64, dtype="int32") /* ty=Tensor[(3), int32] */;
    %67 = cast(%64, dtype="bool") /* ty=Tensor[(2, 4, 11), bool] */;
    %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %69 = %62.0;
    %70 = not_equal(%67, %68) /* ty=Tensor[(2, 4, 11), bool] */;
    (%69, %var_2604, %70)
  };
  %71(%var_2622, %var_2623) /* ty=(Tensor[(9, 3, 16), float64], Tensor[(432), float64], Tensor[(2, 4, 11), bool]) */
}

def @func_3026(%var_3025: Tensor[(162, 2), float64]) -> (Tensor[(12, 6, ?), bool], Tensor[(5, 9, 8), float32], Tensor[(12, 6, ?), float64], Tensor[(12, 6, 432), bool], Tensor[(162, 2), float64]) {
  %105 = fn (%var_2949: Tensor[(162, 2), float64]) -> (Tensor[(12, 6, ?), bool], Tensor[(5, 9, 8), float32], Tensor[(12, 6, ?), float64], Tensor[(12, 6, 432), bool], Tensor[(162, 2), float64]) {
    %72 = @func_1010() /* ty=(Tensor[(12, 6, ?), float32],) */;
    %73 = %72.0;
    %74 = cast(%73, dtype="float64") /* ty=Tensor[(12, 6, ?), float64] */;
    %75 = cos(%74) /* ty=Tensor[(12, 6, ?), float64] */;
    %76 = cast(%var_2949, dtype="float64") /* ty=Tensor[(162, 2), float64] */;
    %77 = reshape(%76, newshape=[9, 12, 3]) /* ty=Tensor[(9, 12, 3), float64] */;
    %78 = @func_109(%77) /* ty=(Tensor[(9, 12, 3), float64], Tensor[(12, 6, ?), float32]) */;
    %79 = %78.1;
    %80 = cast(%79, dtype="bool") /* ty=Tensor[(12, 6, ?), bool] */;
    %81 = shape_of(%75, dtype="int32") /* ty=Tensor[(3), int32] */;
    %82 = cast(%75, dtype="bool") /* ty=Tensor[(12, 6, ?), bool] */;
    %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %84 = @func_1328() /* ty=(Tensor[(5, 9, 8), float32],) */;
    %85 = %84.0;
    %86 = cast(%85, dtype="float32") /* ty=Tensor[(5, 9, 8), float32] */;
    %87 = reshape(%86, newshape=[5, 9, 8]) /* ty=Tensor[(5, 9, 8), float32] */;
    %88 = @func_1585(%87) /* ty=(Tensor[(5, 9, 8), int64], Tensor[(12, 6, ?), float64]) */;
    %89 = @func_1916() /* ty=(Tensor[(9, 3, 16), float64], Tensor[(9, 3, 16), float64], Tensor[(12, 6, 432), bool]) */;
    %90 = %89.2;
    %91 = cast(%90, dtype="float32") /* ty=Tensor[(12, 6, 432), float32] */;
    %92 = log(%91) /* ty=Tensor[(12, 6, 432), float32] */;
    %93 = cast(%75, dtype="bool") /* ty=Tensor[(12, 6, ?), bool] */;
    %94 = cast(%92, dtype="bool") /* ty=Tensor[(12, 6, 432), bool] */;
    %95 = cast(meta[relay.Constant][4] /* ty=Tensor[(162, 2), float64] */, dtype="bool") /* ty=Tensor[(162, 2), bool] */;
    %96 = shape_of(%var_2949, dtype="int32") /* ty=Tensor[(2), int32] */;
    %97 = cast(%var_2949, dtype="bool") /* ty=Tensor[(162, 2), bool] */;
    %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %99 = less(%97, %98) /* ty=Tensor[(162, 2), bool] */;
    %100 = cast(%99, dtype="float64") /* ty=Tensor[(162, 2), float64] */;
    %101 = equal(%82, %83) /* ty=Tensor[(12, 6, ?), bool] */;
    %102 = %88.1;
    %103 = greater_equal(%93, %94) /* ty=Tensor[(12, 6, 432), bool] */;
    %104 = sinh(%100) /* ty=Tensor[(162, 2), float64] */;
    (%101, %85, %102, %103, %104)
  };
  %105(%var_3025) /* ty=(Tensor[(12, 6, ?), bool], Tensor[(5, 9, 8), float32], Tensor[(12, 6, ?), float64], Tensor[(12, 6, 432), bool], Tensor[(162, 2), float64]) */
}

def @func_1330() -> (Tensor[(5, 9, 8), float32],) {
  @func_1328() /* ty=(Tensor[(5, 9, 8), float32],) */
}

def @func_3828(%var_3826: Tensor[(1, 5, 14), float64]) -> (Tensor[(1, 5, 14), float64], Tensor[(9, 3, 16), float32]) {
  @func_3825(%var_3826) /* ty=(Tensor[(1, 5, 14), float64], Tensor[(9, 3, 16), float32]) */
}

def @func_54() -> Tensor[(12, 6, ?), float32] {
  @func_52() /* ty=Tensor[(12, 6, ?), float32] */
}

def @func_1279(%var_1270: Tensor[(6, 8, 16), float32]) -> (Tensor[(6, 8, 16), float32], Tensor[(6, 8, 16), float64]) {
  %106 = cast(%var_1270, dtype="float32") /* ty=Tensor[(6, 8, 16), float32] */;
  %107 = cast(%var_1270, dtype="float64") /* ty=Tensor[(6, 8, 16), float64] */;
  %108 = exp(%106) /* ty=Tensor[(6, 8, 16), float32] */;
  %109 = sigmoid(%107) /* ty=Tensor[(6, 8, 16), float64] */;
  (%108, %109)
}

def @func_431() -> (Tensor[(12, 6, ?), float32], Tensor[(12, 6, ?), float32], Tensor[(12, 6, ?), float32], Tensor[(216, 2), float64], Tensor[(12, 6, ?), float32]) {
  %110 = cast(meta[relay.Constant][5] /* ty=Tensor[(216, 2), float64] */, dtype="float64") /* ty=Tensor[(216, 2), float64] */;
  %111 = reshape(%110, newshape=[432]) /* ty=Tensor[(432), float64] */;
  %112 = @func_234(%111) /* ty=(Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64], Tensor[(432), float64]) */;
  %113 = @func_52() /* ty=Tensor[(12, 6, ?), float32] */;
  %114 = @func_275() /* ty=Tensor[(12, 6, ?), float32] */;
  %115 = %112.0;
  %116 = @func_275() /* ty=Tensor[(12, 6, ?), float32] */;
  (%113, %114, %115, meta[relay.Constant][5] /* ty=Tensor[(216, 2), float64] */, %116)
}

def @func_4330(%var_4329: Tensor[(5, 11), float64]) -> (Tensor[(5, 11), float64], Tensor[(10, 8), float32], Tensor[(12, 6, 10), bool], Tensor[(720), float32]) {
  %125 = fn (%var_4300: Tensor[(5, 11), float64]) -> (Tensor[(5, 11), float64], Tensor[(10, 8), float32], Tensor[(12, 6, 10), bool], Tensor[(720), float32]) {
    %117 = cast(%var_4300, dtype="float64") /* ty=Tensor[(5, 11), float64] */;
    %118 = @func_1860() /* ty=(Tensor[(10, 8), float32],) */;
    %119 = cast(meta[relay.Constant][6] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
    %120 = reshape(%119, newshape=[12, 6, 10]) /* ty=Tensor[(12, 6, 10), float32] */;
    %121 = @func_908(%120) /* ty=(Tensor[(12, 6, 10), bool], Tensor[(12, 6, ?), float32], Tensor[(12, 6, 10), int16]) */;
    %122 = asinh(%117) /* ty=Tensor[(5, 11), float64] */;
    %123 = %118.0;
    %124 = %121.0;
    (%122, %123, %124, meta[relay.Constant][6] /* ty=Tensor[(720), float32] */)
  };
  %125(%var_4329) /* ty=(Tensor[(5, 11), float64], Tensor[(10, 8), float32], Tensor[(12, 6, 10), bool], Tensor[(720), float32]) */
}

def @func_4742() -> Tensor[(12, 6, ?), float32] {
  %126 = @func_1104() /* ty=(Tensor[(12, 6, ?), float32],) */;
  %126.0
}

def @func_4808() -> (Tensor[(9, 3, 16), float64],) {
  %128 = fn () -> (Tensor[(9, 3, 16), float64],) {
    %127 = @func_3892() /* ty=Tensor[(9, 3, 16), float64] */;
    (%127,)
  };
  %128() /* ty=(Tensor[(9, 3, 16), float64],) */
}

def @func_1157() -> Tensor[(12, 6, ?), float32] {
  @func_1155() /* ty=Tensor[(12, 6, ?), float32] */
}

def @func_1405() -> (Tensor[(432), float64],) {
  %129 = @func_330() /* ty=(Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64], Tensor[(432), float64], Tensor[(9, 3, 16), float64]) */;
  %130 = %129.2;
  (%130,)
}

def @func_4744() -> Tensor[(12, 6, ?), float32] {
  @func_4742() /* ty=Tensor[(12, 6, ?), float32] */
}

def @func_2693() -> (Tensor[(9, 3, 16), float64],) {
  %135 = fn () -> (Tensor[(9, 3, 16), float64],) {
    %131 = @func_2554() /* ty=(Tensor[(9, 3, 16), float64],) */;
    %132 = %131.0;
    %133 = cast(%132, dtype="float64") /* ty=Tensor[(9, 3, 16), float64] */;
    %134 = sqrt(%133) /* ty=Tensor[(9, 3, 16), float64] */;
    (%134,)
  };
  %135() /* ty=(Tensor[(9, 3, 16), float64],) */
}

def @func_1328() -> (Tensor[(5, 9, 8), float32],) {
  %136 = cast(meta[relay.Constant][7] /* ty=Tensor[(5, 9, 8), float32] */, dtype="float32") /* ty=Tensor[(5, 9, 8), float32] */;
  %137 = sqrt(%136) /* ty=Tensor[(5, 9, 8), float32] */;
  %138 = cast(%137, dtype="float32") /* ty=Tensor[(5, 9, 8), float32] */;
  %139 = sin(%138) /* ty=Tensor[(5, 9, 8), float32] */;
  (%139,)
}

def @func_860() -> (Tensor[(16, 14, 12), float64],) {
  @func_858() /* ty=(Tensor[(16, 14, 12), float64],) */
}

def @func_4203(%var_4202: Tensor[(9, 3, 16), float32]) -> (Tensor[(9, 3, 16), float64], Tensor[(9, 3, 16), uint32], Tensor[(12, 6, 4), uint64], Tensor[(288), float32]) {
  %153 = fn (%var_4186: Tensor[(9, 3, 16), float32]) -> (Tensor[(9, 3, 16), float64], Tensor[(9, 3, 16), uint32], Tensor[(12, 6, 4), uint64], Tensor[(288), float32]) {
    %140 = @func_3892() /* ty=Tensor[(9, 3, 16), float64] */;
    %141 = cast(%140, dtype="float32") /* ty=Tensor[(9, 3, 16), float32] */;
    %142 = sin(%141) /* ty=Tensor[(9, 3, 16), float32] */;
    %143 = cast(%var_4186, dtype="uint32") /* ty=Tensor[(9, 3, 16), uint32] */;
    %144 = shape_of(%142, dtype="int32") /* ty=Tensor[(3), int32] */;
    %145 = cast(%142, dtype="uint32") /* ty=Tensor[(9, 3, 16), uint32] */;
    %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %147 = cast(meta[relay.Constant][8] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
    %148 = reshape(%147, newshape=[12, 6, 4]) /* ty=Tensor[(12, 6, 4), float32] */;
    %149 = @func_1813(%148) /* ty=(Tensor[(12, 6, 4), uint64], Tensor[(9, 3, 16), float64], Tensor[(1, 432), float64]) */;
    %150 = @func_1966() /* ty=Tensor[(9, 3, 16), float64] */;
    %151 = right_shift(%145, %146) /* ty=Tensor[(9, 3, 16), uint32] */;
    %152 = %149.0;
    (%150, %151, %152, meta[relay.Constant][8] /* ty=Tensor[(288), float32] */)
  };
  %153(%var_4202) /* ty=(Tensor[(9, 3, 16), float64], Tensor[(9, 3, 16), uint32], Tensor[(12, 6, 4), uint64], Tensor[(288), float32]) */
}

def @func_4667() -> Tensor[(12, 6, ?), float32] {
  %154 = fn () -> Tensor[(12, 6, ?), float32] {
    @func_275() /* ty=Tensor[(12, 6, ?), float32] */
  };
  %154() /* ty=Tensor[(12, 6, ?), float32] */
}

def @func_52() -> Tensor[(12, 6, ?), float32] {
  %155 = cast(meta[relay.Constant][9] /* ty=Tensor[(12, 6, 1), float32] */, dtype="float32") /* ty=Tensor[(12, 6, 1), float32] */;
  %156 = sin(%155) /* ty=Tensor[(12, 6, 1), float32] */;
  %157 = cast(%156, dtype="float32") /* ty=Tensor[(12, 6, 1), float32] */;
  %158 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(12, 6, 1), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %159 = cast(meta[relay.Constant][9] /* ty=Tensor[(12, 6, 1), float32] */, dtype="float32") /* ty=Tensor[(12, 6, 1), float32] */;
  %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  multiply(%159, %160) /* ty=Tensor[(12, 6, ?), float32] */
}

def @func_1534(%var_1533: Tensor[(480, 1), int64]) -> (Tensor[(16, 14, 12), bool], Tensor[(10, 4, 12), float32], Tensor[(1, 40), int64], Tensor[(480, 1), int64]) {
  %174 = fn (%var_1526: Tensor[(480, 1), int64]) -> (Tensor[(16, 14, 12), bool], Tensor[(10, 4, 12), float32], Tensor[(1, 40), int64], Tensor[(480, 1), int64]) {
    %161 = @func_858() /* ty=(Tensor[(16, 14, 12), float64],) */;
    %162 = %161.0;
    %163 = cast(meta[relay.Constant][10] /* ty=Tensor[(16, 14, 12), float64] */, dtype="bool") /* ty=Tensor[(16, 14, 12), bool] */;
    %164 = shape_of(%162, dtype="int32") /* ty=Tensor[(3), int32] */;
    %165 = cast(%162, dtype="bool") /* ty=Tensor[(16, 14, 12), bool] */;
    %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %167 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 40), int64] */, dtype="int64") /* ty=Tensor[(1, 40), int64] */;
    %168 = cast(%var_1526, dtype="int64") /* ty=Tensor[(480, 1), int64] */;
    %169 = reshape(%167, newshape=[10, 4, 1]) /* ty=Tensor[(10, 4, 1), int64] */;
    %170 = reshape(%168, newshape=[10, 4, 12]) /* ty=Tensor[(10, 4, 12), int64] */;
    %171 = @func_1138(%169, %170) /* ty=(Tensor[(10, 4, 12), int64], Tensor[(9, 3, 16), float64], Tensor[(10, 4, 12), float32], Tensor[(10, 4, 12), float64]) */;
    %172 = logical_and(%165, %166) /* ty=Tensor[(16, 14, 12), bool] */;
    %173 = %171.2;
    (%172, %173, meta[relay.Constant][11] /* ty=Tensor[(1, 40), int64] */, %var_1526)
  };
  %174(%var_1533) /* ty=(Tensor[(16, 14, 12), bool], Tensor[(10, 4, 12), float32], Tensor[(1, 40), int64], Tensor[(480, 1), int64]) */
}

def @func_1968() -> Tensor[(9, 3, 16), float64] {
  @func_1966() /* ty=Tensor[(9, 3, 16), float64] */
}

def @func_486() -> (Tensor[(9, 3, 16), float64],) {
  %177 = fn () -> (Tensor[(9, 3, 16), float64],) {
    %175 = @func_330() /* ty=(Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64], Tensor[(432), float64], Tensor[(9, 3, 16), float64]) */;
    %176 = %175.3;
    (%176,)
  };
  %177() /* ty=(Tensor[(9, 3, 16), float64],) */
}

def @func_980(%var_976: Tensor[(13, 8, 8), uint16], %var_977: Tensor[(13, 8, 8), uint16], %var_978: Tensor[(13, 8, 8), uint16], %var_979: Tensor[(432), float64]) -> (Tensor[(13, 8, 8), uint16], Tensor[(12, 6, ?), float32], Tensor[(432), float64], Tensor[(13, 8, 8), bool], Tensor[(13, 8, 8), float32]) {
  @func_974(%var_976, %var_977, %var_978, %var_979) /* ty=(Tensor[(13, 8, 8), uint16], Tensor[(12, 6, ?), float32], Tensor[(432), float64], Tensor[(13, 8, 8), bool], Tensor[(13, 8, 8), float32]) */
}

def @func_172(%var_170: Tensor[(9, 3, 16), float64], %var_171: Tensor[(9, 3, 16), float64]) -> (Tensor[(9, 3, 16), float64],) {
  %183 = fn (%var_164: Tensor[(9, 3, 16), float64], %var_165: Tensor[(9, 3, 16), float64]) -> (Tensor[(9, 3, 16), float64],) {
    %178 = cast(%var_165, dtype="float64") /* ty=Tensor[(9, 3, 16), float64] */;
    %179 = shape_of(%var_164, dtype="int32") /* ty=Tensor[(3), int32] */;
    %180 = cast(%var_164, dtype="float64") /* ty=Tensor[(9, 3, 16), float64] */;
    %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %182 = floor_divide(%180, %181) /* ty=Tensor[(9, 3, 16), float64] */;
    (%182,)
  };
  %183(%var_170, %var_171) /* ty=(Tensor[(9, 3, 16), float64],) */
}

def @func_111(%var_110: Tensor[(9, 12, 3), float64]) -> (Tensor[(9, 12, 3), float64], Tensor[(12, 6, ?), float32]) {
  %187 = fn (%var_83: Tensor[(9, 12, 3), float64]) -> (Tensor[(9, 12, 3), float64], Tensor[(12, 6, ?), float32]) {
    %184 = cast(%var_83, dtype="float64") /* ty=Tensor[(9, 12, 3), float64] */;
    %185 = atan(%184) /* ty=Tensor[(9, 12, 3), float64] */;
    %186 = @func_52() /* ty=Tensor[(12, 6, ?), float32] */;
    (%185, %186)
  };
  %187(%var_110) /* ty=(Tensor[(9, 12, 3), float64], Tensor[(12, 6, ?), float32]) */
}

def @func_1407() -> (Tensor[(432), float64],) {
  @func_1405() /* ty=(Tensor[(432), float64],) */
}

def @func_858() -> (Tensor[(16, 14, 12), float64],) {
  %188 = cast(meta[relay.Constant][12] /* ty=Tensor[(16, 14, 12), float64] */, dtype="float64") /* ty=Tensor[(16, 14, 12), float64] */;
  %189 = cos(%188) /* ty=Tensor[(16, 14, 12), float64] */;
  (%189,)
}

def @func_2823(%var_2769: Tensor[(3, 9, 7), uint64], %var_2770: Tensor[(3, 9, 7), uint64]) -> (Tensor[(3, 9, 7), uint64], Tensor[(1, 14), float64], Tensor[(10, 8), float32], Tensor[(9, 3, 16), float64]) {
  %190 = cast(%var_2770, dtype="uint64") /* ty=Tensor[(3, 9, 7), uint64] */;
  %191 = shape_of(%var_2769, dtype="int32") /* ty=Tensor[(3), int32] */;
  %192 = cast(%var_2769, dtype="uint64") /* ty=Tensor[(3, 9, 7), uint64] */;
  %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %194 = @func_1387() /* ty=(Tensor[(1, 14), float64],) */;
  %195 = @func_1860() /* ty=(Tensor[(10, 8), float32],) */;
  %196 = @func_485() /* ty=(Tensor[(9, 3, 16), float64],) */;
  %197 = add(%192, %193) /* ty=Tensor[(3, 9, 7), uint64] */;
  %198 = %194.0;
  %199 = %195.0;
  %200 = %196.0;
  (%197, %198, %199, %200)
}

def @func_2206(%var_2204: Tensor[(432), float32], %var_2205: Tensor[(2, 20), int64]) -> (Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), float64], Tensor[(9, 3, 16), float32], Tensor[(432), float32], Tensor[(324), float64], Tensor[(23328), float32], Tensor[(9, 3, 16), float64], Tensor[(2, 20), int64], Tensor[(480), int64]) {
  %218 = fn (%var_2181: Tensor[(432), float32], %var_2190: Tensor[(2, 20), int64]) -> (Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), float64], Tensor[(9, 3, 16), float32], Tensor[(432), float32], Tensor[(324), float64], Tensor[(23328), float32], Tensor[(9, 3, 16), float64], Tensor[(2, 20), int64], Tensor[(480), int64]) {
    %201 = @func_858() /* ty=(Tensor[(16, 14, 12), float64],) */;
    %202 = cast(%var_2181, dtype="float32") /* ty=Tensor[(432), float32] */;
    %203 = cast(meta[relay.Constant][13] /* ty=Tensor[(324), float64] */, dtype="float64") /* ty=Tensor[(324), float64] */;
    %204 = cast(meta[relay.Constant][14] /* ty=Tensor[(23328), float32] */, dtype="float32") /* ty=Tensor[(23328), float32] */;
    %205 = reshape(%202, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float32] */;
    %206 = reshape(%203, newshape=[324]) /* ty=Tensor[(324), float64] */;
    %207 = reshape(%204, newshape=[12, 6, 324]) /* ty=Tensor[(12, 6, 324), float32] */;
    %208 = @func_1709(%205, %206, %207) /* ty=(Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float32], Tensor[(9, 3, 16), bool], Tensor[(12, 6, 324), bool]) */;
    %209 = cast(%var_2190, dtype="int64") /* ty=Tensor[(2, 20), int64] */;
    %210 = cast(meta[relay.Constant][15] /* ty=Tensor[(480), int64] */, dtype="int64") /* ty=Tensor[(480), int64] */;
    %211 = reshape(%209, newshape=[10, 4, 1]) /* ty=Tensor[(10, 4, 1), int64] */;
    %212 = reshape(%210, newshape=[10, 4, 12]) /* ty=Tensor[(10, 4, 12), int64] */;
    %213 = @func_1138(%211, %212) /* ty=(Tensor[(10, 4, 12), int64], Tensor[(9, 3, 16), float64], Tensor[(10, 4, 12), float32], Tensor[(10, 4, 12), float64]) */;
    %214 = %201.0;
    %215 = @func_1074() /* ty=Tensor[(16, 14, 12), float64] */;
    %216 = %208.1;
    %217 = %213.1;
    (%214, %215, %216, %var_2181, meta[relay.Constant][13] /* ty=Tensor[(324), float64] */, meta[relay.Constant][14] /* ty=Tensor[(23328), float32] */, %217, %var_2190, meta[relay.Constant][15] /* ty=Tensor[(480), int64] */)
  };
  %218(%var_2204, %var_2205) /* ty=(Tensor[(16, 14, 12), float64], Tensor[(16, 14, 12), float64], Tensor[(9, 3, 16), float32], Tensor[(432), float32], Tensor[(324), float64], Tensor[(23328), float32], Tensor[(9, 3, 16), float64], Tensor[(2, 20), int64], Tensor[(480), int64]) */
}

def @func_2216(%var_2215: Tensor[(10, 6, 6), float64]) -> (Tensor[(10, 6, 6), float64],) {
  %221 = fn (%var_2211: Tensor[(10, 6, 6), float64]) -> (Tensor[(10, 6, 6), float64],) {
    %219 = cast(%var_2211, dtype="float64") /* ty=Tensor[(10, 6, 6), float64] */;
    %220 = acos(%219) /* ty=Tensor[(10, 6, 6), float64] */;
    (%220,)
  };
  %221(%var_2215) /* ty=(Tensor[(10, 6, 6), float64],) */
}

def @func_1138(%var_1106: Tensor[(10, 4, 1), int64], %var_1107: Tensor[(10, 4, 12), int64]) -> (Tensor[(10, 4, 12), int64], Tensor[(9, 3, 16), float64], Tensor[(10, 4, 12), float32], Tensor[(10, 4, 12), float64]) {
  %222 = cast(%var_1106, dtype="int64") /* ty=Tensor[(10, 4, 1), int64] */;
  %223 = cast(%var_1107, dtype="int64") /* ty=Tensor[(10, 4, 12), int64] */;
  %224 = @func_699() /* ty=(Tensor[(9, 3, 16), float64], Tensor[(9, 3, 16), float64]) */;
  %225 = cast(%var_1107, dtype="float32") /* ty=Tensor[(10, 4, 12), float32] */;
  %226 = cast(%var_1107, dtype="float64") /* ty=Tensor[(10, 4, 12), float64] */;
  %227 = subtract(%222, %223) /* ty=Tensor[(10, 4, 12), int64] */;
  %228 = %224.0;
  %229 = acos(%225) /* ty=Tensor[(10, 4, 12), float32] */;
  %230 = tan(%226) /* ty=Tensor[(10, 4, 12), float64] */;
  (%227, %228, %229, %230)
}

def @func_2827(%var_2825: Tensor[(3, 9, 7), uint64], %var_2826: Tensor[(3, 9, 7), uint64]) -> (Tensor[(3, 9, 7), uint64], Tensor[(1, 14), float64], Tensor[(10, 8), float32], Tensor[(9, 3, 16), float64]) {
  @func_2823(%var_2825, %var_2826) /* ty=(Tensor[(3, 9, 7), uint64], Tensor[(1, 14), float64], Tensor[(10, 8), float32], Tensor[(9, 3, 16), float64]) */
}

def @func_2737() -> (Tensor[(9, 3, 16), float64],) {
  %231 = @func_2365() /* ty=(Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64]) */;
  %232 = %231.1;
  (%232,)
}

def @func_2885(%var_2832: Tensor[(10, 11, 12), uint64], %var_2833: Tensor[(10, 11, 12), uint64], %var_2857: int64, %var_2858: Tensor[(4), int64]) -> (Tensor[(10, 11, 12), uint64], Tensor[(9, 3, 16), bool], Tensor[(12, 6, ?), float32], Tensor[(4, 1), bool], int64, Tensor[(4), int64], Tensor[(10, 11, 12), bool], Tensor[(16, 14, 12), float64]) {
  %233 = cast(%var_2833, dtype="uint64") /* ty=Tensor[(10, 11, 12), uint64] */;
  %234 = shape_of(%var_2832, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(%var_2832, dtype="uint64") /* ty=Tensor[(10, 11, 12), uint64] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %237 = cast(meta[relay.Constant][16] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
  %238 = cast(meta[relay.Constant][16] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
  %239 = reshape(%237, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
  %240 = reshape(%238, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
  %241 = @func_169(%239, %240) /* ty=(Tensor[(9, 3, 16), float64],) */;
  %242 = %241.0;
  %243 = cast(meta[relay.Constant][16] /* ty=Tensor[(432), float64] */, dtype="bool") /* ty=Tensor[(432), bool] */;
  %244 = shape_of(%242, dtype="int32") /* ty=Tensor[(3), int32] */;
  %245 = cast(%242, dtype="bool") /* ty=Tensor[(9, 3, 16), bool] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %247 = @func_330() /* ty=(Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64], Tensor[(432), float64], Tensor[(9, 3, 16), float64]) */;
  %248 = cast(%var_2857, dtype="int64") /* ty=int64 */;
  %249 = cast(%var_2858, dtype="int64") /* ty=Tensor[(4), int64] */;
  %250 = reshape(%248, newshape=[]) /* ty=int64 */;
  %251 = reshape(%249, newshape=[4, 1]) /* ty=Tensor[(4, 1), int64] */;
  %252 = @func_2419(%250, %251) /* ty=(Tensor[(4, 1), bool],) */;
  %253 = cast(meta[relay.Constant][17] /* ty=Tensor[(10, 11, 12), uint64] */, dtype="bool") /* ty=Tensor[(10, 11, 12), bool] */;
  %254 = shape_of(%var_2833, dtype="int32") /* ty=Tensor[(3), int32] */;
  %255 = cast(%var_2833, dtype="bool") /* ty=Tensor[(10, 11, 12), bool] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %257 = multiply(%235, %236) /* ty=Tensor[(10, 11, 12), uint64] */;
  %258 = equal(%245, %246) /* ty=Tensor[(9, 3, 16), bool] */;
  %259 = %247.0;
  %260 = %252.0;
  %261 = logical_and(%255, %256) /* ty=Tensor[(10, 11, 12), bool] */;
  %262 = @func_1074() /* ty=Tensor[(16, 14, 12), float64] */;
  (%257, %258, %259, %260, %var_2857, %var_2858, %261, %262)
}

def @func_4654() -> (Tensor[(9, 3, 16), float64], Tensor[(1, 5, 14), float64], Tensor[(7, 10), float64]) {
  %269 = fn () -> (Tensor[(9, 3, 16), float64], Tensor[(1, 5, 14), float64], Tensor[(7, 10), float64]) {
    %263 = @func_699() /* ty=(Tensor[(9, 3, 16), float64], Tensor[(9, 3, 16), float64]) */;
    %264 = cast(meta[relay.Constant][18] /* ty=Tensor[(7, 10), float64] */, dtype="float64") /* ty=Tensor[(7, 10), float64] */;
    %265 = reshape(%264, newshape=[1, 5, 14]) /* ty=Tensor[(1, 5, 14), float64] */;
    %266 = @func_3825(%265) /* ty=(Tensor[(1, 5, 14), float64], Tensor[(9, 3, 16), float32]) */;
    %267 = %263.0;
    %268 = %266.0;
    (%267, %268, meta[relay.Constant][18] /* ty=Tensor[(7, 10), float64] */)
  };
  %269() /* ty=(Tensor[(9, 3, 16), float64], Tensor[(1, 5, 14), float64], Tensor[(7, 10), float64]) */
}

def @func_701() -> (Tensor[(9, 3, 16), float64], Tensor[(9, 3, 16), float64]) {
  @func_699() /* ty=(Tensor[(9, 3, 16), float64], Tensor[(9, 3, 16), float64]) */
}

def @func_2099(%var_2076: Tensor[(3, 7, 15), float64]) -> (Tensor[(9, 3, 16), float64], Tensor[(3, 7, 15), uint32]) {
  %270 = cast(%var_2076, dtype="float64") /* ty=Tensor[(3, 7, 15), float64] */;
  %271 = rsqrt(%270) /* ty=Tensor[(3, 7, 15), float64] */;
  %272 = cast(meta[relay.Constant][19] /* ty=Tensor[(3, 7, 15), float64] */, dtype="int8") /* ty=Tensor[(3, 7, 15), int8] */;
  %273 = shape_of(%271, dtype="int32") /* ty=Tensor[(3), int32] */;
  %274 = cast(%271, dtype="int8") /* ty=Tensor[(3, 7, 15), int8] */;
  %275 = dyn.reshape(%272, %273, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %276 = maximum(%274, %275) /* ty=Tensor[(3, 7, 15), int8] */;
  %277 = cast(%271, dtype="uint32") /* ty=Tensor[(3, 7, 15), uint32] */;
  %278 = shape_of(%276, dtype="int32") /* ty=Tensor[(3), int32] */;
  %279 = cast(%276, dtype="uint32") /* ty=Tensor[(3, 7, 15), uint32] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %281 = @func_1240() /* ty=Tensor[(9, 3, 16), float64] */;
  %282 = minimum(%279, %280) /* ty=Tensor[(3, 7, 15), uint32] */;
  (%281, %282)
}

def @func_1075() -> Tensor[(16, 14, 12), float64] {
  %284 = fn () -> Tensor[(16, 14, 12), float64] {
    %283 = @func_858() /* ty=(Tensor[(16, 14, 12), float64],) */;
    %283.0
  };
  %284() /* ty=Tensor[(16, 14, 12), float64] */
}

def @func_1155() -> Tensor[(12, 6, ?), float32] {
  @func_52() /* ty=Tensor[(12, 6, ?), float32] */
}

def @func_4009() -> (Tensor[(16, 14, 12), float64], Tensor[(5, 9, 8), bool], Tensor[(5, 9, 8), float64]) {
  %309 = fn () -> (Tensor[(16, 14, 12), float64], Tensor[(5, 9, 8), bool], Tensor[(5, 9, 8), float64]) {
    %285 = @func_858() /* ty=(Tensor[(16, 14, 12), float64],) */;
    %286 = @func_1328() /* ty=(Tensor[(5, 9, 8), float32],) */;
    %287 = %286.0;
    %288 = cast(%287, dtype="float32") /* ty=Tensor[(5, 9, 8), float32] */;
    %289 = asin(%288) /* ty=Tensor[(5, 9, 8), float32] */;
    %290 = cast(%289, dtype="float64") /* ty=Tensor[(5, 9, 8), float64] */;
    %291 = erf(%290) /* ty=Tensor[(5, 9, 8), float64] */;
    %292 = cast(%289, dtype="float32") /* ty=Tensor[(5, 9, 8), float32] */;
    %293 = log(%292) /* ty=Tensor[(5, 9, 8), float32] */;
    %294 = cast(%293, dtype="bool") /* ty=Tensor[(5, 9, 8), bool] */;
    %295 = shape_of(%291, dtype="int32") /* ty=Tensor[(3), int32] */;
    %296 = cast(%291, dtype="bool") /* ty=Tensor[(5, 9, 8), bool] */;
    %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %298 = cast(%293, dtype="float32") /* ty=Tensor[(5, 9, 8), float32] */;
    %299 = tan(%298) /* ty=Tensor[(5, 9, 8), float32] */;
    %300 = cast(%293, dtype="bool") /* ty=Tensor[(5, 9, 8), bool] */;
    %301 = shape_of(%299, dtype="int32") /* ty=Tensor[(3), int32] */;
    %302 = cast(%299, dtype="bool") /* ty=Tensor[(5, 9, 8), bool] */;
    %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %304 = equal(%302, %303) /* ty=Tensor[(5, 9, 8), bool] */;
    %305 = cast(%304, dtype="float64") /* ty=Tensor[(5, 9, 8), float64] */;
    %306 = %285.0;
    %307 = greater_equal(%296, %297) /* ty=Tensor[(5, 9, 8), bool] */;
    %308 = sigmoid(%305) /* ty=Tensor[(5, 9, 8), float64] */;
    (%306, %307, %308)
  };
  %309() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(5, 9, 8), bool], Tensor[(5, 9, 8), float64]) */
}

def @func_4569() -> (Tensor[(12, 6, ?), float32],) {
  %312 = fn () -> (Tensor[(12, 6, ?), float32],) {
    %310 = @func_2339() /* ty=(Tensor[(12, 6, ?), float32],) */;
    %311 = %310.0;
    (%311,)
  };
  %312() /* ty=(Tensor[(12, 6, ?), float32],) */
}

def @func_2039(%var_2036: Tensor[(12, 12, 2), float32], %var_2037: Tensor[(12, 12, 2), float32], %var_2038: Tensor[(12, 12, 2), bool]) -> (Tensor[(12, 12, 2), float32], Tensor[(12, 12, 2), float64], Tensor[(12, 6, ?), float32], Tensor[(12, 12, 2), uint16]) {
  %328 = fn (%var_1980: Tensor[(12, 12, 2), float32], %var_2013: Tensor[(12, 12, 2), float32], %var_2029: Tensor[(12, 12, 2), bool]) -> (Tensor[(12, 12, 2), float32], Tensor[(12, 12, 2), float64], Tensor[(12, 6, ?), float32], Tensor[(12, 12, 2), uint16]) {
    %313 = cast(%var_1980, dtype="float32") /* ty=Tensor[(12, 12, 2), float32] */;
    %314 = cast(%var_1980, dtype="float64") /* ty=Tensor[(12, 12, 2), float64] */;
    %315 = cast(%var_2013, dtype="bool") /* ty=Tensor[(12, 12, 2), bool] */;
    %316 = shape_of(%var_1980, dtype="int32") /* ty=Tensor[(3), int32] */;
    %317 = cast(%var_1980, dtype="bool") /* ty=Tensor[(12, 12, 2), bool] */;
    %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %319 = not_equal(%317, %318) /* ty=Tensor[(12, 12, 2), bool] */;
    %320 = cast(%var_2029, dtype="uint16") /* ty=Tensor[(12, 12, 2), uint16] */;
    %321 = shape_of(%319, dtype="int32") /* ty=Tensor[(3), int32] */;
    %322 = cast(%319, dtype="uint16") /* ty=Tensor[(12, 12, 2), uint16] */;
    %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %324 = tan(%313) /* ty=Tensor[(12, 12, 2), float32] */;
    %325 = sqrt(%314) /* ty=Tensor[(12, 12, 2), float64] */;
    %326 = @func_1155() /* ty=Tensor[(12, 6, ?), float32] */;
    %327 = maximum(%322, %323) /* ty=Tensor[(12, 12, 2), uint16] */;
    (%324, %325, %326, %327)
  };
  %328(%var_2036, %var_2037, %var_2038) /* ty=(Tensor[(12, 12, 2), float32], Tensor[(12, 12, 2), float64], Tensor[(12, 6, ?), float32], Tensor[(12, 12, 2), uint16]) */
}

def @func_1240() -> Tensor[(9, 3, 16), float64] {
  %329 = @func_1053() /* ty=(Tensor[(9, 3, 16), float32], Tensor[(9, 3, 16), float32], Tensor[(9, 3, 16), float64]) */;
  %329.2
}

def @func_276() -> Tensor[(12, 6, ?), float32] {
  %330 = fn () -> Tensor[(12, 6, ?), float32] {
    @func_52() /* ty=Tensor[(12, 6, ?), float32] */
  };
  %330() /* ty=Tensor[(12, 6, ?), float32] */
}

def @func_1089(%var_1087: uint64, %var_1088: Tensor[(3, 3, 2), uint64]) -> Tensor[(3, 3, 2), uint64] {
  %333 = fn (%var_1079: uint64, %var_1080: Tensor[(3, 3, 2), uint64]) -> Tensor[(3, 3, 2), uint64] {
    %331 = cast(%var_1079, dtype="uint64") /* ty=uint64 */;
    %332 = cast(%var_1080, dtype="uint64") /* ty=Tensor[(3, 3, 2), uint64] */;
    bitwise_and(%331, %332) /* ty=Tensor[(3, 3, 2), uint64] */
  };
  %333(%var_1087, %var_1088) /* ty=Tensor[(3, 3, 2), uint64] */
}

def @func_2422(%var_2420: int64, %var_2421: Tensor[(4, 1), int64]) -> (Tensor[(4, 1), bool],) {
  %337 = fn (%var_2400: int64, %var_2401: Tensor[(4, 1), int64]) -> (Tensor[(4, 1), bool],) {
    %334 = cast(%var_2400, dtype="bool") /* ty=bool */;
    %335 = cast(%var_2401, dtype="bool") /* ty=Tensor[(4, 1), bool] */;
    %336 = equal(%334, %335) /* ty=Tensor[(4, 1), bool] */;
    (%336,)
  };
  %337(%var_2420, %var_2421) /* ty=(Tensor[(4, 1), bool],) */
}

def @func_1713(%var_1710: Tensor[(9, 3, 16), float32], %var_1711: Tensor[(324), float64], %var_1712: Tensor[(12, 6, 324), float32]) -> (Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float32], Tensor[(9, 3, 16), bool], Tensor[(12, 6, 324), bool]) {
  %366 = fn (%var_1657: Tensor[(9, 3, 16), float32], %var_1671: Tensor[(324), float64], %var_1695: Tensor[(12, 6, 324), float32]) -> (Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float32], Tensor[(9, 3, 16), bool], Tensor[(12, 6, 324), bool]) {
    %338 = @func_1104() /* ty=(Tensor[(12, 6, ?), float32],) */;
    %339 = @func_1053() /* ty=(Tensor[(9, 3, 16), float32], Tensor[(9, 3, 16), float32], Tensor[(9, 3, 16), float64]) */;
    %340 = %339.0;
    %341 = cast(meta[relay.Constant][20] /* ty=Tensor[(9, 3, 16), float32] */, dtype="float32") /* ty=Tensor[(9, 3, 16), float32] */;
    %342 = shape_of(%340, dtype="int32") /* ty=Tensor[(3), int32] */;
    %343 = cast(%340, dtype="float32") /* ty=Tensor[(9, 3, 16), float32] */;
    %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %345 = cast(%var_1657, dtype="bool") /* ty=Tensor[(9, 3, 16), bool] */;
    %346 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(9, 3, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %347 = cast(meta[relay.Constant][20] /* ty=Tensor[(9, 3, 16), float32] */, dtype="bool") /* ty=Tensor[(9, 3, 16), bool] */;
    %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %349 = cast(%var_1671, dtype="float64") /* ty=Tensor[(324), float64] */;
    %350 = reshape(%349, newshape=[9, 12, 3]) /* ty=Tensor[(9, 12, 3), float64] */;
    %351 = @func_109(%350) /* ty=(Tensor[(9, 12, 3), float64], Tensor[(12, 6, ?), float32]) */;
    %352 = %351.1;
    %353 = cast(%352, dtype="float32") /* ty=Tensor[(12, 6, ?), float32] */;
    %354 = cosh(%353) /* ty=Tensor[(12, 6, ?), float32] */;
    %355 = cast(%354, dtype="float32") /* ty=Tensor[(12, 6, ?), float32] */;
    %356 = cast(%var_1671, dtype="float32") /* ty=Tensor[(324), float32] */;
    %357 = power(%355, %356) /* ty=Tensor[(12, 6, 324), float32] */;
    %358 = cast(%var_1695, dtype="bool") /* ty=Tensor[(12, 6, 324), bool] */;
    %359 = shape_of(%357, dtype="int32") /* ty=Tensor[(3), int32] */;
    %360 = cast(%357, dtype="bool") /* ty=Tensor[(12, 6, 324), bool] */;
    %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %362 = %338.0;
    %363 = floor_mod(%343, %344) /* ty=Tensor[(9, 3, 16), float32] */;
    %364 = greater(%347, %348) /* ty=Tensor[(9, 3, 16), bool] */;
    %365 = less_equal(%360, %361) /* ty=Tensor[(12, 6, 324), bool] */;
    (%362, %363, %364, %365)
  };
  %366(%var_1710, %var_1711, %var_1712) /* ty=(Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float32], Tensor[(9, 3, 16), bool], Tensor[(12, 6, 324), bool]) */
}

def @func_3292() -> (Tensor[(12, 15, 5), float64],) {
  %369 = fn () -> (Tensor[(12, 15, 5), float64],) {
    %367 = @func_1185() /* ty=(Tensor[(12, 15, 5), float64],) */;
    %368 = %367.0;
    (%368,)
  };
  %369() /* ty=(Tensor[(12, 15, 5), float64],) */
}

def @func_3825(%var_3809: Tensor[(1, 5, 14), float64]) -> (Tensor[(1, 5, 14), float64], Tensor[(9, 3, 16), float32]) {
  %370 = cast(%var_3809, dtype="float64") /* ty=Tensor[(1, 5, 14), float64] */;
  %371 = @func_1053() /* ty=(Tensor[(9, 3, 16), float32], Tensor[(9, 3, 16), float32], Tensor[(9, 3, 16), float64]) */;
  %372 = asinh(%370) /* ty=Tensor[(1, 5, 14), float64] */;
  %373 = %371.0;
  (%372, %373)
}

def @func_3515() -> Tensor[(9, 3, 16), float64] {
  @func_1240() /* ty=Tensor[(9, 3, 16), float64] */
}

def @func_4469(%var_4419: Tensor[(16, 14, 12), float64]) -> (Tensor[(16, 14, 12), uint8], Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64]) {
  %374 = @func_1074() /* ty=Tensor[(16, 14, 12), float64] */;
  %375 = cast(%var_4419, dtype="uint8") /* ty=Tensor[(16, 14, 12), uint8] */;
  %376 = shape_of(%374, dtype="int32") /* ty=Tensor[(3), int32] */;
  %377 = cast(%374, dtype="uint8") /* ty=Tensor[(16, 14, 12), uint8] */;
  %378 = dyn.reshape(%375, %376, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %379 = @func_330() /* ty=(Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64], Tensor[(432), float64], Tensor[(9, 3, 16), float64]) */;
  %380 = %379.3;
  %381 = cast(%380, dtype="float64") /* ty=Tensor[(9, 3, 16), float64] */;
  %382 = right_shift(%377, %378) /* ty=Tensor[(16, 14, 12), uint8] */;
  %383 = @func_52() /* ty=Tensor[(12, 6, ?), float32] */;
  %384 = cos(%381) /* ty=Tensor[(9, 3, 16), float64] */;
  (%382, %383, %384)
}

def @func_2102(%var_2100: Tensor[(3, 7, 15), float64]) -> (Tensor[(9, 3, 16), float64], Tensor[(3, 7, 15), uint32]) {
  @func_2099(%var_2100) /* ty=(Tensor[(9, 3, 16), float64], Tensor[(3, 7, 15), uint32]) */
}

def @func_4551() -> (Tensor[(12, 6, 9), int32], Tensor[(12, 6, 9), uint32]) {
  %392 = fn () -> (Tensor[(12, 6, 9), int32], Tensor[(12, 6, 9), uint32]) {
    %385 = @func_1155() /* ty=Tensor[(12, 6, ?), float32] */;
    %386 = cast(%385, dtype="int32") /* ty=Tensor[(12, 6, ?), int32] */;
    %387 = cast(meta[relay.Constant][21] /* ty=Tensor[(12, 6, 9), float32] */, dtype="int32") /* ty=Tensor[(12, 6, 9), int32] */;
    %388 = cast(meta[relay.Constant][21] /* ty=Tensor[(12, 6, 9), float32] */, dtype="uint32") /* ty=Tensor[(12, 6, 9), uint32] */;
    %389 = cast(%385, dtype="uint32") /* ty=Tensor[(12, 6, ?), uint32] */;
    %390 = right_shift(%386, %387) /* ty=Tensor[(12, 6, 9), int32] */;
    %391 = bitwise_xor(%388, %389) /* ty=Tensor[(12, 6, 9), uint32] */;
    (%390, %391)
  };
  %392() /* ty=(Tensor[(12, 6, 9), int32], Tensor[(12, 6, 9), uint32]) */
}

def @func_3078() -> (Tensor[(9, 3, 16), float64], Tensor[(1, 14), float64]) {
  %393 = @func_2737() /* ty=(Tensor[(9, 3, 16), float64],) */;
  %394 = @func_1387() /* ty=(Tensor[(1, 14), float64],) */;
  %395 = %393.0;
  %396 = %394.0;
  (%395, %396)
}

def @func_3893() -> Tensor[(9, 3, 16), float64] {
  %400 = fn () -> Tensor[(9, 3, 16), float64] {
    %397 = @func_699() /* ty=(Tensor[(9, 3, 16), float64], Tensor[(9, 3, 16), float64]) */;
    %398 = %397.0;
    %399 = cast(%398, dtype="float64") /* ty=Tensor[(9, 3, 16), float64] */;
    atan(%399) /* ty=Tensor[(9, 3, 16), float64] */
  };
  %400() /* ty=Tensor[(9, 3, 16), float64] */
}

def @func_4710() -> Tensor[(9, 3, 16), float64] {
  %402 = fn () -> Tensor[(9, 3, 16), float64] {
    %401 = @func_485() /* ty=(Tensor[(9, 3, 16), float64],) */;
    %401.0
  };
  %402() /* ty=Tensor[(9, 3, 16), float64] */
}

def @func_4855() -> (Tensor[(16, 14, 12), float64], Tensor[(12, 6, 5), uint32]) {
  %403 = @func_4666() /* ty=Tensor[(12, 6, ?), float32] */;
  %404 = cast(%403, dtype="uint32") /* ty=Tensor[(12, 6, ?), uint32] */;
  %405 = cast(meta[relay.Constant][22] /* ty=Tensor[(12, 6, 5), float32] */, dtype="uint32") /* ty=Tensor[(12, 6, 5), uint32] */;
  %406 = @func_1074() /* ty=Tensor[(16, 14, 12), float64] */;
  %407 = left_shift(%404, %405) /* ty=Tensor[(12, 6, 5), uint32] */;
  (%406, %407)
}

def @func_1055() -> (Tensor[(9, 3, 16), float32], Tensor[(9, 3, 16), float32], Tensor[(9, 3, 16), float64]) {
  @func_1053() /* ty=(Tensor[(9, 3, 16), float32], Tensor[(9, 3, 16), float32], Tensor[(9, 3, 16), float64]) */
}

def @func_1460(%var_1458: Tensor[(6, 6, 15), uint16]) -> Tensor[(6, 6, 15), bool] {
  @func_1457(%var_1458) /* ty=Tensor[(6, 6, 15), bool] */
}

def @func_1457(%var_1447: Tensor[(6, 6, 15), uint16]) -> Tensor[(6, 6, 15), bool] {
  %408 = cast(%var_1447, dtype="bool") /* ty=Tensor[(6, 6, 15), bool] */;
  %409 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(6, 6, 15), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %410 = cast(meta[relay.Constant][23] /* ty=Tensor[(6, 6, 15), uint16] */, dtype="bool") /* ty=Tensor[(6, 6, 15), bool] */;
  %411 = dyn.reshape(%408, %409, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%410, %411) /* ty=Tensor[(6, 6, 15), bool] */
}

def @func_1282(%var_1280: Tensor[(6, 8, 16), float32]) -> (Tensor[(6, 8, 16), float32], Tensor[(6, 8, 16), float64]) {
  @func_1279(%var_1280) /* ty=(Tensor[(6, 8, 16), float32], Tensor[(6, 8, 16), float64]) */
}

def @func_2739() -> (Tensor[(9, 3, 16), float64],) {
  @func_2737() /* ty=(Tensor[(9, 3, 16), float64],) */
}

def @func_3080() -> (Tensor[(9, 3, 16), float64], Tensor[(1, 14), float64]) {
  @func_3078() /* ty=(Tensor[(9, 3, 16), float64], Tensor[(1, 14), float64]) */
}

def @func_4788() -> Tensor[(9, 3, 16), float64] {
  @func_3892() /* ty=Tensor[(9, 3, 16), float64] */
}

def @func_1917() -> (Tensor[(9, 3, 16), float64], Tensor[(9, 3, 16), float64], Tensor[(12, 6, 432), bool]) {
  %428 = fn () -> (Tensor[(9, 3, 16), float64], Tensor[(9, 3, 16), float64], Tensor[(12, 6, 432), bool]) {
    %412 = @func_485() /* ty=(Tensor[(9, 3, 16), float64],) */;
    %413 = %412.0;
    %414 = cast(%413, dtype="float64") /* ty=Tensor[(9, 3, 16), float64] */;
    %415 = cast(%413, dtype="float64") /* ty=Tensor[(9, 3, 16), float64] */;
    %416 = asin(%414) /* ty=Tensor[(9, 3, 16), float64] */;
    %417 = cast(%416, dtype="float64") /* ty=Tensor[(9, 3, 16), float64] */;
    %418 = reshape(%415, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
    %419 = reshape(%417, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
    %420 = @func_169(%418, %419) /* ty=(Tensor[(9, 3, 16), float64],) */;
    %421 = @func_1155() /* ty=Tensor[(12, 6, ?), float32] */;
    %422 = @func_1405() /* ty=(Tensor[(432), float64],) */;
    %423 = %422.0;
    %424 = cast(%421, dtype="bool") /* ty=Tensor[(12, 6, ?), bool] */;
    %425 = cast(%423, dtype="bool") /* ty=Tensor[(432), bool] */;
    %426 = %420.0;
    %427 = not_equal(%424, %425) /* ty=Tensor[(12, 6, 432), bool] */;
    (%416, %426, %427)
  };
  %428() /* ty=(Tensor[(9, 3, 16), float64], Tensor[(9, 3, 16), float64], Tensor[(12, 6, 432), bool]) */
}

def @func_4875() -> (Tensor[(432), float64], Tensor[(12, 6, ?), float32]) {
  %429 = @func_1405() /* ty=(Tensor[(432), float64],) */;
  %430 = @func_1010() /* ty=(Tensor[(12, 6, ?), float32],) */;
  %431 = %429.0;
  %432 = %430.0;
  (%431, %432)
}

def @func_3705(%var_3640: Tensor[(16, 1, 11), float64], %var_3659: Tensor[(324), float64], %var_3697: Tensor[(540), uint16]) -> (Tensor[(12, 15, 5), float64], Tensor[(16, ?, 11), int16], Tensor[(12, 6, ?), bool], Tensor[(324), float64], Tensor[(12, 6, ?), float32], Tensor[(6, 6, 15), bool], Tensor[(540), uint16], Tensor[(16, ?, 11), float32]) {
  %433 = @func_3291() /* ty=(Tensor[(12, 15, 5), float64],) */;
  %434 = cast(%var_3640, dtype="float64") /* ty=Tensor[(16, 1, 11), float64] */;
  %435 = exp(%434) /* ty=Tensor[(16, 1, 11), float64] */;
  %436 = cast(%435, dtype="float32") /* ty=Tensor[(16, 1, 11), float32] */;
  %437 = rsqrt(%436) /* ty=Tensor[(16, 1, 11), float32] */;
  %438 = cast(%437, dtype="int16") /* ty=Tensor[(16, 1, 11), int16] */;
  %439 = shape_of(%435, dtype="int32") /* ty=Tensor[(3), int32] */;
  %440 = cast(%435, dtype="int16") /* ty=Tensor[(16, 1, 11), int16] */;
  %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %442 = cast(%var_3659, dtype="float64") /* ty=Tensor[(324), float64] */;
  %443 = reshape(%442, newshape=[162, 2]) /* ty=Tensor[(162, 2), float64] */;
  %444 = @func_3024(%443) /* ty=(Tensor[(12, 6, ?), bool], Tensor[(5, 9, 8), float32], Tensor[(12, 6, ?), float64], Tensor[(12, 6, 432), bool], Tensor[(162, 2), float64]) */;
  %445 = @func_1104() /* ty=(Tensor[(12, 6, ?), float32],) */;
  %446 = cast(%var_3697, dtype="uint16") /* ty=Tensor[(540), uint16] */;
  %447 = reshape(%446, newshape=[6, 6, 15]) /* ty=Tensor[(6, 6, 15), uint16] */;
  %448 = cast(%437, dtype="float32") /* ty=Tensor[(16, 1, 11), float32] */;
  %449 = acos(%448) /* ty=Tensor[(16, 1, 11), float32] */;
  %450 = cast(%435, dtype="float32") /* ty=Tensor[(16, 1, 11), float32] */;
  %451 = shape_of(%449, dtype="int32") /* ty=Tensor[(3), int32] */;
  %452 = cast(%449, dtype="float32") /* ty=Tensor[(16, 1, 11), float32] */;
  %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %454 = floor_divide(%452, %453) /* ty=Tensor[(16, ?, 11), float32] */;
  %455 = cast(%454, dtype="float32") /* ty=Tensor[(16, ?, 11), float32] */;
  %456 = %433.0;
  %457 = logical_xor(%440, %441) /* ty=Tensor[(16, ?, 11), int16] */;
  %458 = %444.0;
  %459 = %445.0;
  %460 = @func_1457(%447) /* ty=Tensor[(6, 6, 15), bool] */;
  %461 = log2(%455) /* ty=Tensor[(16, ?, 11), float32] */;
  (%456, %457, %458, %var_3659, %459, %460, %var_3697, %461)
}

def @func_330() -> (Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64], Tensor[(432), float64], Tensor[(9, 3, 16), float64]) {
  %462 = cast(meta[relay.Constant][24] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
  %463 = cast(meta[relay.Constant][24] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
  %464 = reshape(%462, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
  %465 = reshape(%463, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
  %466 = @func_169(%464, %465) /* ty=(Tensor[(9, 3, 16), float64],) */;
  %467 = %466.0;
  %468 = cast(%467, dtype="float64") /* ty=Tensor[(9, 3, 16), float64] */;
  %469 = cast(meta[relay.Constant][24] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
  %470 = reshape(%468, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
  %471 = reshape(%469, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
  %472 = @func_169(%470, %471) /* ty=(Tensor[(9, 3, 16), float64],) */;
  %473 = %472.0;
  %474 = cast(%473, dtype="float64") /* ty=Tensor[(9, 3, 16), float64] */;
  %475 = @func_52() /* ty=Tensor[(12, 6, ?), float32] */;
  %476 = acosh(%474) /* ty=Tensor[(9, 3, 16), float64] */;
  (%475, %467, meta[relay.Constant][24] /* ty=Tensor[(432), float64] */, %476)
}

def @func_1932() -> Tensor[(9, 3, 16), float64] {
  @func_1930() /* ty=Tensor[(9, 3, 16), float64] */
}

def @func_1010() -> (Tensor[(12, 6, ?), float32],) {
  %477 = @func_330() /* ty=(Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64], Tensor[(432), float64], Tensor[(9, 3, 16), float64]) */;
  %478 = %477.0;
  (%478,)
}

def @func_1930() -> Tensor[(9, 3, 16), float64] {
  %479 = @func_699() /* ty=(Tensor[(9, 3, 16), float64], Tensor[(9, 3, 16), float64]) */;
  %479.1
}

def @func_433() -> (Tensor[(12, 6, ?), float32], Tensor[(12, 6, ?), float32], Tensor[(12, 6, ?), float32], Tensor[(216, 2), float64], Tensor[(12, 6, ?), float32]) {
  @func_431() /* ty=(Tensor[(12, 6, ?), float32], Tensor[(12, 6, ?), float32], Tensor[(12, 6, ?), float32], Tensor[(216, 2), float64], Tensor[(12, 6, ?), float32]) */
}

def @func_4877() -> (Tensor[(432), float64], Tensor[(12, 6, ?), float32]) {
  @func_4875() /* ty=(Tensor[(432), float64], Tensor[(12, 6, ?), float32]) */
}

def @func_1966() -> Tensor[(9, 3, 16), float64] {
  @func_1240() /* ty=Tensor[(9, 3, 16), float64] */
}

def @func_237(%var_235: Tensor[(432), float64]) -> (Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64], Tensor[(432), float64]) {
  @func_234(%var_235) /* ty=(Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64], Tensor[(432), float64]) */
}

def @func_4054(%var_4052: Tensor[(9, 16, 5), float64]) -> Tensor[(9, 16, 5), float64] {
  @func_4051(%var_4052) /* ty=Tensor[(9, 16, 5), float64] */
}

def @func_3421(%var_3419: Tensor[(12, 15, 5), float64], %var_3420: Tensor[(324), float64]) -> (Tensor[(12, 15, 5), float64], Tensor[(12, 6, ?), float32], Tensor[(12, 6, ?), float32], Tensor[(162, 2), bool]) {
  @func_3417(%var_3419, %var_3420) /* ty=(Tensor[(12, 15, 5), float64], Tensor[(12, 6, ?), float32], Tensor[(12, 6, ?), float32], Tensor[(162, 2), bool]) */
}

def @func_2366() -> (Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64]) {
  %484 = fn () -> (Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64]) {
    %480 = @func_1104() /* ty=(Tensor[(12, 6, ?), float32],) */;
    %481 = @func_1916() /* ty=(Tensor[(9, 3, 16), float64], Tensor[(9, 3, 16), float64], Tensor[(12, 6, 432), bool]) */;
    %482 = %480.0;
    %483 = %481.1;
    (%482, %483)
  };
  %484() /* ty=(Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64]) */
}

def @func_3360(%var_3357: Tensor[(4, 6, 4), uint8], %var_3358: Tensor[(4, 6, 4), uint8], %var_3359: Tensor[(432), float64]) -> (Tensor[(4, 6, 4), uint8], Tensor[(4, 6, 4), float32], Tensor[(4, 6, 4), uint64], Tensor[(9, 3, 16), float64], Tensor[(432), float64], Tensor[(16, 14, 12), float64], Tensor[(10, 8), float32]) {
  @func_3355(%var_3357, %var_3358, %var_3359) /* ty=(Tensor[(4, 6, 4), uint8], Tensor[(4, 6, 4), float32], Tensor[(4, 6, 4), uint64], Tensor[(9, 3, 16), float64], Tensor[(432), float64], Tensor[(16, 14, 12), float64], Tensor[(10, 8), float32]) */
}

def @func_4143(%var_4126: Tensor[(12, 6, 1), float32]) -> (Tensor[(12, 6, ?), bool], Tensor[(5, 9, 8), float32]) {
  %485 = @func_2339() /* ty=(Tensor[(12, 6, ?), float32],) */;
  %486 = %485.0;
  %487 = cast(%var_4126, dtype="bool") /* ty=Tensor[(12, 6, 1), bool] */;
  %488 = shape_of(%486, dtype="int32") /* ty=Tensor[(3), int32] */;
  %489 = cast(%486, dtype="bool") /* ty=Tensor[(12, 6, ?), bool] */;
  %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %491 = @func_1328() /* ty=(Tensor[(5, 9, 8), float32],) */;
  %492 = less_equal(%489, %490) /* ty=Tensor[(12, 6, ?), bool] */;
  %493 = %491.0;
  (%492, %493)
}

def @func_4857() -> (Tensor[(16, 14, 12), float64], Tensor[(12, 6, 5), uint32]) {
  @func_4855() /* ty=(Tensor[(16, 14, 12), float64], Tensor[(12, 6, 5), uint32]) */
}

def @func_2891(%var_2887: Tensor[(10, 11, 12), uint64], %var_2888: Tensor[(10, 11, 12), uint64], %var_2889: int64, %var_2890: Tensor[(4), int64]) -> (Tensor[(10, 11, 12), uint64], Tensor[(9, 3, 16), bool], Tensor[(12, 6, ?), float32], Tensor[(4, 1), bool], int64, Tensor[(4), int64], Tensor[(10, 11, 12), bool], Tensor[(16, 14, 12), float64]) {
  @func_2885(%var_2887, %var_2888, %var_2889, %var_2890) /* ty=(Tensor[(10, 11, 12), uint64], Tensor[(9, 3, 16), bool], Tensor[(12, 6, ?), float32], Tensor[(4, 1), bool], int64, Tensor[(4), int64], Tensor[(10, 11, 12), bool], Tensor[(16, 14, 12), float64]) */
}

def @func_1242() -> Tensor[(9, 3, 16), float64] {
  @func_1240() /* ty=Tensor[(9, 3, 16), float64] */
}

def @func_2556() -> (Tensor[(9, 3, 16), float64],) {
  @func_2554() /* ty=(Tensor[(9, 3, 16), float64],) */
}

def @func_3206() -> (Tensor[(9, 3, 16), float64], Tensor[(6, 6, 15), bool], Tensor[(54, 10), uint16], Tensor[(12, 6, ?), uint8], Tensor[(12, 6, ?), float32], Tensor[(12, 6, ?), float64], Tensor[(12, 6, ?), float64], Tensor[(12, 30), float32], Tensor[(9, 3, 16), float64], Tensor[(9, 3, 16), float64]) {
  %524 = fn () -> (Tensor[(9, 3, 16), float64], Tensor[(6, 6, 15), bool], Tensor[(54, 10), uint16], Tensor[(12, 6, ?), uint8], Tensor[(12, 6, ?), float32], Tensor[(12, 6, ?), float64], Tensor[(12, 6, ?), float64], Tensor[(12, 30), float32], Tensor[(9, 3, 16), float64], Tensor[(9, 3, 16), float64]) {
    %494 = @func_2692() /* ty=(Tensor[(9, 3, 16), float64],) */;
    %495 = cast(meta[relay.Constant][25] /* ty=Tensor[(54, 10), uint16] */, dtype="uint16") /* ty=Tensor[(54, 10), uint16] */;
    %496 = reshape(%495, newshape=[6, 6, 15]) /* ty=Tensor[(6, 6, 15), uint16] */;
    %497 = @func_1104() /* ty=(Tensor[(12, 6, ?), float32],) */;
    %498 = %497.0;
    %499 = cast(%498, dtype="float32") /* ty=Tensor[(12, 6, ?), float32] */;
    %500 = atan(%499) /* ty=Tensor[(12, 6, ?), float32] */;
    %501 = cast(%498, dtype="uint8") /* ty=Tensor[(12, 6, ?), uint8] */;
    %502 = shape_of(%500, dtype="int32") /* ty=Tensor[(3), int32] */;
    %503 = cast(%500, dtype="uint8") /* ty=Tensor[(12, 6, ?), uint8] */;
    %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %505 = @func_1104() /* ty=(Tensor[(12, 6, ?), float32],) */;
    %506 = cast(%500, dtype="float64") /* ty=Tensor[(12, 6, ?), float64] */;
    %507 = cast(meta[relay.Constant][26] /* ty=Tensor[(12, 30), float32] */, dtype="float32") /* ty=Tensor[(12, 30), float32] */;
    %508 = reshape(%507, newshape=[5, 9, 8]) /* ty=Tensor[(5, 9, 8), float32] */;
    %509 = @func_1585(%508) /* ty=(Tensor[(5, 9, 8), int64], Tensor[(12, 6, ?), float64]) */;
    %510 = @func_330() /* ty=(Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64], Tensor[(432), float64], Tensor[(9, 3, 16), float64]) */;
    %511 = %494.0;
    %512 = cast(%511, dtype="float64") /* ty=Tensor[(9, 3, 16), float64] */;
    %513 = cast(%511, dtype="float64") /* ty=Tensor[(9, 3, 16), float64] */;
    %514 = reshape(%512, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
    %515 = reshape(%513, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
    %516 = @func_169(%514, %515) /* ty=(Tensor[(9, 3, 16), float64],) */;
    %517 = @func_1457(%496) /* ty=Tensor[(6, 6, 15), bool] */;
    %518 = right_shift(%503, %504) /* ty=Tensor[(12, 6, ?), uint8] */;
    %519 = %505.0;
    %520 = sinh(%506) /* ty=Tensor[(12, 6, ?), float64] */;
    %521 = %509.1;
    %522 = %510.1;
    %523 = %516.0;
    (%511, %517, meta[relay.Constant][25] /* ty=Tensor[(54, 10), uint16] */, %518, %519, %520, %521, meta[relay.Constant][26] /* ty=Tensor[(12, 30), float32] */, %522, %523)
  };
  %524() /* ty=(Tensor[(9, 3, 16), float64], Tensor[(6, 6, 15), bool], Tensor[(54, 10), uint16], Tensor[(12, 6, ?), uint8], Tensor[(12, 6, ?), float32], Tensor[(12, 6, ?), float64], Tensor[(12, 6, ?), float64], Tensor[(12, 30), float32], Tensor[(9, 3, 16), float64], Tensor[(9, 3, 16), float64]) */
}

def @func_1105() -> (Tensor[(12, 6, ?), float32],) {
  %527 = fn () -> (Tensor[(12, 6, ?), float32],) {
    %525 = @func_1010() /* ty=(Tensor[(12, 6, ?), float32],) */;
    %526 = %525.0;
    (%526,)
  };
  %527() /* ty=(Tensor[(12, 6, ?), float32],) */
}

def @func_2662(%var_2641: Tensor[(432), float64]) -> (Tensor[(11, 15, 4), float32], Tensor[(5, 9, 8), float32], Tensor[(432), float64], Tensor[(832), uint16], Tensor[(432), float64], Tensor[(12, 6, ?), float32]) {
  %528 = cast(meta[relay.Constant][27] /* ty=Tensor[(11, 15, 4), float32] */, dtype="float32") /* ty=Tensor[(11, 15, 4), float32] */;
  %529 = @func_1328() /* ty=(Tensor[(5, 9, 8), float32],) */;
  %530 = cast(meta[relay.Constant][28] /* ty=Tensor[(832), uint16] */, dtype="uint16") /* ty=Tensor[(832), uint16] */;
  %531 = cast(meta[relay.Constant][28] /* ty=Tensor[(832), uint16] */, dtype="uint16") /* ty=Tensor[(832), uint16] */;
  %532 = cast(meta[relay.Constant][28] /* ty=Tensor[(832), uint16] */, dtype="uint16") /* ty=Tensor[(832), uint16] */;
  %533 = cast(%var_2641, dtype="float64") /* ty=Tensor[(432), float64] */;
  %534 = reshape(%530, newshape=[13, 8, 8]) /* ty=Tensor[(13, 8, 8), uint16] */;
  %535 = reshape(%531, newshape=[13, 8, 8]) /* ty=Tensor[(13, 8, 8), uint16] */;
  %536 = reshape(%532, newshape=[13, 8, 8]) /* ty=Tensor[(13, 8, 8), uint16] */;
  %537 = reshape(%533, newshape=[432]) /* ty=Tensor[(432), float64] */;
  %538 = @func_974(%534, %535, %536, %537) /* ty=(Tensor[(13, 8, 8), uint16], Tensor[(12, 6, ?), float32], Tensor[(432), float64], Tensor[(13, 8, 8), bool], Tensor[(13, 8, 8), float32]) */;
  %539 = @func_431() /* ty=(Tensor[(12, 6, ?), float32], Tensor[(12, 6, ?), float32], Tensor[(12, 6, ?), float32], Tensor[(216, 2), float64], Tensor[(12, 6, ?), float32]) */;
  %540 = sinh(%528) /* ty=Tensor[(11, 15, 4), float32] */;
  %541 = %529.0;
  %542 = %538.2;
  %543 = %539.4;
  (%540, %541, %542, meta[relay.Constant][28] /* ty=Tensor[(832), uint16] */, %var_2641, %543)
}

def @func_3623(%var_3607: Tensor[(9, 11, 5), uint16], %var_3608: Tensor[(9, 11, 5), uint16]) -> (Tensor[(9, 11, 5), uint16], Tensor[(9, 3, 16), float64]) {
  %544 = cast(%var_3608, dtype="uint16") /* ty=Tensor[(9, 11, 5), uint16] */;
  %545 = shape_of(%var_3607, dtype="int32") /* ty=Tensor[(3), int32] */;
  %546 = cast(%var_3607, dtype="uint16") /* ty=Tensor[(9, 11, 5), uint16] */;
  %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %548 = @func_485() /* ty=(Tensor[(9, 3, 16), float64],) */;
  %549 = multiply(%546, %547) /* ty=Tensor[(9, 11, 5), uint16] */;
  %550 = %548.0;
  (%549, %550)
}

def @func_3417(%var_3383: Tensor[(12, 15, 5), float64], %var_3400: Tensor[(324), float64]) -> (Tensor[(12, 15, 5), float64], Tensor[(12, 6, ?), float32], Tensor[(12, 6, ?), float32], Tensor[(162, 2), bool]) {
  %551 = @func_3291() /* ty=(Tensor[(12, 15, 5), float64],) */;
  %552 = %551.0;
  %553 = cast(%var_3383, dtype="float64") /* ty=Tensor[(12, 15, 5), float64] */;
  %554 = shape_of(%552, dtype="int32") /* ty=Tensor[(3), int32] */;
  %555 = cast(%552, dtype="float64") /* ty=Tensor[(12, 15, 5), float64] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %557 = @func_330() /* ty=(Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64], Tensor[(432), float64], Tensor[(9, 3, 16), float64]) */;
  %558 = @func_330() /* ty=(Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64], Tensor[(432), float64], Tensor[(9, 3, 16), float64]) */;
  %559 = cast(%var_3400, dtype="float64") /* ty=Tensor[(324), float64] */;
  %560 = reshape(%559, newshape=[162, 2]) /* ty=Tensor[(162, 2), float64] */;
  %561 = @func_3024(%560) /* ty=(Tensor[(12, 6, ?), bool], Tensor[(5, 9, 8), float32], Tensor[(12, 6, ?), float64], Tensor[(12, 6, 432), bool], Tensor[(162, 2), float64]) */;
  %562 = %561.4;
  %563 = cast(%var_3400, dtype="bool") /* ty=Tensor[(324), bool] */;
  %564 = shape_of(%562, dtype="int32") /* ty=Tensor[(2), int32] */;
  %565 = cast(%562, dtype="bool") /* ty=Tensor[(162, 2), bool] */;
  %566 = dyn.reshape(%563, %564, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %567 = minimum(%555, %556) /* ty=Tensor[(12, 15, 5), float64] */;
  %568 = %557.0;
  %569 = %558.0;
  %570 = not_equal(%565, %566) /* ty=Tensor[(162, 2), bool] */;
  (%567, %568, %569, %570)
}

def @func_234(%var_220: Tensor[(432), float64]) -> (Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64], Tensor[(432), float64]) {
  %571 = cast(%var_220, dtype="float64") /* ty=Tensor[(432), float64] */;
  %572 = cast(%var_220, dtype="float64") /* ty=Tensor[(432), float64] */;
  %573 = reshape(%571, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
  %574 = reshape(%572, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
  %575 = @func_169(%573, %574) /* ty=(Tensor[(9, 3, 16), float64],) */;
  %576 = @func_52() /* ty=Tensor[(12, 6, ?), float32] */;
  %577 = %575.0;
  (%576, %577, %var_220)
}

def @func_3587(%var_3572: Tensor[(12, 6, 10), float32], %var_3584: int64, %var_3585: Tensor[(4), int64]) -> (Tensor[(12, 6, 10), bool], Tensor[(4, 1), bool], int64, Tensor[(4), int64]) {
  %578 = @func_52() /* ty=Tensor[(12, 6, ?), float32] */;
  %579 = cast(%578, dtype="bool") /* ty=Tensor[(12, 6, ?), bool] */;
  %580 = cast(%var_3572, dtype="bool") /* ty=Tensor[(12, 6, 10), bool] */;
  %581 = cast(%var_3584, dtype="int64") /* ty=int64 */;
  %582 = cast(%var_3585, dtype="int64") /* ty=Tensor[(4), int64] */;
  %583 = reshape(%581, newshape=[]) /* ty=int64 */;
  %584 = reshape(%582, newshape=[4, 1]) /* ty=Tensor[(4, 1), int64] */;
  %585 = @func_2419(%583, %584) /* ty=(Tensor[(4, 1), bool],) */;
  %586 = equal(%579, %580) /* ty=Tensor[(12, 6, 10), bool] */;
  %587 = %585.0;
  (%586, %587, %var_3584, %var_3585)
}

def @func_910(%var_909: Tensor[(12, 6, 10), float32]) -> (Tensor[(12, 6, 10), bool], Tensor[(12, 6, ?), float32], Tensor[(12, 6, 10), int16]) {
  %602 = fn (%var_883: Tensor[(12, 6, 10), float32]) -> (Tensor[(12, 6, 10), bool], Tensor[(12, 6, ?), float32], Tensor[(12, 6, 10), int16]) {
    %588 = @func_431() /* ty=(Tensor[(12, 6, ?), float32], Tensor[(12, 6, ?), float32], Tensor[(12, 6, ?), float32], Tensor[(216, 2), float64], Tensor[(12, 6, ?), float32]) */;
    %589 = %588.1;
    %590 = cast(%589, dtype="int8") /* ty=Tensor[(12, 6, ?), int8] */;
    %591 = cast(%var_883, dtype="int8") /* ty=Tensor[(12, 6, 10), int8] */;
    %592 = multiply(%590, %591) /* ty=Tensor[(12, 6, 10), int8] */;
    %593 = cast(%var_883, dtype="bool") /* ty=Tensor[(12, 6, 10), bool] */;
    %594 = shape_of(%592, dtype="int32") /* ty=Tensor[(3), int32] */;
    %595 = cast(%592, dtype="bool") /* ty=Tensor[(12, 6, 10), bool] */;
    %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %597 = cast(%589, dtype="int16") /* ty=Tensor[(12, 6, ?), int16] */;
    %598 = cast(%592, dtype="int16") /* ty=Tensor[(12, 6, 10), int16] */;
    %599 = greater(%595, %596) /* ty=Tensor[(12, 6, 10), bool] */;
    %600 = @func_275() /* ty=Tensor[(12, 6, ?), float32] */;
    %601 = subtract(%597, %598) /* ty=Tensor[(12, 6, 10), int16] */;
    (%599, %600, %601)
  };
  %602(%var_909) /* ty=(Tensor[(12, 6, 10), bool], Tensor[(12, 6, ?), float32], Tensor[(12, 6, 10), int16]) */
}

def @func_3355(%var_3306: Tensor[(4, 6, 4), uint8], %var_3314: Tensor[(4, 6, 4), uint8], %var_3349: Tensor[(432), float64]) -> (Tensor[(4, 6, 4), uint8], Tensor[(4, 6, 4), float32], Tensor[(4, 6, 4), uint64], Tensor[(9, 3, 16), float64], Tensor[(432), float64], Tensor[(16, 14, 12), float64], Tensor[(10, 8), float32]) {
  %603 = cast(%var_3306, dtype="uint8") /* ty=Tensor[(4, 6, 4), uint8] */;
  %604 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(4, 6, 4), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %605 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 6, 4), uint8] */, dtype="uint8") /* ty=Tensor[(4, 6, 4), uint8] */;
  %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %607 = cast(%var_3314, dtype="float32") /* ty=Tensor[(4, 6, 4), float32] */;
  %608 = shape_of(%var_3306, dtype="int32") /* ty=Tensor[(3), int32] */;
  %609 = cast(%var_3306, dtype="float32") /* ty=Tensor[(4, 6, 4), float32] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %611 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 6, 4), uint8] */, dtype="uint64") /* ty=Tensor[(4, 6, 4), uint64] */;
  %612 = shape_of(%var_3314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(%var_3314, dtype="uint64") /* ty=Tensor[(4, 6, 4), uint64] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %615 = cast(%var_3349, dtype="float64") /* ty=Tensor[(432), float64] */;
  %616 = cast(%var_3349, dtype="float64") /* ty=Tensor[(432), float64] */;
  %617 = reshape(%615, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
  %618 = reshape(%616, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float64] */;
  %619 = @func_169(%617, %618) /* ty=(Tensor[(9, 3, 16), float64],) */;
  %620 = @func_1860() /* ty=(Tensor[(10, 8), float32],) */;
  %621 = add(%605, %606) /* ty=Tensor[(4, 6, 4), uint8] */;
  %622 = power(%609, %610) /* ty=Tensor[(4, 6, 4), float32] */;
  %623 = left_shift(%613, %614) /* ty=Tensor[(4, 6, 4), uint64] */;
  %624 = %619.0;
  %625 = @func_1074() /* ty=Tensor[(16, 14, 12), float64] */;
  %626 = %620.0;
  (%621, %622, %623, %624, %var_3349, %625, %626)
}

def @func_3754() -> (Tensor[(16, 14, 12), float64],) {
  %629 = fn () -> (Tensor[(16, 14, 12), float64],) {
    %627 = @func_2593() /* ty=(Tensor[(16, 14, 12), float64],) */;
    %628 = %627.0;
    (%628,)
  };
  %629() /* ty=(Tensor[(16, 14, 12), float64],) */
}

def @func_4208() -> Tensor[(16, 14, 12), float64] {
  %631 = fn () -> Tensor[(16, 14, 12), float64] {
    %630 = @func_858() /* ty=(Tensor[(16, 14, 12), float64],) */;
    %630.0
  };
  %631() /* ty=Tensor[(16, 14, 12), float64] */
}

def @func_4575() -> Tensor[(432), float64] {
  %633 = fn () -> Tensor[(432), float64] {
    %632 = @func_1405() /* ty=(Tensor[(432), float64],) */;
    %632.0
  };
  %633() /* ty=Tensor[(432), float64] */
}

def @func_974(%var_922: Tensor[(13, 8, 8), uint16], %var_923: Tensor[(13, 8, 8), uint16], %var_930: Tensor[(13, 8, 8), uint16], %var_940: Tensor[(432), float64]) -> (Tensor[(13, 8, 8), uint16], Tensor[(12, 6, ?), float32], Tensor[(432), float64], Tensor[(13, 8, 8), bool], Tensor[(13, 8, 8), float32]) {
  %634 = cast(%var_923, dtype="uint16") /* ty=Tensor[(13, 8, 8), uint16] */;
  %635 = shape_of(%var_922, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%var_922, dtype="uint16") /* ty=Tensor[(13, 8, 8), uint16] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %638 = cast(%var_940, dtype="float64") /* ty=Tensor[(432), float64] */;
  %639 = reshape(%638, newshape=[432]) /* ty=Tensor[(432), float64] */;
  %640 = @func_234(%639) /* ty=(Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64], Tensor[(432), float64]) */;
  %641 = cast(%var_930, dtype="bool") /* ty=Tensor[(13, 8, 8), bool] */;
  %642 = shape_of(%var_923, dtype="int32") /* ty=Tensor[(3), int32] */;
  %643 = cast(%var_923, dtype="bool") /* ty=Tensor[(13, 8, 8), bool] */;
  %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %645 = logical_or(%643, %644) /* ty=Tensor[(13, 8, 8), bool] */;
  %646 = cast(%var_930, dtype="int16") /* ty=Tensor[(13, 8, 8), int16] */;
  %647 = shape_of(%645, dtype="int32") /* ty=Tensor[(3), int32] */;
  %648 = cast(%645, dtype="int16") /* ty=Tensor[(13, 8, 8), int16] */;
  %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %650 = add(%648, %649) /* ty=Tensor[(13, 8, 8), int16] */;
  %651 = cast(%var_930, dtype="uint32") /* ty=Tensor[(13, 8, 8), uint32] */;
  %652 = shape_of(%var_923, dtype="int32") /* ty=Tensor[(3), int32] */;
  %653 = cast(%var_923, dtype="uint32") /* ty=Tensor[(13, 8, 8), uint32] */;
  %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %655 = logical_xor(%653, %654) /* ty=Tensor[(13, 8, 8), uint32] */;
  %656 = cast(%655, dtype="bool") /* ty=Tensor[(13, 8, 8), bool] */;
  %657 = shape_of(%650, dtype="int32") /* ty=Tensor[(3), int32] */;
  %658 = cast(%650, dtype="bool") /* ty=Tensor[(13, 8, 8), bool] */;
  %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %660 = cast(%655, dtype="float32") /* ty=Tensor[(13, 8, 8), float32] */;
  %661 = left_shift(%636, %637) /* ty=Tensor[(13, 8, 8), uint16] */;
  %662 = %640.0;
  %663 = greater(%658, %659) /* ty=Tensor[(13, 8, 8), bool] */;
  %664 = rsqrt(%660) /* ty=Tensor[(13, 8, 8), float32] */;
  (%661, %662, %var_940, %663, %664)
}

def @func_4472(%var_4470: Tensor[(16, 14, 12), float64]) -> (Tensor[(16, 14, 12), uint8], Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64]) {
  @func_4469(%var_4470) /* ty=(Tensor[(16, 14, 12), uint8], Tensor[(12, 6, ?), float32], Tensor[(9, 3, 16), float64]) */
}

def @func_2594() -> (Tensor[(16, 14, 12), float64],) {
  %667 = fn () -> (Tensor[(16, 14, 12), float64],) {
    %665 = @func_858() /* ty=(Tensor[(16, 14, 12), float64],) */;
    %666 = %665.0;
    (%666,)
  };
  %667() /* ty=(Tensor[(16, 14, 12), float64],) */
}

def @func_2554() -> (Tensor[(9, 3, 16), float64],) {
  %668 = @func_1930() /* ty=Tensor[(9, 3, 16), float64] */;
  (%668,)
}

def @func_1186() -> (Tensor[(12, 15, 5), float64],) {
  %671 = fn () -> (Tensor[(12, 15, 5), float64],) {
    %669 = cast(meta[relay.Constant][30] /* ty=Tensor[(12, 15, 5), float64] */, dtype="float64") /* ty=Tensor[(12, 15, 5), float64] */;
    %670 = log10(%669) /* ty=Tensor[(12, 15, 5), float64] */;
    (%670,)
  };
  %671() /* ty=(Tensor[(12, 15, 5), float64],) */
}

def @func_4790() -> Tensor[(9, 3, 16), float64] {
  @func_4788() /* ty=Tensor[(9, 3, 16), float64] */
}

def @func_4605(%var_4604: uint64) -> (Tensor[(9, 1, 14), uint64],) {
  %675 = fn (%var_4594: uint64) -> (Tensor[(9, 1, 14), uint64],) {
    %672 = cast(%var_4594, dtype="uint64") /* ty=uint64 */;
    %673 = cast(meta[relay.Constant][31] /* ty=Tensor[(9, 1, 14), uint64] */, dtype="uint64") /* ty=Tensor[(9, 1, 14), uint64] */;
    %674 = bitwise_or(%672, %673) /* ty=Tensor[(9, 1, 14), uint64] */;
    (%674,)
  };
  %675(%var_4604) /* ty=(Tensor[(9, 1, 14), uint64],) */
}

def @func_3517() -> Tensor[(9, 3, 16), float64] {
  @func_3515() /* ty=Tensor[(9, 3, 16), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen85/build/output.py", line 1726, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:48:38] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

