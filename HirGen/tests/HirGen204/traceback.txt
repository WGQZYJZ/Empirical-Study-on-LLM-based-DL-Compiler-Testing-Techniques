==========mod==========
#[version = "0.0.5"]
def @func_8037() -> (Tensor[(12, 2, 13), bool],) {
  %0 = @func_4587() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %1 = %0.0;
  (%1,)
}

def @func_4650() -> Tensor[(12, 2, 13), bool] {
  @func_3965() /* ty=Tensor[(12, 2, 13), bool] */
}

def @func_7249() -> (Tensor[(12, 2, 13), float64], Tensor[(12, 2, 13), bool], Tensor[(60), float32], Tensor[(252), int32], Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), int8], Tensor[(1080), float32]) {
  %2 = @func_6965() /* ty=(Tensor[(12, 2, 13), float64],) */;
  %3 = @func_3278() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %4 = @func_3637() /* ty=Tensor[(12, 2, 13), bool] */;
  %5 = cast(%4, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
  %6 = reshape(%5, newshape=[12, 2, 13]) /* ty=Tensor[(12, 2, 13), bool] */;
  %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %8 = cast(meta[relay.Constant][1] /* ty=Tensor[(252), int32] */, dtype="int32") /* ty=Tensor[(252), int32] */;
  %9 = reshape(%7, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %10 = reshape(%8, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %11 = @func_4462(%9, %10) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), float32], Tensor[(60), float32], Tensor[(1080), int16], Tensor[(60), float32], Tensor[(252), int32]) */;
  %12 = %11.3;
  %13 = cast(%12, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %14 = %2.0;
  %15 = %3.0;
  %16 = @func_3654(%6) /* ty=Tensor[(12, 2, 13), int8] */;
  %17 = cos(%13) /* ty=Tensor[(1080), float32] */;
  (%14, %4, meta[relay.Constant][0] /* ty=Tensor[(60), float32] */, meta[relay.Constant][1] /* ty=Tensor[(252), int32] */, %15, %16, %17)
}

def @func_6913() -> (Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int32], Tensor[(12, 2, 13), int16], Tensor[(12, 2, 13), bool], Tensor[(1, 60), float32]) {
  %18 = @func_3675() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int32], Tensor[(252), int32]) */;
  %19 = @func_6456() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int32], Tensor[(252), int32], Tensor[(12, 2, 13), int16]) */;
  %20 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 60), float32] */, dtype="float32") /* ty=Tensor[(1, 60), float32] */;
  %21 = %18.1;
  %22 = cast(%21, dtype="int32") /* ty=Tensor[(14, 9, 2), int32] */;
  %23 = reshape(%20, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %24 = reshape(%22, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %25 = @func_4462(%23, %24) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), float32], Tensor[(60), float32], Tensor[(1080), int16], Tensor[(60), float32], Tensor[(252), int32]) */;
  %26 = @func_3637() /* ty=Tensor[(12, 2, 13), bool] */;
  %27 = %19.3;
  %28 = %25.0;
  (%26, %21, %27, %28, meta[relay.Constant][2] /* ty=Tensor[(1, 60), float32] */)
}

def @func_5518(%var_5478: Tensor[(60), float32], %var_5515: Tensor[(2080), float64]) -> (Tensor[(12, 2, 13), float32], Tensor[(1, 252), int32], Tensor[(60), float32], Tensor[(252), int32], Tensor[(12, 2, 13), float32], Tensor[(10, 13, 16), float64], Tensor[(2112), float64], Tensor[(2080), float64]) {
  %29 = @func_4270() /* ty=(Tensor[(12, 2, 13), float32],) */;
  %30 = cast(%var_5478, dtype="float32") /* ty=Tensor[(60), float32] */;
  %31 = cast(meta[relay.Constant][3] /* ty=Tensor[(252), int32] */, dtype="int32") /* ty=Tensor[(252), int32] */;
  %32 = cast(%var_5478, dtype="bool") /* ty=Tensor[(60), bool] */;
  %33 = reshape(%30, newshape=[2, 15, 2]) /* ty=Tensor[(2, 15, 2), float32] */;
  %34 = reshape(%31, newshape=[1, 252]) /* ty=Tensor[(1, 252), int32] */;
  %35 = reshape(%32, newshape=[2, 15, 2]) /* ty=Tensor[(2, 15, 2), bool] */;
  %36 = @func_177(%33, %34, %35) /* ty=(Tensor[(14, 9, 2), float32], Tensor[(1, 252), int32], Tensor[(2, 15, 2), bool]) */;
  %37 = @func_4514() /* ty=Tensor[(12, 2, 13), bool] */;
  %38 = cast(%37, dtype="float32") /* ty=Tensor[(12, 2, 13), float32] */;
  %39 = cast(meta[relay.Constant][4] /* ty=Tensor[(2112), float64] */, dtype="float64") /* ty=Tensor[(2112), float64] */;
  %40 = cast(%var_5515, dtype="float64") /* ty=Tensor[(2080), float64] */;
  %41 = reshape(%39, newshape=[12, 11, 16]) /* ty=Tensor[(12, 11, 16), float64] */;
  %42 = reshape(%40, newshape=[104, 20]) /* ty=Tensor[(104, 20), float64] */;
  %43 = @func_1197(%41, %42) /* ty=(Tensor[(10, 13, 16), float64], Tensor[(104, 20), float64], Tensor[(12, 11, 16), float32]) */;
  %44 = %29.0;
  %45 = %36.1;
  %46 = sinh(%38) /* ty=Tensor[(12, 2, 13), float32] */;
  %47 = %43.0;
  (%44, %45, %var_5478, meta[relay.Constant][3] /* ty=Tensor[(252), int32] */, %46, %47, meta[relay.Constant][4] /* ty=Tensor[(2112), float64] */, %var_5515)
}

def @main(%var_8335: Tensor[(2112), float64], %var_8336: Tensor[(2080), float64], %var_8410: Tensor[(2080), float64]) -> (Tensor[(12, 2, 13), float32], Tensor[(104, 20), int16], Tensor[(2112), uint16], Tensor[(2080), float64]) {
  %48 = @func_4270() /* ty=(Tensor[(12, 2, 13), float32],) */;
  %49 = cast(%var_8335, dtype="float64") /* ty=Tensor[(2112), float64] */;
  %50 = cast(%var_8336, dtype="float64") /* ty=Tensor[(2080), float64] */;
  %51 = reshape(%49, newshape=[12, 11, 16]) /* ty=Tensor[(12, 11, 16), float64] */;
  %52 = reshape(%50, newshape=[104, 20]) /* ty=Tensor[(104, 20), float64] */;
  %53 = @func_1197(%51, %52) /* ty=(Tensor[(10, 13, 16), float64], Tensor[(104, 20), float64], Tensor[(12, 11, 16), float32]) */;
  %54 = %53.1;
  %55 = cast(%var_8336, dtype="int16") /* ty=Tensor[(2080), int16] */;
  %56 = shape_of(%54, dtype="int32") /* ty=Tensor[(2), int32] */;
  %57 = cast(%54, dtype="int16") /* ty=Tensor[(104, 20), int16] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %59 = cast(meta[relay.Constant][5] /* ty=Tensor[(2112), float64] */, dtype="uint16") /* ty=Tensor[(2112), uint16] */;
  %60 = shape_of(%var_8335, dtype="int32") /* ty=Tensor[(1), int32] */;
  %61 = cast(%var_8335, dtype="uint16") /* ty=Tensor[(2112), uint16] */;
  %62 = dyn.reshape(%59, %60, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %63 = cast(%var_8410, dtype="bool") /* ty=Tensor[(2080), bool] */;
  %64 = shape_of(%var_8336, dtype="int32") /* ty=Tensor[(1), int32] */;
  %65 = cast(%var_8336, dtype="bool") /* ty=Tensor[(2080), bool] */;
  %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?), bool] */;
  %67 = greater_equal(%65, %66) /* ty=Tensor[(2080), bool] */;
  %68 = cast(%54, dtype="float64") /* ty=Tensor[(104, 20), float64] */;
  %69 = shape_of(%67, dtype="int32") /* ty=Tensor[(1), int32] */;
  %70 = cast(%67, dtype="float64") /* ty=Tensor[(2080), float64] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?), float64] */;
  %72 = %48.0;
  %73 = left_shift(%57, %58) /* ty=Tensor[(104, 20), int16] */;
  %74 = add(%61, %62) /* ty=Tensor[(2112), uint16] */;
  %75 = multiply(%70, %71) /* ty=Tensor[(2080), float64] */;
  (%72, %73, %74, %75)
}

def @func_7903() -> (Tensor[(13, 16, 15), bool], Tensor[(12, 2, 13), int64], Tensor[(6, 52), bool], Tensor[(12, 2, 13), bool]) {
  %76 = cast(meta[relay.Constant][6] /* ty=Tensor[(6, 52), bool] */, dtype="bool") /* ty=Tensor[(6, 52), bool] */;
  %77 = reshape(%76, newshape=[12, 2, 13]) /* ty=Tensor[(12, 2, 13), bool] */;
  %78 = @func_3424(%77) /* ty=(Tensor[(12, 2, 13), int64],) */;
  %79 = @func_5004() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) */;
  %80 = @func_7141() /* ty=Tensor[(13, 16, 15), bool] */;
  %81 = %78.0;
  %82 = %79.0;
  (%80, %81, meta[relay.Constant][6] /* ty=Tensor[(6, 52), bool] */, %82)
}

def @func_8099(%var_8068: Tensor[(14, 7, 4), float64], %var_8093: Tensor[(14, 7, 4), bool]) -> (Tensor[(12, 2, 13), float32], Tensor[(6, 14, 16), float32], Tensor[(1344), float32], Tensor[(14, 7, 4), bool]) {
  %83 = @func_7973() /* ty=(Tensor[(12, 2, 13), float64], Tensor[(12, 2, 13), float32]) */;
  %84 = cast(meta[relay.Constant][7] /* ty=Tensor[(1344), float32] */, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %85 = reshape(%84, newshape=[6, 14, 16]) /* ty=Tensor[(6, 14, 16), float32] */;
  %86 = @func_4739(%85) /* ty=(Tensor[(6, 14, 16), float32],) */;
  %87 = cast(%var_8068, dtype="float64") /* ty=Tensor[(14, 7, 4), float64] */;
  %88 = sin(%87) /* ty=Tensor[(14, 7, 4), float64] */;
  %89 = cast(%var_8068, dtype="bool") /* ty=Tensor[(14, 7, 4), bool] */;
  %90 = shape_of(%88, dtype="int32") /* ty=Tensor[(3), int32] */;
  %91 = cast(%88, dtype="bool") /* ty=Tensor[(14, 7, 4), bool] */;
  %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %93 = logical_or(%91, %92) /* ty=Tensor[(14, 7, 4), bool] */;
  %94 = cast(%var_8093, dtype="bool") /* ty=Tensor[(14, 7, 4), bool] */;
  %95 = shape_of(%93, dtype="int32") /* ty=Tensor[(3), int32] */;
  %96 = cast(%93, dtype="bool") /* ty=Tensor[(14, 7, 4), bool] */;
  %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %98 = %83.1;
  %99 = %86.0;
  %100 = less(%96, %97) /* ty=Tensor[(14, 7, 4), bool] */;
  (%98, %99, meta[relay.Constant][7] /* ty=Tensor[(1344), float32] */, %100)
}

def @func_3100(%var_3085: Tensor[(5, 6, 4), int16]) -> Tensor[(5, 6, 4), int16] {
  %101 = cast(%var_3085, dtype="int16") /* ty=Tensor[(5, 6, 4), int16] */;
  %102 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(5, 6, 4), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %103 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 6, 4), int16] */, dtype="int16") /* ty=Tensor[(5, 6, 4), int16] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  bitwise_and(%103, %104) /* ty=Tensor[(5, 6, 4), int16] */
}

def @func_3278() -> (Tensor[(12, 2, 13), bool],) {
  %105 = @func_3125() /* ty=Tensor[(12, 2, 13), bool] */;
  (%105,)
}

def @func_4196() -> Tensor[(12, 2, 13), bool] {
  @func_3507() /* ty=Tensor[(12, 2, 13), bool] */
}

def @func_6267() -> (Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) {
  %106 = @func_3507() /* ty=Tensor[(12, 2, 13), bool] */;
  %107 = cast(%106, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
  %108 = reshape(%107, newshape=[12, 2, 13]) /* ty=Tensor[(12, 2, 13), bool] */;
  %109 = @func_5630(%108) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), float64], Tensor[(12, 2, 13), float32]) */;
  %110 = %109.0;
  (%106, %110)
}

def @func_3249(%var_3210: Tensor[(9, 1, 9), int8], %var_3229: Tensor[(182), float64]) -> (Tensor[(9, 5, 9), int8], Tensor[(9, 5, 9), bool], Tensor[(10, 13, 16), float64], Tensor[(2080), float64], Tensor[(2080), float64], Tensor[(182), float64], Tensor[(10, 13, 16), float64]) {
  %111 = cast(%var_3210, dtype="int8") /* ty=Tensor[(9, 1, 9), int8] */;
  %112 = cast(meta[relay.Constant][9] /* ty=Tensor[(9, 5, 9), int8] */, dtype="int8") /* ty=Tensor[(9, 5, 9), int8] */;
  %113 = cast(meta[relay.Constant][9] /* ty=Tensor[(9, 5, 9), int8] */, dtype="bool") /* ty=Tensor[(9, 5, 9), bool] */;
  %114 = cast(%var_3210, dtype="bool") /* ty=Tensor[(9, 1, 9), bool] */;
  %115 = cast(meta[relay.Constant][10] /* ty=Tensor[(2080), float64] */, dtype="float64") /* ty=Tensor[(2080), float64] */;
  %116 = reshape(%115, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), float64] */;
  %117 = cast(%var_3229, dtype="float64") /* ty=Tensor[(182), float64] */;
  %118 = @func_770(%116) /* ty=Tensor[(10, 13, 16), float64] */;
  %119 = cast(%118, dtype="float64") /* ty=Tensor[(10, 13, 16), float64] */;
  %120 = reshape(%117, newshape=[1, 14, 13]) /* ty=Tensor[(1, 14, 13), float64] */;
  %121 = reshape(%119, newshape=[2080]) /* ty=Tensor[(2080), float64] */;
  %122 = @func_932(%120, %121) /* ty=(Tensor[(?, 14, 13), bool], Tensor[(10, 13, 16), float64], Tensor[(2080), float64]) */;
  %123 = cast(%var_3229, dtype="float64") /* ty=Tensor[(182), float64] */;
  %124 = %122.2;
  %125 = cast(%124, dtype="float64") /* ty=Tensor[(2080), float64] */;
  %126 = reshape(%123, newshape=[1, 14, 13]) /* ty=Tensor[(1, 14, 13), float64] */;
  %127 = reshape(%125, newshape=[2080]) /* ty=Tensor[(2080), float64] */;
  %128 = @func_932(%126, %127) /* ty=(Tensor[(?, 14, 13), bool], Tensor[(10, 13, 16), float64], Tensor[(2080), float64]) */;
  %129 = right_shift(%111, %112) /* ty=Tensor[(9, 5, 9), int8] */;
  %130 = greater(%113, %114) /* ty=Tensor[(9, 5, 9), bool] */;
  %131 = %128.1;
  (%129, %130, %118, meta[relay.Constant][10] /* ty=Tensor[(2080), float64] */, %124, %var_3229, %131)
}

def @func_7141() -> Tensor[(13, 16, 15), bool] {
  %132 = @func_6431() /* ty=(Tensor[(13, 16, 15), bool],) */;
  %132.0
}

def @func_5782(%var_5756: Tensor[(12, 2, 13), bool], %var_5775: Tensor[(252), int32]) -> (Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int32], Tensor[(252), int32]) {
  %133 = @func_3637() /* ty=Tensor[(12, 2, 13), bool] */;
  %134 = cast(%var_5756, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
  %135 = shape_of(%133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %136 = cast(%133, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %138 = cast(%var_5775, dtype="int32") /* ty=Tensor[(252), int32] */;
  %139 = reshape(%138, newshape=[14, 9, 2]) /* ty=Tensor[(14, 9, 2), int32] */;
  %140 = @func_41(%139) /* ty=(Tensor[(14, 9, 2), int32], Tensor[(14, 9, 2), float32]) */;
  %141 = logical_or(%136, %137) /* ty=Tensor[(12, 2, 13), bool] */;
  %142 = %140.0;
  (%141, %142, %var_5775)
}

def @func_2598(%var_2593: uint32, %var_2594: Tensor[(16, 8, 4), uint32]) -> (Tensor[(16, 8, 4), bool],) {
  %143 = cast(%var_2593, dtype="bool") /* ty=bool */;
  %144 = cast(%var_2594, dtype="bool") /* ty=Tensor[(16, 8, 4), bool] */;
  %145 = equal(%143, %144) /* ty=Tensor[(16, 8, 4), bool] */;
  (%145,)
}

def @func_5239(%var_5231: Tensor[(2, 16, 4), float64]) -> Tensor[(2, 16, 4), float32] {
  %146 = cast(-5.89583f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %147 = cast(%var_5231, dtype="float64") /* ty=Tensor[(2, 16, 4), float64] */;
  %148 = maximum(%146, %147) /* ty=Tensor[(2, 16, 4), float64] */;
  %149 = cast(%148, dtype="float32") /* ty=Tensor[(2, 16, 4), float32] */;
  %150 = shape_of(%var_5231, dtype="int32") /* ty=Tensor[(3), int32] */;
  %151 = cast(%var_5231, dtype="float32") /* ty=Tensor[(2, 16, 4), float32] */;
  %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  multiply(%151, %152) /* ty=Tensor[(2, 16, 4), float32] */
}

def @func_1991(%var_1951: Tensor[(11, 13, 5), float32], %var_1984: Tensor[(2080), float64]) -> (Tensor[(11, 13, 5), float32], Tensor[(10, 13, 16), float64], Tensor[(2112), float64], Tensor[(2080), float64]) {
  %153 = cast(%var_1951, dtype="float32") /* ty=Tensor[(11, 13, 5), float32] */;
  %154 = cast(meta[relay.Constant][11] /* ty=Tensor[(2112), float64] */, dtype="float64") /* ty=Tensor[(2112), float64] */;
  %155 = cast(%var_1984, dtype="float64") /* ty=Tensor[(2080), float64] */;
  %156 = reshape(%154, newshape=[12, 11, 16]) /* ty=Tensor[(12, 11, 16), float64] */;
  %157 = reshape(%155, newshape=[104, 20]) /* ty=Tensor[(104, 20), float64] */;
  %158 = @func_1197(%156, %157) /* ty=(Tensor[(10, 13, 16), float64], Tensor[(104, 20), float64], Tensor[(12, 11, 16), float32]) */;
  %159 = sinh(%153) /* ty=Tensor[(11, 13, 5), float32] */;
  %160 = %158.0;
  (%159, %160, meta[relay.Constant][11] /* ty=Tensor[(2112), float64] */, %var_1984)
}

def @func_8155() -> (Tensor[(12, 2, 13), bool],) {
  %161 = @func_3507() /* ty=Tensor[(12, 2, 13), bool] */;
  (%161,)
}

def @func_5861() -> (Tensor[(14, 9, 2), int32],) {
  %162 = @func_3675() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int32], Tensor[(252), int32]) */;
  %163 = %162.1;
  (%163,)
}

def @func_4684(%var_4672: Tensor[(14, 4, 2), int8], %var_4673: Tensor[(14, 4, 2), int8], %var_4682: Tensor[(240), float64]) -> (Tensor[(14, 4, 2), int8], Tensor[(8, 10, 3), bool], Tensor[(240), float64]) {
  %164 = cast(%var_4673, dtype="int8") /* ty=Tensor[(14, 4, 2), int8] */;
  %165 = shape_of(%var_4672, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(%var_4672, dtype="int8") /* ty=Tensor[(14, 4, 2), int8] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %168 = cast(%var_4682, dtype="float64") /* ty=Tensor[(240), float64] */;
  %169 = reshape(%168, newshape=[8, 10, 3]) /* ty=Tensor[(8, 10, 3), float64] */;
  %170 = minimum(%166, %167) /* ty=Tensor[(14, 4, 2), int8] */;
  %171 = @func_1522(%169) /* ty=Tensor[(8, 10, 3), bool] */;
  (%170, %171, %var_4682)
}

def @func_3911(%var_3901: Tensor[(6, 10, 9), int64], %var_3902: Tensor[(6, 10, 9), int64]) -> (Tensor[(6, 10, 9), bool], Tensor[(12, 2, 13), bool]) {
  %172 = cast(%var_3902, dtype="bool") /* ty=Tensor[(6, 10, 9), bool] */;
  %173 = shape_of(%var_3901, dtype="int32") /* ty=Tensor[(3), int32] */;
  %174 = cast(%var_3901, dtype="bool") /* ty=Tensor[(6, 10, 9), bool] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %176 = @func_3278() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %177 = equal(%174, %175) /* ty=Tensor[(6, 10, 9), bool] */;
  %178 = %176.0;
  (%177, %178)
}

def @func_5368(%var_5303: Tensor[(5, 9, 5), int8], %var_5304: Tensor[(5, 9, 5), int8], %var_5327: Tensor[(182), float64], %var_5328: Tensor[(2080), float64]) -> (Tensor[(?, 14, 13), bool], Tensor[(182), float64], Tensor[(2080), float64], Tensor[(12, 2, 13), bool], Tensor[(5, 9, 5), float64], Tensor[(12, 2, 13), bool]) {
  %179 = cast(%var_5327, dtype="float64") /* ty=Tensor[(182), float64] */;
  %180 = cast(%var_5328, dtype="float64") /* ty=Tensor[(2080), float64] */;
  %181 = reshape(%179, newshape=[1, 14, 13]) /* ty=Tensor[(1, 14, 13), float64] */;
  %182 = reshape(%180, newshape=[2080]) /* ty=Tensor[(2080), float64] */;
  %183 = @func_932(%181, %182) /* ty=(Tensor[(?, 14, 13), bool], Tensor[(10, 13, 16), float64], Tensor[(2080), float64]) */;
  %184 = @func_5004() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) */;
  %185 = cast(%var_5304, dtype="bool") /* ty=Tensor[(5, 9, 5), bool] */;
  %186 = shape_of(%var_5303, dtype="int32") /* ty=Tensor[(3), int32] */;
  %187 = cast(%var_5303, dtype="bool") /* ty=Tensor[(5, 9, 5), bool] */;
  %188 = dyn.reshape(%185, %186, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %189 = equal(%187, %188) /* ty=Tensor[(5, 9, 5), bool] */;
  %190 = cast(%189, dtype="float64") /* ty=Tensor[(5, 9, 5), float64] */;
  %191 = cos(%190) /* ty=Tensor[(5, 9, 5), float64] */;
  %192 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 9, 5), float64] */, dtype="float64") /* ty=Tensor[(5, 9, 5), float64] */;
  %193 = shape_of(%191, dtype="int32") /* ty=Tensor[(3), int32] */;
  %194 = cast(%191, dtype="float64") /* ty=Tensor[(5, 9, 5), float64] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %196 = @func_3857() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) */;
  %197 = %183.0;
  %198 = %184.1;
  %199 = divide(%194, %195) /* ty=Tensor[(5, 9, 5), float64] */;
  %200 = %196.0;
  (%197, %var_5327, %var_5328, %198, %199, %200)
}

def @func_4514() -> Tensor[(12, 2, 13), bool] {
  %201 = @func_3857() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) */;
  %201.0
}

def @func_5990(%var_5984: Tensor[(1, 10, 14), int8]) -> (Tensor[(11, 10, 14), int8],) {
  %202 = cast(%var_5984, dtype="int8") /* ty=Tensor[(1, 10, 14), int8] */;
  %203 = cast(meta[relay.Constant][13] /* ty=Tensor[(11, 10, 14), int8] */, dtype="int8") /* ty=Tensor[(11, 10, 14), int8] */;
  %204 = bitwise_xor(%202, %203) /* ty=Tensor[(11, 10, 14), int8] */;
  (%204,)
}

def @func_6739(%var_6722: Tensor[(12, 2, 13), bool]) -> Tensor[(12, 2, 13), float64] {
  %205 = @func_4127() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %206 = %205.0;
  %207 = cast(%var_6722, dtype="float32") /* ty=Tensor[(12, 2, 13), float32] */;
  %208 = shape_of(%206, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(%206, dtype="float32") /* ty=Tensor[(12, 2, 13), float32] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %211 = mod(%209, %210) /* ty=Tensor[(12, 2, 13), float32] */;
  %212 = cast(%211, dtype="float64") /* ty=Tensor[(12, 2, 13), float64] */;
  sin(%212) /* ty=Tensor[(12, 2, 13), float64] */
}

def @func_6548() -> Tensor[(12, 2, 13), bool] {
  %213 = @func_4127() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %213.0
}

def @func_3507() -> Tensor[(12, 2, 13), bool] {
  %214 = @func_3278() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %214.0
}

def @func_932(%var_912: Tensor[(1, 14, 13), float64], %var_929: Tensor[(2080), float64]) -> (Tensor[(?, 14, 13), bool], Tensor[(10, 13, 16), float64], Tensor[(2080), float64]) {
  %215 = cast(%var_912, dtype="float64") /* ty=Tensor[(1, 14, 13), float64] */;
  %216 = cosh(%215) /* ty=Tensor[(1, 14, 13), float64] */;
  %217 = cast(%var_912, dtype="bool") /* ty=Tensor[(1, 14, 13), bool] */;
  %218 = shape_of(%216, dtype="int32") /* ty=Tensor[(3), int32] */;
  %219 = cast(%216, dtype="bool") /* ty=Tensor[(1, 14, 13), bool] */;
  %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %221 = cast(%var_929, dtype="float64") /* ty=Tensor[(2080), float64] */;
  %222 = reshape(%221, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), float64] */;
  %223 = equal(%219, %220) /* ty=Tensor[(?, 14, 13), bool] */;
  %224 = @func_770(%222) /* ty=Tensor[(10, 13, 16), float64] */;
  (%223, %224, %var_929)
}

def @func_4270() -> (Tensor[(12, 2, 13), float32],) {
  %225 = @func_4010() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), float32]) */;
  %226 = %225.1;
  (%226,)
}

def @func_7754(%var_7747: Tensor[(2112), float64]) -> (Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool], Tensor[(13, 8, 6), float32], Tensor[(8, 78), float64], Tensor[(12, 2, 13), float64], Tensor[(2080), float64], Tensor[(2112), float64], Tensor[(2080), float64]) {
  %227 = @func_3291() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %228 = @func_4587() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %229 = cast(meta[relay.Constant][14] /* ty=Tensor[(8, 78), float64] */, dtype="float64") /* ty=Tensor[(8, 78), float64] */;
  %230 = reshape(%229, newshape=[13, 8, 6]) /* ty=Tensor[(13, 8, 6), float64] */;
  %231 = @func_3612(%230) /* ty=(Tensor[(13, 8, 6), float32], Tensor[(12, 2, 13), bool]) */;
  %232 = %228.0;
  %233 = cast(%232, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
  %234 = reshape(%233, newshape=[12, 2, 13]) /* ty=Tensor[(12, 2, 13), bool] */;
  %235 = cast(%var_7747, dtype="float64") /* ty=Tensor[(2112), float64] */;
  %236 = cast(meta[relay.Constant][15] /* ty=Tensor[(2080), float64] */, dtype="float64") /* ty=Tensor[(2080), float64] */;
  %237 = cast(%var_7747, dtype="float32") /* ty=Tensor[(2112), float32] */;
  %238 = reshape(%235, newshape=[132, 16]) /* ty=Tensor[(132, 16), float64] */;
  %239 = reshape(%236, newshape=[2080]) /* ty=Tensor[(2080), float64] */;
  %240 = reshape(%237, newshape=[132, 16]) /* ty=Tensor[(132, 16), float32] */;
  %241 = @func_3390(%238, %239, %240) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(2080), float64], Tensor[(104, 20), int32], Tensor[(132, 16), float32]) */;
  %242 = %227.0;
  %243 = %231.0;
  %244 = @func_6739(%234) /* ty=Tensor[(12, 2, 13), float64] */;
  %245 = %241.1;
  (%242, %232, %243, meta[relay.Constant][14] /* ty=Tensor[(8, 78), float64] */, %244, %245, %var_7747, meta[relay.Constant][15] /* ty=Tensor[(2080), float64] */)
}

def @func_4127() -> (Tensor[(12, 2, 13), bool],) {
  %246 = @func_3125() /* ty=Tensor[(12, 2, 13), bool] */;
  (%246,)
}

def @func_4739(%var_4736: Tensor[(6, 14, 16), float32]) -> (Tensor[(6, 14, 16), float32],) {
  %247 = cast(%var_4736, dtype="float32") /* ty=Tensor[(6, 14, 16), float32] */;
  %248 = asinh(%247) /* ty=Tensor[(6, 14, 16), float32] */;
  (%248,)
}

def @func_177(%var_131: Tensor[(2, 15, 2), float32], %var_170: Tensor[(1, 252), int32], %var_172: Tensor[(2, 15, 2), bool]) -> (Tensor[(14, 9, 2), float32], Tensor[(1, 252), int32], Tensor[(2, 15, 2), bool]) {
  %249 = cast(%var_170, dtype="int32") /* ty=Tensor[(1, 252), int32] */;
  %250 = reshape(%249, newshape=[14, 9, 2]) /* ty=Tensor[(14, 9, 2), int32] */;
  %251 = @func_41(%250) /* ty=(Tensor[(14, 9, 2), int32], Tensor[(14, 9, 2), float32]) */;
  %252 = cast(%var_131, dtype="float32") /* ty=Tensor[(2, 15, 2), float32] */;
  %253 = sqrt(%252) /* ty=Tensor[(2, 15, 2), float32] */;
  %254 = cast(%253, dtype="float32") /* ty=Tensor[(2, 15, 2), float32] */;
  %255 = shape_of(%var_131, dtype="int32") /* ty=Tensor[(3), int32] */;
  %256 = cast(%var_131, dtype="float32") /* ty=Tensor[(2, 15, 2), float32] */;
  %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %258 = power(%256, %257) /* ty=Tensor[(2, 15, 2), float32] */;
  %259 = cast(%258, dtype="float64") /* ty=Tensor[(2, 15, 2), float64] */;
  %260 = atan(%259) /* ty=Tensor[(2, 15, 2), float64] */;
  %261 = cast(%258, dtype="bool") /* ty=Tensor[(2, 15, 2), bool] */;
  %262 = shape_of(%260, dtype="int32") /* ty=Tensor[(3), int32] */;
  %263 = cast(%260, dtype="bool") /* ty=Tensor[(2, 15, 2), bool] */;
  %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %265 = not_equal(%263, %264) /* ty=Tensor[(2, 15, 2), bool] */;
  %266 = cast(%var_172, dtype="bool") /* ty=Tensor[(2, 15, 2), bool] */;
  %267 = shape_of(%265, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%265, dtype="bool") /* ty=Tensor[(2, 15, 2), bool] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %270 = %251.1;
  %271 = logical_and(%268, %269) /* ty=Tensor[(2, 15, 2), bool] */;
  (%270, %var_170, %271)
}

def @func_2283(%var_2266: Tensor[(14, 10, 13), float32]) -> Tensor[(14, 10, 13), float32] {
  %272 = cast(%var_2266, dtype="float32") /* ty=Tensor[(14, 10, 13), float32] */;
  %273 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(14, 10, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %274 = cast(meta[relay.Constant][16] /* ty=Tensor[(14, 10, 13), float32] */, dtype="float32") /* ty=Tensor[(14, 10, 13), float32] */;
  %275 = dyn.reshape(%272, %273, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%274, %275) /* ty=Tensor[(14, 10, 13), float32] */
}

def @func_4033() -> (Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) {
  %276 = @func_3857() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) */;
  %277 = %276.0;
  %278 = @func_3507() /* ty=Tensor[(12, 2, 13), bool] */;
  (%277, %278)
}

def @func_3424(%var_3419: Tensor[(12, 2, 13), bool]) -> (Tensor[(12, 2, 13), int64],) {
  %279 = @func_3278() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %280 = %279.0;
  %281 = cast(%var_3419, dtype="int64") /* ty=Tensor[(12, 2, 13), int64] */;
  %282 = shape_of(%280, dtype="int32") /* ty=Tensor[(3), int32] */;
  %283 = cast(%280, dtype="int64") /* ty=Tensor[(12, 2, 13), int64] */;
  %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %285 = bitwise_and(%283, %284) /* ty=Tensor[(12, 2, 13), int64] */;
  (%285,)
}

def @func_6230() -> (Tensor[(12, 2, 13), float32],) {
  %286 = @func_4010() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), float32]) */;
  %287 = %286.1;
  %288 = cast(%287, dtype="float32") /* ty=Tensor[(12, 2, 13), float32] */;
  %289 = asinh(%288) /* ty=Tensor[(12, 2, 13), float32] */;
  (%289,)
}

def @func_4587() -> (Tensor[(12, 2, 13), bool],) {
  %290 = @func_3965() /* ty=Tensor[(12, 2, 13), bool] */;
  (%290,)
}

def @func_3390(%var_3354: Tensor[(132, 16), float64], %var_3355: Tensor[(2080), float64], %var_3380: Tensor[(132, 16), float32]) -> (Tensor[(12, 2, 13), bool], Tensor[(2080), float64], Tensor[(104, 20), int32], Tensor[(132, 16), float32]) {
  %291 = @func_3291() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %292 = cast(%var_3354, dtype="float64") /* ty=Tensor[(132, 16), float64] */;
  %293 = cast(%var_3355, dtype="float64") /* ty=Tensor[(2080), float64] */;
  %294 = reshape(%292, newshape=[12, 11, 16]) /* ty=Tensor[(12, 11, 16), float64] */;
  %295 = reshape(%293, newshape=[104, 20]) /* ty=Tensor[(104, 20), float64] */;
  %296 = @func_1197(%294, %295) /* ty=(Tensor[(10, 13, 16), float64], Tensor[(104, 20), float64], Tensor[(12, 11, 16), float32]) */;
  %297 = %296.1;
  %298 = cast(meta[relay.Constant][17] /* ty=Tensor[(104, 20), float64] */, dtype="int32") /* ty=Tensor[(104, 20), int32] */;
  %299 = shape_of(%297, dtype="int32") /* ty=Tensor[(2), int32] */;
  %300 = cast(%297, dtype="int32") /* ty=Tensor[(104, 20), int32] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %302 = cast(%var_3354, dtype="float32") /* ty=Tensor[(132, 16), float32] */;
  %303 = cos(%302) /* ty=Tensor[(132, 16), float32] */;
  %304 = cast(%var_3380, dtype="float32") /* ty=Tensor[(132, 16), float32] */;
  %305 = shape_of(%303, dtype="int32") /* ty=Tensor[(2), int32] */;
  %306 = cast(%303, dtype="float32") /* ty=Tensor[(132, 16), float32] */;
  %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %308 = %291.0;
  %309 = bitwise_or(%300, %301) /* ty=Tensor[(104, 20), int32] */;
  %310 = floor_divide(%306, %307) /* ty=Tensor[(132, 16), float32] */;
  (%308, %var_3355, %309, %310)
}

def @func_6671(%var_6651: Tensor[(4, 4, 16), float64]) -> Tensor[(4, 4, 16), float64] {
  %311 = cast(%var_6651, dtype="float64") /* ty=Tensor[(4, 4, 16), float64] */;
  sigmoid(%311) /* ty=Tensor[(4, 4, 16), float64] */
}

def @func_7301() -> Tensor[(12, 2, 13), float32] {
  %312 = @func_6230() /* ty=(Tensor[(12, 2, 13), float32],) */;
  %312.0
}

def @func_8319() -> (Tensor[(13, 16, 15), bool],) {
  %313 = @func_7141() /* ty=Tensor[(13, 16, 15), bool] */;
  (%313,)
}

def @func_5455() -> (Tensor[(12, 2, 13), bool],) {
  %314 = @func_3278() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %315 = %314.0;
  (%315,)
}

def @func_3125() -> Tensor[(12, 2, 13), bool] {
  %316 = cast(meta[relay.Constant][19] /* ty=Tensor[(12, 2, 13), int64] */, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
  %317 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(12, 2, 13), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %318 = cast(meta[relay.Constant][18] /* ty=Tensor[(12, 2, 13), int64] */, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%318, %319) /* ty=Tensor[(12, 2, 13), bool] */
}

def @func_2655(%var_2635: Tensor[(12, 4, 7), float32]) -> (Tensor[(12, 4, 7), float32],) {
  %320 = cast(%var_2635, dtype="float32") /* ty=Tensor[(12, 4, 7), float32] */;
  %321 = erf(%320) /* ty=Tensor[(12, 4, 7), float32] */;
  %322 = cast(%321, dtype="float32") /* ty=Tensor[(12, 4, 7), float32] */;
  %323 = sqrt(%322) /* ty=Tensor[(12, 4, 7), float32] */;
  (%323,)
}

def @func_5210() -> Tensor[(12, 2, 13), float64] {
  %324 = @func_4630() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %325 = %324.0;
  %326 = cast(%325, dtype="float64") /* ty=Tensor[(12, 2, 13), float64] */;
  erf(%326) /* ty=Tensor[(12, 2, 13), float64] */
}

def @func_6833(%var_6822: Tensor[(14, 9, 2), int32]) -> (Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int64]) {
  %327 = @func_3291() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %328 = @func_6456() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int32], Tensor[(252), int32], Tensor[(12, 2, 13), int16]) */;
  %329 = %328.1;
  %330 = cast(%var_6822, dtype="int64") /* ty=Tensor[(14, 9, 2), int64] */;
  %331 = shape_of(%329, dtype="int32") /* ty=Tensor[(3), int32] */;
  %332 = cast(%329, dtype="int64") /* ty=Tensor[(14, 9, 2), int64] */;
  %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %334 = %327.0;
  %335 = bitwise_and(%332, %333) /* ty=Tensor[(14, 9, 2), int64] */;
  (%334, %335)
}

def @func_41(%var_24: Tensor[(14, 9, 2), int32]) -> (Tensor[(14, 9, 2), int32], Tensor[(14, 9, 2), float32]) {
  %336 = cast(meta[relay.Constant][20] /* ty=Tensor[(14, 9, 2), int32] */, dtype="int32") /* ty=Tensor[(14, 9, 2), int32] */;
  %337 = shape_of(%var_24, dtype="int32") /* ty=Tensor[(3), int32] */;
  %338 = cast(%var_24, dtype="int32") /* ty=Tensor[(14, 9, 2), int32] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %340 = cast(meta[relay.Constant][20] /* ty=Tensor[(14, 9, 2), int32] */, dtype="float32") /* ty=Tensor[(14, 9, 2), float32] */;
  %341 = subtract(%338, %339) /* ty=Tensor[(14, 9, 2), int32] */;
  %342 = atanh(%340) /* ty=Tensor[(14, 9, 2), float32] */;
  (%341, %342)
}

def @func_3637() -> Tensor[(12, 2, 13), bool] {
  @func_3507() /* ty=Tensor[(12, 2, 13), bool] */
}

def @func_5559(%var_5527: Tensor[(12, 7, 2), float32], %var_5528: Tensor[(12, 7, 2), float32]) -> Tensor[(12, 7, 2), float32] {
  %343 = cast(%var_5528, dtype="float32") /* ty=Tensor[(12, 7, 2), float32] */;
  %344 = shape_of(%var_5527, dtype="int32") /* ty=Tensor[(3), int32] */;
  %345 = cast(%var_5527, dtype="float32") /* ty=Tensor[(12, 7, 2), float32] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%345, %346) /* ty=Tensor[(12, 7, 2), float32] */
}

def @func_4010() -> (Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), float32]) {
  %347 = @func_3278() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %348 = %347.0;
  %349 = cast(%348, dtype="float32") /* ty=Tensor[(12, 2, 13), float32] */;
  %350 = @func_3965() /* ty=Tensor[(12, 2, 13), bool] */;
  %351 = log(%349) /* ty=Tensor[(12, 2, 13), float32] */;
  (%350, %351)
}

def @func_4462(%var_4450: Tensor[(60), float32], %var_4451: Tensor[(252), int32]) -> (Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), float32], Tensor[(60), float32], Tensor[(1080), int16], Tensor[(60), float32], Tensor[(252), int32]) {
  %352 = @func_3278() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %353 = @func_4010() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), float32]) */;
  %354 = cast(meta[relay.Constant][21] /* ty=Tensor[(1080), int16] */, dtype="int16") /* ty=Tensor[(1080), int16] */;
  %355 = cast(meta[relay.Constant][21] /* ty=Tensor[(1080), int16] */, dtype="int16") /* ty=Tensor[(1080), int16] */;
  %356 = cast(%var_4450, dtype="float32") /* ty=Tensor[(60), float32] */;
  %357 = cast(%var_4451, dtype="int32") /* ty=Tensor[(252), int32] */;
  %358 = reshape(%354, newshape=[12, 15, 6]) /* ty=Tensor[(12, 15, 6), int16] */;
  %359 = reshape(%355, newshape=[12, 15, 6]) /* ty=Tensor[(12, 15, 6), int16] */;
  %360 = reshape(%356, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %361 = reshape(%357, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %362 = @func_527(%358, %359, %360, %361) /* ty=(Tensor[(12, 15, 6), bool], Tensor[(2, 15, 2), bool], Tensor[(60), float32], Tensor[(252), int32], Tensor[(14, 9, 2), float32], Tensor[(14, 9, 2), int32], Tensor[(14, 9, 2), float32]) */;
  %363 = %352.0;
  %364 = %353.1;
  %365 = %362.2;
  (%363, %364, %365, meta[relay.Constant][21] /* ty=Tensor[(1080), int16] */, %var_4450, %var_4451)
}

def @func_3317(%var_3307: Tensor[(182), float64]) -> (Tensor[(12, 2, 13), bool], Tensor[(182), float64], Tensor[(81), int8], Tensor[(182), float64], Tensor[(16, 8, 4), bool], uint32, Tensor[(512), uint32]) {
  %366 = @func_3291() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %367 = cast(meta[relay.Constant][22] /* ty=Tensor[(81), int8] */, dtype="int8") /* ty=Tensor[(81), int8] */;
  %368 = cast(%var_3307, dtype="float64") /* ty=Tensor[(182), float64] */;
  %369 = reshape(%367, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), int8] */;
  %370 = reshape(%368, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %371 = @func_3249(%369, %370) /* ty=(Tensor[(9, 5, 9), int8], Tensor[(9, 5, 9), bool], Tensor[(10, 13, 16), float64], Tensor[(2080), float64], Tensor[(2080), float64], Tensor[(182), float64], Tensor[(10, 13, 16), float64]) */;
  %372 = cast(meta[relay.Constant][23] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %373 = cast(meta[relay.Constant][24] /* ty=Tensor[(512), uint32] */, dtype="uint32") /* ty=Tensor[(512), uint32] */;
  %374 = reshape(%372, newshape=[]) /* ty=uint32 */;
  %375 = reshape(%373, newshape=[16, 8, 4]) /* ty=Tensor[(16, 8, 4), uint32] */;
  %376 = @func_2598(%374, %375) /* ty=(Tensor[(16, 8, 4), bool],) */;
  %377 = %366.0;
  %378 = %371.5;
  %379 = %376.0;
  (%377, %378, meta[relay.Constant][22] /* ty=Tensor[(81), int8] */, %var_3307, %379, meta[relay.Constant][23] /* ty=uint32 */, meta[relay.Constant][24] /* ty=Tensor[(512), uint32] */)
}

def @func_5712(%var_5679: Tensor[(81), int8]) -> (Tensor[(12, 2, 13), float32], Tensor[(12, 2, 13), bool], Tensor[(10, 13, 16), float64], Tensor[(81), int8], Tensor[(182), float64], Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) {
  %380 = @func_3857() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) */;
  %381 = %380.1;
  %382 = cast(%381, dtype="float32") /* ty=Tensor[(12, 2, 13), float32] */;
  %383 = @func_4587() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %384 = cast(%var_5679, dtype="int8") /* ty=Tensor[(81), int8] */;
  %385 = cast(meta[relay.Constant][25] /* ty=Tensor[(182), float64] */, dtype="float64") /* ty=Tensor[(182), float64] */;
  %386 = reshape(%384, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), int8] */;
  %387 = reshape(%385, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %388 = @func_3249(%386, %387) /* ty=(Tensor[(9, 5, 9), int8], Tensor[(9, 5, 9), bool], Tensor[(10, 13, 16), float64], Tensor[(2080), float64], Tensor[(2080), float64], Tensor[(182), float64], Tensor[(10, 13, 16), float64]) */;
  %389 = sigmoid(%382) /* ty=Tensor[(12, 2, 13), float32] */;
  %390 = %383.0;
  %391 = %388.6;
  %392 = @func_4196() /* ty=Tensor[(12, 2, 13), bool] */;
  %393 = @func_3507() /* ty=Tensor[(12, 2, 13), bool] */;
  (%389, %390, %391, %var_5679, meta[relay.Constant][25] /* ty=Tensor[(182), float64] */, %392, %393)
}

def @func_3965() -> Tensor[(12, 2, 13), bool] {
  @func_3507() /* ty=Tensor[(12, 2, 13), bool] */
}

def @func_7259() -> (Tensor[(12, 2, 13), bool],) {
  %394 = @func_3278() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %395 = %394.0;
  (%395,)
}

def @func_8249(%var_8223: Tensor[(2112), float64], %var_8224: Tensor[(1, 2080), float64]) -> (Tensor[(12, 2, 13), int16], Tensor[(2112), float64], Tensor[(?, 2080), uint64]) {
  %396 = @func_6913() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int32], Tensor[(12, 2, 13), int16], Tensor[(12, 2, 13), bool], Tensor[(1, 60), float32]) */;
  %397 = cast(%var_8223, dtype="float64") /* ty=Tensor[(2112), float64] */;
  %398 = cast(%var_8224, dtype="float64") /* ty=Tensor[(1, 2080), float64] */;
  %399 = reshape(%397, newshape=[12, 11, 16]) /* ty=Tensor[(12, 11, 16), float64] */;
  %400 = reshape(%398, newshape=[104, 20]) /* ty=Tensor[(104, 20), float64] */;
  %401 = @func_1197(%399, %400) /* ty=(Tensor[(10, 13, 16), float64], Tensor[(104, 20), float64], Tensor[(12, 11, 16), float32]) */;
  %402 = %401.1;
  %403 = cast(%402, dtype="uint64") /* ty=Tensor[(104, 20), uint64] */;
  %404 = shape_of(%var_8224, dtype="int32") /* ty=Tensor[(2), int32] */;
  %405 = cast(%var_8224, dtype="uint64") /* ty=Tensor[(1, 2080), uint64] */;
  %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %407 = %396.2;
  %408 = left_shift(%405, %406) /* ty=Tensor[(?, 2080), uint64] */;
  (%407, %var_8223, %408)
}

def @func_1522(%var_1516: Tensor[(8, 10, 3), float64]) -> Tensor[(8, 10, 3), bool] {
  %409 = cast(%var_1516, dtype="bool") /* ty=Tensor[(8, 10, 3), bool] */;
  %410 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(8, 10, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %411 = cast(meta[relay.Constant][26] /* ty=Tensor[(8, 10, 3), float64] */, dtype="bool") /* ty=Tensor[(8, 10, 3), bool] */;
  %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%411, %412) /* ty=Tensor[(8, 10, 3), bool] */
}

def @func_7557(%var_7525: Tensor[(13, 55), float32], %var_7526: Tensor[(2080), float64]) -> (Tensor[(11, 10, 14), int8], Tensor[(140), int8], Tensor[(2080), float64], Tensor[(13, 55), float32], Tensor[(2080), float64], Tensor[(14, 10, 13), float32], Tensor[(104, 20), float64], Tensor[(2112), float64], Tensor[(1820), float64]) {
  %413 = cast(meta[relay.Constant][27] /* ty=Tensor[(140), int8] */, dtype="int8") /* ty=Tensor[(140), int8] */;
  %414 = reshape(%413, newshape=[1, 10, 14]) /* ty=Tensor[(1, 10, 14), int8] */;
  %415 = @func_5990(%414) /* ty=(Tensor[(11, 10, 14), int8],) */;
  %416 = cast(%var_7525, dtype="float32") /* ty=Tensor[(13, 55), float32] */;
  %417 = cast(%var_7526, dtype="float64") /* ty=Tensor[(2080), float64] */;
  %418 = reshape(%416, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), float32] */;
  %419 = reshape(%417, newshape=[2080]) /* ty=Tensor[(2080), float64] */;
  %420 = @func_1991(%418, %419) /* ty=(Tensor[(11, 13, 5), float32], Tensor[(10, 13, 16), float64], Tensor[(2112), float64], Tensor[(2080), float64]) */;
  %421 = @func_4080() /* ty=(Tensor[(1820), bool], Tensor[(12, 2, 13), float32]) */;
  %422 = %421.0;
  %423 = cast(%422, dtype="float32") /* ty=Tensor[(1820), float32] */;
  %424 = reshape(%423, newshape=[14, 10, 13]) /* ty=Tensor[(14, 10, 13), float32] */;
  %425 = cast(meta[relay.Constant][28] /* ty=Tensor[(2112), float64] */, dtype="float64") /* ty=Tensor[(2112), float64] */;
  %426 = cast(%var_7526, dtype="float64") /* ty=Tensor[(2080), float64] */;
  %427 = reshape(%425, newshape=[12, 11, 16]) /* ty=Tensor[(12, 11, 16), float64] */;
  %428 = reshape(%426, newshape=[104, 20]) /* ty=Tensor[(104, 20), float64] */;
  %429 = @func_1197(%427, %428) /* ty=(Tensor[(10, 13, 16), float64], Tensor[(104, 20), float64], Tensor[(12, 11, 16), float32]) */;
  %430 = cast(%422, dtype="float64") /* ty=Tensor[(1820), float64] */;
  %431 = %415.0;
  %432 = %420.3;
  %433 = @func_2283(%424) /* ty=Tensor[(14, 10, 13), float32] */;
  %434 = %429.1;
  %435 = cos(%430) /* ty=Tensor[(1820), float64] */;
  (%431, meta[relay.Constant][27] /* ty=Tensor[(140), int8] */, %432, %var_7525, %var_7526, %433, %434, meta[relay.Constant][28] /* ty=Tensor[(2112), float64] */, %435)
}

def @func_6965() -> (Tensor[(12, 2, 13), float64],) {
  %436 = @func_5210() /* ty=Tensor[(12, 2, 13), float64] */;
  (%436,)
}

def @func_5019() -> Tensor[(12, 2, 13), float32] {
  %437 = @func_4270() /* ty=(Tensor[(12, 2, 13), float32],) */;
  %437.0
}

def @func_4293() -> Tensor[(16, 4, 16), float64] {
  %438 = cast(meta[relay.Constant][29] /* ty=Tensor[(16, 4, 16), float64] */, dtype="float64") /* ty=Tensor[(16, 4, 16), float64] */;
  asinh(%438) /* ty=Tensor[(16, 4, 16), float64] */
}

def @func_7502(%var_7452: Tensor[(6, 3, 1), float32], %var_7470: uint32, %var_7471: Tensor[(512), uint32]) -> (Tensor[(6, 3, ?), uint16], Tensor[(16, 8, 4), bool], Tensor[(512), uint32], Tensor[(6, 3, 1), float64], Tensor[(12, 2, 13), bool], Tensor[(6, 3, 1), bool], Tensor[(16, 8, 4), bool]) {
  %439 = cast(%var_7452, dtype="float32") /* ty=Tensor[(6, 3, 1), float32] */;
  %440 = atanh(%439) /* ty=Tensor[(6, 3, 1), float32] */;
  %441 = cast(%440, dtype="uint16") /* ty=Tensor[(6, 3, 1), uint16] */;
  %442 = shape_of(%var_7452, dtype="int32") /* ty=Tensor[(3), int32] */;
  %443 = cast(%var_7452, dtype="uint16") /* ty=Tensor[(6, 3, 1), uint16] */;
  %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %445 = cast(%var_7470, dtype="uint32") /* ty=uint32 */;
  %446 = cast(%var_7471, dtype="uint32") /* ty=Tensor[(512), uint32] */;
  %447 = reshape(%445, newshape=[]) /* ty=uint32 */;
  %448 = reshape(%446, newshape=[16, 8, 4]) /* ty=Tensor[(16, 8, 4), uint32] */;
  %449 = @func_2598(%447, %448) /* ty=(Tensor[(16, 8, 4), bool],) */;
  %450 = cast(%440, dtype="float64") /* ty=Tensor[(6, 3, 1), float64] */;
  %451 = cast(%var_7470, dtype="bool") /* ty=bool */;
  %452 = cast(%440, dtype="bool") /* ty=Tensor[(6, 3, 1), bool] */;
  %453 = cast(%var_7470, dtype="uint32") /* ty=uint32 */;
  %454 = %449.0;
  %455 = cast(%454, dtype="uint32") /* ty=Tensor[(16, 8, 4), uint32] */;
  %456 = reshape(%453, newshape=[]) /* ty=uint32 */;
  %457 = reshape(%455, newshape=[16, 8, 4]) /* ty=Tensor[(16, 8, 4), uint32] */;
  %458 = @func_2598(%456, %457) /* ty=(Tensor[(16, 8, 4), bool],) */;
  %459 = left_shift(%443, %444) /* ty=Tensor[(6, 3, ?), uint16] */;
  %460 = acos(%450) /* ty=Tensor[(6, 3, 1), float64] */;
  %461 = @func_6548() /* ty=Tensor[(12, 2, 13), bool] */;
  %462 = less_equal(%451, %452) /* ty=Tensor[(6, 3, 1), bool] */;
  %463 = %458.0;
  (%459, %454, %var_7471, %460, %461, %462, %463)
}

def @func_5414(%var_5400: Tensor[(182), float64], %var_5408: Tensor[(182), float64]) -> (Tensor[(252), int32], Tensor[(182), int16], Tensor[(1, 312), float32], Tensor[(182), bool]) {
  %464 = @func_3675() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int32], Tensor[(252), int32]) */;
  %465 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 312), float32] */, dtype="float32") /* ty=Tensor[(1, 312), float32] */;
  %466 = cast(%var_5400, dtype="float64") /* ty=Tensor[(182), float64] */;
  %467 = cast(%var_5400, dtype="float64") /* ty=Tensor[(182), float64] */;
  %468 = %464.2;
  %469 = cast(%468, dtype="int32") /* ty=Tensor[(252), int32] */;
  %470 = reshape(%465, newshape=[12, 2, 13]) /* ty=Tensor[(12, 2, 13), float32] */;
  %471 = reshape(%466, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %472 = reshape(%467, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %473 = reshape(%469, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %474 = @func_3796(%470, %471, %472, %473) /* ty=(Tensor[(12, 2, 13), float32], Tensor[(12, 2, 13), float64], Tensor[(16, 8, 4), bool], Tensor[(182), int16], Tensor[(14, 9, 2), float32], Tensor[(252), int32], Tensor[(12, 2, 13), float32]) */;
  %475 = cast(%var_5408, dtype="bool") /* ty=Tensor[(182), bool] */;
  %476 = shape_of(%var_5400, dtype="int32") /* ty=Tensor[(1), int32] */;
  %477 = cast(%var_5400, dtype="bool") /* ty=Tensor[(182), bool] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?), bool] */;
  %479 = %474.3;
  %480 = logical_or(%477, %478) /* ty=Tensor[(182), bool] */;
  (%468, %479, meta[relay.Constant][30] /* ty=Tensor[(1, 312), float32] */, %480)
}

def @func_7973() -> (Tensor[(12, 2, 13), float64], Tensor[(12, 2, 13), float32]) {
  %481 = @func_7801() /* ty=(Tensor[(12, 2, 13), float64],) */;
  %482 = @func_6230() /* ty=(Tensor[(12, 2, 13), float32],) */;
  %483 = %481.0;
  %484 = %482.0;
  (%483, %484)
}

def @func_6341() -> (Tensor[(12, 2, 13), bool],) {
  %485 = @func_4650() /* ty=Tensor[(12, 2, 13), bool] */;
  (%485,)
}

def @func_3796(%var_3743: Tensor[(12, 2, 13), float32], %var_3756: Tensor[(182), float64], %var_3758: Tensor[(182), float64], %var_3774: Tensor[(252), int32]) -> (Tensor[(12, 2, 13), float32], Tensor[(12, 2, 13), float64], Tensor[(16, 8, 4), bool], Tensor[(182), int16], Tensor[(14, 9, 2), float32], Tensor[(252), int32], Tensor[(12, 2, 13), float32]) {
  %486 = cast(%var_3743, dtype="float32") /* ty=Tensor[(12, 2, 13), float32] */;
  %487 = @func_3291() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %488 = %487.0;
  %489 = cast(%488, dtype="float64") /* ty=Tensor[(12, 2, 13), float64] */;
  %490 = cast(%var_3756, dtype="float64") /* ty=Tensor[(182), float64] */;
  %491 = reshape(%490, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %492 = @func_3317(%491) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(182), float64], Tensor[(81), int8], Tensor[(182), float64], Tensor[(16, 8, 4), bool], uint32, Tensor[(512), uint32]) */;
  %493 = cast(%var_3758, dtype="int16") /* ty=Tensor[(182), int16] */;
  %494 = shape_of(%var_3756, dtype="int32") /* ty=Tensor[(1), int32] */;
  %495 = cast(%var_3756, dtype="int16") /* ty=Tensor[(182), int16] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?), int16] */;
  %497 = cast(%var_3774, dtype="int32") /* ty=Tensor[(252), int32] */;
  %498 = reshape(%497, newshape=[14, 9, 2]) /* ty=Tensor[(14, 9, 2), int32] */;
  %499 = @func_41(%498) /* ty=(Tensor[(14, 9, 2), int32], Tensor[(14, 9, 2), float32]) */;
  %500 = cast(%488, dtype="float32") /* ty=Tensor[(12, 2, 13), float32] */;
  %501 = asin(%500) /* ty=Tensor[(12, 2, 13), float32] */;
  %502 = cast(%var_3743, dtype="float64") /* ty=Tensor[(12, 2, 13), float64] */;
  %503 = shape_of(%501, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(%501, dtype="float64") /* ty=Tensor[(12, 2, 13), float64] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %506 = floor_divide(%504, %505) /* ty=Tensor[(12, 2, 13), float64] */;
  %507 = cast(%506, dtype="float32") /* ty=Tensor[(12, 2, 13), float32] */;
  %508 = shape_of(%488, dtype="int32") /* ty=Tensor[(3), int32] */;
  %509 = cast(%488, dtype="float32") /* ty=Tensor[(12, 2, 13), float32] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %511 = log10(%486) /* ty=Tensor[(12, 2, 13), float32] */;
  %512 = atan(%489) /* ty=Tensor[(12, 2, 13), float64] */;
  %513 = %492.4;
  %514 = left_shift(%495, %496) /* ty=Tensor[(182), int16] */;
  %515 = %499.1;
  %516 = power(%509, %510) /* ty=Tensor[(12, 2, 13), float32] */;
  (%511, %512, %513, %514, %515, %var_3774, %516)
}

def @func_3857() -> (Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) {
  %517 = @func_3278() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %518 = @func_3507() /* ty=Tensor[(12, 2, 13), bool] */;
  %519 = %517.0;
  (%518, %519)
}

def @func_3612(%var_3593: Tensor[(13, 8, 6), float64]) -> (Tensor[(13, 8, 6), float32], Tensor[(12, 2, 13), bool]) {
  %520 = cast(%var_3593, dtype="float64") /* ty=Tensor[(13, 8, 6), float64] */;
  %521 = sinh(%520) /* ty=Tensor[(13, 8, 6), float64] */;
  %522 = cast(%521, dtype="float32") /* ty=Tensor[(13, 8, 6), float32] */;
  %523 = @func_3278() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %524 = sqrt(%522) /* ty=Tensor[(13, 8, 6), float32] */;
  %525 = %523.0;
  (%524, %525)
}

def @func_2172(%var_2166: uint32, %var_2167: Tensor[(7, 3, 5), uint32]) -> (Tensor[(7, 3, 5), uint32],) {
  %526 = cast(%var_2166, dtype="uint32") /* ty=uint32 */;
  %527 = cast(%var_2167, dtype="uint32") /* ty=Tensor[(7, 3, 5), uint32] */;
  %528 = bitwise_or(%526, %527) /* ty=Tensor[(7, 3, 5), uint32] */;
  (%528,)
}

def @func_8201() -> (Tensor[(12, 2, 13), float32], Tensor[(12, 2, 13), bool]) {
  %529 = @func_4270() /* ty=(Tensor[(12, 2, 13), float32],) */;
  %530 = %529.0;
  %531 = @func_3507() /* ty=Tensor[(12, 2, 13), bool] */;
  (%530, %531)
}

def @func_770(%var_767: Tensor[(10, 13, 16), float64]) -> Tensor[(10, 13, 16), float64] {
  %532 = cast(%var_767, dtype="float64") /* ty=Tensor[(10, 13, 16), float64] */;
  atan(%532) /* ty=Tensor[(10, 13, 16), float64] */
}

def @func_4788(%var_4776: Tensor[(12, 16, 1), float32]) -> Tensor[(12, 16, 1), float32] {
  %533 = cast(%var_4776, dtype="float32") /* ty=Tensor[(12, 16, 1), float32] */;
  sin(%533) /* ty=Tensor[(12, 16, 1), float32] */
}

def @func_7439() -> (Tensor[(12, 2, 13), bool], Tensor[(13, 11, 2), float32], Tensor[(14, 9, 2), int32], Tensor[(252), int32], Tensor[(12, 2, 13), bool]) {
  %534 = @func_4630() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %535 = cast(meta[relay.Constant][31] /* ty=Tensor[(13, 11, 2), float64] */, dtype="float64") /* ty=Tensor[(13, 11, 2), float64] */;
  %536 = erf(%535) /* ty=Tensor[(13, 11, 2), float64] */;
  %537 = cast(meta[relay.Constant][31] /* ty=Tensor[(13, 11, 2), float64] */, dtype="float32") /* ty=Tensor[(13, 11, 2), float32] */;
  %538 = shape_of(%536, dtype="int32") /* ty=Tensor[(3), int32] */;
  %539 = cast(%536, dtype="float32") /* ty=Tensor[(13, 11, 2), float32] */;
  %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %541 = %534.0;
  %542 = cast(%541, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
  %543 = cast(meta[relay.Constant][32] /* ty=Tensor[(252), int32] */, dtype="int32") /* ty=Tensor[(252), int32] */;
  %544 = reshape(%542, newshape=[12, 2, 13]) /* ty=Tensor[(12, 2, 13), bool] */;
  %545 = reshape(%543, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %546 = @func_5782(%544, %545) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int32], Tensor[(252), int32]) */;
  %547 = floor_divide(%539, %540) /* ty=Tensor[(13, 11, 2), float32] */;
  %548 = %546.1;
  %549 = @func_4514() /* ty=Tensor[(12, 2, 13), bool] */;
  (%541, %547, %548, meta[relay.Constant][32] /* ty=Tensor[(252), int32] */, %549)
}

def @func_7801() -> (Tensor[(12, 2, 13), float64],) {
  %550 = @func_5210() /* ty=Tensor[(12, 2, 13), float64] */;
  (%550,)
}

def @func_5630(%var_5579: Tensor[(12, 2, 13), bool]) -> (Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), float64], Tensor[(12, 2, 13), float32]) {
  %551 = @func_3965() /* ty=Tensor[(12, 2, 13), bool] */;
  %552 = cast(%var_5579, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
  %553 = shape_of(%551, dtype="int32") /* ty=Tensor[(3), int32] */;
  %554 = cast(%551, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
  %555 = dyn.reshape(%552, %553, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %556 = @func_3857() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) */;
  %557 = cast(%551, dtype="float64") /* ty=Tensor[(12, 2, 13), float64] */;
  %558 = cos(%557) /* ty=Tensor[(12, 2, 13), float64] */;
  %559 = cast(%558, dtype="float64") /* ty=Tensor[(12, 2, 13), float64] */;
  %560 = cast(%558, dtype="float64") /* ty=Tensor[(12, 2, 13), float64] */;
  %561 = atanh(%560) /* ty=Tensor[(12, 2, 13), float64] */;
  %562 = cast(%561, dtype="float32") /* ty=Tensor[(12, 2, 13), float32] */;
  %563 = equal(%554, %555) /* ty=Tensor[(12, 2, 13), bool] */;
  %564 = %556.1;
  %565 = cosh(%559) /* ty=Tensor[(12, 2, 13), float64] */;
  %566 = exp(%562) /* ty=Tensor[(12, 2, 13), float32] */;
  (%563, %564, %565, %566)
}

def @func_1762(%var_1752: Tensor[(2080), float64]) -> (Tensor[(2, 15, 5), float64], Tensor[(10, 13, 16), float64], Tensor[(2080), float64]) {
  %567 = cast(meta[relay.Constant][33] /* ty=Tensor[(2, 15, 5), float64] */, dtype="float64") /* ty=Tensor[(2, 15, 5), float64] */;
  %568 = cast(%var_1752, dtype="float64") /* ty=Tensor[(2080), float64] */;
  %569 = reshape(%568, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), float64] */;
  %570 = sqrt(%567) /* ty=Tensor[(2, 15, 5), float64] */;
  %571 = @func_770(%569) /* ty=Tensor[(10, 13, 16), float64] */;
  (%570, %571, %var_1752)
}

def @func_8126() -> (Tensor[(12, 2, 13), bool],) {
  %572 = @func_4127() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %573 = %572.0;
  (%573,)
}

def @func_1197(%var_1182: Tensor[(12, 11, 16), float64], %var_1186: Tensor[(104, 20), float64]) -> (Tensor[(10, 13, 16), float64], Tensor[(104, 20), float64], Tensor[(12, 11, 16), float32]) {
  %574 = cast(%var_1186, dtype="float64") /* ty=Tensor[(104, 20), float64] */;
  %575 = reshape(%574, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), float64] */;
  %576 = cast(%var_1182, dtype="float64") /* ty=Tensor[(12, 11, 16), float64] */;
  %577 = log2(%576) /* ty=Tensor[(12, 11, 16), float64] */;
  %578 = cast(%577, dtype="float32") /* ty=Tensor[(12, 11, 16), float32] */;
  %579 = @func_770(%575) /* ty=Tensor[(10, 13, 16), float64] */;
  %580 = sigmoid(%578) /* ty=Tensor[(12, 11, 16), float32] */;
  (%579, %var_1186, %580)
}

def @func_527(%var_484: Tensor[(12, 15, 6), int16], %var_485: Tensor[(12, 15, 6), int16], %var_494: Tensor[(60), float32], %var_495: Tensor[(252), int32]) -> (Tensor[(12, 15, 6), bool], Tensor[(2, 15, 2), bool], Tensor[(60), float32], Tensor[(252), int32], Tensor[(14, 9, 2), float32], Tensor[(14, 9, 2), int32], Tensor[(14, 9, 2), float32]) {
  %581 = cast(%var_485, dtype="bool") /* ty=Tensor[(12, 15, 6), bool] */;
  %582 = shape_of(%var_484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %583 = cast(%var_484, dtype="bool") /* ty=Tensor[(12, 15, 6), bool] */;
  %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %585 = cast(%var_494, dtype="float32") /* ty=Tensor[(60), float32] */;
  %586 = cast(%var_495, dtype="int32") /* ty=Tensor[(252), int32] */;
  %587 = cast(%var_494, dtype="bool") /* ty=Tensor[(60), bool] */;
  %588 = reshape(%585, newshape=[2, 15, 2]) /* ty=Tensor[(2, 15, 2), float32] */;
  %589 = reshape(%586, newshape=[1, 252]) /* ty=Tensor[(1, 252), int32] */;
  %590 = reshape(%587, newshape=[2, 15, 2]) /* ty=Tensor[(2, 15, 2), bool] */;
  %591 = @func_177(%588, %589, %590) /* ty=(Tensor[(14, 9, 2), float32], Tensor[(1, 252), int32], Tensor[(2, 15, 2), bool]) */;
  %592 = cast(%var_495, dtype="int32") /* ty=Tensor[(252), int32] */;
  %593 = reshape(%592, newshape=[14, 9, 2]) /* ty=Tensor[(14, 9, 2), int32] */;
  %594 = @func_41(%593) /* ty=(Tensor[(14, 9, 2), int32], Tensor[(14, 9, 2), float32]) */;
  %595 = %594.1;
  %596 = cast(%595, dtype="int32") /* ty=Tensor[(14, 9, 2), int32] */;
  %597 = reshape(%596, newshape=[14, 9, 2]) /* ty=Tensor[(14, 9, 2), int32] */;
  %598 = @func_41(%597) /* ty=(Tensor[(14, 9, 2), int32], Tensor[(14, 9, 2), float32]) */;
  %599 = cast(%var_495, dtype="int32") /* ty=Tensor[(252), int32] */;
  %600 = reshape(%599, newshape=[14, 9, 2]) /* ty=Tensor[(14, 9, 2), int32] */;
  %601 = @func_41(%600) /* ty=(Tensor[(14, 9, 2), int32], Tensor[(14, 9, 2), float32]) */;
  %602 = less_equal(%583, %584) /* ty=Tensor[(12, 15, 6), bool] */;
  %603 = %591.2;
  %604 = %598.0;
  %605 = %601.1;
  (%602, %603, %var_494, %var_495, %595, %604, %605)
}

def @func_4080() -> (Tensor[(1820), bool], Tensor[(12, 2, 13), float32]) {
  %606 = cast(meta[relay.Constant][34] /* ty=Tensor[(1820), float32] */, dtype="float32") /* ty=Tensor[(1820), float32] */;
  %607 = reshape(%606, newshape=[14, 10, 13]) /* ty=Tensor[(14, 10, 13), float32] */;
  %608 = @func_2283(%607) /* ty=Tensor[(14, 10, 13), float32] */;
  %609 = cast(%608, dtype="bool") /* ty=Tensor[(14, 10, 13), bool] */;
  %610 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(1820), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %611 = cast(meta[relay.Constant][34] /* ty=Tensor[(1820), float32] */, dtype="bool") /* ty=Tensor[(1820), bool] */;
  %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?), bool] */;
  %613 = less_equal(%611, %612) /* ty=Tensor[(1820), bool] */;
  %614 = cast(%613, dtype="bool") /* ty=Tensor[(1820), bool] */;
  %615 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(1820), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %616 = cast(meta[relay.Constant][34] /* ty=Tensor[(1820), float32] */, dtype="bool") /* ty=Tensor[(1820), bool] */;
  %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?), bool] */;
  %618 = @func_3637() /* ty=Tensor[(12, 2, 13), bool] */;
  %619 = @func_3857() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) */;
  %620 = %619.0;
  %621 = cast(%620, dtype="float32") /* ty=Tensor[(12, 2, 13), float32] */;
  %622 = shape_of(%618, dtype="int32") /* ty=Tensor[(3), int32] */;
  %623 = cast(%618, dtype="float32") /* ty=Tensor[(12, 2, 13), float32] */;
  %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %625 = less(%616, %617) /* ty=Tensor[(1820), bool] */;
  %626 = divide(%623, %624) /* ty=Tensor[(12, 2, 13), float32] */;
  (%625, %626)
}

def @func_5004() -> (Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) {
  %627 = @func_3291() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %628 = @func_4587() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %629 = %627.0;
  %630 = %628.0;
  (%629, %630)
}

def @func_1450(%var_1427: Tensor[(5, 1, 16), float32], %var_1447: Tensor[(252), int32]) -> (Tensor[(5, 2, 16), float32], Tensor[(10, 13, 16), float64], Tensor[(182), float64], Tensor[(2080), float64], Tensor[(14, 9, 2), int32], Tensor[(252), int32]) {
  %631 = cast(%var_1427, dtype="float32") /* ty=Tensor[(5, 1, 16), float32] */;
  %632 = cast(meta[relay.Constant][35] /* ty=Tensor[(5, 2, 16), float32] */, dtype="float32") /* ty=Tensor[(5, 2, 16), float32] */;
  %633 = cast(meta[relay.Constant][36] /* ty=Tensor[(182), float64] */, dtype="float64") /* ty=Tensor[(182), float64] */;
  %634 = cast(meta[relay.Constant][37] /* ty=Tensor[(2080), float64] */, dtype="float64") /* ty=Tensor[(2080), float64] */;
  %635 = reshape(%633, newshape=[1, 14, 13]) /* ty=Tensor[(1, 14, 13), float64] */;
  %636 = reshape(%634, newshape=[2080]) /* ty=Tensor[(2080), float64] */;
  %637 = @func_932(%635, %636) /* ty=(Tensor[(?, 14, 13), bool], Tensor[(10, 13, 16), float64], Tensor[(2080), float64]) */;
  %638 = cast(%var_1447, dtype="int32") /* ty=Tensor[(252), int32] */;
  %639 = reshape(%638, newshape=[14, 9, 2]) /* ty=Tensor[(14, 9, 2), int32] */;
  %640 = @func_41(%639) /* ty=(Tensor[(14, 9, 2), int32], Tensor[(14, 9, 2), float32]) */;
  %641 = floor_mod(%631, %632) /* ty=Tensor[(5, 2, 16), float32] */;
  %642 = %637.1;
  %643 = %640.0;
  (%641, %642, meta[relay.Constant][36] /* ty=Tensor[(182), float64] */, meta[relay.Constant][37] /* ty=Tensor[(2080), float64] */, %643, %var_1447)
}

def @func_6526() -> (Tensor[(12, 2, 13), bool],) {
  %644 = @func_4127() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %645 = %644.0;
  (%645,)
}

def @func_3675() -> (Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int32], Tensor[(252), int32]) {
  %646 = cast(meta[relay.Constant][38] /* ty=Tensor[(252), int32] */, dtype="int32") /* ty=Tensor[(252), int32] */;
  %647 = reshape(%646, newshape=[14, 9, 2]) /* ty=Tensor[(14, 9, 2), int32] */;
  %648 = @func_41(%647) /* ty=(Tensor[(14, 9, 2), int32], Tensor[(14, 9, 2), float32]) */;
  %649 = @func_3125() /* ty=Tensor[(12, 2, 13), bool] */;
  %650 = %648.0;
  (%649, %650, meta[relay.Constant][38] /* ty=Tensor[(252), int32] */)
}

def @func_3469(%var_3438: Tensor[(182), float64]) -> (Tensor[(12, 2, 13), bool], Tensor[(182), float64], Tensor[(182), float32]) {
  %651 = @func_3278() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %652 = cast(%var_3438, dtype="float64") /* ty=Tensor[(182), float64] */;
  %653 = reshape(%652, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %654 = @func_3317(%653) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(182), float64], Tensor[(81), int8], Tensor[(182), float64], Tensor[(16, 8, 4), bool], uint32, Tensor[(512), uint32]) */;
  %655 = %654.3;
  %656 = cast(%655, dtype="float32") /* ty=Tensor[(182), float32] */;
  %657 = %651.0;
  %658 = acos(%656) /* ty=Tensor[(182), float32] */;
  (%657, %var_3438, %658)
}

def @func_6431() -> (Tensor[(13, 16, 15), bool],) {
  %659 = cast(meta[relay.Constant][40] /* ty=Tensor[(13, 16, 15), uint64] */, dtype="bool") /* ty=Tensor[(13, 16, 15), bool] */;
  %660 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(13, 16, 15), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %661 = cast(meta[relay.Constant][39] /* ty=Tensor[(13, 16, 15), uint64] */, dtype="bool") /* ty=Tensor[(13, 16, 15), bool] */;
  %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %663 = greater(%661, %662) /* ty=Tensor[(13, 16, 15), bool] */;
  (%663,)
}

def @func_4402() -> (Tensor[(14, 9, 2), int32],) {
  %664 = @func_3675() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int32], Tensor[(252), int32]) */;
  %665 = %664.1;
  (%665,)
}

def @func_7047(%var_7023: Tensor[(2080), float64], %var_7024: Tensor[(182, 1), float64], %var_7043: Tensor[(182, 14), float64]) -> (Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), float64], Tensor[(1, 2080), float64], Tensor[(2, 1056), float64], Tensor[(2080), float64], Tensor[(182, 14), float64]) {
  %666 = @func_4650() /* ty=Tensor[(12, 2, 13), bool] */;
  %667 = cast(%666, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
  %668 = cast(meta[relay.Constant][41] /* ty=Tensor[(2, 1056), float64] */, dtype="float64") /* ty=Tensor[(2, 1056), float64] */;
  %669 = cast(%var_7023, dtype="float64") /* ty=Tensor[(2080), float64] */;
  %670 = cast(%var_7024, dtype="float64") /* ty=Tensor[(182, 1), float64] */;
  %671 = reshape(%667, newshape=[12, 2, 13]) /* ty=Tensor[(12, 2, 13), bool] */;
  %672 = reshape(%668, newshape=[2112]) /* ty=Tensor[(2112), float64] */;
  %673 = reshape(%669, newshape=[1, 2080]) /* ty=Tensor[(1, 2080), float64] */;
  %674 = reshape(%670, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %675 = @func_3575(%671, %672, %673, %674) /* ty=(Tensor[(12, 2, 13), int8], Tensor[(2080), float64], Tensor[(2112), float64], Tensor[(1, 2080), float64], Tensor[(182), float64], Tensor[(182), float64]) */;
  %676 = cast(%var_7024, dtype="float64") /* ty=Tensor[(182, 1), float64] */;
  %677 = cast(%var_7043, dtype="float64") /* ty=Tensor[(182, 14), float64] */;
  %678 = @func_5210() /* ty=Tensor[(12, 2, 13), float64] */;
  %679 = %675.3;
  %680 = divide(%676, %677) /* ty=Tensor[(182, 14), float64] */;
  (%666, %678, %679, meta[relay.Constant][41] /* ty=Tensor[(2, 1056), float64] */, %var_7023, %680)
}

def @func_4667(%var_4652: Tensor[(12, 9, 9), float64]) -> (Tensor[(12, 9, 9), float64],) {
  %681 = cast(%var_4652, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
  %682 = cosh(%681) /* ty=Tensor[(12, 9, 9), float64] */;
  (%682,)
}

def @func_6036(%var_6027: Tensor[(60), float32], %var_6030: Tensor[(12, 2, 13), bool]) -> (Tensor[(252), int32], Tensor[(60), float32], Tensor[(252), int32], Tensor[(12, 2, 13), bool]) {
  %683 = cast(%var_6027, dtype="float32") /* ty=Tensor[(60), float32] */;
  %684 = cast(meta[relay.Constant][42] /* ty=Tensor[(252), int32] */, dtype="int32") /* ty=Tensor[(252), int32] */;
  %685 = reshape(%683, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %686 = reshape(%684, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %687 = @func_4462(%685, %686) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), float32], Tensor[(60), float32], Tensor[(1080), int16], Tensor[(60), float32], Tensor[(252), int32]) */;
  %688 = @func_4033() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) */;
  %689 = %688.0;
  %690 = cast(%var_6030, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
  %691 = shape_of(%689, dtype="int32") /* ty=Tensor[(3), int32] */;
  %692 = cast(%689, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
  %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %694 = %687.5;
  %695 = greater(%692, %693) /* ty=Tensor[(12, 2, 13), bool] */;
  (%694, %var_6027, meta[relay.Constant][42] /* ty=Tensor[(252), int32] */, %695)
}

def @func_6516() -> Tensor[(12, 2, 13), bool] {
  %696 = @func_3291() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %696.0
}

def @func_7624() -> (Tensor[(12, 2, 13), bool], Tensor[(6, 14, 16), float32], Tensor[(1344), float32], Tensor[(2, 16, 4), float32], Tensor[(128), float64], Tensor[(8, 78), float32]) {
  %697 = cast(meta[relay.Constant][43] /* ty=Tensor[(1344), float32] */, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %698 = reshape(%697, newshape=[6, 14, 16]) /* ty=Tensor[(6, 14, 16), float32] */;
  %699 = @func_4739(%698) /* ty=(Tensor[(6, 14, 16), float32],) */;
  %700 = cast(meta[relay.Constant][44] /* ty=Tensor[(128), float64] */, dtype="float64") /* ty=Tensor[(128), float64] */;
  %701 = reshape(%700, newshape=[2, 16, 4]) /* ty=Tensor[(2, 16, 4), float64] */;
  %702 = cast(meta[relay.Constant][45] /* ty=Tensor[(8, 78), float64] */, dtype="float64") /* ty=Tensor[(8, 78), float64] */;
  %703 = reshape(%702, newshape=[13, 8, 6]) /* ty=Tensor[(13, 8, 6), float64] */;
  %704 = @func_3612(%703) /* ty=(Tensor[(13, 8, 6), float32], Tensor[(12, 2, 13), bool]) */;
  %705 = %704.0;
  %706 = cast(%705, dtype="float32") /* ty=Tensor[(13, 8, 6), float32] */;
  %707 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(8, 78), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %708 = cast(meta[relay.Constant][45] /* ty=Tensor[(8, 78), float64] */, dtype="float32") /* ty=Tensor[(8, 78), float32] */;
  %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %710 = @func_4196() /* ty=Tensor[(12, 2, 13), bool] */;
  %711 = %699.0;
  %712 = @func_5239(%701) /* ty=Tensor[(2, 16, 4), float32] */;
  %713 = power(%708, %709) /* ty=Tensor[(8, 78), float32] */;
  (%710, %711, meta[relay.Constant][43] /* ty=Tensor[(1344), float32] */, %712, meta[relay.Constant][44] /* ty=Tensor[(128), float64] */, %713)
}

def @func_3291() -> (Tensor[(12, 2, 13), bool],) {
  %714 = @func_3278() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %715 = %714.0;
  (%715,)
}

def @func_7194() -> (Tensor[(12, 2, 13), bool],) {
  %716 = @func_6341() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %717 = %716.0;
  (%717,)
}

def @func_6806() -> (Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) {
  %718 = @func_3857() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) */;
  %719 = @func_3291() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %720 = %718.1;
  %721 = %719.0;
  (%720, %721)
}

def @func_3140(%var_3137: Tensor[(715), float32]) -> (Tensor[(12, 2, 13), bool], Tensor[(10, 13, 16), float64], Tensor[(715), float32], Tensor[(2080), float64]) {
  %722 = cast(%var_3137, dtype="float32") /* ty=Tensor[(715), float32] */;
  %723 = cast(meta[relay.Constant][46] /* ty=Tensor[(2080), float64] */, dtype="float64") /* ty=Tensor[(2080), float64] */;
  %724 = reshape(%722, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), float32] */;
  %725 = reshape(%723, newshape=[2080]) /* ty=Tensor[(2080), float64] */;
  %726 = @func_1991(%724, %725) /* ty=(Tensor[(11, 13, 5), float32], Tensor[(10, 13, 16), float64], Tensor[(2112), float64], Tensor[(2080), float64]) */;
  %727 = @func_3125() /* ty=Tensor[(12, 2, 13), bool] */;
  %728 = %726.1;
  (%727, %728, %var_3137, meta[relay.Constant][46] /* ty=Tensor[(2080), float64] */)
}

def @func_6185(%var_6173: Tensor[(12, 2, 13), bool]) -> (Tensor[(12, 2, 13), int16],) {
  %729 = @func_3125() /* ty=Tensor[(12, 2, 13), bool] */;
  %730 = cast(%var_6173, dtype="int16") /* ty=Tensor[(12, 2, 13), int16] */;
  %731 = shape_of(%729, dtype="int32") /* ty=Tensor[(3), int32] */;
  %732 = cast(%729, dtype="int16") /* ty=Tensor[(12, 2, 13), int16] */;
  %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %734 = add(%732, %733) /* ty=Tensor[(12, 2, 13), int16] */;
  (%734,)
}

def @func_6501(%var_6495: Tensor[(2, 96), float32]) -> (Tensor[(3, 15, 1), float32], Tensor[(12, 16, 1), float32], Tensor[(2, 96), float32]) {
  %735 = cast(meta[relay.Constant][47] /* ty=Tensor[(3, 15, 1), float32] */, dtype="float32") /* ty=Tensor[(3, 15, 1), float32] */;
  %736 = cast(%var_6495, dtype="float32") /* ty=Tensor[(2, 96), float32] */;
  %737 = reshape(%736, newshape=[12, 16, 1]) /* ty=Tensor[(12, 16, 1), float32] */;
  %738 = atanh(%735) /* ty=Tensor[(3, 15, 1), float32] */;
  %739 = @func_4788(%737) /* ty=Tensor[(12, 16, 1), float32] */;
  (%738, %739, %var_6495)
}

def @func_3575(%var_3543: Tensor[(12, 2, 13), bool], %var_3549: Tensor[(2112), float64], %var_3550: Tensor[(1, 2080), float64], %var_3556: Tensor[(182), float64]) -> (Tensor[(12, 2, 13), int8], Tensor[(2080), float64], Tensor[(2112), float64], Tensor[(1, 2080), float64], Tensor[(182), float64], Tensor[(182), float64]) {
  %740 = @func_3278() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %741 = %740.0;
  %742 = cast(%var_3543, dtype="int8") /* ty=Tensor[(12, 2, 13), int8] */;
  %743 = shape_of(%741, dtype="int32") /* ty=Tensor[(3), int32] */;
  %744 = cast(%741, dtype="int8") /* ty=Tensor[(12, 2, 13), int8] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %746 = cast(%var_3549, dtype="float64") /* ty=Tensor[(2112), float64] */;
  %747 = cast(%var_3550, dtype="float64") /* ty=Tensor[(1, 2080), float64] */;
  %748 = cast(%var_3549, dtype="float32") /* ty=Tensor[(2112), float32] */;
  %749 = reshape(%746, newshape=[132, 16]) /* ty=Tensor[(132, 16), float64] */;
  %750 = reshape(%747, newshape=[2080]) /* ty=Tensor[(2080), float64] */;
  %751 = reshape(%748, newshape=[132, 16]) /* ty=Tensor[(132, 16), float32] */;
  %752 = @func_3390(%749, %750, %751) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(2080), float64], Tensor[(104, 20), int32], Tensor[(132, 16), float32]) */;
  %753 = cast(%var_3556, dtype="float64") /* ty=Tensor[(182), float64] */;
  %754 = reshape(%753, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %755 = @func_3317(%754) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(182), float64], Tensor[(81), int8], Tensor[(182), float64], Tensor[(16, 8, 4), bool], uint32, Tensor[(512), uint32]) */;
  %756 = minimum(%744, %745) /* ty=Tensor[(12, 2, 13), int8] */;
  %757 = %752.1;
  %758 = %755.1;
  (%756, %757, %var_3549, %var_3550, %758, %var_3556)
}

def @func_4179(%var_4144: Tensor[(2080), float64], %var_4160: Tensor[(1820), float32]) -> (Tensor[(12, 2, 13), bool], Tensor[(10, 13, 16), float64], Tensor[(2080), float64], Tensor[(12, 2, 13), bool], Tensor[(14, 10, 13), float32], Tensor[(1820), float32], Tensor[(12, 2, 13), bool]) {
  %759 = cast(%var_4144, dtype="float64") /* ty=Tensor[(2080), float64] */;
  %760 = reshape(%759, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), float64] */;
  %761 = @func_3857() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) */;
  %762 = cast(%var_4160, dtype="float32") /* ty=Tensor[(1820), float32] */;
  %763 = reshape(%762, newshape=[14, 10, 13]) /* ty=Tensor[(14, 10, 13), float32] */;
  %764 = @func_3637() /* ty=Tensor[(12, 2, 13), bool] */;
  %765 = @func_770(%760) /* ty=Tensor[(10, 13, 16), float64] */;
  %766 = %761.0;
  %767 = @func_2283(%763) /* ty=Tensor[(14, 10, 13), float32] */;
  %768 = @func_3125() /* ty=Tensor[(12, 2, 13), bool] */;
  (%764, %765, %var_4144, %766, %767, %var_4160, %768)
}

def @func_6329(%var_6314: Tensor[(120), int16]) -> (Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), int8], Tensor[(120), int16], Tensor[(5, 6, 4), float64]) {
  %769 = @func_3857() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) */;
  %770 = %769.0;
  %771 = cast(%770, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
  %772 = reshape(%771, newshape=[12, 2, 13]) /* ty=Tensor[(12, 2, 13), bool] */;
  %773 = cast(%var_6314, dtype="int16") /* ty=Tensor[(120), int16] */;
  %774 = reshape(%773, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), int16] */;
  %775 = @func_3100(%774) /* ty=Tensor[(5, 6, 4), int16] */;
  %776 = cast(%775, dtype="float64") /* ty=Tensor[(5, 6, 4), float64] */;
  %777 = @func_3654(%772) /* ty=Tensor[(12, 2, 13), int8] */;
  %778 = asin(%776) /* ty=Tensor[(5, 6, 4), float64] */;
  (%770, %777, %var_6314, %778)
}

def @func_3889(%var_3860: Tensor[(14, 4, 13), float32], %var_3868: Tensor[(240), float64], %var_3877: Tensor[(2080), float64]) -> (Tensor[(14, 4, 13), uint64], Tensor[(8, 10, 3), bool], Tensor[(240), float64], Tensor[(2080), float64], Tensor[(2080), float64]) {
  %779 = cast(%var_3860, dtype="float32") /* ty=Tensor[(14, 4, 13), float32] */;
  %780 = acos(%779) /* ty=Tensor[(14, 4, 13), float32] */;
  %781 = cast(%780, dtype="uint64") /* ty=Tensor[(14, 4, 13), uint64] */;
  %782 = shape_of(%var_3860, dtype="int32") /* ty=Tensor[(3), int32] */;
  %783 = cast(%var_3860, dtype="uint64") /* ty=Tensor[(14, 4, 13), uint64] */;
  %784 = dyn.reshape(%781, %782, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %785 = cast(%var_3868, dtype="float64") /* ty=Tensor[(240), float64] */;
  %786 = reshape(%785, newshape=[8, 10, 3]) /* ty=Tensor[(8, 10, 3), float64] */;
  %787 = cast(%var_3877, dtype="float64") /* ty=Tensor[(2080), float64] */;
  %788 = reshape(%787, newshape=[2080]) /* ty=Tensor[(2080), float64] */;
  %789 = @func_1762(%788) /* ty=(Tensor[(2, 15, 5), float64], Tensor[(10, 13, 16), float64], Tensor[(2080), float64]) */;
  %790 = bitwise_xor(%783, %784) /* ty=Tensor[(14, 4, 13), uint64] */;
  %791 = @func_1522(%786) /* ty=Tensor[(8, 10, 3), bool] */;
  %792 = %789.2;
  (%790, %791, %var_3868, %792, %var_3877)
}

def @func_4630() -> (Tensor[(12, 2, 13), bool],) {
  %793 = @func_3291() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %794 = %793.0;
  (%794,)
}

def @func_6158(%var_6148: Tensor[(252), int32]) -> (Tensor[(12, 2, 13), float32], Tensor[(1080), int16], Tensor[(60), float32], Tensor[(252), int32]) {
  %795 = @func_4080() /* ty=(Tensor[(1820), bool], Tensor[(12, 2, 13), float32]) */;
  %796 = cast(meta[relay.Constant][48] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %797 = cast(%var_6148, dtype="int32") /* ty=Tensor[(252), int32] */;
  %798 = reshape(%796, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %799 = reshape(%797, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %800 = @func_4462(%798, %799) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), float32], Tensor[(60), float32], Tensor[(1080), int16], Tensor[(60), float32], Tensor[(252), int32]) */;
  %801 = %795.1;
  %802 = %800.3;
  (%801, %802, meta[relay.Constant][48] /* ty=Tensor[(60), float32] */, %var_6148)
}

def @func_6248(%var_6243: Tensor[(16, 4, 16), float64]) -> Tensor[(16, 4, 16), bool] {
  %803 = @func_4293() /* ty=Tensor[(16, 4, 16), float64] */;
  %804 = cast(%var_6243, dtype="bool") /* ty=Tensor[(16, 4, 16), bool] */;
  %805 = shape_of(%803, dtype="int32") /* ty=Tensor[(3), int32] */;
  %806 = cast(%803, dtype="bool") /* ty=Tensor[(16, 4, 16), bool] */;
  %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%806, %807) /* ty=Tensor[(16, 4, 16), bool] */
}

def @func_5296(%var_5277: Tensor[(2, 14, 12), float32]) -> (Tensor[(2, 14, 12), float32],) {
  %808 = cast(%var_5277, dtype="float32") /* ty=Tensor[(2, 14, 12), float32] */;
  %809 = sigmoid(%808) /* ty=Tensor[(2, 14, 12), float32] */;
  (%809,)
}

def @func_6456() -> (Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int32], Tensor[(252), int32], Tensor[(12, 2, 13), int16]) {
  %810 = @func_3637() /* ty=Tensor[(12, 2, 13), bool] */;
  %811 = cast(%810, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
  %812 = cast(meta[relay.Constant][49] /* ty=Tensor[(252), int32] */, dtype="int32") /* ty=Tensor[(252), int32] */;
  %813 = reshape(%811, newshape=[12, 2, 13]) /* ty=Tensor[(12, 2, 13), bool] */;
  %814 = reshape(%812, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %815 = @func_5782(%813, %814) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int32], Tensor[(252), int32]) */;
  %816 = cast(%810, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
  %817 = reshape(%816, newshape=[12, 2, 13]) /* ty=Tensor[(12, 2, 13), bool] */;
  %818 = @func_6185(%817) /* ty=(Tensor[(12, 2, 13), int16],) */;
  %819 = %815.1;
  %820 = %818.0;
  (%810, %819, meta[relay.Constant][49] /* ty=Tensor[(252), int32] */, %820)
}

def @func_3654(%var_3649: Tensor[(12, 2, 13), bool]) -> Tensor[(12, 2, 13), int8] {
  %821 = @func_3507() /* ty=Tensor[(12, 2, 13), bool] */;
  %822 = cast(%var_3649, dtype="int8") /* ty=Tensor[(12, 2, 13), int8] */;
  %823 = shape_of(%821, dtype="int32") /* ty=Tensor[(3), int32] */;
  %824 = cast(%821, dtype="int8") /* ty=Tensor[(12, 2, 13), int8] */;
  %825 = dyn.reshape(%822, %823, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  multiply(%824, %825) /* ty=Tensor[(12, 2, 13), int8] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_936(%var_934: Tensor[(1, 14, 13), float64], %var_935: Tensor[(2080), float64]) -> (Tensor[(?, 14, 13), bool], Tensor[(10, 13, 16), float64], Tensor[(2080), float64]) {
  @func_932(%var_934, %var_935) /* ty=(Tensor[(?, 14, 13), bool], Tensor[(10, 13, 16), float64], Tensor[(2080), float64]) */
}

def @func_2175(%var_2173: uint32, %var_2174: Tensor[(7, 3, 5), uint32]) -> (Tensor[(7, 3, 5), uint32],) {
  %3 = fn (%var_2166: uint32, %var_2167: Tensor[(7, 3, 5), uint32]) -> (Tensor[(7, 3, 5), uint32],) {
    %0 = cast(%var_2166, dtype="uint32") /* ty=uint32 */;
    %1 = cast(%var_2167, dtype="uint32") /* ty=Tensor[(7, 3, 5), uint32] */;
    %2 = bitwise_or(%0, %1) /* ty=Tensor[(7, 3, 5), uint32] */;
    (%2,)
  };
  %3(%var_2173, %var_2174) /* ty=(Tensor[(7, 3, 5), uint32],) */
}

def @func_1454(%var_1452: Tensor[(5, 1, 16), float32], %var_1453: Tensor[(252), int32]) -> (Tensor[(5, 2, 16), float32], Tensor[(10, 13, 16), float64], Tensor[(182), float64], Tensor[(2080), float64], Tensor[(14, 9, 2), int32], Tensor[(252), int32]) {
  @func_1450(%var_1452, %var_1453) /* ty=(Tensor[(5, 2, 16), float32], Tensor[(10, 13, 16), float64], Tensor[(182), float64], Tensor[(2080), float64], Tensor[(14, 9, 2), int32], Tensor[(252), int32]) */
}

def @func_6431() -> (Tensor[(13, 16, 15), bool],) {
  %4 = cast(meta[relay.Constant][1] /* ty=Tensor[(13, 16, 15), uint64] */, dtype="bool") /* ty=Tensor[(13, 16, 15), bool] */;
  %5 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(13, 16, 15), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(13, 16, 15), uint64] */, dtype="bool") /* ty=Tensor[(13, 16, 15), bool] */;
  %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %8 = greater(%6, %7) /* ty=Tensor[(13, 16, 15), bool] */;
  (%8,)
}

def @func_6501(%var_6495: Tensor[(2, 96), float32]) -> (Tensor[(3, 15, 1), float32], Tensor[(12, 16, 1), float32], Tensor[(2, 96), float32]) {
  %9 = cast(meta[relay.Constant][2] /* ty=Tensor[(3, 15, 1), float32] */, dtype="float32") /* ty=Tensor[(3, 15, 1), float32] */;
  %10 = cast(%var_6495, dtype="float32") /* ty=Tensor[(2, 96), float32] */;
  %11 = reshape(%10, newshape=[12, 16, 1]) /* ty=Tensor[(12, 16, 1), float32] */;
  %12 = atanh(%9) /* ty=Tensor[(3, 15, 1), float32] */;
  %13 = @func_4788(%11) /* ty=Tensor[(12, 16, 1), float32] */;
  (%12, %13, %var_6495)
}

def @func_5210() -> Tensor[(12, 2, 13), float64] {
  %14 = @func_4630() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %15 = %14.0;
  %16 = cast(%15, dtype="float64") /* ty=Tensor[(12, 2, 13), float64] */;
  erf(%16) /* ty=Tensor[(12, 2, 13), float64] */
}

def @func_6341() -> (Tensor[(12, 2, 13), bool],) {
  %17 = @func_4650() /* ty=Tensor[(12, 2, 13), bool] */;
  (%17,)
}

def @func_3612(%var_3593: Tensor[(13, 8, 6), float64]) -> (Tensor[(13, 8, 6), float32], Tensor[(12, 2, 13), bool]) {
  %18 = cast(%var_3593, dtype="float64") /* ty=Tensor[(13, 8, 6), float64] */;
  %19 = sinh(%18) /* ty=Tensor[(13, 8, 6), float64] */;
  %20 = cast(%19, dtype="float32") /* ty=Tensor[(13, 8, 6), float32] */;
  %21 = @func_3278() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %22 = sqrt(%20) /* ty=Tensor[(13, 8, 6), float32] */;
  %23 = %21.0;
  (%22, %23)
}

def @func_3911(%var_3901: Tensor[(6, 10, 9), int64], %var_3902: Tensor[(6, 10, 9), int64]) -> (Tensor[(6, 10, 9), bool], Tensor[(12, 2, 13), bool]) {
  %24 = cast(%var_3902, dtype="bool") /* ty=Tensor[(6, 10, 9), bool] */;
  %25 = shape_of(%var_3901, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%var_3901, dtype="bool") /* ty=Tensor[(6, 10, 9), bool] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %28 = @func_3278() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %29 = equal(%26, %27) /* ty=Tensor[(6, 10, 9), bool] */;
  %30 = %28.0;
  (%29, %30)
}

def @func_3893(%var_3890: Tensor[(14, 4, 13), float32], %var_3891: Tensor[(240), float64], %var_3892: Tensor[(2080), float64]) -> (Tensor[(14, 4, 13), uint64], Tensor[(8, 10, 3), bool], Tensor[(240), float64], Tensor[(2080), float64], Tensor[(2080), float64]) {
  %45 = fn (%var_3860: Tensor[(14, 4, 13), float32], %var_3868: Tensor[(240), float64], %var_3877: Tensor[(2080), float64]) -> (Tensor[(14, 4, 13), uint64], Tensor[(8, 10, 3), bool], Tensor[(240), float64], Tensor[(2080), float64], Tensor[(2080), float64]) {
    %31 = cast(%var_3860, dtype="float32") /* ty=Tensor[(14, 4, 13), float32] */;
    %32 = acos(%31) /* ty=Tensor[(14, 4, 13), float32] */;
    %33 = cast(%32, dtype="uint64") /* ty=Tensor[(14, 4, 13), uint64] */;
    %34 = shape_of(%var_3860, dtype="int32") /* ty=Tensor[(3), int32] */;
    %35 = cast(%var_3860, dtype="uint64") /* ty=Tensor[(14, 4, 13), uint64] */;
    %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %37 = cast(%var_3868, dtype="float64") /* ty=Tensor[(240), float64] */;
    %38 = reshape(%37, newshape=[8, 10, 3]) /* ty=Tensor[(8, 10, 3), float64] */;
    %39 = cast(%var_3877, dtype="float64") /* ty=Tensor[(2080), float64] */;
    %40 = reshape(%39, newshape=[2080]) /* ty=Tensor[(2080), float64] */;
    %41 = @func_1762(%40) /* ty=(Tensor[(2, 15, 5), float64], Tensor[(10, 13, 16), float64], Tensor[(2080), float64]) */;
    %42 = bitwise_xor(%35, %36) /* ty=Tensor[(14, 4, 13), uint64] */;
    %43 = @func_1522(%38) /* ty=Tensor[(8, 10, 3), bool] */;
    %44 = %41.2;
    (%42, %43, %var_3868, %44, %var_3877)
  };
  %45(%var_3890, %var_3891, %var_3892) /* ty=(Tensor[(14, 4, 13), uint64], Tensor[(8, 10, 3), bool], Tensor[(240), float64], Tensor[(2080), float64], Tensor[(2080), float64]) */
}

def @func_3639() -> Tensor[(12, 2, 13), bool] {
  @func_3637() /* ty=Tensor[(12, 2, 13), bool] */
}

def @func_7905() -> (Tensor[(13, 16, 15), bool], Tensor[(12, 2, 13), int64], Tensor[(6, 52), bool], Tensor[(12, 2, 13), bool]) {
  @func_7903() /* ty=(Tensor[(13, 16, 15), bool], Tensor[(12, 2, 13), int64], Tensor[(6, 52), bool], Tensor[(12, 2, 13), bool]) */
}

def @func_1994(%var_1992: Tensor[(11, 13, 5), float32], %var_1993: Tensor[(2080), float64]) -> (Tensor[(11, 13, 5), float32], Tensor[(10, 13, 16), float64], Tensor[(2112), float64], Tensor[(2080), float64]) {
  %54 = fn (%var_1951: Tensor[(11, 13, 5), float32], %var_1984: Tensor[(2080), float64]) -> (Tensor[(11, 13, 5), float32], Tensor[(10, 13, 16), float64], Tensor[(2112), float64], Tensor[(2080), float64]) {
    %46 = cast(%var_1951, dtype="float32") /* ty=Tensor[(11, 13, 5), float32] */;
    %47 = cast(meta[relay.Constant][3] /* ty=Tensor[(2112), float64] */, dtype="float64") /* ty=Tensor[(2112), float64] */;
    %48 = cast(%var_1984, dtype="float64") /* ty=Tensor[(2080), float64] */;
    %49 = reshape(%47, newshape=[12, 11, 16]) /* ty=Tensor[(12, 11, 16), float64] */;
    %50 = reshape(%48, newshape=[104, 20]) /* ty=Tensor[(104, 20), float64] */;
    %51 = @func_1197(%49, %50) /* ty=(Tensor[(10, 13, 16), float64], Tensor[(104, 20), float64], Tensor[(12, 11, 16), float32]) */;
    %52 = sinh(%46) /* ty=Tensor[(11, 13, 5), float32] */;
    %53 = %51.0;
    (%52, %53, meta[relay.Constant][3] /* ty=Tensor[(2112), float64] */, %var_1984)
  };
  %54(%var_1992, %var_1993) /* ty=(Tensor[(11, 13, 5), float32], Tensor[(10, 13, 16), float64], Tensor[(2112), float64], Tensor[(2080), float64]) */
}

def @func_8126() -> (Tensor[(12, 2, 13), bool],) {
  %55 = @func_4127() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %56 = %55.0;
  (%56,)
}

def @func_8201() -> (Tensor[(12, 2, 13), float32], Tensor[(12, 2, 13), bool]) {
  %57 = @func_4270() /* ty=(Tensor[(12, 2, 13), float32],) */;
  %58 = %57.0;
  %59 = @func_3507() /* ty=Tensor[(12, 2, 13), bool] */;
  (%58, %59)
}

def @func_4011() -> (Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), float32]) {
  %65 = fn () -> (Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), float32]) {
    %60 = @func_3278() /* ty=(Tensor[(12, 2, 13), bool],) */;
    %61 = %60.0;
    %62 = cast(%61, dtype="float32") /* ty=Tensor[(12, 2, 13), float32] */;
    %63 = @func_3965() /* ty=Tensor[(12, 2, 13), bool] */;
    %64 = log(%62) /* ty=Tensor[(12, 2, 13), float32] */;
    (%63, %64)
  };
  %65() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), float32]) */
}

def @func_4631() -> (Tensor[(12, 2, 13), bool],) {
  %68 = fn () -> (Tensor[(12, 2, 13), bool],) {
    %66 = @func_3291() /* ty=(Tensor[(12, 2, 13), bool],) */;
    %67 = %66.0;
    (%67,)
  };
  %68() /* ty=(Tensor[(12, 2, 13), bool],) */
}

def @func_3125() -> Tensor[(12, 2, 13), bool] {
  %69 = cast(meta[relay.Constant][5] /* ty=Tensor[(12, 2, 13), int64] */, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
  %70 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(12, 2, 13), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %71 = cast(meta[relay.Constant][4] /* ty=Tensor[(12, 2, 13), int64] */, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
  %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%71, %72) /* ty=Tensor[(12, 2, 13), bool] */
}

def @func_5373(%var_5369: Tensor[(5, 9, 5), int8], %var_5370: Tensor[(5, 9, 5), int8], %var_5371: Tensor[(182), float64], %var_5372: Tensor[(2080), float64]) -> (Tensor[(?, 14, 13), bool], Tensor[(182), float64], Tensor[(2080), float64], Tensor[(12, 2, 13), bool], Tensor[(5, 9, 5), float64], Tensor[(12, 2, 13), bool]) {
  %95 = fn (%var_5303: Tensor[(5, 9, 5), int8], %var_5304: Tensor[(5, 9, 5), int8], %var_5327: Tensor[(182), float64], %var_5328: Tensor[(2080), float64]) -> (Tensor[(?, 14, 13), bool], Tensor[(182), float64], Tensor[(2080), float64], Tensor[(12, 2, 13), bool], Tensor[(5, 9, 5), float64], Tensor[(12, 2, 13), bool]) {
    %73 = cast(%var_5327, dtype="float64") /* ty=Tensor[(182), float64] */;
    %74 = cast(%var_5328, dtype="float64") /* ty=Tensor[(2080), float64] */;
    %75 = reshape(%73, newshape=[1, 14, 13]) /* ty=Tensor[(1, 14, 13), float64] */;
    %76 = reshape(%74, newshape=[2080]) /* ty=Tensor[(2080), float64] */;
    %77 = @func_932(%75, %76) /* ty=(Tensor[(?, 14, 13), bool], Tensor[(10, 13, 16), float64], Tensor[(2080), float64]) */;
    %78 = @func_5004() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) */;
    %79 = cast(%var_5304, dtype="bool") /* ty=Tensor[(5, 9, 5), bool] */;
    %80 = shape_of(%var_5303, dtype="int32") /* ty=Tensor[(3), int32] */;
    %81 = cast(%var_5303, dtype="bool") /* ty=Tensor[(5, 9, 5), bool] */;
    %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %83 = equal(%81, %82) /* ty=Tensor[(5, 9, 5), bool] */;
    %84 = cast(%83, dtype="float64") /* ty=Tensor[(5, 9, 5), float64] */;
    %85 = cos(%84) /* ty=Tensor[(5, 9, 5), float64] */;
    %86 = cast(meta[relay.Constant][6] /* ty=Tensor[(5, 9, 5), float64] */, dtype="float64") /* ty=Tensor[(5, 9, 5), float64] */;
    %87 = shape_of(%85, dtype="int32") /* ty=Tensor[(3), int32] */;
    %88 = cast(%85, dtype="float64") /* ty=Tensor[(5, 9, 5), float64] */;
    %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %90 = @func_3857() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) */;
    %91 = %77.0;
    %92 = %78.1;
    %93 = divide(%88, %89) /* ty=Tensor[(5, 9, 5), float64] */;
    %94 = %90.0;
    (%91, %var_5327, %var_5328, %92, %93, %94)
  };
  %95(%var_5369, %var_5370, %var_5371, %var_5372) /* ty=(Tensor[(?, 14, 13), bool], Tensor[(182), float64], Tensor[(2080), float64], Tensor[(12, 2, 13), bool], Tensor[(5, 9, 5), float64], Tensor[(12, 2, 13), bool]) */
}

def @func_7625() -> (Tensor[(12, 2, 13), bool], Tensor[(6, 14, 16), float32], Tensor[(1344), float32], Tensor[(2, 16, 4), float32], Tensor[(128), float64], Tensor[(8, 78), float32]) {
  %113 = fn () -> (Tensor[(12, 2, 13), bool], Tensor[(6, 14, 16), float32], Tensor[(1344), float32], Tensor[(2, 16, 4), float32], Tensor[(128), float64], Tensor[(8, 78), float32]) {
    %96 = cast(meta[relay.Constant][7] /* ty=Tensor[(1344), float32] */, dtype="float32") /* ty=Tensor[(1344), float32] */;
    %97 = reshape(%96, newshape=[6, 14, 16]) /* ty=Tensor[(6, 14, 16), float32] */;
    %98 = @func_4739(%97) /* ty=(Tensor[(6, 14, 16), float32],) */;
    %99 = cast(meta[relay.Constant][8] /* ty=Tensor[(128), float64] */, dtype="float64") /* ty=Tensor[(128), float64] */;
    %100 = reshape(%99, newshape=[2, 16, 4]) /* ty=Tensor[(2, 16, 4), float64] */;
    %101 = cast(meta[relay.Constant][9] /* ty=Tensor[(8, 78), float64] */, dtype="float64") /* ty=Tensor[(8, 78), float64] */;
    %102 = reshape(%101, newshape=[13, 8, 6]) /* ty=Tensor[(13, 8, 6), float64] */;
    %103 = @func_3612(%102) /* ty=(Tensor[(13, 8, 6), float32], Tensor[(12, 2, 13), bool]) */;
    %104 = %103.0;
    %105 = cast(%104, dtype="float32") /* ty=Tensor[(13, 8, 6), float32] */;
    %106 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(8, 78), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %107 = cast(meta[relay.Constant][9] /* ty=Tensor[(8, 78), float64] */, dtype="float32") /* ty=Tensor[(8, 78), float32] */;
    %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %109 = @func_4196() /* ty=Tensor[(12, 2, 13), bool] */;
    %110 = %98.0;
    %111 = @func_5239(%100) /* ty=Tensor[(2, 16, 4), float32] */;
    %112 = power(%107, %108) /* ty=Tensor[(8, 78), float32] */;
    (%109, %110, meta[relay.Constant][7] /* ty=Tensor[(1344), float32] */, %111, meta[relay.Constant][8] /* ty=Tensor[(128), float64] */, %112)
  };
  %113() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(6, 14, 16), float32], Tensor[(1344), float32], Tensor[(2, 16, 4), float32], Tensor[(128), float64], Tensor[(8, 78), float32]) */
}

def @func_5861() -> (Tensor[(14, 9, 2), int32],) {
  %114 = @func_3675() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int32], Tensor[(252), int32]) */;
  %115 = %114.1;
  (%115,)
}

def @func_7506(%var_7503: Tensor[(6, 3, 1), float32], %var_7504: uint32, %var_7505: Tensor[(512), uint32]) -> (Tensor[(6, 3, ?), uint16], Tensor[(16, 8, 4), bool], Tensor[(512), uint32], Tensor[(6, 3, 1), float64], Tensor[(12, 2, 13), bool], Tensor[(6, 3, 1), bool], Tensor[(16, 8, 4), bool]) {
  %141 = fn (%var_7452: Tensor[(6, 3, 1), float32], %var_7470: uint32, %var_7471: Tensor[(512), uint32]) -> (Tensor[(6, 3, ?), uint16], Tensor[(16, 8, 4), bool], Tensor[(512), uint32], Tensor[(6, 3, 1), float64], Tensor[(12, 2, 13), bool], Tensor[(6, 3, 1), bool], Tensor[(16, 8, 4), bool]) {
    %116 = cast(%var_7452, dtype="float32") /* ty=Tensor[(6, 3, 1), float32] */;
    %117 = atanh(%116) /* ty=Tensor[(6, 3, 1), float32] */;
    %118 = cast(%117, dtype="uint16") /* ty=Tensor[(6, 3, 1), uint16] */;
    %119 = shape_of(%var_7452, dtype="int32") /* ty=Tensor[(3), int32] */;
    %120 = cast(%var_7452, dtype="uint16") /* ty=Tensor[(6, 3, 1), uint16] */;
    %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %122 = cast(%var_7470, dtype="uint32") /* ty=uint32 */;
    %123 = cast(%var_7471, dtype="uint32") /* ty=Tensor[(512), uint32] */;
    %124 = reshape(%122, newshape=[]) /* ty=uint32 */;
    %125 = reshape(%123, newshape=[16, 8, 4]) /* ty=Tensor[(16, 8, 4), uint32] */;
    %126 = @func_2598(%124, %125) /* ty=(Tensor[(16, 8, 4), bool],) */;
    %127 = cast(%117, dtype="float64") /* ty=Tensor[(6, 3, 1), float64] */;
    %128 = cast(%var_7470, dtype="bool") /* ty=bool */;
    %129 = cast(%117, dtype="bool") /* ty=Tensor[(6, 3, 1), bool] */;
    %130 = cast(%var_7470, dtype="uint32") /* ty=uint32 */;
    %131 = %126.0;
    %132 = cast(%131, dtype="uint32") /* ty=Tensor[(16, 8, 4), uint32] */;
    %133 = reshape(%130, newshape=[]) /* ty=uint32 */;
    %134 = reshape(%132, newshape=[16, 8, 4]) /* ty=Tensor[(16, 8, 4), uint32] */;
    %135 = @func_2598(%133, %134) /* ty=(Tensor[(16, 8, 4), bool],) */;
    %136 = left_shift(%120, %121) /* ty=Tensor[(6, 3, ?), uint16] */;
    %137 = acos(%127) /* ty=Tensor[(6, 3, 1), float64] */;
    %138 = @func_6548() /* ty=Tensor[(12, 2, 13), bool] */;
    %139 = less_equal(%128, %129) /* ty=Tensor[(6, 3, 1), bool] */;
    %140 = %135.0;
    (%136, %131, %var_7471, %137, %138, %139, %140)
  };
  %141(%var_7503, %var_7504, %var_7505) /* ty=(Tensor[(6, 3, ?), uint16], Tensor[(16, 8, 4), bool], Tensor[(512), uint32], Tensor[(6, 3, 1), float64], Tensor[(12, 2, 13), bool], Tensor[(6, 3, 1), bool], Tensor[(16, 8, 4), bool]) */
}

def @func_5417(%var_5415: Tensor[(182), float64], %var_5416: Tensor[(182), float64]) -> (Tensor[(252), int32], Tensor[(182), int16], Tensor[(1, 312), float32], Tensor[(182), bool]) {
  %159 = fn (%var_5400: Tensor[(182), float64], %var_5408: Tensor[(182), float64]) -> (Tensor[(252), int32], Tensor[(182), int16], Tensor[(1, 312), float32], Tensor[(182), bool]) {
    %142 = @func_3675() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int32], Tensor[(252), int32]) */;
    %143 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 312), float32] */, dtype="float32") /* ty=Tensor[(1, 312), float32] */;
    %144 = cast(%var_5400, dtype="float64") /* ty=Tensor[(182), float64] */;
    %145 = cast(%var_5400, dtype="float64") /* ty=Tensor[(182), float64] */;
    %146 = %142.2;
    %147 = cast(%146, dtype="int32") /* ty=Tensor[(252), int32] */;
    %148 = reshape(%143, newshape=[12, 2, 13]) /* ty=Tensor[(12, 2, 13), float32] */;
    %149 = reshape(%144, newshape=[182]) /* ty=Tensor[(182), float64] */;
    %150 = reshape(%145, newshape=[182]) /* ty=Tensor[(182), float64] */;
    %151 = reshape(%147, newshape=[252]) /* ty=Tensor[(252), int32] */;
    %152 = @func_3796(%148, %149, %150, %151) /* ty=(Tensor[(12, 2, 13), float32], Tensor[(12, 2, 13), float64], Tensor[(16, 8, 4), bool], Tensor[(182), int16], Tensor[(14, 9, 2), float32], Tensor[(252), int32], Tensor[(12, 2, 13), float32]) */;
    %153 = cast(%var_5408, dtype="bool") /* ty=Tensor[(182), bool] */;
    %154 = shape_of(%var_5400, dtype="int32") /* ty=Tensor[(1), int32] */;
    %155 = cast(%var_5400, dtype="bool") /* ty=Tensor[(182), bool] */;
    %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?), bool] */;
    %157 = %152.3;
    %158 = logical_or(%155, %156) /* ty=Tensor[(182), bool] */;
    (%146, %157, meta[relay.Constant][10] /* ty=Tensor[(1, 312), float32] */, %158)
  };
  %159(%var_5415, %var_5416) /* ty=(Tensor[(252), int32], Tensor[(182), int16], Tensor[(1, 312), float32], Tensor[(182), bool]) */
}

def @func_6161(%var_6159: Tensor[(252), int32]) -> (Tensor[(12, 2, 13), float32], Tensor[(1080), int16], Tensor[(60), float32], Tensor[(252), int32]) {
  @func_6158(%var_6159) /* ty=(Tensor[(12, 2, 13), float32], Tensor[(1080), int16], Tensor[(60), float32], Tensor[(252), int32]) */
}

def @func_3102(%var_3101: Tensor[(5, 6, 4), int16]) -> Tensor[(5, 6, 4), int16] {
  %164 = fn (%var_3085: Tensor[(5, 6, 4), int16]) -> Tensor[(5, 6, 4), int16] {
    %160 = cast(%var_3085, dtype="int16") /* ty=Tensor[(5, 6, 4), int16] */;
    %161 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(5, 6, 4), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %162 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 6, 4), int16] */, dtype="int16") /* ty=Tensor[(5, 6, 4), int16] */;
    %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    bitwise_and(%162, %163) /* ty=Tensor[(5, 6, 4), int16] */
  };
  %164(%var_3101) /* ty=Tensor[(5, 6, 4), int16] */
}

def @func_6251(%var_6249: Tensor[(16, 4, 16), float64]) -> Tensor[(16, 4, 16), bool] {
  @func_6248(%var_6249) /* ty=Tensor[(16, 4, 16), bool] */
}

def @func_932(%var_912: Tensor[(1, 14, 13), float64], %var_929: Tensor[(2080), float64]) -> (Tensor[(?, 14, 13), bool], Tensor[(10, 13, 16), float64], Tensor[(2080), float64]) {
  %165 = cast(%var_912, dtype="float64") /* ty=Tensor[(1, 14, 13), float64] */;
  %166 = cosh(%165) /* ty=Tensor[(1, 14, 13), float64] */;
  %167 = cast(%var_912, dtype="bool") /* ty=Tensor[(1, 14, 13), bool] */;
  %168 = shape_of(%166, dtype="int32") /* ty=Tensor[(3), int32] */;
  %169 = cast(%166, dtype="bool") /* ty=Tensor[(1, 14, 13), bool] */;
  %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %171 = cast(%var_929, dtype="float64") /* ty=Tensor[(2080), float64] */;
  %172 = reshape(%171, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), float64] */;
  %173 = equal(%169, %170) /* ty=Tensor[(?, 14, 13), bool] */;
  %174 = @func_770(%172) /* ty=Tensor[(10, 13, 16), float64] */;
  (%173, %174, %var_929)
}

def @func_6456() -> (Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int32], Tensor[(252), int32], Tensor[(12, 2, 13), int16]) {
  %175 = @func_3637() /* ty=Tensor[(12, 2, 13), bool] */;
  %176 = cast(%175, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
  %177 = cast(meta[relay.Constant][12] /* ty=Tensor[(252), int32] */, dtype="int32") /* ty=Tensor[(252), int32] */;
  %178 = reshape(%176, newshape=[12, 2, 13]) /* ty=Tensor[(12, 2, 13), bool] */;
  %179 = reshape(%177, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %180 = @func_5782(%178, %179) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int32], Tensor[(252), int32]) */;
  %181 = cast(%175, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
  %182 = reshape(%181, newshape=[12, 2, 13]) /* ty=Tensor[(12, 2, 13), bool] */;
  %183 = @func_6185(%182) /* ty=(Tensor[(12, 2, 13), int16],) */;
  %184 = %180.1;
  %185 = %183.0;
  (%175, %184, meta[relay.Constant][12] /* ty=Tensor[(252), int32] */, %185)
}

def @func_532(%var_528: Tensor[(12, 15, 6), int16], %var_529: Tensor[(12, 15, 6), int16], %var_530: Tensor[(60), float32], %var_531: Tensor[(252), int32]) -> (Tensor[(12, 15, 6), bool], Tensor[(2, 15, 2), bool], Tensor[(60), float32], Tensor[(252), int32], Tensor[(14, 9, 2), float32], Tensor[(14, 9, 2), int32], Tensor[(14, 9, 2), float32]) {
  %211 = fn (%var_484: Tensor[(12, 15, 6), int16], %var_485: Tensor[(12, 15, 6), int16], %var_494: Tensor[(60), float32], %var_495: Tensor[(252), int32]) -> (Tensor[(12, 15, 6), bool], Tensor[(2, 15, 2), bool], Tensor[(60), float32], Tensor[(252), int32], Tensor[(14, 9, 2), float32], Tensor[(14, 9, 2), int32], Tensor[(14, 9, 2), float32]) {
    %186 = cast(%var_485, dtype="bool") /* ty=Tensor[(12, 15, 6), bool] */;
    %187 = shape_of(%var_484, dtype="int32") /* ty=Tensor[(3), int32] */;
    %188 = cast(%var_484, dtype="bool") /* ty=Tensor[(12, 15, 6), bool] */;
    %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %190 = cast(%var_494, dtype="float32") /* ty=Tensor[(60), float32] */;
    %191 = cast(%var_495, dtype="int32") /* ty=Tensor[(252), int32] */;
    %192 = cast(%var_494, dtype="bool") /* ty=Tensor[(60), bool] */;
    %193 = reshape(%190, newshape=[2, 15, 2]) /* ty=Tensor[(2, 15, 2), float32] */;
    %194 = reshape(%191, newshape=[1, 252]) /* ty=Tensor[(1, 252), int32] */;
    %195 = reshape(%192, newshape=[2, 15, 2]) /* ty=Tensor[(2, 15, 2), bool] */;
    %196 = @func_177(%193, %194, %195) /* ty=(Tensor[(14, 9, 2), float32], Tensor[(1, 252), int32], Tensor[(2, 15, 2), bool]) */;
    %197 = cast(%var_495, dtype="int32") /* ty=Tensor[(252), int32] */;
    %198 = reshape(%197, newshape=[14, 9, 2]) /* ty=Tensor[(14, 9, 2), int32] */;
    %199 = @func_41(%198) /* ty=(Tensor[(14, 9, 2), int32], Tensor[(14, 9, 2), float32]) */;
    %200 = %199.1;
    %201 = cast(%200, dtype="int32") /* ty=Tensor[(14, 9, 2), int32] */;
    %202 = reshape(%201, newshape=[14, 9, 2]) /* ty=Tensor[(14, 9, 2), int32] */;
    %203 = @func_41(%202) /* ty=(Tensor[(14, 9, 2), int32], Tensor[(14, 9, 2), float32]) */;
    %204 = cast(%var_495, dtype="int32") /* ty=Tensor[(252), int32] */;
    %205 = reshape(%204, newshape=[14, 9, 2]) /* ty=Tensor[(14, 9, 2), int32] */;
    %206 = @func_41(%205) /* ty=(Tensor[(14, 9, 2), int32], Tensor[(14, 9, 2), float32]) */;
    %207 = less_equal(%188, %189) /* ty=Tensor[(12, 15, 6), bool] */;
    %208 = %196.2;
    %209 = %203.0;
    %210 = %206.1;
    (%207, %208, %var_494, %var_495, %200, %209, %210)
  };
  %211(%var_528, %var_529, %var_530, %var_531) /* ty=(Tensor[(12, 15, 6), bool], Tensor[(2, 15, 2), bool], Tensor[(60), float32], Tensor[(252), int32], Tensor[(14, 9, 2), float32], Tensor[(14, 9, 2), int32], Tensor[(14, 9, 2), float32]) */
}

def @func_4462(%var_4450: Tensor[(60), float32], %var_4451: Tensor[(252), int32]) -> (Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), float32], Tensor[(60), float32], Tensor[(1080), int16], Tensor[(60), float32], Tensor[(252), int32]) {
  %212 = @func_3278() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %213 = @func_4010() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), float32]) */;
  %214 = cast(meta[relay.Constant][13] /* ty=Tensor[(1080), int16] */, dtype="int16") /* ty=Tensor[(1080), int16] */;
  %215 = cast(meta[relay.Constant][13] /* ty=Tensor[(1080), int16] */, dtype="int16") /* ty=Tensor[(1080), int16] */;
  %216 = cast(%var_4450, dtype="float32") /* ty=Tensor[(60), float32] */;
  %217 = cast(%var_4451, dtype="int32") /* ty=Tensor[(252), int32] */;
  %218 = reshape(%214, newshape=[12, 15, 6]) /* ty=Tensor[(12, 15, 6), int16] */;
  %219 = reshape(%215, newshape=[12, 15, 6]) /* ty=Tensor[(12, 15, 6), int16] */;
  %220 = reshape(%216, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %221 = reshape(%217, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %222 = @func_527(%218, %219, %220, %221) /* ty=(Tensor[(12, 15, 6), bool], Tensor[(2, 15, 2), bool], Tensor[(60), float32], Tensor[(252), int32], Tensor[(14, 9, 2), float32], Tensor[(14, 9, 2), int32], Tensor[(14, 9, 2), float32]) */;
  %223 = %212.0;
  %224 = %213.1;
  %225 = %222.2;
  (%223, %224, %225, meta[relay.Constant][13] /* ty=Tensor[(1080), int16] */, %var_4450, %var_4451)
}

def @func_3292() -> (Tensor[(12, 2, 13), bool],) {
  %228 = fn () -> (Tensor[(12, 2, 13), bool],) {
    %226 = @func_3278() /* ty=(Tensor[(12, 2, 13), bool],) */;
    %227 = %226.0;
    (%227,)
  };
  %228() /* ty=(Tensor[(12, 2, 13), bool],) */
}

def @func_6548() -> Tensor[(12, 2, 13), bool] {
  %229 = @func_4127() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %229.0
}

def @func_6232() -> (Tensor[(12, 2, 13), float32],) {
  @func_6230() /* ty=(Tensor[(12, 2, 13), float32],) */
}

def @func_7047(%var_7023: Tensor[(2080), float64], %var_7024: Tensor[(182, 1), float64], %var_7043: Tensor[(182, 14), float64]) -> (Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), float64], Tensor[(1, 2080), float64], Tensor[(2, 1056), float64], Tensor[(2080), float64], Tensor[(182, 14), float64]) {
  %230 = @func_4650() /* ty=Tensor[(12, 2, 13), bool] */;
  %231 = cast(%230, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
  %232 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 1056), float64] */, dtype="float64") /* ty=Tensor[(2, 1056), float64] */;
  %233 = cast(%var_7023, dtype="float64") /* ty=Tensor[(2080), float64] */;
  %234 = cast(%var_7024, dtype="float64") /* ty=Tensor[(182, 1), float64] */;
  %235 = reshape(%231, newshape=[12, 2, 13]) /* ty=Tensor[(12, 2, 13), bool] */;
  %236 = reshape(%232, newshape=[2112]) /* ty=Tensor[(2112), float64] */;
  %237 = reshape(%233, newshape=[1, 2080]) /* ty=Tensor[(1, 2080), float64] */;
  %238 = reshape(%234, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %239 = @func_3575(%235, %236, %237, %238) /* ty=(Tensor[(12, 2, 13), int8], Tensor[(2080), float64], Tensor[(2112), float64], Tensor[(1, 2080), float64], Tensor[(182), float64], Tensor[(182), float64]) */;
  %240 = cast(%var_7024, dtype="float64") /* ty=Tensor[(182, 1), float64] */;
  %241 = cast(%var_7043, dtype="float64") /* ty=Tensor[(182, 14), float64] */;
  %242 = @func_5210() /* ty=Tensor[(12, 2, 13), float64] */;
  %243 = %239.3;
  %244 = divide(%240, %241) /* ty=Tensor[(182, 14), float64] */;
  (%230, %242, %243, meta[relay.Constant][14] /* ty=Tensor[(2, 1056), float64] */, %var_7023, %244)
}

def @func_6158(%var_6148: Tensor[(252), int32]) -> (Tensor[(12, 2, 13), float32], Tensor[(1080), int16], Tensor[(60), float32], Tensor[(252), int32]) {
  %245 = @func_4080() /* ty=(Tensor[(1820), bool], Tensor[(12, 2, 13), float32]) */;
  %246 = cast(meta[relay.Constant][15] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %247 = cast(%var_6148, dtype="int32") /* ty=Tensor[(252), int32] */;
  %248 = reshape(%246, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %249 = reshape(%247, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %250 = @func_4462(%248, %249) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), float32], Tensor[(60), float32], Tensor[(1080), int16], Tensor[(60), float32], Tensor[(252), int32]) */;
  %251 = %245.1;
  %252 = %250.3;
  (%251, %252, meta[relay.Constant][15] /* ty=Tensor[(60), float32] */, %var_6148)
}

def @func_4403() -> (Tensor[(14, 9, 2), int32],) {
  %255 = fn () -> (Tensor[(14, 9, 2), int32],) {
    %253 = @func_3675() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int32], Tensor[(252), int32]) */;
    %254 = %253.1;
    (%254,)
  };
  %255() /* ty=(Tensor[(14, 9, 2), int32],) */
}

def @func_8252(%var_8250: Tensor[(2112), float64], %var_8251: Tensor[(1, 2080), float64]) -> (Tensor[(12, 2, 13), int16], Tensor[(2112), float64], Tensor[(?, 2080), uint64]) {
  %269 = fn (%var_8223: Tensor[(2112), float64], %var_8224: Tensor[(1, 2080), float64]) -> (Tensor[(12, 2, 13), int16], Tensor[(2112), float64], Tensor[(?, 2080), uint64]) {
    %256 = @func_6913() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int32], Tensor[(12, 2, 13), int16], Tensor[(12, 2, 13), bool], Tensor[(1, 60), float32]) */;
    %257 = cast(%var_8223, dtype="float64") /* ty=Tensor[(2112), float64] */;
    %258 = cast(%var_8224, dtype="float64") /* ty=Tensor[(1, 2080), float64] */;
    %259 = reshape(%257, newshape=[12, 11, 16]) /* ty=Tensor[(12, 11, 16), float64] */;
    %260 = reshape(%258, newshape=[104, 20]) /* ty=Tensor[(104, 20), float64] */;
    %261 = @func_1197(%259, %260) /* ty=(Tensor[(10, 13, 16), float64], Tensor[(104, 20), float64], Tensor[(12, 11, 16), float32]) */;
    %262 = %261.1;
    %263 = cast(%262, dtype="uint64") /* ty=Tensor[(104, 20), uint64] */;
    %264 = shape_of(%var_8224, dtype="int32") /* ty=Tensor[(2), int32] */;
    %265 = cast(%var_8224, dtype="uint64") /* ty=Tensor[(1, 2080), uint64] */;
    %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %267 = %256.2;
    %268 = left_shift(%265, %266) /* ty=Tensor[(?, 2080), uint64] */;
    (%267, %var_8223, %268)
  };
  %269(%var_8250, %var_8251) /* ty=(Tensor[(12, 2, 13), int16], Tensor[(2112), float64], Tensor[(?, 2080), uint64]) */
}

def @func_5559(%var_5527: Tensor[(12, 7, 2), float32], %var_5528: Tensor[(12, 7, 2), float32]) -> Tensor[(12, 7, 2), float32] {
  %270 = cast(%var_5528, dtype="float32") /* ty=Tensor[(12, 7, 2), float32] */;
  %271 = shape_of(%var_5527, dtype="int32") /* ty=Tensor[(3), int32] */;
  %272 = cast(%var_5527, dtype="float32") /* ty=Tensor[(12, 7, 2), float32] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%272, %273) /* ty=Tensor[(12, 7, 2), float32] */
}

def @func_4466(%var_4464: Tensor[(60), float32], %var_4465: Tensor[(252), int32]) -> (Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), float32], Tensor[(60), float32], Tensor[(1080), int16], Tensor[(60), float32], Tensor[(252), int32]) {
  @func_4462(%var_4464, %var_4465) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), float32], Tensor[(60), float32], Tensor[(1080), int16], Tensor[(60), float32], Tensor[(252), int32]) */
}

def @func_4270() -> (Tensor[(12, 2, 13), float32],) {
  %274 = @func_4010() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), float32]) */;
  %275 = %274.1;
  (%275,)
}

def @func_4667(%var_4652: Tensor[(12, 9, 9), float64]) -> (Tensor[(12, 9, 9), float64],) {
  %276 = cast(%var_4652, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
  %277 = cosh(%276) /* ty=Tensor[(12, 9, 9), float64] */;
  (%277,)
}

def @func_7560(%var_7558: Tensor[(13, 55), float32], %var_7559: Tensor[(2080), float64]) -> (Tensor[(11, 10, 14), int8], Tensor[(140), int8], Tensor[(2080), float64], Tensor[(13, 55), float32], Tensor[(2080), float64], Tensor[(14, 10, 13), float32], Tensor[(104, 20), float64], Tensor[(2112), float64], Tensor[(1820), float64]) {
  %301 = fn (%var_7525: Tensor[(13, 55), float32], %var_7526: Tensor[(2080), float64]) -> (Tensor[(11, 10, 14), int8], Tensor[(140), int8], Tensor[(2080), float64], Tensor[(13, 55), float32], Tensor[(2080), float64], Tensor[(14, 10, 13), float32], Tensor[(104, 20), float64], Tensor[(2112), float64], Tensor[(1820), float64]) {
    %278 = cast(meta[relay.Constant][16] /* ty=Tensor[(140), int8] */, dtype="int8") /* ty=Tensor[(140), int8] */;
    %279 = reshape(%278, newshape=[1, 10, 14]) /* ty=Tensor[(1, 10, 14), int8] */;
    %280 = @func_5990(%279) /* ty=(Tensor[(11, 10, 14), int8],) */;
    %281 = cast(%var_7525, dtype="float32") /* ty=Tensor[(13, 55), float32] */;
    %282 = cast(%var_7526, dtype="float64") /* ty=Tensor[(2080), float64] */;
    %283 = reshape(%281, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), float32] */;
    %284 = reshape(%282, newshape=[2080]) /* ty=Tensor[(2080), float64] */;
    %285 = @func_1991(%283, %284) /* ty=(Tensor[(11, 13, 5), float32], Tensor[(10, 13, 16), float64], Tensor[(2112), float64], Tensor[(2080), float64]) */;
    %286 = @func_4080() /* ty=(Tensor[(1820), bool], Tensor[(12, 2, 13), float32]) */;
    %287 = %286.0;
    %288 = cast(%287, dtype="float32") /* ty=Tensor[(1820), float32] */;
    %289 = reshape(%288, newshape=[14, 10, 13]) /* ty=Tensor[(14, 10, 13), float32] */;
    %290 = cast(meta[relay.Constant][17] /* ty=Tensor[(2112), float64] */, dtype="float64") /* ty=Tensor[(2112), float64] */;
    %291 = cast(%var_7526, dtype="float64") /* ty=Tensor[(2080), float64] */;
    %292 = reshape(%290, newshape=[12, 11, 16]) /* ty=Tensor[(12, 11, 16), float64] */;
    %293 = reshape(%291, newshape=[104, 20]) /* ty=Tensor[(104, 20), float64] */;
    %294 = @func_1197(%292, %293) /* ty=(Tensor[(10, 13, 16), float64], Tensor[(104, 20), float64], Tensor[(12, 11, 16), float32]) */;
    %295 = cast(%287, dtype="float64") /* ty=Tensor[(1820), float64] */;
    %296 = %280.0;
    %297 = %285.3;
    %298 = @func_2283(%289) /* ty=Tensor[(14, 10, 13), float32] */;
    %299 = %294.1;
    %300 = cos(%295) /* ty=Tensor[(1820), float64] */;
    (%296, meta[relay.Constant][16] /* ty=Tensor[(140), int8] */, %297, %var_7525, %var_7526, %298, %299, meta[relay.Constant][17] /* ty=Tensor[(2112), float64] */, %300)
  };
  %301(%var_7558, %var_7559) /* ty=(Tensor[(11, 10, 14), int8], Tensor[(140), int8], Tensor[(2080), float64], Tensor[(13, 55), float32], Tensor[(2080), float64], Tensor[(14, 10, 13), float32], Tensor[(104, 20), float64], Tensor[(2112), float64], Tensor[(1820), float64]) */
}

def @func_7249() -> (Tensor[(12, 2, 13), float64], Tensor[(12, 2, 13), bool], Tensor[(60), float32], Tensor[(252), int32], Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), int8], Tensor[(1080), float32]) {
  %302 = @func_6965() /* ty=(Tensor[(12, 2, 13), float64],) */;
  %303 = @func_3278() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %304 = @func_3637() /* ty=Tensor[(12, 2, 13), bool] */;
  %305 = cast(%304, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
  %306 = reshape(%305, newshape=[12, 2, 13]) /* ty=Tensor[(12, 2, 13), bool] */;
  %307 = cast(meta[relay.Constant][18] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %308 = cast(meta[relay.Constant][19] /* ty=Tensor[(252), int32] */, dtype="int32") /* ty=Tensor[(252), int32] */;
  %309 = reshape(%307, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %310 = reshape(%308, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %311 = @func_4462(%309, %310) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), float32], Tensor[(60), float32], Tensor[(1080), int16], Tensor[(60), float32], Tensor[(252), int32]) */;
  %312 = %311.3;
  %313 = cast(%312, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %314 = %302.0;
  %315 = %303.0;
  %316 = @func_3654(%306) /* ty=Tensor[(12, 2, 13), int8] */;
  %317 = cos(%313) /* ty=Tensor[(1080), float32] */;
  (%314, %304, meta[relay.Constant][18] /* ty=Tensor[(60), float32] */, meta[relay.Constant][19] /* ty=Tensor[(252), int32] */, %315, %316, %317)
}

def @func_3127() -> Tensor[(12, 2, 13), bool] {
  @func_3125() /* ty=Tensor[(12, 2, 13), bool] */
}

def @func_4515() -> Tensor[(12, 2, 13), bool] {
  %319 = fn () -> Tensor[(12, 2, 13), bool] {
    %318 = @func_3857() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) */;
    %318.0
  };
  %319() /* ty=Tensor[(12, 2, 13), bool] */
}

def @func_3580(%var_3576: Tensor[(12, 2, 13), bool], %var_3577: Tensor[(2112), float64], %var_3578: Tensor[(1, 2080), float64], %var_3579: Tensor[(182), float64]) -> (Tensor[(12, 2, 13), int8], Tensor[(2080), float64], Tensor[(2112), float64], Tensor[(1, 2080), float64], Tensor[(182), float64], Tensor[(182), float64]) {
  %339 = fn (%var_3543: Tensor[(12, 2, 13), bool], %var_3549: Tensor[(2112), float64], %var_3550: Tensor[(1, 2080), float64], %var_3556: Tensor[(182), float64]) -> (Tensor[(12, 2, 13), int8], Tensor[(2080), float64], Tensor[(2112), float64], Tensor[(1, 2080), float64], Tensor[(182), float64], Tensor[(182), float64]) {
    %320 = @func_3278() /* ty=(Tensor[(12, 2, 13), bool],) */;
    %321 = %320.0;
    %322 = cast(%var_3543, dtype="int8") /* ty=Tensor[(12, 2, 13), int8] */;
    %323 = shape_of(%321, dtype="int32") /* ty=Tensor[(3), int32] */;
    %324 = cast(%321, dtype="int8") /* ty=Tensor[(12, 2, 13), int8] */;
    %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %326 = cast(%var_3549, dtype="float64") /* ty=Tensor[(2112), float64] */;
    %327 = cast(%var_3550, dtype="float64") /* ty=Tensor[(1, 2080), float64] */;
    %328 = cast(%var_3549, dtype="float32") /* ty=Tensor[(2112), float32] */;
    %329 = reshape(%326, newshape=[132, 16]) /* ty=Tensor[(132, 16), float64] */;
    %330 = reshape(%327, newshape=[2080]) /* ty=Tensor[(2080), float64] */;
    %331 = reshape(%328, newshape=[132, 16]) /* ty=Tensor[(132, 16), float32] */;
    %332 = @func_3390(%329, %330, %331) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(2080), float64], Tensor[(104, 20), int32], Tensor[(132, 16), float32]) */;
    %333 = cast(%var_3556, dtype="float64") /* ty=Tensor[(182), float64] */;
    %334 = reshape(%333, newshape=[182]) /* ty=Tensor[(182), float64] */;
    %335 = @func_3317(%334) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(182), float64], Tensor[(81), int8], Tensor[(182), float64], Tensor[(16, 8, 4), bool], uint32, Tensor[(512), uint32]) */;
    %336 = minimum(%324, %325) /* ty=Tensor[(12, 2, 13), int8] */;
    %337 = %332.1;
    %338 = %335.1;
    (%336, %337, %var_3549, %var_3550, %338, %var_3556)
  };
  %339(%var_3576, %var_3577, %var_3578, %var_3579) /* ty=(Tensor[(12, 2, 13), int8], Tensor[(2080), float64], Tensor[(2112), float64], Tensor[(1, 2080), float64], Tensor[(182), float64], Tensor[(182), float64]) */
}

def @func_6914() -> (Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int32], Tensor[(12, 2, 13), int16], Tensor[(12, 2, 13), bool], Tensor[(1, 60), float32]) {
  %351 = fn () -> (Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int32], Tensor[(12, 2, 13), int16], Tensor[(12, 2, 13), bool], Tensor[(1, 60), float32]) {
    %340 = @func_3675() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int32], Tensor[(252), int32]) */;
    %341 = @func_6456() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int32], Tensor[(252), int32], Tensor[(12, 2, 13), int16]) */;
    %342 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 60), float32] */, dtype="float32") /* ty=Tensor[(1, 60), float32] */;
    %343 = %340.1;
    %344 = cast(%343, dtype="int32") /* ty=Tensor[(14, 9, 2), int32] */;
    %345 = reshape(%342, newshape=[60]) /* ty=Tensor[(60), float32] */;
    %346 = reshape(%344, newshape=[252]) /* ty=Tensor[(252), int32] */;
    %347 = @func_4462(%345, %346) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), float32], Tensor[(60), float32], Tensor[(1080), int16], Tensor[(60), float32], Tensor[(252), int32]) */;
    %348 = @func_3637() /* ty=Tensor[(12, 2, 13), bool] */;
    %349 = %341.3;
    %350 = %347.0;
    (%348, %343, %349, %350, meta[relay.Constant][20] /* ty=Tensor[(1, 60), float32] */)
  };
  %351() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int32], Tensor[(12, 2, 13), int16], Tensor[(12, 2, 13), bool], Tensor[(1, 60), float32]) */
}

def @func_5715(%var_5713: Tensor[(81), int8]) -> (Tensor[(12, 2, 13), float32], Tensor[(12, 2, 13), bool], Tensor[(10, 13, 16), float64], Tensor[(81), int8], Tensor[(182), float64], Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) {
  @func_5712(%var_5713) /* ty=(Tensor[(12, 2, 13), float32], Tensor[(12, 2, 13), bool], Tensor[(10, 13, 16), float64], Tensor[(81), int8], Tensor[(182), float64], Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) */
}

def @func_6343() -> (Tensor[(12, 2, 13), bool],) {
  @func_6341() /* ty=(Tensor[(12, 2, 13), bool],) */
}

def @func_6673(%var_6672: Tensor[(4, 4, 16), float64]) -> Tensor[(4, 4, 16), float64] {
  %353 = fn (%var_6651: Tensor[(4, 4, 16), float64]) -> Tensor[(4, 4, 16), float64] {
    %352 = cast(%var_6651, dtype="float64") /* ty=Tensor[(4, 4, 16), float64] */;
    sigmoid(%352) /* ty=Tensor[(4, 4, 16), float64] */
  };
  %353(%var_6672) /* ty=Tensor[(4, 4, 16), float64] */
}

def @func_6040(%var_6038: Tensor[(60), float32], %var_6039: Tensor[(12, 2, 13), bool]) -> (Tensor[(252), int32], Tensor[(60), float32], Tensor[(252), int32], Tensor[(12, 2, 13), bool]) {
  @func_6036(%var_6038, %var_6039) /* ty=(Tensor[(252), int32], Tensor[(60), float32], Tensor[(252), int32], Tensor[(12, 2, 13), bool]) */
}

def @func_6188(%var_6186: Tensor[(12, 2, 13), bool]) -> (Tensor[(12, 2, 13), int16],) {
  @func_6185(%var_6186) /* ty=(Tensor[(12, 2, 13), int16],) */
}

def @func_772(%var_771: Tensor[(10, 13, 16), float64]) -> Tensor[(10, 13, 16), float64] {
  %355 = fn (%var_767: Tensor[(10, 13, 16), float64]) -> Tensor[(10, 13, 16), float64] {
    %354 = cast(%var_767, dtype="float64") /* ty=Tensor[(10, 13, 16), float64] */;
    atan(%354) /* ty=Tensor[(10, 13, 16), float64] */
  };
  %355(%var_771) /* ty=Tensor[(10, 13, 16), float64] */
}

def @func_4739(%var_4736: Tensor[(6, 14, 16), float32]) -> (Tensor[(6, 14, 16), float32],) {
  %356 = cast(%var_4736, dtype="float32") /* ty=Tensor[(6, 14, 16), float32] */;
  %357 = asinh(%356) /* ty=Tensor[(6, 14, 16), float32] */;
  (%357,)
}

def @func_4033() -> (Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) {
  %358 = @func_3857() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) */;
  %359 = %358.0;
  %360 = @func_3507() /* ty=Tensor[(12, 2, 13), bool] */;
  (%359, %360)
}

def @func_4293() -> Tensor[(16, 4, 16), float64] {
  %361 = cast(meta[relay.Constant][21] /* ty=Tensor[(16, 4, 16), float64] */, dtype="float64") /* ty=Tensor[(16, 4, 16), float64] */;
  asinh(%361) /* ty=Tensor[(16, 4, 16), float64] */
}

def @func_3279() -> (Tensor[(12, 2, 13), bool],) {
  %363 = fn () -> (Tensor[(12, 2, 13), bool],) {
    %362 = @func_3125() /* ty=Tensor[(12, 2, 13), bool] */;
    (%362,)
  };
  %363() /* ty=(Tensor[(12, 2, 13), bool],) */
}

def @func_3317(%var_3307: Tensor[(182), float64]) -> (Tensor[(12, 2, 13), bool], Tensor[(182), float64], Tensor[(81), int8], Tensor[(182), float64], Tensor[(16, 8, 4), bool], uint32, Tensor[(512), uint32]) {
  %364 = @func_3291() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %365 = cast(meta[relay.Constant][22] /* ty=Tensor[(81), int8] */, dtype="int8") /* ty=Tensor[(81), int8] */;
  %366 = cast(%var_3307, dtype="float64") /* ty=Tensor[(182), float64] */;
  %367 = reshape(%365, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), int8] */;
  %368 = reshape(%366, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %369 = @func_3249(%367, %368) /* ty=(Tensor[(9, 5, 9), int8], Tensor[(9, 5, 9), bool], Tensor[(10, 13, 16), float64], Tensor[(2080), float64], Tensor[(2080), float64], Tensor[(182), float64], Tensor[(10, 13, 16), float64]) */;
  %370 = cast(meta[relay.Constant][23] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %371 = cast(meta[relay.Constant][24] /* ty=Tensor[(512), uint32] */, dtype="uint32") /* ty=Tensor[(512), uint32] */;
  %372 = reshape(%370, newshape=[]) /* ty=uint32 */;
  %373 = reshape(%371, newshape=[16, 8, 4]) /* ty=Tensor[(16, 8, 4), uint32] */;
  %374 = @func_2598(%372, %373) /* ty=(Tensor[(16, 8, 4), bool],) */;
  %375 = %364.0;
  %376 = %369.5;
  %377 = %374.0;
  (%375, %376, meta[relay.Constant][22] /* ty=Tensor[(81), int8] */, %var_3307, %377, meta[relay.Constant][23] /* ty=uint32 */, meta[relay.Constant][24] /* ty=Tensor[(512), uint32] */)
}

def @main(%var_8335: Tensor[(2112), float64], %var_8336: Tensor[(2080), float64], %var_8410: Tensor[(2080), float64]) -> (Tensor[(12, 2, 13), float32], Tensor[(104, 20), int16], Tensor[(2112), uint16], Tensor[(2080), float64]) {
  %378 = @func_4272() /* ty=(Tensor[(12, 2, 13), float32],) */;
  %379 = cast(%var_8335, dtype="float64") /* ty=Tensor[(2112), float64] */;
  %380 = cast(%var_8336, dtype="float64") /* ty=Tensor[(2080), float64] */;
  %381 = reshape(%379, newshape=[12, 11, 16]) /* ty=Tensor[(12, 11, 16), float64] */;
  %382 = reshape(%380, newshape=[104, 20]) /* ty=Tensor[(104, 20), float64] */;
  %383 = @func_1200(%381, %382) /* ty=(Tensor[(10, 13, 16), float64], Tensor[(104, 20), float64], Tensor[(12, 11, 16), float32]) */;
  %384 = %383.1;
  %385 = cast(%var_8336, dtype="int16") /* ty=Tensor[(2080), int16] */;
  %386 = shape_of(%384, dtype="int32") /* ty=Tensor[(2), int32] */;
  %387 = cast(%384, dtype="int16") /* ty=Tensor[(104, 20), int16] */;
  %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %389 = cast(meta[relay.Constant][25] /* ty=Tensor[(2112), float64] */, dtype="uint16") /* ty=Tensor[(2112), uint16] */;
  %390 = shape_of(%var_8335, dtype="int32") /* ty=Tensor[(1), int32] */;
  %391 = cast(%var_8335, dtype="uint16") /* ty=Tensor[(2112), uint16] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %393 = cast(%var_8410, dtype="bool") /* ty=Tensor[(2080), bool] */;
  %394 = shape_of(%var_8336, dtype="int32") /* ty=Tensor[(1), int32] */;
  %395 = cast(%var_8336, dtype="bool") /* ty=Tensor[(2080), bool] */;
  %396 = dyn.reshape(%393, %394, newshape=[]) /* ty=Tensor[(?), bool] */;
  %397 = greater_equal(%395, %396) /* ty=Tensor[(2080), bool] */;
  %398 = cast(%384, dtype="float64") /* ty=Tensor[(104, 20), float64] */;
  %399 = shape_of(%397, dtype="int32") /* ty=Tensor[(1), int32] */;
  %400 = cast(%397, dtype="float64") /* ty=Tensor[(2080), float64] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?), float64] */;
  %402 = %378.0;
  %403 = left_shift(%387, %388) /* ty=Tensor[(104, 20), int16] */;
  %404 = add(%391, %392) /* ty=Tensor[(2112), uint16] */;
  %405 = multiply(%400, %401) /* ty=Tensor[(2080), float64] */;
  (%402, %403, %404, %405)
}

def @func_7973() -> (Tensor[(12, 2, 13), float64], Tensor[(12, 2, 13), float32]) {
  %406 = @func_7801() /* ty=(Tensor[(12, 2, 13), float64],) */;
  %407 = @func_6230() /* ty=(Tensor[(12, 2, 13), float32],) */;
  %408 = %406.0;
  %409 = %407.0;
  (%408, %409)
}

def @func_8128() -> (Tensor[(12, 2, 13), bool],) {
  @func_8126() /* ty=(Tensor[(12, 2, 13), bool],) */
}

def @func_3859() -> (Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) {
  @func_3857() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) */
}

def @func_4183(%var_4181: Tensor[(2080), float64], %var_4182: Tensor[(1820), float32]) -> (Tensor[(12, 2, 13), bool], Tensor[(10, 13, 16), float64], Tensor[(2080), float64], Tensor[(12, 2, 13), bool], Tensor[(14, 10, 13), float32], Tensor[(1820), float32], Tensor[(12, 2, 13), bool]) {
  @func_4179(%var_4181, %var_4182) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(10, 13, 16), float64], Tensor[(2080), float64], Tensor[(12, 2, 13), bool], Tensor[(14, 10, 13), float32], Tensor[(1820), float32], Tensor[(12, 2, 13), bool]) */
}

def @func_6739(%var_6722: Tensor[(12, 2, 13), bool]) -> Tensor[(12, 2, 13), float64] {
  %410 = @func_4127() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %411 = %410.0;
  %412 = cast(%var_6722, dtype="float32") /* ty=Tensor[(12, 2, 13), float32] */;
  %413 = shape_of(%411, dtype="int32") /* ty=Tensor[(3), int32] */;
  %414 = cast(%411, dtype="float32") /* ty=Tensor[(12, 2, 13), float32] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %416 = mod(%414, %415) /* ty=Tensor[(12, 2, 13), float32] */;
  %417 = cast(%416, dtype="float64") /* ty=Tensor[(12, 2, 13), float64] */;
  sin(%417) /* ty=Tensor[(12, 2, 13), float64] */
}

def @func_6230() -> (Tensor[(12, 2, 13), float32],) {
  %418 = @func_4010() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), float32]) */;
  %419 = %418.1;
  %420 = cast(%419, dtype="float32") /* ty=Tensor[(12, 2, 13), float32] */;
  %421 = asinh(%420) /* ty=Tensor[(12, 2, 13), float32] */;
  (%421,)
}

def @func_3966() -> Tensor[(12, 2, 13), bool] {
  %422 = fn () -> Tensor[(12, 2, 13), bool] {
    @func_3507() /* ty=Tensor[(12, 2, 13), bool] */
  };
  %422() /* ty=Tensor[(12, 2, 13), bool] */
}

def @func_4791(%var_4789: Tensor[(12, 16, 1), float32]) -> Tensor[(12, 16, 1), float32] {
  @func_4788(%var_4789) /* ty=Tensor[(12, 16, 1), float32] */
}

def @func_8103(%var_8101: Tensor[(14, 7, 4), float64], %var_8102: Tensor[(14, 7, 4), bool]) -> (Tensor[(12, 2, 13), float32], Tensor[(6, 14, 16), float32], Tensor[(1344), float32], Tensor[(14, 7, 4), bool]) {
  @func_8099(%var_8101, %var_8102) /* ty=(Tensor[(12, 2, 13), float32], Tensor[(6, 14, 16), float32], Tensor[(1344), float32], Tensor[(14, 7, 4), bool]) */
}

def @func_3615(%var_3613: Tensor[(13, 8, 6), float64]) -> (Tensor[(13, 8, 6), float32], Tensor[(12, 2, 13), bool]) {
  @func_3612(%var_3613) /* ty=(Tensor[(13, 8, 6), float32], Tensor[(12, 2, 13), bool]) */
}

def @func_4670(%var_4668: Tensor[(12, 9, 9), float64]) -> (Tensor[(12, 9, 9), float64],) {
  @func_4667(%var_4668) /* ty=(Tensor[(12, 9, 9), float64],) */
}

def @func_3508() -> Tensor[(12, 2, 13), bool] {
  %424 = fn () -> Tensor[(12, 2, 13), bool] {
    %423 = @func_3278() /* ty=(Tensor[(12, 2, 13), bool],) */;
    %423.0
  };
  %424() /* ty=Tensor[(12, 2, 13), bool] */
}

def @func_7801() -> (Tensor[(12, 2, 13), float64],) {
  %425 = @func_5210() /* ty=Tensor[(12, 2, 13), float64] */;
  (%425,)
}

def @func_5019() -> Tensor[(12, 2, 13), float32] {
  %426 = @func_4270() /* ty=(Tensor[(12, 2, 13), float32],) */;
  %426.0
}

def @func_6833(%var_6822: Tensor[(14, 9, 2), int32]) -> (Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int64]) {
  %427 = @func_3291() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %428 = @func_6456() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int32], Tensor[(252), int32], Tensor[(12, 2, 13), int16]) */;
  %429 = %428.1;
  %430 = cast(%var_6822, dtype="int64") /* ty=Tensor[(14, 9, 2), int64] */;
  %431 = shape_of(%429, dtype="int32") /* ty=Tensor[(3), int32] */;
  %432 = cast(%429, dtype="int64") /* ty=Tensor[(14, 9, 2), int64] */;
  %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %434 = %427.0;
  %435 = bitwise_and(%432, %433) /* ty=Tensor[(14, 9, 2), int64] */;
  (%434, %435)
}

def @func_6528() -> (Tensor[(12, 2, 13), bool],) {
  @func_6526() /* ty=(Tensor[(12, 2, 13), bool],) */
}

def @func_3427(%var_3425: Tensor[(12, 2, 13), bool]) -> (Tensor[(12, 2, 13), int64],) {
  @func_3424(%var_3425) /* ty=(Tensor[(12, 2, 13), int64],) */
}

def @func_6550() -> Tensor[(12, 2, 13), bool] {
  @func_6548() /* ty=Tensor[(12, 2, 13), bool] */
}

def @func_6504(%var_6502: Tensor[(2, 96), float32]) -> (Tensor[(3, 15, 1), float32], Tensor[(12, 16, 1), float32], Tensor[(2, 96), float32]) {
  @func_6501(%var_6502) /* ty=(Tensor[(3, 15, 1), float32], Tensor[(12, 16, 1), float32], Tensor[(2, 96), float32]) */
}

def @func_4742(%var_4740: Tensor[(6, 14, 16), float32]) -> (Tensor[(6, 14, 16), float32],) {
  @func_4739(%var_4740) /* ty=(Tensor[(6, 14, 16), float32],) */
}

def @func_3915(%var_3913: Tensor[(6, 10, 9), int64], %var_3914: Tensor[(6, 10, 9), int64]) -> (Tensor[(6, 10, 9), bool], Tensor[(12, 2, 13), bool]) {
  @func_3911(%var_3913, %var_3914) /* ty=(Tensor[(6, 10, 9), bool], Tensor[(12, 2, 13), bool]) */
}

def @func_3395(%var_3392: Tensor[(132, 16), float64], %var_3393: Tensor[(2080), float64], %var_3394: Tensor[(132, 16), float32]) -> (Tensor[(12, 2, 13), bool], Tensor[(2080), float64], Tensor[(104, 20), int32], Tensor[(132, 16), float32]) {
  @func_3390(%var_3392, %var_3393, %var_3394) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(2080), float64], Tensor[(104, 20), int32], Tensor[(132, 16), float32]) */
}

def @func_4127() -> (Tensor[(12, 2, 13), bool],) {
  %436 = @func_3125() /* ty=Tensor[(12, 2, 13), bool] */;
  (%436,)
}

def @func_3472(%var_3470: Tensor[(182), float64]) -> (Tensor[(12, 2, 13), bool], Tensor[(182), float64], Tensor[(182), float32]) {
  @func_3469(%var_3470) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(182), float64], Tensor[(182), float32]) */
}

def @func_4080() -> (Tensor[(1820), bool], Tensor[(12, 2, 13), float32]) {
  %437 = cast(meta[relay.Constant][26] /* ty=Tensor[(1820), float32] */, dtype="float32") /* ty=Tensor[(1820), float32] */;
  %438 = reshape(%437, newshape=[14, 10, 13]) /* ty=Tensor[(14, 10, 13), float32] */;
  %439 = @func_2283(%438) /* ty=Tensor[(14, 10, 13), float32] */;
  %440 = cast(%439, dtype="bool") /* ty=Tensor[(14, 10, 13), bool] */;
  %441 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(1820), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %442 = cast(meta[relay.Constant][26] /* ty=Tensor[(1820), float32] */, dtype="bool") /* ty=Tensor[(1820), bool] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?), bool] */;
  %444 = less_equal(%442, %443) /* ty=Tensor[(1820), bool] */;
  %445 = cast(%444, dtype="bool") /* ty=Tensor[(1820), bool] */;
  %446 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(1820), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %447 = cast(meta[relay.Constant][26] /* ty=Tensor[(1820), float32] */, dtype="bool") /* ty=Tensor[(1820), bool] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?), bool] */;
  %449 = @func_3637() /* ty=Tensor[(12, 2, 13), bool] */;
  %450 = @func_3857() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) */;
  %451 = %450.0;
  %452 = cast(%451, dtype="float32") /* ty=Tensor[(12, 2, 13), float32] */;
  %453 = shape_of(%449, dtype="int32") /* ty=Tensor[(3), int32] */;
  %454 = cast(%449, dtype="float32") /* ty=Tensor[(12, 2, 13), float32] */;
  %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %456 = less(%447, %448) /* ty=Tensor[(1820), bool] */;
  %457 = divide(%454, %455) /* ty=Tensor[(12, 2, 13), float32] */;
  (%456, %457)
}

def @func_1450(%var_1427: Tensor[(5, 1, 16), float32], %var_1447: Tensor[(252), int32]) -> (Tensor[(5, 2, 16), float32], Tensor[(10, 13, 16), float64], Tensor[(182), float64], Tensor[(2080), float64], Tensor[(14, 9, 2), int32], Tensor[(252), int32]) {
  %458 = cast(%var_1427, dtype="float32") /* ty=Tensor[(5, 1, 16), float32] */;
  %459 = cast(meta[relay.Constant][27] /* ty=Tensor[(5, 2, 16), float32] */, dtype="float32") /* ty=Tensor[(5, 2, 16), float32] */;
  %460 = cast(meta[relay.Constant][28] /* ty=Tensor[(182), float64] */, dtype="float64") /* ty=Tensor[(182), float64] */;
  %461 = cast(meta[relay.Constant][29] /* ty=Tensor[(2080), float64] */, dtype="float64") /* ty=Tensor[(2080), float64] */;
  %462 = reshape(%460, newshape=[1, 14, 13]) /* ty=Tensor[(1, 14, 13), float64] */;
  %463 = reshape(%461, newshape=[2080]) /* ty=Tensor[(2080), float64] */;
  %464 = @func_932(%462, %463) /* ty=(Tensor[(?, 14, 13), bool], Tensor[(10, 13, 16), float64], Tensor[(2080), float64]) */;
  %465 = cast(%var_1447, dtype="int32") /* ty=Tensor[(252), int32] */;
  %466 = reshape(%465, newshape=[14, 9, 2]) /* ty=Tensor[(14, 9, 2), int32] */;
  %467 = @func_41(%466) /* ty=(Tensor[(14, 9, 2), int32], Tensor[(14, 9, 2), float32]) */;
  %468 = floor_mod(%458, %459) /* ty=Tensor[(5, 2, 16), float32] */;
  %469 = %464.1;
  %470 = %467.0;
  (%468, %469, meta[relay.Constant][28] /* ty=Tensor[(182), float64] */, meta[relay.Constant][29] /* ty=Tensor[(2080), float64] */, %470, %var_1447)
}

def @func_3657(%var_3655: Tensor[(12, 2, 13), bool]) -> Tensor[(12, 2, 13), int8] {
  @func_3654(%var_3655) /* ty=Tensor[(12, 2, 13), int8] */
}

def @func_3142(%var_3141: Tensor[(715), float32]) -> (Tensor[(12, 2, 13), bool], Tensor[(10, 13, 16), float64], Tensor[(715), float32], Tensor[(2080), float64]) {
  %478 = fn (%var_3137: Tensor[(715), float32]) -> (Tensor[(12, 2, 13), bool], Tensor[(10, 13, 16), float64], Tensor[(715), float32], Tensor[(2080), float64]) {
    %471 = cast(%var_3137, dtype="float32") /* ty=Tensor[(715), float32] */;
    %472 = cast(meta[relay.Constant][30] /* ty=Tensor[(2080), float64] */, dtype="float64") /* ty=Tensor[(2080), float64] */;
    %473 = reshape(%471, newshape=[11, 13, 5]) /* ty=Tensor[(11, 13, 5), float32] */;
    %474 = reshape(%472, newshape=[2080]) /* ty=Tensor[(2080), float64] */;
    %475 = @func_1991(%473, %474) /* ty=(Tensor[(11, 13, 5), float32], Tensor[(10, 13, 16), float64], Tensor[(2112), float64], Tensor[(2080), float64]) */;
    %476 = @func_3125() /* ty=Tensor[(12, 2, 13), bool] */;
    %477 = %475.1;
    (%476, %477, %var_3137, meta[relay.Constant][30] /* ty=Tensor[(2080), float64] */)
  };
  %478(%var_3141) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(10, 13, 16), float64], Tensor[(715), float32], Tensor[(2080), float64]) */
}

def @func_5630(%var_5579: Tensor[(12, 2, 13), bool]) -> (Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), float64], Tensor[(12, 2, 13), float32]) {
  %479 = @func_3965() /* ty=Tensor[(12, 2, 13), bool] */;
  %480 = cast(%var_5579, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
  %481 = shape_of(%479, dtype="int32") /* ty=Tensor[(3), int32] */;
  %482 = cast(%479, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
  %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %484 = @func_3857() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) */;
  %485 = cast(%479, dtype="float64") /* ty=Tensor[(12, 2, 13), float64] */;
  %486 = cos(%485) /* ty=Tensor[(12, 2, 13), float64] */;
  %487 = cast(%486, dtype="float64") /* ty=Tensor[(12, 2, 13), float64] */;
  %488 = cast(%486, dtype="float64") /* ty=Tensor[(12, 2, 13), float64] */;
  %489 = atanh(%488) /* ty=Tensor[(12, 2, 13), float64] */;
  %490 = cast(%489, dtype="float32") /* ty=Tensor[(12, 2, 13), float32] */;
  %491 = equal(%482, %483) /* ty=Tensor[(12, 2, 13), bool] */;
  %492 = %484.1;
  %493 = cosh(%487) /* ty=Tensor[(12, 2, 13), float64] */;
  %494 = exp(%490) /* ty=Tensor[(12, 2, 13), float32] */;
  (%491, %492, %493, %494)
}

def @func_3677() -> (Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int32], Tensor[(252), int32]) {
  @func_3675() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int32], Tensor[(252), int32]) */
}

def @func_3857() -> (Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) {
  %495 = @func_3278() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %496 = @func_3507() /* ty=Tensor[(12, 2, 13), bool] */;
  %497 = %495.0;
  (%496, %497)
}

def @func_5005() -> (Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) {
  %502 = fn () -> (Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) {
    %498 = @func_3291() /* ty=(Tensor[(12, 2, 13), bool],) */;
    %499 = @func_4587() /* ty=(Tensor[(12, 2, 13), bool],) */;
    %500 = %498.0;
    %501 = %499.0;
    (%500, %501)
  };
  %502() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) */
}

def @func_3390(%var_3354: Tensor[(132, 16), float64], %var_3355: Tensor[(2080), float64], %var_3380: Tensor[(132, 16), float32]) -> (Tensor[(12, 2, 13), bool], Tensor[(2080), float64], Tensor[(104, 20), int32], Tensor[(132, 16), float32]) {
  %503 = @func_3291() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %504 = cast(%var_3354, dtype="float64") /* ty=Tensor[(132, 16), float64] */;
  %505 = cast(%var_3355, dtype="float64") /* ty=Tensor[(2080), float64] */;
  %506 = reshape(%504, newshape=[12, 11, 16]) /* ty=Tensor[(12, 11, 16), float64] */;
  %507 = reshape(%505, newshape=[104, 20]) /* ty=Tensor[(104, 20), float64] */;
  %508 = @func_1197(%506, %507) /* ty=(Tensor[(10, 13, 16), float64], Tensor[(104, 20), float64], Tensor[(12, 11, 16), float32]) */;
  %509 = %508.1;
  %510 = cast(meta[relay.Constant][31] /* ty=Tensor[(104, 20), float64] */, dtype="int32") /* ty=Tensor[(104, 20), int32] */;
  %511 = shape_of(%509, dtype="int32") /* ty=Tensor[(2), int32] */;
  %512 = cast(%509, dtype="int32") /* ty=Tensor[(104, 20), int32] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %514 = cast(%var_3354, dtype="float32") /* ty=Tensor[(132, 16), float32] */;
  %515 = cos(%514) /* ty=Tensor[(132, 16), float32] */;
  %516 = cast(%var_3380, dtype="float32") /* ty=Tensor[(132, 16), float32] */;
  %517 = shape_of(%515, dtype="int32") /* ty=Tensor[(2), int32] */;
  %518 = cast(%515, dtype="float32") /* ty=Tensor[(132, 16), float32] */;
  %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %520 = %503.0;
  %521 = bitwise_or(%512, %513) /* ty=Tensor[(104, 20), int32] */;
  %522 = floor_divide(%518, %519) /* ty=Tensor[(132, 16), float32] */;
  (%520, %var_3355, %521, %522)
}

def @func_4684(%var_4672: Tensor[(14, 4, 2), int8], %var_4673: Tensor[(14, 4, 2), int8], %var_4682: Tensor[(240), float64]) -> (Tensor[(14, 4, 2), int8], Tensor[(8, 10, 3), bool], Tensor[(240), float64]) {
  %523 = cast(%var_4673, dtype="int8") /* ty=Tensor[(14, 4, 2), int8] */;
  %524 = shape_of(%var_4672, dtype="int32") /* ty=Tensor[(3), int32] */;
  %525 = cast(%var_4672, dtype="int8") /* ty=Tensor[(14, 4, 2), int8] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %527 = cast(%var_4682, dtype="float64") /* ty=Tensor[(240), float64] */;
  %528 = reshape(%527, newshape=[8, 10, 3]) /* ty=Tensor[(8, 10, 3), float64] */;
  %529 = minimum(%525, %526) /* ty=Tensor[(14, 4, 2), int8] */;
  %530 = @func_1522(%528) /* ty=Tensor[(8, 10, 3), bool] */;
  (%529, %530, %var_4682)
}

def @func_3801(%var_3797: Tensor[(12, 2, 13), float32], %var_3798: Tensor[(182), float64], %var_3799: Tensor[(182), float64], %var_3800: Tensor[(252), int32]) -> (Tensor[(12, 2, 13), float32], Tensor[(12, 2, 13), float64], Tensor[(16, 8, 4), bool], Tensor[(182), int16], Tensor[(14, 9, 2), float32], Tensor[(252), int32], Tensor[(12, 2, 13), float32]) {
  %562 = fn (%var_3743: Tensor[(12, 2, 13), float32], %var_3756: Tensor[(182), float64], %var_3758: Tensor[(182), float64], %var_3774: Tensor[(252), int32]) -> (Tensor[(12, 2, 13), float32], Tensor[(12, 2, 13), float64], Tensor[(16, 8, 4), bool], Tensor[(182), int16], Tensor[(14, 9, 2), float32], Tensor[(252), int32], Tensor[(12, 2, 13), float32]) {
    %531 = cast(%var_3743, dtype="float32") /* ty=Tensor[(12, 2, 13), float32] */;
    %532 = @func_3291() /* ty=(Tensor[(12, 2, 13), bool],) */;
    %533 = %532.0;
    %534 = cast(%533, dtype="float64") /* ty=Tensor[(12, 2, 13), float64] */;
    %535 = cast(%var_3756, dtype="float64") /* ty=Tensor[(182), float64] */;
    %536 = reshape(%535, newshape=[182]) /* ty=Tensor[(182), float64] */;
    %537 = @func_3317(%536) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(182), float64], Tensor[(81), int8], Tensor[(182), float64], Tensor[(16, 8, 4), bool], uint32, Tensor[(512), uint32]) */;
    %538 = cast(%var_3758, dtype="int16") /* ty=Tensor[(182), int16] */;
    %539 = shape_of(%var_3756, dtype="int32") /* ty=Tensor[(1), int32] */;
    %540 = cast(%var_3756, dtype="int16") /* ty=Tensor[(182), int16] */;
    %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?), int16] */;
    %542 = cast(%var_3774, dtype="int32") /* ty=Tensor[(252), int32] */;
    %543 = reshape(%542, newshape=[14, 9, 2]) /* ty=Tensor[(14, 9, 2), int32] */;
    %544 = @func_41(%543) /* ty=(Tensor[(14, 9, 2), int32], Tensor[(14, 9, 2), float32]) */;
    %545 = cast(%533, dtype="float32") /* ty=Tensor[(12, 2, 13), float32] */;
    %546 = asin(%545) /* ty=Tensor[(12, 2, 13), float32] */;
    %547 = cast(%var_3743, dtype="float64") /* ty=Tensor[(12, 2, 13), float64] */;
    %548 = shape_of(%546, dtype="int32") /* ty=Tensor[(3), int32] */;
    %549 = cast(%546, dtype="float64") /* ty=Tensor[(12, 2, 13), float64] */;
    %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %551 = floor_divide(%549, %550) /* ty=Tensor[(12, 2, 13), float64] */;
    %552 = cast(%551, dtype="float32") /* ty=Tensor[(12, 2, 13), float32] */;
    %553 = shape_of(%533, dtype="int32") /* ty=Tensor[(3), int32] */;
    %554 = cast(%533, dtype="float32") /* ty=Tensor[(12, 2, 13), float32] */;
    %555 = dyn.reshape(%552, %553, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %556 = log10(%531) /* ty=Tensor[(12, 2, 13), float32] */;
    %557 = atan(%534) /* ty=Tensor[(12, 2, 13), float64] */;
    %558 = %537.4;
    %559 = left_shift(%540, %541) /* ty=Tensor[(182), int16] */;
    %560 = %544.1;
    %561 = power(%554, %555) /* ty=Tensor[(12, 2, 13), float32] */;
    (%556, %557, %558, %559, %560, %var_3774, %561)
  };
  %562(%var_3797, %var_3798, %var_3799, %var_3800) /* ty=(Tensor[(12, 2, 13), float32], Tensor[(12, 2, 13), float64], Tensor[(16, 8, 4), bool], Tensor[(182), int16], Tensor[(14, 9, 2), float32], Tensor[(252), int32], Tensor[(12, 2, 13), float32]) */
}

def @func_4197() -> Tensor[(12, 2, 13), bool] {
  %563 = fn () -> Tensor[(12, 2, 13), bool] {
    @func_3507() /* ty=Tensor[(12, 2, 13), bool] */
  };
  %563() /* ty=Tensor[(12, 2, 13), bool] */
}

def @func_5296(%var_5277: Tensor[(2, 14, 12), float32]) -> (Tensor[(2, 14, 12), float32],) {
  %564 = cast(%var_5277, dtype="float32") /* ty=Tensor[(2, 14, 12), float32] */;
  %565 = sigmoid(%564) /* ty=Tensor[(2, 14, 12), float32] */;
  (%565,)
}

def @func_2602(%var_2600: uint32, %var_2601: Tensor[(16, 8, 4), uint32]) -> (Tensor[(16, 8, 4), bool],) {
  @func_2598(%var_2600, %var_2601) /* ty=(Tensor[(16, 8, 4), bool],) */
}

def @func_6516() -> Tensor[(12, 2, 13), bool] {
  %566 = @func_3291() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %566.0
}

def @func_181(%var_178: Tensor[(2, 15, 2), float32], %var_179: Tensor[(1, 252), int32], %var_180: Tensor[(2, 15, 2), bool]) -> (Tensor[(14, 9, 2), float32], Tensor[(1, 252), int32], Tensor[(2, 15, 2), bool]) {
  %590 = fn (%var_131: Tensor[(2, 15, 2), float32], %var_170: Tensor[(1, 252), int32], %var_172: Tensor[(2, 15, 2), bool]) -> (Tensor[(14, 9, 2), float32], Tensor[(1, 252), int32], Tensor[(2, 15, 2), bool]) {
    %567 = cast(%var_170, dtype="int32") /* ty=Tensor[(1, 252), int32] */;
    %568 = reshape(%567, newshape=[14, 9, 2]) /* ty=Tensor[(14, 9, 2), int32] */;
    %569 = @func_41(%568) /* ty=(Tensor[(14, 9, 2), int32], Tensor[(14, 9, 2), float32]) */;
    %570 = cast(%var_131, dtype="float32") /* ty=Tensor[(2, 15, 2), float32] */;
    %571 = sqrt(%570) /* ty=Tensor[(2, 15, 2), float32] */;
    %572 = cast(%571, dtype="float32") /* ty=Tensor[(2, 15, 2), float32] */;
    %573 = shape_of(%var_131, dtype="int32") /* ty=Tensor[(3), int32] */;
    %574 = cast(%var_131, dtype="float32") /* ty=Tensor[(2, 15, 2), float32] */;
    %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %576 = power(%574, %575) /* ty=Tensor[(2, 15, 2), float32] */;
    %577 = cast(%576, dtype="float64") /* ty=Tensor[(2, 15, 2), float64] */;
    %578 = atan(%577) /* ty=Tensor[(2, 15, 2), float64] */;
    %579 = cast(%576, dtype="bool") /* ty=Tensor[(2, 15, 2), bool] */;
    %580 = shape_of(%578, dtype="int32") /* ty=Tensor[(3), int32] */;
    %581 = cast(%578, dtype="bool") /* ty=Tensor[(2, 15, 2), bool] */;
    %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %583 = not_equal(%581, %582) /* ty=Tensor[(2, 15, 2), bool] */;
    %584 = cast(%var_172, dtype="bool") /* ty=Tensor[(2, 15, 2), bool] */;
    %585 = shape_of(%583, dtype="int32") /* ty=Tensor[(3), int32] */;
    %586 = cast(%583, dtype="bool") /* ty=Tensor[(2, 15, 2), bool] */;
    %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %588 = %569.1;
    %589 = logical_and(%586, %587) /* ty=Tensor[(2, 15, 2), bool] */;
    (%588, %var_170, %589)
  };
  %590(%var_178, %var_179, %var_180) /* ty=(Tensor[(14, 9, 2), float32], Tensor[(1, 252), int32], Tensor[(2, 15, 2), bool]) */
}

def @func_4129() -> (Tensor[(12, 2, 13), bool],) {
  @func_4127() /* ty=(Tensor[(12, 2, 13), bool],) */
}

def @func_6518() -> Tensor[(12, 2, 13), bool] {
  @func_6516() /* ty=Tensor[(12, 2, 13), bool] */
}

def @func_2658(%var_2656: Tensor[(12, 4, 7), float32]) -> (Tensor[(12, 4, 7), float32],) {
  @func_2655(%var_2656) /* ty=(Tensor[(12, 4, 7), float32],) */
}

def @func_6248(%var_6243: Tensor[(16, 4, 16), float64]) -> Tensor[(16, 4, 16), bool] {
  %591 = @func_4293() /* ty=Tensor[(16, 4, 16), float64] */;
  %592 = cast(%var_6243, dtype="bool") /* ty=Tensor[(16, 4, 16), bool] */;
  %593 = shape_of(%591, dtype="int32") /* ty=Tensor[(3), int32] */;
  %594 = cast(%591, dtype="bool") /* ty=Tensor[(16, 4, 16), bool] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%594, %595) /* ty=Tensor[(16, 4, 16), bool] */
}

def @func_3469(%var_3438: Tensor[(182), float64]) -> (Tensor[(12, 2, 13), bool], Tensor[(182), float64], Tensor[(182), float32]) {
  %596 = @func_3278() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %597 = cast(%var_3438, dtype="float64") /* ty=Tensor[(182), float64] */;
  %598 = reshape(%597, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %599 = @func_3317(%598) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(182), float64], Tensor[(81), int8], Tensor[(182), float64], Tensor[(16, 8, 4), bool], uint32, Tensor[(512), uint32]) */;
  %600 = %599.3;
  %601 = cast(%600, dtype="float32") /* ty=Tensor[(182), float32] */;
  %602 = %596.0;
  %603 = acos(%601) /* ty=Tensor[(182), float32] */;
  (%602, %var_3438, %603)
}

def @func_7440() -> (Tensor[(12, 2, 13), bool], Tensor[(13, 11, 2), float32], Tensor[(14, 9, 2), int32], Tensor[(252), int32], Tensor[(12, 2, 13), bool]) {
  %620 = fn () -> (Tensor[(12, 2, 13), bool], Tensor[(13, 11, 2), float32], Tensor[(14, 9, 2), int32], Tensor[(252), int32], Tensor[(12, 2, 13), bool]) {
    %604 = @func_4630() /* ty=(Tensor[(12, 2, 13), bool],) */;
    %605 = cast(meta[relay.Constant][32] /* ty=Tensor[(13, 11, 2), float64] */, dtype="float64") /* ty=Tensor[(13, 11, 2), float64] */;
    %606 = erf(%605) /* ty=Tensor[(13, 11, 2), float64] */;
    %607 = cast(meta[relay.Constant][32] /* ty=Tensor[(13, 11, 2), float64] */, dtype="float32") /* ty=Tensor[(13, 11, 2), float32] */;
    %608 = shape_of(%606, dtype="int32") /* ty=Tensor[(3), int32] */;
    %609 = cast(%606, dtype="float32") /* ty=Tensor[(13, 11, 2), float32] */;
    %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %611 = %604.0;
    %612 = cast(%611, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
    %613 = cast(meta[relay.Constant][33] /* ty=Tensor[(252), int32] */, dtype="int32") /* ty=Tensor[(252), int32] */;
    %614 = reshape(%612, newshape=[12, 2, 13]) /* ty=Tensor[(12, 2, 13), bool] */;
    %615 = reshape(%613, newshape=[252]) /* ty=Tensor[(252), int32] */;
    %616 = @func_5782(%614, %615) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int32], Tensor[(252), int32]) */;
    %617 = floor_divide(%609, %610) /* ty=Tensor[(13, 11, 2), float32] */;
    %618 = %616.1;
    %619 = @func_4514() /* ty=Tensor[(12, 2, 13), bool] */;
    (%611, %617, %618, meta[relay.Constant][33] /* ty=Tensor[(252), int32] */, %619)
  };
  %620() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(13, 11, 2), float32], Tensor[(14, 9, 2), int32], Tensor[(252), int32], Tensor[(12, 2, 13), bool]) */
}

def @func_6966() -> (Tensor[(12, 2, 13), float64],) {
  %622 = fn () -> (Tensor[(12, 2, 13), float64],) {
    %621 = @func_5210() /* ty=Tensor[(12, 2, 13), float64] */;
    (%621,)
  };
  %622() /* ty=(Tensor[(12, 2, 13), float64],) */
}

def @func_8099(%var_8068: Tensor[(14, 7, 4), float64], %var_8093: Tensor[(14, 7, 4), bool]) -> (Tensor[(12, 2, 13), float32], Tensor[(6, 14, 16), float32], Tensor[(1344), float32], Tensor[(14, 7, 4), bool]) {
  %623 = @func_7973() /* ty=(Tensor[(12, 2, 13), float64], Tensor[(12, 2, 13), float32]) */;
  %624 = cast(meta[relay.Constant][34] /* ty=Tensor[(1344), float32] */, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %625 = reshape(%624, newshape=[6, 14, 16]) /* ty=Tensor[(6, 14, 16), float32] */;
  %626 = @func_4739(%625) /* ty=(Tensor[(6, 14, 16), float32],) */;
  %627 = cast(%var_8068, dtype="float64") /* ty=Tensor[(14, 7, 4), float64] */;
  %628 = sin(%627) /* ty=Tensor[(14, 7, 4), float64] */;
  %629 = cast(%var_8068, dtype="bool") /* ty=Tensor[(14, 7, 4), bool] */;
  %630 = shape_of(%628, dtype="int32") /* ty=Tensor[(3), int32] */;
  %631 = cast(%628, dtype="bool") /* ty=Tensor[(14, 7, 4), bool] */;
  %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %633 = logical_or(%631, %632) /* ty=Tensor[(14, 7, 4), bool] */;
  %634 = cast(%var_8093, dtype="bool") /* ty=Tensor[(14, 7, 4), bool] */;
  %635 = shape_of(%633, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%633, dtype="bool") /* ty=Tensor[(14, 7, 4), bool] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %638 = %623.1;
  %639 = %626.0;
  %640 = less(%636, %637) /* ty=Tensor[(14, 7, 4), bool] */;
  (%638, %639, meta[relay.Constant][34] /* ty=Tensor[(1344), float32] */, %640)
}

def @func_5239(%var_5231: Tensor[(2, 16, 4), float64]) -> Tensor[(2, 16, 4), float32] {
  %641 = cast(-5.89583f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %642 = cast(%var_5231, dtype="float64") /* ty=Tensor[(2, 16, 4), float64] */;
  %643 = maximum(%641, %642) /* ty=Tensor[(2, 16, 4), float64] */;
  %644 = cast(%643, dtype="float32") /* ty=Tensor[(2, 16, 4), float32] */;
  %645 = shape_of(%var_5231, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(%var_5231, dtype="float32") /* ty=Tensor[(2, 16, 4), float32] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  multiply(%646, %647) /* ty=Tensor[(2, 16, 4), float32] */
}

def @func_6742(%var_6740: Tensor[(12, 2, 13), bool]) -> Tensor[(12, 2, 13), float64] {
  @func_6739(%var_6740) /* ty=Tensor[(12, 2, 13), float64] */
}

def @func_7302() -> Tensor[(12, 2, 13), float32] {
  %649 = fn () -> Tensor[(12, 2, 13), float32] {
    %648 = @func_6230() /* ty=(Tensor[(12, 2, 13), float32],) */;
    %648.0
  };
  %649() /* ty=Tensor[(12, 2, 13), float32] */
}

def @func_5863() -> (Tensor[(14, 9, 2), int32],) {
  @func_5861() /* ty=(Tensor[(14, 9, 2), int32],) */
}

def @func_5212() -> Tensor[(12, 2, 13), float64] {
  @func_5210() /* ty=Tensor[(12, 2, 13), float64] */
}

def @func_7260() -> (Tensor[(12, 2, 13), bool],) {
  %652 = fn () -> (Tensor[(12, 2, 13), bool],) {
    %650 = @func_3278() /* ty=(Tensor[(12, 2, 13), bool],) */;
    %651 = %650.0;
    (%651,)
  };
  %652() /* ty=(Tensor[(12, 2, 13), bool],) */
}

def @func_5456() -> (Tensor[(12, 2, 13), bool],) {
  %655 = fn () -> (Tensor[(12, 2, 13), bool],) {
    %653 = @func_3278() /* ty=(Tensor[(12, 2, 13), bool],) */;
    %654 = %653.0;
    (%654,)
  };
  %655() /* ty=(Tensor[(12, 2, 13), bool],) */
}

def @func_3637() -> Tensor[(12, 2, 13), bool] {
  @func_3507() /* ty=Tensor[(12, 2, 13), bool] */
}

def @func_3320(%var_3318: Tensor[(182), float64]) -> (Tensor[(12, 2, 13), bool], Tensor[(182), float64], Tensor[(81), int8], Tensor[(182), float64], Tensor[(16, 8, 4), bool], uint32, Tensor[(512), uint32]) {
  @func_3317(%var_3318) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(182), float64], Tensor[(81), int8], Tensor[(182), float64], Tensor[(16, 8, 4), bool], uint32, Tensor[(512), uint32]) */
}

def @func_7251() -> (Tensor[(12, 2, 13), float64], Tensor[(12, 2, 13), bool], Tensor[(60), float32], Tensor[(252), int32], Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), int8], Tensor[(1080), float32]) {
  @func_7249() /* ty=(Tensor[(12, 2, 13), float64], Tensor[(12, 2, 13), bool], Tensor[(60), float32], Tensor[(252), int32], Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), int8], Tensor[(1080), float32]) */
}

def @func_7196() -> (Tensor[(12, 2, 13), bool],) {
  @func_7194() /* ty=(Tensor[(12, 2, 13), bool],) */
}

def @func_4588() -> (Tensor[(12, 2, 13), bool],) {
  %657 = fn () -> (Tensor[(12, 2, 13), bool],) {
    %656 = @func_3965() /* ty=Tensor[(12, 2, 13), bool] */;
    (%656,)
  };
  %657() /* ty=(Tensor[(12, 2, 13), bool],) */
}

def @func_5021() -> Tensor[(12, 2, 13), float32] {
  @func_5019() /* ty=Tensor[(12, 2, 13), float32] */
}

def @func_6458() -> (Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int32], Tensor[(252), int32], Tensor[(12, 2, 13), int16]) {
  @func_6456() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int32], Tensor[(252), int32], Tensor[(12, 2, 13), int16]) */
}

def @func_5563(%var_5561: Tensor[(12, 7, 2), float32], %var_5562: Tensor[(12, 7, 2), float32]) -> Tensor[(12, 7, 2), float32] {
  @func_5559(%var_5561, %var_5562) /* ty=Tensor[(12, 7, 2), float32] */
}

def @func_6433() -> (Tensor[(13, 16, 15), bool],) {
  @func_6431() /* ty=(Tensor[(13, 16, 15), bool],) */
}

def @func_43(%var_42: Tensor[(14, 9, 2), int32]) -> (Tensor[(14, 9, 2), int32], Tensor[(14, 9, 2), float32]) {
  %665 = fn (%var_24: Tensor[(14, 9, 2), int32]) -> (Tensor[(14, 9, 2), int32], Tensor[(14, 9, 2), float32]) {
    %658 = cast(meta[relay.Constant][35] /* ty=Tensor[(14, 9, 2), int32] */, dtype="int32") /* ty=Tensor[(14, 9, 2), int32] */;
    %659 = shape_of(%var_24, dtype="int32") /* ty=Tensor[(3), int32] */;
    %660 = cast(%var_24, dtype="int32") /* ty=Tensor[(14, 9, 2), int32] */;
    %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %662 = cast(meta[relay.Constant][35] /* ty=Tensor[(14, 9, 2), int32] */, dtype="float32") /* ty=Tensor[(14, 9, 2), float32] */;
    %663 = subtract(%660, %661) /* ty=Tensor[(14, 9, 2), int32] */;
    %664 = atanh(%662) /* ty=Tensor[(14, 9, 2), float32] */;
    (%663, %664)
  };
  %665(%var_42) /* ty=(Tensor[(14, 9, 2), int32], Tensor[(14, 9, 2), float32]) */
}

def @func_5518(%var_5478: Tensor[(60), float32], %var_5515: Tensor[(2080), float64]) -> (Tensor[(12, 2, 13), float32], Tensor[(1, 252), int32], Tensor[(60), float32], Tensor[(252), int32], Tensor[(12, 2, 13), float32], Tensor[(10, 13, 16), float64], Tensor[(2112), float64], Tensor[(2080), float64]) {
  %666 = @func_4270() /* ty=(Tensor[(12, 2, 13), float32],) */;
  %667 = cast(%var_5478, dtype="float32") /* ty=Tensor[(60), float32] */;
  %668 = cast(meta[relay.Constant][36] /* ty=Tensor[(252), int32] */, dtype="int32") /* ty=Tensor[(252), int32] */;
  %669 = cast(%var_5478, dtype="bool") /* ty=Tensor[(60), bool] */;
  %670 = reshape(%667, newshape=[2, 15, 2]) /* ty=Tensor[(2, 15, 2), float32] */;
  %671 = reshape(%668, newshape=[1, 252]) /* ty=Tensor[(1, 252), int32] */;
  %672 = reshape(%669, newshape=[2, 15, 2]) /* ty=Tensor[(2, 15, 2), bool] */;
  %673 = @func_177(%670, %671, %672) /* ty=(Tensor[(14, 9, 2), float32], Tensor[(1, 252), int32], Tensor[(2, 15, 2), bool]) */;
  %674 = @func_4514() /* ty=Tensor[(12, 2, 13), bool] */;
  %675 = cast(%674, dtype="float32") /* ty=Tensor[(12, 2, 13), float32] */;
  %676 = cast(meta[relay.Constant][37] /* ty=Tensor[(2112), float64] */, dtype="float64") /* ty=Tensor[(2112), float64] */;
  %677 = cast(%var_5515, dtype="float64") /* ty=Tensor[(2080), float64] */;
  %678 = reshape(%676, newshape=[12, 11, 16]) /* ty=Tensor[(12, 11, 16), float64] */;
  %679 = reshape(%677, newshape=[104, 20]) /* ty=Tensor[(104, 20), float64] */;
  %680 = @func_1197(%678, %679) /* ty=(Tensor[(10, 13, 16), float64], Tensor[(104, 20), float64], Tensor[(12, 11, 16), float32]) */;
  %681 = %666.0;
  %682 = %673.1;
  %683 = sinh(%675) /* ty=Tensor[(12, 2, 13), float32] */;
  %684 = %680.0;
  (%681, %682, %var_5478, meta[relay.Constant][36] /* ty=Tensor[(252), int32] */, %683, %684, meta[relay.Constant][37] /* ty=Tensor[(2112), float64] */, %var_5515)
}

def @func_2286(%var_2284: Tensor[(14, 10, 13), float32]) -> Tensor[(14, 10, 13), float32] {
  @func_2283(%var_2284) /* ty=Tensor[(14, 10, 13), float32] */
}

def @func_4295() -> Tensor[(16, 4, 16), float64] {
  @func_4293() /* ty=Tensor[(16, 4, 16), float64] */
}

def @func_5992(%var_5991: Tensor[(1, 10, 14), int8]) -> (Tensor[(11, 10, 14), int8],) {
  %688 = fn (%var_5984: Tensor[(1, 10, 14), int8]) -> (Tensor[(11, 10, 14), int8],) {
    %685 = cast(%var_5984, dtype="int8") /* ty=Tensor[(1, 10, 14), int8] */;
    %686 = cast(meta[relay.Constant][38] /* ty=Tensor[(11, 10, 14), int8] */, dtype="int8") /* ty=Tensor[(11, 10, 14), int8] */;
    %687 = bitwise_xor(%685, %686) /* ty=Tensor[(11, 10, 14), int8] */;
    (%687,)
  };
  %688(%var_5991) /* ty=(Tensor[(11, 10, 14), int8],) */
}

def @func_7142() -> Tensor[(13, 16, 15), bool] {
  %690 = fn () -> Tensor[(13, 16, 15), bool] {
    %689 = @func_6431() /* ty=(Tensor[(13, 16, 15), bool],) */;
    %689.0
  };
  %690() /* ty=Tensor[(13, 16, 15), bool] */
}

def @func_7903() -> (Tensor[(13, 16, 15), bool], Tensor[(12, 2, 13), int64], Tensor[(6, 52), bool], Tensor[(12, 2, 13), bool]) {
  %691 = cast(meta[relay.Constant][39] /* ty=Tensor[(6, 52), bool] */, dtype="bool") /* ty=Tensor[(6, 52), bool] */;
  %692 = reshape(%691, newshape=[12, 2, 13]) /* ty=Tensor[(12, 2, 13), bool] */;
  %693 = @func_3424(%692) /* ty=(Tensor[(12, 2, 13), int64],) */;
  %694 = @func_5004() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) */;
  %695 = @func_7141() /* ty=Tensor[(13, 16, 15), bool] */;
  %696 = %693.0;
  %697 = %694.0;
  (%695, %696, meta[relay.Constant][39] /* ty=Tensor[(6, 52), bool] */, %697)
}

def @func_8039() -> (Tensor[(12, 2, 13), bool],) {
  @func_8037() /* ty=(Tensor[(12, 2, 13), bool],) */
}

def @func_6329(%var_6314: Tensor[(120), int16]) -> (Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), int8], Tensor[(120), int16], Tensor[(5, 6, 4), float64]) {
  %698 = @func_3857() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) */;
  %699 = %698.0;
  %700 = cast(%699, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
  %701 = reshape(%700, newshape=[12, 2, 13]) /* ty=Tensor[(12, 2, 13), bool] */;
  %702 = cast(%var_6314, dtype="int16") /* ty=Tensor[(120), int16] */;
  %703 = reshape(%702, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), int16] */;
  %704 = @func_3100(%703) /* ty=Tensor[(5, 6, 4), int16] */;
  %705 = cast(%704, dtype="float64") /* ty=Tensor[(5, 6, 4), float64] */;
  %706 = @func_3654(%701) /* ty=Tensor[(12, 2, 13), int8] */;
  %707 = asin(%705) /* ty=Tensor[(5, 6, 4), float64] */;
  (%699, %706, %var_6314, %707)
}

def @func_7975() -> (Tensor[(12, 2, 13), float64], Tensor[(12, 2, 13), float32]) {
  @func_7973() /* ty=(Tensor[(12, 2, 13), float64], Tensor[(12, 2, 13), float32]) */
}

def @func_7194() -> (Tensor[(12, 2, 13), bool],) {
  %708 = @func_6341() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %709 = %708.0;
  (%709,)
}

def @func_7756(%var_7755: Tensor[(2112), float64]) -> (Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool], Tensor[(13, 8, 6), float32], Tensor[(8, 78), float64], Tensor[(12, 2, 13), float64], Tensor[(2080), float64], Tensor[(2112), float64], Tensor[(2080), float64]) {
  %729 = fn (%var_7747: Tensor[(2112), float64]) -> (Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool], Tensor[(13, 8, 6), float32], Tensor[(8, 78), float64], Tensor[(12, 2, 13), float64], Tensor[(2080), float64], Tensor[(2112), float64], Tensor[(2080), float64]) {
    %710 = @func_3291() /* ty=(Tensor[(12, 2, 13), bool],) */;
    %711 = @func_4587() /* ty=(Tensor[(12, 2, 13), bool],) */;
    %712 = cast(meta[relay.Constant][40] /* ty=Tensor[(8, 78), float64] */, dtype="float64") /* ty=Tensor[(8, 78), float64] */;
    %713 = reshape(%712, newshape=[13, 8, 6]) /* ty=Tensor[(13, 8, 6), float64] */;
    %714 = @func_3612(%713) /* ty=(Tensor[(13, 8, 6), float32], Tensor[(12, 2, 13), bool]) */;
    %715 = %711.0;
    %716 = cast(%715, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
    %717 = reshape(%716, newshape=[12, 2, 13]) /* ty=Tensor[(12, 2, 13), bool] */;
    %718 = cast(%var_7747, dtype="float64") /* ty=Tensor[(2112), float64] */;
    %719 = cast(meta[relay.Constant][41] /* ty=Tensor[(2080), float64] */, dtype="float64") /* ty=Tensor[(2080), float64] */;
    %720 = cast(%var_7747, dtype="float32") /* ty=Tensor[(2112), float32] */;
    %721 = reshape(%718, newshape=[132, 16]) /* ty=Tensor[(132, 16), float64] */;
    %722 = reshape(%719, newshape=[2080]) /* ty=Tensor[(2080), float64] */;
    %723 = reshape(%720, newshape=[132, 16]) /* ty=Tensor[(132, 16), float32] */;
    %724 = @func_3390(%721, %722, %723) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(2080), float64], Tensor[(104, 20), int32], Tensor[(132, 16), float32]) */;
    %725 = %710.0;
    %726 = %714.0;
    %727 = @func_6739(%717) /* ty=Tensor[(12, 2, 13), float64] */;
    %728 = %724.1;
    (%725, %715, %726, meta[relay.Constant][40] /* ty=Tensor[(8, 78), float64] */, %727, %728, %var_7747, meta[relay.Constant][41] /* ty=Tensor[(2080), float64] */)
  };
  %729(%var_7755) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool], Tensor[(13, 8, 6), float32], Tensor[(8, 78), float64], Tensor[(12, 2, 13), float64], Tensor[(2080), float64], Tensor[(2112), float64], Tensor[(2080), float64]) */
}

def @func_7803() -> (Tensor[(12, 2, 13), float64],) {
  @func_7801() /* ty=(Tensor[(12, 2, 13), float64],) */
}

def @func_8037() -> (Tensor[(12, 2, 13), bool],) {
  %730 = @func_4587() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %731 = %730.0;
  (%731,)
}

def @func_8321() -> (Tensor[(13, 16, 15), bool],) {
  @func_8319() /* ty=(Tensor[(13, 16, 15), bool],) */
}

def @func_8203() -> (Tensor[(12, 2, 13), float32], Tensor[(12, 2, 13), bool]) {
  @func_8201() /* ty=(Tensor[(12, 2, 13), float32], Tensor[(12, 2, 13), bool]) */
}

def @func_4082() -> (Tensor[(1820), bool], Tensor[(12, 2, 13), float32]) {
  @func_4080() /* ty=(Tensor[(1820), bool], Tensor[(12, 2, 13), float32]) */
}

def @func_4272() -> (Tensor[(12, 2, 13), float32],) {
  @func_4270() /* ty=(Tensor[(12, 2, 13), float32],) */
}

def @func_1762(%var_1752: Tensor[(2080), float64]) -> (Tensor[(2, 15, 5), float64], Tensor[(10, 13, 16), float64], Tensor[(2080), float64]) {
  %732 = cast(meta[relay.Constant][42] /* ty=Tensor[(2, 15, 5), float64] */, dtype="float64") /* ty=Tensor[(2, 15, 5), float64] */;
  %733 = cast(%var_1752, dtype="float64") /* ty=Tensor[(2080), float64] */;
  %734 = reshape(%733, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), float64] */;
  %735 = sqrt(%732) /* ty=Tensor[(2, 15, 5), float64] */;
  %736 = @func_770(%734) /* ty=Tensor[(10, 13, 16), float64] */;
  (%735, %736, %var_1752)
}

def @func_6332(%var_6330: Tensor[(120), int16]) -> (Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), int8], Tensor[(120), int16], Tensor[(5, 6, 4), float64]) {
  @func_6329(%var_6330) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), int8], Tensor[(120), int16], Tensor[(5, 6, 4), float64]) */
}

def @func_2655(%var_2635: Tensor[(12, 4, 7), float32]) -> (Tensor[(12, 4, 7), float32],) {
  %737 = cast(%var_2635, dtype="float32") /* ty=Tensor[(12, 4, 7), float32] */;
  %738 = erf(%737) /* ty=Tensor[(12, 4, 7), float32] */;
  %739 = cast(%738, dtype="float32") /* ty=Tensor[(12, 4, 7), float32] */;
  %740 = sqrt(%739) /* ty=Tensor[(12, 4, 7), float32] */;
  (%740,)
}

def @func_3424(%var_3419: Tensor[(12, 2, 13), bool]) -> (Tensor[(12, 2, 13), int64],) {
  %741 = @func_3278() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %742 = %741.0;
  %743 = cast(%var_3419, dtype="int64") /* ty=Tensor[(12, 2, 13), int64] */;
  %744 = shape_of(%742, dtype="int32") /* ty=Tensor[(3), int32] */;
  %745 = cast(%742, dtype="int64") /* ty=Tensor[(12, 2, 13), int64] */;
  %746 = dyn.reshape(%743, %744, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %747 = bitwise_and(%745, %746) /* ty=Tensor[(12, 2, 13), int64] */;
  (%747,)
}

def @func_4689(%var_4686: Tensor[(14, 4, 2), int8], %var_4687: Tensor[(14, 4, 2), int8], %var_4688: Tensor[(240), float64]) -> (Tensor[(14, 4, 2), int8], Tensor[(8, 10, 3), bool], Tensor[(240), float64]) {
  @func_4684(%var_4686, %var_4687, %var_4688) /* ty=(Tensor[(14, 4, 2), int8], Tensor[(8, 10, 3), bool], Tensor[(240), float64]) */
}

def @func_7052(%var_7049: Tensor[(2080), float64], %var_7050: Tensor[(182, 1), float64], %var_7051: Tensor[(182, 14), float64]) -> (Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), float64], Tensor[(1, 2080), float64], Tensor[(2, 1056), float64], Tensor[(2080), float64], Tensor[(182, 14), float64]) {
  @func_7047(%var_7049, %var_7050, %var_7051) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), float64], Tensor[(1, 2080), float64], Tensor[(2, 1056), float64], Tensor[(2080), float64], Tensor[(182, 14), float64]) */
}

def @func_6526() -> (Tensor[(12, 2, 13), bool],) {
  %748 = @func_4127() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %749 = %748.0;
  (%749,)
}

def @func_1524(%var_1523: Tensor[(8, 10, 3), float64]) -> Tensor[(8, 10, 3), bool] {
  %754 = fn (%var_1516: Tensor[(8, 10, 3), float64]) -> Tensor[(8, 10, 3), bool] {
    %750 = cast(%var_1516, dtype="bool") /* ty=Tensor[(8, 10, 3), bool] */;
    %751 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(8, 10, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %752 = cast(meta[relay.Constant][43] /* ty=Tensor[(8, 10, 3), float64] */, dtype="bool") /* ty=Tensor[(8, 10, 3), bool] */;
    %753 = dyn.reshape(%750, %751, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater_equal(%752, %753) /* ty=Tensor[(8, 10, 3), bool] */
  };
  %754(%var_1523) /* ty=Tensor[(8, 10, 3), bool] */
}

def @func_1200(%var_1198: Tensor[(12, 11, 16), float64], %var_1199: Tensor[(104, 20), float64]) -> (Tensor[(10, 13, 16), float64], Tensor[(104, 20), float64], Tensor[(12, 11, 16), float32]) {
  %762 = fn (%var_1182: Tensor[(12, 11, 16), float64], %var_1186: Tensor[(104, 20), float64]) -> (Tensor[(10, 13, 16), float64], Tensor[(104, 20), float64], Tensor[(12, 11, 16), float32]) {
    %755 = cast(%var_1186, dtype="float64") /* ty=Tensor[(104, 20), float64] */;
    %756 = reshape(%755, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), float64] */;
    %757 = cast(%var_1182, dtype="float64") /* ty=Tensor[(12, 11, 16), float64] */;
    %758 = log2(%757) /* ty=Tensor[(12, 11, 16), float64] */;
    %759 = cast(%758, dtype="float32") /* ty=Tensor[(12, 11, 16), float32] */;
    %760 = @func_770(%756) /* ty=Tensor[(10, 13, 16), float64] */;
    %761 = sigmoid(%759) /* ty=Tensor[(12, 11, 16), float32] */;
    (%760, %var_1186, %761)
  };
  %762(%var_1198, %var_1199) /* ty=(Tensor[(10, 13, 16), float64], Tensor[(104, 20), float64], Tensor[(12, 11, 16), float32]) */
}

def @func_3654(%var_3649: Tensor[(12, 2, 13), bool]) -> Tensor[(12, 2, 13), int8] {
  %763 = @func_3507() /* ty=Tensor[(12, 2, 13), bool] */;
  %764 = cast(%var_3649, dtype="int8") /* ty=Tensor[(12, 2, 13), int8] */;
  %765 = shape_of(%763, dtype="int32") /* ty=Tensor[(3), int32] */;
  %766 = cast(%763, dtype="int8") /* ty=Tensor[(12, 2, 13), int8] */;
  %767 = dyn.reshape(%764, %765, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  multiply(%766, %767) /* ty=Tensor[(12, 2, 13), int8] */
}

def @func_4035() -> (Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) {
  @func_4033() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) */
}

def @func_3675() -> (Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int32], Tensor[(252), int32]) {
  %768 = cast(meta[relay.Constant][44] /* ty=Tensor[(252), int32] */, dtype="int32") /* ty=Tensor[(252), int32] */;
  %769 = reshape(%768, newshape=[14, 9, 2]) /* ty=Tensor[(14, 9, 2), int32] */;
  %770 = @func_41(%769) /* ty=(Tensor[(14, 9, 2), int32], Tensor[(14, 9, 2), float32]) */;
  %771 = @func_3125() /* ty=Tensor[(12, 2, 13), bool] */;
  %772 = %770.0;
  (%771, %772, meta[relay.Constant][44] /* ty=Tensor[(252), int32] */)
}

def @func_6036(%var_6027: Tensor[(60), float32], %var_6030: Tensor[(12, 2, 13), bool]) -> (Tensor[(252), int32], Tensor[(60), float32], Tensor[(252), int32], Tensor[(12, 2, 13), bool]) {
  %773 = cast(%var_6027, dtype="float32") /* ty=Tensor[(60), float32] */;
  %774 = cast(meta[relay.Constant][45] /* ty=Tensor[(252), int32] */, dtype="int32") /* ty=Tensor[(252), int32] */;
  %775 = reshape(%773, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %776 = reshape(%774, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %777 = @func_4462(%775, %776) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), float32], Tensor[(60), float32], Tensor[(1080), int16], Tensor[(60), float32], Tensor[(252), int32]) */;
  %778 = @func_4033() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) */;
  %779 = %778.0;
  %780 = cast(%var_6030, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
  %781 = shape_of(%779, dtype="int32") /* ty=Tensor[(3), int32] */;
  %782 = cast(%779, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
  %783 = dyn.reshape(%780, %781, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %784 = %777.5;
  %785 = greater(%782, %783) /* ty=Tensor[(12, 2, 13), bool] */;
  (%784, %var_6027, meta[relay.Constant][45] /* ty=Tensor[(252), int32] */, %785)
}

def @func_8319() -> (Tensor[(13, 16, 15), bool],) {
  %786 = @func_7141() /* ty=Tensor[(13, 16, 15), bool] */;
  (%786,)
}

def @func_5712(%var_5679: Tensor[(81), int8]) -> (Tensor[(12, 2, 13), float32], Tensor[(12, 2, 13), bool], Tensor[(10, 13, 16), float64], Tensor[(81), int8], Tensor[(182), float64], Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) {
  %787 = @func_3857() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) */;
  %788 = %787.1;
  %789 = cast(%788, dtype="float32") /* ty=Tensor[(12, 2, 13), float32] */;
  %790 = @func_4587() /* ty=(Tensor[(12, 2, 13), bool],) */;
  %791 = cast(%var_5679, dtype="int8") /* ty=Tensor[(81), int8] */;
  %792 = cast(meta[relay.Constant][46] /* ty=Tensor[(182), float64] */, dtype="float64") /* ty=Tensor[(182), float64] */;
  %793 = reshape(%791, newshape=[9, 1, 9]) /* ty=Tensor[(9, 1, 9), int8] */;
  %794 = reshape(%792, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %795 = @func_3249(%793, %794) /* ty=(Tensor[(9, 5, 9), int8], Tensor[(9, 5, 9), bool], Tensor[(10, 13, 16), float64], Tensor[(2080), float64], Tensor[(2080), float64], Tensor[(182), float64], Tensor[(10, 13, 16), float64]) */;
  %796 = sigmoid(%789) /* ty=Tensor[(12, 2, 13), float32] */;
  %797 = %790.0;
  %798 = %795.6;
  %799 = @func_4196() /* ty=Tensor[(12, 2, 13), bool] */;
  %800 = @func_3507() /* ty=Tensor[(12, 2, 13), bool] */;
  (%796, %797, %798, %var_5679, meta[relay.Constant][46] /* ty=Tensor[(182), float64] */, %799, %800)
}

def @func_5785(%var_5783: Tensor[(12, 2, 13), bool], %var_5784: Tensor[(252), int32]) -> (Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int32], Tensor[(252), int32]) {
  %811 = fn (%var_5756: Tensor[(12, 2, 13), bool], %var_5775: Tensor[(252), int32]) -> (Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int32], Tensor[(252), int32]) {
    %801 = @func_3637() /* ty=Tensor[(12, 2, 13), bool] */;
    %802 = cast(%var_5756, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
    %803 = shape_of(%801, dtype="int32") /* ty=Tensor[(3), int32] */;
    %804 = cast(%801, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
    %805 = dyn.reshape(%802, %803, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %806 = cast(%var_5775, dtype="int32") /* ty=Tensor[(252), int32] */;
    %807 = reshape(%806, newshape=[14, 9, 2]) /* ty=Tensor[(14, 9, 2), int32] */;
    %808 = @func_41(%807) /* ty=(Tensor[(14, 9, 2), int32], Tensor[(14, 9, 2), float32]) */;
    %809 = logical_or(%804, %805) /* ty=Tensor[(12, 2, 13), bool] */;
    %810 = %808.0;
    (%809, %810, %var_5775)
  };
  %811(%var_5783, %var_5784) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int32], Tensor[(252), int32]) */
}

def @func_5242(%var_5240: Tensor[(2, 16, 4), float64]) -> Tensor[(2, 16, 4), float32] {
  @func_5239(%var_5240) /* ty=Tensor[(2, 16, 4), float32] */
}

def @func_4179(%var_4144: Tensor[(2080), float64], %var_4160: Tensor[(1820), float32]) -> (Tensor[(12, 2, 13), bool], Tensor[(10, 13, 16), float64], Tensor[(2080), float64], Tensor[(12, 2, 13), bool], Tensor[(14, 10, 13), float32], Tensor[(1820), float32], Tensor[(12, 2, 13), bool]) {
  %812 = cast(%var_4144, dtype="float64") /* ty=Tensor[(2080), float64] */;
  %813 = reshape(%812, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), float64] */;
  %814 = @func_3857() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) */;
  %815 = cast(%var_4160, dtype="float32") /* ty=Tensor[(1820), float32] */;
  %816 = reshape(%815, newshape=[14, 10, 13]) /* ty=Tensor[(14, 10, 13), float32] */;
  %817 = @func_3637() /* ty=Tensor[(12, 2, 13), bool] */;
  %818 = @func_770(%813) /* ty=Tensor[(10, 13, 16), float64] */;
  %819 = %814.0;
  %820 = @func_2283(%816) /* ty=Tensor[(14, 10, 13), float32] */;
  %821 = @func_3125() /* ty=Tensor[(12, 2, 13), bool] */;
  (%817, %818, %var_4144, %819, %820, %var_4160, %821)
}

def @func_2598(%var_2593: uint32, %var_2594: Tensor[(16, 8, 4), uint32]) -> (Tensor[(16, 8, 4), bool],) {
  %822 = cast(%var_2593, dtype="bool") /* ty=bool */;
  %823 = cast(%var_2594, dtype="bool") /* ty=Tensor[(16, 8, 4), bool] */;
  %824 = equal(%822, %823) /* ty=Tensor[(16, 8, 4), bool] */;
  (%824,)
}

def @func_6268() -> (Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) {
  %830 = fn () -> (Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) {
    %825 = @func_3507() /* ty=Tensor[(12, 2, 13), bool] */;
    %826 = cast(%825, dtype="bool") /* ty=Tensor[(12, 2, 13), bool] */;
    %827 = reshape(%826, newshape=[12, 2, 13]) /* ty=Tensor[(12, 2, 13), bool] */;
    %828 = @func_5630(%827) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), float64], Tensor[(12, 2, 13), float32]) */;
    %829 = %828.0;
    (%825, %829)
  };
  %830() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) */
}

def @func_4788(%var_4776: Tensor[(12, 16, 1), float32]) -> Tensor[(12, 16, 1), float32] {
  %831 = cast(%var_4776, dtype="float32") /* ty=Tensor[(12, 16, 1), float32] */;
  sin(%831) /* ty=Tensor[(12, 16, 1), float32] */
}

def @func_3252(%var_3250: Tensor[(9, 1, 9), int8], %var_3251: Tensor[(182), float64]) -> (Tensor[(9, 5, 9), int8], Tensor[(9, 5, 9), bool], Tensor[(10, 13, 16), float64], Tensor[(2080), float64], Tensor[(2080), float64], Tensor[(182), float64], Tensor[(10, 13, 16), float64]) {
  %853 = fn (%var_3210: Tensor[(9, 1, 9), int8], %var_3229: Tensor[(182), float64]) -> (Tensor[(9, 5, 9), int8], Tensor[(9, 5, 9), bool], Tensor[(10, 13, 16), float64], Tensor[(2080), float64], Tensor[(2080), float64], Tensor[(182), float64], Tensor[(10, 13, 16), float64]) {
    %832 = cast(%var_3210, dtype="int8") /* ty=Tensor[(9, 1, 9), int8] */;
    %833 = cast(meta[relay.Constant][47] /* ty=Tensor[(9, 5, 9), int8] */, dtype="int8") /* ty=Tensor[(9, 5, 9), int8] */;
    %834 = cast(meta[relay.Constant][47] /* ty=Tensor[(9, 5, 9), int8] */, dtype="bool") /* ty=Tensor[(9, 5, 9), bool] */;
    %835 = cast(%var_3210, dtype="bool") /* ty=Tensor[(9, 1, 9), bool] */;
    %836 = cast(meta[relay.Constant][48] /* ty=Tensor[(2080), float64] */, dtype="float64") /* ty=Tensor[(2080), float64] */;
    %837 = reshape(%836, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), float64] */;
    %838 = cast(%var_3229, dtype="float64") /* ty=Tensor[(182), float64] */;
    %839 = @func_770(%837) /* ty=Tensor[(10, 13, 16), float64] */;
    %840 = cast(%839, dtype="float64") /* ty=Tensor[(10, 13, 16), float64] */;
    %841 = reshape(%838, newshape=[1, 14, 13]) /* ty=Tensor[(1, 14, 13), float64] */;
    %842 = reshape(%840, newshape=[2080]) /* ty=Tensor[(2080), float64] */;
    %843 = @func_932(%841, %842) /* ty=(Tensor[(?, 14, 13), bool], Tensor[(10, 13, 16), float64], Tensor[(2080), float64]) */;
    %844 = cast(%var_3229, dtype="float64") /* ty=Tensor[(182), float64] */;
    %845 = %843.2;
    %846 = cast(%845, dtype="float64") /* ty=Tensor[(2080), float64] */;
    %847 = reshape(%844, newshape=[1, 14, 13]) /* ty=Tensor[(1, 14, 13), float64] */;
    %848 = reshape(%846, newshape=[2080]) /* ty=Tensor[(2080), float64] */;
    %849 = @func_932(%847, %848) /* ty=(Tensor[(?, 14, 13), bool], Tensor[(10, 13, 16), float64], Tensor[(2080), float64]) */;
    %850 = right_shift(%832, %833) /* ty=Tensor[(9, 5, 9), int8] */;
    %851 = greater(%834, %835) /* ty=Tensor[(9, 5, 9), bool] */;
    %852 = %849.1;
    (%850, %851, %839, meta[relay.Constant][48] /* ty=Tensor[(2080), float64] */, %845, %var_3229, %852)
  };
  %853(%var_3250, %var_3251) /* ty=(Tensor[(9, 5, 9), int8], Tensor[(9, 5, 9), bool], Tensor[(10, 13, 16), float64], Tensor[(2080), float64], Tensor[(2080), float64], Tensor[(182), float64], Tensor[(10, 13, 16), float64]) */
}

def @func_5633(%var_5631: Tensor[(12, 2, 13), bool]) -> (Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), float64], Tensor[(12, 2, 13), float32]) {
  @func_5630(%var_5631) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), float64], Tensor[(12, 2, 13), float32]) */
}

def @func_6807() -> (Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) {
  %858 = fn () -> (Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) {
    %854 = @func_3857() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) */;
    %855 = @func_3291() /* ty=(Tensor[(12, 2, 13), bool],) */;
    %856 = %854.1;
    %857 = %855.0;
    (%856, %857)
  };
  %858() /* ty=(Tensor[(12, 2, 13), bool], Tensor[(12, 2, 13), bool]) */
}

def @func_2283(%var_2266: Tensor[(14, 10, 13), float32]) -> Tensor[(14, 10, 13), float32] {
  %859 = cast(%var_2266, dtype="float32") /* ty=Tensor[(14, 10, 13), float32] */;
  %860 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(14, 10, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %861 = cast(meta[relay.Constant][49] /* ty=Tensor[(14, 10, 13), float32] */, dtype="float32") /* ty=Tensor[(14, 10, 13), float32] */;
  %862 = dyn.reshape(%859, %860, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%861, %862) /* ty=Tensor[(14, 10, 13), float32] */
}

def @func_8156() -> (Tensor[(12, 2, 13), bool],) {
  %864 = fn () -> (Tensor[(12, 2, 13), bool],) {
    %863 = @func_3507() /* ty=Tensor[(12, 2, 13), bool] */;
    (%863,)
  };
  %864() /* ty=(Tensor[(12, 2, 13), bool],) */
}

def @func_5522(%var_5520: Tensor[(60), float32], %var_5521: Tensor[(2080), float64]) -> (Tensor[(12, 2, 13), float32], Tensor[(1, 252), int32], Tensor[(60), float32], Tensor[(252), int32], Tensor[(12, 2, 13), float32], Tensor[(10, 13, 16), float64], Tensor[(2112), float64], Tensor[(2080), float64]) {
  @func_5518(%var_5520, %var_5521) /* ty=(Tensor[(12, 2, 13), float32], Tensor[(1, 252), int32], Tensor[(60), float32], Tensor[(252), int32], Tensor[(12, 2, 13), float32], Tensor[(10, 13, 16), float64], Tensor[(2112), float64], Tensor[(2080), float64]) */
}

def @func_6185(%var_6173: Tensor[(12, 2, 13), bool]) -> (Tensor[(12, 2, 13), int16],) {
  %865 = @func_3125() /* ty=Tensor[(12, 2, 13), bool] */;
  %866 = cast(%var_6173, dtype="int16") /* ty=Tensor[(12, 2, 13), int16] */;
  %867 = shape_of(%865, dtype="int32") /* ty=Tensor[(3), int32] */;
  %868 = cast(%865, dtype="int16") /* ty=Tensor[(12, 2, 13), int16] */;
  %869 = dyn.reshape(%866, %867, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %870 = add(%868, %869) /* ty=Tensor[(12, 2, 13), int16] */;
  (%870,)
}

def @func_6836(%var_6834: Tensor[(14, 9, 2), int32]) -> (Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int64]) {
  @func_6833(%var_6834) /* ty=(Tensor[(12, 2, 13), bool], Tensor[(14, 9, 2), int64]) */
}

def @func_4651() -> Tensor[(12, 2, 13), bool] {
  %871 = fn () -> Tensor[(12, 2, 13), bool] {
    @func_3965() /* ty=Tensor[(12, 2, 13), bool] */
  };
  %871() /* ty=Tensor[(12, 2, 13), bool] */
}

def @func_5299(%var_5297: Tensor[(2, 14, 12), float32]) -> (Tensor[(2, 14, 12), float32],) {
  @func_5296(%var_5297) /* ty=(Tensor[(2, 14, 12), float32],) */
}

def @func_1765(%var_1763: Tensor[(2080), float64]) -> (Tensor[(2, 15, 5), float64], Tensor[(10, 13, 16), float64], Tensor[(2080), float64]) {
  @func_1762(%var_1763) /* ty=(Tensor[(2, 15, 5), float64], Tensor[(10, 13, 16), float64], Tensor[(2080), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen204/build/output.py", line 2333, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:57:10] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

