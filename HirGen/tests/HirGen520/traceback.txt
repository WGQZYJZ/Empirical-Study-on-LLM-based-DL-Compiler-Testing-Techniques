==========mod==========
#[version = "0.0.5"]
def @func_6951() -> (Tensor[(1, 7, 11), float64],) {
  %0 = @func_2723() /* ty=Tensor[(1, 7, 11), float64] */;
  (%0,)
}

def @func_4341() -> Tensor[(1, 7, 11), float64] {
  %1 = @func_4276() /* ty=(Tensor[(1, 7, 11), float64],) */;
  %1.0
}

def @func_2908() -> Tensor[(1, 7, 11), float64] {
  @func_2775() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_6017() -> (Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64]) {
  %2 = @func_4968() /* ty=(Tensor[(1, 7, 11), float64],) */;
  %3 = %2.0;
  %4 = @func_3986() /* ty=Tensor[(1, 7, 11), float64] */;
  (%3, %4)
}

def @func_4564(%var_4509: Tensor[(165), uint16], %var_4519: Tensor[(16, 7, 11), float64], %var_4543: Tensor[(10, 7, 11), float64]) -> (Tensor[(11, 1, 15), uint16], uint16, Tensor[(165), uint16], Tensor[(16, 7, 11), bool], Tensor[(10, 7, 11), bool], Tensor[(1, 7, 11), float64]) {
  %5 = cast(meta[relay.Constant][0] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %6 = cast(%var_4509, dtype="uint16") /* ty=Tensor[(165), uint16] */;
  %7 = reshape(%5, newshape=[]) /* ty=uint16 */;
  %8 = reshape(%6, newshape=[11, 1, 15]) /* ty=Tensor[(11, 1, 15), uint16] */;
  %9 = @func_3003(%7, %8) /* ty=(Tensor[(11, 1, 15), uint16], Tensor[(11, 1, 15), float32]) */;
  %10 = @func_3723() /* ty=Tensor[(1, 7, 11), float64] */;
  %11 = cast(%10, dtype="bool") /* ty=Tensor[(1, 7, 11), bool] */;
  %12 = cast(%var_4519, dtype="bool") /* ty=Tensor[(16, 7, 11), bool] */;
  %13 = cast(%10, dtype="bool") /* ty=Tensor[(1, 7, 11), bool] */;
  %14 = cast(%var_4543, dtype="bool") /* ty=Tensor[(10, 7, 11), bool] */;
  %15 = @func_3776() /* ty=(Tensor[(1, 7, 11), float64],) */;
  %16 = %9.0;
  %17 = greater_equal(%11, %12) /* ty=Tensor[(16, 7, 11), bool] */;
  %18 = logical_or(%13, %14) /* ty=Tensor[(10, 7, 11), bool] */;
  %19 = %15.0;
  (%16, meta[relay.Constant][0] /* ty=uint16 */, %var_4509, %17, %18, %19)
}

def @func_6739() -> Tensor[(3, 420), float64] {
  %20 = @func_4815() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1260), int8]) */;
  %20.1
}

def @func_4871() -> Tensor[(1, 7, 11), float64] {
  %21 = @func_4276() /* ty=(Tensor[(1, 7, 11), float64],) */;
  %21.0
}

def @func_7406() -> (Tensor[(1, 7, 11), float64],) {
  %22 = @func_6951() /* ty=(Tensor[(1, 7, 11), float64],) */;
  %23 = %22.0;
  (%23,)
}

def @func_1794(%var_1757: Tensor[(5, 10, 9), uint16], %var_1758: Tensor[(5, 10, 9), uint16]) -> (Tensor[(13, 4, 8), float32], Tensor[(416), float32], Tensor[(5, 10, 9), float32], Tensor[(6, 14, 15), float64], Tensor[(3, 420), float64]) {
  %24 = cast(meta[relay.Constant][1] /* ty=Tensor[(416), float32] */, dtype="float32") /* ty=Tensor[(416), float32] */;
  %25 = reshape(%24, newshape=[13, 4, 8]) /* ty=Tensor[(13, 4, 8), float32] */;
  %26 = @func_1741(%25) /* ty=(Tensor[(13, 4, 8), float32],) */;
  %27 = cast(%var_1758, dtype="uint16") /* ty=Tensor[(5, 10, 9), uint16] */;
  %28 = shape_of(%var_1757, dtype="int32") /* ty=Tensor[(3), int32] */;
  %29 = cast(%var_1757, dtype="uint16") /* ty=Tensor[(5, 10, 9), uint16] */;
  %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %31 = bitwise_xor(%29, %30) /* ty=Tensor[(5, 10, 9), uint16] */;
  %32 = cast(%31, dtype="float32") /* ty=Tensor[(5, 10, 9), float32] */;
  %33 = cast(meta[relay.Constant][2] /* ty=Tensor[(3, 420), float64] */, dtype="float64") /* ty=Tensor[(3, 420), float64] */;
  %34 = reshape(%33, newshape=[6, 14, 15]) /* ty=Tensor[(6, 14, 15), float64] */;
  %35 = @func_412(%34) /* ty=(Tensor[(6, 14, 15), bool], Tensor[(6, 14, 15), float64]) */;
  %36 = %26.0;
  %37 = asin(%32) /* ty=Tensor[(5, 10, 9), float32] */;
  %38 = %35.1;
  (%36, meta[relay.Constant][1] /* ty=Tensor[(416), float32] */, %37, %38, meta[relay.Constant][2] /* ty=Tensor[(3, 420), float64] */)
}

def @func_6996() -> (Tensor[(5, 11, 3), bool], Tensor[(3, 420), float32]) {
  %39 = @func_6739() /* ty=Tensor[(3, 420), float64] */;
  %40 = cast(%39, dtype="int8") /* ty=Tensor[(3, 420), int8] */;
  %41 = cast(%39, dtype="int8") /* ty=Tensor[(3, 420), int8] */;
  %42 = reshape(%40, newshape=[9, 14, 10]) /* ty=Tensor[(9, 14, 10), int8] */;
  %43 = reshape(%41, newshape=[9, 14, 10]) /* ty=Tensor[(9, 14, 10), int8] */;
  %44 = @func_2384(%42, %43) /* ty=(Tensor[(9, 14, 10), int8], Tensor[(3, 420), float64], Tensor[(10, 45), uint16], Tensor[(6, 14, 15), bool], Tensor[(5, 11, 3), bool], Tensor[(165), uint8]) */;
  %45 = cast(%39, dtype="float32") /* ty=Tensor[(3, 420), float32] */;
  %46 = %44.4;
  %47 = sinh(%45) /* ty=Tensor[(3, 420), float32] */;
  (%46, %47)
}

def @func_6353() -> (Tensor[(294), uint32],) {
  %48 = @func_5014() /* ty=(Tensor[(294), uint32],) */;
  %49 = %48.0;
  (%49,)
}

def @func_3589(%var_3459: Tensor[(13, 15), float32], %var_3485: Tensor[(39), float32], %var_3519: Tensor[(1260), int8]) -> (Tensor[(165), uint8], Tensor[(416), float32], Tensor[(13, 15), float32], Tensor[(520), uint32], Tensor[(520), uint32], Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64], Tensor[(1260), int8], Tensor[(1260), int8], Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64], Tensor[(39), bool], Tensor[(39), float32], Tensor[(1, 7, 11), float32], Tensor[(10, 10, 12), bool], Tensor[(2, 600), int64]) {
  %50 = cast(meta[relay.Constant][3] /* ty=Tensor[(416), float32] */, dtype="float32") /* ty=Tensor[(416), float32] */;
  %51 = cast(%var_3459, dtype="float32") /* ty=Tensor[(13, 15), float32] */;
  %52 = reshape(%50, newshape=[16, 26]) /* ty=Tensor[(16, 26), float32] */;
  %53 = reshape(%51, newshape=[195]) /* ty=Tensor[(195), float32] */;
  %54 = @func_2208(%52, %53) /* ty=(Tensor[(2, 13, 10), bool], Tensor[(13, 4, 8), int32], Tensor[(165), uint8], Tensor[(195), float32], Tensor[(11, 15), uint8], Tensor[(520), uint32], Tensor[(39), float32]) */;
  %55 = cast(meta[relay.Constant][4] /* ty=Tensor[(39), float32] */, dtype="float32") /* ty=Tensor[(39), float32] */;
  %56 = cast(%var_3459, dtype="float32") /* ty=Tensor[(13, 15), float32] */;
  %57 = %54.2;
  %58 = cast(%57, dtype="uint8") /* ty=Tensor[(165), uint8] */;
  %59 = cast(meta[relay.Constant][5] /* ty=Tensor[(520), uint32] */, dtype="uint32") /* ty=Tensor[(520), uint32] */;
  %60 = reshape(%55, newshape=[1, 3, 13]) /* ty=Tensor[(1, 3, 13), float32] */;
  %61 = reshape(%56, newshape=[5, 3, 13]) /* ty=Tensor[(5, 3, 13), float32] */;
  %62 = reshape(%58, newshape=[165]) /* ty=Tensor[(165), uint8] */;
  %63 = reshape(%59, newshape=[520]) /* ty=Tensor[(520), uint32] */;
  %64 = @func_217(%60, %61, %62, %63) /* ty=(Tensor[(5, 3, 13), float32], Tensor[(5, 11, 3), bool], Tensor[(165), uint8], Tensor[(8, 13, 5), bool], Tensor[(520), uint32], Tensor[(8, 13, 5), bool]) */;
  %65 = cast(%var_3519, dtype="int8") /* ty=Tensor[(1260), int8] */;
  %66 = reshape(%65, newshape=[1260]) /* ty=Tensor[(1260), int8] */;
  %67 = @func_3052(%66) /* ty=(Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1260), int8]) */;
  %68 = cast(%var_3519, dtype="int8") /* ty=Tensor[(1260), int8] */;
  %69 = reshape(%68, newshape=[1260]) /* ty=Tensor[(1260), int8] */;
  %70 = @func_3052(%69) /* ty=(Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1260), int8]) */;
  %71 = cast(%var_3485, dtype="bool") /* ty=Tensor[(39), bool] */;
  %72 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(39), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %73 = cast(meta[relay.Constant][4] /* ty=Tensor[(39), float32] */, dtype="bool") /* ty=Tensor[(39), bool] */;
  %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?), bool] */;
  %75 = logical_or(%73, %74) /* ty=Tensor[(39), bool] */;
  %76 = cast(meta[relay.Constant][4] /* ty=Tensor[(39), float32] */, dtype="bool") /* ty=Tensor[(39), bool] */;
  %77 = shape_of(%var_3485, dtype="int32") /* ty=Tensor[(1), int32] */;
  %78 = cast(%var_3485, dtype="bool") /* ty=Tensor[(39), bool] */;
  %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?), bool] */;
  %80 = equal(%78, %79) /* ty=Tensor[(39), bool] */;
  %81 = cast(%80, dtype="bool") /* ty=Tensor[(39), bool] */;
  %82 = shape_of(%75, dtype="int32") /* ty=Tensor[(1), int32] */;
  %83 = cast(%75, dtype="bool") /* ty=Tensor[(39), bool] */;
  %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?), bool] */;
  %85 = cast(%75, dtype="float32") /* ty=Tensor[(39), float32] */;
  %86 = shape_of(%80, dtype="int32") /* ty=Tensor[(1), int32] */;
  %87 = cast(%80, dtype="float32") /* ty=Tensor[(39), float32] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?), float32] */;
  %89 = @func_3185() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64]) */;
  %90 = %89.1;
  %91 = cast(%90, dtype="float32") /* ty=Tensor[(1, 7, 11), float32] */;
  %92 = cast(meta[relay.Constant][6] /* ty=Tensor[(2, 600), int64] */, dtype="int64") /* ty=Tensor[(2, 600), int64] */;
  %93 = cast(meta[relay.Constant][6] /* ty=Tensor[(2, 600), int64] */, dtype="int64") /* ty=Tensor[(2, 600), int64] */;
  %94 = cast(%var_3459, dtype="float32") /* ty=Tensor[(13, 15), float32] */;
  %95 = cast(%57, dtype="uint8") /* ty=Tensor[(165), uint8] */;
  %96 = cast(meta[relay.Constant][5] /* ty=Tensor[(520), uint32] */, dtype="uint32") /* ty=Tensor[(520), uint32] */;
  %97 = reshape(%92, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int64] */;
  %98 = reshape(%93, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int64] */;
  %99 = reshape(%94, newshape=[195]) /* ty=Tensor[(195), float32] */;
  %100 = reshape(%95, newshape=[165]) /* ty=Tensor[(165), uint8] */;
  %101 = reshape(%96, newshape=[520]) /* ty=Tensor[(520), uint32] */;
  %102 = @func_2553(%97, %98, %99, %100, %101) /* ty=(Tensor[(10, 10, 12), bool], Tensor[(520), uint32], Tensor[(39), float32], Tensor[(195), float32], Tensor[(165), uint8], Tensor[(520), uint32]) */;
  %103 = %64.4;
  %104 = @func_2908() /* ty=Tensor[(1, 7, 11), float64] */;
  %105 = @func_2908() /* ty=Tensor[(1, 7, 11), float64] */;
  %106 = %67.2;
  %107 = @func_2723() /* ty=Tensor[(1, 7, 11), float64] */;
  %108 = %70.0;
  %109 = not_equal(%83, %84) /* ty=Tensor[(39), bool] */;
  %110 = floor_divide(%87, %88) /* ty=Tensor[(39), float32] */;
  %111 = sqrt(%91) /* ty=Tensor[(1, 7, 11), float32] */;
  %112 = %102.0;
  (%57, meta[relay.Constant][3] /* ty=Tensor[(416), float32] */, %var_3459, %103, meta[relay.Constant][5] /* ty=Tensor[(520), uint32] */, %104, %105, %106, %var_3519, %107, %108, %109, %110, %111, %112, meta[relay.Constant][6] /* ty=Tensor[(2, 600), int64] */)
}

def @func_8091(%var_8039: Tensor[(16, 11, 10), float32]) -> (Tensor[(8, 7, 11), uint16], Tensor[(308, 2), float64], Tensor[(16, 11, 10), float64], Tensor[(16, 11, 10), float32]) {
  %113 = cast(meta[relay.Constant][7] /* ty=Tensor[(308, 2), float64] */, dtype="float64") /* ty=Tensor[(308, 2), float64] */;
  %114 = reshape(%113, newshape=[8, 7, 11]) /* ty=Tensor[(8, 7, 11), float64] */;
  %115 = cast(%var_8039, dtype="float32") /* ty=Tensor[(16, 11, 10), float32] */;
  %116 = sinh(%115) /* ty=Tensor[(16, 11, 10), float32] */;
  %117 = cast(%116, dtype="float64") /* ty=Tensor[(16, 11, 10), float64] */;
  %118 = cast(%116, dtype="float32") /* ty=Tensor[(16, 11, 10), float32] */;
  %119 = asinh(%118) /* ty=Tensor[(16, 11, 10), float32] */;
  %120 = cast(%119, dtype="float32") /* ty=Tensor[(16, 11, 10), float32] */;
  %121 = @func_3871(%114) /* ty=Tensor[(8, 7, 11), uint16] */;
  %122 = cosh(%117) /* ty=Tensor[(16, 11, 10), float64] */;
  %123 = acosh(%120) /* ty=Tensor[(16, 11, 10), float32] */;
  (%121, meta[relay.Constant][7] /* ty=Tensor[(308, 2), float64] */, %122, %123)
}

def @func_6822() -> (Tensor[(1, 7, 11), float64],) {
  %124 = @func_3986() /* ty=Tensor[(1, 7, 11), float64] */;
  (%124,)
}

def @func_8442(%var_8338: Tensor[(14, 7, 11), float64], %var_8358: Tensor[(1200), int64], %var_8359: Tensor[(165), uint8], %var_8416: Tensor[(1260), int8], %var_8417: Tensor[(231, 2), float64]) -> (Tensor[(1, 7, 11), float64], Tensor[(480), uint8], Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64], Tensor[(1200), int64], Tensor[(165), uint8], Tensor[(14, 7, 11), float32], Tensor[(231), float32], Tensor[(14, 7, 11), float32], Tensor[(?, 7, 11), float64], Tensor[(1260), int8], Tensor[(231, 2), float64], Tensor[(600, 2), float32], Tensor[(16, 11, 10), float64], Tensor[(1760), float32]) {
  %125 = @func_4815() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1260), int8]) */;
  %126 = cast(meta[relay.Constant][9] /* ty=Tensor[(231), float64] */, dtype="float64") /* ty=Tensor[(231), float64] */;
  %127 = reshape(%126, newshape=[7, 3, 11]) /* ty=Tensor[(7, 3, 11), float64] */;
  %128 = @func_7385(%127) /* ty=(Tensor[(7, 3, 11), int64], Tensor[(1, 7, 11), float64]) */;
  %129 = cast(meta[relay.Constant][8] /* ty=Tensor[(480), uint8] */, dtype="uint8") /* ty=Tensor[(480), uint8] */;
  %130 = cast(meta[relay.Constant][8] /* ty=Tensor[(480), uint8] */, dtype="uint8") /* ty=Tensor[(480), uint8] */;
  %131 = reshape(%129, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), uint8] */;
  %132 = reshape(%130, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), uint8] */;
  %133 = @func_7637(%131, %132) /* ty=(Tensor[(8, 12, 5), uint8], Tensor[(1, 7, 11), float64]) */;
  %134 = %133.1;
  %135 = cast(%134, dtype="uint32") /* ty=Tensor[(1, 7, 11), uint32] */;
  %136 = cast(%var_8338, dtype="uint32") /* ty=Tensor[(14, 7, 11), uint32] */;
  %137 = left_shift(%135, %136) /* ty=Tensor[(14, 7, 11), uint32] */;
  %138 = cast(meta[relay.Constant][10] /* ty=Tensor[(14, 7, 11), uint32] */, dtype="float32") /* ty=Tensor[(14, 7, 11), float32] */;
  %139 = shape_of(%137, dtype="int32") /* ty=Tensor[(3), int32] */;
  %140 = cast(%137, dtype="float32") /* ty=Tensor[(14, 7, 11), float32] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %142 = cast(meta[relay.Constant][11] /* ty=Tensor[(231), float64] */, dtype="float32") /* ty=Tensor[(231), float32] */;
  %143 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(231), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %144 = cast(meta[relay.Constant][9] /* ty=Tensor[(231), float64] */, dtype="float32") /* ty=Tensor[(231), float32] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?), float32] */;
  %146 = cast(%134, dtype="float32") /* ty=Tensor[(1, 7, 11), float32] */;
  %147 = cast(%137, dtype="float32") /* ty=Tensor[(14, 7, 11), float32] */;
  %148 = cast(%var_8416, dtype="int8") /* ty=Tensor[(1260), int8] */;
  %149 = cast(%var_8417, dtype="float64") /* ty=Tensor[(231, 2), float64] */;
  %150 = reshape(%148, newshape=[1260]) /* ty=Tensor[(1260), int8] */;
  %151 = reshape(%149, newshape=[462]) /* ty=Tensor[(462), float64] */;
  %152 = @func_5686(%150, %151) /* ty=(Tensor[(10, 45), uint16], Tensor[(1260), int8], Tensor[(6, 14, 15), bool], Tensor[(?, 7, 11), float64], Tensor[(165), uint8], Tensor[(462), float64], Tensor[(6, 7, 11), bool], Tensor[(1, 7, 11), float32], Tensor[(1, 7, 11), float64], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
  %153 = cast(%var_8358, dtype="int64") /* ty=Tensor[(1200), int64] */;
  %154 = cast(%var_8359, dtype="uint8") /* ty=Tensor[(165), uint8] */;
  %155 = reshape(%153, newshape=[600, 2]) /* ty=Tensor[(600, 2), int64] */;
  %156 = reshape(%154, newshape=[165]) /* ty=Tensor[(165), uint8] */;
  %157 = @func_7800(%155, %156) /* ty=(Tensor[(1, 7, 11), float32], Tensor[(520), uint32], Tensor[(600, 2), int64], Tensor[(39, 5), float32], Tensor[(165), uint8], Tensor[(520), uint32]) */;
  %158 = %157.2;
  %159 = cast(%158, dtype="float64") /* ty=Tensor[(600, 2), float64] */;
  %160 = asinh(%159) /* ty=Tensor[(600, 2), float64] */;
  %161 = cast(%160, dtype="float32") /* ty=Tensor[(600, 2), float32] */;
  %162 = cast(meta[relay.Constant][12] /* ty=Tensor[(1760), float32] */, dtype="float32") /* ty=Tensor[(1760), float32] */;
  %163 = reshape(%162, newshape=[16, 11, 10]) /* ty=Tensor[(16, 11, 10), float32] */;
  %164 = @func_8091(%163) /* ty=(Tensor[(8, 7, 11), uint16], Tensor[(308, 2), float64], Tensor[(16, 11, 10), float64], Tensor[(16, 11, 10), float32]) */;
  %165 = @func_3786() /* ty=Tensor[(1, 7, 11), float64] */;
  %166 = %125.0;
  %167 = %128.1;
  %168 = floor_mod(%140, %141) /* ty=Tensor[(14, 7, 11), float32] */;
  %169 = floor_mod(%144, %145) /* ty=Tensor[(231), float32] */;
  %170 = divide(%146, %147) /* ty=Tensor[(14, 7, 11), float32] */;
  %171 = %152.3;
  %172 = asin(%161) /* ty=Tensor[(600, 2), float32] */;
  %173 = %164.2;
  (%165, meta[relay.Constant][8] /* ty=Tensor[(480), uint8] */, %166, %167, %var_8358, %var_8359, %168, %169, %170, %171, %var_8416, %var_8417, %172, %173, meta[relay.Constant][12] /* ty=Tensor[(1760), float32] */)
}

def @func_4968() -> (Tensor[(1, 7, 11), float64],) {
  %174 = @func_3986() /* ty=Tensor[(1, 7, 11), float64] */;
  (%174,)
}

def @func_7705(%var_7677: Tensor[(9, 5, 3), uint16]) -> (Tensor[(9, 5, 3), uint16], Tensor[(1, 7, 11), float64], Tensor[(130, 4), bool], Tensor[(6, 14, 15), uint16], Tensor[(8, 15, 4), float64], Tensor[(480), float64], Tensor[(1, 7, 11), float64]) {
  %175 = cast(%var_7677, dtype="uint16") /* ty=Tensor[(9, 5, 3), uint16] */;
  %176 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(9, 5, 3), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(meta[relay.Constant][13] /* ty=Tensor[(9, 5, 3), uint16] */, dtype="uint16") /* ty=Tensor[(9, 5, 3), uint16] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %179 = @func_3185() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64]) */;
  %180 = @func_4167() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(5, 11, 3), bool], Tensor[(165), uint8], Tensor[(39, 1), float32], Tensor[(39, 5), float32], Tensor[(130, 4), int16], Tensor[(130, 4), bool]) */;
  %181 = @func_5578() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(1, 1260), float64], Tensor[(1, 7, 11), float64], Tensor[(195), float32], Tensor[(6, 14, 15), uint16]) */;
  %182 = cast(meta[relay.Constant][14] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %183 = cast(meta[relay.Constant][14] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %184 = reshape(%182, newshape=[8, 15, 4]) /* ty=Tensor[(8, 15, 4), float64] */;
  %185 = reshape(%183, newshape=[8, 15, 4]) /* ty=Tensor[(8, 15, 4), float64] */;
  %186 = @func_3832(%184, %185) /* ty=(Tensor[(8, 15, 4), float64],) */;
  %187 = @func_4968() /* ty=(Tensor[(1, 7, 11), float64],) */;
  %188 = minimum(%177, %178) /* ty=Tensor[(9, 5, 3), uint16] */;
  %189 = %179.0;
  %190 = %180.6;
  %191 = %181.4;
  %192 = %186.0;
  %193 = %187.0;
  (%188, %189, %190, %191, %192, meta[relay.Constant][14] /* ty=Tensor[(480), float64] */, %193)
}

def @func_6609() -> Tensor[(1, 7, 11), float64] {
  %194 = @func_5906() /* ty=(Tensor[(480), float32], Tensor[(1, 7, 11), float64]) */;
  %194.1
}

def @func_5155() -> (Tensor[(1, 7, 11), float64],) {
  %195 = @func_4656() /* ty=Tensor[(1, 7, 11), float64] */;
  (%195,)
}

def @func_4167() -> (Tensor[(1, 7, 11), float64], Tensor[(5, 11, 3), bool], Tensor[(165), uint8], Tensor[(39, 1), float32], Tensor[(39, 5), float32], Tensor[(130, 4), int16], Tensor[(130, 4), bool]) {
  %196 = cast(meta[relay.Constant][15] /* ty=Tensor[(165), uint8] */, dtype="uint8") /* ty=Tensor[(165), uint8] */;
  %197 = cast(meta[relay.Constant][15] /* ty=Tensor[(165), uint8] */, dtype="uint8") /* ty=Tensor[(165), uint8] */;
  %198 = reshape(%196, newshape=[5, 11, 3]) /* ty=Tensor[(5, 11, 3), uint8] */;
  %199 = reshape(%197, newshape=[5, 11, 3]) /* ty=Tensor[(5, 11, 3), uint8] */;
  %200 = cast(meta[relay.Constant][19] /* ty=Tensor[(130, 4), uint32] */, dtype="int16") /* ty=Tensor[(130, 4), int16] */;
  %201 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(130, 4), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %202 = cast(meta[relay.Constant][18] /* ty=Tensor[(130, 4), uint32] */, dtype="int16") /* ty=Tensor[(130, 4), int16] */;
  %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %204 = cast(meta[relay.Constant][16] /* ty=Tensor[(39, 1), float32] */, dtype="float32") /* ty=Tensor[(39, 1), float32] */;
  %205 = cast(meta[relay.Constant][17] /* ty=Tensor[(39, 5), float32] */, dtype="float32") /* ty=Tensor[(39, 5), float32] */;
  %206 = @func_38(%198, %199) /* ty=Tensor[(5, 11, 3), bool] */;
  %207 = cast(%206, dtype="uint8") /* ty=Tensor[(5, 11, 3), uint8] */;
  %208 = cast(meta[relay.Constant][18] /* ty=Tensor[(130, 4), uint32] */, dtype="uint32") /* ty=Tensor[(130, 4), uint32] */;
  %209 = reshape(%204, newshape=[1, 3, 13]) /* ty=Tensor[(1, 3, 13), float32] */;
  %210 = reshape(%205, newshape=[5, 3, 13]) /* ty=Tensor[(5, 3, 13), float32] */;
  %211 = reshape(%207, newshape=[165]) /* ty=Tensor[(165), uint8] */;
  %212 = reshape(%208, newshape=[520]) /* ty=Tensor[(520), uint32] */;
  %213 = @func_217(%209, %210, %211, %212) /* ty=(Tensor[(5, 3, 13), float32], Tensor[(5, 11, 3), bool], Tensor[(165), uint8], Tensor[(8, 13, 5), bool], Tensor[(520), uint32], Tensor[(8, 13, 5), bool]) */;
  %214 = %213.3;
  %215 = cast(%214, dtype="bool") /* ty=Tensor[(8, 13, 5), bool] */;
  %216 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(130, 4), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %217 = cast(meta[relay.Constant][18] /* ty=Tensor[(130, 4), uint32] */, dtype="bool") /* ty=Tensor[(130, 4), bool] */;
  %218 = dyn.reshape(%215, %216, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %219 = @func_2786() /* ty=Tensor[(1, 7, 11), float64] */;
  %220 = logical_xor(%202, %203) /* ty=Tensor[(130, 4), int16] */;
  %221 = greater_equal(%217, %218) /* ty=Tensor[(130, 4), bool] */;
  (%219, %206, meta[relay.Constant][15] /* ty=Tensor[(165), uint8] */, meta[relay.Constant][16] /* ty=Tensor[(39, 1), float32] */, meta[relay.Constant][17] /* ty=Tensor[(39, 5), float32] */, %220, %221)
}

def @func_4959(%var_4952: Tensor[(6, 7, 11), float64]) -> (Tensor[(6, 7, 11), int16],) {
  %222 = @func_4323() /* ty=Tensor[(1, 7, 11), float64] */;
  %223 = cast(%222, dtype="int16") /* ty=Tensor[(1, 7, 11), int16] */;
  %224 = cast(%var_4952, dtype="int16") /* ty=Tensor[(6, 7, 11), int16] */;
  %225 = maximum(%223, %224) /* ty=Tensor[(6, 7, 11), int16] */;
  (%225,)
}

def @func_6935(%var_6924: Tensor[(195), float32], %var_6925: Tensor[(165), uint8], %var_6926: Tensor[(520), uint32]) -> (Tensor[(?, 1260), float32], Tensor[(10, 10, 12), bool], Tensor[(1200), int64], Tensor[(195), float32], Tensor[(165), uint8], Tensor[(520), uint32], Tensor[(1, 1260), float64]) {
  %226 = @func_6138() /* ty=Tensor[(1, 1260), int8] */;
  %227 = cast(%226, dtype="float32") /* ty=Tensor[(1, 1260), float32] */;
  %228 = tan(%227) /* ty=Tensor[(1, 1260), float32] */;
  %229 = cast(%226, dtype="float64") /* ty=Tensor[(1, 1260), float64] */;
  %230 = acosh(%229) /* ty=Tensor[(1, 1260), float64] */;
  %231 = cast(%230, dtype="int8") /* ty=Tensor[(1, 1260), int8] */;
  %232 = shape_of(%228, dtype="int32") /* ty=Tensor[(2), int32] */;
  %233 = cast(%228, dtype="int8") /* ty=Tensor[(1, 1260), int8] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %235 = bitwise_or(%233, %234) /* ty=Tensor[(?, 1260), int8] */;
  %236 = cast(%228, dtype="float32") /* ty=Tensor[(1, 1260), float32] */;
  %237 = shape_of(%235, dtype="int32") /* ty=Tensor[(2), int32] */;
  %238 = cast(%235, dtype="float32") /* ty=Tensor[(?, 1260), float32] */;
  %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %240 = cast(meta[relay.Constant][20] /* ty=Tensor[(1200), int64] */, dtype="int64") /* ty=Tensor[(1200), int64] */;
  %241 = cast(meta[relay.Constant][20] /* ty=Tensor[(1200), int64] */, dtype="int64") /* ty=Tensor[(1200), int64] */;
  %242 = cast(%var_6924, dtype="float32") /* ty=Tensor[(195), float32] */;
  %243 = cast(%var_6925, dtype="uint8") /* ty=Tensor[(165), uint8] */;
  %244 = cast(%var_6926, dtype="uint32") /* ty=Tensor[(520), uint32] */;
  %245 = reshape(%240, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int64] */;
  %246 = reshape(%241, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int64] */;
  %247 = reshape(%242, newshape=[195]) /* ty=Tensor[(195), float32] */;
  %248 = reshape(%243, newshape=[165]) /* ty=Tensor[(165), uint8] */;
  %249 = reshape(%244, newshape=[520]) /* ty=Tensor[(520), uint32] */;
  %250 = @func_2553(%245, %246, %247, %248, %249) /* ty=(Tensor[(10, 10, 12), bool], Tensor[(520), uint32], Tensor[(39), float32], Tensor[(195), float32], Tensor[(165), uint8], Tensor[(520), uint32]) */;
  %251 = cast(%228, dtype="float64") /* ty=Tensor[(1, 1260), float64] */;
  %252 = floor_mod(%238, %239) /* ty=Tensor[(?, 1260), float32] */;
  %253 = %250.0;
  %254 = erf(%251) /* ty=Tensor[(1, 1260), float64] */;
  (%252, %253, meta[relay.Constant][20] /* ty=Tensor[(1200), int64] */, %var_6924, %var_6925, %var_6926, %254)
}

def @func_5578() -> (Tensor[(1, 7, 11), float64], Tensor[(1, 1260), float64], Tensor[(1, 7, 11), float64], Tensor[(195), float32], Tensor[(6, 14, 15), uint16]) {
  %255 = cast(meta[relay.Constant][22] /* ty=Tensor[(195), float32] */, dtype="float32") /* ty=Tensor[(195), float32] */;
  %256 = reshape(%255, newshape=[195]) /* ty=Tensor[(195), float32] */;
  %257 = @func_5435(%256) /* ty=(Tensor[(1, 7, 11), float64], Tensor[(165), uint8], Tensor[(1, 39), float32], Tensor[(195), float32], Tensor[(165), uint8], Tensor[(520), uint32]) */;
  %258 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 1260), float64] */, dtype="float64") /* ty=Tensor[(1, 1260), float64] */;
  %259 = reshape(%258, newshape=[6, 14, 15]) /* ty=Tensor[(6, 14, 15), float64] */;
  %260 = @func_412(%259) /* ty=(Tensor[(6, 14, 15), bool], Tensor[(6, 14, 15), float64]) */;
  %261 = %260.1;
  %262 = cast(%261, dtype="float32") /* ty=Tensor[(6, 14, 15), float32] */;
  %263 = sin(%262) /* ty=Tensor[(6, 14, 15), float32] */;
  %264 = cast(%261, dtype="int64") /* ty=Tensor[(6, 14, 15), int64] */;
  %265 = shape_of(%263, dtype="int32") /* ty=Tensor[(3), int32] */;
  %266 = cast(%263, dtype="int64") /* ty=Tensor[(6, 14, 15), int64] */;
  %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %268 = logical_xor(%266, %267) /* ty=Tensor[(6, 14, 15), int64] */;
  %269 = cast(%263, dtype="float32") /* ty=Tensor[(6, 14, 15), float32] */;
  %270 = asin(%269) /* ty=Tensor[(6, 14, 15), float32] */;
  %271 = cast(%270, dtype="uint16") /* ty=Tensor[(6, 14, 15), uint16] */;
  %272 = shape_of(%268, dtype="int32") /* ty=Tensor[(3), int32] */;
  %273 = cast(%268, dtype="uint16") /* ty=Tensor[(6, 14, 15), uint16] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %275 = @func_3786() /* ty=Tensor[(1, 7, 11), float64] */;
  %276 = %257.0;
  %277 = left_shift(%273, %274) /* ty=Tensor[(6, 14, 15), uint16] */;
  (%275, meta[relay.Constant][21] /* ty=Tensor[(1, 1260), float64] */, %276, meta[relay.Constant][22] /* ty=Tensor[(195), float32] */, %277)
}

def @func_4060() -> (Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1, 1260), int8]) {
  %278 = @func_3185() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64]) */;
  %279 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 1260), int8] */, dtype="int8") /* ty=Tensor[(1, 1260), int8] */;
  %280 = reshape(%279, newshape=[1260]) /* ty=Tensor[(1260), int8] */;
  %281 = @func_3052(%280) /* ty=(Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1260), int8]) */;
  %282 = %278.1;
  %283 = %281.1;
  (%282, %283, meta[relay.Constant][23] /* ty=Tensor[(1, 1260), int8] */)
}

def @func_3871(%var_3866: Tensor[(8, 7, 11), float64]) -> Tensor[(8, 7, 11), uint16] {
  %284 = @func_2786() /* ty=Tensor[(1, 7, 11), float64] */;
  %285 = cast(%284, dtype="uint16") /* ty=Tensor[(1, 7, 11), uint16] */;
  %286 = cast(%var_3866, dtype="uint16") /* ty=Tensor[(8, 7, 11), uint16] */;
  add(%285, %286) /* ty=Tensor[(8, 7, 11), uint16] */
}

def @func_7061(%var_7053: Tensor[(2, 5, 13), uint16]) -> (Tensor[(2, 5, 13), uint16], Tensor[(2, 5, 13), float32]) {
  %287 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 5, 13), uint16] */, dtype="uint16") /* ty=Tensor[(2, 5, 13), uint16] */;
  %288 = shape_of(%var_7053, dtype="int32") /* ty=Tensor[(3), int32] */;
  %289 = cast(%var_7053, dtype="uint16") /* ty=Tensor[(2, 5, 13), uint16] */;
  %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %291 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 5, 13), uint16] */, dtype="float32") /* ty=Tensor[(2, 5, 13), float32] */;
  %292 = logical_xor(%289, %290) /* ty=Tensor[(2, 5, 13), uint16] */;
  %293 = rsqrt(%291) /* ty=Tensor[(2, 5, 13), float32] */;
  (%292, %293)
}

def @func_4770(%var_4722: Tensor[(11, 7, 11), float64], %var_4741: Tensor[(480), float64]) -> (Tensor[(11, 7, 11), uint32], Tensor[(1, 7, 11), float64], Tensor[(8, 15, 4), float64], Tensor[(480), float64], Tensor[(1, 7, 11), float64]) {
  %294 = @func_4276() /* ty=(Tensor[(1, 7, 11), float64],) */;
  %295 = %294.0;
  %296 = cast(%295, dtype="uint32") /* ty=Tensor[(1, 7, 11), uint32] */;
  %297 = cast(%var_4722, dtype="uint32") /* ty=Tensor[(11, 7, 11), uint32] */;
  %298 = cast(%var_4741, dtype="float64") /* ty=Tensor[(480), float64] */;
  %299 = cast(%var_4741, dtype="float64") /* ty=Tensor[(480), float64] */;
  %300 = reshape(%298, newshape=[8, 15, 4]) /* ty=Tensor[(8, 15, 4), float64] */;
  %301 = reshape(%299, newshape=[8, 15, 4]) /* ty=Tensor[(8, 15, 4), float64] */;
  %302 = @func_3832(%300, %301) /* ty=(Tensor[(8, 15, 4), float64],) */;
  %303 = @func_3406() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(39), float32], Tensor[(420), float32]) */;
  %304 = bitwise_xor(%296, %297) /* ty=Tensor[(11, 7, 11), uint32] */;
  %305 = @func_2775() /* ty=Tensor[(1, 7, 11), float64] */;
  %306 = %302.0;
  %307 = %303.0;
  (%304, %305, %306, %var_4741, %307)
}

def @func_5090(%var_5076: Tensor[(54), float64]) -> (Tensor[(1, 7, 11), float64], Tensor[(6, 3, 3), float64], Tensor[(54), float64]) {
  %308 = cast(%var_5076, dtype="float64") /* ty=Tensor[(54), float64] */;
  %309 = cast(%var_5076, dtype="float64") /* ty=Tensor[(54), float64] */;
  %310 = reshape(%308, newshape=[6, 3, 3]) /* ty=Tensor[(6, 3, 3), float64] */;
  %311 = reshape(%309, newshape=[6, 3, 3]) /* ty=Tensor[(6, 3, 3), float64] */;
  %312 = @func_4656() /* ty=Tensor[(1, 7, 11), float64] */;
  %313 = @func_4993(%310, %311) /* ty=Tensor[(6, 3, 3), float64] */;
  (%312, %313, %var_5076)
}

def @func_3712(%var_3705: Tensor[(12, 5, 7), float32]) -> Tensor[(12, 5, 7), float32] {
  %314 = cast(%var_3705, dtype="float32") /* ty=Tensor[(12, 5, 7), float32] */;
  sqrt(%314) /* ty=Tensor[(12, 5, 7), float32] */
}

def @func_8536() -> (Tensor[(1, 7, 11), float64], Tensor[(11, 1, 15), float32], uint16, Tensor[(165, 1), uint16], Tensor[(480), float32], Tensor[(195), float32], Tensor[(420), float32], Tensor[(10, 13, 12), float64], Tensor[(1560), float64]) {
  %315 = cast(meta[relay.Constant][25] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %316 = cast(meta[relay.Constant][26] /* ty=Tensor[(165, 1), uint16] */, dtype="uint16") /* ty=Tensor[(165, 1), uint16] */;
  %317 = reshape(%315, newshape=[]) /* ty=uint16 */;
  %318 = reshape(%316, newshape=[11, 1, 15]) /* ty=Tensor[(11, 1, 15), uint16] */;
  %319 = @func_3003(%317, %318) /* ty=(Tensor[(11, 1, 15), uint16], Tensor[(11, 1, 15), float32]) */;
  %320 = cast(meta[relay.Constant][27] /* ty=Tensor[(195), float32] */, dtype="float32") /* ty=Tensor[(195), float32] */;
  %321 = reshape(%320, newshape=[195]) /* ty=Tensor[(195), float32] */;
  %322 = @func_6520(%321) /* ty=(Tensor[(1, 7, 11), float64], Tensor[(195), float32], Tensor[(195), float32], Tensor[(480), float32]) */;
  %323 = @func_3406() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(39), float32], Tensor[(420), float32]) */;
  %324 = cast(meta[relay.Constant][28] /* ty=Tensor[(1560), float64] */, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %325 = cast(meta[relay.Constant][28] /* ty=Tensor[(1560), float64] */, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %326 = reshape(%324, newshape=[10, 13, 12]) /* ty=Tensor[(10, 13, 12), float64] */;
  %327 = reshape(%325, newshape=[10, 13, 12]) /* ty=Tensor[(10, 13, 12), float64] */;
  %328 = @func_8280(%326, %327) /* ty=(Tensor[(10, 13, 12), float64], Tensor[(1, 7, 11), float64], Tensor[(4, 3, 14), float64], Tensor[(168), float64], Tensor[(1, 7, 11), float64]) */;
  %329 = @func_4672() /* ty=Tensor[(1, 7, 11), float64] */;
  %330 = %319.1;
  %331 = %322.3;
  %332 = %323.2;
  %333 = %328.0;
  (%329, %330, meta[relay.Constant][25] /* ty=uint16 */, meta[relay.Constant][26] /* ty=Tensor[(165, 1), uint16] */, %331, meta[relay.Constant][27] /* ty=Tensor[(195), float32] */, %332, %333, meta[relay.Constant][28] /* ty=Tensor[(1560), float64] */)
}

def @func_38(%var_8: Tensor[(5, 11, 3), uint8], %var_9: Tensor[(5, 11, 3), uint8]) -> Tensor[(5, 11, 3), bool] {
  %334 = cast(%var_9, dtype="bool") /* ty=Tensor[(5, 11, 3), bool] */;
  %335 = shape_of(%var_8, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(%var_8, dtype="bool") /* ty=Tensor[(5, 11, 3), bool] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %338 = less_equal(%336, %337) /* ty=Tensor[(5, 11, 3), bool] */;
  %339 = cast(%338, dtype="bool") /* ty=Tensor[(5, 11, 3), bool] */;
  %340 = shape_of(%var_8, dtype="int32") /* ty=Tensor[(3), int32] */;
  %341 = cast(%var_8, dtype="bool") /* ty=Tensor[(5, 11, 3), bool] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%341, %342) /* ty=Tensor[(5, 11, 3), bool] */
}

def @func_5906() -> (Tensor[(480), float32], Tensor[(1, 7, 11), float64]) {
  %343 = @func_5037() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(480), float32], Tensor[(480), float32]) */;
  %344 = %343.1;
  %345 = @func_5321() /* ty=Tensor[(1, 7, 11), float64] */;
  (%344, %345)
}

def @func_412(%var_380: Tensor[(6, 14, 15), float64]) -> (Tensor[(6, 14, 15), bool], Tensor[(6, 14, 15), float64]) {
  %346 = cast(%var_380, dtype="float64") /* ty=Tensor[(6, 14, 15), float64] */;
  %347 = exp(%346) /* ty=Tensor[(6, 14, 15), float64] */;
  %348 = cast(%347, dtype="bool") /* ty=Tensor[(6, 14, 15), bool] */;
  %349 = shape_of(%var_380, dtype="int32") /* ty=Tensor[(3), int32] */;
  %350 = cast(%var_380, dtype="bool") /* ty=Tensor[(6, 14, 15), bool] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %352 = cast(%347, dtype="float64") /* ty=Tensor[(6, 14, 15), float64] */;
  %353 = equal(%350, %351) /* ty=Tensor[(6, 14, 15), bool] */;
  %354 = acosh(%352) /* ty=Tensor[(6, 14, 15), float64] */;
  (%353, %354)
}

def @func_3776() -> (Tensor[(1, 7, 11), float64],) {
  %355 = @func_2775() /* ty=Tensor[(1, 7, 11), float64] */;
  (%355,)
}

def @func_5005() -> (Tensor[(1, 7, 11), float64],) {
  %356 = @func_3185() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64]) */;
  %357 = %356.1;
  (%357,)
}

def @func_3052(%var_3047: Tensor[(1260), int8]) -> (Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1260), int8]) {
  %358 = cast(%var_3047, dtype="int8") /* ty=Tensor[(1260), int8] */;
  %359 = cast(%var_3047, dtype="int8") /* ty=Tensor[(1260), int8] */;
  %360 = reshape(%358, newshape=[9, 14, 10]) /* ty=Tensor[(9, 14, 10), int8] */;
  %361 = reshape(%359, newshape=[9, 14, 10]) /* ty=Tensor[(9, 14, 10), int8] */;
  %362 = @func_2384(%360, %361) /* ty=(Tensor[(9, 14, 10), int8], Tensor[(3, 420), float64], Tensor[(10, 45), uint16], Tensor[(6, 14, 15), bool], Tensor[(5, 11, 3), bool], Tensor[(165), uint8]) */;
  %363 = @func_2786() /* ty=Tensor[(1, 7, 11), float64] */;
  %364 = %362.1;
  (%363, %364, %var_3047)
}

def @func_5014() -> (Tensor[(294), uint32],) {
  %365 = @func_4933() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(7, 14, 3), uint32], Tensor[(294), uint32]) */;
  %366 = %365.2;
  (%366,)
}

def @func_8018() -> Tensor[(1, 7, 11), float64] {
  %367 = @func_5906() /* ty=(Tensor[(480), float32], Tensor[(1, 7, 11), float64]) */;
  %367.1
}

def @func_3723() -> Tensor[(1, 7, 11), float64] {
  %368 = @func_3406() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(39), float32], Tensor[(420), float32]) */;
  %368.0
}

def @func_6115(%var_6108: Tensor[(3, 5, 16), float64]) -> Tensor[(3, 5, 16), float64] {
  %369 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 5, 16), float64] */, dtype="float64") /* ty=Tensor[(1, 5, 16), float64] */;
  %370 = cast(%var_6108, dtype="float64") /* ty=Tensor[(3, 5, 16), float64] */;
  floor_divide(%369, %370) /* ty=Tensor[(3, 5, 16), float64] */
}

def @func_3109(%var_3088: Tensor[(13, 4, 11), uint64], %var_3089: Tensor[(13, 4, 11), uint64]) -> Tensor[(13, 4, 11), uint64] {
  %371 = cast(%var_3089, dtype="uint64") /* ty=Tensor[(13, 4, 11), uint64] */;
  %372 = shape_of(%var_3088, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%var_3088, dtype="uint64") /* ty=Tensor[(13, 4, 11), uint64] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  bitwise_and(%373, %374) /* ty=Tensor[(13, 4, 11), uint64] */
}

def @func_7159() -> (Tensor[(3, 420), float32], Tensor[(1, 7, 11), float64]) {
  %375 = @func_6996() /* ty=(Tensor[(5, 11, 3), bool], Tensor[(3, 420), float32]) */;
  %376 = @func_5906() /* ty=(Tensor[(480), float32], Tensor[(1, 7, 11), float64]) */;
  %377 = %375.1;
  %378 = %376.1;
  (%377, %378)
}

def @func_2384(%var_2337: Tensor[(9, 14, 10), int8], %var_2338: Tensor[(9, 14, 10), int8]) -> (Tensor[(9, 14, 10), int8], Tensor[(3, 420), float64], Tensor[(10, 45), uint16], Tensor[(6, 14, 15), bool], Tensor[(5, 11, 3), bool], Tensor[(165), uint8]) {
  %379 = cast(%var_2338, dtype="int8") /* ty=Tensor[(9, 14, 10), int8] */;
  %380 = shape_of(%var_2337, dtype="int32") /* ty=Tensor[(3), int32] */;
  %381 = cast(%var_2337, dtype="int8") /* ty=Tensor[(9, 14, 10), int8] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %383 = left_shift(%381, %382) /* ty=Tensor[(9, 14, 10), int8] */;
  %384 = cast(%383, dtype="int8") /* ty=Tensor[(9, 14, 10), int8] */;
  %385 = shape_of(%var_2338, dtype="int32") /* ty=Tensor[(3), int32] */;
  %386 = cast(%var_2338, dtype="int8") /* ty=Tensor[(9, 14, 10), int8] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %388 = cast(meta[relay.Constant][30] /* ty=Tensor[(10, 45), uint16] */, dtype="uint16") /* ty=Tensor[(10, 45), uint16] */;
  %389 = cast(meta[relay.Constant][30] /* ty=Tensor[(10, 45), uint16] */, dtype="uint16") /* ty=Tensor[(10, 45), uint16] */;
  %390 = reshape(%388, newshape=[5, 10, 9]) /* ty=Tensor[(5, 10, 9), uint16] */;
  %391 = reshape(%389, newshape=[5, 10, 9]) /* ty=Tensor[(5, 10, 9), uint16] */;
  %392 = @func_1794(%390, %391) /* ty=(Tensor[(13, 4, 8), float32], Tensor[(416), float32], Tensor[(5, 10, 9), float32], Tensor[(6, 14, 15), float64], Tensor[(3, 420), float64]) */;
  %393 = cast(%var_2337, dtype="float64") /* ty=Tensor[(9, 14, 10), float64] */;
  %394 = reshape(%393, newshape=[6, 14, 15]) /* ty=Tensor[(6, 14, 15), float64] */;
  %395 = @func_412(%394) /* ty=(Tensor[(6, 14, 15), bool], Tensor[(6, 14, 15), float64]) */;
  %396 = cast(meta[relay.Constant][31] /* ty=Tensor[(165), uint8] */, dtype="uint8") /* ty=Tensor[(165), uint8] */;
  %397 = cast(meta[relay.Constant][31] /* ty=Tensor[(165), uint8] */, dtype="uint8") /* ty=Tensor[(165), uint8] */;
  %398 = reshape(%396, newshape=[5, 11, 3]) /* ty=Tensor[(5, 11, 3), uint8] */;
  %399 = reshape(%397, newshape=[5, 11, 3]) /* ty=Tensor[(5, 11, 3), uint8] */;
  %400 = bitwise_and(%386, %387) /* ty=Tensor[(9, 14, 10), int8] */;
  %401 = %392.4;
  %402 = %395.0;
  %403 = @func_38(%398, %399) /* ty=Tensor[(5, 11, 3), bool] */;
  (%400, %401, meta[relay.Constant][30] /* ty=Tensor[(10, 45), uint16] */, %402, %403, meta[relay.Constant][31] /* ty=Tensor[(165), uint8] */)
}

def @func_7049() -> (Tensor[(12, 15, 9), bool],) {
  %404 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %405 = cast(meta[relay.Constant][32] /* ty=Tensor[(12, 15, 9), bool] */, dtype="bool") /* ty=Tensor[(12, 15, 9), bool] */;
  %406 = logical_and(%404, %405) /* ty=Tensor[(12, 15, 9), bool] */;
  (%406,)
}

def @func_2723() -> Tensor[(1, 7, 11), float64] {
  %407 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 7, 11), float64] */, dtype="float64") /* ty=Tensor[(1, 7, 11), float64] */;
  log10(%407) /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_8005(%var_7990: Tensor[(12, 15, 9), float32]) -> (Tensor[(12, 15, 9), float64],) {
  %408 = @func_7049() /* ty=(Tensor[(12, 15, 9), bool],) */;
  %409 = %408.0;
  %410 = cast(%409, dtype="float32") /* ty=Tensor[(12, 15, 9), float32] */;
  %411 = log(%410) /* ty=Tensor[(12, 15, 9), float32] */;
  %412 = cast(%var_7990, dtype="bool") /* ty=Tensor[(12, 15, 9), bool] */;
  %413 = shape_of(%411, dtype="int32") /* ty=Tensor[(3), int32] */;
  %414 = cast(%411, dtype="bool") /* ty=Tensor[(12, 15, 9), bool] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %416 = not_equal(%414, %415) /* ty=Tensor[(12, 15, 9), bool] */;
  %417 = cast(%416, dtype="float64") /* ty=Tensor[(12, 15, 9), float64] */;
  %418 = acos(%417) /* ty=Tensor[(12, 15, 9), float64] */;
  (%418,)
}

def @func_8464() -> (Tensor[(294), uint32],) {
  %419 = @func_5014() /* ty=(Tensor[(294), uint32],) */;
  %420 = %419.0;
  (%420,)
}

def @func_3675(%var_3652: Tensor[(7, 14, 3), uint32]) -> (Tensor[(7, 14, 3), uint32],) {
  %421 = cast(%var_3652, dtype="uint32") /* ty=Tensor[(7, 14, 3), uint32] */;
  %422 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(7, 14, 3), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %423 = cast(meta[relay.Constant][34] /* ty=Tensor[(7, 14, 3), uint32] */, dtype="uint32") /* ty=Tensor[(7, 14, 3), uint32] */;
  %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %425 = maximum(%423, %424) /* ty=Tensor[(7, 14, 3), uint32] */;
  (%425,)
}

def @func_4276() -> (Tensor[(1, 7, 11), float64],) {
  %426 = @func_3776() /* ty=(Tensor[(1, 7, 11), float64],) */;
  %427 = %426.0;
  (%427,)
}

def @func_7385(%var_7366: Tensor[(7, 3, 11), float64]) -> (Tensor[(7, 3, 11), int64], Tensor[(1, 7, 11), float64]) {
  %428 = cast(meta[relay.Constant][35] /* ty=Tensor[(7, 3, 11), float64] */, dtype="float64") /* ty=Tensor[(7, 3, 11), float64] */;
  %429 = shape_of(%var_7366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %430 = cast(%var_7366, dtype="float64") /* ty=Tensor[(7, 3, 11), float64] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %432 = power(%430, %431) /* ty=Tensor[(7, 3, 11), float64] */;
  %433 = cast(%var_7366, dtype="bool") /* ty=Tensor[(7, 3, 11), bool] */;
  %434 = shape_of(%432, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%432, dtype="bool") /* ty=Tensor[(7, 3, 11), bool] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %437 = logical_and(%435, %436) /* ty=Tensor[(7, 3, 11), bool] */;
  %438 = cast(%437, dtype="int64") /* ty=Tensor[(7, 3, 11), int64] */;
  %439 = shape_of(%432, dtype="int32") /* ty=Tensor[(3), int32] */;
  %440 = cast(%432, dtype="int64") /* ty=Tensor[(7, 3, 11), int64] */;
  %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %442 = @func_7336() /* ty=(Tensor[(1, 7, 11), float64],) */;
  %443 = bitwise_and(%440, %441) /* ty=Tensor[(7, 3, 11), int64] */;
  %444 = %442.0;
  (%443, %444)
}

def @func_6102(%var_6073: Tensor[(420), float32]) -> (Tensor[(1260), int8], Tensor[(6, 14, 15), bool], Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64], Tensor[(?, 7, 11), float64], Tensor[(39), float32], Tensor[(420), float32], Tensor[(1, 7, 11), float64], Tensor[(294), uint32], Tensor[(6, 7, 11), int16]) {
  %445 = @func_4815() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1260), int8]) */;
  %446 = %445.2;
  %447 = cast(%446, dtype="float64") /* ty=Tensor[(1260), float64] */;
  %448 = reshape(%447, newshape=[6, 14, 15]) /* ty=Tensor[(6, 14, 15), float64] */;
  %449 = @func_412(%448) /* ty=(Tensor[(6, 14, 15), bool], Tensor[(6, 14, 15), float64]) */;
  %450 = @func_4871() /* ty=Tensor[(1, 7, 11), float64] */;
  %451 = cast(%450, dtype="float64") /* ty=Tensor[(1, 7, 11), float64] */;
  %452 = @func_2786() /* ty=Tensor[(1, 7, 11), float64] */;
  %453 = cast(%450, dtype="float64") /* ty=Tensor[(1, 7, 11), float64] */;
  %454 = shape_of(%452, dtype="int32") /* ty=Tensor[(3), int32] */;
  %455 = cast(%452, dtype="float64") /* ty=Tensor[(1, 7, 11), float64] */;
  %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %457 = cast(%var_6073, dtype="float32") /* ty=Tensor[(420), float32] */;
  %458 = reshape(%457, newshape=[14, 10, 3]) /* ty=Tensor[(14, 10, 3), float32] */;
  %459 = @func_1475(%458) /* ty=(Tensor[(14, 10, 3), float32], Tensor[(165), uint8], Tensor[(39), float32], Tensor[(13, 15), float32], Tensor[(1, 165), uint8], Tensor[(520), uint32]) */;
  %460 = @func_5014() /* ty=(Tensor[(294), uint32],) */;
  %461 = %449.0;
  %462 = cast(%461, dtype="float64") /* ty=Tensor[(6, 14, 15), float64] */;
  %463 = reshape(%462, newshape=[3, 420]) /* ty=Tensor[(3, 420), float64] */;
  %464 = @func_5949(%463) /* ty=(Tensor[(6, 7, 11), int16], Tensor[(462), float64], Tensor[(3, 420), bool]) */;
  %465 = sin(%451) /* ty=Tensor[(1, 7, 11), float64] */;
  %466 = @func_5870() /* ty=Tensor[(1, 7, 11), float64] */;
  %467 = mod(%455, %456) /* ty=Tensor[(?, 7, 11), float64] */;
  %468 = %459.2;
  %469 = @func_5870() /* ty=Tensor[(1, 7, 11), float64] */;
  %470 = %460.0;
  %471 = %464.0;
  (%446, %461, %465, %466, %467, %468, %var_6073, %469, %470, %471)
}

def @func_7651() -> (Tensor[(1, 7, 11), float64],) {
  %472 = @func_6822() /* ty=(Tensor[(1, 7, 11), float64],) */;
  %473 = %472.0;
  (%473,)
}

def @func_4815() -> (Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1260), int8]) {
  %474 = cast(meta[relay.Constant][36] /* ty=Tensor[(1260), int8] */, dtype="int8") /* ty=Tensor[(1260), int8] */;
  %475 = reshape(%474, newshape=[1260]) /* ty=Tensor[(1260), int8] */;
  %476 = @func_3052(%475) /* ty=(Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1260), int8]) */;
  %477 = @func_4299() /* ty=Tensor[(1, 7, 11), float64] */;
  %478 = %476.1;
  (%477, %478, meta[relay.Constant][36] /* ty=Tensor[(1260), int8] */)
}

def @func_2959(%var_2945: Tensor[(3, 16, 10), float32], %var_2946: Tensor[(3, 16, 10), float32]) -> Tensor[(3, 16, 10), float32] {
  %479 = cast(%var_2946, dtype="float32") /* ty=Tensor[(3, 16, 10), float32] */;
  %480 = shape_of(%var_2945, dtype="int32") /* ty=Tensor[(3), int32] */;
  %481 = cast(%var_2945, dtype="float32") /* ty=Tensor[(3, 16, 10), float32] */;
  %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%481, %482) /* ty=Tensor[(3, 16, 10), float32] */
}

def @func_7014() -> (Tensor[(1, 7, 11), float64],) {
  %483 = @func_4060() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1, 1260), int8]) */;
  %484 = %483.0;
  (%484,)
}

def @func_3644() -> (Tensor[(1, 7, 11), float64], Tensor[(1260), int8], Tensor[(5, 11, 3), float64]) {
  %485 = @func_3406() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(39), float32], Tensor[(420), float32]) */;
  %486 = cast(meta[relay.Constant][37] /* ty=Tensor[(1260), int8] */, dtype="int8") /* ty=Tensor[(1260), int8] */;
  %487 = cast(meta[relay.Constant][37] /* ty=Tensor[(1260), int8] */, dtype="int8") /* ty=Tensor[(1260), int8] */;
  %488 = reshape(%486, newshape=[9, 14, 10]) /* ty=Tensor[(9, 14, 10), int8] */;
  %489 = reshape(%487, newshape=[9, 14, 10]) /* ty=Tensor[(9, 14, 10), int8] */;
  %490 = @func_2384(%488, %489) /* ty=(Tensor[(9, 14, 10), int8], Tensor[(3, 420), float64], Tensor[(10, 45), uint16], Tensor[(6, 14, 15), bool], Tensor[(5, 11, 3), bool], Tensor[(165), uint8]) */;
  %491 = %490.4;
  %492 = cast(%491, dtype="float64") /* ty=Tensor[(5, 11, 3), float64] */;
  %493 = %485.0;
  %494 = atanh(%492) /* ty=Tensor[(5, 11, 3), float64] */;
  (%493, meta[relay.Constant][37] /* ty=Tensor[(1260), int8] */, %494)
}

def @func_4656() -> Tensor[(1, 7, 11), float64] {
  @func_2786() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_6410(%var_6390: Tensor[(1200), int64], %var_6391: Tensor[(195, 1), float32], %var_6393: Tensor[(1, 520), uint32], %var_6401: Tensor[(294), uint32]) -> (Tensor[(1, 1260), float64], Tensor[(6, 14, 15), float64], Tensor[(520), uint32], Tensor[(1200), int64], Tensor[(1, 520), uint32], Tensor[(7, 14, 3), uint32], Tensor[(294), uint32], Tensor[(195, 165), uint16]) {
  %495 = @func_5578() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(1, 1260), float64], Tensor[(1, 7, 11), float64], Tensor[(195), float32], Tensor[(6, 14, 15), uint16]) */;
  %496 = %495.1;
  %497 = cast(%496, dtype="float64") /* ty=Tensor[(1, 1260), float64] */;
  %498 = reshape(%497, newshape=[6, 14, 15]) /* ty=Tensor[(6, 14, 15), float64] */;
  %499 = @func_412(%498) /* ty=(Tensor[(6, 14, 15), bool], Tensor[(6, 14, 15), float64]) */;
  %500 = cast(%var_6390, dtype="int64") /* ty=Tensor[(1200), int64] */;
  %501 = cast(%var_6390, dtype="int64") /* ty=Tensor[(1200), int64] */;
  %502 = cast(%var_6391, dtype="float32") /* ty=Tensor[(195, 1), float32] */;
  %503 = cast(meta[relay.Constant][38] /* ty=Tensor[(165), uint8] */, dtype="uint8") /* ty=Tensor[(165), uint8] */;
  %504 = cast(%var_6393, dtype="uint32") /* ty=Tensor[(1, 520), uint32] */;
  %505 = reshape(%500, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int64] */;
  %506 = reshape(%501, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int64] */;
  %507 = reshape(%502, newshape=[195]) /* ty=Tensor[(195), float32] */;
  %508 = reshape(%503, newshape=[165]) /* ty=Tensor[(165), uint8] */;
  %509 = reshape(%504, newshape=[520]) /* ty=Tensor[(520), uint32] */;
  %510 = @func_2553(%505, %506, %507, %508, %509) /* ty=(Tensor[(10, 10, 12), bool], Tensor[(520), uint32], Tensor[(39), float32], Tensor[(195), float32], Tensor[(165), uint8], Tensor[(520), uint32]) */;
  %511 = cast(%var_6401, dtype="uint32") /* ty=Tensor[(294), uint32] */;
  %512 = reshape(%511, newshape=[7, 14, 3]) /* ty=Tensor[(7, 14, 3), uint32] */;
  %513 = @func_3675(%512) /* ty=(Tensor[(7, 14, 3), uint32],) */;
  %514 = cast(%var_6391, dtype="uint16") /* ty=Tensor[(195, 1), uint16] */;
  %515 = cast(meta[relay.Constant][38] /* ty=Tensor[(165), uint8] */, dtype="uint16") /* ty=Tensor[(165), uint16] */;
  %516 = %499.1;
  %517 = %510.1;
  %518 = %513.0;
  %519 = bitwise_or(%514, %515) /* ty=Tensor[(195, 165), uint16] */;
  (%496, %516, %517, %var_6390, %var_6393, %518, %var_6401, %519)
}

def @func_6520(%var_6496: Tensor[(195), float32]) -> (Tensor[(1, 7, 11), float64], Tensor[(195), float32], Tensor[(195), float32], Tensor[(480), float32]) {
  %520 = cast(%var_6496, dtype="float32") /* ty=Tensor[(195), float32] */;
  %521 = reshape(%520, newshape=[195]) /* ty=Tensor[(195), float32] */;
  %522 = @func_5435(%521) /* ty=(Tensor[(1, 7, 11), float64], Tensor[(165), uint8], Tensor[(1, 39), float32], Tensor[(195), float32], Tensor[(165), uint8], Tensor[(520), uint32]) */;
  %523 = @func_5037() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(480), float32], Tensor[(480), float32]) */;
  %524 = @func_4656() /* ty=Tensor[(1, 7, 11), float64] */;
  %525 = %522.3;
  %526 = %523.2;
  (%524, %525, %var_6496, %526)
}

def @func_4933() -> (Tensor[(1, 7, 11), float64], Tensor[(7, 14, 3), uint32], Tensor[(294), uint32]) {
  %527 = @func_4060() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1, 1260), int8]) */;
  %528 = cast(meta[relay.Constant][39] /* ty=Tensor[(294), uint32] */, dtype="uint32") /* ty=Tensor[(294), uint32] */;
  %529 = reshape(%528, newshape=[7, 14, 3]) /* ty=Tensor[(7, 14, 3), uint32] */;
  %530 = @func_3675(%529) /* ty=(Tensor[(7, 14, 3), uint32],) */;
  %531 = %527.0;
  %532 = %530.0;
  (%531, %532, meta[relay.Constant][39] /* ty=Tensor[(294), uint32] */)
}

def @main() -> (Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(168), float64], Tensor[(1560), float64]) {
  %533 = @func_7159() /* ty=(Tensor[(3, 420), float32], Tensor[(1, 7, 11), float64]) */;
  %534 = @func_4815() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1260), int8]) */;
  %535 = cast(meta[relay.Constant][40] /* ty=Tensor[(1560), float64] */, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %536 = cast(meta[relay.Constant][40] /* ty=Tensor[(1560), float64] */, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %537 = reshape(%535, newshape=[10, 13, 12]) /* ty=Tensor[(10, 13, 12), float64] */;
  %538 = reshape(%536, newshape=[10, 13, 12]) /* ty=Tensor[(10, 13, 12), float64] */;
  %539 = @func_8280(%537, %538) /* ty=(Tensor[(10, 13, 12), float64], Tensor[(1, 7, 11), float64], Tensor[(4, 3, 14), float64], Tensor[(168), float64], Tensor[(1, 7, 11), float64]) */;
  %540 = cast(meta[relay.Constant][41] /* ty=Tensor[(1560), float64] */, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %541 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(1560), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %542 = cast(meta[relay.Constant][40] /* ty=Tensor[(1560), float64] */, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %543 = dyn.reshape(%540, %541, newshape=[]) /* ty=Tensor[(?), float64] */;
  %544 = %533.1;
  %545 = %534.1;
  %546 = %539.3;
  %547 = floor_divide(%542, %543) /* ty=Tensor[(1560), float64] */;
  (%544, %545, %546, %547)
}

def @func_4672() -> Tensor[(1, 7, 11), float64] {
  @func_4323() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_1741(%var_1737: Tensor[(13, 4, 8), float32]) -> (Tensor[(13, 4, 8), float32],) {
  %548 = cast(%var_1737, dtype="float32") /* ty=Tensor[(13, 4, 8), float32] */;
  %549 = rsqrt(%548) /* ty=Tensor[(13, 4, 8), float32] */;
  (%549,)
}

def @func_1475(%var_1428: Tensor[(14, 10, 3), float32]) -> (Tensor[(14, 10, 3), float32], Tensor[(165), uint8], Tensor[(39), float32], Tensor[(13, 15), float32], Tensor[(1, 165), uint8], Tensor[(520), uint32]) {
  %550 = cast(%var_1428, dtype="float32") /* ty=Tensor[(14, 10, 3), float32] */;
  %551 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(14, 10, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(meta[relay.Constant][42] /* ty=Tensor[(14, 10, 3), float32] */, dtype="float32") /* ty=Tensor[(14, 10, 3), float32] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %554 = cast(meta[relay.Constant][43] /* ty=Tensor[(39), float32] */, dtype="float32") /* ty=Tensor[(39), float32] */;
  %555 = cast(meta[relay.Constant][44] /* ty=Tensor[(13, 15), float32] */, dtype="float32") /* ty=Tensor[(13, 15), float32] */;
  %556 = cast(meta[relay.Constant][45] /* ty=Tensor[(1, 165), uint8] */, dtype="uint8") /* ty=Tensor[(1, 165), uint8] */;
  %557 = cast(meta[relay.Constant][46] /* ty=Tensor[(520), uint32] */, dtype="uint32") /* ty=Tensor[(520), uint32] */;
  %558 = reshape(%554, newshape=[1, 3, 13]) /* ty=Tensor[(1, 3, 13), float32] */;
  %559 = reshape(%555, newshape=[5, 3, 13]) /* ty=Tensor[(5, 3, 13), float32] */;
  %560 = reshape(%556, newshape=[165]) /* ty=Tensor[(165), uint8] */;
  %561 = reshape(%557, newshape=[520]) /* ty=Tensor[(520), uint32] */;
  %562 = @func_217(%558, %559, %560, %561) /* ty=(Tensor[(5, 3, 13), float32], Tensor[(5, 11, 3), bool], Tensor[(165), uint8], Tensor[(8, 13, 5), bool], Tensor[(520), uint32], Tensor[(8, 13, 5), bool]) */;
  %563 = mod(%552, %553) /* ty=Tensor[(14, 10, 3), float32] */;
  %564 = %562.2;
  (%563, %564, meta[relay.Constant][43] /* ty=Tensor[(39), float32] */, meta[relay.Constant][44] /* ty=Tensor[(13, 15), float32] */, meta[relay.Constant][45] /* ty=Tensor[(1, 165), uint8] */, meta[relay.Constant][46] /* ty=Tensor[(520), uint32] */)
}

def @func_3185() -> (Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64]) {
  %565 = @func_2775() /* ty=Tensor[(1, 7, 11), float64] */;
  %566 = @func_2908() /* ty=Tensor[(1, 7, 11), float64] */;
  (%565, %566)
}

def @func_5037() -> (Tensor[(1, 7, 11), float64], Tensor[(480), float32], Tensor[(480), float32]) {
  %567 = cast(meta[relay.Constant][47] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %568 = reshape(%567, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %569 = @func_3744(%568) /* ty=(Tensor[(420), float32], Tensor[(3, 16, 10), float32], Tensor[(480), float32]) */;
  %570 = @func_4871() /* ty=Tensor[(1, 7, 11), float64] */;
  %571 = %569.2;
  (%570, %571, meta[relay.Constant][47] /* ty=Tensor[(480), float32] */)
}

def @func_166(%var_157: Tensor[(8, 13, 5), uint32], %var_158: Tensor[(8, 13, 5), uint32]) -> Tensor[(8, 13, 5), bool] {
  %572 = cast(%var_158, dtype="bool") /* ty=Tensor[(8, 13, 5), bool] */;
  %573 = shape_of(%var_157, dtype="int32") /* ty=Tensor[(3), int32] */;
  %574 = cast(%var_157, dtype="bool") /* ty=Tensor[(8, 13, 5), bool] */;
  %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%574, %575) /* ty=Tensor[(8, 13, 5), bool] */
}

def @func_4993(%var_4988: Tensor[(6, 3, 3), float64], %var_4989: Tensor[(6, 3, 3), float64]) -> Tensor[(6, 3, 3), float64] {
  %576 = cast(%var_4989, dtype="float64") /* ty=Tensor[(6, 3, 3), float64] */;
  %577 = shape_of(%var_4988, dtype="int32") /* ty=Tensor[(3), int32] */;
  %578 = cast(%var_4988, dtype="float64") /* ty=Tensor[(6, 3, 3), float64] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%578, %579) /* ty=Tensor[(6, 3, 3), float64] */
}

def @func_2884(%var_2869: Tensor[(1200), int64], %var_2870: Tensor[(195), float32]) -> (Tensor[(1, 7, 11), float64], Tensor[(165), uint8], Tensor[(1200), int64], Tensor[(195), float32], Tensor[(165), uint8], Tensor[(520), uint32]) {
  %580 = cast(%var_2869, dtype="int64") /* ty=Tensor[(1200), int64] */;
  %581 = cast(%var_2869, dtype="int64") /* ty=Tensor[(1200), int64] */;
  %582 = cast(%var_2870, dtype="float32") /* ty=Tensor[(195), float32] */;
  %583 = cast(meta[relay.Constant][48] /* ty=Tensor[(165), uint8] */, dtype="uint8") /* ty=Tensor[(165), uint8] */;
  %584 = cast(meta[relay.Constant][49] /* ty=Tensor[(520), uint32] */, dtype="uint32") /* ty=Tensor[(520), uint32] */;
  %585 = reshape(%580, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int64] */;
  %586 = reshape(%581, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int64] */;
  %587 = reshape(%582, newshape=[195]) /* ty=Tensor[(195), float32] */;
  %588 = reshape(%583, newshape=[165]) /* ty=Tensor[(165), uint8] */;
  %589 = reshape(%584, newshape=[520]) /* ty=Tensor[(520), uint32] */;
  %590 = @func_2553(%585, %586, %587, %588, %589) /* ty=(Tensor[(10, 10, 12), bool], Tensor[(520), uint32], Tensor[(39), float32], Tensor[(195), float32], Tensor[(165), uint8], Tensor[(520), uint32]) */;
  %591 = @func_2723() /* ty=Tensor[(1, 7, 11), float64] */;
  %592 = %590.4;
  (%591, %592, %var_2869, %var_2870, meta[relay.Constant][48] /* ty=Tensor[(165), uint8] */, meta[relay.Constant][49] /* ty=Tensor[(520), uint32] */)
}

def @func_2553(%var_2537: Tensor[(10, 10, 12), int64], %var_2538: Tensor[(10, 10, 12), int64], %var_2544: Tensor[(195), float32], %var_2545: Tensor[(165), uint8], %var_2546: Tensor[(520), uint32]) -> (Tensor[(10, 10, 12), bool], Tensor[(520), uint32], Tensor[(39), float32], Tensor[(195), float32], Tensor[(165), uint8], Tensor[(520), uint32]) {
  %593 = cast(%var_2538, dtype="bool") /* ty=Tensor[(10, 10, 12), bool] */;
  %594 = shape_of(%var_2537, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(%var_2537, dtype="bool") /* ty=Tensor[(10, 10, 12), bool] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %597 = cast(meta[relay.Constant][50] /* ty=Tensor[(39), float32] */, dtype="float32") /* ty=Tensor[(39), float32] */;
  %598 = cast(%var_2544, dtype="float32") /* ty=Tensor[(195), float32] */;
  %599 = cast(%var_2545, dtype="uint8") /* ty=Tensor[(165), uint8] */;
  %600 = cast(%var_2546, dtype="uint32") /* ty=Tensor[(520), uint32] */;
  %601 = reshape(%597, newshape=[1, 3, 13]) /* ty=Tensor[(1, 3, 13), float32] */;
  %602 = reshape(%598, newshape=[5, 3, 13]) /* ty=Tensor[(5, 3, 13), float32] */;
  %603 = reshape(%599, newshape=[165]) /* ty=Tensor[(165), uint8] */;
  %604 = reshape(%600, newshape=[520]) /* ty=Tensor[(520), uint32] */;
  %605 = @func_217(%601, %602, %603, %604) /* ty=(Tensor[(5, 3, 13), float32], Tensor[(5, 11, 3), bool], Tensor[(165), uint8], Tensor[(8, 13, 5), bool], Tensor[(520), uint32], Tensor[(8, 13, 5), bool]) */;
  %606 = greater_equal(%595, %596) /* ty=Tensor[(10, 10, 12), bool] */;
  %607 = %605.4;
  (%606, %607, meta[relay.Constant][50] /* ty=Tensor[(39), float32] */, %var_2544, %var_2545, %var_2546)
}

def @func_5435(%var_5431: Tensor[(195), float32]) -> (Tensor[(1, 7, 11), float64], Tensor[(165), uint8], Tensor[(1, 39), float32], Tensor[(195), float32], Tensor[(165), uint8], Tensor[(520), uint32]) {
  %608 = cast(meta[relay.Constant][51] /* ty=Tensor[(1, 39), float32] */, dtype="float32") /* ty=Tensor[(1, 39), float32] */;
  %609 = cast(%var_5431, dtype="float32") /* ty=Tensor[(195), float32] */;
  %610 = cast(meta[relay.Constant][52] /* ty=Tensor[(165), uint8] */, dtype="uint8") /* ty=Tensor[(165), uint8] */;
  %611 = cast(meta[relay.Constant][53] /* ty=Tensor[(520), uint32] */, dtype="uint32") /* ty=Tensor[(520), uint32] */;
  %612 = reshape(%608, newshape=[1, 3, 13]) /* ty=Tensor[(1, 3, 13), float32] */;
  %613 = reshape(%609, newshape=[5, 3, 13]) /* ty=Tensor[(5, 3, 13), float32] */;
  %614 = reshape(%610, newshape=[165]) /* ty=Tensor[(165), uint8] */;
  %615 = reshape(%611, newshape=[520]) /* ty=Tensor[(520), uint32] */;
  %616 = @func_217(%612, %613, %614, %615) /* ty=(Tensor[(5, 3, 13), float32], Tensor[(5, 11, 3), bool], Tensor[(165), uint8], Tensor[(8, 13, 5), bool], Tensor[(520), uint32], Tensor[(8, 13, 5), bool]) */;
  %617 = @func_4341() /* ty=Tensor[(1, 7, 11), float64] */;
  %618 = %616.2;
  (%617, %618, meta[relay.Constant][51] /* ty=Tensor[(1, 39), float32] */, %var_5431, meta[relay.Constant][52] /* ty=Tensor[(165), uint8] */, meta[relay.Constant][53] /* ty=Tensor[(520), uint32] */)
}

def @func_5491(%var_5451: Tensor[(2, 7, 11), float64]) -> (Tensor[(2, 7, 11), bool], Tensor[(1, 7, 11), float64], Tensor[(2, 7, 11), float64]) {
  %619 = @func_5321() /* ty=Tensor[(1, 7, 11), float64] */;
  %620 = cast(%619, dtype="bool") /* ty=Tensor[(1, 7, 11), bool] */;
  %621 = cast(%var_5451, dtype="bool") /* ty=Tensor[(2, 7, 11), bool] */;
  %622 = cast(%var_5451, dtype="float32") /* ty=Tensor[(2, 7, 11), float32] */;
  %623 = rsqrt(%622) /* ty=Tensor[(2, 7, 11), float32] */;
  %624 = cast(%623, dtype="float64") /* ty=Tensor[(2, 7, 11), float64] */;
  %625 = less_equal(%620, %621) /* ty=Tensor[(2, 7, 11), bool] */;
  %626 = @func_4323() /* ty=Tensor[(1, 7, 11), float64] */;
  %627 = tan(%624) /* ty=Tensor[(2, 7, 11), float64] */;
  (%625, %626, %627)
}

def @func_3986() -> Tensor[(1, 7, 11), float64] {
  @func_2775() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_5870() -> Tensor[(1, 7, 11), float64] {
  %628 = @func_5155() /* ty=(Tensor[(1, 7, 11), float64],) */;
  %628.0
}

def @func_5686(%var_5598: Tensor[(1260), int8], %var_5637: Tensor[(462), float64]) -> (Tensor[(10, 45), uint16], Tensor[(1260), int8], Tensor[(6, 14, 15), bool], Tensor[(?, 7, 11), float64], Tensor[(165), uint8], Tensor[(462), float64], Tensor[(6, 7, 11), bool], Tensor[(1, 7, 11), float32], Tensor[(1, 7, 11), float64], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) {
  %629 = cast(%var_5598, dtype="int8") /* ty=Tensor[(1260), int8] */;
  %630 = cast(%var_5598, dtype="int8") /* ty=Tensor[(1260), int8] */;
  %631 = reshape(%629, newshape=[9, 14, 10]) /* ty=Tensor[(9, 14, 10), int8] */;
  %632 = reshape(%630, newshape=[9, 14, 10]) /* ty=Tensor[(9, 14, 10), int8] */;
  %633 = @func_2384(%631, %632) /* ty=(Tensor[(9, 14, 10), int8], Tensor[(3, 420), float64], Tensor[(10, 45), uint16], Tensor[(6, 14, 15), bool], Tensor[(5, 11, 3), bool], Tensor[(165), uint8]) */;
  %634 = cast(%var_5598, dtype="float64") /* ty=Tensor[(1260), float64] */;
  %635 = reshape(%634, newshape=[6, 14, 15]) /* ty=Tensor[(6, 14, 15), float64] */;
  %636 = @func_412(%635) /* ty=(Tensor[(6, 14, 15), bool], Tensor[(6, 14, 15), float64]) */;
  %637 = @func_4341() /* ty=Tensor[(1, 7, 11), float64] */;
  %638 = cast(%637, dtype="float64") /* ty=Tensor[(1, 7, 11), float64] */;
  %639 = sigmoid(%638) /* ty=Tensor[(1, 7, 11), float64] */;
  %640 = cast(%639, dtype="float64") /* ty=Tensor[(1, 7, 11), float64] */;
  %641 = shape_of(%637, dtype="int32") /* ty=Tensor[(3), int32] */;
  %642 = cast(%637, dtype="float64") /* ty=Tensor[(1, 7, 11), float64] */;
  %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %644 = %636.0;
  %645 = cast(%644, dtype="float64") /* ty=Tensor[(6, 14, 15), float64] */;
  %646 = reshape(%645, newshape=[3, 420]) /* ty=Tensor[(3, 420), float64] */;
  %647 = @func_4409(%646) /* ty=(Tensor[(5, 11, 3), bool], Tensor[(165), uint8], Tensor[(3, 420), uint32]) */;
  %648 = cast(%var_5637, dtype="float64") /* ty=Tensor[(462), float64] */;
  %649 = reshape(%648, newshape=[6, 7, 11]) /* ty=Tensor[(6, 7, 11), float64] */;
  %650 = @func_4959(%649) /* ty=(Tensor[(6, 7, 11), int16],) */;
  %651 = %650.0;
  %652 = cast(%637, dtype="bool") /* ty=Tensor[(1, 7, 11), bool] */;
  %653 = cast(%651, dtype="bool") /* ty=Tensor[(6, 7, 11), bool] */;
  %654 = cast(%639, dtype="float32") /* ty=Tensor[(1, 7, 11), float32] */;
  %655 = cast(meta[relay.Constant][54] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %656 = reshape(%655, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), float64] */;
  %657 = %633.2;
  %658 = floor_divide(%642, %643) /* ty=Tensor[(?, 7, 11), float64] */;
  %659 = %647.1;
  %660 = equal(%652, %653) /* ty=Tensor[(6, 7, 11), bool] */;
  %661 = asin(%654) /* ty=Tensor[(1, 7, 11), float32] */;
  %662 = @func_3786() /* ty=Tensor[(1, 7, 11), float64] */;
  %663 = @func_5301(%656) /* ty=Tensor[(8, 7, 13), float64] */;
  (%657, %var_5598, %644, %658, %659, %var_5637, %660, %661, %662, %663, meta[relay.Constant][54] /* ty=Tensor[(728), float64] */)
}

def @func_7280() -> (Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64]) {
  %664 = @func_5005() /* ty=(Tensor[(1, 7, 11), float64],) */;
  %665 = @func_2723() /* ty=Tensor[(1, 7, 11), float64] */;
  %666 = %664.0;
  (%665, %666)
}

def @func_5301(%var_5294: Tensor[(8, 7, 13), float64]) -> Tensor[(8, 7, 13), float64] {
  %667 = cast(%var_5294, dtype="float64") /* ty=Tensor[(8, 7, 13), float64] */;
  log(%667) /* ty=Tensor[(8, 7, 13), float64] */
}

def @func_3003(%var_2979: uint16, %var_2980: Tensor[(11, 1, 15), uint16]) -> (Tensor[(11, 1, 15), uint16], Tensor[(11, 1, 15), float32]) {
  %668 = cast(%var_2979, dtype="uint16") /* ty=uint16 */;
  %669 = cast(%var_2980, dtype="uint16") /* ty=Tensor[(11, 1, 15), uint16] */;
  %670 = cast(%var_2980, dtype="float32") /* ty=Tensor[(11, 1, 15), float32] */;
  %671 = acosh(%670) /* ty=Tensor[(11, 1, 15), float32] */;
  %672 = cast(%671, dtype="float32") /* ty=Tensor[(11, 1, 15), float32] */;
  %673 = log2(%672) /* ty=Tensor[(11, 1, 15), float32] */;
  %674 = cast(%673, dtype="float32") /* ty=Tensor[(11, 1, 15), float32] */;
  %675 = logical_xor(%668, %669) /* ty=Tensor[(11, 1, 15), uint16] */;
  %676 = atanh(%674) /* ty=Tensor[(11, 1, 15), float32] */;
  (%675, %676)
}

def @func_4409(%var_4396: Tensor[(3, 420), float64]) -> (Tensor[(5, 11, 3), bool], Tensor[(165), uint8], Tensor[(3, 420), uint32]) {
  %677 = cast(meta[relay.Constant][55] /* ty=Tensor[(165), uint8] */, dtype="uint8") /* ty=Tensor[(165), uint8] */;
  %678 = cast(meta[relay.Constant][55] /* ty=Tensor[(165), uint8] */, dtype="uint8") /* ty=Tensor[(165), uint8] */;
  %679 = reshape(%677, newshape=[5, 11, 3]) /* ty=Tensor[(5, 11, 3), uint8] */;
  %680 = reshape(%678, newshape=[5, 11, 3]) /* ty=Tensor[(5, 11, 3), uint8] */;
  %681 = @func_4060() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1, 1260), int8]) */;
  %682 = %681.1;
  %683 = cast(%var_4396, dtype="uint32") /* ty=Tensor[(3, 420), uint32] */;
  %684 = shape_of(%682, dtype="int32") /* ty=Tensor[(2), int32] */;
  %685 = cast(%682, dtype="uint32") /* ty=Tensor[(3, 420), uint32] */;
  %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %687 = @func_38(%679, %680) /* ty=Tensor[(5, 11, 3), bool] */;
  %688 = subtract(%685, %686) /* ty=Tensor[(3, 420), uint32] */;
  (%687, meta[relay.Constant][55] /* ty=Tensor[(165), uint8] */, %688)
}

def @func_3406() -> (Tensor[(1, 7, 11), float64], Tensor[(39), float32], Tensor[(420), float32]) {
  %689 = cast(meta[relay.Constant][56] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %690 = reshape(%689, newshape=[14, 10, 3]) /* ty=Tensor[(14, 10, 3), float32] */;
  %691 = @func_1475(%690) /* ty=(Tensor[(14, 10, 3), float32], Tensor[(165), uint8], Tensor[(39), float32], Tensor[(13, 15), float32], Tensor[(1, 165), uint8], Tensor[(520), uint32]) */;
  %692 = @func_2786() /* ty=Tensor[(1, 7, 11), float64] */;
  %693 = %691.2;
  (%692, %693, meta[relay.Constant][56] /* ty=Tensor[(420), float32] */)
}

def @func_2208(%var_2181: Tensor[(16, 26), float32], %var_2193: Tensor[(195), float32]) -> (Tensor[(2, 13, 10), bool], Tensor[(13, 4, 8), int32], Tensor[(165), uint8], Tensor[(195), float32], Tensor[(11, 15), uint8], Tensor[(520), uint32], Tensor[(39), float32]) {
  %694 = cast(meta[relay.Constant][58] /* ty=Tensor[(2, 13, 10), float64] */, dtype="bool") /* ty=Tensor[(2, 13, 10), bool] */;
  %695 = shape_of(meta[relay.Constant][57] /* ty=Tensor[(2, 13, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %696 = cast(meta[relay.Constant][57] /* ty=Tensor[(2, 13, 10), float64] */, dtype="bool") /* ty=Tensor[(2, 13, 10), bool] */;
  %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %698 = cast(%var_2181, dtype="float32") /* ty=Tensor[(16, 26), float32] */;
  %699 = reshape(%698, newshape=[13, 4, 8]) /* ty=Tensor[(13, 4, 8), float32] */;
  %700 = @func_1741(%699) /* ty=(Tensor[(13, 4, 8), float32],) */;
  %701 = %700.0;
  %702 = cast(%var_2181, dtype="int32") /* ty=Tensor[(16, 26), int32] */;
  %703 = shape_of(%701, dtype="int32") /* ty=Tensor[(3), int32] */;
  %704 = cast(%701, dtype="int32") /* ty=Tensor[(13, 4, 8), int32] */;
  %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %706 = cast(meta[relay.Constant][59] /* ty=Tensor[(39), float32] */, dtype="float32") /* ty=Tensor[(39), float32] */;
  %707 = cast(%var_2193, dtype="float32") /* ty=Tensor[(195), float32] */;
  %708 = cast(meta[relay.Constant][60] /* ty=Tensor[(11, 15), uint8] */, dtype="uint8") /* ty=Tensor[(11, 15), uint8] */;
  %709 = cast(meta[relay.Constant][61] /* ty=Tensor[(520), uint32] */, dtype="uint32") /* ty=Tensor[(520), uint32] */;
  %710 = reshape(%706, newshape=[1, 3, 13]) /* ty=Tensor[(1, 3, 13), float32] */;
  %711 = reshape(%707, newshape=[5, 3, 13]) /* ty=Tensor[(5, 3, 13), float32] */;
  %712 = reshape(%708, newshape=[165]) /* ty=Tensor[(165), uint8] */;
  %713 = reshape(%709, newshape=[520]) /* ty=Tensor[(520), uint32] */;
  %714 = @func_217(%710, %711, %712, %713) /* ty=(Tensor[(5, 3, 13), float32], Tensor[(5, 11, 3), bool], Tensor[(165), uint8], Tensor[(8, 13, 5), bool], Tensor[(520), uint32], Tensor[(8, 13, 5), bool]) */;
  %715 = cast(meta[relay.Constant][59] /* ty=Tensor[(39), float32] */, dtype="float32") /* ty=Tensor[(39), float32] */;
  %716 = not_equal(%696, %697) /* ty=Tensor[(2, 13, 10), bool] */;
  %717 = left_shift(%704, %705) /* ty=Tensor[(13, 4, 8), int32] */;
  %718 = %714.2;
  %719 = acos(%715) /* ty=Tensor[(39), float32] */;
  (%716, %717, %718, %var_2193, meta[relay.Constant][60] /* ty=Tensor[(11, 15), uint8] */, meta[relay.Constant][61] /* ty=Tensor[(520), uint32] */, %719)
}

def @func_5848(%var_5823: Tensor[(480, 1), float32], %var_5829: Tensor[(165), uint16], %var_5831: Tensor[(770), float64], %var_5845: Tensor[(195), float32]) -> (Tensor[(1, 7, 11), float64], Tensor[(420), float32], Tensor[(480, 1), float32], Tensor[(10, 7, 11), bool], Tensor[(165), uint16], Tensor[(1232), float64], Tensor[(770), float64], Tensor[(1, 7, 11), float64], Tensor[(195), float32]) {
  %720 = cast(%var_5823, dtype="float32") /* ty=Tensor[(480, 1), float32] */;
  %721 = reshape(%720, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %722 = @func_3744(%721) /* ty=(Tensor[(420), float32], Tensor[(3, 16, 10), float32], Tensor[(480), float32]) */;
  %723 = cast(%var_5829, dtype="uint16") /* ty=Tensor[(165), uint16] */;
  %724 = cast(meta[relay.Constant][62] /* ty=Tensor[(1232), float64] */, dtype="float64") /* ty=Tensor[(1232), float64] */;
  %725 = cast(%var_5831, dtype="float64") /* ty=Tensor[(770), float64] */;
  %726 = reshape(%723, newshape=[165]) /* ty=Tensor[(165), uint16] */;
  %727 = reshape(%724, newshape=[16, 7, 11]) /* ty=Tensor[(16, 7, 11), float64] */;
  %728 = reshape(%725, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), float64] */;
  %729 = @func_4564(%726, %727, %728) /* ty=(Tensor[(11, 1, 15), uint16], uint16, Tensor[(165), uint16], Tensor[(16, 7, 11), bool], Tensor[(10, 7, 11), bool], Tensor[(1, 7, 11), float64]) */;
  %730 = cast(%var_5845, dtype="float32") /* ty=Tensor[(195), float32] */;
  %731 = reshape(%730, newshape=[195]) /* ty=Tensor[(195), float32] */;
  %732 = @func_5435(%731) /* ty=(Tensor[(1, 7, 11), float64], Tensor[(165), uint8], Tensor[(1, 39), float32], Tensor[(195), float32], Tensor[(165), uint8], Tensor[(520), uint32]) */;
  %733 = @func_2908() /* ty=Tensor[(1, 7, 11), float64] */;
  %734 = %722.0;
  %735 = %729.4;
  %736 = %732.0;
  (%733, %734, %var_5823, %735, %var_5829, meta[relay.Constant][62] /* ty=Tensor[(1232), float64] */, %var_5831, %736, %var_5845)
}

def @func_5949(%var_5943: Tensor[(3, 420), float64]) -> (Tensor[(6, 7, 11), int16], Tensor[(462), float64], Tensor[(3, 420), bool]) {
  %737 = cast(meta[relay.Constant][63] /* ty=Tensor[(462), float64] */, dtype="float64") /* ty=Tensor[(462), float64] */;
  %738 = reshape(%737, newshape=[6, 7, 11]) /* ty=Tensor[(6, 7, 11), float64] */;
  %739 = @func_4959(%738) /* ty=(Tensor[(6, 7, 11), int16],) */;
  %740 = @func_4060() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1, 1260), int8]) */;
  %741 = %740.1;
  %742 = cast(%var_5943, dtype="bool") /* ty=Tensor[(3, 420), bool] */;
  %743 = shape_of(%741, dtype="int32") /* ty=Tensor[(2), int32] */;
  %744 = cast(%741, dtype="bool") /* ty=Tensor[(3, 420), bool] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %746 = %739.0;
  %747 = not_equal(%744, %745) /* ty=Tensor[(3, 420), bool] */;
  (%746, meta[relay.Constant][63] /* ty=Tensor[(462), float64] */, %747)
}

def @func_5321() -> Tensor[(1, 7, 11), float64] {
  @func_3723() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_541(%var_530: Tensor[(165), uint8]) -> (Tensor[(11, 4, 7), bool], Tensor[(5, 11, 3), bool], Tensor[(165), uint8], Tensor[(11, 4, 7), uint16]) {
  %748 = cast(meta[relay.Constant][65] /* ty=Tensor[(11, 4, 7), bool] */, dtype="bool") /* ty=Tensor[(11, 4, 7), bool] */;
  %749 = shape_of(meta[relay.Constant][64] /* ty=Tensor[(11, 4, 7), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %750 = cast(meta[relay.Constant][64] /* ty=Tensor[(11, 4, 7), bool] */, dtype="bool") /* ty=Tensor[(11, 4, 7), bool] */;
  %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %752 = cast(%var_530, dtype="uint8") /* ty=Tensor[(165), uint8] */;
  %753 = cast(%var_530, dtype="uint8") /* ty=Tensor[(165), uint8] */;
  %754 = reshape(%752, newshape=[5, 11, 3]) /* ty=Tensor[(5, 11, 3), uint8] */;
  %755 = reshape(%753, newshape=[5, 11, 3]) /* ty=Tensor[(5, 11, 3), uint8] */;
  %756 = cast(meta[relay.Constant][64] /* ty=Tensor[(11, 4, 7), bool] */, dtype="float32") /* ty=Tensor[(11, 4, 7), float32] */;
  %757 = log10(%756) /* ty=Tensor[(11, 4, 7), float32] */;
  %758 = cast(meta[relay.Constant][64] /* ty=Tensor[(11, 4, 7), bool] */, dtype="uint16") /* ty=Tensor[(11, 4, 7), uint16] */;
  %759 = shape_of(%757, dtype="int32") /* ty=Tensor[(3), int32] */;
  %760 = cast(%757, dtype="uint16") /* ty=Tensor[(11, 4, 7), uint16] */;
  %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %762 = logical_or(%750, %751) /* ty=Tensor[(11, 4, 7), bool] */;
  %763 = @func_38(%754, %755) /* ty=Tensor[(5, 11, 3), bool] */;
  %764 = left_shift(%760, %761) /* ty=Tensor[(11, 4, 7), uint16] */;
  (%762, %763, %var_530, %764)
}

def @func_6172(%var_6167: Tensor[(15, 2, 8), float64]) -> Tensor[(15, 2, 8), float64] {
  %765 = cast(%var_6167, dtype="float64") /* ty=Tensor[(15, 2, 8), float64] */;
  sigmoid(%765) /* ty=Tensor[(15, 2, 8), float64] */
}

def @func_6839() -> Tensor[(1, 7, 11), float64] {
  @func_5870() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_6851() -> (Tensor[(5, 11, 3), float64],) {
  %766 = @func_3644() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(1260), int8], Tensor[(5, 11, 3), float64]) */;
  %767 = %766.2;
  (%767,)
}

def @func_7555(%var_7533: Tensor[(13, 15), float32]) -> (Tensor[(1, 7, 11), float64], Tensor[(195), float32], Tensor[(13, 15), float32]) {
  %768 = cast(%var_7533, dtype="float32") /* ty=Tensor[(13, 15), float32] */;
  %769 = reshape(%768, newshape=[195]) /* ty=Tensor[(195), float32] */;
  %770 = @func_6520(%769) /* ty=(Tensor[(1, 7, 11), float64], Tensor[(195), float32], Tensor[(195), float32], Tensor[(480), float32]) */;
  %771 = @func_4299() /* ty=Tensor[(1, 7, 11), float64] */;
  %772 = %770.1;
  (%771, %772, %var_7533)
}

def @func_6752(%var_6741: Tensor[(13, 8, 11), int16], %var_6742: Tensor[(13, 8, 11), int16]) -> Tensor[(13, 8, 11), int16] {
  %773 = cast(%var_6742, dtype="int16") /* ty=Tensor[(13, 8, 11), int16] */;
  %774 = shape_of(%var_6741, dtype="int32") /* ty=Tensor[(3), int32] */;
  %775 = cast(%var_6741, dtype="int16") /* ty=Tensor[(13, 8, 11), int16] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  right_shift(%775, %776) /* ty=Tensor[(13, 8, 11), int16] */
}

def @func_8280(%var_8255: Tensor[(10, 13, 12), float64], %var_8256: Tensor[(10, 13, 12), float64]) -> (Tensor[(10, 13, 12), float64], Tensor[(1, 7, 11), float64], Tensor[(4, 3, 14), float64], Tensor[(168), float64], Tensor[(1, 7, 11), float64]) {
  %777 = cast(%var_8256, dtype="float64") /* ty=Tensor[(10, 13, 12), float64] */;
  %778 = shape_of(%var_8255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %779 = cast(%var_8255, dtype="float64") /* ty=Tensor[(10, 13, 12), float64] */;
  %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %781 = @func_7406() /* ty=(Tensor[(1, 7, 11), float64],) */;
  %782 = cast(meta[relay.Constant][66] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %783 = reshape(%782, newshape=[4, 3, 14]) /* ty=Tensor[(4, 3, 14), float64] */;
  %784 = @func_4458(%783) /* ty=(Tensor[(4, 3, 14), float64], Tensor[(4, 3, 14), float32]) */;
  %785 = power(%779, %780) /* ty=Tensor[(10, 13, 12), float64] */;
  %786 = %781.0;
  %787 = %784.0;
  %788 = @func_4341() /* ty=Tensor[(1, 7, 11), float64] */;
  (%785, %786, %787, meta[relay.Constant][66] /* ty=Tensor[(168), float64] */, %788)
}

def @func_6663() -> Tensor[(1, 7, 11), float64] {
  @func_4341() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_4299() -> Tensor[(1, 7, 11), float64] {
  @func_2908() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_7637(%var_7617: Tensor[(8, 12, 5), uint8], %var_7618: Tensor[(8, 12, 5), uint8]) -> (Tensor[(8, 12, 5), uint8], Tensor[(1, 7, 11), float64]) {
  %789 = cast(%var_7618, dtype="uint8") /* ty=Tensor[(8, 12, 5), uint8] */;
  %790 = shape_of(%var_7617, dtype="int32") /* ty=Tensor[(3), int32] */;
  %791 = cast(%var_7617, dtype="uint8") /* ty=Tensor[(8, 12, 5), uint8] */;
  %792 = dyn.reshape(%789, %790, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %793 = @func_6822() /* ty=(Tensor[(1, 7, 11), float64],) */;
  %794 = add(%791, %792) /* ty=Tensor[(8, 12, 5), uint8] */;
  %795 = %793.0;
  (%794, %795)
}

def @func_5754(%var_5742: Tensor[(5, 5, 7), float32]) -> (Tensor[(5, 5, 7), float32],) {
  %796 = cast(%var_5742, dtype="float32") /* ty=Tensor[(5, 5, 7), float32] */;
  %797 = sinh(%796) /* ty=Tensor[(5, 5, 7), float32] */;
  (%797,)
}

def @func_3744(%var_3737: Tensor[(480), float32]) -> (Tensor[(420), float32], Tensor[(3, 16, 10), float32], Tensor[(480), float32]) {
  %798 = @func_3406() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(39), float32], Tensor[(420), float32]) */;
  %799 = cast(%var_3737, dtype="float32") /* ty=Tensor[(480), float32] */;
  %800 = cast(%var_3737, dtype="float32") /* ty=Tensor[(480), float32] */;
  %801 = reshape(%799, newshape=[3, 16, 10]) /* ty=Tensor[(3, 16, 10), float32] */;
  %802 = reshape(%800, newshape=[3, 16, 10]) /* ty=Tensor[(3, 16, 10), float32] */;
  %803 = %798.2;
  %804 = @func_2959(%801, %802) /* ty=Tensor[(3, 16, 10), float32] */;
  (%803, %804, %var_3737)
}

def @func_6152() -> (Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64]) {
  %805 = @func_4276() /* ty=(Tensor[(1, 7, 11), float64],) */;
  %806 = %805.0;
  %807 = @func_4656() /* ty=Tensor[(1, 7, 11), float64] */;
  (%806, %807)
}

def @func_6138() -> Tensor[(1, 1260), int8] {
  %808 = @func_4060() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1, 1260), int8]) */;
  %808.2
}

def @func_217(%var_187: Tensor[(1, 3, 13), float32], %var_188: Tensor[(5, 3, 13), float32], %var_195: Tensor[(165), uint8], %var_208: Tensor[(520), uint32]) -> (Tensor[(5, 3, 13), float32], Tensor[(5, 11, 3), bool], Tensor[(165), uint8], Tensor[(8, 13, 5), bool], Tensor[(520), uint32], Tensor[(8, 13, 5), bool]) {
  %809 = cast(%var_187, dtype="float32") /* ty=Tensor[(1, 3, 13), float32] */;
  %810 = cast(%var_188, dtype="float32") /* ty=Tensor[(5, 3, 13), float32] */;
  %811 = cast(%var_195, dtype="uint8") /* ty=Tensor[(165), uint8] */;
  %812 = cast(%var_195, dtype="uint8") /* ty=Tensor[(165), uint8] */;
  %813 = reshape(%811, newshape=[5, 11, 3]) /* ty=Tensor[(5, 11, 3), uint8] */;
  %814 = reshape(%812, newshape=[5, 11, 3]) /* ty=Tensor[(5, 11, 3), uint8] */;
  %815 = cast(%var_208, dtype="uint32") /* ty=Tensor[(520), uint32] */;
  %816 = cast(%var_208, dtype="uint32") /* ty=Tensor[(520), uint32] */;
  %817 = reshape(%815, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), uint32] */;
  %818 = reshape(%816, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), uint32] */;
  %819 = cast(%var_208, dtype="uint32") /* ty=Tensor[(520), uint32] */;
  %820 = @func_166(%817, %818) /* ty=Tensor[(8, 13, 5), bool] */;
  %821 = cast(%820, dtype="uint32") /* ty=Tensor[(8, 13, 5), uint32] */;
  %822 = reshape(%819, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), uint32] */;
  %823 = reshape(%821, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), uint32] */;
  %824 = power(%809, %810) /* ty=Tensor[(5, 3, 13), float32] */;
  %825 = @func_38(%813, %814) /* ty=Tensor[(5, 11, 3), bool] */;
  %826 = @func_166(%822, %823) /* ty=Tensor[(8, 13, 5), bool] */;
  (%824, %825, %var_195, %820, %var_208, %826)
}

def @func_7336() -> (Tensor[(1, 7, 11), float64],) {
  %827 = @func_4656() /* ty=Tensor[(1, 7, 11), float64] */;
  %828 = cast(%827, dtype="float64") /* ty=Tensor[(1, 7, 11), float64] */;
  %829 = exp(%828) /* ty=Tensor[(1, 7, 11), float64] */;
  (%829,)
}

def @func_7800(%var_7793: Tensor[(600, 2), int64], %var_7795: Tensor[(165), uint8]) -> (Tensor[(1, 7, 11), float32], Tensor[(520), uint32], Tensor[(600, 2), int64], Tensor[(39, 5), float32], Tensor[(165), uint8], Tensor[(520), uint32]) {
  %830 = @func_4871() /* ty=Tensor[(1, 7, 11), float64] */;
  %831 = cast(%830, dtype="float32") /* ty=Tensor[(1, 7, 11), float32] */;
  %832 = cast(%var_7793, dtype="int64") /* ty=Tensor[(600, 2), int64] */;
  %833 = cast(%var_7793, dtype="int64") /* ty=Tensor[(600, 2), int64] */;
  %834 = cast(meta[relay.Constant][67] /* ty=Tensor[(39, 5), float32] */, dtype="float32") /* ty=Tensor[(39, 5), float32] */;
  %835 = cast(%var_7795, dtype="uint8") /* ty=Tensor[(165), uint8] */;
  %836 = cast(meta[relay.Constant][68] /* ty=Tensor[(520), uint32] */, dtype="uint32") /* ty=Tensor[(520), uint32] */;
  %837 = reshape(%832, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int64] */;
  %838 = reshape(%833, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int64] */;
  %839 = reshape(%834, newshape=[195]) /* ty=Tensor[(195), float32] */;
  %840 = reshape(%835, newshape=[165]) /* ty=Tensor[(165), uint8] */;
  %841 = reshape(%836, newshape=[520]) /* ty=Tensor[(520), uint32] */;
  %842 = @func_2553(%837, %838, %839, %840, %841) /* ty=(Tensor[(10, 10, 12), bool], Tensor[(520), uint32], Tensor[(39), float32], Tensor[(195), float32], Tensor[(165), uint8], Tensor[(520), uint32]) */;
  %843 = cos(%831) /* ty=Tensor[(1, 7, 11), float32] */;
  %844 = %842.5;
  (%843, %844, %var_7793, meta[relay.Constant][67] /* ty=Tensor[(39, 5), float32] */, %var_7795, meta[relay.Constant][68] /* ty=Tensor[(520), uint32] */)
}

def @func_3832(%var_3817: Tensor[(8, 15, 4), float64], %var_3818: Tensor[(8, 15, 4), float64]) -> (Tensor[(8, 15, 4), float64],) {
  %845 = cast(%var_3818, dtype="float64") /* ty=Tensor[(8, 15, 4), float64] */;
  %846 = shape_of(%var_3817, dtype="int32") /* ty=Tensor[(3), int32] */;
  %847 = cast(%var_3817, dtype="float64") /* ty=Tensor[(8, 15, 4), float64] */;
  %848 = dyn.reshape(%845, %846, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %849 = floor_mod(%847, %848) /* ty=Tensor[(8, 15, 4), float64] */;
  (%849,)
}

def @func_2786() -> Tensor[(1, 7, 11), float64] {
  @func_2723() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_4458(%var_4439: Tensor[(4, 3, 14), float64]) -> (Tensor[(4, 3, 14), float64], Tensor[(4, 3, 14), float32]) {
  %850 = cast(%var_4439, dtype="float64") /* ty=Tensor[(4, 3, 14), float64] */;
  %851 = cast(%var_4439, dtype="float32") /* ty=Tensor[(4, 3, 14), float32] */;
  %852 = rsqrt(%850) /* ty=Tensor[(4, 3, 14), float64] */;
  %853 = atan(%851) /* ty=Tensor[(4, 3, 14), float32] */;
  (%852, %853)
}

def @func_7210() -> (Tensor[(11, 8, 7), float64], Tensor[(6, 14, 15), bool], Tensor[(1260), float64]) {
  %854 = cast(meta[relay.Constant][69] /* ty=Tensor[(11, 8, 7), float64] */, dtype="float64") /* ty=Tensor[(11, 8, 7), float64] */;
  %855 = cast(meta[relay.Constant][70] /* ty=Tensor[(1260), float64] */, dtype="float64") /* ty=Tensor[(1260), float64] */;
  %856 = reshape(%855, newshape=[6, 14, 15]) /* ty=Tensor[(6, 14, 15), float64] */;
  %857 = @func_412(%856) /* ty=(Tensor[(6, 14, 15), bool], Tensor[(6, 14, 15), float64]) */;
  %858 = cos(%854) /* ty=Tensor[(11, 8, 7), float64] */;
  %859 = %857.0;
  (%858, %859, meta[relay.Constant][70] /* ty=Tensor[(1260), float64] */)
}

def @func_7968() -> (Tensor[(1, 7, 11), float64],) {
  %860 = @func_5005() /* ty=(Tensor[(1, 7, 11), float64],) */;
  %861 = %860.0;
  (%861,)
}

def @func_8034(%var_8025: Tensor[(8, 4, 9), float64]) -> (Tensor[(8, 4, 9), float64], Tensor[(294), uint32]) {
  %862 = cast(%var_8025, dtype="float64") /* ty=Tensor[(8, 4, 9), float64] */;
  %863 = @func_5014() /* ty=(Tensor[(294), uint32],) */;
  %864 = sinh(%862) /* ty=Tensor[(8, 4, 9), float64] */;
  %865 = %863.0;
  (%864, %865)
}

def @func_7870() -> Tensor[(5, 11, 3), bool] {
  %866 = @func_6996() /* ty=(Tensor[(5, 11, 3), bool], Tensor[(3, 420), float32]) */;
  %866.0
}

def @func_8165() -> (Tensor[(1, 7, 11), float64],) {
  %867 = @func_2723() /* ty=Tensor[(1, 7, 11), float64] */;
  (%867,)
}

def @func_4323() -> Tensor[(1, 7, 11), float64] {
  @func_3986() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_3786() -> Tensor[(1, 7, 11), float64] {
  @func_3723() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_2775() -> Tensor[(1, 7, 11), float64] {
  @func_2723() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_7960(%var_7948: Tensor[(77, 10), float64]) -> (Tensor[(1, 7, 11), float64], Tensor[(4, 3, 14), float64], Tensor[(168), float64], Tensor[(16, 7, 11), bool], Tensor[(165), uint16], Tensor[(1232), float64], Tensor[(77, 10), float64]) {
  %868 = @func_5578() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(1, 1260), float64], Tensor[(1, 7, 11), float64], Tensor[(195), float32], Tensor[(6, 14, 15), uint16]) */;
  %869 = cast(meta[relay.Constant][71] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %870 = reshape(%869, newshape=[4, 3, 14]) /* ty=Tensor[(4, 3, 14), float64] */;
  %871 = @func_4458(%870) /* ty=(Tensor[(4, 3, 14), float64], Tensor[(4, 3, 14), float32]) */;
  %872 = cast(meta[relay.Constant][72] /* ty=Tensor[(165), uint16] */, dtype="uint16") /* ty=Tensor[(165), uint16] */;
  %873 = cast(meta[relay.Constant][73] /* ty=Tensor[(1232), float64] */, dtype="float64") /* ty=Tensor[(1232), float64] */;
  %874 = cast(%var_7948, dtype="float64") /* ty=Tensor[(77, 10), float64] */;
  %875 = reshape(%872, newshape=[165]) /* ty=Tensor[(165), uint16] */;
  %876 = reshape(%873, newshape=[16, 7, 11]) /* ty=Tensor[(16, 7, 11), float64] */;
  %877 = reshape(%874, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), float64] */;
  %878 = @func_4564(%875, %876, %877) /* ty=(Tensor[(11, 1, 15), uint16], uint16, Tensor[(165), uint16], Tensor[(16, 7, 11), bool], Tensor[(10, 7, 11), bool], Tensor[(1, 7, 11), float64]) */;
  %879 = %868.0;
  %880 = %871.0;
  %881 = %878.3;
  (%879, %880, meta[relay.Constant][71] /* ty=Tensor[(168), float64] */, %881, meta[relay.Constant][72] /* ty=Tensor[(165), uint16] */, meta[relay.Constant][73] /* ty=Tensor[(1232), float64] */, %var_7948)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5907() -> (Tensor[(480), float32], Tensor[(1, 7, 11), float64]) {
  %3 = fn () -> (Tensor[(480), float32], Tensor[(1, 7, 11), float64]) {
    %0 = @func_5037() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(480), float32], Tensor[(480), float32]) */;
    %1 = %0.1;
    %2 = @func_5321() /* ty=Tensor[(1, 7, 11), float64] */;
    (%1, %2)
  };
  %3() /* ty=(Tensor[(480), float32], Tensor[(1, 7, 11), float64]) */
}

def @func_6019() -> (Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64]) {
  @func_6017() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64]) */
}

def @func_7557(%var_7556: Tensor[(13, 15), float32]) -> (Tensor[(1, 7, 11), float64], Tensor[(195), float32], Tensor[(13, 15), float32]) {
  %9 = fn (%var_7533: Tensor[(13, 15), float32]) -> (Tensor[(1, 7, 11), float64], Tensor[(195), float32], Tensor[(13, 15), float32]) {
    %4 = cast(%var_7533, dtype="float32") /* ty=Tensor[(13, 15), float32] */;
    %5 = reshape(%4, newshape=[195]) /* ty=Tensor[(195), float32] */;
    %6 = @func_6520(%5) /* ty=(Tensor[(1, 7, 11), float64], Tensor[(195), float32], Tensor[(195), float32], Tensor[(480), float32]) */;
    %7 = @func_4299() /* ty=Tensor[(1, 7, 11), float64] */;
    %8 = %6.1;
    (%7, %8, %var_7533)
  };
  %9(%var_7556) /* ty=(Tensor[(1, 7, 11), float64], Tensor[(195), float32], Tensor[(13, 15), float32]) */
}

def @func_6851() -> (Tensor[(5, 11, 3), float64],) {
  %10 = @func_3644() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(1260), int8], Tensor[(5, 11, 3), float64]) */;
  %11 = %10.2;
  (%11,)
}

def @func_8037(%var_8035: Tensor[(8, 4, 9), float64]) -> (Tensor[(8, 4, 9), float64], Tensor[(294), uint32]) {
  @func_8034(%var_8035) /* ty=(Tensor[(8, 4, 9), float64], Tensor[(294), uint32]) */
}

def @func_5005() -> (Tensor[(1, 7, 11), float64],) {
  %12 = @func_3185() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64]) */;
  %13 = %12.1;
  (%13,)
}

def @func_5014() -> (Tensor[(294), uint32],) {
  %14 = @func_4933() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(7, 14, 3), uint32], Tensor[(294), uint32]) */;
  %15 = %14.2;
  (%15,)
}

def @func_4773(%var_4771: Tensor[(11, 7, 11), float64], %var_4772: Tensor[(480), float64]) -> (Tensor[(11, 7, 11), uint32], Tensor[(1, 7, 11), float64], Tensor[(8, 15, 4), float64], Tensor[(480), float64], Tensor[(1, 7, 11), float64]) {
  %30 = fn (%var_4722: Tensor[(11, 7, 11), float64], %var_4741: Tensor[(480), float64]) -> (Tensor[(11, 7, 11), uint32], Tensor[(1, 7, 11), float64], Tensor[(8, 15, 4), float64], Tensor[(480), float64], Tensor[(1, 7, 11), float64]) {
    %16 = @func_4276() /* ty=(Tensor[(1, 7, 11), float64],) */;
    %17 = %16.0;
    %18 = cast(%17, dtype="uint32") /* ty=Tensor[(1, 7, 11), uint32] */;
    %19 = cast(%var_4722, dtype="uint32") /* ty=Tensor[(11, 7, 11), uint32] */;
    %20 = cast(%var_4741, dtype="float64") /* ty=Tensor[(480), float64] */;
    %21 = cast(%var_4741, dtype="float64") /* ty=Tensor[(480), float64] */;
    %22 = reshape(%20, newshape=[8, 15, 4]) /* ty=Tensor[(8, 15, 4), float64] */;
    %23 = reshape(%21, newshape=[8, 15, 4]) /* ty=Tensor[(8, 15, 4), float64] */;
    %24 = @func_3832(%22, %23) /* ty=(Tensor[(8, 15, 4), float64],) */;
    %25 = @func_3406() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(39), float32], Tensor[(420), float32]) */;
    %26 = bitwise_xor(%18, %19) /* ty=Tensor[(11, 7, 11), uint32] */;
    %27 = @func_2775() /* ty=Tensor[(1, 7, 11), float64] */;
    %28 = %24.0;
    %29 = %25.0;
    (%26, %27, %28, %var_4741, %29)
  };
  %30(%var_4771, %var_4772) /* ty=(Tensor[(11, 7, 11), uint32], Tensor[(1, 7, 11), float64], Tensor[(8, 15, 4), float64], Tensor[(480), float64], Tensor[(1, 7, 11), float64]) */
}

def @func_7282() -> (Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64]) {
  @func_7280() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64]) */
}

def @func_7637(%var_7617: Tensor[(8, 12, 5), uint8], %var_7618: Tensor[(8, 12, 5), uint8]) -> (Tensor[(8, 12, 5), uint8], Tensor[(1, 7, 11), float64]) {
  %31 = cast(%var_7618, dtype="uint8") /* ty=Tensor[(8, 12, 5), uint8] */;
  %32 = shape_of(%var_7617, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(%var_7617, dtype="uint8") /* ty=Tensor[(8, 12, 5), uint8] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %35 = @func_6822() /* ty=(Tensor[(1, 7, 11), float64],) */;
  %36 = add(%33, %34) /* ty=Tensor[(8, 12, 5), uint8] */;
  %37 = %35.0;
  (%36, %37)
}

def @func_4409(%var_4396: Tensor[(3, 420), float64]) -> (Tensor[(5, 11, 3), bool], Tensor[(165), uint8], Tensor[(3, 420), uint32]) {
  %38 = cast(meta[relay.Constant][0] /* ty=Tensor[(165), uint8] */, dtype="uint8") /* ty=Tensor[(165), uint8] */;
  %39 = cast(meta[relay.Constant][0] /* ty=Tensor[(165), uint8] */, dtype="uint8") /* ty=Tensor[(165), uint8] */;
  %40 = reshape(%38, newshape=[5, 11, 3]) /* ty=Tensor[(5, 11, 3), uint8] */;
  %41 = reshape(%39, newshape=[5, 11, 3]) /* ty=Tensor[(5, 11, 3), uint8] */;
  %42 = @func_4060() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1, 1260), int8]) */;
  %43 = %42.1;
  %44 = cast(%var_4396, dtype="uint32") /* ty=Tensor[(3, 420), uint32] */;
  %45 = shape_of(%43, dtype="int32") /* ty=Tensor[(2), int32] */;
  %46 = cast(%43, dtype="uint32") /* ty=Tensor[(3, 420), uint32] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %48 = @func_38(%40, %41) /* ty=Tensor[(5, 11, 3), bool] */;
  %49 = subtract(%46, %47) /* ty=Tensor[(3, 420), uint32] */;
  (%48, meta[relay.Constant][0] /* ty=Tensor[(165), uint8] */, %49)
}

def @func_7336() -> (Tensor[(1, 7, 11), float64],) {
  %50 = @func_4656() /* ty=Tensor[(1, 7, 11), float64] */;
  %51 = cast(%50, dtype="float64") /* ty=Tensor[(1, 7, 11), float64] */;
  %52 = exp(%51) /* ty=Tensor[(1, 7, 11), float64] */;
  (%52,)
}

def @func_8034(%var_8025: Tensor[(8, 4, 9), float64]) -> (Tensor[(8, 4, 9), float64], Tensor[(294), uint32]) {
  %53 = cast(%var_8025, dtype="float64") /* ty=Tensor[(8, 4, 9), float64] */;
  %54 = @func_5014() /* ty=(Tensor[(294), uint32],) */;
  %55 = sinh(%53) /* ty=Tensor[(8, 4, 9), float64] */;
  %56 = %54.0;
  (%55, %56)
}

def @func_7651() -> (Tensor[(1, 7, 11), float64],) {
  %57 = @func_6822() /* ty=(Tensor[(1, 7, 11), float64],) */;
  %58 = %57.0;
  (%58,)
}

def @func_5951(%var_5950: Tensor[(3, 420), float64]) -> (Tensor[(6, 7, 11), int16], Tensor[(462), float64], Tensor[(3, 420), bool]) {
  %70 = fn (%var_5943: Tensor[(3, 420), float64]) -> (Tensor[(6, 7, 11), int16], Tensor[(462), float64], Tensor[(3, 420), bool]) {
    %59 = cast(meta[relay.Constant][1] /* ty=Tensor[(462), float64] */, dtype="float64") /* ty=Tensor[(462), float64] */;
    %60 = reshape(%59, newshape=[6, 7, 11]) /* ty=Tensor[(6, 7, 11), float64] */;
    %61 = @func_4959(%60) /* ty=(Tensor[(6, 7, 11), int16],) */;
    %62 = @func_4060() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1, 1260), int8]) */;
    %63 = %62.1;
    %64 = cast(%var_5943, dtype="bool") /* ty=Tensor[(3, 420), bool] */;
    %65 = shape_of(%63, dtype="int32") /* ty=Tensor[(2), int32] */;
    %66 = cast(%63, dtype="bool") /* ty=Tensor[(3, 420), bool] */;
    %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %68 = %61.0;
    %69 = not_equal(%66, %67) /* ty=Tensor[(3, 420), bool] */;
    (%68, meta[relay.Constant][1] /* ty=Tensor[(462), float64] */, %69)
  };
  %70(%var_5950) /* ty=(Tensor[(6, 7, 11), int16], Tensor[(462), float64], Tensor[(3, 420), bool]) */
}

def @func_8019() -> Tensor[(1, 7, 11), float64] {
  %72 = fn () -> Tensor[(1, 7, 11), float64] {
    %71 = @func_5906() /* ty=(Tensor[(480), float32], Tensor[(1, 7, 11), float64]) */;
    %71.1
  };
  %72() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_3787() -> Tensor[(1, 7, 11), float64] {
  %73 = fn () -> Tensor[(1, 7, 11), float64] {
    @func_3723() /* ty=Tensor[(1, 7, 11), float64] */
  };
  %73() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_3723() -> Tensor[(1, 7, 11), float64] {
  %74 = @func_3406() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(39), float32], Tensor[(420), float32]) */;
  %74.0
}

def @func_4323() -> Tensor[(1, 7, 11), float64] {
  @func_3986() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_5155() -> (Tensor[(1, 7, 11), float64],) {
  %75 = @func_4656() /* ty=Tensor[(1, 7, 11), float64] */;
  (%75,)
}

def @func_6017() -> (Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64]) {
  %76 = @func_4968() /* ty=(Tensor[(1, 7, 11), float64],) */;
  %77 = %76.0;
  %78 = @func_3986() /* ty=Tensor[(1, 7, 11), float64] */;
  (%77, %78)
}

def @func_6523(%var_6521: Tensor[(195), float32]) -> (Tensor[(1, 7, 11), float64], Tensor[(195), float32], Tensor[(195), float32], Tensor[(480), float32]) {
  @func_6520(%var_6521) /* ty=(Tensor[(1, 7, 11), float64], Tensor[(195), float32], Tensor[(195), float32], Tensor[(480), float32]) */
}

def @func_5437(%var_5436: Tensor[(195), float32]) -> (Tensor[(1, 7, 11), float64], Tensor[(165), uint8], Tensor[(1, 39), float32], Tensor[(195), float32], Tensor[(165), uint8], Tensor[(520), uint32]) {
  %90 = fn (%var_5431: Tensor[(195), float32]) -> (Tensor[(1, 7, 11), float64], Tensor[(165), uint8], Tensor[(1, 39), float32], Tensor[(195), float32], Tensor[(165), uint8], Tensor[(520), uint32]) {
    %79 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 39), float32] */, dtype="float32") /* ty=Tensor[(1, 39), float32] */;
    %80 = cast(%var_5431, dtype="float32") /* ty=Tensor[(195), float32] */;
    %81 = cast(meta[relay.Constant][3] /* ty=Tensor[(165), uint8] */, dtype="uint8") /* ty=Tensor[(165), uint8] */;
    %82 = cast(meta[relay.Constant][4] /* ty=Tensor[(520), uint32] */, dtype="uint32") /* ty=Tensor[(520), uint32] */;
    %83 = reshape(%79, newshape=[1, 3, 13]) /* ty=Tensor[(1, 3, 13), float32] */;
    %84 = reshape(%80, newshape=[5, 3, 13]) /* ty=Tensor[(5, 3, 13), float32] */;
    %85 = reshape(%81, newshape=[165]) /* ty=Tensor[(165), uint8] */;
    %86 = reshape(%82, newshape=[520]) /* ty=Tensor[(520), uint32] */;
    %87 = @func_217(%83, %84, %85, %86) /* ty=(Tensor[(5, 3, 13), float32], Tensor[(5, 11, 3), bool], Tensor[(165), uint8], Tensor[(8, 13, 5), bool], Tensor[(520), uint32], Tensor[(8, 13, 5), bool]) */;
    %88 = @func_4341() /* ty=Tensor[(1, 7, 11), float64] */;
    %89 = %87.2;
    (%88, %89, meta[relay.Constant][2] /* ty=Tensor[(1, 39), float32] */, %var_5431, meta[relay.Constant][3] /* ty=Tensor[(165), uint8] */, meta[relay.Constant][4] /* ty=Tensor[(520), uint32] */)
  };
  %90(%var_5436) /* ty=(Tensor[(1, 7, 11), float64], Tensor[(165), uint8], Tensor[(1, 39), float32], Tensor[(195), float32], Tensor[(165), uint8], Tensor[(520), uint32]) */
}

def @func_2211(%var_2209: Tensor[(16, 26), float32], %var_2210: Tensor[(195), float32]) -> (Tensor[(2, 13, 10), bool], Tensor[(13, 4, 8), int32], Tensor[(165), uint8], Tensor[(195), float32], Tensor[(11, 15), uint8], Tensor[(520), uint32], Tensor[(39), float32]) {
  %117 = fn (%var_2181: Tensor[(16, 26), float32], %var_2193: Tensor[(195), float32]) -> (Tensor[(2, 13, 10), bool], Tensor[(13, 4, 8), int32], Tensor[(165), uint8], Tensor[(195), float32], Tensor[(11, 15), uint8], Tensor[(520), uint32], Tensor[(39), float32]) {
    %91 = cast(meta[relay.Constant][6] /* ty=Tensor[(2, 13, 10), float64] */, dtype="bool") /* ty=Tensor[(2, 13, 10), bool] */;
    %92 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(2, 13, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %93 = cast(meta[relay.Constant][5] /* ty=Tensor[(2, 13, 10), float64] */, dtype="bool") /* ty=Tensor[(2, 13, 10), bool] */;
    %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %95 = cast(%var_2181, dtype="float32") /* ty=Tensor[(16, 26), float32] */;
    %96 = reshape(%95, newshape=[13, 4, 8]) /* ty=Tensor[(13, 4, 8), float32] */;
    %97 = @func_1741(%96) /* ty=(Tensor[(13, 4, 8), float32],) */;
    %98 = %97.0;
    %99 = cast(%var_2181, dtype="int32") /* ty=Tensor[(16, 26), int32] */;
    %100 = shape_of(%98, dtype="int32") /* ty=Tensor[(3), int32] */;
    %101 = cast(%98, dtype="int32") /* ty=Tensor[(13, 4, 8), int32] */;
    %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %103 = cast(meta[relay.Constant][7] /* ty=Tensor[(39), float32] */, dtype="float32") /* ty=Tensor[(39), float32] */;
    %104 = cast(%var_2193, dtype="float32") /* ty=Tensor[(195), float32] */;
    %105 = cast(meta[relay.Constant][8] /* ty=Tensor[(11, 15), uint8] */, dtype="uint8") /* ty=Tensor[(11, 15), uint8] */;
    %106 = cast(meta[relay.Constant][9] /* ty=Tensor[(520), uint32] */, dtype="uint32") /* ty=Tensor[(520), uint32] */;
    %107 = reshape(%103, newshape=[1, 3, 13]) /* ty=Tensor[(1, 3, 13), float32] */;
    %108 = reshape(%104, newshape=[5, 3, 13]) /* ty=Tensor[(5, 3, 13), float32] */;
    %109 = reshape(%105, newshape=[165]) /* ty=Tensor[(165), uint8] */;
    %110 = reshape(%106, newshape=[520]) /* ty=Tensor[(520), uint32] */;
    %111 = @func_217(%107, %108, %109, %110) /* ty=(Tensor[(5, 3, 13), float32], Tensor[(5, 11, 3), bool], Tensor[(165), uint8], Tensor[(8, 13, 5), bool], Tensor[(520), uint32], Tensor[(8, 13, 5), bool]) */;
    %112 = cast(meta[relay.Constant][7] /* ty=Tensor[(39), float32] */, dtype="float32") /* ty=Tensor[(39), float32] */;
    %113 = not_equal(%93, %94) /* ty=Tensor[(2, 13, 10), bool] */;
    %114 = left_shift(%101, %102) /* ty=Tensor[(13, 4, 8), int32] */;
    %115 = %111.2;
    %116 = acos(%112) /* ty=Tensor[(39), float32] */;
    (%113, %114, %115, %var_2193, meta[relay.Constant][8] /* ty=Tensor[(11, 15), uint8] */, meta[relay.Constant][9] /* ty=Tensor[(520), uint32] */, %116)
  };
  %117(%var_2209, %var_2210) /* ty=(Tensor[(2, 13, 10), bool], Tensor[(13, 4, 8), int32], Tensor[(165), uint8], Tensor[(195), float32], Tensor[(11, 15), uint8], Tensor[(520), uint32], Tensor[(39), float32]) */
}

def @func_4871() -> Tensor[(1, 7, 11), float64] {
  %118 = @func_4276() /* ty=(Tensor[(1, 7, 11), float64],) */;
  %118.0
}

def @func_5092(%var_5091: Tensor[(54), float64]) -> (Tensor[(1, 7, 11), float64], Tensor[(6, 3, 3), float64], Tensor[(54), float64]) {
  %125 = fn (%var_5076: Tensor[(54), float64]) -> (Tensor[(1, 7, 11), float64], Tensor[(6, 3, 3), float64], Tensor[(54), float64]) {
    %119 = cast(%var_5076, dtype="float64") /* ty=Tensor[(54), float64] */;
    %120 = cast(%var_5076, dtype="float64") /* ty=Tensor[(54), float64] */;
    %121 = reshape(%119, newshape=[6, 3, 3]) /* ty=Tensor[(6, 3, 3), float64] */;
    %122 = reshape(%120, newshape=[6, 3, 3]) /* ty=Tensor[(6, 3, 3), float64] */;
    %123 = @func_4656() /* ty=Tensor[(1, 7, 11), float64] */;
    %124 = @func_4993(%121, %122) /* ty=Tensor[(6, 3, 3), float64] */;
    (%123, %124, %var_5076)
  };
  %125(%var_5091) /* ty=(Tensor[(1, 7, 11), float64], Tensor[(6, 3, 3), float64], Tensor[(54), float64]) */
}

def @func_543(%var_542: Tensor[(165), uint8]) -> (Tensor[(11, 4, 7), bool], Tensor[(5, 11, 3), bool], Tensor[(165), uint8], Tensor[(11, 4, 7), uint16]) {
  %143 = fn (%var_530: Tensor[(165), uint8]) -> (Tensor[(11, 4, 7), bool], Tensor[(5, 11, 3), bool], Tensor[(165), uint8], Tensor[(11, 4, 7), uint16]) {
    %126 = cast(meta[relay.Constant][11] /* ty=Tensor[(11, 4, 7), bool] */, dtype="bool") /* ty=Tensor[(11, 4, 7), bool] */;
    %127 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(11, 4, 7), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %128 = cast(meta[relay.Constant][10] /* ty=Tensor[(11, 4, 7), bool] */, dtype="bool") /* ty=Tensor[(11, 4, 7), bool] */;
    %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %130 = cast(%var_530, dtype="uint8") /* ty=Tensor[(165), uint8] */;
    %131 = cast(%var_530, dtype="uint8") /* ty=Tensor[(165), uint8] */;
    %132 = reshape(%130, newshape=[5, 11, 3]) /* ty=Tensor[(5, 11, 3), uint8] */;
    %133 = reshape(%131, newshape=[5, 11, 3]) /* ty=Tensor[(5, 11, 3), uint8] */;
    %134 = cast(meta[relay.Constant][10] /* ty=Tensor[(11, 4, 7), bool] */, dtype="float32") /* ty=Tensor[(11, 4, 7), float32] */;
    %135 = log10(%134) /* ty=Tensor[(11, 4, 7), float32] */;
    %136 = cast(meta[relay.Constant][10] /* ty=Tensor[(11, 4, 7), bool] */, dtype="uint16") /* ty=Tensor[(11, 4, 7), uint16] */;
    %137 = shape_of(%135, dtype="int32") /* ty=Tensor[(3), int32] */;
    %138 = cast(%135, dtype="uint16") /* ty=Tensor[(11, 4, 7), uint16] */;
    %139 = dyn.reshape(%136, %137, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %140 = logical_or(%128, %129) /* ty=Tensor[(11, 4, 7), bool] */;
    %141 = @func_38(%132, %133) /* ty=Tensor[(5, 11, 3), bool] */;
    %142 = left_shift(%138, %139) /* ty=Tensor[(11, 4, 7), uint16] */;
    (%140, %141, %var_530, %142)
  };
  %143(%var_542) /* ty=(Tensor[(11, 4, 7), bool], Tensor[(5, 11, 3), bool], Tensor[(165), uint8], Tensor[(11, 4, 7), uint16]) */
}

def @func_3113(%var_3111: Tensor[(13, 4, 11), uint64], %var_3112: Tensor[(13, 4, 11), uint64]) -> Tensor[(13, 4, 11), uint64] {
  @func_3109(%var_3111, %var_3112) /* ty=Tensor[(13, 4, 11), uint64] */
}

def @func_4969() -> (Tensor[(1, 7, 11), float64],) {
  %145 = fn () -> (Tensor[(1, 7, 11), float64],) {
    %144 = @func_3986() /* ty=Tensor[(1, 7, 11), float64] */;
    (%144,)
  };
  %145() /* ty=(Tensor[(1, 7, 11), float64],) */
}

def @func_5493(%var_5492: Tensor[(2, 7, 11), float64]) -> (Tensor[(2, 7, 11), bool], Tensor[(1, 7, 11), float64], Tensor[(2, 7, 11), float64]) {
  %155 = fn (%var_5451: Tensor[(2, 7, 11), float64]) -> (Tensor[(2, 7, 11), bool], Tensor[(1, 7, 11), float64], Tensor[(2, 7, 11), float64]) {
    %146 = @func_5321() /* ty=Tensor[(1, 7, 11), float64] */;
    %147 = cast(%146, dtype="bool") /* ty=Tensor[(1, 7, 11), bool] */;
    %148 = cast(%var_5451, dtype="bool") /* ty=Tensor[(2, 7, 11), bool] */;
    %149 = cast(%var_5451, dtype="float32") /* ty=Tensor[(2, 7, 11), float32] */;
    %150 = rsqrt(%149) /* ty=Tensor[(2, 7, 11), float32] */;
    %151 = cast(%150, dtype="float64") /* ty=Tensor[(2, 7, 11), float64] */;
    %152 = less_equal(%147, %148) /* ty=Tensor[(2, 7, 11), bool] */;
    %153 = @func_4323() /* ty=Tensor[(1, 7, 11), float64] */;
    %154 = tan(%151) /* ty=Tensor[(2, 7, 11), float64] */;
    (%152, %153, %154)
  };
  %155(%var_5492) /* ty=(Tensor[(2, 7, 11), bool], Tensor[(1, 7, 11), float64], Tensor[(2, 7, 11), float64]) */
}

def @func_8165() -> (Tensor[(1, 7, 11), float64],) {
  %156 = @func_2723() /* ty=Tensor[(1, 7, 11), float64] */;
  (%156,)
}

def @func_8448(%var_8443: Tensor[(14, 7, 11), float64], %var_8444: Tensor[(1200), int64], %var_8445: Tensor[(165), uint8], %var_8446: Tensor[(1260), int8], %var_8447: Tensor[(231, 2), float64]) -> (Tensor[(1, 7, 11), float64], Tensor[(480), uint8], Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64], Tensor[(1200), int64], Tensor[(165), uint8], Tensor[(14, 7, 11), float32], Tensor[(231), float32], Tensor[(14, 7, 11), float32], Tensor[(?, 7, 11), float64], Tensor[(1260), int8], Tensor[(231, 2), float64], Tensor[(600, 2), float32], Tensor[(16, 11, 10), float64], Tensor[(1760), float32]) {
  %206 = fn (%var_8338: Tensor[(14, 7, 11), float64], %var_8358: Tensor[(1200), int64], %var_8359: Tensor[(165), uint8], %var_8416: Tensor[(1260), int8], %var_8417: Tensor[(231, 2), float64]) -> (Tensor[(1, 7, 11), float64], Tensor[(480), uint8], Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64], Tensor[(1200), int64], Tensor[(165), uint8], Tensor[(14, 7, 11), float32], Tensor[(231), float32], Tensor[(14, 7, 11), float32], Tensor[(?, 7, 11), float64], Tensor[(1260), int8], Tensor[(231, 2), float64], Tensor[(600, 2), float32], Tensor[(16, 11, 10), float64], Tensor[(1760), float32]) {
    %157 = @func_4815() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1260), int8]) */;
    %158 = cast(meta[relay.Constant][13] /* ty=Tensor[(231), float64] */, dtype="float64") /* ty=Tensor[(231), float64] */;
    %159 = reshape(%158, newshape=[7, 3, 11]) /* ty=Tensor[(7, 3, 11), float64] */;
    %160 = @func_7385(%159) /* ty=(Tensor[(7, 3, 11), int64], Tensor[(1, 7, 11), float64]) */;
    %161 = cast(meta[relay.Constant][12] /* ty=Tensor[(480), uint8] */, dtype="uint8") /* ty=Tensor[(480), uint8] */;
    %162 = cast(meta[relay.Constant][12] /* ty=Tensor[(480), uint8] */, dtype="uint8") /* ty=Tensor[(480), uint8] */;
    %163 = reshape(%161, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), uint8] */;
    %164 = reshape(%162, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), uint8] */;
    %165 = @func_7637(%163, %164) /* ty=(Tensor[(8, 12, 5), uint8], Tensor[(1, 7, 11), float64]) */;
    %166 = %165.1;
    %167 = cast(%166, dtype="uint32") /* ty=Tensor[(1, 7, 11), uint32] */;
    %168 = cast(%var_8338, dtype="uint32") /* ty=Tensor[(14, 7, 11), uint32] */;
    %169 = left_shift(%167, %168) /* ty=Tensor[(14, 7, 11), uint32] */;
    %170 = cast(meta[relay.Constant][14] /* ty=Tensor[(14, 7, 11), uint32] */, dtype="float32") /* ty=Tensor[(14, 7, 11), float32] */;
    %171 = shape_of(%169, dtype="int32") /* ty=Tensor[(3), int32] */;
    %172 = cast(%169, dtype="float32") /* ty=Tensor[(14, 7, 11), float32] */;
    %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %174 = cast(meta[relay.Constant][15] /* ty=Tensor[(231), float64] */, dtype="float32") /* ty=Tensor[(231), float32] */;
    %175 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(231), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %176 = cast(meta[relay.Constant][13] /* ty=Tensor[(231), float64] */, dtype="float32") /* ty=Tensor[(231), float32] */;
    %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?), float32] */;
    %178 = cast(%166, dtype="float32") /* ty=Tensor[(1, 7, 11), float32] */;
    %179 = cast(%169, dtype="float32") /* ty=Tensor[(14, 7, 11), float32] */;
    %180 = cast(%var_8416, dtype="int8") /* ty=Tensor[(1260), int8] */;
    %181 = cast(%var_8417, dtype="float64") /* ty=Tensor[(231, 2), float64] */;
    %182 = reshape(%180, newshape=[1260]) /* ty=Tensor[(1260), int8] */;
    %183 = reshape(%181, newshape=[462]) /* ty=Tensor[(462), float64] */;
    %184 = @func_5686(%182, %183) /* ty=(Tensor[(10, 45), uint16], Tensor[(1260), int8], Tensor[(6, 14, 15), bool], Tensor[(?, 7, 11), float64], Tensor[(165), uint8], Tensor[(462), float64], Tensor[(6, 7, 11), bool], Tensor[(1, 7, 11), float32], Tensor[(1, 7, 11), float64], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */;
    %185 = cast(%var_8358, dtype="int64") /* ty=Tensor[(1200), int64] */;
    %186 = cast(%var_8359, dtype="uint8") /* ty=Tensor[(165), uint8] */;
    %187 = reshape(%185, newshape=[600, 2]) /* ty=Tensor[(600, 2), int64] */;
    %188 = reshape(%186, newshape=[165]) /* ty=Tensor[(165), uint8] */;
    %189 = @func_7800(%187, %188) /* ty=(Tensor[(1, 7, 11), float32], Tensor[(520), uint32], Tensor[(600, 2), int64], Tensor[(39, 5), float32], Tensor[(165), uint8], Tensor[(520), uint32]) */;
    %190 = %189.2;
    %191 = cast(%190, dtype="float64") /* ty=Tensor[(600, 2), float64] */;
    %192 = asinh(%191) /* ty=Tensor[(600, 2), float64] */;
    %193 = cast(%192, dtype="float32") /* ty=Tensor[(600, 2), float32] */;
    %194 = cast(meta[relay.Constant][16] /* ty=Tensor[(1760), float32] */, dtype="float32") /* ty=Tensor[(1760), float32] */;
    %195 = reshape(%194, newshape=[16, 11, 10]) /* ty=Tensor[(16, 11, 10), float32] */;
    %196 = @func_8091(%195) /* ty=(Tensor[(8, 7, 11), uint16], Tensor[(308, 2), float64], Tensor[(16, 11, 10), float64], Tensor[(16, 11, 10), float32]) */;
    %197 = @func_3786() /* ty=Tensor[(1, 7, 11), float64] */;
    %198 = %157.0;
    %199 = %160.1;
    %200 = floor_mod(%172, %173) /* ty=Tensor[(14, 7, 11), float32] */;
    %201 = floor_mod(%176, %177) /* ty=Tensor[(231), float32] */;
    %202 = divide(%178, %179) /* ty=Tensor[(14, 7, 11), float32] */;
    %203 = %184.3;
    %204 = asin(%193) /* ty=Tensor[(600, 2), float32] */;
    %205 = %196.2;
    (%197, meta[relay.Constant][12] /* ty=Tensor[(480), uint8] */, %198, %199, %var_8358, %var_8359, %200, %201, %202, %203, %var_8416, %var_8417, %204, %205, meta[relay.Constant][16] /* ty=Tensor[(1760), float32] */)
  };
  %206(%var_8443, %var_8444, %var_8445, %var_8446, %var_8447) /* ty=(Tensor[(1, 7, 11), float64], Tensor[(480), uint8], Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64], Tensor[(1200), int64], Tensor[(165), uint8], Tensor[(14, 7, 11), float32], Tensor[(231), float32], Tensor[(14, 7, 11), float32], Tensor[(?, 7, 11), float64], Tensor[(1260), int8], Tensor[(231, 2), float64], Tensor[(600, 2), float32], Tensor[(16, 11, 10), float64], Tensor[(1760), float32]) */
}

def @func_7015() -> (Tensor[(1, 7, 11), float64],) {
  %209 = fn () -> (Tensor[(1, 7, 11), float64],) {
    %207 = @func_4060() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1, 1260), int8]) */;
    %208 = %207.0;
    (%208,)
  };
  %209() /* ty=(Tensor[(1, 7, 11), float64],) */
}

def @func_7050() -> (Tensor[(12, 15, 9), bool],) {
  %213 = fn () -> (Tensor[(12, 15, 9), bool],) {
    %210 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %211 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 15, 9), bool] */, dtype="bool") /* ty=Tensor[(12, 15, 9), bool] */;
    %212 = logical_and(%210, %211) /* ty=Tensor[(12, 15, 9), bool] */;
    (%212,)
  };
  %213() /* ty=(Tensor[(12, 15, 9), bool],) */
}

def @func_166(%var_157: Tensor[(8, 13, 5), uint32], %var_158: Tensor[(8, 13, 5), uint32]) -> Tensor[(8, 13, 5), bool] {
  %214 = cast(%var_158, dtype="bool") /* ty=Tensor[(8, 13, 5), bool] */;
  %215 = shape_of(%var_157, dtype="int32") /* ty=Tensor[(3), int32] */;
  %216 = cast(%var_157, dtype="bool") /* ty=Tensor[(8, 13, 5), bool] */;
  %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%216, %217) /* ty=Tensor[(8, 13, 5), bool] */
}

def @func_5323() -> Tensor[(1, 7, 11), float64] {
  @func_5321() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_4167() -> (Tensor[(1, 7, 11), float64], Tensor[(5, 11, 3), bool], Tensor[(165), uint8], Tensor[(39, 1), float32], Tensor[(39, 5), float32], Tensor[(130, 4), int16], Tensor[(130, 4), bool]) {
  %218 = cast(meta[relay.Constant][18] /* ty=Tensor[(165), uint8] */, dtype="uint8") /* ty=Tensor[(165), uint8] */;
  %219 = cast(meta[relay.Constant][18] /* ty=Tensor[(165), uint8] */, dtype="uint8") /* ty=Tensor[(165), uint8] */;
  %220 = reshape(%218, newshape=[5, 11, 3]) /* ty=Tensor[(5, 11, 3), uint8] */;
  %221 = reshape(%219, newshape=[5, 11, 3]) /* ty=Tensor[(5, 11, 3), uint8] */;
  %222 = cast(meta[relay.Constant][22] /* ty=Tensor[(130, 4), uint32] */, dtype="int16") /* ty=Tensor[(130, 4), int16] */;
  %223 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(130, 4), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %224 = cast(meta[relay.Constant][21] /* ty=Tensor[(130, 4), uint32] */, dtype="int16") /* ty=Tensor[(130, 4), int16] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %226 = cast(meta[relay.Constant][19] /* ty=Tensor[(39, 1), float32] */, dtype="float32") /* ty=Tensor[(39, 1), float32] */;
  %227 = cast(meta[relay.Constant][20] /* ty=Tensor[(39, 5), float32] */, dtype="float32") /* ty=Tensor[(39, 5), float32] */;
  %228 = @func_38(%220, %221) /* ty=Tensor[(5, 11, 3), bool] */;
  %229 = cast(%228, dtype="uint8") /* ty=Tensor[(5, 11, 3), uint8] */;
  %230 = cast(meta[relay.Constant][21] /* ty=Tensor[(130, 4), uint32] */, dtype="uint32") /* ty=Tensor[(130, 4), uint32] */;
  %231 = reshape(%226, newshape=[1, 3, 13]) /* ty=Tensor[(1, 3, 13), float32] */;
  %232 = reshape(%227, newshape=[5, 3, 13]) /* ty=Tensor[(5, 3, 13), float32] */;
  %233 = reshape(%229, newshape=[165]) /* ty=Tensor[(165), uint8] */;
  %234 = reshape(%230, newshape=[520]) /* ty=Tensor[(520), uint32] */;
  %235 = @func_217(%231, %232, %233, %234) /* ty=(Tensor[(5, 3, 13), float32], Tensor[(5, 11, 3), bool], Tensor[(165), uint8], Tensor[(8, 13, 5), bool], Tensor[(520), uint32], Tensor[(8, 13, 5), bool]) */;
  %236 = %235.3;
  %237 = cast(%236, dtype="bool") /* ty=Tensor[(8, 13, 5), bool] */;
  %238 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(130, 4), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %239 = cast(meta[relay.Constant][21] /* ty=Tensor[(130, 4), uint32] */, dtype="bool") /* ty=Tensor[(130, 4), bool] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %241 = @func_2786() /* ty=Tensor[(1, 7, 11), float64] */;
  %242 = logical_xor(%224, %225) /* ty=Tensor[(130, 4), int16] */;
  %243 = greater_equal(%239, %240) /* ty=Tensor[(130, 4), bool] */;
  (%241, %228, meta[relay.Constant][18] /* ty=Tensor[(165), uint8] */, meta[relay.Constant][19] /* ty=Tensor[(39, 1), float32] */, meta[relay.Constant][20] /* ty=Tensor[(39, 5), float32] */, %242, %243)
}

def @func_7653() -> (Tensor[(1, 7, 11), float64],) {
  @func_7651() /* ty=(Tensor[(1, 7, 11), float64],) */
}

def @func_3777() -> (Tensor[(1, 7, 11), float64],) {
  %245 = fn () -> (Tensor[(1, 7, 11), float64],) {
    %244 = @func_2775() /* ty=Tensor[(1, 7, 11), float64] */;
    (%244,)
  };
  %245() /* ty=(Tensor[(1, 7, 11), float64],) */
}

def @func_4817() -> (Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1260), int8]) {
  @func_4815() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1260), int8]) */
}

def @func_4061() -> (Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1, 1260), int8]) {
  %252 = fn () -> (Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1, 1260), int8]) {
    %246 = @func_3185() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64]) */;
    %247 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 1260), int8] */, dtype="int8") /* ty=Tensor[(1, 1260), int8] */;
    %248 = reshape(%247, newshape=[1260]) /* ty=Tensor[(1260), int8] */;
    %249 = @func_3052(%248) /* ty=(Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1260), int8]) */;
    %250 = %246.1;
    %251 = %249.1;
    (%250, %251, meta[relay.Constant][23] /* ty=Tensor[(1, 1260), int8] */)
  };
  %252() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1, 1260), int8]) */
}

def @func_4873() -> Tensor[(1, 7, 11), float64] {
  @func_4871() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_1794(%var_1757: Tensor[(5, 10, 9), uint16], %var_1758: Tensor[(5, 10, 9), uint16]) -> (Tensor[(13, 4, 8), float32], Tensor[(416), float32], Tensor[(5, 10, 9), float32], Tensor[(6, 14, 15), float64], Tensor[(3, 420), float64]) {
  %253 = cast(meta[relay.Constant][24] /* ty=Tensor[(416), float32] */, dtype="float32") /* ty=Tensor[(416), float32] */;
  %254 = reshape(%253, newshape=[13, 4, 8]) /* ty=Tensor[(13, 4, 8), float32] */;
  %255 = @func_1741(%254) /* ty=(Tensor[(13, 4, 8), float32],) */;
  %256 = cast(%var_1758, dtype="uint16") /* ty=Tensor[(5, 10, 9), uint16] */;
  %257 = shape_of(%var_1757, dtype="int32") /* ty=Tensor[(3), int32] */;
  %258 = cast(%var_1757, dtype="uint16") /* ty=Tensor[(5, 10, 9), uint16] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %260 = bitwise_xor(%258, %259) /* ty=Tensor[(5, 10, 9), uint16] */;
  %261 = cast(%260, dtype="float32") /* ty=Tensor[(5, 10, 9), float32] */;
  %262 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 420), float64] */, dtype="float64") /* ty=Tensor[(3, 420), float64] */;
  %263 = reshape(%262, newshape=[6, 14, 15]) /* ty=Tensor[(6, 14, 15), float64] */;
  %264 = @func_412(%263) /* ty=(Tensor[(6, 14, 15), bool], Tensor[(6, 14, 15), float64]) */;
  %265 = %255.0;
  %266 = asin(%261) /* ty=Tensor[(5, 10, 9), float32] */;
  %267 = %264.1;
  (%265, meta[relay.Constant][24] /* ty=Tensor[(416), float32] */, %266, %267, meta[relay.Constant][25] /* ty=Tensor[(3, 420), float64] */)
}

def @func_3835(%var_3833: Tensor[(8, 15, 4), float64], %var_3834: Tensor[(8, 15, 4), float64]) -> (Tensor[(8, 15, 4), float64],) {
  %273 = fn (%var_3817: Tensor[(8, 15, 4), float64], %var_3818: Tensor[(8, 15, 4), float64]) -> (Tensor[(8, 15, 4), float64],) {
    %268 = cast(%var_3818, dtype="float64") /* ty=Tensor[(8, 15, 4), float64] */;
    %269 = shape_of(%var_3817, dtype="int32") /* ty=Tensor[(3), int32] */;
    %270 = cast(%var_3817, dtype="float64") /* ty=Tensor[(8, 15, 4), float64] */;
    %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %272 = floor_mod(%270, %271) /* ty=Tensor[(8, 15, 4), float64] */;
    (%272,)
  };
  %273(%var_3833, %var_3834) /* ty=(Tensor[(8, 15, 4), float64],) */
}

def @func_6410(%var_6390: Tensor[(1200), int64], %var_6391: Tensor[(195, 1), float32], %var_6393: Tensor[(1, 520), uint32], %var_6401: Tensor[(294), uint32]) -> (Tensor[(1, 1260), float64], Tensor[(6, 14, 15), float64], Tensor[(520), uint32], Tensor[(1200), int64], Tensor[(1, 520), uint32], Tensor[(7, 14, 3), uint32], Tensor[(294), uint32], Tensor[(195, 165), uint16]) {
  %274 = @func_5578() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(1, 1260), float64], Tensor[(1, 7, 11), float64], Tensor[(195), float32], Tensor[(6, 14, 15), uint16]) */;
  %275 = %274.1;
  %276 = cast(%275, dtype="float64") /* ty=Tensor[(1, 1260), float64] */;
  %277 = reshape(%276, newshape=[6, 14, 15]) /* ty=Tensor[(6, 14, 15), float64] */;
  %278 = @func_412(%277) /* ty=(Tensor[(6, 14, 15), bool], Tensor[(6, 14, 15), float64]) */;
  %279 = cast(%var_6390, dtype="int64") /* ty=Tensor[(1200), int64] */;
  %280 = cast(%var_6390, dtype="int64") /* ty=Tensor[(1200), int64] */;
  %281 = cast(%var_6391, dtype="float32") /* ty=Tensor[(195, 1), float32] */;
  %282 = cast(meta[relay.Constant][26] /* ty=Tensor[(165), uint8] */, dtype="uint8") /* ty=Tensor[(165), uint8] */;
  %283 = cast(%var_6393, dtype="uint32") /* ty=Tensor[(1, 520), uint32] */;
  %284 = reshape(%279, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int64] */;
  %285 = reshape(%280, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int64] */;
  %286 = reshape(%281, newshape=[195]) /* ty=Tensor[(195), float32] */;
  %287 = reshape(%282, newshape=[165]) /* ty=Tensor[(165), uint8] */;
  %288 = reshape(%283, newshape=[520]) /* ty=Tensor[(520), uint32] */;
  %289 = @func_2553(%284, %285, %286, %287, %288) /* ty=(Tensor[(10, 10, 12), bool], Tensor[(520), uint32], Tensor[(39), float32], Tensor[(195), float32], Tensor[(165), uint8], Tensor[(520), uint32]) */;
  %290 = cast(%var_6401, dtype="uint32") /* ty=Tensor[(294), uint32] */;
  %291 = reshape(%290, newshape=[7, 14, 3]) /* ty=Tensor[(7, 14, 3), uint32] */;
  %292 = @func_3675(%291) /* ty=(Tensor[(7, 14, 3), uint32],) */;
  %293 = cast(%var_6391, dtype="uint16") /* ty=Tensor[(195, 1), uint16] */;
  %294 = cast(meta[relay.Constant][26] /* ty=Tensor[(165), uint8] */, dtype="uint16") /* ty=Tensor[(165), uint16] */;
  %295 = %278.1;
  %296 = %289.1;
  %297 = %292.0;
  %298 = bitwise_or(%293, %294) /* ty=Tensor[(195, 165), uint16] */;
  (%275, %295, %296, %var_6390, %var_6393, %297, %var_6401, %298)
}

def @func_4301() -> Tensor[(1, 7, 11), float64] {
  @func_4299() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_5757(%var_5755: Tensor[(5, 5, 7), float32]) -> (Tensor[(5, 5, 7), float32],) {
  @func_5754(%var_5755) /* ty=(Tensor[(5, 5, 7), float32],) */
}

def @func_6118(%var_6116: Tensor[(3, 5, 16), float64]) -> Tensor[(3, 5, 16), float64] {
  @func_6115(%var_6116) /* ty=Tensor[(3, 5, 16), float64] */
}

def @func_4961(%var_4960: Tensor[(6, 7, 11), float64]) -> (Tensor[(6, 7, 11), int16],) {
  %303 = fn (%var_4952: Tensor[(6, 7, 11), float64]) -> (Tensor[(6, 7, 11), int16],) {
    %299 = @func_4323() /* ty=Tensor[(1, 7, 11), float64] */;
    %300 = cast(%299, dtype="int16") /* ty=Tensor[(1, 7, 11), int16] */;
    %301 = cast(%var_4952, dtype="int16") /* ty=Tensor[(6, 7, 11), int16] */;
    %302 = maximum(%300, %301) /* ty=Tensor[(6, 7, 11), int16] */;
    (%302,)
  };
  %303(%var_4960) /* ty=(Tensor[(6, 7, 11), int16],) */
}

def @func_5303(%var_5302: Tensor[(8, 7, 13), float64]) -> Tensor[(8, 7, 13), float64] {
  %305 = fn (%var_5294: Tensor[(8, 7, 13), float64]) -> Tensor[(8, 7, 13), float64] {
    %304 = cast(%var_5294, dtype="float64") /* ty=Tensor[(8, 7, 13), float64] */;
    log(%304) /* ty=Tensor[(8, 7, 13), float64] */
  };
  %305(%var_5302) /* ty=Tensor[(8, 7, 13), float64] */
}

def @func_3725() -> Tensor[(1, 7, 11), float64] {
  @func_3723() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_3644() -> (Tensor[(1, 7, 11), float64], Tensor[(1260), int8], Tensor[(5, 11, 3), float64]) {
  %306 = @func_3406() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(39), float32], Tensor[(420), float32]) */;
  %307 = cast(meta[relay.Constant][27] /* ty=Tensor[(1260), int8] */, dtype="int8") /* ty=Tensor[(1260), int8] */;
  %308 = cast(meta[relay.Constant][27] /* ty=Tensor[(1260), int8] */, dtype="int8") /* ty=Tensor[(1260), int8] */;
  %309 = reshape(%307, newshape=[9, 14, 10]) /* ty=Tensor[(9, 14, 10), int8] */;
  %310 = reshape(%308, newshape=[9, 14, 10]) /* ty=Tensor[(9, 14, 10), int8] */;
  %311 = @func_2384(%309, %310) /* ty=(Tensor[(9, 14, 10), int8], Tensor[(3, 420), float64], Tensor[(10, 45), uint16], Tensor[(6, 14, 15), bool], Tensor[(5, 11, 3), bool], Tensor[(165), uint8]) */;
  %312 = %311.4;
  %313 = cast(%312, dtype="float64") /* ty=Tensor[(5, 11, 3), float64] */;
  %314 = %306.0;
  %315 = atanh(%313) /* ty=Tensor[(5, 11, 3), float64] */;
  (%314, meta[relay.Constant][27] /* ty=Tensor[(1260), int8] */, %315)
}

def @func_2553(%var_2537: Tensor[(10, 10, 12), int64], %var_2538: Tensor[(10, 10, 12), int64], %var_2544: Tensor[(195), float32], %var_2545: Tensor[(165), uint8], %var_2546: Tensor[(520), uint32]) -> (Tensor[(10, 10, 12), bool], Tensor[(520), uint32], Tensor[(39), float32], Tensor[(195), float32], Tensor[(165), uint8], Tensor[(520), uint32]) {
  %316 = cast(%var_2538, dtype="bool") /* ty=Tensor[(10, 10, 12), bool] */;
  %317 = shape_of(%var_2537, dtype="int32") /* ty=Tensor[(3), int32] */;
  %318 = cast(%var_2537, dtype="bool") /* ty=Tensor[(10, 10, 12), bool] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %320 = cast(meta[relay.Constant][28] /* ty=Tensor[(39), float32] */, dtype="float32") /* ty=Tensor[(39), float32] */;
  %321 = cast(%var_2544, dtype="float32") /* ty=Tensor[(195), float32] */;
  %322 = cast(%var_2545, dtype="uint8") /* ty=Tensor[(165), uint8] */;
  %323 = cast(%var_2546, dtype="uint32") /* ty=Tensor[(520), uint32] */;
  %324 = reshape(%320, newshape=[1, 3, 13]) /* ty=Tensor[(1, 3, 13), float32] */;
  %325 = reshape(%321, newshape=[5, 3, 13]) /* ty=Tensor[(5, 3, 13), float32] */;
  %326 = reshape(%322, newshape=[165]) /* ty=Tensor[(165), uint8] */;
  %327 = reshape(%323, newshape=[520]) /* ty=Tensor[(520), uint32] */;
  %328 = @func_217(%324, %325, %326, %327) /* ty=(Tensor[(5, 3, 13), float32], Tensor[(5, 11, 3), bool], Tensor[(165), uint8], Tensor[(8, 13, 5), bool], Tensor[(520), uint32], Tensor[(8, 13, 5), bool]) */;
  %329 = greater_equal(%318, %319) /* ty=Tensor[(10, 10, 12), bool] */;
  %330 = %328.4;
  (%329, %330, meta[relay.Constant][28] /* ty=Tensor[(39), float32] */, %var_2544, %var_2545, %var_2546)
}

def @func_4934() -> (Tensor[(1, 7, 11), float64], Tensor[(7, 14, 3), uint32], Tensor[(294), uint32]) {
  %337 = fn () -> (Tensor[(1, 7, 11), float64], Tensor[(7, 14, 3), uint32], Tensor[(294), uint32]) {
    %331 = @func_4060() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1, 1260), int8]) */;
    %332 = cast(meta[relay.Constant][29] /* ty=Tensor[(294), uint32] */, dtype="uint32") /* ty=Tensor[(294), uint32] */;
    %333 = reshape(%332, newshape=[7, 14, 3]) /* ty=Tensor[(7, 14, 3), uint32] */;
    %334 = @func_3675(%333) /* ty=(Tensor[(7, 14, 3), uint32],) */;
    %335 = %331.0;
    %336 = %334.0;
    (%335, %336, meta[relay.Constant][29] /* ty=Tensor[(294), uint32] */)
  };
  %337() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(7, 14, 3), uint32], Tensor[(294), uint32]) */
}

def @func_1477(%var_1476: Tensor[(14, 10, 3), float32]) -> (Tensor[(14, 10, 3), float32], Tensor[(165), uint8], Tensor[(39), float32], Tensor[(13, 15), float32], Tensor[(1, 165), uint8], Tensor[(520), uint32]) {
  %353 = fn (%var_1428: Tensor[(14, 10, 3), float32]) -> (Tensor[(14, 10, 3), float32], Tensor[(165), uint8], Tensor[(39), float32], Tensor[(13, 15), float32], Tensor[(1, 165), uint8], Tensor[(520), uint32]) {
    %338 = cast(%var_1428, dtype="float32") /* ty=Tensor[(14, 10, 3), float32] */;
    %339 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(14, 10, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %340 = cast(meta[relay.Constant][30] /* ty=Tensor[(14, 10, 3), float32] */, dtype="float32") /* ty=Tensor[(14, 10, 3), float32] */;
    %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %342 = cast(meta[relay.Constant][31] /* ty=Tensor[(39), float32] */, dtype="float32") /* ty=Tensor[(39), float32] */;
    %343 = cast(meta[relay.Constant][32] /* ty=Tensor[(13, 15), float32] */, dtype="float32") /* ty=Tensor[(13, 15), float32] */;
    %344 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 165), uint8] */, dtype="uint8") /* ty=Tensor[(1, 165), uint8] */;
    %345 = cast(meta[relay.Constant][34] /* ty=Tensor[(520), uint32] */, dtype="uint32") /* ty=Tensor[(520), uint32] */;
    %346 = reshape(%342, newshape=[1, 3, 13]) /* ty=Tensor[(1, 3, 13), float32] */;
    %347 = reshape(%343, newshape=[5, 3, 13]) /* ty=Tensor[(5, 3, 13), float32] */;
    %348 = reshape(%344, newshape=[165]) /* ty=Tensor[(165), uint8] */;
    %349 = reshape(%345, newshape=[520]) /* ty=Tensor[(520), uint32] */;
    %350 = @func_217(%346, %347, %348, %349) /* ty=(Tensor[(5, 3, 13), float32], Tensor[(5, 11, 3), bool], Tensor[(165), uint8], Tensor[(8, 13, 5), bool], Tensor[(520), uint32], Tensor[(8, 13, 5), bool]) */;
    %351 = mod(%340, %341) /* ty=Tensor[(14, 10, 3), float32] */;
    %352 = %350.2;
    (%351, %352, meta[relay.Constant][31] /* ty=Tensor[(39), float32] */, meta[relay.Constant][32] /* ty=Tensor[(13, 15), float32] */, meta[relay.Constant][33] /* ty=Tensor[(1, 165), uint8] */, meta[relay.Constant][34] /* ty=Tensor[(520), uint32] */)
  };
  %353(%var_1476) /* ty=(Tensor[(14, 10, 3), float32], Tensor[(165), uint8], Tensor[(39), float32], Tensor[(13, 15), float32], Tensor[(1, 165), uint8], Tensor[(520), uint32]) */
}

def @func_8091(%var_8039: Tensor[(16, 11, 10), float32]) -> (Tensor[(8, 7, 11), uint16], Tensor[(308, 2), float64], Tensor[(16, 11, 10), float64], Tensor[(16, 11, 10), float32]) {
  %354 = cast(meta[relay.Constant][35] /* ty=Tensor[(308, 2), float64] */, dtype="float64") /* ty=Tensor[(308, 2), float64] */;
  %355 = reshape(%354, newshape=[8, 7, 11]) /* ty=Tensor[(8, 7, 11), float64] */;
  %356 = cast(%var_8039, dtype="float32") /* ty=Tensor[(16, 11, 10), float32] */;
  %357 = sinh(%356) /* ty=Tensor[(16, 11, 10), float32] */;
  %358 = cast(%357, dtype="float64") /* ty=Tensor[(16, 11, 10), float64] */;
  %359 = cast(%357, dtype="float32") /* ty=Tensor[(16, 11, 10), float32] */;
  %360 = asinh(%359) /* ty=Tensor[(16, 11, 10), float32] */;
  %361 = cast(%360, dtype="float32") /* ty=Tensor[(16, 11, 10), float32] */;
  %362 = @func_3871(%355) /* ty=Tensor[(8, 7, 11), uint16] */;
  %363 = cosh(%358) /* ty=Tensor[(16, 11, 10), float64] */;
  %364 = acosh(%361) /* ty=Tensor[(16, 11, 10), float32] */;
  (%362, meta[relay.Constant][35] /* ty=Tensor[(308, 2), float64] */, %363, %364)
}

def @func_6953() -> (Tensor[(1, 7, 11), float64],) {
  @func_6951() /* ty=(Tensor[(1, 7, 11), float64],) */
}

def @func_8167() -> (Tensor[(1, 7, 11), float64],) {
  @func_8165() /* ty=(Tensor[(1, 7, 11), float64],) */
}

def @func_1798(%var_1796: Tensor[(5, 10, 9), uint16], %var_1797: Tensor[(5, 10, 9), uint16]) -> (Tensor[(13, 4, 8), float32], Tensor[(416), float32], Tensor[(5, 10, 9), float32], Tensor[(6, 14, 15), float64], Tensor[(3, 420), float64]) {
  @func_1794(%var_1796, %var_1797) /* ty=(Tensor[(13, 4, 8), float32], Tensor[(416), float32], Tensor[(5, 10, 9), float32], Tensor[(6, 14, 15), float64], Tensor[(3, 420), float64]) */
}

def @func_7705(%var_7677: Tensor[(9, 5, 3), uint16]) -> (Tensor[(9, 5, 3), uint16], Tensor[(1, 7, 11), float64], Tensor[(130, 4), bool], Tensor[(6, 14, 15), uint16], Tensor[(8, 15, 4), float64], Tensor[(480), float64], Tensor[(1, 7, 11), float64]) {
  %365 = cast(%var_7677, dtype="uint16") /* ty=Tensor[(9, 5, 3), uint16] */;
  %366 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(9, 5, 3), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(meta[relay.Constant][36] /* ty=Tensor[(9, 5, 3), uint16] */, dtype="uint16") /* ty=Tensor[(9, 5, 3), uint16] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %369 = @func_3185() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64]) */;
  %370 = @func_4167() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(5, 11, 3), bool], Tensor[(165), uint8], Tensor[(39, 1), float32], Tensor[(39, 5), float32], Tensor[(130, 4), int16], Tensor[(130, 4), bool]) */;
  %371 = @func_5578() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(1, 1260), float64], Tensor[(1, 7, 11), float64], Tensor[(195), float32], Tensor[(6, 14, 15), uint16]) */;
  %372 = cast(meta[relay.Constant][37] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %373 = cast(meta[relay.Constant][37] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %374 = reshape(%372, newshape=[8, 15, 4]) /* ty=Tensor[(8, 15, 4), float64] */;
  %375 = reshape(%373, newshape=[8, 15, 4]) /* ty=Tensor[(8, 15, 4), float64] */;
  %376 = @func_3832(%374, %375) /* ty=(Tensor[(8, 15, 4), float64],) */;
  %377 = @func_4968() /* ty=(Tensor[(1, 7, 11), float64],) */;
  %378 = minimum(%367, %368) /* ty=Tensor[(9, 5, 3), uint16] */;
  %379 = %369.0;
  %380 = %370.6;
  %381 = %371.4;
  %382 = %376.0;
  %383 = %377.0;
  (%378, %379, %380, %381, %382, meta[relay.Constant][37] /* ty=Tensor[(480), float64] */, %383)
}

def @func_6115(%var_6108: Tensor[(3, 5, 16), float64]) -> Tensor[(3, 5, 16), float64] {
  %384 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 5, 16), float64] */, dtype="float64") /* ty=Tensor[(1, 5, 16), float64] */;
  %385 = cast(%var_6108, dtype="float64") /* ty=Tensor[(3, 5, 16), float64] */;
  floor_divide(%384, %385) /* ty=Tensor[(3, 5, 16), float64] */
}

def @func_3986() -> Tensor[(1, 7, 11), float64] {
  @func_2775() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_6138() -> Tensor[(1, 1260), int8] {
  %386 = @func_4060() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1, 1260), int8]) */;
  %386.2
}

def @func_7871() -> Tensor[(5, 11, 3), bool] {
  %388 = fn () -> Tensor[(5, 11, 3), bool] {
    %387 = @func_6996() /* ty=(Tensor[(5, 11, 3), bool], Tensor[(3, 420), float32]) */;
    %387.0
  };
  %388() /* ty=Tensor[(5, 11, 3), bool] */
}

def @func_7803(%var_7801: Tensor[(600, 2), int64], %var_7802: Tensor[(165), uint8]) -> (Tensor[(1, 7, 11), float32], Tensor[(520), uint32], Tensor[(600, 2), int64], Tensor[(39, 5), float32], Tensor[(165), uint8], Tensor[(520), uint32]) {
  %404 = fn (%var_7793: Tensor[(600, 2), int64], %var_7795: Tensor[(165), uint8]) -> (Tensor[(1, 7, 11), float32], Tensor[(520), uint32], Tensor[(600, 2), int64], Tensor[(39, 5), float32], Tensor[(165), uint8], Tensor[(520), uint32]) {
    %389 = @func_4871() /* ty=Tensor[(1, 7, 11), float64] */;
    %390 = cast(%389, dtype="float32") /* ty=Tensor[(1, 7, 11), float32] */;
    %391 = cast(%var_7793, dtype="int64") /* ty=Tensor[(600, 2), int64] */;
    %392 = cast(%var_7793, dtype="int64") /* ty=Tensor[(600, 2), int64] */;
    %393 = cast(meta[relay.Constant][39] /* ty=Tensor[(39, 5), float32] */, dtype="float32") /* ty=Tensor[(39, 5), float32] */;
    %394 = cast(%var_7795, dtype="uint8") /* ty=Tensor[(165), uint8] */;
    %395 = cast(meta[relay.Constant][40] /* ty=Tensor[(520), uint32] */, dtype="uint32") /* ty=Tensor[(520), uint32] */;
    %396 = reshape(%391, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int64] */;
    %397 = reshape(%392, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int64] */;
    %398 = reshape(%393, newshape=[195]) /* ty=Tensor[(195), float32] */;
    %399 = reshape(%394, newshape=[165]) /* ty=Tensor[(165), uint8] */;
    %400 = reshape(%395, newshape=[520]) /* ty=Tensor[(520), uint32] */;
    %401 = @func_2553(%396, %397, %398, %399, %400) /* ty=(Tensor[(10, 10, 12), bool], Tensor[(520), uint32], Tensor[(39), float32], Tensor[(195), float32], Tensor[(165), uint8], Tensor[(520), uint32]) */;
    %402 = cos(%390) /* ty=Tensor[(1, 7, 11), float32] */;
    %403 = %401.5;
    (%402, %403, %var_7793, meta[relay.Constant][39] /* ty=Tensor[(39, 5), float32] */, %var_7795, meta[relay.Constant][40] /* ty=Tensor[(520), uint32] */)
  };
  %404(%var_7801, %var_7802) /* ty=(Tensor[(1, 7, 11), float32], Tensor[(520), uint32], Tensor[(600, 2), int64], Tensor[(39, 5), float32], Tensor[(165), uint8], Tensor[(520), uint32]) */
}

def @func_4996(%var_4994: Tensor[(6, 3, 3), float64], %var_4995: Tensor[(6, 3, 3), float64]) -> Tensor[(6, 3, 3), float64] {
  %409 = fn (%var_4988: Tensor[(6, 3, 3), float64], %var_4989: Tensor[(6, 3, 3), float64]) -> Tensor[(6, 3, 3), float64] {
    %405 = cast(%var_4989, dtype="float64") /* ty=Tensor[(6, 3, 3), float64] */;
    %406 = shape_of(%var_4988, dtype="int32") /* ty=Tensor[(3), int32] */;
    %407 = cast(%var_4988, dtype="float64") /* ty=Tensor[(6, 3, 3), float64] */;
    %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    mod(%407, %408) /* ty=Tensor[(6, 3, 3), float64] */
  };
  %409(%var_4994, %var_4995) /* ty=Tensor[(6, 3, 3), float64] */
}

def @func_3593(%var_3590: Tensor[(13, 15), float32], %var_3591: Tensor[(39), float32], %var_3592: Tensor[(1260), int8]) -> (Tensor[(165), uint8], Tensor[(416), float32], Tensor[(13, 15), float32], Tensor[(520), uint32], Tensor[(520), uint32], Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64], Tensor[(1260), int8], Tensor[(1260), int8], Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64], Tensor[(39), bool], Tensor[(39), float32], Tensor[(1, 7, 11), float32], Tensor[(10, 10, 12), bool], Tensor[(2, 600), int64]) {
  %473 = fn (%var_3459: Tensor[(13, 15), float32], %var_3485: Tensor[(39), float32], %var_3519: Tensor[(1260), int8]) -> (Tensor[(165), uint8], Tensor[(416), float32], Tensor[(13, 15), float32], Tensor[(520), uint32], Tensor[(520), uint32], Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64], Tensor[(1260), int8], Tensor[(1260), int8], Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64], Tensor[(39), bool], Tensor[(39), float32], Tensor[(1, 7, 11), float32], Tensor[(10, 10, 12), bool], Tensor[(2, 600), int64]) {
    %410 = cast(meta[relay.Constant][41] /* ty=Tensor[(416), float32] */, dtype="float32") /* ty=Tensor[(416), float32] */;
    %411 = cast(%var_3459, dtype="float32") /* ty=Tensor[(13, 15), float32] */;
    %412 = reshape(%410, newshape=[16, 26]) /* ty=Tensor[(16, 26), float32] */;
    %413 = reshape(%411, newshape=[195]) /* ty=Tensor[(195), float32] */;
    %414 = @func_2208(%412, %413) /* ty=(Tensor[(2, 13, 10), bool], Tensor[(13, 4, 8), int32], Tensor[(165), uint8], Tensor[(195), float32], Tensor[(11, 15), uint8], Tensor[(520), uint32], Tensor[(39), float32]) */;
    %415 = cast(meta[relay.Constant][42] /* ty=Tensor[(39), float32] */, dtype="float32") /* ty=Tensor[(39), float32] */;
    %416 = cast(%var_3459, dtype="float32") /* ty=Tensor[(13, 15), float32] */;
    %417 = %414.2;
    %418 = cast(%417, dtype="uint8") /* ty=Tensor[(165), uint8] */;
    %419 = cast(meta[relay.Constant][43] /* ty=Tensor[(520), uint32] */, dtype="uint32") /* ty=Tensor[(520), uint32] */;
    %420 = reshape(%415, newshape=[1, 3, 13]) /* ty=Tensor[(1, 3, 13), float32] */;
    %421 = reshape(%416, newshape=[5, 3, 13]) /* ty=Tensor[(5, 3, 13), float32] */;
    %422 = reshape(%418, newshape=[165]) /* ty=Tensor[(165), uint8] */;
    %423 = reshape(%419, newshape=[520]) /* ty=Tensor[(520), uint32] */;
    %424 = @func_217(%420, %421, %422, %423) /* ty=(Tensor[(5, 3, 13), float32], Tensor[(5, 11, 3), bool], Tensor[(165), uint8], Tensor[(8, 13, 5), bool], Tensor[(520), uint32], Tensor[(8, 13, 5), bool]) */;
    %425 = cast(%var_3519, dtype="int8") /* ty=Tensor[(1260), int8] */;
    %426 = reshape(%425, newshape=[1260]) /* ty=Tensor[(1260), int8] */;
    %427 = @func_3052(%426) /* ty=(Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1260), int8]) */;
    %428 = cast(%var_3519, dtype="int8") /* ty=Tensor[(1260), int8] */;
    %429 = reshape(%428, newshape=[1260]) /* ty=Tensor[(1260), int8] */;
    %430 = @func_3052(%429) /* ty=(Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1260), int8]) */;
    %431 = cast(%var_3485, dtype="bool") /* ty=Tensor[(39), bool] */;
    %432 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(39), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %433 = cast(meta[relay.Constant][42] /* ty=Tensor[(39), float32] */, dtype="bool") /* ty=Tensor[(39), bool] */;
    %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?), bool] */;
    %435 = logical_or(%433, %434) /* ty=Tensor[(39), bool] */;
    %436 = cast(meta[relay.Constant][42] /* ty=Tensor[(39), float32] */, dtype="bool") /* ty=Tensor[(39), bool] */;
    %437 = shape_of(%var_3485, dtype="int32") /* ty=Tensor[(1), int32] */;
    %438 = cast(%var_3485, dtype="bool") /* ty=Tensor[(39), bool] */;
    %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?), bool] */;
    %440 = equal(%438, %439) /* ty=Tensor[(39), bool] */;
    %441 = cast(%440, dtype="bool") /* ty=Tensor[(39), bool] */;
    %442 = shape_of(%435, dtype="int32") /* ty=Tensor[(1), int32] */;
    %443 = cast(%435, dtype="bool") /* ty=Tensor[(39), bool] */;
    %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?), bool] */;
    %445 = cast(%435, dtype="float32") /* ty=Tensor[(39), float32] */;
    %446 = shape_of(%440, dtype="int32") /* ty=Tensor[(1), int32] */;
    %447 = cast(%440, dtype="float32") /* ty=Tensor[(39), float32] */;
    %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?), float32] */;
    %449 = @func_3185() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64]) */;
    %450 = %449.1;
    %451 = cast(%450, dtype="float32") /* ty=Tensor[(1, 7, 11), float32] */;
    %452 = cast(meta[relay.Constant][44] /* ty=Tensor[(2, 600), int64] */, dtype="int64") /* ty=Tensor[(2, 600), int64] */;
    %453 = cast(meta[relay.Constant][44] /* ty=Tensor[(2, 600), int64] */, dtype="int64") /* ty=Tensor[(2, 600), int64] */;
    %454 = cast(%var_3459, dtype="float32") /* ty=Tensor[(13, 15), float32] */;
    %455 = cast(%417, dtype="uint8") /* ty=Tensor[(165), uint8] */;
    %456 = cast(meta[relay.Constant][43] /* ty=Tensor[(520), uint32] */, dtype="uint32") /* ty=Tensor[(520), uint32] */;
    %457 = reshape(%452, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int64] */;
    %458 = reshape(%453, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int64] */;
    %459 = reshape(%454, newshape=[195]) /* ty=Tensor[(195), float32] */;
    %460 = reshape(%455, newshape=[165]) /* ty=Tensor[(165), uint8] */;
    %461 = reshape(%456, newshape=[520]) /* ty=Tensor[(520), uint32] */;
    %462 = @func_2553(%457, %458, %459, %460, %461) /* ty=(Tensor[(10, 10, 12), bool], Tensor[(520), uint32], Tensor[(39), float32], Tensor[(195), float32], Tensor[(165), uint8], Tensor[(520), uint32]) */;
    %463 = %424.4;
    %464 = @func_2908() /* ty=Tensor[(1, 7, 11), float64] */;
    %465 = @func_2908() /* ty=Tensor[(1, 7, 11), float64] */;
    %466 = %427.2;
    %467 = @func_2723() /* ty=Tensor[(1, 7, 11), float64] */;
    %468 = %430.0;
    %469 = not_equal(%443, %444) /* ty=Tensor[(39), bool] */;
    %470 = floor_divide(%447, %448) /* ty=Tensor[(39), float32] */;
    %471 = sqrt(%451) /* ty=Tensor[(1, 7, 11), float32] */;
    %472 = %462.0;
    (%417, meta[relay.Constant][41] /* ty=Tensor[(416), float32] */, %var_3459, %463, meta[relay.Constant][43] /* ty=Tensor[(520), uint32] */, %464, %465, %466, %var_3519, %467, %468, %469, %470, %471, %472, meta[relay.Constant][44] /* ty=Tensor[(2, 600), int64] */)
  };
  %473(%var_3590, %var_3591, %var_3592) /* ty=(Tensor[(165), uint8], Tensor[(416), float32], Tensor[(13, 15), float32], Tensor[(520), uint32], Tensor[(520), uint32], Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64], Tensor[(1260), int8], Tensor[(1260), int8], Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64], Tensor[(39), bool], Tensor[(39), float32], Tensor[(1, 7, 11), float32], Tensor[(10, 10, 12), bool], Tensor[(2, 600), int64]) */
}

def @func_8094(%var_8092: Tensor[(16, 11, 10), float32]) -> (Tensor[(8, 7, 11), uint16], Tensor[(308, 2), float64], Tensor[(16, 11, 10), float64], Tensor[(16, 11, 10), float32]) {
  @func_8091(%var_8092) /* ty=(Tensor[(8, 7, 11), uint16], Tensor[(308, 2), float64], Tensor[(16, 11, 10), float64], Tensor[(16, 11, 10), float32]) */
}

def @func_3744(%var_3737: Tensor[(480), float32]) -> (Tensor[(420), float32], Tensor[(3, 16, 10), float32], Tensor[(480), float32]) {
  %474 = @func_3406() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(39), float32], Tensor[(420), float32]) */;
  %475 = cast(%var_3737, dtype="float32") /* ty=Tensor[(480), float32] */;
  %476 = cast(%var_3737, dtype="float32") /* ty=Tensor[(480), float32] */;
  %477 = reshape(%475, newshape=[3, 16, 10]) /* ty=Tensor[(3, 16, 10), float32] */;
  %478 = reshape(%476, newshape=[3, 16, 10]) /* ty=Tensor[(3, 16, 10), float32] */;
  %479 = %474.2;
  %480 = @func_2959(%477, %478) /* ty=Tensor[(3, 16, 10), float32] */;
  (%479, %480, %var_3737)
}

def @func_2560(%var_2555: Tensor[(10, 10, 12), int64], %var_2556: Tensor[(10, 10, 12), int64], %var_2557: Tensor[(195), float32], %var_2558: Tensor[(165), uint8], %var_2559: Tensor[(520), uint32]) -> (Tensor[(10, 10, 12), bool], Tensor[(520), uint32], Tensor[(39), float32], Tensor[(195), float32], Tensor[(165), uint8], Tensor[(520), uint32]) {
  @func_2553(%var_2555, %var_2556, %var_2557, %var_2558, %var_2559) /* ty=(Tensor[(10, 10, 12), bool], Tensor[(520), uint32], Tensor[(39), float32], Tensor[(195), float32], Tensor[(165), uint8], Tensor[(520), uint32]) */
}

def @func_3874(%var_3872: Tensor[(8, 7, 11), float64]) -> Tensor[(8, 7, 11), uint16] {
  @func_3871(%var_3872) /* ty=Tensor[(8, 7, 11), uint16] */
}

def @func_5016() -> (Tensor[(294), uint32],) {
  @func_5014() /* ty=(Tensor[(294), uint32],) */
}

def @func_2884(%var_2869: Tensor[(1200), int64], %var_2870: Tensor[(195), float32]) -> (Tensor[(1, 7, 11), float64], Tensor[(165), uint8], Tensor[(1200), int64], Tensor[(195), float32], Tensor[(165), uint8], Tensor[(520), uint32]) {
  %481 = cast(%var_2869, dtype="int64") /* ty=Tensor[(1200), int64] */;
  %482 = cast(%var_2869, dtype="int64") /* ty=Tensor[(1200), int64] */;
  %483 = cast(%var_2870, dtype="float32") /* ty=Tensor[(195), float32] */;
  %484 = cast(meta[relay.Constant][45] /* ty=Tensor[(165), uint8] */, dtype="uint8") /* ty=Tensor[(165), uint8] */;
  %485 = cast(meta[relay.Constant][46] /* ty=Tensor[(520), uint32] */, dtype="uint32") /* ty=Tensor[(520), uint32] */;
  %486 = reshape(%481, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int64] */;
  %487 = reshape(%482, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int64] */;
  %488 = reshape(%483, newshape=[195]) /* ty=Tensor[(195), float32] */;
  %489 = reshape(%484, newshape=[165]) /* ty=Tensor[(165), uint8] */;
  %490 = reshape(%485, newshape=[520]) /* ty=Tensor[(520), uint32] */;
  %491 = @func_2553(%486, %487, %488, %489, %490) /* ty=(Tensor[(10, 10, 12), bool], Tensor[(520), uint32], Tensor[(39), float32], Tensor[(195), float32], Tensor[(165), uint8], Tensor[(520), uint32]) */;
  %492 = @func_2723() /* ty=Tensor[(1, 7, 11), float64] */;
  %493 = %491.4;
  (%492, %493, %var_2869, %var_2870, meta[relay.Constant][45] /* ty=Tensor[(165), uint8] */, meta[relay.Constant][46] /* ty=Tensor[(520), uint32] */)
}

def @func_3187() -> (Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64]) {
  @func_3185() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64]) */
}

def @func_2959(%var_2945: Tensor[(3, 16, 10), float32], %var_2946: Tensor[(3, 16, 10), float32]) -> Tensor[(3, 16, 10), float32] {
  %494 = cast(%var_2946, dtype="float32") /* ty=Tensor[(3, 16, 10), float32] */;
  %495 = shape_of(%var_2945, dtype="int32") /* ty=Tensor[(3), int32] */;
  %496 = cast(%var_2945, dtype="float32") /* ty=Tensor[(3, 16, 10), float32] */;
  %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%496, %497) /* ty=Tensor[(3, 16, 10), float32] */
}

def @func_6997() -> (Tensor[(5, 11, 3), bool], Tensor[(3, 420), float32]) {
  %507 = fn () -> (Tensor[(5, 11, 3), bool], Tensor[(3, 420), float32]) {
    %498 = @func_6739() /* ty=Tensor[(3, 420), float64] */;
    %499 = cast(%498, dtype="int8") /* ty=Tensor[(3, 420), int8] */;
    %500 = cast(%498, dtype="int8") /* ty=Tensor[(3, 420), int8] */;
    %501 = reshape(%499, newshape=[9, 14, 10]) /* ty=Tensor[(9, 14, 10), int8] */;
    %502 = reshape(%500, newshape=[9, 14, 10]) /* ty=Tensor[(9, 14, 10), int8] */;
    %503 = @func_2384(%501, %502) /* ty=(Tensor[(9, 14, 10), int8], Tensor[(3, 420), float64], Tensor[(10, 45), uint16], Tensor[(6, 14, 15), bool], Tensor[(5, 11, 3), bool], Tensor[(165), uint8]) */;
    %504 = cast(%498, dtype="float32") /* ty=Tensor[(3, 420), float32] */;
    %505 = %503.4;
    %506 = sinh(%504) /* ty=Tensor[(3, 420), float32] */;
    (%505, %506)
  };
  %507() /* ty=(Tensor[(5, 11, 3), bool], Tensor[(3, 420), float32]) */
}

def @func_8537() -> (Tensor[(1, 7, 11), float64], Tensor[(11, 1, 15), float32], uint16, Tensor[(165, 1), uint16], Tensor[(480), float32], Tensor[(195), float32], Tensor[(420), float32], Tensor[(10, 13, 12), float64], Tensor[(1560), float64]) {
  %527 = fn () -> (Tensor[(1, 7, 11), float64], Tensor[(11, 1, 15), float32], uint16, Tensor[(165, 1), uint16], Tensor[(480), float32], Tensor[(195), float32], Tensor[(420), float32], Tensor[(10, 13, 12), float64], Tensor[(1560), float64]) {
    %508 = cast(meta[relay.Constant][47] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %509 = cast(meta[relay.Constant][48] /* ty=Tensor[(165, 1), uint16] */, dtype="uint16") /* ty=Tensor[(165, 1), uint16] */;
    %510 = reshape(%508, newshape=[]) /* ty=uint16 */;
    %511 = reshape(%509, newshape=[11, 1, 15]) /* ty=Tensor[(11, 1, 15), uint16] */;
    %512 = @func_3003(%510, %511) /* ty=(Tensor[(11, 1, 15), uint16], Tensor[(11, 1, 15), float32]) */;
    %513 = cast(meta[relay.Constant][49] /* ty=Tensor[(195), float32] */, dtype="float32") /* ty=Tensor[(195), float32] */;
    %514 = reshape(%513, newshape=[195]) /* ty=Tensor[(195), float32] */;
    %515 = @func_6520(%514) /* ty=(Tensor[(1, 7, 11), float64], Tensor[(195), float32], Tensor[(195), float32], Tensor[(480), float32]) */;
    %516 = @func_3406() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(39), float32], Tensor[(420), float32]) */;
    %517 = cast(meta[relay.Constant][50] /* ty=Tensor[(1560), float64] */, dtype="float64") /* ty=Tensor[(1560), float64] */;
    %518 = cast(meta[relay.Constant][50] /* ty=Tensor[(1560), float64] */, dtype="float64") /* ty=Tensor[(1560), float64] */;
    %519 = reshape(%517, newshape=[10, 13, 12]) /* ty=Tensor[(10, 13, 12), float64] */;
    %520 = reshape(%518, newshape=[10, 13, 12]) /* ty=Tensor[(10, 13, 12), float64] */;
    %521 = @func_8280(%519, %520) /* ty=(Tensor[(10, 13, 12), float64], Tensor[(1, 7, 11), float64], Tensor[(4, 3, 14), float64], Tensor[(168), float64], Tensor[(1, 7, 11), float64]) */;
    %522 = @func_4672() /* ty=Tensor[(1, 7, 11), float64] */;
    %523 = %512.1;
    %524 = %515.3;
    %525 = %516.2;
    %526 = %521.0;
    (%522, %523, meta[relay.Constant][47] /* ty=uint16 */, meta[relay.Constant][48] /* ty=Tensor[(165, 1), uint16] */, %524, meta[relay.Constant][49] /* ty=Tensor[(195), float32] */, %525, %526, meta[relay.Constant][50] /* ty=Tensor[(1560), float64] */)
  };
  %527() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(11, 1, 15), float32], uint16, Tensor[(165, 1), uint16], Tensor[(480), float32], Tensor[(195), float32], Tensor[(420), float32], Tensor[(10, 13, 12), float64], Tensor[(1560), float64]) */
}

def @func_7159() -> (Tensor[(3, 420), float32], Tensor[(1, 7, 11), float64]) {
  %528 = @func_6996() /* ty=(Tensor[(5, 11, 3), bool], Tensor[(3, 420), float32]) */;
  %529 = @func_5906() /* ty=(Tensor[(480), float32], Tensor[(1, 7, 11), float64]) */;
  %530 = %528.1;
  %531 = %529.1;
  (%530, %531)
}

def @func_2387(%var_2385: Tensor[(9, 14, 10), int8], %var_2386: Tensor[(9, 14, 10), int8]) -> (Tensor[(9, 14, 10), int8], Tensor[(3, 420), float64], Tensor[(10, 45), uint16], Tensor[(6, 14, 15), bool], Tensor[(5, 11, 3), bool], Tensor[(165), uint8]) {
  %557 = fn (%var_2337: Tensor[(9, 14, 10), int8], %var_2338: Tensor[(9, 14, 10), int8]) -> (Tensor[(9, 14, 10), int8], Tensor[(3, 420), float64], Tensor[(10, 45), uint16], Tensor[(6, 14, 15), bool], Tensor[(5, 11, 3), bool], Tensor[(165), uint8]) {
    %532 = cast(%var_2338, dtype="int8") /* ty=Tensor[(9, 14, 10), int8] */;
    %533 = shape_of(%var_2337, dtype="int32") /* ty=Tensor[(3), int32] */;
    %534 = cast(%var_2337, dtype="int8") /* ty=Tensor[(9, 14, 10), int8] */;
    %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %536 = left_shift(%534, %535) /* ty=Tensor[(9, 14, 10), int8] */;
    %537 = cast(%536, dtype="int8") /* ty=Tensor[(9, 14, 10), int8] */;
    %538 = shape_of(%var_2338, dtype="int32") /* ty=Tensor[(3), int32] */;
    %539 = cast(%var_2338, dtype="int8") /* ty=Tensor[(9, 14, 10), int8] */;
    %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %541 = cast(meta[relay.Constant][51] /* ty=Tensor[(10, 45), uint16] */, dtype="uint16") /* ty=Tensor[(10, 45), uint16] */;
    %542 = cast(meta[relay.Constant][51] /* ty=Tensor[(10, 45), uint16] */, dtype="uint16") /* ty=Tensor[(10, 45), uint16] */;
    %543 = reshape(%541, newshape=[5, 10, 9]) /* ty=Tensor[(5, 10, 9), uint16] */;
    %544 = reshape(%542, newshape=[5, 10, 9]) /* ty=Tensor[(5, 10, 9), uint16] */;
    %545 = @func_1794(%543, %544) /* ty=(Tensor[(13, 4, 8), float32], Tensor[(416), float32], Tensor[(5, 10, 9), float32], Tensor[(6, 14, 15), float64], Tensor[(3, 420), float64]) */;
    %546 = cast(%var_2337, dtype="float64") /* ty=Tensor[(9, 14, 10), float64] */;
    %547 = reshape(%546, newshape=[6, 14, 15]) /* ty=Tensor[(6, 14, 15), float64] */;
    %548 = @func_412(%547) /* ty=(Tensor[(6, 14, 15), bool], Tensor[(6, 14, 15), float64]) */;
    %549 = cast(meta[relay.Constant][52] /* ty=Tensor[(165), uint8] */, dtype="uint8") /* ty=Tensor[(165), uint8] */;
    %550 = cast(meta[relay.Constant][52] /* ty=Tensor[(165), uint8] */, dtype="uint8") /* ty=Tensor[(165), uint8] */;
    %551 = reshape(%549, newshape=[5, 11, 3]) /* ty=Tensor[(5, 11, 3), uint8] */;
    %552 = reshape(%550, newshape=[5, 11, 3]) /* ty=Tensor[(5, 11, 3), uint8] */;
    %553 = bitwise_and(%539, %540) /* ty=Tensor[(9, 14, 10), int8] */;
    %554 = %545.4;
    %555 = %548.0;
    %556 = @func_38(%551, %552) /* ty=Tensor[(5, 11, 3), bool] */;
    (%553, %554, meta[relay.Constant][51] /* ty=Tensor[(10, 45), uint16] */, %555, %556, meta[relay.Constant][52] /* ty=Tensor[(165), uint8] */)
  };
  %557(%var_2385, %var_2386) /* ty=(Tensor[(9, 14, 10), int8], Tensor[(3, 420), float64], Tensor[(10, 45), uint16], Tensor[(6, 14, 15), bool], Tensor[(5, 11, 3), bool], Tensor[(165), uint8]) */
}

def @func_2909() -> Tensor[(1, 7, 11), float64] {
  %558 = fn () -> Tensor[(1, 7, 11), float64] {
    @func_2775() /* ty=Tensor[(1, 7, 11), float64] */
  };
  %558() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_6940(%var_6937: Tensor[(195), float32], %var_6938: Tensor[(165), uint8], %var_6939: Tensor[(520), uint32]) -> (Tensor[(?, 1260), float32], Tensor[(10, 10, 12), bool], Tensor[(1200), int64], Tensor[(195), float32], Tensor[(165), uint8], Tensor[(520), uint32], Tensor[(1, 1260), float64]) {
  @func_6935(%var_6937, %var_6938, %var_6939) /* ty=(Tensor[(?, 1260), float32], Tensor[(10, 10, 12), bool], Tensor[(1200), int64], Tensor[(195), float32], Tensor[(165), uint8], Tensor[(520), uint32], Tensor[(1, 1260), float64]) */
}

def @func_3185() -> (Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64]) {
  %559 = @func_2775() /* ty=Tensor[(1, 7, 11), float64] */;
  %560 = @func_2908() /* ty=Tensor[(1, 7, 11), float64] */;
  (%559, %560)
}

def @func_6416(%var_6412: Tensor[(1200), int64], %var_6413: Tensor[(195, 1), float32], %var_6414: Tensor[(1, 520), uint32], %var_6415: Tensor[(294), uint32]) -> (Tensor[(1, 1260), float64], Tensor[(6, 14, 15), float64], Tensor[(520), uint32], Tensor[(1200), int64], Tensor[(1, 520), uint32], Tensor[(7, 14, 3), uint32], Tensor[(294), uint32], Tensor[(195, 165), uint16]) {
  @func_6410(%var_6412, %var_6413, %var_6414, %var_6415) /* ty=(Tensor[(1, 1260), float64], Tensor[(6, 14, 15), float64], Tensor[(520), uint32], Tensor[(1200), int64], Tensor[(1, 520), uint32], Tensor[(7, 14, 3), uint32], Tensor[(294), uint32], Tensor[(195, 165), uint16]) */
}

def @func_3054(%var_3053: Tensor[(1260), int8]) -> (Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1260), int8]) {
  %568 = fn (%var_3047: Tensor[(1260), int8]) -> (Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1260), int8]) {
    %561 = cast(%var_3047, dtype="int8") /* ty=Tensor[(1260), int8] */;
    %562 = cast(%var_3047, dtype="int8") /* ty=Tensor[(1260), int8] */;
    %563 = reshape(%561, newshape=[9, 14, 10]) /* ty=Tensor[(9, 14, 10), int8] */;
    %564 = reshape(%562, newshape=[9, 14, 10]) /* ty=Tensor[(9, 14, 10), int8] */;
    %565 = @func_2384(%563, %564) /* ty=(Tensor[(9, 14, 10), int8], Tensor[(3, 420), float64], Tensor[(10, 45), uint16], Tensor[(6, 14, 15), bool], Tensor[(5, 11, 3), bool], Tensor[(165), uint8]) */;
    %566 = @func_2786() /* ty=Tensor[(1, 7, 11), float64] */;
    %567 = %565.1;
    (%566, %567, %var_3047)
  };
  %568(%var_3053) /* ty=(Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1260), int8]) */
}

def @func_6664() -> Tensor[(1, 7, 11), float64] {
  %569 = fn () -> Tensor[(1, 7, 11), float64] {
    @func_4341() /* ty=Tensor[(1, 7, 11), float64] */
  };
  %569() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_6822() -> (Tensor[(1, 7, 11), float64],) {
  %570 = @func_3986() /* ty=Tensor[(1, 7, 11), float64] */;
  (%570,)
}

def @func_4815() -> (Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1260), int8]) {
  %571 = cast(meta[relay.Constant][53] /* ty=Tensor[(1260), int8] */, dtype="int8") /* ty=Tensor[(1260), int8] */;
  %572 = reshape(%571, newshape=[1260]) /* ty=Tensor[(1260), int8] */;
  %573 = @func_3052(%572) /* ty=(Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1260), int8]) */;
  %574 = @func_4299() /* ty=Tensor[(1, 7, 11), float64] */;
  %575 = %573.1;
  (%574, %575, meta[relay.Constant][53] /* ty=Tensor[(1260), int8] */)
}

def @func_4674() -> Tensor[(1, 7, 11), float64] {
  @func_4672() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_7161() -> (Tensor[(3, 420), float32], Tensor[(1, 7, 11), float64]) {
  @func_7159() /* ty=(Tensor[(3, 420), float32], Tensor[(1, 7, 11), float64]) */
}

def @func_414(%var_413: Tensor[(6, 14, 15), float64]) -> (Tensor[(6, 14, 15), bool], Tensor[(6, 14, 15), float64]) {
  %585 = fn (%var_380: Tensor[(6, 14, 15), float64]) -> (Tensor[(6, 14, 15), bool], Tensor[(6, 14, 15), float64]) {
    %576 = cast(%var_380, dtype="float64") /* ty=Tensor[(6, 14, 15), float64] */;
    %577 = exp(%576) /* ty=Tensor[(6, 14, 15), float64] */;
    %578 = cast(%577, dtype="bool") /* ty=Tensor[(6, 14, 15), bool] */;
    %579 = shape_of(%var_380, dtype="int32") /* ty=Tensor[(3), int32] */;
    %580 = cast(%var_380, dtype="bool") /* ty=Tensor[(6, 14, 15), bool] */;
    %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %582 = cast(%577, dtype="float64") /* ty=Tensor[(6, 14, 15), float64] */;
    %583 = equal(%580, %581) /* ty=Tensor[(6, 14, 15), bool] */;
    %584 = acosh(%582) /* ty=Tensor[(6, 14, 15), float64] */;
    (%583, %584)
  };
  %585(%var_413) /* ty=(Tensor[(6, 14, 15), bool], Tensor[(6, 14, 15), float64]) */
}

def @func_7063(%var_7062: Tensor[(2, 5, 13), uint16]) -> (Tensor[(2, 5, 13), uint16], Tensor[(2, 5, 13), float32]) {
  %593 = fn (%var_7053: Tensor[(2, 5, 13), uint16]) -> (Tensor[(2, 5, 13), uint16], Tensor[(2, 5, 13), float32]) {
    %586 = cast(meta[relay.Constant][54] /* ty=Tensor[(2, 5, 13), uint16] */, dtype="uint16") /* ty=Tensor[(2, 5, 13), uint16] */;
    %587 = shape_of(%var_7053, dtype="int32") /* ty=Tensor[(3), int32] */;
    %588 = cast(%var_7053, dtype="uint16") /* ty=Tensor[(2, 5, 13), uint16] */;
    %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %590 = cast(meta[relay.Constant][54] /* ty=Tensor[(2, 5, 13), uint16] */, dtype="float32") /* ty=Tensor[(2, 5, 13), float32] */;
    %591 = logical_xor(%588, %589) /* ty=Tensor[(2, 5, 13), uint16] */;
    %592 = rsqrt(%590) /* ty=Tensor[(2, 5, 13), float32] */;
    (%591, %592)
  };
  %593(%var_7062) /* ty=(Tensor[(2, 5, 13), uint16], Tensor[(2, 5, 13), float32]) */
}

def @func_6105(%var_6103: Tensor[(420), float32]) -> (Tensor[(1260), int8], Tensor[(6, 14, 15), bool], Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64], Tensor[(?, 7, 11), float64], Tensor[(39), float32], Tensor[(420), float32], Tensor[(1, 7, 11), float64], Tensor[(294), uint32], Tensor[(6, 7, 11), int16]) {
  @func_6102(%var_6103) /* ty=(Tensor[(1260), int8], Tensor[(6, 14, 15), bool], Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64], Tensor[(?, 7, 11), float64], Tensor[(39), float32], Tensor[(420), float32], Tensor[(1, 7, 11), float64], Tensor[(294), uint32], Tensor[(6, 7, 11), int16]) */
}

def @func_5689(%var_5687: Tensor[(1260), int8], %var_5688: Tensor[(462), float64]) -> (Tensor[(10, 45), uint16], Tensor[(1260), int8], Tensor[(6, 14, 15), bool], Tensor[(?, 7, 11), float64], Tensor[(165), uint8], Tensor[(462), float64], Tensor[(6, 7, 11), bool], Tensor[(1, 7, 11), float32], Tensor[(1, 7, 11), float64], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) {
  %629 = fn (%var_5598: Tensor[(1260), int8], %var_5637: Tensor[(462), float64]) -> (Tensor[(10, 45), uint16], Tensor[(1260), int8], Tensor[(6, 14, 15), bool], Tensor[(?, 7, 11), float64], Tensor[(165), uint8], Tensor[(462), float64], Tensor[(6, 7, 11), bool], Tensor[(1, 7, 11), float32], Tensor[(1, 7, 11), float64], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) {
    %594 = cast(%var_5598, dtype="int8") /* ty=Tensor[(1260), int8] */;
    %595 = cast(%var_5598, dtype="int8") /* ty=Tensor[(1260), int8] */;
    %596 = reshape(%594, newshape=[9, 14, 10]) /* ty=Tensor[(9, 14, 10), int8] */;
    %597 = reshape(%595, newshape=[9, 14, 10]) /* ty=Tensor[(9, 14, 10), int8] */;
    %598 = @func_2384(%596, %597) /* ty=(Tensor[(9, 14, 10), int8], Tensor[(3, 420), float64], Tensor[(10, 45), uint16], Tensor[(6, 14, 15), bool], Tensor[(5, 11, 3), bool], Tensor[(165), uint8]) */;
    %599 = cast(%var_5598, dtype="float64") /* ty=Tensor[(1260), float64] */;
    %600 = reshape(%599, newshape=[6, 14, 15]) /* ty=Tensor[(6, 14, 15), float64] */;
    %601 = @func_412(%600) /* ty=(Tensor[(6, 14, 15), bool], Tensor[(6, 14, 15), float64]) */;
    %602 = @func_4341() /* ty=Tensor[(1, 7, 11), float64] */;
    %603 = cast(%602, dtype="float64") /* ty=Tensor[(1, 7, 11), float64] */;
    %604 = sigmoid(%603) /* ty=Tensor[(1, 7, 11), float64] */;
    %605 = cast(%604, dtype="float64") /* ty=Tensor[(1, 7, 11), float64] */;
    %606 = shape_of(%602, dtype="int32") /* ty=Tensor[(3), int32] */;
    %607 = cast(%602, dtype="float64") /* ty=Tensor[(1, 7, 11), float64] */;
    %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %609 = %601.0;
    %610 = cast(%609, dtype="float64") /* ty=Tensor[(6, 14, 15), float64] */;
    %611 = reshape(%610, newshape=[3, 420]) /* ty=Tensor[(3, 420), float64] */;
    %612 = @func_4409(%611) /* ty=(Tensor[(5, 11, 3), bool], Tensor[(165), uint8], Tensor[(3, 420), uint32]) */;
    %613 = cast(%var_5637, dtype="float64") /* ty=Tensor[(462), float64] */;
    %614 = reshape(%613, newshape=[6, 7, 11]) /* ty=Tensor[(6, 7, 11), float64] */;
    %615 = @func_4959(%614) /* ty=(Tensor[(6, 7, 11), int16],) */;
    %616 = %615.0;
    %617 = cast(%602, dtype="bool") /* ty=Tensor[(1, 7, 11), bool] */;
    %618 = cast(%616, dtype="bool") /* ty=Tensor[(6, 7, 11), bool] */;
    %619 = cast(%604, dtype="float32") /* ty=Tensor[(1, 7, 11), float32] */;
    %620 = cast(meta[relay.Constant][55] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
    %621 = reshape(%620, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), float64] */;
    %622 = %598.2;
    %623 = floor_divide(%607, %608) /* ty=Tensor[(?, 7, 11), float64] */;
    %624 = %612.1;
    %625 = equal(%617, %618) /* ty=Tensor[(6, 7, 11), bool] */;
    %626 = asin(%619) /* ty=Tensor[(1, 7, 11), float32] */;
    %627 = @func_3786() /* ty=Tensor[(1, 7, 11), float64] */;
    %628 = @func_5301(%621) /* ty=Tensor[(8, 7, 13), float64] */;
    (%622, %var_5598, %609, %623, %624, %var_5637, %625, %626, %627, %628, meta[relay.Constant][55] /* ty=Tensor[(728), float64] */)
  };
  %629(%var_5687, %var_5688) /* ty=(Tensor[(10, 45), uint16], Tensor[(1260), int8], Tensor[(6, 14, 15), bool], Tensor[(?, 7, 11), float64], Tensor[(165), uint8], Tensor[(462), float64], Tensor[(6, 7, 11), bool], Tensor[(1, 7, 11), float32], Tensor[(1, 7, 11), float64], Tensor[(8, 7, 13), float64], Tensor[(728), float64]) */
}

def @func_7338() -> (Tensor[(1, 7, 11), float64],) {
  @func_7336() /* ty=(Tensor[(1, 7, 11), float64],) */
}

def @func_3007(%var_3005: uint16, %var_3006: Tensor[(11, 1, 15), uint16]) -> (Tensor[(11, 1, 15), uint16], Tensor[(11, 1, 15), float32]) {
  @func_3003(%var_3005, %var_3006) /* ty=(Tensor[(11, 1, 15), uint16], Tensor[(11, 1, 15), float32]) */
}

def @func_8005(%var_7990: Tensor[(12, 15, 9), float32]) -> (Tensor[(12, 15, 9), float64],) {
  %630 = @func_7049() /* ty=(Tensor[(12, 15, 9), bool],) */;
  %631 = %630.0;
  %632 = cast(%631, dtype="float32") /* ty=Tensor[(12, 15, 9), float32] */;
  %633 = log(%632) /* ty=Tensor[(12, 15, 9), float32] */;
  %634 = cast(%var_7990, dtype="bool") /* ty=Tensor[(12, 15, 9), bool] */;
  %635 = shape_of(%633, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%633, dtype="bool") /* ty=Tensor[(12, 15, 9), bool] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %638 = not_equal(%636, %637) /* ty=Tensor[(12, 15, 9), bool] */;
  %639 = cast(%638, dtype="float64") /* ty=Tensor[(12, 15, 9), float64] */;
  %640 = acos(%639) /* ty=Tensor[(12, 15, 9), float64] */;
  (%640,)
}

def @func_6354() -> (Tensor[(294), uint32],) {
  %643 = fn () -> (Tensor[(294), uint32],) {
    %641 = @func_5014() /* ty=(Tensor[(294), uint32],) */;
    %642 = %641.0;
    (%642,)
  };
  %643() /* ty=(Tensor[(294), uint32],) */
}

def @func_3408() -> (Tensor[(1, 7, 11), float64], Tensor[(39), float32], Tensor[(420), float32]) {
  @func_3406() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(39), float32], Tensor[(420), float32]) */
}

def @func_5870() -> Tensor[(1, 7, 11), float64] {
  %644 = @func_5155() /* ty=(Tensor[(1, 7, 11), float64],) */;
  %644.0
}

def @func_2787() -> Tensor[(1, 7, 11), float64] {
  %645 = fn () -> Tensor[(1, 7, 11), float64] {
    @func_2723() /* ty=Tensor[(1, 7, 11), float64] */
  };
  %645() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_7969() -> (Tensor[(1, 7, 11), float64],) {
  %648 = fn () -> (Tensor[(1, 7, 11), float64],) {
    %646 = @func_5005() /* ty=(Tensor[(1, 7, 11), float64],) */;
    %647 = %646.0;
    (%647,)
  };
  %648() /* ty=(Tensor[(1, 7, 11), float64],) */
}

def @func_6611() -> Tensor[(1, 7, 11), float64] {
  @func_6609() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_3406() -> (Tensor[(1, 7, 11), float64], Tensor[(39), float32], Tensor[(420), float32]) {
  %649 = cast(meta[relay.Constant][56] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %650 = reshape(%649, newshape=[14, 10, 3]) /* ty=Tensor[(14, 10, 3), float32] */;
  %651 = @func_1475(%650) /* ty=(Tensor[(14, 10, 3), float32], Tensor[(165), uint8], Tensor[(39), float32], Tensor[(13, 15), float32], Tensor[(1, 165), uint8], Tensor[(520), uint32]) */;
  %652 = @func_2786() /* ty=Tensor[(1, 7, 11), float64] */;
  %653 = %651.2;
  (%652, %653, meta[relay.Constant][56] /* ty=Tensor[(420), float32] */)
}

def @func_3871(%var_3866: Tensor[(8, 7, 11), float64]) -> Tensor[(8, 7, 11), uint16] {
  %654 = @func_2786() /* ty=Tensor[(1, 7, 11), float64] */;
  %655 = cast(%654, dtype="uint16") /* ty=Tensor[(1, 7, 11), uint16] */;
  %656 = cast(%var_3866, dtype="uint16") /* ty=Tensor[(8, 7, 11), uint16] */;
  add(%655, %656) /* ty=Tensor[(8, 7, 11), uint16] */
}

def @func_4569(%var_4566: Tensor[(165), uint16], %var_4567: Tensor[(16, 7, 11), float64], %var_4568: Tensor[(10, 7, 11), float64]) -> (Tensor[(11, 1, 15), uint16], uint16, Tensor[(165), uint16], Tensor[(16, 7, 11), bool], Tensor[(10, 7, 11), bool], Tensor[(1, 7, 11), float64]) {
  @func_4564(%var_4566, %var_4567, %var_4568) /* ty=(Tensor[(11, 1, 15), uint16], uint16, Tensor[(165), uint16], Tensor[(16, 7, 11), bool], Tensor[(10, 7, 11), bool], Tensor[(1, 7, 11), float64]) */
}

def @func_6824() -> (Tensor[(1, 7, 11), float64],) {
  @func_6822() /* ty=(Tensor[(1, 7, 11), float64],) */
}

def @func_2776() -> Tensor[(1, 7, 11), float64] {
  %657 = fn () -> Tensor[(1, 7, 11), float64] {
    @func_2723() /* ty=Tensor[(1, 7, 11), float64] */
  };
  %657() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_5007() -> (Tensor[(1, 7, 11), float64],) {
  @func_5005() /* ty=(Tensor[(1, 7, 11), float64],) */
}

def @func_7387(%var_7386: Tensor[(7, 3, 11), float64]) -> (Tensor[(7, 3, 11), int64], Tensor[(1, 7, 11), float64]) {
  %675 = fn (%var_7366: Tensor[(7, 3, 11), float64]) -> (Tensor[(7, 3, 11), int64], Tensor[(1, 7, 11), float64]) {
    %658 = cast(meta[relay.Constant][57] /* ty=Tensor[(7, 3, 11), float64] */, dtype="float64") /* ty=Tensor[(7, 3, 11), float64] */;
    %659 = shape_of(%var_7366, dtype="int32") /* ty=Tensor[(3), int32] */;
    %660 = cast(%var_7366, dtype="float64") /* ty=Tensor[(7, 3, 11), float64] */;
    %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %662 = power(%660, %661) /* ty=Tensor[(7, 3, 11), float64] */;
    %663 = cast(%var_7366, dtype="bool") /* ty=Tensor[(7, 3, 11), bool] */;
    %664 = shape_of(%662, dtype="int32") /* ty=Tensor[(3), int32] */;
    %665 = cast(%662, dtype="bool") /* ty=Tensor[(7, 3, 11), bool] */;
    %666 = dyn.reshape(%663, %664, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %667 = logical_and(%665, %666) /* ty=Tensor[(7, 3, 11), bool] */;
    %668 = cast(%667, dtype="int64") /* ty=Tensor[(7, 3, 11), int64] */;
    %669 = shape_of(%662, dtype="int32") /* ty=Tensor[(3), int32] */;
    %670 = cast(%662, dtype="int64") /* ty=Tensor[(7, 3, 11), int64] */;
    %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %672 = @func_7336() /* ty=(Tensor[(1, 7, 11), float64],) */;
    %673 = bitwise_and(%670, %671) /* ty=Tensor[(7, 3, 11), int64] */;
    %674 = %672.0;
    (%673, %674)
  };
  %675(%var_7386) /* ty=(Tensor[(7, 3, 11), int64], Tensor[(1, 7, 11), float64]) */
}

def @func_4672() -> Tensor[(1, 7, 11), float64] {
  @func_4323() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_4658() -> Tensor[(1, 7, 11), float64] {
  @func_4656() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_7962(%var_7961: Tensor[(77, 10), float64]) -> (Tensor[(1, 7, 11), float64], Tensor[(4, 3, 14), float64], Tensor[(168), float64], Tensor[(16, 7, 11), bool], Tensor[(165), uint16], Tensor[(1232), float64], Tensor[(77, 10), float64]) {
  %690 = fn (%var_7948: Tensor[(77, 10), float64]) -> (Tensor[(1, 7, 11), float64], Tensor[(4, 3, 14), float64], Tensor[(168), float64], Tensor[(16, 7, 11), bool], Tensor[(165), uint16], Tensor[(1232), float64], Tensor[(77, 10), float64]) {
    %676 = @func_5578() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(1, 1260), float64], Tensor[(1, 7, 11), float64], Tensor[(195), float32], Tensor[(6, 14, 15), uint16]) */;
    %677 = cast(meta[relay.Constant][58] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
    %678 = reshape(%677, newshape=[4, 3, 14]) /* ty=Tensor[(4, 3, 14), float64] */;
    %679 = @func_4458(%678) /* ty=(Tensor[(4, 3, 14), float64], Tensor[(4, 3, 14), float32]) */;
    %680 = cast(meta[relay.Constant][59] /* ty=Tensor[(165), uint16] */, dtype="uint16") /* ty=Tensor[(165), uint16] */;
    %681 = cast(meta[relay.Constant][60] /* ty=Tensor[(1232), float64] */, dtype="float64") /* ty=Tensor[(1232), float64] */;
    %682 = cast(%var_7948, dtype="float64") /* ty=Tensor[(77, 10), float64] */;
    %683 = reshape(%680, newshape=[165]) /* ty=Tensor[(165), uint16] */;
    %684 = reshape(%681, newshape=[16, 7, 11]) /* ty=Tensor[(16, 7, 11), float64] */;
    %685 = reshape(%682, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), float64] */;
    %686 = @func_4564(%683, %684, %685) /* ty=(Tensor[(11, 1, 15), uint16], uint16, Tensor[(165), uint16], Tensor[(16, 7, 11), bool], Tensor[(10, 7, 11), bool], Tensor[(1, 7, 11), float64]) */;
    %687 = %676.0;
    %688 = %679.0;
    %689 = %686.3;
    (%687, %688, meta[relay.Constant][58] /* ty=Tensor[(168), float64] */, %689, meta[relay.Constant][59] /* ty=Tensor[(165), uint16] */, meta[relay.Constant][60] /* ty=Tensor[(1232), float64] */, %var_7948)
  };
  %690(%var_7961) /* ty=(Tensor[(1, 7, 11), float64], Tensor[(4, 3, 14), float64], Tensor[(168), float64], Tensor[(16, 7, 11), bool], Tensor[(165), uint16], Tensor[(1232), float64], Tensor[(77, 10), float64]) */
}

def @func_8465() -> (Tensor[(294), uint32],) {
  %693 = fn () -> (Tensor[(294), uint32],) {
    %691 = @func_5014() /* ty=(Tensor[(294), uint32],) */;
    %692 = %691.0;
    (%692,)
  };
  %693() /* ty=(Tensor[(294), uint32],) */
}

def @func_5853(%var_5849: Tensor[(480, 1), float32], %var_5850: Tensor[(165), uint16], %var_5851: Tensor[(770), float64], %var_5852: Tensor[(195), float32]) -> (Tensor[(1, 7, 11), float64], Tensor[(420), float32], Tensor[(480, 1), float32], Tensor[(10, 7, 11), bool], Tensor[(165), uint16], Tensor[(1232), float64], Tensor[(770), float64], Tensor[(1, 7, 11), float64], Tensor[(195), float32]) {
  %711 = fn (%var_5823: Tensor[(480, 1), float32], %var_5829: Tensor[(165), uint16], %var_5831: Tensor[(770), float64], %var_5845: Tensor[(195), float32]) -> (Tensor[(1, 7, 11), float64], Tensor[(420), float32], Tensor[(480, 1), float32], Tensor[(10, 7, 11), bool], Tensor[(165), uint16], Tensor[(1232), float64], Tensor[(770), float64], Tensor[(1, 7, 11), float64], Tensor[(195), float32]) {
    %694 = cast(%var_5823, dtype="float32") /* ty=Tensor[(480, 1), float32] */;
    %695 = reshape(%694, newshape=[480]) /* ty=Tensor[(480), float32] */;
    %696 = @func_3744(%695) /* ty=(Tensor[(420), float32], Tensor[(3, 16, 10), float32], Tensor[(480), float32]) */;
    %697 = cast(%var_5829, dtype="uint16") /* ty=Tensor[(165), uint16] */;
    %698 = cast(meta[relay.Constant][61] /* ty=Tensor[(1232), float64] */, dtype="float64") /* ty=Tensor[(1232), float64] */;
    %699 = cast(%var_5831, dtype="float64") /* ty=Tensor[(770), float64] */;
    %700 = reshape(%697, newshape=[165]) /* ty=Tensor[(165), uint16] */;
    %701 = reshape(%698, newshape=[16, 7, 11]) /* ty=Tensor[(16, 7, 11), float64] */;
    %702 = reshape(%699, newshape=[10, 7, 11]) /* ty=Tensor[(10, 7, 11), float64] */;
    %703 = @func_4564(%700, %701, %702) /* ty=(Tensor[(11, 1, 15), uint16], uint16, Tensor[(165), uint16], Tensor[(16, 7, 11), bool], Tensor[(10, 7, 11), bool], Tensor[(1, 7, 11), float64]) */;
    %704 = cast(%var_5845, dtype="float32") /* ty=Tensor[(195), float32] */;
    %705 = reshape(%704, newshape=[195]) /* ty=Tensor[(195), float32] */;
    %706 = @func_5435(%705) /* ty=(Tensor[(1, 7, 11), float64], Tensor[(165), uint8], Tensor[(1, 39), float32], Tensor[(195), float32], Tensor[(165), uint8], Tensor[(520), uint32]) */;
    %707 = @func_2908() /* ty=Tensor[(1, 7, 11), float64] */;
    %708 = %696.0;
    %709 = %703.4;
    %710 = %706.0;
    (%707, %708, %var_5823, %709, %var_5829, meta[relay.Constant][61] /* ty=Tensor[(1232), float64] */, %var_5831, %710, %var_5845)
  };
  %711(%var_5849, %var_5850, %var_5851, %var_5852) /* ty=(Tensor[(1, 7, 11), float64], Tensor[(420), float32], Tensor[(480, 1), float32], Tensor[(10, 7, 11), bool], Tensor[(165), uint16], Tensor[(1232), float64], Tensor[(770), float64], Tensor[(1, 7, 11), float64], Tensor[(195), float32]) */
}

def @func_4169() -> (Tensor[(1, 7, 11), float64], Tensor[(5, 11, 3), bool], Tensor[(165), uint8], Tensor[(39, 1), float32], Tensor[(39, 5), float32], Tensor[(130, 4), int16], Tensor[(130, 4), bool]) {
  @func_4167() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(5, 11, 3), bool], Tensor[(165), uint8], Tensor[(39, 1), float32], Tensor[(39, 5), float32], Tensor[(130, 4), int16], Tensor[(130, 4), bool]) */
}

def @func_4461(%var_4459: Tensor[(4, 3, 14), float64]) -> (Tensor[(4, 3, 14), float64], Tensor[(4, 3, 14), float32]) {
  @func_4458(%var_4459) /* ty=(Tensor[(4, 3, 14), float64], Tensor[(4, 3, 14), float32]) */
}

def @main() -> (Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(168), float64], Tensor[(1560), float64]) {
  %712 = @func_7161() /* ty=(Tensor[(3, 420), float32], Tensor[(1, 7, 11), float64]) */;
  %713 = @func_4817() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1260), int8]) */;
  %714 = cast(meta[relay.Constant][62] /* ty=Tensor[(1560), float64] */, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %715 = cast(meta[relay.Constant][62] /* ty=Tensor[(1560), float64] */, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %716 = reshape(%714, newshape=[10, 13, 12]) /* ty=Tensor[(10, 13, 12), float64] */;
  %717 = reshape(%715, newshape=[10, 13, 12]) /* ty=Tensor[(10, 13, 12), float64] */;
  %718 = @func_8284(%716, %717) /* ty=(Tensor[(10, 13, 12), float64], Tensor[(1, 7, 11), float64], Tensor[(4, 3, 14), float64], Tensor[(168), float64], Tensor[(1, 7, 11), float64]) */;
  %719 = cast(meta[relay.Constant][63] /* ty=Tensor[(1560), float64] */, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %720 = shape_of(meta[relay.Constant][62] /* ty=Tensor[(1560), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %721 = cast(meta[relay.Constant][62] /* ty=Tensor[(1560), float64] */, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?), float64] */;
  %723 = %712.1;
  %724 = %713.1;
  %725 = %718.3;
  %726 = floor_divide(%721, %722) /* ty=Tensor[(1560), float64] */;
  (%723, %724, %725, %726)
}

def @func_4342() -> Tensor[(1, 7, 11), float64] {
  %728 = fn () -> Tensor[(1, 7, 11), float64] {
    %727 = @func_4276() /* ty=(Tensor[(1, 7, 11), float64],) */;
    %727.0
  };
  %728() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_170(%var_168: Tensor[(8, 13, 5), uint32], %var_169: Tensor[(8, 13, 5), uint32]) -> Tensor[(8, 13, 5), bool] {
  @func_166(%var_168, %var_169) /* ty=Tensor[(8, 13, 5), bool] */
}

def @func_6740() -> Tensor[(3, 420), float64] {
  %730 = fn () -> Tensor[(3, 420), float64] {
    %729 = @func_4815() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1260), int8]) */;
    %729.1
  };
  %730() /* ty=Tensor[(3, 420), float64] */
}

def @func_2724() -> Tensor[(1, 7, 11), float64] {
  %732 = fn () -> Tensor[(1, 7, 11), float64] {
    %731 = cast(meta[relay.Constant][64] /* ty=Tensor[(1, 7, 11), float64] */, dtype="float64") /* ty=Tensor[(1, 7, 11), float64] */;
    log10(%731) /* ty=Tensor[(1, 7, 11), float64] */
  };
  %732() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_6840() -> Tensor[(1, 7, 11), float64] {
  %733 = fn () -> Tensor[(1, 7, 11), float64] {
    @func_5870() /* ty=Tensor[(1, 7, 11), float64] */
  };
  %733() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_4564(%var_4509: Tensor[(165), uint16], %var_4519: Tensor[(16, 7, 11), float64], %var_4543: Tensor[(10, 7, 11), float64]) -> (Tensor[(11, 1, 15), uint16], uint16, Tensor[(165), uint16], Tensor[(16, 7, 11), bool], Tensor[(10, 7, 11), bool], Tensor[(1, 7, 11), float64]) {
  %734 = cast(meta[relay.Constant][65] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %735 = cast(%var_4509, dtype="uint16") /* ty=Tensor[(165), uint16] */;
  %736 = reshape(%734, newshape=[]) /* ty=uint16 */;
  %737 = reshape(%735, newshape=[11, 1, 15]) /* ty=Tensor[(11, 1, 15), uint16] */;
  %738 = @func_3003(%736, %737) /* ty=(Tensor[(11, 1, 15), uint16], Tensor[(11, 1, 15), float32]) */;
  %739 = @func_3723() /* ty=Tensor[(1, 7, 11), float64] */;
  %740 = cast(%739, dtype="bool") /* ty=Tensor[(1, 7, 11), bool] */;
  %741 = cast(%var_4519, dtype="bool") /* ty=Tensor[(16, 7, 11), bool] */;
  %742 = cast(%739, dtype="bool") /* ty=Tensor[(1, 7, 11), bool] */;
  %743 = cast(%var_4543, dtype="bool") /* ty=Tensor[(10, 7, 11), bool] */;
  %744 = @func_3776() /* ty=(Tensor[(1, 7, 11), float64],) */;
  %745 = %738.0;
  %746 = greater_equal(%740, %741) /* ty=Tensor[(16, 7, 11), bool] */;
  %747 = logical_or(%742, %743) /* ty=Tensor[(10, 7, 11), bool] */;
  %748 = %744.0;
  (%745, meta[relay.Constant][65] /* ty=uint16 */, %var_4509, %746, %747, %748)
}

def @func_8280(%var_8255: Tensor[(10, 13, 12), float64], %var_8256: Tensor[(10, 13, 12), float64]) -> (Tensor[(10, 13, 12), float64], Tensor[(1, 7, 11), float64], Tensor[(4, 3, 14), float64], Tensor[(168), float64], Tensor[(1, 7, 11), float64]) {
  %749 = cast(%var_8256, dtype="float64") /* ty=Tensor[(10, 13, 12), float64] */;
  %750 = shape_of(%var_8255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %751 = cast(%var_8255, dtype="float64") /* ty=Tensor[(10, 13, 12), float64] */;
  %752 = dyn.reshape(%749, %750, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %753 = @func_7406() /* ty=(Tensor[(1, 7, 11), float64],) */;
  %754 = cast(meta[relay.Constant][66] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %755 = reshape(%754, newshape=[4, 3, 14]) /* ty=Tensor[(4, 3, 14), float64] */;
  %756 = @func_4458(%755) /* ty=(Tensor[(4, 3, 14), float64], Tensor[(4, 3, 14), float32]) */;
  %757 = power(%751, %752) /* ty=Tensor[(10, 13, 12), float64] */;
  %758 = %753.0;
  %759 = %756.0;
  %760 = @func_4341() /* ty=Tensor[(1, 7, 11), float64] */;
  (%757, %758, %759, meta[relay.Constant][66] /* ty=Tensor[(168), float64] */, %760)
}

def @func_6520(%var_6496: Tensor[(195), float32]) -> (Tensor[(1, 7, 11), float64], Tensor[(195), float32], Tensor[(195), float32], Tensor[(480), float32]) {
  %761 = cast(%var_6496, dtype="float32") /* ty=Tensor[(195), float32] */;
  %762 = reshape(%761, newshape=[195]) /* ty=Tensor[(195), float32] */;
  %763 = @func_5435(%762) /* ty=(Tensor[(1, 7, 11), float64], Tensor[(165), uint8], Tensor[(1, 39), float32], Tensor[(195), float32], Tensor[(165), uint8], Tensor[(520), uint32]) */;
  %764 = @func_5037() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(480), float32], Tensor[(480), float32]) */;
  %765 = @func_4656() /* ty=Tensor[(1, 7, 11), float64] */;
  %766 = %763.3;
  %767 = %764.2;
  (%765, %766, %var_6496, %767)
}

def @func_7641(%var_7639: Tensor[(8, 12, 5), uint8], %var_7640: Tensor[(8, 12, 5), uint8]) -> (Tensor[(8, 12, 5), uint8], Tensor[(1, 7, 11), float64]) {
  @func_7637(%var_7639, %var_7640) /* ty=(Tensor[(8, 12, 5), uint8], Tensor[(1, 7, 11), float64]) */
}

def @func_3646() -> (Tensor[(1, 7, 11), float64], Tensor[(1260), int8], Tensor[(5, 11, 3), float64]) {
  @func_3644() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(1260), int8], Tensor[(5, 11, 3), float64]) */
}

def @func_7280() -> (Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64]) {
  %768 = @func_5005() /* ty=(Tensor[(1, 7, 11), float64],) */;
  %769 = @func_2723() /* ty=Tensor[(1, 7, 11), float64] */;
  %770 = %768.0;
  (%769, %770)
}

def @func_5579() -> (Tensor[(1, 7, 11), float64], Tensor[(1, 1260), float64], Tensor[(1, 7, 11), float64], Tensor[(195), float32], Tensor[(6, 14, 15), uint16]) {
  %794 = fn () -> (Tensor[(1, 7, 11), float64], Tensor[(1, 1260), float64], Tensor[(1, 7, 11), float64], Tensor[(195), float32], Tensor[(6, 14, 15), uint16]) {
    %771 = cast(meta[relay.Constant][68] /* ty=Tensor[(195), float32] */, dtype="float32") /* ty=Tensor[(195), float32] */;
    %772 = reshape(%771, newshape=[195]) /* ty=Tensor[(195), float32] */;
    %773 = @func_5435(%772) /* ty=(Tensor[(1, 7, 11), float64], Tensor[(165), uint8], Tensor[(1, 39), float32], Tensor[(195), float32], Tensor[(165), uint8], Tensor[(520), uint32]) */;
    %774 = cast(meta[relay.Constant][67] /* ty=Tensor[(1, 1260), float64] */, dtype="float64") /* ty=Tensor[(1, 1260), float64] */;
    %775 = reshape(%774, newshape=[6, 14, 15]) /* ty=Tensor[(6, 14, 15), float64] */;
    %776 = @func_412(%775) /* ty=(Tensor[(6, 14, 15), bool], Tensor[(6, 14, 15), float64]) */;
    %777 = %776.1;
    %778 = cast(%777, dtype="float32") /* ty=Tensor[(6, 14, 15), float32] */;
    %779 = sin(%778) /* ty=Tensor[(6, 14, 15), float32] */;
    %780 = cast(%777, dtype="int64") /* ty=Tensor[(6, 14, 15), int64] */;
    %781 = shape_of(%779, dtype="int32") /* ty=Tensor[(3), int32] */;
    %782 = cast(%779, dtype="int64") /* ty=Tensor[(6, 14, 15), int64] */;
    %783 = dyn.reshape(%780, %781, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %784 = logical_xor(%782, %783) /* ty=Tensor[(6, 14, 15), int64] */;
    %785 = cast(%779, dtype="float32") /* ty=Tensor[(6, 14, 15), float32] */;
    %786 = asin(%785) /* ty=Tensor[(6, 14, 15), float32] */;
    %787 = cast(%786, dtype="uint16") /* ty=Tensor[(6, 14, 15), uint16] */;
    %788 = shape_of(%784, dtype="int32") /* ty=Tensor[(3), int32] */;
    %789 = cast(%784, dtype="uint16") /* ty=Tensor[(6, 14, 15), uint16] */;
    %790 = dyn.reshape(%787, %788, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %791 = @func_3786() /* ty=Tensor[(1, 7, 11), float64] */;
    %792 = %773.0;
    %793 = left_shift(%789, %790) /* ty=Tensor[(6, 14, 15), uint16] */;
    (%791, meta[relay.Constant][67] /* ty=Tensor[(1, 1260), float64] */, %792, meta[relay.Constant][68] /* ty=Tensor[(195), float32] */, %793)
  };
  %794() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(1, 1260), float64], Tensor[(1, 7, 11), float64], Tensor[(195), float32], Tensor[(6, 14, 15), uint16]) */
}

def @func_5872() -> Tensor[(1, 7, 11), float64] {
  @func_5870() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_6756(%var_6754: Tensor[(13, 8, 11), int16], %var_6755: Tensor[(13, 8, 11), int16]) -> Tensor[(13, 8, 11), int16] {
  @func_6752(%var_6754, %var_6755) /* ty=Tensor[(13, 8, 11), int16] */
}

def @func_3003(%var_2979: uint16, %var_2980: Tensor[(11, 1, 15), uint16]) -> (Tensor[(11, 1, 15), uint16], Tensor[(11, 1, 15), float32]) {
  %795 = cast(%var_2979, dtype="uint16") /* ty=uint16 */;
  %796 = cast(%var_2980, dtype="uint16") /* ty=Tensor[(11, 1, 15), uint16] */;
  %797 = cast(%var_2980, dtype="float32") /* ty=Tensor[(11, 1, 15), float32] */;
  %798 = acosh(%797) /* ty=Tensor[(11, 1, 15), float32] */;
  %799 = cast(%798, dtype="float32") /* ty=Tensor[(11, 1, 15), float32] */;
  %800 = log2(%799) /* ty=Tensor[(11, 1, 15), float32] */;
  %801 = cast(%800, dtype="float32") /* ty=Tensor[(11, 1, 15), float32] */;
  %802 = logical_xor(%795, %796) /* ty=Tensor[(11, 1, 15), uint16] */;
  %803 = atanh(%801) /* ty=Tensor[(11, 1, 15), float32] */;
  (%802, %803)
}

def @func_4325() -> Tensor[(1, 7, 11), float64] {
  @func_4323() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_41(%var_39: Tensor[(5, 11, 3), uint8], %var_40: Tensor[(5, 11, 3), uint8]) -> Tensor[(5, 11, 3), bool] {
  %813 = fn (%var_8: Tensor[(5, 11, 3), uint8], %var_9: Tensor[(5, 11, 3), uint8]) -> Tensor[(5, 11, 3), bool] {
    %804 = cast(%var_9, dtype="bool") /* ty=Tensor[(5, 11, 3), bool] */;
    %805 = shape_of(%var_8, dtype="int32") /* ty=Tensor[(3), int32] */;
    %806 = cast(%var_8, dtype="bool") /* ty=Tensor[(5, 11, 3), bool] */;
    %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %808 = less_equal(%806, %807) /* ty=Tensor[(5, 11, 3), bool] */;
    %809 = cast(%808, dtype="bool") /* ty=Tensor[(5, 11, 3), bool] */;
    %810 = shape_of(%var_8, dtype="int32") /* ty=Tensor[(3), int32] */;
    %811 = cast(%var_8, dtype="bool") /* ty=Tensor[(5, 11, 3), bool] */;
    %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%811, %812) /* ty=Tensor[(5, 11, 3), bool] */
  };
  %813(%var_39, %var_40) /* ty=Tensor[(5, 11, 3), bool] */
}

def @func_6853() -> (Tensor[(5, 11, 3), float64],) {
  @func_6851() /* ty=(Tensor[(5, 11, 3), float64],) */
}

def @func_3988() -> Tensor[(1, 7, 11), float64] {
  @func_3986() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_6752(%var_6741: Tensor[(13, 8, 11), int16], %var_6742: Tensor[(13, 8, 11), int16]) -> Tensor[(13, 8, 11), int16] {
  %814 = cast(%var_6742, dtype="int16") /* ty=Tensor[(13, 8, 11), int16] */;
  %815 = shape_of(%var_6741, dtype="int32") /* ty=Tensor[(3), int32] */;
  %816 = cast(%var_6741, dtype="int16") /* ty=Tensor[(13, 8, 11), int16] */;
  %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  right_shift(%816, %817) /* ty=Tensor[(13, 8, 11), int16] */
}

def @func_3714(%var_3713: Tensor[(12, 5, 7), float32]) -> Tensor[(12, 5, 7), float32] {
  %819 = fn (%var_3705: Tensor[(12, 5, 7), float32]) -> Tensor[(12, 5, 7), float32] {
    %818 = cast(%var_3705, dtype="float32") /* ty=Tensor[(12, 5, 7), float32] */;
    sqrt(%818) /* ty=Tensor[(12, 5, 7), float32] */
  };
  %819(%var_3713) /* ty=Tensor[(12, 5, 7), float32] */
}

def @func_3677(%var_3676: Tensor[(7, 14, 3), uint32]) -> (Tensor[(7, 14, 3), uint32],) {
  %825 = fn (%var_3652: Tensor[(7, 14, 3), uint32]) -> (Tensor[(7, 14, 3), uint32],) {
    %820 = cast(%var_3652, dtype="uint32") /* ty=Tensor[(7, 14, 3), uint32] */;
    %821 = shape_of(meta[relay.Constant][69] /* ty=Tensor[(7, 14, 3), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %822 = cast(meta[relay.Constant][69] /* ty=Tensor[(7, 14, 3), uint32] */, dtype="uint32") /* ty=Tensor[(7, 14, 3), uint32] */;
    %823 = dyn.reshape(%820, %821, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %824 = maximum(%822, %823) /* ty=Tensor[(7, 14, 3), uint32] */;
    (%824,)
  };
  %825(%var_3676) /* ty=(Tensor[(7, 14, 3), uint32],) */
}

def @func_6951() -> (Tensor[(1, 7, 11), float64],) {
  %826 = @func_2723() /* ty=Tensor[(1, 7, 11), float64] */;
  (%826,)
}

def @func_4299() -> Tensor[(1, 7, 11), float64] {
  @func_2908() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_6140() -> Tensor[(1, 1260), int8] {
  @func_6138() /* ty=Tensor[(1, 1260), int8] */
}

def @func_4412(%var_4410: Tensor[(3, 420), float64]) -> (Tensor[(5, 11, 3), bool], Tensor[(165), uint8], Tensor[(3, 420), uint32]) {
  @func_4409(%var_4410) /* ty=(Tensor[(5, 11, 3), bool], Tensor[(165), uint8], Tensor[(3, 420), uint32]) */
}

def @func_7210() -> (Tensor[(11, 8, 7), float64], Tensor[(6, 14, 15), bool], Tensor[(1260), float64]) {
  %827 = cast(meta[relay.Constant][70] /* ty=Tensor[(11, 8, 7), float64] */, dtype="float64") /* ty=Tensor[(11, 8, 7), float64] */;
  %828 = cast(meta[relay.Constant][71] /* ty=Tensor[(1260), float64] */, dtype="float64") /* ty=Tensor[(1260), float64] */;
  %829 = reshape(%828, newshape=[6, 14, 15]) /* ty=Tensor[(6, 14, 15), float64] */;
  %830 = @func_412(%829) /* ty=(Tensor[(6, 14, 15), bool], Tensor[(6, 14, 15), float64]) */;
  %831 = cos(%827) /* ty=Tensor[(11, 8, 7), float64] */;
  %832 = %830.0;
  (%831, %832, meta[relay.Constant][71] /* ty=Tensor[(1260), float64] */)
}

def @func_3747(%var_3745: Tensor[(480), float32]) -> (Tensor[(420), float32], Tensor[(3, 16, 10), float32], Tensor[(480), float32]) {
  @func_3744(%var_3745) /* ty=(Tensor[(420), float32], Tensor[(3, 16, 10), float32], Tensor[(480), float32]) */
}

def @func_7708(%var_7706: Tensor[(9, 5, 3), uint16]) -> (Tensor[(9, 5, 3), uint16], Tensor[(1, 7, 11), float64], Tensor[(130, 4), bool], Tensor[(6, 14, 15), uint16], Tensor[(8, 15, 4), float64], Tensor[(480), float64], Tensor[(1, 7, 11), float64]) {
  @func_7705(%var_7706) /* ty=(Tensor[(9, 5, 3), uint16], Tensor[(1, 7, 11), float64], Tensor[(130, 4), bool], Tensor[(6, 14, 15), uint16], Tensor[(8, 15, 4), float64], Tensor[(480), float64], Tensor[(1, 7, 11), float64]) */
}

def @func_222(%var_218: Tensor[(1, 3, 13), float32], %var_219: Tensor[(5, 3, 13), float32], %var_220: Tensor[(165), uint8], %var_221: Tensor[(520), uint32]) -> (Tensor[(5, 3, 13), float32], Tensor[(5, 11, 3), bool], Tensor[(165), uint8], Tensor[(8, 13, 5), bool], Tensor[(520), uint32], Tensor[(8, 13, 5), bool]) {
  %851 = fn (%var_187: Tensor[(1, 3, 13), float32], %var_188: Tensor[(5, 3, 13), float32], %var_195: Tensor[(165), uint8], %var_208: Tensor[(520), uint32]) -> (Tensor[(5, 3, 13), float32], Tensor[(5, 11, 3), bool], Tensor[(165), uint8], Tensor[(8, 13, 5), bool], Tensor[(520), uint32], Tensor[(8, 13, 5), bool]) {
    %833 = cast(%var_187, dtype="float32") /* ty=Tensor[(1, 3, 13), float32] */;
    %834 = cast(%var_188, dtype="float32") /* ty=Tensor[(5, 3, 13), float32] */;
    %835 = cast(%var_195, dtype="uint8") /* ty=Tensor[(165), uint8] */;
    %836 = cast(%var_195, dtype="uint8") /* ty=Tensor[(165), uint8] */;
    %837 = reshape(%835, newshape=[5, 11, 3]) /* ty=Tensor[(5, 11, 3), uint8] */;
    %838 = reshape(%836, newshape=[5, 11, 3]) /* ty=Tensor[(5, 11, 3), uint8] */;
    %839 = cast(%var_208, dtype="uint32") /* ty=Tensor[(520), uint32] */;
    %840 = cast(%var_208, dtype="uint32") /* ty=Tensor[(520), uint32] */;
    %841 = reshape(%839, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), uint32] */;
    %842 = reshape(%840, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), uint32] */;
    %843 = cast(%var_208, dtype="uint32") /* ty=Tensor[(520), uint32] */;
    %844 = @func_166(%841, %842) /* ty=Tensor[(8, 13, 5), bool] */;
    %845 = cast(%844, dtype="uint32") /* ty=Tensor[(8, 13, 5), uint32] */;
    %846 = reshape(%843, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), uint32] */;
    %847 = reshape(%845, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), uint32] */;
    %848 = power(%833, %834) /* ty=Tensor[(5, 3, 13), float32] */;
    %849 = @func_38(%837, %838) /* ty=Tensor[(5, 11, 3), bool] */;
    %850 = @func_166(%846, %847) /* ty=Tensor[(8, 13, 5), bool] */;
    (%848, %849, %var_195, %844, %var_208, %850)
  };
  %851(%var_218, %var_219, %var_220, %var_221) /* ty=(Tensor[(5, 3, 13), float32], Tensor[(5, 11, 3), bool], Tensor[(165), uint8], Tensor[(8, 13, 5), bool], Tensor[(520), uint32], Tensor[(8, 13, 5), bool]) */
}

def @func_4458(%var_4439: Tensor[(4, 3, 14), float64]) -> (Tensor[(4, 3, 14), float64], Tensor[(4, 3, 14), float32]) {
  %852 = cast(%var_4439, dtype="float64") /* ty=Tensor[(4, 3, 14), float64] */;
  %853 = cast(%var_4439, dtype="float32") /* ty=Tensor[(4, 3, 14), float32] */;
  %854 = rsqrt(%852) /* ty=Tensor[(4, 3, 14), float64] */;
  %855 = atan(%853) /* ty=Tensor[(4, 3, 14), float32] */;
  (%854, %855)
}

def @func_4277() -> (Tensor[(1, 7, 11), float64],) {
  %858 = fn () -> (Tensor[(1, 7, 11), float64],) {
    %856 = @func_3776() /* ty=(Tensor[(1, 7, 11), float64],) */;
    %857 = %856.0;
    (%857,)
  };
  %858() /* ty=(Tensor[(1, 7, 11), float64],) */
}

def @func_5321() -> Tensor[(1, 7, 11), float64] {
  @func_3723() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_6935(%var_6924: Tensor[(195), float32], %var_6925: Tensor[(165), uint8], %var_6926: Tensor[(520), uint32]) -> (Tensor[(?, 1260), float32], Tensor[(10, 10, 12), bool], Tensor[(1200), int64], Tensor[(195), float32], Tensor[(165), uint8], Tensor[(520), uint32], Tensor[(1, 1260), float64]) {
  %859 = @func_6138() /* ty=Tensor[(1, 1260), int8] */;
  %860 = cast(%859, dtype="float32") /* ty=Tensor[(1, 1260), float32] */;
  %861 = tan(%860) /* ty=Tensor[(1, 1260), float32] */;
  %862 = cast(%859, dtype="float64") /* ty=Tensor[(1, 1260), float64] */;
  %863 = acosh(%862) /* ty=Tensor[(1, 1260), float64] */;
  %864 = cast(%863, dtype="int8") /* ty=Tensor[(1, 1260), int8] */;
  %865 = shape_of(%861, dtype="int32") /* ty=Tensor[(2), int32] */;
  %866 = cast(%861, dtype="int8") /* ty=Tensor[(1, 1260), int8] */;
  %867 = dyn.reshape(%864, %865, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %868 = bitwise_or(%866, %867) /* ty=Tensor[(?, 1260), int8] */;
  %869 = cast(%861, dtype="float32") /* ty=Tensor[(1, 1260), float32] */;
  %870 = shape_of(%868, dtype="int32") /* ty=Tensor[(2), int32] */;
  %871 = cast(%868, dtype="float32") /* ty=Tensor[(?, 1260), float32] */;
  %872 = dyn.reshape(%869, %870, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %873 = cast(meta[relay.Constant][72] /* ty=Tensor[(1200), int64] */, dtype="int64") /* ty=Tensor[(1200), int64] */;
  %874 = cast(meta[relay.Constant][72] /* ty=Tensor[(1200), int64] */, dtype="int64") /* ty=Tensor[(1200), int64] */;
  %875 = cast(%var_6924, dtype="float32") /* ty=Tensor[(195), float32] */;
  %876 = cast(%var_6925, dtype="uint8") /* ty=Tensor[(165), uint8] */;
  %877 = cast(%var_6926, dtype="uint32") /* ty=Tensor[(520), uint32] */;
  %878 = reshape(%873, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int64] */;
  %879 = reshape(%874, newshape=[10, 10, 12]) /* ty=Tensor[(10, 10, 12), int64] */;
  %880 = reshape(%875, newshape=[195]) /* ty=Tensor[(195), float32] */;
  %881 = reshape(%876, newshape=[165]) /* ty=Tensor[(165), uint8] */;
  %882 = reshape(%877, newshape=[520]) /* ty=Tensor[(520), uint32] */;
  %883 = @func_2553(%878, %879, %880, %881, %882) /* ty=(Tensor[(10, 10, 12), bool], Tensor[(520), uint32], Tensor[(39), float32], Tensor[(195), float32], Tensor[(165), uint8], Tensor[(520), uint32]) */;
  %884 = cast(%861, dtype="float64") /* ty=Tensor[(1, 1260), float64] */;
  %885 = floor_mod(%871, %872) /* ty=Tensor[(?, 1260), float32] */;
  %886 = %883.0;
  %887 = erf(%884) /* ty=Tensor[(1, 1260), float64] */;
  (%885, %886, meta[relay.Constant][72] /* ty=Tensor[(1200), int64] */, %var_6924, %var_6925, %var_6926, %887)
}

def @func_6609() -> Tensor[(1, 7, 11), float64] {
  %888 = @func_5906() /* ty=(Tensor[(480), float32], Tensor[(1, 7, 11), float64]) */;
  %888.1
}

def @func_5037() -> (Tensor[(1, 7, 11), float64], Tensor[(480), float32], Tensor[(480), float32]) {
  %889 = cast(meta[relay.Constant][73] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %890 = reshape(%889, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %891 = @func_3744(%890) /* ty=(Tensor[(420), float32], Tensor[(3, 16, 10), float32], Tensor[(480), float32]) */;
  %892 = @func_4871() /* ty=Tensor[(1, 7, 11), float64] */;
  %893 = %891.2;
  (%892, %893, meta[relay.Constant][73] /* ty=Tensor[(480), float32] */)
}

def @func_4656() -> Tensor[(1, 7, 11), float64] {
  @func_2786() /* ty=Tensor[(1, 7, 11), float64] */
}

def @func_6102(%var_6073: Tensor[(420), float32]) -> (Tensor[(1260), int8], Tensor[(6, 14, 15), bool], Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64], Tensor[(?, 7, 11), float64], Tensor[(39), float32], Tensor[(420), float32], Tensor[(1, 7, 11), float64], Tensor[(294), uint32], Tensor[(6, 7, 11), int16]) {
  %894 = @func_4815() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(3, 420), float64], Tensor[(1260), int8]) */;
  %895 = %894.2;
  %896 = cast(%895, dtype="float64") /* ty=Tensor[(1260), float64] */;
  %897 = reshape(%896, newshape=[6, 14, 15]) /* ty=Tensor[(6, 14, 15), float64] */;
  %898 = @func_412(%897) /* ty=(Tensor[(6, 14, 15), bool], Tensor[(6, 14, 15), float64]) */;
  %899 = @func_4871() /* ty=Tensor[(1, 7, 11), float64] */;
  %900 = cast(%899, dtype="float64") /* ty=Tensor[(1, 7, 11), float64] */;
  %901 = @func_2786() /* ty=Tensor[(1, 7, 11), float64] */;
  %902 = cast(%899, dtype="float64") /* ty=Tensor[(1, 7, 11), float64] */;
  %903 = shape_of(%901, dtype="int32") /* ty=Tensor[(3), int32] */;
  %904 = cast(%901, dtype="float64") /* ty=Tensor[(1, 7, 11), float64] */;
  %905 = dyn.reshape(%902, %903, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %906 = cast(%var_6073, dtype="float32") /* ty=Tensor[(420), float32] */;
  %907 = reshape(%906, newshape=[14, 10, 3]) /* ty=Tensor[(14, 10, 3), float32] */;
  %908 = @func_1475(%907) /* ty=(Tensor[(14, 10, 3), float32], Tensor[(165), uint8], Tensor[(39), float32], Tensor[(13, 15), float32], Tensor[(1, 165), uint8], Tensor[(520), uint32]) */;
  %909 = @func_5014() /* ty=(Tensor[(294), uint32],) */;
  %910 = %898.0;
  %911 = cast(%910, dtype="float64") /* ty=Tensor[(6, 14, 15), float64] */;
  %912 = reshape(%911, newshape=[3, 420]) /* ty=Tensor[(3, 420), float64] */;
  %913 = @func_5949(%912) /* ty=(Tensor[(6, 7, 11), int16], Tensor[(462), float64], Tensor[(3, 420), bool]) */;
  %914 = sin(%900) /* ty=Tensor[(1, 7, 11), float64] */;
  %915 = @func_5870() /* ty=Tensor[(1, 7, 11), float64] */;
  %916 = mod(%904, %905) /* ty=Tensor[(?, 7, 11), float64] */;
  %917 = %908.2;
  %918 = @func_5870() /* ty=Tensor[(1, 7, 11), float64] */;
  %919 = %909.0;
  %920 = %913.0;
  (%895, %910, %914, %915, %916, %917, %var_6073, %918, %919, %920)
}

def @func_5754(%var_5742: Tensor[(5, 5, 7), float32]) -> (Tensor[(5, 5, 7), float32],) {
  %921 = cast(%var_5742, dtype="float32") /* ty=Tensor[(5, 5, 7), float32] */;
  %922 = sinh(%921) /* ty=Tensor[(5, 5, 7), float32] */;
  (%922,)
}

def @func_5039() -> (Tensor[(1, 7, 11), float64], Tensor[(480), float32], Tensor[(480), float32]) {
  @func_5037() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(480), float32], Tensor[(480), float32]) */
}

def @func_1743(%var_1742: Tensor[(13, 4, 8), float32]) -> (Tensor[(13, 4, 8), float32],) {
  %925 = fn (%var_1737: Tensor[(13, 4, 8), float32]) -> (Tensor[(13, 4, 8), float32],) {
    %923 = cast(%var_1737, dtype="float32") /* ty=Tensor[(13, 4, 8), float32] */;
    %924 = rsqrt(%923) /* ty=Tensor[(13, 4, 8), float32] */;
    (%924,)
  };
  %925(%var_1742) /* ty=(Tensor[(13, 4, 8), float32],) */
}

def @func_6153() -> (Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64]) {
  %929 = fn () -> (Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64]) {
    %926 = @func_4276() /* ty=(Tensor[(1, 7, 11), float64],) */;
    %927 = %926.0;
    %928 = @func_4656() /* ty=Tensor[(1, 7, 11), float64] */;
    (%927, %928)
  };
  %929() /* ty=(Tensor[(1, 7, 11), float64], Tensor[(1, 7, 11), float64]) */
}

def @func_8284(%var_8282: Tensor[(10, 13, 12), float64], %var_8283: Tensor[(10, 13, 12), float64]) -> (Tensor[(10, 13, 12), float64], Tensor[(1, 7, 11), float64], Tensor[(4, 3, 14), float64], Tensor[(168), float64], Tensor[(1, 7, 11), float64]) {
  @func_8280(%var_8282, %var_8283) /* ty=(Tensor[(10, 13, 12), float64], Tensor[(1, 7, 11), float64], Tensor[(4, 3, 14), float64], Tensor[(168), float64], Tensor[(1, 7, 11), float64]) */
}

def @func_5157() -> (Tensor[(1, 7, 11), float64],) {
  @func_5155() /* ty=(Tensor[(1, 7, 11), float64],) */
}

def @func_7212() -> (Tensor[(11, 8, 7), float64], Tensor[(6, 14, 15), bool], Tensor[(1260), float64]) {
  @func_7210() /* ty=(Tensor[(11, 8, 7), float64], Tensor[(6, 14, 15), bool], Tensor[(1260), float64]) */
}

def @func_3109(%var_3088: Tensor[(13, 4, 11), uint64], %var_3089: Tensor[(13, 4, 11), uint64]) -> Tensor[(13, 4, 11), uint64] {
  %930 = cast(%var_3089, dtype="uint64") /* ty=Tensor[(13, 4, 11), uint64] */;
  %931 = shape_of(%var_3088, dtype="int32") /* ty=Tensor[(3), int32] */;
  %932 = cast(%var_3088, dtype="uint64") /* ty=Tensor[(13, 4, 11), uint64] */;
  %933 = dyn.reshape(%930, %931, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  bitwise_and(%932, %933) /* ty=Tensor[(13, 4, 11), uint64] */
}

def @func_2888(%var_2886: Tensor[(1200), int64], %var_2887: Tensor[(195), float32]) -> (Tensor[(1, 7, 11), float64], Tensor[(165), uint8], Tensor[(1200), int64], Tensor[(195), float32], Tensor[(165), uint8], Tensor[(520), uint32]) {
  @func_2884(%var_2886, %var_2887) /* ty=(Tensor[(1, 7, 11), float64], Tensor[(165), uint8], Tensor[(1200), int64], Tensor[(195), float32], Tensor[(165), uint8], Tensor[(520), uint32]) */
}

def @func_2963(%var_2961: Tensor[(3, 16, 10), float32], %var_2962: Tensor[(3, 16, 10), float32]) -> Tensor[(3, 16, 10), float32] {
  @func_2959(%var_2961, %var_2962) /* ty=Tensor[(3, 16, 10), float32] */
}

def @func_8008(%var_8006: Tensor[(12, 15, 9), float32]) -> (Tensor[(12, 15, 9), float64],) {
  @func_8005(%var_8006) /* ty=(Tensor[(12, 15, 9), float64],) */
}

def @func_7407() -> (Tensor[(1, 7, 11), float64],) {
  %936 = fn () -> (Tensor[(1, 7, 11), float64],) {
    %934 = @func_6951() /* ty=(Tensor[(1, 7, 11), float64],) */;
    %935 = %934.0;
    (%935,)
  };
  %936() /* ty=(Tensor[(1, 7, 11), float64],) */
}

def @func_6174(%var_6173: Tensor[(15, 2, 8), float64]) -> Tensor[(15, 2, 8), float64] {
  %938 = fn (%var_6167: Tensor[(15, 2, 8), float64]) -> Tensor[(15, 2, 8), float64] {
    %937 = cast(%var_6167, dtype="float64") /* ty=Tensor[(15, 2, 8), float64] */;
    sigmoid(%937) /* ty=Tensor[(15, 2, 8), float64] */
  };
  %938(%var_6173) /* ty=Tensor[(15, 2, 8), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen520/build/output.py", line 2381, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:27:28] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

