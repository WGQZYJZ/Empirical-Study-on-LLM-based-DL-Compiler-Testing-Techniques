==========mod==========
#[version = "0.0.5"]
def @func_3129(%var_3112: Tensor[(9, 3, 11), float64]) -> (Tensor[(9, 3, 11), float64],) {
  %0 = cast(%var_3112, dtype="float64") /* ty=Tensor[(9, 3, 11), float64] */;
  %1 = sigmoid(%0) /* ty=Tensor[(9, 3, 11), float64] */;
  (%1,)
}

def @func_4643(%var_4626: Tensor[(768), int32]) -> (Tensor[(3, 7, 12), float32], Tensor[(768), int32], Tensor[(8, 6, 16), float32]) {
  %2 = @func_3517() /* ty=(Tensor[(3, 7, 12), float32],) */;
  %3 = cast(%var_4626, dtype="int32") /* ty=Tensor[(768), int32] */;
  %4 = cast(%var_4626, dtype="int32") /* ty=Tensor[(768), int32] */;
  %5 = reshape(%3, newshape=[8, 6, 16]) /* ty=Tensor[(8, 6, 16), int32] */;
  %6 = reshape(%4, newshape=[8, 6, 16]) /* ty=Tensor[(8, 6, 16), int32] */;
  %7 = @func_1208(%5, %6) /* ty=Tensor[(8, 6, 16), int32] */;
  %8 = cast(%7, dtype="float32") /* ty=Tensor[(8, 6, 16), float32] */;
  %9 = %2.0;
  %10 = sin(%8) /* ty=Tensor[(8, 6, 16), float32] */;
  (%9, %var_4626, %10)
}

def @func_851() -> (Tensor[(3, 7, 12), float32],) {
  %11 = @func_597() /* ty=Tensor[(3, 7, 12), float32] */;
  (%11,)
}

def @func_3671() -> (Tensor[(3, 7, 12), float64], Tensor[(5, 12, 4), float32], Tensor[(5, 12, 4), bool]) {
  %12 = @func_3578() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %13 = @func_1440() /* ty=(Tensor[(5, 12, 4), bool], Tensor[(240), float32], Tensor[(5, 12, 4), float32]) */;
  %14 = @func_1451() /* ty=(Tensor[(5, 12, 4), bool], Tensor[(3, 7, 12), float64]) */;
  %15 = %12.0;
  %16 = %13.2;
  %17 = %14.0;
  (%15, %16, %17)
}

def @func_525() -> Tensor[(3, 7, 12), float32] {
  %18 = @func_357() /* ty=(Tensor[(5, 12, 4), float32], Tensor[(3, 7, 12), float64]) */;
  %19 = %18.1;
  %20 = cast(%19, dtype="float32") /* ty=Tensor[(3, 7, 12), float32] */;
  acosh(%20) /* ty=Tensor[(3, 7, 12), float32] */
}

def @func_3716() -> (Tensor[(5, 12, 4), float64],) {
  %21 = @func_1020() /* ty=(Tensor[(5, 12, 4), float64], Tensor[(240), float32], Tensor[(5, 12, 4), float64], Tensor[(2, 4, 15), float64]) */;
  %22 = %21.0;
  (%22,)
}

def @func_5001(%var_4989: Tensor[(5, 12, 4), float32]) -> (Tensor[(3, 7, 12), float32], Tensor[(5, 12, 4), int16], Tensor[(3, 7, 12), float32]) {
  %23 = @func_3517() /* ty=(Tensor[(3, 7, 12), float32],) */;
  %24 = @func_109() /* ty=(Tensor[(5, 12, 4), float32],) */;
  %25 = %24.0;
  %26 = cast(%var_4989, dtype="int16") /* ty=Tensor[(5, 12, 4), int16] */;
  %27 = shape_of(%25, dtype="int32") /* ty=Tensor[(3), int32] */;
  %28 = cast(%25, dtype="int16") /* ty=Tensor[(5, 12, 4), int16] */;
  %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %30 = @func_1028() /* ty=(Tensor[(3, 7, 12), float32],) */;
  %31 = %23.0;
  %32 = maximum(%28, %29) /* ty=Tensor[(5, 12, 4), int16] */;
  %33 = %30.0;
  (%31, %32, %33)
}

def @func_5033() -> (Tensor[(3, 7, 12), float32], Tensor[(3, 7, 12), float64]) {
  %34 = @func_3149() /* ty=(Tensor[(3, 7, 12), float32],) */;
  %35 = @func_4143() /* ty=(Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), float32]) */;
  %36 = %34.0;
  %37 = %35.0;
  (%36, %37)
}

def @func_1208(%var_1193: Tensor[(8, 6, 16), int32], %var_1194: Tensor[(8, 6, 16), int32]) -> Tensor[(8, 6, 16), int32] {
  %38 = cast(%var_1194, dtype="int32") /* ty=Tensor[(8, 6, 16), int32] */;
  %39 = shape_of(%var_1193, dtype="int32") /* ty=Tensor[(3), int32] */;
  %40 = cast(%var_1193, dtype="int32") /* ty=Tensor[(8, 6, 16), int32] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  logical_xor(%40, %41) /* ty=Tensor[(8, 6, 16), int32] */
}

def @func_2167() -> (Tensor[(3, 7, 12), float64],) {
  %42 = @func_1963() /* ty=Tensor[(3, 7, 12), float64] */;
  (%42,)
}

def @func_5680(%var_5664: Tensor[(5, 12, 4), float32]) -> (Tensor[(5, 12, 4), bool],) {
  %43 = @func_692() /* ty=(Tensor[(5, 12, 4), float32], Tensor[(10, 15, 12), bool], Tensor[(18, 100), uint32]) */;
  %44 = %43.0;
  %45 = cast(%var_5664, dtype="bool") /* ty=Tensor[(5, 12, 4), bool] */;
  %46 = shape_of(%44, dtype="int32") /* ty=Tensor[(3), int32] */;
  %47 = cast(%44, dtype="bool") /* ty=Tensor[(5, 12, 4), bool] */;
  %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %49 = greater(%47, %48) /* ty=Tensor[(5, 12, 4), bool] */;
  (%49,)
}

def @func_1175() -> Tensor[(3, 7, 12), float64] {
  %50 = @func_799() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %50.0
}

def @func_4157(%var_4149: float32, %var_4150: Tensor[(9, 15, 10), float32]) -> (Tensor[(9, 15, 10), float32],) {
  %51 = cast(%var_4149, dtype="float32") /* ty=float32 */;
  %52 = cast(%var_4150, dtype="float32") /* ty=Tensor[(9, 15, 10), float32] */;
  %53 = power(%51, %52) /* ty=Tensor[(9, 15, 10), float32] */;
  (%53,)
}

def @func_626(%var_613: Tensor[(6, 11, 4), float32]) -> (Tensor[(6, 11, 4), float32],) {
  %54 = cast(0.623202f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %55 = cast(%var_613, dtype="float32") /* ty=Tensor[(6, 11, 4), float32] */;
  %56 = minimum(%54, %55) /* ty=Tensor[(6, 11, 4), float32] */;
  (%56,)
}

def @func_2139(%var_2105: Tensor[(5, 12, 4), float32]) -> (Tensor[(5, 12, 4), int16], Tensor[(3, 7, 12), float32]) {
  %57 = @func_1569() /* ty=(Tensor[(10, 15, 12), float64], Tensor[(5, 12, 4), bool], Tensor[(240), float32]) */;
  %58 = %57.1;
  %59 = cast(%58, dtype="float32") /* ty=Tensor[(5, 12, 4), float32] */;
  %60 = sinh(%59) /* ty=Tensor[(5, 12, 4), float32] */;
  %61 = cast(%60, dtype="float32") /* ty=Tensor[(5, 12, 4), float32] */;
  %62 = erf(%61) /* ty=Tensor[(5, 12, 4), float32] */;
  %63 = cast(%var_2105, dtype="int16") /* ty=Tensor[(5, 12, 4), int16] */;
  %64 = shape_of(%62, dtype="int32") /* ty=Tensor[(3), int32] */;
  %65 = cast(%62, dtype="int16") /* ty=Tensor[(5, 12, 4), int16] */;
  %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %67 = @func_1996() /* ty=(Tensor[(3, 7, 12), float32],) */;
  %68 = bitwise_xor(%65, %66) /* ty=Tensor[(5, 12, 4), int16] */;
  %69 = %67.0;
  (%68, %69)
}

def @main() -> (Tensor[(3, 7, 12), float64],) {
  %70 = @func_4143() /* ty=(Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), float32]) */;
  %71 = %70.1;
  %72 = cast(%71, dtype="float64") /* ty=Tensor[(3, 7, 12), float64] */;
  %73 = exp(%72) /* ty=Tensor[(3, 7, 12), float64] */;
  (%73,)
}

def @func_1569() -> (Tensor[(10, 15, 12), float64], Tensor[(5, 12, 4), bool], Tensor[(240), float32]) {
  %74 = @func_692() /* ty=(Tensor[(5, 12, 4), float32], Tensor[(10, 15, 12), bool], Tensor[(18, 100), uint32]) */;
  %75 = %74.1;
  %76 = cast(%75, dtype="uint32") /* ty=Tensor[(10, 15, 12), uint32] */;
  %77 = reshape(%76, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint32] */;
  %78 = @func_554(%77) /* ty=(Tensor[(10, 15, 12), bool], Tensor[(5, 12, 4), float32]) */;
  %79 = %78.0;
  %80 = cast(%75, dtype="float64") /* ty=Tensor[(10, 15, 12), float64] */;
  %81 = shape_of(%79, dtype="int32") /* ty=Tensor[(3), int32] */;
  %82 = cast(%79, dtype="float64") /* ty=Tensor[(10, 15, 12), float64] */;
  %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %84 = @func_1440() /* ty=(Tensor[(5, 12, 4), bool], Tensor[(240), float32], Tensor[(5, 12, 4), float32]) */;
  %85 = power(%82, %83) /* ty=Tensor[(10, 15, 12), float64] */;
  %86 = %84.0;
  %87 = @func_1225() /* ty=Tensor[(240), float32] */;
  (%85, %86, %87)
}

def @func_1797(%var_1715: Tensor[(5, 3, 6), bool]) -> (Tensor[(5, 3, 6), int8], Tensor[(5, 3, 6), float64], Tensor[(3, 7, 12), float32], Tensor[(5, 3, 6), bool], Tensor[(240), float32]) {
  %88 = @func_986() /* ty=(Tensor[(10, 15, 12), bool], Tensor[(5, 3, 6), bool], Tensor[(3, 7, 12), float32]) */;
  %89 = %88.1;
  %90 = cast(%var_1715, dtype="int8") /* ty=Tensor[(5, 3, 6), int8] */;
  %91 = shape_of(%89, dtype="int32") /* ty=Tensor[(3), int32] */;
  %92 = cast(%89, dtype="int8") /* ty=Tensor[(5, 3, 6), int8] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %94 = cast(%89, dtype="float64") /* ty=Tensor[(5, 3, 6), float64] */;
  %95 = @func_1028() /* ty=(Tensor[(3, 7, 12), float32],) */;
  %96 = @func_1254() /* ty=(Tensor[(5, 3, 6), bool],) */;
  %97 = @func_1569() /* ty=(Tensor[(10, 15, 12), float64], Tensor[(5, 12, 4), bool], Tensor[(240), float32]) */;
  %98 = subtract(%92, %93) /* ty=Tensor[(5, 3, 6), int8] */;
  %99 = cos(%94) /* ty=Tensor[(5, 3, 6), float64] */;
  %100 = %95.0;
  %101 = %96.0;
  %102 = %97.2;
  (%98, %99, %100, %101, %102)
}

def @func_3243(%var_3210: Tensor[(3, 7, 12), float64], %var_3231: Tensor[(18, 2), int8]) -> (Tensor[(3, 7, 12), int64], Tensor[(9, 4, 240), int64], Tensor[(18, 2), uint8]) {
  %103 = @func_799() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %104 = %103.0;
  %105 = cast(%var_3210, dtype="float64") /* ty=Tensor[(3, 7, 12), float64] */;
  %106 = shape_of(%104, dtype="int32") /* ty=Tensor[(3), int32] */;
  %107 = cast(%104, dtype="float64") /* ty=Tensor[(3, 7, 12), float64] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %109 = floor_divide(%107, %108) /* ty=Tensor[(3, 7, 12), float64] */;
  %110 = cast(%109, dtype="int64") /* ty=Tensor[(3, 7, 12), int64] */;
  %111 = shape_of(%var_3210, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(%var_3210, dtype="int64") /* ty=Tensor[(3, 7, 12), int64] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %114 = cast(meta[relay.Constant][0] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %115 = cast(%var_3231, dtype="int8") /* ty=Tensor[(18, 2), int8] */;
  %116 = reshape(%114, newshape=[]) /* ty=int8 */;
  %117 = reshape(%115, newshape=[9, 4, 1]) /* ty=Tensor[(9, 4, 1), int8] */;
  %118 = @func_2359(%116, %117) /* ty=(Tensor[(5, 3, 6), bool], Tensor[(9, 4, 240), int64]) */;
  %119 = cast(%var_3231, dtype="uint8") /* ty=Tensor[(18, 2), uint8] */;
  %120 = cast(meta[relay.Constant][0] /* ty=int8 */, dtype="uint8") /* ty=uint8 */;
  %121 = left_shift(%112, %113) /* ty=Tensor[(3, 7, 12), int64] */;
  %122 = %118.1;
  %123 = bitwise_xor(%119, %120) /* ty=Tensor[(18, 2), uint8] */;
  (%121, %122, %123)
}

def @func_4538() -> (Tensor[(3, 7, 12), float32], Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), uint64]) {
  %124 = @func_1857() /* ty=(Tensor[(3, 7, 12), float32], Tensor[(3, 7, 12), float64]) */;
  %125 = @func_799() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %126 = %124.0;
  %127 = cast(%126, dtype="float32") /* ty=Tensor[(3, 7, 12), float32] */;
  %128 = reshape(%127, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float32] */;
  %129 = @func_3375(%128) /* ty=(Tensor[(3, 7, 12), uint64], Tensor[(3, 7, 12), uint16], Tensor[(3, 7, 12), float32]) */;
  %130 = %125.0;
  %131 = %129.0;
  (%126, %130, %131)
}

def @func_339() -> (Tensor[(3, 7, 12), float64],) {
  %132 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 7, 12), float64] */, dtype="float64") /* ty=Tensor[(3, 7, 12), float64] */;
  %133 = rsqrt(%132) /* ty=Tensor[(3, 7, 12), float64] */;
  (%133,)
}

def @func_3149() -> (Tensor[(3, 7, 12), float32],) {
  %134 = @func_851() /* ty=(Tensor[(3, 7, 12), float32],) */;
  %135 = %134.0;
  (%135,)
}

def @func_5219(%var_5174: float64, %var_5189: Tensor[(12, 15, 10), float64], %var_5208: Tensor[(768), int32]) -> (Tensor[(12, 15, 10), float64], Tensor[(12, 15, 10), uint8], Tensor[(3, 7, 12), float64], Tensor[(12, 15, 10), bool], Tensor[(8, 6, 16), int32], Tensor[(768), int32], Tensor[(5, 3, 6), bool]) {
  %136 = cast(%var_5174, dtype="float64") /* ty=float64 */;
  %137 = cast(meta[relay.Constant][2] /* ty=Tensor[(12, 15, 10), float64] */, dtype="float64") /* ty=Tensor[(12, 15, 10), float64] */;
  %138 = cast(%var_5189, dtype="uint8") /* ty=Tensor[(12, 15, 10), uint8] */;
  %139 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(12, 15, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %140 = cast(meta[relay.Constant][2] /* ty=Tensor[(12, 15, 10), float64] */, dtype="uint8") /* ty=Tensor[(12, 15, 10), uint8] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %142 = @func_339() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %143 = cast(%var_5189, dtype="float64") /* ty=Tensor[(12, 15, 10), float64] */;
  %144 = asinh(%143) /* ty=Tensor[(12, 15, 10), float64] */;
  %145 = cast(meta[relay.Constant][3] /* ty=Tensor[(12, 15, 10), float64] */, dtype="bool") /* ty=Tensor[(12, 15, 10), bool] */;
  %146 = shape_of(%144, dtype="int32") /* ty=Tensor[(3), int32] */;
  %147 = cast(%144, dtype="bool") /* ty=Tensor[(12, 15, 10), bool] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %149 = cast(%var_5208, dtype="int32") /* ty=Tensor[(768), int32] */;
  %150 = cast(%var_5208, dtype="int32") /* ty=Tensor[(768), int32] */;
  %151 = reshape(%149, newshape=[8, 6, 16]) /* ty=Tensor[(8, 6, 16), int32] */;
  %152 = reshape(%150, newshape=[8, 6, 16]) /* ty=Tensor[(8, 6, 16), int32] */;
  %153 = @func_1143() /* ty=(Tensor[(5, 3, 6), bool],) */;
  %154 = power(%136, %137) /* ty=Tensor[(12, 15, 10), float64] */;
  %155 = bitwise_xor(%140, %141) /* ty=Tensor[(12, 15, 10), uint8] */;
  %156 = %142.0;
  %157 = less_equal(%147, %148) /* ty=Tensor[(12, 15, 10), bool] */;
  %158 = @func_1208(%151, %152) /* ty=Tensor[(8, 6, 16), int32] */;
  %159 = %153.0;
  (%154, %155, %156, %157, %158, %var_5208, %159)
}

def @func_5568() -> Tensor[(3, 7, 12), float32] {
  %160 = @func_3517() /* ty=(Tensor[(3, 7, 12), float32],) */;
  %160.0
}

def @func_2766(%var_2744: Tensor[(4, 2, 6), int64], %var_2745: Tensor[(4, 2, 6), int64], %var_2760: Tensor[(4, 2, 6), int64]) -> (Tensor[(50), float32], Tensor[(4, 2, 6), bool]) {
  %161 = @func_1612() /* ty=(Tensor[(3, 7, 12), float64], Tensor[(5, 10), float64], Tensor[(50), float32]) */;
  %162 = cast(%var_2745, dtype="int64") /* ty=Tensor[(4, 2, 6), int64] */;
  %163 = shape_of(%var_2744, dtype="int32") /* ty=Tensor[(3), int32] */;
  %164 = cast(%var_2744, dtype="int64") /* ty=Tensor[(4, 2, 6), int64] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %166 = minimum(%164, %165) /* ty=Tensor[(4, 2, 6), int64] */;
  %167 = cast(%var_2760, dtype="bool") /* ty=Tensor[(4, 2, 6), bool] */;
  %168 = shape_of(%166, dtype="int32") /* ty=Tensor[(3), int32] */;
  %169 = cast(%166, dtype="bool") /* ty=Tensor[(4, 2, 6), bool] */;
  %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %171 = %161.2;
  %172 = greater_equal(%169, %170) /* ty=Tensor[(4, 2, 6), bool] */;
  (%171, %172)
}

def @func_2521(%var_2489: Tensor[(3, 7, 12), float64]) -> (Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), float32]) {
  %173 = @func_2167() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %174 = %173.0;
  %175 = cast(%var_2489, dtype="uint64") /* ty=Tensor[(3, 7, 12), uint64] */;
  %176 = shape_of(%174, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(%174, dtype="uint64") /* ty=Tensor[(3, 7, 12), uint64] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %179 = add(%177, %178) /* ty=Tensor[(3, 7, 12), uint64] */;
  %180 = cast(%179, dtype="float64") /* ty=Tensor[(3, 7, 12), float64] */;
  %181 = @func_1028() /* ty=(Tensor[(3, 7, 12), float32],) */;
  %182 = @func_1275() /* ty=Tensor[(3, 7, 12), float64] */;
  %183 = atanh(%180) /* ty=Tensor[(3, 7, 12), float64] */;
  %184 = %181.0;
  (%182, %183, %184)
}

def @func_1482() -> (Tensor[(3, 7, 12), float64],) {
  %185 = @func_1275() /* ty=Tensor[(3, 7, 12), float64] */;
  (%185,)
}

def @func_208(%var_194: Tensor[(5, 12, 4), float32]) -> (Tensor[(5, 12, 4), float32], Tensor[(5, 12, 4), float64]) {
  %186 = @func_109() /* ty=(Tensor[(5, 12, 4), float32],) */;
  %187 = %186.0;
  %188 = cast(%var_194, dtype="float32") /* ty=Tensor[(5, 12, 4), float32] */;
  %189 = shape_of(%187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %190 = cast(%187, dtype="float32") /* ty=Tensor[(5, 12, 4), float32] */;
  %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %192 = cast(%var_194, dtype="float64") /* ty=Tensor[(5, 12, 4), float64] */;
  %193 = shape_of(%187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %194 = cast(%187, dtype="float64") /* ty=Tensor[(5, 12, 4), float64] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %196 = floor_divide(%190, %191) /* ty=Tensor[(5, 12, 4), float32] */;
  %197 = multiply(%194, %195) /* ty=Tensor[(5, 12, 4), float64] */;
  (%196, %197)
}

def @func_3028() -> (Tensor[(5, 3, 6), bool], Tensor[(5, 3, 6), float32], Tensor[(252), float32], Tensor[(6, 11, 4), float32], Tensor[(3, 7, 12), uint16], Tensor[(240), float32], Tensor[(5, 12, 4), float32]) {
  %198 = @func_1143() /* ty=(Tensor[(5, 3, 6), bool],) */;
  %199 = %198.0;
  %200 = cast(%199, dtype="float64") /* ty=Tensor[(5, 3, 6), float64] */;
  %201 = cast(%199, dtype="float32") /* ty=Tensor[(5, 3, 6), float32] */;
  %202 = reshape(%200, newshape=[5, 3, 6]) /* ty=Tensor[(5, 3, 6), float64] */;
  %203 = reshape(%201, newshape=[5, 3, 6]) /* ty=Tensor[(5, 3, 6), float32] */;
  %204 = @func_924(%202, %203) /* ty=(Tensor[(5, 3, 6), float32], Tensor[(18, 100), uint32], Tensor[(5, 3, 6), float64], Tensor[(5, 3, 6), float32], Tensor[(3, 7, 12), float64]) */;
  %205 = cast(meta[relay.Constant][4] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
  %206 = cast(meta[relay.Constant][4] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
  %207 = cast(meta[relay.Constant][4] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
  %208 = cast(meta[relay.Constant][4] /* ty=Tensor[(252), float32] */, dtype="bool") /* ty=Tensor[(252), bool] */;
  %209 = cast(meta[relay.Constant][4] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
  %210 = reshape(%206, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float32] */;
  %211 = reshape(%207, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float32] */;
  %212 = reshape(%208, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), bool] */;
  %213 = reshape(%209, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float32] */;
  %214 = @func_769(%210, %211, %212, %213) /* ty=(Tensor[(6, 11, 4), float32], Tensor[(264), float32], Tensor[(3, 7, 12), uint16], Tensor[(3, 7, 12), bool]) */;
  %215 = %214.0;
  %216 = cast(%215, dtype="float32") /* ty=Tensor[(6, 11, 4), float32] */;
  %217 = sinh(%205) /* ty=Tensor[(252), float32] */;
  %218 = cast(%217, dtype="float32") /* ty=Tensor[(252), float32] */;
  %219 = cast(%217, dtype="float32") /* ty=Tensor[(252), float32] */;
  %220 = cast(meta[relay.Constant][4] /* ty=Tensor[(252), float32] */, dtype="bool") /* ty=Tensor[(252), bool] */;
  %221 = cast(%217, dtype="float32") /* ty=Tensor[(252), float32] */;
  %222 = reshape(%218, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float32] */;
  %223 = reshape(%219, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float32] */;
  %224 = reshape(%220, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), bool] */;
  %225 = reshape(%221, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float32] */;
  %226 = @func_769(%222, %223, %224, %225) /* ty=(Tensor[(6, 11, 4), float32], Tensor[(264), float32], Tensor[(3, 7, 12), uint16], Tensor[(3, 7, 12), bool]) */;
  %227 = cast(%199, dtype="bool") /* ty=Tensor[(5, 3, 6), bool] */;
  %228 = reshape(%227, newshape=[5, 3, 6]) /* ty=Tensor[(5, 3, 6), bool] */;
  %229 = @func_1797(%228) /* ty=(Tensor[(5, 3, 6), int8], Tensor[(5, 3, 6), float64], Tensor[(3, 7, 12), float32], Tensor[(5, 3, 6), bool], Tensor[(240), float32]) */;
  %230 = cast(%215, dtype="float32") /* ty=Tensor[(6, 11, 4), float32] */;
  %231 = reshape(%230, newshape=[1, 264]) /* ty=Tensor[(1, 264), float32] */;
  %232 = @func_2874(%231) /* ty=(Tensor[(3, 7, 12), float64], Tensor[(5, 12, 4), float32], Tensor[(1800), uint32], Tensor[(6, 11, 4), float32], Tensor[(1, 264), float32], Tensor[(24), int16], Tensor[(768), int32], Tensor[(5, 3, 6), bool]) */;
  %233 = %204.3;
  %234 = atanh(%216) /* ty=Tensor[(6, 11, 4), float32] */;
  %235 = %226.2;
  %236 = %229.4;
  %237 = %232.1;
  (%199, %233, %217, %234, %235, %236, %237)
}

def @func_3498() -> (Tensor[(3, 7, 12), float64],) {
  %238 = @func_2088() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %239 = %238.0;
  %240 = cast(%239, dtype="float64") /* ty=Tensor[(3, 7, 12), float64] */;
  %241 = cosh(%240) /* ty=Tensor[(3, 7, 12), float64] */;
  (%241,)
}

def @func_769(%var_718: Tensor[(3, 7, 12), float32], %var_724: Tensor[(3, 7, 12), float32], %var_749: Tensor[(3, 7, 12), bool], %var_758: Tensor[(3, 7, 12), float32]) -> (Tensor[(6, 11, 4), float32], Tensor[(264), float32], Tensor[(3, 7, 12), uint16], Tensor[(3, 7, 12), bool]) {
  %242 = cast(meta[relay.Constant][5] /* ty=Tensor[(264), float32] */, dtype="float32") /* ty=Tensor[(264), float32] */;
  %243 = reshape(%242, newshape=[6, 11, 4]) /* ty=Tensor[(6, 11, 4), float32] */;
  %244 = @func_626(%243) /* ty=(Tensor[(6, 11, 4), float32],) */;
  %245 = @func_597() /* ty=Tensor[(3, 7, 12), float32] */;
  %246 = cast(%var_718, dtype="float32") /* ty=Tensor[(3, 7, 12), float32] */;
  %247 = shape_of(%245, dtype="int32") /* ty=Tensor[(3), int32] */;
  %248 = cast(%245, dtype="float32") /* ty=Tensor[(3, 7, 12), float32] */;
  %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %250 = power(%248, %249) /* ty=Tensor[(3, 7, 12), float32] */;
  %251 = cast(%var_724, dtype="bool") /* ty=Tensor[(3, 7, 12), bool] */;
  %252 = shape_of(%250, dtype="int32") /* ty=Tensor[(3), int32] */;
  %253 = cast(%250, dtype="bool") /* ty=Tensor[(3, 7, 12), bool] */;
  %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %255 = greater_equal(%253, %254) /* ty=Tensor[(3, 7, 12), bool] */;
  %256 = cast(%var_749, dtype="uint16") /* ty=Tensor[(3, 7, 12), uint16] */;
  %257 = shape_of(%255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %258 = cast(%255, dtype="uint16") /* ty=Tensor[(3, 7, 12), uint16] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %260 = cast(%var_758, dtype="bool") /* ty=Tensor[(3, 7, 12), bool] */;
  %261 = shape_of(%var_718, dtype="int32") /* ty=Tensor[(3), int32] */;
  %262 = cast(%var_718, dtype="bool") /* ty=Tensor[(3, 7, 12), bool] */;
  %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %264 = %244.0;
  %265 = bitwise_or(%258, %259) /* ty=Tensor[(3, 7, 12), uint16] */;
  %266 = logical_and(%262, %263) /* ty=Tensor[(3, 7, 12), bool] */;
  (%264, meta[relay.Constant][5] /* ty=Tensor[(264), float32] */, %265, %266)
}

def @func_1832() -> (Tensor[(5, 12, 4), float64],) {
  %267 = @func_1020() /* ty=(Tensor[(5, 12, 4), float64], Tensor[(240), float32], Tensor[(5, 12, 4), float64], Tensor[(2, 4, 15), float64]) */;
  %268 = %267.2;
  (%268,)
}

def @func_3312(%var_3307: Tensor[(6, 13, 9), float32]) -> (Tensor[(6, 13, 9), float64],) {
  %269 = cast(%var_3307, dtype="float32") /* ty=Tensor[(6, 13, 9), float32] */;
  %270 = rsqrt(%269) /* ty=Tensor[(6, 13, 9), float32] */;
  %271 = cast(%270, dtype="float64") /* ty=Tensor[(6, 13, 9), float64] */;
  %272 = acosh(%271) /* ty=Tensor[(6, 13, 9), float64] */;
  (%272,)
}

def @func_2074(%var_2060: Tensor[(1, 1, 1), float64], %var_2069: Tensor[(1, 1800), uint32]) -> (Tensor[(1, 1, 1), float64], Tensor[(3, 7, 12), float32], Tensor[(10, 15, 12), bool], Tensor[(1, 1800), uint32]) {
  %273 = cast(%var_2060, dtype="float64") /* ty=Tensor[(1, 1, 1), float64] */;
  %274 = cast(%var_2069, dtype="uint32") /* ty=Tensor[(1, 1800), uint32] */;
  %275 = reshape(%274, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint32] */;
  %276 = @func_554(%275) /* ty=(Tensor[(10, 15, 12), bool], Tensor[(5, 12, 4), float32]) */;
  %277 = tan(%273) /* ty=Tensor[(1, 1, 1), float64] */;
  %278 = @func_597() /* ty=Tensor[(3, 7, 12), float32] */;
  %279 = %276.0;
  (%277, %278, %279, %var_2069)
}

def @func_2874(%var_2835: Tensor[(1, 264), float32]) -> (Tensor[(3, 7, 12), float64], Tensor[(5, 12, 4), float32], Tensor[(1800), uint32], Tensor[(6, 11, 4), float32], Tensor[(1, 264), float32], Tensor[(24), int16], Tensor[(768), int32], Tensor[(5, 3, 6), bool]) {
  %280 = @func_1482() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %281 = cast(meta[relay.Constant][6] /* ty=Tensor[(1800), uint32] */, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %282 = reshape(%281, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint32] */;
  %283 = @func_554(%282) /* ty=(Tensor[(10, 15, 12), bool], Tensor[(5, 12, 4), float32]) */;
  %284 = cast(%var_2835, dtype="float32") /* ty=Tensor[(1, 264), float32] */;
  %285 = reshape(%284, newshape=[6, 11, 4]) /* ty=Tensor[(6, 11, 4), float32] */;
  %286 = @func_626(%285) /* ty=(Tensor[(6, 11, 4), float32],) */;
  %287 = cast(meta[relay.Constant][7] /* ty=Tensor[(768), int32] */, dtype="int32") /* ty=Tensor[(768), int32] */;
  %288 = reshape(%287, newshape=[768]) /* ty=Tensor[(768), int32] */;
  %289 = @func_1324(%288) /* ty=(Tensor[(18, 100), uint32], Tensor[(2, 2, 6), bool], Tensor[(24), int16], Tensor[(8, 6, 16), int32], Tensor[(768), int32], Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), float32]) */;
  %290 = @func_1254() /* ty=(Tensor[(5, 3, 6), bool],) */;
  %291 = %280.0;
  %292 = %283.1;
  %293 = %286.0;
  %294 = %289.2;
  %295 = %290.0;
  (%291, %292, meta[relay.Constant][6] /* ty=Tensor[(1800), uint32] */, %293, %var_2835, %294, meta[relay.Constant][7] /* ty=Tensor[(768), int32] */, %295)
}

def @func_357() -> (Tensor[(5, 12, 4), float32], Tensor[(3, 7, 12), float64]) {
  %296 = @func_109() /* ty=(Tensor[(5, 12, 4), float32],) */;
  %297 = @func_339() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %298 = %296.0;
  %299 = %297.0;
  (%298, %299)
}

def @func_2894() -> Tensor[(3, 7, 12), float64] {
  @func_1175() /* ty=Tensor[(3, 7, 12), float64] */
}

def @func_5535() -> (Tensor[(3, 7, 12), float32],) {
  %300 = @func_525() /* ty=Tensor[(3, 7, 12), float32] */;
  (%300,)
}

def @func_1254() -> (Tensor[(5, 3, 6), bool],) {
  %301 = @func_986() /* ty=(Tensor[(10, 15, 12), bool], Tensor[(5, 3, 6), bool], Tensor[(3, 7, 12), float32]) */;
  %302 = %301.1;
  (%302,)
}

def @func_986() -> (Tensor[(10, 15, 12), bool], Tensor[(5, 3, 6), bool], Tensor[(3, 7, 12), float32]) {
  %303 = @func_692() /* ty=(Tensor[(5, 12, 4), float32], Tensor[(10, 15, 12), bool], Tensor[(18, 100), uint32]) */;
  %304 = cast(meta[relay.Constant][8] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %305 = cast(meta[relay.Constant][8] /* ty=Tensor[(90), float64] */, dtype="float32") /* ty=Tensor[(90), float32] */;
  %306 = reshape(%304, newshape=[5, 3, 6]) /* ty=Tensor[(5, 3, 6), float64] */;
  %307 = reshape(%305, newshape=[5, 3, 6]) /* ty=Tensor[(5, 3, 6), float32] */;
  %308 = @func_924(%306, %307) /* ty=(Tensor[(5, 3, 6), float32], Tensor[(18, 100), uint32], Tensor[(5, 3, 6), float64], Tensor[(5, 3, 6), float32], Tensor[(3, 7, 12), float64]) */;
  %309 = %308.2;
  %310 = cast(meta[relay.Constant][8] /* ty=Tensor[(90), float64] */, dtype="bool") /* ty=Tensor[(90), bool] */;
  %311 = shape_of(%309, dtype="int32") /* ty=Tensor[(3), int32] */;
  %312 = cast(%309, dtype="bool") /* ty=Tensor[(5, 3, 6), bool] */;
  %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %314 = %303.1;
  %315 = equal(%312, %313) /* ty=Tensor[(5, 3, 6), bool] */;
  %316 = @func_525() /* ty=Tensor[(3, 7, 12), float32] */;
  (%314, %315, %316)
}

def @func_3397(%var_3385: Tensor[(1800), uint32]) -> (Tensor[(5, 3, 6), bool], Tensor[(10, 15, 12), bool], Tensor[(1800), uint32]) {
  %317 = @func_3067() /* ty=(Tensor[(5, 3, 6), bool], Tensor[(3, 7, 12), float32]) */;
  %318 = cast(%var_3385, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %319 = reshape(%318, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint32] */;
  %320 = @func_554(%319) /* ty=(Tensor[(10, 15, 12), bool], Tensor[(5, 12, 4), float32]) */;
  %321 = %317.0;
  %322 = %320.0;
  (%321, %322, %var_3385)
}

def @func_5159(%var_5109: Tensor[(11, 10, 11), int64], %var_5117: Tensor[(10, 5), float64]) -> (Tensor[(5, 10), float64], Tensor[(10, 5), float64], Tensor[(11, 10, 11), bool], Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), uint64]) {
  %323 = cast(%var_5117, dtype="float64") /* ty=Tensor[(10, 5), float64] */;
  %324 = reshape(%323, newshape=[5, 10]) /* ty=Tensor[(5, 10), float64] */;
  %325 = cast(meta[relay.Constant][9] /* ty=Tensor[(11, 10, 11), int64] */, dtype="bool") /* ty=Tensor[(11, 10, 11), bool] */;
  %326 = shape_of(%var_5109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %327 = cast(%var_5109, dtype="bool") /* ty=Tensor[(11, 10, 11), bool] */;
  %328 = dyn.reshape(%325, %326, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %329 = greater_equal(%327, %328) /* ty=Tensor[(11, 10, 11), bool] */;
  %330 = cast(%329, dtype="bool") /* ty=Tensor[(11, 10, 11), bool] */;
  %331 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(11, 10, 11), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %332 = cast(meta[relay.Constant][9] /* ty=Tensor[(11, 10, 11), int64] */, dtype="bool") /* ty=Tensor[(11, 10, 11), bool] */;
  %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %334 = @func_1482() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %335 = %334.0;
  %336 = cast(%335, dtype="float64") /* ty=Tensor[(3, 7, 12), float64] */;
  %337 = reshape(%336, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float64] */;
  %338 = @func_835(%324) /* ty=Tensor[(5, 10), float64] */;
  %339 = logical_or(%332, %333) /* ty=Tensor[(11, 10, 11), bool] */;
  %340 = @func_4195(%337) /* ty=Tensor[(3, 7, 12), uint64] */;
  (%338, %var_5117, %339, %335, %340)
}

def @func_1963() -> Tensor[(3, 7, 12), float64] {
  %341 = @func_339() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %341.0
}

def @func_5285() -> Tensor[(5, 3, 6), float32] {
  %342 = @func_3028() /* ty=(Tensor[(5, 3, 6), bool], Tensor[(5, 3, 6), float32], Tensor[(252), float32], Tensor[(6, 11, 4), float32], Tensor[(3, 7, 12), uint16], Tensor[(240), float32], Tensor[(5, 12, 4), float32]) */;
  %342.1
}

def @func_1612() -> (Tensor[(3, 7, 12), float64], Tensor[(5, 10), float64], Tensor[(50), float32]) {
  %343 = @func_799() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %344 = cast(meta[relay.Constant][10] /* ty=Tensor[(50), float64] */, dtype="float64") /* ty=Tensor[(50), float64] */;
  %345 = reshape(%344, newshape=[5, 10]) /* ty=Tensor[(5, 10), float64] */;
  %346 = cast(meta[relay.Constant][10] /* ty=Tensor[(50), float64] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %347 = %343.0;
  %348 = @func_835(%345) /* ty=Tensor[(5, 10), float64] */;
  %349 = sinh(%346) /* ty=Tensor[(50), float32] */;
  (%347, %348, %349)
}

def @func_5582() -> (Tensor[(5, 3, 6), float32],) {
  %350 = @func_5285() /* ty=Tensor[(5, 3, 6), float32] */;
  (%350,)
}

def @func_1440() -> (Tensor[(5, 12, 4), bool], Tensor[(240), float32], Tensor[(5, 12, 4), float32]) {
  %351 = @func_109() /* ty=(Tensor[(5, 12, 4), float32],) */;
  %352 = %351.0;
  %353 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 12, 4), float32] */, dtype="bool") /* ty=Tensor[(5, 12, 4), bool] */;
  %354 = shape_of(%352, dtype="int32") /* ty=Tensor[(3), int32] */;
  %355 = cast(%352, dtype="bool") /* ty=Tensor[(5, 12, 4), bool] */;
  %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %357 = cast(%352, dtype="float32") /* ty=Tensor[(5, 12, 4), float32] */;
  %358 = atan(%357) /* ty=Tensor[(5, 12, 4), float32] */;
  %359 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 12, 4), float32] */, dtype="float32") /* ty=Tensor[(5, 12, 4), float32] */;
  %360 = shape_of(%358, dtype="int32") /* ty=Tensor[(3), int32] */;
  %361 = cast(%358, dtype="float32") /* ty=Tensor[(5, 12, 4), float32] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %363 = equal(%355, %356) /* ty=Tensor[(5, 12, 4), bool] */;
  %364 = @func_1225() /* ty=Tensor[(240), float32] */;
  %365 = mod(%361, %362) /* ty=Tensor[(5, 12, 4), float32] */;
  (%363, %364, %365)
}

def @func_4272(%var_4221: Tensor[(5, 3, 6), float64], %var_4243: Tensor[(702), float32]) -> (Tensor[(5, 3, 6), uint32], Tensor[(6, 13, 9), float64], Tensor[(702), float32], Tensor[(1800), uint32], Tensor[(10, 15, 12), float64], Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), float64]) {
  %366 = @func_1654() /* ty=(Tensor[(5, 3, 6), bool],) */;
  %367 = %366.0;
  %368 = cast(%367, dtype="float64") /* ty=Tensor[(5, 3, 6), float64] */;
  %369 = exp(%368) /* ty=Tensor[(5, 3, 6), float64] */;
  %370 = cast(%var_4221, dtype="uint32") /* ty=Tensor[(5, 3, 6), uint32] */;
  %371 = shape_of(%369, dtype="int32") /* ty=Tensor[(3), int32] */;
  %372 = cast(%369, dtype="uint32") /* ty=Tensor[(5, 3, 6), uint32] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %374 = cast(%var_4243, dtype="float32") /* ty=Tensor[(702), float32] */;
  %375 = reshape(%374, newshape=[6, 13, 9]) /* ty=Tensor[(6, 13, 9), float32] */;
  %376 = @func_3312(%375) /* ty=(Tensor[(6, 13, 9), float64],) */;
  %377 = cast(meta[relay.Constant][13] /* ty=Tensor[(1800), uint32] */, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %378 = reshape(%377, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint32] */;
  %379 = @func_554(%378) /* ty=(Tensor[(10, 15, 12), bool], Tensor[(5, 12, 4), float32]) */;
  %380 = %379.0;
  %381 = cast(%380, dtype="float64") /* ty=Tensor[(10, 15, 12), float64] */;
  %382 = @func_4078() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %383 = %382.0;
  %384 = cast(%383, dtype="float64") /* ty=Tensor[(3, 7, 12), float64] */;
  %385 = @func_3578() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %386 = left_shift(%372, %373) /* ty=Tensor[(5, 3, 6), uint32] */;
  %387 = %376.0;
  %388 = sigmoid(%381) /* ty=Tensor[(10, 15, 12), float64] */;
  %389 = atan(%384) /* ty=Tensor[(3, 7, 12), float64] */;
  %390 = %385.0;
  (%386, %387, %var_4243, meta[relay.Constant][13] /* ty=Tensor[(1800), uint32] */, %388, %389, %390)
}

def @func_1996() -> (Tensor[(3, 7, 12), float32],) {
  %391 = @func_1028() /* ty=(Tensor[(3, 7, 12), float32],) */;
  %392 = %391.0;
  (%392,)
}

def @func_2088() -> (Tensor[(3, 7, 12), float64],) {
  %393 = @func_1175() /* ty=Tensor[(3, 7, 12), float64] */;
  (%393,)
}

def @func_1275() -> Tensor[(3, 7, 12), float64] {
  %394 = @func_799() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %394.0
}

def @func_4894() -> (Tensor[(5, 3, 6), bool],) {
  %395 = @func_3780() /* ty=(Tensor[(3, 7, 12), float32], Tensor[(5, 3, 6), bool]) */;
  %396 = %395.1;
  (%396,)
}

def @func_1225() -> Tensor[(240), float32] {
  %397 = @func_1020() /* ty=(Tensor[(5, 12, 4), float64], Tensor[(240), float32], Tensor[(5, 12, 4), float64], Tensor[(2, 4, 15), float64]) */;
  %397.1
}

def @func_2713() -> Tensor[(3, 7, 12), float32] {
  %398 = @func_986() /* ty=(Tensor[(10, 15, 12), bool], Tensor[(5, 3, 6), bool], Tensor[(3, 7, 12), float32]) */;
  %398.2
}

def @func_3517() -> (Tensor[(3, 7, 12), float32],) {
  %399 = @func_2713() /* ty=Tensor[(3, 7, 12), float32] */;
  (%399,)
}

def @func_1020() -> (Tensor[(5, 12, 4), float64], Tensor[(240), float32], Tensor[(5, 12, 4), float64], Tensor[(2, 4, 15), float64]) {
  %400 = cast(meta[relay.Constant][14] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %401 = reshape(%400, newshape=[5, 12, 4]) /* ty=Tensor[(5, 12, 4), float32] */;
  %402 = @func_208(%401) /* ty=(Tensor[(5, 12, 4), float32], Tensor[(5, 12, 4), float64]) */;
  %403 = %402.1;
  %404 = cast(%403, dtype="float32") /* ty=Tensor[(5, 12, 4), float32] */;
  %405 = reshape(%404, newshape=[5, 12, 4]) /* ty=Tensor[(5, 12, 4), float32] */;
  %406 = @func_208(%405) /* ty=(Tensor[(5, 12, 4), float32], Tensor[(5, 12, 4), float64]) */;
  %407 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 4, 15), float32] */, dtype="float32") /* ty=Tensor[(2, 4, 15), float32] */;
  %408 = acosh(%407) /* ty=Tensor[(2, 4, 15), float32] */;
  %409 = cast(%408, dtype="float64") /* ty=Tensor[(2, 4, 15), float64] */;
  %410 = %406.1;
  %411 = acos(%409) /* ty=Tensor[(2, 4, 15), float64] */;
  (%403, meta[relay.Constant][14] /* ty=Tensor[(240), float32] */, %410, %411)
}

def @func_597() -> Tensor[(3, 7, 12), float32] {
  @func_525() /* ty=Tensor[(3, 7, 12), float32] */
}

def @func_2228(%var_2192: Tensor[(5, 3, 6), bool]) -> (Tensor[(5, 12, 4), float32], Tensor[(5, 3, 6), int64], Tensor[(5, 12, 4), float64]) {
  %412 = @func_357() /* ty=(Tensor[(5, 12, 4), float32], Tensor[(3, 7, 12), float64]) */;
  %413 = @func_1143() /* ty=(Tensor[(5, 3, 6), bool],) */;
  %414 = %413.0;
  %415 = cast(%var_2192, dtype="float64") /* ty=Tensor[(5, 3, 6), float64] */;
  %416 = shape_of(%414, dtype="int32") /* ty=Tensor[(3), int32] */;
  %417 = cast(%414, dtype="float64") /* ty=Tensor[(5, 3, 6), float64] */;
  %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %419 = floor_divide(%417, %418) /* ty=Tensor[(5, 3, 6), float64] */;
  %420 = cast(%419, dtype="int64") /* ty=Tensor[(5, 3, 6), int64] */;
  %421 = shape_of(%414, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(%414, dtype="int64") /* ty=Tensor[(5, 3, 6), int64] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %424 = @func_1020() /* ty=(Tensor[(5, 12, 4), float64], Tensor[(240), float32], Tensor[(5, 12, 4), float64], Tensor[(2, 4, 15), float64]) */;
  %425 = %412.0;
  %426 = add(%422, %423) /* ty=Tensor[(5, 3, 6), int64] */;
  %427 = %424.0;
  (%425, %426, %427)
}

def @func_3419(%var_3403: Tensor[(2, 12, 7), int64]) -> (Tensor[(2, 12, 7), bool],) {
  %428 = cast(meta[relay.Constant][16] /* ty=Tensor[(2, 12, 7), int64] */, dtype="bool") /* ty=Tensor[(2, 12, 7), bool] */;
  %429 = shape_of(%var_3403, dtype="int32") /* ty=Tensor[(3), int32] */;
  %430 = cast(%var_3403, dtype="bool") /* ty=Tensor[(2, 12, 7), bool] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %432 = greater_equal(%430, %431) /* ty=Tensor[(2, 12, 7), bool] */;
  (%432,)
}

def @func_3108(%var_3103: Tensor[(5, 3, 6), bool]) -> Tensor[(5, 3, 6), int8] {
  %433 = @func_1254() /* ty=(Tensor[(5, 3, 6), bool],) */;
  %434 = %433.0;
  %435 = cast(%var_3103, dtype="int8") /* ty=Tensor[(5, 3, 6), int8] */;
  %436 = shape_of(%434, dtype="int32") /* ty=Tensor[(3), int32] */;
  %437 = cast(%434, dtype="int8") /* ty=Tensor[(5, 3, 6), int8] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  right_shift(%437, %438) /* ty=Tensor[(5, 3, 6), int8] */
}

def @func_4028(%var_4023: Tensor[(6, 9, 6), float64]) -> Tensor[(6, 9, 6), float64] {
  %439 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 9, 6), float64] */, dtype="float64") /* ty=Tensor[(6, 9, 6), float64] */;
  %440 = shape_of(%var_4023, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%var_4023, dtype="float64") /* ty=Tensor[(6, 9, 6), float64] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%441, %442) /* ty=Tensor[(6, 9, 6), float64] */
}

def @func_4195(%var_4183: Tensor[(3, 7, 12), float64]) -> Tensor[(3, 7, 12), uint64] {
  %443 = @func_1612() /* ty=(Tensor[(3, 7, 12), float64], Tensor[(5, 10), float64], Tensor[(50), float32]) */;
  %444 = %443.0;
  %445 = cast(%var_4183, dtype="uint64") /* ty=Tensor[(3, 7, 12), uint64] */;
  %446 = shape_of(%444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %447 = cast(%444, dtype="uint64") /* ty=Tensor[(3, 7, 12), uint64] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  bitwise_xor(%447, %448) /* ty=Tensor[(3, 7, 12), uint64] */
}

def @func_2468(%var_2441: Tensor[(9, 1, 7), float32]) -> (Tensor[(3, 7, 12), float64], Tensor[(9, 2, 7), bool]) {
  %449 = @func_339() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %450 = cast(%var_2441, dtype="float32") /* ty=Tensor[(9, 1, 7), float32] */;
  %451 = erf(%450) /* ty=Tensor[(9, 1, 7), float32] */;
  %452 = cast(%451, dtype="bool") /* ty=Tensor[(9, 1, 7), bool] */;
  %453 = cast(meta[relay.Constant][18] /* ty=Tensor[(9, 2, 7), float32] */, dtype="bool") /* ty=Tensor[(9, 2, 7), bool] */;
  %454 = %449.0;
  %455 = greater(%452, %453) /* ty=Tensor[(9, 2, 7), bool] */;
  (%454, %455)
}

def @func_5326() -> (Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), float32]) {
  %456 = @func_2167() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %457 = %456.0;
  %458 = @func_597() /* ty=Tensor[(3, 7, 12), float32] */;
  (%457, %458)
}

def @func_1451() -> (Tensor[(5, 12, 4), bool], Tensor[(3, 7, 12), float64]) {
  %459 = @func_1440() /* ty=(Tensor[(5, 12, 4), bool], Tensor[(240), float32], Tensor[(5, 12, 4), float32]) */;
  %460 = %459.0;
  %461 = @func_1175() /* ty=Tensor[(3, 7, 12), float64] */;
  (%460, %461)
}

def @func_2052(%var_2039: Tensor[(15, 5, 13), float32]) -> Tensor[(15, 5, 13), float32] {
  %462 = cast(%var_2039, dtype="float32") /* ty=Tensor[(15, 5, 13), float32] */;
  log10(%462) /* ty=Tensor[(15, 5, 13), float32] */
}

def @func_109() -> (Tensor[(5, 12, 4), float32],) {
  %463 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 12, 4), float32] */, dtype="float32") /* ty=Tensor[(5, 12, 4), float32] */;
  %464 = tan(%463) /* ty=Tensor[(5, 12, 4), float32] */;
  (%464,)
}

def @func_3780() -> (Tensor[(3, 7, 12), float32], Tensor[(5, 3, 6), bool]) {
  %465 = @func_2167() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %466 = %465.0;
  %467 = cast(%466, dtype="float32") /* ty=Tensor[(3, 7, 12), float32] */;
  %468 = @func_1254() /* ty=(Tensor[(5, 3, 6), bool],) */;
  %469 = asinh(%467) /* ty=Tensor[(3, 7, 12), float32] */;
  %470 = %468.0;
  (%469, %470)
}

def @func_3186() -> (Tensor[(3, 7, 12), float64],) {
  %471 = @func_339() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %472 = %471.0;
  (%472,)
}

def @func_835(%var_828: Tensor[(5, 10), float64]) -> Tensor[(5, 10), float64] {
  %473 = cast(%var_828, dtype="float64") /* ty=Tensor[(5, 10), float64] */;
  log(%473) /* ty=Tensor[(5, 10), float64] */
}

def @func_1579() -> (Tensor[(240), float32],) {
  %474 = @func_1440() /* ty=(Tensor[(5, 12, 4), bool], Tensor[(240), float32], Tensor[(5, 12, 4), float32]) */;
  %475 = %474.1;
  (%475,)
}

def @func_1028() -> (Tensor[(3, 7, 12), float32],) {
  %476 = @func_525() /* ty=Tensor[(3, 7, 12), float32] */;
  (%476,)
}

def @func_4078() -> (Tensor[(3, 7, 12), float64],) {
  %477 = @func_1175() /* ty=Tensor[(3, 7, 12), float64] */;
  (%477,)
}

def @func_4870(%var_4861: Tensor[(280, 1), uint32]) -> (Tensor[(3, 7, 12), uint16], Tensor[(280, ?), float64]) {
  %478 = @func_4458() /* ty=(Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), uint16], Tensor[(3, 7, 12), int16], Tensor[(5, 10), float64], Tensor[(50), float64]) */;
  %479 = cast(%var_4861, dtype="uint32") /* ty=Tensor[(280, 1), uint32] */;
  %480 = cast(%var_4861, dtype="uint32") /* ty=Tensor[(280, 1), uint32] */;
  %481 = reshape(%479, newshape=[14, 10, 2]) /* ty=Tensor[(14, 10, 2), uint32] */;
  %482 = reshape(%480, newshape=[14, 10, 2]) /* ty=Tensor[(14, 10, 2), uint32] */;
  %483 = @func_2294(%481, %482) /* ty=Tensor[(14, 10, 2), bool] */;
  %484 = cast(%483, dtype="float64") /* ty=Tensor[(14, 10, 2), float64] */;
  %485 = shape_of(%var_4861, dtype="int32") /* ty=Tensor[(2), int32] */;
  %486 = cast(%var_4861, dtype="float64") /* ty=Tensor[(280, 1), float64] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %488 = %478.1;
  %489 = divide(%486, %487) /* ty=Tensor[(280, ?), float64] */;
  (%488, %489)
}

def @func_5523() -> Tensor[(3, 7, 12), float32] {
  %490 = @func_1028() /* ty=(Tensor[(3, 7, 12), float32],) */;
  %490.0
}

def @func_5702() -> Tensor[(240), float32] {
  %491 = @func_1569() /* ty=(Tensor[(10, 15, 12), float64], Tensor[(5, 12, 4), bool], Tensor[(240), float32]) */;
  %491.2
}

def @func_924(%var_869: Tensor[(5, 3, 6), float64], %var_912: Tensor[(5, 3, 6), float32]) -> (Tensor[(5, 3, 6), float32], Tensor[(18, 100), uint32], Tensor[(5, 3, 6), float64], Tensor[(5, 3, 6), float32], Tensor[(3, 7, 12), float64]) {
  %492 = cast(%var_869, dtype="float32") /* ty=Tensor[(5, 3, 6), float32] */;
  %493 = @func_692() /* ty=(Tensor[(5, 12, 4), float32], Tensor[(10, 15, 12), bool], Tensor[(18, 100), uint32]) */;
  %494 = cast(%var_869, dtype="float64") /* ty=Tensor[(5, 3, 6), float64] */;
  %495 = cast(%var_869, dtype="float64") /* ty=Tensor[(5, 3, 6), float64] */;
  %496 = acosh(%495) /* ty=Tensor[(5, 3, 6), float64] */;
  %497 = cast(%496, dtype="float32") /* ty=Tensor[(5, 3, 6), float32] */;
  %498 = sinh(%497) /* ty=Tensor[(5, 3, 6), float32] */;
  %499 = cast(%var_912, dtype="float32") /* ty=Tensor[(5, 3, 6), float32] */;
  %500 = shape_of(%498, dtype="int32") /* ty=Tensor[(3), int32] */;
  %501 = cast(%498, dtype="float32") /* ty=Tensor[(5, 3, 6), float32] */;
  %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %503 = @func_851() /* ty=(Tensor[(3, 7, 12), float32],) */;
  %504 = %503.0;
  %505 = cast(%504, dtype="float32") /* ty=Tensor[(3, 7, 12), float32] */;
  %506 = asin(%505) /* ty=Tensor[(3, 7, 12), float32] */;
  %507 = cast(%506, dtype="float64") /* ty=Tensor[(3, 7, 12), float64] */;
  %508 = shape_of(%504, dtype="int32") /* ty=Tensor[(3), int32] */;
  %509 = cast(%504, dtype="float64") /* ty=Tensor[(3, 7, 12), float64] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %511 = rsqrt(%492) /* ty=Tensor[(5, 3, 6), float32] */;
  %512 = %493.2;
  %513 = asin(%494) /* ty=Tensor[(5, 3, 6), float64] */;
  %514 = power(%501, %502) /* ty=Tensor[(5, 3, 6), float32] */;
  %515 = subtract(%509, %510) /* ty=Tensor[(3, 7, 12), float64] */;
  (%511, %512, %513, %514, %515)
}

def @func_5446(%var_5420: Tensor[(240), float32]) -> (Tensor[(3, 7, 12), float64], Tensor[(240), float32], Tensor[(5, 12, 4), float64]) {
  %516 = @func_5033() /* ty=(Tensor[(3, 7, 12), float32], Tensor[(3, 7, 12), float64]) */;
  %517 = cast(%var_5420, dtype="float32") /* ty=Tensor[(240), float32] */;
  %518 = reshape(%517, newshape=[5, 12, 4]) /* ty=Tensor[(5, 12, 4), float32] */;
  %519 = @func_208(%518) /* ty=(Tensor[(5, 12, 4), float32], Tensor[(5, 12, 4), float64]) */;
  %520 = %519.0;
  %521 = cast(%520, dtype="float64") /* ty=Tensor[(5, 12, 4), float64] */;
  %522 = %516.1;
  %523 = acosh(%521) /* ty=Tensor[(5, 12, 4), float64] */;
  (%522, %var_5420, %523)
}

def @func_1143() -> (Tensor[(5, 3, 6), bool],) {
  %524 = @func_986() /* ty=(Tensor[(10, 15, 12), bool], Tensor[(5, 3, 6), bool], Tensor[(3, 7, 12), float32]) */;
  %525 = %524.1;
  (%525,)
}

def @func_3375(%var_3337: Tensor[(3, 7, 12), float32]) -> (Tensor[(3, 7, 12), uint64], Tensor[(3, 7, 12), uint16], Tensor[(3, 7, 12), float32]) {
  %526 = @func_525() /* ty=Tensor[(3, 7, 12), float32] */;
  %527 = cast(%var_3337, dtype="uint64") /* ty=Tensor[(3, 7, 12), uint64] */;
  %528 = shape_of(%526, dtype="int32") /* ty=Tensor[(3), int32] */;
  %529 = cast(%526, dtype="uint64") /* ty=Tensor[(3, 7, 12), uint64] */;
  %530 = dyn.reshape(%527, %528, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %531 = cast(%526, dtype="uint16") /* ty=Tensor[(3, 7, 12), uint16] */;
  %532 = shape_of(%var_3337, dtype="int32") /* ty=Tensor[(3), int32] */;
  %533 = cast(%var_3337, dtype="uint16") /* ty=Tensor[(3, 7, 12), uint16] */;
  %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %535 = logical_xor(%529, %530) /* ty=Tensor[(3, 7, 12), uint64] */;
  %536 = bitwise_and(%533, %534) /* ty=Tensor[(3, 7, 12), uint16] */;
  %537 = @func_2713() /* ty=Tensor[(3, 7, 12), float32] */;
  (%535, %536, %537)
}

def @func_1324(%var_1292: Tensor[(768), int32]) -> (Tensor[(18, 100), uint32], Tensor[(2, 2, 6), bool], Tensor[(24), int16], Tensor[(8, 6, 16), int32], Tensor[(768), int32], Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), float32]) {
  %538 = @func_692() /* ty=(Tensor[(5, 12, 4), float32], Tensor[(10, 15, 12), bool], Tensor[(18, 100), uint32]) */;
  %539 = cast(meta[relay.Constant][20] /* ty=Tensor[(24), int16] */, dtype="int16") /* ty=Tensor[(24), int16] */;
  %540 = reshape(%539, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), int16] */;
  %541 = cast(%var_1292, dtype="int32") /* ty=Tensor[(768), int32] */;
  %542 = cast(%var_1292, dtype="int32") /* ty=Tensor[(768), int32] */;
  %543 = reshape(%541, newshape=[8, 6, 16]) /* ty=Tensor[(8, 6, 16), int32] */;
  %544 = reshape(%542, newshape=[8, 6, 16]) /* ty=Tensor[(8, 6, 16), int32] */;
  %545 = @func_799() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %546 = @func_851() /* ty=(Tensor[(3, 7, 12), float32],) */;
  %547 = %538.2;
  %548 = @func_1243(%540) /* ty=Tensor[(2, 2, 6), bool] */;
  %549 = @func_1208(%543, %544) /* ty=Tensor[(8, 6, 16), int32] */;
  %550 = %545.0;
  %551 = %546.0;
  (%547, %548, meta[relay.Constant][20] /* ty=Tensor[(24), int16] */, %549, %var_1292, %550, %551)
}

def @func_1654() -> (Tensor[(5, 3, 6), bool],) {
  %552 = @func_1143() /* ty=(Tensor[(5, 3, 6), bool],) */;
  %553 = %552.0;
  (%553,)
}

def @func_799() -> (Tensor[(3, 7, 12), float64],) {
  %554 = @func_357() /* ty=(Tensor[(5, 12, 4), float32], Tensor[(3, 7, 12), float64]) */;
  %555 = %554.1;
  (%555,)
}

def @func_3951(%var_3946: Tensor[(1, 8, 5), float64]) -> Tensor[(1, 8, 5), float64] {
  %556 = cast(%var_3946, dtype="float64") /* ty=Tensor[(1, 8, 5), float64] */;
  sqrt(%556) /* ty=Tensor[(1, 8, 5), float64] */
}

def @func_4109() -> (Tensor[(50), float32],) {
  %557 = @func_1612() /* ty=(Tensor[(3, 7, 12), float64], Tensor[(5, 10), float64], Tensor[(50), float32]) */;
  %558 = %557.2;
  (%558,)
}

def @func_4458() -> (Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), uint16], Tensor[(3, 7, 12), int16], Tensor[(5, 10), float64], Tensor[(50), float64]) {
  %559 = @func_357() /* ty=(Tensor[(5, 12, 4), float32], Tensor[(3, 7, 12), float64]) */;
  %560 = @func_2088() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %561 = %560.0;
  %562 = cast(%561, dtype="float32") /* ty=Tensor[(3, 7, 12), float32] */;
  %563 = reshape(%562, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float32] */;
  %564 = @func_3375(%563) /* ty=(Tensor[(3, 7, 12), uint64], Tensor[(3, 7, 12), uint16], Tensor[(3, 7, 12), float32]) */;
  %565 = cast(%561, dtype="float32") /* ty=Tensor[(3, 7, 12), float32] */;
  %566 = log(%565) /* ty=Tensor[(3, 7, 12), float32] */;
  %567 = cast(%561, dtype="int16") /* ty=Tensor[(3, 7, 12), int16] */;
  %568 = shape_of(%566, dtype="int32") /* ty=Tensor[(3), int32] */;
  %569 = cast(%566, dtype="int16") /* ty=Tensor[(3, 7, 12), int16] */;
  %570 = dyn.reshape(%567, %568, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %571 = cast(meta[relay.Constant][21] /* ty=Tensor[(50), float64] */, dtype="float64") /* ty=Tensor[(50), float64] */;
  %572 = reshape(%571, newshape=[5, 10]) /* ty=Tensor[(5, 10), float64] */;
  %573 = %559.1;
  %574 = %564.1;
  %575 = maximum(%569, %570) /* ty=Tensor[(3, 7, 12), int16] */;
  %576 = @func_835(%572) /* ty=Tensor[(5, 10), float64] */;
  (%573, %574, %575, %576, meta[relay.Constant][21] /* ty=Tensor[(50), float64] */)
}

def @func_1243(%var_1230: Tensor[(2, 2, 6), int16]) -> Tensor[(2, 2, 6), bool] {
  %577 = cast(meta[relay.Constant][22] /* ty=int16 */, dtype="bool") /* ty=bool */;
  %578 = cast(%var_1230, dtype="bool") /* ty=Tensor[(2, 2, 6), bool] */;
  greater_equal(%577, %578) /* ty=Tensor[(2, 2, 6), bool] */
}

def @func_554(%var_545: Tensor[(10, 15, 12), uint32]) -> (Tensor[(10, 15, 12), bool], Tensor[(5, 12, 4), float32]) {
  %579 = cast(meta[relay.Constant][23] /* ty=Tensor[(10, 15, 12), uint32] */, dtype="bool") /* ty=Tensor[(10, 15, 12), bool] */;
  %580 = shape_of(%var_545, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(%var_545, dtype="bool") /* ty=Tensor[(10, 15, 12), bool] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %583 = @func_357() /* ty=(Tensor[(5, 12, 4), float32], Tensor[(3, 7, 12), float64]) */;
  %584 = less_equal(%581, %582) /* ty=Tensor[(10, 15, 12), bool] */;
  %585 = %583.0;
  (%584, %585)
}

def @func_3445() -> (Tensor[(3, 7, 12), float32],) {
  %586 = @func_1996() /* ty=(Tensor[(3, 7, 12), float32],) */;
  %587 = %586.0;
  (%587,)
}

def @func_692() -> (Tensor[(5, 12, 4), float32], Tensor[(10, 15, 12), bool], Tensor[(18, 100), uint32]) {
  %588 = @func_109() /* ty=(Tensor[(5, 12, 4), float32],) */;
  %589 = cast(meta[relay.Constant][24] /* ty=Tensor[(18, 100), uint32] */, dtype="uint32") /* ty=Tensor[(18, 100), uint32] */;
  %590 = reshape(%589, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint32] */;
  %591 = @func_554(%590) /* ty=(Tensor[(10, 15, 12), bool], Tensor[(5, 12, 4), float32]) */;
  %592 = %588.0;
  %593 = %591.0;
  (%592, %593, meta[relay.Constant][24] /* ty=Tensor[(18, 100), uint32] */)
}

def @func_2789(%var_2787: Tensor[(63, 1), float32]) -> (Tensor[(240), float32], Tensor[(9, 2, 7), bool], Tensor[(63, 1), float32]) {
  %594 = @func_1569() /* ty=(Tensor[(10, 15, 12), float64], Tensor[(5, 12, 4), bool], Tensor[(240), float32]) */;
  %595 = cast(%var_2787, dtype="float32") /* ty=Tensor[(63, 1), float32] */;
  %596 = reshape(%595, newshape=[9, 1, 7]) /* ty=Tensor[(9, 1, 7), float32] */;
  %597 = @func_2468(%596) /* ty=(Tensor[(3, 7, 12), float64], Tensor[(9, 2, 7), bool]) */;
  %598 = %594.2;
  %599 = %597.1;
  (%598, %599, %var_2787)
}

def @func_1857() -> (Tensor[(3, 7, 12), float32], Tensor[(3, 7, 12), float64]) {
  %600 = @func_1028() /* ty=(Tensor[(3, 7, 12), float32],) */;
  %601 = %600.0;
  %602 = cast(%601, dtype="float32") /* ty=Tensor[(3, 7, 12), float32] */;
  %603 = @func_1482() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %604 = acos(%602) /* ty=Tensor[(3, 7, 12), float32] */;
  %605 = %603.0;
  (%604, %605)
}

def @func_1939(%var_1888: Tensor[(3, 7, 12), float64]) -> (Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), bool], Tensor[(6, 11, 4), float32], Tensor[(3, 7, 12), float32], Tensor[(10, 15, 12), bool], Tensor[(3, 7, 12), float32], Tensor[(3, 7, 12), float64]) {
  %606 = @func_1451() /* ty=(Tensor[(5, 12, 4), bool], Tensor[(3, 7, 12), float64]) */;
  %607 = %606.1;
  %608 = cast(%var_1888, dtype="float64") /* ty=Tensor[(3, 7, 12), float64] */;
  %609 = shape_of(%607, dtype="int32") /* ty=Tensor[(3), int32] */;
  %610 = cast(%607, dtype="float64") /* ty=Tensor[(3, 7, 12), float64] */;
  %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %612 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 7, 12), float64] */, dtype="bool") /* ty=Tensor[(3, 7, 12), bool] */;
  %613 = shape_of(%var_1888, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(%var_1888, dtype="bool") /* ty=Tensor[(3, 7, 12), bool] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %616 = floor_mod(%610, %611) /* ty=Tensor[(3, 7, 12), float64] */;
  %617 = cast(%616, dtype="float32") /* ty=Tensor[(3, 7, 12), float32] */;
  %618 = cast(%607, dtype="float32") /* ty=Tensor[(3, 7, 12), float32] */;
  %619 = cast(%607, dtype="bool") /* ty=Tensor[(3, 7, 12), bool] */;
  %620 = less(%614, %615) /* ty=Tensor[(3, 7, 12), bool] */;
  %621 = cast(%620, dtype="float32") /* ty=Tensor[(3, 7, 12), float32] */;
  %622 = reshape(%617, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float32] */;
  %623 = reshape(%618, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float32] */;
  %624 = reshape(%619, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), bool] */;
  %625 = reshape(%621, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float32] */;
  %626 = @func_769(%622, %623, %624, %625) /* ty=(Tensor[(6, 11, 4), float32], Tensor[(264), float32], Tensor[(3, 7, 12), uint16], Tensor[(3, 7, 12), bool]) */;
  %627 = @func_1028() /* ty=(Tensor[(3, 7, 12), float32],) */;
  %628 = @func_692() /* ty=(Tensor[(5, 12, 4), float32], Tensor[(10, 15, 12), bool], Tensor[(18, 100), uint32]) */;
  %629 = @func_851() /* ty=(Tensor[(3, 7, 12), float32],) */;
  %630 = @func_799() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %631 = %626.0;
  %632 = %627.0;
  %633 = %628.1;
  %634 = %629.0;
  %635 = %630.0;
  (%616, %620, %631, %632, %633, %634, %635)
}

def @func_3992(%var_3981: Tensor[(3, 7, 12), float32]) -> (Tensor[(3, 7, 12), float32], Tensor[(3, 7, 12), bool]) {
  %636 = @func_851() /* ty=(Tensor[(3, 7, 12), float32],) */;
  %637 = @func_851() /* ty=(Tensor[(3, 7, 12), float32],) */;
  %638 = %637.0;
  %639 = cast(%var_3981, dtype="bool") /* ty=Tensor[(3, 7, 12), bool] */;
  %640 = shape_of(%638, dtype="int32") /* ty=Tensor[(3), int32] */;
  %641 = cast(%638, dtype="bool") /* ty=Tensor[(3, 7, 12), bool] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %643 = %636.0;
  %644 = less_equal(%641, %642) /* ty=Tensor[(3, 7, 12), bool] */;
  (%643, %644)
}

def @func_2359(%var_2319: int8, %var_2320: Tensor[(9, 4, 1), int8]) -> (Tensor[(5, 3, 6), bool], Tensor[(9, 4, 240), int64]) {
  %645 = @func_1254() /* ty=(Tensor[(5, 3, 6), bool],) */;
  %646 = @func_1579() /* ty=(Tensor[(240), float32],) */;
  %647 = %646.0;
  %648 = cast(%var_2319, dtype="int8") /* ty=int8 */;
  %649 = cast(%var_2320, dtype="int8") /* ty=Tensor[(9, 4, 1), int8] */;
  %650 = left_shift(%648, %649) /* ty=Tensor[(9, 4, 1), int8] */;
  %651 = cast(%var_2319, dtype="bool") /* ty=bool */;
  %652 = cast(%650, dtype="bool") /* ty=Tensor[(9, 4, 1), bool] */;
  %653 = logical_or(%651, %652) /* ty=Tensor[(9, 4, 1), bool] */;
  %654 = cast(%653, dtype="int16") /* ty=Tensor[(9, 4, 1), int16] */;
  %655 = shape_of(%var_2320, dtype="int32") /* ty=Tensor[(3), int32] */;
  %656 = cast(%var_2320, dtype="int16") /* ty=Tensor[(9, 4, 1), int16] */;
  %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %658 = bitwise_xor(%656, %657) /* ty=Tensor[(9, 4, ?), int16] */;
  %659 = cast(%647, dtype="int64") /* ty=Tensor[(240), int64] */;
  %660 = cast(%658, dtype="int64") /* ty=Tensor[(9, 4, ?), int64] */;
  %661 = %645.0;
  %662 = right_shift(%659, %660) /* ty=Tensor[(9, 4, 240), int64] */;
  (%661, %662)
}

def @func_2294(%var_2281: Tensor[(14, 10, 2), uint32], %var_2282: Tensor[(14, 10, 2), uint32]) -> Tensor[(14, 10, 2), bool] {
  %663 = cast(%var_2282, dtype="bool") /* ty=Tensor[(14, 10, 2), bool] */;
  %664 = shape_of(%var_2281, dtype="int32") /* ty=Tensor[(3), int32] */;
  %665 = cast(%var_2281, dtype="bool") /* ty=Tensor[(14, 10, 2), bool] */;
  %666 = dyn.reshape(%663, %664, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%665, %666) /* ty=Tensor[(14, 10, 2), bool] */
}

def @func_2676() -> Tensor[(5, 3, 6), bool] {
  %667 = @func_1654() /* ty=(Tensor[(5, 3, 6), bool],) */;
  %667.0
}

def @func_5393(%var_5362: Tensor[(15, 10, 9), float64]) -> (Tensor[(15, 10, 9), float64], Tensor[(15, 10, 9), uint8], Tensor[(15, 10, 9), float64], Tensor[(15, 10, 9), bool]) {
  %668 = cast(4.2025f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %669 = cast(meta[relay.Constant][26] /* ty=Tensor[(15, 10, 9), float64] */, dtype="float64") /* ty=Tensor[(15, 10, 9), float64] */;
  %670 = cast(%var_5362, dtype="uint8") /* ty=Tensor[(15, 10, 9), uint8] */;
  %671 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(15, 10, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %672 = cast(meta[relay.Constant][26] /* ty=Tensor[(15, 10, 9), float64] */, dtype="uint8") /* ty=Tensor[(15, 10, 9), uint8] */;
  %673 = dyn.reshape(%670, %671, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %674 = cast(meta[relay.Constant][26] /* ty=Tensor[(15, 10, 9), float64] */, dtype="float64") /* ty=Tensor[(15, 10, 9), float64] */;
  %675 = log(%674) /* ty=Tensor[(15, 10, 9), float64] */;
  %676 = cast(meta[relay.Constant][27] /* ty=Tensor[(15, 10, 9), float64] */, dtype="float64") /* ty=Tensor[(15, 10, 9), float64] */;
  %677 = shape_of(%675, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%675, dtype="float64") /* ty=Tensor[(15, 10, 9), float64] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %680 = cast(%675, dtype="float32") /* ty=Tensor[(15, 10, 9), float32] */;
  %681 = acosh(%680) /* ty=Tensor[(15, 10, 9), float32] */;
  %682 = cast(%675, dtype="bool") /* ty=Tensor[(15, 10, 9), bool] */;
  %683 = shape_of(%681, dtype="int32") /* ty=Tensor[(3), int32] */;
  %684 = cast(%681, dtype="bool") /* ty=Tensor[(15, 10, 9), bool] */;
  %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %686 = divide(%668, %669) /* ty=Tensor[(15, 10, 9), float64] */;
  %687 = bitwise_xor(%672, %673) /* ty=Tensor[(15, 10, 9), uint8] */;
  %688 = subtract(%678, %679) /* ty=Tensor[(15, 10, 9), float64] */;
  %689 = greater(%684, %685) /* ty=Tensor[(15, 10, 9), bool] */;
  (%686, %687, %688, %689)
}

def @func_4591(%var_4541: Tensor[(11, 3, 10), uint64], %var_4542: Tensor[(11, 3, 10), uint64], %var_4560: Tensor[(63), float32], %var_4582: Tensor[(252), float64]) -> (Tensor[(9, 2, 7), bool], Tensor[(63), float32], Tensor[(11, 3, 10), int32], Tensor[(3, 7, 12), uint64], Tensor[(252), float64]) {
  %690 = cast(%var_4560, dtype="float32") /* ty=Tensor[(63), float32] */;
  %691 = reshape(%690, newshape=[63, 1]) /* ty=Tensor[(63, 1), float32] */;
  %692 = @func_2789(%691) /* ty=(Tensor[(240), float32], Tensor[(9, 2, 7), bool], Tensor[(63, 1), float32]) */;
  %693 = cast(%var_4541, dtype="float64") /* ty=Tensor[(11, 3, 10), float64] */;
  %694 = sqrt(%693) /* ty=Tensor[(11, 3, 10), float64] */;
  %695 = cast(%var_4542, dtype="uint64") /* ty=Tensor[(11, 3, 10), uint64] */;
  %696 = shape_of(%var_4541, dtype="int32") /* ty=Tensor[(3), int32] */;
  %697 = cast(%var_4541, dtype="uint64") /* ty=Tensor[(11, 3, 10), uint64] */;
  %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %699 = logical_xor(%697, %698) /* ty=Tensor[(11, 3, 10), uint64] */;
  %700 = cast(%699, dtype="int32") /* ty=Tensor[(11, 3, 10), int32] */;
  %701 = shape_of(%694, dtype="int32") /* ty=Tensor[(3), int32] */;
  %702 = cast(%694, dtype="int32") /* ty=Tensor[(11, 3, 10), int32] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %704 = cast(%var_4582, dtype="float64") /* ty=Tensor[(252), float64] */;
  %705 = reshape(%704, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float64] */;
  %706 = %692.1;
  %707 = multiply(%702, %703) /* ty=Tensor[(11, 3, 10), int32] */;
  %708 = @func_4195(%705) /* ty=Tensor[(3, 7, 12), uint64] */;
  (%706, %var_4560, %707, %708, %var_4582)
}

def @func_4143() -> (Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), float32]) {
  %709 = @func_2088() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %710 = @func_1857() /* ty=(Tensor[(3, 7, 12), float32], Tensor[(3, 7, 12), float64]) */;
  %711 = %709.0;
  %712 = %710.0;
  (%711, %712)
}

def @func_4839() -> (Tensor[(3, 7, 12), float32],) {
  %713 = @func_1996() /* ty=(Tensor[(3, 7, 12), float32],) */;
  %714 = %713.0;
  %715 = cast(%714, dtype="float32") /* ty=Tensor[(3, 7, 12), float32] */;
  %716 = sin(%715) /* ty=Tensor[(3, 7, 12), float32] */;
  (%716,)
}

def @func_2643(%var_2638: Tensor[(5, 12, 4), float64]) -> (Tensor[(3, 7, 12), float32], Tensor[(5, 12, 4), float32]) {
  %717 = @func_851() /* ty=(Tensor[(3, 7, 12), float32],) */;
  %718 = @func_1832() /* ty=(Tensor[(5, 12, 4), float64],) */;
  %719 = %718.0;
  %720 = cast(%var_2638, dtype="float32") /* ty=Tensor[(5, 12, 4), float32] */;
  %721 = shape_of(%719, dtype="int32") /* ty=Tensor[(3), int32] */;
  %722 = cast(%719, dtype="float32") /* ty=Tensor[(5, 12, 4), float32] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %724 = %717.0;
  %725 = power(%722, %723) /* ty=Tensor[(5, 12, 4), float32] */;
  (%724, %725)
}

def @func_4912() -> Tensor[(3, 7, 12), float64] {
  %726 = @func_3578() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %726.0
}

def @func_3067() -> (Tensor[(5, 3, 6), bool], Tensor[(3, 7, 12), float32]) {
  %727 = @func_1143() /* ty=(Tensor[(5, 3, 6), bool],) */;
  %728 = %727.0;
  %729 = @func_525() /* ty=Tensor[(3, 7, 12), float32] */;
  (%728, %729)
}

def @func_3578() -> (Tensor[(3, 7, 12), float64],) {
  %730 = @func_1175() /* ty=Tensor[(3, 7, 12), float64] */;
  (%730,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2766(%var_2744: Tensor[(4, 2, 6), int64], %var_2745: Tensor[(4, 2, 6), int64], %var_2760: Tensor[(4, 2, 6), int64]) -> (Tensor[(50), float32], Tensor[(4, 2, 6), bool]) {
  %0 = @func_1612() /* ty=(Tensor[(3, 7, 12), float64], Tensor[(5, 10), float64], Tensor[(50), float32]) */;
  %1 = cast(%var_2745, dtype="int64") /* ty=Tensor[(4, 2, 6), int64] */;
  %2 = shape_of(%var_2744, dtype="int32") /* ty=Tensor[(3), int32] */;
  %3 = cast(%var_2744, dtype="int64") /* ty=Tensor[(4, 2, 6), int64] */;
  %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %5 = minimum(%3, %4) /* ty=Tensor[(4, 2, 6), int64] */;
  %6 = cast(%var_2760, dtype="bool") /* ty=Tensor[(4, 2, 6), bool] */;
  %7 = shape_of(%5, dtype="int32") /* ty=Tensor[(3), int32] */;
  %8 = cast(%5, dtype="bool") /* ty=Tensor[(4, 2, 6), bool] */;
  %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %10 = %0.2;
  %11 = greater_equal(%8, %9) /* ty=Tensor[(4, 2, 6), bool] */;
  (%10, %11)
}

def @func_1326(%var_1325: Tensor[(768), int32]) -> (Tensor[(18, 100), uint32], Tensor[(2, 2, 6), bool], Tensor[(24), int16], Tensor[(8, 6, 16), int32], Tensor[(768), int32], Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), float32]) {
  %26 = fn (%var_1292: Tensor[(768), int32]) -> (Tensor[(18, 100), uint32], Tensor[(2, 2, 6), bool], Tensor[(24), int16], Tensor[(8, 6, 16), int32], Tensor[(768), int32], Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), float32]) {
    %12 = @func_692() /* ty=(Tensor[(5, 12, 4), float32], Tensor[(10, 15, 12), bool], Tensor[(18, 100), uint32]) */;
    %13 = cast(meta[relay.Constant][0] /* ty=Tensor[(24), int16] */, dtype="int16") /* ty=Tensor[(24), int16] */;
    %14 = reshape(%13, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), int16] */;
    %15 = cast(%var_1292, dtype="int32") /* ty=Tensor[(768), int32] */;
    %16 = cast(%var_1292, dtype="int32") /* ty=Tensor[(768), int32] */;
    %17 = reshape(%15, newshape=[8, 6, 16]) /* ty=Tensor[(8, 6, 16), int32] */;
    %18 = reshape(%16, newshape=[8, 6, 16]) /* ty=Tensor[(8, 6, 16), int32] */;
    %19 = @func_799() /* ty=(Tensor[(3, 7, 12), float64],) */;
    %20 = @func_851() /* ty=(Tensor[(3, 7, 12), float32],) */;
    %21 = %12.2;
    %22 = @func_1243(%14) /* ty=Tensor[(2, 2, 6), bool] */;
    %23 = @func_1208(%17, %18) /* ty=Tensor[(8, 6, 16), int32] */;
    %24 = %19.0;
    %25 = %20.0;
    (%21, %22, meta[relay.Constant][0] /* ty=Tensor[(24), int16] */, %23, %var_1292, %24, %25)
  };
  %26(%var_1325) /* ty=(Tensor[(18, 100), uint32], Tensor[(2, 2, 6), bool], Tensor[(24), int16], Tensor[(8, 6, 16), int32], Tensor[(768), int32], Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), float32]) */
}

def @func_5393(%var_5362: Tensor[(15, 10, 9), float64]) -> (Tensor[(15, 10, 9), float64], Tensor[(15, 10, 9), uint8], Tensor[(15, 10, 9), float64], Tensor[(15, 10, 9), bool]) {
  %27 = cast(4.2025f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %28 = cast(meta[relay.Constant][1] /* ty=Tensor[(15, 10, 9), float64] */, dtype="float64") /* ty=Tensor[(15, 10, 9), float64] */;
  %29 = cast(%var_5362, dtype="uint8") /* ty=Tensor[(15, 10, 9), uint8] */;
  %30 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(15, 10, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %31 = cast(meta[relay.Constant][1] /* ty=Tensor[(15, 10, 9), float64] */, dtype="uint8") /* ty=Tensor[(15, 10, 9), uint8] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %33 = cast(meta[relay.Constant][1] /* ty=Tensor[(15, 10, 9), float64] */, dtype="float64") /* ty=Tensor[(15, 10, 9), float64] */;
  %34 = log(%33) /* ty=Tensor[(15, 10, 9), float64] */;
  %35 = cast(meta[relay.Constant][2] /* ty=Tensor[(15, 10, 9), float64] */, dtype="float64") /* ty=Tensor[(15, 10, 9), float64] */;
  %36 = shape_of(%34, dtype="int32") /* ty=Tensor[(3), int32] */;
  %37 = cast(%34, dtype="float64") /* ty=Tensor[(15, 10, 9), float64] */;
  %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %39 = cast(%34, dtype="float32") /* ty=Tensor[(15, 10, 9), float32] */;
  %40 = acosh(%39) /* ty=Tensor[(15, 10, 9), float32] */;
  %41 = cast(%34, dtype="bool") /* ty=Tensor[(15, 10, 9), bool] */;
  %42 = shape_of(%40, dtype="int32") /* ty=Tensor[(3), int32] */;
  %43 = cast(%40, dtype="bool") /* ty=Tensor[(15, 10, 9), bool] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %45 = divide(%27, %28) /* ty=Tensor[(15, 10, 9), float64] */;
  %46 = bitwise_xor(%31, %32) /* ty=Tensor[(15, 10, 9), uint8] */;
  %47 = subtract(%37, %38) /* ty=Tensor[(15, 10, 9), float64] */;
  %48 = greater(%43, %44) /* ty=Tensor[(15, 10, 9), bool] */;
  (%45, %46, %47, %48)
}

def @func_525() -> Tensor[(3, 7, 12), float32] {
  %49 = @func_357() /* ty=(Tensor[(5, 12, 4), float32], Tensor[(3, 7, 12), float64]) */;
  %50 = %49.1;
  %51 = cast(%50, dtype="float32") /* ty=Tensor[(3, 7, 12), float32] */;
  acosh(%51) /* ty=Tensor[(3, 7, 12), float32] */
}

def @func_3421(%var_3420: Tensor[(2, 12, 7), int64]) -> (Tensor[(2, 12, 7), bool],) {
  %57 = fn (%var_3403: Tensor[(2, 12, 7), int64]) -> (Tensor[(2, 12, 7), bool],) {
    %52 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 12, 7), int64] */, dtype="bool") /* ty=Tensor[(2, 12, 7), bool] */;
    %53 = shape_of(%var_3403, dtype="int32") /* ty=Tensor[(3), int32] */;
    %54 = cast(%var_3403, dtype="bool") /* ty=Tensor[(2, 12, 7), bool] */;
    %55 = dyn.reshape(%52, %53, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %56 = greater_equal(%54, %55) /* ty=Tensor[(2, 12, 7), bool] */;
    (%56,)
  };
  %57(%var_3420) /* ty=(Tensor[(2, 12, 7), bool],) */
}

def @func_2231(%var_2229: Tensor[(5, 3, 6), bool]) -> (Tensor[(5, 12, 4), float32], Tensor[(5, 3, 6), int64], Tensor[(5, 12, 4), float64]) {
  @func_2228(%var_2229) /* ty=(Tensor[(5, 12, 4), float32], Tensor[(5, 3, 6), int64], Tensor[(5, 12, 4), float64]) */
}

def @func_109() -> (Tensor[(5, 12, 4), float32],) {
  %58 = cast(meta[relay.Constant][4] /* ty=Tensor[(5, 12, 4), float32] */, dtype="float32") /* ty=Tensor[(5, 12, 4), float32] */;
  %59 = tan(%58) /* ty=Tensor[(5, 12, 4), float32] */;
  (%59,)
}

def @func_837(%var_836: Tensor[(5, 10), float64]) -> Tensor[(5, 10), float64] {
  %61 = fn (%var_828: Tensor[(5, 10), float64]) -> Tensor[(5, 10), float64] {
    %60 = cast(%var_828, dtype="float64") /* ty=Tensor[(5, 10), float64] */;
    log(%60) /* ty=Tensor[(5, 10), float64] */
  };
  %61(%var_836) /* ty=Tensor[(5, 10), float64] */
}

def @func_2077(%var_2075: Tensor[(1, 1, 1), float64], %var_2076: Tensor[(1, 1800), uint32]) -> (Tensor[(1, 1, 1), float64], Tensor[(3, 7, 12), float32], Tensor[(10, 15, 12), bool], Tensor[(1, 1800), uint32]) {
  %69 = fn (%var_2060: Tensor[(1, 1, 1), float64], %var_2069: Tensor[(1, 1800), uint32]) -> (Tensor[(1, 1, 1), float64], Tensor[(3, 7, 12), float32], Tensor[(10, 15, 12), bool], Tensor[(1, 1800), uint32]) {
    %62 = cast(%var_2060, dtype="float64") /* ty=Tensor[(1, 1, 1), float64] */;
    %63 = cast(%var_2069, dtype="uint32") /* ty=Tensor[(1, 1800), uint32] */;
    %64 = reshape(%63, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint32] */;
    %65 = @func_554(%64) /* ty=(Tensor[(10, 15, 12), bool], Tensor[(5, 12, 4), float32]) */;
    %66 = tan(%62) /* ty=Tensor[(1, 1, 1), float64] */;
    %67 = @func_597() /* ty=Tensor[(3, 7, 12), float32] */;
    %68 = %65.0;
    (%66, %67, %68, %var_2069)
  };
  %69(%var_2075, %var_2076) /* ty=(Tensor[(1, 1, 1), float64], Tensor[(3, 7, 12), float32], Tensor[(10, 15, 12), bool], Tensor[(1, 1800), uint32]) */
}

def @func_987() -> (Tensor[(10, 15, 12), bool], Tensor[(5, 3, 6), bool], Tensor[(3, 7, 12), float32]) {
  %84 = fn () -> (Tensor[(10, 15, 12), bool], Tensor[(5, 3, 6), bool], Tensor[(3, 7, 12), float32]) {
    %70 = @func_692() /* ty=(Tensor[(5, 12, 4), float32], Tensor[(10, 15, 12), bool], Tensor[(18, 100), uint32]) */;
    %71 = cast(meta[relay.Constant][5] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
    %72 = cast(meta[relay.Constant][5] /* ty=Tensor[(90), float64] */, dtype="float32") /* ty=Tensor[(90), float32] */;
    %73 = reshape(%71, newshape=[5, 3, 6]) /* ty=Tensor[(5, 3, 6), float64] */;
    %74 = reshape(%72, newshape=[5, 3, 6]) /* ty=Tensor[(5, 3, 6), float32] */;
    %75 = @func_924(%73, %74) /* ty=(Tensor[(5, 3, 6), float32], Tensor[(18, 100), uint32], Tensor[(5, 3, 6), float64], Tensor[(5, 3, 6), float32], Tensor[(3, 7, 12), float64]) */;
    %76 = %75.2;
    %77 = cast(meta[relay.Constant][5] /* ty=Tensor[(90), float64] */, dtype="bool") /* ty=Tensor[(90), bool] */;
    %78 = shape_of(%76, dtype="int32") /* ty=Tensor[(3), int32] */;
    %79 = cast(%76, dtype="bool") /* ty=Tensor[(5, 3, 6), bool] */;
    %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %81 = %70.1;
    %82 = equal(%79, %80) /* ty=Tensor[(5, 3, 6), bool] */;
    %83 = @func_525() /* ty=Tensor[(3, 7, 12), float32] */;
    (%81, %82, %83)
  };
  %84() /* ty=(Tensor[(10, 15, 12), bool], Tensor[(5, 3, 6), bool], Tensor[(3, 7, 12), float32]) */
}

def @func_4596(%var_4592: Tensor[(11, 3, 10), uint64], %var_4593: Tensor[(11, 3, 10), uint64], %var_4594: Tensor[(63), float32], %var_4595: Tensor[(252), float64]) -> (Tensor[(9, 2, 7), bool], Tensor[(63), float32], Tensor[(11, 3, 10), int32], Tensor[(3, 7, 12), uint64], Tensor[(252), float64]) {
  %104 = fn (%var_4541: Tensor[(11, 3, 10), uint64], %var_4542: Tensor[(11, 3, 10), uint64], %var_4560: Tensor[(63), float32], %var_4582: Tensor[(252), float64]) -> (Tensor[(9, 2, 7), bool], Tensor[(63), float32], Tensor[(11, 3, 10), int32], Tensor[(3, 7, 12), uint64], Tensor[(252), float64]) {
    %85 = cast(%var_4560, dtype="float32") /* ty=Tensor[(63), float32] */;
    %86 = reshape(%85, newshape=[63, 1]) /* ty=Tensor[(63, 1), float32] */;
    %87 = @func_2789(%86) /* ty=(Tensor[(240), float32], Tensor[(9, 2, 7), bool], Tensor[(63, 1), float32]) */;
    %88 = cast(%var_4541, dtype="float64") /* ty=Tensor[(11, 3, 10), float64] */;
    %89 = sqrt(%88) /* ty=Tensor[(11, 3, 10), float64] */;
    %90 = cast(%var_4542, dtype="uint64") /* ty=Tensor[(11, 3, 10), uint64] */;
    %91 = shape_of(%var_4541, dtype="int32") /* ty=Tensor[(3), int32] */;
    %92 = cast(%var_4541, dtype="uint64") /* ty=Tensor[(11, 3, 10), uint64] */;
    %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %94 = logical_xor(%92, %93) /* ty=Tensor[(11, 3, 10), uint64] */;
    %95 = cast(%94, dtype="int32") /* ty=Tensor[(11, 3, 10), int32] */;
    %96 = shape_of(%89, dtype="int32") /* ty=Tensor[(3), int32] */;
    %97 = cast(%89, dtype="int32") /* ty=Tensor[(11, 3, 10), int32] */;
    %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %99 = cast(%var_4582, dtype="float64") /* ty=Tensor[(252), float64] */;
    %100 = reshape(%99, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float64] */;
    %101 = %87.1;
    %102 = multiply(%97, %98) /* ty=Tensor[(11, 3, 10), int32] */;
    %103 = @func_4195(%100) /* ty=Tensor[(3, 7, 12), uint64] */;
    (%101, %var_4560, %102, %103, %var_4582)
  };
  %104(%var_4592, %var_4593, %var_4594, %var_4595) /* ty=(Tensor[(9, 2, 7), bool], Tensor[(63), float32], Tensor[(11, 3, 10), int32], Tensor[(3, 7, 12), uint64], Tensor[(252), float64]) */
}

def @func_3580() -> (Tensor[(3, 7, 12), float64],) {
  @func_3578() /* ty=(Tensor[(3, 7, 12), float64],) */
}

def @func_4872(%var_4871: Tensor[(280, 1), uint32]) -> (Tensor[(3, 7, 12), uint16], Tensor[(280, ?), float64]) {
  %117 = fn (%var_4861: Tensor[(280, 1), uint32]) -> (Tensor[(3, 7, 12), uint16], Tensor[(280, ?), float64]) {
    %105 = @func_4458() /* ty=(Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), uint16], Tensor[(3, 7, 12), int16], Tensor[(5, 10), float64], Tensor[(50), float64]) */;
    %106 = cast(%var_4861, dtype="uint32") /* ty=Tensor[(280, 1), uint32] */;
    %107 = cast(%var_4861, dtype="uint32") /* ty=Tensor[(280, 1), uint32] */;
    %108 = reshape(%106, newshape=[14, 10, 2]) /* ty=Tensor[(14, 10, 2), uint32] */;
    %109 = reshape(%107, newshape=[14, 10, 2]) /* ty=Tensor[(14, 10, 2), uint32] */;
    %110 = @func_2294(%108, %109) /* ty=Tensor[(14, 10, 2), bool] */;
    %111 = cast(%110, dtype="float64") /* ty=Tensor[(14, 10, 2), float64] */;
    %112 = shape_of(%var_4861, dtype="int32") /* ty=Tensor[(2), int32] */;
    %113 = cast(%var_4861, dtype="float64") /* ty=Tensor[(280, 1), float64] */;
    %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %115 = %105.1;
    %116 = divide(%113, %114) /* ty=Tensor[(280, ?), float64] */;
    (%115, %116)
  };
  %117(%var_4871) /* ty=(Tensor[(3, 7, 12), uint16], Tensor[(280, ?), float64]) */
}

def @func_5223(%var_5220: float64, %var_5221: Tensor[(12, 15, 10), float64], %var_5222: Tensor[(768), int32]) -> (Tensor[(12, 15, 10), float64], Tensor[(12, 15, 10), uint8], Tensor[(3, 7, 12), float64], Tensor[(12, 15, 10), bool], Tensor[(8, 6, 16), int32], Tensor[(768), int32], Tensor[(5, 3, 6), bool]) {
  %142 = fn (%var_5174: float64, %var_5189: Tensor[(12, 15, 10), float64], %var_5208: Tensor[(768), int32]) -> (Tensor[(12, 15, 10), float64], Tensor[(12, 15, 10), uint8], Tensor[(3, 7, 12), float64], Tensor[(12, 15, 10), bool], Tensor[(8, 6, 16), int32], Tensor[(768), int32], Tensor[(5, 3, 6), bool]) {
    %118 = cast(%var_5174, dtype="float64") /* ty=float64 */;
    %119 = cast(meta[relay.Constant][6] /* ty=Tensor[(12, 15, 10), float64] */, dtype="float64") /* ty=Tensor[(12, 15, 10), float64] */;
    %120 = cast(%var_5189, dtype="uint8") /* ty=Tensor[(12, 15, 10), uint8] */;
    %121 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(12, 15, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %122 = cast(meta[relay.Constant][6] /* ty=Tensor[(12, 15, 10), float64] */, dtype="uint8") /* ty=Tensor[(12, 15, 10), uint8] */;
    %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %124 = @func_339() /* ty=(Tensor[(3, 7, 12), float64],) */;
    %125 = cast(%var_5189, dtype="float64") /* ty=Tensor[(12, 15, 10), float64] */;
    %126 = asinh(%125) /* ty=Tensor[(12, 15, 10), float64] */;
    %127 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 15, 10), float64] */, dtype="bool") /* ty=Tensor[(12, 15, 10), bool] */;
    %128 = shape_of(%126, dtype="int32") /* ty=Tensor[(3), int32] */;
    %129 = cast(%126, dtype="bool") /* ty=Tensor[(12, 15, 10), bool] */;
    %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %131 = cast(%var_5208, dtype="int32") /* ty=Tensor[(768), int32] */;
    %132 = cast(%var_5208, dtype="int32") /* ty=Tensor[(768), int32] */;
    %133 = reshape(%131, newshape=[8, 6, 16]) /* ty=Tensor[(8, 6, 16), int32] */;
    %134 = reshape(%132, newshape=[8, 6, 16]) /* ty=Tensor[(8, 6, 16), int32] */;
    %135 = @func_1143() /* ty=(Tensor[(5, 3, 6), bool],) */;
    %136 = power(%118, %119) /* ty=Tensor[(12, 15, 10), float64] */;
    %137 = bitwise_xor(%122, %123) /* ty=Tensor[(12, 15, 10), uint8] */;
    %138 = %124.0;
    %139 = less_equal(%129, %130) /* ty=Tensor[(12, 15, 10), bool] */;
    %140 = @func_1208(%133, %134) /* ty=Tensor[(8, 6, 16), int32] */;
    %141 = %135.0;
    (%136, %137, %138, %139, %140, %var_5208, %141)
  };
  %142(%var_5220, %var_5221, %var_5222) /* ty=(Tensor[(12, 15, 10), float64], Tensor[(12, 15, 10), uint8], Tensor[(3, 7, 12), float64], Tensor[(12, 15, 10), bool], Tensor[(8, 6, 16), int32], Tensor[(768), int32], Tensor[(5, 3, 6), bool]) */
}

def @func_3673() -> (Tensor[(3, 7, 12), float64], Tensor[(5, 12, 4), float32], Tensor[(5, 12, 4), bool]) {
  @func_3671() /* ty=(Tensor[(3, 7, 12), float64], Tensor[(5, 12, 4), float32], Tensor[(5, 12, 4), bool]) */
}

def @func_5446(%var_5420: Tensor[(240), float32]) -> (Tensor[(3, 7, 12), float64], Tensor[(240), float32], Tensor[(5, 12, 4), float64]) {
  %143 = @func_5033() /* ty=(Tensor[(3, 7, 12), float32], Tensor[(3, 7, 12), float64]) */;
  %144 = cast(%var_5420, dtype="float32") /* ty=Tensor[(240), float32] */;
  %145 = reshape(%144, newshape=[5, 12, 4]) /* ty=Tensor[(5, 12, 4), float32] */;
  %146 = @func_208(%145) /* ty=(Tensor[(5, 12, 4), float32], Tensor[(5, 12, 4), float64]) */;
  %147 = %146.0;
  %148 = cast(%147, dtype="float64") /* ty=Tensor[(5, 12, 4), float64] */;
  %149 = %143.1;
  %150 = acosh(%148) /* ty=Tensor[(5, 12, 4), float64] */;
  (%149, %var_5420, %150)
}

def @func_5570() -> Tensor[(3, 7, 12), float32] {
  @func_5568() /* ty=Tensor[(3, 7, 12), float32] */
}

def @func_1275() -> Tensor[(3, 7, 12), float64] {
  %151 = @func_799() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %151.0
}

def @func_111() -> (Tensor[(5, 12, 4), float32],) {
  @func_109() /* ty=(Tensor[(5, 12, 4), float32],) */
}

def @func_3186() -> (Tensor[(3, 7, 12), float64],) {
  %152 = @func_339() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %153 = %152.0;
  (%153,)
}

def @func_3375(%var_3337: Tensor[(3, 7, 12), float32]) -> (Tensor[(3, 7, 12), uint64], Tensor[(3, 7, 12), uint16], Tensor[(3, 7, 12), float32]) {
  %154 = @func_525() /* ty=Tensor[(3, 7, 12), float32] */;
  %155 = cast(%var_3337, dtype="uint64") /* ty=Tensor[(3, 7, 12), uint64] */;
  %156 = shape_of(%154, dtype="int32") /* ty=Tensor[(3), int32] */;
  %157 = cast(%154, dtype="uint64") /* ty=Tensor[(3, 7, 12), uint64] */;
  %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %159 = cast(%154, dtype="uint16") /* ty=Tensor[(3, 7, 12), uint16] */;
  %160 = shape_of(%var_3337, dtype="int32") /* ty=Tensor[(3), int32] */;
  %161 = cast(%var_3337, dtype="uint16") /* ty=Tensor[(3, 7, 12), uint16] */;
  %162 = dyn.reshape(%159, %160, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %163 = logical_xor(%157, %158) /* ty=Tensor[(3, 7, 12), uint64] */;
  %164 = bitwise_and(%161, %162) /* ty=Tensor[(3, 7, 12), uint16] */;
  %165 = @func_2713() /* ty=Tensor[(3, 7, 12), float32] */;
  (%163, %164, %165)
}

def @func_4272(%var_4221: Tensor[(5, 3, 6), float64], %var_4243: Tensor[(702), float32]) -> (Tensor[(5, 3, 6), uint32], Tensor[(6, 13, 9), float64], Tensor[(702), float32], Tensor[(1800), uint32], Tensor[(10, 15, 12), float64], Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), float64]) {
  %166 = @func_1654() /* ty=(Tensor[(5, 3, 6), bool],) */;
  %167 = %166.0;
  %168 = cast(%167, dtype="float64") /* ty=Tensor[(5, 3, 6), float64] */;
  %169 = exp(%168) /* ty=Tensor[(5, 3, 6), float64] */;
  %170 = cast(%var_4221, dtype="uint32") /* ty=Tensor[(5, 3, 6), uint32] */;
  %171 = shape_of(%169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %172 = cast(%169, dtype="uint32") /* ty=Tensor[(5, 3, 6), uint32] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %174 = cast(%var_4243, dtype="float32") /* ty=Tensor[(702), float32] */;
  %175 = reshape(%174, newshape=[6, 13, 9]) /* ty=Tensor[(6, 13, 9), float32] */;
  %176 = @func_3312(%175) /* ty=(Tensor[(6, 13, 9), float64],) */;
  %177 = cast(meta[relay.Constant][8] /* ty=Tensor[(1800), uint32] */, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %178 = reshape(%177, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint32] */;
  %179 = @func_554(%178) /* ty=(Tensor[(10, 15, 12), bool], Tensor[(5, 12, 4), float32]) */;
  %180 = %179.0;
  %181 = cast(%180, dtype="float64") /* ty=Tensor[(10, 15, 12), float64] */;
  %182 = @func_4078() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %183 = %182.0;
  %184 = cast(%183, dtype="float64") /* ty=Tensor[(3, 7, 12), float64] */;
  %185 = @func_3578() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %186 = left_shift(%172, %173) /* ty=Tensor[(5, 3, 6), uint32] */;
  %187 = %176.0;
  %188 = sigmoid(%181) /* ty=Tensor[(10, 15, 12), float64] */;
  %189 = atan(%184) /* ty=Tensor[(3, 7, 12), float64] */;
  %190 = %185.0;
  (%186, %187, %var_4243, meta[relay.Constant][8] /* ty=Tensor[(1800), uint32] */, %188, %189, %190)
}

def @func_1834() -> (Tensor[(5, 12, 4), float64],) {
  @func_1832() /* ty=(Tensor[(5, 12, 4), float64],) */
}

def @func_2141(%var_2140: Tensor[(5, 12, 4), float32]) -> (Tensor[(5, 12, 4), int16], Tensor[(3, 7, 12), float32]) {
  %204 = fn (%var_2105: Tensor[(5, 12, 4), float32]) -> (Tensor[(5, 12, 4), int16], Tensor[(3, 7, 12), float32]) {
    %191 = @func_1569() /* ty=(Tensor[(10, 15, 12), float64], Tensor[(5, 12, 4), bool], Tensor[(240), float32]) */;
    %192 = %191.1;
    %193 = cast(%192, dtype="float32") /* ty=Tensor[(5, 12, 4), float32] */;
    %194 = sinh(%193) /* ty=Tensor[(5, 12, 4), float32] */;
    %195 = cast(%194, dtype="float32") /* ty=Tensor[(5, 12, 4), float32] */;
    %196 = erf(%195) /* ty=Tensor[(5, 12, 4), float32] */;
    %197 = cast(%var_2105, dtype="int16") /* ty=Tensor[(5, 12, 4), int16] */;
    %198 = shape_of(%196, dtype="int32") /* ty=Tensor[(3), int32] */;
    %199 = cast(%196, dtype="int16") /* ty=Tensor[(5, 12, 4), int16] */;
    %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %201 = @func_1996() /* ty=(Tensor[(3, 7, 12), float32],) */;
    %202 = bitwise_xor(%199, %200) /* ty=Tensor[(5, 12, 4), int16] */;
    %203 = %201.0;
    (%202, %203)
  };
  %204(%var_2140) /* ty=(Tensor[(5, 12, 4), int16], Tensor[(3, 7, 12), float32]) */
}

def @func_2168() -> (Tensor[(3, 7, 12), float64],) {
  %206 = fn () -> (Tensor[(3, 7, 12), float64],) {
    %205 = @func_1963() /* ty=Tensor[(3, 7, 12), float64] */;
    (%205,)
  };
  %206() /* ty=(Tensor[(3, 7, 12), float64],) */
}

def @func_1245(%var_1244: Tensor[(2, 2, 6), int16]) -> Tensor[(2, 2, 6), bool] {
  %209 = fn (%var_1230: Tensor[(2, 2, 6), int16]) -> Tensor[(2, 2, 6), bool] {
    %207 = cast(meta[relay.Constant][9] /* ty=int16 */, dtype="bool") /* ty=bool */;
    %208 = cast(%var_1230, dtype="bool") /* ty=Tensor[(2, 2, 6), bool] */;
    greater_equal(%207, %208) /* ty=Tensor[(2, 2, 6), bool] */
  };
  %209(%var_1244) /* ty=Tensor[(2, 2, 6), bool] */
}

def @func_1998() -> (Tensor[(3, 7, 12), float32],) {
  @func_1996() /* ty=(Tensor[(3, 7, 12), float32],) */
}

def @func_4912() -> Tensor[(3, 7, 12), float64] {
  %210 = @func_3578() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %210.0
}

def @func_2468(%var_2441: Tensor[(9, 1, 7), float32]) -> (Tensor[(3, 7, 12), float64], Tensor[(9, 2, 7), bool]) {
  %211 = @func_339() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %212 = cast(%var_2441, dtype="float32") /* ty=Tensor[(9, 1, 7), float32] */;
  %213 = erf(%212) /* ty=Tensor[(9, 1, 7), float32] */;
  %214 = cast(%213, dtype="bool") /* ty=Tensor[(9, 1, 7), bool] */;
  %215 = cast(meta[relay.Constant][10] /* ty=Tensor[(9, 2, 7), float32] */, dtype="bool") /* ty=Tensor[(9, 2, 7), bool] */;
  %216 = %211.0;
  %217 = greater(%214, %215) /* ty=Tensor[(9, 2, 7), bool] */;
  (%216, %217)
}

def @func_3067() -> (Tensor[(5, 3, 6), bool], Tensor[(3, 7, 12), float32]) {
  %218 = @func_1143() /* ty=(Tensor[(5, 3, 6), bool],) */;
  %219 = %218.0;
  %220 = @func_525() /* ty=Tensor[(3, 7, 12), float32] */;
  (%219, %220)
}

def @func_359() -> (Tensor[(5, 12, 4), float32], Tensor[(3, 7, 12), float64]) {
  @func_357() /* ty=(Tensor[(5, 12, 4), float32], Tensor[(3, 7, 12), float64]) */
}

def @func_357() -> (Tensor[(5, 12, 4), float32], Tensor[(3, 7, 12), float64]) {
  %221 = @func_109() /* ty=(Tensor[(5, 12, 4), float32],) */;
  %222 = @func_339() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %223 = %221.0;
  %224 = %222.0;
  (%223, %224)
}

def @func_2877(%var_2875: Tensor[(1, 264), float32]) -> (Tensor[(3, 7, 12), float64], Tensor[(5, 12, 4), float32], Tensor[(1800), uint32], Tensor[(6, 11, 4), float32], Tensor[(1, 264), float32], Tensor[(24), int16], Tensor[(768), int32], Tensor[(5, 3, 6), bool]) {
  @func_2874(%var_2875) /* ty=(Tensor[(3, 7, 12), float64], Tensor[(5, 12, 4), float32], Tensor[(1800), uint32], Tensor[(6, 11, 4), float32], Tensor[(1, 264), float32], Tensor[(24), int16], Tensor[(768), int32], Tensor[(5, 3, 6), bool]) */
}

def @func_1570() -> (Tensor[(10, 15, 12), float64], Tensor[(5, 12, 4), bool], Tensor[(240), float32]) {
  %239 = fn () -> (Tensor[(10, 15, 12), float64], Tensor[(5, 12, 4), bool], Tensor[(240), float32]) {
    %225 = @func_692() /* ty=(Tensor[(5, 12, 4), float32], Tensor[(10, 15, 12), bool], Tensor[(18, 100), uint32]) */;
    %226 = %225.1;
    %227 = cast(%226, dtype="uint32") /* ty=Tensor[(10, 15, 12), uint32] */;
    %228 = reshape(%227, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint32] */;
    %229 = @func_554(%228) /* ty=(Tensor[(10, 15, 12), bool], Tensor[(5, 12, 4), float32]) */;
    %230 = %229.0;
    %231 = cast(%226, dtype="float64") /* ty=Tensor[(10, 15, 12), float64] */;
    %232 = shape_of(%230, dtype="int32") /* ty=Tensor[(3), int32] */;
    %233 = cast(%230, dtype="float64") /* ty=Tensor[(10, 15, 12), float64] */;
    %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %235 = @func_1440() /* ty=(Tensor[(5, 12, 4), bool], Tensor[(240), float32], Tensor[(5, 12, 4), float32]) */;
    %236 = power(%233, %234) /* ty=Tensor[(10, 15, 12), float64] */;
    %237 = %235.0;
    %238 = @func_1225() /* ty=Tensor[(240), float32] */;
    (%236, %237, %238)
  };
  %239() /* ty=(Tensor[(10, 15, 12), float64], Tensor[(5, 12, 4), bool], Tensor[(240), float32]) */
}

def @func_2088() -> (Tensor[(3, 7, 12), float64],) {
  %240 = @func_1175() /* ty=Tensor[(3, 7, 12), float64] */;
  (%240,)
}

def @func_4143() -> (Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), float32]) {
  %241 = @func_2088() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %242 = @func_1857() /* ty=(Tensor[(3, 7, 12), float32], Tensor[(3, 7, 12), float64]) */;
  %243 = %241.0;
  %244 = %242.0;
  (%243, %244)
}

def @func_3447() -> (Tensor[(3, 7, 12), float32],) {
  @func_3445() /* ty=(Tensor[(3, 7, 12), float32],) */
}

def @func_3517() -> (Tensor[(3, 7, 12), float32],) {
  %245 = @func_2713() /* ty=Tensor[(3, 7, 12), float32] */;
  (%245,)
}

def @func_4197(%var_4196: Tensor[(3, 7, 12), float64]) -> Tensor[(3, 7, 12), uint64] {
  %252 = fn (%var_4183: Tensor[(3, 7, 12), float64]) -> Tensor[(3, 7, 12), uint64] {
    %246 = @func_1612() /* ty=(Tensor[(3, 7, 12), float64], Tensor[(5, 10), float64], Tensor[(50), float32]) */;
    %247 = %246.0;
    %248 = cast(%var_4183, dtype="uint64") /* ty=Tensor[(3, 7, 12), uint64] */;
    %249 = shape_of(%247, dtype="int32") /* ty=Tensor[(3), int32] */;
    %250 = cast(%247, dtype="uint64") /* ty=Tensor[(3, 7, 12), uint64] */;
    %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    bitwise_xor(%250, %251) /* ty=Tensor[(3, 7, 12), uint64] */
  };
  %252(%var_4196) /* ty=Tensor[(3, 7, 12), uint64] */
}

def @func_3781() -> (Tensor[(3, 7, 12), float32], Tensor[(5, 3, 6), bool]) {
  %259 = fn () -> (Tensor[(3, 7, 12), float32], Tensor[(5, 3, 6), bool]) {
    %253 = @func_2167() /* ty=(Tensor[(3, 7, 12), float64],) */;
    %254 = %253.0;
    %255 = cast(%254, dtype="float32") /* ty=Tensor[(3, 7, 12), float32] */;
    %256 = @func_1254() /* ty=(Tensor[(5, 3, 6), bool],) */;
    %257 = asinh(%255) /* ty=Tensor[(3, 7, 12), float32] */;
    %258 = %256.0;
    (%257, %258)
  };
  %259() /* ty=(Tensor[(3, 7, 12), float32], Tensor[(5, 3, 6), bool]) */
}

def @func_5396(%var_5394: Tensor[(15, 10, 9), float64]) -> (Tensor[(15, 10, 9), float64], Tensor[(15, 10, 9), uint8], Tensor[(15, 10, 9), float64], Tensor[(15, 10, 9), bool]) {
  @func_5393(%var_5394) /* ty=(Tensor[(15, 10, 9), float64], Tensor[(15, 10, 9), uint8], Tensor[(15, 10, 9), float64], Tensor[(15, 10, 9), bool]) */
}

def @func_4895() -> (Tensor[(5, 3, 6), bool],) {
  %262 = fn () -> (Tensor[(5, 3, 6), bool],) {
    %260 = @func_3780() /* ty=(Tensor[(3, 7, 12), float32], Tensor[(5, 3, 6), bool]) */;
    %261 = %260.1;
    (%261,)
  };
  %262() /* ty=(Tensor[(5, 3, 6), bool],) */
}

def @func_5034() -> (Tensor[(3, 7, 12), float32], Tensor[(3, 7, 12), float64]) {
  %267 = fn () -> (Tensor[(3, 7, 12), float32], Tensor[(3, 7, 12), float64]) {
    %263 = @func_3149() /* ty=(Tensor[(3, 7, 12), float32],) */;
    %264 = @func_4143() /* ty=(Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), float32]) */;
    %265 = %263.0;
    %266 = %264.0;
    (%265, %266)
  };
  %267() /* ty=(Tensor[(3, 7, 12), float32], Tensor[(3, 7, 12), float64]) */
}

def @func_1176() -> Tensor[(3, 7, 12), float64] {
  %269 = fn () -> Tensor[(3, 7, 12), float64] {
    %268 = @func_799() /* ty=(Tensor[(3, 7, 12), float64],) */;
    %268.0
  };
  %269() /* ty=Tensor[(3, 7, 12), float64] */
}

def @func_5003(%var_5002: Tensor[(5, 12, 4), float32]) -> (Tensor[(3, 7, 12), float32], Tensor[(5, 12, 4), int16], Tensor[(3, 7, 12), float32]) {
  %281 = fn (%var_4989: Tensor[(5, 12, 4), float32]) -> (Tensor[(3, 7, 12), float32], Tensor[(5, 12, 4), int16], Tensor[(3, 7, 12), float32]) {
    %270 = @func_3517() /* ty=(Tensor[(3, 7, 12), float32],) */;
    %271 = @func_109() /* ty=(Tensor[(5, 12, 4), float32],) */;
    %272 = %271.0;
    %273 = cast(%var_4989, dtype="int16") /* ty=Tensor[(5, 12, 4), int16] */;
    %274 = shape_of(%272, dtype="int32") /* ty=Tensor[(3), int32] */;
    %275 = cast(%272, dtype="int16") /* ty=Tensor[(5, 12, 4), int16] */;
    %276 = dyn.reshape(%273, %274, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %277 = @func_1028() /* ty=(Tensor[(3, 7, 12), float32],) */;
    %278 = %270.0;
    %279 = maximum(%275, %276) /* ty=Tensor[(5, 12, 4), int16] */;
    %280 = %277.0;
    (%278, %279, %280)
  };
  %281(%var_5002) /* ty=(Tensor[(3, 7, 12), float32], Tensor[(5, 12, 4), int16], Tensor[(3, 7, 12), float32]) */
}

def @func_1941(%var_1940: Tensor[(3, 7, 12), float64]) -> (Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), bool], Tensor[(6, 11, 4), float32], Tensor[(3, 7, 12), float32], Tensor[(10, 15, 12), bool], Tensor[(3, 7, 12), float32], Tensor[(3, 7, 12), float64]) {
  %312 = fn (%var_1888: Tensor[(3, 7, 12), float64]) -> (Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), bool], Tensor[(6, 11, 4), float32], Tensor[(3, 7, 12), float32], Tensor[(10, 15, 12), bool], Tensor[(3, 7, 12), float32], Tensor[(3, 7, 12), float64]) {
    %282 = @func_1451() /* ty=(Tensor[(5, 12, 4), bool], Tensor[(3, 7, 12), float64]) */;
    %283 = %282.1;
    %284 = cast(%var_1888, dtype="float64") /* ty=Tensor[(3, 7, 12), float64] */;
    %285 = shape_of(%283, dtype="int32") /* ty=Tensor[(3), int32] */;
    %286 = cast(%283, dtype="float64") /* ty=Tensor[(3, 7, 12), float64] */;
    %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %288 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 7, 12), float64] */, dtype="bool") /* ty=Tensor[(3, 7, 12), bool] */;
    %289 = shape_of(%var_1888, dtype="int32") /* ty=Tensor[(3), int32] */;
    %290 = cast(%var_1888, dtype="bool") /* ty=Tensor[(3, 7, 12), bool] */;
    %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %292 = floor_mod(%286, %287) /* ty=Tensor[(3, 7, 12), float64] */;
    %293 = cast(%292, dtype="float32") /* ty=Tensor[(3, 7, 12), float32] */;
    %294 = cast(%283, dtype="float32") /* ty=Tensor[(3, 7, 12), float32] */;
    %295 = cast(%283, dtype="bool") /* ty=Tensor[(3, 7, 12), bool] */;
    %296 = less(%290, %291) /* ty=Tensor[(3, 7, 12), bool] */;
    %297 = cast(%296, dtype="float32") /* ty=Tensor[(3, 7, 12), float32] */;
    %298 = reshape(%293, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float32] */;
    %299 = reshape(%294, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float32] */;
    %300 = reshape(%295, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), bool] */;
    %301 = reshape(%297, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float32] */;
    %302 = @func_769(%298, %299, %300, %301) /* ty=(Tensor[(6, 11, 4), float32], Tensor[(264), float32], Tensor[(3, 7, 12), uint16], Tensor[(3, 7, 12), bool]) */;
    %303 = @func_1028() /* ty=(Tensor[(3, 7, 12), float32],) */;
    %304 = @func_692() /* ty=(Tensor[(5, 12, 4), float32], Tensor[(10, 15, 12), bool], Tensor[(18, 100), uint32]) */;
    %305 = @func_851() /* ty=(Tensor[(3, 7, 12), float32],) */;
    %306 = @func_799() /* ty=(Tensor[(3, 7, 12), float64],) */;
    %307 = %302.0;
    %308 = %303.0;
    %309 = %304.1;
    %310 = %305.0;
    %311 = %306.0;
    (%292, %296, %307, %308, %309, %310, %311)
  };
  %312(%var_1940) /* ty=(Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), bool], Tensor[(6, 11, 4), float32], Tensor[(3, 7, 12), float32], Tensor[(10, 15, 12), bool], Tensor[(3, 7, 12), float32], Tensor[(3, 7, 12), float64]) */
}

def @func_210(%var_209: Tensor[(5, 12, 4), float32]) -> (Tensor[(5, 12, 4), float32], Tensor[(5, 12, 4), float64]) {
  %325 = fn (%var_194: Tensor[(5, 12, 4), float32]) -> (Tensor[(5, 12, 4), float32], Tensor[(5, 12, 4), float64]) {
    %313 = @func_109() /* ty=(Tensor[(5, 12, 4), float32],) */;
    %314 = %313.0;
    %315 = cast(%var_194, dtype="float32") /* ty=Tensor[(5, 12, 4), float32] */;
    %316 = shape_of(%314, dtype="int32") /* ty=Tensor[(3), int32] */;
    %317 = cast(%314, dtype="float32") /* ty=Tensor[(5, 12, 4), float32] */;
    %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %319 = cast(%var_194, dtype="float64") /* ty=Tensor[(5, 12, 4), float64] */;
    %320 = shape_of(%314, dtype="int32") /* ty=Tensor[(3), int32] */;
    %321 = cast(%314, dtype="float64") /* ty=Tensor[(5, 12, 4), float64] */;
    %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %323 = floor_divide(%317, %318) /* ty=Tensor[(5, 12, 4), float32] */;
    %324 = multiply(%321, %322) /* ty=Tensor[(5, 12, 4), float64] */;
    (%323, %324)
  };
  %325(%var_209) /* ty=(Tensor[(5, 12, 4), float32], Tensor[(5, 12, 4), float64]) */
}

def @func_2298(%var_2296: Tensor[(14, 10, 2), uint32], %var_2297: Tensor[(14, 10, 2), uint32]) -> Tensor[(14, 10, 2), bool] {
  @func_2294(%var_2296, %var_2297) /* ty=Tensor[(14, 10, 2), bool] */
}

def @func_4914() -> Tensor[(3, 7, 12), float64] {
  @func_4912() /* ty=Tensor[(3, 7, 12), float64] */
}

def @func_2713() -> Tensor[(3, 7, 12), float32] {
  %326 = @func_986() /* ty=(Tensor[(10, 15, 12), bool], Tensor[(5, 3, 6), bool], Tensor[(3, 7, 12), float32]) */;
  %326.2
}

def @func_4646(%var_4644: Tensor[(768), int32]) -> (Tensor[(3, 7, 12), float32], Tensor[(768), int32], Tensor[(8, 6, 16), float32]) {
  @func_4643(%var_4644) /* ty=(Tensor[(3, 7, 12), float32], Tensor[(768), int32], Tensor[(8, 6, 16), float32]) */
}

def @func_4079() -> (Tensor[(3, 7, 12), float64],) {
  %328 = fn () -> (Tensor[(3, 7, 12), float64],) {
    %327 = @func_1175() /* ty=Tensor[(3, 7, 12), float64] */;
    (%327,)
  };
  %328() /* ty=(Tensor[(3, 7, 12), float64],) */
}

def @func_4643(%var_4626: Tensor[(768), int32]) -> (Tensor[(3, 7, 12), float32], Tensor[(768), int32], Tensor[(8, 6, 16), float32]) {
  %329 = @func_3517() /* ty=(Tensor[(3, 7, 12), float32],) */;
  %330 = cast(%var_4626, dtype="int32") /* ty=Tensor[(768), int32] */;
  %331 = cast(%var_4626, dtype="int32") /* ty=Tensor[(768), int32] */;
  %332 = reshape(%330, newshape=[8, 6, 16]) /* ty=Tensor[(8, 6, 16), int32] */;
  %333 = reshape(%331, newshape=[8, 6, 16]) /* ty=Tensor[(8, 6, 16), int32] */;
  %334 = @func_1208(%332, %333) /* ty=Tensor[(8, 6, 16), int32] */;
  %335 = cast(%334, dtype="float32") /* ty=Tensor[(8, 6, 16), float32] */;
  %336 = %329.0;
  %337 = sin(%335) /* ty=Tensor[(8, 6, 16), float32] */;
  (%336, %var_4626, %337)
}

def @func_3110(%var_3109: Tensor[(5, 3, 6), bool]) -> Tensor[(5, 3, 6), int8] {
  %344 = fn (%var_3103: Tensor[(5, 3, 6), bool]) -> Tensor[(5, 3, 6), int8] {
    %338 = @func_1254() /* ty=(Tensor[(5, 3, 6), bool],) */;
    %339 = %338.0;
    %340 = cast(%var_3103, dtype="int8") /* ty=Tensor[(5, 3, 6), int8] */;
    %341 = shape_of(%339, dtype="int32") /* ty=Tensor[(3), int32] */;
    %342 = cast(%339, dtype="int8") /* ty=Tensor[(5, 3, 6), int8] */;
    %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    right_shift(%342, %343) /* ty=Tensor[(5, 3, 6), int8] */
  };
  %344(%var_3109) /* ty=Tensor[(5, 3, 6), int8] */
}

def @func_4538() -> (Tensor[(3, 7, 12), float32], Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), uint64]) {
  %345 = @func_1857() /* ty=(Tensor[(3, 7, 12), float32], Tensor[(3, 7, 12), float64]) */;
  %346 = @func_799() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %347 = %345.0;
  %348 = cast(%347, dtype="float32") /* ty=Tensor[(3, 7, 12), float32] */;
  %349 = reshape(%348, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float32] */;
  %350 = @func_3375(%349) /* ty=(Tensor[(3, 7, 12), uint64], Tensor[(3, 7, 12), uint16], Tensor[(3, 7, 12), float32]) */;
  %351 = %346.0;
  %352 = %350.0;
  (%347, %351, %352)
}

def @func_1832() -> (Tensor[(5, 12, 4), float64],) {
  %353 = @func_1020() /* ty=(Tensor[(5, 12, 4), float64], Tensor[(240), float32], Tensor[(5, 12, 4), float64], Tensor[(2, 4, 15), float64]) */;
  %354 = %353.2;
  (%354,)
}

def @func_2676() -> Tensor[(5, 3, 6), bool] {
  %355 = @func_1654() /* ty=(Tensor[(5, 3, 6), bool],) */;
  %355.0
}

def @func_3498() -> (Tensor[(3, 7, 12), float64],) {
  %356 = @func_2088() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %357 = %356.0;
  %358 = cast(%357, dtype="float64") /* ty=Tensor[(3, 7, 12), float64] */;
  %359 = cosh(%358) /* ty=Tensor[(3, 7, 12), float64] */;
  (%359,)
}

def @func_3718() -> (Tensor[(5, 12, 4), float64],) {
  @func_3716() /* ty=(Tensor[(5, 12, 4), float64],) */
}

def @func_598() -> Tensor[(3, 7, 12), float32] {
  %360 = fn () -> Tensor[(3, 7, 12), float32] {
    @func_525() /* ty=Tensor[(3, 7, 12), float32] */
  };
  %360() /* ty=Tensor[(3, 7, 12), float32] */
}

def @func_4145() -> (Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), float32]) {
  @func_4143() /* ty=(Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), float32]) */
}

def @func_4276(%var_4274: Tensor[(5, 3, 6), float64], %var_4275: Tensor[(702), float32]) -> (Tensor[(5, 3, 6), uint32], Tensor[(6, 13, 9), float64], Tensor[(702), float32], Tensor[(1800), uint32], Tensor[(10, 15, 12), float64], Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), float64]) {
  @func_4272(%var_4274, %var_4275) /* ty=(Tensor[(5, 3, 6), uint32], Tensor[(6, 13, 9), float64], Tensor[(702), float32], Tensor[(1800), uint32], Tensor[(10, 15, 12), float64], Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), float64]) */
}

def @func_2792(%var_2790: Tensor[(63, 1), float32]) -> (Tensor[(240), float32], Tensor[(9, 2, 7), bool], Tensor[(63, 1), float32]) {
  @func_2789(%var_2790) /* ty=(Tensor[(240), float32], Tensor[(9, 2, 7), bool], Tensor[(63, 1), float32]) */
}

def @func_4030(%var_4029: Tensor[(6, 9, 6), float64]) -> Tensor[(6, 9, 6), float64] {
  %365 = fn (%var_4023: Tensor[(6, 9, 6), float64]) -> Tensor[(6, 9, 6), float64] {
    %361 = cast(meta[relay.Constant][12] /* ty=Tensor[(6, 9, 6), float64] */, dtype="float64") /* ty=Tensor[(6, 9, 6), float64] */;
    %362 = shape_of(%var_4023, dtype="int32") /* ty=Tensor[(3), int32] */;
    %363 = cast(%var_4023, dtype="float64") /* ty=Tensor[(6, 9, 6), float64] */;
    %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    power(%363, %364) /* ty=Tensor[(6, 9, 6), float64] */
  };
  %365(%var_4029) /* ty=Tensor[(6, 9, 6), float64] */
}

def @func_1859() -> (Tensor[(3, 7, 12), float32], Tensor[(3, 7, 12), float64]) {
  @func_1857() /* ty=(Tensor[(3, 7, 12), float32], Tensor[(3, 7, 12), float64]) */
}

def @func_5568() -> Tensor[(3, 7, 12), float32] {
  %366 = @func_3517() /* ty=(Tensor[(3, 7, 12), float32],) */;
  %366.0
}

def @func_1857() -> (Tensor[(3, 7, 12), float32], Tensor[(3, 7, 12), float64]) {
  %367 = @func_1028() /* ty=(Tensor[(3, 7, 12), float32],) */;
  %368 = %367.0;
  %369 = cast(%368, dtype="float32") /* ty=Tensor[(3, 7, 12), float32] */;
  %370 = @func_1482() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %371 = acos(%369) /* ty=Tensor[(3, 7, 12), float32] */;
  %372 = %370.0;
  (%371, %372)
}

def @func_629(%var_627: Tensor[(6, 11, 4), float32]) -> (Tensor[(6, 11, 4), float32],) {
  @func_626(%var_627) /* ty=(Tensor[(6, 11, 4), float32],) */
}

def @func_1614() -> (Tensor[(3, 7, 12), float64], Tensor[(5, 10), float64], Tensor[(50), float32]) {
  @func_1612() /* ty=(Tensor[(3, 7, 12), float64], Tensor[(5, 10), float64], Tensor[(50), float32]) */
}

def @func_3953(%var_3952: Tensor[(1, 8, 5), float64]) -> Tensor[(1, 8, 5), float64] {
  %374 = fn (%var_3946: Tensor[(1, 8, 5), float64]) -> Tensor[(1, 8, 5), float64] {
    %373 = cast(%var_3946, dtype="float64") /* ty=Tensor[(1, 8, 5), float64] */;
    sqrt(%373) /* ty=Tensor[(1, 8, 5), float64] */
  };
  %374(%var_3952) /* ty=Tensor[(1, 8, 5), float64] */
}

def @func_4161(%var_4159: float32, %var_4160: Tensor[(9, 15, 10), float32]) -> (Tensor[(9, 15, 10), float32],) {
  @func_4157(%var_4159, %var_4160) /* ty=(Tensor[(9, 15, 10), float32],) */
}

def @func_1021() -> (Tensor[(5, 12, 4), float64], Tensor[(240), float32], Tensor[(5, 12, 4), float64], Tensor[(2, 4, 15), float64]) {
  %387 = fn () -> (Tensor[(5, 12, 4), float64], Tensor[(240), float32], Tensor[(5, 12, 4), float64], Tensor[(2, 4, 15), float64]) {
    %375 = cast(meta[relay.Constant][13] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
    %376 = reshape(%375, newshape=[5, 12, 4]) /* ty=Tensor[(5, 12, 4), float32] */;
    %377 = @func_208(%376) /* ty=(Tensor[(5, 12, 4), float32], Tensor[(5, 12, 4), float64]) */;
    %378 = %377.1;
    %379 = cast(%378, dtype="float32") /* ty=Tensor[(5, 12, 4), float32] */;
    %380 = reshape(%379, newshape=[5, 12, 4]) /* ty=Tensor[(5, 12, 4), float32] */;
    %381 = @func_208(%380) /* ty=(Tensor[(5, 12, 4), float32], Tensor[(5, 12, 4), float64]) */;
    %382 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 4, 15), float32] */, dtype="float32") /* ty=Tensor[(2, 4, 15), float32] */;
    %383 = acosh(%382) /* ty=Tensor[(2, 4, 15), float32] */;
    %384 = cast(%383, dtype="float64") /* ty=Tensor[(2, 4, 15), float64] */;
    %385 = %381.1;
    %386 = acos(%384) /* ty=Tensor[(2, 4, 15), float64] */;
    (%378, meta[relay.Constant][13] /* ty=Tensor[(240), float32] */, %385, %386)
  };
  %387() /* ty=(Tensor[(5, 12, 4), float64], Tensor[(240), float32], Tensor[(5, 12, 4), float64], Tensor[(2, 4, 15), float64]) */
}

def @func_769(%var_718: Tensor[(3, 7, 12), float32], %var_724: Tensor[(3, 7, 12), float32], %var_749: Tensor[(3, 7, 12), bool], %var_758: Tensor[(3, 7, 12), float32]) -> (Tensor[(6, 11, 4), float32], Tensor[(264), float32], Tensor[(3, 7, 12), uint16], Tensor[(3, 7, 12), bool]) {
  %388 = cast(meta[relay.Constant][15] /* ty=Tensor[(264), float32] */, dtype="float32") /* ty=Tensor[(264), float32] */;
  %389 = reshape(%388, newshape=[6, 11, 4]) /* ty=Tensor[(6, 11, 4), float32] */;
  %390 = @func_626(%389) /* ty=(Tensor[(6, 11, 4), float32],) */;
  %391 = @func_597() /* ty=Tensor[(3, 7, 12), float32] */;
  %392 = cast(%var_718, dtype="float32") /* ty=Tensor[(3, 7, 12), float32] */;
  %393 = shape_of(%391, dtype="int32") /* ty=Tensor[(3), int32] */;
  %394 = cast(%391, dtype="float32") /* ty=Tensor[(3, 7, 12), float32] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %396 = power(%394, %395) /* ty=Tensor[(3, 7, 12), float32] */;
  %397 = cast(%var_724, dtype="bool") /* ty=Tensor[(3, 7, 12), bool] */;
  %398 = shape_of(%396, dtype="int32") /* ty=Tensor[(3), int32] */;
  %399 = cast(%396, dtype="bool") /* ty=Tensor[(3, 7, 12), bool] */;
  %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %401 = greater_equal(%399, %400) /* ty=Tensor[(3, 7, 12), bool] */;
  %402 = cast(%var_749, dtype="uint16") /* ty=Tensor[(3, 7, 12), uint16] */;
  %403 = shape_of(%401, dtype="int32") /* ty=Tensor[(3), int32] */;
  %404 = cast(%401, dtype="uint16") /* ty=Tensor[(3, 7, 12), uint16] */;
  %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %406 = cast(%var_758, dtype="bool") /* ty=Tensor[(3, 7, 12), bool] */;
  %407 = shape_of(%var_718, dtype="int32") /* ty=Tensor[(3), int32] */;
  %408 = cast(%var_718, dtype="bool") /* ty=Tensor[(3, 7, 12), bool] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %410 = %390.0;
  %411 = bitwise_or(%404, %405) /* ty=Tensor[(3, 7, 12), uint16] */;
  %412 = logical_and(%408, %409) /* ty=Tensor[(3, 7, 12), bool] */;
  (%410, meta[relay.Constant][15] /* ty=Tensor[(264), float32] */, %411, %412)
}

def @func_5682(%var_5681: Tensor[(5, 12, 4), float32]) -> (Tensor[(5, 12, 4), bool],) {
  %420 = fn (%var_5664: Tensor[(5, 12, 4), float32]) -> (Tensor[(5, 12, 4), bool],) {
    %413 = @func_692() /* ty=(Tensor[(5, 12, 4), float32], Tensor[(10, 15, 12), bool], Tensor[(18, 100), uint32]) */;
    %414 = %413.0;
    %415 = cast(%var_5664, dtype="bool") /* ty=Tensor[(5, 12, 4), bool] */;
    %416 = shape_of(%414, dtype="int32") /* ty=Tensor[(3), int32] */;
    %417 = cast(%414, dtype="bool") /* ty=Tensor[(5, 12, 4), bool] */;
    %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %419 = greater(%417, %418) /* ty=Tensor[(5, 12, 4), bool] */;
    (%419,)
  };
  %420(%var_5681) /* ty=(Tensor[(5, 12, 4), bool],) */
}

def @func_1441() -> (Tensor[(5, 12, 4), bool], Tensor[(240), float32], Tensor[(5, 12, 4), float32]) {
  %436 = fn () -> (Tensor[(5, 12, 4), bool], Tensor[(240), float32], Tensor[(5, 12, 4), float32]) {
    %421 = @func_109() /* ty=(Tensor[(5, 12, 4), float32],) */;
    %422 = %421.0;
    %423 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 12, 4), float32] */, dtype="bool") /* ty=Tensor[(5, 12, 4), bool] */;
    %424 = shape_of(%422, dtype="int32") /* ty=Tensor[(3), int32] */;
    %425 = cast(%422, dtype="bool") /* ty=Tensor[(5, 12, 4), bool] */;
    %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %427 = cast(%422, dtype="float32") /* ty=Tensor[(5, 12, 4), float32] */;
    %428 = atan(%427) /* ty=Tensor[(5, 12, 4), float32] */;
    %429 = cast(meta[relay.Constant][17] /* ty=Tensor[(5, 12, 4), float32] */, dtype="float32") /* ty=Tensor[(5, 12, 4), float32] */;
    %430 = shape_of(%428, dtype="int32") /* ty=Tensor[(3), int32] */;
    %431 = cast(%428, dtype="float32") /* ty=Tensor[(5, 12, 4), float32] */;
    %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %433 = equal(%425, %426) /* ty=Tensor[(5, 12, 4), bool] */;
    %434 = @func_1225() /* ty=Tensor[(240), float32] */;
    %435 = mod(%431, %432) /* ty=Tensor[(5, 12, 4), float32] */;
    (%433, %434, %435)
  };
  %436() /* ty=(Tensor[(5, 12, 4), bool], Tensor[(240), float32], Tensor[(5, 12, 4), float32]) */
}

def @func_557(%var_555: Tensor[(10, 15, 12), uint32]) -> (Tensor[(10, 15, 12), bool], Tensor[(5, 12, 4), float32]) {
  @func_554(%var_555) /* ty=(Tensor[(10, 15, 12), bool], Tensor[(5, 12, 4), float32]) */
}

def @func_1654() -> (Tensor[(5, 3, 6), bool],) {
  %437 = @func_1143() /* ty=(Tensor[(5, 3, 6), bool],) */;
  %438 = %437.0;
  (%438,)
}

def @func_1212(%var_1210: Tensor[(8, 6, 16), int32], %var_1211: Tensor[(8, 6, 16), int32]) -> Tensor[(8, 6, 16), int32] {
  @func_1208(%var_1210, %var_1211) /* ty=Tensor[(8, 6, 16), int32] */
}

def @func_1277() -> Tensor[(3, 7, 12), float64] {
  @func_1275() /* ty=Tensor[(3, 7, 12), float64] */
}

def @func_3069() -> (Tensor[(5, 3, 6), bool], Tensor[(3, 7, 12), float32]) {
  @func_3067() /* ty=(Tensor[(5, 3, 6), bool], Tensor[(3, 7, 12), float32]) */
}

def @func_4111() -> (Tensor[(50), float32],) {
  @func_4109() /* ty=(Tensor[(50), float32],) */
}

def @func_2294(%var_2281: Tensor[(14, 10, 2), uint32], %var_2282: Tensor[(14, 10, 2), uint32]) -> Tensor[(14, 10, 2), bool] {
  %439 = cast(%var_2282, dtype="bool") /* ty=Tensor[(14, 10, 2), bool] */;
  %440 = shape_of(%var_2281, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%var_2281, dtype="bool") /* ty=Tensor[(14, 10, 2), bool] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%441, %442) /* ty=Tensor[(14, 10, 2), bool] */
}

def @func_3716() -> (Tensor[(5, 12, 4), float64],) {
  %443 = @func_1020() /* ty=(Tensor[(5, 12, 4), float64], Tensor[(240), float32], Tensor[(5, 12, 4), float64], Tensor[(2, 4, 15), float64]) */;
  %444 = %443.0;
  (%444,)
}

def @func_5536() -> (Tensor[(3, 7, 12), float32],) {
  %446 = fn () -> (Tensor[(3, 7, 12), float32],) {
    %445 = @func_525() /* ty=Tensor[(3, 7, 12), float32] */;
    (%445,)
  };
  %446() /* ty=(Tensor[(3, 7, 12), float32],) */
}

def @func_3243(%var_3210: Tensor[(3, 7, 12), float64], %var_3231: Tensor[(18, 2), int8]) -> (Tensor[(3, 7, 12), int64], Tensor[(9, 4, 240), int64], Tensor[(18, 2), uint8]) {
  %447 = @func_799() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %448 = %447.0;
  %449 = cast(%var_3210, dtype="float64") /* ty=Tensor[(3, 7, 12), float64] */;
  %450 = shape_of(%448, dtype="int32") /* ty=Tensor[(3), int32] */;
  %451 = cast(%448, dtype="float64") /* ty=Tensor[(3, 7, 12), float64] */;
  %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %453 = floor_divide(%451, %452) /* ty=Tensor[(3, 7, 12), float64] */;
  %454 = cast(%453, dtype="int64") /* ty=Tensor[(3, 7, 12), int64] */;
  %455 = shape_of(%var_3210, dtype="int32") /* ty=Tensor[(3), int32] */;
  %456 = cast(%var_3210, dtype="int64") /* ty=Tensor[(3, 7, 12), int64] */;
  %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %458 = cast(meta[relay.Constant][18] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %459 = cast(%var_3231, dtype="int8") /* ty=Tensor[(18, 2), int8] */;
  %460 = reshape(%458, newshape=[]) /* ty=int8 */;
  %461 = reshape(%459, newshape=[9, 4, 1]) /* ty=Tensor[(9, 4, 1), int8] */;
  %462 = @func_2359(%460, %461) /* ty=(Tensor[(5, 3, 6), bool], Tensor[(9, 4, 240), int64]) */;
  %463 = cast(%var_3231, dtype="uint8") /* ty=Tensor[(18, 2), uint8] */;
  %464 = cast(meta[relay.Constant][18] /* ty=int8 */, dtype="uint8") /* ty=uint8 */;
  %465 = left_shift(%456, %457) /* ty=Tensor[(3, 7, 12), int64] */;
  %466 = %462.1;
  %467 = bitwise_xor(%463, %464) /* ty=Tensor[(18, 2), uint8] */;
  (%465, %466, %467)
}

def @func_1453() -> (Tensor[(5, 12, 4), bool], Tensor[(3, 7, 12), float64]) {
  @func_1451() /* ty=(Tensor[(5, 12, 4), bool], Tensor[(3, 7, 12), float64]) */
}

def @func_1799(%var_1798: Tensor[(5, 3, 6), bool]) -> (Tensor[(5, 3, 6), int8], Tensor[(5, 3, 6), float64], Tensor[(3, 7, 12), float32], Tensor[(5, 3, 6), bool], Tensor[(240), float32]) {
  %483 = fn (%var_1715: Tensor[(5, 3, 6), bool]) -> (Tensor[(5, 3, 6), int8], Tensor[(5, 3, 6), float64], Tensor[(3, 7, 12), float32], Tensor[(5, 3, 6), bool], Tensor[(240), float32]) {
    %468 = @func_986() /* ty=(Tensor[(10, 15, 12), bool], Tensor[(5, 3, 6), bool], Tensor[(3, 7, 12), float32]) */;
    %469 = %468.1;
    %470 = cast(%var_1715, dtype="int8") /* ty=Tensor[(5, 3, 6), int8] */;
    %471 = shape_of(%469, dtype="int32") /* ty=Tensor[(3), int32] */;
    %472 = cast(%469, dtype="int8") /* ty=Tensor[(5, 3, 6), int8] */;
    %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %474 = cast(%469, dtype="float64") /* ty=Tensor[(5, 3, 6), float64] */;
    %475 = @func_1028() /* ty=(Tensor[(3, 7, 12), float32],) */;
    %476 = @func_1254() /* ty=(Tensor[(5, 3, 6), bool],) */;
    %477 = @func_1569() /* ty=(Tensor[(10, 15, 12), float64], Tensor[(5, 12, 4), bool], Tensor[(240), float32]) */;
    %478 = subtract(%472, %473) /* ty=Tensor[(5, 3, 6), int8] */;
    %479 = cos(%474) /* ty=Tensor[(5, 3, 6), float64] */;
    %480 = %475.0;
    %481 = %476.0;
    %482 = %477.2;
    (%478, %479, %480, %481, %482)
  };
  %483(%var_1798) /* ty=(Tensor[(5, 3, 6), int8], Tensor[(5, 3, 6), float64], Tensor[(3, 7, 12), float32], Tensor[(5, 3, 6), bool], Tensor[(240), float32]) */
}

def @func_3994(%var_3993: Tensor[(3, 7, 12), float32]) -> (Tensor[(3, 7, 12), float32], Tensor[(3, 7, 12), bool]) {
  %493 = fn (%var_3981: Tensor[(3, 7, 12), float32]) -> (Tensor[(3, 7, 12), float32], Tensor[(3, 7, 12), bool]) {
    %484 = @func_851() /* ty=(Tensor[(3, 7, 12), float32],) */;
    %485 = @func_851() /* ty=(Tensor[(3, 7, 12), float32],) */;
    %486 = %485.0;
    %487 = cast(%var_3981, dtype="bool") /* ty=Tensor[(3, 7, 12), bool] */;
    %488 = shape_of(%486, dtype="int32") /* ty=Tensor[(3), int32] */;
    %489 = cast(%486, dtype="bool") /* ty=Tensor[(3, 7, 12), bool] */;
    %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %491 = %484.0;
    %492 = less_equal(%489, %490) /* ty=Tensor[(3, 7, 12), bool] */;
    (%491, %492)
  };
  %493(%var_3993) /* ty=(Tensor[(3, 7, 12), float32], Tensor[(3, 7, 12), bool]) */
}

def @func_5583() -> (Tensor[(5, 3, 6), float32],) {
  %495 = fn () -> (Tensor[(5, 3, 6), float32],) {
    %494 = @func_5285() /* ty=Tensor[(5, 3, 6), float32] */;
    (%494,)
  };
  %495() /* ty=(Tensor[(5, 3, 6), float32],) */
}

def @func_1612() -> (Tensor[(3, 7, 12), float64], Tensor[(5, 10), float64], Tensor[(50), float32]) {
  %496 = @func_799() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %497 = cast(meta[relay.Constant][19] /* ty=Tensor[(50), float64] */, dtype="float64") /* ty=Tensor[(50), float64] */;
  %498 = reshape(%497, newshape=[5, 10]) /* ty=Tensor[(5, 10), float64] */;
  %499 = cast(meta[relay.Constant][19] /* ty=Tensor[(50), float64] */, dtype="float32") /* ty=Tensor[(50), float32] */;
  %500 = %496.0;
  %501 = @func_835(%498) /* ty=Tensor[(5, 10), float64] */;
  %502 = sinh(%499) /* ty=Tensor[(50), float32] */;
  (%500, %501, %502)
}

def @func_852() -> (Tensor[(3, 7, 12), float32],) {
  %504 = fn () -> (Tensor[(3, 7, 12), float32],) {
    %503 = @func_597() /* ty=Tensor[(3, 7, 12), float32] */;
    (%503,)
  };
  %504() /* ty=(Tensor[(3, 7, 12), float32],) */
}

def @func_2228(%var_2192: Tensor[(5, 3, 6), bool]) -> (Tensor[(5, 12, 4), float32], Tensor[(5, 3, 6), int64], Tensor[(5, 12, 4), float64]) {
  %505 = @func_357() /* ty=(Tensor[(5, 12, 4), float32], Tensor[(3, 7, 12), float64]) */;
  %506 = @func_1143() /* ty=(Tensor[(5, 3, 6), bool],) */;
  %507 = %506.0;
  %508 = cast(%var_2192, dtype="float64") /* ty=Tensor[(5, 3, 6), float64] */;
  %509 = shape_of(%507, dtype="int32") /* ty=Tensor[(3), int32] */;
  %510 = cast(%507, dtype="float64") /* ty=Tensor[(5, 3, 6), float64] */;
  %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %512 = floor_divide(%510, %511) /* ty=Tensor[(5, 3, 6), float64] */;
  %513 = cast(%512, dtype="int64") /* ty=Tensor[(5, 3, 6), int64] */;
  %514 = shape_of(%507, dtype="int32") /* ty=Tensor[(3), int32] */;
  %515 = cast(%507, dtype="int64") /* ty=Tensor[(5, 3, 6), int64] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %517 = @func_1020() /* ty=(Tensor[(5, 12, 4), float64], Tensor[(240), float32], Tensor[(5, 12, 4), float64], Tensor[(2, 4, 15), float64]) */;
  %518 = %505.0;
  %519 = add(%515, %516) /* ty=Tensor[(5, 3, 6), int64] */;
  %520 = %517.0;
  (%518, %519, %520)
}

def @func_5162(%var_5160: Tensor[(11, 10, 11), int64], %var_5161: Tensor[(10, 5), float64]) -> (Tensor[(5, 10), float64], Tensor[(10, 5), float64], Tensor[(11, 10, 11), bool], Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), uint64]) {
  %539 = fn (%var_5109: Tensor[(11, 10, 11), int64], %var_5117: Tensor[(10, 5), float64]) -> (Tensor[(5, 10), float64], Tensor[(10, 5), float64], Tensor[(11, 10, 11), bool], Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), uint64]) {
    %521 = cast(%var_5117, dtype="float64") /* ty=Tensor[(10, 5), float64] */;
    %522 = reshape(%521, newshape=[5, 10]) /* ty=Tensor[(5, 10), float64] */;
    %523 = cast(meta[relay.Constant][20] /* ty=Tensor[(11, 10, 11), int64] */, dtype="bool") /* ty=Tensor[(11, 10, 11), bool] */;
    %524 = shape_of(%var_5109, dtype="int32") /* ty=Tensor[(3), int32] */;
    %525 = cast(%var_5109, dtype="bool") /* ty=Tensor[(11, 10, 11), bool] */;
    %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %527 = greater_equal(%525, %526) /* ty=Tensor[(11, 10, 11), bool] */;
    %528 = cast(%527, dtype="bool") /* ty=Tensor[(11, 10, 11), bool] */;
    %529 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(11, 10, 11), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %530 = cast(meta[relay.Constant][20] /* ty=Tensor[(11, 10, 11), int64] */, dtype="bool") /* ty=Tensor[(11, 10, 11), bool] */;
    %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %532 = @func_1482() /* ty=(Tensor[(3, 7, 12), float64],) */;
    %533 = %532.0;
    %534 = cast(%533, dtype="float64") /* ty=Tensor[(3, 7, 12), float64] */;
    %535 = reshape(%534, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float64] */;
    %536 = @func_835(%522) /* ty=Tensor[(5, 10), float64] */;
    %537 = logical_or(%530, %531) /* ty=Tensor[(11, 10, 11), bool] */;
    %538 = @func_4195(%535) /* ty=Tensor[(3, 7, 12), uint64] */;
    (%536, %var_5117, %537, %533, %538)
  };
  %539(%var_5160, %var_5161) /* ty=(Tensor[(5, 10), float64], Tensor[(10, 5), float64], Tensor[(11, 10, 11), bool], Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), uint64]) */
}

def @func_1255() -> (Tensor[(5, 3, 6), bool],) {
  %542 = fn () -> (Tensor[(5, 3, 6), bool],) {
    %540 = @func_986() /* ty=(Tensor[(10, 15, 12), bool], Tensor[(5, 3, 6), bool], Tensor[(3, 7, 12), float32]) */;
    %541 = %540.1;
    (%541,)
  };
  %542() /* ty=(Tensor[(5, 3, 6), bool],) */
}

def @func_1451() -> (Tensor[(5, 12, 4), bool], Tensor[(3, 7, 12), float64]) {
  %543 = @func_1440() /* ty=(Tensor[(5, 12, 4), bool], Tensor[(240), float32], Tensor[(5, 12, 4), float32]) */;
  %544 = %543.0;
  %545 = @func_1175() /* ty=Tensor[(3, 7, 12), float64] */;
  (%544, %545)
}

def @func_5285() -> Tensor[(5, 3, 6), float32] {
  %546 = @func_3028() /* ty=(Tensor[(5, 3, 6), bool], Tensor[(5, 3, 6), float32], Tensor[(252), float32], Tensor[(6, 11, 4), float32], Tensor[(3, 7, 12), uint16], Tensor[(240), float32], Tensor[(5, 12, 4), float32]) */;
  %546.1
}

def @func_4109() -> (Tensor[(50), float32],) {
  %547 = @func_1612() /* ty=(Tensor[(3, 7, 12), float64], Tensor[(5, 10), float64], Tensor[(50), float32]) */;
  %548 = %547.2;
  (%548,)
}

def @func_4540() -> (Tensor[(3, 7, 12), float32], Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), uint64]) {
  @func_4538() /* ty=(Tensor[(3, 7, 12), float32], Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), uint64]) */
}

def @func_924(%var_869: Tensor[(5, 3, 6), float64], %var_912: Tensor[(5, 3, 6), float32]) -> (Tensor[(5, 3, 6), float32], Tensor[(18, 100), uint32], Tensor[(5, 3, 6), float64], Tensor[(5, 3, 6), float32], Tensor[(3, 7, 12), float64]) {
  %549 = cast(%var_869, dtype="float32") /* ty=Tensor[(5, 3, 6), float32] */;
  %550 = @func_692() /* ty=(Tensor[(5, 12, 4), float32], Tensor[(10, 15, 12), bool], Tensor[(18, 100), uint32]) */;
  %551 = cast(%var_869, dtype="float64") /* ty=Tensor[(5, 3, 6), float64] */;
  %552 = cast(%var_869, dtype="float64") /* ty=Tensor[(5, 3, 6), float64] */;
  %553 = acosh(%552) /* ty=Tensor[(5, 3, 6), float64] */;
  %554 = cast(%553, dtype="float32") /* ty=Tensor[(5, 3, 6), float32] */;
  %555 = sinh(%554) /* ty=Tensor[(5, 3, 6), float32] */;
  %556 = cast(%var_912, dtype="float32") /* ty=Tensor[(5, 3, 6), float32] */;
  %557 = shape_of(%555, dtype="int32") /* ty=Tensor[(3), int32] */;
  %558 = cast(%555, dtype="float32") /* ty=Tensor[(5, 3, 6), float32] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %560 = @func_851() /* ty=(Tensor[(3, 7, 12), float32],) */;
  %561 = %560.0;
  %562 = cast(%561, dtype="float32") /* ty=Tensor[(3, 7, 12), float32] */;
  %563 = asin(%562) /* ty=Tensor[(3, 7, 12), float32] */;
  %564 = cast(%563, dtype="float64") /* ty=Tensor[(3, 7, 12), float64] */;
  %565 = shape_of(%561, dtype="int32") /* ty=Tensor[(3), int32] */;
  %566 = cast(%561, dtype="float64") /* ty=Tensor[(3, 7, 12), float64] */;
  %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %568 = rsqrt(%549) /* ty=Tensor[(5, 3, 6), float32] */;
  %569 = %550.2;
  %570 = asin(%551) /* ty=Tensor[(5, 3, 6), float64] */;
  %571 = power(%558, %559) /* ty=Tensor[(5, 3, 6), float32] */;
  %572 = subtract(%566, %567) /* ty=Tensor[(3, 7, 12), float64] */;
  (%568, %569, %570, %571, %572)
}

def @func_4841() -> (Tensor[(3, 7, 12), float32],) {
  @func_4839() /* ty=(Tensor[(3, 7, 12), float32],) */
}

def @func_3149() -> (Tensor[(3, 7, 12), float32],) {
  %573 = @func_851() /* ty=(Tensor[(3, 7, 12), float32],) */;
  %574 = %573.0;
  (%574,)
}

def @main() -> (Tensor[(3, 7, 12), float64],) {
  %575 = @func_4145() /* ty=(Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), float32]) */;
  %576 = %575.1;
  %577 = cast(%576, dtype="float64") /* ty=Tensor[(3, 7, 12), float64] */;
  %578 = exp(%577) /* ty=Tensor[(3, 7, 12), float64] */;
  (%578,)
}

def @func_626(%var_613: Tensor[(6, 11, 4), float32]) -> (Tensor[(6, 11, 4), float32],) {
  %579 = cast(0.623202f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %580 = cast(%var_613, dtype="float32") /* ty=Tensor[(6, 11, 4), float32] */;
  %581 = minimum(%579, %580) /* ty=Tensor[(6, 11, 4), float32] */;
  (%581,)
}

def @func_341() -> (Tensor[(3, 7, 12), float64],) {
  @func_339() /* ty=(Tensor[(3, 7, 12), float64],) */
}

def @func_2523(%var_2522: Tensor[(3, 7, 12), float64]) -> (Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), float32]) {
  %594 = fn (%var_2489: Tensor[(3, 7, 12), float64]) -> (Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), float32]) {
    %582 = @func_2167() /* ty=(Tensor[(3, 7, 12), float64],) */;
    %583 = %582.0;
    %584 = cast(%var_2489, dtype="uint64") /* ty=Tensor[(3, 7, 12), uint64] */;
    %585 = shape_of(%583, dtype="int32") /* ty=Tensor[(3), int32] */;
    %586 = cast(%583, dtype="uint64") /* ty=Tensor[(3, 7, 12), uint64] */;
    %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %588 = add(%586, %587) /* ty=Tensor[(3, 7, 12), uint64] */;
    %589 = cast(%588, dtype="float64") /* ty=Tensor[(3, 7, 12), float64] */;
    %590 = @func_1028() /* ty=(Tensor[(3, 7, 12), float32],) */;
    %591 = @func_1275() /* ty=Tensor[(3, 7, 12), float64] */;
    %592 = atanh(%589) /* ty=Tensor[(3, 7, 12), float64] */;
    %593 = %590.0;
    (%591, %592, %593)
  };
  %594(%var_2522) /* ty=(Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), float32]) */
}

def @func_1145() -> (Tensor[(5, 3, 6), bool],) {
  @func_1143() /* ty=(Tensor[(5, 3, 6), bool],) */
}

def @func_1996() -> (Tensor[(3, 7, 12), float32],) {
  %595 = @func_1028() /* ty=(Tensor[(3, 7, 12), float32],) */;
  %596 = %595.0;
  (%596,)
}

def @func_1965() -> Tensor[(3, 7, 12), float64] {
  @func_1963() /* ty=Tensor[(3, 7, 12), float64] */
}

def @func_775(%var_771: Tensor[(3, 7, 12), float32], %var_772: Tensor[(3, 7, 12), float32], %var_773: Tensor[(3, 7, 12), bool], %var_774: Tensor[(3, 7, 12), float32]) -> (Tensor[(6, 11, 4), float32], Tensor[(264), float32], Tensor[(3, 7, 12), uint16], Tensor[(3, 7, 12), bool]) {
  @func_769(%var_771, %var_772, %var_773, %var_774) /* ty=(Tensor[(6, 11, 4), float32], Tensor[(264), float32], Tensor[(3, 7, 12), uint16], Tensor[(3, 7, 12), bool]) */
}

def @func_2874(%var_2835: Tensor[(1, 264), float32]) -> (Tensor[(3, 7, 12), float64], Tensor[(5, 12, 4), float32], Tensor[(1800), uint32], Tensor[(6, 11, 4), float32], Tensor[(1, 264), float32], Tensor[(24), int16], Tensor[(768), int32], Tensor[(5, 3, 6), bool]) {
  %597 = @func_1482() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %598 = cast(meta[relay.Constant][21] /* ty=Tensor[(1800), uint32] */, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %599 = reshape(%598, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint32] */;
  %600 = @func_554(%599) /* ty=(Tensor[(10, 15, 12), bool], Tensor[(5, 12, 4), float32]) */;
  %601 = cast(%var_2835, dtype="float32") /* ty=Tensor[(1, 264), float32] */;
  %602 = reshape(%601, newshape=[6, 11, 4]) /* ty=Tensor[(6, 11, 4), float32] */;
  %603 = @func_626(%602) /* ty=(Tensor[(6, 11, 4), float32],) */;
  %604 = cast(meta[relay.Constant][22] /* ty=Tensor[(768), int32] */, dtype="int32") /* ty=Tensor[(768), int32] */;
  %605 = reshape(%604, newshape=[768]) /* ty=Tensor[(768), int32] */;
  %606 = @func_1324(%605) /* ty=(Tensor[(18, 100), uint32], Tensor[(2, 2, 6), bool], Tensor[(24), int16], Tensor[(8, 6, 16), int32], Tensor[(768), int32], Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), float32]) */;
  %607 = @func_1254() /* ty=(Tensor[(5, 3, 6), bool],) */;
  %608 = %597.0;
  %609 = %600.1;
  %610 = %603.0;
  %611 = %606.2;
  %612 = %607.0;
  (%608, %609, meta[relay.Constant][21] /* ty=Tensor[(1800), uint32] */, %610, %var_2835, %611, meta[relay.Constant][22] /* ty=Tensor[(768), int32] */, %612)
}

def @func_2894() -> Tensor[(3, 7, 12), float64] {
  @func_1175() /* ty=Tensor[(3, 7, 12), float64] */
}

def @func_4839() -> (Tensor[(3, 7, 12), float32],) {
  %613 = @func_1996() /* ty=(Tensor[(3, 7, 12), float32],) */;
  %614 = %613.0;
  %615 = cast(%614, dtype="float32") /* ty=Tensor[(3, 7, 12), float32] */;
  %616 = sin(%615) /* ty=Tensor[(3, 7, 12), float32] */;
  (%616,)
}

def @func_3578() -> (Tensor[(3, 7, 12), float64],) {
  %617 = @func_1175() /* ty=Tensor[(3, 7, 12), float64] */;
  (%617,)
}

def @func_1143() -> (Tensor[(5, 3, 6), bool],) {
  %618 = @func_986() /* ty=(Tensor[(10, 15, 12), bool], Tensor[(5, 3, 6), bool], Tensor[(3, 7, 12), float32]) */;
  %619 = %618.1;
  (%619,)
}

def @func_3131(%var_3130: Tensor[(9, 3, 11), float64]) -> (Tensor[(9, 3, 11), float64],) {
  %622 = fn (%var_3112: Tensor[(9, 3, 11), float64]) -> (Tensor[(9, 3, 11), float64],) {
    %620 = cast(%var_3112, dtype="float64") /* ty=Tensor[(9, 3, 11), float64] */;
    %621 = sigmoid(%620) /* ty=Tensor[(9, 3, 11), float64] */;
    (%621,)
  };
  %622(%var_3130) /* ty=(Tensor[(9, 3, 11), float64],) */
}

def @func_3247(%var_3245: Tensor[(3, 7, 12), float64], %var_3246: Tensor[(18, 2), int8]) -> (Tensor[(3, 7, 12), int64], Tensor[(9, 4, 240), int64], Tensor[(18, 2), uint8]) {
  @func_3243(%var_3245, %var_3246) /* ty=(Tensor[(3, 7, 12), int64], Tensor[(9, 4, 240), int64], Tensor[(18, 2), uint8]) */
}

def @func_2362(%var_2360: int8, %var_2361: Tensor[(9, 4, 1), int8]) -> (Tensor[(5, 3, 6), bool], Tensor[(9, 4, 240), int64]) {
  %641 = fn (%var_2319: int8, %var_2320: Tensor[(9, 4, 1), int8]) -> (Tensor[(5, 3, 6), bool], Tensor[(9, 4, 240), int64]) {
    %623 = @func_1254() /* ty=(Tensor[(5, 3, 6), bool],) */;
    %624 = @func_1579() /* ty=(Tensor[(240), float32],) */;
    %625 = %624.0;
    %626 = cast(%var_2319, dtype="int8") /* ty=int8 */;
    %627 = cast(%var_2320, dtype="int8") /* ty=Tensor[(9, 4, 1), int8] */;
    %628 = left_shift(%626, %627) /* ty=Tensor[(9, 4, 1), int8] */;
    %629 = cast(%var_2319, dtype="bool") /* ty=bool */;
    %630 = cast(%628, dtype="bool") /* ty=Tensor[(9, 4, 1), bool] */;
    %631 = logical_or(%629, %630) /* ty=Tensor[(9, 4, 1), bool] */;
    %632 = cast(%631, dtype="int16") /* ty=Tensor[(9, 4, 1), int16] */;
    %633 = shape_of(%var_2320, dtype="int32") /* ty=Tensor[(3), int32] */;
    %634 = cast(%var_2320, dtype="int16") /* ty=Tensor[(9, 4, 1), int16] */;
    %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %636 = bitwise_xor(%634, %635) /* ty=Tensor[(9, 4, ?), int16] */;
    %637 = cast(%625, dtype="int64") /* ty=Tensor[(240), int64] */;
    %638 = cast(%636, dtype="int64") /* ty=Tensor[(9, 4, ?), int64] */;
    %639 = %623.0;
    %640 = right_shift(%637, %638) /* ty=Tensor[(9, 4, 240), int64] */;
    (%639, %640)
  };
  %641(%var_2360, %var_2361) /* ty=(Tensor[(5, 3, 6), bool], Tensor[(9, 4, 240), int64]) */
}

def @func_2896() -> Tensor[(3, 7, 12), float64] {
  @func_2894() /* ty=Tensor[(3, 7, 12), float64] */
}

def @func_2471(%var_2469: Tensor[(9, 1, 7), float32]) -> (Tensor[(3, 7, 12), float64], Tensor[(9, 2, 7), bool]) {
  @func_2468(%var_2469) /* ty=(Tensor[(3, 7, 12), float64], Tensor[(9, 2, 7), bool]) */
}

def @func_1029() -> (Tensor[(3, 7, 12), float32],) {
  %643 = fn () -> (Tensor[(3, 7, 12), float32],) {
    %642 = @func_525() /* ty=Tensor[(3, 7, 12), float32] */;
    (%642,)
  };
  %643() /* ty=(Tensor[(3, 7, 12), float32],) */
}

def @func_5524() -> Tensor[(3, 7, 12), float32] {
  %645 = fn () -> Tensor[(3, 7, 12), float32] {
    %644 = @func_1028() /* ty=(Tensor[(3, 7, 12), float32],) */;
    %644.0
  };
  %645() /* ty=Tensor[(3, 7, 12), float32] */
}

def @func_2090() -> (Tensor[(3, 7, 12), float64],) {
  @func_2088() /* ty=(Tensor[(3, 7, 12), float64],) */
}

def @func_5449(%var_5447: Tensor[(240), float32]) -> (Tensor[(3, 7, 12), float64], Tensor[(240), float32], Tensor[(5, 12, 4), float64]) {
  @func_5446(%var_5447) /* ty=(Tensor[(3, 7, 12), float64], Tensor[(240), float32], Tensor[(5, 12, 4), float64]) */
}

def @func_2643(%var_2638: Tensor[(5, 12, 4), float64]) -> (Tensor[(3, 7, 12), float32], Tensor[(5, 12, 4), float32]) {
  %646 = @func_851() /* ty=(Tensor[(3, 7, 12), float32],) */;
  %647 = @func_1832() /* ty=(Tensor[(5, 12, 4), float64],) */;
  %648 = %647.0;
  %649 = cast(%var_2638, dtype="float32") /* ty=Tensor[(5, 12, 4), float32] */;
  %650 = shape_of(%648, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(%648, dtype="float32") /* ty=Tensor[(5, 12, 4), float32] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %653 = %646.0;
  %654 = power(%651, %652) /* ty=Tensor[(5, 12, 4), float32] */;
  (%653, %654)
}

def @func_2678() -> Tensor[(5, 3, 6), bool] {
  @func_2676() /* ty=Tensor[(5, 3, 6), bool] */
}

def @func_1580() -> (Tensor[(240), float32],) {
  %657 = fn () -> (Tensor[(240), float32],) {
    %655 = @func_1440() /* ty=(Tensor[(5, 12, 4), bool], Tensor[(240), float32], Tensor[(5, 12, 4), float32]) */;
    %656 = %655.1;
    (%656,)
  };
  %657() /* ty=(Tensor[(240), float32],) */
}

def @func_928(%var_926: Tensor[(5, 3, 6), float64], %var_927: Tensor[(5, 3, 6), float32]) -> (Tensor[(5, 3, 6), float32], Tensor[(18, 100), uint32], Tensor[(5, 3, 6), float64], Tensor[(5, 3, 6), float32], Tensor[(3, 7, 12), float64]) {
  @func_924(%var_926, %var_927) /* ty=(Tensor[(5, 3, 6), float32], Tensor[(18, 100), uint32], Tensor[(5, 3, 6), float64], Tensor[(5, 3, 6), float32], Tensor[(3, 7, 12), float64]) */
}

def @func_3399(%var_3398: Tensor[(1800), uint32]) -> (Tensor[(5, 3, 6), bool], Tensor[(10, 15, 12), bool], Tensor[(1800), uint32]) {
  %664 = fn (%var_3385: Tensor[(1800), uint32]) -> (Tensor[(5, 3, 6), bool], Tensor[(10, 15, 12), bool], Tensor[(1800), uint32]) {
    %658 = @func_3067() /* ty=(Tensor[(5, 3, 6), bool], Tensor[(3, 7, 12), float32]) */;
    %659 = cast(%var_3385, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
    %660 = reshape(%659, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint32] */;
    %661 = @func_554(%660) /* ty=(Tensor[(10, 15, 12), bool], Tensor[(5, 12, 4), float32]) */;
    %662 = %658.0;
    %663 = %661.0;
    (%662, %663, %var_3385)
  };
  %664(%var_3398) /* ty=(Tensor[(5, 3, 6), bool], Tensor[(10, 15, 12), bool], Tensor[(1800), uint32]) */
}

def @func_2715() -> Tensor[(3, 7, 12), float32] {
  @func_2713() /* ty=Tensor[(3, 7, 12), float32] */
}

def @func_799() -> (Tensor[(3, 7, 12), float64],) {
  %665 = @func_357() /* ty=(Tensor[(5, 12, 4), float32], Tensor[(3, 7, 12), float64]) */;
  %666 = %665.1;
  (%666,)
}

def @func_3314(%var_3313: Tensor[(6, 13, 9), float32]) -> (Tensor[(6, 13, 9), float64],) {
  %671 = fn (%var_3307: Tensor[(6, 13, 9), float32]) -> (Tensor[(6, 13, 9), float64],) {
    %667 = cast(%var_3307, dtype="float32") /* ty=Tensor[(6, 13, 9), float32] */;
    %668 = rsqrt(%667) /* ty=Tensor[(6, 13, 9), float32] */;
    %669 = cast(%668, dtype="float64") /* ty=Tensor[(6, 13, 9), float64] */;
    %670 = acosh(%669) /* ty=Tensor[(6, 13, 9), float64] */;
    (%670,)
  };
  %671(%var_3313) /* ty=(Tensor[(6, 13, 9), float64],) */
}

def @func_3378(%var_3376: Tensor[(3, 7, 12), float32]) -> (Tensor[(3, 7, 12), uint64], Tensor[(3, 7, 12), uint16], Tensor[(3, 7, 12), float32]) {
  @func_3375(%var_3376) /* ty=(Tensor[(3, 7, 12), uint64], Tensor[(3, 7, 12), uint16], Tensor[(3, 7, 12), float32]) */
}

def @func_3500() -> (Tensor[(3, 7, 12), float64],) {
  @func_3498() /* ty=(Tensor[(3, 7, 12), float64],) */
}

def @func_5326() -> (Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), float32]) {
  %672 = @func_2167() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %673 = %672.0;
  %674 = @func_597() /* ty=Tensor[(3, 7, 12), float32] */;
  (%673, %674)
}

def @func_801() -> (Tensor[(3, 7, 12), float64],) {
  @func_799() /* ty=(Tensor[(3, 7, 12), float64],) */
}

def @func_527() -> Tensor[(3, 7, 12), float32] {
  @func_525() /* ty=Tensor[(3, 7, 12), float32] */
}

def @func_5287() -> Tensor[(5, 3, 6), float32] {
  @func_5285() /* ty=Tensor[(5, 3, 6), float32] */
}

def @func_339() -> (Tensor[(3, 7, 12), float64],) {
  %675 = cast(meta[relay.Constant][23] /* ty=Tensor[(3, 7, 12), float64] */, dtype="float64") /* ty=Tensor[(3, 7, 12), float64] */;
  %676 = rsqrt(%675) /* ty=Tensor[(3, 7, 12), float64] */;
  (%676,)
}

def @func_2052(%var_2039: Tensor[(15, 5, 13), float32]) -> Tensor[(15, 5, 13), float32] {
  %677 = cast(%var_2039, dtype="float32") /* ty=Tensor[(15, 5, 13), float32] */;
  log10(%677) /* ty=Tensor[(15, 5, 13), float32] */
}

def @func_3029() -> (Tensor[(5, 3, 6), bool], Tensor[(5, 3, 6), float32], Tensor[(252), float32], Tensor[(6, 11, 4), float32], Tensor[(3, 7, 12), uint16], Tensor[(240), float32], Tensor[(5, 12, 4), float32]) {
  %718 = fn () -> (Tensor[(5, 3, 6), bool], Tensor[(5, 3, 6), float32], Tensor[(252), float32], Tensor[(6, 11, 4), float32], Tensor[(3, 7, 12), uint16], Tensor[(240), float32], Tensor[(5, 12, 4), float32]) {
    %678 = @func_1143() /* ty=(Tensor[(5, 3, 6), bool],) */;
    %679 = %678.0;
    %680 = cast(%679, dtype="float64") /* ty=Tensor[(5, 3, 6), float64] */;
    %681 = cast(%679, dtype="float32") /* ty=Tensor[(5, 3, 6), float32] */;
    %682 = reshape(%680, newshape=[5, 3, 6]) /* ty=Tensor[(5, 3, 6), float64] */;
    %683 = reshape(%681, newshape=[5, 3, 6]) /* ty=Tensor[(5, 3, 6), float32] */;
    %684 = @func_924(%682, %683) /* ty=(Tensor[(5, 3, 6), float32], Tensor[(18, 100), uint32], Tensor[(5, 3, 6), float64], Tensor[(5, 3, 6), float32], Tensor[(3, 7, 12), float64]) */;
    %685 = cast(meta[relay.Constant][24] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
    %686 = cast(meta[relay.Constant][24] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
    %687 = cast(meta[relay.Constant][24] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
    %688 = cast(meta[relay.Constant][24] /* ty=Tensor[(252), float32] */, dtype="bool") /* ty=Tensor[(252), bool] */;
    %689 = cast(meta[relay.Constant][24] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
    %690 = reshape(%686, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float32] */;
    %691 = reshape(%687, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float32] */;
    %692 = reshape(%688, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), bool] */;
    %693 = reshape(%689, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float32] */;
    %694 = @func_769(%690, %691, %692, %693) /* ty=(Tensor[(6, 11, 4), float32], Tensor[(264), float32], Tensor[(3, 7, 12), uint16], Tensor[(3, 7, 12), bool]) */;
    %695 = %694.0;
    %696 = cast(%695, dtype="float32") /* ty=Tensor[(6, 11, 4), float32] */;
    %697 = sinh(%685) /* ty=Tensor[(252), float32] */;
    %698 = cast(%697, dtype="float32") /* ty=Tensor[(252), float32] */;
    %699 = cast(%697, dtype="float32") /* ty=Tensor[(252), float32] */;
    %700 = cast(meta[relay.Constant][24] /* ty=Tensor[(252), float32] */, dtype="bool") /* ty=Tensor[(252), bool] */;
    %701 = cast(%697, dtype="float32") /* ty=Tensor[(252), float32] */;
    %702 = reshape(%698, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float32] */;
    %703 = reshape(%699, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float32] */;
    %704 = reshape(%700, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), bool] */;
    %705 = reshape(%701, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float32] */;
    %706 = @func_769(%702, %703, %704, %705) /* ty=(Tensor[(6, 11, 4), float32], Tensor[(264), float32], Tensor[(3, 7, 12), uint16], Tensor[(3, 7, 12), bool]) */;
    %707 = cast(%679, dtype="bool") /* ty=Tensor[(5, 3, 6), bool] */;
    %708 = reshape(%707, newshape=[5, 3, 6]) /* ty=Tensor[(5, 3, 6), bool] */;
    %709 = @func_1797(%708) /* ty=(Tensor[(5, 3, 6), int8], Tensor[(5, 3, 6), float64], Tensor[(3, 7, 12), float32], Tensor[(5, 3, 6), bool], Tensor[(240), float32]) */;
    %710 = cast(%695, dtype="float32") /* ty=Tensor[(6, 11, 4), float32] */;
    %711 = reshape(%710, newshape=[1, 264]) /* ty=Tensor[(1, 264), float32] */;
    %712 = @func_2874(%711) /* ty=(Tensor[(3, 7, 12), float64], Tensor[(5, 12, 4), float32], Tensor[(1800), uint32], Tensor[(6, 11, 4), float32], Tensor[(1, 264), float32], Tensor[(24), int16], Tensor[(768), int32], Tensor[(5, 3, 6), bool]) */;
    %713 = %684.3;
    %714 = atanh(%696) /* ty=Tensor[(6, 11, 4), float32] */;
    %715 = %706.2;
    %716 = %709.4;
    %717 = %712.1;
    (%679, %713, %697, %714, %715, %716, %717)
  };
  %718() /* ty=(Tensor[(5, 3, 6), bool], Tensor[(5, 3, 6), float32], Tensor[(252), float32], Tensor[(6, 11, 4), float32], Tensor[(3, 7, 12), uint16], Tensor[(240), float32], Tensor[(5, 12, 4), float32]) */
}

def @func_3671() -> (Tensor[(3, 7, 12), float64], Tensor[(5, 12, 4), float32], Tensor[(5, 12, 4), bool]) {
  %719 = @func_3578() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %720 = @func_1440() /* ty=(Tensor[(5, 12, 4), bool], Tensor[(240), float32], Tensor[(5, 12, 4), float32]) */;
  %721 = @func_1451() /* ty=(Tensor[(5, 12, 4), bool], Tensor[(3, 7, 12), float64]) */;
  %722 = %719.0;
  %723 = %720.2;
  %724 = %721.0;
  (%722, %723, %724)
}

def @func_1226() -> Tensor[(240), float32] {
  %726 = fn () -> Tensor[(240), float32] {
    %725 = @func_1020() /* ty=(Tensor[(5, 12, 4), float64], Tensor[(240), float32], Tensor[(5, 12, 4), float64], Tensor[(2, 4, 15), float64]) */;
    %725.1
  };
  %726() /* ty=Tensor[(240), float32] */
}

def @func_2055(%var_2053: Tensor[(15, 5, 13), float32]) -> Tensor[(15, 5, 13), float32] {
  @func_2052(%var_2053) /* ty=Tensor[(15, 5, 13), float32] */
}

def @func_3151() -> (Tensor[(3, 7, 12), float32],) {
  @func_3149() /* ty=(Tensor[(3, 7, 12), float32],) */
}

def @func_2789(%var_2787: Tensor[(63, 1), float32]) -> (Tensor[(240), float32], Tensor[(9, 2, 7), bool], Tensor[(63, 1), float32]) {
  %727 = @func_1569() /* ty=(Tensor[(10, 15, 12), float64], Tensor[(5, 12, 4), bool], Tensor[(240), float32]) */;
  %728 = cast(%var_2787, dtype="float32") /* ty=Tensor[(63, 1), float32] */;
  %729 = reshape(%728, newshape=[9, 1, 7]) /* ty=Tensor[(9, 1, 7), float32] */;
  %730 = @func_2468(%729) /* ty=(Tensor[(3, 7, 12), float64], Tensor[(9, 2, 7), bool]) */;
  %731 = %727.2;
  %732 = %730.1;
  (%731, %732, %var_2787)
}

def @func_2771(%var_2768: Tensor[(4, 2, 6), int64], %var_2769: Tensor[(4, 2, 6), int64], %var_2770: Tensor[(4, 2, 6), int64]) -> (Tensor[(50), float32], Tensor[(4, 2, 6), bool]) {
  @func_2766(%var_2768, %var_2769, %var_2770) /* ty=(Tensor[(50), float32], Tensor[(4, 2, 6), bool]) */
}

def @func_5328() -> (Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), float32]) {
  @func_5326() /* ty=(Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), float32]) */
}

def @func_1483() -> (Tensor[(3, 7, 12), float64],) {
  %734 = fn () -> (Tensor[(3, 7, 12), float64],) {
    %733 = @func_1275() /* ty=Tensor[(3, 7, 12), float64] */;
    (%733,)
  };
  %734() /* ty=(Tensor[(3, 7, 12), float64],) */
}

def @func_1963() -> Tensor[(3, 7, 12), float64] {
  %735 = @func_339() /* ty=(Tensor[(3, 7, 12), float64],) */;
  %735.0
}

def @func_3188() -> (Tensor[(3, 7, 12), float64],) {
  @func_3186() /* ty=(Tensor[(3, 7, 12), float64],) */
}

def @func_4157(%var_4149: float32, %var_4150: Tensor[(9, 15, 10), float32]) -> (Tensor[(9, 15, 10), float32],) {
  %736 = cast(%var_4149, dtype="float32") /* ty=float32 */;
  %737 = cast(%var_4150, dtype="float32") /* ty=Tensor[(9, 15, 10), float32] */;
  %738 = power(%736, %737) /* ty=Tensor[(9, 15, 10), float32] */;
  (%738,)
}

def @func_4459() -> (Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), uint16], Tensor[(3, 7, 12), int16], Tensor[(5, 10), float64], Tensor[(50), float64]) {
  %757 = fn () -> (Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), uint16], Tensor[(3, 7, 12), int16], Tensor[(5, 10), float64], Tensor[(50), float64]) {
    %739 = @func_357() /* ty=(Tensor[(5, 12, 4), float32], Tensor[(3, 7, 12), float64]) */;
    %740 = @func_2088() /* ty=(Tensor[(3, 7, 12), float64],) */;
    %741 = %740.0;
    %742 = cast(%741, dtype="float32") /* ty=Tensor[(3, 7, 12), float32] */;
    %743 = reshape(%742, newshape=[3, 7, 12]) /* ty=Tensor[(3, 7, 12), float32] */;
    %744 = @func_3375(%743) /* ty=(Tensor[(3, 7, 12), uint64], Tensor[(3, 7, 12), uint16], Tensor[(3, 7, 12), float32]) */;
    %745 = cast(%741, dtype="float32") /* ty=Tensor[(3, 7, 12), float32] */;
    %746 = log(%745) /* ty=Tensor[(3, 7, 12), float32] */;
    %747 = cast(%741, dtype="int16") /* ty=Tensor[(3, 7, 12), int16] */;
    %748 = shape_of(%746, dtype="int32") /* ty=Tensor[(3), int32] */;
    %749 = cast(%746, dtype="int16") /* ty=Tensor[(3, 7, 12), int16] */;
    %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %751 = cast(meta[relay.Constant][25] /* ty=Tensor[(50), float64] */, dtype="float64") /* ty=Tensor[(50), float64] */;
    %752 = reshape(%751, newshape=[5, 10]) /* ty=Tensor[(5, 10), float64] */;
    %753 = %739.1;
    %754 = %744.1;
    %755 = maximum(%749, %750) /* ty=Tensor[(3, 7, 12), int16] */;
    %756 = @func_835(%752) /* ty=Tensor[(5, 10), float64] */;
    (%753, %754, %755, %756, meta[relay.Constant][25] /* ty=Tensor[(50), float64] */)
  };
  %757() /* ty=(Tensor[(3, 7, 12), float64], Tensor[(3, 7, 12), uint16], Tensor[(3, 7, 12), int16], Tensor[(5, 10), float64], Tensor[(50), float64]) */
}

def @func_3445() -> (Tensor[(3, 7, 12), float32],) {
  %758 = @func_1996() /* ty=(Tensor[(3, 7, 12), float32],) */;
  %759 = %758.0;
  (%759,)
}

def @func_554(%var_545: Tensor[(10, 15, 12), uint32]) -> (Tensor[(10, 15, 12), bool], Tensor[(5, 12, 4), float32]) {
  %760 = cast(meta[relay.Constant][26] /* ty=Tensor[(10, 15, 12), uint32] */, dtype="bool") /* ty=Tensor[(10, 15, 12), bool] */;
  %761 = shape_of(%var_545, dtype="int32") /* ty=Tensor[(3), int32] */;
  %762 = cast(%var_545, dtype="bool") /* ty=Tensor[(10, 15, 12), bool] */;
  %763 = dyn.reshape(%760, %761, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %764 = @func_357() /* ty=(Tensor[(5, 12, 4), float32], Tensor[(3, 7, 12), float64]) */;
  %765 = less_equal(%762, %763) /* ty=Tensor[(10, 15, 12), bool] */;
  %766 = %764.0;
  (%765, %766)
}

def @func_3519() -> (Tensor[(3, 7, 12), float32],) {
  @func_3517() /* ty=(Tensor[(3, 7, 12), float32],) */
}

def @func_2646(%var_2644: Tensor[(5, 12, 4), float64]) -> (Tensor[(3, 7, 12), float32], Tensor[(5, 12, 4), float32]) {
  @func_2643(%var_2644) /* ty=(Tensor[(3, 7, 12), float32], Tensor[(5, 12, 4), float32]) */
}

def @func_5702() -> Tensor[(240), float32] {
  %767 = @func_1569() /* ty=(Tensor[(10, 15, 12), float64], Tensor[(5, 12, 4), bool], Tensor[(240), float32]) */;
  %767.2
}

def @func_1656() -> (Tensor[(5, 3, 6), bool],) {
  @func_1654() /* ty=(Tensor[(5, 3, 6), bool],) */
}

def @func_693() -> (Tensor[(5, 12, 4), float32], Tensor[(10, 15, 12), bool], Tensor[(18, 100), uint32]) {
  %774 = fn () -> (Tensor[(5, 12, 4), float32], Tensor[(10, 15, 12), bool], Tensor[(18, 100), uint32]) {
    %768 = @func_109() /* ty=(Tensor[(5, 12, 4), float32],) */;
    %769 = cast(meta[relay.Constant][27] /* ty=Tensor[(18, 100), uint32] */, dtype="uint32") /* ty=Tensor[(18, 100), uint32] */;
    %770 = reshape(%769, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint32] */;
    %771 = @func_554(%770) /* ty=(Tensor[(10, 15, 12), bool], Tensor[(5, 12, 4), float32]) */;
    %772 = %768.0;
    %773 = %771.0;
    (%772, %773, meta[relay.Constant][27] /* ty=Tensor[(18, 100), uint32] */)
  };
  %774() /* ty=(Tensor[(5, 12, 4), float32], Tensor[(10, 15, 12), bool], Tensor[(18, 100), uint32]) */
}

def @func_5704() -> Tensor[(240), float32] {
  @func_5702() /* ty=Tensor[(240), float32] */
}

def @func_1208(%var_1193: Tensor[(8, 6, 16), int32], %var_1194: Tensor[(8, 6, 16), int32]) -> Tensor[(8, 6, 16), int32] {
  %775 = cast(%var_1194, dtype="int32") /* ty=Tensor[(8, 6, 16), int32] */;
  %776 = shape_of(%var_1193, dtype="int32") /* ty=Tensor[(3), int32] */;
  %777 = cast(%var_1193, dtype="int32") /* ty=Tensor[(8, 6, 16), int32] */;
  %778 = dyn.reshape(%775, %776, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  logical_xor(%777, %778) /* ty=Tensor[(8, 6, 16), int32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */The type inference pass was unable to infer a type for this expression.
This usually occurs when an operator call is under constrained in some way, check other reported errors for hints of what may of happened.

===================================
note: run with `TVM_BACKTRACE=1` environment variable to display a backtrace.
