==========mod==========
#[version = "0.0.5"]
def @func_2739() -> (Tensor[(9, 6, 5), uint8],) {
  %0 = @func_2474() /* ty=Tensor[(9, 6, 5), uint8] */;
  (%0,)
}

def @func_6489() -> (Tensor[(9, 6, 5), float32],) {
  %1 = @func_4177() /* ty=(Tensor[(4, 2, 14), float64], Tensor[(9, 6, 5), float32], Tensor[(4, 2, 14), float64]) */;
  %2 = %1.1;
  (%2,)
}

def @func_4313(%var_4275: Tensor[(10, 8, 4), float64], %var_4285: int32) -> (Tensor[(9, 6, 5), uint8], Tensor[(6, 14, 4), int32], Tensor[(10, 8, 4), float32], Tensor[(6, 2, 15), int16], Tensor[(180, 1), int16], Tensor[(10, 8, 4), int8], Tensor[(10, 8, 4), uint64]) {
  %3 = cast(%var_4285, dtype="int32") /* ty=int32 */;
  %4 = reshape(%3, newshape=[]) /* ty=int32 */;
  %5 = cast(%var_4275, dtype="float64") /* ty=Tensor[(10, 8, 4), float64] */;
  %6 = tan(%5) /* ty=Tensor[(10, 8, 4), float64] */;
  %7 = cast(%6, dtype="float32") /* ty=Tensor[(10, 8, 4), float32] */;
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(180, 1), int16] */, dtype="int16") /* ty=Tensor[(180, 1), int16] */;
  %9 = reshape(%8, newshape=[6, 2, 15]) /* ty=Tensor[(6, 2, 15), int16] */;
  %10 = cast(%6, dtype="int8") /* ty=Tensor[(10, 8, 4), int8] */;
  %11 = cast(%var_4285, dtype="int8") /* ty=int8 */;
  %12 = cast(%6, dtype="uint64") /* ty=Tensor[(10, 8, 4), uint64] */;
  %13 = cast(%var_4285, dtype="uint64") /* ty=uint64 */;
  %14 = @func_3166() /* ty=Tensor[(9, 6, 5), uint8] */;
  %15 = @func_429(%4) /* ty=Tensor[(6, 14, 4), int32] */;
  %16 = sigmoid(%7) /* ty=Tensor[(10, 8, 4), float32] */;
  %17 = @func_1282(%9) /* ty=Tensor[(6, 2, 15), int16] */;
  %18 = left_shift(%10, %11) /* ty=Tensor[(10, 8, 4), int8] */;
  %19 = add(%12, %13) /* ty=Tensor[(10, 8, 4), uint64] */;
  (%14, %15, %16, %17, meta[relay.Constant][0] /* ty=Tensor[(180, 1), int16] */, %18, %19)
}

def @func_3657(%var_3560: Tensor[(336), int8]) -> (Tensor[(9, 6, 5), float32], Tensor[(180), int16], Tensor[(1560), bool], Tensor[(1560, 336), float32], Tensor[(220), uint8], Tensor[(1560), bool]) {
  %20 = @func_3068() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float64], Tensor[(11, 5, 4), bool], Tensor[(220), uint8]) */;
  %21 = cast(%var_3560, dtype="int8") /* ty=Tensor[(336), int8] */;
  %22 = reshape(%21, newshape=[336]) /* ty=Tensor[(336), int8] */;
  %23 = @func_2301(%22) /* ty=(Tensor[(4, 2, 14), float64], Tensor[(180), int16], Tensor[(336), int8]) */;
  %24 = cast(meta[relay.Constant][1] /* ty=Tensor[(1560, 1), bool] */, dtype="bool") /* ty=Tensor[(1560, 1), bool] */;
  %25 = reshape(%24, newshape=[1560]) /* ty=Tensor[(1560), bool] */;
  %26 = @func_2753(%25) /* ty=(Tensor[(1560), bool],) */;
  %27 = cast(meta[relay.Constant][1] /* ty=Tensor[(1560, 1), bool] */, dtype="float32") /* ty=Tensor[(1560, 1), float32] */;
  %28 = cast(%var_3560, dtype="float32") /* ty=Tensor[(336), float32] */;
  %29 = @func_3068() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float64], Tensor[(11, 5, 4), bool], Tensor[(220), uint8]) */;
  %30 = cast(meta[relay.Constant][1] /* ty=Tensor[(1560, 1), bool] */, dtype="bool") /* ty=Tensor[(1560, 1), bool] */;
  %31 = reshape(%30, newshape=[1560]) /* ty=Tensor[(1560), bool] */;
  %32 = @func_2753(%31) /* ty=(Tensor[(1560), bool],) */;
  %33 = %20.0;
  %34 = %23.1;
  %35 = %26.0;
  %36 = power(%27, %28) /* ty=Tensor[(1560, 336), float32] */;
  %37 = %29.3;
  %38 = %32.0;
  (%33, %34, %35, %36, %37, %38)
}

def @func_9007() -> (Tensor[(9, 6, 5), float32],) {
  %39 = @func_2435() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %40 = %39.0;
  (%40,)
}

def @func_2226(%var_2215: Tensor[(4, 2, 14), float64]) -> (Tensor[(4, 2, 14), int16], Tensor[(13, 14, 10), float64], Tensor[(910, 2), float32]) {
  %41 = @func_2193() /* ty=Tensor[(4, 2, 14), float64] */;
  %42 = cast(%var_2215, dtype="int16") /* ty=Tensor[(4, 2, 14), int16] */;
  %43 = shape_of(%41, dtype="int32") /* ty=Tensor[(3), int32] */;
  %44 = cast(%41, dtype="int16") /* ty=Tensor[(4, 2, 14), int16] */;
  %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %46 = cast(meta[relay.Constant][2] /* ty=Tensor[(910, 2), float32] */, dtype="float32") /* ty=Tensor[(910, 2), float32] */;
  %47 = reshape(%46, newshape=[13, 14, 10]) /* ty=Tensor[(13, 14, 10), float32] */;
  %48 = @func_459(%47) /* ty=(Tensor[(13, 14, 10), float32], Tensor[(13, 14, 10), float64]) */;
  %49 = subtract(%44, %45) /* ty=Tensor[(4, 2, 14), int16] */;
  %50 = %48.1;
  (%49, %50, meta[relay.Constant][2] /* ty=Tensor[(910, 2), float32] */)
}

def @func_1638(%var_1614: Tensor[(11, 5, 4), uint8], %var_1620: Tensor[(11, 5, 4), uint8]) -> (Tensor[(11, 5, 4), uint8], Tensor[(11, 5, 4), bool]) {
  %51 = cast(%var_1614, dtype="uint8") /* ty=Tensor[(11, 5, 4), uint8] */;
  %52 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(11, 5, 4), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %53 = cast(meta[relay.Constant][3] /* ty=Tensor[(11, 5, 4), uint8] */, dtype="uint8") /* ty=Tensor[(11, 5, 4), uint8] */;
  %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %55 = cast(%var_1620, dtype="bool") /* ty=Tensor[(11, 5, 4), bool] */;
  %56 = shape_of(%var_1614, dtype="int32") /* ty=Tensor[(3), int32] */;
  %57 = cast(%var_1614, dtype="bool") /* ty=Tensor[(11, 5, 4), bool] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %59 = bitwise_and(%53, %54) /* ty=Tensor[(11, 5, 4), uint8] */;
  %60 = less_equal(%57, %58) /* ty=Tensor[(11, 5, 4), bool] */;
  (%59, %60)
}

def @func_969(%var_947: Tensor[(12, 2, 14), uint32], %var_948: Tensor[(12, 2, 14), uint32], %var_954: int32) -> (Tensor[(12, 2, 14), uint32], int32, Tensor[(6, 14, 4), float32]) {
  %61 = cast(%var_948, dtype="uint32") /* ty=Tensor[(12, 2, 14), uint32] */;
  %62 = shape_of(%var_947, dtype="int32") /* ty=Tensor[(3), int32] */;
  %63 = cast(%var_947, dtype="uint32") /* ty=Tensor[(12, 2, 14), uint32] */;
  %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %65 = cast(%var_954, dtype="int32") /* ty=int32 */;
  %66 = reshape(%65, newshape=[]) /* ty=int32 */;
  %67 = @func_429(%66) /* ty=Tensor[(6, 14, 4), int32] */;
  %68 = cast(%var_947, dtype="float32") /* ty=Tensor[(12, 2, 14), float32] */;
  %69 = shape_of(%67, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(%67, dtype="float32") /* ty=Tensor[(6, 14, 4), float32] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %72 = multiply(%63, %64) /* ty=Tensor[(12, 2, 14), uint32] */;
  %73 = divide(%70, %71) /* ty=Tensor[(6, 14, 4), float32] */;
  (%72, %var_954, %73)
}

def @func_2474() -> Tensor[(9, 6, 5), uint8] {
  %74 = @func_2049() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8]) */;
  %74.1
}

def @func_6396() -> (Tensor[(4, 2, 14), bool], Tensor[(13, 14, 10), bool]) {
  %75 = @func_2924() /* ty=(Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), uint8]) */;
  %76 = @func_6015() /* ty=Tensor[(13, 14, 10), float64] */;
  %77 = cast(%76, dtype="float64") /* ty=Tensor[(13, 14, 10), float64] */;
  %78 = cosh(%77) /* ty=Tensor[(13, 14, 10), float64] */;
  %79 = cast(%78, dtype="bool") /* ty=Tensor[(13, 14, 10), bool] */;
  %80 = shape_of(%76, dtype="int32") /* ty=Tensor[(3), int32] */;
  %81 = cast(%76, dtype="bool") /* ty=Tensor[(13, 14, 10), bool] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %83 = %75.0;
  %84 = less_equal(%81, %82) /* ty=Tensor[(13, 14, 10), bool] */;
  (%83, %84)
}

def @func_6731() -> (Tensor[(9, 6, 5), float32], Tensor[(7, 16, 3), bool], Tensor[(336), int8]) {
  %85 = @func_2435() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %86 = cast(meta[relay.Constant][4] /* ty=Tensor[(336), int8] */, dtype="int8") /* ty=Tensor[(336), int8] */;
  %87 = cast(meta[relay.Constant][4] /* ty=Tensor[(336), int8] */, dtype="int8") /* ty=Tensor[(336), int8] */;
  %88 = reshape(%86, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), int8] */;
  %89 = reshape(%87, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), int8] */;
  %90 = %85.0;
  %91 = @func_568(%88, %89) /* ty=Tensor[(7, 16, 3), bool] */;
  (%90, %91, meta[relay.Constant][4] /* ty=Tensor[(336), int8] */)
}

def @func_2637() -> (Tensor[(9, 6, 5), uint8], Tensor[(10, 12, 13), bool], bool, Tensor[(1560), bool]) {
  %92 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %93 = cast(meta[relay.Constant][5] /* ty=Tensor[(1560), bool] */, dtype="bool") /* ty=Tensor[(1560), bool] */;
  %94 = reshape(%92, newshape=[]) /* ty=bool */;
  %95 = reshape(%93, newshape=[10, 12, 13]) /* ty=Tensor[(10, 12, 13), bool] */;
  %96 = @func_1924(%94, %95) /* ty=(Tensor[(10, 12, 13), bool], int32, Tensor[(35, 9), float32]) */;
  %97 = @func_2061() /* ty=Tensor[(9, 6, 5), uint8] */;
  %98 = %96.0;
  (%97, %98, False /* ty=bool */, meta[relay.Constant][5] /* ty=Tensor[(1560), bool] */)
}

def @func_6967(%var_6943: Tensor[(5, 44), uint8]) -> (Tensor[(4, 2, 14), bool], Tensor[(11, 5, 4), uint8], int32, Tensor[(5, 44), uint8], Tensor[(4, 2, 14), float32]) {
  %99 = cast(2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %100 = cast(%var_6943, dtype="uint8") /* ty=Tensor[(5, 44), uint8] */;
  %101 = reshape(%99, newshape=[]) /* ty=int32 */;
  %102 = reshape(%100, newshape=[5, 44]) /* ty=Tensor[(5, 44), uint8] */;
  %103 = @func_2397(%101, %102) /* ty=(Tensor[(9, 6, 5), float64], int32, Tensor[(1, 336), uint32], int32, Tensor[(11, 5, 4), uint8], Tensor[(5, 44), uint8]) */;
  %104 = @func_3822() /* ty=Tensor[(4, 2, 14), bool] */;
  %105 = %103.4;
  %106 = @func_2860() /* ty=Tensor[(4, 2, 14), float32] */;
  (%104, %105, 2 /* ty=int32 */, %var_6943, %106)
}

def @func_7602() -> Tensor[(4, 2, 14), float64] {
  %107 = @func_4111() /* ty=(Tensor[(4, 2, 14), float64], Tensor[(13, 14, 10), float64], Tensor[(4, 2, 14), float64]) */;
  %107.0
}

def @func_8574() -> (Tensor[(4, 2, 14), float64], Tensor[(9, 6, 5), uint8]) {
  %108 = @func_4940() /* ty=Tensor[(4, 2, 14), float64] */;
  %109 = @func_7662() /* ty=Tensor[(9, 6, 5), uint8] */;
  (%108, %109)
}

def @func_9041() -> Tensor[(9, 6, 5), float32] {
  %110 = @func_2435() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %110.0
}

def @func_9701() -> (Tensor[(9, 6, 5), float64],) {
  %111 = @func_7520() /* ty=(Tensor[(9, 6, 5), float64],) */;
  %112 = %111.0;
  (%112,)
}

def @func_5593() -> Tensor[(9, 6, 5), float32] {
  %113 = @func_2435() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %113.0
}

def @func_2924() -> (Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), uint8]) {
  %114 = @func_2193() /* ty=Tensor[(4, 2, 14), float64] */;
  %115 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 2, 14), float64] */, dtype="bool") /* ty=Tensor[(4, 2, 14), bool] */;
  %116 = shape_of(%114, dtype="int32") /* ty=Tensor[(3), int32] */;
  %117 = cast(%114, dtype="bool") /* ty=Tensor[(4, 2, 14), bool] */;
  %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %119 = @func_2739() /* ty=(Tensor[(9, 6, 5), uint8],) */;
  %120 = logical_and(%117, %118) /* ty=Tensor[(4, 2, 14), bool] */;
  %121 = %119.0;
  (%120, %121)
}

def @func_4765() -> (Tensor[(4, 2, 14), float64], Tensor[(2, 7, 11), float64], Tensor[(154, 1), float64]) {
  %122 = cast(meta[relay.Constant][7] /* ty=Tensor[(154, 1), float64] */, dtype="float64") /* ty=Tensor[(154, 1), float64] */;
  %123 = reshape(%122, newshape=[2, 7, 11]) /* ty=Tensor[(2, 7, 11), float64] */;
  %124 = @func_3757() /* ty=Tensor[(4, 2, 14), float64] */;
  %125 = @func_3913(%123) /* ty=Tensor[(2, 7, 11), float64] */;
  (%124, %125, meta[relay.Constant][7] /* ty=Tensor[(154, 1), float64] */)
}

def @func_10242() -> Tensor[(9, 6, 5), float32] {
  %126 = @func_2929() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %126.0
}

def @func_6755() -> Tensor[(2, 7, 11), bool] {
  %127 = @func_4620() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(2, 7, 11), bool], Tensor[(2, 7, 11), float32], Tensor[(9, 6, 5), float32]) */;
  %127.1
}

def @func_7662() -> Tensor[(9, 6, 5), uint8] {
  %128 = @func_5562() /* ty=(Tensor[(9, 6, 5), uint8],) */;
  %128.0
}

def @func_4120() -> Tensor[(9, 6, 5), float32] {
  %129 = @func_2435() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %129.0
}

def @func_9568() -> (Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8]) {
  %130 = @func_2739() /* ty=(Tensor[(9, 6, 5), uint8],) */;
  %131 = @func_2860() /* ty=Tensor[(4, 2, 14), float32] */;
  %132 = %130.0;
  (%131, %132)
}

def @func_4906(%var_4898: Tensor[(12, 9, 14), float32], %var_4903: Tensor[(315), float32], %var_4904: int32) -> (Tensor[(12, 9, 14), bool], int32, Tensor[(315), float32], int32) {
  %133 = cast(meta[relay.Constant][8] /* ty=Tensor[(1, 9, 14), float32] */, dtype="bool") /* ty=Tensor[(1, 9, 14), bool] */;
  %134 = cast(%var_4898, dtype="bool") /* ty=Tensor[(12, 9, 14), bool] */;
  %135 = cast(%var_4903, dtype="float32") /* ty=Tensor[(315), float32] */;
  %136 = cast(%var_4904, dtype="int32") /* ty=int32 */;
  %137 = reshape(%135, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), float32] */;
  %138 = reshape(%136, newshape=[]) /* ty=int32 */;
  %139 = @func_1767(%137, %138) /* ty=(Tensor[(3, 7, 15), float32], Tensor[(6, 14, 4), float32], int32, Tensor[(9, 2, 13), float32], Tensor[(234, 336), float64]) */;
  %140 = less(%133, %134) /* ty=Tensor[(12, 9, 14), bool] */;
  %141 = %139.2;
  (%140, %141, %var_4903, %var_4904)
}

def @func_4940() -> Tensor[(4, 2, 14), float64] {
  @func_2193() /* ty=Tensor[(4, 2, 14), float64] */
}

def @func_10007() -> Tensor[(9, 6, 5), float32] {
  @func_9128() /* ty=Tensor[(9, 6, 5), float32] */
}

def @func_5874(%var_5815: Tensor[(11, 15, 6), int32], %var_5824: Tensor[(11, 15, 6), int32]) -> (Tensor[(11, 15, 6), uint64], Tensor[(11, 15, 6), int32], Tensor[(11, 15, 6), bool], Tensor[(11, 15, 6), float32]) {
  %142 = cast(meta[relay.Constant][9] /* ty=Tensor[(11, 15, 6), int32] */, dtype="int32") /* ty=Tensor[(11, 15, 6), int32] */;
  %143 = shape_of(%var_5815, dtype="int32") /* ty=Tensor[(3), int32] */;
  %144 = cast(%var_5815, dtype="int32") /* ty=Tensor[(11, 15, 6), int32] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %146 = bitwise_and(%144, %145) /* ty=Tensor[(11, 15, 6), int32] */;
  %147 = cast(%var_5824, dtype="uint64") /* ty=Tensor[(11, 15, 6), uint64] */;
  %148 = shape_of(%146, dtype="int32") /* ty=Tensor[(3), int32] */;
  %149 = cast(%146, dtype="uint64") /* ty=Tensor[(11, 15, 6), uint64] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %151 = cast(%var_5815, dtype="int64") /* ty=Tensor[(11, 15, 6), int64] */;
  %152 = shape_of(%146, dtype="int32") /* ty=Tensor[(3), int32] */;
  %153 = cast(%146, dtype="int64") /* ty=Tensor[(11, 15, 6), int64] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %155 = maximum(%153, %154) /* ty=Tensor[(11, 15, 6), int64] */;
  %156 = cast(%155, dtype="float64") /* ty=Tensor[(11, 15, 6), float64] */;
  %157 = asinh(%156) /* ty=Tensor[(11, 15, 6), float64] */;
  %158 = cast(%var_5815, dtype="int32") /* ty=Tensor[(11, 15, 6), int32] */;
  %159 = shape_of(%157, dtype="int32") /* ty=Tensor[(3), int32] */;
  %160 = cast(%157, dtype="int32") /* ty=Tensor[(11, 15, 6), int32] */;
  %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %162 = cast(%157, dtype="float64") /* ty=Tensor[(11, 15, 6), float64] */;
  %163 = tan(%162) /* ty=Tensor[(11, 15, 6), float64] */;
  %164 = cast(%163, dtype="bool") /* ty=Tensor[(11, 15, 6), bool] */;
  %165 = shape_of(%var_5824, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(%var_5824, dtype="bool") /* ty=Tensor[(11, 15, 6), bool] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %168 = cast(%163, dtype="float32") /* ty=Tensor[(11, 15, 6), float32] */;
  %169 = logical_xor(%149, %150) /* ty=Tensor[(11, 15, 6), uint64] */;
  %170 = bitwise_or(%160, %161) /* ty=Tensor[(11, 15, 6), int32] */;
  %171 = logical_or(%166, %167) /* ty=Tensor[(11, 15, 6), bool] */;
  %172 = cosh(%168) /* ty=Tensor[(11, 15, 6), float32] */;
  (%169, %170, %171, %172)
}

def @func_10052() -> (Tensor[(9, 6, 5), float32], Tensor[(336), int8], Tensor[(9, 6, 5), uint8], Tensor[(2, 7, 11), float64]) {
  %173 = @func_5450() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %174 = @func_6731() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(7, 16, 3), bool], Tensor[(336), int8]) */;
  %175 = @func_2794() /* ty=(Tensor[(9, 6, 5), uint8],) */;
  %176 = @func_9451() /* ty=(Tensor[(2, 7, 11), float64],) */;
  %177 = %173.0;
  %178 = %174.2;
  %179 = %175.0;
  %180 = %176.0;
  (%177, %178, %179, %180)
}

def @func_2147(%var_2141: Tensor[(336), int8]) -> (Tensor[(9, 6, 5), float32], Tensor[(6, 2, 15), int16], Tensor[(180), int16], Tensor[(7, 16, 3), bool], Tensor[(336), int8], Tensor[(7, 16, 3), bool]) {
  %181 = @func_2049() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8]) */;
  %182 = cast(meta[relay.Constant][10] /* ty=Tensor[(180), int16] */, dtype="int16") /* ty=Tensor[(180), int16] */;
  %183 = reshape(%182, newshape=[6, 2, 15]) /* ty=Tensor[(6, 2, 15), int16] */;
  %184 = cast(%var_2141, dtype="int8") /* ty=Tensor[(336), int8] */;
  %185 = cast(%var_2141, dtype="int8") /* ty=Tensor[(336), int8] */;
  %186 = reshape(%184, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), int8] */;
  %187 = reshape(%185, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), int8] */;
  %188 = cast(%var_2141, dtype="int8") /* ty=Tensor[(336), int8] */;
  %189 = @func_568(%186, %187) /* ty=Tensor[(7, 16, 3), bool] */;
  %190 = cast(%189, dtype="int8") /* ty=Tensor[(7, 16, 3), int8] */;
  %191 = reshape(%188, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), int8] */;
  %192 = reshape(%190, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), int8] */;
  %193 = %181.0;
  %194 = @func_1282(%183) /* ty=Tensor[(6, 2, 15), int16] */;
  %195 = @func_568(%191, %192) /* ty=Tensor[(7, 16, 3), bool] */;
  (%193, %194, meta[relay.Constant][10] /* ty=Tensor[(180), int16] */, %189, %var_2141, %195)
}

def @func_459(%var_443: Tensor[(13, 14, 10), float32]) -> (Tensor[(13, 14, 10), float32], Tensor[(13, 14, 10), float64]) {
  %196 = cast(meta[relay.Constant][11] /* ty=Tensor[(13, 14, 1), float32] */, dtype="float32") /* ty=Tensor[(13, 14, 1), float32] */;
  %197 = cast(%var_443, dtype="float32") /* ty=Tensor[(13, 14, 10), float32] */;
  %198 = cast(%var_443, dtype="float64") /* ty=Tensor[(13, 14, 10), float64] */;
  %199 = floor_divide(%196, %197) /* ty=Tensor[(13, 14, 10), float32] */;
  %200 = asin(%198) /* ty=Tensor[(13, 14, 10), float64] */;
  (%199, %200)
}

def @func_3757() -> Tensor[(4, 2, 14), float64] {
  @func_2271() /* ty=Tensor[(4, 2, 14), float64] */
}

def @func_6442(%var_6424: Tensor[(2, 10), float32]) -> (Tensor[(2, 10), float32], bool) {
  %201 = cast(%var_6424, dtype="float32") /* ty=Tensor[(2, 10), float32] */;
  %202 = @func_2637() /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(10, 12, 13), bool], bool, Tensor[(1560), bool]) */;
  %203 = asin(%201) /* ty=Tensor[(2, 10), float32] */;
  %204 = %202.2;
  (%203, %204)
}

def @func_2271() -> Tensor[(4, 2, 14), float64] {
  @func_2193() /* ty=Tensor[(4, 2, 14), float64] */
}

def @func_2331() -> (Tensor[(9, 6, 5), float32],) {
  %205 = @func_2049() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8]) */;
  %206 = %205.0;
  (%206,)
}

def @func_4721(%var_4718: int32) -> (Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float32], Tensor[(10, 8, 4), float32], Tensor[(320), float64], int32) {
  %207 = @func_3327() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %208 = cast(meta[relay.Constant][12] /* ty=Tensor[(320), float64] */, dtype="float64") /* ty=Tensor[(320), float64] */;
  %209 = cast(%var_4718, dtype="int32") /* ty=int32 */;
  %210 = reshape(%208, newshape=[10, 8, 4]) /* ty=Tensor[(10, 8, 4), float64] */;
  %211 = reshape(%209, newshape=[]) /* ty=int32 */;
  %212 = @func_4313(%210, %211) /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(6, 14, 4), int32], Tensor[(10, 8, 4), float32], Tensor[(6, 2, 15), int16], Tensor[(180, 1), int16], Tensor[(10, 8, 4), int8], Tensor[(10, 8, 4), uint64]) */;
  %213 = @func_4120() /* ty=Tensor[(9, 6, 5), float32] */;
  %214 = %207.0;
  %215 = %212.2;
  (%213, %214, %215, meta[relay.Constant][12] /* ty=Tensor[(320), float64] */, %var_4718)
}

def @func_4620() -> (Tensor[(9, 6, 5), float32], Tensor[(2, 7, 11), bool], Tensor[(2, 7, 11), float32], Tensor[(9, 6, 5), float32]) {
  %216 = @func_3327() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %217 = cast(meta[relay.Constant][13] /* ty=Tensor[(154), float64] */, dtype="float64") /* ty=Tensor[(154), float64] */;
  %218 = reshape(%217, newshape=[2, 7, 11]) /* ty=Tensor[(2, 7, 11), float64] */;
  %219 = @func_3913(%218) /* ty=Tensor[(2, 7, 11), float64] */;
  %220 = cast(meta[relay.Constant][13] /* ty=Tensor[(154), float64] */, dtype="bool") /* ty=Tensor[(154), bool] */;
  %221 = shape_of(%219, dtype="int32") /* ty=Tensor[(3), int32] */;
  %222 = cast(%219, dtype="bool") /* ty=Tensor[(2, 7, 11), bool] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %224 = cast(meta[relay.Constant][13] /* ty=Tensor[(154), float64] */, dtype="float32") /* ty=Tensor[(154), float32] */;
  %225 = shape_of(%219, dtype="int32") /* ty=Tensor[(3), int32] */;
  %226 = cast(%219, dtype="float32") /* ty=Tensor[(2, 7, 11), float32] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %228 = @func_3752() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float32]) */;
  %229 = %216.0;
  %230 = greater(%222, %223) /* ty=Tensor[(2, 7, 11), bool] */;
  %231 = floor_divide(%226, %227) /* ty=Tensor[(2, 7, 11), float32] */;
  %232 = %228.1;
  (%229, %230, %231, %232)
}

def @func_2773(%var_2763: Tensor[(2, 14, 15), float32], %var_2764: Tensor[(2, 14, 15), float32]) -> Tensor[(2, 14, 15), float32] {
  %233 = cast(%var_2764, dtype="float32") /* ty=Tensor[(2, 14, 15), float32] */;
  %234 = shape_of(%var_2763, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(%var_2763, dtype="float32") /* ty=Tensor[(2, 14, 15), float32] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%235, %236) /* ty=Tensor[(2, 14, 15), float32] */
}

def @func_1767(%var_1744: Tensor[(3, 7, 15), float32], %var_1749: int32) -> (Tensor[(3, 7, 15), float32], Tensor[(6, 14, 4), float32], int32, Tensor[(9, 2, 13), float32], Tensor[(234, 336), float64]) {
  %237 = cast(%var_1744, dtype="float32") /* ty=Tensor[(3, 7, 15), float32] */;
  %238 = cast(meta[relay.Constant][14] /* ty=Tensor[(336), uint32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %239 = cast(meta[relay.Constant][14] /* ty=Tensor[(336), uint32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %240 = cast(%var_1749, dtype="int32") /* ty=int32 */;
  %241 = reshape(%238, newshape=[12, 2, 14]) /* ty=Tensor[(12, 2, 14), uint32] */;
  %242 = reshape(%239, newshape=[12, 2, 14]) /* ty=Tensor[(12, 2, 14), uint32] */;
  %243 = reshape(%240, newshape=[]) /* ty=int32 */;
  %244 = @func_969(%241, %242, %243) /* ty=(Tensor[(12, 2, 14), uint32], int32, Tensor[(6, 14, 4), float32]) */;
  %245 = cast(meta[relay.Constant][15] /* ty=Tensor[(234, 1), int64] */, dtype="int64") /* ty=Tensor[(234, 1), int64] */;
  %246 = reshape(%245, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), int64] */;
  %247 = @func_400(%246) /* ty=(Tensor[(9, 2, 13), float32],) */;
  %248 = cast(meta[relay.Constant][15] /* ty=Tensor[(234, 1), int64] */, dtype="float64") /* ty=Tensor[(234, 1), float64] */;
  %249 = cast(meta[relay.Constant][14] /* ty=Tensor[(336), uint32] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %250 = cos(%237) /* ty=Tensor[(3, 7, 15), float32] */;
  %251 = %244.2;
  %252 = %247.0;
  %253 = subtract(%248, %249) /* ty=Tensor[(234, 336), float64] */;
  (%250, %251, %var_1749, %252, %253)
}

def @func_10342() -> (Tensor[(4, 2, 14), float32], Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), uint8]) {
  %254 = @func_6076() /* ty=(Tensor[(4, 2, 14), bool], Tensor[(11, 5, 4), uint8], Tensor[(220, 1), uint8], Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), float32]) */;
  %255 = @func_8459() /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), float32]) */;
  %256 = @func_2860() /* ty=Tensor[(4, 2, 14), float32] */;
  %257 = %254.0;
  %258 = %255.1;
  (%256, %257, %258)
}

def @func_5409(%var_5333: Tensor[(4, 2, 14), float64]) -> (Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), uint8]) {
  %259 = @func_2193() /* ty=Tensor[(4, 2, 14), float64] */;
  %260 = cast(%var_5333, dtype="float32") /* ty=Tensor[(4, 2, 14), float32] */;
  %261 = shape_of(%259, dtype="int32") /* ty=Tensor[(3), int32] */;
  %262 = cast(%259, dtype="float32") /* ty=Tensor[(4, 2, 14), float32] */;
  %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %264 = @func_2883() /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8]) */;
  %265 = mod(%262, %263) /* ty=Tensor[(4, 2, 14), float32] */;
  %266 = @func_2061() /* ty=Tensor[(9, 6, 5), uint8] */;
  %267 = %264.1;
  %268 = @func_5207() /* ty=Tensor[(9, 6, 5), uint8] */;
  (%265, %266, %267, %268)
}

def @func_6850() -> (Tensor[(4, 2, 14), bool],) {
  %269 = @func_5247() /* ty=Tensor[(4, 2, 14), bool] */;
  (%269,)
}

def @func_9957(%var_9891: Tensor[(1560), bool], %var_9942: Tensor[(336), int8]) -> (Tensor[(9, 6, 5), float32], Tensor[(1560), bool], Tensor[(11, 5, 4), uint8], Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float32], Tensor[(4, 2, 14), float32], Tensor[(5), float32], Tensor[(1560), float64], Tensor[(13, 14, 10), float32], Tensor[(336), int8]) {
  %270 = @func_8081() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float32]) */;
  %271 = cast(%var_9891, dtype="bool") /* ty=Tensor[(1560), bool] */;
  %272 = reshape(%271, newshape=[1560]) /* ty=Tensor[(1560), bool] */;
  %273 = @func_2753(%272) /* ty=(Tensor[(1560), bool],) */;
  %274 = @func_8113() /* ty=(Tensor[(4, 2, 14), float64], Tensor[(11, 5, 4), uint8]) */;
  %275 = @func_7647() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %276 = cast(meta[relay.Constant][16] /* ty=Tensor[(5), float32] */, dtype="float32") /* ty=Tensor[(5), float32] */;
  %277 = reshape(%276, newshape=[1, 1, 5]) /* ty=Tensor[(1, 1, 5), float32] */;
  %278 = @func_3992(%277) /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8], Tensor[(?, ?, 5), uint32]) */;
  %279 = cast(%var_9891, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %280 = cast(%var_9942, dtype="int8") /* ty=Tensor[(336), int8] */;
  %281 = reshape(%280, newshape=[7, 12, 4]) /* ty=Tensor[(7, 12, 4), int8] */;
  %282 = @func_4462(%281) /* ty=(Tensor[(7, 12, 4), bool], Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), float32], Tensor[(13, 14, 10), float32], Tensor[(1820), float32], Tensor[(1560), bool], Tensor[(1560), bool]) */;
  %283 = %270.1;
  %284 = %273.0;
  %285 = %274.1;
  %286 = %275.0;
  %287 = @func_5593() /* ty=Tensor[(9, 6, 5), float32] */;
  %288 = %278.0;
  %289 = tan(%279) /* ty=Tensor[(1560), float64] */;
  %290 = %282.5;
  (%283, %284, %285, %286, %287, %288, meta[relay.Constant][16] /* ty=Tensor[(5), float32] */, %289, %290, %var_9942)
}

def @func_4831() -> Tensor[(9, 6, 5), uint8] {
  %291 = @func_2559() /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(6, 2, 15), float64]) */;
  %291.0
}

def @func_8194() -> (Tensor[(2, 7, 11), bool], Tensor[(6, 14, 4), float32], Tensor[(336), uint32], int32) {
  %292 = cast(meta[relay.Constant][17] /* ty=Tensor[(336), uint32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %293 = cast(meta[relay.Constant][17] /* ty=Tensor[(336), uint32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %294 = cast(-7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %295 = reshape(%292, newshape=[12, 2, 14]) /* ty=Tensor[(12, 2, 14), uint32] */;
  %296 = reshape(%293, newshape=[12, 2, 14]) /* ty=Tensor[(12, 2, 14), uint32] */;
  %297 = reshape(%294, newshape=[]) /* ty=int32 */;
  %298 = @func_969(%295, %296, %297) /* ty=(Tensor[(12, 2, 14), uint32], int32, Tensor[(6, 14, 4), float32]) */;
  %299 = @func_6755() /* ty=Tensor[(2, 7, 11), bool] */;
  %300 = %298.2;
  (%299, %300, meta[relay.Constant][17] /* ty=Tensor[(336), uint32] */, -7 /* ty=int32 */)
}

def @func_3166() -> Tensor[(9, 6, 5), uint8] {
  @func_2474() /* ty=Tensor[(9, 6, 5), uint8] */
}

def @func_8479() -> (Tensor[(4, 2, 14), float64],) {
  %301 = @func_8113() /* ty=(Tensor[(4, 2, 14), float64], Tensor[(11, 5, 4), uint8]) */;
  %302 = %301.0;
  (%302,)
}

def @func_2397(%var_2375: int32, %var_2395: Tensor[(5, 44), uint8]) -> (Tensor[(9, 6, 5), float64], int32, Tensor[(1, 336), uint32], int32, Tensor[(11, 5, 4), uint8], Tensor[(5, 44), uint8]) {
  %303 = @func_2049() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8]) */;
  %304 = %303.0;
  %305 = cast(%304, dtype="float64") /* ty=Tensor[(9, 6, 5), float64] */;
  %306 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 336), uint32] */, dtype="uint32") /* ty=Tensor[(1, 336), uint32] */;
  %307 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 336), uint32] */, dtype="uint32") /* ty=Tensor[(1, 336), uint32] */;
  %308 = cast(%var_2375, dtype="int32") /* ty=int32 */;
  %309 = reshape(%306, newshape=[12, 2, 14]) /* ty=Tensor[(12, 2, 14), uint32] */;
  %310 = reshape(%307, newshape=[12, 2, 14]) /* ty=Tensor[(12, 2, 14), uint32] */;
  %311 = reshape(%308, newshape=[]) /* ty=int32 */;
  %312 = @func_969(%309, %310, %311) /* ty=(Tensor[(12, 2, 14), uint32], int32, Tensor[(6, 14, 4), float32]) */;
  %313 = cast(%var_2395, dtype="uint8") /* ty=Tensor[(5, 44), uint8] */;
  %314 = cast(%var_2395, dtype="uint8") /* ty=Tensor[(5, 44), uint8] */;
  %315 = reshape(%313, newshape=[11, 5, 4]) /* ty=Tensor[(11, 5, 4), uint8] */;
  %316 = reshape(%314, newshape=[11, 5, 4]) /* ty=Tensor[(11, 5, 4), uint8] */;
  %317 = @func_1638(%315, %316) /* ty=(Tensor[(11, 5, 4), uint8], Tensor[(11, 5, 4), bool]) */;
  %318 = exp(%305) /* ty=Tensor[(9, 6, 5), float64] */;
  %319 = %312.1;
  %320 = %317.0;
  (%318, %319, meta[relay.Constant][18] /* ty=Tensor[(1, 336), uint32] */, %var_2375, %320, %var_2395)
}

def @func_10155() -> Tensor[(4, 2, 8), bool] {
  %321 = @func_7449() /* ty=(Tensor[(4, 2, 8), uint8], Tensor[(4, 2, 8), bool]) */;
  %321.1
}

def @func_5971() -> (Tensor[(4, 2, 14), bool], Tensor[(4, 2, 14), bool]) {
  %322 = @func_4535() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), float32]) */;
  %323 = @func_5247() /* ty=Tensor[(4, 2, 14), bool] */;
  %324 = %322.2;
  (%323, %324)
}

def @func_5450() -> (Tensor[(9, 6, 5), float32],) {
  %325 = @func_4033() /* ty=Tensor[(9, 6, 5), float32] */;
  (%325,)
}

def @func_6568() -> (Tensor[(9, 6, 5), uint8],) {
  %326 = @func_2739() /* ty=(Tensor[(9, 6, 5), uint8],) */;
  %327 = %326.0;
  (%327,)
}

def @func_8150(%var_8119: Tensor[(4, 14, 6), float32], %var_8132: Tensor[(4, 14, 6), float32]) -> (Tensor[(9, 6, 5), float32], Tensor[(4, 14, 6), bool]) {
  %328 = @func_8081() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float32]) */;
  %329 = cast(%var_8132, dtype="int8") /* ty=Tensor[(4, 14, 6), int8] */;
  %330 = shape_of(%var_8119, dtype="int32") /* ty=Tensor[(3), int32] */;
  %331 = cast(%var_8119, dtype="int8") /* ty=Tensor[(4, 14, 6), int8] */;
  %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %333 = logical_xor(%331, %332) /* ty=Tensor[(4, 14, 6), int8] */;
  %334 = cast(%var_8119, dtype="float32") /* ty=Tensor[(4, 14, 6), float32] */;
  %335 = log2(%334) /* ty=Tensor[(4, 14, 6), float32] */;
  %336 = cast(%335, dtype="bool") /* ty=Tensor[(4, 14, 6), bool] */;
  %337 = shape_of(%333, dtype="int32") /* ty=Tensor[(3), int32] */;
  %338 = cast(%333, dtype="bool") /* ty=Tensor[(4, 14, 6), bool] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %340 = %328.0;
  %341 = less_equal(%338, %339) /* ty=Tensor[(4, 14, 6), bool] */;
  (%340, %341)
}

def @func_6248() -> (Tensor[(9, 6, 5), float32], Tensor[(4, 2, 14), float32]) {
  %342 = @func_3010() /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8]) */;
  %343 = @func_4120() /* ty=Tensor[(9, 6, 5), float32] */;
  %344 = %342.0;
  (%343, %344)
}

def @func_3913(%var_3899: Tensor[(2, 7, 11), float64]) -> Tensor[(2, 7, 11), float64] {
  %345 = cast(meta[relay.Constant][19] /* ty=Tensor[(2, 7, 11), float64] */, dtype="float64") /* ty=Tensor[(2, 7, 11), float64] */;
  %346 = shape_of(%var_3899, dtype="int32") /* ty=Tensor[(3), int32] */;
  %347 = cast(%var_3899, dtype="float64") /* ty=Tensor[(2, 7, 11), float64] */;
  %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%347, %348) /* ty=Tensor[(2, 7, 11), float64] */
}

def @func_4252() -> (Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float32], Tensor[(4, 2, 14), int16], Tensor[(112), float64]) {
  %349 = @func_2331() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %350 = cast(meta[relay.Constant][20] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
  %351 = reshape(%350, newshape=[4, 2, 14]) /* ty=Tensor[(4, 2, 14), float64] */;
  %352 = @func_2226(%351) /* ty=(Tensor[(4, 2, 14), int16], Tensor[(13, 14, 10), float64], Tensor[(910, 2), float32]) */;
  %353 = @func_4120() /* ty=Tensor[(9, 6, 5), float32] */;
  %354 = %349.0;
  %355 = %352.0;
  (%353, %354, %355, meta[relay.Constant][20] /* ty=Tensor[(112), float64] */)
}

def @func_3752() -> (Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float32]) {
  %356 = @func_2435() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %357 = @func_3327() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %358 = %356.0;
  %359 = %357.0;
  (%358, %359)
}

def @func_3822() -> Tensor[(4, 2, 14), bool] {
  %360 = @func_2924() /* ty=(Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), uint8]) */;
  %360.0
}

def @func_9201(%var_9173: float64, %var_9174: Tensor[(9, 11, 11), float64]) -> Tensor[(9, 11, 11), float64] {
  %361 = cast(%var_9173, dtype="float64") /* ty=float64 */;
  %362 = cast(%var_9174, dtype="float64") /* ty=Tensor[(9, 11, 11), float64] */;
  power(%361, %362) /* ty=Tensor[(9, 11, 11), float64] */
}

def @func_5053(%var_5018: float64) -> (Tensor[(2, 2, 12), float64], Tensor[(9, 6, 5), float32], Tensor[(2, 2, 12), float32]) {
  %363 = cast(%var_5018, dtype="float64") /* ty=float64 */;
  %364 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 2, 12), float64] */, dtype="float64") /* ty=Tensor[(2, 2, 12), float64] */;
  %365 = @func_4620() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(2, 7, 11), bool], Tensor[(2, 7, 11), float32], Tensor[(9, 6, 5), float32]) */;
  %366 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 2, 12), float64] */, dtype="float32") /* ty=Tensor[(2, 2, 12), float32] */;
  %367 = multiply(%363, %364) /* ty=Tensor[(2, 2, 12), float64] */;
  %368 = %365.0;
  %369 = acos(%366) /* ty=Tensor[(2, 2, 12), float32] */;
  (%367, %368, %369)
}

def @func_10060() -> (Tensor[(9, 6, 5), float64],) {
  %370 = @func_5918() /* ty=(Tensor[(9, 6, 5), float64],) */;
  %371 = %370.0;
  (%371,)
}

def @func_2301(%var_2297: Tensor[(336), int8]) -> (Tensor[(4, 2, 14), float64], Tensor[(180), int16], Tensor[(336), int8]) {
  %372 = cast(%var_2297, dtype="int8") /* ty=Tensor[(336), int8] */;
  %373 = reshape(%372, newshape=[336]) /* ty=Tensor[(336), int8] */;
  %374 = @func_2147(%373) /* ty=(Tensor[(9, 6, 5), float32], Tensor[(6, 2, 15), int16], Tensor[(180), int16], Tensor[(7, 16, 3), bool], Tensor[(336), int8], Tensor[(7, 16, 3), bool]) */;
  %375 = @func_2193() /* ty=Tensor[(4, 2, 14), float64] */;
  %376 = %374.2;
  (%375, %376, %var_2297)
}

def @func_5918() -> (Tensor[(9, 6, 5), float64],) {
  %377 = @func_4883() /* ty=(Tensor[(9, 6, 5), float64],) */;
  %378 = %377.0;
  (%378,)
}

def @func_3068() -> (Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float64], Tensor[(11, 5, 4), bool], Tensor[(220), uint8]) {
  %379 = @func_2049() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8]) */;
  %380 = @func_2049() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8]) */;
  %381 = %380.0;
  %382 = cast(%381, dtype="float64") /* ty=Tensor[(9, 6, 5), float64] */;
  %383 = cast(meta[relay.Constant][22] /* ty=Tensor[(220), uint8] */, dtype="uint8") /* ty=Tensor[(220), uint8] */;
  %384 = cast(meta[relay.Constant][22] /* ty=Tensor[(220), uint8] */, dtype="uint8") /* ty=Tensor[(220), uint8] */;
  %385 = reshape(%383, newshape=[11, 5, 4]) /* ty=Tensor[(11, 5, 4), uint8] */;
  %386 = reshape(%384, newshape=[11, 5, 4]) /* ty=Tensor[(11, 5, 4), uint8] */;
  %387 = @func_1638(%385, %386) /* ty=(Tensor[(11, 5, 4), uint8], Tensor[(11, 5, 4), bool]) */;
  %388 = %379.0;
  %389 = log2(%382) /* ty=Tensor[(9, 6, 5), float64] */;
  %390 = %387.1;
  (%388, %389, %390, meta[relay.Constant][22] /* ty=Tensor[(220), uint8] */)
}

def @func_8459() -> (Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), float32]) {
  %391 = @func_2739() /* ty=(Tensor[(9, 6, 5), uint8],) */;
  %392 = @func_6248() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(4, 2, 14), float32]) */;
  %393 = @func_2929() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %394 = %391.0;
  %395 = @func_5118() /* ty=Tensor[(9, 6, 5), uint8] */;
  %396 = %392.1;
  %397 = %393.0;
  (%394, %395, %396, %397)
}

def @func_10684() -> (Tensor[(4, 2, 14), float64],) {
  %398 = @func_7415() /* ty=(Tensor[(4, 2, 14), float64],) */;
  %399 = %398.0;
  (%399,)
}

def @func_8911() -> (Tensor[(9, 6, 5), uint8],) {
  %400 = @func_2794() /* ty=(Tensor[(9, 6, 5), uint8],) */;
  %401 = %400.0;
  (%401,)
}

def @func_4111() -> (Tensor[(4, 2, 14), float64], Tensor[(13, 14, 10), float64], Tensor[(4, 2, 14), float64]) {
  %402 = @func_3353() /* ty=(Tensor[(4, 2, 14), float32],) */;
  %403 = %402.0;
  %404 = cast(%403, dtype="float64") /* ty=Tensor[(4, 2, 14), float64] */;
  %405 = cast(%403, dtype="float64") /* ty=Tensor[(4, 2, 14), float64] */;
  %406 = reshape(%405, newshape=[4, 2, 14]) /* ty=Tensor[(4, 2, 14), float64] */;
  %407 = @func_2226(%406) /* ty=(Tensor[(4, 2, 14), int16], Tensor[(13, 14, 10), float64], Tensor[(910, 2), float32]) */;
  %408 = sqrt(%404) /* ty=Tensor[(4, 2, 14), float64] */;
  %409 = %407.1;
  %410 = @func_2193() /* ty=Tensor[(4, 2, 14), float64] */;
  (%408, %409, %410)
}

def @func_4883() -> (Tensor[(9, 6, 5), float64],) {
  %411 = @func_3068() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float64], Tensor[(11, 5, 4), bool], Tensor[(220), uint8]) */;
  %412 = %411.1;
  (%412,)
}

def @func_6896(%var_6861: Tensor[(117, 2), int64], %var_6863: Tensor[(220), uint8]) -> (Tensor[(9, 6, 5), float32], Tensor[(180), int16], Tensor[(117, 2), int64], Tensor[(3, 60), int16], Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), uint8], Tensor[(220), float32]) {
  %413 = cast(%var_6861, dtype="int64") /* ty=Tensor[(117, 2), int64] */;
  %414 = cast(meta[relay.Constant][23] /* ty=Tensor[(3, 60), int16] */, dtype="int16") /* ty=Tensor[(3, 60), int16] */;
  %415 = cast(%var_6863, dtype="uint8") /* ty=Tensor[(220), uint8] */;
  %416 = reshape(%413, newshape=[234]) /* ty=Tensor[(234), int64] */;
  %417 = reshape(%414, newshape=[180]) /* ty=Tensor[(180), int16] */;
  %418 = reshape(%415, newshape=[220]) /* ty=Tensor[(220), uint8] */;
  %419 = @func_3385(%416, %417, %418) /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(9, 2, 13), float32], Tensor[(234), int64], Tensor[(9, 6, 5), float32], Tensor[(6, 2, 15), int16], Tensor[(180), int16], Tensor[(9, 6, 5), float64], int32, Tensor[(220), uint8]) */;
  %420 = @func_5971() /* ty=(Tensor[(4, 2, 14), bool], Tensor[(4, 2, 14), bool]) */;
  %421 = cast(%var_6863, dtype="float32") /* ty=Tensor[(220), float32] */;
  %422 = @func_5593() /* ty=Tensor[(9, 6, 5), float32] */;
  %423 = %419.5;
  %424 = %420.1;
  %425 = @func_2474() /* ty=Tensor[(9, 6, 5), uint8] */;
  %426 = sinh(%421) /* ty=Tensor[(220), float32] */;
  (%422, %423, %var_6861, meta[relay.Constant][23] /* ty=Tensor[(3, 60), int16] */, %424, %425, %426)
}

def @func_10297(%var_10266: Tensor[(60, 26), bool], %var_10267: Tensor[(1, 234), int64], %var_10268: int32, %var_10276: Tensor[(14, 234), int64]) -> (Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), float32], int32, Tensor[(14, 234), int64], Tensor[(60, 26), bool], Tensor[(60, 26), float64]) {
  %427 = @func_6850() /* ty=(Tensor[(4, 2, 14), bool],) */;
  %428 = @func_9838() /* ty=(Tensor[(4, 2, 14), float64], Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float32], Tensor[(234), int64], Tensor[(2, 7, 11), float32]) */;
  %429 = cast(%var_10267, dtype="int64") /* ty=Tensor[(1, 234), int64] */;
  %430 = cast(%var_10276, dtype="int64") /* ty=Tensor[(14, 234), int64] */;
  %431 = cast(%var_10266, dtype="bool") /* ty=Tensor[(60, 26), bool] */;
  %432 = cast(%var_10267, dtype="int64") /* ty=Tensor[(1, 234), int64] */;
  %433 = cast(%var_10268, dtype="int32") /* ty=int32 */;
  %434 = reshape(%431, newshape=[10, 12, 13]) /* ty=Tensor[(10, 12, 13), bool] */;
  %435 = reshape(%432, newshape=[234]) /* ty=Tensor[(234), int64] */;
  %436 = reshape(%433, newshape=[]) /* ty=int32 */;
  %437 = @func_3511(%434, %435, %436) /* ty=(Tensor[(9, 2, 13), float32], Tensor[(234), int64], Tensor[(2, 14, 15), float32], Tensor[(420), float32], Tensor[(6, 14, 4), int32], int32, Tensor[(10, 12, 13), float32], Tensor[(4, 2, 14), float32]) */;
  %438 = %437.5;
  %439 = cast(%438, dtype="bool") /* ty=bool */;
  %440 = cast(%var_10266, dtype="bool") /* ty=Tensor[(60, 26), bool] */;
  %441 = cast(%var_10266, dtype="float64") /* ty=Tensor[(60, 26), float64] */;
  %442 = %427.0;
  %443 = %428.1;
  %444 = minimum(%429, %430) /* ty=Tensor[(14, 234), int64] */;
  %445 = greater_equal(%439, %440) /* ty=Tensor[(60, 26), bool] */;
  %446 = rsqrt(%441) /* ty=Tensor[(60, 26), float64] */;
  (%442, %443, %var_10268, %444, %445, %446)
}

def @func_10559() -> Tensor[(9, 6, 5), float32] {
  @func_4120() /* ty=Tensor[(9, 6, 5), float32] */
}

def @func_8081() -> (Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float32]) {
  %447 = @func_7647() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %448 = @func_4535() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), float32]) */;
  %449 = %447.0;
  %450 = %448.0;
  (%449, %450)
}

def @func_5247() -> Tensor[(4, 2, 14), bool] {
  @func_3822() /* ty=Tensor[(4, 2, 14), bool] */
}

def @func_6158(%var_6117: Tensor[(5, 2, 4), uint64], %var_6118: Tensor[(5, 2, 4), uint64]) -> (Tensor[(4, 2, 14), float32], Tensor[(5, 2, 4), float64]) {
  %451 = @func_3353() /* ty=(Tensor[(4, 2, 14), float32],) */;
  %452 = cast(%var_6118, dtype="uint64") /* ty=Tensor[(5, 2, 4), uint64] */;
  %453 = shape_of(%var_6117, dtype="int32") /* ty=Tensor[(3), int32] */;
  %454 = cast(%var_6117, dtype="uint64") /* ty=Tensor[(5, 2, 4), uint64] */;
  %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %456 = bitwise_xor(%454, %455) /* ty=Tensor[(5, 2, 4), uint64] */;
  %457 = cast(%var_6117, dtype="bool") /* ty=Tensor[(5, 2, 4), bool] */;
  %458 = shape_of(%456, dtype="int32") /* ty=Tensor[(3), int32] */;
  %459 = cast(%456, dtype="bool") /* ty=Tensor[(5, 2, 4), bool] */;
  %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %461 = greater(%459, %460) /* ty=Tensor[(5, 2, 4), bool] */;
  %462 = cast(%461, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
  %463 = %451.0;
  %464 = log10(%462) /* ty=Tensor[(5, 2, 4), float64] */;
  (%463, %464)
}

def @func_8201() -> (Tensor[(9, 6, 5), uint8],) {
  %465 = @func_5207() /* ty=Tensor[(9, 6, 5), uint8] */;
  (%465,)
}

def @func_4033() -> Tensor[(9, 6, 5), float32] {
  %466 = @func_3752() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float32]) */;
  %466.1
}

def @func_7757() -> (Tensor[(4, 2, 8), bool], Tensor[(4, 2, 14), bool]) {
  %467 = @func_7449() /* ty=(Tensor[(4, 2, 8), uint8], Tensor[(4, 2, 8), bool]) */;
  %468 = @func_5971() /* ty=(Tensor[(4, 2, 14), bool], Tensor[(4, 2, 14), bool]) */;
  %469 = %467.1;
  %470 = %468.1;
  (%469, %470)
}

def @func_6328() -> (Tensor[(9, 6, 5), uint8],) {
  %471 = @func_5207() /* ty=Tensor[(9, 6, 5), uint8] */;
  (%471,)
}

def @func_8593() -> (Tensor[(9, 6, 5), float64],) {
  %472 = @func_8530() /* ty=(Tensor[(9, 6, 5), float64],) */;
  %473 = %472.0;
  (%473,)
}

def @func_9748() -> Tensor[(9, 6, 5), float32] {
  %474 = @func_5450() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %474.0
}

def @func_4535() -> (Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), float32]) {
  %475 = @func_3327() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %476 = @func_2049() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8]) */;
  %477 = %475.0;
  %478 = %476.1;
  %479 = @func_3822() /* ty=Tensor[(4, 2, 14), bool] */;
  %480 = @func_4120() /* ty=Tensor[(9, 6, 5), float32] */;
  (%477, %478, %479, %480)
}

def @func_2061() -> Tensor[(9, 6, 5), uint8] {
  %481 = @func_2049() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8]) */;
  %481.1
}

def @func_10432() -> (Tensor[(15, 2, 5), float32], Tensor[(9, 6, 5), uint8]) {
  %482 = cast(meta[relay.Constant][24] /* ty=Tensor[(15, 2, 5), float32] */, dtype="float32") /* ty=Tensor[(15, 2, 5), float32] */;
  %483 = @func_8201() /* ty=(Tensor[(9, 6, 5), uint8],) */;
  %484 = atan(%482) /* ty=Tensor[(15, 2, 5), float32] */;
  %485 = %483.0;
  (%484, %485)
}

def @func_4177() -> (Tensor[(4, 2, 14), float64], Tensor[(9, 6, 5), float32], Tensor[(4, 2, 14), float64]) {
  %486 = @func_2860() /* ty=Tensor[(4, 2, 14), float32] */;
  %487 = cast(%486, dtype="float64") /* ty=Tensor[(4, 2, 14), float64] */;
  %488 = @func_3327() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %489 = asin(%487) /* ty=Tensor[(4, 2, 14), float64] */;
  %490 = %488.0;
  %491 = @func_2193() /* ty=Tensor[(4, 2, 14), float64] */;
  (%489, %490, %491)
}

def @func_6272(%var_6267: Tensor[(16, 9, 9), int16], %var_6268: Tensor[(16, 9, 9), int16]) -> Tensor[(16, 9, 9), int16] {
  %492 = cast(%var_6268, dtype="int16") /* ty=Tensor[(16, 9, 9), int16] */;
  %493 = shape_of(%var_6267, dtype="int32") /* ty=Tensor[(3), int32] */;
  %494 = cast(%var_6267, dtype="int16") /* ty=Tensor[(16, 9, 9), int16] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  bitwise_xor(%494, %495) /* ty=Tensor[(16, 9, 9), int16] */
}

def @func_1924(%var_1900: bool, %var_1901: Tensor[(10, 12, 13), bool]) -> (Tensor[(10, 12, 13), bool], int32, Tensor[(35, 9), float32]) {
  %496 = cast(%var_1900, dtype="bool") /* ty=bool */;
  %497 = cast(%var_1901, dtype="bool") /* ty=Tensor[(10, 12, 13), bool] */;
  %498 = cast(meta[relay.Constant][25] /* ty=Tensor[(35, 9), float32] */, dtype="float32") /* ty=Tensor[(35, 9), float32] */;
  %499 = cast(%var_1900, dtype="int32") /* ty=int32 */;
  %500 = reshape(%498, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), float32] */;
  %501 = reshape(%499, newshape=[]) /* ty=int32 */;
  %502 = @func_1767(%500, %501) /* ty=(Tensor[(3, 7, 15), float32], Tensor[(6, 14, 4), float32], int32, Tensor[(9, 2, 13), float32], Tensor[(234, 336), float64]) */;
  %503 = logical_and(%496, %497) /* ty=Tensor[(10, 12, 13), bool] */;
  %504 = %502.2;
  (%503, %504, meta[relay.Constant][25] /* ty=Tensor[(35, 9), float32] */)
}

def @func_2883() -> (Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8]) {
  %505 = @func_2637() /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(10, 12, 13), bool], bool, Tensor[(1560), bool]) */;
  %506 = @func_2860() /* ty=Tensor[(4, 2, 14), float32] */;
  %507 = %505.0;
  (%506, %507)
}

def @func_6581() -> Tensor[(13, 14, 10), float32] {
  %508 = @func_4111() /* ty=(Tensor[(4, 2, 14), float64], Tensor[(13, 14, 10), float64], Tensor[(4, 2, 14), float64]) */;
  %509 = %508.1;
  %510 = cast(%509, dtype="float32") /* ty=Tensor[(13, 14, 10), float32] */;
  sqrt(%510) /* ty=Tensor[(13, 14, 10), float32] */
}

def @func_10662() -> (Tensor[(9, 6, 5), uint8], Tensor[(220), float32], Tensor[(234, 1), int64], Tensor[(220), uint8], Tensor[(9, 6, 5), uint8]) {
  %511 = @func_9568() /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8]) */;
  %512 = cast(meta[relay.Constant][26] /* ty=Tensor[(234, 1), int64] */, dtype="int64") /* ty=Tensor[(234, 1), int64] */;
  %513 = cast(meta[relay.Constant][27] /* ty=Tensor[(220), uint8] */, dtype="uint8") /* ty=Tensor[(220), uint8] */;
  %514 = reshape(%512, newshape=[117, 2]) /* ty=Tensor[(117, 2), int64] */;
  %515 = reshape(%513, newshape=[220]) /* ty=Tensor[(220), uint8] */;
  %516 = @func_6896(%514, %515) /* ty=(Tensor[(9, 6, 5), float32], Tensor[(180), int16], Tensor[(117, 2), int64], Tensor[(3, 60), int16], Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), uint8], Tensor[(220), float32]) */;
  %517 = %511.1;
  %518 = %516.6;
  %519 = @func_4831() /* ty=Tensor[(9, 6, 5), uint8] */;
  (%517, %518, meta[relay.Constant][26] /* ty=Tensor[(234, 1), int64] */, meta[relay.Constant][27] /* ty=Tensor[(220), uint8] */, %519)
}

def @func_10098() -> (Tensor[(4, 2, 14), float64],) {
  %520 = @func_4940() /* ty=Tensor[(4, 2, 14), float64] */;
  (%520,)
}

def @func_7864(%var_7852: Tensor[(1, 220), uint8]) -> (Tensor[(4, 2, 14), float64], Tensor[(9, 6, 5), float32], Tensor[(180), int16], Tensor[(117, 2), int64], Tensor[(180), int16], Tensor[(1, 220), uint8]) {
  %521 = @func_4177() /* ty=(Tensor[(4, 2, 14), float64], Tensor[(9, 6, 5), float32], Tensor[(4, 2, 14), float64]) */;
  %522 = cast(meta[relay.Constant][28] /* ty=Tensor[(117, 2), int64] */, dtype="int64") /* ty=Tensor[(117, 2), int64] */;
  %523 = cast(meta[relay.Constant][29] /* ty=Tensor[(180), int16] */, dtype="int16") /* ty=Tensor[(180), int16] */;
  %524 = cast(%var_7852, dtype="uint8") /* ty=Tensor[(1, 220), uint8] */;
  %525 = reshape(%522, newshape=[234]) /* ty=Tensor[(234), int64] */;
  %526 = reshape(%523, newshape=[180]) /* ty=Tensor[(180), int16] */;
  %527 = reshape(%524, newshape=[220]) /* ty=Tensor[(220), uint8] */;
  %528 = @func_3385(%525, %526, %527) /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(9, 2, 13), float32], Tensor[(234), int64], Tensor[(9, 6, 5), float32], Tensor[(6, 2, 15), int16], Tensor[(180), int16], Tensor[(9, 6, 5), float64], int32, Tensor[(220), uint8]) */;
  %529 = %521.2;
  %530 = @func_5593() /* ty=Tensor[(9, 6, 5), float32] */;
  %531 = %528.5;
  (%529, %530, %531, meta[relay.Constant][28] /* ty=Tensor[(117, 2), int64] */, meta[relay.Constant][29] /* ty=Tensor[(180), int16] */, %var_7852)
}

def @func_7167(%var_7111: Tensor[(13, 14, 10), float32]) -> Tensor[(13, 14, 10), float32] {
  %532 = @func_6581() /* ty=Tensor[(13, 14, 10), float32] */;
  %533 = cast(%var_7111, dtype="int32") /* ty=Tensor[(13, 14, 10), int32] */;
  %534 = shape_of(%532, dtype="int32") /* ty=Tensor[(3), int32] */;
  %535 = cast(%532, dtype="int32") /* ty=Tensor[(13, 14, 10), int32] */;
  %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %537 = subtract(%535, %536) /* ty=Tensor[(13, 14, 10), int32] */;
  %538 = cast(%532, dtype="int8") /* ty=Tensor[(13, 14, 10), int8] */;
  %539 = shape_of(%537, dtype="int32") /* ty=Tensor[(3), int32] */;
  %540 = cast(%537, dtype="int8") /* ty=Tensor[(13, 14, 10), int8] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %542 = left_shift(%540, %541) /* ty=Tensor[(13, 14, 10), int8] */;
  %543 = cast(%542, dtype="float32") /* ty=Tensor[(13, 14, 10), float32] */;
  %544 = shape_of(%var_7111, dtype="int32") /* ty=Tensor[(3), int32] */;
  %545 = cast(%var_7111, dtype="float32") /* ty=Tensor[(13, 14, 10), float32] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  minimum(%545, %546) /* ty=Tensor[(13, 14, 10), float32] */
}

def @func_2559() -> (Tensor[(9, 6, 5), uint8], Tensor[(6, 2, 15), float64]) {
  %547 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 30), int16] */, dtype="int16") /* ty=Tensor[(6, 30), int16] */;
  %548 = reshape(%547, newshape=[6, 2, 15]) /* ty=Tensor[(6, 2, 15), int16] */;
  %549 = @func_1282(%548) /* ty=Tensor[(6, 2, 15), int16] */;
  %550 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 30), int16] */, dtype="bool") /* ty=Tensor[(6, 30), bool] */;
  %551 = shape_of(%549, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(%549, dtype="bool") /* ty=Tensor[(6, 2, 15), bool] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %554 = equal(%552, %553) /* ty=Tensor[(6, 2, 15), bool] */;
  %555 = cast(%554, dtype="float64") /* ty=Tensor[(6, 2, 15), float64] */;
  %556 = @func_2061() /* ty=Tensor[(9, 6, 5), uint8] */;
  %557 = exp(%555) /* ty=Tensor[(6, 2, 15), float64] */;
  (%556, %557)
}

def @func_9128() -> Tensor[(9, 6, 5), float32] {
  %558 = @func_6799() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %558.0
}

def @func_7949() -> (Tensor[(4, 2, 14), float64],) {
  %559 = @func_3757() /* ty=Tensor[(4, 2, 14), float64] */;
  (%559,)
}

def @func_429(%var_421: int32) -> Tensor[(6, 14, 4), int32] {
  %560 = cast(%var_421, dtype="int32") /* ty=int32 */;
  %561 = cast(meta[relay.Constant][31] /* ty=Tensor[(6, 14, 4), int32] */, dtype="int32") /* ty=Tensor[(6, 14, 4), int32] */;
  right_shift(%560, %561) /* ty=Tensor[(6, 14, 4), int32] */
}

def @func_8746() -> (Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), float32]) {
  %562 = @func_3010() /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8]) */;
  %563 = @func_5207() /* ty=Tensor[(9, 6, 5), uint8] */;
  %564 = %562.0;
  (%563, %564)
}

def @func_4462(%var_4357: Tensor[(7, 12, 4), int8]) -> (Tensor[(7, 12, 4), bool], Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), float32], Tensor[(13, 14, 10), float32], Tensor[(1820), float32], Tensor[(1560), bool], Tensor[(1560), bool]) {
  %565 = cast(meta[relay.Constant][32] /* ty=Tensor[(7, 12, 4), int8] */, dtype="bool") /* ty=Tensor[(7, 12, 4), bool] */;
  %566 = shape_of(%var_4357, dtype="int32") /* ty=Tensor[(3), int32] */;
  %567 = cast(%var_4357, dtype="bool") /* ty=Tensor[(7, 12, 4), bool] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %569 = @func_2559() /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(6, 2, 15), float64]) */;
  %570 = @func_2929() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %571 = cast(meta[relay.Constant][33] /* ty=Tensor[(1820), float32] */, dtype="float32") /* ty=Tensor[(1820), float32] */;
  %572 = reshape(%571, newshape=[13, 14, 10]) /* ty=Tensor[(13, 14, 10), float32] */;
  %573 = @func_459(%572) /* ty=(Tensor[(13, 14, 10), float32], Tensor[(13, 14, 10), float64]) */;
  %574 = cast(meta[relay.Constant][32] /* ty=Tensor[(7, 12, 4), int8] */, dtype="int8") /* ty=Tensor[(7, 12, 4), int8] */;
  %575 = reshape(%574, newshape=[336]) /* ty=Tensor[(336), int8] */;
  %576 = @func_3657(%575) /* ty=(Tensor[(9, 6, 5), float32], Tensor[(180), int16], Tensor[(1560), bool], Tensor[(1560, 336), float32], Tensor[(220), uint8], Tensor[(1560), bool]) */;
  %577 = cast(%var_4357, dtype="int8") /* ty=Tensor[(7, 12, 4), int8] */;
  %578 = reshape(%577, newshape=[336]) /* ty=Tensor[(336), int8] */;
  %579 = @func_3657(%578) /* ty=(Tensor[(9, 6, 5), float32], Tensor[(180), int16], Tensor[(1560), bool], Tensor[(1560, 336), float32], Tensor[(220), uint8], Tensor[(1560), bool]) */;
  %580 = not_equal(%567, %568) /* ty=Tensor[(7, 12, 4), bool] */;
  %581 = @func_3166() /* ty=Tensor[(9, 6, 5), uint8] */;
  %582 = @func_3166() /* ty=Tensor[(9, 6, 5), uint8] */;
  %583 = %569.0;
  %584 = %570.0;
  %585 = %573.0;
  %586 = %576.2;
  %587 = %579.2;
  (%580, %581, %582, %583, %584, %585, meta[relay.Constant][33] /* ty=Tensor[(1820), float32] */, %586, %587)
}

def @func_7647() -> (Tensor[(9, 6, 5), float32],) {
  %588 = @func_3327() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %589 = %588.0;
  (%589,)
}

def @func_9373(%var_9300: Tensor[(315, 1), float32]) -> (Tensor[(9, 6, 5), uint8], Tensor[(4, 14, 6), bool], int32, int32, Tensor[(9, 6, 5), float32], Tensor[(10, 12, 13), bool], Tensor[(9, 6, 5), uint8], Tensor[(315, 336), bool]) {
  %590 = @func_8459() /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), float32]) */;
  %591 = cast(meta[relay.Constant][34] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %592 = cast(meta[relay.Constant][34] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %593 = reshape(%591, newshape=[4, 14, 6]) /* ty=Tensor[(4, 14, 6), float32] */;
  %594 = reshape(%592, newshape=[4, 14, 6]) /* ty=Tensor[(4, 14, 6), float32] */;
  %595 = @func_8150(%593, %594) /* ty=(Tensor[(9, 6, 5), float32], Tensor[(4, 14, 6), bool]) */;
  %596 = cast(%var_9300, dtype="float32") /* ty=Tensor[(315, 1), float32] */;
  %597 = cast(5 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %598 = reshape(%596, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), float32] */;
  %599 = reshape(%597, newshape=[]) /* ty=int32 */;
  %600 = @func_1767(%598, %599) /* ty=(Tensor[(3, 7, 15), float32], Tensor[(6, 14, 4), float32], int32, Tensor[(9, 2, 13), float32], Tensor[(234, 336), float64]) */;
  %601 = @func_6489() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %602 = @func_2637() /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(10, 12, 13), bool], bool, Tensor[(1560), bool]) */;
  %603 = cast(%var_9300, dtype="bool") /* ty=Tensor[(315, 1), bool] */;
  %604 = cast(meta[relay.Constant][34] /* ty=Tensor[(336), float32] */, dtype="bool") /* ty=Tensor[(336), bool] */;
  %605 = %590.0;
  %606 = %595.1;
  %607 = %600.2;
  %608 = %601.0;
  %609 = %602.1;
  %610 = @func_9073() /* ty=Tensor[(9, 6, 5), uint8] */;
  %611 = equal(%603, %604) /* ty=Tensor[(315, 336), bool] */;
  (%605, %606, %607, 5 /* ty=int32 */, %608, %609, %610, %611)
}

def @func_5562() -> (Tensor[(9, 6, 5), uint8],) {
  %612 = @func_4831() /* ty=Tensor[(9, 6, 5), uint8] */;
  (%612,)
}

def @func_9073() -> Tensor[(9, 6, 5), uint8] {
  @func_7662() /* ty=Tensor[(9, 6, 5), uint8] */
}

def @func_10848() -> (Tensor[(4, 2, 14), float64], Tensor[(9, 6, 5), float64]) {
  %613 = @func_8593() /* ty=(Tensor[(9, 6, 5), float64],) */;
  %614 = @func_7602() /* ty=Tensor[(4, 2, 14), float64] */;
  %615 = %613.0;
  (%614, %615)
}

def @func_6076() -> (Tensor[(4, 2, 14), bool], Tensor[(11, 5, 4), uint8], Tensor[(220, 1), uint8], Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), float32]) {
  %616 = @func_4535() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), float32]) */;
  %617 = cast(meta[relay.Constant][35] /* ty=Tensor[(220, 1), uint8] */, dtype="uint8") /* ty=Tensor[(220, 1), uint8] */;
  %618 = cast(meta[relay.Constant][35] /* ty=Tensor[(220, 1), uint8] */, dtype="uint8") /* ty=Tensor[(220, 1), uint8] */;
  %619 = reshape(%617, newshape=[11, 5, 4]) /* ty=Tensor[(11, 5, 4), uint8] */;
  %620 = reshape(%618, newshape=[11, 5, 4]) /* ty=Tensor[(11, 5, 4), uint8] */;
  %621 = @func_1638(%619, %620) /* ty=(Tensor[(11, 5, 4), uint8], Tensor[(11, 5, 4), bool]) */;
  %622 = @func_2883() /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8]) */;
  %623 = %616.2;
  %624 = %621.0;
  %625 = @func_3166() /* ty=Tensor[(9, 6, 5), uint8] */;
  %626 = %622.0;
  (%623, %624, meta[relay.Constant][35] /* ty=Tensor[(220, 1), uint8] */, %625, %626)
}

def @func_2435() -> (Tensor[(9, 6, 5), float32],) {
  %627 = @func_2049() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8]) */;
  %628 = %627.0;
  (%628,)
}

def @func_5656(%var_5638: Tensor[(704), float32], %var_5640: Tensor[(1820), float32]) -> (Tensor[(4, 2, 14), float64], Tensor[(13, 14, 10), float32], Tensor[(704), float32], Tensor[(336), int8], Tensor[(1820), float32], Tensor[(9, 6, 5), float32]) {
  %629 = @func_4111() /* ty=(Tensor[(4, 2, 14), float64], Tensor[(13, 14, 10), float64], Tensor[(4, 2, 14), float64]) */;
  %630 = cast(%var_5638, dtype="float32") /* ty=Tensor[(704), float32] */;
  %631 = cast(%var_5638, dtype="float32") /* ty=Tensor[(704), float32] */;
  %632 = cast(meta[relay.Constant][36] /* ty=Tensor[(336), int8] */, dtype="int8") /* ty=Tensor[(336), int8] */;
  %633 = cast(%var_5640, dtype="float32") /* ty=Tensor[(1820), float32] */;
  %634 = reshape(%630, newshape=[8, 11, 8]) /* ty=Tensor[(8, 11, 8), float32] */;
  %635 = reshape(%631, newshape=[8, 11, 8]) /* ty=Tensor[(8, 11, 8), float32] */;
  %636 = reshape(%632, newshape=[336]) /* ty=Tensor[(336), int8] */;
  %637 = reshape(%633, newshape=[910, 2]) /* ty=Tensor[(910, 2), float32] */;
  %638 = @func_1381(%634, %635, %636, %637) /* ty=(Tensor[(9, 2, 13), float32], Tensor[(234), int64], Tensor[(7, 16, 3), bool], Tensor[(336), int8], Tensor[(8, 11, 8), bool], Tensor[(13, 14, 10), float32], Tensor[(910, 2), float32]) */;
  %639 = @func_5450() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %640 = %629.2;
  %641 = %638.5;
  %642 = %639.0;
  (%640, %641, %var_5638, meta[relay.Constant][36] /* ty=Tensor[(336), int8] */, %var_5640, %642)
}

def @func_6799() -> (Tensor[(9, 6, 5), float32],) {
  %643 = @func_6489() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %644 = %643.0;
  (%644,)
}

def @func_3327() -> (Tensor[(9, 6, 5), float32],) {
  %645 = @func_2929() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %646 = %645.0;
  (%646,)
}

def @func_8228() -> (bool, Tensor[(2, 14, 15), float32], Tensor[(1, 420), float32], Tensor[(9, 6, 5), float32]) {
  %647 = @func_2637() /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(10, 12, 13), bool], bool, Tensor[(1560), bool]) */;
  %648 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 420), float32] */, dtype="float32") /* ty=Tensor[(1, 420), float32] */;
  %649 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 420), float32] */, dtype="float32") /* ty=Tensor[(1, 420), float32] */;
  %650 = reshape(%648, newshape=[2, 14, 15]) /* ty=Tensor[(2, 14, 15), float32] */;
  %651 = reshape(%649, newshape=[2, 14, 15]) /* ty=Tensor[(2, 14, 15), float32] */;
  %652 = @func_6799() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %653 = %647.2;
  %654 = @func_2773(%650, %651) /* ty=Tensor[(2, 14, 15), float32] */;
  %655 = %652.0;
  (%653, %654, meta[relay.Constant][37] /* ty=Tensor[(1, 420), float32] */, %655)
}

def @func_2860() -> Tensor[(4, 2, 14), float32] {
  %656 = @func_2271() /* ty=Tensor[(4, 2, 14), float64] */;
  %657 = cast(%656, dtype="float32") /* ty=Tensor[(4, 2, 14), float32] */;
  tan(%657) /* ty=Tensor[(4, 2, 14), float32] */
}

def @func_7520() -> (Tensor[(9, 6, 5), float64],) {
  %658 = @func_3068() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float64], Tensor[(11, 5, 4), bool], Tensor[(220), uint8]) */;
  %659 = %658.1;
  (%659,)
}

def @func_9838() -> (Tensor[(4, 2, 14), float64], Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float32], Tensor[(234), int64], Tensor[(2, 7, 11), float32]) {
  %660 = @func_4620() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(2, 7, 11), bool], Tensor[(2, 7, 11), float32], Tensor[(9, 6, 5), float32]) */;
  %661 = cast(meta[relay.Constant][38] /* ty=Tensor[(234), int64] */, dtype="int64") /* ty=Tensor[(234), int64] */;
  %662 = reshape(%661, newshape=[234]) /* ty=Tensor[(234), int64] */;
  %663 = @func_8676(%662) /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 2, 13), float32], Tensor[(234), int64], Tensor[(6, 9, 16), float64], Tensor[(9, 6, 5), float32]) */;
  %664 = @func_4620() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(2, 7, 11), bool], Tensor[(2, 7, 11), float32], Tensor[(9, 6, 5), float32]) */;
  %665 = @func_3757() /* ty=Tensor[(4, 2, 14), float64] */;
  %666 = %660.0;
  %667 = %663.4;
  %668 = %664.2;
  (%665, %666, %667, meta[relay.Constant][38] /* ty=Tensor[(234), int64] */, %668)
}

def @func_3010() -> (Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8]) {
  %669 = @func_2883() /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8]) */;
  %670 = @func_2924() /* ty=(Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), uint8]) */;
  %671 = %669.0;
  %672 = %670.1;
  (%671, %672)
}

def @func_3992(%var_3950: Tensor[(1, 1, 5), float32]) -> (Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8], Tensor[(?, ?, 5), uint32]) {
  %673 = @func_2193() /* ty=Tensor[(4, 2, 14), float64] */;
  %674 = cast(%673, dtype="float32") /* ty=Tensor[(4, 2, 14), float32] */;
  %675 = cast(%var_3950, dtype="float32") /* ty=Tensor[(1, 1, 5), float32] */;
  %676 = sqrt(%675) /* ty=Tensor[(1, 1, 5), float32] */;
  %677 = cast(%var_3950, dtype="float32") /* ty=Tensor[(1, 1, 5), float32] */;
  %678 = shape_of(%676, dtype="int32") /* ty=Tensor[(3), int32] */;
  %679 = cast(%676, dtype="float32") /* ty=Tensor[(1, 1, 5), float32] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %681 = divide(%679, %680) /* ty=Tensor[(?, ?, 5), float32] */;
  %682 = cast(%681, dtype="float32") /* ty=Tensor[(?, ?, 5), float32] */;
  %683 = sigmoid(%682) /* ty=Tensor[(?, ?, 5), float32] */;
  %684 = cast(%var_3950, dtype="uint32") /* ty=Tensor[(1, 1, 5), uint32] */;
  %685 = shape_of(%683, dtype="int32") /* ty=Tensor[(3), int32] */;
  %686 = cast(%683, dtype="uint32") /* ty=Tensor[(?, ?, 5), uint32] */;
  %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %688 = cosh(%674) /* ty=Tensor[(4, 2, 14), float32] */;
  %689 = @func_3166() /* ty=Tensor[(9, 6, 5), uint8] */;
  %690 = subtract(%686, %687) /* ty=Tensor[(?, ?, 5), uint32] */;
  (%688, %689, %690)
}

def @main(%var_10857: Tensor[(11, 7, 2), int8]) -> Tensor[(11, 7, 2), int8] {
  %691 = cast(%var_10857, dtype="int8") /* ty=Tensor[(11, 7, 2), int8] */;
  %692 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(11, 7, 2), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %693 = cast(meta[relay.Constant][39] /* ty=Tensor[(11, 7, 2), int8] */, dtype="int8") /* ty=Tensor[(11, 7, 2), int8] */;
  %694 = dyn.reshape(%691, %692, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  left_shift(%693, %694) /* ty=Tensor[(11, 7, 2), int8] */
}

def @func_9024() -> (Tensor[(9, 6, 5), uint8],) {
  %695 = @func_4535() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), float32]) */;
  %696 = %695.1;
  (%696,)
}

def @func_7394() -> (Tensor[(9, 6, 5), uint8],) {
  %697 = @func_5118() /* ty=Tensor[(9, 6, 5), uint8] */;
  (%697,)
}

def @func_3353() -> (Tensor[(4, 2, 14), float32],) {
  %698 = @func_3010() /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8]) */;
  %699 = %698.0;
  (%699,)
}

def @func_9773() -> (Tensor[(9, 6, 5), float32], Tensor[(13, 14, 10), float64], Tensor[(9, 6, 5), float64]) {
  %700 = @func_4535() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), float32]) */;
  %701 = @func_5918() /* ty=(Tensor[(9, 6, 5), float64],) */;
  %702 = %700.3;
  %703 = @func_6015() /* ty=Tensor[(13, 14, 10), float64] */;
  %704 = %701.0;
  (%702, %703, %704)
}

def @func_1282(%var_1272: Tensor[(6, 2, 15), int16]) -> Tensor[(6, 2, 15), int16] {
  %705 = cast(meta[relay.Constant][40] /* ty=Tensor[(6, 2, 1), int16] */, dtype="int16") /* ty=Tensor[(6, 2, 1), int16] */;
  %706 = cast(%var_1272, dtype="int16") /* ty=Tensor[(6, 2, 15), int16] */;
  multiply(%705, %706) /* ty=Tensor[(6, 2, 15), int16] */
}

def @func_5327() -> (Tensor[(8, 15, 16), float32],) {
  %707 = @func_4491() /* ty=(Tensor[(8, 15, 16), float32], Tensor[(10, 12, 13), bool]) */;
  %708 = %707.0;
  (%708,)
}

def @func_2929() -> (Tensor[(9, 6, 5), float32],) {
  %709 = @func_2049() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8]) */;
  %710 = %709.0;
  (%710,)
}

def @func_10517(%var_10494: Tensor[(336), int8]) -> (Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float64], Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8], Tensor[(180), int16], Tensor[(336), int8], Tensor[(9, 6, 5), uint8]) {
  %711 = @func_4883() /* ty=(Tensor[(9, 6, 5), float64],) */;
  %712 = @func_3010() /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8]) */;
  %713 = @func_7394() /* ty=(Tensor[(9, 6, 5), uint8],) */;
  %714 = cast(%var_10494, dtype="int8") /* ty=Tensor[(336), int8] */;
  %715 = reshape(%714, newshape=[336]) /* ty=Tensor[(336), int8] */;
  %716 = @func_2147(%715) /* ty=(Tensor[(9, 6, 5), float32], Tensor[(6, 2, 15), int16], Tensor[(180), int16], Tensor[(7, 16, 3), bool], Tensor[(336), int8], Tensor[(7, 16, 3), bool]) */;
  %717 = @func_2739() /* ty=(Tensor[(9, 6, 5), uint8],) */;
  %718 = @func_4033() /* ty=Tensor[(9, 6, 5), float32] */;
  %719 = %711.0;
  %720 = %712.0;
  %721 = %713.0;
  %722 = %716.2;
  %723 = %717.0;
  (%718, %719, %720, %721, %722, %var_10494, %723)
}

def @func_8113() -> (Tensor[(4, 2, 14), float64], Tensor[(11, 5, 4), uint8]) {
  %724 = @func_6076() /* ty=(Tensor[(4, 2, 14), bool], Tensor[(11, 5, 4), uint8], Tensor[(220, 1), uint8], Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), float32]) */;
  %725 = @func_2271() /* ty=Tensor[(4, 2, 14), float64] */;
  %726 = %724.1;
  (%725, %726)
}

def @func_2753(%var_2745: Tensor[(1560), bool]) -> (Tensor[(1560), bool],) {
  %727 = @func_2637() /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(10, 12, 13), bool], bool, Tensor[(1560), bool]) */;
  %728 = %727.3;
  %729 = cast(%var_2745, dtype="bool") /* ty=Tensor[(1560), bool] */;
  %730 = shape_of(%728, dtype="int32") /* ty=Tensor[(1), int32] */;
  %731 = cast(%728, dtype="bool") /* ty=Tensor[(1560), bool] */;
  %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?), bool] */;
  %733 = not_equal(%731, %732) /* ty=Tensor[(1560), bool] */;
  (%733,)
}

def @func_7415() -> (Tensor[(4, 2, 14), float64],) {
  %734 = @func_4111() /* ty=(Tensor[(4, 2, 14), float64], Tensor[(13, 14, 10), float64], Tensor[(4, 2, 14), float64]) */;
  %735 = %734.0;
  (%735,)
}

def @func_5957(%var_5937: Tensor[(704, 1), float32]) -> (Tensor[(9, 6, 5), uint8], Tensor[(704, 1), float32], Tensor[(1, 1820), float32], Tensor[(13, 14, 10), float64]) {
  %736 = cast(%var_5937, dtype="float32") /* ty=Tensor[(704, 1), float32] */;
  %737 = cast(meta[relay.Constant][41] /* ty=Tensor[(1, 1820), float32] */, dtype="float32") /* ty=Tensor[(1, 1820), float32] */;
  %738 = reshape(%736, newshape=[704]) /* ty=Tensor[(704), float32] */;
  %739 = reshape(%737, newshape=[1820]) /* ty=Tensor[(1820), float32] */;
  %740 = @func_5656(%738, %739) /* ty=(Tensor[(4, 2, 14), float64], Tensor[(13, 14, 10), float32], Tensor[(704), float32], Tensor[(336), int8], Tensor[(1820), float32], Tensor[(9, 6, 5), float32]) */;
  %741 = %740.1;
  %742 = cast(%741, dtype="float64") /* ty=Tensor[(13, 14, 10), float64] */;
  %743 = @func_4831() /* ty=Tensor[(9, 6, 5), uint8] */;
  %744 = sin(%742) /* ty=Tensor[(13, 14, 10), float64] */;
  (%743, %var_5937, meta[relay.Constant][41] /* ty=Tensor[(1, 1820), float32] */, %744)
}

def @func_5207() -> Tensor[(9, 6, 5), uint8] {
  @func_2061() /* ty=Tensor[(9, 6, 5), uint8] */
}

def @func_568(%var_563: Tensor[(7, 16, 3), int8], %var_564: Tensor[(7, 16, 3), int8]) -> Tensor[(7, 16, 3), bool] {
  %745 = cast(%var_564, dtype="bool") /* ty=Tensor[(7, 16, 3), bool] */;
  %746 = shape_of(%var_563, dtype="int32") /* ty=Tensor[(3), int32] */;
  %747 = cast(%var_563, dtype="bool") /* ty=Tensor[(7, 16, 3), bool] */;
  %748 = dyn.reshape(%745, %746, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%747, %748) /* ty=Tensor[(7, 16, 3), bool] */
}

def @func_5118() -> Tensor[(9, 6, 5), uint8] {
  @func_4831() /* ty=Tensor[(9, 6, 5), uint8] */
}

def @func_2819(%var_2815: Tensor[(14, 13, 10), float32]) -> (Tensor[(14, 13, 10), float32],) {
  %749 = cast(%var_2815, dtype="float32") /* ty=Tensor[(14, 13, 10), float32] */;
  %750 = log10(%749) /* ty=Tensor[(14, 13, 10), float32] */;
  (%750,)
}

def @func_1381(%var_1325: Tensor[(8, 11, 8), float32], %var_1338: Tensor[(8, 11, 8), float32], %var_1350: Tensor[(336), int8], %var_1373: Tensor[(910, 2), float32]) -> (Tensor[(9, 2, 13), float32], Tensor[(234), int64], Tensor[(7, 16, 3), bool], Tensor[(336), int8], Tensor[(8, 11, 8), bool], Tensor[(13, 14, 10), float32], Tensor[(910, 2), float32]) {
  %751 = cast(meta[relay.Constant][42] /* ty=Tensor[(234), int64] */, dtype="int64") /* ty=Tensor[(234), int64] */;
  %752 = reshape(%751, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), int64] */;
  %753 = @func_400(%752) /* ty=(Tensor[(9, 2, 13), float32],) */;
  %754 = cast(%var_1350, dtype="int8") /* ty=Tensor[(336), int8] */;
  %755 = cast(%var_1350, dtype="int8") /* ty=Tensor[(336), int8] */;
  %756 = reshape(%754, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), int8] */;
  %757 = reshape(%755, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), int8] */;
  %758 = cast(%var_1325, dtype="float32") /* ty=Tensor[(8, 11, 8), float32] */;
  %759 = asin(%758) /* ty=Tensor[(8, 11, 8), float32] */;
  %760 = cast(%var_1338, dtype="float64") /* ty=Tensor[(8, 11, 8), float64] */;
  %761 = shape_of(%759, dtype="int32") /* ty=Tensor[(3), int32] */;
  %762 = cast(%759, dtype="float64") /* ty=Tensor[(8, 11, 8), float64] */;
  %763 = dyn.reshape(%760, %761, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %764 = mod(%762, %763) /* ty=Tensor[(8, 11, 8), float64] */;
  %765 = cast(%var_1325, dtype="bool") /* ty=Tensor[(8, 11, 8), bool] */;
  %766 = shape_of(%764, dtype="int32") /* ty=Tensor[(3), int32] */;
  %767 = cast(%764, dtype="bool") /* ty=Tensor[(8, 11, 8), bool] */;
  %768 = dyn.reshape(%765, %766, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %769 = cast(%var_1373, dtype="float32") /* ty=Tensor[(910, 2), float32] */;
  %770 = reshape(%769, newshape=[13, 14, 10]) /* ty=Tensor[(13, 14, 10), float32] */;
  %771 = @func_459(%770) /* ty=(Tensor[(13, 14, 10), float32], Tensor[(13, 14, 10), float64]) */;
  %772 = %753.0;
  %773 = @func_568(%756, %757) /* ty=Tensor[(7, 16, 3), bool] */;
  %774 = less_equal(%767, %768) /* ty=Tensor[(8, 11, 8), bool] */;
  %775 = %771.0;
  (%772, meta[relay.Constant][42] /* ty=Tensor[(234), int64] */, %773, %var_1350, %774, %775, %var_1373)
}

def @func_7236() -> Tensor[(4, 2, 14), float64] {
  %776 = @func_4111() /* ty=(Tensor[(4, 2, 14), float64], Tensor[(13, 14, 10), float64], Tensor[(4, 2, 14), float64]) */;
  %776.0
}

def @func_7449() -> (Tensor[(4, 2, 8), uint8], Tensor[(4, 2, 8), bool]) {
  %777 = cast(meta[relay.Constant][43] /* ty=Tensor[(4, 2, 8), float64] */, dtype="float64") /* ty=Tensor[(4, 2, 8), float64] */;
  %778 = log2(%777) /* ty=Tensor[(4, 2, 8), float64] */;
  %779 = cast(%778, dtype="float64") /* ty=Tensor[(4, 2, 8), float64] */;
  %780 = log(%779) /* ty=Tensor[(4, 2, 8), float64] */;
  %781 = cast(%778, dtype="int64") /* ty=Tensor[(4, 2, 8), int64] */;
  %782 = shape_of(%780, dtype="int32") /* ty=Tensor[(3), int32] */;
  %783 = cast(%780, dtype="int64") /* ty=Tensor[(4, 2, 8), int64] */;
  %784 = dyn.reshape(%781, %782, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %785 = logical_xor(%783, %784) /* ty=Tensor[(4, 2, 8), int64] */;
  %786 = cast(%785, dtype="uint8") /* ty=Tensor[(4, 2, 8), uint8] */;
  %787 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(4, 2, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %788 = cast(meta[relay.Constant][43] /* ty=Tensor[(4, 2, 8), float64] */, dtype="uint8") /* ty=Tensor[(4, 2, 8), uint8] */;
  %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %790 = cast(meta[relay.Constant][43] /* ty=Tensor[(4, 2, 8), float64] */, dtype="bool") /* ty=Tensor[(4, 2, 8), bool] */;
  %791 = shape_of(%785, dtype="int32") /* ty=Tensor[(3), int32] */;
  %792 = cast(%785, dtype="bool") /* ty=Tensor[(4, 2, 8), bool] */;
  %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %794 = left_shift(%788, %789) /* ty=Tensor[(4, 2, 8), uint8] */;
  %795 = not_equal(%792, %793) /* ty=Tensor[(4, 2, 8), bool] */;
  (%794, %795)
}

def @func_10705(%var_10697: float32) -> (Tensor[(7, 7, 14), float32], Tensor[(7, 7, 14), float32]) {
  %796 = cast(%var_10697, dtype="float32") /* ty=float32 */;
  %797 = cast(meta[relay.Constant][44] /* ty=Tensor[(7, 7, 14), float32] */, dtype="float32") /* ty=Tensor[(7, 7, 14), float32] */;
  %798 = cast(meta[relay.Constant][44] /* ty=Tensor[(7, 7, 14), float32] */, dtype="float32") /* ty=Tensor[(7, 7, 14), float32] */;
  %799 = floor_divide(%796, %797) /* ty=Tensor[(7, 7, 14), float32] */;
  %800 = sinh(%798) /* ty=Tensor[(7, 7, 14), float32] */;
  (%799, %800)
}

def @func_2193() -> Tensor[(4, 2, 14), float64] {
  %801 = cast(meta[relay.Constant][45] /* ty=Tensor[(4, 2, 14), float32] */, dtype="float32") /* ty=Tensor[(4, 2, 14), float32] */;
  %802 = log(%801) /* ty=Tensor[(4, 2, 14), float32] */;
  %803 = cast(%802, dtype="float64") /* ty=Tensor[(4, 2, 14), float64] */;
  log2(%803) /* ty=Tensor[(4, 2, 14), float64] */
}

def @func_9451() -> (Tensor[(2, 7, 11), float64],) {
  %804 = @func_7507() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(2, 7, 11), float64]) */;
  %805 = %804.1;
  (%805,)
}

def @func_8812() -> (Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), bool]) {
  %806 = @func_8459() /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), float32]) */;
  %807 = @func_7757() /* ty=(Tensor[(4, 2, 8), bool], Tensor[(4, 2, 14), bool]) */;
  %808 = %806.1;
  %809 = %807.1;
  (%808, %809)
}

def @func_2794() -> (Tensor[(9, 6, 5), uint8],) {
  %810 = @func_2474() /* ty=Tensor[(9, 6, 5), uint8] */;
  (%810,)
}

def @func_2049() -> (Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8]) {
  %811 = cast(meta[relay.Constant][46] /* ty=Tensor[(9, 6, 5), float64] */, dtype="float64") /* ty=Tensor[(9, 6, 5), float64] */;
  %812 = cosh(%811) /* ty=Tensor[(9, 6, 5), float64] */;
  %813 = cast(%812, dtype="float32") /* ty=Tensor[(9, 6, 5), float32] */;
  %814 = cast(meta[relay.Constant][46] /* ty=Tensor[(9, 6, 5), float64] */, dtype="uint8") /* ty=Tensor[(9, 6, 5), uint8] */;
  %815 = shape_of(%812, dtype="int32") /* ty=Tensor[(3), int32] */;
  %816 = cast(%812, dtype="uint8") /* ty=Tensor[(9, 6, 5), uint8] */;
  %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %818 = log(%813) /* ty=Tensor[(9, 6, 5), float32] */;
  %819 = multiply(%816, %817) /* ty=Tensor[(9, 6, 5), uint8] */;
  (%818, %819)
}

def @func_7339() -> (Tensor[(4, 2, 14), float32], Tensor[(4, 2, 14), float64]) {
  %820 = @func_3353() /* ty=(Tensor[(4, 2, 14), float32],) */;
  %821 = %820.0;
  %822 = @func_4940() /* ty=Tensor[(4, 2, 14), float64] */;
  (%821, %822)
}

def @func_4220() -> (Tensor[(9, 6, 5), uint8],) {
  %823 = @func_3010() /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8]) */;
  %824 = %823.1;
  (%824,)
}

def @func_7507() -> (Tensor[(9, 6, 5), float32], Tensor[(2, 7, 11), float64]) {
  %825 = @func_3068() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float64], Tensor[(11, 5, 4), bool], Tensor[(220), uint8]) */;
  %826 = @func_4765() /* ty=(Tensor[(4, 2, 14), float64], Tensor[(2, 7, 11), float64], Tensor[(154, 1), float64]) */;
  %827 = %825.0;
  %828 = %826.1;
  (%827, %828)
}

def @func_8369() -> (Tensor[(4, 2, 14), bool], Tensor[(9, 2, 13), float32], Tensor[(1560), bool], Tensor[(234), int64], int32) {
  %829 = @func_6076() /* ty=(Tensor[(4, 2, 14), bool], Tensor[(11, 5, 4), uint8], Tensor[(220, 1), uint8], Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), float32]) */;
  %830 = cast(meta[relay.Constant][47] /* ty=Tensor[(1560), bool] */, dtype="bool") /* ty=Tensor[(1560), bool] */;
  %831 = cast(meta[relay.Constant][48] /* ty=Tensor[(234), int64] */, dtype="int64") /* ty=Tensor[(234), int64] */;
  %832 = cast(3 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %833 = reshape(%830, newshape=[10, 12, 13]) /* ty=Tensor[(10, 12, 13), bool] */;
  %834 = reshape(%831, newshape=[234]) /* ty=Tensor[(234), int64] */;
  %835 = reshape(%832, newshape=[]) /* ty=int32 */;
  %836 = @func_3511(%833, %834, %835) /* ty=(Tensor[(9, 2, 13), float32], Tensor[(234), int64], Tensor[(2, 14, 15), float32], Tensor[(420), float32], Tensor[(6, 14, 4), int32], int32, Tensor[(10, 12, 13), float32], Tensor[(4, 2, 14), float32]) */;
  %837 = %829.0;
  %838 = %836.0;
  (%837, %838, meta[relay.Constant][47] /* ty=Tensor[(1560), bool] */, meta[relay.Constant][48] /* ty=Tensor[(234), int64] */, 3 /* ty=int32 */)
}

def @func_3511(%var_3423: Tensor[(10, 12, 13), bool], %var_3439: Tensor[(234), int64], %var_3459: int32) -> (Tensor[(9, 2, 13), float32], Tensor[(234), int64], Tensor[(2, 14, 15), float32], Tensor[(420), float32], Tensor[(6, 14, 4), int32], int32, Tensor[(10, 12, 13), float32], Tensor[(4, 2, 14), float32]) {
  %839 = cast(%var_3439, dtype="int64") /* ty=Tensor[(234), int64] */;
  %840 = reshape(%839, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), int64] */;
  %841 = @func_400(%840) /* ty=(Tensor[(9, 2, 13), float32],) */;
  %842 = cast(meta[relay.Constant][49] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %843 = cast(meta[relay.Constant][49] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %844 = reshape(%842, newshape=[2, 14, 15]) /* ty=Tensor[(2, 14, 15), float32] */;
  %845 = reshape(%843, newshape=[2, 14, 15]) /* ty=Tensor[(2, 14, 15), float32] */;
  %846 = cast(%var_3459, dtype="int32") /* ty=int32 */;
  %847 = reshape(%846, newshape=[]) /* ty=int32 */;
  %848 = @func_2637() /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(10, 12, 13), bool], bool, Tensor[(1560), bool]) */;
  %849 = %848.1;
  %850 = cast(%var_3423, dtype="float64") /* ty=Tensor[(10, 12, 13), float64] */;
  %851 = shape_of(%849, dtype="int32") /* ty=Tensor[(3), int32] */;
  %852 = cast(%849, dtype="float64") /* ty=Tensor[(10, 12, 13), float64] */;
  %853 = dyn.reshape(%850, %851, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %854 = subtract(%852, %853) /* ty=Tensor[(10, 12, 13), float64] */;
  %855 = cast(%854, dtype="bool") /* ty=Tensor[(10, 12, 13), bool] */;
  %856 = shape_of(%var_3423, dtype="int32") /* ty=Tensor[(3), int32] */;
  %857 = cast(%var_3423, dtype="bool") /* ty=Tensor[(10, 12, 13), bool] */;
  %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %859 = logical_or(%857, %858) /* ty=Tensor[(10, 12, 13), bool] */;
  %860 = cast(%859, dtype="float32") /* ty=Tensor[(10, 12, 13), float32] */;
  %861 = log(%860) /* ty=Tensor[(10, 12, 13), float32] */;
  %862 = cast(%861, dtype="float32") /* ty=Tensor[(10, 12, 13), float32] */;
  %863 = @func_2883() /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8]) */;
  %864 = %841.0;
  %865 = @func_2773(%844, %845) /* ty=Tensor[(2, 14, 15), float32] */;
  %866 = @func_429(%847) /* ty=Tensor[(6, 14, 4), int32] */;
  %867 = acosh(%862) /* ty=Tensor[(10, 12, 13), float32] */;
  %868 = %863.0;
  (%864, %var_3439, %865, meta[relay.Constant][49] /* ty=Tensor[(420), float32] */, %866, %var_3459, %867, %868)
}

def @func_4491() -> (Tensor[(8, 15, 16), float32], Tensor[(10, 12, 13), bool]) {
  %869 = cast(meta[relay.Constant][50] /* ty=Tensor[(8, 15, 16), float32] */, dtype="float32") /* ty=Tensor[(8, 15, 16), float32] */;
  %870 = tan(%869) /* ty=Tensor[(8, 15, 16), float32] */;
  %871 = cast(%870, dtype="float32") /* ty=Tensor[(8, 15, 16), float32] */;
  %872 = @func_2637() /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(10, 12, 13), bool], bool, Tensor[(1560), bool]) */;
  %873 = asin(%871) /* ty=Tensor[(8, 15, 16), float32] */;
  %874 = %872.1;
  (%873, %874)
}

def @func_3385(%var_3362: Tensor[(234), int64], %var_3369: Tensor[(180), int16], %var_3383: Tensor[(220), uint8]) -> (Tensor[(9, 6, 5), uint8], Tensor[(9, 2, 13), float32], Tensor[(234), int64], Tensor[(9, 6, 5), float32], Tensor[(6, 2, 15), int16], Tensor[(180), int16], Tensor[(9, 6, 5), float64], int32, Tensor[(220), uint8]) {
  %875 = cast(%var_3362, dtype="int64") /* ty=Tensor[(234), int64] */;
  %876 = reshape(%875, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), int64] */;
  %877 = @func_400(%876) /* ty=(Tensor[(9, 2, 13), float32],) */;
  %878 = @func_2435() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %879 = cast(%var_3369, dtype="int16") /* ty=Tensor[(180), int16] */;
  %880 = reshape(%879, newshape=[6, 2, 15]) /* ty=Tensor[(6, 2, 15), int16] */;
  %881 = cast(3 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %882 = cast(%var_3383, dtype="uint8") /* ty=Tensor[(220), uint8] */;
  %883 = reshape(%881, newshape=[]) /* ty=int32 */;
  %884 = reshape(%882, newshape=[5, 44]) /* ty=Tensor[(5, 44), uint8] */;
  %885 = @func_2397(%883, %884) /* ty=(Tensor[(9, 6, 5), float64], int32, Tensor[(1, 336), uint32], int32, Tensor[(11, 5, 4), uint8], Tensor[(5, 44), uint8]) */;
  %886 = @func_3166() /* ty=Tensor[(9, 6, 5), uint8] */;
  %887 = %877.0;
  %888 = %878.0;
  %889 = @func_1282(%880) /* ty=Tensor[(6, 2, 15), int16] */;
  %890 = %885.0;
  (%886, %887, %var_3362, %888, %889, %var_3369, %890, 3 /* ty=int32 */, %var_3383)
}

def @func_400(%var_393: Tensor[(9, 2, 13), int64]) -> (Tensor[(9, 2, 13), float32],) {
  %891 = cast(%var_393, dtype="int64") /* ty=Tensor[(9, 2, 13), int64] */;
  %892 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(9, 2, 13), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %893 = cast(meta[relay.Constant][51] /* ty=Tensor[(9, 2, 13), int64] */, dtype="int64") /* ty=Tensor[(9, 2, 13), int64] */;
  %894 = dyn.reshape(%891, %892, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %895 = add(%893, %894) /* ty=Tensor[(9, 2, 13), int64] */;
  %896 = cast(%895, dtype="float32") /* ty=Tensor[(9, 2, 13), float32] */;
  %897 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(9, 2, 13), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %898 = cast(meta[relay.Constant][51] /* ty=Tensor[(9, 2, 13), int64] */, dtype="float32") /* ty=Tensor[(9, 2, 13), float32] */;
  %899 = dyn.reshape(%896, %897, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %900 = mod(%898, %899) /* ty=Tensor[(9, 2, 13), float32] */;
  (%900,)
}

def @func_8530() -> (Tensor[(9, 6, 5), float64],) {
  %901 = @func_5918() /* ty=(Tensor[(9, 6, 5), float64],) */;
  %902 = %901.0;
  (%902,)
}

def @func_6015() -> Tensor[(13, 14, 10), float64] {
  %903 = @func_4111() /* ty=(Tensor[(4, 2, 14), float64], Tensor[(13, 14, 10), float64], Tensor[(4, 2, 14), float64]) */;
  %903.1
}

def @func_10795() -> (Tensor[(9, 6, 5), float32], Tensor[(13, 14, 10), float64]) {
  %904 = @func_6489() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %905 = %904.0;
  %906 = @func_6015() /* ty=Tensor[(13, 14, 10), float64] */;
  (%905, %906)
}

def @func_4999(%var_4963: Tensor[(14, 11, 14), int32]) -> (Tensor[(14, 11, 14), int32], Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8], Tensor[(2, 14, 15), float32], Tensor[(420), float32]) {
  %907 = cast(meta[relay.Constant][52] /* ty=Tensor[(14, 11, 14), int32] */, dtype="int32") /* ty=Tensor[(14, 11, 14), int32] */;
  %908 = shape_of(%var_4963, dtype="int32") /* ty=Tensor[(3), int32] */;
  %909 = cast(%var_4963, dtype="int32") /* ty=Tensor[(14, 11, 14), int32] */;
  %910 = dyn.reshape(%907, %908, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %911 = @func_3327() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %912 = @func_4220() /* ty=(Tensor[(9, 6, 5), uint8],) */;
  %913 = cast(meta[relay.Constant][53] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %914 = cast(meta[relay.Constant][53] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %915 = reshape(%913, newshape=[2, 14, 15]) /* ty=Tensor[(2, 14, 15), float32] */;
  %916 = reshape(%914, newshape=[2, 14, 15]) /* ty=Tensor[(2, 14, 15), float32] */;
  %917 = bitwise_and(%909, %910) /* ty=Tensor[(14, 11, 14), int32] */;
  %918 = %911.0;
  %919 = %912.0;
  %920 = @func_2773(%915, %916) /* ty=Tensor[(2, 14, 15), float32] */;
  (%917, %918, %919, %920, meta[relay.Constant][53] /* ty=Tensor[(420), float32] */)
}

def @func_8676(%var_8640: Tensor[(234), int64]) -> (Tensor[(4, 2, 14), float32], Tensor[(9, 2, 13), float32], Tensor[(234), int64], Tensor[(6, 9, 16), float64], Tensor[(9, 6, 5), float32]) {
  %921 = @func_7339() /* ty=(Tensor[(4, 2, 14), float32], Tensor[(4, 2, 14), float64]) */;
  %922 = cast(%var_8640, dtype="int64") /* ty=Tensor[(234), int64] */;
  %923 = reshape(%922, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), int64] */;
  %924 = @func_400(%923) /* ty=(Tensor[(9, 2, 13), float32],) */;
  %925 = cast(meta[relay.Constant][54] /* ty=Tensor[(6, 9, 16), float64] */, dtype="float64") /* ty=Tensor[(6, 9, 16), float64] */;
  %926 = asinh(%925) /* ty=Tensor[(6, 9, 16), float64] */;
  %927 = cast(%926, dtype="float64") /* ty=Tensor[(6, 9, 16), float64] */;
  %928 = @func_6489() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %929 = %921.0;
  %930 = %924.0;
  %931 = acos(%927) /* ty=Tensor[(6, 9, 16), float64] */;
  %932 = %928.0;
  (%929, %930, %var_8640, %931, %932)
}

def @func_7287(%var_7278: Tensor[(112), float64]) -> (Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8], Tensor[(112), float64]) {
  %933 = @func_2435() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %934 = cast(%var_7278, dtype="float64") /* ty=Tensor[(112), float64] */;
  %935 = reshape(%934, newshape=[4, 2, 14]) /* ty=Tensor[(4, 2, 14), float64] */;
  %936 = @func_5409(%935) /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), uint8]) */;
  %937 = %933.0;
  %938 = %936.1;
  (%937, %938, %var_7278)
}

def @func_7907() -> (Tensor[(9, 6, 5), float32], Tensor[(4, 2, 14), bool]) {
  %939 = @func_7647() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %940 = %939.0;
  %941 = @func_5247() /* ty=Tensor[(4, 2, 14), bool] */;
  (%940, %941)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_9774() -> (Tensor[(9, 6, 5), float32], Tensor[(13, 14, 10), float64], Tensor[(9, 6, 5), float64]) {
  %5 = fn () -> (Tensor[(9, 6, 5), float32], Tensor[(13, 14, 10), float64], Tensor[(9, 6, 5), float64]) {
    %0 = @func_4535() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), float32]) */;
    %1 = @func_5918() /* ty=(Tensor[(9, 6, 5), float64],) */;
    %2 = %0.3;
    %3 = @func_6015() /* ty=Tensor[(13, 14, 10), float64] */;
    %4 = %1.0;
    (%2, %3, %4)
  };
  %5() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(13, 14, 10), float64], Tensor[(9, 6, 5), float64]) */
}

def @func_2304(%var_2302: Tensor[(336), int8]) -> (Tensor[(4, 2, 14), float64], Tensor[(180), int16], Tensor[(336), int8]) {
  @func_2301(%var_2302) /* ty=(Tensor[(4, 2, 14), float64], Tensor[(180), int16], Tensor[(336), int8]) */
}

def @func_5595() -> Tensor[(9, 6, 5), float32] {
  @func_5593() /* ty=Tensor[(9, 6, 5), float32] */
}

def @func_6076() -> (Tensor[(4, 2, 14), bool], Tensor[(11, 5, 4), uint8], Tensor[(220, 1), uint8], Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), float32]) {
  %6 = @func_4535() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), float32]) */;
  %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(220, 1), uint8] */, dtype="uint8") /* ty=Tensor[(220, 1), uint8] */;
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(220, 1), uint8] */, dtype="uint8") /* ty=Tensor[(220, 1), uint8] */;
  %9 = reshape(%7, newshape=[11, 5, 4]) /* ty=Tensor[(11, 5, 4), uint8] */;
  %10 = reshape(%8, newshape=[11, 5, 4]) /* ty=Tensor[(11, 5, 4), uint8] */;
  %11 = @func_1638(%9, %10) /* ty=(Tensor[(11, 5, 4), uint8], Tensor[(11, 5, 4), bool]) */;
  %12 = @func_2883() /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8]) */;
  %13 = %6.2;
  %14 = %11.0;
  %15 = @func_3166() /* ty=Tensor[(9, 6, 5), uint8] */;
  %16 = %12.0;
  (%13, %14, meta[relay.Constant][0] /* ty=Tensor[(220, 1), uint8] */, %15, %16)
}

def @func_2794() -> (Tensor[(9, 6, 5), uint8],) {
  %17 = @func_2474() /* ty=Tensor[(9, 6, 5), uint8] */;
  (%17,)
}

def @func_10302(%var_10298: Tensor[(60, 26), bool], %var_10299: Tensor[(1, 234), int64], %var_10300: int32, %var_10301: Tensor[(14, 234), int64]) -> (Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), float32], int32, Tensor[(14, 234), int64], Tensor[(60, 26), bool], Tensor[(60, 26), float64]) {
  %38 = fn (%var_10266: Tensor[(60, 26), bool], %var_10267: Tensor[(1, 234), int64], %var_10268: int32, %var_10276: Tensor[(14, 234), int64]) -> (Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), float32], int32, Tensor[(14, 234), int64], Tensor[(60, 26), bool], Tensor[(60, 26), float64]) {
    %18 = @func_6850() /* ty=(Tensor[(4, 2, 14), bool],) */;
    %19 = @func_9838() /* ty=(Tensor[(4, 2, 14), float64], Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float32], Tensor[(234), int64], Tensor[(2, 7, 11), float32]) */;
    %20 = cast(%var_10267, dtype="int64") /* ty=Tensor[(1, 234), int64] */;
    %21 = cast(%var_10276, dtype="int64") /* ty=Tensor[(14, 234), int64] */;
    %22 = cast(%var_10266, dtype="bool") /* ty=Tensor[(60, 26), bool] */;
    %23 = cast(%var_10267, dtype="int64") /* ty=Tensor[(1, 234), int64] */;
    %24 = cast(%var_10268, dtype="int32") /* ty=int32 */;
    %25 = reshape(%22, newshape=[10, 12, 13]) /* ty=Tensor[(10, 12, 13), bool] */;
    %26 = reshape(%23, newshape=[234]) /* ty=Tensor[(234), int64] */;
    %27 = reshape(%24, newshape=[]) /* ty=int32 */;
    %28 = @func_3511(%25, %26, %27) /* ty=(Tensor[(9, 2, 13), float32], Tensor[(234), int64], Tensor[(2, 14, 15), float32], Tensor[(420), float32], Tensor[(6, 14, 4), int32], int32, Tensor[(10, 12, 13), float32], Tensor[(4, 2, 14), float32]) */;
    %29 = %28.5;
    %30 = cast(%29, dtype="bool") /* ty=bool */;
    %31 = cast(%var_10266, dtype="bool") /* ty=Tensor[(60, 26), bool] */;
    %32 = cast(%var_10266, dtype="float64") /* ty=Tensor[(60, 26), float64] */;
    %33 = %18.0;
    %34 = %19.1;
    %35 = minimum(%20, %21) /* ty=Tensor[(14, 234), int64] */;
    %36 = greater_equal(%30, %31) /* ty=Tensor[(60, 26), bool] */;
    %37 = rsqrt(%32) /* ty=Tensor[(60, 26), float64] */;
    (%33, %34, %var_10268, %35, %36, %37)
  };
  %38(%var_10298, %var_10299, %var_10300, %var_10301) /* ty=(Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), float32], int32, Tensor[(14, 234), int64], Tensor[(60, 26), bool], Tensor[(60, 26), float64]) */
}

def @func_429(%var_421: int32) -> Tensor[(6, 14, 4), int32] {
  %39 = cast(%var_421, dtype="int32") /* ty=int32 */;
  %40 = cast(meta[relay.Constant][1] /* ty=Tensor[(6, 14, 4), int32] */, dtype="int32") /* ty=Tensor[(6, 14, 4), int32] */;
  right_shift(%39, %40) /* ty=Tensor[(6, 14, 4), int32] */
}

def @func_1767(%var_1744: Tensor[(3, 7, 15), float32], %var_1749: int32) -> (Tensor[(3, 7, 15), float32], Tensor[(6, 14, 4), float32], int32, Tensor[(9, 2, 13), float32], Tensor[(234, 336), float64]) {
  %41 = cast(%var_1744, dtype="float32") /* ty=Tensor[(3, 7, 15), float32] */;
  %42 = cast(meta[relay.Constant][2] /* ty=Tensor[(336), uint32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %43 = cast(meta[relay.Constant][2] /* ty=Tensor[(336), uint32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %44 = cast(%var_1749, dtype="int32") /* ty=int32 */;
  %45 = reshape(%42, newshape=[12, 2, 14]) /* ty=Tensor[(12, 2, 14), uint32] */;
  %46 = reshape(%43, newshape=[12, 2, 14]) /* ty=Tensor[(12, 2, 14), uint32] */;
  %47 = reshape(%44, newshape=[]) /* ty=int32 */;
  %48 = @func_969(%45, %46, %47) /* ty=(Tensor[(12, 2, 14), uint32], int32, Tensor[(6, 14, 4), float32]) */;
  %49 = cast(meta[relay.Constant][3] /* ty=Tensor[(234, 1), int64] */, dtype="int64") /* ty=Tensor[(234, 1), int64] */;
  %50 = reshape(%49, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), int64] */;
  %51 = @func_400(%50) /* ty=(Tensor[(9, 2, 13), float32],) */;
  %52 = cast(meta[relay.Constant][3] /* ty=Tensor[(234, 1), int64] */, dtype="float64") /* ty=Tensor[(234, 1), float64] */;
  %53 = cast(meta[relay.Constant][2] /* ty=Tensor[(336), uint32] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %54 = cos(%41) /* ty=Tensor[(3, 7, 15), float32] */;
  %55 = %48.2;
  %56 = %51.0;
  %57 = subtract(%52, %53) /* ty=Tensor[(234, 336), float64] */;
  (%54, %55, %var_1749, %56, %57)
}

def @func_7647() -> (Tensor[(9, 6, 5), float32],) {
  %58 = @func_3327() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %59 = %58.0;
  (%59,)
}

def @func_9750() -> Tensor[(9, 6, 5), float32] {
  @func_9748() /* ty=Tensor[(9, 6, 5), float32] */
}

def @func_4765() -> (Tensor[(4, 2, 14), float64], Tensor[(2, 7, 11), float64], Tensor[(154, 1), float64]) {
  %60 = cast(meta[relay.Constant][4] /* ty=Tensor[(154, 1), float64] */, dtype="float64") /* ty=Tensor[(154, 1), float64] */;
  %61 = reshape(%60, newshape=[2, 7, 11]) /* ty=Tensor[(2, 7, 11), float64] */;
  %62 = @func_3757() /* ty=Tensor[(4, 2, 14), float64] */;
  %63 = @func_3913(%61) /* ty=Tensor[(2, 7, 11), float64] */;
  (%62, %63, meta[relay.Constant][4] /* ty=Tensor[(154, 1), float64] */)
}

def @func_8115() -> (Tensor[(4, 2, 14), float64], Tensor[(11, 5, 4), uint8]) {
  @func_8113() /* ty=(Tensor[(4, 2, 14), float64], Tensor[(11, 5, 4), uint8]) */
}

def @func_8576() -> (Tensor[(4, 2, 14), float64], Tensor[(9, 6, 5), uint8]) {
  @func_8574() /* ty=(Tensor[(4, 2, 14), float64], Tensor[(9, 6, 5), uint8]) */
}

def @func_2925() -> (Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), uint8]) {
  %72 = fn () -> (Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), uint8]) {
    %64 = @func_2193() /* ty=Tensor[(4, 2, 14), float64] */;
    %65 = cast(meta[relay.Constant][5] /* ty=Tensor[(4, 2, 14), float64] */, dtype="bool") /* ty=Tensor[(4, 2, 14), bool] */;
    %66 = shape_of(%64, dtype="int32") /* ty=Tensor[(3), int32] */;
    %67 = cast(%64, dtype="bool") /* ty=Tensor[(4, 2, 14), bool] */;
    %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %69 = @func_2739() /* ty=(Tensor[(9, 6, 5), uint8],) */;
    %70 = logical_and(%67, %68) /* ty=Tensor[(4, 2, 14), bool] */;
    %71 = %69.0;
    (%70, %71)
  };
  %72() /* ty=(Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), uint8]) */
}

def @func_5972() -> (Tensor[(4, 2, 14), bool], Tensor[(4, 2, 14), bool]) {
  %76 = fn () -> (Tensor[(4, 2, 14), bool], Tensor[(4, 2, 14), bool]) {
    %73 = @func_4535() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), float32]) */;
    %74 = @func_5247() /* ty=Tensor[(4, 2, 14), bool] */;
    %75 = %73.2;
    (%74, %75)
  };
  %76() /* ty=(Tensor[(4, 2, 14), bool], Tensor[(4, 2, 14), bool]) */
}

def @func_6731() -> (Tensor[(9, 6, 5), float32], Tensor[(7, 16, 3), bool], Tensor[(336), int8]) {
  %77 = @func_2435() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %78 = cast(meta[relay.Constant][6] /* ty=Tensor[(336), int8] */, dtype="int8") /* ty=Tensor[(336), int8] */;
  %79 = cast(meta[relay.Constant][6] /* ty=Tensor[(336), int8] */, dtype="int8") /* ty=Tensor[(336), int8] */;
  %80 = reshape(%78, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), int8] */;
  %81 = reshape(%79, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), int8] */;
  %82 = %77.0;
  %83 = @func_568(%80, %81) /* ty=Tensor[(7, 16, 3), bool] */;
  (%82, %83, meta[relay.Constant][6] /* ty=Tensor[(336), int8] */)
}

def @func_5120() -> Tensor[(9, 6, 5), uint8] {
  @func_5118() /* ty=Tensor[(9, 6, 5), uint8] */
}

def @func_7169(%var_7168: Tensor[(13, 14, 10), float32]) -> Tensor[(13, 14, 10), float32] {
  %99 = fn (%var_7111: Tensor[(13, 14, 10), float32]) -> Tensor[(13, 14, 10), float32] {
    %84 = @func_6581() /* ty=Tensor[(13, 14, 10), float32] */;
    %85 = cast(%var_7111, dtype="int32") /* ty=Tensor[(13, 14, 10), int32] */;
    %86 = shape_of(%84, dtype="int32") /* ty=Tensor[(3), int32] */;
    %87 = cast(%84, dtype="int32") /* ty=Tensor[(13, 14, 10), int32] */;
    %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %89 = subtract(%87, %88) /* ty=Tensor[(13, 14, 10), int32] */;
    %90 = cast(%84, dtype="int8") /* ty=Tensor[(13, 14, 10), int8] */;
    %91 = shape_of(%89, dtype="int32") /* ty=Tensor[(3), int32] */;
    %92 = cast(%89, dtype="int8") /* ty=Tensor[(13, 14, 10), int8] */;
    %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %94 = left_shift(%92, %93) /* ty=Tensor[(13, 14, 10), int8] */;
    %95 = cast(%94, dtype="float32") /* ty=Tensor[(13, 14, 10), float32] */;
    %96 = shape_of(%var_7111, dtype="int32") /* ty=Tensor[(3), int32] */;
    %97 = cast(%var_7111, dtype="float32") /* ty=Tensor[(13, 14, 10), float32] */;
    %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    minimum(%97, %98) /* ty=Tensor[(13, 14, 10), float32] */
  };
  %99(%var_7168) /* ty=Tensor[(13, 14, 10), float32] */
}

def @func_6733() -> (Tensor[(9, 6, 5), float32], Tensor[(7, 16, 3), bool], Tensor[(336), int8]) {
  @func_6731() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(7, 16, 3), bool], Tensor[(336), int8]) */
}

def @func_462(%var_460: Tensor[(13, 14, 10), float32]) -> (Tensor[(13, 14, 10), float32], Tensor[(13, 14, 10), float64]) {
  @func_459(%var_460) /* ty=(Tensor[(13, 14, 10), float32], Tensor[(13, 14, 10), float64]) */
}

def @func_5452() -> (Tensor[(9, 6, 5), float32],) {
  @func_5450() /* ty=(Tensor[(9, 6, 5), float32],) */
}

def @func_8460() -> (Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), float32]) {
  %107 = fn () -> (Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), float32]) {
    %100 = @func_2739() /* ty=(Tensor[(9, 6, 5), uint8],) */;
    %101 = @func_6248() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(4, 2, 14), float32]) */;
    %102 = @func_2929() /* ty=(Tensor[(9, 6, 5), float32],) */;
    %103 = %100.0;
    %104 = @func_5118() /* ty=Tensor[(9, 6, 5), uint8] */;
    %105 = %101.1;
    %106 = %102.0;
    (%103, %104, %105, %106)
  };
  %107() /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), float32]) */
}

def @func_2474() -> Tensor[(9, 6, 5), uint8] {
  %108 = @func_2049() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8]) */;
  %108.1
}

def @func_5450() -> (Tensor[(9, 6, 5), float32],) {
  %109 = @func_4033() /* ty=Tensor[(9, 6, 5), float32] */;
  (%109,)
}

def @func_8480() -> (Tensor[(4, 2, 14), float64],) {
  %112 = fn () -> (Tensor[(4, 2, 14), float64],) {
    %110 = @func_8113() /* ty=(Tensor[(4, 2, 14), float64], Tensor[(11, 5, 4), uint8]) */;
    %111 = %110.0;
    (%111,)
  };
  %112() /* ty=(Tensor[(4, 2, 14), float64],) */
}

def @func_8195() -> (Tensor[(2, 7, 11), bool], Tensor[(6, 14, 4), float32], Tensor[(336), uint32], int32) {
  %122 = fn () -> (Tensor[(2, 7, 11), bool], Tensor[(6, 14, 4), float32], Tensor[(336), uint32], int32) {
    %113 = cast(meta[relay.Constant][7] /* ty=Tensor[(336), uint32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
    %114 = cast(meta[relay.Constant][7] /* ty=Tensor[(336), uint32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
    %115 = cast(-7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %116 = reshape(%113, newshape=[12, 2, 14]) /* ty=Tensor[(12, 2, 14), uint32] */;
    %117 = reshape(%114, newshape=[12, 2, 14]) /* ty=Tensor[(12, 2, 14), uint32] */;
    %118 = reshape(%115, newshape=[]) /* ty=int32 */;
    %119 = @func_969(%116, %117, %118) /* ty=(Tensor[(12, 2, 14), uint32], int32, Tensor[(6, 14, 4), float32]) */;
    %120 = @func_6755() /* ty=Tensor[(2, 7, 11), bool] */;
    %121 = %119.2;
    (%120, %121, meta[relay.Constant][7] /* ty=Tensor[(336), uint32] */, -7 /* ty=int32 */)
  };
  %122() /* ty=(Tensor[(2, 7, 11), bool], Tensor[(6, 14, 4), float32], Tensor[(336), uint32], int32) */
}

def @func_8574() -> (Tensor[(4, 2, 14), float64], Tensor[(9, 6, 5), uint8]) {
  %123 = @func_4940() /* ty=Tensor[(4, 2, 14), float64] */;
  %124 = @func_7662() /* ty=Tensor[(9, 6, 5), uint8] */;
  (%123, %124)
}

def @func_7662() -> Tensor[(9, 6, 5), uint8] {
  %125 = @func_5562() /* ty=(Tensor[(9, 6, 5), uint8],) */;
  %125.0
}

def @func_8530() -> (Tensor[(9, 6, 5), float64],) {
  %126 = @func_5918() /* ty=(Tensor[(9, 6, 5), float64],) */;
  %127 = %126.0;
  (%127,)
}

def @func_10795() -> (Tensor[(9, 6, 5), float32], Tensor[(13, 14, 10), float64]) {
  %128 = @func_6489() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %129 = %128.0;
  %130 = @func_6015() /* ty=Tensor[(13, 14, 10), float64] */;
  (%129, %130)
}

def @func_8203() -> (Tensor[(9, 6, 5), uint8],) {
  @func_8201() /* ty=(Tensor[(9, 6, 5), uint8],) */
}

def @func_7416() -> (Tensor[(4, 2, 14), float64],) {
  %133 = fn () -> (Tensor[(4, 2, 14), float64],) {
    %131 = @func_4111() /* ty=(Tensor[(4, 2, 14), float64], Tensor[(13, 14, 10), float64], Tensor[(4, 2, 14), float64]) */;
    %132 = %131.0;
    (%132,)
  };
  %133() /* ty=(Tensor[(4, 2, 14), float64],) */
}

def @func_8746() -> (Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), float32]) {
  %134 = @func_3010() /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8]) */;
  %135 = @func_5207() /* ty=Tensor[(9, 6, 5), uint8] */;
  %136 = %134.0;
  (%135, %136)
}

def @func_459(%var_443: Tensor[(13, 14, 10), float32]) -> (Tensor[(13, 14, 10), float32], Tensor[(13, 14, 10), float64]) {
  %137 = cast(meta[relay.Constant][8] /* ty=Tensor[(13, 14, 1), float32] */, dtype="float32") /* ty=Tensor[(13, 14, 1), float32] */;
  %138 = cast(%var_443, dtype="float32") /* ty=Tensor[(13, 14, 10), float32] */;
  %139 = cast(%var_443, dtype="float64") /* ty=Tensor[(13, 14, 10), float64] */;
  %140 = floor_divide(%137, %138) /* ty=Tensor[(13, 14, 10), float32] */;
  %141 = asin(%139) /* ty=Tensor[(13, 14, 10), float64] */;
  (%140, %141)
}

def @func_1285(%var_1283: Tensor[(6, 2, 15), int16]) -> Tensor[(6, 2, 15), int16] {
  @func_1282(%var_1283) /* ty=Tensor[(6, 2, 15), int16] */
}

def @func_2150(%var_2148: Tensor[(336), int8]) -> (Tensor[(9, 6, 5), float32], Tensor[(6, 2, 15), int16], Tensor[(180), int16], Tensor[(7, 16, 3), bool], Tensor[(336), int8], Tensor[(7, 16, 3), bool]) {
  @func_2147(%var_2148) /* ty=(Tensor[(9, 6, 5), float32], Tensor[(6, 2, 15), int16], Tensor[(180), int16], Tensor[(7, 16, 3), bool], Tensor[(336), int8], Tensor[(7, 16, 3), bool]) */
}

def @func_3068() -> (Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float64], Tensor[(11, 5, 4), bool], Tensor[(220), uint8]) {
  %142 = @func_2049() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8]) */;
  %143 = @func_2049() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8]) */;
  %144 = %143.0;
  %145 = cast(%144, dtype="float64") /* ty=Tensor[(9, 6, 5), float64] */;
  %146 = cast(meta[relay.Constant][9] /* ty=Tensor[(220), uint8] */, dtype="uint8") /* ty=Tensor[(220), uint8] */;
  %147 = cast(meta[relay.Constant][9] /* ty=Tensor[(220), uint8] */, dtype="uint8") /* ty=Tensor[(220), uint8] */;
  %148 = reshape(%146, newshape=[11, 5, 4]) /* ty=Tensor[(11, 5, 4), uint8] */;
  %149 = reshape(%147, newshape=[11, 5, 4]) /* ty=Tensor[(11, 5, 4), uint8] */;
  %150 = @func_1638(%148, %149) /* ty=(Tensor[(11, 5, 4), uint8], Tensor[(11, 5, 4), bool]) */;
  %151 = %142.0;
  %152 = log2(%145) /* ty=Tensor[(9, 6, 5), float64] */;
  %153 = %150.1;
  (%151, %152, %153, meta[relay.Constant][9] /* ty=Tensor[(220), uint8] */)
}

def @func_2401(%var_2399: int32, %var_2400: Tensor[(5, 44), uint8]) -> (Tensor[(9, 6, 5), float64], int32, Tensor[(1, 336), uint32], int32, Tensor[(11, 5, 4), uint8], Tensor[(5, 44), uint8]) {
  @func_2397(%var_2399, %var_2400) /* ty=(Tensor[(9, 6, 5), float64], int32, Tensor[(1, 336), uint32], int32, Tensor[(11, 5, 4), uint8], Tensor[(5, 44), uint8]) */
}

def @func_2050() -> (Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8]) {
  %163 = fn () -> (Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8]) {
    %154 = cast(meta[relay.Constant][10] /* ty=Tensor[(9, 6, 5), float64] */, dtype="float64") /* ty=Tensor[(9, 6, 5), float64] */;
    %155 = cosh(%154) /* ty=Tensor[(9, 6, 5), float64] */;
    %156 = cast(%155, dtype="float32") /* ty=Tensor[(9, 6, 5), float32] */;
    %157 = cast(meta[relay.Constant][10] /* ty=Tensor[(9, 6, 5), float64] */, dtype="uint8") /* ty=Tensor[(9, 6, 5), uint8] */;
    %158 = shape_of(%155, dtype="int32") /* ty=Tensor[(3), int32] */;
    %159 = cast(%155, dtype="uint8") /* ty=Tensor[(9, 6, 5), uint8] */;
    %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %161 = log(%156) /* ty=Tensor[(9, 6, 5), float32] */;
    %162 = multiply(%159, %160) /* ty=Tensor[(9, 6, 5), uint8] */;
    (%161, %162)
  };
  %163() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8]) */
}

def @func_10517(%var_10494: Tensor[(336), int8]) -> (Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float64], Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8], Tensor[(180), int16], Tensor[(336), int8], Tensor[(9, 6, 5), uint8]) {
  %164 = @func_4883() /* ty=(Tensor[(9, 6, 5), float64],) */;
  %165 = @func_3010() /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8]) */;
  %166 = @func_7394() /* ty=(Tensor[(9, 6, 5), uint8],) */;
  %167 = cast(%var_10494, dtype="int8") /* ty=Tensor[(336), int8] */;
  %168 = reshape(%167, newshape=[336]) /* ty=Tensor[(336), int8] */;
  %169 = @func_2147(%168) /* ty=(Tensor[(9, 6, 5), float32], Tensor[(6, 2, 15), int16], Tensor[(180), int16], Tensor[(7, 16, 3), bool], Tensor[(336), int8], Tensor[(7, 16, 3), bool]) */;
  %170 = @func_2739() /* ty=(Tensor[(9, 6, 5), uint8],) */;
  %171 = @func_4033() /* ty=Tensor[(9, 6, 5), float32] */;
  %172 = %164.0;
  %173 = %165.0;
  %174 = %166.0;
  %175 = %169.2;
  %176 = %170.0;
  (%171, %172, %173, %174, %175, %var_10494, %176)
}

def @func_5877(%var_5875: Tensor[(11, 15, 6), int32], %var_5876: Tensor[(11, 15, 6), int32]) -> (Tensor[(11, 15, 6), uint64], Tensor[(11, 15, 6), int32], Tensor[(11, 15, 6), bool], Tensor[(11, 15, 6), float32]) {
  %208 = fn (%var_5815: Tensor[(11, 15, 6), int32], %var_5824: Tensor[(11, 15, 6), int32]) -> (Tensor[(11, 15, 6), uint64], Tensor[(11, 15, 6), int32], Tensor[(11, 15, 6), bool], Tensor[(11, 15, 6), float32]) {
    %177 = cast(meta[relay.Constant][11] /* ty=Tensor[(11, 15, 6), int32] */, dtype="int32") /* ty=Tensor[(11, 15, 6), int32] */;
    %178 = shape_of(%var_5815, dtype="int32") /* ty=Tensor[(3), int32] */;
    %179 = cast(%var_5815, dtype="int32") /* ty=Tensor[(11, 15, 6), int32] */;
    %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %181 = bitwise_and(%179, %180) /* ty=Tensor[(11, 15, 6), int32] */;
    %182 = cast(%var_5824, dtype="uint64") /* ty=Tensor[(11, 15, 6), uint64] */;
    %183 = shape_of(%181, dtype="int32") /* ty=Tensor[(3), int32] */;
    %184 = cast(%181, dtype="uint64") /* ty=Tensor[(11, 15, 6), uint64] */;
    %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %186 = cast(%var_5815, dtype="int64") /* ty=Tensor[(11, 15, 6), int64] */;
    %187 = shape_of(%181, dtype="int32") /* ty=Tensor[(3), int32] */;
    %188 = cast(%181, dtype="int64") /* ty=Tensor[(11, 15, 6), int64] */;
    %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %190 = maximum(%188, %189) /* ty=Tensor[(11, 15, 6), int64] */;
    %191 = cast(%190, dtype="float64") /* ty=Tensor[(11, 15, 6), float64] */;
    %192 = asinh(%191) /* ty=Tensor[(11, 15, 6), float64] */;
    %193 = cast(%var_5815, dtype="int32") /* ty=Tensor[(11, 15, 6), int32] */;
    %194 = shape_of(%192, dtype="int32") /* ty=Tensor[(3), int32] */;
    %195 = cast(%192, dtype="int32") /* ty=Tensor[(11, 15, 6), int32] */;
    %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %197 = cast(%192, dtype="float64") /* ty=Tensor[(11, 15, 6), float64] */;
    %198 = tan(%197) /* ty=Tensor[(11, 15, 6), float64] */;
    %199 = cast(%198, dtype="bool") /* ty=Tensor[(11, 15, 6), bool] */;
    %200 = shape_of(%var_5824, dtype="int32") /* ty=Tensor[(3), int32] */;
    %201 = cast(%var_5824, dtype="bool") /* ty=Tensor[(11, 15, 6), bool] */;
    %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %203 = cast(%198, dtype="float32") /* ty=Tensor[(11, 15, 6), float32] */;
    %204 = logical_xor(%184, %185) /* ty=Tensor[(11, 15, 6), uint64] */;
    %205 = bitwise_or(%195, %196) /* ty=Tensor[(11, 15, 6), int32] */;
    %206 = logical_or(%201, %202) /* ty=Tensor[(11, 15, 6), bool] */;
    %207 = cosh(%203) /* ty=Tensor[(11, 15, 6), float32] */;
    (%204, %205, %206, %207)
  };
  %208(%var_5875, %var_5876) /* ty=(Tensor[(11, 15, 6), uint64], Tensor[(11, 15, 6), int32], Tensor[(11, 15, 6), bool], Tensor[(11, 15, 6), float32]) */
}

def @func_4113() -> (Tensor[(4, 2, 14), float64], Tensor[(13, 14, 10), float64], Tensor[(4, 2, 14), float64]) {
  @func_4111() /* ty=(Tensor[(4, 2, 14), float64], Tensor[(13, 14, 10), float64], Tensor[(4, 2, 14), float64]) */
}

def @func_6582() -> Tensor[(13, 14, 10), float32] {
  %212 = fn () -> Tensor[(13, 14, 10), float32] {
    %209 = @func_4111() /* ty=(Tensor[(4, 2, 14), float64], Tensor[(13, 14, 10), float64], Tensor[(4, 2, 14), float64]) */;
    %210 = %209.1;
    %211 = cast(%210, dtype="float32") /* ty=Tensor[(13, 14, 10), float32] */;
    sqrt(%211) /* ty=Tensor[(13, 14, 10), float32] */
  };
  %212() /* ty=Tensor[(13, 14, 10), float32] */
}

def @func_2756(%var_2754: Tensor[(1560), bool]) -> (Tensor[(1560), bool],) {
  @func_2753(%var_2754) /* ty=(Tensor[(1560), bool],) */
}

def @func_4177() -> (Tensor[(4, 2, 14), float64], Tensor[(9, 6, 5), float32], Tensor[(4, 2, 14), float64]) {
  %213 = @func_2860() /* ty=Tensor[(4, 2, 14), float32] */;
  %214 = cast(%213, dtype="float64") /* ty=Tensor[(4, 2, 14), float64] */;
  %215 = @func_3327() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %216 = asin(%214) /* ty=Tensor[(4, 2, 14), float64] */;
  %217 = %215.0;
  %218 = @func_2193() /* ty=Tensor[(4, 2, 14), float64] */;
  (%216, %217, %218)
}

def @func_2861() -> Tensor[(4, 2, 14), float32] {
  %221 = fn () -> Tensor[(4, 2, 14), float32] {
    %219 = @func_2271() /* ty=Tensor[(4, 2, 14), float64] */;
    %220 = cast(%219, dtype="float32") /* ty=Tensor[(4, 2, 14), float32] */;
    tan(%220) /* ty=Tensor[(4, 2, 14), float32] */
  };
  %221() /* ty=Tensor[(4, 2, 14), float32] */
}

def @func_7949() -> (Tensor[(4, 2, 14), float64],) {
  %222 = @func_3757() /* ty=Tensor[(4, 2, 14), float64] */;
  (%222,)
}

def @func_2638() -> (Tensor[(9, 6, 5), uint8], Tensor[(10, 12, 13), bool], bool, Tensor[(1560), bool]) {
  %230 = fn () -> (Tensor[(9, 6, 5), uint8], Tensor[(10, 12, 13), bool], bool, Tensor[(1560), bool]) {
    %223 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %224 = cast(meta[relay.Constant][12] /* ty=Tensor[(1560), bool] */, dtype="bool") /* ty=Tensor[(1560), bool] */;
    %225 = reshape(%223, newshape=[]) /* ty=bool */;
    %226 = reshape(%224, newshape=[10, 12, 13]) /* ty=Tensor[(10, 12, 13), bool] */;
    %227 = @func_1924(%225, %226) /* ty=(Tensor[(10, 12, 13), bool], int32, Tensor[(35, 9), float32]) */;
    %228 = @func_2061() /* ty=Tensor[(9, 6, 5), uint8] */;
    %229 = %227.0;
    (%228, %229, False /* ty=bool */, meta[relay.Constant][12] /* ty=Tensor[(1560), bool] */)
  };
  %230() /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(10, 12, 13), bool], bool, Tensor[(1560), bool]) */
}

def @func_9960(%var_9958: Tensor[(1560), bool], %var_9959: Tensor[(336), int8]) -> (Tensor[(9, 6, 5), float32], Tensor[(1560), bool], Tensor[(11, 5, 4), uint8], Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float32], Tensor[(4, 2, 14), float32], Tensor[(5), float32], Tensor[(1560), float64], Tensor[(13, 14, 10), float32], Tensor[(336), int8]) {
  %252 = fn (%var_9891: Tensor[(1560), bool], %var_9942: Tensor[(336), int8]) -> (Tensor[(9, 6, 5), float32], Tensor[(1560), bool], Tensor[(11, 5, 4), uint8], Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float32], Tensor[(4, 2, 14), float32], Tensor[(5), float32], Tensor[(1560), float64], Tensor[(13, 14, 10), float32], Tensor[(336), int8]) {
    %231 = @func_8081() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float32]) */;
    %232 = cast(%var_9891, dtype="bool") /* ty=Tensor[(1560), bool] */;
    %233 = reshape(%232, newshape=[1560]) /* ty=Tensor[(1560), bool] */;
    %234 = @func_2753(%233) /* ty=(Tensor[(1560), bool],) */;
    %235 = @func_8113() /* ty=(Tensor[(4, 2, 14), float64], Tensor[(11, 5, 4), uint8]) */;
    %236 = @func_7647() /* ty=(Tensor[(9, 6, 5), float32],) */;
    %237 = cast(meta[relay.Constant][13] /* ty=Tensor[(5), float32] */, dtype="float32") /* ty=Tensor[(5), float32] */;
    %238 = reshape(%237, newshape=[1, 1, 5]) /* ty=Tensor[(1, 1, 5), float32] */;
    %239 = @func_3992(%238) /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8], Tensor[(?, ?, 5), uint32]) */;
    %240 = cast(%var_9891, dtype="float64") /* ty=Tensor[(1560), float64] */;
    %241 = cast(%var_9942, dtype="int8") /* ty=Tensor[(336), int8] */;
    %242 = reshape(%241, newshape=[7, 12, 4]) /* ty=Tensor[(7, 12, 4), int8] */;
    %243 = @func_4462(%242) /* ty=(Tensor[(7, 12, 4), bool], Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), float32], Tensor[(13, 14, 10), float32], Tensor[(1820), float32], Tensor[(1560), bool], Tensor[(1560), bool]) */;
    %244 = %231.1;
    %245 = %234.0;
    %246 = %235.1;
    %247 = %236.0;
    %248 = @func_5593() /* ty=Tensor[(9, 6, 5), float32] */;
    %249 = %239.0;
    %250 = tan(%240) /* ty=Tensor[(1560), float64] */;
    %251 = %243.5;
    (%244, %245, %246, %247, %248, %249, meta[relay.Constant][13] /* ty=Tensor[(5), float32] */, %250, %251, %var_9942)
  };
  %252(%var_9958, %var_9959) /* ty=(Tensor[(9, 6, 5), float32], Tensor[(1560), bool], Tensor[(11, 5, 4), uint8], Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float32], Tensor[(4, 2, 14), float32], Tensor[(5), float32], Tensor[(1560), float64], Tensor[(13, 14, 10), float32], Tensor[(336), int8]) */
}

def @func_4252() -> (Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float32], Tensor[(4, 2, 14), int16], Tensor[(112), float64]) {
  %253 = @func_2331() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %254 = cast(meta[relay.Constant][14] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
  %255 = reshape(%254, newshape=[4, 2, 14]) /* ty=Tensor[(4, 2, 14), float64] */;
  %256 = @func_2226(%255) /* ty=(Tensor[(4, 2, 14), int16], Tensor[(13, 14, 10), float64], Tensor[(910, 2), float32]) */;
  %257 = @func_4120() /* ty=Tensor[(9, 6, 5), float32] */;
  %258 = %253.0;
  %259 = %256.0;
  (%257, %258, %259, meta[relay.Constant][14] /* ty=Tensor[(112), float64] */)
}

def @func_1641(%var_1639: Tensor[(11, 5, 4), uint8], %var_1640: Tensor[(11, 5, 4), uint8]) -> (Tensor[(11, 5, 4), uint8], Tensor[(11, 5, 4), bool]) {
  %270 = fn (%var_1614: Tensor[(11, 5, 4), uint8], %var_1620: Tensor[(11, 5, 4), uint8]) -> (Tensor[(11, 5, 4), uint8], Tensor[(11, 5, 4), bool]) {
    %260 = cast(%var_1614, dtype="uint8") /* ty=Tensor[(11, 5, 4), uint8] */;
    %261 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(11, 5, 4), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %262 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 5, 4), uint8] */, dtype="uint8") /* ty=Tensor[(11, 5, 4), uint8] */;
    %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %264 = cast(%var_1620, dtype="bool") /* ty=Tensor[(11, 5, 4), bool] */;
    %265 = shape_of(%var_1614, dtype="int32") /* ty=Tensor[(3), int32] */;
    %266 = cast(%var_1614, dtype="bool") /* ty=Tensor[(11, 5, 4), bool] */;
    %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %268 = bitwise_and(%262, %263) /* ty=Tensor[(11, 5, 4), uint8] */;
    %269 = less_equal(%266, %267) /* ty=Tensor[(11, 5, 4), bool] */;
    (%268, %269)
  };
  %270(%var_1639, %var_1640) /* ty=(Tensor[(11, 5, 4), uint8], Tensor[(11, 5, 4), bool]) */
}

def @func_2884() -> (Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8]) {
  %274 = fn () -> (Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8]) {
    %271 = @func_2637() /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(10, 12, 13), bool], bool, Tensor[(1560), bool]) */;
    %272 = @func_2860() /* ty=Tensor[(4, 2, 14), float32] */;
    %273 = %271.0;
    (%272, %273)
  };
  %274() /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8]) */
}

def @func_10008() -> Tensor[(9, 6, 5), float32] {
  %275 = fn () -> Tensor[(9, 6, 5), float32] {
    @func_9128() /* ty=Tensor[(9, 6, 5), float32] */
  };
  %275() /* ty=Tensor[(9, 6, 5), float32] */
}

def @func_10243() -> Tensor[(9, 6, 5), float32] {
  %277 = fn () -> Tensor[(9, 6, 5), float32] {
    %276 = @func_2929() /* ty=(Tensor[(9, 6, 5), float32],) */;
    %276.0
  };
  %277() /* ty=Tensor[(9, 6, 5), float32] */
}

def @func_4464(%var_4463: Tensor[(7, 12, 4), int8]) -> (Tensor[(7, 12, 4), bool], Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), float32], Tensor[(13, 14, 10), float32], Tensor[(1820), float32], Tensor[(1560), bool], Tensor[(1560), bool]) {
  %301 = fn (%var_4357: Tensor[(7, 12, 4), int8]) -> (Tensor[(7, 12, 4), bool], Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), float32], Tensor[(13, 14, 10), float32], Tensor[(1820), float32], Tensor[(1560), bool], Tensor[(1560), bool]) {
    %278 = cast(meta[relay.Constant][16] /* ty=Tensor[(7, 12, 4), int8] */, dtype="bool") /* ty=Tensor[(7, 12, 4), bool] */;
    %279 = shape_of(%var_4357, dtype="int32") /* ty=Tensor[(3), int32] */;
    %280 = cast(%var_4357, dtype="bool") /* ty=Tensor[(7, 12, 4), bool] */;
    %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %282 = @func_2559() /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(6, 2, 15), float64]) */;
    %283 = @func_2929() /* ty=(Tensor[(9, 6, 5), float32],) */;
    %284 = cast(meta[relay.Constant][17] /* ty=Tensor[(1820), float32] */, dtype="float32") /* ty=Tensor[(1820), float32] */;
    %285 = reshape(%284, newshape=[13, 14, 10]) /* ty=Tensor[(13, 14, 10), float32] */;
    %286 = @func_459(%285) /* ty=(Tensor[(13, 14, 10), float32], Tensor[(13, 14, 10), float64]) */;
    %287 = cast(meta[relay.Constant][16] /* ty=Tensor[(7, 12, 4), int8] */, dtype="int8") /* ty=Tensor[(7, 12, 4), int8] */;
    %288 = reshape(%287, newshape=[336]) /* ty=Tensor[(336), int8] */;
    %289 = @func_3657(%288) /* ty=(Tensor[(9, 6, 5), float32], Tensor[(180), int16], Tensor[(1560), bool], Tensor[(1560, 336), float32], Tensor[(220), uint8], Tensor[(1560), bool]) */;
    %290 = cast(%var_4357, dtype="int8") /* ty=Tensor[(7, 12, 4), int8] */;
    %291 = reshape(%290, newshape=[336]) /* ty=Tensor[(336), int8] */;
    %292 = @func_3657(%291) /* ty=(Tensor[(9, 6, 5), float32], Tensor[(180), int16], Tensor[(1560), bool], Tensor[(1560, 336), float32], Tensor[(220), uint8], Tensor[(1560), bool]) */;
    %293 = not_equal(%280, %281) /* ty=Tensor[(7, 12, 4), bool] */;
    %294 = @func_3166() /* ty=Tensor[(9, 6, 5), uint8] */;
    %295 = @func_3166() /* ty=Tensor[(9, 6, 5), uint8] */;
    %296 = %282.0;
    %297 = %283.0;
    %298 = %286.0;
    %299 = %289.2;
    %300 = %292.2;
    (%293, %294, %295, %296, %297, %298, meta[relay.Constant][17] /* ty=Tensor[(1820), float32] */, %299, %300)
  };
  %301(%var_4463) /* ty=(Tensor[(7, 12, 4), bool], Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), float32], Tensor[(13, 14, 10), float32], Tensor[(1820), float32], Tensor[(1560), bool], Tensor[(1560), bool]) */
}

def @func_7394() -> (Tensor[(9, 6, 5), uint8],) {
  %302 = @func_5118() /* ty=Tensor[(9, 6, 5), uint8] */;
  (%302,)
}

def @func_5208() -> Tensor[(9, 6, 5), uint8] {
  %303 = fn () -> Tensor[(9, 6, 5), uint8] {
    @func_2061() /* ty=Tensor[(9, 6, 5), uint8] */
  };
  %303() /* ty=Tensor[(9, 6, 5), uint8] */
}

def @func_8593() -> (Tensor[(9, 6, 5), float64],) {
  %304 = @func_8530() /* ty=(Tensor[(9, 6, 5), float64],) */;
  %305 = %304.0;
  (%305,)
}

def @func_7237() -> Tensor[(4, 2, 14), float64] {
  %307 = fn () -> Tensor[(4, 2, 14), float64] {
    %306 = @func_4111() /* ty=(Tensor[(4, 2, 14), float64], Tensor[(13, 14, 10), float64], Tensor[(4, 2, 14), float64]) */;
    %306.0
  };
  %307() /* ty=Tensor[(4, 2, 14), float64] */
}

def @func_4910(%var_4907: Tensor[(12, 9, 14), float32], %var_4908: Tensor[(315), float32], %var_4909: int32) -> (Tensor[(12, 9, 14), bool], int32, Tensor[(315), float32], int32) {
  %317 = fn (%var_4898: Tensor[(12, 9, 14), float32], %var_4903: Tensor[(315), float32], %var_4904: int32) -> (Tensor[(12, 9, 14), bool], int32, Tensor[(315), float32], int32) {
    %308 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 9, 14), float32] */, dtype="bool") /* ty=Tensor[(1, 9, 14), bool] */;
    %309 = cast(%var_4898, dtype="bool") /* ty=Tensor[(12, 9, 14), bool] */;
    %310 = cast(%var_4903, dtype="float32") /* ty=Tensor[(315), float32] */;
    %311 = cast(%var_4904, dtype="int32") /* ty=int32 */;
    %312 = reshape(%310, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), float32] */;
    %313 = reshape(%311, newshape=[]) /* ty=int32 */;
    %314 = @func_1767(%312, %313) /* ty=(Tensor[(3, 7, 15), float32], Tensor[(6, 14, 4), float32], int32, Tensor[(9, 2, 13), float32], Tensor[(234, 336), float64]) */;
    %315 = less(%308, %309) /* ty=Tensor[(12, 9, 14), bool] */;
    %316 = %314.2;
    (%315, %316, %var_4903, %var_4904)
  };
  %317(%var_4907, %var_4908, %var_4909) /* ty=(Tensor[(12, 9, 14), bool], int32, Tensor[(315), float32], int32) */
}

def @func_7951() -> (Tensor[(4, 2, 14), float64],) {
  @func_7949() /* ty=(Tensor[(4, 2, 14), float64],) */
}

def @func_8678(%var_8677: Tensor[(234), int64]) -> (Tensor[(4, 2, 14), float32], Tensor[(9, 2, 13), float32], Tensor[(234), int64], Tensor[(6, 9, 16), float64], Tensor[(9, 6, 5), float32]) {
  %330 = fn (%var_8640: Tensor[(234), int64]) -> (Tensor[(4, 2, 14), float32], Tensor[(9, 2, 13), float32], Tensor[(234), int64], Tensor[(6, 9, 16), float64], Tensor[(9, 6, 5), float32]) {
    %318 = @func_7339() /* ty=(Tensor[(4, 2, 14), float32], Tensor[(4, 2, 14), float64]) */;
    %319 = cast(%var_8640, dtype="int64") /* ty=Tensor[(234), int64] */;
    %320 = reshape(%319, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), int64] */;
    %321 = @func_400(%320) /* ty=(Tensor[(9, 2, 13), float32],) */;
    %322 = cast(meta[relay.Constant][19] /* ty=Tensor[(6, 9, 16), float64] */, dtype="float64") /* ty=Tensor[(6, 9, 16), float64] */;
    %323 = asinh(%322) /* ty=Tensor[(6, 9, 16), float64] */;
    %324 = cast(%323, dtype="float64") /* ty=Tensor[(6, 9, 16), float64] */;
    %325 = @func_6489() /* ty=(Tensor[(9, 6, 5), float32],) */;
    %326 = %318.0;
    %327 = %321.0;
    %328 = acos(%324) /* ty=Tensor[(6, 9, 16), float64] */;
    %329 = %325.0;
    (%326, %327, %var_8640, %328, %329)
  };
  %330(%var_8677) /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 2, 13), float32], Tensor[(234), int64], Tensor[(6, 9, 16), float64], Tensor[(9, 6, 5), float32]) */
}

def @func_9009() -> (Tensor[(9, 6, 5), float32],) {
  @func_9007() /* ty=(Tensor[(9, 6, 5), float32],) */
}

def @func_9839() -> (Tensor[(4, 2, 14), float64], Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float32], Tensor[(234), int64], Tensor[(2, 7, 11), float32]) {
  %340 = fn () -> (Tensor[(4, 2, 14), float64], Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float32], Tensor[(234), int64], Tensor[(2, 7, 11), float32]) {
    %331 = @func_4620() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(2, 7, 11), bool], Tensor[(2, 7, 11), float32], Tensor[(9, 6, 5), float32]) */;
    %332 = cast(meta[relay.Constant][20] /* ty=Tensor[(234), int64] */, dtype="int64") /* ty=Tensor[(234), int64] */;
    %333 = reshape(%332, newshape=[234]) /* ty=Tensor[(234), int64] */;
    %334 = @func_8676(%333) /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 2, 13), float32], Tensor[(234), int64], Tensor[(6, 9, 16), float64], Tensor[(9, 6, 5), float32]) */;
    %335 = @func_4620() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(2, 7, 11), bool], Tensor[(2, 7, 11), float32], Tensor[(9, 6, 5), float32]) */;
    %336 = @func_3757() /* ty=Tensor[(4, 2, 14), float64] */;
    %337 = %331.0;
    %338 = %334.4;
    %339 = %335.2;
    (%336, %337, %338, meta[relay.Constant][20] /* ty=Tensor[(234), int64] */, %339)
  };
  %340() /* ty=(Tensor[(4, 2, 14), float64], Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float32], Tensor[(234), int64], Tensor[(2, 7, 11), float32]) */
}

def @func_9075() -> Tensor[(9, 6, 5), uint8] {
  @func_9073() /* ty=Tensor[(9, 6, 5), uint8] */
}

def @func_7649() -> (Tensor[(9, 6, 5), float32],) {
  @func_7647() /* ty=(Tensor[(9, 6, 5), float32],) */
}

def @func_8113() -> (Tensor[(4, 2, 14), float64], Tensor[(11, 5, 4), uint8]) {
  %341 = @func_6076() /* ty=(Tensor[(4, 2, 14), bool], Tensor[(11, 5, 4), uint8], Tensor[(220, 1), uint8], Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), float32]) */;
  %342 = @func_2271() /* ty=Tensor[(4, 2, 14), float64] */;
  %343 = %341.1;
  (%342, %343)
}

def @func_3327() -> (Tensor[(9, 6, 5), float32],) {
  %344 = @func_2929() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %345 = %344.0;
  (%345,)
}

def @func_6161(%var_6159: Tensor[(5, 2, 4), uint64], %var_6160: Tensor[(5, 2, 4), uint64]) -> (Tensor[(4, 2, 14), float32], Tensor[(5, 2, 4), float64]) {
  %360 = fn (%var_6117: Tensor[(5, 2, 4), uint64], %var_6118: Tensor[(5, 2, 4), uint64]) -> (Tensor[(4, 2, 14), float32], Tensor[(5, 2, 4), float64]) {
    %346 = @func_3353() /* ty=(Tensor[(4, 2, 14), float32],) */;
    %347 = cast(%var_6118, dtype="uint64") /* ty=Tensor[(5, 2, 4), uint64] */;
    %348 = shape_of(%var_6117, dtype="int32") /* ty=Tensor[(3), int32] */;
    %349 = cast(%var_6117, dtype="uint64") /* ty=Tensor[(5, 2, 4), uint64] */;
    %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %351 = bitwise_xor(%349, %350) /* ty=Tensor[(5, 2, 4), uint64] */;
    %352 = cast(%var_6117, dtype="bool") /* ty=Tensor[(5, 2, 4), bool] */;
    %353 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
    %354 = cast(%351, dtype="bool") /* ty=Tensor[(5, 2, 4), bool] */;
    %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %356 = greater(%354, %355) /* ty=Tensor[(5, 2, 4), bool] */;
    %357 = cast(%356, dtype="float64") /* ty=Tensor[(5, 2, 4), float64] */;
    %358 = %346.0;
    %359 = log10(%357) /* ty=Tensor[(5, 2, 4), float64] */;
    (%358, %359)
  };
  %360(%var_6159, %var_6160) /* ty=(Tensor[(4, 2, 14), float32], Tensor[(5, 2, 4), float64]) */
}

def @func_6900(%var_6898: Tensor[(117, 2), int64], %var_6899: Tensor[(220), uint8]) -> (Tensor[(9, 6, 5), float32], Tensor[(180), int16], Tensor[(117, 2), int64], Tensor[(3, 60), int16], Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), uint8], Tensor[(220), float32]) {
  @func_6896(%var_6898, %var_6899) /* ty=(Tensor[(9, 6, 5), float32], Tensor[(180), int16], Tensor[(117, 2), int64], Tensor[(3, 60), int16], Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), uint8], Tensor[(220), float32]) */
}

def @func_5920() -> (Tensor[(9, 6, 5), float64],) {
  @func_5918() /* ty=(Tensor[(9, 6, 5), float64],) */
}

def @func_8228() -> (bool, Tensor[(2, 14, 15), float32], Tensor[(1, 420), float32], Tensor[(9, 6, 5), float32]) {
  %361 = @func_2637() /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(10, 12, 13), bool], bool, Tensor[(1560), bool]) */;
  %362 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 420), float32] */, dtype="float32") /* ty=Tensor[(1, 420), float32] */;
  %363 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 420), float32] */, dtype="float32") /* ty=Tensor[(1, 420), float32] */;
  %364 = reshape(%362, newshape=[2, 14, 15]) /* ty=Tensor[(2, 14, 15), float32] */;
  %365 = reshape(%363, newshape=[2, 14, 15]) /* ty=Tensor[(2, 14, 15), float32] */;
  %366 = @func_6799() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %367 = %361.2;
  %368 = @func_2773(%364, %365) /* ty=Tensor[(2, 14, 15), float32] */;
  %369 = %366.0;
  (%367, %368, meta[relay.Constant][21] /* ty=Tensor[(1, 420), float32] */, %369)
}

def @func_5959(%var_5958: Tensor[(704, 1), float32]) -> (Tensor[(9, 6, 5), uint8], Tensor[(704, 1), float32], Tensor[(1, 1820), float32], Tensor[(13, 14, 10), float64]) {
  %379 = fn (%var_5937: Tensor[(704, 1), float32]) -> (Tensor[(9, 6, 5), uint8], Tensor[(704, 1), float32], Tensor[(1, 1820), float32], Tensor[(13, 14, 10), float64]) {
    %370 = cast(%var_5937, dtype="float32") /* ty=Tensor[(704, 1), float32] */;
    %371 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 1820), float32] */, dtype="float32") /* ty=Tensor[(1, 1820), float32] */;
    %372 = reshape(%370, newshape=[704]) /* ty=Tensor[(704), float32] */;
    %373 = reshape(%371, newshape=[1820]) /* ty=Tensor[(1820), float32] */;
    %374 = @func_5656(%372, %373) /* ty=(Tensor[(4, 2, 14), float64], Tensor[(13, 14, 10), float32], Tensor[(704), float32], Tensor[(336), int8], Tensor[(1820), float32], Tensor[(9, 6, 5), float32]) */;
    %375 = %374.1;
    %376 = cast(%375, dtype="float64") /* ty=Tensor[(13, 14, 10), float64] */;
    %377 = @func_4831() /* ty=Tensor[(9, 6, 5), uint8] */;
    %378 = sin(%376) /* ty=Tensor[(13, 14, 10), float64] */;
    (%377, %var_5937, meta[relay.Constant][22] /* ty=Tensor[(1, 1820), float32] */, %378)
  };
  %379(%var_5958) /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(704, 1), float32], Tensor[(1, 1820), float32], Tensor[(13, 14, 10), float64]) */
}

def @func_6250() -> (Tensor[(9, 6, 5), float32], Tensor[(4, 2, 14), float32]) {
  @func_6248() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(4, 2, 14), float32]) */
}

def @func_571(%var_569: Tensor[(7, 16, 3), int8], %var_570: Tensor[(7, 16, 3), int8]) -> Tensor[(7, 16, 3), bool] {
  %384 = fn (%var_563: Tensor[(7, 16, 3), int8], %var_564: Tensor[(7, 16, 3), int8]) -> Tensor[(7, 16, 3), bool] {
    %380 = cast(%var_564, dtype="bool") /* ty=Tensor[(7, 16, 3), bool] */;
    %381 = shape_of(%var_563, dtype="int32") /* ty=Tensor[(3), int32] */;
    %382 = cast(%var_563, dtype="bool") /* ty=Tensor[(7, 16, 3), bool] */;
    %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater_equal(%382, %383) /* ty=Tensor[(7, 16, 3), bool] */
  };
  %384(%var_569, %var_570) /* ty=Tensor[(7, 16, 3), bool] */
}

def @func_7521() -> (Tensor[(9, 6, 5), float64],) {
  %387 = fn () -> (Tensor[(9, 6, 5), float64],) {
    %385 = @func_3068() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float64], Tensor[(11, 5, 4), bool], Tensor[(220), uint8]) */;
    %386 = %385.1;
    (%386,)
  };
  %387() /* ty=(Tensor[(9, 6, 5), float64],) */
}

def @func_2476() -> Tensor[(9, 6, 5), uint8] {
  @func_2474() /* ty=Tensor[(9, 6, 5), uint8] */
}

def @func_8082() -> (Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float32]) {
  %392 = fn () -> (Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float32]) {
    %388 = @func_7647() /* ty=(Tensor[(9, 6, 5), float32],) */;
    %389 = @func_4535() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), float32]) */;
    %390 = %388.0;
    %391 = %389.0;
    (%390, %391)
  };
  %392() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float32]) */
}

def @func_3824() -> Tensor[(4, 2, 14), bool] {
  @func_3822() /* ty=Tensor[(4, 2, 14), bool] */
}

def @func_1381(%var_1325: Tensor[(8, 11, 8), float32], %var_1338: Tensor[(8, 11, 8), float32], %var_1350: Tensor[(336), int8], %var_1373: Tensor[(910, 2), float32]) -> (Tensor[(9, 2, 13), float32], Tensor[(234), int64], Tensor[(7, 16, 3), bool], Tensor[(336), int8], Tensor[(8, 11, 8), bool], Tensor[(13, 14, 10), float32], Tensor[(910, 2), float32]) {
  %393 = cast(meta[relay.Constant][23] /* ty=Tensor[(234), int64] */, dtype="int64") /* ty=Tensor[(234), int64] */;
  %394 = reshape(%393, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), int64] */;
  %395 = @func_400(%394) /* ty=(Tensor[(9, 2, 13), float32],) */;
  %396 = cast(%var_1350, dtype="int8") /* ty=Tensor[(336), int8] */;
  %397 = cast(%var_1350, dtype="int8") /* ty=Tensor[(336), int8] */;
  %398 = reshape(%396, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), int8] */;
  %399 = reshape(%397, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), int8] */;
  %400 = cast(%var_1325, dtype="float32") /* ty=Tensor[(8, 11, 8), float32] */;
  %401 = asin(%400) /* ty=Tensor[(8, 11, 8), float32] */;
  %402 = cast(%var_1338, dtype="float64") /* ty=Tensor[(8, 11, 8), float64] */;
  %403 = shape_of(%401, dtype="int32") /* ty=Tensor[(3), int32] */;
  %404 = cast(%401, dtype="float64") /* ty=Tensor[(8, 11, 8), float64] */;
  %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %406 = mod(%404, %405) /* ty=Tensor[(8, 11, 8), float64] */;
  %407 = cast(%var_1325, dtype="bool") /* ty=Tensor[(8, 11, 8), bool] */;
  %408 = shape_of(%406, dtype="int32") /* ty=Tensor[(3), int32] */;
  %409 = cast(%406, dtype="bool") /* ty=Tensor[(8, 11, 8), bool] */;
  %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %411 = cast(%var_1373, dtype="float32") /* ty=Tensor[(910, 2), float32] */;
  %412 = reshape(%411, newshape=[13, 14, 10]) /* ty=Tensor[(13, 14, 10), float32] */;
  %413 = @func_459(%412) /* ty=(Tensor[(13, 14, 10), float32], Tensor[(13, 14, 10), float64]) */;
  %414 = %395.0;
  %415 = @func_568(%398, %399) /* ty=Tensor[(7, 16, 3), bool] */;
  %416 = less_equal(%409, %410) /* ty=Tensor[(8, 11, 8), bool] */;
  %417 = %413.0;
  (%414, meta[relay.Constant][23] /* ty=Tensor[(234), int64] */, %415, %var_1350, %416, %417, %var_1373)
}

def @func_10560() -> Tensor[(9, 6, 5), float32] {
  %418 = fn () -> Tensor[(9, 6, 5), float32] {
    @func_4120() /* ty=Tensor[(9, 6, 5), float32] */
  };
  %418() /* ty=Tensor[(9, 6, 5), float32] */
}

def @func_5593() -> Tensor[(9, 6, 5), float32] {
  %419 = @func_2435() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %419.0
}

def @func_2822(%var_2820: Tensor[(14, 13, 10), float32]) -> (Tensor[(14, 13, 10), float32],) {
  @func_2819(%var_2820) /* ty=(Tensor[(14, 13, 10), float32],) */
}

def @func_3070() -> (Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float64], Tensor[(11, 5, 4), bool], Tensor[(220), uint8]) {
  @func_3068() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float64], Tensor[(11, 5, 4), bool], Tensor[(220), uint8]) */
}

def @func_7289(%var_7288: Tensor[(112), float64]) -> (Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8], Tensor[(112), float64]) {
  %426 = fn (%var_7278: Tensor[(112), float64]) -> (Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8], Tensor[(112), float64]) {
    %420 = @func_2435() /* ty=(Tensor[(9, 6, 5), float32],) */;
    %421 = cast(%var_7278, dtype="float64") /* ty=Tensor[(112), float64] */;
    %422 = reshape(%421, newshape=[4, 2, 14]) /* ty=Tensor[(4, 2, 14), float64] */;
    %423 = @func_5409(%422) /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), uint8]) */;
    %424 = %420.0;
    %425 = %423.1;
    (%424, %425, %var_7278)
  };
  %426(%var_7288) /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8], Tensor[(112), float64]) */
}

def @func_2561() -> (Tensor[(9, 6, 5), uint8], Tensor[(6, 2, 15), float64]) {
  @func_2559() /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(6, 2, 15), float64]) */
}

def @func_6328() -> (Tensor[(9, 6, 5), uint8],) {
  %427 = @func_5207() /* ty=Tensor[(9, 6, 5), uint8] */;
  (%427,)
}

def @func_4940() -> Tensor[(4, 2, 14), float64] {
  @func_2193() /* ty=Tensor[(4, 2, 14), float64] */
}

def @func_6491() -> (Tensor[(9, 6, 5), float32],) {
  @func_6489() /* ty=(Tensor[(9, 6, 5), float32],) */
}

def @func_8370() -> (Tensor[(4, 2, 14), bool], Tensor[(9, 2, 13), float32], Tensor[(1560), bool], Tensor[(234), int64], int32) {
  %438 = fn () -> (Tensor[(4, 2, 14), bool], Tensor[(9, 2, 13), float32], Tensor[(1560), bool], Tensor[(234), int64], int32) {
    %428 = @func_6076() /* ty=(Tensor[(4, 2, 14), bool], Tensor[(11, 5, 4), uint8], Tensor[(220, 1), uint8], Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), float32]) */;
    %429 = cast(meta[relay.Constant][24] /* ty=Tensor[(1560), bool] */, dtype="bool") /* ty=Tensor[(1560), bool] */;
    %430 = cast(meta[relay.Constant][25] /* ty=Tensor[(234), int64] */, dtype="int64") /* ty=Tensor[(234), int64] */;
    %431 = cast(3 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %432 = reshape(%429, newshape=[10, 12, 13]) /* ty=Tensor[(10, 12, 13), bool] */;
    %433 = reshape(%430, newshape=[234]) /* ty=Tensor[(234), int64] */;
    %434 = reshape(%431, newshape=[]) /* ty=int32 */;
    %435 = @func_3511(%432, %433, %434) /* ty=(Tensor[(9, 2, 13), float32], Tensor[(234), int64], Tensor[(2, 14, 15), float32], Tensor[(420), float32], Tensor[(6, 14, 4), int32], int32, Tensor[(10, 12, 13), float32], Tensor[(4, 2, 14), float32]) */;
    %436 = %428.0;
    %437 = %435.0;
    (%436, %437, meta[relay.Constant][24] /* ty=Tensor[(1560), bool] */, meta[relay.Constant][25] /* ty=Tensor[(234), int64] */, 3 /* ty=int32 */)
  };
  %438() /* ty=(Tensor[(4, 2, 14), bool], Tensor[(9, 2, 13), float32], Tensor[(1560), bool], Tensor[(234), int64], int32) */
}

def @func_6801() -> (Tensor[(9, 6, 5), float32],) {
  @func_6799() /* ty=(Tensor[(9, 6, 5), float32],) */
}

def @func_2436() -> (Tensor[(9, 6, 5), float32],) {
  %441 = fn () -> (Tensor[(9, 6, 5), float32],) {
    %439 = @func_2049() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8]) */;
    %440 = %439.0;
    (%440,)
  };
  %441() /* ty=(Tensor[(9, 6, 5), float32],) */
}

def @func_10060() -> (Tensor[(9, 6, 5), float64],) {
  %442 = @func_5918() /* ty=(Tensor[(9, 6, 5), float64],) */;
  %443 = %442.0;
  (%443,)
}

def @func_2301(%var_2297: Tensor[(336), int8]) -> (Tensor[(4, 2, 14), float64], Tensor[(180), int16], Tensor[(336), int8]) {
  %444 = cast(%var_2297, dtype="int8") /* ty=Tensor[(336), int8] */;
  %445 = reshape(%444, newshape=[336]) /* ty=Tensor[(336), int8] */;
  %446 = @func_2147(%445) /* ty=(Tensor[(9, 6, 5), float32], Tensor[(6, 2, 15), int16], Tensor[(180), int16], Tensor[(7, 16, 3), bool], Tensor[(336), int8], Tensor[(7, 16, 3), bool]) */;
  %447 = @func_2193() /* ty=Tensor[(4, 2, 14), float64] */;
  %448 = %446.2;
  (%447, %448, %var_2297)
}

def @func_7396() -> (Tensor[(9, 6, 5), uint8],) {
  @func_7394() /* ty=(Tensor[(9, 6, 5), uint8],) */
}

def @func_6248() -> (Tensor[(9, 6, 5), float32], Tensor[(4, 2, 14), float32]) {
  %449 = @func_3010() /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8]) */;
  %450 = @func_4120() /* ty=Tensor[(9, 6, 5), float32] */;
  %451 = %449.0;
  (%450, %451)
}

def @func_8154(%var_8152: Tensor[(4, 14, 6), float32], %var_8153: Tensor[(4, 14, 6), float32]) -> (Tensor[(9, 6, 5), float32], Tensor[(4, 14, 6), bool]) {
  @func_8150(%var_8152, %var_8153) /* ty=(Tensor[(9, 6, 5), float32], Tensor[(4, 14, 6), bool]) */
}

def @func_9568() -> (Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8]) {
  %452 = @func_2739() /* ty=(Tensor[(9, 6, 5), uint8],) */;
  %453 = @func_2860() /* ty=Tensor[(4, 2, 14), float32] */;
  %454 = %452.0;
  (%453, %454)
}

def @func_2194() -> Tensor[(4, 2, 14), float64] {
  %458 = fn () -> Tensor[(4, 2, 14), float64] {
    %455 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 2, 14), float32] */, dtype="float32") /* ty=Tensor[(4, 2, 14), float32] */;
    %456 = log(%455) /* ty=Tensor[(4, 2, 14), float32] */;
    %457 = cast(%456, dtype="float64") /* ty=Tensor[(4, 2, 14), float64] */;
    log2(%457) /* ty=Tensor[(4, 2, 14), float64] */
  };
  %458() /* ty=Tensor[(4, 2, 14), float64] */
}

def @func_3354() -> (Tensor[(4, 2, 14), float32],) {
  %461 = fn () -> (Tensor[(4, 2, 14), float32],) {
    %459 = @func_3010() /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8]) */;
    %460 = %459.0;
    (%460,)
  };
  %461() /* ty=(Tensor[(4, 2, 14), float32],) */
}

def @func_4492() -> (Tensor[(8, 15, 16), float32], Tensor[(10, 12, 13), bool]) {
  %468 = fn () -> (Tensor[(8, 15, 16), float32], Tensor[(10, 12, 13), bool]) {
    %462 = cast(meta[relay.Constant][27] /* ty=Tensor[(8, 15, 16), float32] */, dtype="float32") /* ty=Tensor[(8, 15, 16), float32] */;
    %463 = tan(%462) /* ty=Tensor[(8, 15, 16), float32] */;
    %464 = cast(%463, dtype="float32") /* ty=Tensor[(8, 15, 16), float32] */;
    %465 = @func_2637() /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(10, 12, 13), bool], bool, Tensor[(1560), bool]) */;
    %466 = asin(%464) /* ty=Tensor[(8, 15, 16), float32] */;
    %467 = %465.1;
    (%466, %467)
  };
  %468() /* ty=(Tensor[(8, 15, 16), float32], Tensor[(10, 12, 13), bool]) */
}

def @func_7603() -> Tensor[(4, 2, 14), float64] {
  %470 = fn () -> Tensor[(4, 2, 14), float64] {
    %469 = @func_4111() /* ty=(Tensor[(4, 2, 14), float64], Tensor[(13, 14, 10), float64], Tensor[(4, 2, 14), float64]) */;
    %469.0
  };
  %470() /* ty=Tensor[(4, 2, 14), float64] */
}

def @func_5563() -> (Tensor[(9, 6, 5), uint8],) {
  %472 = fn () -> (Tensor[(9, 6, 5), uint8],) {
    %471 = @func_4831() /* ty=Tensor[(9, 6, 5), uint8] */;
    (%471,)
  };
  %472() /* ty=(Tensor[(9, 6, 5), uint8],) */
}

def @func_9041() -> Tensor[(9, 6, 5), float32] {
  %473 = @func_2435() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %473.0
}

def @func_6756() -> Tensor[(2, 7, 11), bool] {
  %475 = fn () -> Tensor[(2, 7, 11), bool] {
    %474 = @func_4620() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(2, 7, 11), bool], Tensor[(2, 7, 11), float32], Tensor[(9, 6, 5), float32]) */;
    %474.1
  };
  %475() /* ty=Tensor[(2, 7, 11), bool] */
}

def @func_10156() -> Tensor[(4, 2, 8), bool] {
  %477 = fn () -> Tensor[(4, 2, 8), bool] {
    %476 = @func_7449() /* ty=(Tensor[(4, 2, 8), uint8], Tensor[(4, 2, 8), bool]) */;
    %476.1
  };
  %477() /* ty=Tensor[(4, 2, 8), bool] */
}

def @func_10797() -> (Tensor[(9, 6, 5), float32], Tensor[(13, 14, 10), float64]) {
  @func_10795() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(13, 14, 10), float64]) */
}

def @func_7759() -> (Tensor[(4, 2, 8), bool], Tensor[(4, 2, 14), bool]) {
  @func_7757() /* ty=(Tensor[(4, 2, 8), bool], Tensor[(4, 2, 14), bool]) */
}

def @func_4620() -> (Tensor[(9, 6, 5), float32], Tensor[(2, 7, 11), bool], Tensor[(2, 7, 11), float32], Tensor[(9, 6, 5), float32]) {
  %478 = @func_3327() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %479 = cast(meta[relay.Constant][28] /* ty=Tensor[(154), float64] */, dtype="float64") /* ty=Tensor[(154), float64] */;
  %480 = reshape(%479, newshape=[2, 7, 11]) /* ty=Tensor[(2, 7, 11), float64] */;
  %481 = @func_3913(%480) /* ty=Tensor[(2, 7, 11), float64] */;
  %482 = cast(meta[relay.Constant][28] /* ty=Tensor[(154), float64] */, dtype="bool") /* ty=Tensor[(154), bool] */;
  %483 = shape_of(%481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %484 = cast(%481, dtype="bool") /* ty=Tensor[(2, 7, 11), bool] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %486 = cast(meta[relay.Constant][28] /* ty=Tensor[(154), float64] */, dtype="float32") /* ty=Tensor[(154), float32] */;
  %487 = shape_of(%481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %488 = cast(%481, dtype="float32") /* ty=Tensor[(2, 7, 11), float32] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %490 = @func_3752() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float32]) */;
  %491 = %478.0;
  %492 = greater(%484, %485) /* ty=Tensor[(2, 7, 11), bool] */;
  %493 = floor_divide(%488, %489) /* ty=Tensor[(2, 7, 11), float32] */;
  %494 = %490.1;
  (%491, %492, %493, %494)
}

def @func_10099() -> (Tensor[(4, 2, 14), float64],) {
  %496 = fn () -> (Tensor[(4, 2, 14), float64],) {
    %495 = @func_4940() /* ty=Tensor[(4, 2, 14), float64] */;
    (%495,)
  };
  %496() /* ty=(Tensor[(4, 2, 14), float64],) */
}

def @func_1387(%var_1383: Tensor[(8, 11, 8), float32], %var_1384: Tensor[(8, 11, 8), float32], %var_1385: Tensor[(336), int8], %var_1386: Tensor[(910, 2), float32]) -> (Tensor[(9, 2, 13), float32], Tensor[(234), int64], Tensor[(7, 16, 3), bool], Tensor[(336), int8], Tensor[(8, 11, 8), bool], Tensor[(13, 14, 10), float32], Tensor[(910, 2), float32]) {
  @func_1381(%var_1383, %var_1384, %var_1385, %var_1386) /* ty=(Tensor[(9, 2, 13), float32], Tensor[(234), int64], Tensor[(7, 16, 3), bool], Tensor[(336), int8], Tensor[(8, 11, 8), bool], Tensor[(13, 14, 10), float32], Tensor[(910, 2), float32]) */
}

def @func_10062() -> (Tensor[(9, 6, 5), float64],) {
  @func_10060() /* ty=(Tensor[(9, 6, 5), float64],) */
}

def @func_7664() -> Tensor[(9, 6, 5), uint8] {
  @func_7662() /* ty=Tensor[(9, 6, 5), uint8] */
}

def @func_10685() -> (Tensor[(4, 2, 14), float64],) {
  %499 = fn () -> (Tensor[(4, 2, 14), float64],) {
    %497 = @func_7415() /* ty=(Tensor[(4, 2, 14), float64],) */;
    %498 = %497.0;
    (%498,)
  };
  %499() /* ty=(Tensor[(4, 2, 14), float64],) */
}

def @func_6444(%var_6443: Tensor[(2, 10), float32]) -> (Tensor[(2, 10), float32], bool) {
  %504 = fn (%var_6424: Tensor[(2, 10), float32]) -> (Tensor[(2, 10), float32], bool) {
    %500 = cast(%var_6424, dtype="float32") /* ty=Tensor[(2, 10), float32] */;
    %501 = @func_2637() /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(10, 12, 13), bool], bool, Tensor[(1560), bool]) */;
    %502 = asin(%500) /* ty=Tensor[(2, 10), float32] */;
    %503 = %501.2;
    (%502, %503)
  };
  %504(%var_6443) /* ty=(Tensor[(2, 10), float32], bool) */
}

def @func_6272(%var_6267: Tensor[(16, 9, 9), int16], %var_6268: Tensor[(16, 9, 9), int16]) -> Tensor[(16, 9, 9), int16] {
  %505 = cast(%var_6268, dtype="int16") /* ty=Tensor[(16, 9, 9), int16] */;
  %506 = shape_of(%var_6267, dtype="int32") /* ty=Tensor[(3), int32] */;
  %507 = cast(%var_6267, dtype="int16") /* ty=Tensor[(16, 9, 9), int16] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  bitwise_xor(%507, %508) /* ty=Tensor[(16, 9, 9), int16] */
}

def @func_7866(%var_7865: Tensor[(1, 220), uint8]) -> (Tensor[(4, 2, 14), float64], Tensor[(9, 6, 5), float32], Tensor[(180), int16], Tensor[(117, 2), int64], Tensor[(180), int16], Tensor[(1, 220), uint8]) {
  %520 = fn (%var_7852: Tensor[(1, 220), uint8]) -> (Tensor[(4, 2, 14), float64], Tensor[(9, 6, 5), float32], Tensor[(180), int16], Tensor[(117, 2), int64], Tensor[(180), int16], Tensor[(1, 220), uint8]) {
    %509 = @func_4177() /* ty=(Tensor[(4, 2, 14), float64], Tensor[(9, 6, 5), float32], Tensor[(4, 2, 14), float64]) */;
    %510 = cast(meta[relay.Constant][29] /* ty=Tensor[(117, 2), int64] */, dtype="int64") /* ty=Tensor[(117, 2), int64] */;
    %511 = cast(meta[relay.Constant][30] /* ty=Tensor[(180), int16] */, dtype="int16") /* ty=Tensor[(180), int16] */;
    %512 = cast(%var_7852, dtype="uint8") /* ty=Tensor[(1, 220), uint8] */;
    %513 = reshape(%510, newshape=[234]) /* ty=Tensor[(234), int64] */;
    %514 = reshape(%511, newshape=[180]) /* ty=Tensor[(180), int16] */;
    %515 = reshape(%512, newshape=[220]) /* ty=Tensor[(220), uint8] */;
    %516 = @func_3385(%513, %514, %515) /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(9, 2, 13), float32], Tensor[(234), int64], Tensor[(9, 6, 5), float32], Tensor[(6, 2, 15), int16], Tensor[(180), int16], Tensor[(9, 6, 5), float64], int32, Tensor[(220), uint8]) */;
    %517 = %509.2;
    %518 = @func_5593() /* ty=Tensor[(9, 6, 5), float32] */;
    %519 = %516.5;
    (%517, %518, %519, meta[relay.Constant][29] /* ty=Tensor[(117, 2), int64] */, meta[relay.Constant][30] /* ty=Tensor[(180), int16] */, %var_7852)
  };
  %520(%var_7865) /* ty=(Tensor[(4, 2, 14), float64], Tensor[(9, 6, 5), float32], Tensor[(180), int16], Tensor[(117, 2), int64], Tensor[(180), int16], Tensor[(1, 220), uint8]) */
}

def @func_10052() -> (Tensor[(9, 6, 5), float32], Tensor[(336), int8], Tensor[(9, 6, 5), uint8], Tensor[(2, 7, 11), float64]) {
  %521 = @func_5450() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %522 = @func_6731() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(7, 16, 3), bool], Tensor[(336), int8]) */;
  %523 = @func_2794() /* ty=(Tensor[(9, 6, 5), uint8],) */;
  %524 = @func_9451() /* ty=(Tensor[(2, 7, 11), float64],) */;
  %525 = %521.0;
  %526 = %522.2;
  %527 = %523.0;
  %528 = %524.0;
  (%525, %526, %527, %528)
}

def @func_9073() -> Tensor[(9, 6, 5), uint8] {
  @func_7662() /* ty=Tensor[(9, 6, 5), uint8] */
}

def @func_7509() -> (Tensor[(9, 6, 5), float32], Tensor[(2, 7, 11), float64]) {
  @func_7507() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(2, 7, 11), float64]) */
}

def @func_7450() -> (Tensor[(4, 2, 8), uint8], Tensor[(4, 2, 8), bool]) {
  %548 = fn () -> (Tensor[(4, 2, 8), uint8], Tensor[(4, 2, 8), bool]) {
    %529 = cast(meta[relay.Constant][31] /* ty=Tensor[(4, 2, 8), float64] */, dtype="float64") /* ty=Tensor[(4, 2, 8), float64] */;
    %530 = log2(%529) /* ty=Tensor[(4, 2, 8), float64] */;
    %531 = cast(%530, dtype="float64") /* ty=Tensor[(4, 2, 8), float64] */;
    %532 = log(%531) /* ty=Tensor[(4, 2, 8), float64] */;
    %533 = cast(%530, dtype="int64") /* ty=Tensor[(4, 2, 8), int64] */;
    %534 = shape_of(%532, dtype="int32") /* ty=Tensor[(3), int32] */;
    %535 = cast(%532, dtype="int64") /* ty=Tensor[(4, 2, 8), int64] */;
    %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %537 = logical_xor(%535, %536) /* ty=Tensor[(4, 2, 8), int64] */;
    %538 = cast(%537, dtype="uint8") /* ty=Tensor[(4, 2, 8), uint8] */;
    %539 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(4, 2, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %540 = cast(meta[relay.Constant][31] /* ty=Tensor[(4, 2, 8), float64] */, dtype="uint8") /* ty=Tensor[(4, 2, 8), uint8] */;
    %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %542 = cast(meta[relay.Constant][31] /* ty=Tensor[(4, 2, 8), float64] */, dtype="bool") /* ty=Tensor[(4, 2, 8), bool] */;
    %543 = shape_of(%537, dtype="int32") /* ty=Tensor[(3), int32] */;
    %544 = cast(%537, dtype="bool") /* ty=Tensor[(4, 2, 8), bool] */;
    %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %546 = left_shift(%540, %541) /* ty=Tensor[(4, 2, 8), uint8] */;
    %547 = not_equal(%544, %545) /* ty=Tensor[(4, 2, 8), bool] */;
    (%546, %547)
  };
  %548() /* ty=(Tensor[(4, 2, 8), uint8], Tensor[(4, 2, 8), bool]) */
}

def @func_4942() -> Tensor[(4, 2, 14), float64] {
  @func_4940() /* ty=Tensor[(4, 2, 14), float64] */
}

def @main(%var_10857: Tensor[(11, 7, 2), int8]) -> Tensor[(11, 7, 2), int8] {
  %549 = cast(%var_10857, dtype="int8") /* ty=Tensor[(11, 7, 2), int8] */;
  %550 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(11, 7, 2), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %551 = cast(meta[relay.Constant][32] /* ty=Tensor[(11, 7, 2), int8] */, dtype="int8") /* ty=Tensor[(11, 7, 2), int8] */;
  %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  left_shift(%551, %552) /* ty=Tensor[(11, 7, 2), int8] */
}

def @func_2740() -> (Tensor[(9, 6, 5), uint8],) {
  %554 = fn () -> (Tensor[(9, 6, 5), uint8],) {
    %553 = @func_2474() /* ty=Tensor[(9, 6, 5), uint8] */;
    (%553,)
  };
  %554() /* ty=(Tensor[(9, 6, 5), uint8],) */
}

def @func_5329() -> (Tensor[(8, 15, 16), float32],) {
  @func_5327() /* ty=(Tensor[(8, 15, 16), float32],) */
}

def @func_4221() -> (Tensor[(9, 6, 5), uint8],) {
  %557 = fn () -> (Tensor[(9, 6, 5), uint8],) {
    %555 = @func_3010() /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8]) */;
    %556 = %555.1;
    (%556,)
  };
  %557() /* ty=(Tensor[(9, 6, 5), uint8],) */
}

def @func_8748() -> (Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), float32]) {
  @func_8746() /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), float32]) */
}

def @func_3385(%var_3362: Tensor[(234), int64], %var_3369: Tensor[(180), int16], %var_3383: Tensor[(220), uint8]) -> (Tensor[(9, 6, 5), uint8], Tensor[(9, 2, 13), float32], Tensor[(234), int64], Tensor[(9, 6, 5), float32], Tensor[(6, 2, 15), int16], Tensor[(180), int16], Tensor[(9, 6, 5), float64], int32, Tensor[(220), uint8]) {
  %558 = cast(%var_3362, dtype="int64") /* ty=Tensor[(234), int64] */;
  %559 = reshape(%558, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), int64] */;
  %560 = @func_400(%559) /* ty=(Tensor[(9, 2, 13), float32],) */;
  %561 = @func_2435() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %562 = cast(%var_3369, dtype="int16") /* ty=Tensor[(180), int16] */;
  %563 = reshape(%562, newshape=[6, 2, 15]) /* ty=Tensor[(6, 2, 15), int16] */;
  %564 = cast(3 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %565 = cast(%var_3383, dtype="uint8") /* ty=Tensor[(220), uint8] */;
  %566 = reshape(%564, newshape=[]) /* ty=int32 */;
  %567 = reshape(%565, newshape=[5, 44]) /* ty=Tensor[(5, 44), uint8] */;
  %568 = @func_2397(%566, %567) /* ty=(Tensor[(9, 6, 5), float64], int32, Tensor[(1, 336), uint32], int32, Tensor[(11, 5, 4), uint8], Tensor[(5, 44), uint8]) */;
  %569 = @func_3166() /* ty=Tensor[(9, 6, 5), uint8] */;
  %570 = %560.0;
  %571 = %561.0;
  %572 = @func_1282(%563) /* ty=Tensor[(6, 2, 15), int16] */;
  %573 = %568.0;
  (%569, %570, %var_3362, %571, %572, %var_3369, %573, 3 /* ty=int32 */, %var_3383)
}

def @func_6330() -> (Tensor[(9, 6, 5), uint8],) {
  @func_6328() /* ty=(Tensor[(9, 6, 5), uint8],) */
}

def @func_6276(%var_6274: Tensor[(16, 9, 9), int16], %var_6275: Tensor[(16, 9, 9), int16]) -> Tensor[(16, 9, 9), int16] {
  @func_6272(%var_6274, %var_6275) /* ty=Tensor[(16, 9, 9), int16] */
}

def @func_6799() -> (Tensor[(9, 6, 5), float32],) {
  %574 = @func_6489() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %575 = %574.0;
  (%575,)
}

def @func_3515(%var_3512: Tensor[(10, 12, 13), bool], %var_3513: Tensor[(234), int64], %var_3514: int32) -> (Tensor[(9, 2, 13), float32], Tensor[(234), int64], Tensor[(2, 14, 15), float32], Tensor[(420), float32], Tensor[(6, 14, 4), int32], int32, Tensor[(10, 12, 13), float32], Tensor[(4, 2, 14), float32]) {
  %606 = fn (%var_3423: Tensor[(10, 12, 13), bool], %var_3439: Tensor[(234), int64], %var_3459: int32) -> (Tensor[(9, 2, 13), float32], Tensor[(234), int64], Tensor[(2, 14, 15), float32], Tensor[(420), float32], Tensor[(6, 14, 4), int32], int32, Tensor[(10, 12, 13), float32], Tensor[(4, 2, 14), float32]) {
    %576 = cast(%var_3439, dtype="int64") /* ty=Tensor[(234), int64] */;
    %577 = reshape(%576, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), int64] */;
    %578 = @func_400(%577) /* ty=(Tensor[(9, 2, 13), float32],) */;
    %579 = cast(meta[relay.Constant][33] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
    %580 = cast(meta[relay.Constant][33] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
    %581 = reshape(%579, newshape=[2, 14, 15]) /* ty=Tensor[(2, 14, 15), float32] */;
    %582 = reshape(%580, newshape=[2, 14, 15]) /* ty=Tensor[(2, 14, 15), float32] */;
    %583 = cast(%var_3459, dtype="int32") /* ty=int32 */;
    %584 = reshape(%583, newshape=[]) /* ty=int32 */;
    %585 = @func_2637() /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(10, 12, 13), bool], bool, Tensor[(1560), bool]) */;
    %586 = %585.1;
    %587 = cast(%var_3423, dtype="float64") /* ty=Tensor[(10, 12, 13), float64] */;
    %588 = shape_of(%586, dtype="int32") /* ty=Tensor[(3), int32] */;
    %589 = cast(%586, dtype="float64") /* ty=Tensor[(10, 12, 13), float64] */;
    %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %591 = subtract(%589, %590) /* ty=Tensor[(10, 12, 13), float64] */;
    %592 = cast(%591, dtype="bool") /* ty=Tensor[(10, 12, 13), bool] */;
    %593 = shape_of(%var_3423, dtype="int32") /* ty=Tensor[(3), int32] */;
    %594 = cast(%var_3423, dtype="bool") /* ty=Tensor[(10, 12, 13), bool] */;
    %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %596 = logical_or(%594, %595) /* ty=Tensor[(10, 12, 13), bool] */;
    %597 = cast(%596, dtype="float32") /* ty=Tensor[(10, 12, 13), float32] */;
    %598 = log(%597) /* ty=Tensor[(10, 12, 13), float32] */;
    %599 = cast(%598, dtype="float32") /* ty=Tensor[(10, 12, 13), float32] */;
    %600 = @func_2883() /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8]) */;
    %601 = %578.0;
    %602 = @func_2773(%581, %582) /* ty=Tensor[(2, 14, 15), float32] */;
    %603 = @func_429(%584) /* ty=Tensor[(6, 14, 4), int32] */;
    %604 = acosh(%599) /* ty=Tensor[(10, 12, 13), float32] */;
    %605 = %600.0;
    (%601, %var_3439, %602, meta[relay.Constant][33] /* ty=Tensor[(420), float32] */, %603, %var_3459, %604, %605)
  };
  %606(%var_3512, %var_3513, %var_3514) /* ty=(Tensor[(9, 2, 13), float32], Tensor[(234), int64], Tensor[(2, 14, 15), float32], Tensor[(420), float32], Tensor[(6, 14, 4), int32], int32, Tensor[(10, 12, 13), float32], Tensor[(4, 2, 14), float32]) */
}

def @func_3754() -> (Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float32]) {
  @func_3752() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float32]) */
}

def @func_5056(%var_5054: float64) -> (Tensor[(2, 2, 12), float64], Tensor[(9, 6, 5), float32], Tensor[(2, 2, 12), float32]) {
  @func_5053(%var_5054) /* ty=(Tensor[(2, 2, 12), float64], Tensor[(9, 6, 5), float32], Tensor[(2, 2, 12), float32]) */
}

def @func_2397(%var_2375: int32, %var_2395: Tensor[(5, 44), uint8]) -> (Tensor[(9, 6, 5), float64], int32, Tensor[(1, 336), uint32], int32, Tensor[(11, 5, 4), uint8], Tensor[(5, 44), uint8]) {
  %607 = @func_2049() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8]) */;
  %608 = %607.0;
  %609 = cast(%608, dtype="float64") /* ty=Tensor[(9, 6, 5), float64] */;
  %610 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 336), uint32] */, dtype="uint32") /* ty=Tensor[(1, 336), uint32] */;
  %611 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 336), uint32] */, dtype="uint32") /* ty=Tensor[(1, 336), uint32] */;
  %612 = cast(%var_2375, dtype="int32") /* ty=int32 */;
  %613 = reshape(%610, newshape=[12, 2, 14]) /* ty=Tensor[(12, 2, 14), uint32] */;
  %614 = reshape(%611, newshape=[12, 2, 14]) /* ty=Tensor[(12, 2, 14), uint32] */;
  %615 = reshape(%612, newshape=[]) /* ty=int32 */;
  %616 = @func_969(%613, %614, %615) /* ty=(Tensor[(12, 2, 14), uint32], int32, Tensor[(6, 14, 4), float32]) */;
  %617 = cast(%var_2395, dtype="uint8") /* ty=Tensor[(5, 44), uint8] */;
  %618 = cast(%var_2395, dtype="uint8") /* ty=Tensor[(5, 44), uint8] */;
  %619 = reshape(%617, newshape=[11, 5, 4]) /* ty=Tensor[(11, 5, 4), uint8] */;
  %620 = reshape(%618, newshape=[11, 5, 4]) /* ty=Tensor[(11, 5, 4), uint8] */;
  %621 = @func_1638(%619, %620) /* ty=(Tensor[(11, 5, 4), uint8], Tensor[(11, 5, 4), bool]) */;
  %622 = exp(%609) /* ty=Tensor[(9, 6, 5), float64] */;
  %623 = %616.1;
  %624 = %621.0;
  (%622, %623, meta[relay.Constant][34] /* ty=Tensor[(1, 336), uint32] */, %var_2375, %624, %var_2395)
}

def @func_2147(%var_2141: Tensor[(336), int8]) -> (Tensor[(9, 6, 5), float32], Tensor[(6, 2, 15), int16], Tensor[(180), int16], Tensor[(7, 16, 3), bool], Tensor[(336), int8], Tensor[(7, 16, 3), bool]) {
  %625 = @func_2049() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8]) */;
  %626 = cast(meta[relay.Constant][35] /* ty=Tensor[(180), int16] */, dtype="int16") /* ty=Tensor[(180), int16] */;
  %627 = reshape(%626, newshape=[6, 2, 15]) /* ty=Tensor[(6, 2, 15), int16] */;
  %628 = cast(%var_2141, dtype="int8") /* ty=Tensor[(336), int8] */;
  %629 = cast(%var_2141, dtype="int8") /* ty=Tensor[(336), int8] */;
  %630 = reshape(%628, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), int8] */;
  %631 = reshape(%629, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), int8] */;
  %632 = cast(%var_2141, dtype="int8") /* ty=Tensor[(336), int8] */;
  %633 = @func_568(%630, %631) /* ty=Tensor[(7, 16, 3), bool] */;
  %634 = cast(%633, dtype="int8") /* ty=Tensor[(7, 16, 3), int8] */;
  %635 = reshape(%632, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), int8] */;
  %636 = reshape(%634, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), int8] */;
  %637 = %625.0;
  %638 = @func_1282(%627) /* ty=Tensor[(6, 2, 15), int16] */;
  %639 = @func_568(%635, %636) /* ty=Tensor[(7, 16, 3), bool] */;
  (%637, %638, meta[relay.Constant][35] /* ty=Tensor[(180), int16] */, %633, %var_2141, %639)
}

def @func_6969(%var_6968: Tensor[(5, 44), uint8]) -> (Tensor[(4, 2, 14), bool], Tensor[(11, 5, 4), uint8], int32, Tensor[(5, 44), uint8], Tensor[(4, 2, 14), float32]) {
  %648 = fn (%var_6943: Tensor[(5, 44), uint8]) -> (Tensor[(4, 2, 14), bool], Tensor[(11, 5, 4), uint8], int32, Tensor[(5, 44), uint8], Tensor[(4, 2, 14), float32]) {
    %640 = cast(2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %641 = cast(%var_6943, dtype="uint8") /* ty=Tensor[(5, 44), uint8] */;
    %642 = reshape(%640, newshape=[]) /* ty=int32 */;
    %643 = reshape(%641, newshape=[5, 44]) /* ty=Tensor[(5, 44), uint8] */;
    %644 = @func_2397(%642, %643) /* ty=(Tensor[(9, 6, 5), float64], int32, Tensor[(1, 336), uint32], int32, Tensor[(11, 5, 4), uint8], Tensor[(5, 44), uint8]) */;
    %645 = @func_3822() /* ty=Tensor[(4, 2, 14), bool] */;
    %646 = %644.4;
    %647 = @func_2860() /* ty=Tensor[(4, 2, 14), float32] */;
    (%645, %646, 2 /* ty=int32 */, %var_6943, %647)
  };
  %648(%var_6968) /* ty=(Tensor[(4, 2, 14), bool], Tensor[(11, 5, 4), uint8], int32, Tensor[(5, 44), uint8], Tensor[(4, 2, 14), float32]) */
}

def @func_1771(%var_1769: Tensor[(3, 7, 15), float32], %var_1770: int32) -> (Tensor[(3, 7, 15), float32], Tensor[(6, 14, 4), float32], int32, Tensor[(9, 2, 13), float32], Tensor[(234, 336), float64]) {
  @func_1767(%var_1769, %var_1770) /* ty=(Tensor[(3, 7, 15), float32], Tensor[(6, 14, 4), float32], int32, Tensor[(9, 2, 13), float32], Tensor[(234, 336), float64]) */
}

def @func_2559() -> (Tensor[(9, 6, 5), uint8], Tensor[(6, 2, 15), float64]) {
  %649 = cast(meta[relay.Constant][36] /* ty=Tensor[(6, 30), int16] */, dtype="int16") /* ty=Tensor[(6, 30), int16] */;
  %650 = reshape(%649, newshape=[6, 2, 15]) /* ty=Tensor[(6, 2, 15), int16] */;
  %651 = @func_1282(%650) /* ty=Tensor[(6, 2, 15), int16] */;
  %652 = cast(meta[relay.Constant][36] /* ty=Tensor[(6, 30), int16] */, dtype="bool") /* ty=Tensor[(6, 30), bool] */;
  %653 = shape_of(%651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %654 = cast(%651, dtype="bool") /* ty=Tensor[(6, 2, 15), bool] */;
  %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %656 = equal(%654, %655) /* ty=Tensor[(6, 2, 15), bool] */;
  %657 = cast(%656, dtype="float64") /* ty=Tensor[(6, 2, 15), float64] */;
  %658 = @func_2061() /* ty=Tensor[(9, 6, 5), uint8] */;
  %659 = exp(%657) /* ty=Tensor[(6, 2, 15), float64] */;
  (%658, %659)
}

def @func_8532() -> (Tensor[(9, 6, 5), float64],) {
  @func_8530() /* ty=(Tensor[(9, 6, 5), float64],) */
}

def @func_5118() -> Tensor[(9, 6, 5), uint8] {
  @func_4831() /* ty=Tensor[(9, 6, 5), uint8] */
}

def @func_7757() -> (Tensor[(4, 2, 8), bool], Tensor[(4, 2, 14), bool]) {
  %660 = @func_7449() /* ty=(Tensor[(4, 2, 8), uint8], Tensor[(4, 2, 8), bool]) */;
  %661 = @func_5971() /* ty=(Tensor[(4, 2, 14), bool], Tensor[(4, 2, 14), bool]) */;
  %662 = %660.1;
  %663 = %661.1;
  (%662, %663)
}

def @func_6078() -> (Tensor[(4, 2, 14), bool], Tensor[(11, 5, 4), uint8], Tensor[(220, 1), uint8], Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), float32]) {
  @func_6076() /* ty=(Tensor[(4, 2, 14), bool], Tensor[(11, 5, 4), uint8], Tensor[(220, 1), uint8], Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), float32]) */
}

def @func_1927(%var_1925: bool, %var_1926: Tensor[(10, 12, 13), bool]) -> (Tensor[(10, 12, 13), bool], int32, Tensor[(35, 9), float32]) {
  %673 = fn (%var_1900: bool, %var_1901: Tensor[(10, 12, 13), bool]) -> (Tensor[(10, 12, 13), bool], int32, Tensor[(35, 9), float32]) {
    %664 = cast(%var_1900, dtype="bool") /* ty=bool */;
    %665 = cast(%var_1901, dtype="bool") /* ty=Tensor[(10, 12, 13), bool] */;
    %666 = cast(meta[relay.Constant][37] /* ty=Tensor[(35, 9), float32] */, dtype="float32") /* ty=Tensor[(35, 9), float32] */;
    %667 = cast(%var_1900, dtype="int32") /* ty=int32 */;
    %668 = reshape(%666, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), float32] */;
    %669 = reshape(%667, newshape=[]) /* ty=int32 */;
    %670 = @func_1767(%668, %669) /* ty=(Tensor[(3, 7, 15), float32], Tensor[(6, 14, 4), float32], int32, Tensor[(9, 2, 13), float32], Tensor[(234, 336), float64]) */;
    %671 = logical_and(%664, %665) /* ty=Tensor[(10, 12, 13), bool] */;
    %672 = %670.2;
    (%671, %672, meta[relay.Constant][37] /* ty=Tensor[(35, 9), float32] */)
  };
  %673(%var_1925, %var_1926) /* ty=(Tensor[(10, 12, 13), bool], int32, Tensor[(35, 9), float32]) */
}

def @func_2272() -> Tensor[(4, 2, 14), float64] {
  %674 = fn () -> Tensor[(4, 2, 14), float64] {
    @func_2193() /* ty=Tensor[(4, 2, 14), float64] */
  };
  %674() /* ty=Tensor[(4, 2, 14), float64] */
}

def @func_10848() -> (Tensor[(4, 2, 14), float64], Tensor[(9, 6, 5), float64]) {
  %675 = @func_8593() /* ty=(Tensor[(9, 6, 5), float64],) */;
  %676 = @func_7602() /* ty=Tensor[(4, 2, 14), float64] */;
  %677 = %675.0;
  (%676, %677)
}

def @func_10054() -> (Tensor[(9, 6, 5), float32], Tensor[(336), int8], Tensor[(9, 6, 5), uint8], Tensor[(2, 7, 11), float64]) {
  @func_10052() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(336), int8], Tensor[(9, 6, 5), uint8], Tensor[(2, 7, 11), float64]) */
}

def @func_5247() -> Tensor[(4, 2, 14), bool] {
  @func_3822() /* ty=Tensor[(4, 2, 14), bool] */
}

def @func_8201() -> (Tensor[(9, 6, 5), uint8],) {
  %678 = @func_5207() /* ty=Tensor[(9, 6, 5), uint8] */;
  (%678,)
}

def @func_9570() -> (Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8]) {
  @func_9568() /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8]) */
}

def @func_3995(%var_3993: Tensor[(1, 1, 5), float32]) -> (Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8], Tensor[(?, ?, 5), uint32]) {
  @func_3992(%var_3993) /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8], Tensor[(?, ?, 5), uint32]) */
}

def @func_3659(%var_3658: Tensor[(336), int8]) -> (Tensor[(9, 6, 5), float32], Tensor[(180), int16], Tensor[(1560), bool], Tensor[(1560, 336), float32], Tensor[(220), uint8], Tensor[(1560), bool]) {
  %698 = fn (%var_3560: Tensor[(336), int8]) -> (Tensor[(9, 6, 5), float32], Tensor[(180), int16], Tensor[(1560), bool], Tensor[(1560, 336), float32], Tensor[(220), uint8], Tensor[(1560), bool]) {
    %679 = @func_3068() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float64], Tensor[(11, 5, 4), bool], Tensor[(220), uint8]) */;
    %680 = cast(%var_3560, dtype="int8") /* ty=Tensor[(336), int8] */;
    %681 = reshape(%680, newshape=[336]) /* ty=Tensor[(336), int8] */;
    %682 = @func_2301(%681) /* ty=(Tensor[(4, 2, 14), float64], Tensor[(180), int16], Tensor[(336), int8]) */;
    %683 = cast(meta[relay.Constant][38] /* ty=Tensor[(1560, 1), bool] */, dtype="bool") /* ty=Tensor[(1560, 1), bool] */;
    %684 = reshape(%683, newshape=[1560]) /* ty=Tensor[(1560), bool] */;
    %685 = @func_2753(%684) /* ty=(Tensor[(1560), bool],) */;
    %686 = cast(meta[relay.Constant][38] /* ty=Tensor[(1560, 1), bool] */, dtype="float32") /* ty=Tensor[(1560, 1), float32] */;
    %687 = cast(%var_3560, dtype="float32") /* ty=Tensor[(336), float32] */;
    %688 = @func_3068() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float64], Tensor[(11, 5, 4), bool], Tensor[(220), uint8]) */;
    %689 = cast(meta[relay.Constant][38] /* ty=Tensor[(1560, 1), bool] */, dtype="bool") /* ty=Tensor[(1560, 1), bool] */;
    %690 = reshape(%689, newshape=[1560]) /* ty=Tensor[(1560), bool] */;
    %691 = @func_2753(%690) /* ty=(Tensor[(1560), bool],) */;
    %692 = %679.0;
    %693 = %682.1;
    %694 = %685.0;
    %695 = power(%686, %687) /* ty=Tensor[(1560, 336), float32] */;
    %696 = %688.3;
    %697 = %691.0;
    (%692, %693, %694, %695, %696, %697)
  };
  %698(%var_3658) /* ty=(Tensor[(9, 6, 5), float32], Tensor[(180), int16], Tensor[(1560), bool], Tensor[(1560, 336), float32], Tensor[(220), uint8], Tensor[(1560), bool]) */
}

def @func_8911() -> (Tensor[(9, 6, 5), uint8],) {
  %699 = @func_2794() /* ty=(Tensor[(9, 6, 5), uint8],) */;
  %700 = %699.0;
  (%700,)
}

def @func_4111() -> (Tensor[(4, 2, 14), float64], Tensor[(13, 14, 10), float64], Tensor[(4, 2, 14), float64]) {
  %701 = @func_3353() /* ty=(Tensor[(4, 2, 14), float32],) */;
  %702 = %701.0;
  %703 = cast(%702, dtype="float64") /* ty=Tensor[(4, 2, 14), float64] */;
  %704 = cast(%702, dtype="float64") /* ty=Tensor[(4, 2, 14), float64] */;
  %705 = reshape(%704, newshape=[4, 2, 14]) /* ty=Tensor[(4, 2, 14), float64] */;
  %706 = @func_2226(%705) /* ty=(Tensor[(4, 2, 14), int16], Tensor[(13, 14, 10), float64], Tensor[(910, 2), float32]) */;
  %707 = sqrt(%703) /* ty=Tensor[(4, 2, 14), float64] */;
  %708 = %706.1;
  %709 = @func_2193() /* ty=Tensor[(4, 2, 14), float64] */;
  (%707, %708, %709)
}

def @func_9205(%var_9203: float64, %var_9204: Tensor[(9, 11, 11), float64]) -> Tensor[(9, 11, 11), float64] {
  @func_9201(%var_9203, %var_9204) /* ty=Tensor[(9, 11, 11), float64] */
}

def @func_3822() -> Tensor[(4, 2, 14), bool] {
  %710 = @func_2924() /* ty=(Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), uint8]) */;
  %710.0
}

def @func_10344() -> (Tensor[(4, 2, 14), float32], Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), uint8]) {
  @func_10342() /* ty=(Tensor[(4, 2, 14), float32], Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), uint8]) */
}

def @func_7340() -> (Tensor[(4, 2, 14), float32], Tensor[(4, 2, 14), float64]) {
  %714 = fn () -> (Tensor[(4, 2, 14), float32], Tensor[(4, 2, 14), float64]) {
    %711 = @func_3353() /* ty=(Tensor[(4, 2, 14), float32],) */;
    %712 = %711.0;
    %713 = @func_4940() /* ty=Tensor[(4, 2, 14), float64] */;
    (%712, %713)
  };
  %714() /* ty=(Tensor[(4, 2, 14), float32], Tensor[(4, 2, 14), float64]) */
}

def @func_5412(%var_5410: Tensor[(4, 2, 14), float64]) -> (Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), uint8]) {
  @func_5409(%var_5410) /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), uint8]) */
}

def @func_4832() -> Tensor[(9, 6, 5), uint8] {
  %716 = fn () -> Tensor[(9, 6, 5), uint8] {
    %715 = @func_2559() /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(6, 2, 15), float64]) */;
    %715.0
  };
  %716() /* ty=Tensor[(9, 6, 5), uint8] */
}

def @func_5409(%var_5333: Tensor[(4, 2, 14), float64]) -> (Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), uint8]) {
  %717 = @func_2193() /* ty=Tensor[(4, 2, 14), float64] */;
  %718 = cast(%var_5333, dtype="float32") /* ty=Tensor[(4, 2, 14), float32] */;
  %719 = shape_of(%717, dtype="int32") /* ty=Tensor[(3), int32] */;
  %720 = cast(%717, dtype="float32") /* ty=Tensor[(4, 2, 14), float32] */;
  %721 = dyn.reshape(%718, %719, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %722 = @func_2883() /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8]) */;
  %723 = mod(%720, %721) /* ty=Tensor[(4, 2, 14), float32] */;
  %724 = @func_2061() /* ty=Tensor[(9, 6, 5), uint8] */;
  %725 = %722.1;
  %726 = @func_5207() /* ty=Tensor[(9, 6, 5), uint8] */;
  (%723, %724, %725, %726)
}

def @func_3167() -> Tensor[(9, 6, 5), uint8] {
  %727 = fn () -> Tensor[(9, 6, 5), uint8] {
    @func_2474() /* ty=Tensor[(9, 6, 5), uint8] */
  };
  %727() /* ty=Tensor[(9, 6, 5), uint8] */
}

def @func_7909() -> (Tensor[(9, 6, 5), float32], Tensor[(4, 2, 14), bool]) {
  @func_7907() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(4, 2, 14), bool]) */
}

def @func_9007() -> (Tensor[(9, 6, 5), float32],) {
  %728 = @func_2435() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %729 = %728.0;
  (%729,)
}

def @func_3915(%var_3914: Tensor[(2, 7, 11), float64]) -> Tensor[(2, 7, 11), float64] {
  %734 = fn (%var_3899: Tensor[(2, 7, 11), float64]) -> Tensor[(2, 7, 11), float64] {
    %730 = cast(meta[relay.Constant][39] /* ty=Tensor[(2, 7, 11), float64] */, dtype="float64") /* ty=Tensor[(2, 7, 11), float64] */;
    %731 = shape_of(%var_3899, dtype="int32") /* ty=Tensor[(3), int32] */;
    %732 = cast(%var_3899, dtype="float64") /* ty=Tensor[(2, 7, 11), float64] */;
    %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    divide(%732, %733) /* ty=Tensor[(2, 7, 11), float64] */
  };
  %734(%var_3914) /* ty=Tensor[(2, 7, 11), float64] */
}

def @func_5659(%var_5657: Tensor[(704), float32], %var_5658: Tensor[(1820), float32]) -> (Tensor[(4, 2, 14), float64], Tensor[(13, 14, 10), float32], Tensor[(704), float32], Tensor[(336), int8], Tensor[(1820), float32], Tensor[(9, 6, 5), float32]) {
  %749 = fn (%var_5638: Tensor[(704), float32], %var_5640: Tensor[(1820), float32]) -> (Tensor[(4, 2, 14), float64], Tensor[(13, 14, 10), float32], Tensor[(704), float32], Tensor[(336), int8], Tensor[(1820), float32], Tensor[(9, 6, 5), float32]) {
    %735 = @func_4111() /* ty=(Tensor[(4, 2, 14), float64], Tensor[(13, 14, 10), float64], Tensor[(4, 2, 14), float64]) */;
    %736 = cast(%var_5638, dtype="float32") /* ty=Tensor[(704), float32] */;
    %737 = cast(%var_5638, dtype="float32") /* ty=Tensor[(704), float32] */;
    %738 = cast(meta[relay.Constant][40] /* ty=Tensor[(336), int8] */, dtype="int8") /* ty=Tensor[(336), int8] */;
    %739 = cast(%var_5640, dtype="float32") /* ty=Tensor[(1820), float32] */;
    %740 = reshape(%736, newshape=[8, 11, 8]) /* ty=Tensor[(8, 11, 8), float32] */;
    %741 = reshape(%737, newshape=[8, 11, 8]) /* ty=Tensor[(8, 11, 8), float32] */;
    %742 = reshape(%738, newshape=[336]) /* ty=Tensor[(336), int8] */;
    %743 = reshape(%739, newshape=[910, 2]) /* ty=Tensor[(910, 2), float32] */;
    %744 = @func_1381(%740, %741, %742, %743) /* ty=(Tensor[(9, 2, 13), float32], Tensor[(234), int64], Tensor[(7, 16, 3), bool], Tensor[(336), int8], Tensor[(8, 11, 8), bool], Tensor[(13, 14, 10), float32], Tensor[(910, 2), float32]) */;
    %745 = @func_5450() /* ty=(Tensor[(9, 6, 5), float32],) */;
    %746 = %735.2;
    %747 = %744.5;
    %748 = %745.0;
    (%746, %747, %var_5638, meta[relay.Constant][40] /* ty=Tensor[(336), int8] */, %var_5640, %748)
  };
  %749(%var_5657, %var_5658) /* ty=(Tensor[(4, 2, 14), float64], Tensor[(13, 14, 10), float32], Tensor[(704), float32], Tensor[(336), int8], Tensor[(1820), float32], Tensor[(9, 6, 5), float32]) */
}

def @func_7907() -> (Tensor[(9, 6, 5), float32], Tensor[(4, 2, 14), bool]) {
  %750 = @func_7647() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %751 = %750.0;
  %752 = @func_5247() /* ty=Tensor[(4, 2, 14), bool] */;
  (%751, %752)
}

def @func_2226(%var_2215: Tensor[(4, 2, 14), float64]) -> (Tensor[(4, 2, 14), int16], Tensor[(13, 14, 10), float64], Tensor[(910, 2), float32]) {
  %753 = @func_2193() /* ty=Tensor[(4, 2, 14), float64] */;
  %754 = cast(%var_2215, dtype="int16") /* ty=Tensor[(4, 2, 14), int16] */;
  %755 = shape_of(%753, dtype="int32") /* ty=Tensor[(3), int32] */;
  %756 = cast(%753, dtype="int16") /* ty=Tensor[(4, 2, 14), int16] */;
  %757 = dyn.reshape(%754, %755, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %758 = cast(meta[relay.Constant][41] /* ty=Tensor[(910, 2), float32] */, dtype="float32") /* ty=Tensor[(910, 2), float32] */;
  %759 = reshape(%758, newshape=[13, 14, 10]) /* ty=Tensor[(13, 14, 10), float32] */;
  %760 = @func_459(%759) /* ty=(Tensor[(13, 14, 10), float32], Tensor[(13, 14, 10), float64]) */;
  %761 = subtract(%756, %757) /* ty=Tensor[(4, 2, 14), int16] */;
  %762 = %760.1;
  (%761, %762, meta[relay.Constant][41] /* ty=Tensor[(910, 2), float32] */)
}

def @func_2776(%var_2774: Tensor[(2, 14, 15), float32], %var_2775: Tensor[(2, 14, 15), float32]) -> Tensor[(2, 14, 15), float32] {
  %767 = fn (%var_2763: Tensor[(2, 14, 15), float32], %var_2764: Tensor[(2, 14, 15), float32]) -> Tensor[(2, 14, 15), float32] {
    %763 = cast(%var_2764, dtype="float32") /* ty=Tensor[(2, 14, 15), float32] */;
    %764 = shape_of(%var_2763, dtype="int32") /* ty=Tensor[(3), int32] */;
    %765 = cast(%var_2763, dtype="float32") /* ty=Tensor[(2, 14, 15), float32] */;
    %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_mod(%765, %766) /* ty=Tensor[(2, 14, 15), float32] */
  };
  %767(%var_2774, %var_2775) /* ty=Tensor[(2, 14, 15), float32] */
}

def @func_9024() -> (Tensor[(9, 6, 5), uint8],) {
  %768 = @func_4535() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), float32]) */;
  %769 = %768.1;
  (%769,)
}

def @func_10342() -> (Tensor[(4, 2, 14), float32], Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), uint8]) {
  %770 = @func_6076() /* ty=(Tensor[(4, 2, 14), bool], Tensor[(11, 5, 4), uint8], Tensor[(220, 1), uint8], Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), float32]) */;
  %771 = @func_8459() /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), float32]) */;
  %772 = @func_2860() /* ty=Tensor[(4, 2, 14), float32] */;
  %773 = %770.0;
  %774 = %771.1;
  (%772, %773, %774)
}

def @func_2819(%var_2815: Tensor[(14, 13, 10), float32]) -> (Tensor[(14, 13, 10), float32],) {
  %775 = cast(%var_2815, dtype="float32") /* ty=Tensor[(14, 13, 10), float32] */;
  %776 = log10(%775) /* ty=Tensor[(14, 13, 10), float32] */;
  (%776,)
}

def @func_1282(%var_1272: Tensor[(6, 2, 15), int16]) -> Tensor[(6, 2, 15), int16] {
  %777 = cast(meta[relay.Constant][42] /* ty=Tensor[(6, 2, 1), int16] */, dtype="int16") /* ty=Tensor[(6, 2, 1), int16] */;
  %778 = cast(%var_1272, dtype="int16") /* ty=Tensor[(6, 2, 15), int16] */;
  multiply(%777, %778) /* ty=Tensor[(6, 2, 15), int16] */
}

def @func_5918() -> (Tensor[(9, 6, 5), float64],) {
  %779 = @func_4883() /* ty=(Tensor[(9, 6, 5), float64],) */;
  %780 = %779.0;
  (%780,)
}

def @func_6397() -> (Tensor[(4, 2, 14), bool], Tensor[(13, 14, 10), bool]) {
  %791 = fn () -> (Tensor[(4, 2, 14), bool], Tensor[(13, 14, 10), bool]) {
    %781 = @func_2924() /* ty=(Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), uint8]) */;
    %782 = @func_6015() /* ty=Tensor[(13, 14, 10), float64] */;
    %783 = cast(%782, dtype="float64") /* ty=Tensor[(13, 14, 10), float64] */;
    %784 = cosh(%783) /* ty=Tensor[(13, 14, 10), float64] */;
    %785 = cast(%784, dtype="bool") /* ty=Tensor[(13, 14, 10), bool] */;
    %786 = shape_of(%782, dtype="int32") /* ty=Tensor[(3), int32] */;
    %787 = cast(%782, dtype="bool") /* ty=Tensor[(13, 14, 10), bool] */;
    %788 = dyn.reshape(%785, %786, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %789 = %781.0;
    %790 = less_equal(%787, %788) /* ty=Tensor[(13, 14, 10), bool] */;
    (%789, %790)
  };
  %791() /* ty=(Tensor[(4, 2, 14), bool], Tensor[(13, 14, 10), bool]) */
}

def @func_6016() -> Tensor[(13, 14, 10), float64] {
  %793 = fn () -> Tensor[(13, 14, 10), float64] {
    %792 = @func_4111() /* ty=(Tensor[(4, 2, 14), float64], Tensor[(13, 14, 10), float64], Tensor[(4, 2, 14), float64]) */;
    %792.1
  };
  %793() /* ty=Tensor[(13, 14, 10), float64] */
}

def @func_10520(%var_10518: Tensor[(336), int8]) -> (Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float64], Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8], Tensor[(180), int16], Tensor[(336), int8], Tensor[(9, 6, 5), uint8]) {
  @func_10517(%var_10518) /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float64], Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8], Tensor[(180), int16], Tensor[(336), int8], Tensor[(9, 6, 5), uint8]) */
}

def @func_10662() -> (Tensor[(9, 6, 5), uint8], Tensor[(220), float32], Tensor[(234, 1), int64], Tensor[(220), uint8], Tensor[(9, 6, 5), uint8]) {
  %794 = @func_9568() /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8]) */;
  %795 = cast(meta[relay.Constant][43] /* ty=Tensor[(234, 1), int64] */, dtype="int64") /* ty=Tensor[(234, 1), int64] */;
  %796 = cast(meta[relay.Constant][44] /* ty=Tensor[(220), uint8] */, dtype="uint8") /* ty=Tensor[(220), uint8] */;
  %797 = reshape(%795, newshape=[117, 2]) /* ty=Tensor[(117, 2), int64] */;
  %798 = reshape(%796, newshape=[220]) /* ty=Tensor[(220), uint8] */;
  %799 = @func_6896(%797, %798) /* ty=(Tensor[(9, 6, 5), float32], Tensor[(180), int16], Tensor[(117, 2), int64], Tensor[(3, 60), int16], Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), uint8], Tensor[(220), float32]) */;
  %800 = %794.1;
  %801 = %799.6;
  %802 = @func_4831() /* ty=Tensor[(9, 6, 5), uint8] */;
  (%800, %801, meta[relay.Constant][43] /* ty=Tensor[(234, 1), int64] */, meta[relay.Constant][44] /* ty=Tensor[(220), uint8] */, %802)
}

def @func_4317(%var_4315: Tensor[(10, 8, 4), float64], %var_4316: int32) -> (Tensor[(9, 6, 5), uint8], Tensor[(6, 14, 4), int32], Tensor[(10, 8, 4), float32], Tensor[(6, 2, 15), int16], Tensor[(180, 1), int16], Tensor[(10, 8, 4), int8], Tensor[(10, 8, 4), uint64]) {
  @func_4313(%var_4315, %var_4316) /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(6, 14, 4), int32], Tensor[(10, 8, 4), float32], Tensor[(6, 2, 15), int16], Tensor[(180, 1), int16], Tensor[(10, 8, 4), int8], Tensor[(10, 8, 4), uint64]) */
}

def @func_5249() -> Tensor[(4, 2, 14), bool] {
  @func_5247() /* ty=Tensor[(4, 2, 14), bool] */
}

def @func_2229(%var_2227: Tensor[(4, 2, 14), float64]) -> (Tensor[(4, 2, 14), int16], Tensor[(13, 14, 10), float64], Tensor[(910, 2), float32]) {
  @func_2226(%var_2227) /* ty=(Tensor[(4, 2, 14), int16], Tensor[(13, 14, 10), float64], Tensor[(910, 2), float32]) */
}

def @func_10664() -> (Tensor[(9, 6, 5), uint8], Tensor[(220), float32], Tensor[(234, 1), int64], Tensor[(220), uint8], Tensor[(9, 6, 5), uint8]) {
  @func_10662() /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(220), float32], Tensor[(234, 1), int64], Tensor[(220), uint8], Tensor[(9, 6, 5), uint8]) */
}

def @func_5002(%var_5000: Tensor[(14, 11, 14), int32]) -> (Tensor[(14, 11, 14), int32], Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8], Tensor[(2, 14, 15), float32], Tensor[(420), float32]) {
  @func_4999(%var_5000) /* ty=(Tensor[(14, 11, 14), int32], Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8], Tensor[(2, 14, 15), float32], Tensor[(420), float32]) */
}

def @func_2930() -> (Tensor[(9, 6, 5), float32],) {
  %805 = fn () -> (Tensor[(9, 6, 5), float32],) {
    %803 = @func_2049() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8]) */;
    %804 = %803.0;
    (%804,)
  };
  %805() /* ty=(Tensor[(9, 6, 5), float32],) */
}

def @func_6569() -> (Tensor[(9, 6, 5), uint8],) {
  %808 = fn () -> (Tensor[(9, 6, 5), uint8],) {
    %806 = @func_2739() /* ty=(Tensor[(9, 6, 5), uint8],) */;
    %807 = %806.0;
    (%807,)
  };
  %808() /* ty=(Tensor[(9, 6, 5), uint8],) */
}

def @func_4767() -> (Tensor[(4, 2, 14), float64], Tensor[(2, 7, 11), float64], Tensor[(154, 1), float64]) {
  @func_4765() /* ty=(Tensor[(4, 2, 14), float64], Tensor[(2, 7, 11), float64], Tensor[(154, 1), float64]) */
}

def @func_2062() -> Tensor[(9, 6, 5), uint8] {
  %810 = fn () -> Tensor[(9, 6, 5), uint8] {
    %809 = @func_2049() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8]) */;
    %809.1
  };
  %810() /* ty=Tensor[(9, 6, 5), uint8] */
}

def @func_8230() -> (bool, Tensor[(2, 14, 15), float32], Tensor[(1, 420), float32], Tensor[(9, 6, 5), float32]) {
  @func_8228() /* ty=(bool, Tensor[(2, 14, 15), float32], Tensor[(1, 420), float32], Tensor[(9, 6, 5), float32]) */
}

def @func_2753(%var_2745: Tensor[(1560), bool]) -> (Tensor[(1560), bool],) {
  %811 = @func_2637() /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(10, 12, 13), bool], bool, Tensor[(1560), bool]) */;
  %812 = %811.3;
  %813 = cast(%var_2745, dtype="bool") /* ty=Tensor[(1560), bool] */;
  %814 = shape_of(%812, dtype="int32") /* ty=Tensor[(1), int32] */;
  %815 = cast(%812, dtype="bool") /* ty=Tensor[(1560), bool] */;
  %816 = dyn.reshape(%813, %814, newshape=[]) /* ty=Tensor[(?), bool] */;
  %817 = not_equal(%815, %816) /* ty=Tensor[(1560), bool] */;
  (%817,)
}

def @func_2796() -> (Tensor[(9, 6, 5), uint8],) {
  @func_2794() /* ty=(Tensor[(9, 6, 5), uint8],) */
}

def @func_4723(%var_4722: int32) -> (Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float32], Tensor[(10, 8, 4), float32], Tensor[(320), float64], int32) {
  %827 = fn (%var_4718: int32) -> (Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float32], Tensor[(10, 8, 4), float32], Tensor[(320), float64], int32) {
    %818 = @func_3327() /* ty=(Tensor[(9, 6, 5), float32],) */;
    %819 = cast(meta[relay.Constant][45] /* ty=Tensor[(320), float64] */, dtype="float64") /* ty=Tensor[(320), float64] */;
    %820 = cast(%var_4718, dtype="int32") /* ty=int32 */;
    %821 = reshape(%819, newshape=[10, 8, 4]) /* ty=Tensor[(10, 8, 4), float64] */;
    %822 = reshape(%820, newshape=[]) /* ty=int32 */;
    %823 = @func_4313(%821, %822) /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(6, 14, 4), int32], Tensor[(10, 8, 4), float32], Tensor[(6, 2, 15), int16], Tensor[(180, 1), int16], Tensor[(10, 8, 4), int8], Tensor[(10, 8, 4), uint64]) */;
    %824 = @func_4120() /* ty=Tensor[(9, 6, 5), float32] */;
    %825 = %818.0;
    %826 = %823.2;
    (%824, %825, %826, meta[relay.Constant][45] /* ty=Tensor[(320), float64] */, %var_4718)
  };
  %827(%var_4722) /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float32], Tensor[(10, 8, 4), float32], Tensor[(320), float64], int32) */
}

def @func_4035() -> Tensor[(9, 6, 5), float32] {
  @func_4033() /* ty=Tensor[(9, 6, 5), float32] */
}

def @func_9702() -> (Tensor[(9, 6, 5), float64],) {
  %830 = fn () -> (Tensor[(9, 6, 5), float64],) {
    %828 = @func_7520() /* ty=(Tensor[(9, 6, 5), float64],) */;
    %829 = %828.0;
    (%829,)
  };
  %830() /* ty=(Tensor[(9, 6, 5), float64],) */
}

def @func_4537() -> (Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), float32]) {
  @func_4535() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), float32]) */
}

def @func_8150(%var_8119: Tensor[(4, 14, 6), float32], %var_8132: Tensor[(4, 14, 6), float32]) -> (Tensor[(9, 6, 5), float32], Tensor[(4, 14, 6), bool]) {
  %831 = @func_8081() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float32]) */;
  %832 = cast(%var_8132, dtype="int8") /* ty=Tensor[(4, 14, 6), int8] */;
  %833 = shape_of(%var_8119, dtype="int32") /* ty=Tensor[(3), int32] */;
  %834 = cast(%var_8119, dtype="int8") /* ty=Tensor[(4, 14, 6), int8] */;
  %835 = dyn.reshape(%832, %833, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %836 = logical_xor(%834, %835) /* ty=Tensor[(4, 14, 6), int8] */;
  %837 = cast(%var_8119, dtype="float32") /* ty=Tensor[(4, 14, 6), float32] */;
  %838 = log2(%837) /* ty=Tensor[(4, 14, 6), float32] */;
  %839 = cast(%838, dtype="bool") /* ty=Tensor[(4, 14, 6), bool] */;
  %840 = shape_of(%836, dtype="int32") /* ty=Tensor[(3), int32] */;
  %841 = cast(%836, dtype="bool") /* ty=Tensor[(4, 14, 6), bool] */;
  %842 = dyn.reshape(%839, %840, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %843 = %831.0;
  %844 = less_equal(%841, %842) /* ty=Tensor[(4, 14, 6), bool] */;
  (%843, %844)
}

def @func_4622() -> (Tensor[(9, 6, 5), float32], Tensor[(2, 7, 11), bool], Tensor[(2, 7, 11), float32], Tensor[(9, 6, 5), float32]) {
  @func_4620() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(2, 7, 11), bool], Tensor[(2, 7, 11), float32], Tensor[(9, 6, 5), float32]) */
}

def @func_5327() -> (Tensor[(8, 15, 16), float32],) {
  %845 = @func_4491() /* ty=(Tensor[(8, 15, 16), float32], Tensor[(10, 12, 13), bool]) */;
  %846 = %845.0;
  (%846,)
}

def @func_432(%var_430: int32) -> Tensor[(6, 14, 4), int32] {
  @func_429(%var_430) /* ty=Tensor[(6, 14, 4), int32] */
}

def @func_9201(%var_9173: float64, %var_9174: Tensor[(9, 11, 11), float64]) -> Tensor[(9, 11, 11), float64] {
  %847 = cast(%var_9173, dtype="float64") /* ty=float64 */;
  %848 = cast(%var_9174, dtype="float64") /* ty=Tensor[(9, 11, 11), float64] */;
  power(%847, %848) /* ty=Tensor[(9, 11, 11), float64] */
}

def @func_9043() -> Tensor[(9, 6, 5), float32] {
  @func_9041() /* ty=Tensor[(9, 6, 5), float32] */
}

def @func_4179() -> (Tensor[(4, 2, 14), float64], Tensor[(9, 6, 5), float32], Tensor[(4, 2, 14), float64]) {
  @func_4177() /* ty=(Tensor[(4, 2, 14), float64], Tensor[(9, 6, 5), float32], Tensor[(4, 2, 14), float64]) */
}

def @func_6896(%var_6861: Tensor[(117, 2), int64], %var_6863: Tensor[(220), uint8]) -> (Tensor[(9, 6, 5), float32], Tensor[(180), int16], Tensor[(117, 2), int64], Tensor[(3, 60), int16], Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), uint8], Tensor[(220), float32]) {
  %849 = cast(%var_6861, dtype="int64") /* ty=Tensor[(117, 2), int64] */;
  %850 = cast(meta[relay.Constant][46] /* ty=Tensor[(3, 60), int16] */, dtype="int16") /* ty=Tensor[(3, 60), int16] */;
  %851 = cast(%var_6863, dtype="uint8") /* ty=Tensor[(220), uint8] */;
  %852 = reshape(%849, newshape=[234]) /* ty=Tensor[(234), int64] */;
  %853 = reshape(%850, newshape=[180]) /* ty=Tensor[(180), int16] */;
  %854 = reshape(%851, newshape=[220]) /* ty=Tensor[(220), uint8] */;
  %855 = @func_3385(%852, %853, %854) /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(9, 2, 13), float32], Tensor[(234), int64], Tensor[(9, 6, 5), float32], Tensor[(6, 2, 15), int16], Tensor[(180), int16], Tensor[(9, 6, 5), float64], int32, Tensor[(220), uint8]) */;
  %856 = @func_5971() /* ty=(Tensor[(4, 2, 14), bool], Tensor[(4, 2, 14), bool]) */;
  %857 = cast(%var_6863, dtype="float32") /* ty=Tensor[(220), float32] */;
  %858 = @func_5593() /* ty=Tensor[(9, 6, 5), float32] */;
  %859 = %855.5;
  %860 = %856.1;
  %861 = @func_2474() /* ty=Tensor[(9, 6, 5), uint8] */;
  %862 = sinh(%857) /* ty=Tensor[(220), float32] */;
  (%858, %859, %var_6861, meta[relay.Constant][46] /* ty=Tensor[(3, 60), int16] */, %860, %861, %862)
}

def @func_8595() -> (Tensor[(9, 6, 5), float64],) {
  @func_8593() /* ty=(Tensor[(9, 6, 5), float64],) */
}

def @func_8814() -> (Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), bool]) {
  @func_8812() /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), bool]) */
}

def @func_3329() -> (Tensor[(9, 6, 5), float32],) {
  @func_3327() /* ty=(Tensor[(9, 6, 5), float32],) */
}

def @func_4033() -> Tensor[(9, 6, 5), float32] {
  %863 = @func_3752() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float32]) */;
  %863.1
}

def @func_4883() -> (Tensor[(9, 6, 5), float64],) {
  %864 = @func_3068() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float64], Tensor[(11, 5, 4), bool], Tensor[(220), uint8]) */;
  %865 = %864.1;
  (%865,)
}

def @func_9748() -> Tensor[(9, 6, 5), float32] {
  %866 = @func_5450() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %866.0
}

def @func_4313(%var_4275: Tensor[(10, 8, 4), float64], %var_4285: int32) -> (Tensor[(9, 6, 5), uint8], Tensor[(6, 14, 4), int32], Tensor[(10, 8, 4), float32], Tensor[(6, 2, 15), int16], Tensor[(180, 1), int16], Tensor[(10, 8, 4), int8], Tensor[(10, 8, 4), uint64]) {
  %867 = cast(%var_4285, dtype="int32") /* ty=int32 */;
  %868 = reshape(%867, newshape=[]) /* ty=int32 */;
  %869 = cast(%var_4275, dtype="float64") /* ty=Tensor[(10, 8, 4), float64] */;
  %870 = tan(%869) /* ty=Tensor[(10, 8, 4), float64] */;
  %871 = cast(%870, dtype="float32") /* ty=Tensor[(10, 8, 4), float32] */;
  %872 = cast(meta[relay.Constant][47] /* ty=Tensor[(180, 1), int16] */, dtype="int16") /* ty=Tensor[(180, 1), int16] */;
  %873 = reshape(%872, newshape=[6, 2, 15]) /* ty=Tensor[(6, 2, 15), int16] */;
  %874 = cast(%870, dtype="int8") /* ty=Tensor[(10, 8, 4), int8] */;
  %875 = cast(%var_4285, dtype="int8") /* ty=int8 */;
  %876 = cast(%870, dtype="uint64") /* ty=Tensor[(10, 8, 4), uint64] */;
  %877 = cast(%var_4285, dtype="uint64") /* ty=uint64 */;
  %878 = @func_3166() /* ty=Tensor[(9, 6, 5), uint8] */;
  %879 = @func_429(%868) /* ty=Tensor[(6, 14, 4), int32] */;
  %880 = sigmoid(%871) /* ty=Tensor[(10, 8, 4), float32] */;
  %881 = @func_1282(%873) /* ty=Tensor[(6, 2, 15), int16] */;
  %882 = left_shift(%874, %875) /* ty=Tensor[(10, 8, 4), int8] */;
  %883 = add(%876, %877) /* ty=Tensor[(10, 8, 4), uint64] */;
  (%878, %879, %880, %881, meta[relay.Constant][47] /* ty=Tensor[(180, 1), int16] */, %882, %883)
}

def @func_2332() -> (Tensor[(9, 6, 5), float32],) {
  %886 = fn () -> (Tensor[(9, 6, 5), float32],) {
    %884 = @func_2049() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8]) */;
    %885 = %884.0;
    (%885,)
  };
  %886() /* ty=(Tensor[(9, 6, 5), float32],) */
}

def @func_8913() -> (Tensor[(9, 6, 5), uint8],) {
  @func_8911() /* ty=(Tensor[(9, 6, 5), uint8],) */
}

def @func_3992(%var_3950: Tensor[(1, 1, 5), float32]) -> (Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8], Tensor[(?, ?, 5), uint32]) {
  %887 = @func_2193() /* ty=Tensor[(4, 2, 14), float64] */;
  %888 = cast(%887, dtype="float32") /* ty=Tensor[(4, 2, 14), float32] */;
  %889 = cast(%var_3950, dtype="float32") /* ty=Tensor[(1, 1, 5), float32] */;
  %890 = sqrt(%889) /* ty=Tensor[(1, 1, 5), float32] */;
  %891 = cast(%var_3950, dtype="float32") /* ty=Tensor[(1, 1, 5), float32] */;
  %892 = shape_of(%890, dtype="int32") /* ty=Tensor[(3), int32] */;
  %893 = cast(%890, dtype="float32") /* ty=Tensor[(1, 1, 5), float32] */;
  %894 = dyn.reshape(%891, %892, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %895 = divide(%893, %894) /* ty=Tensor[(?, ?, 5), float32] */;
  %896 = cast(%895, dtype="float32") /* ty=Tensor[(?, ?, 5), float32] */;
  %897 = sigmoid(%896) /* ty=Tensor[(?, ?, 5), float32] */;
  %898 = cast(%var_3950, dtype="uint32") /* ty=Tensor[(1, 1, 5), uint32] */;
  %899 = shape_of(%897, dtype="int32") /* ty=Tensor[(3), int32] */;
  %900 = cast(%897, dtype="uint32") /* ty=Tensor[(?, ?, 5), uint32] */;
  %901 = dyn.reshape(%898, %899, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %902 = cosh(%888) /* ty=Tensor[(4, 2, 14), float32] */;
  %903 = @func_3166() /* ty=Tensor[(9, 6, 5), uint8] */;
  %904 = subtract(%900, %901) /* ty=Tensor[(?, ?, 5), uint32] */;
  (%902, %903, %904)
}

def @func_4999(%var_4963: Tensor[(14, 11, 14), int32]) -> (Tensor[(14, 11, 14), int32], Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8], Tensor[(2, 14, 15), float32], Tensor[(420), float32]) {
  %905 = cast(meta[relay.Constant][48] /* ty=Tensor[(14, 11, 14), int32] */, dtype="int32") /* ty=Tensor[(14, 11, 14), int32] */;
  %906 = shape_of(%var_4963, dtype="int32") /* ty=Tensor[(3), int32] */;
  %907 = cast(%var_4963, dtype="int32") /* ty=Tensor[(14, 11, 14), int32] */;
  %908 = dyn.reshape(%905, %906, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %909 = @func_3327() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %910 = @func_4220() /* ty=(Tensor[(9, 6, 5), uint8],) */;
  %911 = cast(meta[relay.Constant][49] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %912 = cast(meta[relay.Constant][49] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %913 = reshape(%911, newshape=[2, 14, 15]) /* ty=Tensor[(2, 14, 15), float32] */;
  %914 = reshape(%912, newshape=[2, 14, 15]) /* ty=Tensor[(2, 14, 15), float32] */;
  %915 = bitwise_and(%907, %908) /* ty=Tensor[(14, 11, 14), int32] */;
  %916 = %909.0;
  %917 = %910.0;
  %918 = @func_2773(%913, %914) /* ty=Tensor[(2, 14, 15), float32] */;
  (%915, %916, %917, %918, meta[relay.Constant][49] /* ty=Tensor[(420), float32] */)
}

def @func_3758() -> Tensor[(4, 2, 14), float64] {
  %919 = fn () -> Tensor[(4, 2, 14), float64] {
    @func_2271() /* ty=Tensor[(4, 2, 14), float64] */
  };
  %919() /* ty=Tensor[(4, 2, 14), float64] */
}

def @func_10850() -> (Tensor[(4, 2, 14), float64], Tensor[(9, 6, 5), float64]) {
  @func_10848() /* ty=(Tensor[(4, 2, 14), float64], Tensor[(9, 6, 5), float64]) */
}

def @func_3390(%var_3387: Tensor[(234), int64], %var_3388: Tensor[(180), int16], %var_3389: Tensor[(220), uint8]) -> (Tensor[(9, 6, 5), uint8], Tensor[(9, 2, 13), float32], Tensor[(234), int64], Tensor[(9, 6, 5), float32], Tensor[(6, 2, 15), int16], Tensor[(180), int16], Tensor[(9, 6, 5), float64], int32, Tensor[(220), uint8]) {
  @func_3385(%var_3387, %var_3388, %var_3389) /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(9, 2, 13), float32], Tensor[(234), int64], Tensor[(9, 6, 5), float32], Tensor[(6, 2, 15), int16], Tensor[(180), int16], Tensor[(9, 6, 5), float64], int32, Tensor[(220), uint8]) */
}

def @func_3752() -> (Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float32]) {
  %920 = @func_2435() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %921 = @func_3327() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %922 = %920.0;
  %923 = %921.0;
  (%922, %923)
}

def @func_8812() -> (Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), bool]) {
  %924 = @func_8459() /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), float32]) */;
  %925 = @func_7757() /* ty=(Tensor[(4, 2, 8), bool], Tensor[(4, 2, 14), bool]) */;
  %926 = %924.1;
  %927 = %925.1;
  (%926, %927)
}

def @func_9375(%var_9374: Tensor[(315, 1), float32]) -> (Tensor[(9, 6, 5), uint8], Tensor[(4, 14, 6), bool], int32, int32, Tensor[(9, 6, 5), float32], Tensor[(10, 12, 13), bool], Tensor[(9, 6, 5), uint8], Tensor[(315, 336), bool]) {
  %950 = fn (%var_9300: Tensor[(315, 1), float32]) -> (Tensor[(9, 6, 5), uint8], Tensor[(4, 14, 6), bool], int32, int32, Tensor[(9, 6, 5), float32], Tensor[(10, 12, 13), bool], Tensor[(9, 6, 5), uint8], Tensor[(315, 336), bool]) {
    %928 = @func_8459() /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), float32]) */;
    %929 = cast(meta[relay.Constant][50] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
    %930 = cast(meta[relay.Constant][50] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
    %931 = reshape(%929, newshape=[4, 14, 6]) /* ty=Tensor[(4, 14, 6), float32] */;
    %932 = reshape(%930, newshape=[4, 14, 6]) /* ty=Tensor[(4, 14, 6), float32] */;
    %933 = @func_8150(%931, %932) /* ty=(Tensor[(9, 6, 5), float32], Tensor[(4, 14, 6), bool]) */;
    %934 = cast(%var_9300, dtype="float32") /* ty=Tensor[(315, 1), float32] */;
    %935 = cast(5 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %936 = reshape(%934, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), float32] */;
    %937 = reshape(%935, newshape=[]) /* ty=int32 */;
    %938 = @func_1767(%936, %937) /* ty=(Tensor[(3, 7, 15), float32], Tensor[(6, 14, 4), float32], int32, Tensor[(9, 2, 13), float32], Tensor[(234, 336), float64]) */;
    %939 = @func_6489() /* ty=(Tensor[(9, 6, 5), float32],) */;
    %940 = @func_2637() /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(10, 12, 13), bool], bool, Tensor[(1560), bool]) */;
    %941 = cast(%var_9300, dtype="bool") /* ty=Tensor[(315, 1), bool] */;
    %942 = cast(meta[relay.Constant][50] /* ty=Tensor[(336), float32] */, dtype="bool") /* ty=Tensor[(336), bool] */;
    %943 = %928.0;
    %944 = %933.1;
    %945 = %938.2;
    %946 = %939.0;
    %947 = %940.1;
    %948 = @func_9073() /* ty=Tensor[(9, 6, 5), uint8] */;
    %949 = equal(%941, %942) /* ty=Tensor[(315, 336), bool] */;
    (%943, %944, %945, 5 /* ty=int32 */, %946, %947, %948, %949)
  };
  %950(%var_9374) /* ty=(Tensor[(9, 6, 5), uint8], Tensor[(4, 14, 6), bool], int32, int32, Tensor[(9, 6, 5), float32], Tensor[(10, 12, 13), bool], Tensor[(9, 6, 5), uint8], Tensor[(315, 336), bool]) */
}

def @func_3011() -> (Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8]) {
  %955 = fn () -> (Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8]) {
    %951 = @func_2883() /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8]) */;
    %952 = @func_2924() /* ty=(Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), uint8]) */;
    %953 = %951.0;
    %954 = %952.1;
    (%953, %954)
  };
  %955() /* ty=(Tensor[(4, 2, 14), float32], Tensor[(9, 6, 5), uint8]) */
}

def @func_5053(%var_5018: float64) -> (Tensor[(2, 2, 12), float64], Tensor[(9, 6, 5), float32], Tensor[(2, 2, 12), float32]) {
  %956 = cast(%var_5018, dtype="float64") /* ty=float64 */;
  %957 = cast(meta[relay.Constant][51] /* ty=Tensor[(2, 2, 12), float64] */, dtype="float64") /* ty=Tensor[(2, 2, 12), float64] */;
  %958 = @func_4620() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(2, 7, 11), bool], Tensor[(2, 7, 11), float32], Tensor[(9, 6, 5), float32]) */;
  %959 = cast(meta[relay.Constant][51] /* ty=Tensor[(2, 2, 12), float64] */, dtype="float32") /* ty=Tensor[(2, 2, 12), float32] */;
  %960 = multiply(%956, %957) /* ty=Tensor[(2, 2, 12), float64] */;
  %961 = %958.0;
  %962 = acos(%959) /* ty=Tensor[(2, 2, 12), float32] */;
  (%960, %961, %962)
}

def @func_402(%var_401: Tensor[(9, 2, 13), int64]) -> (Tensor[(9, 2, 13), float32],) {
  %973 = fn (%var_393: Tensor[(9, 2, 13), int64]) -> (Tensor[(9, 2, 13), float32],) {
    %963 = cast(%var_393, dtype="int64") /* ty=Tensor[(9, 2, 13), int64] */;
    %964 = shape_of(meta[relay.Constant][52] /* ty=Tensor[(9, 2, 13), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %965 = cast(meta[relay.Constant][52] /* ty=Tensor[(9, 2, 13), int64] */, dtype="int64") /* ty=Tensor[(9, 2, 13), int64] */;
    %966 = dyn.reshape(%963, %964, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %967 = add(%965, %966) /* ty=Tensor[(9, 2, 13), int64] */;
    %968 = cast(%967, dtype="float32") /* ty=Tensor[(9, 2, 13), float32] */;
    %969 = shape_of(meta[relay.Constant][52] /* ty=Tensor[(9, 2, 13), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %970 = cast(meta[relay.Constant][52] /* ty=Tensor[(9, 2, 13), int64] */, dtype="float32") /* ty=Tensor[(9, 2, 13), float32] */;
    %971 = dyn.reshape(%968, %969, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %972 = mod(%970, %971) /* ty=Tensor[(9, 2, 13), float32] */;
    (%972,)
  };
  %973(%var_401) /* ty=(Tensor[(9, 2, 13), float32],) */
}

def @func_4535() -> (Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8], Tensor[(4, 2, 14), bool], Tensor[(9, 6, 5), float32]) {
  %974 = @func_3327() /* ty=(Tensor[(9, 6, 5), float32],) */;
  %975 = @func_2049() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), uint8]) */;
  %976 = %974.0;
  %977 = %975.1;
  %978 = @func_3822() /* ty=Tensor[(4, 2, 14), bool] */;
  %979 = @func_4120() /* ty=Tensor[(9, 6, 5), float32] */;
  (%976, %977, %978, %979)
}

def @func_4885() -> (Tensor[(9, 6, 5), float64],) {
  @func_4883() /* ty=(Tensor[(9, 6, 5), float64],) */
}

def @func_973(%var_970: Tensor[(12, 2, 14), uint32], %var_971: Tensor[(12, 2, 14), uint32], %var_972: int32) -> (Tensor[(12, 2, 14), uint32], int32, Tensor[(6, 14, 4), float32]) {
  %993 = fn (%var_947: Tensor[(12, 2, 14), uint32], %var_948: Tensor[(12, 2, 14), uint32], %var_954: int32) -> (Tensor[(12, 2, 14), uint32], int32, Tensor[(6, 14, 4), float32]) {
    %980 = cast(%var_948, dtype="uint32") /* ty=Tensor[(12, 2, 14), uint32] */;
    %981 = shape_of(%var_947, dtype="int32") /* ty=Tensor[(3), int32] */;
    %982 = cast(%var_947, dtype="uint32") /* ty=Tensor[(12, 2, 14), uint32] */;
    %983 = dyn.reshape(%980, %981, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %984 = cast(%var_954, dtype="int32") /* ty=int32 */;
    %985 = reshape(%984, newshape=[]) /* ty=int32 */;
    %986 = @func_429(%985) /* ty=Tensor[(6, 14, 4), int32] */;
    %987 = cast(%var_947, dtype="float32") /* ty=Tensor[(12, 2, 14), float32] */;
    %988 = shape_of(%986, dtype="int32") /* ty=Tensor[(3), int32] */;
    %989 = cast(%986, dtype="float32") /* ty=Tensor[(6, 14, 4), float32] */;
    %990 = dyn.reshape(%987, %988, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %991 = multiply(%982, %983) /* ty=Tensor[(12, 2, 14), uint32] */;
    %992 = divide(%989, %990) /* ty=Tensor[(6, 14, 4), float32] */;
    (%991, %var_954, %992)
  };
  %993(%var_970, %var_971, %var_972) /* ty=(Tensor[(12, 2, 14), uint32], int32, Tensor[(6, 14, 4), float32]) */
}

def @func_9453() -> (Tensor[(2, 7, 11), float64],) {
  @func_9451() /* ty=(Tensor[(2, 7, 11), float64],) */
}

def @func_9451() -> (Tensor[(2, 7, 11), float64],) {
  %994 = @func_7507() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(2, 7, 11), float64]) */;
  %995 = %994.1;
  (%995,)
}

def @func_10707(%var_10706: float32) -> (Tensor[(7, 7, 14), float32], Tensor[(7, 7, 14), float32]) {
  %1001 = fn (%var_10697: float32) -> (Tensor[(7, 7, 14), float32], Tensor[(7, 7, 14), float32]) {
    %996 = cast(%var_10697, dtype="float32") /* ty=float32 */;
    %997 = cast(meta[relay.Constant][53] /* ty=Tensor[(7, 7, 14), float32] */, dtype="float32") /* ty=Tensor[(7, 7, 14), float32] */;
    %998 = cast(meta[relay.Constant][53] /* ty=Tensor[(7, 7, 14), float32] */, dtype="float32") /* ty=Tensor[(7, 7, 14), float32] */;
    %999 = floor_divide(%996, %997) /* ty=Tensor[(7, 7, 14), float32] */;
    %1000 = sinh(%998) /* ty=Tensor[(7, 7, 14), float32] */;
    (%999, %1000)
  };
  %1001(%var_10706) /* ty=(Tensor[(7, 7, 14), float32], Tensor[(7, 7, 14), float32]) */
}

def @func_7507() -> (Tensor[(9, 6, 5), float32], Tensor[(2, 7, 11), float64]) {
  %1002 = @func_3068() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float64], Tensor[(11, 5, 4), bool], Tensor[(220), uint8]) */;
  %1003 = @func_4765() /* ty=(Tensor[(4, 2, 14), float64], Tensor[(2, 7, 11), float64], Tensor[(154, 1), float64]) */;
  %1004 = %1002.0;
  %1005 = %1003.1;
  (%1004, %1005)
}

def @func_6851() -> (Tensor[(4, 2, 14), bool],) {
  %1007 = fn () -> (Tensor[(4, 2, 14), bool],) {
    %1006 = @func_5247() /* ty=Tensor[(4, 2, 14), bool] */;
    (%1006,)
  };
  %1007() /* ty=(Tensor[(4, 2, 14), bool],) */
}

def @func_4121() -> Tensor[(9, 6, 5), float32] {
  %1009 = fn () -> Tensor[(9, 6, 5), float32] {
    %1008 = @func_2435() /* ty=(Tensor[(9, 6, 5), float32],) */;
    %1008.0
  };
  %1009() /* ty=Tensor[(9, 6, 5), float32] */
}

def @func_6489() -> (Tensor[(9, 6, 5), float32],) {
  %1010 = @func_4177() /* ty=(Tensor[(4, 2, 14), float64], Tensor[(9, 6, 5), float32], Tensor[(4, 2, 14), float64]) */;
  %1011 = %1010.1;
  (%1011,)
}

def @func_9026() -> (Tensor[(9, 6, 5), uint8],) {
  @func_9024() /* ty=(Tensor[(9, 6, 5), uint8],) */
}

def @func_10433() -> (Tensor[(15, 2, 5), float32], Tensor[(9, 6, 5), uint8]) {
  %1016 = fn () -> (Tensor[(15, 2, 5), float32], Tensor[(9, 6, 5), uint8]) {
    %1012 = cast(meta[relay.Constant][54] /* ty=Tensor[(15, 2, 5), float32] */, dtype="float32") /* ty=Tensor[(15, 2, 5), float32] */;
    %1013 = @func_8201() /* ty=(Tensor[(9, 6, 5), uint8],) */;
    %1014 = atan(%1012) /* ty=Tensor[(15, 2, 5), float32] */;
    %1015 = %1013.0;
    (%1014, %1015)
  };
  %1016() /* ty=(Tensor[(15, 2, 5), float32], Tensor[(9, 6, 5), uint8]) */
}

def @func_9129() -> Tensor[(9, 6, 5), float32] {
  %1018 = fn () -> Tensor[(9, 6, 5), float32] {
    %1017 = @func_6799() /* ty=(Tensor[(9, 6, 5), float32],) */;
    %1017.0
  };
  %1018() /* ty=Tensor[(9, 6, 5), float32] */
}

def @func_4254() -> (Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float32], Tensor[(4, 2, 14), int16], Tensor[(112), float64]) {
  @func_4252() /* ty=(Tensor[(9, 6, 5), float32], Tensor[(9, 6, 5), float32], Tensor[(4, 2, 14), int16], Tensor[(112), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen356/build/output.py:3153: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen356/build/output.py", line 3158, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(154) tvmgen_default_fused_reshape_left_shift_kernel0(signed char* __restrict__ T_left_shift, signed char* __restrict__ placeholder, signed char* __restrict__ placeholder1) {
  T_left_shift[(((int)threadIdx.x))] = (placeholder[(((int)threadIdx.x))] << placeholder1[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

