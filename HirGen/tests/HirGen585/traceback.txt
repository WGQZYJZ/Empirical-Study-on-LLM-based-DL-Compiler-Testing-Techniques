==========mod==========
#[version = "0.0.5"]
def @func_7063(%var_7061: Tensor[(550), float32]) -> (Tensor[(7, 16, 7), float32], Tensor[(11, 10, 5), float32], Tensor[(550), float32]) {
  %0 = @func_5215() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %1 = cast(%var_7061, dtype="float32") /* ty=Tensor[(550), float32] */;
  %2 = reshape(%1, newshape=[11, 10, 5]) /* ty=Tensor[(11, 10, 5), float32] */;
  %3 = %0.0;
  %4 = @func_5861(%2) /* ty=Tensor[(11, 10, 5), float32] */;
  (%3, %4, %var_7061)
}

def @func_12881() -> (Tensor[(432), uint8], Tensor[(7, 16, 7), float32]) {
  %5 = @func_5215() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %6 = @func_6991() /* ty=Tensor[(432), uint8] */;
  %7 = %5.0;
  (%6, %7)
}

def @func_6083() -> (Tensor[(11, 12, 11), bool], Tensor[(432), uint8]) {
  %8 = @func_4772() /* ty=(Tensor[(432), uint8], Tensor[(11, 12, 11), bool], Tensor[(11, 12, 11), bool], bool) */;
  %9 = @func_4772() /* ty=(Tensor[(432), uint8], Tensor[(11, 12, 11), bool], Tensor[(11, 12, 11), bool], bool) */;
  %10 = %8.2;
  %11 = %9.0;
  (%10, %11)
}

def @func_6313(%var_6290: Tensor[(1008), float32]) -> (Tensor[(7, 16, 7), float32], Tensor[(4, 196), float64], Tensor[(7, 16, 7), float32], Tensor[(1008), float32]) {
  %12 = @func_4510() /* ty=(Tensor[(8, 7, 11), float64], Tensor[(7, 16, 7), float64], Tensor[(4, 196), float64], Tensor[(240), uint32]) */;
  %13 = %12.1;
  %14 = cast(%13, dtype="float32") /* ty=Tensor[(7, 16, 7), float32] */;
  %15 = @func_5716() /* ty=(Tensor[(4, 196), float64],) */;
  %16 = cast(%var_6290, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %17 = reshape(%16, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), float32] */;
  %18 = @func_4684(%17) /* ty=(Tensor[(16, 7, 9), float32], Tensor[(7, 16, 7), float32]) */;
  %19 = exp(%14) /* ty=Tensor[(7, 16, 7), float32] */;
  %20 = %15.0;
  %21 = %18.1;
  (%19, %20, %21, %var_6290)
}

def @func_8442() -> (Tensor[(7, 16, 7), bool],) {
  %22 = @func_7985() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %23 = %22.0;
  %24 = cast(%23, dtype="float32") /* ty=Tensor[(7, 16, 7), float32] */;
  %25 = acosh(%24) /* ty=Tensor[(7, 16, 7), float32] */;
  %26 = cast(%25, dtype="bool") /* ty=Tensor[(7, 16, 7), bool] */;
  %27 = shape_of(%23, dtype="int32") /* ty=Tensor[(3), int32] */;
  %28 = cast(%23, dtype="bool") /* ty=Tensor[(7, 16, 7), bool] */;
  %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %30 = less(%28, %29) /* ty=Tensor[(7, 16, 7), bool] */;
  (%30,)
}

def @func_11788() -> Tensor[(7, 16, 7), float64] {
  @func_8039() /* ty=Tensor[(7, 16, 7), float64] */
}

def @func_6193(%var_6186: Tensor[(7, 16, 7), float64]) -> (Tensor[(4, 196), float64], Tensor[(7, 16, 7), uint8]) {
  %31 = @func_4510() /* ty=(Tensor[(8, 7, 11), float64], Tensor[(7, 16, 7), float64], Tensor[(4, 196), float64], Tensor[(240), uint32]) */;
  %32 = @func_4853() /* ty=(Tensor[(432), uint8], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) */;
  %33 = %32.2;
  %34 = cast(%var_6186, dtype="uint8") /* ty=Tensor[(7, 16, 7), uint8] */;
  %35 = shape_of(%33, dtype="int32") /* ty=Tensor[(3), int32] */;
  %36 = cast(%33, dtype="uint8") /* ty=Tensor[(7, 16, 7), uint8] */;
  %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %38 = %31.2;
  %39 = right_shift(%36, %37) /* ty=Tensor[(7, 16, 7), uint8] */;
  (%38, %39)
}

def @func_8362() -> Tensor[(7, 16, 7), float64] {
  @func_5192() /* ty=Tensor[(7, 16, 7), float64] */
}

def @func_11278() -> (Tensor[(8, 7, 11), float64],) {
  %40 = @func_10879() /* ty=(Tensor[(8, 7, 11), float64],) */;
  %41 = %40.0;
  (%41,)
}

def @func_10717() -> Tensor[(7, 16, 7), float64] {
  %42 = @func_9029() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %42.0
}

def @func_9029() -> (Tensor[(7, 16, 7), float64],) {
  %43 = @func_5192() /* ty=Tensor[(7, 16, 7), float64] */;
  (%43,)
}

def @func_5215() -> (Tensor[(7, 16, 7), float32],) {
  %44 = @func_4611() /* ty=Tensor[(7, 16, 7), float32] */;
  (%44,)
}

def @func_10879() -> (Tensor[(8, 7, 11), float64],) {
  %45 = @func_7537() /* ty=(Tensor[(432), uint8], Tensor[(8, 7, 11), float64]) */;
  %46 = %45.1;
  (%46,)
}

def @func_10102() -> (Tensor[(6, 12, 6), float32],) {
  %47 = @func_7342() /* ty=(Tensor[(6, 12, 6), float32],) */;
  %48 = %47.0;
  (%48,)
}

def @func_4510() -> (Tensor[(8, 7, 11), float64], Tensor[(7, 16, 7), float64], Tensor[(4, 196), float64], Tensor[(240), uint32]) {
  %49 = cast(meta[relay.Constant][0] /* ty=Tensor[(8, 7, 11), float64] */, dtype="float64") /* ty=Tensor[(8, 7, 11), float64] */;
  %50 = cast(meta[relay.Constant][1] /* ty=Tensor[(4, 196), float64] */, dtype="float64") /* ty=Tensor[(4, 196), float64] */;
  %51 = cast(meta[relay.Constant][2] /* ty=Tensor[(240), uint32] */, dtype="uint32") /* ty=Tensor[(240), uint32] */;
  %52 = reshape(%50, newshape=[7, 16, 7]) /* ty=Tensor[(7, 16, 7), float64] */;
  %53 = reshape(%51, newshape=[240]) /* ty=Tensor[(240), uint32] */;
  %54 = @func_3670(%52, %53) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(5, 3, 16), uint32], Tensor[(240), uint32]) */;
  %55 = acosh(%49) /* ty=Tensor[(8, 7, 11), float64] */;
  %56 = %54.0;
  (%55, %56, meta[relay.Constant][1] /* ty=Tensor[(4, 196), float64] */, meta[relay.Constant][2] /* ty=Tensor[(240), uint32] */)
}

def @func_5852() -> Tensor[(7, 16, 7), float32] {
  %57 = @func_4980() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %57.0
}

def @func_7389() -> Tensor[(432), uint8] {
  %58 = @func_6083() /* ty=(Tensor[(11, 12, 11), bool], Tensor[(432), uint8]) */;
  %58.1
}

def @func_9381() -> (Tensor[(7, 16, 7), float64],) {
  %59 = @func_5192() /* ty=Tensor[(7, 16, 7), float64] */;
  (%59,)
}

def @func_8577() -> (Tensor[(6, 12, 6), float32], bool, Tensor[(48), float64], Tensor[(7, 16, 7), float64]) {
  %60 = @func_7342() /* ty=(Tensor[(6, 12, 6), float32],) */;
  %61 = cast(meta[relay.Constant][3] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %62 = reshape(%61, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %63 = @func_6780(%62) /* ty=(Tensor[(1008), float32], bool, Tensor[(48), float64], Tensor[(240), uint32]) */;
  %64 = @func_8025() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(432), uint8]) */;
  %65 = %60.0;
  %66 = %63.1;
  %67 = %64.0;
  (%65, %66, meta[relay.Constant][3] /* ty=Tensor[(48), float64] */, %67)
}

def @func_8267() -> (Tensor[(7, 16, 7), float64],) {
  %68 = @func_4637() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %69 = %68.0;
  (%69,)
}

def @func_7033(%var_7028: Tensor[(550), float32]) -> (Tensor[(7, 16, 7), float64], Tensor[(11, 10, 5), float32], Tensor[(550), float32]) {
  %70 = cast(%var_7028, dtype="float32") /* ty=Tensor[(550), float32] */;
  %71 = reshape(%70, newshape=[11, 10, 5]) /* ty=Tensor[(11, 10, 5), float32] */;
  %72 = @func_6597() /* ty=Tensor[(7, 16, 7), float64] */;
  %73 = @func_5861(%71) /* ty=Tensor[(11, 10, 5), float32] */;
  (%72, %73, %var_7028)
}

def @func_5192() -> Tensor[(7, 16, 7), float64] {
  %74 = @func_4611() /* ty=Tensor[(7, 16, 7), float32] */;
  %75 = cast(%74, dtype="float64") /* ty=Tensor[(7, 16, 7), float64] */;
  sin(%75) /* ty=Tensor[(7, 16, 7), float64] */
}

def @func_9491(%var_9478: Tensor[(16, 9, 16), float64]) -> Tensor[(16, 9, 16), float64] {
  %76 = cast(meta[relay.Constant][4] /* ty=Tensor[(16, 9, 16), float64] */, dtype="float64") /* ty=Tensor[(16, 9, 16), float64] */;
  %77 = shape_of(%var_9478, dtype="int32") /* ty=Tensor[(3), int32] */;
  %78 = cast(%var_9478, dtype="float64") /* ty=Tensor[(16, 9, 16), float64] */;
  %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%78, %79) /* ty=Tensor[(16, 9, 16), float64] */
}

def @func_13665() -> (Tensor[(240), uint32],) {
  %80 = @func_6896() /* ty=Tensor[(240), uint32] */;
  (%80,)
}

def @func_13986() -> (Tensor[(7, 16, 7), float32], Tensor[(3, 16, 6), float64]) {
  %81 = @func_6529() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %82 = @func_11587() /* ty=(Tensor[(3, 16, 6), float64],) */;
  %83 = %81.0;
  %84 = %82.0;
  (%83, %84)
}

def @func_11817() -> (Tensor[(7, 16, 7), float64],) {
  %85 = @func_6656() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %86 = %85.0;
  (%86,)
}

def @func_9216() -> (Tensor[(240), uint32],) {
  %87 = @func_5336() /* ty=(Tensor[(240), uint32],) */;
  %88 = %87.0;
  (%88,)
}

def @func_9792() -> (Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) {
  %89 = @func_4853() /* ty=(Tensor[(432), uint8], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) */;
  %90 = @func_5852() /* ty=Tensor[(7, 16, 7), float32] */;
  %91 = %89.2;
  (%90, %91)
}

def @func_13466() -> Tensor[(7, 16, 7), float64] {
  %92 = @func_5774() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %92.0
}

def @func_11266(%var_11258: Tensor[(10, 16, 8), float32]) -> Tensor[(10, 16, 8), float32] {
  %93 = cast(%var_11258, dtype="float32") /* ty=Tensor[(10, 16, 8), float32] */;
  atanh(%93) /* ty=Tensor[(10, 16, 8), float32] */
}

def @func_7476(%var_7425: Tensor[(7, 16, 7), float64], %var_7448: Tensor[(90), int8], %var_7449: Tensor[(180), int8]) -> (Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(2, 10, 9), int8], Tensor[(90), int8], Tensor[(180), int8], Tensor[(6, 12, 6), float32]) {
  %94 = @func_7360() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %95 = @func_5774() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %96 = %95.0;
  %97 = cast(%var_7425, dtype="uint32") /* ty=Tensor[(7, 16, 7), uint32] */;
  %98 = shape_of(%96, dtype="int32") /* ty=Tensor[(3), int32] */;
  %99 = cast(%96, dtype="uint32") /* ty=Tensor[(7, 16, 7), uint32] */;
  %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %101 = left_shift(%99, %100) /* ty=Tensor[(7, 16, 7), uint32] */;
  %102 = cast(%101, dtype="float32") /* ty=Tensor[(7, 16, 7), float32] */;
  %103 = cast(%var_7448, dtype="int8") /* ty=Tensor[(90), int8] */;
  %104 = cast(%var_7449, dtype="int8") /* ty=Tensor[(180), int8] */;
  %105 = reshape(%103, newshape=[1, 10, 9]) /* ty=Tensor[(1, 10, 9), int8] */;
  %106 = reshape(%104, newshape=[2, 10, 9]) /* ty=Tensor[(2, 10, 9), int8] */;
  %107 = @func_7342() /* ty=(Tensor[(6, 12, 6), float32],) */;
  %108 = %94.0;
  %109 = atan(%102) /* ty=Tensor[(7, 16, 7), float32] */;
  %110 = @func_3937(%105, %106) /* ty=Tensor[(2, 10, 9), int8] */;
  %111 = %107.0;
  (%108, %109, %110, %var_7448, %var_7449, %111)
}

def @func_5096(%var_5087: Tensor[(70, 15), int8], %var_5088: Tensor[(432), uint8]) -> (Tensor[(8, 7, 11), float64], Tensor[(6, 12, 6), bool], Tensor[(70, 15), int8], Tensor[(432), uint8]) {
  %112 = @func_4510() /* ty=(Tensor[(8, 7, 11), float64], Tensor[(7, 16, 7), float64], Tensor[(4, 196), float64], Tensor[(240), uint32]) */;
  %113 = cast(%var_5087, dtype="int8") /* ty=Tensor[(70, 15), int8] */;
  %114 = cast(%var_5087, dtype="int8") /* ty=Tensor[(70, 15), int8] */;
  %115 = cast(%var_5087, dtype="int8") /* ty=Tensor[(70, 15), int8] */;
  %116 = cast(%var_5088, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %117 = reshape(%113, newshape=[15, 5, 14]) /* ty=Tensor[(15, 5, 14), int8] */;
  %118 = reshape(%114, newshape=[15, 5, 14]) /* ty=Tensor[(15, 5, 14), int8] */;
  %119 = reshape(%115, newshape=[15, 5, 14]) /* ty=Tensor[(15, 5, 14), int8] */;
  %120 = reshape(%116, newshape=[432]) /* ty=Tensor[(432), uint8] */;
  %121 = @func_2677(%117, %118, %119, %120) /* ty=(Tensor[(15, 5, 14), float32], Tensor[(6, 12, 6), bool], Tensor[(9), float32], Tensor[(432), uint8], Tensor[(6, 12, 6), bool]) */;
  %122 = %112.0;
  %123 = %121.4;
  (%122, %123, %var_5087, %var_5088)
}

def @func_5759(%var_5746: Tensor[(16, 3, 10), float32]) -> Tensor[(16, 3, 10), float64] {
  %124 = cast(meta[relay.Constant][5] /* ty=Tensor[(16, 1, 10), float32] */, dtype="float32") /* ty=Tensor[(16, 1, 10), float32] */;
  %125 = cast(%var_5746, dtype="float32") /* ty=Tensor[(16, 3, 10), float32] */;
  %126 = floor_mod(%124, %125) /* ty=Tensor[(16, 3, 10), float32] */;
  %127 = cast(%126, dtype="float64") /* ty=Tensor[(16, 3, 10), float64] */;
  cos(%127) /* ty=Tensor[(16, 3, 10), float64] */
}

def @func_1531(%var_1514: Tensor[(1, 3, 3), float32], %var_1518: Tensor[(216, 2), uint8]) -> (Tensor[(6, 12, 6), bool], Tensor[(216, 2), uint8], Tensor[(1, 3, 3), float32], Tensor[(1, 3, 3), float64]) {
  %128 = cast(%var_1518, dtype="uint8") /* ty=Tensor[(216, 2), uint8] */;
  %129 = cast(%var_1518, dtype="uint8") /* ty=Tensor[(216, 2), uint8] */;
  %130 = reshape(%128, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), uint8] */;
  %131 = reshape(%129, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), uint8] */;
  %132 = cast(%var_1514, dtype="float32") /* ty=Tensor[(1, 3, 3), float32] */;
  %133 = atan(%132) /* ty=Tensor[(1, 3, 3), float32] */;
  %134 = cast(%133, dtype="float32") /* ty=Tensor[(1, 3, 3), float32] */;
  %135 = cast(%133, dtype="float64") /* ty=Tensor[(1, 3, 3), float64] */;
  %136 = @func_1019(%130, %131) /* ty=Tensor[(6, 12, 6), bool] */;
  %137 = cosh(%134) /* ty=Tensor[(1, 3, 3), float32] */;
  %138 = asinh(%135) /* ty=Tensor[(1, 3, 3), float64] */;
  (%136, %var_1518, %137, %138)
}

def @func_8133() -> (Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64]) {
  %139 = @func_4637() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %140 = @func_6119() /* ty=(Tensor[(6, 12, 6), bool], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64]) */;
  %141 = @func_4611() /* ty=Tensor[(7, 16, 7), float32] */;
  %142 = %139.0;
  %143 = %140.1;
  (%141, %142, %143)
}

def @func_8635(%var_8609: Tensor[(10, 15, 9), float32]) -> (Tensor[(10, 15, 9), float32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) {
  %144 = cast(%var_8609, dtype="float32") /* ty=Tensor[(10, 15, 9), float32] */;
  %145 = acosh(%144) /* ty=Tensor[(10, 15, 9), float32] */;
  %146 = @func_5852() /* ty=Tensor[(7, 16, 7), float32] */;
  %147 = @func_8182() /* ty=Tensor[(7, 16, 7), float64] */;
  (%145, %146, %147)
}

def @func_12702() -> (Tensor[(180), int8], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64]) {
  %148 = @func_9632() /* ty=(Tensor[(180), int8],) */;
  %149 = @func_7965() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %150 = @func_9029() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %151 = %148.0;
  %152 = %149.0;
  %153 = %150.0;
  (%151, %152, %153)
}

def @func_11354(%var_11332: Tensor[(9), float32]) -> (Tensor[(432), uint8], Tensor[(8, 7, 11), float32], Tensor[(9), float32]) {
  %154 = @func_7264() /* ty=(Tensor[(432), uint8], Tensor[(8, 7, 11), float64]) */;
  %155 = cast(%var_11332, dtype="float32") /* ty=Tensor[(9), float32] */;
  %156 = %154.0;
  %157 = cast(%156, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %158 = reshape(%155, newshape=[9, 1]) /* ty=Tensor[(9, 1), float32] */;
  %159 = reshape(%157, newshape=[432]) /* ty=Tensor[(432), uint8] */;
  %160 = @func_8936(%158, %159) /* ty=(Tensor[(180), int8], Tensor[(1, 3, 3), float32], Tensor[(9, 1), float32], Tensor[(432), uint8], Tensor[(8, 7, 11), float32]) */;
  %161 = %160.4;
  (%156, %161, %var_11332)
}

def @func_12403() -> (Tensor[(240), uint32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) {
  %162 = @func_11623() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(240), uint32]) */;
  %163 = @func_5215() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %164 = %162.1;
  %165 = %163.0;
  %166 = @func_8362() /* ty=Tensor[(7, 16, 7), float64] */;
  (%164, %165, %166)
}

def @func_4637() -> (Tensor[(7, 16, 7), float64],) {
  %167 = @func_4581() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(6, 12, 6), bool], Tensor[(432), uint8], Tensor[(11, 12, 11), bool], bool) */;
  %168 = %167.0;
  (%168,)
}

def @func_11610() -> (Tensor[(180), int8], Tensor[(7, 16, 7), float64], float32, Tensor[(864), uint16]) {
  %169 = @func_8886() /* ty=(Tensor[(180), int8],) */;
  %170 = cast(8.33598f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %171 = cast(meta[relay.Constant][6] /* ty=Tensor[(864), uint16] */, dtype="uint16") /* ty=Tensor[(864), uint16] */;
  %172 = reshape(%170, newshape=[]) /* ty=float32 */;
  %173 = reshape(%171, newshape=[864]) /* ty=Tensor[(864), uint16] */;
  %174 = @func_5312(%172, %173) /* ty=(Tensor[(7, 14, 11), bool], Tensor[(7, 14, 11), float32], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64], Tensor[(240), uint32], Tensor[(12, 6, 12), uint16], Tensor[(864), uint16]) */;
  %175 = %169.0;
  %176 = %174.4;
  (%175, %176, 8.33598f /* ty=float32 */, meta[relay.Constant][6] /* ty=Tensor[(864), uint16] */)
}

def @func_8474() -> (Tensor[(7, 16, 7), float64],) {
  %177 = @func_4853() /* ty=(Tensor[(432), uint8], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) */;
  %178 = %177.2;
  (%178,)
}

def @func_6499() -> (Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32]) {
  %179 = @func_4853() /* ty=(Tensor[(432), uint8], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) */;
  %180 = @func_6273() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %181 = @func_5215() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %182 = @func_5841() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %183 = %182.0;
  %184 = cast(%183, dtype="float32") /* ty=Tensor[(7, 16, 7), float32] */;
  %185 = %179.2;
  %186 = %180.0;
  %187 = %181.0;
  %188 = erf(%184) /* ty=Tensor[(7, 16, 7), float32] */;
  (%185, %186, %187, %188)
}

def @func_10861() -> (Tensor[(432), uint8], Tensor[(240), uint32], Tensor[(7, 16, 7), float32]) {
  %189 = @func_9216() /* ty=(Tensor[(240), uint32],) */;
  %190 = @func_10822() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %191 = @func_7389() /* ty=Tensor[(432), uint8] */;
  %192 = %189.0;
  %193 = %190.0;
  (%191, %192, %193)
}

def @func_11984() -> (Tensor[(240), uint32], Tensor[(7, 16, 7), float32], Tensor[(180), int8]) {
  %194 = @func_9216() /* ty=(Tensor[(240), uint32],) */;
  %195 = @func_7812() /* ty=(Tensor[(8, 7, 11), float32], Tensor[(7, 16, 7), float32]) */;
  %196 = @func_8886() /* ty=(Tensor[(180), int8],) */;
  %197 = %194.0;
  %198 = %195.1;
  %199 = %196.0;
  (%197, %198, %199)
}

def @func_12246() -> (Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64], Tensor[(11, 12, 11), bool], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64], Tensor[(8, 7, 11), float32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), uint16]) {
  %200 = @func_7360() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %201 = @func_11817() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %202 = @func_6656() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %203 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %204 = reshape(%203, newshape=[]) /* ty=bool */;
  %205 = @func_7360() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %206 = @func_4637() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %207 = %206.0;
  %208 = @func_8577() /* ty=(Tensor[(6, 12, 6), float32], bool, Tensor[(48), float64], Tensor[(7, 16, 7), float64]) */;
  %209 = %208.3;
  %210 = cast(%209, dtype="float64") /* ty=Tensor[(7, 16, 7), float64] */;
  %211 = shape_of(%207, dtype="int32") /* ty=Tensor[(3), int32] */;
  %212 = cast(%207, dtype="float64") /* ty=Tensor[(7, 16, 7), float64] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %214 = @func_7812() /* ty=(Tensor[(8, 7, 11), float32], Tensor[(7, 16, 7), float32]) */;
  %215 = @func_12027() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %216 = @func_9381() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %217 = %216.0;
  %218 = cast(%217, dtype="uint16") /* ty=Tensor[(7, 16, 7), uint16] */;
  %219 = cast(False /* ty=bool */, dtype="uint16") /* ty=uint16 */;
  %220 = %200.0;
  %221 = %201.0;
  %222 = %202.0;
  %223 = @func_3774(%204) /* ty=Tensor[(11, 12, 11), bool] */;
  %224 = %205.0;
  %225 = mod(%212, %213) /* ty=Tensor[(7, 16, 7), float64] */;
  %226 = %214.0;
  %227 = %215.0;
  %228 = multiply(%218, %219) /* ty=Tensor[(7, 16, 7), uint16] */;
  (%220, %221, %222, %223, %224, %225, %226, %227, %228)
}

def @func_4611() -> Tensor[(7, 16, 7), float32] {
  %229 = @func_4510() /* ty=(Tensor[(8, 7, 11), float64], Tensor[(7, 16, 7), float64], Tensor[(4, 196), float64], Tensor[(240), uint32]) */;
  %230 = %229.1;
  %231 = cast(%230, dtype="float32") /* ty=Tensor[(7, 16, 7), float32] */;
  asinh(%231) /* ty=Tensor[(7, 16, 7), float32] */
}

def @func_6991() -> Tensor[(432), uint8] {
  %232 = @func_4581() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(6, 12, 6), bool], Tensor[(432), uint8], Tensor[(11, 12, 11), bool], bool) */;
  %232.2
}

def @func_5312(%var_5239: float32, %var_5304: Tensor[(864), uint16]) -> (Tensor[(7, 14, 11), bool], Tensor[(7, 14, 11), float32], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64], Tensor[(240), uint32], Tensor[(12, 6, 12), uint16], Tensor[(864), uint16]) {
  %233 = cast(%var_5239, dtype="bool") /* ty=bool */;
  %234 = cast(meta[relay.Constant][7] /* ty=Tensor[(7, 14, 11), float32] */, dtype="bool") /* ty=Tensor[(7, 14, 11), bool] */;
  %235 = cast(meta[relay.Constant][7] /* ty=Tensor[(7, 14, 11), float32] */, dtype="float32") /* ty=Tensor[(7, 14, 11), float32] */;
  %236 = @func_4637() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %237 = @func_5192() /* ty=Tensor[(7, 16, 7), float64] */;
  %238 = cast(%237, dtype="float64") /* ty=Tensor[(7, 16, 7), float64] */;
  %239 = cast(meta[relay.Constant][8] /* ty=Tensor[(240), uint32] */, dtype="uint32") /* ty=Tensor[(240), uint32] */;
  %240 = reshape(%238, newshape=[7, 16, 7]) /* ty=Tensor[(7, 16, 7), float64] */;
  %241 = reshape(%239, newshape=[240]) /* ty=Tensor[(240), uint32] */;
  %242 = @func_3670(%240, %241) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(5, 3, 16), uint32], Tensor[(240), uint32]) */;
  %243 = cast(%var_5239, dtype="uint16") /* ty=uint16 */;
  %244 = cast(%var_5304, dtype="uint16") /* ty=Tensor[(864), uint16] */;
  %245 = reshape(%243, newshape=[]) /* ty=uint16 */;
  %246 = reshape(%244, newshape=[12, 6, 12]) /* ty=Tensor[(12, 6, 12), uint16] */;
  %247 = less_equal(%233, %234) /* ty=Tensor[(7, 14, 11), bool] */;
  %248 = acos(%235) /* ty=Tensor[(7, 14, 11), float32] */;
  %249 = %236.0;
  %250 = %242.0;
  %251 = @func_2721(%245, %246) /* ty=Tensor[(12, 6, 12), uint16] */;
  (%247, %248, %249, %237, %250, meta[relay.Constant][8] /* ty=Tensor[(240), uint32] */, %251, %var_5304)
}

def @func_2836(%var_2822: Tensor[(5, 3, 16), uint32], %var_2823: Tensor[(5, 3, 16), uint32]) -> Tensor[(5, 3, 16), uint32] {
  %252 = cast(%var_2823, dtype="uint32") /* ty=Tensor[(5, 3, 16), uint32] */;
  %253 = shape_of(%var_2822, dtype="int32") /* ty=Tensor[(3), int32] */;
  %254 = cast(%var_2822, dtype="uint32") /* ty=Tensor[(5, 3, 16), uint32] */;
  %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  minimum(%254, %255) /* ty=Tensor[(5, 3, 16), uint32] */
}

def @func_12327(%var_12283: float32, %var_12299: Tensor[(550), float32]) -> (Tensor[(12, 1, 8), float32], Tensor[(7, 16, 7), float32], Tensor[(11, 10, 5), uint8], Tensor[(5, 3, 16), uint32]) {
  %256 = cast(%var_12283, dtype="float32") /* ty=float32 */;
  %257 = cast(meta[relay.Constant][9] /* ty=Tensor[(12, 1, 8), float32] */, dtype="float32") /* ty=Tensor[(12, 1, 8), float32] */;
  %258 = @func_11517() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %259 = cast(%var_12299, dtype="float32") /* ty=Tensor[(550), float32] */;
  %260 = reshape(%259, newshape=[550]) /* ty=Tensor[(550), float32] */;
  %261 = @func_7033(%260) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(11, 10, 5), float32], Tensor[(550), float32]) */;
  %262 = %261.1;
  %263 = cast(%var_12299, dtype="uint8") /* ty=Tensor[(550), uint8] */;
  %264 = shape_of(%262, dtype="int32") /* ty=Tensor[(3), int32] */;
  %265 = cast(%262, dtype="uint8") /* ty=Tensor[(11, 10, 5), uint8] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %267 = @func_7863() /* ty=(Tensor[(240), uint32], Tensor[(5, 3, 16), uint32], Tensor[(7, 16, 7), float32], Tensor[(784), float64], Tensor[(90), int8], Tensor[(180), int8]) */;
  %268 = divide(%256, %257) /* ty=Tensor[(12, 1, 8), float32] */;
  %269 = %258.0;
  %270 = subtract(%265, %266) /* ty=Tensor[(11, 10, 5), uint8] */;
  %271 = %267.1;
  (%268, %269, %270, %271)
}

def @func_5981(%var_5965: Tensor[(1050), int8]) -> (Tensor[(7, 16, 7), float64], Tensor[(432), uint8], Tensor[(1050), int8], Tensor[(432), uint8]) {
  %272 = @func_4853() /* ty=(Tensor[(432), uint8], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) */;
  %273 = cast(%var_5965, dtype="int8") /* ty=Tensor[(1050), int8] */;
  %274 = cast(meta[relay.Constant][10] /* ty=Tensor[(432), uint8] */, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %275 = reshape(%273, newshape=[70, 15]) /* ty=Tensor[(70, 15), int8] */;
  %276 = reshape(%274, newshape=[432]) /* ty=Tensor[(432), uint8] */;
  %277 = @func_5096(%275, %276) /* ty=(Tensor[(8, 7, 11), float64], Tensor[(6, 12, 6), bool], Tensor[(70, 15), int8], Tensor[(432), uint8]) */;
  %278 = %272.2;
  %279 = %277.3;
  (%278, %279, %var_5965, meta[relay.Constant][10] /* ty=Tensor[(432), uint8] */)
}

def @func_12520() -> Tensor[(7, 16, 7), float32] {
  @func_10198() /* ty=Tensor[(7, 16, 7), float32] */
}

def @func_13342() -> Tensor[(7, 16, 7), float64] {
  %280 = @func_5841() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %280.0
}

def @func_11517() -> (Tensor[(7, 16, 7), float32],) {
  %281 = @func_4908() /* ty=(Tensor[(7, 16, 7), float32], Tensor[(11, 12, 11), bool]) */;
  %282 = %281.0;
  (%282,)
}

def @func_10778(%var_10761: Tensor[(11, 11, 1), float32]) -> Tensor[(11, 11, 1), float32] {
  %283 = cast(%var_10761, dtype="float32") /* ty=Tensor[(11, 11, 1), float32] */;
  tan(%283) /* ty=Tensor[(11, 11, 1), float32] */
}

def @func_12272(%var_12268: Tensor[(5, 9, 1), int64]) -> Tensor[(5, 9, 1), int64] {
  %284 = cast(-3 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %285 = cast(%var_12268, dtype="int64") /* ty=Tensor[(5, 9, 1), int64] */;
  bitwise_or(%284, %285) /* ty=Tensor[(5, 9, 1), int64] */
}

def @func_13863() -> (Tensor[(7, 16, 7), float64], Tensor[(240), uint32], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64]) {
  %286 = @func_13706() /* ty=(Tensor[(240), uint32],) */;
  %287 = @func_8133() /* ty=(Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64]) */;
  %288 = @func_4637() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %289 = @func_5192() /* ty=Tensor[(7, 16, 7), float64] */;
  %290 = %286.0;
  %291 = %287.2;
  %292 = %288.0;
  (%289, %290, %291, %292)
}

def @func_1658(%var_1632: Tensor[(12, 1, 13), uint64], %var_1633: Tensor[(12, 11, 13), uint64]) -> (Tensor[(12, 11, 13), uint64], Tensor[(6, 12, 6), bool], Tensor[(9), float32], Tensor[(432), uint8], Tensor[(1, 3, 3), float32]) {
  %293 = cast(%var_1632, dtype="uint64") /* ty=Tensor[(12, 1, 13), uint64] */;
  %294 = cast(%var_1633, dtype="uint64") /* ty=Tensor[(12, 11, 13), uint64] */;
  %295 = cast(meta[relay.Constant][11] /* ty=Tensor[(9), float32] */, dtype="float32") /* ty=Tensor[(9), float32] */;
  %296 = cast(meta[relay.Constant][12] /* ty=Tensor[(432), uint8] */, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %297 = reshape(%295, newshape=[1, 3, 3]) /* ty=Tensor[(1, 3, 3), float32] */;
  %298 = reshape(%296, newshape=[216, 2]) /* ty=Tensor[(216, 2), uint8] */;
  %299 = @func_1531(%297, %298) /* ty=(Tensor[(6, 12, 6), bool], Tensor[(216, 2), uint8], Tensor[(1, 3, 3), float32], Tensor[(1, 3, 3), float64]) */;
  %300 = cast(meta[relay.Constant][11] /* ty=Tensor[(9), float32] */, dtype="float32") /* ty=Tensor[(9), float32] */;
  %301 = cast(meta[relay.Constant][12] /* ty=Tensor[(432), uint8] */, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %302 = reshape(%300, newshape=[1, 3, 3]) /* ty=Tensor[(1, 3, 3), float32] */;
  %303 = reshape(%301, newshape=[216, 2]) /* ty=Tensor[(216, 2), uint8] */;
  %304 = @func_1531(%302, %303) /* ty=(Tensor[(6, 12, 6), bool], Tensor[(216, 2), uint8], Tensor[(1, 3, 3), float32], Tensor[(1, 3, 3), float64]) */;
  %305 = maximum(%293, %294) /* ty=Tensor[(12, 11, 13), uint64] */;
  %306 = %299.0;
  %307 = %304.2;
  (%305, %306, meta[relay.Constant][11] /* ty=Tensor[(9), float32] */, meta[relay.Constant][12] /* ty=Tensor[(432), uint8] */, %307)
}

def @func_11735() -> (Tensor[(7, 16, 7), float32],) {
  %308 = @func_11517() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %309 = %308.0;
  (%309,)
}

def @func_7360() -> (Tensor[(7, 16, 7), float32],) {
  %310 = @func_6273() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %311 = %310.0;
  (%311,)
}

def @func_7965() -> (Tensor[(7, 16, 7), float64],) {
  %312 = @func_5841() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %313 = %312.0;
  (%313,)
}

def @func_13021(%var_12985: Tensor[(2, 14, 8), float64], %var_13000: Tensor[(2, 14, 8), float64]) -> (Tensor[(2, 14, 8), int16], Tensor[(2, 14, 8), float64]) {
  %314 = cast(%var_12985, dtype="float64") /* ty=Tensor[(2, 14, 8), float64] */;
  %315 = acos(%314) /* ty=Tensor[(2, 14, 8), float64] */;
  %316 = cast(%var_13000, dtype="int16") /* ty=Tensor[(2, 14, 8), int16] */;
  %317 = shape_of(%315, dtype="int32") /* ty=Tensor[(3), int32] */;
  %318 = cast(%315, dtype="int16") /* ty=Tensor[(2, 14, 8), int16] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %320 = cast(%var_13000, dtype="float64") /* ty=Tensor[(2, 14, 8), float64] */;
  %321 = add(%318, %319) /* ty=Tensor[(2, 14, 8), int16] */;
  %322 = sqrt(%320) /* ty=Tensor[(2, 14, 8), float64] */;
  (%321, %322)
}

def @func_9104() -> (Tensor[(7, 16, 7), float32],) {
  %323 = @func_7812() /* ty=(Tensor[(8, 7, 11), float32], Tensor[(7, 16, 7), float32]) */;
  %324 = %323.1;
  (%324,)
}

def @func_5716() -> (Tensor[(4, 196), float64],) {
  %325 = @func_4510() /* ty=(Tensor[(8, 7, 11), float64], Tensor[(7, 16, 7), float64], Tensor[(4, 196), float64], Tensor[(240), uint32]) */;
  %326 = %325.2;
  (%326,)
}

def @func_4684(%var_4666: Tensor[(16, 7, 9), float32]) -> (Tensor[(16, 7, 9), float32], Tensor[(7, 16, 7), float32]) {
  %327 = cast(%var_4666, dtype="float32") /* ty=Tensor[(16, 7, 9), float32] */;
  %328 = sin(%327) /* ty=Tensor[(16, 7, 9), float32] */;
  %329 = @func_4611() /* ty=Tensor[(7, 16, 7), float32] */;
  (%328, %329)
}

def @func_13152(%var_13140: Tensor[(8, 7, 11), float64]) -> (Tensor[(8, 7, 11), uint8],) {
  %330 = @func_10879() /* ty=(Tensor[(8, 7, 11), float64],) */;
  %331 = %330.0;
  %332 = cast(%var_13140, dtype="uint8") /* ty=Tensor[(8, 7, 11), uint8] */;
  %333 = shape_of(%331, dtype="int32") /* ty=Tensor[(3), int32] */;
  %334 = cast(%331, dtype="uint8") /* ty=Tensor[(8, 7, 11), uint8] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %336 = minimum(%334, %335) /* ty=Tensor[(8, 7, 11), uint8] */;
  (%336,)
}

def @func_4772() -> (Tensor[(432), uint8], Tensor[(11, 12, 11), bool], Tensor[(11, 12, 11), bool], bool) {
  %337 = @func_4581() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(6, 12, 6), bool], Tensor[(432), uint8], Tensor[(11, 12, 11), bool], bool) */;
  %338 = @func_4581() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(6, 12, 6), bool], Tensor[(432), uint8], Tensor[(11, 12, 11), bool], bool) */;
  %339 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %340 = reshape(%339, newshape=[]) /* ty=bool */;
  %341 = %337.2;
  %342 = %338.3;
  %343 = @func_3774(%340) /* ty=Tensor[(11, 12, 11), bool] */;
  (%341, %342, %343, True /* ty=bool */)
}

def @func_6231() -> (Tensor[(7, 16, 7), float32], Tensor[(1050), int8], Tensor[(5, 210), int8], Tensor[(16, 7, 9), float32], Tensor[(1008), float32]) {
  %344 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 210), int8] */, dtype="int8") /* ty=Tensor[(5, 210), int8] */;
  %345 = reshape(%344, newshape=[1050]) /* ty=Tensor[(1050), int8] */;
  %346 = @func_5981(%345) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(432), uint8], Tensor[(1050), int8], Tensor[(432), uint8]) */;
  %347 = cast(meta[relay.Constant][14] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %348 = reshape(%347, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), float32] */;
  %349 = @func_4684(%348) /* ty=(Tensor[(16, 7, 9), float32], Tensor[(7, 16, 7), float32]) */;
  %350 = @func_5852() /* ty=Tensor[(7, 16, 7), float32] */;
  %351 = %346.2;
  %352 = %349.0;
  (%350, %351, meta[relay.Constant][13] /* ty=Tensor[(5, 210), int8] */, %352, meta[relay.Constant][14] /* ty=Tensor[(1008), float32] */)
}

def @func_12831() -> Tensor[(7, 16, 7), float64] {
  %353 = @func_5774() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %353.0
}

def @func_6119() -> (Tensor[(6, 12, 6), bool], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64]) {
  %354 = @func_4581() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(6, 12, 6), bool], Tensor[(432), uint8], Tensor[(11, 12, 11), bool], bool) */;
  %355 = @func_5774() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %356 = @func_4637() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %357 = %354.1;
  %358 = %355.0;
  %359 = %356.0;
  (%357, %358, %359)
}

def @func_11915(%var_11906: Tensor[(15, 16, 6), float64], %var_11907: Tensor[(15, 16, 6), float64]) -> Tensor[(15, 16, 6), float64] {
  %360 = cast(%var_11907, dtype="float64") /* ty=Tensor[(15, 16, 6), float64] */;
  %361 = shape_of(%var_11906, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(%var_11906, dtype="float64") /* ty=Tensor[(15, 16, 6), float64] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%362, %363) /* ty=Tensor[(15, 16, 6), float64] */
}

def @func_8798() -> (bool, Tensor[(11, 12, 11), bool], Tensor[(5, 3, 16), uint32], Tensor[(240), uint32]) {
  %364 = @func_4772() /* ty=(Tensor[(432), uint8], Tensor[(11, 12, 11), bool], Tensor[(11, 12, 11), bool], bool) */;
  %365 = @func_6083() /* ty=(Tensor[(11, 12, 11), bool], Tensor[(432), uint8]) */;
  %366 = cast(meta[relay.Constant][15] /* ty=Tensor[(240), uint32] */, dtype="uint32") /* ty=Tensor[(240), uint32] */;
  %367 = cast(meta[relay.Constant][15] /* ty=Tensor[(240), uint32] */, dtype="uint32") /* ty=Tensor[(240), uint32] */;
  %368 = reshape(%366, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), uint32] */;
  %369 = reshape(%367, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), uint32] */;
  %370 = %364.3;
  %371 = %365.0;
  %372 = @func_2836(%368, %369) /* ty=Tensor[(5, 3, 16), uint32] */;
  (%370, %371, %372, meta[relay.Constant][15] /* ty=Tensor[(240), uint32] */)
}

def @func_6273() -> (Tensor[(7, 16, 7), float32],) {
  %373 = @func_4611() /* ty=Tensor[(7, 16, 7), float32] */;
  (%373,)
}

def @func_4980() -> (Tensor[(7, 16, 7), float32],) {
  %374 = @func_4611() /* ty=Tensor[(7, 16, 7), float32] */;
  (%374,)
}

def @func_3937(%var_3927: Tensor[(1, 10, 9), int8], %var_3928: Tensor[(2, 10, 9), int8]) -> Tensor[(2, 10, 9), int8] {
  %375 = cast(%var_3927, dtype="int8") /* ty=Tensor[(1, 10, 9), int8] */;
  %376 = cast(%var_3928, dtype="int8") /* ty=Tensor[(2, 10, 9), int8] */;
  add(%375, %376) /* ty=Tensor[(2, 10, 9), int8] */
}

def @func_9669() -> (Tensor[(240), uint32],) {
  %377 = @func_4510() /* ty=(Tensor[(8, 7, 11), float64], Tensor[(7, 16, 7), float64], Tensor[(4, 196), float64], Tensor[(240), uint32]) */;
  %378 = %377.3;
  (%378,)
}

def @func_5336() -> (Tensor[(240), uint32],) {
  %379 = @func_4510() /* ty=(Tensor[(8, 7, 11), float64], Tensor[(7, 16, 7), float64], Tensor[(4, 196), float64], Tensor[(240), uint32]) */;
  %380 = %379.3;
  (%380,)
}

def @func_6597() -> Tensor[(7, 16, 7), float64] {
  %381 = @func_6499() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32]) */;
  %381.0
}

def @func_14243() -> (Tensor[(7, 16, 7), float64], Tensor[(180), int8], Tensor[(180, 1), int8], Tensor[(240), uint32]) {
  %382 = cast(meta[relay.Constant][16] /* ty=Tensor[(180, 1), int8] */, dtype="int8") /* ty=Tensor[(180, 1), int8] */;
  %383 = reshape(%382, newshape=[180]) /* ty=Tensor[(180), int8] */;
  %384 = @func_13802(%383) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(6, 12, 6), float32], Tensor[(90), int8], Tensor[(180), int8], Tensor[(7, 16, 7), float32], Tensor[(1, 3, 3), float32], Tensor[(3, 3), float32]) */;
  %385 = @func_10861() /* ty=(Tensor[(432), uint8], Tensor[(240), uint32], Tensor[(7, 16, 7), float32]) */;
  %386 = @func_8182() /* ty=Tensor[(7, 16, 7), float64] */;
  %387 = %384.3;
  %388 = %385.1;
  (%386, %387, meta[relay.Constant][16] /* ty=Tensor[(180, 1), int8] */, %388)
}

def @func_5841() -> (Tensor[(7, 16, 7), float64],) {
  %389 = @func_5215() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %390 = %389.0;
  %391 = cast(%390, dtype="float64") /* ty=Tensor[(7, 16, 7), float64] */;
  %392 = sigmoid(%391) /* ty=Tensor[(7, 16, 7), float64] */;
  (%392,)
}

def @func_6832() -> Tensor[(7, 16, 7), float64] {
  %393 = @func_5841() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %393.0
}

def @func_8039() -> Tensor[(7, 16, 7), float64] {
  @func_6597() /* ty=Tensor[(7, 16, 7), float64] */
}

def @func_8517(%var_8489: Tensor[(1050), int8]) -> (Tensor[(7, 16, 7), float32], Tensor[(1050), int8], Tensor[(36, 12), bool], Tensor[(7, 16, 7), float64]) {
  %394 = @func_7360() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %395 = cast(%var_8489, dtype="int8") /* ty=Tensor[(1050), int8] */;
  %396 = cast(%var_8489, dtype="int8") /* ty=Tensor[(1050), int8] */;
  %397 = cast(%var_8489, dtype="int8") /* ty=Tensor[(1050), int8] */;
  %398 = cast(meta[relay.Constant][17] /* ty=Tensor[(36, 12), uint8] */, dtype="uint8") /* ty=Tensor[(36, 12), uint8] */;
  %399 = reshape(%395, newshape=[15, 5, 14]) /* ty=Tensor[(15, 5, 14), int8] */;
  %400 = reshape(%396, newshape=[15, 5, 14]) /* ty=Tensor[(15, 5, 14), int8] */;
  %401 = reshape(%397, newshape=[15, 5, 14]) /* ty=Tensor[(15, 5, 14), int8] */;
  %402 = reshape(%398, newshape=[432]) /* ty=Tensor[(432), uint8] */;
  %403 = @func_2677(%399, %400, %401, %402) /* ty=(Tensor[(15, 5, 14), float32], Tensor[(6, 12, 6), bool], Tensor[(9), float32], Tensor[(432), uint8], Tensor[(6, 12, 6), bool]) */;
  %404 = %403.3;
  %405 = cast(%404, dtype="bool") /* ty=Tensor[(432), bool] */;
  %406 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(36, 12), uint8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %407 = cast(meta[relay.Constant][17] /* ty=Tensor[(36, 12), uint8] */, dtype="bool") /* ty=Tensor[(36, 12), bool] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %409 = %394.0;
  %410 = logical_and(%407, %408) /* ty=Tensor[(36, 12), bool] */;
  %411 = @func_6832() /* ty=Tensor[(7, 16, 7), float64] */;
  (%409, %var_8489, %410, %411)
}

def @func_6656() -> (Tensor[(7, 16, 7), float64],) {
  %412 = @func_6597() /* ty=Tensor[(7, 16, 7), float64] */;
  (%412,)
}

def @func_11694(%var_11659: Tensor[(4, 196), float64]) -> (Tensor[(4, 196), float64], Tensor[(432), uint8], Tensor[(4, 196), float32]) {
  %413 = @func_5716() /* ty=(Tensor[(4, 196), float64],) */;
  %414 = %413.0;
  %415 = cast(%414, dtype="float64") /* ty=Tensor[(4, 196), float64] */;
  %416 = sin(%415) /* ty=Tensor[(4, 196), float64] */;
  %417 = cast(%var_11659, dtype="float64") /* ty=Tensor[(4, 196), float64] */;
  %418 = shape_of(%416, dtype="int32") /* ty=Tensor[(2), int32] */;
  %419 = cast(%416, dtype="float64") /* ty=Tensor[(4, 196), float64] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %421 = @func_6083() /* ty=(Tensor[(11, 12, 11), bool], Tensor[(432), uint8]) */;
  %422 = cast(%var_11659, dtype="float32") /* ty=Tensor[(4, 196), float32] */;
  %423 = floor_mod(%419, %420) /* ty=Tensor[(4, 196), float64] */;
  %424 = %421.1;
  %425 = tan(%422) /* ty=Tensor[(4, 196), float32] */;
  (%423, %424, %425)
}

def @func_13318(%var_13291: Tensor[(4, 15, 5), float64], %var_13314: Tensor[(1280), float32]) -> (Tensor[(4, 15, 5), bool], Tensor[(7, 16, 7), float32], Tensor[(10, 16, 8), float32], Tensor[(1280), float32]) {
  %426 = cast(%var_13291, dtype="float64") /* ty=Tensor[(4, 15, 5), float64] */;
  %427 = erf(%426) /* ty=Tensor[(4, 15, 5), float64] */;
  %428 = cast(%var_13291, dtype="bool") /* ty=Tensor[(4, 15, 5), bool] */;
  %429 = shape_of(%427, dtype="int32") /* ty=Tensor[(3), int32] */;
  %430 = cast(%427, dtype="bool") /* ty=Tensor[(4, 15, 5), bool] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %432 = @func_12881() /* ty=(Tensor[(432), uint8], Tensor[(7, 16, 7), float32]) */;
  %433 = cast(%var_13314, dtype="float32") /* ty=Tensor[(1280), float32] */;
  %434 = reshape(%433, newshape=[10, 16, 8]) /* ty=Tensor[(10, 16, 8), float32] */;
  %435 = logical_and(%430, %431) /* ty=Tensor[(4, 15, 5), bool] */;
  %436 = %432.1;
  %437 = @func_11266(%434) /* ty=Tensor[(10, 16, 8), float32] */;
  (%435, %436, %437, %var_13314)
}

def @func_10335() -> (Tensor[(7, 16, 7), float64], Tensor[(8, 7, 11), float64], Tensor[(240), uint32]) {
  %438 = @func_5774() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %439 = @func_7264() /* ty=(Tensor[(432), uint8], Tensor[(8, 7, 11), float64]) */;
  %440 = %438.0;
  %441 = %439.1;
  %442 = @func_6926() /* ty=Tensor[(240), uint32] */;
  (%440, %441, %442)
}

def @func_12733() -> Tensor[(7, 16, 7), float64] {
  @func_8039() /* ty=Tensor[(7, 16, 7), float64] */
}

def @func_12943(%var_12927: Tensor[(2, 5, 6), float32]) -> Tensor[(2, 5, 6), float32] {
  %443 = cast(%var_12927, dtype="float32") /* ty=Tensor[(2, 5, 6), float32] */;
  sqrt(%443) /* ty=Tensor[(2, 5, 6), float32] */
}

def @func_13706() -> (Tensor[(240), uint32],) {
  %444 = @func_13665() /* ty=(Tensor[(240), uint32],) */;
  %445 = %444.0;
  (%445,)
}

def @func_8025() -> (Tensor[(7, 16, 7), float64], Tensor[(432), uint8]) {
  %446 = @func_5841() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %447 = %446.0;
  %448 = @func_7389() /* ty=Tensor[(432), uint8] */;
  (%447, %448)
}

def @func_7901() -> (Tensor[(7, 16, 7), float32],) {
  %449 = @func_4611() /* ty=Tensor[(7, 16, 7), float32] */;
  (%449,)
}

def @func_11210(%var_11178: Tensor[(7, 16, 7), float32], %var_11184: Tensor[(1050), int8]) -> (Tensor[(7, 16, 7), bool], Tensor[(15, 5, 14), float32], Tensor[(1050), int8], Tensor[(432), uint8]) {
  %450 = @func_10198() /* ty=Tensor[(7, 16, 7), float32] */;
  %451 = cast(%var_11178, dtype="bool") /* ty=Tensor[(7, 16, 7), bool] */;
  %452 = shape_of(%450, dtype="int32") /* ty=Tensor[(3), int32] */;
  %453 = cast(%450, dtype="bool") /* ty=Tensor[(7, 16, 7), bool] */;
  %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %455 = cast(%var_11184, dtype="int8") /* ty=Tensor[(1050), int8] */;
  %456 = cast(%var_11184, dtype="int8") /* ty=Tensor[(1050), int8] */;
  %457 = cast(%var_11184, dtype="int8") /* ty=Tensor[(1050), int8] */;
  %458 = cast(meta[relay.Constant][18] /* ty=Tensor[(432), uint8] */, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %459 = reshape(%455, newshape=[15, 5, 14]) /* ty=Tensor[(15, 5, 14), int8] */;
  %460 = reshape(%456, newshape=[15, 5, 14]) /* ty=Tensor[(15, 5, 14), int8] */;
  %461 = reshape(%457, newshape=[15, 5, 14]) /* ty=Tensor[(15, 5, 14), int8] */;
  %462 = reshape(%458, newshape=[432]) /* ty=Tensor[(432), uint8] */;
  %463 = @func_2677(%459, %460, %461, %462) /* ty=(Tensor[(15, 5, 14), float32], Tensor[(6, 12, 6), bool], Tensor[(9), float32], Tensor[(432), uint8], Tensor[(6, 12, 6), bool]) */;
  %464 = less_equal(%453, %454) /* ty=Tensor[(7, 16, 7), bool] */;
  %465 = %463.0;
  (%464, %465, %var_11184, meta[relay.Constant][18] /* ty=Tensor[(432), uint8] */)
}

def @func_5468(%var_5413: Tensor[(432), uint8], %var_5417: float32, %var_5418: Tensor[(864), uint16]) -> (Tensor[(7, 16, 7), float32], Tensor[(11, 12, 11), float32], Tensor[(6, 12, 6), bool], Tensor[(432), uint8], float32, Tensor[(864), uint16], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) {
  %466 = @func_5215() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %467 = @func_4772() /* ty=(Tensor[(432), uint8], Tensor[(11, 12, 11), bool], Tensor[(11, 12, 11), bool], bool) */;
  %468 = %467.1;
  %469 = cast(%468, dtype="float32") /* ty=Tensor[(11, 12, 11), float32] */;
  %470 = cast(%var_5413, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %471 = cast(%var_5413, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %472 = reshape(%470, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), uint8] */;
  %473 = reshape(%471, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), uint8] */;
  %474 = cast(%var_5417, dtype="float32") /* ty=float32 */;
  %475 = cast(%var_5418, dtype="uint16") /* ty=Tensor[(864), uint16] */;
  %476 = reshape(%474, newshape=[]) /* ty=float32 */;
  %477 = reshape(%475, newshape=[864]) /* ty=Tensor[(864), uint16] */;
  %478 = @func_5312(%476, %477) /* ty=(Tensor[(7, 14, 11), bool], Tensor[(7, 14, 11), float32], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64], Tensor[(240), uint32], Tensor[(12, 6, 12), uint16], Tensor[(864), uint16]) */;
  %479 = @func_5215() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %480 = cast(%var_5417, dtype="float32") /* ty=float32 */;
  %481 = cast(%var_5418, dtype="uint16") /* ty=Tensor[(864), uint16] */;
  %482 = reshape(%480, newshape=[]) /* ty=float32 */;
  %483 = reshape(%481, newshape=[864]) /* ty=Tensor[(864), uint16] */;
  %484 = @func_5312(%482, %483) /* ty=(Tensor[(7, 14, 11), bool], Tensor[(7, 14, 11), float32], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64], Tensor[(240), uint32], Tensor[(12, 6, 12), uint16], Tensor[(864), uint16]) */;
  %485 = %484.4;
  %486 = cast(%485, dtype="float32") /* ty=Tensor[(7, 16, 7), float32] */;
  %487 = rsqrt(%486) /* ty=Tensor[(7, 16, 7), float32] */;
  %488 = cast(%487, dtype="float64") /* ty=Tensor[(7, 16, 7), float64] */;
  %489 = %466.0;
  %490 = atan(%469) /* ty=Tensor[(11, 12, 11), float32] */;
  %491 = @func_1019(%472, %473) /* ty=Tensor[(6, 12, 6), bool] */;
  %492 = %478.3;
  %493 = %479.0;
  %494 = sqrt(%488) /* ty=Tensor[(7, 16, 7), float64] */;
  (%489, %490, %491, %var_5413, %var_5417, %var_5418, %492, %493, %494)
}

def @func_8396() -> (Tensor[(4, 196), uint8], Tensor[(7, 16, 7), float32]) {
  %495 = @func_4510() /* ty=(Tensor[(8, 7, 11), float64], Tensor[(7, 16, 7), float64], Tensor[(4, 196), float64], Tensor[(240), uint32]) */;
  %496 = %495.2;
  %497 = cast(%496, dtype="float32") /* ty=Tensor[(4, 196), float32] */;
  %498 = sigmoid(%497) /* ty=Tensor[(4, 196), float32] */;
  %499 = cast(%496, dtype="uint8") /* ty=Tensor[(4, 196), uint8] */;
  %500 = shape_of(%498, dtype="int32") /* ty=Tensor[(2), int32] */;
  %501 = cast(%498, dtype="uint8") /* ty=Tensor[(4, 196), uint8] */;
  %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %503 = @func_5215() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %504 = bitwise_and(%501, %502) /* ty=Tensor[(4, 196), uint8] */;
  %505 = %503.0;
  (%504, %505)
}

def @func_5774() -> (Tensor[(7, 16, 7), float64],) {
  %506 = @func_4853() /* ty=(Tensor[(432), uint8], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) */;
  %507 = %506.2;
  (%507,)
}

def @func_11623() -> (Tensor[(7, 16, 7), float64], Tensor[(240), uint32]) {
  %508 = @func_6119() /* ty=(Tensor[(6, 12, 6), bool], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64]) */;
  %509 = @func_5336() /* ty=(Tensor[(240), uint32],) */;
  %510 = %508.2;
  %511 = %509.0;
  (%510, %511)
}

def @func_8886() -> (Tensor[(180), int8],) {
  %512 = @func_7863() /* ty=(Tensor[(240), uint32], Tensor[(5, 3, 16), uint32], Tensor[(7, 16, 7), float32], Tensor[(784), float64], Tensor[(90), int8], Tensor[(180), int8]) */;
  %513 = %512.5;
  (%513,)
}

def @func_11578() -> Tensor[(7, 16, 7), float64] {
  %514 = @func_8267() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %514.0
}

def @func_6753(%var_6748: Tensor[(216, 2), uint8]) -> (Tensor[(7, 16, 7), float64], Tensor[(9), float32], Tensor[(10, 105), int8], Tensor[(216, 2), uint8]) {
  %515 = @func_6656() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %516 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 105), int8] */, dtype="int8") /* ty=Tensor[(10, 105), int8] */;
  %517 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 105), int8] */, dtype="int8") /* ty=Tensor[(10, 105), int8] */;
  %518 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 105), int8] */, dtype="int8") /* ty=Tensor[(10, 105), int8] */;
  %519 = cast(%var_6748, dtype="uint8") /* ty=Tensor[(216, 2), uint8] */;
  %520 = reshape(%516, newshape=[15, 5, 14]) /* ty=Tensor[(15, 5, 14), int8] */;
  %521 = reshape(%517, newshape=[15, 5, 14]) /* ty=Tensor[(15, 5, 14), int8] */;
  %522 = reshape(%518, newshape=[15, 5, 14]) /* ty=Tensor[(15, 5, 14), int8] */;
  %523 = reshape(%519, newshape=[432]) /* ty=Tensor[(432), uint8] */;
  %524 = @func_2677(%520, %521, %522, %523) /* ty=(Tensor[(15, 5, 14), float32], Tensor[(6, 12, 6), bool], Tensor[(9), float32], Tensor[(432), uint8], Tensor[(6, 12, 6), bool]) */;
  %525 = %515.0;
  %526 = %524.2;
  (%525, %526, meta[relay.Constant][19] /* ty=Tensor[(10, 105), int8] */, %var_6748)
}

def @func_8726(%var_8718: Tensor[(8, 8, 12), int32], %var_8719: Tensor[(8, 8, 12), int32]) -> Tensor[(8, 8, 12), bool] {
  %527 = cast(%var_8719, dtype="bool") /* ty=Tensor[(8, 8, 12), bool] */;
  %528 = shape_of(%var_8718, dtype="int32") /* ty=Tensor[(3), int32] */;
  %529 = cast(%var_8718, dtype="bool") /* ty=Tensor[(8, 8, 12), bool] */;
  %530 = dyn.reshape(%527, %528, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%529, %530) /* ty=Tensor[(8, 8, 12), bool] */
}

def @func_8110(%var_8056: Tensor[(6, 12, 6), float32], %var_8064: bool, %var_8074: Tensor[(3, 52), uint64], %var_8075: Tensor[(1716), uint64], %var_8102: Tensor[(3, 52), uint64]) -> (Tensor[(11, 12, 11), bool], Tensor[(1716), uint64], Tensor[(6, 12, 6), float64], Tensor[(7, 16, 7), float32], Tensor[(1, 3, 3), float32], Tensor[(3, 52), float32]) {
  %531 = cast(%var_8064, dtype="bool") /* ty=bool */;
  %532 = reshape(%531, newshape=[]) /* ty=bool */;
  %533 = @func_7342() /* ty=(Tensor[(6, 12, 6), float32],) */;
  %534 = %533.0;
  %535 = cast(%var_8056, dtype="float32") /* ty=Tensor[(6, 12, 6), float32] */;
  %536 = shape_of(%534, dtype="int32") /* ty=Tensor[(3), int32] */;
  %537 = cast(%534, dtype="float32") /* ty=Tensor[(6, 12, 6), float32] */;
  %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %539 = subtract(%537, %538) /* ty=Tensor[(6, 12, 6), float32] */;
  %540 = cast(%539, dtype="float64") /* ty=Tensor[(6, 12, 6), float64] */;
  %541 = shape_of(%534, dtype="int32") /* ty=Tensor[(3), int32] */;
  %542 = cast(%534, dtype="float64") /* ty=Tensor[(6, 12, 6), float64] */;
  %543 = dyn.reshape(%540, %541, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %544 = @func_7360() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %545 = cast(%var_8074, dtype="uint64") /* ty=Tensor[(3, 52), uint64] */;
  %546 = cast(%var_8075, dtype="uint64") /* ty=Tensor[(1716), uint64] */;
  %547 = reshape(%545, newshape=[12, 1, 13]) /* ty=Tensor[(12, 1, 13), uint64] */;
  %548 = reshape(%546, newshape=[12, 11, 13]) /* ty=Tensor[(12, 11, 13), uint64] */;
  %549 = @func_1658(%547, %548) /* ty=(Tensor[(12, 11, 13), uint64], Tensor[(6, 12, 6), bool], Tensor[(9), float32], Tensor[(432), uint8], Tensor[(1, 3, 3), float32]) */;
  %550 = %549.4;
  %551 = cast(%550, dtype="float32") /* ty=Tensor[(1, 3, 3), float32] */;
  %552 = cast(%var_8064, dtype="float32") /* ty=float32 */;
  %553 = cast(%var_8102, dtype="float32") /* ty=Tensor[(3, 52), float32] */;
  %554 = shape_of(%var_8074, dtype="int32") /* ty=Tensor[(2), int32] */;
  %555 = cast(%var_8074, dtype="float32") /* ty=Tensor[(3, 52), float32] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %557 = @func_3774(%532) /* ty=Tensor[(11, 12, 11), bool] */;
  %558 = floor_mod(%542, %543) /* ty=Tensor[(6, 12, 6), float64] */;
  %559 = %544.0;
  %560 = power(%551, %552) /* ty=Tensor[(1, 3, 3), float32] */;
  %561 = floor_divide(%555, %556) /* ty=Tensor[(3, 52), float32] */;
  (%557, %var_8075, %558, %559, %560, %561)
}

def @func_12908() -> Tensor[(432), uint8] {
  %562 = @func_8985() /* ty=(Tensor[(432), uint8], Tensor[(7, 16, 7), float32]) */;
  %562.0
}

def @func_7342() -> (Tensor[(6, 12, 6), float32],) {
  %563 = @func_5058() /* ty=(Tensor[(6, 12, 6), bool], Tensor[(6, 12, 6), float32]) */;
  %564 = %563.1;
  (%564,)
}

def @func_13549(%var_13547: Tensor[(168), uint16]) -> (Tensor[(4, 196), float64], Tensor[(14, 12, 1), float64], Tensor[(168), uint16]) {
  %565 = @func_5716() /* ty=(Tensor[(4, 196), float64],) */;
  %566 = %565.0;
  %567 = cast(%566, dtype="float64") /* ty=Tensor[(4, 196), float64] */;
  %568 = asinh(%567) /* ty=Tensor[(4, 196), float64] */;
  %569 = cast(%568, dtype="float64") /* ty=Tensor[(4, 196), float64] */;
  %570 = cast(%var_13547, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %571 = reshape(%570, newshape=[14, 12, 1]) /* ty=Tensor[(14, 12, 1), uint16] */;
  %572 = @func_9757(%571) /* ty=(Tensor[(14, 12, 1), uint16], Tensor[(14, 12, 1), float64]) */;
  %573 = exp(%569) /* ty=Tensor[(4, 196), float64] */;
  %574 = %572.1;
  (%573, %574, %var_13547)
}

def @func_6529() -> (Tensor[(7, 16, 7), float32],) {
  %575 = @func_6273() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %576 = %575.0;
  (%576,)
}

def @func_13105() -> (Tensor[(8, 7, 11), float32], Tensor[(7, 16, 7), float64]) {
  %577 = @func_7812() /* ty=(Tensor[(8, 7, 11), float32], Tensor[(7, 16, 7), float32]) */;
  %578 = %577.0;
  %579 = @func_12733() /* ty=Tensor[(7, 16, 7), float64] */;
  (%578, %579)
}

def @func_7812() -> (Tensor[(8, 7, 11), float32], Tensor[(7, 16, 7), float32]) {
  %580 = @func_7537() /* ty=(Tensor[(432), uint8], Tensor[(8, 7, 11), float64]) */;
  %581 = %580.1;
  %582 = cast(%581, dtype="float32") /* ty=Tensor[(8, 7, 11), float32] */;
  %583 = @func_6499() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32]) */;
  %584 = atan(%582) /* ty=Tensor[(8, 7, 11), float32] */;
  %585 = %583.1;
  (%584, %585)
}

def @func_10249() -> Tensor[(7, 16, 7), float32] {
  %586 = @func_9792() /* ty=(Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) */;
  %586.0
}

def @func_7537() -> (Tensor[(432), uint8], Tensor[(8, 7, 11), float64]) {
  %587 = @func_6083() /* ty=(Tensor[(11, 12, 11), bool], Tensor[(432), uint8]) */;
  %588 = @func_7264() /* ty=(Tensor[(432), uint8], Tensor[(8, 7, 11), float64]) */;
  %589 = %587.1;
  %590 = %588.1;
  (%589, %590)
}

def @func_11034(%var_11028: Tensor[(432), uint8]) -> (Tensor[(7, 16, 7), float32], Tensor[(6, 12, 6), bool], Tensor[(432), uint8]) {
  %591 = @func_5215() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %592 = cast(%var_11028, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %593 = cast(%var_11028, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %594 = reshape(%592, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), uint8] */;
  %595 = reshape(%593, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), uint8] */;
  %596 = %591.0;
  %597 = @func_1019(%594, %595) /* ty=Tensor[(6, 12, 6), bool] */;
  (%596, %597, %var_11028)
}

def @func_13485() -> Tensor[(7, 16, 7), float32] {
  %598 = @func_6273() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %598.0
}

def @func_7777(%var_7774: Tensor[(225), int8]) -> (Tensor[(6, 12, 6), float64], Tensor[(7, 16, 7), float32], Tensor[(5, 3, 15), int8], Tensor[(225), int8]) {
  %599 = @func_6119() /* ty=(Tensor[(6, 12, 6), bool], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64]) */;
  %600 = %599.0;
  %601 = cast(%600, dtype="float64") /* ty=Tensor[(6, 12, 6), float64] */;
  %602 = @func_4853() /* ty=(Tensor[(432), uint8], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) */;
  %603 = cast(%var_7774, dtype="int8") /* ty=Tensor[(225), int8] */;
  %604 = reshape(%603, newshape=[5, 3, 15]) /* ty=Tensor[(5, 3, 15), int8] */;
  %605 = log(%601) /* ty=Tensor[(6, 12, 6), float64] */;
  %606 = %602.1;
  %607 = @func_7184(%604) /* ty=Tensor[(5, 3, 15), int8] */;
  (%605, %606, %607, %var_7774)
}

def @func_8182() -> Tensor[(7, 16, 7), float64] {
  @func_5192() /* ty=Tensor[(7, 16, 7), float64] */
}

def @func_8755() -> Tensor[(240), uint32] {
  %608 = @func_7863() /* ty=(Tensor[(240), uint32], Tensor[(5, 3, 16), uint32], Tensor[(7, 16, 7), float32], Tensor[(784), float64], Tensor[(90), int8], Tensor[(180), int8]) */;
  %608.0
}

def @func_10393(%var_10366: Tensor[(7, 8, 6), float32]) -> (Tensor[(7, 8, 6), float32], Tensor[(240), uint32]) {
  %609 = cast(%var_10366, dtype="float32") /* ty=Tensor[(7, 8, 6), float32] */;
  %610 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(7, 8, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %611 = cast(meta[relay.Constant][20] /* ty=Tensor[(7, 8, 6), float32] */, dtype="float32") /* ty=Tensor[(7, 8, 6), float32] */;
  %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %613 = floor_mod(%611, %612) /* ty=Tensor[(7, 8, 6), float32] */;
  %614 = @func_6896() /* ty=Tensor[(240), uint32] */;
  (%613, %614)
}

def @func_10186() -> (Tensor[(11, 12, 11), float32], Tensor[(11, 12, 11), float64], Tensor[(7, 16, 7), float32]) {
  %615 = @func_4772() /* ty=(Tensor[(432), uint8], Tensor[(11, 12, 11), bool], Tensor[(11, 12, 11), bool], bool) */;
  %616 = %615.1;
  %617 = cast(meta[relay.Constant][21] /* ty=Tensor[(11, 12, 11), bool] */, dtype="float32") /* ty=Tensor[(11, 12, 11), float32] */;
  %618 = shape_of(%616, dtype="int32") /* ty=Tensor[(3), int32] */;
  %619 = cast(%616, dtype="float32") /* ty=Tensor[(11, 12, 11), float32] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %621 = cast(meta[relay.Constant][21] /* ty=Tensor[(11, 12, 11), bool] */, dtype="float64") /* ty=Tensor[(11, 12, 11), float64] */;
  %622 = @func_6499() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32]) */;
  %623 = power(%619, %620) /* ty=Tensor[(11, 12, 11), float32] */;
  %624 = sigmoid(%621) /* ty=Tensor[(11, 12, 11), float64] */;
  %625 = %622.1;
  (%623, %624, %625)
}

def @func_7616() -> (Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float32]) {
  %626 = @func_6529() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %627 = @func_6832() /* ty=Tensor[(7, 16, 7), float64] */;
  %628 = %626.0;
  (%627, %628)
}

def @func_10596() -> (Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64], Tensor[(240), uint32], Tensor[(11, 12, 11), bool]) {
  %629 = @func_9104() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %630 = @func_9043() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %631 = @func_8798() /* ty=(bool, Tensor[(11, 12, 11), bool], Tensor[(5, 3, 16), uint32], Tensor[(240), uint32]) */;
  %632 = @func_10249() /* ty=Tensor[(7, 16, 7), float32] */;
  %633 = %629.0;
  %634 = %630.0;
  %635 = @func_8755() /* ty=Tensor[(240), uint32] */;
  %636 = %631.1;
  (%632, %633, %634, %635, %636)
}

def @func_13244() -> (Tensor[(7, 16, 7), float32], Tensor[(8, 7, 11), float64]) {
  %637 = @func_12403() /* ty=(Tensor[(240), uint32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) */;
  %638 = @func_11278() /* ty=(Tensor[(8, 7, 11), float64],) */;
  %639 = %637.1;
  %640 = %638.0;
  (%639, %640)
}

def @func_2677(%var_2637: Tensor[(15, 5, 14), int8], %var_2638: Tensor[(15, 5, 14), int8], %var_2642: Tensor[(15, 5, 14), int8], %var_2650: Tensor[(432), uint8]) -> (Tensor[(15, 5, 14), float32], Tensor[(6, 12, 6), bool], Tensor[(9), float32], Tensor[(432), uint8], Tensor[(6, 12, 6), bool]) {
  %641 = cast(%var_2638, dtype="int8") /* ty=Tensor[(15, 5, 14), int8] */;
  %642 = shape_of(%var_2637, dtype="int32") /* ty=Tensor[(3), int32] */;
  %643 = cast(%var_2637, dtype="int8") /* ty=Tensor[(15, 5, 14), int8] */;
  %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %645 = right_shift(%643, %644) /* ty=Tensor[(15, 5, 14), int8] */;
  %646 = cast(%var_2642, dtype="float32") /* ty=Tensor[(15, 5, 14), float32] */;
  %647 = shape_of(%645, dtype="int32") /* ty=Tensor[(3), int32] */;
  %648 = cast(%645, dtype="float32") /* ty=Tensor[(15, 5, 14), float32] */;
  %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %650 = cast(meta[relay.Constant][22] /* ty=Tensor[(9), float32] */, dtype="float32") /* ty=Tensor[(9), float32] */;
  %651 = cast(%var_2650, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %652 = reshape(%650, newshape=[1, 3, 3]) /* ty=Tensor[(1, 3, 3), float32] */;
  %653 = reshape(%651, newshape=[216, 2]) /* ty=Tensor[(216, 2), uint8] */;
  %654 = @func_1531(%652, %653) /* ty=(Tensor[(6, 12, 6), bool], Tensor[(216, 2), uint8], Tensor[(1, 3, 3), float32], Tensor[(1, 3, 3), float64]) */;
  %655 = %654.0;
  %656 = cast(%655, dtype="uint8") /* ty=Tensor[(6, 12, 6), uint8] */;
  %657 = cast(%var_2650, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %658 = reshape(%656, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), uint8] */;
  %659 = reshape(%657, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), uint8] */;
  %660 = power(%648, %649) /* ty=Tensor[(15, 5, 14), float32] */;
  %661 = @func_1019(%658, %659) /* ty=Tensor[(6, 12, 6), bool] */;
  (%660, %655, meta[relay.Constant][22] /* ty=Tensor[(9), float32] */, %var_2650, %661)
}

def @func_10934(%var_10929: Tensor[(432), uint8]) -> (Tensor[(7, 16, 7), float64], Tensor[(216, 2), uint8], Tensor[(432), uint8]) {
  %662 = @func_8474() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %663 = cast(%var_10929, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %664 = reshape(%663, newshape=[216, 2]) /* ty=Tensor[(216, 2), uint8] */;
  %665 = @func_6753(%664) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(9), float32], Tensor[(10, 105), int8], Tensor[(216, 2), uint8]) */;
  %666 = %662.0;
  %667 = %665.3;
  (%666, %667, %var_10929)
}

def @func_10064(%var_10037: Tensor[(10, 3, 12), float32]) -> (Tensor[(10, 3, 12), float32], Tensor[(7, 16, 7), float64], Tensor[(1050), int8]) {
  %668 = cast(%var_10037, dtype="float32") /* ty=Tensor[(10, 3, 12), float32] */;
  %669 = cast(meta[relay.Constant][23] /* ty=Tensor[(1050), int8] */, dtype="int8") /* ty=Tensor[(1050), int8] */;
  %670 = reshape(%669, newshape=[1050]) /* ty=Tensor[(1050), int8] */;
  %671 = @func_5981(%670) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(432), uint8], Tensor[(1050), int8], Tensor[(432), uint8]) */;
  %672 = cos(%668) /* ty=Tensor[(10, 3, 12), float32] */;
  %673 = %671.0;
  (%672, %673, meta[relay.Constant][23] /* ty=Tensor[(1050), int8] */)
}

def @func_4728() -> (Tensor[(7, 16, 7), float32],) {
  %674 = @func_4637() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %675 = %674.0;
  %676 = cast(%675, dtype="float32") /* ty=Tensor[(7, 16, 7), float32] */;
  %677 = cos(%676) /* ty=Tensor[(7, 16, 7), float32] */;
  (%677,)
}

def @func_11551(%var_11535: Tensor[(18), float32]) -> (Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float32], Tensor[(18), float32]) {
  %678 = @func_4581() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(6, 12, 6), bool], Tensor[(432), uint8], Tensor[(11, 12, 11), bool], bool) */;
  %679 = cast(%var_11535, dtype="float32") /* ty=Tensor[(18), float32] */;
  %680 = reshape(%679, newshape=[2, 9, 1]) /* ty=Tensor[(2, 9, 1), float32] */;
  %681 = @func_6683(%680) /* ty=(Tensor[(2, 9, 1), float32], Tensor[(7, 16, 7), float32]) */;
  %682 = %678.0;
  %683 = %681.1;
  (%682, %683, %var_11535)
}

def @func_12457() -> (Tensor[(15, 9, 6), float32], Tensor[(240), uint32]) {
  %684 = cast(meta[relay.Constant][24] /* ty=Tensor[(15, 9, 6), float32] */, dtype="float32") /* ty=Tensor[(15, 9, 6), float32] */;
  %685 = @func_10596() /* ty=(Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64], Tensor[(240), uint32], Tensor[(11, 12, 11), bool]) */;
  %686 = sinh(%684) /* ty=Tensor[(15, 9, 6), float32] */;
  %687 = %685.3;
  (%686, %687)
}

def @func_5592(%var_5583: Tensor[(7, 4, 4), float64], %var_5584: Tensor[(7, 4, 4), float64]) -> Tensor[(7, 4, 4), float64] {
  %688 = cast(%var_5584, dtype="float64") /* ty=Tensor[(7, 4, 4), float64] */;
  %689 = shape_of(%var_5583, dtype="int32") /* ty=Tensor[(3), int32] */;
  %690 = cast(%var_5583, dtype="float64") /* ty=Tensor[(7, 4, 4), float64] */;
  %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%690, %691) /* ty=Tensor[(7, 4, 4), float64] */
}

def @func_1019(%var_1014: Tensor[(6, 12, 6), uint8], %var_1015: Tensor[(6, 12, 6), uint8]) -> Tensor[(6, 12, 6), bool] {
  %692 = cast(%var_1015, dtype="bool") /* ty=Tensor[(6, 12, 6), bool] */;
  %693 = shape_of(%var_1014, dtype="int32") /* ty=Tensor[(3), int32] */;
  %694 = cast(%var_1014, dtype="bool") /* ty=Tensor[(6, 12, 6), bool] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%694, %695) /* ty=Tensor[(6, 12, 6), bool] */
}

def @func_10822() -> (Tensor[(7, 16, 7), float32],) {
  %696 = @func_8133() /* ty=(Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64]) */;
  %697 = %696.0;
  (%697,)
}

def @func_7264() -> (Tensor[(432), uint8], Tensor[(8, 7, 11), float64]) {
  %698 = @func_4510() /* ty=(Tensor[(8, 7, 11), float64], Tensor[(7, 16, 7), float64], Tensor[(4, 196), float64], Tensor[(240), uint32]) */;
  %699 = @func_6991() /* ty=Tensor[(432), uint8] */;
  %700 = %698.0;
  (%699, %700)
}

def @func_12570() -> (Tensor[(240), uint32], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64]) {
  %701 = @func_10335() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(8, 7, 11), float64], Tensor[(240), uint32]) */;
  %702 = @func_6656() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %703 = @func_9043() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %704 = %701.2;
  %705 = %702.0;
  %706 = %703.0;
  (%704, %705, %706)
}

def @func_6410(%var_6348: float32) -> (Tensor[(7, 16, 7), float64], float32, Tensor[(864), uint16], Tensor[(7, 16, 7), float32], Tensor[(15, 7, 4), float32], Tensor[(420), float32], Tensor[(7, 16, 7), float64], Tensor[(1050), int8], Tensor[(1050), int8], Tensor[(12, 6, 12), float64]) {
  %707 = @func_4637() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %708 = cast(meta[relay.Constant][26] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %709 = reshape(%708, newshape=[15, 7, 4]) /* ty=Tensor[(15, 7, 4), float32] */;
  %710 = @func_4581() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(6, 12, 6), bool], Tensor[(432), uint8], Tensor[(11, 12, 11), bool], bool) */;
  %711 = cast(meta[relay.Constant][27] /* ty=Tensor[(1050), int8] */, dtype="int8") /* ty=Tensor[(1050), int8] */;
  %712 = reshape(%711, newshape=[1050]) /* ty=Tensor[(1050), int8] */;
  %713 = @func_5981(%712) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(432), uint8], Tensor[(1050), int8], Tensor[(432), uint8]) */;
  %714 = cast(%var_6348, dtype="float32") /* ty=float32 */;
  %715 = cast(meta[relay.Constant][25] /* ty=Tensor[(864), uint16] */, dtype="uint16") /* ty=Tensor[(864), uint16] */;
  %716 = reshape(%714, newshape=[]) /* ty=float32 */;
  %717 = reshape(%715, newshape=[864]) /* ty=Tensor[(864), uint16] */;
  %718 = @func_5312(%716, %717) /* ty=(Tensor[(7, 14, 11), bool], Tensor[(7, 14, 11), float32], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64], Tensor[(240), uint32], Tensor[(12, 6, 12), uint16], Tensor[(864), uint16]) */;
  %719 = %718.6;
  %720 = cast(%719, dtype="float64") /* ty=Tensor[(12, 6, 12), float64] */;
  %721 = %707.0;
  %722 = @func_4611() /* ty=Tensor[(7, 16, 7), float32] */;
  %723 = @func_4431(%709) /* ty=Tensor[(15, 7, 4), float32] */;
  %724 = %710.0;
  %725 = %713.2;
  %726 = cosh(%720) /* ty=Tensor[(12, 6, 12), float64] */;
  (%721, %var_6348, meta[relay.Constant][25] /* ty=Tensor[(864), uint16] */, %722, %723, meta[relay.Constant][26] /* ty=Tensor[(420), float32] */, %724, %725, meta[relay.Constant][27] /* ty=Tensor[(1050), int8] */, %726)
}

def @func_5058() -> (Tensor[(6, 12, 6), bool], Tensor[(6, 12, 6), float32]) {
  %727 = @func_4581() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(6, 12, 6), bool], Tensor[(432), uint8], Tensor[(11, 12, 11), bool], bool) */;
  %728 = %727.1;
  %729 = cast(%728, dtype="uint8") /* ty=Tensor[(6, 12, 6), uint8] */;
  %730 = cast(%728, dtype="uint8") /* ty=Tensor[(6, 12, 6), uint8] */;
  %731 = reshape(%729, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), uint8] */;
  %732 = reshape(%730, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), uint8] */;
  %733 = cast(%728, dtype="float32") /* ty=Tensor[(6, 12, 6), float32] */;
  %734 = @func_1019(%731, %732) /* ty=Tensor[(6, 12, 6), bool] */;
  %735 = exp(%733) /* ty=Tensor[(6, 12, 6), float32] */;
  (%734, %735)
}

def @func_10198() -> Tensor[(7, 16, 7), float32] {
  %736 = @func_6529() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %736.0
}

def @func_10297() -> (Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(432), uint8]) {
  %737 = @func_6529() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %738 = @func_7616() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float32]) */;
  %739 = @func_4581() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(6, 12, 6), bool], Tensor[(432), uint8], Tensor[(11, 12, 11), bool], bool) */;
  %740 = %737.0;
  %741 = %738.1;
  %742 = %739.2;
  (%740, %741, %742)
}

def @func_14119() -> (Tensor[(7, 16, 7), float64],) {
  %743 = @func_8182() /* ty=Tensor[(7, 16, 7), float64] */;
  (%743,)
}

def @func_7863() -> (Tensor[(240), uint32], Tensor[(5, 3, 16), uint32], Tensor[(7, 16, 7), float32], Tensor[(784), float64], Tensor[(90), int8], Tensor[(180), int8]) {
  %744 = @func_6896() /* ty=Tensor[(240), uint32] */;
  %745 = cast(%744, dtype="uint32") /* ty=Tensor[(240), uint32] */;
  %746 = cast(%744, dtype="uint32") /* ty=Tensor[(240), uint32] */;
  %747 = reshape(%745, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), uint32] */;
  %748 = reshape(%746, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), uint32] */;
  %749 = cast(meta[relay.Constant][28] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %750 = cast(meta[relay.Constant][29] /* ty=Tensor[(90), int8] */, dtype="int8") /* ty=Tensor[(90), int8] */;
  %751 = cast(meta[relay.Constant][30] /* ty=Tensor[(180), int8] */, dtype="int8") /* ty=Tensor[(180), int8] */;
  %752 = reshape(%749, newshape=[7, 16, 7]) /* ty=Tensor[(7, 16, 7), float64] */;
  %753 = reshape(%750, newshape=[90]) /* ty=Tensor[(90), int8] */;
  %754 = reshape(%751, newshape=[180]) /* ty=Tensor[(180), int8] */;
  %755 = @func_7476(%752, %753, %754) /* ty=(Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(2, 10, 9), int8], Tensor[(90), int8], Tensor[(180), int8], Tensor[(6, 12, 6), float32]) */;
  %756 = @func_2836(%747, %748) /* ty=Tensor[(5, 3, 16), uint32] */;
  %757 = %755.0;
  (%744, %756, %757, meta[relay.Constant][28] /* ty=Tensor[(784), float64] */, meta[relay.Constant][29] /* ty=Tensor[(90), int8] */, meta[relay.Constant][30] /* ty=Tensor[(180), int8] */)
}

def @func_11447(%var_11407: Tensor[(8, 7, 11), float32]) -> (Tensor[(8, 7, 11), int8], Tensor[(7, 16, 7), float64], Tensor[(8, 7, 11), float64]) {
  %758 = @func_7812() /* ty=(Tensor[(8, 7, 11), float32], Tensor[(7, 16, 7), float32]) */;
  %759 = %758.0;
  %760 = cast(%var_11407, dtype="int8") /* ty=Tensor[(8, 7, 11), int8] */;
  %761 = shape_of(%759, dtype="int32") /* ty=Tensor[(3), int32] */;
  %762 = cast(%759, dtype="int8") /* ty=Tensor[(8, 7, 11), int8] */;
  %763 = dyn.reshape(%760, %761, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %764 = @func_5774() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %765 = cast(%759, dtype="float64") /* ty=Tensor[(8, 7, 11), float64] */;
  %766 = subtract(%762, %763) /* ty=Tensor[(8, 7, 11), int8] */;
  %767 = %764.0;
  %768 = cos(%765) /* ty=Tensor[(8, 7, 11), float64] */;
  (%766, %767, %768)
}

def @func_5563(%var_5538: Tensor[(1, 4, 12), float64]) -> (Tensor[(1, 4, 12), float64], bool) {
  %769 = cast(%var_5538, dtype="float64") /* ty=Tensor[(1, 4, 12), float64] */;
  %770 = @func_4581() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(6, 12, 6), bool], Tensor[(432), uint8], Tensor[(11, 12, 11), bool], bool) */;
  %771 = erf(%769) /* ty=Tensor[(1, 4, 12), float64] */;
  %772 = %770.4;
  (%771, %772)
}

def @func_4853() -> (Tensor[(432), uint8], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) {
  %773 = @func_4772() /* ty=(Tensor[(432), uint8], Tensor[(11, 12, 11), bool], Tensor[(11, 12, 11), bool], bool) */;
  %774 = @func_4637() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %775 = %774.0;
  %776 = cast(%775, dtype="float64") /* ty=Tensor[(7, 16, 7), float64] */;
  %777 = %773.0;
  %778 = @func_4611() /* ty=Tensor[(7, 16, 7), float32] */;
  %779 = sinh(%776) /* ty=Tensor[(7, 16, 7), float64] */;
  (%777, %778, %779)
}

def @func_11587() -> (Tensor[(3, 16, 6), float64],) {
  %780 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 16, 6), float64] */, dtype="float64") /* ty=Tensor[(3, 16, 6), float64] */;
  %781 = erf(%780) /* ty=Tensor[(3, 16, 6), float64] */;
  (%781,)
}

def @func_7692(%var_7684: float32, %var_7685: Tensor[(432, 2), uint16], %var_7690: Tensor[(432), uint8]) -> (Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(864), uint16], float32, Tensor[(432, 2), uint16], Tensor[(6, 12, 6), bool], Tensor[(1050), int8], Tensor[(432), uint8]) {
  %782 = @func_4908() /* ty=(Tensor[(7, 16, 7), float32], Tensor[(11, 12, 11), bool]) */;
  %783 = cast(%var_7684, dtype="float32") /* ty=float32 */;
  %784 = cast(%var_7685, dtype="uint16") /* ty=Tensor[(432, 2), uint16] */;
  %785 = reshape(%783, newshape=[]) /* ty=float32 */;
  %786 = reshape(%784, newshape=[864]) /* ty=Tensor[(864), uint16] */;
  %787 = @func_5312(%785, %786) /* ty=(Tensor[(7, 14, 11), bool], Tensor[(7, 14, 11), float32], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64], Tensor[(240), uint32], Tensor[(12, 6, 12), uint16], Tensor[(864), uint16]) */;
  %788 = cast(meta[relay.Constant][32] /* ty=Tensor[(1050), int8] */, dtype="int8") /* ty=Tensor[(1050), int8] */;
  %789 = cast(meta[relay.Constant][32] /* ty=Tensor[(1050), int8] */, dtype="int8") /* ty=Tensor[(1050), int8] */;
  %790 = cast(meta[relay.Constant][32] /* ty=Tensor[(1050), int8] */, dtype="int8") /* ty=Tensor[(1050), int8] */;
  %791 = cast(%var_7690, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %792 = reshape(%788, newshape=[15, 5, 14]) /* ty=Tensor[(15, 5, 14), int8] */;
  %793 = reshape(%789, newshape=[15, 5, 14]) /* ty=Tensor[(15, 5, 14), int8] */;
  %794 = reshape(%790, newshape=[15, 5, 14]) /* ty=Tensor[(15, 5, 14), int8] */;
  %795 = reshape(%791, newshape=[432]) /* ty=Tensor[(432), uint8] */;
  %796 = @func_2677(%792, %793, %794, %795) /* ty=(Tensor[(15, 5, 14), float32], Tensor[(6, 12, 6), bool], Tensor[(9), float32], Tensor[(432), uint8], Tensor[(6, 12, 6), bool]) */;
  %797 = @func_4611() /* ty=Tensor[(7, 16, 7), float32] */;
  %798 = %782.0;
  %799 = %787.7;
  %800 = %796.4;
  (%797, %798, %799, %var_7684, %var_7685, %800, meta[relay.Constant][32] /* ty=Tensor[(1050), int8] */, %var_7690)
}

def @func_8461() -> (Tensor[(240), uint32], Tensor[(7, 16, 7), float64]) {
  %801 = @func_7965() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %802 = @func_6896() /* ty=Tensor[(240), uint32] */;
  %803 = %801.0;
  (%802, %803)
}

def @func_13802(%var_13784: Tensor[(180), int8]) -> (Tensor[(7, 16, 7), float64], Tensor[(6, 12, 6), float32], Tensor[(90), int8], Tensor[(180), int8], Tensor[(7, 16, 7), float32], Tensor[(1, 3, 3), float32], Tensor[(3, 3), float32]) {
  %804 = @func_7985() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %805 = %804.0;
  %806 = cast(%805, dtype="float64") /* ty=Tensor[(7, 16, 7), float64] */;
  %807 = cast(meta[relay.Constant][33] /* ty=Tensor[(90), int8] */, dtype="int8") /* ty=Tensor[(90), int8] */;
  %808 = cast(%var_13784, dtype="int8") /* ty=Tensor[(180), int8] */;
  %809 = reshape(%806, newshape=[7, 16, 7]) /* ty=Tensor[(7, 16, 7), float64] */;
  %810 = reshape(%807, newshape=[90]) /* ty=Tensor[(90), int8] */;
  %811 = reshape(%808, newshape=[180]) /* ty=Tensor[(180), int8] */;
  %812 = @func_7476(%809, %810, %811) /* ty=(Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(2, 10, 9), int8], Tensor[(90), int8], Tensor[(180), int8], Tensor[(6, 12, 6), float32]) */;
  %813 = @func_11735() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %814 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 3), float32] */, dtype="float32") /* ty=Tensor[(3, 3), float32] */;
  %815 = %812.5;
  %816 = cast(%815, dtype="uint8") /* ty=Tensor[(6, 12, 6), uint8] */;
  %817 = reshape(%814, newshape=[9, 1]) /* ty=Tensor[(9, 1), float32] */;
  %818 = reshape(%816, newshape=[432]) /* ty=Tensor[(432), uint8] */;
  %819 = @func_8936(%817, %818) /* ty=(Tensor[(180), int8], Tensor[(1, 3, 3), float32], Tensor[(9, 1), float32], Tensor[(432), uint8], Tensor[(8, 7, 11), float32]) */;
  %820 = %813.0;
  %821 = %819.1;
  (%805, %815, meta[relay.Constant][33] /* ty=Tensor[(90), int8] */, %var_13784, %820, %821, meta[relay.Constant][34] /* ty=Tensor[(3, 3), float32] */)
}

def @main(%var_14296: Tensor[(2, 14, 4), float32]) -> (Tensor[(2, 14, 4), int8], Tensor[(7, 16, 7), uint8], Tensor[(784), float64], Tensor[(2, 14, 4), uint8]) {
  %822 = cast(meta[relay.Constant][35] /* ty=Tensor[(2, 14, 4), float32] */, dtype="float32") /* ty=Tensor[(2, 14, 4), float32] */;
  %823 = asin(%822) /* ty=Tensor[(2, 14, 4), float32] */;
  %824 = cast(%823, dtype="int8") /* ty=Tensor[(2, 14, 4), int8] */;
  %825 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(2, 14, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %826 = cast(meta[relay.Constant][35] /* ty=Tensor[(2, 14, 4), float32] */, dtype="int8") /* ty=Tensor[(2, 14, 4), int8] */;
  %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %828 = cast(meta[relay.Constant][36] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %829 = reshape(%828, newshape=[7, 16, 7]) /* ty=Tensor[(7, 16, 7), float64] */;
  %830 = @func_6193(%829) /* ty=(Tensor[(4, 196), float64], Tensor[(7, 16, 7), uint8]) */;
  %831 = cast(meta[relay.Constant][35] /* ty=Tensor[(2, 14, 4), float32] */, dtype="float32") /* ty=Tensor[(2, 14, 4), float32] */;
  %832 = cos(%831) /* ty=Tensor[(2, 14, 4), float32] */;
  %833 = cast(%var_14296, dtype="uint8") /* ty=Tensor[(2, 14, 4), uint8] */;
  %834 = shape_of(%832, dtype="int32") /* ty=Tensor[(3), int32] */;
  %835 = cast(%832, dtype="uint8") /* ty=Tensor[(2, 14, 4), uint8] */;
  %836 = dyn.reshape(%833, %834, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %837 = logical_xor(%826, %827) /* ty=Tensor[(2, 14, 4), int8] */;
  %838 = %830.1;
  %839 = subtract(%835, %836) /* ty=Tensor[(2, 14, 4), uint8] */;
  (%837, %838, meta[relay.Constant][36] /* ty=Tensor[(784), float64] */, %839)
}

def @func_3670(%var_3640: Tensor[(7, 16, 7), float64], %var_3661: Tensor[(240), uint32]) -> (Tensor[(7, 16, 7), float64], Tensor[(5, 3, 16), uint32], Tensor[(240), uint32]) {
  %840 = cast(%var_3640, dtype="float64") /* ty=Tensor[(7, 16, 7), float64] */;
  %841 = cast(%var_3661, dtype="uint32") /* ty=Tensor[(240), uint32] */;
  %842 = cast(%var_3661, dtype="uint32") /* ty=Tensor[(240), uint32] */;
  %843 = reshape(%841, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), uint32] */;
  %844 = reshape(%842, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), uint32] */;
  %845 = acos(%840) /* ty=Tensor[(7, 16, 7), float64] */;
  %846 = @func_2836(%843, %844) /* ty=Tensor[(5, 3, 16), uint32] */;
  (%845, %846, %var_3661)
}

def @func_9929(%var_9920: Tensor[(1, 9), float32]) -> (Tensor[(7, 16, 7), float32], Tensor[(432), uint8], Tensor[(1, 9), float32], Tensor[(432), uint8], Tensor[(7, 16, 7), float32]) {
  %847 = @func_4728() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %848 = cast(%var_9920, dtype="float32") /* ty=Tensor[(1, 9), float32] */;
  %849 = cast(meta[relay.Constant][37] /* ty=Tensor[(432), uint8] */, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %850 = reshape(%848, newshape=[9, 1]) /* ty=Tensor[(9, 1), float32] */;
  %851 = reshape(%849, newshape=[432]) /* ty=Tensor[(432), uint8] */;
  %852 = @func_8936(%850, %851) /* ty=(Tensor[(180), int8], Tensor[(1, 3, 3), float32], Tensor[(9, 1), float32], Tensor[(432), uint8], Tensor[(8, 7, 11), float32]) */;
  %853 = @func_4908() /* ty=(Tensor[(7, 16, 7), float32], Tensor[(11, 12, 11), bool]) */;
  %854 = %847.0;
  %855 = %852.3;
  %856 = %853.0;
  (%854, %855, %var_9920, meta[relay.Constant][37] /* ty=Tensor[(432), uint8] */, %856)
}

def @func_5861(%var_5854: Tensor[(11, 10, 5), float32]) -> Tensor[(11, 10, 5), float32] {
  %857 = cast(meta[relay.Constant][38] /* ty=Tensor[(11, 10, 5), float32] */, dtype="float32") /* ty=Tensor[(11, 10, 5), float32] */;
  %858 = shape_of(%var_5854, dtype="int32") /* ty=Tensor[(3), int32] */;
  %859 = cast(%var_5854, dtype="float32") /* ty=Tensor[(11, 10, 5), float32] */;
  %860 = dyn.reshape(%857, %858, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%859, %860) /* ty=Tensor[(11, 10, 5), float32] */
}

def @func_3774(%var_3757: bool) -> Tensor[(11, 12, 11), bool] {
  %861 = cast(%var_3757, dtype="bool") /* ty=bool */;
  %862 = cast(meta[relay.Constant][39] /* ty=Tensor[(11, 12, 11), bool] */, dtype="bool") /* ty=Tensor[(11, 12, 11), bool] */;
  logical_and(%861, %862) /* ty=Tensor[(11, 12, 11), bool] */
}

def @func_4581() -> (Tensor[(7, 16, 7), float64], Tensor[(6, 12, 6), bool], Tensor[(432), uint8], Tensor[(11, 12, 11), bool], bool) {
  %863 = @func_4510() /* ty=(Tensor[(8, 7, 11), float64], Tensor[(7, 16, 7), float64], Tensor[(4, 196), float64], Tensor[(240), uint32]) */;
  %864 = cast(meta[relay.Constant][40] /* ty=Tensor[(432), uint8] */, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %865 = cast(meta[relay.Constant][40] /* ty=Tensor[(432), uint8] */, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %866 = reshape(%864, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), uint8] */;
  %867 = reshape(%865, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), uint8] */;
  %868 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %869 = reshape(%868, newshape=[]) /* ty=bool */;
  %870 = %863.1;
  %871 = @func_1019(%866, %867) /* ty=Tensor[(6, 12, 6), bool] */;
  %872 = @func_3774(%869) /* ty=Tensor[(11, 12, 11), bool] */;
  (%870, %871, meta[relay.Constant][40] /* ty=Tensor[(432), uint8] */, %872, True /* ty=bool */)
}

def @func_4431(%var_4428: Tensor[(15, 7, 4), float32]) -> Tensor[(15, 7, 4), float32] {
  %873 = cast(%var_4428, dtype="float32") /* ty=Tensor[(15, 7, 4), float32] */;
  rsqrt(%873) /* ty=Tensor[(15, 7, 4), float32] */
}

def @func_9632() -> (Tensor[(180), int8],) {
  %874 = @func_8886() /* ty=(Tensor[(180), int8],) */;
  %875 = %874.0;
  (%875,)
}

def @func_14108(%var_14081: Tensor[(432), uint8]) -> (Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64], Tensor[(6, 12, 6), bool], Tensor[(432), uint8]) {
  %876 = @func_10596() /* ty=(Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64], Tensor[(240), uint32], Tensor[(11, 12, 11), bool]) */;
  %877 = @func_9104() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %878 = %877.0;
  %879 = cast(%878, dtype="float64") /* ty=Tensor[(7, 16, 7), float64] */;
  %880 = cast(%var_14081, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %881 = cast(%var_14081, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %882 = reshape(%880, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), uint8] */;
  %883 = reshape(%881, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), uint8] */;
  %884 = %876.0;
  %885 = atanh(%879) /* ty=Tensor[(7, 16, 7), float64] */;
  %886 = @func_1019(%882, %883) /* ty=Tensor[(6, 12, 6), bool] */;
  (%884, %885, %886, %var_14081)
}

def @func_4908() -> (Tensor[(7, 16, 7), float32], Tensor[(11, 12, 11), bool]) {
  %887 = @func_4853() /* ty=(Tensor[(432), uint8], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) */;
  %888 = @func_4772() /* ty=(Tensor[(432), uint8], Tensor[(11, 12, 11), bool], Tensor[(11, 12, 11), bool], bool) */;
  %889 = %887.1;
  %890 = %888.2;
  (%889, %890)
}

def @func_11087(%var_11078: Tensor[(7, 16, 7), float32]) -> Tensor[(7, 16, 7), bool] {
  %891 = @func_9104() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %892 = %891.0;
  %893 = cast(%var_11078, dtype="bool") /* ty=Tensor[(7, 16, 7), bool] */;
  %894 = shape_of(%892, dtype="int32") /* ty=Tensor[(3), int32] */;
  %895 = cast(%892, dtype="bool") /* ty=Tensor[(7, 16, 7), bool] */;
  %896 = dyn.reshape(%893, %894, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%895, %896) /* ty=Tensor[(7, 16, 7), bool] */
}

def @func_5933(%var_5902: Tensor[(504, 2), float32]) -> (Tensor[(7, 16, 7), float64], Tensor[(16, 7, 9), uint64], Tensor[(504, 2), uint16]) {
  %897 = @func_5841() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %898 = cast(%var_5902, dtype="float32") /* ty=Tensor[(504, 2), float32] */;
  %899 = reshape(%898, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), float32] */;
  %900 = @func_4684(%899) /* ty=(Tensor[(16, 7, 9), float32], Tensor[(7, 16, 7), float32]) */;
  %901 = %900.0;
  %902 = cast(%901, dtype="uint64") /* ty=Tensor[(16, 7, 9), uint64] */;
  %903 = shape_of(%var_5902, dtype="int32") /* ty=Tensor[(2), int32] */;
  %904 = cast(%var_5902, dtype="uint64") /* ty=Tensor[(504, 2), uint64] */;
  %905 = dyn.reshape(%902, %903, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %906 = bitwise_or(%904, %905) /* ty=Tensor[(504, 2), uint64] */;
  %907 = cast(%906, dtype="float32") /* ty=Tensor[(504, 2), float32] */;
  %908 = atan(%907) /* ty=Tensor[(504, 2), float32] */;
  %909 = cast(%908, dtype="uint64") /* ty=Tensor[(504, 2), uint64] */;
  %910 = shape_of(%901, dtype="int32") /* ty=Tensor[(3), int32] */;
  %911 = cast(%901, dtype="uint64") /* ty=Tensor[(16, 7, 9), uint64] */;
  %912 = dyn.reshape(%909, %910, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %913 = cast(%901, dtype="uint16") /* ty=Tensor[(16, 7, 9), uint16] */;
  %914 = shape_of(%908, dtype="int32") /* ty=Tensor[(2), int32] */;
  %915 = cast(%908, dtype="uint16") /* ty=Tensor[(504, 2), uint16] */;
  %916 = dyn.reshape(%913, %914, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %917 = %897.0;
  %918 = minimum(%911, %912) /* ty=Tensor[(16, 7, 9), uint64] */;
  %919 = right_shift(%915, %916) /* ty=Tensor[(504, 2), uint16] */;
  (%917, %918, %919)
}

def @func_9043() -> (Tensor[(7, 16, 7), float64],) {
  %920 = @func_8025() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(432), uint8]) */;
  %921 = %920.0;
  (%921,)
}

def @func_6683(%var_6674: Tensor[(2, 9, 1), float32]) -> (Tensor[(2, 9, 1), float32], Tensor[(7, 16, 7), float32]) {
  %922 = cast(%var_6674, dtype="float32") /* ty=Tensor[(2, 9, 1), float32] */;
  %923 = @func_5215() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %924 = tan(%922) /* ty=Tensor[(2, 9, 1), float32] */;
  %925 = %923.0;
  (%924, %925)
}

def @func_11469() -> (Tensor[(8, 7, 11), float64], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32]) {
  %926 = @func_4510() /* ty=(Tensor[(8, 7, 11), float64], Tensor[(7, 16, 7), float64], Tensor[(4, 196), float64], Tensor[(240), uint32]) */;
  %927 = @func_10861() /* ty=(Tensor[(432), uint8], Tensor[(240), uint32], Tensor[(7, 16, 7), float32]) */;
  %928 = %926.0;
  %929 = @func_5852() /* ty=Tensor[(7, 16, 7), float32] */;
  %930 = @func_10249() /* ty=Tensor[(7, 16, 7), float32] */;
  %931 = %927.2;
  (%928, %929, %930, %931)
}

def @func_9557() -> Tensor[(7, 16, 7), float64] {
  %932 = @func_7965() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %932.0
}

def @func_7985() -> (Tensor[(7, 16, 7), float64],) {
  %933 = @func_7616() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float32]) */;
  %934 = %933.0;
  (%934,)
}

def @func_13905() -> (Tensor[(8, 7, 11), float64], Tensor[(7, 16, 7), float64]) {
  %935 = @func_11278() /* ty=(Tensor[(8, 7, 11), float64],) */;
  %936 = %935.0;
  %937 = @func_9557() /* ty=Tensor[(7, 16, 7), float64] */;
  (%936, %937)
}

def @func_12027() -> (Tensor[(7, 16, 7), float32],) {
  %938 = @func_6499() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32]) */;
  %939 = %938.3;
  (%939,)
}

def @func_11640() -> Tensor[(7, 16, 7), float32] {
  %940 = @func_11517() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %940.0
}

def @func_8936(%var_8919: Tensor[(9, 1), float32], %var_8920: Tensor[(432), uint8]) -> (Tensor[(180), int8], Tensor[(1, 3, 3), float32], Tensor[(9, 1), float32], Tensor[(432), uint8], Tensor[(8, 7, 11), float32]) {
  %941 = @func_8886() /* ty=(Tensor[(180), int8],) */;
  %942 = cast(%var_8919, dtype="float32") /* ty=Tensor[(9, 1), float32] */;
  %943 = cast(%var_8920, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %944 = reshape(%942, newshape=[1, 3, 3]) /* ty=Tensor[(1, 3, 3), float32] */;
  %945 = reshape(%943, newshape=[216, 2]) /* ty=Tensor[(216, 2), uint8] */;
  %946 = @func_1531(%944, %945) /* ty=(Tensor[(6, 12, 6), bool], Tensor[(216, 2), uint8], Tensor[(1, 3, 3), float32], Tensor[(1, 3, 3), float64]) */;
  %947 = @func_7812() /* ty=(Tensor[(8, 7, 11), float32], Tensor[(7, 16, 7), float32]) */;
  %948 = %947.0;
  %949 = cast(%948, dtype="float32") /* ty=Tensor[(8, 7, 11), float32] */;
  %950 = %941.0;
  %951 = %946.2;
  %952 = sinh(%949) /* ty=Tensor[(8, 7, 11), float32] */;
  (%950, %951, %var_8919, %var_8920, %952)
}

def @func_12050() -> Tensor[(7, 16, 7), float64] {
  @func_11578() /* ty=Tensor[(7, 16, 7), float64] */
}

def @func_7184(%var_7166: Tensor[(5, 3, 15), int8]) -> Tensor[(5, 3, 15), int8] {
  %953 = cast(%var_7166, dtype="int8") /* ty=Tensor[(5, 3, 15), int8] */;
  %954 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(5, 3, 15), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %955 = cast(meta[relay.Constant][41] /* ty=Tensor[(5, 3, 15), int8] */, dtype="int8") /* ty=Tensor[(5, 3, 15), int8] */;
  %956 = dyn.reshape(%953, %954, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_xor(%955, %956) /* ty=Tensor[(5, 3, 15), int8] */
}

def @func_9757(%var_9732: Tensor[(14, 12, 1), uint16]) -> (Tensor[(14, 12, 1), uint16], Tensor[(14, 12, 1), float64]) {
  %957 = cast(meta[relay.Constant][42] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %958 = cast(%var_9732, dtype="uint16") /* ty=Tensor[(14, 12, 1), uint16] */;
  %959 = cast(%var_9732, dtype="float64") /* ty=Tensor[(14, 12, 1), float64] */;
  %960 = bitwise_or(%957, %958) /* ty=Tensor[(14, 12, 1), uint16] */;
  %961 = log2(%959) /* ty=Tensor[(14, 12, 1), float64] */;
  (%960, %961)
}

def @func_10970(%var_10952: Tensor[(10, 1, 10), float32]) -> Tensor[(10, 1, 10), float32] {
  %962 = cast(%var_10952, dtype="float32") /* ty=Tensor[(10, 1, 10), float32] */;
  cosh(%962) /* ty=Tensor[(10, 1, 10), float32] */
}

def @func_6926() -> Tensor[(240), uint32] {
  %963 = @func_5336() /* ty=(Tensor[(240), uint32],) */;
  %963.0
}

def @func_8985() -> (Tensor[(432), uint8], Tensor[(7, 16, 7), float32]) {
  %964 = @func_6273() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %965 = @func_6991() /* ty=Tensor[(432), uint8] */;
  %966 = %964.0;
  (%965, %966)
}

def @func_9255(%var_9244: Tensor[(432), uint8]) -> (Tensor[(7, 16, 7), float32], Tensor[(8, 7, 11), float64], Tensor[(1050), int8], Tensor[(432), uint8]) {
  %967 = @func_9104() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %968 = cast(meta[relay.Constant][43] /* ty=Tensor[(1050), int8] */, dtype="int8") /* ty=Tensor[(1050), int8] */;
  %969 = cast(%var_9244, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %970 = reshape(%968, newshape=[70, 15]) /* ty=Tensor[(70, 15), int8] */;
  %971 = reshape(%969, newshape=[432]) /* ty=Tensor[(432), uint8] */;
  %972 = @func_5096(%970, %971) /* ty=(Tensor[(8, 7, 11), float64], Tensor[(6, 12, 6), bool], Tensor[(70, 15), int8], Tensor[(432), uint8]) */;
  %973 = %967.0;
  %974 = %972.0;
  (%973, %974, meta[relay.Constant][43] /* ty=Tensor[(1050), int8] */, %var_9244)
}

def @func_12130(%var_12078: Tensor[(5, 4, 5), uint64], %var_12079: Tensor[(5, 4, 5), uint64]) -> (Tensor[(6, 12, 6), bool], Tensor[(432), uint8], Tensor[(5, 4, 5), float32], Tensor[(7, 16, 7), float64]) {
  %975 = cast(meta[relay.Constant][44] /* ty=Tensor[(432), uint8] */, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %976 = cast(meta[relay.Constant][44] /* ty=Tensor[(432), uint8] */, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %977 = reshape(%975, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), uint8] */;
  %978 = reshape(%976, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), uint8] */;
  %979 = cast(%var_12079, dtype="uint64") /* ty=Tensor[(5, 4, 5), uint64] */;
  %980 = shape_of(%var_12078, dtype="int32") /* ty=Tensor[(3), int32] */;
  %981 = cast(%var_12078, dtype="uint64") /* ty=Tensor[(5, 4, 5), uint64] */;
  %982 = dyn.reshape(%979, %980, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %983 = logical_xor(%981, %982) /* ty=Tensor[(5, 4, 5), uint64] */;
  %984 = cast(%var_12079, dtype="bool") /* ty=Tensor[(5, 4, 5), bool] */;
  %985 = shape_of(%983, dtype="int32") /* ty=Tensor[(3), int32] */;
  %986 = cast(%983, dtype="bool") /* ty=Tensor[(5, 4, 5), bool] */;
  %987 = dyn.reshape(%984, %985, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %988 = less(%986, %987) /* ty=Tensor[(5, 4, 5), bool] */;
  %989 = cast(%988, dtype="float64") /* ty=Tensor[(5, 4, 5), float64] */;
  %990 = sin(%989) /* ty=Tensor[(5, 4, 5), float64] */;
  %991 = cast(%990, dtype="float32") /* ty=Tensor[(5, 4, 5), float32] */;
  %992 = @func_1019(%977, %978) /* ty=Tensor[(6, 12, 6), bool] */;
  %993 = rsqrt(%991) /* ty=Tensor[(5, 4, 5), float32] */;
  %994 = @func_5192() /* ty=Tensor[(7, 16, 7), float64] */;
  (%992, meta[relay.Constant][44] /* ty=Tensor[(432), uint8] */, %993, %994)
}

def @func_6780(%var_6761: Tensor[(48), float64]) -> (Tensor[(1008), float32], bool, Tensor[(48), float64], Tensor[(240), uint32]) {
  %995 = @func_6231() /* ty=(Tensor[(7, 16, 7), float32], Tensor[(1050), int8], Tensor[(5, 210), int8], Tensor[(16, 7, 9), float32], Tensor[(1008), float32]) */;
  %996 = cast(%var_6761, dtype="float64") /* ty=Tensor[(48), float64] */;
  %997 = reshape(%996, newshape=[1, 4, 12]) /* ty=Tensor[(1, 4, 12), float64] */;
  %998 = @func_5563(%997) /* ty=(Tensor[(1, 4, 12), float64], bool) */;
  %999 = @func_5336() /* ty=(Tensor[(240), uint32],) */;
  %1000 = %995.4;
  %1001 = %998.1;
  %1002 = %999.0;
  (%1000, %1001, %var_6761, %1002)
}

def @func_9517() -> Tensor[(7, 16, 7), float64] {
  %1003 = @func_9381() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %1003.0
}

def @func_6896() -> Tensor[(240), uint32] {
  %1004 = @func_5336() /* ty=(Tensor[(240), uint32],) */;
  %1004.0
}

def @func_2721(%var_2712: uint16, %var_2713: Tensor[(12, 6, 12), uint16]) -> Tensor[(12, 6, 12), uint16] {
  %1005 = cast(%var_2712, dtype="uint16") /* ty=uint16 */;
  %1006 = cast(%var_2713, dtype="uint16") /* ty=Tensor[(12, 6, 12), uint16] */;
  multiply(%1005, %1006) /* ty=Tensor[(12, 6, 12), uint16] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6195(%var_6194: Tensor[(7, 16, 7), float64]) -> (Tensor[(4, 196), float64], Tensor[(7, 16, 7), uint8]) {
  %9 = fn (%var_6186: Tensor[(7, 16, 7), float64]) -> (Tensor[(4, 196), float64], Tensor[(7, 16, 7), uint8]) {
    %0 = @func_4510() /* ty=(Tensor[(8, 7, 11), float64], Tensor[(7, 16, 7), float64], Tensor[(4, 196), float64], Tensor[(240), uint32]) */;
    %1 = @func_4853() /* ty=(Tensor[(432), uint8], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) */;
    %2 = %1.2;
    %3 = cast(%var_6186, dtype="uint8") /* ty=Tensor[(7, 16, 7), uint8] */;
    %4 = shape_of(%2, dtype="int32") /* ty=Tensor[(3), int32] */;
    %5 = cast(%2, dtype="uint8") /* ty=Tensor[(7, 16, 7), uint8] */;
    %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %7 = %0.2;
    %8 = right_shift(%5, %6) /* ty=Tensor[(7, 16, 7), uint8] */;
    (%7, %8)
  };
  %9(%var_6194) /* ty=(Tensor[(4, 196), float64], Tensor[(7, 16, 7), uint8]) */
}

def @func_7966() -> (Tensor[(7, 16, 7), float64],) {
  %12 = fn () -> (Tensor[(7, 16, 7), float64],) {
    %10 = @func_5841() /* ty=(Tensor[(7, 16, 7), float64],) */;
    %11 = %10.0;
    (%11,)
  };
  %12() /* ty=(Tensor[(7, 16, 7), float64],) */
}

def @func_8027() -> (Tensor[(7, 16, 7), float64], Tensor[(432), uint8]) {
  @func_8025() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(432), uint8]) */
}

def @func_8269() -> (Tensor[(7, 16, 7), float64],) {
  @func_8267() /* ty=(Tensor[(7, 16, 7), float64],) */
}

def @func_8888() -> (Tensor[(180), int8],) {
  @func_8886() /* ty=(Tensor[(180), int8],) */
}

def @func_8039() -> Tensor[(7, 16, 7), float64] {
  @func_6597() /* ty=Tensor[(7, 16, 7), float64] */
}

def @func_9634() -> (Tensor[(180), int8],) {
  @func_9632() /* ty=(Tensor[(180), int8],) */
}

def @func_11623() -> (Tensor[(7, 16, 7), float64], Tensor[(240), uint32]) {
  %13 = @func_6119() /* ty=(Tensor[(6, 12, 6), bool], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64]) */;
  %14 = @func_5336() /* ty=(Tensor[(240), uint32],) */;
  %15 = %13.2;
  %16 = %14.0;
  (%15, %16)
}

def @func_4431(%var_4428: Tensor[(15, 7, 4), float32]) -> Tensor[(15, 7, 4), float32] {
  %17 = cast(%var_4428, dtype="float32") /* ty=Tensor[(15, 7, 4), float32] */;
  rsqrt(%17) /* ty=Tensor[(15, 7, 4), float32] */
}

def @func_5716() -> (Tensor[(4, 196), float64],) {
  %18 = @func_4510() /* ty=(Tensor[(8, 7, 11), float64], Tensor[(7, 16, 7), float64], Tensor[(4, 196), float64], Tensor[(240), uint32]) */;
  %19 = %18.2;
  (%19,)
}

def @func_10936(%var_10935: Tensor[(432), uint8]) -> (Tensor[(7, 16, 7), float64], Tensor[(216, 2), uint8], Tensor[(432), uint8]) {
  %26 = fn (%var_10929: Tensor[(432), uint8]) -> (Tensor[(7, 16, 7), float64], Tensor[(216, 2), uint8], Tensor[(432), uint8]) {
    %20 = @func_8474() /* ty=(Tensor[(7, 16, 7), float64],) */;
    %21 = cast(%var_10929, dtype="uint8") /* ty=Tensor[(432), uint8] */;
    %22 = reshape(%21, newshape=[216, 2]) /* ty=Tensor[(216, 2), uint8] */;
    %23 = @func_6753(%22) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(9), float32], Tensor[(10, 105), int8], Tensor[(216, 2), uint8]) */;
    %24 = %20.0;
    %25 = %23.3;
    (%24, %25, %var_10929)
  };
  %26(%var_10935) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(216, 2), uint8], Tensor[(432), uint8]) */
}

def @func_13487() -> Tensor[(7, 16, 7), float32] {
  @func_13485() /* ty=Tensor[(7, 16, 7), float32] */
}

def @func_6501() -> (Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32]) {
  @func_6499() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32]) */
}

def @func_5981(%var_5965: Tensor[(1050), int8]) -> (Tensor[(7, 16, 7), float64], Tensor[(432), uint8], Tensor[(1050), int8], Tensor[(432), uint8]) {
  %27 = @func_4853() /* ty=(Tensor[(432), uint8], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) */;
  %28 = cast(%var_5965, dtype="int8") /* ty=Tensor[(1050), int8] */;
  %29 = cast(meta[relay.Constant][0] /* ty=Tensor[(432), uint8] */, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %30 = reshape(%28, newshape=[70, 15]) /* ty=Tensor[(70, 15), int8] */;
  %31 = reshape(%29, newshape=[432]) /* ty=Tensor[(432), uint8] */;
  %32 = @func_5096(%30, %31) /* ty=(Tensor[(8, 7, 11), float64], Tensor[(6, 12, 6), bool], Tensor[(70, 15), int8], Tensor[(432), uint8]) */;
  %33 = %27.2;
  %34 = %32.3;
  (%33, %34, %var_5965, meta[relay.Constant][0] /* ty=Tensor[(432), uint8] */)
}

def @func_13246() -> (Tensor[(7, 16, 7), float32], Tensor[(8, 7, 11), float64]) {
  @func_13244() /* ty=(Tensor[(7, 16, 7), float32], Tensor[(8, 7, 11), float64]) */
}

def @func_10188() -> (Tensor[(11, 12, 11), float32], Tensor[(11, 12, 11), float64], Tensor[(7, 16, 7), float32]) {
  @func_10186() /* ty=(Tensor[(11, 12, 11), float32], Tensor[(11, 12, 11), float64], Tensor[(7, 16, 7), float32]) */
}

def @func_5058() -> (Tensor[(6, 12, 6), bool], Tensor[(6, 12, 6), float32]) {
  %35 = @func_4581() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(6, 12, 6), bool], Tensor[(432), uint8], Tensor[(11, 12, 11), bool], bool) */;
  %36 = %35.1;
  %37 = cast(%36, dtype="uint8") /* ty=Tensor[(6, 12, 6), uint8] */;
  %38 = cast(%36, dtype="uint8") /* ty=Tensor[(6, 12, 6), uint8] */;
  %39 = reshape(%37, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), uint8] */;
  %40 = reshape(%38, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), uint8] */;
  %41 = cast(%36, dtype="float32") /* ty=Tensor[(6, 12, 6), float32] */;
  %42 = @func_1019(%39, %40) /* ty=Tensor[(6, 12, 6), bool] */;
  %43 = exp(%41) /* ty=Tensor[(6, 12, 6), float32] */;
  (%42, %43)
}

def @func_7539() -> (Tensor[(432), uint8], Tensor[(8, 7, 11), float64]) {
  @func_7537() /* ty=(Tensor[(432), uint8], Tensor[(8, 7, 11), float64]) */
}

def @func_4510() -> (Tensor[(8, 7, 11), float64], Tensor[(7, 16, 7), float64], Tensor[(4, 196), float64], Tensor[(240), uint32]) {
  %44 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 7, 11), float64] */, dtype="float64") /* ty=Tensor[(8, 7, 11), float64] */;
  %45 = cast(meta[relay.Constant][2] /* ty=Tensor[(4, 196), float64] */, dtype="float64") /* ty=Tensor[(4, 196), float64] */;
  %46 = cast(meta[relay.Constant][3] /* ty=Tensor[(240), uint32] */, dtype="uint32") /* ty=Tensor[(240), uint32] */;
  %47 = reshape(%45, newshape=[7, 16, 7]) /* ty=Tensor[(7, 16, 7), float64] */;
  %48 = reshape(%46, newshape=[240]) /* ty=Tensor[(240), uint32] */;
  %49 = @func_3670(%47, %48) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(5, 3, 16), uint32], Tensor[(240), uint32]) */;
  %50 = acosh(%44) /* ty=Tensor[(8, 7, 11), float64] */;
  %51 = %49.0;
  (%50, %51, meta[relay.Constant][2] /* ty=Tensor[(4, 196), float64] */, meta[relay.Constant][3] /* ty=Tensor[(240), uint32] */)
}

def @func_4980() -> (Tensor[(7, 16, 7), float32],) {
  %52 = @func_4611() /* ty=Tensor[(7, 16, 7), float32] */;
  (%52,)
}

def @func_8476() -> (Tensor[(7, 16, 7), float64],) {
  @func_8474() /* ty=(Tensor[(7, 16, 7), float64],) */
}

def @func_10104() -> (Tensor[(6, 12, 6), float32],) {
  @func_10102() /* ty=(Tensor[(6, 12, 6), float32],) */
}

def @func_6657() -> (Tensor[(7, 16, 7), float64],) {
  %54 = fn () -> (Tensor[(7, 16, 7), float64],) {
    %53 = @func_6597() /* ty=Tensor[(7, 16, 7), float64] */;
    (%53,)
  };
  %54() /* ty=(Tensor[(7, 16, 7), float64],) */
}

def @func_12702() -> (Tensor[(180), int8], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64]) {
  %55 = @func_9632() /* ty=(Tensor[(180), int8],) */;
  %56 = @func_7965() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %57 = @func_9029() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %58 = %55.0;
  %59 = %56.0;
  %60 = %57.0;
  (%58, %59, %60)
}

def @func_6085() -> (Tensor[(11, 12, 11), bool], Tensor[(432), uint8]) {
  @func_6083() /* ty=(Tensor[(11, 12, 11), bool], Tensor[(432), uint8]) */
}

def @func_6313(%var_6290: Tensor[(1008), float32]) -> (Tensor[(7, 16, 7), float32], Tensor[(4, 196), float64], Tensor[(7, 16, 7), float32], Tensor[(1008), float32]) {
  %61 = @func_4510() /* ty=(Tensor[(8, 7, 11), float64], Tensor[(7, 16, 7), float64], Tensor[(4, 196), float64], Tensor[(240), uint32]) */;
  %62 = %61.1;
  %63 = cast(%62, dtype="float32") /* ty=Tensor[(7, 16, 7), float32] */;
  %64 = @func_5716() /* ty=(Tensor[(4, 196), float64],) */;
  %65 = cast(%var_6290, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %66 = reshape(%65, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), float32] */;
  %67 = @func_4684(%66) /* ty=(Tensor[(16, 7, 9), float32], Tensor[(7, 16, 7), float32]) */;
  %68 = exp(%63) /* ty=Tensor[(7, 16, 7), float32] */;
  %69 = %64.0;
  %70 = %67.1;
  (%68, %69, %70, %var_6290)
}

def @func_13706() -> (Tensor[(240), uint32],) {
  %71 = @func_13665() /* ty=(Tensor[(240), uint32],) */;
  %72 = %71.0;
  (%72,)
}

def @func_10598() -> (Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64], Tensor[(240), uint32], Tensor[(11, 12, 11), bool]) {
  @func_10596() /* ty=(Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64], Tensor[(240), uint32], Tensor[(11, 12, 11), bool]) */
}

def @func_10973(%var_10971: Tensor[(10, 1, 10), float32]) -> Tensor[(10, 1, 10), float32] {
  @func_10970(%var_10971) /* ty=Tensor[(10, 1, 10), float32] */
}

def @func_7063(%var_7061: Tensor[(550), float32]) -> (Tensor[(7, 16, 7), float32], Tensor[(11, 10, 5), float32], Tensor[(550), float32]) {
  %73 = @func_5215() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %74 = cast(%var_7061, dtype="float32") /* ty=Tensor[(550), float32] */;
  %75 = reshape(%74, newshape=[11, 10, 5]) /* ty=Tensor[(11, 10, 5), float32] */;
  %76 = %73.0;
  %77 = @func_5861(%75) /* ty=Tensor[(11, 10, 5), float32] */;
  (%76, %77, %var_7061)
}

def @func_6993() -> Tensor[(432), uint8] {
  @func_6991() /* ty=Tensor[(432), uint8] */
}

def @func_5936(%var_5934: Tensor[(504, 2), float32]) -> (Tensor[(7, 16, 7), float64], Tensor[(16, 7, 9), uint64], Tensor[(504, 2), uint16]) {
  @func_5933(%var_5934) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(16, 7, 9), uint64], Tensor[(504, 2), uint16]) */
}

def @func_2682(%var_2678: Tensor[(15, 5, 14), int8], %var_2679: Tensor[(15, 5, 14), int8], %var_2680: Tensor[(15, 5, 14), int8], %var_2681: Tensor[(432), uint8]) -> (Tensor[(15, 5, 14), float32], Tensor[(6, 12, 6), bool], Tensor[(9), float32], Tensor[(432), uint8], Tensor[(6, 12, 6), bool]) {
  %99 = fn (%var_2637: Tensor[(15, 5, 14), int8], %var_2638: Tensor[(15, 5, 14), int8], %var_2642: Tensor[(15, 5, 14), int8], %var_2650: Tensor[(432), uint8]) -> (Tensor[(15, 5, 14), float32], Tensor[(6, 12, 6), bool], Tensor[(9), float32], Tensor[(432), uint8], Tensor[(6, 12, 6), bool]) {
    %78 = cast(%var_2638, dtype="int8") /* ty=Tensor[(15, 5, 14), int8] */;
    %79 = shape_of(%var_2637, dtype="int32") /* ty=Tensor[(3), int32] */;
    %80 = cast(%var_2637, dtype="int8") /* ty=Tensor[(15, 5, 14), int8] */;
    %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %82 = right_shift(%80, %81) /* ty=Tensor[(15, 5, 14), int8] */;
    %83 = cast(%var_2642, dtype="float32") /* ty=Tensor[(15, 5, 14), float32] */;
    %84 = shape_of(%82, dtype="int32") /* ty=Tensor[(3), int32] */;
    %85 = cast(%82, dtype="float32") /* ty=Tensor[(15, 5, 14), float32] */;
    %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %87 = cast(meta[relay.Constant][4] /* ty=Tensor[(9), float32] */, dtype="float32") /* ty=Tensor[(9), float32] */;
    %88 = cast(%var_2650, dtype="uint8") /* ty=Tensor[(432), uint8] */;
    %89 = reshape(%87, newshape=[1, 3, 3]) /* ty=Tensor[(1, 3, 3), float32] */;
    %90 = reshape(%88, newshape=[216, 2]) /* ty=Tensor[(216, 2), uint8] */;
    %91 = @func_1531(%89, %90) /* ty=(Tensor[(6, 12, 6), bool], Tensor[(216, 2), uint8], Tensor[(1, 3, 3), float32], Tensor[(1, 3, 3), float64]) */;
    %92 = %91.0;
    %93 = cast(%92, dtype="uint8") /* ty=Tensor[(6, 12, 6), uint8] */;
    %94 = cast(%var_2650, dtype="uint8") /* ty=Tensor[(432), uint8] */;
    %95 = reshape(%93, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), uint8] */;
    %96 = reshape(%94, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), uint8] */;
    %97 = power(%85, %86) /* ty=Tensor[(15, 5, 14), float32] */;
    %98 = @func_1019(%95, %96) /* ty=Tensor[(6, 12, 6), bool] */;
    (%97, %92, meta[relay.Constant][4] /* ty=Tensor[(9), float32] */, %var_2650, %98)
  };
  %99(%var_2678, %var_2679, %var_2680, %var_2681) /* ty=(Tensor[(15, 5, 14), float32], Tensor[(6, 12, 6), bool], Tensor[(9), float32], Tensor[(432), uint8], Tensor[(6, 12, 6), bool]) */
}

def @func_5468(%var_5413: Tensor[(432), uint8], %var_5417: float32, %var_5418: Tensor[(864), uint16]) -> (Tensor[(7, 16, 7), float32], Tensor[(11, 12, 11), float32], Tensor[(6, 12, 6), bool], Tensor[(432), uint8], float32, Tensor[(864), uint16], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) {
  %100 = @func_5215() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %101 = @func_4772() /* ty=(Tensor[(432), uint8], Tensor[(11, 12, 11), bool], Tensor[(11, 12, 11), bool], bool) */;
  %102 = %101.1;
  %103 = cast(%102, dtype="float32") /* ty=Tensor[(11, 12, 11), float32] */;
  %104 = cast(%var_5413, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %105 = cast(%var_5413, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %106 = reshape(%104, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), uint8] */;
  %107 = reshape(%105, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), uint8] */;
  %108 = cast(%var_5417, dtype="float32") /* ty=float32 */;
  %109 = cast(%var_5418, dtype="uint16") /* ty=Tensor[(864), uint16] */;
  %110 = reshape(%108, newshape=[]) /* ty=float32 */;
  %111 = reshape(%109, newshape=[864]) /* ty=Tensor[(864), uint16] */;
  %112 = @func_5312(%110, %111) /* ty=(Tensor[(7, 14, 11), bool], Tensor[(7, 14, 11), float32], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64], Tensor[(240), uint32], Tensor[(12, 6, 12), uint16], Tensor[(864), uint16]) */;
  %113 = @func_5215() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %114 = cast(%var_5417, dtype="float32") /* ty=float32 */;
  %115 = cast(%var_5418, dtype="uint16") /* ty=Tensor[(864), uint16] */;
  %116 = reshape(%114, newshape=[]) /* ty=float32 */;
  %117 = reshape(%115, newshape=[864]) /* ty=Tensor[(864), uint16] */;
  %118 = @func_5312(%116, %117) /* ty=(Tensor[(7, 14, 11), bool], Tensor[(7, 14, 11), float32], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64], Tensor[(240), uint32], Tensor[(12, 6, 12), uint16], Tensor[(864), uint16]) */;
  %119 = %118.4;
  %120 = cast(%119, dtype="float32") /* ty=Tensor[(7, 16, 7), float32] */;
  %121 = rsqrt(%120) /* ty=Tensor[(7, 16, 7), float32] */;
  %122 = cast(%121, dtype="float64") /* ty=Tensor[(7, 16, 7), float64] */;
  %123 = %100.0;
  %124 = atan(%103) /* ty=Tensor[(11, 12, 11), float32] */;
  %125 = @func_1019(%106, %107) /* ty=Tensor[(6, 12, 6), bool] */;
  %126 = %112.3;
  %127 = %113.0;
  %128 = sqrt(%122) /* ty=Tensor[(7, 16, 7), float64] */;
  (%123, %124, %125, %var_5413, %var_5417, %var_5418, %126, %127, %128)
}

def @func_9216() -> (Tensor[(240), uint32],) {
  %129 = @func_5336() /* ty=(Tensor[(240), uint32],) */;
  %130 = %129.0;
  (%130,)
}

def @func_14119() -> (Tensor[(7, 16, 7), float64],) {
  %131 = @func_8182() /* ty=Tensor[(7, 16, 7), float64] */;
  (%131,)
}

def @func_10395(%var_10394: Tensor[(7, 8, 6), float32]) -> (Tensor[(7, 8, 6), float32], Tensor[(240), uint32]) {
  %138 = fn (%var_10366: Tensor[(7, 8, 6), float32]) -> (Tensor[(7, 8, 6), float32], Tensor[(240), uint32]) {
    %132 = cast(%var_10366, dtype="float32") /* ty=Tensor[(7, 8, 6), float32] */;
    %133 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(7, 8, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %134 = cast(meta[relay.Constant][5] /* ty=Tensor[(7, 8, 6), float32] */, dtype="float32") /* ty=Tensor[(7, 8, 6), float32] */;
    %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %136 = floor_mod(%134, %135) /* ty=Tensor[(7, 8, 6), float32] */;
    %137 = @func_6896() /* ty=Tensor[(240), uint32] */;
    (%136, %137)
  };
  %138(%var_10394) /* ty=(Tensor[(7, 8, 6), float32], Tensor[(240), uint32]) */
}

def @func_6083() -> (Tensor[(11, 12, 11), bool], Tensor[(432), uint8]) {
  %139 = @func_4772() /* ty=(Tensor[(432), uint8], Tensor[(11, 12, 11), bool], Tensor[(11, 12, 11), bool], bool) */;
  %140 = @func_4772() /* ty=(Tensor[(432), uint8], Tensor[(11, 12, 11), bool], Tensor[(11, 12, 11), bool], bool) */;
  %141 = %139.2;
  %142 = %140.0;
  (%141, %142)
}

def @func_14121() -> (Tensor[(7, 16, 7), float64],) {
  @func_14119() /* ty=(Tensor[(7, 16, 7), float64],) */
}

def @func_1019(%var_1014: Tensor[(6, 12, 6), uint8], %var_1015: Tensor[(6, 12, 6), uint8]) -> Tensor[(6, 12, 6), bool] {
  %143 = cast(%var_1015, dtype="bool") /* ty=Tensor[(6, 12, 6), bool] */;
  %144 = shape_of(%var_1014, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(%var_1014, dtype="bool") /* ty=Tensor[(6, 12, 6), bool] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%145, %146) /* ty=Tensor[(6, 12, 6), bool] */
}

def @func_6782(%var_6781: Tensor[(48), float64]) -> (Tensor[(1008), float32], bool, Tensor[(48), float64], Tensor[(240), uint32]) {
  %155 = fn (%var_6761: Tensor[(48), float64]) -> (Tensor[(1008), float32], bool, Tensor[(48), float64], Tensor[(240), uint32]) {
    %147 = @func_6231() /* ty=(Tensor[(7, 16, 7), float32], Tensor[(1050), int8], Tensor[(5, 210), int8], Tensor[(16, 7, 9), float32], Tensor[(1008), float32]) */;
    %148 = cast(%var_6761, dtype="float64") /* ty=Tensor[(48), float64] */;
    %149 = reshape(%148, newshape=[1, 4, 12]) /* ty=Tensor[(1, 4, 12), float64] */;
    %150 = @func_5563(%149) /* ty=(Tensor[(1, 4, 12), float64], bool) */;
    %151 = @func_5336() /* ty=(Tensor[(240), uint32],) */;
    %152 = %147.4;
    %153 = %150.1;
    %154 = %151.0;
    (%152, %153, %var_6761, %154)
  };
  %155(%var_6781) /* ty=(Tensor[(1008), float32], bool, Tensor[(48), float64], Tensor[(240), uint32]) */
}

def @func_6120() -> (Tensor[(6, 12, 6), bool], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64]) {
  %162 = fn () -> (Tensor[(6, 12, 6), bool], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64]) {
    %156 = @func_4581() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(6, 12, 6), bool], Tensor[(432), uint8], Tensor[(11, 12, 11), bool], bool) */;
    %157 = @func_5774() /* ty=(Tensor[(7, 16, 7), float64],) */;
    %158 = @func_4637() /* ty=(Tensor[(7, 16, 7), float64],) */;
    %159 = %156.1;
    %160 = %157.0;
    %161 = %158.0;
    (%159, %160, %161)
  };
  %162() /* ty=(Tensor[(6, 12, 6), bool], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64]) */
}

def @func_1023(%var_1021: Tensor[(6, 12, 6), uint8], %var_1022: Tensor[(6, 12, 6), uint8]) -> Tensor[(6, 12, 6), bool] {
  @func_1019(%var_1021, %var_1022) /* ty=Tensor[(6, 12, 6), bool] */
}

def @func_10067(%var_10065: Tensor[(10, 3, 12), float32]) -> (Tensor[(10, 3, 12), float32], Tensor[(7, 16, 7), float64], Tensor[(1050), int8]) {
  @func_10064(%var_10065) /* ty=(Tensor[(10, 3, 12), float32], Tensor[(7, 16, 7), float64], Tensor[(1050), int8]) */
}

def @func_13549(%var_13547: Tensor[(168), uint16]) -> (Tensor[(4, 196), float64], Tensor[(14, 12, 1), float64], Tensor[(168), uint16]) {
  %163 = @func_5716() /* ty=(Tensor[(4, 196), float64],) */;
  %164 = %163.0;
  %165 = cast(%164, dtype="float64") /* ty=Tensor[(4, 196), float64] */;
  %166 = asinh(%165) /* ty=Tensor[(4, 196), float64] */;
  %167 = cast(%166, dtype="float64") /* ty=Tensor[(4, 196), float64] */;
  %168 = cast(%var_13547, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %169 = reshape(%168, newshape=[14, 12, 1]) /* ty=Tensor[(14, 12, 1), uint16] */;
  %170 = @func_9757(%169) /* ty=(Tensor[(14, 12, 1), uint16], Tensor[(14, 12, 1), float64]) */;
  %171 = exp(%167) /* ty=Tensor[(4, 196), float64] */;
  %172 = %170.1;
  (%171, %172, %var_13547)
}

def @func_11447(%var_11407: Tensor[(8, 7, 11), float32]) -> (Tensor[(8, 7, 11), int8], Tensor[(7, 16, 7), float64], Tensor[(8, 7, 11), float64]) {
  %173 = @func_7812() /* ty=(Tensor[(8, 7, 11), float32], Tensor[(7, 16, 7), float32]) */;
  %174 = %173.0;
  %175 = cast(%var_11407, dtype="int8") /* ty=Tensor[(8, 7, 11), int8] */;
  %176 = shape_of(%174, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(%174, dtype="int8") /* ty=Tensor[(8, 7, 11), int8] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %179 = @func_5774() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %180 = cast(%174, dtype="float64") /* ty=Tensor[(8, 7, 11), float64] */;
  %181 = subtract(%177, %178) /* ty=Tensor[(8, 7, 11), int8] */;
  %182 = %179.0;
  %183 = cos(%180) /* ty=Tensor[(8, 7, 11), float64] */;
  (%181, %182, %183)
}

def @func_8986() -> (Tensor[(432), uint8], Tensor[(7, 16, 7), float32]) {
  %187 = fn () -> (Tensor[(432), uint8], Tensor[(7, 16, 7), float32]) {
    %184 = @func_6273() /* ty=(Tensor[(7, 16, 7), float32],) */;
    %185 = @func_6991() /* ty=Tensor[(432), uint8] */;
    %186 = %184.0;
    (%185, %186)
  };
  %187() /* ty=(Tensor[(432), uint8], Tensor[(7, 16, 7), float32]) */
}

def @func_11578() -> Tensor[(7, 16, 7), float64] {
  %188 = @func_8267() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %188.0
}

def @func_8520(%var_8518: Tensor[(1050), int8]) -> (Tensor[(7, 16, 7), float32], Tensor[(1050), int8], Tensor[(36, 12), bool], Tensor[(7, 16, 7), float64]) {
  @func_8517(%var_8518) /* ty=(Tensor[(7, 16, 7), float32], Tensor[(1050), int8], Tensor[(36, 12), bool], Tensor[(7, 16, 7), float64]) */
}

def @func_11696(%var_11695: Tensor[(4, 196), float64]) -> (Tensor[(4, 196), float64], Tensor[(432), uint8], Tensor[(4, 196), float32]) {
  %202 = fn (%var_11659: Tensor[(4, 196), float64]) -> (Tensor[(4, 196), float64], Tensor[(432), uint8], Tensor[(4, 196), float32]) {
    %189 = @func_5716() /* ty=(Tensor[(4, 196), float64],) */;
    %190 = %189.0;
    %191 = cast(%190, dtype="float64") /* ty=Tensor[(4, 196), float64] */;
    %192 = sin(%191) /* ty=Tensor[(4, 196), float64] */;
    %193 = cast(%var_11659, dtype="float64") /* ty=Tensor[(4, 196), float64] */;
    %194 = shape_of(%192, dtype="int32") /* ty=Tensor[(2), int32] */;
    %195 = cast(%192, dtype="float64") /* ty=Tensor[(4, 196), float64] */;
    %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %197 = @func_6083() /* ty=(Tensor[(11, 12, 11), bool], Tensor[(432), uint8]) */;
    %198 = cast(%var_11659, dtype="float32") /* ty=Tensor[(4, 196), float32] */;
    %199 = floor_mod(%195, %196) /* ty=Tensor[(4, 196), float64] */;
    %200 = %197.1;
    %201 = tan(%198) /* ty=Tensor[(4, 196), float32] */;
    (%199, %200, %201)
  };
  %202(%var_11695) /* ty=(Tensor[(4, 196), float64], Tensor[(432), uint8], Tensor[(4, 196), float32]) */
}

def @func_5775() -> (Tensor[(7, 16, 7), float64],) {
  %205 = fn () -> (Tensor[(7, 16, 7), float64],) {
    %203 = @func_4853() /* ty=(Tensor[(432), uint8], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) */;
    %204 = %203.2;
    (%204,)
  };
  %205() /* ty=(Tensor[(7, 16, 7), float64],) */
}

def @func_4908() -> (Tensor[(7, 16, 7), float32], Tensor[(11, 12, 11), bool]) {
  %206 = @func_4853() /* ty=(Tensor[(432), uint8], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) */;
  %207 = @func_4772() /* ty=(Tensor[(432), uint8], Tensor[(11, 12, 11), bool], Tensor[(11, 12, 11), bool], bool) */;
  %208 = %206.1;
  %209 = %207.2;
  (%208, %209)
}

def @func_12274(%var_12273: Tensor[(5, 9, 1), int64]) -> Tensor[(5, 9, 1), int64] {
  %212 = fn (%var_12268: Tensor[(5, 9, 1), int64]) -> Tensor[(5, 9, 1), int64] {
    %210 = cast(-3 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %211 = cast(%var_12268, dtype="int64") /* ty=Tensor[(5, 9, 1), int64] */;
    bitwise_or(%210, %211) /* ty=Tensor[(5, 9, 1), int64] */
  };
  %212(%var_12273) /* ty=Tensor[(5, 9, 1), int64] */
}

def @func_10719() -> Tensor[(7, 16, 7), float64] {
  @func_10717() /* ty=Tensor[(7, 16, 7), float64] */
}

def @func_5842() -> (Tensor[(7, 16, 7), float64],) {
  %217 = fn () -> (Tensor[(7, 16, 7), float64],) {
    %213 = @func_5215() /* ty=(Tensor[(7, 16, 7), float32],) */;
    %214 = %213.0;
    %215 = cast(%214, dtype="float64") /* ty=Tensor[(7, 16, 7), float64] */;
    %216 = sigmoid(%215) /* ty=Tensor[(7, 16, 7), float64] */;
    (%216,)
  };
  %217() /* ty=(Tensor[(7, 16, 7), float64],) */
}

def @func_5863(%var_5862: Tensor[(11, 10, 5), float32]) -> Tensor[(11, 10, 5), float32] {
  %222 = fn (%var_5854: Tensor[(11, 10, 5), float32]) -> Tensor[(11, 10, 5), float32] {
    %218 = cast(meta[relay.Constant][6] /* ty=Tensor[(11, 10, 5), float32] */, dtype="float32") /* ty=Tensor[(11, 10, 5), float32] */;
    %219 = shape_of(%var_5854, dtype="int32") /* ty=Tensor[(3), int32] */;
    %220 = cast(%var_5854, dtype="float32") /* ty=Tensor[(11, 10, 5), float32] */;
    %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    mod(%220, %221) /* ty=Tensor[(11, 10, 5), float32] */
  };
  %222(%var_5862) /* ty=Tensor[(11, 10, 5), float32] */
}

def @func_6755(%var_6754: Tensor[(216, 2), uint8]) -> (Tensor[(7, 16, 7), float64], Tensor[(9), float32], Tensor[(10, 105), int8], Tensor[(216, 2), uint8]) {
  %235 = fn (%var_6748: Tensor[(216, 2), uint8]) -> (Tensor[(7, 16, 7), float64], Tensor[(9), float32], Tensor[(10, 105), int8], Tensor[(216, 2), uint8]) {
    %223 = @func_6656() /* ty=(Tensor[(7, 16, 7), float64],) */;
    %224 = cast(meta[relay.Constant][7] /* ty=Tensor[(10, 105), int8] */, dtype="int8") /* ty=Tensor[(10, 105), int8] */;
    %225 = cast(meta[relay.Constant][7] /* ty=Tensor[(10, 105), int8] */, dtype="int8") /* ty=Tensor[(10, 105), int8] */;
    %226 = cast(meta[relay.Constant][7] /* ty=Tensor[(10, 105), int8] */, dtype="int8") /* ty=Tensor[(10, 105), int8] */;
    %227 = cast(%var_6748, dtype="uint8") /* ty=Tensor[(216, 2), uint8] */;
    %228 = reshape(%224, newshape=[15, 5, 14]) /* ty=Tensor[(15, 5, 14), int8] */;
    %229 = reshape(%225, newshape=[15, 5, 14]) /* ty=Tensor[(15, 5, 14), int8] */;
    %230 = reshape(%226, newshape=[15, 5, 14]) /* ty=Tensor[(15, 5, 14), int8] */;
    %231 = reshape(%227, newshape=[432]) /* ty=Tensor[(432), uint8] */;
    %232 = @func_2677(%228, %229, %230, %231) /* ty=(Tensor[(15, 5, 14), float32], Tensor[(6, 12, 6), bool], Tensor[(9), float32], Tensor[(432), uint8], Tensor[(6, 12, 6), bool]) */;
    %233 = %223.0;
    %234 = %232.2;
    (%233, %234, meta[relay.Constant][7] /* ty=Tensor[(10, 105), int8] */, %var_6748)
  };
  %235(%var_6754) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(9), float32], Tensor[(10, 105), int8], Tensor[(216, 2), uint8]) */
}

def @func_2721(%var_2712: uint16, %var_2713: Tensor[(12, 6, 12), uint16]) -> Tensor[(12, 6, 12), uint16] {
  %236 = cast(%var_2712, dtype="uint16") /* ty=uint16 */;
  %237 = cast(%var_2713, dtype="uint16") /* ty=Tensor[(12, 6, 12), uint16] */;
  multiply(%236, %237) /* ty=Tensor[(12, 6, 12), uint16] */
}

def @func_6316(%var_6314: Tensor[(1008), float32]) -> (Tensor[(7, 16, 7), float32], Tensor[(4, 196), float64], Tensor[(7, 16, 7), float32], Tensor[(1008), float32]) {
  @func_6313(%var_6314) /* ty=(Tensor[(7, 16, 7), float32], Tensor[(4, 196), float64], Tensor[(7, 16, 7), float32], Tensor[(1008), float32]) */
}

def @func_13467() -> Tensor[(7, 16, 7), float64] {
  %239 = fn () -> Tensor[(7, 16, 7), float64] {
    %238 = @func_5774() /* ty=(Tensor[(7, 16, 7), float64],) */;
    %238.0
  };
  %239() /* ty=Tensor[(7, 16, 7), float64] */
}

def @func_6275() -> (Tensor[(7, 16, 7), float32],) {
  @func_6273() /* ty=(Tensor[(7, 16, 7), float32],) */
}

def @func_13906() -> (Tensor[(8, 7, 11), float64], Tensor[(7, 16, 7), float64]) {
  %243 = fn () -> (Tensor[(8, 7, 11), float64], Tensor[(7, 16, 7), float64]) {
    %240 = @func_11278() /* ty=(Tensor[(8, 7, 11), float64],) */;
    %241 = %240.0;
    %242 = @func_9557() /* ty=Tensor[(7, 16, 7), float64] */;
    (%241, %242)
  };
  %243() /* ty=(Tensor[(8, 7, 11), float64], Tensor[(7, 16, 7), float64]) */
}

def @func_7264() -> (Tensor[(432), uint8], Tensor[(8, 7, 11), float64]) {
  %244 = @func_4510() /* ty=(Tensor[(8, 7, 11), float64], Tensor[(7, 16, 7), float64], Tensor[(4, 196), float64], Tensor[(240), uint32]) */;
  %245 = @func_6991() /* ty=Tensor[(432), uint8] */;
  %246 = %244.0;
  (%245, %246)
}

def @func_13152(%var_13140: Tensor[(8, 7, 11), float64]) -> (Tensor[(8, 7, 11), uint8],) {
  %247 = @func_10879() /* ty=(Tensor[(8, 7, 11), float64],) */;
  %248 = %247.0;
  %249 = cast(%var_13140, dtype="uint8") /* ty=Tensor[(8, 7, 11), uint8] */;
  %250 = shape_of(%248, dtype="int32") /* ty=Tensor[(3), int32] */;
  %251 = cast(%248, dtype="uint8") /* ty=Tensor[(8, 7, 11), uint8] */;
  %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %253 = minimum(%251, %252) /* ty=Tensor[(8, 7, 11), uint8] */;
  (%253,)
}

def @func_7903() -> (Tensor[(7, 16, 7), float32],) {
  @func_7901() /* ty=(Tensor[(7, 16, 7), float32],) */
}

def @func_8577() -> (Tensor[(6, 12, 6), float32], bool, Tensor[(48), float64], Tensor[(7, 16, 7), float64]) {
  %254 = @func_7342() /* ty=(Tensor[(6, 12, 6), float32],) */;
  %255 = cast(meta[relay.Constant][8] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %256 = reshape(%255, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %257 = @func_6780(%256) /* ty=(Tensor[(1008), float32], bool, Tensor[(48), float64], Tensor[(240), uint32]) */;
  %258 = @func_8025() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(432), uint8]) */;
  %259 = %254.0;
  %260 = %257.1;
  %261 = %258.0;
  (%259, %260, meta[relay.Constant][8] /* ty=Tensor[(48), float64] */, %261)
}

def @func_2725(%var_2723: uint16, %var_2724: Tensor[(12, 6, 12), uint16]) -> Tensor[(12, 6, 12), uint16] {
  @func_2721(%var_2723, %var_2724) /* ty=Tensor[(12, 6, 12), uint16] */
}

def @func_7865() -> (Tensor[(240), uint32], Tensor[(5, 3, 16), uint32], Tensor[(7, 16, 7), float32], Tensor[(784), float64], Tensor[(90), int8], Tensor[(180), int8]) {
  @func_7863() /* ty=(Tensor[(240), uint32], Tensor[(5, 3, 16), uint32], Tensor[(7, 16, 7), float32], Tensor[(784), float64], Tensor[(90), int8], Tensor[(180), int8]) */
}

def @func_13708() -> (Tensor[(240), uint32],) {
  @func_13706() /* ty=(Tensor[(240), uint32],) */
}

def @func_9759(%var_9758: Tensor[(14, 12, 1), uint16]) -> (Tensor[(14, 12, 1), uint16], Tensor[(14, 12, 1), float64]) {
  %267 = fn (%var_9732: Tensor[(14, 12, 1), uint16]) -> (Tensor[(14, 12, 1), uint16], Tensor[(14, 12, 1), float64]) {
    %262 = cast(meta[relay.Constant][9] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %263 = cast(%var_9732, dtype="uint16") /* ty=Tensor[(14, 12, 1), uint16] */;
    %264 = cast(%var_9732, dtype="float64") /* ty=Tensor[(14, 12, 1), float64] */;
    %265 = bitwise_or(%262, %263) /* ty=Tensor[(14, 12, 1), uint16] */;
    %266 = log2(%264) /* ty=Tensor[(14, 12, 1), float64] */;
    (%265, %266)
  };
  %267(%var_9758) /* ty=(Tensor[(14, 12, 1), uint16], Tensor[(14, 12, 1), float64]) */
}

def @func_4613() -> Tensor[(7, 16, 7), float32] {
  @func_4611() /* ty=Tensor[(7, 16, 7), float32] */
}

def @func_5193() -> Tensor[(7, 16, 7), float64] {
  %270 = fn () -> Tensor[(7, 16, 7), float64] {
    %268 = @func_4611() /* ty=Tensor[(7, 16, 7), float32] */;
    %269 = cast(%268, dtype="float64") /* ty=Tensor[(7, 16, 7), float64] */;
    sin(%269) /* ty=Tensor[(7, 16, 7), float64] */
  };
  %270() /* ty=Tensor[(7, 16, 7), float64] */
}

def @func_13321(%var_13319: Tensor[(4, 15, 5), float64], %var_13320: Tensor[(1280), float32]) -> (Tensor[(4, 15, 5), bool], Tensor[(7, 16, 7), float32], Tensor[(10, 16, 8), float32], Tensor[(1280), float32]) {
  %283 = fn (%var_13291: Tensor[(4, 15, 5), float64], %var_13314: Tensor[(1280), float32]) -> (Tensor[(4, 15, 5), bool], Tensor[(7, 16, 7), float32], Tensor[(10, 16, 8), float32], Tensor[(1280), float32]) {
    %271 = cast(%var_13291, dtype="float64") /* ty=Tensor[(4, 15, 5), float64] */;
    %272 = erf(%271) /* ty=Tensor[(4, 15, 5), float64] */;
    %273 = cast(%var_13291, dtype="bool") /* ty=Tensor[(4, 15, 5), bool] */;
    %274 = shape_of(%272, dtype="int32") /* ty=Tensor[(3), int32] */;
    %275 = cast(%272, dtype="bool") /* ty=Tensor[(4, 15, 5), bool] */;
    %276 = dyn.reshape(%273, %274, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %277 = @func_12881() /* ty=(Tensor[(432), uint8], Tensor[(7, 16, 7), float32]) */;
    %278 = cast(%var_13314, dtype="float32") /* ty=Tensor[(1280), float32] */;
    %279 = reshape(%278, newshape=[10, 16, 8]) /* ty=Tensor[(10, 16, 8), float32] */;
    %280 = logical_and(%275, %276) /* ty=Tensor[(4, 15, 5), bool] */;
    %281 = %277.1;
    %282 = @func_11266(%279) /* ty=Tensor[(10, 16, 8), float32] */;
    (%280, %281, %282, %var_13314)
  };
  %283(%var_13319, %var_13320) /* ty=(Tensor[(4, 15, 5), bool], Tensor[(7, 16, 7), float32], Tensor[(10, 16, 8), float32], Tensor[(1280), float32]) */
}

def @func_9382() -> (Tensor[(7, 16, 7), float64],) {
  %285 = fn () -> (Tensor[(7, 16, 7), float64],) {
    %284 = @func_5192() /* ty=Tensor[(7, 16, 7), float64] */;
    (%284,)
  };
  %285() /* ty=(Tensor[(7, 16, 7), float64],) */
}

def @func_8134() -> (Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64]) {
  %291 = fn () -> (Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64]) {
    %286 = @func_4637() /* ty=(Tensor[(7, 16, 7), float64],) */;
    %287 = @func_6119() /* ty=(Tensor[(6, 12, 6), bool], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64]) */;
    %288 = @func_4611() /* ty=Tensor[(7, 16, 7), float32] */;
    %289 = %286.0;
    %290 = %287.1;
    (%288, %289, %290)
  };
  %291() /* ty=(Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64]) */
}

def @func_10250() -> Tensor[(7, 16, 7), float32] {
  %293 = fn () -> Tensor[(7, 16, 7), float32] {
    %292 = @func_9792() /* ty=(Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) */;
    %292.0
  };
  %293() /* ty=Tensor[(7, 16, 7), float32] */
}

def @func_4910() -> (Tensor[(7, 16, 7), float32], Tensor[(11, 12, 11), bool]) {
  @func_4908() /* ty=(Tensor[(7, 16, 7), float32], Tensor[(11, 12, 11), bool]) */
}

def @func_8936(%var_8919: Tensor[(9, 1), float32], %var_8920: Tensor[(432), uint8]) -> (Tensor[(180), int8], Tensor[(1, 3, 3), float32], Tensor[(9, 1), float32], Tensor[(432), uint8], Tensor[(8, 7, 11), float32]) {
  %294 = @func_8886() /* ty=(Tensor[(180), int8],) */;
  %295 = cast(%var_8919, dtype="float32") /* ty=Tensor[(9, 1), float32] */;
  %296 = cast(%var_8920, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %297 = reshape(%295, newshape=[1, 3, 3]) /* ty=Tensor[(1, 3, 3), float32] */;
  %298 = reshape(%296, newshape=[216, 2]) /* ty=Tensor[(216, 2), uint8] */;
  %299 = @func_1531(%297, %298) /* ty=(Tensor[(6, 12, 6), bool], Tensor[(216, 2), uint8], Tensor[(1, 3, 3), float32], Tensor[(1, 3, 3), float64]) */;
  %300 = @func_7812() /* ty=(Tensor[(8, 7, 11), float32], Tensor[(7, 16, 7), float32]) */;
  %301 = %300.0;
  %302 = cast(%301, dtype="float32") /* ty=Tensor[(8, 7, 11), float32] */;
  %303 = %294.0;
  %304 = %299.2;
  %305 = sinh(%302) /* ty=Tensor[(8, 7, 11), float32] */;
  (%303, %304, %var_8919, %var_8920, %305)
}

def @func_5099(%var_5097: Tensor[(70, 15), int8], %var_5098: Tensor[(432), uint8]) -> (Tensor[(8, 7, 11), float64], Tensor[(6, 12, 6), bool], Tensor[(70, 15), int8], Tensor[(432), uint8]) {
  %318 = fn (%var_5087: Tensor[(70, 15), int8], %var_5088: Tensor[(432), uint8]) -> (Tensor[(8, 7, 11), float64], Tensor[(6, 12, 6), bool], Tensor[(70, 15), int8], Tensor[(432), uint8]) {
    %306 = @func_4510() /* ty=(Tensor[(8, 7, 11), float64], Tensor[(7, 16, 7), float64], Tensor[(4, 196), float64], Tensor[(240), uint32]) */;
    %307 = cast(%var_5087, dtype="int8") /* ty=Tensor[(70, 15), int8] */;
    %308 = cast(%var_5087, dtype="int8") /* ty=Tensor[(70, 15), int8] */;
    %309 = cast(%var_5087, dtype="int8") /* ty=Tensor[(70, 15), int8] */;
    %310 = cast(%var_5088, dtype="uint8") /* ty=Tensor[(432), uint8] */;
    %311 = reshape(%307, newshape=[15, 5, 14]) /* ty=Tensor[(15, 5, 14), int8] */;
    %312 = reshape(%308, newshape=[15, 5, 14]) /* ty=Tensor[(15, 5, 14), int8] */;
    %313 = reshape(%309, newshape=[15, 5, 14]) /* ty=Tensor[(15, 5, 14), int8] */;
    %314 = reshape(%310, newshape=[432]) /* ty=Tensor[(432), uint8] */;
    %315 = @func_2677(%311, %312, %313, %314) /* ty=(Tensor[(15, 5, 14), float32], Tensor[(6, 12, 6), bool], Tensor[(9), float32], Tensor[(432), uint8], Tensor[(6, 12, 6), bool]) */;
    %316 = %306.0;
    %317 = %315.4;
    (%316, %317, %var_5087, %var_5088)
  };
  %318(%var_5097, %var_5098) /* ty=(Tensor[(8, 7, 11), float64], Tensor[(6, 12, 6), bool], Tensor[(70, 15), int8], Tensor[(432), uint8]) */
}

def @func_11640() -> Tensor[(7, 16, 7), float32] {
  %319 = @func_11517() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %319.0
}

def @func_4582() -> (Tensor[(7, 16, 7), float64], Tensor[(6, 12, 6), bool], Tensor[(432), uint8], Tensor[(11, 12, 11), bool], bool) {
  %330 = fn () -> (Tensor[(7, 16, 7), float64], Tensor[(6, 12, 6), bool], Tensor[(432), uint8], Tensor[(11, 12, 11), bool], bool) {
    %320 = @func_4510() /* ty=(Tensor[(8, 7, 11), float64], Tensor[(7, 16, 7), float64], Tensor[(4, 196), float64], Tensor[(240), uint32]) */;
    %321 = cast(meta[relay.Constant][10] /* ty=Tensor[(432), uint8] */, dtype="uint8") /* ty=Tensor[(432), uint8] */;
    %322 = cast(meta[relay.Constant][10] /* ty=Tensor[(432), uint8] */, dtype="uint8") /* ty=Tensor[(432), uint8] */;
    %323 = reshape(%321, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), uint8] */;
    %324 = reshape(%322, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), uint8] */;
    %325 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %326 = reshape(%325, newshape=[]) /* ty=bool */;
    %327 = %320.1;
    %328 = @func_1019(%323, %324) /* ty=Tensor[(6, 12, 6), bool] */;
    %329 = @func_3774(%326) /* ty=Tensor[(11, 12, 11), bool] */;
    (%327, %328, meta[relay.Constant][10] /* ty=Tensor[(432), uint8] */, %329, True /* ty=bool */)
  };
  %330() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(6, 12, 6), bool], Tensor[(432), uint8], Tensor[(11, 12, 11), bool], bool) */
}

def @func_9519() -> Tensor[(7, 16, 7), float64] {
  @func_9517() /* ty=Tensor[(7, 16, 7), float64] */
}

def @func_11266(%var_11258: Tensor[(10, 16, 8), float32]) -> Tensor[(10, 16, 8), float32] {
  %331 = cast(%var_11258, dtype="float32") /* ty=Tensor[(10, 16, 8), float32] */;
  atanh(%331) /* ty=Tensor[(10, 16, 8), float32] */
}

def @func_12833() -> Tensor[(7, 16, 7), float64] {
  @func_12831() /* ty=Tensor[(7, 16, 7), float64] */
}

def @func_9632() -> (Tensor[(180), int8],) {
  %332 = @func_8886() /* ty=(Tensor[(180), int8],) */;
  %333 = %332.0;
  (%333,)
}

def @func_8442() -> (Tensor[(7, 16, 7), bool],) {
  %334 = @func_7985() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %335 = %334.0;
  %336 = cast(%335, dtype="float32") /* ty=Tensor[(7, 16, 7), float32] */;
  %337 = acosh(%336) /* ty=Tensor[(7, 16, 7), float32] */;
  %338 = cast(%337, dtype="bool") /* ty=Tensor[(7, 16, 7), bool] */;
  %339 = shape_of(%335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %340 = cast(%335, dtype="bool") /* ty=Tensor[(7, 16, 7), bool] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %342 = less(%340, %341) /* ty=Tensor[(7, 16, 7), bool] */;
  (%342,)
}

def @func_3670(%var_3640: Tensor[(7, 16, 7), float64], %var_3661: Tensor[(240), uint32]) -> (Tensor[(7, 16, 7), float64], Tensor[(5, 3, 16), uint32], Tensor[(240), uint32]) {
  %343 = cast(%var_3640, dtype="float64") /* ty=Tensor[(7, 16, 7), float64] */;
  %344 = cast(%var_3661, dtype="uint32") /* ty=Tensor[(240), uint32] */;
  %345 = cast(%var_3661, dtype="uint32") /* ty=Tensor[(240), uint32] */;
  %346 = reshape(%344, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), uint32] */;
  %347 = reshape(%345, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), uint32] */;
  %348 = acos(%343) /* ty=Tensor[(7, 16, 7), float64] */;
  %349 = @func_2836(%346, %347) /* ty=Tensor[(5, 3, 16), uint32] */;
  (%348, %349, %var_3661)
}

def @func_9045() -> (Tensor[(7, 16, 7), float64],) {
  @func_9043() /* ty=(Tensor[(7, 16, 7), float64],) */
}

def @func_3674(%var_3672: Tensor[(7, 16, 7), float64], %var_3673: Tensor[(240), uint32]) -> (Tensor[(7, 16, 7), float64], Tensor[(5, 3, 16), uint32], Tensor[(240), uint32]) {
  @func_3670(%var_3672, %var_3673) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(5, 3, 16), uint32], Tensor[(240), uint32]) */
}

def @func_6597() -> Tensor[(7, 16, 7), float64] {
  %350 = @func_6499() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32]) */;
  %350.0
}

def @func_9793() -> (Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) {
  %354 = fn () -> (Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) {
    %351 = @func_4853() /* ty=(Tensor[(432), uint8], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) */;
    %352 = @func_5852() /* ty=Tensor[(7, 16, 7), float32] */;
    %353 = %351.2;
    (%352, %353)
  };
  %354() /* ty=(Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) */
}

def @func_12027() -> (Tensor[(7, 16, 7), float32],) {
  %355 = @func_6499() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32]) */;
  %356 = %355.3;
  (%356,)
}

def @func_13988() -> (Tensor[(7, 16, 7), float32], Tensor[(3, 16, 6), float64]) {
  @func_13986() /* ty=(Tensor[(7, 16, 7), float32], Tensor[(3, 16, 6), float64]) */
}

def @func_13986() -> (Tensor[(7, 16, 7), float32], Tensor[(3, 16, 6), float64]) {
  %357 = @func_6529() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %358 = @func_11587() /* ty=(Tensor[(3, 16, 6), float64],) */;
  %359 = %357.0;
  %360 = %358.0;
  (%359, %360)
}

def @func_11036(%var_11035: Tensor[(432), uint8]) -> (Tensor[(7, 16, 7), float32], Tensor[(6, 12, 6), bool], Tensor[(432), uint8]) {
  %368 = fn (%var_11028: Tensor[(432), uint8]) -> (Tensor[(7, 16, 7), float32], Tensor[(6, 12, 6), bool], Tensor[(432), uint8]) {
    %361 = @func_5215() /* ty=(Tensor[(7, 16, 7), float32],) */;
    %362 = cast(%var_11028, dtype="uint8") /* ty=Tensor[(432), uint8] */;
    %363 = cast(%var_11028, dtype="uint8") /* ty=Tensor[(432), uint8] */;
    %364 = reshape(%362, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), uint8] */;
    %365 = reshape(%363, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), uint8] */;
    %366 = %361.0;
    %367 = @func_1019(%364, %365) /* ty=Tensor[(6, 12, 6), bool] */;
    (%366, %367, %var_11028)
  };
  %368(%var_11035) /* ty=(Tensor[(7, 16, 7), float32], Tensor[(6, 12, 6), bool], Tensor[(432), uint8]) */
}

def @func_11642() -> Tensor[(7, 16, 7), float32] {
  @func_11640() /* ty=Tensor[(7, 16, 7), float32] */
}

def @func_5337() -> (Tensor[(240), uint32],) {
  %371 = fn () -> (Tensor[(240), uint32],) {
    %369 = @func_4510() /* ty=(Tensor[(8, 7, 11), float64], Tensor[(7, 16, 7), float64], Tensor[(4, 196), float64], Tensor[(240), uint32]) */;
    %370 = %369.3;
    (%370,)
  };
  %371() /* ty=(Tensor[(240), uint32],) */
}

def @func_8110(%var_8056: Tensor[(6, 12, 6), float32], %var_8064: bool, %var_8074: Tensor[(3, 52), uint64], %var_8075: Tensor[(1716), uint64], %var_8102: Tensor[(3, 52), uint64]) -> (Tensor[(11, 12, 11), bool], Tensor[(1716), uint64], Tensor[(6, 12, 6), float64], Tensor[(7, 16, 7), float32], Tensor[(1, 3, 3), float32], Tensor[(3, 52), float32]) {
  %372 = cast(%var_8064, dtype="bool") /* ty=bool */;
  %373 = reshape(%372, newshape=[]) /* ty=bool */;
  %374 = @func_7342() /* ty=(Tensor[(6, 12, 6), float32],) */;
  %375 = %374.0;
  %376 = cast(%var_8056, dtype="float32") /* ty=Tensor[(6, 12, 6), float32] */;
  %377 = shape_of(%375, dtype="int32") /* ty=Tensor[(3), int32] */;
  %378 = cast(%375, dtype="float32") /* ty=Tensor[(6, 12, 6), float32] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %380 = subtract(%378, %379) /* ty=Tensor[(6, 12, 6), float32] */;
  %381 = cast(%380, dtype="float64") /* ty=Tensor[(6, 12, 6), float64] */;
  %382 = shape_of(%375, dtype="int32") /* ty=Tensor[(3), int32] */;
  %383 = cast(%375, dtype="float64") /* ty=Tensor[(6, 12, 6), float64] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %385 = @func_7360() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %386 = cast(%var_8074, dtype="uint64") /* ty=Tensor[(3, 52), uint64] */;
  %387 = cast(%var_8075, dtype="uint64") /* ty=Tensor[(1716), uint64] */;
  %388 = reshape(%386, newshape=[12, 1, 13]) /* ty=Tensor[(12, 1, 13), uint64] */;
  %389 = reshape(%387, newshape=[12, 11, 13]) /* ty=Tensor[(12, 11, 13), uint64] */;
  %390 = @func_1658(%388, %389) /* ty=(Tensor[(12, 11, 13), uint64], Tensor[(6, 12, 6), bool], Tensor[(9), float32], Tensor[(432), uint8], Tensor[(1, 3, 3), float32]) */;
  %391 = %390.4;
  %392 = cast(%391, dtype="float32") /* ty=Tensor[(1, 3, 3), float32] */;
  %393 = cast(%var_8064, dtype="float32") /* ty=float32 */;
  %394 = cast(%var_8102, dtype="float32") /* ty=Tensor[(3, 52), float32] */;
  %395 = shape_of(%var_8074, dtype="int32") /* ty=Tensor[(2), int32] */;
  %396 = cast(%var_8074, dtype="float32") /* ty=Tensor[(3, 52), float32] */;
  %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %398 = @func_3774(%373) /* ty=Tensor[(11, 12, 11), bool] */;
  %399 = floor_mod(%383, %384) /* ty=Tensor[(6, 12, 6), float64] */;
  %400 = %385.0;
  %401 = power(%392, %393) /* ty=Tensor[(1, 3, 3), float32] */;
  %402 = floor_divide(%396, %397) /* ty=Tensor[(3, 52), float32] */;
  (%398, %var_8075, %399, %400, %401, %402)
}

def @func_6833() -> Tensor[(7, 16, 7), float64] {
  %404 = fn () -> Tensor[(7, 16, 7), float64] {
    %403 = @func_5841() /* ty=(Tensor[(7, 16, 7), float64],) */;
    %403.0
  };
  %404() /* ty=Tensor[(7, 16, 7), float64] */
}

def @func_8267() -> (Tensor[(7, 16, 7), float64],) {
  %405 = @func_4637() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %406 = %405.0;
  (%406,)
}

def @func_4611() -> Tensor[(7, 16, 7), float32] {
  %407 = @func_4510() /* ty=(Tensor[(8, 7, 11), float64], Tensor[(7, 16, 7), float64], Tensor[(4, 196), float64], Tensor[(240), uint32]) */;
  %408 = %407.1;
  %409 = cast(%408, dtype="float32") /* ty=Tensor[(7, 16, 7), float32] */;
  asinh(%409) /* ty=Tensor[(7, 16, 7), float32] */
}

def @func_7266() -> (Tensor[(432), uint8], Tensor[(8, 7, 11), float64]) {
  @func_7264() /* ty=(Tensor[(432), uint8], Tensor[(8, 7, 11), float64]) */
}

def @func_5215() -> (Tensor[(7, 16, 7), float32],) {
  %410 = @func_4611() /* ty=Tensor[(7, 16, 7), float32] */;
  (%410,)
}

def @func_6686(%var_6684: Tensor[(2, 9, 1), float32]) -> (Tensor[(2, 9, 1), float32], Tensor[(7, 16, 7), float32]) {
  @func_6683(%var_6684) /* ty=(Tensor[(2, 9, 1), float32], Tensor[(7, 16, 7), float32]) */
}

def @func_12570() -> (Tensor[(240), uint32], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64]) {
  %411 = @func_10335() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(8, 7, 11), float64], Tensor[(240), uint32]) */;
  %412 = @func_6656() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %413 = @func_9043() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %414 = %411.2;
  %415 = %412.0;
  %416 = %413.0;
  (%414, %415, %416)
}

def @func_6232() -> (Tensor[(7, 16, 7), float32], Tensor[(1050), int8], Tensor[(5, 210), int8], Tensor[(16, 7, 9), float32], Tensor[(1008), float32]) {
  %426 = fn () -> (Tensor[(7, 16, 7), float32], Tensor[(1050), int8], Tensor[(5, 210), int8], Tensor[(16, 7, 9), float32], Tensor[(1008), float32]) {
    %417 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 210), int8] */, dtype="int8") /* ty=Tensor[(5, 210), int8] */;
    %418 = reshape(%417, newshape=[1050]) /* ty=Tensor[(1050), int8] */;
    %419 = @func_5981(%418) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(432), uint8], Tensor[(1050), int8], Tensor[(432), uint8]) */;
    %420 = cast(meta[relay.Constant][12] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
    %421 = reshape(%420, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), float32] */;
    %422 = @func_4684(%421) /* ty=(Tensor[(16, 7, 9), float32], Tensor[(7, 16, 7), float32]) */;
    %423 = @func_5852() /* ty=Tensor[(7, 16, 7), float32] */;
    %424 = %419.2;
    %425 = %422.0;
    (%423, %424, meta[relay.Constant][11] /* ty=Tensor[(5, 210), int8] */, %425, meta[relay.Constant][12] /* ty=Tensor[(1008), float32] */)
  };
  %426() /* ty=(Tensor[(7, 16, 7), float32], Tensor[(1050), int8], Tensor[(5, 210), int8], Tensor[(16, 7, 9), float32], Tensor[(1008), float32]) */
}

def @func_4434(%var_4432: Tensor[(15, 7, 4), float32]) -> Tensor[(15, 7, 4), float32] {
  @func_4431(%var_4432) /* ty=Tensor[(15, 7, 4), float32] */
}

def @func_7389() -> Tensor[(432), uint8] {
  %427 = @func_6083() /* ty=(Tensor[(11, 12, 11), bool], Tensor[(432), uint8]) */;
  %427.1
}

def @func_10102() -> (Tensor[(6, 12, 6), float32],) {
  %428 = @func_7342() /* ty=(Tensor[(6, 12, 6), float32],) */;
  %429 = %428.0;
  (%429,)
}

def @func_12247() -> (Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64], Tensor[(11, 12, 11), bool], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64], Tensor[(8, 7, 11), float32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), uint16]) {
  %459 = fn () -> (Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64], Tensor[(11, 12, 11), bool], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64], Tensor[(8, 7, 11), float32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), uint16]) {
    %430 = @func_7360() /* ty=(Tensor[(7, 16, 7), float32],) */;
    %431 = @func_11817() /* ty=(Tensor[(7, 16, 7), float64],) */;
    %432 = @func_6656() /* ty=(Tensor[(7, 16, 7), float64],) */;
    %433 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %434 = reshape(%433, newshape=[]) /* ty=bool */;
    %435 = @func_7360() /* ty=(Tensor[(7, 16, 7), float32],) */;
    %436 = @func_4637() /* ty=(Tensor[(7, 16, 7), float64],) */;
    %437 = %436.0;
    %438 = @func_8577() /* ty=(Tensor[(6, 12, 6), float32], bool, Tensor[(48), float64], Tensor[(7, 16, 7), float64]) */;
    %439 = %438.3;
    %440 = cast(%439, dtype="float64") /* ty=Tensor[(7, 16, 7), float64] */;
    %441 = shape_of(%437, dtype="int32") /* ty=Tensor[(3), int32] */;
    %442 = cast(%437, dtype="float64") /* ty=Tensor[(7, 16, 7), float64] */;
    %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %444 = @func_7812() /* ty=(Tensor[(8, 7, 11), float32], Tensor[(7, 16, 7), float32]) */;
    %445 = @func_12027() /* ty=(Tensor[(7, 16, 7), float32],) */;
    %446 = @func_9381() /* ty=(Tensor[(7, 16, 7), float64],) */;
    %447 = %446.0;
    %448 = cast(%447, dtype="uint16") /* ty=Tensor[(7, 16, 7), uint16] */;
    %449 = cast(False /* ty=bool */, dtype="uint16") /* ty=uint16 */;
    %450 = %430.0;
    %451 = %431.0;
    %452 = %432.0;
    %453 = @func_3774(%434) /* ty=Tensor[(11, 12, 11), bool] */;
    %454 = %435.0;
    %455 = mod(%442, %443) /* ty=Tensor[(7, 16, 7), float64] */;
    %456 = %444.0;
    %457 = %445.0;
    %458 = multiply(%448, %449) /* ty=Tensor[(7, 16, 7), uint16] */;
    (%450, %451, %452, %453, %454, %455, %456, %457, %458)
  };
  %459() /* ty=(Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64], Tensor[(11, 12, 11), bool], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64], Tensor[(8, 7, 11), float32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), uint16]) */
}

def @func_8799() -> (bool, Tensor[(11, 12, 11), bool], Tensor[(5, 3, 16), uint32], Tensor[(240), uint32]) {
  %469 = fn () -> (bool, Tensor[(11, 12, 11), bool], Tensor[(5, 3, 16), uint32], Tensor[(240), uint32]) {
    %460 = @func_4772() /* ty=(Tensor[(432), uint8], Tensor[(11, 12, 11), bool], Tensor[(11, 12, 11), bool], bool) */;
    %461 = @func_6083() /* ty=(Tensor[(11, 12, 11), bool], Tensor[(432), uint8]) */;
    %462 = cast(meta[relay.Constant][13] /* ty=Tensor[(240), uint32] */, dtype="uint32") /* ty=Tensor[(240), uint32] */;
    %463 = cast(meta[relay.Constant][13] /* ty=Tensor[(240), uint32] */, dtype="uint32") /* ty=Tensor[(240), uint32] */;
    %464 = reshape(%462, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), uint32] */;
    %465 = reshape(%463, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), uint32] */;
    %466 = %460.3;
    %467 = %461.0;
    %468 = @func_2836(%464, %465) /* ty=Tensor[(5, 3, 16), uint32] */;
    (%466, %467, %468, meta[relay.Constant][13] /* ty=Tensor[(240), uint32] */)
  };
  %469() /* ty=(bool, Tensor[(11, 12, 11), bool], Tensor[(5, 3, 16), uint32], Tensor[(240), uint32]) */
}

def @func_6273() -> (Tensor[(7, 16, 7), float32],) {
  %470 = @func_4611() /* ty=Tensor[(7, 16, 7), float32] */;
  (%470,)
}

def @func_13344() -> Tensor[(7, 16, 7), float64] {
  @func_13342() /* ty=Tensor[(7, 16, 7), float64] */
}

def @func_8579() -> (Tensor[(6, 12, 6), float32], bool, Tensor[(48), float64], Tensor[(7, 16, 7), float64]) {
  @func_8577() /* ty=(Tensor[(6, 12, 6), float32], bool, Tensor[(48), float64], Tensor[(7, 16, 7), float64]) */
}

def @func_12521() -> Tensor[(7, 16, 7), float32] {
  %471 = fn () -> Tensor[(7, 16, 7), float32] {
    @func_10198() /* ty=Tensor[(7, 16, 7), float32] */
  };
  %471() /* ty=Tensor[(7, 16, 7), float32] */
}

def @func_6412(%var_6411: float32) -> (Tensor[(7, 16, 7), float64], float32, Tensor[(864), uint16], Tensor[(7, 16, 7), float32], Tensor[(15, 7, 4), float32], Tensor[(420), float32], Tensor[(7, 16, 7), float64], Tensor[(1050), int8], Tensor[(1050), int8], Tensor[(12, 6, 12), float64]) {
  %492 = fn (%var_6348: float32) -> (Tensor[(7, 16, 7), float64], float32, Tensor[(864), uint16], Tensor[(7, 16, 7), float32], Tensor[(15, 7, 4), float32], Tensor[(420), float32], Tensor[(7, 16, 7), float64], Tensor[(1050), int8], Tensor[(1050), int8], Tensor[(12, 6, 12), float64]) {
    %472 = @func_4637() /* ty=(Tensor[(7, 16, 7), float64],) */;
    %473 = cast(meta[relay.Constant][15] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
    %474 = reshape(%473, newshape=[15, 7, 4]) /* ty=Tensor[(15, 7, 4), float32] */;
    %475 = @func_4581() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(6, 12, 6), bool], Tensor[(432), uint8], Tensor[(11, 12, 11), bool], bool) */;
    %476 = cast(meta[relay.Constant][16] /* ty=Tensor[(1050), int8] */, dtype="int8") /* ty=Tensor[(1050), int8] */;
    %477 = reshape(%476, newshape=[1050]) /* ty=Tensor[(1050), int8] */;
    %478 = @func_5981(%477) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(432), uint8], Tensor[(1050), int8], Tensor[(432), uint8]) */;
    %479 = cast(%var_6348, dtype="float32") /* ty=float32 */;
    %480 = cast(meta[relay.Constant][14] /* ty=Tensor[(864), uint16] */, dtype="uint16") /* ty=Tensor[(864), uint16] */;
    %481 = reshape(%479, newshape=[]) /* ty=float32 */;
    %482 = reshape(%480, newshape=[864]) /* ty=Tensor[(864), uint16] */;
    %483 = @func_5312(%481, %482) /* ty=(Tensor[(7, 14, 11), bool], Tensor[(7, 14, 11), float32], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64], Tensor[(240), uint32], Tensor[(12, 6, 12), uint16], Tensor[(864), uint16]) */;
    %484 = %483.6;
    %485 = cast(%484, dtype="float64") /* ty=Tensor[(12, 6, 12), float64] */;
    %486 = %472.0;
    %487 = @func_4611() /* ty=Tensor[(7, 16, 7), float32] */;
    %488 = @func_4431(%474) /* ty=Tensor[(15, 7, 4), float32] */;
    %489 = %475.0;
    %490 = %478.2;
    %491 = cosh(%485) /* ty=Tensor[(12, 6, 12), float64] */;
    (%486, %var_6348, meta[relay.Constant][14] /* ty=Tensor[(864), uint16] */, %487, %488, meta[relay.Constant][15] /* ty=Tensor[(420), float32] */, %489, %490, meta[relay.Constant][16] /* ty=Tensor[(1050), int8] */, %491)
  };
  %492(%var_6411) /* ty=(Tensor[(7, 16, 7), float64], float32, Tensor[(864), uint16], Tensor[(7, 16, 7), float32], Tensor[(15, 7, 4), float32], Tensor[(420), float32], Tensor[(7, 16, 7), float64], Tensor[(1050), int8], Tensor[(1050), int8], Tensor[(12, 6, 12), float64]) */
}

def @func_7901() -> (Tensor[(7, 16, 7), float32],) {
  %493 = @func_4611() /* ty=Tensor[(7, 16, 7), float32] */;
  (%493,)
}

def @func_8025() -> (Tensor[(7, 16, 7), float64], Tensor[(432), uint8]) {
  %494 = @func_5841() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %495 = %494.0;
  %496 = @func_7389() /* ty=Tensor[(432), uint8] */;
  (%495, %496)
}

def @func_10064(%var_10037: Tensor[(10, 3, 12), float32]) -> (Tensor[(10, 3, 12), float32], Tensor[(7, 16, 7), float64], Tensor[(1050), int8]) {
  %497 = cast(%var_10037, dtype="float32") /* ty=Tensor[(10, 3, 12), float32] */;
  %498 = cast(meta[relay.Constant][17] /* ty=Tensor[(1050), int8] */, dtype="int8") /* ty=Tensor[(1050), int8] */;
  %499 = reshape(%498, newshape=[1050]) /* ty=Tensor[(1050), int8] */;
  %500 = @func_5981(%499) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(432), uint8], Tensor[(1050), int8], Tensor[(432), uint8]) */;
  %501 = cos(%497) /* ty=Tensor[(10, 3, 12), float32] */;
  %502 = %500.0;
  (%501, %502, meta[relay.Constant][17] /* ty=Tensor[(1050), int8] */)
}

def @func_7863() -> (Tensor[(240), uint32], Tensor[(5, 3, 16), uint32], Tensor[(7, 16, 7), float32], Tensor[(784), float64], Tensor[(90), int8], Tensor[(180), int8]) {
  %503 = @func_6896() /* ty=Tensor[(240), uint32] */;
  %504 = cast(%503, dtype="uint32") /* ty=Tensor[(240), uint32] */;
  %505 = cast(%503, dtype="uint32") /* ty=Tensor[(240), uint32] */;
  %506 = reshape(%504, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), uint32] */;
  %507 = reshape(%505, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), uint32] */;
  %508 = cast(meta[relay.Constant][18] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %509 = cast(meta[relay.Constant][19] /* ty=Tensor[(90), int8] */, dtype="int8") /* ty=Tensor[(90), int8] */;
  %510 = cast(meta[relay.Constant][20] /* ty=Tensor[(180), int8] */, dtype="int8") /* ty=Tensor[(180), int8] */;
  %511 = reshape(%508, newshape=[7, 16, 7]) /* ty=Tensor[(7, 16, 7), float64] */;
  %512 = reshape(%509, newshape=[90]) /* ty=Tensor[(90), int8] */;
  %513 = reshape(%510, newshape=[180]) /* ty=Tensor[(180), int8] */;
  %514 = @func_7476(%511, %512, %513) /* ty=(Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(2, 10, 9), int8], Tensor[(90), int8], Tensor[(180), int8], Tensor[(6, 12, 6), float32]) */;
  %515 = @func_2836(%506, %507) /* ty=Tensor[(5, 3, 16), uint32] */;
  %516 = %514.0;
  (%503, %515, %516, meta[relay.Constant][18] /* ty=Tensor[(784), float64] */, meta[relay.Constant][19] /* ty=Tensor[(90), int8] */, meta[relay.Constant][20] /* ty=Tensor[(180), int8] */)
}

def @func_10336() -> (Tensor[(7, 16, 7), float64], Tensor[(8, 7, 11), float64], Tensor[(240), uint32]) {
  %522 = fn () -> (Tensor[(7, 16, 7), float64], Tensor[(8, 7, 11), float64], Tensor[(240), uint32]) {
    %517 = @func_5774() /* ty=(Tensor[(7, 16, 7), float64],) */;
    %518 = @func_7264() /* ty=(Tensor[(432), uint8], Tensor[(8, 7, 11), float64]) */;
    %519 = %517.0;
    %520 = %518.1;
    %521 = @func_6926() /* ty=Tensor[(240), uint32] */;
    (%519, %520, %521)
  };
  %522() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(8, 7, 11), float64], Tensor[(240), uint32]) */
}

def @func_11280() -> (Tensor[(8, 7, 11), float64],) {
  @func_11278() /* ty=(Tensor[(8, 7, 11), float64],) */
}

def @func_11986() -> (Tensor[(240), uint32], Tensor[(7, 16, 7), float32], Tensor[(180), int8]) {
  @func_11984() /* ty=(Tensor[(240), uint32], Tensor[(7, 16, 7), float32], Tensor[(180), int8]) */
}

def @func_3777(%var_3775: bool) -> Tensor[(11, 12, 11), bool] {
  @func_3774(%var_3775) /* ty=Tensor[(11, 12, 11), bool] */
}

def @func_6683(%var_6674: Tensor[(2, 9, 1), float32]) -> (Tensor[(2, 9, 1), float32], Tensor[(7, 16, 7), float32]) {
  %523 = cast(%var_6674, dtype="float32") /* ty=Tensor[(2, 9, 1), float32] */;
  %524 = @func_5215() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %525 = tan(%523) /* ty=Tensor[(2, 9, 1), float32] */;
  %526 = %524.0;
  (%525, %526)
}

def @func_11788() -> Tensor[(7, 16, 7), float64] {
  @func_8039() /* ty=Tensor[(7, 16, 7), float64] */
}

def @func_8474() -> (Tensor[(7, 16, 7), float64],) {
  %527 = @func_4853() /* ty=(Tensor[(432), uint8], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) */;
  %528 = %527.2;
  (%528,)
}

def @func_13666() -> (Tensor[(240), uint32],) {
  %530 = fn () -> (Tensor[(240), uint32],) {
    %529 = @func_6896() /* ty=Tensor[(240), uint32] */;
    (%529,)
  };
  %530() /* ty=(Tensor[(240), uint32],) */
}

def @func_8183() -> Tensor[(7, 16, 7), float64] {
  %531 = fn () -> Tensor[(7, 16, 7), float64] {
    @func_5192() /* ty=Tensor[(7, 16, 7), float64] */
  };
  %531() /* ty=Tensor[(7, 16, 7), float64] */
}

def @func_9557() -> Tensor[(7, 16, 7), float64] {
  %532 = @func_7965() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %532.0
}

def @func_13485() -> Tensor[(7, 16, 7), float32] {
  %533 = @func_6273() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %533.0
}

def @func_12050() -> Tensor[(7, 16, 7), float64] {
  @func_11578() /* ty=Tensor[(7, 16, 7), float64] */
}

def @func_11818() -> (Tensor[(7, 16, 7), float64],) {
  %536 = fn () -> (Tensor[(7, 16, 7), float64],) {
    %534 = @func_6656() /* ty=(Tensor[(7, 16, 7), float64],) */;
    %535 = %534.0;
    (%535,)
  };
  %536() /* ty=(Tensor[(7, 16, 7), float64],) */
}

def @func_11612() -> (Tensor[(180), int8], Tensor[(7, 16, 7), float64], float32, Tensor[(864), uint16]) {
  @func_11610() /* ty=(Tensor[(180), int8], Tensor[(7, 16, 7), float64], float32, Tensor[(864), uint16]) */
}

def @func_10596() -> (Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64], Tensor[(240), uint32], Tensor[(11, 12, 11), bool]) {
  %537 = @func_9104() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %538 = @func_9043() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %539 = @func_8798() /* ty=(bool, Tensor[(11, 12, 11), bool], Tensor[(5, 3, 16), uint32], Tensor[(240), uint32]) */;
  %540 = @func_10249() /* ty=Tensor[(7, 16, 7), float32] */;
  %541 = %537.0;
  %542 = %538.0;
  %543 = @func_8755() /* ty=Tensor[(240), uint32] */;
  %544 = %539.1;
  (%540, %541, %542, %543, %544)
}

def @func_12029() -> (Tensor[(7, 16, 7), float32],) {
  @func_12027() /* ty=(Tensor[(7, 16, 7), float32],) */
}

def @main(%var_14296: Tensor[(2, 14, 4), float32]) -> (Tensor[(2, 14, 4), int8], Tensor[(7, 16, 7), uint8], Tensor[(784), float64], Tensor[(2, 14, 4), uint8]) {
  %545 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 14, 4), float32] */, dtype="float32") /* ty=Tensor[(2, 14, 4), float32] */;
  %546 = asin(%545) /* ty=Tensor[(2, 14, 4), float32] */;
  %547 = cast(%546, dtype="int8") /* ty=Tensor[(2, 14, 4), int8] */;
  %548 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(2, 14, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %549 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 14, 4), float32] */, dtype="int8") /* ty=Tensor[(2, 14, 4), int8] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %551 = cast(meta[relay.Constant][22] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %552 = reshape(%551, newshape=[7, 16, 7]) /* ty=Tensor[(7, 16, 7), float64] */;
  %553 = @func_6195(%552) /* ty=(Tensor[(4, 196), float64], Tensor[(7, 16, 7), uint8]) */;
  %554 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 14, 4), float32] */, dtype="float32") /* ty=Tensor[(2, 14, 4), float32] */;
  %555 = cos(%554) /* ty=Tensor[(2, 14, 4), float32] */;
  %556 = cast(%var_14296, dtype="uint8") /* ty=Tensor[(2, 14, 4), uint8] */;
  %557 = shape_of(%555, dtype="int32") /* ty=Tensor[(3), int32] */;
  %558 = cast(%555, dtype="uint8") /* ty=Tensor[(2, 14, 4), uint8] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %560 = logical_xor(%549, %550) /* ty=Tensor[(2, 14, 4), int8] */;
  %561 = %553.1;
  %562 = subtract(%558, %559) /* ty=Tensor[(2, 14, 4), uint8] */;
  (%560, %561, meta[relay.Constant][22] /* ty=Tensor[(784), float64] */, %562)
}

def @func_7692(%var_7684: float32, %var_7685: Tensor[(432, 2), uint16], %var_7690: Tensor[(432), uint8]) -> (Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(864), uint16], float32, Tensor[(432, 2), uint16], Tensor[(6, 12, 6), bool], Tensor[(1050), int8], Tensor[(432), uint8]) {
  %563 = @func_4908() /* ty=(Tensor[(7, 16, 7), float32], Tensor[(11, 12, 11), bool]) */;
  %564 = cast(%var_7684, dtype="float32") /* ty=float32 */;
  %565 = cast(%var_7685, dtype="uint16") /* ty=Tensor[(432, 2), uint16] */;
  %566 = reshape(%564, newshape=[]) /* ty=float32 */;
  %567 = reshape(%565, newshape=[864]) /* ty=Tensor[(864), uint16] */;
  %568 = @func_5312(%566, %567) /* ty=(Tensor[(7, 14, 11), bool], Tensor[(7, 14, 11), float32], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64], Tensor[(240), uint32], Tensor[(12, 6, 12), uint16], Tensor[(864), uint16]) */;
  %569 = cast(meta[relay.Constant][23] /* ty=Tensor[(1050), int8] */, dtype="int8") /* ty=Tensor[(1050), int8] */;
  %570 = cast(meta[relay.Constant][23] /* ty=Tensor[(1050), int8] */, dtype="int8") /* ty=Tensor[(1050), int8] */;
  %571 = cast(meta[relay.Constant][23] /* ty=Tensor[(1050), int8] */, dtype="int8") /* ty=Tensor[(1050), int8] */;
  %572 = cast(%var_7690, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %573 = reshape(%569, newshape=[15, 5, 14]) /* ty=Tensor[(15, 5, 14), int8] */;
  %574 = reshape(%570, newshape=[15, 5, 14]) /* ty=Tensor[(15, 5, 14), int8] */;
  %575 = reshape(%571, newshape=[15, 5, 14]) /* ty=Tensor[(15, 5, 14), int8] */;
  %576 = reshape(%572, newshape=[432]) /* ty=Tensor[(432), uint8] */;
  %577 = @func_2677(%573, %574, %575, %576) /* ty=(Tensor[(15, 5, 14), float32], Tensor[(6, 12, 6), bool], Tensor[(9), float32], Tensor[(432), uint8], Tensor[(6, 12, 6), bool]) */;
  %578 = @func_4611() /* ty=Tensor[(7, 16, 7), float32] */;
  %579 = %563.0;
  %580 = %568.7;
  %581 = %577.4;
  (%578, %579, %580, %var_7684, %var_7685, %581, meta[relay.Constant][23] /* ty=Tensor[(1050), int8] */, %var_7690)
}

def @func_7391() -> Tensor[(432), uint8] {
  @func_7389() /* ty=Tensor[(432), uint8] */
}

def @func_9218() -> (Tensor[(240), uint32],) {
  @func_9216() /* ty=(Tensor[(240), uint32],) */
}

def @func_4684(%var_4666: Tensor[(16, 7, 9), float32]) -> (Tensor[(16, 7, 9), float32], Tensor[(7, 16, 7), float32]) {
  %582 = cast(%var_4666, dtype="float32") /* ty=Tensor[(16, 7, 9), float32] */;
  %583 = sin(%582) /* ty=Tensor[(16, 7, 9), float32] */;
  %584 = @func_4611() /* ty=Tensor[(7, 16, 7), float32] */;
  (%583, %584)
}

def @func_9031() -> (Tensor[(7, 16, 7), float64],) {
  @func_9029() /* ty=(Tensor[(7, 16, 7), float64],) */
}

def @func_7985() -> (Tensor[(7, 16, 7), float64],) {
  %585 = @func_7616() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float32]) */;
  %586 = %585.0;
  (%586,)
}

def @func_9258(%var_9256: Tensor[(432), uint8]) -> (Tensor[(7, 16, 7), float32], Tensor[(8, 7, 11), float64], Tensor[(1050), int8], Tensor[(432), uint8]) {
  @func_9255(%var_9256) /* ty=(Tensor[(7, 16, 7), float32], Tensor[(8, 7, 11), float64], Tensor[(1050), int8], Tensor[(432), uint8]) */
}

def @func_8444() -> (Tensor[(7, 16, 7), bool],) {
  @func_8442() /* ty=(Tensor[(7, 16, 7), bool],) */
}

def @func_8362() -> Tensor[(7, 16, 7), float64] {
  @func_5192() /* ty=Tensor[(7, 16, 7), float64] */
}

def @func_9931(%var_9930: Tensor[(1, 9), float32]) -> (Tensor[(7, 16, 7), float32], Tensor[(432), uint8], Tensor[(1, 9), float32], Tensor[(432), uint8], Tensor[(7, 16, 7), float32]) {
  %597 = fn (%var_9920: Tensor[(1, 9), float32]) -> (Tensor[(7, 16, 7), float32], Tensor[(432), uint8], Tensor[(1, 9), float32], Tensor[(432), uint8], Tensor[(7, 16, 7), float32]) {
    %587 = @func_4728() /* ty=(Tensor[(7, 16, 7), float32],) */;
    %588 = cast(%var_9920, dtype="float32") /* ty=Tensor[(1, 9), float32] */;
    %589 = cast(meta[relay.Constant][24] /* ty=Tensor[(432), uint8] */, dtype="uint8") /* ty=Tensor[(432), uint8] */;
    %590 = reshape(%588, newshape=[9, 1]) /* ty=Tensor[(9, 1), float32] */;
    %591 = reshape(%589, newshape=[432]) /* ty=Tensor[(432), uint8] */;
    %592 = @func_8936(%590, %591) /* ty=(Tensor[(180), int8], Tensor[(1, 3, 3), float32], Tensor[(9, 1), float32], Tensor[(432), uint8], Tensor[(8, 7, 11), float32]) */;
    %593 = @func_4908() /* ty=(Tensor[(7, 16, 7), float32], Tensor[(11, 12, 11), bool]) */;
    %594 = %587.0;
    %595 = %592.3;
    %596 = %593.0;
    (%594, %595, %var_9920, meta[relay.Constant][24] /* ty=Tensor[(432), uint8] */, %596)
  };
  %597(%var_9930) /* ty=(Tensor[(7, 16, 7), float32], Tensor[(432), uint8], Tensor[(1, 9), float32], Tensor[(432), uint8], Tensor[(7, 16, 7), float32]) */
}

def @func_8364() -> Tensor[(7, 16, 7), float64] {
  @func_8362() /* ty=Tensor[(7, 16, 7), float64] */
}

def @func_11587() -> (Tensor[(3, 16, 6), float64],) {
  %598 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 16, 6), float64] */, dtype="float64") /* ty=Tensor[(3, 16, 6), float64] */;
  %599 = erf(%598) /* ty=Tensor[(3, 16, 6), float64] */;
  (%599,)
}

def @func_11090(%var_11088: Tensor[(7, 16, 7), float32]) -> Tensor[(7, 16, 7), bool] {
  @func_11087(%var_11088) /* ty=Tensor[(7, 16, 7), bool] */
}

def @func_8397() -> (Tensor[(4, 196), uint8], Tensor[(7, 16, 7), float32]) {
  %611 = fn () -> (Tensor[(4, 196), uint8], Tensor[(7, 16, 7), float32]) {
    %600 = @func_4510() /* ty=(Tensor[(8, 7, 11), float64], Tensor[(7, 16, 7), float64], Tensor[(4, 196), float64], Tensor[(240), uint32]) */;
    %601 = %600.2;
    %602 = cast(%601, dtype="float32") /* ty=Tensor[(4, 196), float32] */;
    %603 = sigmoid(%602) /* ty=Tensor[(4, 196), float32] */;
    %604 = cast(%601, dtype="uint8") /* ty=Tensor[(4, 196), uint8] */;
    %605 = shape_of(%603, dtype="int32") /* ty=Tensor[(2), int32] */;
    %606 = cast(%603, dtype="uint8") /* ty=Tensor[(4, 196), uint8] */;
    %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %608 = @func_5215() /* ty=(Tensor[(7, 16, 7), float32],) */;
    %609 = bitwise_and(%606, %607) /* ty=Tensor[(4, 196), uint8] */;
    %610 = %608.0;
    (%609, %610)
  };
  %611() /* ty=(Tensor[(4, 196), uint8], Tensor[(7, 16, 7), float32]) */
}

def @func_12330(%var_12328: float32, %var_12329: Tensor[(550), float32]) -> (Tensor[(12, 1, 8), float32], Tensor[(7, 16, 7), float32], Tensor[(11, 10, 5), uint8], Tensor[(5, 3, 16), uint32]) {
  %628 = fn (%var_12283: float32, %var_12299: Tensor[(550), float32]) -> (Tensor[(12, 1, 8), float32], Tensor[(7, 16, 7), float32], Tensor[(11, 10, 5), uint8], Tensor[(5, 3, 16), uint32]) {
    %612 = cast(%var_12283, dtype="float32") /* ty=float32 */;
    %613 = cast(meta[relay.Constant][26] /* ty=Tensor[(12, 1, 8), float32] */, dtype="float32") /* ty=Tensor[(12, 1, 8), float32] */;
    %614 = @func_11517() /* ty=(Tensor[(7, 16, 7), float32],) */;
    %615 = cast(%var_12299, dtype="float32") /* ty=Tensor[(550), float32] */;
    %616 = reshape(%615, newshape=[550]) /* ty=Tensor[(550), float32] */;
    %617 = @func_7033(%616) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(11, 10, 5), float32], Tensor[(550), float32]) */;
    %618 = %617.1;
    %619 = cast(%var_12299, dtype="uint8") /* ty=Tensor[(550), uint8] */;
    %620 = shape_of(%618, dtype="int32") /* ty=Tensor[(3), int32] */;
    %621 = cast(%618, dtype="uint8") /* ty=Tensor[(11, 10, 5), uint8] */;
    %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %623 = @func_7863() /* ty=(Tensor[(240), uint32], Tensor[(5, 3, 16), uint32], Tensor[(7, 16, 7), float32], Tensor[(784), float64], Tensor[(90), int8], Tensor[(180), int8]) */;
    %624 = divide(%612, %613) /* ty=Tensor[(12, 1, 8), float32] */;
    %625 = %614.0;
    %626 = subtract(%621, %622) /* ty=Tensor[(11, 10, 5), uint8] */;
    %627 = %623.1;
    (%624, %625, %626, %627)
  };
  %628(%var_12328, %var_12329) /* ty=(Tensor[(12, 1, 8), float32], Tensor[(7, 16, 7), float32], Tensor[(11, 10, 5), uint8], Tensor[(5, 3, 16), uint32]) */
}

def @func_5984(%var_5982: Tensor[(1050), int8]) -> (Tensor[(7, 16, 7), float64], Tensor[(432), uint8], Tensor[(1050), int8], Tensor[(432), uint8]) {
  @func_5981(%var_5982) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(432), uint8], Tensor[(1050), int8], Tensor[(432), uint8]) */
}

def @func_11470() -> (Tensor[(8, 7, 11), float64], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32]) {
  %635 = fn () -> (Tensor[(8, 7, 11), float64], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32]) {
    %629 = @func_4510() /* ty=(Tensor[(8, 7, 11), float64], Tensor[(7, 16, 7), float64], Tensor[(4, 196), float64], Tensor[(240), uint32]) */;
    %630 = @func_10861() /* ty=(Tensor[(432), uint8], Tensor[(240), uint32], Tensor[(7, 16, 7), float32]) */;
    %631 = %629.0;
    %632 = @func_5852() /* ty=Tensor[(7, 16, 7), float32] */;
    %633 = @func_10249() /* ty=Tensor[(7, 16, 7), float32] */;
    %634 = %630.2;
    (%631, %632, %633, %634)
  };
  %635() /* ty=(Tensor[(8, 7, 11), float64], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32]) */
}

def @func_5718() -> (Tensor[(4, 196), float64],) {
  @func_5716() /* ty=(Tensor[(4, 196), float64],) */
}

def @func_9029() -> (Tensor[(7, 16, 7), float64],) {
  %636 = @func_5192() /* ty=Tensor[(7, 16, 7), float64] */;
  (%636,)
}

def @func_4855() -> (Tensor[(432), uint8], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) {
  @func_4853() /* ty=(Tensor[(432), uint8], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) */
}

def @func_10861() -> (Tensor[(432), uint8], Tensor[(240), uint32], Tensor[(7, 16, 7), float32]) {
  %637 = @func_9216() /* ty=(Tensor[(240), uint32],) */;
  %638 = @func_10822() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %639 = @func_7389() /* ty=Tensor[(432), uint8] */;
  %640 = %637.0;
  %641 = %638.0;
  (%639, %640, %641)
}

def @func_6499() -> (Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32]) {
  %642 = @func_4853() /* ty=(Tensor[(432), uint8], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) */;
  %643 = @func_6273() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %644 = @func_5215() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %645 = @func_5841() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %646 = %645.0;
  %647 = cast(%646, dtype="float32") /* ty=Tensor[(7, 16, 7), float32] */;
  %648 = %642.2;
  %649 = %643.0;
  %650 = %644.0;
  %651 = erf(%647) /* ty=Tensor[(7, 16, 7), float32] */;
  (%648, %649, %650, %651)
}

def @func_4728() -> (Tensor[(7, 16, 7), float32],) {
  %652 = @func_4637() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %653 = %652.0;
  %654 = cast(%653, dtype="float32") /* ty=Tensor[(7, 16, 7), float32] */;
  %655 = cos(%654) /* ty=Tensor[(7, 16, 7), float32] */;
  (%655,)
}

def @func_11984() -> (Tensor[(240), uint32], Tensor[(7, 16, 7), float32], Tensor[(180), int8]) {
  %656 = @func_9216() /* ty=(Tensor[(240), uint32],) */;
  %657 = @func_7812() /* ty=(Tensor[(8, 7, 11), float32], Tensor[(7, 16, 7), float32]) */;
  %658 = @func_8886() /* ty=(Tensor[(180), int8],) */;
  %659 = %656.0;
  %660 = %657.1;
  %661 = %658.0;
  (%659, %660, %661)
}

def @func_7360() -> (Tensor[(7, 16, 7), float32],) {
  %662 = @func_6273() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %663 = %662.0;
  (%663,)
}

def @func_13107() -> (Tensor[(8, 7, 11), float32], Tensor[(7, 16, 7), float64]) {
  @func_13105() /* ty=(Tensor[(8, 7, 11), float32], Tensor[(7, 16, 7), float64]) */
}

def @func_6898() -> Tensor[(240), uint32] {
  @func_6896() /* ty=Tensor[(240), uint32] */
}

def @func_7480(%var_7477: Tensor[(7, 16, 7), float64], %var_7478: Tensor[(90), int8], %var_7479: Tensor[(180), int8]) -> (Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(2, 10, 9), int8], Tensor[(90), int8], Tensor[(180), int8], Tensor[(6, 12, 6), float32]) {
  %682 = fn (%var_7425: Tensor[(7, 16, 7), float64], %var_7448: Tensor[(90), int8], %var_7449: Tensor[(180), int8]) -> (Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(2, 10, 9), int8], Tensor[(90), int8], Tensor[(180), int8], Tensor[(6, 12, 6), float32]) {
    %664 = @func_7360() /* ty=(Tensor[(7, 16, 7), float32],) */;
    %665 = @func_5774() /* ty=(Tensor[(7, 16, 7), float64],) */;
    %666 = %665.0;
    %667 = cast(%var_7425, dtype="uint32") /* ty=Tensor[(7, 16, 7), uint32] */;
    %668 = shape_of(%666, dtype="int32") /* ty=Tensor[(3), int32] */;
    %669 = cast(%666, dtype="uint32") /* ty=Tensor[(7, 16, 7), uint32] */;
    %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %671 = left_shift(%669, %670) /* ty=Tensor[(7, 16, 7), uint32] */;
    %672 = cast(%671, dtype="float32") /* ty=Tensor[(7, 16, 7), float32] */;
    %673 = cast(%var_7448, dtype="int8") /* ty=Tensor[(90), int8] */;
    %674 = cast(%var_7449, dtype="int8") /* ty=Tensor[(180), int8] */;
    %675 = reshape(%673, newshape=[1, 10, 9]) /* ty=Tensor[(1, 10, 9), int8] */;
    %676 = reshape(%674, newshape=[2, 10, 9]) /* ty=Tensor[(2, 10, 9), int8] */;
    %677 = @func_7342() /* ty=(Tensor[(6, 12, 6), float32],) */;
    %678 = %664.0;
    %679 = atan(%672) /* ty=Tensor[(7, 16, 7), float32] */;
    %680 = @func_3937(%675, %676) /* ty=Tensor[(2, 10, 9), int8] */;
    %681 = %677.0;
    (%678, %679, %680, %var_7448, %var_7449, %681)
  };
  %682(%var_7477, %var_7478, %var_7479) /* ty=(Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(2, 10, 9), int8], Tensor[(90), int8], Tensor[(180), int8], Tensor[(6, 12, 6), float32]) */
}

def @func_5217() -> (Tensor[(7, 16, 7), float32],) {
  @func_5215() /* ty=(Tensor[(7, 16, 7), float32],) */
}

def @func_7066(%var_7064: Tensor[(550), float32]) -> (Tensor[(7, 16, 7), float32], Tensor[(11, 10, 5), float32], Tensor[(550), float32]) {
  @func_7063(%var_7064) /* ty=(Tensor[(7, 16, 7), float32], Tensor[(11, 10, 5), float32], Tensor[(550), float32]) */
}

def @func_5565(%var_5564: Tensor[(1, 4, 12), float64]) -> (Tensor[(1, 4, 12), float64], bool) {
  %687 = fn (%var_5538: Tensor[(1, 4, 12), float64]) -> (Tensor[(1, 4, 12), float64], bool) {
    %683 = cast(%var_5538, dtype="float64") /* ty=Tensor[(1, 4, 12), float64] */;
    %684 = @func_4581() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(6, 12, 6), bool], Tensor[(432), uint8], Tensor[(11, 12, 11), bool], bool) */;
    %685 = erf(%683) /* ty=Tensor[(1, 4, 12), float64] */;
    %686 = %684.4;
    (%685, %686)
  };
  %687(%var_5564) /* ty=(Tensor[(1, 4, 12), float64], bool) */
}

def @func_8940(%var_8938: Tensor[(9, 1), float32], %var_8939: Tensor[(432), uint8]) -> (Tensor[(180), int8], Tensor[(1, 3, 3), float32], Tensor[(9, 1), float32], Tensor[(432), uint8], Tensor[(8, 7, 11), float32]) {
  @func_8936(%var_8938, %var_8939) /* ty=(Tensor[(180), int8], Tensor[(1, 3, 3), float32], Tensor[(9, 1), float32], Tensor[(432), uint8], Tensor[(8, 7, 11), float32]) */
}

def @func_6599() -> Tensor[(7, 16, 7), float64] {
  @func_6597() /* ty=Tensor[(7, 16, 7), float64] */
}

def @func_4638() -> (Tensor[(7, 16, 7), float64],) {
  %690 = fn () -> (Tensor[(7, 16, 7), float64],) {
    %688 = @func_4581() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(6, 12, 6), bool], Tensor[(432), uint8], Tensor[(11, 12, 11), bool], bool) */;
    %689 = %688.0;
    (%689,)
  };
  %690() /* ty=(Tensor[(7, 16, 7), float64],) */
}

def @func_4982() -> (Tensor[(7, 16, 7), float32],) {
  @func_4980() /* ty=(Tensor[(7, 16, 7), float32],) */
}

def @func_3774(%var_3757: bool) -> Tensor[(11, 12, 11), bool] {
  %691 = cast(%var_3757, dtype="bool") /* ty=bool */;
  %692 = cast(meta[relay.Constant][27] /* ty=Tensor[(11, 12, 11), bool] */, dtype="bool") /* ty=Tensor[(11, 12, 11), bool] */;
  logical_and(%691, %692) /* ty=Tensor[(11, 12, 11), bool] */
}

def @func_11214(%var_11212: Tensor[(7, 16, 7), float32], %var_11213: Tensor[(1050), int8]) -> (Tensor[(7, 16, 7), bool], Tensor[(15, 5, 14), float32], Tensor[(1050), int8], Tensor[(432), uint8]) {
  @func_11210(%var_11212, %var_11213) /* ty=(Tensor[(7, 16, 7), bool], Tensor[(15, 5, 14), float32], Tensor[(1050), int8], Tensor[(432), uint8]) */
}

def @func_9105() -> (Tensor[(7, 16, 7), float32],) {
  %695 = fn () -> (Tensor[(7, 16, 7), float32],) {
    %693 = @func_7812() /* ty=(Tensor[(8, 7, 11), float32], Tensor[(7, 16, 7), float32]) */;
    %694 = %693.1;
    (%694,)
  };
  %695() /* ty=(Tensor[(7, 16, 7), float32],) */
}

def @func_11589() -> (Tensor[(3, 16, 6), float64],) {
  @func_11587() /* ty=(Tensor[(3, 16, 6), float64],) */
}

def @func_13155(%var_13153: Tensor[(8, 7, 11), float64]) -> (Tensor[(8, 7, 11), uint8],) {
  @func_13152(%var_13153) /* ty=(Tensor[(8, 7, 11), uint8],) */
}

def @func_5595(%var_5593: Tensor[(7, 4, 4), float64], %var_5594: Tensor[(7, 4, 4), float64]) -> Tensor[(7, 4, 4), float64] {
  %700 = fn (%var_5583: Tensor[(7, 4, 4), float64], %var_5584: Tensor[(7, 4, 4), float64]) -> Tensor[(7, 4, 4), float64] {
    %696 = cast(%var_5584, dtype="float64") /* ty=Tensor[(7, 4, 4), float64] */;
    %697 = shape_of(%var_5583, dtype="int32") /* ty=Tensor[(3), int32] */;
    %698 = cast(%var_5583, dtype="float64") /* ty=Tensor[(7, 4, 4), float64] */;
    %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_divide(%698, %699) /* ty=Tensor[(7, 4, 4), float64] */
  };
  %700(%var_5593, %var_5594) /* ty=Tensor[(7, 4, 4), float64] */
}

def @func_1534(%var_1532: Tensor[(1, 3, 3), float32], %var_1533: Tensor[(216, 2), uint8]) -> (Tensor[(6, 12, 6), bool], Tensor[(216, 2), uint8], Tensor[(1, 3, 3), float32], Tensor[(1, 3, 3), float64]) {
  %712 = fn (%var_1514: Tensor[(1, 3, 3), float32], %var_1518: Tensor[(216, 2), uint8]) -> (Tensor[(6, 12, 6), bool], Tensor[(216, 2), uint8], Tensor[(1, 3, 3), float32], Tensor[(1, 3, 3), float64]) {
    %701 = cast(%var_1518, dtype="uint8") /* ty=Tensor[(216, 2), uint8] */;
    %702 = cast(%var_1518, dtype="uint8") /* ty=Tensor[(216, 2), uint8] */;
    %703 = reshape(%701, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), uint8] */;
    %704 = reshape(%702, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), uint8] */;
    %705 = cast(%var_1514, dtype="float32") /* ty=Tensor[(1, 3, 3), float32] */;
    %706 = atan(%705) /* ty=Tensor[(1, 3, 3), float32] */;
    %707 = cast(%706, dtype="float32") /* ty=Tensor[(1, 3, 3), float32] */;
    %708 = cast(%706, dtype="float64") /* ty=Tensor[(1, 3, 3), float64] */;
    %709 = @func_1019(%703, %704) /* ty=Tensor[(6, 12, 6), bool] */;
    %710 = cosh(%707) /* ty=Tensor[(1, 3, 3), float32] */;
    %711 = asinh(%708) /* ty=Tensor[(1, 3, 3), float64] */;
    (%709, %var_1518, %710, %711)
  };
  %712(%var_1532, %var_1533) /* ty=(Tensor[(6, 12, 6), bool], Tensor[(216, 2), uint8], Tensor[(1, 3, 3), float32], Tensor[(1, 3, 3), float64]) */
}

def @func_8461() -> (Tensor[(240), uint32], Tensor[(7, 16, 7), float64]) {
  %713 = @func_7965() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %714 = @func_6896() /* ty=Tensor[(240), uint32] */;
  %715 = %713.0;
  (%714, %715)
}

def @func_13105() -> (Tensor[(8, 7, 11), float32], Tensor[(7, 16, 7), float64]) {
  %716 = @func_7812() /* ty=(Tensor[(8, 7, 11), float32], Tensor[(7, 16, 7), float32]) */;
  %717 = %716.0;
  %718 = @func_12733() /* ty=Tensor[(7, 16, 7), float64] */;
  (%717, %718)
}

def @func_11356(%var_11355: Tensor[(9), float32]) -> (Tensor[(432), uint8], Tensor[(8, 7, 11), float32], Tensor[(9), float32]) {
  %727 = fn (%var_11332: Tensor[(9), float32]) -> (Tensor[(432), uint8], Tensor[(8, 7, 11), float32], Tensor[(9), float32]) {
    %719 = @func_7264() /* ty=(Tensor[(432), uint8], Tensor[(8, 7, 11), float64]) */;
    %720 = cast(%var_11332, dtype="float32") /* ty=Tensor[(9), float32] */;
    %721 = %719.0;
    %722 = cast(%721, dtype="uint8") /* ty=Tensor[(432), uint8] */;
    %723 = reshape(%720, newshape=[9, 1]) /* ty=Tensor[(9, 1), float32] */;
    %724 = reshape(%722, newshape=[432]) /* ty=Tensor[(432), uint8] */;
    %725 = @func_8936(%723, %724) /* ty=(Tensor[(180), int8], Tensor[(1, 3, 3), float32], Tensor[(9, 1), float32], Tensor[(432), uint8], Tensor[(8, 7, 11), float32]) */;
    %726 = %725.4;
    (%721, %726, %var_11332)
  };
  %727(%var_11355) /* ty=(Tensor[(432), uint8], Tensor[(8, 7, 11), float32], Tensor[(9), float32]) */
}

def @func_7697(%var_7694: float32, %var_7695: Tensor[(432, 2), uint16], %var_7696: Tensor[(432), uint8]) -> (Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(864), uint16], float32, Tensor[(432, 2), uint16], Tensor[(6, 12, 6), bool], Tensor[(1050), int8], Tensor[(432), uint8]) {
  @func_7692(%var_7694, %var_7695, %var_7696) /* ty=(Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(864), uint16], float32, Tensor[(432, 2), uint16], Tensor[(6, 12, 6), bool], Tensor[(1050), int8], Tensor[(432), uint8]) */
}

def @func_8638(%var_8636: Tensor[(10, 15, 9), float32]) -> (Tensor[(10, 15, 9), float32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) {
  @func_8635(%var_8636) /* ty=(Tensor[(10, 15, 9), float32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) */
}

def @func_9043() -> (Tensor[(7, 16, 7), float64],) {
  %728 = @func_8025() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(432), uint8]) */;
  %729 = %728.0;
  (%729,)
}

def @func_10824() -> (Tensor[(7, 16, 7), float32],) {
  @func_10822() /* ty=(Tensor[(7, 16, 7), float32],) */
}

def @func_7813() -> (Tensor[(8, 7, 11), float32], Tensor[(7, 16, 7), float32]) {
  %736 = fn () -> (Tensor[(8, 7, 11), float32], Tensor[(7, 16, 7), float32]) {
    %730 = @func_7537() /* ty=(Tensor[(432), uint8], Tensor[(8, 7, 11), float64]) */;
    %731 = %730.1;
    %732 = cast(%731, dtype="float32") /* ty=Tensor[(8, 7, 11), float32] */;
    %733 = @func_6499() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32]) */;
    %734 = atan(%732) /* ty=Tensor[(8, 7, 11), float32] */;
    %735 = %733.1;
    (%734, %735)
  };
  %736() /* ty=(Tensor[(8, 7, 11), float32], Tensor[(7, 16, 7), float32]) */
}

def @func_10863() -> (Tensor[(432), uint8], Tensor[(240), uint32], Tensor[(7, 16, 7), float32]) {
  @func_10861() /* ty=(Tensor[(432), uint8], Tensor[(240), uint32], Tensor[(7, 16, 7), float32]) */
}

def @func_12134(%var_12132: Tensor[(5, 4, 5), uint64], %var_12133: Tensor[(5, 4, 5), uint64]) -> (Tensor[(6, 12, 6), bool], Tensor[(432), uint8], Tensor[(5, 4, 5), float32], Tensor[(7, 16, 7), float64]) {
  @func_12130(%var_12132, %var_12133) /* ty=(Tensor[(6, 12, 6), bool], Tensor[(432), uint8], Tensor[(5, 4, 5), float32], Tensor[(7, 16, 7), float64]) */
}

def @func_10717() -> Tensor[(7, 16, 7), float64] {
  %737 = @func_9029() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %737.0
}

def @func_11580() -> Tensor[(7, 16, 7), float64] {
  @func_11578() /* ty=Tensor[(7, 16, 7), float64] */
}

def @func_10186() -> (Tensor[(11, 12, 11), float32], Tensor[(11, 12, 11), float64], Tensor[(7, 16, 7), float32]) {
  %738 = @func_4772() /* ty=(Tensor[(432), uint8], Tensor[(11, 12, 11), bool], Tensor[(11, 12, 11), bool], bool) */;
  %739 = %738.1;
  %740 = cast(meta[relay.Constant][28] /* ty=Tensor[(11, 12, 11), bool] */, dtype="float32") /* ty=Tensor[(11, 12, 11), float32] */;
  %741 = shape_of(%739, dtype="int32") /* ty=Tensor[(3), int32] */;
  %742 = cast(%739, dtype="float32") /* ty=Tensor[(11, 12, 11), float32] */;
  %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %744 = cast(meta[relay.Constant][28] /* ty=Tensor[(11, 12, 11), bool] */, dtype="float64") /* ty=Tensor[(11, 12, 11), float64] */;
  %745 = @func_6499() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32]) */;
  %746 = power(%742, %743) /* ty=Tensor[(11, 12, 11), float32] */;
  %747 = sigmoid(%744) /* ty=Tensor[(11, 12, 11), float64] */;
  %748 = %745.1;
  (%746, %747, %748)
}

def @func_10879() -> (Tensor[(8, 7, 11), float64],) {
  %749 = @func_7537() /* ty=(Tensor[(432), uint8], Tensor[(8, 7, 11), float64]) */;
  %750 = %749.1;
  (%750,)
}

def @func_12704() -> (Tensor[(180), int8], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64]) {
  @func_12702() /* ty=(Tensor[(180), int8], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64]) */
}

def @func_14108(%var_14081: Tensor[(432), uint8]) -> (Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64], Tensor[(6, 12, 6), bool], Tensor[(432), uint8]) {
  %751 = @func_10596() /* ty=(Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64], Tensor[(240), uint32], Tensor[(11, 12, 11), bool]) */;
  %752 = @func_9104() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %753 = %752.0;
  %754 = cast(%753, dtype="float64") /* ty=Tensor[(7, 16, 7), float64] */;
  %755 = cast(%var_14081, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %756 = cast(%var_14081, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %757 = reshape(%755, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), uint8] */;
  %758 = reshape(%756, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), uint8] */;
  %759 = %751.0;
  %760 = atanh(%754) /* ty=Tensor[(7, 16, 7), float64] */;
  %761 = @func_1019(%757, %758) /* ty=Tensor[(6, 12, 6), bool] */;
  (%759, %760, %761, %var_14081)
}

def @func_6529() -> (Tensor[(7, 16, 7), float32],) {
  %762 = @func_6273() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %763 = %762.0;
  (%763,)
}

def @func_11735() -> (Tensor[(7, 16, 7), float32],) {
  %764 = @func_11517() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %765 = %764.0;
  (%765,)
}

def @func_12945(%var_12944: Tensor[(2, 5, 6), float32]) -> Tensor[(2, 5, 6), float32] {
  %767 = fn (%var_12927: Tensor[(2, 5, 6), float32]) -> Tensor[(2, 5, 6), float32] {
    %766 = cast(%var_12927, dtype="float32") /* ty=Tensor[(2, 5, 6), float32] */;
    sqrt(%766) /* ty=Tensor[(2, 5, 6), float32] */
  };
  %767(%var_12944) /* ty=Tensor[(2, 5, 6), float32] */
}

def @func_7987() -> (Tensor[(7, 16, 7), float64],) {
  @func_7985() /* ty=(Tensor[(7, 16, 7), float64],) */
}

def @func_11450(%var_11448: Tensor[(8, 7, 11), float32]) -> (Tensor[(8, 7, 11), int8], Tensor[(7, 16, 7), float64], Tensor[(8, 7, 11), float64]) {
  @func_11447(%var_11448) /* ty=(Tensor[(8, 7, 11), int8], Tensor[(7, 16, 7), float64], Tensor[(8, 7, 11), float64]) */
}

def @func_11087(%var_11078: Tensor[(7, 16, 7), float32]) -> Tensor[(7, 16, 7), bool] {
  %768 = @func_9104() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %769 = %768.0;
  %770 = cast(%var_11078, dtype="bool") /* ty=Tensor[(7, 16, 7), bool] */;
  %771 = shape_of(%769, dtype="int32") /* ty=Tensor[(3), int32] */;
  %772 = cast(%769, dtype="bool") /* ty=Tensor[(7, 16, 7), bool] */;
  %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%772, %773) /* ty=Tensor[(7, 16, 7), bool] */
}

def @func_6896() -> Tensor[(240), uint32] {
  %774 = @func_5336() /* ty=(Tensor[(240), uint32],) */;
  %774.0
}

def @func_13244() -> (Tensor[(7, 16, 7), float32], Tensor[(8, 7, 11), float64]) {
  %775 = @func_12403() /* ty=(Tensor[(240), uint32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) */;
  %776 = @func_11278() /* ty=(Tensor[(8, 7, 11), float64],) */;
  %777 = %775.1;
  %778 = %776.0;
  (%777, %778)
}

def @func_11737() -> (Tensor[(7, 16, 7), float32],) {
  @func_11735() /* ty=(Tensor[(7, 16, 7), float32],) */
}

def @func_12130(%var_12078: Tensor[(5, 4, 5), uint64], %var_12079: Tensor[(5, 4, 5), uint64]) -> (Tensor[(6, 12, 6), bool], Tensor[(432), uint8], Tensor[(5, 4, 5), float32], Tensor[(7, 16, 7), float64]) {
  %779 = cast(meta[relay.Constant][29] /* ty=Tensor[(432), uint8] */, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %780 = cast(meta[relay.Constant][29] /* ty=Tensor[(432), uint8] */, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %781 = reshape(%779, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), uint8] */;
  %782 = reshape(%780, newshape=[6, 12, 6]) /* ty=Tensor[(6, 12, 6), uint8] */;
  %783 = cast(%var_12079, dtype="uint64") /* ty=Tensor[(5, 4, 5), uint64] */;
  %784 = shape_of(%var_12078, dtype="int32") /* ty=Tensor[(3), int32] */;
  %785 = cast(%var_12078, dtype="uint64") /* ty=Tensor[(5, 4, 5), uint64] */;
  %786 = dyn.reshape(%783, %784, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %787 = logical_xor(%785, %786) /* ty=Tensor[(5, 4, 5), uint64] */;
  %788 = cast(%var_12079, dtype="bool") /* ty=Tensor[(5, 4, 5), bool] */;
  %789 = shape_of(%787, dtype="int32") /* ty=Tensor[(3), int32] */;
  %790 = cast(%787, dtype="bool") /* ty=Tensor[(5, 4, 5), bool] */;
  %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %792 = less(%790, %791) /* ty=Tensor[(5, 4, 5), bool] */;
  %793 = cast(%792, dtype="float64") /* ty=Tensor[(5, 4, 5), float64] */;
  %794 = sin(%793) /* ty=Tensor[(5, 4, 5), float64] */;
  %795 = cast(%794, dtype="float32") /* ty=Tensor[(5, 4, 5), float32] */;
  %796 = @func_1019(%781, %782) /* ty=Tensor[(6, 12, 6), bool] */;
  %797 = rsqrt(%795) /* ty=Tensor[(5, 4, 5), float32] */;
  %798 = @func_5192() /* ty=Tensor[(7, 16, 7), float64] */;
  (%796, meta[relay.Constant][29] /* ty=Tensor[(432), uint8] */, %797, %798)
}

def @func_8729(%var_8727: Tensor[(8, 8, 12), int32], %var_8728: Tensor[(8, 8, 12), int32]) -> Tensor[(8, 8, 12), bool] {
  %803 = fn (%var_8718: Tensor[(8, 8, 12), int32], %var_8719: Tensor[(8, 8, 12), int32]) -> Tensor[(8, 8, 12), bool] {
    %799 = cast(%var_8719, dtype="bool") /* ty=Tensor[(8, 8, 12), bool] */;
    %800 = shape_of(%var_8718, dtype="int32") /* ty=Tensor[(3), int32] */;
    %801 = cast(%var_8718, dtype="bool") /* ty=Tensor[(8, 8, 12), bool] */;
    %802 = dyn.reshape(%799, %800, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%801, %802) /* ty=Tensor[(8, 8, 12), bool] */
  };
  %803(%var_8727, %var_8728) /* ty=Tensor[(8, 8, 12), bool] */
}

def @func_5060() -> (Tensor[(6, 12, 6), bool], Tensor[(6, 12, 6), float32]) {
  @func_5058() /* ty=(Tensor[(6, 12, 6), bool], Tensor[(6, 12, 6), float32]) */
}

def @func_14111(%var_14109: Tensor[(432), uint8]) -> (Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64], Tensor[(6, 12, 6), bool], Tensor[(432), uint8]) {
  @func_14108(%var_14109) /* ty=(Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64], Tensor[(6, 12, 6), bool], Tensor[(432), uint8]) */
}

def @func_11625() -> (Tensor[(7, 16, 7), float64], Tensor[(240), uint32]) {
  @func_11623() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(240), uint32]) */
}

def @func_12459() -> (Tensor[(15, 9, 6), float32], Tensor[(240), uint32]) {
  @func_12457() /* ty=(Tensor[(15, 9, 6), float32], Tensor[(240), uint32]) */
}

def @func_4853() -> (Tensor[(432), uint8], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) {
  %804 = @func_4772() /* ty=(Tensor[(432), uint8], Tensor[(11, 12, 11), bool], Tensor[(11, 12, 11), bool], bool) */;
  %805 = @func_4637() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %806 = %805.0;
  %807 = cast(%806, dtype="float64") /* ty=Tensor[(7, 16, 7), float64] */;
  %808 = %804.0;
  %809 = @func_4611() /* ty=Tensor[(7, 16, 7), float32] */;
  %810 = sinh(%807) /* ty=Tensor[(7, 16, 7), float64] */;
  (%808, %809, %810)
}

def @func_5933(%var_5902: Tensor[(504, 2), float32]) -> (Tensor[(7, 16, 7), float64], Tensor[(16, 7, 9), uint64], Tensor[(504, 2), uint16]) {
  %811 = @func_5841() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %812 = cast(%var_5902, dtype="float32") /* ty=Tensor[(504, 2), float32] */;
  %813 = reshape(%812, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), float32] */;
  %814 = @func_4684(%813) /* ty=(Tensor[(16, 7, 9), float32], Tensor[(7, 16, 7), float32]) */;
  %815 = %814.0;
  %816 = cast(%815, dtype="uint64") /* ty=Tensor[(16, 7, 9), uint64] */;
  %817 = shape_of(%var_5902, dtype="int32") /* ty=Tensor[(2), int32] */;
  %818 = cast(%var_5902, dtype="uint64") /* ty=Tensor[(504, 2), uint64] */;
  %819 = dyn.reshape(%816, %817, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %820 = bitwise_or(%818, %819) /* ty=Tensor[(504, 2), uint64] */;
  %821 = cast(%820, dtype="float32") /* ty=Tensor[(504, 2), float32] */;
  %822 = atan(%821) /* ty=Tensor[(504, 2), float32] */;
  %823 = cast(%822, dtype="uint64") /* ty=Tensor[(504, 2), uint64] */;
  %824 = shape_of(%815, dtype="int32") /* ty=Tensor[(3), int32] */;
  %825 = cast(%815, dtype="uint64") /* ty=Tensor[(16, 7, 9), uint64] */;
  %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %827 = cast(%815, dtype="uint16") /* ty=Tensor[(16, 7, 9), uint16] */;
  %828 = shape_of(%822, dtype="int32") /* ty=Tensor[(2), int32] */;
  %829 = cast(%822, dtype="uint16") /* ty=Tensor[(504, 2), uint16] */;
  %830 = dyn.reshape(%827, %828, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %831 = %811.0;
  %832 = minimum(%825, %826) /* ty=Tensor[(16, 7, 9), uint64] */;
  %833 = right_shift(%829, %830) /* ty=Tensor[(504, 2), uint16] */;
  (%831, %832, %833)
}

def @func_8635(%var_8609: Tensor[(10, 15, 9), float32]) -> (Tensor[(10, 15, 9), float32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) {
  %834 = cast(%var_8609, dtype="float32") /* ty=Tensor[(10, 15, 9), float32] */;
  %835 = acosh(%834) /* ty=Tensor[(10, 15, 9), float32] */;
  %836 = @func_5852() /* ty=Tensor[(7, 16, 7), float32] */;
  %837 = @func_8182() /* ty=Tensor[(7, 16, 7), float64] */;
  (%835, %836, %837)
}

def @func_5761(%var_5760: Tensor[(16, 3, 10), float32]) -> Tensor[(16, 3, 10), float64] {
  %842 = fn (%var_5746: Tensor[(16, 3, 10), float32]) -> Tensor[(16, 3, 10), float64] {
    %838 = cast(meta[relay.Constant][30] /* ty=Tensor[(16, 1, 10), float32] */, dtype="float32") /* ty=Tensor[(16, 1, 10), float32] */;
    %839 = cast(%var_5746, dtype="float32") /* ty=Tensor[(16, 3, 10), float32] */;
    %840 = floor_mod(%838, %839) /* ty=Tensor[(16, 3, 10), float32] */;
    %841 = cast(%840, dtype="float64") /* ty=Tensor[(16, 3, 10), float64] */;
    cos(%841) /* ty=Tensor[(16, 3, 10), float64] */
  };
  %842(%var_5760) /* ty=Tensor[(16, 3, 10), float64] */
}

def @func_11553(%var_11552: Tensor[(18), float32]) -> (Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float32], Tensor[(18), float32]) {
  %849 = fn (%var_11535: Tensor[(18), float32]) -> (Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float32], Tensor[(18), float32]) {
    %843 = @func_4581() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(6, 12, 6), bool], Tensor[(432), uint8], Tensor[(11, 12, 11), bool], bool) */;
    %844 = cast(%var_11535, dtype="float32") /* ty=Tensor[(18), float32] */;
    %845 = reshape(%844, newshape=[2, 9, 1]) /* ty=Tensor[(2, 9, 1), float32] */;
    %846 = @func_6683(%845) /* ty=(Tensor[(2, 9, 1), float32], Tensor[(7, 16, 7), float32]) */;
    %847 = %843.0;
    %848 = %846.1;
    (%847, %848, %var_11535)
  };
  %849(%var_11552) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float32], Tensor[(18), float32]) */
}

def @func_10970(%var_10952: Tensor[(10, 1, 10), float32]) -> Tensor[(10, 1, 10), float32] {
  %850 = cast(%var_10952, dtype="float32") /* ty=Tensor[(10, 1, 10), float32] */;
  cosh(%850) /* ty=Tensor[(10, 1, 10), float32] */
}

def @func_12457() -> (Tensor[(15, 9, 6), float32], Tensor[(240), uint32]) {
  %851 = cast(meta[relay.Constant][31] /* ty=Tensor[(15, 9, 6), float32] */, dtype="float32") /* ty=Tensor[(15, 9, 6), float32] */;
  %852 = @func_10596() /* ty=(Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64], Tensor[(240), uint32], Tensor[(11, 12, 11), bool]) */;
  %853 = sinh(%851) /* ty=Tensor[(15, 9, 6), float32] */;
  %854 = %852.3;
  (%853, %854)
}

def @func_6991() -> Tensor[(432), uint8] {
  %855 = @func_4581() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(6, 12, 6), bool], Tensor[(432), uint8], Tensor[(11, 12, 11), bool], bool) */;
  %855.2
}

def @func_12831() -> Tensor[(7, 16, 7), float64] {
  %856 = @func_5774() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %856.0
}

def @func_11518() -> (Tensor[(7, 16, 7), float32],) {
  %859 = fn () -> (Tensor[(7, 16, 7), float32],) {
    %857 = @func_4908() /* ty=(Tensor[(7, 16, 7), float32], Tensor[(11, 12, 11), bool]) */;
    %858 = %857.0;
    (%858,)
  };
  %859() /* ty=(Tensor[(7, 16, 7), float32],) */
}

def @func_11269(%var_11267: Tensor[(10, 16, 8), float32]) -> Tensor[(10, 16, 8), float32] {
  @func_11266(%var_11267) /* ty=Tensor[(10, 16, 8), float32] */
}

def @func_12404() -> (Tensor[(240), uint32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) {
  %865 = fn () -> (Tensor[(240), uint32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) {
    %860 = @func_11623() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(240), uint32]) */;
    %861 = @func_5215() /* ty=(Tensor[(7, 16, 7), float32],) */;
    %862 = %860.1;
    %863 = %861.0;
    %864 = @func_8362() /* ty=Tensor[(7, 16, 7), float64] */;
    (%862, %863, %864)
  };
  %865() /* ty=(Tensor[(240), uint32], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) */
}

def @func_7537() -> (Tensor[(432), uint8], Tensor[(8, 7, 11), float64]) {
  %866 = @func_6083() /* ty=(Tensor[(11, 12, 11), bool], Tensor[(432), uint8]) */;
  %867 = @func_7264() /* ty=(Tensor[(432), uint8], Tensor[(8, 7, 11), float64]) */;
  %868 = %866.1;
  %869 = %867.1;
  (%868, %869)
}

def @func_11278() -> (Tensor[(8, 7, 11), float64],) {
  %870 = @func_10879() /* ty=(Tensor[(8, 7, 11), float64],) */;
  %871 = %870.0;
  (%871,)
}

def @func_5315(%var_5313: float32, %var_5314: Tensor[(864), uint16]) -> (Tensor[(7, 14, 11), bool], Tensor[(7, 14, 11), float32], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64], Tensor[(240), uint32], Tensor[(12, 6, 12), uint16], Tensor[(864), uint16]) {
  %891 = fn (%var_5239: float32, %var_5304: Tensor[(864), uint16]) -> (Tensor[(7, 14, 11), bool], Tensor[(7, 14, 11), float32], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64], Tensor[(240), uint32], Tensor[(12, 6, 12), uint16], Tensor[(864), uint16]) {
    %872 = cast(%var_5239, dtype="bool") /* ty=bool */;
    %873 = cast(meta[relay.Constant][32] /* ty=Tensor[(7, 14, 11), float32] */, dtype="bool") /* ty=Tensor[(7, 14, 11), bool] */;
    %874 = cast(meta[relay.Constant][32] /* ty=Tensor[(7, 14, 11), float32] */, dtype="float32") /* ty=Tensor[(7, 14, 11), float32] */;
    %875 = @func_4637() /* ty=(Tensor[(7, 16, 7), float64],) */;
    %876 = @func_5192() /* ty=Tensor[(7, 16, 7), float64] */;
    %877 = cast(%876, dtype="float64") /* ty=Tensor[(7, 16, 7), float64] */;
    %878 = cast(meta[relay.Constant][33] /* ty=Tensor[(240), uint32] */, dtype="uint32") /* ty=Tensor[(240), uint32] */;
    %879 = reshape(%877, newshape=[7, 16, 7]) /* ty=Tensor[(7, 16, 7), float64] */;
    %880 = reshape(%878, newshape=[240]) /* ty=Tensor[(240), uint32] */;
    %881 = @func_3670(%879, %880) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(5, 3, 16), uint32], Tensor[(240), uint32]) */;
    %882 = cast(%var_5239, dtype="uint16") /* ty=uint16 */;
    %883 = cast(%var_5304, dtype="uint16") /* ty=Tensor[(864), uint16] */;
    %884 = reshape(%882, newshape=[]) /* ty=uint16 */;
    %885 = reshape(%883, newshape=[12, 6, 12]) /* ty=Tensor[(12, 6, 12), uint16] */;
    %886 = less_equal(%872, %873) /* ty=Tensor[(7, 14, 11), bool] */;
    %887 = acos(%874) /* ty=Tensor[(7, 14, 11), float32] */;
    %888 = %875.0;
    %889 = %881.0;
    %890 = @func_2721(%884, %885) /* ty=Tensor[(12, 6, 12), uint16] */;
    (%886, %887, %888, %876, %889, meta[relay.Constant][33] /* ty=Tensor[(240), uint32] */, %890, %var_5304)
  };
  %891(%var_5313, %var_5314) /* ty=(Tensor[(7, 14, 11), bool], Tensor[(7, 14, 11), float32], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64], Tensor[(240), uint32], Tensor[(12, 6, 12), uint16], Tensor[(864), uint16]) */
}

def @func_11610() -> (Tensor[(180), int8], Tensor[(7, 16, 7), float64], float32, Tensor[(864), uint16]) {
  %892 = @func_8886() /* ty=(Tensor[(180), int8],) */;
  %893 = cast(8.33598f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %894 = cast(meta[relay.Constant][34] /* ty=Tensor[(864), uint16] */, dtype="uint16") /* ty=Tensor[(864), uint16] */;
  %895 = reshape(%893, newshape=[]) /* ty=float32 */;
  %896 = reshape(%894, newshape=[864]) /* ty=Tensor[(864), uint16] */;
  %897 = @func_5312(%895, %896) /* ty=(Tensor[(7, 14, 11), bool], Tensor[(7, 14, 11), float32], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64], Tensor[(240), uint32], Tensor[(12, 6, 12), uint16], Tensor[(864), uint16]) */;
  %898 = %892.0;
  %899 = %897.4;
  (%898, %899, 8.33598f /* ty=float32 */, meta[relay.Constant][34] /* ty=Tensor[(864), uint16] */)
}

def @func_13024(%var_13022: Tensor[(2, 14, 8), float64], %var_13023: Tensor[(2, 14, 8), float64]) -> (Tensor[(2, 14, 8), int16], Tensor[(2, 14, 8), float64]) {
  %909 = fn (%var_12985: Tensor[(2, 14, 8), float64], %var_13000: Tensor[(2, 14, 8), float64]) -> (Tensor[(2, 14, 8), int16], Tensor[(2, 14, 8), float64]) {
    %900 = cast(%var_12985, dtype="float64") /* ty=Tensor[(2, 14, 8), float64] */;
    %901 = acos(%900) /* ty=Tensor[(2, 14, 8), float64] */;
    %902 = cast(%var_13000, dtype="int16") /* ty=Tensor[(2, 14, 8), int16] */;
    %903 = shape_of(%901, dtype="int32") /* ty=Tensor[(3), int32] */;
    %904 = cast(%901, dtype="int16") /* ty=Tensor[(2, 14, 8), int16] */;
    %905 = dyn.reshape(%902, %903, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %906 = cast(%var_13000, dtype="float64") /* ty=Tensor[(2, 14, 8), float64] */;
    %907 = add(%904, %905) /* ty=Tensor[(2, 14, 8), int16] */;
    %908 = sqrt(%906) /* ty=Tensor[(2, 14, 8), float64] */;
    (%907, %908)
  };
  %909(%var_13022, %var_13023) /* ty=(Tensor[(2, 14, 8), int16], Tensor[(2, 14, 8), float64]) */
}

def @func_6531() -> (Tensor[(7, 16, 7), float32],) {
  @func_6529() /* ty=(Tensor[(7, 16, 7), float32],) */
}

def @func_7362() -> (Tensor[(7, 16, 7), float32],) {
  @func_7360() /* ty=(Tensor[(7, 16, 7), float32],) */
}

def @func_9517() -> Tensor[(7, 16, 7), float64] {
  %910 = @func_9381() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %910.0
}

def @func_12052() -> Tensor[(7, 16, 7), float64] {
  @func_12050() /* ty=Tensor[(7, 16, 7), float64] */
}

def @func_10200() -> Tensor[(7, 16, 7), float32] {
  @func_10198() /* ty=Tensor[(7, 16, 7), float32] */
}

def @func_4512() -> (Tensor[(8, 7, 11), float64], Tensor[(7, 16, 7), float64], Tensor[(4, 196), float64], Tensor[(240), uint32]) {
  @func_4510() /* ty=(Tensor[(8, 7, 11), float64], Tensor[(7, 16, 7), float64], Tensor[(4, 196), float64], Tensor[(240), uint32]) */
}

def @func_8041() -> Tensor[(7, 16, 7), float64] {
  @func_8039() /* ty=Tensor[(7, 16, 7), float64] */
}

def @func_12572() -> (Tensor[(240), uint32], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64]) {
  @func_12570() /* ty=(Tensor[(240), uint32], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64]) */
}

def @func_8756() -> Tensor[(240), uint32] {
  %912 = fn () -> Tensor[(240), uint32] {
    %911 = @func_7863() /* ty=(Tensor[(240), uint32], Tensor[(5, 3, 16), uint32], Tensor[(7, 16, 7), float32], Tensor[(784), float64], Tensor[(90), int8], Tensor[(180), int8]) */;
    %911.0
  };
  %912() /* ty=Tensor[(240), uint32] */
}

def @func_12733() -> Tensor[(7, 16, 7), float64] {
  @func_8039() /* ty=Tensor[(7, 16, 7), float64] */
}

def @func_13864() -> (Tensor[(7, 16, 7), float64], Tensor[(240), uint32], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64]) {
  %920 = fn () -> (Tensor[(7, 16, 7), float64], Tensor[(240), uint32], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64]) {
    %913 = @func_13706() /* ty=(Tensor[(240), uint32],) */;
    %914 = @func_8133() /* ty=(Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64]) */;
    %915 = @func_4637() /* ty=(Tensor[(7, 16, 7), float64],) */;
    %916 = @func_5192() /* ty=Tensor[(7, 16, 7), float64] */;
    %917 = %913.0;
    %918 = %914.2;
    %919 = %915.0;
    (%916, %917, %918, %919)
  };
  %920() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(240), uint32], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64]) */
}

def @func_5473(%var_5470: Tensor[(432), uint8], %var_5471: float32, %var_5472: Tensor[(864), uint16]) -> (Tensor[(7, 16, 7), float32], Tensor[(11, 12, 11), float32], Tensor[(6, 12, 6), bool], Tensor[(432), uint8], float32, Tensor[(864), uint16], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) {
  @func_5468(%var_5470, %var_5471, %var_5472) /* ty=(Tensor[(7, 16, 7), float32], Tensor[(11, 12, 11), float32], Tensor[(6, 12, 6), bool], Tensor[(432), uint8], float32, Tensor[(864), uint16], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) */
}

def @func_2839(%var_2837: Tensor[(5, 3, 16), uint32], %var_2838: Tensor[(5, 3, 16), uint32]) -> Tensor[(5, 3, 16), uint32] {
  %925 = fn (%var_2822: Tensor[(5, 3, 16), uint32], %var_2823: Tensor[(5, 3, 16), uint32]) -> Tensor[(5, 3, 16), uint32] {
    %921 = cast(%var_2823, dtype="uint32") /* ty=Tensor[(5, 3, 16), uint32] */;
    %922 = shape_of(%var_2822, dtype="int32") /* ty=Tensor[(3), int32] */;
    %923 = cast(%var_2822, dtype="uint32") /* ty=Tensor[(5, 3, 16), uint32] */;
    %924 = dyn.reshape(%921, %922, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    minimum(%923, %924) /* ty=Tensor[(5, 3, 16), uint32] */
  };
  %925(%var_2837, %var_2838) /* ty=Tensor[(5, 3, 16), uint32] */
}

def @func_6927() -> Tensor[(240), uint32] {
  %927 = fn () -> Tensor[(240), uint32] {
    %926 = @func_5336() /* ty=(Tensor[(240), uint32],) */;
    %926.0
  };
  %927() /* ty=Tensor[(240), uint32] */
}

def @func_7186(%var_7185: Tensor[(5, 3, 15), int8]) -> Tensor[(5, 3, 15), int8] {
  %932 = fn (%var_7166: Tensor[(5, 3, 15), int8]) -> Tensor[(5, 3, 15), int8] {
    %928 = cast(%var_7166, dtype="int8") /* ty=Tensor[(5, 3, 15), int8] */;
    %929 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(5, 3, 15), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %930 = cast(meta[relay.Constant][35] /* ty=Tensor[(5, 3, 15), int8] */, dtype="int8") /* ty=Tensor[(5, 3, 15), int8] */;
    %931 = dyn.reshape(%928, %929, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    bitwise_xor(%930, %931) /* ty=Tensor[(5, 3, 15), int8] */
  };
  %932(%var_7185) /* ty=Tensor[(5, 3, 15), int8] */
}

def @func_13342() -> Tensor[(7, 16, 7), float64] {
  %933 = @func_5841() /* ty=(Tensor[(7, 16, 7), float64],) */;
  %933.0
}

def @func_3940(%var_3938: Tensor[(1, 10, 9), int8], %var_3939: Tensor[(2, 10, 9), int8]) -> Tensor[(2, 10, 9), int8] {
  %936 = fn (%var_3927: Tensor[(1, 10, 9), int8], %var_3928: Tensor[(2, 10, 9), int8]) -> Tensor[(2, 10, 9), int8] {
    %934 = cast(%var_3927, dtype="int8") /* ty=Tensor[(1, 10, 9), int8] */;
    %935 = cast(%var_3928, dtype="int8") /* ty=Tensor[(2, 10, 9), int8] */;
    add(%934, %935) /* ty=Tensor[(2, 10, 9), int8] */
  };
  %936(%var_3938, %var_3939) /* ty=Tensor[(2, 10, 9), int8] */
}

def @func_11210(%var_11178: Tensor[(7, 16, 7), float32], %var_11184: Tensor[(1050), int8]) -> (Tensor[(7, 16, 7), bool], Tensor[(15, 5, 14), float32], Tensor[(1050), int8], Tensor[(432), uint8]) {
  %937 = @func_10198() /* ty=Tensor[(7, 16, 7), float32] */;
  %938 = cast(%var_11178, dtype="bool") /* ty=Tensor[(7, 16, 7), bool] */;
  %939 = shape_of(%937, dtype="int32") /* ty=Tensor[(3), int32] */;
  %940 = cast(%937, dtype="bool") /* ty=Tensor[(7, 16, 7), bool] */;
  %941 = dyn.reshape(%938, %939, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %942 = cast(%var_11184, dtype="int8") /* ty=Tensor[(1050), int8] */;
  %943 = cast(%var_11184, dtype="int8") /* ty=Tensor[(1050), int8] */;
  %944 = cast(%var_11184, dtype="int8") /* ty=Tensor[(1050), int8] */;
  %945 = cast(meta[relay.Constant][36] /* ty=Tensor[(432), uint8] */, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %946 = reshape(%942, newshape=[15, 5, 14]) /* ty=Tensor[(15, 5, 14), int8] */;
  %947 = reshape(%943, newshape=[15, 5, 14]) /* ty=Tensor[(15, 5, 14), int8] */;
  %948 = reshape(%944, newshape=[15, 5, 14]) /* ty=Tensor[(15, 5, 14), int8] */;
  %949 = reshape(%945, newshape=[432]) /* ty=Tensor[(432), uint8] */;
  %950 = @func_2677(%946, %947, %948, %949) /* ty=(Tensor[(15, 5, 14), float32], Tensor[(6, 12, 6), bool], Tensor[(9), float32], Tensor[(432), uint8], Tensor[(6, 12, 6), bool]) */;
  %951 = less_equal(%940, %941) /* ty=Tensor[(7, 16, 7), bool] */;
  %952 = %950.0;
  (%951, %952, %var_11184, meta[relay.Constant][36] /* ty=Tensor[(432), uint8] */)
}

def @func_13804(%var_13803: Tensor[(180), int8]) -> (Tensor[(7, 16, 7), float64], Tensor[(6, 12, 6), float32], Tensor[(90), int8], Tensor[(180), int8], Tensor[(7, 16, 7), float32], Tensor[(1, 3, 3), float32], Tensor[(3, 3), float32]) {
  %971 = fn (%var_13784: Tensor[(180), int8]) -> (Tensor[(7, 16, 7), float64], Tensor[(6, 12, 6), float32], Tensor[(90), int8], Tensor[(180), int8], Tensor[(7, 16, 7), float32], Tensor[(1, 3, 3), float32], Tensor[(3, 3), float32]) {
    %953 = @func_7985() /* ty=(Tensor[(7, 16, 7), float64],) */;
    %954 = %953.0;
    %955 = cast(%954, dtype="float64") /* ty=Tensor[(7, 16, 7), float64] */;
    %956 = cast(meta[relay.Constant][37] /* ty=Tensor[(90), int8] */, dtype="int8") /* ty=Tensor[(90), int8] */;
    %957 = cast(%var_13784, dtype="int8") /* ty=Tensor[(180), int8] */;
    %958 = reshape(%955, newshape=[7, 16, 7]) /* ty=Tensor[(7, 16, 7), float64] */;
    %959 = reshape(%956, newshape=[90]) /* ty=Tensor[(90), int8] */;
    %960 = reshape(%957, newshape=[180]) /* ty=Tensor[(180), int8] */;
    %961 = @func_7476(%958, %959, %960) /* ty=(Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(2, 10, 9), int8], Tensor[(90), int8], Tensor[(180), int8], Tensor[(6, 12, 6), float32]) */;
    %962 = @func_11735() /* ty=(Tensor[(7, 16, 7), float32],) */;
    %963 = cast(meta[relay.Constant][38] /* ty=Tensor[(3, 3), float32] */, dtype="float32") /* ty=Tensor[(3, 3), float32] */;
    %964 = %961.5;
    %965 = cast(%964, dtype="uint8") /* ty=Tensor[(6, 12, 6), uint8] */;
    %966 = reshape(%963, newshape=[9, 1]) /* ty=Tensor[(9, 1), float32] */;
    %967 = reshape(%965, newshape=[432]) /* ty=Tensor[(432), uint8] */;
    %968 = @func_8936(%966, %967) /* ty=(Tensor[(180), int8], Tensor[(1, 3, 3), float32], Tensor[(9, 1), float32], Tensor[(432), uint8], Tensor[(8, 7, 11), float32]) */;
    %969 = %962.0;
    %970 = %968.1;
    (%954, %964, meta[relay.Constant][37] /* ty=Tensor[(90), int8] */, %var_13784, %969, %970, meta[relay.Constant][38] /* ty=Tensor[(3, 3), float32] */)
  };
  %971(%var_13803) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(6, 12, 6), float32], Tensor[(90), int8], Tensor[(180), int8], Tensor[(7, 16, 7), float32], Tensor[(1, 3, 3), float32], Tensor[(3, 3), float32]) */
}

def @func_5853() -> Tensor[(7, 16, 7), float32] {
  %973 = fn () -> Tensor[(7, 16, 7), float32] {
    %972 = @func_4980() /* ty=(Tensor[(7, 16, 7), float32],) */;
    %972.0
  };
  %973() /* ty=Tensor[(7, 16, 7), float32] */
}

def @func_7343() -> (Tensor[(6, 12, 6), float32],) {
  %976 = fn () -> (Tensor[(6, 12, 6), float32],) {
    %974 = @func_5058() /* ty=(Tensor[(6, 12, 6), bool], Tensor[(6, 12, 6), float32]) */;
    %975 = %974.1;
    (%975,)
  };
  %976() /* ty=(Tensor[(6, 12, 6), float32],) */
}

def @func_9670() -> (Tensor[(240), uint32],) {
  %979 = fn () -> (Tensor[(240), uint32],) {
    %977 = @func_4510() /* ty=(Tensor[(8, 7, 11), float64], Tensor[(7, 16, 7), float64], Tensor[(4, 196), float64], Tensor[(240), uint32]) */;
    %978 = %977.3;
    (%978,)
  };
  %979() /* ty=(Tensor[(240), uint32],) */
}

def @func_8463() -> (Tensor[(240), uint32], Tensor[(7, 16, 7), float64]) {
  @func_8461() /* ty=(Tensor[(240), uint32], Tensor[(7, 16, 7), float64]) */
}

def @func_11918(%var_11916: Tensor[(15, 16, 6), float64], %var_11917: Tensor[(15, 16, 6), float64]) -> Tensor[(15, 16, 6), float64] {
  %984 = fn (%var_11906: Tensor[(15, 16, 6), float64], %var_11907: Tensor[(15, 16, 6), float64]) -> Tensor[(15, 16, 6), float64] {
    %980 = cast(%var_11907, dtype="float64") /* ty=Tensor[(15, 16, 6), float64] */;
    %981 = shape_of(%var_11906, dtype="int32") /* ty=Tensor[(3), int32] */;
    %982 = cast(%var_11906, dtype="float64") /* ty=Tensor[(15, 16, 6), float64] */;
    %983 = dyn.reshape(%980, %981, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    divide(%982, %983) /* ty=Tensor[(15, 16, 6), float64] */
  };
  %984(%var_11916, %var_11917) /* ty=Tensor[(15, 16, 6), float64] */
}

def @func_9255(%var_9244: Tensor[(432), uint8]) -> (Tensor[(7, 16, 7), float32], Tensor[(8, 7, 11), float64], Tensor[(1050), int8], Tensor[(432), uint8]) {
  %985 = @func_9104() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %986 = cast(meta[relay.Constant][39] /* ty=Tensor[(1050), int8] */, dtype="int8") /* ty=Tensor[(1050), int8] */;
  %987 = cast(%var_9244, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %988 = reshape(%986, newshape=[70, 15]) /* ty=Tensor[(70, 15), int8] */;
  %989 = reshape(%987, newshape=[432]) /* ty=Tensor[(432), uint8] */;
  %990 = @func_5096(%988, %989) /* ty=(Tensor[(8, 7, 11), float64], Tensor[(6, 12, 6), bool], Tensor[(70, 15), int8], Tensor[(432), uint8]) */;
  %991 = %985.0;
  %992 = %990.0;
  (%991, %992, meta[relay.Constant][39] /* ty=Tensor[(1050), int8] */, %var_9244)
}

def @func_9491(%var_9478: Tensor[(16, 9, 16), float64]) -> Tensor[(16, 9, 16), float64] {
  %993 = cast(meta[relay.Constant][40] /* ty=Tensor[(16, 9, 16), float64] */, dtype="float64") /* ty=Tensor[(16, 9, 16), float64] */;
  %994 = shape_of(%var_9478, dtype="int32") /* ty=Tensor[(3), int32] */;
  %995 = cast(%var_9478, dtype="float64") /* ty=Tensor[(16, 9, 16), float64] */;
  %996 = dyn.reshape(%993, %994, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%995, %996) /* ty=Tensor[(16, 9, 16), float64] */
}

def @func_4773() -> (Tensor[(432), uint8], Tensor[(11, 12, 11), bool], Tensor[(11, 12, 11), bool], bool) {
  %1004 = fn () -> (Tensor[(432), uint8], Tensor[(11, 12, 11), bool], Tensor[(11, 12, 11), bool], bool) {
    %997 = @func_4581() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(6, 12, 6), bool], Tensor[(432), uint8], Tensor[(11, 12, 11), bool], bool) */;
    %998 = @func_4581() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(6, 12, 6), bool], Tensor[(432), uint8], Tensor[(11, 12, 11), bool], bool) */;
    %999 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %1000 = reshape(%999, newshape=[]) /* ty=bool */;
    %1001 = %997.2;
    %1002 = %998.3;
    %1003 = @func_3774(%1000) /* ty=Tensor[(11, 12, 11), bool] */;
    (%1001, %1002, %1003, True /* ty=bool */)
  };
  %1004() /* ty=(Tensor[(432), uint8], Tensor[(11, 12, 11), bool], Tensor[(11, 12, 11), bool], bool) */
}

def @func_7035(%var_7034: Tensor[(550), float32]) -> (Tensor[(7, 16, 7), float64], Tensor[(11, 10, 5), float32], Tensor[(550), float32]) {
  %1009 = fn (%var_7028: Tensor[(550), float32]) -> (Tensor[(7, 16, 7), float64], Tensor[(11, 10, 5), float32], Tensor[(550), float32]) {
    %1005 = cast(%var_7028, dtype="float32") /* ty=Tensor[(550), float32] */;
    %1006 = reshape(%1005, newshape=[11, 10, 5]) /* ty=Tensor[(11, 10, 5), float32] */;
    %1007 = @func_6597() /* ty=Tensor[(7, 16, 7), float64] */;
    %1008 = @func_5861(%1006) /* ty=Tensor[(11, 10, 5), float32] */;
    (%1007, %1008, %var_7028)
  };
  %1009(%var_7034) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(11, 10, 5), float32], Tensor[(550), float32]) */
}

def @func_12909() -> Tensor[(432), uint8] {
  %1011 = fn () -> Tensor[(432), uint8] {
    %1010 = @func_8985() /* ty=(Tensor[(432), uint8], Tensor[(7, 16, 7), float32]) */;
    %1010.0
  };
  %1011() /* ty=Tensor[(432), uint8] */
}

def @func_8517(%var_8489: Tensor[(1050), int8]) -> (Tensor[(7, 16, 7), float32], Tensor[(1050), int8], Tensor[(36, 12), bool], Tensor[(7, 16, 7), float64]) {
  %1012 = @func_7360() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %1013 = cast(%var_8489, dtype="int8") /* ty=Tensor[(1050), int8] */;
  %1014 = cast(%var_8489, dtype="int8") /* ty=Tensor[(1050), int8] */;
  %1015 = cast(%var_8489, dtype="int8") /* ty=Tensor[(1050), int8] */;
  %1016 = cast(meta[relay.Constant][41] /* ty=Tensor[(36, 12), uint8] */, dtype="uint8") /* ty=Tensor[(36, 12), uint8] */;
  %1017 = reshape(%1013, newshape=[15, 5, 14]) /* ty=Tensor[(15, 5, 14), int8] */;
  %1018 = reshape(%1014, newshape=[15, 5, 14]) /* ty=Tensor[(15, 5, 14), int8] */;
  %1019 = reshape(%1015, newshape=[15, 5, 14]) /* ty=Tensor[(15, 5, 14), int8] */;
  %1020 = reshape(%1016, newshape=[432]) /* ty=Tensor[(432), uint8] */;
  %1021 = @func_2677(%1017, %1018, %1019, %1020) /* ty=(Tensor[(15, 5, 14), float32], Tensor[(6, 12, 6), bool], Tensor[(9), float32], Tensor[(432), uint8], Tensor[(6, 12, 6), bool]) */;
  %1022 = %1021.3;
  %1023 = cast(%1022, dtype="bool") /* ty=Tensor[(432), bool] */;
  %1024 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(36, 12), uint8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1025 = cast(meta[relay.Constant][41] /* ty=Tensor[(36, 12), uint8] */, dtype="bool") /* ty=Tensor[(36, 12), bool] */;
  %1026 = dyn.reshape(%1023, %1024, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1027 = %1012.0;
  %1028 = logical_and(%1025, %1026) /* ty=Tensor[(36, 12), bool] */;
  %1029 = @func_6832() /* ty=Tensor[(7, 16, 7), float64] */;
  (%1027, %var_8489, %1028, %1029)
}

def @func_9494(%var_9492: Tensor[(16, 9, 16), float64]) -> Tensor[(16, 9, 16), float64] {
  @func_9491(%var_9492) /* ty=Tensor[(16, 9, 16), float64] */
}

def @func_10780(%var_10779: Tensor[(11, 11, 1), float32]) -> Tensor[(11, 11, 1), float32] {
  %1031 = fn (%var_10761: Tensor[(11, 11, 1), float32]) -> Tensor[(11, 11, 1), float32] {
    %1030 = cast(%var_10761, dtype="float32") /* ty=Tensor[(11, 11, 1), float32] */;
    tan(%1030) /* ty=Tensor[(11, 11, 1), float32] */
  };
  %1031(%var_10779) /* ty=Tensor[(11, 11, 1), float32] */
}

def @func_4730() -> (Tensor[(7, 16, 7), float32],) {
  @func_4728() /* ty=(Tensor[(7, 16, 7), float32],) */
}

def @func_1661(%var_1659: Tensor[(12, 1, 13), uint64], %var_1660: Tensor[(12, 11, 13), uint64]) -> (Tensor[(12, 11, 13), uint64], Tensor[(6, 12, 6), bool], Tensor[(9), float32], Tensor[(432), uint8], Tensor[(1, 3, 3), float32]) {
  %1047 = fn (%var_1632: Tensor[(12, 1, 13), uint64], %var_1633: Tensor[(12, 11, 13), uint64]) -> (Tensor[(12, 11, 13), uint64], Tensor[(6, 12, 6), bool], Tensor[(9), float32], Tensor[(432), uint8], Tensor[(1, 3, 3), float32]) {
    %1032 = cast(%var_1632, dtype="uint64") /* ty=Tensor[(12, 1, 13), uint64] */;
    %1033 = cast(%var_1633, dtype="uint64") /* ty=Tensor[(12, 11, 13), uint64] */;
    %1034 = cast(meta[relay.Constant][42] /* ty=Tensor[(9), float32] */, dtype="float32") /* ty=Tensor[(9), float32] */;
    %1035 = cast(meta[relay.Constant][43] /* ty=Tensor[(432), uint8] */, dtype="uint8") /* ty=Tensor[(432), uint8] */;
    %1036 = reshape(%1034, newshape=[1, 3, 3]) /* ty=Tensor[(1, 3, 3), float32] */;
    %1037 = reshape(%1035, newshape=[216, 2]) /* ty=Tensor[(216, 2), uint8] */;
    %1038 = @func_1531(%1036, %1037) /* ty=(Tensor[(6, 12, 6), bool], Tensor[(216, 2), uint8], Tensor[(1, 3, 3), float32], Tensor[(1, 3, 3), float64]) */;
    %1039 = cast(meta[relay.Constant][42] /* ty=Tensor[(9), float32] */, dtype="float32") /* ty=Tensor[(9), float32] */;
    %1040 = cast(meta[relay.Constant][43] /* ty=Tensor[(432), uint8] */, dtype="uint8") /* ty=Tensor[(432), uint8] */;
    %1041 = reshape(%1039, newshape=[1, 3, 3]) /* ty=Tensor[(1, 3, 3), float32] */;
    %1042 = reshape(%1040, newshape=[216, 2]) /* ty=Tensor[(216, 2), uint8] */;
    %1043 = @func_1531(%1041, %1042) /* ty=(Tensor[(6, 12, 6), bool], Tensor[(216, 2), uint8], Tensor[(1, 3, 3), float32], Tensor[(1, 3, 3), float64]) */;
    %1044 = maximum(%1032, %1033) /* ty=Tensor[(12, 11, 13), uint64] */;
    %1045 = %1038.0;
    %1046 = %1043.2;
    (%1044, %1045, meta[relay.Constant][42] /* ty=Tensor[(9), float32] */, meta[relay.Constant][43] /* ty=Tensor[(432), uint8] */, %1046)
  };
  %1047(%var_1659, %var_1660) /* ty=(Tensor[(12, 11, 13), uint64], Tensor[(6, 12, 6), bool], Tensor[(9), float32], Tensor[(432), uint8], Tensor[(1, 3, 3), float32]) */
}

def @func_9559() -> Tensor[(7, 16, 7), float64] {
  @func_9557() /* ty=Tensor[(7, 16, 7), float64] */
}

def @func_8886() -> (Tensor[(180), int8],) {
  %1048 = @func_7863() /* ty=(Tensor[(240), uint32], Tensor[(5, 3, 16), uint32], Tensor[(7, 16, 7), float32], Tensor[(784), float64], Tensor[(90), int8], Tensor[(180), int8]) */;
  %1049 = %1048.5;
  (%1049,)
}

def @func_10297() -> (Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(432), uint8]) {
  %1050 = @func_6529() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %1051 = @func_7616() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float32]) */;
  %1052 = @func_4581() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(6, 12, 6), bool], Tensor[(432), uint8], Tensor[(11, 12, 11), bool], bool) */;
  %1053 = %1050.0;
  %1054 = %1051.1;
  %1055 = %1052.2;
  (%1053, %1054, %1055)
}

def @func_7617() -> (Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float32]) {
  %1059 = fn () -> (Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float32]) {
    %1056 = @func_6529() /* ty=(Tensor[(7, 16, 7), float32],) */;
    %1057 = @func_6832() /* ty=Tensor[(7, 16, 7), float64] */;
    %1058 = %1056.0;
    (%1057, %1058)
  };
  %1059() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float32]) */
}

def @func_7779(%var_7778: Tensor[(225), int8]) -> (Tensor[(6, 12, 6), float64], Tensor[(7, 16, 7), float32], Tensor[(5, 3, 15), int8], Tensor[(225), int8]) {
  %1069 = fn (%var_7774: Tensor[(225), int8]) -> (Tensor[(6, 12, 6), float64], Tensor[(7, 16, 7), float32], Tensor[(5, 3, 15), int8], Tensor[(225), int8]) {
    %1060 = @func_6119() /* ty=(Tensor[(6, 12, 6), bool], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64]) */;
    %1061 = %1060.0;
    %1062 = cast(%1061, dtype="float64") /* ty=Tensor[(6, 12, 6), float64] */;
    %1063 = @func_4853() /* ty=(Tensor[(432), uint8], Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64]) */;
    %1064 = cast(%var_7774, dtype="int8") /* ty=Tensor[(225), int8] */;
    %1065 = reshape(%1064, newshape=[5, 3, 15]) /* ty=Tensor[(5, 3, 15), int8] */;
    %1066 = log(%1062) /* ty=Tensor[(6, 12, 6), float64] */;
    %1067 = %1063.1;
    %1068 = @func_7184(%1065) /* ty=Tensor[(5, 3, 15), int8] */;
    (%1066, %1067, %1068, %var_7774)
  };
  %1069(%var_7778) /* ty=(Tensor[(6, 12, 6), float64], Tensor[(7, 16, 7), float32], Tensor[(5, 3, 15), int8], Tensor[(225), int8]) */
}

def @func_10198() -> Tensor[(7, 16, 7), float32] {
  %1070 = @func_6529() /* ty=(Tensor[(7, 16, 7), float32],) */;
  %1070.0
}

def @func_8117(%var_8112: Tensor[(6, 12, 6), float32], %var_8113: bool, %var_8114: Tensor[(3, 52), uint64], %var_8115: Tensor[(1716), uint64], %var_8116: Tensor[(3, 52), uint64]) -> (Tensor[(11, 12, 11), bool], Tensor[(1716), uint64], Tensor[(6, 12, 6), float64], Tensor[(7, 16, 7), float32], Tensor[(1, 3, 3), float32], Tensor[(3, 52), float32]) {
  @func_8110(%var_8112, %var_8113, %var_8114, %var_8115, %var_8116) /* ty=(Tensor[(11, 12, 11), bool], Tensor[(1716), uint64], Tensor[(6, 12, 6), float64], Tensor[(7, 16, 7), float32], Tensor[(1, 3, 3), float32], Tensor[(3, 52), float32]) */
}

def @func_10299() -> (Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(432), uint8]) {
  @func_10297() /* ty=(Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float32], Tensor[(432), uint8]) */
}

def @func_11790() -> Tensor[(7, 16, 7), float64] {
  @func_11788() /* ty=Tensor[(7, 16, 7), float64] */
}

def @func_13552(%var_13550: Tensor[(168), uint16]) -> (Tensor[(4, 196), float64], Tensor[(14, 12, 1), float64], Tensor[(168), uint16]) {
  @func_13549(%var_13550) /* ty=(Tensor[(4, 196), float64], Tensor[(14, 12, 1), float64], Tensor[(168), uint16]) */
}

def @func_12735() -> Tensor[(7, 16, 7), float64] {
  @func_12733() /* ty=Tensor[(7, 16, 7), float64] */
}

def @func_4687(%var_4685: Tensor[(16, 7, 9), float32]) -> (Tensor[(16, 7, 9), float32], Tensor[(7, 16, 7), float32]) {
  @func_4684(%var_4685) /* ty=(Tensor[(16, 7, 9), float32], Tensor[(7, 16, 7), float32]) */
}

def @func_12882() -> (Tensor[(432), uint8], Tensor[(7, 16, 7), float32]) {
  %1074 = fn () -> (Tensor[(432), uint8], Tensor[(7, 16, 7), float32]) {
    %1071 = @func_5215() /* ty=(Tensor[(7, 16, 7), float32],) */;
    %1072 = @func_6991() /* ty=Tensor[(432), uint8] */;
    %1073 = %1071.0;
    (%1072, %1073)
  };
  %1074() /* ty=(Tensor[(432), uint8], Tensor[(7, 16, 7), float32]) */
}

def @func_10881() -> (Tensor[(8, 7, 11), float64],) {
  @func_10879() /* ty=(Tensor[(8, 7, 11), float64],) */
}

def @func_14244() -> (Tensor[(7, 16, 7), float64], Tensor[(180), int8], Tensor[(180, 1), int8], Tensor[(240), uint32]) {
  %1082 = fn () -> (Tensor[(7, 16, 7), float64], Tensor[(180), int8], Tensor[(180, 1), int8], Tensor[(240), uint32]) {
    %1075 = cast(meta[relay.Constant][44] /* ty=Tensor[(180, 1), int8] */, dtype="int8") /* ty=Tensor[(180, 1), int8] */;
    %1076 = reshape(%1075, newshape=[180]) /* ty=Tensor[(180), int8] */;
    %1077 = @func_13802(%1076) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(6, 12, 6), float32], Tensor[(90), int8], Tensor[(180), int8], Tensor[(7, 16, 7), float32], Tensor[(1, 3, 3), float32], Tensor[(3, 3), float32]) */;
    %1078 = @func_10861() /* ty=(Tensor[(432), uint8], Tensor[(240), uint32], Tensor[(7, 16, 7), float32]) */;
    %1079 = @func_8182() /* ty=Tensor[(7, 16, 7), float64] */;
    %1080 = %1077.3;
    %1081 = %1078.1;
    (%1079, %1080, meta[relay.Constant][44] /* ty=Tensor[(180, 1), int8] */, %1081)
  };
  %1082() /* ty=(Tensor[(7, 16, 7), float64], Tensor[(180), int8], Tensor[(180, 1), int8], Tensor[(240), uint32]) */
}

def @func_10822() -> (Tensor[(7, 16, 7), float32],) {
  %1083 = @func_8133() /* ty=(Tensor[(7, 16, 7), float32], Tensor[(7, 16, 7), float64], Tensor[(7, 16, 7), float64]) */;
  %1084 = %1083.0;
  (%1084,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen585/build/output.py", line 3578, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:36:02] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

