==========mod==========
#[version = "0.0.5"]
def @func_750() -> Tensor[(15, 2, 14), float64] {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(15, 2, 14), float64] */, dtype="float64") /* ty=Tensor[(15, 2, 14), float64] */;
  log(%0) /* ty=Tensor[(15, 2, 14), float64] */
}

def @func_5323() -> Tensor[(13, 13, 16), bool] {
  %1 = @func_2039() /* ty=(Tensor[(4, 3, 15), bool], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32]) */;
  %1.1
}

def @func_7036(%var_7012: Tensor[(8, 16, 11), float32]) -> (Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), float32], Tensor[(1408), float32], Tensor[(15, 2, 14), float64], Tensor[(8, 16, 11), int64], Tensor[(15, 2, 14), float64]) {
  %2 = @func_6917() /* ty=(Tensor[(4, 3, 15), float32],) */;
  %3 = @func_934() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %4 = cast(meta[relay.Constant][1] /* ty=Tensor[(1408), float32] */, dtype="float32") /* ty=Tensor[(1408), float32] */;
  %5 = reshape(%4, newshape=[8, 16, 11]) /* ty=Tensor[(8, 16, 11), float32] */;
  %6 = @func_6671(%5) /* ty=Tensor[(8, 16, 11), float32] */;
  %7 = cast(%var_7012, dtype="int64") /* ty=Tensor[(8, 16, 11), int64] */;
  %8 = shape_of(%6, dtype="int32") /* ty=Tensor[(3), int32] */;
  %9 = cast(%6, dtype="int64") /* ty=Tensor[(8, 16, 11), int64] */;
  %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %11 = @func_6010() /* ty=Tensor[(15, 2, 14), float64] */;
  %12 = %2.0;
  %13 = %3.0;
  %14 = logical_xor(%9, %10) /* ty=Tensor[(8, 16, 11), int64] */;
  %15 = @func_5389() /* ty=Tensor[(15, 2, 14), float64] */;
  (%11, %12, meta[relay.Constant][1] /* ty=Tensor[(1408), float32] */, %13, %14, %15)
}

def @func_1458(%var_1421: Tensor[(2704), uint32]) -> (Tensor[(15, 2, 14), float64], Tensor[(7, 6, 4), bool], Tensor[(42, 4), int64], Tensor[(13, 13, 16), bool], Tensor[(4, 3, 15), bool], Tensor[(15, 2, 14), float64], Tensor[(2704), float32]) {
  %16 = cast(meta[relay.Constant][2] /* ty=Tensor[(42, 4), int64] */, dtype="int64") /* ty=Tensor[(42, 4), int64] */;
  %17 = reshape(%16, newshape=[7, 6, 4]) /* ty=Tensor[(7, 6, 4), int64] */;
  %18 = cast(%var_1421, dtype="uint32") /* ty=Tensor[(2704), uint32] */;
  %19 = cast(%var_1421, dtype="uint32") /* ty=Tensor[(2704), uint32] */;
  %20 = reshape(%18, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), uint32] */;
  %21 = reshape(%19, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), uint32] */;
  %22 = @func_912() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(180), int8]) */;
  %23 = cast(%var_1421, dtype="float32") /* ty=Tensor[(2704), float32] */;
  %24 = @func_750() /* ty=Tensor[(15, 2, 14), float64] */;
  %25 = @func_242(%17) /* ty=Tensor[(7, 6, 4), bool] */;
  %26 = @func_213(%20, %21) /* ty=Tensor[(13, 13, 16), bool] */;
  %27 = %22.1;
  %28 = @func_886() /* ty=Tensor[(15, 2, 14), float64] */;
  %29 = acosh(%23) /* ty=Tensor[(2704), float32] */;
  (%24, %25, meta[relay.Constant][2] /* ty=Tensor[(42, 4), int64] */, %26, %27, %28, %29)
}

def @func_6671(%var_6660: Tensor[(8, 16, 11), float32]) -> Tensor[(8, 16, 11), float32] {
  %30 = cast(%var_6660, dtype="float32") /* ty=Tensor[(8, 16, 11), float32] */;
  log10(%30) /* ty=Tensor[(8, 16, 11), float32] */
}

def @func_3798() -> (Tensor[(15, 2, 14), float64], Tensor[(5, 10, 9), bool], Tensor[(450), int32], Tensor[(42, 4), int64], Tensor[(13, 13, 16), float32], Tensor[(15, 2, 14), float64], Tensor[(450), int32], Tensor[(4, 3, 15), bool], Tensor[(15, 2, 14), float64]) {
  %31 = @func_912() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(180), int8]) */;
  %32 = cast(meta[relay.Constant][3] /* ty=Tensor[(450), int32] */, dtype="int32") /* ty=Tensor[(450), int32] */;
  %33 = cast(meta[relay.Constant][3] /* ty=Tensor[(450), int32] */, dtype="int32") /* ty=Tensor[(450), int32] */;
  %34 = reshape(%32, newshape=[5, 10, 9]) /* ty=Tensor[(5, 10, 9), int32] */;
  %35 = reshape(%33, newshape=[5, 10, 9]) /* ty=Tensor[(5, 10, 9), int32] */;
  %36 = @func_65(%34, %35) /* ty=(Tensor[(5, 10, 9), int32], Tensor[(5, 10, 9), uint32], Tensor[(5, 10, 9), bool]) */;
  %37 = @func_3209() /* ty=(Tensor[(13, 13, 16), bool],) */;
  %38 = %37.0;
  %39 = cast(%38, dtype="uint32") /* ty=Tensor[(13, 13, 16), uint32] */;
  %40 = reshape(%39, newshape=[2704]) /* ty=Tensor[(2704), uint32] */;
  %41 = @func_1458(%40) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(7, 6, 4), bool], Tensor[(42, 4), int64], Tensor[(13, 13, 16), bool], Tensor[(4, 3, 15), bool], Tensor[(15, 2, 14), float64], Tensor[(2704), float32]) */;
  %42 = cast(%38, dtype="float32") /* ty=Tensor[(13, 13, 16), float32] */;
  %43 = cast(meta[relay.Constant][3] /* ty=Tensor[(450), int32] */, dtype="int32") /* ty=Tensor[(450), int32] */;
  %44 = reshape(%43, newshape=[450]) /* ty=Tensor[(450), int32] */;
  %45 = @func_1240(%44) /* ty=(Tensor[(4, 3, 15), float32], Tensor[(5, 10, 9), bool], Tensor[(450), int32]) */;
  %46 = @func_2039() /* ty=(Tensor[(4, 3, 15), bool], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32]) */;
  %47 = @func_2472() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64]) */;
  %48 = %31.0;
  %49 = %36.2;
  %50 = %41.2;
  %51 = sqrt(%42) /* ty=Tensor[(13, 13, 16), float32] */;
  %52 = @func_2535() /* ty=Tensor[(15, 2, 14), float64] */;
  %53 = %45.2;
  %54 = %46.0;
  %55 = %47.0;
  (%48, %49, meta[relay.Constant][3] /* ty=Tensor[(450), int32] */, %50, %51, %52, %53, %54, %55)
}

def @func_8379() -> (Tensor[(4, 3, 15), float64],) {
  %56 = @func_6980() /* ty=Tensor[(4, 3, 15), float32] */;
  %57 = cast(%56, dtype="float64") /* ty=Tensor[(4, 3, 15), float64] */;
  %58 = sigmoid(%57) /* ty=Tensor[(4, 3, 15), float64] */;
  (%58,)
}

def @func_1794(%var_1774: Tensor[(15, 2, 14), float64], %var_1780: Tensor[(15, 2, 14), bool]) -> (Tensor[(15, 2, 14), int32], Tensor[(13, 13, 16), float32], Tensor[(165, 9), int64]) {
  %59 = @func_965() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64]) */;
  %60 = %59.0;
  %61 = cast(%var_1774, dtype="bool") /* ty=Tensor[(15, 2, 14), bool] */;
  %62 = shape_of(%60, dtype="int32") /* ty=Tensor[(3), int32] */;
  %63 = cast(%60, dtype="bool") /* ty=Tensor[(15, 2, 14), bool] */;
  %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %65 = logical_or(%63, %64) /* ty=Tensor[(15, 2, 14), bool] */;
  %66 = cast(%var_1780, dtype="int32") /* ty=Tensor[(15, 2, 14), int32] */;
  %67 = shape_of(%65, dtype="int32") /* ty=Tensor[(3), int32] */;
  %68 = cast(%65, dtype="int32") /* ty=Tensor[(15, 2, 14), int32] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %70 = cast(meta[relay.Constant][4] /* ty=Tensor[(165, 9), int64] */, dtype="int64") /* ty=Tensor[(165, 9), int64] */;
  %71 = cast(meta[relay.Constant][4] /* ty=Tensor[(165, 9), int64] */, dtype="int64") /* ty=Tensor[(165, 9), int64] */;
  %72 = reshape(%70, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int64] */;
  %73 = reshape(%71, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int64] */;
  %74 = @func_799(%72, %73) /* ty=(Tensor[(15, 9, 11), int64], Tensor[(2704), uint32], Tensor[(13, 13, 16), float32]) */;
  %75 = add(%68, %69) /* ty=Tensor[(15, 2, 14), int32] */;
  %76 = %74.2;
  (%75, %76, meta[relay.Constant][4] /* ty=Tensor[(165, 9), int64] */)
}

def @func_2809() -> (Tensor[(1352, 2), uint32], Tensor[(15, 2, 14), float32]) {
  %77 = @func_2143() /* ty=(Tensor[(180), int8], Tensor[(13, 13, 16), bool], Tensor[(1352, 2), uint32]) */;
  %78 = @func_2356() /* ty=(Tensor[(15, 2, 14), float32],) */;
  %79 = %77.2;
  %80 = %78.0;
  (%79, %80)
}

def @func_6356() -> Tensor[(15, 2, 14), float64] {
  @func_886() /* ty=Tensor[(15, 2, 14), float64] */
}

def @func_3472(%var_3461: Tensor[(2, 13, 7), float32]) -> (Tensor[(2, 13, 7), float32],) {
  %81 = cast(meta[relay.Constant][5] /* ty=Tensor[(2, 13, 7), float32] */, dtype="float32") /* ty=Tensor[(2, 13, 7), float32] */;
  %82 = shape_of(%var_3461, dtype="int32") /* ty=Tensor[(3), int32] */;
  %83 = cast(%var_3461, dtype="float32") /* ty=Tensor[(2, 13, 7), float32] */;
  %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %85 = divide(%83, %84) /* ty=Tensor[(2, 13, 7), float32] */;
  (%85,)
}

def @func_2039() -> (Tensor[(4, 3, 15), bool], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32]) {
  %86 = @func_1116() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32], Tensor[(15, 2, 14), float64]) */;
  %87 = cast(meta[relay.Constant][6] /* ty=Tensor[(2704), uint32] */, dtype="uint32") /* ty=Tensor[(2704), uint32] */;
  %88 = cast(meta[relay.Constant][6] /* ty=Tensor[(2704), uint32] */, dtype="uint32") /* ty=Tensor[(2704), uint32] */;
  %89 = reshape(%87, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), uint32] */;
  %90 = reshape(%88, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), uint32] */;
  %91 = %86.2;
  %92 = @func_213(%89, %90) /* ty=Tensor[(13, 13, 16), bool] */;
  (%91, %92, meta[relay.Constant][6] /* ty=Tensor[(2704), uint32] */)
}

def @func_3284() -> (Tensor[(15, 2, 14), float64],) {
  %93 = @func_750() /* ty=Tensor[(15, 2, 14), float64] */;
  (%93,)
}

def @func_2996() -> (Tensor[(15, 2, 14), float32], Tensor[(4, 3, 15), bool]) {
  %94 = @func_2472() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64]) */;
  %95 = %94.0;
  %96 = cast(%95, dtype="float32") /* ty=Tensor[(15, 2, 14), float32] */;
  %97 = @func_2388() /* ty=(Tensor[(4, 3, 15), bool],) */;
  %98 = cosh(%96) /* ty=Tensor[(15, 2, 14), float32] */;
  %99 = %97.0;
  (%98, %99)
}

def @func_3878() -> (Tensor[(15, 2, 14), float64],) {
  %100 = @func_3284() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %101 = %100.0;
  (%101,)
}

def @func_2472() -> (Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64]) {
  %102 = @func_1576() /* ty=Tensor[(15, 2, 14), float64] */;
  %103 = @func_886() /* ty=Tensor[(15, 2, 14), float64] */;
  (%102, %103)
}

def @func_8102(%var_8072: Tensor[(2704), uint32]) -> (Tensor[(15, 2, 14), float64], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32], Tensor[(15, 2, 14), float64], Tensor[(8, 7, 7), float64], Tensor[(392), float64]) {
  %104 = @func_934() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %105 = cast(%var_8072, dtype="uint32") /* ty=Tensor[(2704), uint32] */;
  %106 = reshape(%105, newshape=[2704]) /* ty=Tensor[(2704), uint32] */;
  %107 = @func_1458(%106) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(7, 6, 4), bool], Tensor[(42, 4), int64], Tensor[(13, 13, 16), bool], Tensor[(4, 3, 15), bool], Tensor[(15, 2, 14), float64], Tensor[(2704), float32]) */;
  %108 = @func_7944() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), float32]) */;
  %109 = cast(meta[relay.Constant][7] /* ty=Tensor[(392), float64] */, dtype="float64") /* ty=Tensor[(392), float64] */;
  %110 = reshape(%109, newshape=[8, 7, 7]) /* ty=Tensor[(8, 7, 7), float64] */;
  %111 = @func_5016(%110) /* ty=(Tensor[(8, 7, 7), float64],) */;
  %112 = %104.0;
  %113 = %107.3;
  %114 = %108.0;
  %115 = %111.0;
  (%112, %113, %var_8072, %114, %115, meta[relay.Constant][7] /* ty=Tensor[(392), float64] */)
}

def @func_6511() -> (Tensor[(13, 13, 16), bool], Tensor[(15, 2, 14), float32]) {
  %116 = @func_3209() /* ty=(Tensor[(13, 13, 16), bool],) */;
  %117 = %116.0;
  %118 = @func_5760() /* ty=Tensor[(15, 2, 14), float32] */;
  (%117, %118)
}

def @func_1733(%var_1726: Tensor[(9, 14, 15), float64], %var_1727: Tensor[(9, 14, 15), float64]) -> Tensor[(9, 14, 15), bool] {
  %119 = cast(%var_1727, dtype="bool") /* ty=Tensor[(9, 14, 15), bool] */;
  %120 = shape_of(%var_1726, dtype="int32") /* ty=Tensor[(3), int32] */;
  %121 = cast(%var_1726, dtype="bool") /* ty=Tensor[(9, 14, 15), bool] */;
  %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%121, %122) /* ty=Tensor[(9, 14, 15), bool] */
}

def @func_8316() -> (Tensor[(15, 2, 14), float64],) {
  %123 = @func_1576() /* ty=Tensor[(15, 2, 14), float64] */;
  (%123,)
}

def @func_213(%var_206: Tensor[(13, 13, 16), uint32], %var_207: Tensor[(13, 13, 16), uint32]) -> Tensor[(13, 13, 16), bool] {
  %124 = cast(%var_207, dtype="bool") /* ty=Tensor[(13, 13, 16), bool] */;
  %125 = shape_of(%var_206, dtype="int32") /* ty=Tensor[(3), int32] */;
  %126 = cast(%var_206, dtype="bool") /* ty=Tensor[(13, 13, 16), bool] */;
  %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%126, %127) /* ty=Tensor[(13, 13, 16), bool] */
}

def @func_4266(%var_4260: Tensor[(2704), uint32]) -> Tensor[(2704), uint64] {
  %128 = @func_2039() /* ty=(Tensor[(4, 3, 15), bool], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32]) */;
  %129 = %128.2;
  %130 = cast(%var_4260, dtype="uint64") /* ty=Tensor[(2704), uint64] */;
  %131 = shape_of(%129, dtype="int32") /* ty=Tensor[(1), int32] */;
  %132 = cast(%129, dtype="uint64") /* ty=Tensor[(2704), uint64] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?), uint64] */;
  bitwise_xor(%132, %133) /* ty=Tensor[(2704), uint64] */
}

def @func_7742() -> (Tensor[(1352, 2), bool], Tensor[(16, 7, 16), bool], Tensor[(1890), float64], Tensor[(12, 10, 14), bool]) {
  %134 = @func_6834() /* ty=(Tensor[(1352, 2), bool],) */;
  %135 = @func_1999() /* ty=(Tensor[(15, 2, 14), bool], Tensor[(9, 14, 15), bool], Tensor[(1890), float64]) */;
  %136 = @func_5445() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(12, 10, 14), bool]) */;
  %137 = %134.0;
  %138 = @func_4102() /* ty=Tensor[(16, 7, 16), bool] */;
  %139 = %135.2;
  %140 = %136.1;
  (%137, %138, %139, %140)
}

def @func_2356() -> (Tensor[(15, 2, 14), float32],) {
  %141 = @func_750() /* ty=Tensor[(15, 2, 14), float64] */;
  %142 = cast(%141, dtype="float32") /* ty=Tensor[(15, 2, 14), float32] */;
  %143 = sinh(%142) /* ty=Tensor[(15, 2, 14), float32] */;
  (%143,)
}

def @func_7782() -> Tensor[(15, 2, 14), float64] {
  %144 = @func_3878() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %144.0
}

def @func_1116() -> (Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32], Tensor[(15, 2, 14), float64]) {
  %145 = @func_750() /* ty=Tensor[(15, 2, 14), float64] */;
  %146 = cast(%145, dtype="float64") /* ty=Tensor[(15, 2, 14), float64] */;
  %147 = reshape(%146, newshape=[15, 2, 14]) /* ty=Tensor[(15, 2, 14), float64] */;
  %148 = @func_871(%147) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(180), int8], Tensor[(4, 3, 15), bool]) */;
  %149 = cast(%145, dtype="float64") /* ty=Tensor[(15, 2, 14), float64] */;
  %150 = reshape(%149, newshape=[15, 2, 14]) /* ty=Tensor[(15, 2, 14), float64] */;
  %151 = @func_871(%150) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(180), int8], Tensor[(4, 3, 15), bool]) */;
  %152 = cast(meta[relay.Constant][8] /* ty=Tensor[(2704), uint32] */, dtype="uint32") /* ty=Tensor[(2704), uint32] */;
  %153 = cast(meta[relay.Constant][8] /* ty=Tensor[(2704), uint32] */, dtype="uint32") /* ty=Tensor[(2704), uint32] */;
  %154 = reshape(%152, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), uint32] */;
  %155 = reshape(%153, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), uint32] */;
  %156 = @func_934() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %157 = %148.0;
  %158 = %151.1;
  %159 = @func_213(%154, %155) /* ty=Tensor[(13, 13, 16), bool] */;
  %160 = %156.0;
  (%145, %157, %158, %159, meta[relay.Constant][8] /* ty=Tensor[(2704), uint32] */, %160)
}

def @func_4697() -> (Tensor[(1352, 2), bool],) {
  %161 = @func_3237() /* ty=Tensor[(1352, 2), uint32] */;
  %162 = cast(%161, dtype="float64") /* ty=Tensor[(1352, 2), float64] */;
  %163 = log10(%162) /* ty=Tensor[(1352, 2), float64] */;
  %164 = cast(%161, dtype="bool") /* ty=Tensor[(1352, 2), bool] */;
  %165 = shape_of(%163, dtype="int32") /* ty=Tensor[(2), int32] */;
  %166 = cast(%163, dtype="bool") /* ty=Tensor[(1352, 2), bool] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %168 = logical_and(%166, %167) /* ty=Tensor[(1352, 2), bool] */;
  (%168,)
}

def @func_5293() -> (Tensor[(13, 13, 16), bool], Tensor[(15, 2, 14), float64], Tensor[(720), float32], Tensor[(15, 2, 14), float64], Tensor[(1352, 2), uint16], Tensor[(1352, 2), float32], Tensor[(1352, 2), bool]) {
  %169 = @func_4147() /* ty=(Tensor[(15, 2, 14), uint32], Tensor[(13, 13, 16), bool]) */;
  %170 = cast(meta[relay.Constant][9] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %171 = reshape(%170, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %172 = @func_4617(%171) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(720), float32]) */;
  %173 = @func_4816() /* ty=(Tensor[(15, 2, 14), float32], Tensor[(1352, 2), bool]) */;
  %174 = %173.1;
  %175 = cast(%174, dtype="float64") /* ty=Tensor[(1352, 2), float64] */;
  %176 = asinh(%175) /* ty=Tensor[(1352, 2), float64] */;
  %177 = cast(%174, dtype="bool") /* ty=Tensor[(1352, 2), bool] */;
  %178 = shape_of(%176, dtype="int32") /* ty=Tensor[(2), int32] */;
  %179 = cast(%176, dtype="bool") /* ty=Tensor[(1352, 2), bool] */;
  %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %181 = less_equal(%179, %180) /* ty=Tensor[(1352, 2), bool] */;
  %182 = cast(%176, dtype="uint16") /* ty=Tensor[(1352, 2), uint16] */;
  %183 = shape_of(%181, dtype="int32") /* ty=Tensor[(2), int32] */;
  %184 = cast(%181, dtype="uint16") /* ty=Tensor[(1352, 2), uint16] */;
  %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %186 = cast(%174, dtype="float32") /* ty=Tensor[(1352, 2), float32] */;
  %187 = cast(meta[relay.Constant][10] /* ty=Tensor[(1352, 2), bool] */, dtype="bool") /* ty=Tensor[(1352, 2), bool] */;
  %188 = shape_of(%181, dtype="int32") /* ty=Tensor[(2), int32] */;
  %189 = cast(%181, dtype="bool") /* ty=Tensor[(1352, 2), bool] */;
  %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %191 = %169.1;
  %192 = %172.0;
  %193 = @func_750() /* ty=Tensor[(15, 2, 14), float64] */;
  %194 = multiply(%184, %185) /* ty=Tensor[(1352, 2), uint16] */;
  %195 = asin(%186) /* ty=Tensor[(1352, 2), float32] */;
  %196 = greater(%189, %190) /* ty=Tensor[(1352, 2), bool] */;
  (%191, %192, meta[relay.Constant][9] /* ty=Tensor[(720), float32] */, %193, %194, %195, %196)
}

def @func_1576() -> Tensor[(15, 2, 14), float64] {
  @func_750() /* ty=Tensor[(15, 2, 14), float64] */
}

def @func_6834() -> (Tensor[(1352, 2), bool],) {
  %197 = @func_4697() /* ty=(Tensor[(1352, 2), bool],) */;
  %198 = %197.0;
  (%198,)
}

def @func_2143() -> (Tensor[(180), int8], Tensor[(13, 13, 16), bool], Tensor[(1352, 2), uint32]) {
  %199 = @func_912() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(180), int8]) */;
  %200 = cast(meta[relay.Constant][11] /* ty=Tensor[(1352, 2), uint32] */, dtype="uint32") /* ty=Tensor[(1352, 2), uint32] */;
  %201 = cast(meta[relay.Constant][11] /* ty=Tensor[(1352, 2), uint32] */, dtype="uint32") /* ty=Tensor[(1352, 2), uint32] */;
  %202 = reshape(%200, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), uint32] */;
  %203 = reshape(%201, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), uint32] */;
  %204 = %199.2;
  %205 = @func_213(%202, %203) /* ty=Tensor[(13, 13, 16), bool] */;
  (%204, %205, meta[relay.Constant][11] /* ty=Tensor[(1352, 2), uint32] */)
}

def @func_3249() -> Tensor[(15, 2, 14), float64] {
  %206 = @func_2630() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %206.0
}

def @func_6903() -> (Tensor[(15, 2, 14), float64],) {
  %207 = @func_5227() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %208 = %207.0;
  (%208,)
}

def @func_7298(%var_7207: Tensor[(4, 3, 15), bool], %var_7262: Tensor[(4, 3, 15), bool]) -> (Tensor[(4, 3, 15), int16], Tensor[(13, 13, 16), bool], Tensor[(4, 3, 15), float64], Tensor[(2704), uint32], Tensor[(2704), float64]) {
  %209 = @func_2388() /* ty=(Tensor[(4, 3, 15), bool],) */;
  %210 = %209.0;
  %211 = cast(%var_7207, dtype="int16") /* ty=Tensor[(4, 3, 15), int16] */;
  %212 = shape_of(%210, dtype="int32") /* ty=Tensor[(3), int32] */;
  %213 = cast(%210, dtype="int16") /* ty=Tensor[(4, 3, 15), int16] */;
  %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %215 = @func_3209() /* ty=(Tensor[(13, 13, 16), bool],) */;
  %216 = cast(%var_7262, dtype="float64") /* ty=Tensor[(4, 3, 15), float64] */;
  %217 = shape_of(%210, dtype="int32") /* ty=Tensor[(3), int32] */;
  %218 = cast(%210, dtype="float64") /* ty=Tensor[(4, 3, 15), float64] */;
  %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %220 = @func_6511() /* ty=(Tensor[(13, 13, 16), bool], Tensor[(15, 2, 14), float32]) */;
  %221 = %220.0;
  %222 = cast(%221, dtype="uint32") /* ty=Tensor[(13, 13, 16), uint32] */;
  %223 = reshape(%222, newshape=[2704]) /* ty=Tensor[(2704), uint32] */;
  %224 = @func_5580(%223) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(4, 14, 11), float64], Tensor[(15, 2, 14), float64], Tensor[(2704), uint64], Tensor[(2704), uint32], Tensor[(15, 2, 14), float64]) */;
  %225 = @func_2721() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(9, 14, 15), bool], Tensor[(5, 10, 9), int32], Tensor[(2704), uint32]) */;
  %226 = %225.3;
  %227 = cast(%221, dtype="float64") /* ty=Tensor[(13, 13, 16), float64] */;
  %228 = shape_of(%226, dtype="int32") /* ty=Tensor[(1), int32] */;
  %229 = cast(%226, dtype="float64") /* ty=Tensor[(2704), float64] */;
  %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?), float64] */;
  %231 = add(%213, %214) /* ty=Tensor[(4, 3, 15), int16] */;
  %232 = %215.0;
  %233 = mod(%218, %219) /* ty=Tensor[(4, 3, 15), float64] */;
  %234 = %224.4;
  %235 = maximum(%229, %230) /* ty=Tensor[(2704), float64] */;
  (%231, %232, %233, %234, %235)
}

def @func_7874(%var_7871: Tensor[(1, 720), float32]) -> (Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(1, 720), float32]) {
  %236 = @func_6399() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64]) */;
  %237 = @func_3643() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %238 = cast(%var_7871, dtype="float32") /* ty=Tensor[(1, 720), float32] */;
  %239 = reshape(%238, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %240 = @func_6813(%239) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(720), float32], Tensor[(15, 2, 14), bool], Tensor[(13, 13, 16), bool], Tensor[(15, 2, 14), float64]) */;
  %241 = %236.0;
  %242 = %237.0;
  %243 = %240.1;
  (%241, %242, %243, %var_7871)
}

def @func_799(%var_759: Tensor[(15, 9, 11), int64], %var_760: Tensor[(15, 9, 11), int64]) -> (Tensor[(15, 9, 11), int64], Tensor[(2704), uint32], Tensor[(13, 13, 16), float32]) {
  %244 = cast(%var_760, dtype="int64") /* ty=Tensor[(15, 9, 11), int64] */;
  %245 = shape_of(%var_759, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(%var_759, dtype="int64") /* ty=Tensor[(15, 9, 11), int64] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %248 = cast(meta[relay.Constant][12] /* ty=Tensor[(2704), uint32] */, dtype="uint32") /* ty=Tensor[(2704), uint32] */;
  %249 = cast(meta[relay.Constant][12] /* ty=Tensor[(2704), uint32] */, dtype="uint32") /* ty=Tensor[(2704), uint32] */;
  %250 = reshape(%248, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), uint32] */;
  %251 = reshape(%249, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), uint32] */;
  %252 = @func_213(%250, %251) /* ty=Tensor[(13, 13, 16), bool] */;
  %253 = cast(%252, dtype="float32") /* ty=Tensor[(13, 13, 16), float32] */;
  %254 = bitwise_and(%246, %247) /* ty=Tensor[(15, 9, 11), int64] */;
  %255 = acos(%253) /* ty=Tensor[(13, 13, 16), float32] */;
  (%254, meta[relay.Constant][12] /* ty=Tensor[(2704), uint32] */, %255)
}

def @func_7753() -> (Tensor[(2704), uint32],) {
  %256 = @func_3921() /* ty=Tensor[(2704), uint32] */;
  (%256,)
}

def @func_3522() -> Tensor[(15, 2, 14), float64] {
  %257 = @func_1181() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %257.0
}

def @func_1181() -> (Tensor[(15, 2, 14), float64],) {
  %258 = @func_750() /* ty=Tensor[(15, 2, 14), float64] */;
  (%258,)
}

def @func_242(%var_235: Tensor[(7, 6, 4), int64]) -> Tensor[(7, 6, 4), bool] {
  %259 = cast(meta[relay.Constant][13] /* ty=Tensor[(7, 6, 4), int64] */, dtype="bool") /* ty=Tensor[(7, 6, 4), bool] */;
  %260 = shape_of(%var_235, dtype="int32") /* ty=Tensor[(3), int32] */;
  %261 = cast(%var_235, dtype="bool") /* ty=Tensor[(7, 6, 4), bool] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%261, %262) /* ty=Tensor[(7, 6, 4), bool] */
}

def @func_4449(%var_4434: Tensor[(420), float64]) -> (Tensor[(1352, 2), uint32], Tensor[(180), int8], Tensor[(13, 13, 16), float32], Tensor[(420), float64], Tensor[(12, 4, 3), bool], Tensor[(12, 4, 3), int32]) {
  %263 = @func_2143() /* ty=(Tensor[(180), int8], Tensor[(13, 13, 16), bool], Tensor[(1352, 2), uint32]) */;
  %264 = cast(%var_4434, dtype="float64") /* ty=Tensor[(420), float64] */;
  %265 = cast(%var_4434, dtype="bool") /* ty=Tensor[(420), bool] */;
  %266 = reshape(%264, newshape=[15, 2, 14]) /* ty=Tensor[(15, 2, 14), float64] */;
  %267 = reshape(%265, newshape=[15, 2, 14]) /* ty=Tensor[(15, 2, 14), bool] */;
  %268 = @func_1794(%266, %267) /* ty=(Tensor[(15, 2, 14), int32], Tensor[(13, 13, 16), float32], Tensor[(165, 9), int64]) */;
  %269 = cast(meta[relay.Constant][14] /* ty=Tensor[(12, 4, 1), float32] */, dtype="float32") /* ty=Tensor[(12, 4, 1), float32] */;
  %270 = asin(%269) /* ty=Tensor[(12, 4, 1), float32] */;
  %271 = cast(%270, dtype="float32") /* ty=Tensor[(12, 4, 1), float32] */;
  %272 = acosh(%271) /* ty=Tensor[(12, 4, 1), float32] */;
  %273 = cast(%272, dtype="bool") /* ty=Tensor[(12, 4, 1), bool] */;
  %274 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 4, 3), float32] */, dtype="bool") /* ty=Tensor[(12, 4, 3), bool] */;
  %275 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 4, 3), float32] */, dtype="int32") /* ty=Tensor[(12, 4, 3), int32] */;
  %276 = cast(%270, dtype="int32") /* ty=Tensor[(12, 4, 1), int32] */;
  %277 = @func_3237() /* ty=Tensor[(1352, 2), uint32] */;
  %278 = %263.0;
  %279 = %268.1;
  %280 = equal(%273, %274) /* ty=Tensor[(12, 4, 3), bool] */;
  %281 = logical_xor(%275, %276) /* ty=Tensor[(12, 4, 3), int32] */;
  (%277, %278, %279, %var_4434, %280, %281)
}

def @func_5696() -> (Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool]) {
  %282 = @func_5384() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(450), int32]) */;
  %283 = %282.1;
  %284 = cast(%283, dtype="float64") /* ty=Tensor[(15, 2, 14), float64] */;
  %285 = reshape(%284, newshape=[15, 2, 14]) /* ty=Tensor[(15, 2, 14), float64] */;
  %286 = @func_871(%285) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(180), int8], Tensor[(4, 3, 15), bool]) */;
  %287 = %286.1;
  (%283, %287)
}

def @func_1592(%var_1585: Tensor[(12, 9, 14), float32]) -> Tensor[(12, 9, 14), float32] {
  %288 = cast(%var_1585, dtype="float32") /* ty=Tensor[(12, 9, 14), float32] */;
  sqrt(%288) /* ty=Tensor[(12, 9, 14), float32] */
}

def @func_1240(%var_1232: Tensor[(450), int32]) -> (Tensor[(4, 3, 15), float32], Tensor[(5, 10, 9), bool], Tensor[(450), int32]) {
  %289 = @func_1116() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32], Tensor[(15, 2, 14), float64]) */;
  %290 = %289.2;
  %291 = cast(%290, dtype="float64") /* ty=Tensor[(4, 3, 15), float64] */;
  %292 = exp(%291) /* ty=Tensor[(4, 3, 15), float64] */;
  %293 = cast(%292, dtype="float32") /* ty=Tensor[(4, 3, 15), float32] */;
  %294 = cast(%var_1232, dtype="int32") /* ty=Tensor[(450), int32] */;
  %295 = cast(%var_1232, dtype="int32") /* ty=Tensor[(450), int32] */;
  %296 = reshape(%294, newshape=[5, 10, 9]) /* ty=Tensor[(5, 10, 9), int32] */;
  %297 = reshape(%295, newshape=[5, 10, 9]) /* ty=Tensor[(5, 10, 9), int32] */;
  %298 = @func_65(%296, %297) /* ty=(Tensor[(5, 10, 9), int32], Tensor[(5, 10, 9), uint32], Tensor[(5, 10, 9), bool]) */;
  %299 = asin(%293) /* ty=Tensor[(4, 3, 15), float32] */;
  %300 = %298.2;
  (%299, %300, %var_1232)
}

def @func_7541() -> (Tensor[(4, 3, 15), bool],) {
  %301 = @func_6917() /* ty=(Tensor[(4, 3, 15), float32],) */;
  %302 = %301.0;
  %303 = cast(%302, dtype="float32") /* ty=Tensor[(4, 3, 15), float32] */;
  %304 = sinh(%303) /* ty=Tensor[(4, 3, 15), float32] */;
  %305 = cast(%302, dtype="bool") /* ty=Tensor[(4, 3, 15), bool] */;
  %306 = shape_of(%304, dtype="int32") /* ty=Tensor[(3), int32] */;
  %307 = cast(%304, dtype="bool") /* ty=Tensor[(4, 3, 15), bool] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %309 = greater_equal(%307, %308) /* ty=Tensor[(4, 3, 15), bool] */;
  (%309,)
}

def @func_3921() -> Tensor[(2704), uint32] {
  %310 = @func_2721() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(9, 14, 15), bool], Tensor[(5, 10, 9), int32], Tensor[(2704), uint32]) */;
  %310.3
}

def @func_912() -> (Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(180), int8]) {
  %311 = cast(meta[relay.Constant][16] /* ty=Tensor[(180), int8] */, dtype="int8") /* ty=Tensor[(180), int8] */;
  %312 = cast(meta[relay.Constant][16] /* ty=Tensor[(180), int8] */, dtype="int8") /* ty=Tensor[(180), int8] */;
  %313 = reshape(%311, newshape=[4, 3, 15]) /* ty=Tensor[(4, 3, 15), int8] */;
  %314 = reshape(%312, newshape=[4, 3, 15]) /* ty=Tensor[(4, 3, 15), int8] */;
  %315 = @func_886() /* ty=Tensor[(15, 2, 14), float64] */;
  %316 = @func_533(%313, %314) /* ty=Tensor[(4, 3, 15), bool] */;
  (%315, %316, meta[relay.Constant][16] /* ty=Tensor[(180), int8] */)
}

def @func_1999() -> (Tensor[(15, 2, 14), bool], Tensor[(9, 14, 15), bool], Tensor[(1890), float64]) {
  %317 = @func_1181() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %318 = %317.0;
  %319 = @func_934() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %320 = %319.0;
  %321 = cast(%320, dtype="bool") /* ty=Tensor[(15, 2, 14), bool] */;
  %322 = shape_of(%318, dtype="int32") /* ty=Tensor[(3), int32] */;
  %323 = cast(%318, dtype="bool") /* ty=Tensor[(15, 2, 14), bool] */;
  %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %325 = cast(meta[relay.Constant][17] /* ty=Tensor[(1890), float64] */, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %326 = cast(meta[relay.Constant][17] /* ty=Tensor[(1890), float64] */, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %327 = reshape(%325, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
  %328 = reshape(%326, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
  %329 = greater(%323, %324) /* ty=Tensor[(15, 2, 14), bool] */;
  %330 = @func_1733(%327, %328) /* ty=Tensor[(9, 14, 15), bool] */;
  (%329, %330, meta[relay.Constant][17] /* ty=Tensor[(1890), float64] */)
}

def @func_1673() -> (Tensor[(15, 2, 14), float64],) {
  %331 = @func_1116() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32], Tensor[(15, 2, 14), float64]) */;
  %332 = %331.1;
  %333 = cast(%332, dtype="float64") /* ty=Tensor[(15, 2, 14), float64] */;
  %334 = asinh(%333) /* ty=Tensor[(15, 2, 14), float64] */;
  (%334,)
}

def @func_4000() -> Tensor[(15, 2, 14), float64] {
  %335 = @func_2630() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %335.0
}

def @func_4944() -> (Tensor[(15, 2, 14), float64], Tensor[(2704), uint64], Tensor[(1, 2704), uint32]) {
  %336 = @func_934() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %337 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 2704), uint32] */, dtype="uint32") /* ty=Tensor[(1, 2704), uint32] */;
  %338 = reshape(%337, newshape=[2704]) /* ty=Tensor[(2704), uint32] */;
  %339 = %336.0;
  %340 = @func_4266(%338) /* ty=Tensor[(2704), uint64] */;
  (%339, %340, meta[relay.Constant][18] /* ty=Tensor[(1, 2704), uint32] */)
}

def @func_2630() -> (Tensor[(15, 2, 14), float64],) {
  %341 = @func_886() /* ty=Tensor[(15, 2, 14), float64] */;
  (%341,)
}

def @func_6980() -> Tensor[(4, 3, 15), float32] {
  @func_5897() /* ty=Tensor[(4, 3, 15), float32] */
}

def @func_4564(%var_4554: Tensor[(7, 11, 13), int16], %var_4555: Tensor[(7, 11, 13), int16]) -> Tensor[(7, 11, 13), bool] {
  %342 = cast(%var_4555, dtype="bool") /* ty=Tensor[(7, 11, 13), bool] */;
  %343 = shape_of(%var_4554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %344 = cast(%var_4554, dtype="bool") /* ty=Tensor[(7, 11, 13), bool] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%344, %345) /* ty=Tensor[(7, 11, 13), bool] */
}

def @func_4645() -> Tensor[(2704), float64] {
  %346 = @func_2039() /* ty=(Tensor[(4, 3, 15), bool], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32]) */;
  %347 = %346.2;
  %348 = cast(%347, dtype="float64") /* ty=Tensor[(2704), float64] */;
  asin(%348) /* ty=Tensor[(2704), float64] */
}

def @func_4670() -> (Tensor[(15, 2, 14), float64], Tensor[(13, 13, 16), bool]) {
  %349 = @func_2630() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %350 = @func_4544() /* ty=(Tensor[(13, 13, 16), bool], Tensor[(15, 2, 14), float64]) */;
  %351 = %349.0;
  %352 = %350.0;
  (%351, %352)
}

def @func_7331(%var_7311: int64, %var_7312: Tensor[(1, 1, 14), int64]) -> (Tensor[(1, 1, 14), bool],) {
  %353 = cast(%var_7311, dtype="bool") /* ty=bool */;
  %354 = cast(%var_7312, dtype="bool") /* ty=Tensor[(1, 1, 14), bool] */;
  %355 = not_equal(%353, %354) /* ty=Tensor[(1, 1, 14), bool] */;
  (%355,)
}

def @func_6962() -> (Tensor[(15, 2, 14), float64],) {
  %356 = @func_4477() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %357 = %356.0;
  (%357,)
}

def @func_886() -> Tensor[(15, 2, 14), float64] {
  @func_750() /* ty=Tensor[(15, 2, 14), float64] */
}

def @func_3237() -> Tensor[(1352, 2), uint32] {
  %358 = @func_2143() /* ty=(Tensor[(180), int8], Tensor[(13, 13, 16), bool], Tensor[(1352, 2), uint32]) */;
  %358.2
}

def @func_2865() -> (Tensor[(15, 2, 14), float64], Tensor[(13, 13, 16), float32], Tensor[(495, 3), int64], Tensor[(4, 3, 15), float64]) {
  %359 = @func_1116() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32], Tensor[(15, 2, 14), float64]) */;
  %360 = cast(meta[relay.Constant][19] /* ty=Tensor[(495, 3), int64] */, dtype="int64") /* ty=Tensor[(495, 3), int64] */;
  %361 = cast(meta[relay.Constant][19] /* ty=Tensor[(495, 3), int64] */, dtype="int64") /* ty=Tensor[(495, 3), int64] */;
  %362 = reshape(%360, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int64] */;
  %363 = reshape(%361, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int64] */;
  %364 = @func_799(%362, %363) /* ty=(Tensor[(15, 9, 11), int64], Tensor[(2704), uint32], Tensor[(13, 13, 16), float32]) */;
  %365 = @func_1916() /* ty=(Tensor[(4, 3, 15), bool],) */;
  %366 = %365.0;
  %367 = cast(%366, dtype="float64") /* ty=Tensor[(4, 3, 15), float64] */;
  %368 = atan(%367) /* ty=Tensor[(4, 3, 15), float64] */;
  %369 = cast(%368, dtype="float64") /* ty=Tensor[(4, 3, 15), float64] */;
  %370 = %359.5;
  %371 = %364.2;
  %372 = erf(%369) /* ty=Tensor[(4, 3, 15), float64] */;
  (%370, %371, meta[relay.Constant][19] /* ty=Tensor[(495, 3), int64] */, %372)
}

def @func_3396(%var_3364: Tensor[(5, 297), int64]) -> (Tensor[(15, 2, 14), float64], Tensor[(5, 297), int64], Tensor[(2704), int64], Tensor[(15, 2, 14), float64], Tensor[(1352, 2), uint32]) {
  %373 = @func_2865() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(13, 13, 16), float32], Tensor[(495, 3), int64], Tensor[(4, 3, 15), float64]) */;
  %374 = cast(%var_3364, dtype="int64") /* ty=Tensor[(5, 297), int64] */;
  %375 = cast(%var_3364, dtype="int64") /* ty=Tensor[(5, 297), int64] */;
  %376 = reshape(%374, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int64] */;
  %377 = reshape(%375, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int64] */;
  %378 = @func_799(%376, %377) /* ty=(Tensor[(15, 9, 11), int64], Tensor[(2704), uint32], Tensor[(13, 13, 16), float32]) */;
  %379 = %378.1;
  %380 = cast(meta[relay.Constant][20] /* ty=Tensor[(2704), uint32] */, dtype="int64") /* ty=Tensor[(2704), int64] */;
  %381 = shape_of(%379, dtype="int32") /* ty=Tensor[(1), int32] */;
  %382 = cast(%379, dtype="int64") /* ty=Tensor[(2704), int64] */;
  %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?), int64] */;
  %384 = @func_3284() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %385 = @func_2809() /* ty=(Tensor[(1352, 2), uint32], Tensor[(15, 2, 14), float32]) */;
  %386 = %373.0;
  %387 = subtract(%382, %383) /* ty=Tensor[(2704), int64] */;
  %388 = %384.0;
  %389 = %385.0;
  (%386, %var_3364, %387, %388, %389)
}

def @func_7370() -> (Tensor[(2704), float64], Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), float64]) {
  %390 = @func_5384() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(450), int32]) */;
  %391 = @func_5000() /* ty=Tensor[(4, 3, 15), bool] */;
  %392 = cast(%391, dtype="float64") /* ty=Tensor[(4, 3, 15), float64] */;
  %393 = @func_4645() /* ty=Tensor[(2704), float64] */;
  %394 = %390.1;
  %395 = asinh(%392) /* ty=Tensor[(4, 3, 15), float64] */;
  (%393, %394, %395)
}

def @func_1876() -> Tensor[(4, 3, 15), bool] {
  %396 = @func_912() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(180), int8]) */;
  %396.1
}

def @func_5016(%var_5008: Tensor[(8, 7, 7), float64]) -> (Tensor[(8, 7, 7), float64],) {
  %397 = cast(%var_5008, dtype="float64") /* ty=Tensor[(8, 7, 7), float64] */;
  %398 = cos(%397) /* ty=Tensor[(8, 7, 7), float64] */;
  (%398,)
}

def @func_7585(%var_7578: Tensor[(15, 2, 14), float64]) -> (Tensor[(15, 2, 14), float32], Tensor[(15, 2, 14), float64]) {
  %399 = @func_2996() /* ty=(Tensor[(15, 2, 14), float32], Tensor[(4, 3, 15), bool]) */;
  %400 = @func_6346() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %401 = %400.0;
  %402 = cast(%var_7578, dtype="float64") /* ty=Tensor[(15, 2, 14), float64] */;
  %403 = shape_of(%401, dtype="int32") /* ty=Tensor[(3), int32] */;
  %404 = cast(%401, dtype="float64") /* ty=Tensor[(15, 2, 14), float64] */;
  %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %406 = %399.0;
  %407 = multiply(%404, %405) /* ty=Tensor[(15, 2, 14), float64] */;
  (%406, %407)
}

def @func_4147() -> (Tensor[(15, 2, 14), uint32], Tensor[(13, 13, 16), bool]) {
  %408 = @func_3037() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), uint32]) */;
  %409 = @func_3209() /* ty=(Tensor[(13, 13, 16), bool],) */;
  %410 = %408.1;
  %411 = %409.0;
  (%410, %411)
}

def @func_7178() -> Tensor[(2704), uint64] {
  %412 = @func_4944() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(2704), uint64], Tensor[(1, 2704), uint32]) */;
  %412.1
}

def @func_6582(%var_6570: Tensor[(16, 7, 16), uint16], %var_6571: Tensor[(16, 7, 16), uint16]) -> (Tensor[(16, 7, 16), uint16], Tensor[(450), int32]) {
  %413 = cast(%var_6571, dtype="uint16") /* ty=Tensor[(16, 7, 16), uint16] */;
  %414 = shape_of(%var_6570, dtype="int32") /* ty=Tensor[(3), int32] */;
  %415 = cast(%var_6570, dtype="uint16") /* ty=Tensor[(16, 7, 16), uint16] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %417 = @func_5384() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(450), int32]) */;
  %418 = minimum(%415, %416) /* ty=Tensor[(16, 7, 16), uint16] */;
  %419 = %417.2;
  (%418, %419)
}

def @func_8226(%var_8199: Tensor[(4, 3, 15), bool]) -> Tensor[(4, 3, 15), bool] {
  %420 = @func_5000() /* ty=Tensor[(4, 3, 15), bool] */;
  %421 = cast(%var_8199, dtype="bool") /* ty=Tensor[(4, 3, 15), bool] */;
  %422 = shape_of(%420, dtype="int32") /* ty=Tensor[(3), int32] */;
  %423 = cast(%420, dtype="bool") /* ty=Tensor[(4, 3, 15), bool] */;
  %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%423, %424) /* ty=Tensor[(4, 3, 15), bool] */
}

def @func_4923(%var_4907: Tensor[(2704), uint32]) -> (Tensor[(4, 3, 15), float32], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32], Tensor[(180), int8], Tensor[(15, 2, 14), float64]) {
  %425 = @func_3226() /* ty=(Tensor[(180), int8], Tensor[(4, 3, 15), bool]) */;
  %426 = %425.1;
  %427 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 3, 15), bool] */, dtype="bool") /* ty=Tensor[(4, 3, 15), bool] */;
  %428 = shape_of(%426, dtype="int32") /* ty=Tensor[(3), int32] */;
  %429 = cast(%426, dtype="bool") /* ty=Tensor[(4, 3, 15), bool] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %431 = greater(%429, %430) /* ty=Tensor[(4, 3, 15), bool] */;
  %432 = cast(%431, dtype="float32") /* ty=Tensor[(4, 3, 15), float32] */;
  %433 = cast(%var_4907, dtype="uint32") /* ty=Tensor[(2704), uint32] */;
  %434 = cast(%var_4907, dtype="uint32") /* ty=Tensor[(2704), uint32] */;
  %435 = reshape(%433, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), uint32] */;
  %436 = reshape(%434, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), uint32] */;
  %437 = @func_912() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(180), int8]) */;
  %438 = @func_3878() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %439 = sin(%432) /* ty=Tensor[(4, 3, 15), float32] */;
  %440 = @func_213(%435, %436) /* ty=Tensor[(13, 13, 16), bool] */;
  %441 = %437.2;
  %442 = %438.0;
  (%439, %440, %var_4907, %441, %442)
}

def @func_2937(%var_2929: Tensor[(5, 9, 16), float32]) -> (Tensor[(5, 9, 16), float32], Tensor[(15, 2, 14), float64]) {
  %443 = cast(%var_2929, dtype="float32") /* ty=Tensor[(5, 9, 16), float32] */;
  %444 = @func_1673() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %445 = erf(%443) /* ty=Tensor[(5, 9, 16), float32] */;
  %446 = %444.0;
  (%445, %446)
}

def @func_4477() -> (Tensor[(15, 2, 14), float64],) {
  %447 = @func_3522() /* ty=Tensor[(15, 2, 14), float64] */;
  (%447,)
}

def @func_6813(%var_6788: Tensor[(720), float32]) -> (Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(720), float32], Tensor[(15, 2, 14), bool], Tensor[(13, 13, 16), bool], Tensor[(15, 2, 14), float64]) {
  %448 = @func_4321() /* ty=(Tensor[(12, 10, 14), bool], Tensor[(15, 2, 14), float64]) */;
  %449 = cast(%var_6788, dtype="float32") /* ty=Tensor[(720), float32] */;
  %450 = reshape(%449, newshape=[5, 9, 16]) /* ty=Tensor[(5, 9, 16), float32] */;
  %451 = @func_2937(%450) /* ty=(Tensor[(5, 9, 16), float32], Tensor[(15, 2, 14), float64]) */;
  %452 = %448.1;
  %453 = cast(%452, dtype="float64") /* ty=Tensor[(15, 2, 14), float64] */;
  %454 = reshape(%453, newshape=[15, 2, 14]) /* ty=Tensor[(15, 2, 14), float64] */;
  %455 = @func_6619(%454) /* ty=(Tensor[(15, 2, 14), bool],) */;
  %456 = @func_4544() /* ty=(Tensor[(13, 13, 16), bool], Tensor[(15, 2, 14), float64]) */;
  %457 = %451.1;
  %458 = %455.0;
  %459 = %456.0;
  %460 = @func_4000() /* ty=Tensor[(15, 2, 14), float64] */;
  (%452, %457, %var_6788, %458, %459, %460)
}

def @func_3806() -> (Tensor[(180), int8],) {
  %461 = @func_2143() /* ty=(Tensor[(180), int8], Tensor[(13, 13, 16), bool], Tensor[(1352, 2), uint32]) */;
  %462 = %461.0;
  (%462,)
}

def @func_4321() -> (Tensor[(12, 10, 14), bool], Tensor[(15, 2, 14), float64]) {
  %463 = cast(meta[relay.Constant][22] /* ty=Tensor[(12, 10, 14), float32] */, dtype="float32") /* ty=Tensor[(12, 10, 14), float32] */;
  %464 = exp(%463) /* ty=Tensor[(12, 10, 14), float32] */;
  %465 = cast(%464, dtype="bool") /* ty=Tensor[(12, 10, 14), bool] */;
  %466 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(12, 10, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %467 = cast(meta[relay.Constant][22] /* ty=Tensor[(12, 10, 14), float32] */, dtype="bool") /* ty=Tensor[(12, 10, 14), bool] */;
  %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %469 = @func_3878() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %470 = less(%467, %468) /* ty=Tensor[(12, 10, 14), bool] */;
  %471 = %469.0;
  (%470, %471)
}

def @func_4040(%var_4035: Tensor[(1890), float64]) -> (Tensor[(15, 2, 14), float64], Tensor[(9, 14, 15), bool], Tensor[(1890), float64]) {
  %472 = @func_1181() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %473 = cast(%var_4035, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %474 = cast(%var_4035, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %475 = reshape(%473, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
  %476 = reshape(%474, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
  %477 = %472.0;
  %478 = @func_1733(%475, %476) /* ty=Tensor[(9, 14, 15), bool] */;
  (%477, %478, %var_4035)
}

def @func_5897() -> Tensor[(4, 3, 15), float32] {
  %479 = @func_2865() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(13, 13, 16), float32], Tensor[(495, 3), int64], Tensor[(4, 3, 15), float64]) */;
  %480 = %479.3;
  %481 = cast(%480, dtype="float32") /* ty=Tensor[(4, 3, 15), float32] */;
  %482 = cos(%481) /* ty=Tensor[(4, 3, 15), float32] */;
  %483 = cast(%482, dtype="float32") /* ty=Tensor[(4, 3, 15), float32] */;
  rsqrt(%483) /* ty=Tensor[(4, 3, 15), float32] */
}

def @func_934() -> (Tensor[(15, 2, 14), float64],) {
  %484 = @func_886() /* ty=Tensor[(15, 2, 14), float64] */;
  (%484,)
}

def @func_5389() -> Tensor[(15, 2, 14), float64] {
  %485 = @func_1673() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %485.0
}

def @func_7999() -> (Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), uint32], Tensor[(1352, 2), bool], Tensor[(1, 720), float32], Tensor[(60, 12), float32]) {
  %486 = @func_4147() /* ty=(Tensor[(15, 2, 14), uint32], Tensor[(13, 13, 16), bool]) */;
  %487 = @func_6834() /* ty=(Tensor[(1352, 2), bool],) */;
  %488 = cast(meta[relay.Constant][23] /* ty=Tensor[(60, 12), float32] */, dtype="float32") /* ty=Tensor[(60, 12), float32] */;
  %489 = reshape(%488, newshape=[1, 720]) /* ty=Tensor[(1, 720), float32] */;
  %490 = @func_3347(%489) /* ty=(Tensor[(15, 2, 14), float32], Tensor[(15, 2, 14), float64], Tensor[(1, 720), float32]) */;
  %491 = @func_7805() /* ty=Tensor[(15, 2, 14), float64] */;
  %492 = %486.0;
  %493 = %487.0;
  %494 = %490.2;
  (%491, %492, %493, %494, meta[relay.Constant][23] /* ty=Tensor[(60, 12), float32] */)
}

def @func_2721() -> (Tensor[(15, 2, 14), float64], Tensor[(9, 14, 15), bool], Tensor[(5, 10, 9), int32], Tensor[(2704), uint32]) {
  %495 = @func_2630() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %496 = @func_1999() /* ty=(Tensor[(15, 2, 14), bool], Tensor[(9, 14, 15), bool], Tensor[(1890), float64]) */;
  %497 = cast(meta[relay.Constant][24] /* ty=Tensor[(2704), uint32] */, dtype="uint32") /* ty=Tensor[(2704), uint32] */;
  %498 = reshape(%497, newshape=[1, 2704]) /* ty=Tensor[(1, 2704), uint32] */;
  %499 = @func_1513(%498) /* ty=(Tensor[(16, 16, 14), float32], Tensor[(5, 10, 9), int32], Tensor[(450), int32], Tensor[(7, 6, 4), bool], Tensor[(168), int64], Tensor[(13, 13, 16), bool], Tensor[(1, 2704), uint32], Tensor[(13, 13, 16), bool]) */;
  %500 = %495.0;
  %501 = %496.1;
  %502 = %499.1;
  (%500, %501, %502, meta[relay.Constant][24] /* ty=Tensor[(2704), uint32] */)
}

def @func_3037() -> (Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), uint32]) {
  %503 = @func_750() /* ty=Tensor[(15, 2, 14), float64] */;
  %504 = cast(meta[relay.Constant][25] /* ty=Tensor[(15, 2, 14), float64] */, dtype="uint32") /* ty=Tensor[(15, 2, 14), uint32] */;
  %505 = shape_of(%503, dtype="int32") /* ty=Tensor[(3), int32] */;
  %506 = cast(%503, dtype="uint32") /* ty=Tensor[(15, 2, 14), uint32] */;
  %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %508 = @func_886() /* ty=Tensor[(15, 2, 14), float64] */;
  %509 = minimum(%506, %507) /* ty=Tensor[(15, 2, 14), uint32] */;
  (%508, %509)
}

def @func_6318() -> (Tensor[(16, 7, 16), bool], Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(2704), uint32]) {
  %510 = @func_1673() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %511 = cast(meta[relay.Constant][26] /* ty=Tensor[(2704), uint32] */, dtype="uint32") /* ty=Tensor[(2704), uint32] */;
  %512 = reshape(%511, newshape=[2704]) /* ty=Tensor[(2704), uint32] */;
  %513 = @func_1458(%512) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(7, 6, 4), bool], Tensor[(42, 4), int64], Tensor[(13, 13, 16), bool], Tensor[(4, 3, 15), bool], Tensor[(15, 2, 14), float64], Tensor[(2704), float32]) */;
  %514 = @func_4102() /* ty=Tensor[(16, 7, 16), bool] */;
  %515 = %510.0;
  %516 = %513.5;
  (%514, %515, %516, meta[relay.Constant][26] /* ty=Tensor[(2704), uint32] */)
}

def @func_6469(%var_6401: Tensor[(11, 3, 10), float32], %var_6407: Tensor[(1890), float64]) -> (Tensor[(11, 3, 10), float32], Tensor[(1890), float64], Tensor[(1890), float64], Tensor[(4, 3, 15), bool], Tensor[(15, 2, 14), float64], Tensor[(180), int8], Tensor[(180), int8]) {
  %517 = cast(%var_6401, dtype="float32") /* ty=Tensor[(11, 3, 10), float32] */;
  %518 = cast(%var_6407, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %519 = reshape(%518, newshape=[1890]) /* ty=Tensor[(1890), float64] */;
  %520 = @func_4040(%519) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(9, 14, 15), bool], Tensor[(1890), float64]) */;
  %521 = @func_912() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(180), int8]) */;
  %522 = @func_3226() /* ty=(Tensor[(180), int8], Tensor[(4, 3, 15), bool]) */;
  %523 = acos(%517) /* ty=Tensor[(11, 3, 10), float32] */;
  %524 = %520.2;
  %525 = @func_5402() /* ty=Tensor[(4, 3, 15), bool] */;
  %526 = @func_3249() /* ty=Tensor[(15, 2, 14), float64] */;
  %527 = %521.2;
  %528 = %522.0;
  (%523, %524, %var_6407, %525, %526, %527, %528)
}

def @func_871(%var_824: Tensor[(15, 2, 14), float64]) -> (Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(180), int8], Tensor[(4, 3, 15), bool]) {
  %529 = @func_750() /* ty=Tensor[(15, 2, 14), float64] */;
  %530 = cast(%var_824, dtype="float32") /* ty=Tensor[(15, 2, 14), float32] */;
  %531 = shape_of(%529, dtype="int32") /* ty=Tensor[(3), int32] */;
  %532 = cast(%529, dtype="float32") /* ty=Tensor[(15, 2, 14), float32] */;
  %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %534 = floor_mod(%532, %533) /* ty=Tensor[(15, 2, 14), float32] */;
  %535 = cast(%534, dtype="float64") /* ty=Tensor[(15, 2, 14), float64] */;
  %536 = cast(meta[relay.Constant][27] /* ty=Tensor[(180), int8] */, dtype="int8") /* ty=Tensor[(180), int8] */;
  %537 = cast(meta[relay.Constant][27] /* ty=Tensor[(180), int8] */, dtype="int8") /* ty=Tensor[(180), int8] */;
  %538 = reshape(%536, newshape=[4, 3, 15]) /* ty=Tensor[(4, 3, 15), int8] */;
  %539 = reshape(%537, newshape=[4, 3, 15]) /* ty=Tensor[(4, 3, 15), int8] */;
  %540 = @func_533(%538, %539) /* ty=Tensor[(4, 3, 15), bool] */;
  %541 = cast(%540, dtype="int8") /* ty=Tensor[(4, 3, 15), int8] */;
  %542 = cast(%540, dtype="int8") /* ty=Tensor[(4, 3, 15), int8] */;
  %543 = reshape(%541, newshape=[4, 3, 15]) /* ty=Tensor[(4, 3, 15), int8] */;
  %544 = reshape(%542, newshape=[4, 3, 15]) /* ty=Tensor[(4, 3, 15), int8] */;
  %545 = tan(%535) /* ty=Tensor[(15, 2, 14), float64] */;
  %546 = @func_533(%543, %544) /* ty=Tensor[(4, 3, 15), bool] */;
  (%545, %540, meta[relay.Constant][27] /* ty=Tensor[(180), int8] */, %546)
}

def @func_6193(%var_6173: Tensor[(4, 2, 13), int8], %var_6174: Tensor[(4, 2, 13), int8], %var_6183: Tensor[(13, 14), float32]) -> (Tensor[(4, 2, 13), int8], Tensor[(2, 13, 7), float32], Tensor[(13, 14), float32], Tensor[(15, 2, 14), float32]) {
  %547 = cast(%var_6174, dtype="int8") /* ty=Tensor[(4, 2, 13), int8] */;
  %548 = shape_of(%var_6173, dtype="int32") /* ty=Tensor[(3), int32] */;
  %549 = cast(%var_6173, dtype="int8") /* ty=Tensor[(4, 2, 13), int8] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %551 = cast(%var_6183, dtype="float32") /* ty=Tensor[(13, 14), float32] */;
  %552 = reshape(%551, newshape=[2, 13, 7]) /* ty=Tensor[(2, 13, 7), float32] */;
  %553 = @func_3472(%552) /* ty=(Tensor[(2, 13, 7), float32],) */;
  %554 = maximum(%549, %550) /* ty=Tensor[(4, 2, 13), int8] */;
  %555 = %553.0;
  %556 = @func_5760() /* ty=Tensor[(15, 2, 14), float32] */;
  (%554, %555, %var_6183, %556)
}

def @func_965() -> (Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64]) {
  %557 = @func_934() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %558 = %557.0;
  %559 = @func_750() /* ty=Tensor[(15, 2, 14), float64] */;
  (%558, %559)
}

def @func_5542() -> (Tensor[(4, 3, 15), bool], Tensor[(180), int8], Tensor[(13, 13, 16), bool], Tensor[(104, 26), bool]) {
  %560 = @func_1916() /* ty=(Tensor[(4, 3, 15), bool],) */;
  %561 = @func_3226() /* ty=(Tensor[(180), int8], Tensor[(4, 3, 15), bool]) */;
  %562 = cast(meta[relay.Constant][28] /* ty=Tensor[(104, 26), bool] */, dtype="bool") /* ty=Tensor[(104, 26), bool] */;
  %563 = reshape(%562, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), bool] */;
  %564 = @func_5093(%563) /* ty=(Tensor[(13, 13, 16), bool], Tensor[(7, 6, 4), float32]) */;
  %565 = %560.0;
  %566 = %561.0;
  %567 = %564.0;
  (%565, %566, %567, meta[relay.Constant][28] /* ty=Tensor[(104, 26), bool] */)
}

def @func_4772(%var_4723: Tensor[(2, 8, 3), float64], %var_4747: Tensor[(1890), float64]) -> (Tensor[(15, 2, 14), float64], Tensor[(1890), float64], Tensor[(2, 8, 3), float32], Tensor[(9, 14, 15), float64], Tensor[(15, 2, 14), float64]) {
  %568 = @func_3037() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), uint32]) */;
  %569 = cast(%var_4723, dtype="float64") /* ty=Tensor[(2, 8, 3), float64] */;
  %570 = sqrt(%569) /* ty=Tensor[(2, 8, 3), float64] */;
  %571 = cast(%570, dtype="float32") /* ty=Tensor[(2, 8, 3), float32] */;
  %572 = cast(%var_4747, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %573 = cast(%var_4747, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %574 = reshape(%572, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
  %575 = reshape(%573, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
  %576 = @func_1733(%574, %575) /* ty=Tensor[(9, 14, 15), bool] */;
  %577 = cast(%576, dtype="float64") /* ty=Tensor[(9, 14, 15), float64] */;
  %578 = %568.0;
  %579 = cast(%578, dtype="float64") /* ty=Tensor[(15, 2, 14), float64] */;
  %580 = reshape(%579, newshape=[15, 2, 14]) /* ty=Tensor[(15, 2, 14), float64] */;
  %581 = @func_871(%580) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(180), int8], Tensor[(4, 3, 15), bool]) */;
  %582 = exp(%571) /* ty=Tensor[(2, 8, 3), float32] */;
  %583 = acosh(%577) /* ty=Tensor[(9, 14, 15), float64] */;
  %584 = %581.0;
  (%578, %var_4747, %582, %583, %584)
}

def @func_3209() -> (Tensor[(13, 13, 16), bool],) {
  %585 = @func_1116() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32], Tensor[(15, 2, 14), float64]) */;
  %586 = %585.3;
  (%586,)
}

def @func_5093(%var_5056: Tensor[(13, 13, 16), bool]) -> (Tensor[(13, 13, 16), bool], Tensor[(7, 6, 4), float32]) {
  %587 = @func_3209() /* ty=(Tensor[(13, 13, 16), bool],) */;
  %588 = %587.0;
  %589 = cast(%var_5056, dtype="bool") /* ty=Tensor[(13, 13, 16), bool] */;
  %590 = shape_of(%588, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(%588, dtype="bool") /* ty=Tensor[(13, 13, 16), bool] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %593 = less_equal(%591, %592) /* ty=Tensor[(13, 13, 16), bool] */;
  %594 = cast(%593, dtype="uint32") /* ty=Tensor[(13, 13, 16), uint32] */;
  %595 = reshape(%594, newshape=[2704]) /* ty=Tensor[(2704), uint32] */;
  %596 = @func_1458(%595) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(7, 6, 4), bool], Tensor[(42, 4), int64], Tensor[(13, 13, 16), bool], Tensor[(4, 3, 15), bool], Tensor[(15, 2, 14), float64], Tensor[(2704), float32]) */;
  %597 = %596.1;
  %598 = cast(%597, dtype="float32") /* ty=Tensor[(7, 6, 4), float32] */;
  %599 = rsqrt(%598) /* ty=Tensor[(7, 6, 4), float32] */;
  (%593, %599)
}

def @func_6917() -> (Tensor[(4, 3, 15), float32],) {
  %600 = @func_2388() /* ty=(Tensor[(4, 3, 15), bool],) */;
  %601 = %600.0;
  %602 = cast(%601, dtype="float32") /* ty=Tensor[(4, 3, 15), float32] */;
  %603 = log2(%602) /* ty=Tensor[(4, 3, 15), float32] */;
  (%603,)
}

def @func_8284() -> (Tensor[(4, 3, 15), uint8], Tensor[(4, 3, 15), int8], Tensor[(15, 2, 14), float32], Tensor[(4, 3, 15), float64]) {
  %604 = @func_2388() /* ty=(Tensor[(4, 3, 15), bool],) */;
  %605 = %604.0;
  %606 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 3, 15), bool] */, dtype="uint8") /* ty=Tensor[(4, 3, 15), uint8] */;
  %607 = shape_of(%605, dtype="int32") /* ty=Tensor[(3), int32] */;
  %608 = cast(%605, dtype="uint8") /* ty=Tensor[(4, 3, 15), uint8] */;
  %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %610 = cast(%605, dtype="int8") /* ty=Tensor[(4, 3, 15), int8] */;
  %611 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(4, 3, 15), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %612 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 3, 15), bool] */, dtype="int8") /* ty=Tensor[(4, 3, 15), int8] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %614 = @func_7711() /* ty=(Tensor[(4, 3, 15), float32], Tensor[(15, 2, 14), float32]) */;
  %615 = cast(%605, dtype="float64") /* ty=Tensor[(4, 3, 15), float64] */;
  %616 = minimum(%608, %609) /* ty=Tensor[(4, 3, 15), uint8] */;
  %617 = bitwise_and(%612, %613) /* ty=Tensor[(4, 3, 15), int8] */;
  %618 = %614.1;
  %619 = log(%615) /* ty=Tensor[(4, 3, 15), float64] */;
  (%616, %617, %618, %619)
}

def @func_7502() -> Tensor[(15, 2, 14), float64] {
  @func_4000() /* ty=Tensor[(15, 2, 14), float64] */
}

def @func_4714() -> Tensor[(15, 2, 14), float64] {
  @func_1576() /* ty=Tensor[(15, 2, 14), float64] */
}

def @func_7711() -> (Tensor[(4, 3, 15), float32], Tensor[(15, 2, 14), float32]) {
  %620 = @func_6917() /* ty=(Tensor[(4, 3, 15), float32],) */;
  %621 = @func_2356() /* ty=(Tensor[(15, 2, 14), float32],) */;
  %622 = %620.0;
  %623 = %621.0;
  (%622, %623)
}

def @main(%var_8666: Tensor[(4, 1, 9), uint16]) -> (Tensor[(4, 1, 9), uint32], Tensor[(4, 1, 9), float32]) {
  %624 = cast(meta[relay.Constant][30] /* ty=uint16 */, dtype="uint32") /* ty=uint32 */;
  %625 = cast(%var_8666, dtype="uint32") /* ty=Tensor[(4, 1, 9), uint32] */;
  %626 = cast(meta[relay.Constant][30] /* ty=uint16 */, dtype="bool") /* ty=bool */;
  %627 = cast(%var_8666, dtype="bool") /* ty=Tensor[(4, 1, 9), bool] */;
  %628 = greater_equal(%626, %627) /* ty=Tensor[(4, 1, 9), bool] */;
  %629 = cast(%628, dtype="float32") /* ty=Tensor[(4, 1, 9), float32] */;
  %630 = bitwise_xor(%624, %625) /* ty=Tensor[(4, 1, 9), uint32] */;
  %631 = log(%629) /* ty=Tensor[(4, 1, 9), float32] */;
  (%630, %631)
}

def @func_8579(%var_8574: Tensor[(180), bool]) -> (Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), int64], Tensor[(180), bool]) {
  %632 = @func_3878() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %633 = cast(%var_8574, dtype="bool") /* ty=Tensor[(180), bool] */;
  %634 = reshape(%633, newshape=[4, 3, 15]) /* ty=Tensor[(4, 3, 15), bool] */;
  %635 = @func_5132(%634) /* ty=(Tensor[(4, 3, 15), int64],) */;
  %636 = %632.0;
  %637 = %635.0;
  (%636, %637, %var_8574)
}

def @func_2218(%var_2208: Tensor[(450), int32]) -> (Tensor[(15, 2, 14), float64], Tensor[(450), int32], Tensor[(450), int32], Tensor[(15, 2, 14), float64]) {
  %638 = cast(%var_2208, dtype="int32") /* ty=Tensor[(450), int32] */;
  %639 = reshape(%638, newshape=[450]) /* ty=Tensor[(450), int32] */;
  %640 = @func_1240(%639) /* ty=(Tensor[(4, 3, 15), float32], Tensor[(5, 10, 9), bool], Tensor[(450), int32]) */;
  %641 = @func_1116() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32], Tensor[(15, 2, 14), float64]) */;
  %642 = @func_886() /* ty=Tensor[(15, 2, 14), float64] */;
  %643 = %640.2;
  %644 = %641.1;
  (%642, %643, %var_2208, %644)
}

def @func_6885() -> (Tensor[(15, 2, 14), float64],) {
  %645 = @func_1181() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %646 = %645.0;
  (%646,)
}

def @func_2535() -> Tensor[(15, 2, 14), float64] {
  @func_750() /* ty=Tensor[(15, 2, 14), float64] */
}

def @func_4617(%var_4591: Tensor[(720), float32]) -> (Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(720), float32]) {
  %647 = cast(%var_4591, dtype="float32") /* ty=Tensor[(720), float32] */;
  %648 = reshape(%647, newshape=[5, 9, 16]) /* ty=Tensor[(5, 9, 16), float32] */;
  %649 = @func_2937(%648) /* ty=(Tensor[(5, 9, 16), float32], Tensor[(15, 2, 14), float64]) */;
  %650 = @func_4379() /* ty=Tensor[(15, 2, 14), float64] */;
  %651 = %649.1;
  (%650, %651, %var_4591)
}

def @func_8622() -> (Tensor[(15, 2, 14), float64],) {
  %652 = @func_7406() /* ty=Tensor[(15, 2, 14), float64] */;
  (%652,)
}

def @func_4379() -> Tensor[(15, 2, 14), float64] {
  %653 = @func_3798() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(5, 10, 9), bool], Tensor[(450), int32], Tensor[(42, 4), int64], Tensor[(13, 13, 16), float32], Tensor[(15, 2, 14), float64], Tensor[(450), int32], Tensor[(4, 3, 15), bool], Tensor[(15, 2, 14), float64]) */;
  %653.8
}

def @func_1513(%var_1500: Tensor[(1, 2704), uint32]) -> (Tensor[(16, 16, 14), float32], Tensor[(5, 10, 9), int32], Tensor[(450), int32], Tensor[(7, 6, 4), bool], Tensor[(168), int64], Tensor[(13, 13, 16), bool], Tensor[(1, 2704), uint32], Tensor[(13, 13, 16), bool]) {
  %654 = cast(meta[relay.Constant][31] /* ty=Tensor[(16, 16, 14), float32] */, dtype="float32") /* ty=Tensor[(16, 16, 14), float32] */;
  %655 = cast(meta[relay.Constant][32] /* ty=Tensor[(450), int32] */, dtype="int32") /* ty=Tensor[(450), int32] */;
  %656 = cast(meta[relay.Constant][32] /* ty=Tensor[(450), int32] */, dtype="int32") /* ty=Tensor[(450), int32] */;
  %657 = reshape(%655, newshape=[5, 10, 9]) /* ty=Tensor[(5, 10, 9), int32] */;
  %658 = reshape(%656, newshape=[5, 10, 9]) /* ty=Tensor[(5, 10, 9), int32] */;
  %659 = @func_65(%657, %658) /* ty=(Tensor[(5, 10, 9), int32], Tensor[(5, 10, 9), uint32], Tensor[(5, 10, 9), bool]) */;
  %660 = cast(meta[relay.Constant][33] /* ty=Tensor[(168), int64] */, dtype="int64") /* ty=Tensor[(168), int64] */;
  %661 = reshape(%660, newshape=[7, 6, 4]) /* ty=Tensor[(7, 6, 4), int64] */;
  %662 = cast(%var_1500, dtype="uint32") /* ty=Tensor[(1, 2704), uint32] */;
  %663 = cast(%var_1500, dtype="uint32") /* ty=Tensor[(1, 2704), uint32] */;
  %664 = reshape(%662, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), uint32] */;
  %665 = reshape(%663, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), uint32] */;
  %666 = cast(%var_1500, dtype="uint32") /* ty=Tensor[(1, 2704), uint32] */;
  %667 = reshape(%666, newshape=[2704]) /* ty=Tensor[(2704), uint32] */;
  %668 = @func_1458(%667) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(7, 6, 4), bool], Tensor[(42, 4), int64], Tensor[(13, 13, 16), bool], Tensor[(4, 3, 15), bool], Tensor[(15, 2, 14), float64], Tensor[(2704), float32]) */;
  %669 = log2(%654) /* ty=Tensor[(16, 16, 14), float32] */;
  %670 = %659.0;
  %671 = @func_242(%661) /* ty=Tensor[(7, 6, 4), bool] */;
  %672 = @func_213(%664, %665) /* ty=Tensor[(13, 13, 16), bool] */;
  %673 = %668.3;
  (%669, %670, meta[relay.Constant][32] /* ty=Tensor[(450), int32] */, %671, meta[relay.Constant][33] /* ty=Tensor[(168), int64] */, %672, %var_1500, %673)
}

def @func_5445() -> (Tensor[(15, 2, 14), float64], Tensor[(12, 10, 14), bool]) {
  %674 = @func_4321() /* ty=(Tensor[(12, 10, 14), bool], Tensor[(15, 2, 14), float64]) */;
  %675 = @func_750() /* ty=Tensor[(15, 2, 14), float64] */;
  %676 = %674.0;
  (%675, %676)
}

def @func_7406() -> Tensor[(15, 2, 14), float64] {
  %677 = @func_5445() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(12, 10, 14), bool]) */;
  %677.0
}

def @func_5402() -> Tensor[(4, 3, 15), bool] {
  %678 = @func_2996() /* ty=(Tensor[(15, 2, 14), float32], Tensor[(4, 3, 15), bool]) */;
  %678.1
}

def @func_7805() -> Tensor[(15, 2, 14), float64] {
  @func_7406() /* ty=Tensor[(15, 2, 14), float64] */
}

def @func_4816() -> (Tensor[(15, 2, 14), float32], Tensor[(1352, 2), bool]) {
  %679 = @func_934() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %680 = %679.0;
  %681 = cast(%680, dtype="float64") /* ty=Tensor[(15, 2, 14), float64] */;
  %682 = log10(%681) /* ty=Tensor[(15, 2, 14), float64] */;
  %683 = cast(%680, dtype="float32") /* ty=Tensor[(15, 2, 14), float32] */;
  %684 = shape_of(%682, dtype="int32") /* ty=Tensor[(3), int32] */;
  %685 = cast(%682, dtype="float32") /* ty=Tensor[(15, 2, 14), float32] */;
  %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %687 = @func_4697() /* ty=(Tensor[(1352, 2), bool],) */;
  %688 = power(%685, %686) /* ty=Tensor[(15, 2, 14), float32] */;
  %689 = %687.0;
  (%688, %689)
}

def @func_4102() -> Tensor[(16, 7, 16), bool] {
  %690 = cast(meta[relay.Constant][35] /* ty=Tensor[(16, 7, 16), uint64] */, dtype="bool") /* ty=Tensor[(16, 7, 16), bool] */;
  %691 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(16, 7, 16), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %692 = cast(meta[relay.Constant][34] /* ty=Tensor[(16, 7, 16), uint64] */, dtype="bool") /* ty=Tensor[(16, 7, 16), bool] */;
  %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%692, %693) /* ty=Tensor[(16, 7, 16), bool] */
}

def @func_5384() -> (Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(450), int32]) {
  %694 = @func_934() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %695 = @func_1181() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %696 = @func_3798() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(5, 10, 9), bool], Tensor[(450), int32], Tensor[(42, 4), int64], Tensor[(13, 13, 16), float32], Tensor[(15, 2, 14), float64], Tensor[(450), int32], Tensor[(4, 3, 15), bool], Tensor[(15, 2, 14), float64]) */;
  %697 = %694.0;
  %698 = %695.0;
  %699 = %696.2;
  (%697, %698, %699)
}

def @func_5973(%var_5915: float32, %var_5916: Tensor[(6, 10, 12), float32], %var_5938: Tensor[(6, 10, 12), float32]) -> (Tensor[(6, 10, 12), int32], Tensor[(15, 2, 14), float64]) {
  %700 = cast(%var_5915, dtype="float32") /* ty=float32 */;
  %701 = cast(%var_5916, dtype="float32") /* ty=Tensor[(6, 10, 12), float32] */;
  %702 = power(%700, %701) /* ty=Tensor[(6, 10, 12), float32] */;
  %703 = cast(%var_5938, dtype="int32") /* ty=Tensor[(6, 10, 12), int32] */;
  %704 = shape_of(%702, dtype="int32") /* ty=Tensor[(3), int32] */;
  %705 = cast(%702, dtype="int32") /* ty=Tensor[(6, 10, 12), int32] */;
  %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %707 = @func_4670() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(13, 13, 16), bool]) */;
  %708 = logical_xor(%705, %706) /* ty=Tensor[(6, 10, 12), int32] */;
  %709 = %707.0;
  (%708, %709)
}

def @func_4544() -> (Tensor[(13, 13, 16), bool], Tensor[(15, 2, 14), float64]) {
  %710 = @func_2143() /* ty=(Tensor[(180), int8], Tensor[(13, 13, 16), bool], Tensor[(1352, 2), uint32]) */;
  %711 = @func_934() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %712 = %710.1;
  %713 = %711.0;
  (%712, %713)
}

def @func_5580(%var_5571: Tensor[(2704), uint32]) -> (Tensor[(15, 2, 14), float64], Tensor[(4, 14, 11), float64], Tensor[(15, 2, 14), float64], Tensor[(2704), uint64], Tensor[(2704), uint32], Tensor[(15, 2, 14), float64]) {
  %714 = @func_1181() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %715 = @func_4967() /* ty=(Tensor[(4, 14, 11), float64],) */;
  %716 = @func_1116() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32], Tensor[(15, 2, 14), float64]) */;
  %717 = cast(%var_5571, dtype="uint32") /* ty=Tensor[(2704), uint32] */;
  %718 = reshape(%717, newshape=[2704]) /* ty=Tensor[(2704), uint32] */;
  %719 = %714.0;
  %720 = %715.0;
  %721 = %716.5;
  %722 = @func_4266(%718) /* ty=Tensor[(2704), uint64] */;
  %723 = @func_4714() /* ty=Tensor[(15, 2, 14), float64] */;
  (%719, %720, %721, %722, %var_5571, %723)
}

def @func_6755() -> (Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool]) {
  %724 = @func_1673() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %725 = @func_2388() /* ty=(Tensor[(4, 3, 15), bool],) */;
  %726 = %724.0;
  %727 = %725.0;
  (%726, %727)
}

def @func_5227() -> (Tensor[(15, 2, 14), float64],) {
  %728 = @func_750() /* ty=Tensor[(15, 2, 14), float64] */;
  (%728,)
}

def @func_5646() -> (Tensor[(15, 2, 14), float64], Tensor[(7, 11, 13), bool], Tensor[(1, 1001), int16]) {
  %729 = @func_934() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %730 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 1001), int16] */, dtype="int16") /* ty=Tensor[(1, 1001), int16] */;
  %731 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 1001), int16] */, dtype="int16") /* ty=Tensor[(1, 1001), int16] */;
  %732 = reshape(%730, newshape=[7, 11, 13]) /* ty=Tensor[(7, 11, 13), int16] */;
  %733 = reshape(%731, newshape=[7, 11, 13]) /* ty=Tensor[(7, 11, 13), int16] */;
  %734 = %729.0;
  %735 = @func_4564(%732, %733) /* ty=Tensor[(7, 11, 13), bool] */;
  (%734, %735, meta[relay.Constant][36] /* ty=Tensor[(1, 1001), int16] */)
}

def @func_4218(%var_4183: Tensor[(8, 1, 14), int64]) -> (Tensor[(8, 8, 14), bool], Tensor[(15, 2, 14), float64], Tensor[(16, 7, 16), bool]) {
  %736 = cast(%var_4183, dtype="bool") /* ty=Tensor[(8, 1, 14), bool] */;
  %737 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 8, 14), int64] */, dtype="bool") /* ty=Tensor[(8, 8, 14), bool] */;
  %738 = greater_equal(%736, %737) /* ty=Tensor[(8, 8, 14), bool] */;
  %739 = @func_750() /* ty=Tensor[(15, 2, 14), float64] */;
  %740 = @func_4102() /* ty=Tensor[(16, 7, 16), bool] */;
  (%738, %739, %740)
}

def @func_6257(%var_6214: Tensor[(2704), uint32]) -> (Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(15, 2, 14), float32], Tensor[(2704), float64]) {
  %741 = cast(%var_6214, dtype="uint32") /* ty=Tensor[(2704), uint32] */;
  %742 = reshape(%741, newshape=[2704]) /* ty=Tensor[(2704), uint32] */;
  %743 = @func_1458(%742) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(7, 6, 4), bool], Tensor[(42, 4), int64], Tensor[(13, 13, 16), bool], Tensor[(4, 3, 15), bool], Tensor[(15, 2, 14), float64], Tensor[(2704), float32]) */;
  %744 = @func_2996() /* ty=(Tensor[(15, 2, 14), float32], Tensor[(4, 3, 15), bool]) */;
  %745 = cast(meta[relay.Constant][38] /* ty=Tensor[(2704), uint32] */, dtype="float64") /* ty=Tensor[(2704), float64] */;
  %746 = shape_of(%var_6214, dtype="int32") /* ty=Tensor[(1), int32] */;
  %747 = cast(%var_6214, dtype="float64") /* ty=Tensor[(2704), float64] */;
  %748 = dyn.reshape(%745, %746, newshape=[]) /* ty=Tensor[(?), float64] */;
  %749 = @func_4084() /* ty=Tensor[(15, 2, 14), float64] */;
  %750 = %743.4;
  %751 = %744.0;
  %752 = add(%747, %748) /* ty=Tensor[(2704), float64] */;
  (%749, %750, %751, %752)
}

def @func_7482() -> (Tensor[(15, 2, 14), float64], Tensor[(13, 13, 16), bool]) {
  %753 = @func_3209() /* ty=(Tensor[(13, 13, 16), bool],) */;
  %754 = @func_886() /* ty=Tensor[(15, 2, 14), float64] */;
  %755 = %753.0;
  (%754, %755)
}

def @func_4084() -> Tensor[(15, 2, 14), float64] {
  @func_4000() /* ty=Tensor[(15, 2, 14), float64] */
}

def @func_6399() -> (Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64]) {
  %756 = @func_3284() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %757 = @func_3878() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %758 = @func_3643() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %759 = %756.0;
  %760 = %757.0;
  %761 = %758.0;
  (%759, %760, %761)
}

def @func_7944() -> (Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), float32]) {
  %762 = @func_3037() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), uint32]) */;
  %763 = @func_1916() /* ty=(Tensor[(4, 3, 15), bool],) */;
  %764 = %763.0;
  %765 = @func_5402() /* ty=Tensor[(4, 3, 15), bool] */;
  %766 = cast(%765, dtype="float32") /* ty=Tensor[(4, 3, 15), float32] */;
  %767 = shape_of(%764, dtype="int32") /* ty=Tensor[(3), int32] */;
  %768 = cast(%764, dtype="float32") /* ty=Tensor[(4, 3, 15), float32] */;
  %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %770 = %762.0;
  %771 = maximum(%768, %769) /* ty=Tensor[(4, 3, 15), float32] */;
  (%770, %771)
}

def @func_3226() -> (Tensor[(180), int8], Tensor[(4, 3, 15), bool]) {
  %772 = @func_2143() /* ty=(Tensor[(180), int8], Tensor[(13, 13, 16), bool], Tensor[(1352, 2), uint32]) */;
  %773 = @func_1916() /* ty=(Tensor[(4, 3, 15), bool],) */;
  %774 = %772.0;
  %775 = %773.0;
  (%774, %775)
}

def @func_6762() -> (Tensor[(15, 2, 14), float64],) {
  %776 = @func_3284() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %777 = %776.0;
  (%777,)
}

def @func_7660() -> (Tensor[(1352, 2), bool],) {
  %778 = @func_4697() /* ty=(Tensor[(1352, 2), bool],) */;
  %779 = %778.0;
  (%779,)
}

def @func_2388() -> (Tensor[(4, 3, 15), bool],) {
  %780 = @func_1876() /* ty=Tensor[(4, 3, 15), bool] */;
  (%780,)
}

def @func_533(%var_517: Tensor[(4, 3, 15), int8], %var_518: Tensor[(4, 3, 15), int8]) -> Tensor[(4, 3, 15), bool] {
  %781 = cast(%var_518, dtype="bool") /* ty=Tensor[(4, 3, 15), bool] */;
  %782 = shape_of(%var_517, dtype="int32") /* ty=Tensor[(3), int32] */;
  %783 = cast(%var_517, dtype="bool") /* ty=Tensor[(4, 3, 15), bool] */;
  %784 = dyn.reshape(%781, %782, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%783, %784) /* ty=Tensor[(4, 3, 15), bool] */
}

def @func_65(%var_24: Tensor[(5, 10, 9), int32], %var_61: Tensor[(5, 10, 9), int32]) -> (Tensor[(5, 10, 9), int32], Tensor[(5, 10, 9), uint32], Tensor[(5, 10, 9), bool]) {
  %785 = cast(meta[relay.Constant][39] /* ty=Tensor[(5, 10, 9), int32] */, dtype="int32") /* ty=Tensor[(5, 10, 9), int32] */;
  %786 = shape_of(%var_24, dtype="int32") /* ty=Tensor[(3), int32] */;
  %787 = cast(%var_24, dtype="int32") /* ty=Tensor[(5, 10, 9), int32] */;
  %788 = dyn.reshape(%785, %786, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %789 = cast(%var_24, dtype="uint32") /* ty=Tensor[(5, 10, 9), uint32] */;
  %790 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(5, 10, 9), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %791 = cast(meta[relay.Constant][39] /* ty=Tensor[(5, 10, 9), int32] */, dtype="uint32") /* ty=Tensor[(5, 10, 9), uint32] */;
  %792 = dyn.reshape(%789, %790, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %793 = cast(%var_61, dtype="bool") /* ty=Tensor[(5, 10, 9), bool] */;
  %794 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(5, 10, 9), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %795 = cast(meta[relay.Constant][39] /* ty=Tensor[(5, 10, 9), int32] */, dtype="bool") /* ty=Tensor[(5, 10, 9), bool] */;
  %796 = dyn.reshape(%793, %794, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %797 = subtract(%787, %788) /* ty=Tensor[(5, 10, 9), int32] */;
  %798 = left_shift(%791, %792) /* ty=Tensor[(5, 10, 9), uint32] */;
  %799 = greater_equal(%795, %796) /* ty=Tensor[(5, 10, 9), bool] */;
  (%797, %798, %799)
}

def @func_5847(%var_5817: Tensor[(1, 720), float32], %var_5820: Tensor[(2, 720), float32]) -> (Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float32], Tensor[(15, 2, 14), float64], Tensor[(2, 720), uint32], Tensor[(2, 720), float32], Tensor[(15, 2, 14), float64]) {
  %800 = @func_4321() /* ty=(Tensor[(12, 10, 14), bool], Tensor[(15, 2, 14), float64]) */;
  %801 = @func_4816() /* ty=(Tensor[(15, 2, 14), float32], Tensor[(1352, 2), bool]) */;
  %802 = cast(%var_5817, dtype="float32") /* ty=Tensor[(1, 720), float32] */;
  %803 = reshape(%802, newshape=[5, 9, 16]) /* ty=Tensor[(5, 9, 16), float32] */;
  %804 = @func_2937(%803) /* ty=(Tensor[(5, 9, 16), float32], Tensor[(15, 2, 14), float64]) */;
  %805 = cast(%var_5817, dtype="uint32") /* ty=Tensor[(1, 720), uint32] */;
  %806 = cast(%var_5820, dtype="uint32") /* ty=Tensor[(2, 720), uint32] */;
  %807 = cast(%var_5817, dtype="float32") /* ty=Tensor[(1, 720), float32] */;
  %808 = tan(%807) /* ty=Tensor[(1, 720), float32] */;
  %809 = cast(%808, dtype="float64") /* ty=Tensor[(1, 720), float64] */;
  %810 = asin(%809) /* ty=Tensor[(1, 720), float64] */;
  %811 = cast(%810, dtype="float32") /* ty=Tensor[(1, 720), float32] */;
  %812 = cast(%var_5820, dtype="float32") /* ty=Tensor[(2, 720), float32] */;
  %813 = @func_3878() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %814 = %800.1;
  %815 = %801.0;
  %816 = %804.1;
  %817 = logical_xor(%805, %806) /* ty=Tensor[(2, 720), uint32] */;
  %818 = divide(%811, %812) /* ty=Tensor[(2, 720), float32] */;
  %819 = %813.0;
  (%814, %815, %816, %817, %818, %819)
}

def @func_6619(%var_6614: Tensor[(15, 2, 14), float64]) -> (Tensor[(15, 2, 14), bool],) {
  %820 = @func_4670() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(13, 13, 16), bool]) */;
  %821 = %820.0;
  %822 = cast(%var_6614, dtype="bool") /* ty=Tensor[(15, 2, 14), bool] */;
  %823 = shape_of(%821, dtype="int32") /* ty=Tensor[(3), int32] */;
  %824 = cast(%821, dtype="bool") /* ty=Tensor[(15, 2, 14), bool] */;
  %825 = dyn.reshape(%822, %823, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %826 = less_equal(%824, %825) /* ty=Tensor[(15, 2, 14), bool] */;
  (%826,)
}

def @func_5000() -> Tensor[(4, 3, 15), bool] {
  %827 = @func_2388() /* ty=(Tensor[(4, 3, 15), bool],) */;
  %827.0
}

def @func_8444() -> (Tensor[(10, 11, 11), float32], Tensor[(4, 14, 11), float64]) {
  %828 = cast(meta[relay.Constant][40] /* ty=Tensor[(10, 11, 11), float32] */, dtype="float32") /* ty=Tensor[(10, 11, 11), float32] */;
  %829 = @func_4967() /* ty=(Tensor[(4, 14, 11), float64],) */;
  %830 = sin(%828) /* ty=Tensor[(10, 11, 11), float32] */;
  %831 = %829.0;
  (%830, %831)
}

def @func_5760() -> Tensor[(15, 2, 14), float32] {
  %832 = @func_2356() /* ty=(Tensor[(15, 2, 14), float32],) */;
  %833 = %832.0;
  %834 = cast(%833, dtype="float32") /* ty=Tensor[(15, 2, 14), float32] */;
  acos(%834) /* ty=Tensor[(15, 2, 14), float32] */
}

def @func_5132(%var_5125: Tensor[(4, 3, 15), bool]) -> (Tensor[(4, 3, 15), int64],) {
  %835 = @func_2388() /* ty=(Tensor[(4, 3, 15), bool],) */;
  %836 = %835.0;
  %837 = cast(%var_5125, dtype="int64") /* ty=Tensor[(4, 3, 15), int64] */;
  %838 = shape_of(%836, dtype="int32") /* ty=Tensor[(3), int32] */;
  %839 = cast(%836, dtype="int64") /* ty=Tensor[(4, 3, 15), int64] */;
  %840 = dyn.reshape(%837, %838, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %841 = bitwise_xor(%839, %840) /* ty=Tensor[(4, 3, 15), int64] */;
  (%841,)
}

def @func_4967() -> (Tensor[(4, 14, 11), float64],) {
  %842 = cast(meta[relay.Constant][41] /* ty=Tensor[(4, 14, 11), float64] */, dtype="float64") /* ty=Tensor[(4, 14, 11), float64] */;
  %843 = rsqrt(%842) /* ty=Tensor[(4, 14, 11), float64] */;
  (%843,)
}

def @func_1916() -> (Tensor[(4, 3, 15), bool],) {
  %844 = @func_1876() /* ty=Tensor[(4, 3, 15), bool] */;
  %845 = cast(%844, dtype="int8") /* ty=Tensor[(4, 3, 15), int8] */;
  %846 = cast(%844, dtype="int8") /* ty=Tensor[(4, 3, 15), int8] */;
  %847 = reshape(%845, newshape=[4, 3, 15]) /* ty=Tensor[(4, 3, 15), int8] */;
  %848 = reshape(%846, newshape=[4, 3, 15]) /* ty=Tensor[(4, 3, 15), int8] */;
  %849 = @func_533(%847, %848) /* ty=Tensor[(4, 3, 15), bool] */;
  %850 = cast(%849, dtype="bool") /* ty=Tensor[(4, 3, 15), bool] */;
  %851 = shape_of(%844, dtype="int32") /* ty=Tensor[(3), int32] */;
  %852 = cast(%844, dtype="bool") /* ty=Tensor[(4, 3, 15), bool] */;
  %853 = dyn.reshape(%850, %851, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %854 = logical_or(%852, %853) /* ty=Tensor[(4, 3, 15), bool] */;
  (%854,)
}

def @func_3643() -> (Tensor[(15, 2, 14), float64],) {
  %855 = @func_750() /* ty=Tensor[(15, 2, 14), float64] */;
  (%855,)
}

def @func_6642() -> (Tensor[(13, 13, 16), bool], Tensor[(15, 2, 14), float64]) {
  %856 = @func_3209() /* ty=(Tensor[(13, 13, 16), bool],) */;
  %857 = @func_1673() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %858 = %856.0;
  %859 = %857.0;
  (%858, %859)
}

def @func_6010() -> Tensor[(15, 2, 14), float64] {
  @func_886() /* ty=Tensor[(15, 2, 14), float64] */
}

def @func_6346() -> (Tensor[(15, 2, 14), float64],) {
  %860 = @func_4084() /* ty=Tensor[(15, 2, 14), float64] */;
  (%860,)
}

def @func_3972(%var_3937: Tensor[(1890), float64], %var_3949: Tensor[(13, 13, 16), bool]) -> (Tensor[(1890), bool], Tensor[(15, 2, 14), float64], Tensor[(13, 13, 16), float32]) {
  %861 = @func_1999() /* ty=(Tensor[(15, 2, 14), bool], Tensor[(9, 14, 15), bool], Tensor[(1890), float64]) */;
  %862 = %861.2;
  %863 = cast(%var_3937, dtype="bool") /* ty=Tensor[(1890), bool] */;
  %864 = shape_of(%862, dtype="int32") /* ty=Tensor[(1), int32] */;
  %865 = cast(%862, dtype="bool") /* ty=Tensor[(1890), bool] */;
  %866 = dyn.reshape(%863, %864, newshape=[]) /* ty=Tensor[(?), bool] */;
  %867 = @func_3209() /* ty=(Tensor[(13, 13, 16), bool],) */;
  %868 = %867.0;
  %869 = cast(%var_3949, dtype="float32") /* ty=Tensor[(13, 13, 16), float32] */;
  %870 = shape_of(%868, dtype="int32") /* ty=Tensor[(3), int32] */;
  %871 = cast(%868, dtype="float32") /* ty=Tensor[(13, 13, 16), float32] */;
  %872 = dyn.reshape(%869, %870, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %873 = divide(%871, %872) /* ty=Tensor[(13, 13, 16), float32] */;
  %874 = cast(%868, dtype="float32") /* ty=Tensor[(13, 13, 16), float32] */;
  %875 = shape_of(%873, dtype="int32") /* ty=Tensor[(3), int32] */;
  %876 = cast(%873, dtype="float32") /* ty=Tensor[(13, 13, 16), float32] */;
  %877 = dyn.reshape(%874, %875, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %878 = logical_and(%865, %866) /* ty=Tensor[(1890), bool] */;
  %879 = @func_886() /* ty=Tensor[(15, 2, 14), float64] */;
  %880 = power(%876, %877) /* ty=Tensor[(13, 13, 16), float32] */;
  (%878, %879, %880)
}

def @func_3872() -> (Tensor[(13, 13, 16), bool], Tensor[(15, 2, 14), float64]) {
  %881 = @func_3209() /* ty=(Tensor[(13, 13, 16), bool],) */;
  %882 = %881.0;
  %883 = @func_1576() /* ty=Tensor[(15, 2, 14), float64] */;
  (%882, %883)
}

def @func_7902() -> (Tensor[(450), int32],) {
  %884 = @func_5384() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(450), int32]) */;
  %885 = %884.2;
  (%885,)
}

def @func_3347(%var_3345: Tensor[(1, 720), float32]) -> (Tensor[(15, 2, 14), float32], Tensor[(15, 2, 14), float64], Tensor[(1, 720), float32]) {
  %886 = @func_2996() /* ty=(Tensor[(15, 2, 14), float32], Tensor[(4, 3, 15), bool]) */;
  %887 = cast(%var_3345, dtype="float32") /* ty=Tensor[(1, 720), float32] */;
  %888 = reshape(%887, newshape=[5, 9, 16]) /* ty=Tensor[(5, 9, 16), float32] */;
  %889 = @func_2937(%888) /* ty=(Tensor[(5, 9, 16), float32], Tensor[(15, 2, 14), float64]) */;
  %890 = %886.0;
  %891 = %889.1;
  (%890, %891, %var_3345)
}

def @func_6684() -> (Tensor[(13, 13, 16), float64],) {
  %892 = @func_1116() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32], Tensor[(15, 2, 14), float64]) */;
  %893 = %892.3;
  %894 = cast(%893, dtype="float64") /* ty=Tensor[(13, 13, 16), float64] */;
  %895 = sin(%894) /* ty=Tensor[(13, 13, 16), float64] */;
  (%895,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_8284() -> (Tensor[(4, 3, 15), uint8], Tensor[(4, 3, 15), int8], Tensor[(15, 2, 14), float32], Tensor[(4, 3, 15), float64]) {
  %0 = @func_2388() /* ty=(Tensor[(4, 3, 15), bool],) */;
  %1 = %0.0;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(4, 3, 15), bool] */, dtype="uint8") /* ty=Tensor[(4, 3, 15), uint8] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="uint8") /* ty=Tensor[(4, 3, 15), uint8] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %6 = cast(%1, dtype="int8") /* ty=Tensor[(4, 3, 15), int8] */;
  %7 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(4, 3, 15), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(4, 3, 15), bool] */, dtype="int8") /* ty=Tensor[(4, 3, 15), int8] */;
  %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %10 = @func_7711() /* ty=(Tensor[(4, 3, 15), float32], Tensor[(15, 2, 14), float32]) */;
  %11 = cast(%1, dtype="float64") /* ty=Tensor[(4, 3, 15), float64] */;
  %12 = minimum(%4, %5) /* ty=Tensor[(4, 3, 15), uint8] */;
  %13 = bitwise_and(%8, %9) /* ty=Tensor[(4, 3, 15), int8] */;
  %14 = %10.1;
  %15 = log(%11) /* ty=Tensor[(4, 3, 15), float64] */;
  (%12, %13, %14, %15)
}

def @func_8318() -> (Tensor[(15, 2, 14), float64],) {
  @func_8316() /* ty=(Tensor[(15, 2, 14), float64],) */
}

def @func_3878() -> (Tensor[(15, 2, 14), float64],) {
  %16 = @func_3284() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %17 = %16.0;
  (%17,)
}

def @func_3396(%var_3364: Tensor[(5, 297), int64]) -> (Tensor[(15, 2, 14), float64], Tensor[(5, 297), int64], Tensor[(2704), int64], Tensor[(15, 2, 14), float64], Tensor[(1352, 2), uint32]) {
  %18 = @func_2865() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(13, 13, 16), float32], Tensor[(495, 3), int64], Tensor[(4, 3, 15), float64]) */;
  %19 = cast(%var_3364, dtype="int64") /* ty=Tensor[(5, 297), int64] */;
  %20 = cast(%var_3364, dtype="int64") /* ty=Tensor[(5, 297), int64] */;
  %21 = reshape(%19, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int64] */;
  %22 = reshape(%20, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int64] */;
  %23 = @func_799(%21, %22) /* ty=(Tensor[(15, 9, 11), int64], Tensor[(2704), uint32], Tensor[(13, 13, 16), float32]) */;
  %24 = %23.1;
  %25 = cast(meta[relay.Constant][1] /* ty=Tensor[(2704), uint32] */, dtype="int64") /* ty=Tensor[(2704), int64] */;
  %26 = shape_of(%24, dtype="int32") /* ty=Tensor[(1), int32] */;
  %27 = cast(%24, dtype="int64") /* ty=Tensor[(2704), int64] */;
  %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?), int64] */;
  %29 = @func_3284() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %30 = @func_2809() /* ty=(Tensor[(1352, 2), uint32], Tensor[(15, 2, 14), float32]) */;
  %31 = %18.0;
  %32 = subtract(%27, %28) /* ty=Tensor[(2704), int64] */;
  %33 = %29.0;
  %34 = %30.0;
  (%31, %var_3364, %32, %33, %34)
}

def @func_3976(%var_3974: Tensor[(1890), float64], %var_3975: Tensor[(13, 13, 16), bool]) -> (Tensor[(1890), bool], Tensor[(15, 2, 14), float64], Tensor[(13, 13, 16), float32]) {
  @func_3972(%var_3974, %var_3975) /* ty=(Tensor[(1890), bool], Tensor[(15, 2, 14), float64], Tensor[(13, 13, 16), float32]) */
}

def @func_4001() -> Tensor[(15, 2, 14), float64] {
  %36 = fn () -> Tensor[(15, 2, 14), float64] {
    %35 = @func_2630() /* ty=(Tensor[(15, 2, 14), float64],) */;
    %35.0
  };
  %36() /* ty=Tensor[(15, 2, 14), float64] */
}

def @func_2388() -> (Tensor[(4, 3, 15), bool],) {
  %37 = @func_1876() /* ty=Tensor[(4, 3, 15), bool] */;
  (%37,)
}

def @func_3284() -> (Tensor[(15, 2, 14), float64],) {
  %38 = @func_750() /* ty=Tensor[(15, 2, 14), float64] */;
  (%38,)
}

def @func_4671() -> (Tensor[(15, 2, 14), float64], Tensor[(13, 13, 16), bool]) {
  %43 = fn () -> (Tensor[(15, 2, 14), float64], Tensor[(13, 13, 16), bool]) {
    %39 = @func_2630() /* ty=(Tensor[(15, 2, 14), float64],) */;
    %40 = @func_4544() /* ty=(Tensor[(13, 13, 16), bool], Tensor[(15, 2, 14), float64]) */;
    %41 = %39.0;
    %42 = %40.0;
    (%41, %42)
  };
  %43() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(13, 13, 16), bool]) */
}

def @func_5019(%var_5017: Tensor[(8, 7, 7), float64]) -> (Tensor[(8, 7, 7), float64],) {
  @func_5016(%var_5017) /* ty=(Tensor[(8, 7, 7), float64],) */
}

def @func_7408() -> Tensor[(15, 2, 14), float64] {
  @func_7406() /* ty=Tensor[(15, 2, 14), float64] */
}

def @func_3350(%var_3348: Tensor[(1, 720), float32]) -> (Tensor[(15, 2, 14), float32], Tensor[(15, 2, 14), float64], Tensor[(1, 720), float32]) {
  @func_3347(%var_3348) /* ty=(Tensor[(15, 2, 14), float32], Tensor[(15, 2, 14), float64], Tensor[(1, 720), float32]) */
}

def @func_6963() -> (Tensor[(15, 2, 14), float64],) {
  %46 = fn () -> (Tensor[(15, 2, 14), float64],) {
    %44 = @func_4477() /* ty=(Tensor[(15, 2, 14), float64],) */;
    %45 = %44.0;
    (%45,)
  };
  %46() /* ty=(Tensor[(15, 2, 14), float64],) */
}

def @func_7805() -> Tensor[(15, 2, 14), float64] {
  @func_7406() /* ty=Tensor[(15, 2, 14), float64] */
}

def @func_4381() -> Tensor[(15, 2, 14), float64] {
  @func_4379() /* ty=Tensor[(15, 2, 14), float64] */
}

def @func_7999() -> (Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), uint32], Tensor[(1352, 2), bool], Tensor[(1, 720), float32], Tensor[(60, 12), float32]) {
  %47 = @func_4147() /* ty=(Tensor[(15, 2, 14), uint32], Tensor[(13, 13, 16), bool]) */;
  %48 = @func_6834() /* ty=(Tensor[(1352, 2), bool],) */;
  %49 = cast(meta[relay.Constant][2] /* ty=Tensor[(60, 12), float32] */, dtype="float32") /* ty=Tensor[(60, 12), float32] */;
  %50 = reshape(%49, newshape=[1, 720]) /* ty=Tensor[(1, 720), float32] */;
  %51 = @func_3347(%50) /* ty=(Tensor[(15, 2, 14), float32], Tensor[(15, 2, 14), float64], Tensor[(1, 720), float32]) */;
  %52 = @func_7805() /* ty=Tensor[(15, 2, 14), float64] */;
  %53 = %47.0;
  %54 = %48.0;
  %55 = %51.2;
  (%52, %53, %54, %55, meta[relay.Constant][2] /* ty=Tensor[(60, 12), float32] */)
}

def @func_936() -> (Tensor[(15, 2, 14), float64],) {
  @func_934() /* ty=(Tensor[(15, 2, 14), float64],) */
}

def @func_2001() -> (Tensor[(15, 2, 14), bool], Tensor[(9, 14, 15), bool], Tensor[(1890), float64]) {
  @func_1999() /* ty=(Tensor[(15, 2, 14), bool], Tensor[(9, 14, 15), bool], Tensor[(1890), float64]) */
}

def @func_2144() -> (Tensor[(180), int8], Tensor[(13, 13, 16), bool], Tensor[(1352, 2), uint32]) {
  %63 = fn () -> (Tensor[(180), int8], Tensor[(13, 13, 16), bool], Tensor[(1352, 2), uint32]) {
    %56 = @func_912() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(180), int8]) */;
    %57 = cast(meta[relay.Constant][3] /* ty=Tensor[(1352, 2), uint32] */, dtype="uint32") /* ty=Tensor[(1352, 2), uint32] */;
    %58 = cast(meta[relay.Constant][3] /* ty=Tensor[(1352, 2), uint32] */, dtype="uint32") /* ty=Tensor[(1352, 2), uint32] */;
    %59 = reshape(%57, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), uint32] */;
    %60 = reshape(%58, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), uint32] */;
    %61 = %56.2;
    %62 = @func_213(%59, %60) /* ty=Tensor[(13, 13, 16), bool] */;
    (%61, %62, meta[relay.Constant][3] /* ty=Tensor[(1352, 2), uint32] */)
  };
  %63() /* ty=(Tensor[(180), int8], Tensor[(13, 13, 16), bool], Tensor[(1352, 2), uint32]) */
}

def @func_7755() -> (Tensor[(2704), uint32],) {
  @func_7753() /* ty=(Tensor[(2704), uint32],) */
}

def @func_1182() -> (Tensor[(15, 2, 14), float64],) {
  %65 = fn () -> (Tensor[(15, 2, 14), float64],) {
    %64 = @func_750() /* ty=Tensor[(15, 2, 14), float64] */;
    (%64,)
  };
  %65() /* ty=(Tensor[(15, 2, 14), float64],) */
}

def @func_7712() -> (Tensor[(4, 3, 15), float32], Tensor[(15, 2, 14), float32]) {
  %70 = fn () -> (Tensor[(4, 3, 15), float32], Tensor[(15, 2, 14), float32]) {
    %66 = @func_6917() /* ty=(Tensor[(4, 3, 15), float32],) */;
    %67 = @func_2356() /* ty=(Tensor[(15, 2, 14), float32],) */;
    %68 = %66.0;
    %69 = %67.0;
    (%68, %69)
  };
  %70() /* ty=(Tensor[(4, 3, 15), float32], Tensor[(15, 2, 14), float32]) */
}

def @func_5386() -> (Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(450), int32]) {
  @func_5384() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(450), int32]) */
}

def @func_6356() -> Tensor[(15, 2, 14), float64] {
  @func_886() /* ty=Tensor[(15, 2, 14), float64] */
}

def @func_3474(%var_3473: Tensor[(2, 13, 7), float32]) -> (Tensor[(2, 13, 7), float32],) {
  %76 = fn (%var_3461: Tensor[(2, 13, 7), float32]) -> (Tensor[(2, 13, 7), float32],) {
    %71 = cast(meta[relay.Constant][4] /* ty=Tensor[(2, 13, 7), float32] */, dtype="float32") /* ty=Tensor[(2, 13, 7), float32] */;
    %72 = shape_of(%var_3461, dtype="int32") /* ty=Tensor[(3), int32] */;
    %73 = cast(%var_3461, dtype="float32") /* ty=Tensor[(2, 13, 7), float32] */;
    %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %75 = divide(%73, %74) /* ty=Tensor[(2, 13, 7), float32] */;
    (%75,)
  };
  %76(%var_3473) /* ty=(Tensor[(2, 13, 7), float32],) */
}

def @func_6473(%var_6471: Tensor[(11, 3, 10), float32], %var_6472: Tensor[(1890), float64]) -> (Tensor[(11, 3, 10), float32], Tensor[(1890), float64], Tensor[(1890), float64], Tensor[(4, 3, 15), bool], Tensor[(15, 2, 14), float64], Tensor[(180), int8], Tensor[(180), int8]) {
  @func_6469(%var_6471, %var_6472) /* ty=(Tensor[(11, 3, 10), float32], Tensor[(1890), float64], Tensor[(1890), float64], Tensor[(4, 3, 15), bool], Tensor[(15, 2, 14), float64], Tensor[(180), int8], Tensor[(180), int8]) */
}

def @func_4564(%var_4554: Tensor[(7, 11, 13), int16], %var_4555: Tensor[(7, 11, 13), int16]) -> Tensor[(7, 11, 13), bool] {
  %77 = cast(%var_4555, dtype="bool") /* ty=Tensor[(7, 11, 13), bool] */;
  %78 = shape_of(%var_4554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %79 = cast(%var_4554, dtype="bool") /* ty=Tensor[(7, 11, 13), bool] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%79, %80) /* ty=Tensor[(7, 11, 13), bool] */
}

def @func_6319() -> (Tensor[(16, 7, 16), bool], Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(2704), uint32]) {
  %88 = fn () -> (Tensor[(16, 7, 16), bool], Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(2704), uint32]) {
    %81 = @func_1673() /* ty=(Tensor[(15, 2, 14), float64],) */;
    %82 = cast(meta[relay.Constant][5] /* ty=Tensor[(2704), uint32] */, dtype="uint32") /* ty=Tensor[(2704), uint32] */;
    %83 = reshape(%82, newshape=[2704]) /* ty=Tensor[(2704), uint32] */;
    %84 = @func_1458(%83) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(7, 6, 4), bool], Tensor[(42, 4), int64], Tensor[(13, 13, 16), bool], Tensor[(4, 3, 15), bool], Tensor[(15, 2, 14), float64], Tensor[(2704), float32]) */;
    %85 = @func_4102() /* ty=Tensor[(16, 7, 16), bool] */;
    %86 = %81.0;
    %87 = %84.5;
    (%85, %86, %87, meta[relay.Constant][5] /* ty=Tensor[(2704), uint32] */)
  };
  %88() /* ty=(Tensor[(16, 7, 16), bool], Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(2704), uint32]) */
}

def @func_2867() -> (Tensor[(15, 2, 14), float64], Tensor[(13, 13, 16), float32], Tensor[(495, 3), int64], Tensor[(4, 3, 15), float64]) {
  @func_2865() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(13, 13, 16), float32], Tensor[(495, 3), int64], Tensor[(4, 3, 15), float64]) */
}

def @func_1116() -> (Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32], Tensor[(15, 2, 14), float64]) {
  %89 = @func_750() /* ty=Tensor[(15, 2, 14), float64] */;
  %90 = cast(%89, dtype="float64") /* ty=Tensor[(15, 2, 14), float64] */;
  %91 = reshape(%90, newshape=[15, 2, 14]) /* ty=Tensor[(15, 2, 14), float64] */;
  %92 = @func_871(%91) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(180), int8], Tensor[(4, 3, 15), bool]) */;
  %93 = cast(%89, dtype="float64") /* ty=Tensor[(15, 2, 14), float64] */;
  %94 = reshape(%93, newshape=[15, 2, 14]) /* ty=Tensor[(15, 2, 14), float64] */;
  %95 = @func_871(%94) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(180), int8], Tensor[(4, 3, 15), bool]) */;
  %96 = cast(meta[relay.Constant][6] /* ty=Tensor[(2704), uint32] */, dtype="uint32") /* ty=Tensor[(2704), uint32] */;
  %97 = cast(meta[relay.Constant][6] /* ty=Tensor[(2704), uint32] */, dtype="uint32") /* ty=Tensor[(2704), uint32] */;
  %98 = reshape(%96, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), uint32] */;
  %99 = reshape(%97, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), uint32] */;
  %100 = @func_934() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %101 = %92.0;
  %102 = %95.1;
  %103 = @func_213(%98, %99) /* ty=Tensor[(13, 13, 16), bool] */;
  %104 = %100.0;
  (%89, %101, %102, %103, meta[relay.Constant][6] /* ty=Tensor[(2704), uint32] */, %104)
}

def @func_3039() -> (Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), uint32]) {
  @func_3037() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), uint32]) */
}

def @func_6685() -> (Tensor[(13, 13, 16), float64],) {
  %109 = fn () -> (Tensor[(13, 13, 16), float64],) {
    %105 = @func_1116() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32], Tensor[(15, 2, 14), float64]) */;
    %106 = %105.3;
    %107 = cast(%106, dtype="float64") /* ty=Tensor[(13, 13, 16), float64] */;
    %108 = sin(%107) /* ty=Tensor[(13, 13, 16), float64] */;
    (%108,)
  };
  %109() /* ty=(Tensor[(13, 13, 16), float64],) */
}

def @func_7661() -> (Tensor[(1352, 2), bool],) {
  %112 = fn () -> (Tensor[(1352, 2), bool],) {
    %110 = @func_4697() /* ty=(Tensor[(1352, 2), bool],) */;
    %111 = %110.0;
    (%111,)
  };
  %112() /* ty=(Tensor[(1352, 2), bool],) */
}

def @func_7543() -> (Tensor[(4, 3, 15), bool],) {
  @func_7541() /* ty=(Tensor[(4, 3, 15), bool],) */
}

def @func_4449(%var_4434: Tensor[(420), float64]) -> (Tensor[(1352, 2), uint32], Tensor[(180), int8], Tensor[(13, 13, 16), float32], Tensor[(420), float64], Tensor[(12, 4, 3), bool], Tensor[(12, 4, 3), int32]) {
  %113 = @func_2143() /* ty=(Tensor[(180), int8], Tensor[(13, 13, 16), bool], Tensor[(1352, 2), uint32]) */;
  %114 = cast(%var_4434, dtype="float64") /* ty=Tensor[(420), float64] */;
  %115 = cast(%var_4434, dtype="bool") /* ty=Tensor[(420), bool] */;
  %116 = reshape(%114, newshape=[15, 2, 14]) /* ty=Tensor[(15, 2, 14), float64] */;
  %117 = reshape(%115, newshape=[15, 2, 14]) /* ty=Tensor[(15, 2, 14), bool] */;
  %118 = @func_1794(%116, %117) /* ty=(Tensor[(15, 2, 14), int32], Tensor[(13, 13, 16), float32], Tensor[(165, 9), int64]) */;
  %119 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 4, 1), float32] */, dtype="float32") /* ty=Tensor[(12, 4, 1), float32] */;
  %120 = asin(%119) /* ty=Tensor[(12, 4, 1), float32] */;
  %121 = cast(%120, dtype="float32") /* ty=Tensor[(12, 4, 1), float32] */;
  %122 = acosh(%121) /* ty=Tensor[(12, 4, 1), float32] */;
  %123 = cast(%122, dtype="bool") /* ty=Tensor[(12, 4, 1), bool] */;
  %124 = cast(meta[relay.Constant][8] /* ty=Tensor[(12, 4, 3), float32] */, dtype="bool") /* ty=Tensor[(12, 4, 3), bool] */;
  %125 = cast(meta[relay.Constant][8] /* ty=Tensor[(12, 4, 3), float32] */, dtype="int32") /* ty=Tensor[(12, 4, 3), int32] */;
  %126 = cast(%120, dtype="int32") /* ty=Tensor[(12, 4, 1), int32] */;
  %127 = @func_3237() /* ty=Tensor[(1352, 2), uint32] */;
  %128 = %113.0;
  %129 = %118.1;
  %130 = equal(%123, %124) /* ty=Tensor[(12, 4, 3), bool] */;
  %131 = logical_xor(%125, %126) /* ty=Tensor[(12, 4, 3), int32] */;
  (%127, %128, %129, %var_4434, %130, %131)
}

def @func_1592(%var_1585: Tensor[(12, 9, 14), float32]) -> Tensor[(12, 9, 14), float32] {
  %132 = cast(%var_1585, dtype="float32") /* ty=Tensor[(12, 9, 14), float32] */;
  sqrt(%132) /* ty=Tensor[(12, 9, 14), float32] */
}

def @func_8446() -> (Tensor[(10, 11, 11), float32], Tensor[(4, 14, 11), float64]) {
  @func_8444() /* ty=(Tensor[(10, 11, 11), float32], Tensor[(4, 14, 11), float64]) */
}

def @func_887() -> Tensor[(15, 2, 14), float64] {
  %133 = fn () -> Tensor[(15, 2, 14), float64] {
    @func_750() /* ty=Tensor[(15, 2, 14), float64] */
  };
  %133() /* ty=Tensor[(15, 2, 14), float64] */
}

def @func_4477() -> (Tensor[(15, 2, 14), float64],) {
  %134 = @func_3522() /* ty=Tensor[(15, 2, 14), float64] */;
  (%134,)
}

def @func_7301(%var_7299: Tensor[(4, 3, 15), bool], %var_7300: Tensor[(4, 3, 15), bool]) -> (Tensor[(4, 3, 15), int16], Tensor[(13, 13, 16), bool], Tensor[(4, 3, 15), float64], Tensor[(2704), uint32], Tensor[(2704), float64]) {
  %162 = fn (%var_7207: Tensor[(4, 3, 15), bool], %var_7262: Tensor[(4, 3, 15), bool]) -> (Tensor[(4, 3, 15), int16], Tensor[(13, 13, 16), bool], Tensor[(4, 3, 15), float64], Tensor[(2704), uint32], Tensor[(2704), float64]) {
    %135 = @func_2388() /* ty=(Tensor[(4, 3, 15), bool],) */;
    %136 = %135.0;
    %137 = cast(%var_7207, dtype="int16") /* ty=Tensor[(4, 3, 15), int16] */;
    %138 = shape_of(%136, dtype="int32") /* ty=Tensor[(3), int32] */;
    %139 = cast(%136, dtype="int16") /* ty=Tensor[(4, 3, 15), int16] */;
    %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %141 = @func_3209() /* ty=(Tensor[(13, 13, 16), bool],) */;
    %142 = cast(%var_7262, dtype="float64") /* ty=Tensor[(4, 3, 15), float64] */;
    %143 = shape_of(%136, dtype="int32") /* ty=Tensor[(3), int32] */;
    %144 = cast(%136, dtype="float64") /* ty=Tensor[(4, 3, 15), float64] */;
    %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %146 = @func_6511() /* ty=(Tensor[(13, 13, 16), bool], Tensor[(15, 2, 14), float32]) */;
    %147 = %146.0;
    %148 = cast(%147, dtype="uint32") /* ty=Tensor[(13, 13, 16), uint32] */;
    %149 = reshape(%148, newshape=[2704]) /* ty=Tensor[(2704), uint32] */;
    %150 = @func_5580(%149) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(4, 14, 11), float64], Tensor[(15, 2, 14), float64], Tensor[(2704), uint64], Tensor[(2704), uint32], Tensor[(15, 2, 14), float64]) */;
    %151 = @func_2721() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(9, 14, 15), bool], Tensor[(5, 10, 9), int32], Tensor[(2704), uint32]) */;
    %152 = %151.3;
    %153 = cast(%147, dtype="float64") /* ty=Tensor[(13, 13, 16), float64] */;
    %154 = shape_of(%152, dtype="int32") /* ty=Tensor[(1), int32] */;
    %155 = cast(%152, dtype="float64") /* ty=Tensor[(2704), float64] */;
    %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?), float64] */;
    %157 = add(%139, %140) /* ty=Tensor[(4, 3, 15), int16] */;
    %158 = %141.0;
    %159 = mod(%144, %145) /* ty=Tensor[(4, 3, 15), float64] */;
    %160 = %150.4;
    %161 = maximum(%155, %156) /* ty=Tensor[(2704), float64] */;
    (%157, %158, %159, %160, %161)
  };
  %162(%var_7299, %var_7300) /* ty=(Tensor[(4, 3, 15), int16], Tensor[(13, 13, 16), bool], Tensor[(4, 3, 15), float64], Tensor[(2704), uint32], Tensor[(2704), float64]) */
}

def @func_7372() -> (Tensor[(2704), float64], Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), float64]) {
  @func_7370() /* ty=(Tensor[(2704), float64], Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), float64]) */
}

def @func_1458(%var_1421: Tensor[(2704), uint32]) -> (Tensor[(15, 2, 14), float64], Tensor[(7, 6, 4), bool], Tensor[(42, 4), int64], Tensor[(13, 13, 16), bool], Tensor[(4, 3, 15), bool], Tensor[(15, 2, 14), float64], Tensor[(2704), float32]) {
  %163 = cast(meta[relay.Constant][9] /* ty=Tensor[(42, 4), int64] */, dtype="int64") /* ty=Tensor[(42, 4), int64] */;
  %164 = reshape(%163, newshape=[7, 6, 4]) /* ty=Tensor[(7, 6, 4), int64] */;
  %165 = cast(%var_1421, dtype="uint32") /* ty=Tensor[(2704), uint32] */;
  %166 = cast(%var_1421, dtype="uint32") /* ty=Tensor[(2704), uint32] */;
  %167 = reshape(%165, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), uint32] */;
  %168 = reshape(%166, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), uint32] */;
  %169 = @func_912() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(180), int8]) */;
  %170 = cast(%var_1421, dtype="float32") /* ty=Tensor[(2704), float32] */;
  %171 = @func_750() /* ty=Tensor[(15, 2, 14), float64] */;
  %172 = @func_242(%164) /* ty=Tensor[(7, 6, 4), bool] */;
  %173 = @func_213(%167, %168) /* ty=Tensor[(13, 13, 16), bool] */;
  %174 = %169.1;
  %175 = @func_886() /* ty=Tensor[(15, 2, 14), float64] */;
  %176 = acosh(%170) /* ty=Tensor[(2704), float32] */;
  (%171, %172, meta[relay.Constant][9] /* ty=Tensor[(42, 4), int64] */, %173, %174, %175, %176)
}

def @func_8104(%var_8103: Tensor[(2704), uint32]) -> (Tensor[(15, 2, 14), float64], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32], Tensor[(15, 2, 14), float64], Tensor[(8, 7, 7), float64], Tensor[(392), float64]) {
  %189 = fn (%var_8072: Tensor[(2704), uint32]) -> (Tensor[(15, 2, 14), float64], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32], Tensor[(15, 2, 14), float64], Tensor[(8, 7, 7), float64], Tensor[(392), float64]) {
    %177 = @func_934() /* ty=(Tensor[(15, 2, 14), float64],) */;
    %178 = cast(%var_8072, dtype="uint32") /* ty=Tensor[(2704), uint32] */;
    %179 = reshape(%178, newshape=[2704]) /* ty=Tensor[(2704), uint32] */;
    %180 = @func_1458(%179) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(7, 6, 4), bool], Tensor[(42, 4), int64], Tensor[(13, 13, 16), bool], Tensor[(4, 3, 15), bool], Tensor[(15, 2, 14), float64], Tensor[(2704), float32]) */;
    %181 = @func_7944() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), float32]) */;
    %182 = cast(meta[relay.Constant][10] /* ty=Tensor[(392), float64] */, dtype="float64") /* ty=Tensor[(392), float64] */;
    %183 = reshape(%182, newshape=[8, 7, 7]) /* ty=Tensor[(8, 7, 7), float64] */;
    %184 = @func_5016(%183) /* ty=(Tensor[(8, 7, 7), float64],) */;
    %185 = %177.0;
    %186 = %180.3;
    %187 = %181.0;
    %188 = %184.0;
    (%185, %186, %var_8072, %187, %188, meta[relay.Constant][10] /* ty=Tensor[(392), float64] */)
  };
  %189(%var_8103) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32], Tensor[(15, 2, 14), float64], Tensor[(8, 7, 7), float64], Tensor[(392), float64]) */
}

def @func_5978(%var_5975: float32, %var_5976: Tensor[(6, 10, 12), float32], %var_5977: Tensor[(6, 10, 12), float32]) -> (Tensor[(6, 10, 12), int32], Tensor[(15, 2, 14), float64]) {
  @func_5973(%var_5975, %var_5976, %var_5977) /* ty=(Tensor[(6, 10, 12), int32], Tensor[(15, 2, 14), float64]) */
}

def @func_1515(%var_1514: Tensor[(1, 2704), uint32]) -> (Tensor[(16, 16, 14), float32], Tensor[(5, 10, 9), int32], Tensor[(450), int32], Tensor[(7, 6, 4), bool], Tensor[(168), int64], Tensor[(13, 13, 16), bool], Tensor[(1, 2704), uint32], Tensor[(13, 13, 16), bool]) {
  %210 = fn (%var_1500: Tensor[(1, 2704), uint32]) -> (Tensor[(16, 16, 14), float32], Tensor[(5, 10, 9), int32], Tensor[(450), int32], Tensor[(7, 6, 4), bool], Tensor[(168), int64], Tensor[(13, 13, 16), bool], Tensor[(1, 2704), uint32], Tensor[(13, 13, 16), bool]) {
    %190 = cast(meta[relay.Constant][11] /* ty=Tensor[(16, 16, 14), float32] */, dtype="float32") /* ty=Tensor[(16, 16, 14), float32] */;
    %191 = cast(meta[relay.Constant][12] /* ty=Tensor[(450), int32] */, dtype="int32") /* ty=Tensor[(450), int32] */;
    %192 = cast(meta[relay.Constant][12] /* ty=Tensor[(450), int32] */, dtype="int32") /* ty=Tensor[(450), int32] */;
    %193 = reshape(%191, newshape=[5, 10, 9]) /* ty=Tensor[(5, 10, 9), int32] */;
    %194 = reshape(%192, newshape=[5, 10, 9]) /* ty=Tensor[(5, 10, 9), int32] */;
    %195 = @func_65(%193, %194) /* ty=(Tensor[(5, 10, 9), int32], Tensor[(5, 10, 9), uint32], Tensor[(5, 10, 9), bool]) */;
    %196 = cast(meta[relay.Constant][13] /* ty=Tensor[(168), int64] */, dtype="int64") /* ty=Tensor[(168), int64] */;
    %197 = reshape(%196, newshape=[7, 6, 4]) /* ty=Tensor[(7, 6, 4), int64] */;
    %198 = cast(%var_1500, dtype="uint32") /* ty=Tensor[(1, 2704), uint32] */;
    %199 = cast(%var_1500, dtype="uint32") /* ty=Tensor[(1, 2704), uint32] */;
    %200 = reshape(%198, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), uint32] */;
    %201 = reshape(%199, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), uint32] */;
    %202 = cast(%var_1500, dtype="uint32") /* ty=Tensor[(1, 2704), uint32] */;
    %203 = reshape(%202, newshape=[2704]) /* ty=Tensor[(2704), uint32] */;
    %204 = @func_1458(%203) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(7, 6, 4), bool], Tensor[(42, 4), int64], Tensor[(13, 13, 16), bool], Tensor[(4, 3, 15), bool], Tensor[(15, 2, 14), float64], Tensor[(2704), float32]) */;
    %205 = log2(%190) /* ty=Tensor[(16, 16, 14), float32] */;
    %206 = %195.0;
    %207 = @func_242(%197) /* ty=Tensor[(7, 6, 4), bool] */;
    %208 = @func_213(%200, %201) /* ty=Tensor[(13, 13, 16), bool] */;
    %209 = %204.3;
    (%205, %206, meta[relay.Constant][12] /* ty=Tensor[(450), int32] */, %207, meta[relay.Constant][13] /* ty=Tensor[(168), int64] */, %208, %var_1500, %209)
  };
  %210(%var_1514) /* ty=(Tensor[(16, 16, 14), float32], Tensor[(5, 10, 9), int32], Tensor[(450), int32], Tensor[(7, 6, 4), bool], Tensor[(168), int64], Tensor[(13, 13, 16), bool], Tensor[(1, 2704), uint32], Tensor[(13, 13, 16), bool]) */
}

def @func_4479() -> (Tensor[(15, 2, 14), float64],) {
  @func_4477() /* ty=(Tensor[(15, 2, 14), float64],) */
}

def @func_4040(%var_4035: Tensor[(1890), float64]) -> (Tensor[(15, 2, 14), float64], Tensor[(9, 14, 15), bool], Tensor[(1890), float64]) {
  %211 = @func_1181() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %212 = cast(%var_4035, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %213 = cast(%var_4035, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %214 = reshape(%212, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
  %215 = reshape(%213, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
  %216 = %211.0;
  %217 = @func_1733(%214, %215) /* ty=Tensor[(9, 14, 15), bool] */;
  (%216, %217, %var_4035)
}

def @func_8623() -> (Tensor[(15, 2, 14), float64],) {
  %219 = fn () -> (Tensor[(15, 2, 14), float64],) {
    %218 = @func_7406() /* ty=Tensor[(15, 2, 14), float64] */;
    (%218,)
  };
  %219() /* ty=(Tensor[(15, 2, 14), float64],) */
}

def @func_6813(%var_6788: Tensor[(720), float32]) -> (Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(720), float32], Tensor[(15, 2, 14), bool], Tensor[(13, 13, 16), bool], Tensor[(15, 2, 14), float64]) {
  %220 = @func_4321() /* ty=(Tensor[(12, 10, 14), bool], Tensor[(15, 2, 14), float64]) */;
  %221 = cast(%var_6788, dtype="float32") /* ty=Tensor[(720), float32] */;
  %222 = reshape(%221, newshape=[5, 9, 16]) /* ty=Tensor[(5, 9, 16), float32] */;
  %223 = @func_2937(%222) /* ty=(Tensor[(5, 9, 16), float32], Tensor[(15, 2, 14), float64]) */;
  %224 = %220.1;
  %225 = cast(%224, dtype="float64") /* ty=Tensor[(15, 2, 14), float64] */;
  %226 = reshape(%225, newshape=[15, 2, 14]) /* ty=Tensor[(15, 2, 14), float64] */;
  %227 = @func_6619(%226) /* ty=(Tensor[(15, 2, 14), bool],) */;
  %228 = @func_4544() /* ty=(Tensor[(13, 13, 16), bool], Tensor[(15, 2, 14), float64]) */;
  %229 = %223.1;
  %230 = %227.0;
  %231 = %228.0;
  %232 = @func_4000() /* ty=Tensor[(15, 2, 14), float64] */;
  (%224, %229, %var_6788, %230, %231, %232)
}

def @func_7946() -> (Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), float32]) {
  @func_7944() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), float32]) */
}

def @func_6835() -> (Tensor[(1352, 2), bool],) {
  %235 = fn () -> (Tensor[(1352, 2), bool],) {
    %233 = @func_4697() /* ty=(Tensor[(1352, 2), bool],) */;
    %234 = %233.0;
    (%234,)
  };
  %235() /* ty=(Tensor[(1352, 2), bool],) */
}

def @func_914() -> (Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(180), int8]) {
  @func_912() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(180), int8]) */
}

def @func_3250() -> Tensor[(15, 2, 14), float64] {
  %237 = fn () -> Tensor[(15, 2, 14), float64] {
    %236 = @func_2630() /* ty=(Tensor[(15, 2, 14), float64],) */;
    %236.0
  };
  %237() /* ty=Tensor[(15, 2, 14), float64] */
}

def @func_4102() -> Tensor[(16, 7, 16), bool] {
  %238 = cast(meta[relay.Constant][15] /* ty=Tensor[(16, 7, 16), uint64] */, dtype="bool") /* ty=Tensor[(16, 7, 16), bool] */;
  %239 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(16, 7, 16), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %240 = cast(meta[relay.Constant][14] /* ty=Tensor[(16, 7, 16), uint64] */, dtype="bool") /* ty=Tensor[(16, 7, 16), bool] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%240, %241) /* ty=Tensor[(16, 7, 16), bool] */
}

def @func_5973(%var_5915: float32, %var_5916: Tensor[(6, 10, 12), float32], %var_5938: Tensor[(6, 10, 12), float32]) -> (Tensor[(6, 10, 12), int32], Tensor[(15, 2, 14), float64]) {
  %242 = cast(%var_5915, dtype="float32") /* ty=float32 */;
  %243 = cast(%var_5916, dtype="float32") /* ty=Tensor[(6, 10, 12), float32] */;
  %244 = power(%242, %243) /* ty=Tensor[(6, 10, 12), float32] */;
  %245 = cast(%var_5938, dtype="int32") /* ty=Tensor[(6, 10, 12), int32] */;
  %246 = shape_of(%244, dtype="int32") /* ty=Tensor[(3), int32] */;
  %247 = cast(%244, dtype="int32") /* ty=Tensor[(6, 10, 12), int32] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %249 = @func_4670() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(13, 13, 16), bool]) */;
  %250 = logical_xor(%247, %248) /* ty=Tensor[(6, 10, 12), int32] */;
  %251 = %249.0;
  (%250, %251)
}

def @func_6671(%var_6660: Tensor[(8, 16, 11), float32]) -> Tensor[(8, 16, 11), float32] {
  %252 = cast(%var_6660, dtype="float32") /* ty=Tensor[(8, 16, 11), float32] */;
  log10(%252) /* ty=Tensor[(8, 16, 11), float32] */
}

def @func_68(%var_66: Tensor[(5, 10, 9), int32], %var_67: Tensor[(5, 10, 9), int32]) -> (Tensor[(5, 10, 9), int32], Tensor[(5, 10, 9), uint32], Tensor[(5, 10, 9), bool]) {
  %268 = fn (%var_24: Tensor[(5, 10, 9), int32], %var_61: Tensor[(5, 10, 9), int32]) -> (Tensor[(5, 10, 9), int32], Tensor[(5, 10, 9), uint32], Tensor[(5, 10, 9), bool]) {
    %253 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 10, 9), int32] */, dtype="int32") /* ty=Tensor[(5, 10, 9), int32] */;
    %254 = shape_of(%var_24, dtype="int32") /* ty=Tensor[(3), int32] */;
    %255 = cast(%var_24, dtype="int32") /* ty=Tensor[(5, 10, 9), int32] */;
    %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %257 = cast(%var_24, dtype="uint32") /* ty=Tensor[(5, 10, 9), uint32] */;
    %258 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(5, 10, 9), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %259 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 10, 9), int32] */, dtype="uint32") /* ty=Tensor[(5, 10, 9), uint32] */;
    %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %261 = cast(%var_61, dtype="bool") /* ty=Tensor[(5, 10, 9), bool] */;
    %262 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(5, 10, 9), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %263 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 10, 9), int32] */, dtype="bool") /* ty=Tensor[(5, 10, 9), bool] */;
    %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %265 = subtract(%255, %256) /* ty=Tensor[(5, 10, 9), int32] */;
    %266 = left_shift(%259, %260) /* ty=Tensor[(5, 10, 9), uint32] */;
    %267 = greater_equal(%263, %264) /* ty=Tensor[(5, 10, 9), bool] */;
    (%265, %266, %267)
  };
  %268(%var_66, %var_67) /* ty=(Tensor[(5, 10, 9), int32], Tensor[(5, 10, 9), uint32], Tensor[(5, 10, 9), bool]) */
}

def @func_4104() -> Tensor[(16, 7, 16), bool] {
  @func_4102() /* ty=Tensor[(16, 7, 16), bool] */
}

def @func_6619(%var_6614: Tensor[(15, 2, 14), float64]) -> (Tensor[(15, 2, 14), bool],) {
  %269 = @func_4670() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(13, 13, 16), bool]) */;
  %270 = %269.0;
  %271 = cast(%var_6614, dtype="bool") /* ty=Tensor[(15, 2, 14), bool] */;
  %272 = shape_of(%270, dtype="int32") /* ty=Tensor[(3), int32] */;
  %273 = cast(%270, dtype="bool") /* ty=Tensor[(15, 2, 14), bool] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %275 = less_equal(%273, %274) /* ty=Tensor[(15, 2, 14), bool] */;
  (%275,)
}

def @func_4546() -> (Tensor[(13, 13, 16), bool], Tensor[(15, 2, 14), float64]) {
  @func_4544() /* ty=(Tensor[(13, 13, 16), bool], Tensor[(15, 2, 14), float64]) */
}

def @func_2940(%var_2938: Tensor[(5, 9, 16), float32]) -> (Tensor[(5, 9, 16), float32], Tensor[(15, 2, 14), float64]) {
  @func_2937(%var_2938) /* ty=(Tensor[(5, 9, 16), float32], Tensor[(15, 2, 14), float64]) */
}

def @func_4379() -> Tensor[(15, 2, 14), float64] {
  %276 = @func_3798() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(5, 10, 9), bool], Tensor[(450), int32], Tensor[(42, 4), int64], Tensor[(13, 13, 16), float32], Tensor[(15, 2, 14), float64], Tensor[(450), int32], Tensor[(4, 3, 15), bool], Tensor[(15, 2, 14), float64]) */;
  %276.8
}

def @func_912() -> (Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(180), int8]) {
  %277 = cast(meta[relay.Constant][17] /* ty=Tensor[(180), int8] */, dtype="int8") /* ty=Tensor[(180), int8] */;
  %278 = cast(meta[relay.Constant][17] /* ty=Tensor[(180), int8] */, dtype="int8") /* ty=Tensor[(180), int8] */;
  %279 = reshape(%277, newshape=[4, 3, 15]) /* ty=Tensor[(4, 3, 15), int8] */;
  %280 = reshape(%278, newshape=[4, 3, 15]) /* ty=Tensor[(4, 3, 15), int8] */;
  %281 = @func_886() /* ty=Tensor[(15, 2, 14), float64] */;
  %282 = @func_533(%279, %280) /* ty=Tensor[(4, 3, 15), bool] */;
  (%281, %282, meta[relay.Constant][17] /* ty=Tensor[(180), int8] */)
}

def @func_5000() -> Tensor[(4, 3, 15), bool] {
  %283 = @func_2388() /* ty=(Tensor[(4, 3, 15), bool],) */;
  %283.0
}

def @func_5096(%var_5094: Tensor[(13, 13, 16), bool]) -> (Tensor[(13, 13, 16), bool], Tensor[(7, 6, 4), float32]) {
  @func_5093(%var_5094) /* ty=(Tensor[(13, 13, 16), bool], Tensor[(7, 6, 4), float32]) */
}

def @func_7179() -> Tensor[(2704), uint64] {
  %285 = fn () -> Tensor[(2704), uint64] {
    %284 = @func_4944() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(2704), uint64], Tensor[(1, 2704), uint32]) */;
    %284.1
  };
  %285() /* ty=Tensor[(2704), uint64] */
}

def @func_7807() -> Tensor[(15, 2, 14), float64] {
  @func_7805() /* ty=Tensor[(15, 2, 14), float64] */
}

def @func_3874() -> (Tensor[(13, 13, 16), bool], Tensor[(15, 2, 14), float64]) {
  @func_3872() /* ty=(Tensor[(13, 13, 16), bool], Tensor[(15, 2, 14), float64]) */
}

def @func_5898() -> Tensor[(4, 3, 15), float32] {
  %291 = fn () -> Tensor[(4, 3, 15), float32] {
    %286 = @func_2865() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(13, 13, 16), float32], Tensor[(495, 3), int64], Tensor[(4, 3, 15), float64]) */;
    %287 = %286.3;
    %288 = cast(%287, dtype="float32") /* ty=Tensor[(4, 3, 15), float32] */;
    %289 = cos(%288) /* ty=Tensor[(4, 3, 15), float32] */;
    %290 = cast(%289, dtype="float32") /* ty=Tensor[(4, 3, 15), float32] */;
    rsqrt(%290) /* ty=Tensor[(4, 3, 15), float32] */
  };
  %291() /* ty=Tensor[(4, 3, 15), float32] */
}

def @func_4816() -> (Tensor[(15, 2, 14), float32], Tensor[(1352, 2), bool]) {
  %292 = @func_934() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %293 = %292.0;
  %294 = cast(%293, dtype="float64") /* ty=Tensor[(15, 2, 14), float64] */;
  %295 = log10(%294) /* ty=Tensor[(15, 2, 14), float64] */;
  %296 = cast(%293, dtype="float32") /* ty=Tensor[(15, 2, 14), float32] */;
  %297 = shape_of(%295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %298 = cast(%295, dtype="float32") /* ty=Tensor[(15, 2, 14), float32] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %300 = @func_4697() /* ty=(Tensor[(1352, 2), bool],) */;
  %301 = power(%298, %299) /* ty=Tensor[(15, 2, 14), float32] */;
  %302 = %300.0;
  (%301, %302)
}

def @func_8316() -> (Tensor[(15, 2, 14), float64],) {
  %303 = @func_1576() /* ty=Tensor[(15, 2, 14), float64] */;
  (%303,)
}

def @func_4147() -> (Tensor[(15, 2, 14), uint32], Tensor[(13, 13, 16), bool]) {
  %304 = @func_3037() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), uint32]) */;
  %305 = @func_3209() /* ty=(Tensor[(13, 13, 16), bool],) */;
  %306 = %304.1;
  %307 = %305.0;
  (%306, %307)
}

def @func_1999() -> (Tensor[(15, 2, 14), bool], Tensor[(9, 14, 15), bool], Tensor[(1890), float64]) {
  %308 = @func_1181() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %309 = %308.0;
  %310 = @func_934() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %311 = %310.0;
  %312 = cast(%311, dtype="bool") /* ty=Tensor[(15, 2, 14), bool] */;
  %313 = shape_of(%309, dtype="int32") /* ty=Tensor[(3), int32] */;
  %314 = cast(%309, dtype="bool") /* ty=Tensor[(15, 2, 14), bool] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %316 = cast(meta[relay.Constant][18] /* ty=Tensor[(1890), float64] */, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %317 = cast(meta[relay.Constant][18] /* ty=Tensor[(1890), float64] */, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %318 = reshape(%316, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
  %319 = reshape(%317, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
  %320 = greater(%314, %315) /* ty=Tensor[(15, 2, 14), bool] */;
  %321 = @func_1733(%318, %319) /* ty=Tensor[(9, 14, 15), bool] */;
  (%320, %321, meta[relay.Constant][18] /* ty=Tensor[(1890), float64] */)
}

def @func_4646() -> Tensor[(2704), float64] {
  %325 = fn () -> Tensor[(2704), float64] {
    %322 = @func_2039() /* ty=(Tensor[(4, 3, 15), bool], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32]) */;
    %323 = %322.2;
    %324 = cast(%323, dtype="float64") /* ty=Tensor[(2704), float64] */;
    asin(%324) /* ty=Tensor[(2704), float64] */
  };
  %325() /* ty=Tensor[(2704), float64] */
}

def @func_7784() -> Tensor[(15, 2, 14), float64] {
  @func_7782() /* ty=Tensor[(15, 2, 14), float64] */
}

def @func_6756() -> (Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool]) {
  %330 = fn () -> (Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool]) {
    %326 = @func_1673() /* ty=(Tensor[(15, 2, 14), float64],) */;
    %327 = @func_2388() /* ty=(Tensor[(4, 3, 15), bool],) */;
    %328 = %326.0;
    %329 = %327.0;
    (%328, %329)
  };
  %330() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool]) */
}

def @func_8579(%var_8574: Tensor[(180), bool]) -> (Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), int64], Tensor[(180), bool]) {
  %331 = @func_3878() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %332 = cast(%var_8574, dtype="bool") /* ty=Tensor[(180), bool] */;
  %333 = reshape(%332, newshape=[4, 3, 15]) /* ty=Tensor[(4, 3, 15), bool] */;
  %334 = @func_5132(%333) /* ty=(Tensor[(4, 3, 15), int64],) */;
  %335 = %331.0;
  %336 = %334.0;
  (%335, %336, %var_8574)
}

def @func_5761() -> Tensor[(15, 2, 14), float32] {
  %340 = fn () -> Tensor[(15, 2, 14), float32] {
    %337 = @func_2356() /* ty=(Tensor[(15, 2, 14), float32],) */;
    %338 = %337.0;
    %339 = cast(%338, dtype="float32") /* ty=Tensor[(15, 2, 14), float32] */;
    acos(%339) /* ty=Tensor[(15, 2, 14), float32] */
  };
  %340() /* ty=Tensor[(15, 2, 14), float32] */
}

def @func_5391() -> Tensor[(15, 2, 14), float64] {
  @func_5389() /* ty=Tensor[(15, 2, 14), float64] */
}

def @func_7585(%var_7578: Tensor[(15, 2, 14), float64]) -> (Tensor[(15, 2, 14), float32], Tensor[(15, 2, 14), float64]) {
  %341 = @func_2996() /* ty=(Tensor[(15, 2, 14), float32], Tensor[(4, 3, 15), bool]) */;
  %342 = @func_6346() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %343 = %342.0;
  %344 = cast(%var_7578, dtype="float64") /* ty=Tensor[(15, 2, 14), float64] */;
  %345 = shape_of(%343, dtype="int32") /* ty=Tensor[(3), int32] */;
  %346 = cast(%343, dtype="float64") /* ty=Tensor[(15, 2, 14), float64] */;
  %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %348 = %341.0;
  %349 = multiply(%346, %347) /* ty=Tensor[(15, 2, 14), float64] */;
  (%348, %349)
}

def @func_2474() -> (Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64]) {
  @func_2472() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64]) */
}

def @func_8380() -> (Tensor[(4, 3, 15), float64],) {
  %353 = fn () -> (Tensor[(4, 3, 15), float64],) {
    %350 = @func_6980() /* ty=Tensor[(4, 3, 15), float32] */;
    %351 = cast(%350, dtype="float64") /* ty=Tensor[(4, 3, 15), float64] */;
    %352 = sigmoid(%351) /* ty=Tensor[(4, 3, 15), float64] */;
    (%352,)
  };
  %353() /* ty=(Tensor[(4, 3, 15), float64],) */
}

def @func_3644() -> (Tensor[(15, 2, 14), float64],) {
  %355 = fn () -> (Tensor[(15, 2, 14), float64],) {
    %354 = @func_750() /* ty=Tensor[(15, 2, 14), float64] */;
    (%354,)
  };
  %355() /* ty=(Tensor[(15, 2, 14), float64],) */
}

def @func_5132(%var_5125: Tensor[(4, 3, 15), bool]) -> (Tensor[(4, 3, 15), int64],) {
  %356 = @func_2388() /* ty=(Tensor[(4, 3, 15), bool],) */;
  %357 = %356.0;
  %358 = cast(%var_5125, dtype="int64") /* ty=Tensor[(4, 3, 15), int64] */;
  %359 = shape_of(%357, dtype="int32") /* ty=Tensor[(3), int32] */;
  %360 = cast(%357, dtype="int64") /* ty=Tensor[(4, 3, 15), int64] */;
  %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %362 = bitwise_xor(%360, %361) /* ty=Tensor[(4, 3, 15), int64] */;
  (%362,)
}

def @func_536(%var_534: Tensor[(4, 3, 15), int8], %var_535: Tensor[(4, 3, 15), int8]) -> Tensor[(4, 3, 15), bool] {
  %367 = fn (%var_517: Tensor[(4, 3, 15), int8], %var_518: Tensor[(4, 3, 15), int8]) -> Tensor[(4, 3, 15), bool] {
    %363 = cast(%var_518, dtype="bool") /* ty=Tensor[(4, 3, 15), bool] */;
    %364 = shape_of(%var_517, dtype="int32") /* ty=Tensor[(3), int32] */;
    %365 = cast(%var_517, dtype="bool") /* ty=Tensor[(4, 3, 15), bool] */;
    %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%365, %366) /* ty=Tensor[(4, 3, 15), bool] */
  };
  %367(%var_534, %var_535) /* ty=Tensor[(4, 3, 15), bool] */
}

def @func_4699() -> (Tensor[(1352, 2), bool],) {
  @func_4697() /* ty=(Tensor[(1352, 2), bool],) */
}

def @func_2040() -> (Tensor[(4, 3, 15), bool], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32]) {
  %375 = fn () -> (Tensor[(4, 3, 15), bool], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32]) {
    %368 = @func_1116() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32], Tensor[(15, 2, 14), float64]) */;
    %369 = cast(meta[relay.Constant][19] /* ty=Tensor[(2704), uint32] */, dtype="uint32") /* ty=Tensor[(2704), uint32] */;
    %370 = cast(meta[relay.Constant][19] /* ty=Tensor[(2704), uint32] */, dtype="uint32") /* ty=Tensor[(2704), uint32] */;
    %371 = reshape(%369, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), uint32] */;
    %372 = reshape(%370, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), uint32] */;
    %373 = %368.2;
    %374 = @func_213(%371, %372) /* ty=Tensor[(13, 13, 16), bool] */;
    (%373, %374, meta[relay.Constant][19] /* ty=Tensor[(2704), uint32] */)
  };
  %375() /* ty=(Tensor[(4, 3, 15), bool], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32]) */
}

def @func_4818() -> (Tensor[(15, 2, 14), float32], Tensor[(1352, 2), bool]) {
  @func_4816() /* ty=(Tensor[(15, 2, 14), float32], Tensor[(1352, 2), bool]) */
}

def @func_2997() -> (Tensor[(15, 2, 14), float32], Tensor[(4, 3, 15), bool]) {
  %382 = fn () -> (Tensor[(15, 2, 14), float32], Tensor[(4, 3, 15), bool]) {
    %376 = @func_2472() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64]) */;
    %377 = %376.0;
    %378 = cast(%377, dtype="float32") /* ty=Tensor[(15, 2, 14), float32] */;
    %379 = @func_2388() /* ty=(Tensor[(4, 3, 15), bool],) */;
    %380 = cosh(%378) /* ty=Tensor[(15, 2, 14), float32] */;
    %381 = %379.0;
    (%380, %381)
  };
  %382() /* ty=(Tensor[(15, 2, 14), float32], Tensor[(4, 3, 15), bool]) */
}

def @func_3037() -> (Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), uint32]) {
  %383 = @func_750() /* ty=Tensor[(15, 2, 14), float64] */;
  %384 = cast(meta[relay.Constant][20] /* ty=Tensor[(15, 2, 14), float64] */, dtype="uint32") /* ty=Tensor[(15, 2, 14), uint32] */;
  %385 = shape_of(%383, dtype="int32") /* ty=Tensor[(3), int32] */;
  %386 = cast(%383, dtype="uint32") /* ty=Tensor[(15, 2, 14), uint32] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %388 = @func_886() /* ty=Tensor[(15, 2, 14), float64] */;
  %389 = minimum(%386, %387) /* ty=Tensor[(15, 2, 14), uint32] */;
  (%388, %389)
}

def @func_752() -> Tensor[(15, 2, 14), float64] {
  @func_750() /* ty=Tensor[(15, 2, 14), float64] */
}

def @func_3209() -> (Tensor[(13, 13, 16), bool],) {
  %390 = @func_1116() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32], Tensor[(15, 2, 14), float64]) */;
  %391 = %390.3;
  (%391,)
}

def @func_4619(%var_4618: Tensor[(720), float32]) -> (Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(720), float32]) {
  %397 = fn (%var_4591: Tensor[(720), float32]) -> (Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(720), float32]) {
    %392 = cast(%var_4591, dtype="float32") /* ty=Tensor[(720), float32] */;
    %393 = reshape(%392, newshape=[5, 9, 16]) /* ty=Tensor[(5, 9, 16), float32] */;
    %394 = @func_2937(%393) /* ty=(Tensor[(5, 9, 16), float32], Tensor[(15, 2, 14), float64]) */;
    %395 = @func_4379() /* ty=Tensor[(15, 2, 14), float64] */;
    %396 = %394.1;
    (%395, %396, %var_4591)
  };
  %397(%var_4618) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(720), float32]) */
}

def @func_5582(%var_5581: Tensor[(2704), uint32]) -> (Tensor[(15, 2, 14), float64], Tensor[(4, 14, 11), float64], Tensor[(15, 2, 14), float64], Tensor[(2704), uint64], Tensor[(2704), uint32], Tensor[(15, 2, 14), float64]) {
  %408 = fn (%var_5571: Tensor[(2704), uint32]) -> (Tensor[(15, 2, 14), float64], Tensor[(4, 14, 11), float64], Tensor[(15, 2, 14), float64], Tensor[(2704), uint64], Tensor[(2704), uint32], Tensor[(15, 2, 14), float64]) {
    %398 = @func_1181() /* ty=(Tensor[(15, 2, 14), float64],) */;
    %399 = @func_4967() /* ty=(Tensor[(4, 14, 11), float64],) */;
    %400 = @func_1116() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32], Tensor[(15, 2, 14), float64]) */;
    %401 = cast(%var_5571, dtype="uint32") /* ty=Tensor[(2704), uint32] */;
    %402 = reshape(%401, newshape=[2704]) /* ty=Tensor[(2704), uint32] */;
    %403 = %398.0;
    %404 = %399.0;
    %405 = %400.5;
    %406 = @func_4266(%402) /* ty=Tensor[(2704), uint64] */;
    %407 = @func_4714() /* ty=Tensor[(15, 2, 14), float64] */;
    (%403, %404, %405, %406, %var_5571, %407)
  };
  %408(%var_5581) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(4, 14, 11), float64], Tensor[(15, 2, 14), float64], Tensor[(2704), uint64], Tensor[(2704), uint32], Tensor[(15, 2, 14), float64]) */
}

def @func_5403() -> Tensor[(4, 3, 15), bool] {
  %410 = fn () -> Tensor[(4, 3, 15), bool] {
    %409 = @func_2996() /* ty=(Tensor[(15, 2, 14), float32], Tensor[(4, 3, 15), bool]) */;
    %409.1
  };
  %410() /* ty=Tensor[(4, 3, 15), bool] */
}

def @func_6469(%var_6401: Tensor[(11, 3, 10), float32], %var_6407: Tensor[(1890), float64]) -> (Tensor[(11, 3, 10), float32], Tensor[(1890), float64], Tensor[(1890), float64], Tensor[(4, 3, 15), bool], Tensor[(15, 2, 14), float64], Tensor[(180), int8], Tensor[(180), int8]) {
  %411 = cast(%var_6401, dtype="float32") /* ty=Tensor[(11, 3, 10), float32] */;
  %412 = cast(%var_6407, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %413 = reshape(%412, newshape=[1890]) /* ty=Tensor[(1890), float64] */;
  %414 = @func_4040(%413) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(9, 14, 15), bool], Tensor[(1890), float64]) */;
  %415 = @func_912() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(180), int8]) */;
  %416 = @func_3226() /* ty=(Tensor[(180), int8], Tensor[(4, 3, 15), bool]) */;
  %417 = acos(%411) /* ty=Tensor[(11, 3, 10), float32] */;
  %418 = %414.2;
  %419 = @func_5402() /* ty=Tensor[(4, 3, 15), bool] */;
  %420 = @func_3249() /* ty=Tensor[(15, 2, 14), float64] */;
  %421 = %415.2;
  %422 = %416.0;
  (%417, %418, %var_6407, %419, %420, %421, %422)
}

def @func_6358() -> Tensor[(15, 2, 14), float64] {
  @func_6356() /* ty=Tensor[(15, 2, 14), float64] */
}

def @func_5647() -> (Tensor[(15, 2, 14), float64], Tensor[(7, 11, 13), bool], Tensor[(1, 1001), int16]) {
  %430 = fn () -> (Tensor[(15, 2, 14), float64], Tensor[(7, 11, 13), bool], Tensor[(1, 1001), int16]) {
    %423 = @func_934() /* ty=(Tensor[(15, 2, 14), float64],) */;
    %424 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 1001), int16] */, dtype="int16") /* ty=Tensor[(1, 1001), int16] */;
    %425 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 1001), int16] */, dtype="int16") /* ty=Tensor[(1, 1001), int16] */;
    %426 = reshape(%424, newshape=[7, 11, 13]) /* ty=Tensor[(7, 11, 13), int16] */;
    %427 = reshape(%425, newshape=[7, 11, 13]) /* ty=Tensor[(7, 11, 13), int16] */;
    %428 = %423.0;
    %429 = @func_4564(%426, %427) /* ty=Tensor[(7, 11, 13), bool] */;
    (%428, %429, meta[relay.Constant][21] /* ty=Tensor[(1, 1001), int16] */)
  };
  %430() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(7, 11, 13), bool], Tensor[(1, 1001), int16]) */
}

def @func_6674(%var_6672: Tensor[(8, 16, 11), float32]) -> Tensor[(8, 16, 11), float32] {
  @func_6671(%var_6672) /* ty=Tensor[(8, 16, 11), float32] */
}

def @func_2865() -> (Tensor[(15, 2, 14), float64], Tensor[(13, 13, 16), float32], Tensor[(495, 3), int64], Tensor[(4, 3, 15), float64]) {
  %431 = @func_1116() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32], Tensor[(15, 2, 14), float64]) */;
  %432 = cast(meta[relay.Constant][22] /* ty=Tensor[(495, 3), int64] */, dtype="int64") /* ty=Tensor[(495, 3), int64] */;
  %433 = cast(meta[relay.Constant][22] /* ty=Tensor[(495, 3), int64] */, dtype="int64") /* ty=Tensor[(495, 3), int64] */;
  %434 = reshape(%432, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int64] */;
  %435 = reshape(%433, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int64] */;
  %436 = @func_799(%434, %435) /* ty=(Tensor[(15, 9, 11), int64], Tensor[(2704), uint32], Tensor[(13, 13, 16), float32]) */;
  %437 = @func_1916() /* ty=(Tensor[(4, 3, 15), bool],) */;
  %438 = %437.0;
  %439 = cast(%438, dtype="float64") /* ty=Tensor[(4, 3, 15), float64] */;
  %440 = atan(%439) /* ty=Tensor[(4, 3, 15), float64] */;
  %441 = cast(%440, dtype="float64") /* ty=Tensor[(4, 3, 15), float64] */;
  %442 = %431.5;
  %443 = %436.2;
  %444 = erf(%441) /* ty=Tensor[(4, 3, 15), float64] */;
  (%442, %443, meta[relay.Constant][22] /* ty=Tensor[(495, 3), int64] */, %444)
}

def @func_4218(%var_4183: Tensor[(8, 1, 14), int64]) -> (Tensor[(8, 8, 14), bool], Tensor[(15, 2, 14), float64], Tensor[(16, 7, 16), bool]) {
  %445 = cast(%var_4183, dtype="bool") /* ty=Tensor[(8, 1, 14), bool] */;
  %446 = cast(meta[relay.Constant][23] /* ty=Tensor[(8, 8, 14), int64] */, dtype="bool") /* ty=Tensor[(8, 8, 14), bool] */;
  %447 = greater_equal(%445, %446) /* ty=Tensor[(8, 8, 14), bool] */;
  %448 = @func_750() /* ty=Tensor[(15, 2, 14), float64] */;
  %449 = @func_4102() /* ty=Tensor[(16, 7, 16), bool] */;
  (%447, %448, %449)
}

def @func_2356() -> (Tensor[(15, 2, 14), float32],) {
  %450 = @func_750() /* ty=Tensor[(15, 2, 14), float64] */;
  %451 = cast(%450, dtype="float32") /* ty=Tensor[(15, 2, 14), float32] */;
  %452 = sinh(%451) /* ty=Tensor[(15, 2, 14), float32] */;
  (%452,)
}

def @func_2937(%var_2929: Tensor[(5, 9, 16), float32]) -> (Tensor[(5, 9, 16), float32], Tensor[(15, 2, 14), float64]) {
  %453 = cast(%var_2929, dtype="float32") /* ty=Tensor[(5, 9, 16), float32] */;
  %454 = @func_1673() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %455 = erf(%453) /* ty=Tensor[(5, 9, 16), float32] */;
  %456 = %454.0;
  (%455, %456)
}

def @func_6622(%var_6620: Tensor[(15, 2, 14), float64]) -> (Tensor[(15, 2, 14), bool],) {
  @func_6619(%var_6620) /* ty=(Tensor[(15, 2, 14), bool],) */
}

def @func_5093(%var_5056: Tensor[(13, 13, 16), bool]) -> (Tensor[(13, 13, 16), bool], Tensor[(7, 6, 4), float32]) {
  %457 = @func_3209() /* ty=(Tensor[(13, 13, 16), bool],) */;
  %458 = %457.0;
  %459 = cast(%var_5056, dtype="bool") /* ty=Tensor[(13, 13, 16), bool] */;
  %460 = shape_of(%458, dtype="int32") /* ty=Tensor[(3), int32] */;
  %461 = cast(%458, dtype="bool") /* ty=Tensor[(13, 13, 16), bool] */;
  %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %463 = less_equal(%461, %462) /* ty=Tensor[(13, 13, 16), bool] */;
  %464 = cast(%463, dtype="uint32") /* ty=Tensor[(13, 13, 16), uint32] */;
  %465 = reshape(%464, newshape=[2704]) /* ty=Tensor[(2704), uint32] */;
  %466 = @func_1458(%465) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(7, 6, 4), bool], Tensor[(42, 4), int64], Tensor[(13, 13, 16), bool], Tensor[(4, 3, 15), bool], Tensor[(15, 2, 14), float64], Tensor[(2704), float32]) */;
  %467 = %466.1;
  %468 = cast(%467, dtype="float32") /* ty=Tensor[(7, 6, 4), float32] */;
  %469 = rsqrt(%468) /* ty=Tensor[(7, 6, 4), float32] */;
  (%463, %469)
}

def @func_7903() -> (Tensor[(450), int32],) {
  %472 = fn () -> (Tensor[(450), int32],) {
    %470 = @func_5384() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(450), int32]) */;
    %471 = %470.2;
    (%471,)
  };
  %472() /* ty=(Tensor[(450), int32],) */
}

def @func_4084() -> Tensor[(15, 2, 14), float64] {
  @func_4000() /* ty=Tensor[(15, 2, 14), float64] */
}

def @func_5697() -> (Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool]) {
  %479 = fn () -> (Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool]) {
    %473 = @func_5384() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(450), int32]) */;
    %474 = %473.1;
    %475 = cast(%474, dtype="float64") /* ty=Tensor[(15, 2, 14), float64] */;
    %476 = reshape(%475, newshape=[15, 2, 14]) /* ty=Tensor[(15, 2, 14), float64] */;
    %477 = @func_871(%476) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(180), int8], Tensor[(4, 3, 15), bool]) */;
    %478 = %477.1;
    (%474, %478)
  };
  %479() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool]) */
}

def @func_934() -> (Tensor[(15, 2, 14), float64],) {
  %480 = @func_886() /* ty=Tensor[(15, 2, 14), float64] */;
  (%480,)
}

def @func_6980() -> Tensor[(4, 3, 15), float32] {
  @func_5897() /* ty=Tensor[(4, 3, 15), float32] */
}

def @func_6643() -> (Tensor[(13, 13, 16), bool], Tensor[(15, 2, 14), float64]) {
  %485 = fn () -> (Tensor[(13, 13, 16), bool], Tensor[(15, 2, 14), float64]) {
    %481 = @func_3209() /* ty=(Tensor[(13, 13, 16), bool],) */;
    %482 = @func_1673() /* ty=(Tensor[(15, 2, 14), float64],) */;
    %483 = %481.0;
    %484 = %482.0;
    (%483, %484)
  };
  %485() /* ty=(Tensor[(13, 13, 16), bool], Tensor[(15, 2, 14), float64]) */
}

def @func_3880() -> (Tensor[(15, 2, 14), float64],) {
  @func_3878() /* ty=(Tensor[(15, 2, 14), float64],) */
}

def @main(%var_8666: Tensor[(4, 1, 9), uint16]) -> (Tensor[(4, 1, 9), uint32], Tensor[(4, 1, 9), float32]) {
  %486 = cast(meta[relay.Constant][24] /* ty=uint16 */, dtype="uint32") /* ty=uint32 */;
  %487 = cast(%var_8666, dtype="uint32") /* ty=Tensor[(4, 1, 9), uint32] */;
  %488 = cast(meta[relay.Constant][24] /* ty=uint16 */, dtype="bool") /* ty=bool */;
  %489 = cast(%var_8666, dtype="bool") /* ty=Tensor[(4, 1, 9), bool] */;
  %490 = greater_equal(%488, %489) /* ty=Tensor[(4, 1, 9), bool] */;
  %491 = cast(%490, dtype="float32") /* ty=Tensor[(4, 1, 9), float32] */;
  %492 = bitwise_xor(%486, %487) /* ty=Tensor[(4, 1, 9), uint32] */;
  %493 = log(%491) /* ty=Tensor[(4, 1, 9), float32] */;
  (%492, %493)
}

def @func_6585(%var_6583: Tensor[(16, 7, 16), uint16], %var_6584: Tensor[(16, 7, 16), uint16]) -> (Tensor[(16, 7, 16), uint16], Tensor[(450), int32]) {
  %501 = fn (%var_6570: Tensor[(16, 7, 16), uint16], %var_6571: Tensor[(16, 7, 16), uint16]) -> (Tensor[(16, 7, 16), uint16], Tensor[(450), int32]) {
    %494 = cast(%var_6571, dtype="uint16") /* ty=Tensor[(16, 7, 16), uint16] */;
    %495 = shape_of(%var_6570, dtype="int32") /* ty=Tensor[(3), int32] */;
    %496 = cast(%var_6570, dtype="uint16") /* ty=Tensor[(16, 7, 16), uint16] */;
    %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %498 = @func_5384() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(450), int32]) */;
    %499 = minimum(%496, %497) /* ty=Tensor[(16, 7, 16), uint16] */;
    %500 = %498.2;
    (%499, %500)
  };
  %501(%var_6583, %var_6584) /* ty=(Tensor[(16, 7, 16), uint16], Tensor[(450), int32]) */
}

def @func_8582(%var_8580: Tensor[(180), bool]) -> (Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), int64], Tensor[(180), bool]) {
  @func_8579(%var_8580) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), int64], Tensor[(180), bool]) */
}

def @func_245(%var_243: Tensor[(7, 6, 4), int64]) -> Tensor[(7, 6, 4), bool] {
  @func_242(%var_243) /* ty=Tensor[(7, 6, 4), bool] */
}

def @func_7782() -> Tensor[(15, 2, 14), float64] {
  %502 = @func_3878() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %502.0
}

def @func_6816(%var_6814: Tensor[(720), float32]) -> (Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(720), float32], Tensor[(15, 2, 14), bool], Tensor[(13, 13, 16), bool], Tensor[(15, 2, 14), float64]) {
  @func_6813(%var_6814) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(720), float32], Tensor[(15, 2, 14), bool], Tensor[(13, 13, 16), bool], Tensor[(15, 2, 14), float64]) */
}

def @func_7036(%var_7012: Tensor[(8, 16, 11), float32]) -> (Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), float32], Tensor[(1408), float32], Tensor[(15, 2, 14), float64], Tensor[(8, 16, 11), int64], Tensor[(15, 2, 14), float64]) {
  %503 = @func_6917() /* ty=(Tensor[(4, 3, 15), float32],) */;
  %504 = @func_934() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %505 = cast(meta[relay.Constant][25] /* ty=Tensor[(1408), float32] */, dtype="float32") /* ty=Tensor[(1408), float32] */;
  %506 = reshape(%505, newshape=[8, 16, 11]) /* ty=Tensor[(8, 16, 11), float32] */;
  %507 = @func_6671(%506) /* ty=Tensor[(8, 16, 11), float32] */;
  %508 = cast(%var_7012, dtype="int64") /* ty=Tensor[(8, 16, 11), int64] */;
  %509 = shape_of(%507, dtype="int32") /* ty=Tensor[(3), int32] */;
  %510 = cast(%507, dtype="int64") /* ty=Tensor[(8, 16, 11), int64] */;
  %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %512 = @func_6010() /* ty=Tensor[(15, 2, 14), float64] */;
  %513 = %503.0;
  %514 = %504.0;
  %515 = logical_xor(%510, %511) /* ty=Tensor[(8, 16, 11), int64] */;
  %516 = @func_5389() /* ty=Tensor[(15, 2, 14), float64] */;
  (%512, %513, meta[relay.Constant][25] /* ty=Tensor[(1408), float32] */, %514, %515, %516)
}

def @func_7482() -> (Tensor[(15, 2, 14), float64], Tensor[(13, 13, 16), bool]) {
  %517 = @func_3209() /* ty=(Tensor[(13, 13, 16), bool],) */;
  %518 = @func_886() /* ty=Tensor[(15, 2, 14), float64] */;
  %519 = %517.0;
  (%518, %519)
}

def @func_2221(%var_2219: Tensor[(450), int32]) -> (Tensor[(15, 2, 14), float64], Tensor[(450), int32], Tensor[(450), int32], Tensor[(15, 2, 14), float64]) {
  @func_2218(%var_2219) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(450), int32], Tensor[(450), int32], Tensor[(15, 2, 14), float64]) */
}

def @func_6904() -> (Tensor[(15, 2, 14), float64],) {
  %522 = fn () -> (Tensor[(15, 2, 14), float64],) {
    %520 = @func_5227() /* ty=(Tensor[(15, 2, 14), float64],) */;
    %521 = %520.0;
    (%521,)
  };
  %522() /* ty=(Tensor[(15, 2, 14), float64],) */
}

def @func_8001() -> (Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), uint32], Tensor[(1352, 2), bool], Tensor[(1, 720), float32], Tensor[(60, 12), float32]) {
  @func_7999() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), uint32], Tensor[(1352, 2), bool], Tensor[(1, 720), float32], Tensor[(60, 12), float32]) */
}

def @func_7334(%var_7332: int64, %var_7333: Tensor[(1, 1, 14), int64]) -> (Tensor[(1, 1, 14), bool],) {
  %526 = fn (%var_7311: int64, %var_7312: Tensor[(1, 1, 14), int64]) -> (Tensor[(1, 1, 14), bool],) {
    %523 = cast(%var_7311, dtype="bool") /* ty=bool */;
    %524 = cast(%var_7312, dtype="bool") /* ty=Tensor[(1, 1, 14), bool] */;
    %525 = not_equal(%523, %524) /* ty=Tensor[(1, 1, 14), bool] */;
    (%525,)
  };
  %526(%var_7332, %var_7333) /* ty=(Tensor[(1, 1, 14), bool],) */
}

def @func_7874(%var_7871: Tensor[(1, 720), float32]) -> (Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(1, 720), float32]) {
  %527 = @func_6399() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64]) */;
  %528 = @func_3643() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %529 = cast(%var_7871, dtype="float32") /* ty=Tensor[(1, 720), float32] */;
  %530 = reshape(%529, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %531 = @func_6813(%530) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(720), float32], Tensor[(15, 2, 14), bool], Tensor[(13, 13, 16), bool], Tensor[(15, 2, 14), float64]) */;
  %532 = %527.0;
  %533 = %528.0;
  %534 = %531.1;
  (%532, %533, %534, %var_7871)
}

def @func_874(%var_872: Tensor[(15, 2, 14), float64]) -> (Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(180), int8], Tensor[(4, 3, 15), bool]) {
  @func_871(%var_872) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(180), int8], Tensor[(4, 3, 15), bool]) */
}

def @func_1733(%var_1726: Tensor[(9, 14, 15), float64], %var_1727: Tensor[(9, 14, 15), float64]) -> Tensor[(9, 14, 15), bool] {
  %535 = cast(%var_1727, dtype="bool") /* ty=Tensor[(9, 14, 15), bool] */;
  %536 = shape_of(%var_1726, dtype="int32") /* ty=Tensor[(3), int32] */;
  %537 = cast(%var_1726, dtype="bool") /* ty=Tensor[(9, 14, 15), bool] */;
  %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%537, %538) /* ty=Tensor[(9, 14, 15), bool] */
}

def @func_3807() -> (Tensor[(180), int8],) {
  %541 = fn () -> (Tensor[(180), int8],) {
    %539 = @func_2143() /* ty=(Tensor[(180), int8], Tensor[(13, 13, 16), bool], Tensor[(1352, 2), uint32]) */;
    %540 = %539.0;
    (%540,)
  };
  %541() /* ty=(Tensor[(180), int8],) */
}

def @func_5447() -> (Tensor[(15, 2, 14), float64], Tensor[(12, 10, 14), bool]) {
  @func_5445() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(12, 10, 14), bool]) */
}

def @func_5384() -> (Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(450), int32]) {
  %542 = @func_934() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %543 = @func_1181() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %544 = @func_3798() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(5, 10, 9), bool], Tensor[(450), int32], Tensor[(42, 4), int64], Tensor[(13, 13, 16), float32], Tensor[(15, 2, 14), float64], Tensor[(450), int32], Tensor[(4, 3, 15), bool], Tensor[(15, 2, 14), float64]) */;
  %545 = %542.0;
  %546 = %543.0;
  %547 = %544.2;
  (%545, %546, %547)
}

def @func_5544() -> (Tensor[(4, 3, 15), bool], Tensor[(180), int8], Tensor[(13, 13, 16), bool], Tensor[(104, 26), bool]) {
  @func_5542() /* ty=(Tensor[(4, 3, 15), bool], Tensor[(180), int8], Tensor[(13, 13, 16), bool], Tensor[(104, 26), bool]) */
}

def @func_7588(%var_7586: Tensor[(15, 2, 14), float64]) -> (Tensor[(15, 2, 14), float32], Tensor[(15, 2, 14), float64]) {
  @func_7585(%var_7586) /* ty=(Tensor[(15, 2, 14), float32], Tensor[(15, 2, 14), float64]) */
}

def @func_4967() -> (Tensor[(4, 14, 11), float64],) {
  %548 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 14, 11), float64] */, dtype="float64") /* ty=Tensor[(4, 14, 11), float64] */;
  %549 = rsqrt(%548) /* ty=Tensor[(4, 14, 11), float64] */;
  (%549,)
}

def @func_6346() -> (Tensor[(15, 2, 14), float64],) {
  %550 = @func_4084() /* ty=Tensor[(15, 2, 14), float64] */;
  (%550,)
}

def @func_4925(%var_4924: Tensor[(2704), uint32]) -> (Tensor[(4, 3, 15), float32], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32], Tensor[(180), int8], Tensor[(15, 2, 14), float64]) {
  %569 = fn (%var_4907: Tensor[(2704), uint32]) -> (Tensor[(4, 3, 15), float32], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32], Tensor[(180), int8], Tensor[(15, 2, 14), float64]) {
    %551 = @func_3226() /* ty=(Tensor[(180), int8], Tensor[(4, 3, 15), bool]) */;
    %552 = %551.1;
    %553 = cast(meta[relay.Constant][27] /* ty=Tensor[(4, 3, 15), bool] */, dtype="bool") /* ty=Tensor[(4, 3, 15), bool] */;
    %554 = shape_of(%552, dtype="int32") /* ty=Tensor[(3), int32] */;
    %555 = cast(%552, dtype="bool") /* ty=Tensor[(4, 3, 15), bool] */;
    %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %557 = greater(%555, %556) /* ty=Tensor[(4, 3, 15), bool] */;
    %558 = cast(%557, dtype="float32") /* ty=Tensor[(4, 3, 15), float32] */;
    %559 = cast(%var_4907, dtype="uint32") /* ty=Tensor[(2704), uint32] */;
    %560 = cast(%var_4907, dtype="uint32") /* ty=Tensor[(2704), uint32] */;
    %561 = reshape(%559, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), uint32] */;
    %562 = reshape(%560, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), uint32] */;
    %563 = @func_912() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(180), int8]) */;
    %564 = @func_3878() /* ty=(Tensor[(15, 2, 14), float64],) */;
    %565 = sin(%558) /* ty=Tensor[(4, 3, 15), float32] */;
    %566 = @func_213(%561, %562) /* ty=Tensor[(13, 13, 16), bool] */;
    %567 = %563.2;
    %568 = %564.0;
    (%565, %566, %var_4907, %567, %568)
  };
  %569(%var_4924) /* ty=(Tensor[(4, 3, 15), float32], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32], Tensor[(180), int8], Tensor[(15, 2, 14), float64]) */
}

def @func_5850(%var_5848: Tensor[(1, 720), float32], %var_5849: Tensor[(2, 720), float32]) -> (Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float32], Tensor[(15, 2, 14), float64], Tensor[(2, 720), uint32], Tensor[(2, 720), float32], Tensor[(15, 2, 14), float64]) {
  %590 = fn (%var_5817: Tensor[(1, 720), float32], %var_5820: Tensor[(2, 720), float32]) -> (Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float32], Tensor[(15, 2, 14), float64], Tensor[(2, 720), uint32], Tensor[(2, 720), float32], Tensor[(15, 2, 14), float64]) {
    %570 = @func_4321() /* ty=(Tensor[(12, 10, 14), bool], Tensor[(15, 2, 14), float64]) */;
    %571 = @func_4816() /* ty=(Tensor[(15, 2, 14), float32], Tensor[(1352, 2), bool]) */;
    %572 = cast(%var_5817, dtype="float32") /* ty=Tensor[(1, 720), float32] */;
    %573 = reshape(%572, newshape=[5, 9, 16]) /* ty=Tensor[(5, 9, 16), float32] */;
    %574 = @func_2937(%573) /* ty=(Tensor[(5, 9, 16), float32], Tensor[(15, 2, 14), float64]) */;
    %575 = cast(%var_5817, dtype="uint32") /* ty=Tensor[(1, 720), uint32] */;
    %576 = cast(%var_5820, dtype="uint32") /* ty=Tensor[(2, 720), uint32] */;
    %577 = cast(%var_5817, dtype="float32") /* ty=Tensor[(1, 720), float32] */;
    %578 = tan(%577) /* ty=Tensor[(1, 720), float32] */;
    %579 = cast(%578, dtype="float64") /* ty=Tensor[(1, 720), float64] */;
    %580 = asin(%579) /* ty=Tensor[(1, 720), float64] */;
    %581 = cast(%580, dtype="float32") /* ty=Tensor[(1, 720), float32] */;
    %582 = cast(%var_5820, dtype="float32") /* ty=Tensor[(2, 720), float32] */;
    %583 = @func_3878() /* ty=(Tensor[(15, 2, 14), float64],) */;
    %584 = %570.1;
    %585 = %571.0;
    %586 = %574.1;
    %587 = logical_xor(%575, %576) /* ty=Tensor[(2, 720), uint32] */;
    %588 = divide(%581, %582) /* ty=Tensor[(2, 720), float32] */;
    %589 = %583.0;
    (%584, %585, %586, %587, %588, %589)
  };
  %590(%var_5848, %var_5849) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float32], Tensor[(15, 2, 14), float64], Tensor[(2, 720), uint32], Tensor[(2, 720), float32], Tensor[(15, 2, 14), float64]) */
}

def @func_3347(%var_3345: Tensor[(1, 720), float32]) -> (Tensor[(15, 2, 14), float32], Tensor[(15, 2, 14), float64], Tensor[(1, 720), float32]) {
  %591 = @func_2996() /* ty=(Tensor[(15, 2, 14), float32], Tensor[(4, 3, 15), bool]) */;
  %592 = cast(%var_3345, dtype="float32") /* ty=Tensor[(1, 720), float32] */;
  %593 = reshape(%592, newshape=[5, 9, 16]) /* ty=Tensor[(5, 9, 16), float32] */;
  %594 = @func_2937(%593) /* ty=(Tensor[(5, 9, 16), float32], Tensor[(15, 2, 14), float64]) */;
  %595 = %591.0;
  %596 = %594.1;
  (%595, %596, %var_3345)
}

def @func_1878() -> Tensor[(4, 3, 15), bool] {
  @func_1876() /* ty=Tensor[(4, 3, 15), bool] */
}

def @func_216(%var_214: Tensor[(13, 13, 16), uint32], %var_215: Tensor[(13, 13, 16), uint32]) -> Tensor[(13, 13, 16), bool] {
  %601 = fn (%var_206: Tensor[(13, 13, 16), uint32], %var_207: Tensor[(13, 13, 16), uint32]) -> Tensor[(13, 13, 16), bool] {
    %597 = cast(%var_207, dtype="bool") /* ty=Tensor[(13, 13, 16), bool] */;
    %598 = shape_of(%var_206, dtype="int32") /* ty=Tensor[(3), int32] */;
    %599 = cast(%var_206, dtype="bool") /* ty=Tensor[(13, 13, 16), bool] */;
    %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%599, %600) /* ty=Tensor[(13, 13, 16), bool] */
  };
  %601(%var_214, %var_215) /* ty=Tensor[(13, 13, 16), bool] */
}

def @func_6762() -> (Tensor[(15, 2, 14), float64],) {
  %602 = @func_3284() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %603 = %602.0;
  (%603,)
}

def @func_7944() -> (Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), float32]) {
  %604 = @func_3037() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), uint32]) */;
  %605 = @func_1916() /* ty=(Tensor[(4, 3, 15), bool],) */;
  %606 = %605.0;
  %607 = @func_5402() /* ty=Tensor[(4, 3, 15), bool] */;
  %608 = cast(%607, dtype="float32") /* ty=Tensor[(4, 3, 15), float32] */;
  %609 = shape_of(%606, dtype="int32") /* ty=Tensor[(3), int32] */;
  %610 = cast(%606, dtype="float32") /* ty=Tensor[(4, 3, 15), float32] */;
  %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %612 = %604.0;
  %613 = maximum(%610, %611) /* ty=Tensor[(4, 3, 15), float32] */;
  (%612, %613)
}

def @func_4969() -> (Tensor[(4, 14, 11), float64],) {
  @func_4967() /* ty=(Tensor[(4, 14, 11), float64],) */
}

def @func_1797(%var_1795: Tensor[(15, 2, 14), float64], %var_1796: Tensor[(15, 2, 14), bool]) -> (Tensor[(15, 2, 14), int32], Tensor[(13, 13, 16), float32], Tensor[(165, 9), int64]) {
  %632 = fn (%var_1774: Tensor[(15, 2, 14), float64], %var_1780: Tensor[(15, 2, 14), bool]) -> (Tensor[(15, 2, 14), int32], Tensor[(13, 13, 16), float32], Tensor[(165, 9), int64]) {
    %614 = @func_965() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64]) */;
    %615 = %614.0;
    %616 = cast(%var_1774, dtype="bool") /* ty=Tensor[(15, 2, 14), bool] */;
    %617 = shape_of(%615, dtype="int32") /* ty=Tensor[(3), int32] */;
    %618 = cast(%615, dtype="bool") /* ty=Tensor[(15, 2, 14), bool] */;
    %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %620 = logical_or(%618, %619) /* ty=Tensor[(15, 2, 14), bool] */;
    %621 = cast(%var_1780, dtype="int32") /* ty=Tensor[(15, 2, 14), int32] */;
    %622 = shape_of(%620, dtype="int32") /* ty=Tensor[(3), int32] */;
    %623 = cast(%620, dtype="int32") /* ty=Tensor[(15, 2, 14), int32] */;
    %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %625 = cast(meta[relay.Constant][28] /* ty=Tensor[(165, 9), int64] */, dtype="int64") /* ty=Tensor[(165, 9), int64] */;
    %626 = cast(meta[relay.Constant][28] /* ty=Tensor[(165, 9), int64] */, dtype="int64") /* ty=Tensor[(165, 9), int64] */;
    %627 = reshape(%625, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int64] */;
    %628 = reshape(%626, newshape=[15, 9, 11]) /* ty=Tensor[(15, 9, 11), int64] */;
    %629 = @func_799(%627, %628) /* ty=(Tensor[(15, 9, 11), int64], Tensor[(2704), uint32], Tensor[(13, 13, 16), float32]) */;
    %630 = add(%623, %624) /* ty=Tensor[(15, 2, 14), int32] */;
    %631 = %629.2;
    (%630, %631, meta[relay.Constant][28] /* ty=Tensor[(165, 9), int64] */)
  };
  %632(%var_1795, %var_1796) /* ty=(Tensor[(15, 2, 14), int32], Tensor[(13, 13, 16), float32], Tensor[(165, 9), int64]) */
}

def @func_1243(%var_1241: Tensor[(450), int32]) -> (Tensor[(4, 3, 15), float32], Tensor[(5, 10, 9), bool], Tensor[(450), int32]) {
  @func_1240(%var_1241) /* ty=(Tensor[(4, 3, 15), float32], Tensor[(5, 10, 9), bool], Tensor[(450), int32]) */
}

def @func_7744() -> (Tensor[(1352, 2), bool], Tensor[(16, 7, 16), bool], Tensor[(1890), float64], Tensor[(12, 10, 14), bool]) {
  @func_7742() /* ty=(Tensor[(1352, 2), bool], Tensor[(16, 7, 16), bool], Tensor[(1890), float64], Tensor[(12, 10, 14), bool]) */
}

def @func_2536() -> Tensor[(15, 2, 14), float64] {
  %633 = fn () -> Tensor[(15, 2, 14), float64] {
    @func_750() /* ty=Tensor[(15, 2, 14), float64] */
  };
  %633() /* ty=Tensor[(15, 2, 14), float64] */
}

def @func_2472() -> (Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64]) {
  %634 = @func_1576() /* ty=Tensor[(15, 2, 14), float64] */;
  %635 = @func_886() /* ty=Tensor[(15, 2, 14), float64] */;
  (%634, %635)
}

def @func_7502() -> Tensor[(15, 2, 14), float64] {
  @func_4000() /* ty=Tensor[(15, 2, 14), float64] */
}

def @func_7541() -> (Tensor[(4, 3, 15), bool],) {
  %636 = @func_6917() /* ty=(Tensor[(4, 3, 15), float32],) */;
  %637 = %636.0;
  %638 = cast(%637, dtype="float32") /* ty=Tensor[(4, 3, 15), float32] */;
  %639 = sinh(%638) /* ty=Tensor[(4, 3, 15), float32] */;
  %640 = cast(%637, dtype="bool") /* ty=Tensor[(4, 3, 15), bool] */;
  %641 = shape_of(%639, dtype="int32") /* ty=Tensor[(3), int32] */;
  %642 = cast(%639, dtype="bool") /* ty=Tensor[(4, 3, 15), bool] */;
  %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %644 = greater_equal(%642, %643) /* ty=Tensor[(4, 3, 15), bool] */;
  (%644,)
}

def @func_1118() -> (Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32], Tensor[(15, 2, 14), float64]) {
  @func_1116() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32], Tensor[(15, 2, 14), float64]) */
}

def @func_1461(%var_1459: Tensor[(2704), uint32]) -> (Tensor[(15, 2, 14), float64], Tensor[(7, 6, 4), bool], Tensor[(42, 4), int64], Tensor[(13, 13, 16), bool], Tensor[(4, 3, 15), bool], Tensor[(15, 2, 14), float64], Tensor[(2704), float32]) {
  @func_1458(%var_1459) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(7, 6, 4), bool], Tensor[(42, 4), int64], Tensor[(13, 13, 16), bool], Tensor[(4, 3, 15), bool], Tensor[(15, 2, 14), float64], Tensor[(2704), float32]) */
}

def @func_3799() -> (Tensor[(15, 2, 14), float64], Tensor[(5, 10, 9), bool], Tensor[(450), int32], Tensor[(42, 4), int64], Tensor[(13, 13, 16), float32], Tensor[(15, 2, 14), float64], Tensor[(450), int32], Tensor[(4, 3, 15), bool], Tensor[(15, 2, 14), float64]) {
  %670 = fn () -> (Tensor[(15, 2, 14), float64], Tensor[(5, 10, 9), bool], Tensor[(450), int32], Tensor[(42, 4), int64], Tensor[(13, 13, 16), float32], Tensor[(15, 2, 14), float64], Tensor[(450), int32], Tensor[(4, 3, 15), bool], Tensor[(15, 2, 14), float64]) {
    %645 = @func_912() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(180), int8]) */;
    %646 = cast(meta[relay.Constant][29] /* ty=Tensor[(450), int32] */, dtype="int32") /* ty=Tensor[(450), int32] */;
    %647 = cast(meta[relay.Constant][29] /* ty=Tensor[(450), int32] */, dtype="int32") /* ty=Tensor[(450), int32] */;
    %648 = reshape(%646, newshape=[5, 10, 9]) /* ty=Tensor[(5, 10, 9), int32] */;
    %649 = reshape(%647, newshape=[5, 10, 9]) /* ty=Tensor[(5, 10, 9), int32] */;
    %650 = @func_65(%648, %649) /* ty=(Tensor[(5, 10, 9), int32], Tensor[(5, 10, 9), uint32], Tensor[(5, 10, 9), bool]) */;
    %651 = @func_3209() /* ty=(Tensor[(13, 13, 16), bool],) */;
    %652 = %651.0;
    %653 = cast(%652, dtype="uint32") /* ty=Tensor[(13, 13, 16), uint32] */;
    %654 = reshape(%653, newshape=[2704]) /* ty=Tensor[(2704), uint32] */;
    %655 = @func_1458(%654) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(7, 6, 4), bool], Tensor[(42, 4), int64], Tensor[(13, 13, 16), bool], Tensor[(4, 3, 15), bool], Tensor[(15, 2, 14), float64], Tensor[(2704), float32]) */;
    %656 = cast(%652, dtype="float32") /* ty=Tensor[(13, 13, 16), float32] */;
    %657 = cast(meta[relay.Constant][29] /* ty=Tensor[(450), int32] */, dtype="int32") /* ty=Tensor[(450), int32] */;
    %658 = reshape(%657, newshape=[450]) /* ty=Tensor[(450), int32] */;
    %659 = @func_1240(%658) /* ty=(Tensor[(4, 3, 15), float32], Tensor[(5, 10, 9), bool], Tensor[(450), int32]) */;
    %660 = @func_2039() /* ty=(Tensor[(4, 3, 15), bool], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32]) */;
    %661 = @func_2472() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64]) */;
    %662 = %645.0;
    %663 = %650.2;
    %664 = %655.2;
    %665 = sqrt(%656) /* ty=Tensor[(13, 13, 16), float32] */;
    %666 = @func_2535() /* ty=Tensor[(15, 2, 14), float64] */;
    %667 = %659.2;
    %668 = %660.0;
    %669 = %661.0;
    (%662, %663, meta[relay.Constant][29] /* ty=Tensor[(450), int32] */, %664, %665, %666, %667, %668, %669)
  };
  %670() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(5, 10, 9), bool], Tensor[(450), int32], Tensor[(42, 4), int64], Tensor[(13, 13, 16), float32], Tensor[(15, 2, 14), float64], Tensor[(450), int32], Tensor[(4, 3, 15), bool], Tensor[(15, 2, 14), float64]) */
}

def @func_967() -> (Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64]) {
  @func_965() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64]) */
}

def @func_3227() -> (Tensor[(180), int8], Tensor[(4, 3, 15), bool]) {
  %675 = fn () -> (Tensor[(180), int8], Tensor[(4, 3, 15), bool]) {
    %671 = @func_2143() /* ty=(Tensor[(180), int8], Tensor[(13, 13, 16), bool], Tensor[(1352, 2), uint32]) */;
    %672 = @func_1916() /* ty=(Tensor[(4, 3, 15), bool],) */;
    %673 = %671.0;
    %674 = %672.0;
    (%673, %674)
  };
  %675() /* ty=(Tensor[(180), int8], Tensor[(4, 3, 15), bool]) */
}

def @func_2358() -> (Tensor[(15, 2, 14), float32],) {
  @func_2356() /* ty=(Tensor[(15, 2, 14), float32],) */
}

def @func_6348() -> (Tensor[(15, 2, 14), float64],) {
  @func_6346() /* ty=(Tensor[(15, 2, 14), float64],) */
}

def @func_5389() -> Tensor[(15, 2, 14), float64] {
  %676 = @func_1673() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %676.0
}

def @func_750() -> Tensor[(15, 2, 14), float64] {
  %677 = cast(meta[relay.Constant][30] /* ty=Tensor[(15, 2, 14), float64] */, dtype="float64") /* ty=Tensor[(15, 2, 14), float64] */;
  log(%677) /* ty=Tensor[(15, 2, 14), float64] */
}

def @func_4697() -> (Tensor[(1352, 2), bool],) {
  %678 = @func_3237() /* ty=Tensor[(1352, 2), uint32] */;
  %679 = cast(%678, dtype="float64") /* ty=Tensor[(1352, 2), float64] */;
  %680 = log10(%679) /* ty=Tensor[(1352, 2), float64] */;
  %681 = cast(%678, dtype="bool") /* ty=Tensor[(1352, 2), bool] */;
  %682 = shape_of(%680, dtype="int32") /* ty=Tensor[(2), int32] */;
  %683 = cast(%680, dtype="bool") /* ty=Tensor[(1352, 2), bool] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %685 = logical_and(%683, %684) /* ty=Tensor[(1352, 2), bool] */;
  (%685,)
}

def @func_1577() -> Tensor[(15, 2, 14), float64] {
  %686 = fn () -> Tensor[(15, 2, 14), float64] {
    @func_750() /* ty=Tensor[(15, 2, 14), float64] */
  };
  %686() /* ty=Tensor[(15, 2, 14), float64] */
}

def @func_4568(%var_4566: Tensor[(7, 11, 13), int16], %var_4567: Tensor[(7, 11, 13), int16]) -> Tensor[(7, 11, 13), bool] {
  @func_4564(%var_4566, %var_4567) /* ty=Tensor[(7, 11, 13), bool] */
}

def @func_4452(%var_4450: Tensor[(420), float64]) -> (Tensor[(1352, 2), uint32], Tensor[(180), int8], Tensor[(13, 13, 16), float32], Tensor[(420), float64], Tensor[(12, 4, 3), bool], Tensor[(12, 4, 3), int32]) {
  @func_4449(%var_4450) /* ty=(Tensor[(1352, 2), uint32], Tensor[(180), int8], Tensor[(13, 13, 16), float32], Tensor[(420), float64], Tensor[(12, 4, 3), bool], Tensor[(12, 4, 3), int32]) */
}

def @func_802(%var_800: Tensor[(15, 9, 11), int64], %var_801: Tensor[(15, 9, 11), int64]) -> (Tensor[(15, 9, 11), int64], Tensor[(2704), uint32], Tensor[(13, 13, 16), float32]) {
  %699 = fn (%var_759: Tensor[(15, 9, 11), int64], %var_760: Tensor[(15, 9, 11), int64]) -> (Tensor[(15, 9, 11), int64], Tensor[(2704), uint32], Tensor[(13, 13, 16), float32]) {
    %687 = cast(%var_760, dtype="int64") /* ty=Tensor[(15, 9, 11), int64] */;
    %688 = shape_of(%var_759, dtype="int32") /* ty=Tensor[(3), int32] */;
    %689 = cast(%var_759, dtype="int64") /* ty=Tensor[(15, 9, 11), int64] */;
    %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %691 = cast(meta[relay.Constant][31] /* ty=Tensor[(2704), uint32] */, dtype="uint32") /* ty=Tensor[(2704), uint32] */;
    %692 = cast(meta[relay.Constant][31] /* ty=Tensor[(2704), uint32] */, dtype="uint32") /* ty=Tensor[(2704), uint32] */;
    %693 = reshape(%691, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), uint32] */;
    %694 = reshape(%692, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), uint32] */;
    %695 = @func_213(%693, %694) /* ty=Tensor[(13, 13, 16), bool] */;
    %696 = cast(%695, dtype="float32") /* ty=Tensor[(13, 13, 16), float32] */;
    %697 = bitwise_and(%689, %690) /* ty=Tensor[(15, 9, 11), int64] */;
    %698 = acos(%696) /* ty=Tensor[(13, 13, 16), float32] */;
    (%697, meta[relay.Constant][31] /* ty=Tensor[(2704), uint32] */, %698)
  };
  %699(%var_800, %var_801) /* ty=(Tensor[(15, 9, 11), int64], Tensor[(2704), uint32], Tensor[(13, 13, 16), float32]) */
}

def @func_1876() -> Tensor[(4, 3, 15), bool] {
  %700 = @func_912() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(180), int8]) */;
  %700.1
}

def @func_5445() -> (Tensor[(15, 2, 14), float64], Tensor[(12, 10, 14), bool]) {
  %701 = @func_4321() /* ty=(Tensor[(12, 10, 14), bool], Tensor[(15, 2, 14), float64]) */;
  %702 = @func_750() /* ty=Tensor[(15, 2, 14), float64] */;
  %703 = %701.0;
  (%702, %703)
}

def @func_242(%var_235: Tensor[(7, 6, 4), int64]) -> Tensor[(7, 6, 4), bool] {
  %704 = cast(meta[relay.Constant][32] /* ty=Tensor[(7, 6, 4), int64] */, dtype="bool") /* ty=Tensor[(7, 6, 4), bool] */;
  %705 = shape_of(%var_235, dtype="int32") /* ty=Tensor[(3), int32] */;
  %706 = cast(%var_235, dtype="bool") /* ty=Tensor[(7, 6, 4), bool] */;
  %707 = dyn.reshape(%704, %705, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%706, %707) /* ty=Tensor[(7, 6, 4), bool] */
}

def @func_4043(%var_4041: Tensor[(1890), float64]) -> (Tensor[(15, 2, 14), float64], Tensor[(9, 14, 15), bool], Tensor[(1890), float64]) {
  @func_4040(%var_4041) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(9, 14, 15), bool], Tensor[(1890), float64]) */
}

def @func_4149() -> (Tensor[(15, 2, 14), uint32], Tensor[(13, 13, 16), bool]) {
  @func_4147() /* ty=(Tensor[(15, 2, 14), uint32], Tensor[(13, 13, 16), bool]) */
}

def @func_6512() -> (Tensor[(13, 13, 16), bool], Tensor[(15, 2, 14), float32]) {
  %711 = fn () -> (Tensor[(13, 13, 16), bool], Tensor[(15, 2, 14), float32]) {
    %708 = @func_3209() /* ty=(Tensor[(13, 13, 16), bool],) */;
    %709 = %708.0;
    %710 = @func_5760() /* ty=Tensor[(15, 2, 14), float32] */;
    (%709, %710)
  };
  %711() /* ty=(Tensor[(13, 13, 16), bool], Tensor[(15, 2, 14), float32]) */
}

def @func_5294() -> (Tensor[(13, 13, 16), bool], Tensor[(15, 2, 14), float64], Tensor[(720), float32], Tensor[(15, 2, 14), float64], Tensor[(1352, 2), uint16], Tensor[(1352, 2), float32], Tensor[(1352, 2), bool]) {
  %740 = fn () -> (Tensor[(13, 13, 16), bool], Tensor[(15, 2, 14), float64], Tensor[(720), float32], Tensor[(15, 2, 14), float64], Tensor[(1352, 2), uint16], Tensor[(1352, 2), float32], Tensor[(1352, 2), bool]) {
    %712 = @func_4147() /* ty=(Tensor[(15, 2, 14), uint32], Tensor[(13, 13, 16), bool]) */;
    %713 = cast(meta[relay.Constant][33] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
    %714 = reshape(%713, newshape=[720]) /* ty=Tensor[(720), float32] */;
    %715 = @func_4617(%714) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(720), float32]) */;
    %716 = @func_4816() /* ty=(Tensor[(15, 2, 14), float32], Tensor[(1352, 2), bool]) */;
    %717 = %716.1;
    %718 = cast(%717, dtype="float64") /* ty=Tensor[(1352, 2), float64] */;
    %719 = asinh(%718) /* ty=Tensor[(1352, 2), float64] */;
    %720 = cast(%717, dtype="bool") /* ty=Tensor[(1352, 2), bool] */;
    %721 = shape_of(%719, dtype="int32") /* ty=Tensor[(2), int32] */;
    %722 = cast(%719, dtype="bool") /* ty=Tensor[(1352, 2), bool] */;
    %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %724 = less_equal(%722, %723) /* ty=Tensor[(1352, 2), bool] */;
    %725 = cast(%719, dtype="uint16") /* ty=Tensor[(1352, 2), uint16] */;
    %726 = shape_of(%724, dtype="int32") /* ty=Tensor[(2), int32] */;
    %727 = cast(%724, dtype="uint16") /* ty=Tensor[(1352, 2), uint16] */;
    %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %729 = cast(%717, dtype="float32") /* ty=Tensor[(1352, 2), float32] */;
    %730 = cast(meta[relay.Constant][34] /* ty=Tensor[(1352, 2), bool] */, dtype="bool") /* ty=Tensor[(1352, 2), bool] */;
    %731 = shape_of(%724, dtype="int32") /* ty=Tensor[(2), int32] */;
    %732 = cast(%724, dtype="bool") /* ty=Tensor[(1352, 2), bool] */;
    %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %734 = %712.1;
    %735 = %715.0;
    %736 = @func_750() /* ty=Tensor[(15, 2, 14), float64] */;
    %737 = multiply(%727, %728) /* ty=Tensor[(1352, 2), uint16] */;
    %738 = asin(%729) /* ty=Tensor[(1352, 2), float32] */;
    %739 = greater(%732, %733) /* ty=Tensor[(1352, 2), bool] */;
    (%734, %735, meta[relay.Constant][33] /* ty=Tensor[(720), float32] */, %736, %737, %738, %739)
  };
  %740() /* ty=(Tensor[(13, 13, 16), bool], Tensor[(15, 2, 14), float64], Tensor[(720), float32], Tensor[(15, 2, 14), float64], Tensor[(1352, 2), uint16], Tensor[(1352, 2), float32], Tensor[(1352, 2), bool]) */
}

def @func_6886() -> (Tensor[(15, 2, 14), float64],) {
  %743 = fn () -> (Tensor[(15, 2, 14), float64],) {
    %741 = @func_1181() /* ty=(Tensor[(15, 2, 14), float64],) */;
    %742 = %741.0;
    (%742,)
  };
  %743() /* ty=(Tensor[(15, 2, 14), float64],) */
}

def @func_3238() -> Tensor[(1352, 2), uint32] {
  %745 = fn () -> Tensor[(1352, 2), uint32] {
    %744 = @func_2143() /* ty=(Tensor[(180), int8], Tensor[(13, 13, 16), bool], Tensor[(1352, 2), uint32]) */;
    %744.2
  };
  %745() /* ty=Tensor[(1352, 2), uint32] */
}

def @func_5002() -> Tensor[(4, 3, 15), bool] {
  @func_5000() /* ty=Tensor[(4, 3, 15), bool] */
}

def @func_8286() -> (Tensor[(4, 3, 15), uint8], Tensor[(4, 3, 15), int8], Tensor[(15, 2, 14), float32], Tensor[(4, 3, 15), float64]) {
  @func_8284() /* ty=(Tensor[(4, 3, 15), uint8], Tensor[(4, 3, 15), int8], Tensor[(15, 2, 14), float32], Tensor[(4, 3, 15), float64]) */
}

def @func_7504() -> Tensor[(15, 2, 14), float64] {
  @func_7502() /* ty=Tensor[(15, 2, 14), float64] */
}

def @func_7877(%var_7875: Tensor[(1, 720), float32]) -> (Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(1, 720), float32]) {
  @func_7874(%var_7875) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(1, 720), float32]) */
}

def @func_4086() -> Tensor[(15, 2, 14), float64] {
  @func_4084() /* ty=Tensor[(15, 2, 14), float64] */
}

def @func_2218(%var_2208: Tensor[(450), int32]) -> (Tensor[(15, 2, 14), float64], Tensor[(450), int32], Tensor[(450), int32], Tensor[(15, 2, 14), float64]) {
  %746 = cast(%var_2208, dtype="int32") /* ty=Tensor[(450), int32] */;
  %747 = reshape(%746, newshape=[450]) /* ty=Tensor[(450), int32] */;
  %748 = @func_1240(%747) /* ty=(Tensor[(4, 3, 15), float32], Tensor[(5, 10, 9), bool], Tensor[(450), int32]) */;
  %749 = @func_1116() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32], Tensor[(15, 2, 14), float64]) */;
  %750 = @func_886() /* ty=Tensor[(15, 2, 14), float64] */;
  %751 = %748.2;
  %752 = %749.1;
  (%750, %751, %var_2208, %752)
}

def @func_5324() -> Tensor[(13, 13, 16), bool] {
  %754 = fn () -> Tensor[(13, 13, 16), bool] {
    %753 = @func_2039() /* ty=(Tensor[(4, 3, 15), bool], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32]) */;
    %753.1
  };
  %754() /* ty=Tensor[(13, 13, 16), bool] */
}

def @func_7370() -> (Tensor[(2704), float64], Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), float64]) {
  %755 = @func_5384() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(450), int32]) */;
  %756 = @func_5000() /* ty=Tensor[(4, 3, 15), bool] */;
  %757 = cast(%756, dtype="float64") /* ty=Tensor[(4, 3, 15), float64] */;
  %758 = @func_4645() /* ty=Tensor[(2704), float64] */;
  %759 = %755.1;
  %760 = asinh(%757) /* ty=Tensor[(4, 3, 15), float64] */;
  (%758, %759, %760)
}

def @func_3211() -> (Tensor[(13, 13, 16), bool],) {
  @func_3209() /* ty=(Tensor[(13, 13, 16), bool],) */
}

def @func_6982() -> Tensor[(4, 3, 15), float32] {
  @func_6980() /* ty=Tensor[(4, 3, 15), float32] */
}

def @func_871(%var_824: Tensor[(15, 2, 14), float64]) -> (Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(180), int8], Tensor[(4, 3, 15), bool]) {
  %761 = @func_750() /* ty=Tensor[(15, 2, 14), float64] */;
  %762 = cast(%var_824, dtype="float32") /* ty=Tensor[(15, 2, 14), float32] */;
  %763 = shape_of(%761, dtype="int32") /* ty=Tensor[(3), int32] */;
  %764 = cast(%761, dtype="float32") /* ty=Tensor[(15, 2, 14), float32] */;
  %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %766 = floor_mod(%764, %765) /* ty=Tensor[(15, 2, 14), float32] */;
  %767 = cast(%766, dtype="float64") /* ty=Tensor[(15, 2, 14), float64] */;
  %768 = cast(meta[relay.Constant][35] /* ty=Tensor[(180), int8] */, dtype="int8") /* ty=Tensor[(180), int8] */;
  %769 = cast(meta[relay.Constant][35] /* ty=Tensor[(180), int8] */, dtype="int8") /* ty=Tensor[(180), int8] */;
  %770 = reshape(%768, newshape=[4, 3, 15]) /* ty=Tensor[(4, 3, 15), int8] */;
  %771 = reshape(%769, newshape=[4, 3, 15]) /* ty=Tensor[(4, 3, 15), int8] */;
  %772 = @func_533(%770, %771) /* ty=Tensor[(4, 3, 15), bool] */;
  %773 = cast(%772, dtype="int8") /* ty=Tensor[(4, 3, 15), int8] */;
  %774 = cast(%772, dtype="int8") /* ty=Tensor[(4, 3, 15), int8] */;
  %775 = reshape(%773, newshape=[4, 3, 15]) /* ty=Tensor[(4, 3, 15), int8] */;
  %776 = reshape(%774, newshape=[4, 3, 15]) /* ty=Tensor[(4, 3, 15), int8] */;
  %777 = tan(%767) /* ty=Tensor[(15, 2, 14), float64] */;
  %778 = @func_533(%775, %776) /* ty=Tensor[(4, 3, 15), bool] */;
  (%777, %772, meta[relay.Constant][35] /* ty=Tensor[(180), int8] */, %778)
}

def @func_2722() -> (Tensor[(15, 2, 14), float64], Tensor[(9, 14, 15), bool], Tensor[(5, 10, 9), int32], Tensor[(2704), uint32]) {
  %787 = fn () -> (Tensor[(15, 2, 14), float64], Tensor[(9, 14, 15), bool], Tensor[(5, 10, 9), int32], Tensor[(2704), uint32]) {
    %779 = @func_2630() /* ty=(Tensor[(15, 2, 14), float64],) */;
    %780 = @func_1999() /* ty=(Tensor[(15, 2, 14), bool], Tensor[(9, 14, 15), bool], Tensor[(1890), float64]) */;
    %781 = cast(meta[relay.Constant][36] /* ty=Tensor[(2704), uint32] */, dtype="uint32") /* ty=Tensor[(2704), uint32] */;
    %782 = reshape(%781, newshape=[1, 2704]) /* ty=Tensor[(1, 2704), uint32] */;
    %783 = @func_1513(%782) /* ty=(Tensor[(16, 16, 14), float32], Tensor[(5, 10, 9), int32], Tensor[(450), int32], Tensor[(7, 6, 4), bool], Tensor[(168), int64], Tensor[(13, 13, 16), bool], Tensor[(1, 2704), uint32], Tensor[(13, 13, 16), bool]) */;
    %784 = %779.0;
    %785 = %780.1;
    %786 = %783.1;
    (%784, %785, %786, meta[relay.Constant][36] /* ty=Tensor[(2704), uint32] */)
  };
  %787() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(9, 14, 15), bool], Tensor[(5, 10, 9), int32], Tensor[(2704), uint32]) */
}

def @func_1675() -> (Tensor[(15, 2, 14), float64],) {
  @func_1673() /* ty=(Tensor[(15, 2, 14), float64],) */
}

def @func_3522() -> Tensor[(15, 2, 14), float64] {
  %788 = @func_1181() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %788.0
}

def @func_4544() -> (Tensor[(13, 13, 16), bool], Tensor[(15, 2, 14), float64]) {
  %789 = @func_2143() /* ty=(Tensor[(180), int8], Tensor[(13, 13, 16), bool], Tensor[(1352, 2), uint32]) */;
  %790 = @func_934() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %791 = %789.1;
  %792 = %790.0;
  (%791, %792)
}

def @func_1595(%var_1593: Tensor[(12, 9, 14), float32]) -> Tensor[(12, 9, 14), float32] {
  @func_1592(%var_1593) /* ty=Tensor[(12, 9, 14), float32] */
}

def @func_3524() -> Tensor[(15, 2, 14), float64] {
  @func_3522() /* ty=Tensor[(15, 2, 14), float64] */
}

def @func_4322() -> (Tensor[(12, 10, 14), bool], Tensor[(15, 2, 14), float64]) {
  %802 = fn () -> (Tensor[(12, 10, 14), bool], Tensor[(15, 2, 14), float64]) {
    %793 = cast(meta[relay.Constant][37] /* ty=Tensor[(12, 10, 14), float32] */, dtype="float32") /* ty=Tensor[(12, 10, 14), float32] */;
    %794 = exp(%793) /* ty=Tensor[(12, 10, 14), float32] */;
    %795 = cast(%794, dtype="bool") /* ty=Tensor[(12, 10, 14), bool] */;
    %796 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(12, 10, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %797 = cast(meta[relay.Constant][37] /* ty=Tensor[(12, 10, 14), float32] */, dtype="bool") /* ty=Tensor[(12, 10, 14), bool] */;
    %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %799 = @func_3878() /* ty=(Tensor[(15, 2, 14), float64],) */;
    %800 = less(%797, %798) /* ty=Tensor[(12, 10, 14), bool] */;
    %801 = %799.0;
    (%800, %801)
  };
  %802() /* ty=(Tensor[(12, 10, 14), bool], Tensor[(15, 2, 14), float64]) */
}

def @func_4775(%var_4773: Tensor[(2, 8, 3), float64], %var_4774: Tensor[(1890), float64]) -> (Tensor[(15, 2, 14), float64], Tensor[(1890), float64], Tensor[(2, 8, 3), float32], Tensor[(9, 14, 15), float64], Tensor[(15, 2, 14), float64]) {
  %820 = fn (%var_4723: Tensor[(2, 8, 3), float64], %var_4747: Tensor[(1890), float64]) -> (Tensor[(15, 2, 14), float64], Tensor[(1890), float64], Tensor[(2, 8, 3), float32], Tensor[(9, 14, 15), float64], Tensor[(15, 2, 14), float64]) {
    %803 = @func_3037() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), uint32]) */;
    %804 = cast(%var_4723, dtype="float64") /* ty=Tensor[(2, 8, 3), float64] */;
    %805 = sqrt(%804) /* ty=Tensor[(2, 8, 3), float64] */;
    %806 = cast(%805, dtype="float32") /* ty=Tensor[(2, 8, 3), float32] */;
    %807 = cast(%var_4747, dtype="float64") /* ty=Tensor[(1890), float64] */;
    %808 = cast(%var_4747, dtype="float64") /* ty=Tensor[(1890), float64] */;
    %809 = reshape(%807, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
    %810 = reshape(%808, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float64] */;
    %811 = @func_1733(%809, %810) /* ty=Tensor[(9, 14, 15), bool] */;
    %812 = cast(%811, dtype="float64") /* ty=Tensor[(9, 14, 15), float64] */;
    %813 = %803.0;
    %814 = cast(%813, dtype="float64") /* ty=Tensor[(15, 2, 14), float64] */;
    %815 = reshape(%814, newshape=[15, 2, 14]) /* ty=Tensor[(15, 2, 14), float64] */;
    %816 = @func_871(%815) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(180), int8], Tensor[(4, 3, 15), bool]) */;
    %817 = exp(%806) /* ty=Tensor[(2, 8, 3), float32] */;
    %818 = acosh(%812) /* ty=Tensor[(9, 14, 15), float64] */;
    %819 = %816.0;
    (%813, %var_4747, %817, %818, %819)
  };
  %820(%var_4773, %var_4774) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(1890), float64], Tensor[(2, 8, 3), float32], Tensor[(9, 14, 15), float64], Tensor[(15, 2, 14), float64]) */
}

def @func_2810() -> (Tensor[(1352, 2), uint32], Tensor[(15, 2, 14), float32]) {
  %825 = fn () -> (Tensor[(1352, 2), uint32], Tensor[(15, 2, 14), float32]) {
    %821 = @func_2143() /* ty=(Tensor[(180), int8], Tensor[(13, 13, 16), bool], Tensor[(1352, 2), uint32]) */;
    %822 = @func_2356() /* ty=(Tensor[(15, 2, 14), float32],) */;
    %823 = %821.2;
    %824 = %822.0;
    (%823, %824)
  };
  %825() /* ty=(Tensor[(1352, 2), uint32], Tensor[(15, 2, 14), float32]) */
}

def @func_6197(%var_6194: Tensor[(4, 2, 13), int8], %var_6195: Tensor[(4, 2, 13), int8], %var_6196: Tensor[(13, 14), float32]) -> (Tensor[(4, 2, 13), int8], Tensor[(2, 13, 7), float32], Tensor[(13, 14), float32], Tensor[(15, 2, 14), float32]) {
  %836 = fn (%var_6173: Tensor[(4, 2, 13), int8], %var_6174: Tensor[(4, 2, 13), int8], %var_6183: Tensor[(13, 14), float32]) -> (Tensor[(4, 2, 13), int8], Tensor[(2, 13, 7), float32], Tensor[(13, 14), float32], Tensor[(15, 2, 14), float32]) {
    %826 = cast(%var_6174, dtype="int8") /* ty=Tensor[(4, 2, 13), int8] */;
    %827 = shape_of(%var_6173, dtype="int32") /* ty=Tensor[(3), int32] */;
    %828 = cast(%var_6173, dtype="int8") /* ty=Tensor[(4, 2, 13), int8] */;
    %829 = dyn.reshape(%826, %827, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %830 = cast(%var_6183, dtype="float32") /* ty=Tensor[(13, 14), float32] */;
    %831 = reshape(%830, newshape=[2, 13, 7]) /* ty=Tensor[(2, 13, 7), float32] */;
    %832 = @func_3472(%831) /* ty=(Tensor[(2, 13, 7), float32],) */;
    %833 = maximum(%828, %829) /* ty=Tensor[(4, 2, 13), int8] */;
    %834 = %832.0;
    %835 = @func_5760() /* ty=Tensor[(15, 2, 14), float32] */;
    (%833, %834, %var_6183, %835)
  };
  %836(%var_6194, %var_6195, %var_6196) /* ty=(Tensor[(4, 2, 13), int8], Tensor[(2, 13, 7), float32], Tensor[(13, 14), float32], Tensor[(15, 2, 14), float32]) */
}

def @func_7753() -> (Tensor[(2704), uint32],) {
  %837 = @func_3921() /* ty=Tensor[(2704), uint32] */;
  (%837,)
}

def @func_4945() -> (Tensor[(15, 2, 14), float64], Tensor[(2704), uint64], Tensor[(1, 2704), uint32]) {
  %843 = fn () -> (Tensor[(15, 2, 14), float64], Tensor[(2704), uint64], Tensor[(1, 2704), uint32]) {
    %838 = @func_934() /* ty=(Tensor[(15, 2, 14), float64],) */;
    %839 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 2704), uint32] */, dtype="uint32") /* ty=Tensor[(1, 2704), uint32] */;
    %840 = reshape(%839, newshape=[2704]) /* ty=Tensor[(2704), uint32] */;
    %841 = %838.0;
    %842 = @func_4266(%840) /* ty=Tensor[(2704), uint64] */;
    (%841, %842, meta[relay.Constant][38] /* ty=Tensor[(1, 2704), uint32] */)
  };
  %843() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(2704), uint64], Tensor[(1, 2704), uint32]) */
}

def @func_5135(%var_5133: Tensor[(4, 3, 15), bool]) -> (Tensor[(4, 3, 15), int64],) {
  @func_5132(%var_5133) /* ty=(Tensor[(4, 3, 15), int64],) */
}

def @func_6259(%var_6258: Tensor[(2704), uint32]) -> (Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(15, 2, 14), float32], Tensor[(2704), float64]) {
  %856 = fn (%var_6214: Tensor[(2704), uint32]) -> (Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(15, 2, 14), float32], Tensor[(2704), float64]) {
    %844 = cast(%var_6214, dtype="uint32") /* ty=Tensor[(2704), uint32] */;
    %845 = reshape(%844, newshape=[2704]) /* ty=Tensor[(2704), uint32] */;
    %846 = @func_1458(%845) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(7, 6, 4), bool], Tensor[(42, 4), int64], Tensor[(13, 13, 16), bool], Tensor[(4, 3, 15), bool], Tensor[(15, 2, 14), float64], Tensor[(2704), float32]) */;
    %847 = @func_2996() /* ty=(Tensor[(15, 2, 14), float32], Tensor[(4, 3, 15), bool]) */;
    %848 = cast(meta[relay.Constant][39] /* ty=Tensor[(2704), uint32] */, dtype="float64") /* ty=Tensor[(2704), float64] */;
    %849 = shape_of(%var_6214, dtype="int32") /* ty=Tensor[(1), int32] */;
    %850 = cast(%var_6214, dtype="float64") /* ty=Tensor[(2704), float64] */;
    %851 = dyn.reshape(%848, %849, newshape=[]) /* ty=Tensor[(?), float64] */;
    %852 = @func_4084() /* ty=Tensor[(15, 2, 14), float64] */;
    %853 = %846.4;
    %854 = %847.0;
    %855 = add(%850, %851) /* ty=Tensor[(2704), float64] */;
    (%852, %853, %854, %855)
  };
  %856(%var_6258) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(15, 2, 14), float32], Tensor[(2704), float64]) */
}

def @func_6764() -> (Tensor[(15, 2, 14), float64],) {
  @func_6762() /* ty=(Tensor[(15, 2, 14), float64],) */
}

def @func_965() -> (Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64]) {
  %857 = @func_934() /* ty=(Tensor[(15, 2, 14), float64],) */;
  %858 = %857.0;
  %859 = @func_750() /* ty=Tensor[(15, 2, 14), float64] */;
  (%858, %859)
}

def @func_3872() -> (Tensor[(13, 13, 16), bool], Tensor[(15, 2, 14), float64]) {
  %860 = @func_3209() /* ty=(Tensor[(13, 13, 16), bool],) */;
  %861 = %860.0;
  %862 = @func_1576() /* ty=Tensor[(15, 2, 14), float64] */;
  (%861, %862)
}

def @func_3972(%var_3937: Tensor[(1890), float64], %var_3949: Tensor[(13, 13, 16), bool]) -> (Tensor[(1890), bool], Tensor[(15, 2, 14), float64], Tensor[(13, 13, 16), float32]) {
  %863 = @func_1999() /* ty=(Tensor[(15, 2, 14), bool], Tensor[(9, 14, 15), bool], Tensor[(1890), float64]) */;
  %864 = %863.2;
  %865 = cast(%var_3937, dtype="bool") /* ty=Tensor[(1890), bool] */;
  %866 = shape_of(%864, dtype="int32") /* ty=Tensor[(1), int32] */;
  %867 = cast(%864, dtype="bool") /* ty=Tensor[(1890), bool] */;
  %868 = dyn.reshape(%865, %866, newshape=[]) /* ty=Tensor[(?), bool] */;
  %869 = @func_3209() /* ty=(Tensor[(13, 13, 16), bool],) */;
  %870 = %869.0;
  %871 = cast(%var_3949, dtype="float32") /* ty=Tensor[(13, 13, 16), float32] */;
  %872 = shape_of(%870, dtype="int32") /* ty=Tensor[(3), int32] */;
  %873 = cast(%870, dtype="float32") /* ty=Tensor[(13, 13, 16), float32] */;
  %874 = dyn.reshape(%871, %872, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %875 = divide(%873, %874) /* ty=Tensor[(13, 13, 16), float32] */;
  %876 = cast(%870, dtype="float32") /* ty=Tensor[(13, 13, 16), float32] */;
  %877 = shape_of(%875, dtype="int32") /* ty=Tensor[(3), int32] */;
  %878 = cast(%875, dtype="float32") /* ty=Tensor[(13, 13, 16), float32] */;
  %879 = dyn.reshape(%876, %877, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %880 = logical_and(%867, %868) /* ty=Tensor[(1890), bool] */;
  %881 = @func_886() /* ty=Tensor[(15, 2, 14), float64] */;
  %882 = power(%878, %879) /* ty=Tensor[(13, 13, 16), float32] */;
  (%880, %881, %882)
}

def @func_7406() -> Tensor[(15, 2, 14), float64] {
  %883 = @func_5445() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(12, 10, 14), bool]) */;
  %883.0
}

def @func_2631() -> (Tensor[(15, 2, 14), float64],) {
  %885 = fn () -> (Tensor[(15, 2, 14), float64],) {
    %884 = @func_886() /* ty=Tensor[(15, 2, 14), float64] */;
    (%884,)
  };
  %885() /* ty=(Tensor[(15, 2, 14), float64],) */
}

def @func_4221(%var_4219: Tensor[(8, 1, 14), int64]) -> (Tensor[(8, 8, 14), bool], Tensor[(15, 2, 14), float64], Tensor[(16, 7, 16), bool]) {
  @func_4218(%var_4219) /* ty=(Tensor[(8, 8, 14), bool], Tensor[(15, 2, 14), float64], Tensor[(16, 7, 16), bool]) */
}

def @func_1240(%var_1232: Tensor[(450), int32]) -> (Tensor[(4, 3, 15), float32], Tensor[(5, 10, 9), bool], Tensor[(450), int32]) {
  %886 = @func_1116() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32], Tensor[(15, 2, 14), float64]) */;
  %887 = %886.2;
  %888 = cast(%887, dtype="float64") /* ty=Tensor[(4, 3, 15), float64] */;
  %889 = exp(%888) /* ty=Tensor[(4, 3, 15), float64] */;
  %890 = cast(%889, dtype="float32") /* ty=Tensor[(4, 3, 15), float32] */;
  %891 = cast(%var_1232, dtype="int32") /* ty=Tensor[(450), int32] */;
  %892 = cast(%var_1232, dtype="int32") /* ty=Tensor[(450), int32] */;
  %893 = reshape(%891, newshape=[5, 10, 9]) /* ty=Tensor[(5, 10, 9), int32] */;
  %894 = reshape(%892, newshape=[5, 10, 9]) /* ty=Tensor[(5, 10, 9), int32] */;
  %895 = @func_65(%893, %894) /* ty=(Tensor[(5, 10, 9), int32], Tensor[(5, 10, 9), uint32], Tensor[(5, 10, 9), bool]) */;
  %896 = asin(%890) /* ty=Tensor[(4, 3, 15), float32] */;
  %897 = %895.2;
  (%896, %897, %var_1232)
}

def @func_6011() -> Tensor[(15, 2, 14), float64] {
  %898 = fn () -> Tensor[(15, 2, 14), float64] {
    @func_886() /* ty=Tensor[(15, 2, 14), float64] */
  };
  %898() /* ty=Tensor[(15, 2, 14), float64] */
}

def @func_7484() -> (Tensor[(15, 2, 14), float64], Tensor[(13, 13, 16), bool]) {
  @func_7482() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(13, 13, 16), bool]) */
}

def @func_8444() -> (Tensor[(10, 11, 11), float32], Tensor[(4, 14, 11), float64]) {
  %899 = cast(meta[relay.Constant][40] /* ty=Tensor[(10, 11, 11), float32] */, dtype="float32") /* ty=Tensor[(10, 11, 11), float32] */;
  %900 = @func_4967() /* ty=(Tensor[(4, 14, 11), float64],) */;
  %901 = sin(%899) /* ty=Tensor[(10, 11, 11), float32] */;
  %902 = %900.0;
  (%901, %902)
}

def @func_7039(%var_7037: Tensor[(8, 16, 11), float32]) -> (Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), float32], Tensor[(1408), float32], Tensor[(15, 2, 14), float64], Tensor[(8, 16, 11), int64], Tensor[(15, 2, 14), float64]) {
  @func_7036(%var_7037) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), float32], Tensor[(1408), float32], Tensor[(15, 2, 14), float64], Tensor[(8, 16, 11), int64], Tensor[(15, 2, 14), float64]) */
}

def @func_3399(%var_3397: Tensor[(5, 297), int64]) -> (Tensor[(15, 2, 14), float64], Tensor[(5, 297), int64], Tensor[(2704), int64], Tensor[(15, 2, 14), float64], Tensor[(1352, 2), uint32]) {
  @func_3396(%var_3397) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(5, 297), int64], Tensor[(2704), int64], Tensor[(15, 2, 14), float64], Tensor[(1352, 2), uint32]) */
}

def @func_2390() -> (Tensor[(4, 3, 15), bool],) {
  @func_2388() /* ty=(Tensor[(4, 3, 15), bool],) */
}

def @func_3922() -> Tensor[(2704), uint32] {
  %904 = fn () -> Tensor[(2704), uint32] {
    %903 = @func_2721() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(9, 14, 15), bool], Tensor[(5, 10, 9), int32], Tensor[(2704), uint32]) */;
    %903.3
  };
  %904() /* ty=Tensor[(2704), uint32] */
}

def @func_1737(%var_1735: Tensor[(9, 14, 15), float64], %var_1736: Tensor[(9, 14, 15), float64]) -> Tensor[(9, 14, 15), bool] {
  @func_1733(%var_1735, %var_1736) /* ty=Tensor[(9, 14, 15), bool] */
}

def @func_1918() -> (Tensor[(4, 3, 15), bool],) {
  @func_1916() /* ty=(Tensor[(4, 3, 15), bool],) */
}

def @func_4268(%var_4267: Tensor[(2704), uint32]) -> Tensor[(2704), uint64] {
  %911 = fn (%var_4260: Tensor[(2704), uint32]) -> Tensor[(2704), uint64] {
    %905 = @func_2039() /* ty=(Tensor[(4, 3, 15), bool], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32]) */;
    %906 = %905.2;
    %907 = cast(%var_4260, dtype="uint64") /* ty=Tensor[(2704), uint64] */;
    %908 = shape_of(%906, dtype="int32") /* ty=Tensor[(1), int32] */;
    %909 = cast(%906, dtype="uint64") /* ty=Tensor[(2704), uint64] */;
    %910 = dyn.reshape(%907, %908, newshape=[]) /* ty=Tensor[(?), uint64] */;
    bitwise_xor(%909, %910) /* ty=Tensor[(2704), uint64] */
  };
  %911(%var_4267) /* ty=Tensor[(2704), uint64] */
}

def @func_4715() -> Tensor[(15, 2, 14), float64] {
  %912 = fn () -> Tensor[(15, 2, 14), float64] {
    @func_1576() /* ty=Tensor[(15, 2, 14), float64] */
  };
  %912() /* ty=Tensor[(15, 2, 14), float64] */
}

def @func_3286() -> (Tensor[(15, 2, 14), float64],) {
  @func_3284() /* ty=(Tensor[(15, 2, 14), float64],) */
}

def @func_1673() -> (Tensor[(15, 2, 14), float64],) {
  %913 = @func_1116() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(4, 3, 15), bool], Tensor[(13, 13, 16), bool], Tensor[(2704), uint32], Tensor[(15, 2, 14), float64]) */;
  %914 = %913.1;
  %915 = cast(%914, dtype="float64") /* ty=Tensor[(15, 2, 14), float64] */;
  %916 = asinh(%915) /* ty=Tensor[(15, 2, 14), float64] */;
  (%916,)
}

def @func_7742() -> (Tensor[(1352, 2), bool], Tensor[(16, 7, 16), bool], Tensor[(1890), float64], Tensor[(12, 10, 14), bool]) {
  %917 = @func_6834() /* ty=(Tensor[(1352, 2), bool],) */;
  %918 = @func_1999() /* ty=(Tensor[(15, 2, 14), bool], Tensor[(9, 14, 15), bool], Tensor[(1890), float64]) */;
  %919 = @func_5445() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(12, 10, 14), bool]) */;
  %920 = %917.0;
  %921 = @func_4102() /* ty=Tensor[(16, 7, 16), bool] */;
  %922 = %918.2;
  %923 = %919.1;
  (%920, %921, %922, %923)
}

def @func_6400() -> (Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64]) {
  %930 = fn () -> (Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64]) {
    %924 = @func_3284() /* ty=(Tensor[(15, 2, 14), float64],) */;
    %925 = @func_3878() /* ty=(Tensor[(15, 2, 14), float64],) */;
    %926 = @func_3643() /* ty=(Tensor[(15, 2, 14), float64],) */;
    %927 = %924.0;
    %928 = %925.0;
    %929 = %926.0;
    (%927, %928, %929)
  };
  %930() /* ty=(Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64], Tensor[(15, 2, 14), float64]) */
}

def @func_6918() -> (Tensor[(4, 3, 15), float32],) {
  %935 = fn () -> (Tensor[(4, 3, 15), float32],) {
    %931 = @func_2388() /* ty=(Tensor[(4, 3, 15), bool],) */;
    %932 = %931.0;
    %933 = cast(%932, dtype="float32") /* ty=Tensor[(4, 3, 15), float32] */;
    %934 = log2(%933) /* ty=Tensor[(4, 3, 15), float32] */;
    (%934,)
  };
  %935() /* ty=(Tensor[(4, 3, 15), float32],) */
}

def @func_1916() -> (Tensor[(4, 3, 15), bool],) {
  %936 = @func_1876() /* ty=Tensor[(4, 3, 15), bool] */;
  %937 = cast(%936, dtype="int8") /* ty=Tensor[(4, 3, 15), int8] */;
  %938 = cast(%936, dtype="int8") /* ty=Tensor[(4, 3, 15), int8] */;
  %939 = reshape(%937, newshape=[4, 3, 15]) /* ty=Tensor[(4, 3, 15), int8] */;
  %940 = reshape(%938, newshape=[4, 3, 15]) /* ty=Tensor[(4, 3, 15), int8] */;
  %941 = @func_533(%939, %940) /* ty=Tensor[(4, 3, 15), bool] */;
  %942 = cast(%941, dtype="bool") /* ty=Tensor[(4, 3, 15), bool] */;
  %943 = shape_of(%936, dtype="int32") /* ty=Tensor[(3), int32] */;
  %944 = cast(%936, dtype="bool") /* ty=Tensor[(4, 3, 15), bool] */;
  %945 = dyn.reshape(%942, %943, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %946 = logical_or(%944, %945) /* ty=Tensor[(4, 3, 15), bool] */;
  (%946,)
}

def @func_5228() -> (Tensor[(15, 2, 14), float64],) {
  %948 = fn () -> (Tensor[(15, 2, 14), float64],) {
    %947 = @func_750() /* ty=Tensor[(15, 2, 14), float64] */;
    (%947,)
  };
  %948() /* ty=(Tensor[(15, 2, 14), float64],) */
}

def @func_5542() -> (Tensor[(4, 3, 15), bool], Tensor[(180), int8], Tensor[(13, 13, 16), bool], Tensor[(104, 26), bool]) {
  %949 = @func_1916() /* ty=(Tensor[(4, 3, 15), bool],) */;
  %950 = @func_3226() /* ty=(Tensor[(180), int8], Tensor[(4, 3, 15), bool]) */;
  %951 = cast(meta[relay.Constant][41] /* ty=Tensor[(104, 26), bool] */, dtype="bool") /* ty=Tensor[(104, 26), bool] */;
  %952 = reshape(%951, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), bool] */;
  %953 = @func_5093(%952) /* ty=(Tensor[(13, 13, 16), bool], Tensor[(7, 6, 4), float32]) */;
  %954 = %949.0;
  %955 = %950.0;
  %956 = %953.0;
  (%954, %955, %956, meta[relay.Constant][41] /* ty=Tensor[(104, 26), bool] */)
}

def @func_8228(%var_8227: Tensor[(4, 3, 15), bool]) -> Tensor[(4, 3, 15), bool] {
  %962 = fn (%var_8199: Tensor[(4, 3, 15), bool]) -> Tensor[(4, 3, 15), bool] {
    %957 = @func_5000() /* ty=Tensor[(4, 3, 15), bool] */;
    %958 = cast(%var_8199, dtype="bool") /* ty=Tensor[(4, 3, 15), bool] */;
    %959 = shape_of(%957, dtype="int32") /* ty=Tensor[(3), int32] */;
    %960 = cast(%957, dtype="bool") /* ty=Tensor[(4, 3, 15), bool] */;
    %961 = dyn.reshape(%958, %959, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%960, %961) /* ty=Tensor[(4, 3, 15), bool] */
  };
  %962(%var_8227) /* ty=Tensor[(4, 3, 15), bool] */
}

def @func_5016(%var_5008: Tensor[(8, 7, 7), float64]) -> (Tensor[(8, 7, 7), float64],) {
  %963 = cast(%var_5008, dtype="float64") /* ty=Tensor[(8, 7, 7), float64] */;
  %964 = cos(%963) /* ty=Tensor[(8, 7, 7), float64] */;
  (%964,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen443/build/output.py:3023: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen443/build/output.py", line 3028, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(36) tvmgen_default_fused_cast_bitwise_xor_kernel0(uint* __restrict__ T_bitwise_xor, uint* __restrict__ placeholder, ushort* __restrict__ placeholder1) {
  T_bitwise_xor[(((int)threadIdx.x))] = (placeholder[(0)] ^ ((uint)placeholder1[(((int)threadIdx.x))]));
}

extern "C" __global__ void __launch_bounds__(36) tvmgen_default_fused_cast_greater_equal_cast_log_kernel0(float* __restrict__ T_log, ushort* __restrict__ placeholder) {
  T_log[(((int)threadIdx.x))] = __logf(((float)(((bool)placeholder[(((int)threadIdx.x))]) <= (bool)1)));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

