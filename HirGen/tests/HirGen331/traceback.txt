==========mod==========
#[version = "0.0.5"]
def @func_7339() -> Tensor[(11, 8, 7), float64] {
  %0 = @func_7169() /* ty=(Tensor[(11, 8, 7), float64],) */;
  %0.0
}

def @func_5456() -> (Tensor[(2560), bool],) {
  %1 = @func_4920() /* ty=Tensor[(2560), bool] */;
  (%1,)
}

def @func_7371() -> Tensor[(40), float32] {
  %2 = @func_4401() /* ty=(Tensor[(9, 9, 7), float32], Tensor[(40), float32], Tensor[(2560), float64]) */;
  %2.1
}

def @func_4496() -> (Tensor[(2560), float64],) {
  %3 = @func_4401() /* ty=(Tensor[(9, 9, 7), float32], Tensor[(40), float32], Tensor[(2560), float64]) */;
  %4 = %3.2;
  (%4,)
}

def @func_7213() -> (Tensor[(11, 8, 7), float64],) {
  %5 = @func_7169() /* ty=(Tensor[(11, 8, 7), float64],) */;
  %6 = %5.0;
  (%6,)
}

def @func_162(%var_149: Tensor[(14, 5, 16), uint16]) -> (Tensor[(14, 5, 16), bool],) {
  %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(14, 5, 16), uint16] */, dtype="bool") /* ty=Tensor[(14, 5, 16), bool] */;
  %8 = shape_of(%var_149, dtype="int32") /* ty=Tensor[(3), int32] */;
  %9 = cast(%var_149, dtype="bool") /* ty=Tensor[(14, 5, 16), bool] */;
  %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %11 = equal(%9, %10) /* ty=Tensor[(14, 5, 16), bool] */;
  (%11,)
}

def @func_4827() -> (Tensor[(7, 8, 6), float64], Tensor[(2560), float64], Tensor[(14, 2, 11), int16], Tensor[(308), int16]) {
  %12 = @func_4496() /* ty=(Tensor[(2560), float64],) */;
  %13 = cast(meta[relay.Constant][1] /* ty=Tensor[(308), int16] */, dtype="int16") /* ty=Tensor[(308), int16] */;
  %14 = cast(meta[relay.Constant][1] /* ty=Tensor[(308), int16] */, dtype="int16") /* ty=Tensor[(308), int16] */;
  %15 = reshape(%13, newshape=[14, 2, 11]) /* ty=Tensor[(14, 2, 11), int16] */;
  %16 = reshape(%14, newshape=[14, 2, 11]) /* ty=Tensor[(14, 2, 11), int16] */;
  %17 = @func_4740(%15, %16) /* ty=(Tensor[(14, 2, 11), int16],) */;
  %18 = @func_4714() /* ty=Tensor[(7, 8, 6), float64] */;
  %19 = %12.0;
  %20 = %17.0;
  (%18, %19, %20, meta[relay.Constant][1] /* ty=Tensor[(308), int16] */)
}

def @func_6836(%var_6829: Tensor[(13, 11, 14), int32]) -> (Tensor[(13, 11, 14), int32],) {
  %21 = cast(%var_6829, dtype="int32") /* ty=Tensor[(13, 11, 14), int32] */;
  %22 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(13, 11, 14), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %23 = cast(meta[relay.Constant][2] /* ty=Tensor[(13, 11, 14), int32] */, dtype="int32") /* ty=Tensor[(13, 11, 14), int32] */;
  %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %25 = maximum(%23, %24) /* ty=Tensor[(13, 11, 14), int32] */;
  (%25,)
}

def @func_6098(%var_6072: Tensor[(7, 9, 12), float32], %var_6096: Tensor[(351, 3), bool]) -> (Tensor[(7, 9, 12), bool], Tensor[(7, 9, 12), float64], Tensor[(2560), float64], Tensor[(9, 13, 9), bool], Tensor[(351, 3), bool]) {
  %26 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 9, 12), float32] */, dtype="float32") /* ty=Tensor[(7, 9, 12), float32] */;
  %27 = shape_of(%var_6072, dtype="int32") /* ty=Tensor[(3), int32] */;
  %28 = cast(%var_6072, dtype="float32") /* ty=Tensor[(7, 9, 12), float32] */;
  %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %30 = mod(%28, %29) /* ty=Tensor[(7, 9, 12), float32] */;
  %31 = cast(%30, dtype="bool") /* ty=Tensor[(7, 9, 12), bool] */;
  %32 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(7, 9, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 9, 12), float32] */, dtype="bool") /* ty=Tensor[(7, 9, 12), bool] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %35 = cast(%var_6072, dtype="float64") /* ty=Tensor[(7, 9, 12), float64] */;
  %36 = @func_4827() /* ty=(Tensor[(7, 8, 6), float64], Tensor[(2560), float64], Tensor[(14, 2, 11), int16], Tensor[(308), int16]) */;
  %37 = cast(%var_6096, dtype="bool") /* ty=Tensor[(351, 3), bool] */;
  %38 = reshape(%37, newshape=[9, 13, 9]) /* ty=Tensor[(9, 13, 9), bool] */;
  %39 = equal(%33, %34) /* ty=Tensor[(7, 9, 12), bool] */;
  %40 = sinh(%35) /* ty=Tensor[(7, 9, 12), float64] */;
  %41 = %36.1;
  %42 = @func_2293(%38) /* ty=Tensor[(9, 13, 9), bool] */;
  (%39, %40, %41, %42, %var_6096)
}

def @func_6576(%var_6544: Tensor[(32), float64]) -> (Tensor[(336), float32], Tensor[(32), float64], Tensor[(2560), bool], Tensor[(2560), float32], Tensor[(2, 2, 10), bool], Tensor[(40), uint8]) {
  %43 = cast(%var_6544, dtype="float64") /* ty=Tensor[(32), float64] */;
  %44 = reshape(%43, newshape=[4, 8]) /* ty=Tensor[(4, 8), float64] */;
  %45 = @func_1061(%44) /* ty=(Tensor[(4, 8), float64], Tensor[(7, 8, 6), float64], Tensor[(336), float32]) */;
  %46 = @func_6069() /* ty=(Tensor[(2560), bool],) */;
  %47 = %46.0;
  %48 = cast(%47, dtype="float32") /* ty=Tensor[(2560), float32] */;
  %49 = cos(%48) /* ty=Tensor[(2560), float32] */;
  %50 = cast(%49, dtype="float32") /* ty=Tensor[(2560), float32] */;
  %51 = cast(meta[relay.Constant][4] /* ty=Tensor[(40), uint8] */, dtype="uint8") /* ty=Tensor[(40), uint8] */;
  %52 = reshape(%51, newshape=[2, 2, 10]) /* ty=Tensor[(2, 2, 10), uint8] */;
  %53 = @func_1943(%52) /* ty=(Tensor[(2, 2, 10), bool],) */;
  %54 = %45.2;
  %55 = @func_4851() /* ty=Tensor[(2560), bool] */;
  %56 = sin(%50) /* ty=Tensor[(2560), float32] */;
  %57 = %53.0;
  (%54, %var_6544, %55, %56, %57, meta[relay.Constant][4] /* ty=Tensor[(40), uint8] */)
}

def @func_7398(%var_7393: uint32) -> (Tensor[(9, 9, 7), float32], Tensor[(104), float64], uint32, Tensor[(104), float64]) {
  %58 = cast(%var_7393, dtype="uint32") /* ty=uint32 */;
  %59 = cast(meta[relay.Constant][5] /* ty=Tensor[(104), float64] */, dtype="float64") /* ty=Tensor[(104), float64] */;
  %60 = reshape(%58, newshape=[]) /* ty=uint32 */;
  %61 = reshape(%59, newshape=[104]) /* ty=Tensor[(104), float64] */;
  %62 = @func_5529(%60, %61) /* ty=(Tensor[(11, 8, 7), float64], Tensor[(13, 6, 13), bool], uint32, Tensor[(1014), uint32], Tensor[(2, 4, 13), float32], Tensor[(104), float64], Tensor[(1, 8, 7), float32]) */;
  %63 = @func_4929() /* ty=Tensor[(9, 9, 7), float32] */;
  %64 = %62.5;
  (%63, %64, %var_7393, meta[relay.Constant][5] /* ty=Tensor[(104), float64] */)
}

def @func_4929() -> Tensor[(9, 9, 7), float32] {
  %65 = @func_4401() /* ty=(Tensor[(9, 9, 7), float32], Tensor[(40), float32], Tensor[(2560), float64]) */;
  %65.0
}

def @func_5404() -> (Tensor[(2560), float32], Tensor[(3, 10, 2), int16], Tensor[(60), float32]) {
  %66 = @func_4496() /* ty=(Tensor[(2560), float64],) */;
  %67 = %66.0;
  %68 = cast(meta[relay.Constant][6] /* ty=Tensor[(2560), float64] */, dtype="float32") /* ty=Tensor[(2560), float32] */;
  %69 = shape_of(%67, dtype="int32") /* ty=Tensor[(1), int32] */;
  %70 = cast(%67, dtype="float32") /* ty=Tensor[(2560), float32] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?), float32] */;
  %72 = cast(meta[relay.Constant][7] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %73 = cast(meta[relay.Constant][7] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %74 = cast(meta[relay.Constant][7] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %75 = reshape(%72, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float32] */;
  %76 = reshape(%73, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float32] */;
  %77 = reshape(%74, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float32] */;
  %78 = @func_774(%75, %76, %77) /* ty=(Tensor[(3, 10, 2), int16], Tensor[(3, 10, 2), float64], Tensor[(14, 5, 16), bool], Tensor[(1120), uint16]) */;
  %79 = mod(%70, %71) /* ty=Tensor[(2560), float32] */;
  %80 = %78.0;
  (%79, %80, meta[relay.Constant][7] /* ty=Tensor[(60), float32] */)
}

def @func_4611(%var_4600: Tensor[(32, 5), float64]) -> Tensor[(32, 5), float32] {
  %81 = @func_4553() /* ty=(Tensor[(7, 8, 6), float64], Tensor[(32, 1), float64], Tensor[(5, 14, 4), float32]) */;
  %82 = %81.1;
  %83 = cast(%82, dtype="float64") /* ty=Tensor[(32, 1), float64] */;
  %84 = log2(%83) /* ty=Tensor[(32, 1), float64] */;
  %85 = cast(%84, dtype="uint16") /* ty=Tensor[(32, 1), uint16] */;
  %86 = cast(%var_4600, dtype="uint16") /* ty=Tensor[(32, 5), uint16] */;
  %87 = left_shift(%85, %86) /* ty=Tensor[(32, 5), uint16] */;
  %88 = cast(%87, dtype="float32") /* ty=Tensor[(32, 5), float32] */;
  %89 = cast(%84, dtype="float32") /* ty=Tensor[(32, 1), float32] */;
  power(%88, %89) /* ty=Tensor[(32, 5), float32] */
}

def @func_1865(%var_1848: Tensor[(10, 2, 12), float64], %var_1849: Tensor[(10, 2, 12), float64]) -> Tensor[(10, 2, 12), float64] {
  %90 = cast(%var_1849, dtype="float64") /* ty=Tensor[(10, 2, 12), float64] */;
  %91 = shape_of(%var_1848, dtype="int32") /* ty=Tensor[(3), int32] */;
  %92 = cast(%var_1848, dtype="float64") /* ty=Tensor[(10, 2, 12), float64] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%92, %93) /* ty=Tensor[(10, 2, 12), float64] */
}

def @func_4903() -> Tensor[(1, 8, 7), float64] {
  %94 = @func_4473() /* ty=(Tensor[(1, 8, 7), float32],) */;
  %95 = %94.0;
  %96 = cast(%95, dtype="float64") /* ty=Tensor[(1, 8, 7), float64] */;
  asin(%96) /* ty=Tensor[(1, 8, 7), float64] */
}

def @func_7169() -> (Tensor[(11, 8, 7), float64],) {
  %97 = @func_6130() /* ty=(Tensor[(11, 8, 7), float64],) */;
  %98 = %97.0;
  (%98,)
}

def @func_5285() -> (Tensor[(2560), bool],) {
  %99 = @func_4920() /* ty=Tensor[(2560), bool] */;
  (%99,)
}

def @func_4920() -> Tensor[(2560), bool] {
  @func_4851() /* ty=Tensor[(2560), bool] */
}

def @main(%var_7519: Tensor[(11, 12, 3), float64], %var_7520: Tensor[(11, 12, 3), float64]) -> (Tensor[(11, 12, 3), float64], Tensor[(11, 12, 3), float64]) {
  %100 = cast(%var_7520, dtype="float64") /* ty=Tensor[(11, 12, 3), float64] */;
  %101 = shape_of(%var_7519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %102 = cast(%var_7519, dtype="float64") /* ty=Tensor[(11, 12, 3), float64] */;
  %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %104 = cast(%var_7519, dtype="float64") /* ty=Tensor[(11, 12, 3), float64] */;
  %105 = divide(%102, %103) /* ty=Tensor[(11, 12, 3), float64] */;
  %106 = log2(%104) /* ty=Tensor[(11, 12, 3), float64] */;
  (%105, %106)
}

def @func_6130() -> (Tensor[(11, 8, 7), float64],) {
  %107 = @func_5059() /* ty=(Tensor[(11, 8, 7), float64],) */;
  %108 = %107.0;
  (%108,)
}

def @func_6222() -> Tensor[(2560), bool] {
  @func_4920() /* ty=Tensor[(2560), bool] */
}

def @func_7264(%var_7232: Tensor[(12, 3, 3), float64]) -> (Tensor[(12, 3, 3), uint64],) {
  %109 = cast(%var_7232, dtype="float64") /* ty=Tensor[(12, 3, 3), float64] */;
  %110 = sqrt(%109) /* ty=Tensor[(12, 3, 3), float64] */;
  %111 = cast(%var_7232, dtype="uint64") /* ty=Tensor[(12, 3, 3), uint64] */;
  %112 = shape_of(%110, dtype="int32") /* ty=Tensor[(3), int32] */;
  %113 = cast(%110, dtype="uint64") /* ty=Tensor[(12, 3, 3), uint64] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %115 = add(%113, %114) /* ty=Tensor[(12, 3, 3), uint64] */;
  (%115,)
}

def @func_1332(%var_1325: uint32, %var_1326: Tensor[(13, 6, 13), uint32]) -> (Tensor[(13, 6, 13), bool],) {
  %116 = cast(%var_1325, dtype="bool") /* ty=bool */;
  %117 = cast(%var_1326, dtype="bool") /* ty=Tensor[(13, 6, 13), bool] */;
  %118 = less_equal(%116, %117) /* ty=Tensor[(13, 6, 13), bool] */;
  (%118,)
}

def @func_7067(%var_7064: Tensor[(15, 4), float32]) -> (Tensor[(13, 6, 13), float32], Tensor[(14, 5, 16), bool], Tensor[(15, 4), float32]) {
  %119 = @func_6826() /* ty=(Tensor[(9, 9, 7), float32], Tensor[(13, 6, 13), bool], Tensor[(1014), float32]) */;
  %120 = %119.1;
  %121 = cast(meta[relay.Constant][8] /* ty=Tensor[(13, 6, 13), bool] */, dtype="uint64") /* ty=Tensor[(13, 6, 13), uint64] */;
  %122 = shape_of(%120, dtype="int32") /* ty=Tensor[(3), int32] */;
  %123 = cast(%120, dtype="uint64") /* ty=Tensor[(13, 6, 13), uint64] */;
  %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %125 = multiply(%123, %124) /* ty=Tensor[(13, 6, 13), uint64] */;
  %126 = cast(%125, dtype="float32") /* ty=Tensor[(13, 6, 13), float32] */;
  %127 = cast(%var_7064, dtype="float32") /* ty=Tensor[(15, 4), float32] */;
  %128 = cast(%var_7064, dtype="float32") /* ty=Tensor[(15, 4), float32] */;
  %129 = cast(%var_7064, dtype="float32") /* ty=Tensor[(15, 4), float32] */;
  %130 = reshape(%127, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float32] */;
  %131 = reshape(%128, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float32] */;
  %132 = reshape(%129, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float32] */;
  %133 = @func_774(%130, %131, %132) /* ty=(Tensor[(3, 10, 2), int16], Tensor[(3, 10, 2), float64], Tensor[(14, 5, 16), bool], Tensor[(1120), uint16]) */;
  %134 = asinh(%126) /* ty=Tensor[(13, 6, 13), float32] */;
  %135 = %133.2;
  (%134, %135, %var_7064)
}

def @func_4520(%var_4507: Tensor[(9, 9, 7), float32]) -> (Tensor[(9, 9, 7), int64], Tensor[(60), float32], Tensor[(6, 30), float32], Tensor[(60), float32]) {
  %136 = @func_4095() /* ty=(Tensor[(9, 9, 7), float32],) */;
  %137 = %136.0;
  %138 = cast(%var_4507, dtype="int64") /* ty=Tensor[(9, 9, 7), int64] */;
  %139 = shape_of(%137, dtype="int32") /* ty=Tensor[(3), int32] */;
  %140 = cast(%137, dtype="int64") /* ty=Tensor[(9, 9, 7), int64] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %142 = cast(meta[relay.Constant][9] /* ty=Tensor[(6, 30), float32] */, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
  %143 = cast(meta[relay.Constant][10] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %144 = reshape(%142, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %145 = reshape(%143, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %146 = @func_4316(%144, %145) /* ty=(Tensor[(9, 9, 7), float32], Tensor[(32), float64], Tensor[(180), float32], Tensor[(60), float32]) */;
  %147 = bitwise_and(%140, %141) /* ty=Tensor[(9, 9, 7), int64] */;
  %148 = %146.3;
  (%147, %148, meta[relay.Constant][9] /* ty=Tensor[(6, 30), float32] */, meta[relay.Constant][10] /* ty=Tensor[(60), float32] */)
}

def @func_3464(%var_3430: Tensor[(2, 4, 13), float64]) -> (Tensor[(14, 5, 16), bool], Tensor[(60), float32], Tensor[(2, 4, 13), float32], Tensor[(2, 13, 1), int32], int32, Tensor[(26), int32]) {
  %149 = cast(meta[relay.Constant][11] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %150 = cast(meta[relay.Constant][11] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %151 = cast(meta[relay.Constant][11] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %152 = reshape(%149, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float32] */;
  %153 = reshape(%150, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float32] */;
  %154 = reshape(%151, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float32] */;
  %155 = @func_774(%152, %153, %154) /* ty=(Tensor[(3, 10, 2), int16], Tensor[(3, 10, 2), float64], Tensor[(14, 5, 16), bool], Tensor[(1120), uint16]) */;
  %156 = cast(%var_3430, dtype="float64") /* ty=Tensor[(2, 4, 13), float64] */;
  %157 = asin(%156) /* ty=Tensor[(2, 4, 13), float64] */;
  %158 = cast(%var_3430, dtype="float32") /* ty=Tensor[(2, 4, 13), float32] */;
  %159 = shape_of(%157, dtype="int32") /* ty=Tensor[(3), int32] */;
  %160 = cast(%157, dtype="float32") /* ty=Tensor[(2, 4, 13), float32] */;
  %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %162 = cast(-1 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %163 = cast(meta[relay.Constant][12] /* ty=Tensor[(26), int32] */, dtype="int32") /* ty=Tensor[(26), int32] */;
  %164 = reshape(%162, newshape=[]) /* ty=int32 */;
  %165 = reshape(%163, newshape=[2, 13, 1]) /* ty=Tensor[(2, 13, 1), int32] */;
  %166 = @func_2203(%164, %165) /* ty=(Tensor[(2, 13, 1), int32],) */;
  %167 = %155.2;
  %168 = subtract(%160, %161) /* ty=Tensor[(2, 4, 13), float32] */;
  %169 = %166.0;
  (%167, meta[relay.Constant][11] /* ty=Tensor[(60), float32] */, %168, %169, -1 /* ty=int32 */, meta[relay.Constant][12] /* ty=Tensor[(26), int32] */)
}

def @func_6158() -> (Tensor[(2560), float64],) {
  %170 = @func_4496() /* ty=(Tensor[(2560), float64],) */;
  %171 = %170.0;
  (%171,)
}

def @func_4553() -> (Tensor[(7, 8, 6), float64], Tensor[(32, 1), float64], Tensor[(5, 14, 4), float32]) {
  %172 = cast(meta[relay.Constant][13] /* ty=Tensor[(32, 1), float64] */, dtype="float64") /* ty=Tensor[(32, 1), float64] */;
  %173 = reshape(%172, newshape=[4, 8]) /* ty=Tensor[(4, 8), float64] */;
  %174 = @func_1061(%173) /* ty=(Tensor[(4, 8), float64], Tensor[(7, 8, 6), float64], Tensor[(336), float32]) */;
  %175 = cast(meta[relay.Constant][14] /* ty=Tensor[(5, 14, 4), float64] */, dtype="float64") /* ty=Tensor[(5, 14, 4), float64] */;
  %176 = sin(%175) /* ty=Tensor[(5, 14, 4), float64] */;
  %177 = cast(%176, dtype="float32") /* ty=Tensor[(5, 14, 4), float32] */;
  %178 = %174.1;
  %179 = sqrt(%177) /* ty=Tensor[(5, 14, 4), float32] */;
  (%178, meta[relay.Constant][13] /* ty=Tensor[(32, 1), float64] */, %179)
}

def @func_5349() -> (Tensor[(?, 8, 7), float32],) {
  %180 = @func_4903() /* ty=Tensor[(1, 8, 7), float64] */;
  %181 = cast(%180, dtype="float32") /* ty=Tensor[(1, 8, 7), float32] */;
  %182 = sin(%181) /* ty=Tensor[(1, 8, 7), float32] */;
  %183 = cast(%182, dtype="float32") /* ty=Tensor[(1, 8, 7), float32] */;
  %184 = shape_of(%180, dtype="int32") /* ty=Tensor[(3), int32] */;
  %185 = cast(%180, dtype="float32") /* ty=Tensor[(1, 8, 7), float32] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %187 = power(%185, %186) /* ty=Tensor[(?, 8, 7), float32] */;
  (%187,)
}

def @func_6339(%var_6306: Tensor[(11, 5, 12), float64], %var_6307: Tensor[(11, 5, 12), float64]) -> (Tensor[(1, 8, 7), float32], Tensor[(11, 5, 12), float64], Tensor[(9, 9, 7), float32]) {
  %188 = @func_4473() /* ty=(Tensor[(1, 8, 7), float32],) */;
  %189 = cast(%var_6307, dtype="float64") /* ty=Tensor[(11, 5, 12), float64] */;
  %190 = shape_of(%var_6306, dtype="int32") /* ty=Tensor[(3), int32] */;
  %191 = cast(%var_6306, dtype="float64") /* ty=Tensor[(11, 5, 12), float64] */;
  %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %193 = divide(%191, %192) /* ty=Tensor[(11, 5, 12), float64] */;
  %194 = cast(%193, dtype="float64") /* ty=Tensor[(11, 5, 12), float64] */;
  %195 = %188.0;
  %196 = cos(%194) /* ty=Tensor[(11, 5, 12), float64] */;
  %197 = @func_4929() /* ty=Tensor[(9, 9, 7), float32] */;
  (%195, %196, %197)
}

def @func_6042(%var_5968: Tensor[(3, 10, 2), int16], %var_6008: Tensor[(11, 8, 7), float64], %var_6036: Tensor[(180), float32]) -> (Tensor[(3, 10, 2), int8], Tensor[(2560), bool], Tensor[(11, 8, 7), float64], Tensor[(1, 8, 7), float32], Tensor[(11, 8, 7), float64], Tensor[(60), float32], Tensor[(180), float32]) {
  %198 = @func_5404() /* ty=(Tensor[(2560), float32], Tensor[(3, 10, 2), int16], Tensor[(60), float32]) */;
  %199 = %198.1;
  %200 = cast(%var_5968, dtype="int8") /* ty=Tensor[(3, 10, 2), int8] */;
  %201 = shape_of(%199, dtype="int32") /* ty=Tensor[(3), int32] */;
  %202 = cast(%199, dtype="int8") /* ty=Tensor[(3, 10, 2), int8] */;
  %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %204 = @func_4473() /* ty=(Tensor[(1, 8, 7), float32],) */;
  %205 = @func_5059() /* ty=(Tensor[(11, 8, 7), float64],) */;
  %206 = %205.0;
  %207 = cast(%206, dtype="float64") /* ty=Tensor[(11, 8, 7), float64] */;
  %208 = log2(%207) /* ty=Tensor[(11, 8, 7), float64] */;
  %209 = cast(%var_6008, dtype="bool") /* ty=Tensor[(11, 8, 7), bool] */;
  %210 = shape_of(%208, dtype="int32") /* ty=Tensor[(3), int32] */;
  %211 = cast(%208, dtype="bool") /* ty=Tensor[(11, 8, 7), bool] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %213 = equal(%211, %212) /* ty=Tensor[(11, 8, 7), bool] */;
  %214 = cast(%213, dtype="float64") /* ty=Tensor[(11, 8, 7), float64] */;
  %215 = cast(%var_6036, dtype="float32") /* ty=Tensor[(180), float32] */;
  %216 = cast(%var_5968, dtype="float32") /* ty=Tensor[(3, 10, 2), float32] */;
  %217 = reshape(%215, newshape=[2, 10, 9]) /* ty=Tensor[(2, 10, 9), float32] */;
  %218 = reshape(%216, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %219 = @func_1246(%217, %218) /* ty=(Tensor[(2, 10, 9), float32], Tensor[(4, 8), float64], Tensor[(32), float64], Tensor[(60), float32], Tensor[(24, 14), float32]) */;
  %220 = logical_xor(%202, %203) /* ty=Tensor[(3, 10, 2), int8] */;
  %221 = @func_4851() /* ty=Tensor[(2560), bool] */;
  %222 = @func_5681() /* ty=Tensor[(11, 8, 7), float64] */;
  %223 = %204.0;
  %224 = cosh(%214) /* ty=Tensor[(11, 8, 7), float64] */;
  %225 = %219.3;
  (%220, %221, %222, %223, %224, %225, %var_6036)
}

def @func_4473() -> (Tensor[(1, 8, 7), float32],) {
  %226 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 8, 7), float32] */, dtype="float32") /* ty=Tensor[(1, 8, 7), float32] */;
  %227 = sigmoid(%226) /* ty=Tensor[(1, 8, 7), float32] */;
  (%227,)
}

def @func_5529(%var_5514: uint32, %var_5519: Tensor[(104), float64]) -> (Tensor[(11, 8, 7), float64], Tensor[(13, 6, 13), bool], uint32, Tensor[(1014), uint32], Tensor[(2, 4, 13), float32], Tensor[(104), float64], Tensor[(1, 8, 7), float32]) {
  %228 = @func_5059() /* ty=(Tensor[(11, 8, 7), float64],) */;
  %229 = cast(%var_5514, dtype="uint32") /* ty=uint32 */;
  %230 = cast(meta[relay.Constant][16] /* ty=Tensor[(1014), uint32] */, dtype="uint32") /* ty=Tensor[(1014), uint32] */;
  %231 = reshape(%229, newshape=[]) /* ty=uint32 */;
  %232 = reshape(%230, newshape=[13, 6, 13]) /* ty=Tensor[(13, 6, 13), uint32] */;
  %233 = @func_1332(%231, %232) /* ty=(Tensor[(13, 6, 13), bool],) */;
  %234 = cast(%var_5519, dtype="float64") /* ty=Tensor[(104), float64] */;
  %235 = reshape(%234, newshape=[2, 4, 13]) /* ty=Tensor[(2, 4, 13), float64] */;
  %236 = @func_3464(%235) /* ty=(Tensor[(14, 5, 16), bool], Tensor[(60), float32], Tensor[(2, 4, 13), float32], Tensor[(2, 13, 1), int32], int32, Tensor[(26), int32]) */;
  %237 = @func_4473() /* ty=(Tensor[(1, 8, 7), float32],) */;
  %238 = %228.0;
  %239 = %233.0;
  %240 = %236.2;
  %241 = %237.0;
  (%238, %239, %var_5514, meta[relay.Constant][16] /* ty=Tensor[(1014), uint32] */, %240, %var_5519, %241)
}

def @func_4584(%var_4578: Tensor[(32), float64]) -> (Tensor[(4, 8), float64], Tensor[(32), float64], Tensor[(1, 8, 7), float64]) {
  %242 = cast(%var_4578, dtype="float64") /* ty=Tensor[(32), float64] */;
  %243 = reshape(%242, newshape=[4, 8]) /* ty=Tensor[(4, 8), float64] */;
  %244 = @func_1061(%243) /* ty=(Tensor[(4, 8), float64], Tensor[(7, 8, 6), float64], Tensor[(336), float32]) */;
  %245 = @func_4473() /* ty=(Tensor[(1, 8, 7), float32],) */;
  %246 = %245.0;
  %247 = cast(%246, dtype="float64") /* ty=Tensor[(1, 8, 7), float64] */;
  %248 = %244.0;
  %249 = exp(%247) /* ty=Tensor[(1, 8, 7), float64] */;
  (%248, %var_4578, %249)
}

def @func_3653(%var_3599: Tensor[(14, 2, 13), float32], %var_3627: Tensor[(180), float32]) -> (Tensor[(10, 2, 12), float64], Tensor[(240), float64], Tensor[(14, 2, 13), int32], Tensor[(4, 8), float64], Tensor[(180), float32], Tensor[(60), float32]) {
  %250 = cast(meta[relay.Constant][17] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %251 = cast(meta[relay.Constant][17] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %252 = reshape(%250, newshape=[10, 2, 12]) /* ty=Tensor[(10, 2, 12), float64] */;
  %253 = reshape(%251, newshape=[10, 2, 12]) /* ty=Tensor[(10, 2, 12), float64] */;
  %254 = cast(%var_3599, dtype="float32") /* ty=Tensor[(14, 2, 13), float32] */;
  %255 = acos(%254) /* ty=Tensor[(14, 2, 13), float32] */;
  %256 = cast(%var_3599, dtype="int32") /* ty=Tensor[(14, 2, 13), int32] */;
  %257 = shape_of(%255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %258 = cast(%255, dtype="int32") /* ty=Tensor[(14, 2, 13), int32] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %260 = cast(%var_3627, dtype="float32") /* ty=Tensor[(180), float32] */;
  %261 = cast(meta[relay.Constant][18] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %262 = reshape(%260, newshape=[2, 10, 9]) /* ty=Tensor[(2, 10, 9), float32] */;
  %263 = reshape(%261, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %264 = @func_1246(%262, %263) /* ty=(Tensor[(2, 10, 9), float32], Tensor[(4, 8), float64], Tensor[(32), float64], Tensor[(60), float32], Tensor[(24, 14), float32]) */;
  %265 = @func_1865(%252, %253) /* ty=Tensor[(10, 2, 12), float64] */;
  %266 = left_shift(%258, %259) /* ty=Tensor[(14, 2, 13), int32] */;
  %267 = %264.1;
  (%265, meta[relay.Constant][17] /* ty=Tensor[(240), float64] */, %266, %267, %var_3627, meta[relay.Constant][18] /* ty=Tensor[(60), float32] */)
}

def @func_2388(%var_2372: Tensor[(10, 13, 8), float32]) -> (Tensor[(10, 13, 8), float32],) {
  %268 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 13, 8), float32] */, dtype="float32") /* ty=Tensor[(10, 13, 8), float32] */;
  %269 = shape_of(%var_2372, dtype="int32") /* ty=Tensor[(3), int32] */;
  %270 = cast(%var_2372, dtype="float32") /* ty=Tensor[(10, 13, 8), float32] */;
  %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %272 = divide(%270, %271) /* ty=Tensor[(10, 13, 8), float32] */;
  (%272,)
}

def @func_6894(%var_6863: Tensor[(2560), bool], %var_6874: Tensor[(616), float64], %var_6875: Tensor[(13, 33), float64]) -> (Tensor[(2560), bool], Tensor[(60), float32], Tensor[(616), float64], Tensor[(13, 33), float64], Tensor[(7, 8, 6), float32], Tensor[(336), float32]) {
  %273 = @func_4851() /* ty=Tensor[(2560), bool] */;
  %274 = cast(%var_6863, dtype="bool") /* ty=Tensor[(2560), bool] */;
  %275 = shape_of(%273, dtype="int32") /* ty=Tensor[(1), int32] */;
  %276 = cast(%273, dtype="bool") /* ty=Tensor[(2560), bool] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?), bool] */;
  %278 = cast(%var_6874, dtype="float64") /* ty=Tensor[(616), float64] */;
  %279 = cast(%var_6875, dtype="float64") /* ty=Tensor[(13, 33), float64] */;
  %280 = reshape(%278, newshape=[11, 8, 7]) /* ty=Tensor[(11, 8, 7), float64] */;
  %281 = reshape(%279, newshape=[13, 33]) /* ty=Tensor[(13, 33), float64] */;
  %282 = @func_6767(%280, %281) /* ty=(Tensor[(11, 8, 7), float64], Tensor[(11, 8, 7), float32], Tensor[(11, 8, 7), float32], Tensor[(60), float32], Tensor[(11, 8, 7), float64], Tensor[(13, 33), float64]) */;
  %283 = cast(meta[relay.Constant][20] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %284 = reshape(%283, newshape=[7, 8, 6]) /* ty=Tensor[(7, 8, 6), float32] */;
  %285 = @func_841(%284) /* ty=(Tensor[(7, 8, 6), float32], Tensor[(7, 8, 6), float64]) */;
  %286 = less_equal(%276, %277) /* ty=Tensor[(2560), bool] */;
  %287 = %282.3;
  %288 = %285.0;
  (%286, %287, %var_6874, %var_6875, %288, meta[relay.Constant][20] /* ty=Tensor[(336), float32] */)
}

def @func_6494(%var_6481: Tensor[(1, 364), float32], %var_6482: Tensor[(180), float32]) -> (Tensor[(308), int16], Tensor[(240), float64], Tensor[(1, 364), float32], Tensor[(180), float32]) {
  %289 = @func_4827() /* ty=(Tensor[(7, 8, 6), float64], Tensor[(2560), float64], Tensor[(14, 2, 11), int16], Tensor[(308), int16]) */;
  %290 = cast(%var_6481, dtype="float32") /* ty=Tensor[(1, 364), float32] */;
  %291 = cast(%var_6482, dtype="float32") /* ty=Tensor[(180), float32] */;
  %292 = reshape(%290, newshape=[14, 2, 13]) /* ty=Tensor[(14, 2, 13), float32] */;
  %293 = reshape(%291, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %294 = @func_3653(%292, %293) /* ty=(Tensor[(10, 2, 12), float64], Tensor[(240), float64], Tensor[(14, 2, 13), int32], Tensor[(4, 8), float64], Tensor[(180), float32], Tensor[(60), float32]) */;
  %295 = %289.3;
  %296 = %294.1;
  (%295, %296, %var_6481, %var_6482)
}

def @func_5059() -> (Tensor[(11, 8, 7), float64],) {
  %297 = @func_4903() /* ty=Tensor[(1, 8, 7), float64] */;
  %298 = cast(%297, dtype="float64") /* ty=Tensor[(1, 8, 7), float64] */;
  %299 = cast(meta[relay.Constant][21] /* ty=Tensor[(11, 8, 7), float64] */, dtype="float64") /* ty=Tensor[(11, 8, 7), float64] */;
  %300 = divide(%298, %299) /* ty=Tensor[(11, 8, 7), float64] */;
  (%300,)
}

def @func_7466(%var_7440: Tensor[(40), float32], %var_7448: Tensor[(364), float32], %var_7449: Tensor[(180), float32]) -> (Tensor[(60), float32], Tensor[(40), float32], Tensor[(60), float32], Tensor[(364), float32], Tensor[(180), float32], Tensor[(7, 8, 6), float32]) {
  %301 = cast(%var_7440, dtype="float32") /* ty=Tensor[(40), float32] */;
  %302 = reshape(%301, newshape=[5, 8, 1]) /* ty=Tensor[(5, 8, 1), float32] */;
  %303 = @func_4352(%302) /* ty=(Tensor[(5, 8, 1), float32], Tensor[(60), float32], Tensor[(2560), float32]) */;
  %304 = cast(%var_7448, dtype="float32") /* ty=Tensor[(364), float32] */;
  %305 = cast(%var_7449, dtype="float32") /* ty=Tensor[(180), float32] */;
  %306 = reshape(%304, newshape=[14, 2, 13]) /* ty=Tensor[(14, 2, 13), float32] */;
  %307 = reshape(%305, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %308 = @func_3653(%306, %307) /* ty=(Tensor[(10, 2, 12), float64], Tensor[(240), float64], Tensor[(14, 2, 13), int32], Tensor[(4, 8), float64], Tensor[(180), float32], Tensor[(60), float32]) */;
  %309 = @func_4553() /* ty=(Tensor[(7, 8, 6), float64], Tensor[(32, 1), float64], Tensor[(5, 14, 4), float32]) */;
  %310 = %309.0;
  %311 = cast(%310, dtype="float32") /* ty=Tensor[(7, 8, 6), float32] */;
  %312 = %303.1;
  %313 = %308.5;
  %314 = tan(%311) /* ty=Tensor[(7, 8, 6), float32] */;
  (%312, %var_7440, %313, %var_7448, %var_7449, %314)
}

def @func_1061(%var_1047: Tensor[(4, 8), float64]) -> (Tensor[(4, 8), float64], Tensor[(7, 8, 6), float64], Tensor[(336), float32]) {
  %315 = cast(%var_1047, dtype="float64") /* ty=Tensor[(4, 8), float64] */;
  %316 = cast(meta[relay.Constant][22] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %317 = reshape(%316, newshape=[7, 8, 6]) /* ty=Tensor[(7, 8, 6), float32] */;
  %318 = @func_841(%317) /* ty=(Tensor[(7, 8, 6), float32], Tensor[(7, 8, 6), float64]) */;
  %319 = sin(%315) /* ty=Tensor[(4, 8), float64] */;
  %320 = %318.1;
  (%319, %320, meta[relay.Constant][22] /* ty=Tensor[(336), float32] */)
}

def @func_7018(%var_6992: Tensor[(660), float64], %var_7008: Tensor[(429), float64], %var_7015: Tensor[(240), float64]) -> (Tensor[(336), float32], Tensor[(11, 8, 7), float64], Tensor[(13, 33), float64], Tensor[(32, 80), bool], Tensor[(11, 8, 7), float32], Tensor[(11, 5, 12), float64], Tensor[(660), float64], Tensor[(3, 10, 2), int16], Tensor[(429), int8], Tensor[(240), float64], Tensor[(55), float64], Tensor[(240), float64]) {
  %321 = @func_6927() /* ty=(Tensor[(32, 1), float64], Tensor[(9, 9, 7), float32], Tensor[(1, 60), float32], Tensor[(336), float32]) */;
  %322 = @func_5059() /* ty=(Tensor[(11, 8, 7), float64],) */;
  %323 = cast(meta[relay.Constant][23] /* ty=Tensor[(32, 80), bool] */, dtype="bool") /* ty=Tensor[(32, 80), bool] */;
  %324 = %322.0;
  %325 = cast(%324, dtype="float64") /* ty=Tensor[(11, 8, 7), float64] */;
  %326 = cast(meta[relay.Constant][24] /* ty=Tensor[(429), float64] */, dtype="float64") /* ty=Tensor[(429), float64] */;
  %327 = reshape(%323, newshape=[2560]) /* ty=Tensor[(2560), bool] */;
  %328 = reshape(%325, newshape=[616]) /* ty=Tensor[(616), float64] */;
  %329 = reshape(%326, newshape=[13, 33]) /* ty=Tensor[(13, 33), float64] */;
  %330 = @func_6894(%327, %328, %329) /* ty=(Tensor[(2560), bool], Tensor[(60), float32], Tensor[(616), float64], Tensor[(13, 33), float64], Tensor[(7, 8, 6), float32], Tensor[(336), float32]) */;
  %331 = cast(%324, dtype="float64") /* ty=Tensor[(11, 8, 7), float64] */;
  %332 = cast(meta[relay.Constant][24] /* ty=Tensor[(429), float64] */, dtype="float64") /* ty=Tensor[(429), float64] */;
  %333 = reshape(%331, newshape=[11, 8, 7]) /* ty=Tensor[(11, 8, 7), float64] */;
  %334 = reshape(%332, newshape=[13, 33]) /* ty=Tensor[(13, 33), float64] */;
  %335 = @func_6767(%333, %334) /* ty=(Tensor[(11, 8, 7), float64], Tensor[(11, 8, 7), float32], Tensor[(11, 8, 7), float32], Tensor[(60), float32], Tensor[(11, 8, 7), float64], Tensor[(13, 33), float64]) */;
  %336 = cast(%var_6992, dtype="float64") /* ty=Tensor[(660), float64] */;
  %337 = cast(%var_6992, dtype="float64") /* ty=Tensor[(660), float64] */;
  %338 = reshape(%336, newshape=[11, 5, 12]) /* ty=Tensor[(11, 5, 12), float64] */;
  %339 = reshape(%337, newshape=[11, 5, 12]) /* ty=Tensor[(11, 5, 12), float64] */;
  %340 = @func_6339(%338, %339) /* ty=(Tensor[(1, 8, 7), float32], Tensor[(11, 5, 12), float64], Tensor[(9, 9, 7), float32]) */;
  %341 = @func_5404() /* ty=(Tensor[(2560), float32], Tensor[(3, 10, 2), int16], Tensor[(60), float32]) */;
  %342 = cast(meta[relay.Constant][24] /* ty=Tensor[(429), float64] */, dtype="float64") /* ty=Tensor[(429), float64] */;
  %343 = log10(%342) /* ty=Tensor[(429), float64] */;
  %344 = cast(%var_7008, dtype="int8") /* ty=Tensor[(429), int8] */;
  %345 = shape_of(%343, dtype="int32") /* ty=Tensor[(1), int32] */;
  %346 = cast(%343, dtype="int8") /* ty=Tensor[(429), int8] */;
  %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?), int8] */;
  %348 = cast(meta[relay.Constant][25] /* ty=Tensor[(55), float64] */, dtype="float64") /* ty=Tensor[(55), float64] */;
  %349 = cast(%var_7015, dtype="float64") /* ty=Tensor[(240), float64] */;
  %350 = cast(meta[relay.Constant][23] /* ty=Tensor[(32, 80), bool] */, dtype="float32") /* ty=Tensor[(32, 80), float32] */;
  %351 = reshape(%348, newshape=[5, 1, 11]) /* ty=Tensor[(5, 1, 11), float64] */;
  %352 = reshape(%349, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %353 = reshape(%350, newshape=[2560]) /* ty=Tensor[(2560), float32] */;
  %354 = @func_2473(%351, %352, %353) /* ty=(uint32, Tensor[(1014), uint32], Tensor[(13, 6, 13), bool], Tensor[(10, 13, 8), float32], Tensor[(40, 26), float32], Tensor[(5, ?, 11), float32], Tensor[(5, ?, 11), bool], Tensor[(13, 6, 13), float64], Tensor[(10, 2, 12), float64], Tensor[(240), float64], Tensor[(336), float32], Tensor[(2560), float32]) */;
  %355 = %321.3;
  %356 = %330.3;
  %357 = %335.1;
  %358 = %340.1;
  %359 = %341.1;
  %360 = multiply(%346, %347) /* ty=Tensor[(429), int8] */;
  %361 = %354.9;
  (%355, %324, %356, meta[relay.Constant][23] /* ty=Tensor[(32, 80), bool] */, %357, %358, %var_6992, %359, %360, %361, meta[relay.Constant][25] /* ty=Tensor[(55), float64] */, %var_7015)
}

def @func_6455() -> (Tensor[(7, 8, 6), float64],) {
  %362 = @func_4553() /* ty=(Tensor[(7, 8, 6), float64], Tensor[(32, 1), float64], Tensor[(5, 14, 4), float32]) */;
  %363 = %362.0;
  (%363,)
}

def @func_1129(%var_1097: Tensor[(32), float64], %var_1102: Tensor[(60), float32], %var_1118: Tensor[(1, 336), float32]) -> (Tensor[(1, 9, 1), float64], Tensor[(4, 8), float64], Tensor[(1120), uint16], Tensor[(60), float32], Tensor[(14, 5, 16), bool], Tensor[(1, 9, 32), uint32], Tensor[(7, 8, 6), float32], Tensor[(8, 336), bool]) {
  %364 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 9, 1), float64] */, dtype="float64") /* ty=Tensor[(1, 9, 1), float64] */;
  %365 = cast(%var_1097, dtype="float64") /* ty=Tensor[(32), float64] */;
  %366 = reshape(%365, newshape=[4, 8]) /* ty=Tensor[(4, 8), float64] */;
  %367 = @func_1061(%366) /* ty=(Tensor[(4, 8), float64], Tensor[(7, 8, 6), float64], Tensor[(336), float32]) */;
  %368 = cast(%var_1102, dtype="float32") /* ty=Tensor[(60), float32] */;
  %369 = cast(%var_1102, dtype="float32") /* ty=Tensor[(60), float32] */;
  %370 = cast(%var_1102, dtype="float32") /* ty=Tensor[(60), float32] */;
  %371 = reshape(%368, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float32] */;
  %372 = reshape(%369, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float32] */;
  %373 = reshape(%370, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float32] */;
  %374 = @func_774(%371, %372, %373) /* ty=(Tensor[(3, 10, 2), int16], Tensor[(3, 10, 2), float64], Tensor[(14, 5, 16), bool], Tensor[(1120), uint16]) */;
  %375 = %374.3;
  %376 = cast(%375, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
  %377 = reshape(%376, newshape=[14, 5, 16]) /* ty=Tensor[(14, 5, 16), uint16] */;
  %378 = @func_162(%377) /* ty=(Tensor[(14, 5, 16), bool],) */;
  %379 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 9, 1), float64] */, dtype="uint32") /* ty=Tensor[(1, 9, 1), uint32] */;
  %380 = cast(%var_1097, dtype="uint32") /* ty=Tensor[(32), uint32] */;
  %381 = cast(%var_1118, dtype="float32") /* ty=Tensor[(1, 336), float32] */;
  %382 = reshape(%381, newshape=[7, 8, 6]) /* ty=Tensor[(7, 8, 6), float32] */;
  %383 = @func_841(%382) /* ty=(Tensor[(7, 8, 6), float32], Tensor[(7, 8, 6), float64]) */;
  %384 = cast(%var_1118, dtype="bool") /* ty=Tensor[(1, 336), bool] */;
  %385 = cast(meta[relay.Constant][27] /* ty=Tensor[(8, 336), float32] */, dtype="bool") /* ty=Tensor[(8, 336), bool] */;
  %386 = sigmoid(%364) /* ty=Tensor[(1, 9, 1), float64] */;
  %387 = %367.0;
  %388 = %378.0;
  %389 = minimum(%379, %380) /* ty=Tensor[(1, 9, 32), uint32] */;
  %390 = %383.0;
  %391 = less_equal(%384, %385) /* ty=Tensor[(8, 336), bool] */;
  (%386, %387, %375, %var_1102, %388, %389, %390, %391)
}

def @func_5681() -> Tensor[(11, 8, 7), float64] {
  %392 = @func_5059() /* ty=(Tensor[(11, 8, 7), float64],) */;
  %392.0
}

def @func_1825(%var_1758: Tensor[(3, 15, 8), uint64], %var_1759: Tensor[(3, 15, 8), uint64], %var_1819: Tensor[(1120), uint16]) -> (Tensor[(3, 15, 8), uint64], Tensor[(3, 15, 8), bool], Tensor[(3, 15, 8), float32], Tensor[(14, 5, 16), bool], Tensor[(1120), uint16]) {
  %393 = cast(%var_1759, dtype="uint64") /* ty=Tensor[(3, 15, 8), uint64] */;
  %394 = shape_of(%var_1758, dtype="int32") /* ty=Tensor[(3), int32] */;
  %395 = cast(%var_1758, dtype="uint64") /* ty=Tensor[(3, 15, 8), uint64] */;
  %396 = dyn.reshape(%393, %394, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %397 = cast(%var_1759, dtype="float64") /* ty=Tensor[(3, 15, 8), float64] */;
  %398 = log10(%397) /* ty=Tensor[(3, 15, 8), float64] */;
  %399 = cast(%398, dtype="bool") /* ty=Tensor[(3, 15, 8), bool] */;
  %400 = shape_of(%var_1759, dtype="int32") /* ty=Tensor[(3), int32] */;
  %401 = cast(%var_1759, dtype="bool") /* ty=Tensor[(3, 15, 8), bool] */;
  %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %403 = cast(%398, dtype="float32") /* ty=Tensor[(3, 15, 8), float32] */;
  %404 = cast(%var_1819, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
  %405 = reshape(%404, newshape=[14, 5, 16]) /* ty=Tensor[(14, 5, 16), uint16] */;
  %406 = @func_162(%405) /* ty=(Tensor[(14, 5, 16), bool],) */;
  %407 = logical_xor(%395, %396) /* ty=Tensor[(3, 15, 8), uint64] */;
  %408 = logical_or(%401, %402) /* ty=Tensor[(3, 15, 8), bool] */;
  %409 = cos(%403) /* ty=Tensor[(3, 15, 8), float32] */;
  %410 = %406.0;
  (%407, %408, %409, %410, %var_1819)
}

def @func_841(%var_796: Tensor[(7, 8, 6), float32]) -> (Tensor[(7, 8, 6), float32], Tensor[(7, 8, 6), float64]) {
  %411 = cast(%var_796, dtype="float32") /* ty=Tensor[(7, 8, 6), float32] */;
  %412 = cast(%var_796, dtype="float64") /* ty=Tensor[(7, 8, 6), float64] */;
  %413 = rsqrt(%411) /* ty=Tensor[(7, 8, 6), float32] */;
  %414 = sigmoid(%412) /* ty=Tensor[(7, 8, 6), float64] */;
  (%413, %414)
}

def @func_774(%var_740: Tensor[(3, 10, 2), float32], %var_741: Tensor[(3, 10, 2), float32], %var_755: Tensor[(3, 10, 2), float32]) -> (Tensor[(3, 10, 2), int16], Tensor[(3, 10, 2), float64], Tensor[(14, 5, 16), bool], Tensor[(1120), uint16]) {
  %415 = cast(%var_741, dtype="float32") /* ty=Tensor[(3, 10, 2), float32] */;
  %416 = shape_of(%var_740, dtype="int32") /* ty=Tensor[(3), int32] */;
  %417 = cast(%var_740, dtype="float32") /* ty=Tensor[(3, 10, 2), float32] */;
  %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %419 = multiply(%417, %418) /* ty=Tensor[(3, 10, 2), float32] */;
  %420 = cast(%var_755, dtype="int16") /* ty=Tensor[(3, 10, 2), int16] */;
  %421 = shape_of(%419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(%419, dtype="int16") /* ty=Tensor[(3, 10, 2), int16] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %424 = cast(%var_740, dtype="float64") /* ty=Tensor[(3, 10, 2), float64] */;
  %425 = cast(meta[relay.Constant][28] /* ty=Tensor[(1120), uint16] */, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
  %426 = reshape(%425, newshape=[14, 5, 16]) /* ty=Tensor[(14, 5, 16), uint16] */;
  %427 = @func_162(%426) /* ty=(Tensor[(14, 5, 16), bool],) */;
  %428 = bitwise_or(%422, %423) /* ty=Tensor[(3, 10, 2), int16] */;
  %429 = asin(%424) /* ty=Tensor[(3, 10, 2), float64] */;
  %430 = %427.0;
  (%428, %429, %430, meta[relay.Constant][28] /* ty=Tensor[(1120), uint16] */)
}

def @func_4714() -> Tensor[(7, 8, 6), float64] {
  %431 = @func_4553() /* ty=(Tensor[(7, 8, 6), float64], Tensor[(32, 1), float64], Tensor[(5, 14, 4), float32]) */;
  %431.0
}

def @func_4155(%var_4146: uint64, %var_4147: Tensor[(12, 11, 2), uint64]) -> (Tensor[(12, 11, 2), uint64], Tensor[(12, 11, 2), float64]) {
  %432 = cast(%var_4146, dtype="uint64") /* ty=uint64 */;
  %433 = cast(%var_4147, dtype="uint64") /* ty=Tensor[(12, 11, 2), uint64] */;
  %434 = cast(%var_4147, dtype="float64") /* ty=Tensor[(12, 11, 2), float64] */;
  %435 = bitwise_xor(%432, %433) /* ty=Tensor[(12, 11, 2), uint64] */;
  %436 = cosh(%434) /* ty=Tensor[(12, 11, 2), float64] */;
  (%435, %436)
}

def @func_4740(%var_4733: Tensor[(14, 2, 11), int16], %var_4734: Tensor[(14, 2, 11), int16]) -> (Tensor[(14, 2, 11), int16],) {
  %437 = cast(%var_4734, dtype="int16") /* ty=Tensor[(14, 2, 11), int16] */;
  %438 = shape_of(%var_4733, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%var_4733, dtype="int16") /* ty=Tensor[(14, 2, 11), int16] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %441 = right_shift(%439, %440) /* ty=Tensor[(14, 2, 11), int16] */;
  (%441,)
}

def @func_2896(%var_2859: Tensor[(32), float64], %var_2861: Tensor[(24, 14), float32], %var_2886: Tensor[(24, 14), float32]) -> (Tensor[(4, 15, 5), int32], Tensor[(4, 15, 5), float32], Tensor[(60), float32], Tensor[(32), float64], Tensor[(1, 60), float32], Tensor[(24, 14), float64]) {
  %442 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 15, 5), int32] */, dtype="int32") /* ty=Tensor[(4, 15, 5), int32] */;
  %443 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(4, 15, 5), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %444 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 15, 5), int32] */, dtype="int32") /* ty=Tensor[(4, 15, 5), int32] */;
  %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %446 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 15, 5), int32] */, dtype="float32") /* ty=Tensor[(4, 15, 5), float32] */;
  %447 = cast(%var_2859, dtype="float64") /* ty=Tensor[(32), float64] */;
  %448 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 60), float32] */, dtype="float32") /* ty=Tensor[(1, 60), float32] */;
  %449 = cast(%var_2861, dtype="float32") /* ty=Tensor[(24, 14), float32] */;
  %450 = reshape(%447, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %451 = reshape(%448, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %452 = reshape(%449, newshape=[1, 336]) /* ty=Tensor[(1, 336), float32] */;
  %453 = @func_1129(%450, %451, %452) /* ty=(Tensor[(1, 9, 1), float64], Tensor[(4, 8), float64], Tensor[(1120), uint16], Tensor[(60), float32], Tensor[(14, 5, 16), bool], Tensor[(1, 9, 32), uint32], Tensor[(7, 8, 6), float32], Tensor[(8, 336), bool]) */;
  %454 = cast(%var_2886, dtype="float64") /* ty=Tensor[(24, 14), float64] */;
  %455 = shape_of(%var_2861, dtype="int32") /* ty=Tensor[(2), int32] */;
  %456 = cast(%var_2861, dtype="float64") /* ty=Tensor[(24, 14), float64] */;
  %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %458 = minimum(%444, %445) /* ty=Tensor[(4, 15, 5), int32] */;
  %459 = cos(%446) /* ty=Tensor[(4, 15, 5), float32] */;
  %460 = %453.3;
  %461 = floor_divide(%456, %457) /* ty=Tensor[(24, 14), float64] */;
  (%458, %459, %460, %var_2859, meta[relay.Constant][31] /* ty=Tensor[(1, 60), float32] */, %461)
}

def @func_1246(%var_1235: Tensor[(2, 10, 9), float32], %var_1243: Tensor[(60), float32]) -> (Tensor[(2, 10, 9), float32], Tensor[(4, 8), float64], Tensor[(32), float64], Tensor[(60), float32], Tensor[(24, 14), float32]) {
  %462 = cast(meta[relay.Constant][32] /* ty=Tensor[(2, 10, 9), float32] */, dtype="float32") /* ty=Tensor[(2, 10, 9), float32] */;
  %463 = shape_of(%var_1235, dtype="int32") /* ty=Tensor[(3), int32] */;
  %464 = cast(%var_1235, dtype="float32") /* ty=Tensor[(2, 10, 9), float32] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %466 = cast(meta[relay.Constant][33] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %467 = cast(%var_1243, dtype="float32") /* ty=Tensor[(60), float32] */;
  %468 = cast(meta[relay.Constant][34] /* ty=Tensor[(24, 14), float32] */, dtype="float32") /* ty=Tensor[(24, 14), float32] */;
  %469 = reshape(%466, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %470 = reshape(%467, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %471 = reshape(%468, newshape=[1, 336]) /* ty=Tensor[(1, 336), float32] */;
  %472 = @func_1129(%469, %470, %471) /* ty=(Tensor[(1, 9, 1), float64], Tensor[(4, 8), float64], Tensor[(1120), uint16], Tensor[(60), float32], Tensor[(14, 5, 16), bool], Tensor[(1, 9, 32), uint32], Tensor[(7, 8, 6), float32], Tensor[(8, 336), bool]) */;
  %473 = floor_mod(%464, %465) /* ty=Tensor[(2, 10, 9), float32] */;
  %474 = %472.1;
  (%473, %474, meta[relay.Constant][33] /* ty=Tensor[(32), float64] */, %var_1243, meta[relay.Constant][34] /* ty=Tensor[(24, 14), float32] */)
}

def @func_2473(%var_2412: Tensor[(5, 1, 11), float64], %var_2462: Tensor[(240), float64], %var_2470: Tensor[(2560), float32]) -> (uint32, Tensor[(1014), uint32], Tensor[(13, 6, 13), bool], Tensor[(10, 13, 8), float32], Tensor[(40, 26), float32], Tensor[(5, ?, 11), float32], Tensor[(5, ?, 11), bool], Tensor[(13, 6, 13), float64], Tensor[(10, 2, 12), float64], Tensor[(240), float64], Tensor[(336), float32], Tensor[(2560), float32]) {
  %475 = cast(meta[relay.Constant][35] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %476 = cast(meta[relay.Constant][36] /* ty=Tensor[(1014), uint32] */, dtype="uint32") /* ty=Tensor[(1014), uint32] */;
  %477 = reshape(%475, newshape=[]) /* ty=uint32 */;
  %478 = reshape(%476, newshape=[13, 6, 13]) /* ty=Tensor[(13, 6, 13), uint32] */;
  %479 = @func_1332(%477, %478) /* ty=(Tensor[(13, 6, 13), bool],) */;
  %480 = cast(meta[relay.Constant][37] /* ty=Tensor[(40, 26), float32] */, dtype="float32") /* ty=Tensor[(40, 26), float32] */;
  %481 = reshape(%480, newshape=[10, 13, 8]) /* ty=Tensor[(10, 13, 8), float32] */;
  %482 = @func_2388(%481) /* ty=(Tensor[(10, 13, 8), float32],) */;
  %483 = cast(%var_2412, dtype="float64") /* ty=Tensor[(5, 1, 11), float64] */;
  %484 = sigmoid(%483) /* ty=Tensor[(5, 1, 11), float64] */;
  %485 = cast(%var_2412, dtype="float32") /* ty=Tensor[(5, 1, 11), float32] */;
  %486 = shape_of(%484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(%484, dtype="float32") /* ty=Tensor[(5, 1, 11), float32] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %489 = cast(%var_2412, dtype="bool") /* ty=Tensor[(5, 1, 11), bool] */;
  %490 = shape_of(%484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %491 = cast(%484, dtype="bool") /* ty=Tensor[(5, 1, 11), bool] */;
  %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %493 = cast(meta[relay.Constant][35] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %494 = cast(meta[relay.Constant][36] /* ty=Tensor[(1014), uint32] */, dtype="uint32") /* ty=Tensor[(1014), uint32] */;
  %495 = reshape(%493, newshape=[]) /* ty=uint32 */;
  %496 = reshape(%494, newshape=[13, 6, 13]) /* ty=Tensor[(13, 6, 13), uint32] */;
  %497 = @func_1332(%495, %496) /* ty=(Tensor[(13, 6, 13), bool],) */;
  %498 = %497.0;
  %499 = cast(%498, dtype="float64") /* ty=Tensor[(13, 6, 13), float64] */;
  %500 = cast(%var_2462, dtype="float64") /* ty=Tensor[(240), float64] */;
  %501 = cast(%var_2462, dtype="float64") /* ty=Tensor[(240), float64] */;
  %502 = reshape(%500, newshape=[10, 2, 12]) /* ty=Tensor[(10, 2, 12), float64] */;
  %503 = reshape(%501, newshape=[10, 2, 12]) /* ty=Tensor[(10, 2, 12), float64] */;
  %504 = cast(%var_2470, dtype="float32") /* ty=Tensor[(2560), float32] */;
  %505 = reshape(%504, newshape=[10, 16, 16]) /* ty=Tensor[(10, 16, 16), float32] */;
  %506 = @func_2247(%505) /* ty=(Tensor[(10, 16, 16), float32], Tensor[(60), float32], Tensor[(32), float64], Tensor[(60), float32], Tensor[(336), float32]) */;
  %507 = %479.0;
  %508 = %482.0;
  %509 = mod(%487, %488) /* ty=Tensor[(5, ?, 11), float32] */;
  %510 = not_equal(%491, %492) /* ty=Tensor[(5, ?, 11), bool] */;
  %511 = atan(%499) /* ty=Tensor[(13, 6, 13), float64] */;
  %512 = @func_1865(%502, %503) /* ty=Tensor[(10, 2, 12), float64] */;
  %513 = %506.4;
  (meta[relay.Constant][35] /* ty=uint32 */, meta[relay.Constant][36] /* ty=Tensor[(1014), uint32] */, %507, %508, meta[relay.Constant][37] /* ty=Tensor[(40, 26), float32] */, %509, %510, %511, %512, %var_2462, %513, %var_2470)
}

def @func_6069() -> (Tensor[(2560), bool],) {
  %514 = @func_5456() /* ty=(Tensor[(2560), bool],) */;
  %515 = %514.0;
  (%515,)
}

def @func_6927() -> (Tensor[(32, 1), float64], Tensor[(9, 9, 7), float32], Tensor[(1, 60), float32], Tensor[(336), float32]) {
  %516 = @func_4553() /* ty=(Tensor[(7, 8, 6), float64], Tensor[(32, 1), float64], Tensor[(5, 14, 4), float32]) */;
  %517 = %516.1;
  %518 = cast(%517, dtype="float64") /* ty=Tensor[(32, 1), float64] */;
  %519 = cast(meta[relay.Constant][38] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %520 = cast(meta[relay.Constant][38] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %521 = reshape(%518, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %522 = reshape(%519, newshape=[24, 14]) /* ty=Tensor[(24, 14), float32] */;
  %523 = reshape(%520, newshape=[24, 14]) /* ty=Tensor[(24, 14), float32] */;
  %524 = @func_2896(%521, %522, %523) /* ty=(Tensor[(4, 15, 5), int32], Tensor[(4, 15, 5), float32], Tensor[(60), float32], Tensor[(32), float64], Tensor[(1, 60), float32], Tensor[(24, 14), float64]) */;
  %525 = @func_5123() /* ty=Tensor[(9, 9, 7), float32] */;
  %526 = %524.4;
  (%517, %525, %526, meta[relay.Constant][38] /* ty=Tensor[(336), float32] */)
}

def @func_4316(%var_4297: Tensor[(180), float32], %var_4298: Tensor[(60), float32]) -> (Tensor[(9, 9, 7), float32], Tensor[(32), float64], Tensor[(180), float32], Tensor[(60), float32]) {
  %527 = @func_4095() /* ty=(Tensor[(9, 9, 7), float32],) */;
  %528 = cast(%var_4297, dtype="float32") /* ty=Tensor[(180), float32] */;
  %529 = cast(%var_4298, dtype="float32") /* ty=Tensor[(60), float32] */;
  %530 = reshape(%528, newshape=[2, 10, 9]) /* ty=Tensor[(2, 10, 9), float32] */;
  %531 = reshape(%529, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %532 = @func_1246(%530, %531) /* ty=(Tensor[(2, 10, 9), float32], Tensor[(4, 8), float64], Tensor[(32), float64], Tensor[(60), float32], Tensor[(24, 14), float32]) */;
  %533 = %527.0;
  %534 = %532.2;
  (%533, %534, %var_4297, %var_4298)
}

def @func_2034(%var_2004: Tensor[(2, 2, 8), float64]) -> (Tensor[(10, 2, 12), float64], Tensor[(240), float64], Tensor[(2, 2, 8), float32], Tensor[(14, 5, 16), bool], Tensor[(1120), uint16]) {
  %535 = cast(meta[relay.Constant][39] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %536 = cast(meta[relay.Constant][39] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %537 = reshape(%535, newshape=[10, 2, 12]) /* ty=Tensor[(10, 2, 12), float64] */;
  %538 = reshape(%536, newshape=[10, 2, 12]) /* ty=Tensor[(10, 2, 12), float64] */;
  %539 = cast(%var_2004, dtype="float64") /* ty=Tensor[(2, 2, 8), float64] */;
  %540 = sqrt(%539) /* ty=Tensor[(2, 2, 8), float64] */;
  %541 = cast(%540, dtype="float32") /* ty=Tensor[(2, 2, 8), float32] */;
  %542 = cast(meta[relay.Constant][40] /* ty=Tensor[(1120), uint16] */, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
  %543 = reshape(%542, newshape=[14, 5, 16]) /* ty=Tensor[(14, 5, 16), uint16] */;
  %544 = @func_162(%543) /* ty=(Tensor[(14, 5, 16), bool],) */;
  %545 = @func_1865(%537, %538) /* ty=Tensor[(10, 2, 12), float64] */;
  %546 = erf(%541) /* ty=Tensor[(2, 2, 8), float32] */;
  %547 = %544.0;
  (%545, meta[relay.Constant][39] /* ty=Tensor[(240), float64] */, %546, %547, meta[relay.Constant][40] /* ty=Tensor[(1120), uint16] */)
}

def @func_1943(%var_1935: Tensor[(2, 2, 10), uint8]) -> (Tensor[(2, 2, 10), bool],) {
  %548 = cast(%var_1935, dtype="bool") /* ty=Tensor[(2, 2, 10), bool] */;
  %549 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(2, 2, 10), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %550 = cast(meta[relay.Constant][41] /* ty=Tensor[(2, 2, 10), uint8] */, dtype="bool") /* ty=Tensor[(2, 2, 10), bool] */;
  %551 = dyn.reshape(%548, %549, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %552 = greater(%550, %551) /* ty=Tensor[(2, 2, 10), bool] */;
  (%552,)
}

def @func_5748(%var_5684: Tensor[(7, 14, 14), bool], %var_5685: Tensor[(7, 14, 14), bool], %var_5728: Tensor[(7, 14, 14), bool]) -> (Tensor[(7, 8, 6), float64], Tensor[(3, 10, 2), int16], Tensor[(7, 14, 14), bool], Tensor[(10, 2, 12), float64], Tensor[(32), float64]) {
  %553 = @func_4553() /* ty=(Tensor[(7, 8, 6), float64], Tensor[(32, 1), float64], Tensor[(5, 14, 4), float32]) */;
  %554 = @func_5404() /* ty=(Tensor[(2560), float32], Tensor[(3, 10, 2), int16], Tensor[(60), float32]) */;
  %555 = cast(%var_5685, dtype="bool") /* ty=Tensor[(7, 14, 14), bool] */;
  %556 = shape_of(%var_5684, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(%var_5684, dtype="bool") /* ty=Tensor[(7, 14, 14), bool] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %559 = logical_and(%557, %558) /* ty=Tensor[(7, 14, 14), bool] */;
  %560 = cast(%var_5728, dtype="bool") /* ty=Tensor[(7, 14, 14), bool] */;
  %561 = shape_of(%559, dtype="int32") /* ty=Tensor[(3), int32] */;
  %562 = cast(%559, dtype="bool") /* ty=Tensor[(7, 14, 14), bool] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %564 = cast(meta[relay.Constant][42] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %565 = reshape(%564, newshape=[2, 2, 8]) /* ty=Tensor[(2, 2, 8), float64] */;
  %566 = @func_2034(%565) /* ty=(Tensor[(10, 2, 12), float64], Tensor[(240), float64], Tensor[(2, 2, 8), float32], Tensor[(14, 5, 16), bool], Tensor[(1120), uint16]) */;
  %567 = %553.0;
  %568 = %554.1;
  %569 = greater_equal(%562, %563) /* ty=Tensor[(7, 14, 14), bool] */;
  %570 = %566.0;
  (%567, %568, %569, %570, meta[relay.Constant][42] /* ty=Tensor[(32), float64] */)
}

def @func_5831(%var_5780: Tensor[(6, 13, 12), int32], %var_5820: Tensor[(567), float32]) -> (Tensor[(6, 13, 12), bool], Tensor[(6, 13, 12), bool], Tensor[(60), float32], Tensor[(567), float32]) {
  %571 = cast(%var_5780, dtype="int32") /* ty=Tensor[(6, 13, 12), int32] */;
  %572 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(6, 13, 12), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %573 = cast(meta[relay.Constant][43] /* ty=Tensor[(6, 13, 12), int32] */, dtype="int32") /* ty=Tensor[(6, 13, 12), int32] */;
  %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %575 = bitwise_or(%573, %574) /* ty=Tensor[(6, 13, 12), int32] */;
  %576 = cast(%575, dtype="bool") /* ty=Tensor[(6, 13, 12), bool] */;
  %577 = shape_of(%var_5780, dtype="int32") /* ty=Tensor[(3), int32] */;
  %578 = cast(%var_5780, dtype="bool") /* ty=Tensor[(6, 13, 12), bool] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %580 = cast(%var_5780, dtype="float64") /* ty=Tensor[(6, 13, 12), float64] */;
  %581 = sqrt(%580) /* ty=Tensor[(6, 13, 12), float64] */;
  %582 = cast(%581, dtype="float32") /* ty=Tensor[(6, 13, 12), float32] */;
  %583 = asinh(%582) /* ty=Tensor[(6, 13, 12), float32] */;
  %584 = cast(%var_5780, dtype="bool") /* ty=Tensor[(6, 13, 12), bool] */;
  %585 = shape_of(%583, dtype="int32") /* ty=Tensor[(3), int32] */;
  %586 = cast(%583, dtype="bool") /* ty=Tensor[(6, 13, 12), bool] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %588 = cast(%var_5820, dtype="float32") /* ty=Tensor[(567), float32] */;
  %589 = reshape(%588, newshape=[9, 9, 7]) /* ty=Tensor[(9, 9, 7), float32] */;
  %590 = @func_4520(%589) /* ty=(Tensor[(9, 9, 7), int64], Tensor[(60), float32], Tensor[(6, 30), float32], Tensor[(60), float32]) */;
  %591 = less_equal(%578, %579) /* ty=Tensor[(6, 13, 12), bool] */;
  %592 = equal(%586, %587) /* ty=Tensor[(6, 13, 12), bool] */;
  %593 = %590.3;
  (%591, %592, %593, %var_5820)
}

def @func_5621(%var_5576: Tensor[(8, 8, 7), float32], %var_5602: Tensor[(104), float64]) -> (Tensor[(8, 8, 7), float32], uint32, uint32, Tensor[(104), float64]) {
  %594 = @func_5349() /* ty=(Tensor[(?, 8, 7), float32],) */;
  %595 = %594.0;
  %596 = cast(%595, dtype="uint32") /* ty=Tensor[(?, 8, 7), uint32] */;
  %597 = cast(%var_5576, dtype="uint32") /* ty=Tensor[(8, 8, 7), uint32] */;
  %598 = minimum(%596, %597) /* ty=Tensor[(8, 8, 7), uint32] */;
  %599 = cast(%598, dtype="float32") /* ty=Tensor[(8, 8, 7), float32] */;
  %600 = cast(meta[relay.Constant][44] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %601 = cast(%var_5602, dtype="float64") /* ty=Tensor[(104), float64] */;
  %602 = reshape(%600, newshape=[]) /* ty=uint32 */;
  %603 = reshape(%601, newshape=[104]) /* ty=Tensor[(104), float64] */;
  %604 = @func_5529(%602, %603) /* ty=(Tensor[(11, 8, 7), float64], Tensor[(13, 6, 13), bool], uint32, Tensor[(1014), uint32], Tensor[(2, 4, 13), float32], Tensor[(104), float64], Tensor[(1, 8, 7), float32]) */;
  %605 = erf(%599) /* ty=Tensor[(8, 8, 7), float32] */;
  %606 = %604.2;
  (%605, %606, meta[relay.Constant][44] /* ty=uint32 */, %var_5602)
}

def @func_6516(%var_6500: Tensor[(11, 13, 3), float64]) -> (Tensor[(11, 13, 3), float64], Tensor[(11, 13, 3), float64], Tensor[(60), float32]) {
  %607 = cast(%var_6500, dtype="float64") /* ty=Tensor[(11, 13, 3), float64] */;
  %608 = cast(%var_6500, dtype="float64") /* ty=Tensor[(11, 13, 3), float64] */;
  %609 = @func_5404() /* ty=(Tensor[(2560), float32], Tensor[(3, 10, 2), int16], Tensor[(60), float32]) */;
  %610 = asin(%607) /* ty=Tensor[(11, 13, 3), float64] */;
  %611 = acos(%608) /* ty=Tensor[(11, 13, 3), float64] */;
  %612 = %609.2;
  (%610, %611, %612)
}

def @func_4352(%var_4331: Tensor[(5, 8, 1), float32]) -> (Tensor[(5, 8, 1), float32], Tensor[(60), float32], Tensor[(2560), float32]) {
  %613 = cast(%var_4331, dtype="float32") /* ty=Tensor[(5, 8, 1), float32] */;
  %614 = cast(meta[relay.Constant][45] /* ty=Tensor[(2560), float32] */, dtype="float32") /* ty=Tensor[(2560), float32] */;
  %615 = reshape(%614, newshape=[10, 16, 16]) /* ty=Tensor[(10, 16, 16), float32] */;
  %616 = @func_2247(%615) /* ty=(Tensor[(10, 16, 16), float32], Tensor[(60), float32], Tensor[(32), float64], Tensor[(60), float32], Tensor[(336), float32]) */;
  %617 = tan(%613) /* ty=Tensor[(5, 8, 1), float32] */;
  %618 = %616.1;
  (%617, %618, meta[relay.Constant][45] /* ty=Tensor[(2560), float32] */)
}

def @func_2247(%var_2237: Tensor[(10, 16, 16), float32]) -> (Tensor[(10, 16, 16), float32], Tensor[(60), float32], Tensor[(32), float64], Tensor[(60), float32], Tensor[(336), float32]) {
  %619 = cast(%var_2237, dtype="float32") /* ty=Tensor[(10, 16, 16), float32] */;
  %620 = cast(meta[relay.Constant][46] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %621 = cast(meta[relay.Constant][47] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %622 = cast(meta[relay.Constant][48] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %623 = reshape(%620, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %624 = reshape(%621, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %625 = reshape(%622, newshape=[1, 336]) /* ty=Tensor[(1, 336), float32] */;
  %626 = @func_1129(%623, %624, %625) /* ty=(Tensor[(1, 9, 1), float64], Tensor[(4, 8), float64], Tensor[(1120), uint16], Tensor[(60), float32], Tensor[(14, 5, 16), bool], Tensor[(1, 9, 32), uint32], Tensor[(7, 8, 6), float32], Tensor[(8, 336), bool]) */;
  %627 = asinh(%619) /* ty=Tensor[(10, 16, 16), float32] */;
  %628 = %626.3;
  (%627, %628, meta[relay.Constant][46] /* ty=Tensor[(32), float64] */, meta[relay.Constant][47] /* ty=Tensor[(60), float32] */, meta[relay.Constant][48] /* ty=Tensor[(336), float32] */)
}

def @func_3093(%var_3078: Tensor[(10, 14, 7), float32], %var_3079: Tensor[(10, 14, 7), float32], %var_3090: Tensor[(32), float64]) -> (Tensor[(10, 14, 7), float32], Tensor[(4, 8), float64], Tensor[(32), float64]) {
  %629 = cast(%var_3079, dtype="float32") /* ty=Tensor[(10, 14, 7), float32] */;
  %630 = shape_of(%var_3078, dtype="int32") /* ty=Tensor[(3), int32] */;
  %631 = cast(%var_3078, dtype="float32") /* ty=Tensor[(10, 14, 7), float32] */;
  %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %633 = cast(%var_3090, dtype="float64") /* ty=Tensor[(32), float64] */;
  %634 = reshape(%633, newshape=[4, 8]) /* ty=Tensor[(4, 8), float64] */;
  %635 = @func_1061(%634) /* ty=(Tensor[(4, 8), float64], Tensor[(7, 8, 6), float64], Tensor[(336), float32]) */;
  %636 = multiply(%631, %632) /* ty=Tensor[(10, 14, 7), float32] */;
  %637 = %635.0;
  (%636, %637, %var_3090)
}

def @func_4851() -> Tensor[(2560), bool] {
  %638 = @func_4496() /* ty=(Tensor[(2560), float64],) */;
  %639 = %638.0;
  %640 = cast(meta[relay.Constant][49] /* ty=Tensor[(2560), float64] */, dtype="bool") /* ty=Tensor[(2560), bool] */;
  %641 = shape_of(%639, dtype="int32") /* ty=Tensor[(1), int32] */;
  %642 = cast(%639, dtype="bool") /* ty=Tensor[(2560), bool] */;
  %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?), bool] */;
  equal(%642, %643) /* ty=Tensor[(2560), bool] */
}

def @func_4401() -> (Tensor[(9, 9, 7), float32], Tensor[(40), float32], Tensor[(2560), float64]) {
  %644 = @func_4095() /* ty=(Tensor[(9, 9, 7), float32],) */;
  %645 = cast(meta[relay.Constant][50] /* ty=Tensor[(40), float32] */, dtype="float32") /* ty=Tensor[(40), float32] */;
  %646 = reshape(%645, newshape=[5, 8, 1]) /* ty=Tensor[(5, 8, 1), float32] */;
  %647 = @func_4352(%646) /* ty=(Tensor[(5, 8, 1), float32], Tensor[(60), float32], Tensor[(2560), float32]) */;
  %648 = %647.2;
  %649 = cast(%648, dtype="float64") /* ty=Tensor[(2560), float64] */;
  %650 = %644.0;
  %651 = log10(%649) /* ty=Tensor[(2560), float64] */;
  (%650, meta[relay.Constant][50] /* ty=Tensor[(40), float32] */, %651)
}

def @func_5907(%var_5895: Tensor[(936), int32]) -> (Tensor[(9, 9, 7), float32], Tensor[(60), float32], Tensor[(240), float64], Tensor[(32), float64], Tensor[(936), float32]) {
  %652 = @func_4401() /* ty=(Tensor[(9, 9, 7), float32], Tensor[(40), float32], Tensor[(2560), float64]) */;
  %653 = cast(%var_5895, dtype="int32") /* ty=Tensor[(936), int32] */;
  %654 = %652.0;
  %655 = cast(%654, dtype="float32") /* ty=Tensor[(9, 9, 7), float32] */;
  %656 = reshape(%653, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), int32] */;
  %657 = reshape(%655, newshape=[567]) /* ty=Tensor[(567), float32] */;
  %658 = @func_5831(%656, %657) /* ty=(Tensor[(6, 13, 12), bool], Tensor[(6, 13, 12), bool], Tensor[(60), float32], Tensor[(567), float32]) */;
  %659 = cast(meta[relay.Constant][51] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %660 = reshape(%659, newshape=[2, 2, 8]) /* ty=Tensor[(2, 2, 8), float64] */;
  %661 = @func_2034(%660) /* ty=(Tensor[(10, 2, 12), float64], Tensor[(240), float64], Tensor[(2, 2, 8), float32], Tensor[(14, 5, 16), bool], Tensor[(1120), uint16]) */;
  %662 = cast(%var_5895, dtype="float32") /* ty=Tensor[(936), float32] */;
  %663 = %658.2;
  %664 = %661.1;
  %665 = acos(%662) /* ty=Tensor[(936), float32] */;
  (%654, %663, %664, meta[relay.Constant][51] /* ty=Tensor[(32), float64] */, %665)
}

def @func_4708(%var_4689: Tensor[(1, 264), uint64]) -> (Tensor[(9, 9, 7), float32], Tensor[(12, 11, 2), float64], uint64, Tensor[(1, 264), uint64]) {
  %666 = @func_4401() /* ty=(Tensor[(9, 9, 7), float32], Tensor[(40), float32], Tensor[(2560), float64]) */;
  %667 = cast(meta[relay.Constant][52] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %668 = cast(%var_4689, dtype="uint64") /* ty=Tensor[(1, 264), uint64] */;
  %669 = reshape(%667, newshape=[]) /* ty=uint64 */;
  %670 = reshape(%668, newshape=[12, 11, 2]) /* ty=Tensor[(12, 11, 2), uint64] */;
  %671 = @func_4155(%669, %670) /* ty=(Tensor[(12, 11, 2), uint64], Tensor[(12, 11, 2), float64]) */;
  %672 = %666.0;
  %673 = %671.1;
  (%672, %673, meta[relay.Constant][52] /* ty=uint64 */, %var_4689)
}

def @func_2293(%var_2288: Tensor[(9, 13, 9), bool]) -> Tensor[(9, 13, 9), bool] {
  %674 = cast(meta[relay.Constant][53] /* ty=Tensor[(9, 13, 9), bool] */, dtype="bool") /* ty=Tensor[(9, 13, 9), bool] */;
  %675 = shape_of(%var_2288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %676 = cast(%var_2288, dtype="bool") /* ty=Tensor[(9, 13, 9), bool] */;
  %677 = dyn.reshape(%674, %675, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%676, %677) /* ty=Tensor[(9, 13, 9), bool] */
}

def @func_7030() -> Tensor[(7, 8, 6), float64] {
  %678 = @func_4553() /* ty=(Tensor[(7, 8, 6), float64], Tensor[(32, 1), float64], Tensor[(5, 14, 4), float32]) */;
  %678.0
}

def @func_6826() -> (Tensor[(9, 9, 7), float32], Tensor[(13, 6, 13), bool], Tensor[(1014), float32]) {
  %679 = @func_4401() /* ty=(Tensor[(9, 9, 7), float32], Tensor[(40), float32], Tensor[(2560), float64]) */;
  %680 = cast(meta[relay.Constant][54] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %681 = cast(meta[relay.Constant][55] /* ty=Tensor[(1014), uint32] */, dtype="uint32") /* ty=Tensor[(1014), uint32] */;
  %682 = reshape(%680, newshape=[]) /* ty=uint32 */;
  %683 = reshape(%681, newshape=[13, 6, 13]) /* ty=Tensor[(13, 6, 13), uint32] */;
  %684 = @func_1332(%682, %683) /* ty=(Tensor[(13, 6, 13), bool],) */;
  %685 = cast(meta[relay.Constant][54] /* ty=uint32 */, dtype="float32") /* ty=float32 */;
  %686 = cast(meta[relay.Constant][55] /* ty=Tensor[(1014), uint32] */, dtype="float32") /* ty=Tensor[(1014), float32] */;
  %687 = %679.0;
  %688 = %684.0;
  %689 = floor_divide(%685, %686) /* ty=Tensor[(1014), float32] */;
  (%687, %688, %689)
}

def @func_4982(%var_4969: Tensor[(4, 8, 7), float64]) -> Tensor[(4, 8, 7), bool] {
  %690 = @func_4903() /* ty=Tensor[(1, 8, 7), float64] */;
  %691 = cast(%690, dtype="bool") /* ty=Tensor[(1, 8, 7), bool] */;
  %692 = cast(%var_4969, dtype="bool") /* ty=Tensor[(4, 8, 7), bool] */;
  equal(%691, %692) /* ty=Tensor[(4, 8, 7), bool] */
}

def @func_6767(%var_6737: Tensor[(11, 8, 7), float64], %var_6753: Tensor[(13, 33), float64]) -> (Tensor[(11, 8, 7), float64], Tensor[(11, 8, 7), float32], Tensor[(11, 8, 7), float32], Tensor[(60), float32], Tensor[(11, 8, 7), float64], Tensor[(13, 33), float64]) {
  %693 = @func_5059() /* ty=(Tensor[(11, 8, 7), float64],) */;
  %694 = %693.0;
  %695 = cast(%694, dtype="float64") /* ty=Tensor[(11, 8, 7), float64] */;
  %696 = rsqrt(%695) /* ty=Tensor[(11, 8, 7), float64] */;
  %697 = cast(%694, dtype="float64") /* ty=Tensor[(11, 8, 7), float64] */;
  %698 = shape_of(%696, dtype="int32") /* ty=Tensor[(3), int32] */;
  %699 = cast(%696, dtype="float64") /* ty=Tensor[(11, 8, 7), float64] */;
  %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %701 = cast(%var_6737, dtype="float32") /* ty=Tensor[(11, 8, 7), float32] */;
  %702 = shape_of(%694, dtype="int32") /* ty=Tensor[(3), int32] */;
  %703 = cast(%694, dtype="float32") /* ty=Tensor[(11, 8, 7), float32] */;
  %704 = dyn.reshape(%701, %702, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %705 = cast(%694, dtype="float32") /* ty=Tensor[(11, 8, 7), float32] */;
  %706 = cast(%var_6753, dtype="float64") /* ty=Tensor[(13, 33), float64] */;
  %707 = reshape(%706, newshape=[11, 13, 3]) /* ty=Tensor[(11, 13, 3), float64] */;
  %708 = @func_6516(%707) /* ty=(Tensor[(11, 13, 3), float64], Tensor[(11, 13, 3), float64], Tensor[(60), float32]) */;
  %709 = cast(%694, dtype="float32") /* ty=Tensor[(11, 8, 7), float32] */;
  %710 = atan(%709) /* ty=Tensor[(11, 8, 7), float32] */;
  %711 = cast(%694, dtype="float64") /* ty=Tensor[(11, 8, 7), float64] */;
  %712 = shape_of(%710, dtype="int32") /* ty=Tensor[(3), int32] */;
  %713 = cast(%710, dtype="float64") /* ty=Tensor[(11, 8, 7), float64] */;
  %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %715 = cast(%var_6753, dtype="float64") /* ty=Tensor[(13, 33), float64] */;
  %716 = floor_divide(%699, %700) /* ty=Tensor[(11, 8, 7), float64] */;
  %717 = floor_mod(%703, %704) /* ty=Tensor[(11, 8, 7), float32] */;
  %718 = sinh(%705) /* ty=Tensor[(11, 8, 7), float32] */;
  %719 = %708.2;
  %720 = mod(%713, %714) /* ty=Tensor[(11, 8, 7), float64] */;
  %721 = rsqrt(%715) /* ty=Tensor[(13, 33), float64] */;
  (%716, %717, %718, %719, %720, %721)
}

def @func_4095() -> (Tensor[(9, 9, 7), float32],) {
  %722 = cast(meta[relay.Constant][56] /* ty=Tensor[(9, 9, 7), float64] */, dtype="float64") /* ty=Tensor[(9, 9, 7), float64] */;
  %723 = acos(%722) /* ty=Tensor[(9, 9, 7), float64] */;
  %724 = cast(%723, dtype="float32") /* ty=Tensor[(9, 9, 7), float32] */;
  %725 = sinh(%724) /* ty=Tensor[(9, 9, 7), float32] */;
  (%725,)
}

def @func_2203(%var_2190: int32, %var_2191: Tensor[(2, 13, 1), int32]) -> (Tensor[(2, 13, 1), int32],) {
  %726 = cast(%var_2190, dtype="int32") /* ty=int32 */;
  %727 = cast(%var_2191, dtype="int32") /* ty=Tensor[(2, 13, 1), int32] */;
  %728 = minimum(%726, %727) /* ty=Tensor[(2, 13, 1), int32] */;
  (%728,)
}

def @func_5123() -> Tensor[(9, 9, 7), float32] {
  %729 = @func_4095() /* ty=(Tensor[(9, 9, 7), float32],) */;
  %729.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6342(%var_6340: Tensor[(11, 5, 12), float64], %var_6341: Tensor[(11, 5, 12), float64]) -> (Tensor[(1, 8, 7), float32], Tensor[(11, 5, 12), float64], Tensor[(9, 9, 7), float32]) {
  %10 = fn (%var_6306: Tensor[(11, 5, 12), float64], %var_6307: Tensor[(11, 5, 12), float64]) -> (Tensor[(1, 8, 7), float32], Tensor[(11, 5, 12), float64], Tensor[(9, 9, 7), float32]) {
    %0 = @func_4473() /* ty=(Tensor[(1, 8, 7), float32],) */;
    %1 = cast(%var_6307, dtype="float64") /* ty=Tensor[(11, 5, 12), float64] */;
    %2 = shape_of(%var_6306, dtype="int32") /* ty=Tensor[(3), int32] */;
    %3 = cast(%var_6306, dtype="float64") /* ty=Tensor[(11, 5, 12), float64] */;
    %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %5 = divide(%3, %4) /* ty=Tensor[(11, 5, 12), float64] */;
    %6 = cast(%5, dtype="float64") /* ty=Tensor[(11, 5, 12), float64] */;
    %7 = %0.0;
    %8 = cos(%6) /* ty=Tensor[(11, 5, 12), float64] */;
    %9 = @func_4929() /* ty=Tensor[(9, 9, 7), float32] */;
    (%7, %8, %9)
  };
  %10(%var_6340, %var_6341) /* ty=(Tensor[(1, 8, 7), float32], Tensor[(11, 5, 12), float64], Tensor[(9, 9, 7), float32]) */
}

def @func_2900(%var_2897: Tensor[(32), float64], %var_2898: Tensor[(24, 14), float32], %var_2899: Tensor[(24, 14), float32]) -> (Tensor[(4, 15, 5), int32], Tensor[(4, 15, 5), float32], Tensor[(60), float32], Tensor[(32), float64], Tensor[(1, 60), float32], Tensor[(24, 14), float64]) {
  %31 = fn (%var_2859: Tensor[(32), float64], %var_2861: Tensor[(24, 14), float32], %var_2886: Tensor[(24, 14), float32]) -> (Tensor[(4, 15, 5), int32], Tensor[(4, 15, 5), float32], Tensor[(60), float32], Tensor[(32), float64], Tensor[(1, 60), float32], Tensor[(24, 14), float64]) {
    %11 = cast(meta[relay.Constant][1] /* ty=Tensor[(4, 15, 5), int32] */, dtype="int32") /* ty=Tensor[(4, 15, 5), int32] */;
    %12 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(4, 15, 5), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %13 = cast(meta[relay.Constant][0] /* ty=Tensor[(4, 15, 5), int32] */, dtype="int32") /* ty=Tensor[(4, 15, 5), int32] */;
    %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %15 = cast(meta[relay.Constant][0] /* ty=Tensor[(4, 15, 5), int32] */, dtype="float32") /* ty=Tensor[(4, 15, 5), float32] */;
    %16 = cast(%var_2859, dtype="float64") /* ty=Tensor[(32), float64] */;
    %17 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 60), float32] */, dtype="float32") /* ty=Tensor[(1, 60), float32] */;
    %18 = cast(%var_2861, dtype="float32") /* ty=Tensor[(24, 14), float32] */;
    %19 = reshape(%16, newshape=[32]) /* ty=Tensor[(32), float64] */;
    %20 = reshape(%17, newshape=[60]) /* ty=Tensor[(60), float32] */;
    %21 = reshape(%18, newshape=[1, 336]) /* ty=Tensor[(1, 336), float32] */;
    %22 = @func_1129(%19, %20, %21) /* ty=(Tensor[(1, 9, 1), float64], Tensor[(4, 8), float64], Tensor[(1120), uint16], Tensor[(60), float32], Tensor[(14, 5, 16), bool], Tensor[(1, 9, 32), uint32], Tensor[(7, 8, 6), float32], Tensor[(8, 336), bool]) */;
    %23 = cast(%var_2886, dtype="float64") /* ty=Tensor[(24, 14), float64] */;
    %24 = shape_of(%var_2861, dtype="int32") /* ty=Tensor[(2), int32] */;
    %25 = cast(%var_2861, dtype="float64") /* ty=Tensor[(24, 14), float64] */;
    %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %27 = minimum(%13, %14) /* ty=Tensor[(4, 15, 5), int32] */;
    %28 = cos(%15) /* ty=Tensor[(4, 15, 5), float32] */;
    %29 = %22.3;
    %30 = floor_divide(%25, %26) /* ty=Tensor[(24, 14), float64] */;
    (%27, %28, %29, %var_2859, meta[relay.Constant][2] /* ty=Tensor[(1, 60), float32] */, %30)
  };
  %31(%var_2897, %var_2898, %var_2899) /* ty=(Tensor[(4, 15, 5), int32], Tensor[(4, 15, 5), float32], Tensor[(60), float32], Tensor[(32), float64], Tensor[(1, 60), float32], Tensor[(24, 14), float64]) */
}

def @func_7466(%var_7440: Tensor[(40), float32], %var_7448: Tensor[(364), float32], %var_7449: Tensor[(180), float32]) -> (Tensor[(60), float32], Tensor[(40), float32], Tensor[(60), float32], Tensor[(364), float32], Tensor[(180), float32], Tensor[(7, 8, 6), float32]) {
  %32 = cast(%var_7440, dtype="float32") /* ty=Tensor[(40), float32] */;
  %33 = reshape(%32, newshape=[5, 8, 1]) /* ty=Tensor[(5, 8, 1), float32] */;
  %34 = @func_4352(%33) /* ty=(Tensor[(5, 8, 1), float32], Tensor[(60), float32], Tensor[(2560), float32]) */;
  %35 = cast(%var_7448, dtype="float32") /* ty=Tensor[(364), float32] */;
  %36 = cast(%var_7449, dtype="float32") /* ty=Tensor[(180), float32] */;
  %37 = reshape(%35, newshape=[14, 2, 13]) /* ty=Tensor[(14, 2, 13), float32] */;
  %38 = reshape(%36, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %39 = @func_3653(%37, %38) /* ty=(Tensor[(10, 2, 12), float64], Tensor[(240), float64], Tensor[(14, 2, 13), int32], Tensor[(4, 8), float64], Tensor[(180), float32], Tensor[(60), float32]) */;
  %40 = @func_4553() /* ty=(Tensor[(7, 8, 6), float64], Tensor[(32, 1), float64], Tensor[(5, 14, 4), float32]) */;
  %41 = %40.0;
  %42 = cast(%41, dtype="float32") /* ty=Tensor[(7, 8, 6), float32] */;
  %43 = %34.1;
  %44 = %39.5;
  %45 = tan(%42) /* ty=Tensor[(7, 8, 6), float32] */;
  (%43, %var_7440, %44, %var_7448, %var_7449, %45)
}

def @func_4715() -> Tensor[(7, 8, 6), float64] {
  %47 = fn () -> Tensor[(7, 8, 6), float64] {
    %46 = @func_4553() /* ty=(Tensor[(7, 8, 6), float64], Tensor[(32, 1), float64], Tensor[(5, 14, 4), float32]) */;
    %46.0
  };
  %47() /* ty=Tensor[(7, 8, 6), float64] */
}

def @func_4982(%var_4969: Tensor[(4, 8, 7), float64]) -> Tensor[(4, 8, 7), bool] {
  %48 = @func_4903() /* ty=Tensor[(1, 8, 7), float64] */;
  %49 = cast(%48, dtype="bool") /* ty=Tensor[(1, 8, 7), bool] */;
  %50 = cast(%var_4969, dtype="bool") /* ty=Tensor[(4, 8, 7), bool] */;
  equal(%49, %50) /* ty=Tensor[(4, 8, 7), bool] */
}

def @func_4497() -> (Tensor[(2560), float64],) {
  %53 = fn () -> (Tensor[(2560), float64],) {
    %51 = @func_4401() /* ty=(Tensor[(9, 9, 7), float32], Tensor[(40), float32], Tensor[(2560), float64]) */;
    %52 = %51.2;
    (%52,)
  };
  %53() /* ty=(Tensor[(2560), float64],) */
}

def @func_1134(%var_1131: Tensor[(32), float64], %var_1132: Tensor[(60), float32], %var_1133: Tensor[(1, 336), float32]) -> (Tensor[(1, 9, 1), float64], Tensor[(4, 8), float64], Tensor[(1120), uint16], Tensor[(60), float32], Tensor[(14, 5, 16), bool], Tensor[(1, 9, 32), uint32], Tensor[(7, 8, 6), float32], Tensor[(8, 336), bool]) {
  @func_1129(%var_1131, %var_1132, %var_1133) /* ty=(Tensor[(1, 9, 1), float64], Tensor[(4, 8), float64], Tensor[(1120), uint16], Tensor[(60), float32], Tensor[(14, 5, 16), bool], Tensor[(1, 9, 32), uint32], Tensor[(7, 8, 6), float32], Tensor[(8, 336), bool]) */
}

def @func_1064(%var_1062: Tensor[(4, 8), float64]) -> (Tensor[(4, 8), float64], Tensor[(7, 8, 6), float64], Tensor[(336), float32]) {
  @func_1061(%var_1062) /* ty=(Tensor[(4, 8), float64], Tensor[(7, 8, 6), float64], Tensor[(336), float32]) */
}

def @func_6457() -> (Tensor[(7, 8, 6), float64],) {
  @func_6455() /* ty=(Tensor[(7, 8, 6), float64],) */
}

def @func_4474() -> (Tensor[(1, 8, 7), float32],) {
  %56 = fn () -> (Tensor[(1, 8, 7), float32],) {
    %54 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 8, 7), float32] */, dtype="float32") /* ty=Tensor[(1, 8, 7), float32] */;
    %55 = sigmoid(%54) /* ty=Tensor[(1, 8, 7), float32] */;
    (%55,)
  };
  %56() /* ty=(Tensor[(1, 8, 7), float32],) */
}

def @func_1945(%var_1944: Tensor[(2, 2, 10), uint8]) -> (Tensor[(2, 2, 10), bool],) {
  %62 = fn (%var_1935: Tensor[(2, 2, 10), uint8]) -> (Tensor[(2, 2, 10), bool],) {
    %57 = cast(%var_1935, dtype="bool") /* ty=Tensor[(2, 2, 10), bool] */;
    %58 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(2, 2, 10), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %59 = cast(meta[relay.Constant][4] /* ty=Tensor[(2, 2, 10), uint8] */, dtype="bool") /* ty=Tensor[(2, 2, 10), bool] */;
    %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %61 = greater(%59, %60) /* ty=Tensor[(2, 2, 10), bool] */;
    (%61,)
  };
  %62(%var_1944) /* ty=(Tensor[(2, 2, 10), bool],) */
}

def @func_5285() -> (Tensor[(2560), bool],) {
  %63 = @func_4920() /* ty=Tensor[(2560), bool] */;
  (%63,)
}

def @func_6899(%var_6896: Tensor[(2560), bool], %var_6897: Tensor[(616), float64], %var_6898: Tensor[(13, 33), float64]) -> (Tensor[(2560), bool], Tensor[(60), float32], Tensor[(616), float64], Tensor[(13, 33), float64], Tensor[(7, 8, 6), float32], Tensor[(336), float32]) {
  @func_6894(%var_6896, %var_6897, %var_6898) /* ty=(Tensor[(2560), bool], Tensor[(60), float32], Tensor[(616), float64], Tensor[(13, 33), float64], Tensor[(7, 8, 6), float32], Tensor[(336), float32]) */
}

def @func_7400(%var_7399: uint32) -> (Tensor[(9, 9, 7), float32], Tensor[(104), float64], uint32, Tensor[(104), float64]) {
  %71 = fn (%var_7393: uint32) -> (Tensor[(9, 9, 7), float32], Tensor[(104), float64], uint32, Tensor[(104), float64]) {
    %64 = cast(%var_7393, dtype="uint32") /* ty=uint32 */;
    %65 = cast(meta[relay.Constant][5] /* ty=Tensor[(104), float64] */, dtype="float64") /* ty=Tensor[(104), float64] */;
    %66 = reshape(%64, newshape=[]) /* ty=uint32 */;
    %67 = reshape(%65, newshape=[104]) /* ty=Tensor[(104), float64] */;
    %68 = @func_5529(%66, %67) /* ty=(Tensor[(11, 8, 7), float64], Tensor[(13, 6, 13), bool], uint32, Tensor[(1014), uint32], Tensor[(2, 4, 13), float32], Tensor[(104), float64], Tensor[(1, 8, 7), float32]) */;
    %69 = @func_4929() /* ty=Tensor[(9, 9, 7), float32] */;
    %70 = %68.5;
    (%69, %70, %var_7393, meta[relay.Constant][5] /* ty=Tensor[(104), float64] */)
  };
  %71(%var_7399) /* ty=(Tensor[(9, 9, 7), float32], Tensor[(104), float64], uint32, Tensor[(104), float64]) */
}

def @func_6498(%var_6496: Tensor[(1, 364), float32], %var_6497: Tensor[(180), float32]) -> (Tensor[(308), int16], Tensor[(240), float64], Tensor[(1, 364), float32], Tensor[(180), float32]) {
  @func_6494(%var_6496, %var_6497) /* ty=(Tensor[(308), int16], Tensor[(240), float64], Tensor[(1, 364), float32], Tensor[(180), float32]) */
}

def @func_7215() -> (Tensor[(11, 8, 7), float64],) {
  @func_7213() /* ty=(Tensor[(11, 8, 7), float64],) */
}

def @func_1061(%var_1047: Tensor[(4, 8), float64]) -> (Tensor[(4, 8), float64], Tensor[(7, 8, 6), float64], Tensor[(336), float32]) {
  %72 = cast(%var_1047, dtype="float64") /* ty=Tensor[(4, 8), float64] */;
  %73 = cast(meta[relay.Constant][6] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %74 = reshape(%73, newshape=[7, 8, 6]) /* ty=Tensor[(7, 8, 6), float32] */;
  %75 = @func_841(%74) /* ty=(Tensor[(7, 8, 6), float32], Tensor[(7, 8, 6), float64]) */;
  %76 = sin(%72) /* ty=Tensor[(4, 8), float64] */;
  %77 = %75.1;
  (%76, %77, meta[relay.Constant][6] /* ty=Tensor[(336), float32] */)
}

def @func_2293(%var_2288: Tensor[(9, 13, 9), bool]) -> Tensor[(9, 13, 9), bool] {
  %78 = cast(meta[relay.Constant][7] /* ty=Tensor[(9, 13, 9), bool] */, dtype="bool") /* ty=Tensor[(9, 13, 9), bool] */;
  %79 = shape_of(%var_2288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %80 = cast(%var_2288, dtype="bool") /* ty=Tensor[(9, 13, 9), bool] */;
  %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%80, %81) /* ty=Tensor[(9, 13, 9), bool] */
}

def @func_4402() -> (Tensor[(9, 9, 7), float32], Tensor[(40), float32], Tensor[(2560), float64]) {
  %90 = fn () -> (Tensor[(9, 9, 7), float32], Tensor[(40), float32], Tensor[(2560), float64]) {
    %82 = @func_4095() /* ty=(Tensor[(9, 9, 7), float32],) */;
    %83 = cast(meta[relay.Constant][8] /* ty=Tensor[(40), float32] */, dtype="float32") /* ty=Tensor[(40), float32] */;
    %84 = reshape(%83, newshape=[5, 8, 1]) /* ty=Tensor[(5, 8, 1), float32] */;
    %85 = @func_4352(%84) /* ty=(Tensor[(5, 8, 1), float32], Tensor[(60), float32], Tensor[(2560), float32]) */;
    %86 = %85.2;
    %87 = cast(%86, dtype="float64") /* ty=Tensor[(2560), float64] */;
    %88 = %82.0;
    %89 = log10(%87) /* ty=Tensor[(2560), float64] */;
    (%88, meta[relay.Constant][8] /* ty=Tensor[(40), float32] */, %89)
  };
  %90() /* ty=(Tensor[(9, 9, 7), float32], Tensor[(40), float32], Tensor[(2560), float64]) */
}

def @func_6071() -> (Tensor[(2560), bool],) {
  @func_6069() /* ty=(Tensor[(2560), bool],) */
}

def @func_7069(%var_7068: Tensor[(15, 4), float32]) -> (Tensor[(13, 6, 13), float32], Tensor[(14, 5, 16), bool], Tensor[(15, 4), float32]) {
  %108 = fn (%var_7064: Tensor[(15, 4), float32]) -> (Tensor[(13, 6, 13), float32], Tensor[(14, 5, 16), bool], Tensor[(15, 4), float32]) {
    %91 = @func_6826() /* ty=(Tensor[(9, 9, 7), float32], Tensor[(13, 6, 13), bool], Tensor[(1014), float32]) */;
    %92 = %91.1;
    %93 = cast(meta[relay.Constant][9] /* ty=Tensor[(13, 6, 13), bool] */, dtype="uint64") /* ty=Tensor[(13, 6, 13), uint64] */;
    %94 = shape_of(%92, dtype="int32") /* ty=Tensor[(3), int32] */;
    %95 = cast(%92, dtype="uint64") /* ty=Tensor[(13, 6, 13), uint64] */;
    %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %97 = multiply(%95, %96) /* ty=Tensor[(13, 6, 13), uint64] */;
    %98 = cast(%97, dtype="float32") /* ty=Tensor[(13, 6, 13), float32] */;
    %99 = cast(%var_7064, dtype="float32") /* ty=Tensor[(15, 4), float32] */;
    %100 = cast(%var_7064, dtype="float32") /* ty=Tensor[(15, 4), float32] */;
    %101 = cast(%var_7064, dtype="float32") /* ty=Tensor[(15, 4), float32] */;
    %102 = reshape(%99, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float32] */;
    %103 = reshape(%100, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float32] */;
    %104 = reshape(%101, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float32] */;
    %105 = @func_774(%102, %103, %104) /* ty=(Tensor[(3, 10, 2), int16], Tensor[(3, 10, 2), float64], Tensor[(14, 5, 16), bool], Tensor[(1120), uint16]) */;
    %106 = asinh(%98) /* ty=Tensor[(13, 6, 13), float32] */;
    %107 = %105.2;
    (%106, %107, %var_7064)
  };
  %108(%var_7068) /* ty=(Tensor[(13, 6, 13), float32], Tensor[(14, 5, 16), bool], Tensor[(15, 4), float32]) */
}

def @func_7340() -> Tensor[(11, 8, 7), float64] {
  %110 = fn () -> Tensor[(11, 8, 7), float64] {
    %109 = @func_7169() /* ty=(Tensor[(11, 8, 7), float64],) */;
    %109.0
  };
  %110() /* ty=Tensor[(11, 8, 7), float64] */
}

def @func_4853() -> Tensor[(2560), bool] {
  @func_4851() /* ty=Tensor[(2560), bool] */
}

def @func_1250(%var_1248: Tensor[(2, 10, 9), float32], %var_1249: Tensor[(60), float32]) -> (Tensor[(2, 10, 9), float32], Tensor[(4, 8), float64], Tensor[(32), float64], Tensor[(60), float32], Tensor[(24, 14), float32]) {
  @func_1246(%var_1248, %var_1249) /* ty=(Tensor[(2, 10, 9), float32], Tensor[(4, 8), float64], Tensor[(32), float64], Tensor[(60), float32], Tensor[(24, 14), float32]) */
}

def @func_3093(%var_3078: Tensor[(10, 14, 7), float32], %var_3079: Tensor[(10, 14, 7), float32], %var_3090: Tensor[(32), float64]) -> (Tensor[(10, 14, 7), float32], Tensor[(4, 8), float64], Tensor[(32), float64]) {
  %111 = cast(%var_3079, dtype="float32") /* ty=Tensor[(10, 14, 7), float32] */;
  %112 = shape_of(%var_3078, dtype="int32") /* ty=Tensor[(3), int32] */;
  %113 = cast(%var_3078, dtype="float32") /* ty=Tensor[(10, 14, 7), float32] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %115 = cast(%var_3090, dtype="float64") /* ty=Tensor[(32), float64] */;
  %116 = reshape(%115, newshape=[4, 8]) /* ty=Tensor[(4, 8), float64] */;
  %117 = @func_1061(%116) /* ty=(Tensor[(4, 8), float64], Tensor[(7, 8, 6), float64], Tensor[(336), float32]) */;
  %118 = multiply(%113, %114) /* ty=Tensor[(10, 14, 7), float32] */;
  %119 = %117.0;
  (%118, %119, %var_3090)
}

def @func_6494(%var_6481: Tensor[(1, 364), float32], %var_6482: Tensor[(180), float32]) -> (Tensor[(308), int16], Tensor[(240), float64], Tensor[(1, 364), float32], Tensor[(180), float32]) {
  %120 = @func_4827() /* ty=(Tensor[(7, 8, 6), float64], Tensor[(2560), float64], Tensor[(14, 2, 11), int16], Tensor[(308), int16]) */;
  %121 = cast(%var_6481, dtype="float32") /* ty=Tensor[(1, 364), float32] */;
  %122 = cast(%var_6482, dtype="float32") /* ty=Tensor[(180), float32] */;
  %123 = reshape(%121, newshape=[14, 2, 13]) /* ty=Tensor[(14, 2, 13), float32] */;
  %124 = reshape(%122, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %125 = @func_3653(%123, %124) /* ty=(Tensor[(10, 2, 12), float64], Tensor[(240), float64], Tensor[(14, 2, 13), int32], Tensor[(4, 8), float64], Tensor[(180), float32], Tensor[(60), float32]) */;
  %126 = %120.3;
  %127 = %125.1;
  (%126, %127, %var_6481, %var_6482)
}

def @func_5123() -> Tensor[(9, 9, 7), float32] {
  %128 = @func_4095() /* ty=(Tensor[(9, 9, 7), float32],) */;
  %128.0
}

def @func_6894(%var_6863: Tensor[(2560), bool], %var_6874: Tensor[(616), float64], %var_6875: Tensor[(13, 33), float64]) -> (Tensor[(2560), bool], Tensor[(60), float32], Tensor[(616), float64], Tensor[(13, 33), float64], Tensor[(7, 8, 6), float32], Tensor[(336), float32]) {
  %129 = @func_4851() /* ty=Tensor[(2560), bool] */;
  %130 = cast(%var_6863, dtype="bool") /* ty=Tensor[(2560), bool] */;
  %131 = shape_of(%129, dtype="int32") /* ty=Tensor[(1), int32] */;
  %132 = cast(%129, dtype="bool") /* ty=Tensor[(2560), bool] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?), bool] */;
  %134 = cast(%var_6874, dtype="float64") /* ty=Tensor[(616), float64] */;
  %135 = cast(%var_6875, dtype="float64") /* ty=Tensor[(13, 33), float64] */;
  %136 = reshape(%134, newshape=[11, 8, 7]) /* ty=Tensor[(11, 8, 7), float64] */;
  %137 = reshape(%135, newshape=[13, 33]) /* ty=Tensor[(13, 33), float64] */;
  %138 = @func_6767(%136, %137) /* ty=(Tensor[(11, 8, 7), float64], Tensor[(11, 8, 7), float32], Tensor[(11, 8, 7), float32], Tensor[(60), float32], Tensor[(11, 8, 7), float64], Tensor[(13, 33), float64]) */;
  %139 = cast(meta[relay.Constant][10] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %140 = reshape(%139, newshape=[7, 8, 6]) /* ty=Tensor[(7, 8, 6), float32] */;
  %141 = @func_841(%140) /* ty=(Tensor[(7, 8, 6), float32], Tensor[(7, 8, 6), float64]) */;
  %142 = less_equal(%132, %133) /* ty=Tensor[(2560), bool] */;
  %143 = %138.3;
  %144 = %141.0;
  (%142, %143, %var_6874, %var_6875, %144, meta[relay.Constant][10] /* ty=Tensor[(336), float32] */)
}

def @func_4155(%var_4146: uint64, %var_4147: Tensor[(12, 11, 2), uint64]) -> (Tensor[(12, 11, 2), uint64], Tensor[(12, 11, 2), float64]) {
  %145 = cast(%var_4146, dtype="uint64") /* ty=uint64 */;
  %146 = cast(%var_4147, dtype="uint64") /* ty=Tensor[(12, 11, 2), uint64] */;
  %147 = cast(%var_4147, dtype="float64") /* ty=Tensor[(12, 11, 2), float64] */;
  %148 = bitwise_xor(%145, %146) /* ty=Tensor[(12, 11, 2), uint64] */;
  %149 = cosh(%147) /* ty=Tensor[(12, 11, 2), float64] */;
  (%148, %149)
}

def @func_844(%var_842: Tensor[(7, 8, 6), float32]) -> (Tensor[(7, 8, 6), float32], Tensor[(7, 8, 6), float64]) {
  @func_841(%var_842) /* ty=(Tensor[(7, 8, 6), float32], Tensor[(7, 8, 6), float64]) */
}

def @func_2206(%var_2204: int32, %var_2205: Tensor[(2, 13, 1), int32]) -> (Tensor[(2, 13, 1), int32],) {
  %153 = fn (%var_2190: int32, %var_2191: Tensor[(2, 13, 1), int32]) -> (Tensor[(2, 13, 1), int32],) {
    %150 = cast(%var_2190, dtype="int32") /* ty=int32 */;
    %151 = cast(%var_2191, dtype="int32") /* ty=Tensor[(2, 13, 1), int32] */;
    %152 = minimum(%150, %151) /* ty=Tensor[(2, 13, 1), int32] */;
    (%152,)
  };
  %153(%var_2204, %var_2205) /* ty=(Tensor[(2, 13, 1), int32],) */
}

def @func_2477(%var_2474: Tensor[(5, 1, 11), float64], %var_2475: Tensor[(240), float64], %var_2476: Tensor[(2560), float32]) -> (uint32, Tensor[(1014), uint32], Tensor[(13, 6, 13), bool], Tensor[(10, 13, 8), float32], Tensor[(40, 26), float32], Tensor[(5, ?, 11), float32], Tensor[(5, ?, 11), bool], Tensor[(13, 6, 13), float64], Tensor[(10, 2, 12), float64], Tensor[(240), float64], Tensor[(336), float32], Tensor[(2560), float32]) {
  %193 = fn (%var_2412: Tensor[(5, 1, 11), float64], %var_2462: Tensor[(240), float64], %var_2470: Tensor[(2560), float32]) -> (uint32, Tensor[(1014), uint32], Tensor[(13, 6, 13), bool], Tensor[(10, 13, 8), float32], Tensor[(40, 26), float32], Tensor[(5, ?, 11), float32], Tensor[(5, ?, 11), bool], Tensor[(13, 6, 13), float64], Tensor[(10, 2, 12), float64], Tensor[(240), float64], Tensor[(336), float32], Tensor[(2560), float32]) {
    %154 = cast(meta[relay.Constant][11] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %155 = cast(meta[relay.Constant][12] /* ty=Tensor[(1014), uint32] */, dtype="uint32") /* ty=Tensor[(1014), uint32] */;
    %156 = reshape(%154, newshape=[]) /* ty=uint32 */;
    %157 = reshape(%155, newshape=[13, 6, 13]) /* ty=Tensor[(13, 6, 13), uint32] */;
    %158 = @func_1332(%156, %157) /* ty=(Tensor[(13, 6, 13), bool],) */;
    %159 = cast(meta[relay.Constant][13] /* ty=Tensor[(40, 26), float32] */, dtype="float32") /* ty=Tensor[(40, 26), float32] */;
    %160 = reshape(%159, newshape=[10, 13, 8]) /* ty=Tensor[(10, 13, 8), float32] */;
    %161 = @func_2388(%160) /* ty=(Tensor[(10, 13, 8), float32],) */;
    %162 = cast(%var_2412, dtype="float64") /* ty=Tensor[(5, 1, 11), float64] */;
    %163 = sigmoid(%162) /* ty=Tensor[(5, 1, 11), float64] */;
    %164 = cast(%var_2412, dtype="float32") /* ty=Tensor[(5, 1, 11), float32] */;
    %165 = shape_of(%163, dtype="int32") /* ty=Tensor[(3), int32] */;
    %166 = cast(%163, dtype="float32") /* ty=Tensor[(5, 1, 11), float32] */;
    %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %168 = cast(%var_2412, dtype="bool") /* ty=Tensor[(5, 1, 11), bool] */;
    %169 = shape_of(%163, dtype="int32") /* ty=Tensor[(3), int32] */;
    %170 = cast(%163, dtype="bool") /* ty=Tensor[(5, 1, 11), bool] */;
    %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %172 = cast(meta[relay.Constant][11] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %173 = cast(meta[relay.Constant][12] /* ty=Tensor[(1014), uint32] */, dtype="uint32") /* ty=Tensor[(1014), uint32] */;
    %174 = reshape(%172, newshape=[]) /* ty=uint32 */;
    %175 = reshape(%173, newshape=[13, 6, 13]) /* ty=Tensor[(13, 6, 13), uint32] */;
    %176 = @func_1332(%174, %175) /* ty=(Tensor[(13, 6, 13), bool],) */;
    %177 = %176.0;
    %178 = cast(%177, dtype="float64") /* ty=Tensor[(13, 6, 13), float64] */;
    %179 = cast(%var_2462, dtype="float64") /* ty=Tensor[(240), float64] */;
    %180 = cast(%var_2462, dtype="float64") /* ty=Tensor[(240), float64] */;
    %181 = reshape(%179, newshape=[10, 2, 12]) /* ty=Tensor[(10, 2, 12), float64] */;
    %182 = reshape(%180, newshape=[10, 2, 12]) /* ty=Tensor[(10, 2, 12), float64] */;
    %183 = cast(%var_2470, dtype="float32") /* ty=Tensor[(2560), float32] */;
    %184 = reshape(%183, newshape=[10, 16, 16]) /* ty=Tensor[(10, 16, 16), float32] */;
    %185 = @func_2247(%184) /* ty=(Tensor[(10, 16, 16), float32], Tensor[(60), float32], Tensor[(32), float64], Tensor[(60), float32], Tensor[(336), float32]) */;
    %186 = %158.0;
    %187 = %161.0;
    %188 = mod(%166, %167) /* ty=Tensor[(5, ?, 11), float32] */;
    %189 = not_equal(%170, %171) /* ty=Tensor[(5, ?, 11), bool] */;
    %190 = atan(%178) /* ty=Tensor[(13, 6, 13), float64] */;
    %191 = @func_1865(%181, %182) /* ty=Tensor[(10, 2, 12), float64] */;
    %192 = %185.4;
    (meta[relay.Constant][11] /* ty=uint32 */, meta[relay.Constant][12] /* ty=Tensor[(1014), uint32] */, %186, %187, meta[relay.Constant][13] /* ty=Tensor[(40, 26), float32] */, %188, %189, %190, %191, %var_2462, %192, %var_2470)
  };
  %193(%var_2474, %var_2475, %var_2476) /* ty=(uint32, Tensor[(1014), uint32], Tensor[(13, 6, 13), bool], Tensor[(10, 13, 8), float32], Tensor[(40, 26), float32], Tensor[(5, ?, 11), float32], Tensor[(5, ?, 11), bool], Tensor[(13, 6, 13), float64], Tensor[(10, 2, 12), float64], Tensor[(240), float64], Tensor[(336), float32], Tensor[(2560), float32]) */
}

def @func_6098(%var_6072: Tensor[(7, 9, 12), float32], %var_6096: Tensor[(351, 3), bool]) -> (Tensor[(7, 9, 12), bool], Tensor[(7, 9, 12), float64], Tensor[(2560), float64], Tensor[(9, 13, 9), bool], Tensor[(351, 3), bool]) {
  %194 = cast(meta[relay.Constant][14] /* ty=Tensor[(7, 9, 12), float32] */, dtype="float32") /* ty=Tensor[(7, 9, 12), float32] */;
  %195 = shape_of(%var_6072, dtype="int32") /* ty=Tensor[(3), int32] */;
  %196 = cast(%var_6072, dtype="float32") /* ty=Tensor[(7, 9, 12), float32] */;
  %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %198 = mod(%196, %197) /* ty=Tensor[(7, 9, 12), float32] */;
  %199 = cast(%198, dtype="bool") /* ty=Tensor[(7, 9, 12), bool] */;
  %200 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(7, 9, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %201 = cast(meta[relay.Constant][14] /* ty=Tensor[(7, 9, 12), float32] */, dtype="bool") /* ty=Tensor[(7, 9, 12), bool] */;
  %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %203 = cast(%var_6072, dtype="float64") /* ty=Tensor[(7, 9, 12), float64] */;
  %204 = @func_4827() /* ty=(Tensor[(7, 8, 6), float64], Tensor[(2560), float64], Tensor[(14, 2, 11), int16], Tensor[(308), int16]) */;
  %205 = cast(%var_6096, dtype="bool") /* ty=Tensor[(351, 3), bool] */;
  %206 = reshape(%205, newshape=[9, 13, 9]) /* ty=Tensor[(9, 13, 9), bool] */;
  %207 = equal(%201, %202) /* ty=Tensor[(7, 9, 12), bool] */;
  %208 = sinh(%203) /* ty=Tensor[(7, 9, 12), float64] */;
  %209 = %204.1;
  %210 = @func_2293(%206) /* ty=Tensor[(9, 13, 9), bool] */;
  (%207, %208, %209, %210, %var_6096)
}

def @func_4352(%var_4331: Tensor[(5, 8, 1), float32]) -> (Tensor[(5, 8, 1), float32], Tensor[(60), float32], Tensor[(2560), float32]) {
  %211 = cast(%var_4331, dtype="float32") /* ty=Tensor[(5, 8, 1), float32] */;
  %212 = cast(meta[relay.Constant][15] /* ty=Tensor[(2560), float32] */, dtype="float32") /* ty=Tensor[(2560), float32] */;
  %213 = reshape(%212, newshape=[10, 16, 16]) /* ty=Tensor[(10, 16, 16), float32] */;
  %214 = @func_2247(%213) /* ty=(Tensor[(10, 16, 16), float32], Tensor[(60), float32], Tensor[(32), float64], Tensor[(60), float32], Tensor[(336), float32]) */;
  %215 = tan(%211) /* ty=Tensor[(5, 8, 1), float32] */;
  %216 = %214.1;
  (%215, %216, meta[relay.Constant][15] /* ty=Tensor[(2560), float32] */)
}

def @func_4827() -> (Tensor[(7, 8, 6), float64], Tensor[(2560), float64], Tensor[(14, 2, 11), int16], Tensor[(308), int16]) {
  %217 = @func_4496() /* ty=(Tensor[(2560), float64],) */;
  %218 = cast(meta[relay.Constant][16] /* ty=Tensor[(308), int16] */, dtype="int16") /* ty=Tensor[(308), int16] */;
  %219 = cast(meta[relay.Constant][16] /* ty=Tensor[(308), int16] */, dtype="int16") /* ty=Tensor[(308), int16] */;
  %220 = reshape(%218, newshape=[14, 2, 11]) /* ty=Tensor[(14, 2, 11), int16] */;
  %221 = reshape(%219, newshape=[14, 2, 11]) /* ty=Tensor[(14, 2, 11), int16] */;
  %222 = @func_4740(%220, %221) /* ty=(Tensor[(14, 2, 11), int16],) */;
  %223 = @func_4714() /* ty=Tensor[(7, 8, 6), float64] */;
  %224 = %217.0;
  %225 = %222.0;
  (%223, %224, %225, meta[relay.Constant][16] /* ty=Tensor[(308), int16] */)
}

def @func_5351() -> (Tensor[(?, 8, 7), float32],) {
  @func_5349() /* ty=(Tensor[(?, 8, 7), float32],) */
}

def @func_5059() -> (Tensor[(11, 8, 7), float64],) {
  %226 = @func_4903() /* ty=Tensor[(1, 8, 7), float64] */;
  %227 = cast(%226, dtype="float64") /* ty=Tensor[(1, 8, 7), float64] */;
  %228 = cast(meta[relay.Constant][17] /* ty=Tensor[(11, 8, 7), float64] */, dtype="float64") /* ty=Tensor[(11, 8, 7), float64] */;
  %229 = divide(%227, %228) /* ty=Tensor[(11, 8, 7), float64] */;
  (%229,)
}

def @func_3653(%var_3599: Tensor[(14, 2, 13), float32], %var_3627: Tensor[(180), float32]) -> (Tensor[(10, 2, 12), float64], Tensor[(240), float64], Tensor[(14, 2, 13), int32], Tensor[(4, 8), float64], Tensor[(180), float32], Tensor[(60), float32]) {
  %230 = cast(meta[relay.Constant][18] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %231 = cast(meta[relay.Constant][18] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %232 = reshape(%230, newshape=[10, 2, 12]) /* ty=Tensor[(10, 2, 12), float64] */;
  %233 = reshape(%231, newshape=[10, 2, 12]) /* ty=Tensor[(10, 2, 12), float64] */;
  %234 = cast(%var_3599, dtype="float32") /* ty=Tensor[(14, 2, 13), float32] */;
  %235 = acos(%234) /* ty=Tensor[(14, 2, 13), float32] */;
  %236 = cast(%var_3599, dtype="int32") /* ty=Tensor[(14, 2, 13), int32] */;
  %237 = shape_of(%235, dtype="int32") /* ty=Tensor[(3), int32] */;
  %238 = cast(%235, dtype="int32") /* ty=Tensor[(14, 2, 13), int32] */;
  %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %240 = cast(%var_3627, dtype="float32") /* ty=Tensor[(180), float32] */;
  %241 = cast(meta[relay.Constant][19] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %242 = reshape(%240, newshape=[2, 10, 9]) /* ty=Tensor[(2, 10, 9), float32] */;
  %243 = reshape(%241, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %244 = @func_1246(%242, %243) /* ty=(Tensor[(2, 10, 9), float32], Tensor[(4, 8), float64], Tensor[(32), float64], Tensor[(60), float32], Tensor[(24, 14), float32]) */;
  %245 = @func_1865(%232, %233) /* ty=Tensor[(10, 2, 12), float64] */;
  %246 = left_shift(%238, %239) /* ty=Tensor[(14, 2, 13), int32] */;
  %247 = %244.1;
  (%245, meta[relay.Constant][18] /* ty=Tensor[(240), float64] */, %246, %247, %var_3627, meta[relay.Constant][19] /* ty=Tensor[(60), float32] */)
}

def @func_7170() -> (Tensor[(11, 8, 7), float64],) {
  %250 = fn () -> (Tensor[(11, 8, 7), float64],) {
    %248 = @func_6130() /* ty=(Tensor[(11, 8, 7), float64],) */;
    %249 = %248.0;
    (%249,)
  };
  %250() /* ty=(Tensor[(11, 8, 7), float64],) */
}

def @func_7022(%var_7019: Tensor[(660), float64], %var_7020: Tensor[(429), float64], %var_7021: Tensor[(240), float64]) -> (Tensor[(336), float32], Tensor[(11, 8, 7), float64], Tensor[(13, 33), float64], Tensor[(32, 80), bool], Tensor[(11, 8, 7), float32], Tensor[(11, 5, 12), float64], Tensor[(660), float64], Tensor[(3, 10, 2), int16], Tensor[(429), int8], Tensor[(240), float64], Tensor[(55), float64], Tensor[(240), float64]) {
  %292 = fn (%var_6992: Tensor[(660), float64], %var_7008: Tensor[(429), float64], %var_7015: Tensor[(240), float64]) -> (Tensor[(336), float32], Tensor[(11, 8, 7), float64], Tensor[(13, 33), float64], Tensor[(32, 80), bool], Tensor[(11, 8, 7), float32], Tensor[(11, 5, 12), float64], Tensor[(660), float64], Tensor[(3, 10, 2), int16], Tensor[(429), int8], Tensor[(240), float64], Tensor[(55), float64], Tensor[(240), float64]) {
    %251 = @func_6927() /* ty=(Tensor[(32, 1), float64], Tensor[(9, 9, 7), float32], Tensor[(1, 60), float32], Tensor[(336), float32]) */;
    %252 = @func_5059() /* ty=(Tensor[(11, 8, 7), float64],) */;
    %253 = cast(meta[relay.Constant][20] /* ty=Tensor[(32, 80), bool] */, dtype="bool") /* ty=Tensor[(32, 80), bool] */;
    %254 = %252.0;
    %255 = cast(%254, dtype="float64") /* ty=Tensor[(11, 8, 7), float64] */;
    %256 = cast(meta[relay.Constant][21] /* ty=Tensor[(429), float64] */, dtype="float64") /* ty=Tensor[(429), float64] */;
    %257 = reshape(%253, newshape=[2560]) /* ty=Tensor[(2560), bool] */;
    %258 = reshape(%255, newshape=[616]) /* ty=Tensor[(616), float64] */;
    %259 = reshape(%256, newshape=[13, 33]) /* ty=Tensor[(13, 33), float64] */;
    %260 = @func_6894(%257, %258, %259) /* ty=(Tensor[(2560), bool], Tensor[(60), float32], Tensor[(616), float64], Tensor[(13, 33), float64], Tensor[(7, 8, 6), float32], Tensor[(336), float32]) */;
    %261 = cast(%254, dtype="float64") /* ty=Tensor[(11, 8, 7), float64] */;
    %262 = cast(meta[relay.Constant][21] /* ty=Tensor[(429), float64] */, dtype="float64") /* ty=Tensor[(429), float64] */;
    %263 = reshape(%261, newshape=[11, 8, 7]) /* ty=Tensor[(11, 8, 7), float64] */;
    %264 = reshape(%262, newshape=[13, 33]) /* ty=Tensor[(13, 33), float64] */;
    %265 = @func_6767(%263, %264) /* ty=(Tensor[(11, 8, 7), float64], Tensor[(11, 8, 7), float32], Tensor[(11, 8, 7), float32], Tensor[(60), float32], Tensor[(11, 8, 7), float64], Tensor[(13, 33), float64]) */;
    %266 = cast(%var_6992, dtype="float64") /* ty=Tensor[(660), float64] */;
    %267 = cast(%var_6992, dtype="float64") /* ty=Tensor[(660), float64] */;
    %268 = reshape(%266, newshape=[11, 5, 12]) /* ty=Tensor[(11, 5, 12), float64] */;
    %269 = reshape(%267, newshape=[11, 5, 12]) /* ty=Tensor[(11, 5, 12), float64] */;
    %270 = @func_6339(%268, %269) /* ty=(Tensor[(1, 8, 7), float32], Tensor[(11, 5, 12), float64], Tensor[(9, 9, 7), float32]) */;
    %271 = @func_5404() /* ty=(Tensor[(2560), float32], Tensor[(3, 10, 2), int16], Tensor[(60), float32]) */;
    %272 = cast(meta[relay.Constant][21] /* ty=Tensor[(429), float64] */, dtype="float64") /* ty=Tensor[(429), float64] */;
    %273 = log10(%272) /* ty=Tensor[(429), float64] */;
    %274 = cast(%var_7008, dtype="int8") /* ty=Tensor[(429), int8] */;
    %275 = shape_of(%273, dtype="int32") /* ty=Tensor[(1), int32] */;
    %276 = cast(%273, dtype="int8") /* ty=Tensor[(429), int8] */;
    %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?), int8] */;
    %278 = cast(meta[relay.Constant][22] /* ty=Tensor[(55), float64] */, dtype="float64") /* ty=Tensor[(55), float64] */;
    %279 = cast(%var_7015, dtype="float64") /* ty=Tensor[(240), float64] */;
    %280 = cast(meta[relay.Constant][20] /* ty=Tensor[(32, 80), bool] */, dtype="float32") /* ty=Tensor[(32, 80), float32] */;
    %281 = reshape(%278, newshape=[5, 1, 11]) /* ty=Tensor[(5, 1, 11), float64] */;
    %282 = reshape(%279, newshape=[240]) /* ty=Tensor[(240), float64] */;
    %283 = reshape(%280, newshape=[2560]) /* ty=Tensor[(2560), float32] */;
    %284 = @func_2473(%281, %282, %283) /* ty=(uint32, Tensor[(1014), uint32], Tensor[(13, 6, 13), bool], Tensor[(10, 13, 8), float32], Tensor[(40, 26), float32], Tensor[(5, ?, 11), float32], Tensor[(5, ?, 11), bool], Tensor[(13, 6, 13), float64], Tensor[(10, 2, 12), float64], Tensor[(240), float64], Tensor[(336), float32], Tensor[(2560), float32]) */;
    %285 = %251.3;
    %286 = %260.3;
    %287 = %265.1;
    %288 = %270.1;
    %289 = %271.1;
    %290 = multiply(%276, %277) /* ty=Tensor[(429), int8] */;
    %291 = %284.9;
    (%285, %254, %286, meta[relay.Constant][20] /* ty=Tensor[(32, 80), bool] */, %287, %288, %var_6992, %289, %290, %291, meta[relay.Constant][22] /* ty=Tensor[(55), float64] */, %var_7015)
  };
  %292(%var_7019, %var_7020, %var_7021) /* ty=(Tensor[(336), float32], Tensor[(11, 8, 7), float64], Tensor[(13, 33), float64], Tensor[(32, 80), bool], Tensor[(11, 8, 7), float32], Tensor[(11, 5, 12), float64], Tensor[(660), float64], Tensor[(3, 10, 2), int16], Tensor[(429), int8], Tensor[(240), float64], Tensor[(55), float64], Tensor[(240), float64]) */
}

def @func_2296(%var_2294: Tensor[(9, 13, 9), bool]) -> Tensor[(9, 13, 9), bool] {
  @func_2293(%var_2294) /* ty=Tensor[(9, 13, 9), bool] */
}

def @func_1129(%var_1097: Tensor[(32), float64], %var_1102: Tensor[(60), float32], %var_1118: Tensor[(1, 336), float32]) -> (Tensor[(1, 9, 1), float64], Tensor[(4, 8), float64], Tensor[(1120), uint16], Tensor[(60), float32], Tensor[(14, 5, 16), bool], Tensor[(1, 9, 32), uint32], Tensor[(7, 8, 6), float32], Tensor[(8, 336), bool]) {
  %293 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 9, 1), float64] */, dtype="float64") /* ty=Tensor[(1, 9, 1), float64] */;
  %294 = cast(%var_1097, dtype="float64") /* ty=Tensor[(32), float64] */;
  %295 = reshape(%294, newshape=[4, 8]) /* ty=Tensor[(4, 8), float64] */;
  %296 = @func_1061(%295) /* ty=(Tensor[(4, 8), float64], Tensor[(7, 8, 6), float64], Tensor[(336), float32]) */;
  %297 = cast(%var_1102, dtype="float32") /* ty=Tensor[(60), float32] */;
  %298 = cast(%var_1102, dtype="float32") /* ty=Tensor[(60), float32] */;
  %299 = cast(%var_1102, dtype="float32") /* ty=Tensor[(60), float32] */;
  %300 = reshape(%297, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float32] */;
  %301 = reshape(%298, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float32] */;
  %302 = reshape(%299, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float32] */;
  %303 = @func_774(%300, %301, %302) /* ty=(Tensor[(3, 10, 2), int16], Tensor[(3, 10, 2), float64], Tensor[(14, 5, 16), bool], Tensor[(1120), uint16]) */;
  %304 = %303.3;
  %305 = cast(%304, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
  %306 = reshape(%305, newshape=[14, 5, 16]) /* ty=Tensor[(14, 5, 16), uint16] */;
  %307 = @func_162(%306) /* ty=(Tensor[(14, 5, 16), bool],) */;
  %308 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 9, 1), float64] */, dtype="uint32") /* ty=Tensor[(1, 9, 1), uint32] */;
  %309 = cast(%var_1097, dtype="uint32") /* ty=Tensor[(32), uint32] */;
  %310 = cast(%var_1118, dtype="float32") /* ty=Tensor[(1, 336), float32] */;
  %311 = reshape(%310, newshape=[7, 8, 6]) /* ty=Tensor[(7, 8, 6), float32] */;
  %312 = @func_841(%311) /* ty=(Tensor[(7, 8, 6), float32], Tensor[(7, 8, 6), float64]) */;
  %313 = cast(%var_1118, dtype="bool") /* ty=Tensor[(1, 336), bool] */;
  %314 = cast(meta[relay.Constant][24] /* ty=Tensor[(8, 336), float32] */, dtype="bool") /* ty=Tensor[(8, 336), bool] */;
  %315 = sigmoid(%293) /* ty=Tensor[(1, 9, 1), float64] */;
  %316 = %296.0;
  %317 = %307.0;
  %318 = minimum(%308, %309) /* ty=Tensor[(1, 9, 32), uint32] */;
  %319 = %312.0;
  %320 = less_equal(%313, %314) /* ty=Tensor[(8, 336), bool] */;
  (%315, %316, %304, %var_1102, %317, %318, %319, %320)
}

def @func_5681() -> Tensor[(11, 8, 7), float64] {
  %321 = @func_5059() /* ty=(Tensor[(11, 8, 7), float64],) */;
  %321.0
}

def @func_5683() -> Tensor[(11, 8, 7), float64] {
  @func_5681() /* ty=Tensor[(11, 8, 7), float64] */
}

def @func_6770(%var_6768: Tensor[(11, 8, 7), float64], %var_6769: Tensor[(13, 33), float64]) -> (Tensor[(11, 8, 7), float64], Tensor[(11, 8, 7), float32], Tensor[(11, 8, 7), float32], Tensor[(60), float32], Tensor[(11, 8, 7), float64], Tensor[(13, 33), float64]) {
  %351 = fn (%var_6737: Tensor[(11, 8, 7), float64], %var_6753: Tensor[(13, 33), float64]) -> (Tensor[(11, 8, 7), float64], Tensor[(11, 8, 7), float32], Tensor[(11, 8, 7), float32], Tensor[(60), float32], Tensor[(11, 8, 7), float64], Tensor[(13, 33), float64]) {
    %322 = @func_5059() /* ty=(Tensor[(11, 8, 7), float64],) */;
    %323 = %322.0;
    %324 = cast(%323, dtype="float64") /* ty=Tensor[(11, 8, 7), float64] */;
    %325 = rsqrt(%324) /* ty=Tensor[(11, 8, 7), float64] */;
    %326 = cast(%323, dtype="float64") /* ty=Tensor[(11, 8, 7), float64] */;
    %327 = shape_of(%325, dtype="int32") /* ty=Tensor[(3), int32] */;
    %328 = cast(%325, dtype="float64") /* ty=Tensor[(11, 8, 7), float64] */;
    %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %330 = cast(%var_6737, dtype="float32") /* ty=Tensor[(11, 8, 7), float32] */;
    %331 = shape_of(%323, dtype="int32") /* ty=Tensor[(3), int32] */;
    %332 = cast(%323, dtype="float32") /* ty=Tensor[(11, 8, 7), float32] */;
    %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %334 = cast(%323, dtype="float32") /* ty=Tensor[(11, 8, 7), float32] */;
    %335 = cast(%var_6753, dtype="float64") /* ty=Tensor[(13, 33), float64] */;
    %336 = reshape(%335, newshape=[11, 13, 3]) /* ty=Tensor[(11, 13, 3), float64] */;
    %337 = @func_6516(%336) /* ty=(Tensor[(11, 13, 3), float64], Tensor[(11, 13, 3), float64], Tensor[(60), float32]) */;
    %338 = cast(%323, dtype="float32") /* ty=Tensor[(11, 8, 7), float32] */;
    %339 = atan(%338) /* ty=Tensor[(11, 8, 7), float32] */;
    %340 = cast(%323, dtype="float64") /* ty=Tensor[(11, 8, 7), float64] */;
    %341 = shape_of(%339, dtype="int32") /* ty=Tensor[(3), int32] */;
    %342 = cast(%339, dtype="float64") /* ty=Tensor[(11, 8, 7), float64] */;
    %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %344 = cast(%var_6753, dtype="float64") /* ty=Tensor[(13, 33), float64] */;
    %345 = floor_divide(%328, %329) /* ty=Tensor[(11, 8, 7), float64] */;
    %346 = floor_mod(%332, %333) /* ty=Tensor[(11, 8, 7), float32] */;
    %347 = sinh(%334) /* ty=Tensor[(11, 8, 7), float32] */;
    %348 = %337.2;
    %349 = mod(%342, %343) /* ty=Tensor[(11, 8, 7), float64] */;
    %350 = rsqrt(%344) /* ty=Tensor[(13, 33), float64] */;
    (%345, %346, %347, %348, %349, %350)
  };
  %351(%var_6768, %var_6769) /* ty=(Tensor[(11, 8, 7), float64], Tensor[(11, 8, 7), float32], Tensor[(11, 8, 7), float32], Tensor[(60), float32], Tensor[(11, 8, 7), float64], Tensor[(13, 33), float64]) */
}

def @func_6518(%var_6517: Tensor[(11, 13, 3), float64]) -> (Tensor[(11, 13, 3), float64], Tensor[(11, 13, 3), float64], Tensor[(60), float32]) {
  %358 = fn (%var_6500: Tensor[(11, 13, 3), float64]) -> (Tensor[(11, 13, 3), float64], Tensor[(11, 13, 3), float64], Tensor[(60), float32]) {
    %352 = cast(%var_6500, dtype="float64") /* ty=Tensor[(11, 13, 3), float64] */;
    %353 = cast(%var_6500, dtype="float64") /* ty=Tensor[(11, 13, 3), float64] */;
    %354 = @func_5404() /* ty=(Tensor[(2560), float32], Tensor[(3, 10, 2), int16], Tensor[(60), float32]) */;
    %355 = asin(%352) /* ty=Tensor[(11, 13, 3), float64] */;
    %356 = acos(%353) /* ty=Tensor[(11, 13, 3), float64] */;
    %357 = %354.2;
    (%355, %356, %357)
  };
  %358(%var_6517) /* ty=(Tensor[(11, 13, 3), float64], Tensor[(11, 13, 3), float64], Tensor[(60), float32]) */
}

def @func_7213() -> (Tensor[(11, 8, 7), float64],) {
  %359 = @func_7169() /* ty=(Tensor[(11, 8, 7), float64],) */;
  %360 = %359.0;
  (%360,)
}

def @func_4586(%var_4585: Tensor[(32), float64]) -> (Tensor[(4, 8), float64], Tensor[(32), float64], Tensor[(1, 8, 7), float64]) {
  %369 = fn (%var_4578: Tensor[(32), float64]) -> (Tensor[(4, 8), float64], Tensor[(32), float64], Tensor[(1, 8, 7), float64]) {
    %361 = cast(%var_4578, dtype="float64") /* ty=Tensor[(32), float64] */;
    %362 = reshape(%361, newshape=[4, 8]) /* ty=Tensor[(4, 8), float64] */;
    %363 = @func_1061(%362) /* ty=(Tensor[(4, 8), float64], Tensor[(7, 8, 6), float64], Tensor[(336), float32]) */;
    %364 = @func_4473() /* ty=(Tensor[(1, 8, 7), float32],) */;
    %365 = %364.0;
    %366 = cast(%365, dtype="float64") /* ty=Tensor[(1, 8, 7), float64] */;
    %367 = %363.0;
    %368 = exp(%366) /* ty=Tensor[(1, 8, 7), float64] */;
    (%367, %var_4578, %368)
  };
  %369(%var_4585) /* ty=(Tensor[(4, 8), float64], Tensor[(32), float64], Tensor[(1, 8, 7), float64]) */
}

def @func_2249(%var_2248: Tensor[(10, 16, 16), float32]) -> (Tensor[(10, 16, 16), float32], Tensor[(60), float32], Tensor[(32), float64], Tensor[(60), float32], Tensor[(336), float32]) {
  %380 = fn (%var_2237: Tensor[(10, 16, 16), float32]) -> (Tensor[(10, 16, 16), float32], Tensor[(60), float32], Tensor[(32), float64], Tensor[(60), float32], Tensor[(336), float32]) {
    %370 = cast(%var_2237, dtype="float32") /* ty=Tensor[(10, 16, 16), float32] */;
    %371 = cast(meta[relay.Constant][25] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
    %372 = cast(meta[relay.Constant][26] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
    %373 = cast(meta[relay.Constant][27] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
    %374 = reshape(%371, newshape=[32]) /* ty=Tensor[(32), float64] */;
    %375 = reshape(%372, newshape=[60]) /* ty=Tensor[(60), float32] */;
    %376 = reshape(%373, newshape=[1, 336]) /* ty=Tensor[(1, 336), float32] */;
    %377 = @func_1129(%374, %375, %376) /* ty=(Tensor[(1, 9, 1), float64], Tensor[(4, 8), float64], Tensor[(1120), uint16], Tensor[(60), float32], Tensor[(14, 5, 16), bool], Tensor[(1, 9, 32), uint32], Tensor[(7, 8, 6), float32], Tensor[(8, 336), bool]) */;
    %378 = asinh(%370) /* ty=Tensor[(10, 16, 16), float32] */;
    %379 = %377.3;
    (%378, %379, meta[relay.Constant][25] /* ty=Tensor[(32), float64] */, meta[relay.Constant][26] /* ty=Tensor[(60), float32] */, meta[relay.Constant][27] /* ty=Tensor[(336), float32] */)
  };
  %380(%var_2248) /* ty=(Tensor[(10, 16, 16), float32], Tensor[(60), float32], Tensor[(32), float64], Tensor[(60), float32], Tensor[(336), float32]) */
}

def @func_4921() -> Tensor[(2560), bool] {
  %381 = fn () -> Tensor[(2560), bool] {
    @func_4851() /* ty=Tensor[(2560), bool] */
  };
  %381() /* ty=Tensor[(2560), bool] */
}

def @func_1335(%var_1333: uint32, %var_1334: Tensor[(13, 6, 13), uint32]) -> (Tensor[(13, 6, 13), bool],) {
  %385 = fn (%var_1325: uint32, %var_1326: Tensor[(13, 6, 13), uint32]) -> (Tensor[(13, 6, 13), bool],) {
    %382 = cast(%var_1325, dtype="bool") /* ty=bool */;
    %383 = cast(%var_1326, dtype="bool") /* ty=Tensor[(13, 6, 13), bool] */;
    %384 = less_equal(%382, %383) /* ty=Tensor[(13, 6, 13), bool] */;
    (%384,)
  };
  %385(%var_1333, %var_1334) /* ty=(Tensor[(13, 6, 13), bool],) */
}

def @func_778(%var_775: Tensor[(3, 10, 2), float32], %var_776: Tensor[(3, 10, 2), float32], %var_777: Tensor[(3, 10, 2), float32]) -> (Tensor[(3, 10, 2), int16], Tensor[(3, 10, 2), float64], Tensor[(14, 5, 16), bool], Tensor[(1120), uint16]) {
  %402 = fn (%var_740: Tensor[(3, 10, 2), float32], %var_741: Tensor[(3, 10, 2), float32], %var_755: Tensor[(3, 10, 2), float32]) -> (Tensor[(3, 10, 2), int16], Tensor[(3, 10, 2), float64], Tensor[(14, 5, 16), bool], Tensor[(1120), uint16]) {
    %386 = cast(%var_741, dtype="float32") /* ty=Tensor[(3, 10, 2), float32] */;
    %387 = shape_of(%var_740, dtype="int32") /* ty=Tensor[(3), int32] */;
    %388 = cast(%var_740, dtype="float32") /* ty=Tensor[(3, 10, 2), float32] */;
    %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %390 = multiply(%388, %389) /* ty=Tensor[(3, 10, 2), float32] */;
    %391 = cast(%var_755, dtype="int16") /* ty=Tensor[(3, 10, 2), int16] */;
    %392 = shape_of(%390, dtype="int32") /* ty=Tensor[(3), int32] */;
    %393 = cast(%390, dtype="int16") /* ty=Tensor[(3, 10, 2), int16] */;
    %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %395 = cast(%var_740, dtype="float64") /* ty=Tensor[(3, 10, 2), float64] */;
    %396 = cast(meta[relay.Constant][28] /* ty=Tensor[(1120), uint16] */, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
    %397 = reshape(%396, newshape=[14, 5, 16]) /* ty=Tensor[(14, 5, 16), uint16] */;
    %398 = @func_162(%397) /* ty=(Tensor[(14, 5, 16), bool],) */;
    %399 = bitwise_or(%393, %394) /* ty=Tensor[(3, 10, 2), int16] */;
    %400 = asin(%395) /* ty=Tensor[(3, 10, 2), float64] */;
    %401 = %398.0;
    (%399, %400, %401, meta[relay.Constant][28] /* ty=Tensor[(1120), uint16] */)
  };
  %402(%var_775, %var_776, %var_777) /* ty=(Tensor[(3, 10, 2), int16], Tensor[(3, 10, 2), float64], Tensor[(14, 5, 16), bool], Tensor[(1120), uint16]) */
}

def @func_4553() -> (Tensor[(7, 8, 6), float64], Tensor[(32, 1), float64], Tensor[(5, 14, 4), float32]) {
  %403 = cast(meta[relay.Constant][29] /* ty=Tensor[(32, 1), float64] */, dtype="float64") /* ty=Tensor[(32, 1), float64] */;
  %404 = reshape(%403, newshape=[4, 8]) /* ty=Tensor[(4, 8), float64] */;
  %405 = @func_1061(%404) /* ty=(Tensor[(4, 8), float64], Tensor[(7, 8, 6), float64], Tensor[(336), float32]) */;
  %406 = cast(meta[relay.Constant][30] /* ty=Tensor[(5, 14, 4), float64] */, dtype="float64") /* ty=Tensor[(5, 14, 4), float64] */;
  %407 = sin(%406) /* ty=Tensor[(5, 14, 4), float64] */;
  %408 = cast(%407, dtype="float32") /* ty=Tensor[(5, 14, 4), float32] */;
  %409 = %405.1;
  %410 = sqrt(%408) /* ty=Tensor[(5, 14, 4), float32] */;
  (%409, meta[relay.Constant][29] /* ty=Tensor[(32, 1), float64] */, %410)
}

def @func_5624(%var_5622: Tensor[(8, 8, 7), float32], %var_5623: Tensor[(104), float64]) -> (Tensor[(8, 8, 7), float32], uint32, uint32, Tensor[(104), float64]) {
  %424 = fn (%var_5576: Tensor[(8, 8, 7), float32], %var_5602: Tensor[(104), float64]) -> (Tensor[(8, 8, 7), float32], uint32, uint32, Tensor[(104), float64]) {
    %411 = @func_5349() /* ty=(Tensor[(?, 8, 7), float32],) */;
    %412 = %411.0;
    %413 = cast(%412, dtype="uint32") /* ty=Tensor[(?, 8, 7), uint32] */;
    %414 = cast(%var_5576, dtype="uint32") /* ty=Tensor[(8, 8, 7), uint32] */;
    %415 = minimum(%413, %414) /* ty=Tensor[(8, 8, 7), uint32] */;
    %416 = cast(%415, dtype="float32") /* ty=Tensor[(8, 8, 7), float32] */;
    %417 = cast(meta[relay.Constant][31] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %418 = cast(%var_5602, dtype="float64") /* ty=Tensor[(104), float64] */;
    %419 = reshape(%417, newshape=[]) /* ty=uint32 */;
    %420 = reshape(%418, newshape=[104]) /* ty=Tensor[(104), float64] */;
    %421 = @func_5529(%419, %420) /* ty=(Tensor[(11, 8, 7), float64], Tensor[(13, 6, 13), bool], uint32, Tensor[(1014), uint32], Tensor[(2, 4, 13), float32], Tensor[(104), float64], Tensor[(1, 8, 7), float32]) */;
    %422 = erf(%416) /* ty=Tensor[(8, 8, 7), float32] */;
    %423 = %421.2;
    (%422, %423, meta[relay.Constant][31] /* ty=uint32 */, %var_5602)
  };
  %424(%var_5622, %var_5623) /* ty=(Tensor[(8, 8, 7), float32], uint32, uint32, Tensor[(104), float64]) */
}

def @func_4555() -> (Tensor[(7, 8, 6), float64], Tensor[(32, 1), float64], Tensor[(5, 14, 4), float32]) {
  @func_4553() /* ty=(Tensor[(7, 8, 6), float64], Tensor[(32, 1), float64], Tensor[(5, 14, 4), float32]) */
}

def @func_4355(%var_4353: Tensor[(5, 8, 1), float32]) -> (Tensor[(5, 8, 1), float32], Tensor[(60), float32], Tensor[(2560), float32]) {
  @func_4352(%var_4353) /* ty=(Tensor[(5, 8, 1), float32], Tensor[(60), float32], Tensor[(2560), float32]) */
}

def @func_6827() -> (Tensor[(9, 9, 7), float32], Tensor[(13, 6, 13), bool], Tensor[(1014), float32]) {
  %436 = fn () -> (Tensor[(9, 9, 7), float32], Tensor[(13, 6, 13), bool], Tensor[(1014), float32]) {
    %425 = @func_4401() /* ty=(Tensor[(9, 9, 7), float32], Tensor[(40), float32], Tensor[(2560), float64]) */;
    %426 = cast(meta[relay.Constant][32] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %427 = cast(meta[relay.Constant][33] /* ty=Tensor[(1014), uint32] */, dtype="uint32") /* ty=Tensor[(1014), uint32] */;
    %428 = reshape(%426, newshape=[]) /* ty=uint32 */;
    %429 = reshape(%427, newshape=[13, 6, 13]) /* ty=Tensor[(13, 6, 13), uint32] */;
    %430 = @func_1332(%428, %429) /* ty=(Tensor[(13, 6, 13), bool],) */;
    %431 = cast(meta[relay.Constant][32] /* ty=uint32 */, dtype="float32") /* ty=float32 */;
    %432 = cast(meta[relay.Constant][33] /* ty=Tensor[(1014), uint32] */, dtype="float32") /* ty=Tensor[(1014), float32] */;
    %433 = %425.0;
    %434 = %430.0;
    %435 = floor_divide(%431, %432) /* ty=Tensor[(1014), float32] */;
    (%433, %434, %435)
  };
  %436() /* ty=(Tensor[(9, 9, 7), float32], Tensor[(13, 6, 13), bool], Tensor[(1014), float32]) */
}

def @func_3657(%var_3655: Tensor[(14, 2, 13), float32], %var_3656: Tensor[(180), float32]) -> (Tensor[(10, 2, 12), float64], Tensor[(240), float64], Tensor[(14, 2, 13), int32], Tensor[(4, 8), float64], Tensor[(180), float32], Tensor[(60), float32]) {
  @func_3653(%var_3655, %var_3656) /* ty=(Tensor[(10, 2, 12), float64], Tensor[(240), float64], Tensor[(14, 2, 13), int32], Tensor[(4, 8), float64], Tensor[(180), float32], Tensor[(60), float32]) */
}

def @func_4829() -> (Tensor[(7, 8, 6), float64], Tensor[(2560), float64], Tensor[(14, 2, 11), int16], Tensor[(308), int16]) {
  @func_4827() /* ty=(Tensor[(7, 8, 6), float64], Tensor[(2560), float64], Tensor[(14, 2, 11), int16], Tensor[(308), int16]) */
}

def @func_6069() -> (Tensor[(2560), bool],) {
  %437 = @func_5456() /* ty=(Tensor[(2560), bool],) */;
  %438 = %437.0;
  (%438,)
}

def @func_1825(%var_1758: Tensor[(3, 15, 8), uint64], %var_1759: Tensor[(3, 15, 8), uint64], %var_1819: Tensor[(1120), uint16]) -> (Tensor[(3, 15, 8), uint64], Tensor[(3, 15, 8), bool], Tensor[(3, 15, 8), float32], Tensor[(14, 5, 16), bool], Tensor[(1120), uint16]) {
  %439 = cast(%var_1759, dtype="uint64") /* ty=Tensor[(3, 15, 8), uint64] */;
  %440 = shape_of(%var_1758, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%var_1758, dtype="uint64") /* ty=Tensor[(3, 15, 8), uint64] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %443 = cast(%var_1759, dtype="float64") /* ty=Tensor[(3, 15, 8), float64] */;
  %444 = log10(%443) /* ty=Tensor[(3, 15, 8), float64] */;
  %445 = cast(%444, dtype="bool") /* ty=Tensor[(3, 15, 8), bool] */;
  %446 = shape_of(%var_1759, dtype="int32") /* ty=Tensor[(3), int32] */;
  %447 = cast(%var_1759, dtype="bool") /* ty=Tensor[(3, 15, 8), bool] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %449 = cast(%444, dtype="float32") /* ty=Tensor[(3, 15, 8), float32] */;
  %450 = cast(%var_1819, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
  %451 = reshape(%450, newshape=[14, 5, 16]) /* ty=Tensor[(14, 5, 16), uint16] */;
  %452 = @func_162(%451) /* ty=(Tensor[(14, 5, 16), bool],) */;
  %453 = logical_xor(%441, %442) /* ty=Tensor[(3, 15, 8), uint64] */;
  %454 = logical_or(%447, %448) /* ty=Tensor[(3, 15, 8), bool] */;
  %455 = cos(%449) /* ty=Tensor[(3, 15, 8), float32] */;
  %456 = %452.0;
  (%453, %454, %455, %456, %var_1819)
}

def @func_4710(%var_4709: Tensor[(1, 264), uint64]) -> (Tensor[(9, 9, 7), float32], Tensor[(12, 11, 2), float64], uint64, Tensor[(1, 264), uint64]) {
  %465 = fn (%var_4689: Tensor[(1, 264), uint64]) -> (Tensor[(9, 9, 7), float32], Tensor[(12, 11, 2), float64], uint64, Tensor[(1, 264), uint64]) {
    %457 = @func_4401() /* ty=(Tensor[(9, 9, 7), float32], Tensor[(40), float32], Tensor[(2560), float64]) */;
    %458 = cast(meta[relay.Constant][34] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %459 = cast(%var_4689, dtype="uint64") /* ty=Tensor[(1, 264), uint64] */;
    %460 = reshape(%458, newshape=[]) /* ty=uint64 */;
    %461 = reshape(%459, newshape=[12, 11, 2]) /* ty=Tensor[(12, 11, 2), uint64] */;
    %462 = @func_4155(%460, %461) /* ty=(Tensor[(12, 11, 2), uint64], Tensor[(12, 11, 2), float64]) */;
    %463 = %457.0;
    %464 = %462.1;
    (%463, %464, meta[relay.Constant][34] /* ty=uint64 */, %var_4689)
  };
  %465(%var_4709) /* ty=(Tensor[(9, 9, 7), float32], Tensor[(12, 11, 2), float64], uint64, Tensor[(1, 264), uint64]) */
}

def @func_3098(%var_3095: Tensor[(10, 14, 7), float32], %var_3096: Tensor[(10, 14, 7), float32], %var_3097: Tensor[(32), float64]) -> (Tensor[(10, 14, 7), float32], Tensor[(4, 8), float64], Tensor[(32), float64]) {
  @func_3093(%var_3095, %var_3096, %var_3097) /* ty=(Tensor[(10, 14, 7), float32], Tensor[(4, 8), float64], Tensor[(32), float64]) */
}

def @func_7471(%var_7468: Tensor[(40), float32], %var_7469: Tensor[(364), float32], %var_7470: Tensor[(180), float32]) -> (Tensor[(60), float32], Tensor[(40), float32], Tensor[(60), float32], Tensor[(364), float32], Tensor[(180), float32], Tensor[(7, 8, 6), float32]) {
  @func_7466(%var_7468, %var_7469, %var_7470) /* ty=(Tensor[(60), float32], Tensor[(40), float32], Tensor[(60), float32], Tensor[(364), float32], Tensor[(180), float32], Tensor[(7, 8, 6), float32]) */
}

def @func_5456() -> (Tensor[(2560), bool],) {
  %466 = @func_4920() /* ty=Tensor[(2560), bool] */;
  (%466,)
}

def @func_7030() -> Tensor[(7, 8, 6), float64] {
  %467 = @func_4553() /* ty=(Tensor[(7, 8, 6), float64], Tensor[(32, 1), float64], Tensor[(5, 14, 4), float32]) */;
  %467.0
}

def @func_5125() -> Tensor[(9, 9, 7), float32] {
  @func_5123() /* ty=Tensor[(9, 9, 7), float32] */
}

def @main(%var_7519: Tensor[(11, 12, 3), float64], %var_7520: Tensor[(11, 12, 3), float64]) -> (Tensor[(11, 12, 3), float64], Tensor[(11, 12, 3), float64]) {
  %468 = cast(%var_7520, dtype="float64") /* ty=Tensor[(11, 12, 3), float64] */;
  %469 = shape_of(%var_7519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %470 = cast(%var_7519, dtype="float64") /* ty=Tensor[(11, 12, 3), float64] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %472 = cast(%var_7519, dtype="float64") /* ty=Tensor[(11, 12, 3), float64] */;
  %473 = divide(%470, %471) /* ty=Tensor[(11, 12, 3), float64] */;
  %474 = log2(%472) /* ty=Tensor[(11, 12, 3), float64] */;
  (%473, %474)
}

def @func_5834(%var_5832: Tensor[(6, 13, 12), int32], %var_5833: Tensor[(567), float32]) -> (Tensor[(6, 13, 12), bool], Tensor[(6, 13, 12), bool], Tensor[(60), float32], Tensor[(567), float32]) {
  %498 = fn (%var_5780: Tensor[(6, 13, 12), int32], %var_5820: Tensor[(567), float32]) -> (Tensor[(6, 13, 12), bool], Tensor[(6, 13, 12), bool], Tensor[(60), float32], Tensor[(567), float32]) {
    %475 = cast(%var_5780, dtype="int32") /* ty=Tensor[(6, 13, 12), int32] */;
    %476 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(6, 13, 12), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %477 = cast(meta[relay.Constant][35] /* ty=Tensor[(6, 13, 12), int32] */, dtype="int32") /* ty=Tensor[(6, 13, 12), int32] */;
    %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %479 = bitwise_or(%477, %478) /* ty=Tensor[(6, 13, 12), int32] */;
    %480 = cast(%479, dtype="bool") /* ty=Tensor[(6, 13, 12), bool] */;
    %481 = shape_of(%var_5780, dtype="int32") /* ty=Tensor[(3), int32] */;
    %482 = cast(%var_5780, dtype="bool") /* ty=Tensor[(6, 13, 12), bool] */;
    %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %484 = cast(%var_5780, dtype="float64") /* ty=Tensor[(6, 13, 12), float64] */;
    %485 = sqrt(%484) /* ty=Tensor[(6, 13, 12), float64] */;
    %486 = cast(%485, dtype="float32") /* ty=Tensor[(6, 13, 12), float32] */;
    %487 = asinh(%486) /* ty=Tensor[(6, 13, 12), float32] */;
    %488 = cast(%var_5780, dtype="bool") /* ty=Tensor[(6, 13, 12), bool] */;
    %489 = shape_of(%487, dtype="int32") /* ty=Tensor[(3), int32] */;
    %490 = cast(%487, dtype="bool") /* ty=Tensor[(6, 13, 12), bool] */;
    %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %492 = cast(%var_5820, dtype="float32") /* ty=Tensor[(567), float32] */;
    %493 = reshape(%492, newshape=[9, 9, 7]) /* ty=Tensor[(9, 9, 7), float32] */;
    %494 = @func_4520(%493) /* ty=(Tensor[(9, 9, 7), int64], Tensor[(60), float32], Tensor[(6, 30), float32], Tensor[(60), float32]) */;
    %495 = less_equal(%482, %483) /* ty=Tensor[(6, 13, 12), bool] */;
    %496 = equal(%490, %491) /* ty=Tensor[(6, 13, 12), bool] */;
    %497 = %494.3;
    (%495, %496, %497, %var_5820)
  };
  %498(%var_5832, %var_5833) /* ty=(Tensor[(6, 13, 12), bool], Tensor[(6, 13, 12), bool], Tensor[(60), float32], Tensor[(567), float32]) */
}

def @func_4851() -> Tensor[(2560), bool] {
  %499 = @func_4496() /* ty=(Tensor[(2560), float64],) */;
  %500 = %499.0;
  %501 = cast(meta[relay.Constant][36] /* ty=Tensor[(2560), float64] */, dtype="bool") /* ty=Tensor[(2560), bool] */;
  %502 = shape_of(%500, dtype="int32") /* ty=Tensor[(1), int32] */;
  %503 = cast(%500, dtype="bool") /* ty=Tensor[(2560), bool] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?), bool] */;
  equal(%503, %504) /* ty=Tensor[(2560), bool] */
}

def @func_5752(%var_5749: Tensor[(7, 14, 14), bool], %var_5750: Tensor[(7, 14, 14), bool], %var_5751: Tensor[(7, 14, 14), bool]) -> (Tensor[(7, 8, 6), float64], Tensor[(3, 10, 2), int16], Tensor[(7, 14, 14), bool], Tensor[(10, 2, 12), float64], Tensor[(32), float64]) {
  %523 = fn (%var_5684: Tensor[(7, 14, 14), bool], %var_5685: Tensor[(7, 14, 14), bool], %var_5728: Tensor[(7, 14, 14), bool]) -> (Tensor[(7, 8, 6), float64], Tensor[(3, 10, 2), int16], Tensor[(7, 14, 14), bool], Tensor[(10, 2, 12), float64], Tensor[(32), float64]) {
    %505 = @func_4553() /* ty=(Tensor[(7, 8, 6), float64], Tensor[(32, 1), float64], Tensor[(5, 14, 4), float32]) */;
    %506 = @func_5404() /* ty=(Tensor[(2560), float32], Tensor[(3, 10, 2), int16], Tensor[(60), float32]) */;
    %507 = cast(%var_5685, dtype="bool") /* ty=Tensor[(7, 14, 14), bool] */;
    %508 = shape_of(%var_5684, dtype="int32") /* ty=Tensor[(3), int32] */;
    %509 = cast(%var_5684, dtype="bool") /* ty=Tensor[(7, 14, 14), bool] */;
    %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %511 = logical_and(%509, %510) /* ty=Tensor[(7, 14, 14), bool] */;
    %512 = cast(%var_5728, dtype="bool") /* ty=Tensor[(7, 14, 14), bool] */;
    %513 = shape_of(%511, dtype="int32") /* ty=Tensor[(3), int32] */;
    %514 = cast(%511, dtype="bool") /* ty=Tensor[(7, 14, 14), bool] */;
    %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %516 = cast(meta[relay.Constant][37] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
    %517 = reshape(%516, newshape=[2, 2, 8]) /* ty=Tensor[(2, 2, 8), float64] */;
    %518 = @func_2034(%517) /* ty=(Tensor[(10, 2, 12), float64], Tensor[(240), float64], Tensor[(2, 2, 8), float32], Tensor[(14, 5, 16), bool], Tensor[(1120), uint16]) */;
    %519 = %505.0;
    %520 = %506.1;
    %521 = greater_equal(%514, %515) /* ty=Tensor[(7, 14, 14), bool] */;
    %522 = %518.0;
    (%519, %520, %521, %522, meta[relay.Constant][37] /* ty=Tensor[(32), float64] */)
  };
  %523(%var_5749, %var_5750, %var_5751) /* ty=(Tensor[(7, 8, 6), float64], Tensor[(3, 10, 2), int16], Tensor[(7, 14, 14), bool], Tensor[(10, 2, 12), float64], Tensor[(32), float64]) */
}

def @func_164(%var_163: Tensor[(14, 5, 16), uint16]) -> (Tensor[(14, 5, 16), bool],) {
  %529 = fn (%var_149: Tensor[(14, 5, 16), uint16]) -> (Tensor[(14, 5, 16), bool],) {
    %524 = cast(meta[relay.Constant][38] /* ty=Tensor[(14, 5, 16), uint16] */, dtype="bool") /* ty=Tensor[(14, 5, 16), bool] */;
    %525 = shape_of(%var_149, dtype="int32") /* ty=Tensor[(3), int32] */;
    %526 = cast(%var_149, dtype="bool") /* ty=Tensor[(14, 5, 16), bool] */;
    %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %528 = equal(%526, %527) /* ty=Tensor[(14, 5, 16), bool] */;
    (%528,)
  };
  %529(%var_163) /* ty=(Tensor[(14, 5, 16), bool],) */
}

def @func_841(%var_796: Tensor[(7, 8, 6), float32]) -> (Tensor[(7, 8, 6), float32], Tensor[(7, 8, 6), float64]) {
  %530 = cast(%var_796, dtype="float32") /* ty=Tensor[(7, 8, 6), float32] */;
  %531 = cast(%var_796, dtype="float64") /* ty=Tensor[(7, 8, 6), float64] */;
  %532 = rsqrt(%530) /* ty=Tensor[(7, 8, 6), float32] */;
  %533 = sigmoid(%531) /* ty=Tensor[(7, 8, 6), float64] */;
  (%532, %533)
}

def @func_1830(%var_1827: Tensor[(3, 15, 8), uint64], %var_1828: Tensor[(3, 15, 8), uint64], %var_1829: Tensor[(1120), uint16]) -> (Tensor[(3, 15, 8), uint64], Tensor[(3, 15, 8), bool], Tensor[(3, 15, 8), float32], Tensor[(14, 5, 16), bool], Tensor[(1120), uint16]) {
  @func_1825(%var_1827, %var_1828, %var_1829) /* ty=(Tensor[(3, 15, 8), uint64], Tensor[(3, 15, 8), bool], Tensor[(3, 15, 8), float32], Tensor[(14, 5, 16), bool], Tensor[(1120), uint16]) */
}

def @func_6578(%var_6577: Tensor[(32), float64]) -> (Tensor[(336), float32], Tensor[(32), float64], Tensor[(2560), bool], Tensor[(2560), float32], Tensor[(2, 2, 10), bool], Tensor[(40), uint8]) {
  %549 = fn (%var_6544: Tensor[(32), float64]) -> (Tensor[(336), float32], Tensor[(32), float64], Tensor[(2560), bool], Tensor[(2560), float32], Tensor[(2, 2, 10), bool], Tensor[(40), uint8]) {
    %534 = cast(%var_6544, dtype="float64") /* ty=Tensor[(32), float64] */;
    %535 = reshape(%534, newshape=[4, 8]) /* ty=Tensor[(4, 8), float64] */;
    %536 = @func_1061(%535) /* ty=(Tensor[(4, 8), float64], Tensor[(7, 8, 6), float64], Tensor[(336), float32]) */;
    %537 = @func_6069() /* ty=(Tensor[(2560), bool],) */;
    %538 = %537.0;
    %539 = cast(%538, dtype="float32") /* ty=Tensor[(2560), float32] */;
    %540 = cos(%539) /* ty=Tensor[(2560), float32] */;
    %541 = cast(%540, dtype="float32") /* ty=Tensor[(2560), float32] */;
    %542 = cast(meta[relay.Constant][39] /* ty=Tensor[(40), uint8] */, dtype="uint8") /* ty=Tensor[(40), uint8] */;
    %543 = reshape(%542, newshape=[2, 2, 10]) /* ty=Tensor[(2, 2, 10), uint8] */;
    %544 = @func_1943(%543) /* ty=(Tensor[(2, 2, 10), bool],) */;
    %545 = %536.2;
    %546 = @func_4851() /* ty=Tensor[(2560), bool] */;
    %547 = sin(%541) /* ty=Tensor[(2560), float32] */;
    %548 = %544.0;
    (%545, %var_6544, %546, %547, %548, meta[relay.Constant][39] /* ty=Tensor[(40), uint8] */)
  };
  %549(%var_6577) /* ty=(Tensor[(336), float32], Tensor[(32), float64], Tensor[(2560), bool], Tensor[(2560), float32], Tensor[(2, 2, 10), bool], Tensor[(40), uint8]) */
}

def @func_7266(%var_7265: Tensor[(12, 3, 3), float64]) -> (Tensor[(12, 3, 3), uint64],) {
  %557 = fn (%var_7232: Tensor[(12, 3, 3), float64]) -> (Tensor[(12, 3, 3), uint64],) {
    %550 = cast(%var_7232, dtype="float64") /* ty=Tensor[(12, 3, 3), float64] */;
    %551 = sqrt(%550) /* ty=Tensor[(12, 3, 3), float64] */;
    %552 = cast(%var_7232, dtype="uint64") /* ty=Tensor[(12, 3, 3), uint64] */;
    %553 = shape_of(%551, dtype="int32") /* ty=Tensor[(3), int32] */;
    %554 = cast(%551, dtype="uint64") /* ty=Tensor[(12, 3, 3), uint64] */;
    %555 = dyn.reshape(%552, %553, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %556 = add(%554, %555) /* ty=Tensor[(12, 3, 3), uint64] */;
    (%556,)
  };
  %557(%var_7265) /* ty=(Tensor[(12, 3, 3), uint64],) */
}

def @func_2034(%var_2004: Tensor[(2, 2, 8), float64]) -> (Tensor[(10, 2, 12), float64], Tensor[(240), float64], Tensor[(2, 2, 8), float32], Tensor[(14, 5, 16), bool], Tensor[(1120), uint16]) {
  %558 = cast(meta[relay.Constant][40] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %559 = cast(meta[relay.Constant][40] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %560 = reshape(%558, newshape=[10, 2, 12]) /* ty=Tensor[(10, 2, 12), float64] */;
  %561 = reshape(%559, newshape=[10, 2, 12]) /* ty=Tensor[(10, 2, 12), float64] */;
  %562 = cast(%var_2004, dtype="float64") /* ty=Tensor[(2, 2, 8), float64] */;
  %563 = sqrt(%562) /* ty=Tensor[(2, 2, 8), float64] */;
  %564 = cast(%563, dtype="float32") /* ty=Tensor[(2, 2, 8), float32] */;
  %565 = cast(meta[relay.Constant][41] /* ty=Tensor[(1120), uint16] */, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
  %566 = reshape(%565, newshape=[14, 5, 16]) /* ty=Tensor[(14, 5, 16), uint16] */;
  %567 = @func_162(%566) /* ty=(Tensor[(14, 5, 16), bool],) */;
  %568 = @func_1865(%560, %561) /* ty=Tensor[(10, 2, 12), float64] */;
  %569 = erf(%564) /* ty=Tensor[(2, 2, 8), float32] */;
  %570 = %567.0;
  (%568, meta[relay.Constant][40] /* ty=Tensor[(240), float64] */, %569, %570, meta[relay.Constant][41] /* ty=Tensor[(1120), uint16] */)
}

def @func_4159(%var_4157: uint64, %var_4158: Tensor[(12, 11, 2), uint64]) -> (Tensor[(12, 11, 2), uint64], Tensor[(12, 11, 2), float64]) {
  @func_4155(%var_4157, %var_4158) /* ty=(Tensor[(12, 11, 2), uint64], Tensor[(12, 11, 2), float64]) */
}

def @func_6159() -> (Tensor[(2560), float64],) {
  %573 = fn () -> (Tensor[(2560), float64],) {
    %571 = @func_4496() /* ty=(Tensor[(2560), float64],) */;
    %572 = %571.0;
    (%572,)
  };
  %573() /* ty=(Tensor[(2560), float64],) */
}

def @func_5349() -> (Tensor[(?, 8, 7), float32],) {
  %574 = @func_4903() /* ty=Tensor[(1, 8, 7), float64] */;
  %575 = cast(%574, dtype="float32") /* ty=Tensor[(1, 8, 7), float32] */;
  %576 = sin(%575) /* ty=Tensor[(1, 8, 7), float32] */;
  %577 = cast(%576, dtype="float32") /* ty=Tensor[(1, 8, 7), float32] */;
  %578 = shape_of(%574, dtype="int32") /* ty=Tensor[(3), int32] */;
  %579 = cast(%574, dtype="float32") /* ty=Tensor[(1, 8, 7), float32] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %581 = power(%579, %580) /* ty=Tensor[(?, 8, 7), float32] */;
  (%581,)
}

def @func_6042(%var_5968: Tensor[(3, 10, 2), int16], %var_6008: Tensor[(11, 8, 7), float64], %var_6036: Tensor[(180), float32]) -> (Tensor[(3, 10, 2), int8], Tensor[(2560), bool], Tensor[(11, 8, 7), float64], Tensor[(1, 8, 7), float32], Tensor[(11, 8, 7), float64], Tensor[(60), float32], Tensor[(180), float32]) {
  %582 = @func_5404() /* ty=(Tensor[(2560), float32], Tensor[(3, 10, 2), int16], Tensor[(60), float32]) */;
  %583 = %582.1;
  %584 = cast(%var_5968, dtype="int8") /* ty=Tensor[(3, 10, 2), int8] */;
  %585 = shape_of(%583, dtype="int32") /* ty=Tensor[(3), int32] */;
  %586 = cast(%583, dtype="int8") /* ty=Tensor[(3, 10, 2), int8] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %588 = @func_4473() /* ty=(Tensor[(1, 8, 7), float32],) */;
  %589 = @func_5059() /* ty=(Tensor[(11, 8, 7), float64],) */;
  %590 = %589.0;
  %591 = cast(%590, dtype="float64") /* ty=Tensor[(11, 8, 7), float64] */;
  %592 = log2(%591) /* ty=Tensor[(11, 8, 7), float64] */;
  %593 = cast(%var_6008, dtype="bool") /* ty=Tensor[(11, 8, 7), bool] */;
  %594 = shape_of(%592, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(%592, dtype="bool") /* ty=Tensor[(11, 8, 7), bool] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %597 = equal(%595, %596) /* ty=Tensor[(11, 8, 7), bool] */;
  %598 = cast(%597, dtype="float64") /* ty=Tensor[(11, 8, 7), float64] */;
  %599 = cast(%var_6036, dtype="float32") /* ty=Tensor[(180), float32] */;
  %600 = cast(%var_5968, dtype="float32") /* ty=Tensor[(3, 10, 2), float32] */;
  %601 = reshape(%599, newshape=[2, 10, 9]) /* ty=Tensor[(2, 10, 9), float32] */;
  %602 = reshape(%600, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %603 = @func_1246(%601, %602) /* ty=(Tensor[(2, 10, 9), float32], Tensor[(4, 8), float64], Tensor[(32), float64], Tensor[(60), float32], Tensor[(24, 14), float32]) */;
  %604 = logical_xor(%586, %587) /* ty=Tensor[(3, 10, 2), int8] */;
  %605 = @func_4851() /* ty=Tensor[(2560), bool] */;
  %606 = @func_5681() /* ty=Tensor[(11, 8, 7), float64] */;
  %607 = %588.0;
  %608 = cosh(%598) /* ty=Tensor[(11, 8, 7), float64] */;
  %609 = %603.3;
  (%604, %605, %606, %607, %608, %609, %var_6036)
}

def @func_5287() -> (Tensor[(2560), bool],) {
  @func_5285() /* ty=(Tensor[(2560), bool],) */
}

def @func_4930() -> Tensor[(9, 9, 7), float32] {
  %611 = fn () -> Tensor[(9, 9, 7), float32] {
    %610 = @func_4401() /* ty=(Tensor[(9, 9, 7), float32], Tensor[(40), float32], Tensor[(2560), float64]) */;
    %610.0
  };
  %611() /* ty=Tensor[(9, 9, 7), float32] */
}

def @func_2391(%var_2389: Tensor[(10, 13, 8), float32]) -> (Tensor[(10, 13, 8), float32],) {
  @func_2388(%var_2389) /* ty=(Tensor[(10, 13, 8), float32],) */
}

def @func_6223() -> Tensor[(2560), bool] {
  %612 = fn () -> Tensor[(2560), bool] {
    @func_4920() /* ty=Tensor[(2560), bool] */
  };
  %612() /* ty=Tensor[(2560), bool] */
}

def @func_6838(%var_6837: Tensor[(13, 11, 14), int32]) -> (Tensor[(13, 11, 14), int32],) {
  %618 = fn (%var_6829: Tensor[(13, 11, 14), int32]) -> (Tensor[(13, 11, 14), int32],) {
    %613 = cast(%var_6829, dtype="int32") /* ty=Tensor[(13, 11, 14), int32] */;
    %614 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(13, 11, 14), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %615 = cast(meta[relay.Constant][42] /* ty=Tensor[(13, 11, 14), int32] */, dtype="int32") /* ty=Tensor[(13, 11, 14), int32] */;
    %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %617 = maximum(%615, %616) /* ty=Tensor[(13, 11, 14), int32] */;
    (%617,)
  };
  %618(%var_6837) /* ty=(Tensor[(13, 11, 14), int32],) */
}

def @func_1868(%var_1866: Tensor[(10, 2, 12), float64], %var_1867: Tensor[(10, 2, 12), float64]) -> Tensor[(10, 2, 12), float64] {
  %623 = fn (%var_1848: Tensor[(10, 2, 12), float64], %var_1849: Tensor[(10, 2, 12), float64]) -> Tensor[(10, 2, 12), float64] {
    %619 = cast(%var_1849, dtype="float64") /* ty=Tensor[(10, 2, 12), float64] */;
    %620 = shape_of(%var_1848, dtype="int32") /* ty=Tensor[(3), int32] */;
    %621 = cast(%var_1848, dtype="float64") /* ty=Tensor[(10, 2, 12), float64] */;
    %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    divide(%621, %622) /* ty=Tensor[(10, 2, 12), float64] */
  };
  %623(%var_1866, %var_1867) /* ty=Tensor[(10, 2, 12), float64] */
}

def @func_4096() -> (Tensor[(9, 9, 7), float32],) {
  %628 = fn () -> (Tensor[(9, 9, 7), float32],) {
    %624 = cast(meta[relay.Constant][43] /* ty=Tensor[(9, 9, 7), float64] */, dtype="float64") /* ty=Tensor[(9, 9, 7), float64] */;
    %625 = acos(%624) /* ty=Tensor[(9, 9, 7), float64] */;
    %626 = cast(%625, dtype="float32") /* ty=Tensor[(9, 9, 7), float32] */;
    %627 = sinh(%626) /* ty=Tensor[(9, 9, 7), float32] */;
    (%627,)
  };
  %628() /* ty=(Tensor[(9, 9, 7), float32],) */
}

def @func_2037(%var_2035: Tensor[(2, 2, 8), float64]) -> (Tensor[(10, 2, 12), float64], Tensor[(240), float64], Tensor[(2, 2, 8), float32], Tensor[(14, 5, 16), bool], Tensor[(1120), uint16]) {
  @func_2034(%var_2035) /* ty=(Tensor[(10, 2, 12), float64], Tensor[(240), float64], Tensor[(2, 2, 8), float32], Tensor[(14, 5, 16), bool], Tensor[(1120), uint16]) */
}

def @func_7032() -> Tensor[(7, 8, 6), float64] {
  @func_7030() /* ty=Tensor[(7, 8, 6), float64] */
}

def @func_5061() -> (Tensor[(11, 8, 7), float64],) {
  @func_5059() /* ty=(Tensor[(11, 8, 7), float64],) */
}

def @func_4319(%var_4317: Tensor[(180), float32], %var_4318: Tensor[(60), float32]) -> (Tensor[(9, 9, 7), float32], Tensor[(32), float64], Tensor[(180), float32], Tensor[(60), float32]) {
  %637 = fn (%var_4297: Tensor[(180), float32], %var_4298: Tensor[(60), float32]) -> (Tensor[(9, 9, 7), float32], Tensor[(32), float64], Tensor[(180), float32], Tensor[(60), float32]) {
    %629 = @func_4095() /* ty=(Tensor[(9, 9, 7), float32],) */;
    %630 = cast(%var_4297, dtype="float32") /* ty=Tensor[(180), float32] */;
    %631 = cast(%var_4298, dtype="float32") /* ty=Tensor[(60), float32] */;
    %632 = reshape(%630, newshape=[2, 10, 9]) /* ty=Tensor[(2, 10, 9), float32] */;
    %633 = reshape(%631, newshape=[60]) /* ty=Tensor[(60), float32] */;
    %634 = @func_1246(%632, %633) /* ty=(Tensor[(2, 10, 9), float32], Tensor[(4, 8), float64], Tensor[(32), float64], Tensor[(60), float32], Tensor[(24, 14), float32]) */;
    %635 = %629.0;
    %636 = %634.2;
    (%635, %636, %var_4297, %var_4298)
  };
  %637(%var_4317, %var_4318) /* ty=(Tensor[(9, 9, 7), float32], Tensor[(32), float64], Tensor[(180), float32], Tensor[(60), float32]) */
}

def @func_4743(%var_4741: Tensor[(14, 2, 11), int16], %var_4742: Tensor[(14, 2, 11), int16]) -> (Tensor[(14, 2, 11), int16],) {
  %643 = fn (%var_4733: Tensor[(14, 2, 11), int16], %var_4734: Tensor[(14, 2, 11), int16]) -> (Tensor[(14, 2, 11), int16],) {
    %638 = cast(%var_4734, dtype="int16") /* ty=Tensor[(14, 2, 11), int16] */;
    %639 = shape_of(%var_4733, dtype="int32") /* ty=Tensor[(3), int32] */;
    %640 = cast(%var_4733, dtype="int16") /* ty=Tensor[(14, 2, 11), int16] */;
    %641 = dyn.reshape(%638, %639, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %642 = right_shift(%640, %641) /* ty=Tensor[(14, 2, 11), int16] */;
    (%642,)
  };
  %643(%var_4741, %var_4742) /* ty=(Tensor[(14, 2, 11), int16],) */
}

def @func_5532(%var_5530: uint32, %var_5531: Tensor[(104), float64]) -> (Tensor[(11, 8, 7), float64], Tensor[(13, 6, 13), bool], uint32, Tensor[(1014), uint32], Tensor[(2, 4, 13), float32], Tensor[(104), float64], Tensor[(1, 8, 7), float32]) {
  %658 = fn (%var_5514: uint32, %var_5519: Tensor[(104), float64]) -> (Tensor[(11, 8, 7), float64], Tensor[(13, 6, 13), bool], uint32, Tensor[(1014), uint32], Tensor[(2, 4, 13), float32], Tensor[(104), float64], Tensor[(1, 8, 7), float32]) {
    %644 = @func_5059() /* ty=(Tensor[(11, 8, 7), float64],) */;
    %645 = cast(%var_5514, dtype="uint32") /* ty=uint32 */;
    %646 = cast(meta[relay.Constant][44] /* ty=Tensor[(1014), uint32] */, dtype="uint32") /* ty=Tensor[(1014), uint32] */;
    %647 = reshape(%645, newshape=[]) /* ty=uint32 */;
    %648 = reshape(%646, newshape=[13, 6, 13]) /* ty=Tensor[(13, 6, 13), uint32] */;
    %649 = @func_1332(%647, %648) /* ty=(Tensor[(13, 6, 13), bool],) */;
    %650 = cast(%var_5519, dtype="float64") /* ty=Tensor[(104), float64] */;
    %651 = reshape(%650, newshape=[2, 4, 13]) /* ty=Tensor[(2, 4, 13), float64] */;
    %652 = @func_3464(%651) /* ty=(Tensor[(14, 5, 16), bool], Tensor[(60), float32], Tensor[(2, 4, 13), float32], Tensor[(2, 13, 1), int32], int32, Tensor[(26), int32]) */;
    %653 = @func_4473() /* ty=(Tensor[(1, 8, 7), float32],) */;
    %654 = %644.0;
    %655 = %649.0;
    %656 = %652.2;
    %657 = %653.0;
    (%654, %655, %var_5514, meta[relay.Constant][44] /* ty=Tensor[(1014), uint32] */, %656, %var_5519, %657)
  };
  %658(%var_5530, %var_5531) /* ty=(Tensor[(11, 8, 7), float64], Tensor[(13, 6, 13), bool], uint32, Tensor[(1014), uint32], Tensor[(2, 4, 13), float32], Tensor[(104), float64], Tensor[(1, 8, 7), float32]) */
}

def @func_3466(%var_3465: Tensor[(2, 4, 13), float64]) -> (Tensor[(14, 5, 16), bool], Tensor[(60), float32], Tensor[(2, 4, 13), float32], Tensor[(2, 13, 1), int32], int32, Tensor[(26), int32]) {
  %680 = fn (%var_3430: Tensor[(2, 4, 13), float64]) -> (Tensor[(14, 5, 16), bool], Tensor[(60), float32], Tensor[(2, 4, 13), float32], Tensor[(2, 13, 1), int32], int32, Tensor[(26), int32]) {
    %659 = cast(meta[relay.Constant][45] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
    %660 = cast(meta[relay.Constant][45] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
    %661 = cast(meta[relay.Constant][45] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
    %662 = reshape(%659, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float32] */;
    %663 = reshape(%660, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float32] */;
    %664 = reshape(%661, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float32] */;
    %665 = @func_774(%662, %663, %664) /* ty=(Tensor[(3, 10, 2), int16], Tensor[(3, 10, 2), float64], Tensor[(14, 5, 16), bool], Tensor[(1120), uint16]) */;
    %666 = cast(%var_3430, dtype="float64") /* ty=Tensor[(2, 4, 13), float64] */;
    %667 = asin(%666) /* ty=Tensor[(2, 4, 13), float64] */;
    %668 = cast(%var_3430, dtype="float32") /* ty=Tensor[(2, 4, 13), float32] */;
    %669 = shape_of(%667, dtype="int32") /* ty=Tensor[(3), int32] */;
    %670 = cast(%667, dtype="float32") /* ty=Tensor[(2, 4, 13), float32] */;
    %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %672 = cast(-1 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %673 = cast(meta[relay.Constant][46] /* ty=Tensor[(26), int32] */, dtype="int32") /* ty=Tensor[(26), int32] */;
    %674 = reshape(%672, newshape=[]) /* ty=int32 */;
    %675 = reshape(%673, newshape=[2, 13, 1]) /* ty=Tensor[(2, 13, 1), int32] */;
    %676 = @func_2203(%674, %675) /* ty=(Tensor[(2, 13, 1), int32],) */;
    %677 = %665.2;
    %678 = subtract(%670, %671) /* ty=Tensor[(2, 4, 13), float32] */;
    %679 = %676.0;
    (%677, meta[relay.Constant][45] /* ty=Tensor[(60), float32] */, %678, %679, -1 /* ty=int32 */, meta[relay.Constant][46] /* ty=Tensor[(26), int32] */)
  };
  %680(%var_3465) /* ty=(Tensor[(14, 5, 16), bool], Tensor[(60), float32], Tensor[(2, 4, 13), float32], Tensor[(2, 13, 1), int32], int32, Tensor[(26), int32]) */
}

def @func_6132() -> (Tensor[(11, 8, 7), float64],) {
  @func_6130() /* ty=(Tensor[(11, 8, 7), float64],) */
}

def @func_6455() -> (Tensor[(7, 8, 6), float64],) {
  %681 = @func_4553() /* ty=(Tensor[(7, 8, 6), float64], Tensor[(32, 1), float64], Tensor[(5, 14, 4), float32]) */;
  %682 = %681.0;
  (%682,)
}

def @func_6927() -> (Tensor[(32, 1), float64], Tensor[(9, 9, 7), float32], Tensor[(1, 60), float32], Tensor[(336), float32]) {
  %683 = @func_4553() /* ty=(Tensor[(7, 8, 6), float64], Tensor[(32, 1), float64], Tensor[(5, 14, 4), float32]) */;
  %684 = %683.1;
  %685 = cast(%684, dtype="float64") /* ty=Tensor[(32, 1), float64] */;
  %686 = cast(meta[relay.Constant][47] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %687 = cast(meta[relay.Constant][47] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %688 = reshape(%685, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %689 = reshape(%686, newshape=[24, 14]) /* ty=Tensor[(24, 14), float32] */;
  %690 = reshape(%687, newshape=[24, 14]) /* ty=Tensor[(24, 14), float32] */;
  %691 = @func_2896(%688, %689, %690) /* ty=(Tensor[(4, 15, 5), int32], Tensor[(4, 15, 5), float32], Tensor[(60), float32], Tensor[(32), float64], Tensor[(1, 60), float32], Tensor[(24, 14), float64]) */;
  %692 = @func_5123() /* ty=Tensor[(9, 9, 7), float32] */;
  %693 = %691.4;
  (%684, %692, %693, meta[relay.Constant][47] /* ty=Tensor[(336), float32] */)
}

def @func_6102(%var_6100: Tensor[(7, 9, 12), float32], %var_6101: Tensor[(351, 3), bool]) -> (Tensor[(7, 9, 12), bool], Tensor[(7, 9, 12), float64], Tensor[(2560), float64], Tensor[(9, 13, 9), bool], Tensor[(351, 3), bool]) {
  @func_6098(%var_6100, %var_6101) /* ty=(Tensor[(7, 9, 12), bool], Tensor[(7, 9, 12), float64], Tensor[(2560), float64], Tensor[(9, 13, 9), bool], Tensor[(351, 3), bool]) */
}

def @func_6929() -> (Tensor[(32, 1), float64], Tensor[(9, 9, 7), float32], Tensor[(1, 60), float32], Tensor[(336), float32]) {
  @func_6927() /* ty=(Tensor[(32, 1), float64], Tensor[(9, 9, 7), float32], Tensor[(1, 60), float32], Tensor[(336), float32]) */
}

def @func_7371() -> Tensor[(40), float32] {
  %694 = @func_4401() /* ty=(Tensor[(9, 9, 7), float32], Tensor[(40), float32], Tensor[(2560), float64]) */;
  %694.1
}

def @func_7373() -> Tensor[(40), float32] {
  @func_7371() /* ty=Tensor[(40), float32] */
}

def @func_6047(%var_6044: Tensor[(3, 10, 2), int16], %var_6045: Tensor[(11, 8, 7), float64], %var_6046: Tensor[(180), float32]) -> (Tensor[(3, 10, 2), int8], Tensor[(2560), bool], Tensor[(11, 8, 7), float64], Tensor[(1, 8, 7), float32], Tensor[(11, 8, 7), float64], Tensor[(60), float32], Tensor[(180), float32]) {
  @func_6042(%var_6044, %var_6045, %var_6046) /* ty=(Tensor[(3, 10, 2), int8], Tensor[(2560), bool], Tensor[(11, 8, 7), float64], Tensor[(1, 8, 7), float32], Tensor[(11, 8, 7), float64], Tensor[(60), float32], Tensor[(180), float32]) */
}

def @func_5458() -> (Tensor[(2560), bool],) {
  @func_5456() /* ty=(Tensor[(2560), bool],) */
}

def @func_4904() -> Tensor[(1, 8, 7), float64] {
  %698 = fn () -> Tensor[(1, 8, 7), float64] {
    %695 = @func_4473() /* ty=(Tensor[(1, 8, 7), float32],) */;
    %696 = %695.0;
    %697 = cast(%696, dtype="float64") /* ty=Tensor[(1, 8, 7), float64] */;
    asin(%697) /* ty=Tensor[(1, 8, 7), float64] */
  };
  %698() /* ty=Tensor[(1, 8, 7), float64] */
}

def @func_5405() -> (Tensor[(2560), float32], Tensor[(3, 10, 2), int16], Tensor[(60), float32]) {
  %714 = fn () -> (Tensor[(2560), float32], Tensor[(3, 10, 2), int16], Tensor[(60), float32]) {
    %699 = @func_4496() /* ty=(Tensor[(2560), float64],) */;
    %700 = %699.0;
    %701 = cast(meta[relay.Constant][48] /* ty=Tensor[(2560), float64] */, dtype="float32") /* ty=Tensor[(2560), float32] */;
    %702 = shape_of(%700, dtype="int32") /* ty=Tensor[(1), int32] */;
    %703 = cast(%700, dtype="float32") /* ty=Tensor[(2560), float32] */;
    %704 = dyn.reshape(%701, %702, newshape=[]) /* ty=Tensor[(?), float32] */;
    %705 = cast(meta[relay.Constant][49] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
    %706 = cast(meta[relay.Constant][49] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
    %707 = cast(meta[relay.Constant][49] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
    %708 = reshape(%705, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float32] */;
    %709 = reshape(%706, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float32] */;
    %710 = reshape(%707, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float32] */;
    %711 = @func_774(%708, %709, %710) /* ty=(Tensor[(3, 10, 2), int16], Tensor[(3, 10, 2), float64], Tensor[(14, 5, 16), bool], Tensor[(1120), uint16]) */;
    %712 = mod(%703, %704) /* ty=Tensor[(2560), float32] */;
    %713 = %711.0;
    (%712, %713, meta[relay.Constant][49] /* ty=Tensor[(60), float32] */)
  };
  %714() /* ty=(Tensor[(2560), float32], Tensor[(3, 10, 2), int16], Tensor[(60), float32]) */
}

def @func_4985(%var_4983: Tensor[(4, 8, 7), float64]) -> Tensor[(4, 8, 7), bool] {
  @func_4982(%var_4983) /* ty=Tensor[(4, 8, 7), bool] */
}

def @func_1246(%var_1235: Tensor[(2, 10, 9), float32], %var_1243: Tensor[(60), float32]) -> (Tensor[(2, 10, 9), float32], Tensor[(4, 8), float64], Tensor[(32), float64], Tensor[(60), float32], Tensor[(24, 14), float32]) {
  %715 = cast(meta[relay.Constant][50] /* ty=Tensor[(2, 10, 9), float32] */, dtype="float32") /* ty=Tensor[(2, 10, 9), float32] */;
  %716 = shape_of(%var_1235, dtype="int32") /* ty=Tensor[(3), int32] */;
  %717 = cast(%var_1235, dtype="float32") /* ty=Tensor[(2, 10, 9), float32] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %719 = cast(meta[relay.Constant][51] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %720 = cast(%var_1243, dtype="float32") /* ty=Tensor[(60), float32] */;
  %721 = cast(meta[relay.Constant][52] /* ty=Tensor[(24, 14), float32] */, dtype="float32") /* ty=Tensor[(24, 14), float32] */;
  %722 = reshape(%719, newshape=[32]) /* ty=Tensor[(32), float64] */;
  %723 = reshape(%720, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %724 = reshape(%721, newshape=[1, 336]) /* ty=Tensor[(1, 336), float32] */;
  %725 = @func_1129(%722, %723, %724) /* ty=(Tensor[(1, 9, 1), float64], Tensor[(4, 8), float64], Tensor[(1120), uint16], Tensor[(60), float32], Tensor[(14, 5, 16), bool], Tensor[(1, 9, 32), uint32], Tensor[(7, 8, 6), float32], Tensor[(8, 336), bool]) */;
  %726 = floor_mod(%717, %718) /* ty=Tensor[(2, 10, 9), float32] */;
  %727 = %725.1;
  (%726, %727, meta[relay.Constant][51] /* ty=Tensor[(32), float64] */, %var_1243, meta[relay.Constant][52] /* ty=Tensor[(24, 14), float32] */)
}

def @func_4613(%var_4612: Tensor[(32, 5), float64]) -> Tensor[(32, 5), float32] {
  %737 = fn (%var_4600: Tensor[(32, 5), float64]) -> Tensor[(32, 5), float32] {
    %728 = @func_4553() /* ty=(Tensor[(7, 8, 6), float64], Tensor[(32, 1), float64], Tensor[(5, 14, 4), float32]) */;
    %729 = %728.1;
    %730 = cast(%729, dtype="float64") /* ty=Tensor[(32, 1), float64] */;
    %731 = log2(%730) /* ty=Tensor[(32, 1), float64] */;
    %732 = cast(%731, dtype="uint16") /* ty=Tensor[(32, 1), uint16] */;
    %733 = cast(%var_4600, dtype="uint16") /* ty=Tensor[(32, 5), uint16] */;
    %734 = left_shift(%732, %733) /* ty=Tensor[(32, 5), uint16] */;
    %735 = cast(%734, dtype="float32") /* ty=Tensor[(32, 5), float32] */;
    %736 = cast(%731, dtype="float32") /* ty=Tensor[(32, 1), float32] */;
    power(%735, %736) /* ty=Tensor[(32, 5), float32] */
  };
  %737(%var_4612) /* ty=Tensor[(32, 5), float32] */
}

def @func_4522(%var_4521: Tensor[(9, 9, 7), float32]) -> (Tensor[(9, 9, 7), int64], Tensor[(60), float32], Tensor[(6, 30), float32], Tensor[(60), float32]) {
  %751 = fn (%var_4507: Tensor[(9, 9, 7), float32]) -> (Tensor[(9, 9, 7), int64], Tensor[(60), float32], Tensor[(6, 30), float32], Tensor[(60), float32]) {
    %738 = @func_4095() /* ty=(Tensor[(9, 9, 7), float32],) */;
    %739 = %738.0;
    %740 = cast(%var_4507, dtype="int64") /* ty=Tensor[(9, 9, 7), int64] */;
    %741 = shape_of(%739, dtype="int32") /* ty=Tensor[(3), int32] */;
    %742 = cast(%739, dtype="int64") /* ty=Tensor[(9, 9, 7), int64] */;
    %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %744 = cast(meta[relay.Constant][53] /* ty=Tensor[(6, 30), float32] */, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
    %745 = cast(meta[relay.Constant][54] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
    %746 = reshape(%744, newshape=[180]) /* ty=Tensor[(180), float32] */;
    %747 = reshape(%745, newshape=[60]) /* ty=Tensor[(60), float32] */;
    %748 = @func_4316(%746, %747) /* ty=(Tensor[(9, 9, 7), float32], Tensor[(32), float64], Tensor[(180), float32], Tensor[(60), float32]) */;
    %749 = bitwise_and(%742, %743) /* ty=Tensor[(9, 9, 7), int64] */;
    %750 = %748.3;
    (%749, %750, meta[relay.Constant][53] /* ty=Tensor[(6, 30), float32] */, meta[relay.Constant][54] /* ty=Tensor[(60), float32] */)
  };
  %751(%var_4521) /* ty=(Tensor[(9, 9, 7), int64], Tensor[(60), float32], Tensor[(6, 30), float32], Tensor[(60), float32]) */
}

def @func_5909(%var_5908: Tensor[(936), int32]) -> (Tensor[(9, 9, 7), float32], Tensor[(60), float32], Tensor[(240), float64], Tensor[(32), float64], Tensor[(936), float32]) {
  %766 = fn (%var_5895: Tensor[(936), int32]) -> (Tensor[(9, 9, 7), float32], Tensor[(60), float32], Tensor[(240), float64], Tensor[(32), float64], Tensor[(936), float32]) {
    %752 = @func_4401() /* ty=(Tensor[(9, 9, 7), float32], Tensor[(40), float32], Tensor[(2560), float64]) */;
    %753 = cast(%var_5895, dtype="int32") /* ty=Tensor[(936), int32] */;
    %754 = %752.0;
    %755 = cast(%754, dtype="float32") /* ty=Tensor[(9, 9, 7), float32] */;
    %756 = reshape(%753, newshape=[6, 13, 12]) /* ty=Tensor[(6, 13, 12), int32] */;
    %757 = reshape(%755, newshape=[567]) /* ty=Tensor[(567), float32] */;
    %758 = @func_5831(%756, %757) /* ty=(Tensor[(6, 13, 12), bool], Tensor[(6, 13, 12), bool], Tensor[(60), float32], Tensor[(567), float32]) */;
    %759 = cast(meta[relay.Constant][55] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
    %760 = reshape(%759, newshape=[2, 2, 8]) /* ty=Tensor[(2, 2, 8), float64] */;
    %761 = @func_2034(%760) /* ty=(Tensor[(10, 2, 12), float64], Tensor[(240), float64], Tensor[(2, 2, 8), float32], Tensor[(14, 5, 16), bool], Tensor[(1120), uint16]) */;
    %762 = cast(%var_5895, dtype="float32") /* ty=Tensor[(936), float32] */;
    %763 = %758.2;
    %764 = %761.1;
    %765 = acos(%762) /* ty=Tensor[(936), float32] */;
    (%754, %763, %764, meta[relay.Constant][55] /* ty=Tensor[(32), float64] */, %765)
  };
  %766(%var_5908) /* ty=(Tensor[(9, 9, 7), float32], Tensor[(60), float32], Tensor[(240), float64], Tensor[(32), float64], Tensor[(936), float32]) */
}

def @func_6130() -> (Tensor[(11, 8, 7), float64],) {
  %767 = @func_5059() /* ty=(Tensor[(11, 8, 7), float64],) */;
  %768 = %767.0;
  (%768,)
}

def @func_2388(%var_2372: Tensor[(10, 13, 8), float32]) -> (Tensor[(10, 13, 8), float32],) {
  %769 = cast(meta[relay.Constant][56] /* ty=Tensor[(10, 13, 8), float32] */, dtype="float32") /* ty=Tensor[(10, 13, 8), float32] */;
  %770 = shape_of(%var_2372, dtype="int32") /* ty=Tensor[(3), int32] */;
  %771 = cast(%var_2372, dtype="float32") /* ty=Tensor[(10, 13, 8), float32] */;
  %772 = dyn.reshape(%769, %770, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %773 = divide(%771, %772) /* ty=Tensor[(10, 13, 8), float32] */;
  (%773,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen331/build/output.py:1690: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen331/build/output.py", line 1695, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(396) tvmgen_default_fused_reshape_divide_kernel0(double* __restrict__ T_divide, double* __restrict__ placeholder, double* __restrict__ placeholder1) {
  T_divide[(((int)threadIdx.x))] = (placeholder[(((int)threadIdx.x))] / placeholder1[(((int)threadIdx.x))]);
}

extern "C" __global__ void __launch_bounds__(396) tvmgen_default_fused_log2_kernel0(double* __restrict__ T_log2, double* __restrict__ placeholder) {
  T_log2[(((int)threadIdx.x))] = log2(placeholder[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

