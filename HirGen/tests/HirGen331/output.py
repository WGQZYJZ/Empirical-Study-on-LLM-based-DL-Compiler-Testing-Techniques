import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_149 = relay.var("var_149", dtype = "uint16", shape = (14, 5, 16))#candidate|149|(14, 5, 16)|var|uint16
const_150 = relay.const([[[-6,10,-6,7,-7,-8,-6,-10,-7,-9,-3,7,-6,-2,10,10],[-6,5,-1,10,3,-4,-6,-7,1,5,4,9,-1,-1,-4,8],[3,4,8,-3,1,9,2,-4,5,-5,5,1,5,-6,-2,1],[-8,1,-10,-6,-2,2,-4,-4,-8,-7,3,9,-9,8,-7,-9],[5,-10,6,6,2,1,6,2,6,-7,7,-10,-8,10,-7,-2]],[[-10,-7,-8,-4,1,-6,-3,-1,8,-2,3,-5,-8,10,-3,8],[-5,-8,8,-5,7,7,2,1,-9,6,2,-5,-6,10,9,3],[-4,9,2,2,7,-9,1,-8,-2,-2,-8,9,-4,-3,6,7],[6,-2,1,-10,-5,-9,1,-5,-4,9,4,5,-6,8,-4,-2],[2,1,-7,-4,-9,9,10,5,8,5,-2,9,9,-10,4,-5]],[[5,2,6,6,-10,-7,8,-6,4,10,2,-3,-9,-5,-6,-1],[-4,-5,-10,-8,-6,3,-7,-2,-10,8,-2,-2,6,3,-8,5],[7,4,10,8,-9,2,7,8,6,9,8,8,1,-8,-6,-10],[-2,8,8,-10,4,2,5,9,5,9,1,7,-9,-8,-5,-7],[5,-9,-3,8,2,-1,10,-8,9,-8,5,2,-8,8,-1,10]],[[-2,6,1,-3,6,10,5,2,-5,6,-4,5,-1,5,10,9],[-8,7,1,-2,5,4,8,-8,6,5,4,-2,-5,-8,-6,-6],[2,-4,5,-1,-8,4,2,-10,-6,6,7,5,-7,-6,2,7],[-5,-8,-7,-3,-5,-10,9,-3,7,4,-9,7,-4,7,2,9],[-5,10,-5,6,1,6,9,4,-9,1,9,-4,-8,-10,-4,-2]],[[7,10,6,-1,3,-7,-7,8,9,-5,-7,3,9,10,6,10],[-3,-5,-8,3,6,-4,1,10,-3,-10,6,-8,9,-6,-7,8],[9,-8,-2,8,1,2,8,-1,8,1,-5,7,-8,-10,-3,6],[2,9,-5,1,-3,-7,6,9,-1,8,-3,1,1,-6,-8,6],[-6,-3,4,-6,-8,7,3,9,-10,10,-3,-5,-4,9,-3,1]],[[2,10,-9,-4,-1,4,8,-8,2,2,-2,-2,-7,-8,7,-2],[5,-6,10,3,2,-7,-1,-9,-6,-10,5,5,-2,4,2,10],[-10,2,-8,-5,-4,-9,1,8,6,-6,-10,4,-3,3,6,3],[-10,8,-3,8,-7,-2,4,6,10,2,-2,-3,-7,-2,-10,1],[-3,-9,3,-2,4,-9,-6,8,-6,7,7,4,-4,8,-3,-5]],[[-7,-1,-2,1,10,2,-4,3,1,9,-8,1,-1,-10,-8,-1],[9,-5,8,7,-7,-4,-1,2,-7,-9,8,-8,9,-5,3,1],[-1,-7,2,5,-4,10,-5,7,-7,-6,-4,-6,-4,-1,-9,3],[9,-9,3,-10,-2,-2,5,9,-4,9,-1,5,5,4,-8,-4],[-4,-6,8,4,8,-6,-5,-7,2,-9,10,-8,-9,9,-9,4]],[[9,-10,8,4,10,-9,7,-6,-1,-1,10,-5,4,-8,-10,-4],[-2,5,-8,6,-1,5,-2,-8,-7,-5,8,5,8,5,-6,9],[5,2,3,3,4,3,-8,-10,-9,1,-8,1,2,6,-7,9],[-10,-7,-8,8,-8,-9,-1,-3,-7,10,-5,-1,-9,8,-3,7],[-8,6,-5,-10,-5,-3,-10,-9,-3,2,3,6,2,5,-8,7]],[[-7,4,7,-6,4,3,6,-1,-2,-6,8,-7,5,-4,-4,-1],[-5,-4,-10,7,8,8,-1,-4,5,9,3,2,8,10,-10,-3],[-5,-9,7,-1,-5,10,9,2,5,7,-5,-3,6,5,4,1],[6,6,-6,-10,-5,1,-4,8,-2,5,-6,4,-4,8,-8,-9],[10,8,2,9,8,-1,-2,-2,-8,6,7,-5,-9,-9,3,1]],[[-3,9,7,-3,9,7,-7,-6,8,-6,-1,6,-4,-7,4,8],[7,5,7,-8,3,6,4,4,5,7,-1,-6,-1,-1,10,-6],[-9,10,-10,10,4,5,1,2,-1,4,5,6,4,4,-9,9],[-3,1,7,-1,9,-3,-7,-6,7,10,-1,-9,-8,-9,5,-4],[-8,4,-8,8,-10,10,5,6,8,-3,6,4,-7,10,10,2]],[[9,-3,2,-8,2,2,6,1,-7,4,8,-7,2,1,-9,2],[-1,-9,-8,-5,-5,-10,-6,6,7,7,2,4,-1,-8,8,-10],[-6,-3,-4,-7,-7,1,-9,-9,8,6,9,-4,5,-1,-3,-3],[10,5,4,4,-10,7,1,-10,1,7,-3,10,-4,-2,-2,7],[-1,-7,-6,-8,-5,8,2,-4,-3,5,-5,-4,6,5,-1,1]],[[5,-10,-10,-9,-5,2,4,-2,-1,3,-2,5,4,-5,2,-8],[-5,-8,-7,1,-4,3,10,-7,2,7,6,1,1,5,-3,10],[3,4,-3,-6,-9,6,-2,-2,-2,8,2,8,-5,-7,-9,-8],[-5,2,9,-6,7,-8,5,-3,9,-5,-1,4,-7,8,-8,-8],[-1,10,10,-8,9,6,-4,-1,2,-5,8,-1,-10,2,-5,2]],[[5,-6,9,-4,8,10,-10,-6,-6,5,10,-2,-5,10,-9,6],[4,8,5,-2,1,8,5,-4,-5,-9,-5,7,7,9,-2,9],[8,1,-1,-10,-7,6,2,-6,-8,-4,-8,-2,10,3,10,-8],[-1,-4,4,-7,-2,-4,2,1,-5,-3,-8,7,10,-10,4,-9],[-8,7,6,-4,8,3,8,-10,-1,-5,1,6,2,2,-5,10]],[[5,-7,5,1,9,-3,-10,-9,7,-9,-6,2,3,5,-8,-3],[-4,5,-4,-1,10,10,-9,2,-5,-6,8,-8,-5,-10,7,3],[-6,9,5,-2,5,7,-3,10,10,6,6,-10,8,-2,-5,-6],[-5,8,-6,7,2,-5,-2,2,1,-1,-5,-7,-3,10,6,-7],[-3,-1,7,4,3,-6,-4,-9,10,1,-3,8,7,-3,6,-4]]], dtype = "uint16")#candidate|150|(14, 5, 16)|const|uint16
bop_151 = relay.equal(var_149.astype('bool'), relay.reshape(const_150.astype('bool'), relay.shape_of(var_149))) # shape=(14, 5, 16)
output = relay.Tuple([bop_151,])
output2 = relay.Tuple([bop_151,])
func_162 = relay.Function([var_149,], output)
mod['func_162'] = func_162
mod = relay.transform.InferType()(mod)
var_163 = relay.var("var_163", dtype = "uint16", shape = (14, 5, 16))#candidate|163|(14, 5, 16)|var|uint16
output = func_162(var_163)
func_164 = relay.Function([var_163], output)
mutated_mod['func_164'] = func_164
mutated_mod = relay.transform.InferType()(mutated_mod)
var_740 = relay.var("var_740", dtype = "float32", shape = (3, 10, 2))#candidate|740|(3, 10, 2)|var|float32
var_741 = relay.var("var_741", dtype = "float32", shape = (3, 10, 2))#candidate|741|(3, 10, 2)|var|float32
bop_742 = relay.multiply(var_740.astype('float32'), relay.reshape(var_741.astype('float32'), relay.shape_of(var_740))) # shape=(3, 10, 2)
var_755 = relay.var("var_755", dtype = "float32", shape = (3, 10, 2))#candidate|755|(3, 10, 2)|var|float32
bop_756 = relay.bitwise_or(bop_742.astype('int16'), relay.reshape(var_755.astype('int16'), relay.shape_of(bop_742))) # shape=(3, 10, 2)
uop_760 = relay.asin(var_740.astype('float64')) # shape=(3, 10, 2)
func_162_call = mod.get_global_var('func_162')
func_164_call = mutated_mod.get_global_var('func_164')
const_772 = relay.const([2,-2,-1,-2,-3,5,9,-9,-1,2,-7,-10,-10,-6,-9,-6,-7,7,-3,6,5,2,-1,2,-7,10,9,-8,4,-8,2,-3,10,-9,-8,-1,-4,6,5,9,-4,5,-8,2,10,6,-4,1,10,1,2,-2,4,-4,-8,2,-10,7,3,-2,1,-2,-9,-1,2,-7,-3,-3,-9,-9,-9,-8,9,9,-7,4,8,-3,1,-4,-7,7,1,8,-6,6,-9,4,-2,-9,-3,4,-10,-10,2,-4,-6,10,9,-7,6,-10,-10,2,-9,-8,7,6,1,-8,10,4,1,5,-4,6,-8,7,-3,9,-2,-6,10,-6,-8,6,6,-5,-3,-10,-5,-9,5,2,-4,9,9,-7,-7,-10,9,4,5,4,-2,-9,3,1,-3,-5,5,7,9,-4,10,1,9,7,-7,-4,-7,5,10,-7,2,-1,6,-2,3,3,-10,-5,2,-3,-2,5,1,-9,-9,-5,8,7,-8,-1,4,6,-8,3,2,-8,-4,-4,-4,-9,1,3,1,-5,10,-2,10,6,-9,-10,6,5,-9,-6,-4,-8,-10,6,3,-2,9,-5,2,-9,-2,-1,-4,-10,-5,-10,1,6,8,-3,-7,-4,-9,-5,4,-3,4,-7,-10,3,-3,-6,10,-8,-6,-1,-7,9,-6,8,-10,-6,-5,-5,10,-10,-3,-7,-8,3,-7,-7,1,-10,-2,-9,-1,9,10,9,-1,2,3,7,4,5,8,6,10,8,-6,4,-4,3,8,3,-1,3,4,-7,-2,2,6,9,5,8,6,9,7,-3,4,-4,9,-10,7,-3,-2,1,10,4,9,9,5,5,-9,-7,-4,-7,6,8,-7,-6,-4,6,5,1,3,-9,-7,-2,-5,-9,-8,4,8,-1,2,3,-2,-2,-1,3,5,6,-8,-8,5,-2,6,9,5,-8,-7,3,-9,8,-9,8,5,-4,2,6,1,-2,-1,10,3,4,-8,9,3,-9,-10,-6,3,-10,4,-2,-3,10,5,1,-8,8,-4,-3,-6,-9,1,3,-3,-1,-8,-2,7,-4,-1,-10,2,7,7,-2,4,3,-5,1,9,7,-5,10,-10,-6,-1,-2,-6,-10,-8,-6,-6,-8,-5,-10,-3,6,5,-1,10,10,4,8,-2,3,-3,-2,9,-9,-1,3,-8,-3,4,-10,1,-10,1,-7,6,-2,-2,-9,8,-7,9,-4,-10,-1,-1,1,-10,-9,6,-5,7,-5,-6,9,-4,-3,-8,-1,-4,-1,3,6,-2,6,2,-2,1,-5,-6,8,-3,-5,10,7,8,10,1,-7,-3,-1,-6,-2,-2,3,3,8,-4,7,10,-9,-2,-2,-5,6,-1,10,9,4,1,1,-9,-2,-3,1,2,4,9,1,-2,-1,-1,10,-7,5,-10,-3,-7,-5,5,6,6,-5,5,-8,-10,-9,3,5,2,7,-6,2,-7,-4,3,-2,-1,5,-3,-2,-3,6,-10,6,-10,-7,-3,-8,8,-3,-3,1,9,9,-8,-5,-3,8,1,-7,-7,7,-3,-10,-8,-3,5,-8,-7,-8,-7,-5,5,6,-7,9,9,-4,1,-5,-5,4,10,6,-9,4,7,-8,5,8,-9,6,3,10,1,4,4,8,10,-3,8,4,-7,8,8,-3,-5,3,-6,1,-8,5,-3,-8,-7,-1,-8,-10,9,8,6,-4,-10,-8,-10,6,-3,2,4,-10,-10,-5,8,-5,3,-6,-5,-1,-7,-3,-5,-7,-10,4,-10,4,-5,-10,4,4,1,8,8,2,6,2,-6,10,9,-9,-8,1,-2,10,8,-3,2,6,-9,-7,6,8,10,8,-2,10,-10,5,4,7,-7,-3,-10,-1,9,-5,9,9,-1,-1,-3,-5,4,4,7,-9,2,5,1,2,-8,-5,2,8,-10,-8,-2,6,5,3,1,-8,2,-4,3,-2,-5,-6,2,4,-5,-5,-7,2,-10,6,4,6,-9,-10,-8,-1,-1,2,3,7,8,4,2,-7,-10,6,9,2,2,-8,6,3,-8,-5,3,-10,4,6,1,-8,10,-7,-8,5,-2,-10,4,-10,-2,-3,4,6,7,-4,9,9,8,6,-6,-5,6,9,-3,-2,3,-8,9,7,-7,-6,4,4,3,7,-3,-8,-10,-6,-5,7,-4,-4,-10,10,-1,6,2,-7,-1,4,7,-10,-8,-1,7,-10,-3,-7,-5,-2,3,-10,-7,-2,1,2,-6,8,-3,7,-7,4,-1,-2,-7,-3,-2,7,-1,-10,3,-4,-6,-4,-1,10,10,-7,4,9,6,4,-6,9,-10,-4,3,-3,-10,10,10,1,-4,10,10,1,-1,5,-6,7,-3,8,-8,-5,-9,-10,-4,8,-9,-8,-8,-6,4,8,-6,-5,-7,7,7,4,6,5,-6,2,1,-6,-10,10,2,5,7,8,-6,-9,-6,9,10,-6,6,2,7,-8,8,5,10,-1,2,10,4,-1,4,-4,3,-1,-5,8,-10,-3,6,10,7,-2,-1,-7,2,5,7,10,-7,-8,-3,8,-3,-2,6,5,-5,4,-9,-1,10,-7,-3,-6,-8,-5,-1,4,4,2,-8,-5,6,-9,2,-6,-5,-7,1,-1,8,-2,10,2,2,4,-1,-6,-10,-1,-6,3,1,-10,-3,-5,-8,9,-5,-2,5,10,6,-4,-1,-9,4,-6,1,-1,-8,7,-3,6,7,6,3,-7,-2,-5,8,7,5,-8,3,5,4,-9,-10,7,-10,-1,-1,-2,-9,-3,3,10,-5,-8,-6,10,-7,-10,-4,6,2,-7,-4,-5,9,2,7,-2,10,1,-3,9,9,-8,-6,7,10,2,-4,-10,4,7,-4,6,-8,-2,-9,2,-10,-1,5,-6,-3,-8,7,1,10,3,-6,-1,-7,7,4,3,10,-10,-3,9,-7,6,4,5,5,1,-8,-6,-3,-10,2,1,-9,-8,-7,2,-3,10,-6,-3,-5,-2,5,8,3,-7,3,-7,-10,7], dtype = "uint16")#candidate|772|(1120,)|const|uint16
call_771 = relay.TupleGetItem(func_162_call(relay.reshape(const_772.astype('uint16'), [14, 5, 16])), 0)
call_773 = relay.TupleGetItem(func_164_call(relay.reshape(const_772.astype('uint16'), [14, 5, 16])), 0)
output = relay.Tuple([bop_756,uop_760,call_771,const_772,])
output2 = relay.Tuple([bop_756,uop_760,call_773,const_772,])
func_774 = relay.Function([var_740,var_741,var_755,], output)
mod['func_774'] = func_774
mod = relay.transform.InferType()(mod)
var_775 = relay.var("var_775", dtype = "float32", shape = (3, 10, 2))#candidate|775|(3, 10, 2)|var|float32
var_776 = relay.var("var_776", dtype = "float32", shape = (3, 10, 2))#candidate|776|(3, 10, 2)|var|float32
var_777 = relay.var("var_777", dtype = "float32", shape = (3, 10, 2))#candidate|777|(3, 10, 2)|var|float32
output = func_774(var_775,var_776,var_777,)
func_778 = relay.Function([var_775,var_776,var_777,], output)
mutated_mod['func_778'] = func_778
mutated_mod = relay.transform.InferType()(mutated_mod)
var_796 = relay.var("var_796", dtype = "float32", shape = (7, 8, 6))#candidate|796|(7, 8, 6)|var|float32
uop_797 = relay.rsqrt(var_796.astype('float32')) # shape=(7, 8, 6)
uop_817 = relay.sigmoid(var_796.astype('float64')) # shape=(7, 8, 6)
output = relay.Tuple([uop_797,uop_817,])
output2 = relay.Tuple([uop_797,uop_817,])
func_841 = relay.Function([var_796,], output)
mod['func_841'] = func_841
mod = relay.transform.InferType()(mod)
mutated_mod['func_841'] = func_841
mutated_mod = relay.transform.InferType()(mutated_mod)
var_842 = relay.var("var_842", dtype = "float32", shape = (7, 8, 6))#candidate|842|(7, 8, 6)|var|float32
func_841_call = mutated_mod.get_global_var('func_841')
call_843 = func_841_call(var_842)
output = call_843
func_844 = relay.Function([var_842], output)
mutated_mod['func_844'] = func_844
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1047 = relay.var("var_1047", dtype = "float64", shape = (4, 8))#candidate|1047|(4, 8)|var|float64
uop_1048 = relay.sin(var_1047.astype('float64')) # shape=(4, 8)
func_841_call = mod.get_global_var('func_841')
func_844_call = mutated_mod.get_global_var('func_844')
const_1054 = relay.const([-2.835528,1.199162,1.548576,7.918964,7.381967,-4.719701,0.640650,0.015209,-9.754869,9.346831,7.284417,-7.713940,-4.242289,8.943804,-9.326449,-8.945954,9.948694,-0.759937,1.265136,2.069959,-1.247501,-4.901523,-5.979237,-3.473458,-1.776011,-7.051723,-1.265483,5.110538,8.080701,-9.162697,-4.916291,-4.798759,-4.394282,-5.726779,-6.716187,-4.355695,-4.446714,0.607352,-5.416795,6.837172,8.558122,6.055951,-5.016920,7.489785,4.940961,2.617171,-5.969803,5.896117,6.236955,-0.508978,-7.603148,-9.929631,-6.166682,4.104053,4.100289,0.698992,-3.246075,-5.414933,0.872855,0.554290,-0.314062,-9.170351,-2.425918,6.284048,-4.078051,-7.926821,4.975417,8.397498,-4.075266,-0.774486,8.075647,-5.070713,-8.478038,-4.080737,-4.238269,-7.038840,-9.780761,-2.663653,9.257867,-8.822063,1.995191,-3.281449,9.612583,-3.857253,-1.243172,7.891190,4.438619,-1.125690,3.955515,3.990213,-7.693209,-4.371660,2.845205,2.701831,-5.972656,-3.971361,-7.664770,-5.664968,-2.234172,2.449984,-6.635819,-1.503368,5.992740,8.371250,0.105584,-4.327715,8.774783,-8.336988,2.136358,0.891195,-3.089770,-1.739955,-5.619289,-9.363228,5.940874,1.798422,3.408455,1.733383,-0.832279,2.265157,-3.402221,9.907942,-2.260485,-9.468701,-2.363765,6.067632,4.409420,7.534742,0.574728,-4.931866,-5.314256,-6.907188,6.861670,-9.829140,-8.867393,2.005364,8.650820,-7.846592,-3.795410,-6.938025,-8.902227,8.685089,0.266614,6.845955,1.429987,3.311259,-3.187348,9.091054,-9.644624,6.917376,7.727071,8.247065,-9.776269,-7.024800,-9.714524,6.971067,-7.371043,-5.405644,5.230846,-9.935000,2.302192,-8.907388,5.802462,7.971239,4.036706,2.421328,1.138140,-7.368183,-3.463989,-9.335409,8.983662,-5.274982,4.892619,6.440433,-6.329888,1.765958,7.919457,5.505014,7.379812,-6.714396,-9.733614,0.401155,-6.894134,6.528300,-8.103905,2.829224,7.543783,7.700198,-6.652792,1.289196,7.838776,-1.199941,8.830165,0.753482,-9.034551,3.767057,3.796634,-4.566322,-2.822419,6.760412,-4.020743,-0.532275,-3.718808,-7.996543,-7.167471,3.477921,-3.381398,5.579836,-2.673169,-5.844942,-3.114581,2.708668,-3.317245,-6.927983,4.707612,8.625780,-3.570089,9.504515,2.371399,-1.479405,3.420917,8.127858,1.586138,4.619830,-0.026904,1.630208,-5.724130,-7.225642,-2.784952,2.123969,-2.286822,7.958142,6.247924,7.626619,-8.099946,-4.652293,-1.270114,6.771159,-6.355716,1.975120,-3.207398,-7.656705,1.606745,1.965443,0.572623,6.661453,8.486276,-0.594755,5.255747,-0.575493,9.660329,9.462135,-6.502786,-7.823789,-5.559737,0.999102,-7.001949,1.611155,7.018327,6.465171,4.587861,-7.596021,-3.214872,5.459923,2.949294,8.642135,8.411304,-8.093531,-3.420182,-0.557526,-1.357453,1.010811,4.541856,-2.307955,-9.095762,9.266579,-7.961628,-7.602651,7.415752,-1.698526,2.041398,7.469921,-5.076803,9.603729,-1.588939,3.065010,6.081741,7.822354,2.001968,7.396090,-4.556290,-7.163723,8.549357,8.053405,-9.299490,1.515313,7.746979,-7.054682,-5.473065,-7.856302,-9.902882,4.676734,3.248260,-8.811084,-3.461248,-7.007155,0.396158,2.398653,1.019317,8.705736,-3.269885,-8.322338,5.752816,1.384764,-6.835518,3.132997,-2.672130,-5.287711,7.862797,-5.210835,2.443651,-3.901013,1.671096,4.387934,-0.161377,6.626470,9.342150,6.066652,-6.328281,-7.200229,-0.783353,1.816622,-8.276309,-0.444439,5.728799,5.208508], dtype = "float32")#candidate|1054|(336,)|const|float32
call_1053 = relay.TupleGetItem(func_841_call(relay.reshape(const_1054.astype('float32'), [7, 8, 6])), 1)
call_1055 = relay.TupleGetItem(func_844_call(relay.reshape(const_1054.astype('float32'), [7, 8, 6])), 1)
output = relay.Tuple([uop_1048,call_1053,const_1054,])
output2 = relay.Tuple([uop_1048,call_1055,const_1054,])
func_1061 = relay.Function([var_1047,], output)
mod['func_1061'] = func_1061
mod = relay.transform.InferType()(mod)
mutated_mod['func_1061'] = func_1061
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1062 = relay.var("var_1062", dtype = "float64", shape = (4, 8))#candidate|1062|(4, 8)|var|float64
func_1061_call = mutated_mod.get_global_var('func_1061')
call_1063 = func_1061_call(var_1062)
output = call_1063
func_1064 = relay.Function([var_1062], output)
mutated_mod['func_1064'] = func_1064
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1090 = relay.const([[[-9.913509],[-3.372867],[3.292655],[-3.157892],[-6.753292],[-4.196786],[-6.712707],[4.045769],[-7.553159]]], dtype = "float64")#candidate|1090|(1, 9, 1)|const|float64
uop_1091 = relay.sigmoid(const_1090.astype('float64')) # shape=(1, 9, 1)
func_1061_call = mod.get_global_var('func_1061')
func_1064_call = mutated_mod.get_global_var('func_1064')
var_1097 = relay.var("var_1097", dtype = "float64", shape = (32,))#candidate|1097|(32,)|var|float64
call_1096 = relay.TupleGetItem(func_1061_call(relay.reshape(var_1097.astype('float64'), [4, 8])), 0)
call_1098 = relay.TupleGetItem(func_1064_call(relay.reshape(var_1097.astype('float64'), [4, 8])), 0)
func_774_call = mod.get_global_var('func_774')
func_778_call = mutated_mod.get_global_var('func_778')
var_1102 = relay.var("var_1102", dtype = "float32", shape = (60,))#candidate|1102|(60,)|var|float32
call_1101 = relay.TupleGetItem(func_774_call(relay.reshape(var_1102.astype('float32'), [3, 10, 2]), relay.reshape(var_1102.astype('float32'), [3, 10, 2]), relay.reshape(var_1102.astype('float32'), [3, 10, 2]), ), 3)
call_1103 = relay.TupleGetItem(func_778_call(relay.reshape(var_1102.astype('float32'), [3, 10, 2]), relay.reshape(var_1102.astype('float32'), [3, 10, 2]), relay.reshape(var_1102.astype('float32'), [3, 10, 2]), ), 3)
func_162_call = mod.get_global_var('func_162')
func_164_call = mutated_mod.get_global_var('func_164')
call_1104 = relay.TupleGetItem(func_162_call(relay.reshape(call_1101.astype('uint16'), [14, 5, 16])), 0)
call_1105 = relay.TupleGetItem(func_164_call(relay.reshape(call_1101.astype('uint16'), [14, 5, 16])), 0)
bop_1108 = relay.minimum(const_1090.astype('uint32'), var_1097.astype('uint32')) # shape=(1, 9, 32)
func_841_call = mod.get_global_var('func_841')
func_844_call = mutated_mod.get_global_var('func_844')
var_1118 = relay.var("var_1118", dtype = "float32", shape = (1, 336))#candidate|1118|(1, 336)|var|float32
call_1117 = relay.TupleGetItem(func_841_call(relay.reshape(var_1118.astype('float32'), [7, 8, 6])), 0)
call_1119 = relay.TupleGetItem(func_844_call(relay.reshape(var_1118.astype('float32'), [7, 8, 6])), 0)
const_1121 = relay.const([[1.493844,-9.961893,4.681629,-1.705335,-9.817511,4.821245,9.734147,5.712561,9.904914,2.085605,-0.190863,3.401629,-0.733020,6.904118,7.087726,4.975018,-4.693102,-8.238216,-5.770732,-3.928541,-1.126590,-0.376113,-5.437644,3.808485,-8.834179,1.167265,-1.731557,8.355621,-1.533146,5.293342,-7.721767,-5.004567,-9.373986,-1.990016,-8.223766,-7.008346,9.047165,-9.486508,-5.546964,0.883330,-3.959496,7.043337,3.297967,-7.300981,3.228313,6.213596,-6.591496,-7.424409,6.076351,0.756523,-7.025565,-8.920015,7.158665,0.070316,-1.655925,-9.245844,1.709616,5.189777,-0.077390,2.115674,3.300282,0.837332,-8.592733,-7.027045,1.862318,2.241548,5.350817,4.202917,7.158370,-4.468111,3.102845,-0.711887,-6.176486,1.036441,0.551625,-8.226257,9.125733,-8.310745,-7.484079,9.050998,2.780781,5.550762,-6.681225,2.012771,5.425112,0.366903,-5.750407,3.171701,0.526345,1.288906,6.723264,5.005449,-9.160216,0.105716,3.285314,-5.223974,0.166176,5.269830,-3.517548,7.740332,0.980391,-5.987757,7.271029,-0.686861,-2.138588,4.290632,-2.017651,-0.707010,2.903254,7.708752,3.714457,1.834143,8.179404,-7.326763,7.119809,1.462740,2.589203,-1.304583,2.493273,9.547332,-4.786768,-3.081391,-4.113936,9.841889,-4.694276,-6.720887,-6.801685,-2.343750,-8.979262,0.142468,7.242212,-0.604578,-9.865132,9.499948,-0.864746,7.638345,3.536711,3.349532,5.283553,5.636048,1.632115,2.617986,3.130230,0.889583,-0.643548,8.115962,5.625670,-2.228258,-6.515413,9.132879,3.830940,-8.709969,-7.820650,-0.296469,-2.993651,2.253711,0.631846,-6.760194,6.459903,-4.059337,-4.093850,6.057788,-3.884872,-0.166726,8.848298,2.106049,-6.794227,5.287255,6.390699,-0.968567,-7.635057,2.097218,-5.495950,-2.617203,8.950531,-5.431611,5.341279,0.790258,7.013309,-1.793536,7.467347,5.854744,2.804795,6.751466,-1.947749,3.742034,6.788823,-1.317720,-8.183286,6.965992,-1.430539,5.032771,4.472157,1.479435,-7.920432,8.323873,7.968294,-8.168839,-1.928543,5.344963,7.555588,6.806410,9.442577,7.674992,-0.466071,9.470806,-1.448563,-5.545912,5.042534,-9.505813,-6.786908,1.845788,4.062499,-6.011772,1.598643,-6.807842,-5.970734,-3.947236,-3.951242,8.805777,-9.581716,7.168636,-2.182506,0.183315,3.406803,8.661061,0.912234,6.058945,-6.179048,-5.662336,2.120108,4.638098,-3.806020,7.343445,9.908667,-9.517864,2.353652,-4.294657,0.557288,0.678757,7.771337,-5.906405,8.911040,9.209233,-4.675467,-5.423389,5.740135,7.349501,7.620286,-0.271207,-8.684311,-1.192434,-3.408871,2.363855,-7.861536,-2.349905,6.246943,2.046085,-3.068365,9.518145,-8.454634,-5.017225,9.149147,-5.776697,-8.524277,5.025817,0.003585,-2.660173,-3.377771,9.771237,-1.286357,-1.014755,8.147423,-2.658721,1.376727,-8.490945,8.420648,1.145901,-0.931261,5.862735,-9.316818,1.737228,9.018735,2.523215,6.092545,-6.542488,-8.205470,-3.464990,-7.731871,9.496675,-2.273289,-0.328088,-9.816541,-6.753621,2.420270,0.875885,-3.090277,2.607933,-1.997611,1.598941,5.510673,6.487465,-1.592489,9.186059,-6.686184,-4.799323,-6.400121,4.382089,-9.691015,-4.452346,8.838040,2.618012,-3.058803,5.203071,8.665413,5.532258,9.762711,-1.344410,-7.034287,-0.829795,-1.157426,7.200007,8.981319,1.042056,-6.778923,5.517293,3.022464,4.961501,6.280486,-5.906627,0.656652,-5.204465,-5.871153,-2.922496,-4.042569,-5.442125],[-3.244668,-9.556141,-0.620488,6.405376,8.512145,-8.137972,-5.717752,-1.953515,1.385757,-6.978221,-4.491926,3.247274,-9.738498,8.480633,-3.415031,2.766322,2.849698,7.646074,-7.207377,-7.016991,0.168255,-2.171125,-2.223839,-6.436521,-2.101213,-8.034431,3.273057,7.115330,-8.506607,-5.759889,-0.175862,2.987739,7.021035,4.787375,3.817605,5.303403,8.903852,-8.016259,0.909872,3.838085,-5.157000,-4.166918,9.226804,0.187315,1.786799,-1.187363,0.789059,9.700004,-5.529933,-0.133382,5.774286,7.384497,-8.796345,-6.148791,-4.709055,3.359283,-8.264951,-4.618423,4.833585,9.253232,9.497030,6.167527,9.943537,-4.062562,5.639451,5.020712,-2.117634,5.816777,1.022498,-5.701714,3.542984,-2.291650,-8.298792,9.020954,-9.892543,-1.754921,5.284234,-9.969496,-5.057882,-0.473800,-9.606692,-5.743502,-3.705945,2.214759,-9.960235,8.095586,4.561718,4.132186,-9.816304,1.575610,2.236500,3.896777,7.230655,9.712078,-6.815733,-4.514591,8.083788,6.690933,-0.310254,8.958494,2.171336,5.144437,-7.751032,-4.194827,6.759344,1.072255,0.039894,9.564796,8.237703,-0.205299,6.726171,-6.403934,-4.045506,-3.837119,-2.247288,0.044078,7.047022,-7.447642,6.053446,-1.699298,-3.970965,3.253002,-6.181412,3.279192,9.848626,5.332166,-4.388425,7.774760,-8.664798,2.086883,-7.725392,-4.413052,7.097478,5.444568,0.694647,-6.643175,-4.127825,2.414677,-6.543211,-2.039116,-0.213348,-9.566592,9.457546,4.956343,-3.500677,-7.394379,9.113357,-0.976630,1.770237,3.401820,1.589557,-9.313586,8.542520,2.707119,-7.949442,3.431539,5.018327,8.941414,-1.403115,-9.089202,-0.280698,3.672005,6.293374,-5.373511,6.800711,4.479363,6.463464,-0.547176,1.376097,3.588530,8.464448,4.364434,-6.587547,2.178776,1.306459,3.995937,-0.187960,-6.689861,-3.660291,-5.044159,-6.203857,6.236625,-0.911198,5.094599,7.675428,6.140011,6.830091,0.114731,-9.640555,-4.544361,5.060593,6.864548,-4.883044,5.952262,-0.430683,2.450440,-6.869536,2.771242,-6.065753,-1.933904,7.180049,9.212312,-2.576316,-6.255712,0.369577,0.764491,4.364381,3.989358,-2.881576,-8.861605,-7.045517,4.204623,-6.264401,9.570941,2.013143,-5.445206,-2.275444,-2.340178,7.136133,8.721764,7.805801,3.143757,8.707793,8.625136,8.387347,-0.610578,1.208460,-2.133824,-0.621270,-6.554529,-7.145919,-9.940068,-7.202739,0.884543,-1.948231,4.365786,7.338241,-2.650603,1.123778,-7.337522,1.444354,-7.379393,7.808626,3.297354,2.394369,4.679103,-4.872402,-2.829605,-5.560283,-9.069823,-0.813610,4.737812,-4.883868,-4.684901,4.780451,2.381530,9.088601,2.000041,-9.610823,0.329326,-7.565255,1.947125,-2.429252,-9.735600,-3.167443,5.096657,-3.075935,-1.100758,-9.630953,-9.401750,-0.589422,4.228044,0.818710,-3.168731,2.894481,3.661830,-6.707051,-5.049852,-8.577952,-0.195681,-2.146074,1.425468,-0.882823,9.737227,-8.662366,-2.802691,1.025518,8.206634,-8.327788,0.207226,2.403099,9.776864,5.054871,-2.281402,-8.733659,-0.588040,2.221021,0.637449,-8.530964,-8.568451,-6.214605,7.990693,-3.870338,8.563318,-5.196633,-9.835431,9.055797,6.957791,-1.856913,8.073968,-5.453510,1.472315,7.236436,4.134629,8.101644,2.332970,-9.377027,-5.837049,7.476252,4.481993,-4.992027,8.652984,-4.312030,-9.513001,-6.209505,9.822981,-8.517880,-6.169828,-9.228121,2.138466,-8.073731,5.685217,8.949037,8.536412,3.003964,-1.736112],[3.959289,-1.355608,-2.781082,-8.950255,-0.641803,-8.280576,-5.563068,-4.619859,-9.027171,-2.647344,-5.040335,-8.546966,2.734482,-0.182979,-0.642939,-5.111043,-7.126784,2.962647,-0.342803,-6.818874,-6.007005,4.168862,7.754484,3.005881,8.953470,-1.203341,6.229236,4.150627,8.370460,-8.609649,-5.367771,0.650098,3.851511,0.184034,-3.055443,-3.414660,-4.639025,5.916274,6.159251,-4.371034,-5.084057,6.169092,1.207315,5.688172,-1.059284,-3.785578,-9.735252,-4.126097,4.571334,3.168719,6.694922,-8.844400,1.718029,5.810592,-4.011268,5.611224,2.383390,-0.395941,7.290727,8.171358,1.655536,-6.130245,9.789094,3.146080,1.646472,-2.551244,-4.778878,-0.059338,-9.428474,9.178908,0.905488,1.616126,1.563111,2.540655,7.539619,-4.977643,3.720364,4.933273,9.305815,2.157552,3.168705,5.322791,-5.640442,-4.797657,-8.033305,4.554252,-2.184041,-3.390837,-9.769880,8.519684,-0.238621,7.984882,-7.686723,-4.889375,0.776882,-0.617351,0.496820,5.741648,-7.717993,-5.910066,0.319272,-7.038672,-5.891463,6.282673,0.480491,0.157422,-1.035054,1.460816,8.818697,2.661593,0.922343,9.890416,3.768148,-2.070670,-7.601325,-0.989342,-7.230473,-9.488063,6.740414,5.819610,-8.938669,-1.040100,6.774952,9.641292,1.627831,-5.553261,7.152035,1.834803,-8.758308,-6.811578,-0.650155,-6.058316,3.433533,-7.117095,-5.085848,9.114346,-5.241536,6.145316,6.439971,-9.134877,1.556672,3.641463,-6.538794,-9.307433,-7.744129,-3.977153,6.627834,9.455860,0.117037,-2.633535,-1.307938,-0.008621,5.730852,-6.101816,-6.750625,-6.249334,0.351195,-1.150687,-3.656636,-7.904485,4.524261,-5.089737,8.346071,-0.705013,4.414223,-1.242150,-4.285898,-0.352031,0.168771,9.410828,5.212433,1.128438,6.707656,-0.048078,-4.018463,9.277452,7.140729,9.810654,9.652426,9.166562,-6.566762,-2.409864,-7.615942,-5.575476,-4.761845,-3.779956,8.340918,-2.490458,0.289887,2.724894,-9.375842,-2.063592,-5.825013,-8.441324,6.886491,-4.698319,-5.033866,-6.647296,0.245237,-3.622370,-8.747511,2.433052,-3.140691,1.764904,-1.001264,-7.960039,9.627108,0.974343,-2.170251,9.248847,9.869260,8.339917,1.791259,2.677865,-9.085812,-6.946316,-0.292298,6.642201,2.817066,-8.450633,9.922739,-9.478156,4.174449,-1.871529,-5.815253,6.021700,1.845031,6.054430,7.634306,7.525799,-6.613526,-2.933373,0.578328,2.991880,-5.691054,-1.551971,-1.527995,-2.126729,-8.601817,2.306915,9.074404,2.554704,5.865811,7.140318,9.956835,6.451953,-2.462044,-9.845931,5.968635,-4.297561,4.959773,3.952622,-1.367168,-8.799550,-6.467400,9.067455,-8.105714,-8.429342,4.449300,-7.568917,-1.283982,-4.926926,-6.176904,-1.357231,-6.836145,2.459894,8.510250,-7.720671,4.141371,1.823124,-8.959499,2.046658,6.656036,8.745493,8.006239,9.847588,0.442979,-3.986351,-2.689089,9.668013,7.779836,-4.307526,9.797349,-4.078375,2.055094,-2.596033,-7.104178,3.040920,6.449305,-3.522759,-1.647990,-2.232434,9.525270,8.031408,5.969934,6.558208,-8.265423,3.393308,-2.978103,-0.868999,8.319634,7.630028,-7.644685,3.014863,3.501828,-9.820680,0.992179,2.203782,6.794585,-9.711853,6.615952,9.487887,-2.443798,2.675385,9.515056,-1.193779,-1.901840,-6.207421,-6.546088,-8.156417,-2.097621,-4.166220,3.378555,-2.284240,-1.621299,0.477896,-8.688767,0.467800,-8.081233,3.217250,-6.015065,-0.148654,-6.123100,2.143092,6.396174,-5.786035],[-3.816761,5.132946,8.963100,-1.337393,3.703229,8.825753,5.784104,-6.846783,-2.671476,3.946185,0.109470,6.822437,-0.130843,1.920401,0.457636,9.950646,-7.511208,9.137640,5.166358,9.066272,-3.836329,-6.348060,-0.885303,4.991415,9.760028,9.560000,-3.202223,-7.658010,-9.372695,-1.884842,2.924535,8.896815,7.355670,0.396665,4.800884,6.597432,-9.985218,1.079614,-8.751580,8.557210,1.457992,-9.858463,7.961930,-9.353415,-2.610939,6.029885,4.378182,0.878201,-1.147889,1.684635,-4.435736,7.166320,-9.467731,4.581423,4.279114,-8.278309,3.869452,-7.361495,1.297153,-2.646323,-6.440168,-9.021074,9.924996,-4.652622,-7.885787,3.954979,-7.656033,9.570584,4.859433,4.522993,4.495966,4.117990,-6.370981,-8.720608,-7.154605,-1.410036,-2.805898,-9.009529,-5.383198,2.773446,-4.064618,1.634772,9.066130,-1.526575,1.699430,6.086900,6.777624,-5.239337,7.561390,-4.384012,0.355735,-2.050872,2.605750,8.866722,8.191740,-2.969621,2.197701,-9.319319,2.610100,5.036041,-6.878522,3.943303,1.026617,4.924655,-2.821377,9.534633,-1.224133,-2.253659,-5.424775,-4.421094,-3.913259,-5.730706,-1.647057,7.532622,1.078008,8.353973,2.265646,6.653690,-4.497229,7.555003,-2.992756,-6.780422,-8.494141,-9.610168,6.706533,-9.834183,-3.785924,5.292188,4.090048,-4.003840,-1.056057,-0.627984,-1.226708,-2.044735,7.654712,-6.056164,-9.778977,-7.650724,5.994664,-3.011692,4.434128,-9.492937,9.675386,3.148699,-4.698267,0.606776,9.723996,2.299461,6.929540,-3.882532,0.598005,7.223670,9.221126,3.976764,-7.120206,3.719007,-5.775859,0.017733,-4.533553,2.513573,-6.948898,7.698689,-8.857946,-1.596076,-5.302781,-9.836830,4.030663,-2.894389,-4.291476,5.954087,6.215325,-0.373684,-7.902202,9.932398,-4.019157,-3.041439,5.441456,-3.906760,-4.515642,0.947713,4.255358,-8.263835,7.815840,-6.986772,-8.152379,8.302045,-8.493209,-7.486533,1.418181,1.101643,-2.495300,7.711798,0.109002,8.905211,-9.247566,8.755004,8.801839,-4.023980,-8.519122,-3.967414,-5.745775,-8.953973,8.187450,2.679369,-4.097991,4.209474,-4.976823,-3.270462,-5.678380,9.326642,-4.211436,3.461549,1.071514,3.014027,-1.296929,-8.570260,2.805773,4.959221,9.203623,4.508603,-2.295579,-1.095981,5.255557,-7.350936,9.135443,-7.472366,-8.643192,6.852537,8.165699,5.061456,-5.676198,-5.117982,-6.721726,-3.259091,4.977415,4.494833,-9.196575,-2.775807,-6.729427,-0.487546,9.856992,-4.360950,-3.414361,0.389708,-2.233446,4.223521,-3.880846,-6.597471,0.023380,3.614628,-5.000173,-9.818326,-7.921580,4.840229,-5.846930,-9.387245,-1.493390,0.047078,-3.274991,4.048340,-8.573406,7.087286,-1.495606,0.085854,6.407331,-4.647541,-0.707622,-3.118022,-8.983766,1.972413,2.304016,-6.960111,-8.440539,-9.185487,-1.366847,5.367712,-3.881179,6.031485,-3.810854,8.675921,8.417672,-0.281540,-0.901009,3.309751,-1.463348,4.600043,-0.988672,2.190361,-0.588138,-8.171872,6.222396,7.338750,-5.567698,4.292936,5.232011,-9.539404,-9.801565,-8.389482,-6.378437,7.801123,5.685134,-9.552082,-5.743731,-2.546636,-6.358058,7.882074,8.720001,6.633600,-9.786684,-9.863257,8.378106,-5.097685,7.843749,8.531506,-5.996534,-0.200669,0.297603,-8.601656,1.436030,-5.986659,4.510499,1.934027,-7.334966,-7.875536,1.187663,3.977192,-2.033575,4.593860,-0.228569,9.925963,9.935547,-3.575529,-0.340194,0.766688,-6.035136,7.058882],[3.652264,-2.311345,-2.072007,-7.987627,3.044076,-7.967788,-3.747000,-5.453395,-9.904673,0.684840,5.591911,9.485351,-3.742002,4.280576,-7.082410,-0.821711,-4.004323,-7.644819,-9.331054,-6.912991,-7.401904,9.942414,-9.805968,1.111105,8.330777,3.704694,8.912203,-5.216432,8.161007,-8.378948,3.229832,9.051790,1.098999,-0.798841,7.560181,8.660762,8.383352,-6.111280,-5.656956,4.026363,-3.058787,0.105705,2.423580,-7.319970,7.375760,-4.160352,8.278740,-6.561836,5.562003,-9.666734,-2.668019,-6.526936,-2.751927,8.321270,1.294835,-6.159618,2.458298,6.964020,-8.753453,7.537802,-9.100434,-2.516790,-3.257378,-1.831446,3.317477,-7.660208,-8.456239,1.589043,4.478999,-4.540637,8.169424,-9.578262,-4.276555,9.252715,9.781358,-7.024338,5.642060,-4.114163,-2.983700,1.748288,6.833790,6.511833,5.773293,5.443561,3.360527,9.378499,-3.193739,-4.049600,7.978032,2.383093,-3.244863,-2.566425,-0.501198,1.591643,3.357142,-5.701125,-9.700740,-1.535957,3.522707,-7.684377,7.449305,5.977734,-4.978800,-3.412345,-6.900782,-0.845324,-9.634437,-9.436121,1.228484,6.746682,-0.776116,-1.711998,4.692035,-0.162077,-8.984211,9.350268,-0.721832,4.555704,-2.707685,-3.890884,-5.646256,-7.742827,2.432434,2.144973,-1.045642,3.186770,4.764455,-5.242581,9.974166,7.802323,6.011084,7.288159,2.164260,-1.163024,0.877442,-1.164952,-9.332035,-7.550299,6.547269,-0.442102,-2.723060,0.697505,3.777462,-2.583026,-7.491112,-1.804290,-4.848105,-1.985701,6.571136,-3.989617,8.905301,-4.902045,8.062837,-9.504370,-8.951569,-5.928043,-5.312350,-5.921726,9.115518,-5.582518,-6.249249,-3.838067,8.423656,4.158017,8.072550,7.649536,-3.360807,-7.065667,-1.734781,1.743902,-5.216611,9.330999,8.877416,-7.628446,-3.214628,-1.594412,-7.081585,6.849805,6.864170,-7.009921,-7.063570,-7.061001,3.231751,-2.172396,0.375223,-4.224593,-3.242171,-9.047103,-6.022683,-1.267873,-1.658277,3.831100,7.031315,-7.598234,6.252429,-1.658797,-1.811020,9.055367,5.291309,6.291520,7.669788,-2.466526,2.786456,0.628310,-1.935890,-5.020989,-4.270161,8.006719,-3.483566,0.710921,-8.031737,-0.429854,-2.456203,-6.317077,1.689862,-4.017606,5.950314,-6.858309,4.157536,-9.495712,-6.633705,-7.745881,1.786477,-4.770611,7.696631,4.842983,5.342494,-0.436665,5.708960,-9.089757,-8.325407,9.712522,0.760220,-2.760236,4.985888,-7.144991,6.915862,4.573828,-6.555989,5.691193,0.353356,1.716663,-8.422140,-9.323380,-2.685390,-0.100110,3.345312,6.011675,-7.678002,0.890795,-2.121844,1.107342,5.542801,-0.870498,-7.501129,9.664561,2.026028,3.634272,6.808993,4.076862,-9.045180,-6.623905,-1.873871,-1.619911,-3.891377,-5.960646,-3.134471,-4.212452,-1.498797,7.933568,-2.888987,-8.614878,-5.891166,4.632935,0.882936,1.314807,3.355510,2.950302,5.288811,-1.064347,-2.914030,8.558990,-0.150305,-8.207014,-6.761635,1.395198,-7.372930,-1.567973,6.500464,-7.247222,9.343135,-4.879255,-9.025728,-8.455091,-2.334062,5.420623,7.367485,6.566607,-5.794455,2.630963,3.267812,-2.792095,-9.260667,-9.661031,-6.538100,6.420399,7.293011,-2.667009,1.728486,4.175340,1.028638,-7.300413,4.898355,-9.351954,2.461629,9.584932,4.690887,6.777247,-9.243667,1.505648,-9.032638,-0.524269,2.090680,2.178809,7.786956,-6.853065,8.692115,-9.040432,-8.233775,5.031748,-9.763089,-9.440120,-8.408974,7.440816,-4.571689,7.424759],[4.697889,-1.844808,7.143487,-7.109539,-2.246439,3.832876,6.608865,8.896324,1.805333,-1.900214,5.163021,8.083757,-8.594417,-9.134301,6.572835,2.682634,-6.528306,0.862556,-7.177090,-9.667194,-7.353820,-9.866958,1.133323,7.939823,-8.913200,-8.196238,5.887957,0.961870,9.113718,-5.835925,-6.642958,2.237227,3.393429,-9.015761,-0.775524,-1.040812,-6.730346,9.976756,-7.550618,-7.577507,-2.307447,-5.955017,-8.787233,1.999248,-4.113924,6.229835,4.234350,4.335708,0.888373,-8.895807,-5.496951,1.482441,-3.376944,2.093373,5.904787,7.334503,-6.964578,0.744361,-7.509175,-2.508667,-2.459574,3.693189,1.931822,-2.377021,-9.539312,-9.788563,-8.156312,1.094732,-7.800764,5.823741,4.296242,6.183591,1.044507,-2.513375,5.383694,-4.295863,-8.057570,-6.125419,-1.433875,2.306360,8.975109,4.738384,8.190696,-1.910209,9.895618,1.781526,1.160765,0.233541,-5.104425,-7.311093,-8.408730,4.381387,-8.388788,-2.389706,1.798080,3.924756,-7.159788,-0.326337,6.949177,3.112789,-9.798873,8.645460,-1.659642,-5.754975,3.181013,-9.081836,4.585769,-7.650410,4.821714,-0.067700,-7.006386,-3.580877,2.909145,-6.382032,6.936851,5.737375,4.414575,5.801229,1.291922,-3.521041,-4.122663,8.212195,-8.400685,9.879672,-3.568687,-9.961037,5.998809,0.889750,8.784319,-8.275994,-3.474752,2.374377,-6.952519,6.890950,-0.480823,-9.976968,-3.263398,2.014258,-5.161590,7.310249,-7.616924,4.103942,-9.700434,-4.352233,2.571840,-3.745065,8.328778,7.891857,8.872563,7.297540,-1.245553,-6.733205,2.148225,5.021734,5.862150,2.209068,0.160200,0.413343,4.895953,6.595650,-1.994376,-5.503589,7.441001,-4.403194,-5.330815,8.885640,9.042068,-8.186494,5.488864,-0.184883,-4.758248,-5.268036,9.763105,4.169789,-6.089647,3.632116,-4.643645,-8.397635,5.120743,-3.607856,-8.633240,-6.064644,-6.060993,0.561026,-0.269119,-9.597597,8.449619,-5.645730,-2.708689,5.785475,5.203814,-8.220727,5.404135,0.187736,8.838657,-2.303659,6.564195,8.598622,6.468860,5.211243,6.344126,-6.178606,5.177966,8.595516,-1.698452,-1.192734,8.469823,-4.963449,4.621525,1.105826,0.917193,-9.059907,-5.925420,-3.049646,-9.229540,9.455636,5.009655,-8.151017,0.903006,1.480080,7.200867,5.512981,-6.551593,9.860681,6.657238,-3.779957,-9.699740,-6.934437,-9.485332,7.118782,-5.622814,-1.466126,-7.835071,-5.886982,-6.180188,-1.910619,0.390629,-7.237716,4.083075,1.355218,-7.417181,4.673209,2.145711,5.087301,9.803347,-8.586998,-1.754701,4.713094,-5.565129,-6.855152,7.559679,-3.443534,-5.929609,-7.417370,-3.683445,-0.476608,8.968329,5.024497,9.727024,1.655876,4.841199,6.012284,-1.883314,2.023218,-7.633173,-2.035666,-1.431754,9.133656,0.715819,-9.595828,9.627556,5.378800,-4.981175,0.096346,1.921457,-4.411356,7.649228,-3.400470,5.369754,-1.175395,6.910267,3.073601,4.267458,-0.642978,0.204697,-3.305144,-9.259128,5.306963,-2.492584,-8.420392,0.462106,9.718013,-8.043411,3.638852,9.604692,-6.667143,-2.887479,-6.766457,-9.994322,-7.538083,1.307465,-0.009175,-5.878898,-3.676967,6.937533,2.242031,-4.318382,2.401581,-3.839452,-2.634868,-1.484745,5.054790,-6.902877,-5.703573,-5.284157,-7.139092,2.755789,2.477067,2.481356,-2.593012,1.804890,0.152718,-7.771120,-5.165096,1.581847,-7.306177,9.087064,-3.108847,7.397984,-1.579682,-7.578936,0.874747,-2.229054,6.166776,5.919326,-0.547705],[2.764482,-9.215621,-5.960719,5.551306,4.322636,2.623144,6.027619,-8.052026,-7.763032,-5.253191,-8.491276,-0.469343,7.852268,-9.299681,1.771471,8.013324,-8.407451,4.189035,-5.344186,4.263480,-7.244427,8.673758,-1.905617,2.126607,-3.913639,2.528497,1.397788,2.331223,-1.242940,4.476196,-5.625885,-9.536115,-5.391081,7.863959,-0.783372,-8.876630,7.139256,-8.394201,-9.415388,-1.444803,-2.675002,4.638724,5.129954,-1.690624,-9.041315,-1.563441,-9.586763,3.255997,-0.118526,7.201286,6.032250,0.846907,1.973290,5.141813,8.384906,6.167449,4.316127,-4.566354,7.725348,-0.314614,-2.991446,2.119938,-3.304603,-9.477814,7.331527,4.657606,5.065692,-8.817994,7.305361,-2.856094,6.265424,-6.874702,-0.628777,-2.049865,4.405893,6.906890,8.383180,-1.594165,-7.337741,-2.245205,-1.725847,-5.298281,-0.565941,1.613505,-4.168018,0.236179,8.906910,3.589302,-4.469412,1.856599,-8.214832,8.961100,2.191576,0.719936,-4.846430,-2.632850,-3.002909,8.768572,8.674701,-7.164401,-7.012973,3.044133,3.924802,-1.475367,-9.982969,3.740645,-9.728711,-8.919506,-8.504058,9.891150,1.181695,3.784873,6.330673,5.090615,6.913586,-2.615284,6.865097,4.971288,-5.093984,-7.289607,-8.724426,-9.238021,-1.915327,-2.514661,-6.741576,-6.066741,9.216032,0.016321,-3.911279,5.045776,-3.284774,8.814500,-3.376856,-6.523917,-9.769978,3.209773,-8.263116,-3.953798,1.830237,0.139827,-4.474244,8.082762,-2.213388,-6.999359,6.026850,-2.560785,-6.816299,3.308159,3.108158,1.410608,-1.614647,-0.953801,-8.640004,-4.083897,3.114838,-9.640765,8.918375,-5.591729,-5.905886,-0.693613,-5.139064,-2.998210,-3.496927,6.539267,8.436392,-7.471073,-6.291053,4.511579,2.682681,-1.633792,6.914643,-0.741717,-7.735778,-6.683777,-0.579501,4.481306,-5.615442,5.202402,3.566534,-0.300555,7.195892,8.039951,7.394080,0.336741,-3.049003,7.606515,-6.972890,-9.353005,-1.325689,0.103978,8.981208,-7.116916,-8.587617,-8.528036,-8.161650,1.124650,8.393342,5.210055,1.056477,4.572007,-7.204703,2.636057,8.185835,-1.470442,1.660470,-6.879097,-6.899961,-0.312865,-8.475824,-0.685865,7.819199,-0.896434,-3.327527,3.404852,-1.490302,9.715422,0.555466,6.628156,-1.489400,1.506370,-7.394917,-0.927431,-9.867495,9.278934,-7.903903,5.059951,9.303705,-9.377285,-1.759102,5.504976,1.722995,7.747927,-4.514806,0.999556,-6.785814,-5.837959,-8.668589,4.802390,8.592318,5.253913,5.813091,6.727555,-6.575548,-4.681710,9.383256,-0.252801,2.916756,2.200168,-3.791095,-2.368288,1.939324,9.053075,-3.404169,-1.807764,-7.382396,0.129995,3.747502,-8.094334,-8.155951,-7.093897,0.519745,-3.014200,-9.542232,-4.076715,-5.962283,-7.800411,2.882633,9.028587,-4.623181,5.782843,1.437571,-8.849355,9.330650,9.033351,-1.690321,4.446821,-9.642169,-5.577662,1.455733,2.900793,4.521064,-6.054222,-7.015640,-2.654044,9.523740,6.747837,-2.364357,8.088392,-2.639411,-3.653599,-8.325104,-3.746376,6.795600,-5.302023,6.904334,4.556079,3.208772,7.998787,5.543706,-8.181458,3.204513,-4.555467,-2.772881,8.550279,-7.623545,4.893251,9.187183,9.690516,-6.862465,-9.137453,1.101881,-1.575231,7.332080,-0.512820,-8.940825,2.391236,-8.311630,7.746661,-9.356469,-0.014765,-0.015315,1.462474,2.126224,0.509029,-9.707604,-3.155214,8.801828,-4.250561,-8.982546,1.126487,-4.105060,7.623526,-7.768734,1.625976,2.717030,8.244964],[2.370000,-7.873266,7.872616,-1.543147,3.646146,-7.587998,5.231041,9.635354,1.049544,-8.113941,0.833319,3.754361,8.977604,-0.832026,-6.101287,-7.558864,4.840082,-6.884242,-2.925217,-6.887050,8.200781,-2.099781,-0.115572,8.889024,8.400208,5.192128,9.679280,-4.461822,1.718411,9.974343,3.598334,4.904323,-6.977175,0.398103,-9.375059,-8.415267,-8.483557,-0.278281,-5.037274,2.455246,-0.319958,9.804025,7.436152,-5.938194,-9.804430,-2.955065,1.619641,-3.613166,0.240463,7.910405,-3.273649,-0.524508,-4.383881,6.581509,-5.598832,-2.102795,6.752093,-9.804313,-0.242008,0.478682,-2.756651,-9.452537,6.340553,-0.798514,-4.511321,-9.540452,8.524261,-8.095089,8.871696,6.434155,-3.188769,-8.736536,0.668013,-1.663368,4.066523,-6.917295,3.758927,-6.648331,-3.433520,0.613834,-0.484304,9.002451,-7.779647,1.547654,2.215987,4.378825,0.990134,1.378557,-2.996032,-3.369136,7.081331,-4.855537,2.030951,9.147548,6.146765,-6.816124,-5.264622,2.761189,0.194696,-1.215357,5.433156,-9.026740,-7.058164,5.257894,4.802813,-3.629966,4.793488,8.672531,7.372438,-5.489628,-1.863169,-5.631384,-6.291641,7.657040,6.718568,-8.046690,-4.669468,2.877835,-1.231361,1.420024,-6.504632,-9.215955,-6.357982,-4.047382,-6.880751,-8.935408,6.062671,1.167266,9.787458,-1.157470,-8.492336,7.889201,1.980653,3.154635,-8.694191,-9.374579,1.861592,-8.336501,-7.146280,4.298199,2.020969,8.290811,7.156675,-5.482214,-3.697375,1.271386,2.267723,0.961371,8.497739,-0.983461,0.246990,-4.204621,0.493725,7.328879,5.123022,-4.322677,-6.248979,9.283144,-0.938672,-5.490673,-2.539352,7.366705,1.856950,6.874465,-3.368094,-6.539061,-7.572827,-6.272134,6.698537,7.622203,-8.380306,3.157427,-1.274448,-3.520209,-5.040883,9.721335,-2.795127,-0.203321,7.830897,-6.389505,1.095671,4.975309,2.317720,0.938634,1.311257,7.407808,-0.786019,8.437657,-3.374685,5.213324,-2.106985,2.685995,1.184670,-0.991839,8.508834,-6.897912,2.613959,-1.376599,4.954491,7.195322,4.777342,3.600375,2.904393,-7.030661,-2.169052,-1.534341,-4.161206,-7.684035,3.058223,-1.877531,3.351100,4.805620,-8.143044,-6.950785,5.519789,0.605555,-3.460023,-5.373798,7.103736,2.885732,-6.584478,-6.686841,-1.280186,0.017693,-9.655611,-2.713445,-9.899786,-9.808832,-6.089447,1.335922,2.704423,-8.919636,2.408704,9.250143,8.464524,-7.154169,7.240972,-9.556256,4.957844,6.793308,1.507279,-5.112936,-9.911514,-7.414472,5.349466,-4.612309,-0.768028,-4.309844,-6.483674,-8.727898,5.144055,4.767096,-6.888166,-3.267757,0.904410,4.979967,1.809047,1.955036,-0.013155,-4.287030,5.310264,-8.841523,9.247822,5.365743,3.594297,4.899363,-1.545196,3.598257,-9.379169,7.596431,4.746585,-9.206057,-9.346944,-7.077432,-6.542673,-2.624280,-8.848197,0.778383,7.904944,3.325379,1.539298,1.179716,4.627643,-6.126335,-2.314152,-1.922196,-4.058274,0.151995,-4.733999,8.156789,-7.235209,-6.303675,8.731159,3.367557,-1.963714,5.071025,9.903856,8.034510,4.395894,5.351725,9.577242,2.942904,-1.336256,-7.877991,1.214310,4.830678,8.942203,-9.864205,-0.886303,-9.207871,-2.630733,-9.493282,-6.941025,-8.417262,6.650931,-4.263283,9.335016,-7.342744,-4.843512,-4.189635,-8.748327,6.235800,5.754572,-4.241081,2.215204,-9.527650,-1.772435,-8.648578,9.194991,-6.543314,-7.251125,8.628214,5.166261,6.153951,6.559066,5.016463]], dtype = "float32")#candidate|1121|(8, 336)|const|float32
bop_1122 = relay.less_equal(var_1118.astype('bool'), const_1121.astype('bool')) # shape=(8, 336)
output = relay.Tuple([uop_1091,call_1096,call_1101,var_1102,call_1104,bop_1108,call_1117,bop_1122,])
output2 = relay.Tuple([uop_1091,call_1098,call_1103,var_1102,call_1105,bop_1108,call_1119,bop_1122,])
func_1129 = relay.Function([var_1097,var_1102,var_1118,], output)
mod['func_1129'] = func_1129
mod = relay.transform.InferType()(mod)
mutated_mod['func_1129'] = func_1129
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1129_call = mutated_mod.get_global_var('func_1129')
var_1131 = relay.var("var_1131", dtype = "float64", shape = (32,))#candidate|1131|(32,)|var|float64
var_1132 = relay.var("var_1132", dtype = "float32", shape = (60,))#candidate|1132|(60,)|var|float32
var_1133 = relay.var("var_1133", dtype = "float32", shape = (1, 336))#candidate|1133|(1, 336)|var|float32
call_1130 = func_1129_call(var_1131,var_1132,var_1133,)
output = call_1130
func_1134 = relay.Function([var_1131,var_1132,var_1133,], output)
mutated_mod['func_1134'] = func_1134
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1235 = relay.var("var_1235", dtype = "float32", shape = (2, 10, 9))#candidate|1235|(2, 10, 9)|var|float32
const_1236 = relay.const([[[-8.491182,5.483890,-8.220033,-5.232970,-0.070946,6.280262,0.132615,-4.757966,-5.478751],[1.899690,-8.168982,6.895722,-8.188530,6.928140,-5.471788,2.556830,6.549103,-0.715457],[5.924904,5.454918,-4.621740,-3.044551,1.919197,-1.755047,9.872199,-0.256376,6.726475],[7.796687,-8.696343,-5.502059,0.885208,-1.718609,-8.689449,-8.015156,3.517745,6.819183],[4.626598,-5.455970,3.681038,-4.006807,-9.545970,-8.213316,8.334056,3.127077,6.270284],[-6.795148,-3.591621,2.314738,4.965271,-0.440631,1.878372,-9.268581,-2.187465,-3.150162],[3.195732,-0.611444,3.998104,1.288671,-9.586856,8.381958,-1.570569,0.011748,-3.754978],[-2.707589,-6.796058,-5.909243,-6.737460,-6.927755,8.215154,-6.392758,-7.824238,-2.421515],[-9.447325,-2.027511,5.373301,-1.745888,6.531845,-6.263521,-3.123348,9.946965,2.825501],[9.670882,-2.381922,-6.496881,-1.671571,8.573383,-6.144743,-4.799881,7.806249,7.519495]],[[-0.959299,2.712315,3.664629,2.498529,-6.996071,0.732566,6.667533,6.803893,-9.776543],[0.419248,1.821388,3.506575,3.374506,-8.978055,-4.788537,5.885174,3.288352,-4.420740],[-4.657659,-3.068131,-0.121977,-4.655019,-9.350114,-2.438903,-5.645518,6.114291,-0.651189],[3.950072,0.390656,-2.287729,2.271008,-2.012373,-6.909474,-2.599120,9.722837,0.261178],[-9.695232,5.771887,-3.193325,2.801932,4.395367,-2.947911,-3.332427,2.213889,4.227045],[2.579002,5.634303,1.106869,0.040741,-2.443017,-4.840484,-7.573421,-8.367687,-1.215978],[1.234361,5.498712,-7.778620,-6.508447,3.088790,-2.888985,-1.525827,7.912238,-4.954100],[9.298874,-4.949650,-8.364003,-6.628650,2.217434,-7.541741,9.896942,-1.702663,-5.047857],[-2.425254,8.412816,6.169486,-4.079848,7.367403,0.780297,-7.607179,2.703161,3.780387],[2.949899,6.642998,-6.094736,-3.348018,7.165909,-5.477369,-9.153160,6.641202,-5.959386]]], dtype = "float32")#candidate|1236|(2, 10, 9)|const|float32
bop_1237 = relay.floor_mod(var_1235.astype('float32'), relay.reshape(const_1236.astype('float32'), relay.shape_of(var_1235))) # shape=(2, 10, 9)
func_1129_call = mod.get_global_var('func_1129')
func_1134_call = mutated_mod.get_global_var('func_1134')
const_1242 = relay.const([-8.483094,-3.747030,7.850132,-0.344778,1.485577,-4.844908,-5.363779,-6.854347,-4.820051,-2.838870,1.491357,-2.492781,0.613679,-2.394368,7.231965,-7.575194,2.551613,7.533130,8.818366,-6.847694,-3.618609,2.395031,6.119585,3.380683,-4.649692,-8.972747,-4.733574,1.841788,6.394742,-6.545326,-1.459961,-8.427111], dtype = "float64")#candidate|1242|(32,)|const|float64
var_1243 = relay.var("var_1243", dtype = "float32", shape = (60,))#candidate|1243|(60,)|var|float32
const_1244 = relay.const([[4.927487,-2.589096,2.643200,-0.446133,-7.682461,-9.690550,3.481080,9.909592,-7.495047,-4.017164,-1.763418,-3.181401,4.903857,6.500334],[0.310201,0.298087,6.605553,-9.429545,-7.533043,-4.917185,9.781140,-2.723804,3.914801,-8.227844,9.604836,-2.535620,0.586406,0.429474],[6.436352,9.358518,6.079770,0.527573,-9.987464,9.344250,-3.742110,6.795386,3.629093,-3.440747,6.980820,-4.146318,-4.703076,-5.940303],[-2.756048,-2.922279,-7.091349,-1.855423,-3.955536,9.345692,5.111212,4.172537,-5.263480,9.015389,-6.682664,-1.638418,0.404580,8.487593],[-0.404587,6.089382,5.058652,-1.556114,2.825292,9.644438,-3.529870,-3.100668,-8.304083,9.449973,-2.804298,-1.278993,7.609443,8.902011],[9.787578,-0.365540,-0.254094,-4.197504,2.757425,-6.801339,-8.240916,-5.881082,-7.235214,-9.724119,-7.655655,8.738518,5.089680,4.504073],[3.418614,5.590126,2.278713,-4.920390,9.154239,5.213884,4.538062,-4.450347,-6.803655,-0.514774,6.168243,1.563170,-0.507301,4.624183],[-4.158996,-9.312808,5.608000,-3.067902,9.668702,-8.931660,-7.835074,7.209774,2.843682,8.992833,-8.800042,-2.134579,-8.983984,4.077068],[5.384558,-0.239207,-5.965850,7.515498,-5.064838,-3.941524,-7.510000,9.793540,1.670672,-8.484780,-8.772647,-3.505959,7.135567,-5.912595],[-2.214218,-5.444821,-6.189515,0.540224,-2.676809,-3.687927,-7.436384,-5.573987,-2.193634,0.542074,4.471777,-5.120248,4.696714,-0.621965],[-0.161532,0.363236,5.061122,-2.771307,-7.449160,-2.318830,-1.515867,-6.883741,4.587589,2.426298,-8.322023,6.214852,-2.341682,2.308903],[-1.980172,-6.610714,-5.096883,6.201014,3.504625,-7.838565,7.273126,-8.604217,6.779153,9.059945,-8.064369,-5.616735,1.364562,-7.250815],[-7.549727,-5.735586,4.280058,4.399870,-7.684400,3.811754,-9.917434,3.581339,-1.683903,2.651131,-4.609262,6.577011,2.215933,2.067648],[1.327606,-8.765477,7.159802,2.085304,0.477700,1.213690,8.816287,2.724394,-6.729894,-3.241392,0.241940,-1.753027,-3.653361,-0.701646],[-0.848006,-9.706360,4.321393,9.272102,9.597526,6.790776,3.004101,-4.554859,-0.928614,-8.686795,9.159108,1.139061,-4.142876,-6.479002],[5.056174,-3.344240,1.285656,-6.330780,7.235620,5.706503,-4.976229,5.109654,5.587830,-2.000575,8.500419,-5.609235,1.871613,0.927718],[-4.436897,-8.716187,-3.009289,4.051535,-2.777219,-9.350834,9.952445,-1.058741,9.844535,8.982017,-6.046580,-1.062745,-7.894675,-7.109654],[-2.539857,9.604706,3.890117,1.585406,-2.517650,1.962085,-3.961485,-7.494588,-8.506377,3.478232,-4.434024,-2.334263,-0.871649,-1.202516],[-1.402599,9.709207,8.390033,7.749645,-7.789543,-0.807748,0.453980,0.552124,-0.758718,9.942890,9.094830,-4.698307,9.467096,-8.230213],[5.206170,-8.703119,5.024611,-0.755929,-4.399777,5.461854,-2.888603,8.699206,-0.533834,9.474355,-9.485831,9.817014,2.891757,3.266228],[-1.275583,2.364841,-7.997412,3.512719,7.574623,-6.249152,2.259591,-1.156330,-9.605431,9.521188,5.598144,2.156008,0.414306,1.391651],[-2.534320,7.657499,-5.489507,-0.412716,-5.558347,-1.366276,4.473166,8.860638,-3.601348,3.616678,6.379623,5.580144,5.927620,-7.612327],[3.860838,-8.506209,-4.650632,9.820616,-8.884719,-1.528568,6.484817,-7.671732,4.268010,-5.234800,1.563964,-5.726375,-6.149198,9.949934],[-1.953836,2.181877,7.707109,1.690019,2.626433,-0.208184,-5.680410,2.682261,9.886353,4.348238,4.590801,5.737049,9.684944,-0.079490]], dtype = "float32")#candidate|1244|(24, 14)|const|float32
call_1241 = relay.TupleGetItem(func_1129_call(relay.reshape(const_1242.astype('float64'), [32,]), relay.reshape(var_1243.astype('float32'), [60,]), relay.reshape(const_1244.astype('float32'), [1, 336]), ), 1)
call_1245 = relay.TupleGetItem(func_1134_call(relay.reshape(const_1242.astype('float64'), [32,]), relay.reshape(var_1243.astype('float32'), [60,]), relay.reshape(const_1244.astype('float32'), [1, 336]), ), 1)
output = relay.Tuple([bop_1237,call_1241,const_1242,var_1243,const_1244,])
output2 = relay.Tuple([bop_1237,call_1245,const_1242,var_1243,const_1244,])
func_1246 = relay.Function([var_1235,var_1243,], output)
mod['func_1246'] = func_1246
mod = relay.transform.InferType()(mod)
mutated_mod['func_1246'] = func_1246
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1246_call = mutated_mod.get_global_var('func_1246')
var_1248 = relay.var("var_1248", dtype = "float32", shape = (2, 10, 9))#candidate|1248|(2, 10, 9)|var|float32
var_1249 = relay.var("var_1249", dtype = "float32", shape = (60,))#candidate|1249|(60,)|var|float32
call_1247 = func_1246_call(var_1248,var_1249,)
output = call_1247
func_1250 = relay.Function([var_1248,var_1249,], output)
mutated_mod['func_1250'] = func_1250
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1325 = relay.var("var_1325", dtype = "uint32", shape = ())#candidate|1325|()|var|uint32
var_1326 = relay.var("var_1326", dtype = "uint32", shape = (13, 6, 13))#candidate|1326|(13, 6, 13)|var|uint32
bop_1327 = relay.less_equal(var_1325.astype('bool'), var_1326.astype('bool')) # shape=(13, 6, 13)
output = relay.Tuple([bop_1327,])
output2 = relay.Tuple([bop_1327,])
func_1332 = relay.Function([var_1325,var_1326,], output)
mod['func_1332'] = func_1332
mod = relay.transform.InferType()(mod)
var_1333 = relay.var("var_1333", dtype = "uint32", shape = ())#candidate|1333|()|var|uint32
var_1334 = relay.var("var_1334", dtype = "uint32", shape = (13, 6, 13))#candidate|1334|(13, 6, 13)|var|uint32
output = func_1332(var_1333,var_1334,)
func_1335 = relay.Function([var_1333,var_1334,], output)
mutated_mod['func_1335'] = func_1335
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1758 = relay.var("var_1758", dtype = "uint64", shape = (3, 15, 8))#candidate|1758|(3, 15, 8)|var|uint64
var_1759 = relay.var("var_1759", dtype = "uint64", shape = (3, 15, 8))#candidate|1759|(3, 15, 8)|var|uint64
bop_1760 = relay.logical_xor(var_1758.astype('uint64'), relay.reshape(var_1759.astype('uint64'), relay.shape_of(var_1758))) # shape=(3, 15, 8)
uop_1779 = relay.log10(var_1759.astype('float64')) # shape=(3, 15, 8)
bop_1808 = relay.logical_or(var_1759.astype('bool'), relay.reshape(uop_1779.astype('bool'), relay.shape_of(var_1759))) # shape=(3, 15, 8)
uop_1812 = relay.cos(uop_1779.astype('float32')) # shape=(3, 15, 8)
func_162_call = mod.get_global_var('func_162')
func_164_call = mutated_mod.get_global_var('func_164')
var_1819 = relay.var("var_1819", dtype = "uint16", shape = (1120,))#candidate|1819|(1120,)|var|uint16
call_1818 = relay.TupleGetItem(func_162_call(relay.reshape(var_1819.astype('uint16'), [14, 5, 16])), 0)
call_1820 = relay.TupleGetItem(func_164_call(relay.reshape(var_1819.astype('uint16'), [14, 5, 16])), 0)
output = relay.Tuple([bop_1760,bop_1808,uop_1812,call_1818,var_1819,])
output2 = relay.Tuple([bop_1760,bop_1808,uop_1812,call_1820,var_1819,])
func_1825 = relay.Function([var_1758,var_1759,var_1819,], output)
mod['func_1825'] = func_1825
mod = relay.transform.InferType()(mod)
mutated_mod['func_1825'] = func_1825
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1825_call = mutated_mod.get_global_var('func_1825')
var_1827 = relay.var("var_1827", dtype = "uint64", shape = (3, 15, 8))#candidate|1827|(3, 15, 8)|var|uint64
var_1828 = relay.var("var_1828", dtype = "uint64", shape = (3, 15, 8))#candidate|1828|(3, 15, 8)|var|uint64
var_1829 = relay.var("var_1829", dtype = "uint16", shape = (1120,))#candidate|1829|(1120,)|var|uint16
call_1826 = func_1825_call(var_1827,var_1828,var_1829,)
output = call_1826
func_1830 = relay.Function([var_1827,var_1828,var_1829,], output)
mutated_mod['func_1830'] = func_1830
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1848 = relay.var("var_1848", dtype = "float64", shape = (10, 2, 12))#candidate|1848|(10, 2, 12)|var|float64
var_1849 = relay.var("var_1849", dtype = "float64", shape = (10, 2, 12))#candidate|1849|(10, 2, 12)|var|float64
bop_1850 = relay.divide(var_1848.astype('float64'), relay.reshape(var_1849.astype('float64'), relay.shape_of(var_1848))) # shape=(10, 2, 12)
output = bop_1850
output2 = bop_1850
func_1865 = relay.Function([var_1848,var_1849,], output)
mod['func_1865'] = func_1865
mod = relay.transform.InferType()(mod)
var_1866 = relay.var("var_1866", dtype = "float64", shape = (10, 2, 12))#candidate|1866|(10, 2, 12)|var|float64
var_1867 = relay.var("var_1867", dtype = "float64", shape = (10, 2, 12))#candidate|1867|(10, 2, 12)|var|float64
output = func_1865(var_1866,var_1867,)
func_1868 = relay.Function([var_1866,var_1867,], output)
mutated_mod['func_1868'] = func_1868
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1934 = relay.const([[[-1,8,2,-10,-7,10,-3,-6,8,5],[-8,-8,6,2,4,-10,8,2,-6,-1]],[[-5,7,-1,-3,10,-4,2,3,-9,-2],[8,-9,-3,-4,-3,-2,-5,10,-3,-6]]], dtype = "uint8")#candidate|1934|(2, 2, 10)|const|uint8
var_1935 = relay.var("var_1935", dtype = "uint8", shape = (2, 2, 10))#candidate|1935|(2, 2, 10)|var|uint8
bop_1936 = relay.greater(const_1934.astype('bool'), relay.reshape(var_1935.astype('bool'), relay.shape_of(const_1934))) # shape=(2, 2, 10)
output = relay.Tuple([bop_1936,])
output2 = relay.Tuple([bop_1936,])
func_1943 = relay.Function([var_1935,], output)
mod['func_1943'] = func_1943
mod = relay.transform.InferType()(mod)
var_1944 = relay.var("var_1944", dtype = "uint8", shape = (2, 2, 10))#candidate|1944|(2, 2, 10)|var|uint8
output = func_1943(var_1944)
func_1945 = relay.Function([var_1944], output)
mutated_mod['func_1945'] = func_1945
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2004 = relay.var("var_2004", dtype = "float64", shape = (2, 2, 8))#candidate|2004|(2, 2, 8)|var|float64
uop_2005 = relay.sqrt(var_2004.astype('float64')) # shape=(2, 2, 8)
func_1865_call = mod.get_global_var('func_1865')
func_1868_call = mutated_mod.get_global_var('func_1868')
const_2013 = relay.const([-5.540363,3.538842,9.985009,3.612357,7.827559,1.235637,7.958265,-3.811345,2.292061,-7.911531,4.972117,-5.363441,9.155322,-5.973877,5.913484,7.309329,-5.676087,1.925834,-4.723086,9.064986,-6.214759,-9.376966,-1.704180,1.096939,-6.705013,3.055779,-2.587725,4.924230,0.450557,-8.601329,-2.350809,-5.242427,-4.532402,8.579374,-6.510913,9.930096,4.343184,2.541278,-6.712914,-9.349316,-4.403355,-1.949081,8.058646,-6.949398,9.713939,-8.896941,9.817358,-2.694312,-7.308598,-4.484426,-8.013660,1.626432,0.950470,8.276711,-3.676161,-0.021871,-1.683677,7.747844,-6.856283,-5.629407,-0.705900,-0.916761,-9.279297,-3.186309,-5.628811,9.243251,-9.351154,-3.735137,1.977063,1.234595,4.694610,6.199421,-7.343003,-1.847944,-3.533097,2.618057,6.980390,-2.865621,-7.710566,-0.391818,2.717313,-8.425495,0.767576,0.254077,-9.031236,-6.738358,-1.790289,3.596005,-1.318160,-2.640583,0.457352,6.164526,9.194694,-4.928983,-6.308714,-9.805768,-0.597758,2.706183,5.370358,7.477337,5.547152,-0.306058,9.670508,4.140557,3.619437,-0.718346,1.785242,2.694476,-8.423636,-5.401467,-5.628741,-7.595725,5.123847,-5.980258,4.466155,1.164381,3.861239,-0.583234,5.141830,-0.663344,3.308627,2.514652,7.749240,6.091162,-8.941360,-8.897945,-8.137672,-7.256380,0.976698,3.395468,-4.211308,7.882750,-1.365249,-6.189771,8.226691,-6.823403,3.340436,3.549756,-3.087868,-3.866005,7.326702,9.497199,-6.123097,0.701601,7.704679,-7.550795,3.189628,8.687840,2.230610,-1.065807,2.431803,-1.365858,-7.595271,8.824788,-9.870880,-6.880008,-6.730972,-3.816683,4.130629,-5.073162,-4.872161,-9.725187,2.253041,4.929623,0.841827,4.864062,-7.906701,4.647656,-1.073112,8.689096,5.412480,-4.837098,9.995787,-2.011578,-8.885700,6.776225,5.607345,8.232718,-6.716110,2.500163,-0.962202,-4.727009,-2.979963,5.048191,-1.273554,-9.097900,-3.815785,1.153554,0.752518,-0.447695,0.928049,-4.231939,9.376560,9.268203,-4.567976,3.229783,2.195379,1.366088,-0.326657,-6.368827,1.556750,-9.996634,8.425805,6.889480,5.824875,2.155785,-7.789826,1.413333,4.056399,5.987333,6.299810,-0.241268,-8.780147,9.617829,-1.220024,6.376391,-6.899026,-2.735127,9.141702,-1.023440,1.579031,3.231439,3.006960,-2.227075,7.508099,-1.950542,-8.592499,-7.680610,-5.917004,6.984523,4.441176,-2.349164,-6.312304,-0.333958,-3.003181,-3.894977,-0.068372,9.886064,-9.085243,-2.810177], dtype = "float64")#candidate|2013|(240,)|const|float64
call_2012 = func_1865_call(relay.reshape(const_2013.astype('float64'), [10, 2, 12]), relay.reshape(const_2013.astype('float64'), [10, 2, 12]), )
call_2014 = func_1865_call(relay.reshape(const_2013.astype('float64'), [10, 2, 12]), relay.reshape(const_2013.astype('float64'), [10, 2, 12]), )
uop_2023 = relay.erf(uop_2005.astype('float32')) # shape=(2, 2, 8)
func_162_call = mod.get_global_var('func_162')
func_164_call = mutated_mod.get_global_var('func_164')
const_2030 = relay.const([8,4,-8,-4,-4,2,4,-9,2,9,3,4,-1,1,2,1,4,7,-8,-10,10,2,-5,-2,-10,6,-2,-5,1,-4,8,10,3,-1,-10,3,-4,-5,-7,8,7,5,4,4,-5,-8,-6,-2,-8,1,-7,-2,-1,-2,4,-8,-5,4,-2,-7,-1,-10,5,-7,9,5,-10,9,-3,-2,10,-2,2,6,-6,-10,10,-3,2,-10,-8,6,-1,1,-5,-3,-2,2,2,-7,1,-7,-7,-5,-2,9,9,8,-10,6,-10,10,7,-6,-10,-1,-2,1,1,-8,3,3,-5,-6,9,-8,-2,-3,-10,9,-3,10,-7,3,-9,10,-10,-5,-3,-10,2,1,6,-4,4,8,-2,-1,1,8,8,-3,-3,3,-9,8,1,-7,5,5,3,-5,4,-7,-1,-7,4,-7,-10,3,-3,3,10,1,1,3,1,-10,-5,2,-1,6,10,-2,-4,-2,-4,1,4,9,1,-1,1,9,-8,3,1,5,-1,-4,10,3,2,7,-9,-3,-8,3,6,5,-5,3,8,-1,-5,-5,2,10,-6,-10,-5,5,7,-3,2,-7,10,6,8,-6,-4,-9,-1,-2,7,-1,-7,6,-4,5,10,-6,-1,-6,-2,3,5,4,-10,2,8,-10,10,9,6,2,5,4,-10,7,3,8,10,4,8,-9,-9,-3,6,3,-5,6,2,-8,-10,-4,2,3,-4,6,-4,8,6,2,-3,-2,7,10,7,4,4,-2,-2,2,3,7,3,-1,-7,10,6,-8,-9,-4,10,-6,8,3,-3,3,3,5,5,6,7,-2,10,-7,2,-7,-3,-7,1,10,-4,-1,-3,4,2,-2,8,3,-7,6,4,-2,-8,-8,10,4,1,3,-4,5,-7,-5,2,2,8,9,-3,3,-1,-2,-8,-6,-4,6,6,-3,8,-7,-6,10,-8,10,-9,5,-3,-10,3,-2,5,-6,9,5,9,-8,2,3,-6,-1,5,4,3,10,1,7,-2,-10,-4,8,8,8,-3,-2,-3,3,-1,7,2,1,1,-3,1,-2,8,-8,-8,-8,9,-10,-5,2,4,9,7,1,-10,-9,-6,7,4,10,-4,-3,-8,-5,7,-6,-5,9,9,-9,4,1,10,-6,5,-6,-4,-10,-3,-5,10,-3,8,-8,2,7,5,10,10,-2,1,2,9,10,-6,-2,8,-3,7,-5,-7,7,-4,9,-2,-7,-3,10,10,1,7,-4,1,1,-7,7,1,-7,-2,7,9,8,-4,3,-10,-9,10,-2,-1,8,-1,3,10,7,6,5,1,-9,-2,8,-7,-9,-2,-7,-3,-10,-2,6,-1,-4,-10,-4,10,3,-6,-4,-8,9,3,3,-2,8,-4,-4,9,3,6,-8,3,-10,2,1,8,-10,-5,-5,-3,-1,-7,-5,-4,6,8,-8,-5,9,4,-5,-9,1,7,-10,-1,9,-5,-4,3,-1,-4,-3,9,4,1,6,-6,5,-5,4,-6,-3,7,2,-9,-2,-1,-10,8,-4,5,10,-8,-5,-8,8,3,-8,1,2,-4,1,-1,6,6,10,-1,-5,3,-10,8,-8,-9,3,8,-8,-2,-10,3,-4,-7,2,-3,4,6,9,-4,-7,3,3,-5,-4,3,10,9,4,-8,-3,-3,7,3,-5,2,1,2,-5,-6,-4,2,-4,-7,4,-7,6,-3,1,-10,-4,10,8,-1,1,-3,-8,-8,-5,-1,10,-5,7,-1,8,7,-6,7,-1,8,-6,6,5,6,-10,-8,-6,1,4,4,-5,-4,-5,2,1,-7,-10,-3,-10,-6,8,3,10,-9,-5,-6,1,-9,5,4,3,5,6,-10,-6,7,10,-10,-5,5,-10,-10,5,9,3,5,7,-1,5,1,8,7,-9,10,-4,4,8,-4,3,2,-9,4,-5,10,6,3,-9,-2,5,-4,9,-2,-2,-1,-2,-5,-9,6,1,4,-5,-1,-7,-5,-7,1,7,-2,-2,7,3,4,8,6,5,-9,6,7,5,6,-2,-5,-2,9,-7,7,-8,-3,-10,8,-8,-8,-6,-10,8,2,-4,-1,3,8,8,-1,-6,-3,-3,4,5,-8,8,4,5,-9,3,3,2,6,-9,-6,-1,-3,-9,6,10,7,-3,5,-8,-6,4,7,-3,8,9,-6,5,5,-8,-8,-6,-8,9,-6,8,8,-3,10,7,7,3,8,-7,-2,5,-5,6,-1,-7,-9,-1,8,1,10,-7,-6,4,-8,9,6,-9,-9,4,-7,-7,7,5,-1,-5,-6,10,3,-8,-5,-3,2,-3,7,1,10,2,7,5,6,1,-2,-4,4,-10,-8,3,-4,-3,6,5,-5,5,4,1,10,2,2,-1,-5,-7,-3,-4,-7,-6,-2,-8,7,8,3,-1,-1,7,8,-10,-8,-9,5,5,-2,-4,-3,-1,6,-2,-1,2,-8,5,-4,1,2,-2,-3,1,-10,-10,-9,-3,-2,-4,8,7,6,3,9,-3,-6,-9,1,-4,7,6,-5,-3,-2,4,-4,9,6,-9,6,7,-6,-10,-10,-10,8,-5,2,2,4,7,8,7,6,9,9,-3,-4,-1,-7,1,6,-10,3,-6,9,-4,-7,-3,8,-6,-9,1,-6,-8,-5,10,-7,2,4,7,-1,-4,-4,5,8,9,4,1,-2,3,-9,9,-5,8,-10,5,-9,-2,-6,7,8,-9,7,10,-8,9,8,-5,-10,2,-1,-1,-6,3,10,3,-7,-10,-2,-6,-7,-10,-2,6,10,-3,-5,-1,-9,-10,-6,9,-5,10,1,-10,8,3,-4,1,7,7,8,10,6,-8,-4,8,6,-9,-1,-7,-6,10,-9,6,-4,-5,-2,-4,6,-1,-7,-10,-8,-3,-7,-9,-1,2,9,-6,-10,-9,-8,1,3,2,2,6,-10,-8,-9,9,5,10,9,10,8,4,-2,-8,8,6,2,1,-1,9,7,10,9,-7,-7,-10,6,-1], dtype = "uint16")#candidate|2030|(1120,)|const|uint16
call_2029 = relay.TupleGetItem(func_162_call(relay.reshape(const_2030.astype('uint16'), [14, 5, 16])), 0)
call_2031 = relay.TupleGetItem(func_164_call(relay.reshape(const_2030.astype('uint16'), [14, 5, 16])), 0)
output = relay.Tuple([call_2012,const_2013,uop_2023,call_2029,const_2030,])
output2 = relay.Tuple([call_2014,const_2013,uop_2023,call_2031,const_2030,])
func_2034 = relay.Function([var_2004,], output)
mod['func_2034'] = func_2034
mod = relay.transform.InferType()(mod)
mutated_mod['func_2034'] = func_2034
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2035 = relay.var("var_2035", dtype = "float64", shape = (2, 2, 8))#candidate|2035|(2, 2, 8)|var|float64
func_2034_call = mutated_mod.get_global_var('func_2034')
call_2036 = func_2034_call(var_2035)
output = call_2036
func_2037 = relay.Function([var_2035], output)
mutated_mod['func_2037'] = func_2037
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2190 = relay.var("var_2190", dtype = "int32", shape = ())#candidate|2190|()|var|int32
var_2191 = relay.var("var_2191", dtype = "int32", shape = (2, 13, 1))#candidate|2191|(2, 13, 1)|var|int32
bop_2192 = relay.minimum(var_2190.astype('int32'), var_2191.astype('int32')) # shape=(2, 13, 1)
output = relay.Tuple([bop_2192,])
output2 = relay.Tuple([bop_2192,])
func_2203 = relay.Function([var_2190,var_2191,], output)
mod['func_2203'] = func_2203
mod = relay.transform.InferType()(mod)
var_2204 = relay.var("var_2204", dtype = "int32", shape = ())#candidate|2204|()|var|int32
var_2205 = relay.var("var_2205", dtype = "int32", shape = (2, 13, 1))#candidate|2205|(2, 13, 1)|var|int32
output = func_2203(var_2204,var_2205,)
func_2206 = relay.Function([var_2204,var_2205,], output)
mutated_mod['func_2206'] = func_2206
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2237 = relay.var("var_2237", dtype = "float32", shape = (10, 16, 16))#candidate|2237|(10, 16, 16)|var|float32
uop_2238 = relay.asinh(var_2237.astype('float32')) # shape=(10, 16, 16)
func_1129_call = mod.get_global_var('func_1129')
func_1134_call = mutated_mod.get_global_var('func_1134')
const_2241 = relay.const([-4.229340,-2.070484,-6.977159,-0.982013,8.862548,-7.096942,7.047116,0.757727,2.882017,-1.410228,-6.034261,-3.702923,3.913682,-3.211782,1.076538,4.087832,-6.119299,-4.978649,-7.378954,8.285876,2.767625,1.610534,-9.404484,8.853934,-8.431021,1.077343,-7.709479,-6.996024,-9.239908,-7.186147,-8.858416,5.860468], dtype = "float64")#candidate|2241|(32,)|const|float64
const_2242 = relay.const([-8.680208,6.604954,-0.043284,9.584967,5.443735,0.229709,-2.509833,-0.003883,-0.595361,-3.427151,7.243948,3.775601,-4.490222,5.103211,-2.365670,8.053510,7.867427,3.343120,-1.393140,6.306275,6.944054,3.410008,2.099228,-3.475212,-9.135821,-7.230160,-5.653729,3.977392,-0.674239,-1.557914,5.471262,1.674252,7.668182,-3.210761,2.767233,5.630176,-8.834489,-1.104451,6.204692,-7.603453,4.622874,9.004122,-2.684341,-3.444034,3.139845,9.253421,6.342826,-2.716492,6.438223,-3.350528,-5.433600,5.032228,-6.199322,-1.360389,1.618157,6.418936,3.657040,-1.732348,8.444887,-0.174670], dtype = "float32")#candidate|2242|(60,)|const|float32
const_2243 = relay.const([-4.024561,6.229781,-0.223877,9.618053,-1.339807,-0.923921,-1.846034,-5.851365,8.029159,7.628166,-5.686503,-7.430581,-8.514315,7.325600,-0.110068,-4.575785,-2.210731,2.652500,7.315985,4.295508,1.923341,-2.655561,-5.225334,3.414613,-9.157968,-1.474604,-6.404707,-0.091814,9.207912,0.097891,-8.835655,-1.452359,7.364068,-4.191458,-8.005922,-1.966461,3.025121,-1.953962,9.202589,2.311565,-2.489402,5.121539,-2.674870,4.661842,1.000402,3.261247,3.074296,-2.898374,5.580565,9.547370,-6.741267,-7.321715,4.352419,4.414616,-7.275462,-8.818670,-5.384942,-9.011725,-8.951100,-5.075721,-3.150328,8.552139,9.630239,-6.832652,-9.192667,8.879096,-8.922510,-8.612577,-7.176602,-1.833081,-0.863629,5.379170,-2.510202,7.591371,0.232162,-9.143072,-5.696300,4.529608,6.276781,-2.884935,-4.553006,-2.656913,8.293742,-8.992788,-6.663985,7.614209,4.583059,8.908183,-7.253055,-3.823655,-3.141622,2.471982,8.474087,8.052683,-1.372832,-6.678421,8.287287,6.587600,-1.811123,-2.822243,3.331787,2.608016,-6.877066,-2.618540,-6.724031,-3.508062,-9.076615,6.026087,0.152861,-2.499276,-1.255385,-5.030018,-5.863939,6.965186,6.007633,0.839222,8.161316,2.817534,-2.076888,-9.473432,7.276923,8.763161,-2.565723,6.718656,3.621723,2.089957,-0.310469,3.409288,-7.773078,1.562819,-5.003855,-1.479587,-6.141968,2.149938,0.153173,6.002482,5.435056,-2.542821,9.611502,8.389823,-0.064118,-0.551551,-9.108481,3.860083,-7.328191,-5.534751,3.962218,-3.611210,-8.573880,-3.033830,5.938864,-0.820676,8.591942,-8.911715,-8.243335,7.231007,2.593433,-2.177536,-1.566370,-8.921802,-5.224768,7.219298,8.781959,0.231692,-9.604136,6.264315,2.884218,-1.389105,8.200390,9.750600,-5.136589,-4.759965,8.076592,3.639414,-0.397071,-9.694034,-2.955480,-0.914087,-0.820888,2.059013,-0.014711,-6.317884,3.547305,-3.310726,-5.908641,-1.697752,-4.743536,-7.098078,8.699150,0.842818,4.648206,7.738466,-8.641878,5.990668,0.822776,3.947054,8.469203,-5.971410,-6.855280,3.443846,-7.227736,6.882495,-6.025622,-6.436525,9.453394,5.595236,-8.295807,-2.459387,6.794172,2.453738,-1.978870,-5.457086,-6.284707,-4.283144,2.364942,8.951660,-7.886661,-6.850924,-6.225221,-6.691437,8.620163,-6.009806,-0.525001,-7.989058,-0.211178,1.989503,-6.200504,4.571205,-1.612705,9.454346,6.577547,5.109991,6.043132,9.238379,6.238215,3.468090,7.553252,-0.146351,-6.648981,5.367619,-5.778844,5.365025,-1.920931,6.379389,3.765764,-9.026675,-9.624616,-8.681130,-4.098707,7.928811,3.039769,-5.211102,6.869631,3.187103,1.868716,-7.450173,6.272653,-5.164719,-8.479254,-8.309258,-3.615907,9.347353,-0.327428,-5.611006,7.229930,-2.578991,-4.256527,6.774592,0.832400,0.271532,-1.896991,-2.206736,6.707347,7.514809,9.968508,5.764676,7.629809,-7.069526,-7.371518,-0.269686,-5.125445,1.993840,9.850611,-4.273669,1.094396,9.022764,-8.705683,1.631275,-3.128247,8.686501,-0.456585,6.950232,7.666294,6.614508,-8.311850,6.690884,8.810100,0.106273,-5.032211,2.960369,8.694144,0.757309,9.643911,3.061278,1.952131,5.667002,-1.865338,5.711635,-6.310426,7.023165,-7.698446,7.996637,4.796944,-4.771808,9.115821,5.927118,-2.494106,-1.631322,2.150453,8.760659,-7.044160,-1.047937,1.993898,6.445173,2.260089,-3.516311,7.475757,7.265129,-2.686213,-6.980480,8.486601,-4.133273,-5.463274,6.710991,5.469315,2.637745], dtype = "float32")#candidate|2243|(336,)|const|float32
call_2240 = relay.TupleGetItem(func_1129_call(relay.reshape(const_2241.astype('float64'), [32,]), relay.reshape(const_2242.astype('float32'), [60,]), relay.reshape(const_2243.astype('float32'), [1, 336]), ), 3)
call_2244 = relay.TupleGetItem(func_1134_call(relay.reshape(const_2241.astype('float64'), [32,]), relay.reshape(const_2242.astype('float32'), [60,]), relay.reshape(const_2243.astype('float32'), [1, 336]), ), 3)
output = relay.Tuple([uop_2238,call_2240,const_2241,const_2242,const_2243,])
output2 = relay.Tuple([uop_2238,call_2244,const_2241,const_2242,const_2243,])
func_2247 = relay.Function([var_2237,], output)
mod['func_2247'] = func_2247
mod = relay.transform.InferType()(mod)
var_2248 = relay.var("var_2248", dtype = "float32", shape = (10, 16, 16))#candidate|2248|(10, 16, 16)|var|float32
output = func_2247(var_2248)
func_2249 = relay.Function([var_2248], output)
mutated_mod['func_2249'] = func_2249
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2288 = relay.var("var_2288", dtype = "bool", shape = (9, 13, 9))#candidate|2288|(9, 13, 9)|var|bool
const_2289 = relay.const([[[True,True,True,False,False,False,False,True,True],[True,False,True,True,True,False,True,True,True],[True,False,True,True,False,False,False,True,True],[True,True,True,True,True,False,False,True,False],[False,True,True,True,False,False,False,True,True],[True,True,False,False,False,False,True,False,False],[False,False,False,True,True,True,False,False,False],[False,False,True,False,False,False,False,False,True],[False,False,False,True,True,True,True,False,False],[False,True,False,False,True,False,False,False,False],[False,False,False,False,False,True,False,True,True],[False,True,True,True,True,False,False,False,True],[True,True,True,True,True,True,True,False,False]],[[False,False,True,False,False,True,False,True,False],[True,True,True,True,True,False,False,True,True],[False,True,True,False,False,False,True,False,False],[False,True,False,True,True,False,False,True,True],[True,False,False,True,True,True,False,False,False],[False,True,True,True,True,False,False,True,True],[True,True,True,True,True,False,True,False,False],[True,False,True,False,False,True,False,True,True],[True,False,True,False,False,False,True,False,False],[False,False,True,True,True,False,False,False,False],[False,True,False,False,True,True,False,True,True],[True,False,False,False,True,False,False,True,True],[False,True,True,False,True,True,False,False,True]],[[False,False,True,False,False,True,True,True,False],[False,True,True,True,False,True,True,True,True],[False,True,False,True,True,True,False,False,False],[True,False,False,False,False,False,False,True,True],[True,False,False,True,False,True,False,True,True],[False,False,False,True,False,True,True,True,True],[True,True,True,True,True,True,False,True,True],[False,True,False,True,False,False,True,True,False],[False,False,True,False,False,False,False,True,False],[False,False,False,True,True,True,False,True,False],[True,True,False,False,True,True,True,True,False],[True,False,True,False,True,True,True,True,True],[True,True,False,False,True,True,False,False,False]],[[True,False,True,False,True,False,False,False,False],[True,True,True,True,False,True,True,False,False],[False,False,True,False,True,True,False,True,False],[True,True,True,False,True,True,True,True,True],[False,True,True,False,False,False,True,False,False],[False,True,True,True,True,True,False,True,False],[True,False,False,False,True,True,True,True,False],[False,True,True,True,True,False,False,True,True],[False,False,True,True,False,False,False,True,True],[True,False,True,True,True,True,True,True,False],[True,False,False,True,True,True,True,False,False],[True,True,True,False,True,True,True,False,True],[True,False,True,True,True,True,False,True,False]],[[True,False,False,True,True,False,True,True,True],[False,False,False,False,True,True,True,False,False],[False,True,True,False,True,True,True,False,True],[False,False,False,False,True,False,False,False,False],[True,False,True,False,False,True,False,True,False],[True,False,False,False,True,False,True,True,True],[False,False,True,True,False,True,True,False,False],[False,True,False,False,False,False,True,False,True],[False,True,False,False,False,False,True,False,True],[True,True,False,False,False,False,True,True,False],[False,True,True,False,True,False,False,True,False],[True,False,False,False,False,True,False,False,False],[False,True,False,False,False,False,False,False,False]],[[True,True,True,True,True,False,False,True,True],[False,False,False,False,True,False,True,True,False],[False,True,True,False,True,False,True,True,True],[True,False,True,True,True,True,False,False,False],[True,True,False,False,True,False,True,False,True],[True,True,False,False,True,True,True,False,False],[True,True,False,False,False,False,False,True,True],[True,True,True,True,False,False,True,True,False],[True,False,False,False,True,True,False,True,False],[True,False,False,False,False,True,False,False,True],[False,False,False,True,True,False,False,True,False],[True,False,True,True,False,True,True,False,True],[False,True,False,False,False,True,True,False,True]],[[False,False,True,False,False,False,False,True,True],[False,False,False,True,True,True,False,False,True],[False,True,True,True,True,False,True,True,True],[False,False,True,True,True,False,True,True,False],[True,True,False,False,False,False,True,True,True],[False,True,True,True,True,False,False,False,True],[True,False,False,False,False,True,True,False,False],[True,True,True,False,False,False,False,False,False],[False,True,True,True,True,True,False,False,False],[False,True,True,True,False,True,True,False,True],[False,True,True,False,True,False,True,True,False],[False,True,True,False,True,False,False,False,False],[True,False,False,True,False,True,False,True,True]],[[True,False,True,True,True,True,False,True,False],[True,True,True,True,True,False,False,True,True],[True,True,True,True,False,True,True,False,True],[True,False,False,False,False,False,False,True,True],[True,True,True,True,False,False,False,False,True],[False,False,False,True,True,False,False,False,False],[True,False,False,False,True,True,False,True,True],[False,True,False,False,False,True,True,True,False],[True,True,False,False,True,False,False,False,False],[False,False,False,True,True,False,True,True,True],[False,True,True,True,False,False,True,False,True],[True,True,False,True,False,False,True,False,True],[True,False,False,True,True,False,False,False,False]],[[False,True,True,False,False,True,True,True,True],[True,True,True,False,False,False,True,True,False],[True,False,False,False,True,False,False,True,True],[True,True,True,True,True,True,False,True,True],[True,False,False,False,False,True,True,False,True],[True,True,False,True,False,False,True,True,False],[False,True,True,True,False,False,True,True,True],[False,False,True,True,True,True,True,False,True],[True,True,False,False,True,True,True,False,False],[True,False,True,True,False,False,False,True,True],[False,False,False,False,False,False,True,True,False],[False,True,False,False,False,True,False,False,False],[True,True,True,True,True,True,False,False,True]]], dtype = "bool")#candidate|2289|(9, 13, 9)|const|bool
bop_2290 = relay.logical_or(var_2288.astype('bool'), relay.reshape(const_2289.astype('bool'), relay.shape_of(var_2288))) # shape=(9, 13, 9)
output = bop_2290
output2 = bop_2290
func_2293 = relay.Function([var_2288,], output)
mod['func_2293'] = func_2293
mod = relay.transform.InferType()(mod)
mutated_mod['func_2293'] = func_2293
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2294 = relay.var("var_2294", dtype = "bool", shape = (9, 13, 9))#candidate|2294|(9, 13, 9)|var|bool
func_2293_call = mutated_mod.get_global_var('func_2293')
call_2295 = func_2293_call(var_2294)
output = call_2295
func_2296 = relay.Function([var_2294], output)
mutated_mod['func_2296'] = func_2296
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2372 = relay.var("var_2372", dtype = "float32", shape = (10, 13, 8))#candidate|2372|(10, 13, 8)|var|float32
const_2373 = relay.const([[[-7.054784,-1.920911,8.711436,5.326834,-6.970642,-0.514943,-0.115289,8.715793],[-7.059424,-3.559075,-4.695777,7.383924,-9.586714,-4.891902,-1.586237,6.775943],[-9.750153,1.572477,9.828957,4.620398,7.151014,-7.047396,3.257263,1.368738],[5.420851,9.211608,-9.675112,1.070718,-6.082115,4.981627,6.024046,0.649680],[2.269676,4.172457,-2.767032,-1.270680,7.621687,6.845285,4.910983,-6.376313],[2.424288,-5.032653,6.218451,-8.403537,-4.777628,-8.969477,7.858402,4.375696],[3.454567,1.781151,-5.125437,7.081339,-0.689733,-8.684285,7.624196,-2.327186],[-9.253550,-1.508917,-8.229551,7.610893,0.376807,3.274691,-8.108187,6.781081],[6.660743,8.381074,-8.925339,2.894475,1.495504,-1.783738,5.730335,9.078387],[-7.101906,2.742202,6.803858,6.753015,-0.405615,2.421764,3.640822,-8.311547],[8.556232,-9.558175,-8.502717,5.979074,-0.163113,-5.521374,-3.849264,2.446527],[-5.008088,-9.220349,-9.710095,-5.674016,-7.208702,5.484542,-0.848086,-7.273483],[4.651050,9.822269,8.762017,9.934291,3.476921,2.918564,-5.879392,-0.356893]],[[2.572350,-4.998045,-0.426370,-5.329312,-3.768872,-0.122286,-5.774798,-5.662770],[-6.061351,3.525635,-4.834154,5.714068,5.682351,-7.403671,0.684830,-6.271508],[3.946576,-2.262129,3.893354,-6.096851,-8.413480,-0.543172,6.977554,-9.841903],[-0.222176,4.246267,4.266454,-2.035798,3.529475,-0.200955,6.835784,1.247260],[8.925857,-4.004050,0.889415,-9.026487,-5.133157,-3.397086,7.396218,3.566250],[-0.984602,9.497025,3.837530,-3.258203,-5.278271,0.476141,1.633288,-2.094712],[9.271639,5.493776,5.923452,-6.109643,-7.117088,6.602046,-8.686922,-7.718367],[-7.702554,-8.886291,6.981720,-1.052691,0.179311,-0.158544,7.579932,4.278103],[4.826745,0.589404,-9.628822,-0.536579,-9.781064,-6.295800,-4.602318,4.982746],[-2.572081,-9.900334,0.776394,4.178383,9.387194,1.433559,-9.380428,4.234399],[-4.691336,-9.198112,-1.231979,7.966031,8.863502,2.302929,-7.269314,-6.282931],[-3.022536,4.262128,6.450017,-2.146439,-8.482623,7.269786,-7.941763,-8.932905],[3.549009,9.784310,-8.785149,-9.635702,6.003412,4.372709,2.985323,-8.503001]],[[1.873717,0.908724,0.879089,0.074139,6.461288,-9.236140,3.973302,-6.551958],[-6.407429,-2.997591,9.225604,-6.804797,7.593815,-3.256713,3.269557,-4.916146],[-3.004497,4.200339,-0.767189,8.532640,-3.885811,1.555001,9.237498,-9.364775],[-4.787689,-2.619944,-7.109155,-3.337506,-0.384525,-7.329791,5.813374,-9.580792],[-6.094478,7.620253,-6.184412,-8.819758,0.041883,-5.501635,-1.031460,-6.541072],[-0.951622,-4.383532,7.187779,-2.833000,8.243382,3.510068,8.973477,4.918693],[6.787248,-3.737351,9.041361,-8.966330,4.119410,8.108372,-0.978305,-5.445888],[-6.933942,3.245091,6.926961,-4.450345,-2.531713,7.194653,8.682099,0.478182],[-9.084343,9.228914,-4.490025,-3.630173,-9.265360,3.759552,0.243472,2.816668],[-6.030898,6.130194,-7.373282,9.900299,2.811599,9.040661,1.565058,6.922502],[-6.747106,7.049023,8.774826,-1.000037,-4.439468,-6.825931,3.806475,3.813919],[-6.425036,4.386053,-6.131768,7.376309,-8.410862,4.280945,9.104451,5.012127],[4.277518,-2.448535,-1.514708,-6.425707,4.404365,-8.521936,8.557907,-7.148710]],[[-7.243162,-0.858701,-9.391545,-1.585066,-7.216992,-6.206227,-5.847216,-9.922718],[2.258565,-0.009870,1.982833,-6.579072,9.549422,-0.600222,-4.078183,-8.457095],[-1.341392,-5.515275,-5.017069,4.312399,-8.935135,-3.067311,7.836282,-3.508774],[-1.117233,-9.049037,3.084987,-4.960793,4.341008,1.731937,8.376236,-6.965505],[2.930888,9.541500,1.748451,-3.813315,-4.563355,1.112548,8.063997,-4.561614],[-0.916526,-9.631940,1.258889,1.253661,8.802349,9.099623,-7.523100,-7.789963],[-4.664943,-3.093626,6.251843,2.199856,6.474240,2.407773,-2.598102,-4.495947],[9.347646,-4.075659,8.074115,7.851130,7.494222,-4.726118,5.438294,8.373066],[-2.614277,6.402808,-5.567284,5.275930,3.379385,3.742804,7.838725,9.981834],[-4.066812,8.559843,9.914987,-9.695655,5.202838,-8.800900,6.050671,-3.458708],[2.093714,4.826367,-8.883515,-4.542983,-9.226644,0.338076,8.991208,-7.526412],[9.974073,-8.127698,-3.842971,1.227340,8.223953,-9.756260,4.482290,-4.629770],[3.582294,-0.148839,-5.952936,6.138971,-1.402797,-4.775991,1.949209,3.537724]],[[5.610303,1.328482,-1.167748,8.889203,8.036239,4.500226,9.157532,0.897672],[6.804851,-5.773930,-2.452740,-9.130152,9.937634,3.083608,5.181686,2.868474],[-9.490020,8.477737,2.253234,-6.580880,-9.347236,5.257738,6.476991,-9.247886],[-5.064081,-5.376824,0.076319,-3.684974,-1.176796,4.475537,-8.217733,-4.984803],[-2.826164,-0.354865,-6.597123,-2.873910,-9.105196,-5.677085,-4.878362,-3.505846],[-7.439618,-9.027428,-3.559373,-5.689784,-2.205079,-3.490583,-2.545455,5.119282],[-9.773494,-3.396739,-1.177523,-8.430305,-3.004097,-9.237386,1.198290,6.516966],[5.118568,9.248755,-2.897919,-4.697875,-9.632929,-9.980006,7.893680,8.948474],[5.339347,1.869092,-6.135028,-1.876581,-0.028868,2.760984,5.054446,5.752061],[-3.451751,-6.905499,-3.987551,4.524899,-4.552853,6.509142,5.439107,2.910962],[-8.206468,-0.568982,-4.518954,7.084944,3.871041,0.978411,-8.894206,-8.900289],[4.030229,2.938765,0.218352,-9.116419,-1.336959,-9.497680,-0.403628,-5.659919],[-4.510006,5.185162,3.439464,7.885794,-7.917630,-2.205215,-1.449775,7.936853]],[[2.629699,2.206368,-6.871964,-3.244298,-2.324162,-1.020050,2.795132,9.568438],[-7.851915,-7.102160,-1.371311,-4.832351,-6.188710,8.292051,0.720526,0.762356],[2.177901,-2.504882,-7.687397,6.868688,3.066953,-4.646031,-9.007824,-0.006137],[-2.675450,2.028955,-1.977545,9.486778,-3.523246,7.374964,-1.674356,-4.841825],[-3.251426,4.646303,-1.322133,5.664754,-8.744607,-3.291483,4.098770,8.995049],[1.027876,-3.520661,7.703353,0.734793,-1.591316,1.223788,5.846391,5.219985],[-6.116925,-4.262962,0.540342,-3.482879,3.039402,-2.696007,0.632806,5.288877],[-8.244071,5.301261,6.566717,9.834460,3.978492,-4.633854,8.656390,-0.631556],[-3.556013,-5.146123,-4.629477,-9.591047,3.044460,0.493523,-1.686321,2.198686],[-1.755853,-3.490101,6.461177,-4.341459,5.348457,3.962770,-3.833194,-9.075250],[1.915384,-5.777312,-7.470795,9.728040,2.602340,-6.082388,4.524837,2.689031],[-5.025939,-4.140572,4.573367,2.330088,3.780394,7.267591,-2.143056,0.222306],[-3.724202,-0.468814,-8.594393,-9.420996,-3.612558,2.332951,0.790884,8.508247]],[[6.924848,4.654371,-9.310140,7.550931,-6.084674,0.921807,-2.390801,-4.960123],[-7.193322,8.377683,-1.817837,5.148147,5.399531,4.222867,6.822598,-2.905650],[-3.795899,2.612888,-7.752037,-3.802994,-2.762634,-0.112343,-2.081210,3.013155],[2.441247,8.670573,9.424212,-8.196891,-9.680943,0.214114,-4.866640,-8.019144],[2.822162,-6.367432,-5.446238,-4.464330,-1.027286,4.281119,6.005164,-3.023107],[-1.886614,1.305272,-4.253784,-3.310067,4.304766,-9.477875,6.171702,-9.068627],[-6.849270,6.884624,1.496447,3.292821,-7.824300,6.396860,-1.221501,-3.223474],[4.741997,-7.291657,4.407117,-7.985577,-3.450930,-8.004327,9.404478,-9.898501],[6.655783,-6.809992,-1.189069,5.480179,5.407035,-2.743387,-7.789170,-2.519393],[-0.305721,9.148172,9.131933,-7.016672,-4.481390,6.855661,3.502988,1.031752],[7.447766,-3.247019,-4.779482,-1.852749,-5.477050,7.129859,6.388982,-6.046894],[-6.097318,8.381212,-0.649734,7.503327,7.675286,-0.155548,-0.679446,6.392844],[-1.734105,0.691109,7.333809,-9.569622,0.804271,-1.352246,8.442487,-5.383140]],[[-8.794449,8.221757,-8.605738,6.867460,9.747063,-2.644204,-4.094199,-1.599315],[5.865518,7.523644,9.639750,-3.679782,4.069996,-2.875779,-5.531121,-2.079458],[-9.741936,9.722230,-4.702096,-7.258987,-3.037717,8.144869,9.524120,2.134339],[-2.178122,3.702676,-6.268831,-7.248104,2.299096,-6.481476,0.887306,-7.581835],[-5.712143,-3.019739,8.758425,6.880463,-6.661538,-2.333381,-1.112000,-6.219719],[-6.565202,-5.587526,-9.804318,-4.945174,3.123720,7.642389,6.407084,6.893858],[5.153860,-7.951577,-0.252471,-9.155067,-8.821461,-6.636313,0.062850,4.727002],[4.241541,-6.077800,-6.706664,7.924644,-9.976306,4.253257,-8.676069,8.314517],[-4.427900,-7.700009,5.572802,7.746525,7.807421,-7.020680,8.375645,-0.305114],[-1.645020,-4.468509,3.442923,-9.844767,-2.420758,8.012456,-9.548317,-4.750984],[-1.630104,-1.015477,0.842005,-0.175195,0.201831,7.707932,-6.957611,9.358866],[5.840830,-1.066903,2.395719,-8.892555,-6.922636,8.486483,-6.913521,9.307309],[-2.596127,6.625654,-9.739095,8.982074,-8.370673,-3.945937,-2.339605,5.625530]],[[9.670532,6.073347,2.965627,-2.476686,2.679549,-0.684579,1.352328,2.936719],[1.130855,9.173923,-2.289024,-3.210130,-3.879307,8.054248,-0.064330,-6.229819],[-4.670712,1.767377,6.640007,7.176651,5.357769,-9.236432,-0.466747,-1.711913],[-2.269024,4.347555,-3.629966,-6.803742,-8.995334,-1.443551,-8.668105,-0.507689],[-7.153281,-4.363593,2.180022,-1.372504,-1.807496,1.635922,-3.825132,-0.635821],[8.577405,7.147607,5.497461,-1.352842,-2.119993,1.030367,3.516916,3.316641],[6.699637,5.437867,-7.568919,9.730014,4.809675,0.916882,-7.315375,-1.914606],[6.702421,-7.905903,0.114900,-0.454551,8.535175,5.584128,4.098414,-8.077358],[-2.609096,6.110704,5.723066,9.274575,8.024278,2.895006,7.064901,7.332503],[5.930551,3.634734,1.613153,-4.160355,5.534203,2.713180,3.702020,2.903591],[-2.873947,-0.834270,8.476829,-3.639287,-2.805512,9.270095,8.104831,-8.429409],[-7.914457,-6.570552,1.461386,-9.842421,-6.077380,8.115339,6.202731,6.716754],[1.369748,5.655359,-9.602478,9.587823,1.028418,-0.479010,3.315247,-2.051719]],[[-1.776890,4.219704,8.364817,2.036025,-1.057885,5.994220,6.780430,1.884405],[-8.719955,-1.490674,-0.801947,3.663480,-2.570667,-8.837280,-1.249068,6.387268],[5.665390,-3.621311,-6.807534,-5.076993,-9.180016,-1.112181,3.058186,-3.190595],[-9.157791,-0.701898,-9.159671,1.453090,4.449780,4.820124,-4.178570,-6.021256],[3.759460,-6.183728,-1.198816,-5.848152,0.672272,4.394902,-6.610842,-7.483581],[-7.970590,6.162505,3.704396,2.707771,5.161693,-0.178846,4.195044,3.332129],[-2.990761,-6.720645,9.567446,5.266056,4.887632,5.273003,0.758970,-2.443094],[-0.396763,-7.537166,-2.459304,-9.553220,-9.092556,3.937161,2.224172,2.311195],[1.472839,8.094939,-5.397539,8.659131,0.939053,-7.550164,-4.932250,-9.087717],[-4.688962,-0.640807,-2.122275,-2.407696,-0.489415,-6.394355,6.952117,3.948180],[1.245359,0.579076,0.238556,0.437833,0.435879,4.867215,-9.873809,-8.598797],[3.077841,-2.858678,2.328931,-8.649451,-7.893155,8.270670,-3.523822,-6.870779],[6.056516,-3.709846,-3.549774,3.568311,5.627633,-3.838131,-9.606286,-3.317859]]], dtype = "float32")#candidate|2373|(10, 13, 8)|const|float32
bop_2374 = relay.divide(var_2372.astype('float32'), relay.reshape(const_2373.astype('float32'), relay.shape_of(var_2372))) # shape=(10, 13, 8)
output = relay.Tuple([bop_2374,])
output2 = relay.Tuple([bop_2374,])
func_2388 = relay.Function([var_2372,], output)
mod['func_2388'] = func_2388
mod = relay.transform.InferType()(mod)
mutated_mod['func_2388'] = func_2388
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2389 = relay.var("var_2389", dtype = "float32", shape = (10, 13, 8))#candidate|2389|(10, 13, 8)|var|float32
func_2388_call = mutated_mod.get_global_var('func_2388')
call_2390 = func_2388_call(var_2389)
output = call_2390
func_2391 = relay.Function([var_2389], output)
mutated_mod['func_2391'] = func_2391
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2412 = relay.var("var_2412", dtype = "float64", shape = (5, 1, 11))#candidate|2412|(5, 1, 11)|var|float64
uop_2413 = relay.sigmoid(var_2412.astype('float64')) # shape=(5, 1, 11)
func_1332_call = mod.get_global_var('func_1332')
func_1335_call = mutated_mod.get_global_var('func_1335')
const_2418 = relay.const(-2, dtype = "uint32")#candidate|2418|()|const|uint32
const_2419 = relay.const([-7,7,-2,3,2,-7,3,3,-9,6,-1,4,8,-1,-2,6,1,-1,4,10,-1,4,-10,9,-3,7,-4,8,-9,-4,-5,-4,-4,1,8,-5,8,-4,-6,2,-8,3,-2,-5,10,-3,10,1,-2,-1,6,9,3,4,8,9,7,-9,-3,-9,4,9,-9,5,5,-10,-1,-4,-6,-4,-6,-10,4,-1,4,3,-2,-1,5,2,3,10,5,-6,6,-3,2,-5,-3,-5,-6,6,-1,1,-4,-3,-7,10,-10,-10,8,-7,9,9,8,-2,10,-6,-4,6,-2,-4,3,10,10,-8,-5,9,8,-7,-1,5,-6,4,-8,7,-9,-8,7,-8,9,-7,2,8,5,-8,-4,-10,4,10,4,3,-2,-8,10,-8,-1,-3,3,4,-9,-6,5,-3,10,10,-3,-7,-3,-4,8,-2,-8,-3,6,-9,-8,-8,-1,-2,8,-4,7,8,6,-5,-5,-5,-1,4,-6,4,7,6,7,-10,-4,-6,6,10,-5,8,1,-10,4,2,6,3,-8,-5,1,-9,-8,3,-6,-7,8,-10,-1,-1,-4,-4,-9,-6,-5,3,4,10,-7,-7,-8,6,10,-4,4,-5,-8,-9,-5,5,3,8,10,-1,-1,-1,-3,-2,3,-3,3,5,8,-2,8,2,7,-1,8,-5,-10,-7,-3,5,6,3,7,-5,-4,5,2,7,9,-8,2,5,10,-5,10,-1,10,-8,-3,-2,-7,1,8,1,-8,6,2,1,5,7,10,4,9,8,4,-1,9,-4,-9,-6,-6,6,6,-10,-5,-6,4,-4,-3,-6,-2,-10,8,10,3,-4,-8,8,8,-5,-6,8,1,2,-4,-1,-5,9,-8,-3,-7,-1,7,-1,7,10,6,-1,9,1,4,-10,-6,4,-8,-7,4,-9,5,-10,3,4,-7,8,-2,9,-2,7,-8,6,-10,10,-10,6,9,8,5,3,10,-10,-10,-8,-10,4,6,5,-2,-9,-3,8,1,6,-9,-10,10,-1,10,7,-4,9,1,-7,8,7,-3,3,-4,-1,-8,2,-10,-10,-2,-2,8,-6,5,5,-1,5,9,5,-9,-6,7,4,-3,-10,1,-1,5,-9,-3,6,-5,6,-8,-7,9,-3,3,6,2,-3,9,-2,-3,9,-3,10,3,-4,-10,10,-6,6,2,7,9,7,-4,-4,-9,-5,-5,2,4,3,-9,-3,-7,6,10,-1,5,-7,-8,8,-6,-10,1,-3,10,-10,8,-5,2,-2,7,3,5,3,-3,-1,-5,1,4,2,7,-6,7,10,5,2,-9,-3,5,8,-6,-8,-1,-10,1,1,-6,-3,-8,-10,8,4,1,2,5,5,-8,-4,-9,3,8,8,-3,-5,-5,-4,1,2,7,-7,3,-6,4,-1,-6,-5,-10,-6,-5,4,10,-4,-5,-2,-10,5,-4,8,2,-2,-4,3,-9,9,-2,5,8,-4,8,5,8,3,4,-9,-1,-5,8,-2,-8,3,3,-3,-9,-4,-2,7,3,-1,3,3,9,-2,-5,3,5,-3,-8,-9,-3,6,-6,-7,-4,5,-6,-3,8,1,-10,-7,4,1,-8,9,-5,-9,7,-1,-2,-8,7,-5,-7,-8,-5,-9,-7,-1,3,6,-4,-1,1,-3,8,-3,-5,8,7,6,-3,2,-7,4,-2,10,-5,10,2,-9,7,5,-2,-3,-1,10,-3,-3,-5,2,9,-7,4,-2,-1,1,5,-9,1,6,10,-7,10,3,10,5,9,6,9,4,-9,9,10,-8,9,-4,-10,2,-2,-7,4,2,6,-9,-5,7,7,-7,4,-8,9,-4,3,-1,4,-9,-10,2,-10,2,-3,7,-5,-6,10,-3,-4,-10,-6,-5,-8,9,-7,5,1,1,6,-5,-4,9,-3,-5,-3,7,7,-8,-6,7,7,9,9,3,1,6,8,-1,2,-1,2,-2,10,6,-8,-9,6,2,-9,-3,-4,-6,-6,5,-3,-3,-4,4,7,-10,-2,2,7,3,1,-8,7,-9,-9,1,3,-6,10,-3,-9,-4,1,1,1,6,2,-7,8,-1,10,-10,7,10,-8,-6,5,10,-7,-6,8,10,-7,-10,5,-3,-5,-10,1,-2,2,-5,-10,-6,9,5,5,-7,2,-9,-9,2,7,10,1,-6,2,3,-8,10,1,5,1,-10,9,8,4,-4,1,9,-8,6,-6,-3,-5,2,-8,-2,8,2,1,-7,-9,6,-7,-3,-9,4,-7,10,1,8,10,8,3,-5,-9,9,-5,1,9,-8,2,-4,10,1,-7,-3,-10,-2,1,7,-2,-2,-3,-1,-5,-1,-3,-8,-8,-4,-9,-1,-8,-1,-4,2,5,5,5,10,-6,-8,7,-2,6,-1,5,-3,-7,-5,-3,7,9,5,9,-5,-8,6,1,-10,3,2,-5,2,-1,3,4,-1,-3,8,-2,10,5,5,1,-5,-9,6,-3,-6,-5,-8,8,-1,-6,6,1,-9,-10,-4,-2,-9,5,-6,4,-5,-10,8,-4,10,10,-1,-2,7,7,-4,10,1,-9,-8,-9,-1,-7,7,-2,5,-5,-10,9,8,9,-6,-5,6,5,8,8,3,10,9,10,-1,10,-1,-1,6,1,10,-2,2,2,-3,9,6,-7,1,-8,-2,6,-9,10,-8,9,9,-6,-1,2,9,-10,-3,9,-4,-8,7,-10,2,6,-5], dtype = "uint32")#candidate|2419|(1014,)|const|uint32
call_2417 = relay.TupleGetItem(func_1332_call(relay.reshape(const_2418.astype('uint32'), []), relay.reshape(const_2419.astype('uint32'), [13, 6, 13]), ), 0)
call_2420 = relay.TupleGetItem(func_1335_call(relay.reshape(const_2418.astype('uint32'), []), relay.reshape(const_2419.astype('uint32'), [13, 6, 13]), ), 0)
func_1332_call = mod.get_global_var('func_1332')
func_1335_call = mutated_mod.get_global_var('func_1335')
call_2425 = relay.TupleGetItem(func_1332_call(relay.reshape(const_2418.astype('uint32'), []), relay.reshape(const_2419.astype('uint32'), [13, 6, 13]), ), 0)
call_2426 = relay.TupleGetItem(func_1335_call(relay.reshape(const_2418.astype('uint32'), []), relay.reshape(const_2419.astype('uint32'), [13, 6, 13]), ), 0)
func_2388_call = mod.get_global_var('func_2388')
func_2391_call = mutated_mod.get_global_var('func_2391')
const_2429 = relay.const([[-3.487682,-2.911169,9.247036,5.270310,-5.086910,-1.506870,5.530743,4.773265,1.926600,-0.256191,9.354913,8.740123,5.042024,8.034221,0.682770,6.239983,-8.524931,-1.758438,-8.547672,-8.126405,1.238578,4.698629,4.666594,-2.823659,-5.108485,8.179142],[-4.226217,-9.385258,-0.202932,4.641785,-4.901534,2.786932,-9.085516,-4.789296,7.065155,3.641158,-7.155104,-5.401948,8.734674,-8.810936,6.174200,-5.019102,-0.377499,8.083775,-2.975965,5.643563,6.523174,-6.283498,-6.014681,3.058106,3.527499,-8.765709],[4.972168,7.091798,0.356508,-0.975449,-2.040362,-7.099656,6.873206,4.712244,9.644131,-7.949979,2.601226,-3.676050,-5.416889,-4.237711,7.517834,9.484866,9.195040,5.866954,-6.068261,1.294003,-6.022615,8.840730,6.282283,-1.336593,5.982781,9.754239],[5.495145,-6.093346,8.747969,4.826892,-8.994133,9.719053,-0.354813,-9.173494,-8.651962,8.538959,-4.805529,-4.733011,0.616896,-9.719813,-2.321658,0.894995,2.006984,7.563915,-5.497183,2.358751,0.055575,-5.204247,-8.257476,-0.817841,-4.313038,1.201219],[-4.966498,-0.564844,-8.104485,4.531624,6.705585,-6.502260,-5.931506,0.249559,1.582412,3.906645,-9.102546,-3.693781,9.062577,9.524739,-6.336039,-1.238194,1.458766,-1.675918,6.780647,-7.525219,-4.365531,9.238946,-2.090949,-7.453158,-4.896156,-6.889355],[6.892639,0.692063,8.845412,6.176783,1.462190,-7.632656,-7.387677,0.265857,-8.726855,-5.918639,-5.704847,-0.530911,7.962487,-7.287340,-9.687591,-5.921774,1.008700,-4.060927,-5.218367,-6.000008,9.348163,-3.261360,0.841556,0.255479,7.582570,0.635236],[-7.686575,-3.853969,-3.500920,8.737182,5.787902,-2.076847,5.891234,9.526596,-7.975505,5.856173,7.412068,-5.825632,3.955162,-1.781459,8.505850,8.913186,9.614182,7.514108,-1.004924,0.152038,-9.605451,7.063771,-2.377178,-1.464556,-7.340968,3.179641],[2.289416,0.203541,7.008921,-2.571042,8.690159,-9.425505,0.228838,-9.110369,-8.669378,-3.807785,0.750499,-5.692153,-2.641959,0.675211,7.688203,-8.094481,-6.798088,3.409036,-9.187531,-3.550809,2.918345,-4.574646,5.631673,7.425741,-1.405394,-2.916856],[8.172846,-9.806177,3.224552,-4.245355,-8.030008,-6.521838,-7.271566,-3.761109,9.527327,-0.275297,-5.049875,6.986167,1.271722,5.448041,-1.923687,-2.107326,3.031577,-6.663390,-4.789390,5.714276,7.423848,2.541574,3.178016,-5.720557,-0.639195,-4.809481],[-6.250355,-3.468511,-8.231262,7.457857,-3.368911,-6.581959,-7.309236,-8.223686,7.418287,9.486217,2.727309,7.929649,7.533427,4.682746,-3.936873,-1.578105,-2.167359,7.179715,-9.298182,9.846054,-5.666721,-7.165899,-3.228077,4.237531,-6.392638,1.298633],[3.556861,7.477712,-3.417068,-5.747232,-1.937459,1.845477,-5.796293,7.525360,-8.179517,0.557114,-6.534517,1.140369,-3.833441,-0.807259,-4.956242,9.529891,-8.264106,-3.344847,0.856160,-7.894161,1.248939,-6.866513,-0.838506,-0.230269,8.249762,8.290838],[-7.587759,-7.062204,1.153674,6.042681,-6.467706,2.140425,3.120189,-3.327134,-6.310598,-8.100417,-5.344659,5.345209,-5.265202,5.276784,0.988147,7.538717,-2.110651,8.798546,3.130407,8.287807,2.504874,-6.402946,-1.245912,0.356577,6.660790,-5.294424],[3.109315,-3.850515,6.841243,9.734919,-5.448893,-6.328629,-0.571034,-2.260804,2.832953,-9.741052,-7.741260,7.106218,8.991040,-1.099858,0.055174,-9.835768,-2.195518,-9.657800,0.019727,5.098597,7.352685,-4.914214,6.121648,8.110331,-5.238926,2.311669],[-7.619020,7.755807,4.106588,7.488665,-4.490398,8.423113,-6.555196,-3.564019,7.384022,-4.241133,-4.779457,6.156719,1.436115,-7.300099,-0.249042,6.509507,-5.839934,-0.472425,-4.128423,-1.001160,9.270939,1.271554,-2.769460,4.503401,6.920609,-4.459207],[-5.671480,3.291266,-0.614471,4.212422,2.140714,0.060057,7.962687,-7.636613,6.471908,-5.886190,-5.520651,1.521072,-0.762053,6.607575,-1.171364,0.816953,2.058411,-5.345796,-8.361708,-5.927817,-8.478303,3.964956,0.398153,0.567009,6.969475,3.293007],[-3.829144,-3.870466,-9.668632,-0.902980,1.760278,5.017345,0.035272,-4.278705,-7.699764,0.095436,-5.031064,-8.624843,-6.292911,9.156907,-5.942273,-0.184107,1.495841,9.376849,-7.019806,-8.690227,8.747463,-8.960806,0.638026,-3.307135,4.780133,5.931490],[-4.497872,3.773875,1.559539,-4.472481,5.982912,-6.127263,3.776068,-4.041585,-9.091210,3.356782,6.721353,-2.231153,-0.911312,-8.584164,-7.757743,-4.209876,9.709409,-8.386929,-7.699867,-8.706505,5.688344,-7.240423,-3.606209,-5.296540,9.070563,-1.520586],[9.428563,7.536083,3.421963,4.824886,0.298527,0.741140,7.070181,-6.698314,-3.857352,2.971249,3.544963,7.216634,5.702286,-8.078827,0.148298,1.978203,6.095369,0.415135,-4.266300,2.671717,-7.548673,-1.760484,-8.570362,0.358930,-7.254167,-7.572845],[-4.546121,2.764147,4.060658,-5.267652,6.239899,8.933831,-4.129675,6.375097,1.975193,5.355548,0.434515,3.191467,-5.889333,5.304600,0.716045,-1.032538,0.914852,3.161764,-0.572553,0.317452,6.784028,-0.046637,8.942333,-7.966377,-7.745490,-7.380298],[-0.275717,3.103705,-6.041469,5.051162,-1.640164,4.543800,8.928826,-7.363260,-1.784114,1.202858,-0.913428,-9.149336,-0.993530,-0.765594,-4.809005,-1.413075,-2.725268,3.277708,-6.152384,3.403061,-5.766571,-6.802028,2.642566,4.892500,1.792689,-0.802997],[5.489573,7.284240,7.419556,-9.497319,1.251307,-4.861920,0.266222,-3.244221,-3.876906,-7.451882,7.661533,2.533082,-5.760811,-4.766657,5.332593,5.594651,2.571230,-9.585194,9.928220,-1.076440,-4.162514,-1.419137,-7.234076,1.276436,-8.022958,-3.764058],[1.817885,1.742148,-9.090626,2.198027,-4.995413,-4.894636,1.038939,-0.976870,-0.855731,0.576184,-2.455688,-3.272008,8.052212,6.252623,7.714452,3.951406,6.883777,-9.426866,-1.860838,-9.869946,0.240486,0.540319,8.162967,5.200887,-9.691218,-5.609256],[-4.328092,-1.610664,1.312042,-4.232416,2.705245,7.862387,-9.870571,-2.112162,9.677275,1.966934,-2.054031,4.769815,-0.041865,4.365964,-5.612517,7.411800,-9.811369,-5.537311,-2.829878,-6.052618,-4.066713,-1.928204,-5.735705,0.055919,4.358533,-9.978165],[4.317276,-2.002575,-7.401343,6.773011,4.713965,1.759130,-6.123374,0.632634,-9.538067,-9.431648,9.654994,8.040500,6.371669,0.845742,1.229999,-4.299853,-3.024231,9.327226,-7.835033,4.572654,4.285974,4.036967,-0.003296,-6.303174,1.966378,9.583283],[-5.444079,-7.029684,0.095122,-8.638877,6.721585,-1.564619,9.982273,-1.432723,-5.031015,-4.968649,-3.211910,3.985357,-7.361810,-5.482218,-6.889925,8.588527,-4.248271,-5.035043,9.281824,2.136248,-3.650278,-4.740150,1.800633,9.792352,-4.079420,7.311050],[-9.953368,6.617271,7.220689,-8.330860,4.396735,-5.765911,6.230612,-7.459686,2.533821,9.707692,1.631549,-8.741427,-1.467235,-1.822124,5.667021,3.245565,-4.169671,-6.179762,-0.444526,6.335626,-6.459553,-3.994815,-4.986327,6.924955,-2.335671,8.004032],[-3.867671,-5.979065,-4.750272,-5.879135,-3.085673,5.913712,-7.671842,-9.936927,-5.337485,5.181103,2.971357,-5.085752,-8.683626,-7.064614,-7.415073,-3.575752,0.379219,5.860500,4.446054,2.858982,7.257317,-2.896351,-0.613263,6.824962,-0.673217,-7.151205],[-3.069766,8.940341,-7.104392,4.791821,-1.180553,2.405910,-7.773157,3.564906,-6.026830,9.994967,3.616062,-0.304522,9.121779,-2.909415,-7.703250,4.133247,3.210920,3.322189,-6.818133,-6.231268,-9.414595,-2.292203,-0.372622,-4.145972,-8.742912,-8.328296],[1.473460,-0.422487,-6.577055,-9.726664,8.676447,2.644915,-6.718978,-8.115979,5.007914,8.783294,-7.574780,-8.185380,1.039132,-0.837706,7.075351,3.586250,7.576035,3.313805,-8.336563,-9.981827,7.057860,-9.862169,-0.111229,2.065582,9.520193,3.067437],[-9.207075,-2.471540,-2.079400,-4.740960,-7.451777,-9.941622,1.799126,4.158973,9.367621,4.964054,-5.805453,-1.369567,-4.489227,-8.023718,8.576189,9.178169,-5.105754,3.725585,-8.384445,-6.523589,-7.676414,-4.849712,-5.361306,2.475154,9.305216,-6.591089],[0.937036,-8.016999,-9.856098,0.694638,-1.866315,-7.920847,5.776102,3.534359,2.421201,-6.420031,-7.485613,9.468976,-4.594859,-6.415189,8.702895,6.575795,-1.957766,-6.341695,3.411537,-5.936535,-4.371437,-2.592000,-4.596544,-2.495617,3.328611,2.759751],[6.563995,-3.277644,-8.209868,-9.340887,4.319022,-1.519189,4.300138,0.184178,-2.362567,6.471889,-9.606055,-3.188613,8.118636,-2.189153,9.880436,1.547174,-2.817830,8.713187,-6.138872,-8.222459,7.414131,7.795192,4.176977,2.721947,-1.581450,-5.827214],[-9.273865,-5.657358,1.348967,-1.127097,-9.140004,-8.134977,7.406653,6.592689,1.843750,-9.627121,-4.937278,1.667533,-4.686782,-7.384022,1.728368,2.671897,1.518391,-7.939208,-2.969234,-8.847415,-5.894102,0.377537,-6.045003,1.235983,-5.494046,-3.601033],[-2.224972,-6.927679,1.832416,0.575656,8.446888,-5.767725,-1.682487,-5.413155,-3.344909,-0.962505,9.681275,-8.761677,-8.763200,3.174816,5.342242,-0.751897,0.784895,-1.787078,9.408344,-7.482814,-5.611585,9.596110,1.935274,2.926950,-9.975985,-1.836307],[2.434324,7.991023,-6.569124,-8.192452,8.248044,4.192280,4.612881,9.596285,-8.692093,-4.481450,-3.233340,1.559348,3.144799,8.849013,-3.829653,3.913182,6.960456,-4.885801,0.858533,5.689485,3.955571,0.866705,6.571726,9.285221,-2.248492,-8.622956],[3.112186,-3.029237,0.112953,4.309716,2.584802,6.705311,6.256924,0.418164,3.287465,5.295928,2.954165,4.450404,4.324050,-8.489509,-0.580874,3.857582,1.914937,-6.276561,5.643693,-4.802857,-8.627204,1.031609,9.596961,-9.656955,-8.708644,8.096368],[0.641538,-6.827880,7.256140,-1.872396,1.499786,-4.656370,-0.221207,7.434190,-5.694648,-7.950081,-3.348969,-9.339129,-6.707501,-7.622738,8.326387,0.562585,-8.148769,0.657614,-1.399096,-5.147809,8.440492,-1.091529,0.301152,-9.801593,-4.646888,6.592037],[-6.724332,-2.190841,-1.234786,1.892565,5.789005,-8.601013,-9.675500,5.987733,-7.574410,1.774518,-4.127107,8.622143,7.661139,2.826419,-4.824649,-1.303508,4.501821,-6.668769,2.359840,1.267671,-3.579458,7.993452,3.565726,5.398123,-2.959687,-3.291090],[7.709780,-0.253191,0.192851,-8.643352,-5.863238,-8.238055,0.926546,-2.115409,8.334929,2.625414,2.282856,-2.464982,-8.299080,-1.896146,-0.966219,1.912303,-6.864866,2.429950,-7.312024,-3.711038,-5.278402,-8.051359,7.722131,0.250873,-1.539679,-8.807645],[0.107989,-7.728033,-1.016946,-6.561154,3.520930,-7.434373,8.853998,3.707614,3.269290,0.441899,4.934761,-4.251376,-3.805686,5.434857,-8.783079,-7.106738,-9.856231,7.398789,-6.965295,-3.159515,-8.169670,8.618190,-2.893067,3.726690,-2.271738,2.848919]], dtype = "float32")#candidate|2429|(40, 26)|const|float32
call_2428 = relay.TupleGetItem(func_2388_call(relay.reshape(const_2429.astype('float32'), [10, 13, 8])), 0)
call_2430 = relay.TupleGetItem(func_2391_call(relay.reshape(const_2429.astype('float32'), [10, 13, 8])), 0)
bop_2431 = relay.mod(uop_2413.astype('float32'), relay.reshape(var_2412.astype('float32'), relay.shape_of(uop_2413))) # shape=(5, 1, 11)
bop_2435 = relay.not_equal(uop_2413.astype('bool'), relay.reshape(var_2412.astype('bool'), relay.shape_of(uop_2413))) # shape=(5, 1, 11)
uop_2443 = relay.atan(call_2417.astype('float64')) # shape=(13, 6, 13)
uop_2445 = relay.atan(call_2420.astype('float64')) # shape=(13, 6, 13)
func_1865_call = mod.get_global_var('func_1865')
func_1868_call = mutated_mod.get_global_var('func_1868')
var_2462 = relay.var("var_2462", dtype = "float64", shape = (240,))#candidate|2462|(240,)|var|float64
call_2461 = func_1865_call(relay.reshape(var_2462.astype('float64'), [10, 2, 12]), relay.reshape(var_2462.astype('float64'), [10, 2, 12]), )
call_2463 = func_1865_call(relay.reshape(var_2462.astype('float64'), [10, 2, 12]), relay.reshape(var_2462.astype('float64'), [10, 2, 12]), )
func_2247_call = mod.get_global_var('func_2247')
func_2249_call = mutated_mod.get_global_var('func_2249')
var_2470 = relay.var("var_2470", dtype = "float32", shape = (2560,))#candidate|2470|(2560,)|var|float32
call_2469 = relay.TupleGetItem(func_2247_call(relay.reshape(var_2470.astype('float32'), [10, 16, 16])), 4)
call_2471 = relay.TupleGetItem(func_2249_call(relay.reshape(var_2470.astype('float32'), [10, 16, 16])), 4)
output = relay.Tuple([const_2418,const_2419,call_2425,call_2428,const_2429,bop_2431,bop_2435,uop_2443,call_2461,var_2462,call_2469,var_2470,])
output2 = relay.Tuple([const_2418,const_2419,call_2426,call_2430,const_2429,bop_2431,bop_2435,uop_2445,call_2463,var_2462,call_2471,var_2470,])
func_2473 = relay.Function([var_2412,var_2462,var_2470,], output)
mod['func_2473'] = func_2473
mod = relay.transform.InferType()(mod)
var_2474 = relay.var("var_2474", dtype = "float64", shape = (5, 1, 11))#candidate|2474|(5, 1, 11)|var|float64
var_2475 = relay.var("var_2475", dtype = "float64", shape = (240,))#candidate|2475|(240,)|var|float64
var_2476 = relay.var("var_2476", dtype = "float32", shape = (2560,))#candidate|2476|(2560,)|var|float32
output = func_2473(var_2474,var_2475,var_2476,)
func_2477 = relay.Function([var_2474,var_2475,var_2476,], output)
mutated_mod['func_2477'] = func_2477
mutated_mod = relay.transform.InferType()(mutated_mod)
const_2835 = relay.const([[[-5,-5,-6,-10,1],[-1,10,-7,3,4],[10,4,4,3,9],[3,8,10,1,3],[4,2,-8,-7,-1],[-6,10,6,-9,7],[10,-3,-8,-2,-10],[2,1,-8,-2,-9],[-5,-3,6,-8,-2],[-2,-4,1,-5,-10],[8,-1,-5,7,5],[8,2,4,3,-4],[8,7,2,-6,9],[-3,8,-9,4,-8],[-3,-10,8,-4,9]],[[-5,-5,-1,-10,-5],[2,9,4,3,-3],[1,-5,-2,7,5],[-5,5,7,-8,-2],[6,-1,-6,-3,4],[-7,-4,6,-9,-4],[-10,-9,9,-10,10],[10,-8,5,7,-2],[-5,-8,5,-9,-8],[9,1,3,-3,-9],[-7,-3,1,10,5],[2,2,3,5,-2],[-2,-3,10,-5,8],[-7,10,-1,-5,10],[2,-2,-2,-4,6]],[[2,-6,2,-10,8],[-8,5,3,10,5],[-10,2,5,-8,10],[2,1,-6,3,-8],[4,-4,-6,4,-8],[6,8,-1,-9,-2],[10,-1,-2,-4,3],[-6,9,-7,-10,9],[-10,6,-10,-2,4],[9,6,7,-9,4],[4,-10,-1,-8,-7],[-9,-1,-6,-1,-1],[10,1,2,-5,2],[2,9,-8,10,-3],[2,-6,6,3,2]],[[-4,-4,8,4,6],[5,3,1,-6,9],[1,-3,4,1,-7],[-3,-5,8,2,9],[10,-5,9,4,10],[5,5,-10,-7,8],[4,-9,-8,-4,-8],[8,10,1,-3,5],[8,-5,-9,-4,6],[4,-3,2,-7,4],[1,5,9,-1,3],[-8,-5,4,7,-2],[-9,-6,-7,-6,5],[4,-3,-9,7,7],[-5,2,7,6,3]]], dtype = "int32")#candidate|2835|(4, 15, 5)|const|int32
const_2836 = relay.const([[[-4,6,1,-2,-9],[-3,-6,6,10,-5],[-1,-2,-4,7,3],[-9,-7,2,1,8],[-6,8,-1,10,-2],[-2,4,5,3,9],[8,-10,5,6,7],[-7,2,-4,2,6],[-1,-8,4,-2,9],[-4,1,5,-7,3],[-4,6,-8,1,-4],[-7,-5,9,10,8],[-5,8,6,2,-4],[-5,5,-4,-2,4],[-2,-3,6,6,-7]],[[9,5,-8,1,-4],[4,3,1,-4,-2],[10,-1,-1,-7,7],[1,6,1,9,-5],[-7,2,-10,-7,7],[5,3,2,-5,1],[1,-7,-2,-10,-10],[-3,5,9,8,2],[-5,-5,-4,-2,-4],[-10,9,-1,-6,1],[7,5,9,7,-9],[-5,5,5,-6,8],[-2,-4,-8,3,9],[1,9,-8,-1,-10],[-4,-9,6,8,-10]],[[2,7,-6,-5,2],[-4,10,1,4,4],[6,-2,7,-6,-9],[-1,2,-9,6,7],[7,-1,5,-6,-7],[6,8,-6,-5,8],[-3,-7,1,-1,-9],[5,10,-3,-9,7],[-9,9,10,-2,10],[-8,-3,7,-10,-10],[-9,-5,2,-7,10],[9,8,9,-3,-4],[3,7,-9,-9,-5],[8,-6,4,-4,1],[4,3,5,-1,-5]],[[3,-8,-1,5,6],[8,3,-10,2,-7],[-7,-2,-4,-4,-7],[-1,-6,-1,4,6],[-3,5,-10,2,-6],[-4,9,-5,5,7],[10,-10,-6,3,6],[-9,8,4,6,10],[2,-9,2,-3,5],[6,-7,4,-9,3],[-10,4,-8,-6,4],[-8,-1,-9,-1,9],[2,5,-6,-5,6],[2,-2,-4,7,-5],[-7,1,-2,-3,3]]], dtype = "int32")#candidate|2836|(4, 15, 5)|const|int32
bop_2837 = relay.minimum(const_2835.astype('int32'), relay.reshape(const_2836.astype('int32'), relay.shape_of(const_2835))) # shape=(4, 15, 5)
uop_2856 = relay.cos(const_2835.astype('float32')) # shape=(4, 15, 5)
func_1129_call = mod.get_global_var('func_1129')
func_1134_call = mutated_mod.get_global_var('func_1134')
var_2859 = relay.var("var_2859", dtype = "float64", shape = (32,))#candidate|2859|(32,)|var|float64
const_2860 = relay.const([[-7.592062,-2.772189,4.764953,1.328646,-0.905169,4.962582,-5.047285,8.200677,1.518086,-7.952087,6.737448,-2.858380,-4.752079,-4.273790,-0.635238,6.802031,-3.518020,0.247701,1.807413,9.480541,6.019386,-3.586911,-9.765638,-1.247058,-4.846727,8.224096,3.105134,-6.940481,2.250205,-6.447466,-2.831065,8.665258,4.127348,2.993438,8.751755,-7.820565,0.365675,-4.272366,-4.981926,7.015352,2.546484,-3.264433,-9.320746,1.984167,-4.743176,-4.377865,0.139244,7.716517,-4.090630,4.032231,2.610645,6.811449,-9.146619,-3.533986,-4.564476,3.888956,-0.264366,2.713818,-0.955273,9.352480]], dtype = "float32")#candidate|2860|(1, 60)|const|float32
var_2861 = relay.var("var_2861", dtype = "float32", shape = (24, 14))#candidate|2861|(24, 14)|var|float32
call_2858 = relay.TupleGetItem(func_1129_call(relay.reshape(var_2859.astype('float64'), [32,]), relay.reshape(const_2860.astype('float32'), [60,]), relay.reshape(var_2861.astype('float32'), [1, 336]), ), 3)
call_2862 = relay.TupleGetItem(func_1134_call(relay.reshape(var_2859.astype('float64'), [32,]), relay.reshape(const_2860.astype('float32'), [60,]), relay.reshape(var_2861.astype('float32'), [1, 336]), ), 3)
var_2886 = relay.var("var_2886", dtype = "float32", shape = (24, 14))#candidate|2886|(24, 14)|var|float32
bop_2887 = relay.floor_divide(var_2861.astype('float64'), relay.reshape(var_2886.astype('float64'), relay.shape_of(var_2861))) # shape=(24, 14)
output = relay.Tuple([bop_2837,uop_2856,call_2858,var_2859,const_2860,bop_2887,])
output2 = relay.Tuple([bop_2837,uop_2856,call_2862,var_2859,const_2860,bop_2887,])
func_2896 = relay.Function([var_2859,var_2861,var_2886,], output)
mod['func_2896'] = func_2896
mod = relay.transform.InferType()(mod)
var_2897 = relay.var("var_2897", dtype = "float64", shape = (32,))#candidate|2897|(32,)|var|float64
var_2898 = relay.var("var_2898", dtype = "float32", shape = (24, 14))#candidate|2898|(24, 14)|var|float32
var_2899 = relay.var("var_2899", dtype = "float32", shape = (24, 14))#candidate|2899|(24, 14)|var|float32
output = func_2896(var_2897,var_2898,var_2899,)
func_2900 = relay.Function([var_2897,var_2898,var_2899,], output)
mutated_mod['func_2900'] = func_2900
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3078 = relay.var("var_3078", dtype = "float32", shape = (10, 14, 7))#candidate|3078|(10, 14, 7)|var|float32
var_3079 = relay.var("var_3079", dtype = "float32", shape = (10, 14, 7))#candidate|3079|(10, 14, 7)|var|float32
bop_3080 = relay.multiply(var_3078.astype('float32'), relay.reshape(var_3079.astype('float32'), relay.shape_of(var_3078))) # shape=(10, 14, 7)
func_1061_call = mod.get_global_var('func_1061')
func_1064_call = mutated_mod.get_global_var('func_1064')
var_3090 = relay.var("var_3090", dtype = "float64", shape = (32,))#candidate|3090|(32,)|var|float64
call_3089 = relay.TupleGetItem(func_1061_call(relay.reshape(var_3090.astype('float64'), [4, 8])), 0)
call_3091 = relay.TupleGetItem(func_1064_call(relay.reshape(var_3090.astype('float64'), [4, 8])), 0)
output = relay.Tuple([bop_3080,call_3089,var_3090,])
output2 = relay.Tuple([bop_3080,call_3091,var_3090,])
func_3093 = relay.Function([var_3078,var_3079,var_3090,], output)
mod['func_3093'] = func_3093
mod = relay.transform.InferType()(mod)
mutated_mod['func_3093'] = func_3093
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3093_call = mutated_mod.get_global_var('func_3093')
var_3095 = relay.var("var_3095", dtype = "float32", shape = (10, 14, 7))#candidate|3095|(10, 14, 7)|var|float32
var_3096 = relay.var("var_3096", dtype = "float32", shape = (10, 14, 7))#candidate|3096|(10, 14, 7)|var|float32
var_3097 = relay.var("var_3097", dtype = "float64", shape = (32,))#candidate|3097|(32,)|var|float64
call_3094 = func_3093_call(var_3095,var_3096,var_3097,)
output = call_3094
func_3098 = relay.Function([var_3095,var_3096,var_3097,], output)
mutated_mod['func_3098'] = func_3098
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3430 = relay.var("var_3430", dtype = "float64", shape = (2, 4, 13))#candidate|3430|(2, 4, 13)|var|float64
uop_3431 = relay.asin(var_3430.astype('float64')) # shape=(2, 4, 13)
func_774_call = mod.get_global_var('func_774')
func_778_call = mutated_mod.get_global_var('func_778')
const_3434 = relay.const([2.325635,-4.230232,-9.249876,8.223969,6.116610,9.228285,7.363730,0.485517,-1.110071,-5.754756,2.389909,-4.830033,-1.763366,0.711574,-3.722009,8.824940,-2.774686,7.961605,-2.650528,-2.221118,8.405110,9.878904,-3.899315,7.634092,-9.594547,5.390535,-2.799262,-0.384615,8.225784,-1.261918,-7.589489,1.491648,6.170851,-2.504729,-2.857489,9.202290,-8.644772,-2.841693,2.043097,1.337741,3.538146,4.238275,7.013919,-5.292324,-2.692208,-3.764319,-2.610770,8.811604,8.070323,8.760381,-3.225638,4.022465,-2.063630,0.839720,4.272682,3.045829,-1.004150,-1.206104,-4.578483,-0.056234], dtype = "float32")#candidate|3434|(60,)|const|float32
call_3433 = relay.TupleGetItem(func_774_call(relay.reshape(const_3434.astype('float32'), [3, 10, 2]), relay.reshape(const_3434.astype('float32'), [3, 10, 2]), relay.reshape(const_3434.astype('float32'), [3, 10, 2]), ), 2)
call_3435 = relay.TupleGetItem(func_778_call(relay.reshape(const_3434.astype('float32'), [3, 10, 2]), relay.reshape(const_3434.astype('float32'), [3, 10, 2]), relay.reshape(const_3434.astype('float32'), [3, 10, 2]), ), 2)
bop_3442 = relay.subtract(uop_3431.astype('float32'), relay.reshape(var_3430.astype('float32'), relay.shape_of(uop_3431))) # shape=(2, 4, 13)
func_2203_call = mod.get_global_var('func_2203')
func_2206_call = mutated_mod.get_global_var('func_2206')
const_3455 = relay.const(-1, dtype = "int32")#candidate|3455|()|const|int32
const_3456 = relay.const([6,-5,-1,-9,7,5,-7,-9,-5,2,3,-6,7,10,-6,5,7,2,-8,-3,4,-7,1,3,6,-1], dtype = "int32")#candidate|3456|(26,)|const|int32
call_3454 = relay.TupleGetItem(func_2203_call(relay.reshape(const_3455.astype('int32'), []), relay.reshape(const_3456.astype('int32'), [2, 13, 1]), ), 0)
call_3457 = relay.TupleGetItem(func_2206_call(relay.reshape(const_3455.astype('int32'), []), relay.reshape(const_3456.astype('int32'), [2, 13, 1]), ), 0)
output = relay.Tuple([call_3433,const_3434,bop_3442,call_3454,const_3455,const_3456,])
output2 = relay.Tuple([call_3435,const_3434,bop_3442,call_3457,const_3455,const_3456,])
func_3464 = relay.Function([var_3430,], output)
mod['func_3464'] = func_3464
mod = relay.transform.InferType()(mod)
var_3465 = relay.var("var_3465", dtype = "float64", shape = (2, 4, 13))#candidate|3465|(2, 4, 13)|var|float64
output = func_3464(var_3465)
func_3466 = relay.Function([var_3465], output)
mutated_mod['func_3466'] = func_3466
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3599 = relay.var("var_3599", dtype = "float32", shape = (14, 2, 13))#candidate|3599|(14, 2, 13)|var|float32
uop_3600 = relay.acos(var_3599.astype('float32')) # shape=(14, 2, 13)
func_1865_call = mod.get_global_var('func_1865')
func_1868_call = mutated_mod.get_global_var('func_1868')
const_3605 = relay.const([4.283858,-6.151773,8.763482,2.279559,-0.226642,-1.015394,3.221443,7.227653,-4.509097,1.382899,-3.225386,-9.117369,-4.000455,-4.065558,7.438958,-1.749589,4.985524,2.839925,-3.034369,-6.488141,2.628289,-6.310135,8.315293,2.343717,8.459740,-1.946140,3.746024,9.926520,5.560579,0.091535,6.816152,3.813374,-2.994091,2.714286,0.762810,-6.575558,-8.169482,7.355622,-2.930071,7.459628,8.805220,-6.829279,-8.097066,6.066820,2.362040,7.650049,-8.955453,8.148207,4.757987,4.063779,-3.528208,8.013786,8.039281,-6.398055,-5.241904,7.904172,7.339038,-7.216677,7.136521,0.814503,7.011948,9.529795,-1.866506,-2.451249,-1.400374,-3.710180,6.011423,8.356864,2.331018,5.884350,-9.142479,8.529964,-3.809821,3.008606,7.516997,-3.353992,6.382776,-8.435463,-9.670773,-1.134258,8.299256,-6.668129,-9.502947,3.079117,1.897563,8.595510,0.613897,-2.166595,2.568271,1.184266,-2.464758,1.610885,2.410417,5.199550,-4.713817,-3.059318,8.454952,1.986630,1.245222,0.092526,2.191188,-4.791837,9.905196,-9.747974,-3.819975,-8.441989,3.697307,5.452979,7.015347,-4.201606,-7.114534,1.568054,5.424464,6.178926,1.676502,-9.792073,-4.484573,7.540063,9.075117,-6.829845,5.645695,-2.314736,-8.044254,-4.600702,2.566750,3.050582,3.057872,2.685545,7.506869,8.978195,1.601674,0.871257,-2.372629,5.152281,-4.701573,-4.259749,-8.723546,-7.720627,-1.480490,4.783621,-2.803152,3.966396,2.679437,-0.241721,8.036388,-3.621912,4.012337,-5.550747,-8.382006,2.105500,8.704335,1.448762,5.484838,-5.075999,-6.646320,2.801364,0.319493,-9.679695,6.427215,6.931592,8.367690,1.624174,-4.294530,-6.288406,3.676175,1.275754,7.196858,9.921420,2.775969,-4.593865,0.412990,-2.366674,-8.891703,6.367058,1.111363,2.260201,-0.579219,-5.580875,-2.306007,-3.759744,-4.215301,8.162061,-1.669284,-7.803560,-8.496879,8.276167,-6.570604,-5.275205,-0.541333,-8.086599,6.437737,-2.950256,-5.652040,-9.837595,-5.458007,6.991606,-7.059484,-5.653154,7.049703,-8.963626,-0.536402,6.682916,5.818447,1.324294,3.186444,-4.632353,3.828458,5.857546,4.350087,8.855739,-0.993308,-3.584694,1.917218,7.336028,-3.761803,-0.840083,7.608588,6.734844,-4.232474,-1.755089,1.732561,-8.840462,-3.247679,-4.137088,9.918285,0.582316,-1.645972,-9.862023,-1.108165,-9.103900,-2.088676,2.715230,-8.371876,-6.885037,-9.944940,5.947606,7.396952,-8.130889,6.204963,5.463635], dtype = "float64")#candidate|3605|(240,)|const|float64
call_3604 = func_1865_call(relay.reshape(const_3605.astype('float64'), [10, 2, 12]), relay.reshape(const_3605.astype('float64'), [10, 2, 12]), )
call_3606 = func_1865_call(relay.reshape(const_3605.astype('float64'), [10, 2, 12]), relay.reshape(const_3605.astype('float64'), [10, 2, 12]), )
bop_3607 = relay.left_shift(uop_3600.astype('int32'), relay.reshape(var_3599.astype('int32'), relay.shape_of(uop_3600))) # shape=(14, 2, 13)
func_1246_call = mod.get_global_var('func_1246')
func_1250_call = mutated_mod.get_global_var('func_1250')
var_3627 = relay.var("var_3627", dtype = "float32", shape = (180,))#candidate|3627|(180,)|var|float32
const_3628 = relay.const([-5.922453,9.351219,2.140239,-0.268678,2.002579,8.153048,0.553787,-9.542288,5.273632,-1.773314,8.879005,-6.036502,-9.974991,-5.981090,-3.258443,1.282462,9.075845,3.979319,-3.587002,3.191519,6.761299,5.038401,9.392278,8.700212,-7.570586,-2.335607,-1.334979,2.631601,-1.106022,-0.260906,-3.934639,4.014028,-2.455891,-4.889281,7.931426,-8.666379,3.996766,4.842734,3.497281,7.539551,2.313582,8.401570,9.434722,-1.666015,-8.628704,-9.700870,-1.225659,2.304815,-0.097689,4.483685,3.970033,0.094956,-0.936587,3.496716,4.351554,2.416176,-3.623180,-7.576911,-1.463524,-1.711610], dtype = "float32")#candidate|3628|(60,)|const|float32
call_3626 = relay.TupleGetItem(func_1246_call(relay.reshape(var_3627.astype('float32'), [2, 10, 9]), relay.reshape(const_3628.astype('float32'), [60,]), ), 1)
call_3629 = relay.TupleGetItem(func_1250_call(relay.reshape(var_3627.astype('float32'), [2, 10, 9]), relay.reshape(const_3628.astype('float32'), [60,]), ), 1)
output = relay.Tuple([call_3604,const_3605,bop_3607,call_3626,var_3627,const_3628,])
output2 = relay.Tuple([call_3606,const_3605,bop_3607,call_3629,var_3627,const_3628,])
func_3653 = relay.Function([var_3599,var_3627,], output)
mod['func_3653'] = func_3653
mod = relay.transform.InferType()(mod)
mutated_mod['func_3653'] = func_3653
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3653_call = mutated_mod.get_global_var('func_3653')
var_3655 = relay.var("var_3655", dtype = "float32", shape = (14, 2, 13))#candidate|3655|(14, 2, 13)|var|float32
var_3656 = relay.var("var_3656", dtype = "float32", shape = (180,))#candidate|3656|(180,)|var|float32
call_3654 = func_3653_call(var_3655,var_3656,)
output = call_3654
func_3657 = relay.Function([var_3655,var_3656,], output)
mutated_mod['func_3657'] = func_3657
mutated_mod = relay.transform.InferType()(mutated_mod)
const_4068 = relay.const([[[-3.029269,-2.850182,-1.519040,-8.094379,-8.850493,0.377919,4.652072],[-0.750515,6.460617,8.510401,-7.004754,3.789818,-3.454215,2.419785],[-9.009681,0.451544,-8.249453,-9.545053,-3.503259,1.626805,-6.972653],[-0.789756,4.478488,-9.530593,8.269343,9.905708,3.168171,9.719436],[-7.619463,6.242876,8.046261,1.767355,-6.587164,-2.056414,6.511627],[5.043939,-4.826607,6.851871,1.321295,4.778526,9.237245,-3.727785],[6.846892,-9.964035,-3.812246,-6.349585,-0.206773,3.949034,2.138364],[0.829437,6.333205,-1.361655,5.480877,-7.151909,-6.582621,0.569516],[-9.562833,-0.973559,4.652250,3.847949,0.088735,4.482305,-6.843453]],[[-7.915995,-9.031378,-3.169553,9.527109,-8.255645,-6.307515,1.333107],[-3.015408,-9.507525,-4.218377,-9.997163,0.758697,2.871301,5.267490],[-9.908346,-3.226660,-2.958450,3.976989,-6.575172,6.555023,6.997666],[8.779657,-0.830349,8.574938,1.409990,-7.943758,4.503419,0.953517],[-7.600070,9.169978,-5.010330,3.638350,-4.497791,0.027056,5.869065],[2.678111,-0.737444,1.672298,-6.356278,9.638386,-9.440730,6.047158],[8.972574,3.703507,-5.490639,7.498283,-9.146460,3.133465,6.367778],[3.064553,0.440071,7.423677,-5.091596,3.529647,4.616836,-7.781618],[-8.244364,3.328647,-7.227815,2.625563,1.230825,-4.920353,1.745202]],[[-1.316652,-0.898421,-5.489543,2.649027,-7.466748,-8.887267,-7.146593],[-9.515582,-9.963615,7.951724,2.984018,-1.480223,-2.985413,4.814233],[4.379958,-3.125436,6.492439,8.751436,-2.290084,9.720496,-8.035400],[-1.283232,3.209958,9.236679,7.994651,9.854612,3.365922,3.881000],[1.945417,-9.479670,-7.889499,-0.558541,0.655946,8.237835,-7.428788],[-3.827274,-1.953173,-6.081867,-1.546953,3.054557,-4.542753,-7.904019],[-3.351680,1.592040,-0.259692,-3.251549,-6.866526,-7.717361,2.574731],[6.316153,-2.631940,-0.901585,7.198163,-1.176329,9.648371,5.226569],[-4.506301,9.966332,-4.421043,-0.662844,-6.043303,2.314805,2.010958]],[[-1.049076,7.975366,1.060805,-4.814015,-8.957839,-6.755880,9.283011],[1.848368,6.720481,-9.189108,-8.716785,7.776770,0.880407,-3.238281],[-7.156896,-4.962003,-3.914957,-3.709741,6.367698,4.390264,-4.459467],[-6.025186,3.301745,1.640795,9.835627,1.921331,-3.105115,-6.177647],[-9.136580,-1.598613,-1.345753,-4.618957,-4.088197,-9.914921,6.994530],[6.305532,4.915283,8.149624,9.501958,7.080001,-5.787452,7.754999],[7.126521,-2.943236,-0.880255,-0.827966,8.094342,5.894950,-3.749325],[4.125138,7.692174,4.275109,-2.998971,-3.300413,8.097640,-5.200826],[-5.175588,-0.364768,7.120073,-5.608116,3.028712,-7.675558,4.218986]],[[-5.483356,-9.318574,9.560416,1.126676,-5.328620,5.108899,9.857991],[9.697410,-4.448868,7.398834,9.361965,0.418720,-4.554179,4.718329],[1.286803,-5.557816,-4.500574,0.745738,4.368404,-7.431203,-9.654526],[-1.866664,5.113981,3.431776,8.070025,-7.564265,0.822770,-2.523902],[2.930872,-0.994294,-6.687772,-1.251917,3.779022,-6.727534,-7.571261],[4.034259,-2.024738,9.278800,8.871666,7.779387,2.858705,2.754213],[0.402792,4.560642,0.716609,7.998710,-9.678013,-8.298477,2.740300],[-1.767230,-8.798482,-4.773461,6.990428,-2.522979,-4.811824,-3.108266],[7.650558,-0.093747,0.915087,7.140780,-0.129436,7.991934,5.453871]],[[-7.358333,-3.135144,-2.047885,-0.547074,-1.842966,-3.998948,-0.624678],[-0.396905,1.154152,1.066161,0.896009,1.661727,4.647807,9.745626],[-5.314362,8.782847,-3.775567,-5.421835,-2.841332,2.332036,-1.003933],[2.966958,4.647664,7.940676,5.045370,-6.851037,-6.532899,-5.682037],[0.860718,-3.259167,-9.991666,1.989104,0.556028,9.241999,-5.689489],[-9.637147,8.244092,-1.875713,-3.133245,6.785370,-8.611441,-7.240240],[4.589017,-5.186583,-4.403165,-0.464675,-0.082434,5.427369,7.791963],[4.450895,-7.620584,3.770464,7.246497,-5.001281,2.230699,-8.494375],[0.799852,-0.913850,7.948482,-2.320291,0.881775,-6.622400,-2.121760]],[[-8.947547,-7.976365,2.718318,9.581344,-3.442552,-2.965523,-4.375206],[-9.540690,5.369306,6.636422,-7.261640,3.178751,3.474804,-6.290888],[-7.982452,1.037388,-8.015085,7.809434,-3.139869,-1.622618,3.040608],[0.703649,8.967026,-7.597464,-3.165522,-8.217298,-3.003484,7.100431],[7.932257,8.062112,-5.618732,-0.425746,2.178964,-0.039508,-4.310127],[-8.263915,-3.241336,-6.029791,-1.309507,-3.470031,-7.576543,2.714523],[-1.884535,-0.693384,-7.563551,-8.218002,6.246425,-2.639827,-9.929800],[-1.228985,2.044128,-5.635003,1.764586,7.058149,-9.073173,-8.308978],[3.002666,3.801900,-6.090889,9.541988,-4.945446,4.843749,-7.971936]],[[-8.494362,-5.492329,3.365316,0.369591,0.400508,-3.491420,-4.786553],[5.998149,-1.790699,6.334270,-6.942591,9.015690,-9.272998,4.230681],[0.527753,3.659397,-8.636303,9.153716,-5.687362,-7.545832,2.464001],[-3.352340,3.101175,-1.695185,-7.578225,5.560526,9.265406,-4.979094],[-9.309114,5.267174,1.490671,4.645500,-4.340719,-6.216623,-1.489067],[3.242411,4.940377,4.998807,6.293772,-0.330219,2.518967,-5.982502],[2.797618,3.853361,6.582584,3.737987,5.074724,-9.876049,6.852883],[-4.799943,8.655302,4.303857,-9.087412,5.465358,-6.478843,0.940921],[-5.972281,-5.889012,9.894378,7.595723,-7.223571,1.846860,-1.607370]],[[-3.386553,-1.437227,9.101800,-8.331885,1.454182,4.280449,-3.607863],[-8.348689,-1.087863,1.834616,-1.032988,-0.931990,6.542782,3.871462],[-6.525707,2.453587,3.864011,-0.652437,1.813907,-4.299805,4.344200],[-5.422488,2.623315,9.029852,8.564204,6.800737,7.709182,8.521953],[-6.952247,-7.800792,-3.423735,3.606143,5.171722,-0.948941,-8.273484],[8.518503,1.893748,6.208112,0.296048,-9.088818,-7.838163,-7.755045],[6.215948,-6.562574,-4.174771,-6.703760,-9.236120,0.801501,2.634545],[6.692350,-7.359179,3.695690,-6.571963,-6.655849,-1.497572,-0.170599],[-0.145530,-8.651069,-9.253855,-0.631700,2.952304,-1.523916,-5.681519]]], dtype = "float64")#candidate|4068|(9, 9, 7)|const|float64
uop_4069 = relay.acos(const_4068.astype('float64')) # shape=(9, 9, 7)
uop_4091 = relay.sinh(uop_4069.astype('float32')) # shape=(9, 9, 7)
output = relay.Tuple([uop_4091,])
output2 = relay.Tuple([uop_4091,])
func_4095 = relay.Function([], output)
mod['func_4095'] = func_4095
mod = relay.transform.InferType()(mod)
output = func_4095()
func_4096 = relay.Function([], output)
mutated_mod['func_4096'] = func_4096
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4146 = relay.var("var_4146", dtype = "uint64", shape = ())#candidate|4146|()|var|uint64
var_4147 = relay.var("var_4147", dtype = "uint64", shape = (12, 11, 2))#candidate|4147|(12, 11, 2)|var|uint64
bop_4148 = relay.bitwise_xor(var_4146.astype('uint64'), var_4147.astype('uint64')) # shape=(12, 11, 2)
uop_4153 = relay.cosh(var_4147.astype('float64')) # shape=(12, 11, 2)
output = relay.Tuple([bop_4148,uop_4153,])
output2 = relay.Tuple([bop_4148,uop_4153,])
func_4155 = relay.Function([var_4146,var_4147,], output)
mod['func_4155'] = func_4155
mod = relay.transform.InferType()(mod)
mutated_mod['func_4155'] = func_4155
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4155_call = mutated_mod.get_global_var('func_4155')
var_4157 = relay.var("var_4157", dtype = "uint64", shape = ())#candidate|4157|()|var|uint64
var_4158 = relay.var("var_4158", dtype = "uint64", shape = (12, 11, 2))#candidate|4158|(12, 11, 2)|var|uint64
call_4156 = func_4155_call(var_4157,var_4158,)
output = call_4156
func_4159 = relay.Function([var_4157,var_4158,], output)
mutated_mod['func_4159'] = func_4159
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4095_call = mod.get_global_var('func_4095')
func_4096_call = mutated_mod.get_global_var('func_4096')
call_4288 = relay.TupleGetItem(func_4095_call(), 0)
call_4289 = relay.TupleGetItem(func_4096_call(), 0)
func_1246_call = mod.get_global_var('func_1246')
func_1250_call = mutated_mod.get_global_var('func_1250')
var_4297 = relay.var("var_4297", dtype = "float32", shape = (180,))#candidate|4297|(180,)|var|float32
var_4298 = relay.var("var_4298", dtype = "float32", shape = (60,))#candidate|4298|(60,)|var|float32
call_4296 = relay.TupleGetItem(func_1246_call(relay.reshape(var_4297.astype('float32'), [2, 10, 9]), relay.reshape(var_4298.astype('float32'), [60,]), ), 2)
call_4299 = relay.TupleGetItem(func_1250_call(relay.reshape(var_4297.astype('float32'), [2, 10, 9]), relay.reshape(var_4298.astype('float32'), [60,]), ), 2)
output = relay.Tuple([call_4288,call_4296,var_4297,var_4298,])
output2 = relay.Tuple([call_4289,call_4299,var_4297,var_4298,])
func_4316 = relay.Function([var_4297,var_4298,], output)
mod['func_4316'] = func_4316
mod = relay.transform.InferType()(mod)
var_4317 = relay.var("var_4317", dtype = "float32", shape = (180,))#candidate|4317|(180,)|var|float32
var_4318 = relay.var("var_4318", dtype = "float32", shape = (60,))#candidate|4318|(60,)|var|float32
output = func_4316(var_4317,var_4318,)
func_4319 = relay.Function([var_4317,var_4318,], output)
mutated_mod['func_4319'] = func_4319
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4331 = relay.var("var_4331", dtype = "float32", shape = (5, 8, 1))#candidate|4331|(5, 8, 1)|var|float32
uop_4332 = relay.tan(var_4331.astype('float32')) # shape=(5, 8, 1)
func_2247_call = mod.get_global_var('func_2247')
func_2249_call = mutated_mod.get_global_var('func_2249')
const_4338 = relay.const([-2.125397,0.990244,-5.941186,-5.477778,2.295361,-4.495044,8.519519,-7.941802,5.002499,1.921859,-3.380542,-0.468623,-1.181617,-0.321290,-1.431984,3.385826,1.647781,3.342769,-4.795857,6.869363,5.865365,-6.283482,0.592027,4.240312,6.980994,-7.501803,-3.347835,-7.286818,-4.752279,-6.183825,6.007008,2.175184,-2.412776,8.929152,-8.178074,-1.538611,-0.060886,-1.933937,5.014911,-6.540633,-2.387378,3.232203,4.501216,4.100324,-2.452487,9.414849,-9.190231,-1.595655,6.321516,3.783072,6.202379,8.075764,7.296681,9.185318,-6.230363,9.186225,-6.793195,5.097253,-9.226615,4.124509,-5.557745,3.406603,5.375345,3.611762,5.440806,-8.577715,4.120743,-8.014537,-1.416962,2.485233,-2.007109,9.644083,6.950687,-5.414396,-4.031393,3.028874,-2.569057,8.499455,-1.193558,2.177338,1.208859,-7.141796,9.143598,4.213250,-7.178221,-9.560229,-6.894480,-5.749629,-1.409656,4.574293,-1.414605,4.444288,2.676461,8.919217,-4.233338,8.618835,-0.445301,-2.182202,9.448847,7.406835,-5.102147,-4.895345,-8.583411,1.600624,9.631743,8.444498,2.592541,4.171270,4.149867,-5.039059,4.461791,1.489196,-1.320543,2.152195,-3.376977,5.657487,6.446888,6.225035,-9.035694,-1.472520,1.786306,-3.999563,8.715111,-3.690776,-9.890668,-3.656662,-9.008756,4.258559,6.705294,-4.270767,-0.211863,-1.896073,8.830906,5.205828,-0.402627,-9.805167,3.065048,-7.092642,-1.490661,4.561079,-5.418829,-6.906662,3.446057,4.246881,-2.818307,-6.317131,5.670674,-0.304564,-5.837918,7.864271,-2.779894,8.803551,-0.463442,-9.142202,-8.171648,6.736595,8.435008,1.170655,2.423959,2.146004,6.099262,-7.296059,-9.484706,9.748844,-3.948238,-8.785907,-8.295476,-8.632399,4.464861,8.162064,-3.079175,-7.469541,-1.678231,3.233614,-6.882282,-2.524987,-0.241645,6.311477,4.024055,-0.519869,8.684623,-9.667055,-4.212176,-1.033580,9.781034,9.948739,-8.238021,1.833979,0.633131,-6.886591,9.240338,3.608410,-9.693971,6.825137,-5.495934,8.002813,-2.544995,9.062564,4.789466,-0.020415,-0.100193,-8.704284,-1.822908,9.459883,-4.724888,2.176187,-0.398847,-1.194319,0.323287,7.012303,6.553457,3.243455,-6.539363,-8.629391,-0.338929,1.625863,-7.514603,9.005311,7.301447,-4.979215,8.264500,-3.195390,3.651080,-0.234515,-3.985448,-8.123722,-7.056423,5.105102,-5.837229,-8.407608,-3.105735,8.749486,-7.824601,2.207918,-9.529739,0.804070,-5.401870,5.028273,-4.135877,-9.802667,5.246994,-0.720271,5.775607,8.782852,6.739288,-6.308717,0.778510,-4.935384,1.399887,0.433031,-2.776802,3.916414,-6.439417,-5.565620,-3.766749,1.685461,4.033775,2.035037,3.242614,-1.195294,5.119738,2.051798,0.319156,-2.272853,9.658175,-5.084105,-6.538602,-2.877973,-5.180631,-3.656940,-7.345827,5.410017,1.982733,-2.137657,3.966933,-6.950376,5.242070,1.846709,5.339524,1.652606,1.878830,-1.259395,9.485363,1.630542,1.198333,-6.697232,5.961721,7.690664,3.597813,-3.436929,5.546713,9.479249,-0.284408,7.683933,-8.881980,-2.460997,-3.213636,9.871874,-6.463682,0.064652,-8.520853,8.301351,5.069287,9.772370,-3.330474,8.812841,-4.192116,-3.855934,1.977681,-0.426258,7.005002,-4.748447,-4.839085,0.996337,-4.876098,-3.257615,9.405858,-3.769309,6.823074,7.224599,2.136911,7.048400,3.853249,-4.359492,1.652619,-2.014911,-8.054364,-5.239466,-5.454347,3.700175,-9.674802,-3.666887,1.511675,0.894919,-5.408942,-9.877922,7.106065,4.567596,3.740549,-8.474334,-3.715030,9.465629,4.541210,5.466620,-6.775704,-1.250325,9.765795,-8.727823,9.800610,3.631104,-4.397547,-8.471615,9.162608,-4.590050,7.084675,9.523406,1.806124,-4.852951,-1.252515,-3.612502,-6.963183,8.034022,7.064223,-3.849870,4.754133,-6.140718,2.370981,-6.146045,-1.834603,-7.808384,3.653924,-5.270776,-3.248557,2.154755,-7.634042,0.858354,-2.671627,-4.842244,-6.843167,-0.684208,-8.601157,4.865944,5.284186,-3.640987,-5.211949,-5.592236,-8.505949,-9.989421,9.154276,8.263776,-6.446926,2.377918,-4.671368,-8.596468,-7.255515,-2.755955,-5.176165,5.062514,9.543881,8.035810,-9.543555,9.813529,-8.611624,5.493290,6.957092,-7.857654,-0.431846,-1.822123,4.945955,1.212100,-4.539404,1.479935,-6.511035,-2.071429,-5.140227,8.612159,0.605067,-1.083480,6.364637,-6.065243,-3.202184,-6.028654,-9.816416,3.758445,4.436259,0.306197,7.967519,-1.433661,9.356660,8.512707,7.722865,-1.531498,-4.796535,-9.369752,6.398520,-6.663265,6.922364,-7.655530,-8.619672,-1.515161,-4.140404,6.500376,-1.147106,7.060127,-4.796653,4.394513,-1.906245,2.701491,-6.550291,-6.393463,-7.909246,-4.190950,0.927928,7.375682,-8.102449,3.414808,9.605001,-9.033845,4.662559,-9.958546,6.221775,9.431834,4.501880,-3.631900,-1.516011,2.951114,9.684393,8.687099,-4.776011,-9.320484,-4.163343,-3.075444,-6.605927,6.433189,-4.898556,-2.222339,7.975970,9.577209,-9.359407,4.552559,-2.056863,5.494829,-8.939582,-3.968133,5.272164,1.186385,9.755575,3.948130,4.607329,7.983446,-2.695293,8.779650,2.917627,6.953473,-2.364464,-0.544244,7.573783,-6.021935,-6.936090,5.998178,-6.184560,3.612133,-0.897677,7.088419,1.655359,3.823524,-7.360696,-5.000593,-0.328731,8.801162,-1.066452,5.225997,0.691903,1.516443,7.232251,5.628820,6.998718,0.880402,-2.026643,7.675027,7.794702,3.203250,0.709831,2.484814,2.038667,-6.907192,-0.683498,-5.805593,-6.157362,-6.103535,-0.882459,1.833733,-3.004143,2.538494,1.777334,1.231388,8.810373,1.846146,-0.395796,-9.283262,0.026792,2.739349,6.901639,-9.330472,4.991517,1.412485,-7.906548,9.181069,4.204471,4.802825,-8.801832,3.096293,-9.292142,-4.036955,4.472435,-2.744451,-7.107626,-6.215534,8.684145,5.391785,2.743092,-7.918451,7.619995,0.327715,-5.672208,7.442131,4.560235,9.141891,0.496052,-0.480527,-4.286242,-6.809001,-6.921527,-0.858370,5.971781,-7.523275,-6.572912,-2.758211,-8.358493,-8.461384,1.614842,3.822519,-0.961795,-6.614226,0.687348,-7.655254,4.059132,-9.847039,-7.130358,-1.512482,-5.273277,-3.526761,2.014377,-0.975465,-6.672423,7.805599,-0.999007,-9.329806,8.879919,6.214218,2.449775,-0.903975,-8.282446,-0.888499,-8.746046,-4.022889,6.506902,4.193206,9.233650,7.098611,2.038095,8.508269,5.054124,-7.950156,-5.554819,3.240150,-2.551741,2.424875,-3.824835,8.782283,-5.676706,3.036830,-5.045121,-4.635677,-3.711675,-2.573068,-0.231053,-0.065392,3.059018,-2.710014,-0.072061,-5.922570,-7.021850,9.084300,8.906488,0.491316,-5.742888,-3.394778,3.601926,-8.681405,-1.639607,8.449065,8.415522,-7.738043,4.511861,-9.377224,0.103672,-9.212404,-2.061923,-3.650372,-2.536692,1.156725,0.649266,0.113860,8.675318,-1.607330,-7.065485,-6.125202,5.573758,1.401884,-3.149442,-0.223260,-4.166520,8.174949,-7.225063,-6.098533,2.819757,2.664261,0.720355,9.840710,6.276422,-4.234210,-6.530775,9.132030,-9.069079,-6.825688,-9.950497,-8.449271,6.598438,-6.700110,6.850259,-8.555638,-3.516506,9.927081,-5.490446,-6.149224,3.255557,-2.530309,-3.062256,6.327059,-4.740643,6.106526,8.677433,9.213949,8.743487,-9.577387,-8.448647,0.965562,5.109348,0.360033,5.128453,4.964000,-4.310476,-1.410667,7.949475,4.879201,3.397197,-9.016108,-9.181648,2.456201,4.822837,1.304947,-5.102044,4.845060,1.796941,-3.601816,-9.803535,0.776984,2.313802,7.220140,-5.291609,-5.418860,8.506993,-4.364156,-6.349875,4.545848,2.995379,0.649549,2.432734,2.107788,7.056375,-3.458119,5.787147,3.211351,6.783014,4.621842,3.679136,-9.156763,0.314503,7.324716,-6.482306,4.564598,1.290879,-8.914602,1.270686,8.887796,0.360151,9.970855,-7.372225,7.719301,5.447252,4.525008,-3.965088,-4.991105,-3.951894,1.896564,-7.920055,-2.627170,1.133384,9.287438,6.078703,-9.874136,-7.519921,2.261937,-6.154248,-5.099847,-7.395595,-5.582086,2.451255,-2.766627,-2.448405,4.496818,-8.377585,-3.788012,-0.751084,6.124602,3.800083,-6.830022,5.613655,-3.355221,-6.058463,7.793228,-4.729831,7.549842,-4.151346,2.943214,6.193416,-9.063555,-6.991172,7.490263,-5.100665,-9.334015,-0.328892,7.403850,0.164859,5.416057,-5.699963,-0.046580,1.134835,5.231384,0.950008,-7.468894,7.939659,-1.776563,-0.073396,-4.630029,-3.876178,-8.051695,5.421349,-9.532545,5.382051,-9.716884,4.219240,-6.573369,-4.348747,-5.083201,-7.100490,-5.454083,4.039046,2.397075,-5.856052,-5.057918,9.178491,-8.658288,-4.326924,8.165511,-8.109048,-2.990620,-2.647617,-5.664286,-1.157402,-8.257793,-7.655722,-5.430067,8.856483,5.258514,3.583091,4.205516,-1.693315,6.233620,-3.503224,-8.058373,-2.202151,-0.350355,4.503251,5.490014,-8.145051,-7.355933,-0.256895,-3.420303,-9.274050,4.537693,-1.470481,-7.297123,-7.103553,6.485131,-9.284849,-0.076404,-0.455105,5.834103,8.289814,8.702596,-6.223834,-8.876562,-2.379604,3.077666,-0.503325,-1.797537,3.362824,5.166614,-4.733407,-9.593429,-8.660734,6.157365,-2.068789,-3.457112,4.966768,6.783385,1.486100,-4.814414,-9.595710,5.411664,2.712984,1.539573,-2.275128,-4.255681,-7.036165,-2.957374,6.966858,9.347336,-0.003875,-5.304370,-7.735963,-2.384352,3.548840,7.334209,-6.319591,6.240554,1.812499,-1.173281,8.621412,-5.609660,9.646746,5.637917,1.197584,-9.791938,-2.387925,1.613118,-0.798382,7.296842,1.273181,-4.327579,5.223005,8.562939,-3.808824,-9.391937,-8.162242,1.598408,8.024990,6.554010,-5.450373,2.332804,-0.216985,3.152028,-4.219543,-5.200812,1.344008,4.697909,-5.915938,8.538600,-2.785058,4.037783,5.687746,-8.756778,6.656097,2.903375,-7.469640,-7.953008,4.179919,1.252845,-2.654692,2.939002,-5.592597,-7.693542,0.778172,-6.337427,-4.856170,6.659854,-7.071587,-0.258368,2.161175,4.704449,-3.872474,-5.822461,0.259356,7.826216,0.718534,-4.834018,8.666780,3.331376,-8.648521,-0.258230,2.092187,-2.934206,-8.709633,3.329054,-3.785214,4.209258,-7.820799,4.614886,2.174190,-7.745205,9.773116,0.130293,5.956595,-7.989652,-2.485966,-5.912798,-7.254666,7.391161,-1.881797,-5.612541,-7.291231,4.784125,5.474049,-6.044011,-3.424007,0.612764,1.834838,-0.722856,1.627627,8.920411,-2.072392,3.684866,-5.963775,3.414249,9.804313,-7.973801,9.869482,1.849269,-9.444195,0.459636,-6.501943,-7.774837,7.535296,-0.789631,5.429671,-6.582774,-8.921417,-0.056568,6.375690,3.315282,2.411743,-8.817755,0.387757,9.790006,2.951248,-0.305759,-4.499337,-6.628786,-5.239657,-4.392750,-0.821342,4.865202,2.600906,6.013988,5.716631,4.686356,-8.723275,3.705165,0.269025,4.050568,0.851677,-1.337268,1.263794,-9.755589,-5.820595,1.138043,7.308354,9.258184,7.796030,6.486110,7.298352,8.582589,-4.006299,8.889109,-4.667554,9.508918,2.380009,4.260243,-7.434956,-4.073305,-7.333708,9.120185,-0.912139,-9.143508,5.069450,-0.370687,5.829784,1.972202,-2.133522,5.530444,2.980062,-9.584694,1.321787,0.150653,2.924784,-6.251883,-4.882332,-1.251160,-0.892519,-6.827084,-1.654013,-6.502103,-6.183574,-7.166458,-7.315658,3.656141,-1.426797,-5.803911,0.356823,9.616637,0.238818,1.054861,7.565337,-3.212637,-7.834896,9.503671,9.070327,-6.564428,8.576288,-9.879487,3.596807,-2.260509,-0.290695,7.022346,-0.928909,-2.395695,-4.294717,7.339062,9.902671,2.526115,-7.442124,4.501400,-5.630812,-3.245018,-4.468276,8.483885,-6.762297,4.226264,8.305944,2.515636,0.561220,5.509258,3.739627,3.291714,5.590395,-7.090979,9.964166,2.626707,-8.754775,-8.417920,5.735438,-8.441065,8.310508,-5.814600,-6.479320,-0.859764,9.603749,6.877453,0.725161,-6.007526,6.859105,-4.599425,-5.723624,-2.859972,7.366762,2.842614,-3.231937,6.276090,3.901396,-6.646976,6.111097,0.029965,9.758377,1.737486,1.366555,2.603605,-0.877179,6.339970,7.106416,2.039550,-6.687156,5.269304,-5.352034,-1.045620,-8.361216,6.104474,-5.231027,9.302799,6.188113,-5.370923,-8.486963,8.677466,7.643541,0.296403,-6.302370,-8.390824,5.025899,-2.339543,-2.713357,1.996144,8.206590,-2.535569,9.141651,8.307299,-6.027051,3.679529,6.929837,8.271548,2.604844,-5.255043,-1.192446,6.453165,-6.912394,7.226626,-1.676088,-4.439780,-9.168963,0.482687,-8.631498,-0.925546,-0.037350,7.096785,5.721596,6.387508,3.794522,-0.462457,-4.965143,7.010464,6.323520,0.748422,0.176644,-4.441661,-4.132980,2.669730,-7.395406,8.218688,7.858359,8.246650,1.794637,5.559247,-0.475626,-8.528186,3.463032,2.027367,6.198966,7.968295,-4.689386,-6.371929,7.583195,7.981672,6.107770,8.938462,2.485997,1.193316,1.079561,1.728247,7.635087,-2.233409,7.728971,3.385946,-3.664832,9.536159,-0.113359,1.293003,4.685857,-2.383064,8.805440,8.042682,-4.586111,8.301550,-4.437494,5.091947,7.597031,-1.508105,6.510073,0.595542,-0.411701,5.816416,-3.068901,6.567958,1.844997,-1.918170,7.451596,-2.540314,7.552131,4.616504,-2.337178,3.111519,-9.683064,0.218473,5.095935,2.829511,8.524295,3.619034,1.970728,-3.440053,-1.608212,0.501325,-2.362196,4.260729,1.083328,1.465906,7.140025,5.404740,5.467656,9.874311,0.260005,-5.831168,2.767411,-4.279039,-8.410300,-8.675016,-3.759188,-3.449482,7.183171,-9.913537,-1.614250,-6.295840,-9.624482,7.738214,-5.681798,-8.844665,0.011657,6.054884,-4.290413,3.759769,-5.286142,6.135480,4.624506,2.842803,9.606766,-4.749335,-1.457311,1.090087,-8.943725,-0.226433,-2.680639,7.252321,4.639301,-3.778797,-3.351721,3.523462,2.518302,0.403464,-8.990328,4.852514,-1.322028,-5.374348,8.973464,4.523066,-6.038710,-0.471492,0.388165,0.260268,-9.357365,-8.304656,9.163664,7.314660,4.549091,-3.535549,-6.363279,4.677301,5.055680,9.092089,-7.278893,-7.443940,-3.020673,3.146254,-2.594100,-1.381215,-4.739137,-6.424004,-1.969046,3.350453,-0.557484,-0.477740,1.700181,-1.188827,8.859325,9.436069,-9.609100,-1.852872,2.778859,-1.354765,-8.048730,-4.039753,-3.291866,6.622490,5.785427,-3.364556,-3.702510,-3.981281,-5.514837,-1.300924,-8.786433,4.116401,9.709755,5.463272,3.796934,6.524922,-2.001254,4.318522,-0.141104,-6.822762,5.909081,6.548633,0.173655,1.544944,-9.110258,0.972999,-5.386943,-0.756240,-2.018013,-8.228829,8.234157,-8.134705,5.584661,-5.850866,-7.103992,4.824287,9.234842,0.907831,-3.441593,3.794955,-7.980983,6.814905,1.364571,-5.664957,5.380372,-3.538603,-0.407576,9.488038,-9.000099,0.556306,-7.267949,-8.353162,-4.098745,-7.347994,-3.374167,1.214035,-6.207850,4.175987,-3.779671,2.704708,-0.633293,8.367075,-5.738442,7.024751,-7.191013,8.285828,4.201546,9.823282,8.108832,2.697400,1.948146,-0.037200,5.475626,5.111532,-4.666072,-5.334512,-4.338362,5.162962,-5.054822,9.665150,-7.552516,5.616098,-7.718373,0.426545,-3.898834,-5.159036,7.052877,0.975985,-7.041960,3.864761,3.303284,-1.640907,4.381657,7.142806,-7.602477,-1.137595,8.350261,-1.666300,-3.809258,-1.247401,-5.623230,-5.610915,5.818870,1.842827,6.736840,-1.537559,-0.973241,-1.345479,2.420992,4.011181,7.507432,-8.657220,8.892378,-0.237708,-7.292117,-1.003804,3.865466,-8.848720,-8.178799,1.136499,-4.056363,-7.506445,-4.742757,-1.361818,-7.658687,0.873482,-3.109626,0.989770,-9.191513,7.462327,-6.603281,-9.373497,4.848603,-9.059935,-9.865486,9.582005,-3.258866,9.272249,-5.943383,-3.297596,7.832937,-7.406551,6.335929,2.936672,-9.134578,-6.902003,-0.559739,-5.225979,6.594388,0.582076,-4.116678,2.974812,-6.262160,3.128246,-7.164099,-1.022999,9.426471,7.709466,-3.774204,5.275417,-5.859451,6.717314,-0.678782,-6.150992,-5.716093,3.317212,-9.061649,0.187133,8.290097,0.150906,-8.186413,8.359244,3.731606,-4.877057,5.673733,-3.361607,7.121290,-0.233231,1.141805,-2.187824,-6.936874,9.135188,-8.061584,9.006643,9.945281,1.437967,-4.126389,-4.655812,-8.252162,2.495069,-8.863460,9.798902,1.979865,4.206333,-2.321499,1.025369,4.070992,5.597579,7.140608,0.766386,9.701156,1.519289,4.654181,2.232959,-0.891277,8.890899,-0.200535,2.216449,-8.105574,6.110042,-5.028918,9.360665,8.283598,0.359113,4.930107,9.821185,0.705341,3.439494,-3.152132,-5.552372,5.451050,9.704308,-5.610170,-6.568915,8.299576,3.891587,-5.666555,0.193762,1.343240,-3.284782,1.658254,-1.537370,-6.601662,9.626472,-8.686514,-1.942414,6.079333,-8.671723,-2.785000,-4.536356,-4.394343,6.884687,-1.912999,-7.943916,4.252481,5.432324,-3.602095,5.129658,4.644983,-2.523759,0.678521,6.386718,-8.506514,-0.036003,-0.289237,6.514319,1.675254,2.231597,8.155488,8.223456,2.486776,-4.930701,-9.727186,-4.686388,-7.512165,-2.659926,0.669284,2.710301,9.918902,-8.665915,-5.478398,-7.158970,-2.886840,-4.822225,3.583158,-0.543086,-6.630846,-4.013249,4.689061,-3.236464,8.862279,7.411429,-5.000672,8.531741,-5.098724,-3.814517,4.938878,-9.175837,-4.054137,4.438039,3.689990,-3.349493,-7.194937,-0.782853,-5.146648,-9.948948,2.570291,-5.379141,-6.605831,4.473781,-1.361782,0.085013,-6.239362,7.143773,-7.195609,-9.200762,7.816531,2.256136,-5.869986,4.427297,-1.605756,-5.924899,5.511432,-7.064821,-7.446011,-5.958859,4.279395,-0.140792,-3.457639,-5.513855,0.858019,-2.694360,-1.564746,-5.694866,3.945674,1.482409,0.099230,-0.605616,-8.049928,-8.784628,-5.616374,0.512123,8.744559,-7.468774,-9.819640,-0.034933,7.297758,-6.198078,3.763270,-3.505874,-5.961815,-0.051717,-8.651308,-3.508530,5.926746,7.406113,2.890701,7.977986,1.913693,-8.976378,3.324269,7.559766,1.891217,-8.077173,-5.036384,-8.410551,-9.718299,1.293450,3.652876,7.042346,-8.504663,-6.393642,-6.825974,-7.328048,6.541217,0.197018,-1.801986,-3.598156,-5.567491,-6.011992,1.977527,0.031371,0.287449,-6.761238,-3.624944,-6.463034,9.747023,-3.863024,-4.348960,1.206853,-6.334176,-2.146327,4.066441,-0.364058,7.880622,-2.634834,1.106311,-6.920934,-5.679244,6.671871,2.905204,-0.830386,1.092427,-9.045021,5.965756,4.372760,-4.082333,-4.521686,-4.138039,8.913635,1.952631,8.542089,9.135582,-1.823452,-1.532621,-7.684496,9.784308,-4.714969,3.789561,-0.302745,-0.813251,-2.096448,-4.694566,-2.716791,-9.183478,-9.241579,-5.563269,-5.229400,-1.927897,5.199687,3.079561,-2.817799,-4.219270,0.611557,8.087711,0.504641,4.063352,-0.233381,-3.347956,0.654519,-8.351997,3.438504,8.413117,-9.006782,-1.041120,-5.090982,9.635478,-4.340401,-0.290615,1.146024,3.623750,3.037631,5.007829,-9.484507,9.836667,-3.001004,-3.490379,-5.328133,5.408057,1.413843,-1.493490,3.406976,-8.530917,-7.989051,1.486865,-7.377838,-3.667507,-1.102107,3.779286,6.817266,-4.343310,-2.717726,6.552153,-4.416611,6.993605,-8.474434,4.679289,4.413397,3.770286,-0.750335,1.974888,-2.937551,4.909255,5.256476,0.472009,0.104962,-4.347376,-2.348693,-0.869257,9.917282,-1.934019,9.149599,1.199966,0.895712,-3.551831,-2.762953,-2.557309,5.602398,7.701092,-8.196350,-9.827526,-9.833619,2.302078,-3.894551,1.407979,2.362360,-5.367744,3.544162,8.707132,-2.143014,2.959482,-1.511594,7.768380,6.454649,-6.347719,-2.904424,8.916700,-3.411830,9.983329,-0.772361,-5.207871,1.884422,-7.143349,-8.051547,9.870040,-8.760925,9.684304,8.130557,-6.112434,9.515310,-1.597277,2.059682,-6.862798,7.278541,5.588660,-1.055570,3.170075,-8.489714,1.658236,-5.791572,0.360677,9.658252,5.981297,-0.855896,6.150148,-1.993671,2.219288,5.275310,8.138881,8.776867,-1.691664,-4.660225,7.337272,3.582866,-9.968688,-3.950067,-6.320681,-3.161386,-7.734441,-3.621248,0.940116,2.778726,-0.080580,-6.641794,5.802620,-5.473264,-6.947256,-4.872899,1.900528,-9.677933,5.269696,-2.758439,-2.323107,8.766386,0.572753,-5.953781,-2.204209,2.977039,-7.325007,9.465492,2.109893,6.478611,-6.428831,-8.429761,0.341672,3.364700,4.852795,3.142283,8.233765,-0.457434,-8.790214,1.094024,-6.089299,9.541214,-7.592215,6.029075,0.681876,8.027126,-1.373881,4.898337,-8.924600,-9.144093,-9.668257,6.157111,-6.634899,-4.550824,-9.407726,4.002536,-7.162989,9.266359,2.983787,8.187621,0.406537,2.745799,-5.790959,-6.393301,3.016702,-2.770052,-8.608815,6.515661,0.265153,5.224310,1.855639,-6.656106,2.548045,5.342272,-1.035904,5.010728,7.344879,2.358999,-0.513988,9.187441,-9.485777,5.979219,1.857345,5.217900,2.183364,2.517187,-8.031932,-4.474292,7.247734,-1.327315,-6.441488,-4.984085,-6.809222,4.006646,7.080769,1.596547,-3.608190,-3.465698,5.106244,-1.233628,-8.359348,-0.673614,-2.260550,-3.996015,-4.042763,7.687340,1.046391,-6.766177,-6.215461,-7.437224,-6.541802,1.806560,-5.094500,2.639897,-6.426838,-4.558611,4.534794,8.428404,-7.711470,2.740524,-1.336686,4.753461,-1.997382,-2.002299,-5.158273,-3.130938,-3.788882,0.771664,2.829650,-5.537897,8.592633,-3.069715,4.583222,-0.063964,-8.669241,-1.872968,-9.467468,-7.859167,-7.349700,2.469086,6.921271,7.692582,-8.512768,-0.200694,1.546617,8.293033,-6.796829,3.503978,2.031379,3.894510,-8.869290,-7.139141,3.370005,4.338444,5.190924,-7.956706,0.233389,-7.996062,7.269976,8.446004,-8.835383,0.872298,6.488749,-3.260174,-9.900352,-6.650939,-3.089965,9.881601,6.606089,0.176509,-2.192248,9.987909,4.196590,0.592877,-2.437198,-6.176145,1.369775,2.664813,-8.429345,4.565963,6.499047,4.203009,-1.400063,-3.069428,-6.661067,0.477928,3.295722,-4.941471,-8.642117,1.909686,-8.594836,9.391596,2.893315,-4.560690,8.069096,-9.737654,9.327707,-8.513476,5.885743,3.991210,-7.367988,-5.087134,0.084469,-9.130504,-2.941684,8.701652,5.383743,-7.116494,9.561368,2.712695,-2.824759,-0.291421,7.446604,6.389105,4.915781,-6.735685,2.959148,1.186326,3.098500,1.435161,-9.572124,8.043548,3.414324,-1.054141,-9.038677,0.220148,-2.393186,4.336133,-3.682698,-9.743268,5.902991,9.131995,9.377772,-1.845208,7.401554,-2.049621,-8.751573,7.047431,2.798283,-2.980449,9.548478,-5.874921,5.852924,-0.166036,-4.021731,2.562010,6.020302,9.022272,-5.943619,-3.834145,3.559923,6.649143,-4.667997,3.464155,-8.697345,7.023280,-1.107558,3.572205,6.844484,7.719046,-7.781932,-7.058846,-1.259399,-0.960560,9.036976,-7.514789,7.795675,-3.329347,-7.306708,1.680978,2.928740,9.335937,-2.932965,-6.868220,-7.895557,-7.372104,-1.162201,-8.960015,-1.629563,1.212754,3.972478,-0.332919,8.784161,-1.153418,-2.093219,1.842940,1.476685,5.428480,0.116772,7.947130,-1.044059,5.009374,-1.614170,5.809777,-1.041531,-9.742343,-5.201868,2.537365,4.738398,6.666188,9.372090,-0.047620,9.503825,0.573987,5.071459,-1.455270,-0.392944,-6.893310,-6.438933,5.332128,5.525380,-2.083958,-2.762802,6.987180,-7.915855,4.904343,9.323262,-0.699820,-6.969460,-8.976546,-1.632070,4.106481,-7.733457,-2.714672,1.243388,2.165638,3.661798,-9.011338,5.015440,-8.759809,-6.443421,-6.600416,8.822006,0.308279,-2.620355,2.360941,-5.823388,9.379721,-1.044235,3.816398,7.158593,-2.744202,3.635592,-9.040369,3.931270,-1.449893,-7.658054,6.430139,0.054930,5.190598,-5.671191,-2.251518,7.935873,7.666373,4.140786,2.964492,-3.099673,-2.770993,-9.040335,-7.597026,6.529695,-7.462120,0.356454,7.935256,-1.702805,-3.896001,3.291200,7.071013,-2.811482,-2.935952,-1.568165,-1.897936,-5.978655,-8.282969,2.293831,-3.285120,0.374077,5.351382,-9.541324,6.058099,9.341415,-1.775837,-9.044107,-3.413921,-9.047102,6.438101,-0.242638,2.185609,-8.728332,-4.997771,0.886847,-3.751993,3.141113,9.462330,-4.357988,-4.025818,6.642295,-3.475810,-3.546992,-4.543667,6.856825,0.071576,-8.835391,-4.858797,-8.219241,-2.132914,5.677248,-7.562617,-4.940168,9.563550,-2.173829,7.886661,-4.783135,-1.919951,-7.269098,6.103323,-2.324648,0.338734,-5.557448,6.332143,-8.278560,-2.147526,-4.460115,-9.455695,-2.228932,1.443967,9.790048,-4.937296,-4.064527,4.450312,-2.239325,-8.512614,4.134150,8.230328,-8.103662,0.837795,-3.823514,-5.366916,-0.855426,-8.887591,-6.514492,-4.398118,-4.418200,4.523274,1.391117,4.743716,-1.730116,-3.412938,5.092867,0.067175,-0.235672,0.748821,-1.702977,0.951834,-0.929759,3.618825,3.788959,0.122737,3.543302,-4.245038,3.374882,-1.236017,6.106785,3.538795,-8.397006,-6.920533,6.194364,0.962049,-1.527200,5.815512,-7.794398,2.084766,-0.111984,7.848141,-1.325007,-9.295494,0.082937,2.263547,2.987625,-9.952705,9.583865,-7.038574,-0.927339,-7.786172,-4.802746,7.172718,-4.279387,-2.927480,6.911077,-1.985257,6.494109,4.878514,2.767920,2.605454,-5.739915,-5.371912,3.199930,-4.947035,0.850076,-3.724289,-0.632434,-1.345106,-2.171258,5.796036,0.098612,7.840531,-1.430363,2.098156,7.709815,-5.235470,-0.118323,0.565004,9.944296,2.865208,-4.776729,-0.857736,-0.831044,-9.088046,0.867055,-5.702394,8.293055,0.282365,0.524208,-7.498714,-3.080294,-2.297405,3.899299,-9.899491,5.697521,6.865141,5.668812,6.331256,3.192575,-6.364281,4.310244,4.936282,9.293656,5.436178,1.826042,9.332083,-1.031599,8.839631,-1.469625,8.227836,8.763154,8.834968,-4.875079,-1.960729,-6.194858,6.493212,-3.196129,2.799099,0.898437,-2.097380,-0.116295,-8.260959,7.444511,-9.622699,6.516231,3.364734,1.842247,1.955077,6.189067,7.614758,4.723461,-6.620851,6.873830,6.109278,-6.580525,5.252030,6.783964,9.772741,9.510301,-0.381903,9.033055,-1.211248,1.182039,4.065694,1.738441,-6.296541,0.080579,-9.575114,-5.620463,2.534614,0.111804,8.349218,1.860042,1.490518,0.432250,8.804944,-0.810705,0.671191,-1.216909,-0.117454,6.099623,-5.492910,7.487521,5.195571,-0.121264,-2.124964,2.561653,-2.055045,0.159676,-0.455133,-4.703015,9.630747,8.167933,-5.788518,7.314756,3.574005,7.293641,5.870510,9.216248,6.039683,-3.811944,2.717902,2.392492,-0.731712,-0.288657,2.245984,-4.782542,3.964995,4.534281,0.364000,-4.106261,6.778479,-3.229908,0.286749,9.001630,9.979538,-7.156622,-3.455342,0.077903,-5.684695,5.196105,-7.111156,4.253590,4.096991,6.408626,9.492579,2.951390,9.684889,-1.298437,4.268232,0.992016,0.453180,-6.465973,-8.916070,-7.625240,9.647521,-6.617500,5.747444,5.424480,0.290446,-4.086264,-7.951740,5.608074,7.443894,-7.133612,-5.683194,-5.860363,-5.868885], dtype = "float32")#candidate|4338|(2560,)|const|float32
call_4337 = relay.TupleGetItem(func_2247_call(relay.reshape(const_4338.astype('float32'), [10, 16, 16])), 1)
call_4339 = relay.TupleGetItem(func_2249_call(relay.reshape(const_4338.astype('float32'), [10, 16, 16])), 1)
output = relay.Tuple([uop_4332,call_4337,const_4338,])
output2 = relay.Tuple([uop_4332,call_4339,const_4338,])
func_4352 = relay.Function([var_4331,], output)
mod['func_4352'] = func_4352
mod = relay.transform.InferType()(mod)
mutated_mod['func_4352'] = func_4352
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4353 = relay.var("var_4353", dtype = "float32", shape = (5, 8, 1))#candidate|4353|(5, 8, 1)|var|float32
func_4352_call = mutated_mod.get_global_var('func_4352')
call_4354 = func_4352_call(var_4353)
output = call_4354
func_4355 = relay.Function([var_4353], output)
mutated_mod['func_4355'] = func_4355
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4095_call = mod.get_global_var('func_4095')
func_4096_call = mutated_mod.get_global_var('func_4096')
call_4371 = relay.TupleGetItem(func_4095_call(), 0)
call_4372 = relay.TupleGetItem(func_4096_call(), 0)
func_4352_call = mod.get_global_var('func_4352')
func_4355_call = mutated_mod.get_global_var('func_4355')
const_4374 = relay.const([8.958381,6.560155,-8.351525,2.571818,-2.664736,-8.879921,-1.911310,3.724381,-9.644108,-8.346719,-4.727789,1.037899,7.596671,5.737551,3.021344,2.455620,-0.956704,3.381305,6.056450,-4.781999,-6.664293,-4.424777,-9.143286,8.999008,-4.644000,-9.362718,7.589289,3.987194,-1.330483,5.834816,1.893760,-7.892039,6.919492,-5.191997,-1.598180,8.645317,2.350371,-4.808161,9.912098,-8.869434], dtype = "float32")#candidate|4374|(40,)|const|float32
call_4373 = relay.TupleGetItem(func_4352_call(relay.reshape(const_4374.astype('float32'), [5, 8, 1])), 2)
call_4375 = relay.TupleGetItem(func_4355_call(relay.reshape(const_4374.astype('float32'), [5, 8, 1])), 2)
uop_4376 = relay.log10(call_4373.astype('float64')) # shape=(2560,)
uop_4378 = relay.log10(call_4375.astype('float64')) # shape=(2560,)
output = relay.Tuple([call_4371,const_4374,uop_4376,])
output2 = relay.Tuple([call_4372,const_4374,uop_4378,])
func_4401 = relay.Function([], output)
mod['func_4401'] = func_4401
mod = relay.transform.InferType()(mod)
output = func_4401()
func_4402 = relay.Function([], output)
mutated_mod['func_4402'] = func_4402
mutated_mod = relay.transform.InferType()(mutated_mod)
const_4467 = relay.const([[[-5.074478,-0.048973,1.843784,-9.442189,7.919446,-7.439088,2.678471],[-8.827755,-3.289674,-5.824938,9.855361,5.849613,-8.572641,-2.915013],[2.081935,-1.625203,4.684102,8.205891,-6.596685,-1.365720,-0.892622],[2.677046,1.336219,7.957497,7.158690,-2.102295,-5.350973,8.851442],[2.411700,-5.023878,5.226908,-5.257692,9.352358,0.441287,4.194405],[6.003806,-8.807007,-7.541548,1.737648,-7.313075,1.699853,1.003509],[-4.117319,-6.591362,5.535398,-2.069122,5.538224,7.375594,0.401694],[-9.651219,7.622482,-3.565238,5.499100,5.374026,-1.373498,2.166452]]], dtype = "float32")#candidate|4467|(1, 8, 7)|const|float32
uop_4468 = relay.sigmoid(const_4467.astype('float32')) # shape=(1, 8, 7)
output = relay.Tuple([uop_4468,])
output2 = relay.Tuple([uop_4468,])
func_4473 = relay.Function([], output)
mod['func_4473'] = func_4473
mod = relay.transform.InferType()(mod)
output = func_4473()
func_4474 = relay.Function([], output)
mutated_mod['func_4474'] = func_4474
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4401_call = mod.get_global_var('func_4401')
func_4402_call = mutated_mod.get_global_var('func_4402')
call_4490 = relay.TupleGetItem(func_4401_call(), 2)
call_4491 = relay.TupleGetItem(func_4402_call(), 2)
output = relay.Tuple([call_4490,])
output2 = relay.Tuple([call_4491,])
func_4496 = relay.Function([], output)
mod['func_4496'] = func_4496
mod = relay.transform.InferType()(mod)
output = func_4496()
func_4497 = relay.Function([], output)
mutated_mod['func_4497'] = func_4497
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4095_call = mod.get_global_var('func_4095')
func_4096_call = mutated_mod.get_global_var('func_4096')
call_4498 = relay.TupleGetItem(func_4095_call(), 0)
call_4499 = relay.TupleGetItem(func_4096_call(), 0)
var_4507 = relay.var("var_4507", dtype = "float32", shape = (9, 9, 7))#candidate|4507|(9, 9, 7)|var|float32
bop_4508 = relay.bitwise_and(call_4498.astype('int64'), relay.reshape(var_4507.astype('int64'), relay.shape_of(call_4498))) # shape=(9, 9, 7)
bop_4511 = relay.bitwise_and(call_4499.astype('int64'), relay.reshape(var_4507.astype('int64'), relay.shape_of(call_4499))) # shape=(9, 9, 7)
func_4316_call = mod.get_global_var('func_4316')
func_4319_call = mutated_mod.get_global_var('func_4319')
const_4517 = relay.const([[-8.025555,-7.185056,-5.491184,-2.130921,-5.826715,-2.808281,-0.764721,-7.592644,-0.138402,-5.149634,7.925032,8.469545,7.180469,-8.659557,-3.331646,9.271718,-8.455872,-2.865214,-3.594431,-3.192079,5.542103,2.194891,2.824817,-1.910536,9.302889,-8.030962,-9.439880,-4.147213,-1.115691,4.973412],[-6.658467,-6.614236,-5.420352,5.804694,5.621691,4.946049,2.469549,-3.463535,5.273896,-5.738521,1.396929,5.466200,-6.132252,-1.457267,-0.952619,-9.541766,-3.375069,8.827351,5.003154,-5.829131,-4.771994,-8.248096,-8.306291,-6.566586,4.164752,-6.033464,6.277495,-9.011940,4.052533,5.999319],[9.164607,8.478779,-8.671162,-2.892175,8.315112,-8.771301,5.921935,1.829301,-2.889374,1.356755,-3.881601,-5.633225,4.433271,-5.454820,2.660554,-2.746501,1.490351,2.949354,-6.110187,2.082278,-4.002376,3.718316,-6.265429,8.220772,-5.232815,-5.436159,4.442294,-6.930739,-4.453078,4.472903],[-7.020914,-0.555491,4.264000,6.725653,0.957553,-6.457900,8.334648,6.572405,-7.868321,-4.197428,4.527574,-2.708387,9.023498,3.294576,2.505448,-6.758721,-3.513569,6.087571,-0.132248,3.176914,1.960940,7.326591,1.803246,4.322211,5.402258,-7.208690,-1.783807,3.335698,-0.877315,7.879982],[-7.120283,0.239752,-3.931855,-3.430510,-3.130703,3.399077,5.236292,-5.661495,5.869101,0.377564,0.762497,-3.031392,-4.672151,0.587772,-6.686920,-5.121671,-1.838630,-4.708079,-1.042486,1.481902,-6.003018,-7.433440,0.096084,5.766602,-7.079983,-8.874965,-7.414994,-9.790660,-7.956471,2.324202],[-1.619056,9.011101,-5.774092,-3.393742,4.593036,6.466152,-1.882536,4.767418,-5.462572,-2.853799,2.454717,-8.998574,6.017426,-8.941436,-2.223498,1.120847,2.308498,-5.129444,-9.310134,-6.330517,-4.653170,5.060273,-7.236422,5.262773,1.433985,6.886291,-2.003716,4.937582,-0.216467,9.899204]], dtype = "float32")#candidate|4517|(6, 30)|const|float32
const_4518 = relay.const([-0.810289,-1.119313,3.908980,-6.335318,-3.563563,-5.649604,-5.389345,2.205134,3.749567,4.180081,-1.305118,-6.510041,-2.514421,-8.696956,-8.410120,1.962937,7.721660,0.758201,-3.404984,-0.756777,6.493455,4.388545,-7.242094,-3.611942,-7.480290,4.920479,-7.569552,9.941956,-1.530295,-7.618081,-4.691703,5.709208,-8.606983,-8.839412,-6.464644,7.236331,4.546541,3.946367,-4.739176,-6.004709,0.402027,5.519349,2.799314,5.163553,-5.715334,-0.807937,7.028452,-8.791356,-0.789850,-2.532711,-9.706376,-2.997557,5.498034,8.617807,9.372951,-2.222476,-2.583381,-6.246986,-7.910878,8.710144], dtype = "float32")#candidate|4518|(60,)|const|float32
call_4516 = relay.TupleGetItem(func_4316_call(relay.reshape(const_4517.astype('float32'), [180,]), relay.reshape(const_4518.astype('float32'), [60,]), ), 3)
call_4519 = relay.TupleGetItem(func_4319_call(relay.reshape(const_4517.astype('float32'), [180,]), relay.reshape(const_4518.astype('float32'), [60,]), ), 3)
output = relay.Tuple([bop_4508,call_4516,const_4517,const_4518,])
output2 = relay.Tuple([bop_4511,call_4519,const_4517,const_4518,])
func_4520 = relay.Function([var_4507,], output)
mod['func_4520'] = func_4520
mod = relay.transform.InferType()(mod)
var_4521 = relay.var("var_4521", dtype = "float32", shape = (9, 9, 7))#candidate|4521|(9, 9, 7)|var|float32
output = func_4520(var_4521)
func_4522 = relay.Function([var_4521], output)
mutated_mod['func_4522'] = func_4522
mutated_mod = relay.transform.InferType()(mutated_mod)
const_4529 = relay.const([[[1.371843,6.787428,-0.895237,-5.714058],[3.157990,-2.416439,1.481512,-7.523152],[-5.535662,0.556772,-2.980787,1.046459],[-8.638944,2.244497,5.494600,3.729648],[2.147723,8.070645,4.603833,9.888112],[9.048123,9.757120,-9.596594,4.752668],[-8.525820,-1.253214,-2.678361,-2.758567],[-0.016274,-6.738567,-4.965289,-2.672237],[-1.748713,-2.752758,5.640616,-3.831143],[0.466429,-6.035782,0.153807,1.061006],[-0.914563,7.285375,0.109489,8.184787],[9.445304,2.385004,-5.195734,-3.508492],[8.645128,-4.130075,-5.549340,1.177236],[-2.941605,-2.171024,4.050766,5.879026]],[[0.271148,9.236648,-0.023987,-2.234567],[-3.445810,-0.975547,6.847172,0.030606],[8.231202,-6.925011,1.778943,6.107267],[1.405569,4.400889,7.942545,-9.529878],[1.050027,-2.321411,9.178393,-8.132092],[-7.431507,-9.237470,6.870310,0.955088],[8.998037,-0.166189,5.075500,2.911260],[3.520545,-3.177295,0.142935,-6.357154],[-7.067532,2.709533,6.034410,5.696402],[-1.495523,-2.217804,0.563892,-7.583213],[7.762796,3.704410,-1.586201,4.976949],[-2.299713,1.592150,-1.493486,-7.745627],[-0.893801,-8.121124,3.833077,7.113941],[9.321529,9.178426,1.140691,-5.417597]],[[0.309185,-3.246891,-2.974534,6.109312],[0.358571,-5.058837,-3.011939,-3.260830],[-6.883356,1.753197,-5.233171,0.353481],[-3.054221,-9.857793,-2.971637,-3.586336],[0.437346,-4.374060,-5.521676,-4.421557],[-8.272151,0.800018,6.988148,4.767102],[0.432116,-4.890852,3.530079,1.204217],[-2.809133,-3.192578,-4.690326,-0.537012],[3.609427,9.300563,9.146759,1.542509],[5.263748,-4.944996,-9.188435,-5.870011],[-2.904220,2.593069,1.929080,4.443386],[-1.418479,-9.198924,-8.770158,-6.443963],[4.721944,4.685085,2.701886,-2.634451],[-2.872206,-5.120190,-7.902135,-2.972735]],[[2.851775,3.824347,-1.185013,-0.755046],[-7.158937,-2.758026,-7.296277,-3.502078],[-5.990702,-8.919331,-3.707302,-7.003250],[2.373324,6.721823,-6.184643,2.703169],[2.813659,-0.655148,7.662397,-1.446411],[0.447147,3.493894,-8.368873,-2.995687],[3.900232,-5.340295,6.925642,-0.007561],[5.823335,6.977389,5.873625,6.314458],[1.181885,2.354769,8.126487,-8.233041],[-6.763481,-2.451043,3.172663,7.755624],[4.397008,-2.491118,4.731244,6.923394],[-2.958103,-7.648772,3.048702,-9.422912],[0.068180,-9.656907,4.384035,8.073190],[-2.049853,-3.473146,-4.133127,-6.985819]],[[-3.897873,7.821478,-7.829576,-9.601021],[4.776125,-3.102412,3.352882,8.041257],[-6.935934,7.389936,-5.010989,3.769011],[-9.235020,-8.895520,-2.477157,-1.147105],[9.388389,-6.826247,-8.520278,-7.524889],[8.870600,7.424275,5.233012,0.961075],[-8.715432,0.581023,1.983290,4.116830],[2.345196,2.949912,-6.095121,-1.153521],[7.815367,4.416250,7.815075,5.945466],[3.226942,5.257329,2.601206,-4.215096],[1.938642,-8.634601,3.807654,-3.486047],[6.737001,-6.473183,7.733623,4.036964],[5.984996,2.020905,-2.437563,9.943392],[0.371485,-9.046378,8.120611,-2.283095]]], dtype = "float64")#candidate|4529|(5, 14, 4)|const|float64
uop_4530 = relay.sin(const_4529.astype('float64')) # shape=(5, 14, 4)
func_1061_call = mod.get_global_var('func_1061')
func_1064_call = mutated_mod.get_global_var('func_1064')
const_4546 = relay.const([[1.532149],[-7.300575],[7.148828],[-5.476915],[6.356868],[-0.500776],[-2.445323],[2.652882],[5.381560],[8.098083],[0.887535],[-3.945627],[-1.854989],[0.438439],[-4.477683],[1.302536],[2.085681],[8.024149],[9.654067],[-2.274377],[2.118192],[2.389557],[-6.739021],[-9.943442],[-8.428214],[9.106656],[2.312180],[-4.394742],[8.689409],[-9.638116],[0.138186],[8.631995]], dtype = "float64")#candidate|4546|(32, 1)|const|float64
call_4545 = relay.TupleGetItem(func_1061_call(relay.reshape(const_4546.astype('float64'), [4, 8])), 1)
call_4547 = relay.TupleGetItem(func_1064_call(relay.reshape(const_4546.astype('float64'), [4, 8])), 1)
uop_4548 = relay.sqrt(uop_4530.astype('float32')) # shape=(5, 14, 4)
output = relay.Tuple([call_4545,const_4546,uop_4548,])
output2 = relay.Tuple([call_4547,const_4546,uop_4548,])
func_4553 = relay.Function([], output)
mod['func_4553'] = func_4553
mod = relay.transform.InferType()(mod)
mutated_mod['func_4553'] = func_4553
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4553_call = mutated_mod.get_global_var('func_4553')
call_4554 = func_4553_call()
output = call_4554
func_4555 = relay.Function([], output)
mutated_mod['func_4555'] = func_4555
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4473_call = mod.get_global_var('func_4473')
func_4474_call = mutated_mod.get_global_var('func_4474')
call_4566 = relay.TupleGetItem(func_4473_call(), 0)
call_4567 = relay.TupleGetItem(func_4474_call(), 0)
func_1061_call = mod.get_global_var('func_1061')
func_1064_call = mutated_mod.get_global_var('func_1064')
var_4578 = relay.var("var_4578", dtype = "float64", shape = (32,))#candidate|4578|(32,)|var|float64
call_4577 = relay.TupleGetItem(func_1061_call(relay.reshape(var_4578.astype('float64'), [4, 8])), 0)
call_4579 = relay.TupleGetItem(func_1064_call(relay.reshape(var_4578.astype('float64'), [4, 8])), 0)
uop_4581 = relay.exp(call_4566.astype('float64')) # shape=(1, 8, 7)
uop_4583 = relay.exp(call_4567.astype('float64')) # shape=(1, 8, 7)
output = relay.Tuple([call_4577,var_4578,uop_4581,])
output2 = relay.Tuple([call_4579,var_4578,uop_4583,])
func_4584 = relay.Function([var_4578,], output)
mod['func_4584'] = func_4584
mod = relay.transform.InferType()(mod)
var_4585 = relay.var("var_4585", dtype = "float64", shape = (32,))#candidate|4585|(32,)|var|float64
output = func_4584(var_4585)
func_4586 = relay.Function([var_4585], output)
mutated_mod['func_4586'] = func_4586
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4553_call = mod.get_global_var('func_4553')
func_4555_call = mutated_mod.get_global_var('func_4555')
call_4590 = relay.TupleGetItem(func_4553_call(), 1)
call_4591 = relay.TupleGetItem(func_4555_call(), 1)
uop_4593 = relay.log2(call_4590.astype('float64')) # shape=(32, 1)
uop_4595 = relay.log2(call_4591.astype('float64')) # shape=(32, 1)
var_4600 = relay.var("var_4600", dtype = "float64", shape = (32, 5))#candidate|4600|(32, 5)|var|float64
bop_4601 = relay.left_shift(uop_4593.astype('uint16'), var_4600.astype('uint16')) # shape=(32, 5)
bop_4604 = relay.left_shift(uop_4595.astype('uint16'), var_4600.astype('uint16')) # shape=(32, 5)
bop_4606 = relay.power(bop_4601.astype('float32'), uop_4593.astype('float32')) # shape=(32, 5)
bop_4609 = relay.power(bop_4604.astype('float32'), uop_4595.astype('float32')) # shape=(32, 5)
output = bop_4606
output2 = bop_4609
func_4611 = relay.Function([var_4600,], output)
mod['func_4611'] = func_4611
mod = relay.transform.InferType()(mod)
var_4612 = relay.var("var_4612", dtype = "float64", shape = (32, 5))#candidate|4612|(32, 5)|var|float64
output = func_4611(var_4612)
func_4613 = relay.Function([var_4612], output)
mutated_mod['func_4613'] = func_4613
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4401_call = mod.get_global_var('func_4401')
func_4402_call = mutated_mod.get_global_var('func_4402')
call_4685 = relay.TupleGetItem(func_4401_call(), 0)
call_4686 = relay.TupleGetItem(func_4402_call(), 0)
func_4155_call = mod.get_global_var('func_4155')
func_4159_call = mutated_mod.get_global_var('func_4159')
const_4688 = relay.const(8, dtype = "uint64")#candidate|4688|()|const|uint64
var_4689 = relay.var("var_4689", dtype = "uint64", shape = (1, 264))#candidate|4689|(1, 264)|var|uint64
call_4687 = relay.TupleGetItem(func_4155_call(relay.reshape(const_4688.astype('uint64'), []), relay.reshape(var_4689.astype('uint64'), [12, 11, 2]), ), 1)
call_4690 = relay.TupleGetItem(func_4159_call(relay.reshape(const_4688.astype('uint64'), []), relay.reshape(var_4689.astype('uint64'), [12, 11, 2]), ), 1)
output = relay.Tuple([call_4685,call_4687,const_4688,var_4689,])
output2 = relay.Tuple([call_4686,call_4690,const_4688,var_4689,])
func_4708 = relay.Function([var_4689,], output)
mod['func_4708'] = func_4708
mod = relay.transform.InferType()(mod)
var_4709 = relay.var("var_4709", dtype = "uint64", shape = (1, 264))#candidate|4709|(1, 264)|var|uint64
output = func_4708(var_4709)
func_4710 = relay.Function([var_4709], output)
mutated_mod['func_4710'] = func_4710
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4553_call = mod.get_global_var('func_4553')
func_4555_call = mutated_mod.get_global_var('func_4555')
call_4712 = relay.TupleGetItem(func_4553_call(), 0)
call_4713 = relay.TupleGetItem(func_4555_call(), 0)
output = call_4712
output2 = call_4713
func_4714 = relay.Function([], output)
mod['func_4714'] = func_4714
mod = relay.transform.InferType()(mod)
output = func_4714()
func_4715 = relay.Function([], output)
mutated_mod['func_4715'] = func_4715
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4733 = relay.var("var_4733", dtype = "int16", shape = (14, 2, 11))#candidate|4733|(14, 2, 11)|var|int16
var_4734 = relay.var("var_4734", dtype = "int16", shape = (14, 2, 11))#candidate|4734|(14, 2, 11)|var|int16
bop_4735 = relay.right_shift(var_4733.astype('int16'), relay.reshape(var_4734.astype('int16'), relay.shape_of(var_4733))) # shape=(14, 2, 11)
output = relay.Tuple([bop_4735,])
output2 = relay.Tuple([bop_4735,])
func_4740 = relay.Function([var_4733,var_4734,], output)
mod['func_4740'] = func_4740
mod = relay.transform.InferType()(mod)
var_4741 = relay.var("var_4741", dtype = "int16", shape = (14, 2, 11))#candidate|4741|(14, 2, 11)|var|int16
var_4742 = relay.var("var_4742", dtype = "int16", shape = (14, 2, 11))#candidate|4742|(14, 2, 11)|var|int16
output = func_4740(var_4741,var_4742,)
func_4743 = relay.Function([var_4741,var_4742,], output)
mutated_mod['func_4743'] = func_4743
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4714_call = mod.get_global_var('func_4714')
func_4715_call = mutated_mod.get_global_var('func_4715')
call_4797 = func_4714_call()
call_4798 = func_4714_call()
func_4496_call = mod.get_global_var('func_4496')
func_4497_call = mutated_mod.get_global_var('func_4497')
call_4808 = relay.TupleGetItem(func_4496_call(), 0)
call_4809 = relay.TupleGetItem(func_4497_call(), 0)
func_4740_call = mod.get_global_var('func_4740')
func_4743_call = mutated_mod.get_global_var('func_4743')
const_4825 = relay.const([1,-6,-2,-6,8,-6,1,8,-3,-4,9,-10,2,4,-7,1,-10,10,8,6,10,-6,3,8,-10,-1,-4,1,8,-4,-2,-4,3,-4,-2,7,-4,2,9,-5,2,2,-6,4,8,-10,2,-3,-10,6,-9,3,-7,3,6,-7,-4,4,9,6,5,-10,-2,4,1,-3,4,-4,-2,7,4,4,-10,-8,8,10,9,-4,4,2,-7,-6,2,2,-8,2,2,10,6,-2,-3,2,6,-3,-2,-6,2,2,3,-8,2,2,5,5,-1,10,3,8,-5,-10,7,-10,9,5,-7,-2,2,-4,-8,-2,9,-5,-1,-2,5,5,-9,3,6,-7,-10,3,-2,10,-5,-9,4,7,-6,-4,-2,-2,-6,8,-10,7,5,-3,7,7,6,8,-1,-5,-7,-7,-10,1,-4,9,7,6,-6,-1,10,8,-5,6,-5,-2,-2,3,-7,-7,5,-5,-2,6,-9,2,4,-7,-10,4,4,8,-2,5,7,-10,-7,-7,-5,-6,2,4,-2,7,-2,7,-7,-3,8,-10,-1,9,5,-7,-3,-5,-3,-2,-7,-8,10,-8,-2,7,8,-7,8,-7,4,-3,8,-1,-6,9,2,6,-3,-10,-5,5,4,4,-7,-7,6,-9,10,9,-5,-1,4,-10,4,-1,6,-4,-7,-6,-1,7,-3,-4,-6,-10,1,-9,-9,-3,-8,-1,10,7,-4,-2,-6,-4,3,3,-3,2,4,-1,2,-5,-10,-5,4,8,6,4,-8,2,-6,-3,-8,5,8,-3,1,1,6,2,1,-9,9,-1,-2,8,-8,9,8,7,9,6], dtype = "int16")#candidate|4825|(308,)|const|int16
call_4824 = relay.TupleGetItem(func_4740_call(relay.reshape(const_4825.astype('int16'), [14, 2, 11]), relay.reshape(const_4825.astype('int16'), [14, 2, 11]), ), 0)
call_4826 = relay.TupleGetItem(func_4743_call(relay.reshape(const_4825.astype('int16'), [14, 2, 11]), relay.reshape(const_4825.astype('int16'), [14, 2, 11]), ), 0)
output = relay.Tuple([call_4797,call_4808,call_4824,const_4825,])
output2 = relay.Tuple([call_4798,call_4809,call_4826,const_4825,])
func_4827 = relay.Function([], output)
mod['func_4827'] = func_4827
mod = relay.transform.InferType()(mod)
mutated_mod['func_4827'] = func_4827
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4827_call = mutated_mod.get_global_var('func_4827')
call_4828 = func_4827_call()
output = call_4828
func_4829 = relay.Function([], output)
mutated_mod['func_4829'] = func_4829
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4496_call = mod.get_global_var('func_4496')
func_4497_call = mutated_mod.get_global_var('func_4497')
call_4840 = relay.TupleGetItem(func_4496_call(), 0)
call_4841 = relay.TupleGetItem(func_4497_call(), 0)
const_4845 = relay.const([-8.647000,-9.378111,9.292440,2.191503,-9.268427,-7.244077,-5.663126,-6.430286,6.153028,2.829481,-5.031330,-0.340884,3.369598,-3.793345,1.466930,8.840589,-2.199470,3.371611,-7.465665,7.505922,-3.683428,3.201231,3.959021,0.595902,-4.910263,5.027495,-8.004503,9.350480,-7.109234,-6.545377,1.956130,3.576920,-1.677694,4.903021,-6.434043,6.901129,-2.133655,8.528623,-2.491522,8.677493,-4.789432,3.548785,-8.166480,-0.700901,-6.570261,-0.481778,-3.418691,8.672223,-2.961674,9.011726,7.609689,-3.041783,-6.468434,-4.118643,-3.801540,1.380561,-6.650064,2.383664,6.086852,5.999584,4.604625,-3.915899,-5.187341,-2.600373,-2.473512,2.452831,-6.201548,-2.767556,5.053494,6.963241,-9.953628,-4.934080,6.094517,2.702607,0.935873,5.567933,7.421363,-1.210441,8.154075,-7.147484,4.157376,-7.226729,0.912044,-7.111649,4.001488,-7.275975,-7.637701,-1.413631,5.414484,-8.246948,4.973694,3.070070,2.393016,-3.534174,-8.082239,1.694103,-7.198501,0.735384,-5.767956,-5.824395,6.244237,1.894539,-9.948881,9.459684,6.134720,-5.468104,0.789881,8.962779,-9.217292,-8.632927,7.757381,-7.770851,2.991112,3.964725,2.588156,6.346187,2.555958,-0.796357,-9.987288,4.926457,5.668845,-0.120419,9.778051,-9.737172,4.902095,-6.310026,-2.240482,-5.034714,-7.989123,4.859019,-2.136756,-0.292571,1.225168,8.982374,-4.214427,8.162233,-5.688083,1.463915,-8.361423,2.951340,-0.057217,-7.411433,-5.043444,-3.899656,-1.216404,-2.245010,-5.698577,-2.611189,1.807457,5.807011,-9.199476,-2.100604,0.428269,-2.565120,0.887086,2.246355,2.903776,-5.442227,8.048392,-9.879223,-5.952927,-8.854873,1.781662,-5.021287,-2.387694,2.932946,-3.381190,3.405633,3.235206,0.876693,-7.464610,-8.172267,-6.379281,0.341900,7.594890,-4.309961,3.010299,-4.478821,1.822192,9.262826,-1.391614,7.158534,-8.084551,-7.229622,-3.592435,-0.698103,4.217828,6.855012,2.655723,6.006765,-5.356965,-2.450260,-5.832164,5.190659,7.855459,9.912031,3.072166,1.565256,5.183677,7.756548,2.574167,-8.292683,-4.157173,9.621063,1.313455,-6.251358,-7.680059,7.509880,9.953204,-4.730365,5.963571,-3.041573,-4.908812,9.124361,-9.238020,-0.187204,-4.460402,-7.534884,-0.132536,8.325337,-2.833215,2.635948,-7.373137,1.730070,1.135107,9.250090,9.848224,0.861310,2.786162,8.805336,4.848547,0.501707,8.183724,-7.641793,5.857091,9.303631,0.886365,-3.869698,8.289380,1.997751,-2.771006,2.398803,6.991777,8.139734,7.457189,-6.318716,-4.697695,9.599371,6.172732,9.908593,2.195210,-0.667309,-1.608806,-9.031146,-2.571323,-2.436210,-2.652857,-7.759008,1.811874,-3.231651,-2.843536,8.447638,2.083033,-2.350276,1.530974,6.089162,-4.038958,2.287749,3.346939,-6.651626,-7.875407,-8.549020,9.181814,-0.677819,-6.955393,4.691604,1.125931,-9.094312,6.596570,2.238142,-6.982548,7.222921,-1.546978,1.661417,3.722241,8.849896,7.283013,-1.392769,-7.627684,4.045848,-5.952257,3.835039,4.149460,-2.300018,7.566835,9.742894,-8.397267,-9.573047,-2.349730,-8.864414,-6.650883,2.767460,0.607316,-0.999363,-4.118500,8.209385,-8.616402,-5.651966,-2.677171,4.127299,-7.286872,2.650489,5.385620,3.625365,-8.311411,8.789059,7.435107,-6.801506,5.668104,-1.416312,-9.977036,-8.627122,-3.064307,-5.065810,2.650749,-5.426848,0.369028,-9.398728,-1.854794,-4.898174,-0.944721,4.494175,-7.161281,-3.431180,-5.600424,2.581229,-0.462650,5.016231,-8.417329,7.431914,2.368326,7.610289,-8.134145,-8.490117,2.237173,3.536132,-6.908358,0.263146,-0.704849,-1.494148,-1.830655,1.451785,8.897088,9.657441,-2.467617,4.113826,2.426782,-2.289286,3.011082,-1.531733,9.425337,-9.878762,-9.223551,-0.800064,6.761616,9.733562,-4.008661,0.732933,3.294299,1.977434,3.608683,-2.459196,5.101817,-1.909715,4.014226,4.391208,-5.893358,-2.534019,0.166247,4.233752,-4.628850,-9.111957,1.858095,-8.523778,7.148327,1.474267,8.935620,3.717602,-9.883414,6.837632,-3.889271,0.896893,-3.083480,1.264060,-9.079274,-9.695277,9.709263,-6.619402,-0.584753,4.956800,-1.789085,9.355919,-0.255848,7.657623,-2.154499,-2.720078,2.574241,-2.510340,-6.534158,-7.015903,-5.017145,0.470950,6.215834,1.741032,-3.221400,5.167395,2.877381,-2.604522,1.863873,-3.927182,-8.648313,-4.136817,-5.505109,3.085596,-5.195212,-2.395465,6.160992,-7.053146,1.477004,-4.843439,1.028616,-8.564854,-9.211280,-3.673942,-2.540844,-2.885080,-7.161449,2.424440,4.338450,7.783462,-7.534286,-2.982715,3.554070,-6.521396,-0.776091,-1.637395,3.254638,-9.555036,-5.515267,9.671264,-4.449681,4.723635,7.155323,5.597168,-0.488879,-2.627163,-0.327564,-2.231217,-9.355212,-0.610518,5.294058,-4.989029,-4.713320,4.222103,9.373992,2.521110,-1.965303,-0.473582,9.131312,-7.166153,-4.089954,-7.248749,5.033851,-1.845070,-7.822184,2.114501,-1.101191,-5.358525,-2.714869,9.643243,-2.747617,6.477323,0.349661,-6.743088,-7.686430,-3.324791,-0.009145,9.263749,9.596106,8.984587,8.897308,-5.396613,-3.575099,-7.888702,-8.439374,-8.050452,-7.649527,2.896629,-3.346979,7.271852,-8.983459,4.449396,-1.415612,-7.800827,6.121555,1.412469,-7.752359,-2.993015,-8.088462,-0.104363,-6.506475,-9.256824,-2.208700,-3.139596,2.813029,4.691426,-2.360198,-7.479053,-0.220018,-8.713486,-4.971252,-4.607217,2.329508,3.661888,9.557367,-0.656359,9.216269,-9.552081,-6.461576,-0.181942,-7.562183,5.715114,-8.049507,-2.251753,2.550294,-5.304051,-0.827542,-8.006080,1.547048,-6.218224,7.321780,-5.111655,6.999028,9.777120,-9.645198,6.840365,0.991889,7.460037,8.895065,-4.341281,-4.519451,-2.615934,0.025586,8.951982,5.304639,3.133552,-8.370096,9.095229,9.633677,-8.716730,-1.467346,-0.710560,-2.333334,1.170578,2.425953,-6.526696,4.938990,7.722339,-4.650165,3.882426,-6.615725,-9.507334,9.117511,-1.782130,-5.999451,-7.398557,-1.925492,3.559997,-9.298808,-8.847850,-4.015376,9.456453,-9.999858,9.715818,2.421116,-5.628083,8.628521,7.162428,-4.427886,7.970941,-5.137389,1.819177,7.919924,5.130208,8.175500,5.310227,4.009976,9.204035,7.061168,-0.457150,-4.341194,-3.177897,6.327448,-3.239886,6.892330,2.968680,5.850703,3.702184,6.889850,-5.249764,-1.472669,-7.985775,-1.258239,5.487834,-8.270765,5.555573,-5.613553,2.970598,4.635088,6.451368,6.061629,-1.214511,5.374201,9.399559,-2.954381,-2.304422,-5.137905,-5.919822,-5.908014,-3.489336,2.131506,7.521832,-3.696679,-4.168140,-7.506558,-1.641324,-6.752802,-3.686574,-5.320568,-3.738250,2.814180,-1.198759,7.166096,1.717842,-2.077388,5.904357,1.643755,-5.140060,0.478487,3.373852,-3.683630,7.056349,-1.484797,9.847766,-3.877359,4.059620,-0.743366,4.497669,9.902619,8.358766,-3.201194,3.713601,-9.209698,8.163843,-3.114362,4.445579,2.356592,0.859139,7.436967,-7.269560,-4.703537,0.841228,6.147501,8.809293,3.484292,3.717735,0.685786,0.621036,-1.568480,7.581632,9.574705,7.257294,4.432358,-2.345701,2.588421,-2.101842,5.793465,-5.813531,-0.838252,3.102819,4.274664,-8.923451,7.553451,-6.709494,-7.431475,2.462228,-9.679495,-1.445956,6.275738,-3.782378,-3.284749,0.804728,1.383584,-8.342882,6.721821,6.686135,-3.048166,6.573115,-5.171586,9.809566,0.640232,-8.942261,-9.167326,4.597206,-3.366589,-3.043823,5.164439,-7.379408,-0.073802,-4.605327,-0.705276,-0.685423,2.975057,-5.790203,1.714765,6.119483,-2.918225,-9.910679,-4.862683,6.767267,-6.210020,3.659813,1.252580,-3.567220,2.420974,5.088321,-3.129164,-7.811641,5.692743,4.638369,5.734517,1.389573,4.652582,-7.055925,5.129001,-1.772036,9.496552,1.748871,3.012407,-6.449191,7.749717,-1.962475,1.549710,6.837271,4.233954,6.512336,0.348925,3.395926,0.537346,2.144342,9.749600,-3.456400,6.749013,0.052720,4.984407,8.485871,9.682203,-0.315515,9.146939,4.524535,0.121760,5.435907,1.375908,1.049934,-7.402091,8.532657,-3.917479,-6.856331,-7.530503,-9.500914,-5.100230,-7.143140,6.610049,-8.619329,-5.279632,9.385983,0.579395,2.321793,7.649087,5.617256,6.476732,5.293664,-4.527641,8.704500,0.199249,-1.441541,-7.127872,9.387576,6.697742,-8.550388,0.686328,8.839195,-7.665466,2.228274,0.283626,3.380485,-2.450204,-3.676233,-4.092983,1.902982,2.284356,0.809131,-2.478387,8.347891,6.772419,1.764501,-3.178681,4.391111,2.638507,-7.940703,0.917811,3.095431,3.325952,-8.037221,-3.135317,5.396710,1.598081,6.430944,-3.412633,1.406891,-4.731036,-0.280134,-1.817228,7.874657,3.107006,-0.335030,0.950427,-2.148966,-9.612111,-7.552752,-5.623007,-3.311358,6.709610,3.494426,1.855488,1.204418,4.634154,-2.499215,6.716397,-7.844138,8.295954,0.297178,-0.600912,3.804165,-8.820613,3.914819,-9.278335,-3.007171,3.875524,4.463233,-7.082055,-8.338948,-4.483421,4.794917,-0.867735,-8.418166,0.481887,-8.977173,3.432948,-1.341394,-4.872719,-0.631931,1.877501,-5.477925,-9.647002,3.152300,-5.841654,3.897244,-2.524324,-9.323291,-8.611817,6.735465,-0.821405,6.686952,0.498043,0.300126,-8.552928,-4.139184,-4.347637,-8.396326,-4.499465,6.778363,-3.315502,-7.103260,-1.764734,3.489980,6.138853,-3.694269,6.800006,-9.800672,0.342075,-6.180822,1.226040,2.220197,6.877093,1.193623,-1.038222,-0.552503,8.161048,9.895903,2.048065,-9.510888,2.335397,-8.608961,-3.110896,-4.700628,-7.031066,3.449670,2.794166,8.288909,6.290075,4.696626,4.630496,-9.641869,-6.865437,-3.167871,-0.760996,-6.884572,1.211027,-5.003715,1.859200,4.611933,0.595703,-5.206799,-0.178569,1.590756,-8.522823,2.832342,-0.431452,-1.559329,2.425481,-8.932820,7.118076,-2.906296,1.641236,-4.495774,4.313575,-7.759117,6.217345,4.391018,-0.550553,7.733896,1.328210,3.141040,-7.431062,-1.981699,-6.983542,5.438542,-9.539166,6.935117,1.654945,-7.621892,7.859257,7.076348,7.505877,-4.712730,-7.280309,-3.552225,-9.185085,6.849193,5.043290,4.229917,2.039218,5.893382,-9.378551,2.797261,0.659510,-6.600442,4.771721,7.058747,-5.777118,-5.988474,2.948987,6.476738,-3.339524,-8.069232,-8.193486,-1.161453,-8.208354,5.603386,-5.047601,-9.850492,4.127842,-0.545226,3.566113,6.938016,-7.049049,-3.740520,0.220761,9.585209,-0.612721,3.973253,5.161492,-9.805691,-2.871366,-1.701787,2.862792,-5.780443,5.916329,5.995604,-9.120592,1.123413,-2.019624,-5.274121,3.779729,-3.192463,7.549488,-0.250197,2.129590,-8.581812,5.780774,-2.155195,-4.699135,2.299132,2.849321,-6.075634,7.635313,-6.924101,1.354249,9.565409,1.568348,-8.649164,-3.683650,9.995780,-0.560104,3.018699,4.573503,-6.402356,-3.614396,7.942790,-4.596961,8.219511,1.507696,3.173659,-2.373268,2.965910,-6.819711,-5.352947,7.486797,-5.779577,3.718572,8.854852,4.772087,-8.805990,8.040699,-9.689931,9.117341,6.936406,9.610073,7.402544,-2.860249,1.623837,4.825568,7.133358,-5.845975,-5.670545,5.535573,-9.924387,0.898968,-1.704226,-1.190819,-7.566487,-9.527380,8.539491,-4.699122,0.892947,6.923451,-6.492428,-7.371953,5.666051,1.613934,-6.648148,6.670009,-8.992077,-5.782345,9.034619,4.543362,-8.435447,-5.026931,6.947069,9.921137,8.956328,-4.479587,8.522837,0.820331,1.776533,-3.292329,9.649801,-6.783038,-8.769076,-2.614536,2.852897,6.867983,1.344181,8.731790,-3.712764,1.652347,-7.500407,9.832273,-1.430975,-9.922503,-7.600250,4.707447,1.996180,4.447299,-2.264435,3.156163,5.116222,-6.710940,-1.504009,6.599843,-4.871021,-2.135890,-4.289357,-9.411860,-8.092607,-0.845977,7.861866,-9.430046,0.025158,-8.997935,6.845256,-2.538921,-6.148450,3.086216,-1.831529,1.858679,8.329407,9.744941,-5.956639,-8.736032,0.121235,3.495937,6.452313,0.585932,3.452482,-3.789121,3.370185,3.566548,1.212944,8.543394,2.404228,-7.081381,-4.876524,2.461679,5.484538,-2.784791,-2.268962,0.045683,7.346810,8.311142,-1.191634,-4.571202,-7.704091,5.004942,-5.900377,5.117665,-7.333504,8.874895,-4.665676,6.540491,-5.540803,-9.236603,3.045848,-3.030078,-5.905785,5.588184,-4.561972,-3.974517,0.733438,-6.683716,-7.839485,0.653850,-5.148236,-9.442007,8.652497,-7.235379,1.691132,0.431041,4.145842,5.405476,7.713612,-2.527422,-0.655628,-2.143532,6.581071,-3.813140,-9.944847,-8.380761,-8.520671,2.485520,-3.621043,7.444317,-5.139189,-1.053576,1.780482,7.330976,-6.837005,-1.316317,6.850008,-2.126676,0.777006,-8.506145,-1.909008,-7.028928,3.642164,3.870904,-4.355007,7.347095,8.132222,-0.921481,-5.860618,0.298928,7.004581,0.981017,-7.562977,3.430179,-8.027359,1.271207,-2.128258,5.848870,-3.195918,2.082071,-2.070035,9.541657,-3.914223,-1.502875,-3.269033,0.644696,7.491253,-2.693485,-9.276761,9.228553,5.309510,-8.136362,1.087485,-2.969134,-4.224860,-8.197644,-6.686518,-0.290356,9.593188,8.015243,-1.867039,7.525416,-6.169291,0.712401,-7.982056,1.631105,7.387533,2.050635,-1.453474,-7.309947,-8.812852,0.351482,6.547747,9.409830,-1.513702,-0.678508,-8.678869,-0.324035,4.030835,0.524700,-6.380266,4.266213,-0.216654,-6.579474,-5.307351,9.869649,7.825395,-8.295004,-0.440788,8.736286,-7.283480,6.382011,-7.326117,6.488564,8.898940,7.510346,-3.211874,-9.981959,9.122005,2.039334,7.389554,-7.973222,2.666365,4.492232,7.944103,-4.652368,-6.947422,-0.118533,7.364847,-6.966371,-8.279608,-4.755459,8.526545,-2.179473,-4.603446,-9.324689,-5.994195,-5.207264,1.513610,-7.020733,6.835688,1.585147,-8.851055,-5.095556,3.940987,4.763255,-1.901347,-8.867231,-5.371202,-0.474743,-6.429437,-1.926254,-4.192456,-7.419927,9.333627,-0.085955,5.044178,-1.995654,6.056403,6.323748,-2.332454,-2.015573,4.813176,-5.116993,4.034143,-9.540907,8.120823,3.032416,7.448775,-2.123196,-3.535182,9.359158,-6.226210,7.374966,-3.852584,-6.339342,4.079766,5.897168,-7.666593,-0.652306,5.591129,1.646292,-8.516543,-2.045675,8.991100,-8.121306,5.121179,1.360792,3.998075,4.340639,-7.840461,-9.070862,-9.825567,-9.029810,3.516947,3.522556,9.965297,-1.688780,4.864495,3.997839,6.279436,-7.113278,-6.502889,-2.134030,-6.873206,4.265823,5.318559,8.373620,-4.995543,-4.374100,-9.112592,-4.977886,6.878112,4.370286,0.468457,6.314516,-8.947399,2.746744,8.974975,9.803048,1.229582,-2.011123,-8.244202,-0.232880,1.202350,2.829992,-5.494199,8.232369,-4.515680,-3.736501,-8.425383,-2.128254,1.122576,8.716433,9.696703,4.448525,4.220988,9.537247,3.502702,-2.841762,1.406970,-7.006776,6.768370,5.655311,6.532237,2.202964,0.067504,-9.191170,4.630538,8.708942,-8.260566,8.436543,3.998187,-7.845340,5.555786,0.272298,-9.889952,-5.598262,-8.910940,9.517081,-9.125084,6.014735,-4.615537,-6.313134,7.215669,-2.173811,-4.549005,3.259835,-0.990535,-2.593556,6.620203,-9.439768,-3.336655,5.542603,-1.157086,-8.995976,-9.508970,-7.545195,5.938228,-3.419362,6.694699,2.122037,5.163936,4.914682,-9.224257,3.813442,9.908627,1.096432,-7.548334,-4.031094,3.042550,6.720172,-1.545736,-2.920416,7.761322,-2.487996,8.675269,-4.849354,1.765189,-8.794665,-2.723646,2.032879,-4.541776,0.455636,0.371535,1.381165,-8.390292,-8.648191,6.846751,-9.620443,-6.893317,5.570004,-1.522656,-3.141353,0.344589,2.314972,-9.273575,9.566845,7.633296,7.796881,1.758448,5.757074,-7.549778,-0.075072,-6.333856,-7.445501,-6.216284,-3.956315,0.802498,-1.435258,-5.156542,-6.674640,-2.791718,1.927306,-8.196458,-1.744276,1.493631,1.609633,-0.222695,2.900068,9.630596,4.114206,0.447487,-7.900053,-1.144233,6.214921,6.376833,9.795592,-2.876398,5.948096,6.282831,-2.985979,-8.819155,-9.042328,3.410379,2.472437,8.371918,-0.793986,5.103855,-7.008947,3.213419,-9.559752,7.108932,-9.126595,-1.524404,8.584221,-1.018537,-6.749342,2.984334,3.297429,7.775804,2.200994,3.748947,3.089113,1.469484,-5.092011,-6.837608,5.094335,-5.823739,5.682908,5.690410,-0.373338,-3.536472,-2.848897,-3.740358,-4.954340,2.340495,-0.273080,-9.577622,4.046814,8.033132,-2.056205,-8.006250,-7.473430,-2.061238,1.940262,-6.096785,8.028145,-3.827756,-7.059847,8.998875,-2.578374,9.069921,8.403062,6.461726,1.698629,-1.495690,-9.736478,2.545457,3.934588,-9.387597,7.224271,-0.288731,9.685160,6.218667,0.690788,-6.718490,7.112899,7.189037,3.591050,5.109315,7.327654,8.864602,-1.963905,-8.763671,-4.972105,-7.484858,9.663288,-0.085577,9.356541,2.625542,-7.541052,9.119996,6.731158,-3.283967,5.419546,6.797220,8.208636,-9.863879,6.588182,9.303629,8.189064,8.445879,-5.003553,4.596352,8.511851,8.940946,-9.721458,1.724122,4.873960,1.362514,1.828906,3.213898,6.932733,-7.428708,2.844443,-7.753453,1.418225,5.152395,3.817328,-8.857182,2.687049,-1.711475,-7.293594,2.777486,8.222467,-5.641085,2.788040,8.156475,3.493577,0.499002,0.198990,8.833334,-1.574069,-1.679936,9.260185,-7.852171,-4.643302,-5.561948,6.690951,-6.685632,-4.239227,1.688845,5.857823,-7.484549,8.801017,6.758724,5.025200,2.194248,3.239392,3.869888,-0.560158,-4.817608,-8.067127,0.150793,-2.742798,-7.144735,-9.659062,4.216507,-7.867710,-0.368706,9.106088,-2.681326,-0.953381,-5.268226,-5.058823,-1.440347,-7.442671,0.298307,-9.092260,-3.912381,7.207728,6.698683,-9.438073,3.525324,8.739409,-3.483599,1.978012,1.713683,0.787466,3.372182,-3.095020,-3.002651,-8.176262,8.125603,4.462121,-0.004618,5.496726,-2.190974,-9.359398,-7.424000,-6.628517,-4.393505,-8.246293,2.747001,-9.515392,7.025319,2.256931,7.067678,3.000774,-1.357883,-9.098189,6.725522,-6.449836,2.252732,3.235143,-8.557696,2.116905,6.070204,1.447452,9.352910,-5.677831,-6.482146,-8.685834,7.072449,-3.051912,-5.783746,-6.985912,-0.944781,-4.844317,7.891937,-0.326046,4.468645,9.067847,1.961464,5.944664,-2.380409,5.593997,0.182663,-4.256038,6.064846,-9.815468,4.273607,-8.578351,-2.620546,1.913111,-1.314566,7.192090,7.130826,9.369356,2.259506,7.337129,-5.144837,-9.862621,7.542678,-1.533984,-0.421176,-6.030622,-9.256567,6.676401,3.166608,-7.045454,-4.780533,9.021949,-5.008441,-6.882217,-0.675180,6.196201,-9.516886,-0.461846,-0.986369,4.354172,-6.241916,-7.791596,-2.387369,4.316696,4.760874,6.622023,2.756825,5.549714,9.711376,-0.326509,-0.508542,-4.989672,4.580527,-0.136070,-3.489442,-3.338528,0.137710,2.351857,7.188188,-8.383305,-3.515794,-4.702808,-8.104361,-2.620436,-9.328012,2.221258,-1.983869,4.785902,4.159482,-8.762209,9.711367,-4.470559,0.653526,-9.683084,-1.875530,8.313400,5.132906,-9.678596,-1.231084,7.517812,0.748649,8.502705,5.353967,-6.315465,-2.101779,-9.312646,7.488978,-1.633265,-2.207559,4.757367,7.216924,8.991245,3.960366,3.783603,-0.135260,-8.834184,0.284633,-5.350003,-8.569481,6.742329,7.056887,7.536765,-2.426804,2.485134,-0.058649,4.602412,-5.386538,-0.281515,6.315592,7.212169,6.618759,1.001963,7.924448,3.363178,-4.467560,-6.389616,-0.024104,2.906805,0.707894,7.353062,4.501836,-1.603467,4.334438,9.913672,-8.548241,3.303109,-7.992874,-8.582469,-9.606766,-1.603908,5.216494,-5.853692,-2.563659,-2.574236,-3.058521,1.893099,6.602236,0.341311,3.991483,5.708830,5.805193,2.826353,7.303445,2.071734,9.014054,0.539120,-1.703053,-7.844295,6.263162,7.887173,-4.185503,2.568243,-4.502767,-9.544974,-8.316023,9.500603,-1.860887,2.912377,-8.094451,5.972526,-3.845305,-9.669795,-1.603454,6.511177,-6.302163,-0.041734,-4.385303,-8.831024,-6.103701,-9.522076,-6.845418,6.453457,-6.773848,-0.702794,1.487511,-3.939512,-3.423653,3.412287,2.556706,-8.628745,8.519392,-4.726891,0.190384,-1.881206,0.294761,-9.444010,-9.179813,9.128659,-1.009603,1.144862,5.826314,-8.935043,3.356614,7.735709,-9.439719,-6.708639,-3.921616,2.451107,5.049672,1.570852,-0.798923,-8.577499,5.798650,5.302224,8.600029,-9.160683,-0.960651,5.396805,-4.334725,-1.068651,-9.942084,-2.352468,3.639462,-6.397248,8.202763,-1.847664,8.811216,-3.776562,-5.923464,0.677612,-2.822574,-1.243573,-0.398194,-7.136273,-5.121361,5.307214,5.031197,6.309846,-5.082553,1.915591,-6.321789,2.894054,-8.529764,-7.061118,-0.867396,2.301351,2.473765,5.335254,7.999171,-5.424319,2.144474,-1.416629,5.904518,4.238936,-0.263709,2.139451,-6.969665,-0.897346,-4.855576,5.802619,-9.891194,-8.514349,5.922720,9.944492,0.852276,-9.674746,-5.444134,-4.037289,4.636088,4.803801,-6.501968,-0.098130,4.287945,-5.554930,7.150440,-1.621140,-1.764994,-3.065522,8.604814,-3.341286,0.454549,5.316916,8.520508,-0.600606,0.326881,-6.534338,-7.615981,3.112237,-0.302998,-9.763204,3.648040,4.019750,6.193911,2.145446,-1.603425,9.248765,4.236212,8.595856,-1.977874,9.680659,3.874820,-9.366242,-0.507922,2.434121,2.875309,-5.266419,8.833748,-0.461959,5.120728,7.751489,7.083134,-1.645009,2.821904,9.927272,2.359613,3.806877,5.465732,-3.066759,2.312767,-7.793896,4.612481,-1.811509,-3.627915,7.704799,-2.913504,7.784439,-9.540573,-2.081488,9.824927,6.414093,-1.521470,5.184146,-1.554073,9.113956,-3.742547,-0.613322,0.918925,-4.623132,7.234097,4.206017,-5.778505,2.698744,-5.272405,-1.646446,-6.188727,-2.964482,-8.965752,-1.596409,-7.827960,7.148659,3.222242,-5.734113,-9.619978,-8.555836,8.926569,9.617969,9.386990,-0.803732,1.170197,8.006608,-3.184825,-9.041811,-5.463354,-7.065292,9.354909,1.505855,1.145638,1.277378,-9.633784,-9.934657,1.365492,9.600816,-4.287780,7.823427,-2.846257,9.276712,-3.365641,5.107229,-4.018113,5.350697,1.879937,-0.819470,6.281498,-7.507827,-2.237350,0.225332,0.477029,-8.627397,-8.519051,9.868012,-0.925342,8.731533,-9.113401,0.054706,-7.290299,-4.147157,6.172618,6.113658,-5.319383,-9.851493,-7.317024,9.398092,-6.979703,0.182501,5.325579,0.977605,-1.605056,-1.234820,-5.074637,3.502483,8.825592,-3.349381,0.410446,4.160947,-1.157709,-2.330394,6.577208,-8.343647,9.860228,-9.324706,-9.160438,-5.845976,-7.258833,2.386104,7.540601,-5.028258,3.523670,6.637086,-0.380177,-5.608805,6.332470,0.365360,-9.807895,-8.021645,8.500350,-2.136977,3.696250,-0.613086,-8.883805,-9.385938,6.421220,-9.230692,8.612276,7.808214,-1.071594,-6.826028,-2.309792,-6.849005,5.175720,-2.419442,7.875286,-2.628303,3.987162,-6.407811,6.815377,9.602736,1.477078,0.882060,-0.595935,-9.399731,-6.912497,-2.862577,-7.067867,-6.278199,1.113719,6.213814,6.296844,1.119099,-8.414735,-4.851392,-6.642735,-8.545319,7.174342,4.547562,-9.358248,-5.841368,-0.711361,8.038115,9.769979,7.855719,-3.750712,5.608331,-1.086805,6.237332,6.921983,-9.777967,2.947893,1.425715,-0.225480,-3.894269,7.504564,-5.011805,0.882014,-9.358266,5.569543,-1.889283,-8.309237,9.821667,-8.706287,-4.900428,4.230246,-1.449214,5.532081,9.178220,-3.793700,7.205797,8.445481,2.366467,7.367683,4.014367,0.074315,8.084179,-4.102933,8.458823,3.367080,-8.323098,-8.801031,4.221224,-3.697919,-1.524842,1.748206,-9.066306,4.754477,3.830527,-6.906840,5.115767,-8.575121,4.869578,6.906677,-8.261317,-5.866044,3.260282,1.194320,2.158360,-2.197050,-4.786702,5.318949,-6.180332,-3.356822,0.022588,-6.378213,7.807370,8.301897,8.710935,0.684455,9.258597,-0.375111,-5.978391,-3.872193,-0.682102,2.616106,-3.976549,9.997996,7.041990,-5.696979,-1.642534,6.049930,-7.808882,1.403634,-7.564037,4.069575,-8.830785,-6.174645,5.665387,-7.542290,2.246767,-0.154328,-7.259387,-2.407297,1.924211,8.569893,-5.278462,1.625493,0.200448,-9.671363,8.697677,-4.186021,-9.352535,2.782524,6.007253,3.639919,6.939947,-4.516427,5.785384,-3.030291,4.572408,2.664092,-8.748007,-6.887255,7.465789,4.500762,-1.143590,-0.351031,6.408445,-0.843005,-0.632007,2.639445,2.842565,4.188640,5.190267,-7.993146,9.589015,-5.207675,-8.836601,-2.832141,4.187571,3.320926,0.125857,-6.992535,1.411669,3.440157,-2.591458,6.397473,-1.551220,0.235580,-7.292414,-4.991396,2.642397,-7.336901,-0.272817,2.227510,-6.937972,0.716465,-0.001917,-5.709882,0.948271,3.999266,5.719741,0.679195,-7.781042,9.808102,-8.117849,-9.987554,-5.485289,-3.573770,6.619580,-5.371064,-1.316842,0.923825,-7.600537,-7.525498,8.645283,0.334232,-0.634709,-3.051501,6.006714,-2.615122,-4.269979,5.093826,5.815321,6.569026,9.111981,-7.372152,5.859480,1.452509,-8.108060,9.612100,4.526001,-0.492759,-8.413178,-9.058757,-1.462424,6.975153,-1.920863,6.359775,-4.546106,-4.556643,-0.461612,1.462796,6.594831,0.285681,-0.717242,4.988593,-0.960517,-7.798111,4.556247,-1.025158,7.569648,-7.704759,1.739322,0.830632,-4.820385,5.506113,-0.640360,-6.682197,5.474392,0.614301,7.935551,-3.210695,-1.452766,-8.971824,8.703209,4.783536,-9.146589,-9.920941,4.464240,-5.779823,-7.080320,5.149121,-0.242593,-6.014755,8.715674,-3.622721,-4.192930,-8.767400,5.448395,-3.468568,-9.071558,1.786025,2.016556,-8.587818,5.247556,-9.361612,-1.213113,-3.829832,-1.321921,1.181851,0.532072,-6.803232,-0.856085,-6.416561,5.052742,-0.530865,6.161631,-3.254694,-5.163759,5.037697,2.479017,5.220400,4.396086,6.191850,-7.501425,-3.472419,-2.380828,7.445424,2.120096,-6.740731,8.973348,-2.404439,-1.914641,6.889765,9.297856,-2.380700,2.525533,9.682921,2.575510,-2.220423,4.023368,6.410112,0.828192,-0.620422,8.732583,0.861035,2.249751,4.162252,-8.786109,-9.586988,6.419987,9.842515,-5.362322,-8.520373,3.251443,4.745509,5.110441,-7.795215,-7.645697,0.896760,1.797550,-9.595956,1.904680,-7.587218,-4.060910,1.164486,3.115828,-2.618935,6.961785,7.220280,7.307941,1.936873,-2.059011,7.218252,-4.882047,-2.562613,5.327553,0.865566,-9.292530,9.348382,-1.404393,-5.199867,3.222856,-5.866349,7.734698,1.291141,-9.164436,1.977187,-7.715919,2.004201,-3.555716,-4.346350,-8.618014,-3.152620,5.464658,-1.378166,-3.805282,0.797422,5.088646,1.557276,3.167890,-6.943642,3.811711,-7.856368,-3.017596,6.827729,1.060395,5.377570,8.706711,-6.192876,2.348214,-9.238154,-5.979924,6.690317,7.918480,-1.658266,5.179695,9.614366,9.442229,-4.674169,7.281739,-0.219688,9.705879,1.201094,8.965548,4.328104,-7.396252,-8.539870], dtype = "float64")#candidate|4845|(2560,)|const|float64
bop_4846 = relay.equal(call_4840.astype('bool'), relay.reshape(const_4845.astype('bool'), relay.shape_of(call_4840))) # shape=(2560,)
bop_4849 = relay.equal(call_4841.astype('bool'), relay.reshape(const_4845.astype('bool'), relay.shape_of(call_4841))) # shape=(2560,)
output = bop_4846
output2 = bop_4849
func_4851 = relay.Function([], output)
mod['func_4851'] = func_4851
mod = relay.transform.InferType()(mod)
mutated_mod['func_4851'] = func_4851
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4851_call = mutated_mod.get_global_var('func_4851')
call_4852 = func_4851_call()
output = call_4852
func_4853 = relay.Function([], output)
mutated_mod['func_4853'] = func_4853
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4473_call = mod.get_global_var('func_4473')
func_4474_call = mutated_mod.get_global_var('func_4474')
call_4871 = relay.TupleGetItem(func_4473_call(), 0)
call_4872 = relay.TupleGetItem(func_4474_call(), 0)
uop_4881 = relay.asin(call_4871.astype('float64')) # shape=(1, 8, 7)
uop_4883 = relay.asin(call_4872.astype('float64')) # shape=(1, 8, 7)
output = uop_4881
output2 = uop_4883
func_4903 = relay.Function([], output)
mod['func_4903'] = func_4903
mod = relay.transform.InferType()(mod)
output = func_4903()
func_4904 = relay.Function([], output)
mutated_mod['func_4904'] = func_4904
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4851_call = mod.get_global_var('func_4851')
func_4853_call = mutated_mod.get_global_var('func_4853')
call_4905 = func_4851_call()
call_4906 = func_4851_call()
output = call_4905
output2 = call_4906
func_4920 = relay.Function([], output)
mod['func_4920'] = func_4920
mod = relay.transform.InferType()(mod)
output = func_4920()
func_4921 = relay.Function([], output)
mutated_mod['func_4921'] = func_4921
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4401_call = mod.get_global_var('func_4401')
func_4402_call = mutated_mod.get_global_var('func_4402')
call_4924 = relay.TupleGetItem(func_4401_call(), 0)
call_4925 = relay.TupleGetItem(func_4402_call(), 0)
output = call_4924
output2 = call_4925
func_4929 = relay.Function([], output)
mod['func_4929'] = func_4929
mod = relay.transform.InferType()(mod)
output = func_4929()
func_4930 = relay.Function([], output)
mutated_mod['func_4930'] = func_4930
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4903_call = mod.get_global_var('func_4903')
func_4904_call = mutated_mod.get_global_var('func_4904')
call_4931 = func_4903_call()
call_4932 = func_4903_call()
var_4969 = relay.var("var_4969", dtype = "float64", shape = (4, 8, 7))#candidate|4969|(4, 8, 7)|var|float64
bop_4970 = relay.equal(call_4931.astype('bool'), var_4969.astype('bool')) # shape=(4, 8, 7)
bop_4973 = relay.equal(call_4932.astype('bool'), var_4969.astype('bool')) # shape=(4, 8, 7)
output = bop_4970
output2 = bop_4973
func_4982 = relay.Function([var_4969,], output)
mod['func_4982'] = func_4982
mod = relay.transform.InferType()(mod)
mutated_mod['func_4982'] = func_4982
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4983 = relay.var("var_4983", dtype = "float64", shape = (4, 8, 7))#candidate|4983|(4, 8, 7)|var|float64
func_4982_call = mutated_mod.get_global_var('func_4982')
call_4984 = func_4982_call(var_4983)
output = call_4984
func_4985 = relay.Function([var_4983], output)
mutated_mod['func_4985'] = func_4985
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4903_call = mod.get_global_var('func_4903')
func_4904_call = mutated_mod.get_global_var('func_4904')
call_5026 = func_4903_call()
call_5027 = func_4903_call()
const_5046 = relay.const([[[1.880935,5.296360,-9.183282,1.570534,-0.158605,4.044603,-8.663973],[9.657007,-2.228787,-7.250800,3.689249,7.317160,9.240611,-0.333888],[3.560054,-1.100409,-1.862558,2.639888,7.535449,-6.146151,-8.263879],[7.341058,0.979488,9.541069,-6.226412,3.037703,6.278949,6.968262],[6.500648,1.737749,4.301979,8.078135,-0.070833,-3.728162,-9.367730],[7.855370,-1.153525,8.179775,8.460976,-8.359456,-8.569413,-7.755697],[-4.178570,-2.627112,3.726946,-0.441833,8.839004,-8.976314,7.431793],[3.312146,-5.215325,-1.463689,-7.883236,-7.624502,-3.081697,5.943331]],[[4.287947,5.934422,2.585414,5.522617,8.262940,-2.424322,3.657905],[-4.503779,3.185032,-5.259120,8.902875,1.761755,-4.523135,2.408301],[-1.442270,-4.097914,-0.864411,8.687116,9.324424,-8.647843,0.505032],[-9.321781,-2.067072,9.744868,-6.623366,1.482736,-0.321917,0.046718],[-3.505862,9.706276,7.804228,-8.334350,1.564865,-5.174993,-3.261045],[-9.959724,2.572827,9.995339,7.626475,0.941856,-4.671111,5.014321],[3.198121,-4.375855,-1.177402,-8.088227,6.465892,0.939786,5.058153],[7.606519,3.203860,1.458540,-0.742667,-6.354768,5.284589,-6.531150]],[[-2.834129,-7.246415,-0.343131,3.144159,-3.598555,3.098802,0.387157],[8.724261,-9.321718,-3.603223,-9.119321,-6.604560,-1.132109,-9.058642],[-4.308332,-0.310653,4.308174,1.784550,7.237386,-5.976628,-0.130211],[8.025835,-9.505781,-7.276927,4.838606,-1.384804,-8.271798,9.345474],[6.723852,-2.357964,-2.612804,-2.389077,9.103663,6.202049,3.196891],[0.266495,1.999693,4.064261,2.788678,-7.574512,-9.611179,-1.818867],[5.453855,-2.465559,6.202056,1.957834,8.256448,0.339416,9.771794],[3.840088,-8.498210,-2.196781,5.702903,-0.587083,-9.883524,8.387750]],[[0.525904,1.693396,8.700652,-4.337196,2.335123,-0.556692,8.085919],[6.668750,4.367517,9.270427,7.664079,0.474303,5.370126,6.993186],[8.439271,6.666586,-1.485557,9.243668,-3.745704,2.251616,9.542186],[-5.883923,0.258906,5.505530,-1.865427,6.702318,0.548707,-0.875815],[-7.120618,-3.544372,-3.797767,-1.167883,-9.177701,7.823152,6.224978],[-9.132514,-1.291075,-4.725364,3.414375,-1.003983,-2.575942,5.652560],[4.576517,0.471109,-6.574030,2.591325,4.142270,3.325076,7.218317],[-9.117891,1.441572,-9.608186,8.080262,-2.092034,-7.889799,-0.236649]],[[-6.662122,-9.505995,7.108365,1.611234,7.897684,-1.460245,-4.888681],[6.224014,-3.125598,5.119798,-6.771690,-7.014975,-8.536854,-5.517531],[4.043831,0.013945,0.152567,0.141167,6.105381,-4.792072,7.705788],[9.239650,-4.503869,-2.506181,-9.433110,4.613017,5.229403,-8.985394],[-1.385815,-7.031921,0.728419,0.872671,-4.552309,7.187773,3.504124],[-1.388570,9.840955,-2.533633,-3.446576,-5.834113,-2.832299,-2.669476],[2.012680,0.813888,4.317680,-2.590388,-3.882743,9.313711,-5.347912],[-1.236045,-6.442693,2.673054,6.986070,-3.164351,-6.519014,-6.310997]],[[-3.877745,-9.864692,-9.598831,5.772248,3.449235,-0.544152,6.871670],[-3.890473,6.402473,8.486469,-2.345672,6.590503,-5.997007,8.199687],[-7.479927,-8.776257,-0.914481,1.866670,-1.659308,5.621103,-7.474966],[4.170981,4.534867,8.165319,6.223755,8.647719,2.652512,5.758513],[-5.014522,-5.770810,-6.760864,8.427119,9.691305,0.153549,9.171607],[-6.943620,2.702443,1.134020,2.512066,5.029639,6.756435,-4.454833],[7.152913,-9.692702,1.851138,-5.628302,7.467170,-5.232317,-1.268756],[3.860736,-2.845666,2.491097,4.823232,1.205903,-2.703795,6.928860]],[[7.513505,-9.118344,3.384586,-2.182505,-3.311729,8.410271,-0.995307],[-0.223562,4.005266,-6.735808,5.527497,3.228737,-4.278637,-5.947789],[9.647755,-2.910750,0.236794,7.497305,9.652794,5.616820,6.032717],[-5.441088,3.576569,-3.664306,-8.422350,-6.356350,9.213939,-7.623853],[-8.439894,-0.420266,2.743631,-9.575649,0.213900,3.399173,7.135562],[-2.244459,6.378043,-0.111067,-1.173701,-7.701431,7.070120,-1.217902],[-4.527413,-5.595683,4.928386,1.017995,3.283665,-9.699736,5.907432],[-0.036917,-2.083583,6.632823,6.810657,-4.680333,5.855227,-7.737385]],[[-0.123553,0.240383,8.373210,5.961044,-0.969784,0.883566,1.379918],[-4.324213,-4.157041,7.617582,-1.721184,-4.905603,7.639640,7.552543],[9.518688,5.604641,-0.726557,0.679078,4.360726,5.464691,2.738536],[5.720301,-1.873309,6.946060,-4.008438,1.881400,-6.953589,-3.019897],[3.907238,-2.175830,5.090630,-0.837440,-9.835835,-4.769091,-8.598484],[4.262008,-2.040616,-5.868604,-7.045334,8.921327,5.153047,9.224257],[9.785134,0.769430,2.833909,5.492873,8.275995,3.143461,7.335799],[7.744354,0.791217,8.495999,-4.056541,-8.309777,-6.672551,7.423229]],[[-8.488996,0.998066,9.115673,-7.002281,-0.839534,9.071936,2.094354],[9.484257,-6.366131,2.846232,4.391986,-3.424116,-0.713195,-8.883828],[-1.620537,-3.673817,3.169616,-7.943807,-2.416942,3.384193,7.932071],[3.612225,0.195371,5.901833,5.380852,2.814438,-1.453633,-7.650451],[-7.956878,3.978613,8.427834,-6.150217,7.339274,0.008203,0.346514],[-2.999390,8.731754,-0.429649,-8.614653,8.620444,-0.553852,-0.960136],[-9.528211,4.796035,9.824915,4.715029,0.941885,0.756689,9.427023],[-0.825340,-8.465653,0.936731,-9.448560,-7.572901,8.656327,2.384687]],[[8.233950,-8.871402,-6.869208,-1.631251,-3.176591,-2.230410,4.395731],[-2.645489,-5.347457,-5.754319,9.120431,3.871075,5.562247,-4.820124],[2.918895,-1.466999,6.798423,-6.043082,-8.581117,-3.992212,-8.234808],[-1.123116,-2.483002,-2.178447,-2.190126,5.661307,-8.836788,2.271647],[9.910239,8.215474,8.862478,5.953031,-0.189721,1.845970,-9.177734],[-8.274678,-9.494705,0.636359,8.498357,-3.978142,-3.493773,-9.746775],[-8.335979,-5.921802,8.950843,-3.481267,8.868059,-0.586960,0.396078],[-6.867255,4.006204,-2.738540,-4.736944,-9.180395,-7.477315,3.191688]],[[8.149912,0.191282,2.867408,7.167304,1.472348,-8.206102,1.613990],[8.571769,-5.132034,-2.660491,-9.497833,2.095256,-1.058293,-8.922569],[-6.808265,7.172568,6.159365,3.942216,-9.547782,-5.849100,-5.562279],[-2.425970,8.696525,-1.661888,-9.110548,5.883866,-1.092102,4.555857],[-8.047972,1.994161,8.626111,-6.919674,3.428174,9.033889,-2.262418],[-2.470421,-8.716421,-1.257392,-8.930320,3.069357,-9.831757,3.032031],[-0.082989,1.262360,-9.450903,5.395861,-1.369997,0.935700,-1.026950],[8.192738,-1.436953,0.821645,8.260879,-3.416408,7.889608,-5.422139]]], dtype = "float64")#candidate|5046|(11, 8, 7)|const|float64
bop_5047 = relay.divide(call_5026.astype('float64'), const_5046.astype('float64')) # shape=(11, 8, 7)
bop_5050 = relay.divide(call_5027.astype('float64'), const_5046.astype('float64')) # shape=(11, 8, 7)
output = relay.Tuple([bop_5047,])
output2 = relay.Tuple([bop_5050,])
func_5059 = relay.Function([], output)
mod['func_5059'] = func_5059
mod = relay.transform.InferType()(mod)
mutated_mod['func_5059'] = func_5059
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5059_call = mutated_mod.get_global_var('func_5059')
call_5060 = func_5059_call()
output = call_5060
func_5061 = relay.Function([], output)
mutated_mod['func_5061'] = func_5061
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4095_call = mod.get_global_var('func_4095')
func_4096_call = mutated_mod.get_global_var('func_4096')
call_5118 = relay.TupleGetItem(func_4095_call(), 0)
call_5119 = relay.TupleGetItem(func_4096_call(), 0)
output = call_5118
output2 = call_5119
func_5123 = relay.Function([], output)
mod['func_5123'] = func_5123
mod = relay.transform.InferType()(mod)
mutated_mod['func_5123'] = func_5123
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5123_call = mutated_mod.get_global_var('func_5123')
call_5124 = func_5123_call()
output = call_5124
func_5125 = relay.Function([], output)
mutated_mod['func_5125'] = func_5125
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4920_call = mod.get_global_var('func_4920')
func_4921_call = mutated_mod.get_global_var('func_4921')
call_5277 = func_4920_call()
call_5278 = func_4920_call()
output = relay.Tuple([call_5277,])
output2 = relay.Tuple([call_5278,])
func_5285 = relay.Function([], output)
mod['func_5285'] = func_5285
mod = relay.transform.InferType()(mod)
mutated_mod['func_5285'] = func_5285
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5285_call = mutated_mod.get_global_var('func_5285')
call_5286 = func_5285_call()
output = call_5286
func_5287 = relay.Function([], output)
mutated_mod['func_5287'] = func_5287
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4903_call = mod.get_global_var('func_4903')
func_4904_call = mutated_mod.get_global_var('func_4904')
call_5339 = func_4903_call()
call_5340 = func_4903_call()
uop_5341 = relay.sin(call_5339.astype('float32')) # shape=(1, 8, 7)
uop_5343 = relay.sin(call_5340.astype('float32')) # shape=(1, 8, 7)
bop_5345 = relay.power(call_5339.astype('float32'), relay.reshape(uop_5341.astype('float32'), relay.shape_of(call_5339))) # shape=(1, 8, 7)
bop_5348 = relay.power(call_5340.astype('float32'), relay.reshape(uop_5343.astype('float32'), relay.shape_of(call_5340))) # shape=(1, 8, 7)
output = relay.Tuple([bop_5345,])
output2 = relay.Tuple([bop_5348,])
func_5349 = relay.Function([], output)
mod['func_5349'] = func_5349
mod = relay.transform.InferType()(mod)
mutated_mod['func_5349'] = func_5349
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5349_call = mutated_mod.get_global_var('func_5349')
call_5350 = func_5349_call()
output = call_5350
func_5351 = relay.Function([], output)
mutated_mod['func_5351'] = func_5351
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4496_call = mod.get_global_var('func_4496')
func_4497_call = mutated_mod.get_global_var('func_4497')
call_5379 = relay.TupleGetItem(func_4496_call(), 0)
call_5380 = relay.TupleGetItem(func_4497_call(), 0)
const_5385 = relay.const([-2.514034,-2.016198,-0.302103,-7.619403,0.799842,-1.114044,-3.129930,6.062868,5.069607,7.050807,0.053066,6.762785,7.045784,3.862984,-3.626438,5.518549,-2.798316,8.357909,0.023975,-8.124061,-3.150531,-7.757480,7.581092,3.491790,0.736860,-1.550698,2.341685,1.911793,-8.928635,5.532743,-6.629751,4.367343,3.769123,3.384459,-3.185515,4.237304,-4.425164,3.268559,2.976724,-9.060378,3.314985,9.065214,-0.620992,9.947125,1.789054,9.749101,-7.121031,6.471665,-6.846649,-8.740605,-9.102744,6.033534,-4.537826,-1.839449,-8.002946,-4.943662,7.732355,-7.395873,7.051401,8.551513,-1.622073,-5.437540,8.694880,-4.678379,-7.434596,6.775069,-4.892157,7.535467,6.558220,-4.705313,-5.497986,-4.685136,-9.743363,-3.575430,-7.325540,9.581615,-4.795433,0.963602,2.596668,1.762625,3.344450,-5.072483,-9.422147,-9.254155,3.041528,0.567886,7.901884,7.290580,-9.456439,1.927889,0.894175,9.588102,-0.571112,-6.799043,0.796712,3.368427,-9.500877,-7.721010,1.350052,-9.558165,-7.241451,8.870401,7.885432,8.205863,-8.739406,9.034699,6.435413,9.194651,5.642264,4.814012,-5.633365,5.536149,-6.894487,5.849451,-3.123315,-1.246278,5.785543,0.944372,4.468939,-6.466485,2.622037,8.908959,-4.990538,7.855175,-3.290655,-0.616052,5.982034,3.376589,-4.513408,-1.633123,5.572963,2.278416,-1.740082,6.667537,1.147600,1.418766,8.890812,-9.249400,2.906869,-6.593730,-3.985067,-6.833110,-8.303241,-8.219295,-0.765784,-8.647749,0.252429,-2.929652,-0.214680,2.376013,7.000462,-3.590417,-0.798467,9.670630,-2.614867,0.879294,-5.175787,8.745562,-0.633170,9.800251,-3.503001,-7.948037,6.357153,1.098187,-2.169806,-6.924012,4.199988,3.602912,6.293532,5.436718,-6.880965,-6.578380,3.879791,5.966566,3.753034,-9.601652,-6.245952,-4.415280,-5.453443,2.783623,-4.068587,-5.403746,1.592678,7.859982,-1.592362,-3.220405,-7.000204,-0.326510,-1.793386,1.588758,-6.896075,4.431047,-8.243476,2.704110,1.069649,0.189312,-1.460964,8.078146,8.097630,-3.878920,-4.588840,-5.481423,9.927415,-3.048526,6.536060,-2.019179,5.995803,-0.418232,2.033687,-8.206588,7.314159,-2.839834,-0.615887,7.931585,3.607300,9.936692,-8.291936,-1.939981,-2.499565,-7.663547,-6.971994,-2.381045,-7.936668,0.969293,-2.011896,9.351689,5.598507,2.327979,2.096029,-5.566532,-8.131594,-6.470484,3.543180,-3.609848,0.946342,3.904669,5.944693,-3.917076,8.537639,2.836248,5.770675,3.503634,6.730694,-1.678432,6.612043,2.236019,0.638114,-8.219372,-6.781826,-2.925937,3.433216,5.866139,7.513012,1.350822,4.743546,-2.815633,9.037658,9.818185,-7.368054,4.487811,-5.334989,3.021794,5.571163,9.281023,7.830342,9.493866,7.019995,9.036740,-7.644158,4.939090,-0.855375,4.775971,6.968470,-8.732935,-0.188674,2.411703,-0.144857,-4.416007,4.592281,6.440423,-8.078108,1.623584,1.960948,-4.275007,3.160502,5.596056,-8.623099,5.310354,8.729932,9.817181,-8.155455,8.053491,-7.379874,-0.107048,9.975851,-2.296312,-9.729082,3.921053,-9.221676,-5.074804,-1.405167,9.868073,-3.184727,-7.907776,-7.158793,3.324151,8.830274,8.537340,5.885525,4.346044,3.780052,-2.858091,1.501744,7.466125,0.054748,-1.531211,1.073231,-4.433407,-2.081297,-4.856772,9.424550,3.564977,-4.591082,-2.152486,-3.856449,-4.137214,5.665578,-2.974657,-7.826221,-4.695186,1.545740,4.050007,5.809856,-7.700641,6.017889,-5.338436,-8.899324,7.991192,6.632252,-0.369367,8.741877,4.408095,0.373966,5.121690,-5.022069,-9.065848,-8.305771,-8.964816,8.785329,-1.182064,0.960485,1.079909,-2.691342,-9.070903,-3.397882,-7.204447,3.167684,-9.222799,4.555769,8.274780,-7.246133,7.649291,1.750679,-3.279584,-3.606778,6.280892,6.874403,9.416063,6.415332,2.902640,2.522376,3.279205,-7.941043,8.596120,-9.322656,1.424180,-3.328375,5.437083,-3.969957,9.507799,-5.264315,8.446575,6.694359,-2.593582,-8.838964,2.314080,2.736338,9.541287,-9.718363,0.286105,3.046312,3.566380,0.632717,9.833620,-4.887875,-8.587272,-2.841230,2.060951,-4.422168,-0.911319,1.315451,-0.500170,4.978571,-5.340006,5.940144,-0.574888,-8.164070,-6.220355,-7.142146,-1.420448,-9.730868,-1.022619,-9.462841,6.112667,5.979811,7.807948,3.021440,8.071304,3.734163,-0.825660,3.479585,0.241188,6.606167,8.581203,-6.921966,-1.704393,-1.193526,9.331054,-3.793980,7.191256,-6.612137,0.332691,4.439166,-1.412316,-0.793980,0.211118,2.520971,-3.783649,-4.320747,5.140400,2.817909,-8.657063,-6.823402,-8.765450,-0.956355,-7.681440,-5.192194,-3.145456,-2.209660,1.261283,8.160839,-3.272656,3.017191,1.820226,-6.642909,-0.130015,6.431167,4.423189,-1.314217,-8.161020,9.793054,-2.549346,-5.466138,4.214005,4.823783,-7.117227,5.679873,-9.254037,6.592018,4.250109,-2.739642,3.666915,-6.576830,6.898783,-1.143136,4.594471,-3.924889,2.933908,-3.695310,6.144133,9.112321,-3.622188,-5.902296,-4.035181,5.512344,7.042075,0.104649,3.196935,1.549615,6.954439,-3.659979,1.357830,-6.563289,-1.993242,-2.634747,-8.882110,4.853856,-5.806954,1.203368,8.979484,-1.457235,-3.480338,4.064873,6.094267,-8.564647,-8.531949,0.579471,8.595996,-6.665626,-1.193182,9.844927,6.607771,-0.583017,-8.768525,-9.645149,-1.259565,-3.457858,-1.051961,-1.807234,-0.681321,-2.860404,8.689482,2.868668,7.874863,-7.570534,-2.140710,8.431552,-6.531426,6.312344,1.446273,-9.096908,9.856860,7.341738,-6.892124,0.776754,-9.746315,3.360243,-0.938038,5.344082,1.087105,4.516804,1.019837,4.861383,-2.406683,2.403249,-7.220326,2.718424,-4.962110,3.893854,-8.184046,-3.826797,9.807107,0.972655,-6.909480,2.457680,-4.902752,9.968928,8.268319,-7.127134,6.811351,-1.822486,5.557960,2.374786,-8.930960,7.695637,-1.133299,5.322143,5.579628,7.106756,5.037015,6.642201,9.254727,-7.079491,1.240421,2.401192,-7.715041,-3.633470,0.735210,8.342365,3.342019,1.723775,-7.352150,5.945839,9.171988,0.705673,0.684408,-9.998833,0.879838,-2.726810,8.899258,-1.835888,1.801013,-0.622864,-1.399479,-0.988971,-1.636206,9.925556,-9.837850,-5.893404,4.700295,8.186039,0.492093,-0.825144,-6.485473,3.915344,-5.488597,7.014001,8.918709,-3.231632,9.055666,8.919067,-4.783425,4.274546,3.267719,-5.812260,4.884619,4.222104,-3.383821,-3.896288,-0.882079,-8.189979,6.972014,-4.377937,1.231290,-2.034064,7.217832,-3.888589,6.157805,0.611324,-9.745061,5.910782,2.900273,-1.252868,-5.636348,-3.227043,-4.801605,8.027268,-0.347402,-9.575411,9.798275,-8.380985,-6.832080,-7.939741,-3.888551,-0.168949,-0.791265,3.756850,5.534288,5.630062,-3.730246,-9.994266,-9.951237,-4.274373,-1.930189,9.028099,0.742783,-6.255639,-3.630778,5.642369,-0.497472,9.163097,-5.821887,-6.691577,-5.640159,2.745091,5.663030,-4.456284,-4.843388,-4.546861,2.910540,-0.234181,-1.816457,9.289500,6.879954,9.328537,-6.452605,-1.611879,4.056958,-4.078755,-4.141083,-9.355840,-9.299749,-3.719970,2.950117,2.635823,-1.823184,-3.676406,-4.284614,1.247270,-6.870005,-0.250263,-0.355187,2.298516,2.475477,0.113621,-1.366887,-5.625304,-7.714218,2.101015,7.849204,9.207005,-2.326628,-5.045303,2.086304,-1.429040,9.783528,-3.491473,-4.407124,9.345241,-4.333709,9.658939,4.487258,8.647128,-5.983647,6.695832,3.628619,1.564652,-6.113824,-8.960937,-9.061401,-3.476647,5.147539,7.141383,-2.922188,-5.698554,7.863693,0.898524,7.757791,4.787492,8.725113,4.027717,9.087605,-0.446522,1.791614,3.164276,-6.227657,5.391421,-0.923843,0.083586,4.784938,9.169459,9.284016,6.204706,7.959139,9.744797,-1.655332,5.664894,7.052602,5.904700,6.968443,-9.930114,-7.706308,7.035205,-3.576981,-3.732002,-8.696806,7.979195,-4.110312,-1.498843,1.428772,8.841826,4.796331,0.141926,-5.234561,5.245299,7.205184,8.774534,8.750876,-0.310304,1.371353,4.644117,4.821839,-8.376488,-7.679308,7.505599,-7.460493,9.985417,-0.544739,-6.691954,2.327827,-6.348755,-2.883540,1.022686,-0.289196,5.306801,-7.469639,-0.599257,9.607654,4.386175,1.284561,9.197800,6.676361,0.083492,0.523799,7.199131,0.073776,1.899665,4.096032,3.448032,7.149748,-3.108564,-4.429571,1.847367,3.516860,0.080409,6.204206,-3.745562,8.842730,-8.762237,6.380356,8.094235,6.172007,-5.420335,2.237302,4.346922,1.444748,-9.866459,-8.398221,7.513160,3.965748,-4.368951,-5.804103,3.203218,3.778883,-9.847696,5.234160,8.989912,2.232054,-4.427421,-3.669986,5.634238,3.543301,7.067746,7.724129,7.491993,3.500367,7.587123,-8.009470,6.053246,0.489907,-6.196311,3.519645,2.191990,-9.065247,-7.039667,6.021628,-4.856148,8.573970,-0.402004,-6.925756,7.599417,-0.769699,1.775462,-3.613750,-9.799182,4.178392,-5.818239,-6.882595,4.546950,8.584516,6.173229,0.219530,3.448102,5.011280,5.230193,3.096572,8.788505,8.112149,-0.139542,5.637803,3.349227,-3.082495,-3.605476,-7.203122,3.869954,8.204629,-0.154249,-2.783225,9.874272,-1.106510,8.683563,-0.858413,8.217525,-1.145519,9.399443,-6.031910,-0.937474,-8.318887,7.127342,-4.688869,0.706848,-6.562672,-7.555898,6.663571,-9.539821,-8.577473,-9.325354,9.139579,-7.947550,6.986405,8.481497,4.592255,-7.883730,-3.414921,-4.362499,-0.258635,-5.866017,8.524963,3.470593,3.836229,-7.343486,-2.385040,-7.150137,-9.842480,8.186086,-9.127332,7.566132,-9.688574,9.780480,-7.876014,9.993317,1.564208,2.021971,-8.656252,-3.632547,-8.082856,4.311909,7.190920,-1.599474,-4.213509,8.799419,7.313898,-2.402706,9.187921,-1.417756,2.432489,-9.635524,-1.423786,-3.190467,5.616858,-1.805731,7.297094,-7.889395,0.435057,2.210485,-1.896874,-2.994072,3.863908,4.317739,-8.241621,-0.490345,4.755991,8.729478,-7.535642,-1.323127,-0.518938,-1.413882,-7.086616,-0.965388,9.877755,7.048009,-3.286264,2.491168,6.582490,-6.650744,3.153480,0.560870,-9.784317,-7.300368,-4.058613,-1.764852,8.038686,6.047129,6.282394,5.985587,3.808326,-6.586988,-6.058692,5.234089,-6.383571,5.043297,5.185891,-8.493888,4.360797,-0.020831,0.447532,-5.956482,6.962662,-7.215737,7.797661,-9.315272,-0.950478,5.954282,-7.890396,-1.304978,-3.851133,-7.362059,6.320821,4.467107,5.792493,-4.489597,-7.379687,2.514609,-6.702977,-4.944957,5.328847,-1.617201,0.115348,-1.687898,3.671431,-1.670832,4.722407,4.507560,8.482497,1.856950,-5.603407,0.603015,5.864213,6.564726,-4.606936,9.531156,-7.496058,-5.825205,3.361264,0.321887,1.677896,0.167934,7.496369,8.150046,2.695364,0.332921,1.979219,0.901828,-8.189408,-6.332014,-7.552861,-8.854826,-0.895062,0.269183,-9.189524,-9.888227,-7.767595,-1.127463,-9.501936,9.846069,-3.468811,0.598303,2.409315,-0.370299,6.764987,2.115865,1.178222,-0.979439,-6.300580,3.885870,9.339134,-5.231374,9.699263,4.260466,1.586788,-0.115114,4.866049,3.838466,-1.688405,-9.896790,-5.910054,1.541921,-8.762847,5.803484,8.171100,5.422799,-0.274720,6.396864,-9.917474,5.625884,8.352408,0.674395,-3.728298,6.559199,6.062134,-8.091238,4.791226,5.589144,-1.694103,-4.300881,6.340552,-5.998703,-2.249300,-1.224624,-8.652946,-1.069075,0.118455,-9.427139,-4.595870,-7.731122,-5.594399,6.745215,-4.493774,7.095121,-5.806886,7.076895,8.003195,9.017322,7.346307,-5.422496,-8.152287,3.079642,-8.131646,1.515733,6.918617,-7.423280,-0.768556,-5.955011,-9.224017,5.439390,2.330820,2.789676,-7.710989,-9.475751,-8.786406,3.247734,1.300225,-4.571675,9.766707,-1.135270,3.664433,-5.894426,0.982884,-0.356470,-9.036610,-3.425192,-3.766768,-0.866673,-4.559392,-7.350789,6.325841,0.358286,-5.627636,-3.175762,0.750840,7.105191,-2.015223,1.601016,-5.207130,2.131946,9.040554,-2.019239,2.684445,9.096268,-0.123010,-8.925762,0.027649,-1.632547,2.178759,7.146643,-9.488021,6.298595,-5.653075,-7.042755,0.316855,6.155851,7.963848,-8.885933,-1.721938,-6.605299,-9.982120,-5.535958,9.937328,7.206366,-6.364604,7.699965,7.781090,3.310289,7.511024,-1.893524,8.488070,-3.940042,-0.241167,-6.666914,-1.513227,2.581558,3.797048,-0.925518,-6.981573,-4.537383,2.987587,4.361576,-7.588415,-4.885664,-0.902645,-9.582082,4.901670,-0.600084,-4.800065,-8.544222,-1.109702,4.938212,-6.909525,-4.104924,2.646120,5.042833,-8.278765,-5.344975,6.556177,8.273340,8.757429,9.642346,-3.436028,-1.393040,-8.136775,0.375039,-2.942368,1.374291,-9.780215,-2.928105,-5.318695,-3.799709,-7.478015,7.750462,-0.810155,-9.665331,8.462797,-9.841878,9.196276,-6.637841,1.053186,-8.179178,-7.893927,-1.398201,0.442763,-1.881485,-3.887456,2.555715,7.346892,-7.476940,6.492628,-1.393782,8.019397,-0.926886,6.162057,-1.374745,-5.783803,5.583050,-7.227221,1.880518,-1.084917,5.548987,4.760847,7.114483,-8.197515,-4.174795,-6.111418,-9.968523,3.037512,8.255569,1.136318,5.128747,-6.845067,-5.338349,1.410003,3.754858,3.628568,-4.841752,1.183031,-3.665629,-8.899654,3.940168,2.781410,-3.341507,-2.585103,2.836358,2.513115,3.978774,1.333537,0.624771,6.408112,-6.252893,1.766113,3.759163,1.580028,-2.367185,-2.091420,-1.226006,8.653697,-0.836346,-8.649969,3.224155,3.068868,-1.881030,-6.000357,8.643493,-7.506780,1.009932,-9.317034,-5.765568,-0.355055,5.037135,-6.901485,-8.708928,-1.418366,2.087889,-3.298845,5.149269,3.656430,2.375798,4.190836,3.306970,-5.153851,2.006785,-3.110919,-4.539127,9.785018,2.453303,-0.309474,0.478635,7.235287,2.299313,-5.058479,8.602318,-4.017721,5.461813,5.556786,3.298226,8.572666,-8.119481,-7.170778,-3.941091,9.666462,2.235670,0.970184,-7.318653,8.631493,4.309155,-0.754454,4.190219,7.457392,-1.268522,-0.646673,-8.064665,0.429598,8.385793,-2.123839,2.207266,4.697539,6.956096,9.216043,7.017278,1.865121,-0.847357,3.387496,5.821824,8.157386,4.106851,0.638388,9.232135,5.376526,6.065094,9.356434,4.613574,9.326555,5.180561,-8.457232,-8.946741,6.207372,-4.968318,-9.974628,0.733485,3.052866,2.542484,5.211725,2.896928,7.068486,-2.384383,6.829537,-4.814404,-4.805770,-1.151905,-7.320034,-9.532780,7.717125,2.809935,-0.987823,7.066251,9.434415,9.375989,-7.803081,6.466314,9.877753,-5.346857,1.799306,0.465725,-3.706383,9.248124,-1.685760,5.164082,-2.871207,-3.643510,5.818114,-5.654660,-1.930125,5.805748,0.663769,6.789899,-0.512059,1.466614,-2.555937,4.398977,-0.111350,8.035032,5.473376,2.164091,9.138061,-5.629044,2.595324,-0.520502,-1.834159,-3.209002,-5.752309,-8.916876,1.956825,5.551891,0.094356,5.701683,1.293874,-2.245260,4.719035,-6.152838,5.480616,0.438719,3.959295,8.145823,-5.903190,8.776752,2.229768,9.673392,-3.280605,-6.603098,-0.518770,5.200420,-6.447519,-2.726818,7.543709,9.424436,1.207133,-6.991599,-3.896806,1.282200,6.165221,4.114785,-9.129869,-6.129497,3.751304,-4.283945,-6.251099,5.282121,-2.875433,-9.230028,-1.562786,-2.884388,-9.339424,6.537282,-4.949390,2.459050,3.210615,-8.263464,-8.686325,-9.409410,7.493049,9.631132,2.418832,8.641353,-5.200433,0.784951,6.213551,-8.775941,-2.764751,-0.190602,-5.197101,6.017272,-5.750744,-9.935844,-2.095225,9.477315,6.243129,8.830132,4.622330,-1.860607,-3.664130,5.902597,-5.549626,1.724173,9.333605,7.202162,-7.697774,5.677263,6.638695,8.538834,0.326657,3.297139,0.834575,7.236168,8.056624,-3.346868,1.551807,7.726486,4.842568,6.685271,-6.749488,7.661088,1.110824,-1.784021,-4.060655,-9.102170,-1.084908,-5.324420,-1.916843,-7.907742,-8.034098,0.893667,-0.334419,7.251343,6.976216,-5.382862,2.524457,-8.809560,2.738086,8.873900,-0.280548,8.384423,-6.271188,-5.240822,5.087585,-6.440070,4.731326,6.106287,7.003880,-7.879868,9.262291,-4.498113,-8.584257,2.976156,5.700586,7.609376,-8.166292,-4.362741,-4.842760,2.773103,-8.119281,5.302288,3.161481,4.982462,5.006218,-9.321816,9.395731,-4.785877,1.373365,2.061561,-2.117226,6.716568,8.338088,9.259214,-0.113768,5.582595,8.771032,7.951148,6.069244,3.185570,-4.451740,-1.660137,-4.180911,0.090236,-1.027126,3.944330,3.646371,-1.341706,-7.096329,-1.204530,-6.992419,9.122439,3.108218,6.201571,-0.294782,0.295023,-6.246184,-0.512151,-8.378656,-3.745813,-9.373149,-7.036238,-2.678931,-5.043055,-4.005801,-2.872318,-2.427899,-2.157804,-1.235600,-7.612939,-0.355429,7.346052,1.516820,-9.720372,3.678039,9.477126,-3.870253,2.662199,-8.810419,6.982352,-1.856903,5.538708,-1.242780,-1.906782,9.352442,9.877063,0.697363,-9.901252,-1.321181,-5.381308,-8.212924,3.982628,2.094258,6.911818,-4.446927,6.196858,-4.278658,0.295241,-1.546567,7.675673,-4.362585,-0.863276,4.626323,4.226523,1.181234,6.653251,4.096152,-9.244035,7.135172,-6.493934,-6.717692,2.208166,-3.645901,6.861400,-6.831312,4.570700,5.384940,-5.054958,-5.213207,-8.443180,-6.678383,4.458484,-7.678127,-4.507741,-9.172709,0.981233,-3.735334,6.342699,9.075981,-3.938779,-8.308405,1.126897,4.629389,-6.984370,1.055486,6.404796,2.360604,5.425069,-6.472508,7.253975,-3.680985,4.312443,4.410052,0.845654,-7.938255,8.093755,1.978868,-9.273604,-7.007858,4.973617,-5.359140,1.511773,1.343251,8.793201,7.338411,-4.372190,-4.175917,-8.291794,4.031163,-7.423990,0.038190,-4.743305,-2.999187,2.768648,7.359254,-7.294288,1.606309,6.210327,-6.055434,-9.353118,-2.333818,1.523917,2.972983,-5.783957,-9.022699,-7.970498,-1.866577,-1.016134,6.726818,-8.250716,-0.613194,-7.158495,-2.676745,1.903824,7.593060,-5.776375,-6.479988,-8.060415,-6.711037,-1.980805,6.629349,-9.795699,7.592450,1.369846,5.933176,-5.217689,-8.946992,9.200228,-3.326111,-5.073828,0.114840,0.134090,-5.120338,2.822248,8.465969,1.818876,-5.223354,-8.477344,3.303089,-9.380886,9.995559,-4.053627,-9.181763,3.387603,-9.388486,-4.945272,-5.276021,-9.337758,5.110480,0.556980,6.220052,8.752816,0.581046,-8.031295,9.332808,6.638083,3.709726,8.320430,4.892822,-1.187789,-9.068464,0.832432,2.544839,9.454727,3.985966,2.083451,-4.229311,-3.256373,-0.290582,-4.191781,-3.242678,6.695499,3.781107,1.675218,2.658917,5.922512,-1.027059,-0.747455,-4.573368,-3.410409,0.227247,-6.408801,-6.512526,2.037467,3.721720,8.389763,9.184646,6.948232,6.470047,5.786194,8.357755,-3.972898,-2.638477,8.838756,-1.389446,-9.929442,8.306700,1.879358,-6.289920,-2.123196,-0.936563,8.804431,-6.449641,4.863564,8.210177,-7.443022,5.411826,-6.303481,-8.029597,-5.809592,9.049975,-8.964642,3.266654,-2.924796,-1.991844,-0.175151,-1.555883,-9.562871,-8.032795,-8.620474,-3.241330,-0.213227,8.512787,1.090912,-7.831324,4.555550,8.376988,-7.959585,1.633125,-9.394861,-7.372342,6.983465,-2.682653,9.315104,5.191941,-4.369038,1.280345,0.749034,4.754927,-3.563516,-0.720949,8.727674,9.657148,-4.073741,-3.742341,-6.778930,3.278007,-6.507144,4.553799,7.948892,3.668627,-5.762839,-9.826683,-1.372970,0.918358,-5.880648,-1.844654,0.684311,9.231234,-6.916106,-0.737048,-6.178272,-0.850199,8.431478,4.066409,-4.869371,-1.759711,8.369320,-6.388830,-5.499303,-7.348924,9.959274,-6.384341,-4.918459,0.535931,8.076422,8.595347,2.806569,-6.916531,0.965012,4.984036,5.945493,-7.514772,4.454013,-3.005479,-9.058212,-5.483173,2.384411,-5.151537,-5.396079,-6.559387,4.181795,-6.969209,-5.710557,3.415312,-9.653222,6.737217,-3.607936,-9.878362,9.412015,8.913028,3.388960,2.626199,-0.230125,-0.290056,0.168440,0.670515,-7.799300,-7.678161,-6.600684,-9.488460,-1.180733,-6.187940,0.881829,-2.405772,6.813106,1.920368,0.245668,5.205652,-6.285764,5.640957,3.881085,9.203780,-7.721475,-6.811204,5.237378,1.385736,-0.719499,8.396990,-0.627675,-6.941467,0.501466,-2.083206,1.208876,3.793566,5.806673,3.857262,8.135245,-5.226857,-6.356140,-6.680513,2.102604,-1.439089,-4.192499,6.357828,4.015613,-3.679268,6.639530,-4.251920,4.253037,6.427325,-8.450079,2.366052,1.896684,0.410259,-4.772820,7.136574,2.576994,4.510382,9.880613,-8.837717,4.184462,-0.813313,5.474569,5.792830,-4.296241,6.040368,5.024426,-6.134305,-3.004825,1.372639,4.972577,-7.168122,-6.465398,-3.432453,-5.551391,-8.116518,-4.362582,2.335485,2.551656,-2.314842,8.746769,-7.590177,-2.221953,1.866780,-4.485664,5.608316,2.366876,-2.820270,9.794097,-1.222861,4.237571,9.347630,8.444015,7.316135,1.692964,-8.850468,3.526498,-4.023591,0.211594,-5.344641,-1.213610,6.839650,6.466703,7.937258,3.812951,6.865443,-5.872151,-2.250302,4.606732,9.855196,4.102563,8.016625,-0.972796,-2.495793,8.005082,-9.170238,-3.621059,1.715955,5.658615,-5.114193,-9.766680,-3.219390,8.800520,-1.051969,-7.056461,5.035660,7.900272,4.761941,-1.109818,9.596156,-6.665374,5.206615,-4.021998,5.092609,1.013757,-3.825014,5.474437,8.156713,4.913581,0.551239,6.240059,7.876065,4.393092,-1.979184,-5.832591,8.753893,2.408738,7.233455,7.768151,-3.603768,-1.396585,1.816304,5.349777,-9.644786,-8.163245,-3.445041,6.720292,0.597888,-2.282184,-3.916791,7.824595,-2.169786,4.604728,-9.872293,-3.991207,1.439744,7.966065,-5.472934,5.250573,1.498021,-1.530045,7.006532,3.115058,-1.983426,1.117065,-0.243732,-8.432261,9.071534,-6.787163,-4.082219,-2.098594,-4.863289,-7.702016,-2.447067,3.683410,-7.275374,-5.264975,0.164886,-3.318773,9.445305,8.931231,-3.115401,-6.624166,3.362759,-7.126617,0.175436,1.047744,-7.343945,-3.679559,-6.830889,9.732158,4.411961,-9.126703,8.894070,-2.569386,-6.235541,6.760152,4.564042,4.354750,-4.689232,2.615469,-8.514746,6.210740,-4.826188,-9.748815,-4.836328,1.529565,1.633395,-1.606401,-0.791488,5.292193,-1.572813,-5.911028,6.517015,-4.844170,7.836401,4.171064,4.161442,-7.693028,0.795874,-4.428898,-9.405979,3.657671,6.157335,0.226871,7.116176,3.900240,0.512171,5.498358,8.348297,-2.943251,7.036508,-1.460559,8.552986,9.450085,9.096847,-2.083944,6.762933,7.175787,8.243826,8.705377,-7.051696,8.712966,-2.465757,-3.035871,-1.846453,-3.995443,-4.721014,-2.927755,9.994264,-7.615195,0.898802,8.339278,8.536882,-1.750338,4.039828,6.619714,-2.301882,0.842659,7.833050,-0.496226,-6.366270,-9.133993,9.119668,-4.342279,-8.240065,-9.957288,8.932321,-9.601820,-4.616341,-2.361276,-0.024728,8.496105,-8.297102,2.693197,-2.029952,8.562348,-0.194777,-6.248949,4.482979,1.004182,1.714311,1.654832,9.134881,0.051191,-1.707307,6.777232,9.920277,3.300216,7.372806,-4.652123,-5.746181,-4.133351,0.369248,3.262763,-2.852502,-0.959069,-7.508415,-5.168015,3.224275,9.834620,6.183231,9.544974,-7.132065,-0.722226,2.042452,0.196461,0.673821,0.828142,-0.193861,0.023494,7.575094,2.218777,7.001898,8.486745,2.486851,9.526781,6.166026,-4.590015,8.616660,0.049265,5.819885,9.084874,-3.956149,7.370881,9.310102,2.013369,-1.830722,-2.912023,3.321899,-4.437275,-6.923286,2.331086,-2.799611,9.097610,9.475788,8.257122,-8.702127,1.507231,3.332293,8.819683,2.402699,2.030525,3.012414,1.538421,6.919743,-8.726259,5.046689,7.964945,2.982733,-3.003777,2.029561,2.341572,-9.391056,-4.534106,0.495430,-4.544010,7.583853,-0.266389,4.416335,7.549523,2.641257,-7.599266,7.703754,3.548905,6.123007,8.619228,4.547100,-7.938667,3.179724,9.039977,-8.688445,2.266497,5.847402,2.186440,-2.882710,4.300703,-5.281597,-3.385009,7.431448,-9.093537,9.276870,3.883108,-9.430929,-3.368575,-2.876084,-1.764908,9.699410,-0.574652,9.837658,5.445171,-5.662714,0.340930,3.240395,6.164039,3.854327,8.534936,8.322281,8.689564,-6.395830,-7.825808,3.381121,2.633888,-7.606378,6.868493,3.704213,1.017454,2.222123,-4.944878,5.832968,8.461464,0.241721,7.044178,2.767385,-2.232351,4.327907,0.189751,5.571007,6.871594,-7.222571,5.027421,-2.677808,-4.586627,-5.787216,-8.836348,-4.081596,-9.926608,-5.849756,-9.822110,5.189591,5.372882,9.503420,8.957375,0.848730,6.136198,-3.053711,-3.475836,5.483390,-0.731983,0.918130,6.501543,9.854783,-1.506919,-5.214984,2.874342,0.504804,-0.017602,9.559321,-4.027795,-7.720999,6.573113,-2.155299,5.415713,-3.234831,7.633839,-1.674233,8.434503,3.271199,4.732237,-4.439968,1.351067,7.243498,0.601326,1.348725,-6.322651,8.297744,-0.161941,3.674616,8.777432,-5.496901,7.601086,-7.804876,-0.432834,-7.280437,9.489341,-3.435115,1.254299,-0.516716,2.229734,-8.586866,7.053875,9.383135,5.141874,-9.778987,-7.629813,-0.401886,3.227774,-1.573497,-0.967599,-3.719653,8.287505,-3.518194,-9.853548,0.428277,-5.973586,2.485201,0.432928,-5.517513,1.417095,-1.129701,2.749823,-9.440322,8.854716,-9.605105,2.939764,6.241707,3.802958,1.171519,-0.309714,0.596798,-1.690922,-8.837054,9.747135,0.272910,7.356625,-5.373637,-1.811654,-6.192785,8.685415,1.727147,6.292112,-7.416347,-2.361123,-2.141521,-2.037149,8.880175,6.997394,5.405800,-4.680979,5.773686,-6.163669,-0.260013,-8.297601,-0.510407,0.068842,7.517150,-2.474595,-8.921780,3.808222,2.494660,-3.087080,2.420271,-3.722751,2.759423,0.812944,6.218857,-3.621980,-6.114444,-8.522577,6.732213,-6.686631,-8.673816,-9.492368,7.396297,3.774278,5.665083,7.124224,5.713836,8.961825,6.099093,-1.635106,-1.015138,-4.451946,5.438420,5.480292,6.878825,8.527533,-9.985166,-2.151922,-1.301249,-1.202096,7.482232,-3.455380,-0.438823,3.097546,-9.572085,-6.171853,9.067612,5.926382,2.752318,9.392207,-2.044360,-0.319320,-4.293526,-2.668104,-5.531677,-7.175835,-9.683263,8.268969,1.441293,-9.844249,-6.898101,-5.821098,-8.803084,-8.854230,6.795853,-0.197594,3.113677,-8.192759,3.216094,-2.551238,-6.409880,9.279155,2.195247,8.980866,-7.989805,-5.897277,-8.364305,-8.013394,-4.002289,-1.654781,-3.469734,3.522313,5.570717,4.417383,-9.115514,-8.580995,-5.425577,1.048464,-7.764689,-3.511252,2.504537,1.410543,-0.328729,-8.634395,2.167728,-0.767236,8.473522,7.691062,1.637988,7.835298,-6.738921,-0.334313,5.280690,-7.829578,-4.686706,-0.196332,6.649651,9.319813,0.350439,-3.040911,-0.098692,-2.450741,-8.081515,-2.256230,-4.922823,6.353348,-0.182827,-7.079392,5.447581,4.649702,4.832613], dtype = "float64")#candidate|5385|(2560,)|const|float64
bop_5386 = relay.mod(call_5379.astype('float32'), relay.reshape(const_5385.astype('float32'), relay.shape_of(call_5379))) # shape=(2560,)
bop_5389 = relay.mod(call_5380.astype('float32'), relay.reshape(const_5385.astype('float32'), relay.shape_of(call_5380))) # shape=(2560,)
func_774_call = mod.get_global_var('func_774')
func_778_call = mutated_mod.get_global_var('func_778')
const_5402 = relay.const([7.566757,4.782885,-3.957372,-4.768973,-3.660461,-9.560478,-8.726746,-8.603567,-3.522920,2.791290,-7.604899,5.672569,8.847486,-2.954408,4.361873,0.870985,-8.500297,-6.680809,-6.602409,-6.191678,-7.913036,-7.900086,-5.724797,-3.702631,-3.922459,6.499832,1.992418,3.602026,4.850975,-9.281093,0.315652,5.781640,-9.085708,2.815699,6.406449,8.843001,-5.914722,-2.030718,-6.336390,2.547888,1.218614,-7.882332,0.091489,2.787574,1.922715,-8.288394,-9.673551,-8.452118,8.991376,7.330762,3.590852,-2.858176,0.593142,-6.666963,5.381081,-8.027472,-6.457208,4.503360,8.660442,-4.049248], dtype = "float32")#candidate|5402|(60,)|const|float32
call_5401 = relay.TupleGetItem(func_774_call(relay.reshape(const_5402.astype('float32'), [3, 10, 2]), relay.reshape(const_5402.astype('float32'), [3, 10, 2]), relay.reshape(const_5402.astype('float32'), [3, 10, 2]), ), 0)
call_5403 = relay.TupleGetItem(func_778_call(relay.reshape(const_5402.astype('float32'), [3, 10, 2]), relay.reshape(const_5402.astype('float32'), [3, 10, 2]), relay.reshape(const_5402.astype('float32'), [3, 10, 2]), ), 0)
output = relay.Tuple([bop_5386,call_5401,const_5402,])
output2 = relay.Tuple([bop_5389,call_5403,const_5402,])
func_5404 = relay.Function([], output)
mod['func_5404'] = func_5404
mod = relay.transform.InferType()(mod)
output = func_5404()
func_5405 = relay.Function([], output)
mutated_mod['func_5405'] = func_5405
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4920_call = mod.get_global_var('func_4920')
func_4921_call = mutated_mod.get_global_var('func_4921')
call_5454 = func_4920_call()
call_5455 = func_4920_call()
output = relay.Tuple([call_5454,])
output2 = relay.Tuple([call_5455,])
func_5456 = relay.Function([], output)
mod['func_5456'] = func_5456
mod = relay.transform.InferType()(mod)
mutated_mod['func_5456'] = func_5456
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5456_call = mutated_mod.get_global_var('func_5456')
call_5457 = func_5456_call()
output = call_5457
func_5458 = relay.Function([], output)
mutated_mod['func_5458'] = func_5458
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5059_call = mod.get_global_var('func_5059')
func_5061_call = mutated_mod.get_global_var('func_5061')
call_5510 = relay.TupleGetItem(func_5059_call(), 0)
call_5511 = relay.TupleGetItem(func_5061_call(), 0)
func_1332_call = mod.get_global_var('func_1332')
func_1335_call = mutated_mod.get_global_var('func_1335')
var_5514 = relay.var("var_5514", dtype = "uint32", shape = ())#candidate|5514|()|var|uint32
const_5515 = relay.const([1,4,-9,-3,-9,-9,4,-6,1,-7,6,3,-8,-9,-7,3,8,-2,-6,5,5,-10,-5,8,-6,5,8,-2,-10,9,9,-7,-9,5,-1,1,-4,7,-9,7,1,-9,-10,7,4,-9,-10,-2,-3,-6,-7,10,-2,-3,3,6,4,5,8,5,-10,5,-9,2,-3,-6,-7,-4,-7,-10,8,4,-3,9,-3,-3,9,6,4,1,6,2,6,-2,4,3,10,-6,-8,-4,9,7,-7,5,-1,-3,-4,2,-10,2,8,5,-5,-1,-6,-6,-4,3,8,-3,4,7,10,7,8,3,5,4,-1,-2,1,1,5,-5,2,3,5,-2,-1,-6,-10,-7,-6,-6,-7,3,-8,-1,8,5,7,4,8,-8,6,-10,-2,-3,7,5,-8,1,-3,-9,10,1,-2,9,4,8,1,8,4,-2,-9,-8,5,10,-2,1,3,-1,-8,4,8,-1,10,2,9,9,-1,2,4,6,-3,10,-10,2,1,-7,5,-10,7,1,8,-3,-6,-6,1,10,10,9,-3,7,4,-5,-4,-8,-10,9,10,8,-1,10,-8,-3,10,-8,4,7,9,-10,8,6,-6,6,10,-4,8,-10,-4,-5,-8,9,8,1,9,-2,9,7,-2,-3,-6,-3,3,-1,8,-3,-8,-10,8,4,5,6,-4,1,-5,10,5,6,-7,-5,2,5,10,-8,9,8,8,7,-7,9,5,3,-3,8,-7,-8,2,-1,-9,1,-1,-1,2,-2,-6,-9,2,-1,-1,6,-1,-7,8,-5,6,-4,-4,-7,-10,-3,2,9,4,-1,-8,-10,-3,-2,-6,-7,-3,-9,-5,1,-7,-4,-6,5,3,-2,-2,2,1,6,10,-10,-4,8,-9,-7,-3,5,5,7,5,1,-6,-3,-6,6,2,-9,-9,8,-7,-4,5,10,-1,-8,-10,6,-1,-3,-7,2,-7,8,7,-1,8,-7,-5,2,5,4,10,-1,8,9,3,5,-2,5,6,8,-1,6,1,4,10,1,-8,3,8,-1,3,10,-8,9,-1,7,-9,10,3,-5,-3,-4,-1,-9,9,10,6,9,7,8,-4,-1,-10,-4,6,7,-6,-2,-8,-5,-1,-8,5,8,7,9,1,-6,-1,-5,2,8,-2,6,-3,6,-4,-8,-2,-10,-4,-10,-6,-7,9,-4,5,10,2,9,4,9,10,8,6,10,-4,-5,9,9,-6,-10,5,-10,3,-4,7,-7,-3,-8,3,-6,-2,-1,-5,-10,3,3,9,9,-3,3,8,-8,6,-7,5,8,-6,-8,-1,-1,-10,4,-8,-3,8,2,7,5,5,4,7,7,3,4,6,8,-2,7,-7,-2,8,9,3,9,-9,-9,-5,10,4,1,1,-7,-2,-2,5,-4,-7,8,-8,-7,-2,-3,-5,-4,-9,10,-4,5,-1,7,-1,1,-3,-10,-10,7,-5,8,3,8,6,-2,-5,8,-5,4,-3,6,5,-8,4,6,6,-9,5,3,-5,6,3,6,9,4,4,-10,5,-8,3,-10,8,-10,-7,8,7,2,8,-5,-5,-8,8,-1,-8,-2,3,-10,1,7,2,-10,7,-10,-9,1,4,6,-1,-5,-4,-10,10,9,1,-1,-9,-3,-2,-5,-7,-6,8,-5,9,-8,8,1,7,9,-5,-4,-3,5,1,8,-6,1,6,-3,-5,-9,8,-2,9,-6,4,-1,6,-2,-3,4,-5,-3,2,-8,-8,1,9,2,7,-2,-7,-5,8,9,8,-1,10,-7,-2,1,-4,-6,6,-10,-8,-3,7,8,-7,-7,2,-9,-3,-5,3,-5,-8,9,2,8,-4,-5,-1,6,-1,3,10,6,-10,8,-4,-10,7,6,-1,-7,5,5,8,2,-4,-3,-10,-8,9,-4,1,5,3,5,-4,-8,8,-5,-5,-6,-5,-3,-9,5,-7,10,1,7,-5,-8,7,-1,9,1,-2,-5,7,2,-9,3,4,-5,7,8,4,-4,-2,-8,-1,-7,6,-2,9,9,10,3,5,10,-2,5,-6,7,-4,-1,3,-9,-1,2,-4,-8,-2,8,-1,-9,-9,-8,-5,-3,1,-3,-1,3,-3,1,-5,2,2,-3,10,-7,-6,4,-2,-10,10,-7,-8,-4,-5,-8,4,6,-2,10,-2,-3,-1,-10,3,-8,-5,-5,-5,-6,3,-9,-6,2,7,-9,6,9,-8,-2,1,3,5,1,-4,8,-10,4,-5,3,-6,-3,6,-2,1,3,-4,-9,4,-8,-6,-8,7,-2,8,-6,-10,9,-1,8,6,5,10,8,-4,4,5,6,-2,4,-6,4,-9,9,5,3,1,-3,4,4,-8,-9,8,4,-6,10,9,5,1,10,-3,7,-3,-2,-2,6,-3,-6,10,3,-8,-7,8,-7,-10,-5,1,5,-4,2,3,9,-3,-9,5,-1,4,2,-2,3,7,4,-1,4,8,-3,-4,-7,5,1,7,-3,-10,4,-3,5,-6,9,-8,3,9,-6,-8,1,10,-3,2,1,2,-3,4,-6,6,8,-8,-1,6,-1,2,-8,-4,1,-1,-9,8,8,1,-2,9,3,10,-6,3,1,-1,-8,-1,2,-1,-3,-2,-3,-6,10,-7,-5,-10,1,10,9,-10,6,-7,-3,9,9,8,-2,1,4,-6,-2,1,10,-7,5,-5,9,9,-10,8,8,5,4,4,3], dtype = "uint32")#candidate|5515|(1014,)|const|uint32
call_5513 = relay.TupleGetItem(func_1332_call(relay.reshape(var_5514.astype('uint32'), []), relay.reshape(const_5515.astype('uint32'), [13, 6, 13]), ), 0)
call_5516 = relay.TupleGetItem(func_1335_call(relay.reshape(var_5514.astype('uint32'), []), relay.reshape(const_5515.astype('uint32'), [13, 6, 13]), ), 0)
func_3464_call = mod.get_global_var('func_3464')
func_3466_call = mutated_mod.get_global_var('func_3466')
var_5519 = relay.var("var_5519", dtype = "float64", shape = (104,))#candidate|5519|(104,)|var|float64
call_5518 = relay.TupleGetItem(func_3464_call(relay.reshape(var_5519.astype('float64'), [2, 4, 13])), 2)
call_5520 = relay.TupleGetItem(func_3466_call(relay.reshape(var_5519.astype('float64'), [2, 4, 13])), 2)
func_4473_call = mod.get_global_var('func_4473')
func_4474_call = mutated_mod.get_global_var('func_4474')
call_5527 = relay.TupleGetItem(func_4473_call(), 0)
call_5528 = relay.TupleGetItem(func_4474_call(), 0)
output = relay.Tuple([call_5510,call_5513,var_5514,const_5515,call_5518,var_5519,call_5527,])
output2 = relay.Tuple([call_5511,call_5516,var_5514,const_5515,call_5520,var_5519,call_5528,])
func_5529 = relay.Function([var_5514,var_5519,], output)
mod['func_5529'] = func_5529
mod = relay.transform.InferType()(mod)
var_5530 = relay.var("var_5530", dtype = "uint32", shape = ())#candidate|5530|()|var|uint32
var_5531 = relay.var("var_5531", dtype = "float64", shape = (104,))#candidate|5531|(104,)|var|float64
output = func_5529(var_5530,var_5531,)
func_5532 = relay.Function([var_5530,var_5531,], output)
mutated_mod['func_5532'] = func_5532
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5349_call = mod.get_global_var('func_5349')
func_5351_call = mutated_mod.get_global_var('func_5351')
call_5573 = relay.TupleGetItem(func_5349_call(), 0)
call_5574 = relay.TupleGetItem(func_5351_call(), 0)
var_5576 = relay.var("var_5576", dtype = "float32", shape = (8, 8, 7))#candidate|5576|(8, 8, 7)|var|float32
bop_5577 = relay.minimum(call_5573.astype('uint32'), var_5576.astype('uint32')) # shape=(8, 8, 7)
bop_5580 = relay.minimum(call_5574.astype('uint32'), var_5576.astype('uint32')) # shape=(8, 8, 7)
uop_5589 = relay.erf(bop_5577.astype('float32')) # shape=(8, 8, 7)
uop_5591 = relay.erf(bop_5580.astype('float32')) # shape=(8, 8, 7)
func_5529_call = mod.get_global_var('func_5529')
func_5532_call = mutated_mod.get_global_var('func_5532')
const_5601 = relay.const(1, dtype = "uint32")#candidate|5601|()|const|uint32
var_5602 = relay.var("var_5602", dtype = "float64", shape = (104,))#candidate|5602|(104,)|var|float64
call_5600 = relay.TupleGetItem(func_5529_call(relay.reshape(const_5601.astype('uint32'), []), relay.reshape(var_5602.astype('float64'), [104,]), ), 2)
call_5603 = relay.TupleGetItem(func_5532_call(relay.reshape(const_5601.astype('uint32'), []), relay.reshape(var_5602.astype('float64'), [104,]), ), 2)
output = relay.Tuple([uop_5589,call_5600,const_5601,var_5602,])
output2 = relay.Tuple([uop_5591,call_5603,const_5601,var_5602,])
func_5621 = relay.Function([var_5576,var_5602,], output)
mod['func_5621'] = func_5621
mod = relay.transform.InferType()(mod)
var_5622 = relay.var("var_5622", dtype = "float32", shape = (8, 8, 7))#candidate|5622|(8, 8, 7)|var|float32
var_5623 = relay.var("var_5623", dtype = "float64", shape = (104,))#candidate|5623|(104,)|var|float64
output = func_5621(var_5622,var_5623,)
func_5624 = relay.Function([var_5622,var_5623,], output)
mutated_mod['func_5624'] = func_5624
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5059_call = mod.get_global_var('func_5059')
func_5061_call = mutated_mod.get_global_var('func_5061')
call_5668 = relay.TupleGetItem(func_5059_call(), 0)
call_5669 = relay.TupleGetItem(func_5061_call(), 0)
output = call_5668
output2 = call_5669
func_5681 = relay.Function([], output)
mod['func_5681'] = func_5681
mod = relay.transform.InferType()(mod)
mutated_mod['func_5681'] = func_5681
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5681_call = mutated_mod.get_global_var('func_5681')
call_5682 = func_5681_call()
output = call_5682
func_5683 = relay.Function([], output)
mutated_mod['func_5683'] = func_5683
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5684 = relay.var("var_5684", dtype = "bool", shape = (7, 14, 14))#candidate|5684|(7, 14, 14)|var|bool
var_5685 = relay.var("var_5685", dtype = "bool", shape = (7, 14, 14))#candidate|5685|(7, 14, 14)|var|bool
bop_5686 = relay.logical_and(var_5684.astype('bool'), relay.reshape(var_5685.astype('bool'), relay.shape_of(var_5684))) # shape=(7, 14, 14)
func_4553_call = mod.get_global_var('func_4553')
func_4555_call = mutated_mod.get_global_var('func_4555')
call_5690 = relay.TupleGetItem(func_4553_call(), 0)
call_5691 = relay.TupleGetItem(func_4555_call(), 0)
func_5404_call = mod.get_global_var('func_5404')
func_5405_call = mutated_mod.get_global_var('func_5405')
call_5704 = relay.TupleGetItem(func_5404_call(), 1)
call_5705 = relay.TupleGetItem(func_5405_call(), 1)
var_5728 = relay.var("var_5728", dtype = "bool", shape = (7, 14, 14))#candidate|5728|(7, 14, 14)|var|bool
bop_5729 = relay.greater_equal(bop_5686.astype('bool'), relay.reshape(var_5728.astype('bool'), relay.shape_of(bop_5686))) # shape=(7, 14, 14)
func_2034_call = mod.get_global_var('func_2034')
func_2037_call = mutated_mod.get_global_var('func_2037')
const_5737 = relay.const([-8.099765,0.271859,9.324129,7.176249,6.272986,5.124595,5.091518,-3.031642,1.920922,-1.669448,0.229226,4.321392,8.574832,-3.556438,-1.362206,3.515435,6.329896,8.667627,5.709367,9.452237,8.133832,-5.523813,4.745024,6.506793,-8.432081,-3.888985,-6.140407,-8.905466,-6.259605,-3.741285,-3.007969,-4.604328], dtype = "float64")#candidate|5737|(32,)|const|float64
call_5736 = relay.TupleGetItem(func_2034_call(relay.reshape(const_5737.astype('float64'), [2, 2, 8])), 0)
call_5738 = relay.TupleGetItem(func_2037_call(relay.reshape(const_5737.astype('float64'), [2, 2, 8])), 0)
output = relay.Tuple([call_5690,call_5704,bop_5729,call_5736,const_5737,])
output2 = relay.Tuple([call_5691,call_5705,bop_5729,call_5738,const_5737,])
func_5748 = relay.Function([var_5684,var_5685,var_5728,], output)
mod['func_5748'] = func_5748
mod = relay.transform.InferType()(mod)
var_5749 = relay.var("var_5749", dtype = "bool", shape = (7, 14, 14))#candidate|5749|(7, 14, 14)|var|bool
var_5750 = relay.var("var_5750", dtype = "bool", shape = (7, 14, 14))#candidate|5750|(7, 14, 14)|var|bool
var_5751 = relay.var("var_5751", dtype = "bool", shape = (7, 14, 14))#candidate|5751|(7, 14, 14)|var|bool
output = func_5748(var_5749,var_5750,var_5751,)
func_5752 = relay.Function([var_5749,var_5750,var_5751,], output)
mutated_mod['func_5752'] = func_5752
mutated_mod = relay.transform.InferType()(mutated_mod)
const_5779 = relay.const([[[-5,7,-9,7,2,-10,2,-8,-6,6,-10,-1],[-4,1,-2,-3,8,-1,7,-4,8,1,-9,4],[-6,7,9,-5,6,2,1,-5,5,5,-7,-2],[-2,6,-2,5,3,5,1,6,8,-7,3,-7],[9,-4,-10,3,1,-3,10,-2,3,-6,1,-2],[-1,-7,3,7,-7,-10,7,-1,1,-3,4,-5],[-5,1,-4,-5,4,-1,10,-8,-9,4,-2,-6],[8,5,7,9,10,9,7,-10,8,7,-9,4],[3,-6,2,-7,1,2,-3,-1,-3,8,-4,8],[-10,-1,9,-9,-3,7,-8,4,8,9,-7,4],[-9,-9,-1,-5,3,1,1,-6,4,-10,10,4],[-1,9,1,9,6,-3,8,-9,5,-5,-10,3],[-4,8,10,-2,-3,1,4,4,-2,10,-6,-3]],[[9,-9,8,-2,-8,6,2,-9,9,-1,-3,-7],[-3,-3,4,-1,-3,-1,-4,-5,5,10,-1,2],[-10,7,9,8,-8,2,8,-6,-4,2,-4,-2],[-2,6,-3,5,3,-9,-5,4,-8,7,10,5],[-4,5,7,5,-10,-3,1,-8,-10,-9,-2,10],[9,-5,3,-4,10,3,5,-7,10,9,7,-8],[-6,4,9,-9,-1,9,6,-9,1,4,-3,-2],[-10,-6,2,-6,2,6,1,-4,-10,6,-4,-4],[8,-2,10,6,9,-9,-8,7,4,-3,-9,-7],[10,6,-8,-1,-10,-9,-9,4,-7,-8,7,-4],[9,8,-6,8,10,-10,-6,-7,3,9,-3,9],[6,-4,3,8,7,9,-2,-9,-2,-1,9,-7],[7,4,10,9,-3,3,-1,7,6,3,-4,8]],[[-3,-6,-10,7,-2,-5,-6,-10,-7,4,-3,-10],[-8,7,-7,-10,6,5,1,-1,-2,-7,3,9],[2,8,6,-6,-10,6,8,10,-2,-9,-6,7],[-7,8,4,9,-1,-3,6,-1,2,6,3,-3],[-4,1,-3,9,5,-1,7,6,7,-4,1,-9],[-3,3,4,3,8,-7,-2,-10,-6,-7,1,10],[5,10,1,10,-8,-2,-9,-2,8,-8,8,9],[-9,6,2,-7,-9,-6,10,-4,9,3,-10,-4],[4,1,10,-5,-8,8,-4,8,5,6,10,-4],[-6,6,1,6,-4,7,-9,-4,3,7,-8,-3],[-1,-8,8,9,-10,10,6,9,3,5,-8,8],[-10,9,4,-3,-10,7,5,-10,2,6,-7,10],[-1,-3,4,8,-10,4,-10,10,-7,6,2,7]],[[-7,6,8,-6,-10,7,10,-10,4,-4,-2,-4],[1,3,7,9,-2,10,10,-2,2,-6,7,-5],[-3,-7,3,-6,-3,-10,-8,6,4,4,1,8],[-3,8,-2,3,3,-2,3,-1,-6,7,-9,-6],[9,1,-3,-5,-3,8,-7,-3,-3,7,3,-2],[-8,-3,-10,-4,-6,-8,3,-5,6,2,-6,-4],[-9,5,-8,1,6,4,2,6,2,6,7,10],[7,-9,-6,-2,-1,-9,5,-4,3,-8,4,4],[6,-9,-3,8,-2,5,-7,5,5,8,3,1],[-10,10,1,-9,-5,-1,1,10,-6,3,1,3],[1,8,-3,-1,-7,8,6,8,10,-10,1,-4],[3,2,5,-2,7,2,8,-7,-4,-5,-2,10],[4,-3,-7,2,2,8,9,4,1,-10,-9,7]],[[9,2,7,-5,3,6,5,-4,9,-4,1,6],[6,-4,-10,6,3,3,3,10,6,-6,1,-7],[1,1,-1,-5,-3,-2,7,4,-10,-9,3,-7],[-5,-9,2,-9,7,-4,-8,-7,-9,6,9,-8],[-5,9,8,8,-10,2,-2,4,2,10,-8,-5],[-6,-5,-8,-3,9,4,2,3,-10,-6,5,-2],[10,8,-8,7,3,10,-4,-6,-9,-2,-4,-2],[9,7,-8,10,-10,5,3,-4,5,-10,9,2],[8,-6,9,7,4,2,2,9,2,1,-8,-2],[1,2,9,5,-9,2,-10,6,10,5,1,5],[10,9,-3,2,6,-1,7,-4,10,6,2,4],[-1,-5,5,-6,-8,-4,9,-2,-10,-7,10,5],[7,9,-3,-3,-2,-9,-10,1,-1,6,10,2]],[[-2,7,2,3,-5,-9,5,-5,10,-5,8,-8],[-2,-8,4,-2,-10,-8,3,2,-2,-6,-2,-6],[-4,5,-9,-2,9,3,1,10,6,-4,9,-7],[-8,10,6,4,-6,-4,6,-6,-6,-10,4,-8],[10,-9,9,-10,1,-9,-5,-4,4,6,4,6],[-2,-8,-8,7,8,5,-4,-4,-6,-9,-6,3],[-3,-9,-2,-8,1,1,10,-7,5,-8,8,3],[5,-8,5,10,-2,-4,5,-1,5,8,-1,8],[9,-7,7,3,-2,-4,2,-4,4,1,7,10],[5,1,-4,-3,4,2,-2,5,5,10,3,4],[-9,9,-6,-1,-10,8,-3,7,-5,-1,5,10],[5,-9,-3,6,-9,-9,7,-7,-4,10,-8,-5],[7,7,-3,-2,-6,-7,-6,-10,-9,10,-10,-2]]], dtype = "int32")#candidate|5779|(6, 13, 12)|const|int32
var_5780 = relay.var("var_5780", dtype = "int32", shape = (6, 13, 12))#candidate|5780|(6, 13, 12)|var|int32
bop_5781 = relay.bitwise_or(const_5779.astype('int32'), relay.reshape(var_5780.astype('int32'), relay.shape_of(const_5779))) # shape=(6, 13, 12)
uop_5784 = relay.sqrt(var_5780.astype('float64')) # shape=(6, 13, 12)
uop_5790 = relay.asinh(uop_5784.astype('float32')) # shape=(6, 13, 12)
bop_5796 = relay.less_equal(var_5780.astype('bool'), relay.reshape(bop_5781.astype('bool'), relay.shape_of(var_5780))) # shape=(6, 13, 12)
bop_5808 = relay.equal(uop_5790.astype('bool'), relay.reshape(var_5780.astype('bool'), relay.shape_of(uop_5790))) # shape=(6, 13, 12)
func_4520_call = mod.get_global_var('func_4520')
func_4522_call = mutated_mod.get_global_var('func_4522')
var_5820 = relay.var("var_5820", dtype = "float32", shape = (567,))#candidate|5820|(567,)|var|float32
call_5819 = relay.TupleGetItem(func_4520_call(relay.reshape(var_5820.astype('float32'), [9, 9, 7])), 3)
call_5821 = relay.TupleGetItem(func_4522_call(relay.reshape(var_5820.astype('float32'), [9, 9, 7])), 3)
output = relay.Tuple([bop_5796,bop_5808,call_5819,var_5820,])
output2 = relay.Tuple([bop_5796,bop_5808,call_5821,var_5820,])
func_5831 = relay.Function([var_5780,var_5820,], output)
mod['func_5831'] = func_5831
mod = relay.transform.InferType()(mod)
var_5832 = relay.var("var_5832", dtype = "int32", shape = (6, 13, 12))#candidate|5832|(6, 13, 12)|var|int32
var_5833 = relay.var("var_5833", dtype = "float32", shape = (567,))#candidate|5833|(567,)|var|float32
output = func_5831(var_5832,var_5833,)
func_5834 = relay.Function([var_5832,var_5833,], output)
mutated_mod['func_5834'] = func_5834
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4401_call = mod.get_global_var('func_4401')
func_4402_call = mutated_mod.get_global_var('func_4402')
call_5878 = relay.TupleGetItem(func_4401_call(), 0)
call_5879 = relay.TupleGetItem(func_4402_call(), 0)
func_5831_call = mod.get_global_var('func_5831')
func_5834_call = mutated_mod.get_global_var('func_5834')
var_5895 = relay.var("var_5895", dtype = "int32", shape = (936,))#candidate|5895|(936,)|var|int32
call_5894 = relay.TupleGetItem(func_5831_call(relay.reshape(var_5895.astype('int32'), [6, 13, 12]), relay.reshape(call_5878.astype('float32'), [567,]), ), 2)
call_5896 = relay.TupleGetItem(func_5834_call(relay.reshape(var_5895.astype('int32'), [6, 13, 12]), relay.reshape(call_5878.astype('float32'), [567,]), ), 2)
func_2034_call = mod.get_global_var('func_2034')
func_2037_call = mutated_mod.get_global_var('func_2037')
const_5901 = relay.const([9.360913,-7.689475,-6.102866,4.656858,7.755048,2.115534,7.853272,-8.099054,-2.887077,5.886800,-0.693614,1.183187,-2.639334,-7.951646,6.426794,9.249164,-1.265999,4.838972,-6.483182,-1.759470,8.381403,-6.466873,2.332468,-4.397925,-2.241337,0.209455,-0.245819,1.474951,-2.277240,-6.370683,4.037163,-7.447643], dtype = "float64")#candidate|5901|(32,)|const|float64
call_5900 = relay.TupleGetItem(func_2034_call(relay.reshape(const_5901.astype('float64'), [2, 2, 8])), 1)
call_5902 = relay.TupleGetItem(func_2037_call(relay.reshape(const_5901.astype('float64'), [2, 2, 8])), 1)
uop_5903 = relay.acos(var_5895.astype('float32')) # shape=(936,)
output = relay.Tuple([call_5878,call_5894,call_5900,const_5901,uop_5903,])
output2 = relay.Tuple([call_5879,call_5896,call_5902,const_5901,uop_5903,])
func_5907 = relay.Function([var_5895,], output)
mod['func_5907'] = func_5907
mod = relay.transform.InferType()(mod)
var_5908 = relay.var("var_5908", dtype = "int32", shape = (936,))#candidate|5908|(936,)|var|int32
output = func_5907(var_5908)
func_5909 = relay.Function([var_5908], output)
mutated_mod['func_5909'] = func_5909
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5059_call = mod.get_global_var('func_5059')
func_5061_call = mutated_mod.get_global_var('func_5061')
call_5930 = relay.TupleGetItem(func_5059_call(), 0)
call_5931 = relay.TupleGetItem(func_5061_call(), 0)
func_5404_call = mod.get_global_var('func_5404')
func_5405_call = mutated_mod.get_global_var('func_5405')
call_5944 = relay.TupleGetItem(func_5404_call(), 1)
call_5945 = relay.TupleGetItem(func_5405_call(), 1)
var_5968 = relay.var("var_5968", dtype = "int16", shape = (3, 10, 2))#candidate|5968|(3, 10, 2)|var|int16
bop_5969 = relay.logical_xor(call_5944.astype('int8'), relay.reshape(var_5968.astype('int8'), relay.shape_of(call_5944))) # shape=(3, 10, 2)
bop_5972 = relay.logical_xor(call_5945.astype('int8'), relay.reshape(var_5968.astype('int8'), relay.shape_of(call_5945))) # shape=(3, 10, 2)
uop_5974 = relay.log2(call_5930.astype('float64')) # shape=(11, 8, 7)
uop_5976 = relay.log2(call_5931.astype('float64')) # shape=(11, 8, 7)
var_6008 = relay.var("var_6008", dtype = "float64", shape = (11, 8, 7))#candidate|6008|(11, 8, 7)|var|float64
bop_6009 = relay.equal(uop_5974.astype('bool'), relay.reshape(var_6008.astype('bool'), relay.shape_of(uop_5974))) # shape=(11, 8, 7)
bop_6012 = relay.equal(uop_5976.astype('bool'), relay.reshape(var_6008.astype('bool'), relay.shape_of(uop_5976))) # shape=(11, 8, 7)
func_4851_call = mod.get_global_var('func_4851')
func_4853_call = mutated_mod.get_global_var('func_4853')
call_6013 = func_4851_call()
call_6014 = func_4851_call()
func_5681_call = mod.get_global_var('func_5681')
func_5683_call = mutated_mod.get_global_var('func_5683')
call_6015 = func_5681_call()
call_6016 = func_5681_call()
func_4473_call = mod.get_global_var('func_4473')
func_4474_call = mutated_mod.get_global_var('func_4474')
call_6021 = relay.TupleGetItem(func_4473_call(), 0)
call_6022 = relay.TupleGetItem(func_4474_call(), 0)
uop_6026 = relay.cosh(bop_6009.astype('float64')) # shape=(11, 8, 7)
uop_6028 = relay.cosh(bop_6012.astype('float64')) # shape=(11, 8, 7)
func_1246_call = mod.get_global_var('func_1246')
func_1250_call = mutated_mod.get_global_var('func_1250')
var_6036 = relay.var("var_6036", dtype = "float32", shape = (180,))#candidate|6036|(180,)|var|float32
call_6035 = relay.TupleGetItem(func_1246_call(relay.reshape(var_6036.astype('float32'), [2, 10, 9]), relay.reshape(var_5968.astype('float32'), [60,]), ), 3)
call_6037 = relay.TupleGetItem(func_1250_call(relay.reshape(var_6036.astype('float32'), [2, 10, 9]), relay.reshape(var_5968.astype('float32'), [60,]), ), 3)
output = relay.Tuple([bop_5969,call_6013,call_6015,call_6021,uop_6026,call_6035,var_6036,])
output2 = relay.Tuple([bop_5972,call_6014,call_6016,call_6022,uop_6028,call_6037,var_6036,])
func_6042 = relay.Function([var_5968,var_6008,var_6036,], output)
mod['func_6042'] = func_6042
mod = relay.transform.InferType()(mod)
mutated_mod['func_6042'] = func_6042
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6042_call = mutated_mod.get_global_var('func_6042')
var_6044 = relay.var("var_6044", dtype = "int16", shape = (3, 10, 2))#candidate|6044|(3, 10, 2)|var|int16
var_6045 = relay.var("var_6045", dtype = "float64", shape = (11, 8, 7))#candidate|6045|(11, 8, 7)|var|float64
var_6046 = relay.var("var_6046", dtype = "float32", shape = (180,))#candidate|6046|(180,)|var|float32
call_6043 = func_6042_call(var_6044,var_6045,var_6046,)
output = call_6043
func_6047 = relay.Function([var_6044,var_6045,var_6046,], output)
mutated_mod['func_6047'] = func_6047
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5456_call = mod.get_global_var('func_5456')
func_5458_call = mutated_mod.get_global_var('func_5458')
call_6062 = relay.TupleGetItem(func_5456_call(), 0)
call_6063 = relay.TupleGetItem(func_5458_call(), 0)
output = relay.Tuple([call_6062,])
output2 = relay.Tuple([call_6063,])
func_6069 = relay.Function([], output)
mod['func_6069'] = func_6069
mod = relay.transform.InferType()(mod)
mutated_mod['func_6069'] = func_6069
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6069_call = mutated_mod.get_global_var('func_6069')
call_6070 = func_6069_call()
output = call_6070
func_6071 = relay.Function([], output)
mutated_mod['func_6071'] = func_6071
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6072 = relay.var("var_6072", dtype = "float32", shape = (7, 9, 12))#candidate|6072|(7, 9, 12)|var|float32
const_6073 = relay.const([[[-2.833184,1.569304,-1.087789,-4.733560,7.244687,-4.393141,-8.073164,9.436673,-2.480208,-7.847100,-3.264654,-2.006091],[-7.809263,-5.215555,4.624448,-9.970253,-9.149178,-9.041664,8.487861,-9.769693,-3.651383,-1.195086,-7.955685,-2.331577],[6.444276,-4.864189,-7.617680,-1.416583,2.208525,7.695127,-6.902727,-3.225480,4.354908,6.593701,-2.708824,3.624037],[-2.466654,6.999686,3.830890,-1.560412,-8.879415,0.596100,6.014426,3.725765,-9.119569,1.986794,-8.667464,-9.051808],[-1.829369,8.140041,4.864957,2.808409,-9.206339,-4.980585,-4.966941,1.370729,7.679220,7.293921,-2.844189,3.389875],[9.847004,6.738946,1.543342,4.571044,8.552957,-4.571603,9.390519,0.412873,-4.778710,-5.270785,-7.259705,5.776387],[-7.965111,-7.158310,-3.152982,9.764803,-3.034770,0.716304,-1.843580,7.266697,7.764908,-9.798958,-5.275665,2.347111],[-8.461784,0.536115,6.185141,-3.896558,-2.257037,-5.987458,4.751152,-9.693157,-7.556379,2.773524,9.653494,-5.855065],[-6.718360,9.945541,-8.693593,7.227621,-6.519377,2.952619,8.394250,9.956439,-3.336272,-0.147721,-1.836286,9.466755]],[[5.674615,0.926058,-2.934724,8.976688,5.772378,2.250210,2.794157,-9.669055,7.243238,7.680052,5.693158,-8.093607],[-2.538219,9.393503,-2.406254,7.391057,5.130795,-9.029819,7.294226,-5.817163,-1.616686,-2.752355,-0.186525,-9.157621],[4.865427,9.523246,-9.225734,-2.248040,-2.210247,3.984832,5.001000,-7.378971,-5.977239,-5.941767,5.402816,-0.616033],[-7.574348,4.307493,0.959755,-3.227086,-7.628196,9.736347,-8.324338,8.246519,-2.268036,4.619822,-9.419425,-3.510416],[-2.332184,-7.648825,-5.215990,9.774279,2.105128,7.842212,-3.967722,7.094288,1.524077,-2.380614,2.878535,2.563210],[-8.435251,7.847624,-5.336410,7.279903,-5.516522,-8.378457,-2.657548,2.453005,6.747356,-6.286854,-6.140573,-2.354056],[0.686053,3.928716,-1.089470,-9.818453,7.214139,4.606222,5.480140,-8.796376,-5.473613,-9.902231,6.341420,0.307911],[3.439512,-0.862658,1.700973,0.551008,4.879543,0.481978,0.056185,6.662816,2.476208,4.880756,0.543021,-7.488609],[-0.396671,5.701091,-1.825849,-9.571954,-5.501071,-1.709645,9.200280,-0.507798,-4.193652,5.997500,7.010372,0.754009]],[[9.091103,-6.541568,-6.052547,9.141335,3.355576,-1.638478,8.646046,2.651756,-8.320387,0.976821,-6.898090,-8.591632],[-0.507509,-3.375521,-8.175131,-1.508910,-9.005526,4.045845,-3.306969,-3.105648,6.042425,7.027317,6.068160,-4.802159],[-5.661855,-0.275719,-1.745537,-8.657449,-7.608802,-4.598160,-7.567838,-1.076289,7.861013,9.068088,-9.998389,-2.573788],[0.674812,-8.670994,-5.484706,-1.588794,0.597251,7.723154,7.432035,-0.032521,0.356216,8.468329,2.662211,-3.799031],[9.958081,-0.918960,2.765574,6.606912,6.839021,-2.462912,-1.286087,-6.657546,5.707037,2.899006,3.257883,-3.672789],[6.663475,-1.042726,0.694137,7.153181,5.456915,2.081166,-4.056423,1.186555,-1.434623,-7.912517,-5.888986,-4.706461],[-3.193753,-8.825601,3.456545,-6.524962,-8.732939,-3.519019,-7.041035,-7.482225,1.764598,-3.567378,-3.865515,9.904235],[6.290885,-0.636470,4.498096,6.896747,-9.328782,5.254948,-6.996166,-3.223762,1.774811,6.136804,1.341346,5.415367],[3.336171,-9.549440,9.977927,-8.614664,4.747246,-0.827165,-2.406295,9.476283,5.234399,-4.582002,-8.899978,7.769062]],[[3.727019,9.905789,-4.017085,-9.016474,4.628050,-2.456388,-1.033782,9.727893,2.596795,-2.433887,-4.069553,-2.630383],[2.239539,2.312582,-9.118747,9.279957,5.018430,-6.204345,8.436955,0.400601,7.233035,0.707928,1.754634,-5.937553],[-1.232272,-6.244902,-8.981041,-6.124203,9.373111,3.865145,-6.639187,-0.467564,-0.110638,-1.779012,7.109079,-3.185111],[8.847842,-1.828540,-7.509738,1.082763,-4.948498,5.991665,-5.258609,-4.772710,-1.143384,2.966803,-3.905424,-9.243836],[-8.746731,-0.258315,1.723975,1.507702,-2.437896,3.821490,-0.227440,1.826602,-6.504516,3.495475,-3.771372,-0.785184],[7.830807,-7.142451,9.001935,-4.019305,8.782480,9.394768,8.623723,8.766628,6.604838,0.095475,0.500766,-4.162363],[1.128846,-1.231142,9.757852,-3.280268,9.269455,-1.047524,-6.718081,-7.033632,8.646752,-5.409008,-2.475128,-7.149422],[-6.874809,1.008736,-5.761930,8.676182,2.839170,9.838091,-8.193217,-1.906276,-3.704067,9.932096,1.028492,-2.690278],[9.097695,-7.762068,-2.121311,9.493094,-7.833151,-9.745410,-3.745723,-1.876074,-4.966868,-4.221311,-0.226026,-4.750038]],[[7.337737,7.752331,2.832295,7.255585,-5.778273,3.286679,-0.078115,7.124356,3.411276,0.649221,5.561511,-1.764262],[-7.051327,-7.972298,4.328402,9.838918,-1.153142,4.950702,9.926570,9.501670,-4.365555,-8.853925,1.746954,8.622306],[-5.719707,1.789932,2.715953,4.584423,-9.645161,-8.394817,-2.544045,6.454268,-6.279566,-1.124600,9.943270,0.060579],[-2.150988,2.484053,3.385163,1.516170,4.648924,5.542153,-9.169749,-4.084584,-4.382128,-2.707942,1.020641,-9.610656],[-2.797165,7.196825,-8.740093,-3.815517,-0.931829,-7.435853,-5.436186,2.796000,-1.100532,-2.559995,0.361513,-1.822832],[6.036614,-2.292812,-6.195880,-8.088739,-4.693555,-7.665778,-2.571967,5.197423,-9.534726,-2.043072,1.633207,6.929359],[-3.413513,-2.998227,-3.228357,-7.819021,1.865041,-8.842514,7.340058,6.190941,-1.831471,-0.912660,-3.289975,-8.099248],[8.594426,6.121809,-3.240638,4.358356,5.535752,2.671755,-5.393815,5.794273,-9.889002,0.208982,9.448318,3.630657],[-0.427499,-7.164076,-5.308657,-0.270268,-1.645299,-0.959563,-4.839449,2.810688,-5.019396,4.498032,-6.450075,-9.764264]],[[6.611539,-7.289603,-7.927882,-4.021114,7.148279,2.185069,5.111033,-8.826649,-2.624833,4.264874,-1.630375,-1.900243],[2.925329,3.342077,-9.674119,-8.345736,5.081363,-8.825352,2.218256,-6.516109,-7.376152,-5.781851,0.715130,0.148907],[9.783242,-2.586354,6.336769,-6.556135,2.068973,7.232605,-5.356225,2.996093,-1.898645,0.245860,-5.964590,5.571199],[-1.272223,7.286182,-4.035797,2.779523,0.692797,5.819005,-1.087340,0.131222,7.619538,2.891485,-1.421506,4.823053],[1.738780,-2.459210,-5.838355,-4.579154,9.302282,9.953892,-7.300427,-5.248647,-6.458430,-5.054600,6.026266,-6.609351],[-1.444065,-7.833844,-7.448576,-8.626058,2.866048,-0.099631,-2.320475,-2.320957,-7.912579,3.541273,-1.559083,-5.147670],[7.928175,1.501884,-0.290855,8.181011,8.379914,1.573381,3.777094,5.421611,5.917068,-2.980002,-4.814818,2.984405],[-2.512112,2.970343,-5.737427,-2.126570,6.030778,3.768088,1.320961,-3.272501,-9.537562,6.691438,8.807507,-4.277882],[-4.477881,-9.923128,7.832184,9.273811,-1.035627,-2.798240,-6.626697,-9.615819,-3.668926,4.115975,-2.921074,5.892957]],[[4.635339,-1.128644,6.379356,7.953907,-7.099364,4.040163,-7.855160,5.542734,5.587041,6.845575,-7.595426,9.102371],[5.131550,4.896662,7.138812,8.478518,4.908866,2.442991,-9.091288,-8.807545,0.425700,9.695003,-6.585285,-7.182823],[-6.651178,4.329123,-9.757534,-8.490640,9.372716,4.516291,-0.888039,1.710961,4.340123,-0.534301,-5.562222,-3.401954],[-8.255504,1.177443,-4.173918,3.146303,1.079606,-0.429754,8.461063,-9.072673,-6.386954,5.712850,-6.252377,-9.200108],[-9.147169,2.864326,6.087808,-4.954530,7.708393,-4.499157,5.714505,6.745708,-2.546815,-1.452737,-4.236798,-7.106458],[6.190161,9.376670,-8.096537,8.643702,-1.629740,9.340738,-6.021063,-2.775363,5.393874,4.023377,-5.718821,-3.254752],[-2.079220,-3.527213,1.916791,6.452617,7.861384,-5.993232,-5.778499,-8.068108,-0.683416,-5.051227,5.063747,6.335042],[6.994398,0.019329,4.694631,-5.759830,7.959439,-4.589203,8.968522,6.716988,-2.241600,2.166220,6.019062,5.345544],[7.436127,-5.602433,-2.632430,-2.461135,-2.769687,4.568790,4.631300,-3.281665,2.152423,9.005442,-6.172516,1.918681]]], dtype = "float32")#candidate|6073|(7, 9, 12)|const|float32
bop_6074 = relay.mod(var_6072.astype('float32'), relay.reshape(const_6073.astype('float32'), relay.shape_of(var_6072))) # shape=(7, 9, 12)
bop_6085 = relay.equal(const_6073.astype('bool'), relay.reshape(bop_6074.astype('bool'), relay.shape_of(const_6073))) # shape=(7, 9, 12)
uop_6089 = relay.sinh(var_6072.astype('float64')) # shape=(7, 9, 12)
func_4827_call = mod.get_global_var('func_4827')
func_4829_call = mutated_mod.get_global_var('func_4829')
call_6093 = relay.TupleGetItem(func_4827_call(), 1)
call_6094 = relay.TupleGetItem(func_4829_call(), 1)
func_2293_call = mod.get_global_var('func_2293')
func_2296_call = mutated_mod.get_global_var('func_2296')
var_6096 = relay.var("var_6096", dtype = "bool", shape = (351, 3))#candidate|6096|(351, 3)|var|bool
call_6095 = func_2293_call(relay.reshape(var_6096.astype('bool'), [9, 13, 9]))
call_6097 = func_2293_call(relay.reshape(var_6096.astype('bool'), [9, 13, 9]))
output = relay.Tuple([bop_6085,uop_6089,call_6093,call_6095,var_6096,])
output2 = relay.Tuple([bop_6085,uop_6089,call_6094,call_6097,var_6096,])
func_6098 = relay.Function([var_6072,var_6096,], output)
mod['func_6098'] = func_6098
mod = relay.transform.InferType()(mod)
mutated_mod['func_6098'] = func_6098
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6098_call = mutated_mod.get_global_var('func_6098')
var_6100 = relay.var("var_6100", dtype = "float32", shape = (7, 9, 12))#candidate|6100|(7, 9, 12)|var|float32
var_6101 = relay.var("var_6101", dtype = "bool", shape = (351, 3))#candidate|6101|(351, 3)|var|bool
call_6099 = func_6098_call(var_6100,var_6101,)
output = call_6099
func_6102 = relay.Function([var_6100,var_6101,], output)
mutated_mod['func_6102'] = func_6102
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5059_call = mod.get_global_var('func_5059')
func_5061_call = mutated_mod.get_global_var('func_5061')
call_6106 = relay.TupleGetItem(func_5059_call(), 0)
call_6107 = relay.TupleGetItem(func_5061_call(), 0)
output = relay.Tuple([call_6106,])
output2 = relay.Tuple([call_6107,])
func_6130 = relay.Function([], output)
mod['func_6130'] = func_6130
mod = relay.transform.InferType()(mod)
mutated_mod['func_6130'] = func_6130
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6130_call = mutated_mod.get_global_var('func_6130')
call_6131 = func_6130_call()
output = call_6131
func_6132 = relay.Function([], output)
mutated_mod['func_6132'] = func_6132
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4496_call = mod.get_global_var('func_4496')
func_4497_call = mutated_mod.get_global_var('func_4497')
call_6149 = relay.TupleGetItem(func_4496_call(), 0)
call_6150 = relay.TupleGetItem(func_4497_call(), 0)
output = relay.Tuple([call_6149,])
output2 = relay.Tuple([call_6150,])
func_6158 = relay.Function([], output)
mod['func_6158'] = func_6158
mod = relay.transform.InferType()(mod)
output = func_6158()
func_6159 = relay.Function([], output)
mutated_mod['func_6159'] = func_6159
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4920_call = mod.get_global_var('func_4920')
func_4921_call = mutated_mod.get_global_var('func_4921')
call_6205 = func_4920_call()
call_6206 = func_4920_call()
output = call_6205
output2 = call_6206
func_6222 = relay.Function([], output)
mod['func_6222'] = func_6222
mod = relay.transform.InferType()(mod)
output = func_6222()
func_6223 = relay.Function([], output)
mutated_mod['func_6223'] = func_6223
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6306 = relay.var("var_6306", dtype = "float64", shape = (11, 5, 12))#candidate|6306|(11, 5, 12)|var|float64
var_6307 = relay.var("var_6307", dtype = "float64", shape = (11, 5, 12))#candidate|6307|(11, 5, 12)|var|float64
bop_6308 = relay.divide(var_6306.astype('float64'), relay.reshape(var_6307.astype('float64'), relay.shape_of(var_6306))) # shape=(11, 5, 12)
func_4473_call = mod.get_global_var('func_4473')
func_4474_call = mutated_mod.get_global_var('func_4474')
call_6311 = relay.TupleGetItem(func_4473_call(), 0)
call_6312 = relay.TupleGetItem(func_4474_call(), 0)
uop_6314 = relay.cos(bop_6308.astype('float64')) # shape=(11, 5, 12)
func_4929_call = mod.get_global_var('func_4929')
func_4930_call = mutated_mod.get_global_var('func_4930')
call_6316 = func_4929_call()
call_6317 = func_4929_call()
output = relay.Tuple([call_6311,uop_6314,call_6316,])
output2 = relay.Tuple([call_6312,uop_6314,call_6317,])
func_6339 = relay.Function([var_6306,var_6307,], output)
mod['func_6339'] = func_6339
mod = relay.transform.InferType()(mod)
var_6340 = relay.var("var_6340", dtype = "float64", shape = (11, 5, 12))#candidate|6340|(11, 5, 12)|var|float64
var_6341 = relay.var("var_6341", dtype = "float64", shape = (11, 5, 12))#candidate|6341|(11, 5, 12)|var|float64
output = func_6339(var_6340,var_6341,)
func_6342 = relay.Function([var_6340,var_6341,], output)
mutated_mod['func_6342'] = func_6342
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4553_call = mod.get_global_var('func_4553')
func_4555_call = mutated_mod.get_global_var('func_4555')
call_6435 = relay.TupleGetItem(func_4553_call(), 0)
call_6436 = relay.TupleGetItem(func_4555_call(), 0)
output = relay.Tuple([call_6435,])
output2 = relay.Tuple([call_6436,])
func_6455 = relay.Function([], output)
mod['func_6455'] = func_6455
mod = relay.transform.InferType()(mod)
mutated_mod['func_6455'] = func_6455
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6455_call = mutated_mod.get_global_var('func_6455')
call_6456 = func_6455_call()
output = call_6456
func_6457 = relay.Function([], output)
mutated_mod['func_6457'] = func_6457
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4827_call = mod.get_global_var('func_4827')
func_4829_call = mutated_mod.get_global_var('func_4829')
call_6478 = relay.TupleGetItem(func_4827_call(), 3)
call_6479 = relay.TupleGetItem(func_4829_call(), 3)
func_3653_call = mod.get_global_var('func_3653')
func_3657_call = mutated_mod.get_global_var('func_3657')
var_6481 = relay.var("var_6481", dtype = "float32", shape = (1, 364))#candidate|6481|(1, 364)|var|float32
var_6482 = relay.var("var_6482", dtype = "float32", shape = (180,))#candidate|6482|(180,)|var|float32
call_6480 = relay.TupleGetItem(func_3653_call(relay.reshape(var_6481.astype('float32'), [14, 2, 13]), relay.reshape(var_6482.astype('float32'), [180,]), ), 1)
call_6483 = relay.TupleGetItem(func_3657_call(relay.reshape(var_6481.astype('float32'), [14, 2, 13]), relay.reshape(var_6482.astype('float32'), [180,]), ), 1)
output = relay.Tuple([call_6478,call_6480,var_6481,var_6482,])
output2 = relay.Tuple([call_6479,call_6483,var_6481,var_6482,])
func_6494 = relay.Function([var_6481,var_6482,], output)
mod['func_6494'] = func_6494
mod = relay.transform.InferType()(mod)
mutated_mod['func_6494'] = func_6494
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6494_call = mutated_mod.get_global_var('func_6494')
var_6496 = relay.var("var_6496", dtype = "float32", shape = (1, 364))#candidate|6496|(1, 364)|var|float32
var_6497 = relay.var("var_6497", dtype = "float32", shape = (180,))#candidate|6497|(180,)|var|float32
call_6495 = func_6494_call(var_6496,var_6497,)
output = call_6495
func_6498 = relay.Function([var_6496,var_6497,], output)
mutated_mod['func_6498'] = func_6498
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6500 = relay.var("var_6500", dtype = "float64", shape = (11, 13, 3))#candidate|6500|(11, 13, 3)|var|float64
uop_6501 = relay.asin(var_6500.astype('float64')) # shape=(11, 13, 3)
uop_6503 = relay.acos(var_6500.astype('float64')) # shape=(11, 13, 3)
func_5404_call = mod.get_global_var('func_5404')
func_5405_call = mutated_mod.get_global_var('func_5405')
call_6505 = relay.TupleGetItem(func_5404_call(), 2)
call_6506 = relay.TupleGetItem(func_5405_call(), 2)
output = relay.Tuple([uop_6501,uop_6503,call_6505,])
output2 = relay.Tuple([uop_6501,uop_6503,call_6506,])
func_6516 = relay.Function([var_6500,], output)
mod['func_6516'] = func_6516
mod = relay.transform.InferType()(mod)
var_6517 = relay.var("var_6517", dtype = "float64", shape = (11, 13, 3))#candidate|6517|(11, 13, 3)|var|float64
output = func_6516(var_6517)
func_6518 = relay.Function([var_6517], output)
mutated_mod['func_6518'] = func_6518
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6069_call = mod.get_global_var('func_6069')
func_6071_call = mutated_mod.get_global_var('func_6071')
call_6530 = relay.TupleGetItem(func_6069_call(), 0)
call_6531 = relay.TupleGetItem(func_6071_call(), 0)
uop_6533 = relay.cos(call_6530.astype('float32')) # shape=(2560,)
uop_6535 = relay.cos(call_6531.astype('float32')) # shape=(2560,)
func_1061_call = mod.get_global_var('func_1061')
func_1064_call = mutated_mod.get_global_var('func_1064')
var_6544 = relay.var("var_6544", dtype = "float64", shape = (32,))#candidate|6544|(32,)|var|float64
call_6543 = relay.TupleGetItem(func_1061_call(relay.reshape(var_6544.astype('float64'), [4, 8])), 2)
call_6545 = relay.TupleGetItem(func_1064_call(relay.reshape(var_6544.astype('float64'), [4, 8])), 2)
func_4851_call = mod.get_global_var('func_4851')
func_4853_call = mutated_mod.get_global_var('func_4853')
call_6558 = func_4851_call()
call_6559 = func_4851_call()
uop_6563 = relay.sin(uop_6533.astype('float32')) # shape=(2560,)
uop_6565 = relay.sin(uop_6535.astype('float32')) # shape=(2560,)
func_1943_call = mod.get_global_var('func_1943')
func_1945_call = mutated_mod.get_global_var('func_1945')
const_6574 = relay.const([-6,9,-4,2,-5,-7,8,-2,-9,-6,-5,-7,2,-6,-7,-5,5,6,9,7,8,2,7,-5,-8,-9,9,-9,2,-3,4,1,-4,-9,4,6,1,8,-1,4], dtype = "uint8")#candidate|6574|(40,)|const|uint8
call_6573 = relay.TupleGetItem(func_1943_call(relay.reshape(const_6574.astype('uint8'), [2, 2, 10])), 0)
call_6575 = relay.TupleGetItem(func_1945_call(relay.reshape(const_6574.astype('uint8'), [2, 2, 10])), 0)
output = relay.Tuple([call_6543,var_6544,call_6558,uop_6563,call_6573,const_6574,])
output2 = relay.Tuple([call_6545,var_6544,call_6559,uop_6565,call_6575,const_6574,])
func_6576 = relay.Function([var_6544,], output)
mod['func_6576'] = func_6576
mod = relay.transform.InferType()(mod)
var_6577 = relay.var("var_6577", dtype = "float64", shape = (32,))#candidate|6577|(32,)|var|float64
output = func_6576(var_6577)
func_6578 = relay.Function([var_6577], output)
mutated_mod['func_6578'] = func_6578
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5059_call = mod.get_global_var('func_5059')
func_5061_call = mutated_mod.get_global_var('func_5061')
call_6707 = relay.TupleGetItem(func_5059_call(), 0)
call_6708 = relay.TupleGetItem(func_5061_call(), 0)
uop_6709 = relay.rsqrt(call_6707.astype('float64')) # shape=(11, 8, 7)
uop_6711 = relay.rsqrt(call_6708.astype('float64')) # shape=(11, 8, 7)
bop_6714 = relay.floor_divide(uop_6709.astype('float64'), relay.reshape(call_6707.astype('float64'), relay.shape_of(uop_6709))) # shape=(11, 8, 7)
bop_6717 = relay.floor_divide(uop_6711.astype('float64'), relay.reshape(call_6708.astype('float64'), relay.shape_of(uop_6711))) # shape=(11, 8, 7)
uop_6723 = relay.atan(call_6707.astype('float32')) # shape=(11, 8, 7)
uop_6725 = relay.atan(call_6708.astype('float32')) # shape=(11, 8, 7)
var_6737 = relay.var("var_6737", dtype = "float64", shape = (11, 8, 7))#candidate|6737|(11, 8, 7)|var|float64
bop_6738 = relay.floor_mod(call_6707.astype('float32'), relay.reshape(var_6737.astype('float32'), relay.shape_of(call_6707))) # shape=(11, 8, 7)
bop_6741 = relay.floor_mod(call_6708.astype('float32'), relay.reshape(var_6737.astype('float32'), relay.shape_of(call_6708))) # shape=(11, 8, 7)
uop_6742 = relay.sinh(call_6707.astype('float32')) # shape=(11, 8, 7)
uop_6744 = relay.sinh(call_6708.astype('float32')) # shape=(11, 8, 7)
func_6516_call = mod.get_global_var('func_6516')
func_6518_call = mutated_mod.get_global_var('func_6518')
var_6753 = relay.var("var_6753", dtype = "float64", shape = (13, 33))#candidate|6753|(13, 33)|var|float64
call_6752 = relay.TupleGetItem(func_6516_call(relay.reshape(var_6753.astype('float64'), [11, 13, 3])), 2)
call_6754 = relay.TupleGetItem(func_6518_call(relay.reshape(var_6753.astype('float64'), [11, 13, 3])), 2)
bop_6760 = relay.mod(uop_6723.astype('float64'), relay.reshape(call_6707.astype('float64'), relay.shape_of(uop_6723))) # shape=(11, 8, 7)
bop_6763 = relay.mod(uop_6725.astype('float64'), relay.reshape(call_6708.astype('float64'), relay.shape_of(uop_6725))) # shape=(11, 8, 7)
uop_6764 = relay.rsqrt(var_6753.astype('float64')) # shape=(13, 33)
output = relay.Tuple([bop_6714,bop_6738,uop_6742,call_6752,bop_6760,uop_6764,])
output2 = relay.Tuple([bop_6717,bop_6741,uop_6744,call_6754,bop_6763,uop_6764,])
func_6767 = relay.Function([var_6737,var_6753,], output)
mod['func_6767'] = func_6767
mod = relay.transform.InferType()(mod)
var_6768 = relay.var("var_6768", dtype = "float64", shape = (11, 8, 7))#candidate|6768|(11, 8, 7)|var|float64
var_6769 = relay.var("var_6769", dtype = "float64", shape = (13, 33))#candidate|6769|(13, 33)|var|float64
output = func_6767(var_6768,var_6769,)
func_6770 = relay.Function([var_6768,var_6769,], output)
mutated_mod['func_6770'] = func_6770
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4401_call = mod.get_global_var('func_4401')
func_4402_call = mutated_mod.get_global_var('func_4402')
call_6783 = relay.TupleGetItem(func_4401_call(), 0)
call_6784 = relay.TupleGetItem(func_4402_call(), 0)
func_1332_call = mod.get_global_var('func_1332')
func_1335_call = mutated_mod.get_global_var('func_1335')
const_6794 = relay.const(-6, dtype = "uint32")#candidate|6794|()|const|uint32
const_6795 = relay.const([-4,1,1,3,-8,-9,-3,10,5,3,10,9,3,-8,-2,-10,10,-6,-7,4,-1,4,7,-3,-3,-2,-8,-5,-1,-1,-5,-1,2,5,-8,5,-2,-5,-3,1,7,-7,4,-5,6,-10,-6,-8,-10,-8,-2,8,-1,2,1,10,-7,-10,-10,8,2,-8,10,-7,-1,-9,-7,10,9,-2,5,8,-10,7,-5,5,-4,6,-1,4,-9,8,1,-3,-9,-1,-8,8,-9,-5,1,-6,5,7,-6,-1,-6,-8,-6,-7,8,1,7,4,-6,4,1,10,-1,-3,10,9,-2,2,10,2,7,3,-5,-4,8,-6,-8,-6,-5,-6,-2,2,-4,3,-4,-3,10,-7,-5,-4,6,3,-6,5,-7,-8,-7,-4,-5,-8,-1,1,7,4,6,-4,-10,8,-5,7,3,-10,8,-5,10,-3,2,-2,-10,2,6,10,-4,-2,-1,-10,6,9,5,-6,-5,8,3,-8,-8,-10,-8,-2,9,1,5,-6,-5,-5,-9,7,-2,-3,5,-9,-4,9,1,4,5,10,9,3,3,6,10,5,-8,-8,-2,6,-6,-5,6,7,-7,3,6,-9,3,10,1,-5,4,2,10,9,4,-3,7,4,-10,9,-3,5,-6,-9,-10,5,-8,9,6,-4,-6,-5,-10,5,5,7,2,2,-7,-4,5,-1,8,-3,-10,7,5,-6,-10,-6,-5,-3,-5,7,-7,-8,-10,-7,1,-3,8,-6,3,-1,-5,7,10,-6,-6,8,4,10,-5,2,-9,-6,6,-2,-3,9,-10,7,8,-4,8,2,7,6,8,-9,-5,-4,8,8,-6,9,-7,5,-10,2,2,10,3,-5,-5,10,1,1,-9,-1,7,-3,4,10,9,-2,5,10,9,2,2,-4,-3,2,-3,9,1,-4,7,9,-5,7,-4,-1,4,6,3,-9,-2,-10,-2,-5,-8,7,3,3,8,10,-1,-4,-4,1,2,-6,8,9,3,-2,5,8,5,5,-5,7,8,9,4,1,-9,-10,1,7,-5,6,-8,7,-10,-9,1,-9,7,-1,9,7,-9,4,-8,5,-10,5,-9,-3,7,4,-10,-5,4,-8,-1,2,3,9,5,-5,9,4,2,-9,-1,-5,7,-8,9,7,-2,-8,-2,-6,-5,3,1,-1,5,10,-2,-7,-6,-3,2,2,6,-10,-9,7,-7,7,8,-9,-8,10,-5,-1,1,-5,-4,10,-7,8,7,1,6,2,-5,-8,1,5,5,6,-1,-1,-7,5,-1,1,8,2,9,-7,-4,-1,3,10,3,-3,6,-9,5,7,7,-4,2,-1,9,-7,-3,7,-4,3,4,10,-10,-4,-5,2,3,-8,-1,5,-7,2,-1,-7,7,-10,5,-2,-1,1,1,7,-9,-6,4,-10,-2,-2,-1,-7,8,-9,9,8,-10,-7,2,3,-9,-2,10,5,-6,6,5,-4,-3,5,-4,4,-2,5,5,5,-8,-10,-1,-2,-9,4,4,-6,-3,-8,4,3,3,7,-5,-3,-9,3,7,9,-6,1,-1,6,7,-2,-6,-4,2,-8,-6,-10,-3,9,8,5,8,-3,-2,-4,-5,-10,1,9,-9,-10,7,2,-5,-1,6,7,3,-7,-1,3,-9,-6,-1,6,3,5,-6,-1,7,-3,9,8,-2,-6,-8,-10,4,-9,-2,-2,-1,-6,-3,9,10,-2,-4,10,7,-2,4,4,-9,-2,-8,-7,-3,-7,1,-6,-9,-1,-3,2,6,5,-7,8,3,-6,-4,1,7,4,5,-10,-2,-1,3,-5,7,-1,-10,-10,-10,-4,-1,-4,5,6,-9,8,7,-8,-1,1,2,4,-10,-3,-1,7,-5,8,-8,-2,3,10,-9,10,1,10,3,3,6,-6,-6,9,-3,-1,-3,7,5,6,8,-4,9,-2,5,6,3,10,-6,-1,8,-7,7,9,-5,-3,-10,10,10,2,7,-1,-1,-4,-2,5,8,-4,-7,-6,7,5,-8,-9,-9,6,-10,-10,9,-9,8,-2,-7,1,9,-8,7,-4,-8,-3,-3,-3,-5,-5,7,-5,7,9,-4,-9,8,-9,-9,-9,-5,6,-1,-2,-3,9,8,-3,3,-10,4,2,-5,6,6,-4,8,-1,-8,5,10,1,10,-5,-8,2,4,-4,6,4,-7,-3,8,-6,-8,10,-7,-8,-5,-3,-7,4,8,-2,-2,-4,-5,-6,4,-1,-4,-2,10,-1,-4,7,-7,3,-1,-10,3,1,-3,-3,10,-3,5,-7,-7,1,3,3,8,-7,-2,1,-1,3,1,4,10,-8,-3,1,3,1,7,-6,-1,6,-10,-1,1,-6,10,4,5,6,-6,10,-6,-7,-7,9,-8,3,4,-8,8,9,-3,-1,-6,-6,1,-4,-9,3,6,3,-9,-1,-10,9,-2,-9,3,3,4,-2,7,5,8,9,-10,-7,9,-1,6,1,10,3,8,3,-7,-9,2,10,2,4,-4,-8,-9,-5,10,-3,4,4,-3,-3,1,-5,-8,2,6,9,-9,6,7,-2,-5,-9,-2,2,9,6,-9,-4,-7,6,-6,-5,3,10,-3,9,9,9,-3,7,-6,4,3,4,-6,-3,-5,-7,10,-10,-2,-10,-9,2,-10,3,-9,3,7,-10,-10,-7,-3,-3,4,5,2,-6,-4,2,7,-2,-4,-8,4,6,-3,9,9,-9,7,8,-9,10], dtype = "uint32")#candidate|6795|(1014,)|const|uint32
call_6793 = relay.TupleGetItem(func_1332_call(relay.reshape(const_6794.astype('uint32'), []), relay.reshape(const_6795.astype('uint32'), [13, 6, 13]), ), 0)
call_6796 = relay.TupleGetItem(func_1335_call(relay.reshape(const_6794.astype('uint32'), []), relay.reshape(const_6795.astype('uint32'), [13, 6, 13]), ), 0)
bop_6822 = relay.floor_divide(const_6794.astype('float32'), const_6795.astype('float32')) # shape=(1014,)
output = relay.Tuple([call_6783,call_6793,bop_6822,])
output2 = relay.Tuple([call_6784,call_6796,bop_6822,])
func_6826 = relay.Function([], output)
mod['func_6826'] = func_6826
mod = relay.transform.InferType()(mod)
output = func_6826()
func_6827 = relay.Function([], output)
mutated_mod['func_6827'] = func_6827
mutated_mod = relay.transform.InferType()(mutated_mod)
const_6828 = relay.const([[[1,6,-10,6,-4,4,1,7,9,-7,9,-6,-2,-1],[-6,-8,9,-2,-6,-1,-7,8,-8,1,1,2,-7,-6],[-1,-7,-1,4,1,-1,6,-7,10,10,-8,-7,6,-10],[10,-5,2,5,-7,5,5,-4,1,-4,7,-1,3,-8],[7,-6,-6,7,-3,1,-1,9,-4,9,-6,-6,-6,-10],[5,10,5,-9,6,-9,8,10,-6,-7,4,6,10,-5],[-7,5,-4,-3,2,-2,-10,9,10,-9,-10,7,-6,-6],[-4,-3,5,-2,7,-7,-1,-7,-9,1,8,6,-10,-4],[5,-3,10,-10,7,3,9,-5,1,3,8,7,-6,6],[5,2,-9,-9,-4,3,2,7,7,2,-4,6,-9,-10],[8,-10,-5,5,1,10,-4,9,8,-7,-10,1,-4,-5]],[[-3,-9,-10,-6,-5,-8,6,2,-10,5,-8,3,1,-9],[-4,-1,1,8,1,8,-4,2,4,-9,4,-4,-6,10],[2,6,8,-3,-5,2,-2,2,7,-5,8,5,9,6],[-6,-5,-8,4,-6,4,-7,-9,-7,6,-5,-4,6,6],[-1,-1,9,-7,6,-2,10,8,-2,-10,-10,-2,-9,9],[-10,-1,5,9,-9,-10,10,9,-8,1,4,9,-8,-10],[-1,-4,-1,-3,-6,-2,-1,-10,-8,2,6,8,-5,-5],[-9,-1,3,1,-10,-2,-7,1,-1,-8,2,5,-3,9],[9,10,8,-8,5,-4,-6,-1,-3,2,5,-4,-9,-4],[-3,10,-6,2,10,-2,-1,-1,-5,1,-5,3,-4,7],[-8,-8,4,5,-8,4,6,4,4,-6,6,-8,-2,-2]],[[-10,10,10,10,-5,5,-1,1,7,-5,-1,-2,10,-9],[-3,-9,-10,4,4,-7,9,2,1,5,7,10,3,-6],[-2,-5,5,-9,-2,6,-6,-5,-5,5,10,-7,-4,-6],[9,-9,-4,9,10,-6,-2,8,-5,5,10,9,1,-9],[-5,1,-7,-8,-9,-10,-4,9,9,3,2,8,-7,-4],[-5,3,-7,3,-7,5,-7,-4,1,8,-1,-6,1,7],[-10,-6,3,4,-6,-4,-7,10,3,-4,7,6,5,3],[7,3,10,-4,-1,-4,7,-3,-6,8,-6,8,6,-3],[8,-6,7,-4,-9,9,9,8,-3,10,-3,-1,-3,-4],[4,2,5,-1,-7,9,-5,5,-4,-8,3,6,-8,-9],[-7,2,10,7,1,-8,-3,2,5,-2,10,4,9,3]],[[7,10,3,-9,-5,-10,4,-5,-5,7,-6,-7,-10,-4],[-2,-8,-7,5,8,6,-10,-2,-4,-3,7,9,8,2],[8,9,-2,-9,3,2,-7,9,-5,-2,-7,10,-5,-7],[-6,3,6,-5,8,9,9,-5,10,-4,4,-5,-2,-6],[5,-2,-4,-6,8,1,5,-7,3,-1,-7,-9,-2,3],[1,-1,-3,-7,1,-7,5,4,10,-2,-7,-8,-7,-7],[-5,-1,8,-3,8,-7,-5,9,-4,8,6,9,-3,10],[-5,-9,5,-7,5,-5,-1,-3,1,-6,4,-1,6,-4],[6,-10,-10,9,10,-10,7,-7,8,-7,-9,3,9,-4],[3,-5,-5,-10,-6,10,-7,3,4,2,-10,-10,-2,-4],[9,5,9,3,-8,7,-3,2,-5,-4,2,2,5,-3]],[[-7,7,5,7,3,-8,-2,5,-1,-7,-1,-7,7,7],[3,8,-6,-5,-6,-7,-4,-7,7,6,-8,-6,2,-2],[-3,10,8,4,-2,5,5,4,-6,-8,5,-2,-4,2],[10,-6,4,8,5,-7,3,2,5,-7,-9,3,8,-8],[4,10,-7,-6,6,4,8,-8,-5,-8,8,-3,-2,-10],[-2,5,-10,1,-3,8,-2,1,-6,-10,-9,3,-6,4],[-3,-8,-5,-2,-8,-10,-9,-10,-3,-1,-10,-1,-1,-6],[-1,5,-7,10,4,4,-4,-4,-5,3,7,-6,-5,8],[1,3,6,-7,-10,2,-8,5,3,6,4,-5,-3,10],[7,-6,-3,4,6,10,-8,-10,-1,10,-6,9,6,-3],[-6,-9,-2,-3,3,-4,-9,-4,9,7,1,-1,6,7]],[[5,-2,-4,3,-7,10,-6,-2,-9,3,-10,-7,2,8],[-9,1,-8,2,-6,-7,-3,-7,-3,3,-5,1,9,-8],[5,8,-2,7,-1,-1,4,-4,-7,6,-7,-2,-7,10],[1,8,4,10,-4,6,-6,6,7,8,10,3,-3,2],[10,-6,7,-6,10,9,-3,-3,3,2,9,5,-6,-7],[-7,-8,10,-5,10,10,-7,7,-5,10,10,-10,-4,8],[-7,-10,3,-9,-4,10,8,-7,10,-5,-6,2,1,-7],[-9,4,2,-10,1,-8,8,2,-9,-10,-5,-1,-2,-9],[7,7,-2,3,4,-7,-7,-4,4,-10,7,9,3,-4],[-4,-7,8,-6,4,2,-5,4,5,-6,4,-1,5,2],[9,4,-7,-4,-6,7,2,-9,10,10,1,-6,1,3]],[[-7,-4,1,10,1,-4,6,7,1,-4,7,-10,-9,3],[-4,-6,3,7,-9,1,1,-5,7,5,-7,-10,-5,3],[9,-4,4,3,-1,1,-7,10,-10,-7,8,-4,2,-9],[6,-1,-10,7,-6,-3,-1,8,1,-8,-4,5,-6,7],[4,-7,8,5,-4,3,-3,8,5,3,-4,4,-7,-2],[-7,-3,4,1,-9,-1,-9,2,5,7,5,-5,-5,9],[-9,5,9,-6,9,5,4,-10,4,-6,-3,10,-4,-1],[3,1,10,-7,5,9,3,-1,-4,1,-6,-9,-1,-8],[-4,-6,-10,9,2,-6,1,8,-3,-2,-1,-5,9,7],[-2,7,-6,3,7,-6,9,-5,-9,-4,-3,9,9,-2],[-9,2,-5,-7,9,7,-3,-6,-4,1,-3,6,-3,-3]],[[-9,3,-3,-9,-4,-9,8,1,-8,-2,-10,-6,9,-1],[6,-5,9,5,4,2,2,-1,7,2,2,10,8,-7],[9,-9,1,2,-3,4,10,-5,5,-5,-1,2,4,5],[9,8,7,-2,1,-10,8,-2,-8,-5,5,9,-10,7],[-2,-3,-4,8,-10,2,4,-8,6,5,8,-6,1,-9],[6,-2,-10,-1,7,6,2,3,-9,-10,-2,6,-4,-5],[10,3,-1,8,1,-6,3,-10,-7,10,-3,-1,-5,8],[-1,-4,8,1,-4,3,-10,-6,8,-7,6,-2,-8,-7],[-10,-2,-10,4,-6,1,3,3,-10,6,4,4,-1,-10],[-9,-3,4,10,4,3,-8,-7,-8,-6,-1,6,-8,-7],[9,9,6,7,-1,-5,-10,4,3,-8,-6,-9,9,-4]],[[8,-7,9,-4,-9,-7,5,-7,10,-2,-5,-4,-7,9],[8,4,-5,2,-8,-10,-7,-9,-7,-9,6,-10,6,-1],[6,-10,3,2,-4,1,3,8,8,-4,4,4,9,-2],[-9,-7,-2,9,10,5,-8,-5,-10,10,-2,7,-2,-5],[-6,-3,9,9,-6,1,2,1,2,10,10,-10,-8,10],[7,-8,-2,7,2,7,6,5,1,7,-1,5,-9,-6],[1,7,-1,2,-8,9,5,-8,-3,1,9,9,-7,3],[-9,-4,-7,10,-6,3,1,3,-9,9,6,-8,-7,4],[1,-3,8,-3,-8,3,7,-7,-10,-6,-5,-3,-4,7],[9,-9,-1,-3,8,2,-2,10,-10,10,9,-9,3,-7],[-2,-10,6,-1,2,3,-1,5,-9,3,-4,-7,10,-9]],[[-7,-10,1,-10,-9,-3,7,2,1,1,4,7,-8,-3],[2,1,-8,-10,1,3,1,1,-2,-5,-10,-2,2,-2],[-6,1,7,-9,3,2,-9,3,1,-5,-7,-7,-7,-3],[8,1,2,-4,-4,-2,2,10,-10,-1,-9,5,7,4],[9,-4,5,-3,-9,-4,9,1,-1,-3,6,-2,-10,-2],[9,4,-3,6,-4,-5,-3,-8,-8,-6,-2,9,-4,-2],[10,-3,9,-6,6,4,-1,4,9,-8,1,-5,-2,-10],[7,-3,5,3,-3,-10,-3,10,-3,-7,6,-9,-9,9],[-1,10,-10,-3,8,1,-9,10,-5,-7,7,-1,9,-2],[-6,-2,10,5,2,7,5,1,10,7,4,-4,-8,-3],[-6,-7,-4,1,10,5,3,-2,-9,4,6,5,-3,-10]],[[5,-8,-8,5,-2,7,-2,4,2,4,2,-1,7,-10],[-4,-1,-4,9,-4,4,-1,-7,-3,6,10,-9,10,-1],[-7,-9,-1,-9,1,-9,-4,-10,5,-6,10,-6,-6,3],[6,-4,6,3,6,-6,-1,10,7,-10,7,3,-10,10],[-5,-1,-8,5,6,5,1,9,-4,9,8,4,-5,-7],[-7,2,-9,-4,-6,4,6,-6,-1,-8,3,-8,7,10],[-10,-9,-3,8,4,2,-10,1,-6,-10,-1,3,6,-7],[-5,6,-4,-2,-8,1,-4,-1,7,-2,-1,1,-3,-8],[-6,-3,-3,-6,-6,6,-1,-7,7,-1,9,9,-8,-4],[7,-9,6,-3,2,8,10,-3,8,-7,-7,-9,-4,8],[1,10,-1,-10,-2,8,6,2,-9,-6,5,1,-2,8]],[[-9,7,-8,7,-7,-8,1,2,1,3,1,6,3,-7],[8,-2,-4,6,-5,1,1,2,5,-1,-10,-6,-4,-4],[-10,1,-8,4,1,4,-4,-9,-4,10,4,6,6,4],[6,6,-1,-1,-1,1,-6,7,9,6,-6,3,-8,6],[2,-1,-8,-2,3,7,10,-5,2,6,-1,-5,9,-8],[6,10,-4,4,-7,2,-2,5,9,-10,-5,10,-1,2],[2,8,6,4,8,-3,-6,8,-5,4,4,-5,-10,-4],[2,2,5,-10,9,-2,-3,3,-1,-9,-3,-2,-7,-7],[-4,10,6,7,-4,-4,-2,10,-1,-7,4,-1,-9,4],[-2,10,2,9,2,3,5,-10,4,-2,-3,-1,5,5],[-7,-7,-2,4,-9,-3,-8,-8,2,2,8,-4,5,1]],[[7,3,7,-4,8,-10,-8,-1,-9,-1,-9,-8,-7,9],[8,-1,7,1,-5,-10,1,-2,-5,7,-4,-5,-1,9],[5,-1,9,8,-5,8,1,3,-10,-3,9,-6,-10,3],[4,-3,-1,2,6,8,8,-1,5,-5,2,9,9,4],[6,3,1,-1,-8,-4,2,8,-7,-2,-5,-7,-4,8],[-2,3,10,-10,-9,3,5,-6,7,-8,2,-7,9,-6],[8,6,-6,10,2,9,2,-3,-7,-5,-2,9,4,-5],[-9,6,6,-9,-1,-10,-10,8,-1,10,-9,-2,-7,9],[8,6,4,7,4,-4,-7,-7,3,1,-6,2,6,-10],[-9,-6,-10,6,-6,6,1,4,4,4,-7,-3,-6,2],[-1,6,-9,10,-7,-5,-1,1,-9,-7,8,-2,6,10]]], dtype = "int32")#candidate|6828|(13, 11, 14)|const|int32
var_6829 = relay.var("var_6829", dtype = "int32", shape = (13, 11, 14))#candidate|6829|(13, 11, 14)|var|int32
bop_6830 = relay.maximum(const_6828.astype('int32'), relay.reshape(var_6829.astype('int32'), relay.shape_of(const_6828))) # shape=(13, 11, 14)
output = relay.Tuple([bop_6830,])
output2 = relay.Tuple([bop_6830,])
func_6836 = relay.Function([var_6829,], output)
mod['func_6836'] = func_6836
mod = relay.transform.InferType()(mod)
var_6837 = relay.var("var_6837", dtype = "int32", shape = (13, 11, 14))#candidate|6837|(13, 11, 14)|var|int32
output = func_6836(var_6837)
func_6838 = relay.Function([var_6837], output)
mutated_mod['func_6838'] = func_6838
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4851_call = mod.get_global_var('func_4851')
func_4853_call = mutated_mod.get_global_var('func_4853')
call_6861 = func_4851_call()
call_6862 = func_4851_call()
var_6863 = relay.var("var_6863", dtype = "bool", shape = (2560,))#candidate|6863|(2560,)|var|bool
bop_6864 = relay.less_equal(call_6861.astype('bool'), relay.reshape(var_6863.astype('bool'), relay.shape_of(call_6861))) # shape=(2560,)
bop_6867 = relay.less_equal(call_6862.astype('bool'), relay.reshape(var_6863.astype('bool'), relay.shape_of(call_6862))) # shape=(2560,)
func_6767_call = mod.get_global_var('func_6767')
func_6770_call = mutated_mod.get_global_var('func_6770')
var_6874 = relay.var("var_6874", dtype = "float64", shape = (616,))#candidate|6874|(616,)|var|float64
var_6875 = relay.var("var_6875", dtype = "float64", shape = (13, 33))#candidate|6875|(13, 33)|var|float64
call_6873 = relay.TupleGetItem(func_6767_call(relay.reshape(var_6874.astype('float64'), [11, 8, 7]), relay.reshape(var_6875.astype('float64'), [13, 33]), ), 3)
call_6876 = relay.TupleGetItem(func_6770_call(relay.reshape(var_6874.astype('float64'), [11, 8, 7]), relay.reshape(var_6875.astype('float64'), [13, 33]), ), 3)
func_841_call = mod.get_global_var('func_841')
func_844_call = mutated_mod.get_global_var('func_844')
const_6890 = relay.const([-5.503423,6.039620,-1.212384,-6.710695,-5.001898,-2.843108,-8.978815,9.296070,9.728890,7.181657,1.395904,5.498522,-9.423391,9.668283,5.199646,-6.065128,-5.439013,-0.901690,0.735311,-8.175756,-8.979011,-4.048987,5.507922,7.654141,-8.330050,-7.096013,2.698944,-1.941107,3.689677,4.500428,-5.873322,-2.455943,9.722003,4.987363,0.132111,-3.437435,-5.678140,-2.202530,5.632696,-6.493179,2.593027,2.702242,-0.019658,-4.235989,1.781952,-4.452539,1.677887,-4.333742,-1.929206,3.984137,-0.615545,2.650184,-4.820600,-6.034415,5.086583,5.405877,-9.403763,8.134175,-1.203247,-3.297485,7.970236,0.121893,3.503976,2.842570,-7.871400,-3.850640,9.359600,2.699212,5.587759,8.809829,0.641645,0.079970,8.342902,-7.857857,-4.514862,-6.493114,-6.212649,-3.045610,2.291875,3.750309,8.715995,-8.391514,0.747309,-8.300941,-2.215977,4.240713,3.280361,5.247280,-2.260388,-8.178131,-0.201360,-3.840051,7.293438,-6.085569,4.018325,-8.476958,8.737079,6.457247,-6.009438,-3.284151,0.267331,-8.654352,-9.469483,3.779321,-2.101861,-1.636505,-7.406714,5.591236,1.185909,4.638029,2.441485,1.809683,-0.786922,8.879444,4.527654,5.626419,4.858692,0.517977,1.410980,-9.056613,-8.923015,-2.766861,-1.689620,-3.812987,-0.133638,-7.415271,5.573688,-2.298227,-3.248971,8.194528,1.239269,-6.213834,-5.573254,3.173813,-5.709763,6.329710,-8.158278,-3.890640,9.356559,-2.647728,-7.847382,3.763362,0.897424,1.861219,3.410573,8.942335,-8.963498,-4.610271,2.418361,-4.322817,0.355134,-0.514962,-3.898057,-5.406174,-8.617449,4.350090,8.845820,-7.564380,-7.719505,-4.030920,-8.459455,8.509919,2.550763,-7.062200,1.331097,6.794700,-2.360794,-8.644522,-1.884967,1.251782,5.772099,2.746797,6.356431,1.905069,1.983386,-0.572752,9.762665,-3.738219,2.107619,6.612685,-0.234586,2.509433,1.446867,4.425315,3.870663,-5.122398,2.772239,3.217932,7.060899,-7.346987,4.540662,1.399732,-4.629959,3.266203,-3.626598,-3.299153,3.261672,9.199949,6.972197,-0.472347,5.885439,-7.098569,-0.053717,-6.508263,-3.654541,7.153942,3.998815,5.985936,-8.456525,3.021669,5.535963,4.010098,3.447962,6.821268,3.216654,8.802422,-0.434454,8.301023,-1.288377,7.381028,2.090998,-0.604899,3.424497,-0.332322,-7.963783,-5.633046,-7.230754,4.003650,-8.168180,-2.081093,-8.937299,1.529699,8.274193,-4.575971,-3.312143,6.502690,-7.003947,-5.819792,1.914722,2.493389,-8.775342,2.739901,-3.268666,-2.973625,-0.442544,-2.474722,6.560133,0.975397,1.287113,-8.976202,4.047731,3.287975,8.774456,0.455240,-6.390119,-8.982482,-3.974948,1.421535,-2.932079,-0.015855,6.887767,-8.472463,-2.298890,1.542185,5.436367,4.812475,5.529679,-2.265750,-2.441431,1.445405,-2.560111,4.770700,-9.005744,8.226039,-6.358173,6.206726,1.795737,-1.111865,6.665569,9.637017,0.191734,-7.506148,6.316253,2.460002,-0.869106,-7.911837,8.274958,-5.215253,7.000612,-2.396948,1.003896,6.917755,2.633718,-8.127012,0.115185,9.569831,-2.410479,-4.782638,-3.152560,1.380836,-7.842246,-3.074358,4.910644,3.612614,-1.086028,-8.450128,6.705383,-4.949440,-7.057089,-7.121553,-9.662468,-9.937426,9.537902,-1.564266,0.694328,-9.770256,-7.630705,7.941945,5.123440,-1.881778,-0.898086,7.344286,-9.750485,5.686075,-4.455344,-8.263011,0.869362,7.655831,6.376896,3.802942,5.719429,0.020874,-3.760075,6.674538,7.721728,6.652936], dtype = "float32")#candidate|6890|(336,)|const|float32
call_6889 = relay.TupleGetItem(func_841_call(relay.reshape(const_6890.astype('float32'), [7, 8, 6])), 0)
call_6891 = relay.TupleGetItem(func_844_call(relay.reshape(const_6890.astype('float32'), [7, 8, 6])), 0)
output = relay.Tuple([bop_6864,call_6873,var_6874,var_6875,call_6889,const_6890,])
output2 = relay.Tuple([bop_6867,call_6876,var_6874,var_6875,call_6891,const_6890,])
func_6894 = relay.Function([var_6863,var_6874,var_6875,], output)
mod['func_6894'] = func_6894
mod = relay.transform.InferType()(mod)
mutated_mod['func_6894'] = func_6894
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6894_call = mutated_mod.get_global_var('func_6894')
var_6896 = relay.var("var_6896", dtype = "bool", shape = (2560,))#candidate|6896|(2560,)|var|bool
var_6897 = relay.var("var_6897", dtype = "float64", shape = (616,))#candidate|6897|(616,)|var|float64
var_6898 = relay.var("var_6898", dtype = "float64", shape = (13, 33))#candidate|6898|(13, 33)|var|float64
call_6895 = func_6894_call(var_6896,var_6897,var_6898,)
output = call_6895
func_6899 = relay.Function([var_6896,var_6897,var_6898,], output)
mutated_mod['func_6899'] = func_6899
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4553_call = mod.get_global_var('func_4553')
func_4555_call = mutated_mod.get_global_var('func_4555')
call_6904 = relay.TupleGetItem(func_4553_call(), 1)
call_6905 = relay.TupleGetItem(func_4555_call(), 1)
func_5123_call = mod.get_global_var('func_5123')
func_5125_call = mutated_mod.get_global_var('func_5125')
call_6915 = func_5123_call()
call_6916 = func_5123_call()
func_2896_call = mod.get_global_var('func_2896')
func_2900_call = mutated_mod.get_global_var('func_2900')
const_6922 = relay.const([4.729793,-4.561797,-6.118358,4.487530,0.750458,4.377705,9.061133,-4.712443,-2.137797,-3.966889,7.602977,-5.860423,1.882395,2.998431,9.438745,-6.513834,2.279214,-4.445373,-4.541719,7.067622,-0.493031,-6.655938,6.836981,-6.719578,2.338141,6.767757,-8.823801,-8.338413,-1.245591,-3.200667,6.866822,-8.470571,6.750052,-9.671335,-9.825481,1.586741,-3.420537,-1.376538,-2.249409,3.145764,-0.977289,-7.242657,3.696085,-4.545812,1.395691,2.505480,6.346945,7.449909,-4.981545,-7.984151,0.749433,8.191837,1.085163,1.497601,-3.509398,-6.634617,-2.707233,9.098269,9.338608,4.431392,-5.280518,6.877388,-1.716090,-0.399616,-3.581787,6.082230,0.288942,-2.700410,-6.338744,-9.699048,-4.937988,7.023838,-3.203330,-6.919772,-3.104116,-6.496706,-6.176303,1.203471,-1.777008,-4.502688,-0.409192,-8.875841,-1.240318,0.649854,3.621889,-9.014007,-6.982033,-6.838058,-7.761831,-5.997064,-9.412329,-2.973302,-9.283072,5.199541,1.647118,2.890715,6.706411,6.882136,-6.733196,-0.034304,4.677670,-1.828776,9.106268,-4.064144,3.074888,-1.557523,4.960671,7.670475,-3.244332,-0.475774,-3.792059,-8.824009,6.984392,1.145532,-2.207308,6.889538,-0.754004,9.160241,-9.564568,-2.773393,-4.903084,2.020592,6.547984,1.642826,1.452113,2.929224,9.184699,7.511340,-2.589827,0.124536,0.618003,-2.613659,-8.154132,8.134683,6.093237,-1.847222,-3.607944,9.141385,-7.057231,-7.943824,-7.745373,5.514722,3.722288,-0.569506,-7.103155,-7.865450,0.940856,9.119952,-3.138861,-4.454839,-3.063843,9.568993,2.399614,-9.326646,1.827644,1.542614,2.429166,9.269097,-0.618238,-3.328503,0.179075,-3.152673,5.129290,-5.379226,-6.868390,2.981056,-2.580803,2.007591,4.308011,3.143350,-0.472472,-3.150797,-3.506380,-6.683965,2.077649,2.235336,4.339730,2.728892,6.559865,-7.359329,8.065323,2.263115,-5.873218,0.947195,-1.453702,-3.949059,4.617554,-2.719995,1.881110,-5.452502,8.301298,0.825118,4.778177,8.124704,5.372620,-5.022272,1.975427,-8.451371,1.438796,2.817085,-7.387506,-2.478312,-4.422728,0.958220,-5.755768,6.232567,0.966612,-7.020227,0.312466,-5.643281,-8.962861,2.467182,-2.466322,7.205731,1.913085,4.911607,9.882291,-4.584562,0.655959,1.955874,6.867890,2.153346,6.263487,-1.223534,-6.616113,0.108602,6.952346,-5.040039,-6.766667,3.436812,2.665625,-7.788474,9.304275,-4.401562,-5.943248,-8.688401,-8.144098,9.475984,6.246844,6.902145,-7.751409,-8.013971,0.950140,2.627130,1.040518,-3.402799,0.614721,8.988220,5.853698,0.857007,1.020588,0.796350,-9.682434,7.780408,-4.316858,3.134168,-6.505614,4.932763,-6.365288,7.896300,5.306575,-6.768310,-7.051356,7.931849,-6.713184,-0.779309,-4.936047,2.513311,-6.411216,9.161460,1.442474,4.603939,-2.510260,-2.048643,8.079561,-3.090422,4.995708,7.043046,-0.351890,2.024657,-4.391611,-4.818810,1.104406,7.601961,8.512666,1.301221,1.074775,-1.348709,4.127558,-9.457301,-2.981152,0.899643,-4.578479,-1.488525,-4.329144,6.643528,5.235743,4.702984,9.981694,-2.024416,5.991291,-9.637325,-0.710899,4.074455,4.168546,-5.118471,-4.046956,8.487320,-7.662727,-0.893550,3.641749,1.908934,4.846446,4.185768,0.490713,6.146499,3.169691,5.595260,-5.022085,9.528769,8.393076,-4.624050,-7.894104,-8.496442,8.177013,7.553937,-3.946276,7.963615,8.655381,-1.167267,-3.543919,-3.024418,7.756744,7.683846,-9.629075,8.466149], dtype = "float32")#candidate|6922|(336,)|const|float32
call_6921 = relay.TupleGetItem(func_2896_call(relay.reshape(call_6904.astype('float64'), [32,]), relay.reshape(const_6922.astype('float32'), [24, 14]), relay.reshape(const_6922.astype('float32'), [24, 14]), ), 4)
call_6923 = relay.TupleGetItem(func_2900_call(relay.reshape(call_6904.astype('float64'), [32,]), relay.reshape(const_6922.astype('float32'), [24, 14]), relay.reshape(const_6922.astype('float32'), [24, 14]), ), 4)
output = relay.Tuple([call_6904,call_6915,call_6921,const_6922,])
output2 = relay.Tuple([call_6905,call_6916,call_6923,const_6922,])
func_6927 = relay.Function([], output)
mod['func_6927'] = func_6927
mod = relay.transform.InferType()(mod)
mutated_mod['func_6927'] = func_6927
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6927_call = mutated_mod.get_global_var('func_6927')
call_6928 = func_6927_call()
output = call_6928
func_6929 = relay.Function([], output)
mutated_mod['func_6929'] = func_6929
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6927_call = mod.get_global_var('func_6927')
func_6929_call = mutated_mod.get_global_var('func_6929')
call_6942 = relay.TupleGetItem(func_6927_call(), 3)
call_6943 = relay.TupleGetItem(func_6929_call(), 3)
func_5059_call = mod.get_global_var('func_5059')
func_5061_call = mutated_mod.get_global_var('func_5061')
call_6945 = relay.TupleGetItem(func_5059_call(), 0)
call_6946 = relay.TupleGetItem(func_5061_call(), 0)
func_6894_call = mod.get_global_var('func_6894')
func_6899_call = mutated_mod.get_global_var('func_6899')
const_6955 = relay.const([[False,False,False,True,False,True,True,False,True,False,True,True,True,False,True,True,False,True,True,False,True,True,True,True,True,True,False,False,True,True,True,True,True,False,True,False,True,False,False,False,False,True,True,True,True,False,True,True,True,False,True,True,True,False,False,True,False,False,True,True,False,True,True,True,True,False,True,False,False,True,True,False,False,False,True,True,True,False,False,False],[True,False,True,False,False,False,True,False,False,True,False,False,False,True,False,True,True,True,True,True,True,False,True,True,True,False,True,False,True,True,False,False,True,False,False,False,False,False,False,False,True,False,True,True,True,True,False,False,False,True,True,True,False,False,True,True,True,False,True,False,True,True,False,True,True,False,True,True,False,True,False,True,False,True,False,True,False,False,False,False],[False,True,False,False,False,True,True,True,True,False,True,False,True,True,True,True,True,False,False,False,False,False,True,False,True,False,True,True,False,True,False,False,True,False,False,True,True,True,False,False,True,True,False,True,False,False,False,True,False,False,True,False,True,True,False,False,True,False,False,True,True,False,False,False,False,False,True,True,False,True,True,True,False,True,False,False,True,False,False,False],[True,True,False,False,False,True,False,True,True,False,True,False,False,True,True,False,True,False,True,True,False,False,True,False,False,True,True,True,False,True,True,True,False,False,True,True,True,True,False,False,False,True,False,False,False,True,True,False,False,False,True,False,True,False,False,True,False,True,False,False,False,False,True,True,False,False,False,True,True,False,True,True,False,True,False,False,True,True,False,True],[True,False,True,False,False,True,True,False,True,False,False,True,False,True,False,False,True,False,True,True,True,False,False,True,True,False,True,False,True,False,True,True,False,False,True,False,False,True,True,True,True,True,False,True,True,True,True,False,True,False,True,False,False,False,True,True,False,True,False,False,True,True,True,True,False,False,True,False,True,False,True,False,False,True,True,True,False,False,True,False],[False,True,False,False,True,False,False,True,True,False,True,False,True,False,True,True,True,False,True,False,True,False,True,True,False,False,False,False,True,True,False,True,False,True,False,True,True,False,True,False,False,False,False,True,True,True,True,False,True,False,False,False,True,True,True,True,False,True,True,True,True,False,False,True,True,False,True,False,False,False,False,False,False,False,False,True,True,True,True,False],[True,False,True,False,True,False,True,True,False,True,False,True,True,True,False,False,True,True,False,False,True,False,False,False,False,False,True,True,True,True,True,True,True,False,True,False,True,True,False,True,False,False,False,True,True,False,True,True,False,True,True,True,True,True,True,True,False,True,False,True,False,True,False,True,False,False,True,True,True,True,False,True,False,False,False,True,False,True,False,False],[False,True,False,True,True,True,False,True,False,False,False,False,True,True,True,True,True,True,False,False,False,False,True,False,False,True,False,True,False,False,True,False,False,True,True,True,True,True,False,True,True,False,False,False,True,True,False,False,False,False,False,True,True,True,True,True,False,True,False,False,False,False,False,False,True,True,True,False,False,True,False,True,True,False,False,True,True,False,True,False],[False,False,True,True,True,False,True,False,False,True,False,False,True,True,False,True,False,True,True,True,False,True,False,True,True,False,False,True,False,False,True,True,False,False,False,True,False,True,True,False,True,False,False,False,True,False,True,True,True,True,False,True,False,True,True,False,True,True,True,False,True,False,True,True,False,True,True,False,True,False,True,False,False,True,False,True,False,False,True,True],[True,True,True,True,False,False,True,False,True,False,False,True,False,True,False,False,False,True,True,True,False,False,True,False,True,False,False,True,False,True,True,True,False,False,False,True,False,False,True,True,False,True,False,True,False,True,True,False,False,False,False,False,False,True,True,False,True,True,True,True,False,False,False,False,False,True,True,False,True,False,False,True,True,False,False,True,True,False,False,False],[False,False,False,True,True,True,True,True,False,False,False,False,True,True,True,True,False,False,False,True,True,False,False,False,False,True,False,False,True,False,False,True,False,False,False,True,False,True,False,False,False,True,True,True,False,False,False,False,False,False,True,True,False,True,False,True,False,False,True,True,False,True,True,False,True,True,True,True,True,False,False,True,True,True,False,True,True,False,True,True],[True,False,True,True,True,True,False,False,True,True,True,True,False,False,True,False,False,False,True,True,False,True,False,True,False,False,False,True,False,True,True,True,True,False,True,True,True,True,True,False,True,False,True,True,True,False,True,True,False,True,False,True,False,False,False,True,False,True,False,False,False,True,False,False,True,True,True,False,False,False,False,True,False,True,True,True,True,False,False,False],[True,False,True,False,False,True,True,False,False,True,True,True,True,True,True,False,False,False,True,False,False,True,False,False,True,True,False,False,True,False,False,True,True,True,True,True,True,False,False,True,True,True,False,False,False,True,True,False,True,False,False,True,True,False,False,False,True,False,True,True,False,True,False,True,True,True,True,False,True,True,True,False,False,False,True,False,True,False,False,True],[False,False,False,True,True,False,False,False,False,True,True,True,False,True,False,True,False,True,True,True,False,True,False,False,True,True,False,False,True,False,True,True,True,False,False,False,False,False,False,True,True,False,False,False,True,False,True,False,False,True,True,False,False,True,True,True,False,True,True,True,False,True,False,True,True,True,True,True,True,True,False,True,True,False,True,True,True,False,True,True],[True,False,True,True,False,False,False,False,False,False,False,False,True,False,True,False,True,False,True,True,True,False,False,True,False,True,False,True,True,True,False,True,True,False,False,True,False,True,False,False,True,False,False,False,False,True,False,False,True,True,True,True,True,True,False,False,False,False,True,True,True,False,False,False,False,True,False,False,False,False,True,True,False,True,True,False,True,True,False,False],[False,True,True,False,False,True,False,False,True,True,False,False,True,False,True,True,True,True,False,True,True,True,False,True,False,True,True,True,False,False,False,True,True,True,True,False,True,True,False,False,False,False,True,False,True,False,True,False,True,True,False,False,False,False,True,True,False,False,False,False,False,False,True,False,False,False,False,True,True,False,True,False,True,False,False,False,False,True,False,True],[True,False,True,True,True,False,False,True,True,True,True,True,True,True,True,True,True,True,False,True,False,False,True,True,False,True,True,True,False,True,False,True,False,False,True,True,False,True,False,True,False,True,True,False,False,False,True,False,False,False,True,False,False,False,True,False,True,False,True,True,True,False,True,True,False,False,False,False,True,False,False,False,False,True,False,False,True,True,False,True],[True,True,True,True,True,False,False,False,False,True,False,False,True,True,True,True,True,False,False,False,False,False,False,False,True,False,True,False,False,True,False,True,True,True,True,False,False,True,True,False,False,True,False,False,False,False,True,True,False,True,True,False,True,False,True,False,False,False,True,False,True,True,False,False,False,True,True,False,False,False,True,False,True,True,False,True,True,False,False,True],[True,True,False,True,True,True,True,False,True,False,False,False,True,False,True,False,True,False,False,True,False,True,False,True,True,False,False,False,False,False,False,False,True,False,True,True,True,False,True,False,True,True,False,False,False,True,False,True,True,True,True,True,False,True,False,True,True,False,False,False,False,False,False,False,False,True,True,True,True,False,True,False,True,True,True,True,True,True,True,False],[False,False,False,True,True,False,False,False,True,False,False,True,False,False,True,False,True,False,True,True,False,False,True,False,False,False,True,True,False,False,True,False,False,True,True,True,False,False,False,True,False,False,False,True,True,False,True,False,False,True,True,True,True,True,True,True,True,False,False,True,True,False,False,True,True,True,True,True,True,True,False,False,True,True,True,False,True,False,True,True],[True,False,False,True,True,True,False,True,False,True,False,True,True,False,False,False,False,True,False,True,False,False,True,False,True,False,False,False,True,True,False,False,False,False,True,True,False,False,False,False,True,True,True,False,True,True,False,True,True,False,True,True,True,False,True,False,True,False,True,False,True,True,False,True,True,False,True,True,False,True,True,True,False,False,True,False,False,True,True,True],[False,False,False,True,True,False,True,False,False,False,False,True,True,False,True,True,False,False,False,False,True,False,True,False,False,False,False,False,False,True,True,False,False,False,True,True,False,False,True,False,True,True,True,False,True,False,True,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False,True,False,True,False,False,False,True,False,True,False,False,True,False,False,True,False,True],[True,False,True,True,False,True,True,True,True,False,True,False,True,False,False,True,True,False,False,True,False,False,False,False,False,False,False,True,True,False,False,False,True,True,True,True,False,False,False,True,True,False,True,False,False,True,True,True,False,True,True,False,False,True,False,False,True,True,True,False,True,True,False,False,False,True,False,False,False,False,True,True,False,True,True,False,False,False,False,False],[False,True,False,False,False,True,False,False,False,False,False,True,True,True,False,False,False,False,False,False,False,False,True,True,True,False,True,True,True,True,False,True,False,False,True,True,True,True,True,True,True,True,True,True,False,True,True,True,True,True,True,True,True,True,False,False,True,False,False,False,True,False,True,False,False,False,True,False,False,False,True,True,True,False,False,False,True,True,True,False],[True,False,False,False,True,False,True,True,False,True,True,False,True,True,False,True,True,True,True,True,True,True,True,False,True,True,False,True,True,True,True,False,False,True,False,True,False,True,False,False,False,False,False,True,True,False,True,False,True,False,False,False,True,True,True,True,False,True,False,True,True,True,True,True,True,False,False,True,True,True,True,False,True,False,True,False,False,False,False,False],[True,False,False,False,True,True,True,False,True,True,True,False,True,True,True,False,True,True,True,False,False,False,False,True,False,False,True,True,False,False,True,True,False,True,False,False,True,True,False,False,True,True,False,False,False,True,False,True,False,True,False,True,True,False,False,False,False,False,True,True,False,False,False,False,True,False,False,False,False,False,False,True,False,False,True,False,True,True,False,False],[False,False,True,True,False,True,True,True,True,False,False,True,False,False,False,False,True,False,False,True,True,True,False,True,True,True,True,True,False,True,True,False,True,False,True,False,True,True,True,True,True,True,False,False,True,False,False,False,True,False,True,False,True,True,True,True,False,False,False,False,False,True,False,True,True,False,True,False,True,False,True,False,True,False,False,True,False,False,True,True],[True,True,True,False,False,False,True,True,True,True,True,True,False,False,False,True,False,False,False,True,False,True,True,False,True,False,True,False,False,False,True,True,True,True,False,False,True,True,True,False,True,False,True,True,False,False,True,False,False,True,True,False,False,True,False,False,True,True,False,True,False,True,True,True,False,True,True,False,False,False,False,True,True,False,True,True,False,False,False,False],[True,True,False,True,False,True,True,True,False,True,True,False,True,False,False,True,True,True,True,True,False,False,True,True,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,True,True,False,False,True,False,False,False,False,True,True,False,True,False,True,True,False,True,True,False,False,True,True,False,False,False,False,True,False,False,True,True,True,False,False,False,False,False,False,False],[True,False,False,True,False,True,False,True,True,False,True,True,True,True,True,True,True,True,True,True,False,False,False,True,False,False,False,True,False,False,True,False,False,False,True,True,True,True,False,False,True,True,True,True,False,False,False,True,False,True,False,False,False,True,True,False,True,True,True,False,False,True,False,False,True,True,True,False,False,True,True,False,True,False,True,True,True,True,True,True],[True,True,True,True,False,False,True,False,False,True,False,False,False,False,False,True,True,False,True,True,True,False,True,False,True,False,False,False,False,True,True,True,False,False,False,True,False,True,True,False,False,True,False,False,True,True,True,False,True,True,True,False,True,True,True,False,True,True,False,True,False,True,False,False,True,False,True,False,False,False,False,False,True,True,True,False,False,False,False,True],[True,False,True,True,True,False,True,False,True,False,False,True,True,False,False,True,True,True,True,True,False,True,True,True,False,False,False,False,True,False,True,False,False,True,True,True,True,True,False,True,True,False,False,False,False,False,True,True,False,False,False,False,False,False,True,False,False,True,True,True,False,False,False,False,True,True,False,True,False,False,False,True,False,False,False,False,True,True,False,True]], dtype = "bool")#candidate|6955|(32, 80)|const|bool
const_6956 = relay.const([4.229349,9.960083,9.502693,9.964231,-0.319603,2.947276,-7.044182,0.194128,1.882524,5.586289,8.985833,1.691140,-5.883245,0.064915,0.557785,3.444134,5.303987,2.345515,0.887884,9.237547,6.171298,-8.171501,8.775589,-2.648257,7.297919,-8.662106,-1.146800,-5.679490,-4.247253,-5.974919,7.542868,-8.468177,2.589516,4.604395,8.201872,-7.144654,9.592503,-1.931085,-4.272296,7.880348,-4.482684,8.163067,-0.906611,-6.807037,3.177744,-7.503832,-3.517251,0.411199,7.639266,8.590168,7.086582,3.305819,-1.724401,4.234124,-5.144371,-3.798123,2.780149,9.631342,7.008330,-1.159711,0.836562,2.914024,-2.966555,9.472100,5.496382,-3.733602,-8.014122,-1.863715,6.694812,7.487434,-7.679535,8.253066,0.582263,0.316466,-8.817558,2.381964,5.724176,9.677035,-4.037114,3.008312,4.970898,-8.803529,1.941136,-4.917517,8.335345,1.370710,5.536049,1.673306,6.854991,3.072339,-9.985530,7.798964,5.205308,4.350031,4.729759,-0.177740,-7.186662,-4.474007,9.009448,9.919778,1.270179,-9.623835,8.218258,0.028660,4.051805,-4.272108,-4.862383,7.058382,-8.242578,0.767303,6.977480,1.051748,-4.185794,8.054365,-3.678205,-1.831565,0.006711,5.870136,-7.779186,-5.749309,4.474212,-9.820854,-9.404923,-7.451997,-8.009571,8.630710,1.487705,-6.721927,-8.842519,5.789825,-3.820454,-9.227296,-1.454945,-6.935748,6.646382,-9.428140,0.017791,-7.992550,-9.644262,-6.258159,-7.436638,-0.054347,-5.958530,6.668772,9.006720,-1.293672,1.324990,4.059261,-7.340526,-5.308452,-1.584894,-7.327480,1.298392,-9.565915,5.586073,1.871711,-0.709395,2.505205,-6.443742,8.799562,2.382348,2.764202,6.038117,8.869739,-3.262630,2.252441,-6.026230,-4.779557,-8.527109,-6.427413,4.518497,6.472362,6.847423,1.124178,9.191132,8.696368,-6.532949,6.429992,-2.926739,5.978066,6.632653,0.922470,-4.995675,2.436358,-0.508887,9.088248,3.870730,6.146071,2.438082,-2.196199,-9.155151,-4.036469,-9.335167,-7.682330,-4.383123,1.383095,-1.192912,4.305950,-6.363759,2.193258,-7.952254,9.848322,1.655604,0.681639,8.879802,1.094968,5.026235,-4.679551,-4.920644,-3.599585,-5.679045,-3.265919,8.588867,3.606127,-9.439872,-1.309757,1.271877,4.952675,1.919910,-0.394827,-9.731671,-7.394875,3.182538,-7.422343,4.153245,-1.819358,-7.764393,-5.417525,-9.950082,-0.163844,-9.339671,-6.983349,-2.986161,-0.344448,-1.095114,-1.061188,-3.253921,-9.304288,9.509550,4.894709,-2.736630,-0.378915,-3.918450,-8.743057,-2.539253,-6.685665,8.666452,2.164952,-9.441282,8.873360,-5.822706,1.736237,-5.808075,-2.368180,-0.754933,-0.727862,6.303722,-5.713920,2.242323,-4.992944,0.296835,-8.668083,8.533605,-9.640701,7.197683,-9.135474,2.188094,4.907019,-3.529804,8.521646,8.985775,4.692894,-8.719377,6.482646,-5.393489,9.562426,-2.796624,-1.174319,3.637975,2.382416,6.820896,-9.755710,9.219889,-0.378662,7.323945,2.280006,-1.607714,0.526020,-9.164611,-1.416110,2.676286,-4.548334,-7.037434,5.515237,1.817928,-1.272505,6.465090,2.506324,-3.065895,-8.612437,4.785150,6.600143,-9.246447,-2.165738,6.740433,0.048516,-2.536038,-5.355232,-1.921787,1.801605,-3.914060,-2.287574,-7.698297,-1.806369,-6.583651,6.735729,-0.399760,3.232555,0.791742,7.852769,-9.207165,7.968704,-5.304577,3.407658,-6.973036,-3.000749,9.625100,-0.459734,-3.213946,-6.584088,9.040862,-5.318074,-4.690699,-8.445430,6.782999,-3.491879,-2.014190,0.265203,5.737772,4.805993,7.053087,-7.375680,5.448098,-2.083454,-9.871192,-0.025730,-5.548019,1.681900,-6.762323,4.902532,-2.781446,7.519777,4.310955,4.056007,-1.137892,-8.387195,8.540565,-0.766052,9.541248,-0.471188,7.936134,5.066438,-7.661263,2.752384,-8.487825,-9.198367,-0.201239,7.524155,-3.670340,4.768953,-9.326970,-9.684543,-4.405910,-5.908709,-3.149196,6.378160,5.878997,7.646425,-2.922230,-3.391830,4.007044,1.273276,-1.227622,-7.857527,5.702937,7.225354,6.863484,6.850433,-8.454711,-2.970292,1.021020,1.517527,-9.418696,-2.836679,4.131683,-8.913345,2.680905,-5.066130,-1.284097,3.639843,-1.057128,2.175457,-9.079379,-7.550238,-1.827666,2.085458,-2.605380,-4.326839,-9.674573,1.917026,4.316403,-3.857626,5.439330,4.843053,1.740133,-2.382164,3.380913,-1.534294,-8.773268,4.623507,5.828545,-8.107429,3.280651,-2.124256,1.257390,0.645074,2.458814,-6.769754,-4.054576], dtype = "float64")#candidate|6956|(429,)|const|float64
call_6954 = relay.TupleGetItem(func_6894_call(relay.reshape(const_6955.astype('bool'), [2560,]), relay.reshape(call_6945.astype('float64'), [616,]), relay.reshape(const_6956.astype('float64'), [13, 33]), ), 3)
call_6957 = relay.TupleGetItem(func_6899_call(relay.reshape(const_6955.astype('bool'), [2560,]), relay.reshape(call_6945.astype('float64'), [616,]), relay.reshape(const_6956.astype('float64'), [13, 33]), ), 3)
func_6767_call = mod.get_global_var('func_6767')
func_6770_call = mutated_mod.get_global_var('func_6770')
call_6980 = relay.TupleGetItem(func_6767_call(relay.reshape(call_6945.astype('float64'), [11, 8, 7]), relay.reshape(const_6956.astype('float64'), [13, 33]), ), 1)
call_6981 = relay.TupleGetItem(func_6770_call(relay.reshape(call_6945.astype('float64'), [11, 8, 7]), relay.reshape(const_6956.astype('float64'), [13, 33]), ), 1)
func_6339_call = mod.get_global_var('func_6339')
func_6342_call = mutated_mod.get_global_var('func_6342')
var_6992 = relay.var("var_6992", dtype = "float64", shape = (660,))#candidate|6992|(660,)|var|float64
call_6991 = relay.TupleGetItem(func_6339_call(relay.reshape(var_6992.astype('float64'), [11, 5, 12]), relay.reshape(var_6992.astype('float64'), [11, 5, 12]), ), 1)
call_6993 = relay.TupleGetItem(func_6342_call(relay.reshape(var_6992.astype('float64'), [11, 5, 12]), relay.reshape(var_6992.astype('float64'), [11, 5, 12]), ), 1)
func_5404_call = mod.get_global_var('func_5404')
func_5405_call = mutated_mod.get_global_var('func_5405')
call_6994 = relay.TupleGetItem(func_5404_call(), 1)
call_6995 = relay.TupleGetItem(func_5405_call(), 1)
uop_7003 = relay.log10(const_6956.astype('float64')) # shape=(429,)
var_7008 = relay.var("var_7008", dtype = "float64", shape = (429,))#candidate|7008|(429,)|var|float64
bop_7009 = relay.multiply(uop_7003.astype('int8'), relay.reshape(var_7008.astype('int8'), relay.shape_of(uop_7003))) # shape=(429,)
func_2473_call = mod.get_global_var('func_2473')
func_2477_call = mutated_mod.get_global_var('func_2477')
const_7014 = relay.const([2.639571,-1.796790,-9.616080,4.288880,1.058404,-1.087119,0.985342,1.329342,-5.711425,0.436439,5.908771,-8.319359,-0.212127,4.369035,4.078210,-8.758774,-1.539459,5.260303,-3.594594,-7.522808,2.164651,2.461799,-0.007163,4.225307,-1.780657,-4.457758,3.113180,4.389922,0.393338,2.545143,-3.902765,7.814450,-7.502114,9.971054,5.062741,-5.530075,9.111309,7.941239,3.554581,-7.346875,8.332611,1.566502,-5.986061,-8.856333,2.737271,-7.481269,8.742249,-0.549715,9.712710,4.182983,7.391896,4.874926,7.598219,6.011393,0.348299], dtype = "float64")#candidate|7014|(55,)|const|float64
var_7015 = relay.var("var_7015", dtype = "float64", shape = (240,))#candidate|7015|(240,)|var|float64
call_7013 = relay.TupleGetItem(func_2473_call(relay.reshape(const_7014.astype('float64'), [5, 1, 11]), relay.reshape(var_7015.astype('float64'), [240,]), relay.reshape(const_6955.astype('float32'), [2560,]), ), 9)
call_7016 = relay.TupleGetItem(func_2477_call(relay.reshape(const_7014.astype('float64'), [5, 1, 11]), relay.reshape(var_7015.astype('float64'), [240,]), relay.reshape(const_6955.astype('float32'), [2560,]), ), 9)
output = relay.Tuple([call_6942,call_6945,call_6954,const_6955,call_6980,call_6991,var_6992,call_6994,bop_7009,call_7013,const_7014,var_7015,])
output2 = relay.Tuple([call_6943,call_6946,call_6957,const_6955,call_6981,call_6993,var_6992,call_6995,bop_7009,call_7016,const_7014,var_7015,])
func_7018 = relay.Function([var_6992,var_7008,var_7015,], output)
mod['func_7018'] = func_7018
mod = relay.transform.InferType()(mod)
var_7019 = relay.var("var_7019", dtype = "float64", shape = (660,))#candidate|7019|(660,)|var|float64
var_7020 = relay.var("var_7020", dtype = "float64", shape = (429,))#candidate|7020|(429,)|var|float64
var_7021 = relay.var("var_7021", dtype = "float64", shape = (240,))#candidate|7021|(240,)|var|float64
output = func_7018(var_7019,var_7020,var_7021,)
func_7022 = relay.Function([var_7019,var_7020,var_7021,], output)
mutated_mod['func_7022'] = func_7022
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4553_call = mod.get_global_var('func_4553')
func_4555_call = mutated_mod.get_global_var('func_4555')
call_7027 = relay.TupleGetItem(func_4553_call(), 0)
call_7028 = relay.TupleGetItem(func_4555_call(), 0)
output = call_7027
output2 = call_7028
func_7030 = relay.Function([], output)
mod['func_7030'] = func_7030
mod = relay.transform.InferType()(mod)
mutated_mod['func_7030'] = func_7030
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7030_call = mutated_mod.get_global_var('func_7030')
call_7031 = func_7030_call()
output = call_7031
func_7032 = relay.Function([], output)
mutated_mod['func_7032'] = func_7032
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6826_call = mod.get_global_var('func_6826')
func_6827_call = mutated_mod.get_global_var('func_6827')
call_7035 = relay.TupleGetItem(func_6826_call(), 1)
call_7036 = relay.TupleGetItem(func_6827_call(), 1)
const_7048 = relay.const([[[False,True,False,False,True,True,False,True,True,True,True,False,False],[True,True,True,False,True,False,False,False,False,False,False,False,False],[True,False,True,True,False,True,False,False,True,True,True,True,False],[True,True,False,True,True,True,True,False,True,False,True,True,True],[True,False,True,False,False,True,False,True,False,False,True,False,False],[False,True,False,False,False,True,True,False,False,False,True,True,False]],[[False,False,True,True,True,True,True,False,True,True,True,True,True],[True,True,False,True,True,False,True,True,False,True,False,True,True],[True,True,False,False,False,False,False,True,True,True,False,True,False],[True,False,True,False,True,True,True,True,False,True,False,True,False],[False,False,True,False,True,False,True,True,False,True,True,True,True],[True,False,True,False,False,True,False,False,True,False,True,True,True]],[[True,False,True,True,False,False,True,True,False,True,True,True,False],[False,True,False,True,False,True,True,True,True,False,False,True,False],[False,True,True,True,True,False,True,False,True,True,False,True,True],[False,False,False,False,False,False,True,False,True,True,True,True,False],[False,True,True,False,True,True,True,False,False,False,False,True,True],[False,False,True,True,True,False,True,False,False,True,False,True,False]],[[False,False,True,True,False,False,False,True,False,True,False,True,True],[False,False,True,True,True,True,False,False,False,True,False,True,True],[False,True,False,True,True,False,True,False,True,False,False,True,True],[False,False,False,False,True,False,False,False,False,True,False,False,True],[False,True,False,False,True,False,True,True,False,False,True,True,False],[False,True,True,True,True,True,True,True,True,False,True,True,False]],[[True,False,False,True,False,True,True,False,True,False,False,False,True],[False,False,False,False,False,False,True,True,True,False,True,False,True],[False,False,True,False,False,False,False,True,False,False,False,True,False],[True,True,True,True,False,True,True,False,True,True,False,True,True],[True,True,False,True,True,False,True,False,False,True,False,True,False],[False,True,False,True,False,True,False,True,False,False,False,True,False]],[[False,True,False,True,False,True,False,False,False,True,False,True,True],[True,True,False,False,True,False,True,False,False,True,True,False,False],[False,True,True,True,True,True,False,False,False,False,True,False,False],[False,False,True,True,True,False,False,True,False,False,False,True,False],[False,True,True,False,True,True,True,False,True,True,True,True,True],[True,False,False,False,False,False,False,True,False,True,True,False,True]],[[True,False,True,True,False,True,False,False,True,True,True,True,False],[False,False,True,False,True,True,False,True,True,False,False,True,False],[False,False,True,False,True,True,True,False,False,True,True,False,True],[True,True,True,False,True,True,False,True,True,True,False,True,False],[True,False,False,False,False,False,False,True,True,False,False,False,False],[False,True,False,False,True,True,False,False,True,True,True,True,False]],[[True,False,False,False,False,True,False,True,True,False,True,False,False],[False,False,False,False,False,True,False,False,True,True,True,True,True],[False,True,False,True,True,True,True,False,False,False,True,False,True],[True,True,False,True,True,True,True,True,True,True,False,True,False],[False,False,True,True,True,False,False,False,True,False,True,True,False],[True,True,True,False,False,False,True,False,True,False,True,False,True]],[[True,False,False,False,False,False,True,True,True,False,True,False,False],[True,False,False,False,False,True,True,True,True,True,False,False,True],[True,False,True,False,False,False,False,False,False,False,False,True,True],[True,False,True,True,False,False,True,False,False,True,False,True,True],[True,False,True,False,True,False,False,False,False,False,False,False,False],[True,False,False,False,False,False,False,True,True,True,True,True,True]],[[True,False,True,False,True,True,False,False,True,True,True,True,False],[True,False,False,False,False,True,False,True,False,False,True,False,True],[False,True,False,True,True,True,False,False,True,True,True,True,False],[False,True,True,False,True,False,False,True,False,False,True,True,True],[True,True,False,True,True,True,True,True,False,False,True,False,False],[False,False,False,False,False,False,True,True,False,False,True,False,True]],[[False,True,False,True,False,True,False,True,True,True,False,False,True],[False,False,False,True,False,False,True,False,False,True,True,True,False],[True,True,True,False,True,True,True,True,False,True,True,True,False],[False,False,False,False,True,True,False,True,False,False,False,True,True],[False,False,False,False,False,True,True,True,True,False,True,False,False],[True,False,True,False,False,True,True,True,True,False,False,True,False]],[[False,True,False,True,False,False,True,False,False,True,False,False,False],[True,False,True,False,False,True,False,True,True,False,False,False,True],[True,True,True,False,True,True,False,True,False,False,True,True,True],[False,False,True,False,True,False,False,False,False,True,True,False,False],[True,True,True,True,False,False,False,False,True,True,True,True,False],[False,True,False,True,False,False,False,True,False,True,False,False,True]],[[False,True,True,True,False,False,False,True,True,False,True,False,False],[False,True,False,True,False,False,True,False,True,True,False,True,True],[False,False,True,False,False,True,False,True,False,False,True,False,True],[False,True,False,False,True,True,False,True,False,False,True,True,False],[True,True,False,False,False,False,True,True,False,True,False,False,False],[True,False,True,True,True,True,False,False,False,False,True,False,True]]], dtype = "bool")#candidate|7048|(13, 6, 13)|const|bool
bop_7049 = relay.multiply(call_7035.astype('uint64'), relay.reshape(const_7048.astype('uint64'), relay.shape_of(call_7035))) # shape=(13, 6, 13)
bop_7052 = relay.multiply(call_7036.astype('uint64'), relay.reshape(const_7048.astype('uint64'), relay.shape_of(call_7036))) # shape=(13, 6, 13)
uop_7057 = relay.asinh(bop_7049.astype('float32')) # shape=(13, 6, 13)
uop_7059 = relay.asinh(bop_7052.astype('float32')) # shape=(13, 6, 13)
func_774_call = mod.get_global_var('func_774')
func_778_call = mutated_mod.get_global_var('func_778')
var_7064 = relay.var("var_7064", dtype = "float32", shape = (15, 4))#candidate|7064|(15, 4)|var|float32
call_7063 = relay.TupleGetItem(func_774_call(relay.reshape(var_7064.astype('float32'), [3, 10, 2]), relay.reshape(var_7064.astype('float32'), [3, 10, 2]), relay.reshape(var_7064.astype('float32'), [3, 10, 2]), ), 2)
call_7065 = relay.TupleGetItem(func_778_call(relay.reshape(var_7064.astype('float32'), [3, 10, 2]), relay.reshape(var_7064.astype('float32'), [3, 10, 2]), relay.reshape(var_7064.astype('float32'), [3, 10, 2]), ), 2)
output = relay.Tuple([uop_7057,call_7063,var_7064,])
output2 = relay.Tuple([uop_7059,call_7065,var_7064,])
func_7067 = relay.Function([var_7064,], output)
mod['func_7067'] = func_7067
mod = relay.transform.InferType()(mod)
var_7068 = relay.var("var_7068", dtype = "float32", shape = (15, 4))#candidate|7068|(15, 4)|var|float32
output = func_7067(var_7068)
func_7069 = relay.Function([var_7068], output)
mutated_mod['func_7069'] = func_7069
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6130_call = mod.get_global_var('func_6130')
func_6132_call = mutated_mod.get_global_var('func_6132')
call_7154 = relay.TupleGetItem(func_6130_call(), 0)
call_7155 = relay.TupleGetItem(func_6132_call(), 0)
output = relay.Tuple([call_7154,])
output2 = relay.Tuple([call_7155,])
func_7169 = relay.Function([], output)
mod['func_7169'] = func_7169
mod = relay.transform.InferType()(mod)
output = func_7169()
func_7170 = relay.Function([], output)
mutated_mod['func_7170'] = func_7170
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7169_call = mod.get_global_var('func_7169')
func_7170_call = mutated_mod.get_global_var('func_7170')
call_7205 = relay.TupleGetItem(func_7169_call(), 0)
call_7206 = relay.TupleGetItem(func_7170_call(), 0)
output = relay.Tuple([call_7205,])
output2 = relay.Tuple([call_7206,])
func_7213 = relay.Function([], output)
mod['func_7213'] = func_7213
mod = relay.transform.InferType()(mod)
mutated_mod['func_7213'] = func_7213
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7213_call = mutated_mod.get_global_var('func_7213')
call_7214 = func_7213_call()
output = call_7214
func_7215 = relay.Function([], output)
mutated_mod['func_7215'] = func_7215
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7232 = relay.var("var_7232", dtype = "float64", shape = (12, 3, 3))#candidate|7232|(12, 3, 3)|var|float64
uop_7233 = relay.sqrt(var_7232.astype('float64')) # shape=(12, 3, 3)
bop_7235 = relay.add(uop_7233.astype('uint64'), relay.reshape(var_7232.astype('uint64'), relay.shape_of(uop_7233))) # shape=(12, 3, 3)
output = relay.Tuple([bop_7235,])
output2 = relay.Tuple([bop_7235,])
func_7264 = relay.Function([var_7232,], output)
mod['func_7264'] = func_7264
mod = relay.transform.InferType()(mod)
var_7265 = relay.var("var_7265", dtype = "float64", shape = (12, 3, 3))#candidate|7265|(12, 3, 3)|var|float64
output = func_7264(var_7265)
func_7266 = relay.Function([var_7265], output)
mutated_mod['func_7266'] = func_7266
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7169_call = mod.get_global_var('func_7169')
func_7170_call = mutated_mod.get_global_var('func_7170')
call_7320 = relay.TupleGetItem(func_7169_call(), 0)
call_7321 = relay.TupleGetItem(func_7170_call(), 0)
output = call_7320
output2 = call_7321
func_7339 = relay.Function([], output)
mod['func_7339'] = func_7339
mod = relay.transform.InferType()(mod)
output = func_7339()
func_7340 = relay.Function([], output)
mutated_mod['func_7340'] = func_7340
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4401_call = mod.get_global_var('func_4401')
func_4402_call = mutated_mod.get_global_var('func_4402')
call_7367 = relay.TupleGetItem(func_4401_call(), 1)
call_7368 = relay.TupleGetItem(func_4402_call(), 1)
output = call_7367
output2 = call_7368
func_7371 = relay.Function([], output)
mod['func_7371'] = func_7371
mod = relay.transform.InferType()(mod)
mutated_mod['func_7371'] = func_7371
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7371_call = mutated_mod.get_global_var('func_7371')
call_7372 = func_7371_call()
output = call_7372
func_7373 = relay.Function([], output)
mutated_mod['func_7373'] = func_7373
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4929_call = mod.get_global_var('func_4929')
func_4930_call = mutated_mod.get_global_var('func_4930')
call_7390 = func_4929_call()
call_7391 = func_4929_call()
func_5529_call = mod.get_global_var('func_5529')
func_5532_call = mutated_mod.get_global_var('func_5532')
var_7393 = relay.var("var_7393", dtype = "uint32", shape = ())#candidate|7393|()|var|uint32
const_7394 = relay.const([0.286192,0.502140,-9.405485,-4.337702,-1.773090,8.537807,-9.228109,9.516210,5.712314,8.202750,-1.377309,0.260418,9.870601,9.626871,-6.207679,6.913023,-8.138442,4.247093,5.451686,-8.771851,-3.157116,-6.042343,2.784180,-5.402085,-2.251639,5.289801,-5.618407,-1.609887,-9.351648,-3.779408,0.347902,-4.698384,-1.015620,-4.162969,-6.813134,6.536161,-2.296394,7.767545,0.109895,9.540650,7.833313,2.698937,5.898870,1.863222,6.948296,-0.003636,1.720593,7.334612,-1.648315,-6.312122,-1.668526,1.748654,2.068910,9.942530,-9.349920,-1.719524,4.528043,8.868182,6.602141,-2.331409,-0.746967,5.930119,5.553792,4.446938,5.181156,-0.595938,-6.452463,-5.151370,-1.837343,-0.780414,-0.029730,2.980916,-3.121890,-9.690104,3.797391,7.366463,7.616720,-3.680442,9.050590,-6.629413,5.844767,-3.102226,7.945990,6.665816,-9.651341,-5.889376,-7.345332,-2.113745,8.820644,-5.549966,0.702412,-1.968730,6.652094,-4.692278,2.459614,4.743910,9.435872,-8.904070,-8.923490,4.924892,7.229839,-7.815659,0.835831,6.844008], dtype = "float64")#candidate|7394|(104,)|const|float64
call_7392 = relay.TupleGetItem(func_5529_call(relay.reshape(var_7393.astype('uint32'), []), relay.reshape(const_7394.astype('float64'), [104,]), ), 5)
call_7395 = relay.TupleGetItem(func_5532_call(relay.reshape(var_7393.astype('uint32'), []), relay.reshape(const_7394.astype('float64'), [104,]), ), 5)
output = relay.Tuple([call_7390,call_7392,var_7393,const_7394,])
output2 = relay.Tuple([call_7391,call_7395,var_7393,const_7394,])
func_7398 = relay.Function([var_7393,], output)
mod['func_7398'] = func_7398
mod = relay.transform.InferType()(mod)
var_7399 = relay.var("var_7399", dtype = "uint32", shape = ())#candidate|7399|()|var|uint32
output = func_7398(var_7399)
func_7400 = relay.Function([var_7399], output)
mutated_mod['func_7400'] = func_7400
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4553_call = mod.get_global_var('func_4553')
func_4555_call = mutated_mod.get_global_var('func_4555')
call_7428 = relay.TupleGetItem(func_4553_call(), 0)
call_7429 = relay.TupleGetItem(func_4555_call(), 0)
func_4352_call = mod.get_global_var('func_4352')
func_4355_call = mutated_mod.get_global_var('func_4355')
var_7440 = relay.var("var_7440", dtype = "float32", shape = (40,))#candidate|7440|(40,)|var|float32
call_7439 = relay.TupleGetItem(func_4352_call(relay.reshape(var_7440.astype('float32'), [5, 8, 1])), 1)
call_7441 = relay.TupleGetItem(func_4355_call(relay.reshape(var_7440.astype('float32'), [5, 8, 1])), 1)
func_3653_call = mod.get_global_var('func_3653')
func_3657_call = mutated_mod.get_global_var('func_3657')
var_7448 = relay.var("var_7448", dtype = "float32", shape = (364,))#candidate|7448|(364,)|var|float32
var_7449 = relay.var("var_7449", dtype = "float32", shape = (180,))#candidate|7449|(180,)|var|float32
call_7447 = relay.TupleGetItem(func_3653_call(relay.reshape(var_7448.astype('float32'), [14, 2, 13]), relay.reshape(var_7449.astype('float32'), [180,]), ), 5)
call_7450 = relay.TupleGetItem(func_3657_call(relay.reshape(var_7448.astype('float32'), [14, 2, 13]), relay.reshape(var_7449.astype('float32'), [180,]), ), 5)
uop_7458 = relay.tan(call_7428.astype('float32')) # shape=(7, 8, 6)
uop_7460 = relay.tan(call_7429.astype('float32')) # shape=(7, 8, 6)
output = relay.Tuple([call_7439,var_7440,call_7447,var_7448,var_7449,uop_7458,])
output2 = relay.Tuple([call_7441,var_7440,call_7450,var_7448,var_7449,uop_7460,])
func_7466 = relay.Function([var_7440,var_7448,var_7449,], output)
mod['func_7466'] = func_7466
mod = relay.transform.InferType()(mod)
mutated_mod['func_7466'] = func_7466
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7466_call = mutated_mod.get_global_var('func_7466')
var_7468 = relay.var("var_7468", dtype = "float32", shape = (40,))#candidate|7468|(40,)|var|float32
var_7469 = relay.var("var_7469", dtype = "float32", shape = (364,))#candidate|7469|(364,)|var|float32
var_7470 = relay.var("var_7470", dtype = "float32", shape = (180,))#candidate|7470|(180,)|var|float32
call_7467 = func_7466_call(var_7468,var_7469,var_7470,)
output = call_7467
func_7471 = relay.Function([var_7468,var_7469,var_7470,], output)
mutated_mod['func_7471'] = func_7471
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7519 = relay.var("var_7519", dtype = "float64", shape = (11, 12, 3))#candidate|7519|(11, 12, 3)|var|float64
var_7520 = relay.var("var_7520", dtype = "float64", shape = (11, 12, 3))#candidate|7520|(11, 12, 3)|var|float64
bop_7521 = relay.divide(var_7519.astype('float64'), relay.reshape(var_7520.astype('float64'), relay.shape_of(var_7519))) # shape=(11, 12, 3)
uop_7538 = relay.log2(var_7519.astype('float64')) # shape=(11, 12, 3)
output = relay.Tuple([bop_7521,uop_7538,])
output2 = relay.Tuple([bop_7521,uop_7538,])
F = relay.Function([var_7519,var_7520,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_7519,var_7520,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
