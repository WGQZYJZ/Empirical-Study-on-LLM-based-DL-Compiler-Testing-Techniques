==========mod==========
#[version = "0.0.5"]
def @func_4732() -> (Tensor[(16, 10, 5), float32],) {
  %0 = @func_4234() /* ty=Tensor[(16, 10, 5), float32] */;
  (%0,)
}

def @func_3335() -> (Tensor[(16, 10, 5), float32],) {
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(16, 10, 5), float32] */, dtype="float32") /* ty=Tensor[(16, 10, 5), float32] */;
  %2 = acos(%1) /* ty=Tensor[(16, 10, 5), float32] */;
  (%2,)
}

def @func_4123() -> Tensor[(16, 10, 5), float64] {
  %3 = @func_3747() /* ty=(Tensor[(16, 10, 5), float64],) */;
  %3.0
}

def @func_2485(%var_2462: int64, %var_2463: Tensor[(8, 13, 16), int64]) -> (Tensor[(8, 13, 16), int64], Tensor[(462), float32], Tensor[(16, 15, 9), uint32]) {
  %4 = cast(%var_2462, dtype="int64") /* ty=int64 */;
  %5 = cast(%var_2463, dtype="int64") /* ty=Tensor[(8, 13, 16), int64] */;
  %6 = cast(meta[relay.Constant][1] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
  %7 = reshape(%6, newshape=[3, 11, 14]) /* ty=Tensor[(3, 11, 14), float32] */;
  %8 = @func_179(%7) /* ty=(Tensor[(16, 15, 9), float64], Tensor[(20, 108), float64], Tensor[(3, 11, 14), float32]) */;
  %9 = %8.0;
  %10 = cast(%9, dtype="uint32") /* ty=Tensor[(16, 15, 9), uint32] */;
  %11 = cast(%var_2462, dtype="uint32") /* ty=uint32 */;
  %12 = bitwise_or(%4, %5) /* ty=Tensor[(8, 13, 16), int64] */;
  %13 = right_shift(%10, %11) /* ty=Tensor[(16, 15, 9), uint32] */;
  (%12, meta[relay.Constant][1] /* ty=Tensor[(462), float32] */, %13)
}

def @func_3906() -> Tensor[(16, 10, 5), float32] {
  %14 = @func_3335() /* ty=(Tensor[(16, 10, 5), float32],) */;
  %14.0
}

def @func_3319(%var_3295: bool, %var_3296: Tensor[(1, 5, 9), bool]) -> (Tensor[(1, 5, 9), float32],) {
  %15 = cast(%var_3295, dtype="bool") /* ty=bool */;
  %16 = cast(%var_3296, dtype="bool") /* ty=Tensor[(1, 5, 9), bool] */;
  %17 = logical_and(%15, %16) /* ty=Tensor[(1, 5, 9), bool] */;
  %18 = cast(%17, dtype="float32") /* ty=Tensor[(1, 5, 9), float32] */;
  %19 = exp(%18) /* ty=Tensor[(1, 5, 9), float32] */;
  (%19,)
}

def @func_4052(%var_3977: Tensor[(6, 13, 7), int32], %var_3978: Tensor[(6, 13, 7), int32], %var_3989: Tensor[(6, 13, 7), int32], %var_4003: Tensor[(1, 648), float64], %var_4004: Tensor[(462), float32], %var_4026: Tensor[(462), float32], %var_4031: Tensor[(550), float64], %var_4032: int64) -> (Tensor[(6, 13, 7), int32], Tensor[(6, 13, 7), int8], Tensor[(1, 648), float64], Tensor[(54), float64], Tensor[(462), bool], Tensor[(150), int32], Tensor[(550), float64], int64, Tensor[(16, 10, 5), float64], Tensor[(20, 108), float64]) {
  %20 = cast(%var_3978, dtype="int32") /* ty=Tensor[(6, 13, 7), int32] */;
  %21 = shape_of(%var_3977, dtype="int32") /* ty=Tensor[(3), int32] */;
  %22 = cast(%var_3977, dtype="int32") /* ty=Tensor[(6, 13, 7), int32] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %24 = cast(%var_3989, dtype="int8") /* ty=Tensor[(6, 13, 7), int8] */;
  %25 = shape_of(%var_3978, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%var_3978, dtype="int8") /* ty=Tensor[(6, 13, 7), int8] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %28 = cast(meta[relay.Constant][2] /* ty=Tensor[(54), uint16] */, dtype="uint16") /* ty=Tensor[(54), uint16] */;
  %29 = cast(%var_4003, dtype="float64") /* ty=Tensor[(1, 648), float64] */;
  %30 = cast(%var_4004, dtype="float32") /* ty=Tensor[(462), float32] */;
  %31 = reshape(%28, newshape=[54]) /* ty=Tensor[(54), uint16] */;
  %32 = reshape(%29, newshape=[648]) /* ty=Tensor[(648), float64] */;
  %33 = reshape(%30, newshape=[462]) /* ty=Tensor[(462), float32] */;
  %34 = @func_3438(%31, %32, %33) /* ty=(Tensor[(54), uint16], Tensor[(54), uint16], Tensor[(462), float32], Tensor[(16, 10, 5), uint8], Tensor[(3, 3, 6), uint16], Tensor[(240, 648), float64], Tensor[(2, 11, 6), float64], Tensor[(22), float64], Tensor[(132), float64], Tensor[(132), float64]) */;
  %35 = %34.1;
  %36 = cast(meta[relay.Constant][2] /* ty=Tensor[(54), uint16] */, dtype="float64") /* ty=Tensor[(54), float64] */;
  %37 = shape_of(%35, dtype="int32") /* ty=Tensor[(1), int32] */;
  %38 = cast(%35, dtype="float64") /* ty=Tensor[(54), float64] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?), float64] */;
  %40 = cast(%var_4026, dtype="bool") /* ty=Tensor[(462), bool] */;
  %41 = shape_of(%var_4004, dtype="int32") /* ty=Tensor[(1), int32] */;
  %42 = cast(%var_4004, dtype="bool") /* ty=Tensor[(462), bool] */;
  %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?), bool] */;
  %44 = cast(%var_4031, dtype="float64") /* ty=Tensor[(550), float64] */;
  %45 = cast(%var_4032, dtype="int64") /* ty=int64 */;
  %46 = cast(%var_4031, dtype="float32") /* ty=Tensor[(550), float32] */;
  %47 = reshape(%44, newshape=[5, 11, 10]) /* ty=Tensor[(5, 11, 10), float64] */;
  %48 = reshape(%45, newshape=[]) /* ty=int64 */;
  %49 = reshape(%46, newshape=[5, 11, 10]) /* ty=Tensor[(5, 11, 10), float32] */;
  %50 = @func_3547(%47, %48, %49) /* ty=(Tensor[(54), uint16], int64, Tensor[(150), int32], Tensor[(22), float64], Tensor[(5, 11, 10), float64]) */;
  %51 = @func_3747() /* ty=(Tensor[(16, 10, 5), float64],) */;
  %52 = logical_or(%42, %43) /* ty=Tensor[(462), bool] */;
  %53 = cast(%52, dtype="float32") /* ty=Tensor[(462), float32] */;
  %54 = reshape(%53, newshape=[3, 11, 14]) /* ty=Tensor[(3, 11, 14), float32] */;
  %55 = @func_179(%54) /* ty=(Tensor[(16, 15, 9), float64], Tensor[(20, 108), float64], Tensor[(3, 11, 14), float32]) */;
  %56 = bitwise_or(%22, %23) /* ty=Tensor[(6, 13, 7), int32] */;
  %57 = right_shift(%26, %27) /* ty=Tensor[(6, 13, 7), int8] */;
  %58 = mod(%38, %39) /* ty=Tensor[(54), float64] */;
  %59 = %50.2;
  %60 = %51.0;
  %61 = %55.1;
  (%56, %57, %var_4003, %58, %52, %59, %var_4031, %var_4032, %60, %61)
}

def @func_3688(%var_3684: int64) -> (Tensor[(16, 10, 5), float64], Tensor[(150), int32], Tensor[(550), float64], int64) {
  %62 = @func_3507() /* ty=(Tensor[(16, 10, 5), float64],) */;
  %63 = cast(meta[relay.Constant][3] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
  %64 = cast(%var_3684, dtype="int64") /* ty=int64 */;
  %65 = cast(meta[relay.Constant][3] /* ty=Tensor[(550), float64] */, dtype="float32") /* ty=Tensor[(550), float32] */;
  %66 = reshape(%63, newshape=[5, 11, 10]) /* ty=Tensor[(5, 11, 10), float64] */;
  %67 = reshape(%64, newshape=[]) /* ty=int64 */;
  %68 = reshape(%65, newshape=[5, 11, 10]) /* ty=Tensor[(5, 11, 10), float32] */;
  %69 = @func_3547(%66, %67, %68) /* ty=(Tensor[(54), uint16], int64, Tensor[(150), int32], Tensor[(22), float64], Tensor[(5, 11, 10), float64]) */;
  %70 = %62.0;
  %71 = %69.2;
  (%70, %71, meta[relay.Constant][3] /* ty=Tensor[(550), float64] */, %var_3684)
}

def @func_4376() -> (Tensor[(16, 10, 5), float32], Tensor[(6, 10, 4), bool], Tensor[(24, 10), int32], Tensor[(5, 5, 6), float64], int32, Tensor[(150), int32], Tensor[(54), uint16]) {
  %72 = cast(meta[relay.Constant][4] /* ty=Tensor[(24, 10), int32] */, dtype="int32") /* ty=Tensor[(24, 10), int32] */;
  %73 = reshape(%72, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), int32] */;
  %74 = cast(5 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %75 = cast(meta[relay.Constant][5] /* ty=Tensor[(150), int32] */, dtype="int32") /* ty=Tensor[(150), int32] */;
  %76 = cast(meta[relay.Constant][6] /* ty=Tensor[(54), uint16] */, dtype="uint16") /* ty=Tensor[(54), uint16] */;
  %77 = reshape(%74, newshape=[]) /* ty=int32 */;
  %78 = reshape(%75, newshape=[5, 5, 6]) /* ty=Tensor[(5, 5, 6), int32] */;
  %79 = reshape(%76, newshape=[54]) /* ty=Tensor[(54), uint16] */;
  %80 = @func_2059(%77, %78, %79) /* ty=(Tensor[(3, 3, 6), uint16], Tensor[(54), uint16], Tensor[(5, 5, 6), float64], Tensor[(3, 3, 6), uint16]) */;
  %81 = @func_4234() /* ty=Tensor[(16, 10, 5), float32] */;
  %82 = @func_1257(%73) /* ty=Tensor[(6, 10, 4), bool] */;
  %83 = %80.2;
  (%81, %82, meta[relay.Constant][4] /* ty=Tensor[(24, 10), int32] */, %83, 5 /* ty=int32 */, meta[relay.Constant][5] /* ty=Tensor[(150), int32] */, meta[relay.Constant][6] /* ty=Tensor[(54), uint16] */)
}

def @func_4911(%var_4855: Tensor[(14, 12, 5), float32]) -> (Tensor[(14, 12, 5), float32], Tensor[(16, 10, 5), float32], Tensor[(14, 12, 1), float32], Tensor[(16, 10, 5), float32]) {
  %84 = cast(meta[relay.Constant][7] /* ty=Tensor[(14, 12, 1), float32] */, dtype="float32") /* ty=Tensor[(14, 12, 1), float32] */;
  %85 = cast(%var_4855, dtype="float32") /* ty=Tensor[(14, 12, 5), float32] */;
  %86 = cast(meta[relay.Constant][7] /* ty=Tensor[(14, 12, 1), float32] */, dtype="float32") /* ty=Tensor[(14, 12, 1), float32] */;
  %87 = @func_4732() /* ty=(Tensor[(16, 10, 5), float32],) */;
  %88 = power(%84, %85) /* ty=Tensor[(14, 12, 5), float32] */;
  %89 = @func_3773() /* ty=Tensor[(16, 10, 5), float32] */;
  %90 = atan(%86) /* ty=Tensor[(14, 12, 1), float32] */;
  %91 = %87.0;
  (%88, %89, %90, %91)
}

def @func_4540(%var_4534: Tensor[(1664), int64]) -> (Tensor[(16, 10, 5), float32], Tensor[(8, 13, 16), int64], int64, Tensor[(1664), int64]) {
  %92 = cast(-10 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %93 = cast(%var_4534, dtype="int64") /* ty=Tensor[(1664), int64] */;
  %94 = reshape(%92, newshape=[]) /* ty=int64 */;
  %95 = reshape(%93, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), int64] */;
  %96 = @func_2485(%94, %95) /* ty=(Tensor[(8, 13, 16), int64], Tensor[(462), float32], Tensor[(16, 15, 9), uint32]) */;
  %97 = @func_4416() /* ty=Tensor[(16, 10, 5), float32] */;
  %98 = %96.0;
  (%97, %98, -10 /* ty=int64 */, %var_4534)
}

def @func_5441(%var_5414: Tensor[(7, 12, 10), float64], %var_5436: Tensor[(462), float32]) -> (Tensor[(7, 12, 10), float64], Tensor[(7, 12, 10), float64], Tensor[(1350), int64], Tensor[(1350, 1), int64], Tensor[(462), float32]) {
  %99 = cast(%var_5414, dtype="float64") /* ty=Tensor[(7, 12, 10), float64] */;
  %100 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(7, 12, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %101 = cast(meta[relay.Constant][8] /* ty=Tensor[(7, 12, 10), float64] */, dtype="float64") /* ty=Tensor[(7, 12, 10), float64] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %103 = cast(meta[relay.Constant][8] /* ty=Tensor[(7, 12, 10), float64] */, dtype="float64") /* ty=Tensor[(7, 12, 10), float64] */;
  %104 = sqrt(%103) /* ty=Tensor[(7, 12, 10), float64] */;
  %105 = cast(%104, dtype="float64") /* ty=Tensor[(7, 12, 10), float64] */;
  %106 = cast(meta[relay.Constant][9] /* ty=Tensor[(1350, 1), int64] */, dtype="int64") /* ty=Tensor[(1350, 1), int64] */;
  %107 = cast(%var_5436, dtype="float32") /* ty=Tensor[(462), float32] */;
  %108 = reshape(%106, newshape=[1350]) /* ty=Tensor[(1350), int64] */;
  %109 = reshape(%107, newshape=[1, 462]) /* ty=Tensor[(1, 462), float32] */;
  %110 = @func_5004(%108, %109) /* ty=(Tensor[(16, 10, 5), float32], Tensor[(20, 108), float64], Tensor[(45, 2), int64], Tensor[(1350), int64], Tensor[(1, 462), float32], Tensor[(120), float64], Tensor[(17280), float64]) */;
  %111 = floor_divide(%101, %102) /* ty=Tensor[(7, 12, 10), float64] */;
  %112 = cosh(%105) /* ty=Tensor[(7, 12, 10), float64] */;
  %113 = %110.3;
  (%111, %112, %113, meta[relay.Constant][9] /* ty=Tensor[(1350, 1), int64] */, %var_5436)
}

def @func_2845(%var_2799: Tensor[(5, 15, 9), uint32], %var_2835: Tensor[(5, 15, 9), uint32]) -> (Tensor[(5, 15, 9), uint32], Tensor[(5, 15, 9), int64], Tensor[(16, 15, 9), float64], Tensor[(2160), float64]) {
  %114 = cast(%var_2799, dtype="uint32") /* ty=Tensor[(5, 15, 9), uint32] */;
  %115 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(5, 15, 9), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %116 = cast(meta[relay.Constant][10] /* ty=Tensor[(5, 15, 9), uint32] */, dtype="uint32") /* ty=Tensor[(5, 15, 9), uint32] */;
  %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %118 = cast(%var_2835, dtype="int64") /* ty=Tensor[(5, 15, 9), int64] */;
  %119 = shape_of(%var_2799, dtype="int32") /* ty=Tensor[(3), int32] */;
  %120 = cast(%var_2799, dtype="int64") /* ty=Tensor[(5, 15, 9), int64] */;
  %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %122 = cast(meta[relay.Constant][11] /* ty=Tensor[(2160), float64] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %123 = cast(meta[relay.Constant][11] /* ty=Tensor[(2160), float64] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %124 = reshape(%122, newshape=[16, 15, 9]) /* ty=Tensor[(16, 15, 9), float64] */;
  %125 = reshape(%123, newshape=[16, 15, 9]) /* ty=Tensor[(16, 15, 9), float64] */;
  %126 = @func_32(%124, %125) /* ty=(Tensor[(16, 15, 9), float64],) */;
  %127 = multiply(%116, %117) /* ty=Tensor[(5, 15, 9), uint32] */;
  %128 = right_shift(%120, %121) /* ty=Tensor[(5, 15, 9), int64] */;
  %129 = %126.0;
  (%127, %128, %129, meta[relay.Constant][11] /* ty=Tensor[(2160), float64] */)
}

def @func_5326() -> Tensor[(16, 10, 5), float64] {
  %130 = @func_3747() /* ty=(Tensor[(16, 10, 5), float64],) */;
  %130.0
}

def @func_3438(%var_3383: Tensor[(54), uint16], %var_3384: Tensor[(648), float64], %var_3386: Tensor[(462), float32]) -> (Tensor[(54), uint16], Tensor[(54), uint16], Tensor[(462), float32], Tensor[(16, 10, 5), uint8], Tensor[(3, 3, 6), uint16], Tensor[(240, 648), float64], Tensor[(2, 11, 6), float64], Tensor[(22), float64], Tensor[(132), float64], Tensor[(132), float64]) {
  %131 = cast(%var_3383, dtype="uint16") /* ty=Tensor[(54), uint16] */;
  %132 = cast(%var_3384, dtype="float64") /* ty=Tensor[(648), float64] */;
  %133 = cast(meta[relay.Constant][12] /* ty=Tensor[(240, 1), int32] */, dtype="int32") /* ty=Tensor[(240, 1), int32] */;
  %134 = cast(%var_3386, dtype="float32") /* ty=Tensor[(462), float32] */;
  %135 = reshape(%131, newshape=[54]) /* ty=Tensor[(54), uint16] */;
  %136 = reshape(%132, newshape=[9, 6, 12]) /* ty=Tensor[(9, 6, 12), float64] */;
  %137 = reshape(%133, newshape=[240]) /* ty=Tensor[(240), int32] */;
  %138 = reshape(%134, newshape=[462]) /* ty=Tensor[(462), float32] */;
  %139 = @func_2984(%135, %136, %137, %138) /* ty=(Tensor[(9, 6, 12), bool], Tensor[(3, 3, 6), uint16], Tensor[(54), uint16], Tensor[(9, 6, 12), bool], Tensor[(9, 6, 12), float64], Tensor[(6, 10, 4), bool], Tensor[(240), int32], Tensor[(20, 108), float64], Tensor[(462), float32], Tensor[(6, 10, 4), bool]) */;
  %140 = @func_3335() /* ty=(Tensor[(16, 10, 5), float32],) */;
  %141 = %140.0;
  %142 = cast(meta[relay.Constant][13] /* ty=Tensor[(16, 10, 5), float32] */, dtype="float32") /* ty=Tensor[(16, 10, 5), float32] */;
  %143 = shape_of(%141, dtype="int32") /* ty=Tensor[(3), int32] */;
  %144 = cast(%141, dtype="float32") /* ty=Tensor[(16, 10, 5), float32] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %146 = divide(%144, %145) /* ty=Tensor[(16, 10, 5), float32] */;
  %147 = cast(%141, dtype="uint8") /* ty=Tensor[(16, 10, 5), uint8] */;
  %148 = shape_of(%146, dtype="int32") /* ty=Tensor[(3), int32] */;
  %149 = cast(%146, dtype="uint8") /* ty=Tensor[(16, 10, 5), uint8] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %151 = add(%149, %150) /* ty=Tensor[(16, 10, 5), uint8] */;
  %152 = cast(meta[relay.Constant][13] /* ty=Tensor[(16, 10, 5), float32] */, dtype="uint8") /* ty=Tensor[(16, 10, 5), uint8] */;
  %153 = shape_of(%151, dtype="int32") /* ty=Tensor[(3), int32] */;
  %154 = cast(%151, dtype="uint8") /* ty=Tensor[(16, 10, 5), uint8] */;
  %155 = dyn.reshape(%152, %153, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %156 = %139.2;
  %157 = cast(%156, dtype="uint16") /* ty=Tensor[(54), uint16] */;
  %158 = cast(%156, dtype="uint16") /* ty=Tensor[(54), uint16] */;
  %159 = reshape(%157, newshape=[3, 3, 6]) /* ty=Tensor[(3, 3, 6), uint16] */;
  %160 = reshape(%158, newshape=[3, 3, 6]) /* ty=Tensor[(3, 3, 6), uint16] */;
  %161 = cast(%var_3384, dtype="uint8") /* ty=Tensor[(648), uint8] */;
  %162 = cast(meta[relay.Constant][12] /* ty=Tensor[(240, 1), int32] */, dtype="uint8") /* ty=Tensor[(240, 1), uint8] */;
  %163 = logical_xor(%161, %162) /* ty=Tensor[(240, 648), uint8] */;
  %164 = cast(%163, dtype="float32") /* ty=Tensor[(240, 648), float32] */;
  %165 = acos(%164) /* ty=Tensor[(240, 648), float32] */;
  %166 = cast(meta[relay.Constant][14] /* ty=Tensor[(240, 648), float32] */, dtype="float64") /* ty=Tensor[(240, 648), float64] */;
  %167 = shape_of(%165, dtype="int32") /* ty=Tensor[(2), int32] */;
  %168 = cast(%165, dtype="float64") /* ty=Tensor[(240, 648), float64] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %170 = cast(meta[relay.Constant][15] /* ty=Tensor[(22), float64] */, dtype="float64") /* ty=Tensor[(22), float64] */;
  %171 = cast(meta[relay.Constant][16] /* ty=Tensor[(132), float64] */, dtype="float64") /* ty=Tensor[(132), float64] */;
  %172 = reshape(%170, newshape=[2, 11, 1]) /* ty=Tensor[(2, 11, 1), float64] */;
  %173 = reshape(%171, newshape=[2, 11, 6]) /* ty=Tensor[(2, 11, 6), float64] */;
  %174 = @func_2157(%172, %173) /* ty=(Tensor[(2, 11, 6), float64],) */;
  %175 = cast(meta[relay.Constant][15] /* ty=Tensor[(22), float64] */, dtype="float64") /* ty=Tensor[(22), float64] */;
  %176 = reshape(%175, newshape=[22]) /* ty=Tensor[(22), float64] */;
  %177 = @func_2255(%176) /* ty=(Tensor[(?, 12, 6), bool], Tensor[(2, 11, 6), float64], Tensor[(22), float64], Tensor[(132), float64], Tensor[(?, 12, 6), float32]) */;
  %178 = multiply(%154, %155) /* ty=Tensor[(16, 10, 5), uint8] */;
  %179 = @func_1879(%159, %160) /* ty=Tensor[(3, 3, 6), uint16] */;
  %180 = floor_mod(%168, %169) /* ty=Tensor[(240, 648), float64] */;
  %181 = %174.0;
  %182 = %177.3;
  (%156, %var_3383, %var_3386, %178, %179, %180, %181, meta[relay.Constant][15] /* ty=Tensor[(22), float64] */, meta[relay.Constant][16] /* ty=Tensor[(132), float64] */, %182)
}

def @func_4604() -> (Tensor[(5, 5, 6), float64],) {
  %183 = @func_4376() /* ty=(Tensor[(16, 10, 5), float32], Tensor[(6, 10, 4), bool], Tensor[(24, 10), int32], Tensor[(5, 5, 6), float64], int32, Tensor[(150), int32], Tensor[(54), uint16]) */;
  %184 = %183.3;
  (%184,)
}

def @func_5503() -> Tensor[(16, 10, 5), float32] {
  %185 = @func_4732() /* ty=(Tensor[(16, 10, 5), float32],) */;
  %185.0
}

def @func_1257(%var_1247: Tensor[(6, 10, 4), int32]) -> Tensor[(6, 10, 4), bool] {
  %186 = cast(%var_1247, dtype="bool") /* ty=Tensor[(6, 10, 4), bool] */;
  %187 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(6, 10, 4), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %188 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 10, 4), int32] */, dtype="bool") /* ty=Tensor[(6, 10, 4), bool] */;
  %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%188, %189) /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_3773() -> Tensor[(16, 10, 5), float32] {
  %190 = @func_3335() /* ty=(Tensor[(16, 10, 5), float32],) */;
  %190.0
}

def @func_5592(%var_5578: Tensor[(90), int64], %var_5581: Tensor[(120), float64], %var_5582: Tensor[(17280), float64]) -> (Tensor[(16, 10, 5), float64], Tensor[(462), float32], Tensor[(90), int64], Tensor[(675, 2), int64], Tensor[(7, 66), float32], Tensor[(120), float64], Tensor[(17280), float64]) {
  %191 = cast(%var_5578, dtype="int64") /* ty=Tensor[(90), int64] */;
  %192 = cast(meta[relay.Constant][18] /* ty=Tensor[(675, 2), int64] */, dtype="int64") /* ty=Tensor[(675, 2), int64] */;
  %193 = cast(meta[relay.Constant][19] /* ty=Tensor[(7, 66), float32] */, dtype="float32") /* ty=Tensor[(7, 66), float32] */;
  %194 = cast(%var_5581, dtype="float64") /* ty=Tensor[(120), float64] */;
  %195 = cast(%var_5582, dtype="float64") /* ty=Tensor[(17280), float64] */;
  %196 = reshape(%191, newshape=[9, 10, 1]) /* ty=Tensor[(9, 10, 1), int64] */;
  %197 = reshape(%192, newshape=[9, 10, 15]) /* ty=Tensor[(9, 10, 15), int64] */;
  %198 = reshape(%193, newshape=[462]) /* ty=Tensor[(462), float32] */;
  %199 = reshape(%194, newshape=[120]) /* ty=Tensor[(120), float64] */;
  %200 = reshape(%195, newshape=[8, 2160]) /* ty=Tensor[(8, 2160), float64] */;
  %201 = @func_957(%196, %197, %198, %199, %200) /* ty=(Tensor[(9, 10, 15), int64], Tensor[(20, 108), float64], Tensor[(462), float32], Tensor[(120), float64], Tensor[(8, 2160), bool]) */;
  %202 = @func_4336() /* ty=Tensor[(16, 10, 5), float64] */;
  %203 = %201.2;
  (%202, %203, %var_5578, meta[relay.Constant][18] /* ty=Tensor[(675, 2), int64] */, meta[relay.Constant][19] /* ty=Tensor[(7, 66), float32] */, %var_5581, %var_5582)
}

def @func_4768() -> Tensor[(16, 10, 5), float32] {
  @func_3773() /* ty=Tensor[(16, 10, 5), float32] */
}

def @func_4272(%var_4257: Tensor[(150), int32]) -> (Tensor[(16, 10, 5), float64], Tensor[(16, 10, 5), float32], Tensor[(150), int32]) {
  %204 = @func_3507() /* ty=(Tensor[(16, 10, 5), float64],) */;
  %205 = %204.0;
  %206 = cast(%205, dtype="float64") /* ty=Tensor[(16, 10, 5), float64] */;
  %207 = cast(%var_4257, dtype="int32") /* ty=Tensor[(150), int32] */;
  %208 = reshape(%206, newshape=[16, 10, 5]) /* ty=Tensor[(16, 10, 5), float64] */;
  %209 = reshape(%207, newshape=[150]) /* ty=Tensor[(150), int32] */;
  %210 = @func_3897(%208, %209) /* ty=(Tensor[(16, 10, 5), uint16], Tensor[(16, 10, 5), uint32], Tensor[(3, 3, 6), uint16], int32, Tensor[(150), int32], Tensor[(54), uint16], Tensor[(550), uint32], Tensor[(6, 10, 4), bool], Tensor[(240), int32], Tensor[(16, 10, 5), bool], Tensor[(16, 10, 5), float32]) */;
  %211 = %210.10;
  (%205, %211, %var_4257)
}

def @func_5004(%var_4977: Tensor[(1350), int64], %var_4978: Tensor[(1, 462), float32]) -> (Tensor[(16, 10, 5), float32], Tensor[(20, 108), float64], Tensor[(45, 2), int64], Tensor[(1350), int64], Tensor[(1, 462), float32], Tensor[(120), float64], Tensor[(17280), float64]) {
  %212 = @func_3335() /* ty=(Tensor[(16, 10, 5), float32],) */;
  %213 = cast(meta[relay.Constant][20] /* ty=Tensor[(45, 2), int64] */, dtype="int64") /* ty=Tensor[(45, 2), int64] */;
  %214 = cast(%var_4977, dtype="int64") /* ty=Tensor[(1350), int64] */;
  %215 = cast(%var_4978, dtype="float32") /* ty=Tensor[(1, 462), float32] */;
  %216 = cast(meta[relay.Constant][21] /* ty=Tensor[(120), float64] */, dtype="float64") /* ty=Tensor[(120), float64] */;
  %217 = cast(meta[relay.Constant][22] /* ty=Tensor[(17280), float64] */, dtype="float64") /* ty=Tensor[(17280), float64] */;
  %218 = reshape(%213, newshape=[9, 10, 1]) /* ty=Tensor[(9, 10, 1), int64] */;
  %219 = reshape(%214, newshape=[9, 10, 15]) /* ty=Tensor[(9, 10, 15), int64] */;
  %220 = reshape(%215, newshape=[462]) /* ty=Tensor[(462), float32] */;
  %221 = reshape(%216, newshape=[120]) /* ty=Tensor[(120), float64] */;
  %222 = reshape(%217, newshape=[8, 2160]) /* ty=Tensor[(8, 2160), float64] */;
  %223 = @func_957(%218, %219, %220, %221, %222) /* ty=(Tensor[(9, 10, 15), int64], Tensor[(20, 108), float64], Tensor[(462), float32], Tensor[(120), float64], Tensor[(8, 2160), bool]) */;
  %224 = %212.0;
  %225 = %223.1;
  (%224, %225, meta[relay.Constant][20] /* ty=Tensor[(45, 2), int64] */, %var_4977, %var_4978, meta[relay.Constant][21] /* ty=Tensor[(120), float64] */, meta[relay.Constant][22] /* ty=Tensor[(17280), float64] */)
}

def @func_5560(%var_5524: Tensor[(25, 6), int32], %var_5543: Tensor[(120), float64]) -> (Tensor[(16, 10, 5), float64], int64, Tensor[(22), float64], Tensor[(15, 15, 2), int64], Tensor[(16, 15, 9), float64], Tensor[(120), float64], Tensor[(16, 10, 5), float64], Tensor[(25, 6), float32], Tensor[(8, 13, 16), int64], Tensor[(1664), int64]) {
  %226 = cast(10 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %227 = cast(%var_5524, dtype="int32") /* ty=Tensor[(25, 6), int32] */;
  %228 = cast(meta[relay.Constant][23] /* ty=Tensor[(22), float64] */, dtype="float64") /* ty=Tensor[(22), float64] */;
  %229 = reshape(%226, newshape=[]) /* ty=int64 */;
  %230 = reshape(%227, newshape=[75, 2]) /* ty=Tensor[(75, 2), int32] */;
  %231 = reshape(%228, newshape=[22]) /* ty=Tensor[(22), float64] */;
  %232 = @func_2596(%229, %230, %231) /* ty=(Tensor[(15, 15, 2), int64], Tensor[(5, 5, 6), float64], Tensor[(75, 2), int32], Tensor[(54), uint16], Tensor[(2, 11, 6), float64], Tensor[(22), float64]) */;
  %233 = %232.0;
  %234 = cast(%233, dtype="float64") /* ty=Tensor[(15, 15, 2), float64] */;
  %235 = tan(%234) /* ty=Tensor[(15, 15, 2), float64] */;
  %236 = cast(%233, dtype="int64") /* ty=Tensor[(15, 15, 2), int64] */;
  %237 = shape_of(%235, dtype="int32") /* ty=Tensor[(3), int32] */;
  %238 = cast(%235, dtype="int64") /* ty=Tensor[(15, 15, 2), int64] */;
  %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %240 = cast(%var_5543, dtype="float64") /* ty=Tensor[(120), float64] */;
  %241 = reshape(%240, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), float64] */;
  %242 = @func_750(%241) /* ty=(Tensor[(5, 4, 6), float32], Tensor[(16, 15, 9), float64], Tensor[(1, 2160), float64]) */;
  %243 = cast(%var_5524, dtype="float32") /* ty=Tensor[(25, 6), float32] */;
  %244 = acosh(%243) /* ty=Tensor[(25, 6), float32] */;
  %245 = cast(%244, dtype="int32") /* ty=Tensor[(25, 6), int32] */;
  %246 = reshape(%245, newshape=[150]) /* ty=Tensor[(150), int32] */;
  %247 = @func_4272(%246) /* ty=(Tensor[(16, 10, 5), float64], Tensor[(16, 10, 5), float32], Tensor[(150), int32]) */;
  %248 = cast(%244, dtype="float32") /* ty=Tensor[(25, 6), float32] */;
  %249 = cast(10 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %250 = cast(meta[relay.Constant][24] /* ty=Tensor[(1664), int64] */, dtype="int64") /* ty=Tensor[(1664), int64] */;
  %251 = reshape(%249, newshape=[]) /* ty=int64 */;
  %252 = reshape(%250, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), int64] */;
  %253 = @func_2485(%251, %252) /* ty=(Tensor[(8, 13, 16), int64], Tensor[(462), float32], Tensor[(16, 15, 9), uint32]) */;
  %254 = @func_5326() /* ty=Tensor[(16, 10, 5), float64] */;
  %255 = bitwise_or(%238, %239) /* ty=Tensor[(15, 15, 2), int64] */;
  %256 = %242.1;
  %257 = %247.0;
  %258 = log10(%248) /* ty=Tensor[(25, 6), float32] */;
  %259 = %253.0;
  (%254, 10 /* ty=int64 */, meta[relay.Constant][23] /* ty=Tensor[(22), float64] */, %255, %256, %var_5543, %257, %258, %259, meta[relay.Constant][24] /* ty=Tensor[(1664), int64] */)
}

def @func_2984(%var_2954: Tensor[(54), uint16], %var_2961: Tensor[(9, 6, 12), float64], %var_2975: Tensor[(240), int32], %var_2978: Tensor[(462), float32]) -> (Tensor[(9, 6, 12), bool], Tensor[(3, 3, 6), uint16], Tensor[(54), uint16], Tensor[(9, 6, 12), bool], Tensor[(9, 6, 12), float64], Tensor[(6, 10, 4), bool], Tensor[(240), int32], Tensor[(20, 108), float64], Tensor[(462), float32], Tensor[(6, 10, 4), bool]) {
  %260 = cast(meta[relay.Constant][26] /* ty=Tensor[(9, 6, 12), uint32] */, dtype="bool") /* ty=Tensor[(9, 6, 12), bool] */;
  %261 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(9, 6, 12), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %262 = cast(meta[relay.Constant][25] /* ty=Tensor[(9, 6, 12), uint32] */, dtype="bool") /* ty=Tensor[(9, 6, 12), bool] */;
  %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %264 = cast(%var_2954, dtype="uint16") /* ty=Tensor[(54), uint16] */;
  %265 = cast(%var_2954, dtype="uint16") /* ty=Tensor[(54), uint16] */;
  %266 = reshape(%264, newshape=[3, 3, 6]) /* ty=Tensor[(3, 3, 6), uint16] */;
  %267 = reshape(%265, newshape=[3, 3, 6]) /* ty=Tensor[(3, 3, 6), uint16] */;
  %268 = cast(meta[relay.Constant][26] /* ty=Tensor[(9, 6, 12), uint32] */, dtype="float64") /* ty=Tensor[(9, 6, 12), float64] */;
  %269 = log10(%268) /* ty=Tensor[(9, 6, 12), float64] */;
  %270 = cast(%var_2961, dtype="bool") /* ty=Tensor[(9, 6, 12), bool] */;
  %271 = shape_of(%269, dtype="int32") /* ty=Tensor[(3), int32] */;
  %272 = cast(%269, dtype="bool") /* ty=Tensor[(9, 6, 12), bool] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %274 = cast(%269, dtype="float64") /* ty=Tensor[(9, 6, 12), float64] */;
  %275 = cast(%var_2975, dtype="int32") /* ty=Tensor[(240), int32] */;
  %276 = reshape(%275, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), int32] */;
  %277 = cast(%var_2978, dtype="float32") /* ty=Tensor[(462), float32] */;
  %278 = reshape(%277, newshape=[3, 11, 14]) /* ty=Tensor[(3, 11, 14), float32] */;
  %279 = @func_179(%278) /* ty=(Tensor[(16, 15, 9), float64], Tensor[(20, 108), float64], Tensor[(3, 11, 14), float32]) */;
  %280 = cast(%var_2975, dtype="int32") /* ty=Tensor[(240), int32] */;
  %281 = reshape(%280, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), int32] */;
  %282 = less_equal(%262, %263) /* ty=Tensor[(9, 6, 12), bool] */;
  %283 = @func_1879(%266, %267) /* ty=Tensor[(3, 3, 6), uint16] */;
  %284 = not_equal(%272, %273) /* ty=Tensor[(9, 6, 12), bool] */;
  %285 = acosh(%274) /* ty=Tensor[(9, 6, 12), float64] */;
  %286 = @func_1257(%276) /* ty=Tensor[(6, 10, 4), bool] */;
  %287 = %279.1;
  %288 = @func_1257(%281) /* ty=Tensor[(6, 10, 4), bool] */;
  (%282, %283, %var_2954, %284, %285, %286, %var_2975, %287, %var_2978, %288)
}

def @func_3897(%var_3782: Tensor[(16, 10, 5), float64], %var_3808: Tensor[(150), int32]) -> (Tensor[(16, 10, 5), uint16], Tensor[(16, 10, 5), uint32], Tensor[(3, 3, 6), uint16], int32, Tensor[(150), int32], Tensor[(54), uint16], Tensor[(550), uint32], Tensor[(6, 10, 4), bool], Tensor[(240), int32], Tensor[(16, 10, 5), bool], Tensor[(16, 10, 5), float32]) {
  %289 = @func_3507() /* ty=(Tensor[(16, 10, 5), float64],) */;
  %290 = %289.0;
  %291 = cast(%var_3782, dtype="uint16") /* ty=Tensor[(16, 10, 5), uint16] */;
  %292 = shape_of(%290, dtype="int32") /* ty=Tensor[(3), int32] */;
  %293 = cast(%290, dtype="uint16") /* ty=Tensor[(16, 10, 5), uint16] */;
  %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %295 = cast(%290, dtype="uint32") /* ty=Tensor[(16, 10, 5), uint32] */;
  %296 = shape_of(%var_3782, dtype="int32") /* ty=Tensor[(3), int32] */;
  %297 = cast(%var_3782, dtype="uint32") /* ty=Tensor[(16, 10, 5), uint32] */;
  %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %299 = cast(-6 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %300 = cast(%var_3808, dtype="int32") /* ty=Tensor[(150), int32] */;
  %301 = cast(meta[relay.Constant][27] /* ty=Tensor[(54), uint16] */, dtype="uint16") /* ty=Tensor[(54), uint16] */;
  %302 = reshape(%299, newshape=[]) /* ty=int32 */;
  %303 = reshape(%300, newshape=[5, 5, 6]) /* ty=Tensor[(5, 5, 6), int32] */;
  %304 = reshape(%301, newshape=[54]) /* ty=Tensor[(54), uint16] */;
  %305 = @func_2059(%302, %303, %304) /* ty=(Tensor[(3, 3, 6), uint16], Tensor[(54), uint16], Tensor[(5, 5, 6), float64], Tensor[(3, 3, 6), uint16]) */;
  %306 = cast(-6 /* ty=int32 */, dtype="int64") /* ty=int64 */;
  %307 = reshape(%306, newshape=[]) /* ty=int64 */;
  %308 = @func_3688(%307) /* ty=(Tensor[(16, 10, 5), float64], Tensor[(150), int32], Tensor[(550), float64], int64) */;
  %309 = %308.2;
  %310 = cast(meta[relay.Constant][28] /* ty=Tensor[(550), float64] */, dtype="uint32") /* ty=Tensor[(550), uint32] */;
  %311 = shape_of(%309, dtype="int32") /* ty=Tensor[(1), int32] */;
  %312 = cast(%309, dtype="uint32") /* ty=Tensor[(550), uint32] */;
  %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %314 = cast(meta[relay.Constant][29] /* ty=Tensor[(240), int32] */, dtype="int32") /* ty=Tensor[(240), int32] */;
  %315 = reshape(%314, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), int32] */;
  %316 = @func_3507() /* ty=(Tensor[(16, 10, 5), float64],) */;
  %317 = %316.0;
  %318 = cast(%290, dtype="bool") /* ty=Tensor[(16, 10, 5), bool] */;
  %319 = shape_of(%317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%317, dtype="bool") /* ty=Tensor[(16, 10, 5), bool] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %322 = @func_3335() /* ty=(Tensor[(16, 10, 5), float32],) */;
  %323 = bitwise_or(%293, %294) /* ty=Tensor[(16, 10, 5), uint16] */;
  %324 = minimum(%297, %298) /* ty=Tensor[(16, 10, 5), uint32] */;
  %325 = %305.0;
  %326 = bitwise_or(%312, %313) /* ty=Tensor[(550), uint32] */;
  %327 = @func_1257(%315) /* ty=Tensor[(6, 10, 4), bool] */;
  %328 = equal(%320, %321) /* ty=Tensor[(16, 10, 5), bool] */;
  %329 = %322.0;
  (%323, %324, %325, -6 /* ty=int32 */, %var_3808, meta[relay.Constant][27] /* ty=Tensor[(54), uint16] */, %326, %327, meta[relay.Constant][29] /* ty=Tensor[(240), int32] */, %328, %329)
}

def @func_4946() -> (Tensor[(16, 10, 5), float64],) {
  %330 = @func_4768() /* ty=Tensor[(16, 10, 5), float32] */;
  %331 = cast(%330, dtype="float64") /* ty=Tensor[(16, 10, 5), float64] */;
  %332 = tan(%331) /* ty=Tensor[(16, 10, 5), float64] */;
  (%332,)
}

def @func_5861() -> Tensor[(16, 10, 5), float64] {
  @func_5326() /* ty=Tensor[(16, 10, 5), float64] */
}

def @func_4416() -> Tensor[(16, 10, 5), float32] {
  @func_3906() /* ty=Tensor[(16, 10, 5), float32] */
}

def @func_2596(%var_2577: int64, %var_2587: Tensor[(75, 2), int32], %var_2594: Tensor[(22), float64]) -> (Tensor[(15, 15, 2), int64], Tensor[(5, 5, 6), float64], Tensor[(75, 2), int32], Tensor[(54), uint16], Tensor[(2, 11, 6), float64], Tensor[(22), float64]) {
  %333 = cast(%var_2577, dtype="int64") /* ty=int64 */;
  %334 = cast(meta[relay.Constant][30] /* ty=Tensor[(15, 15, 2), int64] */, dtype="int64") /* ty=Tensor[(15, 15, 2), int64] */;
  %335 = cast(%var_2577, dtype="int32") /* ty=int32 */;
  %336 = cast(%var_2587, dtype="int32") /* ty=Tensor[(75, 2), int32] */;
  %337 = cast(meta[relay.Constant][31] /* ty=Tensor[(54), uint16] */, dtype="uint16") /* ty=Tensor[(54), uint16] */;
  %338 = reshape(%335, newshape=[]) /* ty=int32 */;
  %339 = reshape(%336, newshape=[5, 5, 6]) /* ty=Tensor[(5, 5, 6), int32] */;
  %340 = reshape(%337, newshape=[54]) /* ty=Tensor[(54), uint16] */;
  %341 = @func_2059(%338, %339, %340) /* ty=(Tensor[(3, 3, 6), uint16], Tensor[(54), uint16], Tensor[(5, 5, 6), float64], Tensor[(3, 3, 6), uint16]) */;
  %342 = cast(%var_2594, dtype="float64") /* ty=Tensor[(22), float64] */;
  %343 = reshape(%342, newshape=[22]) /* ty=Tensor[(22), float64] */;
  %344 = @func_2255(%343) /* ty=(Tensor[(?, 12, 6), bool], Tensor[(2, 11, 6), float64], Tensor[(22), float64], Tensor[(132), float64], Tensor[(?, 12, 6), float32]) */;
  %345 = logical_xor(%333, %334) /* ty=Tensor[(15, 15, 2), int64] */;
  %346 = %341.2;
  %347 = %344.1;
  (%345, %346, %var_2587, meta[relay.Constant][31] /* ty=Tensor[(54), uint16] */, %347, %var_2594)
}

def @func_2059(%var_2017: int32, %var_2018: Tensor[(5, 5, 6), int32], %var_2044: Tensor[(54), uint16]) -> (Tensor[(3, 3, 6), uint16], Tensor[(54), uint16], Tensor[(5, 5, 6), float64], Tensor[(3, 3, 6), uint16]) {
  %348 = cast(%var_2044, dtype="uint16") /* ty=Tensor[(54), uint16] */;
  %349 = cast(%var_2044, dtype="uint16") /* ty=Tensor[(54), uint16] */;
  %350 = reshape(%348, newshape=[3, 3, 6]) /* ty=Tensor[(3, 3, 6), uint16] */;
  %351 = reshape(%349, newshape=[3, 3, 6]) /* ty=Tensor[(3, 3, 6), uint16] */;
  %352 = cast(%var_2017, dtype="bool") /* ty=bool */;
  %353 = cast(%var_2018, dtype="bool") /* ty=Tensor[(5, 5, 6), bool] */;
  %354 = greater(%352, %353) /* ty=Tensor[(5, 5, 6), bool] */;
  %355 = cast(%354, dtype="float64") /* ty=Tensor[(5, 5, 6), float64] */;
  %356 = shape_of(%var_2018, dtype="int32") /* ty=Tensor[(3), int32] */;
  %357 = cast(%var_2018, dtype="float64") /* ty=Tensor[(5, 5, 6), float64] */;
  %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %359 = power(%357, %358) /* ty=Tensor[(5, 5, 6), float64] */;
  %360 = cast(%359, dtype="float64") /* ty=Tensor[(5, 5, 6), float64] */;
  %361 = acosh(%360) /* ty=Tensor[(5, 5, 6), float64] */;
  %362 = cast(%361, dtype="float64") /* ty=Tensor[(5, 5, 6), float64] */;
  %363 = cast(%var_2044, dtype="uint16") /* ty=Tensor[(54), uint16] */;
  %364 = cast(%var_2044, dtype="uint16") /* ty=Tensor[(54), uint16] */;
  %365 = reshape(%363, newshape=[3, 3, 6]) /* ty=Tensor[(3, 3, 6), uint16] */;
  %366 = reshape(%364, newshape=[3, 3, 6]) /* ty=Tensor[(3, 3, 6), uint16] */;
  %367 = @func_1879(%350, %351) /* ty=Tensor[(3, 3, 6), uint16] */;
  %368 = sin(%362) /* ty=Tensor[(5, 5, 6), float64] */;
  %369 = @func_1879(%365, %366) /* ty=Tensor[(3, 3, 6), uint16] */;
  (%367, %var_2044, %368, %369)
}

def @func_5114(%var_5069: Tensor[(1664), int64], %var_5093: Tensor[(150), int32]) -> (Tensor[(462), float32], int64, Tensor[(1664), int64], Tensor[(150), int32], Tensor[(150), int32], Tensor[(16, 10, 5), float32]) {
  %370 = cast(3 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %371 = cast(%var_5069, dtype="int64") /* ty=Tensor[(1664), int64] */;
  %372 = reshape(%370, newshape=[]) /* ty=int64 */;
  %373 = reshape(%371, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), int64] */;
  %374 = @func_2485(%372, %373) /* ty=(Tensor[(8, 13, 16), int64], Tensor[(462), float32], Tensor[(16, 15, 9), uint32]) */;
  %375 = cast(%var_5093, dtype="int32") /* ty=Tensor[(150), int32] */;
  %376 = reshape(%375, newshape=[150]) /* ty=Tensor[(150), int32] */;
  %377 = @func_4272(%376) /* ty=(Tensor[(16, 10, 5), float64], Tensor[(16, 10, 5), float32], Tensor[(150), int32]) */;
  %378 = @func_3507() /* ty=(Tensor[(16, 10, 5), float64],) */;
  %379 = %378.0;
  %380 = cast(%379, dtype="float64") /* ty=Tensor[(16, 10, 5), float64] */;
  %381 = sinh(%380) /* ty=Tensor[(16, 10, 5), float64] */;
  %382 = cast(%381, dtype="float32") /* ty=Tensor[(16, 10, 5), float32] */;
  %383 = %374.1;
  %384 = %377.2;
  %385 = cos(%382) /* ty=Tensor[(16, 10, 5), float32] */;
  (%383, 3 /* ty=int64 */, %var_5069, %384, %var_5093, %385)
}

def @func_4463() -> (Tensor[(16, 10, 5), float32], Tensor[(6, 10, 4), bool], Tensor[(216, 1), int32]) {
  %386 = cast(meta[relay.Constant][32] /* ty=Tensor[(216, 1), int32] */, dtype="int32") /* ty=Tensor[(216, 1), int32] */;
  %387 = cast(meta[relay.Constant][32] /* ty=Tensor[(216, 1), int32] */, dtype="int32") /* ty=Tensor[(216, 1), int32] */;
  %388 = reshape(%386, newshape=[9, 8, 3]) /* ty=Tensor[(9, 8, 3), int32] */;
  %389 = reshape(%387, newshape=[9, 8, 3]) /* ty=Tensor[(9, 8, 3), int32] */;
  %390 = @func_3736(%388, %389) /* ty=(Tensor[(9, 8, 3), bool], Tensor[(9, 8, 3), float64], Tensor[(6, 10, 4), bool], Tensor[(240), int32]) */;
  %391 = @func_3906() /* ty=Tensor[(16, 10, 5), float32] */;
  %392 = %390.2;
  (%391, %392, meta[relay.Constant][32] /* ty=Tensor[(216, 1), int32] */)
}

def @main(%var_5897: Tensor[(6, 10, 4), float64], %var_5944: Tensor[(54), uint16], %var_5945: Tensor[(648), float64]) -> (Tensor[(16, 10, 5), float32], Tensor[(9, 6, 12), float64], Tensor[(54), uint16], Tensor[(648), float64], Tensor[(462), float32], Tensor[(16, 10, 5), float32], Tensor[(6, 10, 4), float64]) {
  %393 = @func_4732() /* ty=(Tensor[(16, 10, 5), float32],) */;
  %394 = cast(%var_5944, dtype="uint16") /* ty=Tensor[(54), uint16] */;
  %395 = cast(%var_5945, dtype="float64") /* ty=Tensor[(648), float64] */;
  %396 = @func_5490() /* ty=(int32, Tensor[(6, 10, 4), bool], Tensor[(240), int32]) */;
  %397 = %396.1;
  %398 = cast(%397, dtype="float32") /* ty=Tensor[(6, 10, 4), float32] */;
  %399 = asinh(%398) /* ty=Tensor[(6, 10, 4), float32] */;
  %400 = cast(%399, dtype="int32") /* ty=Tensor[(6, 10, 4), int32] */;
  %401 = cast(meta[relay.Constant][33] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
  %402 = reshape(%394, newshape=[54]) /* ty=Tensor[(54), uint16] */;
  %403 = reshape(%395, newshape=[9, 6, 12]) /* ty=Tensor[(9, 6, 12), float64] */;
  %404 = reshape(%400, newshape=[240]) /* ty=Tensor[(240), int32] */;
  %405 = reshape(%401, newshape=[462]) /* ty=Tensor[(462), float32] */;
  %406 = @func_2984(%402, %403, %404, %405) /* ty=(Tensor[(9, 6, 12), bool], Tensor[(3, 3, 6), uint16], Tensor[(54), uint16], Tensor[(9, 6, 12), bool], Tensor[(9, 6, 12), float64], Tensor[(6, 10, 4), bool], Tensor[(240), int32], Tensor[(20, 108), float64], Tensor[(462), float32], Tensor[(6, 10, 4), bool]) */;
  %407 = cast(%399, dtype="float64") /* ty=Tensor[(6, 10, 4), float64] */;
  %408 = atan(%407) /* ty=Tensor[(6, 10, 4), float64] */;
  %409 = cast(%var_5897, dtype="int8") /* ty=Tensor[(6, 10, 4), int8] */;
  %410 = shape_of(%408, dtype="int32") /* ty=Tensor[(3), int32] */;
  %411 = cast(%408, dtype="int8") /* ty=Tensor[(6, 10, 4), int8] */;
  %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %413 = maximum(%411, %412) /* ty=Tensor[(6, 10, 4), int8] */;
  %414 = cast(%413, dtype="float64") /* ty=Tensor[(6, 10, 4), float64] */;
  %415 = sqrt(%414) /* ty=Tensor[(6, 10, 4), float64] */;
  %416 = cast(%413, dtype="int8") /* ty=Tensor[(6, 10, 4), int8] */;
  %417 = shape_of(%415, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(%415, dtype="int8") /* ty=Tensor[(6, 10, 4), int8] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %420 = left_shift(%418, %419) /* ty=Tensor[(6, 10, 4), int8] */;
  %421 = cast(meta[relay.Constant][34] /* ty=Tensor[(6, 10, 4), int8] */, dtype="float64") /* ty=Tensor[(6, 10, 4), float64] */;
  %422 = shape_of(%420, dtype="int32") /* ty=Tensor[(3), int32] */;
  %423 = cast(%420, dtype="float64") /* ty=Tensor[(6, 10, 4), float64] */;
  %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %425 = mod(%423, %424) /* ty=Tensor[(6, 10, 4), float64] */;
  %426 = cast(%425, dtype="float32") /* ty=Tensor[(6, 10, 4), float32] */;
  %427 = sinh(%426) /* ty=Tensor[(6, 10, 4), float32] */;
  %428 = cast(meta[relay.Constant][35] /* ty=Tensor[(6, 10, 4), bool] */, dtype="float64") /* ty=Tensor[(6, 10, 4), float64] */;
  %429 = shape_of(%397, dtype="int32") /* ty=Tensor[(3), int32] */;
  %430 = cast(%397, dtype="float64") /* ty=Tensor[(6, 10, 4), float64] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %432 = subtract(%430, %431) /* ty=Tensor[(6, 10, 4), float64] */;
  %433 = cast(%432, dtype="int16") /* ty=Tensor[(6, 10, 4), int16] */;
  %434 = shape_of(%427, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%427, dtype="int16") /* ty=Tensor[(6, 10, 4), int16] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %437 = multiply(%435, %436) /* ty=Tensor[(6, 10, 4), int16] */;
  %438 = cast(%437, dtype="uint16") /* ty=Tensor[(6, 10, 4), uint16] */;
  %439 = shape_of(%420, dtype="int32") /* ty=Tensor[(3), int32] */;
  %440 = cast(%420, dtype="uint16") /* ty=Tensor[(6, 10, 4), uint16] */;
  %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %442 = minimum(%440, %441) /* ty=Tensor[(6, 10, 4), uint16] */;
  %443 = cast(%415, dtype="float64") /* ty=Tensor[(6, 10, 4), float64] */;
  %444 = shape_of(%442, dtype="int32") /* ty=Tensor[(3), int32] */;
  %445 = cast(%442, dtype="float64") /* ty=Tensor[(6, 10, 4), float64] */;
  %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %447 = %393.0;
  %448 = %406.4;
  %449 = @func_3906() /* ty=Tensor[(16, 10, 5), float32] */;
  %450 = floor_divide(%445, %446) /* ty=Tensor[(6, 10, 4), float64] */;
  (%447, %448, %var_5944, %var_5945, meta[relay.Constant][33] /* ty=Tensor[(462), float32] */, %449, %450)
}

def @func_2255(%var_2229: Tensor[(22), float64]) -> (Tensor[(?, 12, 6), bool], Tensor[(2, 11, 6), float64], Tensor[(22), float64], Tensor[(132), float64], Tensor[(?, 12, 6), float32]) {
  %451 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 12, 6), float32] */, dtype="float32") /* ty=Tensor[(1, 12, 6), float32] */;
  %452 = cos(%451) /* ty=Tensor[(1, 12, 6), float32] */;
  %453 = cast(%452, dtype="bool") /* ty=Tensor[(1, 12, 6), bool] */;
  %454 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(1, 12, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %455 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 12, 6), float32] */, dtype="bool") /* ty=Tensor[(1, 12, 6), bool] */;
  %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %457 = cast(%var_2229, dtype="float64") /* ty=Tensor[(22), float64] */;
  %458 = cast(meta[relay.Constant][37] /* ty=Tensor[(132), float64] */, dtype="float64") /* ty=Tensor[(132), float64] */;
  %459 = reshape(%457, newshape=[2, 11, 1]) /* ty=Tensor[(2, 11, 1), float64] */;
  %460 = reshape(%458, newshape=[2, 11, 6]) /* ty=Tensor[(2, 11, 6), float64] */;
  %461 = @func_2157(%459, %460) /* ty=(Tensor[(2, 11, 6), float64],) */;
  %462 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 12, 6), float32] */, dtype="uint16") /* ty=Tensor[(1, 12, 6), uint16] */;
  %463 = shape_of(%452, dtype="int32") /* ty=Tensor[(3), int32] */;
  %464 = cast(%452, dtype="uint16") /* ty=Tensor[(1, 12, 6), uint16] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %466 = subtract(%464, %465) /* ty=Tensor[(?, 12, 6), uint16] */;
  %467 = cast(%466, dtype="float64") /* ty=Tensor[(?, 12, 6), float64] */;
  %468 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(1, 12, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %469 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 12, 6), float32] */, dtype="float64") /* ty=Tensor[(1, 12, 6), float64] */;
  %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %471 = mod(%469, %470) /* ty=Tensor[(?, 12, 6), float64] */;
  %472 = cast(%471, dtype="float32") /* ty=Tensor[(?, 12, 6), float32] */;
  %473 = shape_of(%452, dtype="int32") /* ty=Tensor[(3), int32] */;
  %474 = cast(%452, dtype="float32") /* ty=Tensor[(1, 12, 6), float32] */;
  %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %476 = less_equal(%455, %456) /* ty=Tensor[(?, 12, 6), bool] */;
  %477 = %461.0;
  %478 = floor_divide(%474, %475) /* ty=Tensor[(?, 12, 6), float32] */;
  (%476, %477, %var_2229, meta[relay.Constant][37] /* ty=Tensor[(132), float64] */, %478)
}

def @func_787(%var_782: int16, %var_783: Tensor[(2, 8, 1), int16]) -> Tensor[(2, 8, 1), int16] {
  %479 = cast(%var_782, dtype="int16") /* ty=int16 */;
  %480 = cast(%var_783, dtype="int16") /* ty=Tensor[(2, 8, 1), int16] */;
  bitwise_or(%479, %480) /* ty=Tensor[(2, 8, 1), int16] */
}

def @func_5180(%var_5136: int64, %var_5154: Tensor[(54), uint16], %var_5159: Tensor[(48), float32], %var_5160: Tensor[(462), float32]) -> (Tensor[(3, 3, 6), uint16], Tensor[(54), uint16], Tensor[(30, 4), float64], Tensor[(48), float32], Tensor[(462), float32], Tensor[(9, 6, 13), float64]) {
  %481 = cast(%var_5154, dtype="uint16") /* ty=Tensor[(54), uint16] */;
  %482 = cast(%var_5154, dtype="uint16") /* ty=Tensor[(54), uint16] */;
  %483 = reshape(%481, newshape=[3, 3, 6]) /* ty=Tensor[(3, 3, 6), uint16] */;
  %484 = reshape(%482, newshape=[3, 3, 6]) /* ty=Tensor[(3, 3, 6), uint16] */;
  %485 = cast(%var_5159, dtype="float32") /* ty=Tensor[(48), float32] */;
  %486 = cast(%var_5160, dtype="float32") /* ty=Tensor[(462), float32] */;
  %487 = reshape(%485, newshape=[4, 3, 4]) /* ty=Tensor[(4, 3, 4), float32] */;
  %488 = reshape(%486, newshape=[3, 11, 14]) /* ty=Tensor[(3, 11, 14), float32] */;
  %489 = @func_2007(%487, %488) /* ty=(Tensor[(4, 3, 4), float32], Tensor[(462), float32], Tensor[(1, 2160), float64], Tensor[(30, 4), float64], Tensor[(4, 3, 4), uint16], Tensor[(3, 11, 14), uint64]) */;
  %490 = cast(%var_5136, dtype="int64") /* ty=int64 */;
  %491 = cast(meta[relay.Constant][38] /* ty=Tensor[(9, 6, 13), int64] */, dtype="int64") /* ty=Tensor[(9, 6, 13), int64] */;
  %492 = maximum(%490, %491) /* ty=Tensor[(9, 6, 13), int64] */;
  %493 = cast(meta[relay.Constant][39] /* ty=Tensor[(9, 6, 13), int64] */, dtype="bool") /* ty=Tensor[(9, 6, 13), bool] */;
  %494 = shape_of(%492, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(%492, dtype="bool") /* ty=Tensor[(9, 6, 13), bool] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %497 = less(%495, %496) /* ty=Tensor[(9, 6, 13), bool] */;
  %498 = cast(%497, dtype="float64") /* ty=Tensor[(9, 6, 13), float64] */;
  %499 = acosh(%498) /* ty=Tensor[(9, 6, 13), float64] */;
  %500 = cast(%499, dtype="float64") /* ty=Tensor[(9, 6, 13), float64] */;
  %501 = @func_1879(%483, %484) /* ty=Tensor[(3, 3, 6), uint16] */;
  %502 = %489.3;
  %503 = atan(%500) /* ty=Tensor[(9, 6, 13), float64] */;
  (%501, %var_5154, %502, %var_5159, %var_5160, %503)
}

def @func_3747() -> (Tensor[(16, 10, 5), float64],) {
  %504 = @func_3507() /* ty=(Tensor[(16, 10, 5), float64],) */;
  %505 = %504.0;
  (%505,)
}

def @func_3547(%var_3511: Tensor[(5, 11, 10), float64], %var_3532: int64, %var_3537: Tensor[(5, 11, 10), float32]) -> (Tensor[(54), uint16], int64, Tensor[(150), int32], Tensor[(22), float64], Tensor[(5, 11, 10), float64]) {
  %506 = cast(%var_3532, dtype="int64") /* ty=int64 */;
  %507 = cast(meta[relay.Constant][40] /* ty=Tensor[(150), int32] */, dtype="int32") /* ty=Tensor[(150), int32] */;
  %508 = cast(meta[relay.Constant][41] /* ty=Tensor[(22), float64] */, dtype="float64") /* ty=Tensor[(22), float64] */;
  %509 = reshape(%506, newshape=[]) /* ty=int64 */;
  %510 = reshape(%507, newshape=[75, 2]) /* ty=Tensor[(75, 2), int32] */;
  %511 = reshape(%508, newshape=[22]) /* ty=Tensor[(22), float64] */;
  %512 = @func_2596(%509, %510, %511) /* ty=(Tensor[(15, 15, 2), int64], Tensor[(5, 5, 6), float64], Tensor[(75, 2), int32], Tensor[(54), uint16], Tensor[(2, 11, 6), float64], Tensor[(22), float64]) */;
  %513 = cast(meta[relay.Constant][42] /* ty=Tensor[(5, 11, 10), float64] */, dtype="float64") /* ty=Tensor[(5, 11, 10), float64] */;
  %514 = shape_of(%var_3511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %515 = cast(%var_3511, dtype="float64") /* ty=Tensor[(5, 11, 10), float64] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %517 = mod(%515, %516) /* ty=Tensor[(5, 11, 10), float64] */;
  %518 = cast(%517, dtype="float32") /* ty=Tensor[(5, 11, 10), float32] */;
  %519 = shape_of(%var_3511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %520 = cast(%var_3511, dtype="float32") /* ty=Tensor[(5, 11, 10), float32] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %522 = add(%520, %521) /* ty=Tensor[(5, 11, 10), float32] */;
  %523 = cast(%var_3537, dtype="float64") /* ty=Tensor[(5, 11, 10), float64] */;
  %524 = shape_of(%522, dtype="int32") /* ty=Tensor[(3), int32] */;
  %525 = cast(%522, dtype="float64") /* ty=Tensor[(5, 11, 10), float64] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %527 = %512.3;
  %528 = power(%525, %526) /* ty=Tensor[(5, 11, 10), float64] */;
  (%527, %var_3532, meta[relay.Constant][40] /* ty=Tensor[(150), int32] */, meta[relay.Constant][41] /* ty=Tensor[(22), float64] */, %528)
}

def @func_4482(%var_4477: Tensor[(75, 2), int32]) -> (Tensor[(16, 10, 5), float32], Tensor[(550), uint32], Tensor[(75, 2), int32]) {
  %529 = @func_3773() /* ty=Tensor[(16, 10, 5), float32] */;
  %530 = cast(%529, dtype="float64") /* ty=Tensor[(16, 10, 5), float64] */;
  %531 = cast(%var_4477, dtype="int32") /* ty=Tensor[(75, 2), int32] */;
  %532 = reshape(%530, newshape=[16, 10, 5]) /* ty=Tensor[(16, 10, 5), float64] */;
  %533 = reshape(%531, newshape=[150]) /* ty=Tensor[(150), int32] */;
  %534 = @func_3897(%532, %533) /* ty=(Tensor[(16, 10, 5), uint16], Tensor[(16, 10, 5), uint32], Tensor[(3, 3, 6), uint16], int32, Tensor[(150), int32], Tensor[(54), uint16], Tensor[(550), uint32], Tensor[(6, 10, 4), bool], Tensor[(240), int32], Tensor[(16, 10, 5), bool], Tensor[(16, 10, 5), float32]) */;
  %535 = %534.6;
  (%529, %535, %var_4477)
}

def @func_5813(%var_5753: Tensor[(11, 1, 13), float32]) -> (Tensor[(11, 1, 13), float32], Tensor[(16, 10, 5), float32], Tensor[(16, 10, 5), float64], Tensor[(16, 10, 5), float32], Tensor[(54), uint16], Tensor[(3, 3, 6), int16]) {
  %536 = cast(1.92913f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %537 = cast(%var_5753, dtype="float32") /* ty=Tensor[(11, 1, 13), float32] */;
  %538 = @func_3335() /* ty=(Tensor[(16, 10, 5), float32],) */;
  %539 = cast(1.92913f /* ty=float32 */, dtype="int64") /* ty=int64 */;
  %540 = reshape(%539, newshape=[]) /* ty=int64 */;
  %541 = @func_3688(%540) /* ty=(Tensor[(16, 10, 5), float64], Tensor[(150), int32], Tensor[(550), float64], int64) */;
  %542 = cast(meta[relay.Constant][43] /* ty=Tensor[(54), uint16] */, dtype="uint16") /* ty=Tensor[(54), uint16] */;
  %543 = cast(meta[relay.Constant][43] /* ty=Tensor[(54), uint16] */, dtype="uint16") /* ty=Tensor[(54), uint16] */;
  %544 = reshape(%542, newshape=[3, 3, 6]) /* ty=Tensor[(3, 3, 6), uint16] */;
  %545 = reshape(%543, newshape=[3, 3, 6]) /* ty=Tensor[(3, 3, 6), uint16] */;
  %546 = @func_1879(%544, %545) /* ty=Tensor[(3, 3, 6), uint16] */;
  %547 = cast(%546, dtype="int16") /* ty=Tensor[(3, 3, 6), int16] */;
  %548 = cast(1.92913f /* ty=float32 */, dtype="int16") /* ty=int16 */;
  %549 = floor_divide(%536, %537) /* ty=Tensor[(11, 1, 13), float32] */;
  %550 = %538.0;
  %551 = %541.0;
  %552 = @func_3906() /* ty=Tensor[(16, 10, 5), float32] */;
  %553 = logical_xor(%547, %548) /* ty=Tensor[(3, 3, 6), int16] */;
  (%549, %550, %551, %552, meta[relay.Constant][43] /* ty=Tensor[(54), uint16] */, %553)
}

def @func_3967(%var_3950: Tensor[(54), uint16], %var_3951: Tensor[(648), float64], %var_3953: Tensor[(462), float32], %var_3962: Tensor[(240), int32]) -> (Tensor[(16, 10, 5), uint16], Tensor[(9, 6, 12), bool], Tensor[(54), uint16], Tensor[(648), float64], Tensor[(462), float32], Tensor[(240), float64]) {
  %554 = @func_3906() /* ty=Tensor[(16, 10, 5), float32] */;
  %555 = cast(meta[relay.Constant][44] /* ty=Tensor[(16, 10, 5), float32] */, dtype="uint16") /* ty=Tensor[(16, 10, 5), uint16] */;
  %556 = shape_of(%554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(%554, dtype="uint16") /* ty=Tensor[(16, 10, 5), uint16] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %559 = cast(%var_3950, dtype="uint16") /* ty=Tensor[(54), uint16] */;
  %560 = cast(%var_3951, dtype="float64") /* ty=Tensor[(648), float64] */;
  %561 = cast(meta[relay.Constant][45] /* ty=Tensor[(240), int32] */, dtype="int32") /* ty=Tensor[(240), int32] */;
  %562 = cast(%var_3953, dtype="float32") /* ty=Tensor[(462), float32] */;
  %563 = reshape(%559, newshape=[54]) /* ty=Tensor[(54), uint16] */;
  %564 = reshape(%560, newshape=[9, 6, 12]) /* ty=Tensor[(9, 6, 12), float64] */;
  %565 = reshape(%561, newshape=[240]) /* ty=Tensor[(240), int32] */;
  %566 = reshape(%562, newshape=[462]) /* ty=Tensor[(462), float32] */;
  %567 = @func_2984(%563, %564, %565, %566) /* ty=(Tensor[(9, 6, 12), bool], Tensor[(3, 3, 6), uint16], Tensor[(54), uint16], Tensor[(9, 6, 12), bool], Tensor[(9, 6, 12), float64], Tensor[(6, 10, 4), bool], Tensor[(240), int32], Tensor[(20, 108), float64], Tensor[(462), float32], Tensor[(6, 10, 4), bool]) */;
  %568 = cast(%var_3962, dtype="float64") /* ty=Tensor[(240), float64] */;
  %569 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(240), int32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %570 = cast(meta[relay.Constant][45] /* ty=Tensor[(240), int32] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?), float64] */;
  %572 = logical_xor(%557, %558) /* ty=Tensor[(16, 10, 5), uint16] */;
  %573 = %567.0;
  %574 = mod(%570, %571) /* ty=Tensor[(240), float64] */;
  (%572, %573, %var_3950, %var_3951, %var_3953, %574)
}

def @func_5629(%var_5610: uint16, %var_5611: Tensor[(3, 4, 6), uint16]) -> (Tensor[(3, 4, 6), uint16], Tensor[(6, 10, 4), bool], Tensor[(3, 4, 6), float32], Tensor[(1, 2160), float64], Tensor[(30, 4), float64]) {
  %575 = cast(%var_5610, dtype="uint16") /* ty=uint16 */;
  %576 = cast(%var_5611, dtype="uint16") /* ty=Tensor[(3, 4, 6), uint16] */;
  %577 = @func_4463() /* ty=(Tensor[(16, 10, 5), float32], Tensor[(6, 10, 4), bool], Tensor[(216, 1), int32]) */;
  %578 = cast(%var_5611, dtype="float32") /* ty=Tensor[(3, 4, 6), float32] */;
  %579 = cast(meta[relay.Constant][46] /* ty=Tensor[(30, 4), float64] */, dtype="float64") /* ty=Tensor[(30, 4), float64] */;
  %580 = reshape(%579, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), float64] */;
  %581 = @func_750(%580) /* ty=(Tensor[(5, 4, 6), float32], Tensor[(16, 15, 9), float64], Tensor[(1, 2160), float64]) */;
  %582 = subtract(%575, %576) /* ty=Tensor[(3, 4, 6), uint16] */;
  %583 = %577.1;
  %584 = tan(%578) /* ty=Tensor[(3, 4, 6), float32] */;
  %585 = %581.2;
  (%582, %583, %584, %585, meta[relay.Constant][46] /* ty=Tensor[(30, 4), float64] */)
}

def @func_1879(%var_1874: Tensor[(3, 3, 6), uint16], %var_1875: Tensor[(3, 3, 6), uint16]) -> Tensor[(3, 3, 6), uint16] {
  %586 = cast(%var_1875, dtype="uint16") /* ty=Tensor[(3, 3, 6), uint16] */;
  %587 = shape_of(%var_1874, dtype="int32") /* ty=Tensor[(3), int32] */;
  %588 = cast(%var_1874, dtype="uint16") /* ty=Tensor[(3, 3, 6), uint16] */;
  %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_and(%588, %589) /* ty=Tensor[(3, 3, 6), uint16] */
}

def @func_4591(%var_4554: Tensor[(16, 10, 5), float64], %var_4565: Tensor[(16, 10, 5), uint32], %var_4570: Tensor[(16, 10, 5), float64], %var_4588: bool) -> (Tensor[(16, 10, 5), bool], Tensor[(1, 5, 9), float32], bool, Tensor[(45), bool]) {
  %590 = @func_4336() /* ty=Tensor[(16, 10, 5), float64] */;
  %591 = cast(%var_4554, dtype="uint32") /* ty=Tensor[(16, 10, 5), uint32] */;
  %592 = shape_of(%590, dtype="int32") /* ty=Tensor[(3), int32] */;
  %593 = cast(%590, dtype="uint32") /* ty=Tensor[(16, 10, 5), uint32] */;
  %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %595 = subtract(%593, %594) /* ty=Tensor[(16, 10, 5), uint32] */;
  %596 = cast(%var_4565, dtype="float64") /* ty=Tensor[(16, 10, 5), float64] */;
  %597 = shape_of(%595, dtype="int32") /* ty=Tensor[(3), int32] */;
  %598 = cast(%595, dtype="float64") /* ty=Tensor[(16, 10, 5), float64] */;
  %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %600 = floor_mod(%598, %599) /* ty=Tensor[(16, 10, 5), float64] */;
  %601 = cast(%var_4570, dtype="bool") /* ty=Tensor[(16, 10, 5), bool] */;
  %602 = shape_of(%600, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%600, dtype="bool") /* ty=Tensor[(16, 10, 5), bool] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %605 = cast(%var_4588, dtype="bool") /* ty=bool */;
  %606 = cast(meta[relay.Constant][47] /* ty=Tensor[(45), bool] */, dtype="bool") /* ty=Tensor[(45), bool] */;
  %607 = reshape(%605, newshape=[]) /* ty=bool */;
  %608 = reshape(%606, newshape=[1, 5, 9]) /* ty=Tensor[(1, 5, 9), bool] */;
  %609 = @func_3319(%607, %608) /* ty=(Tensor[(1, 5, 9), float32],) */;
  %610 = greater(%603, %604) /* ty=Tensor[(16, 10, 5), bool] */;
  %611 = %609.0;
  (%610, %611, %var_4588, meta[relay.Constant][47] /* ty=Tensor[(45), bool] */)
}

def @func_957(%var_923: Tensor[(9, 10, 1), int64], %var_924: Tensor[(9, 10, 15), int64], %var_932: Tensor[(462), float32], %var_939: Tensor[(120), float64], %var_941: Tensor[(8, 2160), float64]) -> (Tensor[(9, 10, 15), int64], Tensor[(20, 108), float64], Tensor[(462), float32], Tensor[(120), float64], Tensor[(8, 2160), bool]) {
  %612 = cast(%var_923, dtype="int64") /* ty=Tensor[(9, 10, 1), int64] */;
  %613 = cast(%var_924, dtype="int64") /* ty=Tensor[(9, 10, 15), int64] */;
  %614 = cast(%var_932, dtype="float32") /* ty=Tensor[(462), float32] */;
  %615 = reshape(%614, newshape=[3, 11, 14]) /* ty=Tensor[(3, 11, 14), float32] */;
  %616 = @func_179(%615) /* ty=(Tensor[(16, 15, 9), float64], Tensor[(20, 108), float64], Tensor[(3, 11, 14), float32]) */;
  %617 = cast(%var_939, dtype="float64") /* ty=Tensor[(120), float64] */;
  %618 = reshape(%617, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), float64] */;
  %619 = @func_750(%618) /* ty=(Tensor[(5, 4, 6), float32], Tensor[(16, 15, 9), float64], Tensor[(1, 2160), float64]) */;
  %620 = %619.2;
  %621 = cast(%620, dtype="bool") /* ty=Tensor[(1, 2160), bool] */;
  %622 = cast(%var_941, dtype="bool") /* ty=Tensor[(8, 2160), bool] */;
  %623 = left_shift(%612, %613) /* ty=Tensor[(9, 10, 15), int64] */;
  %624 = %616.1;
  %625 = greater(%621, %622) /* ty=Tensor[(8, 2160), bool] */;
  (%623, %624, %var_932, %var_939, %625)
}

def @func_5733(%var_5678: Tensor[(7, 648), int16], %var_5718: Tensor[(150), int32], %var_5719: Tensor[(1, 22), float64], %var_5729: Tensor[(120), float64]) -> (Tensor[(462), bool], Tensor[(546), int32], Tensor[(462), float32], Tensor[(550), float64], Tensor[(462), float32], Tensor[(48), float32], Tensor[(7, 648), uint32], Tensor[(?, 54), bool], Tensor[(1, 648), float32], Tensor[(462), float32], Tensor[(416, 4), int64], Tensor[(5, 5, 6), float64], Tensor[(150), int32], Tensor[(1, 22), float64], Tensor[(8, 13, 16), int64], Tensor[(120), float64]) {
  %626 = cast(meta[relay.Constant][48] /* ty=Tensor[(546), int32] */, dtype="int32") /* ty=Tensor[(546), int32] */;
  %627 = cast(meta[relay.Constant][48] /* ty=Tensor[(546), int32] */, dtype="int32") /* ty=Tensor[(546), int32] */;
  %628 = cast(meta[relay.Constant][48] /* ty=Tensor[(546), int32] */, dtype="int32") /* ty=Tensor[(546), int32] */;
  %629 = cast(meta[relay.Constant][49] /* ty=Tensor[(1, 648), float64] */, dtype="float64") /* ty=Tensor[(1, 648), float64] */;
  %630 = cast(meta[relay.Constant][50] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
  %631 = cast(meta[relay.Constant][50] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
  %632 = cast(meta[relay.Constant][51] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
  %633 = @func_4376() /* ty=(Tensor[(16, 10, 5), float32], Tensor[(6, 10, 4), bool], Tensor[(24, 10), int32], Tensor[(5, 5, 6), float64], int32, Tensor[(150), int32], Tensor[(54), uint16]) */;
  %634 = %633.4;
  %635 = cast(%634, dtype="int64") /* ty=int64 */;
  %636 = reshape(%626, newshape=[6, 13, 7]) /* ty=Tensor[(6, 13, 7), int32] */;
  %637 = reshape(%627, newshape=[6, 13, 7]) /* ty=Tensor[(6, 13, 7), int32] */;
  %638 = reshape(%628, newshape=[6, 13, 7]) /* ty=Tensor[(6, 13, 7), int32] */;
  %639 = reshape(%629, newshape=[1, 648]) /* ty=Tensor[(1, 648), float64] */;
  %640 = reshape(%630, newshape=[462]) /* ty=Tensor[(462), float32] */;
  %641 = reshape(%631, newshape=[462]) /* ty=Tensor[(462), float32] */;
  %642 = reshape(%632, newshape=[550]) /* ty=Tensor[(550), float64] */;
  %643 = reshape(%635, newshape=[]) /* ty=int64 */;
  %644 = @func_4052(%636, %637, %638, %639, %640, %641, %642, %643) /* ty=(Tensor[(6, 13, 7), int32], Tensor[(6, 13, 7), int8], Tensor[(1, 648), float64], Tensor[(54), float64], Tensor[(462), bool], Tensor[(150), int32], Tensor[(550), float64], int64, Tensor[(16, 10, 5), float64], Tensor[(20, 108), float64]) */;
  %645 = cast(%634, dtype="int64") /* ty=int64 */;
  %646 = cast(meta[relay.Constant][52] /* ty=Tensor[(1, 54), uint16] */, dtype="uint16") /* ty=Tensor[(1, 54), uint16] */;
  %647 = cast(meta[relay.Constant][53] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %648 = cast(meta[relay.Constant][50] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
  %649 = reshape(%645, newshape=[]) /* ty=int64 */;
  %650 = reshape(%646, newshape=[54]) /* ty=Tensor[(54), uint16] */;
  %651 = reshape(%647, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %652 = reshape(%648, newshape=[462]) /* ty=Tensor[(462), float32] */;
  %653 = @func_5180(%649, %650, %651, %652) /* ty=(Tensor[(3, 3, 6), uint16], Tensor[(54), uint16], Tensor[(30, 4), float64], Tensor[(48), float32], Tensor[(462), float32], Tensor[(9, 6, 13), float64]) */;
  %654 = cast(meta[relay.Constant][49] /* ty=Tensor[(1, 648), float64] */, dtype="int16") /* ty=Tensor[(1, 648), int16] */;
  %655 = cast(%634, dtype="int16") /* ty=int16 */;
  %656 = left_shift(%654, %655) /* ty=Tensor[(1, 648), int16] */;
  %657 = cast(%656, dtype="uint32") /* ty=Tensor[(1, 648), uint32] */;
  %658 = cast(%var_5678, dtype="uint32") /* ty=Tensor[(7, 648), uint32] */;
  %659 = cast(meta[relay.Constant][52] /* ty=Tensor[(1, 54), uint16] */, dtype="bool") /* ty=Tensor[(1, 54), bool] */;
  %660 = cast(%634, dtype="bool") /* ty=bool */;
  %661 = not_equal(%659, %660) /* ty=Tensor[(1, 54), bool] */;
  %662 = cast(%661, dtype="bool") /* ty=Tensor[(1, 54), bool] */;
  %663 = shape_of(meta[relay.Constant][52] /* ty=Tensor[(1, 54), uint16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %664 = cast(meta[relay.Constant][52] /* ty=Tensor[(1, 54), uint16] */, dtype="bool") /* ty=Tensor[(1, 54), bool] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %666 = cast(meta[relay.Constant][49] /* ty=Tensor[(1, 648), float64] */, dtype="float32") /* ty=Tensor[(1, 648), float32] */;
  %667 = cast(%634, dtype="int64") /* ty=int64 */;
  %668 = cast(meta[relay.Constant][54] /* ty=Tensor[(416, 4), int64] */, dtype="int64") /* ty=Tensor[(416, 4), int64] */;
  %669 = reshape(%667, newshape=[]) /* ty=int64 */;
  %670 = reshape(%668, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), int64] */;
  %671 = @func_2485(%669, %670) /* ty=(Tensor[(8, 13, 16), int64], Tensor[(462), float32], Tensor[(16, 15, 9), uint32]) */;
  %672 = cast(%634, dtype="int64") /* ty=int64 */;
  %673 = cast(%var_5718, dtype="int32") /* ty=Tensor[(150), int32] */;
  %674 = cast(%var_5719, dtype="float64") /* ty=Tensor[(1, 22), float64] */;
  %675 = reshape(%672, newshape=[]) /* ty=int64 */;
  %676 = reshape(%673, newshape=[75, 2]) /* ty=Tensor[(75, 2), int32] */;
  %677 = reshape(%674, newshape=[22]) /* ty=Tensor[(22), float64] */;
  %678 = @func_2596(%675, %676, %677) /* ty=(Tensor[(15, 15, 2), int64], Tensor[(5, 5, 6), float64], Tensor[(75, 2), int32], Tensor[(54), uint16], Tensor[(2, 11, 6), float64], Tensor[(22), float64]) */;
  %679 = cast(%var_5718, dtype="int32") /* ty=Tensor[(150), int32] */;
  %680 = cast(%var_5729, dtype="float64") /* ty=Tensor[(120), float64] */;
  %681 = reshape(%679, newshape=[25, 6]) /* ty=Tensor[(25, 6), int32] */;
  %682 = reshape(%680, newshape=[120]) /* ty=Tensor[(120), float64] */;
  %683 = @func_5560(%681, %682) /* ty=(Tensor[(16, 10, 5), float64], int64, Tensor[(22), float64], Tensor[(15, 15, 2), int64], Tensor[(16, 15, 9), float64], Tensor[(120), float64], Tensor[(16, 10, 5), float64], Tensor[(25, 6), float32], Tensor[(8, 13, 16), int64], Tensor[(1664), int64]) */;
  %684 = %644.4;
  %685 = %653.4;
  %686 = multiply(%657, %658) /* ty=Tensor[(7, 648), uint32] */;
  %687 = logical_and(%664, %665) /* ty=Tensor[(?, 54), bool] */;
  %688 = asinh(%666) /* ty=Tensor[(1, 648), float32] */;
  %689 = %671.1;
  %690 = %678.1;
  %691 = %683.8;
  (%684, meta[relay.Constant][48] /* ty=Tensor[(546), int32] */, meta[relay.Constant][50] /* ty=Tensor[(462), float32] */, meta[relay.Constant][51] /* ty=Tensor[(550), float64] */, %685, meta[relay.Constant][53] /* ty=Tensor[(48), float32] */, %686, %687, %688, %689, meta[relay.Constant][54] /* ty=Tensor[(416, 4), int64] */, %690, %var_5718, %var_5719, %691, %var_5729)
}

def @func_4336() -> Tensor[(16, 10, 5), float64] {
  %692 = @func_3507() /* ty=(Tensor[(16, 10, 5), float64],) */;
  %692.0
}

def @func_179(%var_151: Tensor[(3, 11, 14), float32]) -> (Tensor[(16, 15, 9), float64], Tensor[(20, 108), float64], Tensor[(3, 11, 14), float32]) {
  %693 = cast(meta[relay.Constant][55] /* ty=Tensor[(20, 108), float64] */, dtype="float64") /* ty=Tensor[(20, 108), float64] */;
  %694 = cast(meta[relay.Constant][55] /* ty=Tensor[(20, 108), float64] */, dtype="float64") /* ty=Tensor[(20, 108), float64] */;
  %695 = reshape(%693, newshape=[16, 15, 9]) /* ty=Tensor[(16, 15, 9), float64] */;
  %696 = reshape(%694, newshape=[16, 15, 9]) /* ty=Tensor[(16, 15, 9), float64] */;
  %697 = @func_32(%695, %696) /* ty=(Tensor[(16, 15, 9), float64],) */;
  %698 = cast(%var_151, dtype="float32") /* ty=Tensor[(3, 11, 14), float32] */;
  %699 = sqrt(%698) /* ty=Tensor[(3, 11, 14), float32] */;
  %700 = cast(%var_151, dtype="float32") /* ty=Tensor[(3, 11, 14), float32] */;
  %701 = shape_of(%699, dtype="int32") /* ty=Tensor[(3), int32] */;
  %702 = cast(%699, dtype="float32") /* ty=Tensor[(3, 11, 14), float32] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %704 = %697.0;
  %705 = divide(%702, %703) /* ty=Tensor[(3, 11, 14), float32] */;
  (%704, meta[relay.Constant][55] /* ty=Tensor[(20, 108), float64] */, %705)
}

def @func_32(%var_24: Tensor[(16, 15, 9), float64], %var_25: Tensor[(16, 15, 9), float64]) -> (Tensor[(16, 15, 9), float64],) {
  %706 = cast(%var_25, dtype="float64") /* ty=Tensor[(16, 15, 9), float64] */;
  %707 = shape_of(%var_24, dtype="int32") /* ty=Tensor[(3), int32] */;
  %708 = cast(%var_24, dtype="float64") /* ty=Tensor[(16, 15, 9), float64] */;
  %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %710 = floor_divide(%708, %709) /* ty=Tensor[(16, 15, 9), float64] */;
  (%710,)
}

def @func_2157(%var_2147: Tensor[(2, 11, 1), float64], %var_2148: Tensor[(2, 11, 6), float64]) -> (Tensor[(2, 11, 6), float64],) {
  %711 = cast(%var_2147, dtype="float64") /* ty=Tensor[(2, 11, 1), float64] */;
  %712 = cast(%var_2148, dtype="float64") /* ty=Tensor[(2, 11, 6), float64] */;
  %713 = mod(%711, %712) /* ty=Tensor[(2, 11, 6), float64] */;
  (%713,)
}

def @func_3507() -> (Tensor[(16, 10, 5), float64],) {
  %714 = @func_3335() /* ty=(Tensor[(16, 10, 5), float32],) */;
  %715 = %714.0;
  %716 = cast(%715, dtype="float64") /* ty=Tensor[(16, 10, 5), float64] */;
  %717 = acosh(%716) /* ty=Tensor[(16, 10, 5), float64] */;
  (%717,)
}

def @func_2007(%var_1938: Tensor[(4, 3, 4), float32], %var_2002: Tensor[(3, 11, 14), float32]) -> (Tensor[(4, 3, 4), float32], Tensor[(462), float32], Tensor[(1, 2160), float64], Tensor[(30, 4), float64], Tensor[(4, 3, 4), uint16], Tensor[(3, 11, 14), uint64]) {
  %718 = cast(%var_1938, dtype="float32") /* ty=Tensor[(4, 3, 4), float32] */;
  %719 = cast(meta[relay.Constant][57] /* ty=Tensor[(30, 4), float64] */, dtype="float64") /* ty=Tensor[(30, 4), float64] */;
  %720 = reshape(%719, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), float64] */;
  %721 = @func_750(%720) /* ty=(Tensor[(5, 4, 6), float32], Tensor[(16, 15, 9), float64], Tensor[(1, 2160), float64]) */;
  %722 = cast(meta[relay.Constant][58] /* ty=Tensor[(4, 3, 4), float32] */, dtype="float64") /* ty=Tensor[(4, 3, 4), float64] */;
  %723 = asin(%722) /* ty=Tensor[(4, 3, 4), float64] */;
  %724 = cast(meta[relay.Constant][58] /* ty=Tensor[(4, 3, 4), float32] */, dtype="float32") /* ty=Tensor[(4, 3, 4), float32] */;
  %725 = shape_of(%var_1938, dtype="int32") /* ty=Tensor[(3), int32] */;
  %726 = cast(%var_1938, dtype="float32") /* ty=Tensor[(4, 3, 4), float32] */;
  %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %728 = floor_divide(%726, %727) /* ty=Tensor[(4, 3, 4), float32] */;
  %729 = cast(%728, dtype="uint32") /* ty=Tensor[(4, 3, 4), uint32] */;
  %730 = shape_of(%723, dtype="int32") /* ty=Tensor[(3), int32] */;
  %731 = cast(%723, dtype="uint32") /* ty=Tensor[(4, 3, 4), uint32] */;
  %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %733 = maximum(%731, %732) /* ty=Tensor[(4, 3, 4), uint32] */;
  %734 = cast(%733, dtype="uint16") /* ty=Tensor[(4, 3, 4), uint16] */;
  %735 = shape_of(%723, dtype="int32") /* ty=Tensor[(3), int32] */;
  %736 = cast(%723, dtype="uint16") /* ty=Tensor[(4, 3, 4), uint16] */;
  %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %738 = cast(meta[relay.Constant][56] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
  %739 = reshape(%738, newshape=[3, 11, 14]) /* ty=Tensor[(3, 11, 14), float32] */;
  %740 = @func_179(%739) /* ty=(Tensor[(16, 15, 9), float64], Tensor[(20, 108), float64], Tensor[(3, 11, 14), float32]) */;
  %741 = %740.2;
  %742 = cast(%var_2002, dtype="uint64") /* ty=Tensor[(3, 11, 14), uint64] */;
  %743 = shape_of(%741, dtype="int32") /* ty=Tensor[(3), int32] */;
  %744 = cast(%741, dtype="uint64") /* ty=Tensor[(3, 11, 14), uint64] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %746 = atan(%718) /* ty=Tensor[(4, 3, 4), float32] */;
  %747 = %721.2;
  %748 = left_shift(%736, %737) /* ty=Tensor[(4, 3, 4), uint16] */;
  %749 = logical_xor(%744, %745) /* ty=Tensor[(3, 11, 14), uint64] */;
  (%746, meta[relay.Constant][56] /* ty=Tensor[(462), float32] */, %747, meta[relay.Constant][57] /* ty=Tensor[(30, 4), float64] */, %748, %749)
}

def @func_5224(%var_5205: Tensor[(648), float64]) -> (Tensor[(16, 10, 5), float64], Tensor[(6, 13, 7), int8], Tensor[(273, 2), int32], Tensor[(648), float64], Tensor[(462), float32], Tensor[(550), float64], int64, Tensor[(5, 5, 6), float64], Tensor[(150), int32], Tensor[(54), uint16], Tensor[(16, 10, 5), float64]) {
  %750 = @func_3507() /* ty=(Tensor[(16, 10, 5), float64],) */;
  %751 = cast(meta[relay.Constant][59] /* ty=Tensor[(273, 2), int32] */, dtype="int32") /* ty=Tensor[(273, 2), int32] */;
  %752 = cast(meta[relay.Constant][59] /* ty=Tensor[(273, 2), int32] */, dtype="int32") /* ty=Tensor[(273, 2), int32] */;
  %753 = cast(meta[relay.Constant][59] /* ty=Tensor[(273, 2), int32] */, dtype="int32") /* ty=Tensor[(273, 2), int32] */;
  %754 = cast(%var_5205, dtype="float64") /* ty=Tensor[(648), float64] */;
  %755 = cast(meta[relay.Constant][60] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
  %756 = cast(meta[relay.Constant][60] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
  %757 = cast(meta[relay.Constant][61] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
  %758 = cast(-9 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %759 = reshape(%751, newshape=[6, 13, 7]) /* ty=Tensor[(6, 13, 7), int32] */;
  %760 = reshape(%752, newshape=[6, 13, 7]) /* ty=Tensor[(6, 13, 7), int32] */;
  %761 = reshape(%753, newshape=[6, 13, 7]) /* ty=Tensor[(6, 13, 7), int32] */;
  %762 = reshape(%754, newshape=[1, 648]) /* ty=Tensor[(1, 648), float64] */;
  %763 = reshape(%755, newshape=[462]) /* ty=Tensor[(462), float32] */;
  %764 = reshape(%756, newshape=[462]) /* ty=Tensor[(462), float32] */;
  %765 = reshape(%757, newshape=[550]) /* ty=Tensor[(550), float64] */;
  %766 = reshape(%758, newshape=[]) /* ty=int64 */;
  %767 = @func_4052(%759, %760, %761, %762, %763, %764, %765, %766) /* ty=(Tensor[(6, 13, 7), int32], Tensor[(6, 13, 7), int8], Tensor[(1, 648), float64], Tensor[(54), float64], Tensor[(462), bool], Tensor[(150), int32], Tensor[(550), float64], int64, Tensor[(16, 10, 5), float64], Tensor[(20, 108), float64]) */;
  %768 = cast(-9 /* ty=int64 */, dtype="int32") /* ty=int32 */;
  %769 = cast(meta[relay.Constant][62] /* ty=Tensor[(150), int32] */, dtype="int32") /* ty=Tensor[(150), int32] */;
  %770 = cast(meta[relay.Constant][63] /* ty=Tensor[(54), uint16] */, dtype="uint16") /* ty=Tensor[(54), uint16] */;
  %771 = reshape(%768, newshape=[]) /* ty=int32 */;
  %772 = reshape(%769, newshape=[5, 5, 6]) /* ty=Tensor[(5, 5, 6), int32] */;
  %773 = reshape(%770, newshape=[54]) /* ty=Tensor[(54), uint16] */;
  %774 = @func_2059(%771, %772, %773) /* ty=(Tensor[(3, 3, 6), uint16], Tensor[(54), uint16], Tensor[(5, 5, 6), float64], Tensor[(3, 3, 6), uint16]) */;
  %775 = @func_3747() /* ty=(Tensor[(16, 10, 5), float64],) */;
  %776 = %750.0;
  %777 = %767.1;
  %778 = %774.2;
  %779 = %775.0;
  (%776, %777, meta[relay.Constant][59] /* ty=Tensor[(273, 2), int32] */, %var_5205, meta[relay.Constant][60] /* ty=Tensor[(462), float32] */, meta[relay.Constant][61] /* ty=Tensor[(550), float64] */, -9 /* ty=int64 */, %778, meta[relay.Constant][62] /* ty=Tensor[(150), int32] */, meta[relay.Constant][63] /* ty=Tensor[(54), uint16] */, %779)
}

def @func_5029() -> (Tensor[(16, 10, 5), float32], Tensor[(54), uint16], Tensor[(150), int32]) {
  %780 = @func_3773() /* ty=Tensor[(16, 10, 5), float32] */;
  %781 = cast(%780, dtype="float64") /* ty=Tensor[(16, 10, 5), float64] */;
  %782 = cast(meta[relay.Constant][64] /* ty=Tensor[(150), int32] */, dtype="int32") /* ty=Tensor[(150), int32] */;
  %783 = reshape(%781, newshape=[16, 10, 5]) /* ty=Tensor[(16, 10, 5), float64] */;
  %784 = reshape(%782, newshape=[150]) /* ty=Tensor[(150), int32] */;
  %785 = @func_3897(%783, %784) /* ty=(Tensor[(16, 10, 5), uint16], Tensor[(16, 10, 5), uint32], Tensor[(3, 3, 6), uint16], int32, Tensor[(150), int32], Tensor[(54), uint16], Tensor[(550), uint32], Tensor[(6, 10, 4), bool], Tensor[(240), int32], Tensor[(16, 10, 5), bool], Tensor[(16, 10, 5), float32]) */;
  %786 = %785.5;
  (%780, %786, meta[relay.Constant][64] /* ty=Tensor[(150), int32] */)
}

def @func_5490() -> (int32, Tensor[(6, 10, 4), bool], Tensor[(240), int32]) {
  %787 = @func_4376() /* ty=(Tensor[(16, 10, 5), float32], Tensor[(6, 10, 4), bool], Tensor[(24, 10), int32], Tensor[(5, 5, 6), float64], int32, Tensor[(150), int32], Tensor[(54), uint16]) */;
  %788 = cast(meta[relay.Constant][65] /* ty=Tensor[(240), int32] */, dtype="int32") /* ty=Tensor[(240), int32] */;
  %789 = reshape(%788, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), int32] */;
  %790 = %787.4;
  %791 = @func_1257(%789) /* ty=Tensor[(6, 10, 4), bool] */;
  (%790, %791, meta[relay.Constant][65] /* ty=Tensor[(240), int32] */)
}

def @func_3736(%var_3695: Tensor[(9, 8, 3), int32], %var_3696: Tensor[(9, 8, 3), int32]) -> (Tensor[(9, 8, 3), bool], Tensor[(9, 8, 3), float64], Tensor[(6, 10, 4), bool], Tensor[(240), int32]) {
  %792 = cast(%var_3696, dtype="bool") /* ty=Tensor[(9, 8, 3), bool] */;
  %793 = shape_of(%var_3695, dtype="int32") /* ty=Tensor[(3), int32] */;
  %794 = cast(%var_3695, dtype="bool") /* ty=Tensor[(9, 8, 3), bool] */;
  %795 = dyn.reshape(%792, %793, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %796 = cast(%var_3696, dtype="float64") /* ty=Tensor[(9, 8, 3), float64] */;
  %797 = cast(meta[relay.Constant][66] /* ty=Tensor[(240), int32] */, dtype="int32") /* ty=Tensor[(240), int32] */;
  %798 = reshape(%797, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), int32] */;
  %799 = less_equal(%794, %795) /* ty=Tensor[(9, 8, 3), bool] */;
  %800 = acos(%796) /* ty=Tensor[(9, 8, 3), float64] */;
  %801 = @func_1257(%798) /* ty=Tensor[(6, 10, 4), bool] */;
  (%799, %800, %801, meta[relay.Constant][66] /* ty=Tensor[(240), int32] */)
}

def @func_750(%var_709: Tensor[(5, 4, 6), float64]) -> (Tensor[(5, 4, 6), float32], Tensor[(16, 15, 9), float64], Tensor[(1, 2160), float64]) {
  %802 = cast(%var_709, dtype="float64") /* ty=Tensor[(5, 4, 6), float64] */;
  %803 = log10(%802) /* ty=Tensor[(5, 4, 6), float64] */;
  %804 = cast(%var_709, dtype="float64") /* ty=Tensor[(5, 4, 6), float64] */;
  %805 = exp(%804) /* ty=Tensor[(5, 4, 6), float64] */;
  %806 = cast(%805, dtype="float32") /* ty=Tensor[(5, 4, 6), float32] */;
  %807 = shape_of(%803, dtype="int32") /* ty=Tensor[(3), int32] */;
  %808 = cast(%803, dtype="float32") /* ty=Tensor[(5, 4, 6), float32] */;
  %809 = dyn.reshape(%806, %807, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %810 = cast(meta[relay.Constant][67] /* ty=Tensor[(1, 2160), float64] */, dtype="float64") /* ty=Tensor[(1, 2160), float64] */;
  %811 = cast(meta[relay.Constant][67] /* ty=Tensor[(1, 2160), float64] */, dtype="float64") /* ty=Tensor[(1, 2160), float64] */;
  %812 = reshape(%810, newshape=[16, 15, 9]) /* ty=Tensor[(16, 15, 9), float64] */;
  %813 = reshape(%811, newshape=[16, 15, 9]) /* ty=Tensor[(16, 15, 9), float64] */;
  %814 = @func_32(%812, %813) /* ty=(Tensor[(16, 15, 9), float64],) */;
  %815 = floor_divide(%808, %809) /* ty=Tensor[(5, 4, 6), float32] */;
  %816 = %814.0;
  (%815, %816, meta[relay.Constant][67] /* ty=Tensor[(1, 2160), float64] */)
}

def @func_4234() -> Tensor[(16, 10, 5), float32] {
  @func_3773() /* ty=Tensor[(16, 10, 5), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4543(%var_4541: Tensor[(1664), int64]) -> (Tensor[(16, 10, 5), float32], Tensor[(8, 13, 16), int64], int64, Tensor[(1664), int64]) {
  @func_4540(%var_4541) /* ty=(Tensor[(16, 10, 5), float32], Tensor[(8, 13, 16), int64], int64, Tensor[(1664), int64]) */
}

def @func_2601(%var_2598: int64, %var_2599: Tensor[(75, 2), int32], %var_2600: Tensor[(22), float64]) -> (Tensor[(15, 15, 2), int64], Tensor[(5, 5, 6), float64], Tensor[(75, 2), int32], Tensor[(54), uint16], Tensor[(2, 11, 6), float64], Tensor[(22), float64]) {
  @func_2596(%var_2598, %var_2599, %var_2600) /* ty=(Tensor[(15, 15, 2), int64], Tensor[(5, 5, 6), float64], Tensor[(75, 2), int32], Tensor[(54), uint16], Tensor[(2, 11, 6), float64], Tensor[(22), float64]) */
}

def @func_3967(%var_3950: Tensor[(54), uint16], %var_3951: Tensor[(648), float64], %var_3953: Tensor[(462), float32], %var_3962: Tensor[(240), int32]) -> (Tensor[(16, 10, 5), uint16], Tensor[(9, 6, 12), bool], Tensor[(54), uint16], Tensor[(648), float64], Tensor[(462), float32], Tensor[(240), float64]) {
  %0 = @func_3906() /* ty=Tensor[(16, 10, 5), float32] */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(16, 10, 5), float32] */, dtype="uint16") /* ty=Tensor[(16, 10, 5), uint16] */;
  %2 = shape_of(%0, dtype="int32") /* ty=Tensor[(3), int32] */;
  %3 = cast(%0, dtype="uint16") /* ty=Tensor[(16, 10, 5), uint16] */;
  %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %5 = cast(%var_3950, dtype="uint16") /* ty=Tensor[(54), uint16] */;
  %6 = cast(%var_3951, dtype="float64") /* ty=Tensor[(648), float64] */;
  %7 = cast(meta[relay.Constant][1] /* ty=Tensor[(240), int32] */, dtype="int32") /* ty=Tensor[(240), int32] */;
  %8 = cast(%var_3953, dtype="float32") /* ty=Tensor[(462), float32] */;
  %9 = reshape(%5, newshape=[54]) /* ty=Tensor[(54), uint16] */;
  %10 = reshape(%6, newshape=[9, 6, 12]) /* ty=Tensor[(9, 6, 12), float64] */;
  %11 = reshape(%7, newshape=[240]) /* ty=Tensor[(240), int32] */;
  %12 = reshape(%8, newshape=[462]) /* ty=Tensor[(462), float32] */;
  %13 = @func_2984(%9, %10, %11, %12) /* ty=(Tensor[(9, 6, 12), bool], Tensor[(3, 3, 6), uint16], Tensor[(54), uint16], Tensor[(9, 6, 12), bool], Tensor[(9, 6, 12), float64], Tensor[(6, 10, 4), bool], Tensor[(240), int32], Tensor[(20, 108), float64], Tensor[(462), float32], Tensor[(6, 10, 4), bool]) */;
  %14 = cast(%var_3962, dtype="float64") /* ty=Tensor[(240), float64] */;
  %15 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(240), int32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %16 = cast(meta[relay.Constant][1] /* ty=Tensor[(240), int32] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?), float64] */;
  %18 = logical_xor(%3, %4) /* ty=Tensor[(16, 10, 5), uint16] */;
  %19 = %13.0;
  %20 = mod(%16, %17) /* ty=Tensor[(240), float64] */;
  (%18, %19, %var_3950, %var_3951, %var_3953, %20)
}

def @func_4605() -> (Tensor[(5, 5, 6), float64],) {
  %23 = fn () -> (Tensor[(5, 5, 6), float64],) {
    %21 = @func_4376() /* ty=(Tensor[(16, 10, 5), float32], Tensor[(6, 10, 4), bool], Tensor[(24, 10), int32], Tensor[(5, 5, 6), float64], int32, Tensor[(150), int32], Tensor[(54), uint16]) */;
    %22 = %21.3;
    (%22,)
  };
  %23() /* ty=(Tensor[(5, 5, 6), float64],) */
}

def @func_2064(%var_2061: int32, %var_2062: Tensor[(5, 5, 6), int32], %var_2063: Tensor[(54), uint16]) -> (Tensor[(3, 3, 6), uint16], Tensor[(54), uint16], Tensor[(5, 5, 6), float64], Tensor[(3, 3, 6), uint16]) {
  @func_2059(%var_2061, %var_2062, %var_2063) /* ty=(Tensor[(3, 3, 6), uint16], Tensor[(54), uint16], Tensor[(5, 5, 6), float64], Tensor[(3, 3, 6), uint16]) */
}

def @func_4464() -> (Tensor[(16, 10, 5), float32], Tensor[(6, 10, 4), bool], Tensor[(216, 1), int32]) {
  %31 = fn () -> (Tensor[(16, 10, 5), float32], Tensor[(6, 10, 4), bool], Tensor[(216, 1), int32]) {
    %24 = cast(meta[relay.Constant][2] /* ty=Tensor[(216, 1), int32] */, dtype="int32") /* ty=Tensor[(216, 1), int32] */;
    %25 = cast(meta[relay.Constant][2] /* ty=Tensor[(216, 1), int32] */, dtype="int32") /* ty=Tensor[(216, 1), int32] */;
    %26 = reshape(%24, newshape=[9, 8, 3]) /* ty=Tensor[(9, 8, 3), int32] */;
    %27 = reshape(%25, newshape=[9, 8, 3]) /* ty=Tensor[(9, 8, 3), int32] */;
    %28 = @func_3736(%26, %27) /* ty=(Tensor[(9, 8, 3), bool], Tensor[(9, 8, 3), float64], Tensor[(6, 10, 4), bool], Tensor[(240), int32]) */;
    %29 = @func_3906() /* ty=Tensor[(16, 10, 5), float32] */;
    %30 = %28.2;
    (%29, %30, meta[relay.Constant][2] /* ty=Tensor[(216, 1), int32] */)
  };
  %31() /* ty=(Tensor[(16, 10, 5), float32], Tensor[(6, 10, 4), bool], Tensor[(216, 1), int32]) */
}

def @func_5862() -> Tensor[(16, 10, 5), float64] {
  %32 = fn () -> Tensor[(16, 10, 5), float64] {
    @func_5326() /* ty=Tensor[(16, 10, 5), float64] */
  };
  %32() /* ty=Tensor[(16, 10, 5), float64] */
}

def @func_5029() -> (Tensor[(16, 10, 5), float32], Tensor[(54), uint16], Tensor[(150), int32]) {
  %33 = @func_3773() /* ty=Tensor[(16, 10, 5), float32] */;
  %34 = cast(%33, dtype="float64") /* ty=Tensor[(16, 10, 5), float64] */;
  %35 = cast(meta[relay.Constant][3] /* ty=Tensor[(150), int32] */, dtype="int32") /* ty=Tensor[(150), int32] */;
  %36 = reshape(%34, newshape=[16, 10, 5]) /* ty=Tensor[(16, 10, 5), float64] */;
  %37 = reshape(%35, newshape=[150]) /* ty=Tensor[(150), int32] */;
  %38 = @func_3897(%36, %37) /* ty=(Tensor[(16, 10, 5), uint16], Tensor[(16, 10, 5), uint32], Tensor[(3, 3, 6), uint16], int32, Tensor[(150), int32], Tensor[(54), uint16], Tensor[(550), uint32], Tensor[(6, 10, 4), bool], Tensor[(240), int32], Tensor[(16, 10, 5), bool], Tensor[(16, 10, 5), float32]) */;
  %39 = %38.5;
  (%33, %39, meta[relay.Constant][3] /* ty=Tensor[(150), int32] */)
}

def @func_5118(%var_5116: Tensor[(1664), int64], %var_5117: Tensor[(150), int32]) -> (Tensor[(462), float32], int64, Tensor[(1664), int64], Tensor[(150), int32], Tensor[(150), int32], Tensor[(16, 10, 5), float32]) {
  @func_5114(%var_5116, %var_5117) /* ty=(Tensor[(462), float32], int64, Tensor[(1664), int64], Tensor[(150), int32], Tensor[(150), int32], Tensor[(16, 10, 5), float32]) */
}

def @main(%var_5897: Tensor[(6, 10, 4), float64], %var_5944: Tensor[(54), uint16], %var_5945: Tensor[(648), float64]) -> (Tensor[(16, 10, 5), float32], Tensor[(9, 6, 12), float64], Tensor[(54), uint16], Tensor[(648), float64], Tensor[(462), float32], Tensor[(16, 10, 5), float32], Tensor[(6, 10, 4), float64]) {
  %40 = @func_4734() /* ty=(Tensor[(16, 10, 5), float32],) */;
  %41 = cast(%var_5944, dtype="uint16") /* ty=Tensor[(54), uint16] */;
  %42 = cast(%var_5945, dtype="float64") /* ty=Tensor[(648), float64] */;
  %43 = @func_5490() /* ty=(int32, Tensor[(6, 10, 4), bool], Tensor[(240), int32]) */;
  %44 = %43.1;
  %45 = cast(%44, dtype="float32") /* ty=Tensor[(6, 10, 4), float32] */;
  %46 = asinh(%45) /* ty=Tensor[(6, 10, 4), float32] */;
  %47 = cast(%46, dtype="int32") /* ty=Tensor[(6, 10, 4), int32] */;
  %48 = cast(meta[relay.Constant][4] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
  %49 = reshape(%41, newshape=[54]) /* ty=Tensor[(54), uint16] */;
  %50 = reshape(%42, newshape=[9, 6, 12]) /* ty=Tensor[(9, 6, 12), float64] */;
  %51 = reshape(%47, newshape=[240]) /* ty=Tensor[(240), int32] */;
  %52 = reshape(%48, newshape=[462]) /* ty=Tensor[(462), float32] */;
  %53 = @func_2990(%49, %50, %51, %52) /* ty=(Tensor[(9, 6, 12), bool], Tensor[(3, 3, 6), uint16], Tensor[(54), uint16], Tensor[(9, 6, 12), bool], Tensor[(9, 6, 12), float64], Tensor[(6, 10, 4), bool], Tensor[(240), int32], Tensor[(20, 108), float64], Tensor[(462), float32], Tensor[(6, 10, 4), bool]) */;
  %54 = @func_5491() /* ty=(int32, Tensor[(6, 10, 4), bool], Tensor[(240), int32]) */;
  %55 = %54.1;
  %56 = cast(%55, dtype="float32") /* ty=Tensor[(6, 10, 4), float32] */;
  %57 = asinh(%56) /* ty=Tensor[(6, 10, 4), float32] */;
  %58 = cast(%57, dtype="float64") /* ty=Tensor[(6, 10, 4), float64] */;
  %59 = atan(%58) /* ty=Tensor[(6, 10, 4), float64] */;
  %60 = cast(%var_5897, dtype="int8") /* ty=Tensor[(6, 10, 4), int8] */;
  %61 = shape_of(%59, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(%59, dtype="int8") /* ty=Tensor[(6, 10, 4), int8] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %64 = maximum(%62, %63) /* ty=Tensor[(6, 10, 4), int8] */;
  %65 = cast(%64, dtype="float64") /* ty=Tensor[(6, 10, 4), float64] */;
  %66 = sqrt(%65) /* ty=Tensor[(6, 10, 4), float64] */;
  %67 = cast(%64, dtype="int8") /* ty=Tensor[(6, 10, 4), int8] */;
  %68 = shape_of(%66, dtype="int32") /* ty=Tensor[(3), int32] */;
  %69 = cast(%66, dtype="int8") /* ty=Tensor[(6, 10, 4), int8] */;
  %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %71 = left_shift(%69, %70) /* ty=Tensor[(6, 10, 4), int8] */;
  %72 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 10, 4), int8] */, dtype="float64") /* ty=Tensor[(6, 10, 4), float64] */;
  %73 = shape_of(%71, dtype="int32") /* ty=Tensor[(3), int32] */;
  %74 = cast(%71, dtype="float64") /* ty=Tensor[(6, 10, 4), float64] */;
  %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %76 = mod(%74, %75) /* ty=Tensor[(6, 10, 4), float64] */;
  %77 = cast(%76, dtype="float32") /* ty=Tensor[(6, 10, 4), float32] */;
  %78 = sinh(%77) /* ty=Tensor[(6, 10, 4), float32] */;
  %79 = cast(meta[relay.Constant][6] /* ty=Tensor[(6, 10, 4), bool] */, dtype="float64") /* ty=Tensor[(6, 10, 4), float64] */;
  %80 = shape_of(%55, dtype="int32") /* ty=Tensor[(3), int32] */;
  %81 = cast(%55, dtype="float64") /* ty=Tensor[(6, 10, 4), float64] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %83 = subtract(%81, %82) /* ty=Tensor[(6, 10, 4), float64] */;
  %84 = cast(%83, dtype="int16") /* ty=Tensor[(6, 10, 4), int16] */;
  %85 = shape_of(%78, dtype="int32") /* ty=Tensor[(3), int32] */;
  %86 = cast(%78, dtype="int16") /* ty=Tensor[(6, 10, 4), int16] */;
  %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %88 = multiply(%86, %87) /* ty=Tensor[(6, 10, 4), int16] */;
  %89 = cast(%88, dtype="uint16") /* ty=Tensor[(6, 10, 4), uint16] */;
  %90 = shape_of(%71, dtype="int32") /* ty=Tensor[(3), int32] */;
  %91 = cast(%71, dtype="uint16") /* ty=Tensor[(6, 10, 4), uint16] */;
  %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %93 = minimum(%91, %92) /* ty=Tensor[(6, 10, 4), uint16] */;
  %94 = cast(%66, dtype="float64") /* ty=Tensor[(6, 10, 4), float64] */;
  %95 = shape_of(%93, dtype="int32") /* ty=Tensor[(3), int32] */;
  %96 = cast(%93, dtype="float64") /* ty=Tensor[(6, 10, 4), float64] */;
  %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %98 = %40.0;
  %99 = %53.4;
  %100 = @func_3906() /* ty=Tensor[(16, 10, 5), float32] */;
  %101 = floor_divide(%96, %97) /* ty=Tensor[(6, 10, 4), float64] */;
  (%98, %99, %var_5944, %var_5945, meta[relay.Constant][4] /* ty=Tensor[(462), float32] */, %100, %101)
}

def @func_1257(%var_1247: Tensor[(6, 10, 4), int32]) -> Tensor[(6, 10, 4), bool] {
  %102 = cast(%var_1247, dtype="bool") /* ty=Tensor[(6, 10, 4), bool] */;
  %103 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(6, 10, 4), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %104 = cast(meta[relay.Constant][7] /* ty=Tensor[(6, 10, 4), int32] */, dtype="bool") /* ty=Tensor[(6, 10, 4), bool] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%104, %105) /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_4417() -> Tensor[(16, 10, 5), float32] {
  %106 = fn () -> Tensor[(16, 10, 5), float32] {
    @func_3906() /* ty=Tensor[(16, 10, 5), float32] */
  };
  %106() /* ty=Tensor[(16, 10, 5), float32] */
}

def @func_3551(%var_3548: Tensor[(5, 11, 10), float64], %var_3549: int64, %var_3550: Tensor[(5, 11, 10), float32]) -> (Tensor[(54), uint16], int64, Tensor[(150), int32], Tensor[(22), float64], Tensor[(5, 11, 10), float64]) {
  %130 = fn (%var_3511: Tensor[(5, 11, 10), float64], %var_3532: int64, %var_3537: Tensor[(5, 11, 10), float32]) -> (Tensor[(54), uint16], int64, Tensor[(150), int32], Tensor[(22), float64], Tensor[(5, 11, 10), float64]) {
    %107 = cast(%var_3532, dtype="int64") /* ty=int64 */;
    %108 = cast(meta[relay.Constant][8] /* ty=Tensor[(150), int32] */, dtype="int32") /* ty=Tensor[(150), int32] */;
    %109 = cast(meta[relay.Constant][9] /* ty=Tensor[(22), float64] */, dtype="float64") /* ty=Tensor[(22), float64] */;
    %110 = reshape(%107, newshape=[]) /* ty=int64 */;
    %111 = reshape(%108, newshape=[75, 2]) /* ty=Tensor[(75, 2), int32] */;
    %112 = reshape(%109, newshape=[22]) /* ty=Tensor[(22), float64] */;
    %113 = @func_2596(%110, %111, %112) /* ty=(Tensor[(15, 15, 2), int64], Tensor[(5, 5, 6), float64], Tensor[(75, 2), int32], Tensor[(54), uint16], Tensor[(2, 11, 6), float64], Tensor[(22), float64]) */;
    %114 = cast(meta[relay.Constant][10] /* ty=Tensor[(5, 11, 10), float64] */, dtype="float64") /* ty=Tensor[(5, 11, 10), float64] */;
    %115 = shape_of(%var_3511, dtype="int32") /* ty=Tensor[(3), int32] */;
    %116 = cast(%var_3511, dtype="float64") /* ty=Tensor[(5, 11, 10), float64] */;
    %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %118 = mod(%116, %117) /* ty=Tensor[(5, 11, 10), float64] */;
    %119 = cast(%118, dtype="float32") /* ty=Tensor[(5, 11, 10), float32] */;
    %120 = shape_of(%var_3511, dtype="int32") /* ty=Tensor[(3), int32] */;
    %121 = cast(%var_3511, dtype="float32") /* ty=Tensor[(5, 11, 10), float32] */;
    %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %123 = add(%121, %122) /* ty=Tensor[(5, 11, 10), float32] */;
    %124 = cast(%var_3537, dtype="float64") /* ty=Tensor[(5, 11, 10), float64] */;
    %125 = shape_of(%123, dtype="int32") /* ty=Tensor[(3), int32] */;
    %126 = cast(%123, dtype="float64") /* ty=Tensor[(5, 11, 10), float64] */;
    %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %128 = %113.3;
    %129 = power(%126, %127) /* ty=Tensor[(5, 11, 10), float64] */;
    (%128, %var_3532, meta[relay.Constant][8] /* ty=Tensor[(150), int32] */, meta[relay.Constant][9] /* ty=Tensor[(22), float64] */, %129)
  };
  %130(%var_3548, %var_3549, %var_3550) /* ty=(Tensor[(54), uint16], int64, Tensor[(150), int32], Tensor[(22), float64], Tensor[(5, 11, 10), float64]) */
}

def @func_3336() -> (Tensor[(16, 10, 5), float32],) {
  %133 = fn () -> (Tensor[(16, 10, 5), float32],) {
    %131 = cast(meta[relay.Constant][11] /* ty=Tensor[(16, 10, 5), float32] */, dtype="float32") /* ty=Tensor[(16, 10, 5), float32] */;
    %132 = acos(%131) /* ty=Tensor[(16, 10, 5), float32] */;
    (%132,)
  };
  %133() /* ty=(Tensor[(16, 10, 5), float32],) */
}

def @func_5592(%var_5578: Tensor[(90), int64], %var_5581: Tensor[(120), float64], %var_5582: Tensor[(17280), float64]) -> (Tensor[(16, 10, 5), float64], Tensor[(462), float32], Tensor[(90), int64], Tensor[(675, 2), int64], Tensor[(7, 66), float32], Tensor[(120), float64], Tensor[(17280), float64]) {
  %134 = cast(%var_5578, dtype="int64") /* ty=Tensor[(90), int64] */;
  %135 = cast(meta[relay.Constant][12] /* ty=Tensor[(675, 2), int64] */, dtype="int64") /* ty=Tensor[(675, 2), int64] */;
  %136 = cast(meta[relay.Constant][13] /* ty=Tensor[(7, 66), float32] */, dtype="float32") /* ty=Tensor[(7, 66), float32] */;
  %137 = cast(%var_5581, dtype="float64") /* ty=Tensor[(120), float64] */;
  %138 = cast(%var_5582, dtype="float64") /* ty=Tensor[(17280), float64] */;
  %139 = reshape(%134, newshape=[9, 10, 1]) /* ty=Tensor[(9, 10, 1), int64] */;
  %140 = reshape(%135, newshape=[9, 10, 15]) /* ty=Tensor[(9, 10, 15), int64] */;
  %141 = reshape(%136, newshape=[462]) /* ty=Tensor[(462), float32] */;
  %142 = reshape(%137, newshape=[120]) /* ty=Tensor[(120), float64] */;
  %143 = reshape(%138, newshape=[8, 2160]) /* ty=Tensor[(8, 2160), float64] */;
  %144 = @func_957(%139, %140, %141, %142, %143) /* ty=(Tensor[(9, 10, 15), int64], Tensor[(20, 108), float64], Tensor[(462), float32], Tensor[(120), float64], Tensor[(8, 2160), bool]) */;
  %145 = @func_4336() /* ty=Tensor[(16, 10, 5), float64] */;
  %146 = %144.2;
  (%145, %146, %var_5578, meta[relay.Constant][12] /* ty=Tensor[(675, 2), int64] */, meta[relay.Constant][13] /* ty=Tensor[(7, 66), float32] */, %var_5581, %var_5582)
}

def @func_3747() -> (Tensor[(16, 10, 5), float64],) {
  %147 = @func_3507() /* ty=(Tensor[(16, 10, 5), float64],) */;
  %148 = %147.0;
  (%148,)
}

def @func_4732() -> (Tensor[(16, 10, 5), float32],) {
  %149 = @func_4234() /* ty=Tensor[(16, 10, 5), float32] */;
  (%149,)
}

def @func_5226(%var_5225: Tensor[(648), float64]) -> (Tensor[(16, 10, 5), float64], Tensor[(6, 13, 7), int8], Tensor[(273, 2), int32], Tensor[(648), float64], Tensor[(462), float32], Tensor[(550), float64], int64, Tensor[(5, 5, 6), float64], Tensor[(150), int32], Tensor[(54), uint16], Tensor[(16, 10, 5), float64]) {
  %180 = fn (%var_5205: Tensor[(648), float64]) -> (Tensor[(16, 10, 5), float64], Tensor[(6, 13, 7), int8], Tensor[(273, 2), int32], Tensor[(648), float64], Tensor[(462), float32], Tensor[(550), float64], int64, Tensor[(5, 5, 6), float64], Tensor[(150), int32], Tensor[(54), uint16], Tensor[(16, 10, 5), float64]) {
    %150 = @func_3507() /* ty=(Tensor[(16, 10, 5), float64],) */;
    %151 = cast(meta[relay.Constant][14] /* ty=Tensor[(273, 2), int32] */, dtype="int32") /* ty=Tensor[(273, 2), int32] */;
    %152 = cast(meta[relay.Constant][14] /* ty=Tensor[(273, 2), int32] */, dtype="int32") /* ty=Tensor[(273, 2), int32] */;
    %153 = cast(meta[relay.Constant][14] /* ty=Tensor[(273, 2), int32] */, dtype="int32") /* ty=Tensor[(273, 2), int32] */;
    %154 = cast(%var_5205, dtype="float64") /* ty=Tensor[(648), float64] */;
    %155 = cast(meta[relay.Constant][15] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
    %156 = cast(meta[relay.Constant][15] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
    %157 = cast(meta[relay.Constant][16] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
    %158 = cast(-9 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %159 = reshape(%151, newshape=[6, 13, 7]) /* ty=Tensor[(6, 13, 7), int32] */;
    %160 = reshape(%152, newshape=[6, 13, 7]) /* ty=Tensor[(6, 13, 7), int32] */;
    %161 = reshape(%153, newshape=[6, 13, 7]) /* ty=Tensor[(6, 13, 7), int32] */;
    %162 = reshape(%154, newshape=[1, 648]) /* ty=Tensor[(1, 648), float64] */;
    %163 = reshape(%155, newshape=[462]) /* ty=Tensor[(462), float32] */;
    %164 = reshape(%156, newshape=[462]) /* ty=Tensor[(462), float32] */;
    %165 = reshape(%157, newshape=[550]) /* ty=Tensor[(550), float64] */;
    %166 = reshape(%158, newshape=[]) /* ty=int64 */;
    %167 = @func_4052(%159, %160, %161, %162, %163, %164, %165, %166) /* ty=(Tensor[(6, 13, 7), int32], Tensor[(6, 13, 7), int8], Tensor[(1, 648), float64], Tensor[(54), float64], Tensor[(462), bool], Tensor[(150), int32], Tensor[(550), float64], int64, Tensor[(16, 10, 5), float64], Tensor[(20, 108), float64]) */;
    %168 = cast(-9 /* ty=int64 */, dtype="int32") /* ty=int32 */;
    %169 = cast(meta[relay.Constant][17] /* ty=Tensor[(150), int32] */, dtype="int32") /* ty=Tensor[(150), int32] */;
    %170 = cast(meta[relay.Constant][18] /* ty=Tensor[(54), uint16] */, dtype="uint16") /* ty=Tensor[(54), uint16] */;
    %171 = reshape(%168, newshape=[]) /* ty=int32 */;
    %172 = reshape(%169, newshape=[5, 5, 6]) /* ty=Tensor[(5, 5, 6), int32] */;
    %173 = reshape(%170, newshape=[54]) /* ty=Tensor[(54), uint16] */;
    %174 = @func_2059(%171, %172, %173) /* ty=(Tensor[(3, 3, 6), uint16], Tensor[(54), uint16], Tensor[(5, 5, 6), float64], Tensor[(3, 3, 6), uint16]) */;
    %175 = @func_3747() /* ty=(Tensor[(16, 10, 5), float64],) */;
    %176 = %150.0;
    %177 = %167.1;
    %178 = %174.2;
    %179 = %175.0;
    (%176, %177, meta[relay.Constant][14] /* ty=Tensor[(273, 2), int32] */, %var_5205, meta[relay.Constant][15] /* ty=Tensor[(462), float32] */, meta[relay.Constant][16] /* ty=Tensor[(550), float64] */, -9 /* ty=int64 */, %178, meta[relay.Constant][17] /* ty=Tensor[(150), int32] */, meta[relay.Constant][18] /* ty=Tensor[(54), uint16] */, %179)
  };
  %180(%var_5225) /* ty=(Tensor[(16, 10, 5), float64], Tensor[(6, 13, 7), int8], Tensor[(273, 2), int32], Tensor[(648), float64], Tensor[(462), float32], Tensor[(550), float64], int64, Tensor[(5, 5, 6), float64], Tensor[(150), int32], Tensor[(54), uint16], Tensor[(16, 10, 5), float64]) */
}

def @func_5007(%var_5005: Tensor[(1350), int64], %var_5006: Tensor[(1, 462), float32]) -> (Tensor[(16, 10, 5), float32], Tensor[(20, 108), float64], Tensor[(45, 2), int64], Tensor[(1350), int64], Tensor[(1, 462), float32], Tensor[(120), float64], Tensor[(17280), float64]) {
  %195 = fn (%var_4977: Tensor[(1350), int64], %var_4978: Tensor[(1, 462), float32]) -> (Tensor[(16, 10, 5), float32], Tensor[(20, 108), float64], Tensor[(45, 2), int64], Tensor[(1350), int64], Tensor[(1, 462), float32], Tensor[(120), float64], Tensor[(17280), float64]) {
    %181 = @func_3335() /* ty=(Tensor[(16, 10, 5), float32],) */;
    %182 = cast(meta[relay.Constant][19] /* ty=Tensor[(45, 2), int64] */, dtype="int64") /* ty=Tensor[(45, 2), int64] */;
    %183 = cast(%var_4977, dtype="int64") /* ty=Tensor[(1350), int64] */;
    %184 = cast(%var_4978, dtype="float32") /* ty=Tensor[(1, 462), float32] */;
    %185 = cast(meta[relay.Constant][20] /* ty=Tensor[(120), float64] */, dtype="float64") /* ty=Tensor[(120), float64] */;
    %186 = cast(meta[relay.Constant][21] /* ty=Tensor[(17280), float64] */, dtype="float64") /* ty=Tensor[(17280), float64] */;
    %187 = reshape(%182, newshape=[9, 10, 1]) /* ty=Tensor[(9, 10, 1), int64] */;
    %188 = reshape(%183, newshape=[9, 10, 15]) /* ty=Tensor[(9, 10, 15), int64] */;
    %189 = reshape(%184, newshape=[462]) /* ty=Tensor[(462), float32] */;
    %190 = reshape(%185, newshape=[120]) /* ty=Tensor[(120), float64] */;
    %191 = reshape(%186, newshape=[8, 2160]) /* ty=Tensor[(8, 2160), float64] */;
    %192 = @func_957(%187, %188, %189, %190, %191) /* ty=(Tensor[(9, 10, 15), int64], Tensor[(20, 108), float64], Tensor[(462), float32], Tensor[(120), float64], Tensor[(8, 2160), bool]) */;
    %193 = %181.0;
    %194 = %192.1;
    (%193, %194, meta[relay.Constant][19] /* ty=Tensor[(45, 2), int64] */, %var_4977, %var_4978, meta[relay.Constant][20] /* ty=Tensor[(120), float64] */, meta[relay.Constant][21] /* ty=Tensor[(17280), float64] */)
  };
  %195(%var_5005, %var_5006) /* ty=(Tensor[(16, 10, 5), float32], Tensor[(20, 108), float64], Tensor[(45, 2), int64], Tensor[(1350), int64], Tensor[(1, 462), float32], Tensor[(120), float64], Tensor[(17280), float64]) */
}

def @func_5629(%var_5610: uint16, %var_5611: Tensor[(3, 4, 6), uint16]) -> (Tensor[(3, 4, 6), uint16], Tensor[(6, 10, 4), bool], Tensor[(3, 4, 6), float32], Tensor[(1, 2160), float64], Tensor[(30, 4), float64]) {
  %196 = cast(%var_5610, dtype="uint16") /* ty=uint16 */;
  %197 = cast(%var_5611, dtype="uint16") /* ty=Tensor[(3, 4, 6), uint16] */;
  %198 = @func_4463() /* ty=(Tensor[(16, 10, 5), float32], Tensor[(6, 10, 4), bool], Tensor[(216, 1), int32]) */;
  %199 = cast(%var_5611, dtype="float32") /* ty=Tensor[(3, 4, 6), float32] */;
  %200 = cast(meta[relay.Constant][22] /* ty=Tensor[(30, 4), float64] */, dtype="float64") /* ty=Tensor[(30, 4), float64] */;
  %201 = reshape(%200, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), float64] */;
  %202 = @func_750(%201) /* ty=(Tensor[(5, 4, 6), float32], Tensor[(16, 15, 9), float64], Tensor[(1, 2160), float64]) */;
  %203 = subtract(%196, %197) /* ty=Tensor[(3, 4, 6), uint16] */;
  %204 = %198.1;
  %205 = tan(%199) /* ty=Tensor[(3, 4, 6), float32] */;
  %206 = %202.2;
  (%203, %204, %205, %206, meta[relay.Constant][22] /* ty=Tensor[(30, 4), float64] */)
}

def @func_3690(%var_3689: int64) -> (Tensor[(16, 10, 5), float64], Tensor[(150), int32], Tensor[(550), float64], int64) {
  %217 = fn (%var_3684: int64) -> (Tensor[(16, 10, 5), float64], Tensor[(150), int32], Tensor[(550), float64], int64) {
    %207 = @func_3507() /* ty=(Tensor[(16, 10, 5), float64],) */;
    %208 = cast(meta[relay.Constant][23] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
    %209 = cast(%var_3684, dtype="int64") /* ty=int64 */;
    %210 = cast(meta[relay.Constant][23] /* ty=Tensor[(550), float64] */, dtype="float32") /* ty=Tensor[(550), float32] */;
    %211 = reshape(%208, newshape=[5, 11, 10]) /* ty=Tensor[(5, 11, 10), float64] */;
    %212 = reshape(%209, newshape=[]) /* ty=int64 */;
    %213 = reshape(%210, newshape=[5, 11, 10]) /* ty=Tensor[(5, 11, 10), float32] */;
    %214 = @func_3547(%211, %212, %213) /* ty=(Tensor[(54), uint16], int64, Tensor[(150), int32], Tensor[(22), float64], Tensor[(5, 11, 10), float64]) */;
    %215 = %207.0;
    %216 = %214.2;
    (%215, %216, meta[relay.Constant][23] /* ty=Tensor[(550), float64] */, %var_3684)
  };
  %217(%var_3689) /* ty=(Tensor[(16, 10, 5), float64], Tensor[(150), int32], Tensor[(550), float64], int64) */
}

def @func_5563(%var_5561: Tensor[(25, 6), int32], %var_5562: Tensor[(120), float64]) -> (Tensor[(16, 10, 5), float64], int64, Tensor[(22), float64], Tensor[(15, 15, 2), int64], Tensor[(16, 15, 9), float64], Tensor[(120), float64], Tensor[(16, 10, 5), float64], Tensor[(25, 6), float32], Tensor[(8, 13, 16), int64], Tensor[(1664), int64]) {
  %252 = fn (%var_5524: Tensor[(25, 6), int32], %var_5543: Tensor[(120), float64]) -> (Tensor[(16, 10, 5), float64], int64, Tensor[(22), float64], Tensor[(15, 15, 2), int64], Tensor[(16, 15, 9), float64], Tensor[(120), float64], Tensor[(16, 10, 5), float64], Tensor[(25, 6), float32], Tensor[(8, 13, 16), int64], Tensor[(1664), int64]) {
    %218 = cast(10 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %219 = cast(%var_5524, dtype="int32") /* ty=Tensor[(25, 6), int32] */;
    %220 = cast(meta[relay.Constant][24] /* ty=Tensor[(22), float64] */, dtype="float64") /* ty=Tensor[(22), float64] */;
    %221 = reshape(%218, newshape=[]) /* ty=int64 */;
    %222 = reshape(%219, newshape=[75, 2]) /* ty=Tensor[(75, 2), int32] */;
    %223 = reshape(%220, newshape=[22]) /* ty=Tensor[(22), float64] */;
    %224 = @func_2596(%221, %222, %223) /* ty=(Tensor[(15, 15, 2), int64], Tensor[(5, 5, 6), float64], Tensor[(75, 2), int32], Tensor[(54), uint16], Tensor[(2, 11, 6), float64], Tensor[(22), float64]) */;
    %225 = %224.0;
    %226 = cast(%225, dtype="float64") /* ty=Tensor[(15, 15, 2), float64] */;
    %227 = tan(%226) /* ty=Tensor[(15, 15, 2), float64] */;
    %228 = cast(%225, dtype="int64") /* ty=Tensor[(15, 15, 2), int64] */;
    %229 = shape_of(%227, dtype="int32") /* ty=Tensor[(3), int32] */;
    %230 = cast(%227, dtype="int64") /* ty=Tensor[(15, 15, 2), int64] */;
    %231 = dyn.reshape(%228, %229, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %232 = cast(%var_5543, dtype="float64") /* ty=Tensor[(120), float64] */;
    %233 = reshape(%232, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), float64] */;
    %234 = @func_750(%233) /* ty=(Tensor[(5, 4, 6), float32], Tensor[(16, 15, 9), float64], Tensor[(1, 2160), float64]) */;
    %235 = cast(%var_5524, dtype="float32") /* ty=Tensor[(25, 6), float32] */;
    %236 = acosh(%235) /* ty=Tensor[(25, 6), float32] */;
    %237 = cast(%236, dtype="int32") /* ty=Tensor[(25, 6), int32] */;
    %238 = reshape(%237, newshape=[150]) /* ty=Tensor[(150), int32] */;
    %239 = @func_4272(%238) /* ty=(Tensor[(16, 10, 5), float64], Tensor[(16, 10, 5), float32], Tensor[(150), int32]) */;
    %240 = cast(%236, dtype="float32") /* ty=Tensor[(25, 6), float32] */;
    %241 = cast(10 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %242 = cast(meta[relay.Constant][25] /* ty=Tensor[(1664), int64] */, dtype="int64") /* ty=Tensor[(1664), int64] */;
    %243 = reshape(%241, newshape=[]) /* ty=int64 */;
    %244 = reshape(%242, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), int64] */;
    %245 = @func_2485(%243, %244) /* ty=(Tensor[(8, 13, 16), int64], Tensor[(462), float32], Tensor[(16, 15, 9), uint32]) */;
    %246 = @func_5326() /* ty=Tensor[(16, 10, 5), float64] */;
    %247 = bitwise_or(%230, %231) /* ty=Tensor[(15, 15, 2), int64] */;
    %248 = %234.1;
    %249 = %239.0;
    %250 = log10(%240) /* ty=Tensor[(25, 6), float32] */;
    %251 = %245.0;
    (%246, 10 /* ty=int64 */, meta[relay.Constant][24] /* ty=Tensor[(22), float64] */, %247, %248, %var_5543, %249, %250, %251, meta[relay.Constant][25] /* ty=Tensor[(1664), int64] */)
  };
  %252(%var_5561, %var_5562) /* ty=(Tensor[(16, 10, 5), float64], int64, Tensor[(22), float64], Tensor[(15, 15, 2), int64], Tensor[(16, 15, 9), float64], Tensor[(120), float64], Tensor[(16, 10, 5), float64], Tensor[(25, 6), float32], Tensor[(8, 13, 16), int64], Tensor[(1664), int64]) */
}

def @func_4485(%var_4483: Tensor[(75, 2), int32]) -> (Tensor[(16, 10, 5), float32], Tensor[(550), uint32], Tensor[(75, 2), int32]) {
  @func_4482(%var_4483) /* ty=(Tensor[(16, 10, 5), float32], Tensor[(550), uint32], Tensor[(75, 2), int32]) */
}

def @func_964(%var_959: Tensor[(9, 10, 1), int64], %var_960: Tensor[(9, 10, 15), int64], %var_961: Tensor[(462), float32], %var_962: Tensor[(120), float64], %var_963: Tensor[(8, 2160), float64]) -> (Tensor[(9, 10, 15), int64], Tensor[(20, 108), float64], Tensor[(462), float32], Tensor[(120), float64], Tensor[(8, 2160), bool]) {
  @func_957(%var_959, %var_960, %var_961, %var_962, %var_963) /* ty=(Tensor[(9, 10, 15), int64], Tensor[(20, 108), float64], Tensor[(462), float32], Tensor[(120), float64], Tensor[(8, 2160), bool]) */
}

def @func_5597(%var_5594: Tensor[(90), int64], %var_5595: Tensor[(120), float64], %var_5596: Tensor[(17280), float64]) -> (Tensor[(16, 10, 5), float64], Tensor[(462), float32], Tensor[(90), int64], Tensor[(675, 2), int64], Tensor[(7, 66), float32], Tensor[(120), float64], Tensor[(17280), float64]) {
  @func_5592(%var_5594, %var_5595, %var_5596) /* ty=(Tensor[(16, 10, 5), float64], Tensor[(462), float32], Tensor[(90), int64], Tensor[(675, 2), int64], Tensor[(7, 66), float32], Tensor[(120), float64], Tensor[(17280), float64]) */
}

def @func_179(%var_151: Tensor[(3, 11, 14), float32]) -> (Tensor[(16, 15, 9), float64], Tensor[(20, 108), float64], Tensor[(3, 11, 14), float32]) {
  %253 = cast(meta[relay.Constant][26] /* ty=Tensor[(20, 108), float64] */, dtype="float64") /* ty=Tensor[(20, 108), float64] */;
  %254 = cast(meta[relay.Constant][26] /* ty=Tensor[(20, 108), float64] */, dtype="float64") /* ty=Tensor[(20, 108), float64] */;
  %255 = reshape(%253, newshape=[16, 15, 9]) /* ty=Tensor[(16, 15, 9), float64] */;
  %256 = reshape(%254, newshape=[16, 15, 9]) /* ty=Tensor[(16, 15, 9), float64] */;
  %257 = @func_32(%255, %256) /* ty=(Tensor[(16, 15, 9), float64],) */;
  %258 = cast(%var_151, dtype="float32") /* ty=Tensor[(3, 11, 14), float32] */;
  %259 = sqrt(%258) /* ty=Tensor[(3, 11, 14), float32] */;
  %260 = cast(%var_151, dtype="float32") /* ty=Tensor[(3, 11, 14), float32] */;
  %261 = shape_of(%259, dtype="int32") /* ty=Tensor[(3), int32] */;
  %262 = cast(%259, dtype="float32") /* ty=Tensor[(3, 11, 14), float32] */;
  %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %264 = %257.0;
  %265 = divide(%262, %263) /* ty=Tensor[(3, 11, 14), float32] */;
  (%264, meta[relay.Constant][26] /* ty=Tensor[(20, 108), float64] */, %265)
}

def @func_2485(%var_2462: int64, %var_2463: Tensor[(8, 13, 16), int64]) -> (Tensor[(8, 13, 16), int64], Tensor[(462), float32], Tensor[(16, 15, 9), uint32]) {
  %266 = cast(%var_2462, dtype="int64") /* ty=int64 */;
  %267 = cast(%var_2463, dtype="int64") /* ty=Tensor[(8, 13, 16), int64] */;
  %268 = cast(meta[relay.Constant][27] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
  %269 = reshape(%268, newshape=[3, 11, 14]) /* ty=Tensor[(3, 11, 14), float32] */;
  %270 = @func_179(%269) /* ty=(Tensor[(16, 15, 9), float64], Tensor[(20, 108), float64], Tensor[(3, 11, 14), float32]) */;
  %271 = %270.0;
  %272 = cast(%271, dtype="uint32") /* ty=Tensor[(16, 15, 9), uint32] */;
  %273 = cast(%var_2462, dtype="uint32") /* ty=uint32 */;
  %274 = bitwise_or(%266, %267) /* ty=Tensor[(8, 13, 16), int64] */;
  %275 = right_shift(%272, %273) /* ty=Tensor[(16, 15, 9), uint32] */;
  (%274, meta[relay.Constant][27] /* ty=Tensor[(462), float32] */, %275)
}

def @func_2157(%var_2147: Tensor[(2, 11, 1), float64], %var_2148: Tensor[(2, 11, 6), float64]) -> (Tensor[(2, 11, 6), float64],) {
  %276 = cast(%var_2147, dtype="float64") /* ty=Tensor[(2, 11, 1), float64] */;
  %277 = cast(%var_2148, dtype="float64") /* ty=Tensor[(2, 11, 6), float64] */;
  %278 = mod(%276, %277) /* ty=Tensor[(2, 11, 6), float64] */;
  (%278,)
}

def @func_2845(%var_2799: Tensor[(5, 15, 9), uint32], %var_2835: Tensor[(5, 15, 9), uint32]) -> (Tensor[(5, 15, 9), uint32], Tensor[(5, 15, 9), int64], Tensor[(16, 15, 9), float64], Tensor[(2160), float64]) {
  %279 = cast(%var_2799, dtype="uint32") /* ty=Tensor[(5, 15, 9), uint32] */;
  %280 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(5, 15, 9), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %281 = cast(meta[relay.Constant][28] /* ty=Tensor[(5, 15, 9), uint32] */, dtype="uint32") /* ty=Tensor[(5, 15, 9), uint32] */;
  %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %283 = cast(%var_2835, dtype="int64") /* ty=Tensor[(5, 15, 9), int64] */;
  %284 = shape_of(%var_2799, dtype="int32") /* ty=Tensor[(3), int32] */;
  %285 = cast(%var_2799, dtype="int64") /* ty=Tensor[(5, 15, 9), int64] */;
  %286 = dyn.reshape(%283, %284, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %287 = cast(meta[relay.Constant][29] /* ty=Tensor[(2160), float64] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %288 = cast(meta[relay.Constant][29] /* ty=Tensor[(2160), float64] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %289 = reshape(%287, newshape=[16, 15, 9]) /* ty=Tensor[(16, 15, 9), float64] */;
  %290 = reshape(%288, newshape=[16, 15, 9]) /* ty=Tensor[(16, 15, 9), float64] */;
  %291 = @func_32(%289, %290) /* ty=(Tensor[(16, 15, 9), float64],) */;
  %292 = multiply(%281, %282) /* ty=Tensor[(5, 15, 9), uint32] */;
  %293 = right_shift(%285, %286) /* ty=Tensor[(5, 15, 9), int64] */;
  %294 = %291.0;
  (%292, %293, %294, meta[relay.Constant][29] /* ty=Tensor[(2160), float64] */)
}

def @func_1883(%var_1881: Tensor[(3, 3, 6), uint16], %var_1882: Tensor[(3, 3, 6), uint16]) -> Tensor[(3, 3, 6), uint16] {
  @func_1879(%var_1881, %var_1882) /* ty=Tensor[(3, 3, 6), uint16] */
}

def @func_5114(%var_5069: Tensor[(1664), int64], %var_5093: Tensor[(150), int32]) -> (Tensor[(462), float32], int64, Tensor[(1664), int64], Tensor[(150), int32], Tensor[(150), int32], Tensor[(16, 10, 5), float32]) {
  %295 = cast(3 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %296 = cast(%var_5069, dtype="int64") /* ty=Tensor[(1664), int64] */;
  %297 = reshape(%295, newshape=[]) /* ty=int64 */;
  %298 = reshape(%296, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), int64] */;
  %299 = @func_2485(%297, %298) /* ty=(Tensor[(8, 13, 16), int64], Tensor[(462), float32], Tensor[(16, 15, 9), uint32]) */;
  %300 = cast(%var_5093, dtype="int32") /* ty=Tensor[(150), int32] */;
  %301 = reshape(%300, newshape=[150]) /* ty=Tensor[(150), int32] */;
  %302 = @func_4272(%301) /* ty=(Tensor[(16, 10, 5), float64], Tensor[(16, 10, 5), float32], Tensor[(150), int32]) */;
  %303 = @func_3507() /* ty=(Tensor[(16, 10, 5), float64],) */;
  %304 = %303.0;
  %305 = cast(%304, dtype="float64") /* ty=Tensor[(16, 10, 5), float64] */;
  %306 = sinh(%305) /* ty=Tensor[(16, 10, 5), float64] */;
  %307 = cast(%306, dtype="float32") /* ty=Tensor[(16, 10, 5), float32] */;
  %308 = %299.1;
  %309 = %302.2;
  %310 = cos(%307) /* ty=Tensor[(16, 10, 5), float32] */;
  (%308, 3 /* ty=int64 */, %var_5069, %309, %var_5093, %310)
}

def @func_787(%var_782: int16, %var_783: Tensor[(2, 8, 1), int16]) -> Tensor[(2, 8, 1), int16] {
  %311 = cast(%var_782, dtype="int16") /* ty=int16 */;
  %312 = cast(%var_783, dtype="int16") /* ty=Tensor[(2, 8, 1), int16] */;
  bitwise_or(%311, %312) /* ty=Tensor[(2, 8, 1), int16] */
}

def @func_753(%var_751: Tensor[(5, 4, 6), float64]) -> (Tensor[(5, 4, 6), float32], Tensor[(16, 15, 9), float64], Tensor[(1, 2160), float64]) {
  @func_750(%var_751) /* ty=(Tensor[(5, 4, 6), float32], Tensor[(16, 15, 9), float64], Tensor[(1, 2160), float64]) */
}

def @func_3901(%var_3899: Tensor[(16, 10, 5), float64], %var_3900: Tensor[(150), int32]) -> (Tensor[(16, 10, 5), uint16], Tensor[(16, 10, 5), uint32], Tensor[(3, 3, 6), uint16], int32, Tensor[(150), int32], Tensor[(54), uint16], Tensor[(550), uint32], Tensor[(6, 10, 4), bool], Tensor[(240), int32], Tensor[(16, 10, 5), bool], Tensor[(16, 10, 5), float32]) {
  @func_3897(%var_3899, %var_3900) /* ty=(Tensor[(16, 10, 5), uint16], Tensor[(16, 10, 5), uint32], Tensor[(3, 3, 6), uint16], int32, Tensor[(150), int32], Tensor[(54), uint16], Tensor[(550), uint32], Tensor[(6, 10, 4), bool], Tensor[(240), int32], Tensor[(16, 10, 5), bool], Tensor[(16, 10, 5), float32]) */
}

def @func_2849(%var_2847: Tensor[(5, 15, 9), uint32], %var_2848: Tensor[(5, 15, 9), uint32]) -> (Tensor[(5, 15, 9), uint32], Tensor[(5, 15, 9), int64], Tensor[(16, 15, 9), float64], Tensor[(2160), float64]) {
  @func_2845(%var_2847, %var_2848) /* ty=(Tensor[(5, 15, 9), uint32], Tensor[(5, 15, 9), int64], Tensor[(16, 15, 9), float64], Tensor[(2160), float64]) */
}

def @func_2255(%var_2229: Tensor[(22), float64]) -> (Tensor[(?, 12, 6), bool], Tensor[(2, 11, 6), float64], Tensor[(22), float64], Tensor[(132), float64], Tensor[(?, 12, 6), float32]) {
  %313 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 12, 6), float32] */, dtype="float32") /* ty=Tensor[(1, 12, 6), float32] */;
  %314 = cos(%313) /* ty=Tensor[(1, 12, 6), float32] */;
  %315 = cast(%314, dtype="bool") /* ty=Tensor[(1, 12, 6), bool] */;
  %316 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(1, 12, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %317 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 12, 6), float32] */, dtype="bool") /* ty=Tensor[(1, 12, 6), bool] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %319 = cast(%var_2229, dtype="float64") /* ty=Tensor[(22), float64] */;
  %320 = cast(meta[relay.Constant][31] /* ty=Tensor[(132), float64] */, dtype="float64") /* ty=Tensor[(132), float64] */;
  %321 = reshape(%319, newshape=[2, 11, 1]) /* ty=Tensor[(2, 11, 1), float64] */;
  %322 = reshape(%320, newshape=[2, 11, 6]) /* ty=Tensor[(2, 11, 6), float64] */;
  %323 = @func_2157(%321, %322) /* ty=(Tensor[(2, 11, 6), float64],) */;
  %324 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 12, 6), float32] */, dtype="uint16") /* ty=Tensor[(1, 12, 6), uint16] */;
  %325 = shape_of(%314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %326 = cast(%314, dtype="uint16") /* ty=Tensor[(1, 12, 6), uint16] */;
  %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %328 = subtract(%326, %327) /* ty=Tensor[(?, 12, 6), uint16] */;
  %329 = cast(%328, dtype="float64") /* ty=Tensor[(?, 12, 6), float64] */;
  %330 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(1, 12, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %331 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 12, 6), float32] */, dtype="float64") /* ty=Tensor[(1, 12, 6), float64] */;
  %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %333 = mod(%331, %332) /* ty=Tensor[(?, 12, 6), float64] */;
  %334 = cast(%333, dtype="float32") /* ty=Tensor[(?, 12, 6), float32] */;
  %335 = shape_of(%314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(%314, dtype="float32") /* ty=Tensor[(1, 12, 6), float32] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %338 = less_equal(%317, %318) /* ty=Tensor[(?, 12, 6), bool] */;
  %339 = %323.0;
  %340 = floor_divide(%336, %337) /* ty=Tensor[(?, 12, 6), float32] */;
  (%338, %339, %var_2229, meta[relay.Constant][31] /* ty=Tensor[(132), float64] */, %340)
}

def @func_2059(%var_2017: int32, %var_2018: Tensor[(5, 5, 6), int32], %var_2044: Tensor[(54), uint16]) -> (Tensor[(3, 3, 6), uint16], Tensor[(54), uint16], Tensor[(5, 5, 6), float64], Tensor[(3, 3, 6), uint16]) {
  %341 = cast(%var_2044, dtype="uint16") /* ty=Tensor[(54), uint16] */;
  %342 = cast(%var_2044, dtype="uint16") /* ty=Tensor[(54), uint16] */;
  %343 = reshape(%341, newshape=[3, 3, 6]) /* ty=Tensor[(3, 3, 6), uint16] */;
  %344 = reshape(%342, newshape=[3, 3, 6]) /* ty=Tensor[(3, 3, 6), uint16] */;
  %345 = cast(%var_2017, dtype="bool") /* ty=bool */;
  %346 = cast(%var_2018, dtype="bool") /* ty=Tensor[(5, 5, 6), bool] */;
  %347 = greater(%345, %346) /* ty=Tensor[(5, 5, 6), bool] */;
  %348 = cast(%347, dtype="float64") /* ty=Tensor[(5, 5, 6), float64] */;
  %349 = shape_of(%var_2018, dtype="int32") /* ty=Tensor[(3), int32] */;
  %350 = cast(%var_2018, dtype="float64") /* ty=Tensor[(5, 5, 6), float64] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %352 = power(%350, %351) /* ty=Tensor[(5, 5, 6), float64] */;
  %353 = cast(%352, dtype="float64") /* ty=Tensor[(5, 5, 6), float64] */;
  %354 = acosh(%353) /* ty=Tensor[(5, 5, 6), float64] */;
  %355 = cast(%354, dtype="float64") /* ty=Tensor[(5, 5, 6), float64] */;
  %356 = cast(%var_2044, dtype="uint16") /* ty=Tensor[(54), uint16] */;
  %357 = cast(%var_2044, dtype="uint16") /* ty=Tensor[(54), uint16] */;
  %358 = reshape(%356, newshape=[3, 3, 6]) /* ty=Tensor[(3, 3, 6), uint16] */;
  %359 = reshape(%357, newshape=[3, 3, 6]) /* ty=Tensor[(3, 3, 6), uint16] */;
  %360 = @func_1879(%343, %344) /* ty=Tensor[(3, 3, 6), uint16] */;
  %361 = sin(%355) /* ty=Tensor[(5, 5, 6), float64] */;
  %362 = @func_1879(%358, %359) /* ty=Tensor[(3, 3, 6), uint16] */;
  (%360, %var_2044, %361, %362)
}

def @func_4734() -> (Tensor[(16, 10, 5), float32],) {
  @func_4732() /* ty=(Tensor[(16, 10, 5), float32],) */
}

def @func_4124() -> Tensor[(16, 10, 5), float64] {
  %364 = fn () -> Tensor[(16, 10, 5), float64] {
    %363 = @func_3747() /* ty=(Tensor[(16, 10, 5), float64],) */;
    %363.0
  };
  %364() /* ty=Tensor[(16, 10, 5), float64] */
}

def @func_4234() -> Tensor[(16, 10, 5), float32] {
  @func_3773() /* ty=Tensor[(16, 10, 5), float32] */
}

def @func_4274(%var_4273: Tensor[(150), int32]) -> (Tensor[(16, 10, 5), float64], Tensor[(16, 10, 5), float32], Tensor[(150), int32]) {
  %373 = fn (%var_4257: Tensor[(150), int32]) -> (Tensor[(16, 10, 5), float64], Tensor[(16, 10, 5), float32], Tensor[(150), int32]) {
    %365 = @func_3507() /* ty=(Tensor[(16, 10, 5), float64],) */;
    %366 = %365.0;
    %367 = cast(%366, dtype="float64") /* ty=Tensor[(16, 10, 5), float64] */;
    %368 = cast(%var_4257, dtype="int32") /* ty=Tensor[(150), int32] */;
    %369 = reshape(%367, newshape=[16, 10, 5]) /* ty=Tensor[(16, 10, 5), float64] */;
    %370 = reshape(%368, newshape=[150]) /* ty=Tensor[(150), int32] */;
    %371 = @func_3897(%369, %370) /* ty=(Tensor[(16, 10, 5), uint16], Tensor[(16, 10, 5), uint32], Tensor[(3, 3, 6), uint16], int32, Tensor[(150), int32], Tensor[(54), uint16], Tensor[(550), uint32], Tensor[(6, 10, 4), bool], Tensor[(240), int32], Tensor[(16, 10, 5), bool], Tensor[(16, 10, 5), float32]) */;
    %372 = %371.10;
    (%366, %372, %var_4257)
  };
  %373(%var_4273) /* ty=(Tensor[(16, 10, 5), float64], Tensor[(16, 10, 5), float32], Tensor[(150), int32]) */
}

def @func_1879(%var_1874: Tensor[(3, 3, 6), uint16], %var_1875: Tensor[(3, 3, 6), uint16]) -> Tensor[(3, 3, 6), uint16] {
  %374 = cast(%var_1875, dtype="uint16") /* ty=Tensor[(3, 3, 6), uint16] */;
  %375 = shape_of(%var_1874, dtype="int32") /* ty=Tensor[(3), int32] */;
  %376 = cast(%var_1874, dtype="uint16") /* ty=Tensor[(3, 3, 6), uint16] */;
  %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_and(%376, %377) /* ty=Tensor[(3, 3, 6), uint16] */
}

def @func_35(%var_33: Tensor[(16, 15, 9), float64], %var_34: Tensor[(16, 15, 9), float64]) -> (Tensor[(16, 15, 9), float64],) {
  %383 = fn (%var_24: Tensor[(16, 15, 9), float64], %var_25: Tensor[(16, 15, 9), float64]) -> (Tensor[(16, 15, 9), float64],) {
    %378 = cast(%var_25, dtype="float64") /* ty=Tensor[(16, 15, 9), float64] */;
    %379 = shape_of(%var_24, dtype="int32") /* ty=Tensor[(3), int32] */;
    %380 = cast(%var_24, dtype="float64") /* ty=Tensor[(16, 15, 9), float64] */;
    %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %382 = floor_divide(%380, %381) /* ty=Tensor[(16, 15, 9), float64] */;
    (%382,)
  };
  %383(%var_33, %var_34) /* ty=(Tensor[(16, 15, 9), float64],) */
}

def @func_791(%var_789: int16, %var_790: Tensor[(2, 8, 1), int16]) -> Tensor[(2, 8, 1), int16] {
  @func_787(%var_789, %var_790) /* ty=Tensor[(2, 8, 1), int16] */
}

def @func_4769() -> Tensor[(16, 10, 5), float32] {
  %384 = fn () -> Tensor[(16, 10, 5), float32] {
    @func_3773() /* ty=Tensor[(16, 10, 5), float32] */
  };
  %384() /* ty=Tensor[(16, 10, 5), float32] */
}

def @func_2596(%var_2577: int64, %var_2587: Tensor[(75, 2), int32], %var_2594: Tensor[(22), float64]) -> (Tensor[(15, 15, 2), int64], Tensor[(5, 5, 6), float64], Tensor[(75, 2), int32], Tensor[(54), uint16], Tensor[(2, 11, 6), float64], Tensor[(22), float64]) {
  %385 = cast(%var_2577, dtype="int64") /* ty=int64 */;
  %386 = cast(meta[relay.Constant][32] /* ty=Tensor[(15, 15, 2), int64] */, dtype="int64") /* ty=Tensor[(15, 15, 2), int64] */;
  %387 = cast(%var_2577, dtype="int32") /* ty=int32 */;
  %388 = cast(%var_2587, dtype="int32") /* ty=Tensor[(75, 2), int32] */;
  %389 = cast(meta[relay.Constant][33] /* ty=Tensor[(54), uint16] */, dtype="uint16") /* ty=Tensor[(54), uint16] */;
  %390 = reshape(%387, newshape=[]) /* ty=int32 */;
  %391 = reshape(%388, newshape=[5, 5, 6]) /* ty=Tensor[(5, 5, 6), int32] */;
  %392 = reshape(%389, newshape=[54]) /* ty=Tensor[(54), uint16] */;
  %393 = @func_2059(%390, %391, %392) /* ty=(Tensor[(3, 3, 6), uint16], Tensor[(54), uint16], Tensor[(5, 5, 6), float64], Tensor[(3, 3, 6), uint16]) */;
  %394 = cast(%var_2594, dtype="float64") /* ty=Tensor[(22), float64] */;
  %395 = reshape(%394, newshape=[22]) /* ty=Tensor[(22), float64] */;
  %396 = @func_2255(%395) /* ty=(Tensor[(?, 12, 6), bool], Tensor[(2, 11, 6), float64], Tensor[(22), float64], Tensor[(132), float64], Tensor[(?, 12, 6), float32]) */;
  %397 = logical_xor(%385, %386) /* ty=Tensor[(15, 15, 2), int64] */;
  %398 = %393.2;
  %399 = %396.1;
  (%397, %398, %var_2587, meta[relay.Constant][33] /* ty=Tensor[(54), uint16] */, %399, %var_2594)
}

def @func_2258(%var_2256: Tensor[(22), float64]) -> (Tensor[(?, 12, 6), bool], Tensor[(2, 11, 6), float64], Tensor[(22), float64], Tensor[(132), float64], Tensor[(?, 12, 6), float32]) {
  @func_2255(%var_2256) /* ty=(Tensor[(?, 12, 6), bool], Tensor[(2, 11, 6), float64], Tensor[(22), float64], Tensor[(132), float64], Tensor[(?, 12, 6), float32]) */
}

def @func_4913(%var_4912: Tensor[(14, 12, 5), float32]) -> (Tensor[(14, 12, 5), float32], Tensor[(16, 10, 5), float32], Tensor[(14, 12, 1), float32], Tensor[(16, 10, 5), float32]) {
  %408 = fn (%var_4855: Tensor[(14, 12, 5), float32]) -> (Tensor[(14, 12, 5), float32], Tensor[(16, 10, 5), float32], Tensor[(14, 12, 1), float32], Tensor[(16, 10, 5), float32]) {
    %400 = cast(meta[relay.Constant][34] /* ty=Tensor[(14, 12, 1), float32] */, dtype="float32") /* ty=Tensor[(14, 12, 1), float32] */;
    %401 = cast(%var_4855, dtype="float32") /* ty=Tensor[(14, 12, 5), float32] */;
    %402 = cast(meta[relay.Constant][34] /* ty=Tensor[(14, 12, 1), float32] */, dtype="float32") /* ty=Tensor[(14, 12, 1), float32] */;
    %403 = @func_4732() /* ty=(Tensor[(16, 10, 5), float32],) */;
    %404 = power(%400, %401) /* ty=Tensor[(14, 12, 5), float32] */;
    %405 = @func_3773() /* ty=Tensor[(16, 10, 5), float32] */;
    %406 = atan(%402) /* ty=Tensor[(14, 12, 1), float32] */;
    %407 = %403.0;
    (%404, %405, %406, %407)
  };
  %408(%var_4912) /* ty=(Tensor[(14, 12, 5), float32], Tensor[(16, 10, 5), float32], Tensor[(14, 12, 1), float32], Tensor[(16, 10, 5), float32]) */
}

def @func_5031() -> (Tensor[(16, 10, 5), float32], Tensor[(54), uint16], Tensor[(150), int32]) {
  @func_5029() /* ty=(Tensor[(16, 10, 5), float32], Tensor[(54), uint16], Tensor[(150), int32]) */
}

def @func_4378() -> (Tensor[(16, 10, 5), float32], Tensor[(6, 10, 4), bool], Tensor[(24, 10), int32], Tensor[(5, 5, 6), float64], int32, Tensor[(150), int32], Tensor[(54), uint16]) {
  @func_4376() /* ty=(Tensor[(16, 10, 5), float32], Tensor[(6, 10, 4), bool], Tensor[(24, 10), int32], Tensor[(5, 5, 6), float64], int32, Tensor[(150), int32], Tensor[(54), uint16]) */
}

def @func_4947() -> (Tensor[(16, 10, 5), float64],) {
  %412 = fn () -> (Tensor[(16, 10, 5), float64],) {
    %409 = @func_4768() /* ty=Tensor[(16, 10, 5), float32] */;
    %410 = cast(%409, dtype="float64") /* ty=Tensor[(16, 10, 5), float64] */;
    %411 = tan(%410) /* ty=Tensor[(16, 10, 5), float64] */;
    (%411,)
  };
  %412() /* ty=(Tensor[(16, 10, 5), float64],) */
}

def @func_5326() -> Tensor[(16, 10, 5), float64] {
  %413 = @func_3747() /* ty=(Tensor[(16, 10, 5), float64],) */;
  %413.0
}

def @func_5504() -> Tensor[(16, 10, 5), float32] {
  %415 = fn () -> Tensor[(16, 10, 5), float32] {
    %414 = @func_4732() /* ty=(Tensor[(16, 10, 5), float32],) */;
    %414.0
  };
  %415() /* ty=Tensor[(16, 10, 5), float32] */
}

def @func_182(%var_180: Tensor[(3, 11, 14), float32]) -> (Tensor[(16, 15, 9), float64], Tensor[(20, 108), float64], Tensor[(3, 11, 14), float32]) {
  @func_179(%var_180) /* ty=(Tensor[(16, 15, 9), float64], Tensor[(20, 108), float64], Tensor[(3, 11, 14), float32]) */
}

def @func_3442(%var_3439: Tensor[(54), uint16], %var_3440: Tensor[(648), float64], %var_3441: Tensor[(462), float32]) -> (Tensor[(54), uint16], Tensor[(54), uint16], Tensor[(462), float32], Tensor[(16, 10, 5), uint8], Tensor[(3, 3, 6), uint16], Tensor[(240, 648), float64], Tensor[(2, 11, 6), float64], Tensor[(22), float64], Tensor[(132), float64], Tensor[(132), float64]) {
  %468 = fn (%var_3383: Tensor[(54), uint16], %var_3384: Tensor[(648), float64], %var_3386: Tensor[(462), float32]) -> (Tensor[(54), uint16], Tensor[(54), uint16], Tensor[(462), float32], Tensor[(16, 10, 5), uint8], Tensor[(3, 3, 6), uint16], Tensor[(240, 648), float64], Tensor[(2, 11, 6), float64], Tensor[(22), float64], Tensor[(132), float64], Tensor[(132), float64]) {
    %416 = cast(%var_3383, dtype="uint16") /* ty=Tensor[(54), uint16] */;
    %417 = cast(%var_3384, dtype="float64") /* ty=Tensor[(648), float64] */;
    %418 = cast(meta[relay.Constant][35] /* ty=Tensor[(240, 1), int32] */, dtype="int32") /* ty=Tensor[(240, 1), int32] */;
    %419 = cast(%var_3386, dtype="float32") /* ty=Tensor[(462), float32] */;
    %420 = reshape(%416, newshape=[54]) /* ty=Tensor[(54), uint16] */;
    %421 = reshape(%417, newshape=[9, 6, 12]) /* ty=Tensor[(9, 6, 12), float64] */;
    %422 = reshape(%418, newshape=[240]) /* ty=Tensor[(240), int32] */;
    %423 = reshape(%419, newshape=[462]) /* ty=Tensor[(462), float32] */;
    %424 = @func_2984(%420, %421, %422, %423) /* ty=(Tensor[(9, 6, 12), bool], Tensor[(3, 3, 6), uint16], Tensor[(54), uint16], Tensor[(9, 6, 12), bool], Tensor[(9, 6, 12), float64], Tensor[(6, 10, 4), bool], Tensor[(240), int32], Tensor[(20, 108), float64], Tensor[(462), float32], Tensor[(6, 10, 4), bool]) */;
    %425 = @func_3335() /* ty=(Tensor[(16, 10, 5), float32],) */;
    %426 = %425.0;
    %427 = cast(meta[relay.Constant][36] /* ty=Tensor[(16, 10, 5), float32] */, dtype="float32") /* ty=Tensor[(16, 10, 5), float32] */;
    %428 = shape_of(%426, dtype="int32") /* ty=Tensor[(3), int32] */;
    %429 = cast(%426, dtype="float32") /* ty=Tensor[(16, 10, 5), float32] */;
    %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %431 = divide(%429, %430) /* ty=Tensor[(16, 10, 5), float32] */;
    %432 = cast(%426, dtype="uint8") /* ty=Tensor[(16, 10, 5), uint8] */;
    %433 = shape_of(%431, dtype="int32") /* ty=Tensor[(3), int32] */;
    %434 = cast(%431, dtype="uint8") /* ty=Tensor[(16, 10, 5), uint8] */;
    %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %436 = add(%434, %435) /* ty=Tensor[(16, 10, 5), uint8] */;
    %437 = cast(meta[relay.Constant][36] /* ty=Tensor[(16, 10, 5), float32] */, dtype="uint8") /* ty=Tensor[(16, 10, 5), uint8] */;
    %438 = shape_of(%436, dtype="int32") /* ty=Tensor[(3), int32] */;
    %439 = cast(%436, dtype="uint8") /* ty=Tensor[(16, 10, 5), uint8] */;
    %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %441 = %424.2;
    %442 = cast(%441, dtype="uint16") /* ty=Tensor[(54), uint16] */;
    %443 = cast(%441, dtype="uint16") /* ty=Tensor[(54), uint16] */;
    %444 = reshape(%442, newshape=[3, 3, 6]) /* ty=Tensor[(3, 3, 6), uint16] */;
    %445 = reshape(%443, newshape=[3, 3, 6]) /* ty=Tensor[(3, 3, 6), uint16] */;
    %446 = cast(%var_3384, dtype="uint8") /* ty=Tensor[(648), uint8] */;
    %447 = cast(meta[relay.Constant][35] /* ty=Tensor[(240, 1), int32] */, dtype="uint8") /* ty=Tensor[(240, 1), uint8] */;
    %448 = logical_xor(%446, %447) /* ty=Tensor[(240, 648), uint8] */;
    %449 = cast(%448, dtype="float32") /* ty=Tensor[(240, 648), float32] */;
    %450 = acos(%449) /* ty=Tensor[(240, 648), float32] */;
    %451 = cast(meta[relay.Constant][37] /* ty=Tensor[(240, 648), float32] */, dtype="float64") /* ty=Tensor[(240, 648), float64] */;
    %452 = shape_of(%450, dtype="int32") /* ty=Tensor[(2), int32] */;
    %453 = cast(%450, dtype="float64") /* ty=Tensor[(240, 648), float64] */;
    %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %455 = cast(meta[relay.Constant][38] /* ty=Tensor[(22), float64] */, dtype="float64") /* ty=Tensor[(22), float64] */;
    %456 = cast(meta[relay.Constant][39] /* ty=Tensor[(132), float64] */, dtype="float64") /* ty=Tensor[(132), float64] */;
    %457 = reshape(%455, newshape=[2, 11, 1]) /* ty=Tensor[(2, 11, 1), float64] */;
    %458 = reshape(%456, newshape=[2, 11, 6]) /* ty=Tensor[(2, 11, 6), float64] */;
    %459 = @func_2157(%457, %458) /* ty=(Tensor[(2, 11, 6), float64],) */;
    %460 = cast(meta[relay.Constant][38] /* ty=Tensor[(22), float64] */, dtype="float64") /* ty=Tensor[(22), float64] */;
    %461 = reshape(%460, newshape=[22]) /* ty=Tensor[(22), float64] */;
    %462 = @func_2255(%461) /* ty=(Tensor[(?, 12, 6), bool], Tensor[(2, 11, 6), float64], Tensor[(22), float64], Tensor[(132), float64], Tensor[(?, 12, 6), float32]) */;
    %463 = multiply(%439, %440) /* ty=Tensor[(16, 10, 5), uint8] */;
    %464 = @func_1879(%444, %445) /* ty=Tensor[(3, 3, 6), uint16] */;
    %465 = floor_mod(%453, %454) /* ty=Tensor[(240, 648), float64] */;
    %466 = %459.0;
    %467 = %462.3;
    (%441, %var_3383, %var_3386, %463, %464, %465, %466, meta[relay.Constant][38] /* ty=Tensor[(22), float64] */, meta[relay.Constant][39] /* ty=Tensor[(132), float64] */, %467)
  };
  %468(%var_3439, %var_3440, %var_3441) /* ty=(Tensor[(54), uint16], Tensor[(54), uint16], Tensor[(462), float32], Tensor[(16, 10, 5), uint8], Tensor[(3, 3, 6), uint16], Tensor[(240, 648), float64], Tensor[(2, 11, 6), float64], Tensor[(22), float64], Tensor[(132), float64], Tensor[(132), float64]) */
}

def @func_4482(%var_4477: Tensor[(75, 2), int32]) -> (Tensor[(16, 10, 5), float32], Tensor[(550), uint32], Tensor[(75, 2), int32]) {
  %469 = @func_3773() /* ty=Tensor[(16, 10, 5), float32] */;
  %470 = cast(%469, dtype="float64") /* ty=Tensor[(16, 10, 5), float64] */;
  %471 = cast(%var_4477, dtype="int32") /* ty=Tensor[(75, 2), int32] */;
  %472 = reshape(%470, newshape=[16, 10, 5]) /* ty=Tensor[(16, 10, 5), float64] */;
  %473 = reshape(%471, newshape=[150]) /* ty=Tensor[(150), int32] */;
  %474 = @func_3897(%472, %473) /* ty=(Tensor[(16, 10, 5), uint16], Tensor[(16, 10, 5), uint32], Tensor[(3, 3, 6), uint16], int32, Tensor[(150), int32], Tensor[(54), uint16], Tensor[(550), uint32], Tensor[(6, 10, 4), bool], Tensor[(240), int32], Tensor[(16, 10, 5), bool], Tensor[(16, 10, 5), float32]) */;
  %475 = %474.6;
  (%469, %475, %var_4477)
}

def @func_5444(%var_5442: Tensor[(7, 12, 10), float64], %var_5443: Tensor[(462), float32]) -> (Tensor[(7, 12, 10), float64], Tensor[(7, 12, 10), float64], Tensor[(1350), int64], Tensor[(1350, 1), int64], Tensor[(462), float32]) {
  %491 = fn (%var_5414: Tensor[(7, 12, 10), float64], %var_5436: Tensor[(462), float32]) -> (Tensor[(7, 12, 10), float64], Tensor[(7, 12, 10), float64], Tensor[(1350), int64], Tensor[(1350, 1), int64], Tensor[(462), float32]) {
    %476 = cast(%var_5414, dtype="float64") /* ty=Tensor[(7, 12, 10), float64] */;
    %477 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(7, 12, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %478 = cast(meta[relay.Constant][40] /* ty=Tensor[(7, 12, 10), float64] */, dtype="float64") /* ty=Tensor[(7, 12, 10), float64] */;
    %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %480 = cast(meta[relay.Constant][40] /* ty=Tensor[(7, 12, 10), float64] */, dtype="float64") /* ty=Tensor[(7, 12, 10), float64] */;
    %481 = sqrt(%480) /* ty=Tensor[(7, 12, 10), float64] */;
    %482 = cast(%481, dtype="float64") /* ty=Tensor[(7, 12, 10), float64] */;
    %483 = cast(meta[relay.Constant][41] /* ty=Tensor[(1350, 1), int64] */, dtype="int64") /* ty=Tensor[(1350, 1), int64] */;
    %484 = cast(%var_5436, dtype="float32") /* ty=Tensor[(462), float32] */;
    %485 = reshape(%483, newshape=[1350]) /* ty=Tensor[(1350), int64] */;
    %486 = reshape(%484, newshape=[1, 462]) /* ty=Tensor[(1, 462), float32] */;
    %487 = @func_5004(%485, %486) /* ty=(Tensor[(16, 10, 5), float32], Tensor[(20, 108), float64], Tensor[(45, 2), int64], Tensor[(1350), int64], Tensor[(1, 462), float32], Tensor[(120), float64], Tensor[(17280), float64]) */;
    %488 = floor_divide(%478, %479) /* ty=Tensor[(7, 12, 10), float64] */;
    %489 = cosh(%482) /* ty=Tensor[(7, 12, 10), float64] */;
    %490 = %487.3;
    (%488, %489, %490, meta[relay.Constant][41] /* ty=Tensor[(1350, 1), int64] */, %var_5436)
  };
  %491(%var_5442, %var_5443) /* ty=(Tensor[(7, 12, 10), float64], Tensor[(7, 12, 10), float64], Tensor[(1350), int64], Tensor[(1350, 1), int64], Tensor[(462), float32]) */
}

def @func_3908() -> Tensor[(16, 10, 5), float32] {
  @func_3906() /* ty=Tensor[(16, 10, 5), float32] */
}

def @func_5733(%var_5678: Tensor[(7, 648), int16], %var_5718: Tensor[(150), int32], %var_5719: Tensor[(1, 22), float64], %var_5729: Tensor[(120), float64]) -> (Tensor[(462), bool], Tensor[(546), int32], Tensor[(462), float32], Tensor[(550), float64], Tensor[(462), float32], Tensor[(48), float32], Tensor[(7, 648), uint32], Tensor[(?, 54), bool], Tensor[(1, 648), float32], Tensor[(462), float32], Tensor[(416, 4), int64], Tensor[(5, 5, 6), float64], Tensor[(150), int32], Tensor[(1, 22), float64], Tensor[(8, 13, 16), int64], Tensor[(120), float64]) {
  %492 = cast(meta[relay.Constant][42] /* ty=Tensor[(546), int32] */, dtype="int32") /* ty=Tensor[(546), int32] */;
  %493 = cast(meta[relay.Constant][42] /* ty=Tensor[(546), int32] */, dtype="int32") /* ty=Tensor[(546), int32] */;
  %494 = cast(meta[relay.Constant][42] /* ty=Tensor[(546), int32] */, dtype="int32") /* ty=Tensor[(546), int32] */;
  %495 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 648), float64] */, dtype="float64") /* ty=Tensor[(1, 648), float64] */;
  %496 = cast(meta[relay.Constant][44] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
  %497 = cast(meta[relay.Constant][44] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
  %498 = cast(meta[relay.Constant][45] /* ty=Tensor[(550), float64] */, dtype="float64") /* ty=Tensor[(550), float64] */;
  %499 = @func_4376() /* ty=(Tensor[(16, 10, 5), float32], Tensor[(6, 10, 4), bool], Tensor[(24, 10), int32], Tensor[(5, 5, 6), float64], int32, Tensor[(150), int32], Tensor[(54), uint16]) */;
  %500 = %499.4;
  %501 = cast(%500, dtype="int64") /* ty=int64 */;
  %502 = reshape(%492, newshape=[6, 13, 7]) /* ty=Tensor[(6, 13, 7), int32] */;
  %503 = reshape(%493, newshape=[6, 13, 7]) /* ty=Tensor[(6, 13, 7), int32] */;
  %504 = reshape(%494, newshape=[6, 13, 7]) /* ty=Tensor[(6, 13, 7), int32] */;
  %505 = reshape(%495, newshape=[1, 648]) /* ty=Tensor[(1, 648), float64] */;
  %506 = reshape(%496, newshape=[462]) /* ty=Tensor[(462), float32] */;
  %507 = reshape(%497, newshape=[462]) /* ty=Tensor[(462), float32] */;
  %508 = reshape(%498, newshape=[550]) /* ty=Tensor[(550), float64] */;
  %509 = reshape(%501, newshape=[]) /* ty=int64 */;
  %510 = @func_4052(%502, %503, %504, %505, %506, %507, %508, %509) /* ty=(Tensor[(6, 13, 7), int32], Tensor[(6, 13, 7), int8], Tensor[(1, 648), float64], Tensor[(54), float64], Tensor[(462), bool], Tensor[(150), int32], Tensor[(550), float64], int64, Tensor[(16, 10, 5), float64], Tensor[(20, 108), float64]) */;
  %511 = cast(%500, dtype="int64") /* ty=int64 */;
  %512 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 54), uint16] */, dtype="uint16") /* ty=Tensor[(1, 54), uint16] */;
  %513 = cast(meta[relay.Constant][47] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %514 = cast(meta[relay.Constant][44] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
  %515 = reshape(%511, newshape=[]) /* ty=int64 */;
  %516 = reshape(%512, newshape=[54]) /* ty=Tensor[(54), uint16] */;
  %517 = reshape(%513, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %518 = reshape(%514, newshape=[462]) /* ty=Tensor[(462), float32] */;
  %519 = @func_5180(%515, %516, %517, %518) /* ty=(Tensor[(3, 3, 6), uint16], Tensor[(54), uint16], Tensor[(30, 4), float64], Tensor[(48), float32], Tensor[(462), float32], Tensor[(9, 6, 13), float64]) */;
  %520 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 648), float64] */, dtype="int16") /* ty=Tensor[(1, 648), int16] */;
  %521 = cast(%500, dtype="int16") /* ty=int16 */;
  %522 = left_shift(%520, %521) /* ty=Tensor[(1, 648), int16] */;
  %523 = cast(%522, dtype="uint32") /* ty=Tensor[(1, 648), uint32] */;
  %524 = cast(%var_5678, dtype="uint32") /* ty=Tensor[(7, 648), uint32] */;
  %525 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 54), uint16] */, dtype="bool") /* ty=Tensor[(1, 54), bool] */;
  %526 = cast(%500, dtype="bool") /* ty=bool */;
  %527 = not_equal(%525, %526) /* ty=Tensor[(1, 54), bool] */;
  %528 = cast(%527, dtype="bool") /* ty=Tensor[(1, 54), bool] */;
  %529 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(1, 54), uint16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %530 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 54), uint16] */, dtype="bool") /* ty=Tensor[(1, 54), bool] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %532 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 648), float64] */, dtype="float32") /* ty=Tensor[(1, 648), float32] */;
  %533 = cast(%500, dtype="int64") /* ty=int64 */;
  %534 = cast(meta[relay.Constant][48] /* ty=Tensor[(416, 4), int64] */, dtype="int64") /* ty=Tensor[(416, 4), int64] */;
  %535 = reshape(%533, newshape=[]) /* ty=int64 */;
  %536 = reshape(%534, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), int64] */;
  %537 = @func_2485(%535, %536) /* ty=(Tensor[(8, 13, 16), int64], Tensor[(462), float32], Tensor[(16, 15, 9), uint32]) */;
  %538 = cast(%500, dtype="int64") /* ty=int64 */;
  %539 = cast(%var_5718, dtype="int32") /* ty=Tensor[(150), int32] */;
  %540 = cast(%var_5719, dtype="float64") /* ty=Tensor[(1, 22), float64] */;
  %541 = reshape(%538, newshape=[]) /* ty=int64 */;
  %542 = reshape(%539, newshape=[75, 2]) /* ty=Tensor[(75, 2), int32] */;
  %543 = reshape(%540, newshape=[22]) /* ty=Tensor[(22), float64] */;
  %544 = @func_2596(%541, %542, %543) /* ty=(Tensor[(15, 15, 2), int64], Tensor[(5, 5, 6), float64], Tensor[(75, 2), int32], Tensor[(54), uint16], Tensor[(2, 11, 6), float64], Tensor[(22), float64]) */;
  %545 = cast(%var_5718, dtype="int32") /* ty=Tensor[(150), int32] */;
  %546 = cast(%var_5729, dtype="float64") /* ty=Tensor[(120), float64] */;
  %547 = reshape(%545, newshape=[25, 6]) /* ty=Tensor[(25, 6), int32] */;
  %548 = reshape(%546, newshape=[120]) /* ty=Tensor[(120), float64] */;
  %549 = @func_5560(%547, %548) /* ty=(Tensor[(16, 10, 5), float64], int64, Tensor[(22), float64], Tensor[(15, 15, 2), int64], Tensor[(16, 15, 9), float64], Tensor[(120), float64], Tensor[(16, 10, 5), float64], Tensor[(25, 6), float32], Tensor[(8, 13, 16), int64], Tensor[(1664), int64]) */;
  %550 = %510.4;
  %551 = %519.4;
  %552 = multiply(%523, %524) /* ty=Tensor[(7, 648), uint32] */;
  %553 = logical_and(%530, %531) /* ty=Tensor[(?, 54), bool] */;
  %554 = asinh(%532) /* ty=Tensor[(1, 648), float32] */;
  %555 = %537.1;
  %556 = %544.1;
  %557 = %549.8;
  (%550, meta[relay.Constant][42] /* ty=Tensor[(546), int32] */, meta[relay.Constant][44] /* ty=Tensor[(462), float32] */, meta[relay.Constant][45] /* ty=Tensor[(550), float64] */, %551, meta[relay.Constant][47] /* ty=Tensor[(48), float32] */, %552, %553, %554, %555, meta[relay.Constant][48] /* ty=Tensor[(416, 4), int64] */, %556, %var_5718, %var_5719, %557, %var_5729)
}

def @func_4597(%var_4593: Tensor[(16, 10, 5), float64], %var_4594: Tensor[(16, 10, 5), uint32], %var_4595: Tensor[(16, 10, 5), float64], %var_4596: bool) -> (Tensor[(16, 10, 5), bool], Tensor[(1, 5, 9), float32], bool, Tensor[(45), bool]) {
  @func_4591(%var_4593, %var_4594, %var_4595, %var_4596) /* ty=(Tensor[(16, 10, 5), bool], Tensor[(1, 5, 9), float32], bool, Tensor[(45), bool]) */
}

def @func_2990(%var_2986: Tensor[(54), uint16], %var_2987: Tensor[(9, 6, 12), float64], %var_2988: Tensor[(240), int32], %var_2989: Tensor[(462), float32]) -> (Tensor[(9, 6, 12), bool], Tensor[(3, 3, 6), uint16], Tensor[(54), uint16], Tensor[(9, 6, 12), bool], Tensor[(9, 6, 12), float64], Tensor[(6, 10, 4), bool], Tensor[(240), int32], Tensor[(20, 108), float64], Tensor[(462), float32], Tensor[(6, 10, 4), bool]) {
  @func_2984(%var_2986, %var_2987, %var_2988, %var_2989) /* ty=(Tensor[(9, 6, 12), bool], Tensor[(3, 3, 6), uint16], Tensor[(54), uint16], Tensor[(9, 6, 12), bool], Tensor[(9, 6, 12), float64], Tensor[(6, 10, 4), bool], Tensor[(240), int32], Tensor[(20, 108), float64], Tensor[(462), float32], Tensor[(6, 10, 4), bool]) */
}

def @func_750(%var_709: Tensor[(5, 4, 6), float64]) -> (Tensor[(5, 4, 6), float32], Tensor[(16, 15, 9), float64], Tensor[(1, 2160), float64]) {
  %558 = cast(%var_709, dtype="float64") /* ty=Tensor[(5, 4, 6), float64] */;
  %559 = log10(%558) /* ty=Tensor[(5, 4, 6), float64] */;
  %560 = cast(%var_709, dtype="float64") /* ty=Tensor[(5, 4, 6), float64] */;
  %561 = exp(%560) /* ty=Tensor[(5, 4, 6), float64] */;
  %562 = cast(%561, dtype="float32") /* ty=Tensor[(5, 4, 6), float32] */;
  %563 = shape_of(%559, dtype="int32") /* ty=Tensor[(3), int32] */;
  %564 = cast(%559, dtype="float32") /* ty=Tensor[(5, 4, 6), float32] */;
  %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %566 = cast(meta[relay.Constant][49] /* ty=Tensor[(1, 2160), float64] */, dtype="float64") /* ty=Tensor[(1, 2160), float64] */;
  %567 = cast(meta[relay.Constant][49] /* ty=Tensor[(1, 2160), float64] */, dtype="float64") /* ty=Tensor[(1, 2160), float64] */;
  %568 = reshape(%566, newshape=[16, 15, 9]) /* ty=Tensor[(16, 15, 9), float64] */;
  %569 = reshape(%567, newshape=[16, 15, 9]) /* ty=Tensor[(16, 15, 9), float64] */;
  %570 = @func_32(%568, %569) /* ty=(Tensor[(16, 15, 9), float64],) */;
  %571 = floor_divide(%564, %565) /* ty=Tensor[(5, 4, 6), float32] */;
  %572 = %570.0;
  (%571, %572, meta[relay.Constant][49] /* ty=Tensor[(1, 2160), float64] */)
}

def @func_3897(%var_3782: Tensor[(16, 10, 5), float64], %var_3808: Tensor[(150), int32]) -> (Tensor[(16, 10, 5), uint16], Tensor[(16, 10, 5), uint32], Tensor[(3, 3, 6), uint16], int32, Tensor[(150), int32], Tensor[(54), uint16], Tensor[(550), uint32], Tensor[(6, 10, 4), bool], Tensor[(240), int32], Tensor[(16, 10, 5), bool], Tensor[(16, 10, 5), float32]) {
  %573 = @func_3507() /* ty=(Tensor[(16, 10, 5), float64],) */;
  %574 = %573.0;
  %575 = cast(%var_3782, dtype="uint16") /* ty=Tensor[(16, 10, 5), uint16] */;
  %576 = shape_of(%574, dtype="int32") /* ty=Tensor[(3), int32] */;
  %577 = cast(%574, dtype="uint16") /* ty=Tensor[(16, 10, 5), uint16] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %579 = cast(%574, dtype="uint32") /* ty=Tensor[(16, 10, 5), uint32] */;
  %580 = shape_of(%var_3782, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(%var_3782, dtype="uint32") /* ty=Tensor[(16, 10, 5), uint32] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %583 = cast(-6 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %584 = cast(%var_3808, dtype="int32") /* ty=Tensor[(150), int32] */;
  %585 = cast(meta[relay.Constant][50] /* ty=Tensor[(54), uint16] */, dtype="uint16") /* ty=Tensor[(54), uint16] */;
  %586 = reshape(%583, newshape=[]) /* ty=int32 */;
  %587 = reshape(%584, newshape=[5, 5, 6]) /* ty=Tensor[(5, 5, 6), int32] */;
  %588 = reshape(%585, newshape=[54]) /* ty=Tensor[(54), uint16] */;
  %589 = @func_2059(%586, %587, %588) /* ty=(Tensor[(3, 3, 6), uint16], Tensor[(54), uint16], Tensor[(5, 5, 6), float64], Tensor[(3, 3, 6), uint16]) */;
  %590 = cast(-6 /* ty=int32 */, dtype="int64") /* ty=int64 */;
  %591 = reshape(%590, newshape=[]) /* ty=int64 */;
  %592 = @func_3688(%591) /* ty=(Tensor[(16, 10, 5), float64], Tensor[(150), int32], Tensor[(550), float64], int64) */;
  %593 = %592.2;
  %594 = cast(meta[relay.Constant][51] /* ty=Tensor[(550), float64] */, dtype="uint32") /* ty=Tensor[(550), uint32] */;
  %595 = shape_of(%593, dtype="int32") /* ty=Tensor[(1), int32] */;
  %596 = cast(%593, dtype="uint32") /* ty=Tensor[(550), uint32] */;
  %597 = dyn.reshape(%594, %595, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %598 = cast(meta[relay.Constant][52] /* ty=Tensor[(240), int32] */, dtype="int32") /* ty=Tensor[(240), int32] */;
  %599 = reshape(%598, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), int32] */;
  %600 = @func_3507() /* ty=(Tensor[(16, 10, 5), float64],) */;
  %601 = %600.0;
  %602 = cast(%574, dtype="bool") /* ty=Tensor[(16, 10, 5), bool] */;
  %603 = shape_of(%601, dtype="int32") /* ty=Tensor[(3), int32] */;
  %604 = cast(%601, dtype="bool") /* ty=Tensor[(16, 10, 5), bool] */;
  %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %606 = @func_3335() /* ty=(Tensor[(16, 10, 5), float32],) */;
  %607 = bitwise_or(%577, %578) /* ty=Tensor[(16, 10, 5), uint16] */;
  %608 = minimum(%581, %582) /* ty=Tensor[(16, 10, 5), uint32] */;
  %609 = %589.0;
  %610 = bitwise_or(%596, %597) /* ty=Tensor[(550), uint32] */;
  %611 = @func_1257(%599) /* ty=Tensor[(6, 10, 4), bool] */;
  %612 = equal(%604, %605) /* ty=Tensor[(16, 10, 5), bool] */;
  %613 = %606.0;
  (%607, %608, %609, -6 /* ty=int32 */, %var_3808, meta[relay.Constant][50] /* ty=Tensor[(54), uint16] */, %610, %611, meta[relay.Constant][52] /* ty=Tensor[(240), int32] */, %612, %613)
}

def @func_3749() -> (Tensor[(16, 10, 5), float64],) {
  @func_3747() /* ty=(Tensor[(16, 10, 5), float64],) */
}

def @func_5815(%var_5814: Tensor[(11, 1, 13), float32]) -> (Tensor[(11, 1, 13), float32], Tensor[(16, 10, 5), float32], Tensor[(16, 10, 5), float64], Tensor[(16, 10, 5), float32], Tensor[(54), uint16], Tensor[(3, 3, 6), int16]) {
  %632 = fn (%var_5753: Tensor[(11, 1, 13), float32]) -> (Tensor[(11, 1, 13), float32], Tensor[(16, 10, 5), float32], Tensor[(16, 10, 5), float64], Tensor[(16, 10, 5), float32], Tensor[(54), uint16], Tensor[(3, 3, 6), int16]) {
    %614 = cast(1.92913f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %615 = cast(%var_5753, dtype="float32") /* ty=Tensor[(11, 1, 13), float32] */;
    %616 = @func_3335() /* ty=(Tensor[(16, 10, 5), float32],) */;
    %617 = cast(1.92913f /* ty=float32 */, dtype="int64") /* ty=int64 */;
    %618 = reshape(%617, newshape=[]) /* ty=int64 */;
    %619 = @func_3688(%618) /* ty=(Tensor[(16, 10, 5), float64], Tensor[(150), int32], Tensor[(550), float64], int64) */;
    %620 = cast(meta[relay.Constant][53] /* ty=Tensor[(54), uint16] */, dtype="uint16") /* ty=Tensor[(54), uint16] */;
    %621 = cast(meta[relay.Constant][53] /* ty=Tensor[(54), uint16] */, dtype="uint16") /* ty=Tensor[(54), uint16] */;
    %622 = reshape(%620, newshape=[3, 3, 6]) /* ty=Tensor[(3, 3, 6), uint16] */;
    %623 = reshape(%621, newshape=[3, 3, 6]) /* ty=Tensor[(3, 3, 6), uint16] */;
    %624 = @func_1879(%622, %623) /* ty=Tensor[(3, 3, 6), uint16] */;
    %625 = cast(%624, dtype="int16") /* ty=Tensor[(3, 3, 6), int16] */;
    %626 = cast(1.92913f /* ty=float32 */, dtype="int16") /* ty=int16 */;
    %627 = floor_divide(%614, %615) /* ty=Tensor[(11, 1, 13), float32] */;
    %628 = %616.0;
    %629 = %619.0;
    %630 = @func_3906() /* ty=Tensor[(16, 10, 5), float32] */;
    %631 = logical_xor(%625, %626) /* ty=Tensor[(3, 3, 6), int16] */;
    (%627, %628, %629, %630, meta[relay.Constant][53] /* ty=Tensor[(54), uint16] */, %631)
  };
  %632(%var_5814) /* ty=(Tensor[(11, 1, 13), float32], Tensor[(16, 10, 5), float32], Tensor[(16, 10, 5), float64], Tensor[(16, 10, 5), float32], Tensor[(54), uint16], Tensor[(3, 3, 6), int16]) */
}

def @func_3906() -> Tensor[(16, 10, 5), float32] {
  %633 = @func_3335() /* ty=(Tensor[(16, 10, 5), float32],) */;
  %633.0
}

def @func_4591(%var_4554: Tensor[(16, 10, 5), float64], %var_4565: Tensor[(16, 10, 5), uint32], %var_4570: Tensor[(16, 10, 5), float64], %var_4588: bool) -> (Tensor[(16, 10, 5), bool], Tensor[(1, 5, 9), float32], bool, Tensor[(45), bool]) {
  %634 = @func_4336() /* ty=Tensor[(16, 10, 5), float64] */;
  %635 = cast(%var_4554, dtype="uint32") /* ty=Tensor[(16, 10, 5), uint32] */;
  %636 = shape_of(%634, dtype="int32") /* ty=Tensor[(3), int32] */;
  %637 = cast(%634, dtype="uint32") /* ty=Tensor[(16, 10, 5), uint32] */;
  %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %639 = subtract(%637, %638) /* ty=Tensor[(16, 10, 5), uint32] */;
  %640 = cast(%var_4565, dtype="float64") /* ty=Tensor[(16, 10, 5), float64] */;
  %641 = shape_of(%639, dtype="int32") /* ty=Tensor[(3), int32] */;
  %642 = cast(%639, dtype="float64") /* ty=Tensor[(16, 10, 5), float64] */;
  %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %644 = floor_mod(%642, %643) /* ty=Tensor[(16, 10, 5), float64] */;
  %645 = cast(%var_4570, dtype="bool") /* ty=Tensor[(16, 10, 5), bool] */;
  %646 = shape_of(%644, dtype="int32") /* ty=Tensor[(3), int32] */;
  %647 = cast(%644, dtype="bool") /* ty=Tensor[(16, 10, 5), bool] */;
  %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %649 = cast(%var_4588, dtype="bool") /* ty=bool */;
  %650 = cast(meta[relay.Constant][54] /* ty=Tensor[(45), bool] */, dtype="bool") /* ty=Tensor[(45), bool] */;
  %651 = reshape(%649, newshape=[]) /* ty=bool */;
  %652 = reshape(%650, newshape=[1, 5, 9]) /* ty=Tensor[(1, 5, 9), bool] */;
  %653 = @func_3319(%651, %652) /* ty=(Tensor[(1, 5, 9), float32],) */;
  %654 = greater(%647, %648) /* ty=Tensor[(16, 10, 5), bool] */;
  %655 = %653.0;
  (%654, %655, %var_4588, meta[relay.Constant][54] /* ty=Tensor[(45), bool] */)
}

def @func_3973(%var_3969: Tensor[(54), uint16], %var_3970: Tensor[(648), float64], %var_3971: Tensor[(462), float32], %var_3972: Tensor[(240), int32]) -> (Tensor[(16, 10, 5), uint16], Tensor[(9, 6, 12), bool], Tensor[(54), uint16], Tensor[(648), float64], Tensor[(462), float32], Tensor[(240), float64]) {
  @func_3967(%var_3969, %var_3970, %var_3971, %var_3972) /* ty=(Tensor[(16, 10, 5), uint16], Tensor[(9, 6, 12), bool], Tensor[(54), uint16], Tensor[(648), float64], Tensor[(462), float32], Tensor[(240), float64]) */
}

def @func_2010(%var_2008: Tensor[(4, 3, 4), float32], %var_2009: Tensor[(3, 11, 14), float32]) -> (Tensor[(4, 3, 4), float32], Tensor[(462), float32], Tensor[(1, 2160), float64], Tensor[(30, 4), float64], Tensor[(4, 3, 4), uint16], Tensor[(3, 11, 14), uint64]) {
  %688 = fn (%var_1938: Tensor[(4, 3, 4), float32], %var_2002: Tensor[(3, 11, 14), float32]) -> (Tensor[(4, 3, 4), float32], Tensor[(462), float32], Tensor[(1, 2160), float64], Tensor[(30, 4), float64], Tensor[(4, 3, 4), uint16], Tensor[(3, 11, 14), uint64]) {
    %656 = cast(%var_1938, dtype="float32") /* ty=Tensor[(4, 3, 4), float32] */;
    %657 = cast(meta[relay.Constant][56] /* ty=Tensor[(30, 4), float64] */, dtype="float64") /* ty=Tensor[(30, 4), float64] */;
    %658 = reshape(%657, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), float64] */;
    %659 = @func_750(%658) /* ty=(Tensor[(5, 4, 6), float32], Tensor[(16, 15, 9), float64], Tensor[(1, 2160), float64]) */;
    %660 = cast(meta[relay.Constant][57] /* ty=Tensor[(4, 3, 4), float32] */, dtype="float64") /* ty=Tensor[(4, 3, 4), float64] */;
    %661 = asin(%660) /* ty=Tensor[(4, 3, 4), float64] */;
    %662 = cast(meta[relay.Constant][57] /* ty=Tensor[(4, 3, 4), float32] */, dtype="float32") /* ty=Tensor[(4, 3, 4), float32] */;
    %663 = shape_of(%var_1938, dtype="int32") /* ty=Tensor[(3), int32] */;
    %664 = cast(%var_1938, dtype="float32") /* ty=Tensor[(4, 3, 4), float32] */;
    %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %666 = floor_divide(%664, %665) /* ty=Tensor[(4, 3, 4), float32] */;
    %667 = cast(%666, dtype="uint32") /* ty=Tensor[(4, 3, 4), uint32] */;
    %668 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
    %669 = cast(%661, dtype="uint32") /* ty=Tensor[(4, 3, 4), uint32] */;
    %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %671 = maximum(%669, %670) /* ty=Tensor[(4, 3, 4), uint32] */;
    %672 = cast(%671, dtype="uint16") /* ty=Tensor[(4, 3, 4), uint16] */;
    %673 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
    %674 = cast(%661, dtype="uint16") /* ty=Tensor[(4, 3, 4), uint16] */;
    %675 = dyn.reshape(%672, %673, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %676 = cast(meta[relay.Constant][55] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
    %677 = reshape(%676, newshape=[3, 11, 14]) /* ty=Tensor[(3, 11, 14), float32] */;
    %678 = @func_179(%677) /* ty=(Tensor[(16, 15, 9), float64], Tensor[(20, 108), float64], Tensor[(3, 11, 14), float32]) */;
    %679 = %678.2;
    %680 = cast(%var_2002, dtype="uint64") /* ty=Tensor[(3, 11, 14), uint64] */;
    %681 = shape_of(%679, dtype="int32") /* ty=Tensor[(3), int32] */;
    %682 = cast(%679, dtype="uint64") /* ty=Tensor[(3, 11, 14), uint64] */;
    %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %684 = atan(%656) /* ty=Tensor[(4, 3, 4), float32] */;
    %685 = %659.2;
    %686 = left_shift(%674, %675) /* ty=Tensor[(4, 3, 4), uint16] */;
    %687 = logical_xor(%682, %683) /* ty=Tensor[(3, 11, 14), uint64] */;
    (%684, meta[relay.Constant][55] /* ty=Tensor[(462), float32] */, %685, meta[relay.Constant][56] /* ty=Tensor[(30, 4), float64] */, %686, %687)
  };
  %688(%var_2008, %var_2009) /* ty=(Tensor[(4, 3, 4), float32], Tensor[(462), float32], Tensor[(1, 2160), float64], Tensor[(30, 4), float64], Tensor[(4, 3, 4), uint16], Tensor[(3, 11, 14), uint64]) */
}

def @func_957(%var_923: Tensor[(9, 10, 1), int64], %var_924: Tensor[(9, 10, 15), int64], %var_932: Tensor[(462), float32], %var_939: Tensor[(120), float64], %var_941: Tensor[(8, 2160), float64]) -> (Tensor[(9, 10, 15), int64], Tensor[(20, 108), float64], Tensor[(462), float32], Tensor[(120), float64], Tensor[(8, 2160), bool]) {
  %689 = cast(%var_923, dtype="int64") /* ty=Tensor[(9, 10, 1), int64] */;
  %690 = cast(%var_924, dtype="int64") /* ty=Tensor[(9, 10, 15), int64] */;
  %691 = cast(%var_932, dtype="float32") /* ty=Tensor[(462), float32] */;
  %692 = reshape(%691, newshape=[3, 11, 14]) /* ty=Tensor[(3, 11, 14), float32] */;
  %693 = @func_179(%692) /* ty=(Tensor[(16, 15, 9), float64], Tensor[(20, 108), float64], Tensor[(3, 11, 14), float32]) */;
  %694 = cast(%var_939, dtype="float64") /* ty=Tensor[(120), float64] */;
  %695 = reshape(%694, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), float64] */;
  %696 = @func_750(%695) /* ty=(Tensor[(5, 4, 6), float32], Tensor[(16, 15, 9), float64], Tensor[(1, 2160), float64]) */;
  %697 = %696.2;
  %698 = cast(%697, dtype="bool") /* ty=Tensor[(1, 2160), bool] */;
  %699 = cast(%var_941, dtype="bool") /* ty=Tensor[(8, 2160), bool] */;
  %700 = left_shift(%689, %690) /* ty=Tensor[(9, 10, 15), int64] */;
  %701 = %693.1;
  %702 = greater(%698, %699) /* ty=Tensor[(8, 2160), bool] */;
  (%700, %701, %var_932, %var_939, %702)
}

def @func_2161(%var_2159: Tensor[(2, 11, 1), float64], %var_2160: Tensor[(2, 11, 6), float64]) -> (Tensor[(2, 11, 6), float64],) {
  @func_2157(%var_2159, %var_2160) /* ty=(Tensor[(2, 11, 6), float64],) */
}

def @func_3736(%var_3695: Tensor[(9, 8, 3), int32], %var_3696: Tensor[(9, 8, 3), int32]) -> (Tensor[(9, 8, 3), bool], Tensor[(9, 8, 3), float64], Tensor[(6, 10, 4), bool], Tensor[(240), int32]) {
  %703 = cast(%var_3696, dtype="bool") /* ty=Tensor[(9, 8, 3), bool] */;
  %704 = shape_of(%var_3695, dtype="int32") /* ty=Tensor[(3), int32] */;
  %705 = cast(%var_3695, dtype="bool") /* ty=Tensor[(9, 8, 3), bool] */;
  %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %707 = cast(%var_3696, dtype="float64") /* ty=Tensor[(9, 8, 3), float64] */;
  %708 = cast(meta[relay.Constant][58] /* ty=Tensor[(240), int32] */, dtype="int32") /* ty=Tensor[(240), int32] */;
  %709 = reshape(%708, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), int32] */;
  %710 = less_equal(%705, %706) /* ty=Tensor[(9, 8, 3), bool] */;
  %711 = acos(%707) /* ty=Tensor[(9, 8, 3), float64] */;
  %712 = @func_1257(%709) /* ty=Tensor[(6, 10, 4), bool] */;
  (%710, %711, %712, meta[relay.Constant][58] /* ty=Tensor[(240), int32] */)
}

def @func_3508() -> (Tensor[(16, 10, 5), float64],) {
  %717 = fn () -> (Tensor[(16, 10, 5), float64],) {
    %713 = @func_3335() /* ty=(Tensor[(16, 10, 5), float32],) */;
    %714 = %713.0;
    %715 = cast(%714, dtype="float64") /* ty=Tensor[(16, 10, 5), float64] */;
    %716 = acosh(%715) /* ty=Tensor[(16, 10, 5), float64] */;
    (%716,)
  };
  %717() /* ty=(Tensor[(16, 10, 5), float64],) */
}

def @func_4376() -> (Tensor[(16, 10, 5), float32], Tensor[(6, 10, 4), bool], Tensor[(24, 10), int32], Tensor[(5, 5, 6), float64], int32, Tensor[(150), int32], Tensor[(54), uint16]) {
  %718 = cast(meta[relay.Constant][59] /* ty=Tensor[(24, 10), int32] */, dtype="int32") /* ty=Tensor[(24, 10), int32] */;
  %719 = reshape(%718, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), int32] */;
  %720 = cast(5 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %721 = cast(meta[relay.Constant][60] /* ty=Tensor[(150), int32] */, dtype="int32") /* ty=Tensor[(150), int32] */;
  %722 = cast(meta[relay.Constant][61] /* ty=Tensor[(54), uint16] */, dtype="uint16") /* ty=Tensor[(54), uint16] */;
  %723 = reshape(%720, newshape=[]) /* ty=int32 */;
  %724 = reshape(%721, newshape=[5, 5, 6]) /* ty=Tensor[(5, 5, 6), int32] */;
  %725 = reshape(%722, newshape=[54]) /* ty=Tensor[(54), uint16] */;
  %726 = @func_2059(%723, %724, %725) /* ty=(Tensor[(3, 3, 6), uint16], Tensor[(54), uint16], Tensor[(5, 5, 6), float64], Tensor[(3, 3, 6), uint16]) */;
  %727 = @func_4234() /* ty=Tensor[(16, 10, 5), float32] */;
  %728 = @func_1257(%719) /* ty=Tensor[(6, 10, 4), bool] */;
  %729 = %726.2;
  (%727, %728, meta[relay.Constant][59] /* ty=Tensor[(24, 10), int32] */, %729, 5 /* ty=int32 */, meta[relay.Constant][60] /* ty=Tensor[(150), int32] */, meta[relay.Constant][61] /* ty=Tensor[(54), uint16] */)
}

def @func_2984(%var_2954: Tensor[(54), uint16], %var_2961: Tensor[(9, 6, 12), float64], %var_2975: Tensor[(240), int32], %var_2978: Tensor[(462), float32]) -> (Tensor[(9, 6, 12), bool], Tensor[(3, 3, 6), uint16], Tensor[(54), uint16], Tensor[(9, 6, 12), bool], Tensor[(9, 6, 12), float64], Tensor[(6, 10, 4), bool], Tensor[(240), int32], Tensor[(20, 108), float64], Tensor[(462), float32], Tensor[(6, 10, 4), bool]) {
  %730 = cast(meta[relay.Constant][63] /* ty=Tensor[(9, 6, 12), uint32] */, dtype="bool") /* ty=Tensor[(9, 6, 12), bool] */;
  %731 = shape_of(meta[relay.Constant][62] /* ty=Tensor[(9, 6, 12), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %732 = cast(meta[relay.Constant][62] /* ty=Tensor[(9, 6, 12), uint32] */, dtype="bool") /* ty=Tensor[(9, 6, 12), bool] */;
  %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %734 = cast(%var_2954, dtype="uint16") /* ty=Tensor[(54), uint16] */;
  %735 = cast(%var_2954, dtype="uint16") /* ty=Tensor[(54), uint16] */;
  %736 = reshape(%734, newshape=[3, 3, 6]) /* ty=Tensor[(3, 3, 6), uint16] */;
  %737 = reshape(%735, newshape=[3, 3, 6]) /* ty=Tensor[(3, 3, 6), uint16] */;
  %738 = cast(meta[relay.Constant][63] /* ty=Tensor[(9, 6, 12), uint32] */, dtype="float64") /* ty=Tensor[(9, 6, 12), float64] */;
  %739 = log10(%738) /* ty=Tensor[(9, 6, 12), float64] */;
  %740 = cast(%var_2961, dtype="bool") /* ty=Tensor[(9, 6, 12), bool] */;
  %741 = shape_of(%739, dtype="int32") /* ty=Tensor[(3), int32] */;
  %742 = cast(%739, dtype="bool") /* ty=Tensor[(9, 6, 12), bool] */;
  %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %744 = cast(%739, dtype="float64") /* ty=Tensor[(9, 6, 12), float64] */;
  %745 = cast(%var_2975, dtype="int32") /* ty=Tensor[(240), int32] */;
  %746 = reshape(%745, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), int32] */;
  %747 = cast(%var_2978, dtype="float32") /* ty=Tensor[(462), float32] */;
  %748 = reshape(%747, newshape=[3, 11, 14]) /* ty=Tensor[(3, 11, 14), float32] */;
  %749 = @func_179(%748) /* ty=(Tensor[(16, 15, 9), float64], Tensor[(20, 108), float64], Tensor[(3, 11, 14), float32]) */;
  %750 = cast(%var_2975, dtype="int32") /* ty=Tensor[(240), int32] */;
  %751 = reshape(%750, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), int32] */;
  %752 = less_equal(%732, %733) /* ty=Tensor[(9, 6, 12), bool] */;
  %753 = @func_1879(%736, %737) /* ty=Tensor[(3, 3, 6), uint16] */;
  %754 = not_equal(%742, %743) /* ty=Tensor[(9, 6, 12), bool] */;
  %755 = acosh(%744) /* ty=Tensor[(9, 6, 12), float64] */;
  %756 = @func_1257(%746) /* ty=Tensor[(6, 10, 4), bool] */;
  %757 = %749.1;
  %758 = @func_1257(%751) /* ty=Tensor[(6, 10, 4), bool] */;
  (%752, %753, %var_2954, %754, %755, %756, %var_2975, %757, %var_2978, %758)
}

def @func_5185(%var_5181: int64, %var_5182: Tensor[(54), uint16], %var_5183: Tensor[(48), float32], %var_5184: Tensor[(462), float32]) -> (Tensor[(3, 3, 6), uint16], Tensor[(54), uint16], Tensor[(30, 4), float64], Tensor[(48), float32], Tensor[(462), float32], Tensor[(9, 6, 13), float64]) {
  %782 = fn (%var_5136: int64, %var_5154: Tensor[(54), uint16], %var_5159: Tensor[(48), float32], %var_5160: Tensor[(462), float32]) -> (Tensor[(3, 3, 6), uint16], Tensor[(54), uint16], Tensor[(30, 4), float64], Tensor[(48), float32], Tensor[(462), float32], Tensor[(9, 6, 13), float64]) {
    %759 = cast(%var_5154, dtype="uint16") /* ty=Tensor[(54), uint16] */;
    %760 = cast(%var_5154, dtype="uint16") /* ty=Tensor[(54), uint16] */;
    %761 = reshape(%759, newshape=[3, 3, 6]) /* ty=Tensor[(3, 3, 6), uint16] */;
    %762 = reshape(%760, newshape=[3, 3, 6]) /* ty=Tensor[(3, 3, 6), uint16] */;
    %763 = cast(%var_5159, dtype="float32") /* ty=Tensor[(48), float32] */;
    %764 = cast(%var_5160, dtype="float32") /* ty=Tensor[(462), float32] */;
    %765 = reshape(%763, newshape=[4, 3, 4]) /* ty=Tensor[(4, 3, 4), float32] */;
    %766 = reshape(%764, newshape=[3, 11, 14]) /* ty=Tensor[(3, 11, 14), float32] */;
    %767 = @func_2007(%765, %766) /* ty=(Tensor[(4, 3, 4), float32], Tensor[(462), float32], Tensor[(1, 2160), float64], Tensor[(30, 4), float64], Tensor[(4, 3, 4), uint16], Tensor[(3, 11, 14), uint64]) */;
    %768 = cast(%var_5136, dtype="int64") /* ty=int64 */;
    %769 = cast(meta[relay.Constant][64] /* ty=Tensor[(9, 6, 13), int64] */, dtype="int64") /* ty=Tensor[(9, 6, 13), int64] */;
    %770 = maximum(%768, %769) /* ty=Tensor[(9, 6, 13), int64] */;
    %771 = cast(meta[relay.Constant][65] /* ty=Tensor[(9, 6, 13), int64] */, dtype="bool") /* ty=Tensor[(9, 6, 13), bool] */;
    %772 = shape_of(%770, dtype="int32") /* ty=Tensor[(3), int32] */;
    %773 = cast(%770, dtype="bool") /* ty=Tensor[(9, 6, 13), bool] */;
    %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %775 = less(%773, %774) /* ty=Tensor[(9, 6, 13), bool] */;
    %776 = cast(%775, dtype="float64") /* ty=Tensor[(9, 6, 13), float64] */;
    %777 = acosh(%776) /* ty=Tensor[(9, 6, 13), float64] */;
    %778 = cast(%777, dtype="float64") /* ty=Tensor[(9, 6, 13), float64] */;
    %779 = @func_1879(%761, %762) /* ty=Tensor[(3, 3, 6), uint16] */;
    %780 = %767.3;
    %781 = atan(%778) /* ty=Tensor[(9, 6, 13), float64] */;
    (%779, %var_5154, %780, %var_5159, %var_5160, %781)
  };
  %782(%var_5181, %var_5182, %var_5183, %var_5184) /* ty=(Tensor[(3, 3, 6), uint16], Tensor[(54), uint16], Tensor[(30, 4), float64], Tensor[(48), float32], Tensor[(462), float32], Tensor[(9, 6, 13), float64]) */
}

def @func_4540(%var_4534: Tensor[(1664), int64]) -> (Tensor[(16, 10, 5), float32], Tensor[(8, 13, 16), int64], int64, Tensor[(1664), int64]) {
  %783 = cast(-10 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %784 = cast(%var_4534, dtype="int64") /* ty=Tensor[(1664), int64] */;
  %785 = reshape(%783, newshape=[]) /* ty=int64 */;
  %786 = reshape(%784, newshape=[8, 13, 16]) /* ty=Tensor[(8, 13, 16), int64] */;
  %787 = @func_2485(%785, %786) /* ty=(Tensor[(8, 13, 16), int64], Tensor[(462), float32], Tensor[(16, 15, 9), uint32]) */;
  %788 = @func_4416() /* ty=Tensor[(16, 10, 5), float32] */;
  %789 = %787.0;
  (%788, %789, -10 /* ty=int64 */, %var_4534)
}

def @func_5491() -> (int32, Tensor[(6, 10, 4), bool], Tensor[(240), int32]) {
  %795 = fn () -> (int32, Tensor[(6, 10, 4), bool], Tensor[(240), int32]) {
    %790 = @func_4376() /* ty=(Tensor[(16, 10, 5), float32], Tensor[(6, 10, 4), bool], Tensor[(24, 10), int32], Tensor[(5, 5, 6), float64], int32, Tensor[(150), int32], Tensor[(54), uint16]) */;
    %791 = cast(meta[relay.Constant][66] /* ty=Tensor[(240), int32] */, dtype="int32") /* ty=Tensor[(240), int32] */;
    %792 = reshape(%791, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), int32] */;
    %793 = %790.4;
    %794 = @func_1257(%792) /* ty=Tensor[(6, 10, 4), bool] */;
    (%793, %794, meta[relay.Constant][66] /* ty=Tensor[(240), int32] */)
  };
  %795() /* ty=(int32, Tensor[(6, 10, 4), bool], Tensor[(240), int32]) */
}

def @func_4061(%var_4053: Tensor[(6, 13, 7), int32], %var_4054: Tensor[(6, 13, 7), int32], %var_4055: Tensor[(6, 13, 7), int32], %var_4056: Tensor[(1, 648), float64], %var_4057: Tensor[(462), float32], %var_4058: Tensor[(462), float32], %var_4059: Tensor[(550), float64], %var_4060: int64) -> (Tensor[(6, 13, 7), int32], Tensor[(6, 13, 7), int8], Tensor[(1, 648), float64], Tensor[(54), float64], Tensor[(462), bool], Tensor[(150), int32], Tensor[(550), float64], int64, Tensor[(16, 10, 5), float64], Tensor[(20, 108), float64]) {
  %838 = fn (%var_3977: Tensor[(6, 13, 7), int32], %var_3978: Tensor[(6, 13, 7), int32], %var_3989: Tensor[(6, 13, 7), int32], %var_4003: Tensor[(1, 648), float64], %var_4004: Tensor[(462), float32], %var_4026: Tensor[(462), float32], %var_4031: Tensor[(550), float64], %var_4032: int64) -> (Tensor[(6, 13, 7), int32], Tensor[(6, 13, 7), int8], Tensor[(1, 648), float64], Tensor[(54), float64], Tensor[(462), bool], Tensor[(150), int32], Tensor[(550), float64], int64, Tensor[(16, 10, 5), float64], Tensor[(20, 108), float64]) {
    %796 = cast(%var_3978, dtype="int32") /* ty=Tensor[(6, 13, 7), int32] */;
    %797 = shape_of(%var_3977, dtype="int32") /* ty=Tensor[(3), int32] */;
    %798 = cast(%var_3977, dtype="int32") /* ty=Tensor[(6, 13, 7), int32] */;
    %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %800 = cast(%var_3989, dtype="int8") /* ty=Tensor[(6, 13, 7), int8] */;
    %801 = shape_of(%var_3978, dtype="int32") /* ty=Tensor[(3), int32] */;
    %802 = cast(%var_3978, dtype="int8") /* ty=Tensor[(6, 13, 7), int8] */;
    %803 = dyn.reshape(%800, %801, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %804 = cast(meta[relay.Constant][67] /* ty=Tensor[(54), uint16] */, dtype="uint16") /* ty=Tensor[(54), uint16] */;
    %805 = cast(%var_4003, dtype="float64") /* ty=Tensor[(1, 648), float64] */;
    %806 = cast(%var_4004, dtype="float32") /* ty=Tensor[(462), float32] */;
    %807 = reshape(%804, newshape=[54]) /* ty=Tensor[(54), uint16] */;
    %808 = reshape(%805, newshape=[648]) /* ty=Tensor[(648), float64] */;
    %809 = reshape(%806, newshape=[462]) /* ty=Tensor[(462), float32] */;
    %810 = @func_3438(%807, %808, %809) /* ty=(Tensor[(54), uint16], Tensor[(54), uint16], Tensor[(462), float32], Tensor[(16, 10, 5), uint8], Tensor[(3, 3, 6), uint16], Tensor[(240, 648), float64], Tensor[(2, 11, 6), float64], Tensor[(22), float64], Tensor[(132), float64], Tensor[(132), float64]) */;
    %811 = %810.1;
    %812 = cast(meta[relay.Constant][67] /* ty=Tensor[(54), uint16] */, dtype="float64") /* ty=Tensor[(54), float64] */;
    %813 = shape_of(%811, dtype="int32") /* ty=Tensor[(1), int32] */;
    %814 = cast(%811, dtype="float64") /* ty=Tensor[(54), float64] */;
    %815 = dyn.reshape(%812, %813, newshape=[]) /* ty=Tensor[(?), float64] */;
    %816 = cast(%var_4026, dtype="bool") /* ty=Tensor[(462), bool] */;
    %817 = shape_of(%var_4004, dtype="int32") /* ty=Tensor[(1), int32] */;
    %818 = cast(%var_4004, dtype="bool") /* ty=Tensor[(462), bool] */;
    %819 = dyn.reshape(%816, %817, newshape=[]) /* ty=Tensor[(?), bool] */;
    %820 = cast(%var_4031, dtype="float64") /* ty=Tensor[(550), float64] */;
    %821 = cast(%var_4032, dtype="int64") /* ty=int64 */;
    %822 = cast(%var_4031, dtype="float32") /* ty=Tensor[(550), float32] */;
    %823 = reshape(%820, newshape=[5, 11, 10]) /* ty=Tensor[(5, 11, 10), float64] */;
    %824 = reshape(%821, newshape=[]) /* ty=int64 */;
    %825 = reshape(%822, newshape=[5, 11, 10]) /* ty=Tensor[(5, 11, 10), float32] */;
    %826 = @func_3547(%823, %824, %825) /* ty=(Tensor[(54), uint16], int64, Tensor[(150), int32], Tensor[(22), float64], Tensor[(5, 11, 10), float64]) */;
    %827 = @func_3747() /* ty=(Tensor[(16, 10, 5), float64],) */;
    %828 = logical_or(%818, %819) /* ty=Tensor[(462), bool] */;
    %829 = cast(%828, dtype="float32") /* ty=Tensor[(462), float32] */;
    %830 = reshape(%829, newshape=[3, 11, 14]) /* ty=Tensor[(3, 11, 14), float32] */;
    %831 = @func_179(%830) /* ty=(Tensor[(16, 15, 9), float64], Tensor[(20, 108), float64], Tensor[(3, 11, 14), float32]) */;
    %832 = bitwise_or(%798, %799) /* ty=Tensor[(6, 13, 7), int32] */;
    %833 = right_shift(%802, %803) /* ty=Tensor[(6, 13, 7), int8] */;
    %834 = mod(%814, %815) /* ty=Tensor[(54), float64] */;
    %835 = %826.2;
    %836 = %827.0;
    %837 = %831.1;
    (%832, %833, %var_4003, %834, %828, %835, %var_4031, %var_4032, %836, %837)
  };
  %838(%var_4053, %var_4054, %var_4055, %var_4056, %var_4057, %var_4058, %var_4059, %var_4060) /* ty=(Tensor[(6, 13, 7), int32], Tensor[(6, 13, 7), int8], Tensor[(1, 648), float64], Tensor[(54), float64], Tensor[(462), bool], Tensor[(150), int32], Tensor[(550), float64], int64, Tensor[(16, 10, 5), float64], Tensor[(20, 108), float64]) */
}

def @func_4236() -> Tensor[(16, 10, 5), float32] {
  @func_4234() /* ty=Tensor[(16, 10, 5), float32] */
}

def @func_3322(%var_3320: bool, %var_3321: Tensor[(1, 5, 9), bool]) -> (Tensor[(1, 5, 9), float32],) {
  %844 = fn (%var_3295: bool, %var_3296: Tensor[(1, 5, 9), bool]) -> (Tensor[(1, 5, 9), float32],) {
    %839 = cast(%var_3295, dtype="bool") /* ty=bool */;
    %840 = cast(%var_3296, dtype="bool") /* ty=Tensor[(1, 5, 9), bool] */;
    %841 = logical_and(%839, %840) /* ty=Tensor[(1, 5, 9), bool] */;
    %842 = cast(%841, dtype="float32") /* ty=Tensor[(1, 5, 9), float32] */;
    %843 = exp(%842) /* ty=Tensor[(1, 5, 9), float32] */;
    (%843,)
  };
  %844(%var_3320, %var_3321) /* ty=(Tensor[(1, 5, 9), float32],) */
}

def @func_3774() -> Tensor[(16, 10, 5), float32] {
  %846 = fn () -> Tensor[(16, 10, 5), float32] {
    %845 = @func_3335() /* ty=(Tensor[(16, 10, 5), float32],) */;
    %845.0
  };
  %846() /* ty=Tensor[(16, 10, 5), float32] */
}

def @func_3740(%var_3738: Tensor[(9, 8, 3), int32], %var_3739: Tensor[(9, 8, 3), int32]) -> (Tensor[(9, 8, 3), bool], Tensor[(9, 8, 3), float64], Tensor[(6, 10, 4), bool], Tensor[(240), int32]) {
  @func_3736(%var_3738, %var_3739) /* ty=(Tensor[(9, 8, 3), bool], Tensor[(9, 8, 3), float64], Tensor[(6, 10, 4), bool], Tensor[(240), int32]) */
}

def @func_4337() -> Tensor[(16, 10, 5), float64] {
  %848 = fn () -> Tensor[(16, 10, 5), float64] {
    %847 = @func_3507() /* ty=(Tensor[(16, 10, 5), float64],) */;
    %847.0
  };
  %848() /* ty=Tensor[(16, 10, 5), float64] */
}

def @func_1260(%var_1258: Tensor[(6, 10, 4), int32]) -> Tensor[(6, 10, 4), bool] {
  @func_1257(%var_1258) /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_5633(%var_5631: uint16, %var_5632: Tensor[(3, 4, 6), uint16]) -> (Tensor[(3, 4, 6), uint16], Tensor[(6, 10, 4), bool], Tensor[(3, 4, 6), float32], Tensor[(1, 2160), float64], Tensor[(30, 4), float64]) {
  @func_5629(%var_5631, %var_5632) /* ty=(Tensor[(3, 4, 6), uint16], Tensor[(6, 10, 4), bool], Tensor[(3, 4, 6), float32], Tensor[(1, 2160), float64], Tensor[(30, 4), float64]) */
}

def @func_2489(%var_2487: int64, %var_2488: Tensor[(8, 13, 16), int64]) -> (Tensor[(8, 13, 16), int64], Tensor[(462), float32], Tensor[(16, 15, 9), uint32]) {
  @func_2485(%var_2487, %var_2488) /* ty=(Tensor[(8, 13, 16), int64], Tensor[(462), float32], Tensor[(16, 15, 9), uint32]) */
}

def @func_5739(%var_5735: Tensor[(7, 648), int16], %var_5736: Tensor[(150), int32], %var_5737: Tensor[(1, 22), float64], %var_5738: Tensor[(120), float64]) -> (Tensor[(462), bool], Tensor[(546), int32], Tensor[(462), float32], Tensor[(550), float64], Tensor[(462), float32], Tensor[(48), float32], Tensor[(7, 648), uint32], Tensor[(?, 54), bool], Tensor[(1, 648), float32], Tensor[(462), float32], Tensor[(416, 4), int64], Tensor[(5, 5, 6), float64], Tensor[(150), int32], Tensor[(1, 22), float64], Tensor[(8, 13, 16), int64], Tensor[(120), float64]) {
  @func_5733(%var_5735, %var_5736, %var_5737, %var_5738) /* ty=(Tensor[(462), bool], Tensor[(546), int32], Tensor[(462), float32], Tensor[(550), float64], Tensor[(462), float32], Tensor[(48), float32], Tensor[(7, 648), uint32], Tensor[(?, 54), bool], Tensor[(1, 648), float32], Tensor[(462), float32], Tensor[(416, 4), int64], Tensor[(5, 5, 6), float64], Tensor[(150), int32], Tensor[(1, 22), float64], Tensor[(8, 13, 16), int64], Tensor[(120), float64]) */
}

def @func_5328() -> Tensor[(16, 10, 5), float64] {
  @func_5326() /* ty=Tensor[(16, 10, 5), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen203/build/output.py", line 1485, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:57:06] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

