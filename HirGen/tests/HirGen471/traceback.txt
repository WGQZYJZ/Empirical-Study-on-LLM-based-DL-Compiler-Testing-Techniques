==========mod==========
#[version = "0.0.5"]
def @func_1441(%var_1362: Tensor[(4, 12, 9), bool], %var_1375: Tensor[(30), float64], %var_1403: Tensor[(1, 2100), uint8], %var_1410: Tensor[(65, 13), uint16]) -> (Tensor[(4, 12, 9), int64], Tensor[(1, 6, 5), float64], Tensor[(30), float64], Tensor[(1, 6, 5), float64], Tensor[(13, 4, 9), float32], Tensor[(6, 78), float32], Tensor[(3, 6, 11), float32], Tensor[(10, 14, 15), float64], Tensor[(1, 2100), uint8], Tensor[(65, 13), uint32], Tensor[(13, 13, 5), uint16], Tensor[(30, 2), int32], Tensor[(30, 1), float64]) {
  %0 = cast(%var_1362, dtype="bool") /* ty=Tensor[(4, 12, 9), bool] */;
  %1 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(4, 12, 9), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(4, 12, 9), bool] */, dtype="bool") /* ty=Tensor[(4, 12, 9), bool] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %4 = logical_or(%2, %3) /* ty=Tensor[(4, 12, 9), bool] */;
  %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(4, 12, 9), bool] */, dtype="int64") /* ty=Tensor[(4, 12, 9), int64] */;
  %6 = shape_of(%4, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%4, dtype="int64") /* ty=Tensor[(4, 12, 9), int64] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %9 = cast(%var_1375, dtype="float64") /* ty=Tensor[(30), float64] */;
  %10 = reshape(%9, newshape=[1, 6, 5]) /* ty=Tensor[(1, 6, 5), float64] */;
  %11 = @func_428(%10) /* ty=(Tensor[(1, 6, 5), float64],) */;
  %12 = %11.0;
  %13 = cast(%12, dtype="float64") /* ty=Tensor[(1, 6, 5), float64] */;
  %14 = reshape(%13, newshape=[1, 6, 5]) /* ty=Tensor[(1, 6, 5), float64] */;
  %15 = @func_428(%14) /* ty=(Tensor[(1, 6, 5), float64],) */;
  %16 = cast(meta[relay.Constant][1] /* ty=Tensor[(6, 78), float32] */, dtype="float32") /* ty=Tensor[(6, 78), float32] */;
  %17 = reshape(%16, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float32] */;
  %18 = @func_868(%17) /* ty=(Tensor[(13, 4, 9), float32],) */;
  %19 = cast(meta[relay.Constant][2] /* ty=Tensor[(65, 13), uint16] */, dtype="uint16") /* ty=Tensor[(65, 13), uint16] */;
  %20 = reshape(%19, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), uint16] */;
  %21 = @func_759(%20) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(3, 6, 11), float32], Tensor[(99, 2), int64]) */;
  %22 = cast(%var_1403, dtype="uint8") /* ty=Tensor[(1, 2100), uint8] */;
  %23 = cast(meta[relay.Constant][2] /* ty=Tensor[(65, 13), uint16] */, dtype="uint16") /* ty=Tensor[(65, 13), uint16] */;
  %24 = reshape(%22, newshape=[10, 14, 15]) /* ty=Tensor[(10, 14, 15), uint8] */;
  %25 = reshape(%23, newshape=[845]) /* ty=Tensor[(845), uint16] */;
  %26 = @func_1038(%24, %25) /* ty=(Tensor[(10, 14, 15), uint8], Tensor[(13, 13, 5), uint16], Tensor[(845), uint16], Tensor[(10, 14, 15), float64]) */;
  %27 = cast(%var_1410, dtype="uint32") /* ty=Tensor[(65, 13), uint32] */;
  %28 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(65, 13), uint16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %29 = cast(meta[relay.Constant][2] /* ty=Tensor[(65, 13), uint16] */, dtype="uint32") /* ty=Tensor[(65, 13), uint32] */;
  %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %31 = multiply(%29, %30) /* ty=Tensor[(65, 13), uint32] */;
  %32 = cast(%31, dtype="uint16") /* ty=Tensor[(65, 13), uint16] */;
  %33 = reshape(%32, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), uint16] */;
  %34 = @func_759(%33) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(3, 6, 11), float32], Tensor[(99, 2), int64]) */;
  %35 = @func_1282() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */;
  %36 = %35.3;
  %37 = cast(%36, dtype="int32") /* ty=Tensor[(30, 1), int32] */;
  %38 = cast(meta[relay.Constant][3] /* ty=Tensor[(30, 2), float64] */, dtype="int32") /* ty=Tensor[(30, 2), int32] */;
  %39 = @func_1282() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */;
  %40 = bitwise_and(%7, %8) /* ty=Tensor[(4, 12, 9), int64] */;
  %41 = %15.0;
  %42 = %18.0;
  %43 = %21.1;
  %44 = %26.3;
  %45 = %34.0;
  %46 = maximum(%37, %38) /* ty=Tensor[(30, 2), int32] */;
  %47 = %39.3;
  (%40, %12, %var_1375, %41, %42, meta[relay.Constant][1] /* ty=Tensor[(6, 78), float32] */, %43, %44, %var_1403, %31, %45, %46, %47)
}

def @func_3339() -> Tensor[(12, 15, 4), float32] {
  %48 = @func_3292() /* ty=Tensor[(12, 15, 4), float32] */;
  %49 = cast(%48, dtype="float32") /* ty=Tensor[(12, 15, 4), float32] */;
  atanh(%49) /* ty=Tensor[(12, 15, 4), float32] */
}

def @main() -> (Tensor[(90), uint64], Tensor[(4, 10, 5), float32]) {
  %50 = @func_4694() /* ty=(Tensor[(12, 9, 13), float64], Tensor[(12, 15, 4), float32], Tensor[(2100), uint8], Tensor[(65, 13), uint16], Tensor[(90), uint64]) */;
  %51 = @func_4423() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(4, 10, 5), float64], Tensor[(200), int8], Tensor[(12, 15, 4), float32]) */;
  %52 = %51.1;
  %53 = cast(%52, dtype="float64") /* ty=Tensor[(4, 10, 5), float64] */;
  %54 = asin(%53) /* ty=Tensor[(4, 10, 5), float64] */;
  %55 = cast(%54, dtype="float32") /* ty=Tensor[(4, 10, 5), float32] */;
  %56 = %50.4;
  %57 = sin(%55) /* ty=Tensor[(4, 10, 5), float32] */;
  (%56, %57)
}

def @func_5251(%var_5226: Tensor[(1, 2688), float32], %var_5230: Tensor[(3, 700), uint8], %var_5231: Tensor[(845), uint16]) -> (Tensor[(7, 15, 8), int64], Tensor[(16, 12, 14), float32], Tensor[(1, 2688), float32], Tensor[(845), uint16], Tensor[(3, 700), uint8], Tensor[(845), uint16]) {
  %58 = @func_2363() /* ty=(Tensor[(7, 15, 8), int64],) */;
  %59 = cast(%var_5226, dtype="float32") /* ty=Tensor[(1, 2688), float32] */;
  %60 = reshape(%59, newshape=[16, 12, 14]) /* ty=Tensor[(16, 12, 14), float32] */;
  %61 = cast(%var_5230, dtype="uint8") /* ty=Tensor[(3, 700), uint8] */;
  %62 = cast(%var_5231, dtype="uint16") /* ty=Tensor[(845), uint16] */;
  %63 = reshape(%61, newshape=[10, 14, 15]) /* ty=Tensor[(10, 14, 15), uint8] */;
  %64 = reshape(%62, newshape=[845]) /* ty=Tensor[(845), uint16] */;
  %65 = @func_1038(%63, %64) /* ty=(Tensor[(10, 14, 15), uint8], Tensor[(13, 13, 5), uint16], Tensor[(845), uint16], Tensor[(10, 14, 15), float64]) */;
  %66 = %58.0;
  %67 = @func_3358(%60) /* ty=Tensor[(16, 12, 14), float32] */;
  %68 = %65.2;
  (%66, %67, %var_5226, %68, %var_5230, %var_5231)
}

def @func_7130() -> (Tensor[(90), uint64],) {
  %69 = @func_6871() /* ty=(Tensor[(12, 9, 13), float64], Tensor[(90, 1), float32], Tensor[(90), uint64]) */;
  %70 = %69.2;
  (%70,)
}

def @func_3539() -> (Tensor[(12, 9, 13), float64],) {
  %71 = @func_2060() /* ty=Tensor[(12, 9, 13), float64] */;
  (%71,)
}

def @func_3878(%var_3830: Tensor[(450), float64], %var_3831: Tensor[(90), uint64], %var_3832: Tensor[(3, 66), int64]) -> (Tensor[(65, 13), uint16], Tensor[(450), float64], Tensor[(90), uint64], Tensor[(12, 9, 13), float64], Tensor[(12, 9, 13), float64], Tensor[(2688), float32], Tensor[(440), uint32], Tensor[(3, 66), float64]) {
  %72 = cast(%var_3830, dtype="float64") /* ty=Tensor[(450), float64] */;
  %73 = cast(%var_3831, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %74 = cast(%var_3832, dtype="int64") /* ty=Tensor[(3, 66), int64] */;
  %75 = reshape(%72, newshape=[1, 450]) /* ty=Tensor[(1, 450), float64] */;
  %76 = reshape(%73, newshape=[90]) /* ty=Tensor[(90), uint64] */;
  %77 = reshape(%74, newshape=[198]) /* ty=Tensor[(198), int64] */;
  %78 = @func_3657(%75, %76, %77) /* ty=(Tensor[(12, 15, 4), bool], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), uint64], Tensor[(90, 1), float32], Tensor[(1, 450), float64], Tensor[(65, 13), uint16], Tensor[(90), uint64], Tensor[(3, 6, 11), float32], Tensor[(198), int64]) */;
  %79 = @func_3539() /* ty=(Tensor[(12, 9, 13), float64],) */;
  %80 = %79.0;
  %81 = cast(%80, dtype="float64") /* ty=Tensor[(12, 9, 13), float64] */;
  %82 = cast(meta[relay.Constant][4] /* ty=Tensor[(440), uint32] */, dtype="uint32") /* ty=Tensor[(440), uint32] */;
  %83 = cast(meta[relay.Constant][4] /* ty=Tensor[(440), uint32] */, dtype="uint32") /* ty=Tensor[(440), uint32] */;
  %84 = reshape(%82, newshape=[11, 5, 8]) /* ty=Tensor[(11, 5, 8), uint32] */;
  %85 = reshape(%83, newshape=[11, 5, 8]) /* ty=Tensor[(11, 5, 8), uint32] */;
  %86 = @func_3769(%84, %85) /* ty=(Tensor[(11, 5, 8), bool], Tensor[(11, 5, 8), float32], Tensor[(432), bool], Tensor[(2688), float32]) */;
  %87 = cast(%var_3832, dtype="float64") /* ty=Tensor[(3, 66), float64] */;
  %88 = acos(%87) /* ty=Tensor[(3, 66), float64] */;
  %89 = cast(%88, dtype="float64") /* ty=Tensor[(3, 66), float64] */;
  %90 = %78.5;
  %91 = log2(%81) /* ty=Tensor[(12, 9, 13), float64] */;
  %92 = @func_2060() /* ty=Tensor[(12, 9, 13), float64] */;
  %93 = %86.3;
  %94 = sinh(%89) /* ty=Tensor[(3, 66), float64] */;
  (%90, %var_3830, %var_3831, %91, %92, %93, meta[relay.Constant][4] /* ty=Tensor[(440), uint32] */, %94)
}

def @func_6871() -> (Tensor[(12, 9, 13), float64], Tensor[(90, 1), float32], Tensor[(90), uint64]) {
  %95 = cast(meta[relay.Constant][5] /* ty=Tensor[(90), uint64] */, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %96 = reshape(%95, newshape=[90, 1]) /* ty=Tensor[(90, 1), uint64] */;
  %97 = @func_1970(%96) /* ty=(Tensor[(16, ?, 10), float32], Tensor[(2, 9, 5), bool], Tensor[(90, 1), float32]) */;
  %98 = @func_2060() /* ty=Tensor[(12, 9, 13), float64] */;
  %99 = %97.2;
  (%98, %99, meta[relay.Constant][5] /* ty=Tensor[(90), uint64] */)
}

def @func_6936(%var_6885: Tensor[(9, 15, 2), bool], %var_6927: Tensor[(720), float32]) -> (Tensor[(7, 15, 8), float64], Tensor[(9, 15, 2), int64], Tensor[(12, 15, 4), float64], Tensor[(720), float32]) {
  %100 = @func_4125() /* ty=(Tensor[(9, 15, 2), bool], Tensor[(30, 1), float64], Tensor[(720), float32]) */;
  %101 = %100.0;
  %102 = cast(%var_6885, dtype="int8") /* ty=Tensor[(9, 15, 2), int8] */;
  %103 = shape_of(%101, dtype="int32") /* ty=Tensor[(3), int32] */;
  %104 = cast(%101, dtype="int8") /* ty=Tensor[(9, 15, 2), int8] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %106 = maximum(%104, %105) /* ty=Tensor[(9, 15, 2), int8] */;
  %107 = cast(%101, dtype="int8") /* ty=Tensor[(9, 15, 2), int8] */;
  %108 = shape_of(%106, dtype="int32") /* ty=Tensor[(3), int32] */;
  %109 = cast(%106, dtype="int8") /* ty=Tensor[(9, 15, 2), int8] */;
  %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %111 = subtract(%109, %110) /* ty=Tensor[(9, 15, 2), int8] */;
  %112 = cast(%111, dtype="float32") /* ty=Tensor[(9, 15, 2), float32] */;
  %113 = exp(%112) /* ty=Tensor[(9, 15, 2), float32] */;
  %114 = cast(%106, dtype="int64") /* ty=Tensor[(9, 15, 2), int64] */;
  %115 = shape_of(%113, dtype="int32") /* ty=Tensor[(3), int32] */;
  %116 = cast(%113, dtype="int64") /* ty=Tensor[(9, 15, 2), int64] */;
  %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %118 = cast(%var_6927, dtype="float32") /* ty=Tensor[(720), float32] */;
  %119 = reshape(%118, newshape=[12, 15, 4]) /* ty=Tensor[(12, 15, 4), float32] */;
  %120 = @func_2115(%119) /* ty=(Tensor[(12, 15, 4), uint64], Tensor[(12, 15, 4), float64]) */;
  %121 = @func_2748() /* ty=Tensor[(7, 15, 8), float64] */;
  %122 = right_shift(%116, %117) /* ty=Tensor[(9, 15, 2), int64] */;
  %123 = %120.1;
  (%121, %122, %123, %var_6927)
}

def @func_4944(%var_4926: Tensor[(30), float64]) -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(30), float64], Tensor[(1, 6, 5), float32]) {
  %124 = @func_4824() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(12, 15, 4), float32]) */;
  %125 = cast(%var_4926, dtype="float64") /* ty=Tensor[(30), float64] */;
  %126 = reshape(%125, newshape=[30]) /* ty=Tensor[(30), float64] */;
  %127 = @func_3067(%126) /* ty=(Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30), float64], Tensor[(13, 13, 5), uint16], Tensor[(1, 2100), uint8], Tensor[(845), uint16]) */;
  %128 = %127.1;
  %129 = cast(%128, dtype="float32") /* ty=Tensor[(1, 6, 5), float32] */;
  %130 = %124.1;
  %131 = @func_4796() /* ty=Tensor[(12, 15, 4), float32] */;
  %132 = asinh(%129) /* ty=Tensor[(1, 6, 5), float32] */;
  (%130, %131, %var_4926, %132)
}

def @func_4824() -> (Tensor[(13, 13, 5), uint16], Tensor[(12, 15, 4), float32]) {
  %133 = @func_4217() /* ty=Tensor[(13, 13, 5), uint16] */;
  %134 = @func_4101() /* ty=Tensor[(12, 15, 4), float32] */;
  (%133, %134)
}

def @func_7453(%var_7448: Tensor[(4, 6, 12), uint64], %var_7449: Tensor[(4, 6, 12), uint64]) -> (Tensor[(4, 6, 12), uint64],) {
  %135 = cast(%var_7449, dtype="uint64") /* ty=Tensor[(4, 6, 12), uint64] */;
  %136 = shape_of(%var_7448, dtype="int32") /* ty=Tensor[(3), int32] */;
  %137 = cast(%var_7448, dtype="uint64") /* ty=Tensor[(4, 6, 12), uint64] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %139 = logical_xor(%137, %138) /* ty=Tensor[(4, 6, 12), uint64] */;
  (%139,)
}

def @func_7334(%var_7313: Tensor[(30), float64], %var_7314: Tensor[(2100), uint8], %var_7315: Tensor[(845), uint16], %var_7317: Tensor[(2002), uint8], %var_7329: Tensor[(6, 78), float32]) -> (Tensor[(90, 1), float32], Tensor[(13, 14, 11), uint8], Tensor[(12, 15, 4), float32], Tensor[(30), float64], Tensor[(2100), uint8], Tensor[(845), uint16], Tensor[(2002), float32], Tensor[(108, 4), float32], Tensor[(6, 78), float64]) {
  %140 = @func_6871() /* ty=(Tensor[(12, 9, 13), float64], Tensor[(90, 1), float32], Tensor[(90), uint64]) */;
  %141 = cast(meta[relay.Constant][6] /* ty=Tensor[(2002), uint8] */, dtype="uint8") /* ty=Tensor[(2002), uint8] */;
  %142 = reshape(%141, newshape=[13, 14, 11]) /* ty=Tensor[(13, 14, 11), uint8] */;
  %143 = @func_2461(%142) /* ty=(Tensor[(13, 14, 11), uint8],) */;
  %144 = cast(%var_7317, dtype="float32") /* ty=Tensor[(2002), float32] */;
  %145 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(2002), uint8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %146 = cast(meta[relay.Constant][6] /* ty=Tensor[(2002), uint8] */, dtype="float32") /* ty=Tensor[(2002), float32] */;
  %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?), float32] */;
  %148 = cast(meta[relay.Constant][7] /* ty=Tensor[(108, 4), bool] */, dtype="float32") /* ty=Tensor[(108, 4), float32] */;
  %149 = cast(meta[relay.Constant][7] /* ty=Tensor[(108, 4), bool] */, dtype="bool") /* ty=Tensor[(108, 4), bool] */;
  %150 = cast(%var_7313, dtype="float64") /* ty=Tensor[(30), float64] */;
  %151 = cast(%var_7314, dtype="uint8") /* ty=Tensor[(2100), uint8] */;
  %152 = cast(%var_7315, dtype="uint16") /* ty=Tensor[(845), uint16] */;
  %153 = reshape(%149, newshape=[4, 12, 9]) /* ty=Tensor[(4, 12, 9), bool] */;
  %154 = reshape(%150, newshape=[30]) /* ty=Tensor[(30), float64] */;
  %155 = reshape(%151, newshape=[1, 2100]) /* ty=Tensor[(1, 2100), uint8] */;
  %156 = reshape(%152, newshape=[65, 13]) /* ty=Tensor[(65, 13), uint16] */;
  %157 = @func_1441(%153, %154, %155, %156) /* ty=(Tensor[(4, 12, 9), int64], Tensor[(1, 6, 5), float64], Tensor[(30), float64], Tensor[(1, 6, 5), float64], Tensor[(13, 4, 9), float32], Tensor[(6, 78), float32], Tensor[(3, 6, 11), float32], Tensor[(10, 14, 15), float64], Tensor[(1, 2100), uint8], Tensor[(65, 13), uint32], Tensor[(13, 13, 5), uint16], Tensor[(30, 2), int32], Tensor[(30, 1), float64]) */;
  %158 = %157.5;
  %159 = cast(%var_7329, dtype="float64") /* ty=Tensor[(6, 78), float64] */;
  %160 = shape_of(%158, dtype="int32") /* ty=Tensor[(2), int32] */;
  %161 = cast(%158, dtype="float64") /* ty=Tensor[(6, 78), float64] */;
  %162 = dyn.reshape(%159, %160, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %163 = %140.1;
  %164 = %143.0;
  %165 = @func_2762() /* ty=Tensor[(12, 15, 4), float32] */;
  %166 = mod(%146, %147) /* ty=Tensor[(2002), float32] */;
  %167 = cos(%148) /* ty=Tensor[(108, 4), float32] */;
  %168 = floor_divide(%161, %162) /* ty=Tensor[(6, 78), float64] */;
  (%163, %164, %165, %var_7313, %var_7314, %var_7315, %166, %167, %168)
}

def @func_4535() -> (Tensor[(12, 9, 13), float64], Tensor[(12, 15, 4), bool], Tensor[(12, 15, 4), float32]) {
  %169 = @func_3539() /* ty=(Tensor[(12, 9, 13), float64],) */;
  %170 = @func_2983() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %171 = %170.0;
  %172 = @func_3171() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float64]) */;
  %173 = %172.1;
  %174 = cast(%173, dtype="bool") /* ty=Tensor[(12, 15, 4), bool] */;
  %175 = shape_of(%171, dtype="int32") /* ty=Tensor[(3), int32] */;
  %176 = cast(%171, dtype="bool") /* ty=Tensor[(12, 15, 4), bool] */;
  %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %178 = cast(%171, dtype="float32") /* ty=Tensor[(12, 15, 4), float32] */;
  %179 = %169.0;
  %180 = greater(%176, %177) /* ty=Tensor[(12, 15, 4), bool] */;
  %181 = tan(%178) /* ty=Tensor[(12, 15, 4), float32] */;
  (%179, %180, %181)
}

def @func_5097() -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(143, 14), float32], Tensor[(143, 14), int32]) {
  %182 = @func_3171() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float64]) */;
  %183 = @func_4824() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(12, 15, 4), float32]) */;
  %184 = cast(meta[relay.Constant][8] /* ty=Tensor[(143, 14), uint8] */, dtype="float64") /* ty=Tensor[(143, 14), float64] */;
  %185 = exp(%184) /* ty=Tensor[(143, 14), float64] */;
  %186 = cast(meta[relay.Constant][8] /* ty=Tensor[(143, 14), uint8] */, dtype="uint8") /* ty=Tensor[(143, 14), uint8] */;
  %187 = reshape(%186, newshape=[13, 14, 11]) /* ty=Tensor[(13, 14, 11), uint8] */;
  %188 = @func_2461(%187) /* ty=(Tensor[(13, 14, 11), uint8],) */;
  %189 = %188.0;
  %190 = cast(%189, dtype="float32") /* ty=Tensor[(13, 14, 11), float32] */;
  %191 = shape_of(%185, dtype="int32") /* ty=Tensor[(2), int32] */;
  %192 = cast(%185, dtype="float32") /* ty=Tensor[(143, 14), float32] */;
  %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %194 = power(%192, %193) /* ty=Tensor[(143, 14), float32] */;
  %195 = cast(%185, dtype="bool") /* ty=Tensor[(143, 14), bool] */;
  %196 = shape_of(%194, dtype="int32") /* ty=Tensor[(2), int32] */;
  %197 = cast(%194, dtype="bool") /* ty=Tensor[(143, 14), bool] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %199 = less_equal(%197, %198) /* ty=Tensor[(143, 14), bool] */;
  %200 = cast(%199, dtype="bool") /* ty=Tensor[(143, 14), bool] */;
  %201 = shape_of(%194, dtype="int32") /* ty=Tensor[(2), int32] */;
  %202 = cast(%194, dtype="bool") /* ty=Tensor[(143, 14), bool] */;
  %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %204 = greater_equal(%202, %203) /* ty=Tensor[(143, 14), bool] */;
  %205 = cast(%204, dtype="float32") /* ty=Tensor[(143, 14), float32] */;
  %206 = cast(%204, dtype="int32") /* ty=Tensor[(143, 14), int32] */;
  %207 = shape_of(%194, dtype="int32") /* ty=Tensor[(2), int32] */;
  %208 = cast(%194, dtype="int32") /* ty=Tensor[(143, 14), int32] */;
  %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %210 = %182.0;
  %211 = %183.1;
  %212 = sin(%205) /* ty=Tensor[(143, 14), float32] */;
  %213 = add(%208, %209) /* ty=Tensor[(143, 14), int32] */;
  (%210, %211, %212, %213)
}

def @func_3358(%var_3353: Tensor[(16, 12, 14), float32]) -> Tensor[(16, 12, 14), float32] {
  %214 = cast(meta[relay.Constant][9] /* ty=Tensor[(16, 12, 14), float32] */, dtype="float32") /* ty=Tensor[(16, 12, 14), float32] */;
  %215 = shape_of(%var_3353, dtype="int32") /* ty=Tensor[(3), int32] */;
  %216 = cast(%var_3353, dtype="float32") /* ty=Tensor[(16, 12, 14), float32] */;
  %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%216, %217) /* ty=Tensor[(16, 12, 14), float32] */
}

def @func_4073() -> Tensor[(12, 15, 4), float32] {
  %218 = @func_2983() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %218.0
}

def @func_7107() -> (Tensor[(15, 2, 1), float64],) {
  %219 = cast(meta[relay.Constant][10] /* ty=Tensor[(15, 2, 1), float64] */, dtype="float64") /* ty=Tensor[(15, 2, 1), float64] */;
  %220 = log(%219) /* ty=Tensor[(15, 2, 1), float64] */;
  (%220,)
}

def @func_7580() -> Tensor[(198), int64] {
  %221 = @func_6355() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float64], Tensor[(198), int64]) */;
  %221.2
}

def @func_3786(%var_3780: Tensor[(12, 9, 13), float64]) -> (Tensor[(12, 9, 13), bool],) {
  %222 = @func_2255() /* ty=(Tensor[(12, 9, 13), float64],) */;
  %223 = %222.0;
  %224 = cast(%var_3780, dtype="bool") /* ty=Tensor[(12, 9, 13), bool] */;
  %225 = shape_of(%223, dtype="int32") /* ty=Tensor[(3), int32] */;
  %226 = cast(%223, dtype="bool") /* ty=Tensor[(12, 9, 13), bool] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %228 = greater_equal(%226, %227) /* ty=Tensor[(12, 9, 13), bool] */;
  (%228,)
}

def @func_7643() -> Tensor[(12, 15, 4), float32] {
  @func_3292() /* ty=Tensor[(12, 15, 4), float32] */
}

def @func_7377() -> (Tensor[(12, 15, 4), float32], Tensor[(90), uint64]) {
  %229 = @func_2030() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %230 = @func_7130() /* ty=(Tensor[(90), uint64],) */;
  %231 = %229.0;
  %232 = %230.0;
  (%231, %232)
}

def @func_2158() -> (Tensor[(12, 9, 13), float64], Tensor[(13, 13, 5), uint16], Tensor[(3, 700), uint8], Tensor[(13, 65), uint16], Tensor[(12, 15, 4), float32]) {
  %233 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 700), uint8] */, dtype="uint8") /* ty=Tensor[(3, 700), uint8] */;
  %234 = cast(meta[relay.Constant][12] /* ty=Tensor[(13, 65), uint16] */, dtype="uint16") /* ty=Tensor[(13, 65), uint16] */;
  %235 = reshape(%233, newshape=[10, 14, 15]) /* ty=Tensor[(10, 14, 15), uint8] */;
  %236 = reshape(%234, newshape=[845]) /* ty=Tensor[(845), uint16] */;
  %237 = @func_1038(%235, %236) /* ty=(Tensor[(10, 14, 15), uint8], Tensor[(13, 13, 5), uint16], Tensor[(845), uint16], Tensor[(10, 14, 15), float64]) */;
  %238 = @func_1932() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %239 = @func_2060() /* ty=Tensor[(12, 9, 13), float64] */;
  %240 = %237.1;
  %241 = %238.0;
  (%239, %240, meta[relay.Constant][11] /* ty=Tensor[(3, 700), uint8] */, meta[relay.Constant][12] /* ty=Tensor[(13, 65), uint16] */, %241)
}

def @func_2255() -> (Tensor[(12, 9, 13), float64],) {
  %242 = @func_2060() /* ty=Tensor[(12, 9, 13), float64] */;
  (%242,)
}

def @func_2983() -> (Tensor[(12, 15, 4), float32],) {
  %243 = @func_2282() /* ty=Tensor[(12, 15, 4), float32] */;
  (%243,)
}

def @func_4719() -> (Tensor[(12, 15, 4), float32],) {
  %244 = @func_1932() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %245 = %244.0;
  (%245,)
}

def @func_4567() -> (Tensor[(12, 15, 4), float32],) {
  %246 = @func_3171() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float64]) */;
  %247 = %246.0;
  (%247,)
}

def @func_6355() -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float64], Tensor[(198), int64]) {
  %248 = @func_5986() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32]) */;
  %249 = cast(meta[relay.Constant][13] /* ty=Tensor[(198), int64] */, dtype="int64") /* ty=Tensor[(198), int64] */;
  %250 = reshape(%249, newshape=[198, 1]) /* ty=Tensor[(198, 1), int64] */;
  %251 = @func_4003(%250) /* ty=(Tensor[(12, 15, 4), float64], Tensor[(1, 845), uint16], Tensor[(845), uint16], Tensor[(12, 15, 4), float64], Tensor[(1, 450), float64], Tensor[(50, 9), float64], Tensor[(15, 6), uint64], Tensor[(12, 15, 4), float32], Tensor[(198, 315), uint32]) */;
  %252 = %248.0;
  %253 = %251.3;
  (%252, %253, meta[relay.Constant][13] /* ty=Tensor[(198), int64] */)
}

def @func_4272() -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(7, 15, 8), float64]) {
  %254 = @func_3339() /* ty=Tensor[(12, 15, 4), float32] */;
  %255 = @func_2282() /* ty=Tensor[(12, 15, 4), float32] */;
  %256 = @func_2748() /* ty=Tensor[(7, 15, 8), float64] */;
  (%254, %255, %256)
}

def @func_5936(%var_5910: Tensor[(24), float32]) -> (Tensor[(12, 15, 4), float32], Tensor[(2, 3, 4), float32], Tensor[(24), float32], Tensor[(6, 9, 1), float32]) {
  %257 = @func_4567() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %258 = cast(%var_5910, dtype="float32") /* ty=Tensor[(24), float32] */;
  %259 = cast(%var_5910, dtype="float32") /* ty=Tensor[(24), float32] */;
  %260 = reshape(%258, newshape=[2, 3, 4]) /* ty=Tensor[(2, 3, 4), float32] */;
  %261 = reshape(%259, newshape=[2, 3, 4]) /* ty=Tensor[(2, 3, 4), float32] */;
  %262 = @func_4653() /* ty=(Tensor[(6, 9, 1), float32],) */;
  %263 = %257.0;
  %264 = @func_5279(%260, %261) /* ty=Tensor[(2, 3, 4), float32] */;
  %265 = %262.0;
  (%263, %264, %var_5910, %265)
}

def @func_7186() -> (Tensor[(13, 13, 5), uint16], Tensor[(12, 9, 13), float64], Tensor[(468, 1), float32]) {
  %266 = @func_4217() /* ty=Tensor[(13, 13, 5), uint16] */;
  %267 = cast(%266, dtype="uint16") /* ty=Tensor[(13, 13, 5), uint16] */;
  %268 = cast(meta[relay.Constant][14] /* ty=Tensor[(468, 1), float32] */, dtype="float32") /* ty=Tensor[(468, 1), float32] */;
  %269 = reshape(%267, newshape=[845]) /* ty=Tensor[(845), uint16] */;
  %270 = reshape(%268, newshape=[468]) /* ty=Tensor[(468), float32] */;
  %271 = @func_1781(%269, %270) /* ty=(Tensor[(12, 9, 13), float64], Tensor[(3, 6, 11), float32], Tensor[(845), uint16], Tensor[(13, 4, 9), float32], Tensor[(468), float32], Tensor[(3, 6, 11), float32], Tensor[(12, 9, 13), float64], Tensor[(30, 1), float64]) */;
  %272 = %271.6;
  (%266, %272, meta[relay.Constant][14] /* ty=Tensor[(468, 1), float32] */)
}

def @func_7159() -> Tensor[(12, 15, 4), float32] {
  %273 = @func_6355() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float64], Tensor[(198), int64]) */;
  %273.0
}

def @func_5334() -> Tensor[(12, 15, 4), float32] {
  %274 = @func_3478() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %274.0
}

def @func_2615(%var_2468: Tensor[(10, 5, 9), float64], %var_2469: Tensor[(10, 5, 9), float64], %var_2497: Tensor[(13, 13, 5), uint16], %var_2532: Tensor[(90), uint64], %var_2553: Tensor[(10, 5, 9), bool], %var_2590: Tensor[(10, 5, 9), bool]) -> (Tensor[(12, 9, 13), float64], Tensor[(13, 13, 5), int64], Tensor[(12, 9, 13), float64], Tensor[(10, 5, 9), bool], Tensor[(16, ?, 10), float32], Tensor[(90), uint64], Tensor[(12, 15, 4), float32], Tensor[(90, 1), float32], Tensor[(1, 6, 5), float64], Tensor[(10, 5, 9), float32], Tensor[(10, 5, 9), float64]) {
  %275 = @func_2158() /* ty=(Tensor[(12, 9, 13), float64], Tensor[(13, 13, 5), uint16], Tensor[(3, 700), uint8], Tensor[(13, 65), uint16], Tensor[(12, 15, 4), float32]) */;
  %276 = %275.1;
  %277 = cast(%var_2497, dtype="int64") /* ty=Tensor[(13, 13, 5), int64] */;
  %278 = shape_of(%276, dtype="int32") /* ty=Tensor[(3), int32] */;
  %279 = cast(%276, dtype="int64") /* ty=Tensor[(13, 13, 5), int64] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %281 = @func_1576() /* ty=(Tensor[(30, 1), float64], Tensor[(12, 9, 13), float64], Tensor[(1404), int8]) */;
  %282 = cast(%var_2469, dtype="float64") /* ty=Tensor[(10, 5, 9), float64] */;
  %283 = shape_of(%var_2468, dtype="int32") /* ty=Tensor[(3), int32] */;
  %284 = cast(%var_2468, dtype="float64") /* ty=Tensor[(10, 5, 9), float64] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %286 = subtract(%284, %285) /* ty=Tensor[(10, 5, 9), float64] */;
  %287 = cast(%286, dtype="float64") /* ty=Tensor[(10, 5, 9), float64] */;
  %288 = asin(%287) /* ty=Tensor[(10, 5, 9), float64] */;
  %289 = cast(%286, dtype="bool") /* ty=Tensor[(10, 5, 9), bool] */;
  %290 = shape_of(%288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%288, dtype="bool") /* ty=Tensor[(10, 5, 9), bool] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %293 = cast(%var_2532, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %294 = reshape(%293, newshape=[90, 1]) /* ty=Tensor[(90, 1), uint64] */;
  %295 = @func_1970(%294) /* ty=(Tensor[(16, ?, 10), float32], Tensor[(2, 9, 5), bool], Tensor[(90, 1), float32]) */;
  %296 = @func_2030() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %297 = cast(%var_2532, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %298 = reshape(%297, newshape=[90, 1]) /* ty=Tensor[(90, 1), uint64] */;
  %299 = @func_1970(%298) /* ty=(Tensor[(16, ?, 10), float32], Tensor[(2, 9, 5), bool], Tensor[(90, 1), float32]) */;
  %300 = cast(%var_2497, dtype="uint16") /* ty=Tensor[(13, 13, 5), uint16] */;
  %301 = cast(%var_2532, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %302 = reshape(%300, newshape=[1, 845]) /* ty=Tensor[(1, 845), uint16] */;
  %303 = reshape(%301, newshape=[3, 30]) /* ty=Tensor[(3, 30), uint64] */;
  %304 = @func_1356(%302, %303) /* ty=(Tensor[(12, 15, 4), float32], Tensor[(845), uint16], Tensor[(2100), uint8], Tensor[(1, 845), uint16], Tensor[(30, 1), float64], Tensor[(1, 6, 5), float64], Tensor[(2, 9, 5), bool], Tensor[(3, 30), float32], Tensor[(2, 9, 5), bool]) */;
  %305 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 5, 9), float64] */, dtype="int16") /* ty=Tensor[(10, 5, 9), int16] */;
  %306 = shape_of(%288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %307 = cast(%288, dtype="int16") /* ty=Tensor[(10, 5, 9), int16] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %309 = maximum(%307, %308) /* ty=Tensor[(10, 5, 9), int16] */;
  %310 = cast(%286, dtype="bool") /* ty=Tensor[(10, 5, 9), bool] */;
  %311 = shape_of(%309, dtype="int32") /* ty=Tensor[(3), int32] */;
  %312 = cast(%309, dtype="bool") /* ty=Tensor[(10, 5, 9), bool] */;
  %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %314 = not_equal(%312, %313) /* ty=Tensor[(10, 5, 9), bool] */;
  %315 = cast(%var_2553, dtype="bool") /* ty=Tensor[(10, 5, 9), bool] */;
  %316 = shape_of(%314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %317 = cast(%314, dtype="bool") /* ty=Tensor[(10, 5, 9), bool] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %319 = logical_and(%317, %318) /* ty=Tensor[(10, 5, 9), bool] */;
  %320 = cast(%var_2590, dtype="float32") /* ty=Tensor[(10, 5, 9), float32] */;
  %321 = shape_of(%319, dtype="int32") /* ty=Tensor[(3), int32] */;
  %322 = cast(%319, dtype="float32") /* ty=Tensor[(10, 5, 9), float32] */;
  %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %324 = cast(%var_2590, dtype="float64") /* ty=Tensor[(10, 5, 9), float64] */;
  %325 = @func_2060() /* ty=Tensor[(12, 9, 13), float64] */;
  %326 = bitwise_or(%279, %280) /* ty=Tensor[(13, 13, 5), int64] */;
  %327 = %281.1;
  %328 = logical_or(%291, %292) /* ty=Tensor[(10, 5, 9), bool] */;
  %329 = %295.0;
  %330 = %296.0;
  %331 = %299.2;
  %332 = %304.5;
  %333 = minimum(%322, %323) /* ty=Tensor[(10, 5, 9), float32] */;
  %334 = erf(%324) /* ty=Tensor[(10, 5, 9), float64] */;
  (%325, %326, %327, %328, %329, %var_2532, %330, %331, %332, %333, %334)
}

def @func_3014(%var_2986: Tensor[(4, 10, 5), int8], %var_2987: Tensor[(4, 10, 5), int8]) -> (Tensor[(4, 10, 5), float64],) {
  %335 = cast(%var_2987, dtype="bool") /* ty=Tensor[(4, 10, 5), bool] */;
  %336 = shape_of(%var_2986, dtype="int32") /* ty=Tensor[(3), int32] */;
  %337 = cast(%var_2986, dtype="bool") /* ty=Tensor[(4, 10, 5), bool] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %339 = not_equal(%337, %338) /* ty=Tensor[(4, 10, 5), bool] */;
  %340 = cast(%339, dtype="float64") /* ty=Tensor[(4, 10, 5), float64] */;
  %341 = shape_of(%var_2986, dtype="int32") /* ty=Tensor[(3), int32] */;
  %342 = cast(%var_2986, dtype="float64") /* ty=Tensor[(4, 10, 5), float64] */;
  %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %344 = multiply(%342, %343) /* ty=Tensor[(4, 10, 5), float64] */;
  (%344,)
}

def @func_1038(%var_1017: Tensor[(10, 14, 15), uint8], %var_1028: Tensor[(845), uint16]) -> (Tensor[(10, 14, 15), uint8], Tensor[(13, 13, 5), uint16], Tensor[(845), uint16], Tensor[(10, 14, 15), float64]) {
  %345 = cast(%var_1017, dtype="uint8") /* ty=Tensor[(10, 14, 15), uint8] */;
  %346 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(10, 14, 15), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %347 = cast(meta[relay.Constant][16] /* ty=Tensor[(10, 14, 15), uint8] */, dtype="uint8") /* ty=Tensor[(10, 14, 15), uint8] */;
  %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %349 = cast(%var_1028, dtype="uint16") /* ty=Tensor[(845), uint16] */;
  %350 = reshape(%349, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), uint16] */;
  %351 = @func_759(%350) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(3, 6, 11), float32], Tensor[(99, 2), int64]) */;
  %352 = cast(meta[relay.Constant][16] /* ty=Tensor[(10, 14, 15), uint8] */, dtype="float64") /* ty=Tensor[(10, 14, 15), float64] */;
  %353 = bitwise_or(%347, %348) /* ty=Tensor[(10, 14, 15), uint8] */;
  %354 = %351.0;
  %355 = exp(%352) /* ty=Tensor[(10, 14, 15), float64] */;
  (%353, %354, %var_1028, %355)
}

def @func_1576() -> (Tensor[(30, 1), float64], Tensor[(12, 9, 13), float64], Tensor[(1404), int8]) {
  %356 = @func_1282() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */;
  %357 = cast(meta[relay.Constant][17] /* ty=Tensor[(1404), int8] */, dtype="int8") /* ty=Tensor[(1404), int8] */;
  %358 = reshape(%357, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), int8] */;
  %359 = %356.3;
  %360 = @func_174(%358) /* ty=Tensor[(12, 9, 13), float64] */;
  (%359, %360, meta[relay.Constant][17] /* ty=Tensor[(1404), int8] */)
}

def @func_5431() -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32]) {
  %361 = @func_3511() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %362 = @func_4796() /* ty=Tensor[(12, 15, 4), float32] */;
  %363 = @func_4796() /* ty=Tensor[(12, 15, 4), float32] */;
  %364 = @func_4073() /* ty=Tensor[(12, 15, 4), float32] */;
  %365 = @func_4101() /* ty=Tensor[(12, 15, 4), float32] */;
  %366 = %361.0;
  (%362, %363, %364, %365, %366)
}

def @func_6771(%var_6727: Tensor[(30), float64], %var_6760: Tensor[(845), uint16]) -> (Tensor[(12, 9, 13), float64], Tensor[(?, 6, 5), uint16], Tensor[(30), float64], Tensor[(9, 15, 2), bool], Tensor[(12, 15, 4), float32], Tensor[(24, 112), float32], Tensor[(3, 6, 11), float32], Tensor[(845), uint16]) {
  %367 = @func_5471() /* ty=(Tensor[(12, 9, 13), float64],) */;
  %368 = cast(%var_6727, dtype="float64") /* ty=Tensor[(30), float64] */;
  %369 = reshape(%368, newshape=[1, 6, 5]) /* ty=Tensor[(1, 6, 5), float64] */;
  %370 = @func_1811(%369) /* ty=(Tensor[(?, 6, 5), uint16], Tensor[(?, 6, 5), uint16]) */;
  %371 = cast(meta[relay.Constant][18] /* ty=Tensor[(24, 112), float32] */, dtype="float32") /* ty=Tensor[(24, 112), float32] */;
  %372 = cast(meta[relay.Constant][18] /* ty=Tensor[(24, 112), float32] */, dtype="float64") /* ty=Tensor[(24, 112), float64] */;
  %373 = cast(meta[relay.Constant][18] /* ty=Tensor[(24, 112), float32] */, dtype="float64") /* ty=Tensor[(24, 112), float64] */;
  %374 = cast(meta[relay.Constant][18] /* ty=Tensor[(24, 112), float32] */, dtype="bool") /* ty=Tensor[(24, 112), bool] */;
  %375 = reshape(%371, newshape=[4, 672]) /* ty=Tensor[(4, 672), float32] */;
  %376 = reshape(%372, newshape=[4, 672]) /* ty=Tensor[(4, 672), float64] */;
  %377 = reshape(%373, newshape=[4, 672]) /* ty=Tensor[(4, 672), float64] */;
  %378 = reshape(%374, newshape=[4, 672]) /* ty=Tensor[(4, 672), bool] */;
  %379 = @func_3437(%375, %376, %377, %378) /* ty=(Tensor[(12, 9, 13), float64], Tensor[(16, 12, 14), float32], Tensor[(12, 15, 4), float32], Tensor[(13, 13, 5), uint16], Tensor[(432), bool], Tensor[(845), uint16], Tensor[(12, 15, 4), float32], Tensor[(4, 672), uint8], Tensor[(4, 672), bool]) */;
  %380 = cast(%var_6760, dtype="uint16") /* ty=Tensor[(845), uint16] */;
  %381 = reshape(%380, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), uint16] */;
  %382 = @func_759(%381) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(3, 6, 11), float32], Tensor[(99, 2), int64]) */;
  %383 = %367.0;
  %384 = %370.1;
  %385 = @func_5840() /* ty=Tensor[(9, 15, 2), bool] */;
  %386 = %379.2;
  %387 = %382.1;
  (%383, %384, %var_6727, %385, %386, meta[relay.Constant][18] /* ty=Tensor[(24, 112), float32] */, %387, %var_6760)
}

def @func_2965(%var_2893: Tensor[(720), float32]) -> (Tensor[(13, 13, 5), uint16], Tensor[(12, 15, 4), uint64], Tensor[(720), float32], Tensor[(?, 6, 5), uint16], Tensor[(10, 3), float64], Tensor[(2, 9, 5), float32], Tensor[(13, 65), uint16], Tensor[(1404), int8], Tensor[(7, 15, 8), float64], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) {
  %388 = @func_2158() /* ty=(Tensor[(12, 9, 13), float64], Tensor[(13, 13, 5), uint16], Tensor[(3, 700), uint8], Tensor[(13, 65), uint16], Tensor[(12, 15, 4), float32]) */;
  %389 = cast(%var_2893, dtype="float32") /* ty=Tensor[(720), float32] */;
  %390 = reshape(%389, newshape=[12, 15, 4]) /* ty=Tensor[(12, 15, 4), float32] */;
  %391 = @func_2115(%390) /* ty=(Tensor[(12, 15, 4), uint64], Tensor[(12, 15, 4), float64]) */;
  %392 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 3), float64] */, dtype="float64") /* ty=Tensor[(10, 3), float64] */;
  %393 = reshape(%392, newshape=[1, 6, 5]) /* ty=Tensor[(1, 6, 5), float64] */;
  %394 = @func_1811(%393) /* ty=(Tensor[(?, 6, 5), uint16], Tensor[(?, 6, 5), uint16]) */;
  %395 = cast(meta[relay.Constant][20] /* ty=Tensor[(90), uint64] */, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %396 = cast(meta[relay.Constant][20] /* ty=Tensor[(90), uint64] */, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %397 = reshape(%395, newshape=[2, 9, 5]) /* ty=Tensor[(2, 9, 5), uint64] */;
  %398 = reshape(%396, newshape=[2, 9, 5]) /* ty=Tensor[(2, 9, 5), uint64] */;
  %399 = @func_1150(%397, %398) /* ty=Tensor[(2, 9, 5), bool] */;
  %400 = cast(meta[relay.Constant][20] /* ty=Tensor[(90), uint64] */, dtype="float32") /* ty=Tensor[(90), float32] */;
  %401 = shape_of(%399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %402 = cast(%399, dtype="float32") /* ty=Tensor[(2, 9, 5), float32] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %404 = @func_2158() /* ty=(Tensor[(12, 9, 13), float64], Tensor[(13, 13, 5), uint16], Tensor[(3, 700), uint8], Tensor[(13, 65), uint16], Tensor[(12, 15, 4), float32]) */;
  %405 = %394.1;
  %406 = cast(%405, dtype="float64") /* ty=Tensor[(?, 6, 5), float64] */;
  %407 = reshape(%406, newshape=[1, 6, 5]) /* ty=Tensor[(1, 6, 5), float64] */;
  %408 = @func_428(%407) /* ty=(Tensor[(1, 6, 5), float64],) */;
  %409 = @func_1282() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */;
  %410 = %388.1;
  %411 = %391.0;
  %412 = power(%402, %403) /* ty=Tensor[(2, 9, 5), float32] */;
  %413 = %404.3;
  %414 = @func_2721() /* ty=Tensor[(1404), int8] */;
  %415 = @func_2748() /* ty=Tensor[(7, 15, 8), float64] */;
  %416 = %408.0;
  %417 = %409.3;
  (%410, %411, %var_2893, %405, meta[relay.Constant][19] /* ty=Tensor[(10, 3), float64] */, %412, %413, %414, %415, %416, %417)
}

def @func_7004() -> (Tensor[(6, 9, ?), bool],) {
  %418 = @func_6699() /* ty=(Tensor[(6, 9, ?), bool],) */;
  %419 = %418.0;
  (%419,)
}

def @func_2461(%var_2435: Tensor[(13, 14, 11), uint8]) -> (Tensor[(13, 14, 11), uint8],) {
  %420 = cast(%var_2435, dtype="uint8") /* ty=Tensor[(13, 14, 11), uint8] */;
  %421 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(13, 14, 11), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 14, 11), uint8] */, dtype="uint8") /* ty=Tensor[(13, 14, 11), uint8] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %424 = bitwise_and(%422, %423) /* ty=Tensor[(13, 14, 11), uint8] */;
  (%424,)
}

def @func_4653() -> (Tensor[(6, 9, 1), float32],) {
  %425 = cast(meta[relay.Constant][22] /* ty=Tensor[(6, 9, 1), float32] */, dtype="float32") /* ty=Tensor[(6, 9, 1), float32] */;
  %426 = tan(%425) /* ty=Tensor[(6, 9, 1), float32] */;
  (%426,)
}

def @func_7547() -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32]) {
  %427 = @func_2983() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %428 = @func_4073() /* ty=Tensor[(12, 15, 4), float32] */;
  %429 = %427.0;
  (%428, %429)
}

def @func_6993() -> (Tensor[(12, 15, 4), float32],) {
  %430 = @func_4423() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(4, 10, 5), float64], Tensor[(200), int8], Tensor[(12, 15, 4), float32]) */;
  %431 = %430.3;
  (%431,)
}

def @func_7022() -> (Tensor[(12, 9, 13), float64], Tensor[(12, 15, 4), float32]) {
  %432 = @func_4051() /* ty=(Tensor[(30, 1), float64], Tensor[(12, 9, 13), float64]) */;
  %433 = @func_6993() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %434 = %432.1;
  %435 = %433.0;
  (%434, %435)
}

def @func_2762() -> Tensor[(12, 15, 4), float32] {
  %436 = @func_1932() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %436.0
}

def @func_3478() -> (Tensor[(12, 15, 4), float32],) {
  %437 = @func_3339() /* ty=Tensor[(12, 15, 4), float32] */;
  (%437,)
}

def @func_6852() -> (Tensor[(12, 15, 4), float32],) {
  %438 = @func_6096() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(3, 6, 11), int64], Tensor[(198), int64]) */;
  %439 = %438.0;
  (%439,)
}

def @func_5471() -> (Tensor[(12, 9, 13), float64],) {
  %440 = @func_2060() /* ty=Tensor[(12, 9, 13), float64] */;
  (%440,)
}

def @func_5689(%var_5630: Tensor[(3, 12, 13), uint16], %var_5631: Tensor[(3, 12, 13), uint16], %var_5654: Tensor[(198, 1), int64], %var_5685: Tensor[(3, 12, 13), uint16]) -> (Tensor[(3, 12, 13), uint16], Tensor[(13, 13, 5), uint16], Tensor[(2688), float32], Tensor[(15, 6), uint64], Tensor[(198, 1), int64], Tensor[(12, 15, 4), float32], Tensor[(3, 12, 13), bool]) {
  %441 = cast(%var_5631, dtype="uint16") /* ty=Tensor[(3, 12, 13), uint16] */;
  %442 = shape_of(%var_5630, dtype="int32") /* ty=Tensor[(3), int32] */;
  %443 = cast(%var_5630, dtype="uint16") /* ty=Tensor[(3, 12, 13), uint16] */;
  %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %445 = cast(meta[relay.Constant][23] /* ty=Tensor[(2688), float32] */, dtype="float32") /* ty=Tensor[(2688), float32] */;
  %446 = cast(meta[relay.Constant][23] /* ty=Tensor[(2688), float32] */, dtype="float64") /* ty=Tensor[(2688), float64] */;
  %447 = cast(meta[relay.Constant][23] /* ty=Tensor[(2688), float32] */, dtype="float64") /* ty=Tensor[(2688), float64] */;
  %448 = cast(meta[relay.Constant][23] /* ty=Tensor[(2688), float32] */, dtype="bool") /* ty=Tensor[(2688), bool] */;
  %449 = reshape(%445, newshape=[4, 672]) /* ty=Tensor[(4, 672), float32] */;
  %450 = reshape(%446, newshape=[4, 672]) /* ty=Tensor[(4, 672), float64] */;
  %451 = reshape(%447, newshape=[4, 672]) /* ty=Tensor[(4, 672), float64] */;
  %452 = reshape(%448, newshape=[4, 672]) /* ty=Tensor[(4, 672), bool] */;
  %453 = @func_3437(%449, %450, %451, %452) /* ty=(Tensor[(12, 9, 13), float64], Tensor[(16, 12, 14), float32], Tensor[(12, 15, 4), float32], Tensor[(13, 13, 5), uint16], Tensor[(432), bool], Tensor[(845), uint16], Tensor[(12, 15, 4), float32], Tensor[(4, 672), uint8], Tensor[(4, 672), bool]) */;
  %454 = cast(%var_5654, dtype="int64") /* ty=Tensor[(198, 1), int64] */;
  %455 = reshape(%454, newshape=[198, 1]) /* ty=Tensor[(198, 1), int64] */;
  %456 = @func_4003(%455) /* ty=(Tensor[(12, 15, 4), float64], Tensor[(1, 845), uint16], Tensor[(845), uint16], Tensor[(12, 15, 4), float64], Tensor[(1, 450), float64], Tensor[(50, 9), float64], Tensor[(15, 6), uint64], Tensor[(12, 15, 4), float32], Tensor[(198, 315), uint32]) */;
  %457 = @func_4567() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %458 = cast(%var_5685, dtype="bool") /* ty=Tensor[(3, 12, 13), bool] */;
  %459 = shape_of(%var_5631, dtype="int32") /* ty=Tensor[(3), int32] */;
  %460 = cast(%var_5631, dtype="bool") /* ty=Tensor[(3, 12, 13), bool] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %462 = logical_xor(%443, %444) /* ty=Tensor[(3, 12, 13), uint16] */;
  %463 = %453.3;
  %464 = %456.6;
  %465 = %457.0;
  %466 = less_equal(%460, %461) /* ty=Tensor[(3, 12, 13), bool] */;
  (%462, %463, meta[relay.Constant][23] /* ty=Tensor[(2688), float32] */, %464, %var_5654, %465, %466)
}

def @func_5536() -> (Tensor[(12, 15, 4), bool],) {
  %467 = @func_4423() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(4, 10, 5), float64], Tensor[(200), int8], Tensor[(12, 15, 4), float32]) */;
  %468 = %467.3;
  %469 = cast(meta[relay.Constant][24] /* ty=Tensor[(12, 15, 4), float32] */, dtype="bool") /* ty=Tensor[(12, 15, 4), bool] */;
  %470 = shape_of(%468, dtype="int32") /* ty=Tensor[(3), int32] */;
  %471 = cast(%468, dtype="bool") /* ty=Tensor[(12, 15, 4), bool] */;
  %472 = dyn.reshape(%469, %470, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %473 = not_equal(%471, %472) /* ty=Tensor[(12, 15, 4), bool] */;
  (%473,)
}

def @func_4423() -> (Tensor[(12, 15, 4), float32], Tensor[(4, 10, 5), float64], Tensor[(200), int8], Tensor[(12, 15, 4), float32]) {
  %474 = cast(meta[relay.Constant][25] /* ty=Tensor[(200), int8] */, dtype="int8") /* ty=Tensor[(200), int8] */;
  %475 = cast(meta[relay.Constant][25] /* ty=Tensor[(200), int8] */, dtype="int8") /* ty=Tensor[(200), int8] */;
  %476 = reshape(%474, newshape=[4, 10, 5]) /* ty=Tensor[(4, 10, 5), int8] */;
  %477 = reshape(%475, newshape=[4, 10, 5]) /* ty=Tensor[(4, 10, 5), int8] */;
  %478 = @func_3014(%476, %477) /* ty=(Tensor[(4, 10, 5), float64],) */;
  %479 = @func_2282() /* ty=Tensor[(12, 15, 4), float32] */;
  %480 = %478.0;
  %481 = @func_4101() /* ty=Tensor[(12, 15, 4), float32] */;
  (%479, %480, meta[relay.Constant][25] /* ty=Tensor[(200), int8] */, %481)
}

def @func_4331(%var_4307: Tensor[(12, 15, 4), float32], %var_4329: Tensor[(1, 1404), int8]) -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(13, 13, 5), uint16], Tensor[(12, 9, 13), float64], Tensor[(1, 1404), int8]) {
  %482 = @func_3478() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %483 = %482.0;
  %484 = cast(%483, dtype="float32") /* ty=Tensor[(12, 15, 4), float32] */;
  %485 = cast(%var_4307, dtype="float32") /* ty=Tensor[(12, 15, 4), float32] */;
  %486 = shape_of(%483, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(%483, dtype="float32") /* ty=Tensor[(12, 15, 4), float32] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %489 = cast(%var_4329, dtype="int8") /* ty=Tensor[(1, 1404), int8] */;
  %490 = reshape(%489, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), int8] */;
  %491 = rsqrt(%484) /* ty=Tensor[(12, 15, 4), float32] */;
  %492 = floor_mod(%487, %488) /* ty=Tensor[(12, 15, 4), float32] */;
  %493 = @func_2762() /* ty=Tensor[(12, 15, 4), float32] */;
  %494 = @func_4217() /* ty=Tensor[(13, 13, 5), uint16] */;
  %495 = @func_174(%490) /* ty=Tensor[(12, 9, 13), float64] */;
  (%491, %492, %493, %494, %495, %var_4329)
}

def @func_1150(%var_1143: Tensor[(2, 9, 5), uint64], %var_1144: Tensor[(2, 9, 5), uint64]) -> Tensor[(2, 9, 5), bool] {
  %496 = cast(%var_1144, dtype="bool") /* ty=Tensor[(2, 9, 5), bool] */;
  %497 = shape_of(%var_1143, dtype="int32") /* ty=Tensor[(3), int32] */;
  %498 = cast(%var_1143, dtype="bool") /* ty=Tensor[(2, 9, 5), bool] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%498, %499) /* ty=Tensor[(2, 9, 5), bool] */
}

def @func_2708(%var_2655: Tensor[(78, 6), float32]) -> (Tensor[(12, 15, 4), float32], Tensor[(845), uint16], Tensor[(78, 6), uint32], Tensor[(12, 9, 13), float64], Tensor[(12, 15, 4), float32], Tensor[(12, 9, 13), float64], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32]) {
  %500 = @func_2030() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %501 = cast(meta[relay.Constant][27] /* ty=Tensor[(78, 6), float32] */, dtype="uint32") /* ty=Tensor[(78, 6), uint32] */;
  %502 = shape_of(%var_2655, dtype="int32") /* ty=Tensor[(2), int32] */;
  %503 = cast(%var_2655, dtype="uint32") /* ty=Tensor[(78, 6), uint32] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %505 = cast(meta[relay.Constant][26] /* ty=Tensor[(845), uint16] */, dtype="uint16") /* ty=Tensor[(845), uint16] */;
  %506 = cast(%var_2655, dtype="float32") /* ty=Tensor[(78, 6), float32] */;
  %507 = reshape(%505, newshape=[845]) /* ty=Tensor[(845), uint16] */;
  %508 = reshape(%506, newshape=[468]) /* ty=Tensor[(468), float32] */;
  %509 = @func_1781(%507, %508) /* ty=(Tensor[(12, 9, 13), float64], Tensor[(3, 6, 11), float32], Tensor[(845), uint16], Tensor[(13, 4, 9), float32], Tensor[(468), float32], Tensor[(3, 6, 11), float32], Tensor[(12, 9, 13), float64], Tensor[(30, 1), float64]) */;
  %510 = %509.6;
  %511 = cast(%510, dtype="int8") /* ty=Tensor[(12, 9, 13), int8] */;
  %512 = reshape(%511, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), int8] */;
  %513 = @func_1932() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %514 = cast(%510, dtype="float64") /* ty=Tensor[(12, 9, 13), float64] */;
  %515 = @func_1932() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %516 = %500.0;
  %517 = minimum(%503, %504) /* ty=Tensor[(78, 6), uint32] */;
  %518 = @func_174(%512) /* ty=Tensor[(12, 9, 13), float64] */;
  %519 = %513.0;
  %520 = exp(%514) /* ty=Tensor[(12, 9, 13), float64] */;
  %521 = %515.0;
  %522 = @func_2282() /* ty=Tensor[(12, 15, 4), float32] */;
  (%516, meta[relay.Constant][26] /* ty=Tensor[(845), uint16] */, %517, %518, %519, %520, %521, %522)
}

def @func_6717() -> Tensor[(12, 15, 4), float32] {
  %523 = @func_5431() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32]) */;
  %523.0
}

def @func_2721() -> Tensor[(1404), int8] {
  %524 = @func_1576() /* ty=(Tensor[(30, 1), float64], Tensor[(12, 9, 13), float64], Tensor[(1404), int8]) */;
  %524.2
}

def @func_7872() -> (Tensor[(3, 6, 11), int64],) {
  %525 = @func_6096() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(3, 6, 11), int64], Tensor[(198), int64]) */;
  %526 = %525.2;
  (%526,)
}

def @func_1356(%var_1317: Tensor[(1, 845), uint16], %var_1336: Tensor[(3, 30), uint64]) -> (Tensor[(12, 15, 4), float32], Tensor[(845), uint16], Tensor[(2100), uint8], Tensor[(1, 845), uint16], Tensor[(30, 1), float64], Tensor[(1, 6, 5), float64], Tensor[(2, 9, 5), bool], Tensor[(3, 30), float32], Tensor[(2, 9, 5), bool]) {
  %527 = @func_1282() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */;
  %528 = cast(meta[relay.Constant][28] /* ty=Tensor[(2100), uint8] */, dtype="uint8") /* ty=Tensor[(2100), uint8] */;
  %529 = cast(%var_1317, dtype="uint16") /* ty=Tensor[(1, 845), uint16] */;
  %530 = reshape(%528, newshape=[10, 14, 15]) /* ty=Tensor[(10, 14, 15), uint8] */;
  %531 = reshape(%529, newshape=[845]) /* ty=Tensor[(845), uint16] */;
  %532 = @func_1038(%530, %531) /* ty=(Tensor[(10, 14, 15), uint8], Tensor[(13, 13, 5), uint16], Tensor[(845), uint16], Tensor[(10, 14, 15), float64]) */;
  %533 = @func_1282() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */;
  %534 = %533.3;
  %535 = cast(%534, dtype="float64") /* ty=Tensor[(30, 1), float64] */;
  %536 = reshape(%535, newshape=[1, 6, 5]) /* ty=Tensor[(1, 6, 5), float64] */;
  %537 = @func_428(%536) /* ty=(Tensor[(1, 6, 5), float64],) */;
  %538 = cast(%var_1336, dtype="uint64") /* ty=Tensor[(3, 30), uint64] */;
  %539 = cast(%var_1336, dtype="uint64") /* ty=Tensor[(3, 30), uint64] */;
  %540 = reshape(%538, newshape=[2, 9, 5]) /* ty=Tensor[(2, 9, 5), uint64] */;
  %541 = reshape(%539, newshape=[2, 9, 5]) /* ty=Tensor[(2, 9, 5), uint64] */;
  %542 = cast(%var_1336, dtype="float32") /* ty=Tensor[(3, 30), float32] */;
  %543 = asinh(%542) /* ty=Tensor[(3, 30), float32] */;
  %544 = cast(%543, dtype="uint64") /* ty=Tensor[(3, 30), uint64] */;
  %545 = @func_1150(%540, %541) /* ty=Tensor[(2, 9, 5), bool] */;
  %546 = cast(%545, dtype="uint64") /* ty=Tensor[(2, 9, 5), uint64] */;
  %547 = reshape(%544, newshape=[2, 9, 5]) /* ty=Tensor[(2, 9, 5), uint64] */;
  %548 = reshape(%546, newshape=[2, 9, 5]) /* ty=Tensor[(2, 9, 5), uint64] */;
  %549 = %527.1;
  %550 = %532.2;
  %551 = %537.0;
  %552 = @func_1150(%547, %548) /* ty=Tensor[(2, 9, 5), bool] */;
  (%549, %550, meta[relay.Constant][28] /* ty=Tensor[(2100), uint8] */, %var_1317, %534, %551, %545, %543, %552)
}

def @func_2282() -> Tensor[(12, 15, 4), float32] {
  %553 = @func_1932() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %553.0
}

def @func_3911() -> (Tensor[(30, 1), float64], Tensor[(12, 15, 4), float32]) {
  %554 = @func_1282() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */;
  %555 = @func_3511() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %556 = %554.3;
  %557 = %555.0;
  (%556, %557)
}

def @func_4101() -> Tensor[(12, 15, 4), float32] {
  %558 = @func_3511() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %558.0
}

def @func_1932() -> (Tensor[(12, 15, 4), float32],) {
  %559 = @func_1282() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */;
  %560 = %559.1;
  (%560,)
}

def @func_2363() -> (Tensor[(7, 15, 8), int64],) {
  %561 = cast(meta[relay.Constant][30] /* ty=Tensor[(7, 15, 8), int64] */, dtype="int64") /* ty=Tensor[(7, 15, 8), int64] */;
  %562 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(7, 15, 8), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %563 = cast(meta[relay.Constant][29] /* ty=Tensor[(7, 15, 8), int64] */, dtype="int64") /* ty=Tensor[(7, 15, 8), int64] */;
  %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %565 = minimum(%563, %564) /* ty=Tensor[(7, 15, 8), int64] */;
  (%565,)
}

def @func_4051() -> (Tensor[(30, 1), float64], Tensor[(12, 9, 13), float64]) {
  %566 = @func_3911() /* ty=(Tensor[(30, 1), float64], Tensor[(12, 15, 4), float32]) */;
  %567 = @func_2255() /* ty=(Tensor[(12, 9, 13), float64],) */;
  %568 = %566.0;
  %569 = %567.0;
  (%568, %569)
}

def @func_7417(%var_7413: Tensor[(845), uint16]) -> (Tensor[(1, 6, 5), float64], Tensor[(10, 14, 15), uint8], Tensor[(2100), uint8], Tensor[(845), uint16]) {
  %570 = @func_1282() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */;
  %571 = cast(meta[relay.Constant][31] /* ty=Tensor[(2100), uint8] */, dtype="uint8") /* ty=Tensor[(2100), uint8] */;
  %572 = cast(%var_7413, dtype="uint16") /* ty=Tensor[(845), uint16] */;
  %573 = reshape(%571, newshape=[10, 14, 15]) /* ty=Tensor[(10, 14, 15), uint8] */;
  %574 = reshape(%572, newshape=[845]) /* ty=Tensor[(845), uint16] */;
  %575 = @func_1038(%573, %574) /* ty=(Tensor[(10, 14, 15), uint8], Tensor[(13, 13, 5), uint16], Tensor[(845), uint16], Tensor[(10, 14, 15), float64]) */;
  %576 = %570.2;
  %577 = %575.0;
  (%576, %577, meta[relay.Constant][31] /* ty=Tensor[(2100), uint8] */, %var_7413)
}

def @func_1970(%var_1959: Tensor[(90, 1), uint64]) -> (Tensor[(16, ?, 10), float32], Tensor[(2, 9, 5), bool], Tensor[(90, 1), float32]) {
  %578 = cast(meta[relay.Constant][33] /* ty=Tensor[(16, 1, 10), float32] */, dtype="float32") /* ty=Tensor[(16, 1, 10), float32] */;
  %579 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(16, 1, 10), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %580 = cast(meta[relay.Constant][32] /* ty=Tensor[(16, 1, 10), float32] */, dtype="float32") /* ty=Tensor[(16, 1, 10), float32] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %582 = cast(%var_1959, dtype="uint64") /* ty=Tensor[(90, 1), uint64] */;
  %583 = cast(%var_1959, dtype="uint64") /* ty=Tensor[(90, 1), uint64] */;
  %584 = reshape(%582, newshape=[2, 9, 5]) /* ty=Tensor[(2, 9, 5), uint64] */;
  %585 = reshape(%583, newshape=[2, 9, 5]) /* ty=Tensor[(2, 9, 5), uint64] */;
  %586 = cast(%var_1959, dtype="float32") /* ty=Tensor[(90, 1), float32] */;
  %587 = add(%580, %581) /* ty=Tensor[(16, ?, 10), float32] */;
  %588 = @func_1150(%584, %585) /* ty=Tensor[(2, 9, 5), bool] */;
  %589 = log2(%586) /* ty=Tensor[(90, 1), float32] */;
  (%587, %588, %589)
}

def @func_4125() -> (Tensor[(9, 15, 2), bool], Tensor[(30, 1), float64], Tensor[(720), float32]) {
  %590 = cast(meta[relay.Constant][35] /* ty=Tensor[(9, 15, 2), int8] */, dtype="bool") /* ty=Tensor[(9, 15, 2), bool] */;
  %591 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(9, 15, 2), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %592 = cast(meta[relay.Constant][34] /* ty=Tensor[(9, 15, 2), int8] */, dtype="bool") /* ty=Tensor[(9, 15, 2), bool] */;
  %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %594 = cast(meta[relay.Constant][36] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %595 = reshape(%594, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %596 = @func_2965(%595) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(12, 15, 4), uint64], Tensor[(720), float32], Tensor[(?, 6, 5), uint16], Tensor[(10, 3), float64], Tensor[(2, 9, 5), float32], Tensor[(13, 65), uint16], Tensor[(1404), int8], Tensor[(7, 15, 8), float64], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */;
  %597 = greater_equal(%592, %593) /* ty=Tensor[(9, 15, 2), bool] */;
  %598 = %596.10;
  (%597, %598, meta[relay.Constant][36] /* ty=Tensor[(720), float32] */)
}

def @func_4796() -> Tensor[(12, 15, 4), float32] {
  %599 = @func_4272() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(7, 15, 8), float64]) */;
  %599.1
}

def @func_174(%var_135: Tensor[(12, 9, 13), int8]) -> Tensor[(12, 9, 13), float64] {
  %600 = cast(meta[relay.Constant][37] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %601 = cast(%var_135, dtype="int8") /* ty=Tensor[(12, 9, 13), int8] */;
  %602 = add(%600, %601) /* ty=Tensor[(12, 9, 13), int8] */;
  %603 = cast(%602, dtype="float64") /* ty=Tensor[(12, 9, 13), float64] */;
  log10(%603) /* ty=Tensor[(12, 9, 13), float64] */
}

def @func_3067(%var_3056: Tensor[(30), float64]) -> (Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30), float64], Tensor[(13, 13, 5), uint16], Tensor[(1, 2100), uint8], Tensor[(845), uint16]) {
  %604 = @func_1282() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */;
  %605 = cast(%var_3056, dtype="float64") /* ty=Tensor[(30), float64] */;
  %606 = reshape(%605, newshape=[1, 6, 5]) /* ty=Tensor[(1, 6, 5), float64] */;
  %607 = @func_428(%606) /* ty=(Tensor[(1, 6, 5), float64],) */;
  %608 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 2100), uint8] */, dtype="uint8") /* ty=Tensor[(1, 2100), uint8] */;
  %609 = cast(meta[relay.Constant][39] /* ty=Tensor[(845), uint16] */, dtype="uint16") /* ty=Tensor[(845), uint16] */;
  %610 = reshape(%608, newshape=[10, 14, 15]) /* ty=Tensor[(10, 14, 15), uint8] */;
  %611 = reshape(%609, newshape=[845]) /* ty=Tensor[(845), uint16] */;
  %612 = @func_1038(%610, %611) /* ty=(Tensor[(10, 14, 15), uint8], Tensor[(13, 13, 5), uint16], Tensor[(845), uint16], Tensor[(10, 14, 15), float64]) */;
  %613 = %604.1;
  %614 = %607.0;
  %615 = %612.1;
  (%613, %614, %var_3056, %615, meta[relay.Constant][38] /* ty=Tensor[(1, 2100), uint8] */, meta[relay.Constant][39] /* ty=Tensor[(845), uint16] */)
}

def @func_759(%var_747: Tensor[(13, 13, 5), uint16]) -> (Tensor[(13, 13, 5), uint16], Tensor[(3, 6, 11), float32], Tensor[(99, 2), int64]) {
  %616 = cast(meta[relay.Constant][40] /* ty=Tensor[(13, 13, 5), uint16] */, dtype="uint16") /* ty=Tensor[(13, 13, 5), uint16] */;
  %617 = shape_of(%var_747, dtype="int32") /* ty=Tensor[(3), int32] */;
  %618 = cast(%var_747, dtype="uint16") /* ty=Tensor[(13, 13, 5), uint16] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %620 = cast(meta[relay.Constant][41] /* ty=Tensor[(99, 2), int64] */, dtype="int64") /* ty=Tensor[(99, 2), int64] */;
  %621 = cast(meta[relay.Constant][41] /* ty=Tensor[(99, 2), int64] */, dtype="int64") /* ty=Tensor[(99, 2), int64] */;
  %622 = reshape(%620, newshape=[3, 6, 11]) /* ty=Tensor[(3, 6, 11), int64] */;
  %623 = reshape(%621, newshape=[3, 6, 11]) /* ty=Tensor[(3, 6, 11), int64] */;
  %624 = @func_713(%622, %623) /* ty=(Tensor[(3, 6, 11), int64], Tensor[(3, 6, 11), float32]) */;
  %625 = right_shift(%618, %619) /* ty=Tensor[(13, 13, 5), uint16] */;
  %626 = %624.1;
  (%625, %626, meta[relay.Constant][41] /* ty=Tensor[(99, 2), int64] */)
}

def @func_5279(%var_5265: Tensor[(2, 3, 4), float32], %var_5266: Tensor[(2, 3, 4), float32]) -> Tensor[(2, 3, 4), float32] {
  %627 = cast(%var_5266, dtype="float32") /* ty=Tensor[(2, 3, 4), float32] */;
  %628 = shape_of(%var_5265, dtype="int32") /* ty=Tensor[(3), int32] */;
  %629 = cast(%var_5265, dtype="float32") /* ty=Tensor[(2, 3, 4), float32] */;
  %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%629, %630) /* ty=Tensor[(2, 3, 4), float32] */
}

def @func_6699() -> (Tensor[(6, 9, ?), bool],) {
  %631 = @func_4653() /* ty=(Tensor[(6, 9, 1), float32],) */;
  %632 = %631.0;
  %633 = cast(%632, dtype="float32") /* ty=Tensor[(6, 9, 1), float32] */;
  %634 = sin(%633) /* ty=Tensor[(6, 9, 1), float32] */;
  %635 = cast(%632, dtype="bool") /* ty=Tensor[(6, 9, 1), bool] */;
  %636 = shape_of(%634, dtype="int32") /* ty=Tensor[(3), int32] */;
  %637 = cast(%634, dtype="bool") /* ty=Tensor[(6, 9, 1), bool] */;
  %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %639 = less(%637, %638) /* ty=Tensor[(6, 9, ?), bool] */;
  (%639,)
}

def @func_713(%var_690: Tensor[(3, 6, 11), int64], %var_691: Tensor[(3, 6, 11), int64]) -> (Tensor[(3, 6, 11), int64], Tensor[(3, 6, 11), float32]) {
  %640 = cast(%var_691, dtype="int64") /* ty=Tensor[(3, 6, 11), int64] */;
  %641 = shape_of(%var_690, dtype="int32") /* ty=Tensor[(3), int32] */;
  %642 = cast(%var_690, dtype="int64") /* ty=Tensor[(3, 6, 11), int64] */;
  %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %644 = cast(%var_690, dtype="float32") /* ty=Tensor[(3, 6, 11), float32] */;
  %645 = logical_xor(%642, %643) /* ty=Tensor[(3, 6, 11), int64] */;
  %646 = exp(%644) /* ty=Tensor[(3, 6, 11), float32] */;
  (%645, %646)
}

def @func_7259(%var_7234: Tensor[(5, 12, 11), int8]) -> Tensor[(5, 12, 11), int8] {
  %647 = cast(meta[relay.Constant][42] /* ty=Tensor[(5, 12, 11), int8] */, dtype="int8") /* ty=Tensor[(5, 12, 11), int8] */;
  %648 = shape_of(%var_7234, dtype="int32") /* ty=Tensor[(3), int32] */;
  %649 = cast(%var_7234, dtype="int8") /* ty=Tensor[(5, 12, 11), int8] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_and(%649, %650) /* ty=Tensor[(5, 12, 11), int8] */
}

def @func_6533() -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(?, 440), bool]) {
  %651 = @func_1282() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */;
  %652 = @func_6237() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %653 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 440), uint32] */, dtype="uint32") /* ty=Tensor[(1, 440), uint32] */;
  %654 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 440), uint32] */, dtype="uint32") /* ty=Tensor[(1, 440), uint32] */;
  %655 = reshape(%653, newshape=[11, 5, 8]) /* ty=Tensor[(11, 5, 8), uint32] */;
  %656 = reshape(%654, newshape=[11, 5, 8]) /* ty=Tensor[(11, 5, 8), uint32] */;
  %657 = @func_3769(%655, %656) /* ty=(Tensor[(11, 5, 8), bool], Tensor[(11, 5, 8), float32], Tensor[(432), bool], Tensor[(2688), float32]) */;
  %658 = %657.0;
  %659 = cast(%658, dtype="int32") /* ty=Tensor[(11, 5, 8), int32] */;
  %660 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(1, 440), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %661 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 440), uint32] */, dtype="int32") /* ty=Tensor[(1, 440), int32] */;
  %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %663 = logical_xor(%661, %662) /* ty=Tensor[(?, 440), int32] */;
  %664 = cast(%663, dtype="uint64") /* ty=Tensor[(?, 440), uint64] */;
  %665 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(1, 440), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %666 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 440), uint32] */, dtype="uint64") /* ty=Tensor[(1, 440), uint64] */;
  %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %668 = maximum(%666, %667) /* ty=Tensor[(?, 440), uint64] */;
  %669 = cast(%663, dtype="bool") /* ty=Tensor[(?, 440), bool] */;
  %670 = shape_of(%668, dtype="int32") /* ty=Tensor[(2), int32] */;
  %671 = cast(%668, dtype="bool") /* ty=Tensor[(?, 440), bool] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %673 = %651.0;
  %674 = @func_4073() /* ty=Tensor[(12, 15, 4), float32] */;
  %675 = @func_3292() /* ty=Tensor[(12, 15, 4), float32] */;
  %676 = @func_2282() /* ty=Tensor[(12, 15, 4), float32] */;
  %677 = %652.0;
  %678 = @func_4796() /* ty=Tensor[(12, 15, 4), float32] */;
  %679 = logical_and(%671, %672) /* ty=Tensor[(?, 440), bool] */;
  (%673, %674, %675, %676, %677, %678, %679)
}

def @func_7659() -> (Tensor[(12, 9, 13), float64], Tensor[(12, 15, 4), float32]) {
  %680 = @func_4051() /* ty=(Tensor[(30, 1), float64], Tensor[(12, 9, 13), float64]) */;
  %681 = %680.1;
  %682 = @func_3292() /* ty=Tensor[(12, 15, 4), float32] */;
  (%681, %682)
}

def @func_4185() -> (Tensor[(12, 15, 4), float32], Tensor[(845, 1), uint16], Tensor[(99, 2), float32]) {
  %683 = @func_3591() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32]) */;
  %684 = cast(meta[relay.Constant][44] /* ty=Tensor[(845, 1), uint16] */, dtype="uint16") /* ty=Tensor[(845, 1), uint16] */;
  %685 = reshape(%684, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), uint16] */;
  %686 = @func_759(%685) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(3, 6, 11), float32], Tensor[(99, 2), int64]) */;
  %687 = %686.2;
  %688 = cast(%687, dtype="float32") /* ty=Tensor[(99, 2), float32] */;
  %689 = %683.1;
  %690 = sinh(%688) /* ty=Tensor[(99, 2), float32] */;
  (%689, meta[relay.Constant][44] /* ty=Tensor[(845, 1), uint16] */, %690)
}

def @func_1282() -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) {
  %691 = cast(meta[relay.Constant][46] /* ty=Tensor[(12, 15, 4), float32] */, dtype="float32") /* ty=Tensor[(12, 15, 4), float32] */;
  %692 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(12, 15, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %693 = cast(meta[relay.Constant][45] /* ty=Tensor[(12, 15, 4), float32] */, dtype="float32") /* ty=Tensor[(12, 15, 4), float32] */;
  %694 = dyn.reshape(%691, %692, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %695 = cast(meta[relay.Constant][46] /* ty=Tensor[(12, 15, 4), float32] */, dtype="float32") /* ty=Tensor[(12, 15, 4), float32] */;
  %696 = cast(meta[relay.Constant][47] /* ty=Tensor[(30, 1), float64] */, dtype="float64") /* ty=Tensor[(30, 1), float64] */;
  %697 = reshape(%696, newshape=[1, 6, 5]) /* ty=Tensor[(1, 6, 5), float64] */;
  %698 = @func_428(%697) /* ty=(Tensor[(1, 6, 5), float64],) */;
  %699 = minimum(%693, %694) /* ty=Tensor[(12, 15, 4), float32] */;
  %700 = cosh(%695) /* ty=Tensor[(12, 15, 4), float32] */;
  %701 = %698.0;
  (%699, %700, %701, meta[relay.Constant][47] /* ty=Tensor[(30, 1), float64] */)
}

def @func_4368(%var_4358: Tensor[(845), uint16]) -> (Tensor[(12, 9, 13), float64], Tensor[(3, 6, 11), float32], Tensor[(315), float32], Tensor[(845), uint16], Tensor[(360, 2), float32], Tensor[(12, 15, 4), float32]) {
  %702 = @func_2255() /* ty=(Tensor[(12, 9, 13), float64],) */;
  %703 = cast(meta[relay.Constant][48] /* ty=Tensor[(315), float32] */, dtype="float32") /* ty=Tensor[(315), float32] */;
  %704 = cast(%var_4358, dtype="uint16") /* ty=Tensor[(845), uint16] */;
  %705 = cast(meta[relay.Constant][49] /* ty=Tensor[(360, 2), float32] */, dtype="float32") /* ty=Tensor[(360, 2), float32] */;
  %706 = reshape(%703, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), float32] */;
  %707 = reshape(%704, newshape=[1, 845]) /* ty=Tensor[(1, 845), uint16] */;
  %708 = reshape(%705, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %709 = @func_2421(%706, %707, %708) /* ty=(Tensor[(3, 6, 11), float32], Tensor[(1, 845), uint16], Tensor[(15, 3, 7), float32], Tensor[(12, 15, 4), uint64], Tensor[(720), float32], Tensor[(12, 9, 13), float64]) */;
  %710 = @func_3511() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %711 = %702.0;
  %712 = %709.0;
  %713 = %710.0;
  (%711, %712, meta[relay.Constant][48] /* ty=Tensor[(315), float32] */, %var_4358, meta[relay.Constant][49] /* ty=Tensor[(360, 2), float32] */, %713)
}

def @func_6237() -> (Tensor[(12, 15, 4), float32],) {
  %714 = @func_4567() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %715 = %714.0;
  (%715,)
}

def @func_2060() -> Tensor[(12, 9, 13), float64] {
  %716 = @func_1576() /* ty=(Tensor[(30, 1), float64], Tensor[(12, 9, 13), float64], Tensor[(1404), int8]) */;
  %716.1
}

def @func_5776() -> (Tensor[(12, 9, 13), float64],) {
  %717 = @func_5471() /* ty=(Tensor[(12, 9, 13), float64],) */;
  %718 = %717.0;
  (%718,)
}

def @func_6638(%var_6616: Tensor[(198), int64]) -> (Tensor[(12, 9, 13), float64], Tensor[(4, 10, 5), float64], Tensor[(200), int8], Tensor[(24), float32], Tensor[(24), float32], Tensor[(12, 15, 4), uint64], Tensor[(450), float64], Tensor[(90), uint64], Tensor[(198), int64]) {
  %719 = @func_5776() /* ty=(Tensor[(12, 9, 13), float64],) */;
  %720 = cast(meta[relay.Constant][50] /* ty=Tensor[(200), int8] */, dtype="int8") /* ty=Tensor[(200), int8] */;
  %721 = cast(meta[relay.Constant][50] /* ty=Tensor[(200), int8] */, dtype="int8") /* ty=Tensor[(200), int8] */;
  %722 = reshape(%720, newshape=[4, 10, 5]) /* ty=Tensor[(4, 10, 5), int8] */;
  %723 = reshape(%721, newshape=[4, 10, 5]) /* ty=Tensor[(4, 10, 5), int8] */;
  %724 = @func_3014(%722, %723) /* ty=(Tensor[(4, 10, 5), float64],) */;
  %725 = cast(meta[relay.Constant][51] /* ty=Tensor[(24), float32] */, dtype="float32") /* ty=Tensor[(24), float32] */;
  %726 = reshape(%725, newshape=[24]) /* ty=Tensor[(24), float32] */;
  %727 = @func_5936(%726) /* ty=(Tensor[(12, 15, 4), float32], Tensor[(2, 3, 4), float32], Tensor[(24), float32], Tensor[(6, 9, 1), float32]) */;
  %728 = cast(meta[relay.Constant][52] /* ty=Tensor[(450), float64] */, dtype="float64") /* ty=Tensor[(450), float64] */;
  %729 = cast(meta[relay.Constant][53] /* ty=Tensor[(90), uint64] */, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %730 = cast(%var_6616, dtype="int64") /* ty=Tensor[(198), int64] */;
  %731 = reshape(%728, newshape=[1, 450]) /* ty=Tensor[(1, 450), float64] */;
  %732 = reshape(%729, newshape=[90]) /* ty=Tensor[(90), uint64] */;
  %733 = reshape(%730, newshape=[198]) /* ty=Tensor[(198), int64] */;
  %734 = @func_3657(%731, %732, %733) /* ty=(Tensor[(12, 15, 4), bool], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), uint64], Tensor[(90, 1), float32], Tensor[(1, 450), float64], Tensor[(65, 13), uint16], Tensor[(90), uint64], Tensor[(3, 6, 11), float32], Tensor[(198), int64]) */;
  %735 = %719.0;
  %736 = %724.0;
  %737 = %727.2;
  %738 = %734.2;
  (%735, %736, meta[relay.Constant][50] /* ty=Tensor[(200), int8] */, %737, meta[relay.Constant][51] /* ty=Tensor[(24), float32] */, %738, meta[relay.Constant][52] /* ty=Tensor[(450), float64] */, meta[relay.Constant][53] /* ty=Tensor[(90), uint64] */, %var_6616)
}

def @func_428(%var_419: Tensor[(1, 6, 5), float64]) -> (Tensor[(1, 6, 5), float64],) {
  %739 = cast(%var_419, dtype="float64") /* ty=Tensor[(1, 6, 5), float64] */;
  %740 = sin(%739) /* ty=Tensor[(1, 6, 5), float64] */;
  (%740,)
}

def @func_3171() -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float64]) {
  %741 = @func_2030() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %742 = %741.0;
  %743 = cast(%742, dtype="float32") /* ty=Tensor[(12, 15, 4), float32] */;
  %744 = reshape(%743, newshape=[12, 15, 4]) /* ty=Tensor[(12, 15, 4), float32] */;
  %745 = @func_2115(%744) /* ty=(Tensor[(12, 15, 4), uint64], Tensor[(12, 15, 4), float64]) */;
  %746 = %745.1;
  (%742, %746)
}

def @func_6096() -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(3, 6, 11), int64], Tensor[(198), int64]) {
  %747 = @func_2282() /* ty=Tensor[(12, 15, 4), float32] */;
  %748 = cast(%747, dtype="float32") /* ty=Tensor[(12, 15, 4), float32] */;
  %749 = @func_5986() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32]) */;
  %750 = cast(meta[relay.Constant][54] /* ty=Tensor[(198), int64] */, dtype="int64") /* ty=Tensor[(198), int64] */;
  %751 = cast(meta[relay.Constant][54] /* ty=Tensor[(198), int64] */, dtype="int64") /* ty=Tensor[(198), int64] */;
  %752 = reshape(%750, newshape=[3, 6, 11]) /* ty=Tensor[(3, 6, 11), int64] */;
  %753 = reshape(%751, newshape=[3, 6, 11]) /* ty=Tensor[(3, 6, 11), int64] */;
  %754 = @func_713(%752, %753) /* ty=(Tensor[(3, 6, 11), int64], Tensor[(3, 6, 11), float32]) */;
  %755 = cos(%748) /* ty=Tensor[(12, 15, 4), float32] */;
  %756 = %749.1;
  %757 = %754.0;
  (%755, %756, %757, meta[relay.Constant][54] /* ty=Tensor[(198), int64] */)
}

def @func_3511() -> (Tensor[(12, 15, 4), float32],) {
  %758 = @func_3292() /* ty=Tensor[(12, 15, 4), float32] */;
  %759 = cast(%758, dtype="float32") /* ty=Tensor[(12, 15, 4), float32] */;
  %760 = atan(%759) /* ty=Tensor[(12, 15, 4), float32] */;
  (%760,)
}

def @func_5303() -> (Tensor[(12, 15, 4), float32],) {
  %761 = @func_3478() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %762 = %761.0;
  (%762,)
}

def @func_5190() -> Tensor[(12, 9, 13), float64] {
  %763 = @func_4535() /* ty=(Tensor[(12, 9, 13), float64], Tensor[(12, 15, 4), bool], Tensor[(12, 15, 4), float32]) */;
  %763.0
}

def @func_5715() -> (Tensor[(12, 15, 4), bool],) {
  %764 = @func_5536() /* ty=(Tensor[(12, 15, 4), bool],) */;
  %765 = %764.0;
  (%765,)
}

def @func_4003(%var_3975: Tensor[(198, 1), int64]) -> (Tensor[(12, 15, 4), float64], Tensor[(1, 845), uint16], Tensor[(845), uint16], Tensor[(12, 15, 4), float64], Tensor[(1, 450), float64], Tensor[(50, 9), float64], Tensor[(15, 6), uint64], Tensor[(12, 15, 4), float32], Tensor[(198, 315), uint32]) {
  %766 = @func_2762() /* ty=Tensor[(12, 15, 4), float32] */;
  %767 = cast(%766, dtype="float64") /* ty=Tensor[(12, 15, 4), float64] */;
  %768 = cast(meta[relay.Constant][55] /* ty=Tensor[(315), float32] */, dtype="float32") /* ty=Tensor[(315), float32] */;
  %769 = cast(meta[relay.Constant][56] /* ty=Tensor[(845), uint16] */, dtype="uint16") /* ty=Tensor[(845), uint16] */;
  %770 = cast(%766, dtype="float32") /* ty=Tensor[(12, 15, 4), float32] */;
  %771 = reshape(%768, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), float32] */;
  %772 = reshape(%769, newshape=[1, 845]) /* ty=Tensor[(1, 845), uint16] */;
  %773 = reshape(%770, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %774 = @func_2421(%771, %772, %773) /* ty=(Tensor[(3, 6, 11), float32], Tensor[(1, 845), uint16], Tensor[(15, 3, 7), float32], Tensor[(12, 15, 4), uint64], Tensor[(720), float32], Tensor[(12, 9, 13), float64]) */;
  %775 = @func_3171() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float64]) */;
  %776 = cast(meta[relay.Constant][57] /* ty=Tensor[(50, 9), float64] */, dtype="float64") /* ty=Tensor[(50, 9), float64] */;
  %777 = cast(meta[relay.Constant][58] /* ty=Tensor[(15, 6), uint64] */, dtype="uint64") /* ty=Tensor[(15, 6), uint64] */;
  %778 = cast(%var_3975, dtype="int64") /* ty=Tensor[(198, 1), int64] */;
  %779 = reshape(%776, newshape=[1, 450]) /* ty=Tensor[(1, 450), float64] */;
  %780 = reshape(%777, newshape=[90]) /* ty=Tensor[(90), uint64] */;
  %781 = reshape(%778, newshape=[198]) /* ty=Tensor[(198), int64] */;
  %782 = @func_3657(%779, %780, %781) /* ty=(Tensor[(12, 15, 4), bool], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), uint64], Tensor[(90, 1), float32], Tensor[(1, 450), float64], Tensor[(65, 13), uint16], Tensor[(90), uint64], Tensor[(3, 6, 11), float32], Tensor[(198), int64]) */;
  %783 = @func_2983() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %784 = cast(meta[relay.Constant][55] /* ty=Tensor[(315), float32] */, dtype="uint32") /* ty=Tensor[(315), uint32] */;
  %785 = cast(%var_3975, dtype="uint32") /* ty=Tensor[(198, 1), uint32] */;
  %786 = erf(%767) /* ty=Tensor[(12, 15, 4), float64] */;
  %787 = %774.1;
  %788 = %775.1;
  %789 = %782.4;
  %790 = %783.0;
  %791 = add(%784, %785) /* ty=Tensor[(198, 315), uint32] */;
  (%786, %787, meta[relay.Constant][56] /* ty=Tensor[(845), uint16] */, %788, %789, meta[relay.Constant][57] /* ty=Tensor[(50, 9), float64] */, meta[relay.Constant][58] /* ty=Tensor[(15, 6), uint64] */, %790, %791)
}

def @func_7439() -> Tensor[(12, 15, 4), float32] {
  %792 = @func_5986() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32]) */;
  %793 = %792.1;
  %794 = cast(%793, dtype="float32") /* ty=Tensor[(12, 15, 4), float32] */;
  asin(%794) /* ty=Tensor[(12, 15, 4), float32] */
}

def @func_3591() -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32]) {
  %795 = @func_1932() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %796 = @func_3339() /* ty=Tensor[(12, 15, 4), float32] */;
  %797 = %795.0;
  (%796, %797)
}

def @func_6205() -> (Tensor[(30, 1), float64], Tensor[(12, 15, 4), float32]) {
  %798 = @func_3911() /* ty=(Tensor[(30, 1), float64], Tensor[(12, 15, 4), float32]) */;
  %799 = @func_1932() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %800 = %798.0;
  %801 = %799.0;
  (%800, %801)
}

def @func_1507(%var_1499: Tensor[(845), uint16]) -> (Tensor[(?, 6, 5), uint8], Tensor[(13, 4, 9), float32], Tensor[(468), float32], Tensor[(3, 6, 11), float32], Tensor[(845), uint16]) {
  %802 = @func_1282() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */;
  %803 = %802.2;
  %804 = cast(%803, dtype="float32") /* ty=Tensor[(1, 6, 5), float32] */;
  %805 = sigmoid(%804) /* ty=Tensor[(1, 6, 5), float32] */;
  %806 = cast(%805, dtype="uint8") /* ty=Tensor[(1, 6, 5), uint8] */;
  %807 = shape_of(%803, dtype="int32") /* ty=Tensor[(3), int32] */;
  %808 = cast(%803, dtype="uint8") /* ty=Tensor[(1, 6, 5), uint8] */;
  %809 = dyn.reshape(%806, %807, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %810 = cast(meta[relay.Constant][59] /* ty=Tensor[(468), float32] */, dtype="float32") /* ty=Tensor[(468), float32] */;
  %811 = reshape(%810, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float32] */;
  %812 = @func_868(%811) /* ty=(Tensor[(13, 4, 9), float32],) */;
  %813 = cast(%var_1499, dtype="uint16") /* ty=Tensor[(845), uint16] */;
  %814 = reshape(%813, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), uint16] */;
  %815 = @func_759(%814) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(3, 6, 11), float32], Tensor[(99, 2), int64]) */;
  %816 = minimum(%808, %809) /* ty=Tensor[(?, 6, 5), uint8] */;
  %817 = %812.0;
  %818 = %815.1;
  (%816, %817, meta[relay.Constant][59] /* ty=Tensor[(468), float32] */, %818, %var_1499)
}

def @func_868(%var_863: Tensor[(13, 4, 9), float32]) -> (Tensor[(13, 4, 9), float32],) {
  %819 = cast(%var_863, dtype="float32") /* ty=Tensor[(13, 4, 9), float32] */;
  %820 = acos(%819) /* ty=Tensor[(13, 4, 9), float32] */;
  (%820,)
}

def @func_2816(%var_2791: Tensor[(30), float64], %var_2805: Tensor[(1404), int8]) -> (Tensor[(?, 6, 5), bool], Tensor[(1404), bool]) {
  %821 = cast(%var_2791, dtype="float64") /* ty=Tensor[(30), float64] */;
  %822 = reshape(%821, newshape=[1, 6, 5]) /* ty=Tensor[(1, 6, 5), float64] */;
  %823 = @func_428(%822) /* ty=(Tensor[(1, 6, 5), float64],) */;
  %824 = %823.0;
  %825 = cast(%var_2791, dtype="bool") /* ty=Tensor[(30), bool] */;
  %826 = shape_of(%824, dtype="int32") /* ty=Tensor[(3), int32] */;
  %827 = cast(%824, dtype="bool") /* ty=Tensor[(1, 6, 5), bool] */;
  %828 = dyn.reshape(%825, %826, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %829 = @func_2721() /* ty=Tensor[(1404), int8] */;
  %830 = cast(%var_2805, dtype="bool") /* ty=Tensor[(1404), bool] */;
  %831 = shape_of(%829, dtype="int32") /* ty=Tensor[(1), int32] */;
  %832 = cast(%829, dtype="bool") /* ty=Tensor[(1404), bool] */;
  %833 = dyn.reshape(%830, %831, newshape=[]) /* ty=Tensor[(?), bool] */;
  %834 = equal(%827, %828) /* ty=Tensor[(?, 6, 5), bool] */;
  %835 = logical_and(%832, %833) /* ty=Tensor[(1404), bool] */;
  (%834, %835)
}

def @func_3292() -> Tensor[(12, 15, 4), float32] {
  @func_2762() /* ty=Tensor[(12, 15, 4), float32] */
}

def @func_2115(%var_2101: Tensor[(12, 15, 4), float32]) -> (Tensor[(12, 15, 4), uint64], Tensor[(12, 15, 4), float64]) {
  %836 = @func_2030() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %837 = %836.0;
  %838 = cast(%var_2101, dtype="uint64") /* ty=Tensor[(12, 15, 4), uint64] */;
  %839 = shape_of(%837, dtype="int32") /* ty=Tensor[(3), int32] */;
  %840 = cast(%837, dtype="uint64") /* ty=Tensor[(12, 15, 4), uint64] */;
  %841 = dyn.reshape(%838, %839, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %842 = cast(%837, dtype="float64") /* ty=Tensor[(12, 15, 4), float64] */;
  %843 = left_shift(%840, %841) /* ty=Tensor[(12, 15, 4), uint64] */;
  %844 = log2(%842) /* ty=Tensor[(12, 15, 4), float64] */;
  (%843, %844)
}

def @func_2748() -> Tensor[(7, 15, 8), float64] {
  %845 = @func_2363() /* ty=(Tensor[(7, 15, 8), int64],) */;
  %846 = %845.0;
  %847 = cast(%846, dtype="float64") /* ty=Tensor[(7, 15, 8), float64] */;
  atan(%847) /* ty=Tensor[(7, 15, 8), float64] */
}

def @func_3437(%var_3394: Tensor[(4, 672), float32], %var_3405: Tensor[(4, 672), float64], %var_3420: Tensor[(4, 672), float64], %var_3426: Tensor[(4, 672), bool]) -> (Tensor[(12, 9, 13), float64], Tensor[(16, 12, 14), float32], Tensor[(12, 15, 4), float32], Tensor[(13, 13, 5), uint16], Tensor[(432), bool], Tensor[(845), uint16], Tensor[(12, 15, 4), float32], Tensor[(4, 672), uint8], Tensor[(4, 672), bool]) {
  %848 = @func_2158() /* ty=(Tensor[(12, 9, 13), float64], Tensor[(13, 13, 5), uint16], Tensor[(3, 700), uint8], Tensor[(13, 65), uint16], Tensor[(12, 15, 4), float32]) */;
  %849 = cast(%var_3394, dtype="float32") /* ty=Tensor[(4, 672), float32] */;
  %850 = reshape(%849, newshape=[16, 12, 14]) /* ty=Tensor[(16, 12, 14), float32] */;
  %851 = @func_1282() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */;
  %852 = cast(meta[relay.Constant][60] /* ty=Tensor[(432), bool] */, dtype="bool") /* ty=Tensor[(432), bool] */;
  %853 = cast(meta[relay.Constant][61] /* ty=Tensor[(845), uint16] */, dtype="uint16") /* ty=Tensor[(845), uint16] */;
  %854 = reshape(%852, newshape=[432]) /* ty=Tensor[(432), bool] */;
  %855 = reshape(%853, newshape=[845]) /* ty=Tensor[(845), uint16] */;
  %856 = @func_1693(%854, %855) /* ty=(Tensor[(1, 6, 5), float64], Tensor[(13, 13, 5), uint16], Tensor[(432), bool], Tensor[(845), uint16], Tensor[(30, 2100), float64], Tensor[(1, 6, 5), float64]) */;
  %857 = cast(%var_3394, dtype="float64") /* ty=Tensor[(4, 672), float64] */;
  %858 = sqrt(%857) /* ty=Tensor[(4, 672), float64] */;
  %859 = cast(%var_3420, dtype="uint8") /* ty=Tensor[(4, 672), uint8] */;
  %860 = shape_of(%858, dtype="int32") /* ty=Tensor[(2), int32] */;
  %861 = cast(%858, dtype="uint8") /* ty=Tensor[(4, 672), uint8] */;
  %862 = dyn.reshape(%859, %860, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %863 = cast(%var_3405, dtype="bool") /* ty=Tensor[(4, 672), bool] */;
  %864 = shape_of(%858, dtype="int32") /* ty=Tensor[(2), int32] */;
  %865 = cast(%858, dtype="bool") /* ty=Tensor[(4, 672), bool] */;
  %866 = dyn.reshape(%863, %864, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %867 = logical_or(%865, %866) /* ty=Tensor[(4, 672), bool] */;
  %868 = cast(%var_3426, dtype="bool") /* ty=Tensor[(4, 672), bool] */;
  %869 = shape_of(%867, dtype="int32") /* ty=Tensor[(2), int32] */;
  %870 = cast(%867, dtype="bool") /* ty=Tensor[(4, 672), bool] */;
  %871 = dyn.reshape(%868, %869, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %872 = %848.0;
  %873 = @func_3358(%850) /* ty=Tensor[(16, 12, 14), float32] */;
  %874 = %851.1;
  %875 = %856.1;
  %876 = @func_3292() /* ty=Tensor[(12, 15, 4), float32] */;
  %877 = subtract(%861, %862) /* ty=Tensor[(4, 672), uint8] */;
  %878 = greater(%870, %871) /* ty=Tensor[(4, 672), bool] */;
  (%872, %873, %874, %875, meta[relay.Constant][60] /* ty=Tensor[(432), bool] */, meta[relay.Constant][61] /* ty=Tensor[(845), uint16] */, %876, %877, %878)
}

def @func_1811(%var_1804: Tensor[(1, 6, 5), float64]) -> (Tensor[(?, 6, 5), uint16], Tensor[(?, 6, 5), uint16]) {
  %879 = @func_1282() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */;
  %880 = %879.2;
  %881 = cast(meta[relay.Constant][62] /* ty=Tensor[(1, 6, 5), float64] */, dtype="uint16") /* ty=Tensor[(1, 6, 5), uint16] */;
  %882 = shape_of(%880, dtype="int32") /* ty=Tensor[(3), int32] */;
  %883 = cast(%880, dtype="uint16") /* ty=Tensor[(1, 6, 5), uint16] */;
  %884 = dyn.reshape(%881, %882, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %885 = cast(%var_1804, dtype="uint16") /* ty=Tensor[(1, 6, 5), uint16] */;
  %886 = shape_of(meta[relay.Constant][62] /* ty=Tensor[(1, 6, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %887 = cast(meta[relay.Constant][62] /* ty=Tensor[(1, 6, 5), float64] */, dtype="uint16") /* ty=Tensor[(1, 6, 5), uint16] */;
  %888 = dyn.reshape(%885, %886, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %889 = maximum(%883, %884) /* ty=Tensor[(?, 6, 5), uint16] */;
  %890 = bitwise_and(%887, %888) /* ty=Tensor[(?, 6, 5), uint16] */;
  (%889, %890)
}

def @func_3769(%var_3755: Tensor[(11, 5, 8), uint32], %var_3756: Tensor[(11, 5, 8), uint32]) -> (Tensor[(11, 5, 8), bool], Tensor[(11, 5, 8), float32], Tensor[(432), bool], Tensor[(2688), float32]) {
  %891 = cast(%var_3756, dtype="bool") /* ty=Tensor[(11, 5, 8), bool] */;
  %892 = shape_of(%var_3755, dtype="int32") /* ty=Tensor[(3), int32] */;
  %893 = cast(%var_3755, dtype="bool") /* ty=Tensor[(11, 5, 8), bool] */;
  %894 = dyn.reshape(%891, %892, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %895 = cast(%var_3755, dtype="float32") /* ty=Tensor[(11, 5, 8), float32] */;
  %896 = cast(meta[relay.Constant][63] /* ty=Tensor[(2688), float32] */, dtype="float32") /* ty=Tensor[(2688), float32] */;
  %897 = cast(meta[relay.Constant][63] /* ty=Tensor[(2688), float32] */, dtype="float64") /* ty=Tensor[(2688), float64] */;
  %898 = cast(meta[relay.Constant][63] /* ty=Tensor[(2688), float32] */, dtype="float64") /* ty=Tensor[(2688), float64] */;
  %899 = cast(meta[relay.Constant][63] /* ty=Tensor[(2688), float32] */, dtype="bool") /* ty=Tensor[(2688), bool] */;
  %900 = reshape(%896, newshape=[4, 672]) /* ty=Tensor[(4, 672), float32] */;
  %901 = reshape(%897, newshape=[4, 672]) /* ty=Tensor[(4, 672), float64] */;
  %902 = reshape(%898, newshape=[4, 672]) /* ty=Tensor[(4, 672), float64] */;
  %903 = reshape(%899, newshape=[4, 672]) /* ty=Tensor[(4, 672), bool] */;
  %904 = @func_3437(%900, %901, %902, %903) /* ty=(Tensor[(12, 9, 13), float64], Tensor[(16, 12, 14), float32], Tensor[(12, 15, 4), float32], Tensor[(13, 13, 5), uint16], Tensor[(432), bool], Tensor[(845), uint16], Tensor[(12, 15, 4), float32], Tensor[(4, 672), uint8], Tensor[(4, 672), bool]) */;
  %905 = less(%893, %894) /* ty=Tensor[(11, 5, 8), bool] */;
  %906 = acosh(%895) /* ty=Tensor[(11, 5, 8), float32] */;
  %907 = %904.4;
  (%905, %906, %907, meta[relay.Constant][63] /* ty=Tensor[(2688), float32] */)
}

def @func_6291() -> (Tensor[(12, 15, 4), bool], Tensor[(12, 15, 4), float32]) {
  %908 = @func_5715() /* ty=(Tensor[(12, 15, 4), bool],) */;
  %909 = @func_5986() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32]) */;
  %910 = %908.0;
  %911 = %909.0;
  (%910, %911)
}

def @func_2030() -> (Tensor[(12, 15, 4), float32],) {
  %912 = @func_1932() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %913 = %912.0;
  (%913,)
}

def @func_2421(%var_2374: Tensor[(15, 3, 7), float32], %var_2391: Tensor[(1, 845), uint16], %var_2408: Tensor[(720), float32]) -> (Tensor[(3, 6, 11), float32], Tensor[(1, 845), uint16], Tensor[(15, 3, 7), float32], Tensor[(12, 15, 4), uint64], Tensor[(720), float32], Tensor[(12, 9, 13), float64]) {
  %914 = cast(%var_2391, dtype="uint16") /* ty=Tensor[(1, 845), uint16] */;
  %915 = reshape(%914, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), uint16] */;
  %916 = @func_759(%915) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(3, 6, 11), float32], Tensor[(99, 2), int64]) */;
  %917 = cast(%var_2374, dtype="float32") /* ty=Tensor[(15, 3, 7), float32] */;
  %918 = log10(%917) /* ty=Tensor[(15, 3, 7), float32] */;
  %919 = cast(%var_2374, dtype="float32") /* ty=Tensor[(15, 3, 7), float32] */;
  %920 = shape_of(%918, dtype="int32") /* ty=Tensor[(3), int32] */;
  %921 = cast(%918, dtype="float32") /* ty=Tensor[(15, 3, 7), float32] */;
  %922 = dyn.reshape(%919, %920, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %923 = cast(%var_2408, dtype="float32") /* ty=Tensor[(720), float32] */;
  %924 = reshape(%923, newshape=[12, 15, 4]) /* ty=Tensor[(12, 15, 4), float32] */;
  %925 = @func_2115(%924) /* ty=(Tensor[(12, 15, 4), uint64], Tensor[(12, 15, 4), float64]) */;
  %926 = @func_2158() /* ty=(Tensor[(12, 9, 13), float64], Tensor[(13, 13, 5), uint16], Tensor[(3, 700), uint8], Tensor[(13, 65), uint16], Tensor[(12, 15, 4), float32]) */;
  %927 = %916.1;
  %928 = power(%921, %922) /* ty=Tensor[(15, 3, 7), float32] */;
  %929 = %925.0;
  %930 = %926.0;
  (%927, %var_2391, %928, %929, %var_2408, %930)
}

def @func_5986() -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32]) {
  %931 = @func_4423() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(4, 10, 5), float64], Tensor[(200), int8], Tensor[(12, 15, 4), float32]) */;
  %932 = @func_4101() /* ty=Tensor[(12, 15, 4), float32] */;
  %933 = %931.3;
  (%932, %933)
}

def @func_3657(%var_3648: Tensor[(1, 450), float64], %var_3650: Tensor[(90), uint64], %var_3654: Tensor[(198), int64]) -> (Tensor[(12, 15, 4), bool], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), uint64], Tensor[(90, 1), float32], Tensor[(1, 450), float64], Tensor[(65, 13), uint16], Tensor[(90), uint64], Tensor[(3, 6, 11), float32], Tensor[(198), int64]) {
  %934 = @func_3511() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %935 = %934.0;
  %936 = cast(meta[relay.Constant][64] /* ty=Tensor[(12, 15, 4), float32] */, dtype="bool") /* ty=Tensor[(12, 15, 4), bool] */;
  %937 = shape_of(%935, dtype="int32") /* ty=Tensor[(3), int32] */;
  %938 = cast(%935, dtype="bool") /* ty=Tensor[(12, 15, 4), bool] */;
  %939 = dyn.reshape(%936, %937, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %940 = greater_equal(%938, %939) /* ty=Tensor[(12, 15, 4), bool] */;
  %941 = cast(%940, dtype="float32") /* ty=Tensor[(12, 15, 4), float32] */;
  %942 = reshape(%941, newshape=[12, 15, 4]) /* ty=Tensor[(12, 15, 4), float32] */;
  %943 = @func_2115(%942) /* ty=(Tensor[(12, 15, 4), uint64], Tensor[(12, 15, 4), float64]) */;
  %944 = cast(%var_3648, dtype="float64") /* ty=Tensor[(1, 450), float64] */;
  %945 = cast(%var_3648, dtype="float64") /* ty=Tensor[(1, 450), float64] */;
  %946 = cast(meta[relay.Constant][65] /* ty=Tensor[(65, 13), uint16] */, dtype="uint16") /* ty=Tensor[(65, 13), uint16] */;
  %947 = cast(%var_3650, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %948 = cast(%var_3648, dtype="bool") /* ty=Tensor[(1, 450), bool] */;
  %949 = cast(%var_3648, dtype="bool") /* ty=Tensor[(1, 450), bool] */;
  %950 = reshape(%944, newshape=[10, 5, 9]) /* ty=Tensor[(10, 5, 9), float64] */;
  %951 = reshape(%945, newshape=[10, 5, 9]) /* ty=Tensor[(10, 5, 9), float64] */;
  %952 = reshape(%946, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), uint16] */;
  %953 = reshape(%947, newshape=[90]) /* ty=Tensor[(90), uint64] */;
  %954 = reshape(%948, newshape=[10, 5, 9]) /* ty=Tensor[(10, 5, 9), bool] */;
  %955 = reshape(%949, newshape=[10, 5, 9]) /* ty=Tensor[(10, 5, 9), bool] */;
  %956 = @func_2615(%950, %951, %952, %953, %954, %955) /* ty=(Tensor[(12, 9, 13), float64], Tensor[(13, 13, 5), int64], Tensor[(12, 9, 13), float64], Tensor[(10, 5, 9), bool], Tensor[(16, ?, 10), float32], Tensor[(90), uint64], Tensor[(12, 15, 4), float32], Tensor[(90, 1), float32], Tensor[(1, 6, 5), float64], Tensor[(10, 5, 9), float32], Tensor[(10, 5, 9), float64]) */;
  %957 = cast(%var_3654, dtype="int64") /* ty=Tensor[(198), int64] */;
  %958 = cast(%var_3654, dtype="int64") /* ty=Tensor[(198), int64] */;
  %959 = reshape(%957, newshape=[3, 6, 11]) /* ty=Tensor[(3, 6, 11), int64] */;
  %960 = reshape(%958, newshape=[3, 6, 11]) /* ty=Tensor[(3, 6, 11), int64] */;
  %961 = @func_713(%959, %960) /* ty=(Tensor[(3, 6, 11), int64], Tensor[(3, 6, 11), float32]) */;
  %962 = @func_2282() /* ty=Tensor[(12, 15, 4), float32] */;
  %963 = %943.0;
  %964 = %956.7;
  %965 = %961.1;
  (%940, %962, %963, %964, %var_3648, meta[relay.Constant][65] /* ty=Tensor[(65, 13), uint16] */, %var_3650, %965, %var_3654)
}

def @func_6172() -> (Tensor[(12, 15, 4), float32], Tensor[(?, 6, 5), bool], Tensor[(30), float64], Tensor[(1404), int8], Tensor[(?, 6, 5), bool], Tensor[(12, 9, 13), float64], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(200), int8]) {
  %966 = @func_3478() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %967 = cast(meta[relay.Constant][66] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %968 = cast(meta[relay.Constant][67] /* ty=Tensor[(1404), int8] */, dtype="int8") /* ty=Tensor[(1404), int8] */;
  %969 = reshape(%967, newshape=[30]) /* ty=Tensor[(30), float64] */;
  %970 = reshape(%968, newshape=[1404]) /* ty=Tensor[(1404), int8] */;
  %971 = @func_2816(%969, %970) /* ty=(Tensor[(?, 6, 5), bool], Tensor[(1404), bool]) */;
  %972 = %971.0;
  %973 = cast(%972, dtype="float64") /* ty=Tensor[(?, 6, 5), float64] */;
  %974 = cast(meta[relay.Constant][67] /* ty=Tensor[(1404), int8] */, dtype="int8") /* ty=Tensor[(1404), int8] */;
  %975 = reshape(%973, newshape=[30]) /* ty=Tensor[(30), float64] */;
  %976 = reshape(%974, newshape=[1404]) /* ty=Tensor[(1404), int8] */;
  %977 = @func_2816(%975, %976) /* ty=(Tensor[(?, 6, 5), bool], Tensor[(1404), bool]) */;
  %978 = @func_5776() /* ty=(Tensor[(12, 9, 13), float64],) */;
  %979 = @func_2030() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %980 = @func_4423() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(4, 10, 5), float64], Tensor[(200), int8], Tensor[(12, 15, 4), float32]) */;
  %981 = %966.0;
  %982 = %977.0;
  %983 = %978.0;
  %984 = @func_2282() /* ty=Tensor[(12, 15, 4), float32] */;
  %985 = %979.0;
  %986 = @func_3339() /* ty=Tensor[(12, 15, 4), float32] */;
  %987 = %980.2;
  (%981, %972, meta[relay.Constant][66] /* ty=Tensor[(30), float64] */, meta[relay.Constant][67] /* ty=Tensor[(1404), int8] */, %982, %983, %984, %985, %986, %987)
}

def @func_4694() -> (Tensor[(12, 9, 13), float64], Tensor[(12, 15, 4), float32], Tensor[(2100), uint8], Tensor[(65, 13), uint16], Tensor[(90), uint64]) {
  %988 = @func_2255() /* ty=(Tensor[(12, 9, 13), float64],) */;
  %989 = cast(meta[relay.Constant][68] /* ty=Tensor[(65, 13), uint16] */, dtype="uint16") /* ty=Tensor[(65, 13), uint16] */;
  %990 = cast(meta[relay.Constant][69] /* ty=Tensor[(90), uint64] */, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %991 = reshape(%989, newshape=[1, 845]) /* ty=Tensor[(1, 845), uint16] */;
  %992 = reshape(%990, newshape=[3, 30]) /* ty=Tensor[(3, 30), uint64] */;
  %993 = @func_1356(%991, %992) /* ty=(Tensor[(12, 15, 4), float32], Tensor[(845), uint16], Tensor[(2100), uint8], Tensor[(1, 845), uint16], Tensor[(30, 1), float64], Tensor[(1, 6, 5), float64], Tensor[(2, 9, 5), bool], Tensor[(3, 30), float32], Tensor[(2, 9, 5), bool]) */;
  %994 = %988.0;
  %995 = @func_2762() /* ty=Tensor[(12, 15, 4), float32] */;
  %996 = %993.2;
  (%994, %995, %996, meta[relay.Constant][68] /* ty=Tensor[(65, 13), uint16] */, meta[relay.Constant][69] /* ty=Tensor[(90), uint64] */)
}

def @func_4608() -> Tensor[(1404), int8] {
  %997 = @func_1576() /* ty=(Tensor[(30, 1), float64], Tensor[(12, 9, 13), float64], Tensor[(1404), int8]) */;
  %997.2
}

def @func_1781(%var_1721: Tensor[(845), uint16], %var_1732: Tensor[(468), float32]) -> (Tensor[(12, 9, 13), float64], Tensor[(3, 6, 11), float32], Tensor[(845), uint16], Tensor[(13, 4, 9), float32], Tensor[(468), float32], Tensor[(3, 6, 11), float32], Tensor[(12, 9, 13), float64], Tensor[(30, 1), float64]) {
  %998 = @func_1576() /* ty=(Tensor[(30, 1), float64], Tensor[(12, 9, 13), float64], Tensor[(1404), int8]) */;
  %999 = cast(%var_1721, dtype="uint16") /* ty=Tensor[(845), uint16] */;
  %1000 = reshape(%999, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), uint16] */;
  %1001 = @func_759(%1000) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(3, 6, 11), float32], Tensor[(99, 2), int64]) */;
  %1002 = cast(%var_1732, dtype="float32") /* ty=Tensor[(468), float32] */;
  %1003 = reshape(%1002, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float32] */;
  %1004 = @func_868(%1003) /* ty=(Tensor[(13, 4, 9), float32],) */;
  %1005 = %1001.1;
  %1006 = cast(%1005, dtype="int64") /* ty=Tensor[(3, 6, 11), int64] */;
  %1007 = cast(%1005, dtype="int64") /* ty=Tensor[(3, 6, 11), int64] */;
  %1008 = reshape(%1006, newshape=[3, 6, 11]) /* ty=Tensor[(3, 6, 11), int64] */;
  %1009 = reshape(%1007, newshape=[3, 6, 11]) /* ty=Tensor[(3, 6, 11), int64] */;
  %1010 = @func_713(%1008, %1009) /* ty=(Tensor[(3, 6, 11), int64], Tensor[(3, 6, 11), float32]) */;
  %1011 = @func_1576() /* ty=(Tensor[(30, 1), float64], Tensor[(12, 9, 13), float64], Tensor[(1404), int8]) */;
  %1012 = @func_1576() /* ty=(Tensor[(30, 1), float64], Tensor[(12, 9, 13), float64], Tensor[(1404), int8]) */;
  %1013 = %998.1;
  %1014 = %1004.0;
  %1015 = %1010.1;
  %1016 = %1011.1;
  %1017 = %1012.0;
  (%1013, %1005, %var_1721, %1014, %var_1732, %1015, %1016, %1017)
}

def @func_5874() -> (Tensor[(7, 15, 8), float64],) {
  %1018 = @func_4272() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(7, 15, 8), float64]) */;
  %1019 = %1018.2;
  (%1019,)
}

def @func_5840() -> Tensor[(9, 15, 2), bool] {
  %1020 = @func_4125() /* ty=(Tensor[(9, 15, 2), bool], Tensor[(30, 1), float64], Tensor[(720), float32]) */;
  %1020.0
}

def @func_2858() -> Tensor[(12, 15, 4), float32] {
  @func_2282() /* ty=Tensor[(12, 15, 4), float32] */
}

def @func_4217() -> Tensor[(13, 13, 5), uint16] {
  %1021 = @func_2158() /* ty=(Tensor[(12, 9, 13), float64], Tensor[(13, 13, 5), uint16], Tensor[(3, 700), uint8], Tensor[(13, 65), uint16], Tensor[(12, 15, 4), float32]) */;
  %1021.1
}

def @func_1693(%var_1667: Tensor[(432), bool], %var_1669: Tensor[(845), uint16]) -> (Tensor[(1, 6, 5), float64], Tensor[(13, 13, 5), uint16], Tensor[(432), bool], Tensor[(845), uint16], Tensor[(30, 2100), float64], Tensor[(1, 6, 5), float64]) {
  %1022 = @func_1282() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */;
  %1023 = %1022.3;
  %1024 = cast(%1023, dtype="float64") /* ty=Tensor[(30, 1), float64] */;
  %1025 = reshape(%1024, newshape=[1, 6, 5]) /* ty=Tensor[(1, 6, 5), float64] */;
  %1026 = @func_428(%1025) /* ty=(Tensor[(1, 6, 5), float64],) */;
  %1027 = cast(%var_1667, dtype="bool") /* ty=Tensor[(432), bool] */;
  %1028 = cast(%1023, dtype="float64") /* ty=Tensor[(30, 1), float64] */;
  %1029 = cast(meta[relay.Constant][70] /* ty=Tensor[(1, 2100), uint8] */, dtype="uint8") /* ty=Tensor[(1, 2100), uint8] */;
  %1030 = cast(%var_1669, dtype="uint16") /* ty=Tensor[(845), uint16] */;
  %1031 = reshape(%1027, newshape=[4, 12, 9]) /* ty=Tensor[(4, 12, 9), bool] */;
  %1032 = reshape(%1028, newshape=[30]) /* ty=Tensor[(30), float64] */;
  %1033 = reshape(%1029, newshape=[1, 2100]) /* ty=Tensor[(1, 2100), uint8] */;
  %1034 = reshape(%1030, newshape=[65, 13]) /* ty=Tensor[(65, 13), uint16] */;
  %1035 = @func_1441(%1031, %1032, %1033, %1034) /* ty=(Tensor[(4, 12, 9), int64], Tensor[(1, 6, 5), float64], Tensor[(30), float64], Tensor[(1, 6, 5), float64], Tensor[(13, 4, 9), float32], Tensor[(6, 78), float32], Tensor[(3, 6, 11), float32], Tensor[(10, 14, 15), float64], Tensor[(1, 2100), uint8], Tensor[(65, 13), uint32], Tensor[(13, 13, 5), uint16], Tensor[(30, 2), int32], Tensor[(30, 1), float64]) */;
  %1036 = cast(meta[relay.Constant][70] /* ty=Tensor[(1, 2100), uint8] */, dtype="float64") /* ty=Tensor[(1, 2100), float64] */;
  %1037 = cast(%1023, dtype="float64") /* ty=Tensor[(30, 1), float64] */;
  %1038 = @func_1282() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */;
  %1039 = %1026.0;
  %1040 = %1035.10;
  %1041 = floor_mod(%1036, %1037) /* ty=Tensor[(30, 2100), float64] */;
  %1042 = %1038.2;
  (%1039, %1040, %var_1667, %var_1669, %1041, %1042)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_7644() -> Tensor[(12, 15, 4), float32] {
  %0 = fn () -> Tensor[(12, 15, 4), float32] {
    @func_3292() /* ty=Tensor[(12, 15, 4), float32] */
  };
  %0() /* ty=Tensor[(12, 15, 4), float32] */
}

def @func_1038(%var_1017: Tensor[(10, 14, 15), uint8], %var_1028: Tensor[(845), uint16]) -> (Tensor[(10, 14, 15), uint8], Tensor[(13, 13, 5), uint16], Tensor[(845), uint16], Tensor[(10, 14, 15), float64]) {
  %1 = cast(%var_1017, dtype="uint8") /* ty=Tensor[(10, 14, 15), uint8] */;
  %2 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(10, 14, 15), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(10, 14, 15), uint8] */, dtype="uint8") /* ty=Tensor[(10, 14, 15), uint8] */;
  %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %5 = cast(%var_1028, dtype="uint16") /* ty=Tensor[(845), uint16] */;
  %6 = reshape(%5, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), uint16] */;
  %7 = @func_759(%6) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(3, 6, 11), float32], Tensor[(99, 2), int64]) */;
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(10, 14, 15), uint8] */, dtype="float64") /* ty=Tensor[(10, 14, 15), float64] */;
  %9 = bitwise_or(%3, %4) /* ty=Tensor[(10, 14, 15), uint8] */;
  %10 = %7.0;
  %11 = exp(%8) /* ty=Tensor[(10, 14, 15), float64] */;
  (%9, %10, %var_1028, %11)
}

def @func_3788(%var_3787: Tensor[(12, 9, 13), float64]) -> (Tensor[(12, 9, 13), bool],) {
  %19 = fn (%var_3780: Tensor[(12, 9, 13), float64]) -> (Tensor[(12, 9, 13), bool],) {
    %12 = @func_2255() /* ty=(Tensor[(12, 9, 13), float64],) */;
    %13 = %12.0;
    %14 = cast(%var_3780, dtype="bool") /* ty=Tensor[(12, 9, 13), bool] */;
    %15 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
    %16 = cast(%13, dtype="bool") /* ty=Tensor[(12, 9, 13), bool] */;
    %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %18 = greater_equal(%16, %17) /* ty=Tensor[(12, 9, 13), bool] */;
    (%18,)
  };
  %19(%var_3787) /* ty=(Tensor[(12, 9, 13), bool],) */
}

def @func_7188() -> (Tensor[(13, 13, 5), uint16], Tensor[(12, 9, 13), float64], Tensor[(468, 1), float32]) {
  @func_7186() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(12, 9, 13), float64], Tensor[(468, 1), float32]) */
}

def @func_4273() -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(7, 15, 8), float64]) {
  %23 = fn () -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(7, 15, 8), float64]) {
    %20 = @func_3339() /* ty=Tensor[(12, 15, 4), float32] */;
    %21 = @func_2282() /* ty=Tensor[(12, 15, 4), float32] */;
    %22 = @func_2748() /* ty=Tensor[(7, 15, 8), float64] */;
    (%20, %21, %22)
  };
  %23() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(7, 15, 8), float64]) */
}

def @func_2255() -> (Tensor[(12, 9, 13), float64],) {
  %24 = @func_2060() /* ty=Tensor[(12, 9, 13), float64] */;
  (%24,)
}

def @func_4567() -> (Tensor[(12, 15, 4), float32],) {
  %25 = @func_3171() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float64]) */;
  %26 = %25.0;
  (%26,)
}

def @func_2115(%var_2101: Tensor[(12, 15, 4), float32]) -> (Tensor[(12, 15, 4), uint64], Tensor[(12, 15, 4), float64]) {
  %27 = @func_2030() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %28 = %27.0;
  %29 = cast(%var_2101, dtype="uint64") /* ty=Tensor[(12, 15, 4), uint64] */;
  %30 = shape_of(%28, dtype="int32") /* ty=Tensor[(3), int32] */;
  %31 = cast(%28, dtype="uint64") /* ty=Tensor[(12, 15, 4), uint64] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %33 = cast(%28, dtype="float64") /* ty=Tensor[(12, 15, 4), float64] */;
  %34 = left_shift(%31, %32) /* ty=Tensor[(12, 15, 4), uint64] */;
  %35 = log2(%33) /* ty=Tensor[(12, 15, 4), float64] */;
  (%34, %35)
}

def @func_2461(%var_2435: Tensor[(13, 14, 11), uint8]) -> (Tensor[(13, 14, 11), uint8],) {
  %36 = cast(%var_2435, dtype="uint8") /* ty=Tensor[(13, 14, 11), uint8] */;
  %37 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(13, 14, 11), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %38 = cast(meta[relay.Constant][1] /* ty=Tensor[(13, 14, 11), uint8] */, dtype="uint8") /* ty=Tensor[(13, 14, 11), uint8] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %40 = bitwise_and(%38, %39) /* ty=Tensor[(13, 14, 11), uint8] */;
  (%40,)
}

def @func_5717() -> (Tensor[(12, 15, 4), bool],) {
  @func_5715() /* ty=(Tensor[(12, 15, 4), bool],) */
}

def @func_6292() -> (Tensor[(12, 15, 4), bool], Tensor[(12, 15, 4), float32]) {
  %45 = fn () -> (Tensor[(12, 15, 4), bool], Tensor[(12, 15, 4), float32]) {
    %41 = @func_5715() /* ty=(Tensor[(12, 15, 4), bool],) */;
    %42 = @func_5986() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32]) */;
    %43 = %41.0;
    %44 = %42.0;
    (%43, %44)
  };
  %45() /* ty=(Tensor[(12, 15, 4), bool], Tensor[(12, 15, 4), float32]) */
}

def @func_5255(%var_5252: Tensor[(1, 2688), float32], %var_5253: Tensor[(3, 700), uint8], %var_5254: Tensor[(845), uint16]) -> (Tensor[(7, 15, 8), int64], Tensor[(16, 12, 14), float32], Tensor[(1, 2688), float32], Tensor[(845), uint16], Tensor[(3, 700), uint8], Tensor[(845), uint16]) {
  %57 = fn (%var_5226: Tensor[(1, 2688), float32], %var_5230: Tensor[(3, 700), uint8], %var_5231: Tensor[(845), uint16]) -> (Tensor[(7, 15, 8), int64], Tensor[(16, 12, 14), float32], Tensor[(1, 2688), float32], Tensor[(845), uint16], Tensor[(3, 700), uint8], Tensor[(845), uint16]) {
    %46 = @func_2363() /* ty=(Tensor[(7, 15, 8), int64],) */;
    %47 = cast(%var_5226, dtype="float32") /* ty=Tensor[(1, 2688), float32] */;
    %48 = reshape(%47, newshape=[16, 12, 14]) /* ty=Tensor[(16, 12, 14), float32] */;
    %49 = cast(%var_5230, dtype="uint8") /* ty=Tensor[(3, 700), uint8] */;
    %50 = cast(%var_5231, dtype="uint16") /* ty=Tensor[(845), uint16] */;
    %51 = reshape(%49, newshape=[10, 14, 15]) /* ty=Tensor[(10, 14, 15), uint8] */;
    %52 = reshape(%50, newshape=[845]) /* ty=Tensor[(845), uint16] */;
    %53 = @func_1038(%51, %52) /* ty=(Tensor[(10, 14, 15), uint8], Tensor[(13, 13, 5), uint16], Tensor[(845), uint16], Tensor[(10, 14, 15), float64]) */;
    %54 = %46.0;
    %55 = @func_3358(%48) /* ty=Tensor[(16, 12, 14), float32] */;
    %56 = %53.2;
    (%54, %55, %var_5226, %56, %var_5230, %var_5231)
  };
  %57(%var_5252, %var_5253, %var_5254) /* ty=(Tensor[(7, 15, 8), int64], Tensor[(16, 12, 14), float32], Tensor[(1, 2688), float32], Tensor[(845), uint16], Tensor[(3, 700), uint8], Tensor[(845), uint16]) */
}

def @func_2283() -> Tensor[(12, 15, 4), float32] {
  %59 = fn () -> Tensor[(12, 15, 4), float32] {
    %58 = @func_1932() /* ty=(Tensor[(12, 15, 4), float32],) */;
    %58.0
  };
  %59() /* ty=Tensor[(12, 15, 4), float32] */
}

def @func_6355() -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float64], Tensor[(198), int64]) {
  %60 = @func_5986() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32]) */;
  %61 = cast(meta[relay.Constant][2] /* ty=Tensor[(198), int64] */, dtype="int64") /* ty=Tensor[(198), int64] */;
  %62 = reshape(%61, newshape=[198, 1]) /* ty=Tensor[(198, 1), int64] */;
  %63 = @func_4003(%62) /* ty=(Tensor[(12, 15, 4), float64], Tensor[(1, 845), uint16], Tensor[(845), uint16], Tensor[(12, 15, 4), float64], Tensor[(1, 450), float64], Tensor[(50, 9), float64], Tensor[(15, 6), uint64], Tensor[(12, 15, 4), float32], Tensor[(198, 315), uint32]) */;
  %64 = %60.0;
  %65 = %63.3;
  (%64, %65, meta[relay.Constant][2] /* ty=Tensor[(198), int64] */)
}

def @func_2985() -> (Tensor[(12, 15, 4), float32],) {
  @func_2983() /* ty=(Tensor[(12, 15, 4), float32],) */
}

def @func_5987() -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32]) {
  %69 = fn () -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32]) {
    %66 = @func_4423() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(4, 10, 5), float64], Tensor[(200), int8], Tensor[(12, 15, 4), float32]) */;
    %67 = @func_4101() /* ty=Tensor[(12, 15, 4), float32] */;
    %68 = %66.3;
    (%67, %68)
  };
  %69() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32]) */
}

def @func_1578() -> (Tensor[(30, 1), float64], Tensor[(12, 9, 13), float64], Tensor[(1404), int8]) {
  @func_1576() /* ty=(Tensor[(30, 1), float64], Tensor[(12, 9, 13), float64], Tensor[(1404), int8]) */
}

def @func_3878(%var_3830: Tensor[(450), float64], %var_3831: Tensor[(90), uint64], %var_3832: Tensor[(3, 66), int64]) -> (Tensor[(65, 13), uint16], Tensor[(450), float64], Tensor[(90), uint64], Tensor[(12, 9, 13), float64], Tensor[(12, 9, 13), float64], Tensor[(2688), float32], Tensor[(440), uint32], Tensor[(3, 66), float64]) {
  %70 = cast(%var_3830, dtype="float64") /* ty=Tensor[(450), float64] */;
  %71 = cast(%var_3831, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %72 = cast(%var_3832, dtype="int64") /* ty=Tensor[(3, 66), int64] */;
  %73 = reshape(%70, newshape=[1, 450]) /* ty=Tensor[(1, 450), float64] */;
  %74 = reshape(%71, newshape=[90]) /* ty=Tensor[(90), uint64] */;
  %75 = reshape(%72, newshape=[198]) /* ty=Tensor[(198), int64] */;
  %76 = @func_3657(%73, %74, %75) /* ty=(Tensor[(12, 15, 4), bool], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), uint64], Tensor[(90, 1), float32], Tensor[(1, 450), float64], Tensor[(65, 13), uint16], Tensor[(90), uint64], Tensor[(3, 6, 11), float32], Tensor[(198), int64]) */;
  %77 = @func_3539() /* ty=(Tensor[(12, 9, 13), float64],) */;
  %78 = %77.0;
  %79 = cast(%78, dtype="float64") /* ty=Tensor[(12, 9, 13), float64] */;
  %80 = cast(meta[relay.Constant][3] /* ty=Tensor[(440), uint32] */, dtype="uint32") /* ty=Tensor[(440), uint32] */;
  %81 = cast(meta[relay.Constant][3] /* ty=Tensor[(440), uint32] */, dtype="uint32") /* ty=Tensor[(440), uint32] */;
  %82 = reshape(%80, newshape=[11, 5, 8]) /* ty=Tensor[(11, 5, 8), uint32] */;
  %83 = reshape(%81, newshape=[11, 5, 8]) /* ty=Tensor[(11, 5, 8), uint32] */;
  %84 = @func_3769(%82, %83) /* ty=(Tensor[(11, 5, 8), bool], Tensor[(11, 5, 8), float32], Tensor[(432), bool], Tensor[(2688), float32]) */;
  %85 = cast(%var_3832, dtype="float64") /* ty=Tensor[(3, 66), float64] */;
  %86 = acos(%85) /* ty=Tensor[(3, 66), float64] */;
  %87 = cast(%86, dtype="float64") /* ty=Tensor[(3, 66), float64] */;
  %88 = %76.5;
  %89 = log2(%79) /* ty=Tensor[(12, 9, 13), float64] */;
  %90 = @func_2060() /* ty=Tensor[(12, 9, 13), float64] */;
  %91 = %84.3;
  %92 = sinh(%87) /* ty=Tensor[(3, 66), float64] */;
  (%88, %var_3830, %var_3831, %89, %90, %91, meta[relay.Constant][3] /* ty=Tensor[(440), uint32] */, %92)
}

def @func_868(%var_863: Tensor[(13, 4, 9), float32]) -> (Tensor[(13, 4, 9), float32],) {
  %93 = cast(%var_863, dtype="float32") /* ty=Tensor[(13, 4, 9), float32] */;
  %94 = acos(%93) /* ty=Tensor[(13, 4, 9), float32] */;
  (%94,)
}

def @func_3339() -> Tensor[(12, 15, 4), float32] {
  %95 = @func_3292() /* ty=Tensor[(12, 15, 4), float32] */;
  %96 = cast(%95, dtype="float32") /* ty=Tensor[(12, 15, 4), float32] */;
  atanh(%96) /* ty=Tensor[(12, 15, 4), float32] */
}

def @func_2464(%var_2462: Tensor[(13, 14, 11), uint8]) -> (Tensor[(13, 14, 11), uint8],) {
  @func_2461(%var_2462) /* ty=(Tensor[(13, 14, 11), uint8],) */
}

def @func_4185() -> (Tensor[(12, 15, 4), float32], Tensor[(845, 1), uint16], Tensor[(99, 2), float32]) {
  %97 = @func_3591() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32]) */;
  %98 = cast(meta[relay.Constant][4] /* ty=Tensor[(845, 1), uint16] */, dtype="uint16") /* ty=Tensor[(845, 1), uint16] */;
  %99 = reshape(%98, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), uint16] */;
  %100 = @func_759(%99) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(3, 6, 11), float32], Tensor[(99, 2), int64]) */;
  %101 = %100.2;
  %102 = cast(%101, dtype="float32") /* ty=Tensor[(99, 2), float32] */;
  %103 = %97.1;
  %104 = sinh(%102) /* ty=Tensor[(99, 2), float32] */;
  (%103, meta[relay.Constant][4] /* ty=Tensor[(845, 1), uint16] */, %104)
}

def @func_7453(%var_7448: Tensor[(4, 6, 12), uint64], %var_7449: Tensor[(4, 6, 12), uint64]) -> (Tensor[(4, 6, 12), uint64],) {
  %105 = cast(%var_7449, dtype="uint64") /* ty=Tensor[(4, 6, 12), uint64] */;
  %106 = shape_of(%var_7448, dtype="int32") /* ty=Tensor[(3), int32] */;
  %107 = cast(%var_7448, dtype="uint64") /* ty=Tensor[(4, 6, 12), uint64] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %109 = logical_xor(%107, %108) /* ty=Tensor[(4, 6, 12), uint64] */;
  (%109,)
}

def @func_5472() -> (Tensor[(12, 9, 13), float64],) {
  %111 = fn () -> (Tensor[(12, 9, 13), float64],) {
    %110 = @func_2060() /* ty=Tensor[(12, 9, 13), float64] */;
    (%110,)
  };
  %111() /* ty=(Tensor[(12, 9, 13), float64],) */
}

def @func_2721() -> Tensor[(1404), int8] {
  %112 = @func_1576() /* ty=(Tensor[(30, 1), float64], Tensor[(12, 9, 13), float64], Tensor[(1404), int8]) */;
  %112.2
}

def @func_3479() -> (Tensor[(12, 15, 4), float32],) {
  %114 = fn () -> (Tensor[(12, 15, 4), float32],) {
    %113 = @func_3339() /* ty=Tensor[(12, 15, 4), float32] */;
    (%113,)
  };
  %114() /* ty=(Tensor[(12, 15, 4), float32],) */
}

def @func_4825() -> (Tensor[(13, 13, 5), uint16], Tensor[(12, 15, 4), float32]) {
  %117 = fn () -> (Tensor[(13, 13, 5), uint16], Tensor[(12, 15, 4), float32]) {
    %115 = @func_4217() /* ty=Tensor[(13, 13, 5), uint16] */;
    %116 = @func_4101() /* ty=Tensor[(12, 15, 4), float32] */;
    (%115, %116)
  };
  %117() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(12, 15, 4), float32]) */
}

def @func_6173() -> (Tensor[(12, 15, 4), float32], Tensor[(?, 6, 5), bool], Tensor[(30), float64], Tensor[(1404), int8], Tensor[(?, 6, 5), bool], Tensor[(12, 9, 13), float64], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(200), int8]) {
  %140 = fn () -> (Tensor[(12, 15, 4), float32], Tensor[(?, 6, 5), bool], Tensor[(30), float64], Tensor[(1404), int8], Tensor[(?, 6, 5), bool], Tensor[(12, 9, 13), float64], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(200), int8]) {
    %118 = @func_3478() /* ty=(Tensor[(12, 15, 4), float32],) */;
    %119 = cast(meta[relay.Constant][5] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
    %120 = cast(meta[relay.Constant][6] /* ty=Tensor[(1404), int8] */, dtype="int8") /* ty=Tensor[(1404), int8] */;
    %121 = reshape(%119, newshape=[30]) /* ty=Tensor[(30), float64] */;
    %122 = reshape(%120, newshape=[1404]) /* ty=Tensor[(1404), int8] */;
    %123 = @func_2816(%121, %122) /* ty=(Tensor[(?, 6, 5), bool], Tensor[(1404), bool]) */;
    %124 = %123.0;
    %125 = cast(%124, dtype="float64") /* ty=Tensor[(?, 6, 5), float64] */;
    %126 = cast(meta[relay.Constant][6] /* ty=Tensor[(1404), int8] */, dtype="int8") /* ty=Tensor[(1404), int8] */;
    %127 = reshape(%125, newshape=[30]) /* ty=Tensor[(30), float64] */;
    %128 = reshape(%126, newshape=[1404]) /* ty=Tensor[(1404), int8] */;
    %129 = @func_2816(%127, %128) /* ty=(Tensor[(?, 6, 5), bool], Tensor[(1404), bool]) */;
    %130 = @func_5776() /* ty=(Tensor[(12, 9, 13), float64],) */;
    %131 = @func_2030() /* ty=(Tensor[(12, 15, 4), float32],) */;
    %132 = @func_4423() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(4, 10, 5), float64], Tensor[(200), int8], Tensor[(12, 15, 4), float32]) */;
    %133 = %118.0;
    %134 = %129.0;
    %135 = %130.0;
    %136 = @func_2282() /* ty=Tensor[(12, 15, 4), float32] */;
    %137 = %131.0;
    %138 = @func_3339() /* ty=Tensor[(12, 15, 4), float32] */;
    %139 = %132.2;
    (%133, %124, meta[relay.Constant][5] /* ty=Tensor[(30), float64] */, meta[relay.Constant][6] /* ty=Tensor[(1404), int8] */, %134, %135, %136, %137, %138, %139)
  };
  %140() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(?, 6, 5), bool], Tensor[(30), float64], Tensor[(1404), int8], Tensor[(?, 6, 5), bool], Tensor[(12, 9, 13), float64], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(200), int8]) */
}

def @func_6775(%var_6773: Tensor[(30), float64], %var_6774: Tensor[(845), uint16]) -> (Tensor[(12, 9, 13), float64], Tensor[(?, 6, 5), uint16], Tensor[(30), float64], Tensor[(9, 15, 2), bool], Tensor[(12, 15, 4), float32], Tensor[(24, 112), float32], Tensor[(3, 6, 11), float32], Tensor[(845), uint16]) {
  @func_6771(%var_6773, %var_6774) /* ty=(Tensor[(12, 9, 13), float64], Tensor[(?, 6, 5), uint16], Tensor[(30), float64], Tensor[(9, 15, 2), bool], Tensor[(12, 15, 4), float32], Tensor[(24, 112), float32], Tensor[(3, 6, 11), float32], Tensor[(845), uint16]) */
}

def @func_2160() -> (Tensor[(12, 9, 13), float64], Tensor[(13, 13, 5), uint16], Tensor[(3, 700), uint8], Tensor[(13, 65), uint16], Tensor[(12, 15, 4), float32]) {
  @func_2158() /* ty=(Tensor[(12, 9, 13), float64], Tensor[(13, 13, 5), uint16], Tensor[(3, 700), uint8], Tensor[(13, 65), uint16], Tensor[(12, 15, 4), float32]) */
}

def @main() -> (Tensor[(90), uint64], Tensor[(4, 10, 5), float32]) {
  %141 = @func_4696() /* ty=(Tensor[(12, 9, 13), float64], Tensor[(12, 15, 4), float32], Tensor[(2100), uint8], Tensor[(65, 13), uint16], Tensor[(90), uint64]) */;
  %142 = @func_4424() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(4, 10, 5), float64], Tensor[(200), int8], Tensor[(12, 15, 4), float32]) */;
  %143 = %142.1;
  %144 = cast(%143, dtype="float64") /* ty=Tensor[(4, 10, 5), float64] */;
  %145 = asin(%144) /* ty=Tensor[(4, 10, 5), float64] */;
  %146 = cast(%145, dtype="float32") /* ty=Tensor[(4, 10, 5), float32] */;
  %147 = %141.4;
  %148 = sin(%146) /* ty=Tensor[(4, 10, 5), float32] */;
  (%147, %148)
}

def @func_2749() -> Tensor[(7, 15, 8), float64] {
  %152 = fn () -> Tensor[(7, 15, 8), float64] {
    %149 = @func_2363() /* ty=(Tensor[(7, 15, 8), int64],) */;
    %150 = %149.0;
    %151 = cast(%150, dtype="float64") /* ty=Tensor[(7, 15, 8), float64] */;
    atan(%151) /* ty=Tensor[(7, 15, 8), float64] */
  };
  %152() /* ty=Tensor[(7, 15, 8), float64] */
}

def @func_3511() -> (Tensor[(12, 15, 4), float32],) {
  %153 = @func_3292() /* ty=Tensor[(12, 15, 4), float32] */;
  %154 = cast(%153, dtype="float32") /* ty=Tensor[(12, 15, 4), float32] */;
  %155 = atan(%154) /* ty=Tensor[(12, 15, 4), float32] */;
  (%155,)
}

def @func_6854() -> (Tensor[(12, 15, 4), float32],) {
  @func_6852() /* ty=(Tensor[(12, 15, 4), float32],) */
}

def @func_3014(%var_2986: Tensor[(4, 10, 5), int8], %var_2987: Tensor[(4, 10, 5), int8]) -> (Tensor[(4, 10, 5), float64],) {
  %156 = cast(%var_2987, dtype="bool") /* ty=Tensor[(4, 10, 5), bool] */;
  %157 = shape_of(%var_2986, dtype="int32") /* ty=Tensor[(3), int32] */;
  %158 = cast(%var_2986, dtype="bool") /* ty=Tensor[(4, 10, 5), bool] */;
  %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %160 = not_equal(%158, %159) /* ty=Tensor[(4, 10, 5), bool] */;
  %161 = cast(%160, dtype="float64") /* ty=Tensor[(4, 10, 5), float64] */;
  %162 = shape_of(%var_2986, dtype="int32") /* ty=Tensor[(3), int32] */;
  %163 = cast(%var_2986, dtype="float64") /* ty=Tensor[(4, 10, 5), float64] */;
  %164 = dyn.reshape(%161, %162, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %165 = multiply(%163, %164) /* ty=Tensor[(4, 10, 5), float64] */;
  (%165,)
}

def @func_2860() -> Tensor[(12, 15, 4), float32] {
  @func_2858() /* ty=Tensor[(12, 15, 4), float32] */
}

def @func_6771(%var_6727: Tensor[(30), float64], %var_6760: Tensor[(845), uint16]) -> (Tensor[(12, 9, 13), float64], Tensor[(?, 6, 5), uint16], Tensor[(30), float64], Tensor[(9, 15, 2), bool], Tensor[(12, 15, 4), float32], Tensor[(24, 112), float32], Tensor[(3, 6, 11), float32], Tensor[(845), uint16]) {
  %166 = @func_5471() /* ty=(Tensor[(12, 9, 13), float64],) */;
  %167 = cast(%var_6727, dtype="float64") /* ty=Tensor[(30), float64] */;
  %168 = reshape(%167, newshape=[1, 6, 5]) /* ty=Tensor[(1, 6, 5), float64] */;
  %169 = @func_1811(%168) /* ty=(Tensor[(?, 6, 5), uint16], Tensor[(?, 6, 5), uint16]) */;
  %170 = cast(meta[relay.Constant][7] /* ty=Tensor[(24, 112), float32] */, dtype="float32") /* ty=Tensor[(24, 112), float32] */;
  %171 = cast(meta[relay.Constant][7] /* ty=Tensor[(24, 112), float32] */, dtype="float64") /* ty=Tensor[(24, 112), float64] */;
  %172 = cast(meta[relay.Constant][7] /* ty=Tensor[(24, 112), float32] */, dtype="float64") /* ty=Tensor[(24, 112), float64] */;
  %173 = cast(meta[relay.Constant][7] /* ty=Tensor[(24, 112), float32] */, dtype="bool") /* ty=Tensor[(24, 112), bool] */;
  %174 = reshape(%170, newshape=[4, 672]) /* ty=Tensor[(4, 672), float32] */;
  %175 = reshape(%171, newshape=[4, 672]) /* ty=Tensor[(4, 672), float64] */;
  %176 = reshape(%172, newshape=[4, 672]) /* ty=Tensor[(4, 672), float64] */;
  %177 = reshape(%173, newshape=[4, 672]) /* ty=Tensor[(4, 672), bool] */;
  %178 = @func_3437(%174, %175, %176, %177) /* ty=(Tensor[(12, 9, 13), float64], Tensor[(16, 12, 14), float32], Tensor[(12, 15, 4), float32], Tensor[(13, 13, 5), uint16], Tensor[(432), bool], Tensor[(845), uint16], Tensor[(12, 15, 4), float32], Tensor[(4, 672), uint8], Tensor[(4, 672), bool]) */;
  %179 = cast(%var_6760, dtype="uint16") /* ty=Tensor[(845), uint16] */;
  %180 = reshape(%179, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), uint16] */;
  %181 = @func_759(%180) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(3, 6, 11), float32], Tensor[(99, 2), int64]) */;
  %182 = %166.0;
  %183 = %169.1;
  %184 = @func_5840() /* ty=Tensor[(9, 15, 2), bool] */;
  %185 = %178.2;
  %186 = %181.1;
  (%182, %183, %var_6727, %184, %185, meta[relay.Constant][7] /* ty=Tensor[(24, 112), float32] */, %186, %var_6760)
}

def @func_3883(%var_3880: Tensor[(450), float64], %var_3881: Tensor[(90), uint64], %var_3882: Tensor[(3, 66), int64]) -> (Tensor[(65, 13), uint16], Tensor[(450), float64], Tensor[(90), uint64], Tensor[(12, 9, 13), float64], Tensor[(12, 9, 13), float64], Tensor[(2688), float32], Tensor[(440), uint32], Tensor[(3, 66), float64]) {
  @func_3878(%var_3880, %var_3881, %var_3882) /* ty=(Tensor[(65, 13), uint16], Tensor[(450), float64], Tensor[(90), uint64], Tensor[(12, 9, 13), float64], Tensor[(12, 9, 13), float64], Tensor[(2688), float32], Tensor[(440), uint32], Tensor[(3, 66), float64]) */
}

def @func_4798() -> Tensor[(12, 15, 4), float32] {
  @func_4796() /* ty=Tensor[(12, 15, 4), float32] */
}

def @func_2723() -> Tensor[(1404), int8] {
  @func_2721() /* ty=Tensor[(1404), int8] */
}

def @func_6098() -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(3, 6, 11), int64], Tensor[(198), int64]) {
  @func_6096() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(3, 6, 11), int64], Tensor[(198), int64]) */
}

def @func_6871() -> (Tensor[(12, 9, 13), float64], Tensor[(90, 1), float32], Tensor[(90), uint64]) {
  %187 = cast(meta[relay.Constant][8] /* ty=Tensor[(90), uint64] */, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %188 = reshape(%187, newshape=[90, 1]) /* ty=Tensor[(90, 1), uint64] */;
  %189 = @func_1970(%188) /* ty=(Tensor[(16, ?, 10), float32], Tensor[(2, 9, 5), bool], Tensor[(90, 1), float32]) */;
  %190 = @func_2060() /* ty=Tensor[(12, 9, 13), float64] */;
  %191 = %189.2;
  (%190, %191, meta[relay.Constant][8] /* ty=Tensor[(90), uint64] */)
}

def @func_2118(%var_2116: Tensor[(12, 15, 4), float32]) -> (Tensor[(12, 15, 4), uint64], Tensor[(12, 15, 4), float64]) {
  @func_2115(%var_2116) /* ty=(Tensor[(12, 15, 4), uint64], Tensor[(12, 15, 4), float64]) */
}

def @func_7024() -> (Tensor[(12, 9, 13), float64], Tensor[(12, 15, 4), float32]) {
  @func_7022() /* ty=(Tensor[(12, 9, 13), float64], Tensor[(12, 15, 4), float32]) */
}

def @func_1784(%var_1782: Tensor[(845), uint16], %var_1783: Tensor[(468), float32]) -> (Tensor[(12, 9, 13), float64], Tensor[(3, 6, 11), float32], Tensor[(845), uint16], Tensor[(13, 4, 9), float32], Tensor[(468), float32], Tensor[(3, 6, 11), float32], Tensor[(12, 9, 13), float64], Tensor[(30, 1), float64]) {
  %212 = fn (%var_1721: Tensor[(845), uint16], %var_1732: Tensor[(468), float32]) -> (Tensor[(12, 9, 13), float64], Tensor[(3, 6, 11), float32], Tensor[(845), uint16], Tensor[(13, 4, 9), float32], Tensor[(468), float32], Tensor[(3, 6, 11), float32], Tensor[(12, 9, 13), float64], Tensor[(30, 1), float64]) {
    %192 = @func_1576() /* ty=(Tensor[(30, 1), float64], Tensor[(12, 9, 13), float64], Tensor[(1404), int8]) */;
    %193 = cast(%var_1721, dtype="uint16") /* ty=Tensor[(845), uint16] */;
    %194 = reshape(%193, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), uint16] */;
    %195 = @func_759(%194) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(3, 6, 11), float32], Tensor[(99, 2), int64]) */;
    %196 = cast(%var_1732, dtype="float32") /* ty=Tensor[(468), float32] */;
    %197 = reshape(%196, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float32] */;
    %198 = @func_868(%197) /* ty=(Tensor[(13, 4, 9), float32],) */;
    %199 = %195.1;
    %200 = cast(%199, dtype="int64") /* ty=Tensor[(3, 6, 11), int64] */;
    %201 = cast(%199, dtype="int64") /* ty=Tensor[(3, 6, 11), int64] */;
    %202 = reshape(%200, newshape=[3, 6, 11]) /* ty=Tensor[(3, 6, 11), int64] */;
    %203 = reshape(%201, newshape=[3, 6, 11]) /* ty=Tensor[(3, 6, 11), int64] */;
    %204 = @func_713(%202, %203) /* ty=(Tensor[(3, 6, 11), int64], Tensor[(3, 6, 11), float32]) */;
    %205 = @func_1576() /* ty=(Tensor[(30, 1), float64], Tensor[(12, 9, 13), float64], Tensor[(1404), int8]) */;
    %206 = @func_1576() /* ty=(Tensor[(30, 1), float64], Tensor[(12, 9, 13), float64], Tensor[(1404), int8]) */;
    %207 = %192.1;
    %208 = %198.0;
    %209 = %204.1;
    %210 = %205.1;
    %211 = %206.0;
    (%207, %199, %var_1721, %208, %var_1732, %209, %210, %211)
  };
  %212(%var_1782, %var_1783) /* ty=(Tensor[(12, 9, 13), float64], Tensor[(3, 6, 11), float32], Tensor[(845), uint16], Tensor[(13, 4, 9), float32], Tensor[(468), float32], Tensor[(3, 6, 11), float32], Tensor[(12, 9, 13), float64], Tensor[(30, 1), float64]) */
}

def @func_1973(%var_1971: Tensor[(90, 1), uint64]) -> (Tensor[(16, ?, 10), float32], Tensor[(2, 9, 5), bool], Tensor[(90, 1), float32]) {
  @func_1970(%var_1971) /* ty=(Tensor[(16, ?, 10), float32], Tensor[(2, 9, 5), bool], Tensor[(90, 1), float32]) */
}

def @func_6641(%var_6639: Tensor[(198), int64]) -> (Tensor[(12, 9, 13), float64], Tensor[(4, 10, 5), float64], Tensor[(200), int8], Tensor[(24), float32], Tensor[(24), float32], Tensor[(12, 15, 4), uint64], Tensor[(450), float64], Tensor[(90), uint64], Tensor[(198), int64]) {
  @func_6638(%var_6639) /* ty=(Tensor[(12, 9, 13), float64], Tensor[(4, 10, 5), float64], Tensor[(200), int8], Tensor[(24), float32], Tensor[(24), float32], Tensor[(12, 15, 4), uint64], Tensor[(450), float64], Tensor[(90), uint64], Tensor[(198), int64]) */
}

def @func_6534() -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(?, 440), bool]) {
  %242 = fn () -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(?, 440), bool]) {
    %213 = @func_1282() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */;
    %214 = @func_6237() /* ty=(Tensor[(12, 15, 4), float32],) */;
    %215 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 440), uint32] */, dtype="uint32") /* ty=Tensor[(1, 440), uint32] */;
    %216 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 440), uint32] */, dtype="uint32") /* ty=Tensor[(1, 440), uint32] */;
    %217 = reshape(%215, newshape=[11, 5, 8]) /* ty=Tensor[(11, 5, 8), uint32] */;
    %218 = reshape(%216, newshape=[11, 5, 8]) /* ty=Tensor[(11, 5, 8), uint32] */;
    %219 = @func_3769(%217, %218) /* ty=(Tensor[(11, 5, 8), bool], Tensor[(11, 5, 8), float32], Tensor[(432), bool], Tensor[(2688), float32]) */;
    %220 = %219.0;
    %221 = cast(%220, dtype="int32") /* ty=Tensor[(11, 5, 8), int32] */;
    %222 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(1, 440), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %223 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 440), uint32] */, dtype="int32") /* ty=Tensor[(1, 440), int32] */;
    %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %225 = logical_xor(%223, %224) /* ty=Tensor[(?, 440), int32] */;
    %226 = cast(%225, dtype="uint64") /* ty=Tensor[(?, 440), uint64] */;
    %227 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(1, 440), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %228 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 440), uint32] */, dtype="uint64") /* ty=Tensor[(1, 440), uint64] */;
    %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %230 = maximum(%228, %229) /* ty=Tensor[(?, 440), uint64] */;
    %231 = cast(%225, dtype="bool") /* ty=Tensor[(?, 440), bool] */;
    %232 = shape_of(%230, dtype="int32") /* ty=Tensor[(2), int32] */;
    %233 = cast(%230, dtype="bool") /* ty=Tensor[(?, 440), bool] */;
    %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %235 = %213.0;
    %236 = @func_4073() /* ty=Tensor[(12, 15, 4), float32] */;
    %237 = @func_3292() /* ty=Tensor[(12, 15, 4), float32] */;
    %238 = @func_2282() /* ty=Tensor[(12, 15, 4), float32] */;
    %239 = %214.0;
    %240 = @func_4796() /* ty=Tensor[(12, 15, 4), float32] */;
    %241 = logical_and(%233, %234) /* ty=Tensor[(?, 440), bool] */;
    (%235, %236, %237, %238, %239, %240, %241)
  };
  %242() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(?, 440), bool]) */
}

def @func_1359(%var_1357: Tensor[(1, 845), uint16], %var_1358: Tensor[(3, 30), uint64]) -> (Tensor[(12, 15, 4), float32], Tensor[(845), uint16], Tensor[(2100), uint8], Tensor[(1, 845), uint16], Tensor[(30, 1), float64], Tensor[(1, 6, 5), float64], Tensor[(2, 9, 5), bool], Tensor[(3, 30), float32], Tensor[(2, 9, 5), bool]) {
  %269 = fn (%var_1317: Tensor[(1, 845), uint16], %var_1336: Tensor[(3, 30), uint64]) -> (Tensor[(12, 15, 4), float32], Tensor[(845), uint16], Tensor[(2100), uint8], Tensor[(1, 845), uint16], Tensor[(30, 1), float64], Tensor[(1, 6, 5), float64], Tensor[(2, 9, 5), bool], Tensor[(3, 30), float32], Tensor[(2, 9, 5), bool]) {
    %243 = @func_1282() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */;
    %244 = cast(meta[relay.Constant][10] /* ty=Tensor[(2100), uint8] */, dtype="uint8") /* ty=Tensor[(2100), uint8] */;
    %245 = cast(%var_1317, dtype="uint16") /* ty=Tensor[(1, 845), uint16] */;
    %246 = reshape(%244, newshape=[10, 14, 15]) /* ty=Tensor[(10, 14, 15), uint8] */;
    %247 = reshape(%245, newshape=[845]) /* ty=Tensor[(845), uint16] */;
    %248 = @func_1038(%246, %247) /* ty=(Tensor[(10, 14, 15), uint8], Tensor[(13, 13, 5), uint16], Tensor[(845), uint16], Tensor[(10, 14, 15), float64]) */;
    %249 = @func_1282() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */;
    %250 = %249.3;
    %251 = cast(%250, dtype="float64") /* ty=Tensor[(30, 1), float64] */;
    %252 = reshape(%251, newshape=[1, 6, 5]) /* ty=Tensor[(1, 6, 5), float64] */;
    %253 = @func_428(%252) /* ty=(Tensor[(1, 6, 5), float64],) */;
    %254 = cast(%var_1336, dtype="uint64") /* ty=Tensor[(3, 30), uint64] */;
    %255 = cast(%var_1336, dtype="uint64") /* ty=Tensor[(3, 30), uint64] */;
    %256 = reshape(%254, newshape=[2, 9, 5]) /* ty=Tensor[(2, 9, 5), uint64] */;
    %257 = reshape(%255, newshape=[2, 9, 5]) /* ty=Tensor[(2, 9, 5), uint64] */;
    %258 = cast(%var_1336, dtype="float32") /* ty=Tensor[(3, 30), float32] */;
    %259 = asinh(%258) /* ty=Tensor[(3, 30), float32] */;
    %260 = cast(%259, dtype="uint64") /* ty=Tensor[(3, 30), uint64] */;
    %261 = @func_1150(%256, %257) /* ty=Tensor[(2, 9, 5), bool] */;
    %262 = cast(%261, dtype="uint64") /* ty=Tensor[(2, 9, 5), uint64] */;
    %263 = reshape(%260, newshape=[2, 9, 5]) /* ty=Tensor[(2, 9, 5), uint64] */;
    %264 = reshape(%262, newshape=[2, 9, 5]) /* ty=Tensor[(2, 9, 5), uint64] */;
    %265 = %243.1;
    %266 = %248.2;
    %267 = %253.0;
    %268 = @func_1150(%263, %264) /* ty=Tensor[(2, 9, 5), bool] */;
    (%265, %266, meta[relay.Constant][10] /* ty=Tensor[(2100), uint8] */, %var_1317, %250, %267, %261, %259, %268)
  };
  %269(%var_1357, %var_1358) /* ty=(Tensor[(12, 15, 4), float32], Tensor[(845), uint16], Tensor[(2100), uint8], Tensor[(1, 845), uint16], Tensor[(30, 1), float64], Tensor[(1, 6, 5), float64], Tensor[(2, 9, 5), bool], Tensor[(3, 30), float32], Tensor[(2, 9, 5), bool]) */
}

def @func_4653() -> (Tensor[(6, 9, 1), float32],) {
  %270 = cast(meta[relay.Constant][11] /* ty=Tensor[(6, 9, 1), float32] */, dtype="float32") /* ty=Tensor[(6, 9, 1), float32] */;
  %271 = tan(%270) /* ty=Tensor[(6, 9, 1), float32] */;
  (%271,)
}

def @func_2615(%var_2468: Tensor[(10, 5, 9), float64], %var_2469: Tensor[(10, 5, 9), float64], %var_2497: Tensor[(13, 13, 5), uint16], %var_2532: Tensor[(90), uint64], %var_2553: Tensor[(10, 5, 9), bool], %var_2590: Tensor[(10, 5, 9), bool]) -> (Tensor[(12, 9, 13), float64], Tensor[(13, 13, 5), int64], Tensor[(12, 9, 13), float64], Tensor[(10, 5, 9), bool], Tensor[(16, ?, 10), float32], Tensor[(90), uint64], Tensor[(12, 15, 4), float32], Tensor[(90, 1), float32], Tensor[(1, 6, 5), float64], Tensor[(10, 5, 9), float32], Tensor[(10, 5, 9), float64]) {
  %272 = @func_2158() /* ty=(Tensor[(12, 9, 13), float64], Tensor[(13, 13, 5), uint16], Tensor[(3, 700), uint8], Tensor[(13, 65), uint16], Tensor[(12, 15, 4), float32]) */;
  %273 = %272.1;
  %274 = cast(%var_2497, dtype="int64") /* ty=Tensor[(13, 13, 5), int64] */;
  %275 = shape_of(%273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(%273, dtype="int64") /* ty=Tensor[(13, 13, 5), int64] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %278 = @func_1576() /* ty=(Tensor[(30, 1), float64], Tensor[(12, 9, 13), float64], Tensor[(1404), int8]) */;
  %279 = cast(%var_2469, dtype="float64") /* ty=Tensor[(10, 5, 9), float64] */;
  %280 = shape_of(%var_2468, dtype="int32") /* ty=Tensor[(3), int32] */;
  %281 = cast(%var_2468, dtype="float64") /* ty=Tensor[(10, 5, 9), float64] */;
  %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %283 = subtract(%281, %282) /* ty=Tensor[(10, 5, 9), float64] */;
  %284 = cast(%283, dtype="float64") /* ty=Tensor[(10, 5, 9), float64] */;
  %285 = asin(%284) /* ty=Tensor[(10, 5, 9), float64] */;
  %286 = cast(%283, dtype="bool") /* ty=Tensor[(10, 5, 9), bool] */;
  %287 = shape_of(%285, dtype="int32") /* ty=Tensor[(3), int32] */;
  %288 = cast(%285, dtype="bool") /* ty=Tensor[(10, 5, 9), bool] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %290 = cast(%var_2532, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %291 = reshape(%290, newshape=[90, 1]) /* ty=Tensor[(90, 1), uint64] */;
  %292 = @func_1970(%291) /* ty=(Tensor[(16, ?, 10), float32], Tensor[(2, 9, 5), bool], Tensor[(90, 1), float32]) */;
  %293 = @func_2030() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %294 = cast(%var_2532, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %295 = reshape(%294, newshape=[90, 1]) /* ty=Tensor[(90, 1), uint64] */;
  %296 = @func_1970(%295) /* ty=(Tensor[(16, ?, 10), float32], Tensor[(2, 9, 5), bool], Tensor[(90, 1), float32]) */;
  %297 = cast(%var_2497, dtype="uint16") /* ty=Tensor[(13, 13, 5), uint16] */;
  %298 = cast(%var_2532, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %299 = reshape(%297, newshape=[1, 845]) /* ty=Tensor[(1, 845), uint16] */;
  %300 = reshape(%298, newshape=[3, 30]) /* ty=Tensor[(3, 30), uint64] */;
  %301 = @func_1356(%299, %300) /* ty=(Tensor[(12, 15, 4), float32], Tensor[(845), uint16], Tensor[(2100), uint8], Tensor[(1, 845), uint16], Tensor[(30, 1), float64], Tensor[(1, 6, 5), float64], Tensor[(2, 9, 5), bool], Tensor[(3, 30), float32], Tensor[(2, 9, 5), bool]) */;
  %302 = cast(meta[relay.Constant][12] /* ty=Tensor[(10, 5, 9), float64] */, dtype="int16") /* ty=Tensor[(10, 5, 9), int16] */;
  %303 = shape_of(%285, dtype="int32") /* ty=Tensor[(3), int32] */;
  %304 = cast(%285, dtype="int16") /* ty=Tensor[(10, 5, 9), int16] */;
  %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %306 = maximum(%304, %305) /* ty=Tensor[(10, 5, 9), int16] */;
  %307 = cast(%283, dtype="bool") /* ty=Tensor[(10, 5, 9), bool] */;
  %308 = shape_of(%306, dtype="int32") /* ty=Tensor[(3), int32] */;
  %309 = cast(%306, dtype="bool") /* ty=Tensor[(10, 5, 9), bool] */;
  %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %311 = not_equal(%309, %310) /* ty=Tensor[(10, 5, 9), bool] */;
  %312 = cast(%var_2553, dtype="bool") /* ty=Tensor[(10, 5, 9), bool] */;
  %313 = shape_of(%311, dtype="int32") /* ty=Tensor[(3), int32] */;
  %314 = cast(%311, dtype="bool") /* ty=Tensor[(10, 5, 9), bool] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %316 = logical_and(%314, %315) /* ty=Tensor[(10, 5, 9), bool] */;
  %317 = cast(%var_2590, dtype="float32") /* ty=Tensor[(10, 5, 9), float32] */;
  %318 = shape_of(%316, dtype="int32") /* ty=Tensor[(3), int32] */;
  %319 = cast(%316, dtype="float32") /* ty=Tensor[(10, 5, 9), float32] */;
  %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %321 = cast(%var_2590, dtype="float64") /* ty=Tensor[(10, 5, 9), float64] */;
  %322 = @func_2060() /* ty=Tensor[(12, 9, 13), float64] */;
  %323 = bitwise_or(%276, %277) /* ty=Tensor[(13, 13, 5), int64] */;
  %324 = %278.1;
  %325 = logical_or(%288, %289) /* ty=Tensor[(10, 5, 9), bool] */;
  %326 = %292.0;
  %327 = %293.0;
  %328 = %296.2;
  %329 = %301.5;
  %330 = minimum(%319, %320) /* ty=Tensor[(10, 5, 9), float32] */;
  %331 = erf(%321) /* ty=Tensor[(10, 5, 9), float64] */;
  (%322, %323, %324, %325, %326, %var_2532, %327, %328, %329, %330, %331)
}

def @func_7549() -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32]) {
  @func_7547() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32]) */
}

def @func_6939(%var_6937: Tensor[(9, 15, 2), bool], %var_6938: Tensor[(720), float32]) -> (Tensor[(7, 15, 8), float64], Tensor[(9, 15, 2), int64], Tensor[(12, 15, 4), float64], Tensor[(720), float32]) {
  %356 = fn (%var_6885: Tensor[(9, 15, 2), bool], %var_6927: Tensor[(720), float32]) -> (Tensor[(7, 15, 8), float64], Tensor[(9, 15, 2), int64], Tensor[(12, 15, 4), float64], Tensor[(720), float32]) {
    %332 = @func_4125() /* ty=(Tensor[(9, 15, 2), bool], Tensor[(30, 1), float64], Tensor[(720), float32]) */;
    %333 = %332.0;
    %334 = cast(%var_6885, dtype="int8") /* ty=Tensor[(9, 15, 2), int8] */;
    %335 = shape_of(%333, dtype="int32") /* ty=Tensor[(3), int32] */;
    %336 = cast(%333, dtype="int8") /* ty=Tensor[(9, 15, 2), int8] */;
    %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %338 = maximum(%336, %337) /* ty=Tensor[(9, 15, 2), int8] */;
    %339 = cast(%333, dtype="int8") /* ty=Tensor[(9, 15, 2), int8] */;
    %340 = shape_of(%338, dtype="int32") /* ty=Tensor[(3), int32] */;
    %341 = cast(%338, dtype="int8") /* ty=Tensor[(9, 15, 2), int8] */;
    %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %343 = subtract(%341, %342) /* ty=Tensor[(9, 15, 2), int8] */;
    %344 = cast(%343, dtype="float32") /* ty=Tensor[(9, 15, 2), float32] */;
    %345 = exp(%344) /* ty=Tensor[(9, 15, 2), float32] */;
    %346 = cast(%338, dtype="int64") /* ty=Tensor[(9, 15, 2), int64] */;
    %347 = shape_of(%345, dtype="int32") /* ty=Tensor[(3), int32] */;
    %348 = cast(%345, dtype="int64") /* ty=Tensor[(9, 15, 2), int64] */;
    %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %350 = cast(%var_6927, dtype="float32") /* ty=Tensor[(720), float32] */;
    %351 = reshape(%350, newshape=[12, 15, 4]) /* ty=Tensor[(12, 15, 4), float32] */;
    %352 = @func_2115(%351) /* ty=(Tensor[(12, 15, 4), uint64], Tensor[(12, 15, 4), float64]) */;
    %353 = @func_2748() /* ty=Tensor[(7, 15, 8), float64] */;
    %354 = right_shift(%348, %349) /* ty=Tensor[(9, 15, 2), int64] */;
    %355 = %352.1;
    (%353, %354, %355, %var_6927)
  };
  %356(%var_6937, %var_6938) /* ty=(Tensor[(7, 15, 8), float64], Tensor[(9, 15, 2), int64], Tensor[(12, 15, 4), float64], Tensor[(720), float32]) */
}

def @func_7377() -> (Tensor[(12, 15, 4), float32], Tensor[(90), uint64]) {
  %357 = @func_2030() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %358 = @func_7130() /* ty=(Tensor[(90), uint64],) */;
  %359 = %357.0;
  %360 = %358.0;
  (%359, %360)
}

def @func_5715() -> (Tensor[(12, 15, 4), bool],) {
  %361 = @func_5536() /* ty=(Tensor[(12, 15, 4), bool],) */;
  %362 = %361.0;
  (%362,)
}

def @func_3070(%var_3068: Tensor[(30), float64]) -> (Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30), float64], Tensor[(13, 13, 5), uint16], Tensor[(1, 2100), uint8], Tensor[(845), uint16]) {
  @func_3067(%var_3068) /* ty=(Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30), float64], Tensor[(13, 13, 5), uint16], Tensor[(1, 2100), uint8], Tensor[(845), uint16]) */
}

def @func_1970(%var_1959: Tensor[(90, 1), uint64]) -> (Tensor[(16, ?, 10), float32], Tensor[(2, 9, 5), bool], Tensor[(90, 1), float32]) {
  %363 = cast(meta[relay.Constant][14] /* ty=Tensor[(16, 1, 10), float32] */, dtype="float32") /* ty=Tensor[(16, 1, 10), float32] */;
  %364 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(16, 1, 10), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %365 = cast(meta[relay.Constant][13] /* ty=Tensor[(16, 1, 10), float32] */, dtype="float32") /* ty=Tensor[(16, 1, 10), float32] */;
  %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %367 = cast(%var_1959, dtype="uint64") /* ty=Tensor[(90, 1), uint64] */;
  %368 = cast(%var_1959, dtype="uint64") /* ty=Tensor[(90, 1), uint64] */;
  %369 = reshape(%367, newshape=[2, 9, 5]) /* ty=Tensor[(2, 9, 5), uint64] */;
  %370 = reshape(%368, newshape=[2, 9, 5]) /* ty=Tensor[(2, 9, 5), uint64] */;
  %371 = cast(%var_1959, dtype="float32") /* ty=Tensor[(90, 1), float32] */;
  %372 = add(%365, %366) /* ty=Tensor[(16, ?, 10), float32] */;
  %373 = @func_1150(%369, %370) /* ty=Tensor[(2, 9, 5), bool] */;
  %374 = log2(%371) /* ty=Tensor[(90, 1), float32] */;
  (%372, %373, %374)
}

def @func_1696(%var_1694: Tensor[(432), bool], %var_1695: Tensor[(845), uint16]) -> (Tensor[(1, 6, 5), float64], Tensor[(13, 13, 5), uint16], Tensor[(432), bool], Tensor[(845), uint16], Tensor[(30, 2100), float64], Tensor[(1, 6, 5), float64]) {
  %396 = fn (%var_1667: Tensor[(432), bool], %var_1669: Tensor[(845), uint16]) -> (Tensor[(1, 6, 5), float64], Tensor[(13, 13, 5), uint16], Tensor[(432), bool], Tensor[(845), uint16], Tensor[(30, 2100), float64], Tensor[(1, 6, 5), float64]) {
    %375 = @func_1282() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */;
    %376 = %375.3;
    %377 = cast(%376, dtype="float64") /* ty=Tensor[(30, 1), float64] */;
    %378 = reshape(%377, newshape=[1, 6, 5]) /* ty=Tensor[(1, 6, 5), float64] */;
    %379 = @func_428(%378) /* ty=(Tensor[(1, 6, 5), float64],) */;
    %380 = cast(%var_1667, dtype="bool") /* ty=Tensor[(432), bool] */;
    %381 = cast(%376, dtype="float64") /* ty=Tensor[(30, 1), float64] */;
    %382 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 2100), uint8] */, dtype="uint8") /* ty=Tensor[(1, 2100), uint8] */;
    %383 = cast(%var_1669, dtype="uint16") /* ty=Tensor[(845), uint16] */;
    %384 = reshape(%380, newshape=[4, 12, 9]) /* ty=Tensor[(4, 12, 9), bool] */;
    %385 = reshape(%381, newshape=[30]) /* ty=Tensor[(30), float64] */;
    %386 = reshape(%382, newshape=[1, 2100]) /* ty=Tensor[(1, 2100), uint8] */;
    %387 = reshape(%383, newshape=[65, 13]) /* ty=Tensor[(65, 13), uint16] */;
    %388 = @func_1441(%384, %385, %386, %387) /* ty=(Tensor[(4, 12, 9), int64], Tensor[(1, 6, 5), float64], Tensor[(30), float64], Tensor[(1, 6, 5), float64], Tensor[(13, 4, 9), float32], Tensor[(6, 78), float32], Tensor[(3, 6, 11), float32], Tensor[(10, 14, 15), float64], Tensor[(1, 2100), uint8], Tensor[(65, 13), uint32], Tensor[(13, 13, 5), uint16], Tensor[(30, 2), int32], Tensor[(30, 1), float64]) */;
    %389 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 2100), uint8] */, dtype="float64") /* ty=Tensor[(1, 2100), float64] */;
    %390 = cast(%376, dtype="float64") /* ty=Tensor[(30, 1), float64] */;
    %391 = @func_1282() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */;
    %392 = %379.0;
    %393 = %388.10;
    %394 = floor_mod(%389, %390) /* ty=Tensor[(30, 2100), float64] */;
    %395 = %391.2;
    (%392, %393, %var_1667, %var_1669, %394, %395)
  };
  %396(%var_1694, %var_1695) /* ty=(Tensor[(1, 6, 5), float64], Tensor[(13, 13, 5), uint16], Tensor[(432), bool], Tensor[(845), uint16], Tensor[(30, 2100), float64], Tensor[(1, 6, 5), float64]) */
}

def @func_1932() -> (Tensor[(12, 15, 4), float32],) {
  %397 = @func_1282() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */;
  %398 = %397.1;
  (%398,)
}

def @func_4569() -> (Tensor[(12, 15, 4), float32],) {
  @func_4567() /* ty=(Tensor[(12, 15, 4), float32],) */
}

def @func_4796() -> Tensor[(12, 15, 4), float32] {
  %399 = @func_4272() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(7, 15, 8), float64]) */;
  %399.1
}

def @func_5304() -> (Tensor[(12, 15, 4), float32],) {
  %402 = fn () -> (Tensor[(12, 15, 4), float32],) {
    %400 = @func_3478() /* ty=(Tensor[(12, 15, 4), float32],) */;
    %401 = %400.0;
    (%401,)
  };
  %402() /* ty=(Tensor[(12, 15, 4), float32],) */
}

def @func_5536() -> (Tensor[(12, 15, 4), bool],) {
  %403 = @func_4423() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(4, 10, 5), float64], Tensor[(200), int8], Tensor[(12, 15, 4), float32]) */;
  %404 = %403.3;
  %405 = cast(meta[relay.Constant][16] /* ty=Tensor[(12, 15, 4), float32] */, dtype="bool") /* ty=Tensor[(12, 15, 4), bool] */;
  %406 = shape_of(%404, dtype="int32") /* ty=Tensor[(3), int32] */;
  %407 = cast(%404, dtype="bool") /* ty=Tensor[(12, 15, 4), bool] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %409 = not_equal(%407, %408) /* ty=Tensor[(12, 15, 4), bool] */;
  (%409,)
}

def @func_1154(%var_1152: Tensor[(2, 9, 5), uint64], %var_1153: Tensor[(2, 9, 5), uint64]) -> Tensor[(2, 9, 5), bool] {
  @func_1150(%var_1152, %var_1153) /* ty=Tensor[(2, 9, 5), bool] */
}

def @func_3773(%var_3771: Tensor[(11, 5, 8), uint32], %var_3772: Tensor[(11, 5, 8), uint32]) -> (Tensor[(11, 5, 8), bool], Tensor[(11, 5, 8), float32], Tensor[(432), bool], Tensor[(2688), float32]) {
  @func_3769(%var_3771, %var_3772) /* ty=(Tensor[(11, 5, 8), bool], Tensor[(11, 5, 8), float32], Tensor[(432), bool], Tensor[(2688), float32]) */
}

def @func_2031() -> (Tensor[(12, 15, 4), float32],) {
  %412 = fn () -> (Tensor[(12, 15, 4), float32],) {
    %410 = @func_1932() /* ty=(Tensor[(12, 15, 4), float32],) */;
    %411 = %410.0;
    (%411,)
  };
  %412() /* ty=(Tensor[(12, 15, 4), float32],) */
}

def @func_6699() -> (Tensor[(6, 9, ?), bool],) {
  %413 = @func_4653() /* ty=(Tensor[(6, 9, 1), float32],) */;
  %414 = %413.0;
  %415 = cast(%414, dtype="float32") /* ty=Tensor[(6, 9, 1), float32] */;
  %416 = sin(%415) /* ty=Tensor[(6, 9, 1), float32] */;
  %417 = cast(%414, dtype="bool") /* ty=Tensor[(6, 9, 1), bool] */;
  %418 = shape_of(%416, dtype="int32") /* ty=Tensor[(3), int32] */;
  %419 = cast(%416, dtype="bool") /* ty=Tensor[(6, 9, 1), bool] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %421 = less(%419, %420) /* ty=Tensor[(6, 9, ?), bool] */;
  (%421,)
}

def @func_2965(%var_2893: Tensor[(720), float32]) -> (Tensor[(13, 13, 5), uint16], Tensor[(12, 15, 4), uint64], Tensor[(720), float32], Tensor[(?, 6, 5), uint16], Tensor[(10, 3), float64], Tensor[(2, 9, 5), float32], Tensor[(13, 65), uint16], Tensor[(1404), int8], Tensor[(7, 15, 8), float64], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) {
  %422 = @func_2158() /* ty=(Tensor[(12, 9, 13), float64], Tensor[(13, 13, 5), uint16], Tensor[(3, 700), uint8], Tensor[(13, 65), uint16], Tensor[(12, 15, 4), float32]) */;
  %423 = cast(%var_2893, dtype="float32") /* ty=Tensor[(720), float32] */;
  %424 = reshape(%423, newshape=[12, 15, 4]) /* ty=Tensor[(12, 15, 4), float32] */;
  %425 = @func_2115(%424) /* ty=(Tensor[(12, 15, 4), uint64], Tensor[(12, 15, 4), float64]) */;
  %426 = cast(meta[relay.Constant][17] /* ty=Tensor[(10, 3), float64] */, dtype="float64") /* ty=Tensor[(10, 3), float64] */;
  %427 = reshape(%426, newshape=[1, 6, 5]) /* ty=Tensor[(1, 6, 5), float64] */;
  %428 = @func_1811(%427) /* ty=(Tensor[(?, 6, 5), uint16], Tensor[(?, 6, 5), uint16]) */;
  %429 = cast(meta[relay.Constant][18] /* ty=Tensor[(90), uint64] */, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %430 = cast(meta[relay.Constant][18] /* ty=Tensor[(90), uint64] */, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %431 = reshape(%429, newshape=[2, 9, 5]) /* ty=Tensor[(2, 9, 5), uint64] */;
  %432 = reshape(%430, newshape=[2, 9, 5]) /* ty=Tensor[(2, 9, 5), uint64] */;
  %433 = @func_1150(%431, %432) /* ty=Tensor[(2, 9, 5), bool] */;
  %434 = cast(meta[relay.Constant][18] /* ty=Tensor[(90), uint64] */, dtype="float32") /* ty=Tensor[(90), float32] */;
  %435 = shape_of(%433, dtype="int32") /* ty=Tensor[(3), int32] */;
  %436 = cast(%433, dtype="float32") /* ty=Tensor[(2, 9, 5), float32] */;
  %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %438 = @func_2158() /* ty=(Tensor[(12, 9, 13), float64], Tensor[(13, 13, 5), uint16], Tensor[(3, 700), uint8], Tensor[(13, 65), uint16], Tensor[(12, 15, 4), float32]) */;
  %439 = %428.1;
  %440 = cast(%439, dtype="float64") /* ty=Tensor[(?, 6, 5), float64] */;
  %441 = reshape(%440, newshape=[1, 6, 5]) /* ty=Tensor[(1, 6, 5), float64] */;
  %442 = @func_428(%441) /* ty=(Tensor[(1, 6, 5), float64],) */;
  %443 = @func_1282() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */;
  %444 = %422.1;
  %445 = %425.0;
  %446 = power(%436, %437) /* ty=Tensor[(2, 9, 5), float32] */;
  %447 = %438.3;
  %448 = @func_2721() /* ty=Tensor[(1404), int8] */;
  %449 = @func_2748() /* ty=Tensor[(7, 15, 8), float64] */;
  %450 = %442.0;
  %451 = %443.3;
  (%444, %445, %var_2893, %439, meta[relay.Constant][17] /* ty=Tensor[(10, 3), float64] */, %446, %447, %448, %449, %450, %451)
}

def @func_6701() -> (Tensor[(6, 9, ?), bool],) {
  @func_6699() /* ty=(Tensor[(6, 9, ?), bool],) */
}

def @func_7420(%var_7418: Tensor[(845), uint16]) -> (Tensor[(1, 6, 5), float64], Tensor[(10, 14, 15), uint8], Tensor[(2100), uint8], Tensor[(845), uint16]) {
  @func_7417(%var_7418) /* ty=(Tensor[(1, 6, 5), float64], Tensor[(10, 14, 15), uint8], Tensor[(2100), uint8], Tensor[(845), uint16]) */
}

def @func_2623(%var_2617: Tensor[(10, 5, 9), float64], %var_2618: Tensor[(10, 5, 9), float64], %var_2619: Tensor[(13, 13, 5), uint16], %var_2620: Tensor[(90), uint64], %var_2621: Tensor[(10, 5, 9), bool], %var_2622: Tensor[(10, 5, 9), bool]) -> (Tensor[(12, 9, 13), float64], Tensor[(13, 13, 5), int64], Tensor[(12, 9, 13), float64], Tensor[(10, 5, 9), bool], Tensor[(16, ?, 10), float32], Tensor[(90), uint64], Tensor[(12, 15, 4), float32], Tensor[(90, 1), float32], Tensor[(1, 6, 5), float64], Tensor[(10, 5, 9), float32], Tensor[(10, 5, 9), float64]) {
  @func_2615(%var_2617, %var_2618, %var_2619, %var_2620, %var_2621, %var_2622) /* ty=(Tensor[(12, 9, 13), float64], Tensor[(13, 13, 5), int64], Tensor[(12, 9, 13), float64], Tensor[(10, 5, 9), bool], Tensor[(16, ?, 10), float32], Tensor[(90), uint64], Tensor[(12, 15, 4), float32], Tensor[(90, 1), float32], Tensor[(1, 6, 5), float64], Tensor[(10, 5, 9), float32], Tensor[(10, 5, 9), float64]) */
}

def @func_4053() -> (Tensor[(30, 1), float64], Tensor[(12, 9, 13), float64]) {
  @func_4051() /* ty=(Tensor[(30, 1), float64], Tensor[(12, 9, 13), float64]) */
}

def @func_4006(%var_4004: Tensor[(198, 1), int64]) -> (Tensor[(12, 15, 4), float64], Tensor[(1, 845), uint16], Tensor[(845), uint16], Tensor[(12, 15, 4), float64], Tensor[(1, 450), float64], Tensor[(50, 9), float64], Tensor[(15, 6), uint64], Tensor[(12, 15, 4), float32], Tensor[(198, 315), uint32]) {
  @func_4003(%var_4004) /* ty=(Tensor[(12, 15, 4), float64], Tensor[(1, 845), uint16], Tensor[(845), uint16], Tensor[(12, 15, 4), float64], Tensor[(1, 450), float64], Tensor[(50, 9), float64], Tensor[(15, 6), uint64], Tensor[(12, 15, 4), float32], Tensor[(198, 315), uint32]) */
}

def @func_1284() -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) {
  @func_1282() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */
}

def @func_3360(%var_3359: Tensor[(16, 12, 14), float32]) -> Tensor[(16, 12, 14), float32] {
  %456 = fn (%var_3353: Tensor[(16, 12, 14), float32]) -> Tensor[(16, 12, 14), float32] {
    %452 = cast(meta[relay.Constant][19] /* ty=Tensor[(16, 12, 14), float32] */, dtype="float32") /* ty=Tensor[(16, 12, 14), float32] */;
    %453 = shape_of(%var_3353, dtype="int32") /* ty=Tensor[(3), int32] */;
    %454 = cast(%var_3353, dtype="float32") /* ty=Tensor[(16, 12, 14), float32] */;
    %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    mod(%454, %455) /* ty=Tensor[(16, 12, 14), float32] */
  };
  %456(%var_3359) /* ty=Tensor[(16, 12, 14), float32] */
}

def @func_5336() -> Tensor[(12, 15, 4), float32] {
  @func_5334() /* ty=Tensor[(12, 15, 4), float32] */
}

def @func_7340(%var_7335: Tensor[(30), float64], %var_7336: Tensor[(2100), uint8], %var_7337: Tensor[(845), uint16], %var_7338: Tensor[(2002), uint8], %var_7339: Tensor[(6, 78), float32]) -> (Tensor[(90, 1), float32], Tensor[(13, 14, 11), uint8], Tensor[(12, 15, 4), float32], Tensor[(30), float64], Tensor[(2100), uint8], Tensor[(845), uint16], Tensor[(2002), float32], Tensor[(108, 4), float32], Tensor[(6, 78), float64]) {
  %486 = fn (%var_7313: Tensor[(30), float64], %var_7314: Tensor[(2100), uint8], %var_7315: Tensor[(845), uint16], %var_7317: Tensor[(2002), uint8], %var_7329: Tensor[(6, 78), float32]) -> (Tensor[(90, 1), float32], Tensor[(13, 14, 11), uint8], Tensor[(12, 15, 4), float32], Tensor[(30), float64], Tensor[(2100), uint8], Tensor[(845), uint16], Tensor[(2002), float32], Tensor[(108, 4), float32], Tensor[(6, 78), float64]) {
    %457 = @func_6871() /* ty=(Tensor[(12, 9, 13), float64], Tensor[(90, 1), float32], Tensor[(90), uint64]) */;
    %458 = cast(meta[relay.Constant][20] /* ty=Tensor[(2002), uint8] */, dtype="uint8") /* ty=Tensor[(2002), uint8] */;
    %459 = reshape(%458, newshape=[13, 14, 11]) /* ty=Tensor[(13, 14, 11), uint8] */;
    %460 = @func_2461(%459) /* ty=(Tensor[(13, 14, 11), uint8],) */;
    %461 = cast(%var_7317, dtype="float32") /* ty=Tensor[(2002), float32] */;
    %462 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(2002), uint8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %463 = cast(meta[relay.Constant][20] /* ty=Tensor[(2002), uint8] */, dtype="float32") /* ty=Tensor[(2002), float32] */;
    %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?), float32] */;
    %465 = cast(meta[relay.Constant][21] /* ty=Tensor[(108, 4), bool] */, dtype="float32") /* ty=Tensor[(108, 4), float32] */;
    %466 = cast(meta[relay.Constant][21] /* ty=Tensor[(108, 4), bool] */, dtype="bool") /* ty=Tensor[(108, 4), bool] */;
    %467 = cast(%var_7313, dtype="float64") /* ty=Tensor[(30), float64] */;
    %468 = cast(%var_7314, dtype="uint8") /* ty=Tensor[(2100), uint8] */;
    %469 = cast(%var_7315, dtype="uint16") /* ty=Tensor[(845), uint16] */;
    %470 = reshape(%466, newshape=[4, 12, 9]) /* ty=Tensor[(4, 12, 9), bool] */;
    %471 = reshape(%467, newshape=[30]) /* ty=Tensor[(30), float64] */;
    %472 = reshape(%468, newshape=[1, 2100]) /* ty=Tensor[(1, 2100), uint8] */;
    %473 = reshape(%469, newshape=[65, 13]) /* ty=Tensor[(65, 13), uint16] */;
    %474 = @func_1441(%470, %471, %472, %473) /* ty=(Tensor[(4, 12, 9), int64], Tensor[(1, 6, 5), float64], Tensor[(30), float64], Tensor[(1, 6, 5), float64], Tensor[(13, 4, 9), float32], Tensor[(6, 78), float32], Tensor[(3, 6, 11), float32], Tensor[(10, 14, 15), float64], Tensor[(1, 2100), uint8], Tensor[(65, 13), uint32], Tensor[(13, 13, 5), uint16], Tensor[(30, 2), int32], Tensor[(30, 1), float64]) */;
    %475 = %474.5;
    %476 = cast(%var_7329, dtype="float64") /* ty=Tensor[(6, 78), float64] */;
    %477 = shape_of(%475, dtype="int32") /* ty=Tensor[(2), int32] */;
    %478 = cast(%475, dtype="float64") /* ty=Tensor[(6, 78), float64] */;
    %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %480 = %457.1;
    %481 = %460.0;
    %482 = @func_2762() /* ty=Tensor[(12, 15, 4), float32] */;
    %483 = mod(%463, %464) /* ty=Tensor[(2002), float32] */;
    %484 = cos(%465) /* ty=Tensor[(108, 4), float32] */;
    %485 = floor_divide(%478, %479) /* ty=Tensor[(6, 78), float64] */;
    (%480, %481, %482, %var_7313, %var_7314, %var_7315, %483, %484, %485)
  };
  %486(%var_7335, %var_7336, %var_7337, %var_7338, %var_7339) /* ty=(Tensor[(90, 1), float32], Tensor[(13, 14, 11), uint8], Tensor[(12, 15, 4), float32], Tensor[(30), float64], Tensor[(2100), uint8], Tensor[(845), uint16], Tensor[(2002), float32], Tensor[(108, 4), float32], Tensor[(6, 78), float64]) */
}

def @func_176(%var_175: Tensor[(12, 9, 13), int8]) -> Tensor[(12, 9, 13), float64] {
  %491 = fn (%var_135: Tensor[(12, 9, 13), int8]) -> Tensor[(12, 9, 13), float64] {
    %487 = cast(meta[relay.Constant][22] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %488 = cast(%var_135, dtype="int8") /* ty=Tensor[(12, 9, 13), int8] */;
    %489 = add(%487, %488) /* ty=Tensor[(12, 9, 13), int8] */;
    %490 = cast(%489, dtype="float64") /* ty=Tensor[(12, 9, 13), float64] */;
    log10(%490) /* ty=Tensor[(12, 9, 13), float64] */
  };
  %491(%var_175) /* ty=Tensor[(12, 9, 13), float64] */
}

def @func_7130() -> (Tensor[(90), uint64],) {
  %492 = @func_6871() /* ty=(Tensor[(12, 9, 13), float64], Tensor[(90, 1), float32], Tensor[(90), uint64]) */;
  %493 = %492.2;
  (%493,)
}

def @func_3067(%var_3056: Tensor[(30), float64]) -> (Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30), float64], Tensor[(13, 13, 5), uint16], Tensor[(1, 2100), uint8], Tensor[(845), uint16]) {
  %494 = @func_1282() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */;
  %495 = cast(%var_3056, dtype="float64") /* ty=Tensor[(30), float64] */;
  %496 = reshape(%495, newshape=[1, 6, 5]) /* ty=Tensor[(1, 6, 5), float64] */;
  %497 = @func_428(%496) /* ty=(Tensor[(1, 6, 5), float64],) */;
  %498 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 2100), uint8] */, dtype="uint8") /* ty=Tensor[(1, 2100), uint8] */;
  %499 = cast(meta[relay.Constant][24] /* ty=Tensor[(845), uint16] */, dtype="uint16") /* ty=Tensor[(845), uint16] */;
  %500 = reshape(%498, newshape=[10, 14, 15]) /* ty=Tensor[(10, 14, 15), uint8] */;
  %501 = reshape(%499, newshape=[845]) /* ty=Tensor[(845), uint16] */;
  %502 = @func_1038(%500, %501) /* ty=(Tensor[(10, 14, 15), uint8], Tensor[(13, 13, 5), uint16], Tensor[(845), uint16], Tensor[(10, 14, 15), float64]) */;
  %503 = %494.1;
  %504 = %497.0;
  %505 = %502.1;
  (%503, %504, %var_3056, %505, meta[relay.Constant][23] /* ty=Tensor[(1, 2100), uint8] */, meta[relay.Constant][24] /* ty=Tensor[(845), uint16] */)
}

def @func_4187() -> (Tensor[(12, 15, 4), float32], Tensor[(845, 1), uint16], Tensor[(99, 2), float32]) {
  @func_4185() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(845, 1), uint16], Tensor[(99, 2), float32]) */
}

def @func_5432() -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32]) {
  %512 = fn () -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32]) {
    %506 = @func_3511() /* ty=(Tensor[(12, 15, 4), float32],) */;
    %507 = @func_4796() /* ty=Tensor[(12, 15, 4), float32] */;
    %508 = @func_4796() /* ty=Tensor[(12, 15, 4), float32] */;
    %509 = @func_4073() /* ty=Tensor[(12, 15, 4), float32] */;
    %510 = @func_4101() /* ty=Tensor[(12, 15, 4), float32] */;
    %511 = %506.0;
    (%507, %508, %509, %510, %511)
  };
  %512() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32]) */
}

def @func_761(%var_760: Tensor[(13, 13, 5), uint16]) -> (Tensor[(13, 13, 5), uint16], Tensor[(3, 6, 11), float32], Tensor[(99, 2), int64]) {
  %524 = fn (%var_747: Tensor[(13, 13, 5), uint16]) -> (Tensor[(13, 13, 5), uint16], Tensor[(3, 6, 11), float32], Tensor[(99, 2), int64]) {
    %513 = cast(meta[relay.Constant][25] /* ty=Tensor[(13, 13, 5), uint16] */, dtype="uint16") /* ty=Tensor[(13, 13, 5), uint16] */;
    %514 = shape_of(%var_747, dtype="int32") /* ty=Tensor[(3), int32] */;
    %515 = cast(%var_747, dtype="uint16") /* ty=Tensor[(13, 13, 5), uint16] */;
    %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %517 = cast(meta[relay.Constant][26] /* ty=Tensor[(99, 2), int64] */, dtype="int64") /* ty=Tensor[(99, 2), int64] */;
    %518 = cast(meta[relay.Constant][26] /* ty=Tensor[(99, 2), int64] */, dtype="int64") /* ty=Tensor[(99, 2), int64] */;
    %519 = reshape(%517, newshape=[3, 6, 11]) /* ty=Tensor[(3, 6, 11), int64] */;
    %520 = reshape(%518, newshape=[3, 6, 11]) /* ty=Tensor[(3, 6, 11), int64] */;
    %521 = @func_713(%519, %520) /* ty=(Tensor[(3, 6, 11), int64], Tensor[(3, 6, 11), float32]) */;
    %522 = right_shift(%515, %516) /* ty=Tensor[(13, 13, 5), uint16] */;
    %523 = %521.1;
    (%522, %523, meta[relay.Constant][26] /* ty=Tensor[(99, 2), int64] */)
  };
  %524(%var_760) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(3, 6, 11), float32], Tensor[(99, 2), int64]) */
}

def @func_2819(%var_2817: Tensor[(30), float64], %var_2818: Tensor[(1404), int8]) -> (Tensor[(?, 6, 5), bool], Tensor[(1404), bool]) {
  %540 = fn (%var_2791: Tensor[(30), float64], %var_2805: Tensor[(1404), int8]) -> (Tensor[(?, 6, 5), bool], Tensor[(1404), bool]) {
    %525 = cast(%var_2791, dtype="float64") /* ty=Tensor[(30), float64] */;
    %526 = reshape(%525, newshape=[1, 6, 5]) /* ty=Tensor[(1, 6, 5), float64] */;
    %527 = @func_428(%526) /* ty=(Tensor[(1, 6, 5), float64],) */;
    %528 = %527.0;
    %529 = cast(%var_2791, dtype="bool") /* ty=Tensor[(30), bool] */;
    %530 = shape_of(%528, dtype="int32") /* ty=Tensor[(3), int32] */;
    %531 = cast(%528, dtype="bool") /* ty=Tensor[(1, 6, 5), bool] */;
    %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %533 = @func_2721() /* ty=Tensor[(1404), int8] */;
    %534 = cast(%var_2805, dtype="bool") /* ty=Tensor[(1404), bool] */;
    %535 = shape_of(%533, dtype="int32") /* ty=Tensor[(1), int32] */;
    %536 = cast(%533, dtype="bool") /* ty=Tensor[(1404), bool] */;
    %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?), bool] */;
    %538 = equal(%531, %532) /* ty=Tensor[(?, 6, 5), bool] */;
    %539 = logical_and(%536, %537) /* ty=Tensor[(1404), bool] */;
    (%538, %539)
  };
  %540(%var_2817, %var_2818) /* ty=(Tensor[(?, 6, 5), bool], Tensor[(1404), bool]) */
}

def @func_1934() -> (Tensor[(12, 15, 4), float32],) {
  @func_1932() /* ty=(Tensor[(12, 15, 4), float32],) */
}

def @func_2425(%var_2422: Tensor[(15, 3, 7), float32], %var_2423: Tensor[(1, 845), uint16], %var_2424: Tensor[(720), float32]) -> (Tensor[(3, 6, 11), float32], Tensor[(1, 845), uint16], Tensor[(15, 3, 7), float32], Tensor[(12, 15, 4), uint64], Tensor[(720), float32], Tensor[(12, 9, 13), float64]) {
  %558 = fn (%var_2374: Tensor[(15, 3, 7), float32], %var_2391: Tensor[(1, 845), uint16], %var_2408: Tensor[(720), float32]) -> (Tensor[(3, 6, 11), float32], Tensor[(1, 845), uint16], Tensor[(15, 3, 7), float32], Tensor[(12, 15, 4), uint64], Tensor[(720), float32], Tensor[(12, 9, 13), float64]) {
    %541 = cast(%var_2391, dtype="uint16") /* ty=Tensor[(1, 845), uint16] */;
    %542 = reshape(%541, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), uint16] */;
    %543 = @func_759(%542) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(3, 6, 11), float32], Tensor[(99, 2), int64]) */;
    %544 = cast(%var_2374, dtype="float32") /* ty=Tensor[(15, 3, 7), float32] */;
    %545 = log10(%544) /* ty=Tensor[(15, 3, 7), float32] */;
    %546 = cast(%var_2374, dtype="float32") /* ty=Tensor[(15, 3, 7), float32] */;
    %547 = shape_of(%545, dtype="int32") /* ty=Tensor[(3), int32] */;
    %548 = cast(%545, dtype="float32") /* ty=Tensor[(15, 3, 7), float32] */;
    %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %550 = cast(%var_2408, dtype="float32") /* ty=Tensor[(720), float32] */;
    %551 = reshape(%550, newshape=[12, 15, 4]) /* ty=Tensor[(12, 15, 4), float32] */;
    %552 = @func_2115(%551) /* ty=(Tensor[(12, 15, 4), uint64], Tensor[(12, 15, 4), float64]) */;
    %553 = @func_2158() /* ty=(Tensor[(12, 9, 13), float64], Tensor[(13, 13, 5), uint16], Tensor[(3, 700), uint8], Tensor[(13, 65), uint16], Tensor[(12, 15, 4), float32]) */;
    %554 = %543.1;
    %555 = power(%548, %549) /* ty=Tensor[(15, 3, 7), float32] */;
    %556 = %552.0;
    %557 = %553.0;
    (%554, %var_2391, %555, %556, %var_2408, %557)
  };
  %558(%var_2422, %var_2423, %var_2424) /* ty=(Tensor[(3, 6, 11), float32], Tensor[(1, 845), uint16], Tensor[(15, 3, 7), float32], Tensor[(12, 15, 4), uint64], Tensor[(720), float32], Tensor[(12, 9, 13), float64]) */
}

def @func_5099() -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(143, 14), float32], Tensor[(143, 14), int32]) {
  @func_5097() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(143, 14), float32], Tensor[(143, 14), int32]) */
}

def @func_2062() -> Tensor[(12, 9, 13), float64] {
  @func_2060() /* ty=Tensor[(12, 9, 13), float64] */
}

def @func_6852() -> (Tensor[(12, 15, 4), float32],) {
  %559 = @func_6096() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(3, 6, 11), int64], Tensor[(198), int64]) */;
  %560 = %559.0;
  (%560,)
}

def @func_4073() -> Tensor[(12, 15, 4), float32] {
  %561 = @func_2983() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %561.0
}

def @func_3540() -> (Tensor[(12, 9, 13), float64],) {
  %563 = fn () -> (Tensor[(12, 9, 13), float64],) {
    %562 = @func_2060() /* ty=Tensor[(12, 9, 13), float64] */;
    (%562,)
  };
  %563() /* ty=(Tensor[(12, 9, 13), float64],) */
}

def @func_5689(%var_5630: Tensor[(3, 12, 13), uint16], %var_5631: Tensor[(3, 12, 13), uint16], %var_5654: Tensor[(198, 1), int64], %var_5685: Tensor[(3, 12, 13), uint16]) -> (Tensor[(3, 12, 13), uint16], Tensor[(13, 13, 5), uint16], Tensor[(2688), float32], Tensor[(15, 6), uint64], Tensor[(198, 1), int64], Tensor[(12, 15, 4), float32], Tensor[(3, 12, 13), bool]) {
  %564 = cast(%var_5631, dtype="uint16") /* ty=Tensor[(3, 12, 13), uint16] */;
  %565 = shape_of(%var_5630, dtype="int32") /* ty=Tensor[(3), int32] */;
  %566 = cast(%var_5630, dtype="uint16") /* ty=Tensor[(3, 12, 13), uint16] */;
  %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %568 = cast(meta[relay.Constant][27] /* ty=Tensor[(2688), float32] */, dtype="float32") /* ty=Tensor[(2688), float32] */;
  %569 = cast(meta[relay.Constant][27] /* ty=Tensor[(2688), float32] */, dtype="float64") /* ty=Tensor[(2688), float64] */;
  %570 = cast(meta[relay.Constant][27] /* ty=Tensor[(2688), float32] */, dtype="float64") /* ty=Tensor[(2688), float64] */;
  %571 = cast(meta[relay.Constant][27] /* ty=Tensor[(2688), float32] */, dtype="bool") /* ty=Tensor[(2688), bool] */;
  %572 = reshape(%568, newshape=[4, 672]) /* ty=Tensor[(4, 672), float32] */;
  %573 = reshape(%569, newshape=[4, 672]) /* ty=Tensor[(4, 672), float64] */;
  %574 = reshape(%570, newshape=[4, 672]) /* ty=Tensor[(4, 672), float64] */;
  %575 = reshape(%571, newshape=[4, 672]) /* ty=Tensor[(4, 672), bool] */;
  %576 = @func_3437(%572, %573, %574, %575) /* ty=(Tensor[(12, 9, 13), float64], Tensor[(16, 12, 14), float32], Tensor[(12, 15, 4), float32], Tensor[(13, 13, 5), uint16], Tensor[(432), bool], Tensor[(845), uint16], Tensor[(12, 15, 4), float32], Tensor[(4, 672), uint8], Tensor[(4, 672), bool]) */;
  %577 = cast(%var_5654, dtype="int64") /* ty=Tensor[(198, 1), int64] */;
  %578 = reshape(%577, newshape=[198, 1]) /* ty=Tensor[(198, 1), int64] */;
  %579 = @func_4003(%578) /* ty=(Tensor[(12, 15, 4), float64], Tensor[(1, 845), uint16], Tensor[(845), uint16], Tensor[(12, 15, 4), float64], Tensor[(1, 450), float64], Tensor[(50, 9), float64], Tensor[(15, 6), uint64], Tensor[(12, 15, 4), float32], Tensor[(198, 315), uint32]) */;
  %580 = @func_4567() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %581 = cast(%var_5685, dtype="bool") /* ty=Tensor[(3, 12, 13), bool] */;
  %582 = shape_of(%var_5631, dtype="int32") /* ty=Tensor[(3), int32] */;
  %583 = cast(%var_5631, dtype="bool") /* ty=Tensor[(3, 12, 13), bool] */;
  %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %585 = logical_xor(%566, %567) /* ty=Tensor[(3, 12, 13), uint16] */;
  %586 = %576.3;
  %587 = %579.6;
  %588 = %580.0;
  %589 = less_equal(%583, %584) /* ty=Tensor[(3, 12, 13), bool] */;
  (%585, %586, meta[relay.Constant][27] /* ty=Tensor[(2688), float32] */, %587, %var_5654, %588, %589)
}

def @func_6357() -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float64], Tensor[(198), int64]) {
  @func_6355() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float64], Tensor[(198), int64]) */
}

def @func_4125() -> (Tensor[(9, 15, 2), bool], Tensor[(30, 1), float64], Tensor[(720), float32]) {
  %590 = cast(meta[relay.Constant][29] /* ty=Tensor[(9, 15, 2), int8] */, dtype="bool") /* ty=Tensor[(9, 15, 2), bool] */;
  %591 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(9, 15, 2), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %592 = cast(meta[relay.Constant][28] /* ty=Tensor[(9, 15, 2), int8] */, dtype="bool") /* ty=Tensor[(9, 15, 2), bool] */;
  %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %594 = cast(meta[relay.Constant][30] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %595 = reshape(%594, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %596 = @func_2965(%595) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(12, 15, 4), uint64], Tensor[(720), float32], Tensor[(?, 6, 5), uint16], Tensor[(10, 3), float64], Tensor[(2, 9, 5), float32], Tensor[(13, 65), uint16], Tensor[(1404), int8], Tensor[(7, 15, 8), float64], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */;
  %597 = greater_equal(%592, %593) /* ty=Tensor[(9, 15, 2), bool] */;
  %598 = %596.10;
  (%597, %598, meta[relay.Constant][30] /* ty=Tensor[(720), float32] */)
}

def @func_6638(%var_6616: Tensor[(198), int64]) -> (Tensor[(12, 9, 13), float64], Tensor[(4, 10, 5), float64], Tensor[(200), int8], Tensor[(24), float32], Tensor[(24), float32], Tensor[(12, 15, 4), uint64], Tensor[(450), float64], Tensor[(90), uint64], Tensor[(198), int64]) {
  %599 = @func_5776() /* ty=(Tensor[(12, 9, 13), float64],) */;
  %600 = cast(meta[relay.Constant][31] /* ty=Tensor[(200), int8] */, dtype="int8") /* ty=Tensor[(200), int8] */;
  %601 = cast(meta[relay.Constant][31] /* ty=Tensor[(200), int8] */, dtype="int8") /* ty=Tensor[(200), int8] */;
  %602 = reshape(%600, newshape=[4, 10, 5]) /* ty=Tensor[(4, 10, 5), int8] */;
  %603 = reshape(%601, newshape=[4, 10, 5]) /* ty=Tensor[(4, 10, 5), int8] */;
  %604 = @func_3014(%602, %603) /* ty=(Tensor[(4, 10, 5), float64],) */;
  %605 = cast(meta[relay.Constant][32] /* ty=Tensor[(24), float32] */, dtype="float32") /* ty=Tensor[(24), float32] */;
  %606 = reshape(%605, newshape=[24]) /* ty=Tensor[(24), float32] */;
  %607 = @func_5936(%606) /* ty=(Tensor[(12, 15, 4), float32], Tensor[(2, 3, 4), float32], Tensor[(24), float32], Tensor[(6, 9, 1), float32]) */;
  %608 = cast(meta[relay.Constant][33] /* ty=Tensor[(450), float64] */, dtype="float64") /* ty=Tensor[(450), float64] */;
  %609 = cast(meta[relay.Constant][34] /* ty=Tensor[(90), uint64] */, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %610 = cast(%var_6616, dtype="int64") /* ty=Tensor[(198), int64] */;
  %611 = reshape(%608, newshape=[1, 450]) /* ty=Tensor[(1, 450), float64] */;
  %612 = reshape(%609, newshape=[90]) /* ty=Tensor[(90), uint64] */;
  %613 = reshape(%610, newshape=[198]) /* ty=Tensor[(198), int64] */;
  %614 = @func_3657(%611, %612, %613) /* ty=(Tensor[(12, 15, 4), bool], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), uint64], Tensor[(90, 1), float32], Tensor[(1, 450), float64], Tensor[(65, 13), uint16], Tensor[(90), uint64], Tensor[(3, 6, 11), float32], Tensor[(198), int64]) */;
  %615 = %599.0;
  %616 = %604.0;
  %617 = %607.2;
  %618 = %614.2;
  (%615, %616, meta[relay.Constant][31] /* ty=Tensor[(200), int8] */, %617, meta[relay.Constant][32] /* ty=Tensor[(24), float32] */, %618, meta[relay.Constant][33] /* ty=Tensor[(450), float64] */, meta[relay.Constant][34] /* ty=Tensor[(90), uint64] */, %var_6616)
}

def @func_3592() -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32]) {
  %622 = fn () -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32]) {
    %619 = @func_1932() /* ty=(Tensor[(12, 15, 4), float32],) */;
    %620 = @func_3339() /* ty=Tensor[(12, 15, 4), float32] */;
    %621 = %619.0;
    (%620, %621)
  };
  %622() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32]) */
}

def @func_6994() -> (Tensor[(12, 15, 4), float32],) {
  %625 = fn () -> (Tensor[(12, 15, 4), float32],) {
    %623 = @func_4423() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(4, 10, 5), float64], Tensor[(200), int8], Tensor[(12, 15, 4), float32]) */;
    %624 = %623.3;
    (%624,)
  };
  %625() /* ty=(Tensor[(12, 15, 4), float32],) */
}

def @func_7872() -> (Tensor[(3, 6, 11), int64],) {
  %626 = @func_6096() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(3, 6, 11), int64], Tensor[(198), int64]) */;
  %627 = %626.2;
  (%627,)
}

def @func_4720() -> (Tensor[(12, 15, 4), float32],) {
  %630 = fn () -> (Tensor[(12, 15, 4), float32],) {
    %628 = @func_1932() /* ty=(Tensor[(12, 15, 4), float32],) */;
    %629 = %628.0;
    (%629,)
  };
  %630() /* ty=(Tensor[(12, 15, 4), float32],) */
}

def @func_4536() -> (Tensor[(12, 9, 13), float64], Tensor[(12, 15, 4), bool], Tensor[(12, 15, 4), float32]) {
  %644 = fn () -> (Tensor[(12, 9, 13), float64], Tensor[(12, 15, 4), bool], Tensor[(12, 15, 4), float32]) {
    %631 = @func_3539() /* ty=(Tensor[(12, 9, 13), float64],) */;
    %632 = @func_2983() /* ty=(Tensor[(12, 15, 4), float32],) */;
    %633 = %632.0;
    %634 = @func_3171() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float64]) */;
    %635 = %634.1;
    %636 = cast(%635, dtype="bool") /* ty=Tensor[(12, 15, 4), bool] */;
    %637 = shape_of(%633, dtype="int32") /* ty=Tensor[(3), int32] */;
    %638 = cast(%633, dtype="bool") /* ty=Tensor[(12, 15, 4), bool] */;
    %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %640 = cast(%633, dtype="float32") /* ty=Tensor[(12, 15, 4), float32] */;
    %641 = %631.0;
    %642 = greater(%638, %639) /* ty=Tensor[(12, 15, 4), bool] */;
    %643 = tan(%640) /* ty=Tensor[(12, 15, 4), float32] */;
    (%641, %642, %643)
  };
  %644() /* ty=(Tensor[(12, 9, 13), float64], Tensor[(12, 15, 4), bool], Tensor[(12, 15, 4), float32]) */
}

def @func_2364() -> (Tensor[(7, 15, 8), int64],) {
  %650 = fn () -> (Tensor[(7, 15, 8), int64],) {
    %645 = cast(meta[relay.Constant][36] /* ty=Tensor[(7, 15, 8), int64] */, dtype="int64") /* ty=Tensor[(7, 15, 8), int64] */;
    %646 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(7, 15, 8), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %647 = cast(meta[relay.Constant][35] /* ty=Tensor[(7, 15, 8), int64] */, dtype="int64") /* ty=Tensor[(7, 15, 8), int64] */;
    %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %649 = minimum(%647, %648) /* ty=Tensor[(7, 15, 8), int64] */;
    (%649,)
  };
  %650() /* ty=(Tensor[(7, 15, 8), int64],) */
}

def @func_1509(%var_1508: Tensor[(845), uint16]) -> (Tensor[(?, 6, 5), uint8], Tensor[(13, 4, 9), float32], Tensor[(468), float32], Tensor[(3, 6, 11), float32], Tensor[(845), uint16]) {
  %668 = fn (%var_1499: Tensor[(845), uint16]) -> (Tensor[(?, 6, 5), uint8], Tensor[(13, 4, 9), float32], Tensor[(468), float32], Tensor[(3, 6, 11), float32], Tensor[(845), uint16]) {
    %651 = @func_1282() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */;
    %652 = %651.2;
    %653 = cast(%652, dtype="float32") /* ty=Tensor[(1, 6, 5), float32] */;
    %654 = sigmoid(%653) /* ty=Tensor[(1, 6, 5), float32] */;
    %655 = cast(%654, dtype="uint8") /* ty=Tensor[(1, 6, 5), uint8] */;
    %656 = shape_of(%652, dtype="int32") /* ty=Tensor[(3), int32] */;
    %657 = cast(%652, dtype="uint8") /* ty=Tensor[(1, 6, 5), uint8] */;
    %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %659 = cast(meta[relay.Constant][37] /* ty=Tensor[(468), float32] */, dtype="float32") /* ty=Tensor[(468), float32] */;
    %660 = reshape(%659, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float32] */;
    %661 = @func_868(%660) /* ty=(Tensor[(13, 4, 9), float32],) */;
    %662 = cast(%var_1499, dtype="uint16") /* ty=Tensor[(845), uint16] */;
    %663 = reshape(%662, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), uint16] */;
    %664 = @func_759(%663) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(3, 6, 11), float32], Tensor[(99, 2), int64]) */;
    %665 = minimum(%657, %658) /* ty=Tensor[(?, 6, 5), uint8] */;
    %666 = %661.0;
    %667 = %664.1;
    (%665, %666, meta[relay.Constant][37] /* ty=Tensor[(468), float32] */, %667, %var_1499)
  };
  %668(%var_1508) /* ty=(Tensor[(?, 6, 5), uint8], Tensor[(13, 4, 9), float32], Tensor[(468), float32], Tensor[(3, 6, 11), float32], Tensor[(845), uint16]) */
}

def @func_7440() -> Tensor[(12, 15, 4), float32] {
  %672 = fn () -> Tensor[(12, 15, 4), float32] {
    %669 = @func_5986() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32]) */;
    %670 = %669.1;
    %671 = cast(%670, dtype="float32") /* ty=Tensor[(12, 15, 4), float32] */;
    asin(%671) /* ty=Tensor[(12, 15, 4), float32] */
  };
  %672() /* ty=Tensor[(12, 15, 4), float32] */
}

def @func_1441(%var_1362: Tensor[(4, 12, 9), bool], %var_1375: Tensor[(30), float64], %var_1403: Tensor[(1, 2100), uint8], %var_1410: Tensor[(65, 13), uint16]) -> (Tensor[(4, 12, 9), int64], Tensor[(1, 6, 5), float64], Tensor[(30), float64], Tensor[(1, 6, 5), float64], Tensor[(13, 4, 9), float32], Tensor[(6, 78), float32], Tensor[(3, 6, 11), float32], Tensor[(10, 14, 15), float64], Tensor[(1, 2100), uint8], Tensor[(65, 13), uint32], Tensor[(13, 13, 5), uint16], Tensor[(30, 2), int32], Tensor[(30, 1), float64]) {
  %673 = cast(%var_1362, dtype="bool") /* ty=Tensor[(4, 12, 9), bool] */;
  %674 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(4, 12, 9), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %675 = cast(meta[relay.Constant][38] /* ty=Tensor[(4, 12, 9), bool] */, dtype="bool") /* ty=Tensor[(4, 12, 9), bool] */;
  %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %677 = logical_or(%675, %676) /* ty=Tensor[(4, 12, 9), bool] */;
  %678 = cast(meta[relay.Constant][38] /* ty=Tensor[(4, 12, 9), bool] */, dtype="int64") /* ty=Tensor[(4, 12, 9), int64] */;
  %679 = shape_of(%677, dtype="int32") /* ty=Tensor[(3), int32] */;
  %680 = cast(%677, dtype="int64") /* ty=Tensor[(4, 12, 9), int64] */;
  %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %682 = cast(%var_1375, dtype="float64") /* ty=Tensor[(30), float64] */;
  %683 = reshape(%682, newshape=[1, 6, 5]) /* ty=Tensor[(1, 6, 5), float64] */;
  %684 = @func_428(%683) /* ty=(Tensor[(1, 6, 5), float64],) */;
  %685 = %684.0;
  %686 = cast(%685, dtype="float64") /* ty=Tensor[(1, 6, 5), float64] */;
  %687 = reshape(%686, newshape=[1, 6, 5]) /* ty=Tensor[(1, 6, 5), float64] */;
  %688 = @func_428(%687) /* ty=(Tensor[(1, 6, 5), float64],) */;
  %689 = cast(meta[relay.Constant][39] /* ty=Tensor[(6, 78), float32] */, dtype="float32") /* ty=Tensor[(6, 78), float32] */;
  %690 = reshape(%689, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float32] */;
  %691 = @func_868(%690) /* ty=(Tensor[(13, 4, 9), float32],) */;
  %692 = cast(meta[relay.Constant][40] /* ty=Tensor[(65, 13), uint16] */, dtype="uint16") /* ty=Tensor[(65, 13), uint16] */;
  %693 = reshape(%692, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), uint16] */;
  %694 = @func_759(%693) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(3, 6, 11), float32], Tensor[(99, 2), int64]) */;
  %695 = cast(%var_1403, dtype="uint8") /* ty=Tensor[(1, 2100), uint8] */;
  %696 = cast(meta[relay.Constant][40] /* ty=Tensor[(65, 13), uint16] */, dtype="uint16") /* ty=Tensor[(65, 13), uint16] */;
  %697 = reshape(%695, newshape=[10, 14, 15]) /* ty=Tensor[(10, 14, 15), uint8] */;
  %698 = reshape(%696, newshape=[845]) /* ty=Tensor[(845), uint16] */;
  %699 = @func_1038(%697, %698) /* ty=(Tensor[(10, 14, 15), uint8], Tensor[(13, 13, 5), uint16], Tensor[(845), uint16], Tensor[(10, 14, 15), float64]) */;
  %700 = cast(%var_1410, dtype="uint32") /* ty=Tensor[(65, 13), uint32] */;
  %701 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(65, 13), uint16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %702 = cast(meta[relay.Constant][40] /* ty=Tensor[(65, 13), uint16] */, dtype="uint32") /* ty=Tensor[(65, 13), uint32] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %704 = multiply(%702, %703) /* ty=Tensor[(65, 13), uint32] */;
  %705 = cast(%704, dtype="uint16") /* ty=Tensor[(65, 13), uint16] */;
  %706 = reshape(%705, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), uint16] */;
  %707 = @func_759(%706) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(3, 6, 11), float32], Tensor[(99, 2), int64]) */;
  %708 = @func_1282() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */;
  %709 = %708.3;
  %710 = cast(%709, dtype="int32") /* ty=Tensor[(30, 1), int32] */;
  %711 = cast(meta[relay.Constant][41] /* ty=Tensor[(30, 2), float64] */, dtype="int32") /* ty=Tensor[(30, 2), int32] */;
  %712 = @func_1282() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */;
  %713 = bitwise_and(%680, %681) /* ty=Tensor[(4, 12, 9), int64] */;
  %714 = %688.0;
  %715 = %691.0;
  %716 = %694.1;
  %717 = %699.3;
  %718 = %707.0;
  %719 = maximum(%710, %711) /* ty=Tensor[(30, 2), int32] */;
  %720 = %712.3;
  (%713, %685, %var_1375, %714, %715, meta[relay.Constant][39] /* ty=Tensor[(6, 78), float32] */, %716, %717, %var_1403, %704, %718, %719, %720)
}

def @func_4335(%var_4333: Tensor[(12, 15, 4), float32], %var_4334: Tensor[(1, 1404), int8]) -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(13, 13, 5), uint16], Tensor[(12, 9, 13), float64], Tensor[(1, 1404), int8]) {
  @func_4331(%var_4333, %var_4334) /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(13, 13, 5), uint16], Tensor[(12, 9, 13), float64], Tensor[(1, 1404), int8]) */
}

def @func_6096() -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(3, 6, 11), int64], Tensor[(198), int64]) {
  %721 = @func_2282() /* ty=Tensor[(12, 15, 4), float32] */;
  %722 = cast(%721, dtype="float32") /* ty=Tensor[(12, 15, 4), float32] */;
  %723 = @func_5986() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32]) */;
  %724 = cast(meta[relay.Constant][42] /* ty=Tensor[(198), int64] */, dtype="int64") /* ty=Tensor[(198), int64] */;
  %725 = cast(meta[relay.Constant][42] /* ty=Tensor[(198), int64] */, dtype="int64") /* ty=Tensor[(198), int64] */;
  %726 = reshape(%724, newshape=[3, 6, 11]) /* ty=Tensor[(3, 6, 11), int64] */;
  %727 = reshape(%725, newshape=[3, 6, 11]) /* ty=Tensor[(3, 6, 11), int64] */;
  %728 = @func_713(%726, %727) /* ty=(Tensor[(3, 6, 11), int64], Tensor[(3, 6, 11), float32]) */;
  %729 = cos(%722) /* ty=Tensor[(12, 15, 4), float32] */;
  %730 = %723.1;
  %731 = %728.0;
  (%729, %730, %731, meta[relay.Constant][42] /* ty=Tensor[(198), int64] */)
}

def @func_1576() -> (Tensor[(30, 1), float64], Tensor[(12, 9, 13), float64], Tensor[(1404), int8]) {
  %732 = @func_1282() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */;
  %733 = cast(meta[relay.Constant][43] /* ty=Tensor[(1404), int8] */, dtype="int8") /* ty=Tensor[(1404), int8] */;
  %734 = reshape(%733, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), int8] */;
  %735 = %732.3;
  %736 = @func_174(%734) /* ty=Tensor[(12, 9, 13), float64] */;
  (%735, %736, meta[relay.Constant][43] /* ty=Tensor[(1404), int8] */)
}

def @func_7581() -> Tensor[(198), int64] {
  %738 = fn () -> Tensor[(198), int64] {
    %737 = @func_6355() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float64], Tensor[(198), int64]) */;
    %737.2
  };
  %738() /* ty=Tensor[(198), int64] */
}

def @func_7160() -> Tensor[(12, 15, 4), float32] {
  %740 = fn () -> Tensor[(12, 15, 4), float32] {
    %739 = @func_6355() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float64], Tensor[(198), int64]) */;
    %739.0
  };
  %740() /* ty=Tensor[(12, 15, 4), float32] */
}

def @func_7659() -> (Tensor[(12, 9, 13), float64], Tensor[(12, 15, 4), float32]) {
  %741 = @func_4051() /* ty=(Tensor[(30, 1), float64], Tensor[(12, 9, 13), float64]) */;
  %742 = %741.1;
  %743 = @func_3292() /* ty=Tensor[(12, 15, 4), float32] */;
  (%742, %743)
}

def @func_1282() -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) {
  %744 = cast(meta[relay.Constant][45] /* ty=Tensor[(12, 15, 4), float32] */, dtype="float32") /* ty=Tensor[(12, 15, 4), float32] */;
  %745 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(12, 15, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %746 = cast(meta[relay.Constant][44] /* ty=Tensor[(12, 15, 4), float32] */, dtype="float32") /* ty=Tensor[(12, 15, 4), float32] */;
  %747 = dyn.reshape(%744, %745, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %748 = cast(meta[relay.Constant][45] /* ty=Tensor[(12, 15, 4), float32] */, dtype="float32") /* ty=Tensor[(12, 15, 4), float32] */;
  %749 = cast(meta[relay.Constant][46] /* ty=Tensor[(30, 1), float64] */, dtype="float64") /* ty=Tensor[(30, 1), float64] */;
  %750 = reshape(%749, newshape=[1, 6, 5]) /* ty=Tensor[(1, 6, 5), float64] */;
  %751 = @func_428(%750) /* ty=(Tensor[(1, 6, 5), float64],) */;
  %752 = minimum(%746, %747) /* ty=Tensor[(12, 15, 4), float32] */;
  %753 = cosh(%748) /* ty=Tensor[(12, 15, 4), float32] */;
  %754 = %751.0;
  (%752, %753, %754, meta[relay.Constant][46] /* ty=Tensor[(30, 1), float64] */)
}

def @func_4694() -> (Tensor[(12, 9, 13), float64], Tensor[(12, 15, 4), float32], Tensor[(2100), uint8], Tensor[(65, 13), uint16], Tensor[(90), uint64]) {
  %755 = @func_2255() /* ty=(Tensor[(12, 9, 13), float64],) */;
  %756 = cast(meta[relay.Constant][47] /* ty=Tensor[(65, 13), uint16] */, dtype="uint16") /* ty=Tensor[(65, 13), uint16] */;
  %757 = cast(meta[relay.Constant][48] /* ty=Tensor[(90), uint64] */, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %758 = reshape(%756, newshape=[1, 845]) /* ty=Tensor[(1, 845), uint16] */;
  %759 = reshape(%757, newshape=[3, 30]) /* ty=Tensor[(3, 30), uint64] */;
  %760 = @func_1356(%758, %759) /* ty=(Tensor[(12, 15, 4), float32], Tensor[(845), uint16], Tensor[(2100), uint8], Tensor[(1, 845), uint16], Tensor[(30, 1), float64], Tensor[(1, 6, 5), float64], Tensor[(2, 9, 5), bool], Tensor[(3, 30), float32], Tensor[(2, 9, 5), bool]) */;
  %761 = %755.0;
  %762 = @func_2762() /* ty=Tensor[(12, 15, 4), float32] */;
  %763 = %760.2;
  (%761, %762, %763, meta[relay.Constant][47] /* ty=Tensor[(65, 13), uint16] */, meta[relay.Constant][48] /* ty=Tensor[(90), uint64] */)
}

def @func_4051() -> (Tensor[(30, 1), float64], Tensor[(12, 9, 13), float64]) {
  %764 = @func_3911() /* ty=(Tensor[(30, 1), float64], Tensor[(12, 15, 4), float32]) */;
  %765 = @func_2255() /* ty=(Tensor[(12, 9, 13), float64],) */;
  %766 = %764.0;
  %767 = %765.0;
  (%766, %767)
}

def @func_5097() -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(143, 14), float32], Tensor[(143, 14), int32]) {
  %768 = @func_3171() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float64]) */;
  %769 = @func_4824() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(12, 15, 4), float32]) */;
  %770 = cast(meta[relay.Constant][49] /* ty=Tensor[(143, 14), uint8] */, dtype="float64") /* ty=Tensor[(143, 14), float64] */;
  %771 = exp(%770) /* ty=Tensor[(143, 14), float64] */;
  %772 = cast(meta[relay.Constant][49] /* ty=Tensor[(143, 14), uint8] */, dtype="uint8") /* ty=Tensor[(143, 14), uint8] */;
  %773 = reshape(%772, newshape=[13, 14, 11]) /* ty=Tensor[(13, 14, 11), uint8] */;
  %774 = @func_2461(%773) /* ty=(Tensor[(13, 14, 11), uint8],) */;
  %775 = %774.0;
  %776 = cast(%775, dtype="float32") /* ty=Tensor[(13, 14, 11), float32] */;
  %777 = shape_of(%771, dtype="int32") /* ty=Tensor[(2), int32] */;
  %778 = cast(%771, dtype="float32") /* ty=Tensor[(143, 14), float32] */;
  %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %780 = power(%778, %779) /* ty=Tensor[(143, 14), float32] */;
  %781 = cast(%771, dtype="bool") /* ty=Tensor[(143, 14), bool] */;
  %782 = shape_of(%780, dtype="int32") /* ty=Tensor[(2), int32] */;
  %783 = cast(%780, dtype="bool") /* ty=Tensor[(143, 14), bool] */;
  %784 = dyn.reshape(%781, %782, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %785 = less_equal(%783, %784) /* ty=Tensor[(143, 14), bool] */;
  %786 = cast(%785, dtype="bool") /* ty=Tensor[(143, 14), bool] */;
  %787 = shape_of(%780, dtype="int32") /* ty=Tensor[(2), int32] */;
  %788 = cast(%780, dtype="bool") /* ty=Tensor[(143, 14), bool] */;
  %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %790 = greater_equal(%788, %789) /* ty=Tensor[(143, 14), bool] */;
  %791 = cast(%790, dtype="float32") /* ty=Tensor[(143, 14), float32] */;
  %792 = cast(%790, dtype="int32") /* ty=Tensor[(143, 14), int32] */;
  %793 = shape_of(%780, dtype="int32") /* ty=Tensor[(2), int32] */;
  %794 = cast(%780, dtype="int32") /* ty=Tensor[(143, 14), int32] */;
  %795 = dyn.reshape(%792, %793, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %796 = %768.0;
  %797 = %769.1;
  %798 = sin(%791) /* ty=Tensor[(143, 14), float32] */;
  %799 = add(%794, %795) /* ty=Tensor[(143, 14), int32] */;
  (%796, %797, %798, %799)
}

def @func_4217() -> Tensor[(13, 13, 5), uint16] {
  %800 = @func_2158() /* ty=(Tensor[(12, 9, 13), float64], Tensor[(13, 13, 5), uint16], Tensor[(3, 700), uint8], Tensor[(13, 65), uint16], Tensor[(12, 15, 4), float32]) */;
  %800.1
}

def @func_5192() -> Tensor[(12, 9, 13), float64] {
  @func_5190() /* ty=Tensor[(12, 9, 13), float64] */
}

def @func_1042(%var_1040: Tensor[(10, 14, 15), uint8], %var_1041: Tensor[(845), uint16]) -> (Tensor[(10, 14, 15), uint8], Tensor[(13, 13, 5), uint16], Tensor[(845), uint16], Tensor[(10, 14, 15), float64]) {
  @func_1038(%var_1040, %var_1041) /* ty=(Tensor[(10, 14, 15), uint8], Tensor[(13, 13, 5), uint16], Tensor[(845), uint16], Tensor[(10, 14, 15), float64]) */
}

def @func_4331(%var_4307: Tensor[(12, 15, 4), float32], %var_4329: Tensor[(1, 1404), int8]) -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(13, 13, 5), uint16], Tensor[(12, 9, 13), float64], Tensor[(1, 1404), int8]) {
  %801 = @func_3478() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %802 = %801.0;
  %803 = cast(%802, dtype="float32") /* ty=Tensor[(12, 15, 4), float32] */;
  %804 = cast(%var_4307, dtype="float32") /* ty=Tensor[(12, 15, 4), float32] */;
  %805 = shape_of(%802, dtype="int32") /* ty=Tensor[(3), int32] */;
  %806 = cast(%802, dtype="float32") /* ty=Tensor[(12, 15, 4), float32] */;
  %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %808 = cast(%var_4329, dtype="int8") /* ty=Tensor[(1, 1404), int8] */;
  %809 = reshape(%808, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), int8] */;
  %810 = rsqrt(%803) /* ty=Tensor[(12, 15, 4), float32] */;
  %811 = floor_mod(%806, %807) /* ty=Tensor[(12, 15, 4), float32] */;
  %812 = @func_2762() /* ty=Tensor[(12, 15, 4), float32] */;
  %813 = @func_4217() /* ty=Tensor[(13, 13, 5), uint16] */;
  %814 = @func_174(%809) /* ty=Tensor[(12, 9, 13), float64] */;
  (%810, %811, %812, %813, %814, %var_4329)
}

def @func_7022() -> (Tensor[(12, 9, 13), float64], Tensor[(12, 15, 4), float32]) {
  %815 = @func_4051() /* ty=(Tensor[(30, 1), float64], Tensor[(12, 9, 13), float64]) */;
  %816 = @func_6993() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %817 = %815.1;
  %818 = %816.0;
  (%817, %818)
}

def @func_4655() -> (Tensor[(6, 9, 1), float32],) {
  @func_4653() /* ty=(Tensor[(6, 9, 1), float32],) */
}

def @func_7259(%var_7234: Tensor[(5, 12, 11), int8]) -> Tensor[(5, 12, 11), int8] {
  %819 = cast(meta[relay.Constant][50] /* ty=Tensor[(5, 12, 11), int8] */, dtype="int8") /* ty=Tensor[(5, 12, 11), int8] */;
  %820 = shape_of(%var_7234, dtype="int32") /* ty=Tensor[(3), int32] */;
  %821 = cast(%var_7234, dtype="int8") /* ty=Tensor[(5, 12, 11), int8] */;
  %822 = dyn.reshape(%819, %820, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_and(%821, %822) /* ty=Tensor[(5, 12, 11), int8] */
}

def @func_7661() -> (Tensor[(12, 9, 13), float64], Tensor[(12, 15, 4), float32]) {
  @func_7659() /* ty=(Tensor[(12, 9, 13), float64], Tensor[(12, 15, 4), float32]) */
}

def @func_2763() -> Tensor[(12, 15, 4), float32] {
  %824 = fn () -> Tensor[(12, 15, 4), float32] {
    %823 = @func_1932() /* ty=(Tensor[(12, 15, 4), float32],) */;
    %823.0
  };
  %824() /* ty=Tensor[(12, 15, 4), float32] */
}

def @func_5841() -> Tensor[(9, 15, 2), bool] {
  %826 = fn () -> Tensor[(9, 15, 2), bool] {
    %825 = @func_4125() /* ty=(Tensor[(9, 15, 2), bool], Tensor[(30, 1), float64], Tensor[(720), float32]) */;
    %825.0
  };
  %826() /* ty=Tensor[(9, 15, 2), bool] */
}

def @func_6237() -> (Tensor[(12, 15, 4), float32],) {
  %827 = @func_4567() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %828 = %827.0;
  (%828,)
}

def @func_3442(%var_3438: Tensor[(4, 672), float32], %var_3439: Tensor[(4, 672), float64], %var_3440: Tensor[(4, 672), float64], %var_3441: Tensor[(4, 672), bool]) -> (Tensor[(12, 9, 13), float64], Tensor[(16, 12, 14), float32], Tensor[(12, 15, 4), float32], Tensor[(13, 13, 5), uint16], Tensor[(432), bool], Tensor[(845), uint16], Tensor[(12, 15, 4), float32], Tensor[(4, 672), uint8], Tensor[(4, 672), bool]) {
  %860 = fn (%var_3394: Tensor[(4, 672), float32], %var_3405: Tensor[(4, 672), float64], %var_3420: Tensor[(4, 672), float64], %var_3426: Tensor[(4, 672), bool]) -> (Tensor[(12, 9, 13), float64], Tensor[(16, 12, 14), float32], Tensor[(12, 15, 4), float32], Tensor[(13, 13, 5), uint16], Tensor[(432), bool], Tensor[(845), uint16], Tensor[(12, 15, 4), float32], Tensor[(4, 672), uint8], Tensor[(4, 672), bool]) {
    %829 = @func_2158() /* ty=(Tensor[(12, 9, 13), float64], Tensor[(13, 13, 5), uint16], Tensor[(3, 700), uint8], Tensor[(13, 65), uint16], Tensor[(12, 15, 4), float32]) */;
    %830 = cast(%var_3394, dtype="float32") /* ty=Tensor[(4, 672), float32] */;
    %831 = reshape(%830, newshape=[16, 12, 14]) /* ty=Tensor[(16, 12, 14), float32] */;
    %832 = @func_1282() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */;
    %833 = cast(meta[relay.Constant][51] /* ty=Tensor[(432), bool] */, dtype="bool") /* ty=Tensor[(432), bool] */;
    %834 = cast(meta[relay.Constant][52] /* ty=Tensor[(845), uint16] */, dtype="uint16") /* ty=Tensor[(845), uint16] */;
    %835 = reshape(%833, newshape=[432]) /* ty=Tensor[(432), bool] */;
    %836 = reshape(%834, newshape=[845]) /* ty=Tensor[(845), uint16] */;
    %837 = @func_1693(%835, %836) /* ty=(Tensor[(1, 6, 5), float64], Tensor[(13, 13, 5), uint16], Tensor[(432), bool], Tensor[(845), uint16], Tensor[(30, 2100), float64], Tensor[(1, 6, 5), float64]) */;
    %838 = cast(%var_3394, dtype="float64") /* ty=Tensor[(4, 672), float64] */;
    %839 = sqrt(%838) /* ty=Tensor[(4, 672), float64] */;
    %840 = cast(%var_3420, dtype="uint8") /* ty=Tensor[(4, 672), uint8] */;
    %841 = shape_of(%839, dtype="int32") /* ty=Tensor[(2), int32] */;
    %842 = cast(%839, dtype="uint8") /* ty=Tensor[(4, 672), uint8] */;
    %843 = dyn.reshape(%840, %841, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %844 = cast(%var_3405, dtype="bool") /* ty=Tensor[(4, 672), bool] */;
    %845 = shape_of(%839, dtype="int32") /* ty=Tensor[(2), int32] */;
    %846 = cast(%839, dtype="bool") /* ty=Tensor[(4, 672), bool] */;
    %847 = dyn.reshape(%844, %845, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %848 = logical_or(%846, %847) /* ty=Tensor[(4, 672), bool] */;
    %849 = cast(%var_3426, dtype="bool") /* ty=Tensor[(4, 672), bool] */;
    %850 = shape_of(%848, dtype="int32") /* ty=Tensor[(2), int32] */;
    %851 = cast(%848, dtype="bool") /* ty=Tensor[(4, 672), bool] */;
    %852 = dyn.reshape(%849, %850, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %853 = %829.0;
    %854 = @func_3358(%831) /* ty=Tensor[(16, 12, 14), float32] */;
    %855 = %832.1;
    %856 = %837.1;
    %857 = @func_3292() /* ty=Tensor[(12, 15, 4), float32] */;
    %858 = subtract(%842, %843) /* ty=Tensor[(4, 672), uint8] */;
    %859 = greater(%851, %852) /* ty=Tensor[(4, 672), bool] */;
    (%853, %854, %855, %856, meta[relay.Constant][51] /* ty=Tensor[(432), bool] */, meta[relay.Constant][52] /* ty=Tensor[(845), uint16] */, %857, %858, %859)
  };
  %860(%var_3438, %var_3439, %var_3440, %var_3441) /* ty=(Tensor[(12, 9, 13), float64], Tensor[(16, 12, 14), float32], Tensor[(12, 15, 4), float32], Tensor[(13, 13, 5), uint16], Tensor[(432), bool], Tensor[(845), uint16], Tensor[(12, 15, 4), float32], Tensor[(4, 672), uint8], Tensor[(4, 672), bool]) */
}

def @func_7417(%var_7413: Tensor[(845), uint16]) -> (Tensor[(1, 6, 5), float64], Tensor[(10, 14, 15), uint8], Tensor[(2100), uint8], Tensor[(845), uint16]) {
  %861 = @func_1282() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */;
  %862 = cast(meta[relay.Constant][53] /* ty=Tensor[(2100), uint8] */, dtype="uint8") /* ty=Tensor[(2100), uint8] */;
  %863 = cast(%var_7413, dtype="uint16") /* ty=Tensor[(845), uint16] */;
  %864 = reshape(%862, newshape=[10, 14, 15]) /* ty=Tensor[(10, 14, 15), uint8] */;
  %865 = reshape(%863, newshape=[845]) /* ty=Tensor[(845), uint16] */;
  %866 = @func_1038(%864, %865) /* ty=(Tensor[(10, 14, 15), uint8], Tensor[(13, 13, 5), uint16], Tensor[(845), uint16], Tensor[(10, 14, 15), float64]) */;
  %867 = %861.2;
  %868 = %866.0;
  (%867, %868, meta[relay.Constant][53] /* ty=Tensor[(2100), uint8] */, %var_7413)
}

def @func_2060() -> Tensor[(12, 9, 13), float64] {
  %869 = @func_1576() /* ty=(Tensor[(30, 1), float64], Tensor[(12, 9, 13), float64], Tensor[(1404), int8]) */;
  %869.1
}

def @func_5695(%var_5691: Tensor[(3, 12, 13), uint16], %var_5692: Tensor[(3, 12, 13), uint16], %var_5693: Tensor[(198, 1), int64], %var_5694: Tensor[(3, 12, 13), uint16]) -> (Tensor[(3, 12, 13), uint16], Tensor[(13, 13, 5), uint16], Tensor[(2688), float32], Tensor[(15, 6), uint64], Tensor[(198, 1), int64], Tensor[(12, 15, 4), float32], Tensor[(3, 12, 13), bool]) {
  @func_5689(%var_5691, %var_5692, %var_5693, %var_5694) /* ty=(Tensor[(3, 12, 13), uint16], Tensor[(13, 13, 5), uint16], Tensor[(2688), float32], Tensor[(15, 6), uint64], Tensor[(198, 1), int64], Tensor[(12, 15, 4), float32], Tensor[(3, 12, 13), bool]) */
}

def @func_5334() -> Tensor[(12, 15, 4), float32] {
  %870 = @func_3478() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %870.0
}

def @func_1150(%var_1143: Tensor[(2, 9, 5), uint64], %var_1144: Tensor[(2, 9, 5), uint64]) -> Tensor[(2, 9, 5), bool] {
  %871 = cast(%var_1144, dtype="bool") /* ty=Tensor[(2, 9, 5), bool] */;
  %872 = shape_of(%var_1143, dtype="int32") /* ty=Tensor[(3), int32] */;
  %873 = cast(%var_1143, dtype="bool") /* ty=Tensor[(2, 9, 5), bool] */;
  %874 = dyn.reshape(%871, %872, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%873, %874) /* ty=Tensor[(2, 9, 5), bool] */
}

def @func_5279(%var_5265: Tensor[(2, 3, 4), float32], %var_5266: Tensor[(2, 3, 4), float32]) -> Tensor[(2, 3, 4), float32] {
  %875 = cast(%var_5266, dtype="float32") /* ty=Tensor[(2, 3, 4), float32] */;
  %876 = shape_of(%var_5265, dtype="int32") /* ty=Tensor[(3), int32] */;
  %877 = cast(%var_5265, dtype="float32") /* ty=Tensor[(2, 3, 4), float32] */;
  %878 = dyn.reshape(%875, %876, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%877, %878) /* ty=Tensor[(2, 3, 4), float32] */
}

def @func_3018(%var_3016: Tensor[(4, 10, 5), int8], %var_3017: Tensor[(4, 10, 5), int8]) -> (Tensor[(4, 10, 5), float64],) {
  @func_3014(%var_3016, %var_3017) /* ty=(Tensor[(4, 10, 5), float64],) */
}

def @func_3171() -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float64]) {
  %879 = @func_2030() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %880 = %879.0;
  %881 = cast(%880, dtype="float32") /* ty=Tensor[(12, 15, 4), float32] */;
  %882 = reshape(%881, newshape=[12, 15, 4]) /* ty=Tensor[(12, 15, 4), float32] */;
  %883 = @func_2115(%882) /* ty=(Tensor[(12, 15, 4), uint64], Tensor[(12, 15, 4), float64]) */;
  %884 = %883.1;
  (%880, %884)
}

def @func_7108() -> (Tensor[(15, 2, 1), float64],) {
  %887 = fn () -> (Tensor[(15, 2, 1), float64],) {
    %885 = cast(meta[relay.Constant][54] /* ty=Tensor[(15, 2, 1), float64] */, dtype="float64") /* ty=Tensor[(15, 2, 1), float64] */;
    %886 = log(%885) /* ty=Tensor[(15, 2, 1), float64] */;
    (%886,)
  };
  %887() /* ty=(Tensor[(15, 2, 1), float64],) */
}

def @func_1814(%var_1812: Tensor[(1, 6, 5), float64]) -> (Tensor[(?, 6, 5), uint16], Tensor[(?, 6, 5), uint16]) {
  @func_1811(%var_1812) /* ty=(Tensor[(?, 6, 5), uint16], Tensor[(?, 6, 5), uint16]) */
}

def @func_5939(%var_5937: Tensor[(24), float32]) -> (Tensor[(12, 15, 4), float32], Tensor[(2, 3, 4), float32], Tensor[(24), float32], Tensor[(6, 9, 1), float32]) {
  @func_5936(%var_5937) /* ty=(Tensor[(12, 15, 4), float32], Tensor[(2, 3, 4), float32], Tensor[(24), float32], Tensor[(6, 9, 1), float32]) */
}

def @func_3173() -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float64]) {
  @func_3171() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float64]) */
}

def @func_1447(%var_1443: Tensor[(4, 12, 9), bool], %var_1444: Tensor[(30), float64], %var_1445: Tensor[(1, 2100), uint8], %var_1446: Tensor[(65, 13), uint16]) -> (Tensor[(4, 12, 9), int64], Tensor[(1, 6, 5), float64], Tensor[(30), float64], Tensor[(1, 6, 5), float64], Tensor[(13, 4, 9), float32], Tensor[(6, 78), float32], Tensor[(3, 6, 11), float32], Tensor[(10, 14, 15), float64], Tensor[(1, 2100), uint8], Tensor[(65, 13), uint32], Tensor[(13, 13, 5), uint16], Tensor[(30, 2), int32], Tensor[(30, 1), float64]) {
  @func_1441(%var_1443, %var_1444, %var_1445, %var_1446) /* ty=(Tensor[(4, 12, 9), int64], Tensor[(1, 6, 5), float64], Tensor[(30), float64], Tensor[(1, 6, 5), float64], Tensor[(13, 4, 9), float32], Tensor[(6, 78), float32], Tensor[(3, 6, 11), float32], Tensor[(10, 14, 15), float64], Tensor[(1, 2100), uint8], Tensor[(65, 13), uint32], Tensor[(13, 13, 5), uint16], Tensor[(30, 2), int32], Tensor[(30, 1), float64]) */
}

def @func_2858() -> Tensor[(12, 15, 4), float32] {
  @func_2282() /* ty=Tensor[(12, 15, 4), float32] */
}

def @func_717(%var_715: Tensor[(3, 6, 11), int64], %var_716: Tensor[(3, 6, 11), int64]) -> (Tensor[(3, 6, 11), int64], Tensor[(3, 6, 11), float32]) {
  @func_713(%var_715, %var_716) /* ty=(Tensor[(3, 6, 11), int64], Tensor[(3, 6, 11), float32]) */
}

def @func_2983() -> (Tensor[(12, 15, 4), float32],) {
  %888 = @func_2282() /* ty=Tensor[(12, 15, 4), float32] */;
  (%888,)
}

def @func_5538() -> (Tensor[(12, 15, 4), bool],) {
  @func_5536() /* ty=(Tensor[(12, 15, 4), bool],) */
}

def @func_7379() -> (Tensor[(12, 15, 4), float32], Tensor[(90), uint64]) {
  @func_7377() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(90), uint64]) */
}

def @func_2158() -> (Tensor[(12, 9, 13), float64], Tensor[(13, 13, 5), uint16], Tensor[(3, 700), uint8], Tensor[(13, 65), uint16], Tensor[(12, 15, 4), float32]) {
  %889 = cast(meta[relay.Constant][55] /* ty=Tensor[(3, 700), uint8] */, dtype="uint8") /* ty=Tensor[(3, 700), uint8] */;
  %890 = cast(meta[relay.Constant][56] /* ty=Tensor[(13, 65), uint16] */, dtype="uint16") /* ty=Tensor[(13, 65), uint16] */;
  %891 = reshape(%889, newshape=[10, 14, 15]) /* ty=Tensor[(10, 14, 15), uint8] */;
  %892 = reshape(%890, newshape=[845]) /* ty=Tensor[(845), uint16] */;
  %893 = @func_1038(%891, %892) /* ty=(Tensor[(10, 14, 15), uint8], Tensor[(13, 13, 5), uint16], Tensor[(845), uint16], Tensor[(10, 14, 15), float64]) */;
  %894 = @func_1932() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %895 = @func_2060() /* ty=Tensor[(12, 9, 13), float64] */;
  %896 = %893.1;
  %897 = %894.0;
  (%895, %896, meta[relay.Constant][55] /* ty=Tensor[(3, 700), uint8] */, meta[relay.Constant][56] /* ty=Tensor[(13, 65), uint16] */, %897)
}

def @func_5776() -> (Tensor[(12, 9, 13), float64],) {
  %898 = @func_5471() /* ty=(Tensor[(12, 9, 13), float64],) */;
  %899 = %898.0;
  (%899,)
}

def @func_1811(%var_1804: Tensor[(1, 6, 5), float64]) -> (Tensor[(?, 6, 5), uint16], Tensor[(?, 6, 5), uint16]) {
  %900 = @func_1282() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */;
  %901 = %900.2;
  %902 = cast(meta[relay.Constant][57] /* ty=Tensor[(1, 6, 5), float64] */, dtype="uint16") /* ty=Tensor[(1, 6, 5), uint16] */;
  %903 = shape_of(%901, dtype="int32") /* ty=Tensor[(3), int32] */;
  %904 = cast(%901, dtype="uint16") /* ty=Tensor[(1, 6, 5), uint16] */;
  %905 = dyn.reshape(%902, %903, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %906 = cast(%var_1804, dtype="uint16") /* ty=Tensor[(1, 6, 5), uint16] */;
  %907 = shape_of(meta[relay.Constant][57] /* ty=Tensor[(1, 6, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %908 = cast(meta[relay.Constant][57] /* ty=Tensor[(1, 6, 5), float64] */, dtype="uint16") /* ty=Tensor[(1, 6, 5), uint16] */;
  %909 = dyn.reshape(%906, %907, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %910 = maximum(%904, %905) /* ty=Tensor[(?, 6, 5), uint16] */;
  %911 = bitwise_and(%908, %909) /* ty=Tensor[(?, 6, 5), uint16] */;
  (%910, %911)
}

def @func_2708(%var_2655: Tensor[(78, 6), float32]) -> (Tensor[(12, 15, 4), float32], Tensor[(845), uint16], Tensor[(78, 6), uint32], Tensor[(12, 9, 13), float64], Tensor[(12, 15, 4), float32], Tensor[(12, 9, 13), float64], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32]) {
  %912 = @func_2030() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %913 = cast(meta[relay.Constant][59] /* ty=Tensor[(78, 6), float32] */, dtype="uint32") /* ty=Tensor[(78, 6), uint32] */;
  %914 = shape_of(%var_2655, dtype="int32") /* ty=Tensor[(2), int32] */;
  %915 = cast(%var_2655, dtype="uint32") /* ty=Tensor[(78, 6), uint32] */;
  %916 = dyn.reshape(%913, %914, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %917 = cast(meta[relay.Constant][58] /* ty=Tensor[(845), uint16] */, dtype="uint16") /* ty=Tensor[(845), uint16] */;
  %918 = cast(%var_2655, dtype="float32") /* ty=Tensor[(78, 6), float32] */;
  %919 = reshape(%917, newshape=[845]) /* ty=Tensor[(845), uint16] */;
  %920 = reshape(%918, newshape=[468]) /* ty=Tensor[(468), float32] */;
  %921 = @func_1781(%919, %920) /* ty=(Tensor[(12, 9, 13), float64], Tensor[(3, 6, 11), float32], Tensor[(845), uint16], Tensor[(13, 4, 9), float32], Tensor[(468), float32], Tensor[(3, 6, 11), float32], Tensor[(12, 9, 13), float64], Tensor[(30, 1), float64]) */;
  %922 = %921.6;
  %923 = cast(%922, dtype="int8") /* ty=Tensor[(12, 9, 13), int8] */;
  %924 = reshape(%923, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), int8] */;
  %925 = @func_1932() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %926 = cast(%922, dtype="float64") /* ty=Tensor[(12, 9, 13), float64] */;
  %927 = @func_1932() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %928 = %912.0;
  %929 = minimum(%915, %916) /* ty=Tensor[(78, 6), uint32] */;
  %930 = @func_174(%924) /* ty=Tensor[(12, 9, 13), float64] */;
  %931 = %925.0;
  %932 = exp(%926) /* ty=Tensor[(12, 9, 13), float64] */;
  %933 = %927.0;
  %934 = @func_2282() /* ty=Tensor[(12, 15, 4), float32] */;
  (%928, meta[relay.Constant][58] /* ty=Tensor[(845), uint16] */, %929, %930, %931, %932, %933, %934)
}

def @func_3912() -> (Tensor[(30, 1), float64], Tensor[(12, 15, 4), float32]) {
  %939 = fn () -> (Tensor[(30, 1), float64], Tensor[(12, 15, 4), float32]) {
    %935 = @func_1282() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */;
    %936 = @func_3511() /* ty=(Tensor[(12, 15, 4), float32],) */;
    %937 = %935.3;
    %938 = %936.0;
    (%937, %938)
  };
  %939() /* ty=(Tensor[(30, 1), float64], Tensor[(12, 15, 4), float32]) */
}

def @func_5936(%var_5910: Tensor[(24), float32]) -> (Tensor[(12, 15, 4), float32], Tensor[(2, 3, 4), float32], Tensor[(24), float32], Tensor[(6, 9, 1), float32]) {
  %940 = @func_4567() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %941 = cast(%var_5910, dtype="float32") /* ty=Tensor[(24), float32] */;
  %942 = cast(%var_5910, dtype="float32") /* ty=Tensor[(24), float32] */;
  %943 = reshape(%941, newshape=[2, 3, 4]) /* ty=Tensor[(2, 3, 4), float32] */;
  %944 = reshape(%942, newshape=[2, 3, 4]) /* ty=Tensor[(2, 3, 4), float32] */;
  %945 = @func_4653() /* ty=(Tensor[(6, 9, 1), float32],) */;
  %946 = %940.0;
  %947 = @func_5279(%943, %944) /* ty=Tensor[(2, 3, 4), float32] */;
  %948 = %945.0;
  (%946, %947, %var_5910, %948)
}

def @func_5874() -> (Tensor[(7, 15, 8), float64],) {
  %949 = @func_4272() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(7, 15, 8), float64]) */;
  %950 = %949.2;
  (%950,)
}

def @func_4102() -> Tensor[(12, 15, 4), float32] {
  %952 = fn () -> Tensor[(12, 15, 4), float32] {
    %951 = @func_3511() /* ty=(Tensor[(12, 15, 4), float32],) */;
    %951.0
  };
  %952() /* ty=Tensor[(12, 15, 4), float32] */
}

def @func_7457(%var_7455: Tensor[(4, 6, 12), uint64], %var_7456: Tensor[(4, 6, 12), uint64]) -> (Tensor[(4, 6, 12), uint64],) {
  @func_7453(%var_7455, %var_7456) /* ty=(Tensor[(4, 6, 12), uint64],) */
}

def @func_3293() -> Tensor[(12, 15, 4), float32] {
  %953 = fn () -> Tensor[(12, 15, 4), float32] {
    @func_2762() /* ty=Tensor[(12, 15, 4), float32] */
  };
  %953() /* ty=Tensor[(12, 15, 4), float32] */
}

def @func_3341() -> Tensor[(12, 15, 4), float32] {
  @func_3339() /* ty=Tensor[(12, 15, 4), float32] */
}

def @func_2711(%var_2709: Tensor[(78, 6), float32]) -> (Tensor[(12, 15, 4), float32], Tensor[(845), uint16], Tensor[(78, 6), uint32], Tensor[(12, 9, 13), float64], Tensor[(12, 15, 4), float32], Tensor[(12, 9, 13), float64], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32]) {
  @func_2708(%var_2709) /* ty=(Tensor[(12, 15, 4), float32], Tensor[(845), uint16], Tensor[(78, 6), uint32], Tensor[(12, 9, 13), float64], Tensor[(12, 15, 4), float32], Tensor[(12, 9, 13), float64], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32]) */
}

def @func_4370(%var_4369: Tensor[(845), uint16]) -> (Tensor[(12, 9, 13), float64], Tensor[(3, 6, 11), float32], Tensor[(315), float32], Tensor[(845), uint16], Tensor[(360, 2), float32], Tensor[(12, 15, 4), float32]) {
  %966 = fn (%var_4358: Tensor[(845), uint16]) -> (Tensor[(12, 9, 13), float64], Tensor[(3, 6, 11), float32], Tensor[(315), float32], Tensor[(845), uint16], Tensor[(360, 2), float32], Tensor[(12, 15, 4), float32]) {
    %954 = @func_2255() /* ty=(Tensor[(12, 9, 13), float64],) */;
    %955 = cast(meta[relay.Constant][60] /* ty=Tensor[(315), float32] */, dtype="float32") /* ty=Tensor[(315), float32] */;
    %956 = cast(%var_4358, dtype="uint16") /* ty=Tensor[(845), uint16] */;
    %957 = cast(meta[relay.Constant][61] /* ty=Tensor[(360, 2), float32] */, dtype="float32") /* ty=Tensor[(360, 2), float32] */;
    %958 = reshape(%955, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), float32] */;
    %959 = reshape(%956, newshape=[1, 845]) /* ty=Tensor[(1, 845), uint16] */;
    %960 = reshape(%957, newshape=[720]) /* ty=Tensor[(720), float32] */;
    %961 = @func_2421(%958, %959, %960) /* ty=(Tensor[(3, 6, 11), float32], Tensor[(1, 845), uint16], Tensor[(15, 3, 7), float32], Tensor[(12, 15, 4), uint64], Tensor[(720), float32], Tensor[(12, 9, 13), float64]) */;
    %962 = @func_3511() /* ty=(Tensor[(12, 15, 4), float32],) */;
    %963 = %954.0;
    %964 = %961.0;
    %965 = %962.0;
    (%963, %964, meta[relay.Constant][60] /* ty=Tensor[(315), float32] */, %var_4358, meta[relay.Constant][61] /* ty=Tensor[(360, 2), float32] */, %965)
  };
  %966(%var_4369) /* ty=(Tensor[(12, 9, 13), float64], Tensor[(3, 6, 11), float32], Tensor[(315), float32], Tensor[(845), uint16], Tensor[(360, 2), float32], Tensor[(12, 15, 4), float32]) */
}

def @func_5190() -> Tensor[(12, 9, 13), float64] {
  %967 = @func_4535() /* ty=(Tensor[(12, 9, 13), float64], Tensor[(12, 15, 4), bool], Tensor[(12, 15, 4), float32]) */;
  %967.0
}

def @func_5283(%var_5281: Tensor[(2, 3, 4), float32], %var_5282: Tensor[(2, 3, 4), float32]) -> Tensor[(2, 3, 4), float32] {
  @func_5279(%var_5281, %var_5282) /* ty=Tensor[(2, 3, 4), float32] */
}

def @func_6718() -> Tensor[(12, 15, 4), float32] {
  %969 = fn () -> Tensor[(12, 15, 4), float32] {
    %968 = @func_5431() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32]) */;
    %968.0
  };
  %969() /* ty=Tensor[(12, 15, 4), float32] */
}

def @func_5778() -> (Tensor[(12, 9, 13), float64],) {
  @func_5776() /* ty=(Tensor[(12, 9, 13), float64],) */
}

def @func_7874() -> (Tensor[(3, 6, 11), int64],) {
  @func_7872() /* ty=(Tensor[(3, 6, 11), int64],) */
}

def @func_6207() -> (Tensor[(30, 1), float64], Tensor[(12, 15, 4), float32]) {
  @func_6205() /* ty=(Tensor[(30, 1), float64], Tensor[(12, 15, 4), float32]) */
}

def @func_4127() -> (Tensor[(9, 15, 2), bool], Tensor[(30, 1), float64], Tensor[(720), float32]) {
  @func_4125() /* ty=(Tensor[(9, 15, 2), bool], Tensor[(30, 1), float64], Tensor[(720), float32]) */
}

def @func_4609() -> Tensor[(1404), int8] {
  %971 = fn () -> Tensor[(1404), int8] {
    %970 = @func_1576() /* ty=(Tensor[(30, 1), float64], Tensor[(12, 9, 13), float64], Tensor[(1404), int8]) */;
    %970.2
  };
  %971() /* ty=Tensor[(1404), int8] */
}

def @func_7005() -> (Tensor[(6, 9, ?), bool],) {
  %974 = fn () -> (Tensor[(6, 9, ?), bool],) {
    %972 = @func_6699() /* ty=(Tensor[(6, 9, ?), bool],) */;
    %973 = %972.0;
    (%973,)
  };
  %974() /* ty=(Tensor[(6, 9, ?), bool],) */
}

def @func_6239() -> (Tensor[(12, 15, 4), float32],) {
  @func_6237() /* ty=(Tensor[(12, 15, 4), float32],) */
}

def @func_7262(%var_7260: Tensor[(5, 12, 11), int8]) -> Tensor[(5, 12, 11), int8] {
  @func_7259(%var_7260) /* ty=Tensor[(5, 12, 11), int8] */
}

def @func_2257() -> (Tensor[(12, 9, 13), float64],) {
  @func_2255() /* ty=(Tensor[(12, 9, 13), float64],) */
}

def @func_4947(%var_4945: Tensor[(30), float64]) -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(30), float64], Tensor[(1, 6, 5), float32]) {
  @func_4944(%var_4945) /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(30), float64], Tensor[(1, 6, 5), float32]) */
}

def @func_7547() -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32]) {
  %975 = @func_2983() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %976 = @func_4073() /* ty=Tensor[(12, 15, 4), float32] */;
  %977 = %975.0;
  (%976, %977)
}

def @func_4696() -> (Tensor[(12, 9, 13), float64], Tensor[(12, 15, 4), float32], Tensor[(2100), uint8], Tensor[(65, 13), uint16], Tensor[(90), uint64]) {
  @func_4694() /* ty=(Tensor[(12, 9, 13), float64], Tensor[(12, 15, 4), float32], Tensor[(2100), uint8], Tensor[(65, 13), uint16], Tensor[(90), uint64]) */
}

def @func_4944(%var_4926: Tensor[(30), float64]) -> (Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float32], Tensor[(30), float64], Tensor[(1, 6, 5), float32]) {
  %978 = @func_4824() /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(12, 15, 4), float32]) */;
  %979 = cast(%var_4926, dtype="float64") /* ty=Tensor[(30), float64] */;
  %980 = reshape(%979, newshape=[30]) /* ty=Tensor[(30), float64] */;
  %981 = @func_3067(%980) /* ty=(Tensor[(12, 15, 4), float32], Tensor[(1, 6, 5), float64], Tensor[(30), float64], Tensor[(13, 13, 5), uint16], Tensor[(1, 2100), uint8], Tensor[(845), uint16]) */;
  %982 = %981.1;
  %983 = cast(%982, dtype="float32") /* ty=Tensor[(1, 6, 5), float32] */;
  %984 = %978.1;
  %985 = @func_4796() /* ty=Tensor[(12, 15, 4), float32] */;
  %986 = asinh(%983) /* ty=Tensor[(1, 6, 5), float32] */;
  (%984, %985, %var_4926, %986)
}

def @func_4219() -> Tensor[(13, 13, 5), uint16] {
  @func_4217() /* ty=Tensor[(13, 13, 5), uint16] */
}

def @func_7132() -> (Tensor[(90), uint64],) {
  @func_7130() /* ty=(Tensor[(90), uint64],) */
}

def @func_4003(%var_3975: Tensor[(198, 1), int64]) -> (Tensor[(12, 15, 4), float64], Tensor[(1, 845), uint16], Tensor[(845), uint16], Tensor[(12, 15, 4), float64], Tensor[(1, 450), float64], Tensor[(50, 9), float64], Tensor[(15, 6), uint64], Tensor[(12, 15, 4), float32], Tensor[(198, 315), uint32]) {
  %987 = @func_2762() /* ty=Tensor[(12, 15, 4), float32] */;
  %988 = cast(%987, dtype="float64") /* ty=Tensor[(12, 15, 4), float64] */;
  %989 = cast(meta[relay.Constant][62] /* ty=Tensor[(315), float32] */, dtype="float32") /* ty=Tensor[(315), float32] */;
  %990 = cast(meta[relay.Constant][63] /* ty=Tensor[(845), uint16] */, dtype="uint16") /* ty=Tensor[(845), uint16] */;
  %991 = cast(%987, dtype="float32") /* ty=Tensor[(12, 15, 4), float32] */;
  %992 = reshape(%989, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), float32] */;
  %993 = reshape(%990, newshape=[1, 845]) /* ty=Tensor[(1, 845), uint16] */;
  %994 = reshape(%991, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %995 = @func_2421(%992, %993, %994) /* ty=(Tensor[(3, 6, 11), float32], Tensor[(1, 845), uint16], Tensor[(15, 3, 7), float32], Tensor[(12, 15, 4), uint64], Tensor[(720), float32], Tensor[(12, 9, 13), float64]) */;
  %996 = @func_3171() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), float64]) */;
  %997 = cast(meta[relay.Constant][64] /* ty=Tensor[(50, 9), float64] */, dtype="float64") /* ty=Tensor[(50, 9), float64] */;
  %998 = cast(meta[relay.Constant][65] /* ty=Tensor[(15, 6), uint64] */, dtype="uint64") /* ty=Tensor[(15, 6), uint64] */;
  %999 = cast(%var_3975, dtype="int64") /* ty=Tensor[(198, 1), int64] */;
  %1000 = reshape(%997, newshape=[1, 450]) /* ty=Tensor[(1, 450), float64] */;
  %1001 = reshape(%998, newshape=[90]) /* ty=Tensor[(90), uint64] */;
  %1002 = reshape(%999, newshape=[198]) /* ty=Tensor[(198), int64] */;
  %1003 = @func_3657(%1000, %1001, %1002) /* ty=(Tensor[(12, 15, 4), bool], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), uint64], Tensor[(90, 1), float32], Tensor[(1, 450), float64], Tensor[(65, 13), uint16], Tensor[(90), uint64], Tensor[(3, 6, 11), float32], Tensor[(198), int64]) */;
  %1004 = @func_2983() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %1005 = cast(meta[relay.Constant][62] /* ty=Tensor[(315), float32] */, dtype="uint32") /* ty=Tensor[(315), uint32] */;
  %1006 = cast(%var_3975, dtype="uint32") /* ty=Tensor[(198, 1), uint32] */;
  %1007 = erf(%988) /* ty=Tensor[(12, 15, 4), float64] */;
  %1008 = %995.1;
  %1009 = %996.1;
  %1010 = %1003.4;
  %1011 = %1004.0;
  %1012 = add(%1005, %1006) /* ty=Tensor[(198, 315), uint32] */;
  (%1007, %1008, meta[relay.Constant][63] /* ty=Tensor[(845), uint16] */, %1009, %1010, meta[relay.Constant][64] /* ty=Tensor[(50, 9), float64] */, meta[relay.Constant][65] /* ty=Tensor[(15, 6), uint64] */, %1011, %1012)
}

def @func_713(%var_690: Tensor[(3, 6, 11), int64], %var_691: Tensor[(3, 6, 11), int64]) -> (Tensor[(3, 6, 11), int64], Tensor[(3, 6, 11), float32]) {
  %1013 = cast(%var_691, dtype="int64") /* ty=Tensor[(3, 6, 11), int64] */;
  %1014 = shape_of(%var_690, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1015 = cast(%var_690, dtype="int64") /* ty=Tensor[(3, 6, 11), int64] */;
  %1016 = dyn.reshape(%1013, %1014, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1017 = cast(%var_690, dtype="float32") /* ty=Tensor[(3, 6, 11), float32] */;
  %1018 = logical_xor(%1015, %1016) /* ty=Tensor[(3, 6, 11), int64] */;
  %1019 = exp(%1017) /* ty=Tensor[(3, 6, 11), float32] */;
  (%1018, %1019)
}

def @func_2968(%var_2966: Tensor[(720), float32]) -> (Tensor[(13, 13, 5), uint16], Tensor[(12, 15, 4), uint64], Tensor[(720), float32], Tensor[(?, 6, 5), uint16], Tensor[(10, 3), float64], Tensor[(2, 9, 5), float32], Tensor[(13, 65), uint16], Tensor[(1404), int8], Tensor[(7, 15, 8), float64], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) {
  @func_2965(%var_2966) /* ty=(Tensor[(13, 13, 5), uint16], Tensor[(12, 15, 4), uint64], Tensor[(720), float32], Tensor[(?, 6, 5), uint16], Tensor[(10, 3), float64], Tensor[(2, 9, 5), float32], Tensor[(13, 65), uint16], Tensor[(1404), int8], Tensor[(7, 15, 8), float64], Tensor[(1, 6, 5), float64], Tensor[(30, 1), float64]) */
}

def @func_4075() -> Tensor[(12, 15, 4), float32] {
  @func_4073() /* ty=Tensor[(12, 15, 4), float32] */
}

def @func_5876() -> (Tensor[(7, 15, 8), float64],) {
  @func_5874() /* ty=(Tensor[(7, 15, 8), float64],) */
}

def @func_3769(%var_3755: Tensor[(11, 5, 8), uint32], %var_3756: Tensor[(11, 5, 8), uint32]) -> (Tensor[(11, 5, 8), bool], Tensor[(11, 5, 8), float32], Tensor[(432), bool], Tensor[(2688), float32]) {
  %1020 = cast(%var_3756, dtype="bool") /* ty=Tensor[(11, 5, 8), bool] */;
  %1021 = shape_of(%var_3755, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1022 = cast(%var_3755, dtype="bool") /* ty=Tensor[(11, 5, 8), bool] */;
  %1023 = dyn.reshape(%1020, %1021, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1024 = cast(%var_3755, dtype="float32") /* ty=Tensor[(11, 5, 8), float32] */;
  %1025 = cast(meta[relay.Constant][66] /* ty=Tensor[(2688), float32] */, dtype="float32") /* ty=Tensor[(2688), float32] */;
  %1026 = cast(meta[relay.Constant][66] /* ty=Tensor[(2688), float32] */, dtype="float64") /* ty=Tensor[(2688), float64] */;
  %1027 = cast(meta[relay.Constant][66] /* ty=Tensor[(2688), float32] */, dtype="float64") /* ty=Tensor[(2688), float64] */;
  %1028 = cast(meta[relay.Constant][66] /* ty=Tensor[(2688), float32] */, dtype="bool") /* ty=Tensor[(2688), bool] */;
  %1029 = reshape(%1025, newshape=[4, 672]) /* ty=Tensor[(4, 672), float32] */;
  %1030 = reshape(%1026, newshape=[4, 672]) /* ty=Tensor[(4, 672), float64] */;
  %1031 = reshape(%1027, newshape=[4, 672]) /* ty=Tensor[(4, 672), float64] */;
  %1032 = reshape(%1028, newshape=[4, 672]) /* ty=Tensor[(4, 672), bool] */;
  %1033 = @func_3437(%1029, %1030, %1031, %1032) /* ty=(Tensor[(12, 9, 13), float64], Tensor[(16, 12, 14), float32], Tensor[(12, 15, 4), float32], Tensor[(13, 13, 5), uint16], Tensor[(432), bool], Tensor[(845), uint16], Tensor[(12, 15, 4), float32], Tensor[(4, 672), uint8], Tensor[(4, 672), bool]) */;
  %1034 = less(%1022, %1023) /* ty=Tensor[(11, 5, 8), bool] */;
  %1035 = acosh(%1024) /* ty=Tensor[(11, 5, 8), float32] */;
  %1036 = %1033.4;
  (%1034, %1035, %1036, meta[relay.Constant][66] /* ty=Tensor[(2688), float32] */)
}

def @func_3661(%var_3658: Tensor[(1, 450), float64], %var_3659: Tensor[(90), uint64], %var_3660: Tensor[(198), int64]) -> (Tensor[(12, 15, 4), bool], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), uint64], Tensor[(90, 1), float32], Tensor[(1, 450), float64], Tensor[(65, 13), uint16], Tensor[(90), uint64], Tensor[(3, 6, 11), float32], Tensor[(198), int64]) {
  %1069 = fn (%var_3648: Tensor[(1, 450), float64], %var_3650: Tensor[(90), uint64], %var_3654: Tensor[(198), int64]) -> (Tensor[(12, 15, 4), bool], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), uint64], Tensor[(90, 1), float32], Tensor[(1, 450), float64], Tensor[(65, 13), uint16], Tensor[(90), uint64], Tensor[(3, 6, 11), float32], Tensor[(198), int64]) {
    %1037 = @func_3511() /* ty=(Tensor[(12, 15, 4), float32],) */;
    %1038 = %1037.0;
    %1039 = cast(meta[relay.Constant][67] /* ty=Tensor[(12, 15, 4), float32] */, dtype="bool") /* ty=Tensor[(12, 15, 4), bool] */;
    %1040 = shape_of(%1038, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1041 = cast(%1038, dtype="bool") /* ty=Tensor[(12, 15, 4), bool] */;
    %1042 = dyn.reshape(%1039, %1040, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1043 = greater_equal(%1041, %1042) /* ty=Tensor[(12, 15, 4), bool] */;
    %1044 = cast(%1043, dtype="float32") /* ty=Tensor[(12, 15, 4), float32] */;
    %1045 = reshape(%1044, newshape=[12, 15, 4]) /* ty=Tensor[(12, 15, 4), float32] */;
    %1046 = @func_2115(%1045) /* ty=(Tensor[(12, 15, 4), uint64], Tensor[(12, 15, 4), float64]) */;
    %1047 = cast(%var_3648, dtype="float64") /* ty=Tensor[(1, 450), float64] */;
    %1048 = cast(%var_3648, dtype="float64") /* ty=Tensor[(1, 450), float64] */;
    %1049 = cast(meta[relay.Constant][68] /* ty=Tensor[(65, 13), uint16] */, dtype="uint16") /* ty=Tensor[(65, 13), uint16] */;
    %1050 = cast(%var_3650, dtype="uint64") /* ty=Tensor[(90), uint64] */;
    %1051 = cast(%var_3648, dtype="bool") /* ty=Tensor[(1, 450), bool] */;
    %1052 = cast(%var_3648, dtype="bool") /* ty=Tensor[(1, 450), bool] */;
    %1053 = reshape(%1047, newshape=[10, 5, 9]) /* ty=Tensor[(10, 5, 9), float64] */;
    %1054 = reshape(%1048, newshape=[10, 5, 9]) /* ty=Tensor[(10, 5, 9), float64] */;
    %1055 = reshape(%1049, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), uint16] */;
    %1056 = reshape(%1050, newshape=[90]) /* ty=Tensor[(90), uint64] */;
    %1057 = reshape(%1051, newshape=[10, 5, 9]) /* ty=Tensor[(10, 5, 9), bool] */;
    %1058 = reshape(%1052, newshape=[10, 5, 9]) /* ty=Tensor[(10, 5, 9), bool] */;
    %1059 = @func_2615(%1053, %1054, %1055, %1056, %1057, %1058) /* ty=(Tensor[(12, 9, 13), float64], Tensor[(13, 13, 5), int64], Tensor[(12, 9, 13), float64], Tensor[(10, 5, 9), bool], Tensor[(16, ?, 10), float32], Tensor[(90), uint64], Tensor[(12, 15, 4), float32], Tensor[(90, 1), float32], Tensor[(1, 6, 5), float64], Tensor[(10, 5, 9), float32], Tensor[(10, 5, 9), float64]) */;
    %1060 = cast(%var_3654, dtype="int64") /* ty=Tensor[(198), int64] */;
    %1061 = cast(%var_3654, dtype="int64") /* ty=Tensor[(198), int64] */;
    %1062 = reshape(%1060, newshape=[3, 6, 11]) /* ty=Tensor[(3, 6, 11), int64] */;
    %1063 = reshape(%1061, newshape=[3, 6, 11]) /* ty=Tensor[(3, 6, 11), int64] */;
    %1064 = @func_713(%1062, %1063) /* ty=(Tensor[(3, 6, 11), int64], Tensor[(3, 6, 11), float32]) */;
    %1065 = @func_2282() /* ty=Tensor[(12, 15, 4), float32] */;
    %1066 = %1046.0;
    %1067 = %1059.7;
    %1068 = %1064.1;
    (%1043, %1065, %1066, %1067, %var_3648, meta[relay.Constant][68] /* ty=Tensor[(65, 13), uint16] */, %var_3650, %1068, %var_3654)
  };
  %1069(%var_3658, %var_3659, %var_3660) /* ty=(Tensor[(12, 15, 4), bool], Tensor[(12, 15, 4), float32], Tensor[(12, 15, 4), uint64], Tensor[(90, 1), float32], Tensor[(1, 450), float64], Tensor[(65, 13), uint16], Tensor[(90), uint64], Tensor[(3, 6, 11), float32], Tensor[(198), int64]) */
}

def @func_6205() -> (Tensor[(30, 1), float64], Tensor[(12, 15, 4), float32]) {
  %1070 = @func_3911() /* ty=(Tensor[(30, 1), float64], Tensor[(12, 15, 4), float32]) */;
  %1071 = @func_1932() /* ty=(Tensor[(12, 15, 4), float32],) */;
  %1072 = %1070.0;
  %1073 = %1071.0;
  (%1072, %1073)
}

def @func_430(%var_429: Tensor[(1, 6, 5), float64]) -> (Tensor[(1, 6, 5), float64],) {
  %1076 = fn (%var_419: Tensor[(1, 6, 5), float64]) -> (Tensor[(1, 6, 5), float64],) {
    %1074 = cast(%var_419, dtype="float64") /* ty=Tensor[(1, 6, 5), float64] */;
    %1075 = sin(%1074) /* ty=Tensor[(1, 6, 5), float64] */;
    (%1075,)
  };
  %1076(%var_429) /* ty=(Tensor[(1, 6, 5), float64],) */
}

def @func_3513() -> (Tensor[(12, 15, 4), float32],) {
  @func_3511() /* ty=(Tensor[(12, 15, 4), float32],) */
}

def @func_4424() -> (Tensor[(12, 15, 4), float32], Tensor[(4, 10, 5), float64], Tensor[(200), int8], Tensor[(12, 15, 4), float32]) {
  %1085 = fn () -> (Tensor[(12, 15, 4), float32], Tensor[(4, 10, 5), float64], Tensor[(200), int8], Tensor[(12, 15, 4), float32]) {
    %1077 = cast(meta[relay.Constant][69] /* ty=Tensor[(200), int8] */, dtype="int8") /* ty=Tensor[(200), int8] */;
    %1078 = cast(meta[relay.Constant][69] /* ty=Tensor[(200), int8] */, dtype="int8") /* ty=Tensor[(200), int8] */;
    %1079 = reshape(%1077, newshape=[4, 10, 5]) /* ty=Tensor[(4, 10, 5), int8] */;
    %1080 = reshape(%1078, newshape=[4, 10, 5]) /* ty=Tensor[(4, 10, 5), int8] */;
    %1081 = @func_3014(%1079, %1080) /* ty=(Tensor[(4, 10, 5), float64],) */;
    %1082 = @func_2282() /* ty=Tensor[(12, 15, 4), float32] */;
    %1083 = %1081.0;
    %1084 = @func_4101() /* ty=Tensor[(12, 15, 4), float32] */;
    (%1082, %1083, meta[relay.Constant][69] /* ty=Tensor[(200), int8] */, %1084)
  };
  %1085() /* ty=(Tensor[(12, 15, 4), float32], Tensor[(4, 10, 5), float64], Tensor[(200), int8], Tensor[(12, 15, 4), float32]) */
}

def @func_871(%var_869: Tensor[(13, 4, 9), float32]) -> (Tensor[(13, 4, 9), float32],) {
  @func_868(%var_869) /* ty=(Tensor[(13, 4, 9), float32],) */
}

def @func_6873() -> (Tensor[(12, 9, 13), float64], Tensor[(90, 1), float32], Tensor[(90), uint64]) {
  @func_6871() /* ty=(Tensor[(12, 9, 13), float64], Tensor[(90, 1), float32], Tensor[(90), uint64]) */
}

def @func_7186() -> (Tensor[(13, 13, 5), uint16], Tensor[(12, 9, 13), float64], Tensor[(468, 1), float32]) {
  %1086 = @func_4217() /* ty=Tensor[(13, 13, 5), uint16] */;
  %1087 = cast(%1086, dtype="uint16") /* ty=Tensor[(13, 13, 5), uint16] */;
  %1088 = cast(meta[relay.Constant][70] /* ty=Tensor[(468, 1), float32] */, dtype="float32") /* ty=Tensor[(468, 1), float32] */;
  %1089 = reshape(%1087, newshape=[845]) /* ty=Tensor[(845), uint16] */;
  %1090 = reshape(%1088, newshape=[468]) /* ty=Tensor[(468), float32] */;
  %1091 = @func_1781(%1089, %1090) /* ty=(Tensor[(12, 9, 13), float64], Tensor[(3, 6, 11), float32], Tensor[(845), uint16], Tensor[(13, 4, 9), float32], Tensor[(468), float32], Tensor[(3, 6, 11), float32], Tensor[(12, 9, 13), float64], Tensor[(30, 1), float64]) */;
  %1092 = %1091.6;
  (%1086, %1092, meta[relay.Constant][70] /* ty=Tensor[(468, 1), float32] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen471/build/output.py", line 2721, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:21:13] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

