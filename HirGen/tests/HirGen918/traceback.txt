==========mod==========
#[version = "0.0.5"]
def @func_9993() -> Tensor[(55, ?), float32] {
  %0 = @func_6345() /* ty=(Tensor[(55, ?), float32],) */;
  %0.0
}

def @func_5718() -> (Tensor[(5, 1, 15), uint16],) {
  %1 = @func_4471() /* ty=Tensor[(5, 1, 15), uint16] */;
  (%1,)
}

def @func_3729() -> (Tensor[(5, 1, 15), uint16],) {
  %2 = cast(meta[relay.Constant][0] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %3 = cast(meta[relay.Constant][1] /* ty=Tensor[(5, 1, 15), uint16] */, dtype="uint16") /* ty=Tensor[(5, 1, 15), uint16] */;
  %4 = multiply(%2, %3) /* ty=Tensor[(5, 1, 15), uint16] */;
  (%4,)
}

def @func_7921() -> Tensor[(2, 4, 5), float32] {
  %5 = @func_5326() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(2, 4, 5), float32], Tensor[(40), float32], Tensor[(5, 1, 15), uint16], Tensor[(210), uint64]) */;
  %5.1
}

def @func_4250() -> Tensor[(5, 1, 15), uint16] {
  %6 = @func_4213() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %6.0
}

def @func_5852() -> Tensor[(55, ?), float64] {
  %7 = @func_5282() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(210), uint64], Tensor[(55, 1), float64], Tensor[(55), float64]) */;
  %8 = %7.2;
  %9 = cast(%8, dtype="float64") /* ty=Tensor[(55, 1), float64] */;
  %10 = acosh(%9) /* ty=Tensor[(55, 1), float64] */;
  %11 = cast(%8, dtype="uint32") /* ty=Tensor[(55, 1), uint32] */;
  %12 = shape_of(%10, dtype="int32") /* ty=Tensor[(2), int32] */;
  %13 = cast(%10, dtype="uint32") /* ty=Tensor[(55, 1), uint32] */;
  %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %15 = logical_xor(%13, %14) /* ty=Tensor[(55, ?), uint32] */;
  %16 = cast(%15, dtype="float64") /* ty=Tensor[(55, ?), float64] */;
  asin(%16) /* ty=Tensor[(55, ?), float64] */
}

def @func_4213() -> (Tensor[(5, 1, 15), uint16],) {
  %17 = @func_3729() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %18 = %17.0;
  (%18,)
}

def @func_6439() -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64]) {
  %19 = @func_6091() /* ty=(Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) */;
  %20 = %19.1;
  %21 = @func_5947() /* ty=Tensor[(5, 1, 15), float64] */;
  (%20, %21)
}

def @func_14257() -> Tensor[(5, ?, 15), float32] {
  %22 = @func_5749() /* ty=(Tensor[(5, ?, 15), float32],) */;
  %22.0
}

def @func_8841(%var_8833: Tensor[(384, 1), float64], %var_8834: Tensor[(210), uint64]) -> (Tensor[(2, 4, 5), float32], Tensor[(5, 1, 15), uint16], Tensor[(384, 1), float64], Tensor[(210), uint64]) {
  %23 = cast(%var_8833, dtype="float64") /* ty=Tensor[(384, 1), float64] */;
  %24 = cast(%var_8834, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %25 = reshape(%23, newshape=[24, 16]) /* ty=Tensor[(24, 16), float64] */;
  %26 = reshape(%24, newshape=[210]) /* ty=Tensor[(210), uint64] */;
  %27 = @func_6180(%25, %26) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(55), float64], Tensor[(6, 16, 4), uint32], Tensor[(24, 16), float64], Tensor[(210), uint64], Tensor[(5, ?, 15), int32]) */;
  %28 = @func_7921() /* ty=Tensor[(2, 4, 5), float32] */;
  %29 = %27.0;
  (%28, %29, %var_8833, %var_8834)
}

def @func_9957() -> (Tensor[(5, ?, 15), int64],) {
  %30 = @func_9437() /* ty=(Tensor[(5, ?, 15), int64],) */;
  %31 = %30.0;
  (%31,)
}

def @func_9391() -> (Tensor[(5, 1, 15), float64],) {
  %32 = @func_8412() /* ty=(Tensor[(5, 1, 15), float64],) */;
  %33 = %32.0;
  (%33,)
}

def @func_11212() -> Tensor[(16, 3, 16), float32] {
  %34 = @func_9758() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %34.0
}

def @func_6295(%var_6290: Tensor[(55), float64]) -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16], Tensor[(5, 9, 11), float64], Tensor[(55), float64], Tensor[(495), float64]) {
  %35 = cast(%var_6290, dtype="float64") /* ty=Tensor[(55), float64] */;
  %36 = cast(meta[relay.Constant][2] /* ty=Tensor[(495), float64] */, dtype="float64") /* ty=Tensor[(495), float64] */;
  %37 = reshape(%35, newshape=[5, 1, 11]) /* ty=Tensor[(5, 1, 11), float64] */;
  %38 = reshape(%36, newshape=[5, 9, 11]) /* ty=Tensor[(5, 9, 11), float64] */;
  %39 = @func_4471() /* ty=Tensor[(5, 1, 15), uint16] */;
  %40 = @func_4471() /* ty=Tensor[(5, 1, 15), uint16] */;
  %41 = @func_820(%37, %38) /* ty=Tensor[(5, 9, 11), float64] */;
  (%39, %40, %41, %var_6290, meta[relay.Constant][2] /* ty=Tensor[(495), float64] */)
}

def @func_8443() -> (Tensor[(2, 300), uint16], Tensor[(5, ?, 15), int64]) {
  %42 = @func_5196() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(210), uint64], Tensor[(2, 300), uint16], Tensor[(55), float64], Tensor[(10, 5, 12), float64], Tensor[(5, 16, 15), int32]) */;
  %43 = @func_5007() /* ty=(Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) */;
  %44 = %42.2;
  %45 = %43.0;
  (%44, %45)
}

def @func_10886() -> Tensor[(5, ?, 15), int64] {
  @func_10431() /* ty=Tensor[(5, ?, 15), int64] */
}

def @func_8683(%var_8628: Tensor[(10, 3, 1), float64], %var_8629: Tensor[(10, 3, 15), float64]) -> (Tensor[(10, 3, 15), float64], Tensor[(5, ?, 15), int16]) {
  %46 = cast(%var_8628, dtype="float32") /* ty=Tensor[(10, 3, 1), float32] */;
  %47 = erf(%46) /* ty=Tensor[(10, 3, 1), float32] */;
  %48 = cast(%var_8628, dtype="float64") /* ty=Tensor[(10, 3, 1), float64] */;
  %49 = cast(%var_8629, dtype="float64") /* ty=Tensor[(10, 3, 15), float64] */;
  %50 = floor_divide(%48, %49) /* ty=Tensor[(10, 3, 15), float64] */;
  %51 = cast(%47, dtype="float64") /* ty=Tensor[(10, 3, 1), float64] */;
  %52 = cast(%50, dtype="float64") /* ty=Tensor[(10, 3, 15), float64] */;
  %53 = @func_8412() /* ty=(Tensor[(5, 1, 15), float64],) */;
  %54 = %53.0;
  %55 = @func_5007() /* ty=(Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) */;
  %56 = %55.0;
  %57 = cast(%56, dtype="int16") /* ty=Tensor[(5, ?, 15), int16] */;
  %58 = shape_of(%54, dtype="int32") /* ty=Tensor[(3), int32] */;
  %59 = cast(%54, dtype="int16") /* ty=Tensor[(5, 1, 15), int16] */;
  %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %61 = power(%51, %52) /* ty=Tensor[(10, 3, 15), float64] */;
  %62 = bitwise_and(%59, %60) /* ty=Tensor[(5, ?, 15), int16] */;
  (%61, %62)
}

def @func_13838(%var_13800: Tensor[(12, 4, 9), int16], %var_13801: Tensor[(12, 4, 9), int16], %var_13806: Tensor[(1050), uint16], %var_13814: Tensor[(28, 4), uint8]) -> (Tensor[(12, 4, 9), int16], Tensor[(50), uint16], Tensor[(1050), uint16], Tensor[(2, 4, 5), float32], Tensor[(28, 4), uint8], Tensor[(525), float32]) {
  %63 = cast(%var_13801, dtype="int16") /* ty=Tensor[(12, 4, 9), int16] */;
  %64 = shape_of(%var_13800, dtype="int32") /* ty=Tensor[(3), int32] */;
  %65 = cast(%var_13800, dtype="int16") /* ty=Tensor[(12, 4, 9), int16] */;
  %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %67 = cast(%var_13806, dtype="uint16") /* ty=Tensor[(1050), uint16] */;
  %68 = reshape(%67, newshape=[5, 14, 15]) /* ty=Tensor[(5, 14, 15), uint16] */;
  %69 = @func_7294(%68) /* ty=(Tensor[(5, 14, 15), uint8], Tensor[(50), uint16]) */;
  %70 = cast(%var_13814, dtype="uint8") /* ty=Tensor[(28, 4), uint8] */;
  %71 = cast(meta[relay.Constant][3] /* ty=Tensor[(525), float32] */, dtype="float32") /* ty=Tensor[(525), float32] */;
  %72 = cast(meta[relay.Constant][3] /* ty=Tensor[(525), float32] */, dtype="float32") /* ty=Tensor[(525), float32] */;
  %73 = reshape(%70, newshape=[112]) /* ty=Tensor[(112), uint8] */;
  %74 = reshape(%71, newshape=[5, 105]) /* ty=Tensor[(5, 105), float32] */;
  %75 = reshape(%72, newshape=[5, 105]) /* ty=Tensor[(5, 105), float32] */;
  %76 = @func_4529(%73, %74, %75) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(2, 4, 5), float32], Tensor[(112), uint8], Tensor[(5, 105), bool], Tensor[(15, 5, 7), float64], Tensor[(5, 105), float64]) */;
  %77 = minimum(%65, %66) /* ty=Tensor[(12, 4, 9), int16] */;
  %78 = %69.1;
  %79 = %76.1;
  (%77, %78, %var_13806, %79, %var_13814, meta[relay.Constant][3] /* ty=Tensor[(525), float32] */)
}

def @func_4471() -> Tensor[(5, 1, 15), uint16] {
  %80 = @func_3729() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %80.0
}

def @func_10813() -> (Tensor[(5, ?, 15), float32], Tensor[(5, ?, 15), bool]) {
  %81 = @func_5749() /* ty=(Tensor[(5, ?, 15), float32],) */;
  %82 = @func_5651() /* ty=(Tensor[(5, ?, 15), bool], Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64]) */;
  %83 = %81.0;
  %84 = %82.0;
  (%83, %84)
}

def @func_3648(%var_3630: Tensor[(5, 16, 15), int32], %var_3642: Tensor[(210, 1), uint64], %var_3643: Tensor[(600), uint16], %var_3644: Tensor[(55), float64]) -> (Tensor[(5, 16, 15), int32], Tensor[(10, 5), uint16], Tensor[(210, 1), uint64], Tensor[(600), uint16], Tensor[(55), float64]) {
  %85 = cast(%var_3630, dtype="int32") /* ty=Tensor[(5, 16, 15), int32] */;
  %86 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(5, 16, 15), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %87 = cast(meta[relay.Constant][4] /* ty=Tensor[(5, 16, 15), int32] */, dtype="int32") /* ty=Tensor[(5, 16, 15), int32] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %89 = cast(%var_3642, dtype="uint64") /* ty=Tensor[(210, 1), uint64] */;
  %90 = cast(%var_3643, dtype="uint16") /* ty=Tensor[(600), uint16] */;
  %91 = cast(%var_3644, dtype="float64") /* ty=Tensor[(55), float64] */;
  %92 = reshape(%89, newshape=[6, 7, 5]) /* ty=Tensor[(6, 7, 5), uint64] */;
  %93 = reshape(%90, newshape=[600]) /* ty=Tensor[(600), uint16] */;
  %94 = reshape(%91, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %95 = @func_1888(%92, %93, %94) /* ty=(Tensor[(6, 7, 5), uint64], Tensor[(10, 5, 12), uint16], Tensor[(10, 5), uint16], Tensor[(600), uint16], Tensor[(5, 9, 11), float64], Tensor[(55), float64], Tensor[(495), float64]) */;
  %96 = bitwise_xor(%87, %88) /* ty=Tensor[(5, 16, 15), int32] */;
  %97 = %95.2;
  (%96, %97, %var_3642, %var_3643, %var_3644)
}

def @func_4177(%var_4168: Tensor[(55), float64]) -> (Tensor[(5, ?, 15), float32], Tensor[(5, 16, 15), int32], Tensor[(55), float64]) {
  %98 = @func_3921() /* ty=(Tensor[(5, ?, 15), float32],) */;
  %99 = cast(%var_4168, dtype="float64") /* ty=Tensor[(55), float64] */;
  %100 = reshape(%99, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %101 = @func_4139(%100) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 16, 15), int32], Tensor[(4, 300), int32], Tensor[(210), uint64], Tensor[(6, 100), uint16], Tensor[(55), float64]) */;
  %102 = %98.0;
  %103 = %101.1;
  (%102, %103, %var_4168)
}

def @func_8077(%var_8040: bool, %var_8041: Tensor[(3, 1, 11), bool], %var_8048: Tensor[(525), float32]) -> (Tensor[(5, 105), bool], Tensor[(112), uint8], Tensor[(525), float32], Tensor[(55, ?), float64], Tensor[(3, ?, 11), float64]) {
  %104 = cast(meta[relay.Constant][5] /* ty=Tensor[(112), uint8] */, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %105 = cast(%var_8048, dtype="float32") /* ty=Tensor[(525), float32] */;
  %106 = cast(%var_8048, dtype="float32") /* ty=Tensor[(525), float32] */;
  %107 = reshape(%104, newshape=[112]) /* ty=Tensor[(112), uint8] */;
  %108 = reshape(%105, newshape=[5, 105]) /* ty=Tensor[(5, 105), float32] */;
  %109 = reshape(%106, newshape=[5, 105]) /* ty=Tensor[(5, 105), float32] */;
  %110 = @func_4529(%107, %108, %109) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(2, 4, 5), float32], Tensor[(112), uint8], Tensor[(5, 105), bool], Tensor[(15, 5, 7), float64], Tensor[(5, 105), float64]) */;
  %111 = @func_7541() /* ty=(Tensor[(55, ?), float64],) */;
  %112 = cast(%var_8040, dtype="bool") /* ty=bool */;
  %113 = cast(%var_8041, dtype="bool") /* ty=Tensor[(3, 1, 11), bool] */;
  %114 = logical_and(%112, %113) /* ty=Tensor[(3, 1, 11), bool] */;
  %115 = cast(%114, dtype="float64") /* ty=Tensor[(3, 1, 11), float64] */;
  %116 = shape_of(%var_8041, dtype="int32") /* ty=Tensor[(3), int32] */;
  %117 = cast(%var_8041, dtype="float64") /* ty=Tensor[(3, 1, 11), float64] */;
  %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %119 = %110.3;
  %120 = %111.0;
  %121 = floor_divide(%117, %118) /* ty=Tensor[(3, ?, 11), float64] */;
  (%119, meta[relay.Constant][5] /* ty=Tensor[(112), uint8] */, %var_8048, %120, %121)
}

def @func_12467(%var_12423: Tensor[(8, 2, 7), float64]) -> (Tensor[(5, ?, 15), int64], Tensor[(8, 2, 7), int8]) {
  %122 = @func_9957() /* ty=(Tensor[(5, ?, 15), int64],) */;
  %123 = cast(%var_12423, dtype="float64") /* ty=Tensor[(8, 2, 7), float64] */;
  %124 = rsqrt(%123) /* ty=Tensor[(8, 2, 7), float64] */;
  %125 = cast(%124, dtype="float64") /* ty=Tensor[(8, 2, 7), float64] */;
  %126 = cos(%125) /* ty=Tensor[(8, 2, 7), float64] */;
  %127 = cast(%124, dtype="int8") /* ty=Tensor[(8, 2, 7), int8] */;
  %128 = shape_of(%126, dtype="int32") /* ty=Tensor[(3), int32] */;
  %129 = cast(%126, dtype="int8") /* ty=Tensor[(8, 2, 7), int8] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %131 = %122.0;
  %132 = bitwise_xor(%129, %130) /* ty=Tensor[(8, 2, 7), int8] */;
  (%131, %132)
}

def @func_9189() -> (Tensor[(5, 1, 15), float64],) {
  %133 = @func_5947() /* ty=Tensor[(5, 1, 15), float64] */;
  (%133,)
}

def @func_14054() -> Tensor[(5, 1, 15), uint16] {
  %134 = @func_13862() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %134.0
}

def @func_5007() -> (Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) {
  %135 = @func_3729() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %136 = %135.0;
  %137 = cast(%136, dtype="float32") /* ty=Tensor[(5, 1, 15), float32] */;
  %138 = rsqrt(%137) /* ty=Tensor[(5, 1, 15), float32] */;
  %139 = cast(%138, dtype="int64") /* ty=Tensor[(5, 1, 15), int64] */;
  %140 = shape_of(%136, dtype="int32") /* ty=Tensor[(3), int32] */;
  %141 = cast(%136, dtype="int64") /* ty=Tensor[(5, 1, 15), int64] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %143 = bitwise_or(%141, %142) /* ty=Tensor[(5, ?, 15), int64] */;
  %144 = @func_4471() /* ty=Tensor[(5, 1, 15), uint16] */;
  (%143, %144)
}

def @func_12999() -> (Tensor[(5, ?, 15), int64],) {
  %145 = @func_9957() /* ty=(Tensor[(5, ?, 15), int64],) */;
  %146 = %145.0;
  (%146,)
}

def @func_6929() -> Tensor[(5, 1, 15), float64] {
  %147 = @func_6819() /* ty=(Tensor[(14, 1, 7), float32], Tensor[(5, 1, 15), float64], Tensor[(12, 11, 4), float32], Tensor[(12, 50), uint16], Tensor[(1, 525), float32]) */;
  %147.1
}

def @func_5749() -> (Tensor[(5, ?, 15), float32],) {
  %148 = @func_4199() /* ty=(Tensor[(5, ?, 15), float32],) */;
  %149 = %148.0;
  (%149,)
}

def @func_9246() -> (Tensor[(5, ?, 15), float32], Tensor[(5, 14, 15), int64], Tensor[(1, 1050), int64]) {
  %150 = @func_3921() /* ty=(Tensor[(5, ?, 15), float32],) */;
  %151 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 1050), int64] */, dtype="int64") /* ty=Tensor[(1, 1050), int64] */;
  %152 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 1050), int64] */, dtype="int64") /* ty=Tensor[(1, 1050), int64] */;
  %153 = reshape(%151, newshape=[5, 14, 15]) /* ty=Tensor[(5, 14, 15), int64] */;
  %154 = reshape(%152, newshape=[5, 14, 15]) /* ty=Tensor[(5, 14, 15), int64] */;
  %155 = @func_8535(%153, %154) /* ty=(Tensor[(5, 14, 15), int64],) */;
  %156 = %150.0;
  %157 = %155.0;
  (%156, %157, meta[relay.Constant][6] /* ty=Tensor[(1, 1050), int64] */)
}

def @func_8368() -> (Tensor[(5, 1, 15), uint16],) {
  %158 = @func_5718() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %159 = %158.0;
  (%159,)
}

def @func_4868(%var_4848: Tensor[(600), uint16], %var_4849: Tensor[(525), float32], %var_4865: uint8) -> (Tensor[(5, ?, 15), float32], Tensor[(5, 1, 15), uint16], Tensor[(600), uint16], Tensor[(525), float32], Tensor[(14, 8, 1), float32], uint8, Tensor[(2, 56), uint8]) {
  %160 = @func_4199() /* ty=(Tensor[(5, ?, 15), float32],) */;
  %161 = cast(%var_4848, dtype="uint16") /* ty=Tensor[(600), uint16] */;
  %162 = cast(%var_4849, dtype="float32") /* ty=Tensor[(525), float32] */;
  %163 = reshape(%161, newshape=[600]) /* ty=Tensor[(600), uint16] */;
  %164 = reshape(%162, newshape=[525]) /* ty=Tensor[(525), float32] */;
  %165 = @func_4638(%163, %164) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(10, 5, 12), uint16], Tensor[(50), uint16], Tensor[(600), uint16], Tensor[(5, 1, 15), uint16], Tensor[(112), uint8], Tensor[(525), float32], Tensor[(5, 1, 15), uint16]) */;
  %166 = cast(%var_4865, dtype="uint8") /* ty=uint8 */;
  %167 = cast(meta[relay.Constant][7] /* ty=Tensor[(2, 56), uint8] */, dtype="uint8") /* ty=Tensor[(2, 56), uint8] */;
  %168 = cast(%var_4849, dtype="float32") /* ty=Tensor[(525), float32] */;
  %169 = reshape(%166, newshape=[]) /* ty=uint8 */;
  %170 = reshape(%167, newshape=[14, 8, 1]) /* ty=Tensor[(14, 8, 1), uint8] */;
  %171 = reshape(%168, newshape=[525]) /* ty=Tensor[(525), float32] */;
  %172 = @func_746(%169, %170, %171) /* ty=(Tensor[(14, 8, 1), bool], Tensor[(14, 8, 1), float32], Tensor[(2, 4, 5), float32], Tensor[(525), float32], Tensor[(40), float32], Tensor[(2, 4, 5), float32]) */;
  %173 = %160.0;
  %174 = %165.0;
  %175 = %172.1;
  (%173, %174, %var_4848, %var_4849, %175, %var_4865, meta[relay.Constant][7] /* ty=Tensor[(2, 56), uint8] */)
}

def @func_7393() -> Tensor[(55, ?), float64] {
  @func_5852() /* ty=Tensor[(55, ?), float64] */
}

def @func_4139(%var_4129: Tensor[(55), float64]) -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 16, 15), int32], Tensor[(4, 300), int32], Tensor[(210), uint64], Tensor[(6, 100), uint16], Tensor[(55), float64]) {
  %176 = @func_3729() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %177 = cast(meta[relay.Constant][8] /* ty=Tensor[(4, 300), int32] */, dtype="int32") /* ty=Tensor[(4, 300), int32] */;
  %178 = cast(meta[relay.Constant][9] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %179 = cast(meta[relay.Constant][10] /* ty=Tensor[(6, 100), uint16] */, dtype="uint16") /* ty=Tensor[(6, 100), uint16] */;
  %180 = cast(%var_4129, dtype="float64") /* ty=Tensor[(55), float64] */;
  %181 = reshape(%177, newshape=[5, 16, 15]) /* ty=Tensor[(5, 16, 15), int32] */;
  %182 = reshape(%178, newshape=[210, 1]) /* ty=Tensor[(210, 1), uint64] */;
  %183 = reshape(%179, newshape=[600]) /* ty=Tensor[(600), uint16] */;
  %184 = reshape(%180, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %185 = @func_3648(%181, %182, %183, %184) /* ty=(Tensor[(5, 16, 15), int32], Tensor[(10, 5), uint16], Tensor[(210, 1), uint64], Tensor[(600), uint16], Tensor[(55), float64]) */;
  %186 = %176.0;
  %187 = %185.0;
  (%186, %187, meta[relay.Constant][8] /* ty=Tensor[(4, 300), int32] */, meta[relay.Constant][9] /* ty=Tensor[(210), uint64] */, meta[relay.Constant][10] /* ty=Tensor[(6, 100), uint16] */, %var_4129)
}

def @func_6753() -> Tensor[(5, ?, 15), float32] {
  %188 = @func_4199() /* ty=(Tensor[(5, ?, 15), float32],) */;
  %188.0
}

def @func_9665(%var_9553: Tensor[(112), uint8], %var_9565: uint8, %var_9648: Tensor[(55, 8), float64]) -> (Tensor[(6, 100), uint16], Tensor[(2, 300), uint16], Tensor[(112), uint8], Tensor[(55, ?), float32], Tensor[(5, 1, 15), uint16], Tensor[(55, ?), float64], Tensor[(5, 1, 15), uint16], Tensor[(55, 525), float64], Tensor[(55, ?), int16], Tensor[(55, 8), bool], Tensor[(5, ?, 15), float32]) {
  %189 = cast(meta[relay.Constant][11] /* ty=Tensor[(2, 300), uint16] */, dtype="uint16") /* ty=Tensor[(2, 300), uint16] */;
  %190 = cast(%var_9553, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %191 = reshape(%189, newshape=[6, 100]) /* ty=Tensor[(6, 100), uint16] */;
  %192 = reshape(%190, newshape=[56, 2]) /* ty=Tensor[(56, 2), uint8] */;
  %193 = @func_8257(%191, %192) /* ty=(Tensor[(12, 11, 4), float32], Tensor[(600), uint16], Tensor[(6, 100), uint16], uint8, Tensor[(112), uint8], Tensor[(56, 2), uint8], Tensor[(525), float32]) */;
  %194 = @func_8023() /* ty=(Tensor[(55, ?), float64],) */;
  %195 = %194.0;
  %196 = cast(%195, dtype="float32") /* ty=Tensor[(55, ?), float32] */;
  %197 = acos(%196) /* ty=Tensor[(55, ?), float32] */;
  %198 = cast(%197, dtype="float64") /* ty=Tensor[(55, ?), float64] */;
  %199 = sqrt(%198) /* ty=Tensor[(55, ?), float64] */;
  %200 = cast(%199, dtype="float32") /* ty=Tensor[(55, ?), float32] */;
  %201 = cast(%var_9565, dtype="float32") /* ty=float32 */;
  %202 = @func_8368() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %203 = @func_9182() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %204 = %193.2;
  %205 = cast(%204, dtype="uint16") /* ty=Tensor[(6, 100), uint16] */;
  %206 = cast(%var_9565, dtype="uint8") /* ty=uint8 */;
  %207 = reshape(%205, newshape=[600]) /* ty=Tensor[(600), uint16] */;
  %208 = reshape(%206, newshape=[]) /* ty=uint8 */;
  %209 = @func_7011(%207, %208) /* ty=(Tensor[(50), uint16], uint8, Tensor[(600), uint16], Tensor[(525), float32], uint8) */;
  %210 = %209.3;
  %211 = cast(%199, dtype="float64") /* ty=Tensor[(55, ?), float64] */;
  %212 = cast(%210, dtype="float64") /* ty=Tensor[(525), float64] */;
  %213 = floor_divide(%211, %212) /* ty=Tensor[(55, 525), float64] */;
  %214 = cast(%213, dtype="float32") /* ty=Tensor[(55, 525), float32] */;
  %215 = log2(%214) /* ty=Tensor[(55, 525), float32] */;
  %216 = cast(%215, dtype="float64") /* ty=Tensor[(55, 525), float64] */;
  %217 = cast(%195, dtype="bool") /* ty=Tensor[(55, ?), bool] */;
  %218 = shape_of(%197, dtype="int32") /* ty=Tensor[(2), int32] */;
  %219 = cast(%197, dtype="bool") /* ty=Tensor[(55, ?), bool] */;
  %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %221 = logical_and(%219, %220) /* ty=Tensor[(55, ?), bool] */;
  %222 = cast(%221, dtype="float64") /* ty=Tensor[(55, ?), float64] */;
  %223 = shape_of(%199, dtype="int32") /* ty=Tensor[(2), int32] */;
  %224 = cast(%199, dtype="float64") /* ty=Tensor[(55, ?), float64] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %226 = divide(%224, %225) /* ty=Tensor[(55, ?), float64] */;
  %227 = cast(%221, dtype="int16") /* ty=Tensor[(55, ?), int16] */;
  %228 = shape_of(%226, dtype="int32") /* ty=Tensor[(2), int32] */;
  %229 = cast(%226, dtype="int16") /* ty=Tensor[(55, ?), int16] */;
  %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %231 = cast(%226, dtype="bool") /* ty=Tensor[(55, ?), bool] */;
  %232 = cast(%var_9648, dtype="bool") /* ty=Tensor[(55, 8), bool] */;
  %233 = @func_3921() /* ty=(Tensor[(5, ?, 15), float32],) */;
  %234 = minimum(%200, %201) /* ty=Tensor[(55, ?), float32] */;
  %235 = %202.0;
  %236 = @func_5852() /* ty=Tensor[(55, ?), float64] */;
  %237 = %203.0;
  %238 = rsqrt(%216) /* ty=Tensor[(55, 525), float64] */;
  %239 = subtract(%229, %230) /* ty=Tensor[(55, ?), int16] */;
  %240 = not_equal(%231, %232) /* ty=Tensor[(55, 8), bool] */;
  %241 = %233.0;
  (%204, meta[relay.Constant][11] /* ty=Tensor[(2, 300), uint16] */, %var_9553, %234, %235, %236, %237, %238, %239, %240, %241)
}

def @func_7011(%var_6998: Tensor[(600), uint16], %var_7000: uint8) -> (Tensor[(50), uint16], uint8, Tensor[(600), uint16], Tensor[(525), float32], uint8) {
  %242 = @func_6498() /* ty=(Tensor[(5, ?, 15), float32], Tensor[(5, 1, 15), float64], Tensor[(10, 5, 12), uint16], Tensor[(50), uint16], Tensor[(1, 600), uint16]) */;
  %243 = cast(%var_6998, dtype="uint16") /* ty=Tensor[(600), uint16] */;
  %244 = cast(meta[relay.Constant][12] /* ty=Tensor[(525), float32] */, dtype="float32") /* ty=Tensor[(525), float32] */;
  %245 = cast(%var_7000, dtype="uint8") /* ty=uint8 */;
  %246 = reshape(%243, newshape=[600]) /* ty=Tensor[(600), uint16] */;
  %247 = reshape(%244, newshape=[525]) /* ty=Tensor[(525), float32] */;
  %248 = reshape(%245, newshape=[]) /* ty=uint8 */;
  %249 = @func_4868(%246, %247, %248) /* ty=(Tensor[(5, ?, 15), float32], Tensor[(5, 1, 15), uint16], Tensor[(600), uint16], Tensor[(525), float32], Tensor[(14, 8, 1), float32], uint8, Tensor[(2, 56), uint8]) */;
  %250 = %242.3;
  %251 = %249.5;
  (%250, %251, %var_6998, meta[relay.Constant][12] /* ty=Tensor[(525), float32] */, %var_7000)
}

def @func_14203() -> (Tensor[(5, 1, 15), uint16],) {
  %252 = @func_13947() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %253 = %252.0;
  (%253,)
}

def @func_7721() -> (Tensor[(5, ?, 15), float32],) {
  %254 = @func_6498() /* ty=(Tensor[(5, ?, 15), float32], Tensor[(5, 1, 15), float64], Tensor[(10, 5, 12), uint16], Tensor[(50), uint16], Tensor[(1, 600), uint16]) */;
  %255 = %254.0;
  (%255,)
}

def @func_5569() -> Tensor[(12, 11, 4), float32] {
  %256 = cast(meta[relay.Constant][13] /* ty=Tensor[(12, 11, 4), float32] */, dtype="float32") /* ty=Tensor[(12, 11, 4), float32] */;
  sigmoid(%256) /* ty=Tensor[(12, 11, 4), float32] */
}

def @func_9936(%var_9886: Tensor[(525), float32], %var_9887: Tensor[(40, 1), float32], %var_9918: Tensor[(40, 4), float64], %var_9923: Tensor[(384, 1), float64]) -> (Tensor[(55, ?), float64], Tensor[(40), float32], Tensor[(40, 525), int16], Tensor[(40, 4), int8], Tensor[(300, 2), uint16], Tensor[(384, 1), float64], Tensor[(210), uint64], Tensor[(210), uint64]) {
  %257 = cast(%var_9886, dtype="float32") /* ty=Tensor[(525), float32] */;
  %258 = cast(%var_9887, dtype="float32") /* ty=Tensor[(40, 1), float32] */;
  %259 = reshape(%257, newshape=[15, 5, 7]) /* ty=Tensor[(15, 5, 7), float32] */;
  %260 = reshape(%258, newshape=[40]) /* ty=Tensor[(40), float32] */;
  %261 = @func_561(%259, %260) /* ty=(Tensor[(15, 5, 7), float64], Tensor[(2, 4, 5), float32], Tensor[(40), float32]) */;
  %262 = cast(%var_9887, dtype="float64") /* ty=Tensor[(40, 1), float64] */;
  %263 = cosh(%262) /* ty=Tensor[(40, 1), float64] */;
  %264 = cast(%263, dtype="int16") /* ty=Tensor[(40, 1), int16] */;
  %265 = cast(%var_9886, dtype="int16") /* ty=Tensor[(525), int16] */;
  %266 = cast(%263, dtype="int8") /* ty=Tensor[(40, 1), int8] */;
  %267 = cast(%var_9918, dtype="int8") /* ty=Tensor[(40, 4), int8] */;
  %268 = cast(%var_9923, dtype="float64") /* ty=Tensor[(384, 1), float64] */;
  %269 = cast(%var_9923, dtype="float64") /* ty=Tensor[(384, 1), float64] */;
  %270 = cast(meta[relay.Constant][14] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %271 = reshape(%268, newshape=[6, 16, 4]) /* ty=Tensor[(6, 16, 4), float64] */;
  %272 = reshape(%269, newshape=[6, 16, 4]) /* ty=Tensor[(6, 16, 4), float64] */;
  %273 = reshape(%270, newshape=[210]) /* ty=Tensor[(210), uint64] */;
  %274 = @func_4793(%271, %272, %273) /* ty=(Tensor[(6, 16, 4), float64], Tensor[(6, 16, 4), uint32], Tensor[(495), float64], Tensor[(300, 2), uint16], Tensor[(55, 210), float32], Tensor[(6, 16, 4), bool]) */;
  %275 = cast(%var_9923, dtype="float64") /* ty=Tensor[(384, 1), float64] */;
  %276 = cast(meta[relay.Constant][14] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %277 = reshape(%275, newshape=[24, 16]) /* ty=Tensor[(24, 16), float64] */;
  %278 = reshape(%276, newshape=[210]) /* ty=Tensor[(210), uint64] */;
  %279 = @func_6180(%277, %278) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(55), float64], Tensor[(6, 16, 4), uint32], Tensor[(24, 16), float64], Tensor[(210), uint64], Tensor[(5, ?, 15), int32]) */;
  %280 = @func_6949() /* ty=Tensor[(55, ?), float64] */;
  %281 = %261.2;
  %282 = subtract(%264, %265) /* ty=Tensor[(40, 525), int16] */;
  %283 = bitwise_and(%266, %267) /* ty=Tensor[(40, 4), int8] */;
  %284 = %274.3;
  %285 = %279.4;
  (%280, %281, %282, %283, %284, %var_9923, meta[relay.Constant][14] /* ty=Tensor[(210), uint64] */, %285)
}

def @func_7793(%var_7768: Tensor[(320), float64]) -> (Tensor[(5, ?, 15), float32], Tensor[(2, 16, 10), float64], Tensor[(320), float64], Tensor[(5, 1, 15), uint16]) {
  %286 = @func_7721() /* ty=(Tensor[(5, ?, 15), float32],) */;
  %287 = cast(%var_7768, dtype="float64") /* ty=Tensor[(320), float64] */;
  %288 = reshape(%287, newshape=[2, 16, 10]) /* ty=Tensor[(2, 16, 10), float64] */;
  %289 = @func_4691(%288) /* ty=(Tensor[(2, 16, 10), float64],) */;
  %290 = @func_5651() /* ty=(Tensor[(5, ?, 15), bool], Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64]) */;
  %291 = %286.0;
  %292 = %289.0;
  %293 = %290.1;
  (%291, %292, %var_7768, %293)
}

def @func_5326() -> (Tensor[(5, 1, 15), uint16], Tensor[(2, 4, 5), float32], Tensor[(40), float32], Tensor[(5, 1, 15), uint16], Tensor[(210), uint64]) {
  %294 = cast(meta[relay.Constant][15] /* ty=Tensor[(40), float32] */, dtype="float32") /* ty=Tensor[(40), float32] */;
  %295 = reshape(%294, newshape=[2, 4, 5]) /* ty=Tensor[(2, 4, 5), float32] */;
  %296 = @func_5282() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(210), uint64], Tensor[(55, 1), float64], Tensor[(55), float64]) */;
  %297 = @func_5282() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(210), uint64], Tensor[(55, 1), float64], Tensor[(55), float64]) */;
  %298 = @func_3819() /* ty=Tensor[(5, 1, 15), uint16] */;
  %299 = @func_151(%295) /* ty=Tensor[(2, 4, 5), float32] */;
  %300 = %296.0;
  %301 = %297.1;
  (%298, %299, meta[relay.Constant][15] /* ty=Tensor[(40), float32] */, %300, %301)
}

def @func_5947() -> Tensor[(5, 1, 15), float64] {
  %302 = @func_4650() /* ty=Tensor[(5, 1, 15), uint16] */;
  %303 = cast(%302, dtype="float64") /* ty=Tensor[(5, 1, 15), float64] */;
  atan(%303) /* ty=Tensor[(5, 1, 15), float64] */
}

def @func_4951() -> Tensor[(5, 1, 15), uint16] {
  %304 = @func_3729() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %304.0
}

def @func_10356(%var_10334: Tensor[(600), uint16], %var_10335: Tensor[(112), uint8]) -> (Tensor[(210), uint64], Tensor[(5, 1, 15), uint16], uint8, Tensor[(600), uint16], Tensor[(112), uint8], Tensor[(5, 1, 15), uint16]) {
  %305 = @func_5326() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(2, 4, 5), float32], Tensor[(40), float32], Tensor[(5, 1, 15), uint16], Tensor[(210), uint64]) */;
  %306 = @func_5718() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %307 = cast(%var_10334, dtype="uint16") /* ty=Tensor[(600), uint16] */;
  %308 = cast(%var_10335, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %309 = reshape(%307, newshape=[600]) /* ty=Tensor[(600), uint16] */;
  %310 = reshape(%308, newshape=[1, 112]) /* ty=Tensor[(1, 112), uint8] */;
  %311 = @func_9848(%309, %310) /* ty=(Tensor[(5, 1, 15), float64], Tensor[(55, ?), float32], uint8, Tensor[(600), uint16], Tensor[(1, 112), uint8]) */;
  %312 = %305.4;
  %313 = %306.0;
  %314 = %311.2;
  %315 = @func_3819() /* ty=Tensor[(5, 1, 15), uint16] */;
  (%312, %313, %314, %var_10334, %var_10335, %315)
}

def @func_10431() -> Tensor[(5, ?, 15), int64] {
  %316 = @func_8443() /* ty=(Tensor[(2, 300), uint16], Tensor[(5, ?, 15), int64]) */;
  %316.1
}

def @func_10018() -> Tensor[(10, 5, 12), float64] {
  %317 = @func_5196() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(210), uint64], Tensor[(2, 300), uint16], Tensor[(55), float64], Tensor[(10, 5, 12), float64], Tensor[(5, 16, 15), int32]) */;
  %317.4
}

def @func_13333(%var_13316: Tensor[(10, 5, 12), float64]) -> (Tensor[(5, ?, 15), int64], Tensor[(10, 5, 12), int32]) {
  %318 = @func_8443() /* ty=(Tensor[(2, 300), uint16], Tensor[(5, ?, 15), int64]) */;
  %319 = @func_13174() /* ty=(Tensor[(10, 5, 12), float64], Tensor[(16, 3, 16), float32]) */;
  %320 = %319.0;
  %321 = cast(%var_13316, dtype="int32") /* ty=Tensor[(10, 5, 12), int32] */;
  %322 = shape_of(%320, dtype="int32") /* ty=Tensor[(3), int32] */;
  %323 = cast(%320, dtype="int32") /* ty=Tensor[(10, 5, 12), int32] */;
  %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %325 = %318.1;
  %326 = left_shift(%323, %324) /* ty=Tensor[(10, 5, 12), int32] */;
  (%325, %326)
}

def @func_14115() -> (Tensor[(5, ?, 15), int64], Tensor[(5, 16, 7), float64], Tensor[(560, 1), float64]) {
  %327 = @func_9957() /* ty=(Tensor[(5, ?, 15), int64],) */;
  %328 = cast(meta[relay.Constant][16] /* ty=Tensor[(560, 1), float64] */, dtype="float64") /* ty=Tensor[(560, 1), float64] */;
  %329 = reshape(%328, newshape=[5, 16, 7]) /* ty=Tensor[(5, 16, 7), float64] */;
  %330 = @func_11184(%329) /* ty=(Tensor[(5, 16, 7), float64],) */;
  %331 = %327.0;
  %332 = %330.0;
  (%331, %332, meta[relay.Constant][16] /* ty=Tensor[(560, 1), float64] */)
}

def @func_9758() -> (Tensor[(16, 3, 16), float32],) {
  %333 = cast(meta[relay.Constant][17] /* ty=Tensor[(16, 3, 16), float32] */, dtype="float32") /* ty=Tensor[(16, 3, 16), float32] */;
  %334 = exp(%333) /* ty=Tensor[(16, 3, 16), float32] */;
  (%334,)
}

def @func_13782(%var_13737: Tensor[(1200), int32], %var_13738: Tensor[(105, 2), uint64], %var_13740: Tensor[(11, 5), float64], %var_13765: Tensor[(4, 1050), int64]) -> (Tensor[(600), uint16], Tensor[(1200), int32], Tensor[(105, 2), uint64], Tensor[(600), uint16], Tensor[(11, 5), float64], Tensor[(5, 1, 15), uint16], Tensor[(12, 11, 4), float32], Tensor[(5, 1, 15), uint16], Tensor[(4, 1050), bool], Tensor[(600), uint16]) {
  %335 = cast(%var_13737, dtype="int32") /* ty=Tensor[(1200), int32] */;
  %336 = cast(%var_13738, dtype="uint64") /* ty=Tensor[(105, 2), uint64] */;
  %337 = cast(meta[relay.Constant][18] /* ty=Tensor[(600), uint16] */, dtype="uint16") /* ty=Tensor[(600), uint16] */;
  %338 = cast(%var_13740, dtype="float64") /* ty=Tensor[(11, 5), float64] */;
  %339 = reshape(%335, newshape=[5, 16, 15]) /* ty=Tensor[(5, 16, 15), int32] */;
  %340 = reshape(%336, newshape=[210, 1]) /* ty=Tensor[(210, 1), uint64] */;
  %341 = reshape(%337, newshape=[600]) /* ty=Tensor[(600), uint16] */;
  %342 = reshape(%338, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %343 = @func_3648(%339, %340, %341, %342) /* ty=(Tensor[(5, 16, 15), int32], Tensor[(10, 5), uint16], Tensor[(210, 1), uint64], Tensor[(600), uint16], Tensor[(55), float64]) */;
  %344 = @func_8368() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %345 = @func_7209() /* ty=(Tensor[(12, 11, 4), float32],) */;
  %346 = @func_10972() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %347 = @func_9246() /* ty=(Tensor[(5, ?, 15), float32], Tensor[(5, 14, 15), int64], Tensor[(1, 1050), int64]) */;
  %348 = %347.2;
  %349 = cast(%348, dtype="bool") /* ty=Tensor[(1, 1050), bool] */;
  %350 = cast(%var_13765, dtype="bool") /* ty=Tensor[(4, 1050), bool] */;
  %351 = @func_8289() /* ty=(Tensor[(600), uint16],) */;
  %352 = %343.3;
  %353 = %344.0;
  %354 = %345.0;
  %355 = %346.0;
  %356 = not_equal(%349, %350) /* ty=Tensor[(4, 1050), bool] */;
  %357 = %351.0;
  (%352, %var_13737, %var_13738, meta[relay.Constant][18] /* ty=Tensor[(600), uint16] */, %var_13740, %353, %354, %355, %356, %357)
}

def @func_9792(%var_9782: Tensor[(1, 525), float32]) -> (Tensor[(210), uint64], Tensor[(2, 4, 5), float32], bool, Tensor[(33), bool], Tensor[(1, 525), float32], Tensor[(5, 105), float64]) {
  %358 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %359 = cast(meta[relay.Constant][19] /* ty=Tensor[(33), bool] */, dtype="bool") /* ty=Tensor[(33), bool] */;
  %360 = cast(%var_9782, dtype="float32") /* ty=Tensor[(1, 525), float32] */;
  %361 = reshape(%358, newshape=[]) /* ty=bool */;
  %362 = reshape(%359, newshape=[3, 1, 11]) /* ty=Tensor[(3, 1, 11), bool] */;
  %363 = reshape(%360, newshape=[525]) /* ty=Tensor[(525), float32] */;
  %364 = @func_8077(%361, %362, %363) /* ty=(Tensor[(5, 105), bool], Tensor[(112), uint8], Tensor[(525), float32], Tensor[(55, ?), float64], Tensor[(3, ?, 11), float64]) */;
  %365 = %364.0;
  %366 = cast(%365, dtype="float64") /* ty=Tensor[(5, 105), float64] */;
  %367 = @func_7712() /* ty=Tensor[(210), uint64] */;
  %368 = @func_7921() /* ty=Tensor[(2, 4, 5), float32] */;
  %369 = sin(%366) /* ty=Tensor[(5, 105), float64] */;
  (%367, %368, False /* ty=bool */, meta[relay.Constant][19] /* ty=Tensor[(33), bool] */, %var_9782, %369)
}

def @func_12610() -> Tensor[(5, 1, 15), float64] {
  %370 = @func_8132() /* ty=(Tensor[(5, 1, 15), float64],) */;
  %370.0
}

def @func_7162(%var_7152: Tensor[(525), float32]) -> (Tensor[(5, 1, 15), uint16], Tensor[(12, 50), uint16], Tensor[(525), float32]) {
  %371 = @func_6439() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64]) */;
  %372 = cast(%var_7152, dtype="float32") /* ty=Tensor[(525), float32] */;
  %373 = reshape(%372, newshape=[525]) /* ty=Tensor[(525), float32] */;
  %374 = @func_6561(%373) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(525), float32], Tensor[(12, 50), uint16], Tensor[(525), float32], uint8) */;
  %375 = %371.0;
  %376 = %374.2;
  (%375, %376, %var_7152)
}

def @func_5282() -> (Tensor[(5, 1, 15), uint16], Tensor[(210), uint64], Tensor[(55, 1), float64], Tensor[(55), float64]) {
  %377 = @func_5196() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(210), uint64], Tensor[(2, 300), uint16], Tensor[(55), float64], Tensor[(10, 5, 12), float64], Tensor[(5, 16, 15), int32]) */;
  %378 = cast(meta[relay.Constant][20] /* ty=Tensor[(55, 1), float64] */, dtype="float64") /* ty=Tensor[(55, 1), float64] */;
  %379 = reshape(%378, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %380 = @func_4139(%379) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 16, 15), int32], Tensor[(4, 300), int32], Tensor[(210), uint64], Tensor[(6, 100), uint16], Tensor[(55), float64]) */;
  %381 = cast(meta[relay.Constant][20] /* ty=Tensor[(55, 1), float64] */, dtype="float64") /* ty=Tensor[(55, 1), float64] */;
  %382 = reshape(%381, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %383 = @func_5246(%382) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, ?, 15), float32], Tensor[(55), float64]) */;
  %384 = %377.0;
  %385 = %380.3;
  %386 = %383.2;
  (%384, %385, meta[relay.Constant][20] /* ty=Tensor[(55, 1), float64] */, %386)
}

def @func_11120() -> (Tensor[(525), float32],) {
  %387 = @func_5352() /* ty=(Tensor[(55), float64], Tensor[(525), float32], Tensor[(600), uint16], Tensor[(525), float32], uint8, Tensor[(50), uint16]) */;
  %388 = %387.1;
  %389 = cast(%388, dtype="float32") /* ty=Tensor[(525), float32] */;
  %390 = acos(%389) /* ty=Tensor[(525), float32] */;
  (%390,)
}

def @func_852(%var_844: Tensor[(10, 5, 1), uint16], %var_845: Tensor[(10, 5, 12), uint16]) -> Tensor[(10, 5, 12), uint16] {
  %391 = cast(%var_844, dtype="uint16") /* ty=Tensor[(10, 5, 1), uint16] */;
  %392 = cast(%var_845, dtype="uint16") /* ty=Tensor[(10, 5, 12), uint16] */;
  right_shift(%391, %392) /* ty=Tensor[(10, 5, 12), uint16] */
}

def @func_13702() -> (Tensor[(40), float32], Tensor[(1, 600), uint16]) {
  %393 = @func_6498() /* ty=(Tensor[(5, ?, 15), float32], Tensor[(5, 1, 15), float64], Tensor[(10, 5, 12), uint16], Tensor[(50), uint16], Tensor[(1, 600), uint16]) */;
  %394 = @func_11329() /* ty=Tensor[(40), float32] */;
  %395 = %393.4;
  (%394, %395)
}

def @func_4793(%var_4730: Tensor[(6, 16, 4), float64], %var_4736: Tensor[(6, 16, 4), float64], %var_4756: Tensor[(210), uint64]) -> (Tensor[(6, 16, 4), float64], Tensor[(6, 16, 4), uint32], Tensor[(495), float64], Tensor[(300, 2), uint16], Tensor[(55, 210), float32], Tensor[(6, 16, 4), bool]) {
  %396 = cast(meta[relay.Constant][21] /* ty=Tensor[(6, 16, 4), float64] */, dtype="float64") /* ty=Tensor[(6, 16, 4), float64] */;
  %397 = shape_of(%var_4730, dtype="int32") /* ty=Tensor[(3), int32] */;
  %398 = cast(%var_4730, dtype="float64") /* ty=Tensor[(6, 16, 4), float64] */;
  %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %400 = cast(%var_4736, dtype="uint32") /* ty=Tensor[(6, 16, 4), uint32] */;
  %401 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(6, 16, 4), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %402 = cast(meta[relay.Constant][21] /* ty=Tensor[(6, 16, 4), float64] */, dtype="uint32") /* ty=Tensor[(6, 16, 4), uint32] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %404 = cast(%var_4756, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %405 = cast(meta[relay.Constant][22] /* ty=Tensor[(300, 2), uint16] */, dtype="uint16") /* ty=Tensor[(300, 2), uint16] */;
  %406 = cast(meta[relay.Constant][23] /* ty=Tensor[(55, 1), float64] */, dtype="float64") /* ty=Tensor[(55, 1), float64] */;
  %407 = reshape(%404, newshape=[6, 7, 5]) /* ty=Tensor[(6, 7, 5), uint64] */;
  %408 = reshape(%405, newshape=[600]) /* ty=Tensor[(600), uint16] */;
  %409 = reshape(%406, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %410 = @func_1888(%407, %408, %409) /* ty=(Tensor[(6, 7, 5), uint64], Tensor[(10, 5, 12), uint16], Tensor[(10, 5), uint16], Tensor[(600), uint16], Tensor[(5, 9, 11), float64], Tensor[(55), float64], Tensor[(495), float64]) */;
  %411 = cast(meta[relay.Constant][23] /* ty=Tensor[(55, 1), float64] */, dtype="float32") /* ty=Tensor[(55, 1), float32] */;
  %412 = cast(%var_4756, dtype="float32") /* ty=Tensor[(210), float32] */;
  %413 = cast(%var_4730, dtype="float64") /* ty=Tensor[(6, 16, 4), float64] */;
  %414 = rsqrt(%413) /* ty=Tensor[(6, 16, 4), float64] */;
  %415 = cast(%var_4730, dtype="bool") /* ty=Tensor[(6, 16, 4), bool] */;
  %416 = shape_of(%414, dtype="int32") /* ty=Tensor[(3), int32] */;
  %417 = cast(%414, dtype="bool") /* ty=Tensor[(6, 16, 4), bool] */;
  %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %419 = floor_divide(%398, %399) /* ty=Tensor[(6, 16, 4), float64] */;
  %420 = subtract(%402, %403) /* ty=Tensor[(6, 16, 4), uint32] */;
  %421 = %410.6;
  %422 = power(%411, %412) /* ty=Tensor[(55, 210), float32] */;
  %423 = greater(%417, %418) /* ty=Tensor[(6, 16, 4), bool] */;
  (%419, %420, %421, meta[relay.Constant][22] /* ty=Tensor[(300, 2), uint16] */, %422, %423)
}

def @func_12277() -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64], Tensor[(5, 1, 15), uint16], Tensor[(55, ?), float64]) {
  %424 = @func_8412() /* ty=(Tensor[(5, 1, 15), float64],) */;
  %425 = @func_5718() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %426 = @func_9149() /* ty=(Tensor[(55, ?), float64], Tensor[(5, 1, 15), float64]) */;
  %427 = @func_11495() /* ty=Tensor[(5, 1, 15), uint16] */;
  %428 = %424.0;
  %429 = %425.0;
  %430 = %426.0;
  (%427, %428, %429, %430)
}

def @func_12510() -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16]) {
  %431 = @func_4471() /* ty=Tensor[(5, 1, 15), uint16] */;
  %432 = @func_10238() /* ty=Tensor[(5, 1, 15), uint16] */;
  (%431, %432)
}

def @func_7952() -> (Tensor[(12, 11, 1), float32],) {
  %433 = cast(meta[relay.Constant][24] /* ty=Tensor[(12, 11, 1), float32] */, dtype="float32") /* ty=Tensor[(12, 11, 1), float32] */;
  %434 = cosh(%433) /* ty=Tensor[(12, 11, 1), float32] */;
  (%434,)
}

def @func_11133() -> (Tensor[(5, 1, 15), uint16],) {
  %435 = @func_10070() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %436 = %435.0;
  (%436,)
}

def @func_8976(%var_8947: Tensor[(55, 9), float32]) -> (Tensor[(55, ?), float64], Tensor[(55), float64], Tensor[(40), float32], Tensor[(55, 9), float64]) {
  %437 = @func_6345() /* ty=(Tensor[(55, ?), float32],) */;
  %438 = %437.0;
  %439 = cast(%438, dtype="float64") /* ty=Tensor[(55, ?), float64] */;
  %440 = sin(%439) /* ty=Tensor[(55, ?), float64] */;
  %441 = cast(%440, dtype="int8") /* ty=Tensor[(55, ?), int8] */;
  %442 = shape_of(%438, dtype="int32") /* ty=Tensor[(2), int32] */;
  %443 = cast(%438, dtype="int8") /* ty=Tensor[(55, ?), int8] */;
  %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %445 = left_shift(%443, %444) /* ty=Tensor[(55, ?), int8] */;
  %446 = cast(%440, dtype="float64") /* ty=Tensor[(55, ?), float64] */;
  %447 = shape_of(%445, dtype="int32") /* ty=Tensor[(2), int32] */;
  %448 = cast(%445, dtype="float64") /* ty=Tensor[(55, ?), float64] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %450 = cast(%445, dtype="float64") /* ty=Tensor[(55, ?), float64] */;
  %451 = cast(meta[relay.Constant][25] /* ty=Tensor[(40), float32] */, dtype="float32") /* ty=Tensor[(40), float32] */;
  %452 = reshape(%450, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %453 = reshape(%451, newshape=[40]) /* ty=Tensor[(40), float32] */;
  %454 = @func_4337(%452, %453) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 9, 11), float64], Tensor[(55), float64], Tensor[(495), float64], Tensor[(40), float32], Tensor[(40), float32], Tensor[(5, 1, 15), uint16]) */;
  %455 = cast(%438, dtype="float32") /* ty=Tensor[(55, ?), float32] */;
  %456 = cast(%var_8947, dtype="float32") /* ty=Tensor[(55, 9), float32] */;
  %457 = divide(%455, %456) /* ty=Tensor[(55, 9), float32] */;
  %458 = cast(%445, dtype="float64") /* ty=Tensor[(55, ?), float64] */;
  %459 = cast(%457, dtype="float64") /* ty=Tensor[(55, 9), float64] */;
  %460 = floor_mod(%448, %449) /* ty=Tensor[(55, ?), float64] */;
  %461 = %454.2;
  %462 = power(%458, %459) /* ty=Tensor[(55, 9), float64] */;
  (%460, %461, meta[relay.Constant][25] /* ty=Tensor[(40), float32] */, %462)
}

def @func_10972() -> (Tensor[(5, 1, 15), uint16],) {
  %463 = @func_5007() /* ty=(Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) */;
  %464 = %463.1;
  (%464,)
}

def @func_11708() -> (Tensor[(2, 4, 5), float32],) {
  %465 = @func_9820() /* ty=Tensor[(2, 4, 5), float32] */;
  (%465,)
}

def @func_151(%var_147: Tensor[(2, 4, 5), float32]) -> Tensor[(2, 4, 5), float32] {
  %466 = cast(%var_147, dtype="float32") /* ty=Tensor[(2, 4, 5), float32] */;
  cosh(%466) /* ty=Tensor[(2, 4, 5), float32] */
}

def @func_11108() -> Tensor[(5, 1, 15), uint16] {
  %467 = @func_8368() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %467.0
}

def @func_9149() -> (Tensor[(55, ?), float64], Tensor[(5, 1, 15), float64]) {
  %468 = @func_7541() /* ty=(Tensor[(55, ?), float64],) */;
  %469 = %468.0;
  %470 = @func_5947() /* ty=Tensor[(5, 1, 15), float64] */;
  (%469, %470)
}

def @func_10191() -> (Tensor[(5, ?, 15), int64],) {
  %471 = @func_5007() /* ty=(Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) */;
  %472 = %471.0;
  (%472,)
}

def @func_4337(%var_4298: Tensor[(55), float64], %var_4302: Tensor[(40), float32]) -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 9, 11), float64], Tensor[(55), float64], Tensor[(495), float64], Tensor[(40), float32], Tensor[(40), float32], Tensor[(5, 1, 15), uint16]) {
  %473 = @func_4213() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %474 = cast(%var_4298, dtype="float64") /* ty=Tensor[(55), float64] */;
  %475 = cast(meta[relay.Constant][26] /* ty=Tensor[(495), float64] */, dtype="float64") /* ty=Tensor[(495), float64] */;
  %476 = reshape(%474, newshape=[5, 1, 11]) /* ty=Tensor[(5, 1, 11), float64] */;
  %477 = reshape(%475, newshape=[5, 9, 11]) /* ty=Tensor[(5, 9, 11), float64] */;
  %478 = cast(%var_4302, dtype="float32") /* ty=Tensor[(40), float32] */;
  %479 = reshape(%478, newshape=[40]) /* ty=Tensor[(40), float32] */;
  %480 = @func_4020(%479) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(40), float32], Tensor[(35, 15), float32], Tensor[(40), float32]) */;
  %481 = cast(%var_4298, dtype="float64") /* ty=Tensor[(55), float64] */;
  %482 = reshape(%481, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %483 = @func_4139(%482) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 16, 15), int32], Tensor[(4, 300), int32], Tensor[(210), uint64], Tensor[(6, 100), uint16], Tensor[(55), float64]) */;
  %484 = %473.0;
  %485 = @func_820(%476, %477) /* ty=Tensor[(5, 9, 11), float64] */;
  %486 = %480.1;
  %487 = %483.0;
  (%484, %485, %var_4298, meta[relay.Constant][26] /* ty=Tensor[(495), float64] */, %486, %var_4302, %487)
}

def @func_5534(%var_5522: Tensor[(55), float64]) -> (Tensor[(10, 5, 12), float64], Tensor[(495), float64], Tensor[(55), float64], Tensor[(40), float32]) {
  %488 = @func_5196() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(210), uint64], Tensor[(2, 300), uint16], Tensor[(55), float64], Tensor[(10, 5, 12), float64], Tensor[(5, 16, 15), int32]) */;
  %489 = cast(%var_5522, dtype="float64") /* ty=Tensor[(55), float64] */;
  %490 = cast(meta[relay.Constant][27] /* ty=Tensor[(40), float32] */, dtype="float32") /* ty=Tensor[(40), float32] */;
  %491 = reshape(%489, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %492 = reshape(%490, newshape=[40]) /* ty=Tensor[(40), float32] */;
  %493 = @func_4337(%491, %492) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 9, 11), float64], Tensor[(55), float64], Tensor[(495), float64], Tensor[(40), float32], Tensor[(40), float32], Tensor[(5, 1, 15), uint16]) */;
  %494 = %488.4;
  %495 = %493.3;
  (%494, %495, %var_5522, meta[relay.Constant][27] /* ty=Tensor[(40), float32] */)
}

def @func_6381(%var_6352: Tensor[(5, 7, 15), int64]) -> (Tensor[(5, 7, 15), bool], Tensor[(5, ?, 15), int16]) {
  %496 = @func_6091() /* ty=(Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) */;
  %497 = %496.0;
  %498 = cast(%497, dtype="bool") /* ty=Tensor[(5, ?, 15), bool] */;
  %499 = cast(%var_6352, dtype="bool") /* ty=Tensor[(5, 7, 15), bool] */;
  %500 = @func_4951() /* ty=Tensor[(5, 1, 15), uint16] */;
  %501 = cast(%497, dtype="int16") /* ty=Tensor[(5, ?, 15), int16] */;
  %502 = shape_of(%500, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(%500, dtype="int16") /* ty=Tensor[(5, 1, 15), int16] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %505 = equal(%498, %499) /* ty=Tensor[(5, 7, 15), bool] */;
  %506 = minimum(%503, %504) /* ty=Tensor[(5, ?, 15), int16] */;
  (%505, %506)
}

def @func_12201(%var_12160: Tensor[(112), uint8], %var_12161: Tensor[(525), float32]) -> (Tensor[(5, 1, 15), uint16], Tensor[(112), uint8], Tensor[(112), uint8], Tensor[(525), float32], Tensor[(5, 1, 15), uint16], Tensor[(1, 600), uint16], Tensor[(5, 1, 15), uint16]) {
  %507 = @func_5007() /* ty=(Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) */;
  %508 = cast(%var_12160, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %509 = cast(%var_12161, dtype="float32") /* ty=Tensor[(525), float32] */;
  %510 = cast(%var_12161, dtype="float32") /* ty=Tensor[(525), float32] */;
  %511 = reshape(%508, newshape=[112]) /* ty=Tensor[(112), uint8] */;
  %512 = reshape(%509, newshape=[5, 105]) /* ty=Tensor[(5, 105), float32] */;
  %513 = reshape(%510, newshape=[5, 105]) /* ty=Tensor[(5, 105), float32] */;
  %514 = @func_4529(%511, %512, %513) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(2, 4, 5), float32], Tensor[(112), uint8], Tensor[(5, 105), bool], Tensor[(15, 5, 7), float64], Tensor[(5, 105), float64]) */;
  %515 = @func_6498() /* ty=(Tensor[(5, ?, 15), float32], Tensor[(5, 1, 15), float64], Tensor[(10, 5, 12), uint16], Tensor[(50), uint16], Tensor[(1, 600), uint16]) */;
  %516 = @func_11133() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %517 = %507.1;
  %518 = %514.2;
  %519 = @func_11108() /* ty=Tensor[(5, 1, 15), uint16] */;
  %520 = %515.4;
  %521 = %516.0;
  (%517, %518, %var_12160, %var_12161, %519, %520, %521)
}

def @func_13967() -> (Tensor[(5, 1, 15), float64], Tensor[(2, 300), uint16]) {
  %522 = @func_12785() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64]) */;
  %523 = @func_8443() /* ty=(Tensor[(2, 300), uint16], Tensor[(5, ?, 15), int64]) */;
  %524 = %522.1;
  %525 = %523.0;
  (%524, %525)
}

def @func_6498() -> (Tensor[(5, ?, 15), float32], Tensor[(5, 1, 15), float64], Tensor[(10, 5, 12), uint16], Tensor[(50), uint16], Tensor[(1, 600), uint16]) {
  %526 = @func_5749() /* ty=(Tensor[(5, ?, 15), float32],) */;
  %527 = %526.0;
  %528 = @func_5352() /* ty=(Tensor[(55), float64], Tensor[(525), float32], Tensor[(600), uint16], Tensor[(525), float32], uint8, Tensor[(50), uint16]) */;
  %529 = %528.4;
  %530 = cast(%527, dtype="float32") /* ty=Tensor[(5, ?, 15), float32] */;
  %531 = cast(%529, dtype="float32") /* ty=float32 */;
  %532 = @func_4250() /* ty=Tensor[(5, 1, 15), uint16] */;
  %533 = cast(%532, dtype="float64") /* ty=Tensor[(5, 1, 15), float64] */;
  %534 = cast(meta[relay.Constant][28] /* ty=Tensor[(50), uint16] */, dtype="uint16") /* ty=Tensor[(50), uint16] */;
  %535 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 600), uint16] */, dtype="uint16") /* ty=Tensor[(1, 600), uint16] */;
  %536 = reshape(%534, newshape=[10, 5, 1]) /* ty=Tensor[(10, 5, 1), uint16] */;
  %537 = reshape(%535, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), uint16] */;
  %538 = divide(%530, %531) /* ty=Tensor[(5, ?, 15), float32] */;
  %539 = erf(%533) /* ty=Tensor[(5, 1, 15), float64] */;
  %540 = @func_852(%536, %537) /* ty=Tensor[(10, 5, 12), uint16] */;
  (%538, %539, %540, meta[relay.Constant][28] /* ty=Tensor[(50), uint16] */, meta[relay.Constant][29] /* ty=Tensor[(1, 600), uint16] */)
}

def @func_13862() -> (Tensor[(5, 1, 15), uint16],) {
  %541 = @func_3819() /* ty=Tensor[(5, 1, 15), uint16] */;
  (%541,)
}

def @func_4199() -> (Tensor[(5, ?, 15), float32],) {
  %542 = @func_3921() /* ty=(Tensor[(5, ?, 15), float32],) */;
  %543 = %542.0;
  (%543,)
}

def @func_5967(%var_5957: Tensor[(210), uint64], %var_5959: Tensor[(55), float64]) -> (Tensor[(5, 1, 15), float64], Tensor[(210, 1), uint64], Tensor[(1200), int32], Tensor[(210), uint64], Tensor[(60, 10), uint16], Tensor[(55), float64]) {
  %544 = @func_5718() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %545 = %544.0;
  %546 = cast(%545, dtype="float64") /* ty=Tensor[(5, 1, 15), float64] */;
  %547 = cast(meta[relay.Constant][30] /* ty=Tensor[(1200), int32] */, dtype="int32") /* ty=Tensor[(1200), int32] */;
  %548 = cast(%var_5957, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %549 = cast(meta[relay.Constant][31] /* ty=Tensor[(60, 10), uint16] */, dtype="uint16") /* ty=Tensor[(60, 10), uint16] */;
  %550 = cast(%var_5959, dtype="float64") /* ty=Tensor[(55), float64] */;
  %551 = reshape(%547, newshape=[5, 16, 15]) /* ty=Tensor[(5, 16, 15), int32] */;
  %552 = reshape(%548, newshape=[210, 1]) /* ty=Tensor[(210, 1), uint64] */;
  %553 = reshape(%549, newshape=[600]) /* ty=Tensor[(600), uint16] */;
  %554 = reshape(%550, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %555 = @func_3648(%551, %552, %553, %554) /* ty=(Tensor[(5, 16, 15), int32], Tensor[(10, 5), uint16], Tensor[(210, 1), uint64], Tensor[(600), uint16], Tensor[(55), float64]) */;
  %556 = acosh(%546) /* ty=Tensor[(5, 1, 15), float64] */;
  %557 = %555.2;
  (%556, %557, meta[relay.Constant][30] /* ty=Tensor[(1200), int32] */, %var_5957, meta[relay.Constant][31] /* ty=Tensor[(60, 10), uint16] */, %var_5959)
}

def @func_6345() -> (Tensor[(55, ?), float32],) {
  %558 = @func_5852() /* ty=Tensor[(55, ?), float64] */;
  %559 = cast(%558, dtype="float32") /* ty=Tensor[(55, ?), float32] */;
  %560 = log10(%559) /* ty=Tensor[(55, ?), float32] */;
  (%560,)
}

def @func_13521() -> Tensor[(5, ?, 15), int64] {
  %561 = @func_9957() /* ty=(Tensor[(5, ?, 15), int64],) */;
  %561.0
}

def @func_8023() -> (Tensor[(55, ?), float64],) {
  %562 = @func_7541() /* ty=(Tensor[(55, ?), float64],) */;
  %563 = %562.0;
  (%563,)
}

def @func_12110() -> (Tensor[(600), uint16],) {
  %564 = @func_5352() /* ty=(Tensor[(55), float64], Tensor[(525), float32], Tensor[(600), uint16], Tensor[(525), float32], uint8, Tensor[(50), uint16]) */;
  %565 = %564.2;
  (%565,)
}

def @func_6908(%var_6901: Tensor[(112), uint8]) -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 105), bool], Tensor[(112), uint8], Tensor[(525), float32]) {
  %566 = cast(%var_6901, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %567 = cast(meta[relay.Constant][32] /* ty=Tensor[(525), float32] */, dtype="float32") /* ty=Tensor[(525), float32] */;
  %568 = cast(meta[relay.Constant][32] /* ty=Tensor[(525), float32] */, dtype="float32") /* ty=Tensor[(525), float32] */;
  %569 = reshape(%566, newshape=[112]) /* ty=Tensor[(112), uint8] */;
  %570 = reshape(%567, newshape=[5, 105]) /* ty=Tensor[(5, 105), float32] */;
  %571 = reshape(%568, newshape=[5, 105]) /* ty=Tensor[(5, 105), float32] */;
  %572 = @func_4529(%569, %570, %571) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(2, 4, 5), float32], Tensor[(112), uint8], Tensor[(5, 105), bool], Tensor[(15, 5, 7), float64], Tensor[(5, 105), float64]) */;
  %573 = @func_4650() /* ty=Tensor[(5, 1, 15), uint16] */;
  %574 = %572.3;
  (%573, %574, %var_6901, meta[relay.Constant][32] /* ty=Tensor[(525), float32] */)
}

def @func_3921() -> (Tensor[(5, ?, 15), float32],) {
  %575 = @func_3729() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %576 = %575.0;
  %577 = cast(meta[relay.Constant][33] /* ty=Tensor[(5, 1, 15), uint16] */, dtype="float32") /* ty=Tensor[(5, 1, 15), float32] */;
  %578 = shape_of(%576, dtype="int32") /* ty=Tensor[(3), int32] */;
  %579 = cast(%576, dtype="float32") /* ty=Tensor[(5, 1, 15), float32] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %581 = floor_divide(%579, %580) /* ty=Tensor[(5, ?, 15), float32] */;
  (%581,)
}

def @func_11687() -> (Tensor[(40), float32], Tensor[(5, 16, 15), int32], Tensor[(55), float64]) {
  %582 = cast(meta[relay.Constant][34] /* ty=Tensor[(55), float64] */, dtype="float64") /* ty=Tensor[(55), float64] */;
  %583 = reshape(%582, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %584 = @func_4139(%583) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 16, 15), int32], Tensor[(4, 300), int32], Tensor[(210), uint64], Tensor[(6, 100), uint16], Tensor[(55), float64]) */;
  %585 = @func_11329() /* ty=Tensor[(40), float32] */;
  %586 = %584.1;
  (%585, %586, meta[relay.Constant][34] /* ty=Tensor[(55), float64] */)
}

def @func_9820() -> Tensor[(2, 4, 5), float32] {
  @func_7921() /* ty=Tensor[(2, 4, 5), float32] */
}

def @func_11612() -> (Tensor[(600), uint16], Tensor[(5, 1, 15), uint16]) {
  %587 = @func_8289() /* ty=(Tensor[(600), uint16],) */;
  %588 = @func_8368() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %589 = %587.0;
  %590 = %588.0;
  (%589, %590)
}

def @func_11764() -> Tensor[(5, 14, 15), int64] {
  %591 = @func_9246() /* ty=(Tensor[(5, ?, 15), float32], Tensor[(5, 14, 15), int64], Tensor[(1, 1050), int64]) */;
  %591.1
}

def @func_11831() -> Tensor[(5, 1, 15), uint16] {
  %592 = @func_9182() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %592.0
}

def @func_13102(%var_13089: Tensor[(40), float32]) -> (Tensor[(5, ?, 15), int64], Tensor[(40), float32], Tensor[(40), float32], Tensor[(210), uint64]) {
  %593 = cast(%var_13089, dtype="float32") /* ty=Tensor[(40), float32] */;
  %594 = reshape(%593, newshape=[40]) /* ty=Tensor[(40), float32] */;
  %595 = @func_4020(%594) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(40), float32], Tensor[(35, 15), float32], Tensor[(40), float32]) */;
  %596 = @func_10886() /* ty=Tensor[(5, ?, 15), int64] */;
  %597 = %595.3;
  %598 = @func_7712() /* ty=Tensor[(210), uint64] */;
  (%596, %597, %var_13089, %598)
}

def @func_4638(%var_4613: Tensor[(600), uint16], %var_4623: Tensor[(525), float32]) -> (Tensor[(5, 1, 15), uint16], Tensor[(10, 5, 12), uint16], Tensor[(50), uint16], Tensor[(600), uint16], Tensor[(5, 1, 15), uint16], Tensor[(112), uint8], Tensor[(525), float32], Tensor[(5, 1, 15), uint16]) {
  %599 = @func_4213() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %600 = cast(meta[relay.Constant][35] /* ty=Tensor[(50), uint16] */, dtype="uint16") /* ty=Tensor[(50), uint16] */;
  %601 = cast(%var_4613, dtype="uint16") /* ty=Tensor[(600), uint16] */;
  %602 = reshape(%600, newshape=[10, 5, 1]) /* ty=Tensor[(10, 5, 1), uint16] */;
  %603 = reshape(%601, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), uint16] */;
  %604 = cast(meta[relay.Constant][36] /* ty=Tensor[(112), uint8] */, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %605 = cast(%var_4623, dtype="float32") /* ty=Tensor[(525), float32] */;
  %606 = cast(%var_4623, dtype="float32") /* ty=Tensor[(525), float32] */;
  %607 = reshape(%604, newshape=[112]) /* ty=Tensor[(112), uint8] */;
  %608 = reshape(%605, newshape=[5, 105]) /* ty=Tensor[(5, 105), float32] */;
  %609 = reshape(%606, newshape=[5, 105]) /* ty=Tensor[(5, 105), float32] */;
  %610 = @func_4529(%607, %608, %609) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(2, 4, 5), float32], Tensor[(112), uint8], Tensor[(5, 105), bool], Tensor[(15, 5, 7), float64], Tensor[(5, 105), float64]) */;
  %611 = @func_3729() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %612 = %599.0;
  %613 = @func_852(%602, %603) /* ty=Tensor[(10, 5, 12), uint16] */;
  %614 = %610.0;
  %615 = %611.0;
  (%612, %613, meta[relay.Constant][35] /* ty=Tensor[(50), uint16] */, %var_4613, %614, meta[relay.Constant][36] /* ty=Tensor[(112), uint8] */, %var_4623, %615)
}

def @func_7082() -> Tensor[(5, 1, 15), uint16] {
  %616 = @func_5007() /* ty=(Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) */;
  %616.1
}

def @func_9384() -> (Tensor[(55, ?), float64], Tensor[(5, 1, 15), uint16]) {
  %617 = @func_6949() /* ty=Tensor[(55, ?), float64] */;
  %618 = @func_4250() /* ty=Tensor[(5, 1, 15), uint16] */;
  (%617, %618)
}

def @func_4650() -> Tensor[(5, 1, 15), uint16] {
  @func_4250() /* ty=Tensor[(5, 1, 15), uint16] */
}

def @func_7294(%var_7280: Tensor[(5, 14, 15), uint16]) -> (Tensor[(5, 14, 15), uint8], Tensor[(50), uint16]) {
  %619 = @func_5718() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %620 = %619.0;
  %621 = cast(%620, dtype="uint8") /* ty=Tensor[(5, 1, 15), uint8] */;
  %622 = cast(%var_7280, dtype="uint8") /* ty=Tensor[(5, 14, 15), uint8] */;
  %623 = @func_6498() /* ty=(Tensor[(5, ?, 15), float32], Tensor[(5, 1, 15), float64], Tensor[(10, 5, 12), uint16], Tensor[(50), uint16], Tensor[(1, 600), uint16]) */;
  %624 = add(%621, %622) /* ty=Tensor[(5, 14, 15), uint8] */;
  %625 = %623.3;
  (%624, %625)
}

def @func_6819() -> (Tensor[(14, 1, 7), float32], Tensor[(5, 1, 15), float64], Tensor[(12, 11, 4), float32], Tensor[(12, 50), uint16], Tensor[(1, 525), float32]) {
  %626 = cast(meta[relay.Constant][37] /* ty=Tensor[(14, 1, 7), float32] */, dtype="float32") /* ty=Tensor[(14, 1, 7), float32] */;
  %627 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 525), float32] */, dtype="float32") /* ty=Tensor[(1, 525), float32] */;
  %628 = reshape(%627, newshape=[525]) /* ty=Tensor[(525), float32] */;
  %629 = @func_6561(%628) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(525), float32], Tensor[(12, 50), uint16], Tensor[(525), float32], uint8) */;
  %630 = sqrt(%626) /* ty=Tensor[(14, 1, 7), float32] */;
  %631 = @func_5947() /* ty=Tensor[(5, 1, 15), float64] */;
  %632 = @func_5569() /* ty=Tensor[(12, 11, 4), float32] */;
  %633 = %629.2;
  (%630, %631, %632, %633, meta[relay.Constant][38] /* ty=Tensor[(1, 525), float32] */)
}

def @func_9741() -> Tensor[(40), float32] {
  %634 = @func_9086() /* ty=(Tensor[(40), float32], Tensor[(5, 1, 15), uint16]) */;
  %634.0
}

def @func_12589() -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16]) {
  %635 = @func_10207() /* ty=(Tensor[(55, ?), float64], Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64]) */;
  %636 = @func_10070() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %637 = %635.1;
  %638 = %636.0;
  (%637, %638)
}

def @func_8484(%var_8478: Tensor[(14, 8, 7), float32]) -> (Tensor[(14, 8, 7), uint8],) {
  %639 = @func_6819() /* ty=(Tensor[(14, 1, 7), float32], Tensor[(5, 1, 15), float64], Tensor[(12, 11, 4), float32], Tensor[(12, 50), uint16], Tensor[(1, 525), float32]) */;
  %640 = %639.0;
  %641 = cast(%640, dtype="uint8") /* ty=Tensor[(14, 1, 7), uint8] */;
  %642 = cast(%var_8478, dtype="uint8") /* ty=Tensor[(14, 8, 7), uint8] */;
  %643 = minimum(%641, %642) /* ty=Tensor[(14, 8, 7), uint8] */;
  (%643,)
}

def @func_11578(%var_11549: Tensor[(55, 1), float64], %var_11561: Tensor[(40), float32]) -> (Tensor[(5, 1, 15), uint16], Tensor[(5, ?, 15), float32], Tensor[(55, 1), float64], Tensor[(2, 4, 5), uint64], Tensor[(40), float32], Tensor[(7, 7, 15), uint16], Tensor[(7, 105), uint16]) {
  %644 = cast(%var_11549, dtype="float64") /* ty=Tensor[(55, 1), float64] */;
  %645 = reshape(%644, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %646 = @func_4177(%645) /* ty=(Tensor[(5, ?, 15), float32], Tensor[(5, 16, 15), int32], Tensor[(55), float64]) */;
  %647 = cast(%var_11561, dtype="float32") /* ty=Tensor[(40), float32] */;
  %648 = reshape(%647, newshape=[2, 4, 5]) /* ty=Tensor[(2, 4, 5), float32] */;
  %649 = @func_11387(%648) /* ty=(Tensor[(2, 4, 5), uint64], Tensor[(2, 4, 5), float64], Tensor[(12, 8, 15), float64], Tensor[(1440), float64]) */;
  %650 = cast(meta[relay.Constant][39] /* ty=Tensor[(7, 105), uint16] */, dtype="uint16") /* ty=Tensor[(7, 105), uint16] */;
  %651 = reshape(%650, newshape=[7, 7, 15]) /* ty=Tensor[(7, 7, 15), uint16] */;
  %652 = @func_6073(%651) /* ty=(Tensor[(7, 7, 15), uint16], Tensor[(5, 1, 15), uint16]) */;
  %653 = @func_3819() /* ty=Tensor[(5, 1, 15), uint16] */;
  %654 = %646.0;
  %655 = %649.0;
  %656 = %652.0;
  (%653, %654, %var_11549, %655, %var_11561, %656, meta[relay.Constant][39] /* ty=Tensor[(7, 105), uint16] */)
}

def @func_10377() -> Tensor[(55, ?), float32] {
  %657 = @func_8023() /* ty=(Tensor[(55, ?), float64],) */;
  %658 = %657.0;
  %659 = cast(%658, dtype="float32") /* ty=Tensor[(55, ?), float32] */;
  rsqrt(%659) /* ty=Tensor[(55, ?), float32] */
}

def @func_8535(%var_8505: Tensor[(5, 14, 15), int64], %var_8506: Tensor[(5, 14, 15), int64]) -> (Tensor[(5, 14, 15), int64],) {
  %660 = cast(%var_8506, dtype="int64") /* ty=Tensor[(5, 14, 15), int64] */;
  %661 = shape_of(%var_8505, dtype="int32") /* ty=Tensor[(3), int32] */;
  %662 = cast(%var_8505, dtype="int64") /* ty=Tensor[(5, 14, 15), int64] */;
  %663 = dyn.reshape(%660, %661, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %664 = left_shift(%662, %663) /* ty=Tensor[(5, 14, 15), int64] */;
  (%664,)
}

def @func_5651() -> (Tensor[(5, ?, 15), bool], Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64]) {
  %665 = @func_4951() /* ty=Tensor[(5, 1, 15), uint16] */;
  %666 = @func_4650() /* ty=Tensor[(5, 1, 15), uint16] */;
  %667 = cast(%666, dtype="bool") /* ty=Tensor[(5, 1, 15), bool] */;
  %668 = shape_of(%665, dtype="int32") /* ty=Tensor[(3), int32] */;
  %669 = cast(%665, dtype="bool") /* ty=Tensor[(5, 1, 15), bool] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %671 = @func_5007() /* ty=(Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) */;
  %672 = @func_4213() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %673 = cast(%666, dtype="float64") /* ty=Tensor[(5, 1, 15), float64] */;
  %674 = equal(%669, %670) /* ty=Tensor[(5, ?, 15), bool] */;
  %675 = %671.1;
  %676 = %672.0;
  %677 = asinh(%673) /* ty=Tensor[(5, 1, 15), float64] */;
  (%674, %675, %676, %677)
}

def @func_11184(%var_11166: Tensor[(5, 16, 7), float64]) -> (Tensor[(5, 16, 7), float64],) {
  %678 = cast(%var_11166, dtype="float64") /* ty=Tensor[(5, 16, 7), float64] */;
  %679 = acos(%678) /* ty=Tensor[(5, 16, 7), float64] */;
  (%679,)
}

def @func_5196() -> (Tensor[(5, 1, 15), uint16], Tensor[(210), uint64], Tensor[(2, 300), uint16], Tensor[(55), float64], Tensor[(10, 5, 12), float64], Tensor[(5, 16, 15), int32]) {
  %680 = cast(meta[relay.Constant][40] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %681 = cast(meta[relay.Constant][41] /* ty=Tensor[(2, 300), uint16] */, dtype="uint16") /* ty=Tensor[(2, 300), uint16] */;
  %682 = cast(meta[relay.Constant][42] /* ty=Tensor[(55), float64] */, dtype="float64") /* ty=Tensor[(55), float64] */;
  %683 = reshape(%680, newshape=[6, 7, 5]) /* ty=Tensor[(6, 7, 5), uint64] */;
  %684 = reshape(%681, newshape=[600]) /* ty=Tensor[(600), uint16] */;
  %685 = reshape(%682, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %686 = @func_1888(%683, %684, %685) /* ty=(Tensor[(6, 7, 5), uint64], Tensor[(10, 5, 12), uint16], Tensor[(10, 5), uint16], Tensor[(600), uint16], Tensor[(5, 9, 11), float64], Tensor[(55), float64], Tensor[(495), float64]) */;
  %687 = %686.1;
  %688 = cast(%687, dtype="float64") /* ty=Tensor[(10, 5, 12), float64] */;
  %689 = cast(meta[relay.Constant][42] /* ty=Tensor[(55), float64] */, dtype="float64") /* ty=Tensor[(55), float64] */;
  %690 = reshape(%689, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %691 = @func_4177(%690) /* ty=(Tensor[(5, ?, 15), float32], Tensor[(5, 16, 15), int32], Tensor[(55), float64]) */;
  %692 = @func_4471() /* ty=Tensor[(5, 1, 15), uint16] */;
  %693 = sigmoid(%688) /* ty=Tensor[(10, 5, 12), float64] */;
  %694 = %691.1;
  (%692, meta[relay.Constant][40] /* ty=Tensor[(210), uint64] */, meta[relay.Constant][41] /* ty=Tensor[(2, 300), uint16] */, meta[relay.Constant][42] /* ty=Tensor[(55), float64] */, %693, %694)
}

def @func_4020(%var_4007: Tensor[(40), float32]) -> (Tensor[(5, 1, 15), uint16], Tensor[(40), float32], Tensor[(35, 15), float32], Tensor[(40), float32]) {
  %695 = cast(meta[relay.Constant][43] /* ty=Tensor[(35, 15), float32] */, dtype="float32") /* ty=Tensor[(35, 15), float32] */;
  %696 = cast(%var_4007, dtype="float32") /* ty=Tensor[(40), float32] */;
  %697 = reshape(%695, newshape=[15, 5, 7]) /* ty=Tensor[(15, 5, 7), float32] */;
  %698 = reshape(%696, newshape=[40]) /* ty=Tensor[(40), float32] */;
  %699 = @func_561(%697, %698) /* ty=(Tensor[(15, 5, 7), float64], Tensor[(2, 4, 5), float32], Tensor[(40), float32]) */;
  %700 = @func_3819() /* ty=Tensor[(5, 1, 15), uint16] */;
  %701 = %699.2;
  (%700, %701, meta[relay.Constant][43] /* ty=Tensor[(35, 15), float32] */, %var_4007)
}

def @func_8583() -> (Tensor[(5, 1, 15), float64],) {
  %702 = @func_5651() /* ty=(Tensor[(5, ?, 15), bool], Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64]) */;
  %703 = %702.3;
  (%703,)
}

def @func_4042(%var_4038: Tensor[(210), uint64]) -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 9, 11), float64], Tensor[(210), uint64], Tensor[(600), uint16], Tensor[(55), float64]) {
  %704 = cast(%var_4038, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %705 = cast(meta[relay.Constant][44] /* ty=Tensor[(600), uint16] */, dtype="uint16") /* ty=Tensor[(600), uint16] */;
  %706 = cast(meta[relay.Constant][45] /* ty=Tensor[(55), float64] */, dtype="float64") /* ty=Tensor[(55), float64] */;
  %707 = reshape(%704, newshape=[6, 7, 5]) /* ty=Tensor[(6, 7, 5), uint64] */;
  %708 = reshape(%705, newshape=[600]) /* ty=Tensor[(600), uint16] */;
  %709 = reshape(%706, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %710 = @func_1888(%707, %708, %709) /* ty=(Tensor[(6, 7, 5), uint64], Tensor[(10, 5, 12), uint16], Tensor[(10, 5), uint16], Tensor[(600), uint16], Tensor[(5, 9, 11), float64], Tensor[(55), float64], Tensor[(495), float64]) */;
  %711 = @func_3819() /* ty=Tensor[(5, 1, 15), uint16] */;
  %712 = %710.4;
  (%711, %712, %var_4038, meta[relay.Constant][44] /* ty=Tensor[(600), uint16] */, meta[relay.Constant][45] /* ty=Tensor[(55), float64] */)
}

def @func_9510(%var_9502: Tensor[(525), float32]) -> (Tensor[(12, 11, 4), float32], Tensor[(112), uint8], uint8, Tensor[(525), float32]) {
  %713 = @func_6691() /* ty=(Tensor[(12, 11, 4), float32], Tensor[(5, ?, 15), bool]) */;
  %714 = cast(meta[relay.Constant][46] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %715 = cast(%var_9502, dtype="float32") /* ty=Tensor[(525), float32] */;
  %716 = reshape(%714, newshape=[]) /* ty=uint8 */;
  %717 = reshape(%715, newshape=[525]) /* ty=Tensor[(525), float32] */;
  %718 = @func_4595(%716, %717) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16], Tensor[(2, 4, 5), float32], uint8, Tensor[(112), uint8], Tensor[(525), float32]) */;
  %719 = %713.0;
  %720 = %718.4;
  (%719, %720, meta[relay.Constant][46] /* ty=uint8 */, %var_9502)
}

def @func_10070() -> (Tensor[(5, 1, 15), uint16],) {
  %721 = @func_5718() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %722 = %721.0;
  (%722,)
}

def @func_10533() -> (Tensor[(5, 1, 15), float64], Tensor[(40), float32], Tensor[(55), float64], Tensor[(10, 5, 12), uint16]) {
  %723 = @func_9149() /* ty=(Tensor[(55, ?), float64], Tensor[(5, 1, 15), float64]) */;
  %724 = @func_9086() /* ty=(Tensor[(40), float32], Tensor[(5, 1, 15), uint16]) */;
  %725 = @func_5196() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(210), uint64], Tensor[(2, 300), uint16], Tensor[(55), float64], Tensor[(10, 5, 12), float64], Tensor[(5, 16, 15), int32]) */;
  %726 = @func_6498() /* ty=(Tensor[(5, ?, 15), float32], Tensor[(5, 1, 15), float64], Tensor[(10, 5, 12), uint16], Tensor[(50), uint16], Tensor[(1, 600), uint16]) */;
  %727 = %723.1;
  %728 = %724.0;
  %729 = %725.3;
  %730 = %726.2;
  (%727, %728, %729, %730)
}

def @func_11271() -> Tensor[(5, ?, 15), int64] {
  %731 = @func_5007() /* ty=(Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) */;
  %731.0
}

def @func_8257(%var_8214: Tensor[(6, 100), uint16], %var_8254: Tensor[(56, 2), uint8]) -> (Tensor[(12, 11, 4), float32], Tensor[(600), uint16], Tensor[(6, 100), uint16], uint8, Tensor[(112), uint8], Tensor[(56, 2), uint8], Tensor[(525), float32]) {
  %732 = cast(%var_8214, dtype="uint16") /* ty=Tensor[(6, 100), uint16] */;
  %733 = cast(meta[relay.Constant][47] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %734 = reshape(%732, newshape=[600]) /* ty=Tensor[(600), uint16] */;
  %735 = reshape(%733, newshape=[]) /* ty=uint8 */;
  %736 = @func_7011(%734, %735) /* ty=(Tensor[(50), uint16], uint8, Tensor[(600), uint16], Tensor[(525), float32], uint8) */;
  %737 = cast(%var_8254, dtype="uint8") /* ty=Tensor[(56, 2), uint8] */;
  %738 = cast(meta[relay.Constant][48] /* ty=Tensor[(525), float32] */, dtype="float32") /* ty=Tensor[(525), float32] */;
  %739 = reshape(%737, newshape=[112]) /* ty=Tensor[(112), uint8] */;
  %740 = reshape(%738, newshape=[525]) /* ty=Tensor[(525), float32] */;
  %741 = @func_6246(%739, %740) /* ty=(Tensor[(55, ?), float64], Tensor[(112), uint8], Tensor[(112), uint8], Tensor[(525), float32]) */;
  %742 = @func_5569() /* ty=Tensor[(12, 11, 4), float32] */;
  %743 = %736.2;
  %744 = %741.1;
  (%742, %743, %var_8214, meta[relay.Constant][47] /* ty=uint8 */, %744, %var_8254, meta[relay.Constant][48] /* ty=Tensor[(525), float32] */)
}

def @func_8132() -> (Tensor[(5, 1, 15), float64],) {
  %745 = @func_6929() /* ty=Tensor[(5, 1, 15), float64] */;
  (%745,)
}

def @func_11329() -> Tensor[(40), float32] {
  @func_9741() /* ty=Tensor[(40), float32] */
}

def @func_4691(%var_4688: Tensor[(2, 16, 10), float64]) -> (Tensor[(2, 16, 10), float64],) {
  %746 = cast(%var_4688, dtype="float64") /* ty=Tensor[(2, 16, 10), float64] */;
  %747 = asinh(%746) /* ty=Tensor[(2, 16, 10), float64] */;
  (%747,)
}

def @func_6949() -> Tensor[(55, ?), float64] {
  @func_5852() /* ty=Tensor[(55, ?), float64] */
}

def @func_11925() -> (Tensor[(12, 11, 1), float32],) {
  %748 = @func_7952() /* ty=(Tensor[(12, 11, 1), float32],) */;
  %749 = %748.0;
  (%749,)
}

def @func_11351() -> (Tensor[(5, 1, 15), float64], Tensor[(7, 7, 15), uint16], Tensor[(245, 3), uint16], Tensor[(55), float64], Tensor[(55), float64]) {
  %750 = @func_8412() /* ty=(Tensor[(5, 1, 15), float64],) */;
  %751 = cast(meta[relay.Constant][49] /* ty=Tensor[(245, 3), uint16] */, dtype="uint16") /* ty=Tensor[(245, 3), uint16] */;
  %752 = reshape(%751, newshape=[7, 7, 15]) /* ty=Tensor[(7, 7, 15), uint16] */;
  %753 = @func_6073(%752) /* ty=(Tensor[(7, 7, 15), uint16], Tensor[(5, 1, 15), uint16]) */;
  %754 = cast(meta[relay.Constant][50] /* ty=Tensor[(55), float64] */, dtype="float64") /* ty=Tensor[(55), float64] */;
  %755 = reshape(%754, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %756 = @func_4139(%755) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 16, 15), int32], Tensor[(4, 300), int32], Tensor[(210), uint64], Tensor[(6, 100), uint16], Tensor[(55), float64]) */;
  %757 = %750.0;
  %758 = %753.0;
  %759 = %756.5;
  (%757, %758, meta[relay.Constant][49] /* ty=Tensor[(245, 3), uint16] */, %759, meta[relay.Constant][50] /* ty=Tensor[(55), float64] */)
}

def @func_7442(%var_7409: Tensor[(5, 8, 15), uint16]) -> (Tensor[(5, 8, 15), bool], Tensor[(210), uint64], Tensor[(5, 42), uint64]) {
  %760 = @func_4951() /* ty=Tensor[(5, 1, 15), uint16] */;
  %761 = cast(%760, dtype="bool") /* ty=Tensor[(5, 1, 15), bool] */;
  %762 = cast(%var_7409, dtype="bool") /* ty=Tensor[(5, 8, 15), bool] */;
  %763 = cast(meta[relay.Constant][51] /* ty=Tensor[(5, 42), uint64] */, dtype="uint64") /* ty=Tensor[(5, 42), uint64] */;
  %764 = reshape(%763, newshape=[210]) /* ty=Tensor[(210), uint64] */;
  %765 = @func_4042(%764) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 9, 11), float64], Tensor[(210), uint64], Tensor[(600), uint16], Tensor[(55), float64]) */;
  %766 = not_equal(%761, %762) /* ty=Tensor[(5, 8, 15), bool] */;
  %767 = %765.2;
  (%766, %767, meta[relay.Constant][51] /* ty=Tensor[(5, 42), uint64] */)
}

def @func_11993(%var_11983: Tensor[(55, 13), float64]) -> Tensor[(55, 13), float32] {
  %768 = @func_5852() /* ty=Tensor[(55, ?), float64] */;
  %769 = cast(%768, dtype="float32") /* ty=Tensor[(55, ?), float32] */;
  %770 = cast(%var_11983, dtype="float32") /* ty=Tensor[(55, 13), float32] */;
  floor_mod(%769, %770) /* ty=Tensor[(55, 13), float32] */
}

def @func_5246(%var_5235: Tensor[(55), float64]) -> (Tensor[(5, 1, 15), uint16], Tensor[(5, ?, 15), float32], Tensor[(55), float64]) {
  %771 = @func_4213() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %772 = cast(%var_5235, dtype="float64") /* ty=Tensor[(55), float64] */;
  %773 = reshape(%772, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %774 = @func_4177(%773) /* ty=(Tensor[(5, ?, 15), float32], Tensor[(5, 16, 15), int32], Tensor[(55), float64]) */;
  %775 = %771.0;
  %776 = %774.0;
  (%775, %776, %var_5235)
}

def @main(%var_14302: Tensor[(55), float64], %var_14318: Tensor[(55, 12), float64]) -> (Tensor[(5, 1, 15), uint16], Tensor[(55), float64], Tensor[(20, 2), float32], Tensor[(55, 12), uint8], Tensor[(55, 1), float64], Tensor[(55, ?), bool]) {
  %777 = cast(%var_14302, dtype="float64") /* ty=Tensor[(55), float64] */;
  %778 = cast(meta[relay.Constant][52] /* ty=Tensor[(20, 2), float32] */, dtype="float32") /* ty=Tensor[(20, 2), float32] */;
  %779 = reshape(%777, newshape=[55, 1]) /* ty=Tensor[(55, 1), float64] */;
  %780 = reshape(%778, newshape=[40]) /* ty=Tensor[(40), float32] */;
  %781 = @func_11578(%779, %780) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, ?, 15), float32], Tensor[(55, 1), float64], Tensor[(2, 4, 5), uint64], Tensor[(40), float32], Tensor[(7, 7, 15), uint16], Tensor[(7, 105), uint16]) */;
  %782 = %781.2;
  %783 = cast(%782, dtype="uint8") /* ty=Tensor[(55, 1), uint8] */;
  %784 = cast(%var_14318, dtype="uint8") /* ty=Tensor[(55, 12), uint8] */;
  %785 = cast(%782, dtype="float64") /* ty=Tensor[(55, 1), float64] */;
  %786 = cast(%782, dtype="float32") /* ty=Tensor[(55, 1), float32] */;
  %787 = tan(%786) /* ty=Tensor[(55, 1), float32] */;
  %788 = cast(%787, dtype="float64") /* ty=Tensor[(55, 1), float64] */;
  %789 = atan(%788) /* ty=Tensor[(55, 1), float64] */;
  %790 = cast(%782, dtype="bool") /* ty=Tensor[(55, 1), bool] */;
  %791 = shape_of(%789, dtype="int32") /* ty=Tensor[(2), int32] */;
  %792 = cast(%789, dtype="bool") /* ty=Tensor[(55, 1), bool] */;
  %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %794 = @func_11495() /* ty=Tensor[(5, 1, 15), uint16] */;
  %795 = bitwise_xor(%783, %784) /* ty=Tensor[(55, 12), uint8] */;
  %796 = exp(%785) /* ty=Tensor[(55, 1), float64] */;
  %797 = greater(%792, %793) /* ty=Tensor[(55, ?), bool] */;
  (%794, %var_14302, meta[relay.Constant][52] /* ty=Tensor[(20, 2), float32] */, %795, %796, %797)
}

def @func_7209() -> (Tensor[(12, 11, 4), float32],) {
  %798 = @func_5569() /* ty=Tensor[(12, 11, 4), float32] */;
  (%798,)
}

def @func_9848(%var_9844: Tensor[(600), uint16], %var_9845: Tensor[(1, 112), uint8]) -> (Tensor[(5, 1, 15), float64], Tensor[(55, ?), float32], uint8, Tensor[(600), uint16], Tensor[(1, 112), uint8]) {
  %799 = @func_8412() /* ty=(Tensor[(5, 1, 15), float64],) */;
  %800 = @func_6345() /* ty=(Tensor[(55, ?), float32],) */;
  %801 = cast(%var_9844, dtype="uint16") /* ty=Tensor[(600), uint16] */;
  %802 = cast(%var_9845, dtype="uint8") /* ty=Tensor[(1, 112), uint8] */;
  %803 = reshape(%801, newshape=[6, 100]) /* ty=Tensor[(6, 100), uint16] */;
  %804 = reshape(%802, newshape=[56, 2]) /* ty=Tensor[(56, 2), uint8] */;
  %805 = @func_8257(%803, %804) /* ty=(Tensor[(12, 11, 4), float32], Tensor[(600), uint16], Tensor[(6, 100), uint16], uint8, Tensor[(112), uint8], Tensor[(56, 2), uint8], Tensor[(525), float32]) */;
  %806 = %799.0;
  %807 = %800.0;
  %808 = %805.3;
  (%806, %807, %808, %var_9844, %var_9845)
}

def @func_11387(%var_11356: Tensor[(2, 4, 5), float32]) -> (Tensor[(2, 4, 5), uint64], Tensor[(2, 4, 5), float64], Tensor[(12, 8, 15), float64], Tensor[(1440), float64]) {
  %809 = @func_9820() /* ty=Tensor[(2, 4, 5), float32] */;
  %810 = cast(%var_11356, dtype="uint64") /* ty=Tensor[(2, 4, 5), uint64] */;
  %811 = shape_of(%809, dtype="int32") /* ty=Tensor[(3), int32] */;
  %812 = cast(%809, dtype="uint64") /* ty=Tensor[(2, 4, 5), uint64] */;
  %813 = dyn.reshape(%810, %811, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %814 = cast(%var_11356, dtype="float64") /* ty=Tensor[(2, 4, 5), float64] */;
  %815 = cast(meta[relay.Constant][53] /* ty=Tensor[(1440), float64] */, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %816 = reshape(%815, newshape=[12, 8, 15]) /* ty=Tensor[(12, 8, 15), float64] */;
  %817 = @func_10873(%816) /* ty=(Tensor[(12, 8, 15), float64], Tensor[(5, 1, 15), uint16]) */;
  %818 = bitwise_and(%812, %813) /* ty=Tensor[(2, 4, 5), uint64] */;
  %819 = exp(%814) /* ty=Tensor[(2, 4, 5), float64] */;
  %820 = %817.0;
  (%818, %819, %820, meta[relay.Constant][53] /* ty=Tensor[(1440), float64] */)
}

def @func_6180(%var_6139: Tensor[(24, 16), float64], %var_6140: Tensor[(210), uint64]) -> (Tensor[(5, 1, 15), uint16], Tensor[(55), float64], Tensor[(6, 16, 4), uint32], Tensor[(24, 16), float64], Tensor[(210), uint64], Tensor[(5, ?, 15), int32]) {
  %821 = cast(meta[relay.Constant][54] /* ty=Tensor[(55), float64] */, dtype="float64") /* ty=Tensor[(55), float64] */;
  %822 = reshape(%821, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %823 = @func_5246(%822) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, ?, 15), float32], Tensor[(55), float64]) */;
  %824 = cast(%var_6139, dtype="float64") /* ty=Tensor[(24, 16), float64] */;
  %825 = cast(%var_6139, dtype="float64") /* ty=Tensor[(24, 16), float64] */;
  %826 = cast(%var_6140, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %827 = reshape(%824, newshape=[6, 16, 4]) /* ty=Tensor[(6, 16, 4), float64] */;
  %828 = reshape(%825, newshape=[6, 16, 4]) /* ty=Tensor[(6, 16, 4), float64] */;
  %829 = reshape(%826, newshape=[210]) /* ty=Tensor[(210), uint64] */;
  %830 = @func_4793(%827, %828, %829) /* ty=(Tensor[(6, 16, 4), float64], Tensor[(6, 16, 4), uint32], Tensor[(495), float64], Tensor[(300, 2), uint16], Tensor[(55, 210), float32], Tensor[(6, 16, 4), bool]) */;
  %831 = @func_5718() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %832 = %831.0;
  %833 = @func_3921() /* ty=(Tensor[(5, ?, 15), float32],) */;
  %834 = %833.0;
  %835 = cast(%834, dtype="int32") /* ty=Tensor[(5, ?, 15), int32] */;
  %836 = shape_of(%832, dtype="int32") /* ty=Tensor[(3), int32] */;
  %837 = cast(%832, dtype="int32") /* ty=Tensor[(5, 1, 15), int32] */;
  %838 = dyn.reshape(%835, %836, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %839 = %823.0;
  %840 = %830.1;
  %841 = logical_xor(%837, %838) /* ty=Tensor[(5, ?, 15), int32] */;
  (%839, meta[relay.Constant][54] /* ty=Tensor[(55), float64] */, %840, %var_6139, %var_6140, %841)
}

def @func_12748(%var_12704: Tensor[(1, 55), float64]) -> (Tensor[(1, 55), float64], Tensor[(5, 1, 15), uint16], Tensor[(5, ?, 15), float64]) {
  %842 = @func_12277() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64], Tensor[(5, 1, 15), uint16], Tensor[(55, ?), float64]) */;
  %843 = %842.2;
  %844 = cast(%var_12704, dtype="float64") /* ty=Tensor[(1, 55), float64] */;
  %845 = reshape(%844, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %846 = @func_7226(%845) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16], Tensor[(55), float64]) */;
  %847 = %846.0;
  %848 = cast(%847, dtype="float64") /* ty=Tensor[(5, 1, 15), float64] */;
  %849 = shape_of(%843, dtype="int32") /* ty=Tensor[(3), int32] */;
  %850 = cast(%843, dtype="float64") /* ty=Tensor[(5, 1, 15), float64] */;
  %851 = dyn.reshape(%848, %849, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %852 = @func_10238() /* ty=Tensor[(5, 1, 15), uint16] */;
  %853 = floor_mod(%850, %851) /* ty=Tensor[(5, ?, 15), float64] */;
  (%var_12704, %852, %853)
}

def @func_6561(%var_6556: Tensor[(525), float32]) -> (Tensor[(5, 1, 15), uint16], Tensor[(525), float32], Tensor[(12, 50), uint16], Tensor[(525), float32], uint8) {
  %854 = @func_5007() /* ty=(Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) */;
  %855 = cast(meta[relay.Constant][55] /* ty=Tensor[(12, 50), uint16] */, dtype="uint16") /* ty=Tensor[(12, 50), uint16] */;
  %856 = cast(%var_6556, dtype="float32") /* ty=Tensor[(525), float32] */;
  %857 = cast(meta[relay.Constant][56] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %858 = reshape(%855, newshape=[600]) /* ty=Tensor[(600), uint16] */;
  %859 = reshape(%856, newshape=[525]) /* ty=Tensor[(525), float32] */;
  %860 = reshape(%857, newshape=[]) /* ty=uint8 */;
  %861 = @func_4868(%858, %859, %860) /* ty=(Tensor[(5, ?, 15), float32], Tensor[(5, 1, 15), uint16], Tensor[(600), uint16], Tensor[(525), float32], Tensor[(14, 8, 1), float32], uint8, Tensor[(2, 56), uint8]) */;
  %862 = %854.1;
  %863 = %861.3;
  (%862, %863, meta[relay.Constant][55] /* ty=Tensor[(12, 50), uint16] */, %var_6556, meta[relay.Constant][56] /* ty=uint8 */)
}

def @func_8289() -> (Tensor[(600), uint16],) {
  %864 = @func_5352() /* ty=(Tensor[(55), float64], Tensor[(525), float32], Tensor[(600), uint16], Tensor[(525), float32], uint8, Tensor[(50), uint16]) */;
  %865 = %864.2;
  (%865,)
}

def @func_12940(%var_12905: Tensor[(525), float32], %var_12914: Tensor[(12, 50), uint16]) -> (Tensor[(210), uint64], Tensor[(525), float32], Tensor[(12, 50), uint16], Tensor[(5, 1, 15), uint16]) {
  %866 = cast(%var_12905, dtype="float32") /* ty=Tensor[(525), float32] */;
  %867 = reshape(%866, newshape=[525]) /* ty=Tensor[(525), float32] */;
  %868 = @func_6561(%867) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(525), float32], Tensor[(12, 50), uint16], Tensor[(525), float32], uint8) */;
  %869 = %868.2;
  %870 = cast(%var_12914, dtype="uint16") /* ty=Tensor[(12, 50), uint16] */;
  %871 = shape_of(%869, dtype="int32") /* ty=Tensor[(2), int32] */;
  %872 = cast(%869, dtype="uint16") /* ty=Tensor[(12, 50), uint16] */;
  %873 = dyn.reshape(%870, %871, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %874 = @func_12277() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64], Tensor[(5, 1, 15), uint16], Tensor[(55, ?), float64]) */;
  %875 = @func_7712() /* ty=Tensor[(210), uint64] */;
  %876 = left_shift(%872, %873) /* ty=Tensor[(12, 50), uint16] */;
  %877 = %874.2;
  (%875, %var_12905, %876, %877)
}

def @func_7226(%var_7215: Tensor[(55), float64]) -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16], Tensor[(55), float64]) {
  %878 = @func_6439() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64]) */;
  %879 = cast(%var_7215, dtype="float64") /* ty=Tensor[(55), float64] */;
  %880 = reshape(%879, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %881 = @func_6295(%880) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16], Tensor[(5, 9, 11), float64], Tensor[(55), float64], Tensor[(495), float64]) */;
  %882 = %878.0;
  %883 = %881.0;
  (%882, %883, %var_7215)
}

def @func_561(%var_549: Tensor[(15, 5, 7), float32], %var_558: Tensor[(40), float32]) -> (Tensor[(15, 5, 7), float64], Tensor[(2, 4, 5), float32], Tensor[(40), float32]) {
  %884 = cast(%var_549, dtype="float32") /* ty=Tensor[(15, 5, 7), float32] */;
  %885 = cosh(%884) /* ty=Tensor[(15, 5, 7), float32] */;
  %886 = cast(%885, dtype="float64") /* ty=Tensor[(15, 5, 7), float64] */;
  %887 = cast(%var_558, dtype="float32") /* ty=Tensor[(40), float32] */;
  %888 = reshape(%887, newshape=[2, 4, 5]) /* ty=Tensor[(2, 4, 5), float32] */;
  %889 = erf(%886) /* ty=Tensor[(15, 5, 7), float64] */;
  %890 = @func_151(%888) /* ty=Tensor[(2, 4, 5), float32] */;
  (%889, %890, %var_558)
}

def @func_6246(%var_6242: Tensor[(112), uint8], %var_6243: Tensor[(525), float32]) -> (Tensor[(55, ?), float64], Tensor[(112), uint8], Tensor[(112), uint8], Tensor[(525), float32]) {
  %891 = cast(%var_6242, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %892 = cast(%var_6243, dtype="float32") /* ty=Tensor[(525), float32] */;
  %893 = cast(%var_6243, dtype="float32") /* ty=Tensor[(525), float32] */;
  %894 = reshape(%891, newshape=[112]) /* ty=Tensor[(112), uint8] */;
  %895 = reshape(%892, newshape=[5, 105]) /* ty=Tensor[(5, 105), float32] */;
  %896 = reshape(%893, newshape=[5, 105]) /* ty=Tensor[(5, 105), float32] */;
  %897 = @func_4529(%894, %895, %896) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(2, 4, 5), float32], Tensor[(112), uint8], Tensor[(5, 105), bool], Tensor[(15, 5, 7), float64], Tensor[(5, 105), float64]) */;
  %898 = @func_5852() /* ty=Tensor[(55, ?), float64] */;
  %899 = %897.2;
  (%898, %899, %var_6242, %var_6243)
}

def @func_12980() -> (Tensor[(5, 1, 15), uint16],) {
  %900 = @func_8368() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %901 = %900.0;
  (%901,)
}

def @func_4529(%var_4482: Tensor[(112), uint8], %var_4483: Tensor[(5, 105), float32], %var_4501: Tensor[(5, 105), float32]) -> (Tensor[(5, 1, 15), uint16], Tensor[(2, 4, 5), float32], Tensor[(112), uint8], Tensor[(5, 105), bool], Tensor[(15, 5, 7), float64], Tensor[(5, 105), float64]) {
  %902 = cast(meta[relay.Constant][57] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %903 = cast(%var_4482, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %904 = cast(%var_4483, dtype="float32") /* ty=Tensor[(5, 105), float32] */;
  %905 = reshape(%902, newshape=[]) /* ty=uint8 */;
  %906 = reshape(%903, newshape=[14, 8, 1]) /* ty=Tensor[(14, 8, 1), uint8] */;
  %907 = reshape(%904, newshape=[525]) /* ty=Tensor[(525), float32] */;
  %908 = @func_746(%905, %906, %907) /* ty=(Tensor[(14, 8, 1), bool], Tensor[(14, 8, 1), float32], Tensor[(2, 4, 5), float32], Tensor[(525), float32], Tensor[(40), float32], Tensor[(2, 4, 5), float32]) */;
  %909 = cast(meta[relay.Constant][57] /* ty=uint8 */, dtype="int32") /* ty=int32 */;
  %910 = cast(%var_4483, dtype="int32") /* ty=Tensor[(5, 105), int32] */;
  %911 = bitwise_or(%909, %910) /* ty=Tensor[(5, 105), int32] */;
  %912 = cast(%911, dtype="float32") /* ty=Tensor[(5, 105), float32] */;
  %913 = shape_of(%var_4483, dtype="int32") /* ty=Tensor[(2), int32] */;
  %914 = cast(%var_4483, dtype="float32") /* ty=Tensor[(5, 105), float32] */;
  %915 = dyn.reshape(%912, %913, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %916 = minimum(%914, %915) /* ty=Tensor[(5, 105), float32] */;
  %917 = cast(%var_4501, dtype="bool") /* ty=Tensor[(5, 105), bool] */;
  %918 = shape_of(%916, dtype="int32") /* ty=Tensor[(2), int32] */;
  %919 = cast(%916, dtype="bool") /* ty=Tensor[(5, 105), bool] */;
  %920 = dyn.reshape(%917, %918, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %921 = greater_equal(%919, %920) /* ty=Tensor[(5, 105), bool] */;
  %922 = cast(%921, dtype="float32") /* ty=Tensor[(5, 105), float32] */;
  %923 = %908.2;
  %924 = cast(%923, dtype="float32") /* ty=Tensor[(2, 4, 5), float32] */;
  %925 = reshape(%922, newshape=[15, 5, 7]) /* ty=Tensor[(15, 5, 7), float32] */;
  %926 = reshape(%924, newshape=[40]) /* ty=Tensor[(40), float32] */;
  %927 = @func_561(%925, %926) /* ty=(Tensor[(15, 5, 7), float64], Tensor[(2, 4, 5), float32], Tensor[(40), float32]) */;
  %928 = cast(%var_4501, dtype="float64") /* ty=Tensor[(5, 105), float64] */;
  %929 = @func_4250() /* ty=Tensor[(5, 1, 15), uint16] */;
  %930 = %927.0;
  %931 = log(%928) /* ty=Tensor[(5, 105), float64] */;
  (%929, %923, %var_4482, %921, %930, %931)
}

def @func_10873(%var_10836: Tensor[(12, 8, 15), float64]) -> (Tensor[(12, 8, 15), float64], Tensor[(5, 1, 15), uint16]) {
  %932 = cast(%var_10836, dtype="float64") /* ty=Tensor[(12, 8, 15), float64] */;
  %933 = @func_10207() /* ty=(Tensor[(55, ?), float64], Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64]) */;
  %934 = tan(%932) /* ty=Tensor[(12, 8, 15), float64] */;
  %935 = %933.1;
  (%934, %935)
}

def @func_13426() -> (Tensor[(16, 3, 16), float32], Tensor[(55, ?), float64], Tensor[(5, 1, 15), uint16]) {
  %936 = @func_9758() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %937 = @func_8023() /* ty=(Tensor[(55, ?), float64],) */;
  %938 = @func_11133() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %939 = %936.0;
  %940 = %937.0;
  %941 = %938.0;
  (%939, %940, %941)
}

def @func_10238() -> Tensor[(5, 1, 15), uint16] {
  %942 = @func_8148() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %942.0
}

def @func_6073(%var_6052: Tensor[(7, 7, 15), uint16]) -> (Tensor[(7, 7, 15), uint16], Tensor[(5, 1, 15), uint16]) {
  %943 = cast(%var_6052, dtype="uint16") /* ty=Tensor[(7, 7, 15), uint16] */;
  %944 = shape_of(meta[relay.Constant][58] /* ty=Tensor[(7, 7, 15), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %945 = cast(meta[relay.Constant][58] /* ty=Tensor[(7, 7, 15), uint16] */, dtype="uint16") /* ty=Tensor[(7, 7, 15), uint16] */;
  %946 = dyn.reshape(%943, %944, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %947 = subtract(%945, %946) /* ty=Tensor[(7, 7, 15), uint16] */;
  %948 = @func_4250() /* ty=Tensor[(5, 1, 15), uint16] */;
  (%947, %948)
}

def @func_4595(%var_4589: uint8, %var_4591: Tensor[(525), float32]) -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16], Tensor[(2, 4, 5), float32], uint8, Tensor[(112), uint8], Tensor[(525), float32]) {
  %949 = @func_3729() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %950 = @func_3729() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %951 = cast(%var_4589, dtype="uint8") /* ty=uint8 */;
  %952 = cast(meta[relay.Constant][59] /* ty=Tensor[(112), uint8] */, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %953 = cast(%var_4591, dtype="float32") /* ty=Tensor[(525), float32] */;
  %954 = reshape(%951, newshape=[]) /* ty=uint8 */;
  %955 = reshape(%952, newshape=[14, 8, 1]) /* ty=Tensor[(14, 8, 1), uint8] */;
  %956 = reshape(%953, newshape=[525]) /* ty=Tensor[(525), float32] */;
  %957 = @func_746(%954, %955, %956) /* ty=(Tensor[(14, 8, 1), bool], Tensor[(14, 8, 1), float32], Tensor[(2, 4, 5), float32], Tensor[(525), float32], Tensor[(40), float32], Tensor[(2, 4, 5), float32]) */;
  %958 = %949.0;
  %959 = %950.0;
  %960 = %957.2;
  (%958, %959, %960, %var_4589, meta[relay.Constant][59] /* ty=Tensor[(112), uint8] */, %var_4591)
}

def @func_7712() -> Tensor[(210), uint64] {
  %961 = @func_5196() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(210), uint64], Tensor[(2, 300), uint16], Tensor[(55), float64], Tensor[(10, 5, 12), float64], Tensor[(5, 16, 15), int32]) */;
  %961.1
}

def @func_8148() -> (Tensor[(5, 1, 15), uint16],) {
  %962 = @func_4471() /* ty=Tensor[(5, 1, 15), uint16] */;
  (%962,)
}

def @func_4453(%var_4414: Tensor[(15, 5, 16), float64]) -> (Tensor[(15, 5, 16), float64], Tensor[(5, 1, 15), uint16], Tensor[(5, 16, 15), int32], Tensor[(210), uint64], Tensor[(600), uint16], Tensor[(55), float64]) {
  %963 = cast(%var_4414, dtype="float64") /* ty=Tensor[(15, 5, 16), float64] */;
  %964 = @func_3729() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %965 = cast(%var_4414, dtype="int32") /* ty=Tensor[(15, 5, 16), int32] */;
  %966 = cast(meta[relay.Constant][60] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %967 = cast(meta[relay.Constant][61] /* ty=Tensor[(600), uint16] */, dtype="uint16") /* ty=Tensor[(600), uint16] */;
  %968 = cast(meta[relay.Constant][62] /* ty=Tensor[(55), float64] */, dtype="float64") /* ty=Tensor[(55), float64] */;
  %969 = reshape(%965, newshape=[5, 16, 15]) /* ty=Tensor[(5, 16, 15), int32] */;
  %970 = reshape(%966, newshape=[210, 1]) /* ty=Tensor[(210, 1), uint64] */;
  %971 = reshape(%967, newshape=[600]) /* ty=Tensor[(600), uint16] */;
  %972 = reshape(%968, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %973 = @func_3648(%969, %970, %971, %972) /* ty=(Tensor[(5, 16, 15), int32], Tensor[(10, 5), uint16], Tensor[(210, 1), uint64], Tensor[(600), uint16], Tensor[(55), float64]) */;
  %974 = exp(%963) /* ty=Tensor[(15, 5, 16), float64] */;
  %975 = %964.0;
  %976 = %973.0;
  (%974, %975, %976, meta[relay.Constant][60] /* ty=Tensor[(210), uint64] */, meta[relay.Constant][61] /* ty=Tensor[(600), uint16] */, meta[relay.Constant][62] /* ty=Tensor[(55), float64] */)
}

def @func_9437() -> (Tensor[(5, ?, 15), int64],) {
  %977 = @func_6091() /* ty=(Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) */;
  %978 = %977.0;
  (%978,)
}

def @func_13640() -> Tensor[(55, 1), float64] {
  %979 = @func_5282() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(210), uint64], Tensor[(55, 1), float64], Tensor[(55), float64]) */;
  %979.2
}

def @func_1888(%var_1863: Tensor[(6, 7, 5), uint64], %var_1876: Tensor[(600), uint16], %var_1881: Tensor[(55), float64]) -> (Tensor[(6, 7, 5), uint64], Tensor[(10, 5, 12), uint16], Tensor[(10, 5), uint16], Tensor[(600), uint16], Tensor[(5, 9, 11), float64], Tensor[(55), float64], Tensor[(495), float64]) {
  %980 = cast(%var_1863, dtype="uint64") /* ty=Tensor[(6, 7, 5), uint64] */;
  %981 = shape_of(meta[relay.Constant][63] /* ty=Tensor[(6, 7, 5), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %982 = cast(meta[relay.Constant][63] /* ty=Tensor[(6, 7, 5), uint64] */, dtype="uint64") /* ty=Tensor[(6, 7, 5), uint64] */;
  %983 = dyn.reshape(%980, %981, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %984 = cast(meta[relay.Constant][64] /* ty=Tensor[(10, 5), uint16] */, dtype="uint16") /* ty=Tensor[(10, 5), uint16] */;
  %985 = cast(%var_1876, dtype="uint16") /* ty=Tensor[(600), uint16] */;
  %986 = reshape(%984, newshape=[10, 5, 1]) /* ty=Tensor[(10, 5, 1), uint16] */;
  %987 = reshape(%985, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), uint16] */;
  %988 = cast(%var_1881, dtype="float64") /* ty=Tensor[(55), float64] */;
  %989 = cast(meta[relay.Constant][65] /* ty=Tensor[(495), float64] */, dtype="float64") /* ty=Tensor[(495), float64] */;
  %990 = reshape(%988, newshape=[5, 1, 11]) /* ty=Tensor[(5, 1, 11), float64] */;
  %991 = reshape(%989, newshape=[5, 9, 11]) /* ty=Tensor[(5, 9, 11), float64] */;
  %992 = bitwise_xor(%982, %983) /* ty=Tensor[(6, 7, 5), uint64] */;
  %993 = @func_852(%986, %987) /* ty=Tensor[(10, 5, 12), uint16] */;
  %994 = @func_820(%990, %991) /* ty=Tensor[(5, 9, 11), float64] */;
  (%992, %993, meta[relay.Constant][64] /* ty=Tensor[(10, 5), uint16] */, %var_1876, %994, %var_1881, meta[relay.Constant][65] /* ty=Tensor[(495), float64] */)
}

def @func_8795() -> (Tensor[(12, 11, 1), float32], Tensor[(5, 1, 15), uint16]) {
  %995 = @func_7952() /* ty=(Tensor[(12, 11, 1), float32],) */;
  %996 = %995.0;
  %997 = @func_4250() /* ty=Tensor[(5, 1, 15), uint16] */;
  (%996, %997)
}

def @func_9086() -> (Tensor[(40), float32], Tensor[(5, 1, 15), uint16]) {
  %998 = @func_5326() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(2, 4, 5), float32], Tensor[(40), float32], Tensor[(5, 1, 15), uint16], Tensor[(210), uint64]) */;
  %999 = %998.2;
  %1000 = @func_4951() /* ty=Tensor[(5, 1, 15), uint16] */;
  (%999, %1000)
}

def @func_9108() -> Tensor[(55, ?), float64] {
  %1001 = @func_7393() /* ty=Tensor[(55, ?), float64] */;
  %1002 = cast(%1001, dtype="float64") /* ty=Tensor[(55, ?), float64] */;
  log(%1002) /* ty=Tensor[(55, ?), float64] */
}

def @func_7541() -> (Tensor[(55, ?), float64],) {
  %1003 = @func_7393() /* ty=Tensor[(55, ?), float64] */;
  (%1003,)
}

def @func_12785() -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64]) {
  %1004 = @func_8368() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %1005 = @func_9391() /* ty=(Tensor[(5, 1, 15), float64],) */;
  %1006 = %1004.0;
  %1007 = %1005.0;
  (%1006, %1007)
}

def @func_8412() -> (Tensor[(5, 1, 15), float64],) {
  %1008 = @func_5947() /* ty=Tensor[(5, 1, 15), float64] */;
  (%1008,)
}

def @func_5352() -> (Tensor[(55), float64], Tensor[(525), float32], Tensor[(600), uint16], Tensor[(525), float32], uint8, Tensor[(50), uint16]) {
  %1009 = @func_5282() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(210), uint64], Tensor[(55, 1), float64], Tensor[(55), float64]) */;
  %1010 = cast(meta[relay.Constant][66] /* ty=Tensor[(600), uint16] */, dtype="uint16") /* ty=Tensor[(600), uint16] */;
  %1011 = cast(meta[relay.Constant][67] /* ty=Tensor[(525), float32] */, dtype="float32") /* ty=Tensor[(525), float32] */;
  %1012 = cast(meta[relay.Constant][68] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %1013 = reshape(%1010, newshape=[600]) /* ty=Tensor[(600), uint16] */;
  %1014 = reshape(%1011, newshape=[525]) /* ty=Tensor[(525), float32] */;
  %1015 = reshape(%1012, newshape=[]) /* ty=uint8 */;
  %1016 = @func_4868(%1013, %1014, %1015) /* ty=(Tensor[(5, ?, 15), float32], Tensor[(5, 1, 15), uint16], Tensor[(600), uint16], Tensor[(525), float32], Tensor[(14, 8, 1), float32], uint8, Tensor[(2, 56), uint8]) */;
  %1017 = cast(meta[relay.Constant][66] /* ty=Tensor[(600), uint16] */, dtype="uint16") /* ty=Tensor[(600), uint16] */;
  %1018 = cast(meta[relay.Constant][67] /* ty=Tensor[(525), float32] */, dtype="float32") /* ty=Tensor[(525), float32] */;
  %1019 = reshape(%1017, newshape=[600]) /* ty=Tensor[(600), uint16] */;
  %1020 = reshape(%1018, newshape=[525]) /* ty=Tensor[(525), float32] */;
  %1021 = @func_4638(%1019, %1020) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(10, 5, 12), uint16], Tensor[(50), uint16], Tensor[(600), uint16], Tensor[(5, 1, 15), uint16], Tensor[(112), uint8], Tensor[(525), float32], Tensor[(5, 1, 15), uint16]) */;
  %1022 = %1009.3;
  %1023 = %1016.3;
  %1024 = %1021.2;
  (%1022, %1023, meta[relay.Constant][66] /* ty=Tensor[(600), uint16] */, meta[relay.Constant][67] /* ty=Tensor[(525), float32] */, meta[relay.Constant][68] /* ty=uint8 */, %1024)
}

def @func_12091() -> (Tensor[(10, 5, 12), float64],) {
  %1025 = @func_5196() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(210), uint64], Tensor[(2, 300), uint16], Tensor[(55), float64], Tensor[(10, 5, 12), float64], Tensor[(5, 16, 15), int32]) */;
  %1026 = %1025.4;
  (%1026,)
}

def @func_3819() -> Tensor[(5, 1, 15), uint16] {
  %1027 = @func_3729() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %1027.0
}

def @func_6091() -> (Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) {
  %1028 = @func_5007() /* ty=(Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) */;
  %1029 = %1028.0;
  %1030 = @func_4951() /* ty=Tensor[(5, 1, 15), uint16] */;
  (%1029, %1030)
}

def @func_746(%var_717: uint8, %var_718: Tensor[(14, 8, 1), uint8], %var_737: Tensor[(525), float32]) -> (Tensor[(14, 8, 1), bool], Tensor[(14, 8, 1), float32], Tensor[(2, 4, 5), float32], Tensor[(525), float32], Tensor[(40), float32], Tensor[(2, 4, 5), float32]) {
  %1031 = cast(%var_717, dtype="bool") /* ty=bool */;
  %1032 = cast(%var_718, dtype="bool") /* ty=Tensor[(14, 8, 1), bool] */;
  %1033 = cast(%var_718, dtype="float32") /* ty=Tensor[(14, 8, 1), float32] */;
  %1034 = cast(%var_717, dtype="float32") /* ty=float32 */;
  %1035 = cast(%var_737, dtype="float32") /* ty=Tensor[(525), float32] */;
  %1036 = cast(meta[relay.Constant][69] /* ty=Tensor[(40), float32] */, dtype="float32") /* ty=Tensor[(40), float32] */;
  %1037 = reshape(%1035, newshape=[15, 5, 7]) /* ty=Tensor[(15, 5, 7), float32] */;
  %1038 = reshape(%1036, newshape=[40]) /* ty=Tensor[(40), float32] */;
  %1039 = @func_561(%1037, %1038) /* ty=(Tensor[(15, 5, 7), float64], Tensor[(2, 4, 5), float32], Tensor[(40), float32]) */;
  %1040 = cast(%var_737, dtype="float32") /* ty=Tensor[(525), float32] */;
  %1041 = cast(meta[relay.Constant][69] /* ty=Tensor[(40), float32] */, dtype="float32") /* ty=Tensor[(40), float32] */;
  %1042 = reshape(%1040, newshape=[15, 5, 7]) /* ty=Tensor[(15, 5, 7), float32] */;
  %1043 = reshape(%1041, newshape=[40]) /* ty=Tensor[(40), float32] */;
  %1044 = @func_561(%1042, %1043) /* ty=(Tensor[(15, 5, 7), float64], Tensor[(2, 4, 5), float32], Tensor[(40), float32]) */;
  %1045 = less(%1031, %1032) /* ty=Tensor[(14, 8, 1), bool] */;
  %1046 = multiply(%1033, %1034) /* ty=Tensor[(14, 8, 1), float32] */;
  %1047 = %1039.1;
  %1048 = %1044.1;
  (%1045, %1046, %1047, %var_737, meta[relay.Constant][69] /* ty=Tensor[(40), float32] */, %1048)
}

def @func_6691() -> (Tensor[(12, 11, 4), float32], Tensor[(5, ?, 15), bool]) {
  %1049 = @func_4951() /* ty=Tensor[(5, 1, 15), uint16] */;
  %1050 = cast(%1049, dtype="float64") /* ty=Tensor[(5, 1, 15), float64] */;
  %1051 = sin(%1050) /* ty=Tensor[(5, 1, 15), float64] */;
  %1052 = cast(%1049, dtype="bool") /* ty=Tensor[(5, 1, 15), bool] */;
  %1053 = shape_of(%1051, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1054 = cast(%1051, dtype="bool") /* ty=Tensor[(5, 1, 15), bool] */;
  %1055 = dyn.reshape(%1052, %1053, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1056 = @func_5569() /* ty=Tensor[(12, 11, 4), float32] */;
  %1057 = greater(%1054, %1055) /* ty=Tensor[(5, ?, 15), bool] */;
  (%1056, %1057)
}

def @func_10207() -> (Tensor[(55, ?), float64], Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64]) {
  %1058 = @func_8023() /* ty=(Tensor[(55, ?), float64],) */;
  %1059 = @func_8148() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %1060 = @func_9149() /* ty=(Tensor[(55, ?), float64], Tensor[(5, 1, 15), float64]) */;
  %1061 = %1058.0;
  %1062 = %1059.0;
  %1063 = %1060.1;
  (%1061, %1062, %1063)
}

def @func_10272() -> Tensor[(55, ?), float32] {
  %1064 = @func_9108() /* ty=Tensor[(55, ?), float64] */;
  %1065 = cast(%1064, dtype="float32") /* ty=Tensor[(55, ?), float32] */;
  %1066 = erf(%1065) /* ty=Tensor[(55, ?), float32] */;
  %1067 = cast(%1066, dtype="float32") /* ty=Tensor[(55, ?), float32] */;
  sigmoid(%1067) /* ty=Tensor[(55, ?), float32] */
}

def @func_11495() -> Tensor[(5, 1, 15), uint16] {
  %1068 = @func_9182() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %1068.0
}

def @func_9182() -> (Tensor[(5, 1, 15), uint16],) {
  %1069 = @func_8368() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %1070 = %1069.0;
  (%1070,)
}

def @func_10910() -> Tensor[(16, 3, 16), float32] {
  %1071 = @func_9758() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %1071.0
}

def @func_13947() -> (Tensor[(5, 1, 15), uint16],) {
  %1072 = @func_9182() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %1073 = %1072.0;
  (%1073,)
}

def @func_820(%var_810: Tensor[(5, 1, 11), float64], %var_811: Tensor[(5, 9, 11), float64]) -> Tensor[(5, 9, 11), float64] {
  %1074 = cast(%var_810, dtype="float64") /* ty=Tensor[(5, 1, 11), float64] */;
  %1075 = cast(%var_811, dtype="float64") /* ty=Tensor[(5, 9, 11), float64] */;
  floor_mod(%1074, %1075) /* ty=Tensor[(5, 9, 11), float64] */
}

def @func_12894(%var_12892: Tensor[(112), uint8]) -> (Tensor[(?, 13, 7), uint32], Tensor[(1, 13, 7), float64], Tensor[(5, 105), bool], Tensor[(112), uint8]) {
  %1076 = cast(meta[relay.Constant][71] /* ty=Tensor[(1, 13, 7), uint32] */, dtype="uint32") /* ty=Tensor[(1, 13, 7), uint32] */;
  %1077 = shape_of(meta[relay.Constant][70] /* ty=Tensor[(1, 13, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1078 = cast(meta[relay.Constant][70] /* ty=Tensor[(1, 13, 7), uint32] */, dtype="uint32") /* ty=Tensor[(1, 13, 7), uint32] */;
  %1079 = dyn.reshape(%1076, %1077, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1080 = cast(meta[relay.Constant][70] /* ty=Tensor[(1, 13, 7), uint32] */, dtype="float64") /* ty=Tensor[(1, 13, 7), float64] */;
  %1081 = cast(%var_12892, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %1082 = reshape(%1081, newshape=[112]) /* ty=Tensor[(112), uint8] */;
  %1083 = @func_6908(%1082) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 105), bool], Tensor[(112), uint8], Tensor[(525), float32]) */;
  %1084 = bitwise_and(%1078, %1079) /* ty=Tensor[(?, 13, 7), uint32] */;
  %1085 = sigmoid(%1080) /* ty=Tensor[(1, 13, 7), float64] */;
  %1086 = %1083.1;
  (%1084, %1085, %1086, %var_12892)
}

def @func_13910() -> (Tensor[(10, 5, 12), float64], Tensor[(5, 1, 15), uint16], Tensor[(55, ?), float32]) {
  %1087 = @func_13174() /* ty=(Tensor[(10, 5, 12), float64], Tensor[(16, 3, 16), float32]) */;
  %1088 = @func_9086() /* ty=(Tensor[(40), float32], Tensor[(5, 1, 15), uint16]) */;
  %1089 = @func_6345() /* ty=(Tensor[(55, ?), float32],) */;
  %1090 = %1087.0;
  %1091 = %1088.1;
  %1092 = %1089.0;
  (%1090, %1091, %1092)
}

def @func_14024(%var_14021: Tensor[(4, 28), uint8], %var_14022: Tensor[(525), float32]) -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16], Tensor[(112), uint8], Tensor[(4, 28), uint8], Tensor[(525), float32]) {
  %1093 = @func_6091() /* ty=(Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) */;
  %1094 = @func_4213() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %1095 = cast(%var_14021, dtype="uint8") /* ty=Tensor[(4, 28), uint8] */;
  %1096 = cast(%var_14022, dtype="float32") /* ty=Tensor[(525), float32] */;
  %1097 = reshape(%1095, newshape=[112]) /* ty=Tensor[(112), uint8] */;
  %1098 = reshape(%1096, newshape=[525]) /* ty=Tensor[(525), float32] */;
  %1099 = @func_6246(%1097, %1098) /* ty=(Tensor[(55, ?), float64], Tensor[(112), uint8], Tensor[(112), uint8], Tensor[(525), float32]) */;
  %1100 = %1093.1;
  %1101 = %1094.0;
  %1102 = %1099.2;
  (%1100, %1101, %1102, %var_14021, %var_14022)
}

def @func_13174() -> (Tensor[(10, 5, 12), float64], Tensor[(16, 3, 16), float32]) {
  %1103 = @func_10018() /* ty=Tensor[(10, 5, 12), float64] */;
  %1104 = @func_10910() /* ty=Tensor[(16, 3, 16), float32] */;
  (%1103, %1104)
}

def @func_12857() -> (Tensor[(5, 55, 15), bool], Tensor[(5, 1, 15), uint16]) {
  %1105 = @func_9993() /* ty=Tensor[(55, ?), float32] */;
  %1106 = @func_10238() /* ty=Tensor[(5, 1, 15), uint16] */;
  %1107 = cast(%1105, dtype="bool") /* ty=Tensor[(55, ?), bool] */;
  %1108 = cast(%1106, dtype="bool") /* ty=Tensor[(5, 1, 15), bool] */;
  %1109 = @func_9182() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %1110 = less(%1107, %1108) /* ty=Tensor[(5, 55, 15), bool] */;
  %1111 = %1109.0;
  (%1110, %1111)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6755() -> Tensor[(5, ?, 15), float32] {
  @func_6753() /* ty=Tensor[(5, ?, 15), float32] */
}

def @func_9182() -> (Tensor[(5, 1, 15), uint16],) {
  %0 = @func_8368() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %1 = %0.0;
  (%1,)
}

def @func_9184() -> (Tensor[(5, 1, 15), uint16],) {
  @func_9182() /* ty=(Tensor[(5, 1, 15), uint16],) */
}

def @func_7952() -> (Tensor[(12, 11, 1), float32],) {
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 11, 1), float32] */, dtype="float32") /* ty=Tensor[(12, 11, 1), float32] */;
  %3 = cosh(%2) /* ty=Tensor[(12, 11, 1), float32] */;
  (%3,)
}

def @func_11613() -> (Tensor[(600), uint16], Tensor[(5, 1, 15), uint16]) {
  %8 = fn () -> (Tensor[(600), uint16], Tensor[(5, 1, 15), uint16]) {
    %4 = @func_8289() /* ty=(Tensor[(600), uint16],) */;
    %5 = @func_8368() /* ty=(Tensor[(5, 1, 15), uint16],) */;
    %6 = %4.0;
    %7 = %5.0;
    (%6, %7)
  };
  %8() /* ty=(Tensor[(600), uint16], Tensor[(5, 1, 15), uint16]) */
}

def @func_8414() -> (Tensor[(5, 1, 15), float64],) {
  @func_8412() /* ty=(Tensor[(5, 1, 15), float64],) */
}

def @func_10207() -> (Tensor[(55, ?), float64], Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64]) {
  %9 = @func_8023() /* ty=(Tensor[(55, ?), float64],) */;
  %10 = @func_8148() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %11 = @func_9149() /* ty=(Tensor[(55, ?), float64], Tensor[(5, 1, 15), float64]) */;
  %12 = %9.0;
  %13 = %10.0;
  %14 = %11.1;
  (%12, %13, %14)
}

def @func_10973() -> (Tensor[(5, 1, 15), uint16],) {
  %17 = fn () -> (Tensor[(5, 1, 15), uint16],) {
    %15 = @func_5007() /* ty=(Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) */;
    %16 = %15.1;
    (%16,)
  };
  %17() /* ty=(Tensor[(5, 1, 15), uint16],) */
}

def @func_13948() -> (Tensor[(5, 1, 15), uint16],) {
  %20 = fn () -> (Tensor[(5, 1, 15), uint16],) {
    %18 = @func_9182() /* ty=(Tensor[(5, 1, 15), uint16],) */;
    %19 = %18.0;
    (%19,)
  };
  %20() /* ty=(Tensor[(5, 1, 15), uint16],) */
}

def @func_13704() -> (Tensor[(40), float32], Tensor[(1, 600), uint16]) {
  @func_13702() /* ty=(Tensor[(40), float32], Tensor[(1, 600), uint16]) */
}

def @func_7722() -> (Tensor[(5, ?, 15), float32],) {
  %23 = fn () -> (Tensor[(5, ?, 15), float32],) {
    %21 = @func_6498() /* ty=(Tensor[(5, ?, 15), float32], Tensor[(5, 1, 15), float64], Tensor[(10, 5, 12), uint16], Tensor[(50), uint16], Tensor[(1, 600), uint16]) */;
    %22 = %21.0;
    (%22,)
  };
  %23() /* ty=(Tensor[(5, ?, 15), float32],) */
}

def @func_13843(%var_13839: Tensor[(12, 4, 9), int16], %var_13840: Tensor[(12, 4, 9), int16], %var_13841: Tensor[(1050), uint16], %var_13842: Tensor[(28, 4), uint8]) -> (Tensor[(12, 4, 9), int16], Tensor[(50), uint16], Tensor[(1050), uint16], Tensor[(2, 4, 5), float32], Tensor[(28, 4), uint8], Tensor[(525), float32]) {
  %41 = fn (%var_13800: Tensor[(12, 4, 9), int16], %var_13801: Tensor[(12, 4, 9), int16], %var_13806: Tensor[(1050), uint16], %var_13814: Tensor[(28, 4), uint8]) -> (Tensor[(12, 4, 9), int16], Tensor[(50), uint16], Tensor[(1050), uint16], Tensor[(2, 4, 5), float32], Tensor[(28, 4), uint8], Tensor[(525), float32]) {
    %24 = cast(%var_13801, dtype="int16") /* ty=Tensor[(12, 4, 9), int16] */;
    %25 = shape_of(%var_13800, dtype="int32") /* ty=Tensor[(3), int32] */;
    %26 = cast(%var_13800, dtype="int16") /* ty=Tensor[(12, 4, 9), int16] */;
    %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %28 = cast(%var_13806, dtype="uint16") /* ty=Tensor[(1050), uint16] */;
    %29 = reshape(%28, newshape=[5, 14, 15]) /* ty=Tensor[(5, 14, 15), uint16] */;
    %30 = @func_7294(%29) /* ty=(Tensor[(5, 14, 15), uint8], Tensor[(50), uint16]) */;
    %31 = cast(%var_13814, dtype="uint8") /* ty=Tensor[(28, 4), uint8] */;
    %32 = cast(meta[relay.Constant][1] /* ty=Tensor[(525), float32] */, dtype="float32") /* ty=Tensor[(525), float32] */;
    %33 = cast(meta[relay.Constant][1] /* ty=Tensor[(525), float32] */, dtype="float32") /* ty=Tensor[(525), float32] */;
    %34 = reshape(%31, newshape=[112]) /* ty=Tensor[(112), uint8] */;
    %35 = reshape(%32, newshape=[5, 105]) /* ty=Tensor[(5, 105), float32] */;
    %36 = reshape(%33, newshape=[5, 105]) /* ty=Tensor[(5, 105), float32] */;
    %37 = @func_4529(%34, %35, %36) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(2, 4, 5), float32], Tensor[(112), uint8], Tensor[(5, 105), bool], Tensor[(15, 5, 7), float64], Tensor[(5, 105), float64]) */;
    %38 = minimum(%26, %27) /* ty=Tensor[(12, 4, 9), int16] */;
    %39 = %30.1;
    %40 = %37.1;
    (%38, %39, %var_13806, %40, %var_13814, meta[relay.Constant][1] /* ty=Tensor[(525), float32] */)
  };
  %41(%var_13839, %var_13840, %var_13841, %var_13842) /* ty=(Tensor[(12, 4, 9), int16], Tensor[(50), uint16], Tensor[(1050), uint16], Tensor[(2, 4, 5), float32], Tensor[(28, 4), uint8], Tensor[(525), float32]) */
}

def @func_4139(%var_4129: Tensor[(55), float64]) -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 16, 15), int32], Tensor[(4, 300), int32], Tensor[(210), uint64], Tensor[(6, 100), uint16], Tensor[(55), float64]) {
  %42 = @func_3729() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %43 = cast(meta[relay.Constant][2] /* ty=Tensor[(4, 300), int32] */, dtype="int32") /* ty=Tensor[(4, 300), int32] */;
  %44 = cast(meta[relay.Constant][3] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %45 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 100), uint16] */, dtype="uint16") /* ty=Tensor[(6, 100), uint16] */;
  %46 = cast(%var_4129, dtype="float64") /* ty=Tensor[(55), float64] */;
  %47 = reshape(%43, newshape=[5, 16, 15]) /* ty=Tensor[(5, 16, 15), int32] */;
  %48 = reshape(%44, newshape=[210, 1]) /* ty=Tensor[(210, 1), uint64] */;
  %49 = reshape(%45, newshape=[600]) /* ty=Tensor[(600), uint16] */;
  %50 = reshape(%46, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %51 = @func_3648(%47, %48, %49, %50) /* ty=(Tensor[(5, 16, 15), int32], Tensor[(10, 5), uint16], Tensor[(210, 1), uint64], Tensor[(600), uint16], Tensor[(55), float64]) */;
  %52 = %42.0;
  %53 = %51.0;
  (%52, %53, meta[relay.Constant][2] /* ty=Tensor[(4, 300), int32] */, meta[relay.Constant][3] /* ty=Tensor[(210), uint64] */, meta[relay.Constant][4] /* ty=Tensor[(6, 100), uint16] */, %var_4129)
}

def @func_4142(%var_4140: Tensor[(55), float64]) -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 16, 15), int32], Tensor[(4, 300), int32], Tensor[(210), uint64], Tensor[(6, 100), uint16], Tensor[(55), float64]) {
  @func_4139(%var_4140) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 16, 15), int32], Tensor[(4, 300), int32], Tensor[(210), uint64], Tensor[(6, 100), uint16], Tensor[(55), float64]) */
}

def @func_10379() -> Tensor[(55, ?), float32] {
  @func_10377() /* ty=Tensor[(55, ?), float32] */
}

def @func_6753() -> Tensor[(5, ?, 15), float32] {
  %54 = @func_4199() /* ty=(Tensor[(5, ?, 15), float32],) */;
  %54.0
}

def @func_9110() -> Tensor[(55, ?), float64] {
  @func_9108() /* ty=Tensor[(55, ?), float64] */
}

def @func_855(%var_853: Tensor[(10, 5, 1), uint16], %var_854: Tensor[(10, 5, 12), uint16]) -> Tensor[(10, 5, 12), uint16] {
  %57 = fn (%var_844: Tensor[(10, 5, 1), uint16], %var_845: Tensor[(10, 5, 12), uint16]) -> Tensor[(10, 5, 12), uint16] {
    %55 = cast(%var_844, dtype="uint16") /* ty=Tensor[(10, 5, 1), uint16] */;
    %56 = cast(%var_845, dtype="uint16") /* ty=Tensor[(10, 5, 12), uint16] */;
    right_shift(%55, %56) /* ty=Tensor[(10, 5, 12), uint16] */
  };
  %57(%var_853, %var_854) /* ty=Tensor[(10, 5, 12), uint16] */
}

def @func_4340(%var_4338: Tensor[(55), float64], %var_4339: Tensor[(40), float32]) -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 9, 11), float64], Tensor[(55), float64], Tensor[(495), float64], Tensor[(40), float32], Tensor[(40), float32], Tensor[(5, 1, 15), uint16]) {
  %73 = fn (%var_4298: Tensor[(55), float64], %var_4302: Tensor[(40), float32]) -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 9, 11), float64], Tensor[(55), float64], Tensor[(495), float64], Tensor[(40), float32], Tensor[(40), float32], Tensor[(5, 1, 15), uint16]) {
    %58 = @func_4213() /* ty=(Tensor[(5, 1, 15), uint16],) */;
    %59 = cast(%var_4298, dtype="float64") /* ty=Tensor[(55), float64] */;
    %60 = cast(meta[relay.Constant][5] /* ty=Tensor[(495), float64] */, dtype="float64") /* ty=Tensor[(495), float64] */;
    %61 = reshape(%59, newshape=[5, 1, 11]) /* ty=Tensor[(5, 1, 11), float64] */;
    %62 = reshape(%60, newshape=[5, 9, 11]) /* ty=Tensor[(5, 9, 11), float64] */;
    %63 = cast(%var_4302, dtype="float32") /* ty=Tensor[(40), float32] */;
    %64 = reshape(%63, newshape=[40]) /* ty=Tensor[(40), float32] */;
    %65 = @func_4020(%64) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(40), float32], Tensor[(35, 15), float32], Tensor[(40), float32]) */;
    %66 = cast(%var_4298, dtype="float64") /* ty=Tensor[(55), float64] */;
    %67 = reshape(%66, newshape=[55]) /* ty=Tensor[(55), float64] */;
    %68 = @func_4139(%67) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 16, 15), int32], Tensor[(4, 300), int32], Tensor[(210), uint64], Tensor[(6, 100), uint16], Tensor[(55), float64]) */;
    %69 = %58.0;
    %70 = @func_820(%61, %62) /* ty=Tensor[(5, 9, 11), float64] */;
    %71 = %65.1;
    %72 = %68.0;
    (%69, %70, %var_4298, meta[relay.Constant][5] /* ty=Tensor[(495), float64] */, %71, %var_4302, %72)
  };
  %73(%var_4338, %var_4339) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 9, 11), float64], Tensor[(55), float64], Tensor[(495), float64], Tensor[(40), float32], Tensor[(40), float32], Tensor[(5, 1, 15), uint16]) */
}

def @func_10070() -> (Tensor[(5, 1, 15), uint16],) {
  %74 = @func_5718() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %75 = %74.0;
  (%75,)
}

def @func_7209() -> (Tensor[(12, 11, 4), float32],) {
  %76 = @func_5569() /* ty=Tensor[(12, 11, 4), float32] */;
  (%76,)
}

def @func_11387(%var_11356: Tensor[(2, 4, 5), float32]) -> (Tensor[(2, 4, 5), uint64], Tensor[(2, 4, 5), float64], Tensor[(12, 8, 15), float64], Tensor[(1440), float64]) {
  %77 = @func_9820() /* ty=Tensor[(2, 4, 5), float32] */;
  %78 = cast(%var_11356, dtype="uint64") /* ty=Tensor[(2, 4, 5), uint64] */;
  %79 = shape_of(%77, dtype="int32") /* ty=Tensor[(3), int32] */;
  %80 = cast(%77, dtype="uint64") /* ty=Tensor[(2, 4, 5), uint64] */;
  %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %82 = cast(%var_11356, dtype="float64") /* ty=Tensor[(2, 4, 5), float64] */;
  %83 = cast(meta[relay.Constant][6] /* ty=Tensor[(1440), float64] */, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %84 = reshape(%83, newshape=[12, 8, 15]) /* ty=Tensor[(12, 8, 15), float64] */;
  %85 = @func_10873(%84) /* ty=(Tensor[(12, 8, 15), float64], Tensor[(5, 1, 15), uint16]) */;
  %86 = bitwise_and(%80, %81) /* ty=Tensor[(2, 4, 5), uint64] */;
  %87 = exp(%82) /* ty=Tensor[(2, 4, 5), float64] */;
  %88 = %85.0;
  (%86, %87, %88, meta[relay.Constant][6] /* ty=Tensor[(1440), float64] */)
}

def @func_5326() -> (Tensor[(5, 1, 15), uint16], Tensor[(2, 4, 5), float32], Tensor[(40), float32], Tensor[(5, 1, 15), uint16], Tensor[(210), uint64]) {
  %89 = cast(meta[relay.Constant][7] /* ty=Tensor[(40), float32] */, dtype="float32") /* ty=Tensor[(40), float32] */;
  %90 = reshape(%89, newshape=[2, 4, 5]) /* ty=Tensor[(2, 4, 5), float32] */;
  %91 = @func_5282() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(210), uint64], Tensor[(55, 1), float64], Tensor[(55), float64]) */;
  %92 = @func_5282() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(210), uint64], Tensor[(55, 1), float64], Tensor[(55), float64]) */;
  %93 = @func_3819() /* ty=Tensor[(5, 1, 15), uint16] */;
  %94 = @func_151(%90) /* ty=Tensor[(2, 4, 5), float32] */;
  %95 = %91.0;
  %96 = %92.1;
  (%93, %94, meta[relay.Constant][7] /* ty=Tensor[(40), float32] */, %95, %96)
}

def @func_5854() -> Tensor[(55, ?), float64] {
  @func_5852() /* ty=Tensor[(55, ?), float64] */
}

def @func_4471() -> Tensor[(5, 1, 15), uint16] {
  %97 = @func_3729() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %97.0
}

def @func_6381(%var_6352: Tensor[(5, 7, 15), int64]) -> (Tensor[(5, 7, 15), bool], Tensor[(5, ?, 15), int16]) {
  %98 = @func_6091() /* ty=(Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) */;
  %99 = %98.0;
  %100 = cast(%99, dtype="bool") /* ty=Tensor[(5, ?, 15), bool] */;
  %101 = cast(%var_6352, dtype="bool") /* ty=Tensor[(5, 7, 15), bool] */;
  %102 = @func_4951() /* ty=Tensor[(5, 1, 15), uint16] */;
  %103 = cast(%99, dtype="int16") /* ty=Tensor[(5, ?, 15), int16] */;
  %104 = shape_of(%102, dtype="int32") /* ty=Tensor[(3), int32] */;
  %105 = cast(%102, dtype="int16") /* ty=Tensor[(5, 1, 15), int16] */;
  %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %107 = equal(%100, %101) /* ty=Tensor[(5, 7, 15), bool] */;
  %108 = minimum(%105, %106) /* ty=Tensor[(5, ?, 15), int16] */;
  (%107, %108)
}

def @func_9151() -> (Tensor[(55, ?), float64], Tensor[(5, 1, 15), float64]) {
  @func_9149() /* ty=(Tensor[(55, ?), float64], Tensor[(5, 1, 15), float64]) */
}

def @func_6180(%var_6139: Tensor[(24, 16), float64], %var_6140: Tensor[(210), uint64]) -> (Tensor[(5, 1, 15), uint16], Tensor[(55), float64], Tensor[(6, 16, 4), uint32], Tensor[(24, 16), float64], Tensor[(210), uint64], Tensor[(5, ?, 15), int32]) {
  %109 = cast(meta[relay.Constant][8] /* ty=Tensor[(55), float64] */, dtype="float64") /* ty=Tensor[(55), float64] */;
  %110 = reshape(%109, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %111 = @func_5246(%110) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, ?, 15), float32], Tensor[(55), float64]) */;
  %112 = cast(%var_6139, dtype="float64") /* ty=Tensor[(24, 16), float64] */;
  %113 = cast(%var_6139, dtype="float64") /* ty=Tensor[(24, 16), float64] */;
  %114 = cast(%var_6140, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %115 = reshape(%112, newshape=[6, 16, 4]) /* ty=Tensor[(6, 16, 4), float64] */;
  %116 = reshape(%113, newshape=[6, 16, 4]) /* ty=Tensor[(6, 16, 4), float64] */;
  %117 = reshape(%114, newshape=[210]) /* ty=Tensor[(210), uint64] */;
  %118 = @func_4793(%115, %116, %117) /* ty=(Tensor[(6, 16, 4), float64], Tensor[(6, 16, 4), uint32], Tensor[(495), float64], Tensor[(300, 2), uint16], Tensor[(55, 210), float32], Tensor[(6, 16, 4), bool]) */;
  %119 = @func_5718() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %120 = %119.0;
  %121 = @func_3921() /* ty=(Tensor[(5, ?, 15), float32],) */;
  %122 = %121.0;
  %123 = cast(%122, dtype="int32") /* ty=Tensor[(5, ?, 15), int32] */;
  %124 = shape_of(%120, dtype="int32") /* ty=Tensor[(3), int32] */;
  %125 = cast(%120, dtype="int32") /* ty=Tensor[(5, 1, 15), int32] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %127 = %111.0;
  %128 = %118.1;
  %129 = logical_xor(%125, %126) /* ty=Tensor[(5, ?, 15), int32] */;
  (%127, meta[relay.Constant][8] /* ty=Tensor[(55), float64] */, %128, %var_6139, %var_6140, %129)
}

def @func_7011(%var_6998: Tensor[(600), uint16], %var_7000: uint8) -> (Tensor[(50), uint16], uint8, Tensor[(600), uint16], Tensor[(525), float32], uint8) {
  %130 = @func_6498() /* ty=(Tensor[(5, ?, 15), float32], Tensor[(5, 1, 15), float64], Tensor[(10, 5, 12), uint16], Tensor[(50), uint16], Tensor[(1, 600), uint16]) */;
  %131 = cast(%var_6998, dtype="uint16") /* ty=Tensor[(600), uint16] */;
  %132 = cast(meta[relay.Constant][9] /* ty=Tensor[(525), float32] */, dtype="float32") /* ty=Tensor[(525), float32] */;
  %133 = cast(%var_7000, dtype="uint8") /* ty=uint8 */;
  %134 = reshape(%131, newshape=[600]) /* ty=Tensor[(600), uint16] */;
  %135 = reshape(%132, newshape=[525]) /* ty=Tensor[(525), float32] */;
  %136 = reshape(%133, newshape=[]) /* ty=uint8 */;
  %137 = @func_4868(%134, %135, %136) /* ty=(Tensor[(5, ?, 15), float32], Tensor[(5, 1, 15), uint16], Tensor[(600), uint16], Tensor[(525), float32], Tensor[(14, 8, 1), float32], uint8, Tensor[(2, 56), uint8]) */;
  %138 = %130.3;
  %139 = %137.5;
  (%138, %139, %var_6998, meta[relay.Constant][9] /* ty=Tensor[(525), float32] */, %var_7000)
}

def @func_6564(%var_6562: Tensor[(525), float32]) -> (Tensor[(5, 1, 15), uint16], Tensor[(525), float32], Tensor[(12, 50), uint16], Tensor[(525), float32], uint8) {
  @func_6561(%var_6562) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(525), float32], Tensor[(12, 50), uint16], Tensor[(525), float32], uint8) */
}

def @func_8487(%var_8485: Tensor[(14, 8, 7), float32]) -> (Tensor[(14, 8, 7), uint8],) {
  @func_8484(%var_8485) /* ty=(Tensor[(14, 8, 7), uint8],) */
}

def @func_6346() -> (Tensor[(55, ?), float32],) {
  %143 = fn () -> (Tensor[(55, ?), float32],) {
    %140 = @func_5852() /* ty=Tensor[(55, ?), float64] */;
    %141 = cast(%140, dtype="float32") /* ty=Tensor[(55, ?), float32] */;
    %142 = log10(%141) /* ty=Tensor[(55, ?), float32] */;
    (%142,)
  };
  %143() /* ty=(Tensor[(55, ?), float32],) */
}

def @func_7542() -> (Tensor[(55, ?), float64],) {
  %145 = fn () -> (Tensor[(55, ?), float64],) {
    %144 = @func_7393() /* ty=Tensor[(55, ?), float64] */;
    (%144,)
  };
  %145() /* ty=(Tensor[(55, ?), float64],) */
}

def @func_12999() -> (Tensor[(5, ?, 15), int64],) {
  %146 = @func_9957() /* ty=(Tensor[(5, ?, 15), int64],) */;
  %147 = %146.0;
  (%147,)
}

def @func_9438() -> (Tensor[(5, ?, 15), int64],) {
  %150 = fn () -> (Tensor[(5, ?, 15), int64],) {
    %148 = @func_6091() /* ty=(Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) */;
    %149 = %148.0;
    (%149,)
  };
  %150() /* ty=(Tensor[(5, ?, 15), int64],) */
}

def @func_11109() -> Tensor[(5, 1, 15), uint16] {
  %152 = fn () -> Tensor[(5, 1, 15), uint16] {
    %151 = @func_8368() /* ty=(Tensor[(5, 1, 15), uint16],) */;
    %151.0
  };
  %152() /* ty=Tensor[(5, 1, 15), uint16] */
}

def @func_12512() -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16]) {
  @func_12510() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16]) */
}

def @func_13001() -> (Tensor[(5, ?, 15), int64],) {
  @func_12999() /* ty=(Tensor[(5, ?, 15), int64],) */
}

def @func_13702() -> (Tensor[(40), float32], Tensor[(1, 600), uint16]) {
  %153 = @func_6498() /* ty=(Tensor[(5, ?, 15), float32], Tensor[(5, 1, 15), float64], Tensor[(10, 5, 12), uint16], Tensor[(50), uint16], Tensor[(1, 600), uint16]) */;
  %154 = @func_11329() /* ty=Tensor[(40), float32] */;
  %155 = %153.4;
  (%154, %155)
}

def @func_4251() -> Tensor[(5, 1, 15), uint16] {
  %157 = fn () -> Tensor[(5, 1, 15), uint16] {
    %156 = @func_4213() /* ty=(Tensor[(5, 1, 15), uint16],) */;
    %156.0
  };
  %157() /* ty=Tensor[(5, 1, 15), uint16] */
}

def @func_13787(%var_13783: Tensor[(1200), int32], %var_13784: Tensor[(105, 2), uint64], %var_13785: Tensor[(11, 5), float64], %var_13786: Tensor[(4, 1050), int64]) -> (Tensor[(600), uint16], Tensor[(1200), int32], Tensor[(105, 2), uint64], Tensor[(600), uint16], Tensor[(11, 5), float64], Tensor[(5, 1, 15), uint16], Tensor[(12, 11, 4), float32], Tensor[(5, 1, 15), uint16], Tensor[(4, 1050), bool], Tensor[(600), uint16]) {
  %181 = fn (%var_13737: Tensor[(1200), int32], %var_13738: Tensor[(105, 2), uint64], %var_13740: Tensor[(11, 5), float64], %var_13765: Tensor[(4, 1050), int64]) -> (Tensor[(600), uint16], Tensor[(1200), int32], Tensor[(105, 2), uint64], Tensor[(600), uint16], Tensor[(11, 5), float64], Tensor[(5, 1, 15), uint16], Tensor[(12, 11, 4), float32], Tensor[(5, 1, 15), uint16], Tensor[(4, 1050), bool], Tensor[(600), uint16]) {
    %158 = cast(%var_13737, dtype="int32") /* ty=Tensor[(1200), int32] */;
    %159 = cast(%var_13738, dtype="uint64") /* ty=Tensor[(105, 2), uint64] */;
    %160 = cast(meta[relay.Constant][10] /* ty=Tensor[(600), uint16] */, dtype="uint16") /* ty=Tensor[(600), uint16] */;
    %161 = cast(%var_13740, dtype="float64") /* ty=Tensor[(11, 5), float64] */;
    %162 = reshape(%158, newshape=[5, 16, 15]) /* ty=Tensor[(5, 16, 15), int32] */;
    %163 = reshape(%159, newshape=[210, 1]) /* ty=Tensor[(210, 1), uint64] */;
    %164 = reshape(%160, newshape=[600]) /* ty=Tensor[(600), uint16] */;
    %165 = reshape(%161, newshape=[55]) /* ty=Tensor[(55), float64] */;
    %166 = @func_3648(%162, %163, %164, %165) /* ty=(Tensor[(5, 16, 15), int32], Tensor[(10, 5), uint16], Tensor[(210, 1), uint64], Tensor[(600), uint16], Tensor[(55), float64]) */;
    %167 = @func_8368() /* ty=(Tensor[(5, 1, 15), uint16],) */;
    %168 = @func_7209() /* ty=(Tensor[(12, 11, 4), float32],) */;
    %169 = @func_10972() /* ty=(Tensor[(5, 1, 15), uint16],) */;
    %170 = @func_9246() /* ty=(Tensor[(5, ?, 15), float32], Tensor[(5, 14, 15), int64], Tensor[(1, 1050), int64]) */;
    %171 = %170.2;
    %172 = cast(%171, dtype="bool") /* ty=Tensor[(1, 1050), bool] */;
    %173 = cast(%var_13765, dtype="bool") /* ty=Tensor[(4, 1050), bool] */;
    %174 = @func_8289() /* ty=(Tensor[(600), uint16],) */;
    %175 = %166.3;
    %176 = %167.0;
    %177 = %168.0;
    %178 = %169.0;
    %179 = not_equal(%172, %173) /* ty=Tensor[(4, 1050), bool] */;
    %180 = %174.0;
    (%175, %var_13737, %var_13738, meta[relay.Constant][10] /* ty=Tensor[(600), uint16] */, %var_13740, %176, %177, %178, %179, %180)
  };
  %181(%var_13783, %var_13784, %var_13785, %var_13786) /* ty=(Tensor[(600), uint16], Tensor[(1200), int32], Tensor[(105, 2), uint64], Tensor[(600), uint16], Tensor[(11, 5), float64], Tensor[(5, 1, 15), uint16], Tensor[(12, 11, 4), float32], Tensor[(5, 1, 15), uint16], Tensor[(4, 1050), bool], Tensor[(600), uint16]) */
}

def @func_9247() -> (Tensor[(5, ?, 15), float32], Tensor[(5, 14, 15), int64], Tensor[(1, 1050), int64]) {
  %190 = fn () -> (Tensor[(5, ?, 15), float32], Tensor[(5, 14, 15), int64], Tensor[(1, 1050), int64]) {
    %182 = @func_3921() /* ty=(Tensor[(5, ?, 15), float32],) */;
    %183 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 1050), int64] */, dtype="int64") /* ty=Tensor[(1, 1050), int64] */;
    %184 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 1050), int64] */, dtype="int64") /* ty=Tensor[(1, 1050), int64] */;
    %185 = reshape(%183, newshape=[5, 14, 15]) /* ty=Tensor[(5, 14, 15), int64] */;
    %186 = reshape(%184, newshape=[5, 14, 15]) /* ty=Tensor[(5, 14, 15), int64] */;
    %187 = @func_8535(%185, %186) /* ty=(Tensor[(5, 14, 15), int64],) */;
    %188 = %182.0;
    %189 = %187.0;
    (%188, %189, meta[relay.Constant][11] /* ty=Tensor[(1, 1050), int64] */)
  };
  %190() /* ty=(Tensor[(5, ?, 15), float32], Tensor[(5, 14, 15), int64], Tensor[(1, 1050), int64]) */
}

def @func_9108() -> Tensor[(55, ?), float64] {
  %191 = @func_7393() /* ty=Tensor[(55, ?), float64] */;
  %192 = cast(%191, dtype="float64") /* ty=Tensor[(55, ?), float64] */;
  log(%192) /* ty=Tensor[(55, ?), float64] */
}

def @func_8150() -> (Tensor[(5, 1, 15), uint16],) {
  @func_8148() /* ty=(Tensor[(5, 1, 15), uint16],) */
}

def @func_9741() -> Tensor[(40), float32] {
  %193 = @func_9086() /* ty=(Tensor[(40), float32], Tensor[(5, 1, 15), uint16]) */;
  %193.0
}

def @func_4868(%var_4848: Tensor[(600), uint16], %var_4849: Tensor[(525), float32], %var_4865: uint8) -> (Tensor[(5, ?, 15), float32], Tensor[(5, 1, 15), uint16], Tensor[(600), uint16], Tensor[(525), float32], Tensor[(14, 8, 1), float32], uint8, Tensor[(2, 56), uint8]) {
  %194 = @func_4199() /* ty=(Tensor[(5, ?, 15), float32],) */;
  %195 = cast(%var_4848, dtype="uint16") /* ty=Tensor[(600), uint16] */;
  %196 = cast(%var_4849, dtype="float32") /* ty=Tensor[(525), float32] */;
  %197 = reshape(%195, newshape=[600]) /* ty=Tensor[(600), uint16] */;
  %198 = reshape(%196, newshape=[525]) /* ty=Tensor[(525), float32] */;
  %199 = @func_4638(%197, %198) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(10, 5, 12), uint16], Tensor[(50), uint16], Tensor[(600), uint16], Tensor[(5, 1, 15), uint16], Tensor[(112), uint8], Tensor[(525), float32], Tensor[(5, 1, 15), uint16]) */;
  %200 = cast(%var_4865, dtype="uint8") /* ty=uint8 */;
  %201 = cast(meta[relay.Constant][12] /* ty=Tensor[(2, 56), uint8] */, dtype="uint8") /* ty=Tensor[(2, 56), uint8] */;
  %202 = cast(%var_4849, dtype="float32") /* ty=Tensor[(525), float32] */;
  %203 = reshape(%200, newshape=[]) /* ty=uint8 */;
  %204 = reshape(%201, newshape=[14, 8, 1]) /* ty=Tensor[(14, 8, 1), uint8] */;
  %205 = reshape(%202, newshape=[525]) /* ty=Tensor[(525), float32] */;
  %206 = @func_746(%203, %204, %205) /* ty=(Tensor[(14, 8, 1), bool], Tensor[(14, 8, 1), float32], Tensor[(2, 4, 5), float32], Tensor[(525), float32], Tensor[(40), float32], Tensor[(2, 4, 5), float32]) */;
  %207 = %194.0;
  %208 = %199.0;
  %209 = %206.1;
  (%207, %208, %var_4848, %var_4849, %209, %var_4865, meta[relay.Constant][12] /* ty=Tensor[(2, 56), uint8] */)
}

def @func_9665(%var_9553: Tensor[(112), uint8], %var_9565: uint8, %var_9648: Tensor[(55, 8), float64]) -> (Tensor[(6, 100), uint16], Tensor[(2, 300), uint16], Tensor[(112), uint8], Tensor[(55, ?), float32], Tensor[(5, 1, 15), uint16], Tensor[(55, ?), float64], Tensor[(5, 1, 15), uint16], Tensor[(55, 525), float64], Tensor[(55, ?), int16], Tensor[(55, 8), bool], Tensor[(5, ?, 15), float32]) {
  %210 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 300), uint16] */, dtype="uint16") /* ty=Tensor[(2, 300), uint16] */;
  %211 = cast(%var_9553, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %212 = reshape(%210, newshape=[6, 100]) /* ty=Tensor[(6, 100), uint16] */;
  %213 = reshape(%211, newshape=[56, 2]) /* ty=Tensor[(56, 2), uint8] */;
  %214 = @func_8257(%212, %213) /* ty=(Tensor[(12, 11, 4), float32], Tensor[(600), uint16], Tensor[(6, 100), uint16], uint8, Tensor[(112), uint8], Tensor[(56, 2), uint8], Tensor[(525), float32]) */;
  %215 = @func_8023() /* ty=(Tensor[(55, ?), float64],) */;
  %216 = %215.0;
  %217 = cast(%216, dtype="float32") /* ty=Tensor[(55, ?), float32] */;
  %218 = acos(%217) /* ty=Tensor[(55, ?), float32] */;
  %219 = cast(%218, dtype="float64") /* ty=Tensor[(55, ?), float64] */;
  %220 = sqrt(%219) /* ty=Tensor[(55, ?), float64] */;
  %221 = cast(%220, dtype="float32") /* ty=Tensor[(55, ?), float32] */;
  %222 = cast(%var_9565, dtype="float32") /* ty=float32 */;
  %223 = @func_8368() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %224 = @func_9182() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %225 = %214.2;
  %226 = cast(%225, dtype="uint16") /* ty=Tensor[(6, 100), uint16] */;
  %227 = cast(%var_9565, dtype="uint8") /* ty=uint8 */;
  %228 = reshape(%226, newshape=[600]) /* ty=Tensor[(600), uint16] */;
  %229 = reshape(%227, newshape=[]) /* ty=uint8 */;
  %230 = @func_7011(%228, %229) /* ty=(Tensor[(50), uint16], uint8, Tensor[(600), uint16], Tensor[(525), float32], uint8) */;
  %231 = %230.3;
  %232 = cast(%220, dtype="float64") /* ty=Tensor[(55, ?), float64] */;
  %233 = cast(%231, dtype="float64") /* ty=Tensor[(525), float64] */;
  %234 = floor_divide(%232, %233) /* ty=Tensor[(55, 525), float64] */;
  %235 = cast(%234, dtype="float32") /* ty=Tensor[(55, 525), float32] */;
  %236 = log2(%235) /* ty=Tensor[(55, 525), float32] */;
  %237 = cast(%236, dtype="float64") /* ty=Tensor[(55, 525), float64] */;
  %238 = cast(%216, dtype="bool") /* ty=Tensor[(55, ?), bool] */;
  %239 = shape_of(%218, dtype="int32") /* ty=Tensor[(2), int32] */;
  %240 = cast(%218, dtype="bool") /* ty=Tensor[(55, ?), bool] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %242 = logical_and(%240, %241) /* ty=Tensor[(55, ?), bool] */;
  %243 = cast(%242, dtype="float64") /* ty=Tensor[(55, ?), float64] */;
  %244 = shape_of(%220, dtype="int32") /* ty=Tensor[(2), int32] */;
  %245 = cast(%220, dtype="float64") /* ty=Tensor[(55, ?), float64] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %247 = divide(%245, %246) /* ty=Tensor[(55, ?), float64] */;
  %248 = cast(%242, dtype="int16") /* ty=Tensor[(55, ?), int16] */;
  %249 = shape_of(%247, dtype="int32") /* ty=Tensor[(2), int32] */;
  %250 = cast(%247, dtype="int16") /* ty=Tensor[(55, ?), int16] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %252 = cast(%247, dtype="bool") /* ty=Tensor[(55, ?), bool] */;
  %253 = cast(%var_9648, dtype="bool") /* ty=Tensor[(55, 8), bool] */;
  %254 = @func_3921() /* ty=(Tensor[(5, ?, 15), float32],) */;
  %255 = minimum(%221, %222) /* ty=Tensor[(55, ?), float32] */;
  %256 = %223.0;
  %257 = @func_5852() /* ty=Tensor[(55, ?), float64] */;
  %258 = %224.0;
  %259 = rsqrt(%237) /* ty=Tensor[(55, 525), float64] */;
  %260 = subtract(%250, %251) /* ty=Tensor[(55, ?), int16] */;
  %261 = not_equal(%252, %253) /* ty=Tensor[(55, 8), bool] */;
  %262 = %254.0;
  (%225, meta[relay.Constant][13] /* ty=Tensor[(2, 300), uint16] */, %var_9553, %255, %256, %257, %258, %259, %260, %261, %262)
}

def @func_11186(%var_11185: Tensor[(5, 16, 7), float64]) -> (Tensor[(5, 16, 7), float64],) {
  %265 = fn (%var_11166: Tensor[(5, 16, 7), float64]) -> (Tensor[(5, 16, 7), float64],) {
    %263 = cast(%var_11166, dtype="float64") /* ty=Tensor[(5, 16, 7), float64] */;
    %264 = acos(%263) /* ty=Tensor[(5, 16, 7), float64] */;
    (%264,)
  };
  %265(%var_11185) /* ty=(Tensor[(5, 16, 7), float64],) */
}

def @func_4598(%var_4596: uint8, %var_4597: Tensor[(525), float32]) -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16], Tensor[(2, 4, 5), float32], uint8, Tensor[(112), uint8], Tensor[(525), float32]) {
  %278 = fn (%var_4589: uint8, %var_4591: Tensor[(525), float32]) -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16], Tensor[(2, 4, 5), float32], uint8, Tensor[(112), uint8], Tensor[(525), float32]) {
    %266 = @func_3729() /* ty=(Tensor[(5, 1, 15), uint16],) */;
    %267 = @func_3729() /* ty=(Tensor[(5, 1, 15), uint16],) */;
    %268 = cast(%var_4589, dtype="uint8") /* ty=uint8 */;
    %269 = cast(meta[relay.Constant][14] /* ty=Tensor[(112), uint8] */, dtype="uint8") /* ty=Tensor[(112), uint8] */;
    %270 = cast(%var_4591, dtype="float32") /* ty=Tensor[(525), float32] */;
    %271 = reshape(%268, newshape=[]) /* ty=uint8 */;
    %272 = reshape(%269, newshape=[14, 8, 1]) /* ty=Tensor[(14, 8, 1), uint8] */;
    %273 = reshape(%270, newshape=[525]) /* ty=Tensor[(525), float32] */;
    %274 = @func_746(%271, %272, %273) /* ty=(Tensor[(14, 8, 1), bool], Tensor[(14, 8, 1), float32], Tensor[(2, 4, 5), float32], Tensor[(525), float32], Tensor[(40), float32], Tensor[(2, 4, 5), float32]) */;
    %275 = %266.0;
    %276 = %267.0;
    %277 = %274.2;
    (%275, %276, %277, %var_4589, meta[relay.Constant][14] /* ty=Tensor[(112), uint8] */, %var_4591)
  };
  %278(%var_4596, %var_4597) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16], Tensor[(2, 4, 5), float32], uint8, Tensor[(112), uint8], Tensor[(525), float32]) */
}

def @func_9936(%var_9886: Tensor[(525), float32], %var_9887: Tensor[(40, 1), float32], %var_9918: Tensor[(40, 4), float64], %var_9923: Tensor[(384, 1), float64]) -> (Tensor[(55, ?), float64], Tensor[(40), float32], Tensor[(40, 525), int16], Tensor[(40, 4), int8], Tensor[(300, 2), uint16], Tensor[(384, 1), float64], Tensor[(210), uint64], Tensor[(210), uint64]) {
  %279 = cast(%var_9886, dtype="float32") /* ty=Tensor[(525), float32] */;
  %280 = cast(%var_9887, dtype="float32") /* ty=Tensor[(40, 1), float32] */;
  %281 = reshape(%279, newshape=[15, 5, 7]) /* ty=Tensor[(15, 5, 7), float32] */;
  %282 = reshape(%280, newshape=[40]) /* ty=Tensor[(40), float32] */;
  %283 = @func_561(%281, %282) /* ty=(Tensor[(15, 5, 7), float64], Tensor[(2, 4, 5), float32], Tensor[(40), float32]) */;
  %284 = cast(%var_9887, dtype="float64") /* ty=Tensor[(40, 1), float64] */;
  %285 = cosh(%284) /* ty=Tensor[(40, 1), float64] */;
  %286 = cast(%285, dtype="int16") /* ty=Tensor[(40, 1), int16] */;
  %287 = cast(%var_9886, dtype="int16") /* ty=Tensor[(525), int16] */;
  %288 = cast(%285, dtype="int8") /* ty=Tensor[(40, 1), int8] */;
  %289 = cast(%var_9918, dtype="int8") /* ty=Tensor[(40, 4), int8] */;
  %290 = cast(%var_9923, dtype="float64") /* ty=Tensor[(384, 1), float64] */;
  %291 = cast(%var_9923, dtype="float64") /* ty=Tensor[(384, 1), float64] */;
  %292 = cast(meta[relay.Constant][15] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %293 = reshape(%290, newshape=[6, 16, 4]) /* ty=Tensor[(6, 16, 4), float64] */;
  %294 = reshape(%291, newshape=[6, 16, 4]) /* ty=Tensor[(6, 16, 4), float64] */;
  %295 = reshape(%292, newshape=[210]) /* ty=Tensor[(210), uint64] */;
  %296 = @func_4793(%293, %294, %295) /* ty=(Tensor[(6, 16, 4), float64], Tensor[(6, 16, 4), uint32], Tensor[(495), float64], Tensor[(300, 2), uint16], Tensor[(55, 210), float32], Tensor[(6, 16, 4), bool]) */;
  %297 = cast(%var_9923, dtype="float64") /* ty=Tensor[(384, 1), float64] */;
  %298 = cast(meta[relay.Constant][15] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %299 = reshape(%297, newshape=[24, 16]) /* ty=Tensor[(24, 16), float64] */;
  %300 = reshape(%298, newshape=[210]) /* ty=Tensor[(210), uint64] */;
  %301 = @func_6180(%299, %300) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(55), float64], Tensor[(6, 16, 4), uint32], Tensor[(24, 16), float64], Tensor[(210), uint64], Tensor[(5, ?, 15), int32]) */;
  %302 = @func_6949() /* ty=Tensor[(55, ?), float64] */;
  %303 = %283.2;
  %304 = subtract(%286, %287) /* ty=Tensor[(40, 525), int16] */;
  %305 = bitwise_and(%288, %289) /* ty=Tensor[(40, 4), int8] */;
  %306 = %296.3;
  %307 = %301.4;
  (%302, %303, %304, %305, %306, %var_9923, meta[relay.Constant][15] /* ty=Tensor[(210), uint64] */, %307)
}

def @func_10019() -> Tensor[(10, 5, 12), float64] {
  %309 = fn () -> Tensor[(10, 5, 12), float64] {
    %308 = @func_5196() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(210), uint64], Tensor[(2, 300), uint16], Tensor[(55), float64], Tensor[(10, 5, 12), float64], Tensor[(5, 16, 15), int32]) */;
    %308.4
  };
  %309() /* ty=Tensor[(10, 5, 12), float64] */
}

def @func_11120() -> (Tensor[(525), float32],) {
  %310 = @func_5352() /* ty=(Tensor[(55), float64], Tensor[(525), float32], Tensor[(600), uint16], Tensor[(525), float32], uint8, Tensor[(50), uint16]) */;
  %311 = %310.1;
  %312 = cast(%311, dtype="float32") /* ty=Tensor[(525), float32] */;
  %313 = acos(%312) /* ty=Tensor[(525), float32] */;
  (%313,)
}

def @func_13174() -> (Tensor[(10, 5, 12), float64], Tensor[(16, 3, 16), float32]) {
  %314 = @func_10018() /* ty=Tensor[(10, 5, 12), float64] */;
  %315 = @func_10910() /* ty=Tensor[(16, 3, 16), float32] */;
  (%314, %315)
}

def @func_6246(%var_6242: Tensor[(112), uint8], %var_6243: Tensor[(525), float32]) -> (Tensor[(55, ?), float64], Tensor[(112), uint8], Tensor[(112), uint8], Tensor[(525), float32]) {
  %316 = cast(%var_6242, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %317 = cast(%var_6243, dtype="float32") /* ty=Tensor[(525), float32] */;
  %318 = cast(%var_6243, dtype="float32") /* ty=Tensor[(525), float32] */;
  %319 = reshape(%316, newshape=[112]) /* ty=Tensor[(112), uint8] */;
  %320 = reshape(%317, newshape=[5, 105]) /* ty=Tensor[(5, 105), float32] */;
  %321 = reshape(%318, newshape=[5, 105]) /* ty=Tensor[(5, 105), float32] */;
  %322 = @func_4529(%319, %320, %321) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(2, 4, 5), float32], Tensor[(112), uint8], Tensor[(5, 105), bool], Tensor[(15, 5, 7), float64], Tensor[(5, 105), float64]) */;
  %323 = @func_5852() /* ty=Tensor[(55, ?), float64] */;
  %324 = %322.2;
  (%323, %324, %var_6242, %var_6243)
}

def @func_9513(%var_9511: Tensor[(525), float32]) -> (Tensor[(12, 11, 4), float32], Tensor[(112), uint8], uint8, Tensor[(525), float32]) {
  @func_9510(%var_9511) /* ty=(Tensor[(12, 11, 4), float32], Tensor[(112), uint8], uint8, Tensor[(525), float32]) */
}

def @func_4642(%var_4640: Tensor[(600), uint16], %var_4641: Tensor[(525), float32]) -> (Tensor[(5, 1, 15), uint16], Tensor[(10, 5, 12), uint16], Tensor[(50), uint16], Tensor[(600), uint16], Tensor[(5, 1, 15), uint16], Tensor[(112), uint8], Tensor[(525), float32], Tensor[(5, 1, 15), uint16]) {
  @func_4638(%var_4640, %var_4641) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(10, 5, 12), uint16], Tensor[(50), uint16], Tensor[(600), uint16], Tensor[(5, 1, 15), uint16], Tensor[(112), uint8], Tensor[(525), float32], Tensor[(5, 1, 15), uint16]) */
}

def @func_820(%var_810: Tensor[(5, 1, 11), float64], %var_811: Tensor[(5, 9, 11), float64]) -> Tensor[(5, 9, 11), float64] {
  %325 = cast(%var_810, dtype="float64") /* ty=Tensor[(5, 1, 11), float64] */;
  %326 = cast(%var_811, dtype="float64") /* ty=Tensor[(5, 9, 11), float64] */;
  floor_mod(%325, %326) /* ty=Tensor[(5, 9, 11), float64] */
}

def @func_9852(%var_9850: Tensor[(600), uint16], %var_9851: Tensor[(1, 112), uint8]) -> (Tensor[(5, 1, 15), float64], Tensor[(55, ?), float32], uint8, Tensor[(600), uint16], Tensor[(1, 112), uint8]) {
  @func_9848(%var_9850, %var_9851) /* ty=(Tensor[(5, 1, 15), float64], Tensor[(55, ?), float32], uint8, Tensor[(600), uint16], Tensor[(1, 112), uint8]) */
}

def @func_11134() -> (Tensor[(5, 1, 15), uint16],) {
  %329 = fn () -> (Tensor[(5, 1, 15), uint16],) {
    %327 = @func_10070() /* ty=(Tensor[(5, 1, 15), uint16],) */;
    %328 = %327.0;
    (%328,)
  };
  %329() /* ty=(Tensor[(5, 1, 15), uint16],) */
}

def @func_12590() -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16]) {
  %334 = fn () -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16]) {
    %330 = @func_10207() /* ty=(Tensor[(55, ?), float64], Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64]) */;
    %331 = @func_10070() /* ty=(Tensor[(5, 1, 15), uint16],) */;
    %332 = %330.1;
    %333 = %331.0;
    (%332, %333)
  };
  %334() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16]) */
}

def @func_13176() -> (Tensor[(10, 5, 12), float64], Tensor[(16, 3, 16), float32]) {
  @func_13174() /* ty=(Tensor[(10, 5, 12), float64], Tensor[(16, 3, 16), float32]) */
}

def @func_8583() -> (Tensor[(5, 1, 15), float64],) {
  %335 = @func_5651() /* ty=(Tensor[(5, ?, 15), bool], Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64]) */;
  %336 = %335.3;
  (%336,)
}

def @func_8976(%var_8947: Tensor[(55, 9), float32]) -> (Tensor[(55, ?), float64], Tensor[(55), float64], Tensor[(40), float32], Tensor[(55, 9), float64]) {
  %337 = @func_6345() /* ty=(Tensor[(55, ?), float32],) */;
  %338 = %337.0;
  %339 = cast(%338, dtype="float64") /* ty=Tensor[(55, ?), float64] */;
  %340 = sin(%339) /* ty=Tensor[(55, ?), float64] */;
  %341 = cast(%340, dtype="int8") /* ty=Tensor[(55, ?), int8] */;
  %342 = shape_of(%338, dtype="int32") /* ty=Tensor[(2), int32] */;
  %343 = cast(%338, dtype="int8") /* ty=Tensor[(55, ?), int8] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %345 = left_shift(%343, %344) /* ty=Tensor[(55, ?), int8] */;
  %346 = cast(%340, dtype="float64") /* ty=Tensor[(55, ?), float64] */;
  %347 = shape_of(%345, dtype="int32") /* ty=Tensor[(2), int32] */;
  %348 = cast(%345, dtype="float64") /* ty=Tensor[(55, ?), float64] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %350 = cast(%345, dtype="float64") /* ty=Tensor[(55, ?), float64] */;
  %351 = cast(meta[relay.Constant][16] /* ty=Tensor[(40), float32] */, dtype="float32") /* ty=Tensor[(40), float32] */;
  %352 = reshape(%350, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %353 = reshape(%351, newshape=[40]) /* ty=Tensor[(40), float32] */;
  %354 = @func_4337(%352, %353) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 9, 11), float64], Tensor[(55), float64], Tensor[(495), float64], Tensor[(40), float32], Tensor[(40), float32], Tensor[(5, 1, 15), uint16]) */;
  %355 = cast(%338, dtype="float32") /* ty=Tensor[(55, ?), float32] */;
  %356 = cast(%var_8947, dtype="float32") /* ty=Tensor[(55, 9), float32] */;
  %357 = divide(%355, %356) /* ty=Tensor[(55, 9), float32] */;
  %358 = cast(%345, dtype="float64") /* ty=Tensor[(55, ?), float64] */;
  %359 = cast(%357, dtype="float64") /* ty=Tensor[(55, 9), float64] */;
  %360 = floor_mod(%348, %349) /* ty=Tensor[(55, ?), float64] */;
  %361 = %354.2;
  %362 = power(%358, %359) /* ty=Tensor[(55, 9), float64] */;
  (%360, %361, meta[relay.Constant][16] /* ty=Tensor[(40), float32] */, %362)
}

def @func_7954() -> (Tensor[(12, 11, 1), float32],) {
  @func_7952() /* ty=(Tensor[(12, 11, 1), float32],) */
}

def @func_8686(%var_8684: Tensor[(10, 3, 1), float64], %var_8685: Tensor[(10, 3, 15), float64]) -> (Tensor[(10, 3, 15), float64], Tensor[(5, ?, 15), int16]) {
  %380 = fn (%var_8628: Tensor[(10, 3, 1), float64], %var_8629: Tensor[(10, 3, 15), float64]) -> (Tensor[(10, 3, 15), float64], Tensor[(5, ?, 15), int16]) {
    %363 = cast(%var_8628, dtype="float32") /* ty=Tensor[(10, 3, 1), float32] */;
    %364 = erf(%363) /* ty=Tensor[(10, 3, 1), float32] */;
    %365 = cast(%var_8628, dtype="float64") /* ty=Tensor[(10, 3, 1), float64] */;
    %366 = cast(%var_8629, dtype="float64") /* ty=Tensor[(10, 3, 15), float64] */;
    %367 = floor_divide(%365, %366) /* ty=Tensor[(10, 3, 15), float64] */;
    %368 = cast(%364, dtype="float64") /* ty=Tensor[(10, 3, 1), float64] */;
    %369 = cast(%367, dtype="float64") /* ty=Tensor[(10, 3, 15), float64] */;
    %370 = @func_8412() /* ty=(Tensor[(5, 1, 15), float64],) */;
    %371 = %370.0;
    %372 = @func_5007() /* ty=(Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) */;
    %373 = %372.0;
    %374 = cast(%373, dtype="int16") /* ty=Tensor[(5, ?, 15), int16] */;
    %375 = shape_of(%371, dtype="int32") /* ty=Tensor[(3), int32] */;
    %376 = cast(%371, dtype="int16") /* ty=Tensor[(5, 1, 15), int16] */;
    %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %378 = power(%368, %369) /* ty=Tensor[(10, 3, 15), float64] */;
    %379 = bitwise_and(%376, %377) /* ty=Tensor[(5, ?, 15), int16] */;
    (%378, %379)
  };
  %380(%var_8684, %var_8685) /* ty=(Tensor[(10, 3, 15), float64], Tensor[(5, ?, 15), int16]) */
}

def @func_13641() -> Tensor[(55, 1), float64] {
  %382 = fn () -> Tensor[(55, 1), float64] {
    %381 = @func_5282() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(210), uint64], Tensor[(55, 1), float64], Tensor[(55), float64]) */;
    %381.2
  };
  %382() /* ty=Tensor[(55, 1), float64] */
}

def @func_9086() -> (Tensor[(40), float32], Tensor[(5, 1, 15), uint16]) {
  %383 = @func_5326() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(2, 4, 5), float32], Tensor[(40), float32], Tensor[(5, 1, 15), uint16], Tensor[(210), uint64]) */;
  %384 = %383.2;
  %385 = @func_4951() /* ty=Tensor[(5, 1, 15), uint16] */;
  (%384, %385)
}

def @func_3821() -> Tensor[(5, 1, 15), uint16] {
  @func_3819() /* ty=Tensor[(5, 1, 15), uint16] */
}

def @func_6691() -> (Tensor[(12, 11, 4), float32], Tensor[(5, ?, 15), bool]) {
  %386 = @func_4951() /* ty=Tensor[(5, 1, 15), uint16] */;
  %387 = cast(%386, dtype="float64") /* ty=Tensor[(5, 1, 15), float64] */;
  %388 = sin(%387) /* ty=Tensor[(5, 1, 15), float64] */;
  %389 = cast(%386, dtype="bool") /* ty=Tensor[(5, 1, 15), bool] */;
  %390 = shape_of(%388, dtype="int32") /* ty=Tensor[(3), int32] */;
  %391 = cast(%388, dtype="bool") /* ty=Tensor[(5, 1, 15), bool] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %393 = @func_5569() /* ty=Tensor[(12, 11, 4), float32] */;
  %394 = greater(%391, %392) /* ty=Tensor[(5, ?, 15), bool] */;
  (%393, %394)
}

def @func_750(%var_747: uint8, %var_748: Tensor[(14, 8, 1), uint8], %var_749: Tensor[(525), float32]) -> (Tensor[(14, 8, 1), bool], Tensor[(14, 8, 1), float32], Tensor[(2, 4, 5), float32], Tensor[(525), float32], Tensor[(40), float32], Tensor[(2, 4, 5), float32]) {
  %413 = fn (%var_717: uint8, %var_718: Tensor[(14, 8, 1), uint8], %var_737: Tensor[(525), float32]) -> (Tensor[(14, 8, 1), bool], Tensor[(14, 8, 1), float32], Tensor[(2, 4, 5), float32], Tensor[(525), float32], Tensor[(40), float32], Tensor[(2, 4, 5), float32]) {
    %395 = cast(%var_717, dtype="bool") /* ty=bool */;
    %396 = cast(%var_718, dtype="bool") /* ty=Tensor[(14, 8, 1), bool] */;
    %397 = cast(%var_718, dtype="float32") /* ty=Tensor[(14, 8, 1), float32] */;
    %398 = cast(%var_717, dtype="float32") /* ty=float32 */;
    %399 = cast(%var_737, dtype="float32") /* ty=Tensor[(525), float32] */;
    %400 = cast(meta[relay.Constant][17] /* ty=Tensor[(40), float32] */, dtype="float32") /* ty=Tensor[(40), float32] */;
    %401 = reshape(%399, newshape=[15, 5, 7]) /* ty=Tensor[(15, 5, 7), float32] */;
    %402 = reshape(%400, newshape=[40]) /* ty=Tensor[(40), float32] */;
    %403 = @func_561(%401, %402) /* ty=(Tensor[(15, 5, 7), float64], Tensor[(2, 4, 5), float32], Tensor[(40), float32]) */;
    %404 = cast(%var_737, dtype="float32") /* ty=Tensor[(525), float32] */;
    %405 = cast(meta[relay.Constant][17] /* ty=Tensor[(40), float32] */, dtype="float32") /* ty=Tensor[(40), float32] */;
    %406 = reshape(%404, newshape=[15, 5, 7]) /* ty=Tensor[(15, 5, 7), float32] */;
    %407 = reshape(%405, newshape=[40]) /* ty=Tensor[(40), float32] */;
    %408 = @func_561(%406, %407) /* ty=(Tensor[(15, 5, 7), float64], Tensor[(2, 4, 5), float32], Tensor[(40), float32]) */;
    %409 = less(%395, %396) /* ty=Tensor[(14, 8, 1), bool] */;
    %410 = multiply(%397, %398) /* ty=Tensor[(14, 8, 1), float32] */;
    %411 = %403.1;
    %412 = %408.1;
    (%409, %410, %411, %var_737, meta[relay.Constant][17] /* ty=Tensor[(40), float32] */, %412)
  };
  %413(%var_747, %var_748, %var_749) /* ty=(Tensor[(14, 8, 1), bool], Tensor[(14, 8, 1), float32], Tensor[(2, 4, 5), float32], Tensor[(525), float32], Tensor[(40), float32], Tensor[(2, 4, 5), float32]) */
}

def @func_4199() -> (Tensor[(5, ?, 15), float32],) {
  %414 = @func_3921() /* ty=(Tensor[(5, ?, 15), float32],) */;
  %415 = %414.0;
  (%415,)
}

def @func_9149() -> (Tensor[(55, ?), float64], Tensor[(5, 1, 15), float64]) {
  %416 = @func_7541() /* ty=(Tensor[(55, ?), float64],) */;
  %417 = %416.0;
  %418 = @func_5947() /* ty=Tensor[(5, 1, 15), float64] */;
  (%417, %418)
}

def @func_8844(%var_8842: Tensor[(384, 1), float64], %var_8843: Tensor[(210), uint64]) -> (Tensor[(2, 4, 5), float32], Tensor[(5, 1, 15), uint16], Tensor[(384, 1), float64], Tensor[(210), uint64]) {
  %426 = fn (%var_8833: Tensor[(384, 1), float64], %var_8834: Tensor[(210), uint64]) -> (Tensor[(2, 4, 5), float32], Tensor[(5, 1, 15), uint16], Tensor[(384, 1), float64], Tensor[(210), uint64]) {
    %419 = cast(%var_8833, dtype="float64") /* ty=Tensor[(384, 1), float64] */;
    %420 = cast(%var_8834, dtype="uint64") /* ty=Tensor[(210), uint64] */;
    %421 = reshape(%419, newshape=[24, 16]) /* ty=Tensor[(24, 16), float64] */;
    %422 = reshape(%420, newshape=[210]) /* ty=Tensor[(210), uint64] */;
    %423 = @func_6180(%421, %422) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(55), float64], Tensor[(6, 16, 4), uint32], Tensor[(24, 16), float64], Tensor[(210), uint64], Tensor[(5, ?, 15), int32]) */;
    %424 = @func_7921() /* ty=Tensor[(2, 4, 5), float32] */;
    %425 = %423.0;
    (%424, %425, %var_8833, %var_8834)
  };
  %426(%var_8842, %var_8843) /* ty=(Tensor[(2, 4, 5), float32], Tensor[(5, 1, 15), uint16], Tensor[(384, 1), float64], Tensor[(210), uint64]) */
}

def @func_6076(%var_6074: Tensor[(7, 7, 15), uint16]) -> (Tensor[(7, 7, 15), uint16], Tensor[(5, 1, 15), uint16]) {
  @func_6073(%var_6074) /* ty=(Tensor[(7, 7, 15), uint16], Tensor[(5, 1, 15), uint16]) */
}

def @func_9392() -> (Tensor[(5, 1, 15), float64],) {
  %429 = fn () -> (Tensor[(5, 1, 15), float64],) {
    %427 = @func_8412() /* ty=(Tensor[(5, 1, 15), float64],) */;
    %428 = %427.0;
    (%428,)
  };
  %429() /* ty=(Tensor[(5, 1, 15), float64],) */
}

def @func_9848(%var_9844: Tensor[(600), uint16], %var_9845: Tensor[(1, 112), uint8]) -> (Tensor[(5, 1, 15), float64], Tensor[(55, ?), float32], uint8, Tensor[(600), uint16], Tensor[(1, 112), uint8]) {
  %430 = @func_8412() /* ty=(Tensor[(5, 1, 15), float64],) */;
  %431 = @func_6345() /* ty=(Tensor[(55, ?), float32],) */;
  %432 = cast(%var_9844, dtype="uint16") /* ty=Tensor[(600), uint16] */;
  %433 = cast(%var_9845, dtype="uint8") /* ty=Tensor[(1, 112), uint8] */;
  %434 = reshape(%432, newshape=[6, 100]) /* ty=Tensor[(6, 100), uint16] */;
  %435 = reshape(%433, newshape=[56, 2]) /* ty=Tensor[(56, 2), uint8] */;
  %436 = @func_8257(%434, %435) /* ty=(Tensor[(12, 11, 4), float32], Tensor[(600), uint16], Tensor[(6, 100), uint16], uint8, Tensor[(112), uint8], Tensor[(56, 2), uint8], Tensor[(525), float32]) */;
  %437 = %430.0;
  %438 = %431.0;
  %439 = %436.3;
  (%437, %438, %439, %var_9844, %var_9845)
}

def @func_4455(%var_4454: Tensor[(15, 5, 16), float64]) -> (Tensor[(15, 5, 16), float64], Tensor[(5, 1, 15), uint16], Tensor[(5, 16, 15), int32], Tensor[(210), uint64], Tensor[(600), uint16], Tensor[(55), float64]) {
  %454 = fn (%var_4414: Tensor[(15, 5, 16), float64]) -> (Tensor[(15, 5, 16), float64], Tensor[(5, 1, 15), uint16], Tensor[(5, 16, 15), int32], Tensor[(210), uint64], Tensor[(600), uint16], Tensor[(55), float64]) {
    %440 = cast(%var_4414, dtype="float64") /* ty=Tensor[(15, 5, 16), float64] */;
    %441 = @func_3729() /* ty=(Tensor[(5, 1, 15), uint16],) */;
    %442 = cast(%var_4414, dtype="int32") /* ty=Tensor[(15, 5, 16), int32] */;
    %443 = cast(meta[relay.Constant][18] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
    %444 = cast(meta[relay.Constant][19] /* ty=Tensor[(600), uint16] */, dtype="uint16") /* ty=Tensor[(600), uint16] */;
    %445 = cast(meta[relay.Constant][20] /* ty=Tensor[(55), float64] */, dtype="float64") /* ty=Tensor[(55), float64] */;
    %446 = reshape(%442, newshape=[5, 16, 15]) /* ty=Tensor[(5, 16, 15), int32] */;
    %447 = reshape(%443, newshape=[210, 1]) /* ty=Tensor[(210, 1), uint64] */;
    %448 = reshape(%444, newshape=[600]) /* ty=Tensor[(600), uint16] */;
    %449 = reshape(%445, newshape=[55]) /* ty=Tensor[(55), float64] */;
    %450 = @func_3648(%446, %447, %448, %449) /* ty=(Tensor[(5, 16, 15), int32], Tensor[(10, 5), uint16], Tensor[(210, 1), uint64], Tensor[(600), uint16], Tensor[(55), float64]) */;
    %451 = exp(%440) /* ty=Tensor[(15, 5, 16), float64] */;
    %452 = %441.0;
    %453 = %450.0;
    (%451, %452, %453, meta[relay.Constant][18] /* ty=Tensor[(210), uint64] */, meta[relay.Constant][19] /* ty=Tensor[(600), uint16] */, meta[relay.Constant][20] /* ty=Tensor[(55), float64] */)
  };
  %454(%var_4454) /* ty=(Tensor[(15, 5, 16), float64], Tensor[(5, 1, 15), uint16], Tensor[(5, 16, 15), int32], Tensor[(210), uint64], Tensor[(600), uint16], Tensor[(55), float64]) */
}

def @func_8132() -> (Tensor[(5, 1, 15), float64],) {
  %455 = @func_6929() /* ty=Tensor[(5, 1, 15), float64] */;
  (%455,)
}

def @func_12748(%var_12704: Tensor[(1, 55), float64]) -> (Tensor[(1, 55), float64], Tensor[(5, 1, 15), uint16], Tensor[(5, ?, 15), float64]) {
  %456 = @func_12277() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64], Tensor[(5, 1, 15), uint16], Tensor[(55, ?), float64]) */;
  %457 = %456.2;
  %458 = cast(%var_12704, dtype="float64") /* ty=Tensor[(1, 55), float64] */;
  %459 = reshape(%458, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %460 = @func_7226(%459) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16], Tensor[(55), float64]) */;
  %461 = %460.0;
  %462 = cast(%461, dtype="float64") /* ty=Tensor[(5, 1, 15), float64] */;
  %463 = shape_of(%457, dtype="int32") /* ty=Tensor[(3), int32] */;
  %464 = cast(%457, dtype="float64") /* ty=Tensor[(5, 1, 15), float64] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %466 = @func_10238() /* ty=Tensor[(5, 1, 15), uint16] */;
  %467 = floor_mod(%464, %465) /* ty=Tensor[(5, ?, 15), float64] */;
  (%var_12704, %466, %467)
}

def @func_10433() -> Tensor[(5, ?, 15), int64] {
  @func_10431() /* ty=Tensor[(5, ?, 15), int64] */
}

def @func_7162(%var_7152: Tensor[(525), float32]) -> (Tensor[(5, 1, 15), uint16], Tensor[(12, 50), uint16], Tensor[(525), float32]) {
  %468 = @func_6439() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64]) */;
  %469 = cast(%var_7152, dtype="float32") /* ty=Tensor[(525), float32] */;
  %470 = reshape(%469, newshape=[525]) /* ty=Tensor[(525), float32] */;
  %471 = @func_6561(%470) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(525), float32], Tensor[(12, 50), uint16], Tensor[(525), float32], uint8) */;
  %472 = %468.0;
  %473 = %471.2;
  (%472, %473, %var_7152)
}

def @func_8290() -> (Tensor[(600), uint16],) {
  %476 = fn () -> (Tensor[(600), uint16],) {
    %474 = @func_5352() /* ty=(Tensor[(55), float64], Tensor[(525), float32], Tensor[(600), uint16], Tensor[(525), float32], uint8, Tensor[(50), uint16]) */;
    %475 = %474.2;
    (%475,)
  };
  %476() /* ty=(Tensor[(600), uint16],) */
}

def @func_6910(%var_6909: Tensor[(112), uint8]) -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 105), bool], Tensor[(112), uint8], Tensor[(525), float32]) {
  %486 = fn (%var_6901: Tensor[(112), uint8]) -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 105), bool], Tensor[(112), uint8], Tensor[(525), float32]) {
    %477 = cast(%var_6901, dtype="uint8") /* ty=Tensor[(112), uint8] */;
    %478 = cast(meta[relay.Constant][21] /* ty=Tensor[(525), float32] */, dtype="float32") /* ty=Tensor[(525), float32] */;
    %479 = cast(meta[relay.Constant][21] /* ty=Tensor[(525), float32] */, dtype="float32") /* ty=Tensor[(525), float32] */;
    %480 = reshape(%477, newshape=[112]) /* ty=Tensor[(112), uint8] */;
    %481 = reshape(%478, newshape=[5, 105]) /* ty=Tensor[(5, 105), float32] */;
    %482 = reshape(%479, newshape=[5, 105]) /* ty=Tensor[(5, 105), float32] */;
    %483 = @func_4529(%480, %481, %482) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(2, 4, 5), float32], Tensor[(112), uint8], Tensor[(5, 105), bool], Tensor[(15, 5, 7), float64], Tensor[(5, 105), float64]) */;
    %484 = @func_4650() /* ty=Tensor[(5, 1, 15), uint16] */;
    %485 = %483.3;
    (%484, %485, %var_6901, meta[relay.Constant][21] /* ty=Tensor[(525), float32] */)
  };
  %486(%var_6909) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 105), bool], Tensor[(112), uint8], Tensor[(525), float32]) */
}

def @func_10273() -> Tensor[(55, ?), float32] {
  %491 = fn () -> Tensor[(55, ?), float32] {
    %487 = @func_9108() /* ty=Tensor[(55, ?), float64] */;
    %488 = cast(%487, dtype="float32") /* ty=Tensor[(55, ?), float32] */;
    %489 = erf(%488) /* ty=Tensor[(55, ?), float32] */;
    %490 = cast(%489, dtype="float32") /* ty=Tensor[(55, ?), float32] */;
    sigmoid(%490) /* ty=Tensor[(55, ?), float32] */
  };
  %491() /* ty=Tensor[(55, ?), float32] */
}

def @func_4873(%var_4870: Tensor[(600), uint16], %var_4871: Tensor[(525), float32], %var_4872: uint8) -> (Tensor[(5, ?, 15), float32], Tensor[(5, 1, 15), uint16], Tensor[(600), uint16], Tensor[(525), float32], Tensor[(14, 8, 1), float32], uint8, Tensor[(2, 56), uint8]) {
  @func_4868(%var_4870, %var_4871, %var_4872) /* ty=(Tensor[(5, ?, 15), float32], Tensor[(5, 1, 15), uint16], Tensor[(600), uint16], Tensor[(525), float32], Tensor[(14, 8, 1), float32], uint8, Tensor[(2, 56), uint8]) */
}

def @func_151(%var_147: Tensor[(2, 4, 5), float32]) -> Tensor[(2, 4, 5), float32] {
  %492 = cast(%var_147, dtype="float32") /* ty=Tensor[(2, 4, 5), float32] */;
  cosh(%492) /* ty=Tensor[(2, 4, 5), float32] */
}

def @func_5852() -> Tensor[(55, ?), float64] {
  %493 = @func_5282() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(210), uint64], Tensor[(55, 1), float64], Tensor[(55), float64]) */;
  %494 = %493.2;
  %495 = cast(%494, dtype="float64") /* ty=Tensor[(55, 1), float64] */;
  %496 = acosh(%495) /* ty=Tensor[(55, 1), float64] */;
  %497 = cast(%494, dtype="uint32") /* ty=Tensor[(55, 1), uint32] */;
  %498 = shape_of(%496, dtype="int32") /* ty=Tensor[(2), int32] */;
  %499 = cast(%496, dtype="uint32") /* ty=Tensor[(55, 1), uint32] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %501 = logical_xor(%499, %500) /* ty=Tensor[(55, ?), uint32] */;
  %502 = cast(%501, dtype="float64") /* ty=Tensor[(55, ?), float64] */;
  asin(%502) /* ty=Tensor[(55, ?), float64] */
}

def @func_13864() -> (Tensor[(5, 1, 15), uint16],) {
  @func_13862() /* ty=(Tensor[(5, 1, 15), uint16],) */
}

def @func_6951() -> Tensor[(55, ?), float64] {
  @func_6949() /* ty=Tensor[(55, ?), float64] */
}

def @func_6949() -> Tensor[(55, ?), float64] {
  @func_5852() /* ty=Tensor[(55, ?), float64] */
}

def @func_7921() -> Tensor[(2, 4, 5), float32] {
  %503 = @func_5326() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(2, 4, 5), float32], Tensor[(40), float32], Tensor[(5, 1, 15), uint16], Tensor[(210), uint64]) */;
  %503.1
}

def @func_11351() -> (Tensor[(5, 1, 15), float64], Tensor[(7, 7, 15), uint16], Tensor[(245, 3), uint16], Tensor[(55), float64], Tensor[(55), float64]) {
  %504 = @func_8412() /* ty=(Tensor[(5, 1, 15), float64],) */;
  %505 = cast(meta[relay.Constant][22] /* ty=Tensor[(245, 3), uint16] */, dtype="uint16") /* ty=Tensor[(245, 3), uint16] */;
  %506 = reshape(%505, newshape=[7, 7, 15]) /* ty=Tensor[(7, 7, 15), uint16] */;
  %507 = @func_6073(%506) /* ty=(Tensor[(7, 7, 15), uint16], Tensor[(5, 1, 15), uint16]) */;
  %508 = cast(meta[relay.Constant][23] /* ty=Tensor[(55), float64] */, dtype="float64") /* ty=Tensor[(55), float64] */;
  %509 = reshape(%508, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %510 = @func_4139(%509) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 16, 15), int32], Tensor[(4, 300), int32], Tensor[(210), uint64], Tensor[(6, 100), uint16], Tensor[(55), float64]) */;
  %511 = %504.0;
  %512 = %507.0;
  %513 = %510.5;
  (%511, %512, meta[relay.Constant][22] /* ty=Tensor[(245, 3), uint16] */, %513, meta[relay.Constant][23] /* ty=Tensor[(55), float64] */)
}

def @func_6499() -> (Tensor[(5, ?, 15), float32], Tensor[(5, 1, 15), float64], Tensor[(10, 5, 12), uint16], Tensor[(50), uint16], Tensor[(1, 600), uint16]) {
  %529 = fn () -> (Tensor[(5, ?, 15), float32], Tensor[(5, 1, 15), float64], Tensor[(10, 5, 12), uint16], Tensor[(50), uint16], Tensor[(1, 600), uint16]) {
    %514 = @func_5749() /* ty=(Tensor[(5, ?, 15), float32],) */;
    %515 = %514.0;
    %516 = @func_5352() /* ty=(Tensor[(55), float64], Tensor[(525), float32], Tensor[(600), uint16], Tensor[(525), float32], uint8, Tensor[(50), uint16]) */;
    %517 = %516.4;
    %518 = cast(%515, dtype="float32") /* ty=Tensor[(5, ?, 15), float32] */;
    %519 = cast(%517, dtype="float32") /* ty=float32 */;
    %520 = @func_4250() /* ty=Tensor[(5, 1, 15), uint16] */;
    %521 = cast(%520, dtype="float64") /* ty=Tensor[(5, 1, 15), float64] */;
    %522 = cast(meta[relay.Constant][24] /* ty=Tensor[(50), uint16] */, dtype="uint16") /* ty=Tensor[(50), uint16] */;
    %523 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 600), uint16] */, dtype="uint16") /* ty=Tensor[(1, 600), uint16] */;
    %524 = reshape(%522, newshape=[10, 5, 1]) /* ty=Tensor[(10, 5, 1), uint16] */;
    %525 = reshape(%523, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), uint16] */;
    %526 = divide(%518, %519) /* ty=Tensor[(5, ?, 15), float32] */;
    %527 = erf(%521) /* ty=Tensor[(5, 1, 15), float64] */;
    %528 = @func_852(%524, %525) /* ty=Tensor[(10, 5, 12), uint16] */;
    (%526, %527, %528, meta[relay.Constant][24] /* ty=Tensor[(50), uint16] */, meta[relay.Constant][25] /* ty=Tensor[(1, 600), uint16] */)
  };
  %529() /* ty=(Tensor[(5, ?, 15), float32], Tensor[(5, 1, 15), float64], Tensor[(10, 5, 12), uint16], Tensor[(50), uint16], Tensor[(1, 600), uint16]) */
}

def @func_9384() -> (Tensor[(55, ?), float64], Tensor[(5, 1, 15), uint16]) {
  %530 = @func_6949() /* ty=Tensor[(55, ?), float64] */;
  %531 = @func_4250() /* ty=Tensor[(5, 1, 15), uint16] */;
  (%530, %531)
}

def @func_10072() -> (Tensor[(5, 1, 15), uint16],) {
  @func_10070() /* ty=(Tensor[(5, 1, 15), uint16],) */
}

def @func_10911() -> Tensor[(16, 3, 16), float32] {
  %533 = fn () -> Tensor[(16, 3, 16), float32] {
    %532 = @func_9758() /* ty=(Tensor[(16, 3, 16), float32],) */;
    %532.0
  };
  %533() /* ty=Tensor[(16, 3, 16), float32] */
}

def @func_12897(%var_12895: Tensor[(112), uint8]) -> (Tensor[(?, 13, 7), uint32], Tensor[(1, 13, 7), float64], Tensor[(5, 105), bool], Tensor[(112), uint8]) {
  @func_12894(%var_12895) /* ty=(Tensor[(?, 13, 7), uint32], Tensor[(1, 13, 7), float64], Tensor[(5, 105), bool], Tensor[(112), uint8]) */
}

def @func_8585() -> (Tensor[(5, 1, 15), float64],) {
  @func_8583() /* ty=(Tensor[(5, 1, 15), float64],) */
}

def @func_8484(%var_8478: Tensor[(14, 8, 7), float32]) -> (Tensor[(14, 8, 7), uint8],) {
  %534 = @func_6819() /* ty=(Tensor[(14, 1, 7), float32], Tensor[(5, 1, 15), float64], Tensor[(12, 11, 4), float32], Tensor[(12, 50), uint16], Tensor[(1, 525), float32]) */;
  %535 = %534.0;
  %536 = cast(%535, dtype="uint8") /* ty=Tensor[(14, 1, 7), uint8] */;
  %537 = cast(%var_8478, dtype="uint8") /* ty=Tensor[(14, 8, 7), uint8] */;
  %538 = minimum(%536, %537) /* ty=Tensor[(14, 8, 7), uint8] */;
  (%538,)
}

def @func_12612() -> Tensor[(5, 1, 15), float64] {
  @func_12610() /* ty=Tensor[(5, 1, 15), float64] */
}

def @func_8979(%var_8977: Tensor[(55, 9), float32]) -> (Tensor[(55, ?), float64], Tensor[(55), float64], Tensor[(40), float32], Tensor[(55, 9), float64]) {
  @func_8976(%var_8977) /* ty=(Tensor[(55, ?), float64], Tensor[(55), float64], Tensor[(40), float32], Tensor[(55, 9), float64]) */
}

def @func_5249(%var_5247: Tensor[(55), float64]) -> (Tensor[(5, 1, 15), uint16], Tensor[(5, ?, 15), float32], Tensor[(55), float64]) {
  @func_5246(%var_5247) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, ?, 15), float32], Tensor[(55), float64]) */
}

def @func_12111() -> (Tensor[(600), uint16],) {
  %541 = fn () -> (Tensor[(600), uint16],) {
    %539 = @func_5352() /* ty=(Tensor[(55), float64], Tensor[(525), float32], Tensor[(600), uint16], Tensor[(525), float32], uint8, Tensor[(50), uint16]) */;
    %540 = %539.2;
    (%540,)
  };
  %541() /* ty=(Tensor[(600), uint16],) */
}

def @func_4023(%var_4021: Tensor[(40), float32]) -> (Tensor[(5, 1, 15), uint16], Tensor[(40), float32], Tensor[(35, 15), float32], Tensor[(40), float32]) {
  @func_4020(%var_4021) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(40), float32], Tensor[(35, 15), float32], Tensor[(40), float32]) */
}

def @func_4638(%var_4613: Tensor[(600), uint16], %var_4623: Tensor[(525), float32]) -> (Tensor[(5, 1, 15), uint16], Tensor[(10, 5, 12), uint16], Tensor[(50), uint16], Tensor[(600), uint16], Tensor[(5, 1, 15), uint16], Tensor[(112), uint8], Tensor[(525), float32], Tensor[(5, 1, 15), uint16]) {
  %542 = @func_4213() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %543 = cast(meta[relay.Constant][26] /* ty=Tensor[(50), uint16] */, dtype="uint16") /* ty=Tensor[(50), uint16] */;
  %544 = cast(%var_4613, dtype="uint16") /* ty=Tensor[(600), uint16] */;
  %545 = reshape(%543, newshape=[10, 5, 1]) /* ty=Tensor[(10, 5, 1), uint16] */;
  %546 = reshape(%544, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), uint16] */;
  %547 = cast(meta[relay.Constant][27] /* ty=Tensor[(112), uint8] */, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %548 = cast(%var_4623, dtype="float32") /* ty=Tensor[(525), float32] */;
  %549 = cast(%var_4623, dtype="float32") /* ty=Tensor[(525), float32] */;
  %550 = reshape(%547, newshape=[112]) /* ty=Tensor[(112), uint8] */;
  %551 = reshape(%548, newshape=[5, 105]) /* ty=Tensor[(5, 105), float32] */;
  %552 = reshape(%549, newshape=[5, 105]) /* ty=Tensor[(5, 105), float32] */;
  %553 = @func_4529(%550, %551, %552) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(2, 4, 5), float32], Tensor[(112), uint8], Tensor[(5, 105), bool], Tensor[(15, 5, 7), float64], Tensor[(5, 105), float64]) */;
  %554 = @func_3729() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %555 = %542.0;
  %556 = @func_852(%545, %546) /* ty=Tensor[(10, 5, 12), uint16] */;
  %557 = %553.0;
  %558 = %554.0;
  (%555, %556, meta[relay.Constant][26] /* ty=Tensor[(50), uint16] */, %var_4613, %557, meta[relay.Constant][27] /* ty=Tensor[(112), uint8] */, %var_4623, %558)
}

def @func_11496() -> Tensor[(5, 1, 15), uint16] {
  %560 = fn () -> Tensor[(5, 1, 15), uint16] {
    %559 = @func_9182() /* ty=(Tensor[(5, 1, 15), uint16],) */;
    %559.0
  };
  %560() /* ty=Tensor[(5, 1, 15), uint16] */
}

def @func_10359(%var_10357: Tensor[(600), uint16], %var_10358: Tensor[(112), uint8]) -> (Tensor[(210), uint64], Tensor[(5, 1, 15), uint16], uint8, Tensor[(600), uint16], Tensor[(112), uint8], Tensor[(5, 1, 15), uint16]) {
  %572 = fn (%var_10334: Tensor[(600), uint16], %var_10335: Tensor[(112), uint8]) -> (Tensor[(210), uint64], Tensor[(5, 1, 15), uint16], uint8, Tensor[(600), uint16], Tensor[(112), uint8], Tensor[(5, 1, 15), uint16]) {
    %561 = @func_5326() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(2, 4, 5), float32], Tensor[(40), float32], Tensor[(5, 1, 15), uint16], Tensor[(210), uint64]) */;
    %562 = @func_5718() /* ty=(Tensor[(5, 1, 15), uint16],) */;
    %563 = cast(%var_10334, dtype="uint16") /* ty=Tensor[(600), uint16] */;
    %564 = cast(%var_10335, dtype="uint8") /* ty=Tensor[(112), uint8] */;
    %565 = reshape(%563, newshape=[600]) /* ty=Tensor[(600), uint16] */;
    %566 = reshape(%564, newshape=[1, 112]) /* ty=Tensor[(1, 112), uint8] */;
    %567 = @func_9848(%565, %566) /* ty=(Tensor[(5, 1, 15), float64], Tensor[(55, ?), float32], uint8, Tensor[(600), uint16], Tensor[(1, 112), uint8]) */;
    %568 = %561.4;
    %569 = %562.0;
    %570 = %567.2;
    %571 = @func_3819() /* ty=Tensor[(5, 1, 15), uint16] */;
    (%568, %569, %570, %var_10334, %var_10335, %571)
  };
  %572(%var_10357, %var_10358) /* ty=(Tensor[(210), uint64], Tensor[(5, 1, 15), uint16], uint8, Tensor[(600), uint16], Tensor[(112), uint8], Tensor[(5, 1, 15), uint16]) */
}

def @func_10873(%var_10836: Tensor[(12, 8, 15), float64]) -> (Tensor[(12, 8, 15), float64], Tensor[(5, 1, 15), uint16]) {
  %573 = cast(%var_10836, dtype="float64") /* ty=Tensor[(12, 8, 15), float64] */;
  %574 = @func_10207() /* ty=(Tensor[(55, ?), float64], Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64]) */;
  %575 = tan(%573) /* ty=Tensor[(12, 8, 15), float64] */;
  %576 = %574.1;
  (%575, %576)
}

def @func_6561(%var_6556: Tensor[(525), float32]) -> (Tensor[(5, 1, 15), uint16], Tensor[(525), float32], Tensor[(12, 50), uint16], Tensor[(525), float32], uint8) {
  %577 = @func_5007() /* ty=(Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) */;
  %578 = cast(meta[relay.Constant][28] /* ty=Tensor[(12, 50), uint16] */, dtype="uint16") /* ty=Tensor[(12, 50), uint16] */;
  %579 = cast(%var_6556, dtype="float32") /* ty=Tensor[(525), float32] */;
  %580 = cast(meta[relay.Constant][29] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %581 = reshape(%578, newshape=[600]) /* ty=Tensor[(600), uint16] */;
  %582 = reshape(%579, newshape=[525]) /* ty=Tensor[(525), float32] */;
  %583 = reshape(%580, newshape=[]) /* ty=uint8 */;
  %584 = @func_4868(%581, %582, %583) /* ty=(Tensor[(5, ?, 15), float32], Tensor[(5, 1, 15), uint16], Tensor[(600), uint16], Tensor[(525), float32], Tensor[(14, 8, 1), float32], uint8, Tensor[(2, 56), uint8]) */;
  %585 = %577.1;
  %586 = %584.3;
  (%585, %586, meta[relay.Constant][28] /* ty=Tensor[(12, 50), uint16] */, %var_6556, meta[relay.Constant][29] /* ty=uint8 */)
}

def @func_9670(%var_9667: Tensor[(112), uint8], %var_9668: uint8, %var_9669: Tensor[(55, 8), float64]) -> (Tensor[(6, 100), uint16], Tensor[(2, 300), uint16], Tensor[(112), uint8], Tensor[(55, ?), float32], Tensor[(5, 1, 15), uint16], Tensor[(55, ?), float64], Tensor[(5, 1, 15), uint16], Tensor[(55, 525), float64], Tensor[(55, ?), int16], Tensor[(55, 8), bool], Tensor[(5, ?, 15), float32]) {
  @func_9665(%var_9667, %var_9668, %var_9669) /* ty=(Tensor[(6, 100), uint16], Tensor[(2, 300), uint16], Tensor[(112), uint8], Tensor[(55, ?), float32], Tensor[(5, 1, 15), uint16], Tensor[(55, ?), float64], Tensor[(5, 1, 15), uint16], Tensor[(55, 525), float64], Tensor[(55, ?), int16], Tensor[(55, 8), bool], Tensor[(5, ?, 15), float32]) */
}

def @func_7394() -> Tensor[(55, ?), float64] {
  %587 = fn () -> Tensor[(55, ?), float64] {
    @func_5852() /* ty=Tensor[(55, ?), float64] */
  };
  %587() /* ty=Tensor[(55, ?), float64] */
}

def @func_9792(%var_9782: Tensor[(1, 525), float32]) -> (Tensor[(210), uint64], Tensor[(2, 4, 5), float32], bool, Tensor[(33), bool], Tensor[(1, 525), float32], Tensor[(5, 105), float64]) {
  %588 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %589 = cast(meta[relay.Constant][30] /* ty=Tensor[(33), bool] */, dtype="bool") /* ty=Tensor[(33), bool] */;
  %590 = cast(%var_9782, dtype="float32") /* ty=Tensor[(1, 525), float32] */;
  %591 = reshape(%588, newshape=[]) /* ty=bool */;
  %592 = reshape(%589, newshape=[3, 1, 11]) /* ty=Tensor[(3, 1, 11), bool] */;
  %593 = reshape(%590, newshape=[525]) /* ty=Tensor[(525), float32] */;
  %594 = @func_8077(%591, %592, %593) /* ty=(Tensor[(5, 105), bool], Tensor[(112), uint8], Tensor[(525), float32], Tensor[(55, ?), float64], Tensor[(3, ?, 11), float64]) */;
  %595 = %594.0;
  %596 = cast(%595, dtype="float64") /* ty=Tensor[(5, 105), float64] */;
  %597 = @func_7712() /* ty=Tensor[(210), uint64] */;
  %598 = @func_7921() /* ty=Tensor[(2, 4, 5), float32] */;
  %599 = sin(%596) /* ty=Tensor[(5, 105), float64] */;
  (%597, %598, False /* ty=bool */, meta[relay.Constant][30] /* ty=Tensor[(33), bool] */, %var_9782, %599)
}

def @func_11710() -> (Tensor[(2, 4, 5), float32],) {
  @func_11708() /* ty=(Tensor[(2, 4, 5), float32],) */
}

def @func_10239() -> Tensor[(5, 1, 15), uint16] {
  %601 = fn () -> Tensor[(5, 1, 15), uint16] {
    %600 = @func_8148() /* ty=(Tensor[(5, 1, 15), uint16],) */;
    %600.0
  };
  %601() /* ty=Tensor[(5, 1, 15), uint16] */
}

def @func_4533(%var_4530: Tensor[(112), uint8], %var_4531: Tensor[(5, 105), float32], %var_4532: Tensor[(5, 105), float32]) -> (Tensor[(5, 1, 15), uint16], Tensor[(2, 4, 5), float32], Tensor[(112), uint8], Tensor[(5, 105), bool], Tensor[(15, 5, 7), float64], Tensor[(5, 105), float64]) {
  %632 = fn (%var_4482: Tensor[(112), uint8], %var_4483: Tensor[(5, 105), float32], %var_4501: Tensor[(5, 105), float32]) -> (Tensor[(5, 1, 15), uint16], Tensor[(2, 4, 5), float32], Tensor[(112), uint8], Tensor[(5, 105), bool], Tensor[(15, 5, 7), float64], Tensor[(5, 105), float64]) {
    %602 = cast(meta[relay.Constant][31] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %603 = cast(%var_4482, dtype="uint8") /* ty=Tensor[(112), uint8] */;
    %604 = cast(%var_4483, dtype="float32") /* ty=Tensor[(5, 105), float32] */;
    %605 = reshape(%602, newshape=[]) /* ty=uint8 */;
    %606 = reshape(%603, newshape=[14, 8, 1]) /* ty=Tensor[(14, 8, 1), uint8] */;
    %607 = reshape(%604, newshape=[525]) /* ty=Tensor[(525), float32] */;
    %608 = @func_746(%605, %606, %607) /* ty=(Tensor[(14, 8, 1), bool], Tensor[(14, 8, 1), float32], Tensor[(2, 4, 5), float32], Tensor[(525), float32], Tensor[(40), float32], Tensor[(2, 4, 5), float32]) */;
    %609 = cast(meta[relay.Constant][31] /* ty=uint8 */, dtype="int32") /* ty=int32 */;
    %610 = cast(%var_4483, dtype="int32") /* ty=Tensor[(5, 105), int32] */;
    %611 = bitwise_or(%609, %610) /* ty=Tensor[(5, 105), int32] */;
    %612 = cast(%611, dtype="float32") /* ty=Tensor[(5, 105), float32] */;
    %613 = shape_of(%var_4483, dtype="int32") /* ty=Tensor[(2), int32] */;
    %614 = cast(%var_4483, dtype="float32") /* ty=Tensor[(5, 105), float32] */;
    %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %616 = minimum(%614, %615) /* ty=Tensor[(5, 105), float32] */;
    %617 = cast(%var_4501, dtype="bool") /* ty=Tensor[(5, 105), bool] */;
    %618 = shape_of(%616, dtype="int32") /* ty=Tensor[(2), int32] */;
    %619 = cast(%616, dtype="bool") /* ty=Tensor[(5, 105), bool] */;
    %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %621 = greater_equal(%619, %620) /* ty=Tensor[(5, 105), bool] */;
    %622 = cast(%621, dtype="float32") /* ty=Tensor[(5, 105), float32] */;
    %623 = %608.2;
    %624 = cast(%623, dtype="float32") /* ty=Tensor[(2, 4, 5), float32] */;
    %625 = reshape(%622, newshape=[15, 5, 7]) /* ty=Tensor[(15, 5, 7), float32] */;
    %626 = reshape(%624, newshape=[40]) /* ty=Tensor[(40), float32] */;
    %627 = @func_561(%625, %626) /* ty=(Tensor[(15, 5, 7), float64], Tensor[(2, 4, 5), float32], Tensor[(40), float32]) */;
    %628 = cast(%var_4501, dtype="float64") /* ty=Tensor[(5, 105), float64] */;
    %629 = @func_4250() /* ty=Tensor[(5, 1, 15), uint16] */;
    %630 = %627.0;
    %631 = log(%628) /* ty=Tensor[(5, 105), float64] */;
    (%629, %623, %var_4482, %621, %630, %631)
  };
  %632(%var_4530, %var_4531, %var_4532) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(2, 4, 5), float32], Tensor[(112), uint8], Tensor[(5, 105), bool], Tensor[(15, 5, 7), float64], Tensor[(5, 105), float64]) */
}

def @func_11995(%var_11994: Tensor[(55, 13), float64]) -> Tensor[(55, 13), float32] {
  %636 = fn (%var_11983: Tensor[(55, 13), float64]) -> Tensor[(55, 13), float32] {
    %633 = @func_5852() /* ty=Tensor[(55, ?), float64] */;
    %634 = cast(%633, dtype="float32") /* ty=Tensor[(55, ?), float32] */;
    %635 = cast(%var_11983, dtype="float32") /* ty=Tensor[(55, 13), float32] */;
    floor_mod(%634, %635) /* ty=Tensor[(55, 13), float32] */
  };
  %636(%var_11994) /* ty=Tensor[(55, 13), float32] */
}

def @func_14027(%var_14025: Tensor[(4, 28), uint8], %var_14026: Tensor[(525), float32]) -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16], Tensor[(112), uint8], Tensor[(4, 28), uint8], Tensor[(525), float32]) {
  %647 = fn (%var_14021: Tensor[(4, 28), uint8], %var_14022: Tensor[(525), float32]) -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16], Tensor[(112), uint8], Tensor[(4, 28), uint8], Tensor[(525), float32]) {
    %637 = @func_6091() /* ty=(Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) */;
    %638 = @func_4213() /* ty=(Tensor[(5, 1, 15), uint16],) */;
    %639 = cast(%var_14021, dtype="uint8") /* ty=Tensor[(4, 28), uint8] */;
    %640 = cast(%var_14022, dtype="float32") /* ty=Tensor[(525), float32] */;
    %641 = reshape(%639, newshape=[112]) /* ty=Tensor[(112), uint8] */;
    %642 = reshape(%640, newshape=[525]) /* ty=Tensor[(525), float32] */;
    %643 = @func_6246(%641, %642) /* ty=(Tensor[(55, ?), float64], Tensor[(112), uint8], Tensor[(112), uint8], Tensor[(525), float32]) */;
    %644 = %637.1;
    %645 = %638.0;
    %646 = %643.2;
    (%644, %645, %646, %var_14021, %var_14022)
  };
  %647(%var_14025, %var_14026) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16], Tensor[(112), uint8], Tensor[(4, 28), uint8], Tensor[(525), float32]) */
}

def @func_11764() -> Tensor[(5, 14, 15), int64] {
  %648 = @func_9246() /* ty=(Tensor[(5, ?, 15), float32], Tensor[(5, 14, 15), int64], Tensor[(1, 1050), int64]) */;
  %648.1
}

def @func_11582(%var_11580: Tensor[(55, 1), float64], %var_11581: Tensor[(40), float32]) -> (Tensor[(5, 1, 15), uint16], Tensor[(5, ?, 15), float32], Tensor[(55, 1), float64], Tensor[(2, 4, 5), uint64], Tensor[(40), float32], Tensor[(7, 7, 15), uint16], Tensor[(7, 105), uint16]) {
  @func_11578(%var_11580, %var_11581) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, ?, 15), float32], Tensor[(55, 1), float64], Tensor[(2, 4, 5), uint64], Tensor[(40), float32], Tensor[(7, 7, 15), uint16], Tensor[(7, 105), uint16]) */
}

def @func_9510(%var_9502: Tensor[(525), float32]) -> (Tensor[(12, 11, 4), float32], Tensor[(112), uint8], uint8, Tensor[(525), float32]) {
  %649 = @func_6691() /* ty=(Tensor[(12, 11, 4), float32], Tensor[(5, ?, 15), bool]) */;
  %650 = cast(meta[relay.Constant][32] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %651 = cast(%var_9502, dtype="float32") /* ty=Tensor[(525), float32] */;
  %652 = reshape(%650, newshape=[]) /* ty=uint8 */;
  %653 = reshape(%651, newshape=[525]) /* ty=Tensor[(525), float32] */;
  %654 = @func_4595(%652, %653) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16], Tensor[(2, 4, 5), float32], uint8, Tensor[(112), uint8], Tensor[(525), float32]) */;
  %655 = %649.0;
  %656 = %654.4;
  (%655, %656, meta[relay.Constant][32] /* ty=uint8 */, %var_9502)
}

def @func_11688() -> (Tensor[(40), float32], Tensor[(5, 16, 15), int32], Tensor[(55), float64]) {
  %662 = fn () -> (Tensor[(40), float32], Tensor[(5, 16, 15), int32], Tensor[(55), float64]) {
    %657 = cast(meta[relay.Constant][33] /* ty=Tensor[(55), float64] */, dtype="float64") /* ty=Tensor[(55), float64] */;
    %658 = reshape(%657, newshape=[55]) /* ty=Tensor[(55), float64] */;
    %659 = @func_4139(%658) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 16, 15), int32], Tensor[(4, 300), int32], Tensor[(210), uint64], Tensor[(6, 100), uint16], Tensor[(55), float64]) */;
    %660 = @func_11329() /* ty=Tensor[(40), float32] */;
    %661 = %659.1;
    (%660, %661, meta[relay.Constant][33] /* ty=Tensor[(55), float64] */)
  };
  %662() /* ty=(Tensor[(40), float32], Tensor[(5, 16, 15), int32], Tensor[(55), float64]) */
}

def @func_6184(%var_6182: Tensor[(24, 16), float64], %var_6183: Tensor[(210), uint64]) -> (Tensor[(5, 1, 15), uint16], Tensor[(55), float64], Tensor[(6, 16, 4), uint32], Tensor[(24, 16), float64], Tensor[(210), uint64], Tensor[(5, ?, 15), int32]) {
  @func_6180(%var_6182, %var_6183) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(55), float64], Tensor[(6, 16, 4), uint32], Tensor[(24, 16), float64], Tensor[(210), uint64], Tensor[(5, ?, 15), int32]) */
}

def @func_11271() -> Tensor[(5, ?, 15), int64] {
  %663 = @func_5007() /* ty=(Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) */;
  %663.0
}

def @func_4020(%var_4007: Tensor[(40), float32]) -> (Tensor[(5, 1, 15), uint16], Tensor[(40), float32], Tensor[(35, 15), float32], Tensor[(40), float32]) {
  %664 = cast(meta[relay.Constant][34] /* ty=Tensor[(35, 15), float32] */, dtype="float32") /* ty=Tensor[(35, 15), float32] */;
  %665 = cast(%var_4007, dtype="float32") /* ty=Tensor[(40), float32] */;
  %666 = reshape(%664, newshape=[15, 5, 7]) /* ty=Tensor[(15, 5, 7), float32] */;
  %667 = reshape(%665, newshape=[40]) /* ty=Tensor[(40), float32] */;
  %668 = @func_561(%666, %667) /* ty=(Tensor[(15, 5, 7), float64], Tensor[(2, 4, 5), float32], Tensor[(40), float32]) */;
  %669 = @func_3819() /* ty=Tensor[(5, 1, 15), uint16] */;
  %670 = %668.2;
  (%669, %670, meta[relay.Constant][34] /* ty=Tensor[(35, 15), float32] */, %var_4007)
}

def @func_9795(%var_9793: Tensor[(1, 525), float32]) -> (Tensor[(210), uint64], Tensor[(2, 4, 5), float32], bool, Tensor[(33), bool], Tensor[(1, 525), float32], Tensor[(5, 105), float64]) {
  @func_9792(%var_9793) /* ty=(Tensor[(210), uint64], Tensor[(2, 4, 5), float32], bool, Tensor[(33), bool], Tensor[(1, 525), float32], Tensor[(5, 105), float64]) */
}

def @func_9942(%var_9938: Tensor[(525), float32], %var_9939: Tensor[(40, 1), float32], %var_9940: Tensor[(40, 4), float64], %var_9941: Tensor[(384, 1), float64]) -> (Tensor[(55, ?), float64], Tensor[(40), float32], Tensor[(40, 525), int16], Tensor[(40, 4), int8], Tensor[(300, 2), uint16], Tensor[(384, 1), float64], Tensor[(210), uint64], Tensor[(210), uint64]) {
  @func_9936(%var_9938, %var_9939, %var_9940, %var_9941) /* ty=(Tensor[(55, ?), float64], Tensor[(40), float32], Tensor[(40, 525), int16], Tensor[(40, 4), int8], Tensor[(300, 2), uint16], Tensor[(384, 1), float64], Tensor[(210), uint64], Tensor[(210), uint64]) */
}

def @func_3654(%var_3650: Tensor[(5, 16, 15), int32], %var_3651: Tensor[(210, 1), uint64], %var_3652: Tensor[(600), uint16], %var_3653: Tensor[(55), float64]) -> (Tensor[(5, 16, 15), int32], Tensor[(10, 5), uint16], Tensor[(210, 1), uint64], Tensor[(600), uint16], Tensor[(55), float64]) {
  @func_3648(%var_3650, %var_3651, %var_3652, %var_3653) /* ty=(Tensor[(5, 16, 15), int32], Tensor[(10, 5), uint16], Tensor[(210, 1), uint64], Tensor[(600), uint16], Tensor[(55), float64]) */
}

def @func_13426() -> (Tensor[(16, 3, 16), float32], Tensor[(55, ?), float64], Tensor[(5, 1, 15), uint16]) {
  %671 = @func_9758() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %672 = @func_8023() /* ty=(Tensor[(55, ?), float64],) */;
  %673 = @func_11133() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %674 = %671.0;
  %675 = %672.0;
  %676 = %673.0;
  (%674, %675, %676)
}

def @func_12786() -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64]) {
  %681 = fn () -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64]) {
    %677 = @func_8368() /* ty=(Tensor[(5, 1, 15), uint16],) */;
    %678 = @func_9391() /* ty=(Tensor[(5, 1, 15), float64],) */;
    %679 = %677.0;
    %680 = %678.0;
    (%679, %680)
  };
  %681() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64]) */
}

def @func_12751(%var_12749: Tensor[(1, 55), float64]) -> (Tensor[(1, 55), float64], Tensor[(5, 1, 15), uint16], Tensor[(5, ?, 15), float64]) {
  @func_12748(%var_12749) /* ty=(Tensor[(1, 55), float64], Tensor[(5, 1, 15), uint16], Tensor[(5, ?, 15), float64]) */
}

def @func_14115() -> (Tensor[(5, ?, 15), int64], Tensor[(5, 16, 7), float64], Tensor[(560, 1), float64]) {
  %682 = @func_9957() /* ty=(Tensor[(5, ?, 15), int64],) */;
  %683 = cast(meta[relay.Constant][35] /* ty=Tensor[(560, 1), float64] */, dtype="float64") /* ty=Tensor[(560, 1), float64] */;
  %684 = reshape(%683, newshape=[5, 16, 7]) /* ty=Tensor[(5, 16, 7), float64] */;
  %685 = @func_11184(%684) /* ty=(Tensor[(5, 16, 7), float64],) */;
  %686 = %682.0;
  %687 = %685.0;
  (%686, %687, meta[relay.Constant][35] /* ty=Tensor[(560, 1), float64] */)
}

def @func_13967() -> (Tensor[(5, 1, 15), float64], Tensor[(2, 300), uint16]) {
  %688 = @func_12785() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64]) */;
  %689 = @func_8443() /* ty=(Tensor[(2, 300), uint16], Tensor[(5, ?, 15), int64]) */;
  %690 = %688.1;
  %691 = %689.0;
  (%690, %691)
}

def @func_8081(%var_8078: bool, %var_8079: Tensor[(3, 1, 11), bool], %var_8080: Tensor[(525), float32]) -> (Tensor[(5, 105), bool], Tensor[(112), uint8], Tensor[(525), float32], Tensor[(55, ?), float64], Tensor[(3, ?, 11), float64]) {
  %710 = fn (%var_8040: bool, %var_8041: Tensor[(3, 1, 11), bool], %var_8048: Tensor[(525), float32]) -> (Tensor[(5, 105), bool], Tensor[(112), uint8], Tensor[(525), float32], Tensor[(55, ?), float64], Tensor[(3, ?, 11), float64]) {
    %692 = cast(meta[relay.Constant][36] /* ty=Tensor[(112), uint8] */, dtype="uint8") /* ty=Tensor[(112), uint8] */;
    %693 = cast(%var_8048, dtype="float32") /* ty=Tensor[(525), float32] */;
    %694 = cast(%var_8048, dtype="float32") /* ty=Tensor[(525), float32] */;
    %695 = reshape(%692, newshape=[112]) /* ty=Tensor[(112), uint8] */;
    %696 = reshape(%693, newshape=[5, 105]) /* ty=Tensor[(5, 105), float32] */;
    %697 = reshape(%694, newshape=[5, 105]) /* ty=Tensor[(5, 105), float32] */;
    %698 = @func_4529(%695, %696, %697) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(2, 4, 5), float32], Tensor[(112), uint8], Tensor[(5, 105), bool], Tensor[(15, 5, 7), float64], Tensor[(5, 105), float64]) */;
    %699 = @func_7541() /* ty=(Tensor[(55, ?), float64],) */;
    %700 = cast(%var_8040, dtype="bool") /* ty=bool */;
    %701 = cast(%var_8041, dtype="bool") /* ty=Tensor[(3, 1, 11), bool] */;
    %702 = logical_and(%700, %701) /* ty=Tensor[(3, 1, 11), bool] */;
    %703 = cast(%702, dtype="float64") /* ty=Tensor[(3, 1, 11), float64] */;
    %704 = shape_of(%var_8041, dtype="int32") /* ty=Tensor[(3), int32] */;
    %705 = cast(%var_8041, dtype="float64") /* ty=Tensor[(3, 1, 11), float64] */;
    %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %707 = %698.3;
    %708 = %699.0;
    %709 = floor_divide(%705, %706) /* ty=Tensor[(3, ?, 11), float64] */;
    (%707, meta[relay.Constant][36] /* ty=Tensor[(112), uint8] */, %var_8048, %708, %709)
  };
  %710(%var_8078, %var_8079, %var_8080) /* ty=(Tensor[(5, 105), bool], Tensor[(112), uint8], Tensor[(525), float32], Tensor[(55, ?), float64], Tensor[(3, ?, 11), float64]) */
}

def @func_9190() -> (Tensor[(5, 1, 15), float64],) {
  %712 = fn () -> (Tensor[(5, 1, 15), float64],) {
    %711 = @func_5947() /* ty=Tensor[(5, 1, 15), float64] */;
    (%711,)
  };
  %712() /* ty=(Tensor[(5, 1, 15), float64],) */
}

def @func_9743() -> Tensor[(40), float32] {
  @func_9741() /* ty=Tensor[(40), float32] */
}

def @func_4953() -> Tensor[(5, 1, 15), uint16] {
  @func_4951() /* ty=Tensor[(5, 1, 15), uint16] */
}

def @func_3729() -> (Tensor[(5, 1, 15), uint16],) {
  %713 = cast(meta[relay.Constant][37] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %714 = cast(meta[relay.Constant][38] /* ty=Tensor[(5, 1, 15), uint16] */, dtype="uint16") /* ty=Tensor[(5, 1, 15), uint16] */;
  %715 = multiply(%713, %714) /* ty=Tensor[(5, 1, 15), uint16] */;
  (%715,)
}

def @func_6693() -> (Tensor[(12, 11, 4), float32], Tensor[(5, ?, 15), bool]) {
  @func_6691() /* ty=(Tensor[(12, 11, 4), float32], Tensor[(5, ?, 15), bool]) */
}

def @func_12510() -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16]) {
  %716 = @func_4471() /* ty=Tensor[(5, 1, 15), uint16] */;
  %717 = @func_10238() /* ty=Tensor[(5, 1, 15), uint16] */;
  (%716, %717)
}

def @func_5948() -> Tensor[(5, 1, 15), float64] {
  %720 = fn () -> Tensor[(5, 1, 15), float64] {
    %718 = @func_4650() /* ty=Tensor[(5, 1, 15), uint16] */;
    %719 = cast(%718, dtype="float64") /* ty=Tensor[(5, 1, 15), float64] */;
    atan(%719) /* ty=Tensor[(5, 1, 15), float64] */
  };
  %720() /* ty=Tensor[(5, 1, 15), float64] */
}

def @func_8148() -> (Tensor[(5, 1, 15), uint16],) {
  %721 = @func_4471() /* ty=Tensor[(5, 1, 15), uint16] */;
  (%721,)
}

def @func_5534(%var_5522: Tensor[(55), float64]) -> (Tensor[(10, 5, 12), float64], Tensor[(495), float64], Tensor[(55), float64], Tensor[(40), float32]) {
  %722 = @func_5196() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(210), uint64], Tensor[(2, 300), uint16], Tensor[(55), float64], Tensor[(10, 5, 12), float64], Tensor[(5, 16, 15), int32]) */;
  %723 = cast(%var_5522, dtype="float64") /* ty=Tensor[(55), float64] */;
  %724 = cast(meta[relay.Constant][39] /* ty=Tensor[(40), float32] */, dtype="float32") /* ty=Tensor[(40), float32] */;
  %725 = reshape(%723, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %726 = reshape(%724, newshape=[40]) /* ty=Tensor[(40), float32] */;
  %727 = @func_4337(%725, %726) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 9, 11), float64], Tensor[(55), float64], Tensor[(495), float64], Tensor[(40), float32], Tensor[(40), float32], Tensor[(5, 1, 15), uint16]) */;
  %728 = %722.4;
  %729 = %727.3;
  (%728, %729, %var_5522, meta[relay.Constant][39] /* ty=Tensor[(40), float32] */)
}

def @func_154(%var_152: Tensor[(2, 4, 5), float32]) -> Tensor[(2, 4, 5), float32] {
  @func_151(%var_152) /* ty=Tensor[(2, 4, 5), float32] */
}

def @func_10209() -> (Tensor[(55, ?), float64], Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64]) {
  @func_10207() /* ty=(Tensor[(55, ?), float64], Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64]) */
}

def @func_7923() -> Tensor[(2, 4, 5), float32] {
  @func_7921() /* ty=Tensor[(2, 4, 5), float32] */
}

def @func_8024() -> (Tensor[(55, ?), float64],) {
  %732 = fn () -> (Tensor[(55, ?), float64],) {
    %730 = @func_7541() /* ty=(Tensor[(55, ?), float64],) */;
    %731 = %730.0;
    (%731,)
  };
  %732() /* ty=(Tensor[(55, ?), float64],) */
}

def @func_5750() -> (Tensor[(5, ?, 15), float32],) {
  %735 = fn () -> (Tensor[(5, ?, 15), float32],) {
    %733 = @func_4199() /* ty=(Tensor[(5, ?, 15), float32],) */;
    %734 = %733.0;
    (%734,)
  };
  %735() /* ty=(Tensor[(5, ?, 15), float32],) */
}

def @func_5719() -> (Tensor[(5, 1, 15), uint16],) {
  %737 = fn () -> (Tensor[(5, 1, 15), uint16],) {
    %736 = @func_4471() /* ty=Tensor[(5, 1, 15), uint16] */;
    (%736,)
  };
  %737() /* ty=(Tensor[(5, 1, 15), uint16],) */
}

def @func_12201(%var_12160: Tensor[(112), uint8], %var_12161: Tensor[(525), float32]) -> (Tensor[(5, 1, 15), uint16], Tensor[(112), uint8], Tensor[(112), uint8], Tensor[(525), float32], Tensor[(5, 1, 15), uint16], Tensor[(1, 600), uint16], Tensor[(5, 1, 15), uint16]) {
  %738 = @func_5007() /* ty=(Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) */;
  %739 = cast(%var_12160, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %740 = cast(%var_12161, dtype="float32") /* ty=Tensor[(525), float32] */;
  %741 = cast(%var_12161, dtype="float32") /* ty=Tensor[(525), float32] */;
  %742 = reshape(%739, newshape=[112]) /* ty=Tensor[(112), uint8] */;
  %743 = reshape(%740, newshape=[5, 105]) /* ty=Tensor[(5, 105), float32] */;
  %744 = reshape(%741, newshape=[5, 105]) /* ty=Tensor[(5, 105), float32] */;
  %745 = @func_4529(%742, %743, %744) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(2, 4, 5), float32], Tensor[(112), uint8], Tensor[(5, 105), bool], Tensor[(15, 5, 7), float64], Tensor[(5, 105), float64]) */;
  %746 = @func_6498() /* ty=(Tensor[(5, ?, 15), float32], Tensor[(5, 1, 15), float64], Tensor[(10, 5, 12), uint16], Tensor[(50), uint16], Tensor[(1, 600), uint16]) */;
  %747 = @func_11133() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %748 = %738.1;
  %749 = %745.2;
  %750 = @func_11108() /* ty=Tensor[(5, 1, 15), uint16] */;
  %751 = %746.4;
  %752 = %747.0;
  (%748, %749, %var_12160, %var_12161, %750, %751, %752)
}

def @func_5570() -> Tensor[(12, 11, 4), float32] {
  %754 = fn () -> Tensor[(12, 11, 4), float32] {
    %753 = cast(meta[relay.Constant][40] /* ty=Tensor[(12, 11, 4), float32] */, dtype="float32") /* ty=Tensor[(12, 11, 4), float32] */;
    sigmoid(%753) /* ty=Tensor[(12, 11, 4), float32] */
  };
  %754() /* ty=Tensor[(12, 11, 4), float32] */
}

def @func_10533() -> (Tensor[(5, 1, 15), float64], Tensor[(40), float32], Tensor[(55), float64], Tensor[(10, 5, 12), uint16]) {
  %755 = @func_9149() /* ty=(Tensor[(55, ?), float64], Tensor[(5, 1, 15), float64]) */;
  %756 = @func_9086() /* ty=(Tensor[(40), float32], Tensor[(5, 1, 15), uint16]) */;
  %757 = @func_5196() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(210), uint64], Tensor[(2, 300), uint16], Tensor[(55), float64], Tensor[(10, 5, 12), float64], Tensor[(5, 16, 15), int32]) */;
  %758 = @func_6498() /* ty=(Tensor[(5, ?, 15), float32], Tensor[(5, 1, 15), float64], Tensor[(10, 5, 12), uint16], Tensor[(50), uint16], Tensor[(1, 600), uint16]) */;
  %759 = %755.1;
  %760 = %756.0;
  %761 = %757.3;
  %762 = %758.2;
  (%759, %760, %761, %762)
}

def @func_5282() -> (Tensor[(5, 1, 15), uint16], Tensor[(210), uint64], Tensor[(55, 1), float64], Tensor[(55), float64]) {
  %763 = @func_5196() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(210), uint64], Tensor[(2, 300), uint16], Tensor[(55), float64], Tensor[(10, 5, 12), float64], Tensor[(5, 16, 15), int32]) */;
  %764 = cast(meta[relay.Constant][41] /* ty=Tensor[(55, 1), float64] */, dtype="float64") /* ty=Tensor[(55, 1), float64] */;
  %765 = reshape(%764, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %766 = @func_4139(%765) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 16, 15), int32], Tensor[(4, 300), int32], Tensor[(210), uint64], Tensor[(6, 100), uint16], Tensor[(55), float64]) */;
  %767 = cast(meta[relay.Constant][41] /* ty=Tensor[(55, 1), float64] */, dtype="float64") /* ty=Tensor[(55, 1), float64] */;
  %768 = reshape(%767, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %769 = @func_5246(%768) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, ?, 15), float32], Tensor[(55), float64]) */;
  %770 = %763.0;
  %771 = %766.3;
  %772 = %769.2;
  (%770, %771, meta[relay.Constant][41] /* ty=Tensor[(55, 1), float64] */, %772)
}

def @func_6820() -> (Tensor[(14, 1, 7), float32], Tensor[(5, 1, 15), float64], Tensor[(12, 11, 4), float32], Tensor[(12, 50), uint16], Tensor[(1, 525), float32]) {
  %781 = fn () -> (Tensor[(14, 1, 7), float32], Tensor[(5, 1, 15), float64], Tensor[(12, 11, 4), float32], Tensor[(12, 50), uint16], Tensor[(1, 525), float32]) {
    %773 = cast(meta[relay.Constant][42] /* ty=Tensor[(14, 1, 7), float32] */, dtype="float32") /* ty=Tensor[(14, 1, 7), float32] */;
    %774 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 525), float32] */, dtype="float32") /* ty=Tensor[(1, 525), float32] */;
    %775 = reshape(%774, newshape=[525]) /* ty=Tensor[(525), float32] */;
    %776 = @func_6561(%775) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(525), float32], Tensor[(12, 50), uint16], Tensor[(525), float32], uint8) */;
    %777 = sqrt(%773) /* ty=Tensor[(14, 1, 7), float32] */;
    %778 = @func_5947() /* ty=Tensor[(5, 1, 15), float64] */;
    %779 = @func_5569() /* ty=Tensor[(12, 11, 4), float32] */;
    %780 = %776.2;
    (%777, %778, %779, %780, meta[relay.Constant][43] /* ty=Tensor[(1, 525), float32] */)
  };
  %781() /* ty=(Tensor[(14, 1, 7), float32], Tensor[(5, 1, 15), float64], Tensor[(12, 11, 4), float32], Tensor[(12, 50), uint16], Tensor[(1, 525), float32]) */
}

def @func_10535() -> (Tensor[(5, 1, 15), float64], Tensor[(40), float32], Tensor[(55), float64], Tensor[(10, 5, 12), uint16]) {
  @func_10533() /* ty=(Tensor[(5, 1, 15), float64], Tensor[(40), float32], Tensor[(55), float64], Tensor[(10, 5, 12), uint16]) */
}

def @func_8797() -> (Tensor[(12, 11, 1), float32], Tensor[(5, 1, 15), uint16]) {
  @func_8795() /* ty=(Tensor[(12, 11, 1), float32], Tensor[(5, 1, 15), uint16]) */
}

def @func_5246(%var_5235: Tensor[(55), float64]) -> (Tensor[(5, 1, 15), uint16], Tensor[(5, ?, 15), float32], Tensor[(55), float64]) {
  %782 = @func_4213() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %783 = cast(%var_5235, dtype="float64") /* ty=Tensor[(55), float64] */;
  %784 = reshape(%783, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %785 = @func_4177(%784) /* ty=(Tensor[(5, ?, 15), float32], Tensor[(5, 16, 15), int32], Tensor[(55), float64]) */;
  %786 = %782.0;
  %787 = %785.0;
  (%786, %787, %var_5235)
}

def @func_13102(%var_13089: Tensor[(40), float32]) -> (Tensor[(5, ?, 15), int64], Tensor[(40), float32], Tensor[(40), float32], Tensor[(210), uint64]) {
  %788 = cast(%var_13089, dtype="float32") /* ty=Tensor[(40), float32] */;
  %789 = reshape(%788, newshape=[40]) /* ty=Tensor[(40), float32] */;
  %790 = @func_4020(%789) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(40), float32], Tensor[(35, 15), float32], Tensor[(40), float32]) */;
  %791 = @func_10886() /* ty=Tensor[(5, ?, 15), int64] */;
  %792 = %790.3;
  %793 = @func_7712() /* ty=Tensor[(210), uint64] */;
  (%791, %792, %var_13089, %793)
}

def @func_7082() -> Tensor[(5, 1, 15), uint16] {
  %794 = @func_5007() /* ty=(Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) */;
  %794.1
}

def @func_4044(%var_4043: Tensor[(210), uint64]) -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 9, 11), float64], Tensor[(210), uint64], Tensor[(600), uint16], Tensor[(55), float64]) {
  %804 = fn (%var_4038: Tensor[(210), uint64]) -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 9, 11), float64], Tensor[(210), uint64], Tensor[(600), uint16], Tensor[(55), float64]) {
    %795 = cast(%var_4038, dtype="uint64") /* ty=Tensor[(210), uint64] */;
    %796 = cast(meta[relay.Constant][44] /* ty=Tensor[(600), uint16] */, dtype="uint16") /* ty=Tensor[(600), uint16] */;
    %797 = cast(meta[relay.Constant][45] /* ty=Tensor[(55), float64] */, dtype="float64") /* ty=Tensor[(55), float64] */;
    %798 = reshape(%795, newshape=[6, 7, 5]) /* ty=Tensor[(6, 7, 5), uint64] */;
    %799 = reshape(%796, newshape=[600]) /* ty=Tensor[(600), uint16] */;
    %800 = reshape(%797, newshape=[55]) /* ty=Tensor[(55), float64] */;
    %801 = @func_1888(%798, %799, %800) /* ty=(Tensor[(6, 7, 5), uint64], Tensor[(10, 5, 12), uint16], Tensor[(10, 5), uint16], Tensor[(600), uint16], Tensor[(5, 9, 11), float64], Tensor[(55), float64], Tensor[(495), float64]) */;
    %802 = @func_3819() /* ty=Tensor[(5, 1, 15), uint16] */;
    %803 = %801.4;
    (%802, %803, %var_4038, meta[relay.Constant][44] /* ty=Tensor[(600), uint16] */, meta[relay.Constant][45] /* ty=Tensor[(55), float64] */)
  };
  %804(%var_4043) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 9, 11), float64], Tensor[(210), uint64], Tensor[(600), uint16], Tensor[(55), float64]) */
}

def @func_564(%var_562: Tensor[(15, 5, 7), float32], %var_563: Tensor[(40), float32]) -> (Tensor[(15, 5, 7), float64], Tensor[(2, 4, 5), float32], Tensor[(40), float32]) {
  %812 = fn (%var_549: Tensor[(15, 5, 7), float32], %var_558: Tensor[(40), float32]) -> (Tensor[(15, 5, 7), float64], Tensor[(2, 4, 5), float32], Tensor[(40), float32]) {
    %805 = cast(%var_549, dtype="float32") /* ty=Tensor[(15, 5, 7), float32] */;
    %806 = cosh(%805) /* ty=Tensor[(15, 5, 7), float32] */;
    %807 = cast(%806, dtype="float64") /* ty=Tensor[(15, 5, 7), float64] */;
    %808 = cast(%var_558, dtype="float32") /* ty=Tensor[(40), float32] */;
    %809 = reshape(%808, newshape=[2, 4, 5]) /* ty=Tensor[(2, 4, 5), float32] */;
    %810 = erf(%807) /* ty=Tensor[(15, 5, 7), float64] */;
    %811 = @func_151(%809) /* ty=Tensor[(2, 4, 5), float32] */;
    (%810, %811, %var_558)
  };
  %812(%var_562, %var_563) /* ty=(Tensor[(15, 5, 7), float64], Tensor[(2, 4, 5), float32], Tensor[(40), float32]) */
}

def @func_11353() -> (Tensor[(5, 1, 15), float64], Tensor[(7, 7, 15), uint16], Tensor[(245, 3), uint16], Tensor[(55), float64], Tensor[(55), float64]) {
  @func_11351() /* ty=(Tensor[(5, 1, 15), float64], Tensor[(7, 7, 15), uint16], Tensor[(245, 3), uint16], Tensor[(55), float64], Tensor[(55), float64]) */
}

def @func_11122() -> (Tensor[(525), float32],) {
  @func_11120() /* ty=(Tensor[(525), float32],) */
}

def @func_3648(%var_3630: Tensor[(5, 16, 15), int32], %var_3642: Tensor[(210, 1), uint64], %var_3643: Tensor[(600), uint16], %var_3644: Tensor[(55), float64]) -> (Tensor[(5, 16, 15), int32], Tensor[(10, 5), uint16], Tensor[(210, 1), uint64], Tensor[(600), uint16], Tensor[(55), float64]) {
  %813 = cast(%var_3630, dtype="int32") /* ty=Tensor[(5, 16, 15), int32] */;
  %814 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(5, 16, 15), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %815 = cast(meta[relay.Constant][46] /* ty=Tensor[(5, 16, 15), int32] */, dtype="int32") /* ty=Tensor[(5, 16, 15), int32] */;
  %816 = dyn.reshape(%813, %814, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %817 = cast(%var_3642, dtype="uint64") /* ty=Tensor[(210, 1), uint64] */;
  %818 = cast(%var_3643, dtype="uint16") /* ty=Tensor[(600), uint16] */;
  %819 = cast(%var_3644, dtype="float64") /* ty=Tensor[(55), float64] */;
  %820 = reshape(%817, newshape=[6, 7, 5]) /* ty=Tensor[(6, 7, 5), uint64] */;
  %821 = reshape(%818, newshape=[600]) /* ty=Tensor[(600), uint16] */;
  %822 = reshape(%819, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %823 = @func_1888(%820, %821, %822) /* ty=(Tensor[(6, 7, 5), uint64], Tensor[(10, 5, 12), uint16], Tensor[(10, 5), uint16], Tensor[(600), uint16], Tensor[(5, 9, 11), float64], Tensor[(55), float64], Tensor[(495), float64]) */;
  %824 = bitwise_xor(%815, %816) /* ty=Tensor[(5, 16, 15), int32] */;
  %825 = %823.2;
  (%824, %825, %var_3642, %var_3643, %var_3644)
}

def @func_7712() -> Tensor[(210), uint64] {
  %826 = @func_5196() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(210), uint64], Tensor[(2, 300), uint16], Tensor[(55), float64], Tensor[(10, 5, 12), float64], Tensor[(5, 16, 15), int32]) */;
  %826.1
}

def @func_11330() -> Tensor[(40), float32] {
  %827 = fn () -> Tensor[(40), float32] {
    @func_9741() /* ty=Tensor[(40), float32] */
  };
  %827() /* ty=Tensor[(40), float32] */
}

def @func_6930() -> Tensor[(5, 1, 15), float64] {
  %829 = fn () -> Tensor[(5, 1, 15), float64] {
    %828 = @func_6819() /* ty=(Tensor[(14, 1, 7), float32], Tensor[(5, 1, 15), float64], Tensor[(12, 11, 4), float32], Tensor[(12, 50), uint16], Tensor[(1, 525), float32]) */;
    %828.1
  };
  %829() /* ty=Tensor[(5, 1, 15), float64] */
}

def @func_7795(%var_7794: Tensor[(320), float64]) -> (Tensor[(5, ?, 15), float32], Tensor[(2, 16, 10), float64], Tensor[(320), float64], Tensor[(5, 1, 15), uint16]) {
  %838 = fn (%var_7768: Tensor[(320), float64]) -> (Tensor[(5, ?, 15), float32], Tensor[(2, 16, 10), float64], Tensor[(320), float64], Tensor[(5, 1, 15), uint16]) {
    %830 = @func_7721() /* ty=(Tensor[(5, ?, 15), float32],) */;
    %831 = cast(%var_7768, dtype="float64") /* ty=Tensor[(320), float64] */;
    %832 = reshape(%831, newshape=[2, 16, 10]) /* ty=Tensor[(2, 16, 10), float64] */;
    %833 = @func_4691(%832) /* ty=(Tensor[(2, 16, 10), float64],) */;
    %834 = @func_5651() /* ty=(Tensor[(5, ?, 15), bool], Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64]) */;
    %835 = %830.0;
    %836 = %833.0;
    %837 = %834.1;
    (%835, %836, %var_7768, %837)
  };
  %838(%var_7794) /* ty=(Tensor[(5, ?, 15), float32], Tensor[(2, 16, 10), float64], Tensor[(320), float64], Tensor[(5, 1, 15), uint16]) */
}

def @func_8795() -> (Tensor[(12, 11, 1), float32], Tensor[(5, 1, 15), uint16]) {
  %839 = @func_7952() /* ty=(Tensor[(12, 11, 1), float32],) */;
  %840 = %839.0;
  %841 = @func_4250() /* ty=Tensor[(5, 1, 15), uint16] */;
  (%840, %841)
}

def @func_10887() -> Tensor[(5, ?, 15), int64] {
  %842 = fn () -> Tensor[(5, ?, 15), int64] {
    @func_10431() /* ty=Tensor[(5, ?, 15), int64] */
  };
  %842() /* ty=Tensor[(5, ?, 15), int64] */
}

def @func_4473() -> Tensor[(5, 1, 15), uint16] {
  @func_4471() /* ty=Tensor[(5, 1, 15), uint16] */
}

def @func_6250(%var_6248: Tensor[(112), uint8], %var_6249: Tensor[(525), float32]) -> (Tensor[(55, ?), float64], Tensor[(112), uint8], Tensor[(112), uint8], Tensor[(525), float32]) {
  @func_6246(%var_6248, %var_6249) /* ty=(Tensor[(55, ?), float64], Tensor[(112), uint8], Tensor[(112), uint8], Tensor[(525), float32]) */
}

def @func_14117() -> (Tensor[(5, ?, 15), int64], Tensor[(5, 16, 7), float64], Tensor[(560, 1), float64]) {
  @func_14115() /* ty=(Tensor[(5, ?, 15), int64], Tensor[(5, 16, 7), float64], Tensor[(560, 1), float64]) */
}

def @func_7165(%var_7163: Tensor[(525), float32]) -> (Tensor[(5, 1, 15), uint16], Tensor[(12, 50), uint16], Tensor[(525), float32]) {
  @func_7162(%var_7163) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(12, 50), uint16], Tensor[(525), float32]) */
}

def @func_14258() -> Tensor[(5, ?, 15), float32] {
  %844 = fn () -> Tensor[(5, ?, 15), float32] {
    %843 = @func_5749() /* ty=(Tensor[(5, ?, 15), float32],) */;
    %843.0
  };
  %844() /* ty=Tensor[(5, ?, 15), float32] */
}

def @func_8134() -> (Tensor[(5, 1, 15), float64],) {
  @func_8132() /* ty=(Tensor[(5, 1, 15), float64],) */
}

def @func_3923() -> (Tensor[(5, ?, 15), float32],) {
  @func_3921() /* ty=(Tensor[(5, ?, 15), float32],) */
}

def @func_4177(%var_4168: Tensor[(55), float64]) -> (Tensor[(5, ?, 15), float32], Tensor[(5, 16, 15), int32], Tensor[(55), float64]) {
  %845 = @func_3921() /* ty=(Tensor[(5, ?, 15), float32],) */;
  %846 = cast(%var_4168, dtype="float64") /* ty=Tensor[(55), float64] */;
  %847 = reshape(%846, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %848 = @func_4139(%847) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 16, 15), int32], Tensor[(4, 300), int32], Tensor[(210), uint64], Tensor[(6, 100), uint16], Tensor[(55), float64]) */;
  %849 = %845.0;
  %850 = %848.1;
  (%849, %850, %var_4168)
}

def @func_12943(%var_12941: Tensor[(525), float32], %var_12942: Tensor[(12, 50), uint16]) -> (Tensor[(210), uint64], Tensor[(525), float32], Tensor[(12, 50), uint16], Tensor[(5, 1, 15), uint16]) {
  %863 = fn (%var_12905: Tensor[(525), float32], %var_12914: Tensor[(12, 50), uint16]) -> (Tensor[(210), uint64], Tensor[(525), float32], Tensor[(12, 50), uint16], Tensor[(5, 1, 15), uint16]) {
    %851 = cast(%var_12905, dtype="float32") /* ty=Tensor[(525), float32] */;
    %852 = reshape(%851, newshape=[525]) /* ty=Tensor[(525), float32] */;
    %853 = @func_6561(%852) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(525), float32], Tensor[(12, 50), uint16], Tensor[(525), float32], uint8) */;
    %854 = %853.2;
    %855 = cast(%var_12914, dtype="uint16") /* ty=Tensor[(12, 50), uint16] */;
    %856 = shape_of(%854, dtype="int32") /* ty=Tensor[(2), int32] */;
    %857 = cast(%854, dtype="uint16") /* ty=Tensor[(12, 50), uint16] */;
    %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %859 = @func_12277() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64], Tensor[(5, 1, 15), uint16], Tensor[(55, ?), float64]) */;
    %860 = @func_7712() /* ty=Tensor[(210), uint64] */;
    %861 = left_shift(%857, %858) /* ty=Tensor[(12, 50), uint16] */;
    %862 = %859.2;
    (%860, %var_12905, %861, %862)
  };
  %863(%var_12941, %var_12942) /* ty=(Tensor[(210), uint64], Tensor[(525), float32], Tensor[(12, 50), uint16], Tensor[(5, 1, 15), uint16]) */
}

def @func_11273() -> Tensor[(5, ?, 15), int64] {
  @func_11271() /* ty=Tensor[(5, ?, 15), int64] */
}

def @func_11926() -> (Tensor[(12, 11, 1), float32],) {
  %866 = fn () -> (Tensor[(12, 11, 1), float32],) {
    %864 = @func_7952() /* ty=(Tensor[(12, 11, 1), float32],) */;
    %865 = %864.0;
    (%865,)
  };
  %866() /* ty=(Tensor[(12, 11, 1), float32],) */
}

def @func_13969() -> (Tensor[(5, 1, 15), float64], Tensor[(2, 300), uint16]) {
  @func_13967() /* ty=(Tensor[(5, 1, 15), float64], Tensor[(2, 300), uint16]) */
}

def @func_8369() -> (Tensor[(5, 1, 15), uint16],) {
  %869 = fn () -> (Tensor[(5, 1, 15), uint16],) {
    %867 = @func_5718() /* ty=(Tensor[(5, 1, 15), uint16],) */;
    %868 = %867.0;
    (%868,)
  };
  %869() /* ty=(Tensor[(5, 1, 15), uint16],) */
}

def @func_4691(%var_4688: Tensor[(2, 16, 10), float64]) -> (Tensor[(2, 16, 10), float64],) {
  %870 = cast(%var_4688, dtype="float64") /* ty=Tensor[(2, 16, 10), float64] */;
  %871 = asinh(%870) /* ty=Tensor[(2, 16, 10), float64] */;
  (%871,)
}

def @func_11832() -> Tensor[(5, 1, 15), uint16] {
  %873 = fn () -> Tensor[(5, 1, 15), uint16] {
    %872 = @func_9182() /* ty=(Tensor[(5, 1, 15), uint16],) */;
    %872.0
  };
  %873() /* ty=Tensor[(5, 1, 15), uint16] */
}

def @func_8257(%var_8214: Tensor[(6, 100), uint16], %var_8254: Tensor[(56, 2), uint8]) -> (Tensor[(12, 11, 4), float32], Tensor[(600), uint16], Tensor[(6, 100), uint16], uint8, Tensor[(112), uint8], Tensor[(56, 2), uint8], Tensor[(525), float32]) {
  %874 = cast(%var_8214, dtype="uint16") /* ty=Tensor[(6, 100), uint16] */;
  %875 = cast(meta[relay.Constant][47] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %876 = reshape(%874, newshape=[600]) /* ty=Tensor[(600), uint16] */;
  %877 = reshape(%875, newshape=[]) /* ty=uint8 */;
  %878 = @func_7011(%876, %877) /* ty=(Tensor[(50), uint16], uint8, Tensor[(600), uint16], Tensor[(525), float32], uint8) */;
  %879 = cast(%var_8254, dtype="uint8") /* ty=Tensor[(56, 2), uint8] */;
  %880 = cast(meta[relay.Constant][48] /* ty=Tensor[(525), float32] */, dtype="float32") /* ty=Tensor[(525), float32] */;
  %881 = reshape(%879, newshape=[112]) /* ty=Tensor[(112), uint8] */;
  %882 = reshape(%880, newshape=[525]) /* ty=Tensor[(525), float32] */;
  %883 = @func_6246(%881, %882) /* ty=(Tensor[(55, ?), float64], Tensor[(112), uint8], Tensor[(112), uint8], Tensor[(525), float32]) */;
  %884 = @func_5569() /* ty=Tensor[(12, 11, 4), float32] */;
  %885 = %878.2;
  %886 = %883.1;
  (%884, %885, %var_8214, meta[relay.Constant][47] /* ty=uint8 */, %886, %var_8254, meta[relay.Constant][48] /* ty=Tensor[(525), float32] */)
}

def @func_6295(%var_6290: Tensor[(55), float64]) -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16], Tensor[(5, 9, 11), float64], Tensor[(55), float64], Tensor[(495), float64]) {
  %887 = cast(%var_6290, dtype="float64") /* ty=Tensor[(55), float64] */;
  %888 = cast(meta[relay.Constant][49] /* ty=Tensor[(495), float64] */, dtype="float64") /* ty=Tensor[(495), float64] */;
  %889 = reshape(%887, newshape=[5, 1, 11]) /* ty=Tensor[(5, 1, 11), float64] */;
  %890 = reshape(%888, newshape=[5, 9, 11]) /* ty=Tensor[(5, 9, 11), float64] */;
  %891 = @func_4471() /* ty=Tensor[(5, 1, 15), uint16] */;
  %892 = @func_4471() /* ty=Tensor[(5, 1, 15), uint16] */;
  %893 = @func_820(%889, %890) /* ty=Tensor[(5, 9, 11), float64] */;
  (%891, %892, %893, %var_6290, meta[relay.Constant][49] /* ty=Tensor[(495), float64] */)
}

def @func_4214() -> (Tensor[(5, 1, 15), uint16],) {
  %896 = fn () -> (Tensor[(5, 1, 15), uint16],) {
    %894 = @func_3729() /* ty=(Tensor[(5, 1, 15), uint16],) */;
    %895 = %894.0;
    (%895,)
  };
  %896() /* ty=(Tensor[(5, 1, 15), uint16],) */
}

def @func_13523() -> Tensor[(5, ?, 15), int64] {
  @func_13521() /* ty=Tensor[(5, ?, 15), int64] */
}

def @func_12469(%var_12468: Tensor[(8, 2, 7), float64]) -> (Tensor[(5, ?, 15), int64], Tensor[(8, 2, 7), int8]) {
  %908 = fn (%var_12423: Tensor[(8, 2, 7), float64]) -> (Tensor[(5, ?, 15), int64], Tensor[(8, 2, 7), int8]) {
    %897 = @func_9957() /* ty=(Tensor[(5, ?, 15), int64],) */;
    %898 = cast(%var_12423, dtype="float64") /* ty=Tensor[(8, 2, 7), float64] */;
    %899 = rsqrt(%898) /* ty=Tensor[(8, 2, 7), float64] */;
    %900 = cast(%899, dtype="float64") /* ty=Tensor[(8, 2, 7), float64] */;
    %901 = cos(%900) /* ty=Tensor[(8, 2, 7), float64] */;
    %902 = cast(%899, dtype="int8") /* ty=Tensor[(8, 2, 7), int8] */;
    %903 = shape_of(%901, dtype="int32") /* ty=Tensor[(3), int32] */;
    %904 = cast(%901, dtype="int8") /* ty=Tensor[(8, 2, 7), int8] */;
    %905 = dyn.reshape(%902, %903, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %906 = %897.0;
    %907 = bitwise_xor(%904, %905) /* ty=Tensor[(8, 2, 7), int8] */;
    (%906, %907)
  };
  %908(%var_12468) /* ty=(Tensor[(5, ?, 15), int64], Tensor[(8, 2, 7), int8]) */
}

def @func_9994() -> Tensor[(55, ?), float32] {
  %910 = fn () -> Tensor[(55, ?), float32] {
    %909 = @func_6345() /* ty=(Tensor[(55, ?), float32],) */;
    %909.0
  };
  %910() /* ty=Tensor[(55, ?), float32] */
}

def @func_6298(%var_6296: Tensor[(55), float64]) -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16], Tensor[(5, 9, 11), float64], Tensor[(55), float64], Tensor[(495), float64]) {
  @func_6295(%var_6296) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16], Tensor[(5, 9, 11), float64], Tensor[(55), float64], Tensor[(495), float64]) */
}

def @func_13912() -> (Tensor[(10, 5, 12), float64], Tensor[(5, 1, 15), uint16], Tensor[(55, ?), float32]) {
  @func_13910() /* ty=(Tensor[(10, 5, 12), float64], Tensor[(5, 1, 15), uint16], Tensor[(55, ?), float32]) */
}

def @func_12981() -> (Tensor[(5, 1, 15), uint16],) {
  %913 = fn () -> (Tensor[(5, 1, 15), uint16],) {
    %911 = @func_8368() /* ty=(Tensor[(5, 1, 15), uint16],) */;
    %912 = %911.0;
    (%912,)
  };
  %913() /* ty=(Tensor[(5, 1, 15), uint16],) */
}

def @func_13862() -> (Tensor[(5, 1, 15), uint16],) {
  %914 = @func_3819() /* ty=Tensor[(5, 1, 15), uint16] */;
  (%914,)
}

def @func_8261(%var_8259: Tensor[(6, 100), uint16], %var_8260: Tensor[(56, 2), uint8]) -> (Tensor[(12, 11, 4), float32], Tensor[(600), uint16], Tensor[(6, 100), uint16], uint8, Tensor[(112), uint8], Tensor[(56, 2), uint8], Tensor[(525), float32]) {
  @func_8257(%var_8259, %var_8260) /* ty=(Tensor[(12, 11, 4), float32], Tensor[(600), uint16], Tensor[(6, 100), uint16], uint8, Tensor[(112), uint8], Tensor[(56, 2), uint8], Tensor[(525), float32]) */
}

def @func_13105(%var_13103: Tensor[(40), float32]) -> (Tensor[(5, ?, 15), int64], Tensor[(40), float32], Tensor[(40), float32], Tensor[(210), uint64]) {
  @func_13102(%var_13103) /* ty=(Tensor[(5, ?, 15), int64], Tensor[(40), float32], Tensor[(40), float32], Tensor[(210), uint64]) */
}

def @func_10431() -> Tensor[(5, ?, 15), int64] {
  %915 = @func_8443() /* ty=(Tensor[(2, 300), uint16], Tensor[(5, ?, 15), int64]) */;
  %915.1
}

def @func_13335(%var_13334: Tensor[(10, 5, 12), float64]) -> (Tensor[(5, ?, 15), int64], Tensor[(10, 5, 12), int32]) {
  %925 = fn (%var_13316: Tensor[(10, 5, 12), float64]) -> (Tensor[(5, ?, 15), int64], Tensor[(10, 5, 12), int32]) {
    %916 = @func_8443() /* ty=(Tensor[(2, 300), uint16], Tensor[(5, ?, 15), int64]) */;
    %917 = @func_13174() /* ty=(Tensor[(10, 5, 12), float64], Tensor[(16, 3, 16), float32]) */;
    %918 = %917.0;
    %919 = cast(%var_13316, dtype="int32") /* ty=Tensor[(10, 5, 12), int32] */;
    %920 = shape_of(%918, dtype="int32") /* ty=Tensor[(3), int32] */;
    %921 = cast(%918, dtype="int32") /* ty=Tensor[(10, 5, 12), int32] */;
    %922 = dyn.reshape(%919, %920, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %923 = %916.1;
    %924 = left_shift(%921, %922) /* ty=Tensor[(10, 5, 12), int32] */;
    (%923, %924)
  };
  %925(%var_13334) /* ty=(Tensor[(5, ?, 15), int64], Tensor[(10, 5, 12), int32]) */
}

def @func_4651() -> Tensor[(5, 1, 15), uint16] {
  %926 = fn () -> Tensor[(5, 1, 15), uint16] {
    @func_4250() /* ty=Tensor[(5, 1, 15), uint16] */
  };
  %926() /* ty=Tensor[(5, 1, 15), uint16] */
}

def @func_5652() -> (Tensor[(5, ?, 15), bool], Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64]) {
  %940 = fn () -> (Tensor[(5, ?, 15), bool], Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64]) {
    %927 = @func_4951() /* ty=Tensor[(5, 1, 15), uint16] */;
    %928 = @func_4650() /* ty=Tensor[(5, 1, 15), uint16] */;
    %929 = cast(%928, dtype="bool") /* ty=Tensor[(5, 1, 15), bool] */;
    %930 = shape_of(%927, dtype="int32") /* ty=Tensor[(3), int32] */;
    %931 = cast(%927, dtype="bool") /* ty=Tensor[(5, 1, 15), bool] */;
    %932 = dyn.reshape(%929, %930, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %933 = @func_5007() /* ty=(Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) */;
    %934 = @func_4213() /* ty=(Tensor[(5, 1, 15), uint16],) */;
    %935 = cast(%928, dtype="float64") /* ty=Tensor[(5, 1, 15), float64] */;
    %936 = equal(%931, %932) /* ty=Tensor[(5, ?, 15), bool] */;
    %937 = %933.1;
    %938 = %934.0;
    %939 = asinh(%935) /* ty=Tensor[(5, 1, 15), float64] */;
    (%936, %937, %938, %939)
  };
  %940() /* ty=(Tensor[(5, ?, 15), bool], Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64]) */
}

def @func_1892(%var_1889: Tensor[(6, 7, 5), uint64], %var_1890: Tensor[(600), uint16], %var_1891: Tensor[(55), float64]) -> (Tensor[(6, 7, 5), uint64], Tensor[(10, 5, 12), uint16], Tensor[(10, 5), uint16], Tensor[(600), uint16], Tensor[(5, 9, 11), float64], Tensor[(55), float64], Tensor[(495), float64]) {
  %956 = fn (%var_1863: Tensor[(6, 7, 5), uint64], %var_1876: Tensor[(600), uint16], %var_1881: Tensor[(55), float64]) -> (Tensor[(6, 7, 5), uint64], Tensor[(10, 5, 12), uint16], Tensor[(10, 5), uint16], Tensor[(600), uint16], Tensor[(5, 9, 11), float64], Tensor[(55), float64], Tensor[(495), float64]) {
    %941 = cast(%var_1863, dtype="uint64") /* ty=Tensor[(6, 7, 5), uint64] */;
    %942 = shape_of(meta[relay.Constant][50] /* ty=Tensor[(6, 7, 5), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %943 = cast(meta[relay.Constant][50] /* ty=Tensor[(6, 7, 5), uint64] */, dtype="uint64") /* ty=Tensor[(6, 7, 5), uint64] */;
    %944 = dyn.reshape(%941, %942, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %945 = cast(meta[relay.Constant][51] /* ty=Tensor[(10, 5), uint16] */, dtype="uint16") /* ty=Tensor[(10, 5), uint16] */;
    %946 = cast(%var_1876, dtype="uint16") /* ty=Tensor[(600), uint16] */;
    %947 = reshape(%945, newshape=[10, 5, 1]) /* ty=Tensor[(10, 5, 1), uint16] */;
    %948 = reshape(%946, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), uint16] */;
    %949 = cast(%var_1881, dtype="float64") /* ty=Tensor[(55), float64] */;
    %950 = cast(meta[relay.Constant][52] /* ty=Tensor[(495), float64] */, dtype="float64") /* ty=Tensor[(495), float64] */;
    %951 = reshape(%949, newshape=[5, 1, 11]) /* ty=Tensor[(5, 1, 11), float64] */;
    %952 = reshape(%950, newshape=[5, 9, 11]) /* ty=Tensor[(5, 9, 11), float64] */;
    %953 = bitwise_xor(%943, %944) /* ty=Tensor[(6, 7, 5), uint64] */;
    %954 = @func_852(%947, %948) /* ty=Tensor[(10, 5, 12), uint16] */;
    %955 = @func_820(%951, %952) /* ty=Tensor[(5, 9, 11), float64] */;
    (%953, %954, meta[relay.Constant][51] /* ty=Tensor[(10, 5), uint16] */, %var_1876, %955, %var_1881, meta[relay.Constant][52] /* ty=Tensor[(495), float64] */)
  };
  %956(%var_1889, %var_1890, %var_1891) /* ty=(Tensor[(6, 7, 5), uint64], Tensor[(10, 5, 12), uint16], Tensor[(10, 5), uint16], Tensor[(600), uint16], Tensor[(5, 9, 11), float64], Tensor[(55), float64], Tensor[(495), float64]) */
}

def @func_4694(%var_4692: Tensor[(2, 16, 10), float64]) -> (Tensor[(2, 16, 10), float64],) {
  @func_4691(%var_4692) /* ty=(Tensor[(2, 16, 10), float64],) */
}

def @func_3819() -> Tensor[(5, 1, 15), uint16] {
  %957 = @func_3729() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %957.0
}

def @func_10814() -> (Tensor[(5, ?, 15), float32], Tensor[(5, ?, 15), bool]) {
  %962 = fn () -> (Tensor[(5, ?, 15), float32], Tensor[(5, ?, 15), bool]) {
    %958 = @func_5749() /* ty=(Tensor[(5, ?, 15), float32],) */;
    %959 = @func_5651() /* ty=(Tensor[(5, ?, 15), bool], Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64]) */;
    %960 = %958.0;
    %961 = %959.0;
    (%960, %961)
  };
  %962() /* ty=(Tensor[(5, ?, 15), float32], Tensor[(5, ?, 15), bool]) */
}

def @func_13521() -> Tensor[(5, ?, 15), int64] {
  %963 = @func_9957() /* ty=(Tensor[(5, ?, 15), int64],) */;
  %963.0
}

def @func_5537(%var_5535: Tensor[(55), float64]) -> (Tensor[(10, 5, 12), float64], Tensor[(495), float64], Tensor[(55), float64], Tensor[(40), float32]) {
  @func_5534(%var_5535) /* ty=(Tensor[(10, 5, 12), float64], Tensor[(495), float64], Tensor[(55), float64], Tensor[(40), float32]) */
}

def @func_11578(%var_11549: Tensor[(55, 1), float64], %var_11561: Tensor[(40), float32]) -> (Tensor[(5, 1, 15), uint16], Tensor[(5, ?, 15), float32], Tensor[(55, 1), float64], Tensor[(2, 4, 5), uint64], Tensor[(40), float32], Tensor[(7, 7, 15), uint16], Tensor[(7, 105), uint16]) {
  %964 = cast(%var_11549, dtype="float64") /* ty=Tensor[(55, 1), float64] */;
  %965 = reshape(%964, newshape=[55]) /* ty=Tensor[(55), float64] */;
  %966 = @func_4177(%965) /* ty=(Tensor[(5, ?, 15), float32], Tensor[(5, 16, 15), int32], Tensor[(55), float64]) */;
  %967 = cast(%var_11561, dtype="float32") /* ty=Tensor[(40), float32] */;
  %968 = reshape(%967, newshape=[2, 4, 5]) /* ty=Tensor[(2, 4, 5), float32] */;
  %969 = @func_11387(%968) /* ty=(Tensor[(2, 4, 5), uint64], Tensor[(2, 4, 5), float64], Tensor[(12, 8, 15), float64], Tensor[(1440), float64]) */;
  %970 = cast(meta[relay.Constant][53] /* ty=Tensor[(7, 105), uint16] */, dtype="uint16") /* ty=Tensor[(7, 105), uint16] */;
  %971 = reshape(%970, newshape=[7, 7, 15]) /* ty=Tensor[(7, 7, 15), uint16] */;
  %972 = @func_6073(%971) /* ty=(Tensor[(7, 7, 15), uint16], Tensor[(5, 1, 15), uint16]) */;
  %973 = @func_3819() /* ty=Tensor[(5, 1, 15), uint16] */;
  %974 = %966.0;
  %975 = %969.0;
  %976 = %972.0;
  (%973, %974, %var_11549, %975, %var_11561, %976, meta[relay.Constant][53] /* ty=Tensor[(7, 105), uint16] */)
}

def @func_4201() -> (Tensor[(5, ?, 15), float32],) {
  @func_4199() /* ty=(Tensor[(5, ?, 15), float32],) */
}

def @func_11390(%var_11388: Tensor[(2, 4, 5), float32]) -> (Tensor[(2, 4, 5), uint64], Tensor[(2, 4, 5), float64], Tensor[(12, 8, 15), float64], Tensor[(1440), float64]) {
  @func_11387(%var_11388) /* ty=(Tensor[(2, 4, 5), uint64], Tensor[(2, 4, 5), float64], Tensor[(12, 8, 15), float64], Tensor[(1440), float64]) */
}

def @func_4797(%var_4794: Tensor[(6, 16, 4), float64], %var_4795: Tensor[(6, 16, 4), float64], %var_4796: Tensor[(210), uint64]) -> (Tensor[(6, 16, 4), float64], Tensor[(6, 16, 4), uint32], Tensor[(495), float64], Tensor[(300, 2), uint16], Tensor[(55, 210), float32], Tensor[(6, 16, 4), bool]) {
  %1005 = fn (%var_4730: Tensor[(6, 16, 4), float64], %var_4736: Tensor[(6, 16, 4), float64], %var_4756: Tensor[(210), uint64]) -> (Tensor[(6, 16, 4), float64], Tensor[(6, 16, 4), uint32], Tensor[(495), float64], Tensor[(300, 2), uint16], Tensor[(55, 210), float32], Tensor[(6, 16, 4), bool]) {
    %977 = cast(meta[relay.Constant][54] /* ty=Tensor[(6, 16, 4), float64] */, dtype="float64") /* ty=Tensor[(6, 16, 4), float64] */;
    %978 = shape_of(%var_4730, dtype="int32") /* ty=Tensor[(3), int32] */;
    %979 = cast(%var_4730, dtype="float64") /* ty=Tensor[(6, 16, 4), float64] */;
    %980 = dyn.reshape(%977, %978, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %981 = cast(%var_4736, dtype="uint32") /* ty=Tensor[(6, 16, 4), uint32] */;
    %982 = shape_of(meta[relay.Constant][54] /* ty=Tensor[(6, 16, 4), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %983 = cast(meta[relay.Constant][54] /* ty=Tensor[(6, 16, 4), float64] */, dtype="uint32") /* ty=Tensor[(6, 16, 4), uint32] */;
    %984 = dyn.reshape(%981, %982, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %985 = cast(%var_4756, dtype="uint64") /* ty=Tensor[(210), uint64] */;
    %986 = cast(meta[relay.Constant][55] /* ty=Tensor[(300, 2), uint16] */, dtype="uint16") /* ty=Tensor[(300, 2), uint16] */;
    %987 = cast(meta[relay.Constant][56] /* ty=Tensor[(55, 1), float64] */, dtype="float64") /* ty=Tensor[(55, 1), float64] */;
    %988 = reshape(%985, newshape=[6, 7, 5]) /* ty=Tensor[(6, 7, 5), uint64] */;
    %989 = reshape(%986, newshape=[600]) /* ty=Tensor[(600), uint16] */;
    %990 = reshape(%987, newshape=[55]) /* ty=Tensor[(55), float64] */;
    %991 = @func_1888(%988, %989, %990) /* ty=(Tensor[(6, 7, 5), uint64], Tensor[(10, 5, 12), uint16], Tensor[(10, 5), uint16], Tensor[(600), uint16], Tensor[(5, 9, 11), float64], Tensor[(55), float64], Tensor[(495), float64]) */;
    %992 = cast(meta[relay.Constant][56] /* ty=Tensor[(55, 1), float64] */, dtype="float32") /* ty=Tensor[(55, 1), float32] */;
    %993 = cast(%var_4756, dtype="float32") /* ty=Tensor[(210), float32] */;
    %994 = cast(%var_4730, dtype="float64") /* ty=Tensor[(6, 16, 4), float64] */;
    %995 = rsqrt(%994) /* ty=Tensor[(6, 16, 4), float64] */;
    %996 = cast(%var_4730, dtype="bool") /* ty=Tensor[(6, 16, 4), bool] */;
    %997 = shape_of(%995, dtype="int32") /* ty=Tensor[(3), int32] */;
    %998 = cast(%995, dtype="bool") /* ty=Tensor[(6, 16, 4), bool] */;
    %999 = dyn.reshape(%996, %997, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1000 = floor_divide(%979, %980) /* ty=Tensor[(6, 16, 4), float64] */;
    %1001 = subtract(%983, %984) /* ty=Tensor[(6, 16, 4), uint32] */;
    %1002 = %991.6;
    %1003 = power(%992, %993) /* ty=Tensor[(55, 210), float32] */;
    %1004 = greater(%998, %999) /* ty=Tensor[(6, 16, 4), bool] */;
    (%1000, %1001, %1002, meta[relay.Constant][55] /* ty=Tensor[(300, 2), uint16] */, %1003, %1004)
  };
  %1005(%var_4794, %var_4795, %var_4796) /* ty=(Tensor[(6, 16, 4), float64], Tensor[(6, 16, 4), uint32], Tensor[(495), float64], Tensor[(300, 2), uint16], Tensor[(55, 210), float32], Tensor[(6, 16, 4), bool]) */
}

def @func_5970(%var_5968: Tensor[(210), uint64], %var_5969: Tensor[(55), float64]) -> (Tensor[(5, 1, 15), float64], Tensor[(210, 1), uint64], Tensor[(1200), int32], Tensor[(210), uint64], Tensor[(60, 10), uint16], Tensor[(55), float64]) {
  %1020 = fn (%var_5957: Tensor[(210), uint64], %var_5959: Tensor[(55), float64]) -> (Tensor[(5, 1, 15), float64], Tensor[(210, 1), uint64], Tensor[(1200), int32], Tensor[(210), uint64], Tensor[(60, 10), uint16], Tensor[(55), float64]) {
    %1006 = @func_5718() /* ty=(Tensor[(5, 1, 15), uint16],) */;
    %1007 = %1006.0;
    %1008 = cast(%1007, dtype="float64") /* ty=Tensor[(5, 1, 15), float64] */;
    %1009 = cast(meta[relay.Constant][57] /* ty=Tensor[(1200), int32] */, dtype="int32") /* ty=Tensor[(1200), int32] */;
    %1010 = cast(%var_5957, dtype="uint64") /* ty=Tensor[(210), uint64] */;
    %1011 = cast(meta[relay.Constant][58] /* ty=Tensor[(60, 10), uint16] */, dtype="uint16") /* ty=Tensor[(60, 10), uint16] */;
    %1012 = cast(%var_5959, dtype="float64") /* ty=Tensor[(55), float64] */;
    %1013 = reshape(%1009, newshape=[5, 16, 15]) /* ty=Tensor[(5, 16, 15), int32] */;
    %1014 = reshape(%1010, newshape=[210, 1]) /* ty=Tensor[(210, 1), uint64] */;
    %1015 = reshape(%1011, newshape=[600]) /* ty=Tensor[(600), uint16] */;
    %1016 = reshape(%1012, newshape=[55]) /* ty=Tensor[(55), float64] */;
    %1017 = @func_3648(%1013, %1014, %1015, %1016) /* ty=(Tensor[(5, 16, 15), int32], Tensor[(10, 5), uint16], Tensor[(210, 1), uint64], Tensor[(600), uint16], Tensor[(55), float64]) */;
    %1018 = acosh(%1008) /* ty=Tensor[(5, 1, 15), float64] */;
    %1019 = %1017.2;
    (%1018, %1019, meta[relay.Constant][57] /* ty=Tensor[(1200), int32] */, %var_5957, meta[relay.Constant][58] /* ty=Tensor[(60, 10), uint16] */, %var_5959)
  };
  %1020(%var_5968, %var_5969) /* ty=(Tensor[(5, 1, 15), float64], Tensor[(210, 1), uint64], Tensor[(1200), int32], Tensor[(210), uint64], Tensor[(60, 10), uint16], Tensor[(55), float64]) */
}

def @func_7296(%var_7295: Tensor[(5, 14, 15), uint16]) -> (Tensor[(5, 14, 15), uint8], Tensor[(50), uint16]) {
  %1028 = fn (%var_7280: Tensor[(5, 14, 15), uint16]) -> (Tensor[(5, 14, 15), uint8], Tensor[(50), uint16]) {
    %1021 = @func_5718() /* ty=(Tensor[(5, 1, 15), uint16],) */;
    %1022 = %1021.0;
    %1023 = cast(%1022, dtype="uint8") /* ty=Tensor[(5, 1, 15), uint8] */;
    %1024 = cast(%var_7280, dtype="uint8") /* ty=Tensor[(5, 14, 15), uint8] */;
    %1025 = @func_6498() /* ty=(Tensor[(5, ?, 15), float32], Tensor[(5, 1, 15), float64], Tensor[(10, 5, 12), uint16], Tensor[(50), uint16], Tensor[(1, 600), uint16]) */;
    %1026 = add(%1023, %1024) /* ty=Tensor[(5, 14, 15), uint8] */;
    %1027 = %1025.3;
    (%1026, %1027)
  };
  %1028(%var_7295) /* ty=(Tensor[(5, 14, 15), uint8], Tensor[(50), uint16]) */
}

def @func_5352() -> (Tensor[(55), float64], Tensor[(525), float32], Tensor[(600), uint16], Tensor[(525), float32], uint8, Tensor[(50), uint16]) {
  %1029 = @func_5282() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(210), uint64], Tensor[(55, 1), float64], Tensor[(55), float64]) */;
  %1030 = cast(meta[relay.Constant][59] /* ty=Tensor[(600), uint16] */, dtype="uint16") /* ty=Tensor[(600), uint16] */;
  %1031 = cast(meta[relay.Constant][60] /* ty=Tensor[(525), float32] */, dtype="float32") /* ty=Tensor[(525), float32] */;
  %1032 = cast(meta[relay.Constant][61] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %1033 = reshape(%1030, newshape=[600]) /* ty=Tensor[(600), uint16] */;
  %1034 = reshape(%1031, newshape=[525]) /* ty=Tensor[(525), float32] */;
  %1035 = reshape(%1032, newshape=[]) /* ty=uint8 */;
  %1036 = @func_4868(%1033, %1034, %1035) /* ty=(Tensor[(5, ?, 15), float32], Tensor[(5, 1, 15), uint16], Tensor[(600), uint16], Tensor[(525), float32], Tensor[(14, 8, 1), float32], uint8, Tensor[(2, 56), uint8]) */;
  %1037 = cast(meta[relay.Constant][59] /* ty=Tensor[(600), uint16] */, dtype="uint16") /* ty=Tensor[(600), uint16] */;
  %1038 = cast(meta[relay.Constant][60] /* ty=Tensor[(525), float32] */, dtype="float32") /* ty=Tensor[(525), float32] */;
  %1039 = reshape(%1037, newshape=[600]) /* ty=Tensor[(600), uint16] */;
  %1040 = reshape(%1038, newshape=[525]) /* ty=Tensor[(525), float32] */;
  %1041 = @func_4638(%1039, %1040) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(10, 5, 12), uint16], Tensor[(50), uint16], Tensor[(600), uint16], Tensor[(5, 1, 15), uint16], Tensor[(112), uint8], Tensor[(525), float32], Tensor[(5, 1, 15), uint16]) */;
  %1042 = %1029.3;
  %1043 = %1036.3;
  %1044 = %1041.2;
  (%1042, %1043, meta[relay.Constant][59] /* ty=Tensor[(600), uint16] */, meta[relay.Constant][60] /* ty=Tensor[(525), float32] */, meta[relay.Constant][61] /* ty=uint8 */, %1044)
}

def @func_10377() -> Tensor[(55, ?), float32] {
  %1045 = @func_8023() /* ty=(Tensor[(55, ?), float64],) */;
  %1046 = %1045.0;
  %1047 = cast(%1046, dtype="float32") /* ty=Tensor[(55, ?), float32] */;
  rsqrt(%1047) /* ty=Tensor[(55, ?), float32] */
}

def @func_9758() -> (Tensor[(16, 3, 16), float32],) {
  %1048 = cast(meta[relay.Constant][62] /* ty=Tensor[(16, 3, 16), float32] */, dtype="float32") /* ty=Tensor[(16, 3, 16), float32] */;
  %1049 = exp(%1048) /* ty=Tensor[(16, 3, 16), float32] */;
  (%1049,)
}

def @func_3921() -> (Tensor[(5, ?, 15), float32],) {
  %1050 = @func_3729() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %1051 = %1050.0;
  %1052 = cast(meta[relay.Constant][63] /* ty=Tensor[(5, 1, 15), uint16] */, dtype="float32") /* ty=Tensor[(5, 1, 15), float32] */;
  %1053 = shape_of(%1051, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1054 = cast(%1051, dtype="float32") /* ty=Tensor[(5, 1, 15), float32] */;
  %1055 = dyn.reshape(%1052, %1053, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1056 = floor_divide(%1054, %1055) /* ty=Tensor[(5, ?, 15), float32] */;
  (%1056,)
}

def @func_12092() -> (Tensor[(10, 5, 12), float64],) {
  %1059 = fn () -> (Tensor[(10, 5, 12), float64],) {
    %1057 = @func_5196() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(210), uint64], Tensor[(2, 300), uint16], Tensor[(55), float64], Tensor[(10, 5, 12), float64], Tensor[(5, 16, 15), int32]) */;
    %1058 = %1057.4;
    (%1058,)
  };
  %1059() /* ty=(Tensor[(10, 5, 12), float64],) */
}

def @func_12858() -> (Tensor[(5, 55, 15), bool], Tensor[(5, 1, 15), uint16]) {
  %1067 = fn () -> (Tensor[(5, 55, 15), bool], Tensor[(5, 1, 15), uint16]) {
    %1060 = @func_9993() /* ty=Tensor[(55, ?), float32] */;
    %1061 = @func_10238() /* ty=Tensor[(5, 1, 15), uint16] */;
    %1062 = cast(%1060, dtype="bool") /* ty=Tensor[(55, ?), bool] */;
    %1063 = cast(%1061, dtype="bool") /* ty=Tensor[(5, 1, 15), bool] */;
    %1064 = @func_9182() /* ty=(Tensor[(5, 1, 15), uint16],) */;
    %1065 = less(%1062, %1063) /* ty=Tensor[(5, 55, 15), bool] */;
    %1066 = %1064.0;
    (%1065, %1066)
  };
  %1067() /* ty=(Tensor[(5, 55, 15), bool], Tensor[(5, 1, 15), uint16]) */
}

def @func_5197() -> (Tensor[(5, 1, 15), uint16], Tensor[(210), uint64], Tensor[(2, 300), uint16], Tensor[(55), float64], Tensor[(10, 5, 12), float64], Tensor[(5, 16, 15), int32]) {
  %1083 = fn () -> (Tensor[(5, 1, 15), uint16], Tensor[(210), uint64], Tensor[(2, 300), uint16], Tensor[(55), float64], Tensor[(10, 5, 12), float64], Tensor[(5, 16, 15), int32]) {
    %1068 = cast(meta[relay.Constant][64] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
    %1069 = cast(meta[relay.Constant][65] /* ty=Tensor[(2, 300), uint16] */, dtype="uint16") /* ty=Tensor[(2, 300), uint16] */;
    %1070 = cast(meta[relay.Constant][66] /* ty=Tensor[(55), float64] */, dtype="float64") /* ty=Tensor[(55), float64] */;
    %1071 = reshape(%1068, newshape=[6, 7, 5]) /* ty=Tensor[(6, 7, 5), uint64] */;
    %1072 = reshape(%1069, newshape=[600]) /* ty=Tensor[(600), uint16] */;
    %1073 = reshape(%1070, newshape=[55]) /* ty=Tensor[(55), float64] */;
    %1074 = @func_1888(%1071, %1072, %1073) /* ty=(Tensor[(6, 7, 5), uint64], Tensor[(10, 5, 12), uint16], Tensor[(10, 5), uint16], Tensor[(600), uint16], Tensor[(5, 9, 11), float64], Tensor[(55), float64], Tensor[(495), float64]) */;
    %1075 = %1074.1;
    %1076 = cast(%1075, dtype="float64") /* ty=Tensor[(10, 5, 12), float64] */;
    %1077 = cast(meta[relay.Constant][66] /* ty=Tensor[(55), float64] */, dtype="float64") /* ty=Tensor[(55), float64] */;
    %1078 = reshape(%1077, newshape=[55]) /* ty=Tensor[(55), float64] */;
    %1079 = @func_4177(%1078) /* ty=(Tensor[(5, ?, 15), float32], Tensor[(5, 16, 15), int32], Tensor[(55), float64]) */;
    %1080 = @func_4471() /* ty=Tensor[(5, 1, 15), uint16] */;
    %1081 = sigmoid(%1076) /* ty=Tensor[(10, 5, 12), float64] */;
    %1082 = %1079.1;
    (%1080, meta[relay.Constant][64] /* ty=Tensor[(210), uint64] */, meta[relay.Constant][65] /* ty=Tensor[(2, 300), uint16] */, meta[relay.Constant][66] /* ty=Tensor[(55), float64] */, %1081, %1082)
  };
  %1083() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(210), uint64], Tensor[(2, 300), uint16], Tensor[(55), float64], Tensor[(10, 5, 12), float64], Tensor[(5, 16, 15), int32]) */
}

def @func_9760() -> (Tensor[(16, 3, 16), float32],) {
  @func_9758() /* ty=(Tensor[(16, 3, 16), float32],) */
}

def @func_12205(%var_12203: Tensor[(112), uint8], %var_12204: Tensor[(525), float32]) -> (Tensor[(5, 1, 15), uint16], Tensor[(112), uint8], Tensor[(112), uint8], Tensor[(525), float32], Tensor[(5, 1, 15), uint16], Tensor[(1, 600), uint16], Tensor[(5, 1, 15), uint16]) {
  @func_12201(%var_12203, %var_12204) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(112), uint8], Tensor[(112), uint8], Tensor[(525), float32], Tensor[(5, 1, 15), uint16], Tensor[(1, 600), uint16], Tensor[(5, 1, 15), uint16]) */
}

def @func_9958() -> (Tensor[(5, ?, 15), int64],) {
  %1086 = fn () -> (Tensor[(5, ?, 15), int64],) {
    %1084 = @func_9437() /* ty=(Tensor[(5, ?, 15), int64],) */;
    %1085 = %1084.0;
    (%1085,)
  };
  %1086() /* ty=(Tensor[(5, ?, 15), int64],) */
}

def @func_7444(%var_7443: Tensor[(5, 8, 15), uint16]) -> (Tensor[(5, 8, 15), bool], Tensor[(210), uint64], Tensor[(5, 42), uint64]) {
  %1095 = fn (%var_7409: Tensor[(5, 8, 15), uint16]) -> (Tensor[(5, 8, 15), bool], Tensor[(210), uint64], Tensor[(5, 42), uint64]) {
    %1087 = @func_4951() /* ty=Tensor[(5, 1, 15), uint16] */;
    %1088 = cast(%1087, dtype="bool") /* ty=Tensor[(5, 1, 15), bool] */;
    %1089 = cast(%var_7409, dtype="bool") /* ty=Tensor[(5, 8, 15), bool] */;
    %1090 = cast(meta[relay.Constant][67] /* ty=Tensor[(5, 42), uint64] */, dtype="uint64") /* ty=Tensor[(5, 42), uint64] */;
    %1091 = reshape(%1090, newshape=[210]) /* ty=Tensor[(210), uint64] */;
    %1092 = @func_4042(%1091) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 9, 11), float64], Tensor[(210), uint64], Tensor[(600), uint16], Tensor[(55), float64]) */;
    %1093 = not_equal(%1088, %1089) /* ty=Tensor[(5, 8, 15), bool] */;
    %1094 = %1092.2;
    (%1093, %1094, meta[relay.Constant][67] /* ty=Tensor[(5, 42), uint64] */)
  };
  %1095(%var_7443) /* ty=(Tensor[(5, 8, 15), bool], Tensor[(210), uint64], Tensor[(5, 42), uint64]) */
}

def @func_10192() -> (Tensor[(5, ?, 15), int64],) {
  %1098 = fn () -> (Tensor[(5, ?, 15), int64],) {
    %1096 = @func_5007() /* ty=(Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) */;
    %1097 = %1096.0;
    (%1097,)
  };
  %1098() /* ty=(Tensor[(5, ?, 15), int64],) */
}

def @func_8538(%var_8536: Tensor[(5, 14, 15), int64], %var_8537: Tensor[(5, 14, 15), int64]) -> (Tensor[(5, 14, 15), int64],) {
  %1104 = fn (%var_8505: Tensor[(5, 14, 15), int64], %var_8506: Tensor[(5, 14, 15), int64]) -> (Tensor[(5, 14, 15), int64],) {
    %1099 = cast(%var_8506, dtype="int64") /* ty=Tensor[(5, 14, 15), int64] */;
    %1100 = shape_of(%var_8505, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1101 = cast(%var_8505, dtype="int64") /* ty=Tensor[(5, 14, 15), int64] */;
    %1102 = dyn.reshape(%1099, %1100, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %1103 = left_shift(%1101, %1102) /* ty=Tensor[(5, 14, 15), int64] */;
    (%1103,)
  };
  %1104(%var_8536, %var_8537) /* ty=(Tensor[(5, 14, 15), int64],) */
}

def @func_14055() -> Tensor[(5, 1, 15), uint16] {
  %1106 = fn () -> Tensor[(5, 1, 15), uint16] {
    %1105 = @func_13862() /* ty=(Tensor[(5, 1, 15), uint16],) */;
    %1105.0
  };
  %1106() /* ty=Tensor[(5, 1, 15), uint16] */
}

def @func_5328() -> (Tensor[(5, 1, 15), uint16], Tensor[(2, 4, 5), float32], Tensor[(40), float32], Tensor[(5, 1, 15), uint16], Tensor[(210), uint64]) {
  @func_5326() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(2, 4, 5), float32], Tensor[(40), float32], Tensor[(5, 1, 15), uint16], Tensor[(210), uint64]) */
}

def @main(%var_14302: Tensor[(55), float64], %var_14318: Tensor[(55, 12), float64]) -> (Tensor[(5, 1, 15), uint16], Tensor[(55), float64], Tensor[(20, 2), float32], Tensor[(55, 12), uint8], Tensor[(55, 1), float64], Tensor[(55, ?), bool]) {
  %1107 = cast(%var_14302, dtype="float64") /* ty=Tensor[(55), float64] */;
  %1108 = cast(meta[relay.Constant][68] /* ty=Tensor[(20, 2), float32] */, dtype="float32") /* ty=Tensor[(20, 2), float32] */;
  %1109 = reshape(%1107, newshape=[55, 1]) /* ty=Tensor[(55, 1), float64] */;
  %1110 = reshape(%1108, newshape=[40]) /* ty=Tensor[(40), float32] */;
  %1111 = @func_11582(%1109, %1110) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, ?, 15), float32], Tensor[(55, 1), float64], Tensor[(2, 4, 5), uint64], Tensor[(40), float32], Tensor[(7, 7, 15), uint16], Tensor[(7, 105), uint16]) */;
  %1112 = %1111.2;
  %1113 = cast(%1112, dtype="uint8") /* ty=Tensor[(55, 1), uint8] */;
  %1114 = cast(%var_14318, dtype="uint8") /* ty=Tensor[(55, 12), uint8] */;
  %1115 = cast(%1112, dtype="float64") /* ty=Tensor[(55, 1), float64] */;
  %1116 = cast(%1112, dtype="float32") /* ty=Tensor[(55, 1), float32] */;
  %1117 = tan(%1116) /* ty=Tensor[(55, 1), float32] */;
  %1118 = cast(%1117, dtype="float64") /* ty=Tensor[(55, 1), float64] */;
  %1119 = atan(%1118) /* ty=Tensor[(55, 1), float64] */;
  %1120 = cast(%1112, dtype="bool") /* ty=Tensor[(55, 1), bool] */;
  %1121 = shape_of(%1119, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1122 = cast(%1119, dtype="bool") /* ty=Tensor[(55, 1), bool] */;
  %1123 = dyn.reshape(%1120, %1121, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1124 = @func_11495() /* ty=Tensor[(5, 1, 15), uint16] */;
  %1125 = bitwise_xor(%1113, %1114) /* ty=Tensor[(55, 12), uint8] */;
  %1126 = exp(%1115) /* ty=Tensor[(55, 1), float64] */;
  %1127 = greater(%1122, %1123) /* ty=Tensor[(55, ?), bool] */;
  (%1124, %var_14302, meta[relay.Constant][68] /* ty=Tensor[(20, 2), float32] */, %1125, %1126, %1127)
}

def @func_5354() -> (Tensor[(55), float64], Tensor[(525), float32], Tensor[(600), uint16], Tensor[(525), float32], uint8, Tensor[(50), uint16]) {
  @func_5352() /* ty=(Tensor[(55), float64], Tensor[(525), float32], Tensor[(600), uint16], Tensor[(525), float32], uint8, Tensor[(50), uint16]) */
}

def @func_6092() -> (Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) {
  %1131 = fn () -> (Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) {
    %1128 = @func_5007() /* ty=(Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) */;
    %1129 = %1128.0;
    %1130 = @func_4951() /* ty=Tensor[(5, 1, 15), uint16] */;
    (%1129, %1130)
  };
  %1131() /* ty=(Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) */
}

def @func_11708() -> (Tensor[(2, 4, 5), float32],) {
  %1132 = @func_9820() /* ty=Tensor[(2, 4, 5), float32] */;
  (%1132,)
}

def @func_12894(%var_12892: Tensor[(112), uint8]) -> (Tensor[(?, 13, 7), uint32], Tensor[(1, 13, 7), float64], Tensor[(5, 105), bool], Tensor[(112), uint8]) {
  %1133 = cast(meta[relay.Constant][70] /* ty=Tensor[(1, 13, 7), uint32] */, dtype="uint32") /* ty=Tensor[(1, 13, 7), uint32] */;
  %1134 = shape_of(meta[relay.Constant][69] /* ty=Tensor[(1, 13, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1135 = cast(meta[relay.Constant][69] /* ty=Tensor[(1, 13, 7), uint32] */, dtype="uint32") /* ty=Tensor[(1, 13, 7), uint32] */;
  %1136 = dyn.reshape(%1133, %1134, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1137 = cast(meta[relay.Constant][69] /* ty=Tensor[(1, 13, 7), uint32] */, dtype="float64") /* ty=Tensor[(1, 13, 7), float64] */;
  %1138 = cast(%var_12892, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %1139 = reshape(%1138, newshape=[112]) /* ty=Tensor[(112), uint8] */;
  %1140 = @func_6908(%1139) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 105), bool], Tensor[(112), uint8], Tensor[(525), float32]) */;
  %1141 = bitwise_and(%1135, %1136) /* ty=Tensor[(?, 13, 7), uint32] */;
  %1142 = sigmoid(%1137) /* ty=Tensor[(1, 13, 7), float64] */;
  %1143 = %1140.1;
  (%1141, %1142, %1143, %var_12892)
}

def @func_14203() -> (Tensor[(5, 1, 15), uint16],) {
  %1144 = @func_13947() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %1145 = %1144.0;
  (%1145,)
}

def @func_8412() -> (Tensor[(5, 1, 15), float64],) {
  %1146 = @func_5947() /* ty=Tensor[(5, 1, 15), float64] */;
  (%1146,)
}

def @func_9386() -> (Tensor[(55, ?), float64], Tensor[(5, 1, 15), uint16]) {
  @func_9384() /* ty=(Tensor[(55, ?), float64], Tensor[(5, 1, 15), uint16]) */
}

def @func_7084() -> Tensor[(5, 1, 15), uint16] {
  @func_7082() /* ty=Tensor[(5, 1, 15), uint16] */
}

def @func_7015(%var_7013: Tensor[(600), uint16], %var_7014: uint8) -> (Tensor[(50), uint16], uint8, Tensor[(600), uint16], Tensor[(525), float32], uint8) {
  @func_7011(%var_7013, %var_7014) /* ty=(Tensor[(50), uint16], uint8, Tensor[(600), uint16], Tensor[(525), float32], uint8) */
}

def @func_9821() -> Tensor[(2, 4, 5), float32] {
  %1147 = fn () -> Tensor[(2, 4, 5), float32] {
    @func_7921() /* ty=Tensor[(2, 4, 5), float32] */
  };
  %1147() /* ty=Tensor[(2, 4, 5), float32] */
}

def @func_11766() -> Tensor[(5, 14, 15), int64] {
  @func_11764() /* ty=Tensor[(5, 14, 15), int64] */
}

def @func_7211() -> (Tensor[(12, 11, 4), float32],) {
  @func_7209() /* ty=(Tensor[(12, 11, 4), float32],) */
}

def @func_12278() -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64], Tensor[(5, 1, 15), uint16], Tensor[(55, ?), float64]) {
  %1155 = fn () -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64], Tensor[(5, 1, 15), uint16], Tensor[(55, ?), float64]) {
    %1148 = @func_8412() /* ty=(Tensor[(5, 1, 15), float64],) */;
    %1149 = @func_5718() /* ty=(Tensor[(5, 1, 15), uint16],) */;
    %1150 = @func_9149() /* ty=(Tensor[(55, ?), float64], Tensor[(5, 1, 15), float64]) */;
    %1151 = @func_11495() /* ty=Tensor[(5, 1, 15), uint16] */;
    %1152 = %1148.0;
    %1153 = %1149.0;
    %1154 = %1150.0;
    (%1151, %1152, %1153, %1154)
  };
  %1155() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64], Tensor[(5, 1, 15), uint16], Tensor[(55, ?), float64]) */
}

def @func_7228(%var_7227: Tensor[(55), float64]) -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16], Tensor[(55), float64]) {
  %1162 = fn (%var_7215: Tensor[(55), float64]) -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16], Tensor[(55), float64]) {
    %1156 = @func_6439() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64]) */;
    %1157 = cast(%var_7215, dtype="float64") /* ty=Tensor[(55), float64] */;
    %1158 = reshape(%1157, newshape=[55]) /* ty=Tensor[(55), float64] */;
    %1159 = @func_6295(%1158) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16], Tensor[(5, 9, 11), float64], Tensor[(55), float64], Tensor[(495), float64]) */;
    %1160 = %1156.0;
    %1161 = %1159.0;
    (%1160, %1161, %var_7215)
  };
  %1162(%var_7227) /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), uint16], Tensor[(55), float64]) */
}

def @func_824(%var_822: Tensor[(5, 1, 11), float64], %var_823: Tensor[(5, 9, 11), float64]) -> Tensor[(5, 9, 11), float64] {
  @func_820(%var_822, %var_823) /* ty=Tensor[(5, 9, 11), float64] */
}

def @func_6440() -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64]) {
  %1166 = fn () -> (Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64]) {
    %1163 = @func_6091() /* ty=(Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) */;
    %1164 = %1163.1;
    %1165 = @func_5947() /* ty=Tensor[(5, 1, 15), float64] */;
    (%1164, %1165)
  };
  %1166() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(5, 1, 15), float64]) */
}

def @func_13428() -> (Tensor[(16, 3, 16), float32], Tensor[(55, ?), float64], Tensor[(5, 1, 15), uint16]) {
  @func_13426() /* ty=(Tensor[(16, 3, 16), float32], Tensor[(55, ?), float64], Tensor[(5, 1, 15), uint16]) */
}

def @func_8444() -> (Tensor[(2, 300), uint16], Tensor[(5, ?, 15), int64]) {
  %1171 = fn () -> (Tensor[(2, 300), uint16], Tensor[(5, ?, 15), int64]) {
    %1167 = @func_5196() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(210), uint64], Tensor[(2, 300), uint16], Tensor[(55), float64], Tensor[(10, 5, 12), float64], Tensor[(5, 16, 15), int32]) */;
    %1168 = @func_5007() /* ty=(Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) */;
    %1169 = %1167.2;
    %1170 = %1168.0;
    (%1169, %1170)
  };
  %1171() /* ty=(Tensor[(2, 300), uint16], Tensor[(5, ?, 15), int64]) */
}

def @func_12610() -> Tensor[(5, 1, 15), float64] {
  %1172 = @func_8132() /* ty=(Tensor[(5, 1, 15), float64],) */;
  %1172.0
}

def @func_7714() -> Tensor[(210), uint64] {
  @func_7712() /* ty=Tensor[(210), uint64] */
}

def @func_5284() -> (Tensor[(5, 1, 15), uint16], Tensor[(210), uint64], Tensor[(55, 1), float64], Tensor[(55), float64]) {
  @func_5282() /* ty=(Tensor[(5, 1, 15), uint16], Tensor[(210), uint64], Tensor[(55, 1), float64], Tensor[(55), float64]) */
}

def @func_4180(%var_4178: Tensor[(55), float64]) -> (Tensor[(5, ?, 15), float32], Tensor[(5, 16, 15), int32], Tensor[(55), float64]) {
  @func_4177(%var_4178) /* ty=(Tensor[(5, ?, 15), float32], Tensor[(5, 16, 15), int32], Tensor[(55), float64]) */
}

def @func_6073(%var_6052: Tensor[(7, 7, 15), uint16]) -> (Tensor[(7, 7, 15), uint16], Tensor[(5, 1, 15), uint16]) {
  %1173 = cast(%var_6052, dtype="uint16") /* ty=Tensor[(7, 7, 15), uint16] */;
  %1174 = shape_of(meta[relay.Constant][71] /* ty=Tensor[(7, 7, 15), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1175 = cast(meta[relay.Constant][71] /* ty=Tensor[(7, 7, 15), uint16] */, dtype="uint16") /* ty=Tensor[(7, 7, 15), uint16] */;
  %1176 = dyn.reshape(%1173, %1174, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1177 = subtract(%1175, %1176) /* ty=Tensor[(7, 7, 15), uint16] */;
  %1178 = @func_4250() /* ty=Tensor[(5, 1, 15), uint16] */;
  (%1177, %1178)
}

def @func_14205() -> (Tensor[(5, 1, 15), uint16],) {
  @func_14203() /* ty=(Tensor[(5, 1, 15), uint16],) */
}

def @func_9088() -> (Tensor[(40), float32], Tensor[(5, 1, 15), uint16]) {
  @func_9086() /* ty=(Tensor[(40), float32], Tensor[(5, 1, 15), uint16]) */
}

def @func_3731() -> (Tensor[(5, 1, 15), uint16],) {
  @func_3729() /* ty=(Tensor[(5, 1, 15), uint16],) */
}

def @func_5008() -> (Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) {
  %1189 = fn () -> (Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) {
    %1179 = @func_3729() /* ty=(Tensor[(5, 1, 15), uint16],) */;
    %1180 = %1179.0;
    %1181 = cast(%1180, dtype="float32") /* ty=Tensor[(5, 1, 15), float32] */;
    %1182 = rsqrt(%1181) /* ty=Tensor[(5, 1, 15), float32] */;
    %1183 = cast(%1182, dtype="int64") /* ty=Tensor[(5, 1, 15), int64] */;
    %1184 = shape_of(%1180, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1185 = cast(%1180, dtype="int64") /* ty=Tensor[(5, 1, 15), int64] */;
    %1186 = dyn.reshape(%1183, %1184, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %1187 = bitwise_or(%1185, %1186) /* ty=Tensor[(5, ?, 15), int64] */;
    %1188 = @func_4471() /* ty=Tensor[(5, 1, 15), uint16] */;
    (%1187, %1188)
  };
  %1189() /* ty=(Tensor[(5, ?, 15), int64], Tensor[(5, 1, 15), uint16]) */
}

def @func_10876(%var_10874: Tensor[(12, 8, 15), float64]) -> (Tensor[(12, 8, 15), float64], Tensor[(5, 1, 15), uint16]) {
  @func_10873(%var_10874) /* ty=(Tensor[(12, 8, 15), float64], Tensor[(5, 1, 15), uint16]) */
}

def @func_13910() -> (Tensor[(10, 5, 12), float64], Tensor[(5, 1, 15), uint16], Tensor[(55, ?), float32]) {
  %1190 = @func_13174() /* ty=(Tensor[(10, 5, 12), float64], Tensor[(16, 3, 16), float32]) */;
  %1191 = @func_9086() /* ty=(Tensor[(40), float32], Tensor[(5, 1, 15), uint16]) */;
  %1192 = @func_6345() /* ty=(Tensor[(55, ?), float32],) */;
  %1193 = %1190.0;
  %1194 = %1191.1;
  %1195 = %1192.0;
  (%1193, %1194, %1195)
}

def @func_6384(%var_6382: Tensor[(5, 7, 15), int64]) -> (Tensor[(5, 7, 15), bool], Tensor[(5, ?, 15), int16]) {
  @func_6381(%var_6382) /* ty=(Tensor[(5, 7, 15), bool], Tensor[(5, ?, 15), int16]) */
}

def @func_11213() -> Tensor[(16, 3, 16), float32] {
  %1197 = fn () -> Tensor[(16, 3, 16), float32] {
    %1196 = @func_9758() /* ty=(Tensor[(16, 3, 16), float32],) */;
    %1196.0
  };
  %1197() /* ty=Tensor[(16, 3, 16), float32] */
}

def @func_4951() -> Tensor[(5, 1, 15), uint16] {
  %1198 = @func_3729() /* ty=(Tensor[(5, 1, 15), uint16],) */;
  %1198.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen918/build/output.py", line 3580, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:47:03] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

