import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_261 = relay.var("var_261", dtype = "float64", shape = (3, 13, 9))#candidate|261|(3, 13, 9)|var|float64
uop_262 = relay.erf(var_261.astype('float64')) # shape=(3, 13, 9)
bop_267 = relay.divide(uop_262.astype('float64'), relay.reshape(var_261.astype('float64'), relay.shape_of(uop_262))) # shape=(3, 13, 9)
output = bop_267
output2 = bop_267
func_282 = relay.Function([var_261,], output)
mod['func_282'] = func_282
mod = relay.transform.InferType()(mod)
var_283 = relay.var("var_283", dtype = "float64", shape = (3, 13, 9))#candidate|283|(3, 13, 9)|var|float64
output = func_282(var_283)
func_284 = relay.Function([var_283], output)
mutated_mod['func_284'] = func_284
mutated_mod = relay.transform.InferType()(mutated_mod)
var_560 = relay.var("var_560", dtype = "uint64", shape = (14, 12, 3))#candidate|560|(14, 12, 3)|var|uint64
var_561 = relay.var("var_561", dtype = "uint64", shape = (14, 12, 3))#candidate|561|(14, 12, 3)|var|uint64
bop_562 = relay.subtract(var_560.astype('uint64'), relay.reshape(var_561.astype('uint64'), relay.shape_of(var_560))) # shape=(14, 12, 3)
output = relay.Tuple([bop_562,])
output2 = relay.Tuple([bop_562,])
func_571 = relay.Function([var_560,var_561,], output)
mod['func_571'] = func_571
mod = relay.transform.InferType()(mod)
var_572 = relay.var("var_572", dtype = "uint64", shape = (14, 12, 3))#candidate|572|(14, 12, 3)|var|uint64
var_573 = relay.var("var_573", dtype = "uint64", shape = (14, 12, 3))#candidate|573|(14, 12, 3)|var|uint64
output = func_571(var_572,var_573,)
func_574 = relay.Function([var_572,var_573,], output)
mutated_mod['func_574'] = func_574
mutated_mod = relay.transform.InferType()(mutated_mod)
var_578 = relay.var("var_578", dtype = "int32", shape = (7, 10, 2))#candidate|578|(7, 10, 2)|var|int32
var_579 = relay.var("var_579", dtype = "int32", shape = (7, 10, 2))#candidate|579|(7, 10, 2)|var|int32
bop_580 = relay.bitwise_xor(var_578.astype('int32'), relay.reshape(var_579.astype('int32'), relay.shape_of(var_578))) # shape=(7, 10, 2)
func_282_call = mod.get_global_var('func_282')
func_284_call = mutated_mod.get_global_var('func_284')
const_584 = relay.const([-9.317046,3.424302,0.929998,9.259647,-4.214828,1.866266,-6.223182,9.543738,-7.409155,-3.416098,-2.318083,5.992018,5.783490,-3.382548,7.021826,9.917244,-0.475578,7.481344,-9.827229,-0.975545,-8.307883,2.488662,4.344245,0.072074,-3.045552,-2.306317,9.221920,2.655606,-0.310863,8.570818,-1.987097,-9.132070,8.757275,-1.482792,-8.293785,7.338071,8.407684,6.247001,7.627568,-1.315148,-6.128142,0.853704,2.039020,6.646117,-1.213006,5.844380,3.099585,4.104942,9.441247,4.866328,-9.479641,5.339653,9.994917,-7.486707,6.192996,-1.180169,4.094639,-9.280684,-3.152211,4.473823,-2.944101,3.258416,-0.627407,1.812434,2.943237,0.402559,2.808288,1.341658,-0.451597,8.785530,-8.758261,8.109863,8.170426,-0.221713,4.957422,5.606583,9.614961,-0.976571,5.098747,3.948451,-6.362547,2.920812,5.161175,-2.474777,-9.191050,-5.110027,9.294969,6.781176,3.143191,-3.894482,6.050411,-0.385966,4.175281,-7.732602,-7.702516,7.234220,-5.523151,-1.528619,1.612579,0.422266,2.119849,-1.676653,-4.572289,5.764707,-9.763815,-1.999110,6.315905,-4.772209,1.123357,-5.453062,-3.254699,-5.942573,-5.450214,6.509155,2.294571,4.477011,-6.322753,2.674890,8.807111,-3.498356,5.800105,6.523228,2.258046,3.093440,-4.912782,8.081255,0.101774,-9.855686,-7.379820,8.223343,-5.177684,-2.370232,-0.105181,9.000996,2.682596,4.303747,2.311920,8.144375,-7.372199,7.681931,-1.429286,-8.771943,1.636159,8.292546,-5.766885,5.577559,-2.307286,4.581864,-6.619806,-9.968124,-5.423571,-6.529915,0.657943,-3.590944,-0.091768,-4.703866,-3.291191,-1.155189,7.778270,-6.442446,-8.115449,4.973452,9.133909,5.064962,6.739184,3.608360,-4.252607,9.343941,-9.255656,2.733893,-7.657518,6.763624,-4.813634,-2.959293,-8.083796,9.968708,-5.693994,7.171404,7.219375,3.706579,-7.615791,-5.857674,-3.541475,-6.380778,-9.888342,6.548963,-4.865991,4.218252,-0.288035,-6.937501,-7.393195,8.417953,-6.465445,9.841112,-9.564453,4.379581,7.300013,5.466323,7.270861,-1.741775,9.635970,-2.311970,0.691445,1.970849,7.581958,-9.682243,3.448463,9.789376,-6.936666,-8.714407,6.823255,5.585054,6.807325,2.070927,8.549512,-5.991297,1.199310,-8.493207,4.311694,5.273081,7.807227,-4.779447,8.436747,9.561861,-3.906659,-4.964603,6.186938,0.677055,-7.759743,6.989282,-3.507711,3.503909,6.904478,-4.773650,8.727800,8.314400,4.612385,4.515324,9.143687,-1.211748,-8.537923,-1.033332,3.191759,0.022919,-7.932724,1.917099,-4.573839,-9.244528,-4.682369,-0.597822,-1.543912,-9.384935,-1.803112,4.378370,-8.934067,2.601937,-9.458299,-4.289480,7.441478,-4.697666,9.621534,4.012470,-3.445802,7.947321,-6.659095,-7.518824,7.111066,2.731337,-5.916781,-0.185359,-6.695432,-3.457843,9.176365,-5.653290,-3.517647,-5.728259,-4.273123,5.890041,5.916277,4.494697,0.395696,5.228196,2.014177,-3.392879,1.611714,-0.182063,-6.396992,-0.626863,-9.527289,8.187562,6.034990,-0.281002,1.911921,-4.873069,-2.060227,-2.626520,5.587908,-4.131016,-1.900035,3.721204,6.030801,-4.885977,-3.551896,9.913929,2.015510,8.383235,-5.361800,5.643185,8.447458,1.085020,1.301332,6.379752,8.483296,6.951011,-3.983182,2.928102,0.438761,-4.672336,-2.644665,-6.403712,-3.443509,5.310525,6.057928,-1.211951,-3.316579,-1.993385,9.040961,8.284009,0.965446,3.164612,9.851387,-6.576709,-8.008330,-6.255432,-7.221269,-4.080541,-1.654886,-5.357151,-8.165458,-9.706914,-2.617325,3.382590,8.112223,-7.250114,1.319641,-9.541281,-8.436535,9.710840,1.020055,0.487074,-7.427623], dtype = "float64")#candidate|584|(351,)|const|float64
call_583 = func_282_call(relay.reshape(const_584.astype('float64'), [3, 13, 9]))
call_585 = func_282_call(relay.reshape(const_584.astype('float64'), [3, 13, 9]))
var_587 = relay.var("var_587", dtype = "int32", shape = (7, 10, 2))#candidate|587|(7, 10, 2)|var|int32
bop_588 = relay.add(var_579.astype('int16'), relay.reshape(var_587.astype('int16'), relay.shape_of(var_579))) # shape=(7, 10, 2)
output = relay.Tuple([bop_580,call_583,const_584,bop_588,])
output2 = relay.Tuple([bop_580,call_585,const_584,bop_588,])
func_591 = relay.Function([var_578,var_579,var_587,], output)
mod['func_591'] = func_591
mod = relay.transform.InferType()(mod)
mutated_mod['func_591'] = func_591
mutated_mod = relay.transform.InferType()(mutated_mod)
func_591_call = mutated_mod.get_global_var('func_591')
var_593 = relay.var("var_593", dtype = "int32", shape = (7, 10, 2))#candidate|593|(7, 10, 2)|var|int32
var_594 = relay.var("var_594", dtype = "int32", shape = (7, 10, 2))#candidate|594|(7, 10, 2)|var|int32
var_595 = relay.var("var_595", dtype = "int32", shape = (7, 10, 2))#candidate|595|(7, 10, 2)|var|int32
call_592 = func_591_call(var_593,var_594,var_595,)
output = call_592
func_596 = relay.Function([var_593,var_594,var_595,], output)
mutated_mod['func_596'] = func_596
mutated_mod = relay.transform.InferType()(mutated_mod)
var_629 = relay.var("var_629", dtype = "float32", shape = (7, 16, 12))#candidate|629|(7, 16, 12)|var|float32
uop_630 = relay.exp(var_629.astype('float32')) # shape=(7, 16, 12)
output = uop_630
output2 = uop_630
func_637 = relay.Function([var_629,], output)
mod['func_637'] = func_637
mod = relay.transform.InferType()(mod)
var_638 = relay.var("var_638", dtype = "float32", shape = (7, 16, 12))#candidate|638|(7, 16, 12)|var|float32
output = func_637(var_638)
func_639 = relay.Function([var_638], output)
mutated_mod['func_639'] = func_639
mutated_mod = relay.transform.InferType()(mutated_mod)
var_719 = relay.var("var_719", dtype = "uint16", shape = (1, 10))#candidate|719|(1, 10)|var|uint16
var_720 = relay.var("var_720", dtype = "uint16", shape = (10, 10))#candidate|720|(10, 10)|var|uint16
bop_721 = relay.less(var_719.astype('bool'), var_720.astype('bool')) # shape=(10, 10)
func_637_call = mod.get_global_var('func_637')
func_639_call = mutated_mod.get_global_var('func_639')
var_725 = relay.var("var_725", dtype = "float32", shape = (1344, 1))#candidate|725|(1344, 1)|var|float32
call_724 = func_637_call(relay.reshape(var_725.astype('float32'), [7, 16, 12]))
call_726 = func_637_call(relay.reshape(var_725.astype('float32'), [7, 16, 12]))
func_282_call = mod.get_global_var('func_282')
func_284_call = mutated_mod.get_global_var('func_284')
const_732 = relay.const([4.047140,-2.739522,7.977509,7.082260,2.045931,-8.494064,3.239809,4.348015,4.569387,-2.025560,-2.932001,6.018670,8.662043,-2.595035,-2.973952,-7.013737,3.696529,-0.205005,-1.153522,-9.478504,-5.907034,3.763238,-5.476832,1.771856,-9.187825,-3.534195,-7.141123,0.195762,-5.366114,5.108205,-1.734967,-2.518623,-0.872188,-0.891195,-1.222453,-1.499381,2.735377,-7.763776,-2.382804,-5.457182,4.164284,4.688023,-2.292245,7.135941,-7.168875,1.766830,-8.219351,-7.407691,4.707801,7.079727,3.770787,-8.639964,-4.126740,-9.582498,-4.370112,4.196192,9.463500,-7.774400,-4.529101,-8.902306,-6.604847,7.504151,6.734462,9.427216,-8.240743,-3.556421,-0.510078,-3.449191,2.717377,5.050274,6.873864,-6.172734,5.845012,-0.746447,-2.521908,-7.549021,0.299428,-4.018355,8.209542,6.509473,-1.660696,5.851805,-5.799330,7.670138,2.902958,-8.084934,-8.306526,3.698016,1.752999,2.980810,3.409028,-1.232913,0.436303,8.020792,-6.665162,-7.592136,3.409202,9.271195,7.889183,4.629045,9.974769,-0.624158,-4.840903,4.944482,3.655448,-4.143602,-9.224372,7.451758,0.248037,-5.100778,6.569857,-9.610376,-5.804270,8.657203,7.284596,-7.965244,-9.034343,-3.126495,4.856148,-0.673608,-8.719832,2.455659,9.446081,-7.186912,0.758345,-8.067626,6.394465,3.158642,-5.739473,6.030200,-9.508379,-5.438607,-1.099397,4.302916,-2.139553,4.475967,-2.214430,9.718478,2.094951,-1.478183,-7.437890,-9.807129,-2.187111,8.345710,-9.638866,-2.362872,6.304888,3.348653,0.186648,2.305811,-5.906568,-8.636364,4.729540,-6.620135,5.641231,7.029963,0.181685,0.243947,-5.558268,-0.889798,5.303074,9.551987,9.310603,2.453057,7.515042,-0.225676,9.643436,7.431101,-5.362053,7.788832,-6.439922,0.180428,-2.204070,6.533876,2.775022,6.784645,-2.244110,7.688382,0.036060,-9.917789,9.302779,-9.164753,9.418854,4.444493,3.687203,5.402210,-2.305418,9.781527,5.785796,8.527151,-5.097188,-3.638387,6.772875,-7.608722,-7.016129,9.697353,0.782386,-7.689642,7.891964,-8.255610,-5.356890,4.960464,-9.192905,-3.431856,6.565321,5.661269,-5.398143,0.389557,6.508223,5.894799,-4.178173,-7.827467,-9.185699,0.601958,-0.233905,5.652421,8.828882,0.264246,1.237277,-2.709457,5.860464,2.586862,9.911716,6.017796,-1.123717,-4.078001,-1.564996,0.803704,3.339200,-7.254914,-5.040103,-1.322413,-2.018851,-5.654849,8.620998,6.272825,-2.500649,5.990929,2.667235,-5.651783,2.388150,-6.979509,4.033086,-1.503848,-6.853311,0.558768,-0.809702,6.871884,4.688678,9.894787,-5.390058,-2.029634,4.704381,-7.050927,-6.205130,-7.506546,0.387416,5.552886,-4.946052,0.775306,6.190108,-6.475657,-9.393657,-7.545788,1.816664,0.788693,-9.241291,-9.899293,7.290182,-4.049391,1.931759,9.200724,-7.996551,-5.540000,-0.247600,3.904221,-6.663090,-1.587997,7.424476,-7.475755,-3.301428,-8.523757,4.466241,-3.477783,1.014768,2.668884,1.565943,7.121659,4.474349,9.126780,4.203501,2.772405,-2.269807,8.837494,4.733549,-3.655989,0.681725,-3.797562,3.468020,6.303464,-2.893981,6.572085,7.731646,0.258293,-5.137280,-9.058794,6.933528,4.968617,6.802504,-4.995687,8.386466,-2.708077,6.301028,7.657057,1.589680,-8.501598,1.911523,-4.842638,-6.336641,-5.664598,-4.532546,4.613152,-0.851768,3.945375,8.744613,-2.731010,-1.865768,3.596317,-5.666986,-2.310632,2.847094,9.445198,-8.721205,8.757520,0.985705,-0.307823,-1.403163,4.235306,-2.205602,4.426444,-6.222525,-4.614207,-7.517992,8.034065,6.063211,4.983009,-7.840207,0.872622,-7.397597,9.852210,-3.942455], dtype = "float64")#candidate|732|(351,)|const|float64
call_731 = func_282_call(relay.reshape(const_732.astype('float64'), [3, 13, 9]))
call_733 = func_282_call(relay.reshape(const_732.astype('float64'), [3, 13, 9]))
func_282_call = mod.get_global_var('func_282')
func_284_call = mutated_mod.get_global_var('func_284')
call_734 = func_282_call(relay.reshape(call_731.astype('float64'), [3, 13, 9]))
call_735 = func_282_call(relay.reshape(call_731.astype('float64'), [3, 13, 9]))
func_282_call = mod.get_global_var('func_282')
func_284_call = mutated_mod.get_global_var('func_284')
call_737 = func_282_call(relay.reshape(const_732.astype('float64'), [3, 13, 9]))
call_738 = func_282_call(relay.reshape(const_732.astype('float64'), [3, 13, 9]))
output = relay.Tuple([bop_721,call_724,var_725,call_731,const_732,call_734,call_737,])
output2 = relay.Tuple([bop_721,call_726,var_725,call_733,const_732,call_735,call_738,])
func_751 = relay.Function([var_719,var_720,var_725,], output)
mod['func_751'] = func_751
mod = relay.transform.InferType()(mod)
var_752 = relay.var("var_752", dtype = "uint16", shape = (1, 10))#candidate|752|(1, 10)|var|uint16
var_753 = relay.var("var_753", dtype = "uint16", shape = (10, 10))#candidate|753|(10, 10)|var|uint16
var_754 = relay.var("var_754", dtype = "float32", shape = (1344, 1))#candidate|754|(1344, 1)|var|float32
output = func_751(var_752,var_753,var_754,)
func_755 = relay.Function([var_752,var_753,var_754,], output)
mutated_mod['func_755'] = func_755
mutated_mod = relay.transform.InferType()(mutated_mod)
var_786 = relay.var("var_786", dtype = "float64", shape = (15, 3, 3))#candidate|786|(15, 3, 3)|var|float64
uop_787 = relay.acosh(var_786.astype('float64')) # shape=(15, 3, 3)
output = uop_787
output2 = uop_787
func_790 = relay.Function([var_786,], output)
mod['func_790'] = func_790
mod = relay.transform.InferType()(mod)
mutated_mod['func_790'] = func_790
mutated_mod = relay.transform.InferType()(mutated_mod)
var_791 = relay.var("var_791", dtype = "float64", shape = (15, 3, 3))#candidate|791|(15, 3, 3)|var|float64
func_790_call = mutated_mod.get_global_var('func_790')
call_792 = func_790_call(var_791)
output = call_792
func_793 = relay.Function([var_791], output)
mutated_mod['func_793'] = func_793
mutated_mod = relay.transform.InferType()(mutated_mod)
var_823 = relay.var("var_823", dtype = "float32", shape = (7, 8, 9))#candidate|823|(7, 8, 9)|var|float32
uop_824 = relay.atanh(var_823.astype('float32')) # shape=(7, 8, 9)
output = uop_824
output2 = uop_824
func_835 = relay.Function([var_823,], output)
mod['func_835'] = func_835
mod = relay.transform.InferType()(mod)
var_836 = relay.var("var_836", dtype = "float32", shape = (7, 8, 9))#candidate|836|(7, 8, 9)|var|float32
output = func_835(var_836)
func_837 = relay.Function([var_836], output)
mutated_mod['func_837'] = func_837
mutated_mod = relay.transform.InferType()(mutated_mod)
var_850 = relay.var("var_850", dtype = "uint16", shape = (5, 16, 1))#candidate|850|(5, 16, 1)|var|uint16
const_851 = relay.const([[[-8,10,-2,-9,3,-8,-8,7,10,2,2],[-2,2,-5,-3,8,7,-1,3,7,-1,-4],[-1,-4,7,-10,7,-1,-9,-5,-3,4,-9],[10,-4,-5,3,5,2,-4,5,-8,-7,-3],[-7,9,-1,9,-9,-1,-7,7,8,3,-1],[-9,-10,9,7,-4,-10,6,5,3,-6,4],[-3,-3,-2,2,-3,10,-9,-3,-2,-3,-7],[6,-4,-3,-3,4,-9,-10,-3,-4,5,-2],[-4,-1,9,1,-2,-7,7,-7,-8,-6,-7],[-7,9,9,-5,8,-5,8,-4,-1,7,3],[9,-4,-10,-5,9,9,1,-1,10,-6,2],[-2,-2,-3,2,-2,-5,-1,9,3,-6,-5],[2,-3,-9,9,4,6,-6,-6,-4,-1,-7],[5,6,3,2,-9,5,-1,3,-4,3,3],[-8,8,-9,10,-1,1,4,-9,3,-3,10],[-1,-3,-9,6,6,3,5,-2,10,-1,-9]],[[7,1,6,6,-7,-10,-3,-9,-3,2,-10],[1,-3,5,2,-7,4,8,-2,-5,-5,-1],[3,9,4,5,-10,6,-5,-7,5,-7,4],[10,-4,-4,9,7,-5,2,-8,5,-1,-1],[-2,-7,-4,7,-2,1,1,4,1,5,-10],[7,-4,-7,-3,-3,-7,-3,5,-7,6,-4],[5,10,3,-4,-2,10,3,-3,6,-1,-6],[-3,4,-1,-10,-9,5,5,-5,-1,-1,-7],[8,3,7,6,8,-8,1,-5,2,-10,-5],[5,5,1,8,-2,-7,10,-9,-9,8,-9],[5,-2,10,-6,-6,-5,8,6,-3,2,-3],[3,-3,-9,8,-1,-2,1,-6,6,-9,-2],[-6,-5,-1,8,1,8,-4,6,4,6,-2],[-9,6,-10,-4,-4,-5,1,7,-9,-1,-4],[-3,6,8,5,-8,6,-8,9,-1,6,3],[9,5,10,-7,10,5,-7,-9,-10,-7,-1]],[[5,8,-6,-1,10,-10,-9,4,7,4,-1],[4,5,8,-2,-6,-10,2,-9,-4,-4,7],[-7,9,-4,-5,-6,-4,2,-3,-1,-1,5],[7,-8,-2,-5,6,-7,-7,8,5,-2,-6],[-3,1,8,-6,-7,7,-4,-10,10,-5,10],[10,-4,1,6,-2,-6,4,7,9,5,-3],[-6,9,6,-3,-6,4,9,-7,5,-5,-4],[-5,1,7,1,-4,-1,-3,9,-5,10,-6],[-7,4,-4,-10,-10,-7,2,-6,2,-10,-6],[-1,-8,1,-4,-6,10,2,1,-2,1,-1],[-3,-4,8,9,-6,1,5,-1,-9,-1,-9],[4,-4,-8,-6,-8,7,-6,-7,-8,-5,6],[-1,2,-5,10,5,1,-8,6,9,5,-5],[10,-5,-4,9,2,-8,9,-7,-7,-3,-4],[9,-7,4,-6,-2,-3,-7,7,7,-6,-4],[-8,6,-3,-4,-1,7,-3,9,-1,6,-10]],[[-3,8,8,4,-3,-3,8,7,5,4,8],[-4,-7,-10,1,5,-8,-1,-9,8,-9,-10],[-9,8,-6,5,-2,-3,-3,1,4,5,8],[-8,-3,8,9,9,-8,-3,9,-10,-6,9],[5,-1,-5,9,-4,-10,-5,-1,10,-4,6],[3,-3,8,6,-9,7,-10,-8,-6,7,-1],[8,-7,-1,7,6,7,-4,1,4,3,-1],[6,3,4,-9,2,-9,6,-10,1,4,7],[5,-8,-7,-2,3,10,9,-5,2,-4,8],[3,2,4,-4,-3,-7,9,1,4,9,-1],[-7,5,-6,10,-8,2,9,-3,4,-3,9],[7,-3,-6,-5,9,5,-3,2,7,-8,-7],[4,3,7,1,8,-6,8,-3,10,5,7],[-8,-3,8,-5,-10,6,7,1,-1,-3,-2],[-10,-4,-1,8,8,7,-3,3,-8,7,8],[1,-9,10,1,4,9,4,8,-7,9,8]],[[-7,-2,-7,10,2,-7,-6,-2,9,8,4],[7,5,-8,6,-8,8,9,-10,1,2,2],[4,-5,-2,10,-7,9,1,-6,-3,3,6],[-9,2,-8,-9,-4,-6,6,4,-3,-5,10],[-10,-6,-1,-8,-10,3,6,-6,-2,10,1],[-6,-3,3,3,-5,-2,-8,9,-1,-3,-9],[-6,6,7,-5,-3,1,-2,-6,-2,10,2],[-8,-5,8,-1,-9,-3,-6,2,-7,2,2],[4,9,-9,-9,-8,-3,-4,-1,9,-4,4],[3,1,10,7,7,10,-7,-4,3,1,-5],[9,2,3,-2,-5,-2,4,10,-5,-5,3],[-5,10,1,4,-8,9,10,-7,-8,7,1],[-3,3,7,3,1,1,6,3,-7,2,3],[9,-4,2,-8,-3,5,-8,-7,4,-9,-9],[6,-4,5,8,-5,5,3,-3,2,3,5],[10,4,-9,-9,-7,-2,-6,4,4,1,3]]], dtype = "uint16")#candidate|851|(5, 16, 11)|const|uint16
bop_852 = relay.less(var_850.astype('bool'), const_851.astype('bool')) # shape=(5, 16, 11)
uop_856 = relay.acosh(var_850.astype('float64')) # shape=(5, 16, 1)
output = relay.Tuple([bop_852,uop_856,])
output2 = relay.Tuple([bop_852,uop_856,])
func_864 = relay.Function([var_850,], output)
mod['func_864'] = func_864
mod = relay.transform.InferType()(mod)
var_865 = relay.var("var_865", dtype = "uint16", shape = (5, 16, 1))#candidate|865|(5, 16, 1)|var|uint16
output = func_864(var_865)
func_866 = relay.Function([var_865], output)
mutated_mod['func_866'] = func_866
mutated_mod = relay.transform.InferType()(mutated_mod)
var_909 = relay.var("var_909", dtype = "int8", shape = ())#candidate|909|()|var|int8
var_910 = relay.var("var_910", dtype = "int8", shape = (12, 1))#candidate|910|(12, 1)|var|int8
bop_911 = relay.multiply(var_909.astype('int8'), var_910.astype('int8')) # shape=(12, 1)
bop_914 = relay.power(var_909.astype('float64'), var_910.astype('float64')) # shape=(12, 1)
bop_919 = relay.floor_mod(var_909.astype('float32'), bop_911.astype('float32')) # shape=(12, 1)
output = relay.Tuple([bop_914,bop_919,])
output2 = relay.Tuple([bop_914,bop_919,])
func_922 = relay.Function([var_909,var_910,], output)
mod['func_922'] = func_922
mod = relay.transform.InferType()(mod)
var_923 = relay.var("var_923", dtype = "int8", shape = ())#candidate|923|()|var|int8
var_924 = relay.var("var_924", dtype = "int8", shape = (12, 1))#candidate|924|(12, 1)|var|int8
output = func_922(var_923,var_924,)
func_925 = relay.Function([var_923,var_924,], output)
mutated_mod['func_925'] = func_925
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1065 = relay.var("var_1065", dtype = "float64", shape = (11, 4, 4))#candidate|1065|(11, 4, 4)|var|float64
uop_1066 = relay.acos(var_1065.astype('float64')) # shape=(11, 4, 4)
func_637_call = mod.get_global_var('func_637')
func_639_call = mutated_mod.get_global_var('func_639')
var_1070 = relay.var("var_1070", dtype = "float32", shape = (1344,))#candidate|1070|(1344,)|var|float32
call_1069 = func_637_call(relay.reshape(var_1070.astype('float32'), [7, 16, 12]))
call_1071 = func_637_call(relay.reshape(var_1070.astype('float32'), [7, 16, 12]))
bop_1078 = relay.greater_equal(uop_1066.astype('bool'), relay.reshape(var_1065.astype('bool'), relay.shape_of(uop_1066))) # shape=(11, 4, 4)
output = relay.Tuple([call_1069,var_1070,bop_1078,])
output2 = relay.Tuple([call_1071,var_1070,bop_1078,])
func_1088 = relay.Function([var_1065,var_1070,], output)
mod['func_1088'] = func_1088
mod = relay.transform.InferType()(mod)
var_1089 = relay.var("var_1089", dtype = "float64", shape = (11, 4, 4))#candidate|1089|(11, 4, 4)|var|float64
var_1090 = relay.var("var_1090", dtype = "float32", shape = (1344,))#candidate|1090|(1344,)|var|float32
output = func_1088(var_1089,var_1090,)
func_1091 = relay.Function([var_1089,var_1090,], output)
mutated_mod['func_1091'] = func_1091
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1179 = relay.var("var_1179", dtype = "int32", shape = (3, 7, 6))#candidate|1179|(3, 7, 6)|var|int32
var_1180 = relay.var("var_1180", dtype = "int32", shape = (3, 7, 6))#candidate|1180|(3, 7, 6)|var|int32
bop_1181 = relay.multiply(var_1179.astype('int32'), relay.reshape(var_1180.astype('int32'), relay.shape_of(var_1179))) # shape=(3, 7, 6)
output = relay.Tuple([bop_1181,])
output2 = relay.Tuple([bop_1181,])
func_1184 = relay.Function([var_1179,var_1180,], output)
mod['func_1184'] = func_1184
mod = relay.transform.InferType()(mod)
mutated_mod['func_1184'] = func_1184
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1184_call = mutated_mod.get_global_var('func_1184')
var_1186 = relay.var("var_1186", dtype = "int32", shape = (3, 7, 6))#candidate|1186|(3, 7, 6)|var|int32
var_1187 = relay.var("var_1187", dtype = "int32", shape = (3, 7, 6))#candidate|1187|(3, 7, 6)|var|int32
call_1185 = func_1184_call(var_1186,var_1187,)
output = call_1185
func_1188 = relay.Function([var_1186,var_1187,], output)
mutated_mod['func_1188'] = func_1188
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1409 = relay.var("var_1409", dtype = "bool", shape = (12, 15, 5))#candidate|1409|(12, 15, 5)|var|bool
var_1410 = relay.var("var_1410", dtype = "bool", shape = (12, 15, 5))#candidate|1410|(12, 15, 5)|var|bool
bop_1411 = relay.logical_or(var_1409.astype('bool'), relay.reshape(var_1410.astype('bool'), relay.shape_of(var_1409))) # shape=(12, 15, 5)
output = relay.Tuple([bop_1411,])
output2 = relay.Tuple([bop_1411,])
func_1419 = relay.Function([var_1409,var_1410,], output)
mod['func_1419'] = func_1419
mod = relay.transform.InferType()(mod)
mutated_mod['func_1419'] = func_1419
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1419_call = mutated_mod.get_global_var('func_1419')
var_1421 = relay.var("var_1421", dtype = "bool", shape = (12, 15, 5))#candidate|1421|(12, 15, 5)|var|bool
var_1422 = relay.var("var_1422", dtype = "bool", shape = (12, 15, 5))#candidate|1422|(12, 15, 5)|var|bool
call_1420 = func_1419_call(var_1421,var_1422,)
output = call_1420
func_1423 = relay.Function([var_1421,var_1422,], output)
mutated_mod['func_1423'] = func_1423
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1469 = relay.var("var_1469", dtype = "int32", shape = (16, 3, 4))#candidate|1469|(16, 3, 4)|var|int32
var_1470 = relay.var("var_1470", dtype = "int32", shape = (16, 3, 4))#candidate|1470|(16, 3, 4)|var|int32
bop_1471 = relay.subtract(var_1469.astype('int32'), relay.reshape(var_1470.astype('int32'), relay.shape_of(var_1469))) # shape=(16, 3, 4)
func_751_call = mod.get_global_var('func_751')
func_755_call = mutated_mod.get_global_var('func_755')
var_1481 = relay.var("var_1481", dtype = "uint16", shape = (10,))#candidate|1481|(10,)|var|uint16
const_1482 = relay.const([[3,1,-9,4],[-3,2,-7,3],[6,2,-9,-5],[-5,-8,8,8],[-10,-7,-10,-6],[3,8,-10,9],[-6,-4,-7,2],[5,6,1,-7],[3,-10,6,-5],[-2,10,-3,10],[9,6,2,8],[7,-3,8,-9],[-5,-5,3,-7],[-4,-8,7,10],[-1,1,-4,3],[3,-10,-5,1],[8,-8,-5,-5],[-5,7,1,7],[4,5,7,1],[-3,10,-2,7],[-6,-10,-3,1],[9,7,5,-10],[-2,-9,5,2],[5,-6,-10,8],[2,-6,-4,-3]], dtype = "uint16")#candidate|1482|(25, 4)|const|uint16
var_1483 = relay.var("var_1483", dtype = "float32", shape = (1344,))#candidate|1483|(1344,)|var|float32
call_1480 = relay.TupleGetItem(func_751_call(relay.reshape(var_1481.astype('uint16'), [1, 10]), relay.reshape(const_1482.astype('uint16'), [10, 10]), relay.reshape(var_1483.astype('float32'), [1344, 1]), ), 5)
call_1484 = relay.TupleGetItem(func_755_call(relay.reshape(var_1481.astype('uint16'), [1, 10]), relay.reshape(const_1482.astype('uint16'), [10, 10]), relay.reshape(var_1483.astype('float32'), [1344, 1]), ), 5)
func_591_call = mod.get_global_var('func_591')
func_596_call = mutated_mod.get_global_var('func_596')
var_1490 = relay.var("var_1490", dtype = "int32", shape = (140,))#candidate|1490|(140,)|var|int32
call_1489 = relay.TupleGetItem(func_591_call(relay.reshape(var_1490.astype('int32'), [7, 10, 2]), relay.reshape(var_1490.astype('int32'), [7, 10, 2]), relay.reshape(var_1490.astype('int32'), [7, 10, 2]), ), 1)
call_1491 = relay.TupleGetItem(func_596_call(relay.reshape(var_1490.astype('int32'), [7, 10, 2]), relay.reshape(var_1490.astype('int32'), [7, 10, 2]), relay.reshape(var_1490.astype('int32'), [7, 10, 2]), ), 1)
func_1419_call = mod.get_global_var('func_1419')
func_1423_call = mutated_mod.get_global_var('func_1423')
var_1496 = relay.var("var_1496", dtype = "bool", shape = (900,))#candidate|1496|(900,)|var|bool
call_1495 = relay.TupleGetItem(func_1419_call(relay.reshape(var_1496.astype('bool'), [12, 15, 5]), relay.reshape(var_1496.astype('bool'), [12, 15, 5]), ), 0)
call_1497 = relay.TupleGetItem(func_1423_call(relay.reshape(var_1496.astype('bool'), [12, 15, 5]), relay.reshape(var_1496.astype('bool'), [12, 15, 5]), ), 0)
output = relay.Tuple([bop_1471,call_1480,var_1481,const_1482,var_1483,call_1489,var_1490,call_1495,var_1496,])
output2 = relay.Tuple([bop_1471,call_1484,var_1481,const_1482,var_1483,call_1491,var_1490,call_1497,var_1496,])
func_1505 = relay.Function([var_1469,var_1470,var_1481,var_1483,var_1490,var_1496,], output)
mod['func_1505'] = func_1505
mod = relay.transform.InferType()(mod)
var_1506 = relay.var("var_1506", dtype = "int32", shape = (16, 3, 4))#candidate|1506|(16, 3, 4)|var|int32
var_1507 = relay.var("var_1507", dtype = "int32", shape = (16, 3, 4))#candidate|1507|(16, 3, 4)|var|int32
var_1508 = relay.var("var_1508", dtype = "uint16", shape = (10,))#candidate|1508|(10,)|var|uint16
var_1509 = relay.var("var_1509", dtype = "float32", shape = (1344,))#candidate|1509|(1344,)|var|float32
var_1510 = relay.var("var_1510", dtype = "int32", shape = (140,))#candidate|1510|(140,)|var|int32
var_1511 = relay.var("var_1511", dtype = "bool", shape = (900,))#candidate|1511|(900,)|var|bool
output = func_1505(var_1506,var_1507,var_1508,var_1509,var_1510,var_1511,)
func_1512 = relay.Function([var_1506,var_1507,var_1508,var_1509,var_1510,var_1511,], output)
mutated_mod['func_1512'] = func_1512
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2047 = relay.var("var_2047", dtype = "float64", shape = (11, 11, 8))#candidate|2047|(11, 11, 8)|var|float64
var_2048 = relay.var("var_2048", dtype = "float64", shape = (11, 11, 8))#candidate|2048|(11, 11, 8)|var|float64
bop_2049 = relay.greater(var_2047.astype('bool'), relay.reshape(var_2048.astype('bool'), relay.shape_of(var_2047))) # shape=(11, 11, 8)
uop_2054 = relay.log(var_2048.astype('float64')) # shape=(11, 11, 8)
func_751_call = mod.get_global_var('func_751')
func_755_call = mutated_mod.get_global_var('func_755')
var_2057 = relay.var("var_2057", dtype = "uint16", shape = (10,))#candidate|2057|(10,)|var|uint16
var_2058 = relay.var("var_2058", dtype = "uint16", shape = (100,))#candidate|2058|(100,)|var|uint16
const_2059 = relay.const([[-3.173085],[9.165559],[8.194793],[6.087698],[6.752189],[-0.104375],[3.070100],[-4.435021],[-6.829768],[-1.282688],[8.170294],[-0.538715],[-3.737647],[4.303389],[3.335485],[-9.564908],[-7.886590],[-3.878067],[0.227189],[2.661136],[-9.489939],[4.768473],[9.989097],[0.621721],[-3.810801],[-8.616997],[7.577598],[-1.210869],[-5.166057],[-3.052757],[2.698719],[1.945774],[5.461656],[9.551242],[6.279648],[8.487592],[-5.776410],[-6.919378],[-1.733079],[0.439815],[7.752738],[-0.892749],[-9.341787],[-0.257333],[-7.504224],[4.299932],[-8.345350],[5.462168],[-5.251933],[-4.124983],[5.506310],[3.966436],[-5.942796],[-2.178787],[2.796418],[6.152404],[7.347939],[9.764491],[9.997458],[-5.190918],[6.000975],[2.742034],[-8.229244],[6.723273],[6.014665],[1.628816],[7.162467],[-6.310721],[-0.915513],[-2.722379],[0.607403],[-6.771780],[7.683339],[-0.066084],[6.439304],[9.656693],[-3.104390],[-7.063447],[5.900882],[5.630391],[0.998074],[-4.712251],[6.056113],[-5.427066],[0.826371],[-4.414805],[2.860494],[0.882388],[-4.865078],[8.141586],[-7.328572],[-8.999664],[4.708767],[6.156006],[-1.807529],[3.656905],[0.502331],[-3.086289],[-8.434838],[-2.284227],[1.179660],[-3.199378],[9.898846],[-5.026101],[-9.585478],[-3.574033],[-7.525039],[0.925134],[2.428058],[-1.645723],[-8.067749],[-5.144184],[6.520494],[-8.147639],[7.945757],[9.023021],[6.638981],[1.918258],[5.251864],[5.985989],[9.800893],[-2.952249],[-2.340246],[1.216503],[7.069367],[-6.067870],[7.007966],[5.709844],[9.461140],[9.200683],[7.166510],[-9.741007],[-3.104890],[3.541507],[3.551100],[5.984664],[-3.651513],[-5.526043],[-0.677747],[3.324252],[5.430517],[6.249714],[-7.062750],[-9.258957],[-8.190771],[-5.740050],[-4.749274],[7.945857],[1.590451],[0.798349],[4.074584],[8.700884],[-8.900276],[-8.929377],[-2.073364],[-9.929049],[4.992857],[-3.332144],[5.474020],[-6.851502],[-6.143710],[1.655105],[7.762493],[-7.350462],[0.565099],[7.100587],[-5.056084],[6.941216],[-0.701471],[6.251096],[5.067316],[-3.123560],[1.420089],[-3.106754],[6.249349],[5.590844],[0.467857],[6.984429],[0.907206],[8.322461],[1.479503],[1.371352],[-8.984744],[-6.289391],[-0.542784],[0.888638],[-4.812033],[2.592245],[-3.389894],[-3.387690],[-2.293802],[-7.792173],[-2.407546],[-7.149592],[6.839998],[-2.232481],[-0.263501],[-7.489673],[-1.816306],[4.940120],[3.651074],[-2.979571],[-4.583876],[6.369556],[0.260611],[6.374841],[5.612345],[-0.251784],[3.606480],[6.316437],[-4.970707],[7.786529],[7.961626],[3.402106],[-2.709481],[5.577786],[8.412803],[0.638654],[0.554796],[1.627653],[-4.333787],[-6.972637],[-4.605946],[8.346243],[5.057406],[-2.779010],[8.670062],[-2.564563],[7.187611],[-6.698500],[-9.015745],[7.490599],[-2.416782],[0.489197],[-7.610879],[-5.343173],[7.557174],[-3.569907],[9.952207],[0.034435],[4.792507],[6.846734],[4.546493],[8.541739],[6.683444],[5.444412],[0.517894],[-4.152903],[2.602030],[9.054459],[-1.735434],[3.983127],[-9.177665],[5.276004],[5.238247],[-9.287067],[-2.749534],[5.896009],[3.795184],[-3.233351],[8.474910],[-1.348093],[4.617331],[-8.032213],[1.602263],[-9.301050],[3.285089],[2.722010],[9.648282],[-2.214392],[-8.869971],[5.858840],[-1.303808],[-0.529459],[-6.739485],[-8.921517],[-1.503741],[-9.985644],[7.299858],[1.747617],[8.625483],[-0.537609],[8.224316],[-1.611823],[-2.792558],[7.272494],[-6.265400],[6.330364],[-2.343663],[-6.090976],[7.034601],[-9.763658],[-1.141050],[7.969389],[0.024790],[-7.221882],[-0.985124],[9.864845],[-9.071667],[-1.805948],[-6.986515],[1.803935],[3.737528],[9.591278],[7.016150],[-6.223402],[7.776958],[-4.144991],[8.056004],[9.463567],[-0.339984],[7.256445],[1.549521],[-5.223659],[5.231722],[-2.774140],[2.552827],[-7.444229],[4.075714],[-8.864997],[0.927519],[3.878041],[7.395768],[-7.086709],[4.516611],[0.436568],[1.771193],[-3.699091],[3.992252],[8.346089],[4.462368],[8.806123],[3.987580],[8.716294],[2.365900],[3.899570],[-3.911413],[0.739345],[0.801287],[2.769499],[-1.627101],[-8.892101],[6.048285],[-2.001023],[-1.145885],[2.465330],[1.811365],[-8.491019],[-4.444173],[1.784611],[0.203476],[2.793469],[7.523384],[4.124782],[-4.672652],[0.928857],[3.223492],[5.699486],[-2.529597],[4.508449],[1.805662],[8.008576],[4.061340],[2.365517],[6.337724],[-6.446817],[-0.683397],[7.256291],[-9.371631],[-2.501205],[1.220529],[1.074825],[3.705268],[4.423906],[-5.180802],[-9.595608],[-1.066653],[4.804115],[3.461446],[8.769580],[5.558106],[0.611872],[8.324813],[-9.364175],[4.265276],[2.933401],[-7.206418],[4.192181],[9.217027],[-9.235578],[-7.762078],[8.618250],[-7.145835],[-5.124243],[1.183427],[-1.971471],[3.439694],[-3.470718],[-0.414455],[6.969758],[6.942759],[-6.621524],[4.695305],[-1.395889],[5.362706],[6.989513],[4.385134],[-5.372966],[5.354327],[-7.452895],[-9.484224],[8.832022],[-0.380138],[0.355640],[-8.924974],[6.331037],[3.673884],[-5.356303],[4.985176],[8.615699],[8.926594],[-1.326625],[6.897906],[-6.430763],[-1.900084],[2.541237],[9.087243],[-0.641444],[7.111349],[2.124515],[-2.284419],[4.146289],[-4.874038],[6.215572],[-0.715118],[-0.325691],[0.237681],[6.217875],[8.770585],[5.109602],[-8.361327],[2.353468],[7.563917],[6.356530],[3.546867],[9.269954],[8.355740],[8.876521],[-9.502331],[-1.907709],[4.797308],[-5.338911],[6.333139],[0.544325],[4.708293],[-4.322629],[2.306419],[2.261400],[-5.301342],[2.747817],[7.770579],[5.340840],[-1.051104],[8.406591],[6.456814],[5.074950],[-3.773675],[8.891706],[1.363344],[9.653788],[3.445180],[-9.433789],[8.071215],[-8.831844],[7.603122],[2.131533],[-3.262259],[1.953727],[9.805442],[2.501859],[-7.246492],[6.567575],[-4.170680],[3.858637],[3.264100],[-8.936082],[-8.173233],[8.640262],[-5.931264],[9.268945],[-4.663010],[2.730565],[-3.962855],[6.237800],[2.646643],[-4.743565],[2.727435],[-8.227100],[4.234666],[-8.363883],[-0.600574],[0.041258],[3.624212],[-4.826201],[-3.396026],[7.255444],[-0.181323],[0.003808],[-3.483774],[-5.674835],[8.134057],[7.703006],[-4.902725],[-7.569490],[6.890259],[-8.730717],[0.073914],[2.744235],[1.485893],[0.113371],[8.929714],[-5.393110],[0.165946],[-0.411789],[-9.850061],[0.015755],[-0.978813],[-4.583393],[-2.844898],[-3.269329],[9.395804],[-3.952231],[-7.559740],[-6.542612],[4.453934],[-1.156905],[-6.919971],[6.202124],[-5.112560],[4.409570],[-1.552793],[3.147954],[-0.978037],[-2.823054],[-2.576028],[-6.458412],[2.951305],[5.984756],[-4.293727],[7.925515],[1.704602],[1.697882],[-2.786205],[0.179090],[-4.411513],[8.792685],[0.548714],[2.795381],[5.473965],[-7.089693],[-3.127871],[3.472820],[1.865849],[-7.917817],[-5.716692],[-5.161445],[7.072738],[-0.568876],[-3.344329],[-0.980767],[-8.577373],[0.947987],[-1.294282],[9.010076],[-5.330023],[-9.384851],[1.384237],[7.485606],[-1.971801],[-3.726945],[1.724563],[-9.178195],[-8.201657],[1.428198],[-4.881225],[-7.672865],[4.808729],[-7.299414],[-3.748984],[6.546479],[0.239109],[-3.554610],[-1.481350],[-8.746007],[3.932350],[9.108019],[3.825948],[4.650586],[-8.836385],[-8.952100],[-0.764770],[-1.533322],[-3.716006],[-9.987762],[-2.379649],[-1.511081],[1.458693],[-9.082992],[-5.164989],[-8.563026],[-2.742747],[-9.905415],[3.585913],[3.298057],[-2.594334],[-0.499967],[-7.019982],[6.495456],[9.103526],[-5.710325],[9.198696],[2.239017],[2.219305],[-5.975974],[-4.632814],[8.669995],[2.117781],[-4.014526],[1.013292],[-3.436140],[5.481363],[-2.933853],[3.585445],[6.252084],[2.239103],[9.371858],[-9.264582],[2.916010],[-6.094708],[6.613285],[-4.268656],[1.499376],[-6.065551],[-2.605518],[-0.514537],[-6.000394],[0.832810],[4.717263],[-8.761397],[2.721006],[-7.644240],[-7.803671],[-6.054115],[-7.681725],[-0.907568],[4.534134],[-3.458605],[-4.000474],[5.153266],[-1.948799],[1.422467],[2.819406],[-5.772503],[-3.789809],[7.916485],[-0.391694],[-9.608844],[-4.085357],[9.021008],[2.462193],[-6.228764],[-8.424879],[-5.176095],[-4.641358],[-8.195986],[8.312557],[9.873933],[-3.325194],[4.554808],[-8.370094],[7.480556],[1.259409],[7.739575],[-2.212698],[-9.092500],[-0.703088],[-2.404028],[-2.475337],[4.909083],[-4.052708],[9.967962],[-0.317256],[5.195436],[-4.957223],[2.143159],[3.951829],[-2.118262],[-7.038382],[9.855902],[-3.482076],[-9.448622],[-0.339217],[8.823273],[9.137796],[2.522070],[-2.286001],[9.140262],[8.225469],[-6.995875],[-5.702838],[-2.987393],[-6.828905],[-4.712191],[3.747022],[9.530694],[1.332250],[-9.733198],[-0.941413],[-2.394856],[0.286268],[-5.802638],[6.082261],[-5.613834],[-2.026102],[-0.538400],[-6.301776],[-6.516331],[2.603867],[0.455521],[-0.929558],[-3.158914],[-3.772590],[-7.322850],[3.691554],[3.509574],[-7.121107],[-5.453458],[7.299446],[6.833633],[6.792757],[-4.212616],[-5.310492],[-3.097578],[4.934847],[-2.861088],[-8.211580],[-3.614042],[-6.434404],[-3.338809],[6.748365],[-1.762374],[6.445082],[3.513723],[2.305260],[-4.201326],[1.657633],[-0.701144],[6.961225],[7.186782],[-5.553590],[5.385788],[0.076789],[6.328820],[-5.464987],[1.261236],[1.310085],[1.957040],[-1.663577],[-7.188931],[5.927413],[1.033020],[7.762423],[4.734388],[-5.320482],[-3.390787],[-0.733366],[-1.261982],[9.067316],[9.442766],[0.737405],[5.225821],[-4.032028],[0.834728],[-5.996455],[-9.740370],[-8.915931],[-5.402031],[7.464567],[-4.959202],[-2.407095],[-5.581762],[-6.639968],[-6.944046],[8.794889],[7.836842],[-6.566958],[4.526097],[-2.455037],[-8.865622],[-6.851649],[-5.107014],[-9.338968],[9.387919],[-2.324677],[2.998585],[-0.968205],[-1.476825],[-8.454532],[-1.471497],[-4.350125],[-5.534847],[-3.491816],[-8.225034],[-9.621142],[7.914370],[8.178795],[1.335971],[-2.252268],[-6.426205],[1.595738],[-7.830157],[5.683845],[-3.943247],[8.561870],[6.655249],[0.696324],[9.745967],[-6.956666],[-5.127362],[-2.671699],[5.103257],[6.683013],[6.521973],[1.944553],[6.700744],[4.888575],[-0.006533],[-2.594601],[7.049361],[9.833196],[3.115214],[-3.585706],[3.382645],[-8.199066],[-8.781907],[8.163612],[0.126519],[-1.217448],[4.967591],[-1.286347],[-6.362019],[-3.435393],[-5.399219],[-7.694130],[-1.573118],[4.852826],[-6.356372],[-8.047610],[-9.425254],[4.144472],[5.691409],[-8.861286],[1.039203],[3.693285],[5.993706],[8.246063],[-0.205780],[-6.396216],[-0.878065],[-2.677844],[7.903352],[7.157357],[9.687520],[1.477040],[-4.775846],[-8.276077],[8.003624],[-0.228479],[-2.846475],[1.103544],[8.646541],[2.381996],[-3.224687],[9.128147],[-9.229181],[-6.719762],[4.049305],[3.788958],[6.421251],[-6.771797],[2.717206],[-0.349303],[5.586219],[-6.911073],[-1.332442],[0.880358],[-0.845595],[9.737127],[5.755031],[-2.889981],[-0.100439],[0.691251],[-7.937138],[3.515389],[5.271663],[8.252729],[-1.516639],[0.540395],[5.731390],[3.626625],[-0.837578],[9.581447],[-9.633851],[7.957536],[1.134824],[7.944413],[-4.317395],[0.931469],[-8.676395],[9.783356],[-6.710517],[-7.357944],[-8.545256],[1.906436],[9.556204],[1.352373],[1.783960],[5.787444],[-3.425974],[5.565310],[-0.379492],[8.162414],[8.772390],[5.810827],[2.229214],[0.697622],[1.633394],[9.444795],[-7.488588],[0.137313],[0.445233],[2.135354],[-7.648820],[-4.567913],[7.437136],[-0.391907],[8.718001],[4.785535],[7.433141],[-4.916655],[4.692704],[-0.187009],[1.834366],[-7.844704],[-2.110106],[-2.801729],[-6.819923],[9.155358],[-0.915036],[5.333339],[0.131364],[8.380815],[-2.088523],[-4.273410],[5.201722],[-0.243660],[-9.639754],[5.579328],[-8.032081],[7.287035],[-8.922773],[1.698309],[6.341184],[5.036692],[-2.349170],[-4.275751],[-5.204514],[-3.733180],[-2.303467],[-8.427487],[8.557537],[-2.344272],[-1.863388],[-8.770376],[2.731034],[8.245143],[6.194111],[-8.035257],[2.282606],[-5.119845],[6.788063],[-2.775731],[-5.645740],[-9.310015],[7.299392],[-2.353414],[2.938546],[-3.901456],[-3.324003],[2.803376],[2.565296],[6.098653],[4.441462],[3.006253],[2.371512],[-3.974547],[-9.646952],[4.685097],[-5.433771],[4.782402],[-7.091755],[-8.096182],[-8.710870],[7.927695],[0.339682],[-0.380202],[-9.117081],[9.588142],[-7.928469],[-0.938142],[-4.833845],[-5.832163],[1.319950],[8.957502],[0.419070],[5.192708],[-7.423389],[1.068096],[8.910173],[-3.289580],[9.570927],[1.547084],[-0.999613],[3.879560],[0.675166],[8.081867],[5.392732],[9.975836],[5.967988],[-3.866284],[2.074593],[-6.000376],[2.968665],[1.797531],[8.807399],[-9.880308],[-4.847022],[-2.170585],[-5.545210],[4.035520],[7.795021],[-2.010760],[-4.508547],[-2.352673],[-2.337266],[-8.788104],[-2.947864],[-8.376592],[6.961013],[-8.689358],[3.810345],[7.166089],[-3.794562],[-5.464830],[-3.176947],[1.979015],[-7.330796],[-7.594960],[1.453949],[-0.510883],[9.097040],[7.545682],[-6.355699],[1.116285],[8.149002],[-0.798660],[-7.071751],[3.703657],[2.694635],[-5.067335],[6.621878],[2.917755],[9.302478],[3.311391],[-8.502549],[-7.854249],[-1.445702],[-2.357705],[0.161428],[-0.842787],[2.900680],[7.912309],[0.352392],[1.227437],[8.720220],[-8.675597],[7.099905],[-3.642920],[3.414719],[0.164256],[-8.537572],[8.445733],[8.068807],[7.595092],[1.768557],[-8.772508],[-1.438952],[8.518568],[-8.078558],[-8.514958],[-0.291564],[-8.730846],[-6.356831],[-9.666184],[-9.958792],[-6.373864],[3.997399],[-3.324553],[1.690196],[-8.054139],[5.506701],[4.533876],[-3.950770],[4.834484],[9.831414],[-6.483246],[-5.800692],[9.751159],[-2.873927],[-9.997727],[3.961098],[7.711031],[-1.731881],[-8.214035],[0.960453],[4.684073],[8.690189],[-7.925235],[1.890060],[-2.950035],[2.667484],[-7.418203],[6.186466],[-8.949487],[6.667255],[7.411947],[6.682297],[2.343840],[-7.211905],[4.785670],[-8.866983],[-3.703182],[-9.255677],[-6.628701],[5.329818],[-5.993794],[6.473329],[-6.483883],[4.185527],[-4.087761],[-4.637492],[2.567691],[-1.910250],[9.341295],[-2.147354],[-1.955874],[8.667133],[-0.841465],[4.708741],[5.517857],[1.068063],[7.146500],[-5.307633],[-9.871338],[7.439318],[-3.258561],[-7.154231],[1.775950],[7.974514],[7.934462],[-1.697296],[-0.241103],[-3.140756],[7.055448],[0.330204],[-1.100119],[-2.566174],[-9.793806],[-3.136008],[-1.915047],[3.884338],[6.546283],[5.925956],[3.234577],[5.803079],[-6.545167],[-8.517545],[-2.211092],[-5.817845],[0.403173],[-0.601405],[-2.685569],[2.072022],[-9.380862],[0.818907],[2.416025],[0.442780],[-9.586004],[-6.479118],[3.503706],[-9.754851],[9.444250],[4.972052],[-3.535231],[2.071859],[0.917276],[3.337316],[-2.352132],[-7.750587],[-4.615461],[-2.165153],[0.147373],[-3.387011],[-8.874667],[8.861014],[5.413749],[0.696828],[-4.866942],[-4.425192],[-7.647184],[-3.639732],[2.974218],[-4.268865],[1.420299],[-4.423727],[-4.347473],[1.917331],[9.291061],[-4.355207],[-1.562650],[6.371827],[3.707090],[-8.645738],[5.582564],[-9.208963],[-2.902396],[-7.625443],[5.485299],[-2.370041],[0.202193],[-7.606551],[6.379497],[1.746795],[-7.943890],[-0.725149],[3.621005],[-9.103198],[-6.682255],[9.438542],[5.297908],[-0.904363],[-4.327179],[3.962766],[8.603029],[-8.020066],[8.338808],[-8.887391],[7.162893],[6.475177],[2.510168],[-3.032373],[3.513661],[-6.056176],[-6.508768],[-5.411867],[9.781498],[0.395066],[0.521801],[2.832414],[-0.909652],[0.915532],[9.019589],[-8.360639],[-4.192347],[-5.614687],[6.603959],[-1.365118],[9.057614],[4.582537],[-4.411212],[6.696231],[-9.420948],[-1.058611],[8.210088],[-3.480286],[4.418374],[7.827876],[2.915867],[8.760858],[8.865046],[-2.121924],[9.947656],[-9.838152],[0.263568],[-6.968193],[0.443324],[8.192645],[-3.215670],[9.458326],[-1.945974],[-6.662491],[8.675842],[-9.729785],[6.315779],[-7.974094],[2.180059],[-8.794677],[-3.799476],[7.070226],[-8.219326],[0.780626],[9.588343],[2.347321],[-0.927970],[6.247528],[-9.455261],[8.905590],[-4.350808],[-4.252551],[9.293902],[-2.809663],[6.869296],[2.881819],[4.628307],[6.077433],[-3.382942],[5.266798],[-7.181435],[-4.959777],[1.665509],[7.442774],[1.558536],[-4.396887],[-7.750139]], dtype = "float32")#candidate|2059|(1344, 1)|const|float32
call_2056 = relay.TupleGetItem(func_751_call(relay.reshape(var_2057.astype('uint16'), [1, 10]), relay.reshape(var_2058.astype('uint16'), [10, 10]), relay.reshape(const_2059.astype('float32'), [1344, 1]), ), 1)
call_2060 = relay.TupleGetItem(func_755_call(relay.reshape(var_2057.astype('uint16'), [1, 10]), relay.reshape(var_2058.astype('uint16'), [10, 10]), relay.reshape(const_2059.astype('float32'), [1344, 1]), ), 1)
bop_2075 = relay.less_equal(uop_2054.astype('bool'), relay.reshape(bop_2049.astype('bool'), relay.shape_of(uop_2054))) # shape=(11, 11, 8)
uop_2078 = relay.asin(bop_2075.astype('float64')) # shape=(11, 11, 8)
output = relay.Tuple([call_2056,var_2057,var_2058,const_2059,uop_2078,])
output2 = relay.Tuple([call_2060,var_2057,var_2058,const_2059,uop_2078,])
func_2085 = relay.Function([var_2047,var_2048,var_2057,var_2058,], output)
mod['func_2085'] = func_2085
mod = relay.transform.InferType()(mod)
var_2086 = relay.var("var_2086", dtype = "float64", shape = (11, 11, 8))#candidate|2086|(11, 11, 8)|var|float64
var_2087 = relay.var("var_2087", dtype = "float64", shape = (11, 11, 8))#candidate|2087|(11, 11, 8)|var|float64
var_2088 = relay.var("var_2088", dtype = "uint16", shape = (10,))#candidate|2088|(10,)|var|uint16
var_2089 = relay.var("var_2089", dtype = "uint16", shape = (100,))#candidate|2089|(100,)|var|uint16
output = func_2085(var_2086,var_2087,var_2088,var_2089,)
func_2090 = relay.Function([var_2086,var_2087,var_2088,var_2089,], output)
mutated_mod['func_2090'] = func_2090
mutated_mod = relay.transform.InferType()(mutated_mod)
const_2140 = relay.const([[[4.863425,8.614720,-0.360445,-3.883910,1.372955,0.659691,2.704811],[-3.442900,-9.020725,-9.143948,-1.077669,1.618551,-0.353994,-7.627769]],[[-4.553167,2.009944,7.239861,-0.501207,-5.953650,1.675957,-9.559163],[2.720469,-9.910952,5.574760,-8.815181,6.761641,-2.336198,5.699252]],[[9.671988,3.178814,2.502425,7.974293,6.470738,4.664833,9.427433],[8.437514,2.913020,1.596582,7.937215,-6.894802,-1.010457,-6.976562]],[[-7.829073,5.382411,6.351659,4.222630,-6.854684,-9.993642,3.104210],[5.875814,-4.275014,-5.449579,-2.228605,2.582503,-1.610785,7.096720]],[[-1.836456,0.960166,5.833524,-7.433117,2.455211,4.221603,-9.815381],[3.450533,0.249526,-4.739552,-4.283887,2.269196,9.297358,-9.162400]],[[0.540750,-6.171371,9.499957,-0.480708,7.429736,5.977531,8.387408],[-2.444475,-6.098418,4.035796,-5.285777,4.975309,-5.275802,1.678518]],[[-3.705727,5.814082,0.412181,9.195315,7.134943,2.794616,-4.857947],[-1.344179,-1.328327,3.459518,-6.041862,-3.442510,9.636464,2.103113]],[[6.469374,5.264648,-3.441701,4.746664,-2.162041,-0.331936,-5.135187],[-4.860091,2.871631,-5.463609,4.569209,-9.625348,-1.843013,0.459338]],[[5.392585,1.873555,4.851348,-7.601103,9.847359,-1.005782,-0.664020],[-2.632043,-2.897857,2.121045,0.548443,5.137004,2.798016,-7.725875]],[[4.532493,8.637825,7.186589,7.868314,2.332734,-5.327287,8.887299],[5.450194,-5.819410,-7.577916,-9.595579,-9.886554,-3.027643,3.249861]],[[5.801385,4.342903,1.682001,4.989493,-0.134268,7.727508,-0.953661],[-8.108326,-7.640452,5.982265,5.930952,-0.416184,8.043053,6.327472]],[[-8.828350,-6.810771,1.236283,-4.213146,-4.137340,7.712001,-9.718487],[8.466523,-6.661971,-6.905585,0.520045,6.304218,-1.729599,-1.546967]]], dtype = "float32")#candidate|2140|(12, 2, 7)|const|float32
var_2141 = relay.var("var_2141", dtype = "float32", shape = (12, 2, 7))#candidate|2141|(12, 2, 7)|var|float32
bop_2142 = relay.mod(const_2140.astype('float32'), relay.reshape(var_2141.astype('float32'), relay.shape_of(const_2140))) # shape=(12, 2, 7)
func_751_call = mod.get_global_var('func_751')
func_755_call = mutated_mod.get_global_var('func_755')
var_2146 = relay.var("var_2146", dtype = "uint16", shape = (10,))#candidate|2146|(10,)|var|uint16
var_2147 = relay.var("var_2147", dtype = "uint16", shape = (100,))#candidate|2147|(100,)|var|uint16
const_2148 = relay.const([[2.638403,-0.244427,8.024453,-9.924251,5.337689,5.533845,9.980462,0.953626,-0.145935,-7.867756,9.249174,-4.931577,-9.547377,-5.651143,7.826243,-2.813715,8.769911,-6.206128,-8.727061,-5.100451,-4.098634,3.003775,-7.659251,9.676964,3.341302,4.234344,-4.453617,3.890335,9.824309,6.238608,-0.604287,9.092332,4.067637,5.870343,-1.583822,5.128534,4.559573,-3.684528,2.960606,-9.298180,-4.598472,3.470178,0.190337,1.534600,-0.530044,-5.962550,4.698048,-0.210872,7.047085,-3.178303,-1.131865,2.651750,-1.669135,4.526494,3.504913,-4.182982,6.861888,-6.826189,-6.722913,4.325815,6.859089,-4.214668,-9.609036,9.068046,-3.091771,0.255252,5.280296,-2.247620,0.271669,4.652730,5.059202,-0.968608,6.405687,-6.283306,-6.594431,-8.402768,2.655023,-0.745700,-5.782651,2.313760,1.566599,4.612640,0.209524,3.011590,4.953111,5.441023,-2.766214,-7.625132,6.011642,-3.062058,-2.068691,5.787390,7.286013,0.365330,5.636024,-6.102197,-3.418463,5.863037,0.206743,-3.894366,2.095872,3.727858,2.439626,1.054001,-8.456872,-1.994790,-2.783267,-4.023781,-6.683937,2.873313,8.207847,-3.154842,8.046703,2.132586,-6.931400,-1.583581,-4.861772,-6.155903,8.404420,-2.027801,8.701942,-5.406652,-4.728502,8.976073,6.201606,-4.657936,-5.457340,-1.414950,-7.637678,-9.300913,9.435191,-0.080517,-3.673024,8.386640,-3.460886,-8.354379,-7.443083,6.514563,1.251828,5.496557,-5.180614,4.822547,5.374601,-2.933310,-4.632328,-4.917477,2.476848,0.636210,1.040856,4.674032,-3.569430,9.499588,6.630477,9.696268,7.127597,4.289245,-4.827173,-9.838538,-5.055159,8.671387,3.392623,-8.379842,-1.704988,7.083422,-7.305107,3.957740,-9.667932,1.177192,6.724800,-0.766366,-0.036899,-8.114523,9.121545,-3.546545,-6.521404,-4.317532,1.413682,-0.209256,-6.452919,-1.479965,4.423299,8.013832,-2.597523,7.627445,8.170741,2.475056,7.892307,-1.595266,-9.071265,-6.853137,-0.607178,8.800400,1.090163,1.057638,0.771433,-5.484499,6.625703,-8.441120,-1.194071,2.389431,2.515984,9.320536,7.743177,3.188823,-9.106712,-7.540218,-7.510151,9.274640,5.976500,5.425217,-4.958892,6.045551,2.719299,1.208397,9.235560,6.957711,9.776629,4.807991,-6.661169,7.282393,-6.295268,4.225480,3.392597,-6.995221,3.803445,0.527663,4.670174,4.752748,-7.275652,1.322802,-3.937404,-0.230561,7.946419,-2.544355,1.941464,4.418641,8.992736,-6.148190,8.703686,7.970402,6.037847,-0.400180,-2.105082,4.733815,-0.236728,-7.672761,-5.274697,5.723368,0.092589,8.499777,9.874396,-4.699469,-8.406517,6.677302,-9.610359,-0.571656,1.311650,-5.951878,9.229016,-3.882056,-7.805406,-0.973891,2.743114,7.814911,9.344649,1.021129,1.249264,6.033696,4.661729,4.395542,2.026330,2.391821,-3.730784,-5.009162,5.068690,0.254689,-7.468866,-3.314730,4.212746,-4.922444,7.568350,9.683525,5.286719,-0.213899,1.201903,-6.535848,1.083047,3.657839,-1.517354,3.325664,-4.023369,5.030771,-3.822375,3.700408,8.409703,-9.925551,1.739411,2.416697,-9.180774,1.248895,4.968288,4.994424,7.472531,-2.524476,-6.526193,-2.284116,2.276315,2.629021,9.760404,7.959605,-6.900341,6.179039,-7.373576,1.978384,-2.328296,-2.652124,-2.124166,5.585035,0.286726,3.453793,2.804972,-8.142915,-9.721231,8.434734,-2.599774,-7.391371,-9.233058,2.253717,6.965341,-4.156072,5.878963,2.999046,-5.517461,-0.135373,6.736418,1.354010,4.516466,7.505196,-3.745848,8.871226,7.060925,4.750321,-2.994426,-1.260022,4.156400,2.043094,-1.655548,8.842647,5.605913,-4.733169,3.929888,-3.929677,8.934306,-3.288960,-5.341455,2.818844,-1.918133,3.317979,9.884363,-8.341107,-9.378550,4.104996,-6.814409,1.250828,-1.809184,-9.826404,-5.709329,-0.224302,-7.046853,6.979587,4.952446,0.681703,2.096495,-9.492660,-5.711129,-4.013522,-2.877280,1.672426,-2.014373,0.243607,-8.614944,-2.590893,-3.739321,4.653680,-2.633364,1.202368,7.519712,7.159581,2.887096,1.365506,-0.534974,3.984858,0.650314,4.241674,1.577580,7.644740,1.889428,-4.760608,-4.173807,-8.779606,-7.606708,-2.838914,-0.389350,7.910812,3.282525,-4.852187,-3.901759,8.744714,-4.122534,9.556565,8.335302,-2.832696,-9.130667,-6.323832,-2.868257,3.622641,-2.637655,-8.379211,7.190531,-2.423781,-6.930416,-8.832783,-7.398209,-4.246706,7.860019,3.481406,-1.451052,2.703991,-6.909256,-4.766264,-1.327763,-6.300699,5.616150,-0.936609,-7.061364,-0.610320,8.795516,6.879306,-6.695128,-2.690843,3.601410,-6.495224,1.548382,-3.516342,2.645617,-3.834726,0.911443,-5.005396,4.352431,4.159775,4.156942,-4.517271,1.193493,1.082064,-3.616763,3.443399,5.169360,4.634478,5.347896,-9.922124,-8.050625,-7.283103,0.754710,6.866569,8.035840,-7.379907,-9.375596,0.550893,-8.627984,1.856396,9.038413,-9.506653,-0.972300,0.369638,-4.074585,-7.943107,9.902102,-7.366304,3.586275,4.658054,-7.949002,8.931220,2.394021,-8.465938,6.813942,-9.973412,-5.646354,5.288613,-0.136397,-0.242978,2.797039,-0.858615,-0.357237,5.131929,-8.655271,-2.402538,6.424013,8.688403,3.571118,-5.243170,9.220543,9.821704,-4.220384,-9.267710,4.953755,3.925539,7.774532,9.864597,-8.359497,0.296168,-4.621576,9.527607,9.945636,-3.280794,4.566267,-4.975982,5.329431,-7.523743,-7.118800,-7.413106,-8.789510,-7.120712,1.766977,5.106549,4.994884,-6.791272,-1.571948,8.955908,-9.216039,-1.706072,-7.733474,-3.546726,-1.090904,8.093338,3.083372,1.422738,8.546454,7.774229,4.457333,-9.812514,4.611831,-5.897874,4.242892,-2.964154,6.804487,1.031343,7.121367,8.849137,-6.408790,-5.863340,0.447975,5.323144,-7.459110,2.618602,1.515824,-0.795427,9.190810,2.149175,-5.415788,-1.211237,-6.255901,5.313536,-6.723829,-7.924854,-9.116858,-5.009959,-6.510846,-1.148022,5.855991,-4.558460,-5.196251,5.734512,-0.690187,-0.850695,-7.616552,-0.722381,-6.804472,-9.061867,2.464022,9.307528,-6.651846,0.934898,-0.086196,9.172640,2.311981,-5.293076,-8.466380,1.438638,-7.031264,2.587734,5.579630,-2.234218,9.513938,-1.072307,5.179557,-7.419175,5.779365,-5.941315,-0.998306,1.862859,0.282951,6.742727,-1.377750,-7.132242,-0.374162,8.350658,-4.780051,8.788727,4.676121,-0.215841,2.205366,-9.514217,-9.481839,-1.560590,-5.308890,-3.664043,-5.116607,8.130169,4.116901,2.105920,5.321196,3.754715,-0.921777,5.136506,-9.741879,-7.642536,0.587559,-0.164814,2.365268,-6.129382,8.381506,-9.387970,-3.960027,-0.994960,4.152344,6.401409,-5.137113,-6.030562,9.518490,-2.911798,1.063060,5.033313,9.125688,-5.940795,3.774754,-3.650773,-7.841102,-2.296177,-4.993223,-4.110137,-2.305538,-2.729254,-1.657100,-7.026373,0.995242,6.540476,2.037283,6.105582,-9.460600,-4.944730,-8.198467,-2.146736,0.006161,3.385446,0.510047,6.922453,3.455257,3.160881,0.182064,4.595821,-3.132678,4.962974],[4.728609,2.600056,0.048774,7.876359,-7.009360,-0.618344,-1.157441,-2.159168,8.094075,-6.529703,2.691705,-6.061021,3.759730,1.504641,-6.024020,5.739150,8.859307,9.154694,-3.761440,-7.759477,8.282719,-0.944396,-7.795443,5.919369,1.069070,-6.795223,5.134550,3.845280,-9.877874,3.632656,1.873707,9.813980,1.834295,5.374303,3.508913,-9.122392,-7.186782,5.905202,1.305130,-3.346934,-7.352467,-9.770616,7.119944,-0.318783,-3.195035,-2.666143,-9.436903,3.801135,3.905774,-2.891741,-5.007727,9.378059,3.415168,-6.211728,7.979462,3.353511,5.564727,-3.554571,0.389975,3.951944,-1.599550,-3.563365,8.969913,-1.549750,-2.795263,7.223600,2.659576,-2.287231,4.072612,-2.897028,9.341013,-4.136692,2.907265,-3.465383,5.067915,-3.093231,9.252452,8.849611,-9.668529,4.567154,-5.253538,-2.766560,5.075414,-9.572703,1.638511,-7.758264,9.579732,1.017991,2.116288,9.451328,4.141639,-9.708671,-4.644275,1.345783,0.268041,-4.805935,-7.444129,8.836987,1.164189,-4.362979,-4.663048,4.980839,-1.087997,-6.400046,-6.926803,-1.631365,-4.994608,9.685597,-5.930536,8.701806,6.812234,3.743721,-9.085236,-9.277308,0.192100,-8.893441,2.247425,9.654545,7.756461,2.644368,2.873882,1.089951,-5.112796,4.723132,-5.844785,-2.523064,-7.917791,4.971419,-2.115024,-0.417768,-3.629770,-4.914439,-7.867202,5.449283,8.559432,-6.136279,6.361695,-1.631872,-4.255925,-2.214765,9.169752,-3.768868,5.847005,-9.904896,1.980578,6.630781,-6.027062,5.380730,5.970457,-3.807184,3.418414,4.033755,-0.576088,-9.379082,7.429067,3.606077,9.190847,-4.634493,5.314765,4.765194,9.613240,9.336064,-6.701581,7.935981,9.121884,-9.577288,-6.662612,7.801576,-5.690577,0.018466,7.617143,-0.426097,-6.233882,9.463220,0.278528,8.320054,1.255782,-2.097475,1.479566,0.402642,8.102342,-5.303640,6.667674,2.380154,2.689556,-0.116913,7.537122,-4.669115,2.622437,-7.422382,-8.054890,-5.634828,-7.067474,8.911135,-9.998947,-9.508424,-3.430229,7.593194,4.025627,8.061110,7.927074,2.664571,-7.596304,-7.495736,6.141248,3.982214,-2.027594,9.329215,-4.422286,9.291473,5.776647,0.873004,-6.358094,4.281780,9.949366,-1.109930,-4.394591,9.867868,3.499305,1.287585,-9.152042,-0.391238,-6.520863,7.536416,-8.677258,1.268045,7.631603,-5.452846,0.149695,9.312333,-0.560948,4.618357,1.176391,-2.943514,-7.084423,4.387186,-8.409111,-3.521580,9.599711,5.424212,-2.096612,3.192533,6.851086,3.461146,5.416377,4.480466,-3.185224,1.023933,-8.750262,3.201428,4.432476,2.695557,-5.542572,-5.218961,-7.218624,-2.088638,-9.017190,-7.534474,9.710960,-4.500615,-0.014434,-3.461032,-4.887382,-5.785777,0.016938,2.328457,-3.673046,-5.856589,-0.783714,-8.398875,0.528349,3.189995,-7.504480,6.469198,8.019198,-6.647366,-7.983576,2.307137,-4.105990,1.922787,1.870128,-1.574573,3.084516,-2.317349,2.527743,-6.912773,3.699646,-4.586443,2.143603,8.565492,2.198099,-2.075850,2.684044,-1.878295,9.772460,6.494067,3.116296,-9.522698,8.063147,-2.625163,0.084938,9.153111,3.335282,-0.663626,4.918977,5.582049,-5.387166,-3.824863,0.743690,2.121450,-4.532030,9.681768,7.888564,5.073623,5.440330,1.819059,-2.144388,7.849674,5.864145,9.326470,-4.550978,1.711473,-7.070494,-6.081303,5.060674,1.948139,-3.917160,4.778668,-4.604054,-1.898644,-4.095697,2.388699,-7.219888,-4.456350,-7.506251,4.289887,5.087946,9.280214,-7.202822,8.511591,-1.917282,-1.798638,-4.699518,-1.071370,-8.827032,-0.358274,-4.566044,2.230232,-9.495008,-8.569798,4.451513,0.447289,5.252350,0.269833,-6.372940,8.184693,0.603587,-2.143979,8.363603,-2.198205,7.237866,-5.907772,-7.996056,3.270348,-8.537676,-5.947960,5.398408,-6.913584,-4.226209,-4.807399,-2.830556,8.733696,9.294242,3.266670,-0.105191,-5.037208,-5.598082,-5.810487,6.123689,-8.399471,1.342648,9.975916,-8.166367,0.816919,6.263554,-2.761773,2.629064,3.823353,8.092757,7.790413,4.433654,4.879809,3.307350,-7.742592,0.589421,-4.091463,2.167214,1.248020,4.944090,7.730849,5.719501,-3.659169,5.143212,5.729193,5.875194,2.865235,4.798258,-0.809927,-3.814718,4.059717,9.695879,-7.678859,8.326116,1.922489,5.861003,-9.237271,-0.910790,6.558466,-5.620634,-6.792470,-4.134444,-7.261941,-5.230852,-3.239123,-3.412844,5.171059,7.994977,-5.371167,9.243733,8.770903,-3.437371,6.763070,-1.548939,0.819421,-3.932801,-7.925748,7.821460,-5.061120,-8.318408,-6.207775,-8.597125,-7.302395,8.562265,-2.961803,-8.160470,9.198526,0.583691,0.388264,-0.305432,3.787456,-8.464350,7.306539,-7.076894,-5.146171,-9.168533,3.457233,-5.616626,-7.218708,1.375438,-0.735890,-0.983435,-9.318474,4.765466,3.018153,-4.475361,-7.020481,8.851141,-1.742139,1.923812,-0.433512,8.304235,-5.476243,8.981362,-6.125041,2.066923,1.571665,-1.213565,-5.321521,4.311810,7.653199,-4.737686,9.942785,1.516774,2.021635,-5.498408,-8.802053,-8.951980,0.050025,6.637080,-0.638428,-1.092868,-7.639077,0.382984,-9.642821,2.971802,0.786787,3.408344,4.687636,-5.330795,5.720903,-8.743585,5.479408,-2.091255,-6.356521,-0.226459,4.909833,-7.277436,6.057558,-8.127777,0.112235,-0.075877,7.404731,0.964341,-2.192474,8.144240,-9.056683,-5.961308,-7.807617,-9.877395,-0.800514,5.246433,2.459911,-3.441938,-6.174202,9.431748,-2.619462,-0.485084,7.275951,-7.257632,6.494311,-2.109245,7.748425,7.952411,4.818872,-4.226638,-3.740243,9.319899,-2.499941,7.499173,-6.713348,-7.807781,-5.339598,-1.118267,-8.375012,1.660629,5.172370,9.910068,-5.519162,-2.077549,-9.599016,-0.191655,0.826703,-3.913055,6.432598,-1.095857,-0.802772,-3.209546,3.777601,2.628367,3.229073,8.598210,-5.112074,5.754411,-2.025997,-8.942379,-3.477050,8.921937,8.553348,5.856374,7.495489,-6.540590,-5.468852,-3.203184,-3.882944,5.359391,7.439605,-9.580362,4.244406,-8.300965,4.343645,-9.338675,5.899048,4.222294,-0.918568,5.932897,-0.401742,9.266808,-0.583690,-0.324651,7.978525,-3.716943,0.390225,-1.908808,-0.225773,-0.131559,-7.308145,-3.779957,-5.257918,-5.880976,-9.636483,2.120759,4.437442,-8.452457,-3.912545,-8.651681,-7.759257,-8.851363,8.036543,5.838709,-9.288772,-2.367720,-5.712879,-3.458986,-4.181705,5.330386,4.467455,-9.420565,-9.394386,-5.345540,5.177498,-7.967724,-0.428382,8.277922,-4.385631,6.242319,-7.151367,7.139614,-0.347572,-2.583797,-6.934896,-4.514605,-3.869945,-1.510023,3.139256,1.769777,-2.051232,-6.783265,5.974859,-3.853008,-6.119511,-4.743936,6.827532,-2.470180,3.927279,0.418694,-2.432432,5.804683,-0.053439,6.679149,6.894401,-1.900063,5.890067,-3.738386,9.533256,-5.617125,-1.846801,-0.322445,-7.649207,-4.179073,5.353606,2.528584,4.734039,-7.680527,-6.068700,3.069571,0.977502,4.688696,-6.060266,8.015269,0.317665,-4.874924,-3.263130]], dtype = "float32")#candidate|2148|(2, 672)|const|float32
call_2145 = relay.TupleGetItem(func_751_call(relay.reshape(var_2146.astype('uint16'), [1, 10]), relay.reshape(var_2147.astype('uint16'), [10, 10]), relay.reshape(const_2148.astype('float32'), [1344, 1]), ), 2)
call_2149 = relay.TupleGetItem(func_755_call(relay.reshape(var_2146.astype('uint16'), [1, 10]), relay.reshape(var_2147.astype('uint16'), [10, 10]), relay.reshape(const_2148.astype('float32'), [1344, 1]), ), 2)
uop_2151 = relay.sqrt(bop_2142.astype('float64')) # shape=(12, 2, 7)
output = relay.Tuple([call_2145,var_2146,var_2147,const_2148,uop_2151,])
output2 = relay.Tuple([call_2149,var_2146,var_2147,const_2148,uop_2151,])
func_2161 = relay.Function([var_2141,var_2146,var_2147,], output)
mod['func_2161'] = func_2161
mod = relay.transform.InferType()(mod)
var_2162 = relay.var("var_2162", dtype = "float32", shape = (12, 2, 7))#candidate|2162|(12, 2, 7)|var|float32
var_2163 = relay.var("var_2163", dtype = "uint16", shape = (10,))#candidate|2163|(10,)|var|uint16
var_2164 = relay.var("var_2164", dtype = "uint16", shape = (100,))#candidate|2164|(100,)|var|uint16
output = func_2161(var_2162,var_2163,var_2164,)
func_2165 = relay.Function([var_2162,var_2163,var_2164,], output)
mutated_mod['func_2165'] = func_2165
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2272 = relay.var("var_2272", dtype = "float64", shape = (2, 16, 3))#candidate|2272|(2, 16, 3)|var|float64
uop_2273 = relay.sigmoid(var_2272.astype('float64')) # shape=(2, 16, 3)
uop_2275 = relay.cos(uop_2273.astype('float64')) # shape=(2, 16, 3)
func_864_call = mod.get_global_var('func_864')
func_866_call = mutated_mod.get_global_var('func_866')
const_2281 = relay.const([-10,-9,-1,4,-5,7,-9,5,4,3,6,-6,1,5,3,-6,-2,-3,-10,-9,4,-10,3,-4,-9,-1,-8,-1,-6,-5,-6,-1,-6,1,1,-10,4,-7,7,-5,10,-3,-5,-9,1,-2,-7,-5,-9,-10,6,5,-1,-8,8,5,1,6,2,-1,-1,10,-5,-2,1,5,3,-9,4,5,5,8,7,4,-1,-4,7,2,-9,4], dtype = "uint16")#candidate|2281|(80,)|const|uint16
call_2280 = relay.TupleGetItem(func_864_call(relay.reshape(const_2281.astype('uint16'), [5, 16, 1])), 0)
call_2282 = relay.TupleGetItem(func_866_call(relay.reshape(const_2281.astype('uint16'), [5, 16, 1])), 0)
bop_2303 = relay.not_equal(uop_2275.astype('bool'), relay.reshape(uop_2273.astype('bool'), relay.shape_of(uop_2275))) # shape=(2, 16, 3)
uop_2310 = relay.acos(bop_2303.astype('float64')) # shape=(2, 16, 3)
func_1505_call = mod.get_global_var('func_1505')
func_1512_call = mutated_mod.get_global_var('func_1512')
var_2317 = relay.var("var_2317", dtype = "int32", shape = (8, 24))#candidate|2317|(8, 24)|var|int32
const_2318 = relay.const([5,9,1,5,-5,5,-9,3,-2,-2], dtype = "uint16")#candidate|2318|(10,)|const|uint16
const_2319 = relay.const([6.555121,8.324638,-5.226637,-5.120729,0.366207,7.865689,-5.276249,1.340604,0.346608,-9.686207,-6.420799,3.702886,-7.331712,-7.428094,6.239948,0.492750,-0.051878,-8.803640,-2.111970,-7.666909,-3.535337,-8.350438,6.962964,-0.795480,-4.685785,3.066586,3.708351,9.065501,-8.632612,-3.604220,8.745773,-1.239328,-6.105549,-1.209024,7.278365,-8.748489,-8.596318,-9.258546,3.079185,-7.157817,4.662360,-2.554079,-1.557009,3.676479,4.917959,-9.950511,5.889949,9.828746,0.898939,-4.575103,-6.466354,-1.852063,4.316382,3.926056,-5.494687,-0.412384,5.141506,-0.508857,-7.892545,-1.393617,2.586467,-5.479313,-0.444903,0.972685,2.422522,-6.621882,-3.549917,-2.149876,-4.636225,-2.554139,6.920960,-9.226572,6.696145,-1.997158,-2.571253,-7.935978,9.720028,-1.988771,-1.189290,-5.401363,6.672843,7.850750,4.134532,1.970593,6.385200,-2.656994,-8.855862,7.855306,-6.396081,2.927786,5.844191,-8.701639,-3.954856,-8.498224,-2.170838,-5.119021,8.577027,-6.892109,2.605921,-4.663899,1.203450,1.606972,-7.657925,-5.360485,-2.145151,6.838312,2.161852,6.616885,8.006539,-7.893355,-8.205886,8.647713,-0.525374,-9.348207,-8.911248,4.159557,-4.464086,3.355677,7.746314,1.315805,-3.636961,0.044613,-7.843179,7.234680,-6.165383,-9.609491,0.946792,8.060957,0.157345,3.316307,-0.261227,0.749436,-3.548748,6.815144,-3.957632,1.089179,-5.835722,-4.234354,2.823479,-1.571368,1.802185,-2.084638,-0.237202,6.132729,-5.857511,9.628005,2.410715,6.384346,-7.607662,5.059939,1.747801,8.722346,-8.809256,-3.659005,8.748963,8.795342,5.842602,0.276862,8.519429,9.996324,-9.562199,0.161671,-4.013307,0.778611,6.578351,9.137018,5.345103,-4.564344,4.427716,-5.541801,2.055305,9.137572,9.531941,5.323581,8.740711,-7.501713,8.402811,6.310027,-8.709991,-7.823225,-3.411271,-1.585530,-5.796277,8.594074,-2.517735,0.868142,6.252508,-3.623806,1.943288,-1.315647,7.837292,-5.977950,-3.994273,-2.475534,-8.413418,-2.286267,-5.789945,5.935199,-4.805384,-5.753222,-1.592789,-1.752004,0.777442,-6.235620,-5.107783,5.507371,-0.188286,3.286977,-9.358855,5.029832,-1.209177,7.561200,0.245030,-7.318000,3.442662,-5.604982,-3.296116,6.588144,2.355279,-2.049982,-8.599940,1.094526,-5.720238,1.678373,-5.262451,0.589755,6.094660,-5.412563,1.420850,-9.230830,9.492994,-4.475067,6.722153,1.850385,-6.388626,7.052997,-4.402837,4.406477,6.539998,8.378207,1.507398,-6.475049,1.541712,3.081156,0.138896,5.705146,-4.562564,-3.102298,8.303749,6.835308,-8.946924,5.408344,3.484366,0.759472,7.232334,7.139254,8.676892,6.675377,-9.027588,-5.299277,-2.116408,-9.025405,0.735630,2.301526,0.260919,-2.091292,4.264637,-7.546183,-5.169286,0.014668,-2.135472,5.296125,-9.253417,-4.751287,6.275277,7.164797,-8.676855,4.238090,-6.540828,-8.489320,1.149717,4.442681,-8.247943,1.363113,9.161096,9.226153,2.996770,-7.456595,9.097381,-8.004814,4.083271,8.555232,-3.681319,9.941789,7.878177,-7.619807,6.777007,0.269469,3.302596,-8.422011,1.842988,-9.494588,-0.196925,-1.881514,1.072161,5.356413,-7.587012,-9.285873,7.154235,-2.151002,0.128179,8.381581,-5.406448,4.327685,7.294323,2.535734,8.606793,-4.232348,-2.339426,2.173081,8.155716,-7.520781,0.883886,-3.444067,-0.206892,2.855419,2.959660,-5.957787,6.900128,7.400594,-7.839698,2.797273,-8.621899,3.601343,0.711739,-8.648947,4.719046,-2.796348,5.387763,4.784832,1.437154,-9.533188,8.568560,5.885705,-5.137269,-5.065233,0.889419,-1.199030,1.615069,-4.811040,-4.183467,4.752179,9.842151,7.305010,3.061180,-2.046701,8.188681,6.696869,-9.836168,-2.456040,-9.092381,0.884816,-3.340299,6.336345,8.031805,-7.904175,2.293585,-0.104394,-9.698690,1.190782,-3.449477,-2.335555,-5.074437,0.209654,-2.200550,4.681373,-0.382826,-4.010499,-8.422812,-5.149943,3.419889,-6.048598,-6.900939,6.815174,-5.692501,-1.170193,2.644215,-6.722493,6.216026,-9.970348,7.281981,-6.898754,-6.702741,7.776964,-8.978556,-7.355304,-1.711945,-5.812579,7.516600,7.538169,2.062058,1.827326,3.391365,-9.480113,3.516586,-9.810226,3.981132,-5.134520,-4.743598,-3.175512,2.516599,-7.528219,1.751218,-4.238883,5.123063,-4.471385,-2.379974,1.710088,-9.358097,-5.515361,-6.194210,-4.329679,7.422070,7.364929,-0.894367,-9.455692,-2.592574,-8.359519,-2.206470,5.170166,-8.784698,-3.852355,0.014725,-0.514816,8.523589,2.241600,-8.848008,9.431765,-0.936372,0.340657,3.688716,-4.298386,-1.686202,2.547135,0.393715,-3.242449,7.700277,-0.117499,-7.805684,-5.348923,2.099254,2.501449,1.468151,9.624011,7.916337,3.726793,3.731400,5.490711,-2.848656,-6.474610,3.739487,1.259583,5.149826,7.488329,9.595824,7.393301,2.930776,-4.218007,-9.607969,-8.558015,-4.183958,-0.918619,2.734288,3.168948,-7.653049,7.013040,2.615318,-2.264778,1.306903,-4.758005,3.577573,4.137463,2.104439,-2.914253,-2.431447,5.976773,-1.938341,-3.901632,2.463818,2.255354,3.388850,0.429647,1.824433,5.225732,1.800652,8.786910,0.043617,1.291082,-3.967765,-8.870465,-8.059885,8.270529,3.939953,-9.484962,-3.042170,7.753425,1.162414,-9.696697,-8.126068,3.551210,5.647502,4.628484,0.867153,5.000444,-5.353879,-4.345454,-8.358591,1.793520,4.367599,-3.500424,0.575544,6.553769,2.568881,6.392056,8.010576,1.707759,-6.932149,-9.829507,-0.953130,1.763683,2.316468,5.025931,-7.090936,-3.588997,8.940323,6.025677,-2.343457,1.734186,-2.035376,5.983613,8.683842,-3.498330,0.355288,3.783291,8.017180,-9.857965,1.686577,-1.004616,-1.229297,6.264331,3.245279,-1.855293,-9.814200,4.930209,4.539024,-7.985522,-0.191196,-2.889446,2.280695,4.708932,-3.772738,-2.749148,2.653469,2.617505,3.892258,2.913990,9.359411,-9.188282,5.732423,-8.313254,-0.821209,2.899240,-0.570535,3.252990,-1.072611,-9.768645,-9.233686,-1.410439,5.604866,-9.501948,-6.465001,7.043610,3.245738,4.498739,-9.851651,0.416863,1.967444,2.683589,-5.447054,5.481557,5.435771,-9.409037,-6.535010,6.931387,-9.647444,-8.518451,-1.698196,8.246431,7.532570,-1.488382,-8.005996,8.710004,3.945332,6.830787,7.607757,-0.995516,-5.792854,-0.159804,3.642781,-9.586178,3.392529,-9.033585,8.369241,-7.870477,6.010350,-9.456814,-7.308428,3.734991,-5.493173,-2.467474,5.481543,-7.336436,1.065528,7.184806,-2.289037,-2.336550,-7.983012,4.177795,-0.673926,7.925326,8.268893,-0.862927,9.762869,0.699322,-1.589856,1.582161,-9.417276,-1.514636,-7.086088,-1.881133,5.592184,5.442596,2.460695,4.113232,-9.240203,8.345272,-3.406417,6.237101,0.168334,1.855545,-4.970632,-2.725071,-9.054658,-1.864793,-3.669371,-5.397432,-8.234184,7.056484,-6.408621,1.623365,9.453621,-7.116784,-8.331988,4.103828,-1.624860,-6.376579,7.645945,8.763188,7.135410,2.270473,-9.370838,9.047589,6.516949,9.315605,-8.894884,-5.639740,2.147802,7.890745,-8.941583,-3.936119,-7.549242,-3.662970,0.756130,6.164231,9.576329,-2.966606,-5.606663,-9.241458,-0.186131,-7.485733,0.438683,0.953994,9.596962,-6.052279,2.727275,3.371404,6.104722,-5.253460,6.000739,7.352157,-8.589345,8.277023,-6.715986,-1.498397,7.796604,9.927108,0.670432,6.548536,7.626346,-7.575723,-0.209553,-0.744466,1.793204,-5.399560,9.700726,-5.849604,4.160166,-4.098971,0.179152,7.374494,0.975754,2.625538,5.680869,-5.369022,0.266907,1.528558,-8.204089,0.977333,-9.843339,-9.504660,-7.744107,7.800027,-7.217812,5.900267,-1.287510,-5.668952,8.215781,-2.927805,6.070142,1.975950,-8.222221,-1.170210,8.817531,-1.802642,-3.742725,8.617224,0.012257,-7.626904,-9.738959,-9.757895,-0.285358,0.894764,-5.249587,-2.984415,-3.254322,-7.032801,1.025939,5.931166,7.866470,-3.830171,-7.843838,-5.720310,2.549537,-4.835310,-2.982534,-4.517027,3.704161,-0.164138,-9.364834,4.036183,-0.337581,9.103471,9.970760,-1.877580,-3.800936,-0.773861,-2.297410,9.310075,9.777116,-8.339294,-6.072456,0.272404,-7.442802,0.186295,-4.209189,4.647802,1.683659,-5.314419,7.313920,9.916296,-4.276116,-3.316639,-5.327146,-1.514576,2.244941,0.162153,9.334529,-5.080104,-2.433938,-4.183470,-1.927092,1.834911,-4.353799,-1.659458,7.819517,-8.751096,2.665897,-5.250191,-1.736387,-0.906344,8.278315,1.936341,-7.056630,-3.603362,3.365124,8.131004,-5.427197,6.619733,4.443212,-3.865962,3.216176,-2.102518,-1.816073,-9.839384,0.495359,-2.926949,-0.992552,0.564777,5.746053,8.707560,2.588804,6.241581,-0.809750,-7.902795,-6.960883,-3.827061,1.742826,2.331381,1.342722,-9.603636,-2.733992,-5.329594,-8.218195,5.758096,4.626989,4.266514,9.206581,4.846957,7.159110,5.882202,-8.018535,-6.690359,-6.218830,1.432086,7.228380,-3.699228,5.127557,2.045383,9.059378,3.609219,9.590287,2.834952,8.695847,-3.119846,-6.672021,6.891750,8.187141,8.779833,6.565137,-9.897440,-1.549788,-5.101201,4.080480,-0.635616,-2.478057,1.502374,-2.363795,-7.304482,0.354398,-5.019367,9.549628,4.902496,7.810289,-5.915485,7.850510,-1.852739,-4.297873,4.348551,-9.447331,-2.116409,-6.048579,-5.283899,-2.909987,-5.518058,-7.066435,3.052740,-5.051092,-6.408350,4.278529,-6.380633,1.386998,9.487251,5.528617,2.592516,-8.889515,-2.426488,-8.264902,3.129680,-8.055222,-5.743751,-5.286975,-9.476043,-5.749724,6.246069,7.595443,4.932715,-4.262096,-6.114308,4.447546,0.714199,7.824026,-1.822659,-7.819280,-3.881834,-2.302140,1.829125,0.121569,8.817465,4.257544,8.331060,9.964392,7.185541,5.553235,5.830081,-1.548782,-2.712462,5.910875,6.215328,-4.440653,-2.241335,-1.085695,-0.791704,1.215669,-4.488486,-8.760435,6.863367,-6.889452,3.931257,9.710732,-1.976602,7.790451,3.394804,-2.389204,-9.944304,4.768116,7.946039,3.837558,8.387819,6.819291,0.473863,2.428097,5.526065,5.986904,-2.296870,-2.552470,-7.078890,3.599491,-7.742917,-2.608864,3.430131,4.732686,-1.111799,-8.995540,2.489377,7.797760,7.571815,6.037281,-0.230514,6.470172,2.339591,8.430523,4.320386,-3.029602,-3.480278,-7.790749,-0.362879,-8.469920,-2.943909,-9.919943,4.155461,-3.441058,-9.046078,1.366129,8.330899,7.237381,-1.986065,-9.069411,-7.569578,8.227485,-2.760135,-5.722527,6.258666,7.034845,4.528720,3.440031,1.087364,9.638846,-6.847369,-9.213828,0.607741,-9.962871,-7.177770,0.985014,0.618332,-6.797399,-0.085950,-2.595616,1.316859,-7.383836,3.528158,8.955201,6.489725,4.641100,-3.443527,9.799782,5.505464,6.680722,1.030942,-0.888694,-1.311773,-0.531890,9.953686,-8.528350,-5.488048,9.906230,9.798245,-6.017546,5.564133,-6.734847,5.583236,1.389031,2.055502,-5.787804,9.532855,-7.989136,5.526697,1.515783,4.785914,-7.815648,-9.982881,-0.376397,-4.780212,-6.019679,-4.823068,5.132639,6.574755,-7.844466,-0.768450,1.147750,-7.418064,7.610092,-0.481174,-6.661797,-9.206608,8.385213,6.947085,-6.157831,-5.212174,4.742290,3.434409,-4.860936,-0.706358,-2.209058,0.809179,-8.187392,6.876506,-0.202785,-3.759396,2.941609,7.203770,0.161949,-4.658822,-4.751303,6.428385,8.916565,1.243209,9.630802,0.776783,-1.445500,5.798568,-2.941966,-2.855318,-8.292880,1.422347,7.194989,-9.548643,2.772811,6.634847,1.197525,-5.760414,4.350083,-4.329324,9.295893,-1.648471,-0.264906,-6.366587,-3.139236,1.533062,-9.126209,1.044119,0.165966,-0.010672,-5.701567,4.013382,-9.848249,8.967429,9.112273,-0.225491,4.944975,-1.479935,-4.144003,-4.251826,7.472957,5.211880,-7.204456,0.390491,-7.352083,7.093996,7.373605,-1.310026,-0.334005,-2.042572,2.529497,-6.259841,6.735346,7.042532,7.494065,9.724300,6.780227,-5.567616,4.245489,-4.601058,-4.653484,-3.263343,-0.597900,3.893939,-3.534837,-6.550688,1.346299,-5.432038,4.830891,-8.917318,6.528205,2.427165,1.633566,1.304808,9.703929,-4.017585,6.654337,-5.293641,-5.911777,-2.299410,0.161984,-8.711204,7.345041,4.530584,-0.846324,4.921647,3.023143,0.057048,0.492158,0.424524,-9.076719,-0.180740,1.068307,6.609640,-7.611317,-6.350304,-6.621297,-5.779568,-3.046508,-5.927547,-0.183130,-3.153536,-7.746952,-6.389457,-4.062737,-7.768549,5.487391,-6.197025,4.375636,-9.054242,3.402649,1.881388,-7.587272,2.338246,-6.411001,0.691178,-7.267921,-2.612300,8.157810,-7.093403,1.265107,-8.340336,9.029986,7.329756,-9.518169,-9.346089,-7.056059,6.943561,-5.942034,7.491495,-5.138693,2.217363,7.971948,9.211874,-1.792034,-0.167078,6.701251,-5.081476,-1.541227,3.928199,-4.265190,-0.413301,-9.698276,0.934763,7.287796,4.851208,6.567135,-6.962493,-9.414070,-7.992696,6.400183,-5.826029,0.970619,2.797652,-3.397748,4.477125,-9.505536,-6.074399,9.615648,6.530163,-2.975045,9.467149,2.013922,-7.152033,1.490776,-2.344802,-2.491458,5.654990,-8.833577,7.167198,-7.558684,4.811287,-7.534439,6.312497,3.795070,-0.289851,3.028344,6.224842,1.654642,-6.887842,-9.179935,6.363515,-7.326358,0.524702,3.658883,6.823019,7.490602,4.110765,-1.978932,8.519297,4.668751,-8.020736,2.064219,-8.104641,7.287082,-6.248480,0.042064,-1.003188,-5.201321,-6.771368,-4.199095,4.691567,-3.824284,-4.741130,3.799251,-5.656081,5.596294,3.259541,7.611541,-0.342224,8.769698,-5.618487,-9.052722,-4.939158,-0.245916,9.255346,-6.866419,-4.717108,5.653231,-5.320910,1.906871,8.595890,4.212119,9.071408,-8.355043,8.425685,-4.556197,3.338697,6.757347,-6.792006,-0.486827,-7.829434,-8.160048,-5.049633,3.919031,4.153349,3.566163,-2.615744,0.302580,0.108356,0.788551,1.275052,0.211056,-7.489581,-4.346640,-6.889289,-2.745167,-5.908393,-1.450840,-5.572853,2.791704,-9.731333,8.447875,9.084261,-1.409827,-0.073416,7.332238,-6.935988,-3.274817,9.822305,5.740239,-8.743058], dtype = "float32")#candidate|2319|(1344,)|const|float32
const_2320 = relay.const([[-5,-5,-3,2,-8,9,-5,8,10,-3,-1,-8,6,8,7,5,7,1,-10,3,7,-8,2,4,-4,-8,-9,-7],[-6,-2,-2,-6,-5,-6,2,-5,-1,1,-10,5,3,-8,-8,5,9,10,2,-10,-5,-4,-8,-5,-5,-4,3,-9],[-1,-7,2,-6,9,2,-1,10,1,-10,4,-9,4,-4,-1,3,1,-4,2,-4,5,2,-10,-2,4,-1,-9,-9],[-4,-2,-5,-10,3,-9,-1,5,1,-1,-8,4,-7,4,7,-1,-6,9,-5,8,-10,-6,10,-8,9,-3,-4,-2],[-4,-9,10,4,-2,-7,-2,7,-4,5,-4,-6,-2,-3,6,7,2,2,5,-5,-9,-4,-9,-2,-5,6,2,4]], dtype = "int32")#candidate|2320|(5, 28)|const|int32
const_2321 = relay.const([True,True,False,False,True,True,False,False,True,True,True,True,False,True,False,True,False,True,False,True,False,True,True,False,True,False,False,False,False,False,False,False,True,False,False,False,True,False,True,False,True,False,False,False,True,False,True,True,True,False,False,False,True,True,False,False,True,False,False,False,True,True,False,False,True,False,True,True,False,False,True,False,False,True,False,True,False,True,False,True,True,False,True,False,False,True,False,True,False,True,True,True,False,True,True,True,True,False,False,False,False,False,False,False,True,False,True,True,True,True,True,True,False,False,True,False,False,False,True,False,True,True,True,True,False,False,False,False,True,True,False,True,True,False,False,False,False,True,False,True,True,True,False,True,True,False,True,True,False,False,True,True,True,False,False,False,True,False,False,False,True,False,True,False,False,True,True,False,True,True,True,False,False,False,True,True,False,False,True,False,False,False,True,False,True,True,False,False,True,False,False,True,False,True,True,False,True,False,False,False,True,True,False,True,True,True,True,True,True,False,True,True,False,False,True,True,True,True,True,True,True,True,False,True,True,True,True,False,False,True,False,True,True,False,True,False,True,False,False,False,False,True,True,False,False,True,False,True,False,True,False,False,True,False,True,False,False,True,False,False,False,False,True,True,False,False,False,True,False,False,True,False,True,False,True,True,True,True,True,False,False,True,False,True,False,True,True,False,False,True,False,True,True,True,False,True,False,False,False,False,False,True,True,False,False,False,True,True,True,False,True,True,False,True,True,False,True,False,False,True,False,False,False,True,True,True,True,True,True,True,False,False,True,True,False,True,True,True,False,False,False,False,True,False,True,False,False,False,True,False,False,True,False,False,False,True,True,True,True,True,True,True,True,False,False,True,True,True,False,True,True,False,True,False,False,True,True,False,True,False,False,True,True,False,False,True,False,True,True,True,False,False,False,True,False,False,False,True,True,True,False,False,True,False,False,False,True,True,False,False,True,True,False,False,True,False,False,True,True,True,False,False,True,False,True,True,False,False,False,True,True,False,True,False,False,False,False,True,True,True,False,True,False,False,True,True,False,True,True,True,False,True,True,True,False,True,False,False,True,False,False,False,True,True,False,True,True,True,True,True,False,True,False,False,True,True,True,True,True,False,False,True,False,False,True,False,True,True,False,False,False,False,False,True,False,False,False,True,True,True,False,True,False,False,True,True,False,True,False,True,True,True,False,True,True,True,True,False,True,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,True,True,False,True,False,False,False,True,True,False,True,False,False,False,False,True,False,False,False,True,False,False,True,True,False,True,True,False,False,False,True,True,True,True,False,True,True,False,True,True,False,False,True,False,False,False,True,True,False,True,False,True,True,True,False,False,True,True,False,True,True,True,False,True,False,False,False,False,False,True,True,False,True,False,True,False,False,False,True,True,False,True,False,True,False,False,True,True,True,False,False,False,True,False,True,False,False,False,False,False,True,True,True,True,True,False,True,False,False,False,True,False,True,True,False,True,True,True,True,False,True,True,False,True,False,False,True,False,False,True,True,True,False,False,False,True,False,True,True,False,True,False,True,False,True,True,False,False,False,True,False,False,False,True,True,False,True,False,True,True,True,False,False,True,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,True,True,True,True,False,False,False,False,True,False,True,False,True,True,False,False,True,True,False,True,False,False,False,False,True,True,False,True,False,True,True,True,False,False,False,False,False,False,True,True,False,False,True,True,False,False,True,True,True,True,True,True,False,True,True,True,False,False,False,False,True,True,True,True,False,True,False,False,True,True,False,True,True,True,False,True,True,True,True,True,True,False,False,True,True,False,False,True,False,False,False,True,True,True,False,True,True,False,False,False,True,False,False,True,True,False,False,True,False,True,False,True,True,False,False,False,False,False,False,False,False,False,True,True,True,False,True,False,False,True,True,False,True,True,True,False,True,True,True,True,True,True,False,False,False,False,True,False,False,True,True,False,True,False,False,False,False,True,True,True,False,False,True,True,True,False,True,False,True,True,False,False,False,False,True,False,True,False,True,True,True,False,False,False,False,False,False], dtype = "bool")#candidate|2321|(900,)|const|bool
call_2316 = relay.TupleGetItem(func_1505_call(relay.reshape(var_2317.astype('int32'), [16, 3, 4]), relay.reshape(var_2317.astype('int32'), [16, 3, 4]), relay.reshape(const_2318.astype('uint16'), [10,]), relay.reshape(const_2319.astype('float32'), [1344,]), relay.reshape(const_2320.astype('int32'), [140,]), relay.reshape(const_2321.astype('bool'), [900,]), ), 6)
call_2322 = relay.TupleGetItem(func_1512_call(relay.reshape(var_2317.astype('int32'), [16, 3, 4]), relay.reshape(var_2317.astype('int32'), [16, 3, 4]), relay.reshape(const_2318.astype('uint16'), [10,]), relay.reshape(const_2319.astype('float32'), [1344,]), relay.reshape(const_2320.astype('int32'), [140,]), relay.reshape(const_2321.astype('bool'), [900,]), ), 6)
uop_2336 = relay.asin(uop_2273.astype('float32')) # shape=(2, 16, 3)
output = relay.Tuple([call_2280,const_2281,uop_2310,call_2316,var_2317,const_2318,const_2319,const_2320,const_2321,uop_2336,])
output2 = relay.Tuple([call_2282,const_2281,uop_2310,call_2322,var_2317,const_2318,const_2319,const_2320,const_2321,uop_2336,])
func_2348 = relay.Function([var_2272,var_2317,], output)
mod['func_2348'] = func_2348
mod = relay.transform.InferType()(mod)
mutated_mod['func_2348'] = func_2348
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2348_call = mutated_mod.get_global_var('func_2348')
var_2350 = relay.var("var_2350", dtype = "float64", shape = (2, 16, 3))#candidate|2350|(2, 16, 3)|var|float64
var_2351 = relay.var("var_2351", dtype = "int32", shape = (8, 24))#candidate|2351|(8, 24)|var|int32
call_2349 = func_2348_call(var_2350,var_2351,)
output = call_2349
func_2352 = relay.Function([var_2350,var_2351,], output)
mutated_mod['func_2352'] = func_2352
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2469 = relay.var("var_2469", dtype = "float64", shape = (4, 10, 14))#candidate|2469|(4, 10, 14)|var|float64
uop_2470 = relay.asinh(var_2469.astype('float64')) # shape=(4, 10, 14)
output = relay.Tuple([uop_2470,])
output2 = relay.Tuple([uop_2470,])
func_2489 = relay.Function([var_2469,], output)
mod['func_2489'] = func_2489
mod = relay.transform.InferType()(mod)
var_2490 = relay.var("var_2490", dtype = "float64", shape = (4, 10, 14))#candidate|2490|(4, 10, 14)|var|float64
output = func_2489(var_2490)
func_2491 = relay.Function([var_2490], output)
mutated_mod['func_2491'] = func_2491
mutated_mod = relay.transform.InferType()(mutated_mod)
const_2628 = relay.const([[[-9.840114,1.986850,7.952167,-9.903078,5.326781,-5.301589,-8.822466,4.748707,6.621494,2.758611,-4.213906],[-7.775760,1.144594,-3.822805,0.378620,1.716756,-0.911222,1.709591,-0.319762,0.051887,6.972833,-6.405249]],[[5.339607,1.586736,7.262807,6.849388,-4.498386,-1.804461,-9.578755,-6.524959,-9.348111,-3.390595,-4.190466],[-5.340607,1.489839,1.580118,-7.585439,-7.012622,0.373633,-1.480163,4.183733,-8.038023,7.974173,3.260189]],[[5.528263,-5.678248,-6.730601,-1.988666,-3.254744,7.940270,8.663452,7.818138,7.690172,0.183029,7.696208],[2.654949,-8.569146,-7.869665,-3.264397,1.598745,9.002767,6.957237,-6.363775,-7.186370,-3.188514,3.299047]],[[-8.642741,1.182147,-5.581181,-7.357422,-8.896666,-5.774830,-7.515564,7.007071,3.422758,-4.913162,-3.643856],[-9.520840,-6.283981,5.450219,-6.954398,-9.714403,9.300678,-5.632860,-3.656056,9.213727,-7.265225,2.279597]],[[-5.109621,0.202098,-2.533407,-0.392103,8.929561,4.709891,-8.215098,4.655545,5.565657,4.318511,3.549618],[3.647662,2.420211,7.080468,-0.558168,-3.223138,5.648636,-7.571657,9.134650,-9.072797,8.756016,-1.060784]],[[-6.005703,4.345052,0.551735,2.920717,-0.348967,0.151497,6.879887,-9.627424,2.957817,4.165330,-6.843409],[-6.924853,-3.917803,2.548725,7.718844,5.217546,5.243559,4.751402,-6.812206,5.253067,3.815081,-7.041136]],[[3.949582,8.521873,0.567086,9.767028,-7.819096,3.249715,-8.979041,6.278357,3.237128,-6.822486,9.174600],[2.225608,-1.687503,-9.209224,6.751125,-9.387864,6.213859,-7.966477,-9.441378,8.917732,6.305952,-3.083335]],[[1.433841,8.537168,-8.027780,6.876884,-9.600217,6.101477,3.207045,-7.153943,-2.908325,-7.026939,-5.404668],[-7.869821,-9.047121,-2.577860,1.979360,-4.517232,-4.233218,5.708084,5.779818,-9.483027,5.794424,-0.385709]],[[0.663701,-7.371986,4.192074,-1.996091,2.017447,8.881706,-3.154743,3.813760,-2.729911,-1.006540,-8.757509],[2.072509,-4.417925,8.516988,-9.577088,-8.859849,-0.802793,5.114831,0.091588,-1.841268,3.396394,4.913257]],[[8.453012,8.770000,-4.754644,-7.033622,8.593179,-4.337598,7.620697,2.011842,5.952478,1.825545,-1.287106],[6.089005,-0.446169,-6.858342,4.334914,8.763625,2.485647,-6.383907,-2.878369,-1.448029,9.043971,5.838690]]], dtype = "float64")#candidate|2628|(10, 2, 11)|const|float64
var_2629 = relay.var("var_2629", dtype = "float64", shape = (10, 2, 11))#candidate|2629|(10, 2, 11)|var|float64
bop_2630 = relay.greater(const_2628.astype('bool'), relay.reshape(var_2629.astype('bool'), relay.shape_of(const_2628))) # shape=(10, 2, 11)
uop_2633 = relay.log2(var_2629.astype('float64')) # shape=(10, 2, 11)
output = relay.Tuple([bop_2630,uop_2633,])
output2 = relay.Tuple([bop_2630,uop_2633,])
func_2653 = relay.Function([var_2629,], output)
mod['func_2653'] = func_2653
mod = relay.transform.InferType()(mod)
mutated_mod['func_2653'] = func_2653
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2654 = relay.var("var_2654", dtype = "float64", shape = (10, 2, 11))#candidate|2654|(10, 2, 11)|var|float64
func_2653_call = mutated_mod.get_global_var('func_2653')
call_2655 = func_2653_call(var_2654)
output = call_2655
func_2656 = relay.Function([var_2654], output)
mutated_mod['func_2656'] = func_2656
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2717 = relay.var("var_2717", dtype = "float32", shape = (9, 10, 6))#candidate|2717|(9, 10, 6)|var|float32
uop_2718 = relay.cosh(var_2717.astype('float32')) # shape=(9, 10, 6)
output = relay.Tuple([uop_2718,])
output2 = relay.Tuple([uop_2718,])
func_2721 = relay.Function([var_2717,], output)
mod['func_2721'] = func_2721
mod = relay.transform.InferType()(mod)
mutated_mod['func_2721'] = func_2721
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2722 = relay.var("var_2722", dtype = "float32", shape = (9, 10, 6))#candidate|2722|(9, 10, 6)|var|float32
func_2721_call = mutated_mod.get_global_var('func_2721')
call_2723 = func_2721_call(var_2722)
output = call_2723
func_2724 = relay.Function([var_2722], output)
mutated_mod['func_2724'] = func_2724
mutated_mod = relay.transform.InferType()(mutated_mod)
const_3175 = relay.const([[[6,-7,-5,-10,9,4,9,7,-7],[2,2,-7,10,-8,-5,-5,4,-7],[-8,5,-10,3,-8,-1,-3,-10,7],[-4,3,3,4,-6,-7,9,-2,5],[3,3,10,-8,-7,8,8,-2,-3],[-10,3,7,-10,7,3,4,-2,9],[9,5,-8,3,-2,-6,9,1,-1],[-4,-9,3,-5,-9,-1,10,-8,9],[5,-1,-6,1,-4,-9,-5,7,6]]], dtype = "uint32")#candidate|3175|(1, 9, 9)|const|uint32
var_3176 = relay.var("var_3176", dtype = "uint32", shape = (1, 9, 9))#candidate|3176|(1, 9, 9)|var|uint32
bop_3177 = relay.left_shift(const_3175.astype('uint32'), relay.reshape(var_3176.astype('uint32'), relay.shape_of(const_3175))) # shape=(1, 9, 9)
uop_3180 = relay.log2(const_3175.astype('float64')) # shape=(1, 9, 9)
func_751_call = mod.get_global_var('func_751')
func_755_call = mutated_mod.get_global_var('func_755')
var_3184 = relay.var("var_3184", dtype = "uint16", shape = (10,))#candidate|3184|(10,)|var|uint16
var_3185 = relay.var("var_3185", dtype = "uint16", shape = (100,))#candidate|3185|(100,)|var|uint16
const_3186 = relay.const([[5.432514,-7.393591,9.173403,2.900175,9.398051,0.062947,9.893661,-0.872135,6.076223,-4.741415,-0.675047,3.221406,7.661954,3.965630,0.339285,-9.102573,-2.236448,-0.084568,-4.489962,-5.349405,-3.844870,8.371699,9.022972,1.862195,-4.405326,-6.159099,-1.268272,5.945591,2.575858,9.866617,-7.940923,3.881283,-9.478279,-8.466468,-7.690763,-3.606435,9.521166,-2.751938,0.147353,6.119067,0.767884,-2.379328,2.272814,-3.308113,3.235579,2.333127,8.102207,-0.978138],[8.926612,-5.679047,6.748533,-1.363892,-7.153909,9.270474,-2.279753,-4.701948,0.433245,0.337659,-8.314506,2.056503,6.161048,3.275857,7.055372,7.422222,2.055078,-9.014004,-2.451444,2.238145,-7.514985,4.632701,6.751464,-9.055689,-6.187659,6.389368,3.232762,-1.318690,8.096823,8.842839,-2.410835,9.440593,8.189190,-8.401302,-2.032556,-6.959273,0.040412,2.567977,0.717874,4.484130,8.091063,-6.566306,0.596609,-2.917594,6.053956,9.080819,-5.521484,5.528663],[5.506420,6.027871,2.552591,-9.397996,3.750544,5.938049,0.062792,5.065571,6.545727,-6.625287,-0.501823,7.611851,-8.440703,0.561188,-5.188919,-5.664673,3.771234,2.898772,-6.500919,3.993652,-6.135117,-7.660647,4.806225,-7.538207,-8.179756,3.419209,3.350204,-2.500550,5.172586,-7.834039,-5.659252,0.370059,3.113576,-4.166016,-9.313001,6.992973,-5.035772,8.473880,5.423388,-9.961795,-0.945581,5.912644,-3.117356,8.316926,4.988094,5.953963,2.873197,3.179646],[-6.857008,-7.868064,2.693303,7.902511,4.911645,0.214274,-8.783995,-0.554023,9.518670,8.478902,9.308343,-4.284065,-5.559401,-8.655626,-6.995061,-2.974070,1.060351,-0.431411,4.423111,-0.735601,-0.544399,7.142569,7.041760,0.724838,0.673710,1.098311,7.403576,-0.715565,6.277589,0.229921,-1.805195,-8.306701,-1.982956,4.376681,-7.342440,5.509748,4.773533,-6.964240,-0.585467,-1.314608,-4.231798,8.825396,7.666797,1.309556,-0.158881,-6.507022,3.572179,8.922952],[1.839412,0.888457,-0.144742,-5.961727,7.263155,0.697557,-7.881654,-0.043002,1.719510,9.676909,0.494071,8.731321,0.805902,-8.757079,0.112801,2.109115,-0.863964,-6.046743,1.958163,7.125748,7.291839,-3.185968,-7.393648,-8.065026,-5.942463,-6.952946,2.230648,-0.781704,7.546449,2.019020,-2.445973,-3.799683,1.472756,5.006727,7.822628,1.983481,8.456863,8.821526,-3.771990,8.518243,2.395481,-4.715856,-6.441615,4.875522,-4.245402,-7.195522,3.787275,9.705277],[3.982437,6.614103,0.459571,-6.703360,0.156640,-1.259252,4.676258,-5.082222,9.932676,0.731745,6.945995,-2.972359,7.741215,-2.274820,9.963932,3.630092,3.419142,8.455231,-3.702551,6.424284,7.437150,6.355753,-2.009886,7.897601,4.911863,5.227576,-3.147605,-7.476488,-7.287090,-8.746120,-2.540257,-2.542483,8.201835,9.482858,0.055086,8.193263,-8.919024,-1.638690,-3.072366,3.025312,-0.792701,4.380622,-3.905091,4.276460,-0.127339,-2.961684,9.816267,-1.378783],[-1.479964,-6.246591,1.292980,3.252441,1.557295,-6.095694,5.933913,4.614815,-9.835684,-8.292806,-8.267858,1.269104,-9.770700,7.881116,-1.026043,-5.071943,9.896862,0.505952,-0.034277,3.448960,-0.805305,8.553543,3.751741,3.589669,2.752902,-9.038335,3.791274,4.769024,2.156012,-8.485030,-6.092782,-8.852555,5.081208,-6.974033,-3.204405,5.959680,8.740275,9.638794,3.837065,-4.207591,-4.947467,-7.838379,-2.717158,7.091513,8.440424,-2.986092,-3.385175,2.290856],[-3.241832,6.704405,1.569884,3.772595,-6.640833,7.784635,6.095287,-9.206159,-5.602671,-6.868000,-1.223844,-9.820727,7.081863,-7.105081,-7.846315,5.800499,3.236362,7.517273,-2.352674,-4.716073,7.971010,-0.022542,3.947621,4.476053,-7.520147,4.696494,4.543158,-7.086212,-0.464969,7.129461,-8.544242,7.779901,9.351598,4.900781,3.965294,-6.055361,3.464509,5.535635,-0.999270,2.351420,-4.894190,1.450673,-7.238813,-3.686691,-6.824120,4.774483,9.768601,2.244830],[-0.188531,-4.764682,-6.133310,-6.309890,6.964841,-9.286288,-4.931609,-7.095357,-1.884337,2.851865,6.645680,8.760203,0.678114,6.697287,1.547296,5.421673,7.778211,9.268978,6.552880,3.276985,-1.808337,-4.870992,4.487406,0.050698,-7.293535,3.052743,8.236311,-1.712329,2.320259,5.788618,-4.577548,-9.760507,-0.879354,5.459565,-2.242486,-2.375870,-4.566124,9.458014,-9.166796,-3.491889,7.615813,-6.622185,-7.661845,1.395134,-4.669099,8.240151,-6.916542,-0.620169],[4.570510,-4.578415,7.444799,-6.768637,0.296277,5.086154,6.153780,-6.972496,0.849095,6.579830,8.823609,-2.611140,9.272698,-9.018294,7.348605,-4.982264,-7.616567,-0.084213,8.212155,-2.919501,3.689302,-5.487604,0.331864,1.038168,-6.931701,-2.208226,-1.042676,0.531029,-4.930527,4.999390,5.645724,5.738990,-1.972761,2.420321,-3.372814,-4.969524,3.950244,-7.478794,5.750567,-7.828039,-6.502549,-1.995607,0.982529,-5.523093,3.386499,4.011637,0.848953,3.307363],[9.045190,-2.585958,-2.122280,3.682842,2.276834,-9.841730,9.646686,-3.577252,1.056028,-9.823322,4.951070,8.655738,-4.590021,4.173981,6.523784,4.617784,4.597600,-2.532714,-1.902400,1.849426,-7.073488,9.378576,-7.408053,6.171332,-5.105851,-6.479591,0.112722,-9.118022,5.078385,0.430216,-9.696825,4.609641,-2.435305,2.630506,8.032114,3.135075,-3.529476,3.565998,-1.323616,8.199799,5.166280,-7.650845,9.985650,-0.561267,-6.410349,8.282410,4.001898,-4.376514],[-9.594757,-1.418047,2.080361,5.970195,-7.807330,-2.605299,-3.787594,4.215037,-6.378436,-6.026351,8.459569,-2.064050,-9.208040,-2.348664,-2.133999,-8.943527,6.035750,-1.073104,-9.824549,-8.842938,-0.807496,0.133964,-3.292218,-2.334482,3.096535,-0.094620,-9.157726,-2.304926,-9.935616,-3.616794,-9.910036,-1.694703,3.083213,-4.535722,-7.707216,0.824805,5.198148,7.345891,3.867387,-2.328739,-3.590230,6.291554,6.592794,-2.243463,6.330133,-8.562657,5.792968,0.585580],[5.697483,-7.079374,-3.162091,3.723561,-7.571696,-4.430880,-0.573728,-0.358964,9.888211,3.494055,-8.326304,3.650082,-1.404098,4.411221,-7.214647,9.587404,-8.966556,4.880954,0.245947,-7.643465,-6.691834,4.835688,-9.993241,6.792479,-0.258941,-2.850269,-9.918933,-8.347513,-2.809580,-1.910961,-7.110047,-0.196007,8.589851,3.251362,-7.554017,7.354772,-5.073181,-3.042714,-9.497364,4.657285,-3.988488,3.492893,4.273636,-8.739143,1.443022,-2.293144,-8.979085,-9.556602],[-2.326475,-9.422604,-2.030375,9.987106,-1.730845,7.572524,-5.697458,3.954417,-9.890700,1.092854,-6.134225,4.598290,2.212969,6.467524,2.511567,7.182658,-6.074904,-6.043073,0.849691,8.879599,8.047981,4.809505,1.857169,0.656103,5.844645,8.795753,-6.347536,-9.792821,-9.255696,7.111457,1.835565,-2.524008,-8.578887,-0.519612,-1.200793,1.519996,-2.609080,9.857199,-9.353503,-1.612752,-5.787286,4.704617,-0.172655,-0.774738,-3.514175,-7.451675,-2.697032,9.668330],[-5.615357,4.279415,9.101700,-0.641491,2.907309,-7.299253,-7.494693,9.660456,-2.572594,5.590513,-9.127617,-4.331751,3.206827,6.434233,1.005901,-6.037330,-5.182254,-4.035581,4.514942,-1.905028,2.826122,-2.203113,7.650946,-9.256967,-6.134647,-7.005332,5.211608,1.959123,-1.698910,-7.721325,2.514011,4.218524,-8.702462,-8.979325,-2.002859,-8.076934,0.259119,-0.751379,7.086424,-4.149007,-4.179652,-4.989987,5.323620,2.096832,-8.766476,9.641724,-7.746141,-4.189164],[6.995225,-2.423655,8.647376,4.930711,9.263889,2.664181,-0.839630,7.692094,-4.573182,-9.057571,2.275069,5.598303,7.342397,-4.214792,8.899462,6.011625,4.488449,1.766584,-7.377855,8.959850,-8.709152,-2.884016,-2.032204,5.145897,-0.666862,4.874217,8.316526,8.971395,7.544898,6.957005,-3.585349,1.599846,-2.038040,-8.416315,4.605756,4.636269,-5.324931,-9.668876,2.597638,-8.169048,0.402695,0.014218,-7.069771,-7.862765,-6.084373,2.176711,-3.634456,-9.201859],[4.442076,6.610484,-7.918033,-0.521359,7.749660,-9.045467,-3.379897,-7.787703,-7.624759,2.379125,-4.683182,-2.798914,0.945793,-3.564600,3.909873,-5.374458,8.160153,3.389162,-4.569705,9.088095,3.989964,-2.448294,-6.252296,9.304642,9.305081,1.747739,-9.969412,-6.115506,1.252335,9.062075,-6.545272,3.828450,-5.548194,6.153528,-2.780446,-3.219874,-2.358656,-4.571020,4.356524,1.856571,-3.520388,-4.242100,7.323101,-8.077759,6.963921,8.191878,4.416865,-4.288018],[6.736481,7.691717,-5.957069,6.747383,-0.601315,3.981349,-3.322624,-8.340172,6.273756,9.210014,-8.784100,-3.009417,-1.672292,7.393443,-9.465700,0.176947,1.872854,-1.601913,-0.104889,9.679652,0.139183,-8.373567,9.298367,-7.804266,7.490151,5.099916,7.752087,-2.187226,5.984459,3.596630,5.500686,-6.109027,2.790581,-4.717495,-9.932198,3.292418,-3.279680,4.700491,-0.207899,-3.860555,-3.888419,6.627022,7.470809,0.921110,7.165579,6.255359,6.120534,-3.207863],[-9.777169,-1.577523,-7.123520,-4.954448,2.683561,-4.102782,2.419260,2.801954,6.092438,6.419111,-3.958577,9.575103,2.829438,-6.338878,-4.749304,-6.362640,9.055785,-0.564118,-3.030471,-6.571161,-1.554333,1.347431,-6.554594,4.791934,-8.141394,-7.932497,3.548926,-3.079574,-2.193525,4.975173,9.321605,1.195673,-7.402678,-6.168431,-0.580720,-6.675167,-3.233627,-3.093440,4.875042,-0.256586,-0.899845,-2.971808,-0.539465,2.630346,-6.425696,-1.413140,-6.441917,-1.617167],[1.847748,1.487285,-5.658626,-3.476294,9.404968,4.678781,9.666886,-3.615684,-1.667493,8.339968,-3.215835,-9.353067,-5.137063,-1.814284,-1.450140,0.712571,-4.801638,-1.668816,0.380631,0.149192,6.458347,0.884115,-8.624512,2.005949,-6.119563,2.761140,7.538062,0.718044,-7.892512,-4.192698,7.012733,-3.206435,-2.860707,-6.891062,-1.233049,-0.377992,-2.554927,-3.983984,-4.065767,1.551117,-4.314985,3.022850,-8.093201,6.732308,-3.791059,-8.403914,-0.819258,2.428621],[9.230191,-2.289101,8.208490,2.199587,-8.124421,-5.027434,5.006657,8.949990,7.187899,0.577279,-5.493575,-4.860183,-7.836466,-5.297605,-0.526284,7.425448,2.803292,3.210627,3.990913,-9.833691,-5.501699,-8.586641,-9.547212,9.290777,-7.542859,-2.573655,-9.059616,8.398484,1.622468,1.068022,-9.463991,6.451300,-2.007445,-5.018247,9.013918,6.954982,-9.816090,-6.547318,2.583919,-2.601295,-7.903651,-7.629646,0.806237,-1.670752,7.186041,-5.111951,-4.812457,1.494343],[-5.741265,-1.551423,-4.727051,0.487610,9.846602,-4.909022,-7.903664,-4.051418,3.237170,4.912479,1.232408,0.331914,6.489435,-9.496934,9.147034,-8.409640,7.447387,9.613326,-4.365365,-9.277594,-4.514719,-2.619819,8.187239,-8.396706,-8.095249,-5.955302,5.468911,-8.430220,2.462498,-7.091535,7.242031,0.002451,-5.085474,-2.272326,0.542849,-9.673661,4.519783,-1.538890,-4.892681,2.812800,-5.240394,-1.038146,4.403161,-4.161011,3.561567,7.663721,1.027896,9.469266],[-0.913841,-3.484492,7.438915,3.312816,-1.468891,8.120430,-3.671138,2.373167,-0.537000,-5.732589,-4.587771,9.197207,-2.036626,-3.110304,2.306098,2.420768,-4.402601,9.972179,-2.676461,-2.807240,4.103665,4.468960,1.770400,-2.101821,-2.631641,7.706553,-1.508285,-8.471925,-9.002308,-2.932950,5.168555,9.503706,-0.846549,9.112476,2.471423,7.096575,8.215818,2.669113,1.683117,7.153206,-2.646736,-0.508126,1.985679,5.255485,-9.920654,1.303703,6.876611,9.114489],[5.129031,4.934664,-9.313262,6.085211,2.462904,-9.915904,9.510510,9.393963,4.410147,-6.720748,-1.751368,-2.243580,0.254823,-0.031793,-4.053252,-9.277480,-3.267752,-8.727349,-0.786862,6.503107,-5.236479,-3.801367,0.359442,-9.659781,-7.612118,9.464431,-0.928324,7.301535,7.109204,1.006262,7.347951,6.809584,1.285981,-2.146411,-5.881145,5.278365,-0.597467,-9.689480,7.993161,-8.853218,6.503712,1.167868,7.637766,1.268836,-4.235537,-3.505465,4.154843,-2.120562],[1.872916,-9.136416,-0.511864,1.191261,-9.891582,-3.969781,-7.936056,9.651744,-1.776396,7.205395,0.227583,-9.973994,9.407734,7.694069,-7.317249,7.922107,-4.793226,4.320997,-5.524663,3.504183,-1.860355,-2.726440,-1.405830,-5.861269,-2.748419,-7.928184,3.684384,-3.685883,1.421809,7.060064,7.237873,-0.891786,-5.402742,-1.004723,-5.478157,2.983549,2.915858,3.160633,5.062266,-0.911904,7.394534,0.908382,0.379965,-5.152044,5.200901,-7.433634,-7.440810,5.503050],[1.318253,2.581862,7.623598,-7.596603,7.466694,3.534428,-6.654353,-6.597636,-8.146519,-4.386911,2.212460,0.069060,-1.698955,2.581334,-4.018596,2.539272,-1.137596,6.707856,-8.646223,-2.802878,8.075805,-9.753698,7.799894,1.233581,7.863690,6.260924,-6.974091,1.951579,4.538970,-9.859288,3.944135,5.464748,-2.415707,-4.585746,-0.287483,-6.400160,-6.537812,3.854729,-1.504237,5.875215,-1.747535,-1.992500,1.688930,3.312414,6.542974,-5.628663,-8.021179,-6.308317],[-7.369721,7.204280,-4.749359,-3.391381,-2.100987,-5.362725,3.084237,-2.894395,6.283892,-7.163774,8.549702,3.921263,6.927191,3.900536,3.259107,7.096880,-1.620971,-7.494709,-2.228964,4.208213,5.706579,7.100570,-0.644817,-3.148270,5.629035,-1.444495,7.251815,7.095658,-1.481742,-2.369262,-9.214982,9.551721,-9.548403,9.880891,2.108806,5.124145,6.529371,3.523477,1.765860,8.059127,-5.134788,1.457657,4.322043,0.849875,7.187967,1.400750,2.317800,8.644434],[-8.806793,-6.722483,2.551324,-1.254624,9.346636,-7.934148,-6.423097,5.083866,-6.082104,-0.232345,2.588995,7.376780,4.642008,-1.581357,5.233705,-0.545808,0.898990,1.113475,-3.835124,1.585132,3.710498,-4.275007,9.699994,7.711824,-0.630219,8.684387,4.795047,7.267434,2.686239,4.475862,6.053432,-7.327823,-2.803962,8.395460,-9.672112,-5.451657,7.345755,6.354683,-1.421581,-3.218048,-2.312221,-5.442415,-3.231480,-6.285616,-2.126914,-7.745702,5.241567,-4.877758]], dtype = "float32")#candidate|3186|(28, 48)|const|float32
call_3183 = relay.TupleGetItem(func_751_call(relay.reshape(var_3184.astype('uint16'), [1, 10]), relay.reshape(var_3185.astype('uint16'), [10, 10]), relay.reshape(const_3186.astype('float32'), [1344, 1]), ), 2)
call_3187 = relay.TupleGetItem(func_755_call(relay.reshape(var_3184.astype('uint16'), [1, 10]), relay.reshape(var_3185.astype('uint16'), [10, 10]), relay.reshape(const_3186.astype('float32'), [1344, 1]), ), 2)
output = relay.Tuple([bop_3177,uop_3180,call_3183,var_3184,var_3185,const_3186,])
output2 = relay.Tuple([bop_3177,uop_3180,call_3187,var_3184,var_3185,const_3186,])
func_3188 = relay.Function([var_3176,var_3184,var_3185,], output)
mod['func_3188'] = func_3188
mod = relay.transform.InferType()(mod)
var_3189 = relay.var("var_3189", dtype = "uint32", shape = (1, 9, 9))#candidate|3189|(1, 9, 9)|var|uint32
var_3190 = relay.var("var_3190", dtype = "uint16", shape = (10,))#candidate|3190|(10,)|var|uint16
var_3191 = relay.var("var_3191", dtype = "uint16", shape = (100,))#candidate|3191|(100,)|var|uint16
output = func_3188(var_3189,var_3190,var_3191,)
func_3192 = relay.Function([var_3189,var_3190,var_3191,], output)
mutated_mod['func_3192'] = func_3192
mutated_mod = relay.transform.InferType()(mutated_mod)
const_3330 = relay.const([[[-5.408361,3.655844,0.526211,-9.819309,9.720845,-2.178249,-3.301907,4.583574,3.453856,5.901825,4.559444],[3.513264,-1.511785,2.812350,-9.946704,-3.062138,1.695182,6.224366,-5.714729,9.367063,2.376127,-9.041527],[-7.586330,-4.887801,-6.010528,4.434822,8.498076,4.701358,-7.349465,6.336223,-5.037211,-8.791540,-3.203663],[-0.586402,4.767250,-9.990145,-1.048513,-2.535755,2.720302,-9.639446,-8.562599,9.314822,-3.316659,-3.322583],[8.479969,9.114499,1.654009,-6.874939,0.794586,6.629282,-9.885302,-9.524905,-9.716052,8.028095,9.626414],[3.136287,4.780566,-0.221808,6.257832,1.498884,-5.009020,-0.829761,-8.156168,4.193200,-3.545509,-2.522851],[0.465676,8.599920,1.201248,1.600309,-3.658996,-1.591767,4.148193,4.877980,2.594762,-9.753255,2.498142],[-4.803485,3.748658,2.785396,-7.378252,-1.896433,-8.067740,0.763132,-1.801929,4.880944,0.256943,-0.503351],[-6.301023,1.962627,-4.907094,6.736291,5.659855,1.288689,-5.574016,-3.405078,-1.757161,-8.965589,-8.464875],[-3.669548,-9.375913,4.268942,-0.882721,-5.728412,7.233252,-6.272342,1.539686,6.602938,4.489063,3.226239]],[[4.511567,-1.981101,-2.483877,6.784598,-2.105797,9.886521,7.007171,-0.431340,2.313761,-0.476193,9.432726],[-7.323610,-2.402177,5.810498,0.254506,5.437266,-3.760678,-9.339795,-9.577852,2.461533,-4.952768,0.179493],[6.587594,8.898006,4.699966,2.868762,-6.920646,5.047267,3.425068,3.900377,-3.396850,4.053710,-6.409993],[4.298544,4.483849,-8.244942,-3.129127,1.153743,1.835852,-3.135876,-5.116892,2.446295,7.274641,-8.789102],[7.982585,9.850027,-7.983131,-0.930832,8.988102,-5.392070,-8.987257,-2.291834,-8.750447,-7.086424,-3.330055],[-4.631334,-0.667344,3.801065,0.536074,-9.793196,4.777467,-9.290619,4.215041,1.758318,-2.295048,7.554928],[-1.756902,6.397654,-6.869352,-8.477022,-8.413421,6.829684,1.630808,7.648874,-0.684213,3.009042,3.368802],[-6.222065,7.247791,0.964699,3.967234,-2.882196,-9.525711,-9.941463,-4.419277,4.495017,-9.821557,0.852523],[-9.497259,-7.088123,4.911591,-2.735356,1.164047,8.415177,-2.170018,-6.437428,1.042374,4.591755,2.164791],[-7.762550,9.374161,-7.878948,0.179690,8.490138,-6.655221,-0.666881,8.690829,2.009549,7.188944,1.422772]],[[3.571791,2.026981,2.244525,1.904580,3.314329,-7.453763,0.349101,-3.152183,-0.645302,-6.471184,1.465759],[-3.830506,-2.128684,0.112576,-3.266443,7.070871,-8.058385,3.335224,-6.889872,-8.393144,-1.105418,-5.353551],[-3.970614,-1.216034,-2.925849,2.771857,-4.227458,-5.769918,2.731298,-6.227732,0.902876,-2.883150,5.940188],[8.958515,-2.307075,9.177109,-8.233511,-0.248638,-8.418039,1.375083,-3.721649,-4.053019,3.843639,6.166778],[-6.200567,-5.793838,2.154291,2.533861,-1.648767,-5.730289,1.516714,-0.594420,5.473026,-1.342914,2.621617],[-2.012867,-4.642629,-2.033128,-8.177608,4.713897,-9.071714,-1.611172,-3.233861,-3.284322,-4.005194,2.268667],[-4.662091,1.600371,-3.995428,5.718986,8.281293,7.379552,-4.033373,2.741825,5.011681,2.439794,6.422819],[-7.484133,0.300929,-4.903149,8.223527,4.016909,3.499236,-9.312924,-0.746446,-7.020098,4.410720,-0.778037],[4.281528,-4.077257,-4.633629,-6.198953,3.390754,1.035754,8.292101,-1.678942,0.354205,-1.365616,-7.090563],[-9.893660,-5.969171,9.984977,7.201837,2.768727,3.172937,2.670360,6.899260,4.399665,-4.219397,-3.548505]],[[2.381623,5.172532,-4.983797,5.193919,-1.992329,-3.714183,-6.617867,-7.980916,1.172004,5.187629,-2.713171],[-1.419863,-9.043398,-7.514464,-1.348490,3.407020,-8.579531,-7.394447,-9.950852,6.660144,6.315217,-9.589009],[0.001719,4.324107,-7.771160,-3.975243,-3.527476,1.606442,-7.637884,7.599239,-9.908848,-0.359616,1.483216],[9.685299,9.391340,-7.323984,-6.449437,-0.401072,-3.317094,-4.688384,-3.130534,7.979641,5.695662,-3.531273],[-4.112442,-8.484151,-3.607368,8.627355,4.044892,1.764376,-9.733281,-7.666632,-9.546398,-6.248397,-8.270385],[-2.209574,3.699726,9.209949,-1.747750,0.343743,-6.035051,4.628082,-8.804497,-8.428949,7.130201,-0.465690],[-3.217305,9.380973,-3.377328,0.592174,-8.652916,1.920504,8.642254,2.235613,-3.535428,-2.425719,-0.509608],[1.526033,4.042404,6.736647,-5.625800,-8.702780,-5.237646,2.499495,1.110499,7.023009,-5.312078,-4.178169],[-0.850451,5.945115,-8.771324,1.807812,5.757588,0.160449,-3.203573,-1.145948,2.155341,0.166218,-6.801022],[-1.855243,3.230623,6.802516,-8.467458,9.762394,7.750422,-6.606187,4.602388,0.430566,-4.931690,6.664818]]], dtype = "float32")#candidate|3330|(4, 10, 11)|const|float32
uop_3331 = relay.erf(const_3330.astype('float32')) # shape=(4, 10, 11)
func_3188_call = mod.get_global_var('func_3188')
func_3192_call = mutated_mod.get_global_var('func_3192')
const_3335 = relay.const([-6,-3,7,5,-7,-4,5,4,-4,-3,8,10,2,-1,2,2,9,10,1,9,-2,-2,-6,-7,9,5,-4,1,1,-10,-4,-10,10,-10,-7,2,-3,-4,-1,7,1,-9,-7,10,-4,10,7,-2,3,-9,-10,-8,3,2,-5,8,-1,10,9,7,-4,-1,8,-5,5,9,-5,10,1,4,1,1,-8,1,4,-1,4,7,-7,-2,8], dtype = "uint32")#candidate|3335|(81,)|const|uint32
var_3336 = relay.var("var_3336", dtype = "uint16", shape = (10,))#candidate|3336|(10,)|var|uint16
var_3337 = relay.var("var_3337", dtype = "uint16", shape = (100,))#candidate|3337|(100,)|var|uint16
call_3334 = relay.TupleGetItem(func_3188_call(relay.reshape(const_3335.astype('uint32'), [1, 9, 9]), relay.reshape(var_3336.astype('uint16'), [10,]), relay.reshape(var_3337.astype('uint16'), [100,]), ), 0)
call_3338 = relay.TupleGetItem(func_3192_call(relay.reshape(const_3335.astype('uint32'), [1, 9, 9]), relay.reshape(var_3336.astype('uint16'), [10,]), relay.reshape(var_3337.astype('uint16'), [100,]), ), 0)
output = relay.Tuple([uop_3331,call_3334,const_3335,var_3336,var_3337,])
output2 = relay.Tuple([uop_3331,call_3338,const_3335,var_3336,var_3337,])
func_3342 = relay.Function([var_3336,var_3337,], output)
mod['func_3342'] = func_3342
mod = relay.transform.InferType()(mod)
mutated_mod['func_3342'] = func_3342
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3342_call = mutated_mod.get_global_var('func_3342')
var_3344 = relay.var("var_3344", dtype = "uint16", shape = (10,))#candidate|3344|(10,)|var|uint16
var_3345 = relay.var("var_3345", dtype = "uint16", shape = (100,))#candidate|3345|(100,)|var|uint16
call_3343 = func_3342_call(var_3344,var_3345,)
output = call_3343
func_3346 = relay.Function([var_3344,var_3345,], output)
mutated_mod['func_3346'] = func_3346
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3371 = relay.var("var_3371", dtype = "float32", shape = (12, 10, 5))#candidate|3371|(12, 10, 5)|var|float32
uop_3372 = relay.log(var_3371.astype('float32')) # shape=(12, 10, 5)
const_3375 = relay.const([[[5.617625,-2.803068,5.091519,0.521272,0.719590],[6.275470,-6.486898,0.055562,2.540737,2.508863],[-2.994776,-6.987519,-3.311735,3.505326,2.643548],[0.299399,-2.966026,7.500586,-2.175174,-8.719034],[-7.056657,-9.101137,7.264860,2.026842,1.123841],[-4.035482,-8.501338,-2.701703,2.369603,3.521018],[-9.113936,6.223832,-8.540221,2.409094,8.215190],[-4.592513,8.121906,5.440801,-8.101076,3.144402],[0.789651,-6.490453,-3.017195,-8.797885,-6.763454],[-7.407683,-6.335147,-3.128793,-7.858518,7.096222]],[[4.489821,-0.073929,4.004440,2.731052,-7.312086],[5.195766,-1.351130,3.691431,-7.559985,-1.208359],[4.819811,0.387716,-3.089378,-5.611951,2.901727],[-7.510669,-8.415362,9.456555,-1.197584,9.485749],[4.589489,4.818271,-6.226276,-5.897323,-7.872420],[-7.073413,1.545521,-9.025599,7.278041,6.722027],[-3.404894,9.356004,-4.666266,-9.109037,0.881771],[4.405882,-2.466110,-9.421655,-7.651723,6.426411],[9.963343,-1.890195,-1.137518,-9.799951,-0.359368],[-0.488397,1.781934,7.022170,3.620570,0.894611]],[[0.690488,6.240137,9.510378,0.676735,5.403324],[-8.033122,-4.457050,3.912200,6.098369,-4.076491],[4.759859,3.560911,-3.943983,-7.390176,-9.600903],[-8.115391,3.334449,-8.010239,8.918990,-2.345014],[-9.147998,3.553015,8.364417,0.170286,-3.531560],[-1.652697,1.734605,-1.060554,-5.839691,2.572050],[-1.271570,3.146172,2.055550,-9.024412,1.806410],[6.354209,-3.510513,-1.196338,-1.666886,-7.659734],[0.957510,-3.243391,-4.780336,-6.355426,-2.675996],[-2.587666,0.742604,-2.331560,9.450447,4.993400]],[[0.723319,-8.981471,2.336927,3.697776,0.807961],[-0.254713,4.560634,0.327277,6.712272,-8.146000],[0.291133,5.762809,-0.672263,5.889112,-5.510612],[-1.996484,-6.622080,1.008908,7.293241,5.671888],[0.068053,0.166640,-8.865676,-9.768087,-5.984294],[6.143488,0.436907,-2.555445,-1.824128,5.581099],[-4.044622,-3.612460,6.268895,-1.150351,8.403735],[9.882368,0.593791,5.746457,1.493338,-8.523078],[-0.159654,8.733307,-4.956741,-7.247717,7.304712],[7.177870,5.724532,-2.620528,-2.296543,-3.057625]],[[-8.892578,-3.461261,-5.773217,-6.086118,3.103230],[-2.463784,-4.963337,-6.981603,0.321660,-2.334902],[-4.975565,4.931460,3.999513,-4.217474,-0.529394],[3.002282,-3.309767,4.014630,9.730197,-9.824941],[-5.188142,6.417628,-6.147766,5.061650,-3.345715],[4.176330,5.444229,-4.654704,-2.818397,-9.961390],[5.517485,-8.489466,4.290186,9.320622,9.890379],[-9.686675,-6.939026,-9.962966,3.311691,-0.436245],[1.531939,-6.944282,-1.443388,-8.835169,-7.901504],[-7.842381,-0.974987,3.088480,-0.748123,1.860770]],[[6.545238,6.722299,6.420057,-2.513389,6.333795],[-6.058880,-1.189797,9.654128,4.007344,-2.756120],[0.744951,-0.674383,9.208751,7.501249,-2.944605],[6.537176,-8.340405,9.227147,-5.215324,-9.046681],[-8.195791,6.555870,-6.634673,-2.218487,-3.772189],[2.429403,0.915167,7.748383,8.430114,-5.687760],[2.086173,8.932592,-0.756599,7.565612,2.449882],[-9.953484,-8.109325,-7.642155,-4.051542,2.733757],[1.787483,-0.967713,-8.756305,3.210537,1.270026],[1.000402,0.565828,-8.121540,0.876843,6.045809]],[[-1.833795,-2.864233,6.436841,1.536275,1.629282],[-7.158310,7.652475,9.794025,-6.282270,9.565780],[-6.368126,4.473639,-3.461526,8.249868,0.974864],[-4.126064,-6.468282,0.130415,7.014295,-2.610723],[0.211871,-6.986612,1.739367,-9.899946,-9.768104],[8.013641,-2.787797,5.043059,9.605575,-6.724662],[3.267301,-9.596693,7.425474,9.403982,-4.325340],[-3.965540,-9.613316,-0.654802,-5.906116,4.562663],[-5.702903,-1.242888,9.053721,8.871580,-7.972037],[-2.719601,-6.365698,-4.054835,-8.164402,9.849123]],[[4.137189,-9.859630,-1.954968,1.970187,7.688615],[7.132247,-3.378335,-0.218408,2.647503,-5.002474],[2.429447,3.549210,0.727907,1.325916,8.892013],[-1.192008,-6.855935,-7.917955,6.832415,-4.418412],[1.002182,-7.187462,6.812030,4.077712,6.779910],[-7.566566,-1.649823,-7.941558,0.589161,9.370479],[-4.665457,4.609399,-6.744408,9.217991,-0.902631],[-3.933864,-6.782325,0.169907,3.150555,-4.002696],[-6.870764,8.671117,6.592935,-1.005693,-7.975989],[9.940563,3.004005,1.268630,4.500677,3.871297]],[[-6.168040,1.246092,-8.317063,-4.878112,3.790122],[-0.762921,-5.067152,8.437374,-9.853899,-3.969498],[9.369741,3.403026,1.829569,4.684322,-4.022726],[-9.882780,-0.455202,7.765050,-4.896766,0.504188],[-0.559164,2.346764,6.813213,-0.726309,-8.396612],[-6.717785,4.721214,-0.602296,3.284251,8.397789],[-1.900639,-7.213036,6.822813,5.183210,-6.190907],[3.256273,5.361252,6.782412,1.917942,-1.230299],[-2.791541,-3.214891,-1.757235,-2.345343,-5.287238],[6.101419,6.783083,1.896732,8.428820,-2.818660]],[[5.789568,6.182359,-3.173789,-5.785485,-0.362493],[3.813353,2.912858,-4.437224,-5.777065,4.256393],[-6.305444,6.697366,4.139790,-7.323164,-7.691540],[-9.930321,4.686633,-6.024049,-8.316244,5.693294],[5.165975,9.188813,-3.336980,-6.930663,0.460833],[0.800552,2.206674,4.407829,-1.539683,2.044989],[8.013869,-8.707742,5.671452,-7.217298,4.205129],[2.311845,2.309681,-8.631709,-0.698283,-3.517932],[-8.154832,-5.839543,8.873470,-3.871262,7.380640],[-0.243232,9.309784,9.348526,3.720772,-2.800850]],[[-1.211722,1.215696,3.560010,6.753735,-6.525909],[9.775995,-5.516829,-0.753878,1.380991,5.364342],[1.035587,5.853139,-9.198987,3.599148,2.730257],[2.401981,0.781436,7.252135,-4.242040,8.499134],[-1.184347,0.798914,-4.621788,-8.654080,1.209411],[-8.089802,6.364635,4.061210,8.067123,7.647962],[0.813506,-8.299458,3.757878,7.258700,-8.000763],[9.444939,9.828814,7.695528,-3.696702,2.820988],[3.352779,-1.375157,-8.699313,1.049930,7.534984],[-6.429251,5.406103,8.004704,-5.780028,-3.605277]],[[2.684439,7.350141,-0.405500,-3.117961,3.626888],[-9.351085,-4.092471,4.244223,2.290377,-1.319516],[-6.321018,7.368957,8.129120,-3.719793,4.928527],[-1.672560,-6.950030,5.957089,5.744205,-5.883629],[7.096847,5.844734,8.552519,-3.305634,7.099298],[9.797919,3.423452,6.485353,-8.661104,-9.939529],[-8.025853,-8.732786,2.502186,-7.495211,-1.752507],[2.820954,6.191766,5.149117,6.436037,7.229782],[-2.137481,-6.334130,3.024469,-4.479027,-9.932463],[6.469116,2.051708,8.423846,2.107029,4.714048]]], dtype = "float32")#candidate|3375|(12, 10, 5)|const|float32
bop_3376 = relay.add(uop_3372.astype('float64'), relay.reshape(const_3375.astype('float64'), relay.shape_of(uop_3372))) # shape=(12, 10, 5)
output = relay.Tuple([bop_3376,])
output2 = relay.Tuple([bop_3376,])
func_3384 = relay.Function([var_3371,], output)
mod['func_3384'] = func_3384
mod = relay.transform.InferType()(mod)
mutated_mod['func_3384'] = func_3384
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3385 = relay.var("var_3385", dtype = "float32", shape = (12, 10, 5))#candidate|3385|(12, 10, 5)|var|float32
func_3384_call = mutated_mod.get_global_var('func_3384')
call_3386 = func_3384_call(var_3385)
output = call_3386
func_3387 = relay.Function([var_3385], output)
mutated_mod['func_3387'] = func_3387
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3434 = relay.var("var_3434", dtype = "uint32", shape = ())#candidate|3434|()|var|uint32
var_3435 = relay.var("var_3435", dtype = "uint32", shape = (12, 2, 11))#candidate|3435|(12, 2, 11)|var|uint32
bop_3436 = relay.multiply(var_3434.astype('uint32'), var_3435.astype('uint32')) # shape=(12, 2, 11)
func_1419_call = mod.get_global_var('func_1419')
func_1423_call = mutated_mod.get_global_var('func_1423')
const_3440 = relay.const([[True,False,True,False,True,False,True,True,True,False,True,True,True,False,False,False,True,True,True,False,False,False,False,False,True,True,True,True,True,False,True,False,False,True,True,True,True,False,False,True,False,True,False,False,False,False,False,True,True,True,True,True,False,False,True,True,True,False,True,False,False,False,True,True,True,False,False,True,False,True,False,True,False,False,True,False,False,True,True,False,True,True,True,True,True,True,False,False,True,True,False,False,False,True,True,True,True,True,False,False],[False,False,True,True,False,False,True,True,True,True,True,False,False,False,True,True,True,False,True,True,True,True,True,True,True,False,True,False,True,True,False,False,False,True,True,False,True,False,True,True,True,False,True,True,True,True,False,False,True,True,True,False,True,False,False,False,False,True,False,False,False,True,False,False,False,True,True,False,True,False,True,True,True,False,False,False,True,True,False,False,False,False,True,True,False,True,True,True,False,False,True,False,True,True,True,True,False,False,True,True],[False,False,False,True,True,True,True,False,False,False,True,False,False,False,False,False,True,True,True,True,True,False,True,False,True,False,False,True,False,True,True,True,False,True,False,True,False,False,True,False,False,False,True,False,False,True,False,True,False,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False,False,True,False,False,False,True,False,True,False,False,True,True,True,True,True,True,True,True,True,True,False,True,False,False,True,True,False,True,True,False,True,True,True,False,False],[False,True,False,True,True,True,False,False,False,True,True,True,True,True,False,False,True,False,False,True,True,True,False,False,False,False,False,False,False,False,False,False,True,False,True,False,True,True,False,True,True,True,False,False,False,True,False,True,True,True,True,False,False,True,False,True,True,False,True,True,False,True,True,True,True,False,True,True,False,True,False,True,True,True,True,True,False,True,True,True,False,False,True,True,True,True,False,False,False,True,False,False,False,True,False,True,False,True,False,False],[True,True,True,False,False,False,True,False,True,False,True,False,False,False,True,True,True,True,False,True,False,False,False,False,True,False,True,True,True,False,True,False,True,False,False,True,False,False,True,False,False,False,False,True,False,True,False,True,False,False,True,False,False,True,False,False,True,True,True,False,True,True,True,False,True,True,True,False,True,False,False,False,False,False,True,False,True,True,False,True,False,True,True,False,False,True,False,True,False,False,True,False,True,False,False,False,False,False,False,True],[False,False,True,True,False,False,True,True,False,True,False,False,False,True,False,False,False,True,True,True,True,True,True,False,True,True,False,True,True,True,True,False,True,False,True,False,True,False,True,True,False,False,True,False,True,True,True,False,False,False,True,True,True,False,True,True,True,False,False,True,True,True,True,False,False,False,False,True,False,False,False,False,False,True,True,True,False,False,True,True,False,False,False,False,False,False,True,False,False,True,True,True,True,False,True,True,False,False,False,False],[False,False,True,False,True,False,True,True,False,True,False,False,True,True,False,False,True,True,False,True,True,True,False,False,True,True,True,True,True,True,True,True,True,False,True,False,False,True,True,False,False,False,True,True,True,True,True,False,True,True,True,False,False,True,False,True,False,True,False,False,False,False,True,True,False,True,True,True,False,False,True,False,False,False,True,True,False,True,True,True,False,False,True,True,True,True,False,False,False,True,False,False,True,True,True,True,False,False,False,False],[False,False,False,True,False,False,False,False,True,False,True,True,False,False,False,False,True,True,False,True,False,False,True,True,True,False,False,False,False,True,False,True,True,True,False,True,True,False,False,False,False,True,True,True,False,False,True,True,True,True,True,True,True,False,False,False,True,False,False,True,True,True,False,False,False,False,False,True,True,False,True,True,True,False,False,True,False,True,True,True,False,False,False,True,False,False,False,True,True,False,True,False,True,True,True,True,False,True,False,True],[True,True,False,False,False,True,False,False,False,True,False,True,True,False,False,True,True,False,True,False,True,False,False,False,True,True,False,True,False,False,False,True,False,True,False,False,False,False,False,False,True,False,True,False,True,False,True,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,True,False,False,True,False,True,True,True,True,True,True,False,True,False,False,True,True,False,True,True,True,True,True,True,True,True,True,True,True,True,False,False,True,False,True,True]], dtype = "bool")#candidate|3440|(9, 100)|const|bool
call_3439 = relay.TupleGetItem(func_1419_call(relay.reshape(const_3440.astype('bool'), [12, 15, 5]), relay.reshape(const_3440.astype('bool'), [12, 15, 5]), ), 0)
call_3441 = relay.TupleGetItem(func_1423_call(relay.reshape(const_3440.astype('bool'), [12, 15, 5]), relay.reshape(const_3440.astype('bool'), [12, 15, 5]), ), 0)
bop_3449 = relay.not_equal(var_3434.astype('bool'), bop_3436.astype('bool')) # shape=(12, 2, 11)
uop_3470 = relay.acosh(var_3435.astype('float32')) # shape=(12, 2, 11)
output = relay.Tuple([call_3439,const_3440,bop_3449,uop_3470,])
output2 = relay.Tuple([call_3441,const_3440,bop_3449,uop_3470,])
func_3476 = relay.Function([var_3434,var_3435,], output)
mod['func_3476'] = func_3476
mod = relay.transform.InferType()(mod)
var_3477 = relay.var("var_3477", dtype = "uint32", shape = ())#candidate|3477|()|var|uint32
var_3478 = relay.var("var_3478", dtype = "uint32", shape = (12, 2, 11))#candidate|3478|(12, 2, 11)|var|uint32
output = func_3476(var_3477,var_3478,)
func_3479 = relay.Function([var_3477,var_3478,], output)
mutated_mod['func_3479'] = func_3479
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3624 = relay.var("var_3624", dtype = "bool", shape = (16, 4, 12))#candidate|3624|(16, 4, 12)|var|bool
var_3625 = relay.var("var_3625", dtype = "bool", shape = (16, 4, 12))#candidate|3625|(16, 4, 12)|var|bool
bop_3626 = relay.logical_or(var_3624.astype('bool'), relay.reshape(var_3625.astype('bool'), relay.shape_of(var_3624))) # shape=(16, 4, 12)
output = bop_3626
output2 = bop_3626
func_3651 = relay.Function([var_3624,var_3625,], output)
mod['func_3651'] = func_3651
mod = relay.transform.InferType()(mod)
var_3652 = relay.var("var_3652", dtype = "bool", shape = (16, 4, 12))#candidate|3652|(16, 4, 12)|var|bool
var_3653 = relay.var("var_3653", dtype = "bool", shape = (16, 4, 12))#candidate|3653|(16, 4, 12)|var|bool
output = func_3651(var_3652,var_3653,)
func_3654 = relay.Function([var_3652,var_3653,], output)
mutated_mod['func_3654'] = func_3654
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3759 = relay.var("var_3759", dtype = "int8", shape = (9, 4, 13))#candidate|3759|(9, 4, 13)|var|int8
var_3760 = relay.var("var_3760", dtype = "int8", shape = (9, 4, 13))#candidate|3760|(9, 4, 13)|var|int8
bop_3761 = relay.bitwise_xor(var_3759.astype('int8'), relay.reshape(var_3760.astype('int8'), relay.shape_of(var_3759))) # shape=(9, 4, 13)
output = bop_3761
output2 = bop_3761
func_3780 = relay.Function([var_3759,var_3760,], output)
mod['func_3780'] = func_3780
mod = relay.transform.InferType()(mod)
mutated_mod['func_3780'] = func_3780
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3780_call = mutated_mod.get_global_var('func_3780')
var_3782 = relay.var("var_3782", dtype = "int8", shape = (9, 4, 13))#candidate|3782|(9, 4, 13)|var|int8
var_3783 = relay.var("var_3783", dtype = "int8", shape = (9, 4, 13))#candidate|3783|(9, 4, 13)|var|int8
call_3781 = func_3780_call(var_3782,var_3783,)
output = call_3781
func_3784 = relay.Function([var_3782,var_3783,], output)
mutated_mod['func_3784'] = func_3784
mutated_mod = relay.transform.InferType()(mutated_mod)
const_3924 = relay.const([[[6.853020,-6.147028,7.466639,-9.895391,8.659789,-7.645466,2.361146,0.489014,5.991019,-4.781954,-0.822037,2.321157,-3.261426,-7.469272,-9.019884],[-9.620679,-5.162980,8.919647,4.861755,1.529778,-0.820733,9.543927,5.084801,4.860571,-3.545788,-6.766365,-2.954760,-1.405530,6.185991,-2.569180],[-5.995515,5.878896,5.631223,-6.672576,-9.054384,-6.925490,5.753330,3.911995,-0.014282,2.106630,-7.389937,-1.170561,-3.251125,7.728804,1.019319],[3.063930,-1.869299,-6.640851,5.500315,-5.192585,-8.443806,-2.910056,-8.981414,7.878709,-5.523395,2.429301,-4.530184,2.232992,-6.879465,-3.369036],[-8.417588,5.044986,-9.996059,1.298589,-1.930952,-3.711042,-9.371376,9.095910,-3.139088,1.190722,7.639002,4.162107,-7.284596,-7.942454,6.419617],[7.462054,-0.482790,1.774147,-4.031315,-4.802140,-0.441337,-8.913026,-4.841165,-4.507127,-0.991873,6.454771,-9.127816,9.849901,-3.476268,-0.402396],[-2.771684,5.739130,-5.992893,5.439071,9.756715,-1.106951,-0.249696,-6.339586,-0.557303,1.638787,4.720630,-7.687514,4.809835,-0.750578,-0.209192],[-3.833129,-1.187723,4.096348,-5.048900,-4.262693,3.681515,2.584073,6.850051,-4.782281,-8.145762,-4.527751,-9.464477,-4.675900,-8.846846,3.025707],[7.412114,6.681780,-8.806896,-1.274823,9.894715,-5.099685,7.554714,5.508349,-7.684909,-0.186519,1.477733,-3.912017,-9.817922,-1.290565,9.839776],[8.217049,2.543351,3.269343,7.059508,-6.931369,-7.390990,9.762813,-4.714455,-8.770079,-5.051079,-5.750105,1.589067,-1.889379,2.733003,-8.236420],[-3.574621,2.671480,-9.734623,2.935222,-2.926876,-2.659929,2.615961,9.596397,-3.588878,-3.834676,-5.623601,6.705799,2.232761,8.033931,-2.662885],[2.412589,2.309080,-8.433975,4.345918,-9.104982,4.498069,-0.598372,-5.655091,-6.965786,1.716946,-9.145561,3.089575,6.828860,0.088304,0.648233]],[[-3.324795,-7.809768,9.767034,5.928663,2.112311,9.950401,1.727670,2.048199,0.264059,-8.027375,-4.261659,-3.839588,-4.939610,-4.725338,5.670150],[9.699697,-7.552293,9.278949,-3.461611,5.963042,-5.950054,-9.629508,-9.681004,-6.638844,-8.319898,0.616291,4.482684,-9.261276,1.314536,1.700243],[3.580803,5.040994,-7.952975,2.820858,3.100662,-1.070238,5.332147,7.146829,-1.374560,5.526892,7.627082,1.817764,2.575231,-9.835766,-8.354489],[2.224052,5.536125,-4.918369,1.656046,-8.682366,-9.449782,0.882165,-9.009135,1.193339,-7.377397,0.357480,5.771234,-5.952987,-1.130486,-2.328920],[-0.777711,-8.896732,-2.889380,6.253657,0.775945,-4.159453,8.573625,6.204254,9.373618,-9.842252,-2.059223,3.804080,6.191291,-2.111114,-9.729097],[-2.433027,-2.717666,-1.747484,7.451974,-3.543637,-4.829671,-8.558600,-0.593602,1.966308,6.539803,8.298678,7.029268,4.139762,-2.615075,-5.956237],[-3.629084,0.784441,-6.837976,1.381006,-0.514373,-5.933668,9.920010,-8.882686,-9.260585,2.812211,1.884592,9.074609,3.810259,2.196392,-5.165014],[-0.966111,8.537300,3.945540,-7.416940,1.298543,0.836732,6.479467,0.809645,-0.980851,9.316455,3.146195,0.535687,0.196904,5.246230,-1.440417],[-6.396868,6.353829,9.338810,6.945404,7.983781,-1.490323,-8.119325,6.736802,5.385134,-0.018382,7.851413,9.643979,-2.834699,7.709881,-7.548498],[-8.666668,4.675842,-2.907724,-1.475284,-8.362840,-6.032467,-2.136618,-1.719740,-1.381722,-4.372872,-2.994954,-5.430182,-5.648912,-8.757071,8.023383],[6.841333,2.403878,6.828361,8.052784,-0.359739,7.651408,-1.459649,8.399720,-6.617099,-4.150411,-7.265098,-6.165795,3.451284,-9.954160,8.301086],[-7.212456,9.731264,1.364315,8.564555,-5.040939,-1.753517,-0.785040,-9.275781,6.299041,-8.433088,2.454880,-7.516369,0.248061,-2.744291,6.661958]],[[4.133627,-0.047390,0.371428,7.869781,1.149946,-5.641474,-8.125328,-3.604218,4.662847,9.319157,-3.640176,-8.462685,-8.433976,-8.191457,0.619249],[-8.236586,4.516247,0.721031,-9.148569,0.546354,1.922466,1.863199,-4.282634,-6.204000,3.820670,9.615599,-9.754007,-4.103204,-3.510677,1.194580],[-4.363201,-7.556201,-3.944858,9.635780,7.102597,-3.388030,-5.920547,-1.808656,-8.677514,-7.223361,-0.851175,8.718198,-9.944506,2.720843,-7.946563],[-6.714234,7.881938,-6.061852,8.980810,-2.957680,-9.119630,5.703958,4.187005,0.122903,-2.343817,0.884048,-1.347247,3.326278,2.706545,3.408185],[9.839841,-9.937168,-0.864227,-1.985702,-5.127015,-6.980386,-9.622049,-0.464733,6.937080,9.948882,4.624113,-5.353981,8.471013,-8.900311,2.059779],[-8.445204,-4.236424,6.115423,2.724217,-0.250644,-8.363401,-7.484858,-1.478011,-5.400315,-3.591892,9.150234,3.723224,6.154602,0.634196,2.308410],[8.718200,6.780816,-7.844748,7.736894,-0.824912,-3.936052,-7.134894,5.632393,2.141140,2.530065,9.681868,2.110898,-6.973460,4.910111,9.597325],[-1.803090,-4.482290,-3.630770,-0.088473,-7.667233,0.342716,-1.605610,3.597686,-8.693201,9.946010,5.168996,-2.352523,9.686200,8.883896,-1.200572],[5.496238,-7.103597,-3.813291,6.756445,-0.775800,3.847003,-6.171071,3.506712,-5.807040,-3.076100,3.303569,-9.985563,-0.221830,0.886417,2.175311],[-3.139967,-9.392347,-6.536802,2.221975,-2.692506,-8.764377,1.220476,2.683630,-4.202154,-9.037386,0.505974,-0.924706,1.831890,-8.514655,8.345083],[-8.976896,-1.523735,-3.726222,1.643081,-8.322697,5.351826,-4.417965,7.719281,4.286872,7.176203,-1.535012,-9.730738,-9.217478,-0.303111,-2.266489],[-5.465001,5.675646,4.946007,-5.805122,-7.016575,-1.319564,5.083375,-7.997599,-0.725675,-9.647580,-7.536688,2.433535,-3.969086,-6.570146,-7.801514]]], dtype = "float64")#candidate|3924|(3, 12, 15)|const|float64
uop_3925 = relay.cosh(const_3924.astype('float64')) # shape=(3, 12, 15)
func_3476_call = mod.get_global_var('func_3476')
func_3479_call = mutated_mod.get_global_var('func_3479')
var_3951 = relay.var("var_3951", dtype = "uint32", shape = ())#candidate|3951|()|var|uint32
const_3952 = relay.const([[5,-2,-8,7,-8,-5,6,9,-7,-5,7,8,10,2,1,5,-1,7,8,7,8,4,4,-8,-8,-3,9,-7,-5,-10,-10,-4,-3,-10,7,-8,-9,-7,-6,3,-7,8,-8,-6],[5,-1,4,6,10,-10,-3,-10,-1,-5,-3,2,7,-8,7,7,-2,9,-8,3,10,3,-2,-8,-1,1,-3,5,-2,-2,9,-1,10,6,4,5,5,-1,-2,-1,2,-8,2,5],[-6,-5,6,5,7,-5,-5,6,8,-8,-6,5,10,5,5,-9,6,-6,-9,10,4,-6,-6,8,2,6,6,8,-5,1,-2,2,4,2,-9,-1,8,4,2,9,10,3,-7,4],[-5,-3,-7,7,-1,7,1,-6,7,-4,2,2,3,7,-8,3,10,-2,-8,-10,-8,-2,-5,10,8,1,-1,1,-10,-3,1,-2,9,10,5,-10,-7,3,-1,-5,9,7,1,-4],[-6,1,-3,2,9,1,2,-8,-4,-4,-6,-3,7,6,8,2,5,5,6,-1,-9,-2,4,3,-3,-4,-6,-5,-7,-2,9,10,5,3,5,10,-6,7,2,-9,-7,-3,8,-5],[-9,9,-10,3,6,-9,-1,7,1,9,-3,10,1,-2,-3,3,5,1,5,-1,1,-4,-8,10,-6,-7,-5,-1,-2,5,-2,-9,-4,-2,-2,2,10,-6,6,2,-2,10,-5,4]], dtype = "uint32")#candidate|3952|(6, 44)|const|uint32
call_3950 = relay.TupleGetItem(func_3476_call(relay.reshape(var_3951.astype('uint32'), []), relay.reshape(const_3952.astype('uint32'), [12, 2, 11]), ), 2)
call_3953 = relay.TupleGetItem(func_3479_call(relay.reshape(var_3951.astype('uint32'), []), relay.reshape(const_3952.astype('uint32'), [12, 2, 11]), ), 2)
output = relay.Tuple([uop_3925,call_3950,var_3951,const_3952,])
output2 = relay.Tuple([uop_3925,call_3953,var_3951,const_3952,])
func_3959 = relay.Function([var_3951,], output)
mod['func_3959'] = func_3959
mod = relay.transform.InferType()(mod)
var_3960 = relay.var("var_3960", dtype = "uint32", shape = ())#candidate|3960|()|var|uint32
output = func_3959(var_3960)
func_3961 = relay.Function([var_3960], output)
mutated_mod['func_3961'] = func_3961
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4149 = relay.var("var_4149", dtype = "uint32", shape = (10, 4, 5))#candidate|4149|(10, 4, 5)|var|uint32
const_4150 = relay.const([[[-2,-7,-5,4,8],[-2,3,9,-7,10],[2,6,9,5,-3],[-9,1,9,6,-10]],[[9,1,-3,3,3],[-8,5,4,-9,3],[1,-5,8,2,1],[2,4,-2,-6,-1]],[[-8,-3,-2,-7,8],[-2,-2,3,5,7],[7,-8,3,-2,-6],[-7,1,-7,8,5]],[[-2,7,8,-5,7],[-2,1,7,-1,2],[-1,2,-10,-6,-3],[-4,-2,10,-3,4]],[[6,4,6,-1,2],[6,2,-9,7,1],[-8,4,10,-9,-10],[2,-7,-5,-10,1]],[[10,9,-5,6,-4],[1,-4,10,-2,6],[2,-8,-6,1,9],[-10,-9,-3,-7,-6]],[[6,3,-4,-3,-3],[-8,8,-3,1,8],[8,-9,9,1,2],[9,5,-9,6,-7]],[[2,-4,-1,3,-5],[-2,-1,9,-6,9],[8,-6,-9,-3,-7],[-4,6,-7,6,-9]],[[-3,3,-5,-7,3],[-6,4,-3,5,8],[6,10,1,-9,9],[10,-10,-7,7,3]],[[-8,2,-1,4,3],[-9,-5,9,6,5],[-7,-7,-9,-3,8],[8,-6,-9,7,4]]], dtype = "uint32")#candidate|4150|(10, 4, 5)|const|uint32
bop_4151 = relay.minimum(var_4149.astype('uint32'), relay.reshape(const_4150.astype('uint32'), relay.shape_of(var_4149))) # shape=(10, 4, 5)
func_1184_call = mod.get_global_var('func_1184')
func_1188_call = mutated_mod.get_global_var('func_1188')
const_4174 = relay.const([2,7,4,9,10,4,3,-9,1,10,5,6,10,-2,1,-2,-9,-2,-1,-2,1,2,-8,-8,10,-8,10,10,-9,4,-8,-10,7,1,-3,10,9,-7,3,-3,1,-8,9,-10,-10,6,-1,6,-8,-6,2,-6,8,-7,9,3,-5,-1,-1,-1,-5,9,-3,2,4,6,-5,-6,-8,-5,-2,6,-3,2,-10,-5,9,-1,-10,6,2,-9,-4,2,-7,8,-5,-9,-3,-2,-1,10,-2,-2,5,-6,2,3,-2,10,2,-1,2,5,8,-10,4,-8,-10,-9,-2,1,-4,-10,1,-6,-7,10,-4,5,-4,-10,5,-7,2,-10], dtype = "int32")#candidate|4174|(126,)|const|int32
call_4173 = relay.TupleGetItem(func_1184_call(relay.reshape(const_4174.astype('int32'), [3, 7, 6]), relay.reshape(const_4174.astype('int32'), [3, 7, 6]), ), 0)
call_4175 = relay.TupleGetItem(func_1188_call(relay.reshape(const_4174.astype('int32'), [3, 7, 6]), relay.reshape(const_4174.astype('int32'), [3, 7, 6]), ), 0)
output = relay.Tuple([bop_4151,call_4173,const_4174,])
output2 = relay.Tuple([bop_4151,call_4175,const_4174,])
func_4187 = relay.Function([var_4149,], output)
mod['func_4187'] = func_4187
mod = relay.transform.InferType()(mod)
var_4188 = relay.var("var_4188", dtype = "uint32", shape = (10, 4, 5))#candidate|4188|(10, 4, 5)|var|uint32
output = func_4187(var_4188)
func_4189 = relay.Function([var_4188], output)
mutated_mod['func_4189'] = func_4189
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4355 = relay.var("var_4355", dtype = "uint64", shape = (15, 13, 10))#candidate|4355|(15, 13, 10)|var|uint64
const_4356 = relay.const([[[2,4,-9,9,-1,-1,7,2,6,-10],[9,8,5,5,4,-7,-7,4,7,3],[2,-4,-8,10,-6,9,-2,-1,4,8],[4,-6,-6,9,6,1,8,9,-2,9],[9,3,4,8,-2,10,4,8,-6,5],[-3,-2,-2,8,-7,-3,-7,-8,10,1],[-6,9,6,-2,-6,-6,5,-9,-8,2],[4,-4,4,1,1,8,-4,-7,-2,-7],[-8,-7,-3,-2,5,-8,1,-9,-5,-9],[-4,-4,-1,1,2,6,-10,-2,1,-4],[10,-5,-4,-6,-7,-5,-3,1,10,1],[-9,1,-10,-4,9,-9,-2,9,-9,4],[1,6,8,2,-9,-7,10,2,3,2]],[[8,10,-6,-5,-6,-10,8,-3,-5,-2],[7,-7,-9,6,-6,3,-10,3,2,10],[7,-4,-7,-1,1,-1,7,5,8,8],[-10,8,-4,5,-9,1,-4,-2,2,-7],[1,1,-7,-3,-10,9,-4,1,9,1],[8,7,8,4,3,3,9,-1,4,1],[7,-5,8,6,-9,-9,-10,10,-4,-8],[-8,-2,-6,-5,-8,-4,8,-3,-3,-6],[-7,-3,9,-7,-2,3,-5,-8,9,1],[10,10,5,4,4,2,5,8,-1,-9],[9,2,7,7,3,-3,3,1,-9,-6],[7,2,-5,7,7,-10,8,-4,-2,-2],[9,8,-9,2,3,10,-7,-1,-5,10]],[[-4,2,-2,8,-7,9,-6,-2,5,4],[3,10,-6,-4,-1,5,-5,-7,3,-3],[8,8,8,-2,3,2,9,6,5,6],[-4,-1,-8,-8,-6,1,2,9,-9,-2],[6,-10,10,-10,-6,10,7,-1,-2,6],[-9,-3,8,10,2,4,9,-4,-8,1],[9,5,5,-3,-4,-4,-7,3,-8,7],[-6,1,-2,2,7,7,-7,4,-6,-8],[5,3,-8,1,9,9,8,-9,-4,4],[6,-7,-4,4,9,2,3,-8,-2,-10],[-9,-8,-8,-9,8,4,-5,-7,-4,-10],[-3,7,-8,1,-7,2,-10,3,7,-2],[7,1,9,-2,-10,-7,3,-1,2,10]],[[2,5,2,2,2,-4,-2,-1,-4,-7],[5,7,10,8,1,1,-10,7,-4,1],[5,-5,2,-1,10,1,1,-3,6,-5],[9,-10,4,-3,8,-6,-1,1,8,-2],[-9,-2,-8,5,6,3,-8,4,-2,-2],[-1,3,-9,7,-10,6,1,4,-2,-5],[9,-4,1,-2,-5,3,-5,9,-5,-3],[-5,-4,6,-8,-5,7,-1,4,10,-4],[2,-2,6,-1,6,-3,1,-7,-5,5],[8,-7,-4,-2,7,-1,5,-6,-3,-1],[-10,-1,-2,-8,-3,-1,9,-1,-9,9],[-1,6,4,-7,8,-7,2,9,-6,5],[4,-2,1,5,-8,-9,5,-5,7,7]],[[9,6,-1,7,6,9,-5,-2,-6,-10],[1,1,5,8,-7,-9,-6,10,-10,5],[7,3,-4,-10,-1,-5,10,-2,-4,-6],[3,9,-10,9,4,-5,7,-4,-4,9],[5,-2,10,9,-4,6,2,-9,4,2],[1,8,-7,6,7,9,-1,-6,-4,-8],[-3,6,-8,8,2,-10,1,-10,2,-10],[-5,-10,9,-9,4,1,-2,3,-1,-1],[-2,5,-1,-2,3,2,2,-4,10,3],[-1,-1,1,-2,-4,-5,-8,-2,7,1],[-5,-8,5,-9,7,10,6,10,3,8],[-9,-6,7,-5,1,4,9,4,-6,-10],[4,-1,-9,-6,5,2,10,10,-5,2]],[[10,-3,-10,2,9,-8,-4,-3,-10,-7],[-6,-10,8,-4,2,10,-1,-1,-1,6],[-7,-5,3,-3,-9,-9,-1,1,-8,2],[-10,2,-5,-4,-7,6,-7,4,1,5],[2,-4,5,-2,-2,-5,-9,6,9,2],[-2,-10,1,9,5,-1,1,8,3,-1],[6,-1,-2,-9,-7,-6,1,-8,-4,-4],[4,-4,1,1,3,2,7,-4,-10,-1],[-6,-8,5,-9,4,5,-9,2,-10,5],[-6,-3,-10,-3,10,9,-3,2,2,6],[-3,5,10,3,2,-5,4,-3,-5,-7],[2,-10,1,-2,3,1,9,-9,3,8],[9,4,-1,10,-5,2,10,-4,-4,-6]],[[-2,-5,2,9,6,-1,-3,8,1,-4],[4,-6,6,7,-6,-8,-9,1,-7,-9],[10,-7,4,-8,5,3,-8,4,-1,-5],[-4,-5,-8,-8,-7,-9,6,1,-3,-7],[3,-8,9,4,-2,6,3,-9,-10,-7],[4,5,4,-2,-6,-7,-8,-7,-4,-8],[-9,-10,-6,5,-8,4,-2,3,-4,5],[3,9,5,-8,-7,5,1,-10,8,4],[10,7,-8,8,-5,-3,4,-10,8,-10],[-4,-2,-4,-3,-8,8,6,9,-6,-5],[-1,9,-8,8,5,-10,-5,-8,-5,-9],[10,10,-3,-10,-8,-9,-3,8,-5,9],[4,-3,-4,-6,-3,-1,-4,-9,-1,-7]],[[-5,-2,7,2,-4,-4,-2,7,-9,2],[-10,5,5,-3,4,-7,-8,-7,-9,-7],[-10,1,-9,8,3,-9,5,9,7,-8],[3,8,-6,-8,-6,10,-7,9,-9,-5],[-7,5,8,3,7,-4,7,-4,9,-10],[7,2,-10,2,-6,-4,-1,6,-5,5],[-10,-4,3,4,10,-6,3,-4,8,2],[5,8,7,5,5,-3,9,4,5,-3],[-1,3,8,4,-3,10,4,-6,-4,-2],[3,5,-5,3,8,-5,4,10,-7,-7],[-5,-10,7,-2,7,1,1,1,7,-6],[-9,-4,2,6,-2,-2,2,-6,8,-1],[3,-6,-1,10,2,-5,-8,-5,-2,-8]],[[5,-1,-3,-7,8,9,-1,-6,3,-10],[-2,5,3,8,10,2,-9,-4,2,3],[-9,-1,-7,-3,-3,-5,-8,-4,-8,-6],[2,6,3,-4,-3,-4,9,-5,2,-9],[4,7,2,-3,-6,3,-1,9,-10,6],[10,-8,-7,7,2,2,10,10,-3,-6],[-3,6,9,7,-6,5,-5,5,7,-9],[8,6,3,3,8,4,10,7,-3,1],[7,5,10,-6,-2,7,-8,-1,9,-6],[5,2,10,-5,4,-4,3,-7,-9,-9],[7,2,-10,-6,-9,8,2,9,1,-7],[-1,8,-2,6,-7,6,-2,-9,3,1],[-8,6,-1,4,-1,7,-5,10,1,3]],[[-3,-3,-9,-7,-10,4,9,9,-7,4],[-5,-3,-7,10,-9,7,1,-6,4,3],[-2,-1,-7,5,-3,-3,9,1,-9,5],[3,9,-3,4,-8,1,-4,-5,5,6],[-8,-8,-4,-2,-9,2,-8,-6,8,10],[7,-8,-6,-1,-4,8,-5,-10,3,-4],[8,4,9,-8,-10,-2,10,7,6,6],[4,-1,-8,9,-4,6,1,9,10,4],[6,8,-8,1,-4,4,-10,-8,-8,2],[2,-2,-7,-10,10,10,9,-1,4,1],[-10,-7,-9,-9,-4,7,-8,-6,1,4],[9,7,-2,7,2,-6,-4,-3,10,10],[-4,9,-9,8,2,-3,-6,10,-3,-7]],[[-6,9,8,5,-5,-3,3,10,-8,5],[-10,10,1,5,-7,-8,5,-5,9,-4],[-4,-1,10,2,-10,7,-3,6,-7,7],[5,-8,-3,7,2,6,8,-6,1,-6],[3,10,2,-2,-1,2,-6,-8,5,1],[-7,-7,4,-5,9,5,7,-2,3,8],[4,-10,4,9,5,9,5,-9,9,-4],[-5,2,2,1,-7,1,-2,-4,-1,6],[-3,8,-10,6,10,8,9,-7,4,-8],[8,-6,10,-7,-3,7,-7,-5,-3,-8],[1,8,8,10,-5,6,-8,6,-2,-9],[5,2,-2,-2,-8,-9,6,8,3,7],[8,1,-4,4,-7,5,-2,5,6,10]],[[-8,4,4,-10,-1,5,8,5,-1,2],[-5,-4,-5,-10,8,4,9,-2,9,-2],[-10,-10,-2,-2,6,-3,-2,8,7,6],[-10,-1,-6,3,-8,-6,1,7,-2,6],[-5,-1,-7,-4,-8,10,-3,-8,8,6],[8,2,-7,5,-8,-7,2,-1,6,-5],[-8,-4,-8,9,6,9,7,-5,10,4],[-1,-2,9,-1,-1,-1,1,-9,2,2],[3,-3,-5,-5,-8,-3,-1,1,-10,-7],[9,9,7,-9,-6,-6,6,-9,8,6],[-4,5,5,7,6,-6,4,-7,3,-2],[8,-6,-7,-3,-1,-1,9,-10,1,4],[1,-4,-7,-8,6,-9,-7,-9,10,-1]],[[3,5,9,-10,3,8,4,-9,-3,-1],[-6,-3,5,-7,-6,-7,-2,4,-8,-10],[6,2,-9,3,9,-1,2,8,-10,4],[5,6,4,7,-2,-2,6,-10,-7,7],[7,-1,-3,-6,-7,-8,2,10,-2,9],[-5,-4,-4,-5,9,7,9,-5,-10,-7],[3,-9,-9,-2,-7,7,-9,4,9,-4],[-1,-4,-2,5,10,-9,5,-8,9,7],[1,10,9,5,3,-6,-4,-7,7,-6],[-1,-10,3,5,9,7,-8,-2,-3,4],[-8,-2,-3,9,-10,9,-10,-10,-8,-4],[-6,7,-10,-10,-7,10,-9,10,-3,3],[3,-5,-2,5,-9,-7,2,9,-4,-4]],[[7,10,8,9,-10,5,4,-8,4,-6],[-4,9,6,7,-9,5,-7,-4,-5,-8],[-5,10,-2,6,2,10,3,-4,-9,1],[4,-6,10,-7,2,10,8,-7,-8,8],[-4,-8,2,-8,-2,9,-6,6,4,1],[-1,-5,2,-9,6,-10,10,7,-9,10],[-7,-9,3,-9,1,3,4,8,10,6],[-9,-6,6,2,2,9,3,2,-3,3],[2,5,3,-2,3,1,-6,-4,4,-10],[-7,6,6,4,-9,-5,-2,-5,-4,-10],[-4,-2,9,3,-9,2,1,-6,3,10],[8,3,6,4,4,10,6,8,-7,1],[-3,3,-8,-5,-10,5,10,7,5,-9]],[[-7,8,-2,-9,7,-8,10,6,-10,-10],[-4,8,4,-4,-9,9,2,9,4,-7],[-9,-1,4,-10,-8,7,-7,10,10,-10],[4,5,9,-4,-6,-5,-3,6,4,4],[-8,6,5,7,-9,-6,-8,-3,-7,-1],[-7,9,-3,-9,-3,-2,5,-6,-3,10],[2,7,7,9,6,-8,-8,-2,4,-9],[8,7,9,-6,8,6,-1,2,-2,5],[-2,-10,-10,1,-6,2,-2,-9,-4,-5],[2,2,6,-5,-4,-6,-3,-7,9,-8],[10,10,9,-5,6,-5,5,4,-1,8],[9,-10,-10,-7,6,-5,5,8,-5,-9],[5,1,-1,-1,-4,-6,3,-5,-4,2]]], dtype = "uint64")#candidate|4356|(15, 13, 10)|const|uint64
bop_4357 = relay.equal(var_4355.astype('bool'), relay.reshape(const_4356.astype('bool'), relay.shape_of(var_4355))) # shape=(15, 13, 10)
output = relay.Tuple([bop_4357,])
output2 = relay.Tuple([bop_4357,])
func_4360 = relay.Function([var_4355,], output)
mod['func_4360'] = func_4360
mod = relay.transform.InferType()(mod)
var_4361 = relay.var("var_4361", dtype = "uint64", shape = (15, 13, 10))#candidate|4361|(15, 13, 10)|var|uint64
output = func_4360(var_4361)
func_4362 = relay.Function([var_4361], output)
mutated_mod['func_4362'] = func_4362
mutated_mod = relay.transform.InferType()(mutated_mod)
const_4502 = relay.constdtype = "float64")#candidate|4502|(11, 12, 12)|const|float64
uop_4503 = relay.sigmoid(const_4502.astype('float64')) # shape=(11, 12, 12)
output = uop_4503
output2 = uop_4503
func_4512 = relay.Function([], output)
mod['func_4512'] = func_4512
mod = relay.transform.InferType()(mod)
mutated_mod['func_4512'] = func_4512
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4512_call = mutated_mod.get_global_var('func_4512')
call_4513 = func_4512_call()
output = call_4513
func_4514 = relay.Function([], output)
mutated_mod['func_4514'] = func_4514
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4512_call = mod.get_global_var('func_4512')
func_4514_call = mutated_mod.get_global_var('func_4514')
call_4518 = func_4512_call()
call_4519 = func_4512_call()
uop_4526 = relay.asinh(call_4518.astype('float64')) # shape=(11, 12, 12)
uop_4528 = relay.asinh(call_4519.astype('float64')) # shape=(11, 12, 12)
output = relay.Tuple([uop_4526,])
output2 = relay.Tuple([uop_4528,])
func_4545 = relay.Function([], output)
mod['func_4545'] = func_4545
mod = relay.transform.InferType()(mod)
output = func_4545()
func_4546 = relay.Function([], output)
mutated_mod['func_4546'] = func_4546
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4573 = relay.var("var_4573", dtype = "float32", shape = (8, 3, 9))#candidate|4573|(8, 3, 9)|var|float32
uop_4574 = relay.acos(var_4573.astype('float32')) # shape=(8, 3, 9)
uop_4577 = relay.sigmoid(uop_4574.astype('float32')) # shape=(8, 3, 9)
func_637_call = mod.get_global_var('func_637')
func_639_call = mutated_mod.get_global_var('func_639')
var_4580 = relay.var("var_4580", dtype = "float32", shape = (1344,))#candidate|4580|(1344,)|var|float32
call_4579 = func_637_call(relay.reshape(var_4580.astype('float32'), [7, 16, 12]))
call_4581 = func_637_call(relay.reshape(var_4580.astype('float32'), [7, 16, 12]))
func_3188_call = mod.get_global_var('func_3188')
func_3192_call = mutated_mod.get_global_var('func_3192')
const_4583 = relay.const([1,-4,-10,7,2,7,8,9,-10,-2,-5,-8,-5,-8,-6,-9,-8,6,-7,7,10,7,10,7,5,8,4,8,5,-2,-6,8,6,-4,-8,-4,-5,-8,7,6,7,-1,-1,10,-5,-5,-3,-5,-8,4,1,4,-9,2,2,-7,9,-1,4,-6,-2,-2,-3,-6,7,7,-7,6,7,-9,4,-7,-3,5,8,8,2,8,6,-6,-5], dtype = "uint32")#candidate|4583|(81,)|const|uint32
const_4584 = relay.const([[-8,-2],[-9,9],[8,8],[-9,4],[-3,-1]], dtype = "uint16")#candidate|4584|(5, 2)|const|uint16
var_4585 = relay.var("var_4585", dtype = "uint16", shape = (100,))#candidate|4585|(100,)|var|uint16
call_4582 = relay.TupleGetItem(func_3188_call(relay.reshape(const_4583.astype('uint32'), [1, 9, 9]), relay.reshape(const_4584.astype('uint16'), [10,]), relay.reshape(var_4585.astype('uint16'), [100,]), ), 2)
call_4586 = relay.TupleGetItem(func_3192_call(relay.reshape(const_4583.astype('uint32'), [1, 9, 9]), relay.reshape(const_4584.astype('uint16'), [10,]), relay.reshape(var_4585.astype('uint16'), [100,]), ), 2)
func_3651_call = mod.get_global_var('func_3651')
func_3654_call = mutated_mod.get_global_var('func_3654')
const_4593 = relay.const([False,False,True,False,True,True,False,False,True,True,False,False,True,False,False,False,False,True,True,False,False,True,True,False,False,True,False,True,False,False,False,True,False,True,True,True,False,True,False,True,False,False,True,True,False,True,True,True,True,False,True,True,True,False,True,True,True,True,True,False,True,True,True,True,False,False,True,False,True,True,True,True,True,False,False,False,True,False,True,False,False,False,False,False,True,True,True,False,True,False,False,False,True,True,False,True,True,True,True,False,False,False,True,True,False,False,True,False,False,False,False,False,True,False,False,False,False,False,False,True,False,True,True,False,False,True,True,False,False,True,False,False,True,False,False,False,False,True,False,False,False,False,False,True,True,True,True,True,True,True,False,True,False,True,True,True,True,True,True,True,False,True,False,True,True,False,True,True,True,True,True,True,False,False,False,True,True,True,False,False,True,False,True,True,True,True,False,False,False,True,False,False,True,False,True,False,False,True,False,True,False,True,True,False,True,True,True,False,True,True,False,False,True,False,True,True,True,False,True,True,True,True,True,False,True,False,True,True,True,True,True,False,False,False,False,False,True,False,False,False,True,True,False,True,True,False,False,False,False,True,True,True,True,False,False,False,False,True,False,False,False,True,False,False,True,False,False,False,False,True,True,False,False,True,True,True,True,True,True,True,False,False,True,True,False,True,False,False,False,False,False,False,True,False,False,False,True,True,False,True,False,True,True,False,True,False,True,False,True,False,False,False,False,True,True,False,False,True,False,False,True,True,False,False,True,False,False,False,True,True,False,True,False,True,True,True,False,False,False,True,False,False,True,False,True,True,False,True,False,True,True,False,False,True,False,True,True,True,False,True,False,False,False,False,True,False,False,True,False,False,True,True,False,False,True,True,True,False,False,False,True,True,False,True,False,False,False,True,True,False,False,True,False,True,False,False,True,False,True,True,False,False,False,False,True,False,True,False,False,True,False,True,False,False,False,False,True,False,True,False,True,False,False,True,True,False,True,False,False,True,True,False,True,False,False,False,False,True,True,False,False,True,True,False,False,True,False,True,True,True,True,False,True,True,False,False,True,True,False,True,False,False,True,False,False,True,False,False,False,True,False,False,True,True,False,True,False,False,False,True,False,True,False,True,True,False,False,False,True,False,False,False,False,True,False,False,True,False,False,True,False,False,False,True,True,False,False,True,True,False,True,True,True,True,False,False,True,False,True,False,True,True,False,True,False,False,False,True,True,False,True,True,True,True,False,False,True,False,False,False,False,True,True,True,False,False,False,True,False,True,True,True,False,False,True,False,False,True,False,True,True,True,False,False,False,False,True,True,False,True,False,False,False,True,False,False,True,False,True,False,True,False,True,True,False,False,True,True,True,True,False,True,False,True,True,False,True,False,False,False,True,False,False,True,True,False,True,True,False,False,True,True,True,False,False,True,True,False,False,False,True,True,True,False,False,True,False,True,True,False,True,True,False,False,False,False,False,False,True,True,False,False,False,True,False,True,True,True,True,True,False,False,False,True,False,False,False,True,False,False,True,True,True,False,True,True,False,False,True,True,True,False,True,True,True,True,False,False,True,True,False,True,False,False,False,False,True,True,True,True,True,True,False,False,True,False,True,True,False,True,False,True,True,True,False,False,False,True,True,True,False,True,False,False,True,True,True,False,False,False,True,True,True,False,True,False,False,False,True,False,True,True,True,False,False,True,True,True,False,False,False,True,True,True,True,False,False,False,True,False,True,False,True,False,False,False,True,False,False,False,False,False,False,True,False,False,True,True], dtype = "bool")#candidate|4593|(768,)|const|bool
call_4592 = func_3651_call(relay.reshape(const_4593.astype('bool'), [16, 4, 12]), relay.reshape(const_4593.astype('bool'), [16, 4, 12]), )
call_4594 = func_3651_call(relay.reshape(const_4593.astype('bool'), [16, 4, 12]), relay.reshape(const_4593.astype('bool'), [16, 4, 12]), )
func_3342_call = mod.get_global_var('func_3342')
func_3346_call = mutated_mod.get_global_var('func_3346')
call_4602 = relay.TupleGetItem(func_3342_call(relay.reshape(const_4584.astype('uint16'), [10,]), relay.reshape(var_4585.astype('uint16'), [100,]), ), 1)
call_4603 = relay.TupleGetItem(func_3346_call(relay.reshape(const_4584.astype('uint16'), [10,]), relay.reshape(var_4585.astype('uint16'), [100,]), ), 1)
var_4606 = relay.var("var_4606", dtype = "float32", shape = (8, 3, 9))#candidate|4606|(8, 3, 9)|var|float32
bop_4607 = relay.bitwise_xor(uop_4577.astype('uint32'), relay.reshape(var_4606.astype('uint32'), relay.shape_of(uop_4577))) # shape=(8, 3, 9)
func_3188_call = mod.get_global_var('func_3188')
func_3192_call = mutated_mod.get_global_var('func_3192')
call_4611 = relay.TupleGetItem(func_3188_call(relay.reshape(call_4602.astype('uint32'), [1, 9, 9]), relay.reshape(const_4584.astype('uint16'), [10,]), relay.reshape(var_4585.astype('uint16'), [100,]), ), 4)
call_4612 = relay.TupleGetItem(func_3192_call(relay.reshape(call_4602.astype('uint32'), [1, 9, 9]), relay.reshape(const_4584.astype('uint16'), [10,]), relay.reshape(var_4585.astype('uint16'), [100,]), ), 4)
uop_4616 = relay.sin(uop_4577.astype('float64')) # shape=(8, 3, 9)
output = relay.Tuple([call_4579,var_4580,call_4582,const_4583,const_4584,var_4585,call_4592,const_4593,call_4602,bop_4607,call_4611,uop_4616,])
output2 = relay.Tuple([call_4581,var_4580,call_4586,const_4583,const_4584,var_4585,call_4594,const_4593,call_4603,bop_4607,call_4612,uop_4616,])
func_4629 = relay.Function([var_4573,var_4580,var_4585,var_4606,], output)
mod['func_4629'] = func_4629
mod = relay.transform.InferType()(mod)
var_4630 = relay.var("var_4630", dtype = "float32", shape = (8, 3, 9))#candidate|4630|(8, 3, 9)|var|float32
var_4631 = relay.var("var_4631", dtype = "float32", shape = (1344,))#candidate|4631|(1344,)|var|float32
var_4632 = relay.var("var_4632", dtype = "uint16", shape = (100,))#candidate|4632|(100,)|var|uint16
var_4633 = relay.var("var_4633", dtype = "float32", shape = (8, 3, 9))#candidate|4633|(8, 3, 9)|var|float32
output = func_4629(var_4630,var_4631,var_4632,var_4633,)
func_4634 = relay.Function([var_4630,var_4631,var_4632,var_4633,], output)
mutated_mod['func_4634'] = func_4634
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4545_call = mod.get_global_var('func_4545')
func_4546_call = mutated_mod.get_global_var('func_4546')
call_4641 = relay.TupleGetItem(func_4545_call(), 0)
call_4642 = relay.TupleGetItem(func_4546_call(), 0)
func_637_call = mod.get_global_var('func_637')
func_639_call = mutated_mod.get_global_var('func_639')
const_4647 = relay.const([-4.580973,-7.225576,8.420890,-2.666457,-8.713761,-0.807677,-3.244967,9.333298,-4.246511,1.923657,0.964424,7.426976,-7.632458,-1.975352,-2.932678,-1.199370,6.179850,-3.250885,-9.309299,4.560669,-2.253181,-6.143829,-2.507033,2.295728,3.667730,-9.359503,4.608903,6.190443,6.673847,1.023874,8.283002,7.701267,4.326432,-2.068744,-2.101791,-1.724574,7.873394,3.098492,-5.086163,-8.192408,1.548465,3.957378,-2.920097,4.862054,-9.443981,-6.510240,-6.724730,-4.844859,0.823342,3.122632,9.065718,-1.507539,-2.320231,-9.954741,7.192461,6.964941,6.347284,9.175635,4.242390,2.513621,-7.867651,-6.123914,6.442741,-9.337824,2.108800,5.918091,8.595782,0.262290,4.597096,-5.418381,-4.846241,-1.456941,-1.675222,-2.141823,-6.863449,5.039920,9.284682,0.159065,7.330417,9.167505,-6.331848,3.591169,-7.931046,2.833651,-7.392664,-0.742204,6.618833,-8.271065,6.911730,-8.383747,-5.819432,-6.767040,0.584250,4.175612,6.431292,7.390543,5.689858,9.699117,6.317035,9.882104,-8.183091,-4.268234,-5.634255,-7.429850,5.815636,0.736893,-6.482877,5.436026,-1.799682,-8.520195,8.422331,9.841596,-5.175279,2.771557,4.872473,9.248479,-3.532625,-8.498454,-0.552907,-3.997708,0.794535,-1.854195,2.061331,2.038058,-0.184172,8.005485,7.249880,-2.155544,6.067691,4.034363,-1.136122,9.143218,-0.151074,-8.051023,-2.627026,1.927179,-6.129751,8.036040,4.527681,5.699820,0.529880,-0.913851,3.776156,-5.160231,-4.475489,-7.437302,5.909936,9.688517,7.230509,-9.897832,1.994080,5.329110,8.315775,2.299452,6.352263,-2.948295,-3.349453,0.183534,2.659166,-7.487355,3.817247,0.422610,-0.225222,-1.593560,-8.733911,2.390821,-2.136157,0.693663,-6.157016,4.861629,-8.859805,-8.672527,-1.214961,-1.978026,0.402151,6.913793,6.534887,9.235705,0.292009,9.066690,3.493350,2.895260,1.735400,2.506674,-8.542584,4.874653,1.292699,2.460660,6.766640,4.932727,-4.082174,2.781090,8.584024,-5.738465,7.577361,-7.594701,-5.658851,-0.315618,4.284983,9.661217,-7.098177,-5.644450,-4.321214,7.492984,5.350306,3.371670,9.910642,-8.025978,4.199814,-3.156491,-0.533021,0.296214,-3.817746,6.257320,-4.863522,1.711630,3.478420,-5.163394,0.820121,-1.114553,-5.457036,3.770732,-7.704558,7.822247,-0.740921,-9.925942,-9.777018,6.485187,-7.538439,-0.648012,-2.287151,1.290838,8.652819,2.516246,-7.311281,-8.452985,7.324650,-8.434586,1.045125,-4.809112,9.645550,-6.522649,-6.100322,0.946099,-6.429289,7.704413,7.344972,7.469927,-7.822578,-2.213495,-7.275574,-0.829797,-3.930462,1.738536,-4.718603,3.655888,2.507284,1.548899,7.976968,-3.524215,2.241026,-6.493135,-4.280776,6.359034,1.980658,5.079378,-5.417486,6.869942,6.921698,-8.174474,-7.022602,0.913342,-2.084690,-2.790989,8.737240,3.466151,-4.336612,-1.640873,3.243289,-7.605492,8.723179,-4.294771,6.470892,-8.428762,6.003058,-9.892854,-5.651216,9.358262,-6.883355,-2.314622,-5.463771,-4.930059,-8.257243,0.485105,6.227108,-3.872184,-0.021889,-4.323062,-0.284326,-9.255851,-1.998221,-2.547507,-3.649048,1.735742,0.983802,5.412245,4.824157,-4.755851,-2.848858,-4.741853,2.869630,-6.274588,4.398514,8.553555,4.165338,8.830415,-8.230108,-7.722611,8.171713,-1.879606,0.195677,-0.324629,3.233512,-0.199181,8.697233,7.192258,6.672017,-1.342663,8.999262,0.762758,6.646791,-8.151744,-9.220120,-3.860135,-7.193974,-2.817794,-8.779414,-8.184264,4.807162,0.939354,7.863360,-9.906769,-0.624806,-0.010510,-4.574320,-5.494340,-4.876021,-5.460413,7.024788,1.797185,8.074935,-8.920426,-0.756322,8.649522,3.255110,-4.285036,-1.541015,-2.685407,5.306037,-1.954970,-9.875917,7.363147,5.145289,5.777291,9.027155,-5.734702,-2.631176,-8.751874,0.544914,-3.484111,9.693517,-4.774757,2.050458,-8.735780,5.834825,3.514924,-0.843612,-6.692341,-0.669910,-2.947534,-3.727263,-8.753663,8.806669,-8.660194,-6.228703,-1.903532,1.782085,3.220500,2.126499,-4.182808,-2.924127,-7.324378,-7.777247,-4.446342,-5.984881,-9.341607,1.198828,2.240353,-9.477804,-5.959806,-0.523792,-5.114593,1.289075,8.120131,1.982186,7.324873,6.322941,-7.079743,-1.516501,-3.432961,-6.845777,-9.636217,5.878745,-3.366314,1.161430,-0.166460,5.115066,2.124902,9.432719,8.106969,-4.154121,-2.051397,-9.713741,-0.447828,-4.624334,7.292681,5.002173,-6.991785,8.981795,-0.681952,7.167865,6.148636,6.366079,4.193005,3.415447,-9.488557,8.721930,2.201627,1.516581,3.149864,-6.120502,-6.165930,-1.871690,-6.080086,-1.206963,-3.882960,8.121996,-0.898071,-9.137098,7.231410,1.454494,-2.904893,8.479084,-6.121554,7.408822,-6.553520,0.868383,7.451947,2.851450,4.894568,3.481441,-6.700019,4.308232,8.360525,-0.875495,1.572540,-7.632708,4.275189,2.347498,3.630679,3.886198,-6.702937,-7.649380,-8.221662,2.803292,8.907015,0.585548,-4.040671,8.505361,-3.943023,-5.578386,5.176669,2.324516,-3.962824,-2.207864,0.597715,1.239650,-8.711930,-8.445242,-4.401650,3.997388,-9.589332,2.244194,8.210238,-3.630038,-5.823037,-5.529582,-8.689068,-1.030416,-9.825702,-4.100618,-2.565119,-8.812986,1.798054,5.694903,-4.726932,-9.187518,6.349188,0.246675,-0.374165,8.755261,8.404875,-2.408242,3.366123,-0.868951,2.081220,-4.297158,8.431508,4.402553,2.741698,-4.132104,7.338877,-9.795364,-9.666952,3.629559,7.412234,6.355587,-6.680786,-9.010271,3.984304,-7.447687,2.898336,-8.973737,2.962817,-3.209317,2.957417,-0.772590,5.493115,7.893708,0.208581,-2.360101,0.046857,3.726592,3.052007,-8.021877,-3.474212,3.442606,8.020980,-5.521860,9.798280,4.382479,5.132683,0.807444,-3.706086,-6.568150,-7.368466,-8.152083,3.877972,2.015175,-3.784713,3.890853,-3.429960,-2.887452,-0.996451,-3.070188,5.631628,-4.437811,-4.544662,4.666205,8.393477,-6.050904,-1.292902,4.585094,-3.653424,-6.767680,-8.561029,3.003545,6.340291,-7.139039,3.980966,0.700972,-2.738680,3.608004,-9.704579,5.537617,2.762982,2.209942,5.736433,2.470190,8.745845,-9.168567,9.776583,0.480086,8.502942,-6.707384,-2.623513,-7.482144,-4.266150,0.200960,-3.060201,-5.509295,-0.139598,-5.765371,-7.029809,8.815288,7.049446,-0.822433,-7.983245,3.531487,7.118031,-3.522163,-1.779873,1.527123,-0.189064,4.818684,9.466134,-5.204195,1.472426,6.247016,-7.309504,9.929430,-9.171108,-7.993038,0.312572,8.168957,-7.450772,7.166396,-1.962757,2.499549,4.854695,7.384361,-4.293149,5.402762,-2.881067,8.137609,3.310447,7.866123,-7.859442,-0.202323,0.363606,8.467487,7.947942,-0.949396,9.594763,7.503116,-2.299921,5.967055,-4.813889,-0.068061,-5.064049,-4.138575,1.269158,8.109115,6.711176,4.173268,4.893839,-1.768768,9.240453,-0.879348,-9.830331,-1.100242,4.145044,0.274768,-1.916151,-5.696425,-2.159258,-2.342800,-3.715477,2.561613,-6.559799,0.282080,7.629486,-7.876407,-8.610218,0.997017,-6.125647,-8.934707,-3.165143,-7.328404,3.444224,8.699459,8.126919,9.858963,6.502663,7.529979,-1.402053,-6.196499,9.137743,-7.758777,0.756062,-6.414581,6.662160,1.330500,0.512941,-6.996808,9.404560,-4.621910,-1.413522,-9.523115,-6.770728,0.304601,-7.983306,9.344375,-5.370556,-2.652100,4.259358,-8.867449,8.812011,-2.062636,5.830978,3.813917,-2.532348,9.240612,-5.757224,4.637871,9.283287,6.763999,-7.164282,8.646250,-1.071787,-2.940079,5.310283,4.675310,4.274402,4.704123,-5.440221,2.368594,-6.113123,4.633723,-1.807745,9.511258,4.973776,-6.681202,9.117031,9.717456,3.860304,-8.107137,-7.324206,6.584799,5.379279,-3.977310,7.267700,9.460645,-7.738967,-1.138598,6.506320,-0.205046,-5.979824,-6.853442,4.670463,-8.438257,1.910966,1.544986,-2.181467,7.262318,5.637766,1.491574,2.736526,-4.833972,-6.000188,5.480776,-4.874920,-6.840495,-0.411826,5.926648,-7.301305,-9.544295,-5.001031,4.161884,-1.767533,-0.032177,-5.403756,-1.677438,-3.419857,9.674820,-4.202424,-9.064653,5.878964,7.271424,5.066718,9.010420,-2.996736,-6.070535,8.398596,4.816766,-2.147055,6.386195,-7.899941,1.555781,-3.437613,8.742884,9.698766,6.262242,-0.856278,-2.497840,5.400476,-4.933287,8.852158,-3.801660,-4.485453,-1.390691,-1.752450,-8.681298,7.163727,1.073457,-8.852775,-7.581871,0.040684,-3.601231,4.100544,8.242451,-4.786325,-4.458455,-5.231065,-3.612935,7.643982,-6.972310,-4.685115,-2.092161,-7.805091,1.349914,-8.928249,-3.568076,-0.815817,2.042162,3.848949,-6.637414,-4.501684,6.488567,-1.311059,-0.042927,-7.605221,7.614390,2.036323,-7.867354,3.839002,-4.766464,-0.854576,9.568526,-7.633828,-6.406150,-2.053791,2.754027,8.084960,5.545661,8.010850,2.798672,-4.455707,-0.369904,-4.731736,1.055532,9.856488,5.531543,-6.180321,-1.846197,-0.730904,-9.257610,1.735263,3.619336,-5.872927,-1.798826,-4.948741,8.065942,-9.823244,-5.932893,8.947915,9.509587,-2.759870,-5.266984,8.078557,4.505689,7.088948,-7.949944,3.421435,3.191540,4.721786,4.656592,-4.102123,-5.171368,3.130776,9.196172,3.941890,5.518221,-8.734550,-5.501789,-6.903995,8.754991,-4.866943,-4.102771,6.500775,2.200111,-4.170510,7.607529,-3.076996,3.328645,-2.594451,-3.988373,0.829057,2.703131,2.849532,-1.766981,1.757271,9.253106,5.672802,-2.259891,0.885779,2.547180,-8.273646,-9.011070,7.441693,-1.489124,8.246882,8.119081,-9.814619,-8.862437,-3.197406,5.996577,-8.408298,5.139238,0.540423,-9.291707,-4.908384,-2.361168,-0.264423,2.254722,-8.442017,-6.951492,-5.399896,8.748939,-6.801492,-9.725274,-5.335997,8.242263,-5.052583,-5.573243,-6.794122,-2.133171,8.095990,2.061558,-6.437957,7.971256,6.501227,-8.945300,1.426234,-2.064321,4.447228,-1.328091,4.267922,-7.898899,8.887979,4.328243,2.473571,-2.895204,-0.758053,9.704865,-9.385869,8.450027,-4.551012,6.854689,9.104680,3.702586,-3.048469,-0.028751,9.448782,1.744242,-9.112745,-5.920381,-3.966107,-7.573109,7.133352,6.910574,-7.956640,0.543364,-9.870791,-3.804095,-6.198973,-2.439117,8.986681,-7.792456,5.280315,8.336755,-3.831031,-9.388036,-1.692707,2.963851,-7.768599,7.083020,-8.929435,6.265329,4.489549,-8.006518,1.916163,-0.529429,-6.608222,-2.272675,-6.801642,8.617308,4.526086,-4.227386,-0.270914,5.787975,-2.842907,1.385602,8.735807,-3.136500,-1.016149,0.802325,7.966435,-3.563944,-3.215811,-2.415704,7.274741,-8.855950,6.645731,-9.420233,-8.735865,-6.550178,7.673982,2.596215,-0.514840,3.504603,6.402673,-6.606656,5.653178,-9.994034,7.555956,-6.806691,-3.085450,-6.454074,6.484851,3.854688,-9.933029,1.807316,5.597370,6.251864,-1.634312,-2.958032,8.273480,-8.981169,7.029642,-7.781402,2.241300,2.944041,1.604414,2.897317,3.441438,2.712084,-8.594693,7.572228,1.571303,6.428723,9.025167,8.750291,3.661304,9.966766,-2.438474,8.897963,3.254924,2.460883,-4.536503,3.897150,5.107365,-0.292087,1.632739,8.885941,-3.414743,-6.539047,-9.802879,-1.239543,-7.364899,2.839410,7.930419,-1.993078,3.739711,-8.467842,8.271434,7.829117,-4.678527,-3.676586,0.143391,-5.337289,2.745189,-4.206344,7.830041,4.850651,-6.644616,-1.863104,2.515049,-6.739939,0.086856,7.512104,3.165418,7.827753,-9.368149,2.325312,-4.678949,3.972061,3.605581,9.801311,-8.655118,-7.998624,9.694799,-6.765494,6.561652,-8.233097,5.560629,3.223020,-6.906050,-7.431608,5.911345,2.154203,-6.751600,7.837558,-4.070482,-0.272176,6.283915,7.660113,5.504359,1.211467,8.767716,2.293324,7.029421,0.416998,-9.423609,-5.065290,5.983808,4.913242,-7.714254,4.962885,7.396993,9.243690,-3.571858,-8.068237,9.662653,1.648308,0.512924,9.761561,0.327543,-8.353048,6.653629,4.666917,-8.628952,-9.815135,2.833342,0.285936,3.411313,0.146546,-6.221457,1.255374,-9.056813,-2.302122,-2.344930,-5.277074,-9.919626,0.354508,-6.841033,-6.001774,9.259003,4.287044,8.602198,5.414490,-9.675499,-6.550910,-6.688437,-0.248517,-8.005074,-4.507808,-4.070975,7.961055,-7.164202,-3.018880,8.792042,3.329922,1.551331,-0.712504,-2.131082,4.951430,-3.843804,5.056701,-5.315114,0.054259,-8.382241,2.705014,2.775348,8.507581,8.133306,-3.146642,-9.671992,0.054292,-1.184131,-6.742383,9.004336,6.680626,-1.910743,1.201251,-4.433524,3.063465,-9.670515,-3.133828,2.936150,8.418479,9.752338,-1.909714,-7.640825,-7.708713,2.369042,5.492404,-3.147823,-9.344151,1.463947,1.720535,8.328459,-3.047843,2.546416,4.600451,-4.947818,2.688786,-8.055116,3.269918,0.473939,7.382964,5.237792,-7.548672,-8.541382,-7.216548,-1.475396,0.755187,-8.940042,5.164246,-3.899398,2.209901,-0.918034,8.824545,-1.204568,7.879489,-6.931374,-8.712610,4.586406,5.410684,0.528671,3.842478,-3.452335,3.592978,-5.584109,-8.530776,9.673089,8.505508,6.790657,-4.469866,4.236835,2.257951,6.973819,3.505664,-1.077036,-0.816504,-8.894373,1.059538,-4.654231,-0.945284,-1.470247,-9.282883,-9.583955,7.415141,-3.265152,3.520301,9.080860,9.749086,-1.828687,9.566579,0.981370,-0.627981,6.440204,-1.365396,4.388335,-8.471951,-7.501950,4.574151,-6.264439,-1.789579,8.583231,-7.369912,-1.869342,9.059786,2.320747,-7.652102,-3.546307,-5.642938,-3.943146,7.234557,1.566489,2.920603,-6.990487,-0.630703,5.255782,7.218525,-7.919365,5.444330,6.097014,2.065892,3.729160,-0.810767,9.966993,3.795370,0.891691,9.356911,-3.351201,-2.708730,9.518062,5.362649,5.070174,7.741847,7.428566,8.727389,6.710562,6.213414,-8.480135,-3.617625,-6.178896,2.428858,7.587540,9.702579,-0.048666,-8.424652,-5.740308,-9.495784,9.123933,-8.786379,9.032500,2.488614,-9.901941,4.227409,-8.148218,-1.009135,-5.811549,8.486118,-4.482866,8.188792,-4.697099,0.683278,-3.491769,6.129777,2.698533,-3.210284,0.405805], dtype = "float32")#candidate|4647|(1344,)|const|float32
call_4646 = func_637_call(relay.reshape(const_4647.astype('float32'), [7, 16, 12]))
call_4648 = func_637_call(relay.reshape(const_4647.astype('float32'), [7, 16, 12]))
output = relay.Tuple([call_4641,call_4646,const_4647,])
output2 = relay.Tuple([call_4642,call_4648,const_4647,])
func_4655 = relay.Function([], output)
mod['func_4655'] = func_4655
mod = relay.transform.InferType()(mod)
output = func_4655()
func_4656 = relay.Function([], output)
mutated_mod['func_4656'] = func_4656
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4655_call = mod.get_global_var('func_4655')
func_4656_call = mutated_mod.get_global_var('func_4656')
call_4678 = relay.TupleGetItem(func_4655_call(), 2)
call_4679 = relay.TupleGetItem(func_4656_call(), 2)
output = call_4678
output2 = call_4679
func_4709 = relay.Function([], output)
mod['func_4709'] = func_4709
mod = relay.transform.InferType()(mod)
output = func_4709()
func_4710 = relay.Function([], output)
mutated_mod['func_4710'] = func_4710
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4709_call = mod.get_global_var('func_4709')
func_4710_call = mutated_mod.get_global_var('func_4710')
call_4767 = func_4709_call()
call_4768 = func_4709_call()
output = relay.Tuple([call_4767,])
output2 = relay.Tuple([call_4768,])
func_4769 = relay.Function([], output)
mod['func_4769'] = func_4769
mod = relay.transform.InferType()(mod)
output = func_4769()
func_4770 = relay.Function([], output)
mutated_mod['func_4770'] = func_4770
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4771 = relay.var("var_4771", dtype = "float32", shape = (13, 8, 16))#candidate|4771|(13, 8, 16)|var|float32
uop_4772 = relay.log2(var_4771.astype('float32')) # shape=(13, 8, 16)
func_4360_call = mod.get_global_var('func_4360')
func_4362_call = mutated_mod.get_global_var('func_4362')
const_4775 = relay.const([-9,-4,-8,-6,3,-9,-6,1,5,-4,-6,3,-3,-4,9,-2,6,1,-6,-8,6,1,-8,-9,8,1,-10,-5,9,-7,-5,-5,2,4,-4,10,10,3,-4,10,-8,5,7,-1,9,3,9,-2,-7,-3,-7,-10,-4,6,5,-9,8,3,4,-10,-3,5,-2,-3,5,9,-8,-10,1,-10,1,1,5,-3,-9,-2,-7,-2,-5,-9,10,-4,-6,-1,-10,5,-4,3,2,8,10,-4,8,7,1,-6,3,-9,4,-7,-5,-8,-1,-8,-6,4,8,-4,-4,-2,8,-5,-5,1,8,-6,10,-2,4,4,10,-7,-8,7,-5,-6,-4,-3,9,10,1,8,9,-2,4,4,-8,2,-5,7,-5,-10,-7,-10,8,2,6,-1,-4,8,1,-9,5,4,-2,8,5,8,5,-6,8,10,-10,6,6,-9,8,-5,-3,2,9,3,-2,-5,9,-7,9,-8,10,10,-8,2,-9,8,7,7,4,9,-1,10,-6,-6,4,-2,9,-2,-3,4,3,-5,-4,6,4,-3,-10,6,9,8,7,-10,6,-3,8,2,-9,-2,1,2,-3,-10,-7,-8,-8,2,8,10,-5,4,10,5,-5,6,-4,1,3,-2,-8,7,-7,-3,-2,-9,-6,10,-9,7,3,1,-2,-9,-6,5,9,1,-2,3,7,-1,-6,-1,10,-10,1,-2,-4,8,-2,-3,7,-9,8,3,3,-8,-6,4,9,1,-5,-3,-4,10,-5,6,-9,-9,6,-4,-5,-8,3,1,5,-10,-4,1,5,5,4,-2,-8,-10,2,-1,-6,1,10,1,-3,8,-5,7,-2,-2,6,9,-4,6,5,-4,-8,-2,9,6,4,1,-4,-3,-3,-3,6,2,-3,7,-10,10,-8,-6,6,10,7,3,-10,-8,-9,3,-2,-9,-7,-4,-7,-5,-9,-5,5,6,7,-1,-6,-1,9,4,10,8,-10,-4,-7,6,-2,-2,6,-8,9,-9,10,2,5,1,-1,-5,-1,8,10,3,-2,-10,3,1,-9,9,-2,9,8,3,8,10,6,9,-1,9,-9,2,-7,6,-5,5,5,-3,3,4,-3,-3,10,5,4,7,-3,7,-3,-7,-5,6,-6,7,-4,-5,3,5,9,7,6,-9,4,-8,-9,5,-7,8,-9,-5,3,-1,-9,2,-8,5,4,2,2,-4,5,6,10,7,6,4,3,8,4,10,-10,8,1,-3,-2,-1,-8,-8,1,-8,9,-8,7,-4,7,-3,-1,4,-10,2,-4,8,-1,10,4,-1,-2,-5,5,10,-3,3,-3,-3,-2,7,-9,-9,3,-2,-9,-10,-2,-8,2,2,-10,-9,-10,7,7,-9,1,7,-7,-3,-4,7,-7,6,2,7,3,-6,6,6,-9,10,-2,6,-7,-8,-1,6,10,7,10,-4,10,5,-3,-1,-5,-4,9,-8,6,-7,3,-5,5,-4,8,7,10,-5,-10,-7,1,-4,1,7,10,-4,-7,-7,-3,-7,-1,-8,-6,-5,-1,-3,-2,-3,9,-10,-3,-3,5,5,2,-8,6,-3,-1,1,1,-6,-3,5,8,10,-2,-4,-2,7,-10,-7,3,1,10,-7,9,5,-4,-1,-8,6,5,-8,-10,3,10,-8,-3,8,-4,6,10,-5,-4,9,-9,-3,-6,5,8,9,1,-2,8,-10,6,-8,-9,-1,9,-6,-4,7,4,9,2,-1,-5,7,-2,8,7,4,-8,1,-6,8,-8,3,6,3,10,-1,6,8,7,7,1,1,8,-7,-9,-6,1,-8,-1,-5,6,4,5,1,10,-7,-1,2,-10,-6,5,5,-3,-3,7,-5,-5,4,-3,-4,-5,5,9,5,-8,8,5,9,8,2,9,8,-8,-4,9,5,-8,10,-10,7,-8,-1,-8,-10,-2,2,2,7,-4,3,8,-7,-8,6,-2,4,-9,2,5,6,6,1,9,8,-1,-9,8,-7,-3,-4,7,-6,5,4,1,9,9,5,-2,-3,3,1,-8,-8,3,-9,-4,-7,-2,-10,2,-2,3,-10,10,5,-3,-7,-7,3,10,10,-6,4,-9,-3,-6,-5,2,-2,-9,10,-5,5,3,-10,10,7,-9,6,-5,-1,3,10,1,10,10,2,-6,-7,-4,1,1,10,9,7,4,-5,-6,-2,8,7,-9,-5,-5,-3,-3,3,-2,-3,-8,7,8,8,-8,1,2,5,-4,-6,5,7,4,4,-2,9,5,3,9,-7,2,2,-5,-5,9,7,-1,-6,4,-2,-4,10,6,-5,3,-1,-2,-8,4,-6,-5,9,-7,10,2,2,5,-7,3,6,-8,2,-4,6,4,-8,-5,4,1,-7,-7,1,9,3,-2,2,7,-9,-4,8,-7,8,5,-5,-5,-9,1,6,-10,4,9,-3,9,9,8,-3,4,-8,3,-5,-8,-3,-6,9,-8,-9,8,-3,-5,2,10,10,-9,2,4,2,-4,10,-6,8,-3,-2,9,10,10,5,7,5,-4,10,6,1,-9,-10,2,-10,4,-10,7,-7,3,-6,-9,-8,8,2,-10,-4,6,3,-3,-4,4,10,-5,-6,-10,1,-3,-2,-7,-5,-7,-5,4,-10,-10,3,-10,5,1,6,-6,-1,-5,2,-9,-8,-5,-9,2,5,6,6,-3,5,-4,5,7,-9,-1,8,-7,6,1,10,-7,-5,-4,-10,4,1,6,8,-4,-10,7,4,-4,5,-6,-9,1,-5,-7,-2,-10,-8,8,2,2,-8,-9,2,-3,-9,3,1,1,1,-10,-8,-5,-9,-4,-7,-4,-5,5,8,-8,6,-4,7,4,-3,10,-7,10,10,-6,10,9,-4,-5,-2,-9,4,7,1,1,6,-5,-8,8,9,-4,7,-6,-8,3,-6,2,8,-3,-1,-2,8,1,-4,-6,6,-4,3,-1,-3,-5,-9,-10,6,-5,-10,5,6,-7,-6,5,-5,4,1,1,10,-4,10,-5,7,-3,-6,-8,6,-3,8,-4,-9,1,4,3,-5,-4,-10,1,-10,6,-3,-10,-10,1,3,1,6,9,1,5,-8,2,1,-5,6,-8,-6,9,-3,3,8,5,5,5,7,-3,2,-3,7,-3,-9,-5,9,-2,4,8,9,-5,9,-10,1,-9,9,5,10,-2,-9,8,10,-2,-5,-6,4,-1,-3,-7,-6,-7,-10,2,10,-3,-10,-9,-10,3,-9,-4,-10,6,-5,8,-1,6,-5,3,10,-4,-6,-1,4,-4,2,-6,2,-6,4,8,-6,7,3,-9,-4,3,6,8,7,2,9,-2,9,8,1,-9,10,-10,-5,-6,-2,1,-5,7,-1,3,-7,3,-6,-1,6,-4,7,-1,-3,-3,10,-10,-5,8,5,7,10,-8,-10,-1,-1,5,9,2,7,-6,3,1,-2,-5,-2,-9,-2,-9,7,1,7,10,3,9,-9,-6,-10,2,6,10,-2,2,-5,-6,-5,4,4,9,6,-7,4,9,10,7,-1,-6,6,-6,-3,5,1,9,3,-5,9,-6,-7,8,-8,-5,-1,-3,3,8,-4,-1,4,4,-1,6,3,2,9,-9,-4,-8,-5,2,10,3,4,-1,-7,8,4,-5,-6,-6,8,1,-8,-7,-10,3,8,4,-2,-10,9,-7,2,7,1,-4,-9,-1,6,3,6,3,-4,3,1,-6,-3,-3,-7,4,6,-6,-5,-1,6,4,-2,5,-6,-3,-4,-9,-2,-2,3,-6,4,-1,1,-7,-7,-9,1,-4,-2,8,-4,3,-7,4,10,8,-1,2,-4,1,3,-10,-5,3,-1,-5,6,-2,2,-7,-5,-6,-8,10,-9,-3,10,7,10,-5,9,-8,8,9,6,-4,-3,-9,1,10,8,-2,-1,-8,-7,3,-10,2,-3,-10,9,1,-4,-10,8,7,-7,8,6,-10,6,-10,6,-6,4,-9,-10,4,1,-1,8,-6,-6,1,-10,-6,4,-7,-9,9,-1,-8,-9,6,-10,10,6,-1,2,-6,-4,-3,10,1,4,-5,-10,-7,9,10,2,-7,8,3,-3,6,-3,8,-8,-3,8,-7,-2,9,8,1,1,-10,-8,-1,-4,-10,6,8,-4,-6,8,-5,8,2,-5,-7,2,7,4,3,-7,-5,-9,-8,-6,9,10,6,6,-5,2,-9,-3,4,-6,-5,10,-7,5,-1,-10,8,-4,7,6,-3,5,-3,-8,-6,-6,9,-3,4,-2,2,5,9,6,-1,7,9,6,2,2,10,1,3,-6,3,-2,-9,4,-8,3,1,1,-3,5,-3,-3,5,2,9,5,-7,6,-5,3,1,3,5,-5,1,4,-6,-6,-3,9,8,4,10,-3,-10,-8,-10,4,-3,4,8,-9,-4,-5,5,1,-5,-1,6,-10,8,-9,7,4,2,-7,5,-3,2,10,-2,-1,7,-4,7,1,-1,6,4,9,9,6,-1,4,9,-1,6,-7,-5,6,-6,9,-7,-5,-6,-7,-2,10,-4,-9,10,-3,3,9,-5,-1,-2,-6,5,2,-8,6,-3,-5,1,-1,3,7,-8,-5,-3,-1,5,4,1,-1,4,-10,4,-6,-9,-5,-1,-10,1,9,10,-9,-9,4,10,8,-5,-2,4,-3,5,5,2,-4,-1,-9,4,5,-2,3,6,-5,-10,9,5,6,10,5,-9,9,3,-8,-3,-10,3,6,-5,-10,9,8,1,-5,7,7,8,-3,-1,6,5,-10,9,8,8,-8,9,-3,10,-5,8,3,5,5,-7,9,-8,10,6,1,8,-1,7,-1,-1,-4,-6,5,2,-5,-2,3,-5,9,-1,-5,2,-9,-1,-6,5,-3,6,2,7,-9,4,-1,4,-2,2,5,-7,-3,-5,3,8,10,-2,-3,2,8,-5,6,-8,-4,10,-6,-6,-5,7,-10,2,10,4,2,9,-1,10,-2,8,1,-7,-4,6,-3,-7,-8,3,-4,-3,-3,8,-5,-1,-1,4,6,-8,6,10,-7,-2,-6,2,4,-8,-6,-8,7,9,-8,-9,-8,-3,-3,4,9,-2,1,-7,-7,-9,-3,5,6,-9,1,-9,7,1,-6,-7,-9,2,-2,4,-5,-6,1,8,7,4,-7,5,4,3,1,6,10,-3,-8,6,1,2,3,-3,-9,-10,-9,-10,3,2,-5,5,8,-10,4,-10,7,-10,5,-3,-10,1,-8,-10,-6], dtype = "uint64")#candidate|4775|(1950,)|const|uint64
call_4774 = relay.TupleGetItem(func_4360_call(relay.reshape(const_4775.astype('uint64'), [15, 13, 10])), 0)
call_4776 = relay.TupleGetItem(func_4362_call(relay.reshape(const_4775.astype('uint64'), [15, 13, 10])), 0)
bop_4789 = relay.floor_mod(call_4774.astype('float32'), relay.reshape(const_4775.astype('float32'), relay.shape_of(call_4774))) # shape=(15, 13, 10)
bop_4792 = relay.floor_mod(call_4776.astype('float32'), relay.reshape(const_4775.astype('float32'), relay.shape_of(call_4776))) # shape=(15, 13, 10)
output = relay.Tuple([uop_4772,bop_4789,])
output2 = relay.Tuple([uop_4772,bop_4792,])
func_4807 = relay.Function([var_4771,], output)
mod['func_4807'] = func_4807
mod = relay.transform.InferType()(mod)
mutated_mod['func_4807'] = func_4807
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4808 = relay.var("var_4808", dtype = "float32", shape = (13, 8, 16))#candidate|4808|(13, 8, 16)|var|float32
func_4807_call = mutated_mod.get_global_var('func_4807')
call_4809 = func_4807_call(var_4808)
output = call_4809
func_4810 = relay.Function([var_4808], output)
mutated_mod['func_4810'] = func_4810
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4709_call = mod.get_global_var('func_4709')
func_4710_call = mutated_mod.get_global_var('func_4710')
call_4845 = func_4709_call()
call_4846 = func_4709_call()
func_2721_call = mod.get_global_var('func_2721')
func_2724_call = mutated_mod.get_global_var('func_2724')
const_4848 = relay.const([-5.844382,-7.779216,-9.706734,3.790104,9.553937,-2.293500,-2.852846,4.670450,-0.613987,-8.713633,0.734402,8.740026,1.452057,1.478956,8.555941,4.227812,-3.062187,-9.463109,0.492236,-5.347488,-7.541500,4.597341,6.807181,-7.457482,-0.150064,0.260336,-2.496532,3.925498,-0.180723,-8.177536,8.041819,0.738865,-2.884757,6.821692,1.379760,-2.998567,-2.157191,-4.716215,-3.563385,7.858492,3.172478,4.167289,3.613019,-9.191970,6.471374,0.671389,-4.076166,-8.959000,2.628724,-0.675550,-4.455770,-0.339498,-6.859344,-9.541154,8.760107,2.472742,-8.856306,-7.849130,-8.147431,1.007228,8.060109,-6.048582,9.006055,-8.156885,-0.491530,1.872748,-9.191437,6.065926,-2.037503,4.295213,5.542220,7.924668,3.464732,6.124865,-4.648493,-1.631636,-8.631118,2.360591,8.561296,-4.379472,-2.842976,-7.378195,2.303639,-8.443000,-0.315475,1.555921,-8.092765,5.724436,-9.439940,8.239361,-4.475669,-0.566839,0.049770,-2.314093,-9.571729,-3.494168,9.125447,6.018203,5.307304,-4.352861,8.672741,8.825145,-4.895925,-0.157330,-7.842738,1.548796,1.274473,1.606805,2.050088,4.230866,-6.290888,8.468513,8.293199,-8.719268,-4.880636,-4.127889,-8.009166,9.375447,-0.444907,7.940482,-1.635339,9.759336,-8.017649,-0.812489,8.731758,8.826476,0.414957,5.394130,8.684455,8.782566,-1.097970,-6.973757,-7.400591,-6.795593,2.577596,8.254363,-1.268297,4.859747,8.030210,6.736748,8.644211,-8.206556,8.694462,4.356785,5.311616,-5.582627,-5.756959,-9.251357,-2.362544,-2.119917,-5.020029,1.877457,-4.839153,5.150366,-9.747754,-7.382222,-5.555698,3.561907,-9.238127,-7.557514,9.072850,-8.552769,3.710875,-0.676886,6.641089,8.391366,-1.852260,-3.498207,0.846156,-7.930799,-6.332139,-0.621876,8.783447,-3.405319,-1.938302,3.578814,6.499383,-1.855985,-9.820111,0.995309,8.971535,7.718547,9.901978,-7.663274,-6.701021,4.582169,-0.374206,7.985613,0.963100,2.773812,-0.224814,0.605819,-2.083092,0.789644,7.557924,-8.066519,5.347723,-0.639297,-3.814194,-2.211590,-5.374255,3.589036,7.602407,-0.470338,6.963321,-8.406219,9.304625,5.661631,7.227957,-6.585987,7.063565,6.900908,8.376677,-3.424620,0.941239,-4.181672,-8.782166,-4.097150,-6.178020,-4.137010,-5.929344,0.521719,-1.134323,-8.125050,9.054756,-4.172782,7.944339,-3.297182,-3.481668,-1.793243,8.895851,9.302021,7.882192,1.596480,-5.174707,8.231867,-5.950655,-5.442923,4.657491,8.698195,-4.480894,-5.141366,5.152984,-0.540779,7.879169,7.188008,0.648194,-5.962674,-9.607034,-6.549976,9.677877,-7.298562,-9.438634,-1.826933,9.031355,2.411916,-5.888203,3.212833,-8.304342,5.360011,5.304911,-2.974046,7.320769,1.101037,-4.076524,-5.761009,5.638202,6.360746,-5.424123,2.347968,1.327055,0.558590,-6.571259,-7.165355,-3.863634,-5.042504,-3.948958,-3.031651,7.699586,-8.698004,8.059106,5.047826,6.533971,-6.082211,6.463992,2.660441,-3.029187,-3.386059,6.336157,1.068447,-5.935405,6.366965,-9.965818,-9.795392,2.076451,4.381231,4.708435,7.379384,-2.368878,-0.647480,-2.890690,-2.070059,-7.127810,6.813138,5.182479,3.763588,8.419384,6.549258,-1.219043,0.274200,-4.833324,-0.518051,-6.974941,-0.582573,-0.155870,-0.498413,-3.177606,5.066984,9.271868,-5.895247,-1.647479,-7.181980,6.191375,6.518053,7.339488,0.279873,-0.448206,4.222509,-2.258419,0.272757,7.492545,2.557109,-2.546160,-8.473449,2.559162,1.207948,7.833902,0.215035,7.923918,-5.371441,-8.654410,-1.380040,-2.517421,4.864544,1.054200,2.812180,-5.666440,-4.927582,6.478258,-5.272497,5.485692,-2.588141,1.988653,0.177203,9.239435,4.465354,-9.710881,-6.817746,6.439852,0.099759,-3.730746,9.282779,5.448161,1.631725,4.320800,8.679386,7.979204,1.912007,-0.192139,8.838707,-4.260669,2.558532,-2.417770,0.928522,5.443102,-5.341451,4.536502,-1.799860,2.895744,-4.652398,6.235043,-4.244089,6.945653,9.735214,-1.516241,2.509505,1.560123,6.871273,-7.507183,3.432592,7.240741,6.772060,-4.063882,9.058770,-9.172397,-1.924278,-6.297591,-9.438594,-7.983319,4.596392,7.243964,1.107561,4.872514,-1.237567,-5.561381,3.064327,-1.379684,-8.208310,-0.559547,-6.745378,9.662589,-1.974378,4.027677,-9.457109,-7.397447,5.903109,-0.325496,-3.164469,7.523033,-2.763574,-8.020705,-7.677433,-3.715733,7.447086,-5.787651,3.002334,-9.980835,5.289436,5.287196,3.982643,7.924874,3.885023,-7.771660,5.007078,-2.404259,5.231845,3.365166,7.544058,-5.195435,-3.997152,0.088652,7.612861,4.796595,9.837851,-3.743871,-0.643070,3.043670,0.591454,0.955401,-6.232599,-2.528125,9.436920,4.405030,-0.050513,9.526049,-0.215828,-4.218975,1.129540,3.471867,-8.885477,8.795041,4.964373,-6.744193,-2.528186,-4.904126,-6.774903,-5.763851,-0.529569,-5.887415,-8.402106,-4.783620,-9.387793,-5.937057,-1.003619,3.658448,8.691384,-6.880701,6.660572,9.882909,-9.699062,-4.339582,1.984174,-7.076810,-5.613228,-9.878190,0.976830,-9.717154,4.989180,3.691850,-0.544206,7.166973,2.983814,-3.594028,-1.807100,5.542426,2.565026,2.046045,-8.376797,4.364479,3.188544,5.073900,-9.070744,-5.746039,-4.943204,8.529299,-4.777007,-5.376893,-6.449274,1.159723,4.123345,-4.914926,-1.299927,7.249777,3.859461,-2.361527,-6.863820,0.993128,6.214181,-7.830874,7.472300,-8.730747,-5.400490,-4.818139,6.947172,-7.637295,-9.311541,-3.126750,-1.656751,1.938857,-3.476660,-5.704580,-4.847361,4.208031,-0.341637,1.707583,3.700210,3.402072,5.818157,8.104395,7.251690], dtype = "float32")#candidate|4848|(540,)|const|float32
call_4847 = relay.TupleGetItem(func_2721_call(relay.reshape(const_4848.astype('float32'), [9, 10, 6])), 0)
call_4849 = relay.TupleGetItem(func_2724_call(relay.reshape(const_4848.astype('float32'), [9, 10, 6])), 0)
uop_4851 = relay.sin(call_4847.astype('float64')) # shape=(9, 10, 6)
uop_4853 = relay.sin(call_4849.astype('float64')) # shape=(9, 10, 6)
output = relay.Tuple([call_4845,const_4848,uop_4851,])
output2 = relay.Tuple([call_4846,const_4848,uop_4853,])
func_4856 = relay.Function([], output)
mod['func_4856'] = func_4856
mod = relay.transform.InferType()(mod)
mutated_mod['func_4856'] = func_4856
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4856_call = mutated_mod.get_global_var('func_4856')
call_4857 = func_4856_call()
output = call_4857
func_4858 = relay.Function([], output)
mutated_mod['func_4858'] = func_4858
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4859 = relay.var("var_4859", dtype = "int8", shape = (13, 12, 10))#candidate|4859|(13, 12, 10)|var|int8
var_4860 = relay.var("var_4860", dtype = "int8", shape = (13, 12, 10))#candidate|4860|(13, 12, 10)|var|int8
bop_4861 = relay.maximum(var_4859.astype('int8'), relay.reshape(var_4860.astype('int8'), relay.shape_of(var_4859))) # shape=(13, 12, 10)
bop_4873 = relay.bitwise_and(var_4860.astype('uint16'), relay.reshape(bop_4861.astype('uint16'), relay.shape_of(var_4860))) # shape=(13, 12, 10)
func_571_call = mod.get_global_var('func_571')
func_574_call = mutated_mod.get_global_var('func_574')
const_4882 = relay.const([[8,4,-6,4,7,-10,10,2,3,8,-2,-10,-7,1,-10,6,1,-4,4,-4,-9,-7,-8,-10,8,-7,-6,-7,1,-4,3,3,-10,2,4,-7,10,-3,-3,-1,8,3],[7,6,8,-3,9,-6,2,5,3,10,-5,4,-7,-1,5,10,6,1,5,8,1,-5,1,10,1,1,-6,-4,-2,-7,-10,8,-2,-1,-5,3,2,-3,-9,1,5,-5],[-7,-2,-3,5,-8,1,-3,9,1,6,-1,8,-1,9,1,7,-3,6,-1,-1,-3,1,5,4,3,9,8,-5,8,-7,1,6,2,-10,-2,-2,-3,9,-4,-4,-4,2],[-2,-2,-4,-1,10,9,-1,7,-9,-6,-3,-10,9,-5,-9,-4,-7,-3,-3,5,4,-9,2,6,-4,-8,1,-5,2,-3,8,-3,-4,-7,-3,-4,6,-1,9,4,2,-2],[9,-5,-1,3,-6,6,5,10,-6,6,-8,-2,6,10,-7,-3,4,-9,-6,4,-1,5,2,5,-10,9,9,4,-9,-3,1,-5,6,7,8,-6,-2,4,-8,1,9,-5],[3,-4,-6,-1,7,-9,9,4,1,-6,-3,-8,-9,-9,1,7,-3,-6,-9,3,2,8,-2,-1,-4,-6,7,-10,-3,5,2,7,4,-2,2,-1,-1,-8,-1,6,5,-4],[7,7,2,-3,-7,-10,8,5,9,-6,7,5,-2,5,4,8,-5,1,-10,-2,9,-7,3,-6,-10,-5,6,-4,1,-6,1,8,10,3,-6,-4,-6,1,-4,2,-1,10],[-6,-8,6,-4,7,-2,1,-4,10,-1,8,6,1,6,4,1,-2,9,-4,-6,-4,7,-6,10,10,2,5,2,7,-8,-5,3,2,7,4,7,4,3,7,-7,7,7],[-9,-6,6,-9,6,10,5,-4,-3,-9,6,-6,-5,2,-4,2,9,-10,-3,-7,3,7,-5,7,1,-4,5,-2,4,-2,4,-4,5,9,4,-9,5,3,6,-7,-7,3],[-2,-4,-8,7,-4,6,-4,7,3,5,1,-6,-9,3,-6,9,9,6,-2,9,5,-5,-10,-7,10,1,-9,2,1,-5,10,-7,-7,-8,8,-7,5,-2,-6,-10,-10,-2],[7,8,-9,-7,6,10,8,4,-9,1,-3,-3,-3,-9,-3,3,-5,9,5,-3,-1,6,-2,7,3,7,10,-7,2,-5,9,6,8,-7,5,-6,4,-8,-4,10,-3,-3],[7,-4,-10,-6,7,-10,-1,-10,9,-3,-7,9,-5,9,8,-1,-4,5,-5,2,7,9,-10,-2,-4,-10,-7,-4,-10,10,-5,-2,-5,-2,10,-2,-5,-4,-1,-4,3,-8]], dtype = "uint64")#candidate|4882|(12, 42)|const|uint64
call_4881 = relay.TupleGetItem(func_571_call(relay.reshape(const_4882.astype('uint64'), [14, 12, 3]), relay.reshape(const_4882.astype('uint64'), [14, 12, 3]), ), 0)
call_4883 = relay.TupleGetItem(func_574_call(relay.reshape(const_4882.astype('uint64'), [14, 12, 3]), relay.reshape(const_4882.astype('uint64'), [14, 12, 3]), ), 0)
func_3342_call = mod.get_global_var('func_3342')
func_3346_call = mutated_mod.get_global_var('func_3346')
const_4890 = relay.const([5,-2,-10,5,-3,1,6,3,-7,-5], dtype = "uint16")#candidate|4890|(10,)|const|uint16
var_4891 = relay.var("var_4891", dtype = "uint16", shape = (100,))#candidate|4891|(100,)|var|uint16
call_4889 = relay.TupleGetItem(func_3342_call(relay.reshape(const_4890.astype('uint16'), [10,]), relay.reshape(var_4891.astype('uint16'), [100,]), ), 1)
call_4892 = relay.TupleGetItem(func_3346_call(relay.reshape(const_4890.astype('uint16'), [10,]), relay.reshape(var_4891.astype('uint16'), [100,]), ), 1)
func_4655_call = mod.get_global_var('func_4655')
func_4656_call = mutated_mod.get_global_var('func_4656')
call_4894 = relay.TupleGetItem(func_4655_call(), 0)
call_4895 = relay.TupleGetItem(func_4656_call(), 0)
uop_4898 = relay.exp(call_4881.astype('float64')) # shape=(14, 12, 3)
uop_4900 = relay.exp(call_4883.astype('float64')) # shape=(14, 12, 3)
output = relay.Tuple([bop_4873,const_4882,call_4889,const_4890,var_4891,call_4894,uop_4898,])
output2 = relay.Tuple([bop_4873,const_4882,call_4892,const_4890,var_4891,call_4895,uop_4900,])
func_4925 = relay.Function([var_4859,var_4860,var_4891,], output)
mod['func_4925'] = func_4925
mod = relay.transform.InferType()(mod)
var_4926 = relay.var("var_4926", dtype = "int8", shape = (13, 12, 10))#candidate|4926|(13, 12, 10)|var|int8
var_4927 = relay.var("var_4927", dtype = "int8", shape = (13, 12, 10))#candidate|4927|(13, 12, 10)|var|int8
var_4928 = relay.var("var_4928", dtype = "uint16", shape = (100,))#candidate|4928|(100,)|var|uint16
output = func_4925(var_4926,var_4927,var_4928,)
func_4929 = relay.Function([var_4926,var_4927,var_4928,], output)
mutated_mod['func_4929'] = func_4929
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4545_call = mod.get_global_var('func_4545')
func_4546_call = mutated_mod.get_global_var('func_4546')
call_4949 = relay.TupleGetItem(func_4545_call(), 0)
call_4950 = relay.TupleGetItem(func_4546_call(), 0)
func_790_call = mod.get_global_var('func_790')
func_793_call = mutated_mod.get_global_var('func_793')
const_4960 = relay.const([[0.917977],[1.290366],[7.719747],[-2.930805],[-0.039392],[0.501805],[-2.697212],[3.914323],[0.976773],[-9.763950],[-7.837811],[4.607199],[-9.630467],[2.182076],[-3.550330],[0.549331],[-2.174722],[-9.073638],[5.179892],[-8.888406],[-2.004645],[5.292548],[0.773496],[-6.300199],[-1.374684],[7.984395],[-9.048860],[-2.333829],[8.363871],[2.822825],[3.273474],[4.396250],[0.951735],[0.757075],[0.184734],[-8.331696],[-6.730941],[-0.740592],[-9.413900],[-6.808244],[3.523235],[5.024481],[-6.125119],[1.745502],[-4.434808],[2.005093],[6.204977],[5.055367],[2.236802],[5.330183],[4.490251],[-0.094283],[-2.573112],[2.920217],[-5.162207],[9.207451],[-2.823795],[1.080789],[-5.380304],[-9.858159],[9.100633],[8.390102],[2.922646],[3.414380],[3.447420],[5.220040],[-0.887118],[-0.015761],[-0.791569],[-9.951526],[9.642116],[4.694157],[-1.528103],[1.833550],[3.201777],[1.583150],[6.739556],[3.591818],[-8.063995],[0.261591],[-3.280190],[-7.312709],[1.961845],[8.610166],[-4.574891],[-0.785169],[0.633808],[9.315015],[-3.675887],[-5.234932],[6.995058],[-8.305798],[-2.748207],[0.882560],[-6.672032],[7.890584],[5.983588],[9.907986],[-8.044158],[-4.671455],[-5.091819],[9.112869],[-4.093282],[-5.756193],[6.280852],[-2.985921],[-1.405649],[8.585512],[7.617040],[5.256798],[-9.328469],[-5.216947],[-9.222664],[-7.199072],[-6.971263],[-1.776053],[8.775239],[-6.296808],[-3.137923],[-4.813884],[6.980356],[-6.752050],[7.912496],[6.258633],[-9.691860],[-7.060622],[3.269831],[-0.044301],[-1.707594],[-8.158851],[-3.317049],[-6.207473],[-5.288830],[1.750385],[4.876147]], dtype = "float64")#candidate|4960|(135, 1)|const|float64
call_4959 = func_790_call(relay.reshape(const_4960.astype('float64'), [15, 3, 3]))
call_4961 = func_790_call(relay.reshape(const_4960.astype('float64'), [15, 3, 3]))
output = relay.Tuple([call_4949,call_4959,const_4960,])
output2 = relay.Tuple([call_4950,call_4961,const_4960,])
func_4980 = relay.Function([], output)
mod['func_4980'] = func_4980
mod = relay.transform.InferType()(mod)
mutated_mod['func_4980'] = func_4980
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4980_call = mutated_mod.get_global_var('func_4980')
call_4981 = func_4980_call()
output = call_4981
func_4982 = relay.Function([], output)
mutated_mod['func_4982'] = func_4982
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4545_call = mod.get_global_var('func_4545')
func_4546_call = mutated_mod.get_global_var('func_4546')
call_5002 = relay.TupleGetItem(func_4545_call(), 0)
call_5003 = relay.TupleGetItem(func_4546_call(), 0)
var_5024 = relay.var("var_5024", dtype = "float64", shape = (11, 12, 12))#candidate|5024|(11, 12, 12)|var|float64
bop_5025 = relay.less_equal(call_5002.astype('bool'), relay.reshape(var_5024.astype('bool'), relay.shape_of(call_5002))) # shape=(11, 12, 12)
bop_5028 = relay.less_equal(call_5003.astype('bool'), relay.reshape(var_5024.astype('bool'), relay.shape_of(call_5003))) # shape=(11, 12, 12)
output = bop_5025
output2 = bop_5028
func_5035 = relay.Function([var_5024,], output)
mod['func_5035'] = func_5035
mod = relay.transform.InferType()(mod)
var_5036 = relay.var("var_5036", dtype = "float64", shape = (11, 12, 12))#candidate|5036|(11, 12, 12)|var|float64
output = func_5035(var_5036)
func_5037 = relay.Function([var_5036], output)
mutated_mod['func_5037'] = func_5037
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5166 = relay.var("var_5166", dtype = "float64", shape = (15, 4, 5))#candidate|5166|(15, 4, 5)|var|float64
uop_5167 = relay.log10(var_5166.astype('float64')) # shape=(15, 4, 5)
bop_5169 = relay.bitwise_xor(var_5166.astype('uint8'), relay.reshape(uop_5167.astype('uint8'), relay.shape_of(var_5166))) # shape=(15, 4, 5)
bop_5178 = relay.add(bop_5169.astype('float32'), relay.reshape(var_5166.astype('float32'), relay.shape_of(bop_5169))) # shape=(15, 4, 5)
output = bop_5178
output2 = bop_5178
func_5183 = relay.Function([var_5166,], output)
mod['func_5183'] = func_5183
mod = relay.transform.InferType()(mod)
var_5184 = relay.var("var_5184", dtype = "float64", shape = (15, 4, 5))#candidate|5184|(15, 4, 5)|var|float64
output = func_5183(var_5184)
func_5185 = relay.Function([var_5184], output)
mutated_mod['func_5185'] = func_5185
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4512_call = mod.get_global_var('func_4512')
func_4514_call = mutated_mod.get_global_var('func_4514')
call_5190 = func_4512_call()
call_5191 = func_4512_call()
output = relay.Tuple([call_5190,])
output2 = relay.Tuple([call_5191,])
func_5195 = relay.Function([], output)
mod['func_5195'] = func_5195
mod = relay.transform.InferType()(mod)
output = func_5195()
func_5196 = relay.Function([], output)
mutated_mod['func_5196'] = func_5196
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4655_call = mod.get_global_var('func_4655')
func_4656_call = mutated_mod.get_global_var('func_4656')
call_5208 = relay.TupleGetItem(func_4655_call(), 2)
call_5209 = relay.TupleGetItem(func_4656_call(), 2)
func_2161_call = mod.get_global_var('func_2161')
func_2165_call = mutated_mod.get_global_var('func_2165')
const_5219 = relay.const([1.664256,-4.416311,2.241132,4.115141,-2.041394,0.217994,2.951131,-0.609876,-8.046552,-6.940796,9.097251,-4.056791,-6.220260,-6.838075,8.152601,-8.166602,-4.692532,-3.520664,-2.323496,-1.641906,4.200083,6.217938,3.528588,-8.376114,1.478814,-1.972210,-8.366127,0.891174,2.066493,-8.147646,4.983503,-4.830167,9.699868,4.088171,-0.402779,6.919839,9.679501,-9.646288,-3.767550,-5.211052,1.957671,-2.782562,5.121085,-2.563404,5.809858,-2.696029,-9.800829,-4.826101,3.222621,1.509594,7.016882,1.792617,-2.689007,-4.318532,-1.154966,-9.532712,0.967472,1.440464,-2.694187,-9.642957,-0.497046,-2.615314,0.801950,-4.785184,-4.845533,-1.996710,-0.331334,0.649333,1.777157,9.832672,-1.958520,5.596061,-5.750251,4.303290,-5.703712,-4.326255,-3.462455,7.194309,-2.169387,-8.592044,-2.746426,-2.405369,-5.951055,9.805040,7.914694,8.417025,-6.467823,-6.935234,0.035619,4.945574,4.408811,-3.902399,-7.257284,2.500300,8.109161,2.102687,-7.647769,9.511403,0.122630,-1.946244,8.289889,0.033120,-3.456532,0.101427,3.641450,8.775171,-8.631441,-4.817215,-5.661742,4.858088,9.715103,9.459071,4.826156,-3.070328,4.444189,6.230784,-8.579270,-4.113060,-2.875160,-4.519452,-4.747445,-8.650962,4.290774,1.009170,-2.124104,1.663501,8.512296,4.675588,9.927873,-4.657950,-7.241504,-8.485617,-5.677315,0.139102,-1.615990,-9.040426,-7.640897,5.286891,5.333811,1.544503,-0.660342,4.094492,7.219694,-4.224253,-3.962011,7.801855,-0.269744,6.542242,-9.796238,-6.705854,-3.900815,9.989462,8.206340,-3.918045,1.124946,7.428249,-3.473903,6.055931,7.258293,7.033603,-2.965101,3.469560,-1.689620,5.209877,1.391325,7.401421,-2.106256,-1.178175], dtype = "float32")#candidate|5219|(168,)|const|float32
const_5220 = relay.const([-8,-6,7,4,3,-2,-7,3,4,10], dtype = "uint16")#candidate|5220|(10,)|const|uint16
const_5221 = relay.const([-5,2,4,-3,-9,-4,-4,7,4,10,-1,1,-3,-1,4,-2,10,7,4,-1,-10,9,7,2,6,-9,8,-4,5,-7,3,10,-5,-9,8,3,-6,2,8,5,7,-2,-6,-10,-2,-9,-8,8,7,-2,7,3,-6,7,10,-8,7,-5,-6,3,-2,3,-3,-3,8,3,1,-9,2,2,7,10,2,5,8,6,-2,2,-9,4,-2,-3,5,-1,7,9,-5,-7,4,-5,-2,4,7,7,-3,-3,10,-8,-9,3], dtype = "uint16")#candidate|5221|(100,)|const|uint16
call_5218 = relay.TupleGetItem(func_2161_call(relay.reshape(const_5219.astype('float32'), [12, 2, 7]), relay.reshape(const_5220.astype('uint16'), [10,]), relay.reshape(const_5221.astype('uint16'), [100,]), ), 3)
call_5222 = relay.TupleGetItem(func_2165_call(relay.reshape(const_5219.astype('float32'), [12, 2, 7]), relay.reshape(const_5220.astype('uint16'), [10,]), relay.reshape(const_5221.astype('uint16'), [100,]), ), 3)
uop_5234 = relay.sin(call_5218.astype('float64')) # shape=(2, 672)
uop_5236 = relay.sin(call_5222.astype('float64')) # shape=(2, 672)
func_1419_call = mod.get_global_var('func_1419')
func_1423_call = mutated_mod.get_global_var('func_1423')
var_5248 = relay.var("var_5248", dtype = "bool", shape = (1, 900))#candidate|5248|(1, 900)|var|bool
call_5247 = relay.TupleGetItem(func_1419_call(relay.reshape(var_5248.astype('bool'), [12, 15, 5]), relay.reshape(var_5248.astype('bool'), [12, 15, 5]), ), 0)
call_5249 = relay.TupleGetItem(func_1423_call(relay.reshape(var_5248.astype('bool'), [12, 15, 5]), relay.reshape(var_5248.astype('bool'), [12, 15, 5]), ), 0)
output = relay.Tuple([call_5208,const_5219,const_5220,const_5221,uop_5234,call_5247,var_5248,])
output2 = relay.Tuple([call_5209,const_5219,const_5220,const_5221,uop_5236,call_5249,var_5248,])
func_5250 = relay.Function([var_5248,], output)
mod['func_5250'] = func_5250
mod = relay.transform.InferType()(mod)
mutated_mod['func_5250'] = func_5250
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5251 = relay.var("var_5251", dtype = "bool", shape = (1, 900))#candidate|5251|(1, 900)|var|bool
func_5250_call = mutated_mod.get_global_var('func_5250')
call_5252 = func_5250_call(var_5251)
output = call_5252
func_5253 = relay.Function([var_5251], output)
mutated_mod['func_5253'] = func_5253
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4856_call = mod.get_global_var('func_4856')
func_4858_call = mutated_mod.get_global_var('func_4858')
call_5359 = relay.TupleGetItem(func_4856_call(), 2)
call_5360 = relay.TupleGetItem(func_4858_call(), 2)
uop_5371 = relay.atan(call_5359.astype('float64')) # shape=(9, 10, 6)
uop_5373 = relay.atan(call_5360.astype('float64')) # shape=(9, 10, 6)
func_3384_call = mod.get_global_var('func_3384')
func_3387_call = mutated_mod.get_global_var('func_3387')
var_5379 = relay.var("var_5379", dtype = "float32", shape = (600,))#candidate|5379|(600,)|var|float32
call_5378 = relay.TupleGetItem(func_3384_call(relay.reshape(var_5379.astype('float32'), [12, 10, 5])), 0)
call_5380 = relay.TupleGetItem(func_3387_call(relay.reshape(var_5379.astype('float32'), [12, 10, 5])), 0)
output = relay.Tuple([uop_5371,call_5378,var_5379,])
output2 = relay.Tuple([uop_5373,call_5380,var_5379,])
func_5381 = relay.Function([var_5379,], output)
mod['func_5381'] = func_5381
mod = relay.transform.InferType()(mod)
var_5382 = relay.var("var_5382", dtype = "float32", shape = (600,))#candidate|5382|(600,)|var|float32
output = func_5381(var_5382)
func_5383 = relay.Function([var_5382], output)
mutated_mod['func_5383'] = func_5383
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4545_call = mod.get_global_var('func_4545')
func_4546_call = mutated_mod.get_global_var('func_4546')
call_5407 = relay.TupleGetItem(func_4545_call(), 0)
call_5408 = relay.TupleGetItem(func_4546_call(), 0)
uop_5414 = relay.log2(call_5407.astype('float32')) # shape=(11, 12, 12)
uop_5416 = relay.log2(call_5408.astype('float32')) # shape=(11, 12, 12)
bop_5420 = relay.greater(uop_5414.astype('bool'), relay.reshape(call_5407.astype('bool'), relay.shape_of(uop_5414))) # shape=(11, 12, 12)
bop_5423 = relay.greater(uop_5416.astype('bool'), relay.reshape(call_5408.astype('bool'), relay.shape_of(uop_5416))) # shape=(11, 12, 12)
output = bop_5420
output2 = bop_5423
func_5434 = relay.Function([], output)
mod['func_5434'] = func_5434
mod = relay.transform.InferType()(mod)
mutated_mod['func_5434'] = func_5434
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5434_call = mutated_mod.get_global_var('func_5434')
call_5435 = func_5434_call()
output = call_5435
func_5436 = relay.Function([], output)
mutated_mod['func_5436'] = func_5436
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4512_call = mod.get_global_var('func_4512')
func_4514_call = mutated_mod.get_global_var('func_4514')
call_5462 = func_4512_call()
call_5463 = func_4512_call()
uop_5500 = relay.acosh(call_5462.astype('float32')) # shape=(11, 12, 12)
uop_5502 = relay.acosh(call_5463.astype('float32')) # shape=(11, 12, 12)
output = uop_5500
output2 = uop_5502
func_5509 = relay.Function([], output)
mod['func_5509'] = func_5509
mod = relay.transform.InferType()(mod)
mutated_mod['func_5509'] = func_5509
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5509_call = mutated_mod.get_global_var('func_5509')
call_5510 = func_5509_call()
output = call_5510
func_5511 = relay.Function([], output)
mutated_mod['func_5511'] = func_5511
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4856_call = mod.get_global_var('func_4856')
func_4858_call = mutated_mod.get_global_var('func_4858')
call_5517 = relay.TupleGetItem(func_4856_call(), 1)
call_5518 = relay.TupleGetItem(func_4858_call(), 1)
uop_5529 = relay.atanh(call_5517.astype('float64')) # shape=(540,)
uop_5531 = relay.atanh(call_5518.astype('float64')) # shape=(540,)
output = relay.Tuple([uop_5529,])
output2 = relay.Tuple([uop_5531,])
func_5538 = relay.Function([], output)
mod['func_5538'] = func_5538
mod = relay.transform.InferType()(mod)
output = func_5538()
func_5539 = relay.Function([], output)
mutated_mod['func_5539'] = func_5539
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5195_call = mod.get_global_var('func_5195')
func_5196_call = mutated_mod.get_global_var('func_5196')
call_5569 = relay.TupleGetItem(func_5195_call(), 0)
call_5570 = relay.TupleGetItem(func_5196_call(), 0)
func_864_call = mod.get_global_var('func_864')
func_866_call = mutated_mod.get_global_var('func_866')
var_5575 = relay.var("var_5575", dtype = "uint16", shape = (80,))#candidate|5575|(80,)|var|uint16
call_5574 = relay.TupleGetItem(func_864_call(relay.reshape(var_5575.astype('uint16'), [5, 16, 1])), 0)
call_5576 = relay.TupleGetItem(func_866_call(relay.reshape(var_5575.astype('uint16'), [5, 16, 1])), 0)
output = relay.Tuple([call_5569,call_5574,var_5575,])
output2 = relay.Tuple([call_5570,call_5576,var_5575,])
func_5585 = relay.Function([var_5575,], output)
mod['func_5585'] = func_5585
mod = relay.transform.InferType()(mod)
mutated_mod['func_5585'] = func_5585
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5586 = relay.var("var_5586", dtype = "uint16", shape = (80,))#candidate|5586|(80,)|var|uint16
func_5585_call = mutated_mod.get_global_var('func_5585')
call_5587 = func_5585_call(var_5586)
output = call_5587
func_5588 = relay.Function([var_5586], output)
mutated_mod['func_5588'] = func_5588
mutated_mod = relay.transform.InferType()(mutated_mod)
const_5630 = relay.const([[[-3,8,-3,4],[-8,9,-1,8],[10,9,7,-7],[-1,-1,5,-8]],[[8,4,3,-3],[6,-4,-4,8],[10,-7,3,4],[-3,8,-4,-6]]], dtype = "uint16")#candidate|5630|(2, 4, 4)|const|uint16
var_5631 = relay.var("var_5631", dtype = "uint16", shape = (2, 4, 4))#candidate|5631|(2, 4, 4)|var|uint16
bop_5632 = relay.bitwise_or(const_5630.astype('uint16'), relay.reshape(var_5631.astype('uint16'), relay.shape_of(const_5630))) # shape=(2, 4, 4)
func_4709_call = mod.get_global_var('func_4709')
func_4710_call = mutated_mod.get_global_var('func_4710')
call_5635 = func_4709_call()
call_5636 = func_4709_call()
func_5195_call = mod.get_global_var('func_5195')
func_5196_call = mutated_mod.get_global_var('func_5196')
call_5638 = relay.TupleGetItem(func_5195_call(), 0)
call_5639 = relay.TupleGetItem(func_5196_call(), 0)
output = relay.Tuple([bop_5632,call_5635,call_5638,])
output2 = relay.Tuple([bop_5632,call_5636,call_5639,])
func_5642 = relay.Function([var_5631,], output)
mod['func_5642'] = func_5642
mod = relay.transform.InferType()(mod)
var_5643 = relay.var("var_5643", dtype = "uint16", shape = (2, 4, 4))#candidate|5643|(2, 4, 4)|var|uint16
output = func_5642(var_5643)
func_5644 = relay.Function([var_5643], output)
mutated_mod['func_5644'] = func_5644
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4769_call = mod.get_global_var('func_4769')
func_4770_call = mutated_mod.get_global_var('func_4770')
call_5653 = relay.TupleGetItem(func_4769_call(), 0)
call_5654 = relay.TupleGetItem(func_4770_call(), 0)
func_4545_call = mod.get_global_var('func_4545')
func_4546_call = mutated_mod.get_global_var('func_4546')
call_5673 = relay.TupleGetItem(func_4545_call(), 0)
call_5674 = relay.TupleGetItem(func_4546_call(), 0)
output = relay.Tuple([call_5653,call_5673,])
output2 = relay.Tuple([call_5654,call_5674,])
func_5690 = relay.Function([], output)
mod['func_5690'] = func_5690
mod = relay.transform.InferType()(mod)
output = func_5690()
func_5691 = relay.Function([], output)
mutated_mod['func_5691'] = func_5691
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4856_call = mod.get_global_var('func_4856')
func_4858_call = mutated_mod.get_global_var('func_4858')
call_5700 = relay.TupleGetItem(func_4856_call(), 1)
call_5701 = relay.TupleGetItem(func_4858_call(), 1)
func_5642_call = mod.get_global_var('func_5642')
func_5644_call = mutated_mod.get_global_var('func_5644')
const_5714 = relay.const([-9,8,10,-9,6,-10,3,-3,4,-4,2,10,4,-10,-3,4,9,-8,-9,-10,2,-7,5,-7,1,6,7,1,5,6,8,2], dtype = "uint16")#candidate|5714|(32,)|const|uint16
call_5713 = relay.TupleGetItem(func_5642_call(relay.reshape(const_5714.astype('uint16'), [2, 4, 4])), 0)
call_5715 = relay.TupleGetItem(func_5644_call(relay.reshape(const_5714.astype('uint16'), [2, 4, 4])), 0)
func_5509_call = mod.get_global_var('func_5509')
func_5511_call = mutated_mod.get_global_var('func_5511')
call_5717 = func_5509_call()
call_5718 = func_5509_call()
output = relay.Tuple([call_5700,call_5713,const_5714,call_5717,])
output2 = relay.Tuple([call_5701,call_5715,const_5714,call_5718,])
func_5728 = relay.Function([], output)
mod['func_5728'] = func_5728
mod = relay.transform.InferType()(mod)
mutated_mod['func_5728'] = func_5728
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5728_call = mutated_mod.get_global_var('func_5728')
call_5729 = func_5728_call()
output = call_5729
func_5730 = relay.Function([], output)
mutated_mod['func_5730'] = func_5730
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5728_call = mod.get_global_var('func_5728')
func_5730_call = mutated_mod.get_global_var('func_5730')
call_5812 = relay.TupleGetItem(func_5728_call(), 2)
call_5813 = relay.TupleGetItem(func_5730_call(), 2)
func_790_call = mod.get_global_var('func_790')
func_793_call = mutated_mod.get_global_var('func_793')
const_5815 = relay.const([9.486744,3.597594,-9.759062,4.346091,3.866736,0.235558,0.334745,-9.334997,-2.939838,-9.232897,3.851516,-9.401835,3.949028,7.759555,3.761154,6.495564,-6.696801,-6.754399,-1.670115,7.023579,8.157418,-5.005061,6.343292,-2.971854,-7.049239,2.472945,5.785287,-4.995086,-4.487571,0.537607,5.243682,9.060430,-3.439591,2.733028,3.162022,-7.916272,2.130843,-2.586715,5.111111,-2.480176,6.594515,4.152020,7.036182,-6.967994,-3.817778,9.801550,-1.048667,7.324006,4.966788,-8.059073,-2.482447,7.820737,1.292195,-1.089854,0.726800,7.932761,-6.060436,0.026469,-0.414539,-7.451773,0.261339,-4.893730,-0.719342,-0.922751,-8.570996,-5.224783,4.492402,-6.733256,8.260819,1.326961,0.259197,-9.045632,-4.922983,9.262157,5.632842,2.289755,-4.579165,-3.828697,7.970124,-6.955090,3.631704,-0.383763,-0.938356,-7.185580,-7.486467,-2.532637,-7.281777,7.996750,-8.166016,8.475928,-7.524113,3.528668,-7.157352,0.606510,-8.822736,-4.821098,9.545841,6.331532,2.043357,9.763589,3.313792,-4.615433,-4.518702,-4.433430,-6.810836,-2.009930,-9.711666,5.511463,-9.294855,8.589671,-8.957735,-8.839725,-1.528169,-9.392034,9.046937,9.431360,3.203074,-6.752583,-6.747328,7.519753,-9.990406,0.899097,0.497433,-5.383594,-0.495635,-6.547499,2.813415,-0.533044,-9.060054,6.878055,-1.331500,5.257732,-2.520610,-5.897894,-3.642729], dtype = "float64")#candidate|5815|(135,)|const|float64
call_5814 = func_790_call(relay.reshape(const_5815.astype('float64'), [15, 3, 3]))
call_5816 = func_790_call(relay.reshape(const_5815.astype('float64'), [15, 3, 3]))
func_2489_call = mod.get_global_var('func_2489')
func_2491_call = mutated_mod.get_global_var('func_2491')
const_5822 = relay.const([1.530518,8.438983,8.153260,-7.353229,8.876656,-8.629824,-4.913949,1.700913,-2.084176,-1.626077,-5.544728,-3.925303,-1.830090,4.499618,4.772210,9.362314,-3.139775,1.657057,9.307907,-5.592307,8.898611,3.047212,-9.066153,-5.384168,1.547727,4.341525,-6.266606,9.495024,-5.364104,4.460629,0.951824,6.446704,1.298623,7.989997,-4.897241,0.618769,-9.718714,-5.698515,-8.057130,-5.216736,2.334525,7.901595,7.064508,-7.144640,5.303138,-7.324125,-5.685999,9.984305,-8.406012,-8.540873,-3.309754,-3.170834,4.346808,5.265625,-3.551650,7.128099,1.614091,9.718717,0.211797,-5.253617,9.317154,9.911278,-3.146572,-4.624840,8.758808,-3.297391,-1.988893,-4.936978,7.881598,9.834037,3.021928,7.705221,6.467055,-2.043272,-8.949029,-7.424480,3.010440,-6.596201,-3.791484,-9.881679,4.244835,4.650467,-6.908122,8.294112,1.276149,3.498179,8.928776,0.511056,8.814051,9.274395,-2.749375,-9.287972,3.555217,-5.438744,8.364569,4.496457,2.581867,-6.088050,2.601594,6.277718,1.600194,7.656573,7.633677,5.979102,-3.696945,-3.494959,-8.199869,-9.132972,6.096640,0.695765,-7.242377,-3.055043,5.896221,3.384327,-6.589113,5.389164,2.758186,5.089247,5.577517,2.273389,1.148561,7.237974,-9.544848,-7.798818,-4.446582,-2.943929,-3.086582,-9.300671,-4.510135,-3.704432,-6.947472,-7.133526,2.494044,-9.508792,-0.001183,-0.766300,2.769494,-3.240206,-3.963056,-9.348039,-8.859548,0.081042,4.875865,2.015163,0.235542,-1.649173,1.647057,8.794582,-7.364964,-8.961001,7.589162,9.133539,-8.700667,3.575491,-8.764440,4.488945,-7.354490,7.564706,-4.388324,9.972962,7.921754,1.313261,-4.619487,3.121161,-1.406556,-2.812391,-1.209182,-7.004919,0.092660,9.236520,4.019400,-8.192284,8.145560,4.857443,-5.118330,9.768996,3.224269,7.792666,9.192688,-5.116585,-0.743247,-0.277979,-7.865096,5.118625,-0.286884,0.884679,5.338082,1.735790,-9.716675,-7.242099,-6.055324,-1.023606,-8.431505,8.818549,-7.230091,0.508250,-3.941436,9.252444,-7.115761,-1.294167,-5.442789,5.207879,-5.020678,-1.517924,3.982127,8.235014,3.888155,1.424024,9.745959,2.913145,3.377969,-3.783822,-5.248200,-2.985284,-3.202688,6.776970,7.742005,-8.841205,-2.178231,-0.094327,1.794519,6.837790,7.001215,-0.368180,3.512266,-4.042101,-3.217540,0.502880,-6.348864,-2.093761,-1.317102,6.163756,-7.784227,0.954813,2.830340,-6.752520,-9.533014,4.329305,9.733313,-1.254412,2.684359,9.668881,-3.951826,6.039177,-7.744205,9.544289,4.993208,-7.387398,8.336910,-9.991947,9.619549,1.951471,-0.177938,1.914564,4.176859,8.806164,-4.712846,-6.192863,2.924584,-8.713181,4.486666,-2.513367,-3.648772,-8.173284,8.572545,-5.577688,-8.642363,-3.446316,-9.599511,-2.824629,3.103555,6.735891,-2.469700,-1.157320,3.455190,6.052592,3.101081,9.692203,9.168194,2.095887,9.641386,5.001766,0.026191,-7.546356,-8.566985,2.459866,-9.214098,0.125396,8.044141,-2.771323,-7.609904,0.378283,-9.182844,-7.556585,3.562189,-8.945021,8.935634,-0.880356,8.820193,1.149919,6.921732,9.705926,1.142088,-9.826175,8.945383,2.376346,-6.331464,8.681563,4.433617,-4.252673,4.480752,6.059520,9.768580,2.917277,9.811601,-0.353484,-5.430697,-6.386631,-1.845174,-7.108954,-3.761870,-1.294980,-8.129711,8.035835,3.503083,-4.127318,-7.451836,1.500521,7.784909,-6.086000,2.472008,7.185205,-7.979750,3.485980,-7.397809,-2.177372,0.976772,-8.240430,-3.105828,-6.246003,4.930870,-7.142609,-3.320352,9.866253,6.359656,-4.558113,-6.330211,-8.463973,-8.368097,-9.971557,5.868987,9.307553,6.301459,-7.575556,9.310264,4.491527,-4.718318,-0.263516,2.285890,-7.517728,2.141559,-5.770865,2.047749,-6.560917,-5.552225,-8.307780,-3.214992,9.244172,9.966527,0.637749,-8.045225,-6.788870,5.551790,0.625996,-8.234910,3.073125,1.137879,-5.304810,-3.871105,-3.894537,7.026078,-3.474414,-0.801777,9.972840,6.593865,-5.659087,8.892354,-9.211650,4.625589,2.024116,-2.254614,6.812535,-1.173100,-3.125205,-5.037010,-4.795093,9.572019,8.433698,-7.797000,-1.143863,-2.887552,0.032591,9.528238,-7.736922,8.484145,-2.572164,-1.615437,9.762823,5.395403,0.379467,-9.258940,2.615245,-2.705522,2.511567,3.102368,-0.912990,-2.045832,9.512354,-6.944613,-4.927478,-3.980370,7.871617,-3.736235,6.607242,-5.692619,-0.707164,-2.162127,-1.545155,-5.864556,0.287982,2.453136,0.966011,4.464638,8.375818,-0.443805,-9.091823,3.566432,9.293460,-9.466124,4.805730,9.028516,-0.271062,-9.122347,-8.193023,-0.609406,-6.363663,-9.602197,-7.717424,0.737378,3.933314,0.943354,-6.489362,1.058155,2.275115,-6.242697,-0.346288,-0.583370,-4.278407,0.950755,5.708715,-3.181677,-3.126077,-6.259645,2.925679,-2.943906,9.588503,-4.130774,-9.640622,-7.799414,6.685371,4.780261,-8.810897,-2.791374,-4.133639,-7.737186,-7.672565,8.405284,3.847548,8.209600,2.946557,7.318549,4.847739,-4.619771,0.951075,1.708390,-7.700523,-0.228183,-4.332123,6.610923,-8.484553,9.626919,-8.969549,9.203326,-2.354204,-3.755320,4.159275,-2.133770,3.117943,-1.503947,9.614244,-1.311981,-5.338651,8.453894,5.503102,1.218451,-6.541879,-3.412919,-3.071280,-9.986226,-1.578925,-2.073592,-3.940868,6.333528,-5.857371,-2.883849,6.860376,5.755075,7.893274,2.155516,9.702699,-9.809346,3.149821,-9.470387,1.425648,-8.738953,-9.073699,7.755489,5.678426,-3.507692,-6.783717,-1.330295,0.132436,-1.663534,-1.111027,-5.372716,-6.846637,8.401000,7.933229,7.364166,-9.356896,7.799752,2.470032,3.811226,8.906721,-4.373821,-6.583204,8.184844,-9.854329,-1.564968,4.592684,-6.584920,7.491542,3.671979,6.417398,0.977323,-1.469858,-8.557992,5.391656,2.080267,-1.958290], dtype = "float64")#candidate|5822|(560,)|const|float64
call_5821 = relay.TupleGetItem(func_2489_call(relay.reshape(const_5822.astype('float64'), [4, 10, 14])), 0)
call_5823 = relay.TupleGetItem(func_2491_call(relay.reshape(const_5822.astype('float64'), [4, 10, 14])), 0)
bop_5845 = relay.greater(call_5814.astype('bool'), relay.reshape(const_5815.astype('bool'), relay.shape_of(call_5814))) # shape=(15, 3, 3)
bop_5848 = relay.greater(call_5816.astype('bool'), relay.reshape(const_5815.astype('bool'), relay.shape_of(call_5816))) # shape=(15, 3, 3)
output = relay.Tuple([call_5812,call_5821,const_5822,bop_5845,])
output2 = relay.Tuple([call_5813,call_5823,const_5822,bop_5848,])
func_5853 = relay.Function([], output)
mod['func_5853'] = func_5853
mod = relay.transform.InferType()(mod)
mutated_mod['func_5853'] = func_5853
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5853_call = mutated_mod.get_global_var('func_5853')
call_5854 = func_5853_call()
output = call_5854
func_5855 = relay.Function([], output)
mutated_mod['func_5855'] = func_5855
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5728_call = mod.get_global_var('func_5728')
func_5730_call = mutated_mod.get_global_var('func_5730')
call_5856 = relay.TupleGetItem(func_5728_call(), 3)
call_5857 = relay.TupleGetItem(func_5730_call(), 3)
func_2085_call = mod.get_global_var('func_2085')
func_2090_call = mutated_mod.get_global_var('func_2090')
const_5869 = relay.const([0.389060,8.001719,6.509695,8.700665,5.966869,-2.990590,2.637235,-4.367021,5.788316,6.969581,7.265549,-5.559293,-3.373518,2.238962,1.302975,-1.659221,5.769759,-6.811280,-3.966977,0.960394,-6.568073,6.627923,-7.386565,2.436038,-4.715149,-0.280619,2.481815,-8.060488,-0.410370,7.838447,6.435027,-5.001491,-5.925136,-0.621560,-1.905352,-0.286726,7.398518,-5.613873,7.290263,1.460717,5.581594,0.890308,-9.760943,-8.424566,-8.491147,9.129300,8.279325,-8.949626,-1.773902,-0.530584,-1.676618,2.099555,4.003332,5.788202,0.893369,-6.822298,8.503941,6.502277,0.722065,-5.116020,-2.800707,-8.919268,1.923814,2.326371,7.145515,-6.496919,-4.893139,7.215166,9.208711,6.479729,-0.984225,3.360036,1.009796,4.495629,-6.909619,-8.316531,1.352769,9.925713,3.740449,6.019805,-1.205918,-2.355335,6.803081,-9.912921,5.466688,-8.715391,5.805795,7.670861,-3.639455,-7.891179,-0.648027,1.110205,1.337826,-3.009557,6.285082,2.272913,8.610692,6.279471,7.547481,3.981569,3.036101,-1.495630,-6.741731,6.577010,1.387983,3.143332,7.678602,2.585661,3.241428,2.585305,1.019702,6.991173,6.254869,-8.812392,-9.545108,4.822376,5.453544,5.428024,4.666373,-5.061544,-2.801787,-1.103874,8.994265,-3.206519,7.005467,2.984095,-7.219109,0.200506,0.973314,-0.439965,8.104781,1.227082,-4.105348,-7.021537,-1.037288,-3.680823,9.018818,-7.680971,-1.166855,7.765443,-5.010389,3.168054,2.917888,-5.017026,-7.053984,7.065503,-3.414090,-1.186108,5.959039,-9.348637,3.041283,-5.812802,2.087708,9.260530,6.091623,6.016393,-5.949011,-2.812911,7.608642,-8.800264,2.255070,-5.386039,9.760256,-5.551987,7.252305,-4.431956,3.805637,4.629602,1.081573,6.464100,-1.865047,-3.812096,3.832651,-0.180474,-8.636052,-7.993991,-2.331387,2.251416,6.918078,-0.412854,8.719743,6.942809,7.683488,8.814590,-1.353041,4.557664,-7.517290,7.872391,-9.827226,-1.599612,-4.689679,1.452469,0.614246,-3.790300,-6.227133,-5.770701,5.293648,9.111604,-4.929844,1.584799,4.239056,8.863930,7.530626,9.608390,5.791602,-5.291878,-7.269865,-8.715345,-2.621635,-6.930550,-0.818035,-7.777327,-9.345887,-5.836166,2.137390,5.761763,2.562957,-4.884185,6.184540,-3.147158,6.059633,6.209665,-9.878878,-4.497638,-9.890771,-6.083579,1.491953,5.014177,-2.752446,-8.375934,4.212663,-2.259701,2.943149,4.968390,-5.145926,2.092584,-4.570555,7.184839,-6.098499,-6.748327,-3.096070,1.378628,8.370128,2.042553,6.483134,0.100354,-9.258549,9.634289,-7.902474,-6.675725,-5.786517,5.926861,-9.900014,-6.183860,-9.747021,-5.049054,2.046458,-8.582225,-3.267324,-6.808710,2.270598,-1.846002,9.886122,7.978400,5.865124,-4.154970,3.160918,-3.471535,-2.415362,9.401287,4.161267,1.028591,9.108079,-6.263183,5.450109,8.320482,-9.049438,-9.520932,4.829397,-5.664197,-5.731604,6.028468,-3.657243,0.081553,-7.820084,1.343190,-7.135589,-5.649835,-0.011826,7.576596,3.642421,-0.727686,3.541356,2.018810,2.609243,7.748660,-6.411003,7.227729,-7.790747,8.214830,4.974240,7.074430,3.998660,-1.542510,-4.793225,5.973887,-1.208945,4.104042,1.027219,3.946045,-0.085145,-9.621487,1.268323,2.466942,-9.986809,-9.163338,8.921605,-0.109182,3.346019,-3.532120,-3.215869,0.154459,-3.745804,-7.547332,7.625488,-0.792951,-5.657601,-9.902935,-2.839080,-5.094985,-7.829374,8.634891,-4.707675,-9.194975,-3.077822,9.351481,-4.988339,9.697110,1.935926,-4.314794,8.866346,9.426481,6.037995,6.695136,7.091759,3.735208,-7.876038,-6.802663,-7.330958,-4.276816,3.950219,1.587775,-7.646363,-4.812807,2.077641,-8.996156,0.865054,-6.177789,1.272779,5.833931,5.121296,-3.454653,4.567208,-0.130097,4.203315,-5.320303,-4.042291,9.544631,-3.339491,5.072691,-0.030949,3.226564,0.031643,0.607032,9.020112,4.478539,3.177683,7.011433,-0.484340,-8.396739,-9.444069,9.933237,-8.864268,-4.832143,-6.337583,-6.327335,5.402695,2.381797,-5.648470,-1.742962,3.399860,-1.253082,9.146873,1.802486,-9.187565,-2.215812,-4.580432,6.357650,-3.499673,6.384133,5.730666,6.092287,5.122856,5.328770,3.710823,-3.907429,-1.859027,0.595161,-6.811714,1.354938,-4.292880,0.045011,6.154077,-5.600819,-8.288117,0.391797,7.987107,0.701161,2.060987,-6.269910,-5.553654,7.359256,-8.304497,-2.987212,7.462328,4.128393,9.825212,-6.963222,7.405177,-7.779348,-9.926124,-7.569817,4.094084,1.301472,-1.800968,3.183829,-1.234398,4.920806,-9.776814,5.875631,-8.831823,5.043760,0.752400,-2.261847,-7.953106,3.607833,-8.755171,8.958218,8.663173,-9.891013,-7.264590,-0.224957,-8.905685,3.833517,8.251490,-6.332697,1.131430,-1.726356,3.350121,-0.191137,2.965347,5.211165,8.627004,7.578461,3.398561,-5.108919,-4.406356,-0.602757,6.291074,2.128859,-3.185054,-0.324247,5.736072,-8.833779,0.034083,8.861809,-7.955785,5.984224,6.665905,-6.028440,-0.200177,-5.917043,9.236500,-5.777293,4.040017,-7.002167,5.008188,8.174611,0.019614,-8.647627,-5.991770,8.707492,-5.050980,-6.813524,-2.607149,-6.769337,-8.793565,3.468413,5.721249,-9.751361,5.716691,-2.436390,6.775778,0.170229,8.645608,4.617332,1.840859,7.159019,5.431347,8.418777,-4.785148,2.922945,0.389022,7.065380,-0.427620,4.362671,-4.296404,-2.232970,0.684428,-6.301958,4.438164,6.096398,-7.380089,-5.514971,-5.019427,3.248623,8.752169,2.644679,5.738002,2.313279,-4.507167,3.134547,-8.409901,-0.009728,-4.157614,5.631063,3.633026,-8.149656,1.751484,6.613498,9.194670,-5.894575,4.926509,6.480692,-2.604443,-1.000907,3.820084,7.428338,-2.253849,6.141742,-0.525511,-0.268193,4.313756,-1.020703,-6.444332,2.685355,-8.589963,-2.820155,4.344099,8.970179,3.110434,4.038439,2.384602,-4.796230,-0.070189,-5.431633,-2.794507,-5.385823,-9.654299,-8.980496,4.313379,-7.124156,-4.755155,8.028806,-2.400808,9.596946,1.291929,-8.890301,-5.223856,-0.941120,-1.276966,5.823235,0.936448,4.842488,-4.668619,-2.166275,1.294215,-8.429926,-0.976106,0.978676,-4.842205,-9.666475,3.820146,-8.581387,2.205282,5.690611,-0.054610,9.808843,-4.893314,5.828325,-1.880109,-0.219030,-5.672636,7.148549,9.429266,4.636830,-1.854949,1.046100,-7.894157,8.277755,-8.449230,9.339926,6.067860,-7.912845,0.492312,4.828091,-5.598042,9.375793,-8.396996,2.869361,-7.708560,4.640591,-3.034557,-6.239823,-3.706279,-6.404720,-8.711549,4.681906,-6.599838,-4.046301,4.235420,-1.190145,3.313711,-5.251775,-5.802469,9.362820,-9.253833,5.967541,1.220640,8.285201,6.621300,-8.701811,-4.104457,-8.292884,-1.831119,-0.042682,-4.046102,1.124668,2.043729,4.627488,8.260876,-5.093715,3.812690,-2.941282,4.024704,-7.648672,0.906568,8.843682,9.543389,6.199621,-0.968621,9.885561,-6.319890,-5.764799,0.184491,9.586824,0.730556,-4.087031,-0.010390,1.806671,1.075990,-3.911629,3.966604,-4.273429,7.353218,-0.637959,8.431919,-6.747407,-6.184649,0.982760,-1.166430,-7.546904,-0.384420,-4.175410,3.191489,9.099832,-9.008780,1.412746,6.143420,-5.091862,3.772898,-7.503964,-4.550345,-2.201991,9.413901,-1.718178,8.950534,5.112816,-4.584283,-4.278528,-3.702020,-4.327977,5.573322,-3.540160,8.347996,-3.048840,2.724028,8.899114,0.796966,-3.976523,-9.296378,3.691725,3.419906,6.661265,-3.589500,6.217672,8.703038,4.447721,0.115035,6.146465,-3.560062,-3.834601,-5.218100,-0.483782,3.318296,4.166493,5.136736,1.459595,9.413715,-6.204353,-0.283266,-2.869146,7.249634,7.305466,5.845153,9.917559,-3.198060,2.011175,-0.090589,-3.116877,-6.569936,3.008752,-3.775179,-1.382552,6.347084,-1.063840,-0.945242,-4.910211,-4.260452,9.850448,-4.957243,-7.214310,-3.839321,-7.806403,5.256258,-0.917012,-9.686422,1.507685,3.199339,-1.369230,3.308456,-9.865702,-6.781006,8.091478,-2.145638,-9.403437,-5.503136,9.567345,2.576688,9.456555,2.878581,-3.316171,3.170778,-2.729830,-0.913307,8.624898,9.502330,5.272773,-1.157840,2.848918,9.183100,-2.530287,-2.176751,-9.925938,6.934233,-8.811615,-5.102057,-4.135893,-5.291519,-9.382309,7.541941,-7.199889,7.961752,-5.055965,9.530022,1.766761,-3.288511,-9.926265,3.490389,-8.083472,-3.661352,2.931238,7.483154,-2.171535,5.092236,-4.531756,-1.549430,3.548248,4.014239,-7.463929,6.620878,1.660822,9.350746,-4.909209,8.196353,7.289470,4.429478,-9.518146,-4.622540,2.168734,3.912863,-0.307781,-1.531304,0.374451,-2.436311,-1.901143,0.097341,0.068096,8.091074,-3.262922,-4.121161,-8.226790,-0.261541,-2.681531,5.775698,-7.727015,-9.602812,4.092853,2.220451,-3.972413,-9.816547,4.963680,-7.268520,-2.349288,4.011747,-4.250258,-8.476025,1.045973,5.404650,1.333832,8.285142,0.596119,-5.570501,6.841131,-4.170032,0.875947,-4.243690,-6.421514,8.167065,6.748786,1.343694,-7.265254,-7.217325,6.698122,-3.808739,3.571967,-3.773355,6.516069,5.320514,-2.459621,-9.412772,-9.642560,6.881945,0.040362,5.178614,8.607444,5.735533,-8.632105,0.566519,8.367999,-6.272646,-7.207070,-3.448247,7.599608,-6.273002,1.133129,-3.778318,5.921080,-1.606938,-7.582283,2.479428,2.571354,-0.049126,6.204191,2.338594,1.565791,9.282335,-9.797986,3.476165,3.268786,-6.051440,-0.057502,-6.598995,-4.601948,-6.510555,-8.580481,-2.476768,-9.708654,1.323296,-0.893662,9.516175,-1.850097,4.578440,-8.126734,-8.922889,-9.258409,-3.476317,7.707883,3.388712,6.468413,9.121067,6.459631,3.326254,-8.236852,1.602484,5.979131,-3.795649,1.626359,0.836058,-6.213056,5.801432,-2.674817,4.195394,-7.920523,4.709462,-1.296546,3.439553,-8.272346,-1.816493,4.531204,0.965901,-5.214097,-1.404413,-4.547562,9.212563,-1.224425,7.565323,-9.889744,-5.575157,4.089152,-9.484274,-3.332994,-9.904874,0.159425,3.398898,-2.078782,9.693477,-5.137229,9.067166,5.286196,9.055297,7.122221,-4.494035,8.917260,4.623279,-6.572229,6.068078,3.966045], dtype = "float64")#candidate|5869|(968,)|const|float64
var_5870 = relay.var("var_5870", dtype = "uint16", shape = (10, 1))#candidate|5870|(10, 1)|var|uint16
const_5871 = relay.const([3,4,-8,2,7,-9,-10,-7,-10,-1,10,-1,-7,-9,3,9,-5,-5,-1,-5,4,-5,6,-7,10,-9,1,-5,-10,-1,6,6,3,6,-10,-2,-7,-1,9,-1,8,-9,-8,7,-1,-1,-6,-8,-10,-3,-7,7,2,-9,7,-9,-10,4,-5,7,7,2,-7,-4,-7,7,4,10,-1,-8,-10,3,-7,9,-6,-9,6,-10,-2,-10,-3,-4,1,6,2,-10,3,2,8,4,-10,1,-2,1,-5,-6,-7,7,4,-10], dtype = "uint16")#candidate|5871|(100,)|const|uint16
call_5868 = relay.TupleGetItem(func_2085_call(relay.reshape(const_5869.astype('float64'), [11, 11, 8]), relay.reshape(const_5869.astype('float64'), [11, 11, 8]), relay.reshape(var_5870.astype('uint16'), [10,]), relay.reshape(const_5871.astype('uint16'), [100,]), ), 0)
call_5872 = relay.TupleGetItem(func_2090_call(relay.reshape(const_5869.astype('float64'), [11, 11, 8]), relay.reshape(const_5869.astype('float64'), [11, 11, 8]), relay.reshape(var_5870.astype('uint16'), [10,]), relay.reshape(const_5871.astype('uint16'), [100,]), ), 0)
func_4925_call = mod.get_global_var('func_4925')
func_4929_call = mutated_mod.get_global_var('func_4929')
const_5875 = relay.const([[9],[6],[-8],[-9],[6],[-9],[2],[3],[-6],[1],[3],[7],[-8],[1],[-6],[-1],[-5],[-5],[7],[1],[9],[6],[-9],[-9],[5],[-2],[9],[-10],[-4],[4],[-6],[-6],[-4],[-5],[6],[4],[7],[7],[8],[1],[-9],[4],[4],[7],[-5],[-7],[8],[1],[6],[-4],[-1],[10],[-8],[-3],[2],[-2],[9],[-10],[-9],[1],[8],[6],[-3],[9],[-2],[-4],[1],[2],[10],[8],[1],[4],[7],[3],[1],[-2],[1],[-6],[-5],[-4],[5],[-10],[1],[-8],[7],[-4],[7],[10],[-9],[1],[-6],[8],[1],[4],[8],[2],[7],[2],[4],[-10],[5],[1],[9],[7],[6],[-10],[3],[2],[2],[1],[-3],[3],[-5],[-9],[-2],[-1],[-10],[-10],[-6],[8],[5],[4],[6],[3],[1],[5],[-4],[-5],[3],[7],[-2],[4],[-1],[-2],[-1],[8],[-8],[5],[10],[9],[-1],[5],[-7],[8],[6],[-7],[4],[-2],[-6],[-5],[-3],[-5],[7],[5],[10],[-7],[10],[-10],[-4],[-7],[4],[1],[-5],[-4],[-5],[10],[-1],[-1],[4],[6],[-1],[7],[-6],[-10],[-5],[-5],[3],[6],[6],[1],[-10],[3],[5],[-10],[1],[-5],[10],[4],[8],[10],[-1],[2],[-8],[-1],[8],[-10],[-2],[-10],[7],[6],[-7],[-10],[2],[4],[-8],[-3],[7],[2],[-4],[2],[7],[-2],[2],[-4],[3],[9],[-10],[6],[-3],[-3],[-3],[3],[-4],[5],[-9],[1],[8],[-3],[-5],[-9],[8],[10],[-9],[1],[7],[4],[-10],[1],[-1],[1],[-5],[6],[-6],[-2],[-7],[-1],[3],[2],[-6],[-3],[-6],[-4],[-5],[10],[3],[-7],[-4],[2],[3],[2],[6],[-4],[3],[-10],[-10],[-3],[-1],[5],[-3],[-1],[-8],[5],[-3],[-3],[10],[6],[-7],[7],[-8],[-8],[-10],[-7],[9],[5],[6],[-8],[-6],[6],[9],[-6],[5],[9],[4],[-1],[-2],[3],[9],[3],[1],[-9],[3],[1],[10],[9],[-9],[2],[-8],[-5],[6],[-7],[6],[-10],[-1],[2],[-10],[8],[8],[-5],[9],[2],[10],[1],[5],[-2],[-3],[-9],[10],[-3],[-4],[-10],[-7],[10],[-10],[-8],[10],[4],[-1],[1],[2],[-7],[2],[-3],[9],[3],[10],[-10],[6],[4],[6],[2],[9],[-7],[2],[8],[-9],[8],[-3],[8],[-6],[7],[-6],[4],[-8],[7],[-2],[9],[6],[4],[2],[-3],[-9],[6],[3],[-7],[-5],[-4],[-1],[5],[9],[-3],[-3],[-2],[6],[7],[10],[-1],[-5],[2],[-3],[7],[-3],[-10],[-1],[6],[-9],[1],[-1],[10],[-1],[-7],[1],[1],[-7],[1],[1],[-7],[-1],[1],[-6],[-4],[-5],[-6],[9],[4],[-7],[4],[-9],[1],[7],[-7],[2],[-5],[2],[4],[2],[-10],[2],[3],[-6],[-5],[8],[-10],[-2],[4],[-4],[2],[-4],[8],[-4],[2],[2],[-4],[2],[8],[-4],[10],[10],[-10],[2],[6],[4],[2],[4],[4],[4],[-5],[-9],[-1],[-6],[-8],[1],[4],[-9],[-6],[10],[-5],[-9],[-4],[8],[-2],[-5],[-7],[3],[5],[4],[-2],[1],[-6],[4],[-1],[3],[1],[-4],[-6],[5],[5],[2],[2],[9],[-7],[-1],[9],[6],[-2],[7],[-5],[1],[4],[-10],[-10],[-6],[-5],[-4],[-6],[-4],[-7],[1],[-7],[-9],[-7],[4],[1],[-9],[3],[-5],[6],[-7],[-2],[8],[3],[10],[-7],[5],[-9],[-4],[-3],[10],[6],[-10],[9],[-3],[9],[-6],[10],[-10],[7],[4],[-2],[-7],[3],[9],[2],[1],[1],[10],[-9],[6],[2],[10],[5],[-6],[1],[-6],[8],[5],[-7],[-7],[-4],[-10],[10],[-4],[4],[8],[2],[-9],[-9],[1],[4],[4],[-5],[3],[-1],[-2],[1],[-1],[-1],[-1],[-7],[-2],[-6],[-9],[-5],[-6],[10],[-2],[6],[6],[6],[-6],[1],[7],[4],[-8],[6],[9],[-8],[-10],[1],[-3],[-5],[-5],[-10],[10],[-10],[-4],[-4],[4],[10],[9],[9],[-1],[-6],[-1],[6],[-7],[10],[-2],[4],[10],[-8],[6],[7],[10],[-9],[7],[-6],[-8],[-9],[1],[-4],[-8],[2],[-7],[-2],[2],[-1],[-4],[6],[6],[-10],[5],[1],[-8],[2],[-10],[8],[1],[8],[6],[-4],[1],[-5],[-2],[8],[8],[2],[4],[5],[-8],[1],[-5],[5],[-1],[-3],[4],[5],[3],[-2],[-3],[-4],[8],[2],[-1],[-6],[-6],[-6],[8],[-9],[6],[-7],[-9],[8],[2],[-6],[10],[-6],[8],[-10],[7],[-10],[5],[-5],[9],[3],[6],[-6],[10],[-9],[-3],[9],[-7],[-2],[3],[3],[-10],[-6],[-9],[7],[7],[-3],[-7],[1],[4],[2],[-5],[1],[-8],[-6],[-6],[2],[2],[-10],[-10],[-8],[8],[1],[-4],[-5],[-2],[-6],[-9],[-10],[9],[-9],[-5],[-3],[-10],[-7],[-2],[9],[-8],[-7],[7],[-3],[-2],[8],[5],[8],[4],[-10],[-10],[-3],[6],[3],[4],[-1],[-6],[-9],[2],[-2],[8],[-6],[5],[-8],[3],[7],[1],[-4],[-9],[8],[-10],[-8],[-7],[9],[-8],[4],[10],[10],[5],[-6],[3],[4],[3],[-2],[6],[8],[7],[4],[4],[3],[-4],[-7],[-8],[2],[2],[-2],[9],[-1],[-5],[-5],[-1],[8],[-8],[1],[-6],[3],[3],[6],[6],[5],[-4],[-4],[-4],[-5],[8],[-7],[-2],[6],[-7],[-3],[1],[-5],[-5],[-6],[-1],[-8],[-7],[-7],[-7],[-9],[4],[-3],[-10],[10],[4],[-2],[-9],[-3],[-10],[-3],[9],[5],[6],[-8],[-6],[-8],[-2],[-1],[-8],[2],[2],[10],[1],[-6],[-2],[1],[2],[9],[9],[1],[-6],[-8],[-9],[-3],[-9],[2],[-8],[-5],[-6],[1],[1],[1],[-9],[-3],[10],[4],[4],[6],[-4],[-2],[-5],[6],[-7],[-4],[3],[-2],[9],[-8],[-6],[7],[-7],[-3],[6],[4],[-10],[2],[-1],[1],[-1],[-4],[2],[9],[-9],[-2],[-9],[10],[3],[-5],[-3],[-10],[7],[8],[-2],[7],[-6],[10],[-9],[1],[-7],[3],[-5],[2],[-8],[-8],[7],[-6],[10],[4],[5],[-7],[-4],[-10],[7],[1],[6],[2],[10],[-9],[4],[-1],[-5],[-7],[5],[7],[3],[-2],[3],[10],[-3],[6],[6],[9],[3],[-4],[7],[-7],[-4],[-7],[6],[-10],[10],[-5],[-4],[-4],[5],[-4],[-7],[7],[-5],[6],[6],[-4],[10],[9],[7],[-2],[-1],[-1],[2],[-2],[5],[-10],[-1],[6],[-7],[7],[8],[4],[-3],[1],[-4],[7],[3],[-2],[3],[-4],[10],[-5],[-10],[-8],[-3],[-10],[6],[-8],[-1],[-9],[5],[-4],[-1],[-3],[-10],[5],[2],[2],[10],[9],[-5],[-4],[-7],[2],[-3],[-4],[-4],[-5],[5],[-1],[7],[-7],[-7],[1],[9],[1],[-2],[-8],[9],[-8],[-8],[1],[1],[9],[5],[10],[-8],[-1],[6],[-4],[-1],[-2],[2],[-4],[8],[3],[4],[-10],[-1],[-10],[-8],[8],[-7],[-3],[-10],[-9],[-4],[6],[1],[-6],[9],[6],[5],[-8],[-4],[-3],[-1],[10],[-10],[3],[10],[5],[-5],[9],[-10],[-6],[6],[4],[-8],[6],[-3],[6],[-9],[-5],[9],[-3],[2],[-4],[-8],[4],[10],[8],[-3],[-7],[-7],[5],[-1],[-7],[7],[-1],[10],[7],[9],[-10],[8],[6],[-5],[4],[-9],[1],[4],[-7],[6],[5],[-5],[-10],[-10],[6],[10],[-8],[-1],[6],[1],[6],[-1],[-7],[10],[7],[-9],[9],[-1],[-7],[-6],[2],[-1],[6],[-7],[8],[2],[-7],[10],[5],[-9],[5],[-7],[9],[5],[-8],[-1],[9],[-1],[3],[-7],[7],[6],[2],[7],[5],[-10],[-3],[7],[4],[10],[-3],[2],[-4],[-8],[2],[-10],[5],[-2],[-2],[-2],[6],[-7],[10],[9],[-8],[-6],[1],[-4],[1],[-3],[-7],[2],[1],[-7],[-5],[-9],[-5],[-8],[-2],[7],[-7],[2],[10],[-6],[-6],[-4],[4],[-5],[9],[7],[2],[-3],[-2],[-2],[-7],[4],[-3],[-3],[-2],[2],[9],[-3],[1],[7],[9],[-2],[-8],[10],[3],[4],[-10],[-5],[7],[-3],[-8],[-7],[2],[-10],[-7],[1],[-1],[-8],[7],[8],[-7],[-1],[3],[9],[-5],[-8],[-9],[9],[-6],[-2],[-6],[-10],[-5],[5],[-4],[1],[7],[10],[9],[1],[2],[-6],[6],[-2],[-8],[7],[9],[-2],[-4],[6],[2],[-1],[1],[-1],[9],[-4],[-1],[1],[10],[2],[-10],[-2],[4],[1],[1],[-6],[-7],[3],[8],[-10],[-6],[-7],[-7],[-8],[4],[2],[7],[-10],[6],[-1],[-1],[9],[3],[9],[6],[8],[4],[-2],[-6],[5],[-10],[-3],[-1],[-10],[-6],[-5],[7],[8],[5],[-3],[5],[-6],[-9],[-9],[1],[-4],[-2],[-8],[1],[1],[6],[-8],[-9],[-4],[2],[-9],[9],[7],[6],[-2],[1],[-7],[-6],[-10],[-2],[6],[-7],[2],[-1],[-2],[6],[-1],[7],[-2],[5],[9],[3],[-10],[1],[-7],[1],[3],[-8],[-5],[3],[-1],[9],[3],[-9],[8],[-2],[-9],[-2],[-5],[-1],[8],[-6],[1],[9],[-4],[-3],[3],[-6],[-9],[-3],[8],[-3],[2],[7],[10],[10],[9],[2],[1],[-6],[-6],[-9],[-5],[5],[-9],[-1],[6],[5],[1],[5],[-8],[-3],[2],[-9],[-7],[-7],[7],[1],[-2],[-4],[-5],[-9],[8],[10],[6],[5],[10],[-2],[-3],[5],[-7],[-2],[8],[-4],[10],[-3],[-2],[-7],[-6],[4],[-2],[-5],[4],[5],[8],[7],[2],[-8],[5],[-3],[2],[9],[10],[-6],[10],[-8],[8],[-5],[3],[-2],[-1],[6],[2],[-6],[-6],[9],[4],[-1],[3],[1],[-1],[6],[-4],[-4],[2],[-6],[8],[-6],[6],[5],[-8],[-1],[2],[9],[1],[-9],[-10],[-2],[7],[-1],[-3],[-1],[1],[-1],[-9],[10],[-3],[-4],[-2],[2],[-2],[8],[9],[8],[7],[6],[6],[-4],[7],[3],[-4],[-3],[-5],[3],[9],[-5],[-8],[5],[-4],[-5],[2],[-4],[9],[7],[-3],[-1],[-5],[-3],[-3],[-10],[-4],[3],[7],[-1],[-3],[-3],[-6],[-5],[-4],[2],[-5],[4],[7],[-2],[4],[3],[4],[-1],[-8],[-1],[1],[-7],[-2],[-3],[-5],[4],[7],[-1],[5],[-7],[3],[8]], dtype = "int8")#candidate|5875|(1560, 1)|const|int8
call_5874 = relay.TupleGetItem(func_4925_call(relay.reshape(const_5875.astype('int8'), [13, 12, 10]), relay.reshape(const_5875.astype('int8'), [13, 12, 10]), relay.reshape(const_5871.astype('uint16'), [100,]), ), 1)
call_5876 = relay.TupleGetItem(func_4929_call(relay.reshape(const_5875.astype('int8'), [13, 12, 10]), relay.reshape(const_5875.astype('int8'), [13, 12, 10]), relay.reshape(const_5871.astype('uint16'), [100,]), ), 1)
uop_5888 = relay.sin(const_5869.astype('float64')) # shape=(968,)
func_5538_call = mod.get_global_var('func_5538')
func_5539_call = mutated_mod.get_global_var('func_5539')
call_5891 = relay.TupleGetItem(func_5538_call(), 0)
call_5892 = relay.TupleGetItem(func_5539_call(), 0)
bop_5894 = relay.logical_or(var_5870.astype('bool'), const_5869.astype('bool')) # shape=(10, 968)
output = relay.Tuple([call_5856,call_5868,const_5871,call_5874,const_5875,uop_5888,call_5891,bop_5894,])
output2 = relay.Tuple([call_5857,call_5872,const_5871,call_5876,const_5875,uop_5888,call_5892,bop_5894,])
func_5905 = relay.Function([var_5870,], output)
mod['func_5905'] = func_5905
mod = relay.transform.InferType()(mod)
mutated_mod['func_5905'] = func_5905
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5906 = relay.var("var_5906", dtype = "uint16", shape = (10, 1))#candidate|5906|(10, 1)|var|uint16
func_5905_call = mutated_mod.get_global_var('func_5905')
call_5907 = func_5905_call(var_5906)
output = call_5907
func_5908 = relay.Function([var_5906], output)
mutated_mod['func_5908'] = func_5908
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5538_call = mod.get_global_var('func_5538')
func_5539_call = mutated_mod.get_global_var('func_5539')
call_5955 = relay.TupleGetItem(func_5538_call(), 0)
call_5956 = relay.TupleGetItem(func_5539_call(), 0)
output = relay.Tuple([call_5955,])
output2 = relay.Tuple([call_5956,])
func_5957 = relay.Function([], output)
mod['func_5957'] = func_5957
mod = relay.transform.InferType()(mod)
output = func_5957()
func_5958 = relay.Function([], output)
mutated_mod['func_5958'] = func_5958
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5195_call = mod.get_global_var('func_5195')
func_5196_call = mutated_mod.get_global_var('func_5196')
call_6031 = relay.TupleGetItem(func_5195_call(), 0)
call_6032 = relay.TupleGetItem(func_5196_call(), 0)
output = relay.Tuple([call_6031,])
output2 = relay.Tuple([call_6032,])
func_6045 = relay.Function([], output)
mod['func_6045'] = func_6045
mod = relay.transform.InferType()(mod)
output = func_6045()
func_6046 = relay.Function([], output)
mutated_mod['func_6046'] = func_6046
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6083 = relay.var("var_6083", dtype = "bool", shape = (4, 8, 13))#candidate|6083|(4, 8, 13)|var|bool
const_6084 = relay.const([[[True,True,False,True,True,False,False,True,False,True,True,False,False],[False,True,False,True,False,False,False,True,True,True,True,True,False],[False,False,False,False,False,True,True,False,False,False,True,False,False],[True,True,True,True,False,False,False,False,True,True,False,True,False],[True,False,True,False,False,True,True,False,True,True,True,True,False],[True,True,True,True,True,False,True,True,False,True,True,False,True],[False,True,True,False,False,False,False,True,False,True,True,True,True],[False,True,True,True,True,False,True,False,False,False,False,True,True]],[[False,False,False,True,True,True,False,False,True,False,False,True,False],[False,False,True,False,False,True,True,True,True,False,True,False,False],[True,False,False,False,False,True,False,False,False,True,True,False,True],[False,True,True,False,True,False,False,False,False,False,True,True,True],[False,True,True,False,True,False,True,True,True,True,False,True,True],[False,True,True,True,False,True,False,False,True,True,False,False,True],[False,False,False,True,False,True,False,True,True,True,True,False,False],[False,True,True,False,True,True,True,False,False,True,True,False,True]],[[True,True,True,True,False,True,True,True,False,True,False,False,False],[True,True,False,False,False,False,True,True,False,False,False,True,False],[True,True,False,True,False,True,True,False,False,True,True,True,False],[False,True,False,False,True,False,False,True,False,False,False,True,True],[False,False,True,False,False,False,True,False,False,True,True,True,True],[True,False,True,True,True,True,False,True,True,True,True,True,True],[True,True,True,True,False,True,True,False,True,True,False,False,False],[False,False,True,True,True,True,False,False,False,True,True,False,False]],[[True,True,False,False,False,True,False,True,False,False,True,True,False],[False,True,True,True,True,True,True,False,True,False,True,True,True],[True,False,False,True,False,True,True,False,False,True,False,False,True],[False,False,False,False,True,False,True,False,True,False,True,False,False],[False,True,False,True,False,True,True,False,True,False,False,False,False],[False,True,False,False,False,True,False,False,True,True,True,False,True],[False,False,True,True,False,True,False,False,True,False,False,False,False],[True,False,False,True,True,False,False,True,False,True,False,True,True]]], dtype = "bool")#candidate|6084|(4, 8, 13)|const|bool
bop_6085 = relay.logical_or(var_6083.astype('bool'), relay.reshape(const_6084.astype('bool'), relay.shape_of(var_6083))) # shape=(4, 8, 13)
output = bop_6085
output2 = bop_6085
func_6103 = relay.Function([var_6083,], output)
mod['func_6103'] = func_6103
mod = relay.transform.InferType()(mod)
var_6104 = relay.var("var_6104", dtype = "bool", shape = (4, 8, 13))#candidate|6104|(4, 8, 13)|var|bool
output = func_6103(var_6104)
func_6105 = relay.Function([var_6104], output)
mutated_mod['func_6105'] = func_6105
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5434_call = mod.get_global_var('func_5434')
func_5436_call = mutated_mod.get_global_var('func_5436')
call_6109 = func_5434_call()
call_6110 = func_5434_call()
func_5957_call = mod.get_global_var('func_5957')
func_5958_call = mutated_mod.get_global_var('func_5958')
call_6122 = relay.TupleGetItem(func_5957_call(), 0)
call_6123 = relay.TupleGetItem(func_5958_call(), 0)
func_3780_call = mod.get_global_var('func_3780')
func_3784_call = mutated_mod.get_global_var('func_3784')
var_6127 = relay.var("var_6127", dtype = "int8", shape = (468,))#candidate|6127|(468,)|var|int8
call_6126 = func_3780_call(relay.reshape(var_6127.astype('int8'), [9, 4, 13]), relay.reshape(var_6127.astype('int8'), [9, 4, 13]), )
call_6128 = func_3780_call(relay.reshape(var_6127.astype('int8'), [9, 4, 13]), relay.reshape(var_6127.astype('int8'), [9, 4, 13]), )
output = relay.Tuple([call_6109,call_6122,call_6126,var_6127,])
output2 = relay.Tuple([call_6110,call_6123,call_6128,var_6127,])
func_6133 = relay.Function([var_6127,], output)
mod['func_6133'] = func_6133
mod = relay.transform.InferType()(mod)
var_6134 = relay.var("var_6134", dtype = "int8", shape = (468,))#candidate|6134|(468,)|var|int8
output = func_6133(var_6134)
func_6135 = relay.Function([var_6134], output)
mutated_mod['func_6135'] = func_6135
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4545_call = mod.get_global_var('func_4545')
func_4546_call = mutated_mod.get_global_var('func_4546')
call_6152 = relay.TupleGetItem(func_4545_call(), 0)
call_6153 = relay.TupleGetItem(func_4546_call(), 0)
var_6196 = relay.var("var_6196", dtype = "float64", shape = (11, 12, 12))#candidate|6196|(11, 12, 12)|var|float64
bop_6197 = relay.add(call_6152.astype('uint32'), relay.reshape(var_6196.astype('uint32'), relay.shape_of(call_6152))) # shape=(11, 12, 12)
bop_6200 = relay.add(call_6153.astype('uint32'), relay.reshape(var_6196.astype('uint32'), relay.shape_of(call_6153))) # shape=(11, 12, 12)
func_5728_call = mod.get_global_var('func_5728')
func_5730_call = mutated_mod.get_global_var('func_5730')
call_6201 = relay.TupleGetItem(func_5728_call(), 1)
call_6202 = relay.TupleGetItem(func_5730_call(), 1)
func_4629_call = mod.get_global_var('func_4629')
func_4634_call = mutated_mod.get_global_var('func_4634')
var_6215 = relay.var("var_6215", dtype = "float32", shape = (216,))#candidate|6215|(216,)|var|float32
var_6216 = relay.var("var_6216", dtype = "float32", shape = (1344,))#candidate|6216|(1344,)|var|float32
const_6217 = relay.const([[-5,-4,-4,-5,2,-6,-6,3,-8,-8,-10,-1,2,4,9,10,7,-10,6,-5],[-7,1,-1,7,3,-10,-6,4,4,-8,9,10,-1,9,4,-6,-9,4,3,-1],[7,-1,-2,-1,-2,1,8,-9,10,6,4,-6,-1,4,2,-10,7,-1,6,-7],[-2,2,-10,9,-9,-7,-9,5,-3,-3,4,-3,-5,-2,-8,-1,-9,-10,-4,-2],[-6,-7,2,-4,-2,-10,-10,-9,-9,8,-2,-8,2,2,1,-10,-5,-3,-8,3]], dtype = "uint16")#candidate|6217|(5, 20)|const|uint16
call_6214 = relay.TupleGetItem(func_4629_call(relay.reshape(var_6215.astype('float32'), [8, 3, 9]), relay.reshape(var_6216.astype('float32'), [1344,]), relay.reshape(const_6217.astype('uint16'), [100,]), relay.reshape(var_6215.astype('float32'), [8, 3, 9]), ), 8)
call_6218 = relay.TupleGetItem(func_4634_call(relay.reshape(var_6215.astype('float32'), [8, 3, 9]), relay.reshape(var_6216.astype('float32'), [1344,]), relay.reshape(const_6217.astype('uint16'), [100,]), relay.reshape(var_6215.astype('float32'), [8, 3, 9]), ), 8)
uop_6222 = relay.asin(call_6201.astype('float32')) # shape=(2, 4, 4)
uop_6224 = relay.asin(call_6202.astype('float32')) # shape=(2, 4, 4)
output = relay.Tuple([bop_6197,call_6214,var_6215,var_6216,const_6217,uop_6222,])
output2 = relay.Tuple([bop_6200,call_6218,var_6215,var_6216,const_6217,uop_6224,])
func_6227 = relay.Function([var_6196,var_6215,var_6216,], output)
mod['func_6227'] = func_6227
mod = relay.transform.InferType()(mod)
mutated_mod['func_6227'] = func_6227
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6227_call = mutated_mod.get_global_var('func_6227')
var_6229 = relay.var("var_6229", dtype = "float64", shape = (11, 12, 12))#candidate|6229|(11, 12, 12)|var|float64
var_6230 = relay.var("var_6230", dtype = "float32", shape = (216,))#candidate|6230|(216,)|var|float32
var_6231 = relay.var("var_6231", dtype = "float32", shape = (1344,))#candidate|6231|(1344,)|var|float32
call_6228 = func_6227_call(var_6229,var_6230,var_6231,)
output = call_6228
func_6232 = relay.Function([var_6229,var_6230,var_6231,], output)
mutated_mod['func_6232'] = func_6232
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4856_call = mod.get_global_var('func_4856')
func_4858_call = mutated_mod.get_global_var('func_4858')
call_6271 = relay.TupleGetItem(func_4856_call(), 1)
call_6272 = relay.TupleGetItem(func_4858_call(), 1)
output = relay.Tuple([call_6271,])
output2 = relay.Tuple([call_6272,])
func_6289 = relay.Function([], output)
mod['func_6289'] = func_6289
mod = relay.transform.InferType()(mod)
output = func_6289()
func_6290 = relay.Function([], output)
mutated_mod['func_6290'] = func_6290
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5957_call = mod.get_global_var('func_5957')
func_5958_call = mutated_mod.get_global_var('func_5958')
call_6308 = relay.TupleGetItem(func_5957_call(), 0)
call_6309 = relay.TupleGetItem(func_5958_call(), 0)
output = call_6308
output2 = call_6309
func_6320 = relay.Function([], output)
mod['func_6320'] = func_6320
mod = relay.transform.InferType()(mod)
mutated_mod['func_6320'] = func_6320
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6320_call = mutated_mod.get_global_var('func_6320')
call_6321 = func_6320_call()
output = call_6321
func_6322 = relay.Function([], output)
mutated_mod['func_6322'] = func_6322
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5957_call = mod.get_global_var('func_5957')
func_5958_call = mutated_mod.get_global_var('func_5958')
call_6400 = relay.TupleGetItem(func_5957_call(), 0)
call_6401 = relay.TupleGetItem(func_5958_call(), 0)
func_5853_call = mod.get_global_var('func_5853')
func_5855_call = mutated_mod.get_global_var('func_5855')
call_6402 = relay.TupleGetItem(func_5853_call(), 2)
call_6403 = relay.TupleGetItem(func_5855_call(), 2)
func_4980_call = mod.get_global_var('func_4980')
func_4982_call = mutated_mod.get_global_var('func_4982')
call_6404 = relay.TupleGetItem(func_4980_call(), 1)
call_6405 = relay.TupleGetItem(func_4982_call(), 1)
func_2085_call = mod.get_global_var('func_2085')
func_2090_call = mutated_mod.get_global_var('func_2090')
var_6407 = relay.var("var_6407", dtype = "float64", shape = (968,))#candidate|6407|(968,)|var|float64
var_6408 = relay.var("var_6408", dtype = "uint16", shape = (5, 2))#candidate|6408|(5, 2)|var|uint16
const_6409 = relay.const([9,-7,-9,2,1,1,1,-9,-9,-7,7,-4,-7,-9,3,5,5,-2,-8,8,-8,9,-1,8,-1,3,-2,8,-6,-8,-10,-9,-8,-9,-7,6,-8,-5,-3,8,-9,-3,-8,10,-1,-2,-3,6,-4,-8,2,8,-8,8,7,7,-9,-7,-3,-2,7,-5,-7,-4,4,3,7,-5,-4,8,2,-7,6,-9,-3,3,-7,2,9,-4,-9,10,-8,-5,-9,4,-8,2,5,5,4,-7,8,2,7,-2,-3,-6,-9,-3], dtype = "uint16")#candidate|6409|(100,)|const|uint16
call_6406 = relay.TupleGetItem(func_2085_call(relay.reshape(var_6407.astype('float64'), [11, 11, 8]), relay.reshape(var_6407.astype('float64'), [11, 11, 8]), relay.reshape(var_6408.astype('uint16'), [10,]), relay.reshape(const_6409.astype('uint16'), [100,]), ), 2)
call_6410 = relay.TupleGetItem(func_2090_call(relay.reshape(var_6407.astype('float64'), [11, 11, 8]), relay.reshape(var_6407.astype('float64'), [11, 11, 8]), relay.reshape(var_6408.astype('uint16'), [10,]), relay.reshape(const_6409.astype('uint16'), [100,]), ), 2)
func_790_call = mod.get_global_var('func_790')
func_793_call = mutated_mod.get_global_var('func_793')
call_6413 = func_790_call(relay.reshape(call_6404.astype('float64'), [15, 3, 3]))
call_6414 = func_790_call(relay.reshape(call_6404.astype('float64'), [15, 3, 3]))
func_1184_call = mod.get_global_var('func_1184')
func_1188_call = mutated_mod.get_global_var('func_1188')
const_6421 = relay.const([-2,10,-10,4,-3,-8,-4,2,-9,-5,2,8,8,-9,7,-6,-8,2,9,2,2,4,4,7,-4,10,4,-9,7,3,-8,2,5,6,2,7,-9,10,-7,-7,-1,5,5,10,-2,6,1,-5,-4,2,8,9,-8,-1,4,-6,-4,-2,2,1,-4,5,-6,4,1,5,-5,9,1,-10,9,-4,4,-4,-8,4,3,-9,-10,-1,7,2,-10,7,2,-10,5,6,10,8,4,-1,-1,-7,1,2,6,4,-7,-1,10,2,5,-5,-7,-4,6,1,6,-6,8,7,-2,-1,-3,9,-2,-9,8,-2,8,9,1,-1,8,6], dtype = "int32")#candidate|6421|(126,)|const|int32
call_6420 = relay.TupleGetItem(func_1184_call(relay.reshape(const_6421.astype('int32'), [3, 7, 6]), relay.reshape(const_6421.astype('int32'), [3, 7, 6]), ), 0)
call_6422 = relay.TupleGetItem(func_1188_call(relay.reshape(const_6421.astype('int32'), [3, 7, 6]), relay.reshape(const_6421.astype('int32'), [3, 7, 6]), ), 0)
output = relay.Tuple([call_6400,call_6402,call_6404,call_6406,var_6407,var_6408,const_6409,call_6413,call_6420,const_6421,])
output2 = relay.Tuple([call_6401,call_6403,call_6405,call_6410,var_6407,var_6408,const_6409,call_6414,call_6422,const_6421,])
func_6431 = relay.Function([var_6407,var_6408,], output)
mod['func_6431'] = func_6431
mod = relay.transform.InferType()(mod)
var_6432 = relay.var("var_6432", dtype = "float64", shape = (968,))#candidate|6432|(968,)|var|float64
var_6433 = relay.var("var_6433", dtype = "uint16", shape = (5, 2))#candidate|6433|(5, 2)|var|uint16
output = func_6431(var_6432,var_6433,)
func_6434 = relay.Function([var_6432,var_6433,], output)
mutated_mod['func_6434'] = func_6434
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6441 = relay.var("var_6441", dtype = "int32", shape = (5, 12, 16))#candidate|6441|(5, 12, 16)|var|int32
var_6442 = relay.var("var_6442", dtype = "int32", shape = (5, 12, 16))#candidate|6442|(5, 12, 16)|var|int32
bop_6443 = relay.less_equal(var_6441.astype('bool'), relay.reshape(var_6442.astype('bool'), relay.shape_of(var_6441))) # shape=(5, 12, 16)
output = bop_6443
output2 = bop_6443
func_6446 = relay.Function([var_6441,var_6442,], output)
mod['func_6446'] = func_6446
mod = relay.transform.InferType()(mod)
mutated_mod['func_6446'] = func_6446
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6446_call = mutated_mod.get_global_var('func_6446')
var_6448 = relay.var("var_6448", dtype = "int32", shape = (5, 12, 16))#candidate|6448|(5, 12, 16)|var|int32
var_6449 = relay.var("var_6449", dtype = "int32", shape = (5, 12, 16))#candidate|6449|(5, 12, 16)|var|int32
call_6447 = func_6446_call(var_6448,var_6449,)
output = call_6447
func_6450 = relay.Function([var_6448,var_6449,], output)
mutated_mod['func_6450'] = func_6450
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6045_call = mod.get_global_var('func_6045')
func_6046_call = mutated_mod.get_global_var('func_6046')
call_6498 = relay.TupleGetItem(func_6045_call(), 0)
call_6499 = relay.TupleGetItem(func_6046_call(), 0)
func_6103_call = mod.get_global_var('func_6103')
func_6105_call = mutated_mod.get_global_var('func_6105')
var_6523 = relay.var("var_6523", dtype = "bool", shape = (416,))#candidate|6523|(416,)|var|bool
call_6522 = func_6103_call(relay.reshape(var_6523.astype('bool'), [4, 8, 13]))
call_6524 = func_6103_call(relay.reshape(var_6523.astype('bool'), [4, 8, 13]))
output = relay.Tuple([call_6498,call_6522,var_6523,])
output2 = relay.Tuple([call_6499,call_6524,var_6523,])
func_6528 = relay.Function([var_6523,], output)
mod['func_6528'] = func_6528
mod = relay.transform.InferType()(mod)
var_6529 = relay.var("var_6529", dtype = "bool", shape = (416,))#candidate|6529|(416,)|var|bool
output = func_6528(var_6529)
func_6530 = relay.Function([var_6529], output)
mutated_mod['func_6530'] = func_6530
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6045_call = mod.get_global_var('func_6045')
func_6046_call = mutated_mod.get_global_var('func_6046')
call_6562 = relay.TupleGetItem(func_6045_call(), 0)
call_6563 = relay.TupleGetItem(func_6046_call(), 0)
output = relay.Tuple([call_6562,])
output2 = relay.Tuple([call_6563,])
func_6573 = relay.Function([], output)
mod['func_6573'] = func_6573
mod = relay.transform.InferType()(mod)
mutated_mod['func_6573'] = func_6573
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6573_call = mutated_mod.get_global_var('func_6573')
call_6574 = func_6573_call()
output = call_6574
func_6575 = relay.Function([], output)
mutated_mod['func_6575'] = func_6575
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4769_call = mod.get_global_var('func_4769')
func_4770_call = mutated_mod.get_global_var('func_4770')
call_6604 = relay.TupleGetItem(func_4769_call(), 0)
call_6605 = relay.TupleGetItem(func_4770_call(), 0)
func_6045_call = mod.get_global_var('func_6045')
func_6046_call = mutated_mod.get_global_var('func_6046')
call_6640 = relay.TupleGetItem(func_6045_call(), 0)
call_6641 = relay.TupleGetItem(func_6046_call(), 0)
uop_6647 = relay.sinh(call_6640.astype('float64')) # shape=(11, 12, 12)
uop_6649 = relay.sinh(call_6641.astype('float64')) # shape=(11, 12, 12)
output = relay.Tuple([call_6604,uop_6647,])
output2 = relay.Tuple([call_6605,uop_6649,])
func_6652 = relay.Function([], output)
mod['func_6652'] = func_6652
mod = relay.transform.InferType()(mod)
output = func_6652()
func_6653 = relay.Function([], output)
mutated_mod['func_6653'] = func_6653
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6674 = relay.var("var_6674", dtype = "bool", shape = (12, 12, 14))#candidate|6674|(12, 12, 14)|var|bool
var_6675 = relay.var("var_6675", dtype = "bool", shape = (12, 12, 14))#candidate|6675|(12, 12, 14)|var|bool
bop_6676 = relay.logical_or(var_6674.astype('bool'), relay.reshape(var_6675.astype('bool'), relay.shape_of(var_6674))) # shape=(12, 12, 14)
output = relay.Tuple([bop_6676,])
output2 = relay.Tuple([bop_6676,])
func_6679 = relay.Function([var_6674,var_6675,], output)
mod['func_6679'] = func_6679
mod = relay.transform.InferType()(mod)
var_6680 = relay.var("var_6680", dtype = "bool", shape = (12, 12, 14))#candidate|6680|(12, 12, 14)|var|bool
var_6681 = relay.var("var_6681", dtype = "bool", shape = (12, 12, 14))#candidate|6681|(12, 12, 14)|var|bool
output = func_6679(var_6680,var_6681,)
func_6682 = relay.Function([var_6680,var_6681,], output)
mutated_mod['func_6682'] = func_6682
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6320_call = mod.get_global_var('func_6320')
func_6322_call = mutated_mod.get_global_var('func_6322')
call_6724 = func_6320_call()
call_6725 = func_6320_call()
output = relay.Tuple([call_6724,])
output2 = relay.Tuple([call_6725,])
func_6729 = relay.Function([], output)
mod['func_6729'] = func_6729
mod = relay.transform.InferType()(mod)
mutated_mod['func_6729'] = func_6729
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6729_call = mutated_mod.get_global_var('func_6729')
call_6730 = func_6729_call()
output = call_6730
func_6731 = relay.Function([], output)
mutated_mod['func_6731'] = func_6731
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6320_call = mod.get_global_var('func_6320')
func_6322_call = mutated_mod.get_global_var('func_6322')
call_6818 = func_6320_call()
call_6819 = func_6320_call()
func_5183_call = mod.get_global_var('func_5183')
func_5185_call = mutated_mod.get_global_var('func_5185')
var_6821 = relay.var("var_6821", dtype = "float64", shape = (300,))#candidate|6821|(300,)|var|float64
call_6820 = func_5183_call(relay.reshape(var_6821.astype('float64'), [15, 4, 5]))
call_6822 = func_5183_call(relay.reshape(var_6821.astype('float64'), [15, 4, 5]))
output = relay.Tuple([call_6818,call_6820,var_6821,])
output2 = relay.Tuple([call_6819,call_6822,var_6821,])
func_6834 = relay.Function([var_6821,], output)
mod['func_6834'] = func_6834
mod = relay.transform.InferType()(mod)
var_6835 = relay.var("var_6835", dtype = "float64", shape = (300,))#candidate|6835|(300,)|var|float64
output = func_6834(var_6835)
func_6836 = relay.Function([var_6835], output)
mutated_mod['func_6836'] = func_6836
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4980_call = mod.get_global_var('func_4980')
func_4982_call = mutated_mod.get_global_var('func_4982')
call_6840 = relay.TupleGetItem(func_4980_call(), 0)
call_6841 = relay.TupleGetItem(func_4982_call(), 0)
output = relay.Tuple([call_6840,])
output2 = relay.Tuple([call_6841,])
func_6846 = relay.Function([], output)
mod['func_6846'] = func_6846
mod = relay.transform.InferType()(mod)
output = func_6846()
func_6847 = relay.Function([], output)
mutated_mod['func_6847'] = func_6847
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6729_call = mod.get_global_var('func_6729')
func_6731_call = mutated_mod.get_global_var('func_6731')
call_6863 = relay.TupleGetItem(func_6729_call(), 0)
call_6864 = relay.TupleGetItem(func_6731_call(), 0)
output = relay.Tuple([call_6863,])
output2 = relay.Tuple([call_6864,])
func_6920 = relay.Function([], output)
mod['func_6920'] = func_6920
mod = relay.transform.InferType()(mod)
output = func_6920()
func_6921 = relay.Function([], output)
mutated_mod['func_6921'] = func_6921
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5509_call = mod.get_global_var('func_5509')
func_5511_call = mutated_mod.get_global_var('func_5511')
call_6979 = func_5509_call()
call_6980 = func_5509_call()
output = call_6979
output2 = call_6980
func_6981 = relay.Function([], output)
mod['func_6981'] = func_6981
mod = relay.transform.InferType()(mod)
output = func_6981()
func_6982 = relay.Function([], output)
mutated_mod['func_6982'] = func_6982
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4856_call = mod.get_global_var('func_4856')
func_4858_call = mutated_mod.get_global_var('func_4858')
call_7080 = relay.TupleGetItem(func_4856_call(), 0)
call_7081 = relay.TupleGetItem(func_4858_call(), 0)
func_6289_call = mod.get_global_var('func_6289')
func_6290_call = mutated_mod.get_global_var('func_6290')
call_7086 = relay.TupleGetItem(func_6289_call(), 0)
call_7087 = relay.TupleGetItem(func_6290_call(), 0)
func_6446_call = mod.get_global_var('func_6446')
func_6450_call = mutated_mod.get_global_var('func_6450')
const_7103 = relay.const([-9,-9,9,4,7,6,2,3,9,9,-2,2,-4,4,10,-2,-2,-2,4,10,9,-7,3,-5,5,-8,5,-3,-8,-4,-10,-7,-1,3,6,5,3,-6,-4,-1,-5,8,-1,-8,-7,5,-1,10,-1,5,8,3,-4,8,-8,-6,9,10,4,9,2,-9,-6,5,9,7,2,9,-6,5,-7,4,5,-8,-6,10,-10,-3,5,-4,-9,-4,-10,8,-1,10,4,-5,-10,7,7,5,4,4,5,-4,10,5,2,-5,-4,10,-9,-6,8,-6,-9,-4,9,10,7,-8,3,-8,7,-5,-8,-9,-2,7,-8,-6,-8,-10,8,2,-6,-6,-4,-4,-8,1,6,5,7,-7,-9,-4,3,3,-5,-9,-5,-2,9,-9,-6,5,2,-1,5,6,1,10,-5,7,8,-1,-3,2,-10,1,1,2,-7,4,3,4,3,7,-7,-6,-2,-7,-3,-7,10,-10,3,6,-7,1,-4,3,1,3,-6,-4,-7,3,10,2,-7,10,-6,-1,-7,-10,-1,6,3,-9,-10,7,-4,7,10,3,-4,1,-7,1,-7,7,-6,-10,-4,-7,-4,2,-7,-3,10,6,6,2,-10,-1,7,-4,1,-1,-5,-9,-3,6,-2,6,-2,6,10,5,-2,-6,4,-2,-4,-2,-1,7,-4,3,1,-7,-4,2,10,3,-4,3,-10,5,-5,-2,-9,-10,1,8,7,-4,-6,-6,-6,8,-9,-1,5,-5,-2,9,-6,-4,-4,-9,-6,5,-3,-10,-1,2,1,-1,9,9,2,3,-6,-9,7,-3,-2,7,-9,-6,-7,-2,-2,-5,8,-2,-1,-2,-10,-7,-8,-4,-1,8,9,-2,-4,5,7,7,-5,8,4,2,1,-4,4,-1,-8,6,-5,-4,-1,7,2,-5,-4,4,5,3,9,-6,3,7,8,-9,-10,-4,-5,-10,6,5,-10,-8,-6,2,-8,8,8,5,9,-1,-10,-9,-5,-1,6,-8,4,1,7,-5,4,8,-9,7,10,4,-2,-4,-5,7,10,8,-1,6,-2,7,-4,-7,-2,8,4,-2,8,3,-1,-5,-6,-7,-1,9,3,9,-2,10,-3,-4,2,-5,-3,4,-9,-7,1,3,8,-5,-9,10,-3,3,-9,-4,6,1,-10,-3,5,5,5,-6,-2,-6,7,10,6,-7,2,-8,-3,-8,-6,-1,1,7,-3,-3,-5,-4,4,-10,9,5,-1,2,2,6,-10,-8,-2,-1,7,-2,2,3,-1,-4,4,-6,4,8,7,-3,2,2,-8,1,-6,8,-10,-1,7,5,-9,-6,-8,-7,8,-4,5,4,-10,9,-9,-1,1,2,-1,9,8,3,2,1,-3,-10,-2,10,-1,-7,7,1,-3,-7,-10,6,-4,1,8,5,8,10,2,-3,10,-3,-9,-6,-7,-9,-9,-2,2,8,7,3,-1,-7,-4,5,-2,2,5,6,-3,9,-7,-5,-4,3,8,-9,1,-9,-8,-9,-5,4,1,9,4,-5,9,-4,-5,-6,-4,-2,-1,-10,-5,1,-3,9,-6,7,-8,-5,-4,-10,5,-2,1,6,4,10,8,-1,-8,-5,1,-4,-4,-6,7,9,-1,3,-6,-5,6,2,-9,-4,-7,9,9,-5,-2,3,-6,-1,3,3,4,2,5,5,10,9,6,-3,3,10,-10,5,5,-7,10,10,7,-6,-7,-6,-8,-2,5,9,-5,5,4,-3,6,9,-9,-1,-2,-9,-10,6,10,-2,3,-4,2,4,-9,-5,5,10,7,-10,-10,8,4,8,9,-10,3,1,-3,-3,1,5,4,-2,9,-9,-3,-9,-10,10,6,4,-3,-7,1,1,10,10,3,4,-5,3,10,2,8,3,-3,-5,3,5,4,8,3,-7,-1,10,-3,-4,4,7,10,-6,-5,1,5,-4,3,-2,-9,3,-9,7,-4,9,7,-10,3,9,-8,-8,8,3,-3,6,-3,5,1,-8,-1,5,-2,-6,-10,3,-7,1,4,-7,-9,2,-1,8,8,-9,4,8,8,10,-3,7,5,-7,2,-9,-4,-6,7,9,1,-4,-9,-10,-8,-6,-3,-1,1,-9,-10,7,-9,-1,7,10,7,5,-8,-4,5,-7,2,-9,8,7,6,3,7,2,5,3,5,9,-3,10,-2,-6,-7,-9,-5,-2,-10,-6,3,10,1,-10,-3,2,2,6,8,-10,9,1,-8,2,-10,-5,-8,10,10,6,1,-1,-9,-10,-9,6,-2,1,-10,5,5,2,7,-3,-4,-10,8,-9,-10,-7,-9,-6,-8,10,2,-7,-7,10,-2,1,-5,-2,-4,-1,-2,-3,1,-4,8,8,-9,-7,-5,10,-2,-5,4,10,-10,2,1,-3,-7,-3,10,7,8,8,2,3,1,-1,-7,4,-3,-7,4,-7,6,-7,1,8,1,5,3,9,5,-8,-2,10,-9,-10,-9,-5,6,3,-8,-7,6,4,1,3,5,8,6,-3,-7,7,9,-2,3,-2,-8,-2,2,-4,-1,-9,-8,4,-7,10,-9,1,-10,2,-10,-6,3,3,-6,-8], dtype = "int32")#candidate|7103|(960,)|const|int32
call_7102 = func_6446_call(relay.reshape(const_7103.astype('int32'), [5, 12, 16]), relay.reshape(const_7103.astype('int32'), [5, 12, 16]), )
call_7104 = func_6446_call(relay.reshape(const_7103.astype('int32'), [5, 12, 16]), relay.reshape(const_7103.astype('int32'), [5, 12, 16]), )
func_6573_call = mod.get_global_var('func_6573')
func_6575_call = mutated_mod.get_global_var('func_6575')
call_7117 = relay.TupleGetItem(func_6573_call(), 0)
call_7118 = relay.TupleGetItem(func_6575_call(), 0)
output = relay.Tuple([call_7080,call_7086,call_7102,const_7103,call_7117,])
output2 = relay.Tuple([call_7081,call_7087,call_7104,const_7103,call_7118,])
func_7123 = relay.Function([], output)
mod['func_7123'] = func_7123
mod = relay.transform.InferType()(mod)
mutated_mod['func_7123'] = func_7123
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7123_call = mutated_mod.get_global_var('func_7123')
call_7124 = func_7123_call()
output = call_7124
func_7125 = relay.Function([], output)
mutated_mod['func_7125'] = func_7125
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6289_call = mod.get_global_var('func_6289')
func_6290_call = mutated_mod.get_global_var('func_6290')
call_7134 = relay.TupleGetItem(func_6289_call(), 0)
call_7135 = relay.TupleGetItem(func_6290_call(), 0)
output = call_7134
output2 = call_7135
func_7141 = relay.Function([], output)
mod['func_7141'] = func_7141
mod = relay.transform.InferType()(mod)
mutated_mod['func_7141'] = func_7141
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7141_call = mutated_mod.get_global_var('func_7141')
call_7142 = func_7141_call()
output = call_7142
func_7143 = relay.Function([], output)
mutated_mod['func_7143'] = func_7143
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7169 = relay.var("var_7169", dtype = "int32", shape = (4, 11, 14))#candidate|7169|(4, 11, 14)|var|int32
const_7170 = relay.const([[[-10,-4,-6,6,6,-9,6,-9,-3,-10,7,-9,10,-5],[-4,-8,-9,-3,-7,-5,1,-1,-8,-3,-7,7,-9,-8],[-2,8,1,2,8,-6,-6,-9,-5,-4,-3,7,-10,-5],[-1,-9,-9,8,-5,-9,-8,10,-6,-5,-1,7,7,-5],[8,-7,-4,-1,5,2,-2,3,-8,7,3,-6,-10,8],[6,-4,3,1,-10,-2,-4,7,9,-7,2,-10,4,1],[8,-1,5,7,1,-7,2,7,8,-1,3,-2,10,2],[-8,7,-4,-10,-6,-9,7,-7,7,-5,8,-10,2,6],[5,-5,2,-9,-10,7,6,-2,-2,-1,3,-4,2,1],[-7,5,6,-5,3,7,2,1,10,10,4,-8,1,-7],[-7,6,-5,8,-4,2,-8,3,2,8,9,1,3,-10]],[[5,-7,8,-8,8,-6,10,10,-6,-8,6,10,5,-1],[-5,5,8,2,-7,9,-6,-8,3,-6,10,9,9,-3],[3,7,5,-5,3,-1,8,6,4,-2,-9,-8,-2,6],[8,-10,-3,8,8,-3,1,-1,-3,-4,-8,-6,7,-7],[2,-2,5,1,8,8,-3,9,4,-4,9,-3,-8,-6],[-6,-4,8,-1,8,1,-1,6,-1,-1,-6,-1,5,-2],[7,-8,10,-1,7,-1,4,-3,-2,-3,3,-7,9,2],[6,-8,1,-5,-5,-9,-10,9,4,-3,2,-9,-7,4],[8,1,1,8,3,-4,2,5,6,10,-8,4,8,-7],[-2,3,10,-4,1,-2,7,-7,9,-3,-5,-5,-7,-5],[4,9,4,8,6,-2,3,-5,1,-9,3,-5,8,-3]],[[9,-9,-9,-1,-2,6,10,-7,3,-3,-4,-5,8,-5],[-2,-1,-6,5,1,-8,-4,1,2,7,1,-10,-6,-4],[-6,3,9,8,6,-1,-9,10,-5,5,2,-7,-4,10],[3,-6,-2,5,-3,-7,6,8,10,9,2,7,10,6],[10,-5,9,1,2,-5,1,-6,1,-4,-3,-10,-9,-8],[10,4,-10,-4,2,-10,-3,9,-6,-3,-8,-10,2,-5],[-7,-1,-5,-9,-3,5,10,8,-2,-9,2,7,-9,-1],[9,3,9,4,-6,-2,-8,4,4,-1,-9,-5,2,-2],[-3,3,1,1,-7,-5,-10,4,3,5,-10,-2,-7,-1],[-2,-2,-8,-8,-1,10,-4,3,-1,3,6,1,-4,-8],[-1,2,4,8,-10,-4,7,-9,10,-6,-10,4,7,-4]],[[8,6,1,-5,-3,-8,1,-2,-5,-1,4,5,-6,-1],[-6,-8,7,6,-9,4,3,-4,3,5,6,2,-3,3],[-5,6,9,6,5,3,-10,-7,8,-9,7,8,8,-3],[-6,2,-3,5,-10,8,-2,9,-8,6,8,-9,-7,-8],[9,-8,10,-8,-8,-4,5,-6,-5,-10,-3,-8,-2,-6],[6,-6,9,-9,3,3,2,2,1,6,-4,8,-5,-8],[5,-7,-2,-3,-6,10,-2,3,-10,3,4,5,8,-5],[10,-9,9,-4,-9,-10,1,-4,-10,-7,3,-2,-9,-5],[10,1,3,-7,-6,-3,-9,-9,2,-3,2,7,-10,-2],[-5,8,-7,9,9,-2,8,1,10,-10,-5,9,1,-5],[-2,-9,-4,-6,6,-10,-1,9,10,7,-1,-4,-9,8]]], dtype = "int32")#candidate|7170|(4, 11, 14)|const|int32
bop_7171 = relay.add(var_7169.astype('int32'), relay.reshape(const_7170.astype('int32'), relay.shape_of(var_7169))) # shape=(4, 11, 14)
func_6431_call = mod.get_global_var('func_6431')
func_6434_call = mutated_mod.get_global_var('func_6434')
const_7175 = relay.const([5.701344,-7.017103,-0.060715,-1.661761,0.162415,1.312681,-0.915631,7.194374,-2.622181,2.093229,-1.629454,-8.638112,7.282021,8.790440,-7.885786,7.113795,0.037214,7.684831,-4.207651,5.679113,-8.147352,-6.114153,-4.333041,1.642344,7.747040,-7.106123,-7.706314,-4.110187,-7.969954,-5.547229,-2.257639,-4.597970,-7.794992,-1.729482,-0.044657,-6.347279,-9.453166,8.412616,-5.000506,-8.493261,0.235208,1.148536,2.293293,0.687882,9.443038,2.942534,7.667873,-6.462498,0.098354,-2.205080,-6.650003,-5.693973,-5.642590,4.971723,-8.529010,-6.196887,-9.559453,5.606363,8.345694,-3.544178,-2.908306,7.474437,9.859690,5.649120,-7.638619,-2.060458,4.320044,6.053773,7.278227,-2.779220,-0.528924,1.273674,8.538857,6.067304,-8.174861,4.111172,3.277770,-6.910653,-2.653648,7.088569,-8.621741,9.491326,-9.767631,2.152979,-0.780154,5.627491,-1.995880,0.662492,8.053515,-7.699659,-3.540516,-5.862476,-6.524572,7.435931,5.767280,0.416676,-0.916208,8.440804,-0.714797,-1.189957,-0.064613,2.779593,7.027780,-7.705452,4.861785,-7.254527,0.373490,9.903549,2.505826,-6.792664,5.440346,-4.476879,0.327075,-7.572505,-5.964426,-5.438112,-8.830201,3.733319,-7.782071,-7.033338,2.746211,-2.699276,-1.337065,-7.811132,-2.780426,-4.011447,3.851073,5.638068,-0.556150,-4.589647,6.527545,2.155793,-3.549449,5.326569,3.399138,2.935378,-2.636864,0.844036,8.122821,-4.374653,-5.394375,-6.182517,-8.055358,-0.690603,7.002728,1.730132,5.611128,2.222836,-9.135375,2.898893,-9.377897,-4.393290,-4.792585,4.242119,6.726741,0.254866,-6.999306,9.148495,3.749404,3.057196,-0.077703,3.228395,-6.814537,-4.507166,7.886234,-3.997852,-0.123715,-7.396572,-1.496922,-0.786703,-8.372907,4.631379,2.568964,7.426219,8.795473,-3.656415,1.203158,1.355967,-5.942978,-4.875136,1.500762,0.524088,9.574281,-0.491640,-7.003938,-4.668487,-3.229338,0.877572,-7.977437,0.650629,-7.811784,-4.651184,0.038027,6.298714,6.160776,-4.864748,-5.697212,-1.710339,9.480547,0.731650,1.494440,-4.775880,3.572223,-6.648534,-4.081355,7.291227,8.007888,1.000610,-4.987866,-4.962043,-1.590610,-7.869678,-4.158395,7.053061,-6.363851,7.889793,-7.883669,9.385779,-5.301401,9.816846,6.164006,8.982823,-3.461477,-2.543388,8.501169,-1.686176,6.489146,-9.062375,6.621471,6.242990,-7.568725,-2.581322,3.784402,-6.031735,7.423748,-3.724570,6.629943,1.930776,-8.847634,-1.030730,-6.815624,-7.167148,4.733528,9.260939,-0.539248,-1.049390,-2.029015,1.755620,8.595196,0.120118,6.128959,1.017792,1.690742,7.324643,-1.183949,1.893611,-8.537804,-7.740641,-4.987956,4.712157,9.626981,5.780717,-5.830337,4.548423,-3.031183,-0.874583,-8.045670,-9.513082,-7.972485,-7.264340,3.388221,5.159162,0.147919,-3.637084,2.338154,-7.828693,1.099687,-1.761053,-6.237728,0.525406,-8.438966,-4.981451,-5.872921,-3.958562,-7.099124,8.932918,-4.899601,-8.104814,5.354542,8.840497,-1.280348,1.381771,7.162949,7.098471,4.456925,6.061845,-6.341711,-5.168898,-0.965164,4.080843,3.867344,1.465729,3.840679,6.691791,-2.017883,1.834085,-9.443765,-4.274658,5.877583,9.622708,5.973275,-0.462281,2.230470,-6.594604,-6.031305,-6.306580,-6.013752,0.394044,5.023910,-2.954100,-8.504142,-2.311349,-1.260345,-4.167029,-9.252207,-3.322180,-3.204883,4.380239,-2.791239,-9.942827,6.139205,-0.722313,-7.035678,5.224415,2.535740,7.091299,-2.311433,-9.903203,-5.475840,-7.845807,2.726077,-8.882127,6.832972,5.721043,2.249564,-4.794657,-7.999503,9.511274,0.690186,9.477868,-8.472256,-4.852195,-1.970330,-9.939681,8.275286,-0.206080,5.921435,3.645123,-3.646599,-7.447490,-5.366267,9.179092,-5.190498,0.615740,8.477895,-8.189103,6.797668,-3.558802,6.563989,-8.530190,7.908559,1.400425,-9.053113,-0.810091,7.946094,-9.536673,4.820638,0.186938,-3.320748,1.670592,2.459840,-1.427126,-9.263488,-3.708145,0.475863,6.603442,4.723454,9.230625,4.980947,8.463762,8.858979,-5.339446,2.638294,-0.946595,-1.896005,3.510857,7.907066,-8.779895,3.178349,3.688380,5.386427,0.742897,-4.342235,-4.188510,-4.723527,-6.456880,-8.719776,7.382213,-8.815161,0.278928,2.445844,-7.030090,-0.455263,9.412496,-5.676582,-2.066943,8.778386,-3.065975,4.453664,1.483759,-4.094803,4.267722,-8.851554,-9.685504,-1.643474,5.618291,4.388303,-3.195831,-2.527735,5.389764,-9.971290,-9.623993,0.611342,5.564433,-2.382706,7.690515,8.973321,7.204868,4.213425,-2.025776,8.558653,6.415801,-0.310920,7.744416,5.930507,7.439449,-7.099105,2.512556,-6.181806,-6.920685,5.357900,-5.541782,-3.133034,-6.523353,6.866766,1.177991,-6.613912,1.107610,-5.902826,9.627419,1.248239,-5.987398,6.731190,-9.187811,-4.134304,-6.925841,-6.137940,-1.014521,-7.171531,-9.567698,-5.822476,-2.357549,-4.933224,3.747240,-7.082112,3.791564,2.896065,-5.206129,0.414670,-5.661131,1.595527,-8.644947,3.266899,9.617672,9.861795,-6.934684,7.416570,3.357168,-5.705063,2.347371,0.149987,8.539836,-2.735684,2.769584,-5.645115,0.714277,-4.384284,8.396705,7.198497,1.570195,-9.557271,-1.608648,6.941454,3.384252,-5.587079,-2.780501,4.767355,-6.709674,1.928002,-3.742304,0.589340,-3.870180,3.235819,-2.311221,-5.275419,0.267172,8.523749,-3.828841,3.913708,-2.492590,-9.467812,-6.979993,-0.588575,7.416341,-6.586517,6.361095,-1.043541,-7.210514,0.224597,-3.567872,-5.153950,-2.684706,8.942590,-3.406245,8.103070,-6.993732,-3.686150,2.031129,2.161901,-0.706668,-7.516713,1.188554,8.213697,-0.277370,-9.908815,-0.465187,1.326940,-9.128156,-1.115788,3.465064,-1.035574,1.338117,-9.571092,1.896379,-9.835053,-4.251107,-8.174258,7.029064,5.518526,-4.609005,-8.220431,-9.793953,-1.544741,-8.809723,-4.274742,-5.755920,2.044557,4.867427,-2.131545,3.692062,-8.532177,-0.457914,9.301199,3.518295,0.337754,4.442840,-0.518011,5.610284,-1.277368,0.377928,-2.961807,1.668572,-5.880060,2.813534,-1.223760,2.172427,-1.233793,9.934966,8.889332,-5.206483,-0.671435,-0.026663,-3.305193,7.338505,1.400215,0.474624,-3.152539,9.854061,5.184875,-8.336648,9.976467,-3.310748,5.828058,4.326336,-3.654621,6.390872,8.149503,-1.484325,-9.919489,8.224033,-2.425164,3.763532,8.150244,0.231835,6.650978,-9.897673,1.465520,5.851436,-3.567895,0.069170,-0.047443,-1.964339,-0.887276,8.996073,-4.995964,-5.551942,0.383147,-3.494100,-3.253195,3.117236,0.901394,-0.337900,5.743727,5.309947,6.061459,-0.612973,8.400761,1.852573,4.344908,-7.535928,8.136590,6.263174,-3.411956,-0.845060,4.996738,3.868553,8.078035,-3.522852,1.185976,8.793421,-9.958568,-1.423192,-5.269025,-3.278057,5.944454,7.483034,0.900193,0.667026,-4.448819,2.765973,-4.642382,-4.536533,-2.635373,-8.197347,-2.665736,-9.100119,2.057312,2.550985,0.374492,-3.572274,-9.107909,1.726906,-5.835032,-6.288646,-9.627797,-6.503208,-0.463147,5.264454,5.083671,-8.590637,0.016667,6.584633,0.054330,-0.069549,-5.130388,9.218302,-5.175263,-7.814351,-3.276999,-6.544642,-8.650327,9.851460,4.787160,-0.477869,-4.912503,0.655775,5.936213,-0.352793,2.491505,1.299772,2.688743,-7.977482,-7.872893,-4.819390,9.504792,2.866740,-3.799920,-7.575632,9.399376,-3.752911,7.680600,3.208140,-9.475293,-8.477761,-1.930588,8.870598,-8.555551,-0.343318,5.111436,6.113947,6.540517,-0.928049,2.758473,1.245683,2.825538,-3.649207,8.386148,-1.186204,-6.723164,2.271143,-1.107410,-7.153692,0.751812,8.363948,-1.048246,4.431607,-7.209547,8.992828,7.193009,-9.595613,-5.015452,0.682881,6.734048,-8.330933,-7.597296,-2.462374,-3.397639,-1.257190,3.240903,-4.852818,-5.007679,6.630457,-2.013875,9.363221,-2.287597,-7.631870,-0.275958,-5.182925,3.674458,6.050736,6.223375,2.266892,9.407694,4.905360,4.711657,-6.515717,2.277847,-5.149934,-8.203850,1.418935,-1.291006,6.038666,-5.638187,-7.844859,-7.869107,1.018575,0.013645,-1.348865,-5.907908,-5.985811,5.331991,-1.758871,-6.530249,-4.353577,-1.006934,3.874923,-6.935950,7.227176,8.846938,-3.423694,-4.595765,3.905061,-3.507916,-9.208797,6.505066,5.272136,4.787842,8.609210,-2.333826,-2.518834,-3.350376,4.457087,-7.532112,1.122564,-3.142269,-1.724635,3.240511,1.959438,9.961832,3.770857,-4.979603,0.136644,-3.830041,2.740412,8.723775,4.390172,-9.432683,-3.796378,7.865740,-6.276814,2.070983,-3.319401,-9.940302,8.070490,9.599425,-4.277078,6.285297,8.386477,-2.425912,-1.283581,-2.193869,3.601730,0.253379,-9.948657,1.505473,-9.686189,8.091919,-3.066000,-3.698166,8.869842,-3.685055,2.378054,8.333971,8.491465,-3.444558,5.472086,0.409476,9.442432,-2.455360,4.902125,-7.810261,4.248976,5.007642,1.307953,0.912025,7.051170,-0.382872,8.457908,-7.435702,6.270259,-2.726597,8.342606,-1.427009,-9.879340,-2.189898,-6.632265,-4.135206,-3.532619,3.154037,5.481116,-8.042126,-7.516169,-1.586336,2.227377,-5.042799,0.546293,7.081552,-4.169895,9.984251,6.488695,3.756240,-1.001971,0.106159,9.189138,-7.597650,9.636118,7.498324,6.062820,8.367470,-1.675795,6.130198,-4.775131,5.754971,-0.003226,-6.290571,-6.667621,-9.868640,0.958427,-8.771607,-2.070237,8.975543,7.669627,-0.779959,-0.030217,9.997543,0.181979,-8.504209,-1.519142,7.386067,-3.782799,-9.665274,3.977844,5.880200,-0.568061,9.348782,-6.889190,-0.675782,3.013528,-0.744130,-4.880639,3.411515,0.231397,5.691138,8.264202,-3.630195,-7.729282,-2.569282,7.474159,-1.009551,5.775050,4.214600,8.493264,-2.607163,-6.655215,-7.570099,-0.175911,-4.346303,-5.403840,0.049183,-3.469233,3.023867,-8.878227,-5.520206,-1.372705,1.344896,-8.125793,3.585681,-5.212499,1.153183,2.728318,5.757557,9.066692,8.244400,-2.607010,7.696678,-9.225411,0.047931,-8.464784,5.911274,9.274667,1.355673,0.468094,7.491627,-3.972461,-3.205019,-3.268063,0.778954,1.763605], dtype = "float64")#candidate|7175|(968,)|const|float64
const_7176 = relay.const([-7,-5,-1,6,-1,-9,6,-1,3,5], dtype = "uint16")#candidate|7176|(10,)|const|uint16
call_7174 = relay.TupleGetItem(func_6431_call(relay.reshape(const_7175.astype('float64'), [968,]), relay.reshape(const_7176.astype('uint16'), [5, 2]), ), 8)
call_7177 = relay.TupleGetItem(func_6434_call(relay.reshape(const_7175.astype('float64'), [968,]), relay.reshape(const_7176.astype('uint16'), [5, 2]), ), 8)
func_6834_call = mod.get_global_var('func_6834')
func_6836_call = mutated_mod.get_global_var('func_6836')
var_7189 = relay.var("var_7189", dtype = "float64", shape = (300,))#candidate|7189|(300,)|var|float64
call_7188 = relay.TupleGetItem(func_6834_call(relay.reshape(var_7189.astype('float64'), [300,])), 0)
call_7190 = relay.TupleGetItem(func_6836_call(relay.reshape(var_7189.astype('float64'), [300,])), 0)
var_7216 = relay.var("var_7216", dtype = "int32", shape = (3, 7, 6))#candidate|7216|(3, 7, 6)|var|int32
bop_7217 = relay.greater_equal(call_7174.astype('bool'), relay.reshape(var_7216.astype('bool'), relay.shape_of(call_7174))) # shape=(3, 7, 6)
bop_7220 = relay.greater_equal(call_7177.astype('bool'), relay.reshape(var_7216.astype('bool'), relay.shape_of(call_7177))) # shape=(3, 7, 6)
output = relay.Tuple([bop_7171,const_7175,const_7176,call_7188,var_7189,bop_7217,])
output2 = relay.Tuple([bop_7171,const_7175,const_7176,call_7190,var_7189,bop_7220,])
func_7225 = relay.Function([var_7169,var_7189,var_7216,], output)
mod['func_7225'] = func_7225
mod = relay.transform.InferType()(mod)
var_7226 = relay.var("var_7226", dtype = "int32", shape = (4, 11, 14))#candidate|7226|(4, 11, 14)|var|int32
var_7227 = relay.var("var_7227", dtype = "float64", shape = (300,))#candidate|7227|(300,)|var|float64
var_7228 = relay.var("var_7228", dtype = "int32", shape = (3, 7, 6))#candidate|7228|(3, 7, 6)|var|int32
output = func_7225(var_7226,var_7227,var_7228,)
func_7229 = relay.Function([var_7226,var_7227,var_7228,], output)
mutated_mod['func_7229'] = func_7229
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7123_call = mod.get_global_var('func_7123')
func_7125_call = mutated_mod.get_global_var('func_7125')
call_7304 = relay.TupleGetItem(func_7123_call(), 1)
call_7305 = relay.TupleGetItem(func_7125_call(), 1)
func_3476_call = mod.get_global_var('func_3476')
func_3479_call = mutated_mod.get_global_var('func_3479')
const_7313 = relay.const(8, dtype = "uint32")#candidate|7313|()|const|uint32
var_7314 = relay.var("var_7314", dtype = "uint32", shape = (264,))#candidate|7314|(264,)|var|uint32
call_7312 = relay.TupleGetItem(func_3476_call(relay.reshape(const_7313.astype('uint32'), []), relay.reshape(var_7314.astype('uint32'), [12, 2, 11]), ), 2)
call_7315 = relay.TupleGetItem(func_3479_call(relay.reshape(const_7313.astype('uint32'), []), relay.reshape(var_7314.astype('uint32'), [12, 2, 11]), ), 2)
output = relay.Tuple([call_7304,call_7312,const_7313,var_7314,])
output2 = relay.Tuple([call_7305,call_7315,const_7313,var_7314,])
func_7319 = relay.Function([var_7314,], output)
mod['func_7319'] = func_7319
mod = relay.transform.InferType()(mod)
var_7320 = relay.var("var_7320", dtype = "uint32", shape = (264,))#candidate|7320|(264,)|var|uint32
output = func_7319(var_7320)
func_7321 = relay.Function([var_7320], output)
mutated_mod['func_7321'] = func_7321
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7379 = relay.var("var_7379", dtype = "float64", shape = (15, 15, 7))#candidate|7379|(15, 15, 7)|var|float64
uop_7380 = relay.acos(var_7379.astype('float64')) # shape=(15, 15, 7)
func_3959_call = mod.get_global_var('func_3959')
func_3961_call = mutated_mod.get_global_var('func_3961')
var_7383 = relay.var("var_7383", dtype = "uint32", shape = ())#candidate|7383|()|var|uint32
call_7382 = relay.TupleGetItem(func_3959_call(relay.reshape(var_7383.astype('uint32'), [])), 1)
call_7384 = relay.TupleGetItem(func_3961_call(relay.reshape(var_7383.astype('uint32'), [])), 1)
uop_7397 = relay.log(uop_7380.astype('float32')) # shape=(15, 15, 7)
func_637_call = mod.get_global_var('func_637')
func_639_call = mutated_mod.get_global_var('func_639')
const_7401 = relay.const([4.651487,1.945330,-5.563367,-8.667609,9.966815,4.330637,-7.752170,8.070785,-4.193228,2.491340,-5.880578,-4.414873,-0.038881,7.312669,-2.847981,-1.819677,2.192211,4.511065,-1.798479,2.870041,1.069853,-4.572933,0.721001,-6.118169,-8.923882,3.328217,8.705329,7.972172,-2.612662,8.642293,9.481441,8.551203,4.431444,-7.218975,-5.926053,3.450826,-0.228588,4.655056,-4.156175,-4.916069,4.056174,2.139795,7.417681,-0.319999,-8.937664,-8.107516,2.195487,-9.627267,-2.356802,-2.048051,-2.342754,-2.216903,-1.841746,-1.404498,2.426562,8.935209,-0.770554,7.240117,6.565411,-1.594299,-3.966620,6.702986,-5.950036,-6.432929,2.850289,3.304370,2.813137,-8.089612,-9.971978,-6.101034,8.186248,-5.380456,-3.815859,6.277085,-0.802411,4.466641,-3.433854,-2.854525,-8.043717,2.208126,-4.735012,5.371480,3.268939,7.112071,0.620391,7.123661,5.077788,-4.633744,-2.746669,-8.123248,8.763306,5.254250,-6.172574,-4.096127,-8.246002,-7.698739,8.049939,-6.826264,-0.272611,-4.751355,4.544568,-2.654373,1.692856,2.944734,1.819272,-7.824446,4.710367,-3.345968,-4.986390,0.872751,2.345770,1.799459,4.227207,4.283584,8.432117,7.806646,2.216854,4.698395,5.776735,-2.921161,-4.889280,2.664865,-0.446797,-7.063585,4.016620,-8.383272,1.147560,5.702367,1.736761,-5.499908,-6.698309,-8.012721,-7.779412,-2.468356,-6.371127,-8.564464,-8.900139,-0.792276,5.229294,7.796579,-1.162878,5.916979,9.899681,5.255530,4.954190,0.315823,8.813065,-8.070199,4.597322,2.301469,2.307196,3.382394,-9.852097,2.694954,-9.237782,-4.863605,-5.302757,-2.247040,-0.645357,-3.979731,-4.635609,8.562691,4.153951,8.032292,-2.597101,-7.195531,-5.495476,8.628743,-4.051120,-0.687050,1.794100,6.088547,8.402423,9.454647,5.699575,1.080380,6.216451,-0.443481,-3.038909,-6.227799,-0.241424,8.740872,-2.927597,8.034035,9.170510,2.843925,-9.602631,-8.533377,-3.887720,2.155206,7.482572,5.368716,6.843846,-2.819199,2.651467,8.453056,0.414520,-1.738003,7.853809,-4.370897,-9.254990,-2.871135,9.315440,-2.731180,-8.986840,2.880060,-2.866435,5.423507,-9.126352,-6.129341,-5.728416,-1.798356,-5.750939,5.333997,-3.237461,-9.819101,1.954866,-4.489344,3.186828,-3.299661,-2.273871,3.488624,4.892944,3.144919,-2.882815,4.740916,9.150959,2.410743,0.449105,7.918826,-6.616515,-3.509055,-8.437638,-1.682108,7.677572,-1.987927,9.563107,-4.744498,-5.785816,-6.929239,8.501564,9.599301,9.034090,-4.863830,7.241130,5.514051,2.308438,4.375459,-7.863463,8.968507,-3.294758,5.083433,-7.493666,-1.761873,0.836055,6.604466,4.148638,4.301483,8.118900,8.329864,-6.638000,2.625475,-9.521264,6.566670,-2.075469,-5.220155,-6.036008,-9.402374,1.335384,0.515615,-7.327412,-1.805146,8.810945,-3.847389,2.394184,9.104255,-1.976070,-8.246266,0.798805,8.992994,-5.754806,6.692958,-1.907708,6.172215,-8.015390,-1.098044,-5.117775,-8.899995,0.976790,-6.761785,-1.166510,-0.537022,-6.523848,2.559479,-3.937876,-1.290141,-2.351670,-1.892591,1.294321,5.008593,-9.987718,-7.176879,-7.484273,0.862681,-8.124792,-9.936018,6.518929,0.778721,1.015928,-2.060250,-5.431729,5.117466,-3.845935,4.372898,2.562675,3.393713,-8.225951,-4.138346,0.137773,-4.263320,-9.683933,-3.249026,1.653174,5.003931,6.726135,0.774200,-1.857325,-7.133432,-8.338234,5.068812,-8.982885,2.027031,-4.892352,7.604719,6.255787,6.171649,3.389486,-0.088846,-0.689097,7.405260,7.271663,4.881691,4.586421,-8.100236,5.954326,-1.737595,-6.588736,-2.894556,1.366567,-1.162494,-7.689391,-5.141441,-1.918950,-6.685106,9.668282,-7.094522,-2.425406,-6.525894,5.057281,3.473156,-2.786608,7.885221,-1.394763,-4.179578,7.790612,-1.017789,-3.987261,8.099199,9.291420,0.136643,-6.291466,1.256519,3.320902,-1.136935,-0.089015,1.851831,1.806299,-1.016178,0.360824,-5.333750,6.670229,-8.529622,0.773284,-6.426032,7.805587,7.116853,0.204238,2.026674,7.665548,-6.474489,2.193684,-8.366399,-9.174745,-8.760819,0.910996,-9.442011,-0.821952,1.003213,7.161148,-5.306793,6.777347,-9.606326,0.218531,-6.011717,6.236640,-7.310998,-9.185782,-9.086606,0.869154,-8.010074,6.687163,-8.087074,0.496291,4.277038,9.681729,-3.041967,-0.134088,-6.117011,-5.074395,-2.511771,3.016756,-6.276472,9.402428,-6.946153,-6.780011,-9.863127,5.669311,1.311254,-0.104970,2.918704,-4.456633,-1.301494,-0.551001,-6.968610,0.690722,1.669548,-1.802880,9.235480,-6.342648,-8.699780,-4.863098,-4.450913,8.137141,1.567414,-4.859191,-7.423353,-5.583598,6.428326,8.147818,9.718167,-0.318944,3.895280,-9.658831,5.720971,-0.441251,8.886729,-0.886009,-4.595294,2.308254,6.190428,4.946815,8.228919,-9.624337,-7.770035,-3.106808,7.791875,-7.341150,5.824690,1.983551,2.875858,6.375264,-6.666202,-9.300787,9.732343,-5.338300,-6.934204,-5.967517,9.006691,-3.799831,-1.223612,3.189633,-1.122716,-0.103783,2.404923,-5.622229,6.722705,5.767119,0.961071,6.144115,-9.795871,1.132351,5.038338,-0.418641,-3.517605,-3.897097,0.671166,-4.487190,-4.536362,-4.056873,-8.678401,-0.076408,-5.107193,-6.739782,-1.192150,-8.418583,0.180119,0.672461,-7.514737,-6.535422,-3.736742,8.113119,-5.771555,2.834677,2.798786,-0.995194,-6.269751,3.211691,7.077056,-6.639619,9.164048,-5.488920,-6.273104,4.189438,5.922035,-8.031195,9.603596,9.802692,9.436156,-7.373168,-2.925258,3.723009,6.593062,1.370559,-1.503657,-9.332719,0.966758,-2.247709,-1.760814,-7.947219,7.383415,-0.222321,-2.934436,4.951211,-6.055072,-5.630095,-4.282993,-9.512856,8.919573,-3.474569,5.552883,7.045766,6.898559,7.516325,-6.791539,4.574024,-6.633916,-6.406056,-6.665047,-4.311554,4.999665,6.263416,-3.034825,3.083007,-6.176853,7.808829,1.134804,-6.185912,0.741636,-7.990351,5.971207,8.068693,0.944318,-4.338453,4.948916,2.962062,-5.046698,1.194696,-9.314271,-8.721533,-5.163099,-6.730208,-4.838322,8.008974,-1.654495,9.362295,2.243994,7.025036,-6.185729,-4.267888,8.593725,-5.546075,9.105222,-0.169622,0.465128,-1.520405,9.917268,6.285529,7.149900,1.661206,-4.218457,8.716568,0.614768,2.463133,-8.633900,-5.423000,1.416314,8.074166,-0.857985,-1.331981,-2.199103,1.426764,7.161009,-5.171512,6.187078,8.049073,-2.047517,-2.412449,9.396648,-5.561806,4.331742,9.877118,9.714669,8.636804,2.187541,2.041479,-3.321582,5.359241,3.625347,-4.154443,2.224280,3.570846,-0.502163,5.265696,5.847886,-7.204341,-1.045855,6.688927,-7.589169,9.624952,-7.900063,-3.374675,-3.459510,-0.830914,1.833019,-8.323217,-1.600168,-9.427924,2.296752,4.996110,6.713336,-2.167893,1.727039,-1.865045,-9.915223,8.917090,-0.429294,-0.197017,1.219985,6.538027,3.708083,0.546626,0.136793,7.751181,-7.039953,0.459771,-3.226133,6.970316,2.475214,6.880384,-8.239223,-7.372181,-6.809237,4.542912,4.788117,-5.875832,-9.332839,2.853430,-0.632047,7.677850,5.447364,-4.809363,-1.686522,2.449450,1.124043,9.707365,-7.710238,9.424889,-0.582734,-9.880566,1.189670,3.276637,1.706085,5.897548,1.132479,-0.920444,6.595064,-6.303409,-2.949026,7.944289,-9.700850,7.743538,-0.202967,-7.833401,1.358798,-6.108940,8.043810,3.543529,-7.790779,-7.245745,4.927917,-1.348744,-2.927453,-4.341386,2.882155,-0.877215,-1.838408,-2.075402,-9.118301,-4.700013,4.645487,-8.602085,-1.238885,8.569330,-3.094852,-9.242238,-7.274826,-6.152957,7.931941,-4.252558,-3.654678,-3.007663,-6.123420,0.213575,0.584829,0.351248,7.441533,-2.222958,4.342505,-4.482606,4.511292,0.969831,-2.400919,-8.896756,-9.273070,-8.720551,-7.648713,2.823672,6.724325,0.485652,-9.702092,5.261285,4.614230,6.837393,-5.691128,-3.425666,-5.468717,3.097316,-7.554648,-1.517664,-7.161207,6.622976,-2.884586,-2.567351,-6.721371,-5.014973,-2.492168,-6.445827,5.770736,-5.133409,9.991612,-2.629761,-7.592510,-5.357101,6.266703,8.697150,1.349762,-0.861075,5.165279,5.510828,0.229630,7.143395,-1.062045,5.038224,6.672494,7.623112,-5.971270,2.792477,7.499843,6.525360,-6.533347,9.810841,-8.721225,0.834096,-6.037247,8.815932,6.147581,2.336272,-3.802704,5.411992,-4.939324,-2.181865,-3.914648,5.201885,-6.812118,6.002258,6.620289,-7.128350,-7.021445,6.116097,4.379615,-0.731809,4.447248,-6.798868,-0.390739,-1.022227,-8.595918,-9.497239,-5.645885,-6.375558,-9.608684,1.222811,-5.905800,6.830772,-3.603696,0.491860,0.198885,-8.543971,3.630158,-7.717491,-2.410717,-3.511029,-6.085332,-4.942251,-5.611117,8.194498,-5.763084,-1.384132,-7.538056,6.999304,4.434632,-9.489647,6.646212,8.417795,7.550447,-3.534015,-6.283872,-1.746982,5.477273,2.742226,-1.678171,7.842592,-4.850944,4.553054,6.551817,0.589197,-7.384747,-5.453644,-7.135635,-2.204023,6.506607,8.145424,-6.374057,-1.716478,-4.687019,0.216218,-5.884849,8.789849,3.062984,-7.548575,-3.344154,8.161723,3.915722,-3.284729,7.916746,-6.570002,1.963448,1.289728,5.829863,-6.621416,6.790746,-4.307590,-9.746223,-2.585242,6.973129,-2.854693,-4.141116,-4.525754,4.770959,1.942203,1.058181,-6.370614,-9.000998,-0.561222,0.280339,1.938365,9.360977,7.622012,-4.356441,8.106664,-2.251867,7.103610,8.783655,-4.805628,-3.785879,1.129543,3.425086,-5.452302,1.165360,-5.264123,6.361883,-0.980856,8.954429,-2.619505,1.300108,1.430568,-0.774836,4.829251,-2.908834,-3.875742,6.898837,5.168188,6.121054,-2.045971,-1.933478,-6.737302,1.948275,-5.346443,-1.516113,-0.624553,-2.161569,4.765887,-4.875729,-4.617225,-8.656955,1.354201,0.973729,7.670015,-3.133288,0.815903,-3.115234,7.968048,-7.385145,-1.027900,-4.699993,9.381086,4.724505,6.788818,7.217136,-5.442725,8.355846,5.238061,-7.694820,5.164900,7.428459,-2.628837,-0.671197,1.577766,3.658585,1.755314,-3.998568,1.112678,2.847902,5.897619,-4.364499,6.515229,6.328519,-9.934837,5.002646,-0.532571,0.209392,-7.258895,-8.351632,-7.259892,0.240441,-0.336564,-8.603828,4.545418,-8.412660,-9.937990,7.703573,-4.799170,3.661819,-8.101918,1.154564,5.507060,6.105771,-5.085690,2.695040,-4.056783,8.512510,-5.036535,-4.424005,4.112383,-1.487643,2.445835,9.620278,-9.426699,9.039571,9.778529,1.633447,7.734421,-5.264847,7.952513,-9.106498,0.666717,-0.817150,-7.123002,6.696720,6.425738,9.607153,9.589478,7.411746,7.686647,5.851853,6.243572,0.553180,1.769568,-7.135243,3.415819,-1.705502,-6.899578,-9.368382,2.945523,0.087687,9.065602,-3.387906,7.390810,-1.814436,-9.593300,-7.642897,3.372465,-3.873238,9.653664,8.167760,0.604199,1.032779,-0.019869,-1.050200,-5.633353,-9.982064,1.877318,-6.417714,-9.179426,5.291913,-8.902124,-5.677532,-8.542835,3.817381,-6.878213,-7.145743,-6.695917,0.759455,-1.570839,6.931669,8.514584,-0.190984,-2.013582,-5.055361,-9.305616,3.694675,2.857640,-3.960014,-4.475458,8.383782,-9.059992,-9.330813,-0.719683,4.828069,-3.259745,5.648080,-8.084664,-1.593236,-9.159363,-0.996945,-8.117007,-0.333767,5.740674,6.188621,-2.815699,-8.626616,0.766311,3.946557,2.999168,-3.294856,8.982736,7.259137,2.990822,-0.362584,-8.265041,-4.702750,-0.499958,-9.202716,9.723799,4.977539,4.822409,-8.060736,2.281892,-9.999574,-5.089886,-3.768329,-2.046256,-9.130346,4.983416,2.360458,5.861895,-4.528688,-8.948839,2.538417,9.898466,6.709285,7.056656,7.756232,-7.638859,4.553168,-1.822548,-8.585984,5.428824,-0.446076,-0.911299,8.686640,-1.007105,7.713484,-4.860538,-9.454058,-4.496312,-0.113707,-5.669656,-2.078644,7.559993,6.720218,4.188794,-6.837321,-8.559884,1.186480,5.164781,-4.164518,-2.525253,-3.156374,2.444702,-7.210468,0.922490,2.841264,-6.954833,-1.547482,0.120101,3.415684,7.304584,6.240614,2.332856,-8.964713,8.206331,-7.721997,9.241039,0.805025,9.274183,-2.009777,-1.833516,-2.878527,7.595522,2.335008,1.546437,7.308990,-8.517047,-4.859589,1.655042,-0.248887,-1.287051,-7.150936,-3.964253,-3.966133,-3.378672,-4.078166,-7.145973,3.880509,3.032261,-9.082370,-3.897220,4.123394,-3.592995,-9.469702,5.380663,2.432996,5.140196,5.719012,3.211306,3.034754,-3.673993,-2.898925,2.204434,-9.314637,-6.936257,7.127151,-3.321224,-0.934989,-4.839266,-8.072444,5.040196,0.416488,6.532181,-2.674421,-5.707391,-1.102730,1.137995,8.696564,7.468264,5.768464,-3.737334,-5.813422,-9.004435,-6.131446,3.152912,-1.565349,-5.572199,0.311150,-3.115271,-9.122545,2.546594,0.487292,6.265773,4.270281,-8.306025,3.662459,4.567432,3.184961,-6.092101,1.403459,-3.873360,-6.688800,7.861413,-8.535725,-2.223375,9.266133,-8.472541,-6.626714,7.612831,-4.250845,1.690716,8.748319,2.956924,-0.923379,-4.005566,2.048500,9.936550,8.515182,9.989379,-1.474854,-3.632456,2.262658,-0.808398,-1.067391,-6.275426,9.520137,-1.256855,-1.198328,9.084840,6.868911,-9.973377,-5.337756,7.105852,8.243832,2.538392,-6.641041,5.213037,-3.417156,6.031323,8.105457,6.634024,6.991623,9.161962,8.154035,-3.184360,-1.079370,2.271893,-7.961504,-7.481189,8.448712,8.278265,0.358069,-9.010390,-8.379117,9.033459,0.011558,-7.164198,-5.139273,-3.320662,-2.906857,8.557367,-7.690347,6.859839,9.624532,-8.212198,-1.699870,-6.249218,-7.166194,3.533793,-8.175158,-0.424670,-8.445193,3.062469,1.010697,-7.708649,-7.712108,-4.740593,5.847113,-6.514735,-8.473140,9.495729,-8.227382,-9.187532,-0.137666,-0.060625,-9.481478,-3.111491,2.841306,-9.055566,-7.763255,9.880070,-8.128826,2.899647,9.059664,-3.613963,-5.441885,-4.880983,5.009993,6.961233,7.329803,-0.396915,-9.686432,-7.189542,-7.170366,-8.635767,8.845314,-9.112157,-3.933938,8.117301,8.398777,8.683406,-7.074359,-1.087081,-7.638967,1.055455,8.600837,-3.402314,6.853979], dtype = "float32")#candidate|7401|(1344,)|const|float32
call_7400 = func_637_call(relay.reshape(const_7401.astype('float32'), [7, 16, 12]))
call_7402 = func_637_call(relay.reshape(const_7401.astype('float32'), [7, 16, 12]))
func_3780_call = mod.get_global_var('func_3780')
func_3784_call = mutated_mod.get_global_var('func_3784')
var_7422 = relay.var("var_7422", dtype = "int8", shape = (468,))#candidate|7422|(468,)|var|int8
call_7421 = func_3780_call(relay.reshape(var_7422.astype('int8'), [9, 4, 13]), relay.reshape(var_7422.astype('int8'), [9, 4, 13]), )
call_7423 = func_3780_call(relay.reshape(var_7422.astype('int8'), [9, 4, 13]), relay.reshape(var_7422.astype('int8'), [9, 4, 13]), )
func_6431_call = mod.get_global_var('func_6431')
func_6434_call = mutated_mod.get_global_var('func_6434')
const_7426 = relay.const([[-0.327879],[-4.861396],[7.735066],[-3.291732],[3.616525],[-6.430039],[3.794170],[-4.144282],[9.789445],[7.296856],[4.347260],[-8.221811],[4.225974],[-7.926441],[-6.488570],[9.170891],[8.548056],[-4.167861],[-2.263281],[-2.260979],[5.493392],[-7.904675],[-0.276132],[-1.177189],[-1.337730],[5.450699],[-2.477054],[3.901710],[7.358198],[7.814698],[-9.849882],[-6.413265],[-0.583637],[2.102880],[5.183193],[0.029799],[-7.527179],[5.183831],[-5.078251],[6.342631],[0.444981],[-2.331131],[-0.143152],[-2.179278],[-8.216501],[2.257620],[-7.048282],[-5.540548],[-2.416216],[7.709528],[8.005116],[4.445761],[-2.147248],[9.795513],[-7.976335],[4.817666],[7.137397],[8.826025],[1.062893],[-5.698770],[-2.216301],[4.106632],[9.962430],[1.611540],[7.707399],[-1.228617],[6.605013],[-8.455983],[-3.637503],[-5.367024],[-3.335798],[2.788938],[-2.756245],[6.114644],[-9.260367],[1.252742],[3.276213],[0.425926],[-3.115501],[7.058780],[8.664505],[2.082079],[4.941554],[-8.468532],[4.302094],[-8.147383],[-6.257222],[3.174946],[5.663310],[2.960397],[-0.705359],[-5.002539],[3.849065],[6.713718],[-4.283924],[2.210913],[-1.131060],[8.577807],[-8.083063],[9.335188],[-8.583626],[-0.298181],[8.580899],[2.152388],[-4.317270],[-1.139171],[9.494864],[7.395201],[-5.327503],[7.330478],[0.346851],[-7.414073],[1.289009],[5.595418],[3.291004],[7.759948],[-2.659021],[9.809874],[1.990327],[-5.377240],[6.704006],[2.949710],[3.442960],[0.359916],[3.917806],[5.486802],[9.240054],[-0.406473],[5.395550],[-1.890932],[-2.592726],[-3.757362],[0.228481],[8.995554],[7.394325],[2.126886],[-4.478842],[4.671663],[0.889088],[-8.241733],[7.785871],[2.324866],[6.648493],[3.740157],[0.737920],[-8.609028],[4.023442],[-0.074658],[-3.547713],[-8.643633],[-9.154481],[-0.979674],[-7.301204],[-6.852193],[-3.401104],[-2.451765],[-9.385345],[-6.720607],[8.803938],[-3.688881],[1.578368],[-2.483806],[-2.772539],[-0.966832],[-3.214568],[-5.777226],[-7.904259],[-1.524225],[-3.511536],[-8.476058],[0.202883],[5.962908],[-0.535656],[1.258902],[7.887151],[-9.273391],[-5.077262],[-4.355795],[9.611270],[1.161263],[2.074030],[-2.473604],[-8.662462],[-4.742361],[-0.307896],[8.586429],[1.847931],[2.266931],[-4.141799],[5.840304],[3.644646],[8.199876],[-7.893625],[-5.509516],[-3.670057],[-4.910111],[4.212556],[2.956591],[1.883756],[-5.860278],[-4.945232],[8.709594],[-9.387018],[8.008521],[4.028055],[7.129205],[-6.535304],[3.714267],[-7.871795],[-4.571428],[6.760154],[-9.791727],[-1.828894],[3.004903],[5.291304],[0.824250],[0.568958],[1.686086],[2.495626],[5.360461],[0.746231],[3.753398],[7.080165],[-5.911670],[-9.639452],[-1.313801],[4.758882],[-4.926135],[-1.372454],[5.078086],[-4.718199],[8.146096],[3.080478],[7.513542],[3.383390],[-3.057646],[1.579655],[-9.991200],[-5.998186],[-9.443981],[1.592889],[-7.837906],[7.690949],[-2.679205],[-9.979441],[1.058391],[-2.772079],[8.322070],[1.096856],[9.709045],[5.268595],[2.794818],[5.888874],[6.873789],[8.454362],[0.732824],[-7.075453],[4.008878],[-3.668938],[9.769407],[-7.593628],[1.988619],[2.186179],[-2.283182],[-4.630379],[8.997548],[3.333577],[-6.075005],[-2.557425],[-3.944879],[-2.685873],[-5.082372],[-3.345182],[-0.307490],[-5.569248],[6.724669],[6.376072],[2.842005],[2.468232],[1.766444],[1.782692],[2.911819],[-6.124609],[-7.573901],[5.810525],[-4.056218],[-4.160315],[-1.627213],[-9.827603],[9.833248],[-1.353671],[2.855439],[-2.885556],[-4.312494],[0.600514],[6.497354],[-0.807869],[7.769028],[-4.983414],[8.253778],[9.692096],[6.811604],[0.865321],[-5.798046],[8.032563],[-7.838548],[-4.532113],[3.049419],[-0.987082],[3.603061],[5.988910],[7.694858],[0.484112],[-9.977045],[-6.700272],[-4.298955],[5.020555],[6.712898],[2.522363],[3.280243],[4.473836],[6.572410],[4.251404],[-6.647708],[-5.295217],[8.202339],[-8.370462],[-3.006402],[-1.797048],[-0.668625],[-5.599239],[-9.269388],[-4.281421],[-7.315074],[5.984813],[-1.354886],[4.496459],[-0.777363],[-9.883465],[4.645123],[-4.747423],[3.694406],[5.259566],[1.166105],[-0.133715],[-1.476480],[-6.621168],[8.376660],[-3.010482],[-7.534399],[4.610884],[-6.534847],[-0.852091],[7.677567],[-3.709439],[-0.970470],[-9.054905],[8.700601],[8.768864],[8.616685],[-4.537052],[-5.602701],[-1.688420],[-6.067230],[-2.328590],[-2.582694],[7.966326],[-3.745329],[2.733770],[7.170822],[-1.416494],[3.422212],[4.832513],[-3.224436],[0.433790],[-4.301563],[8.910892],[-8.529368],[-0.271410],[-2.657831],[7.507302],[-9.230925],[-9.374463],[2.252098],[6.342336],[5.018180],[-0.714380],[-4.817604],[7.909616],[-2.638169],[-1.529422],[7.494019],[8.722983],[3.780074],[-6.718206],[-3.506737],[-8.411015],[-8.269113],[-1.035512],[-2.716713],[-2.112897],[1.470068],[-5.580127],[-5.161807],[6.515156],[-0.771905],[-2.104604],[1.802403],[8.894978],[0.051482],[2.265367],[-4.363737],[5.920802],[-0.096247],[-6.746666],[2.799826],[-7.477163],[5.929444],[-6.549019],[-2.313524],[-9.699296],[6.285847],[-9.463431],[-0.118098],[1.161639],[2.452897],[-0.466660],[-1.811260],[6.303046],[4.638083],[7.657263],[-5.934594],[3.808692],[4.129817],[-6.700256],[0.918006],[-0.443723],[1.664844],[-1.460424],[9.714521],[3.159835],[-8.135840],[-0.353929],[0.875391],[3.316944],[5.700553],[6.484570],[-9.725874],[2.880089],[-7.956047],[5.603523],[-1.908491],[-0.615941],[5.636536],[1.540613],[-9.071999],[2.249976],[-1.460261],[0.548324],[6.766065],[-4.560654],[-0.581575],[1.982022],[6.264422],[-3.921781],[-5.865369],[5.765001],[0.882528],[-6.111573],[-9.392768],[1.536033],[-6.561765],[4.310918],[-4.732455],[2.574783],[8.333426],[-8.103343],[4.406419],[-1.500832],[-8.936421],[6.761093],[7.280217],[6.303125],[-7.171289],[5.069544],[-9.200826],[-5.666597],[2.168178],[4.751657],[-0.676111],[-0.359460],[4.016708],[0.331200],[-6.846237],[6.380058],[-3.925719],[0.877410],[9.120540],[2.051497],[-7.726025],[1.422990],[8.918625],[0.465946],[4.382353],[8.390074],[5.100953],[-7.583896],[-8.392413],[-1.669083],[4.325045],[-4.276339],[-1.738203],[3.037464],[-1.482381],[4.908490],[1.719267],[4.963063],[-2.172456],[-0.739293],[-7.923625],[-7.058864],[4.769280],[-9.259064],[-7.810066],[-0.276326],[-0.287914],[-4.479944],[-4.756107],[-7.950378],[-9.122438],[0.249423],[-8.006001],[-9.150085],[3.168968],[9.090205],[-1.435830],[-7.318237],[-9.701643],[-1.169806],[8.536411],[-7.797011],[1.573108],[-8.653344],[0.522101],[-8.420469],[-7.330585],[9.893397],[7.305768],[-1.912670],[-5.489772],[-6.331184],[7.366033],[-7.822003],[9.021513],[-8.039113],[7.570732],[-9.663225],[1.605406],[-7.220447],[3.502210],[-8.865433],[-6.178931],[0.796299],[-4.478242],[0.865715],[6.216846],[3.104633],[-4.406160],[-6.039809],[-8.700530],[-5.039547],[7.560263],[-3.812555],[3.349087],[3.021032],[-4.286154],[-1.782296],[-4.413917],[-0.210543],[0.193262],[1.377053],[4.560666],[0.276002],[0.840857],[3.798319],[3.576770],[8.746218],[-2.359010],[8.720506],[0.584141],[-5.803362],[2.820210],[-6.615172],[-8.583772],[-0.969367],[-7.742867],[-7.264835],[-4.130856],[0.017397],[1.255489],[-5.574964],[-4.621802],[-0.609016],[5.178873],[-5.696176],[-1.885918],[-1.719595],[-0.048577],[8.860860],[2.304062],[-8.140747],[-5.410259],[9.964392],[0.062411],[-4.973742],[0.683671],[3.307422],[-9.757179],[-2.221509],[8.815473],[-0.119922],[-5.104737],[5.787357],[-8.373682],[7.574062],[-2.798590],[7.290595],[9.471288],[-8.300496],[-1.769219],[8.822640],[1.876004],[9.514973],[-0.103561],[5.048261],[0.449777],[-8.564600],[5.274758],[-8.741280],[-0.188518],[3.368513],[3.106896],[2.426384],[-5.643125],[6.898102],[-5.963212],[-2.709524],[7.038858],[-7.693331],[-8.017176],[-9.176457],[2.439712],[2.691939],[-2.350515],[-7.658156],[3.401950],[-1.886274],[1.096852],[4.409096],[4.581719],[-3.590018],[-6.662033],[3.986169],[-6.999447],[4.307622],[7.230625],[-6.715297],[-3.320137],[0.513602],[2.379623],[-0.797756],[-1.780785],[-1.484458],[-9.571154],[5.561616],[-8.829057],[-1.109152],[-4.591305],[0.683220],[3.358907],[3.469434],[-7.812897],[9.958384],[2.954877],[8.761876],[1.694640],[-1.030607],[-2.888891],[5.733703],[-6.054187],[-0.120574],[-8.414547],[3.387318],[-1.457098],[4.870471],[-1.094384],[2.647333],[1.392354],[4.356823],[9.358115],[3.363345],[-3.235725],[-3.805373],[-9.590929],[-9.127423],[-5.523341],[-5.878359],[3.469188],[-1.795438],[-2.551767],[2.425020],[-4.826108],[9.151978],[7.048218],[4.327687],[4.005938],[0.889956],[-1.985197],[3.505336],[1.395296],[2.068355],[-4.598475],[-5.072643],[-3.633735],[-2.105337],[6.317062],[6.869277],[-4.850667],[9.404532],[2.835900],[-5.225418],[9.037308],[0.084728],[-4.766359],[2.776979],[-4.243081],[0.208039],[-2.659222],[-3.782681],[-6.058142],[0.100037],[-9.856899],[-5.863415],[0.043612],[-6.980094],[-0.639576],[0.862874],[3.817547],[1.258735],[7.703791],[9.723518],[3.734438],[4.335325],[3.515919],[-4.149447],[-9.597099],[2.152008],[-5.562736],[2.818987],[1.577723],[8.519126],[-3.213128],[3.241483],[3.835865],[2.969603],[6.634874],[-5.972108],[-5.078626],[-8.576269],[4.802801],[4.083356],[-5.700233],[-7.228377],[-8.734776],[-2.142974],[5.256223],[3.528646],[5.848618],[6.601906],[0.980880],[3.512250],[-1.400440],[-3.355658],[2.708002],[-9.103039],[4.646484],[-4.325018],[-5.851639],[6.004007],[-7.395489],[-2.983947],[2.891398],[-4.475330],[-9.446532],[9.491017],[-1.280495],[2.170442],[-2.079618],[1.600375],[-7.227737],[-7.150357],[-3.468015],[-0.735662],[0.191517],[5.747879],[8.063238],[6.462511],[-0.339211],[6.289792],[-6.055533],[-4.216845],[-7.138069],[9.472092],[3.647736],[-5.482345],[-2.085877],[-8.243455],[-1.135650],[7.231909],[-9.888763],[2.175440],[-0.899657],[-8.678264],[-2.443964],[4.762679],[-8.167510],[-6.607105],[7.742473],[5.782290],[-1.227008],[9.486784],[-3.870377],[4.664881],[-1.144871],[-2.583313],[-9.815357],[-9.524407],[-6.564818],[6.430763],[9.455943],[0.117553],[-7.803972],[-8.908213],[4.096794],[4.885690],[1.341259],[-0.638809],[-7.270826],[-3.465257],[-3.460651],[1.542208],[8.833123],[0.064481],[-6.711180],[-0.319441],[-9.771048],[4.705005],[8.425311],[-5.361638],[2.116178],[9.595895],[-0.691592],[-6.449300],[8.355170],[0.905074],[9.316301],[-0.778434],[3.700974],[-6.474136],[-7.309727],[8.708388],[0.587371],[-4.676228],[-2.830154],[5.454517],[-8.134587],[-3.481645],[7.053659],[3.920065],[-6.416433],[-3.413077],[4.116817],[-3.332144],[7.993366],[-6.423768],[5.111063],[-5.971817],[-3.297188],[-4.307130],[2.518897],[-8.067221],[-3.199634],[0.791410],[3.233514],[-6.619891],[5.972759],[0.974698],[-7.250543],[0.674084],[-1.281336],[1.287692],[8.321444],[-8.085890],[-0.470037],[-7.447773],[1.369653],[9.853434],[-9.902887],[9.990191],[2.673243],[2.508765],[-3.446849],[6.967937],[-7.125688],[-4.633962],[-3.820767],[-1.600452],[3.717674],[2.958372],[6.627561],[-7.106241],[-8.960138],[-9.301132],[-7.354867],[-1.351397],[-2.033633],[-4.807282],[-4.172112],[8.462925],[7.083306],[-7.235969],[2.205280],[7.203221],[2.369148],[4.524085],[9.012411],[0.225482],[8.990350],[-6.272703],[6.143080],[-5.424580],[-7.516240],[9.178449],[-4.437091],[4.189362],[-1.333463],[-1.286352],[-9.105661],[8.515313],[-2.190200],[5.743077],[-6.973236],[-4.126542],[-6.223799],[7.315517],[4.789658],[1.335818],[-2.733231],[0.136852],[2.054994],[-0.834990],[-4.001859],[-0.128603],[6.205605],[-7.121896],[-0.596503],[6.959823],[6.556314]], dtype = "float64")#candidate|7426|(968, 1)|const|float64
var_7427 = relay.var("var_7427", dtype = "uint16", shape = (10,))#candidate|7427|(10,)|var|uint16
call_7425 = relay.TupleGetItem(func_6431_call(relay.reshape(const_7426.astype('float64'), [968,]), relay.reshape(var_7427.astype('uint16'), [5, 2]), ), 8)
call_7428 = relay.TupleGetItem(func_6434_call(relay.reshape(const_7426.astype('float64'), [968,]), relay.reshape(var_7427.astype('uint16'), [5, 2]), ), 8)
func_591_call = mod.get_global_var('func_591')
func_596_call = mutated_mod.get_global_var('func_596')
const_7435 = relay.const([-3,-4,-7,8,-2,2,-10,7,-4,-2,7,4,9,4,-7,-5,-4,-7,-1,-2,10,8,-10,10,7,-8,3,8,-7,-9,7,-5,4,-3,-6,7,10,-8,10,6,-1,-6,4,10,6,8,-5,6,4,4,4,-8,9,-5,-5,10,3,4,-10,3,-4,-1,3,-6,-5,-6,4,-3,9,1,7,4,7,-1,10,5,4,-3,-1,1,9,-7,3,-5,-10,-8,10,-8,10,6,-3,6,-4,4,7,-5,5,1,-4,10,-7,-2,10,3,-1,-2,9,2,6,-1,3,1,-8,6,3,5,-4,-4,-8,6,8,-4,7,-10,-5,-6,-7,-6,3,8,-8,3,-1,-8,-6,8,4,10,-1,-4], dtype = "int32")#candidate|7435|(140,)|const|int32
call_7434 = relay.TupleGetItem(func_591_call(relay.reshape(const_7435.astype('int32'), [7, 10, 2]), relay.reshape(const_7435.astype('int32'), [7, 10, 2]), relay.reshape(const_7435.astype('int32'), [7, 10, 2]), ), 0)
call_7436 = relay.TupleGetItem(func_596_call(relay.reshape(const_7435.astype('int32'), [7, 10, 2]), relay.reshape(const_7435.astype('int32'), [7, 10, 2]), relay.reshape(const_7435.astype('int32'), [7, 10, 2]), ), 0)
bop_7437 = relay.logical_xor(uop_7397.astype('int8'), relay.reshape(uop_7380.astype('int8'), relay.shape_of(uop_7397))) # shape=(15, 15, 7)
bop_7445 = relay.greater_equal(bop_7437.astype('bool'), relay.reshape(uop_7380.astype('bool'), relay.shape_of(bop_7437))) # shape=(15, 15, 7)
bop_7467 = relay.equal(uop_7380.astype('bool'), relay.reshape(var_7379.astype('bool'), relay.shape_of(uop_7380))) # shape=(15, 15, 7)
func_1505_call = mod.get_global_var('func_1505')
func_1512_call = mutated_mod.get_global_var('func_1512')
const_7480 = relay.const([6,4,-6,-8,-7,-7,10,8,-6,-4,-9,3,10,2,5,8,5,-5,-9,8,-1,3,-6,-1,7,1,8,9,-8,-3,-6,-6,3,2,6,9,8,-1,4,-9,7,-6,-4,5,8,4,-9,5,-2,3,10,7,6,4,-2,-3,-1,-6,-6,6,8,-7,2,8,-10,4,-5,-10,1,-4,-7,1,-6,2,7,3,9,2,-2,7,-5,6,4,-2,-1,5,3,-5,-3,8,-8,3,3,-1,10,-10,1,-5,-1,-9,3,-8,9,3,2,-10,-6,-8,-2,5,8,-5,9,-5,6,3,-7,-6,-6,-10,4,-1,-5,-9,-9,-7,8,-8,-1,-9,7,6,7,-2,-1,-5,2,-5,-6,-4,-9,-2,4,-5,-4,-9,10,-5,-7,10,-1,3,1,-2,2,-2,8,9,-5,-6,3,-2,-3,10,5,-8,-6,-10,10,-4,8,5,-1,8,1,6,1,6,4,2,7,8,2,10,1,-6,9,7,-8,-7,10,2], dtype = "int32")#candidate|7480|(192,)|const|int32
var_7481 = relay.var("var_7481", dtype = "bool", shape = (3, 300))#candidate|7481|(3, 300)|var|bool
call_7479 = relay.TupleGetItem(func_1505_call(relay.reshape(const_7480.astype('int32'), [16, 3, 4]), relay.reshape(const_7480.astype('int32'), [16, 3, 4]), relay.reshape(var_7427.astype('uint16'), [10,]), relay.reshape(const_7401.astype('float32'), [1344,]), relay.reshape(const_7435.astype('int32'), [140,]), relay.reshape(var_7481.astype('bool'), [900,]), ), 4)
call_7482 = relay.TupleGetItem(func_1512_call(relay.reshape(const_7480.astype('int32'), [16, 3, 4]), relay.reshape(const_7480.astype('int32'), [16, 3, 4]), relay.reshape(var_7427.astype('uint16'), [10,]), relay.reshape(const_7401.astype('float32'), [1344,]), relay.reshape(const_7435.astype('int32'), [140,]), relay.reshape(var_7481.astype('bool'), [900,]), ), 4)
func_2085_call = mod.get_global_var('func_2085')
func_2090_call = mutated_mod.get_global_var('func_2090')
var_7495 = relay.var("var_7495", dtype = "uint16", shape = (100,))#candidate|7495|(100,)|var|uint16
call_7494 = relay.TupleGetItem(func_2085_call(relay.reshape(const_7426.astype('float64'), [11, 11, 8]), relay.reshape(const_7426.astype('float64'), [11, 11, 8]), relay.reshape(var_7427.astype('uint16'), [10,]), relay.reshape(var_7495.astype('uint16'), [100,]), ), 1)
call_7496 = relay.TupleGetItem(func_2090_call(relay.reshape(const_7426.astype('float64'), [11, 11, 8]), relay.reshape(const_7426.astype('float64'), [11, 11, 8]), relay.reshape(var_7427.astype('uint16'), [10,]), relay.reshape(var_7495.astype('uint16'), [100,]), ), 1)
output = relay.Tuple([call_7382,var_7383,call_7400,const_7401,call_7421,var_7422,call_7425,const_7426,var_7427,call_7434,const_7435,bop_7445,bop_7467,call_7479,const_7480,var_7481,call_7494,var_7495,])
output2 = relay.Tuple([call_7384,var_7383,call_7402,const_7401,call_7423,var_7422,call_7428,const_7426,var_7427,call_7436,const_7435,bop_7445,bop_7467,call_7482,const_7480,var_7481,call_7496,var_7495,])
func_7500 = relay.Function([var_7379,var_7383,var_7422,var_7427,var_7481,var_7495,], output)
mod['func_7500'] = func_7500
mod = relay.transform.InferType()(mod)
mutated_mod['func_7500'] = func_7500
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7500_call = mutated_mod.get_global_var('func_7500')
var_7502 = relay.var("var_7502", dtype = "float64", shape = (15, 15, 7))#candidate|7502|(15, 15, 7)|var|float64
var_7503 = relay.var("var_7503", dtype = "uint32", shape = ())#candidate|7503|()|var|uint32
var_7504 = relay.var("var_7504", dtype = "int8", shape = (468,))#candidate|7504|(468,)|var|int8
var_7505 = relay.var("var_7505", dtype = "uint16", shape = (10,))#candidate|7505|(10,)|var|uint16
var_7506 = relay.var("var_7506", dtype = "bool", shape = (3, 300))#candidate|7506|(3, 300)|var|bool
var_7507 = relay.var("var_7507", dtype = "uint16", shape = (100,))#candidate|7507|(100,)|var|uint16
call_7501 = func_7500_call(var_7502,var_7503,var_7504,var_7505,var_7506,var_7507,)
output = call_7501
func_7508 = relay.Function([var_7502,var_7503,var_7504,var_7505,var_7506,var_7507,], output)
mutated_mod['func_7508'] = func_7508
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5434_call = mod.get_global_var('func_5434')
func_5436_call = mutated_mod.get_global_var('func_5436')
call_7554 = func_5434_call()
call_7555 = func_5434_call()
func_6920_call = mod.get_global_var('func_6920')
func_6921_call = mutated_mod.get_global_var('func_6921')
call_7561 = relay.TupleGetItem(func_6920_call(), 0)
call_7562 = relay.TupleGetItem(func_6921_call(), 0)
func_5035_call = mod.get_global_var('func_5035')
func_5037_call = mutated_mod.get_global_var('func_5037')
call_7581 = func_5035_call(relay.reshape(call_7554.astype('float64'), [11, 12, 12]))
call_7582 = func_5035_call(relay.reshape(call_7554.astype('float64'), [11, 12, 12]))
func_6846_call = mod.get_global_var('func_6846')
func_6847_call = mutated_mod.get_global_var('func_6847')
call_7591 = relay.TupleGetItem(func_6846_call(), 0)
call_7592 = relay.TupleGetItem(func_6847_call(), 0)
func_6320_call = mod.get_global_var('func_6320')
func_6322_call = mutated_mod.get_global_var('func_6322')
call_7613 = func_6320_call()
call_7614 = func_6320_call()
output = relay.Tuple([call_7554,call_7561,call_7581,call_7591,call_7613,])
output2 = relay.Tuple([call_7555,call_7562,call_7582,call_7592,call_7614,])
func_7616 = relay.Function([], output)
mod['func_7616'] = func_7616
mod = relay.transform.InferType()(mod)
mutated_mod['func_7616'] = func_7616
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7616_call = mutated_mod.get_global_var('func_7616')
call_7617 = func_7616_call()
output = call_7617
func_7618 = relay.Function([], output)
mutated_mod['func_7618'] = func_7618
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5509_call = mod.get_global_var('func_5509')
func_5511_call = mutated_mod.get_global_var('func_5511')
call_7648 = func_5509_call()
call_7649 = func_5509_call()
output = relay.Tuple([call_7648,])
output2 = relay.Tuple([call_7649,])
func_7656 = relay.Function([], output)
mod['func_7656'] = func_7656
mod = relay.transform.InferType()(mod)
output = func_7656()
func_7657 = relay.Function([], output)
mutated_mod['func_7657'] = func_7657
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4856_call = mod.get_global_var('func_4856')
func_4858_call = mutated_mod.get_global_var('func_4858')
call_7674 = relay.TupleGetItem(func_4856_call(), 0)
call_7675 = relay.TupleGetItem(func_4858_call(), 0)
output = call_7674
output2 = call_7675
func_7696 = relay.Function([], output)
mod['func_7696'] = func_7696
mod = relay.transform.InferType()(mod)
output = func_7696()
func_7697 = relay.Function([], output)
mutated_mod['func_7697'] = func_7697
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4769_call = mod.get_global_var('func_4769')
func_4770_call = mutated_mod.get_global_var('func_4770')
call_7743 = relay.TupleGetItem(func_4769_call(), 0)
call_7744 = relay.TupleGetItem(func_4770_call(), 0)
func_3651_call = mod.get_global_var('func_3651')
func_3654_call = mutated_mod.get_global_var('func_3654')
const_7751 = relay.const([[False,True,True,True,True,True,False,True,False,False,True,True,False,False,True,False,True,False,True,True,False,False,True,False,False,False,False,True,False,True,False,True,False,True,False,False,True,False,True,True,True,True,True,True,True,False,False,False,False,True,True,False,True,False,True,True,True,True,False,True,True,True,False,True,False,True,True,True,True,True,True,False,False,False,False,True,False,False,True,True,True,False,True,False,False,False,False,True,False,False,True,True,True,True,False,False,False,False,True,False,True,False,False,True,False,False,False,True,False,True,False,True,True,True,False,True,False,False,True,False,False,False,True,False,True,True,False,False,True,True,False,False,False,False,True,False,True,True,True,True,False,True,True,True,True,True,True,True,True,False,True,True,False,False,True,True,True,True,True,True,True,True,True,True,False,True,True,True,False,True,False,True,False,True,False,True,False,True,False,True,True,True,True,True,True,False,True,True,False,False,False,True,False,True,False,False,False,True,True,True,False,True,False,True,True,False,False,True,False,True,True,True,False,False,True,False,False,False,True,False,False,True,True,False,False,True,False,True,True,True,False,True,True,False,False,False,False,True,True,False,False,False,False,False,False,True,False,True,True,True,True,True,False,True,False,True,False,False,False,True,False,False,True,True,False,True,True,False,False,False,True,False,True,True,True,True,False,True,False,True,True,False,False,True,True,False,False,True,True,False,True,True,False,False,False,False,True,True,True,False,True,False,False,False,True,True,False,True,True,False,False,False,False,False,True,True,True,False,True,False,False,False,True,True,False,True,True,True,False,False,True,True,False,False,False,True,True,False,False,False,False,False,False,True,True,False,False,False,False,True,False,False,True,True,True,True,False,True,True,False,True,False,True,False,False,True,True,False,True,False,False,False,False,True,True,True,True,True,True,True,True,True,True,False],[False,True,False,False,False,True,False,True,True,False,True,False,True,True,False,True,True,False,True,True,True,False,True,False,True,False,True,False,False,True,True,False,False,True,True,False,False,True,True,True,True,True,True,True,False,True,False,True,False,True,False,True,True,True,False,False,False,True,True,False,False,False,False,False,True,True,False,True,True,False,False,False,True,False,True,True,True,True,False,True,False,False,True,True,False,True,False,False,False,True,False,True,True,False,True,False,False,False,True,True,False,True,True,True,True,True,False,True,False,False,False,True,False,True,False,False,False,False,False,True,True,False,False,False,True,True,False,True,True,True,False,True,True,True,False,False,False,False,True,True,False,False,False,True,True,False,True,False,True,False,True,False,False,True,True,True,False,True,False,False,True,False,True,False,False,False,False,False,False,False,True,True,False,True,False,True,False,True,True,True,True,False,True,False,True,False,True,False,False,False,False,True,False,True,True,False,True,True,True,False,True,False,True,True,False,True,True,False,False,False,True,False,True,False,False,False,True,True,False,True,True,False,False,False,False,True,False,True,False,True,True,False,False,False,True,False,True,False,False,False,True,True,False,False,True,False,False,False,True,True,True,True,True,True,True,True,False,True,True,True,True,False,True,True,True,False,True,False,True,True,False,False,False,False,False,True,False,False,False,False,True,True,True,True,True,False,False,True,True,True,False,False,False,True,True,True,False,False,True,True,True,False,True,True,False,True,True,True,True,True,True,True,False,False,False,True,False,False,True,True,False,True,False,False,True,True,True,True,False,False,False,True,False,True,True,True,False,False,False,True,True,True,False,True,True,False,True,True,True,False,False,True,True,False,True,False,False,False,True,False,False,True,True,True,False,False,False,False,False,False,False,True,True,False,True,False,True,False,True,False,False,True,True,True]], dtype = "bool")#candidate|7751|(2, 384)|const|bool
call_7750 = func_3651_call(relay.reshape(const_7751.astype('bool'), [16, 4, 12]), relay.reshape(const_7751.astype('bool'), [16, 4, 12]), )
call_7752 = func_3651_call(relay.reshape(const_7751.astype('bool'), [16, 4, 12]), relay.reshape(const_7751.astype('bool'), [16, 4, 12]), )
output = relay.Tuple([call_7743,call_7750,const_7751,])
output2 = relay.Tuple([call_7744,call_7752,const_7751,])
func_7755 = relay.Function([], output)
mod['func_7755'] = func_7755
mod = relay.transform.InferType()(mod)
output = func_7755()
func_7756 = relay.Function([], output)
mutated_mod['func_7756'] = func_7756
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5853_call = mod.get_global_var('func_5853')
func_5855_call = mutated_mod.get_global_var('func_5855')
call_7763 = relay.TupleGetItem(func_5853_call(), 0)
call_7764 = relay.TupleGetItem(func_5855_call(), 0)
output = relay.Tuple([call_7763,])
output2 = relay.Tuple([call_7764,])
func_7798 = relay.Function([], output)
mod['func_7798'] = func_7798
mod = relay.transform.InferType()(mod)
mutated_mod['func_7798'] = func_7798
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7798_call = mutated_mod.get_global_var('func_7798')
call_7799 = func_7798_call()
output = call_7799
func_7800 = relay.Function([], output)
mutated_mod['func_7800'] = func_7800
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7833 = relay.var("var_7833", dtype = "int64", shape = ())#candidate|7833|()|var|int64
var_7834 = relay.var("var_7834", dtype = "int64", shape = (1, 14, 3))#candidate|7834|(1, 14, 3)|var|int64
bop_7835 = relay.bitwise_xor(var_7833.astype('int64'), var_7834.astype('int64')) # shape=(1, 14, 3)
bop_7838 = relay.add(bop_7835.astype('float64'), relay.reshape(var_7834.astype('float64'), relay.shape_of(bop_7835))) # shape=(1, 14, 3)
uop_7843 = relay.asin(var_7834.astype('float32')) # shape=(1, 14, 3)
output = relay.Tuple([bop_7838,uop_7843,])
output2 = relay.Tuple([bop_7838,uop_7843,])
func_7847 = relay.Function([var_7833,var_7834,], output)
mod['func_7847'] = func_7847
mod = relay.transform.InferType()(mod)
mutated_mod['func_7847'] = func_7847
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7847_call = mutated_mod.get_global_var('func_7847')
var_7849 = relay.var("var_7849", dtype = "int64", shape = ())#candidate|7849|()|var|int64
var_7850 = relay.var("var_7850", dtype = "int64", shape = (1, 14, 3))#candidate|7850|(1, 14, 3)|var|int64
call_7848 = func_7847_call(var_7849,var_7850,)
output = call_7848
func_7851 = relay.Function([var_7849,var_7850,], output)
mutated_mod['func_7851'] = func_7851
mutated_mod = relay.transform.InferType()(mutated_mod)
const_7956 = relay.const([[[3,3,-8],[3,5,-2],[-5,-2,-9],[-6,-8,-5],[-5,-7,6]],[[-3,2,2],[-1,3,-2],[-2,4,-7],[-6,9,6],[-4,10,10]],[[-3,-4,8],[-6,2,8],[2,9,4],[10,1,-8],[3,5,-5]],[[-1,9,3],[5,8,-7],[-9,6,7],[-6,-2,6],[3,1,-5]],[[7,5,5],[-3,7,6],[-8,5,5],[-6,8,-9],[7,6,-1]],[[6,-10,4],[-9,6,8],[2,-6,-4],[10,3,9],[4,3,-5]],[[2,-4,4],[-6,5,-1],[-5,-3,-9],[-4,-6,-8],[-9,10,-2]],[[-8,-6,-5],[-10,-3,4],[-10,-6,-9],[-7,-5,10],[-9,-6,2]],[[-3,10,-5],[-10,-7,-2],[9,-9,-2],[-2,-3,-5],[2,3,10]],[[-6,10,-2],[5,1,-9],[5,2,2],[4,6,-5],[-10,4,7]],[[-1,-9,-2],[-5,5,9],[7,-1,-7],[7,-9,9],[-4,2,-2]],[[-4,-3,3],[3,2,-2],[-3,6,9],[7,5,7],[-9,-4,-10]],[[10,-9,-4],[8,-10,7],[-3,10,2],[-3,3,4],[-3,-2,-4]],[[3,-6,-8],[-7,-2,-1],[7,-7,3],[6,10,-7],[1,9,-9]],[[8,10,-6],[-8,7,8],[-9,1,-3],[7,2,9],[4,-1,5]],[[-8,2,9],[-6,-9,-9],[8,3,3],[-4,5,10],[7,-4,-6]]], dtype = "uint64")#candidate|7956|(16, 5, 3)|const|uint64
var_7957 = relay.var("var_7957", dtype = "uint64", shape = (16, 5, 3))#candidate|7957|(16, 5, 3)|var|uint64
bop_7958 = relay.maximum(const_7956.astype('uint64'), relay.reshape(var_7957.astype('uint64'), relay.shape_of(const_7956))) # shape=(16, 5, 3)
const_7969 = relay.const([[[6,-1,-7],[-1,5,-9],[-10,3,-9],[2,4,-8],[-7,8,-8]],[[6,-5,7],[9,10,-2],[10,2,-6],[4,10,5],[6,8,9]],[[-1,10,-3],[-5,6,8],[-8,10,10],[2,5,3],[-9,-3,5]],[[3,-7,1],[9,-4,-3],[3,-9,-1],[10,-4,-7],[-4,-5,1]],[[8,-7,6],[-5,-6,-10],[-1,10,7],[-10,7,1],[-8,10,3]],[[-7,-7,8],[-4,8,3],[-9,-10,-6],[-2,-5,8],[-5,-2,-2]],[[-6,10,3],[7,-2,-7],[3,-1,7],[-10,-2,8],[-1,-6,7]],[[2,9,9],[9,-9,-2],[-5,-4,-8],[2,8,2],[-3,10,-10]],[[1,4,-3],[10,-2,-2],[-7,9,-3],[-10,4,-10],[7,-1,-7]],[[8,4,-6],[7,-8,6],[3,-9,7],[-9,9,-7],[2,-2,-3]],[[-6,5,-2],[-7,-8,10],[-7,1,7],[-9,5,10],[5,-7,4]],[[8,-8,-8],[-5,-1,-1],[10,4,-3],[-9,7,-10],[-5,-8,-4]],[[2,-2,4],[-3,6,3],[-5,-5,-2],[1,-1,-5],[-7,8,5]],[[-8,3,-7],[2,5,4],[-5,-10,-9],[9,6,-8],[2,3,3]],[[-1,7,2],[10,-6,6],[-4,-8,-1],[7,-6,-3],[5,-2,-5]],[[-8,-5,-2],[-1,-5,-1],[6,1,-10],[-10,4,1],[10,5,4]]], dtype = "uint64")#candidate|7969|(16, 5, 3)|const|uint64
bop_7970 = relay.power(var_7957.astype('float32'), relay.reshape(const_7969.astype('float32'), relay.shape_of(var_7957))) # shape=(16, 5, 3)
func_7319_call = mod.get_global_var('func_7319')
func_7321_call = mutated_mod.get_global_var('func_7321')
var_7975 = relay.var("var_7975", dtype = "uint32", shape = (6, 44))#candidate|7975|(6, 44)|var|uint32
call_7974 = relay.TupleGetItem(func_7319_call(relay.reshape(var_7975.astype('uint32'), [264,])), 2)
call_7976 = relay.TupleGetItem(func_7321_call(relay.reshape(var_7975.astype('uint32'), [264,])), 2)
uop_7977 = relay.atanh(var_7957.astype('float64')) # shape=(16, 5, 3)
var_7982 = relay.var("var_7982", dtype = "uint64", shape = (16, 5, 3))#candidate|7982|(16, 5, 3)|var|uint64
bop_7983 = relay.equal(var_7957.astype('bool'), relay.reshape(var_7982.astype('bool'), relay.shape_of(var_7957))) # shape=(16, 5, 3)
bop_7987 = relay.greater_equal(const_7969.astype('bool'), call_7974.astype('bool')) # shape=(16, 5, 3)
bop_7990 = relay.greater_equal(const_7969.astype('bool'), call_7976.astype('bool')) # shape=(16, 5, 3)
uop_7996 = relay.cos(uop_7977.astype('float32')) # shape=(16, 5, 3)
var_7999 = relay.var("var_7999", dtype = "float32", shape = (16, 5, 3))#candidate|7999|(16, 5, 3)|var|float32
bop_8000 = relay.add(uop_7996.astype('float64'), relay.reshape(var_7999.astype('float64'), relay.shape_of(uop_7996))) # shape=(16, 5, 3)
output = relay.Tuple([bop_7958,bop_7970,var_7975,bop_7983,bop_7987,bop_8000,])
output2 = relay.Tuple([bop_7958,bop_7970,var_7975,bop_7983,bop_7990,bop_8000,])
func_8004 = relay.Function([var_7957,var_7975,var_7982,var_7999,], output)
mod['func_8004'] = func_8004
mod = relay.transform.InferType()(mod)
mutated_mod['func_8004'] = func_8004
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8004_call = mutated_mod.get_global_var('func_8004')
var_8006 = relay.var("var_8006", dtype = "uint64", shape = (16, 5, 3))#candidate|8006|(16, 5, 3)|var|uint64
var_8007 = relay.var("var_8007", dtype = "uint32", shape = (6, 44))#candidate|8007|(6, 44)|var|uint32
var_8008 = relay.var("var_8008", dtype = "uint64", shape = (16, 5, 3))#candidate|8008|(16, 5, 3)|var|uint64
var_8009 = relay.var("var_8009", dtype = "float32", shape = (16, 5, 3))#candidate|8009|(16, 5, 3)|var|float32
call_8005 = func_8004_call(var_8006,var_8007,var_8008,var_8009,)
output = call_8005
func_8010 = relay.Function([var_8006,var_8007,var_8008,var_8009,], output)
mutated_mod['func_8010'] = func_8010
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5690_call = mod.get_global_var('func_5690')
func_5691_call = mutated_mod.get_global_var('func_5691')
call_8022 = relay.TupleGetItem(func_5690_call(), 1)
call_8023 = relay.TupleGetItem(func_5691_call(), 1)
func_790_call = mod.get_global_var('func_790')
func_793_call = mutated_mod.get_global_var('func_793')
var_8037 = relay.var("var_8037", dtype = "float64", shape = (135,))#candidate|8037|(135,)|var|float64
call_8036 = func_790_call(relay.reshape(var_8037.astype('float64'), [15, 3, 3]))
call_8038 = func_790_call(relay.reshape(var_8037.astype('float64'), [15, 3, 3]))
func_7500_call = mod.get_global_var('func_7500')
func_7508_call = mutated_mod.get_global_var('func_7508')
const_8069 = relay.const([6.371282,-4.293274,-1.698579,-2.530189,-0.286216,-8.121918,-9.374595,6.997504,-7.904398,9.266375,-1.429367,-0.547564,-5.131371,-6.858731,-9.387103,3.810821,-6.229530,-2.905248,2.770849,-1.219076,6.271317,1.224130,4.862432,-3.543177,7.000313,0.367264,-2.012424,1.868368,-0.273005,-1.803926,-4.573280,-1.462004,-2.260934,7.073351,0.510207,1.802753,3.138512,-0.346659,-6.535288,-0.289969,-5.158385,5.807533,8.322927,-9.283647,4.212435,-6.192025,-7.002416,-5.376981,3.746280,-6.230785,-0.117482,8.796304,-4.719973,-4.949646,-3.648207,-0.073292,-0.521378,0.846579,-0.287480,7.100314,1.583464,0.113041,-0.335800,-7.274604,-2.542181,1.686634,-9.314531,-0.043041,-5.538609,0.287552,7.031532,-8.882084,-6.750723,0.689795,1.864693,-8.030758,-6.917367,-9.442210,3.363171,-9.850780,4.238819,-9.434062,3.500270,7.933170,4.034198,-8.101852,-9.406479,1.613310,9.684024,-1.244660,5.254505,1.191251,-4.382210,8.206152,-6.020026,3.837384,9.363399,1.183471,-7.579157,-4.626932,-2.377758,-9.454384,2.049900,6.006130,-2.226104,7.949321,-3.438162,1.717339,-4.949830,-8.647680,9.232530,2.731388,-2.879164,3.460620,8.144390,-8.802261,-1.861948,-2.322644,-3.327703,-3.513096,3.071193,1.263738,-6.758683,2.955360,5.820912,7.421041,3.837518,1.482147,-2.519670,8.556684,-9.414117,1.021531,-8.912930,0.331141,7.239192,-9.015578,1.700328,-1.257444,-8.957234,1.409846,4.224271,-1.832731,5.607707,-9.899393,-3.660473,4.817660,-4.248620,-9.654139,-8.305209,8.192994,9.421748,8.003096,8.687910,0.154637,9.684427,1.736899,5.249292,0.344031,6.993966,-2.011599,5.013044,0.511664,-6.702678,9.786610,4.608808,-7.189904,-2.788940,7.527457,2.060133,0.296180,8.431296,-6.817779,6.381762,0.610459,1.579761,-8.971549,7.159801,-3.526945,4.996219,0.033887,3.764599,-0.627704,9.168125,0.986862,-9.963881,2.950819,-6.610359,-6.020458,3.393736,-1.537190,-2.553201,-6.182550,-4.358274,4.799254,-7.065618,-6.901604,0.646652,0.900409,5.382359,4.010661,8.151185,7.202050,-5.322999,8.775088,-0.084506,3.711647,7.483159,-0.514297,-3.286185,5.861466,-8.032308,-0.593584,-0.375306,-4.869158,1.966647,9.884012,-3.393461,-9.146646,2.374664,1.682366,6.549326,-4.704652,-2.428523,5.554651,-8.100186,7.854318,-1.896470,-0.461197,1.630716,-3.331509,0.160802,1.158098,7.147201,-0.750180,-0.583732,-4.626951,-4.347698,-6.443059,0.289717,-0.404573,-0.292221,5.920954,6.914138,-0.281253,-5.005237,1.142841,-7.164013,-0.718745,-5.347394,-0.312369,-4.372868,3.369614,0.244550,6.232081,8.276072,0.631100,4.343801,-8.421151,-5.797366,4.569108,-1.112698,-8.201935,4.002549,-5.558092,-8.561756,-1.942509,0.071541,5.176751,4.853591,4.364362,-7.717345,3.034421,1.757684,6.896520,-6.657968,3.906893,1.186276,4.335065,-9.949096,5.960569,8.485455,1.825942,9.768544,5.427796,2.388548,5.556430,4.746555,3.304213,-8.654243,1.927430,4.258493,6.663035,-7.993463,8.585944,-4.852264,1.437752,4.920077,-9.675784,-3.827786,5.383749,4.226658,3.437191,6.734374,8.229255,7.900584,-5.156891,0.302763,-2.915815,3.222223,-7.670001,-7.257041,8.679839,-9.406947,-3.587459,0.377103,-3.195625,-2.860216,-2.682878,-7.495078,1.208574,-8.353217,-1.833901,-5.199186,7.012995,9.012674,0.801729,-3.720522,9.088676,8.120805,4.906048,2.106085,2.134117,7.670546,-7.357316,8.305584,-4.505482,2.449747,-6.282790,2.306713,5.242733,2.891533,-4.752860,1.235643,3.771361,2.911104,-1.744459,-4.570460,-0.013231,7.943143,-6.669390,-5.875778,-4.670655,6.181311,8.677713,-6.608293,3.689761,-2.751596,1.586134,2.807891,-5.415504,8.916532,-4.637041,-9.995676,-2.439407,1.062422,-6.466779,4.016471,1.629013,1.947172,0.714182,-1.039387,-0.071247,-7.611584,-2.806831,-6.796568,-4.371624,7.298758,7.595774,0.269499,6.009202,-5.435297,-2.801224,-0.195042,2.414811,3.214482,-5.534506,5.049092,-9.975950,-0.985522,-2.710792,1.647876,8.252777,4.952133,-0.654439,-9.601650,5.026029,7.930355,-9.781302,8.596331,-6.144381,-6.690458,-3.839255,4.937351,1.039296,-9.033217,-9.539900,-3.390173,-1.008867,-3.934913,-8.173956,8.561697,-3.863704,6.396372,-9.394492,-6.078129,2.640969,0.886898,-2.662849,-5.126354,2.095730,5.471345,-0.513374,1.764224,6.061344,0.689101,-3.076153,6.626448,-6.126568,6.934204,-0.415131,5.653708,-1.030909,6.705056,6.109856,-1.081096,-1.605971,-8.866997,3.671702,-0.918924,7.145430,-0.422149,-9.415858,-2.885154,-7.038994,6.422824,1.553703,5.961001,-1.456823,9.591656,-9.451763,-8.645566,4.629697,-6.233581,-9.895359,-5.037819,-6.145214,1.265713,-9.603091,6.733605,4.033504,8.497912,4.680610,-1.342348,-1.925657,9.631955,0.022055,6.205083,-2.136007,6.172346,-0.150880,2.146362,-0.074002,9.504573,-7.897004,6.583566,-2.634700,6.152829,2.454135,0.042031,6.466429,3.672603,-6.990245,0.450282,-6.247623,6.711064,-1.999048,9.318258,2.068714,-0.016442,-3.022890,0.182284,-6.348493,-1.286025,-7.910961,7.148243,1.258993,-4.503709,-0.035857,-2.039172,-9.514142,9.837884,-4.547958,1.960634,-7.859083,-0.944774,6.864211,3.233222,-8.691662,-0.644865,4.230219,-6.001707,-6.507457,-5.139712,-6.156945,6.585269,-3.503967,-3.102814,4.853591,-3.265882,9.201306,-3.141771,-6.462633,-3.730350,-7.117606,9.822783,9.630761,-5.722720,-4.719232,-5.960737,6.431764,7.101938,-6.679787,6.026163,8.503294,1.351561,-4.657990,5.443842,2.200262,1.083246,-0.234716,3.128113,-7.529446,1.519242,-3.342979,8.220253,7.967463,4.197729,-2.623793,-6.547945,-7.213659,-4.164302,1.519339,3.322831,-2.108051,-2.401768,6.431811,-7.593394,0.561285,-5.090378,2.870198,-6.897257,-8.673753,-0.355988,-8.208775,-5.034441,9.406460,2.747170,9.935735,4.051795,5.868977,-0.368211,-2.172026,-4.439310,2.301678,0.004083,-0.304425,3.924238,-9.659953,-2.835793,-8.069790,4.389364,2.486808,6.062311,-4.308215,-7.708509,-7.676674,-7.827498,0.784825,1.607075,-5.722602,4.121298,-5.242453,6.834764,6.260755,2.282053,8.826471,5.867809,0.402507,2.445579,8.276301,1.753970,-6.614309,-3.047967,-0.597704,-4.302447,6.467525,6.116897,7.355579,-8.868088,-1.545894,-5.918882,-0.031389,8.674109,-1.171734,9.227683,-3.338967,-3.176886,9.246376,0.835073,-7.516432,-1.532921,7.238758,0.887982,-8.230257,4.050323,4.837346,-6.495355,5.380320,2.525013,-4.187893,-4.375418,6.690570,-5.148500,6.560195,-1.825228,7.177895,1.344003,-6.247144,1.478439,-1.045879,-7.460173,3.046463,-4.292392,-7.944547,-3.483076,-9.095562,5.062255,4.008439,-5.389163,5.098844,-6.514420,7.847241,-8.265684,-2.122253,0.914609,-9.603233,-8.354129,-4.822953,0.668394,-7.246705,-2.501653,-2.267566,-8.121334,5.601947,-7.951185,4.798858,4.045210,1.503410,4.874428,-2.894307,-9.757557,-0.070562,-1.236469,0.809133,8.375374,5.248843,1.956770,4.605208,-8.115570,-2.498360,-6.171956,0.897313,7.062749,0.477363,3.552452,0.530436,-7.938813,-4.669083,-3.671556,-4.913176,-0.337300,2.072324,0.571289,8.708959,8.938432,7.947935,-8.841617,-8.212191,3.985358,-3.787354,0.753267,-3.625794,3.165258,-1.359276,5.651196,7.608236,-4.020260,4.530145,8.816907,5.262572,-4.210277,-1.452745,-0.987879,-9.724870,-7.355899,-9.771881,-3.186741,-2.860545,9.389205,-0.762728,6.329262,-2.172864,-9.935032,-9.909144,4.558122,6.150212,-0.014732,-7.778214,-7.606195,-9.031262,4.449316,-2.644457,9.561919,4.556359,7.509247,3.790544,1.837578,-8.930890,7.773018,6.063662,6.647511,1.194137,1.754210,-3.943818,-6.779317,-1.317480,2.390650,-4.625439,0.357195,3.017376,2.145213,-5.510840,6.170996,-6.078388,1.092045,3.971226,-2.105287,-0.579464,-5.589835,6.638989,3.549972,-9.596818,-4.364071,4.615665,-4.031765,-6.935957,-9.244583,-3.717256,-5.446477,-0.017203,-3.296560,-9.374788,-8.458425,-6.930431,3.798483,-3.600949,-7.592900,2.017802,7.085936,-4.284045,0.758930,2.123157,4.826042,7.101041,-6.056363,1.032721,0.060026,-4.489247,-6.367828,-4.170864,-9.221984,-2.296411,8.951845,-3.267541,8.984710,-3.836460,4.642345,-6.723867,4.793765,-4.777866,7.214955,9.832447,2.329197,8.243063,-1.055968,5.513041,-3.553548,4.545397,9.096578,-4.811071,3.996428,-4.806471,-3.302940,1.900352,-4.800654,8.944641,-5.871825,1.561322,-5.270824,5.615323,-4.575062,-6.362452,2.518936,7.666021,3.791913,3.435946,-9.531232,7.427089,-4.073354,4.088161,0.885165,-0.370208,1.558758,0.957780,-9.408879,-8.808485,-2.869357,6.274723,2.489342,-5.578455,-3.734308,9.629171,9.816545,1.260771,7.934697,0.864672,-3.434237,-6.114943,2.794942,8.295284,0.834373,-9.902745,-0.620575,3.708124,-4.851658,-8.648843,4.597231,-3.462998,6.833494,-1.865765,-5.585678,2.254732,0.131083,-8.909827,8.533785,3.696495,2.622703,-9.333992,1.374587,7.555655,-4.332705,6.143684,8.798903,-9.865410,8.737289,-4.411734,-4.317937,-6.795312,2.272436,-9.883801,9.718772,5.058144,-9.726139,-0.840320,1.862482,0.104722,-4.466995,1.255603,-3.359184,-8.869908,-0.530766,9.519168,-1.070892,6.453316,-7.328392,-5.491262,5.977004,6.394506,-5.143813,2.424027,1.968246,7.912475,6.545970,-0.097745,-8.543987,-3.212229,2.403964,-5.523452,7.216395,4.071078,7.420988,1.420363,-3.106551,-3.477778,7.965421,-0.833886,8.100783,-0.758638,6.208026,-0.357546,1.015738,-0.328363,7.145132,-7.752824,-3.242240,-2.923373,4.766207,-6.403903,-2.043155,-5.631939,3.020944,9.311523,-9.320024,4.426145,-5.163115,-2.751563,-1.979594,-4.753246,3.886222,8.483978,-7.608745,4.915203,9.335813,6.573200,3.712607,9.088225,7.716025,8.362786,-8.059550,0.231074,-5.709844,-2.910700,-2.923033,-0.593670,5.867603,-3.133076,-2.246852,-5.825352,8.476397,7.413651,0.350203,4.826195,7.745251,9.305480,-5.218557,-5.327130,-6.403046,3.308109,6.718741,-1.318620,2.505441,0.558506,-2.656238,-2.834240,5.080987,-4.940098,-9.247693,4.009493,-9.170836,-9.101906,5.592126,-9.066160,3.244517,1.676904,9.527442,-9.667376,-9.907688,-5.367105,2.838130,-8.907075,6.163261,8.710100,7.487005,9.184920,8.547397,-9.829946,1.169955,-6.898756,-5.885550,8.706825,2.889130,5.562377,9.635534,9.469934,-9.636659,-0.694982,-8.245047,6.328336,-2.680838,-4.424643,-8.659947,0.012065,0.305933,9.446974,0.446862,4.057721,-9.785397,-2.708163,3.824086,-7.249524,3.522253,2.948426,-6.760128,9.132450,8.909627,5.051587,-1.519365,3.148980,-9.671885,-7.792013,-2.902694,1.906374,-1.316638,-2.740307,1.923283,1.406295,3.813998,-3.663611,9.017145,2.807195,0.280738,9.395942,8.758715,0.372598,2.545921,4.013454,-6.518723,-8.960288,-0.653324,-9.034607,3.781784,-0.056045,-2.647903,-8.885795,2.184082,-4.988247,-7.734750,-0.850584,0.451990,-5.332760,2.955249,-7.338041,-5.317503,-6.726455,5.342723,-0.821481,-2.037095,-3.775318,6.092392,6.694264,-1.989053,-5.469675,9.898060,-6.371703,-3.371174,2.766875,-8.336102,1.905037,-0.667911,8.582465,-7.850167,-2.716913,-1.707714,9.345678,9.845515,-7.021493,1.489971,2.631393,-2.363749,1.448030,-5.513813,-9.944448,-0.849510,1.086512,-9.277792,-1.999002,-9.361974,0.599450,6.118875,-2.729141,9.029875,-8.037417,6.160890,2.803197,1.110864,3.796479,9.220721,-2.803370,7.639043,-5.101793,-8.834489,0.986483,0.307673,-1.645542,7.503997,-8.171853,6.349703,1.310341,-8.313197,-8.839086,9.076773,1.916067,-6.882034,-4.302713,7.898825,7.423550,-1.502762,-0.347161,6.033812,-5.672544,5.248976,-0.974997,-0.217537,-9.979842,-8.477915,-4.665462,-6.830685,1.211032,-4.248141,-6.133893,-4.768986,7.229268,-2.189116,1.386384,-1.499030,8.415376,-7.805087,3.877230,2.519108,8.171749,-3.829737,-9.403999,2.657993,0.097477,6.076116,3.868569,7.338773,-3.836657,-2.956034,-3.123815,-5.815060,-7.616640,3.045304,5.826162,0.824774,-7.717628,-7.982567,-4.811036,-2.784110,3.214496,-1.759559,-4.830019,-6.749448,4.296045,-9.001078,6.307317,4.953551,2.370299,3.498486,-7.244147,6.945668,2.212536,5.669840,6.300595,3.426213,6.985386,6.419448,-7.133974,5.558182,-1.512013,1.495548,-5.134466,3.674897,1.725193,-9.245950,-5.403563,-3.725059,9.742310,6.437128,-3.758200,-2.504573,-4.659925,5.623293,7.740790,7.091532,-2.380318,9.685143,1.154851,-3.713301,-6.183365,-7.032236,-4.693050,-2.374449,-2.435019,-9.541751,-4.174763,9.522823,-5.184921,0.826582,2.184188,3.163709,1.367815,-8.389431,3.457080,5.430489,3.219705,-0.298807,6.540899,8.114114,3.032195,-7.025047,-3.895696,-1.896930,-7.341046,-3.205382,-5.495814,8.233144,2.079537,2.775289,-9.115817,-4.566367,-6.803724,7.941047,7.950451,-6.819953,-6.456075,-3.215587,-6.504779,5.684269,1.583144,-8.086526,7.323079,0.755937,1.472785,1.991159,-1.172528,7.838715,1.324043,-7.794503,0.253446,0.193068,3.122001,9.289386,-5.762715,-8.915235,-8.699317,-8.700995,-8.184197,-2.960213,-9.298050,9.458493,0.294914,6.434671,3.404073,7.272683,-5.712490,-7.431359,0.539821,7.573810,-8.850998,9.085883,-8.550216,-8.056319,2.272608,-4.050292,-8.507671,-9.751547,-9.648468,-0.828471,3.244389,1.737290,-6.466612,7.145742,4.310662,-1.074255,-9.916876,-9.165549,6.501490,9.113439,-7.753229,-6.041926,0.990073,-8.853002,-7.960515,9.114874,2.355111,-5.195182,-5.670299,7.469250,-4.292605,5.634852,4.243836,-8.136138,-0.692878,6.145738,8.863852,-1.186861,1.080088,8.215341,9.598418,7.805724,8.516431,2.174151,-0.757369,7.251996,-6.130590,5.408372,-0.804466,-8.092144,-5.272673,7.589229,7.499002,-4.938512,0.489694,-3.794711,7.896786,9.345224,9.198439,-6.898504,7.558936,4.133891,5.739327,3.249902,-2.282186,-3.976854,7.925992,-0.738901,7.796414,9.067819,-1.999407,-8.706254,-5.467771,-0.785252,-8.406968,7.334776,-5.022178,6.148159,5.345966,-7.858829,-4.338287,-1.371006,-2.943812,-5.867073,-2.018703,-6.591426,5.877232,-3.647954,-2.521426,-6.151501,1.171544,-6.245014,-7.282847,1.849583,-5.817372,4.246398,9.586392,9.043840,-2.471254,0.511855,6.821313,-5.337329,-1.658492,-6.511700,3.001498,6.907323,-6.508883,9.857191,2.970479,9.935932,-0.938787,-2.309932,-2.081223,6.242365,2.393143,0.089268,0.156476,-8.745596,-9.251670,-3.163084,5.235260,4.827159,-6.601390,-2.548661,3.600508,6.548251,-6.309962,8.219265,2.427544,1.627543,-8.176316,-8.982249,-6.093139,4.231400,2.351286,8.794562,-2.874050,3.271982,5.624084,-7.251171,8.233410,-6.499955,-3.927077,-4.303852,-0.672914,-1.787536,8.020231,-1.322207,5.617471,-7.227693,-3.367347,3.547275,-9.741884,4.799162,-0.641641,5.757973,3.304753,2.397481,9.611756,-1.980486,-7.124876,-5.989280,1.087871,3.954383,5.132350,6.185552,9.211762,-4.793733,7.445703,2.662424,2.336200,5.030516,-4.290987,-2.676074,1.666887,-9.582503,-5.066461,9.219727,0.563735,-9.896316,-9.952300,-4.359967,5.142921,-8.540917,-5.489127,-8.276900,-8.479673,3.215869,5.990908,-7.690227,-1.387570,-6.248596,-7.073317,-8.598616,-5.823908,-0.585445,-0.531069,8.194920,6.383425,6.680530,0.183830,0.156436,4.726846,4.343856,3.326402,3.313939,-3.100015,-0.811619,4.375904,-6.097777,5.564644,6.545022,-2.658253,7.929044,-5.906146,9.675587,2.749426,9.123867,9.558400,9.981467,-0.963273,-1.837253,-1.669311,0.978549,4.316774,2.808143,-0.905642,8.212186,4.781296,-2.723297,0.784639,-6.079109,5.127810,0.775597,-4.962995,9.342443,-9.577945,3.697241,-0.993333,-5.982184,-7.193032,-7.940200,-4.098920,7.359464,6.647570,4.210975,-5.156529,0.332659,7.841289,-0.191408,9.269825,3.364822,-0.827463,-4.455157,7.483317,-2.054973,-4.947484,2.791688,-1.952902,8.087402,-0.334518,-6.376709,-8.554120,-1.536697,3.049824,3.803975,-5.075154,-6.155120,7.809460,8.979307,8.088173,-3.992932,7.286771,9.044610,8.348511,3.366208,9.271669,-9.762694,3.370912,-3.058837,5.528439,9.573727,-8.791784,-5.788517,-5.043519,-5.707114,-1.484319,9.651637,-9.099558,2.083930,6.615755,-7.029109,1.863018,-2.025171,9.394564,1.011235], dtype = "float64")#candidate|8069|(1575,)|const|float64
var_8070 = relay.var("var_8070", dtype = "uint32", shape = ())#candidate|8070|()|var|uint32
const_8071 = relay.const([[-3,8,-8,9,7,10],[9,-7,-4,-3,10,-7],[1,-10,3,-4,9,-6],[8,-8,7,-8,-1,9],[1,4,-8,-4,-10,3],[-4,-2,8,10,5,-2],[-8,-9,5,-6,10,10],[2,-6,-10,-8,8,7],[-7,-4,7,-5,8,5],[1,-2,1,10,7,8],[5,-4,-3,8,10,-2],[-10,1,8,9,-7,-2],[-4,2,8,-9,-5,7],[5,-7,7,-1,4,-3],[10,-6,7,-5,-2,-10],[-6,-5,-5,-8,8,-5],[-5,-2,-2,5,-10,-9],[9,-8,3,-1,-9,10],[9,-4,5,1,-10,1],[9,4,-7,8,8,-4],[4,-10,2,-6,-1,-5],[2,8,-1,3,-7,1],[1,9,-5,-10,8,1],[3,-10,-8,1,-3,1],[10,-5,-1,10,-8,-3],[1,4,-5,-1,4,1],[8,-3,10,6,10,-4],[10,4,2,4,1,3],[5,-2,-5,3,4,-6],[-4,4,-6,4,4,-5],[-5,10,-7,2,4,10],[-7,-3,-1,-7,3,-8],[4,6,-1,-6,10,-4],[8,-10,8,-4,-5,7],[-7,-2,8,9,3,1],[6,2,-3,4,10,4],[6,-6,4,-8,10,1],[-1,1,8,7,9,-2],[4,2,10,4,5,-8],[5,-1,-5,2,-5,-9],[5,6,5,-4,4,5],[-3,1,-10,6,2,-8],[-10,-4,-5,7,-10,4],[1,-4,-8,-8,-9,1],[-5,-3,-6,7,-3,-2],[-5,-10,4,-10,-4,9],[-7,-4,-3,4,-4,6],[-1,-6,3,5,-9,-4],[-9,-7,3,6,2,-4],[7,-6,8,10,4,-4],[-6,-6,3,7,6,-6],[1,-9,-4,-1,-3,-3],[-8,10,1,-10,2,1],[7,7,3,2,-5,-8],[-4,-1,3,-7,9,2],[3,6,-9,1,4,-7],[9,-10,10,5,-6,-10],[2,-1,-7,10,6,-5],[4,10,4,-6,9,-9],[-5,-5,-1,-1,4,-4],[8,1,2,10,-4,6],[8,-10,8,-5,6,-4],[-5,-9,-9,-2,-7,-3],[-10,6,1,-1,4,3],[-3,-6,8,-5,7,2],[5,4,-8,4,8,-2],[-4,8,-4,-3,-1,5],[9,2,2,-1,-9,-2],[2,5,-5,-10,9,10],[-3,10,10,-1,5,-2],[-9,-5,-9,-5,2,2],[-8,10,-2,-9,-1,-9],[6,9,-5,-10,7,-5],[4,-7,2,6,2,5],[6,1,5,-10,9,-4],[-4,1,4,6,-3,-4],[2,5,8,2,-6,-3],[2,-3,5,-7,6,10]], dtype = "int8")#candidate|8071|(78, 6)|const|int8
const_8072 = relay.const([-7,9,-3,3,-9,-8,7,3,-6,-3], dtype = "uint16")#candidate|8072|(10,)|const|uint16
const_8073 = relay.const([True,True,False,False,True,True,False,False,False,True,True,False,True,True,True,True,False,True,True,True,False,True,True,False,True,False,True,False,True,False,False,True,True,False,True,False,False,False,False,False,True,True,False,False,True,True,True,True,True,False,False,True,True,True,False,True,True,True,True,False,True,True,True,False,False,True,True,False,True,True,False,False,True,False,False,False,True,True,True,False,False,True,False,True,False,False,False,True,True,True,True,True,True,True,True,True,False,False,True,True,False,True,True,True,True,True,True,False,False,False,True,False,True,True,False,True,True,False,False,False,False,True,True,True,False,True,False,False,True,True,True,True,False,False,False,True,True,True,True,False,True,False,False,False,True,False,True,False,True,True,True,True,True,False,False,True,True,False,False,True,True,True,False,True,False,True,False,True,False,True,True,False,False,False,False,True,False,False,False,True,True,True,False,False,True,False,False,True,False,False,False,True,True,False,False,True,True,False,True,False,False,False,False,False,False,False,True,True,False,True,False,False,False,True,False,False,True,False,True,False,False,True,True,False,True,False,True,True,False,False,True,False,True,True,False,True,True,False,False,False,True,True,False,False,False,False,False,True,True,True,True,True,False,True,True,True,True,True,False,True,True,True,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,True,True,True,False,True,True,True,False,False,False,True,True,False,True,False,False,True,True,False,True,True,True,False,True,True,True,True,True,True,True,True,False,True,False,False,False,True,False,False,True,False,False,False,False,True,True,False,False,False,True,False,True,False,False,False,True,True,True,False,False,False,True,False,True,True,True,True,False,True,False,True,True,False,False,False,True,True,False,True,True,True,True,False,True,True,False,False,True,True,False,True,True,True,False,True,False,True,False,False,False,False,False,True,False,False,True,True,True,False,True,False,True,False,False,True,False,False,True,True,True,False,False,False,True,False,True,False,True,False,False,True,False,False,True,True,False,False,False,True,False,True,True,False,False,True,True,False,True,False,True,False,False,True,True,False,False,False,False,True,False,False,True,True,True,False,False,True,False,False,True,True,False,False,True,False,False,False,False,True,False,True,False,True,False,True,True,False,True,True,False,False,True,True,True,False,True,True,False,True,True,True,False,True,True,True,True,True,True,True,True,False,False,True,True,True,False,False,True,True,True,True,True,False,False,False,True,True,True,True,True,True,False,True,False,True,True,False,True,False,True,False,False,False,True,True,True,True,True,False,False,False,False,False,True,False,False,False,False,False,True,True,True,True,False,True,False,True,True,True,False,True,True,False,True,False,False,False,True,True,False,False,False,False,False,True,True,False,True,True,False,False,False,True,True,False,True,True,False,False,True,False,True,False,False,False,True,False,False,False,False,True,False,False,True,False,True,False,True,False,True,True,False,True,True,True,False,False,False,False,False,True,False,False,False,False,False,True,True,True,True,True,False,False,True,True,False,False,False,True,False,True,True,False,True,False,True,True,False,True,True,False,True,True,False,True,True,True,False,False,False,True,True,False,True,False,True,False,False,True,True,False,True,False,False,False,False,True,True,False,True,False,True,False,True,True,True,False,False,True,True,False,False,False,False,False,True,False,False,True,True,True,False,False,False,False,False,False,False,True,True,True,True,False,True,False,True,False,True,False,True,False,False,True,False,True,True,True,True,True,True,False,True,True,True,True,True,True,True,True,True,False,False,False,False,True,True,False,True,False,False,False,False,False,False,False,True,True,False,False,True,True,True,False,False,False,True,True,True,False,True,False,True,True,True,True,True,False,True,False,False,True,True,False,False,True,False,True,False,False,False,True,True,True,True,True,True,False,True,False,True,False,True,False,True,False,True,False,False,True,True,False,False,False,False,False,True,False,False,True,True,False,True,False,True,False,False,False,True,True,False,False,True,True,False,False,True,True,True,True,False,False,True,True,False,True,True,True,False,True,False,True,True,True,True,False,False,True,False,True,False,True,True,True,False,True,False,False,False,True,True,True,True,True,False,True,False,True,False,False,True,False,True,False,False,True,True,False,False,True,True,True,False,False,False,True,True,False,True,True,True,False,False,False,True,False,True,False,False,True,False,True,False], dtype = "bool")#candidate|8073|(900,)|const|bool
const_8074 = relay.const([[2,-7],[-9,5],[-8,2],[8,-6],[8,10],[-1,9],[-7,4],[-10,7],[10,-8],[2,9],[-8,7],[1,-8],[-1,4],[9,2],[4,4],[-6,-5],[-5,-7],[8,7],[7,10],[7,8],[8,-4],[3,-1],[-9,2],[-7,2],[-2,9],[5,4],[9,-1],[-3,6],[8,8],[-5,-10],[-3,-2],[1,-2],[-4,-3],[-8,2],[-2,-6],[9,6],[-4,-1],[-3,-5],[-5,-9],[-10,-1],[4,5],[10,1],[-8,7],[-9,-7],[9,-3],[-2,1],[5,6],[-2,2],[-9,-10],[-4,-1]], dtype = "uint16")#candidate|8074|(50, 2)|const|uint16
call_8068 = relay.TupleGetItem(func_7500_call(relay.reshape(const_8069.astype('float64'), [15, 15, 7]), relay.reshape(var_8070.astype('uint32'), []), relay.reshape(const_8071.astype('int8'), [468,]), relay.reshape(const_8072.astype('uint16'), [10,]), relay.reshape(const_8073.astype('bool'), [3, 300]), relay.reshape(const_8074.astype('uint16'), [100,]), ), 8)
call_8075 = relay.TupleGetItem(func_7508_call(relay.reshape(const_8069.astype('float64'), [15, 15, 7]), relay.reshape(var_8070.astype('uint32'), []), relay.reshape(const_8071.astype('int8'), [468,]), relay.reshape(const_8072.astype('uint16'), [10,]), relay.reshape(const_8073.astype('bool'), [3, 300]), relay.reshape(const_8074.astype('uint16'), [100,]), ), 8)
bop_8076 = relay.power(const_8071.astype('float64'), var_8070.astype('float64')) # shape=(78, 6)
output = relay.Tuple([call_8022,call_8036,var_8037,call_8068,const_8069,const_8072,const_8073,const_8074,bop_8076,])
output2 = relay.Tuple([call_8023,call_8038,var_8037,call_8075,const_8069,const_8072,const_8073,const_8074,bop_8076,])
func_8079 = relay.Function([var_8037,var_8070,], output)
mod['func_8079'] = func_8079
mod = relay.transform.InferType()(mod)
var_8080 = relay.var("var_8080", dtype = "float64", shape = (135,))#candidate|8080|(135,)|var|float64
var_8081 = relay.var("var_8081", dtype = "uint32", shape = ())#candidate|8081|()|var|uint32
output = func_8079(var_8080,var_8081,)
func_8082 = relay.Function([var_8080,var_8081,], output)
mutated_mod['func_8082'] = func_8082
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6729_call = mod.get_global_var('func_6729')
func_6731_call = mutated_mod.get_global_var('func_6731')
call_8115 = relay.TupleGetItem(func_6729_call(), 0)
call_8116 = relay.TupleGetItem(func_6731_call(), 0)
var_8131 = relay.var("var_8131", dtype = "float64", shape = (540,))#candidate|8131|(540,)|var|float64
bop_8132 = relay.not_equal(call_8115.astype('bool'), relay.reshape(var_8131.astype('bool'), relay.shape_of(call_8115))) # shape=(540,)
bop_8135 = relay.not_equal(call_8116.astype('bool'), relay.reshape(var_8131.astype('bool'), relay.shape_of(call_8116))) # shape=(540,)
func_1419_call = mod.get_global_var('func_1419')
func_1423_call = mutated_mod.get_global_var('func_1423')
const_8154 = relay.const([False,True,True,False,True,False,False,True,True,True,True,True,False,True,True,False,False,False,False,True,False,False,False,False,True,True,False,False,False,False,False,True,False,True,True,True,False,True,False,True,False,False,False,True,True,True,True,True,True,True,False,True,True,True,True,True,False,True,True,False,False,True,True,False,True,True,True,True,False,False,False,True,False,False,False,True,True,True,False,False,True,False,True,False,True,False,True,True,False,False,False,False,False,True,False,True,False,True,False,True,True,False,False,True,False,False,False,True,True,False,True,False,True,False,True,False,False,False,False,False,True,False,False,True,True,False,False,False,False,False,True,True,False,True,True,False,True,True,True,False,False,False,True,True,False,False,True,False,False,True,True,True,True,True,False,True,False,False,True,False,False,False,True,False,True,False,False,False,False,True,False,False,True,True,True,True,True,False,False,False,False,True,True,True,False,False,False,False,False,True,False,True,True,False,True,False,False,False,False,False,True,True,False,True,False,True,False,False,False,False,False,False,True,True,True,False,True,False,False,False,True,True,True,True,True,False,True,True,False,False,False,False,True,False,True,True,False,True,True,False,False,True,False,True,True,True,True,False,True,False,False,True,True,True,False,False,False,True,True,False,True,True,False,False,False,True,False,False,True,True,False,True,True,False,False,False,True,False,False,True,False,True,False,True,False,False,True,False,True,False,True,True,False,True,True,False,True,True,False,False,True,False,True,False,False,True,False,True,True,False,False,True,True,False,False,False,False,True,False,False,False,True,True,False,True,False,False,False,False,False,False,True,False,True,True,False,False,True,True,False,True,False,True,True,False,False,True,True,True,True,True,True,True,False,True,False,False,True,False,False,True,False,True,True,True,False,True,True,True,True,True,True,True,True,False,True,True,True,False,False,False,True,False,True,True,True,True,False,True,True,False,False,True,False,False,False,False,True,False,False,False,True,True,True,False,True,True,True,False,True,False,False,True,False,False,False,True,True,False,False,True,True,True,False,True,True,True,True,False,True,True,True,False,False,False,True,True,True,False,True,True,False,False,False,False,False,False,False,True,True,False,False,False,True,True,True,False,False,False,True,True,False,False,True,False,False,False,False,False,True,True,True,True,True,True,False,True,True,False,True,False,False,True,False,False,False,True,False,False,False,True,True,False,True,True,False,False,True,False,False,False,False,True,False,True,False,False,True,True,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,True,False,True,True,True,True,False,True,True,True,False,True,True,False,True,True,True,False,True,True,True,True,True,True,True,True,True,False,True,True,True,False,True,False,True,False,True,False,True,False,True,False,True,True,False,False,False,True,False,True,False,True,False,True,True,False,False,False,False,False,False,True,False,True,True,False,False,False,False,True,False,True,True,True,False,False,False,False,True,False,True,False,False,False,True,True,False,False,True,False,False,True,False,False,True,True,False,True,False,False,False,False,False,False,False,False,False,False,True,True,False,False,True,False,False,True,True,False,True,True,True,True,False,True,True,True,False,False,False,False,False,True,True,False,True,True,True,True,True,False,False,True,False,False,False,True,True,True,True,False,False,False,True,True,True,False,False,False,False,True,False,True,False,True,True,True,False,False,False,True,False,False,True,True,False,True,False,True,False,True,True,True,False,False,False,True,True,False,True,True,True,False,False,True,True,False,False,False,False,False,True,True,True,False,False,True,True,False,True,False,True,False,True,True,True,True,True,False,True,False,True,True,False,False,False,False,False,True,False,False,True,True,True,False,False,True,False,True,True,True,True,True,True,False,False,False,True,True,False,True,False,False,False,False,False,False,False,False,True,False,False,True,False,False,True,False,True,True,True,True,False,True,False,False,True,False,False,True,False,True,False,False,True,False,False,True,False,True,True,False,True,True,True,True,True,False,True,True,False,True,False,False,False,False,False,True,False,True,False,False,False,False,False,True,False,True,False,True,False,True,True,True,False,False,True,False,False,False,True,False,True,True,True,True,True,True,True,True,False,True,False,False,False,False,True,False,True,True,True,True,False,False,True,True,False,False,True,True,False,False,True,False,True,False,True,False,False,False,True,False,False], dtype = "bool")#candidate|8154|(900,)|const|bool
call_8153 = relay.TupleGetItem(func_1419_call(relay.reshape(const_8154.astype('bool'), [12, 15, 5]), relay.reshape(const_8154.astype('bool'), [12, 15, 5]), ), 0)
call_8155 = relay.TupleGetItem(func_1423_call(relay.reshape(const_8154.astype('bool'), [12, 15, 5]), relay.reshape(const_8154.astype('bool'), [12, 15, 5]), ), 0)
output = relay.Tuple([bop_8132,call_8153,const_8154,])
output2 = relay.Tuple([bop_8135,call_8155,const_8154,])
func_8166 = relay.Function([var_8131,], output)
mod['func_8166'] = func_8166
mod = relay.transform.InferType()(mod)
mutated_mod['func_8166'] = func_8166
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8167 = relay.var("var_8167", dtype = "float64", shape = (540,))#candidate|8167|(540,)|var|float64
func_8166_call = mutated_mod.get_global_var('func_8166')
call_8168 = func_8166_call(var_8167)
output = call_8168
func_8169 = relay.Function([var_8167], output)
mutated_mod['func_8169'] = func_8169
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4709_call = mod.get_global_var('func_4709')
func_4710_call = mutated_mod.get_global_var('func_4710')
call_8176 = func_4709_call()
call_8177 = func_4709_call()
func_3342_call = mod.get_global_var('func_3342')
func_3346_call = mutated_mod.get_global_var('func_3346')
const_8189 = relay.const([[7],[-2],[8],[-2],[-4],[-7],[2],[3],[2],[-5]], dtype = "uint16")#candidate|8189|(10, 1)|const|uint16
var_8190 = relay.var("var_8190", dtype = "uint16", shape = (100,))#candidate|8190|(100,)|var|uint16
call_8188 = relay.TupleGetItem(func_3342_call(relay.reshape(const_8189.astype('uint16'), [10,]), relay.reshape(var_8190.astype('uint16'), [100,]), ), 1)
call_8191 = relay.TupleGetItem(func_3346_call(relay.reshape(const_8189.astype('uint16'), [10,]), relay.reshape(var_8190.astype('uint16'), [100,]), ), 1)
output = relay.Tuple([call_8176,call_8188,const_8189,var_8190,])
output2 = relay.Tuple([call_8177,call_8191,const_8189,var_8190,])
func_8193 = relay.Function([var_8190,], output)
mod['func_8193'] = func_8193
mod = relay.transform.InferType()(mod)
var_8194 = relay.var("var_8194", dtype = "uint16", shape = (100,))#candidate|8194|(100,)|var|uint16
output = func_8193(var_8194)
func_8195 = relay.Function([var_8194], output)
mutated_mod['func_8195'] = func_8195
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8213 = relay.var("var_8213", dtype = "bool", shape = (14, 12, 3))#candidate|8213|(14, 12, 3)|var|bool
const_8214 = relay.const([[[True,False,False],[True,True,False],[True,False,False],[False,False,False],[True,False,False],[True,False,False],[True,False,True],[True,True,True],[False,False,False],[True,False,False],[False,True,True],[False,False,False]],[[False,False,False],[True,False,False],[True,False,True],[False,True,True],[False,False,True],[False,True,False],[True,True,False],[False,True,True],[False,True,False],[True,True,True],[True,False,True],[True,True,True]],[[False,False,True],[True,False,False],[False,True,False],[False,True,True],[False,False,True],[True,False,False],[False,True,True],[False,False,False],[True,False,False],[False,True,True],[False,True,False],[True,False,False]],[[False,True,True],[False,True,False],[False,True,True],[True,False,True],[True,False,False],[False,True,True],[False,False,True],[True,True,False],[False,True,False],[False,False,False],[True,False,True],[False,True,False]],[[True,True,False],[False,False,False],[True,True,True],[False,True,False],[True,True,False],[False,False,True],[False,True,False],[False,True,True],[True,False,True],[False,True,False],[True,False,True],[True,False,True]],[[True,True,False],[False,True,True],[False,False,True],[True,False,True],[False,True,False],[True,True,False],[False,False,False],[True,True,True],[False,False,True],[True,True,True],[True,False,True],[True,True,False]],[[True,True,True],[False,False,True],[True,True,False],[False,False,False],[False,False,False],[False,True,True],[False,True,True],[True,True,False],[True,False,True],[False,True,False],[False,False,True],[True,False,False]],[[True,False,True],[True,False,True],[True,False,True],[False,False,False],[True,False,False],[True,False,True],[True,True,True],[False,True,False],[False,True,True],[False,True,True],[False,False,True],[True,True,True]],[[False,True,True],[True,True,False],[True,False,False],[True,True,False],[False,True,True],[True,True,False],[False,False,False],[True,False,True],[False,False,True],[False,True,False],[True,True,True],[True,False,False]],[[True,True,True],[True,True,False],[False,True,True],[True,True,True],[False,True,True],[False,False,True],[True,False,True],[False,False,False],[False,False,True],[False,True,True],[False,False,False],[True,True,True]],[[False,True,True],[True,True,False],[False,True,True],[True,True,True],[False,False,True],[True,False,False],[True,False,False],[False,False,True],[True,True,True],[False,False,False],[True,False,False],[False,False,True]],[[False,False,False],[True,False,True],[False,False,True],[False,False,True],[False,True,True],[False,False,False],[True,True,True],[False,True,True],[False,True,False],[False,True,False],[True,False,False],[True,True,False]],[[False,False,True],[True,False,True],[False,False,False],[False,False,False],[False,True,False],[True,True,True],[False,True,False],[False,False,False],[False,True,False],[True,True,True],[True,True,True],[False,True,True]],[[True,True,True],[False,True,True],[False,True,False],[False,False,True],[False,True,True],[False,True,True],[False,False,False],[False,True,True],[False,False,True],[True,True,False],[True,False,True],[False,False,True]]], dtype = "bool")#candidate|8214|(14, 12, 3)|const|bool
bop_8215 = relay.logical_or(var_8213.astype('bool'), relay.reshape(const_8214.astype('bool'), relay.shape_of(var_8213))) # shape=(14, 12, 3)
output = bop_8215
output2 = bop_8215
func_8232 = relay.Function([var_8213,], output)
mod['func_8232'] = func_8232
mod = relay.transform.InferType()(mod)
mutated_mod['func_8232'] = func_8232
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8233 = relay.var("var_8233", dtype = "bool", shape = (14, 12, 3))#candidate|8233|(14, 12, 3)|var|bool
func_8232_call = mutated_mod.get_global_var('func_8232')
call_8234 = func_8232_call(var_8233)
output = call_8234
func_8235 = relay.Function([var_8233], output)
mutated_mod['func_8235'] = func_8235
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6573_call = mod.get_global_var('func_6573')
func_6575_call = mutated_mod.get_global_var('func_6575')
call_8239 = relay.TupleGetItem(func_6573_call(), 0)
call_8240 = relay.TupleGetItem(func_6575_call(), 0)
output = call_8239
output2 = call_8240
func_8241 = relay.Function([], output)
mod['func_8241'] = func_8241
mod = relay.transform.InferType()(mod)
output = func_8241()
func_8242 = relay.Function([], output)
mutated_mod['func_8242'] = func_8242
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8295 = relay.var("var_8295", dtype = "float64", shape = (6, 14, 8))#candidate|8295|(6, 14, 8)|var|float64
var_8296 = relay.var("var_8296", dtype = "float64", shape = (6, 14, 8))#candidate|8296|(6, 14, 8)|var|float64
bop_8297 = relay.power(var_8295.astype('float64'), relay.reshape(var_8296.astype('float64'), relay.shape_of(var_8295))) # shape=(6, 14, 8)
output = bop_8297
output2 = bop_8297
F = relay.Function([var_8295,var_8296,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_8295,var_8296,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
