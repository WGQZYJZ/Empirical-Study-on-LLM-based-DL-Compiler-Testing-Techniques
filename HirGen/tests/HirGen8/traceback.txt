==========mod==========
#[version = "0.0.5"]
def @func_2489(%var_2469: Tensor[(4, 10, 14), float64]) -> (Tensor[(4, 10, 14), float64],) {
  %0 = cast(%var_2469, dtype="float64") /* ty=Tensor[(4, 10, 14), float64] */;
  %1 = asinh(%0) /* ty=Tensor[(4, 10, 14), float64] */;
  (%1,)
}

def @func_6320() -> Tensor[(540), float64] {
  %2 = @func_5957() /* ty=(Tensor[(540), float64],) */;
  %2.0
}

def @func_5250(%var_5248: Tensor[(1, 900), bool]) -> (Tensor[(1344), float32], Tensor[(168), float32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(2, 672), float64], Tensor[(12, 15, 5), bool], Tensor[(1, 900), bool]) {
  %3 = @func_4655() /* ty=(Tensor[(11, 12, 12), float64], Tensor[(7, 16, 12), float32], Tensor[(1344), float32]) */;
  %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %5 = cast(meta[relay.Constant][1] /* ty=Tensor[(10), uint16] */, dtype="uint16") /* ty=Tensor[(10), uint16] */;
  %6 = cast(meta[relay.Constant][2] /* ty=Tensor[(100), uint16] */, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %7 = reshape(%4, newshape=[12, 2, 7]) /* ty=Tensor[(12, 2, 7), float32] */;
  %8 = reshape(%5, newshape=[10]) /* ty=Tensor[(10), uint16] */;
  %9 = reshape(%6, newshape=[100]) /* ty=Tensor[(100), uint16] */;
  %10 = @func_2161(%7, %8, %9) /* ty=(Tensor[(1344, 1), float32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(2, 672), float32], Tensor[(12, 2, 7), float64]) */;
  %11 = %10.3;
  %12 = cast(%11, dtype="float64") /* ty=Tensor[(2, 672), float64] */;
  %13 = cast(%var_5248, dtype="bool") /* ty=Tensor[(1, 900), bool] */;
  %14 = cast(%var_5248, dtype="bool") /* ty=Tensor[(1, 900), bool] */;
  %15 = reshape(%13, newshape=[12, 15, 5]) /* ty=Tensor[(12, 15, 5), bool] */;
  %16 = reshape(%14, newshape=[12, 15, 5]) /* ty=Tensor[(12, 15, 5), bool] */;
  %17 = @func_1419(%15, %16) /* ty=(Tensor[(12, 15, 5), bool],) */;
  %18 = %3.2;
  %19 = sin(%12) /* ty=Tensor[(2, 672), float64] */;
  %20 = %17.0;
  (%18, meta[relay.Constant][0] /* ty=Tensor[(168), float32] */, meta[relay.Constant][1] /* ty=Tensor[(10), uint16] */, meta[relay.Constant][2] /* ty=Tensor[(100), uint16] */, %19, %20, %var_5248)
}

def @func_6846() -> (Tensor[(11, 12, 12), float64],) {
  %21 = @func_4980() /* ty=(Tensor[(11, 12, 12), float64], Tensor[(15, 3, 3), float64], Tensor[(135, 1), float64]) */;
  %22 = %21.0;
  (%22,)
}

def @func_7755() -> (Tensor[(1344), float32], Tensor[(16, 4, 12), bool], Tensor[(2, 384), bool]) {
  %23 = @func_4769() /* ty=(Tensor[(1344), float32],) */;
  %24 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 384), bool] */, dtype="bool") /* ty=Tensor[(2, 384), bool] */;
  %25 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 384), bool] */, dtype="bool") /* ty=Tensor[(2, 384), bool] */;
  %26 = reshape(%24, newshape=[16, 4, 12]) /* ty=Tensor[(16, 4, 12), bool] */;
  %27 = reshape(%25, newshape=[16, 4, 12]) /* ty=Tensor[(16, 4, 12), bool] */;
  %28 = %23.0;
  %29 = @func_3651(%26, %27) /* ty=Tensor[(16, 4, 12), bool] */;
  (%28, %29, meta[relay.Constant][3] /* ty=Tensor[(2, 384), bool] */)
}

def @func_3780(%var_3759: Tensor[(9, 4, 13), int8], %var_3760: Tensor[(9, 4, 13), int8]) -> Tensor[(9, 4, 13), int8] {
  %30 = cast(%var_3760, dtype="int8") /* ty=Tensor[(9, 4, 13), int8] */;
  %31 = shape_of(%var_3759, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(%var_3759, dtype="int8") /* ty=Tensor[(9, 4, 13), int8] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_xor(%32, %33) /* ty=Tensor[(9, 4, 13), int8] */
}

def @func_835(%var_823: Tensor[(7, 8, 9), float32]) -> Tensor[(7, 8, 9), float32] {
  %34 = cast(%var_823, dtype="float32") /* ty=Tensor[(7, 8, 9), float32] */;
  atanh(%34) /* ty=Tensor[(7, 8, 9), float32] */
}

def @func_6573() -> (Tensor[(11, 12, 12), float64],) {
  %35 = @func_6045() /* ty=(Tensor[(11, 12, 12), float64],) */;
  %36 = %35.0;
  (%36,)
}

def @func_864(%var_850: Tensor[(5, 16, 1), uint16]) -> (Tensor[(5, 16, 11), bool], Tensor[(5, 16, 1), float64]) {
  %37 = cast(%var_850, dtype="bool") /* ty=Tensor[(5, 16, 1), bool] */;
  %38 = cast(meta[relay.Constant][4] /* ty=Tensor[(5, 16, 11), uint16] */, dtype="bool") /* ty=Tensor[(5, 16, 11), bool] */;
  %39 = cast(%var_850, dtype="float64") /* ty=Tensor[(5, 16, 1), float64] */;
  %40 = less(%37, %38) /* ty=Tensor[(5, 16, 11), bool] */;
  %41 = acosh(%39) /* ty=Tensor[(5, 16, 1), float64] */;
  (%40, %41)
}

def @func_3342(%var_3336: Tensor[(10), uint16], %var_3337: Tensor[(100), uint16]) -> (Tensor[(4, 10, 11), float32], Tensor[(?, 9, 9), uint32], Tensor[(81), uint32], Tensor[(10), uint16], Tensor[(100), uint16]) {
  %42 = cast(meta[relay.Constant][5] /* ty=Tensor[(4, 10, 11), float32] */, dtype="float32") /* ty=Tensor[(4, 10, 11), float32] */;
  %43 = cast(meta[relay.Constant][6] /* ty=Tensor[(81), uint32] */, dtype="uint32") /* ty=Tensor[(81), uint32] */;
  %44 = cast(%var_3336, dtype="uint16") /* ty=Tensor[(10), uint16] */;
  %45 = cast(%var_3337, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %46 = reshape(%43, newshape=[1, 9, 9]) /* ty=Tensor[(1, 9, 9), uint32] */;
  %47 = reshape(%44, newshape=[10]) /* ty=Tensor[(10), uint16] */;
  %48 = reshape(%45, newshape=[100]) /* ty=Tensor[(100), uint16] */;
  %49 = @func_3188(%46, %47, %48) /* ty=(Tensor[(?, 9, 9), uint32], Tensor[(1, 9, 9), float64], Tensor[(1344, 1), float32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(28, 48), float32]) */;
  %50 = erf(%42) /* ty=Tensor[(4, 10, 11), float32] */;
  %51 = %49.0;
  (%50, %51, meta[relay.Constant][6] /* ty=Tensor[(81), uint32] */, %var_3336, %var_3337)
}

def @func_8079(%var_8037: Tensor[(135), float64], %var_8070: uint32) -> (Tensor[(11, 12, 12), float64], Tensor[(15, 3, 3), float64], Tensor[(135), float64], Tensor[(10), uint16], Tensor[(1575), float64], Tensor[(10), uint16], Tensor[(900), bool], Tensor[(50, 2), uint16], Tensor[(78, 6), float64]) {
  %52 = @func_5690() /* ty=(Tensor[(1344), float32], Tensor[(11, 12, 12), float64]) */;
  %53 = cast(%var_8037, dtype="float64") /* ty=Tensor[(135), float64] */;
  %54 = reshape(%53, newshape=[15, 3, 3]) /* ty=Tensor[(15, 3, 3), float64] */;
  %55 = cast(meta[relay.Constant][7] /* ty=Tensor[(1575), float64] */, dtype="float64") /* ty=Tensor[(1575), float64] */;
  %56 = cast(%var_8070, dtype="uint32") /* ty=uint32 */;
  %57 = cast(meta[relay.Constant][8] /* ty=Tensor[(78, 6), int8] */, dtype="int8") /* ty=Tensor[(78, 6), int8] */;
  %58 = cast(meta[relay.Constant][9] /* ty=Tensor[(10), uint16] */, dtype="uint16") /* ty=Tensor[(10), uint16] */;
  %59 = cast(meta[relay.Constant][10] /* ty=Tensor[(900), bool] */, dtype="bool") /* ty=Tensor[(900), bool] */;
  %60 = cast(meta[relay.Constant][11] /* ty=Tensor[(50, 2), uint16] */, dtype="uint16") /* ty=Tensor[(50, 2), uint16] */;
  %61 = reshape(%55, newshape=[15, 15, 7]) /* ty=Tensor[(15, 15, 7), float64] */;
  %62 = reshape(%56, newshape=[]) /* ty=uint32 */;
  %63 = reshape(%57, newshape=[468]) /* ty=Tensor[(468), int8] */;
  %64 = reshape(%58, newshape=[10]) /* ty=Tensor[(10), uint16] */;
  %65 = reshape(%59, newshape=[3, 300]) /* ty=Tensor[(3, 300), bool] */;
  %66 = reshape(%60, newshape=[100]) /* ty=Tensor[(100), uint16] */;
  %67 = @func_7500(%61, %62, %63, %64, %65, %66) /* ty=(Tensor[(12, 2, 11), bool], uint32, Tensor[(7, 16, 12), float32], Tensor[(1344), float32], Tensor[(9, 4, 13), int8], Tensor[(468), int8], Tensor[(3, 7, 6), int32], Tensor[(968, 1), float64], Tensor[(10), uint16], Tensor[(7, 10, 2), int32], Tensor[(140), int32], Tensor[(15, 15, 7), bool], Tensor[(15, 15, 7), bool], Tensor[(1344), float32], Tensor[(192), int32], Tensor[(3, 300), bool], Tensor[(10), uint16], Tensor[(100), uint16]) */;
  %68 = cast(meta[relay.Constant][8] /* ty=Tensor[(78, 6), int8] */, dtype="float64") /* ty=Tensor[(78, 6), float64] */;
  %69 = cast(%var_8070, dtype="float64") /* ty=float64 */;
  %70 = %52.1;
  %71 = @func_790(%54) /* ty=Tensor[(15, 3, 3), float64] */;
  %72 = %67.8;
  %73 = power(%68, %69) /* ty=Tensor[(78, 6), float64] */;
  (%70, %71, %var_8037, %72, meta[relay.Constant][7] /* ty=Tensor[(1575), float64] */, meta[relay.Constant][9] /* ty=Tensor[(10), uint16] */, meta[relay.Constant][10] /* ty=Tensor[(900), bool] */, meta[relay.Constant][11] /* ty=Tensor[(50, 2), uint16] */, %73)
}

def @func_6103(%var_6083: Tensor[(4, 8, 13), bool]) -> Tensor[(4, 8, 13), bool] {
  %74 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 8, 13), bool] */, dtype="bool") /* ty=Tensor[(4, 8, 13), bool] */;
  %75 = shape_of(%var_6083, dtype="int32") /* ty=Tensor[(3), int32] */;
  %76 = cast(%var_6083, dtype="bool") /* ty=Tensor[(4, 8, 13), bool] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%76, %77) /* ty=Tensor[(4, 8, 13), bool] */
}

def @func_4629(%var_4573: Tensor[(8, 3, 9), float32], %var_4580: Tensor[(1344), float32], %var_4585: Tensor[(100), uint16], %var_4606: Tensor[(8, 3, 9), float32]) -> (Tensor[(7, 16, 12), float32], Tensor[(1344), float32], Tensor[(1344, 1), float32], Tensor[(81), uint32], Tensor[(5, 2), uint16], Tensor[(100), uint16], Tensor[(16, 4, 12), bool], Tensor[(768), bool], Tensor[(?, 9, 9), uint32], Tensor[(8, 3, 9), uint32], Tensor[(100), uint16], Tensor[(8, 3, 9), float64]) {
  %78 = cast(%var_4580, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %79 = reshape(%78, newshape=[7, 16, 12]) /* ty=Tensor[(7, 16, 12), float32] */;
  %80 = cast(meta[relay.Constant][13] /* ty=Tensor[(81), uint32] */, dtype="uint32") /* ty=Tensor[(81), uint32] */;
  %81 = cast(meta[relay.Constant][14] /* ty=Tensor[(5, 2), uint16] */, dtype="uint16") /* ty=Tensor[(5, 2), uint16] */;
  %82 = cast(%var_4585, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %83 = reshape(%80, newshape=[1, 9, 9]) /* ty=Tensor[(1, 9, 9), uint32] */;
  %84 = reshape(%81, newshape=[10]) /* ty=Tensor[(10), uint16] */;
  %85 = reshape(%82, newshape=[100]) /* ty=Tensor[(100), uint16] */;
  %86 = @func_3188(%83, %84, %85) /* ty=(Tensor[(?, 9, 9), uint32], Tensor[(1, 9, 9), float64], Tensor[(1344, 1), float32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(28, 48), float32]) */;
  %87 = cast(meta[relay.Constant][15] /* ty=Tensor[(768), bool] */, dtype="bool") /* ty=Tensor[(768), bool] */;
  %88 = cast(meta[relay.Constant][15] /* ty=Tensor[(768), bool] */, dtype="bool") /* ty=Tensor[(768), bool] */;
  %89 = reshape(%87, newshape=[16, 4, 12]) /* ty=Tensor[(16, 4, 12), bool] */;
  %90 = reshape(%88, newshape=[16, 4, 12]) /* ty=Tensor[(16, 4, 12), bool] */;
  %91 = cast(meta[relay.Constant][14] /* ty=Tensor[(5, 2), uint16] */, dtype="uint16") /* ty=Tensor[(5, 2), uint16] */;
  %92 = cast(%var_4585, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %93 = reshape(%91, newshape=[10]) /* ty=Tensor[(10), uint16] */;
  %94 = reshape(%92, newshape=[100]) /* ty=Tensor[(100), uint16] */;
  %95 = @func_3342(%93, %94) /* ty=(Tensor[(4, 10, 11), float32], Tensor[(?, 9, 9), uint32], Tensor[(81), uint32], Tensor[(10), uint16], Tensor[(100), uint16]) */;
  %96 = cast(%var_4573, dtype="float32") /* ty=Tensor[(8, 3, 9), float32] */;
  %97 = acos(%96) /* ty=Tensor[(8, 3, 9), float32] */;
  %98 = cast(%97, dtype="float32") /* ty=Tensor[(8, 3, 9), float32] */;
  %99 = sigmoid(%98) /* ty=Tensor[(8, 3, 9), float32] */;
  %100 = cast(%var_4606, dtype="uint32") /* ty=Tensor[(8, 3, 9), uint32] */;
  %101 = shape_of(%99, dtype="int32") /* ty=Tensor[(3), int32] */;
  %102 = cast(%99, dtype="uint32") /* ty=Tensor[(8, 3, 9), uint32] */;
  %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %104 = %95.1;
  %105 = cast(%104, dtype="uint32") /* ty=Tensor[(?, 9, 9), uint32] */;
  %106 = cast(meta[relay.Constant][14] /* ty=Tensor[(5, 2), uint16] */, dtype="uint16") /* ty=Tensor[(5, 2), uint16] */;
  %107 = cast(%var_4585, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %108 = reshape(%105, newshape=[1, 9, 9]) /* ty=Tensor[(1, 9, 9), uint32] */;
  %109 = reshape(%106, newshape=[10]) /* ty=Tensor[(10), uint16] */;
  %110 = reshape(%107, newshape=[100]) /* ty=Tensor[(100), uint16] */;
  %111 = @func_3188(%108, %109, %110) /* ty=(Tensor[(?, 9, 9), uint32], Tensor[(1, 9, 9), float64], Tensor[(1344, 1), float32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(28, 48), float32]) */;
  %112 = cast(%99, dtype="float64") /* ty=Tensor[(8, 3, 9), float64] */;
  %113 = @func_637(%79) /* ty=Tensor[(7, 16, 12), float32] */;
  %114 = %86.2;
  %115 = @func_3651(%89, %90) /* ty=Tensor[(16, 4, 12), bool] */;
  %116 = bitwise_xor(%102, %103) /* ty=Tensor[(8, 3, 9), uint32] */;
  %117 = %111.4;
  %118 = sin(%112) /* ty=Tensor[(8, 3, 9), float64] */;
  (%113, %var_4580, %114, meta[relay.Constant][13] /* ty=Tensor[(81), uint32] */, meta[relay.Constant][14] /* ty=Tensor[(5, 2), uint16] */, %var_4585, %115, meta[relay.Constant][15] /* ty=Tensor[(768), bool] */, %104, %116, %117, %118)
}

def @func_7141() -> Tensor[(540), float32] {
  %119 = @func_6289() /* ty=(Tensor[(540), float32],) */;
  %119.0
}

def @func_4360(%var_4355: Tensor[(15, 13, 10), uint64]) -> (Tensor[(15, 13, 10), bool],) {
  %120 = cast(meta[relay.Constant][16] /* ty=Tensor[(15, 13, 10), uint64] */, dtype="bool") /* ty=Tensor[(15, 13, 10), bool] */;
  %121 = shape_of(%var_4355, dtype="int32") /* ty=Tensor[(3), int32] */;
  %122 = cast(%var_4355, dtype="bool") /* ty=Tensor[(15, 13, 10), bool] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %124 = equal(%122, %123) /* ty=Tensor[(15, 13, 10), bool] */;
  (%124,)
}

def @func_5905(%var_5870: Tensor[(10, 1), uint16]) -> (Tensor[(11, 12, 12), float32], Tensor[(7, 16, 12), float32], Tensor[(100), uint16], Tensor[(12, 42), uint64], Tensor[(1560, 1), int8], Tensor[(968), float64], Tensor[(540), float64], Tensor[(10, 968), bool]) {
  %125 = @func_5728() /* ty=(Tensor[(540), float32], Tensor[(2, 4, 4), uint16], Tensor[(32), uint16], Tensor[(11, 12, 12), float32]) */;
  %126 = cast(meta[relay.Constant][17] /* ty=Tensor[(968), float64] */, dtype="float64") /* ty=Tensor[(968), float64] */;
  %127 = cast(meta[relay.Constant][17] /* ty=Tensor[(968), float64] */, dtype="float64") /* ty=Tensor[(968), float64] */;
  %128 = cast(%var_5870, dtype="uint16") /* ty=Tensor[(10, 1), uint16] */;
  %129 = cast(meta[relay.Constant][18] /* ty=Tensor[(100), uint16] */, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %130 = reshape(%126, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), float64] */;
  %131 = reshape(%127, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), float64] */;
  %132 = reshape(%128, newshape=[10]) /* ty=Tensor[(10), uint16] */;
  %133 = reshape(%129, newshape=[100]) /* ty=Tensor[(100), uint16] */;
  %134 = @func_2085(%130, %131, %132, %133) /* ty=(Tensor[(7, 16, 12), float32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(1344, 1), float32], Tensor[(11, 11, 8), float64]) */;
  %135 = cast(meta[relay.Constant][19] /* ty=Tensor[(1560, 1), int8] */, dtype="int8") /* ty=Tensor[(1560, 1), int8] */;
  %136 = cast(meta[relay.Constant][19] /* ty=Tensor[(1560, 1), int8] */, dtype="int8") /* ty=Tensor[(1560, 1), int8] */;
  %137 = cast(meta[relay.Constant][18] /* ty=Tensor[(100), uint16] */, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %138 = reshape(%135, newshape=[13, 12, 10]) /* ty=Tensor[(13, 12, 10), int8] */;
  %139 = reshape(%136, newshape=[13, 12, 10]) /* ty=Tensor[(13, 12, 10), int8] */;
  %140 = reshape(%137, newshape=[100]) /* ty=Tensor[(100), uint16] */;
  %141 = @func_4925(%138, %139, %140) /* ty=(Tensor[(13, 12, 10), uint16], Tensor[(12, 42), uint64], Tensor[(?, 9, 9), uint32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(11, 12, 12), float64], Tensor[(14, 12, 3), float64]) */;
  %142 = cast(meta[relay.Constant][17] /* ty=Tensor[(968), float64] */, dtype="float64") /* ty=Tensor[(968), float64] */;
  %143 = @func_5538() /* ty=(Tensor[(540), float64],) */;
  %144 = cast(%var_5870, dtype="bool") /* ty=Tensor[(10, 1), bool] */;
  %145 = cast(meta[relay.Constant][17] /* ty=Tensor[(968), float64] */, dtype="bool") /* ty=Tensor[(968), bool] */;
  %146 = %125.3;
  %147 = %134.0;
  %148 = %141.1;
  %149 = sin(%142) /* ty=Tensor[(968), float64] */;
  %150 = %143.0;
  %151 = logical_or(%144, %145) /* ty=Tensor[(10, 968), bool] */;
  (%146, %147, meta[relay.Constant][18] /* ty=Tensor[(100), uint16] */, %148, meta[relay.Constant][19] /* ty=Tensor[(1560, 1), int8] */, %149, %150, %151)
}

def @func_2161(%var_2141: Tensor[(12, 2, 7), float32], %var_2146: Tensor[(10), uint16], %var_2147: Tensor[(100), uint16]) -> (Tensor[(1344, 1), float32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(2, 672), float32], Tensor[(12, 2, 7), float64]) {
  %152 = cast(%var_2146, dtype="uint16") /* ty=Tensor[(10), uint16] */;
  %153 = cast(%var_2147, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %154 = cast(meta[relay.Constant][20] /* ty=Tensor[(2, 672), float32] */, dtype="float32") /* ty=Tensor[(2, 672), float32] */;
  %155 = reshape(%152, newshape=[1, 10]) /* ty=Tensor[(1, 10), uint16] */;
  %156 = reshape(%153, newshape=[10, 10]) /* ty=Tensor[(10, 10), uint16] */;
  %157 = reshape(%154, newshape=[1344, 1]) /* ty=Tensor[(1344, 1), float32] */;
  %158 = @func_751(%155, %156, %157) /* ty=(Tensor[(10, 10), bool], Tensor[(7, 16, 12), float32], Tensor[(1344, 1), float32], Tensor[(3, 13, 9), float64], Tensor[(351), float64], Tensor[(3, 13, 9), float64], Tensor[(3, 13, 9), float64]) */;
  %159 = cast(%var_2141, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
  %160 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(12, 2, 7), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %161 = cast(meta[relay.Constant][21] /* ty=Tensor[(12, 2, 7), float32] */, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
  %162 = dyn.reshape(%159, %160, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %163 = mod(%161, %162) /* ty=Tensor[(12, 2, 7), float32] */;
  %164 = cast(%163, dtype="float64") /* ty=Tensor[(12, 2, 7), float64] */;
  %165 = %158.2;
  %166 = sqrt(%164) /* ty=Tensor[(12, 2, 7), float64] */;
  (%165, %var_2146, %var_2147, meta[relay.Constant][20] /* ty=Tensor[(2, 672), float32] */, %166)
}

def @func_4512() -> Tensor[(11, 12, 12), float64] {
  %167 = cast(meta[relay.Constant][22] /* ty=Tensor[(11, 12, 12), float64] */, dtype="float64") /* ty=Tensor[(11, 12, 12), float64] */;
  sigmoid(%167) /* ty=Tensor[(11, 12, 12), float64] */
}

def @func_4655() -> (Tensor[(11, 12, 12), float64], Tensor[(7, 16, 12), float32], Tensor[(1344), float32]) {
  %168 = @func_4545() /* ty=(Tensor[(11, 12, 12), float64],) */;
  %169 = cast(meta[relay.Constant][23] /* ty=Tensor[(1344), float32] */, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %170 = reshape(%169, newshape=[7, 16, 12]) /* ty=Tensor[(7, 16, 12), float32] */;
  %171 = %168.0;
  %172 = @func_637(%170) /* ty=Tensor[(7, 16, 12), float32] */;
  (%171, %172, meta[relay.Constant][23] /* ty=Tensor[(1344), float32] */)
}

def @func_751(%var_719: Tensor[(1, 10), uint16], %var_720: Tensor[(10, 10), uint16], %var_725: Tensor[(1344, 1), float32]) -> (Tensor[(10, 10), bool], Tensor[(7, 16, 12), float32], Tensor[(1344, 1), float32], Tensor[(3, 13, 9), float64], Tensor[(351), float64], Tensor[(3, 13, 9), float64], Tensor[(3, 13, 9), float64]) {
  %173 = cast(%var_719, dtype="bool") /* ty=Tensor[(1, 10), bool] */;
  %174 = cast(%var_720, dtype="bool") /* ty=Tensor[(10, 10), bool] */;
  %175 = cast(%var_725, dtype="float32") /* ty=Tensor[(1344, 1), float32] */;
  %176 = reshape(%175, newshape=[7, 16, 12]) /* ty=Tensor[(7, 16, 12), float32] */;
  %177 = cast(meta[relay.Constant][24] /* ty=Tensor[(351), float64] */, dtype="float64") /* ty=Tensor[(351), float64] */;
  %178 = reshape(%177, newshape=[3, 13, 9]) /* ty=Tensor[(3, 13, 9), float64] */;
  %179 = @func_282(%178) /* ty=Tensor[(3, 13, 9), float64] */;
  %180 = cast(%179, dtype="float64") /* ty=Tensor[(3, 13, 9), float64] */;
  %181 = reshape(%180, newshape=[3, 13, 9]) /* ty=Tensor[(3, 13, 9), float64] */;
  %182 = cast(meta[relay.Constant][24] /* ty=Tensor[(351), float64] */, dtype="float64") /* ty=Tensor[(351), float64] */;
  %183 = reshape(%182, newshape=[3, 13, 9]) /* ty=Tensor[(3, 13, 9), float64] */;
  %184 = less(%173, %174) /* ty=Tensor[(10, 10), bool] */;
  %185 = @func_637(%176) /* ty=Tensor[(7, 16, 12), float32] */;
  %186 = @func_282(%181) /* ty=Tensor[(3, 13, 9), float64] */;
  %187 = @func_282(%183) /* ty=Tensor[(3, 13, 9), float64] */;
  (%184, %185, %var_725, %179, meta[relay.Constant][24] /* ty=Tensor[(351), float64] */, %186, %187)
}

def @func_7319(%var_7314: Tensor[(264), uint32]) -> (Tensor[(540), float32], Tensor[(12, 2, 11), bool], uint32, Tensor[(264), uint32]) {
  %188 = @func_7123() /* ty=(Tensor[(1344), float32], Tensor[(540), float32], Tensor[(5, 12, 16), bool], Tensor[(960), int32], Tensor[(11, 12, 12), float64]) */;
  %189 = cast(meta[relay.Constant][25] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %190 = cast(%var_7314, dtype="uint32") /* ty=Tensor[(264), uint32] */;
  %191 = reshape(%189, newshape=[]) /* ty=uint32 */;
  %192 = reshape(%190, newshape=[12, 2, 11]) /* ty=Tensor[(12, 2, 11), uint32] */;
  %193 = @func_3476(%191, %192) /* ty=(Tensor[(12, 15, 5), bool], Tensor[(9, 100), bool], Tensor[(12, 2, 11), bool], Tensor[(12, 2, 11), float32]) */;
  %194 = %188.1;
  %195 = %193.2;
  (%194, %195, meta[relay.Constant][25] /* ty=uint32 */, %var_7314)
}

def @func_6446(%var_6441: Tensor[(5, 12, 16), int32], %var_6442: Tensor[(5, 12, 16), int32]) -> Tensor[(5, 12, 16), bool] {
  %196 = cast(%var_6442, dtype="bool") /* ty=Tensor[(5, 12, 16), bool] */;
  %197 = shape_of(%var_6441, dtype="int32") /* ty=Tensor[(3), int32] */;
  %198 = cast(%var_6441, dtype="bool") /* ty=Tensor[(5, 12, 16), bool] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%198, %199) /* ty=Tensor[(5, 12, 16), bool] */
}

def @func_6045() -> (Tensor[(11, 12, 12), float64],) {
  %200 = @func_5195() /* ty=(Tensor[(11, 12, 12), float64],) */;
  %201 = %200.0;
  (%201,)
}

def @func_2348(%var_2272: Tensor[(2, 16, 3), float64], %var_2317: Tensor[(8, 24), int32]) -> (Tensor[(5, 16, 11), bool], Tensor[(80), uint16], Tensor[(2, 16, 3), float64], Tensor[(140), int32], Tensor[(8, 24), int32], Tensor[(10), uint16], Tensor[(1344), float32], Tensor[(5, 28), int32], Tensor[(900), bool], Tensor[(2, 16, 3), float32]) {
  %202 = cast(meta[relay.Constant][26] /* ty=Tensor[(80), uint16] */, dtype="uint16") /* ty=Tensor[(80), uint16] */;
  %203 = reshape(%202, newshape=[5, 16, 1]) /* ty=Tensor[(5, 16, 1), uint16] */;
  %204 = @func_864(%203) /* ty=(Tensor[(5, 16, 11), bool], Tensor[(5, 16, 1), float64]) */;
  %205 = cast(%var_2272, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
  %206 = sigmoid(%205) /* ty=Tensor[(2, 16, 3), float64] */;
  %207 = cast(%206, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
  %208 = cos(%207) /* ty=Tensor[(2, 16, 3), float64] */;
  %209 = cast(%206, dtype="bool") /* ty=Tensor[(2, 16, 3), bool] */;
  %210 = shape_of(%208, dtype="int32") /* ty=Tensor[(3), int32] */;
  %211 = cast(%208, dtype="bool") /* ty=Tensor[(2, 16, 3), bool] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %213 = not_equal(%211, %212) /* ty=Tensor[(2, 16, 3), bool] */;
  %214 = cast(%213, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
  %215 = cast(%var_2317, dtype="int32") /* ty=Tensor[(8, 24), int32] */;
  %216 = cast(%var_2317, dtype="int32") /* ty=Tensor[(8, 24), int32] */;
  %217 = cast(meta[relay.Constant][27] /* ty=Tensor[(10), uint16] */, dtype="uint16") /* ty=Tensor[(10), uint16] */;
  %218 = cast(meta[relay.Constant][28] /* ty=Tensor[(1344), float32] */, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %219 = cast(meta[relay.Constant][29] /* ty=Tensor[(5, 28), int32] */, dtype="int32") /* ty=Tensor[(5, 28), int32] */;
  %220 = cast(meta[relay.Constant][30] /* ty=Tensor[(900), bool] */, dtype="bool") /* ty=Tensor[(900), bool] */;
  %221 = reshape(%215, newshape=[16, 3, 4]) /* ty=Tensor[(16, 3, 4), int32] */;
  %222 = reshape(%216, newshape=[16, 3, 4]) /* ty=Tensor[(16, 3, 4), int32] */;
  %223 = reshape(%217, newshape=[10]) /* ty=Tensor[(10), uint16] */;
  %224 = reshape(%218, newshape=[1344]) /* ty=Tensor[(1344), float32] */;
  %225 = reshape(%219, newshape=[140]) /* ty=Tensor[(140), int32] */;
  %226 = reshape(%220, newshape=[900]) /* ty=Tensor[(900), bool] */;
  %227 = @func_1505(%221, %222, %223, %224, %225, %226) /* ty=(Tensor[(16, 3, 4), int32], Tensor[(3, 13, 9), float64], Tensor[(10), uint16], Tensor[(25, 4), uint16], Tensor[(1344), float32], Tensor[(3, 13, 9), float64], Tensor[(140), int32], Tensor[(12, 15, 5), bool], Tensor[(900), bool]) */;
  %228 = cast(%206, dtype="float32") /* ty=Tensor[(2, 16, 3), float32] */;
  %229 = %204.0;
  %230 = acos(%214) /* ty=Tensor[(2, 16, 3), float64] */;
  %231 = %227.6;
  %232 = asin(%228) /* ty=Tensor[(2, 16, 3), float32] */;
  (%229, meta[relay.Constant][26] /* ty=Tensor[(80), uint16] */, %230, %231, %var_2317, meta[relay.Constant][27] /* ty=Tensor[(10), uint16] */, meta[relay.Constant][28] /* ty=Tensor[(1344), float32] */, meta[relay.Constant][29] /* ty=Tensor[(5, 28), int32] */, meta[relay.Constant][30] /* ty=Tensor[(900), bool] */, %232)
}

def @func_8232(%var_8213: Tensor[(14, 12, 3), bool]) -> Tensor[(14, 12, 3), bool] {
  %233 = cast(meta[relay.Constant][31] /* ty=Tensor[(14, 12, 3), bool] */, dtype="bool") /* ty=Tensor[(14, 12, 3), bool] */;
  %234 = shape_of(%var_8213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(%var_8213, dtype="bool") /* ty=Tensor[(14, 12, 3), bool] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%235, %236) /* ty=Tensor[(14, 12, 3), bool] */
}

def @func_4856() -> (Tensor[(1344), float32], Tensor[(540), float32], Tensor[(9, 10, 6), float64]) {
  %237 = cast(meta[relay.Constant][32] /* ty=Tensor[(540), float32] */, dtype="float32") /* ty=Tensor[(540), float32] */;
  %238 = reshape(%237, newshape=[9, 10, 6]) /* ty=Tensor[(9, 10, 6), float32] */;
  %239 = @func_2721(%238) /* ty=(Tensor[(9, 10, 6), float32],) */;
  %240 = %239.0;
  %241 = cast(%240, dtype="float64") /* ty=Tensor[(9, 10, 6), float64] */;
  %242 = @func_4709() /* ty=Tensor[(1344), float32] */;
  %243 = sin(%241) /* ty=Tensor[(9, 10, 6), float64] */;
  (%242, meta[relay.Constant][32] /* ty=Tensor[(540), float32] */, %243)
}

def @func_6834(%var_6821: Tensor[(300), float64]) -> (Tensor[(540), float64], Tensor[(15, 4, 5), float32], Tensor[(300), float64]) {
  %244 = cast(%var_6821, dtype="float64") /* ty=Tensor[(300), float64] */;
  %245 = reshape(%244, newshape=[15, 4, 5]) /* ty=Tensor[(15, 4, 5), float64] */;
  %246 = @func_6320() /* ty=Tensor[(540), float64] */;
  %247 = @func_5183(%245) /* ty=Tensor[(15, 4, 5), float32] */;
  (%246, %247, %var_6821)
}

def @func_6729() -> (Tensor[(540), float64],) {
  %248 = @func_6320() /* ty=Tensor[(540), float64] */;
  (%248,)
}

def @func_7500(%var_7379: Tensor[(15, 15, 7), float64], %var_7383: uint32, %var_7422: Tensor[(468), int8], %var_7427: Tensor[(10), uint16], %var_7481: Tensor[(3, 300), bool], %var_7495: Tensor[(100), uint16]) -> (Tensor[(12, 2, 11), bool], uint32, Tensor[(7, 16, 12), float32], Tensor[(1344), float32], Tensor[(9, 4, 13), int8], Tensor[(468), int8], Tensor[(3, 7, 6), int32], Tensor[(968, 1), float64], Tensor[(10), uint16], Tensor[(7, 10, 2), int32], Tensor[(140), int32], Tensor[(15, 15, 7), bool], Tensor[(15, 15, 7), bool], Tensor[(1344), float32], Tensor[(192), int32], Tensor[(3, 300), bool], Tensor[(10), uint16], Tensor[(100), uint16]) {
  %249 = cast(%var_7383, dtype="uint32") /* ty=uint32 */;
  %250 = reshape(%249, newshape=[]) /* ty=uint32 */;
  %251 = @func_3959(%250) /* ty=(Tensor[(3, 12, 15), float64], Tensor[(12, 2, 11), bool], uint32, Tensor[(6, 44), uint32]) */;
  %252 = cast(meta[relay.Constant][33] /* ty=Tensor[(1344), float32] */, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %253 = reshape(%252, newshape=[7, 16, 12]) /* ty=Tensor[(7, 16, 12), float32] */;
  %254 = cast(%var_7422, dtype="int8") /* ty=Tensor[(468), int8] */;
  %255 = cast(%var_7422, dtype="int8") /* ty=Tensor[(468), int8] */;
  %256 = reshape(%254, newshape=[9, 4, 13]) /* ty=Tensor[(9, 4, 13), int8] */;
  %257 = reshape(%255, newshape=[9, 4, 13]) /* ty=Tensor[(9, 4, 13), int8] */;
  %258 = cast(meta[relay.Constant][34] /* ty=Tensor[(968, 1), float64] */, dtype="float64") /* ty=Tensor[(968, 1), float64] */;
  %259 = cast(%var_7427, dtype="uint16") /* ty=Tensor[(10), uint16] */;
  %260 = reshape(%258, newshape=[968]) /* ty=Tensor[(968), float64] */;
  %261 = reshape(%259, newshape=[5, 2]) /* ty=Tensor[(5, 2), uint16] */;
  %262 = @func_6431(%260, %261) /* ty=(Tensor[(540), float64], Tensor[(560), float64], Tensor[(15, 3, 3), float64], Tensor[(100), uint16], Tensor[(968), float64], Tensor[(5, 2), uint16], Tensor[(100), uint16], Tensor[(15, 3, 3), float64], Tensor[(3, 7, 6), int32], Tensor[(126), int32]) */;
  %263 = cast(meta[relay.Constant][35] /* ty=Tensor[(140), int32] */, dtype="int32") /* ty=Tensor[(140), int32] */;
  %264 = cast(meta[relay.Constant][35] /* ty=Tensor[(140), int32] */, dtype="int32") /* ty=Tensor[(140), int32] */;
  %265 = cast(meta[relay.Constant][35] /* ty=Tensor[(140), int32] */, dtype="int32") /* ty=Tensor[(140), int32] */;
  %266 = reshape(%263, newshape=[7, 10, 2]) /* ty=Tensor[(7, 10, 2), int32] */;
  %267 = reshape(%264, newshape=[7, 10, 2]) /* ty=Tensor[(7, 10, 2), int32] */;
  %268 = reshape(%265, newshape=[7, 10, 2]) /* ty=Tensor[(7, 10, 2), int32] */;
  %269 = @func_591(%266, %267, %268) /* ty=(Tensor[(7, 10, 2), int32], Tensor[(3, 13, 9), float64], Tensor[(351), float64], Tensor[(7, 10, 2), int16]) */;
  %270 = cast(%var_7379, dtype="float64") /* ty=Tensor[(15, 15, 7), float64] */;
  %271 = acos(%270) /* ty=Tensor[(15, 15, 7), float64] */;
  %272 = cast(%271, dtype="float32") /* ty=Tensor[(15, 15, 7), float32] */;
  %273 = log(%272) /* ty=Tensor[(15, 15, 7), float32] */;
  %274 = cast(%271, dtype="int8") /* ty=Tensor[(15, 15, 7), int8] */;
  %275 = shape_of(%273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(%273, dtype="int8") /* ty=Tensor[(15, 15, 7), int8] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %278 = logical_xor(%276, %277) /* ty=Tensor[(15, 15, 7), int8] */;
  %279 = cast(%271, dtype="bool") /* ty=Tensor[(15, 15, 7), bool] */;
  %280 = shape_of(%278, dtype="int32") /* ty=Tensor[(3), int32] */;
  %281 = cast(%278, dtype="bool") /* ty=Tensor[(15, 15, 7), bool] */;
  %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %283 = cast(%var_7379, dtype="bool") /* ty=Tensor[(15, 15, 7), bool] */;
  %284 = shape_of(%271, dtype="int32") /* ty=Tensor[(3), int32] */;
  %285 = cast(%271, dtype="bool") /* ty=Tensor[(15, 15, 7), bool] */;
  %286 = dyn.reshape(%283, %284, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %287 = cast(meta[relay.Constant][36] /* ty=Tensor[(192), int32] */, dtype="int32") /* ty=Tensor[(192), int32] */;
  %288 = cast(meta[relay.Constant][36] /* ty=Tensor[(192), int32] */, dtype="int32") /* ty=Tensor[(192), int32] */;
  %289 = cast(%var_7427, dtype="uint16") /* ty=Tensor[(10), uint16] */;
  %290 = cast(meta[relay.Constant][33] /* ty=Tensor[(1344), float32] */, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %291 = cast(meta[relay.Constant][35] /* ty=Tensor[(140), int32] */, dtype="int32") /* ty=Tensor[(140), int32] */;
  %292 = cast(%var_7481, dtype="bool") /* ty=Tensor[(3, 300), bool] */;
  %293 = reshape(%287, newshape=[16, 3, 4]) /* ty=Tensor[(16, 3, 4), int32] */;
  %294 = reshape(%288, newshape=[16, 3, 4]) /* ty=Tensor[(16, 3, 4), int32] */;
  %295 = reshape(%289, newshape=[10]) /* ty=Tensor[(10), uint16] */;
  %296 = reshape(%290, newshape=[1344]) /* ty=Tensor[(1344), float32] */;
  %297 = reshape(%291, newshape=[140]) /* ty=Tensor[(140), int32] */;
  %298 = reshape(%292, newshape=[900]) /* ty=Tensor[(900), bool] */;
  %299 = @func_1505(%293, %294, %295, %296, %297, %298) /* ty=(Tensor[(16, 3, 4), int32], Tensor[(3, 13, 9), float64], Tensor[(10), uint16], Tensor[(25, 4), uint16], Tensor[(1344), float32], Tensor[(3, 13, 9), float64], Tensor[(140), int32], Tensor[(12, 15, 5), bool], Tensor[(900), bool]) */;
  %300 = cast(meta[relay.Constant][34] /* ty=Tensor[(968, 1), float64] */, dtype="float64") /* ty=Tensor[(968, 1), float64] */;
  %301 = cast(meta[relay.Constant][34] /* ty=Tensor[(968, 1), float64] */, dtype="float64") /* ty=Tensor[(968, 1), float64] */;
  %302 = cast(%var_7427, dtype="uint16") /* ty=Tensor[(10), uint16] */;
  %303 = cast(%var_7495, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %304 = reshape(%300, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), float64] */;
  %305 = reshape(%301, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), float64] */;
  %306 = reshape(%302, newshape=[10]) /* ty=Tensor[(10), uint16] */;
  %307 = reshape(%303, newshape=[100]) /* ty=Tensor[(100), uint16] */;
  %308 = @func_2085(%304, %305, %306, %307) /* ty=(Tensor[(7, 16, 12), float32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(1344, 1), float32], Tensor[(11, 11, 8), float64]) */;
  %309 = %251.1;
  %310 = @func_637(%253) /* ty=Tensor[(7, 16, 12), float32] */;
  %311 = @func_3780(%256, %257) /* ty=Tensor[(9, 4, 13), int8] */;
  %312 = %262.8;
  %313 = %269.0;
  %314 = greater_equal(%281, %282) /* ty=Tensor[(15, 15, 7), bool] */;
  %315 = equal(%285, %286) /* ty=Tensor[(15, 15, 7), bool] */;
  %316 = %299.4;
  %317 = %308.1;
  (%309, %var_7383, %310, meta[relay.Constant][33] /* ty=Tensor[(1344), float32] */, %311, %var_7422, %312, meta[relay.Constant][34] /* ty=Tensor[(968, 1), float64] */, %var_7427, %313, meta[relay.Constant][35] /* ty=Tensor[(140), int32] */, %314, %315, %316, meta[relay.Constant][36] /* ty=Tensor[(192), int32] */, %var_7481, %317, %var_7495)
}

def @func_5728() -> (Tensor[(540), float32], Tensor[(2, 4, 4), uint16], Tensor[(32), uint16], Tensor[(11, 12, 12), float32]) {
  %318 = @func_4856() /* ty=(Tensor[(1344), float32], Tensor[(540), float32], Tensor[(9, 10, 6), float64]) */;
  %319 = cast(meta[relay.Constant][37] /* ty=Tensor[(32), uint16] */, dtype="uint16") /* ty=Tensor[(32), uint16] */;
  %320 = reshape(%319, newshape=[2, 4, 4]) /* ty=Tensor[(2, 4, 4), uint16] */;
  %321 = @func_5642(%320) /* ty=(Tensor[(2, 4, 4), uint16], Tensor[(1344), float32], Tensor[(11, 12, 12), float64]) */;
  %322 = %318.1;
  %323 = %321.0;
  %324 = @func_5509() /* ty=Tensor[(11, 12, 12), float32] */;
  (%322, %323, meta[relay.Constant][37] /* ty=Tensor[(32), uint16] */, %324)
}

def @func_1505(%var_1469: Tensor[(16, 3, 4), int32], %var_1470: Tensor[(16, 3, 4), int32], %var_1481: Tensor[(10), uint16], %var_1483: Tensor[(1344), float32], %var_1490: Tensor[(140), int32], %var_1496: Tensor[(900), bool]) -> (Tensor[(16, 3, 4), int32], Tensor[(3, 13, 9), float64], Tensor[(10), uint16], Tensor[(25, 4), uint16], Tensor[(1344), float32], Tensor[(3, 13, 9), float64], Tensor[(140), int32], Tensor[(12, 15, 5), bool], Tensor[(900), bool]) {
  %325 = cast(%var_1470, dtype="int32") /* ty=Tensor[(16, 3, 4), int32] */;
  %326 = shape_of(%var_1469, dtype="int32") /* ty=Tensor[(3), int32] */;
  %327 = cast(%var_1469, dtype="int32") /* ty=Tensor[(16, 3, 4), int32] */;
  %328 = dyn.reshape(%325, %326, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %329 = cast(%var_1481, dtype="uint16") /* ty=Tensor[(10), uint16] */;
  %330 = cast(meta[relay.Constant][38] /* ty=Tensor[(25, 4), uint16] */, dtype="uint16") /* ty=Tensor[(25, 4), uint16] */;
  %331 = cast(%var_1483, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %332 = reshape(%329, newshape=[1, 10]) /* ty=Tensor[(1, 10), uint16] */;
  %333 = reshape(%330, newshape=[10, 10]) /* ty=Tensor[(10, 10), uint16] */;
  %334 = reshape(%331, newshape=[1344, 1]) /* ty=Tensor[(1344, 1), float32] */;
  %335 = @func_751(%332, %333, %334) /* ty=(Tensor[(10, 10), bool], Tensor[(7, 16, 12), float32], Tensor[(1344, 1), float32], Tensor[(3, 13, 9), float64], Tensor[(351), float64], Tensor[(3, 13, 9), float64], Tensor[(3, 13, 9), float64]) */;
  %336 = cast(%var_1490, dtype="int32") /* ty=Tensor[(140), int32] */;
  %337 = cast(%var_1490, dtype="int32") /* ty=Tensor[(140), int32] */;
  %338 = cast(%var_1490, dtype="int32") /* ty=Tensor[(140), int32] */;
  %339 = reshape(%336, newshape=[7, 10, 2]) /* ty=Tensor[(7, 10, 2), int32] */;
  %340 = reshape(%337, newshape=[7, 10, 2]) /* ty=Tensor[(7, 10, 2), int32] */;
  %341 = reshape(%338, newshape=[7, 10, 2]) /* ty=Tensor[(7, 10, 2), int32] */;
  %342 = @func_591(%339, %340, %341) /* ty=(Tensor[(7, 10, 2), int32], Tensor[(3, 13, 9), float64], Tensor[(351), float64], Tensor[(7, 10, 2), int16]) */;
  %343 = cast(%var_1496, dtype="bool") /* ty=Tensor[(900), bool] */;
  %344 = cast(%var_1496, dtype="bool") /* ty=Tensor[(900), bool] */;
  %345 = reshape(%343, newshape=[12, 15, 5]) /* ty=Tensor[(12, 15, 5), bool] */;
  %346 = reshape(%344, newshape=[12, 15, 5]) /* ty=Tensor[(12, 15, 5), bool] */;
  %347 = @func_1419(%345, %346) /* ty=(Tensor[(12, 15, 5), bool],) */;
  %348 = subtract(%327, %328) /* ty=Tensor[(16, 3, 4), int32] */;
  %349 = %335.5;
  %350 = %342.1;
  %351 = %347.0;
  (%348, %349, %var_1481, meta[relay.Constant][38] /* ty=Tensor[(25, 4), uint16] */, %var_1483, %350, %var_1490, %351, %var_1496)
}

def @func_5538() -> (Tensor[(540), float64],) {
  %352 = @func_4856() /* ty=(Tensor[(1344), float32], Tensor[(540), float32], Tensor[(9, 10, 6), float64]) */;
  %353 = %352.1;
  %354 = cast(%353, dtype="float64") /* ty=Tensor[(540), float64] */;
  %355 = atanh(%354) /* ty=Tensor[(540), float64] */;
  (%355,)
}

def @func_3959(%var_3951: uint32) -> (Tensor[(3, 12, 15), float64], Tensor[(12, 2, 11), bool], uint32, Tensor[(6, 44), uint32]) {
  %356 = cast(meta[relay.Constant][39] /* ty=Tensor[(3, 12, 15), float64] */, dtype="float64") /* ty=Tensor[(3, 12, 15), float64] */;
  %357 = cast(%var_3951, dtype="uint32") /* ty=uint32 */;
  %358 = cast(meta[relay.Constant][40] /* ty=Tensor[(6, 44), uint32] */, dtype="uint32") /* ty=Tensor[(6, 44), uint32] */;
  %359 = reshape(%357, newshape=[]) /* ty=uint32 */;
  %360 = reshape(%358, newshape=[12, 2, 11]) /* ty=Tensor[(12, 2, 11), uint32] */;
  %361 = @func_3476(%359, %360) /* ty=(Tensor[(12, 15, 5), bool], Tensor[(9, 100), bool], Tensor[(12, 2, 11), bool], Tensor[(12, 2, 11), float32]) */;
  %362 = cosh(%356) /* ty=Tensor[(3, 12, 15), float64] */;
  %363 = %361.2;
  (%362, %363, %var_3951, meta[relay.Constant][40] /* ty=Tensor[(6, 44), uint32] */)
}

def @func_4807(%var_4771: Tensor[(13, 8, 16), float32]) -> (Tensor[(13, 8, 16), float32], Tensor[(15, 13, 10), float32]) {
  %364 = cast(%var_4771, dtype="float32") /* ty=Tensor[(13, 8, 16), float32] */;
  %365 = cast(meta[relay.Constant][41] /* ty=Tensor[(1950), uint64] */, dtype="uint64") /* ty=Tensor[(1950), uint64] */;
  %366 = reshape(%365, newshape=[15, 13, 10]) /* ty=Tensor[(15, 13, 10), uint64] */;
  %367 = @func_4360(%366) /* ty=(Tensor[(15, 13, 10), bool],) */;
  %368 = %367.0;
  %369 = cast(meta[relay.Constant][41] /* ty=Tensor[(1950), uint64] */, dtype="float32") /* ty=Tensor[(1950), float32] */;
  %370 = shape_of(%368, dtype="int32") /* ty=Tensor[(3), int32] */;
  %371 = cast(%368, dtype="float32") /* ty=Tensor[(15, 13, 10), float32] */;
  %372 = dyn.reshape(%369, %370, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %373 = log2(%364) /* ty=Tensor[(13, 8, 16), float32] */;
  %374 = floor_mod(%371, %372) /* ty=Tensor[(15, 13, 10), float32] */;
  (%373, %374)
}

def @func_571(%var_560: Tensor[(14, 12, 3), uint64], %var_561: Tensor[(14, 12, 3), uint64]) -> (Tensor[(14, 12, 3), uint64],) {
  %375 = cast(%var_561, dtype="uint64") /* ty=Tensor[(14, 12, 3), uint64] */;
  %376 = shape_of(%var_560, dtype="int32") /* ty=Tensor[(3), int32] */;
  %377 = cast(%var_560, dtype="uint64") /* ty=Tensor[(14, 12, 3), uint64] */;
  %378 = dyn.reshape(%375, %376, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %379 = subtract(%377, %378) /* ty=Tensor[(14, 12, 3), uint64] */;
  (%379,)
}

def @func_6133(%var_6127: Tensor[(468), int8]) -> (Tensor[(11, 12, 12), bool], Tensor[(540), float64], Tensor[(9, 4, 13), int8], Tensor[(468), int8]) {
  %380 = @func_5957() /* ty=(Tensor[(540), float64],) */;
  %381 = cast(%var_6127, dtype="int8") /* ty=Tensor[(468), int8] */;
  %382 = cast(%var_6127, dtype="int8") /* ty=Tensor[(468), int8] */;
  %383 = reshape(%381, newshape=[9, 4, 13]) /* ty=Tensor[(9, 4, 13), int8] */;
  %384 = reshape(%382, newshape=[9, 4, 13]) /* ty=Tensor[(9, 4, 13), int8] */;
  %385 = @func_5434() /* ty=Tensor[(11, 12, 12), bool] */;
  %386 = %380.0;
  %387 = @func_3780(%383, %384) /* ty=Tensor[(9, 4, 13), int8] */;
  (%385, %386, %387, %var_6127)
}

def @func_8193(%var_8190: Tensor[(100), uint16]) -> (Tensor[(1344), float32], Tensor[(?, 9, 9), uint32], Tensor[(10, 1), uint16], Tensor[(100), uint16]) {
  %388 = cast(meta[relay.Constant][42] /* ty=Tensor[(10, 1), uint16] */, dtype="uint16") /* ty=Tensor[(10, 1), uint16] */;
  %389 = cast(%var_8190, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %390 = reshape(%388, newshape=[10]) /* ty=Tensor[(10), uint16] */;
  %391 = reshape(%389, newshape=[100]) /* ty=Tensor[(100), uint16] */;
  %392 = @func_3342(%390, %391) /* ty=(Tensor[(4, 10, 11), float32], Tensor[(?, 9, 9), uint32], Tensor[(81), uint32], Tensor[(10), uint16], Tensor[(100), uint16]) */;
  %393 = @func_4709() /* ty=Tensor[(1344), float32] */;
  %394 = %392.1;
  (%393, %394, meta[relay.Constant][42] /* ty=Tensor[(10, 1), uint16] */, %var_8190)
}

def @func_922(%var_909: int8, %var_910: Tensor[(12, 1), int8]) -> (Tensor[(12, 1), float64], Tensor[(12, 1), float32]) {
  %395 = cast(%var_909, dtype="float64") /* ty=float64 */;
  %396 = cast(%var_910, dtype="float64") /* ty=Tensor[(12, 1), float64] */;
  %397 = cast(%var_909, dtype="int8") /* ty=int8 */;
  %398 = cast(%var_910, dtype="int8") /* ty=Tensor[(12, 1), int8] */;
  %399 = multiply(%397, %398) /* ty=Tensor[(12, 1), int8] */;
  %400 = cast(%var_909, dtype="float32") /* ty=float32 */;
  %401 = cast(%399, dtype="float32") /* ty=Tensor[(12, 1), float32] */;
  %402 = power(%395, %396) /* ty=Tensor[(12, 1), float64] */;
  %403 = floor_mod(%400, %401) /* ty=Tensor[(12, 1), float32] */;
  (%402, %403)
}

def @func_1419(%var_1409: Tensor[(12, 15, 5), bool], %var_1410: Tensor[(12, 15, 5), bool]) -> (Tensor[(12, 15, 5), bool],) {
  %404 = cast(%var_1410, dtype="bool") /* ty=Tensor[(12, 15, 5), bool] */;
  %405 = shape_of(%var_1409, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%var_1409, dtype="bool") /* ty=Tensor[(12, 15, 5), bool] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %408 = logical_or(%406, %407) /* ty=Tensor[(12, 15, 5), bool] */;
  (%408,)
}

def @func_3384(%var_3371: Tensor[(12, 10, 5), float32]) -> (Tensor[(12, 10, 5), float64],) {
  %409 = cast(%var_3371, dtype="float32") /* ty=Tensor[(12, 10, 5), float32] */;
  %410 = log(%409) /* ty=Tensor[(12, 10, 5), float32] */;
  %411 = cast(meta[relay.Constant][43] /* ty=Tensor[(12, 10, 5), float32] */, dtype="float64") /* ty=Tensor[(12, 10, 5), float64] */;
  %412 = shape_of(%410, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%410, dtype="float64") /* ty=Tensor[(12, 10, 5), float64] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %415 = add(%413, %414) /* ty=Tensor[(12, 10, 5), float64] */;
  (%415,)
}

def @func_5381(%var_5379: Tensor[(600), float32]) -> (Tensor[(9, 10, 6), float64], Tensor[(12, 10, 5), float64], Tensor[(600), float32]) {
  %416 = @func_4856() /* ty=(Tensor[(1344), float32], Tensor[(540), float32], Tensor[(9, 10, 6), float64]) */;
  %417 = %416.2;
  %418 = cast(%417, dtype="float64") /* ty=Tensor[(9, 10, 6), float64] */;
  %419 = cast(%var_5379, dtype="float32") /* ty=Tensor[(600), float32] */;
  %420 = reshape(%419, newshape=[12, 10, 5]) /* ty=Tensor[(12, 10, 5), float32] */;
  %421 = @func_3384(%420) /* ty=(Tensor[(12, 10, 5), float64],) */;
  %422 = atan(%418) /* ty=Tensor[(9, 10, 6), float64] */;
  %423 = %421.0;
  (%422, %423, %var_5379)
}

def @func_5183(%var_5166: Tensor[(15, 4, 5), float64]) -> Tensor[(15, 4, 5), float32] {
  %424 = cast(%var_5166, dtype="float64") /* ty=Tensor[(15, 4, 5), float64] */;
  %425 = log10(%424) /* ty=Tensor[(15, 4, 5), float64] */;
  %426 = cast(%425, dtype="uint8") /* ty=Tensor[(15, 4, 5), uint8] */;
  %427 = shape_of(%var_5166, dtype="int32") /* ty=Tensor[(3), int32] */;
  %428 = cast(%var_5166, dtype="uint8") /* ty=Tensor[(15, 4, 5), uint8] */;
  %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %430 = bitwise_xor(%428, %429) /* ty=Tensor[(15, 4, 5), uint8] */;
  %431 = cast(%var_5166, dtype="float32") /* ty=Tensor[(15, 4, 5), float32] */;
  %432 = shape_of(%430, dtype="int32") /* ty=Tensor[(3), int32] */;
  %433 = cast(%430, dtype="float32") /* ty=Tensor[(15, 4, 5), float32] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  add(%433, %434) /* ty=Tensor[(15, 4, 5), float32] */
}

def @func_5195() -> (Tensor[(11, 12, 12), float64],) {
  %435 = @func_4512() /* ty=Tensor[(11, 12, 12), float64] */;
  (%435,)
}

def @func_3651(%var_3624: Tensor[(16, 4, 12), bool], %var_3625: Tensor[(16, 4, 12), bool]) -> Tensor[(16, 4, 12), bool] {
  %436 = cast(%var_3625, dtype="bool") /* ty=Tensor[(16, 4, 12), bool] */;
  %437 = shape_of(%var_3624, dtype="int32") /* ty=Tensor[(3), int32] */;
  %438 = cast(%var_3624, dtype="bool") /* ty=Tensor[(16, 4, 12), bool] */;
  %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%438, %439) /* ty=Tensor[(16, 4, 12), bool] */
}

def @func_5642(%var_5631: Tensor[(2, 4, 4), uint16]) -> (Tensor[(2, 4, 4), uint16], Tensor[(1344), float32], Tensor[(11, 12, 12), float64]) {
  %440 = cast(%var_5631, dtype="uint16") /* ty=Tensor[(2, 4, 4), uint16] */;
  %441 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(2, 4, 4), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(meta[relay.Constant][44] /* ty=Tensor[(2, 4, 4), uint16] */, dtype="uint16") /* ty=Tensor[(2, 4, 4), uint16] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %444 = @func_5195() /* ty=(Tensor[(11, 12, 12), float64],) */;
  %445 = bitwise_or(%442, %443) /* ty=Tensor[(2, 4, 4), uint16] */;
  %446 = @func_4709() /* ty=Tensor[(1344), float32] */;
  %447 = %444.0;
  (%445, %446, %447)
}

def @func_8166(%var_8131: Tensor[(540), float64]) -> (Tensor[(540), bool], Tensor[(12, 15, 5), bool], Tensor[(900), bool]) {
  %448 = @func_6729() /* ty=(Tensor[(540), float64],) */;
  %449 = %448.0;
  %450 = cast(%var_8131, dtype="bool") /* ty=Tensor[(540), bool] */;
  %451 = shape_of(%449, dtype="int32") /* ty=Tensor[(1), int32] */;
  %452 = cast(%449, dtype="bool") /* ty=Tensor[(540), bool] */;
  %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?), bool] */;
  %454 = cast(meta[relay.Constant][45] /* ty=Tensor[(900), bool] */, dtype="bool") /* ty=Tensor[(900), bool] */;
  %455 = cast(meta[relay.Constant][45] /* ty=Tensor[(900), bool] */, dtype="bool") /* ty=Tensor[(900), bool] */;
  %456 = reshape(%454, newshape=[12, 15, 5]) /* ty=Tensor[(12, 15, 5), bool] */;
  %457 = reshape(%455, newshape=[12, 15, 5]) /* ty=Tensor[(12, 15, 5), bool] */;
  %458 = @func_1419(%456, %457) /* ty=(Tensor[(12, 15, 5), bool],) */;
  %459 = not_equal(%452, %453) /* ty=Tensor[(540), bool] */;
  %460 = %458.0;
  (%459, %460, meta[relay.Constant][45] /* ty=Tensor[(900), bool] */)
}

def @func_5585(%var_5575: Tensor[(80), uint16]) -> (Tensor[(11, 12, 12), float64], Tensor[(5, 16, 11), bool], Tensor[(80), uint16]) {
  %461 = @func_5195() /* ty=(Tensor[(11, 12, 12), float64],) */;
  %462 = cast(%var_5575, dtype="uint16") /* ty=Tensor[(80), uint16] */;
  %463 = reshape(%462, newshape=[5, 16, 1]) /* ty=Tensor[(5, 16, 1), uint16] */;
  %464 = @func_864(%463) /* ty=(Tensor[(5, 16, 11), bool], Tensor[(5, 16, 1), float64]) */;
  %465 = %461.0;
  %466 = %464.0;
  (%465, %466, %var_5575)
}

def @func_6431(%var_6407: Tensor[(968), float64], %var_6408: Tensor[(5, 2), uint16]) -> (Tensor[(540), float64], Tensor[(560), float64], Tensor[(15, 3, 3), float64], Tensor[(100), uint16], Tensor[(968), float64], Tensor[(5, 2), uint16], Tensor[(100), uint16], Tensor[(15, 3, 3), float64], Tensor[(3, 7, 6), int32], Tensor[(126), int32]) {
  %467 = @func_5957() /* ty=(Tensor[(540), float64],) */;
  %468 = @func_5853() /* ty=(Tensor[(32), uint16], Tensor[(4, 10, 14), float64], Tensor[(560), float64], Tensor[(15, 3, 3), bool]) */;
  %469 = @func_4980() /* ty=(Tensor[(11, 12, 12), float64], Tensor[(15, 3, 3), float64], Tensor[(135, 1), float64]) */;
  %470 = cast(%var_6407, dtype="float64") /* ty=Tensor[(968), float64] */;
  %471 = cast(%var_6407, dtype="float64") /* ty=Tensor[(968), float64] */;
  %472 = cast(%var_6408, dtype="uint16") /* ty=Tensor[(5, 2), uint16] */;
  %473 = cast(meta[relay.Constant][46] /* ty=Tensor[(100), uint16] */, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %474 = reshape(%470, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), float64] */;
  %475 = reshape(%471, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), float64] */;
  %476 = reshape(%472, newshape=[10]) /* ty=Tensor[(10), uint16] */;
  %477 = reshape(%473, newshape=[100]) /* ty=Tensor[(100), uint16] */;
  %478 = @func_2085(%474, %475, %476, %477) /* ty=(Tensor[(7, 16, 12), float32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(1344, 1), float32], Tensor[(11, 11, 8), float64]) */;
  %479 = %469.1;
  %480 = cast(%479, dtype="float64") /* ty=Tensor[(15, 3, 3), float64] */;
  %481 = reshape(%480, newshape=[15, 3, 3]) /* ty=Tensor[(15, 3, 3), float64] */;
  %482 = cast(meta[relay.Constant][47] /* ty=Tensor[(126), int32] */, dtype="int32") /* ty=Tensor[(126), int32] */;
  %483 = cast(meta[relay.Constant][47] /* ty=Tensor[(126), int32] */, dtype="int32") /* ty=Tensor[(126), int32] */;
  %484 = reshape(%482, newshape=[3, 7, 6]) /* ty=Tensor[(3, 7, 6), int32] */;
  %485 = reshape(%483, newshape=[3, 7, 6]) /* ty=Tensor[(3, 7, 6), int32] */;
  %486 = @func_1184(%484, %485) /* ty=(Tensor[(3, 7, 6), int32],) */;
  %487 = %467.0;
  %488 = %468.2;
  %489 = %478.2;
  %490 = @func_790(%481) /* ty=Tensor[(15, 3, 3), float64] */;
  %491 = %486.0;
  (%487, %488, %479, %489, %var_6407, %var_6408, meta[relay.Constant][46] /* ty=Tensor[(100), uint16] */, %490, %491, meta[relay.Constant][47] /* ty=Tensor[(126), int32] */)
}

def @func_1088(%var_1065: Tensor[(11, 4, 4), float64], %var_1070: Tensor[(1344), float32]) -> (Tensor[(7, 16, 12), float32], Tensor[(1344), float32], Tensor[(11, 4, 4), bool]) {
  %492 = cast(%var_1070, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %493 = reshape(%492, newshape=[7, 16, 12]) /* ty=Tensor[(7, 16, 12), float32] */;
  %494 = cast(%var_1065, dtype="float64") /* ty=Tensor[(11, 4, 4), float64] */;
  %495 = acos(%494) /* ty=Tensor[(11, 4, 4), float64] */;
  %496 = cast(%var_1065, dtype="bool") /* ty=Tensor[(11, 4, 4), bool] */;
  %497 = shape_of(%495, dtype="int32") /* ty=Tensor[(3), int32] */;
  %498 = cast(%495, dtype="bool") /* ty=Tensor[(11, 4, 4), bool] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %500 = @func_637(%493) /* ty=Tensor[(7, 16, 12), float32] */;
  %501 = greater_equal(%498, %499) /* ty=Tensor[(11, 4, 4), bool] */;
  (%500, %var_1070, %501)
}

def @func_3188(%var_3176: Tensor[(1, 9, 9), uint32], %var_3184: Tensor[(10), uint16], %var_3185: Tensor[(100), uint16]) -> (Tensor[(?, 9, 9), uint32], Tensor[(1, 9, 9), float64], Tensor[(1344, 1), float32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(28, 48), float32]) {
  %502 = cast(%var_3176, dtype="uint32") /* ty=Tensor[(1, 9, 9), uint32] */;
  %503 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(1, 9, 9), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(meta[relay.Constant][48] /* ty=Tensor[(1, 9, 9), uint32] */, dtype="uint32") /* ty=Tensor[(1, 9, 9), uint32] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %506 = cast(meta[relay.Constant][48] /* ty=Tensor[(1, 9, 9), uint32] */, dtype="float64") /* ty=Tensor[(1, 9, 9), float64] */;
  %507 = cast(%var_3184, dtype="uint16") /* ty=Tensor[(10), uint16] */;
  %508 = cast(%var_3185, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %509 = cast(meta[relay.Constant][49] /* ty=Tensor[(28, 48), float32] */, dtype="float32") /* ty=Tensor[(28, 48), float32] */;
  %510 = reshape(%507, newshape=[1, 10]) /* ty=Tensor[(1, 10), uint16] */;
  %511 = reshape(%508, newshape=[10, 10]) /* ty=Tensor[(10, 10), uint16] */;
  %512 = reshape(%509, newshape=[1344, 1]) /* ty=Tensor[(1344, 1), float32] */;
  %513 = @func_751(%510, %511, %512) /* ty=(Tensor[(10, 10), bool], Tensor[(7, 16, 12), float32], Tensor[(1344, 1), float32], Tensor[(3, 13, 9), float64], Tensor[(351), float64], Tensor[(3, 13, 9), float64], Tensor[(3, 13, 9), float64]) */;
  %514 = left_shift(%504, %505) /* ty=Tensor[(?, 9, 9), uint32] */;
  %515 = log2(%506) /* ty=Tensor[(1, 9, 9), float64] */;
  %516 = %513.2;
  (%514, %515, %516, %var_3184, %var_3185, meta[relay.Constant][49] /* ty=Tensor[(28, 48), float32] */)
}

def @func_5957() -> (Tensor[(540), float64],) {
  %517 = @func_5538() /* ty=(Tensor[(540), float64],) */;
  %518 = %517.0;
  (%518,)
}

def @func_7847(%var_7833: int64, %var_7834: Tensor[(1, 14, 3), int64]) -> (Tensor[(?, 14, 3), float64], Tensor[(1, 14, 3), float32]) {
  %519 = cast(%var_7833, dtype="int64") /* ty=int64 */;
  %520 = cast(%var_7834, dtype="int64") /* ty=Tensor[(1, 14, 3), int64] */;
  %521 = bitwise_xor(%519, %520) /* ty=Tensor[(1, 14, 3), int64] */;
  %522 = cast(%var_7834, dtype="float64") /* ty=Tensor[(1, 14, 3), float64] */;
  %523 = shape_of(%521, dtype="int32") /* ty=Tensor[(3), int32] */;
  %524 = cast(%521, dtype="float64") /* ty=Tensor[(1, 14, 3), float64] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %526 = cast(%var_7834, dtype="float32") /* ty=Tensor[(1, 14, 3), float32] */;
  %527 = add(%524, %525) /* ty=Tensor[(?, 14, 3), float64] */;
  %528 = asin(%526) /* ty=Tensor[(1, 14, 3), float32] */;
  (%527, %528)
}

def @func_7696() -> Tensor[(1344), float32] {
  %529 = @func_4856() /* ty=(Tensor[(1344), float32], Tensor[(540), float32], Tensor[(9, 10, 6), float64]) */;
  %529.0
}

def @func_2653(%var_2629: Tensor[(10, 2, 11), float64]) -> (Tensor[(10, 2, 11), bool], Tensor[(10, 2, 11), float64]) {
  %530 = cast(%var_2629, dtype="bool") /* ty=Tensor[(10, 2, 11), bool] */;
  %531 = shape_of(meta[relay.Constant][50] /* ty=Tensor[(10, 2, 11), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %532 = cast(meta[relay.Constant][50] /* ty=Tensor[(10, 2, 11), float64] */, dtype="bool") /* ty=Tensor[(10, 2, 11), bool] */;
  %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %534 = cast(%var_2629, dtype="float64") /* ty=Tensor[(10, 2, 11), float64] */;
  %535 = greater(%532, %533) /* ty=Tensor[(10, 2, 11), bool] */;
  %536 = log2(%534) /* ty=Tensor[(10, 2, 11), float64] */;
  (%535, %536)
}

def @func_6227(%var_6196: Tensor[(11, 12, 12), float64], %var_6215: Tensor[(216), float32], %var_6216: Tensor[(1344), float32]) -> (Tensor[(11, 12, 12), uint32], Tensor[(?, 9, 9), uint32], Tensor[(216), float32], Tensor[(1344), float32], Tensor[(5, 20), uint16], Tensor[(2, 4, 4), float32]) {
  %537 = @func_4545() /* ty=(Tensor[(11, 12, 12), float64],) */;
  %538 = %537.0;
  %539 = cast(%var_6196, dtype="uint32") /* ty=Tensor[(11, 12, 12), uint32] */;
  %540 = shape_of(%538, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(%538, dtype="uint32") /* ty=Tensor[(11, 12, 12), uint32] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %543 = cast(%var_6215, dtype="float32") /* ty=Tensor[(216), float32] */;
  %544 = cast(%var_6216, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %545 = cast(meta[relay.Constant][51] /* ty=Tensor[(5, 20), uint16] */, dtype="uint16") /* ty=Tensor[(5, 20), uint16] */;
  %546 = cast(%var_6215, dtype="float32") /* ty=Tensor[(216), float32] */;
  %547 = reshape(%543, newshape=[8, 3, 9]) /* ty=Tensor[(8, 3, 9), float32] */;
  %548 = reshape(%544, newshape=[1344]) /* ty=Tensor[(1344), float32] */;
  %549 = reshape(%545, newshape=[100]) /* ty=Tensor[(100), uint16] */;
  %550 = reshape(%546, newshape=[8, 3, 9]) /* ty=Tensor[(8, 3, 9), float32] */;
  %551 = @func_4629(%547, %548, %549, %550) /* ty=(Tensor[(7, 16, 12), float32], Tensor[(1344), float32], Tensor[(1344, 1), float32], Tensor[(81), uint32], Tensor[(5, 2), uint16], Tensor[(100), uint16], Tensor[(16, 4, 12), bool], Tensor[(768), bool], Tensor[(?, 9, 9), uint32], Tensor[(8, 3, 9), uint32], Tensor[(100), uint16], Tensor[(8, 3, 9), float64]) */;
  %552 = @func_5728() /* ty=(Tensor[(540), float32], Tensor[(2, 4, 4), uint16], Tensor[(32), uint16], Tensor[(11, 12, 12), float32]) */;
  %553 = %552.1;
  %554 = cast(%553, dtype="float32") /* ty=Tensor[(2, 4, 4), float32] */;
  %555 = add(%541, %542) /* ty=Tensor[(11, 12, 12), uint32] */;
  %556 = %551.8;
  %557 = asin(%554) /* ty=Tensor[(2, 4, 4), float32] */;
  (%555, %556, %var_6215, %var_6216, meta[relay.Constant][51] /* ty=Tensor[(5, 20), uint16] */, %557)
}

def @func_5690() -> (Tensor[(1344), float32], Tensor[(11, 12, 12), float64]) {
  %558 = @func_4769() /* ty=(Tensor[(1344), float32],) */;
  %559 = @func_4545() /* ty=(Tensor[(11, 12, 12), float64],) */;
  %560 = %558.0;
  %561 = %559.0;
  (%560, %561)
}

def @func_8004(%var_7957: Tensor[(16, 5, 3), uint64], %var_7975: Tensor[(6, 44), uint32], %var_7982: Tensor[(16, 5, 3), uint64], %var_7999: Tensor[(16, 5, 3), float32]) -> (Tensor[(16, 5, 3), uint64], Tensor[(16, 5, 3), float32], Tensor[(6, 44), uint32], Tensor[(16, 5, 3), bool], Tensor[(16, 5, 3), bool], Tensor[(16, 5, 3), float64]) {
  %562 = cast(%var_7957, dtype="uint64") /* ty=Tensor[(16, 5, 3), uint64] */;
  %563 = shape_of(meta[relay.Constant][52] /* ty=Tensor[(16, 5, 3), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %564 = cast(meta[relay.Constant][52] /* ty=Tensor[(16, 5, 3), uint64] */, dtype="uint64") /* ty=Tensor[(16, 5, 3), uint64] */;
  %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %566 = cast(meta[relay.Constant][53] /* ty=Tensor[(16, 5, 3), uint64] */, dtype="float32") /* ty=Tensor[(16, 5, 3), float32] */;
  %567 = shape_of(%var_7957, dtype="int32") /* ty=Tensor[(3), int32] */;
  %568 = cast(%var_7957, dtype="float32") /* ty=Tensor[(16, 5, 3), float32] */;
  %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %570 = cast(%var_7982, dtype="bool") /* ty=Tensor[(16, 5, 3), bool] */;
  %571 = shape_of(%var_7957, dtype="int32") /* ty=Tensor[(3), int32] */;
  %572 = cast(%var_7957, dtype="bool") /* ty=Tensor[(16, 5, 3), bool] */;
  %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %574 = cast(%var_7975, dtype="uint32") /* ty=Tensor[(6, 44), uint32] */;
  %575 = reshape(%574, newshape=[264]) /* ty=Tensor[(264), uint32] */;
  %576 = @func_7319(%575) /* ty=(Tensor[(540), float32], Tensor[(12, 2, 11), bool], uint32, Tensor[(264), uint32]) */;
  %577 = %576.2;
  %578 = cast(meta[relay.Constant][53] /* ty=Tensor[(16, 5, 3), uint64] */, dtype="bool") /* ty=Tensor[(16, 5, 3), bool] */;
  %579 = cast(%577, dtype="bool") /* ty=bool */;
  %580 = cast(%var_7957, dtype="float64") /* ty=Tensor[(16, 5, 3), float64] */;
  %581 = atanh(%580) /* ty=Tensor[(16, 5, 3), float64] */;
  %582 = cast(%581, dtype="float32") /* ty=Tensor[(16, 5, 3), float32] */;
  %583 = cos(%582) /* ty=Tensor[(16, 5, 3), float32] */;
  %584 = cast(%var_7999, dtype="float64") /* ty=Tensor[(16, 5, 3), float64] */;
  %585 = shape_of(%583, dtype="int32") /* ty=Tensor[(3), int32] */;
  %586 = cast(%583, dtype="float64") /* ty=Tensor[(16, 5, 3), float64] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %588 = maximum(%564, %565) /* ty=Tensor[(16, 5, 3), uint64] */;
  %589 = power(%568, %569) /* ty=Tensor[(16, 5, 3), float32] */;
  %590 = equal(%572, %573) /* ty=Tensor[(16, 5, 3), bool] */;
  %591 = greater_equal(%578, %579) /* ty=Tensor[(16, 5, 3), bool] */;
  %592 = add(%586, %587) /* ty=Tensor[(16, 5, 3), float64] */;
  (%588, %589, %var_7975, %590, %591, %592)
}

def @func_6679(%var_6674: Tensor[(12, 12, 14), bool], %var_6675: Tensor[(12, 12, 14), bool]) -> (Tensor[(12, 12, 14), bool],) {
  %593 = cast(%var_6675, dtype="bool") /* ty=Tensor[(12, 12, 14), bool] */;
  %594 = shape_of(%var_6674, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(%var_6674, dtype="bool") /* ty=Tensor[(12, 12, 14), bool] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %597 = logical_or(%595, %596) /* ty=Tensor[(12, 12, 14), bool] */;
  (%597,)
}

def @func_5509() -> Tensor[(11, 12, 12), float32] {
  %598 = @func_4512() /* ty=Tensor[(11, 12, 12), float64] */;
  %599 = cast(%598, dtype="float32") /* ty=Tensor[(11, 12, 12), float32] */;
  acosh(%599) /* ty=Tensor[(11, 12, 12), float32] */
}

def @func_6981() -> Tensor[(11, 12, 12), float32] {
  @func_5509() /* ty=Tensor[(11, 12, 12), float32] */
}

def @func_4545() -> (Tensor[(11, 12, 12), float64],) {
  %600 = @func_4512() /* ty=Tensor[(11, 12, 12), float64] */;
  %601 = cast(%600, dtype="float64") /* ty=Tensor[(11, 12, 12), float64] */;
  %602 = asinh(%601) /* ty=Tensor[(11, 12, 12), float64] */;
  (%602,)
}

def @func_637(%var_629: Tensor[(7, 16, 12), float32]) -> Tensor[(7, 16, 12), float32] {
  %603 = cast(%var_629, dtype="float32") /* ty=Tensor[(7, 16, 12), float32] */;
  exp(%603) /* ty=Tensor[(7, 16, 12), float32] */
}

def @func_4187(%var_4149: Tensor[(10, 4, 5), uint32]) -> (Tensor[(10, 4, 5), uint32], Tensor[(3, 7, 6), int32], Tensor[(126), int32]) {
  %604 = cast(meta[relay.Constant][54] /* ty=Tensor[(10, 4, 5), uint32] */, dtype="uint32") /* ty=Tensor[(10, 4, 5), uint32] */;
  %605 = shape_of(%var_4149, dtype="int32") /* ty=Tensor[(3), int32] */;
  %606 = cast(%var_4149, dtype="uint32") /* ty=Tensor[(10, 4, 5), uint32] */;
  %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %608 = cast(meta[relay.Constant][55] /* ty=Tensor[(126), int32] */, dtype="int32") /* ty=Tensor[(126), int32] */;
  %609 = cast(meta[relay.Constant][55] /* ty=Tensor[(126), int32] */, dtype="int32") /* ty=Tensor[(126), int32] */;
  %610 = reshape(%608, newshape=[3, 7, 6]) /* ty=Tensor[(3, 7, 6), int32] */;
  %611 = reshape(%609, newshape=[3, 7, 6]) /* ty=Tensor[(3, 7, 6), int32] */;
  %612 = @func_1184(%610, %611) /* ty=(Tensor[(3, 7, 6), int32],) */;
  %613 = minimum(%606, %607) /* ty=Tensor[(10, 4, 5), uint32] */;
  %614 = %612.0;
  (%613, %614, meta[relay.Constant][55] /* ty=Tensor[(126), int32] */)
}

def @func_7798() -> (Tensor[(32), uint16],) {
  %615 = @func_5853() /* ty=(Tensor[(32), uint16], Tensor[(4, 10, 14), float64], Tensor[(560), float64], Tensor[(15, 3, 3), bool]) */;
  %616 = %615.0;
  (%616,)
}

def @func_6528(%var_6523: Tensor[(416), bool]) -> (Tensor[(11, 12, 12), float64], Tensor[(4, 8, 13), bool], Tensor[(416), bool]) {
  %617 = @func_6045() /* ty=(Tensor[(11, 12, 12), float64],) */;
  %618 = cast(%var_6523, dtype="bool") /* ty=Tensor[(416), bool] */;
  %619 = reshape(%618, newshape=[4, 8, 13]) /* ty=Tensor[(4, 8, 13), bool] */;
  %620 = %617.0;
  %621 = @func_6103(%619) /* ty=Tensor[(4, 8, 13), bool] */;
  (%620, %621, %var_6523)
}

def @func_6920() -> (Tensor[(540), float64],) {
  %622 = @func_6729() /* ty=(Tensor[(540), float64],) */;
  %623 = %622.0;
  (%623,)
}

def @func_282(%var_261: Tensor[(3, 13, 9), float64]) -> Tensor[(3, 13, 9), float64] {
  %624 = cast(%var_261, dtype="float64") /* ty=Tensor[(3, 13, 9), float64] */;
  %625 = erf(%624) /* ty=Tensor[(3, 13, 9), float64] */;
  %626 = cast(%var_261, dtype="float64") /* ty=Tensor[(3, 13, 9), float64] */;
  %627 = shape_of(%625, dtype="int32") /* ty=Tensor[(3), int32] */;
  %628 = cast(%625, dtype="float64") /* ty=Tensor[(3, 13, 9), float64] */;
  %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%628, %629) /* ty=Tensor[(3, 13, 9), float64] */
}

def @func_591(%var_578: Tensor[(7, 10, 2), int32], %var_579: Tensor[(7, 10, 2), int32], %var_587: Tensor[(7, 10, 2), int32]) -> (Tensor[(7, 10, 2), int32], Tensor[(3, 13, 9), float64], Tensor[(351), float64], Tensor[(7, 10, 2), int16]) {
  %630 = cast(%var_579, dtype="int32") /* ty=Tensor[(7, 10, 2), int32] */;
  %631 = shape_of(%var_578, dtype="int32") /* ty=Tensor[(3), int32] */;
  %632 = cast(%var_578, dtype="int32") /* ty=Tensor[(7, 10, 2), int32] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %634 = cast(meta[relay.Constant][56] /* ty=Tensor[(351), float64] */, dtype="float64") /* ty=Tensor[(351), float64] */;
  %635 = reshape(%634, newshape=[3, 13, 9]) /* ty=Tensor[(3, 13, 9), float64] */;
  %636 = cast(%var_587, dtype="int16") /* ty=Tensor[(7, 10, 2), int16] */;
  %637 = shape_of(%var_579, dtype="int32") /* ty=Tensor[(3), int32] */;
  %638 = cast(%var_579, dtype="int16") /* ty=Tensor[(7, 10, 2), int16] */;
  %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %640 = bitwise_xor(%632, %633) /* ty=Tensor[(7, 10, 2), int32] */;
  %641 = @func_282(%635) /* ty=Tensor[(3, 13, 9), float64] */;
  %642 = add(%638, %639) /* ty=Tensor[(7, 10, 2), int16] */;
  (%640, %641, meta[relay.Constant][56] /* ty=Tensor[(351), float64] */, %642)
}

def @func_3476(%var_3434: uint32, %var_3435: Tensor[(12, 2, 11), uint32]) -> (Tensor[(12, 15, 5), bool], Tensor[(9, 100), bool], Tensor[(12, 2, 11), bool], Tensor[(12, 2, 11), float32]) {
  %643 = cast(meta[relay.Constant][57] /* ty=Tensor[(9, 100), bool] */, dtype="bool") /* ty=Tensor[(9, 100), bool] */;
  %644 = cast(meta[relay.Constant][57] /* ty=Tensor[(9, 100), bool] */, dtype="bool") /* ty=Tensor[(9, 100), bool] */;
  %645 = reshape(%643, newshape=[12, 15, 5]) /* ty=Tensor[(12, 15, 5), bool] */;
  %646 = reshape(%644, newshape=[12, 15, 5]) /* ty=Tensor[(12, 15, 5), bool] */;
  %647 = @func_1419(%645, %646) /* ty=(Tensor[(12, 15, 5), bool],) */;
  %648 = cast(%var_3434, dtype="uint32") /* ty=uint32 */;
  %649 = cast(%var_3435, dtype="uint32") /* ty=Tensor[(12, 2, 11), uint32] */;
  %650 = multiply(%648, %649) /* ty=Tensor[(12, 2, 11), uint32] */;
  %651 = cast(%var_3434, dtype="bool") /* ty=bool */;
  %652 = cast(%650, dtype="bool") /* ty=Tensor[(12, 2, 11), bool] */;
  %653 = cast(%var_3435, dtype="float32") /* ty=Tensor[(12, 2, 11), float32] */;
  %654 = %647.0;
  %655 = not_equal(%651, %652) /* ty=Tensor[(12, 2, 11), bool] */;
  %656 = acosh(%653) /* ty=Tensor[(12, 2, 11), float32] */;
  (%654, meta[relay.Constant][57] /* ty=Tensor[(9, 100), bool] */, %655, %656)
}

def @func_2721(%var_2717: Tensor[(9, 10, 6), float32]) -> (Tensor[(9, 10, 6), float32],) {
  %657 = cast(%var_2717, dtype="float32") /* ty=Tensor[(9, 10, 6), float32] */;
  %658 = cosh(%657) /* ty=Tensor[(9, 10, 6), float32] */;
  (%658,)
}

def @func_5853() -> (Tensor[(32), uint16], Tensor[(4, 10, 14), float64], Tensor[(560), float64], Tensor[(15, 3, 3), bool]) {
  %659 = @func_5728() /* ty=(Tensor[(540), float32], Tensor[(2, 4, 4), uint16], Tensor[(32), uint16], Tensor[(11, 12, 12), float32]) */;
  %660 = cast(meta[relay.Constant][58] /* ty=Tensor[(560), float64] */, dtype="float64") /* ty=Tensor[(560), float64] */;
  %661 = reshape(%660, newshape=[4, 10, 14]) /* ty=Tensor[(4, 10, 14), float64] */;
  %662 = @func_2489(%661) /* ty=(Tensor[(4, 10, 14), float64],) */;
  %663 = cast(meta[relay.Constant][59] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %664 = reshape(%663, newshape=[15, 3, 3]) /* ty=Tensor[(15, 3, 3), float64] */;
  %665 = @func_790(%664) /* ty=Tensor[(15, 3, 3), float64] */;
  %666 = cast(meta[relay.Constant][59] /* ty=Tensor[(135), float64] */, dtype="bool") /* ty=Tensor[(135), bool] */;
  %667 = shape_of(%665, dtype="int32") /* ty=Tensor[(3), int32] */;
  %668 = cast(%665, dtype="bool") /* ty=Tensor[(15, 3, 3), bool] */;
  %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %670 = %659.2;
  %671 = %662.0;
  %672 = greater(%668, %669) /* ty=Tensor[(15, 3, 3), bool] */;
  (%670, %671, meta[relay.Constant][58] /* ty=Tensor[(560), float64] */, %672)
}

def @func_8241() -> Tensor[(11, 12, 12), float64] {
  %673 = @func_6573() /* ty=(Tensor[(11, 12, 12), float64],) */;
  %673.0
}

def @func_2085(%var_2047: Tensor[(11, 11, 8), float64], %var_2048: Tensor[(11, 11, 8), float64], %var_2057: Tensor[(10), uint16], %var_2058: Tensor[(100), uint16]) -> (Tensor[(7, 16, 12), float32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(1344, 1), float32], Tensor[(11, 11, 8), float64]) {
  %674 = cast(%var_2057, dtype="uint16") /* ty=Tensor[(10), uint16] */;
  %675 = cast(%var_2058, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %676 = cast(meta[relay.Constant][60] /* ty=Tensor[(1344, 1), float32] */, dtype="float32") /* ty=Tensor[(1344, 1), float32] */;
  %677 = reshape(%674, newshape=[1, 10]) /* ty=Tensor[(1, 10), uint16] */;
  %678 = reshape(%675, newshape=[10, 10]) /* ty=Tensor[(10, 10), uint16] */;
  %679 = reshape(%676, newshape=[1344, 1]) /* ty=Tensor[(1344, 1), float32] */;
  %680 = @func_751(%677, %678, %679) /* ty=(Tensor[(10, 10), bool], Tensor[(7, 16, 12), float32], Tensor[(1344, 1), float32], Tensor[(3, 13, 9), float64], Tensor[(351), float64], Tensor[(3, 13, 9), float64], Tensor[(3, 13, 9), float64]) */;
  %681 = cast(%var_2048, dtype="float64") /* ty=Tensor[(11, 11, 8), float64] */;
  %682 = log(%681) /* ty=Tensor[(11, 11, 8), float64] */;
  %683 = cast(%var_2048, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
  %684 = shape_of(%var_2047, dtype="int32") /* ty=Tensor[(3), int32] */;
  %685 = cast(%var_2047, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
  %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %687 = greater(%685, %686) /* ty=Tensor[(11, 11, 8), bool] */;
  %688 = cast(%687, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
  %689 = shape_of(%682, dtype="int32") /* ty=Tensor[(3), int32] */;
  %690 = cast(%682, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
  %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %692 = less_equal(%690, %691) /* ty=Tensor[(11, 11, 8), bool] */;
  %693 = cast(%692, dtype="float64") /* ty=Tensor[(11, 11, 8), float64] */;
  %694 = %680.1;
  %695 = asin(%693) /* ty=Tensor[(11, 11, 8), float64] */;
  (%694, %var_2057, %var_2058, meta[relay.Constant][60] /* ty=Tensor[(1344, 1), float32] */, %695)
}

def @func_1184(%var_1179: Tensor[(3, 7, 6), int32], %var_1180: Tensor[(3, 7, 6), int32]) -> (Tensor[(3, 7, 6), int32],) {
  %696 = cast(%var_1180, dtype="int32") /* ty=Tensor[(3, 7, 6), int32] */;
  %697 = shape_of(%var_1179, dtype="int32") /* ty=Tensor[(3), int32] */;
  %698 = cast(%var_1179, dtype="int32") /* ty=Tensor[(3, 7, 6), int32] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %700 = multiply(%698, %699) /* ty=Tensor[(3, 7, 6), int32] */;
  (%700,)
}

def @func_4925(%var_4859: Tensor[(13, 12, 10), int8], %var_4860: Tensor[(13, 12, 10), int8], %var_4891: Tensor[(100), uint16]) -> (Tensor[(13, 12, 10), uint16], Tensor[(12, 42), uint64], Tensor[(?, 9, 9), uint32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(11, 12, 12), float64], Tensor[(14, 12, 3), float64]) {
  %701 = cast(%var_4860, dtype="int8") /* ty=Tensor[(13, 12, 10), int8] */;
  %702 = shape_of(%var_4859, dtype="int32") /* ty=Tensor[(3), int32] */;
  %703 = cast(%var_4859, dtype="int8") /* ty=Tensor[(13, 12, 10), int8] */;
  %704 = dyn.reshape(%701, %702, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %705 = maximum(%703, %704) /* ty=Tensor[(13, 12, 10), int8] */;
  %706 = cast(%705, dtype="uint16") /* ty=Tensor[(13, 12, 10), uint16] */;
  %707 = shape_of(%var_4860, dtype="int32") /* ty=Tensor[(3), int32] */;
  %708 = cast(%var_4860, dtype="uint16") /* ty=Tensor[(13, 12, 10), uint16] */;
  %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %710 = cast(meta[relay.Constant][62] /* ty=Tensor[(10), uint16] */, dtype="uint16") /* ty=Tensor[(10), uint16] */;
  %711 = cast(%var_4891, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %712 = reshape(%710, newshape=[10]) /* ty=Tensor[(10), uint16] */;
  %713 = reshape(%711, newshape=[100]) /* ty=Tensor[(100), uint16] */;
  %714 = @func_3342(%712, %713) /* ty=(Tensor[(4, 10, 11), float32], Tensor[(?, 9, 9), uint32], Tensor[(81), uint32], Tensor[(10), uint16], Tensor[(100), uint16]) */;
  %715 = @func_4655() /* ty=(Tensor[(11, 12, 12), float64], Tensor[(7, 16, 12), float32], Tensor[(1344), float32]) */;
  %716 = cast(meta[relay.Constant][61] /* ty=Tensor[(12, 42), uint64] */, dtype="uint64") /* ty=Tensor[(12, 42), uint64] */;
  %717 = cast(meta[relay.Constant][61] /* ty=Tensor[(12, 42), uint64] */, dtype="uint64") /* ty=Tensor[(12, 42), uint64] */;
  %718 = reshape(%716, newshape=[14, 12, 3]) /* ty=Tensor[(14, 12, 3), uint64] */;
  %719 = reshape(%717, newshape=[14, 12, 3]) /* ty=Tensor[(14, 12, 3), uint64] */;
  %720 = @func_571(%718, %719) /* ty=(Tensor[(14, 12, 3), uint64],) */;
  %721 = %720.0;
  %722 = cast(%721, dtype="float64") /* ty=Tensor[(14, 12, 3), float64] */;
  %723 = bitwise_and(%708, %709) /* ty=Tensor[(13, 12, 10), uint16] */;
  %724 = %714.1;
  %725 = %715.0;
  %726 = exp(%722) /* ty=Tensor[(14, 12, 3), float64] */;
  (%723, meta[relay.Constant][61] /* ty=Tensor[(12, 42), uint64] */, %724, meta[relay.Constant][62] /* ty=Tensor[(10), uint16] */, %var_4891, %725, %726)
}

def @func_6652() -> (Tensor[(1344), float32], Tensor[(11, 12, 12), float64]) {
  %727 = @func_4769() /* ty=(Tensor[(1344), float32],) */;
  %728 = @func_6045() /* ty=(Tensor[(11, 12, 12), float64],) */;
  %729 = %728.0;
  %730 = cast(%729, dtype="float64") /* ty=Tensor[(11, 12, 12), float64] */;
  %731 = %727.0;
  %732 = sinh(%730) /* ty=Tensor[(11, 12, 12), float64] */;
  (%731, %732)
}

def @func_7656() -> (Tensor[(11, 12, 12), float32],) {
  %733 = @func_5509() /* ty=Tensor[(11, 12, 12), float32] */;
  (%733,)
}

def @func_5035(%var_5024: Tensor[(11, 12, 12), float64]) -> Tensor[(11, 12, 12), bool] {
  %734 = @func_4545() /* ty=(Tensor[(11, 12, 12), float64],) */;
  %735 = %734.0;
  %736 = cast(%var_5024, dtype="bool") /* ty=Tensor[(11, 12, 12), bool] */;
  %737 = shape_of(%735, dtype="int32") /* ty=Tensor[(3), int32] */;
  %738 = cast(%735, dtype="bool") /* ty=Tensor[(11, 12, 12), bool] */;
  %739 = dyn.reshape(%736, %737, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%738, %739) /* ty=Tensor[(11, 12, 12), bool] */
}

def @main(%var_8295: Tensor[(6, 14, 8), float64], %var_8296: Tensor[(6, 14, 8), float64]) -> Tensor[(6, 14, 8), float64] {
  %740 = cast(%var_8296, dtype="float64") /* ty=Tensor[(6, 14, 8), float64] */;
  %741 = shape_of(%var_8295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %742 = cast(%var_8295, dtype="float64") /* ty=Tensor[(6, 14, 8), float64] */;
  %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%742, %743) /* ty=Tensor[(6, 14, 8), float64] */
}

def @func_4980() -> (Tensor[(11, 12, 12), float64], Tensor[(15, 3, 3), float64], Tensor[(135, 1), float64]) {
  %744 = @func_4545() /* ty=(Tensor[(11, 12, 12), float64],) */;
  %745 = cast(meta[relay.Constant][63] /* ty=Tensor[(135, 1), float64] */, dtype="float64") /* ty=Tensor[(135, 1), float64] */;
  %746 = reshape(%745, newshape=[15, 3, 3]) /* ty=Tensor[(15, 3, 3), float64] */;
  %747 = %744.0;
  %748 = @func_790(%746) /* ty=Tensor[(15, 3, 3), float64] */;
  (%747, %748, meta[relay.Constant][63] /* ty=Tensor[(135, 1), float64] */)
}

def @func_7225(%var_7169: Tensor[(4, 11, 14), int32], %var_7189: Tensor[(300), float64], %var_7216: Tensor[(3, 7, 6), int32]) -> (Tensor[(4, 11, 14), int32], Tensor[(968), float64], Tensor[(10), uint16], Tensor[(540), float64], Tensor[(300), float64], Tensor[(3, 7, 6), bool]) {
  %749 = cast(meta[relay.Constant][64] /* ty=Tensor[(4, 11, 14), int32] */, dtype="int32") /* ty=Tensor[(4, 11, 14), int32] */;
  %750 = shape_of(%var_7169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %751 = cast(%var_7169, dtype="int32") /* ty=Tensor[(4, 11, 14), int32] */;
  %752 = dyn.reshape(%749, %750, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %753 = cast(%var_7189, dtype="float64") /* ty=Tensor[(300), float64] */;
  %754 = reshape(%753, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %755 = @func_6834(%754) /* ty=(Tensor[(540), float64], Tensor[(15, 4, 5), float32], Tensor[(300), float64]) */;
  %756 = cast(meta[relay.Constant][65] /* ty=Tensor[(968), float64] */, dtype="float64") /* ty=Tensor[(968), float64] */;
  %757 = cast(meta[relay.Constant][66] /* ty=Tensor[(10), uint16] */, dtype="uint16") /* ty=Tensor[(10), uint16] */;
  %758 = reshape(%756, newshape=[968]) /* ty=Tensor[(968), float64] */;
  %759 = reshape(%757, newshape=[5, 2]) /* ty=Tensor[(5, 2), uint16] */;
  %760 = @func_6431(%758, %759) /* ty=(Tensor[(540), float64], Tensor[(560), float64], Tensor[(15, 3, 3), float64], Tensor[(100), uint16], Tensor[(968), float64], Tensor[(5, 2), uint16], Tensor[(100), uint16], Tensor[(15, 3, 3), float64], Tensor[(3, 7, 6), int32], Tensor[(126), int32]) */;
  %761 = %760.8;
  %762 = cast(%var_7216, dtype="bool") /* ty=Tensor[(3, 7, 6), bool] */;
  %763 = shape_of(%761, dtype="int32") /* ty=Tensor[(3), int32] */;
  %764 = cast(%761, dtype="bool") /* ty=Tensor[(3, 7, 6), bool] */;
  %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %766 = add(%751, %752) /* ty=Tensor[(4, 11, 14), int32] */;
  %767 = %755.0;
  %768 = greater_equal(%764, %765) /* ty=Tensor[(3, 7, 6), bool] */;
  (%766, meta[relay.Constant][65] /* ty=Tensor[(968), float64] */, meta[relay.Constant][66] /* ty=Tensor[(10), uint16] */, %767, %var_7189, %768)
}

def @func_7616() -> (Tensor[(11, 12, 12), bool], Tensor[(540), float64], Tensor[(11, 12, 12), bool], Tensor[(11, 12, 12), float64], Tensor[(540), float64]) {
  %769 = @func_6920() /* ty=(Tensor[(540), float64],) */;
  %770 = @func_5434() /* ty=Tensor[(11, 12, 12), bool] */;
  %771 = cast(%770, dtype="float64") /* ty=Tensor[(11, 12, 12), float64] */;
  %772 = reshape(%771, newshape=[11, 12, 12]) /* ty=Tensor[(11, 12, 12), float64] */;
  %773 = @func_6846() /* ty=(Tensor[(11, 12, 12), float64],) */;
  %774 = %769.0;
  %775 = @func_5035(%772) /* ty=Tensor[(11, 12, 12), bool] */;
  %776 = %773.0;
  %777 = @func_6320() /* ty=Tensor[(540), float64] */;
  (%770, %774, %775, %776, %777)
}

def @func_6289() -> (Tensor[(540), float32],) {
  %778 = @func_4856() /* ty=(Tensor[(1344), float32], Tensor[(540), float32], Tensor[(9, 10, 6), float64]) */;
  %779 = %778.1;
  (%779,)
}

def @func_5434() -> Tensor[(11, 12, 12), bool] {
  %780 = @func_4545() /* ty=(Tensor[(11, 12, 12), float64],) */;
  %781 = %780.0;
  %782 = cast(%781, dtype="float32") /* ty=Tensor[(11, 12, 12), float32] */;
  %783 = log2(%782) /* ty=Tensor[(11, 12, 12), float32] */;
  %784 = cast(%781, dtype="bool") /* ty=Tensor[(11, 12, 12), bool] */;
  %785 = shape_of(%783, dtype="int32") /* ty=Tensor[(3), int32] */;
  %786 = cast(%783, dtype="bool") /* ty=Tensor[(11, 12, 12), bool] */;
  %787 = dyn.reshape(%784, %785, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%786, %787) /* ty=Tensor[(11, 12, 12), bool] */
}

def @func_7123() -> (Tensor[(1344), float32], Tensor[(540), float32], Tensor[(5, 12, 16), bool], Tensor[(960), int32], Tensor[(11, 12, 12), float64]) {
  %788 = @func_4856() /* ty=(Tensor[(1344), float32], Tensor[(540), float32], Tensor[(9, 10, 6), float64]) */;
  %789 = @func_6289() /* ty=(Tensor[(540), float32],) */;
  %790 = cast(meta[relay.Constant][67] /* ty=Tensor[(960), int32] */, dtype="int32") /* ty=Tensor[(960), int32] */;
  %791 = cast(meta[relay.Constant][67] /* ty=Tensor[(960), int32] */, dtype="int32") /* ty=Tensor[(960), int32] */;
  %792 = reshape(%790, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), int32] */;
  %793 = reshape(%791, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), int32] */;
  %794 = @func_6573() /* ty=(Tensor[(11, 12, 12), float64],) */;
  %795 = %788.0;
  %796 = %789.0;
  %797 = @func_6446(%792, %793) /* ty=Tensor[(5, 12, 16), bool] */;
  %798 = %794.0;
  (%795, %796, %797, meta[relay.Constant][67] /* ty=Tensor[(960), int32] */, %798)
}

def @func_4709() -> Tensor[(1344), float32] {
  %799 = @func_4655() /* ty=(Tensor[(11, 12, 12), float64], Tensor[(7, 16, 12), float32], Tensor[(1344), float32]) */;
  %799.2
}

def @func_4769() -> (Tensor[(1344), float32],) {
  %800 = @func_4709() /* ty=Tensor[(1344), float32] */;
  (%800,)
}

def @func_790(%var_786: Tensor[(15, 3, 3), float64]) -> Tensor[(15, 3, 3), float64] {
  %801 = cast(%var_786, dtype="float64") /* ty=Tensor[(15, 3, 3), float64] */;
  acosh(%801) /* ty=Tensor[(15, 3, 3), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5511() -> Tensor[(11, 12, 12), float32] {
  @func_5509() /* ty=Tensor[(11, 12, 12), float32] */
}

def @func_925(%var_923: int8, %var_924: Tensor[(12, 1), int8]) -> (Tensor[(12, 1), float64], Tensor[(12, 1), float32]) {
  %9 = fn (%var_909: int8, %var_910: Tensor[(12, 1), int8]) -> (Tensor[(12, 1), float64], Tensor[(12, 1), float32]) {
    %0 = cast(%var_909, dtype="float64") /* ty=float64 */;
    %1 = cast(%var_910, dtype="float64") /* ty=Tensor[(12, 1), float64] */;
    %2 = cast(%var_909, dtype="int8") /* ty=int8 */;
    %3 = cast(%var_910, dtype="int8") /* ty=Tensor[(12, 1), int8] */;
    %4 = multiply(%2, %3) /* ty=Tensor[(12, 1), int8] */;
    %5 = cast(%var_909, dtype="float32") /* ty=float32 */;
    %6 = cast(%4, dtype="float32") /* ty=Tensor[(12, 1), float32] */;
    %7 = power(%0, %1) /* ty=Tensor[(12, 1), float64] */;
    %8 = floor_mod(%5, %6) /* ty=Tensor[(12, 1), float32] */;
    (%7, %8)
  };
  %9(%var_923, %var_924) /* ty=(Tensor[(12, 1), float64], Tensor[(12, 1), float32]) */
}

def @func_574(%var_572: Tensor[(14, 12, 3), uint64], %var_573: Tensor[(14, 12, 3), uint64]) -> (Tensor[(14, 12, 3), uint64],) {
  %15 = fn (%var_560: Tensor[(14, 12, 3), uint64], %var_561: Tensor[(14, 12, 3), uint64]) -> (Tensor[(14, 12, 3), uint64],) {
    %10 = cast(%var_561, dtype="uint64") /* ty=Tensor[(14, 12, 3), uint64] */;
    %11 = shape_of(%var_560, dtype="int32") /* ty=Tensor[(3), int32] */;
    %12 = cast(%var_560, dtype="uint64") /* ty=Tensor[(14, 12, 3), uint64] */;
    %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %14 = subtract(%12, %13) /* ty=Tensor[(14, 12, 3), uint64] */;
    (%14,)
  };
  %15(%var_572, %var_573) /* ty=(Tensor[(14, 12, 3), uint64],) */
}

def @func_5730() -> (Tensor[(540), float32], Tensor[(2, 4, 4), uint16], Tensor[(32), uint16], Tensor[(11, 12, 12), float32]) {
  @func_5728() /* ty=(Tensor[(540), float32], Tensor[(2, 4, 4), uint16], Tensor[(32), uint16], Tensor[(11, 12, 12), float32]) */
}

def @func_3384(%var_3371: Tensor[(12, 10, 5), float32]) -> (Tensor[(12, 10, 5), float64],) {
  %16 = cast(%var_3371, dtype="float32") /* ty=Tensor[(12, 10, 5), float32] */;
  %17 = log(%16) /* ty=Tensor[(12, 10, 5), float32] */;
  %18 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 10, 5), float32] */, dtype="float64") /* ty=Tensor[(12, 10, 5), float64] */;
  %19 = shape_of(%17, dtype="int32") /* ty=Tensor[(3), int32] */;
  %20 = cast(%17, dtype="float64") /* ty=Tensor[(12, 10, 5), float64] */;
  %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %22 = add(%20, %21) /* ty=Tensor[(12, 10, 5), float64] */;
  (%22,)
}

def @func_755(%var_752: Tensor[(1, 10), uint16], %var_753: Tensor[(10, 10), uint16], %var_754: Tensor[(1344, 1), float32]) -> (Tensor[(10, 10), bool], Tensor[(7, 16, 12), float32], Tensor[(1344, 1), float32], Tensor[(3, 13, 9), float64], Tensor[(351), float64], Tensor[(3, 13, 9), float64], Tensor[(3, 13, 9), float64]) {
  %38 = fn (%var_719: Tensor[(1, 10), uint16], %var_720: Tensor[(10, 10), uint16], %var_725: Tensor[(1344, 1), float32]) -> (Tensor[(10, 10), bool], Tensor[(7, 16, 12), float32], Tensor[(1344, 1), float32], Tensor[(3, 13, 9), float64], Tensor[(351), float64], Tensor[(3, 13, 9), float64], Tensor[(3, 13, 9), float64]) {
    %23 = cast(%var_719, dtype="bool") /* ty=Tensor[(1, 10), bool] */;
    %24 = cast(%var_720, dtype="bool") /* ty=Tensor[(10, 10), bool] */;
    %25 = cast(%var_725, dtype="float32") /* ty=Tensor[(1344, 1), float32] */;
    %26 = reshape(%25, newshape=[7, 16, 12]) /* ty=Tensor[(7, 16, 12), float32] */;
    %27 = cast(meta[relay.Constant][1] /* ty=Tensor[(351), float64] */, dtype="float64") /* ty=Tensor[(351), float64] */;
    %28 = reshape(%27, newshape=[3, 13, 9]) /* ty=Tensor[(3, 13, 9), float64] */;
    %29 = @func_282(%28) /* ty=Tensor[(3, 13, 9), float64] */;
    %30 = cast(%29, dtype="float64") /* ty=Tensor[(3, 13, 9), float64] */;
    %31 = reshape(%30, newshape=[3, 13, 9]) /* ty=Tensor[(3, 13, 9), float64] */;
    %32 = cast(meta[relay.Constant][1] /* ty=Tensor[(351), float64] */, dtype="float64") /* ty=Tensor[(351), float64] */;
    %33 = reshape(%32, newshape=[3, 13, 9]) /* ty=Tensor[(3, 13, 9), float64] */;
    %34 = less(%23, %24) /* ty=Tensor[(10, 10), bool] */;
    %35 = @func_637(%26) /* ty=Tensor[(7, 16, 12), float32] */;
    %36 = @func_282(%31) /* ty=Tensor[(3, 13, 9), float64] */;
    %37 = @func_282(%33) /* ty=Tensor[(3, 13, 9), float64] */;
    (%34, %35, %var_725, %29, meta[relay.Constant][1] /* ty=Tensor[(351), float64] */, %36, %37)
  };
  %38(%var_752, %var_753, %var_754) /* ty=(Tensor[(10, 10), bool], Tensor[(7, 16, 12), float32], Tensor[(1344, 1), float32], Tensor[(3, 13, 9), float64], Tensor[(351), float64], Tensor[(3, 13, 9), float64], Tensor[(3, 13, 9), float64]) */
}

def @func_5539() -> (Tensor[(540), float64],) {
  %43 = fn () -> (Tensor[(540), float64],) {
    %39 = @func_4856() /* ty=(Tensor[(1344), float32], Tensor[(540), float32], Tensor[(9, 10, 6), float64]) */;
    %40 = %39.1;
    %41 = cast(%40, dtype="float64") /* ty=Tensor[(540), float64] */;
    %42 = atanh(%41) /* ty=Tensor[(540), float64] */;
    (%42,)
  };
  %43() /* ty=(Tensor[(540), float64],) */
}

def @func_6320() -> Tensor[(540), float64] {
  %44 = @func_5957() /* ty=(Tensor[(540), float64],) */;
  %44.0
}

def @func_6434(%var_6432: Tensor[(968), float64], %var_6433: Tensor[(5, 2), uint16]) -> (Tensor[(540), float64], Tensor[(560), float64], Tensor[(15, 3, 3), float64], Tensor[(100), uint16], Tensor[(968), float64], Tensor[(5, 2), uint16], Tensor[(100), uint16], Tensor[(15, 3, 3), float64], Tensor[(3, 7, 6), int32], Tensor[(126), int32]) {
  %70 = fn (%var_6407: Tensor[(968), float64], %var_6408: Tensor[(5, 2), uint16]) -> (Tensor[(540), float64], Tensor[(560), float64], Tensor[(15, 3, 3), float64], Tensor[(100), uint16], Tensor[(968), float64], Tensor[(5, 2), uint16], Tensor[(100), uint16], Tensor[(15, 3, 3), float64], Tensor[(3, 7, 6), int32], Tensor[(126), int32]) {
    %45 = @func_5957() /* ty=(Tensor[(540), float64],) */;
    %46 = @func_5853() /* ty=(Tensor[(32), uint16], Tensor[(4, 10, 14), float64], Tensor[(560), float64], Tensor[(15, 3, 3), bool]) */;
    %47 = @func_4980() /* ty=(Tensor[(11, 12, 12), float64], Tensor[(15, 3, 3), float64], Tensor[(135, 1), float64]) */;
    %48 = cast(%var_6407, dtype="float64") /* ty=Tensor[(968), float64] */;
    %49 = cast(%var_6407, dtype="float64") /* ty=Tensor[(968), float64] */;
    %50 = cast(%var_6408, dtype="uint16") /* ty=Tensor[(5, 2), uint16] */;
    %51 = cast(meta[relay.Constant][2] /* ty=Tensor[(100), uint16] */, dtype="uint16") /* ty=Tensor[(100), uint16] */;
    %52 = reshape(%48, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), float64] */;
    %53 = reshape(%49, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), float64] */;
    %54 = reshape(%50, newshape=[10]) /* ty=Tensor[(10), uint16] */;
    %55 = reshape(%51, newshape=[100]) /* ty=Tensor[(100), uint16] */;
    %56 = @func_2085(%52, %53, %54, %55) /* ty=(Tensor[(7, 16, 12), float32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(1344, 1), float32], Tensor[(11, 11, 8), float64]) */;
    %57 = %47.1;
    %58 = cast(%57, dtype="float64") /* ty=Tensor[(15, 3, 3), float64] */;
    %59 = reshape(%58, newshape=[15, 3, 3]) /* ty=Tensor[(15, 3, 3), float64] */;
    %60 = cast(meta[relay.Constant][3] /* ty=Tensor[(126), int32] */, dtype="int32") /* ty=Tensor[(126), int32] */;
    %61 = cast(meta[relay.Constant][3] /* ty=Tensor[(126), int32] */, dtype="int32") /* ty=Tensor[(126), int32] */;
    %62 = reshape(%60, newshape=[3, 7, 6]) /* ty=Tensor[(3, 7, 6), int32] */;
    %63 = reshape(%61, newshape=[3, 7, 6]) /* ty=Tensor[(3, 7, 6), int32] */;
    %64 = @func_1184(%62, %63) /* ty=(Tensor[(3, 7, 6), int32],) */;
    %65 = %45.0;
    %66 = %46.2;
    %67 = %56.2;
    %68 = @func_790(%59) /* ty=Tensor[(15, 3, 3), float64] */;
    %69 = %64.0;
    (%65, %66, %57, %67, %var_6407, %var_6408, meta[relay.Constant][2] /* ty=Tensor[(100), uint16] */, %68, %69, meta[relay.Constant][3] /* ty=Tensor[(126), int32] */)
  };
  %70(%var_6432, %var_6433) /* ty=(Tensor[(540), float64], Tensor[(560), float64], Tensor[(15, 3, 3), float64], Tensor[(100), uint16], Tensor[(968), float64], Tensor[(5, 2), uint16], Tensor[(100), uint16], Tensor[(15, 3, 3), float64], Tensor[(3, 7, 6), int32], Tensor[(126), int32]) */
}

def @func_591(%var_578: Tensor[(7, 10, 2), int32], %var_579: Tensor[(7, 10, 2), int32], %var_587: Tensor[(7, 10, 2), int32]) -> (Tensor[(7, 10, 2), int32], Tensor[(3, 13, 9), float64], Tensor[(351), float64], Tensor[(7, 10, 2), int16]) {
  %71 = cast(%var_579, dtype="int32") /* ty=Tensor[(7, 10, 2), int32] */;
  %72 = shape_of(%var_578, dtype="int32") /* ty=Tensor[(3), int32] */;
  %73 = cast(%var_578, dtype="int32") /* ty=Tensor[(7, 10, 2), int32] */;
  %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %75 = cast(meta[relay.Constant][4] /* ty=Tensor[(351), float64] */, dtype="float64") /* ty=Tensor[(351), float64] */;
  %76 = reshape(%75, newshape=[3, 13, 9]) /* ty=Tensor[(3, 13, 9), float64] */;
  %77 = cast(%var_587, dtype="int16") /* ty=Tensor[(7, 10, 2), int16] */;
  %78 = shape_of(%var_579, dtype="int32") /* ty=Tensor[(3), int32] */;
  %79 = cast(%var_579, dtype="int16") /* ty=Tensor[(7, 10, 2), int16] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %81 = bitwise_xor(%73, %74) /* ty=Tensor[(7, 10, 2), int32] */;
  %82 = @func_282(%76) /* ty=Tensor[(3, 13, 9), float64] */;
  %83 = add(%79, %80) /* ty=Tensor[(7, 10, 2), int16] */;
  (%81, %82, meta[relay.Constant][4] /* ty=Tensor[(351), float64] */, %83)
}

def @func_2721(%var_2717: Tensor[(9, 10, 6), float32]) -> (Tensor[(9, 10, 6), float32],) {
  %84 = cast(%var_2717, dtype="float32") /* ty=Tensor[(9, 10, 6), float32] */;
  %85 = cosh(%84) /* ty=Tensor[(9, 10, 6), float32] */;
  (%85,)
}

def @func_4512() -> Tensor[(11, 12, 12), float64] {
  %86 = cast(meta[relay.Constant][5] /* ty=Tensor[(11, 12, 12), float64] */, dtype="float64") /* ty=Tensor[(11, 12, 12), float64] */;
  sigmoid(%86) /* ty=Tensor[(11, 12, 12), float64] */
}

def @func_3346(%var_3344: Tensor[(10), uint16], %var_3345: Tensor[(100), uint16]) -> (Tensor[(4, 10, 11), float32], Tensor[(?, 9, 9), uint32], Tensor[(81), uint32], Tensor[(10), uint16], Tensor[(100), uint16]) {
  @func_3342(%var_3344, %var_3345) /* ty=(Tensor[(4, 10, 11), float32], Tensor[(?, 9, 9), uint32], Tensor[(81), uint32], Tensor[(10), uint16], Tensor[(100), uint16]) */
}

def @func_6135(%var_6134: Tensor[(468), int8]) -> (Tensor[(11, 12, 12), bool], Tensor[(540), float64], Tensor[(9, 4, 13), int8], Tensor[(468), int8]) {
  %95 = fn (%var_6127: Tensor[(468), int8]) -> (Tensor[(11, 12, 12), bool], Tensor[(540), float64], Tensor[(9, 4, 13), int8], Tensor[(468), int8]) {
    %87 = @func_5957() /* ty=(Tensor[(540), float64],) */;
    %88 = cast(%var_6127, dtype="int8") /* ty=Tensor[(468), int8] */;
    %89 = cast(%var_6127, dtype="int8") /* ty=Tensor[(468), int8] */;
    %90 = reshape(%88, newshape=[9, 4, 13]) /* ty=Tensor[(9, 4, 13), int8] */;
    %91 = reshape(%89, newshape=[9, 4, 13]) /* ty=Tensor[(9, 4, 13), int8] */;
    %92 = @func_5434() /* ty=Tensor[(11, 12, 12), bool] */;
    %93 = %87.0;
    %94 = @func_3780(%90, %91) /* ty=Tensor[(9, 4, 13), int8] */;
    (%92, %93, %94, %var_6127)
  };
  %95(%var_6134) /* ty=(Tensor[(11, 12, 12), bool], Tensor[(540), float64], Tensor[(9, 4, 13), int8], Tensor[(468), int8]) */
}

def @func_7141() -> Tensor[(540), float32] {
  %96 = @func_6289() /* ty=(Tensor[(540), float32],) */;
  %96.0
}

def @func_6682(%var_6680: Tensor[(12, 12, 14), bool], %var_6681: Tensor[(12, 12, 14), bool]) -> (Tensor[(12, 12, 14), bool],) {
  %102 = fn (%var_6674: Tensor[(12, 12, 14), bool], %var_6675: Tensor[(12, 12, 14), bool]) -> (Tensor[(12, 12, 14), bool],) {
    %97 = cast(%var_6675, dtype="bool") /* ty=Tensor[(12, 12, 14), bool] */;
    %98 = shape_of(%var_6674, dtype="int32") /* ty=Tensor[(3), int32] */;
    %99 = cast(%var_6674, dtype="bool") /* ty=Tensor[(12, 12, 14), bool] */;
    %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %101 = logical_or(%99, %100) /* ty=Tensor[(12, 12, 14), bool] */;
    (%101,)
  };
  %102(%var_6680, %var_6681) /* ty=(Tensor[(12, 12, 14), bool],) */
}

def @func_7851(%var_7849: int64, %var_7850: Tensor[(1, 14, 3), int64]) -> (Tensor[(?, 14, 3), float64], Tensor[(1, 14, 3), float32]) {
  @func_7847(%var_7849, %var_7850) /* ty=(Tensor[(?, 14, 3), float64], Tensor[(1, 14, 3), float32]) */
}

def @func_4189(%var_4188: Tensor[(10, 4, 5), uint32]) -> (Tensor[(10, 4, 5), uint32], Tensor[(3, 7, 6), int32], Tensor[(126), int32]) {
  %114 = fn (%var_4149: Tensor[(10, 4, 5), uint32]) -> (Tensor[(10, 4, 5), uint32], Tensor[(3, 7, 6), int32], Tensor[(126), int32]) {
    %103 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 4, 5), uint32] */, dtype="uint32") /* ty=Tensor[(10, 4, 5), uint32] */;
    %104 = shape_of(%var_4149, dtype="int32") /* ty=Tensor[(3), int32] */;
    %105 = cast(%var_4149, dtype="uint32") /* ty=Tensor[(10, 4, 5), uint32] */;
    %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %107 = cast(meta[relay.Constant][7] /* ty=Tensor[(126), int32] */, dtype="int32") /* ty=Tensor[(126), int32] */;
    %108 = cast(meta[relay.Constant][7] /* ty=Tensor[(126), int32] */, dtype="int32") /* ty=Tensor[(126), int32] */;
    %109 = reshape(%107, newshape=[3, 7, 6]) /* ty=Tensor[(3, 7, 6), int32] */;
    %110 = reshape(%108, newshape=[3, 7, 6]) /* ty=Tensor[(3, 7, 6), int32] */;
    %111 = @func_1184(%109, %110) /* ty=(Tensor[(3, 7, 6), int32],) */;
    %112 = minimum(%105, %106) /* ty=Tensor[(10, 4, 5), uint32] */;
    %113 = %111.0;
    (%112, %113, meta[relay.Constant][7] /* ty=Tensor[(126), int32] */)
  };
  %114(%var_4188) /* ty=(Tensor[(10, 4, 5), uint32], Tensor[(3, 7, 6), int32], Tensor[(126), int32]) */
}

def @func_5250(%var_5248: Tensor[(1, 900), bool]) -> (Tensor[(1344), float32], Tensor[(168), float32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(2, 672), float64], Tensor[(12, 15, 5), bool], Tensor[(1, 900), bool]) {
  %115 = @func_4655() /* ty=(Tensor[(11, 12, 12), float64], Tensor[(7, 16, 12), float32], Tensor[(1344), float32]) */;
  %116 = cast(meta[relay.Constant][8] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %117 = cast(meta[relay.Constant][9] /* ty=Tensor[(10), uint16] */, dtype="uint16") /* ty=Tensor[(10), uint16] */;
  %118 = cast(meta[relay.Constant][10] /* ty=Tensor[(100), uint16] */, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %119 = reshape(%116, newshape=[12, 2, 7]) /* ty=Tensor[(12, 2, 7), float32] */;
  %120 = reshape(%117, newshape=[10]) /* ty=Tensor[(10), uint16] */;
  %121 = reshape(%118, newshape=[100]) /* ty=Tensor[(100), uint16] */;
  %122 = @func_2161(%119, %120, %121) /* ty=(Tensor[(1344, 1), float32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(2, 672), float32], Tensor[(12, 2, 7), float64]) */;
  %123 = %122.3;
  %124 = cast(%123, dtype="float64") /* ty=Tensor[(2, 672), float64] */;
  %125 = cast(%var_5248, dtype="bool") /* ty=Tensor[(1, 900), bool] */;
  %126 = cast(%var_5248, dtype="bool") /* ty=Tensor[(1, 900), bool] */;
  %127 = reshape(%125, newshape=[12, 15, 5]) /* ty=Tensor[(12, 15, 5), bool] */;
  %128 = reshape(%126, newshape=[12, 15, 5]) /* ty=Tensor[(12, 15, 5), bool] */;
  %129 = @func_1419(%127, %128) /* ty=(Tensor[(12, 15, 5), bool],) */;
  %130 = %115.2;
  %131 = sin(%124) /* ty=Tensor[(2, 672), float64] */;
  %132 = %129.0;
  (%130, meta[relay.Constant][8] /* ty=Tensor[(168), float32] */, meta[relay.Constant][9] /* ty=Tensor[(10), uint16] */, meta[relay.Constant][10] /* ty=Tensor[(100), uint16] */, %131, %132, %var_5248)
}

def @func_5185(%var_5184: Tensor[(15, 4, 5), float64]) -> Tensor[(15, 4, 5), float32] {
  %144 = fn (%var_5166: Tensor[(15, 4, 5), float64]) -> Tensor[(15, 4, 5), float32] {
    %133 = cast(%var_5166, dtype="float64") /* ty=Tensor[(15, 4, 5), float64] */;
    %134 = log10(%133) /* ty=Tensor[(15, 4, 5), float64] */;
    %135 = cast(%134, dtype="uint8") /* ty=Tensor[(15, 4, 5), uint8] */;
    %136 = shape_of(%var_5166, dtype="int32") /* ty=Tensor[(3), int32] */;
    %137 = cast(%var_5166, dtype="uint8") /* ty=Tensor[(15, 4, 5), uint8] */;
    %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %139 = bitwise_xor(%137, %138) /* ty=Tensor[(15, 4, 5), uint8] */;
    %140 = cast(%var_5166, dtype="float32") /* ty=Tensor[(15, 4, 5), float32] */;
    %141 = shape_of(%139, dtype="int32") /* ty=Tensor[(3), int32] */;
    %142 = cast(%139, dtype="float32") /* ty=Tensor[(15, 4, 5), float32] */;
    %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    add(%142, %143) /* ty=Tensor[(15, 4, 5), float32] */
  };
  %144(%var_5184) /* ty=Tensor[(15, 4, 5), float32] */
}

def @func_3387(%var_3385: Tensor[(12, 10, 5), float32]) -> (Tensor[(12, 10, 5), float64],) {
  @func_3384(%var_3385) /* ty=(Tensor[(12, 10, 5), float64],) */
}

def @func_4362(%var_4361: Tensor[(15, 13, 10), uint64]) -> (Tensor[(15, 13, 10), bool],) {
  %150 = fn (%var_4355: Tensor[(15, 13, 10), uint64]) -> (Tensor[(15, 13, 10), bool],) {
    %145 = cast(meta[relay.Constant][11] /* ty=Tensor[(15, 13, 10), uint64] */, dtype="bool") /* ty=Tensor[(15, 13, 10), bool] */;
    %146 = shape_of(%var_4355, dtype="int32") /* ty=Tensor[(3), int32] */;
    %147 = cast(%var_4355, dtype="bool") /* ty=Tensor[(15, 13, 10), bool] */;
    %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %149 = equal(%147, %148) /* ty=Tensor[(15, 13, 10), bool] */;
    (%149,)
  };
  %150(%var_4361) /* ty=(Tensor[(15, 13, 10), bool],) */
}

def @func_2352(%var_2350: Tensor[(2, 16, 3), float64], %var_2351: Tensor[(8, 24), int32]) -> (Tensor[(5, 16, 11), bool], Tensor[(80), uint16], Tensor[(2, 16, 3), float64], Tensor[(140), int32], Tensor[(8, 24), int32], Tensor[(10), uint16], Tensor[(1344), float32], Tensor[(5, 28), int32], Tensor[(900), bool], Tensor[(2, 16, 3), float32]) {
  @func_2348(%var_2350, %var_2351) /* ty=(Tensor[(5, 16, 11), bool], Tensor[(80), uint16], Tensor[(2, 16, 3), float64], Tensor[(140), int32], Tensor[(8, 24), int32], Tensor[(10), uint16], Tensor[(1344), float32], Tensor[(5, 28), int32], Tensor[(900), bool], Tensor[(2, 16, 3), float32]) */
}

def @func_4982() -> (Tensor[(11, 12, 12), float64], Tensor[(15, 3, 3), float64], Tensor[(135, 1), float64]) {
  @func_4980() /* ty=(Tensor[(11, 12, 12), float64], Tensor[(15, 3, 3), float64], Tensor[(135, 1), float64]) */
}

def @func_790(%var_786: Tensor[(15, 3, 3), float64]) -> Tensor[(15, 3, 3), float64] {
  %151 = cast(%var_786, dtype="float64") /* ty=Tensor[(15, 3, 3), float64] */;
  acosh(%151) /* ty=Tensor[(15, 3, 3), float64] */
}

def @func_4810(%var_4808: Tensor[(13, 8, 16), float32]) -> (Tensor[(13, 8, 16), float32], Tensor[(15, 13, 10), float32]) {
  @func_4807(%var_4808) /* ty=(Tensor[(13, 8, 16), float32], Tensor[(15, 13, 10), float32]) */
}

def @func_793(%var_791: Tensor[(15, 3, 3), float64]) -> Tensor[(15, 3, 3), float64] {
  @func_790(%var_791) /* ty=Tensor[(15, 3, 3), float64] */
}

def @func_5383(%var_5382: Tensor[(600), float32]) -> (Tensor[(9, 10, 6), float64], Tensor[(12, 10, 5), float64], Tensor[(600), float32]) {
  %160 = fn (%var_5379: Tensor[(600), float32]) -> (Tensor[(9, 10, 6), float64], Tensor[(12, 10, 5), float64], Tensor[(600), float32]) {
    %152 = @func_4856() /* ty=(Tensor[(1344), float32], Tensor[(540), float32], Tensor[(9, 10, 6), float64]) */;
    %153 = %152.2;
    %154 = cast(%153, dtype="float64") /* ty=Tensor[(9, 10, 6), float64] */;
    %155 = cast(%var_5379, dtype="float32") /* ty=Tensor[(600), float32] */;
    %156 = reshape(%155, newshape=[12, 10, 5]) /* ty=Tensor[(12, 10, 5), float32] */;
    %157 = @func_3384(%156) /* ty=(Tensor[(12, 10, 5), float64],) */;
    %158 = atan(%154) /* ty=Tensor[(9, 10, 6), float64] */;
    %159 = %157.0;
    (%158, %159, %var_5379)
  };
  %160(%var_5382) /* ty=(Tensor[(9, 10, 6), float64], Tensor[(12, 10, 5), float64], Tensor[(600), float32]) */
}

def @func_5853() -> (Tensor[(32), uint16], Tensor[(4, 10, 14), float64], Tensor[(560), float64], Tensor[(15, 3, 3), bool]) {
  %161 = @func_5728() /* ty=(Tensor[(540), float32], Tensor[(2, 4, 4), uint16], Tensor[(32), uint16], Tensor[(11, 12, 12), float32]) */;
  %162 = cast(meta[relay.Constant][12] /* ty=Tensor[(560), float64] */, dtype="float64") /* ty=Tensor[(560), float64] */;
  %163 = reshape(%162, newshape=[4, 10, 14]) /* ty=Tensor[(4, 10, 14), float64] */;
  %164 = @func_2489(%163) /* ty=(Tensor[(4, 10, 14), float64],) */;
  %165 = cast(meta[relay.Constant][13] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %166 = reshape(%165, newshape=[15, 3, 3]) /* ty=Tensor[(15, 3, 3), float64] */;
  %167 = @func_790(%166) /* ty=Tensor[(15, 3, 3), float64] */;
  %168 = cast(meta[relay.Constant][13] /* ty=Tensor[(135), float64] */, dtype="bool") /* ty=Tensor[(135), bool] */;
  %169 = shape_of(%167, dtype="int32") /* ty=Tensor[(3), int32] */;
  %170 = cast(%167, dtype="bool") /* ty=Tensor[(15, 3, 3), bool] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %172 = %161.2;
  %173 = %164.0;
  %174 = greater(%170, %171) /* ty=Tensor[(15, 3, 3), bool] */;
  (%172, %173, meta[relay.Constant][12] /* ty=Tensor[(560), float64] */, %174)
}

def @func_6046() -> (Tensor[(11, 12, 12), float64],) {
  %177 = fn () -> (Tensor[(11, 12, 12), float64],) {
    %175 = @func_5195() /* ty=(Tensor[(11, 12, 12), float64],) */;
    %176 = %175.0;
    (%176,)
  };
  %177() /* ty=(Tensor[(11, 12, 12), float64],) */
}

def @func_6921() -> (Tensor[(540), float64],) {
  %180 = fn () -> (Tensor[(540), float64],) {
    %178 = @func_6729() /* ty=(Tensor[(540), float64],) */;
    %179 = %178.0;
    (%179,)
  };
  %180() /* ty=(Tensor[(540), float64],) */
}

def @func_5855() -> (Tensor[(32), uint16], Tensor[(4, 10, 14), float64], Tensor[(560), float64], Tensor[(15, 3, 3), bool]) {
  @func_5853() /* ty=(Tensor[(32), uint16], Tensor[(4, 10, 14), float64], Tensor[(560), float64], Tensor[(15, 3, 3), bool]) */
}

def @func_7756() -> (Tensor[(1344), float32], Tensor[(16, 4, 12), bool], Tensor[(2, 384), bool]) {
  %188 = fn () -> (Tensor[(1344), float32], Tensor[(16, 4, 12), bool], Tensor[(2, 384), bool]) {
    %181 = @func_4769() /* ty=(Tensor[(1344), float32],) */;
    %182 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 384), bool] */, dtype="bool") /* ty=Tensor[(2, 384), bool] */;
    %183 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 384), bool] */, dtype="bool") /* ty=Tensor[(2, 384), bool] */;
    %184 = reshape(%182, newshape=[16, 4, 12]) /* ty=Tensor[(16, 4, 12), bool] */;
    %185 = reshape(%183, newshape=[16, 4, 12]) /* ty=Tensor[(16, 4, 12), bool] */;
    %186 = %181.0;
    %187 = @func_3651(%184, %185) /* ty=Tensor[(16, 4, 12), bool] */;
    (%186, %187, meta[relay.Constant][14] /* ty=Tensor[(2, 384), bool] */)
  };
  %188() /* ty=(Tensor[(1344), float32], Tensor[(16, 4, 12), bool], Tensor[(2, 384), bool]) */
}

def @func_4858() -> (Tensor[(1344), float32], Tensor[(540), float32], Tensor[(9, 10, 6), float64]) {
  @func_4856() /* ty=(Tensor[(1344), float32], Tensor[(540), float32], Tensor[(9, 10, 6), float64]) */
}

def @func_4710() -> Tensor[(1344), float32] {
  %190 = fn () -> Tensor[(1344), float32] {
    %189 = @func_4655() /* ty=(Tensor[(11, 12, 12), float64], Tensor[(7, 16, 12), float32], Tensor[(1344), float32]) */;
    %189.2
  };
  %190() /* ty=Tensor[(1344), float32] */
}

def @func_7800() -> (Tensor[(32), uint16],) {
  @func_7798() /* ty=(Tensor[(32), uint16],) */
}

def @func_8169(%var_8167: Tensor[(540), float64]) -> (Tensor[(540), bool], Tensor[(12, 15, 5), bool], Tensor[(900), bool]) {
  @func_8166(%var_8167) /* ty=(Tensor[(540), bool], Tensor[(12, 15, 5), bool], Tensor[(900), bool]) */
}

def @func_8010(%var_8006: Tensor[(16, 5, 3), uint64], %var_8007: Tensor[(6, 44), uint32], %var_8008: Tensor[(16, 5, 3), uint64], %var_8009: Tensor[(16, 5, 3), float32]) -> (Tensor[(16, 5, 3), uint64], Tensor[(16, 5, 3), float32], Tensor[(6, 44), uint32], Tensor[(16, 5, 3), bool], Tensor[(16, 5, 3), bool], Tensor[(16, 5, 3), float64]) {
  @func_8004(%var_8006, %var_8007, %var_8008, %var_8009) /* ty=(Tensor[(16, 5, 3), uint64], Tensor[(16, 5, 3), float32], Tensor[(6, 44), uint32], Tensor[(16, 5, 3), bool], Tensor[(16, 5, 3), bool], Tensor[(16, 5, 3), float64]) */
}

def @func_6450(%var_6448: Tensor[(5, 12, 16), int32], %var_6449: Tensor[(5, 12, 16), int32]) -> Tensor[(5, 12, 16), bool] {
  @func_6446(%var_6448, %var_6449) /* ty=Tensor[(5, 12, 16), bool] */
}

def @func_7618() -> (Tensor[(11, 12, 12), bool], Tensor[(540), float64], Tensor[(11, 12, 12), bool], Tensor[(11, 12, 12), float64], Tensor[(540), float64]) {
  @func_7616() /* ty=(Tensor[(11, 12, 12), bool], Tensor[(540), float64], Tensor[(11, 12, 12), bool], Tensor[(11, 12, 12), float64], Tensor[(540), float64]) */
}

def @func_6653() -> (Tensor[(1344), float32], Tensor[(11, 12, 12), float64]) {
  %197 = fn () -> (Tensor[(1344), float32], Tensor[(11, 12, 12), float64]) {
    %191 = @func_4769() /* ty=(Tensor[(1344), float32],) */;
    %192 = @func_6045() /* ty=(Tensor[(11, 12, 12), float64],) */;
    %193 = %192.0;
    %194 = cast(%193, dtype="float64") /* ty=Tensor[(11, 12, 12), float64] */;
    %195 = %191.0;
    %196 = sinh(%194) /* ty=Tensor[(11, 12, 12), float64] */;
    (%195, %196)
  };
  %197() /* ty=(Tensor[(1344), float32], Tensor[(11, 12, 12), float64]) */
}

def @func_4980() -> (Tensor[(11, 12, 12), float64], Tensor[(15, 3, 3), float64], Tensor[(135, 1), float64]) {
  %198 = @func_4545() /* ty=(Tensor[(11, 12, 12), float64],) */;
  %199 = cast(meta[relay.Constant][15] /* ty=Tensor[(135, 1), float64] */, dtype="float64") /* ty=Tensor[(135, 1), float64] */;
  %200 = reshape(%199, newshape=[15, 3, 3]) /* ty=Tensor[(15, 3, 3), float64] */;
  %201 = %198.0;
  %202 = @func_790(%200) /* ty=Tensor[(15, 3, 3), float64] */;
  (%201, %202, meta[relay.Constant][15] /* ty=Tensor[(135, 1), float64] */)
}

def @func_837(%var_836: Tensor[(7, 8, 9), float32]) -> Tensor[(7, 8, 9), float32] {
  %204 = fn (%var_823: Tensor[(7, 8, 9), float32]) -> Tensor[(7, 8, 9), float32] {
    %203 = cast(%var_823, dtype="float32") /* ty=Tensor[(7, 8, 9), float32] */;
    atanh(%203) /* ty=Tensor[(7, 8, 9), float32] */
  };
  %204(%var_836) /* ty=Tensor[(7, 8, 9), float32] */
}

def @func_7229(%var_7226: Tensor[(4, 11, 14), int32], %var_7227: Tensor[(300), float64], %var_7228: Tensor[(3, 7, 6), int32]) -> (Tensor[(4, 11, 14), int32], Tensor[(968), float64], Tensor[(10), uint16], Tensor[(540), float64], Tensor[(300), float64], Tensor[(3, 7, 6), bool]) {
  %225 = fn (%var_7169: Tensor[(4, 11, 14), int32], %var_7189: Tensor[(300), float64], %var_7216: Tensor[(3, 7, 6), int32]) -> (Tensor[(4, 11, 14), int32], Tensor[(968), float64], Tensor[(10), uint16], Tensor[(540), float64], Tensor[(300), float64], Tensor[(3, 7, 6), bool]) {
    %205 = cast(meta[relay.Constant][16] /* ty=Tensor[(4, 11, 14), int32] */, dtype="int32") /* ty=Tensor[(4, 11, 14), int32] */;
    %206 = shape_of(%var_7169, dtype="int32") /* ty=Tensor[(3), int32] */;
    %207 = cast(%var_7169, dtype="int32") /* ty=Tensor[(4, 11, 14), int32] */;
    %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %209 = cast(%var_7189, dtype="float64") /* ty=Tensor[(300), float64] */;
    %210 = reshape(%209, newshape=[300]) /* ty=Tensor[(300), float64] */;
    %211 = @func_6834(%210) /* ty=(Tensor[(540), float64], Tensor[(15, 4, 5), float32], Tensor[(300), float64]) */;
    %212 = cast(meta[relay.Constant][17] /* ty=Tensor[(968), float64] */, dtype="float64") /* ty=Tensor[(968), float64] */;
    %213 = cast(meta[relay.Constant][18] /* ty=Tensor[(10), uint16] */, dtype="uint16") /* ty=Tensor[(10), uint16] */;
    %214 = reshape(%212, newshape=[968]) /* ty=Tensor[(968), float64] */;
    %215 = reshape(%213, newshape=[5, 2]) /* ty=Tensor[(5, 2), uint16] */;
    %216 = @func_6431(%214, %215) /* ty=(Tensor[(540), float64], Tensor[(560), float64], Tensor[(15, 3, 3), float64], Tensor[(100), uint16], Tensor[(968), float64], Tensor[(5, 2), uint16], Tensor[(100), uint16], Tensor[(15, 3, 3), float64], Tensor[(3, 7, 6), int32], Tensor[(126), int32]) */;
    %217 = %216.8;
    %218 = cast(%var_7216, dtype="bool") /* ty=Tensor[(3, 7, 6), bool] */;
    %219 = shape_of(%217, dtype="int32") /* ty=Tensor[(3), int32] */;
    %220 = cast(%217, dtype="bool") /* ty=Tensor[(3, 7, 6), bool] */;
    %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %222 = add(%207, %208) /* ty=Tensor[(4, 11, 14), int32] */;
    %223 = %211.0;
    %224 = greater_equal(%220, %221) /* ty=Tensor[(3, 7, 6), bool] */;
    (%222, meta[relay.Constant][17] /* ty=Tensor[(968), float64] */, meta[relay.Constant][18] /* ty=Tensor[(10), uint16] */, %223, %var_7189, %224)
  };
  %225(%var_7226, %var_7227, %var_7228) /* ty=(Tensor[(4, 11, 14), int32], Tensor[(968), float64], Tensor[(10), uint16], Tensor[(540), float64], Tensor[(300), float64], Tensor[(3, 7, 6), bool]) */
}

def @func_5436() -> Tensor[(11, 12, 12), bool] {
  @func_5434() /* ty=Tensor[(11, 12, 12), bool] */
}

def @func_7847(%var_7833: int64, %var_7834: Tensor[(1, 14, 3), int64]) -> (Tensor[(?, 14, 3), float64], Tensor[(1, 14, 3), float32]) {
  %226 = cast(%var_7833, dtype="int64") /* ty=int64 */;
  %227 = cast(%var_7834, dtype="int64") /* ty=Tensor[(1, 14, 3), int64] */;
  %228 = bitwise_xor(%226, %227) /* ty=Tensor[(1, 14, 3), int64] */;
  %229 = cast(%var_7834, dtype="float64") /* ty=Tensor[(1, 14, 3), float64] */;
  %230 = shape_of(%228, dtype="int32") /* ty=Tensor[(3), int32] */;
  %231 = cast(%228, dtype="float64") /* ty=Tensor[(1, 14, 3), float64] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %233 = cast(%var_7834, dtype="float32") /* ty=Tensor[(1, 14, 3), float32] */;
  %234 = add(%231, %232) /* ty=Tensor[(?, 14, 3), float64] */;
  %235 = asin(%233) /* ty=Tensor[(1, 14, 3), float32] */;
  (%234, %235)
}

def @func_7143() -> Tensor[(540), float32] {
  @func_7141() /* ty=Tensor[(540), float32] */
}

def @func_4856() -> (Tensor[(1344), float32], Tensor[(540), float32], Tensor[(9, 10, 6), float64]) {
  %236 = cast(meta[relay.Constant][19] /* ty=Tensor[(540), float32] */, dtype="float32") /* ty=Tensor[(540), float32] */;
  %237 = reshape(%236, newshape=[9, 10, 6]) /* ty=Tensor[(9, 10, 6), float32] */;
  %238 = @func_2721(%237) /* ty=(Tensor[(9, 10, 6), float32],) */;
  %239 = %238.0;
  %240 = cast(%239, dtype="float64") /* ty=Tensor[(9, 10, 6), float64] */;
  %241 = @func_4709() /* ty=Tensor[(1344), float32] */;
  %242 = sin(%240) /* ty=Tensor[(9, 10, 6), float64] */;
  (%241, meta[relay.Constant][19] /* ty=Tensor[(540), float32] */, %242)
}

def @func_7125() -> (Tensor[(1344), float32], Tensor[(540), float32], Tensor[(5, 12, 16), bool], Tensor[(960), int32], Tensor[(11, 12, 12), float64]) {
  @func_7123() /* ty=(Tensor[(1344), float32], Tensor[(540), float32], Tensor[(5, 12, 16), bool], Tensor[(960), int32], Tensor[(11, 12, 12), float64]) */
}

def @func_2724(%var_2722: Tensor[(9, 10, 6), float32]) -> (Tensor[(9, 10, 6), float32],) {
  @func_2721(%var_2722) /* ty=(Tensor[(9, 10, 6), float32],) */
}

def @func_3784(%var_3782: Tensor[(9, 4, 13), int8], %var_3783: Tensor[(9, 4, 13), int8]) -> Tensor[(9, 4, 13), int8] {
  @func_3780(%var_3782, %var_3783) /* ty=Tensor[(9, 4, 13), int8] */
}

def @func_5585(%var_5575: Tensor[(80), uint16]) -> (Tensor[(11, 12, 12), float64], Tensor[(5, 16, 11), bool], Tensor[(80), uint16]) {
  %243 = @func_5195() /* ty=(Tensor[(11, 12, 12), float64],) */;
  %244 = cast(%var_5575, dtype="uint16") /* ty=Tensor[(80), uint16] */;
  %245 = reshape(%244, newshape=[5, 16, 1]) /* ty=Tensor[(5, 16, 1), uint16] */;
  %246 = @func_864(%245) /* ty=(Tensor[(5, 16, 11), bool], Tensor[(5, 16, 1), float64]) */;
  %247 = %243.0;
  %248 = %246.0;
  (%247, %248, %var_5575)
}

def @func_3342(%var_3336: Tensor[(10), uint16], %var_3337: Tensor[(100), uint16]) -> (Tensor[(4, 10, 11), float32], Tensor[(?, 9, 9), uint32], Tensor[(81), uint32], Tensor[(10), uint16], Tensor[(100), uint16]) {
  %249 = cast(meta[relay.Constant][20] /* ty=Tensor[(4, 10, 11), float32] */, dtype="float32") /* ty=Tensor[(4, 10, 11), float32] */;
  %250 = cast(meta[relay.Constant][21] /* ty=Tensor[(81), uint32] */, dtype="uint32") /* ty=Tensor[(81), uint32] */;
  %251 = cast(%var_3336, dtype="uint16") /* ty=Tensor[(10), uint16] */;
  %252 = cast(%var_3337, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %253 = reshape(%250, newshape=[1, 9, 9]) /* ty=Tensor[(1, 9, 9), uint32] */;
  %254 = reshape(%251, newshape=[10]) /* ty=Tensor[(10), uint16] */;
  %255 = reshape(%252, newshape=[100]) /* ty=Tensor[(100), uint16] */;
  %256 = @func_3188(%253, %254, %255) /* ty=(Tensor[(?, 9, 9), uint32], Tensor[(1, 9, 9), float64], Tensor[(1344, 1), float32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(28, 48), float32]) */;
  %257 = erf(%249) /* ty=Tensor[(4, 10, 11), float32] */;
  %258 = %256.0;
  (%257, %258, meta[relay.Constant][21] /* ty=Tensor[(81), uint32] */, %var_3336, %var_3337)
}

def @func_3780(%var_3759: Tensor[(9, 4, 13), int8], %var_3760: Tensor[(9, 4, 13), int8]) -> Tensor[(9, 4, 13), int8] {
  %259 = cast(%var_3760, dtype="int8") /* ty=Tensor[(9, 4, 13), int8] */;
  %260 = shape_of(%var_3759, dtype="int32") /* ty=Tensor[(3), int32] */;
  %261 = cast(%var_3759, dtype="int8") /* ty=Tensor[(9, 4, 13), int8] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_xor(%261, %262) /* ty=Tensor[(9, 4, 13), int8] */
}

def @func_284(%var_283: Tensor[(3, 13, 9), float64]) -> Tensor[(3, 13, 9), float64] {
  %269 = fn (%var_261: Tensor[(3, 13, 9), float64]) -> Tensor[(3, 13, 9), float64] {
    %263 = cast(%var_261, dtype="float64") /* ty=Tensor[(3, 13, 9), float64] */;
    %264 = erf(%263) /* ty=Tensor[(3, 13, 9), float64] */;
    %265 = cast(%var_261, dtype="float64") /* ty=Tensor[(3, 13, 9), float64] */;
    %266 = shape_of(%264, dtype="int32") /* ty=Tensor[(3), int32] */;
    %267 = cast(%264, dtype="float64") /* ty=Tensor[(3, 13, 9), float64] */;
    %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    divide(%267, %268) /* ty=Tensor[(3, 13, 9), float64] */
  };
  %269(%var_283) /* ty=Tensor[(3, 13, 9), float64] */
}

def @func_4770() -> (Tensor[(1344), float32],) {
  %271 = fn () -> (Tensor[(1344), float32],) {
    %270 = @func_4709() /* ty=Tensor[(1344), float32] */;
    (%270,)
  };
  %271() /* ty=(Tensor[(1344), float32],) */
}

def @func_1419(%var_1409: Tensor[(12, 15, 5), bool], %var_1410: Tensor[(12, 15, 5), bool]) -> (Tensor[(12, 15, 5), bool],) {
  %272 = cast(%var_1410, dtype="bool") /* ty=Tensor[(12, 15, 5), bool] */;
  %273 = shape_of(%var_1409, dtype="int32") /* ty=Tensor[(3), int32] */;
  %274 = cast(%var_1409, dtype="bool") /* ty=Tensor[(12, 15, 5), bool] */;
  %275 = dyn.reshape(%272, %273, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %276 = logical_or(%274, %275) /* ty=Tensor[(12, 15, 5), bool] */;
  (%276,)
}

def @func_2653(%var_2629: Tensor[(10, 2, 11), float64]) -> (Tensor[(10, 2, 11), bool], Tensor[(10, 2, 11), float64]) {
  %277 = cast(%var_2629, dtype="bool") /* ty=Tensor[(10, 2, 11), bool] */;
  %278 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(10, 2, 11), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %279 = cast(meta[relay.Constant][22] /* ty=Tensor[(10, 2, 11), float64] */, dtype="bool") /* ty=Tensor[(10, 2, 11), bool] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %281 = cast(%var_2629, dtype="float64") /* ty=Tensor[(10, 2, 11), float64] */;
  %282 = greater(%279, %280) /* ty=Tensor[(10, 2, 11), bool] */;
  %283 = log2(%281) /* ty=Tensor[(10, 2, 11), float64] */;
  (%282, %283)
}

def @func_5196() -> (Tensor[(11, 12, 12), float64],) {
  %285 = fn () -> (Tensor[(11, 12, 12), float64],) {
    %284 = @func_4512() /* ty=Tensor[(11, 12, 12), float64] */;
    (%284,)
  };
  %285() /* ty=(Tensor[(11, 12, 12), float64],) */
}

def @func_6227(%var_6196: Tensor[(11, 12, 12), float64], %var_6215: Tensor[(216), float32], %var_6216: Tensor[(1344), float32]) -> (Tensor[(11, 12, 12), uint32], Tensor[(?, 9, 9), uint32], Tensor[(216), float32], Tensor[(1344), float32], Tensor[(5, 20), uint16], Tensor[(2, 4, 4), float32]) {
  %286 = @func_4545() /* ty=(Tensor[(11, 12, 12), float64],) */;
  %287 = %286.0;
  %288 = cast(%var_6196, dtype="uint32") /* ty=Tensor[(11, 12, 12), uint32] */;
  %289 = shape_of(%287, dtype="int32") /* ty=Tensor[(3), int32] */;
  %290 = cast(%287, dtype="uint32") /* ty=Tensor[(11, 12, 12), uint32] */;
  %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %292 = cast(%var_6215, dtype="float32") /* ty=Tensor[(216), float32] */;
  %293 = cast(%var_6216, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %294 = cast(meta[relay.Constant][23] /* ty=Tensor[(5, 20), uint16] */, dtype="uint16") /* ty=Tensor[(5, 20), uint16] */;
  %295 = cast(%var_6215, dtype="float32") /* ty=Tensor[(216), float32] */;
  %296 = reshape(%292, newshape=[8, 3, 9]) /* ty=Tensor[(8, 3, 9), float32] */;
  %297 = reshape(%293, newshape=[1344]) /* ty=Tensor[(1344), float32] */;
  %298 = reshape(%294, newshape=[100]) /* ty=Tensor[(100), uint16] */;
  %299 = reshape(%295, newshape=[8, 3, 9]) /* ty=Tensor[(8, 3, 9), float32] */;
  %300 = @func_4629(%296, %297, %298, %299) /* ty=(Tensor[(7, 16, 12), float32], Tensor[(1344), float32], Tensor[(1344, 1), float32], Tensor[(81), uint32], Tensor[(5, 2), uint16], Tensor[(100), uint16], Tensor[(16, 4, 12), bool], Tensor[(768), bool], Tensor[(?, 9, 9), uint32], Tensor[(8, 3, 9), uint32], Tensor[(100), uint16], Tensor[(8, 3, 9), float64]) */;
  %301 = @func_5728() /* ty=(Tensor[(540), float32], Tensor[(2, 4, 4), uint16], Tensor[(32), uint16], Tensor[(11, 12, 12), float32]) */;
  %302 = %301.1;
  %303 = cast(%302, dtype="float32") /* ty=Tensor[(2, 4, 4), float32] */;
  %304 = add(%290, %291) /* ty=Tensor[(11, 12, 12), uint32] */;
  %305 = %300.8;
  %306 = asin(%303) /* ty=Tensor[(2, 4, 4), float32] */;
  (%304, %305, %var_6215, %var_6216, meta[relay.Constant][23] /* ty=Tensor[(5, 20), uint16] */, %306)
}

def @func_5509() -> Tensor[(11, 12, 12), float32] {
  %307 = @func_4512() /* ty=Tensor[(11, 12, 12), float64] */;
  %308 = cast(%307, dtype="float32") /* ty=Tensor[(11, 12, 12), float32] */;
  acosh(%308) /* ty=Tensor[(11, 12, 12), float32] */
}

def @func_6232(%var_6229: Tensor[(11, 12, 12), float64], %var_6230: Tensor[(216), float32], %var_6231: Tensor[(1344), float32]) -> (Tensor[(11, 12, 12), uint32], Tensor[(?, 9, 9), uint32], Tensor[(216), float32], Tensor[(1344), float32], Tensor[(5, 20), uint16], Tensor[(2, 4, 4), float32]) {
  @func_6227(%var_6229, %var_6230, %var_6231) /* ty=(Tensor[(11, 12, 12), uint32], Tensor[(?, 9, 9), uint32], Tensor[(216), float32], Tensor[(1344), float32], Tensor[(5, 20), uint16], Tensor[(2, 4, 4), float32]) */
}

def @func_596(%var_593: Tensor[(7, 10, 2), int32], %var_594: Tensor[(7, 10, 2), int32], %var_595: Tensor[(7, 10, 2), int32]) -> (Tensor[(7, 10, 2), int32], Tensor[(3, 13, 9), float64], Tensor[(351), float64], Tensor[(7, 10, 2), int16]) {
  @func_591(%var_593, %var_594, %var_595) /* ty=(Tensor[(7, 10, 2), int32], Tensor[(3, 13, 9), float64], Tensor[(351), float64], Tensor[(7, 10, 2), int16]) */
}

def @func_6446(%var_6441: Tensor[(5, 12, 16), int32], %var_6442: Tensor[(5, 12, 16), int32]) -> Tensor[(5, 12, 16), bool] {
  %309 = cast(%var_6442, dtype="bool") /* ty=Tensor[(5, 12, 16), bool] */;
  %310 = shape_of(%var_6441, dtype="int32") /* ty=Tensor[(3), int32] */;
  %311 = cast(%var_6441, dtype="bool") /* ty=Tensor[(5, 12, 16), bool] */;
  %312 = dyn.reshape(%309, %310, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%311, %312) /* ty=Tensor[(5, 12, 16), bool] */
}

def @func_2165(%var_2162: Tensor[(12, 2, 7), float32], %var_2163: Tensor[(10), uint16], %var_2164: Tensor[(100), uint16]) -> (Tensor[(1344, 1), float32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(2, 672), float32], Tensor[(12, 2, 7), float64]) {
  %328 = fn (%var_2141: Tensor[(12, 2, 7), float32], %var_2146: Tensor[(10), uint16], %var_2147: Tensor[(100), uint16]) -> (Tensor[(1344, 1), float32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(2, 672), float32], Tensor[(12, 2, 7), float64]) {
    %313 = cast(%var_2146, dtype="uint16") /* ty=Tensor[(10), uint16] */;
    %314 = cast(%var_2147, dtype="uint16") /* ty=Tensor[(100), uint16] */;
    %315 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 672), float32] */, dtype="float32") /* ty=Tensor[(2, 672), float32] */;
    %316 = reshape(%313, newshape=[1, 10]) /* ty=Tensor[(1, 10), uint16] */;
    %317 = reshape(%314, newshape=[10, 10]) /* ty=Tensor[(10, 10), uint16] */;
    %318 = reshape(%315, newshape=[1344, 1]) /* ty=Tensor[(1344, 1), float32] */;
    %319 = @func_751(%316, %317, %318) /* ty=(Tensor[(10, 10), bool], Tensor[(7, 16, 12), float32], Tensor[(1344, 1), float32], Tensor[(3, 13, 9), float64], Tensor[(351), float64], Tensor[(3, 13, 9), float64], Tensor[(3, 13, 9), float64]) */;
    %320 = cast(%var_2141, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
    %321 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(12, 2, 7), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %322 = cast(meta[relay.Constant][25] /* ty=Tensor[(12, 2, 7), float32] */, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
    %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %324 = mod(%322, %323) /* ty=Tensor[(12, 2, 7), float32] */;
    %325 = cast(%324, dtype="float64") /* ty=Tensor[(12, 2, 7), float64] */;
    %326 = %319.2;
    %327 = sqrt(%325) /* ty=Tensor[(12, 2, 7), float64] */;
    (%326, %var_2146, %var_2147, meta[relay.Constant][24] /* ty=Tensor[(2, 672), float32] */, %327)
  };
  %328(%var_2162, %var_2163, %var_2164) /* ty=(Tensor[(1344, 1), float32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(2, 672), float32], Tensor[(12, 2, 7), float64]) */
}

def @func_6530(%var_6529: Tensor[(416), bool]) -> (Tensor[(11, 12, 12), float64], Tensor[(4, 8, 13), bool], Tensor[(416), bool]) {
  %334 = fn (%var_6523: Tensor[(416), bool]) -> (Tensor[(11, 12, 12), float64], Tensor[(4, 8, 13), bool], Tensor[(416), bool]) {
    %329 = @func_6045() /* ty=(Tensor[(11, 12, 12), float64],) */;
    %330 = cast(%var_6523, dtype="bool") /* ty=Tensor[(416), bool] */;
    %331 = reshape(%330, newshape=[4, 8, 13]) /* ty=Tensor[(4, 8, 13), bool] */;
    %332 = %329.0;
    %333 = @func_6103(%331) /* ty=Tensor[(4, 8, 13), bool] */;
    (%332, %333, %var_6523)
  };
  %334(%var_6529) /* ty=(Tensor[(11, 12, 12), float64], Tensor[(4, 8, 13), bool], Tensor[(416), bool]) */
}

def @func_5905(%var_5870: Tensor[(10, 1), uint16]) -> (Tensor[(11, 12, 12), float32], Tensor[(7, 16, 12), float32], Tensor[(100), uint16], Tensor[(12, 42), uint64], Tensor[(1560, 1), int8], Tensor[(968), float64], Tensor[(540), float64], Tensor[(10, 968), bool]) {
  %335 = @func_5728() /* ty=(Tensor[(540), float32], Tensor[(2, 4, 4), uint16], Tensor[(32), uint16], Tensor[(11, 12, 12), float32]) */;
  %336 = cast(meta[relay.Constant][26] /* ty=Tensor[(968), float64] */, dtype="float64") /* ty=Tensor[(968), float64] */;
  %337 = cast(meta[relay.Constant][26] /* ty=Tensor[(968), float64] */, dtype="float64") /* ty=Tensor[(968), float64] */;
  %338 = cast(%var_5870, dtype="uint16") /* ty=Tensor[(10, 1), uint16] */;
  %339 = cast(meta[relay.Constant][27] /* ty=Tensor[(100), uint16] */, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %340 = reshape(%336, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), float64] */;
  %341 = reshape(%337, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), float64] */;
  %342 = reshape(%338, newshape=[10]) /* ty=Tensor[(10), uint16] */;
  %343 = reshape(%339, newshape=[100]) /* ty=Tensor[(100), uint16] */;
  %344 = @func_2085(%340, %341, %342, %343) /* ty=(Tensor[(7, 16, 12), float32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(1344, 1), float32], Tensor[(11, 11, 8), float64]) */;
  %345 = cast(meta[relay.Constant][28] /* ty=Tensor[(1560, 1), int8] */, dtype="int8") /* ty=Tensor[(1560, 1), int8] */;
  %346 = cast(meta[relay.Constant][28] /* ty=Tensor[(1560, 1), int8] */, dtype="int8") /* ty=Tensor[(1560, 1), int8] */;
  %347 = cast(meta[relay.Constant][27] /* ty=Tensor[(100), uint16] */, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %348 = reshape(%345, newshape=[13, 12, 10]) /* ty=Tensor[(13, 12, 10), int8] */;
  %349 = reshape(%346, newshape=[13, 12, 10]) /* ty=Tensor[(13, 12, 10), int8] */;
  %350 = reshape(%347, newshape=[100]) /* ty=Tensor[(100), uint16] */;
  %351 = @func_4925(%348, %349, %350) /* ty=(Tensor[(13, 12, 10), uint16], Tensor[(12, 42), uint64], Tensor[(?, 9, 9), uint32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(11, 12, 12), float64], Tensor[(14, 12, 3), float64]) */;
  %352 = cast(meta[relay.Constant][26] /* ty=Tensor[(968), float64] */, dtype="float64") /* ty=Tensor[(968), float64] */;
  %353 = @func_5538() /* ty=(Tensor[(540), float64],) */;
  %354 = cast(%var_5870, dtype="bool") /* ty=Tensor[(10, 1), bool] */;
  %355 = cast(meta[relay.Constant][26] /* ty=Tensor[(968), float64] */, dtype="bool") /* ty=Tensor[(968), bool] */;
  %356 = %335.3;
  %357 = %344.0;
  %358 = %351.1;
  %359 = sin(%352) /* ty=Tensor[(968), float64] */;
  %360 = %353.0;
  %361 = logical_or(%354, %355) /* ty=Tensor[(10, 968), bool] */;
  (%356, %357, meta[relay.Constant][27] /* ty=Tensor[(100), uint16] */, %358, meta[relay.Constant][28] /* ty=Tensor[(1560, 1), int8] */, %359, %360, %361)
}

def @func_1423(%var_1421: Tensor[(12, 15, 5), bool], %var_1422: Tensor[(12, 15, 5), bool]) -> (Tensor[(12, 15, 5), bool],) {
  @func_1419(%var_1421, %var_1422) /* ty=(Tensor[(12, 15, 5), bool],) */
}

def @func_6836(%var_6835: Tensor[(300), float64]) -> (Tensor[(540), float64], Tensor[(15, 4, 5), float32], Tensor[(300), float64]) {
  %366 = fn (%var_6821: Tensor[(300), float64]) -> (Tensor[(540), float64], Tensor[(15, 4, 5), float32], Tensor[(300), float64]) {
    %362 = cast(%var_6821, dtype="float64") /* ty=Tensor[(300), float64] */;
    %363 = reshape(%362, newshape=[15, 4, 5]) /* ty=Tensor[(15, 4, 5), float64] */;
    %364 = @func_6320() /* ty=Tensor[(540), float64] */;
    %365 = @func_5183(%363) /* ty=Tensor[(15, 4, 5), float32] */;
    (%364, %365, %var_6821)
  };
  %366(%var_6835) /* ty=(Tensor[(540), float64], Tensor[(15, 4, 5), float32], Tensor[(300), float64]) */
}

def @func_7123() -> (Tensor[(1344), float32], Tensor[(540), float32], Tensor[(5, 12, 16), bool], Tensor[(960), int32], Tensor[(11, 12, 12), float64]) {
  %367 = @func_4856() /* ty=(Tensor[(1344), float32], Tensor[(540), float32], Tensor[(9, 10, 6), float64]) */;
  %368 = @func_6289() /* ty=(Tensor[(540), float32],) */;
  %369 = cast(meta[relay.Constant][29] /* ty=Tensor[(960), int32] */, dtype="int32") /* ty=Tensor[(960), int32] */;
  %370 = cast(meta[relay.Constant][29] /* ty=Tensor[(960), int32] */, dtype="int32") /* ty=Tensor[(960), int32] */;
  %371 = reshape(%369, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), int32] */;
  %372 = reshape(%370, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), int32] */;
  %373 = @func_6573() /* ty=(Tensor[(11, 12, 12), float64],) */;
  %374 = %367.0;
  %375 = %368.0;
  %376 = @func_6446(%371, %372) /* ty=Tensor[(5, 12, 16), bool] */;
  %377 = %373.0;
  (%374, %375, %376, meta[relay.Constant][29] /* ty=Tensor[(960), int32] */, %377)
}

def @func_5908(%var_5906: Tensor[(10, 1), uint16]) -> (Tensor[(11, 12, 12), float32], Tensor[(7, 16, 12), float32], Tensor[(100), uint16], Tensor[(12, 42), uint64], Tensor[(1560, 1), int8], Tensor[(968), float64], Tensor[(540), float64], Tensor[(10, 968), bool]) {
  @func_5905(%var_5906) /* ty=(Tensor[(11, 12, 12), float32], Tensor[(7, 16, 12), float32], Tensor[(100), uint16], Tensor[(12, 42), uint64], Tensor[(1560, 1), int8], Tensor[(968), float64], Tensor[(540), float64], Tensor[(10, 968), bool]) */
}

def @func_6575() -> (Tensor[(11, 12, 12), float64],) {
  @func_6573() /* ty=(Tensor[(11, 12, 12), float64],) */
}

def @func_5588(%var_5586: Tensor[(80), uint16]) -> (Tensor[(11, 12, 12), float64], Tensor[(5, 16, 11), bool], Tensor[(80), uint16]) {
  @func_5585(%var_5586) /* ty=(Tensor[(11, 12, 12), float64], Tensor[(5, 16, 11), bool], Tensor[(80), uint16]) */
}

def @func_8195(%var_8194: Tensor[(100), uint16]) -> (Tensor[(1344), float32], Tensor[(?, 9, 9), uint32], Tensor[(10, 1), uint16], Tensor[(100), uint16]) {
  %385 = fn (%var_8190: Tensor[(100), uint16]) -> (Tensor[(1344), float32], Tensor[(?, 9, 9), uint32], Tensor[(10, 1), uint16], Tensor[(100), uint16]) {
    %378 = cast(meta[relay.Constant][30] /* ty=Tensor[(10, 1), uint16] */, dtype="uint16") /* ty=Tensor[(10, 1), uint16] */;
    %379 = cast(%var_8190, dtype="uint16") /* ty=Tensor[(100), uint16] */;
    %380 = reshape(%378, newshape=[10]) /* ty=Tensor[(10), uint16] */;
    %381 = reshape(%379, newshape=[100]) /* ty=Tensor[(100), uint16] */;
    %382 = @func_3342(%380, %381) /* ty=(Tensor[(4, 10, 11), float32], Tensor[(?, 9, 9), uint32], Tensor[(81), uint32], Tensor[(10), uint16], Tensor[(100), uint16]) */;
    %383 = @func_4709() /* ty=Tensor[(1344), float32] */;
    %384 = %382.1;
    (%383, %384, meta[relay.Constant][30] /* ty=Tensor[(10, 1), uint16] */, %var_8190)
  };
  %385(%var_8194) /* ty=(Tensor[(1344), float32], Tensor[(?, 9, 9), uint32], Tensor[(10, 1), uint16], Tensor[(100), uint16]) */
}

def @func_3961(%var_3960: uint32) -> (Tensor[(3, 12, 15), float64], Tensor[(12, 2, 11), bool], uint32, Tensor[(6, 44), uint32]) {
  %394 = fn (%var_3951: uint32) -> (Tensor[(3, 12, 15), float64], Tensor[(12, 2, 11), bool], uint32, Tensor[(6, 44), uint32]) {
    %386 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 12, 15), float64] */, dtype="float64") /* ty=Tensor[(3, 12, 15), float64] */;
    %387 = cast(%var_3951, dtype="uint32") /* ty=uint32 */;
    %388 = cast(meta[relay.Constant][32] /* ty=Tensor[(6, 44), uint32] */, dtype="uint32") /* ty=Tensor[(6, 44), uint32] */;
    %389 = reshape(%387, newshape=[]) /* ty=uint32 */;
    %390 = reshape(%388, newshape=[12, 2, 11]) /* ty=Tensor[(12, 2, 11), uint32] */;
    %391 = @func_3476(%389, %390) /* ty=(Tensor[(12, 15, 5), bool], Tensor[(9, 100), bool], Tensor[(12, 2, 11), bool], Tensor[(12, 2, 11), float32]) */;
    %392 = cosh(%386) /* ty=Tensor[(3, 12, 15), float64] */;
    %393 = %391.2;
    (%392, %393, %var_3951, meta[relay.Constant][32] /* ty=Tensor[(6, 44), uint32] */)
  };
  %394(%var_3960) /* ty=(Tensor[(3, 12, 15), float64], Tensor[(12, 2, 11), bool], uint32, Tensor[(6, 44), uint32]) */
}

def @func_5691() -> (Tensor[(1344), float32], Tensor[(11, 12, 12), float64]) {
  %399 = fn () -> (Tensor[(1344), float32], Tensor[(11, 12, 12), float64]) {
    %395 = @func_4769() /* ty=(Tensor[(1344), float32],) */;
    %396 = @func_4545() /* ty=(Tensor[(11, 12, 12), float64],) */;
    %397 = %395.0;
    %398 = %396.0;
    (%397, %398)
  };
  %399() /* ty=(Tensor[(1344), float32], Tensor[(11, 12, 12), float64]) */
}

def @func_2491(%var_2490: Tensor[(4, 10, 14), float64]) -> (Tensor[(4, 10, 14), float64],) {
  %402 = fn (%var_2469: Tensor[(4, 10, 14), float64]) -> (Tensor[(4, 10, 14), float64],) {
    %400 = cast(%var_2469, dtype="float64") /* ty=Tensor[(4, 10, 14), float64] */;
    %401 = asinh(%400) /* ty=Tensor[(4, 10, 14), float64] */;
    (%401,)
  };
  %402(%var_2490) /* ty=(Tensor[(4, 10, 14), float64],) */
}

def @func_2090(%var_2086: Tensor[(11, 11, 8), float64], %var_2087: Tensor[(11, 11, 8), float64], %var_2088: Tensor[(10), uint16], %var_2089: Tensor[(100), uint16]) -> (Tensor[(7, 16, 12), float32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(1344, 1), float32], Tensor[(11, 11, 8), float64]) {
  %425 = fn (%var_2047: Tensor[(11, 11, 8), float64], %var_2048: Tensor[(11, 11, 8), float64], %var_2057: Tensor[(10), uint16], %var_2058: Tensor[(100), uint16]) -> (Tensor[(7, 16, 12), float32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(1344, 1), float32], Tensor[(11, 11, 8), float64]) {
    %403 = cast(%var_2057, dtype="uint16") /* ty=Tensor[(10), uint16] */;
    %404 = cast(%var_2058, dtype="uint16") /* ty=Tensor[(100), uint16] */;
    %405 = cast(meta[relay.Constant][33] /* ty=Tensor[(1344, 1), float32] */, dtype="float32") /* ty=Tensor[(1344, 1), float32] */;
    %406 = reshape(%403, newshape=[1, 10]) /* ty=Tensor[(1, 10), uint16] */;
    %407 = reshape(%404, newshape=[10, 10]) /* ty=Tensor[(10, 10), uint16] */;
    %408 = reshape(%405, newshape=[1344, 1]) /* ty=Tensor[(1344, 1), float32] */;
    %409 = @func_751(%406, %407, %408) /* ty=(Tensor[(10, 10), bool], Tensor[(7, 16, 12), float32], Tensor[(1344, 1), float32], Tensor[(3, 13, 9), float64], Tensor[(351), float64], Tensor[(3, 13, 9), float64], Tensor[(3, 13, 9), float64]) */;
    %410 = cast(%var_2048, dtype="float64") /* ty=Tensor[(11, 11, 8), float64] */;
    %411 = log(%410) /* ty=Tensor[(11, 11, 8), float64] */;
    %412 = cast(%var_2048, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
    %413 = shape_of(%var_2047, dtype="int32") /* ty=Tensor[(3), int32] */;
    %414 = cast(%var_2047, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
    %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %416 = greater(%414, %415) /* ty=Tensor[(11, 11, 8), bool] */;
    %417 = cast(%416, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
    %418 = shape_of(%411, dtype="int32") /* ty=Tensor[(3), int32] */;
    %419 = cast(%411, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
    %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %421 = less_equal(%419, %420) /* ty=Tensor[(11, 11, 8), bool] */;
    %422 = cast(%421, dtype="float64") /* ty=Tensor[(11, 11, 8), float64] */;
    %423 = %409.1;
    %424 = asin(%422) /* ty=Tensor[(11, 11, 8), float64] */;
    (%423, %var_2057, %var_2058, meta[relay.Constant][33] /* ty=Tensor[(1344, 1), float32] */, %424)
  };
  %425(%var_2086, %var_2087, %var_2088, %var_2089) /* ty=(Tensor[(7, 16, 12), float32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(1344, 1), float32], Tensor[(11, 11, 8), float64]) */
}

def @func_4807(%var_4771: Tensor[(13, 8, 16), float32]) -> (Tensor[(13, 8, 16), float32], Tensor[(15, 13, 10), float32]) {
  %426 = cast(%var_4771, dtype="float32") /* ty=Tensor[(13, 8, 16), float32] */;
  %427 = cast(meta[relay.Constant][34] /* ty=Tensor[(1950), uint64] */, dtype="uint64") /* ty=Tensor[(1950), uint64] */;
  %428 = reshape(%427, newshape=[15, 13, 10]) /* ty=Tensor[(15, 13, 10), uint64] */;
  %429 = @func_4360(%428) /* ty=(Tensor[(15, 13, 10), bool],) */;
  %430 = %429.0;
  %431 = cast(meta[relay.Constant][34] /* ty=Tensor[(1950), uint64] */, dtype="float32") /* ty=Tensor[(1950), float32] */;
  %432 = shape_of(%430, dtype="int32") /* ty=Tensor[(3), int32] */;
  %433 = cast(%430, dtype="float32") /* ty=Tensor[(15, 13, 10), float32] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %435 = log2(%426) /* ty=Tensor[(13, 8, 16), float32] */;
  %436 = floor_mod(%433, %434) /* ty=Tensor[(15, 13, 10), float32] */;
  (%435, %436)
}

def @func_7697() -> Tensor[(1344), float32] {
  %438 = fn () -> Tensor[(1344), float32] {
    %437 = @func_4856() /* ty=(Tensor[(1344), float32], Tensor[(540), float32], Tensor[(9, 10, 6), float64]) */;
    %437.0
  };
  %438() /* ty=Tensor[(1344), float32] */
}

def @func_3654(%var_3652: Tensor[(16, 4, 12), bool], %var_3653: Tensor[(16, 4, 12), bool]) -> Tensor[(16, 4, 12), bool] {
  %443 = fn (%var_3624: Tensor[(16, 4, 12), bool], %var_3625: Tensor[(16, 4, 12), bool]) -> Tensor[(16, 4, 12), bool] {
    %439 = cast(%var_3625, dtype="bool") /* ty=Tensor[(16, 4, 12), bool] */;
    %440 = shape_of(%var_3624, dtype="int32") /* ty=Tensor[(3), int32] */;
    %441 = cast(%var_3624, dtype="bool") /* ty=Tensor[(16, 4, 12), bool] */;
    %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%441, %442) /* ty=Tensor[(16, 4, 12), bool] */
  };
  %443(%var_3652, %var_3653) /* ty=Tensor[(16, 4, 12), bool] */
}

def @func_2348(%var_2272: Tensor[(2, 16, 3), float64], %var_2317: Tensor[(8, 24), int32]) -> (Tensor[(5, 16, 11), bool], Tensor[(80), uint16], Tensor[(2, 16, 3), float64], Tensor[(140), int32], Tensor[(8, 24), int32], Tensor[(10), uint16], Tensor[(1344), float32], Tensor[(5, 28), int32], Tensor[(900), bool], Tensor[(2, 16, 3), float32]) {
  %444 = cast(meta[relay.Constant][35] /* ty=Tensor[(80), uint16] */, dtype="uint16") /* ty=Tensor[(80), uint16] */;
  %445 = reshape(%444, newshape=[5, 16, 1]) /* ty=Tensor[(5, 16, 1), uint16] */;
  %446 = @func_864(%445) /* ty=(Tensor[(5, 16, 11), bool], Tensor[(5, 16, 1), float64]) */;
  %447 = cast(%var_2272, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
  %448 = sigmoid(%447) /* ty=Tensor[(2, 16, 3), float64] */;
  %449 = cast(%448, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
  %450 = cos(%449) /* ty=Tensor[(2, 16, 3), float64] */;
  %451 = cast(%448, dtype="bool") /* ty=Tensor[(2, 16, 3), bool] */;
  %452 = shape_of(%450, dtype="int32") /* ty=Tensor[(3), int32] */;
  %453 = cast(%450, dtype="bool") /* ty=Tensor[(2, 16, 3), bool] */;
  %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %455 = not_equal(%453, %454) /* ty=Tensor[(2, 16, 3), bool] */;
  %456 = cast(%455, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
  %457 = cast(%var_2317, dtype="int32") /* ty=Tensor[(8, 24), int32] */;
  %458 = cast(%var_2317, dtype="int32") /* ty=Tensor[(8, 24), int32] */;
  %459 = cast(meta[relay.Constant][36] /* ty=Tensor[(10), uint16] */, dtype="uint16") /* ty=Tensor[(10), uint16] */;
  %460 = cast(meta[relay.Constant][37] /* ty=Tensor[(1344), float32] */, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %461 = cast(meta[relay.Constant][38] /* ty=Tensor[(5, 28), int32] */, dtype="int32") /* ty=Tensor[(5, 28), int32] */;
  %462 = cast(meta[relay.Constant][39] /* ty=Tensor[(900), bool] */, dtype="bool") /* ty=Tensor[(900), bool] */;
  %463 = reshape(%457, newshape=[16, 3, 4]) /* ty=Tensor[(16, 3, 4), int32] */;
  %464 = reshape(%458, newshape=[16, 3, 4]) /* ty=Tensor[(16, 3, 4), int32] */;
  %465 = reshape(%459, newshape=[10]) /* ty=Tensor[(10), uint16] */;
  %466 = reshape(%460, newshape=[1344]) /* ty=Tensor[(1344), float32] */;
  %467 = reshape(%461, newshape=[140]) /* ty=Tensor[(140), int32] */;
  %468 = reshape(%462, newshape=[900]) /* ty=Tensor[(900), bool] */;
  %469 = @func_1505(%463, %464, %465, %466, %467, %468) /* ty=(Tensor[(16, 3, 4), int32], Tensor[(3, 13, 9), float64], Tensor[(10), uint16], Tensor[(25, 4), uint16], Tensor[(1344), float32], Tensor[(3, 13, 9), float64], Tensor[(140), int32], Tensor[(12, 15, 5), bool], Tensor[(900), bool]) */;
  %470 = cast(%448, dtype="float32") /* ty=Tensor[(2, 16, 3), float32] */;
  %471 = %446.0;
  %472 = acos(%456) /* ty=Tensor[(2, 16, 3), float64] */;
  %473 = %469.6;
  %474 = asin(%470) /* ty=Tensor[(2, 16, 3), float32] */;
  (%471, meta[relay.Constant][35] /* ty=Tensor[(80), uint16] */, %472, %473, %var_2317, meta[relay.Constant][36] /* ty=Tensor[(10), uint16] */, meta[relay.Constant][37] /* ty=Tensor[(1344), float32] */, meta[relay.Constant][38] /* ty=Tensor[(5, 28), int32] */, meta[relay.Constant][39] /* ty=Tensor[(900), bool] */, %474)
}

def @func_4929(%var_4926: Tensor[(13, 12, 10), int8], %var_4927: Tensor[(13, 12, 10), int8], %var_4928: Tensor[(100), uint16]) -> (Tensor[(13, 12, 10), uint16], Tensor[(12, 42), uint64], Tensor[(?, 9, 9), uint32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(11, 12, 12), float64], Tensor[(14, 12, 3), float64]) {
  %501 = fn (%var_4859: Tensor[(13, 12, 10), int8], %var_4860: Tensor[(13, 12, 10), int8], %var_4891: Tensor[(100), uint16]) -> (Tensor[(13, 12, 10), uint16], Tensor[(12, 42), uint64], Tensor[(?, 9, 9), uint32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(11, 12, 12), float64], Tensor[(14, 12, 3), float64]) {
    %475 = cast(%var_4860, dtype="int8") /* ty=Tensor[(13, 12, 10), int8] */;
    %476 = shape_of(%var_4859, dtype="int32") /* ty=Tensor[(3), int32] */;
    %477 = cast(%var_4859, dtype="int8") /* ty=Tensor[(13, 12, 10), int8] */;
    %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %479 = maximum(%477, %478) /* ty=Tensor[(13, 12, 10), int8] */;
    %480 = cast(%479, dtype="uint16") /* ty=Tensor[(13, 12, 10), uint16] */;
    %481 = shape_of(%var_4860, dtype="int32") /* ty=Tensor[(3), int32] */;
    %482 = cast(%var_4860, dtype="uint16") /* ty=Tensor[(13, 12, 10), uint16] */;
    %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %484 = cast(meta[relay.Constant][41] /* ty=Tensor[(10), uint16] */, dtype="uint16") /* ty=Tensor[(10), uint16] */;
    %485 = cast(%var_4891, dtype="uint16") /* ty=Tensor[(100), uint16] */;
    %486 = reshape(%484, newshape=[10]) /* ty=Tensor[(10), uint16] */;
    %487 = reshape(%485, newshape=[100]) /* ty=Tensor[(100), uint16] */;
    %488 = @func_3342(%486, %487) /* ty=(Tensor[(4, 10, 11), float32], Tensor[(?, 9, 9), uint32], Tensor[(81), uint32], Tensor[(10), uint16], Tensor[(100), uint16]) */;
    %489 = @func_4655() /* ty=(Tensor[(11, 12, 12), float64], Tensor[(7, 16, 12), float32], Tensor[(1344), float32]) */;
    %490 = cast(meta[relay.Constant][40] /* ty=Tensor[(12, 42), uint64] */, dtype="uint64") /* ty=Tensor[(12, 42), uint64] */;
    %491 = cast(meta[relay.Constant][40] /* ty=Tensor[(12, 42), uint64] */, dtype="uint64") /* ty=Tensor[(12, 42), uint64] */;
    %492 = reshape(%490, newshape=[14, 12, 3]) /* ty=Tensor[(14, 12, 3), uint64] */;
    %493 = reshape(%491, newshape=[14, 12, 3]) /* ty=Tensor[(14, 12, 3), uint64] */;
    %494 = @func_571(%492, %493) /* ty=(Tensor[(14, 12, 3), uint64],) */;
    %495 = %494.0;
    %496 = cast(%495, dtype="float64") /* ty=Tensor[(14, 12, 3), float64] */;
    %497 = bitwise_and(%482, %483) /* ty=Tensor[(13, 12, 10), uint16] */;
    %498 = %488.1;
    %499 = %489.0;
    %500 = exp(%496) /* ty=Tensor[(14, 12, 3), float64] */;
    (%497, meta[relay.Constant][40] /* ty=Tensor[(12, 42), uint64] */, %498, meta[relay.Constant][41] /* ty=Tensor[(10), uint16] */, %var_4891, %499, %500)
  };
  %501(%var_4926, %var_4927, %var_4928) /* ty=(Tensor[(13, 12, 10), uint16], Tensor[(12, 42), uint64], Tensor[(?, 9, 9), uint32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(11, 12, 12), float64], Tensor[(14, 12, 3), float64]) */
}

def @func_5644(%var_5643: Tensor[(2, 4, 4), uint16]) -> (Tensor[(2, 4, 4), uint16], Tensor[(1344), float32], Tensor[(11, 12, 12), float64]) {
  %510 = fn (%var_5631: Tensor[(2, 4, 4), uint16]) -> (Tensor[(2, 4, 4), uint16], Tensor[(1344), float32], Tensor[(11, 12, 12), float64]) {
    %502 = cast(%var_5631, dtype="uint16") /* ty=Tensor[(2, 4, 4), uint16] */;
    %503 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(2, 4, 4), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %504 = cast(meta[relay.Constant][42] /* ty=Tensor[(2, 4, 4), uint16] */, dtype="uint16") /* ty=Tensor[(2, 4, 4), uint16] */;
    %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %506 = @func_5195() /* ty=(Tensor[(11, 12, 12), float64],) */;
    %507 = bitwise_or(%504, %505) /* ty=Tensor[(2, 4, 4), uint16] */;
    %508 = @func_4709() /* ty=Tensor[(1344), float32] */;
    %509 = %506.0;
    (%507, %508, %509)
  };
  %510(%var_5643) /* ty=(Tensor[(2, 4, 4), uint16], Tensor[(1344), float32], Tensor[(11, 12, 12), float64]) */
}

def @func_6982() -> Tensor[(11, 12, 12), float32] {
  %511 = fn () -> Tensor[(11, 12, 12), float32] {
    @func_5509() /* ty=Tensor[(11, 12, 12), float32] */
  };
  %511() /* ty=Tensor[(11, 12, 12), float32] */
}

def @func_7500(%var_7379: Tensor[(15, 15, 7), float64], %var_7383: uint32, %var_7422: Tensor[(468), int8], %var_7427: Tensor[(10), uint16], %var_7481: Tensor[(3, 300), bool], %var_7495: Tensor[(100), uint16]) -> (Tensor[(12, 2, 11), bool], uint32, Tensor[(7, 16, 12), float32], Tensor[(1344), float32], Tensor[(9, 4, 13), int8], Tensor[(468), int8], Tensor[(3, 7, 6), int32], Tensor[(968, 1), float64], Tensor[(10), uint16], Tensor[(7, 10, 2), int32], Tensor[(140), int32], Tensor[(15, 15, 7), bool], Tensor[(15, 15, 7), bool], Tensor[(1344), float32], Tensor[(192), int32], Tensor[(3, 300), bool], Tensor[(10), uint16], Tensor[(100), uint16]) {
  %512 = cast(%var_7383, dtype="uint32") /* ty=uint32 */;
  %513 = reshape(%512, newshape=[]) /* ty=uint32 */;
  %514 = @func_3959(%513) /* ty=(Tensor[(3, 12, 15), float64], Tensor[(12, 2, 11), bool], uint32, Tensor[(6, 44), uint32]) */;
  %515 = cast(meta[relay.Constant][43] /* ty=Tensor[(1344), float32] */, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %516 = reshape(%515, newshape=[7, 16, 12]) /* ty=Tensor[(7, 16, 12), float32] */;
  %517 = cast(%var_7422, dtype="int8") /* ty=Tensor[(468), int8] */;
  %518 = cast(%var_7422, dtype="int8") /* ty=Tensor[(468), int8] */;
  %519 = reshape(%517, newshape=[9, 4, 13]) /* ty=Tensor[(9, 4, 13), int8] */;
  %520 = reshape(%518, newshape=[9, 4, 13]) /* ty=Tensor[(9, 4, 13), int8] */;
  %521 = cast(meta[relay.Constant][44] /* ty=Tensor[(968, 1), float64] */, dtype="float64") /* ty=Tensor[(968, 1), float64] */;
  %522 = cast(%var_7427, dtype="uint16") /* ty=Tensor[(10), uint16] */;
  %523 = reshape(%521, newshape=[968]) /* ty=Tensor[(968), float64] */;
  %524 = reshape(%522, newshape=[5, 2]) /* ty=Tensor[(5, 2), uint16] */;
  %525 = @func_6431(%523, %524) /* ty=(Tensor[(540), float64], Tensor[(560), float64], Tensor[(15, 3, 3), float64], Tensor[(100), uint16], Tensor[(968), float64], Tensor[(5, 2), uint16], Tensor[(100), uint16], Tensor[(15, 3, 3), float64], Tensor[(3, 7, 6), int32], Tensor[(126), int32]) */;
  %526 = cast(meta[relay.Constant][45] /* ty=Tensor[(140), int32] */, dtype="int32") /* ty=Tensor[(140), int32] */;
  %527 = cast(meta[relay.Constant][45] /* ty=Tensor[(140), int32] */, dtype="int32") /* ty=Tensor[(140), int32] */;
  %528 = cast(meta[relay.Constant][45] /* ty=Tensor[(140), int32] */, dtype="int32") /* ty=Tensor[(140), int32] */;
  %529 = reshape(%526, newshape=[7, 10, 2]) /* ty=Tensor[(7, 10, 2), int32] */;
  %530 = reshape(%527, newshape=[7, 10, 2]) /* ty=Tensor[(7, 10, 2), int32] */;
  %531 = reshape(%528, newshape=[7, 10, 2]) /* ty=Tensor[(7, 10, 2), int32] */;
  %532 = @func_591(%529, %530, %531) /* ty=(Tensor[(7, 10, 2), int32], Tensor[(3, 13, 9), float64], Tensor[(351), float64], Tensor[(7, 10, 2), int16]) */;
  %533 = cast(%var_7379, dtype="float64") /* ty=Tensor[(15, 15, 7), float64] */;
  %534 = acos(%533) /* ty=Tensor[(15, 15, 7), float64] */;
  %535 = cast(%534, dtype="float32") /* ty=Tensor[(15, 15, 7), float32] */;
  %536 = log(%535) /* ty=Tensor[(15, 15, 7), float32] */;
  %537 = cast(%534, dtype="int8") /* ty=Tensor[(15, 15, 7), int8] */;
  %538 = shape_of(%536, dtype="int32") /* ty=Tensor[(3), int32] */;
  %539 = cast(%536, dtype="int8") /* ty=Tensor[(15, 15, 7), int8] */;
  %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %541 = logical_xor(%539, %540) /* ty=Tensor[(15, 15, 7), int8] */;
  %542 = cast(%534, dtype="bool") /* ty=Tensor[(15, 15, 7), bool] */;
  %543 = shape_of(%541, dtype="int32") /* ty=Tensor[(3), int32] */;
  %544 = cast(%541, dtype="bool") /* ty=Tensor[(15, 15, 7), bool] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %546 = cast(%var_7379, dtype="bool") /* ty=Tensor[(15, 15, 7), bool] */;
  %547 = shape_of(%534, dtype="int32") /* ty=Tensor[(3), int32] */;
  %548 = cast(%534, dtype="bool") /* ty=Tensor[(15, 15, 7), bool] */;
  %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %550 = cast(meta[relay.Constant][46] /* ty=Tensor[(192), int32] */, dtype="int32") /* ty=Tensor[(192), int32] */;
  %551 = cast(meta[relay.Constant][46] /* ty=Tensor[(192), int32] */, dtype="int32") /* ty=Tensor[(192), int32] */;
  %552 = cast(%var_7427, dtype="uint16") /* ty=Tensor[(10), uint16] */;
  %553 = cast(meta[relay.Constant][43] /* ty=Tensor[(1344), float32] */, dtype="float32") /* ty=Tensor[(1344), float32] */;
  %554 = cast(meta[relay.Constant][45] /* ty=Tensor[(140), int32] */, dtype="int32") /* ty=Tensor[(140), int32] */;
  %555 = cast(%var_7481, dtype="bool") /* ty=Tensor[(3, 300), bool] */;
  %556 = reshape(%550, newshape=[16, 3, 4]) /* ty=Tensor[(16, 3, 4), int32] */;
  %557 = reshape(%551, newshape=[16, 3, 4]) /* ty=Tensor[(16, 3, 4), int32] */;
  %558 = reshape(%552, newshape=[10]) /* ty=Tensor[(10), uint16] */;
  %559 = reshape(%553, newshape=[1344]) /* ty=Tensor[(1344), float32] */;
  %560 = reshape(%554, newshape=[140]) /* ty=Tensor[(140), int32] */;
  %561 = reshape(%555, newshape=[900]) /* ty=Tensor[(900), bool] */;
  %562 = @func_1505(%556, %557, %558, %559, %560, %561) /* ty=(Tensor[(16, 3, 4), int32], Tensor[(3, 13, 9), float64], Tensor[(10), uint16], Tensor[(25, 4), uint16], Tensor[(1344), float32], Tensor[(3, 13, 9), float64], Tensor[(140), int32], Tensor[(12, 15, 5), bool], Tensor[(900), bool]) */;
  %563 = cast(meta[relay.Constant][44] /* ty=Tensor[(968, 1), float64] */, dtype="float64") /* ty=Tensor[(968, 1), float64] */;
  %564 = cast(meta[relay.Constant][44] /* ty=Tensor[(968, 1), float64] */, dtype="float64") /* ty=Tensor[(968, 1), float64] */;
  %565 = cast(%var_7427, dtype="uint16") /* ty=Tensor[(10), uint16] */;
  %566 = cast(%var_7495, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %567 = reshape(%563, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), float64] */;
  %568 = reshape(%564, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), float64] */;
  %569 = reshape(%565, newshape=[10]) /* ty=Tensor[(10), uint16] */;
  %570 = reshape(%566, newshape=[100]) /* ty=Tensor[(100), uint16] */;
  %571 = @func_2085(%567, %568, %569, %570) /* ty=(Tensor[(7, 16, 12), float32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(1344, 1), float32], Tensor[(11, 11, 8), float64]) */;
  %572 = %514.1;
  %573 = @func_637(%516) /* ty=Tensor[(7, 16, 12), float32] */;
  %574 = @func_3780(%519, %520) /* ty=Tensor[(9, 4, 13), int8] */;
  %575 = %525.8;
  %576 = %532.0;
  %577 = greater_equal(%544, %545) /* ty=Tensor[(15, 15, 7), bool] */;
  %578 = equal(%548, %549) /* ty=Tensor[(15, 15, 7), bool] */;
  %579 = %562.4;
  %580 = %571.1;
  (%572, %var_7383, %573, meta[relay.Constant][43] /* ty=Tensor[(1344), float32] */, %574, %var_7422, %575, meta[relay.Constant][44] /* ty=Tensor[(968, 1), float64] */, %var_7427, %576, meta[relay.Constant][45] /* ty=Tensor[(140), int32] */, %577, %578, %579, meta[relay.Constant][46] /* ty=Tensor[(192), int32] */, %var_7481, %580, %var_7495)
}

def @func_4634(%var_4630: Tensor[(8, 3, 9), float32], %var_4631: Tensor[(1344), float32], %var_4632: Tensor[(100), uint16], %var_4633: Tensor[(8, 3, 9), float32]) -> (Tensor[(7, 16, 12), float32], Tensor[(1344), float32], Tensor[(1344, 1), float32], Tensor[(81), uint32], Tensor[(5, 2), uint16], Tensor[(100), uint16], Tensor[(16, 4, 12), bool], Tensor[(768), bool], Tensor[(?, 9, 9), uint32], Tensor[(8, 3, 9), uint32], Tensor[(100), uint16], Tensor[(8, 3, 9), float64]) {
  %622 = fn (%var_4573: Tensor[(8, 3, 9), float32], %var_4580: Tensor[(1344), float32], %var_4585: Tensor[(100), uint16], %var_4606: Tensor[(8, 3, 9), float32]) -> (Tensor[(7, 16, 12), float32], Tensor[(1344), float32], Tensor[(1344, 1), float32], Tensor[(81), uint32], Tensor[(5, 2), uint16], Tensor[(100), uint16], Tensor[(16, 4, 12), bool], Tensor[(768), bool], Tensor[(?, 9, 9), uint32], Tensor[(8, 3, 9), uint32], Tensor[(100), uint16], Tensor[(8, 3, 9), float64]) {
    %581 = cast(%var_4580, dtype="float32") /* ty=Tensor[(1344), float32] */;
    %582 = reshape(%581, newshape=[7, 16, 12]) /* ty=Tensor[(7, 16, 12), float32] */;
    %583 = cast(meta[relay.Constant][47] /* ty=Tensor[(81), uint32] */, dtype="uint32") /* ty=Tensor[(81), uint32] */;
    %584 = cast(meta[relay.Constant][48] /* ty=Tensor[(5, 2), uint16] */, dtype="uint16") /* ty=Tensor[(5, 2), uint16] */;
    %585 = cast(%var_4585, dtype="uint16") /* ty=Tensor[(100), uint16] */;
    %586 = reshape(%583, newshape=[1, 9, 9]) /* ty=Tensor[(1, 9, 9), uint32] */;
    %587 = reshape(%584, newshape=[10]) /* ty=Tensor[(10), uint16] */;
    %588 = reshape(%585, newshape=[100]) /* ty=Tensor[(100), uint16] */;
    %589 = @func_3188(%586, %587, %588) /* ty=(Tensor[(?, 9, 9), uint32], Tensor[(1, 9, 9), float64], Tensor[(1344, 1), float32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(28, 48), float32]) */;
    %590 = cast(meta[relay.Constant][49] /* ty=Tensor[(768), bool] */, dtype="bool") /* ty=Tensor[(768), bool] */;
    %591 = cast(meta[relay.Constant][49] /* ty=Tensor[(768), bool] */, dtype="bool") /* ty=Tensor[(768), bool] */;
    %592 = reshape(%590, newshape=[16, 4, 12]) /* ty=Tensor[(16, 4, 12), bool] */;
    %593 = reshape(%591, newshape=[16, 4, 12]) /* ty=Tensor[(16, 4, 12), bool] */;
    %594 = cast(meta[relay.Constant][48] /* ty=Tensor[(5, 2), uint16] */, dtype="uint16") /* ty=Tensor[(5, 2), uint16] */;
    %595 = cast(%var_4585, dtype="uint16") /* ty=Tensor[(100), uint16] */;
    %596 = reshape(%594, newshape=[10]) /* ty=Tensor[(10), uint16] */;
    %597 = reshape(%595, newshape=[100]) /* ty=Tensor[(100), uint16] */;
    %598 = @func_3342(%596, %597) /* ty=(Tensor[(4, 10, 11), float32], Tensor[(?, 9, 9), uint32], Tensor[(81), uint32], Tensor[(10), uint16], Tensor[(100), uint16]) */;
    %599 = cast(%var_4573, dtype="float32") /* ty=Tensor[(8, 3, 9), float32] */;
    %600 = acos(%599) /* ty=Tensor[(8, 3, 9), float32] */;
    %601 = cast(%600, dtype="float32") /* ty=Tensor[(8, 3, 9), float32] */;
    %602 = sigmoid(%601) /* ty=Tensor[(8, 3, 9), float32] */;
    %603 = cast(%var_4606, dtype="uint32") /* ty=Tensor[(8, 3, 9), uint32] */;
    %604 = shape_of(%602, dtype="int32") /* ty=Tensor[(3), int32] */;
    %605 = cast(%602, dtype="uint32") /* ty=Tensor[(8, 3, 9), uint32] */;
    %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %607 = %598.1;
    %608 = cast(%607, dtype="uint32") /* ty=Tensor[(?, 9, 9), uint32] */;
    %609 = cast(meta[relay.Constant][48] /* ty=Tensor[(5, 2), uint16] */, dtype="uint16") /* ty=Tensor[(5, 2), uint16] */;
    %610 = cast(%var_4585, dtype="uint16") /* ty=Tensor[(100), uint16] */;
    %611 = reshape(%608, newshape=[1, 9, 9]) /* ty=Tensor[(1, 9, 9), uint32] */;
    %612 = reshape(%609, newshape=[10]) /* ty=Tensor[(10), uint16] */;
    %613 = reshape(%610, newshape=[100]) /* ty=Tensor[(100), uint16] */;
    %614 = @func_3188(%611, %612, %613) /* ty=(Tensor[(?, 9, 9), uint32], Tensor[(1, 9, 9), float64], Tensor[(1344, 1), float32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(28, 48), float32]) */;
    %615 = cast(%602, dtype="float64") /* ty=Tensor[(8, 3, 9), float64] */;
    %616 = @func_637(%582) /* ty=Tensor[(7, 16, 12), float32] */;
    %617 = %589.2;
    %618 = @func_3651(%592, %593) /* ty=Tensor[(16, 4, 12), bool] */;
    %619 = bitwise_xor(%605, %606) /* ty=Tensor[(8, 3, 9), uint32] */;
    %620 = %614.4;
    %621 = sin(%615) /* ty=Tensor[(8, 3, 9), float64] */;
    (%616, %var_4580, %617, meta[relay.Constant][47] /* ty=Tensor[(81), uint32] */, meta[relay.Constant][48] /* ty=Tensor[(5, 2), uint16] */, %var_4585, %618, meta[relay.Constant][49] /* ty=Tensor[(768), bool] */, %607, %619, %620, %621)
  };
  %622(%var_4630, %var_4631, %var_4632, %var_4633) /* ty=(Tensor[(7, 16, 12), float32], Tensor[(1344), float32], Tensor[(1344, 1), float32], Tensor[(81), uint32], Tensor[(5, 2), uint16], Tensor[(100), uint16], Tensor[(16, 4, 12), bool], Tensor[(768), bool], Tensor[(?, 9, 9), uint32], Tensor[(8, 3, 9), uint32], Tensor[(100), uint16], Tensor[(8, 3, 9), float64]) */
}

def @func_6105(%var_6104: Tensor[(4, 8, 13), bool]) -> Tensor[(4, 8, 13), bool] {
  %627 = fn (%var_6083: Tensor[(4, 8, 13), bool]) -> Tensor[(4, 8, 13), bool] {
    %623 = cast(meta[relay.Constant][50] /* ty=Tensor[(4, 8, 13), bool] */, dtype="bool") /* ty=Tensor[(4, 8, 13), bool] */;
    %624 = shape_of(%var_6083, dtype="int32") /* ty=Tensor[(3), int32] */;
    %625 = cast(%var_6083, dtype="bool") /* ty=Tensor[(4, 8, 13), bool] */;
    %626 = dyn.reshape(%623, %624, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%625, %626) /* ty=Tensor[(4, 8, 13), bool] */
  };
  %627(%var_6104) /* ty=Tensor[(4, 8, 13), bool] */
}

def @func_1091(%var_1089: Tensor[(11, 4, 4), float64], %var_1090: Tensor[(1344), float32]) -> (Tensor[(7, 16, 12), float32], Tensor[(1344), float32], Tensor[(11, 4, 4), bool]) {
  %638 = fn (%var_1065: Tensor[(11, 4, 4), float64], %var_1070: Tensor[(1344), float32]) -> (Tensor[(7, 16, 12), float32], Tensor[(1344), float32], Tensor[(11, 4, 4), bool]) {
    %628 = cast(%var_1070, dtype="float32") /* ty=Tensor[(1344), float32] */;
    %629 = reshape(%628, newshape=[7, 16, 12]) /* ty=Tensor[(7, 16, 12), float32] */;
    %630 = cast(%var_1065, dtype="float64") /* ty=Tensor[(11, 4, 4), float64] */;
    %631 = acos(%630) /* ty=Tensor[(11, 4, 4), float64] */;
    %632 = cast(%var_1065, dtype="bool") /* ty=Tensor[(11, 4, 4), bool] */;
    %633 = shape_of(%631, dtype="int32") /* ty=Tensor[(3), int32] */;
    %634 = cast(%631, dtype="bool") /* ty=Tensor[(11, 4, 4), bool] */;
    %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %636 = @func_637(%629) /* ty=Tensor[(7, 16, 12), float32] */;
    %637 = greater_equal(%634, %635) /* ty=Tensor[(11, 4, 4), bool] */;
    (%636, %var_1070, %637)
  };
  %638(%var_1089, %var_1090) /* ty=(Tensor[(7, 16, 12), float32], Tensor[(1344), float32], Tensor[(11, 4, 4), bool]) */
}

def @func_6847() -> (Tensor[(11, 12, 12), float64],) {
  %641 = fn () -> (Tensor[(11, 12, 12), float64],) {
    %639 = @func_4980() /* ty=(Tensor[(11, 12, 12), float64], Tensor[(15, 3, 3), float64], Tensor[(135, 1), float64]) */;
    %640 = %639.0;
    (%640,)
  };
  %641() /* ty=(Tensor[(11, 12, 12), float64],) */
}

def @func_866(%var_865: Tensor[(5, 16, 1), uint16]) -> (Tensor[(5, 16, 11), bool], Tensor[(5, 16, 1), float64]) {
  %647 = fn (%var_850: Tensor[(5, 16, 1), uint16]) -> (Tensor[(5, 16, 11), bool], Tensor[(5, 16, 1), float64]) {
    %642 = cast(%var_850, dtype="bool") /* ty=Tensor[(5, 16, 1), bool] */;
    %643 = cast(meta[relay.Constant][51] /* ty=Tensor[(5, 16, 11), uint16] */, dtype="bool") /* ty=Tensor[(5, 16, 11), bool] */;
    %644 = cast(%var_850, dtype="float64") /* ty=Tensor[(5, 16, 1), float64] */;
    %645 = less(%642, %643) /* ty=Tensor[(5, 16, 11), bool] */;
    %646 = acosh(%644) /* ty=Tensor[(5, 16, 1), float64] */;
    (%645, %646)
  };
  %647(%var_865) /* ty=(Tensor[(5, 16, 11), bool], Tensor[(5, 16, 1), float64]) */
}

def @func_8166(%var_8131: Tensor[(540), float64]) -> (Tensor[(540), bool], Tensor[(12, 15, 5), bool], Tensor[(900), bool]) {
  %648 = @func_6729() /* ty=(Tensor[(540), float64],) */;
  %649 = %648.0;
  %650 = cast(%var_8131, dtype="bool") /* ty=Tensor[(540), bool] */;
  %651 = shape_of(%649, dtype="int32") /* ty=Tensor[(1), int32] */;
  %652 = cast(%649, dtype="bool") /* ty=Tensor[(540), bool] */;
  %653 = dyn.reshape(%650, %651, newshape=[]) /* ty=Tensor[(?), bool] */;
  %654 = cast(meta[relay.Constant][52] /* ty=Tensor[(900), bool] */, dtype="bool") /* ty=Tensor[(900), bool] */;
  %655 = cast(meta[relay.Constant][52] /* ty=Tensor[(900), bool] */, dtype="bool") /* ty=Tensor[(900), bool] */;
  %656 = reshape(%654, newshape=[12, 15, 5]) /* ty=Tensor[(12, 15, 5), bool] */;
  %657 = reshape(%655, newshape=[12, 15, 5]) /* ty=Tensor[(12, 15, 5), bool] */;
  %658 = @func_1419(%656, %657) /* ty=(Tensor[(12, 15, 5), bool],) */;
  %659 = not_equal(%652, %653) /* ty=Tensor[(540), bool] */;
  %660 = %658.0;
  (%659, %660, meta[relay.Constant][52] /* ty=Tensor[(900), bool] */)
}

def @func_1184(%var_1179: Tensor[(3, 7, 6), int32], %var_1180: Tensor[(3, 7, 6), int32]) -> (Tensor[(3, 7, 6), int32],) {
  %661 = cast(%var_1180, dtype="int32") /* ty=Tensor[(3, 7, 6), int32] */;
  %662 = shape_of(%var_1179, dtype="int32") /* ty=Tensor[(3), int32] */;
  %663 = cast(%var_1179, dtype="int32") /* ty=Tensor[(3, 7, 6), int32] */;
  %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %665 = multiply(%663, %664) /* ty=Tensor[(3, 7, 6), int32] */;
  (%665,)
}

def @func_7508(%var_7502: Tensor[(15, 15, 7), float64], %var_7503: uint32, %var_7504: Tensor[(468), int8], %var_7505: Tensor[(10), uint16], %var_7506: Tensor[(3, 300), bool], %var_7507: Tensor[(100), uint16]) -> (Tensor[(12, 2, 11), bool], uint32, Tensor[(7, 16, 12), float32], Tensor[(1344), float32], Tensor[(9, 4, 13), int8], Tensor[(468), int8], Tensor[(3, 7, 6), int32], Tensor[(968, 1), float64], Tensor[(10), uint16], Tensor[(7, 10, 2), int32], Tensor[(140), int32], Tensor[(15, 15, 7), bool], Tensor[(15, 15, 7), bool], Tensor[(1344), float32], Tensor[(192), int32], Tensor[(3, 300), bool], Tensor[(10), uint16], Tensor[(100), uint16]) {
  @func_7500(%var_7502, %var_7503, %var_7504, %var_7505, %var_7506, %var_7507) /* ty=(Tensor[(12, 2, 11), bool], uint32, Tensor[(7, 16, 12), float32], Tensor[(1344), float32], Tensor[(9, 4, 13), int8], Tensor[(468), int8], Tensor[(3, 7, 6), int32], Tensor[(968, 1), float64], Tensor[(10), uint16], Tensor[(7, 10, 2), int32], Tensor[(140), int32], Tensor[(15, 15, 7), bool], Tensor[(15, 15, 7), bool], Tensor[(1344), float32], Tensor[(192), int32], Tensor[(3, 300), bool], Tensor[(10), uint16], Tensor[(100), uint16]) */
}

def @func_8082(%var_8080: Tensor[(135), float64], %var_8081: uint32) -> (Tensor[(11, 12, 12), float64], Tensor[(15, 3, 3), float64], Tensor[(135), float64], Tensor[(10), uint16], Tensor[(1575), float64], Tensor[(10), uint16], Tensor[(900), bool], Tensor[(50, 2), uint16], Tensor[(78, 6), float64]) {
  %688 = fn (%var_8037: Tensor[(135), float64], %var_8070: uint32) -> (Tensor[(11, 12, 12), float64], Tensor[(15, 3, 3), float64], Tensor[(135), float64], Tensor[(10), uint16], Tensor[(1575), float64], Tensor[(10), uint16], Tensor[(900), bool], Tensor[(50, 2), uint16], Tensor[(78, 6), float64]) {
    %666 = @func_5690() /* ty=(Tensor[(1344), float32], Tensor[(11, 12, 12), float64]) */;
    %667 = cast(%var_8037, dtype="float64") /* ty=Tensor[(135), float64] */;
    %668 = reshape(%667, newshape=[15, 3, 3]) /* ty=Tensor[(15, 3, 3), float64] */;
    %669 = cast(meta[relay.Constant][53] /* ty=Tensor[(1575), float64] */, dtype="float64") /* ty=Tensor[(1575), float64] */;
    %670 = cast(%var_8070, dtype="uint32") /* ty=uint32 */;
    %671 = cast(meta[relay.Constant][54] /* ty=Tensor[(78, 6), int8] */, dtype="int8") /* ty=Tensor[(78, 6), int8] */;
    %672 = cast(meta[relay.Constant][55] /* ty=Tensor[(10), uint16] */, dtype="uint16") /* ty=Tensor[(10), uint16] */;
    %673 = cast(meta[relay.Constant][56] /* ty=Tensor[(900), bool] */, dtype="bool") /* ty=Tensor[(900), bool] */;
    %674 = cast(meta[relay.Constant][57] /* ty=Tensor[(50, 2), uint16] */, dtype="uint16") /* ty=Tensor[(50, 2), uint16] */;
    %675 = reshape(%669, newshape=[15, 15, 7]) /* ty=Tensor[(15, 15, 7), float64] */;
    %676 = reshape(%670, newshape=[]) /* ty=uint32 */;
    %677 = reshape(%671, newshape=[468]) /* ty=Tensor[(468), int8] */;
    %678 = reshape(%672, newshape=[10]) /* ty=Tensor[(10), uint16] */;
    %679 = reshape(%673, newshape=[3, 300]) /* ty=Tensor[(3, 300), bool] */;
    %680 = reshape(%674, newshape=[100]) /* ty=Tensor[(100), uint16] */;
    %681 = @func_7500(%675, %676, %677, %678, %679, %680) /* ty=(Tensor[(12, 2, 11), bool], uint32, Tensor[(7, 16, 12), float32], Tensor[(1344), float32], Tensor[(9, 4, 13), int8], Tensor[(468), int8], Tensor[(3, 7, 6), int32], Tensor[(968, 1), float64], Tensor[(10), uint16], Tensor[(7, 10, 2), int32], Tensor[(140), int32], Tensor[(15, 15, 7), bool], Tensor[(15, 15, 7), bool], Tensor[(1344), float32], Tensor[(192), int32], Tensor[(3, 300), bool], Tensor[(10), uint16], Tensor[(100), uint16]) */;
    %682 = cast(meta[relay.Constant][54] /* ty=Tensor[(78, 6), int8] */, dtype="float64") /* ty=Tensor[(78, 6), float64] */;
    %683 = cast(%var_8070, dtype="float64") /* ty=float64 */;
    %684 = %666.1;
    %685 = @func_790(%668) /* ty=Tensor[(15, 3, 3), float64] */;
    %686 = %681.8;
    %687 = power(%682, %683) /* ty=Tensor[(78, 6), float64] */;
    (%684, %685, %var_8037, %686, meta[relay.Constant][53] /* ty=Tensor[(1575), float64] */, meta[relay.Constant][55] /* ty=Tensor[(10), uint16] */, meta[relay.Constant][56] /* ty=Tensor[(900), bool] */, meta[relay.Constant][57] /* ty=Tensor[(50, 2), uint16] */, %687)
  };
  %688(%var_8080, %var_8081) /* ty=(Tensor[(11, 12, 12), float64], Tensor[(15, 3, 3), float64], Tensor[(135), float64], Tensor[(10), uint16], Tensor[(1575), float64], Tensor[(10), uint16], Tensor[(900), bool], Tensor[(50, 2), uint16], Tensor[(78, 6), float64]) */
}

def @func_1188(%var_1186: Tensor[(3, 7, 6), int32], %var_1187: Tensor[(3, 7, 6), int32]) -> (Tensor[(3, 7, 6), int32],) {
  @func_1184(%var_1186, %var_1187) /* ty=(Tensor[(3, 7, 6), int32],) */
}

def @func_7657() -> (Tensor[(11, 12, 12), float32],) {
  %690 = fn () -> (Tensor[(11, 12, 12), float32],) {
    %689 = @func_5509() /* ty=Tensor[(11, 12, 12), float32] */;
    (%689,)
  };
  %690() /* ty=(Tensor[(11, 12, 12), float32],) */
}

def @func_4514() -> Tensor[(11, 12, 12), float64] {
  @func_4512() /* ty=Tensor[(11, 12, 12), float64] */
}

def @func_6290() -> (Tensor[(540), float32],) {
  %693 = fn () -> (Tensor[(540), float32],) {
    %691 = @func_4856() /* ty=(Tensor[(1344), float32], Tensor[(540), float32], Tensor[(9, 10, 6), float64]) */;
    %692 = %691.1;
    (%692,)
  };
  %693() /* ty=(Tensor[(540), float32],) */
}

def @func_6573() -> (Tensor[(11, 12, 12), float64],) {
  %694 = @func_6045() /* ty=(Tensor[(11, 12, 12), float64],) */;
  %695 = %694.0;
  (%695,)
}

def @func_2656(%var_2654: Tensor[(10, 2, 11), float64]) -> (Tensor[(10, 2, 11), bool], Tensor[(10, 2, 11), float64]) {
  @func_2653(%var_2654) /* ty=(Tensor[(10, 2, 11), bool], Tensor[(10, 2, 11), float64]) */
}

def @func_3192(%var_3189: Tensor[(1, 9, 9), uint32], %var_3190: Tensor[(10), uint16], %var_3191: Tensor[(100), uint16]) -> (Tensor[(?, 9, 9), uint32], Tensor[(1, 9, 9), float64], Tensor[(1344, 1), float32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(28, 48), float32]) {
  %711 = fn (%var_3176: Tensor[(1, 9, 9), uint32], %var_3184: Tensor[(10), uint16], %var_3185: Tensor[(100), uint16]) -> (Tensor[(?, 9, 9), uint32], Tensor[(1, 9, 9), float64], Tensor[(1344, 1), float32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(28, 48), float32]) {
    %696 = cast(%var_3176, dtype="uint32") /* ty=Tensor[(1, 9, 9), uint32] */;
    %697 = shape_of(meta[relay.Constant][58] /* ty=Tensor[(1, 9, 9), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %698 = cast(meta[relay.Constant][58] /* ty=Tensor[(1, 9, 9), uint32] */, dtype="uint32") /* ty=Tensor[(1, 9, 9), uint32] */;
    %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %700 = cast(meta[relay.Constant][58] /* ty=Tensor[(1, 9, 9), uint32] */, dtype="float64") /* ty=Tensor[(1, 9, 9), float64] */;
    %701 = cast(%var_3184, dtype="uint16") /* ty=Tensor[(10), uint16] */;
    %702 = cast(%var_3185, dtype="uint16") /* ty=Tensor[(100), uint16] */;
    %703 = cast(meta[relay.Constant][59] /* ty=Tensor[(28, 48), float32] */, dtype="float32") /* ty=Tensor[(28, 48), float32] */;
    %704 = reshape(%701, newshape=[1, 10]) /* ty=Tensor[(1, 10), uint16] */;
    %705 = reshape(%702, newshape=[10, 10]) /* ty=Tensor[(10, 10), uint16] */;
    %706 = reshape(%703, newshape=[1344, 1]) /* ty=Tensor[(1344, 1), float32] */;
    %707 = @func_751(%704, %705, %706) /* ty=(Tensor[(10, 10), bool], Tensor[(7, 16, 12), float32], Tensor[(1344, 1), float32], Tensor[(3, 13, 9), float64], Tensor[(351), float64], Tensor[(3, 13, 9), float64], Tensor[(3, 13, 9), float64]) */;
    %708 = left_shift(%698, %699) /* ty=Tensor[(?, 9, 9), uint32] */;
    %709 = log2(%700) /* ty=Tensor[(1, 9, 9), float64] */;
    %710 = %707.2;
    (%708, %709, %710, %var_3184, %var_3185, meta[relay.Constant][59] /* ty=Tensor[(28, 48), float32] */)
  };
  %711(%var_3189, %var_3190, %var_3191) /* ty=(Tensor[(?, 9, 9), uint32], Tensor[(1, 9, 9), float64], Tensor[(1344, 1), float32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(28, 48), float32]) */
}

def @func_5958() -> (Tensor[(540), float64],) {
  %714 = fn () -> (Tensor[(540), float64],) {
    %712 = @func_5538() /* ty=(Tensor[(540), float64],) */;
    %713 = %712.0;
    (%713,)
  };
  %714() /* ty=(Tensor[(540), float64],) */
}

def @func_8004(%var_7957: Tensor[(16, 5, 3), uint64], %var_7975: Tensor[(6, 44), uint32], %var_7982: Tensor[(16, 5, 3), uint64], %var_7999: Tensor[(16, 5, 3), float32]) -> (Tensor[(16, 5, 3), uint64], Tensor[(16, 5, 3), float32], Tensor[(6, 44), uint32], Tensor[(16, 5, 3), bool], Tensor[(16, 5, 3), bool], Tensor[(16, 5, 3), float64]) {
  %715 = cast(%var_7957, dtype="uint64") /* ty=Tensor[(16, 5, 3), uint64] */;
  %716 = shape_of(meta[relay.Constant][60] /* ty=Tensor[(16, 5, 3), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %717 = cast(meta[relay.Constant][60] /* ty=Tensor[(16, 5, 3), uint64] */, dtype="uint64") /* ty=Tensor[(16, 5, 3), uint64] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %719 = cast(meta[relay.Constant][61] /* ty=Tensor[(16, 5, 3), uint64] */, dtype="float32") /* ty=Tensor[(16, 5, 3), float32] */;
  %720 = shape_of(%var_7957, dtype="int32") /* ty=Tensor[(3), int32] */;
  %721 = cast(%var_7957, dtype="float32") /* ty=Tensor[(16, 5, 3), float32] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %723 = cast(%var_7982, dtype="bool") /* ty=Tensor[(16, 5, 3), bool] */;
  %724 = shape_of(%var_7957, dtype="int32") /* ty=Tensor[(3), int32] */;
  %725 = cast(%var_7957, dtype="bool") /* ty=Tensor[(16, 5, 3), bool] */;
  %726 = dyn.reshape(%723, %724, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %727 = cast(%var_7975, dtype="uint32") /* ty=Tensor[(6, 44), uint32] */;
  %728 = reshape(%727, newshape=[264]) /* ty=Tensor[(264), uint32] */;
  %729 = @func_7319(%728) /* ty=(Tensor[(540), float32], Tensor[(12, 2, 11), bool], uint32, Tensor[(264), uint32]) */;
  %730 = %729.2;
  %731 = cast(meta[relay.Constant][61] /* ty=Tensor[(16, 5, 3), uint64] */, dtype="bool") /* ty=Tensor[(16, 5, 3), bool] */;
  %732 = cast(%730, dtype="bool") /* ty=bool */;
  %733 = cast(%var_7957, dtype="float64") /* ty=Tensor[(16, 5, 3), float64] */;
  %734 = atanh(%733) /* ty=Tensor[(16, 5, 3), float64] */;
  %735 = cast(%734, dtype="float32") /* ty=Tensor[(16, 5, 3), float32] */;
  %736 = cos(%735) /* ty=Tensor[(16, 5, 3), float32] */;
  %737 = cast(%var_7999, dtype="float64") /* ty=Tensor[(16, 5, 3), float64] */;
  %738 = shape_of(%736, dtype="int32") /* ty=Tensor[(3), int32] */;
  %739 = cast(%736, dtype="float64") /* ty=Tensor[(16, 5, 3), float64] */;
  %740 = dyn.reshape(%737, %738, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %741 = maximum(%717, %718) /* ty=Tensor[(16, 5, 3), uint64] */;
  %742 = power(%721, %722) /* ty=Tensor[(16, 5, 3), float32] */;
  %743 = equal(%725, %726) /* ty=Tensor[(16, 5, 3), bool] */;
  %744 = greater_equal(%731, %732) /* ty=Tensor[(16, 5, 3), bool] */;
  %745 = add(%739, %740) /* ty=Tensor[(16, 5, 3), float64] */;
  (%741, %742, %var_7975, %743, %744, %745)
}

def @func_6731() -> (Tensor[(540), float64],) {
  @func_6729() /* ty=(Tensor[(540), float64],) */
}

def @func_7798() -> (Tensor[(32), uint16],) {
  %746 = @func_5853() /* ty=(Tensor[(32), uint16], Tensor[(4, 10, 14), float64], Tensor[(560), float64], Tensor[(15, 3, 3), bool]) */;
  %747 = %746.0;
  (%747,)
}

def @main(%var_8295: Tensor[(6, 14, 8), float64], %var_8296: Tensor[(6, 14, 8), float64]) -> Tensor[(6, 14, 8), float64] {
  %748 = cast(%var_8296, dtype="float64") /* ty=Tensor[(6, 14, 8), float64] */;
  %749 = shape_of(%var_8295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %750 = cast(%var_8295, dtype="float64") /* ty=Tensor[(6, 14, 8), float64] */;
  %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%750, %751) /* ty=Tensor[(6, 14, 8), float64] */
}

def @func_7616() -> (Tensor[(11, 12, 12), bool], Tensor[(540), float64], Tensor[(11, 12, 12), bool], Tensor[(11, 12, 12), float64], Tensor[(540), float64]) {
  %752 = @func_6920() /* ty=(Tensor[(540), float64],) */;
  %753 = @func_5434() /* ty=Tensor[(11, 12, 12), bool] */;
  %754 = cast(%753, dtype="float64") /* ty=Tensor[(11, 12, 12), float64] */;
  %755 = reshape(%754, newshape=[11, 12, 12]) /* ty=Tensor[(11, 12, 12), float64] */;
  %756 = @func_6846() /* ty=(Tensor[(11, 12, 12), float64],) */;
  %757 = %752.0;
  %758 = @func_5035(%755) /* ty=Tensor[(11, 12, 12), bool] */;
  %759 = %756.0;
  %760 = @func_6320() /* ty=Tensor[(540), float64] */;
  (%753, %757, %758, %759, %760)
}

def @func_6322() -> Tensor[(540), float64] {
  @func_6320() /* ty=Tensor[(540), float64] */
}

def @func_639(%var_638: Tensor[(7, 16, 12), float32]) -> Tensor[(7, 16, 12), float32] {
  %762 = fn (%var_629: Tensor[(7, 16, 12), float32]) -> Tensor[(7, 16, 12), float32] {
    %761 = cast(%var_629, dtype="float32") /* ty=Tensor[(7, 16, 12), float32] */;
    exp(%761) /* ty=Tensor[(7, 16, 12), float32] */
  };
  %762(%var_638) /* ty=Tensor[(7, 16, 12), float32] */
}

def @func_4546() -> (Tensor[(11, 12, 12), float64],) {
  %766 = fn () -> (Tensor[(11, 12, 12), float64],) {
    %763 = @func_4512() /* ty=Tensor[(11, 12, 12), float64] */;
    %764 = cast(%763, dtype="float64") /* ty=Tensor[(11, 12, 12), float64] */;
    %765 = asinh(%764) /* ty=Tensor[(11, 12, 12), float64] */;
    (%765,)
  };
  %766() /* ty=(Tensor[(11, 12, 12), float64],) */
}

def @func_5253(%var_5251: Tensor[(1, 900), bool]) -> (Tensor[(1344), float32], Tensor[(168), float32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(2, 672), float64], Tensor[(12, 15, 5), bool], Tensor[(1, 900), bool]) {
  @func_5250(%var_5251) /* ty=(Tensor[(1344), float32], Tensor[(168), float32], Tensor[(10), uint16], Tensor[(100), uint16], Tensor[(2, 672), float64], Tensor[(12, 15, 5), bool], Tensor[(1, 900), bool]) */
}

def @func_5434() -> Tensor[(11, 12, 12), bool] {
  %767 = @func_4545() /* ty=(Tensor[(11, 12, 12), float64],) */;
  %768 = %767.0;
  %769 = cast(%768, dtype="float32") /* ty=Tensor[(11, 12, 12), float32] */;
  %770 = log2(%769) /* ty=Tensor[(11, 12, 12), float32] */;
  %771 = cast(%768, dtype="bool") /* ty=Tensor[(11, 12, 12), bool] */;
  %772 = shape_of(%770, dtype="int32") /* ty=Tensor[(3), int32] */;
  %773 = cast(%770, dtype="bool") /* ty=Tensor[(11, 12, 12), bool] */;
  %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%773, %774) /* ty=Tensor[(11, 12, 12), bool] */
}

def @func_1512(%var_1506: Tensor[(16, 3, 4), int32], %var_1507: Tensor[(16, 3, 4), int32], %var_1508: Tensor[(10), uint16], %var_1509: Tensor[(1344), float32], %var_1510: Tensor[(140), int32], %var_1511: Tensor[(900), bool]) -> (Tensor[(16, 3, 4), int32], Tensor[(3, 13, 9), float64], Tensor[(10), uint16], Tensor[(25, 4), uint16], Tensor[(1344), float32], Tensor[(3, 13, 9), float64], Tensor[(140), int32], Tensor[(12, 15, 5), bool], Tensor[(900), bool]) {
  %802 = fn (%var_1469: Tensor[(16, 3, 4), int32], %var_1470: Tensor[(16, 3, 4), int32], %var_1481: Tensor[(10), uint16], %var_1483: Tensor[(1344), float32], %var_1490: Tensor[(140), int32], %var_1496: Tensor[(900), bool]) -> (Tensor[(16, 3, 4), int32], Tensor[(3, 13, 9), float64], Tensor[(10), uint16], Tensor[(25, 4), uint16], Tensor[(1344), float32], Tensor[(3, 13, 9), float64], Tensor[(140), int32], Tensor[(12, 15, 5), bool], Tensor[(900), bool]) {
    %775 = cast(%var_1470, dtype="int32") /* ty=Tensor[(16, 3, 4), int32] */;
    %776 = shape_of(%var_1469, dtype="int32") /* ty=Tensor[(3), int32] */;
    %777 = cast(%var_1469, dtype="int32") /* ty=Tensor[(16, 3, 4), int32] */;
    %778 = dyn.reshape(%775, %776, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %779 = cast(%var_1481, dtype="uint16") /* ty=Tensor[(10), uint16] */;
    %780 = cast(meta[relay.Constant][62] /* ty=Tensor[(25, 4), uint16] */, dtype="uint16") /* ty=Tensor[(25, 4), uint16] */;
    %781 = cast(%var_1483, dtype="float32") /* ty=Tensor[(1344), float32] */;
    %782 = reshape(%779, newshape=[1, 10]) /* ty=Tensor[(1, 10), uint16] */;
    %783 = reshape(%780, newshape=[10, 10]) /* ty=Tensor[(10, 10), uint16] */;
    %784 = reshape(%781, newshape=[1344, 1]) /* ty=Tensor[(1344, 1), float32] */;
    %785 = @func_751(%782, %783, %784) /* ty=(Tensor[(10, 10), bool], Tensor[(7, 16, 12), float32], Tensor[(1344, 1), float32], Tensor[(3, 13, 9), float64], Tensor[(351), float64], Tensor[(3, 13, 9), float64], Tensor[(3, 13, 9), float64]) */;
    %786 = cast(%var_1490, dtype="int32") /* ty=Tensor[(140), int32] */;
    %787 = cast(%var_1490, dtype="int32") /* ty=Tensor[(140), int32] */;
    %788 = cast(%var_1490, dtype="int32") /* ty=Tensor[(140), int32] */;
    %789 = reshape(%786, newshape=[7, 10, 2]) /* ty=Tensor[(7, 10, 2), int32] */;
    %790 = reshape(%787, newshape=[7, 10, 2]) /* ty=Tensor[(7, 10, 2), int32] */;
    %791 = reshape(%788, newshape=[7, 10, 2]) /* ty=Tensor[(7, 10, 2), int32] */;
    %792 = @func_591(%789, %790, %791) /* ty=(Tensor[(7, 10, 2), int32], Tensor[(3, 13, 9), float64], Tensor[(351), float64], Tensor[(7, 10, 2), int16]) */;
    %793 = cast(%var_1496, dtype="bool") /* ty=Tensor[(900), bool] */;
    %794 = cast(%var_1496, dtype="bool") /* ty=Tensor[(900), bool] */;
    %795 = reshape(%793, newshape=[12, 15, 5]) /* ty=Tensor[(12, 15, 5), bool] */;
    %796 = reshape(%794, newshape=[12, 15, 5]) /* ty=Tensor[(12, 15, 5), bool] */;
    %797 = @func_1419(%795, %796) /* ty=(Tensor[(12, 15, 5), bool],) */;
    %798 = subtract(%777, %778) /* ty=Tensor[(16, 3, 4), int32] */;
    %799 = %785.5;
    %800 = %792.1;
    %801 = %797.0;
    (%798, %799, %var_1481, meta[relay.Constant][62] /* ty=Tensor[(25, 4), uint16] */, %var_1483, %800, %var_1490, %801, %var_1496)
  };
  %802(%var_1506, %var_1507, %var_1508, %var_1509, %var_1510, %var_1511) /* ty=(Tensor[(16, 3, 4), int32], Tensor[(3, 13, 9), float64], Tensor[(10), uint16], Tensor[(25, 4), uint16], Tensor[(1344), float32], Tensor[(3, 13, 9), float64], Tensor[(140), int32], Tensor[(12, 15, 5), bool], Tensor[(900), bool]) */
}

def @func_4656() -> (Tensor[(11, 12, 12), float64], Tensor[(7, 16, 12), float32], Tensor[(1344), float32]) {
  %808 = fn () -> (Tensor[(11, 12, 12), float64], Tensor[(7, 16, 12), float32], Tensor[(1344), float32]) {
    %803 = @func_4545() /* ty=(Tensor[(11, 12, 12), float64],) */;
    %804 = cast(meta[relay.Constant][63] /* ty=Tensor[(1344), float32] */, dtype="float32") /* ty=Tensor[(1344), float32] */;
    %805 = reshape(%804, newshape=[7, 16, 12]) /* ty=Tensor[(7, 16, 12), float32] */;
    %806 = %803.0;
    %807 = @func_637(%805) /* ty=Tensor[(7, 16, 12), float32] */;
    (%806, %807, meta[relay.Constant][63] /* ty=Tensor[(1344), float32] */)
  };
  %808() /* ty=(Tensor[(11, 12, 12), float64], Tensor[(7, 16, 12), float32], Tensor[(1344), float32]) */
}

def @func_5037(%var_5036: Tensor[(11, 12, 12), float64]) -> Tensor[(11, 12, 12), bool] {
  %815 = fn (%var_5024: Tensor[(11, 12, 12), float64]) -> Tensor[(11, 12, 12), bool] {
    %809 = @func_4545() /* ty=(Tensor[(11, 12, 12), float64],) */;
    %810 = %809.0;
    %811 = cast(%var_5024, dtype="bool") /* ty=Tensor[(11, 12, 12), bool] */;
    %812 = shape_of(%810, dtype="int32") /* ty=Tensor[(3), int32] */;
    %813 = cast(%810, dtype="bool") /* ty=Tensor[(11, 12, 12), bool] */;
    %814 = dyn.reshape(%811, %812, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%813, %814) /* ty=Tensor[(11, 12, 12), bool] */
  };
  %815(%var_5036) /* ty=Tensor[(11, 12, 12), bool] */
}

def @func_6729() -> (Tensor[(540), float64],) {
  %816 = @func_6320() /* ty=Tensor[(540), float64] */;
  (%816,)
}

def @func_3479(%var_3477: uint32, %var_3478: Tensor[(12, 2, 11), uint32]) -> (Tensor[(12, 15, 5), bool], Tensor[(9, 100), bool], Tensor[(12, 2, 11), bool], Tensor[(12, 2, 11), float32]) {
  %831 = fn (%var_3434: uint32, %var_3435: Tensor[(12, 2, 11), uint32]) -> (Tensor[(12, 15, 5), bool], Tensor[(9, 100), bool], Tensor[(12, 2, 11), bool], Tensor[(12, 2, 11), float32]) {
    %817 = cast(meta[relay.Constant][64] /* ty=Tensor[(9, 100), bool] */, dtype="bool") /* ty=Tensor[(9, 100), bool] */;
    %818 = cast(meta[relay.Constant][64] /* ty=Tensor[(9, 100), bool] */, dtype="bool") /* ty=Tensor[(9, 100), bool] */;
    %819 = reshape(%817, newshape=[12, 15, 5]) /* ty=Tensor[(12, 15, 5), bool] */;
    %820 = reshape(%818, newshape=[12, 15, 5]) /* ty=Tensor[(12, 15, 5), bool] */;
    %821 = @func_1419(%819, %820) /* ty=(Tensor[(12, 15, 5), bool],) */;
    %822 = cast(%var_3434, dtype="uint32") /* ty=uint32 */;
    %823 = cast(%var_3435, dtype="uint32") /* ty=Tensor[(12, 2, 11), uint32] */;
    %824 = multiply(%822, %823) /* ty=Tensor[(12, 2, 11), uint32] */;
    %825 = cast(%var_3434, dtype="bool") /* ty=bool */;
    %826 = cast(%824, dtype="bool") /* ty=Tensor[(12, 2, 11), bool] */;
    %827 = cast(%var_3435, dtype="float32") /* ty=Tensor[(12, 2, 11), float32] */;
    %828 = %821.0;
    %829 = not_equal(%825, %826) /* ty=Tensor[(12, 2, 11), bool] */;
    %830 = acosh(%827) /* ty=Tensor[(12, 2, 11), float32] */;
    (%828, meta[relay.Constant][64] /* ty=Tensor[(9, 100), bool] */, %829, %830)
  };
  %831(%var_3477, %var_3478) /* ty=(Tensor[(12, 15, 5), bool], Tensor[(9, 100), bool], Tensor[(12, 2, 11), bool], Tensor[(12, 2, 11), float32]) */
}

def @func_7321(%var_7320: Tensor[(264), uint32]) -> (Tensor[(540), float32], Tensor[(12, 2, 11), bool], uint32, Tensor[(264), uint32]) {
  %840 = fn (%var_7314: Tensor[(264), uint32]) -> (Tensor[(540), float32], Tensor[(12, 2, 11), bool], uint32, Tensor[(264), uint32]) {
    %832 = @func_7123() /* ty=(Tensor[(1344), float32], Tensor[(540), float32], Tensor[(5, 12, 16), bool], Tensor[(960), int32], Tensor[(11, 12, 12), float64]) */;
    %833 = cast(meta[relay.Constant][65] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %834 = cast(%var_7314, dtype="uint32") /* ty=Tensor[(264), uint32] */;
    %835 = reshape(%833, newshape=[]) /* ty=uint32 */;
    %836 = reshape(%834, newshape=[12, 2, 11]) /* ty=Tensor[(12, 2, 11), uint32] */;
    %837 = @func_3476(%835, %836) /* ty=(Tensor[(12, 15, 5), bool], Tensor[(9, 100), bool], Tensor[(12, 2, 11), bool], Tensor[(12, 2, 11), float32]) */;
    %838 = %832.1;
    %839 = %837.2;
    (%838, %839, meta[relay.Constant][65] /* ty=uint32 */, %var_7314)
  };
  %840(%var_7320) /* ty=(Tensor[(540), float32], Tensor[(12, 2, 11), bool], uint32, Tensor[(264), uint32]) */
}

def @func_8235(%var_8233: Tensor[(14, 12, 3), bool]) -> Tensor[(14, 12, 3), bool] {
  @func_8232(%var_8233) /* ty=Tensor[(14, 12, 3), bool] */
}

def @func_8232(%var_8213: Tensor[(14, 12, 3), bool]) -> Tensor[(14, 12, 3), bool] {
  %841 = cast(meta[relay.Constant][66] /* ty=Tensor[(14, 12, 3), bool] */, dtype="bool") /* ty=Tensor[(14, 12, 3), bool] */;
  %842 = shape_of(%var_8213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %843 = cast(%var_8213, dtype="bool") /* ty=Tensor[(14, 12, 3), bool] */;
  %844 = dyn.reshape(%841, %842, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%843, %844) /* ty=Tensor[(14, 12, 3), bool] */
}

def @func_8242() -> Tensor[(11, 12, 12), float64] {
  %846 = fn () -> Tensor[(11, 12, 12), float64] {
    %845 = @func_6573() /* ty=(Tensor[(11, 12, 12), float64],) */;
    %845.0
  };
  %846() /* ty=Tensor[(11, 12, 12), float64] */
}

def @func_5728() -> (Tensor[(540), float32], Tensor[(2, 4, 4), uint16], Tensor[(32), uint16], Tensor[(11, 12, 12), float32]) {
  %847 = @func_4856() /* ty=(Tensor[(1344), float32], Tensor[(540), float32], Tensor[(9, 10, 6), float64]) */;
  %848 = cast(meta[relay.Constant][67] /* ty=Tensor[(32), uint16] */, dtype="uint16") /* ty=Tensor[(32), uint16] */;
  %849 = reshape(%848, newshape=[2, 4, 4]) /* ty=Tensor[(2, 4, 4), uint16] */;
  %850 = @func_5642(%849) /* ty=(Tensor[(2, 4, 4), uint16], Tensor[(1344), float32], Tensor[(11, 12, 12), float64]) */;
  %851 = %847.1;
  %852 = %850.0;
  %853 = @func_5509() /* ty=Tensor[(11, 12, 12), float32] */;
  (%851, %852, meta[relay.Constant][67] /* ty=Tensor[(32), uint16] */, %853)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen8/build/output.py:1835: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen8/build/output.py", line 1840, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(672) tvmgen_default_fused_reshape_power_kernel0(double* __restrict__ T_power, double* __restrict__ placeholder, double* __restrict__ placeholder1) {
  T_power[(((int)threadIdx.x))] = pow(placeholder[(((int)threadIdx.x))], placeholder1[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

