==========mod==========
#[version = "0.0.5"]
def @func_4390(%var_4386: Tensor[(78, 1), float64]) -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(78, 1), float64]) {
  %0 = @func_3615() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %1 = cast(%var_4386, dtype="float64") /* ty=Tensor[(78, 1), float64] */;
  %2 = reshape(%1, newshape=[78]) /* ty=Tensor[(78), float64] */;
  %3 = @func_2764(%2) /* ty=(Tensor[(12, 4, 8), float64], Tensor[(78), float64], Tensor[(12, 4, 8), float64], Tensor[(?, 468), bool]) */;
  %4 = %0.0;
  %5 = %3.2;
  (%4, %5, %var_4386)
}

def @func_2617(%var_2586: Tensor[(3, 8, 3), float32]) -> (Tensor[(3, 8, 3), bool], Tensor[(12, 4, 8), float64]) {
  %6 = cast(1.34041f /* ty=float32 */, dtype="bool") /* ty=bool */;
  %7 = cast(%var_2586, dtype="bool") /* ty=Tensor[(3, 8, 3), bool] */;
  %8 = equal(%6, %7) /* ty=Tensor[(3, 8, 3), bool] */;
  %9 = @func_2306() /* ty=Tensor[(12, 4, 8), float64] */;
  (%8, %9)
}

def @func_6167(%var_6120: Tensor[(9, 14, 1), float32], %var_6121: Tensor[(9, 14, 5), float32]) -> (Tensor[(9, 14, 5), float32], Tensor[(9, 14, 1), float32]) {
  %10 = cast(%var_6120, dtype="float32") /* ty=Tensor[(9, 14, 1), float32] */;
  %11 = cast(%var_6121, dtype="float32") /* ty=Tensor[(9, 14, 5), float32] */;
  %12 = cast(%var_6120, dtype="float32") /* ty=Tensor[(9, 14, 1), float32] */;
  %13 = power(%10, %11) /* ty=Tensor[(9, 14, 5), float32] */;
  %14 = asin(%12) /* ty=Tensor[(9, 14, 1), float32] */;
  (%13, %14)
}

def @func_4183() -> Tensor[(12, 4, 8), float32] {
  @func_3123() /* ty=Tensor[(12, 4, 8), float32] */
}

def @func_2306() -> Tensor[(12, 4, 8), float64] {
  @func_1823() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_7342() -> (Tensor[(12, 4, 8), float64],) {
  %15 = @func_927() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %16 = %15.2;
  (%16,)
}

def @func_8522() -> (Tensor[(12, 4, 8), int8], Tensor[(12, 4, 8), float64], Tensor[(1, 72), float64]) {
  %17 = @func_8376() /* ty=(Tensor[(12, 9, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), int8], bool, Tensor[(5, 2), bool]) */;
  %18 = @func_5562() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */;
  %19 = @func_5529() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(3, 8, 3), bool], Tensor[(1, 72), float32]) */;
  %20 = %19.2;
  %21 = cast(%20, dtype="float64") /* ty=Tensor[(1, 72), float64] */;
  %22 = asin(%21) /* ty=Tensor[(1, 72), float64] */;
  %23 = cast(%22, dtype="float64") /* ty=Tensor[(1, 72), float64] */;
  %24 = %17.3;
  %25 = %18.1;
  %26 = atan(%23) /* ty=Tensor[(1, 72), float64] */;
  (%24, %25, %26)
}

def @func_9462() -> Tensor[(12, 4, 8), float32] {
  %27 = @func_1261() /* ty=(Tensor[(12, 4, 8), float32],) */;
  %27.0
}

def @func_1087() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  %28 = @func_374() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */;
  %29 = %28.1;
  %30 = cast(%29, dtype="float32") /* ty=Tensor[(12, 4, 8), float32] */;
  %31 = @func_311() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %32 = sigmoid(%30) /* ty=Tensor[(12, 4, 8), float32] */;
  %33 = %31.0;
  (%32, %33)
}

def @func_7798() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(13, 6), float64], Tensor[(14, 8, 9), float32], Tensor[(12, 4, 8), float64]) {
  %34 = @func_420() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %35 = cast(meta[relay.Constant][0] /* ty=Tensor[(13, 6), float64] */, dtype="float64") /* ty=Tensor[(13, 6), float64] */;
  %36 = reshape(%35, newshape=[78]) /* ty=Tensor[(78), float64] */;
  %37 = @func_3675(%36) /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(?, 468), bool], Tensor[(78), float64], Tensor[(12, 4, 8), float64], Tensor[(36, 2), float32], Tensor[(12, 4, 8), float32]) */;
  %38 = %34.0;
  %39 = %37.1;
  %40 = @func_4629() /* ty=Tensor[(14, 8, 9), float32] */;
  %41 = @func_3188() /* ty=Tensor[(12, 4, 8), float64] */;
  (%38, %39, meta[relay.Constant][0] /* ty=Tensor[(13, 6), float64] */, %40, %41)
}

def @func_4622() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  %42 = @func_1261() /* ty=(Tensor[(12, 4, 8), float32],) */;
  %43 = @func_3305() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), uint8], Tensor[(12, 4, 8), float64]) */;
  %44 = %42.0;
  %45 = %43.2;
  (%44, %45)
}

def @func_7352(%var_7346: Tensor[(9, 1, 3), uint16], %var_7347: Tensor[(9, 15, 3), uint16]) -> Tensor[(9, 15, 3), uint16] {
  %46 = cast(%var_7346, dtype="uint16") /* ty=Tensor[(9, 1, 3), uint16] */;
  %47 = cast(%var_7347, dtype="uint16") /* ty=Tensor[(9, 15, 3), uint16] */;
  right_shift(%46, %47) /* ty=Tensor[(9, 15, 3), uint16] */
}

def @func_6309() -> (Tensor[(12, 4, 8), float32], Tensor[(384), float64]) {
  %48 = @func_567() /* ty=(Tensor[(12, 4, 8), float32],) */;
  %49 = @func_3915() /* ty=(Tensor[(384), float64],) */;
  %50 = %48.0;
  %51 = %49.0;
  (%50, %51)
}

def @func_3074() -> (Tensor[(12, 10, 10), uint64],) {
  %52 = @func_1761() /* ty=(Tensor[(12, 10, 10), uint64], Tensor[(12, 10, 10), float32]) */;
  %53 = %52.0;
  (%53,)
}

def @func_676() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  %54 = @func_539() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32]) */;
  %55 = @func_420() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %56 = %54.1;
  %57 = %55.0;
  (%56, %57)
}

def @func_5763(%var_5748: uint16, %var_5749: Tensor[(13, 14, 13), uint16]) -> Tensor[(13, 14, 13), uint16] {
  %58 = cast(%var_5748, dtype="uint16") /* ty=uint16 */;
  %59 = cast(%var_5749, dtype="uint16") /* ty=Tensor[(13, 14, 13), uint16] */;
  add(%58, %59) /* ty=Tensor[(13, 14, 13), uint16] */
}

def @func_5151() -> (Tensor[(12, 4, 8), float64],) {
  %60 = @func_4962() /* ty=Tensor[(12, 4, 8), float64] */;
  (%60,)
}

def @func_9522() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  %61 = @func_1261() /* ty=(Tensor[(12, 4, 8), float32],) */;
  %62 = %61.0;
  %63 = @func_4694() /* ty=Tensor[(12, 4, 8), float64] */;
  (%62, %63)
}

def @func_714(%var_687: Tensor[(12, 4, 3), uint16], %var_688: Tensor[(12, 4, 3), uint16]) -> (Tensor[(12, 4, 3), bool], Tensor[(12, 4, 3), int64], Tensor[(12, 4, 3), float64]) {
  %64 = cast(%var_688, dtype="bool") /* ty=Tensor[(12, 4, 3), bool] */;
  %65 = shape_of(%var_687, dtype="int32") /* ty=Tensor[(3), int32] */;
  %66 = cast(%var_687, dtype="bool") /* ty=Tensor[(12, 4, 3), bool] */;
  %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %68 = cast(%var_687, dtype="int64") /* ty=Tensor[(12, 4, 3), int64] */;
  %69 = shape_of(%var_688, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(%var_688, dtype="int64") /* ty=Tensor[(12, 4, 3), int64] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %72 = cast(%var_687, dtype="float64") /* ty=Tensor[(12, 4, 3), float64] */;
  %73 = asin(%72) /* ty=Tensor[(12, 4, 3), float64] */;
  %74 = cast(%73, dtype="float64") /* ty=Tensor[(12, 4, 3), float64] */;
  %75 = not_equal(%66, %67) /* ty=Tensor[(12, 4, 3), bool] */;
  %76 = left_shift(%70, %71) /* ty=Tensor[(12, 4, 3), int64] */;
  %77 = sigmoid(%74) /* ty=Tensor[(12, 4, 3), float64] */;
  (%75, %76, %77)
}

def @func_2014() -> Tensor[(12, 4, 8), float64] {
  %78 = @func_616() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %78.0
}

def @func_8091() -> (Tensor[(12, 4, 8), float64], Tensor[(9, 14, 5), float32], Tensor[(126), float32], Tensor[(630), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(384), float64], Tensor[(384), bool], Tensor[(12, 4, 8), float32]) {
  %79 = cast(meta[relay.Constant][1] /* ty=Tensor[(126), float32] */, dtype="float32") /* ty=Tensor[(126), float32] */;
  %80 = cast(meta[relay.Constant][2] /* ty=Tensor[(630), float32] */, dtype="float32") /* ty=Tensor[(630), float32] */;
  %81 = reshape(%79, newshape=[9, 14, 1]) /* ty=Tensor[(9, 14, 1), float32] */;
  %82 = reshape(%80, newshape=[9, 14, 5]) /* ty=Tensor[(9, 14, 5), float32] */;
  %83 = @func_6167(%81, %82) /* ty=(Tensor[(9, 14, 5), float32], Tensor[(9, 14, 1), float32]) */;
  %84 = @func_5364() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */;
  %85 = @func_6856() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32]) */;
  %86 = @func_6377() /* ty=(Tensor[(384), float64],) */;
  %87 = @func_5736() /* ty=Tensor[(12, 4, 8), float64] */;
  %88 = %83.0;
  %89 = %84.1;
  %90 = %85.1;
  %91 = %86.0;
  %92 = @func_3980() /* ty=Tensor[(384), bool] */;
  %93 = @func_5479() /* ty=Tensor[(12, 4, 8), float32] */;
  (%87, %88, meta[relay.Constant][1] /* ty=Tensor[(126), float32] */, meta[relay.Constant][2] /* ty=Tensor[(630), float32] */, %89, %90, %91, %92, %93)
}

def @func_9053() -> Tensor[(12, 4, 8), float64] {
  %94 = @func_591() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %94.0
}

def @func_3486() -> (Tensor[(12, 4, 8), float64],) {
  %95 = @func_2306() /* ty=Tensor[(12, 4, 8), float64] */;
  (%95,)
}

def @func_5937() -> (Tensor[(384), bool],) {
  %96 = @func_3980() /* ty=Tensor[(384), bool] */;
  (%96,)
}

def @func_10473() -> Tensor[(12, 4, 8), float64] {
  @func_1105() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_344() -> Tensor[(12, 4, 8), float64] {
  %97 = @func_311() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %97.0
}

def @func_9487() -> (Tensor[(384), bool],) {
  %98 = @func_3980() /* ty=Tensor[(384), bool] */;
  (%98,)
}

def @func_759(%var_740: Tensor[(7, 15), float32]) -> (Tensor[(7, 15), float32], Tensor[(12, 4, 8), float32]) {
  %99 = cast(%var_740, dtype="float32") /* ty=Tensor[(7, 15), float32] */;
  %100 = @func_311() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %101 = log10(%99) /* ty=Tensor[(7, 15), float32] */;
  %102 = %100.1;
  (%101, %102)
}

def @func_1603() -> (Tensor[(3, 9, 2), int64], Tensor[(12, 4, 8), int8], Tensor[(384), bool]) {
  %103 = cast(-6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %104 = cast(meta[relay.Constant][3] /* ty=Tensor[(3, 9, 2), int64] */, dtype="int64") /* ty=Tensor[(3, 9, 2), int64] */;
  %105 = cast(meta[relay.Constant][4] /* ty=Tensor[(384), bool] */, dtype="bool") /* ty=Tensor[(384), bool] */;
  %106 = reshape(%105, newshape=[12, 4, 8]) /* ty=Tensor[(12, 4, 8), bool] */;
  %107 = @func_1199(%106) /* ty=(Tensor[(12, 4, 8), int8],) */;
  %108 = maximum(%103, %104) /* ty=Tensor[(3, 9, 2), int64] */;
  %109 = %107.0;
  (%108, %109, meta[relay.Constant][4] /* ty=Tensor[(384), bool] */)
}

def @func_5899() -> (Tensor[(12, 4, 8), float64],) {
  %110 = @func_2235() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %111 = %110.1;
  (%111,)
}

def @func_6243() -> Tensor[(12, 4, 8), float64] {
  @func_2478() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_4220(%var_4209: Tensor[(72, 1), float32]) -> (Tensor[(12, 4, 8), float32], Tensor[(5, 351), int64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(72, 1), float32]) {
  %112 = @func_311() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %113 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 351), int64] */, dtype="int64") /* ty=Tensor[(5, 351), int64] */;
  %114 = reshape(%113, newshape=[1755]) /* ty=Tensor[(1755), int64] */;
  %115 = @func_4142(%114) /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(78), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(15, 13, 9), int64], Tensor[(1755), int64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %116 = %115.0;
  %117 = cast(%116, dtype="float32") /* ty=Tensor[(12, 4, 8), float32] */;
  %118 = cast(%var_4209, dtype="float32") /* ty=Tensor[(72, 1), float32] */;
  %119 = reshape(%118, newshape=[3, 8, 3]) /* ty=Tensor[(3, 8, 3), float32] */;
  %120 = @func_2617(%119) /* ty=(Tensor[(3, 8, 3), bool], Tensor[(12, 4, 8), float64]) */;
  %121 = %112.1;
  %122 = log2(%117) /* ty=Tensor[(12, 4, 8), float32] */;
  %123 = %120.1;
  (%121, meta[relay.Constant][5] /* ty=Tensor[(5, 351), int64] */, %122, %123, %var_4209)
}

def @func_10834() -> (Tensor[(15, 13, 9), float64],) {
  %124 = @func_6335() /* ty=(Tensor[(15, 13, 9), int64],) */;
  %125 = %124.0;
  %126 = cast(%125, dtype="float64") /* ty=Tensor[(15, 13, 9), float64] */;
  %127 = log10(%126) /* ty=Tensor[(15, 13, 9), float64] */;
  %128 = cast(%127, dtype="float64") /* ty=Tensor[(15, 13, 9), float64] */;
  %129 = atanh(%128) /* ty=Tensor[(15, 13, 9), float64] */;
  (%129,)
}

def @func_6685(%var_6663: Tensor[(1, 224), float64]) -> (Tensor[(384), bool], Tensor[(3, 9, 2), int64], Tensor[(7, 2, 7), float64], Tensor[(14, 7), float64], Tensor[(15, 6, 16), float64], Tensor[(1, 224), float64]) {
  %130 = @func_1603() /* ty=(Tensor[(3, 9, 2), int64], Tensor[(12, 4, 8), int8], Tensor[(384), bool]) */;
  %131 = cast(meta[relay.Constant][6] /* ty=Tensor[(14, 7), float64] */, dtype="float64") /* ty=Tensor[(14, 7), float64] */;
  %132 = reshape(%131, newshape=[7, 2, 7]) /* ty=Tensor[(7, 2, 7), float64] */;
  %133 = @func_4847(%132) /* ty=(Tensor[(7, 2, 7), float64],) */;
  %134 = cast(%var_6663, dtype="float64") /* ty=Tensor[(1, 224), float64] */;
  %135 = reshape(%134, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %136 = @func_5318(%135) /* ty=(Tensor[(15, 6, 16), float64], Tensor[(3, 9, 2), int64], Tensor[(4, 14, 4), float64], Tensor[(224), float64]) */;
  %137 = @func_3980() /* ty=Tensor[(384), bool] */;
  %138 = %130.0;
  %139 = %133.0;
  %140 = %136.0;
  (%137, %138, %139, meta[relay.Constant][6] /* ty=Tensor[(14, 7), float64] */, %140, %var_6663)
}

def @func_616() -> (Tensor[(12, 4, 8), float64],) {
  %141 = @func_420() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %142 = %141.0;
  (%142,)
}

def @func_3615() -> (Tensor[(12, 4, 8), float64],) {
  %143 = @func_2235() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %144 = %143.1;
  (%144,)
}

def @func_10613(%var_10579: int16) -> (Tensor[(1, 2, 1), int16], Tensor[(12, 4, 8), float32], Tensor[(1, 2, 1), float64], Tensor[(12, 4, 8), float64], Tensor[(5, 8, ?), uint64], Tensor[(40), uint64]) {
  %145 = cast(%var_10579, dtype="int16") /* ty=int16 */;
  %146 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 2, 1), int16] */, dtype="int16") /* ty=Tensor[(1, 2, 1), int16] */;
  %147 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 2, 1), int16] */, dtype="float64") /* ty=Tensor[(1, 2, 1), float64] */;
  %148 = @func_7405() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */;
  %149 = cast(meta[relay.Constant][8] /* ty=Tensor[(40), uint64] */, dtype="uint64") /* ty=Tensor[(40), uint64] */;
  %150 = cast(meta[relay.Constant][8] /* ty=Tensor[(40), uint64] */, dtype="uint64") /* ty=Tensor[(40), uint64] */;
  %151 = reshape(%149, newshape=[5, 8, 1]) /* ty=Tensor[(5, 8, 1), uint64] */;
  %152 = reshape(%150, newshape=[5, 8, 1]) /* ty=Tensor[(5, 8, 1), uint64] */;
  %153 = logical_xor(%145, %146) /* ty=Tensor[(1, 2, 1), int16] */;
  %154 = @func_9462() /* ty=Tensor[(12, 4, 8), float32] */;
  %155 = atanh(%147) /* ty=Tensor[(1, 2, 1), float64] */;
  %156 = %148.1;
  %157 = @func_4972(%151, %152) /* ty=Tensor[(5, 8, ?), uint64] */;
  (%153, %154, %155, %156, %157, meta[relay.Constant][8] /* ty=Tensor[(40), uint64] */)
}

def @func_4142(%var_4082: Tensor[(1755), int64]) -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(78), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(15, 13, 9), int64], Tensor[(1755), int64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  %158 = @func_3863() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %159 = cast(meta[relay.Constant][9] /* ty=Tensor[(78), float64] */, dtype="float64") /* ty=Tensor[(78), float64] */;
  %160 = reshape(%159, newshape=[78]) /* ty=Tensor[(78), float64] */;
  %161 = @func_3675(%160) /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(?, 468), bool], Tensor[(78), float64], Tensor[(12, 4, 8), float64], Tensor[(36, 2), float32], Tensor[(12, 4, 8), float32]) */;
  %162 = @func_3786() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %163 = @func_2428() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %164 = cast(%var_4082, dtype="int64") /* ty=Tensor[(1755), int64] */;
  %165 = reshape(%164, newshape=[15, 13, 9]) /* ty=Tensor[(15, 13, 9), int64] */;
  %166 = @func_2680() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %167 = %158.1;
  %168 = %161.0;
  %169 = %162.0;
  %170 = %163.0;
  %171 = @func_1289(%165) /* ty=Tensor[(15, 13, 9), int64] */;
  %172 = @func_2306() /* ty=Tensor[(12, 4, 8), float64] */;
  %173 = @func_2855() /* ty=Tensor[(12, 4, 8), float32] */;
  %174 = %166.0;
  (%167, %168, meta[relay.Constant][9] /* ty=Tensor[(78), float64] */, %169, %170, %171, %var_4082, %172, %173, %174)
}

def @func_539() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32]) {
  %175 = @func_374() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */;
  %176 = %175.1;
  %177 = cast(%176, dtype="float32") /* ty=Tensor[(12, 4, 8), float32] */;
  %178 = sqrt(%177) /* ty=Tensor[(12, 4, 8), float32] */;
  %179 = cast(%178, dtype="float32") /* ty=Tensor[(12, 4, 8), float32] */;
  %180 = @func_471() /* ty=Tensor[(12, 4, 8), float32] */;
  %181 = acosh(%179) /* ty=Tensor[(12, 4, 8), float32] */;
  (%180, %181)
}

def @func_9813(%var_9775: Tensor[(224), float64]) -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(15, 13, 9), int64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(224), float64], Tensor[(208, 1), int8], Tensor[(12, 4, 8), float64]) {
  %182 = @func_9255() /* ty=(Tensor[(12, 4, 8), float32],) */;
  %183 = @func_5151() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %184 = @func_6335() /* ty=(Tensor[(15, 13, 9), int64],) */;
  %185 = cast(%var_9775, dtype="float64") /* ty=Tensor[(224), float64] */;
  %186 = cast(meta[relay.Constant][10] /* ty=Tensor[(208, 1), int8] */, dtype="int8") /* ty=Tensor[(208, 1), int8] */;
  %187 = reshape(%185, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %188 = reshape(%186, newshape=[208]) /* ty=Tensor[(208), int8] */;
  %189 = @func_7002(%187, %188) /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), int32], Tensor[(3, 9, 2), int64], Tensor[(224), float64], Tensor[(12, 4, 8), float32], Tensor[(208), int8], Tensor[(10), bool], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(78), float64]) */;
  %190 = @func_6482() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %191 = @func_3123() /* ty=Tensor[(12, 4, 8), float32] */;
  %192 = %182.0;
  %193 = %183.0;
  %194 = %184.0;
  %195 = @func_5736() /* ty=Tensor[(12, 4, 8), float64] */;
  %196 = %189.7;
  %197 = %190.0;
  (%191, %192, %193, %194, %195, %196, %var_9775, meta[relay.Constant][10] /* ty=Tensor[(208, 1), int8] */, %197)
}

def @func_7731() -> Tensor[(384), bool] {
  @func_2558() /* ty=Tensor[(384), bool] */
}

def @func_10685(%var_10663: Tensor[(15, 3, 12), float32]) -> (Tensor[(15, 3, 12), float32], Tensor[(2, 10, 3), bool], Tensor[(60), bool], Tensor[(12, 4, 8), float64]) {
  %198 = cast(%var_10663, dtype="float32") /* ty=Tensor[(15, 3, 12), float32] */;
  %199 = cast(meta[relay.Constant][11] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %200 = reshape(%199, newshape=[2, 10, 3]) /* ty=Tensor[(2, 10, 3), bool] */;
  %201 = @func_5364() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */;
  %202 = exp(%198) /* ty=Tensor[(15, 3, 12), float32] */;
  %203 = @func_10397(%200) /* ty=Tensor[(2, 10, 3), bool] */;
  %204 = %201.1;
  (%202, %203, meta[relay.Constant][11] /* ty=Tensor[(60), bool] */, %204)
}

def @func_827() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) {
  %205 = @func_311() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %206 = @func_539() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32]) */;
  %207 = %205.0;
  %208 = %206.0;
  (%207, %208)
}

def @func_591() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) {
  %209 = @func_344() /* ty=Tensor[(12, 4, 8), float64] */;
  %210 = @func_471() /* ty=Tensor[(12, 4, 8), float32] */;
  (%209, %210)
}

def @func_1006(%var_984: Tensor[(12, 4, 8), float64]) -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), int32]) {
  %211 = @func_616() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %212 = @func_591() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %213 = @func_311() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %214 = %213.0;
  %215 = cast(%var_984, dtype="int32") /* ty=Tensor[(12, 4, 8), int32] */;
  %216 = shape_of(%214, dtype="int32") /* ty=Tensor[(3), int32] */;
  %217 = cast(%214, dtype="int32") /* ty=Tensor[(12, 4, 8), int32] */;
  %218 = dyn.reshape(%215, %216, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %219 = %211.0;
  %220 = %212.1;
  %221 = right_shift(%217, %218) /* ty=Tensor[(12, 4, 8), int32] */;
  (%219, %220, %221)
}

def @func_374() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) {
  %222 = @func_344() /* ty=Tensor[(12, 4, 8), float64] */;
  %223 = @func_344() /* ty=Tensor[(12, 4, 8), float64] */;
  (%222, %223)
}

def @func_8306(%var_8270: Tensor[(8, 16, 12), float64]) -> (Tensor[(8, 16, 12), float64], Tensor[(8, 16, 12), float64], Tensor[(12, 4, 8), float64], Tensor[(1200), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) {
  %224 = cast(meta[relay.Constant][12] /* ty=Tensor[(8, 16, 12), float64] */, dtype="float64") /* ty=Tensor[(8, 16, 12), float64] */;
  %225 = shape_of(%var_8270, dtype="int32") /* ty=Tensor[(3), int32] */;
  %226 = cast(%var_8270, dtype="float64") /* ty=Tensor[(8, 16, 12), float64] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %228 = cast(%var_8270, dtype="float64") /* ty=Tensor[(8, 16, 12), float64] */;
  %229 = cast(meta[relay.Constant][13] /* ty=Tensor[(1200), float32] */, dtype="float32") /* ty=Tensor[(1200), float32] */;
  %230 = reshape(%229, newshape=[12, 10, 10]) /* ty=Tensor[(12, 10, 10), float32] */;
  %231 = @func_2361(%230) /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 10, 10), bool]) */;
  %232 = @func_6530() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %233 = multiply(%226, %227) /* ty=Tensor[(8, 16, 12), float64] */;
  %234 = atan(%228) /* ty=Tensor[(8, 16, 12), float64] */;
  %235 = %231.0;
  %236 = @func_6243() /* ty=Tensor[(12, 4, 8), float64] */;
  %237 = %232.0;
  (%233, %234, %235, meta[relay.Constant][13] /* ty=Tensor[(1200), float32] */, %236, %237)
}

def @func_2478() -> Tensor[(12, 4, 8), float64] {
  %238 = @func_927() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %238.2
}

def @func_5225(%var_5216: Tensor[(105), float32]) -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(105), float32], Tensor[(12, 4, 8), float32]) {
  %239 = @func_2235() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %240 = cast(%var_5216, dtype="float32") /* ty=Tensor[(105), float32] */;
  %241 = reshape(%240, newshape=[7, 15]) /* ty=Tensor[(7, 15), float32] */;
  %242 = @func_759(%241) /* ty=(Tensor[(7, 15), float32], Tensor[(12, 4, 8), float32]) */;
  %243 = %239.1;
  %244 = %242.1;
  %245 = @func_471() /* ty=Tensor[(12, 4, 8), float32] */;
  (%243, %244, %var_5216, %245)
}

def @func_9927() -> (Tensor[(12, 4, 8), float32],) {
  %246 = @func_5130() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %247 = %246.5;
  (%247,)
}

def @func_1199(%var_1191: Tensor[(12, 4, 8), bool]) -> (Tensor[(12, 4, 8), int8],) {
  %248 = @func_311() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %249 = %248.0;
  %250 = cast(meta[relay.Constant][14] /* ty=Tensor[(12, 4, 8), float64] */, dtype="bool") /* ty=Tensor[(12, 4, 8), bool] */;
  %251 = shape_of(%249, dtype="int32") /* ty=Tensor[(3), int32] */;
  %252 = cast(%249, dtype="bool") /* ty=Tensor[(12, 4, 8), bool] */;
  %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %254 = greater(%252, %253) /* ty=Tensor[(12, 4, 8), bool] */;
  %255 = cast(%var_1191, dtype="int8") /* ty=Tensor[(12, 4, 8), int8] */;
  %256 = shape_of(%254, dtype="int32") /* ty=Tensor[(3), int32] */;
  %257 = cast(%254, dtype="int8") /* ty=Tensor[(12, 4, 8), int8] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %259 = bitwise_and(%257, %258) /* ty=Tensor[(12, 4, 8), int8] */;
  (%259,)
}

def @func_3863() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) {
  %260 = @func_1663() /* ty=(Tensor[(12, 4, 8), float32],) */;
  %261 = @func_374() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */;
  %262 = @func_3305() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), uint8], Tensor[(12, 4, 8), float64]) */;
  %263 = @func_539() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32]) */;
  %264 = %260.0;
  %265 = %261.0;
  %266 = %262.0;
  %267 = %263.0;
  (%264, %265, %266, %267)
}

def @func_10800(%var_10791: uint16, %var_10792: Tensor[(9, 7, 1), uint16]) -> (Tensor[(9, 7, 1), uint16], Tensor[(12, 4, 8), float64]) {
  %268 = cast(%var_10791, dtype="uint16") /* ty=uint16 */;
  %269 = cast(%var_10792, dtype="uint16") /* ty=Tensor[(9, 7, 1), uint16] */;
  %270 = @func_6435() /* ty=(Tensor[(384), bool], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %271 = bitwise_or(%268, %269) /* ty=Tensor[(9, 7, 1), uint16] */;
  %272 = %270.1;
  (%271, %272)
}

def @func_1761() -> (Tensor[(12, 10, 10), uint64], Tensor[(12, 10, 10), float32]) {
  %273 = cast(meta[relay.Constant][16] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %274 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 10, 10), uint16] */, dtype="uint16") /* ty=Tensor[(12, 10, 10), uint16] */;
  %275 = left_shift(%273, %274) /* ty=Tensor[(12, 10, 10), uint16] */;
  %276 = cast(%275, dtype="uint64") /* ty=Tensor[(12, 10, 10), uint64] */;
  %277 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(12, 10, 10), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %278 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 10, 10), uint16] */, dtype="uint64") /* ty=Tensor[(12, 10, 10), uint64] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %280 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 10, 10), uint16] */, dtype="float32") /* ty=Tensor[(12, 10, 10), float32] */;
  %281 = sinh(%280) /* ty=Tensor[(12, 10, 10), float32] */;
  %282 = cast(%281, dtype="float32") /* ty=Tensor[(12, 10, 10), float32] */;
  %283 = minimum(%278, %279) /* ty=Tensor[(12, 10, 10), uint64] */;
  %284 = acosh(%282) /* ty=Tensor[(12, 10, 10), float32] */;
  (%283, %284)
}

def @func_2235() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  %285 = @func_567() /* ty=(Tensor[(12, 4, 8), float32],) */;
  %286 = %285.0;
  %287 = @func_2014() /* ty=Tensor[(12, 4, 8), float64] */;
  (%286, %287)
}

def @func_8376() -> (Tensor[(12, 9, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), int8], bool, Tensor[(5, 2), bool]) {
  %288 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 9, 8), float32] */, dtype="float32") /* ty=Tensor[(12, 9, 8), float32] */;
  %289 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %290 = cast(meta[relay.Constant][18] /* ty=Tensor[(5, 2), bool] */, dtype="bool") /* ty=Tensor[(5, 2), bool] */;
  %291 = reshape(%289, newshape=[]) /* ty=bool */;
  %292 = reshape(%290, newshape=[1, 10, 1]) /* ty=Tensor[(1, 10, 1), bool] */;
  %293 = @func_3252(%291, %292) /* ty=(Tensor[(12, 4, 8), int8], Tensor[(12, 4, 8), float32], Tensor[(?, 10, ?), float64]) */;
  %294 = erf(%288) /* ty=Tensor[(12, 9, 8), float32] */;
  %295 = @func_2478() /* ty=Tensor[(12, 4, 8), float64] */;
  %296 = @func_6385() /* ty=Tensor[(12, 4, 8), float64] */;
  %297 = %293.0;
  (%294, %295, %296, %297, True /* ty=bool */, meta[relay.Constant][18] /* ty=Tensor[(5, 2), bool] */)
}

def @func_5708() -> (Tensor[(12, 4, 8), float32], Tensor[(4, 14, 4), float64], Tensor[(224), float64]) {
  %298 = @func_4742() /* ty=(Tensor[(12, 4, 8), float32],) */;
  %299 = cast(meta[relay.Constant][19] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
  %300 = reshape(%299, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), float64] */;
  %301 = %298.0;
  %302 = @func_3178(%300) /* ty=Tensor[(4, 14, 4), float64] */;
  (%301, %302, meta[relay.Constant][19] /* ty=Tensor[(224), float64] */)
}

def @func_3252(%var_3193: bool, %var_3194: Tensor[(1, 10, 1), bool]) -> (Tensor[(12, 4, 8), int8], Tensor[(12, 4, 8), float32], Tensor[(?, 10, ?), float64]) {
  %303 = @func_1603() /* ty=(Tensor[(3, 9, 2), int64], Tensor[(12, 4, 8), int8], Tensor[(384), bool]) */;
  %304 = @func_591() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %305 = cast(%var_3193, dtype="bool") /* ty=bool */;
  %306 = cast(%var_3194, dtype="bool") /* ty=Tensor[(1, 10, 1), bool] */;
  %307 = logical_and(%305, %306) /* ty=Tensor[(1, 10, 1), bool] */;
  %308 = cast(%307, dtype="float64") /* ty=Tensor[(1, 10, 1), float64] */;
  %309 = cos(%308) /* ty=Tensor[(1, 10, 1), float64] */;
  %310 = cast(%var_3193, dtype="bool") /* ty=bool */;
  %311 = cast(%307, dtype="bool") /* ty=Tensor[(1, 10, 1), bool] */;
  %312 = not_equal(%310, %311) /* ty=Tensor[(1, 10, 1), bool] */;
  %313 = cast(%312, dtype="uint32") /* ty=Tensor[(1, 10, 1), uint32] */;
  %314 = shape_of(%309, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%309, dtype="uint32") /* ty=Tensor[(1, 10, 1), uint32] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %317 = add(%315, %316) /* ty=Tensor[(?, 10, ?), uint32] */;
  %318 = cast(%312, dtype="float64") /* ty=Tensor[(1, 10, 1), float64] */;
  %319 = shape_of(%317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%317, dtype="float64") /* ty=Tensor[(?, 10, ?), float64] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %322 = %303.1;
  %323 = %304.1;
  %324 = divide(%320, %321) /* ty=Tensor[(?, 10, ?), float64] */;
  (%322, %323, %324)
}

def @func_3376() -> (Tensor[(12, 4, 8), float32], Tensor[(15, 13, 9), int64], Tensor[(1755), int64], Tensor[(12, 4, 3), bool]) {
  %325 = cast(meta[relay.Constant][20] /* ty=Tensor[(1755), int64] */, dtype="int64") /* ty=Tensor[(1755), int64] */;
  %326 = reshape(%325, newshape=[15, 13, 9]) /* ty=Tensor[(15, 13, 9), int64] */;
  %327 = @func_1894() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 3), bool], Tensor[(144), uint16]) */;
  %328 = %327.1;
  %329 = cast(%328, dtype="float64") /* ty=Tensor[(12, 4, 3), float64] */;
  %330 = sin(%329) /* ty=Tensor[(12, 4, 3), float64] */;
  %331 = cast(%328, dtype="bool") /* ty=Tensor[(12, 4, 3), bool] */;
  %332 = shape_of(%330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(%330, dtype="bool") /* ty=Tensor[(12, 4, 3), bool] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %335 = @func_3123() /* ty=Tensor[(12, 4, 8), float32] */;
  %336 = @func_1289(%326) /* ty=Tensor[(15, 13, 9), int64] */;
  %337 = logical_and(%333, %334) /* ty=Tensor[(12, 4, 3), bool] */;
  (%335, %336, meta[relay.Constant][20] /* ty=Tensor[(1755), int64] */, %337)
}

def @func_6856() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32]) {
  %338 = @func_827() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %339 = %338.1;
  %340 = @func_471() /* ty=Tensor[(12, 4, 8), float32] */;
  (%339, %340)
}

def @func_4948() -> (Tensor[(12, 4, 8), float64],) {
  %341 = @func_1823() /* ty=Tensor[(12, 4, 8), float64] */;
  (%341,)
}

def @func_2764(%var_2740: Tensor[(78), float64]) -> (Tensor[(12, 4, 8), float64], Tensor[(78), float64], Tensor[(12, 4, 8), float64], Tensor[(?, 468), bool]) {
  %342 = cast(%var_2740, dtype="float64") /* ty=Tensor[(78), float64] */;
  %343 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 468), float64] */, dtype="float64") /* ty=Tensor[(1, 468), float64] */;
  %344 = reshape(%342, newshape=[13, 1, 6]) /* ty=Tensor[(13, 1, 6), float64] */;
  %345 = reshape(%343, newshape=[13, 6, 6]) /* ty=Tensor[(13, 6, 6), float64] */;
  %346 = @func_1144(%344, %345) /* ty=(Tensor[(13, 6, 6), uint32], Tensor[(13, 1, 6), float64]) */;
  %347 = %346.0;
  %348 = cast(%347, dtype="int64") /* ty=Tensor[(13, 6, 6), int64] */;
  %349 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(1, 468), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %350 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 468), float64] */, dtype="int64") /* ty=Tensor[(1, 468), int64] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %352 = right_shift(%350, %351) /* ty=Tensor[(?, 468), int64] */;
  %353 = cast(%347, dtype="bool") /* ty=Tensor[(13, 6, 6), bool] */;
  %354 = shape_of(%352, dtype="int32") /* ty=Tensor[(2), int32] */;
  %355 = cast(%352, dtype="bool") /* ty=Tensor[(?, 468), bool] */;
  %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %357 = @func_2306() /* ty=Tensor[(12, 4, 8), float64] */;
  %358 = @func_1126() /* ty=Tensor[(12, 4, 8), float64] */;
  %359 = logical_or(%355, %356) /* ty=Tensor[(?, 468), bool] */;
  (%357, %var_2740, %358, %359)
}

def @func_8188() -> (Tensor[(12, 4, 8), float64], Tensor[(3, 8, 3), bool], Tensor[(12, 10, 10), float32], Tensor[(12, 4, 8), float32]) {
  %360 = @func_5562() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */;
  %361 = @func_7263() /* ty=(Tensor[(3, 8, 3), bool], Tensor[(12, 4, 8), float32]) */;
  %362 = @func_4835() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), uint8], Tensor[(12, 10, 10), float32], Tensor[(384), bool], Tensor[(12, 4, 8), bool], Tensor[(12, 10, 10), float32]) */;
  %363 = @func_3376() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(15, 13, 9), int64], Tensor[(1755), int64], Tensor[(12, 4, 3), bool]) */;
  %364 = %360.1;
  %365 = %361.0;
  %366 = %362.2;
  %367 = %363.0;
  (%364, %365, %366, %367)
}

def @func_7747() -> (Tensor[(12, 4, 8), float64],) {
  %368 = @func_6243() /* ty=Tensor[(12, 4, 8), float64] */;
  (%368,)
}

def @func_7405() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) {
  %369 = @func_374() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */;
  %370 = @func_1823() /* ty=Tensor[(12, 4, 8), float64] */;
  %371 = %369.0;
  (%370, %371)
}

def @func_6385() -> Tensor[(12, 4, 8), float64] {
  %372 = @func_5291() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %372.3
}

def @func_10809() -> (Tensor[(384), bool],) {
  %373 = @func_4354() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(384), bool], Tensor[(12, 4, 8), float64]) */;
  %374 = %373.1;
  (%374,)
}

def @func_1894() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 3), bool], Tensor[(144), uint16]) {
  %375 = @func_591() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %376 = cast(meta[relay.Constant][22] /* ty=Tensor[(144), uint16] */, dtype="uint16") /* ty=Tensor[(144), uint16] */;
  %377 = cast(meta[relay.Constant][22] /* ty=Tensor[(144), uint16] */, dtype="uint16") /* ty=Tensor[(144), uint16] */;
  %378 = reshape(%376, newshape=[12, 4, 3]) /* ty=Tensor[(12, 4, 3), uint16] */;
  %379 = reshape(%377, newshape=[12, 4, 3]) /* ty=Tensor[(12, 4, 3), uint16] */;
  %380 = @func_714(%378, %379) /* ty=(Tensor[(12, 4, 3), bool], Tensor[(12, 4, 3), int64], Tensor[(12, 4, 3), float64]) */;
  %381 = %375.1;
  %382 = %380.0;
  (%381, %382, meta[relay.Constant][22] /* ty=Tensor[(144), uint16] */)
}

def @func_5479() -> Tensor[(12, 4, 8), float32] {
  %383 = @func_4317() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %383.0
}

def @func_471() -> Tensor[(12, 4, 8), float32] {
  %384 = @func_311() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %384.1
}

def @func_1823() -> Tensor[(12, 4, 8), float64] {
  %385 = @func_616() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %385.0
}

def @func_10917() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  %386 = @func_9547() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %387 = @func_5899() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %388 = %386.0;
  %389 = %387.0;
  (%388, %389)
}

def @func_5675() -> Tensor[(12, 4, 8), float64] {
  @func_1126() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_7905() -> (Tensor[(12, 4, 8), int8], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) {
  %390 = @func_1603() /* ty=(Tensor[(3, 9, 2), int64], Tensor[(12, 4, 8), int8], Tensor[(384), bool]) */;
  %391 = @func_3615() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %392 = @func_6856() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32]) */;
  %393 = %390.1;
  %394 = @func_3535() /* ty=Tensor[(12, 4, 8), float64] */;
  %395 = %391.0;
  %396 = @func_344() /* ty=Tensor[(12, 4, 8), float64] */;
  %397 = %392.0;
  (%393, %394, %395, %396, %397)
}

def @main(%var_10922: Tensor[(5, 16, 13), float32]) -> Tensor[(5, 16, 13), float32] {
  %398 = cast(%var_10922, dtype="float32") /* ty=Tensor[(5, 16, 13), float32] */;
  cos(%398) /* ty=Tensor[(5, 16, 13), float32] */
}

def @func_8559() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) {
  %399 = @func_591() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %400 = @func_3954() /* ty=Tensor[(12, 4, 8), float64] */;
  %401 = @func_5675() /* ty=Tensor[(12, 4, 8), float64] */;
  %402 = %399.0;
  (%400, %401, %402)
}

def @func_8925() -> Tensor[(12, 4, 8), float64] {
  @func_3954() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_6592() -> Tensor[(12, 4, 8), float32] {
  %403 = @func_4835() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), uint8], Tensor[(12, 10, 10), float32], Tensor[(384), bool], Tensor[(12, 4, 8), bool], Tensor[(12, 10, 10), float32]) */;
  %403.0
}

def @func_3915() -> (Tensor[(384), float64],) {
  %404 = @func_2558() /* ty=Tensor[(384), bool] */;
  %405 = cast(meta[relay.Constant][23] /* ty=Tensor[(384), bool] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %406 = shape_of(%404, dtype="int32") /* ty=Tensor[(1), int32] */;
  %407 = cast(%404, dtype="float64") /* ty=Tensor[(384), float64] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?), float64] */;
  %409 = floor_mod(%407, %408) /* ty=Tensor[(384), float64] */;
  (%409,)
}

def @func_8587(%var_8581: Tensor[(4, 14, 4), float64]) -> (Tensor[(4, 14, 4), uint64], Tensor[(4, 14, 4), bool]) {
  %410 = @func_5708() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(4, 14, 4), float64], Tensor[(224), float64]) */;
  %411 = %410.1;
  %412 = cast(meta[relay.Constant][24] /* ty=Tensor[(4, 14, 4), float64] */, dtype="uint64") /* ty=Tensor[(4, 14, 4), uint64] */;
  %413 = shape_of(%411, dtype="int32") /* ty=Tensor[(3), int32] */;
  %414 = cast(%411, dtype="uint64") /* ty=Tensor[(4, 14, 4), uint64] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %416 = cast(%var_8581, dtype="bool") /* ty=Tensor[(4, 14, 4), bool] */;
  %417 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(4, 14, 4), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(meta[relay.Constant][24] /* ty=Tensor[(4, 14, 4), float64] */, dtype="bool") /* ty=Tensor[(4, 14, 4), bool] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %420 = right_shift(%414, %415) /* ty=Tensor[(4, 14, 4), uint64] */;
  %421 = less(%418, %419) /* ty=Tensor[(4, 14, 4), bool] */;
  (%420, %421)
}

def @func_5130() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  %422 = @func_3863() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %423 = @func_4742() /* ty=(Tensor[(12, 4, 8), float32],) */;
  %424 = @func_2235() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %425 = @func_2832() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %426 = @func_3863() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %427 = @func_3786() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %428 = %422.0;
  %429 = %423.0;
  %430 = %424.1;
  %431 = @func_4322() /* ty=Tensor[(12, 4, 8), float64] */;
  %432 = %425.0;
  %433 = %426.0;
  %434 = %427.0;
  (%428, %429, %430, %431, %432, %433, %434)
}

def @func_5291() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  %435 = @func_2428() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %436 = @func_4948() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %437 = @func_1087() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %438 = %435.1;
  %439 = %436.0;
  %440 = %437.0;
  %441 = @func_1126() /* ty=Tensor[(12, 4, 8), float64] */;
  (%438, %439, %440, %441)
}

def @func_3188() -> Tensor[(12, 4, 8), float64] {
  %442 = @func_1087() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %442.1
}

def @func_7263() -> (Tensor[(3, 8, 3), bool], Tensor[(12, 4, 8), float32]) {
  %443 = @func_5529() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(3, 8, 3), bool], Tensor[(1, 72), float32]) */;
  %444 = @func_4528() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %445 = %443.1;
  %446 = %444.3;
  (%445, %446)
}

def @func_7759() -> Tensor[(12, 4, 8), float32] {
  %447 = @func_6309() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(384), float64]) */;
  %447.0
}

def @func_10779() -> (Tensor[(384), float32], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) {
  %448 = @func_7731() /* ty=Tensor[(384), bool] */;
  %449 = cast(%448, dtype="float32") /* ty=Tensor[(384), float32] */;
  %450 = @func_2832() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %451 = log(%449) /* ty=Tensor[(384), float32] */;
  %452 = @func_471() /* ty=Tensor[(12, 4, 8), float32] */;
  %453 = @func_10473() /* ty=Tensor[(12, 4, 8), float64] */;
  %454 = %450.0;
  (%451, %452, %453, %454)
}

def @func_4317() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  %455 = @func_1729() /* ty=(Tensor[(12, 4, 8), float32],) */;
  %456 = @func_420() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %457 = %455.0;
  %458 = %456.0;
  (%457, %458)
}

def @func_5529() -> (Tensor[(12, 4, 8), float64], Tensor[(3, 8, 3), bool], Tensor[(1, 72), float32]) {
  %459 = @func_4528() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %460 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 72), float32] */, dtype="float32") /* ty=Tensor[(1, 72), float32] */;
  %461 = reshape(%460, newshape=[3, 8, 3]) /* ty=Tensor[(3, 8, 3), float32] */;
  %462 = @func_2617(%461) /* ty=(Tensor[(3, 8, 3), bool], Tensor[(12, 4, 8), float64]) */;
  %463 = %459.1;
  %464 = %462.0;
  (%463, %464, meta[relay.Constant][25] /* ty=Tensor[(1, 72), float32] */)
}

def @func_3178(%var_3169: Tensor[(4, 14, 4), float64]) -> Tensor[(4, 14, 4), float64] {
  %465 = cast(%var_3169, dtype="float64") /* ty=Tensor[(4, 14, 4), float64] */;
  acos(%465) /* ty=Tensor[(4, 14, 4), float64] */
}

def @func_5562() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) {
  %466 = @func_4622() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %467 = %466.1;
  %468 = @func_4322() /* ty=Tensor[(12, 4, 8), float64] */;
  (%467, %468)
}

def @func_6377() -> (Tensor[(384), float64],) {
  %469 = @func_6309() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(384), float64]) */;
  %470 = %469.1;
  (%470,)
}

def @func_9699(%var_9624: Tensor[(12, 10, 10), uint64], %var_9655: Tensor[(98), float64], %var_9680: Tensor[(3, 8, 3), bool]) -> (Tensor[(12, 10, 10), float32], Tensor[(12, 10, 10), float32], Tensor[(3, 8, 3), bool], Tensor[(7, 2, 7), float32], Tensor[(3, 8, 3), uint32], Tensor[(3, 8, 3), float64], Tensor[(12, 4, 8), bool]) {
  %471 = @func_3074() /* ty=(Tensor[(12, 10, 10), uint64],) */;
  %472 = %471.0;
  %473 = cast(%var_9624, dtype="float32") /* ty=Tensor[(12, 10, 10), float32] */;
  %474 = shape_of(%472, dtype="int32") /* ty=Tensor[(3), int32] */;
  %475 = cast(%472, dtype="float32") /* ty=Tensor[(12, 10, 10), float32] */;
  %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %477 = cast(%472, dtype="float32") /* ty=Tensor[(12, 10, 10), float32] */;
  %478 = shape_of(%var_9624, dtype="int32") /* ty=Tensor[(3), int32] */;
  %479 = cast(%var_9624, dtype="float32") /* ty=Tensor[(12, 10, 10), float32] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %481 = @func_9578() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(3, 8, 3), bool]) */;
  %482 = cast(%var_9655, dtype="float64") /* ty=Tensor[(98), float64] */;
  %483 = reshape(%482, newshape=[7, 2, 7]) /* ty=Tensor[(7, 2, 7), float64] */;
  %484 = @func_4847(%483) /* ty=(Tensor[(7, 2, 7), float64],) */;
  %485 = %484.0;
  %486 = cast(%var_9655, dtype="float32") /* ty=Tensor[(98), float32] */;
  %487 = shape_of(%485, dtype="int32") /* ty=Tensor[(3), int32] */;
  %488 = cast(%485, dtype="float32") /* ty=Tensor[(7, 2, 7), float32] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %490 = @func_8188() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(3, 8, 3), bool], Tensor[(12, 10, 10), float32], Tensor[(12, 4, 8), float32]) */;
  %491 = %490.1;
  %492 = cast(%var_9680, dtype="uint32") /* ty=Tensor[(3, 8, 3), uint32] */;
  %493 = shape_of(%491, dtype="int32") /* ty=Tensor[(3), int32] */;
  %494 = cast(%491, dtype="uint32") /* ty=Tensor[(3, 8, 3), uint32] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %496 = cast(%var_9680, dtype="float64") /* ty=Tensor[(3, 8, 3), float64] */;
  %497 = @func_4041() /* ty=(Tensor[(12, 4, 8), bool],) */;
  %498 = power(%475, %476) /* ty=Tensor[(12, 10, 10), float32] */;
  %499 = floor_divide(%479, %480) /* ty=Tensor[(12, 10, 10), float32] */;
  %500 = %481.1;
  %501 = mod(%488, %489) /* ty=Tensor[(7, 2, 7), float32] */;
  %502 = bitwise_xor(%494, %495) /* ty=Tensor[(3, 8, 3), uint32] */;
  %503 = asin(%496) /* ty=Tensor[(3, 8, 3), float64] */;
  %504 = %497.0;
  (%498, %499, %500, %501, %502, %503, %504)
}

def @func_2832() -> (Tensor[(12, 4, 8), float64],) {
  %505 = @func_2680() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %506 = %505.0;
  (%506,)
}

def @func_5009() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), int8]) {
  %507 = @func_2235() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %508 = %507.1;
  %509 = cast(%508, dtype="bool") /* ty=Tensor[(12, 4, 8), bool] */;
  %510 = reshape(%509, newshape=[12, 4, 8]) /* ty=Tensor[(12, 4, 8), bool] */;
  %511 = @func_1199(%510) /* ty=(Tensor[(12, 4, 8), int8],) */;
  %512 = %511.0;
  (%508, %512)
}

def @func_10397(%var_10374: Tensor[(2, 10, 3), bool]) -> Tensor[(2, 10, 3), bool] {
  %513 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 10, 3), bool] */, dtype="bool") /* ty=Tensor[(2, 10, 3), bool] */;
  %514 = shape_of(%var_10374, dtype="int32") /* ty=Tensor[(3), int32] */;
  %515 = cast(%var_10374, dtype="bool") /* ty=Tensor[(2, 10, 3), bool] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%515, %516) /* ty=Tensor[(2, 10, 3), bool] */
}

def @func_4835() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), uint8], Tensor[(12, 10, 10), float32], Tensor[(384), bool], Tensor[(12, 4, 8), bool], Tensor[(12, 10, 10), float32]) {
  %517 = @func_567() /* ty=(Tensor[(12, 4, 8), float32],) */;
  %518 = @func_3305() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), uint8], Tensor[(12, 4, 8), float64]) */;
  %519 = @func_3074() /* ty=(Tensor[(12, 10, 10), uint64],) */;
  %520 = %519.0;
  %521 = cast(%520, dtype="float32") /* ty=Tensor[(12, 10, 10), float32] */;
  %522 = @func_4041() /* ty=(Tensor[(12, 4, 8), bool],) */;
  %523 = @func_1761() /* ty=(Tensor[(12, 10, 10), uint64], Tensor[(12, 10, 10), float32]) */;
  %524 = %517.0;
  %525 = %518.1;
  %526 = erf(%521) /* ty=Tensor[(12, 10, 10), float32] */;
  %527 = @func_3980() /* ty=Tensor[(384), bool] */;
  %528 = %522.0;
  %529 = %523.1;
  (%524, %525, %526, %527, %528, %529)
}

def @func_3675(%var_3660: Tensor[(78), float64]) -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(?, 468), bool], Tensor[(78), float64], Tensor[(12, 4, 8), float64], Tensor[(36, 2), float32], Tensor[(12, 4, 8), float32]) {
  %530 = @func_374() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */;
  %531 = @func_311() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %532 = cast(%var_3660, dtype="float64") /* ty=Tensor[(78), float64] */;
  %533 = reshape(%532, newshape=[78]) /* ty=Tensor[(78), float64] */;
  %534 = @func_2764(%533) /* ty=(Tensor[(12, 4, 8), float64], Tensor[(78), float64], Tensor[(12, 4, 8), float64], Tensor[(?, 468), bool]) */;
  %535 = cast(meta[relay.Constant][27] /* ty=Tensor[(36, 2), float32] */, dtype="float32") /* ty=Tensor[(36, 2), float32] */;
  %536 = reshape(%535, newshape=[3, 8, 3]) /* ty=Tensor[(3, 8, 3), float32] */;
  %537 = @func_2617(%536) /* ty=(Tensor[(3, 8, 3), bool], Tensor[(12, 4, 8), float64]) */;
  %538 = @func_311() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %539 = @func_1126() /* ty=Tensor[(12, 4, 8), float64] */;
  %540 = %530.0;
  %541 = %531.0;
  %542 = %534.3;
  %543 = %537.1;
  %544 = %538.1;
  (%539, %540, %541, %542, %var_3660, %543, meta[relay.Constant][27] /* ty=Tensor[(36, 2), float32] */, %544)
}

def @func_10516() -> Tensor[(12, 4, 8), float32] {
  @func_6592() /* ty=Tensor[(12, 4, 8), float32] */
}

def @func_6787() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  %545 = @func_1087() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %546 = @func_3188() /* ty=Tensor[(12, 4, 8), float64] */;
  %547 = cast(%546, dtype="float32") /* ty=Tensor[(12, 4, 8), float32] */;
  %548 = %545.1;
  %549 = sinh(%547) /* ty=Tensor[(12, 4, 8), float32] */;
  %550 = @func_4322() /* ty=Tensor[(12, 4, 8), float64] */;
  (%548, %549, %550)
}

def @func_7487(%var_7475: Tensor[(18, 4), float32]) -> (Tensor[(384), bool], Tensor[(12, 4, 8), float32], Tensor[(18, 4), float32], Tensor[(12, 4, 8), float64]) {
  %551 = @func_5937() /* ty=(Tensor[(384), bool],) */;
  %552 = cast(%var_7475, dtype="float32") /* ty=Tensor[(18, 4), float32] */;
  %553 = reshape(%552, newshape=[72, 1]) /* ty=Tensor[(72, 1), float32] */;
  %554 = @func_4220(%553) /* ty=(Tensor[(12, 4, 8), float32], Tensor[(5, 351), int64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(72, 1), float32]) */;
  %555 = %551.0;
  %556 = %554.0;
  %557 = @func_2306() /* ty=Tensor[(12, 4, 8), float64] */;
  (%555, %556, %var_7475, %557)
}

def @func_4322() -> Tensor[(12, 4, 8), float64] {
  %558 = @func_3786() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %558.0
}

def @func_4694() -> Tensor[(12, 4, 8), float64] {
  %559 = @func_374() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */;
  %559.0
}

def @func_4528() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) {
  %560 = @func_1663() /* ty=(Tensor[(12, 4, 8), float32],) */;
  %561 = @func_927() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %562 = @func_1663() /* ty=(Tensor[(12, 4, 8), float32],) */;
  %563 = %560.0;
  %564 = @func_3188() /* ty=Tensor[(12, 4, 8), float64] */;
  %565 = %561.0;
  %566 = %562.0;
  (%563, %564, %565, %566)
}

def @func_2680() -> (Tensor[(12, 4, 8), float64],) {
  %567 = @func_927() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %568 = %567.0;
  (%568,)
}

def @func_4883() -> Tensor[(12, 4, 8), float64] {
  @func_344() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_4995() -> Tensor[(384), float64] {
  %569 = @func_3915() /* ty=(Tensor[(384), float64],) */;
  %569.0
}

def @func_7847() -> (Tensor[(12, 4, 8), float64],) {
  %570 = @func_2478() /* ty=Tensor[(12, 4, 8), float64] */;
  (%570,)
}

def @func_7827() -> Tensor[(14, 8, 9), float64] {
  %571 = @func_7798() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(13, 6), float64], Tensor[(14, 8, 9), float32], Tensor[(12, 4, 8), float64]) */;
  %572 = %571.3;
  %573 = cast(%572, dtype="float64") /* ty=Tensor[(14, 8, 9), float64] */;
  cos(%573) /* ty=Tensor[(14, 8, 9), float64] */
}

def @func_6435() -> (Tensor[(384), bool], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) {
  %574 = @func_567() /* ty=(Tensor[(12, 4, 8), float32],) */;
  %575 = @func_3980() /* ty=Tensor[(384), bool] */;
  %576 = @func_2478() /* ty=Tensor[(12, 4, 8), float64] */;
  %577 = %574.0;
  (%575, %576, %577)
}

def @func_4936(%var_4906: Tensor[(14, 12, 7), bool], %var_4912: Tensor[(14, 12, 7), bool], %var_4923: Tensor[(105), float32]) -> (Tensor[(14, 12, 7), int64], Tensor[(12, 4, 8), float32], Tensor[(105), float32], Tensor[(12, 10, 10), uint64], Tensor[(14, 12, 7), int16]) {
  %578 = cast(meta[relay.Constant][28] /* ty=Tensor[(14, 12, 7), bool] */, dtype="bool") /* ty=Tensor[(14, 12, 7), bool] */;
  %579 = shape_of(%var_4906, dtype="int32") /* ty=Tensor[(3), int32] */;
  %580 = cast(%var_4906, dtype="bool") /* ty=Tensor[(14, 12, 7), bool] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %582 = logical_and(%580, %581) /* ty=Tensor[(14, 12, 7), bool] */;
  %583 = cast(%var_4912, dtype="int64") /* ty=Tensor[(14, 12, 7), int64] */;
  %584 = shape_of(%582, dtype="int32") /* ty=Tensor[(3), int32] */;
  %585 = cast(%582, dtype="int64") /* ty=Tensor[(14, 12, 7), int64] */;
  %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %587 = cast(%var_4923, dtype="float32") /* ty=Tensor[(105), float32] */;
  %588 = reshape(%587, newshape=[7, 15]) /* ty=Tensor[(7, 15), float32] */;
  %589 = @func_759(%588) /* ty=(Tensor[(7, 15), float32], Tensor[(12, 4, 8), float32]) */;
  %590 = @func_3074() /* ty=(Tensor[(12, 10, 10), uint64],) */;
  %591 = cast(%582, dtype="int16") /* ty=Tensor[(14, 12, 7), int16] */;
  %592 = shape_of(%var_4912, dtype="int32") /* ty=Tensor[(3), int32] */;
  %593 = cast(%var_4912, dtype="int16") /* ty=Tensor[(14, 12, 7), int16] */;
  %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %595 = bitwise_xor(%585, %586) /* ty=Tensor[(14, 12, 7), int64] */;
  %596 = %589.1;
  %597 = %590.0;
  %598 = add(%593, %594) /* ty=Tensor[(14, 12, 7), int16] */;
  (%595, %596, %var_4923, %597, %598)
}

def @func_567() -> (Tensor[(12, 4, 8), float32],) {
  %599 = @func_471() /* ty=Tensor[(12, 4, 8), float32] */;
  (%599,)
}

def @func_5997(%var_5989: Tensor[(105, 1), float32]) -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(105, 1), float64]) {
  %600 = @func_4869() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %601 = cast(%var_5989, dtype="float32") /* ty=Tensor[(105, 1), float32] */;
  %602 = reshape(%601, newshape=[7, 15]) /* ty=Tensor[(7, 15), float32] */;
  %603 = @func_759(%602) /* ty=(Tensor[(7, 15), float32], Tensor[(12, 4, 8), float32]) */;
  %604 = cast(%var_5989, dtype="float64") /* ty=Tensor[(105, 1), float64] */;
  %605 = %600.0;
  %606 = %603.1;
  %607 = @func_344() /* ty=Tensor[(12, 4, 8), float64] */;
  %608 = tan(%604) /* ty=Tensor[(105, 1), float64] */;
  (%605, %606, %607, %608)
}

def @func_7642() -> (Tensor[(12, 10, 10), uint16], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), int8], Tensor[(12, 4, 8), float64]) {
  %609 = @func_3074() /* ty=(Tensor[(12, 10, 10), uint64],) */;
  %610 = %609.0;
  %611 = cast(meta[relay.Constant][29] /* ty=Tensor[(12, 10, 10), uint64] */, dtype="uint16") /* ty=Tensor[(12, 10, 10), uint16] */;
  %612 = shape_of(%610, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(%610, dtype="uint16") /* ty=Tensor[(12, 10, 10), uint16] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %615 = @func_7065() /* ty=(Tensor[(12, 4, 8), float32],) */;
  %616 = @func_5009() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), int8]) */;
  %617 = subtract(%613, %614) /* ty=Tensor[(12, 10, 10), uint16] */;
  %618 = %615.0;
  %619 = %616.1;
  %620 = @func_5675() /* ty=Tensor[(12, 4, 8), float64] */;
  (%617, %618, %619, %620)
}

def @func_5849(%var_5817: Tensor[(15, 3, 13), int32], %var_5818: Tensor[(15, 3, 13), int32]) -> (Tensor[(15, 3, 13), bool], Tensor[(15, 3, 13), bool], Tensor[(15, 3, 13), float64]) {
  %621 = cast(%var_5818, dtype="int32") /* ty=Tensor[(15, 3, 13), int32] */;
  %622 = shape_of(%var_5817, dtype="int32") /* ty=Tensor[(3), int32] */;
  %623 = cast(%var_5817, dtype="int32") /* ty=Tensor[(15, 3, 13), int32] */;
  %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %625 = logical_xor(%623, %624) /* ty=Tensor[(15, 3, 13), int32] */;
  %626 = cast(%var_5817, dtype="bool") /* ty=Tensor[(15, 3, 13), bool] */;
  %627 = shape_of(%625, dtype="int32") /* ty=Tensor[(3), int32] */;
  %628 = cast(%625, dtype="bool") /* ty=Tensor[(15, 3, 13), bool] */;
  %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %630 = cast(meta[relay.Constant][30] /* ty=Tensor[(15, 3, 13), int32] */, dtype="bool") /* ty=Tensor[(15, 3, 13), bool] */;
  %631 = shape_of(%var_5818, dtype="int32") /* ty=Tensor[(3), int32] */;
  %632 = cast(%var_5818, dtype="bool") /* ty=Tensor[(15, 3, 13), bool] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %634 = cast(%625, dtype="float64") /* ty=Tensor[(15, 3, 13), float64] */;
  %635 = greater_equal(%628, %629) /* ty=Tensor[(15, 3, 13), bool] */;
  %636 = logical_or(%632, %633) /* ty=Tensor[(15, 3, 13), bool] */;
  %637 = atanh(%634) /* ty=Tensor[(15, 3, 13), float64] */;
  (%635, %636, %637)
}

def @func_2558() -> Tensor[(384), bool] {
  %638 = @func_1603() /* ty=(Tensor[(3, 9, 2), int64], Tensor[(12, 4, 8), int8], Tensor[(384), bool]) */;
  %638.2
}

def @func_4847(%var_4844: Tensor[(7, 2, 7), float64]) -> (Tensor[(7, 2, 7), float64],) {
  %639 = cast(%var_4844, dtype="float64") /* ty=Tensor[(7, 2, 7), float64] */;
  %640 = asinh(%639) /* ty=Tensor[(7, 2, 7), float64] */;
  (%640,)
}

def @func_1105() -> Tensor[(12, 4, 8), float64] {
  %641 = @func_616() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %642 = %641.0;
  %643 = cast(%642, dtype="float64") /* ty=Tensor[(12, 4, 8), float64] */;
  atanh(%643) /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_9605() -> (Tensor[(12, 4, 8), float64],) {
  %644 = @func_5364() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */;
  %645 = %644.1;
  (%645,)
}

def @func_3123() -> Tensor[(12, 4, 8), float32] {
  %646 = @func_2235() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %646.0
}

def @func_10009() -> (Tensor[(12, 4, 8), float64],) {
  %647 = @func_5675() /* ty=Tensor[(12, 4, 8), float64] */;
  (%647,)
}

def @func_10071() -> Tensor[(12, 4, 8), float64] {
  %648 = @func_4317() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %648.1
}

def @func_5318(%var_5306: Tensor[(224), float64]) -> (Tensor[(15, 6, 16), float64], Tensor[(3, 9, 2), int64], Tensor[(4, 14, 4), float64], Tensor[(224), float64]) {
  %649 = cast(meta[relay.Constant][31] /* ty=Tensor[(15, 6, 16), float64] */, dtype="float64") /* ty=Tensor[(15, 6, 16), float64] */;
  %650 = @func_1603() /* ty=(Tensor[(3, 9, 2), int64], Tensor[(12, 4, 8), int8], Tensor[(384), bool]) */;
  %651 = cast(%var_5306, dtype="float64") /* ty=Tensor[(224), float64] */;
  %652 = reshape(%651, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), float64] */;
  %653 = log2(%649) /* ty=Tensor[(15, 6, 16), float64] */;
  %654 = %650.0;
  %655 = @func_3178(%652) /* ty=Tensor[(4, 14, 4), float64] */;
  (%653, %654, %655, %var_5306)
}

def @func_420() -> (Tensor[(12, 4, 8), float64],) {
  %656 = @func_344() /* ty=Tensor[(12, 4, 8), float64] */;
  (%656,)
}

def @func_3305() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), uint8], Tensor[(12, 4, 8), float64]) {
  %657 = @func_311() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %658 = @func_1126() /* ty=Tensor[(12, 4, 8), float64] */;
  %659 = @func_344() /* ty=Tensor[(12, 4, 8), float64] */;
  %660 = cast(%659, dtype="uint8") /* ty=Tensor[(12, 4, 8), uint8] */;
  %661 = shape_of(%658, dtype="int32") /* ty=Tensor[(3), int32] */;
  %662 = cast(%658, dtype="uint8") /* ty=Tensor[(12, 4, 8), uint8] */;
  %663 = dyn.reshape(%660, %661, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %664 = @func_420() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %665 = %657.0;
  %666 = add(%662, %663) /* ty=Tensor[(12, 4, 8), uint8] */;
  %667 = %664.0;
  (%665, %666, %667)
}

def @func_4470(%var_4401: Tensor[(8, 2, 13), int8], %var_4415: Tensor[(8, 2, 13), int8], %var_4434: Tensor[(10), bool]) -> (Tensor[(8, 2, 13), int8], Tensor[(8, 2, 13), int32], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32], bool, Tensor[(10), bool], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  %668 = cast(meta[relay.Constant][32] /* ty=Tensor[(8, 2, 13), int8] */, dtype="int8") /* ty=Tensor[(8, 2, 13), int8] */;
  %669 = shape_of(%var_4401, dtype="int32") /* ty=Tensor[(3), int32] */;
  %670 = cast(%var_4401, dtype="int8") /* ty=Tensor[(8, 2, 13), int8] */;
  %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %672 = cast(%var_4415, dtype="int32") /* ty=Tensor[(8, 2, 13), int32] */;
  %673 = shape_of(%var_4401, dtype="int32") /* ty=Tensor[(3), int32] */;
  %674 = cast(%var_4401, dtype="int32") /* ty=Tensor[(8, 2, 13), int32] */;
  %675 = dyn.reshape(%672, %673, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %676 = @func_567() /* ty=(Tensor[(12, 4, 8), float32],) */;
  %677 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %678 = cast(%var_4434, dtype="bool") /* ty=Tensor[(10), bool] */;
  %679 = reshape(%677, newshape=[]) /* ty=bool */;
  %680 = reshape(%678, newshape=[1, 10, 1]) /* ty=Tensor[(1, 10, 1), bool] */;
  %681 = @func_3252(%679, %680) /* ty=(Tensor[(12, 4, 8), int8], Tensor[(12, 4, 8), float32], Tensor[(?, 10, ?), float64]) */;
  %682 = @func_3486() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %683 = bitwise_or(%670, %671) /* ty=Tensor[(8, 2, 13), int8] */;
  %684 = left_shift(%674, %675) /* ty=Tensor[(8, 2, 13), int32] */;
  %685 = %676.0;
  %686 = %681.1;
  %687 = @func_4183() /* ty=Tensor[(12, 4, 8), float32] */;
  %688 = %682.0;
  (%683, %684, %685, %686, False /* ty=bool */, %var_4434, %687, %688)
}

def @func_8857() -> Tensor[(384), float64] {
  %689 = @func_6608() /* ty=(Tensor[(384), float64],) */;
  %689.0
}

def @func_10240(%var_10213: Tensor[(10, 13, 7), float32], %var_10214: Tensor[(10, 13, 7), float32]) -> (Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32]) {
  %690 = cast(%var_10214, dtype="bool") /* ty=Tensor[(10, 13, 7), bool] */;
  %691 = shape_of(%var_10213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %692 = cast(%var_10213, dtype="bool") /* ty=Tensor[(10, 13, 7), bool] */;
  %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %694 = cast(%var_10214, dtype="float64") /* ty=Tensor[(10, 13, 7), float64] */;
  %695 = @func_4622() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %696 = @func_827() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %697 = not_equal(%692, %693) /* ty=Tensor[(10, 13, 7), bool] */;
  %698 = atanh(%694) /* ty=Tensor[(10, 13, 7), float64] */;
  %699 = %695.0;
  %700 = %696.1;
  (%697, %698, %699, %700)
}

def @func_8209(%var_8199: Tensor[(1, 78), float64]) -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32], Tensor[(1, 78), float64], Tensor[(12, 10, 10), uint16]) {
  %701 = @func_567() /* ty=(Tensor[(12, 4, 8), float32],) */;
  %702 = cast(%var_8199, dtype="float64") /* ty=Tensor[(1, 78), float64] */;
  %703 = reshape(%702, newshape=[78]) /* ty=Tensor[(78), float64] */;
  %704 = @func_3675(%703) /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(?, 468), bool], Tensor[(78), float64], Tensor[(12, 4, 8), float64], Tensor[(36, 2), float32], Tensor[(12, 4, 8), float32]) */;
  %705 = @func_7642() /* ty=(Tensor[(12, 10, 10), uint16], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), int8], Tensor[(12, 4, 8), float64]) */;
  %706 = %701.0;
  %707 = %704.7;
  %708 = %705.0;
  (%706, %707, %var_8199, %708)
}

def @func_9128() -> (Tensor[(384), float64], Tensor[(12, 4, 8), float64], Tensor[(72), float32], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  %709 = cast(meta[relay.Constant][33] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %710 = reshape(%709, newshape=[3, 8, 3]) /* ty=Tensor[(3, 8, 3), float32] */;
  %711 = @func_2617(%710) /* ty=(Tensor[(3, 8, 3), bool], Tensor[(12, 4, 8), float64]) */;
  %712 = @func_539() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32]) */;
  %713 = @func_4995() /* ty=Tensor[(384), float64] */;
  %714 = %711.1;
  %715 = %712.1;
  %716 = @func_2306() /* ty=Tensor[(12, 4, 8), float64] */;
  (%713, %714, meta[relay.Constant][33] /* ty=Tensor[(72), float32] */, %715, %716)
}

def @func_8826() -> (Tensor[(12, 4, 8), int8], Tensor[(12, 4, 8), float64], Tensor[(384), float64], Tensor[(12, 4, 8), bool], Tensor[(12, 4, 8), float32], Tensor[(105), float32]) {
  %717 = @func_1603() /* ty=(Tensor[(3, 9, 2), int64], Tensor[(12, 4, 8), int8], Tensor[(384), bool]) */;
  %718 = @func_4354() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(384), bool], Tensor[(12, 4, 8), float64]) */;
  %719 = @func_4835() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), uint8], Tensor[(12, 10, 10), float32], Tensor[(384), bool], Tensor[(12, 4, 8), bool], Tensor[(12, 10, 10), float32]) */;
  %720 = cast(meta[relay.Constant][34] /* ty=Tensor[(105), float32] */, dtype="float32") /* ty=Tensor[(105), float32] */;
  %721 = reshape(%720, newshape=[105, 1]) /* ty=Tensor[(105, 1), float32] */;
  %722 = @func_5997(%721) /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(105, 1), float64]) */;
  %723 = %717.1;
  %724 = %718.2;
  %725 = @func_4995() /* ty=Tensor[(384), float64] */;
  %726 = %719.4;
  %727 = %722.1;
  (%723, %724, %725, %726, %727, meta[relay.Constant][34] /* ty=Tensor[(105), float32] */)
}

def @func_8261() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32]) {
  %728 = @func_567() /* ty=(Tensor[(12, 4, 8), float32],) */;
  %729 = @func_6856() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32]) */;
  %730 = %728.0;
  %731 = %729.0;
  (%730, %731)
}

def @func_9547() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  %732 = @func_7747() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %733 = @func_4183() /* ty=Tensor[(12, 4, 8), float32] */;
  %734 = %732.0;
  (%733, %734)
}

def @func_5736() -> Tensor[(12, 4, 8), float64] {
  %735 = @func_5009() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), int8]) */;
  %735.0
}

def @func_10197() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) {
  %736 = @func_4317() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %737 = %736.1;
  %738 = @func_4883() /* ty=Tensor[(12, 4, 8), float64] */;
  (%737, %738)
}

def @func_4972(%var_4964: Tensor[(5, 8, 1), uint64], %var_4965: Tensor[(5, 8, 1), uint64]) -> Tensor[(5, 8, ?), uint64] {
  %739 = cast(%var_4965, dtype="uint64") /* ty=Tensor[(5, 8, 1), uint64] */;
  %740 = shape_of(%var_4964, dtype="int32") /* ty=Tensor[(3), int32] */;
  %741 = cast(%var_4964, dtype="uint64") /* ty=Tensor[(5, 8, 1), uint64] */;
  %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  minimum(%741, %742) /* ty=Tensor[(5, 8, ?), uint64] */
}

def @func_1261() -> (Tensor[(12, 4, 8), float32],) {
  %743 = @func_1087() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %744 = %743.0;
  %745 = cast(%744, dtype="float32") /* ty=Tensor[(12, 4, 8), float32] */;
  %746 = cos(%745) /* ty=Tensor[(12, 4, 8), float32] */;
  (%746,)
}

def @func_311() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) {
  %747 = cast(meta[relay.Constant][35] /* ty=Tensor[(12, 4, 8), float64] */, dtype="float64") /* ty=Tensor[(12, 4, 8), float64] */;
  %748 = cast(meta[relay.Constant][35] /* ty=Tensor[(12, 4, 8), float64] */, dtype="float32") /* ty=Tensor[(12, 4, 8), float32] */;
  %749 = cosh(%747) /* ty=Tensor[(12, 4, 8), float64] */;
  %750 = erf(%748) /* ty=Tensor[(12, 4, 8), float32] */;
  (%749, %750)
}

def @func_4869() -> (Tensor[(12, 4, 8), float64],) {
  %751 = @func_2680() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %752 = %751.0;
  (%752,)
}

def @func_9189() -> (Tensor[(12, 4, 8), bool],) {
  %753 = @func_4041() /* ty=(Tensor[(12, 4, 8), bool],) */;
  %754 = %753.0;
  (%754,)
}

def @func_10335() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) {
  %755 = @func_6787() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %756 = @func_6530() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %757 = @func_8559() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */;
  %758 = %755.1;
  %759 = %756.0;
  %760 = %757.1;
  (%758, %759, %760)
}

def @func_10154() -> Tensor[(12, 4, 8), float32] {
  %761 = @func_9927() /* ty=(Tensor[(12, 4, 8), float32],) */;
  %761.0
}

def @func_2855() -> Tensor[(12, 4, 8), float32] {
  %762 = @func_676() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %762.0
}

def @func_2428() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  %763 = @func_927() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %764 = @func_374() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */;
  %765 = %763.1;
  %766 = %764.1;
  (%765, %766)
}

def @func_1729() -> (Tensor[(12, 4, 8), float32],) {
  %767 = @func_567() /* ty=(Tensor[(12, 4, 8), float32],) */;
  %768 = %767.0;
  (%768,)
}

def @func_5457(%var_5389: Tensor[(12, 4, 8), float64]) -> (Tensor[(7, 15), float32], Tensor[(105), float32], Tensor[(384), bool], Tensor[(12, 4, 3), bool], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) {
  %769 = cast(meta[relay.Constant][36] /* ty=Tensor[(105), float32] */, dtype="float32") /* ty=Tensor[(105), float32] */;
  %770 = reshape(%769, newshape=[7, 15]) /* ty=Tensor[(7, 15), float32] */;
  %771 = @func_759(%770) /* ty=(Tensor[(7, 15), float32], Tensor[(12, 4, 8), float32]) */;
  %772 = @func_1894() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 3), bool], Tensor[(144), uint16]) */;
  %773 = @func_4948() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %774 = @func_3786() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %775 = %774.0;
  %776 = cast(%var_5389, dtype="bool") /* ty=Tensor[(12, 4, 8), bool] */;
  %777 = shape_of(%775, dtype="int32") /* ty=Tensor[(3), int32] */;
  %778 = cast(%775, dtype="bool") /* ty=Tensor[(12, 4, 8), bool] */;
  %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %780 = not_equal(%778, %779) /* ty=Tensor[(12, 4, 8), bool] */;
  %781 = cast(%780, dtype="float64") /* ty=Tensor[(12, 4, 8), float64] */;
  %782 = %771.0;
  %783 = @func_3980() /* ty=Tensor[(384), bool] */;
  %784 = %772.1;
  %785 = @func_4962() /* ty=Tensor[(12, 4, 8), float64] */;
  %786 = %773.0;
  %787 = asin(%781) /* ty=Tensor[(12, 4, 8), float64] */;
  (%782, meta[relay.Constant][36] /* ty=Tensor[(105), float32] */, %783, %784, %785, %786, %787)
}

def @func_6507() -> (Tensor[(12, 4, 8), float64],) {
  %788 = @func_420() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %789 = %788.0;
  (%789,)
}

def @func_4742() -> (Tensor[(12, 4, 8), float32],) {
  %790 = @func_4528() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %791 = %790.3;
  (%791,)
}

def @func_5603() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(1, 78), float64]) {
  %792 = @func_5009() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), int8]) */;
  %793 = @func_2680() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %794 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 78), float64] */, dtype="float64") /* ty=Tensor[(1, 78), float64] */;
  %795 = reshape(%794, newshape=[78]) /* ty=Tensor[(78), float64] */;
  %796 = @func_3675(%795) /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(?, 468), bool], Tensor[(78), float64], Tensor[(12, 4, 8), float64], Tensor[(36, 2), float32], Tensor[(12, 4, 8), float32]) */;
  %797 = %792.0;
  %798 = %793.0;
  %799 = %796.5;
  (%797, %798, %799, meta[relay.Constant][37] /* ty=Tensor[(1, 78), float64] */)
}

def @func_10537(%var_10526: Tensor[(40), uint64]) -> (Tensor[(1755), float64], Tensor[(5, 8, ?), uint64], Tensor[(40), uint64], Tensor[(12, 4, 8), float64], Tensor[(384), float64], Tensor[(12, 4, 8), bool]) {
  %800 = cast(%var_10526, dtype="uint64") /* ty=Tensor[(40), uint64] */;
  %801 = cast(%var_10526, dtype="uint64") /* ty=Tensor[(40), uint64] */;
  %802 = reshape(%800, newshape=[5, 8, 1]) /* ty=Tensor[(5, 8, 1), uint64] */;
  %803 = reshape(%801, newshape=[5, 8, 1]) /* ty=Tensor[(5, 8, 1), uint64] */;
  %804 = @func_5009() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), int8]) */;
  %805 = @func_9189() /* ty=(Tensor[(12, 4, 8), bool],) */;
  %806 = @func_7376() /* ty=Tensor[(1755), float64] */;
  %807 = @func_4972(%802, %803) /* ty=Tensor[(5, 8, ?), uint64] */;
  %808 = %804.0;
  %809 = @func_8857() /* ty=Tensor[(384), float64] */;
  %810 = %805.0;
  (%806, %807, %var_10526, %808, %809, %810)
}

def @func_3786() -> (Tensor[(12, 4, 8), float64],) {
  %811 = @func_3486() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %812 = %811.0;
  (%812,)
}

def @func_927() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  %813 = @func_827() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %814 = %813.1;
  %815 = cast(%814, dtype="float32") /* ty=Tensor[(12, 4, 8), float32] */;
  %816 = log(%815) /* ty=Tensor[(12, 4, 8), float32] */;
  %817 = cast(%814, dtype="float64") /* ty=Tensor[(12, 4, 8), float64] */;
  %818 = shape_of(%816, dtype="int32") /* ty=Tensor[(3), int32] */;
  %819 = cast(%816, dtype="float64") /* ty=Tensor[(12, 4, 8), float64] */;
  %820 = dyn.reshape(%817, %818, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %821 = divide(%819, %820) /* ty=Tensor[(12, 4, 8), float64] */;
  %822 = cast(%821, dtype="float32") /* ty=Tensor[(12, 4, 8), float32] */;
  %823 = shape_of(%816, dtype="int32") /* ty=Tensor[(3), int32] */;
  %824 = cast(%816, dtype="float32") /* ty=Tensor[(12, 4, 8), float32] */;
  %825 = dyn.reshape(%822, %823, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %826 = @func_374() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */;
  %827 = @func_344() /* ty=Tensor[(12, 4, 8), float64] */;
  %828 = power(%824, %825) /* ty=Tensor[(12, 4, 8), float32] */;
  %829 = %826.0;
  (%827, %828, %829)
}

def @func_6482() -> (Tensor[(12, 4, 8), float64],) {
  %830 = @func_3188() /* ty=Tensor[(12, 4, 8), float64] */;
  (%830,)
}

def @func_3535() -> Tensor[(12, 4, 8), float64] {
  @func_1053() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_9578() -> (Tensor[(12, 4, 8), float64], Tensor[(3, 8, 3), bool]) {
  %831 = @func_4948() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %832 = @func_7263() /* ty=(Tensor[(3, 8, 3), bool], Tensor[(12, 4, 8), float32]) */;
  %833 = %831.0;
  %834 = %832.0;
  (%833, %834)
}

def @func_2361(%var_2348: Tensor[(12, 10, 10), float32]) -> (Tensor[(12, 4, 8), float64], Tensor[(12, 10, 10), bool]) {
  %835 = @func_676() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %836 = @func_1761() /* ty=(Tensor[(12, 10, 10), uint64], Tensor[(12, 10, 10), float32]) */;
  %837 = %836.1;
  %838 = cast(%var_2348, dtype="bool") /* ty=Tensor[(12, 10, 10), bool] */;
  %839 = shape_of(%837, dtype="int32") /* ty=Tensor[(3), int32] */;
  %840 = cast(%837, dtype="bool") /* ty=Tensor[(12, 10, 10), bool] */;
  %841 = dyn.reshape(%838, %839, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %842 = %835.1;
  %843 = logical_or(%840, %841) /* ty=Tensor[(12, 10, 10), bool] */;
  (%842, %843)
}

def @func_3980() -> Tensor[(384), bool] {
  %844 = @func_3915() /* ty=(Tensor[(384), float64],) */;
  %845 = %844.0;
  %846 = cast(meta[relay.Constant][38] /* ty=Tensor[(384), float64] */, dtype="bool") /* ty=Tensor[(384), bool] */;
  %847 = shape_of(%845, dtype="int32") /* ty=Tensor[(1), int32] */;
  %848 = cast(%845, dtype="bool") /* ty=Tensor[(384), bool] */;
  %849 = dyn.reshape(%846, %847, newshape=[]) /* ty=Tensor[(?), bool] */;
  less_equal(%848, %849) /* ty=Tensor[(384), bool] */
}

def @func_7587() -> Tensor[(12, 4, 8), float32] {
  %850 = @func_927() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %850.1
}

def @func_9255() -> (Tensor[(12, 4, 8), float32],) {
  %851 = @func_7587() /* ty=Tensor[(12, 4, 8), float32] */;
  (%851,)
}

def @func_3954() -> Tensor[(12, 4, 8), float64] {
  %852 = @func_591() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %852.0
}

def @func_1289(%var_1280: Tensor[(15, 13, 9), int64]) -> Tensor[(15, 13, 9), int64] {
  %853 = cast(-5 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %854 = cast(%var_1280, dtype="int64") /* ty=Tensor[(15, 13, 9), int64] */;
  bitwise_xor(%853, %854) /* ty=Tensor[(15, 13, 9), int64] */
}

def @func_6608() -> (Tensor[(384), float64],) {
  %855 = @func_4995() /* ty=Tensor[(384), float64] */;
  (%855,)
}

def @func_5364() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) {
  %856 = @func_1126() /* ty=Tensor[(12, 4, 8), float64] */;
  %857 = @func_2478() /* ty=Tensor[(12, 4, 8), float64] */;
  (%856, %857)
}

def @func_1053() -> Tensor[(12, 4, 8), float64] {
  %858 = @func_827() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %858.0
}

def @func_10430(%var_10424: Tensor[(8, 11, 13), uint64]) -> (Tensor[(8, 11, 13), uint64],) {
  %859 = cast(meta[relay.Constant][39] /* ty=Tensor[(8, 11, 13), uint64] */, dtype="uint64") /* ty=Tensor[(8, 11, 13), uint64] */;
  %860 = shape_of(%var_10424, dtype="int32") /* ty=Tensor[(3), int32] */;
  %861 = cast(%var_10424, dtype="uint64") /* ty=Tensor[(8, 11, 13), uint64] */;
  %862 = dyn.reshape(%859, %860, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %863 = bitwise_or(%861, %862) /* ty=Tensor[(8, 11, 13), uint64] */;
  (%863,)
}

def @func_7376() -> Tensor[(1755), float64] {
  %864 = @func_3376() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(15, 13, 9), int64], Tensor[(1755), int64], Tensor[(12, 4, 3), bool]) */;
  %865 = %864.2;
  %866 = cast(%865, dtype="float64") /* ty=Tensor[(1755), float64] */;
  sigmoid(%866) /* ty=Tensor[(1755), float64] */
}

def @func_4041() -> (Tensor[(12, 4, 8), bool],) {
  %867 = @func_3954() /* ty=Tensor[(12, 4, 8), float64] */;
  %868 = @func_2428() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %869 = %868.1;
  %870 = cast(%869, dtype="bool") /* ty=Tensor[(12, 4, 8), bool] */;
  %871 = shape_of(%867, dtype="int32") /* ty=Tensor[(3), int32] */;
  %872 = cast(%867, dtype="bool") /* ty=Tensor[(12, 4, 8), bool] */;
  %873 = dyn.reshape(%870, %871, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %874 = less_equal(%872, %873) /* ty=Tensor[(12, 4, 8), bool] */;
  (%874,)
}

def @func_7065() -> (Tensor[(12, 4, 8), float32],) {
  %875 = @func_4183() /* ty=Tensor[(12, 4, 8), float32] */;
  (%875,)
}

def @func_2806(%var_2798: Tensor[(15, 5, 2), int16]) -> (Tensor[(15, 5, 2), int16],) {
  %876 = cast(meta[relay.Constant][40] /* ty=Tensor[(15, 5, 2), int16] */, dtype="int16") /* ty=Tensor[(15, 5, 2), int16] */;
  %877 = shape_of(%var_2798, dtype="int32") /* ty=Tensor[(3), int32] */;
  %878 = cast(%var_2798, dtype="int16") /* ty=Tensor[(15, 5, 2), int16] */;
  %879 = dyn.reshape(%876, %877, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %880 = bitwise_xor(%878, %879) /* ty=Tensor[(15, 5, 2), int16] */;
  (%880,)
}

def @func_6530() -> (Tensor[(12, 4, 8), float64],) {
  %881 = @func_2680() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %882 = %881.0;
  (%882,)
}

def @func_1144(%var_1135: Tensor[(13, 1, 6), float64], %var_1138: Tensor[(13, 6, 6), float64]) -> (Tensor[(13, 6, 6), uint32], Tensor[(13, 1, 6), float64]) {
  %883 = cast(%var_1135, dtype="uint32") /* ty=Tensor[(13, 1, 6), uint32] */;
  %884 = cast(%var_1138, dtype="uint32") /* ty=Tensor[(13, 6, 6), uint32] */;
  %885 = cast(%var_1135, dtype="float64") /* ty=Tensor[(13, 1, 6), float64] */;
  %886 = tan(%885) /* ty=Tensor[(13, 1, 6), float64] */;
  %887 = cast(%886, dtype="float64") /* ty=Tensor[(13, 1, 6), float64] */;
  %888 = bitwise_and(%883, %884) /* ty=Tensor[(13, 6, 6), uint32] */;
  %889 = exp(%887) /* ty=Tensor[(13, 1, 6), float64] */;
  (%888, %889)
}

def @func_4629() -> Tensor[(14, 8, 9), float32] {
  %890 = cast(meta[relay.Constant][41] /* ty=Tensor[(14, 8, 9), float32] */, dtype="float32") /* ty=Tensor[(14, 8, 9), float32] */;
  exp(%890) /* ty=Tensor[(14, 8, 9), float32] */
}

def @func_9353(%var_9283: Tensor[(6, 15, 13), int16], %var_9284: Tensor[(6, 15, 13), int16], %var_9302: Tensor[(150), int16], %var_9309: Tensor[(72), float32]) -> (Tensor[(12, 10, 10), float32], Tensor[(6, 15, 13), bool], Tensor[(12, 4, 3), bool], Tensor[(15, 5, 2), int16], Tensor[(150), int16], Tensor[(12, 4, 8), float32], Tensor[(3, 8, 3), bool], Tensor[(72), float32], Tensor[(12, 4, 8), float32], Tensor[(6, 15, 13), bool]) {
  %891 = @func_1761() /* ty=(Tensor[(12, 10, 10), uint64], Tensor[(12, 10, 10), float32]) */;
  %892 = cast(%var_9283, dtype="float64") /* ty=Tensor[(6, 15, 13), float64] */;
  %893 = cosh(%892) /* ty=Tensor[(6, 15, 13), float64] */;
  %894 = cast(%var_9284, dtype="int16") /* ty=Tensor[(6, 15, 13), int16] */;
  %895 = shape_of(%var_9283, dtype="int32") /* ty=Tensor[(3), int32] */;
  %896 = cast(%var_9283, dtype="int16") /* ty=Tensor[(6, 15, 13), int16] */;
  %897 = dyn.reshape(%894, %895, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %898 = bitwise_xor(%896, %897) /* ty=Tensor[(6, 15, 13), int16] */;
  %899 = cast(%898, dtype="bool") /* ty=Tensor[(6, 15, 13), bool] */;
  %900 = shape_of(%893, dtype="int32") /* ty=Tensor[(3), int32] */;
  %901 = cast(%893, dtype="bool") /* ty=Tensor[(6, 15, 13), bool] */;
  %902 = dyn.reshape(%899, %900, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %903 = @func_1894() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 3), bool], Tensor[(144), uint16]) */;
  %904 = cast(%var_9302, dtype="int16") /* ty=Tensor[(150), int16] */;
  %905 = reshape(%904, newshape=[15, 5, 2]) /* ty=Tensor[(15, 5, 2), int16] */;
  %906 = @func_2806(%905) /* ty=(Tensor[(15, 5, 2), int16],) */;
  %907 = @func_6435() /* ty=(Tensor[(384), bool], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %908 = cast(%var_9309, dtype="float32") /* ty=Tensor[(72), float32] */;
  %909 = reshape(%908, newshape=[3, 8, 3]) /* ty=Tensor[(3, 8, 3), float32] */;
  %910 = @func_2617(%909) /* ty=(Tensor[(3, 8, 3), bool], Tensor[(12, 4, 8), float64]) */;
  %911 = cast(%898, dtype="bool") /* ty=Tensor[(6, 15, 13), bool] */;
  %912 = shape_of(%893, dtype="int32") /* ty=Tensor[(3), int32] */;
  %913 = cast(%893, dtype="bool") /* ty=Tensor[(6, 15, 13), bool] */;
  %914 = dyn.reshape(%911, %912, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %915 = %891.1;
  %916 = logical_and(%901, %902) /* ty=Tensor[(6, 15, 13), bool] */;
  %917 = %903.1;
  %918 = %906.0;
  %919 = %907.2;
  %920 = %910.0;
  %921 = @func_4183() /* ty=Tensor[(12, 4, 8), float32] */;
  %922 = greater_equal(%913, %914) /* ty=Tensor[(6, 15, 13), bool] */;
  (%915, %916, %917, %918, %var_9302, %919, %920, %var_9309, %921, %922)
}

def @func_4354() -> (Tensor[(12, 4, 8), float64], Tensor[(384), bool], Tensor[(12, 4, 8), float64]) {
  %923 = @func_2680() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %924 = %923.0;
  %925 = @func_2558() /* ty=Tensor[(384), bool] */;
  %926 = @func_3535() /* ty=Tensor[(12, 4, 8), float64] */;
  (%924, %925, %926)
}

def @func_8751(%var_8727: Tensor[(2, 5, 16), float64]) -> (Tensor[(2, 5, 16), float64], Tensor[(12, 4, 8), float64]) {
  %927 = cast(%var_8727, dtype="float64") /* ty=Tensor[(2, 5, 16), float64] */;
  %928 = @func_5899() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %929 = sinh(%927) /* ty=Tensor[(2, 5, 16), float64] */;
  %930 = %928.0;
  (%929, %930)
}

def @func_1126() -> Tensor[(12, 4, 8), float64] {
  %931 = @func_311() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %931.0
}

def @func_6335() -> (Tensor[(15, 13, 9), int64],) {
  %932 = @func_3376() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(15, 13, 9), int64], Tensor[(1755), int64], Tensor[(12, 4, 3), bool]) */;
  %933 = %932.1;
  (%933,)
}

def @func_10508(%var_10505: Tensor[(2, 10, 11), float32]) -> (Tensor[(2, 10, 11), float32],) {
  %934 = cast(%var_10505, dtype="float32") /* ty=Tensor[(2, 10, 11), float32] */;
  %935 = log(%934) /* ty=Tensor[(2, 10, 11), float32] */;
  (%935,)
}

def @func_7002(%var_6984: Tensor[(224), float64], %var_6993: Tensor[(208), int8]) -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), int32], Tensor[(3, 9, 2), int64], Tensor[(224), float64], Tensor[(12, 4, 8), float32], Tensor[(208), int8], Tensor[(10), bool], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(78), float64]) {
  %936 = @func_4948() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %937 = %936.0;
  %938 = cast(%937, dtype="float64") /* ty=Tensor[(12, 4, 8), float64] */;
  %939 = reshape(%938, newshape=[12, 4, 8]) /* ty=Tensor[(12, 4, 8), float64] */;
  %940 = @func_1006(%939) /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), int32]) */;
  %941 = cast(%var_6984, dtype="float64") /* ty=Tensor[(224), float64] */;
  %942 = reshape(%941, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %943 = @func_5318(%942) /* ty=(Tensor[(15, 6, 16), float64], Tensor[(3, 9, 2), int64], Tensor[(4, 14, 4), float64], Tensor[(224), float64]) */;
  %944 = cast(%var_6993, dtype="int8") /* ty=Tensor[(208), int8] */;
  %945 = cast(%var_6993, dtype="int8") /* ty=Tensor[(208), int8] */;
  %946 = cast(meta[relay.Constant][42] /* ty=Tensor[(10), bool] */, dtype="bool") /* ty=Tensor[(10), bool] */;
  %947 = reshape(%944, newshape=[8, 2, 13]) /* ty=Tensor[(8, 2, 13), int8] */;
  %948 = reshape(%945, newshape=[8, 2, 13]) /* ty=Tensor[(8, 2, 13), int8] */;
  %949 = reshape(%946, newshape=[10]) /* ty=Tensor[(10), bool] */;
  %950 = @func_4470(%947, %948, %949) /* ty=(Tensor[(8, 2, 13), int8], Tensor[(8, 2, 13), int32], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32], bool, Tensor[(10), bool], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %951 = cast(meta[relay.Constant][43] /* ty=Tensor[(78), float64] */, dtype="float64") /* ty=Tensor[(78), float64] */;
  %952 = reshape(%951, newshape=[78]) /* ty=Tensor[(78), float64] */;
  %953 = @func_3675(%952) /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(?, 468), bool], Tensor[(78), float64], Tensor[(12, 4, 8), float64], Tensor[(36, 2), float32], Tensor[(12, 4, 8), float32]) */;
  %954 = %940.2;
  %955 = %943.1;
  %956 = %950.2;
  %957 = @func_6243() /* ty=Tensor[(12, 4, 8), float64] */;
  %958 = %953.2;
  (%937, %954, %955, %var_6984, %956, %var_6993, meta[relay.Constant][42] /* ty=Tensor[(10), bool] */, %957, %958, meta[relay.Constant][43] /* ty=Tensor[(78), float64] */)
}

def @func_4962() -> Tensor[(12, 4, 8), float64] {
  %959 = @func_591() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %959.0
}

def @func_1663() -> (Tensor[(12, 4, 8), float32],) {
  %960 = @func_591() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %961 = %960.1;
  (%961,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5529() -> (Tensor[(12, 4, 8), float64], Tensor[(3, 8, 3), bool], Tensor[(1, 72), float32]) {
  %0 = @func_4528() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 72), float32] */, dtype="float32") /* ty=Tensor[(1, 72), float32] */;
  %2 = reshape(%1, newshape=[3, 8, 3]) /* ty=Tensor[(3, 8, 3), float32] */;
  %3 = @func_2617(%2) /* ty=(Tensor[(3, 8, 3), bool], Tensor[(12, 4, 8), float64]) */;
  %4 = %0.1;
  %5 = %3.0;
  (%4, %5, meta[relay.Constant][0] /* ty=Tensor[(1, 72), float32] */)
}

def @func_6484() -> (Tensor[(12, 4, 8), float64],) {
  @func_6482() /* ty=(Tensor[(12, 4, 8), float64],) */
}

def @func_10510(%var_10509: Tensor[(2, 10, 11), float32]) -> (Tensor[(2, 10, 11), float32],) {
  %8 = fn (%var_10505: Tensor[(2, 10, 11), float32]) -> (Tensor[(2, 10, 11), float32],) {
    %6 = cast(%var_10505, dtype="float32") /* ty=Tensor[(2, 10, 11), float32] */;
    %7 = log(%6) /* ty=Tensor[(2, 10, 11), float32] */;
    (%7,)
  };
  %8(%var_10509) /* ty=(Tensor[(2, 10, 11), float32],) */
}

def @func_4996() -> Tensor[(384), float64] {
  %10 = fn () -> Tensor[(384), float64] {
    %9 = @func_3915() /* ty=(Tensor[(384), float64],) */;
    %9.0
  };
  %10() /* ty=Tensor[(384), float64] */
}

def @func_4474(%var_4471: Tensor[(8, 2, 13), int8], %var_4472: Tensor[(8, 2, 13), int8], %var_4473: Tensor[(10), bool]) -> (Tensor[(8, 2, 13), int8], Tensor[(8, 2, 13), int32], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32], bool, Tensor[(10), bool], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  %32 = fn (%var_4401: Tensor[(8, 2, 13), int8], %var_4415: Tensor[(8, 2, 13), int8], %var_4434: Tensor[(10), bool]) -> (Tensor[(8, 2, 13), int8], Tensor[(8, 2, 13), int32], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32], bool, Tensor[(10), bool], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
    %11 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 2, 13), int8] */, dtype="int8") /* ty=Tensor[(8, 2, 13), int8] */;
    %12 = shape_of(%var_4401, dtype="int32") /* ty=Tensor[(3), int32] */;
    %13 = cast(%var_4401, dtype="int8") /* ty=Tensor[(8, 2, 13), int8] */;
    %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %15 = cast(%var_4415, dtype="int32") /* ty=Tensor[(8, 2, 13), int32] */;
    %16 = shape_of(%var_4401, dtype="int32") /* ty=Tensor[(3), int32] */;
    %17 = cast(%var_4401, dtype="int32") /* ty=Tensor[(8, 2, 13), int32] */;
    %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %19 = @func_567() /* ty=(Tensor[(12, 4, 8), float32],) */;
    %20 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %21 = cast(%var_4434, dtype="bool") /* ty=Tensor[(10), bool] */;
    %22 = reshape(%20, newshape=[]) /* ty=bool */;
    %23 = reshape(%21, newshape=[1, 10, 1]) /* ty=Tensor[(1, 10, 1), bool] */;
    %24 = @func_3252(%22, %23) /* ty=(Tensor[(12, 4, 8), int8], Tensor[(12, 4, 8), float32], Tensor[(?, 10, ?), float64]) */;
    %25 = @func_3486() /* ty=(Tensor[(12, 4, 8), float64],) */;
    %26 = bitwise_or(%13, %14) /* ty=Tensor[(8, 2, 13), int8] */;
    %27 = left_shift(%17, %18) /* ty=Tensor[(8, 2, 13), int32] */;
    %28 = %19.0;
    %29 = %24.1;
    %30 = @func_4183() /* ty=Tensor[(12, 4, 8), float32] */;
    %31 = %25.0;
    (%26, %27, %28, %29, False /* ty=bool */, %var_4434, %30, %31)
  };
  %32(%var_4471, %var_4472, %var_4473) /* ty=(Tensor[(8, 2, 13), int8], Tensor[(8, 2, 13), int32], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32], bool, Tensor[(10), bool], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */
}

def @func_9607() -> (Tensor[(12, 4, 8), float64],) {
  @func_9605() /* ty=(Tensor[(12, 4, 8), float64],) */
}

def @func_7407() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) {
  @func_7405() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */
}

def @func_345() -> Tensor[(12, 4, 8), float64] {
  %34 = fn () -> Tensor[(12, 4, 8), float64] {
    %33 = @func_311() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
    %33.0
  };
  %34() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_1054() -> Tensor[(12, 4, 8), float64] {
  %36 = fn () -> Tensor[(12, 4, 8), float64] {
    %35 = @func_827() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
    %35.0
  };
  %36() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_10919() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  @func_10917() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */
}

def @func_7489(%var_7488: Tensor[(18, 4), float32]) -> (Tensor[(384), bool], Tensor[(12, 4, 8), float32], Tensor[(18, 4), float32], Tensor[(12, 4, 8), float64]) {
  %44 = fn (%var_7475: Tensor[(18, 4), float32]) -> (Tensor[(384), bool], Tensor[(12, 4, 8), float32], Tensor[(18, 4), float32], Tensor[(12, 4, 8), float64]) {
    %37 = @func_5937() /* ty=(Tensor[(384), bool],) */;
    %38 = cast(%var_7475, dtype="float32") /* ty=Tensor[(18, 4), float32] */;
    %39 = reshape(%38, newshape=[72, 1]) /* ty=Tensor[(72, 1), float32] */;
    %40 = @func_4220(%39) /* ty=(Tensor[(12, 4, 8), float32], Tensor[(5, 351), int64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(72, 1), float32]) */;
    %41 = %37.0;
    %42 = %40.0;
    %43 = @func_2306() /* ty=Tensor[(12, 4, 8), float64] */;
    (%41, %42, %var_7475, %43)
  };
  %44(%var_7488) /* ty=(Tensor[(384), bool], Tensor[(12, 4, 8), float32], Tensor[(18, 4), float32], Tensor[(12, 4, 8), float64]) */
}

def @func_9489() -> (Tensor[(384), bool],) {
  @func_9487() /* ty=(Tensor[(384), bool],) */
}

def @func_5899() -> (Tensor[(12, 4, 8), float64],) {
  %45 = @func_2235() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %46 = %45.1;
  (%46,)
}

def @func_827() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) {
  %47 = @func_311() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %48 = @func_539() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32]) */;
  %49 = %47.0;
  %50 = %48.0;
  (%49, %50)
}

def @func_4145(%var_4143: Tensor[(1755), int64]) -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(78), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(15, 13, 9), int64], Tensor[(1755), int64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  @func_4142(%var_4143) /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(78), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(15, 13, 9), int64], Tensor[(1755), int64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */
}

def @func_10011() -> (Tensor[(12, 4, 8), float64],) {
  @func_10009() /* ty=(Tensor[(12, 4, 8), float64],) */
}

def @func_714(%var_687: Tensor[(12, 4, 3), uint16], %var_688: Tensor[(12, 4, 3), uint16]) -> (Tensor[(12, 4, 3), bool], Tensor[(12, 4, 3), int64], Tensor[(12, 4, 3), float64]) {
  %51 = cast(%var_688, dtype="bool") /* ty=Tensor[(12, 4, 3), bool] */;
  %52 = shape_of(%var_687, dtype="int32") /* ty=Tensor[(3), int32] */;
  %53 = cast(%var_687, dtype="bool") /* ty=Tensor[(12, 4, 3), bool] */;
  %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %55 = cast(%var_687, dtype="int64") /* ty=Tensor[(12, 4, 3), int64] */;
  %56 = shape_of(%var_688, dtype="int32") /* ty=Tensor[(3), int32] */;
  %57 = cast(%var_688, dtype="int64") /* ty=Tensor[(12, 4, 3), int64] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %59 = cast(%var_687, dtype="float64") /* ty=Tensor[(12, 4, 3), float64] */;
  %60 = asin(%59) /* ty=Tensor[(12, 4, 3), float64] */;
  %61 = cast(%60, dtype="float64") /* ty=Tensor[(12, 4, 3), float64] */;
  %62 = not_equal(%53, %54) /* ty=Tensor[(12, 4, 3), bool] */;
  %63 = left_shift(%57, %58) /* ty=Tensor[(12, 4, 3), int64] */;
  %64 = sigmoid(%61) /* ty=Tensor[(12, 4, 3), float64] */;
  (%62, %63, %64)
}

def @func_7731() -> Tensor[(384), bool] {
  @func_2558() /* ty=Tensor[(384), bool] */
}

def @func_2559() -> Tensor[(384), bool] {
  %66 = fn () -> Tensor[(384), bool] {
    %65 = @func_1603() /* ty=(Tensor[(3, 9, 2), int64], Tensor[(12, 4, 8), int8], Tensor[(384), bool]) */;
    %65.2
  };
  %66() /* ty=Tensor[(384), bool] */
}

def @func_8212(%var_8210: Tensor[(1, 78), float64]) -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32], Tensor[(1, 78), float64], Tensor[(12, 10, 10), uint16]) {
  @func_8209(%var_8210) /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32], Tensor[(1, 78), float64], Tensor[(12, 10, 10), uint16]) */
}

def @func_2014() -> Tensor[(12, 4, 8), float64] {
  %67 = @func_616() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %67.0
}

def @func_5677() -> Tensor[(12, 4, 8), float64] {
  @func_5675() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_421() -> (Tensor[(12, 4, 8), float64],) {
  %69 = fn () -> (Tensor[(12, 4, 8), float64],) {
    %68 = @func_344() /* ty=Tensor[(12, 4, 8), float64] */;
    (%68,)
  };
  %69() /* ty=(Tensor[(12, 4, 8), float64],) */
}

def @func_5460(%var_5458: Tensor[(12, 4, 8), float64]) -> (Tensor[(7, 15), float32], Tensor[(105), float32], Tensor[(384), bool], Tensor[(12, 4, 3), bool], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) {
  @func_5457(%var_5458) /* ty=(Tensor[(7, 15), float32], Tensor[(105), float32], Tensor[(384), bool], Tensor[(12, 4, 3), bool], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */
}

def @func_4744() -> (Tensor[(12, 4, 8), float32],) {
  @func_4742() /* ty=(Tensor[(12, 4, 8), float32],) */
}

def @func_7907() -> (Tensor[(12, 4, 8), int8], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) {
  @func_7905() /* ty=(Tensor[(12, 4, 8), int8], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */
}

def @func_9704(%var_9701: Tensor[(12, 10, 10), uint64], %var_9702: Tensor[(98), float64], %var_9703: Tensor[(3, 8, 3), bool]) -> (Tensor[(12, 10, 10), float32], Tensor[(12, 10, 10), float32], Tensor[(3, 8, 3), bool], Tensor[(7, 2, 7), float32], Tensor[(3, 8, 3), uint32], Tensor[(3, 8, 3), float64], Tensor[(12, 4, 8), bool]) {
  @func_9699(%var_9701, %var_9702, %var_9703) /* ty=(Tensor[(12, 10, 10), float32], Tensor[(12, 10, 10), float32], Tensor[(3, 8, 3), bool], Tensor[(7, 2, 7), float32], Tensor[(3, 8, 3), uint32], Tensor[(3, 8, 3), float64], Tensor[(12, 4, 8), bool]) */
}

def @func_9462() -> Tensor[(12, 4, 8), float32] {
  %70 = @func_1261() /* ty=(Tensor[(12, 4, 8), float32],) */;
  %70.0
}

def @func_10917() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  %71 = @func_9547() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %72 = @func_5899() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %73 = %71.0;
  %74 = %72.0;
  (%73, %74)
}

def @func_4324() -> Tensor[(12, 4, 8), float64] {
  @func_4322() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_5130() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  %75 = @func_3863() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %76 = @func_4742() /* ty=(Tensor[(12, 4, 8), float32],) */;
  %77 = @func_2235() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %78 = @func_2832() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %79 = @func_3863() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %80 = @func_3786() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %81 = %75.0;
  %82 = %76.0;
  %83 = %77.1;
  %84 = @func_4322() /* ty=Tensor[(12, 4, 8), float64] */;
  %85 = %78.0;
  %86 = %79.0;
  %87 = %80.0;
  (%81, %82, %83, %84, %85, %86, %87)
}

def @func_6385() -> Tensor[(12, 4, 8), float64] {
  %88 = @func_5291() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %88.3
}

def @func_10811() -> (Tensor[(384), bool],) {
  @func_10809() /* ty=(Tensor[(384), bool],) */
}

def @func_617() -> (Tensor[(12, 4, 8), float64],) {
  %91 = fn () -> (Tensor[(12, 4, 8), float64],) {
    %89 = @func_420() /* ty=(Tensor[(12, 4, 8), float64],) */;
    %90 = %89.0;
    (%90,)
  };
  %91() /* ty=(Tensor[(12, 4, 8), float64],) */
}

def @func_6309() -> (Tensor[(12, 4, 8), float32], Tensor[(384), float64]) {
  %92 = @func_567() /* ty=(Tensor[(12, 4, 8), float32],) */;
  %93 = @func_3915() /* ty=(Tensor[(384), float64],) */;
  %94 = %92.0;
  %95 = %93.0;
  (%94, %95)
}

def @func_3075() -> (Tensor[(12, 10, 10), uint64],) {
  %98 = fn () -> (Tensor[(12, 10, 10), uint64],) {
    %96 = @func_1761() /* ty=(Tensor[(12, 10, 10), uint64], Tensor[(12, 10, 10), float32]) */;
    %97 = %96.0;
    (%97,)
  };
  %98() /* ty=(Tensor[(12, 10, 10), uint64],) */
}

def @func_1292(%var_1290: Tensor[(15, 13, 9), int64]) -> Tensor[(15, 13, 9), int64] {
  @func_1289(%var_1290) /* ty=Tensor[(15, 13, 9), int64] */
}

def @func_6336() -> (Tensor[(15, 13, 9), int64],) {
  %101 = fn () -> (Tensor[(15, 13, 9), int64],) {
    %99 = @func_3376() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(15, 13, 9), int64], Tensor[(1755), int64], Tensor[(12, 4, 3), bool]) */;
    %100 = %99.1;
    (%100,)
  };
  %101() /* ty=(Tensor[(15, 13, 9), int64],) */
}

def @func_5767(%var_5765: uint16, %var_5766: Tensor[(13, 14, 13), uint16]) -> Tensor[(13, 14, 13), uint16] {
  @func_5763(%var_5765, %var_5766) /* ty=Tensor[(13, 14, 13), uint16] */
}

def @func_1009(%var_1007: Tensor[(12, 4, 8), float64]) -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), int32]) {
  @func_1006(%var_1007) /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), int32]) */
}

def @func_4529() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) {
  %109 = fn () -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) {
    %102 = @func_1663() /* ty=(Tensor[(12, 4, 8), float32],) */;
    %103 = @func_927() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
    %104 = @func_1663() /* ty=(Tensor[(12, 4, 8), float32],) */;
    %105 = %102.0;
    %106 = @func_3188() /* ty=Tensor[(12, 4, 8), float64] */;
    %107 = %103.0;
    %108 = %104.0;
    (%105, %106, %107, %108)
  };
  %109() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */
}

def @func_3124() -> Tensor[(12, 4, 8), float32] {
  %111 = fn () -> Tensor[(12, 4, 8), float32] {
    %110 = @func_2235() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
    %110.0
  };
  %111() /* ty=Tensor[(12, 4, 8), float32] */
}

def @func_3307() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), uint8], Tensor[(12, 4, 8), float64]) {
  @func_3305() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), uint8], Tensor[(12, 4, 8), float64]) */
}

def @func_10199() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) {
  @func_10197() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */
}

def @func_7378() -> Tensor[(1755), float64] {
  @func_7376() /* ty=Tensor[(1755), float64] */
}

def @func_8587(%var_8581: Tensor[(4, 14, 4), float64]) -> (Tensor[(4, 14, 4), uint64], Tensor[(4, 14, 4), bool]) {
  %112 = @func_5708() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(4, 14, 4), float64], Tensor[(224), float64]) */;
  %113 = %112.1;
  %114 = cast(meta[relay.Constant][2] /* ty=Tensor[(4, 14, 4), float64] */, dtype="uint64") /* ty=Tensor[(4, 14, 4), uint64] */;
  %115 = shape_of(%113, dtype="int32") /* ty=Tensor[(3), int32] */;
  %116 = cast(%113, dtype="uint64") /* ty=Tensor[(4, 14, 4), uint64] */;
  %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %118 = cast(%var_8581, dtype="bool") /* ty=Tensor[(4, 14, 4), bool] */;
  %119 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(4, 14, 4), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %120 = cast(meta[relay.Constant][2] /* ty=Tensor[(4, 14, 4), float64] */, dtype="bool") /* ty=Tensor[(4, 14, 4), bool] */;
  %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %122 = right_shift(%116, %117) /* ty=Tensor[(4, 14, 4), uint64] */;
  %123 = less(%120, %121) /* ty=Tensor[(4, 14, 4), bool] */;
  (%122, %123)
}

def @func_5938() -> (Tensor[(384), bool],) {
  %125 = fn () -> (Tensor[(384), bool],) {
    %124 = @func_3980() /* ty=Tensor[(384), bool] */;
    (%124,)
  };
  %125() /* ty=(Tensor[(384), bool],) */
}

def @func_473() -> Tensor[(12, 4, 8), float32] {
  @func_471() /* ty=Tensor[(12, 4, 8), float32] */
}

def @func_7588() -> Tensor[(12, 4, 8), float32] {
  %127 = fn () -> Tensor[(12, 4, 8), float32] {
    %126 = @func_927() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
    %126.1
  };
  %127() /* ty=Tensor[(12, 4, 8), float32] */
}

def @func_4222(%var_4221: Tensor[(72, 1), float32]) -> (Tensor[(12, 4, 8), float32], Tensor[(5, 351), int64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(72, 1), float32]) {
  %140 = fn (%var_4209: Tensor[(72, 1), float32]) -> (Tensor[(12, 4, 8), float32], Tensor[(5, 351), int64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(72, 1), float32]) {
    %128 = @func_311() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
    %129 = cast(meta[relay.Constant][3] /* ty=Tensor[(5, 351), int64] */, dtype="int64") /* ty=Tensor[(5, 351), int64] */;
    %130 = reshape(%129, newshape=[1755]) /* ty=Tensor[(1755), int64] */;
    %131 = @func_4142(%130) /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(78), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(15, 13, 9), int64], Tensor[(1755), int64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
    %132 = %131.0;
    %133 = cast(%132, dtype="float32") /* ty=Tensor[(12, 4, 8), float32] */;
    %134 = cast(%var_4209, dtype="float32") /* ty=Tensor[(72, 1), float32] */;
    %135 = reshape(%134, newshape=[3, 8, 3]) /* ty=Tensor[(3, 8, 3), float32] */;
    %136 = @func_2617(%135) /* ty=(Tensor[(3, 8, 3), bool], Tensor[(12, 4, 8), float64]) */;
    %137 = %128.1;
    %138 = log2(%133) /* ty=Tensor[(12, 4, 8), float32] */;
    %139 = %136.1;
    (%137, meta[relay.Constant][3] /* ty=Tensor[(5, 351), int64] */, %138, %139, %var_4209)
  };
  %140(%var_4221) /* ty=(Tensor[(12, 4, 8), float32], Tensor[(5, 351), int64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(72, 1), float32]) */
}

def @main(%var_10922: Tensor[(5, 16, 13), float32]) -> Tensor[(5, 16, 13), float32] {
  %141 = cast(%var_10922, dtype="float32") /* ty=Tensor[(5, 16, 13), float32] */;
  cos(%141) /* ty=Tensor[(5, 16, 13), float32] */
}

def @func_2806(%var_2798: Tensor[(15, 5, 2), int16]) -> (Tensor[(15, 5, 2), int16],) {
  %142 = cast(meta[relay.Constant][4] /* ty=Tensor[(15, 5, 2), int16] */, dtype="int16") /* ty=Tensor[(15, 5, 2), int16] */;
  %143 = shape_of(%var_2798, dtype="int32") /* ty=Tensor[(3), int32] */;
  %144 = cast(%var_2798, dtype="int16") /* ty=Tensor[(15, 5, 2), int16] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %146 = bitwise_xor(%144, %145) /* ty=Tensor[(15, 5, 2), int16] */;
  (%146,)
}

def @func_3916() -> (Tensor[(384), float64],) {
  %153 = fn () -> (Tensor[(384), float64],) {
    %147 = @func_2558() /* ty=Tensor[(384), bool] */;
    %148 = cast(meta[relay.Constant][5] /* ty=Tensor[(384), bool] */, dtype="float64") /* ty=Tensor[(384), float64] */;
    %149 = shape_of(%147, dtype="int32") /* ty=Tensor[(1), int32] */;
    %150 = cast(%147, dtype="float64") /* ty=Tensor[(384), float64] */;
    %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?), float64] */;
    %152 = floor_mod(%150, %151) /* ty=Tensor[(384), float64] */;
    (%152,)
  };
  %153() /* ty=(Tensor[(384), float64],) */
}

def @func_5708() -> (Tensor[(12, 4, 8), float32], Tensor[(4, 14, 4), float64], Tensor[(224), float64]) {
  %154 = @func_4742() /* ty=(Tensor[(12, 4, 8), float32],) */;
  %155 = cast(meta[relay.Constant][6] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
  %156 = reshape(%155, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), float64] */;
  %157 = %154.0;
  %158 = @func_3178(%156) /* ty=Tensor[(4, 14, 4), float64] */;
  (%157, %158, meta[relay.Constant][6] /* ty=Tensor[(224), float64] */)
}

def @func_7066() -> (Tensor[(12, 4, 8), float32],) {
  %160 = fn () -> (Tensor[(12, 4, 8), float32],) {
    %159 = @func_4183() /* ty=Tensor[(12, 4, 8), float32] */;
    (%159,)
  };
  %160() /* ty=(Tensor[(12, 4, 8), float32],) */
}

def @func_7355(%var_7353: Tensor[(9, 1, 3), uint16], %var_7354: Tensor[(9, 15, 3), uint16]) -> Tensor[(9, 15, 3), uint16] {
  %163 = fn (%var_7346: Tensor[(9, 1, 3), uint16], %var_7347: Tensor[(9, 15, 3), uint16]) -> Tensor[(9, 15, 3), uint16] {
    %161 = cast(%var_7346, dtype="uint16") /* ty=Tensor[(9, 1, 3), uint16] */;
    %162 = cast(%var_7347, dtype="uint16") /* ty=Tensor[(9, 15, 3), uint16] */;
    right_shift(%161, %162) /* ty=Tensor[(9, 15, 3), uint16] */
  };
  %163(%var_7353, %var_7354) /* ty=Tensor[(9, 15, 3), uint16] */
}

def @func_9699(%var_9624: Tensor[(12, 10, 10), uint64], %var_9655: Tensor[(98), float64], %var_9680: Tensor[(3, 8, 3), bool]) -> (Tensor[(12, 10, 10), float32], Tensor[(12, 10, 10), float32], Tensor[(3, 8, 3), bool], Tensor[(7, 2, 7), float32], Tensor[(3, 8, 3), uint32], Tensor[(3, 8, 3), float64], Tensor[(12, 4, 8), bool]) {
  %164 = @func_3074() /* ty=(Tensor[(12, 10, 10), uint64],) */;
  %165 = %164.0;
  %166 = cast(%var_9624, dtype="float32") /* ty=Tensor[(12, 10, 10), float32] */;
  %167 = shape_of(%165, dtype="int32") /* ty=Tensor[(3), int32] */;
  %168 = cast(%165, dtype="float32") /* ty=Tensor[(12, 10, 10), float32] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %170 = cast(%165, dtype="float32") /* ty=Tensor[(12, 10, 10), float32] */;
  %171 = shape_of(%var_9624, dtype="int32") /* ty=Tensor[(3), int32] */;
  %172 = cast(%var_9624, dtype="float32") /* ty=Tensor[(12, 10, 10), float32] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %174 = @func_9578() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(3, 8, 3), bool]) */;
  %175 = cast(%var_9655, dtype="float64") /* ty=Tensor[(98), float64] */;
  %176 = reshape(%175, newshape=[7, 2, 7]) /* ty=Tensor[(7, 2, 7), float64] */;
  %177 = @func_4847(%176) /* ty=(Tensor[(7, 2, 7), float64],) */;
  %178 = %177.0;
  %179 = cast(%var_9655, dtype="float32") /* ty=Tensor[(98), float32] */;
  %180 = shape_of(%178, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(%178, dtype="float32") /* ty=Tensor[(7, 2, 7), float32] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %183 = @func_8188() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(3, 8, 3), bool], Tensor[(12, 10, 10), float32], Tensor[(12, 4, 8), float32]) */;
  %184 = %183.1;
  %185 = cast(%var_9680, dtype="uint32") /* ty=Tensor[(3, 8, 3), uint32] */;
  %186 = shape_of(%184, dtype="int32") /* ty=Tensor[(3), int32] */;
  %187 = cast(%184, dtype="uint32") /* ty=Tensor[(3, 8, 3), uint32] */;
  %188 = dyn.reshape(%185, %186, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %189 = cast(%var_9680, dtype="float64") /* ty=Tensor[(3, 8, 3), float64] */;
  %190 = @func_4041() /* ty=(Tensor[(12, 4, 8), bool],) */;
  %191 = power(%168, %169) /* ty=Tensor[(12, 10, 10), float32] */;
  %192 = floor_divide(%172, %173) /* ty=Tensor[(12, 10, 10), float32] */;
  %193 = %174.1;
  %194 = mod(%181, %182) /* ty=Tensor[(7, 2, 7), float32] */;
  %195 = bitwise_xor(%187, %188) /* ty=Tensor[(3, 8, 3), uint32] */;
  %196 = asin(%189) /* ty=Tensor[(3, 8, 3), float64] */;
  %197 = %190.0;
  (%191, %192, %193, %194, %195, %196, %197)
}

def @func_6789() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  @func_6787() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */
}

def @func_7761() -> Tensor[(12, 4, 8), float32] {
  @func_7759() /* ty=Tensor[(12, 4, 8), float32] */
}

def @func_4742() -> (Tensor[(12, 4, 8), float32],) {
  %198 = @func_4528() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %199 = %198.3;
  (%199,)
}

def @func_3189() -> Tensor[(12, 4, 8), float64] {
  %201 = fn () -> Tensor[(12, 4, 8), float64] {
    %200 = @func_1087() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
    %200.1
  };
  %201() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_9358(%var_9354: Tensor[(6, 15, 13), int16], %var_9355: Tensor[(6, 15, 13), int16], %var_9356: Tensor[(150), int16], %var_9357: Tensor[(72), float32]) -> (Tensor[(12, 10, 10), float32], Tensor[(6, 15, 13), bool], Tensor[(12, 4, 3), bool], Tensor[(15, 5, 2), int16], Tensor[(150), int16], Tensor[(12, 4, 8), float32], Tensor[(3, 8, 3), bool], Tensor[(72), float32], Tensor[(12, 4, 8), float32], Tensor[(6, 15, 13), bool]) {
  %234 = fn (%var_9283: Tensor[(6, 15, 13), int16], %var_9284: Tensor[(6, 15, 13), int16], %var_9302: Tensor[(150), int16], %var_9309: Tensor[(72), float32]) -> (Tensor[(12, 10, 10), float32], Tensor[(6, 15, 13), bool], Tensor[(12, 4, 3), bool], Tensor[(15, 5, 2), int16], Tensor[(150), int16], Tensor[(12, 4, 8), float32], Tensor[(3, 8, 3), bool], Tensor[(72), float32], Tensor[(12, 4, 8), float32], Tensor[(6, 15, 13), bool]) {
    %202 = @func_1761() /* ty=(Tensor[(12, 10, 10), uint64], Tensor[(12, 10, 10), float32]) */;
    %203 = cast(%var_9283, dtype="float64") /* ty=Tensor[(6, 15, 13), float64] */;
    %204 = cosh(%203) /* ty=Tensor[(6, 15, 13), float64] */;
    %205 = cast(%var_9284, dtype="int16") /* ty=Tensor[(6, 15, 13), int16] */;
    %206 = shape_of(%var_9283, dtype="int32") /* ty=Tensor[(3), int32] */;
    %207 = cast(%var_9283, dtype="int16") /* ty=Tensor[(6, 15, 13), int16] */;
    %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %209 = bitwise_xor(%207, %208) /* ty=Tensor[(6, 15, 13), int16] */;
    %210 = cast(%209, dtype="bool") /* ty=Tensor[(6, 15, 13), bool] */;
    %211 = shape_of(%204, dtype="int32") /* ty=Tensor[(3), int32] */;
    %212 = cast(%204, dtype="bool") /* ty=Tensor[(6, 15, 13), bool] */;
    %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %214 = @func_1894() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 3), bool], Tensor[(144), uint16]) */;
    %215 = cast(%var_9302, dtype="int16") /* ty=Tensor[(150), int16] */;
    %216 = reshape(%215, newshape=[15, 5, 2]) /* ty=Tensor[(15, 5, 2), int16] */;
    %217 = @func_2806(%216) /* ty=(Tensor[(15, 5, 2), int16],) */;
    %218 = @func_6435() /* ty=(Tensor[(384), bool], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
    %219 = cast(%var_9309, dtype="float32") /* ty=Tensor[(72), float32] */;
    %220 = reshape(%219, newshape=[3, 8, 3]) /* ty=Tensor[(3, 8, 3), float32] */;
    %221 = @func_2617(%220) /* ty=(Tensor[(3, 8, 3), bool], Tensor[(12, 4, 8), float64]) */;
    %222 = cast(%209, dtype="bool") /* ty=Tensor[(6, 15, 13), bool] */;
    %223 = shape_of(%204, dtype="int32") /* ty=Tensor[(3), int32] */;
    %224 = cast(%204, dtype="bool") /* ty=Tensor[(6, 15, 13), bool] */;
    %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %226 = %202.1;
    %227 = logical_and(%212, %213) /* ty=Tensor[(6, 15, 13), bool] */;
    %228 = %214.1;
    %229 = %217.0;
    %230 = %218.2;
    %231 = %221.0;
    %232 = @func_4183() /* ty=Tensor[(12, 4, 8), float32] */;
    %233 = greater_equal(%224, %225) /* ty=Tensor[(6, 15, 13), bool] */;
    (%226, %227, %228, %229, %var_9302, %230, %231, %var_9309, %232, %233)
  };
  %234(%var_9354, %var_9355, %var_9356, %var_9357) /* ty=(Tensor[(12, 10, 10), float32], Tensor[(6, 15, 13), bool], Tensor[(12, 4, 3), bool], Tensor[(15, 5, 2), int16], Tensor[(150), int16], Tensor[(12, 4, 8), float32], Tensor[(3, 8, 3), bool], Tensor[(72), float32], Tensor[(12, 4, 8), float32], Tensor[(6, 15, 13), bool]) */
}

def @func_9816(%var_9814: Tensor[(224), float64]) -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(15, 13, 9), int64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(224), float64], Tensor[(208, 1), int8], Tensor[(12, 4, 8), float64]) {
  @func_9813(%var_9814) /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(15, 13, 9), int64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(224), float64], Tensor[(208, 1), int8], Tensor[(12, 4, 8), float64]) */
}

def @func_1148(%var_1146: Tensor[(13, 1, 6), float64], %var_1147: Tensor[(13, 6, 6), float64]) -> (Tensor[(13, 6, 6), uint32], Tensor[(13, 1, 6), float64]) {
  @func_1144(%var_1146, %var_1147) /* ty=(Tensor[(13, 6, 6), uint32], Tensor[(13, 1, 6), float64]) */
}

def @func_9190() -> (Tensor[(12, 4, 8), bool],) {
  %237 = fn () -> (Tensor[(12, 4, 8), bool],) {
    %235 = @func_4041() /* ty=(Tensor[(12, 4, 8), bool],) */;
    %236 = %235.0;
    (%236,)
  };
  %237() /* ty=(Tensor[(12, 4, 8), bool],) */
}

def @func_3675(%var_3660: Tensor[(78), float64]) -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(?, 468), bool], Tensor[(78), float64], Tensor[(12, 4, 8), float64], Tensor[(36, 2), float32], Tensor[(12, 4, 8), float32]) {
  %238 = @func_374() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */;
  %239 = @func_311() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %240 = cast(%var_3660, dtype="float64") /* ty=Tensor[(78), float64] */;
  %241 = reshape(%240, newshape=[78]) /* ty=Tensor[(78), float64] */;
  %242 = @func_2764(%241) /* ty=(Tensor[(12, 4, 8), float64], Tensor[(78), float64], Tensor[(12, 4, 8), float64], Tensor[(?, 468), bool]) */;
  %243 = cast(meta[relay.Constant][7] /* ty=Tensor[(36, 2), float32] */, dtype="float32") /* ty=Tensor[(36, 2), float32] */;
  %244 = reshape(%243, newshape=[3, 8, 3]) /* ty=Tensor[(3, 8, 3), float32] */;
  %245 = @func_2617(%244) /* ty=(Tensor[(3, 8, 3), bool], Tensor[(12, 4, 8), float64]) */;
  %246 = @func_311() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %247 = @func_1126() /* ty=Tensor[(12, 4, 8), float64] */;
  %248 = %238.0;
  %249 = %239.0;
  %250 = %242.3;
  %251 = %245.1;
  %252 = %246.1;
  (%247, %248, %249, %250, %var_3660, %251, meta[relay.Constant][7] /* ty=Tensor[(36, 2), float32] */, %252)
}

def @func_5563() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) {
  %256 = fn () -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) {
    %253 = @func_4622() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
    %254 = %253.1;
    %255 = @func_4322() /* ty=Tensor[(12, 4, 8), float64] */;
    (%254, %255)
  };
  %256() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */
}

def @func_1128() -> Tensor[(12, 4, 8), float64] {
  @func_1126() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_7800() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(13, 6), float64], Tensor[(14, 8, 9), float32], Tensor[(12, 4, 8), float64]) {
  @func_7798() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(13, 6), float64], Tensor[(14, 8, 9), float32], Tensor[(12, 4, 8), float64]) */
}

def @func_9129() -> (Tensor[(384), float64], Tensor[(12, 4, 8), float64], Tensor[(72), float32], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  %265 = fn () -> (Tensor[(384), float64], Tensor[(12, 4, 8), float64], Tensor[(72), float32], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
    %257 = cast(meta[relay.Constant][8] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
    %258 = reshape(%257, newshape=[3, 8, 3]) /* ty=Tensor[(3, 8, 3), float32] */;
    %259 = @func_2617(%258) /* ty=(Tensor[(3, 8, 3), bool], Tensor[(12, 4, 8), float64]) */;
    %260 = @func_539() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32]) */;
    %261 = @func_4995() /* ty=Tensor[(384), float64] */;
    %262 = %259.1;
    %263 = %260.1;
    %264 = @func_2306() /* ty=Tensor[(12, 4, 8), float64] */;
    (%261, %262, meta[relay.Constant][8] /* ty=Tensor[(72), float32] */, %263, %264)
  };
  %265() /* ty=(Tensor[(384), float64], Tensor[(12, 4, 8), float64], Tensor[(72), float32], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */
}

def @func_7005(%var_7003: Tensor[(224), float64], %var_7004: Tensor[(208), int8]) -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), int32], Tensor[(3, 9, 2), int64], Tensor[(224), float64], Tensor[(12, 4, 8), float32], Tensor[(208), int8], Tensor[(10), bool], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(78), float64]) {
  %289 = fn (%var_6984: Tensor[(224), float64], %var_6993: Tensor[(208), int8]) -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), int32], Tensor[(3, 9, 2), int64], Tensor[(224), float64], Tensor[(12, 4, 8), float32], Tensor[(208), int8], Tensor[(10), bool], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(78), float64]) {
    %266 = @func_4948() /* ty=(Tensor[(12, 4, 8), float64],) */;
    %267 = %266.0;
    %268 = cast(%267, dtype="float64") /* ty=Tensor[(12, 4, 8), float64] */;
    %269 = reshape(%268, newshape=[12, 4, 8]) /* ty=Tensor[(12, 4, 8), float64] */;
    %270 = @func_1006(%269) /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), int32]) */;
    %271 = cast(%var_6984, dtype="float64") /* ty=Tensor[(224), float64] */;
    %272 = reshape(%271, newshape=[224]) /* ty=Tensor[(224), float64] */;
    %273 = @func_5318(%272) /* ty=(Tensor[(15, 6, 16), float64], Tensor[(3, 9, 2), int64], Tensor[(4, 14, 4), float64], Tensor[(224), float64]) */;
    %274 = cast(%var_6993, dtype="int8") /* ty=Tensor[(208), int8] */;
    %275 = cast(%var_6993, dtype="int8") /* ty=Tensor[(208), int8] */;
    %276 = cast(meta[relay.Constant][9] /* ty=Tensor[(10), bool] */, dtype="bool") /* ty=Tensor[(10), bool] */;
    %277 = reshape(%274, newshape=[8, 2, 13]) /* ty=Tensor[(8, 2, 13), int8] */;
    %278 = reshape(%275, newshape=[8, 2, 13]) /* ty=Tensor[(8, 2, 13), int8] */;
    %279 = reshape(%276, newshape=[10]) /* ty=Tensor[(10), bool] */;
    %280 = @func_4470(%277, %278, %279) /* ty=(Tensor[(8, 2, 13), int8], Tensor[(8, 2, 13), int32], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32], bool, Tensor[(10), bool], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
    %281 = cast(meta[relay.Constant][10] /* ty=Tensor[(78), float64] */, dtype="float64") /* ty=Tensor[(78), float64] */;
    %282 = reshape(%281, newshape=[78]) /* ty=Tensor[(78), float64] */;
    %283 = @func_3675(%282) /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(?, 468), bool], Tensor[(78), float64], Tensor[(12, 4, 8), float64], Tensor[(36, 2), float32], Tensor[(12, 4, 8), float32]) */;
    %284 = %270.2;
    %285 = %273.1;
    %286 = %280.2;
    %287 = @func_6243() /* ty=Tensor[(12, 4, 8), float64] */;
    %288 = %283.2;
    (%267, %284, %285, %var_6984, %286, %var_6993, meta[relay.Constant][9] /* ty=Tensor[(10), bool] */, %287, %288, meta[relay.Constant][10] /* ty=Tensor[(78), float64] */)
  };
  %289(%var_7003, %var_7004) /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), int32], Tensor[(3, 9, 2), int64], Tensor[(224), float64], Tensor[(12, 4, 8), float32], Tensor[(208), int8], Tensor[(10), bool], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(78), float64]) */
}

def @func_4318() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  %294 = fn () -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
    %290 = @func_1729() /* ty=(Tensor[(12, 4, 8), float32],) */;
    %291 = @func_420() /* ty=(Tensor[(12, 4, 8), float64],) */;
    %292 = %290.0;
    %293 = %291.0;
    (%292, %293)
  };
  %294() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */
}

def @func_1144(%var_1135: Tensor[(13, 1, 6), float64], %var_1138: Tensor[(13, 6, 6), float64]) -> (Tensor[(13, 6, 6), uint32], Tensor[(13, 1, 6), float64]) {
  %295 = cast(%var_1135, dtype="uint32") /* ty=Tensor[(13, 1, 6), uint32] */;
  %296 = cast(%var_1138, dtype="uint32") /* ty=Tensor[(13, 6, 6), uint32] */;
  %297 = cast(%var_1135, dtype="float64") /* ty=Tensor[(13, 1, 6), float64] */;
  %298 = tan(%297) /* ty=Tensor[(13, 1, 6), float64] */;
  %299 = cast(%298, dtype="float64") /* ty=Tensor[(13, 1, 6), float64] */;
  %300 = bitwise_and(%295, %296) /* ty=Tensor[(13, 6, 6), uint32] */;
  %301 = exp(%299) /* ty=Tensor[(13, 1, 6), float64] */;
  (%300, %301)
}

def @func_4630() -> Tensor[(14, 8, 9), float32] {
  %303 = fn () -> Tensor[(14, 8, 9), float32] {
    %302 = cast(meta[relay.Constant][11] /* ty=Tensor[(14, 8, 9), float32] */, dtype="float32") /* ty=Tensor[(14, 8, 9), float32] */;
    exp(%302) /* ty=Tensor[(14, 8, 9), float32] */
  };
  %303() /* ty=Tensor[(14, 8, 9), float32] */
}

def @func_2478() -> Tensor[(12, 4, 8), float64] {
  %304 = @func_927() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %304.2
}

def @func_8378() -> (Tensor[(12, 9, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), int8], bool, Tensor[(5, 2), bool]) {
  @func_8376() /* ty=(Tensor[(12, 9, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), int8], bool, Tensor[(5, 2), bool]) */
}

def @func_6687(%var_6686: Tensor[(1, 224), float64]) -> (Tensor[(384), bool], Tensor[(3, 9, 2), int64], Tensor[(7, 2, 7), float64], Tensor[(14, 7), float64], Tensor[(15, 6, 16), float64], Tensor[(1, 224), float64]) {
  %316 = fn (%var_6663: Tensor[(1, 224), float64]) -> (Tensor[(384), bool], Tensor[(3, 9, 2), int64], Tensor[(7, 2, 7), float64], Tensor[(14, 7), float64], Tensor[(15, 6, 16), float64], Tensor[(1, 224), float64]) {
    %305 = @func_1603() /* ty=(Tensor[(3, 9, 2), int64], Tensor[(12, 4, 8), int8], Tensor[(384), bool]) */;
    %306 = cast(meta[relay.Constant][12] /* ty=Tensor[(14, 7), float64] */, dtype="float64") /* ty=Tensor[(14, 7), float64] */;
    %307 = reshape(%306, newshape=[7, 2, 7]) /* ty=Tensor[(7, 2, 7), float64] */;
    %308 = @func_4847(%307) /* ty=(Tensor[(7, 2, 7), float64],) */;
    %309 = cast(%var_6663, dtype="float64") /* ty=Tensor[(1, 224), float64] */;
    %310 = reshape(%309, newshape=[224]) /* ty=Tensor[(224), float64] */;
    %311 = @func_5318(%310) /* ty=(Tensor[(15, 6, 16), float64], Tensor[(3, 9, 2), int64], Tensor[(4, 14, 4), float64], Tensor[(224), float64]) */;
    %312 = @func_3980() /* ty=Tensor[(384), bool] */;
    %313 = %305.0;
    %314 = %308.0;
    %315 = %311.0;
    (%312, %313, %314, meta[relay.Constant][12] /* ty=Tensor[(14, 7), float64] */, %315, %var_6663)
  };
  %316(%var_6686) /* ty=(Tensor[(384), bool], Tensor[(3, 9, 2), int64], Tensor[(7, 2, 7), float64], Tensor[(14, 7), float64], Tensor[(15, 6, 16), float64], Tensor[(1, 224), float64]) */
}

def @func_1762() -> (Tensor[(12, 10, 10), uint64], Tensor[(12, 10, 10), float32]) {
  %329 = fn () -> (Tensor[(12, 10, 10), uint64], Tensor[(12, 10, 10), float32]) {
    %317 = cast(meta[relay.Constant][14] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %318 = cast(meta[relay.Constant][13] /* ty=Tensor[(12, 10, 10), uint16] */, dtype="uint16") /* ty=Tensor[(12, 10, 10), uint16] */;
    %319 = left_shift(%317, %318) /* ty=Tensor[(12, 10, 10), uint16] */;
    %320 = cast(%319, dtype="uint64") /* ty=Tensor[(12, 10, 10), uint64] */;
    %321 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(12, 10, 10), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %322 = cast(meta[relay.Constant][13] /* ty=Tensor[(12, 10, 10), uint16] */, dtype="uint64") /* ty=Tensor[(12, 10, 10), uint64] */;
    %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %324 = cast(meta[relay.Constant][13] /* ty=Tensor[(12, 10, 10), uint16] */, dtype="float32") /* ty=Tensor[(12, 10, 10), float32] */;
    %325 = sinh(%324) /* ty=Tensor[(12, 10, 10), float32] */;
    %326 = cast(%325, dtype="float32") /* ty=Tensor[(12, 10, 10), float32] */;
    %327 = minimum(%322, %323) /* ty=Tensor[(12, 10, 10), uint64] */;
    %328 = acosh(%326) /* ty=Tensor[(12, 10, 10), float32] */;
    (%327, %328)
  };
  %329() /* ty=(Tensor[(12, 10, 10), uint64], Tensor[(12, 10, 10), float32]) */
}

def @func_3256(%var_3254: bool, %var_3255: Tensor[(1, 10, 1), bool]) -> (Tensor[(12, 4, 8), int8], Tensor[(12, 4, 8), float32], Tensor[(?, 10, ?), float64]) {
  @func_3252(%var_3254, %var_3255) /* ty=(Tensor[(12, 4, 8), int8], Tensor[(12, 4, 8), float32], Tensor[(?, 10, ?), float64]) */
}

def @func_1088() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  %336 = fn () -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
    %330 = @func_374() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */;
    %331 = %330.1;
    %332 = cast(%331, dtype="float32") /* ty=Tensor[(12, 4, 8), float32] */;
    %333 = @func_311() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
    %334 = sigmoid(%332) /* ty=Tensor[(12, 4, 8), float32] */;
    %335 = %333.0;
    (%334, %335)
  };
  %336() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */
}

def @func_4354() -> (Tensor[(12, 4, 8), float64], Tensor[(384), bool], Tensor[(12, 4, 8), float64]) {
  %337 = @func_2680() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %338 = %337.0;
  %339 = @func_2558() /* ty=Tensor[(384), bool] */;
  %340 = @func_3535() /* ty=Tensor[(12, 4, 8), float64] */;
  (%338, %339, %340)
}

def @func_4972(%var_4964: Tensor[(5, 8, 1), uint64], %var_4965: Tensor[(5, 8, 1), uint64]) -> Tensor[(5, 8, ?), uint64] {
  %341 = cast(%var_4965, dtype="uint64") /* ty=Tensor[(5, 8, 1), uint64] */;
  %342 = shape_of(%var_4964, dtype="int32") /* ty=Tensor[(3), int32] */;
  %343 = cast(%var_4964, dtype="uint64") /* ty=Tensor[(5, 8, 1), uint64] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  minimum(%343, %344) /* ty=Tensor[(5, 8, ?), uint64] */
}

def @func_2236() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  %348 = fn () -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
    %345 = @func_567() /* ty=(Tensor[(12, 4, 8), float32],) */;
    %346 = %345.0;
    %347 = @func_2014() /* ty=Tensor[(12, 4, 8), float64] */;
    (%346, %347)
  };
  %348() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */
}

def @func_2764(%var_2740: Tensor[(78), float64]) -> (Tensor[(12, 4, 8), float64], Tensor[(78), float64], Tensor[(12, 4, 8), float64], Tensor[(?, 468), bool]) {
  %349 = cast(%var_2740, dtype="float64") /* ty=Tensor[(78), float64] */;
  %350 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 468), float64] */, dtype="float64") /* ty=Tensor[(1, 468), float64] */;
  %351 = reshape(%349, newshape=[13, 1, 6]) /* ty=Tensor[(13, 1, 6), float64] */;
  %352 = reshape(%350, newshape=[13, 6, 6]) /* ty=Tensor[(13, 6, 6), float64] */;
  %353 = @func_1144(%351, %352) /* ty=(Tensor[(13, 6, 6), uint32], Tensor[(13, 1, 6), float64]) */;
  %354 = %353.0;
  %355 = cast(%354, dtype="int64") /* ty=Tensor[(13, 6, 6), int64] */;
  %356 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(1, 468), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %357 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 468), float64] */, dtype="int64") /* ty=Tensor[(1, 468), int64] */;
  %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %359 = right_shift(%357, %358) /* ty=Tensor[(?, 468), int64] */;
  %360 = cast(%354, dtype="bool") /* ty=Tensor[(13, 6, 6), bool] */;
  %361 = shape_of(%359, dtype="int32") /* ty=Tensor[(2), int32] */;
  %362 = cast(%359, dtype="bool") /* ty=Tensor[(?, 468), bool] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %364 = @func_2306() /* ty=Tensor[(12, 4, 8), float64] */;
  %365 = @func_1126() /* ty=Tensor[(12, 4, 8), float64] */;
  %366 = logical_or(%362, %363) /* ty=Tensor[(?, 468), bool] */;
  (%364, %var_2740, %365, %366)
}

def @func_5604() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(1, 78), float64]) {
  %375 = fn () -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(1, 78), float64]) {
    %367 = @func_5009() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), int8]) */;
    %368 = @func_2680() /* ty=(Tensor[(12, 4, 8), float64],) */;
    %369 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 78), float64] */, dtype="float64") /* ty=Tensor[(1, 78), float64] */;
    %370 = reshape(%369, newshape=[78]) /* ty=Tensor[(78), float64] */;
    %371 = @func_3675(%370) /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(?, 468), bool], Tensor[(78), float64], Tensor[(12, 4, 8), float64], Tensor[(36, 2), float32], Tensor[(12, 4, 8), float32]) */;
    %372 = %367.0;
    %373 = %368.0;
    %374 = %371.5;
    (%372, %373, %374, meta[relay.Constant][16] /* ty=Tensor[(1, 78), float64] */)
  };
  %375() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(1, 78), float64]) */
}

def @func_3981() -> Tensor[(384), bool] {
  %382 = fn () -> Tensor[(384), bool] {
    %376 = @func_3915() /* ty=(Tensor[(384), float64],) */;
    %377 = %376.0;
    %378 = cast(meta[relay.Constant][17] /* ty=Tensor[(384), float64] */, dtype="bool") /* ty=Tensor[(384), bool] */;
    %379 = shape_of(%377, dtype="int32") /* ty=Tensor[(1), int32] */;
    %380 = cast(%377, dtype="bool") /* ty=Tensor[(384), bool] */;
    %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?), bool] */;
    less_equal(%380, %381) /* ty=Tensor[(384), bool] */
  };
  %382() /* ty=Tensor[(384), bool] */
}

def @func_10156() -> Tensor[(12, 4, 8), float32] {
  @func_10154() /* ty=Tensor[(12, 4, 8), float32] */
}

def @func_592() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) {
  %385 = fn () -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) {
    %383 = @func_344() /* ty=Tensor[(12, 4, 8), float64] */;
    %384 = @func_471() /* ty=Tensor[(12, 4, 8), float32] */;
    (%383, %384)
  };
  %385() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */
}

def @func_471() -> Tensor[(12, 4, 8), float32] {
  %386 = @func_311() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %386.1
}

def @func_6243() -> Tensor[(12, 4, 8), float64] {
  @func_2478() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_7747() -> (Tensor[(12, 4, 8), float64],) {
  %387 = @func_6243() /* ty=Tensor[(12, 4, 8), float64] */;
  (%387,)
}

def @func_8263() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32]) {
  @func_8261() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32]) */
}

def @func_3787() -> (Tensor[(12, 4, 8), float64],) {
  %390 = fn () -> (Tensor[(12, 4, 8), float64],) {
    %388 = @func_3486() /* ty=(Tensor[(12, 4, 8), float64],) */;
    %389 = %388.0;
    (%389,)
  };
  %390() /* ty=(Tensor[(12, 4, 8), float64],) */
}

def @func_2428() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  %391 = @func_927() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %392 = @func_374() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */;
  %393 = %391.1;
  %394 = %392.1;
  (%393, %394)
}

def @func_2430() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  @func_2428() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */
}

def @func_4835() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), uint8], Tensor[(12, 10, 10), float32], Tensor[(384), bool], Tensor[(12, 4, 8), bool], Tensor[(12, 10, 10), float32]) {
  %395 = @func_567() /* ty=(Tensor[(12, 4, 8), float32],) */;
  %396 = @func_3305() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), uint8], Tensor[(12, 4, 8), float64]) */;
  %397 = @func_3074() /* ty=(Tensor[(12, 10, 10), uint64],) */;
  %398 = %397.0;
  %399 = cast(%398, dtype="float32") /* ty=Tensor[(12, 10, 10), float32] */;
  %400 = @func_4041() /* ty=(Tensor[(12, 4, 8), bool],) */;
  %401 = @func_1761() /* ty=(Tensor[(12, 10, 10), uint64], Tensor[(12, 10, 10), float32]) */;
  %402 = %395.0;
  %403 = %396.1;
  %404 = erf(%399) /* ty=Tensor[(12, 10, 10), float32] */;
  %405 = @func_3980() /* ty=Tensor[(384), bool] */;
  %406 = %400.0;
  %407 = %401.1;
  (%402, %403, %404, %405, %406, %407)
}

def @func_4356() -> (Tensor[(12, 4, 8), float64], Tensor[(384), bool], Tensor[(12, 4, 8), float64]) {
  @func_4354() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(384), bool], Tensor[(12, 4, 8), float64]) */
}

def @func_8826() -> (Tensor[(12, 4, 8), int8], Tensor[(12, 4, 8), float64], Tensor[(384), float64], Tensor[(12, 4, 8), bool], Tensor[(12, 4, 8), float32], Tensor[(105), float32]) {
  %408 = @func_1603() /* ty=(Tensor[(3, 9, 2), int64], Tensor[(12, 4, 8), int8], Tensor[(384), bool]) */;
  %409 = @func_4354() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(384), bool], Tensor[(12, 4, 8), float64]) */;
  %410 = @func_4835() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), uint8], Tensor[(12, 10, 10), float32], Tensor[(384), bool], Tensor[(12, 4, 8), bool], Tensor[(12, 10, 10), float32]) */;
  %411 = cast(meta[relay.Constant][18] /* ty=Tensor[(105), float32] */, dtype="float32") /* ty=Tensor[(105), float32] */;
  %412 = reshape(%411, newshape=[105, 1]) /* ty=Tensor[(105, 1), float32] */;
  %413 = @func_5997(%412) /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(105, 1), float64]) */;
  %414 = %408.1;
  %415 = %409.2;
  %416 = @func_4995() /* ty=Tensor[(384), float64] */;
  %417 = %410.4;
  %418 = %413.1;
  (%414, %415, %416, %417, %418, meta[relay.Constant][18] /* ty=Tensor[(105), float32] */)
}

def @func_8522() -> (Tensor[(12, 4, 8), int8], Tensor[(12, 4, 8), float64], Tensor[(1, 72), float64]) {
  %419 = @func_8376() /* ty=(Tensor[(12, 9, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), int8], bool, Tensor[(5, 2), bool]) */;
  %420 = @func_5562() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */;
  %421 = @func_5529() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(3, 8, 3), bool], Tensor[(1, 72), float32]) */;
  %422 = %421.2;
  %423 = cast(%422, dtype="float64") /* ty=Tensor[(1, 72), float64] */;
  %424 = asin(%423) /* ty=Tensor[(1, 72), float64] */;
  %425 = cast(%424, dtype="float64") /* ty=Tensor[(1, 72), float64] */;
  %426 = %419.3;
  %427 = %420.1;
  %428 = atan(%425) /* ty=Tensor[(1, 72), float64] */;
  (%426, %427, %428)
}

def @func_540() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32]) {
  %436 = fn () -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32]) {
    %429 = @func_374() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */;
    %430 = %429.1;
    %431 = cast(%430, dtype="float32") /* ty=Tensor[(12, 4, 8), float32] */;
    %432 = sqrt(%431) /* ty=Tensor[(12, 4, 8), float32] */;
    %433 = cast(%432, dtype="float32") /* ty=Tensor[(12, 4, 8), float32] */;
    %434 = @func_471() /* ty=Tensor[(12, 4, 8), float32] */;
    %435 = acosh(%433) /* ty=Tensor[(12, 4, 8), float32] */;
    (%434, %435)
  };
  %436() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32]) */
}

def @func_6482() -> (Tensor[(12, 4, 8), float64],) {
  %437 = @func_3188() /* ty=Tensor[(12, 4, 8), float64] */;
  (%437,)
}

def @func_8376() -> (Tensor[(12, 9, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), int8], bool, Tensor[(5, 2), bool]) {
  %438 = cast(meta[relay.Constant][19] /* ty=Tensor[(12, 9, 8), float32] */, dtype="float32") /* ty=Tensor[(12, 9, 8), float32] */;
  %439 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %440 = cast(meta[relay.Constant][20] /* ty=Tensor[(5, 2), bool] */, dtype="bool") /* ty=Tensor[(5, 2), bool] */;
  %441 = reshape(%439, newshape=[]) /* ty=bool */;
  %442 = reshape(%440, newshape=[1, 10, 1]) /* ty=Tensor[(1, 10, 1), bool] */;
  %443 = @func_3252(%441, %442) /* ty=(Tensor[(12, 4, 8), int8], Tensor[(12, 4, 8), float32], Tensor[(?, 10, ?), float64]) */;
  %444 = erf(%438) /* ty=Tensor[(12, 9, 8), float32] */;
  %445 = @func_2478() /* ty=Tensor[(12, 4, 8), float64] */;
  %446 = @func_6385() /* ty=Tensor[(12, 4, 8), float64] */;
  %447 = %443.0;
  (%444, %445, %446, %447, True /* ty=bool */, meta[relay.Constant][20] /* ty=Tensor[(5, 2), bool] */)
}

def @func_5710() -> (Tensor[(12, 4, 8), float32], Tensor[(4, 14, 4), float64], Tensor[(224), float64]) {
  @func_5708() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(4, 14, 4), float64], Tensor[(224), float64]) */
}

def @func_8858() -> Tensor[(384), float64] {
  %449 = fn () -> Tensor[(384), float64] {
    %448 = @func_6608() /* ty=(Tensor[(384), float64],) */;
    %448.0
  };
  %449() /* ty=Tensor[(384), float64] */
}

def @func_7642() -> (Tensor[(12, 10, 10), uint16], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), int8], Tensor[(12, 4, 8), float64]) {
  %450 = @func_3074() /* ty=(Tensor[(12, 10, 10), uint64],) */;
  %451 = %450.0;
  %452 = cast(meta[relay.Constant][21] /* ty=Tensor[(12, 10, 10), uint64] */, dtype="uint16") /* ty=Tensor[(12, 10, 10), uint16] */;
  %453 = shape_of(%451, dtype="int32") /* ty=Tensor[(3), int32] */;
  %454 = cast(%451, dtype="uint16") /* ty=Tensor[(12, 10, 10), uint16] */;
  %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %456 = @func_7065() /* ty=(Tensor[(12, 4, 8), float32],) */;
  %457 = @func_5009() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), int8]) */;
  %458 = subtract(%454, %455) /* ty=Tensor[(12, 10, 10), uint16] */;
  %459 = %456.0;
  %460 = %457.1;
  %461 = @func_5675() /* ty=Tensor[(12, 4, 8), float64] */;
  (%458, %459, %460, %461)
}

def @func_6509() -> (Tensor[(12, 4, 8), float64],) {
  @func_6507() /* ty=(Tensor[(12, 4, 8), float64],) */
}

def @func_10804(%var_10802: uint16, %var_10803: Tensor[(9, 7, 1), uint16]) -> (Tensor[(9, 7, 1), uint16], Tensor[(12, 4, 8), float64]) {
  @func_10800(%var_10802, %var_10803) /* ty=(Tensor[(9, 7, 1), uint16], Tensor[(12, 4, 8), float64]) */
}

def @func_8190() -> (Tensor[(12, 4, 8), float64], Tensor[(3, 8, 3), bool], Tensor[(12, 10, 10), float32], Tensor[(12, 4, 8), float32]) {
  @func_8188() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(3, 8, 3), bool], Tensor[(12, 10, 10), float32], Tensor[(12, 4, 8), float32]) */
}

def @func_4185() -> Tensor[(12, 4, 8), float32] {
  @func_4183() /* ty=Tensor[(12, 4, 8), float32] */
}

def @func_7847() -> (Tensor[(12, 4, 8), float64],) {
  %462 = @func_2478() /* ty=Tensor[(12, 4, 8), float64] */;
  (%462,)
}

def @func_10834() -> (Tensor[(15, 13, 9), float64],) {
  %463 = @func_6335() /* ty=(Tensor[(15, 13, 9), int64],) */;
  %464 = %463.0;
  %465 = cast(%464, dtype="float64") /* ty=Tensor[(15, 13, 9), float64] */;
  %466 = log10(%465) /* ty=Tensor[(15, 13, 9), float64] */;
  %467 = cast(%466, dtype="float64") /* ty=Tensor[(15, 13, 9), float64] */;
  %468 = atanh(%467) /* ty=Tensor[(15, 13, 9), float64] */;
  (%468,)
}

def @func_9523() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  %472 = fn () -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
    %469 = @func_1261() /* ty=(Tensor[(12, 4, 8), float32],) */;
    %470 = %469.0;
    %471 = @func_4694() /* ty=Tensor[(12, 4, 8), float64] */;
    (%470, %471)
  };
  %472() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */
}

def @func_2480() -> Tensor[(12, 4, 8), float64] {
  @func_2478() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_10474() -> Tensor[(12, 4, 8), float64] {
  %473 = fn () -> Tensor[(12, 4, 8), float64] {
    @func_1105() /* ty=Tensor[(12, 4, 8), float64] */
  };
  %473() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_1262() -> (Tensor[(12, 4, 8), float32],) {
  %478 = fn () -> (Tensor[(12, 4, 8), float32],) {
    %474 = @func_1087() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
    %475 = %474.0;
    %476 = cast(%475, dtype="float32") /* ty=Tensor[(12, 4, 8), float32] */;
    %477 = cos(%476) /* ty=Tensor[(12, 4, 8), float32] */;
    (%477,)
  };
  %478() /* ty=(Tensor[(12, 4, 8), float32],) */
}

def @func_4696() -> Tensor[(12, 4, 8), float64] {
  @func_4694() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_2363(%var_2362: Tensor[(12, 10, 10), float32]) -> (Tensor[(12, 4, 8), float64], Tensor[(12, 10, 10), bool]) {
  %488 = fn (%var_2348: Tensor[(12, 10, 10), float32]) -> (Tensor[(12, 4, 8), float64], Tensor[(12, 10, 10), bool]) {
    %479 = @func_676() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
    %480 = @func_1761() /* ty=(Tensor[(12, 10, 10), uint64], Tensor[(12, 10, 10), float32]) */;
    %481 = %480.1;
    %482 = cast(%var_2348, dtype="bool") /* ty=Tensor[(12, 10, 10), bool] */;
    %483 = shape_of(%481, dtype="int32") /* ty=Tensor[(3), int32] */;
    %484 = cast(%481, dtype="bool") /* ty=Tensor[(12, 10, 10), bool] */;
    %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %486 = %479.1;
    %487 = logical_or(%484, %485) /* ty=Tensor[(12, 10, 10), bool] */;
    (%486, %487)
  };
  %488(%var_2362) /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 10, 10), bool]) */
}

def @func_4940(%var_4937: Tensor[(14, 12, 7), bool], %var_4938: Tensor[(14, 12, 7), bool], %var_4939: Tensor[(105), float32]) -> (Tensor[(14, 12, 7), int64], Tensor[(12, 4, 8), float32], Tensor[(105), float32], Tensor[(12, 10, 10), uint64], Tensor[(14, 12, 7), int16]) {
  %510 = fn (%var_4906: Tensor[(14, 12, 7), bool], %var_4912: Tensor[(14, 12, 7), bool], %var_4923: Tensor[(105), float32]) -> (Tensor[(14, 12, 7), int64], Tensor[(12, 4, 8), float32], Tensor[(105), float32], Tensor[(12, 10, 10), uint64], Tensor[(14, 12, 7), int16]) {
    %489 = cast(meta[relay.Constant][22] /* ty=Tensor[(14, 12, 7), bool] */, dtype="bool") /* ty=Tensor[(14, 12, 7), bool] */;
    %490 = shape_of(%var_4906, dtype="int32") /* ty=Tensor[(3), int32] */;
    %491 = cast(%var_4906, dtype="bool") /* ty=Tensor[(14, 12, 7), bool] */;
    %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %493 = logical_and(%491, %492) /* ty=Tensor[(14, 12, 7), bool] */;
    %494 = cast(%var_4912, dtype="int64") /* ty=Tensor[(14, 12, 7), int64] */;
    %495 = shape_of(%493, dtype="int32") /* ty=Tensor[(3), int32] */;
    %496 = cast(%493, dtype="int64") /* ty=Tensor[(14, 12, 7), int64] */;
    %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %498 = cast(%var_4923, dtype="float32") /* ty=Tensor[(105), float32] */;
    %499 = reshape(%498, newshape=[7, 15]) /* ty=Tensor[(7, 15), float32] */;
    %500 = @func_759(%499) /* ty=(Tensor[(7, 15), float32], Tensor[(12, 4, 8), float32]) */;
    %501 = @func_3074() /* ty=(Tensor[(12, 10, 10), uint64],) */;
    %502 = cast(%493, dtype="int16") /* ty=Tensor[(14, 12, 7), int16] */;
    %503 = shape_of(%var_4912, dtype="int32") /* ty=Tensor[(3), int32] */;
    %504 = cast(%var_4912, dtype="int16") /* ty=Tensor[(14, 12, 7), int16] */;
    %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %506 = bitwise_xor(%496, %497) /* ty=Tensor[(14, 12, 7), int64] */;
    %507 = %500.1;
    %508 = %501.0;
    %509 = add(%504, %505) /* ty=Tensor[(14, 12, 7), int16] */;
    (%506, %507, %var_4923, %508, %509)
  };
  %510(%var_4937, %var_4938, %var_4939) /* ty=(Tensor[(14, 12, 7), int64], Tensor[(12, 4, 8), float32], Tensor[(105), float32], Tensor[(12, 10, 10), uint64], Tensor[(14, 12, 7), int16]) */
}

def @func_9605() -> (Tensor[(12, 4, 8), float64],) {
  %511 = @func_5364() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */;
  %512 = %511.1;
  (%512,)
}

def @func_6387() -> Tensor[(12, 4, 8), float64] {
  @func_6385() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_312() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) {
  %517 = fn () -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) {
    %513 = cast(meta[relay.Constant][23] /* ty=Tensor[(12, 4, 8), float64] */, dtype="float64") /* ty=Tensor[(12, 4, 8), float64] */;
    %514 = cast(meta[relay.Constant][23] /* ty=Tensor[(12, 4, 8), float64] */, dtype="float32") /* ty=Tensor[(12, 4, 8), float32] */;
    %515 = cosh(%513) /* ty=Tensor[(12, 4, 8), float64] */;
    %516 = erf(%514) /* ty=Tensor[(12, 4, 8), float32] */;
    (%515, %516)
  };
  %517() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */
}

def @func_5292() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  %525 = fn () -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
    %518 = @func_2428() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
    %519 = @func_4948() /* ty=(Tensor[(12, 4, 8), float64],) */;
    %520 = @func_1087() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
    %521 = %518.1;
    %522 = %519.0;
    %523 = %520.0;
    %524 = @func_1126() /* ty=Tensor[(12, 4, 8), float64] */;
    (%521, %522, %523, %524)
  };
  %525() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */
}

def @func_2834() -> (Tensor[(12, 4, 8), float64],) {
  @func_2832() /* ty=(Tensor[(12, 4, 8), float64],) */
}

def @func_4950() -> (Tensor[(12, 4, 8), float64],) {
  @func_4948() /* ty=(Tensor[(12, 4, 8), float64],) */
}

def @func_10073() -> Tensor[(12, 4, 8), float64] {
  @func_10071() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_5852(%var_5850: Tensor[(15, 3, 13), int32], %var_5851: Tensor[(15, 3, 13), int32]) -> (Tensor[(15, 3, 13), bool], Tensor[(15, 3, 13), bool], Tensor[(15, 3, 13), float64]) {
  %543 = fn (%var_5817: Tensor[(15, 3, 13), int32], %var_5818: Tensor[(15, 3, 13), int32]) -> (Tensor[(15, 3, 13), bool], Tensor[(15, 3, 13), bool], Tensor[(15, 3, 13), float64]) {
    %526 = cast(%var_5818, dtype="int32") /* ty=Tensor[(15, 3, 13), int32] */;
    %527 = shape_of(%var_5817, dtype="int32") /* ty=Tensor[(3), int32] */;
    %528 = cast(%var_5817, dtype="int32") /* ty=Tensor[(15, 3, 13), int32] */;
    %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %530 = logical_xor(%528, %529) /* ty=Tensor[(15, 3, 13), int32] */;
    %531 = cast(%var_5817, dtype="bool") /* ty=Tensor[(15, 3, 13), bool] */;
    %532 = shape_of(%530, dtype="int32") /* ty=Tensor[(3), int32] */;
    %533 = cast(%530, dtype="bool") /* ty=Tensor[(15, 3, 13), bool] */;
    %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %535 = cast(meta[relay.Constant][24] /* ty=Tensor[(15, 3, 13), int32] */, dtype="bool") /* ty=Tensor[(15, 3, 13), bool] */;
    %536 = shape_of(%var_5818, dtype="int32") /* ty=Tensor[(3), int32] */;
    %537 = cast(%var_5818, dtype="bool") /* ty=Tensor[(15, 3, 13), bool] */;
    %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %539 = cast(%530, dtype="float64") /* ty=Tensor[(15, 3, 13), float64] */;
    %540 = greater_equal(%533, %534) /* ty=Tensor[(15, 3, 13), bool] */;
    %541 = logical_or(%537, %538) /* ty=Tensor[(15, 3, 13), bool] */;
    %542 = atanh(%539) /* ty=Tensor[(15, 3, 13), float64] */;
    (%540, %541, %542)
  };
  %543(%var_5850, %var_5851) /* ty=(Tensor[(15, 3, 13), bool], Tensor[(15, 3, 13), bool], Tensor[(15, 3, 13), float64]) */
}

def @func_6787() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  %544 = @func_1087() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %545 = @func_3188() /* ty=Tensor[(12, 4, 8), float64] */;
  %546 = cast(%545, dtype="float32") /* ty=Tensor[(12, 4, 8), float32] */;
  %547 = %544.1;
  %548 = sinh(%546) /* ty=Tensor[(12, 4, 8), float32] */;
  %549 = @func_4322() /* ty=Tensor[(12, 4, 8), float64] */;
  (%547, %548, %549)
}

def @func_8188() -> (Tensor[(12, 4, 8), float64], Tensor[(3, 8, 3), bool], Tensor[(12, 10, 10), float32], Tensor[(12, 4, 8), float32]) {
  %550 = @func_5562() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */;
  %551 = @func_7263() /* ty=(Tensor[(3, 8, 3), bool], Tensor[(12, 4, 8), float32]) */;
  %552 = @func_4835() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), uint8], Tensor[(12, 10, 10), float32], Tensor[(384), bool], Tensor[(12, 4, 8), bool], Tensor[(12, 10, 10), float32]) */;
  %553 = @func_3376() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(15, 13, 9), int64], Tensor[(1755), int64], Tensor[(12, 4, 3), bool]) */;
  %554 = %550.1;
  %555 = %551.0;
  %556 = %552.2;
  %557 = %553.0;
  (%554, %555, %556, %557)
}

def @func_8261() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32]) {
  %558 = @func_567() /* ty=(Tensor[(12, 4, 8), float32],) */;
  %559 = @func_6856() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32]) */;
  %560 = %558.0;
  %561 = %559.0;
  (%560, %561)
}

def @func_3305() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), uint8], Tensor[(12, 4, 8), float64]) {
  %562 = @func_311() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %563 = @func_1126() /* ty=Tensor[(12, 4, 8), float64] */;
  %564 = @func_344() /* ty=Tensor[(12, 4, 8), float64] */;
  %565 = cast(%564, dtype="uint8") /* ty=Tensor[(12, 4, 8), uint8] */;
  %566 = shape_of(%563, dtype="int32") /* ty=Tensor[(3), int32] */;
  %567 = cast(%563, dtype="uint8") /* ty=Tensor[(12, 4, 8), uint8] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %569 = @func_420() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %570 = %562.0;
  %571 = add(%567, %568) /* ty=Tensor[(12, 4, 8), uint8] */;
  %572 = %569.0;
  (%570, %571, %572)
}

def @func_3865() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) {
  @func_3863() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */
}

def @func_7644() -> (Tensor[(12, 10, 10), uint16], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), int8], Tensor[(12, 4, 8), float64]) {
  @func_7642() /* ty=(Tensor[(12, 10, 10), uint16], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), int8], Tensor[(12, 4, 8), float64]) */
}

def @func_5480() -> Tensor[(12, 4, 8), float32] {
  %574 = fn () -> Tensor[(12, 4, 8), float32] {
    %573 = @func_4317() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
    %573.0
  };
  %574() /* ty=Tensor[(12, 4, 8), float32] */
}

def @func_10240(%var_10213: Tensor[(10, 13, 7), float32], %var_10214: Tensor[(10, 13, 7), float32]) -> (Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32]) {
  %575 = cast(%var_10214, dtype="bool") /* ty=Tensor[(10, 13, 7), bool] */;
  %576 = shape_of(%var_10213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %577 = cast(%var_10213, dtype="bool") /* ty=Tensor[(10, 13, 7), bool] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %579 = cast(%var_10214, dtype="float64") /* ty=Tensor[(10, 13, 7), float64] */;
  %580 = @func_4622() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %581 = @func_827() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %582 = not_equal(%577, %578) /* ty=Tensor[(10, 13, 7), bool] */;
  %583 = atanh(%579) /* ty=Tensor[(10, 13, 7), float64] */;
  %584 = %580.0;
  %585 = %581.1;
  (%582, %583, %584, %585)
}

def @func_1199(%var_1191: Tensor[(12, 4, 8), bool]) -> (Tensor[(12, 4, 8), int8],) {
  %586 = @func_311() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %587 = %586.0;
  %588 = cast(meta[relay.Constant][25] /* ty=Tensor[(12, 4, 8), float64] */, dtype="bool") /* ty=Tensor[(12, 4, 8), bool] */;
  %589 = shape_of(%587, dtype="int32") /* ty=Tensor[(3), int32] */;
  %590 = cast(%587, dtype="bool") /* ty=Tensor[(12, 4, 8), bool] */;
  %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %592 = greater(%590, %591) /* ty=Tensor[(12, 4, 8), bool] */;
  %593 = cast(%var_1191, dtype="int8") /* ty=Tensor[(12, 4, 8), int8] */;
  %594 = shape_of(%592, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(%592, dtype="int8") /* ty=Tensor[(12, 4, 8), int8] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %597 = bitwise_and(%595, %596) /* ty=Tensor[(12, 4, 8), int8] */;
  (%597,)
}

def @func_10009() -> (Tensor[(12, 4, 8), float64],) {
  %598 = @func_5675() /* ty=Tensor[(12, 4, 8), float64] */;
  (%598,)
}

def @func_10336() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) {
  %605 = fn () -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) {
    %599 = @func_6787() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
    %600 = @func_6530() /* ty=(Tensor[(12, 4, 8), float64],) */;
    %601 = @func_8559() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */;
    %602 = %599.1;
    %603 = %600.0;
    %604 = %601.1;
    (%602, %603, %604)
  };
  %605() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */
}

def @func_9578() -> (Tensor[(12, 4, 8), float64], Tensor[(3, 8, 3), bool]) {
  %606 = @func_4948() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %607 = @func_7263() /* ty=(Tensor[(3, 8, 3), bool], Tensor[(12, 4, 8), float32]) */;
  %608 = %606.0;
  %609 = %607.0;
  (%608, %609)
}

def @func_9464() -> Tensor[(12, 4, 8), float32] {
  @func_9462() /* ty=Tensor[(12, 4, 8), float32] */
}

def @func_1731() -> (Tensor[(12, 4, 8), float32],) {
  @func_1729() /* ty=(Tensor[(12, 4, 8), float32],) */
}

def @func_8091() -> (Tensor[(12, 4, 8), float64], Tensor[(9, 14, 5), float32], Tensor[(126), float32], Tensor[(630), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(384), float64], Tensor[(384), bool], Tensor[(12, 4, 8), float32]) {
  %610 = cast(meta[relay.Constant][26] /* ty=Tensor[(126), float32] */, dtype="float32") /* ty=Tensor[(126), float32] */;
  %611 = cast(meta[relay.Constant][27] /* ty=Tensor[(630), float32] */, dtype="float32") /* ty=Tensor[(630), float32] */;
  %612 = reshape(%610, newshape=[9, 14, 1]) /* ty=Tensor[(9, 14, 1), float32] */;
  %613 = reshape(%611, newshape=[9, 14, 5]) /* ty=Tensor[(9, 14, 5), float32] */;
  %614 = @func_6167(%612, %613) /* ty=(Tensor[(9, 14, 5), float32], Tensor[(9, 14, 1), float32]) */;
  %615 = @func_5364() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */;
  %616 = @func_6856() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32]) */;
  %617 = @func_6377() /* ty=(Tensor[(384), float64],) */;
  %618 = @func_5736() /* ty=Tensor[(12, 4, 8), float64] */;
  %619 = %614.0;
  %620 = %615.1;
  %621 = %616.1;
  %622 = %617.0;
  %623 = @func_3980() /* ty=Tensor[(384), bool] */;
  %624 = @func_5479() /* ty=Tensor[(12, 4, 8), float32] */;
  (%618, %619, meta[relay.Constant][26] /* ty=Tensor[(126), float32] */, meta[relay.Constant][27] /* ty=Tensor[(630), float32] */, %620, %621, %622, %623, %624)
}

def @func_10154() -> Tensor[(12, 4, 8), float32] {
  %625 = @func_9927() /* ty=(Tensor[(12, 4, 8), float32],) */;
  %625.0
}

def @func_4976(%var_4974: Tensor[(5, 8, 1), uint64], %var_4975: Tensor[(5, 8, 1), uint64]) -> Tensor[(5, 8, ?), uint64] {
  @func_4972(%var_4974, %var_4975) /* ty=Tensor[(5, 8, ?), uint64] */
}

def @func_5738() -> Tensor[(12, 4, 8), float64] {
  @func_5736() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_4837() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), uint8], Tensor[(12, 10, 10), float32], Tensor[(384), bool], Tensor[(12, 4, 8), bool], Tensor[(12, 10, 10), float32]) {
  @func_4835() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), uint8], Tensor[(12, 10, 10), float32], Tensor[(384), bool], Tensor[(12, 4, 8), bool], Tensor[(12, 10, 10), float32]) */
}

def @func_5736() -> Tensor[(12, 4, 8), float64] {
  %626 = @func_5009() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), int8]) */;
  %626.0
}

def @func_5675() -> Tensor[(12, 4, 8), float64] {
  @func_1126() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_7827() -> Tensor[(14, 8, 9), float64] {
  %627 = @func_7798() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(13, 6), float64], Tensor[(14, 8, 9), float32], Tensor[(12, 4, 8), float64]) */;
  %628 = %627.3;
  %629 = cast(%628, dtype="float64") /* ty=Tensor[(14, 8, 9), float64] */;
  cos(%629) /* ty=Tensor[(14, 8, 9), float64] */
}

def @func_2855() -> Tensor[(12, 4, 8), float32] {
  %630 = @func_676() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %630.0
}

def @func_5457(%var_5389: Tensor[(12, 4, 8), float64]) -> (Tensor[(7, 15), float32], Tensor[(105), float32], Tensor[(384), bool], Tensor[(12, 4, 3), bool], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) {
  %631 = cast(meta[relay.Constant][28] /* ty=Tensor[(105), float32] */, dtype="float32") /* ty=Tensor[(105), float32] */;
  %632 = reshape(%631, newshape=[7, 15]) /* ty=Tensor[(7, 15), float32] */;
  %633 = @func_759(%632) /* ty=(Tensor[(7, 15), float32], Tensor[(12, 4, 8), float32]) */;
  %634 = @func_1894() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 3), bool], Tensor[(144), uint16]) */;
  %635 = @func_4948() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %636 = @func_3786() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %637 = %636.0;
  %638 = cast(%var_5389, dtype="bool") /* ty=Tensor[(12, 4, 8), bool] */;
  %639 = shape_of(%637, dtype="int32") /* ty=Tensor[(3), int32] */;
  %640 = cast(%637, dtype="bool") /* ty=Tensor[(12, 4, 8), bool] */;
  %641 = dyn.reshape(%638, %639, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %642 = not_equal(%640, %641) /* ty=Tensor[(12, 4, 8), bool] */;
  %643 = cast(%642, dtype="float64") /* ty=Tensor[(12, 4, 8), float64] */;
  %644 = %633.0;
  %645 = @func_3980() /* ty=Tensor[(384), bool] */;
  %646 = %634.1;
  %647 = @func_4962() /* ty=Tensor[(12, 4, 8), float64] */;
  %648 = %635.0;
  %649 = asin(%643) /* ty=Tensor[(12, 4, 8), float64] */;
  (%644, meta[relay.Constant][28] /* ty=Tensor[(105), float32] */, %645, %646, %647, %648, %649)
}

def @func_6531() -> (Tensor[(12, 4, 8), float64],) {
  %652 = fn () -> (Tensor[(12, 4, 8), float64],) {
    %650 = @func_2680() /* ty=(Tensor[(12, 4, 8), float64],) */;
    %651 = %650.0;
    (%651,)
  };
  %652() /* ty=(Tensor[(12, 4, 8), float64],) */
}

def @func_6167(%var_6120: Tensor[(9, 14, 1), float32], %var_6121: Tensor[(9, 14, 5), float32]) -> (Tensor[(9, 14, 5), float32], Tensor[(9, 14, 1), float32]) {
  %653 = cast(%var_6120, dtype="float32") /* ty=Tensor[(9, 14, 1), float32] */;
  %654 = cast(%var_6121, dtype="float32") /* ty=Tensor[(9, 14, 5), float32] */;
  %655 = cast(%var_6120, dtype="float32") /* ty=Tensor[(9, 14, 1), float32] */;
  %656 = power(%653, %654) /* ty=Tensor[(9, 14, 5), float32] */;
  %657 = asin(%655) /* ty=Tensor[(9, 14, 1), float32] */;
  (%656, %657)
}

def @func_6857() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32]) {
  %661 = fn () -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32]) {
    %658 = @func_827() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
    %659 = %658.1;
    %660 = @func_471() /* ty=Tensor[(12, 4, 8), float32] */;
    (%659, %660)
  };
  %661() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32]) */
}

def @func_7829() -> Tensor[(14, 8, 9), float64] {
  @func_7827() /* ty=Tensor[(14, 8, 9), float64] */
}

def @func_8927() -> Tensor[(12, 4, 8), float64] {
  @func_8925() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_8925() -> Tensor[(12, 4, 8), float64] {
  @func_3954() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_10613(%var_10579: int16) -> (Tensor[(1, 2, 1), int16], Tensor[(12, 4, 8), float32], Tensor[(1, 2, 1), float64], Tensor[(12, 4, 8), float64], Tensor[(5, 8, ?), uint64], Tensor[(40), uint64]) {
  %662 = cast(%var_10579, dtype="int16") /* ty=int16 */;
  %663 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 2, 1), int16] */, dtype="int16") /* ty=Tensor[(1, 2, 1), int16] */;
  %664 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 2, 1), int16] */, dtype="float64") /* ty=Tensor[(1, 2, 1), float64] */;
  %665 = @func_7405() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */;
  %666 = cast(meta[relay.Constant][30] /* ty=Tensor[(40), uint64] */, dtype="uint64") /* ty=Tensor[(40), uint64] */;
  %667 = cast(meta[relay.Constant][30] /* ty=Tensor[(40), uint64] */, dtype="uint64") /* ty=Tensor[(40), uint64] */;
  %668 = reshape(%666, newshape=[5, 8, 1]) /* ty=Tensor[(5, 8, 1), uint64] */;
  %669 = reshape(%667, newshape=[5, 8, 1]) /* ty=Tensor[(5, 8, 1), uint64] */;
  %670 = logical_xor(%662, %663) /* ty=Tensor[(1, 2, 1), int16] */;
  %671 = @func_9462() /* ty=Tensor[(12, 4, 8), float32] */;
  %672 = atanh(%664) /* ty=Tensor[(1, 2, 1), float64] */;
  %673 = %665.1;
  %674 = @func_4972(%668, %669) /* ty=Tensor[(5, 8, ?), uint64] */;
  (%670, %671, %672, %673, %674, meta[relay.Constant][30] /* ty=Tensor[(40), uint64] */)
}

def @func_6000(%var_5998: Tensor[(105, 1), float32]) -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(105, 1), float64]) {
  @func_5997(%var_5998) /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(105, 1), float64]) */
}

def @func_677() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  %679 = fn () -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
    %675 = @func_539() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32]) */;
    %676 = @func_420() /* ty=(Tensor[(12, 4, 8), float64],) */;
    %677 = %675.1;
    %678 = %676.0;
    (%677, %678)
  };
  %679() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */
}

def @func_718(%var_716: Tensor[(12, 4, 3), uint16], %var_717: Tensor[(12, 4, 3), uint16]) -> (Tensor[(12, 4, 3), bool], Tensor[(12, 4, 3), int64], Tensor[(12, 4, 3), float64]) {
  @func_714(%var_716, %var_717) /* ty=(Tensor[(12, 4, 3), bool], Tensor[(12, 4, 3), int64], Tensor[(12, 4, 3), float64]) */
}

def @func_2809(%var_2807: Tensor[(15, 5, 2), int16]) -> (Tensor[(15, 5, 2), int16],) {
  @func_2806(%var_2807) /* ty=(Tensor[(15, 5, 2), int16],) */
}

def @func_9053() -> Tensor[(12, 4, 8), float64] {
  %680 = @func_591() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %680.0
}

def @func_3252(%var_3193: bool, %var_3194: Tensor[(1, 10, 1), bool]) -> (Tensor[(12, 4, 8), int8], Tensor[(12, 4, 8), float32], Tensor[(?, 10, ?), float64]) {
  %681 = @func_1603() /* ty=(Tensor[(3, 9, 2), int64], Tensor[(12, 4, 8), int8], Tensor[(384), bool]) */;
  %682 = @func_591() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %683 = cast(%var_3193, dtype="bool") /* ty=bool */;
  %684 = cast(%var_3194, dtype="bool") /* ty=Tensor[(1, 10, 1), bool] */;
  %685 = logical_and(%683, %684) /* ty=Tensor[(1, 10, 1), bool] */;
  %686 = cast(%685, dtype="float64") /* ty=Tensor[(1, 10, 1), float64] */;
  %687 = cos(%686) /* ty=Tensor[(1, 10, 1), float64] */;
  %688 = cast(%var_3193, dtype="bool") /* ty=bool */;
  %689 = cast(%685, dtype="bool") /* ty=Tensor[(1, 10, 1), bool] */;
  %690 = not_equal(%688, %689) /* ty=Tensor[(1, 10, 1), bool] */;
  %691 = cast(%690, dtype="uint32") /* ty=Tensor[(1, 10, 1), uint32] */;
  %692 = shape_of(%687, dtype="int32") /* ty=Tensor[(3), int32] */;
  %693 = cast(%687, dtype="uint32") /* ty=Tensor[(1, 10, 1), uint32] */;
  %694 = dyn.reshape(%691, %692, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %695 = add(%693, %694) /* ty=Tensor[(?, 10, ?), uint32] */;
  %696 = cast(%690, dtype="float64") /* ty=Tensor[(1, 10, 1), float64] */;
  %697 = shape_of(%695, dtype="int32") /* ty=Tensor[(3), int32] */;
  %698 = cast(%695, dtype="float64") /* ty=Tensor[(?, 10, ?), float64] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %700 = %681.1;
  %701 = %682.1;
  %702 = divide(%698, %699) /* ty=Tensor[(?, 10, ?), float64] */;
  (%700, %701, %702)
}

def @func_4042() -> (Tensor[(12, 4, 8), bool],) {
  %711 = fn () -> (Tensor[(12, 4, 8), bool],) {
    %703 = @func_3954() /* ty=Tensor[(12, 4, 8), float64] */;
    %704 = @func_2428() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
    %705 = %704.1;
    %706 = cast(%705, dtype="bool") /* ty=Tensor[(12, 4, 8), bool] */;
    %707 = shape_of(%703, dtype="int32") /* ty=Tensor[(3), int32] */;
    %708 = cast(%703, dtype="bool") /* ty=Tensor[(12, 4, 8), bool] */;
    %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %710 = less_equal(%708, %709) /* ty=Tensor[(12, 4, 8), bool] */;
    (%710,)
  };
  %711() /* ty=(Tensor[(12, 4, 8), bool],) */
}

def @func_3487() -> (Tensor[(12, 4, 8), float64],) {
  %713 = fn () -> (Tensor[(12, 4, 8), float64],) {
    %712 = @func_2306() /* ty=Tensor[(12, 4, 8), float64] */;
    (%712,)
  };
  %713() /* ty=(Tensor[(12, 4, 8), float64],) */
}

def @func_2681() -> (Tensor[(12, 4, 8), float64],) {
  %716 = fn () -> (Tensor[(12, 4, 8), float64],) {
    %714 = @func_927() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
    %715 = %714.0;
    (%715,)
  };
  %716() /* ty=(Tensor[(12, 4, 8), float64],) */
}

def @func_4694() -> Tensor[(12, 4, 8), float64] {
  %717 = @func_374() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */;
  %717.0
}

def @func_10809() -> (Tensor[(384), bool],) {
  %718 = @func_4354() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(384), bool], Tensor[(12, 4, 8), float64]) */;
  %719 = %718.1;
  (%719,)
}

def @func_7405() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) {
  %720 = @func_374() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */;
  %721 = @func_1823() /* ty=Tensor[(12, 4, 8), float64] */;
  %722 = %720.0;
  (%721, %722)
}

def @func_5997(%var_5989: Tensor[(105, 1), float32]) -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(105, 1), float64]) {
  %723 = @func_4869() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %724 = cast(%var_5989, dtype="float32") /* ty=Tensor[(105, 1), float32] */;
  %725 = reshape(%724, newshape=[7, 15]) /* ty=Tensor[(7, 15), float32] */;
  %726 = @func_759(%725) /* ty=(Tensor[(7, 15), float32], Tensor[(12, 4, 8), float32]) */;
  %727 = cast(%var_5989, dtype="float64") /* ty=Tensor[(105, 1), float64] */;
  %728 = %723.0;
  %729 = %726.1;
  %730 = @func_344() /* ty=Tensor[(12, 4, 8), float64] */;
  %731 = tan(%727) /* ty=Tensor[(105, 1), float64] */;
  (%728, %729, %730, %731)
}

def @func_3536() -> Tensor[(12, 4, 8), float64] {
  %732 = fn () -> Tensor[(12, 4, 8), float64] {
    @func_1053() /* ty=Tensor[(12, 4, 8), float64] */
  };
  %732() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_3616() -> (Tensor[(12, 4, 8), float64],) {
  %735 = fn () -> (Tensor[(12, 4, 8), float64],) {
    %733 = @func_2235() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
    %734 = %733.1;
    (%734,)
  };
  %735() /* ty=(Tensor[(12, 4, 8), float64],) */
}

def @func_1823() -> Tensor[(12, 4, 8), float64] {
  %736 = @func_616() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %736.0
}

def @func_8093() -> (Tensor[(12, 4, 8), float64], Tensor[(9, 14, 5), float32], Tensor[(126), float32], Tensor[(630), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(384), float64], Tensor[(384), bool], Tensor[(12, 4, 8), float32]) {
  @func_8091() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(9, 14, 5), float32], Tensor[(126), float32], Tensor[(630), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(384), float64], Tensor[(384), bool], Tensor[(12, 4, 8), float32]) */
}

def @func_829() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) {
  @func_827() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */
}

def @func_10616(%var_10614: int16) -> (Tensor[(1, 2, 1), int16], Tensor[(12, 4, 8), float32], Tensor[(1, 2, 1), float64], Tensor[(12, 4, 8), float64], Tensor[(5, 8, ?), uint64], Tensor[(40), uint64]) {
  @func_10613(%var_10614) /* ty=(Tensor[(1, 2, 1), int16], Tensor[(12, 4, 8), float32], Tensor[(1, 2, 1), float64], Tensor[(12, 4, 8), float64], Tensor[(5, 8, ?), uint64], Tensor[(40), uint64]) */
}

def @func_2308() -> Tensor[(12, 4, 8), float64] {
  @func_2306() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_5132() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  @func_5130() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */
}

def @func_7263() -> (Tensor[(3, 8, 3), bool], Tensor[(12, 4, 8), float32]) {
  %737 = @func_5529() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(3, 8, 3), bool], Tensor[(1, 72), float32]) */;
  %738 = @func_4528() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %739 = %737.1;
  %740 = %738.3;
  (%739, %740)
}

def @func_2619(%var_2618: Tensor[(3, 8, 3), float32]) -> (Tensor[(3, 8, 3), bool], Tensor[(12, 4, 8), float64]) {
  %745 = fn (%var_2586: Tensor[(3, 8, 3), float32]) -> (Tensor[(3, 8, 3), bool], Tensor[(12, 4, 8), float64]) {
    %741 = cast(1.34041f /* ty=float32 */, dtype="bool") /* ty=bool */;
    %742 = cast(%var_2586, dtype="bool") /* ty=Tensor[(3, 8, 3), bool] */;
    %743 = equal(%741, %742) /* ty=Tensor[(3, 8, 3), bool] */;
    %744 = @func_2306() /* ty=Tensor[(12, 4, 8), float64] */;
    (%743, %744)
  };
  %745(%var_2618) /* ty=(Tensor[(3, 8, 3), bool], Tensor[(12, 4, 8), float64]) */
}

def @func_8561() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) {
  @func_8559() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */
}

def @func_4883() -> Tensor[(12, 4, 8), float64] {
  @func_344() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_1106() -> Tensor[(12, 4, 8), float64] {
  %749 = fn () -> Tensor[(12, 4, 8), float64] {
    %746 = @func_616() /* ty=(Tensor[(12, 4, 8), float64],) */;
    %747 = %746.0;
    %748 = cast(%747, dtype="float64") /* ty=Tensor[(12, 4, 8), float64] */;
    atanh(%748) /* ty=Tensor[(12, 4, 8), float64] */
  };
  %749() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_10517() -> Tensor[(12, 4, 8), float32] {
  %750 = fn () -> Tensor[(12, 4, 8), float32] {
    @func_6592() /* ty=Tensor[(12, 4, 8), float32] */
  };
  %750() /* ty=Tensor[(12, 4, 8), float32] */
}

def @func_5225(%var_5216: Tensor[(105), float32]) -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(105), float32], Tensor[(12, 4, 8), float32]) {
  %751 = @func_2235() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %752 = cast(%var_5216, dtype="float32") /* ty=Tensor[(105), float32] */;
  %753 = reshape(%752, newshape=[7, 15]) /* ty=Tensor[(7, 15), float32] */;
  %754 = @func_759(%753) /* ty=(Tensor[(7, 15), float32], Tensor[(12, 4, 8), float32]) */;
  %755 = %751.1;
  %756 = %754.1;
  %757 = @func_471() /* ty=Tensor[(12, 4, 8), float32] */;
  (%755, %756, %var_5216, %757)
}

def @func_2857() -> Tensor[(12, 4, 8), float32] {
  @func_2855() /* ty=Tensor[(12, 4, 8), float32] */
}

def @func_6436() -> (Tensor[(384), bool], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) {
  %762 = fn () -> (Tensor[(384), bool], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) {
    %758 = @func_567() /* ty=(Tensor[(12, 4, 8), float32],) */;
    %759 = @func_3980() /* ty=Tensor[(384), bool] */;
    %760 = @func_2478() /* ty=Tensor[(12, 4, 8), float64] */;
    %761 = %758.0;
    (%759, %760, %761)
  };
  %762() /* ty=(Tensor[(384), bool], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */
}

def @func_10687(%var_10686: Tensor[(15, 3, 12), float32]) -> (Tensor[(15, 3, 12), float32], Tensor[(2, 10, 3), bool], Tensor[(60), bool], Tensor[(12, 4, 8), float64]) {
  %770 = fn (%var_10663: Tensor[(15, 3, 12), float32]) -> (Tensor[(15, 3, 12), float32], Tensor[(2, 10, 3), bool], Tensor[(60), bool], Tensor[(12, 4, 8), float64]) {
    %763 = cast(%var_10663, dtype="float32") /* ty=Tensor[(15, 3, 12), float32] */;
    %764 = cast(meta[relay.Constant][31] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
    %765 = reshape(%764, newshape=[2, 10, 3]) /* ty=Tensor[(2, 10, 3), bool] */;
    %766 = @func_5364() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */;
    %767 = exp(%763) /* ty=Tensor[(15, 3, 12), float32] */;
    %768 = @func_10397(%765) /* ty=Tensor[(2, 10, 3), bool] */;
    %769 = %766.1;
    (%767, %768, meta[relay.Constant][31] /* ty=Tensor[(60), bool] */, %769)
  };
  %770(%var_10686) /* ty=(Tensor[(15, 3, 12), float32], Tensor[(2, 10, 3), bool], Tensor[(60), bool], Tensor[(12, 4, 8), float64]) */
}

def @func_8524() -> (Tensor[(12, 4, 8), int8], Tensor[(12, 4, 8), float64], Tensor[(1, 72), float64]) {
  @func_8522() /* ty=(Tensor[(12, 4, 8), int8], Tensor[(12, 4, 8), float64], Tensor[(1, 72), float64]) */
}

def @func_1825() -> Tensor[(12, 4, 8), float64] {
  @func_1823() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_9055() -> Tensor[(12, 4, 8), float64] {
  @func_9053() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_6171(%var_6169: Tensor[(9, 14, 1), float32], %var_6170: Tensor[(9, 14, 5), float32]) -> (Tensor[(9, 14, 5), float32], Tensor[(9, 14, 1), float32]) {
  @func_6167(%var_6169, %var_6170) /* ty=(Tensor[(9, 14, 5), float32], Tensor[(9, 14, 1), float32]) */
}

def @func_8559() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) {
  %771 = @func_591() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %772 = @func_3954() /* ty=Tensor[(12, 4, 8), float64] */;
  %773 = @func_5675() /* ty=Tensor[(12, 4, 8), float64] */;
  %774 = %771.0;
  (%772, %773, %774)
}

def @func_1006(%var_984: Tensor[(12, 4, 8), float64]) -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), int32]) {
  %775 = @func_616() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %776 = @func_591() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %777 = @func_311() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %778 = %777.0;
  %779 = cast(%var_984, dtype="int32") /* ty=Tensor[(12, 4, 8), int32] */;
  %780 = shape_of(%778, dtype="int32") /* ty=Tensor[(3), int32] */;
  %781 = cast(%778, dtype="int32") /* ty=Tensor[(12, 4, 8), int32] */;
  %782 = dyn.reshape(%779, %780, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %783 = %775.0;
  %784 = %776.1;
  %785 = right_shift(%781, %782) /* ty=Tensor[(12, 4, 8), int32] */;
  (%783, %784, %785)
}

def @func_4183() -> Tensor[(12, 4, 8), float32] {
  @func_3123() /* ty=Tensor[(12, 4, 8), float32] */
}

def @func_9928() -> (Tensor[(12, 4, 8), float32],) {
  %788 = fn () -> (Tensor[(12, 4, 8), float32],) {
    %786 = @func_5130() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
    %787 = %786.5;
    (%787,)
  };
  %788() /* ty=(Tensor[(12, 4, 8), float32],) */
}

def @func_5010() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), int8]) {
  %795 = fn () -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), int8]) {
    %789 = @func_2235() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
    %790 = %789.1;
    %791 = cast(%790, dtype="bool") /* ty=Tensor[(12, 4, 8), bool] */;
    %792 = reshape(%791, newshape=[12, 4, 8]) /* ty=Tensor[(12, 4, 8), bool] */;
    %793 = @func_1199(%792) /* ty=(Tensor[(12, 4, 8), int8],) */;
    %794 = %793.0;
    (%790, %794)
  };
  %795() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), int8]) */
}

def @func_10432(%var_10431: Tensor[(8, 11, 13), uint64]) -> (Tensor[(8, 11, 13), uint64],) {
  %801 = fn (%var_10424: Tensor[(8, 11, 13), uint64]) -> (Tensor[(8, 11, 13), uint64],) {
    %796 = cast(meta[relay.Constant][32] /* ty=Tensor[(8, 11, 13), uint64] */, dtype="uint64") /* ty=Tensor[(8, 11, 13), uint64] */;
    %797 = shape_of(%var_10424, dtype="int32") /* ty=Tensor[(3), int32] */;
    %798 = cast(%var_10424, dtype="uint64") /* ty=Tensor[(8, 11, 13), uint64] */;
    %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %800 = bitwise_or(%798, %799) /* ty=Tensor[(8, 11, 13), uint64] */;
    (%800,)
  };
  %801(%var_10431) /* ty=(Tensor[(8, 11, 13), uint64],) */
}

def @func_567() -> (Tensor[(12, 4, 8), float32],) {
  %802 = @func_471() /* ty=Tensor[(12, 4, 8), float32] */;
  (%802,)
}

def @func_10397(%var_10374: Tensor[(2, 10, 3), bool]) -> Tensor[(2, 10, 3), bool] {
  %803 = cast(meta[relay.Constant][33] /* ty=Tensor[(2, 10, 3), bool] */, dtype="bool") /* ty=Tensor[(2, 10, 3), bool] */;
  %804 = shape_of(%var_10374, dtype="int32") /* ty=Tensor[(3), int32] */;
  %805 = cast(%var_10374, dtype="bool") /* ty=Tensor[(2, 10, 3), bool] */;
  %806 = dyn.reshape(%803, %804, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%805, %806) /* ty=Tensor[(2, 10, 3), bool] */
}

def @func_3955() -> Tensor[(12, 4, 8), float64] {
  %808 = fn () -> Tensor[(12, 4, 8), float64] {
    %807 = @func_591() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
    %807.0
  };
  %808() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_2016() -> Tensor[(12, 4, 8), float64] {
  @func_2014() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_9256() -> (Tensor[(12, 4, 8), float32],) {
  %810 = fn () -> (Tensor[(12, 4, 8), float32],) {
    %809 = @func_7587() /* ty=Tensor[(12, 4, 8), float32] */;
    (%809,)
  };
  %810() /* ty=(Tensor[(12, 4, 8), float32],) */
}

def @func_6593() -> Tensor[(12, 4, 8), float32] {
  %812 = fn () -> Tensor[(12, 4, 8), float32] {
    %811 = @func_4835() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), uint8], Tensor[(12, 10, 10), float32], Tensor[(384), bool], Tensor[(12, 4, 8), bool], Tensor[(12, 10, 10), float32]) */;
    %811.0
  };
  %812() /* ty=Tensor[(12, 4, 8), float32] */
}

def @func_5321(%var_5319: Tensor[(224), float64]) -> (Tensor[(15, 6, 16), float64], Tensor[(3, 9, 2), int64], Tensor[(4, 14, 4), float64], Tensor[(224), float64]) {
  @func_5318(%var_5319) /* ty=(Tensor[(15, 6, 16), float64], Tensor[(3, 9, 2), int64], Tensor[(4, 14, 4), float64], Tensor[(224), float64]) */
}

def @func_5318(%var_5306: Tensor[(224), float64]) -> (Tensor[(15, 6, 16), float64], Tensor[(3, 9, 2), int64], Tensor[(4, 14, 4), float64], Tensor[(224), float64]) {
  %813 = cast(meta[relay.Constant][34] /* ty=Tensor[(15, 6, 16), float64] */, dtype="float64") /* ty=Tensor[(15, 6, 16), float64] */;
  %814 = @func_1603() /* ty=(Tensor[(3, 9, 2), int64], Tensor[(12, 4, 8), int8], Tensor[(384), bool]) */;
  %815 = cast(%var_5306, dtype="float64") /* ty=Tensor[(224), float64] */;
  %816 = reshape(%815, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), float64] */;
  %817 = log2(%813) /* ty=Tensor[(15, 6, 16), float64] */;
  %818 = %814.0;
  %819 = @func_3178(%816) /* ty=Tensor[(4, 14, 4), float64] */;
  (%817, %818, %819, %var_5306)
}

def @func_10836() -> (Tensor[(15, 13, 9), float64],) {
  @func_10834() /* ty=(Tensor[(15, 13, 9), float64],) */
}

def @func_6378() -> (Tensor[(384), float64],) {
  %822 = fn () -> (Tensor[(384), float64],) {
    %820 = @func_6309() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(384), float64]) */;
    %821 = %820.1;
    (%821,)
  };
  %822() /* ty=(Tensor[(384), float64],) */
}

def @func_9487() -> (Tensor[(384), bool],) {
  %823 = @func_3980() /* ty=Tensor[(384), bool] */;
  (%823,)
}

def @func_10197() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) {
  %824 = @func_4317() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %825 = %824.1;
  %826 = @func_4883() /* ty=Tensor[(12, 4, 8), float64] */;
  (%825, %826)
}

def @func_5152() -> (Tensor[(12, 4, 8), float64],) {
  %828 = fn () -> (Tensor[(12, 4, 8), float64],) {
    %827 = @func_4962() /* ty=Tensor[(12, 4, 8), float64] */;
    (%827,)
  };
  %828() /* ty=(Tensor[(12, 4, 8), float64],) */
}

def @func_10779() -> (Tensor[(384), float32], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) {
  %829 = @func_7731() /* ty=Tensor[(384), bool] */;
  %830 = cast(%829, dtype="float32") /* ty=Tensor[(384), float32] */;
  %831 = @func_2832() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %832 = log(%830) /* ty=Tensor[(384), float32] */;
  %833 = @func_471() /* ty=Tensor[(12, 4, 8), float32] */;
  %834 = @func_10473() /* ty=Tensor[(12, 4, 8), float64] */;
  %835 = %831.0;
  (%832, %833, %834, %835)
}

def @func_375() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) {
  %838 = fn () -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) {
    %836 = @func_344() /* ty=Tensor[(12, 4, 8), float64] */;
    %837 = @func_344() /* ty=Tensor[(12, 4, 8), float64] */;
    (%836, %837)
  };
  %838() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */
}

def @func_10244(%var_10242: Tensor[(10, 13, 7), float32], %var_10243: Tensor[(10, 13, 7), float32]) -> (Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32]) {
  @func_10240(%var_10242, %var_10243) /* ty=(Tensor[(10, 13, 7), bool], Tensor[(10, 13, 7), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32]) */
}

def @func_1664() -> (Tensor[(12, 4, 8), float32],) {
  %841 = fn () -> (Tensor[(12, 4, 8), float32],) {
    %839 = @func_591() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
    %840 = %839.1;
    (%840,)
  };
  %841() /* ty=(Tensor[(12, 4, 8), float32],) */
}

def @func_7905() -> (Tensor[(12, 4, 8), int8], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) {
  %842 = @func_1603() /* ty=(Tensor[(3, 9, 2), int64], Tensor[(12, 4, 8), int8], Tensor[(384), bool]) */;
  %843 = @func_3615() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %844 = @func_6856() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32]) */;
  %845 = %842.1;
  %846 = @func_3535() /* ty=Tensor[(12, 4, 8), float64] */;
  %847 = %843.0;
  %848 = @func_344() /* ty=Tensor[(12, 4, 8), float64] */;
  %849 = %844.0;
  (%845, %846, %847, %848, %849)
}

def @func_10071() -> Tensor[(12, 4, 8), float64] {
  %850 = @func_4317() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %850.1
}

def @func_3377() -> (Tensor[(12, 4, 8), float32], Tensor[(15, 13, 9), int64], Tensor[(1755), int64], Tensor[(12, 4, 3), bool]) {
  %864 = fn () -> (Tensor[(12, 4, 8), float32], Tensor[(15, 13, 9), int64], Tensor[(1755), int64], Tensor[(12, 4, 3), bool]) {
    %851 = cast(meta[relay.Constant][35] /* ty=Tensor[(1755), int64] */, dtype="int64") /* ty=Tensor[(1755), int64] */;
    %852 = reshape(%851, newshape=[15, 13, 9]) /* ty=Tensor[(15, 13, 9), int64] */;
    %853 = @func_1894() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 3), bool], Tensor[(144), uint16]) */;
    %854 = %853.1;
    %855 = cast(%854, dtype="float64") /* ty=Tensor[(12, 4, 3), float64] */;
    %856 = sin(%855) /* ty=Tensor[(12, 4, 3), float64] */;
    %857 = cast(%854, dtype="bool") /* ty=Tensor[(12, 4, 3), bool] */;
    %858 = shape_of(%856, dtype="int32") /* ty=Tensor[(3), int32] */;
    %859 = cast(%856, dtype="bool") /* ty=Tensor[(12, 4, 3), bool] */;
    %860 = dyn.reshape(%857, %858, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %861 = @func_3123() /* ty=Tensor[(12, 4, 8), float32] */;
    %862 = @func_1289(%852) /* ty=Tensor[(15, 13, 9), int64] */;
    %863 = logical_and(%859, %860) /* ty=Tensor[(12, 4, 3), bool] */;
    (%861, %862, meta[relay.Constant][35] /* ty=Tensor[(1755), int64] */, %863)
  };
  %864() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(15, 13, 9), int64], Tensor[(1755), int64], Tensor[(12, 4, 3), bool]) */
}

def @func_3678(%var_3676: Tensor[(78), float64]) -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(?, 468), bool], Tensor[(78), float64], Tensor[(12, 4, 8), float64], Tensor[(36, 2), float32], Tensor[(12, 4, 8), float32]) {
  @func_3675(%var_3676) /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(?, 468), bool], Tensor[(78), float64], Tensor[(12, 4, 8), float64], Tensor[(36, 2), float32], Tensor[(12, 4, 8), float32]) */
}

def @func_4392(%var_4391: Tensor[(78, 1), float64]) -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(78, 1), float64]) {
  %871 = fn (%var_4386: Tensor[(78, 1), float64]) -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(78, 1), float64]) {
    %865 = @func_3615() /* ty=(Tensor[(12, 4, 8), float64],) */;
    %866 = cast(%var_4386, dtype="float64") /* ty=Tensor[(78, 1), float64] */;
    %867 = reshape(%866, newshape=[78]) /* ty=Tensor[(78), float64] */;
    %868 = @func_2764(%867) /* ty=(Tensor[(12, 4, 8), float64], Tensor[(78), float64], Tensor[(12, 4, 8), float64], Tensor[(?, 468), bool]) */;
    %869 = %865.0;
    %870 = %868.2;
    (%869, %870, %var_4386)
  };
  %871(%var_4391) /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(78, 1), float64]) */
}

def @func_4963() -> Tensor[(12, 4, 8), float64] {
  %873 = fn () -> Tensor[(12, 4, 8), float64] {
    %872 = @func_591() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
    %872.0
  };
  %873() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_4870() -> (Tensor[(12, 4, 8), float64],) {
  %876 = fn () -> (Tensor[(12, 4, 8), float64],) {
    %874 = @func_2680() /* ty=(Tensor[(12, 4, 8), float64],) */;
    %875 = %874.0;
    (%875,)
  };
  %876() /* ty=(Tensor[(12, 4, 8), float64],) */
}

def @func_3180(%var_3179: Tensor[(4, 14, 4), float64]) -> Tensor[(4, 14, 4), float64] {
  %878 = fn (%var_3169: Tensor[(4, 14, 4), float64]) -> Tensor[(4, 14, 4), float64] {
    %877 = cast(%var_3169, dtype="float64") /* ty=Tensor[(4, 14, 4), float64] */;
    acos(%877) /* ty=Tensor[(4, 14, 4), float64] */
  };
  %878(%var_3179) /* ty=Tensor[(4, 14, 4), float64] */
}

def @func_5364() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) {
  %879 = @func_1126() /* ty=Tensor[(12, 4, 8), float64] */;
  %880 = @func_2478() /* ty=Tensor[(12, 4, 8), float64] */;
  (%879, %880)
}

def @func_9580() -> (Tensor[(12, 4, 8), float64], Tensor[(3, 8, 3), bool]) {
  @func_9578() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(3, 8, 3), bool]) */
}

def @func_8209(%var_8199: Tensor[(1, 78), float64]) -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32], Tensor[(1, 78), float64], Tensor[(12, 10, 10), uint16]) {
  %881 = @func_567() /* ty=(Tensor[(12, 4, 8), float32],) */;
  %882 = cast(%var_8199, dtype="float64") /* ty=Tensor[(1, 78), float64] */;
  %883 = reshape(%882, newshape=[78]) /* ty=Tensor[(78), float64] */;
  %884 = @func_3675(%883) /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(?, 468), bool], Tensor[(78), float64], Tensor[(12, 4, 8), float64], Tensor[(36, 2), float32], Tensor[(12, 4, 8), float32]) */;
  %885 = @func_7642() /* ty=(Tensor[(12, 10, 10), uint16], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), int8], Tensor[(12, 4, 8), float64]) */;
  %886 = %881.0;
  %887 = %884.7;
  %888 = %885.0;
  (%886, %887, %var_8199, %888)
}

def @func_6311() -> (Tensor[(12, 4, 8), float32], Tensor[(384), float64]) {
  @func_6309() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(384), float64]) */
}

def @func_7733() -> Tensor[(384), bool] {
  @func_7731() /* ty=Tensor[(384), bool] */
}

def @func_1605() -> (Tensor[(3, 9, 2), int64], Tensor[(12, 4, 8), int8], Tensor[(384), bool]) {
  @func_1603() /* ty=(Tensor[(3, 9, 2), int64], Tensor[(12, 4, 8), int8], Tensor[(384), bool]) */
}

def @func_7798() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(13, 6), float64], Tensor[(14, 8, 9), float32], Tensor[(12, 4, 8), float64]) {
  %889 = @func_420() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %890 = cast(meta[relay.Constant][36] /* ty=Tensor[(13, 6), float64] */, dtype="float64") /* ty=Tensor[(13, 6), float64] */;
  %891 = reshape(%890, newshape=[78]) /* ty=Tensor[(78), float64] */;
  %892 = @func_3675(%891) /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(?, 468), bool], Tensor[(78), float64], Tensor[(12, 4, 8), float64], Tensor[(36, 2), float32], Tensor[(12, 4, 8), float32]) */;
  %893 = %889.0;
  %894 = %892.1;
  %895 = @func_4629() /* ty=Tensor[(14, 8, 9), float32] */;
  %896 = @func_3188() /* ty=Tensor[(12, 4, 8), float64] */;
  (%893, %894, meta[relay.Constant][36] /* ty=Tensor[(13, 6), float64] */, %895, %896)
}

def @func_2832() -> (Tensor[(12, 4, 8), float64],) {
  %897 = @func_2680() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %898 = %897.0;
  (%898,)
}

def @func_5228(%var_5226: Tensor[(105), float32]) -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(105), float32], Tensor[(12, 4, 8), float32]) {
  @func_5225(%var_5226) /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(105), float32], Tensor[(12, 4, 8), float32]) */
}

def @func_7265() -> (Tensor[(3, 8, 3), bool], Tensor[(12, 4, 8), float32]) {
  @func_7263() /* ty=(Tensor[(3, 8, 3), bool], Tensor[(12, 4, 8), float32]) */
}

def @func_4623() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  %903 = fn () -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
    %899 = @func_1261() /* ty=(Tensor[(12, 4, 8), float32],) */;
    %900 = @func_3305() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), uint8], Tensor[(12, 4, 8), float64]) */;
    %901 = %899.0;
    %902 = %900.2;
    (%901, %902)
  };
  %903() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */
}

def @func_927() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  %904 = @func_827() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %905 = %904.1;
  %906 = cast(%905, dtype="float32") /* ty=Tensor[(12, 4, 8), float32] */;
  %907 = log(%906) /* ty=Tensor[(12, 4, 8), float32] */;
  %908 = cast(%905, dtype="float64") /* ty=Tensor[(12, 4, 8), float64] */;
  %909 = shape_of(%907, dtype="int32") /* ty=Tensor[(3), int32] */;
  %910 = cast(%907, dtype="float64") /* ty=Tensor[(12, 4, 8), float64] */;
  %911 = dyn.reshape(%908, %909, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %912 = divide(%910, %911) /* ty=Tensor[(12, 4, 8), float64] */;
  %913 = cast(%912, dtype="float32") /* ty=Tensor[(12, 4, 8), float32] */;
  %914 = shape_of(%907, dtype="int32") /* ty=Tensor[(3), int32] */;
  %915 = cast(%907, dtype="float32") /* ty=Tensor[(12, 4, 8), float32] */;
  %916 = dyn.reshape(%913, %914, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %917 = @func_374() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */;
  %918 = @func_344() /* ty=Tensor[(12, 4, 8), float64] */;
  %919 = power(%915, %916) /* ty=Tensor[(12, 4, 8), float32] */;
  %920 = %917.0;
  (%918, %919, %920)
}

def @func_1729() -> (Tensor[(12, 4, 8), float32],) {
  %921 = @func_567() /* ty=(Tensor[(12, 4, 8), float32],) */;
  %922 = %921.0;
  (%922,)
}

def @func_2306() -> Tensor[(12, 4, 8), float64] {
  @func_1823() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_5366() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) {
  @func_5364() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */
}

def @func_6609() -> (Tensor[(384), float64],) {
  %924 = fn () -> (Tensor[(384), float64],) {
    %923 = @func_4995() /* ty=Tensor[(384), float64] */;
    (%923,)
  };
  %924() /* ty=(Tensor[(384), float64],) */
}

def @func_7343() -> (Tensor[(12, 4, 8), float64],) {
  %927 = fn () -> (Tensor[(12, 4, 8), float64],) {
    %925 = @func_927() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
    %926 = %925.2;
    (%926,)
  };
  %927() /* ty=(Tensor[(12, 4, 8), float64],) */
}

def @func_761(%var_760: Tensor[(7, 15), float32]) -> (Tensor[(7, 15), float32], Tensor[(12, 4, 8), float32]) {
  %932 = fn (%var_740: Tensor[(7, 15), float32]) -> (Tensor[(7, 15), float32], Tensor[(12, 4, 8), float32]) {
    %928 = cast(%var_740, dtype="float32") /* ty=Tensor[(7, 15), float32] */;
    %929 = @func_311() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
    %930 = log10(%928) /* ty=Tensor[(7, 15), float32] */;
    %931 = %929.1;
    (%930, %931)
  };
  %932(%var_760) /* ty=(Tensor[(7, 15), float32], Tensor[(12, 4, 8), float32]) */
}

def @func_8753(%var_8752: Tensor[(2, 5, 16), float64]) -> (Tensor[(2, 5, 16), float64], Tensor[(12, 4, 8), float64]) {
  %937 = fn (%var_8727: Tensor[(2, 5, 16), float64]) -> (Tensor[(2, 5, 16), float64], Tensor[(12, 4, 8), float64]) {
    %933 = cast(%var_8727, dtype="float64") /* ty=Tensor[(2, 5, 16), float64] */;
    %934 = @func_5899() /* ty=(Tensor[(12, 4, 8), float64],) */;
    %935 = sinh(%933) /* ty=Tensor[(2, 5, 16), float64] */;
    %936 = %934.0;
    (%935, %936)
  };
  %937(%var_8752) /* ty=(Tensor[(2, 5, 16), float64], Tensor[(12, 4, 8), float64]) */
}

def @func_569() -> (Tensor[(12, 4, 8), float32],) {
  @func_567() /* ty=(Tensor[(12, 4, 8), float32],) */
}

def @func_1202(%var_1200: Tensor[(12, 4, 8), bool]) -> (Tensor[(12, 4, 8), int8],) {
  @func_1199(%var_1200) /* ty=(Tensor[(12, 4, 8), int8],) */
}

def @func_10400(%var_10398: Tensor[(2, 10, 3), bool]) -> Tensor[(2, 10, 3), bool] {
  @func_10397(%var_10398) /* ty=Tensor[(2, 10, 3), bool] */
}

def @func_7749() -> (Tensor[(12, 4, 8), float64],) {
  @func_7747() /* ty=(Tensor[(12, 4, 8), float64],) */
}

def @func_8308(%var_8307: Tensor[(8, 16, 12), float64]) -> (Tensor[(8, 16, 12), float64], Tensor[(8, 16, 12), float64], Tensor[(12, 4, 8), float64], Tensor[(1200), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) {
  %952 = fn (%var_8270: Tensor[(8, 16, 12), float64]) -> (Tensor[(8, 16, 12), float64], Tensor[(8, 16, 12), float64], Tensor[(12, 4, 8), float64], Tensor[(1200), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) {
    %938 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 16, 12), float64] */, dtype="float64") /* ty=Tensor[(8, 16, 12), float64] */;
    %939 = shape_of(%var_8270, dtype="int32") /* ty=Tensor[(3), int32] */;
    %940 = cast(%var_8270, dtype="float64") /* ty=Tensor[(8, 16, 12), float64] */;
    %941 = dyn.reshape(%938, %939, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %942 = cast(%var_8270, dtype="float64") /* ty=Tensor[(8, 16, 12), float64] */;
    %943 = cast(meta[relay.Constant][38] /* ty=Tensor[(1200), float32] */, dtype="float32") /* ty=Tensor[(1200), float32] */;
    %944 = reshape(%943, newshape=[12, 10, 10]) /* ty=Tensor[(12, 10, 10), float32] */;
    %945 = @func_2361(%944) /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 10, 10), bool]) */;
    %946 = @func_6530() /* ty=(Tensor[(12, 4, 8), float64],) */;
    %947 = multiply(%940, %941) /* ty=Tensor[(8, 16, 12), float64] */;
    %948 = atan(%942) /* ty=Tensor[(8, 16, 12), float64] */;
    %949 = %945.0;
    %950 = @func_6243() /* ty=Tensor[(12, 4, 8), float64] */;
    %951 = %946.0;
    (%947, %948, %949, meta[relay.Constant][38] /* ty=Tensor[(1200), float32] */, %950, %951)
  };
  %952(%var_8307) /* ty=(Tensor[(8, 16, 12), float64], Tensor[(8, 16, 12), float64], Tensor[(12, 4, 8), float64], Tensor[(1200), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */
}

def @func_10539(%var_10538: Tensor[(40), uint64]) -> (Tensor[(1755), float64], Tensor[(5, 8, ?), uint64], Tensor[(40), uint64], Tensor[(12, 4, 8), float64], Tensor[(384), float64], Tensor[(12, 4, 8), bool]) {
  %964 = fn (%var_10526: Tensor[(40), uint64]) -> (Tensor[(1755), float64], Tensor[(5, 8, ?), uint64], Tensor[(40), uint64], Tensor[(12, 4, 8), float64], Tensor[(384), float64], Tensor[(12, 4, 8), bool]) {
    %953 = cast(%var_10526, dtype="uint64") /* ty=Tensor[(40), uint64] */;
    %954 = cast(%var_10526, dtype="uint64") /* ty=Tensor[(40), uint64] */;
    %955 = reshape(%953, newshape=[5, 8, 1]) /* ty=Tensor[(5, 8, 1), uint64] */;
    %956 = reshape(%954, newshape=[5, 8, 1]) /* ty=Tensor[(5, 8, 1), uint64] */;
    %957 = @func_5009() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), int8]) */;
    %958 = @func_9189() /* ty=(Tensor[(12, 4, 8), bool],) */;
    %959 = @func_7376() /* ty=Tensor[(1755), float64] */;
    %960 = @func_4972(%955, %956) /* ty=Tensor[(5, 8, ?), uint64] */;
    %961 = %957.0;
    %962 = @func_8857() /* ty=Tensor[(384), float64] */;
    %963 = %958.0;
    (%959, %960, %var_10526, %961, %962, %963)
  };
  %964(%var_10538) /* ty=(Tensor[(1755), float64], Tensor[(5, 8, ?), uint64], Tensor[(40), uint64], Tensor[(12, 4, 8), float64], Tensor[(384), float64], Tensor[(12, 4, 8), bool]) */
}

def @func_7376() -> Tensor[(1755), float64] {
  %965 = @func_3376() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(15, 13, 9), int64], Tensor[(1755), int64], Tensor[(12, 4, 3), bool]) */;
  %966 = %965.2;
  %967 = cast(%966, dtype="float64") /* ty=Tensor[(1755), float64] */;
  sigmoid(%967) /* ty=Tensor[(1755), float64] */
}

def @func_4849(%var_4848: Tensor[(7, 2, 7), float64]) -> (Tensor[(7, 2, 7), float64],) {
  %970 = fn (%var_4844: Tensor[(7, 2, 7), float64]) -> (Tensor[(7, 2, 7), float64],) {
    %968 = cast(%var_4844, dtype="float64") /* ty=Tensor[(7, 2, 7), float64] */;
    %969 = asinh(%968) /* ty=Tensor[(7, 2, 7), float64] */;
    (%969,)
  };
  %970(%var_4848) /* ty=(Tensor[(7, 2, 7), float64],) */
}

def @func_1126() -> Tensor[(12, 4, 8), float64] {
  %971 = @func_311() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %971.0
}

def @func_929() -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  @func_927() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */
}

def @func_1603() -> (Tensor[(3, 9, 2), int64], Tensor[(12, 4, 8), int8], Tensor[(384), bool]) {
  %972 = cast(-6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %973 = cast(meta[relay.Constant][39] /* ty=Tensor[(3, 9, 2), int64] */, dtype="int64") /* ty=Tensor[(3, 9, 2), int64] */;
  %974 = cast(meta[relay.Constant][40] /* ty=Tensor[(384), bool] */, dtype="bool") /* ty=Tensor[(384), bool] */;
  %975 = reshape(%974, newshape=[12, 4, 8]) /* ty=Tensor[(12, 4, 8), bool] */;
  %976 = @func_1199(%975) /* ty=(Tensor[(12, 4, 8), int8],) */;
  %977 = maximum(%972, %973) /* ty=Tensor[(3, 9, 2), int64] */;
  %978 = %976.0;
  (%977, %978, meta[relay.Constant][40] /* ty=Tensor[(384), bool] */)
}

def @func_10781() -> (Tensor[(384), float32], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) {
  @func_10779() /* ty=(Tensor[(384), float32], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */
}

def @func_5763(%var_5748: uint16, %var_5749: Tensor[(13, 14, 13), uint16]) -> Tensor[(13, 14, 13), uint16] {
  %979 = cast(%var_5748, dtype="uint16") /* ty=uint16 */;
  %980 = cast(%var_5749, dtype="uint16") /* ty=Tensor[(13, 14, 13), uint16] */;
  add(%979, %980) /* ty=Tensor[(13, 14, 13), uint16] */
}

def @func_8828() -> (Tensor[(12, 4, 8), int8], Tensor[(12, 4, 8), float64], Tensor[(384), float64], Tensor[(12, 4, 8), bool], Tensor[(12, 4, 8), float32], Tensor[(105), float32]) {
  @func_8826() /* ty=(Tensor[(12, 4, 8), int8], Tensor[(12, 4, 8), float64], Tensor[(384), float64], Tensor[(12, 4, 8), bool], Tensor[(12, 4, 8), float32], Tensor[(105), float32]) */
}

def @func_6507() -> (Tensor[(12, 4, 8), float64],) {
  %981 = @func_420() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %982 = %981.0;
  (%982,)
}

def @func_9548() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  %986 = fn () -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
    %983 = @func_7747() /* ty=(Tensor[(12, 4, 8), float64],) */;
    %984 = @func_4183() /* ty=Tensor[(12, 4, 8), float32] */;
    %985 = %983.0;
    (%984, %985)
  };
  %986() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */
}

def @func_5901() -> (Tensor[(12, 4, 8), float64],) {
  @func_5899() /* ty=(Tensor[(12, 4, 8), float64],) */
}

def @func_8590(%var_8588: Tensor[(4, 14, 4), float64]) -> (Tensor[(4, 14, 4), uint64], Tensor[(4, 14, 4), bool]) {
  @func_8587(%var_8588) /* ty=(Tensor[(4, 14, 4), uint64], Tensor[(4, 14, 4), bool]) */
}

def @func_10800(%var_10791: uint16, %var_10792: Tensor[(9, 7, 1), uint16]) -> (Tensor[(9, 7, 1), uint16], Tensor[(12, 4, 8), float64]) {
  %987 = cast(%var_10791, dtype="uint16") /* ty=uint16 */;
  %988 = cast(%var_10792, dtype="uint16") /* ty=Tensor[(9, 7, 1), uint16] */;
  %989 = @func_6435() /* ty=(Tensor[(384), bool], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %990 = bitwise_or(%987, %988) /* ty=Tensor[(9, 7, 1), uint16] */;
  %991 = %989.1;
  (%990, %991)
}

def @func_1289(%var_1280: Tensor[(15, 13, 9), int64]) -> Tensor[(15, 13, 9), int64] {
  %992 = cast(-5 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %993 = cast(%var_1280, dtype="int64") /* ty=Tensor[(15, 13, 9), int64] */;
  bitwise_xor(%992, %993) /* ty=Tensor[(15, 13, 9), int64] */
}

def @func_6245() -> Tensor[(12, 4, 8), float64] {
  @func_6243() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_4948() -> (Tensor[(12, 4, 8), float64],) {
  %994 = @func_1823() /* ty=Tensor[(12, 4, 8), float64] */;
  (%994,)
}

def @func_5531() -> (Tensor[(12, 4, 8), float64], Tensor[(3, 8, 3), bool], Tensor[(1, 72), float32]) {
  @func_5529() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(3, 8, 3), bool], Tensor[(1, 72), float32]) */
}

def @func_4142(%var_4082: Tensor[(1755), int64]) -> (Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(78), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(15, 13, 9), int64], Tensor[(1755), int64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) {
  %995 = @func_3863() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
  %996 = cast(meta[relay.Constant][41] /* ty=Tensor[(78), float64] */, dtype="float64") /* ty=Tensor[(78), float64] */;
  %997 = reshape(%996, newshape=[78]) /* ty=Tensor[(78), float64] */;
  %998 = @func_3675(%997) /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(?, 468), bool], Tensor[(78), float64], Tensor[(12, 4, 8), float64], Tensor[(36, 2), float32], Tensor[(12, 4, 8), float32]) */;
  %999 = @func_3786() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %1000 = @func_2428() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64]) */;
  %1001 = cast(%var_4082, dtype="int64") /* ty=Tensor[(1755), int64] */;
  %1002 = reshape(%1001, newshape=[15, 13, 9]) /* ty=Tensor[(15, 13, 9), int64] */;
  %1003 = @func_2680() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %1004 = %995.1;
  %1005 = %998.0;
  %1006 = %999.0;
  %1007 = %1000.0;
  %1008 = @func_1289(%1002) /* ty=Tensor[(15, 13, 9), int64] */;
  %1009 = @func_2306() /* ty=Tensor[(12, 4, 8), float64] */;
  %1010 = @func_2855() /* ty=Tensor[(12, 4, 8), float32] */;
  %1011 = %1003.0;
  (%1004, %1005, meta[relay.Constant][41] /* ty=Tensor[(78), float64] */, %1006, %1007, %1008, %var_4082, %1009, %1010, %1011)
}

def @func_9813(%var_9775: Tensor[(224), float64]) -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(15, 13, 9), int64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(224), float64], Tensor[(208, 1), int8], Tensor[(12, 4, 8), float64]) {
  %1012 = @func_9255() /* ty=(Tensor[(12, 4, 8), float32],) */;
  %1013 = @func_5151() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %1014 = @func_6335() /* ty=(Tensor[(15, 13, 9), int64],) */;
  %1015 = cast(%var_9775, dtype="float64") /* ty=Tensor[(224), float64] */;
  %1016 = cast(meta[relay.Constant][42] /* ty=Tensor[(208, 1), int8] */, dtype="int8") /* ty=Tensor[(208, 1), int8] */;
  %1017 = reshape(%1015, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %1018 = reshape(%1016, newshape=[208]) /* ty=Tensor[(208), int8] */;
  %1019 = @func_7002(%1017, %1018) /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), int32], Tensor[(3, 9, 2), int64], Tensor[(224), float64], Tensor[(12, 4, 8), float32], Tensor[(208), int8], Tensor[(10), bool], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(78), float64]) */;
  %1020 = @func_6482() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %1021 = @func_3123() /* ty=Tensor[(12, 4, 8), float32] */;
  %1022 = %1012.0;
  %1023 = %1013.0;
  %1024 = %1014.0;
  %1025 = @func_5736() /* ty=Tensor[(12, 4, 8), float64] */;
  %1026 = %1019.7;
  %1027 = %1020.0;
  (%1021, %1022, %1023, %1024, %1025, %1026, %var_9775, meta[relay.Constant][42] /* ty=Tensor[(208, 1), int8] */, %1027)
}

def @func_3863() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) {
  %1028 = @func_1663() /* ty=(Tensor[(12, 4, 8), float32],) */;
  %1029 = @func_374() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float64]) */;
  %1030 = @func_3305() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), uint8], Tensor[(12, 4, 8), float64]) */;
  %1031 = @func_539() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 8), float32]) */;
  %1032 = %1028.0;
  %1033 = %1029.0;
  %1034 = %1030.0;
  %1035 = %1031.0;
  (%1032, %1033, %1034, %1035)
}

def @func_7759() -> Tensor[(12, 4, 8), float32] {
  %1036 = @func_6309() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(384), float64]) */;
  %1036.0
}

def @func_1895() -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 3), bool], Tensor[(144), uint16]) {
  %1045 = fn () -> (Tensor[(12, 4, 8), float32], Tensor[(12, 4, 3), bool], Tensor[(144), uint16]) {
    %1037 = @func_591() /* ty=(Tensor[(12, 4, 8), float64], Tensor[(12, 4, 8), float32]) */;
    %1038 = cast(meta[relay.Constant][43] /* ty=Tensor[(144), uint16] */, dtype="uint16") /* ty=Tensor[(144), uint16] */;
    %1039 = cast(meta[relay.Constant][43] /* ty=Tensor[(144), uint16] */, dtype="uint16") /* ty=Tensor[(144), uint16] */;
    %1040 = reshape(%1038, newshape=[12, 4, 3]) /* ty=Tensor[(12, 4, 3), uint16] */;
    %1041 = reshape(%1039, newshape=[12, 4, 3]) /* ty=Tensor[(12, 4, 3), uint16] */;
    %1042 = @func_714(%1040, %1041) /* ty=(Tensor[(12, 4, 3), bool], Tensor[(12, 4, 3), int64], Tensor[(12, 4, 3), float64]) */;
    %1043 = %1037.1;
    %1044 = %1042.0;
    (%1043, %1044, meta[relay.Constant][43] /* ty=Tensor[(144), uint16] */)
  };
  %1045() /* ty=(Tensor[(12, 4, 8), float32], Tensor[(12, 4, 3), bool], Tensor[(144), uint16]) */
}

def @func_4322() -> Tensor[(12, 4, 8), float64] {
  %1046 = @func_3786() /* ty=(Tensor[(12, 4, 8), float64],) */;
  %1046.0
}

def @func_7849() -> (Tensor[(12, 4, 8), float64],) {
  @func_7847() /* ty=(Tensor[(12, 4, 8), float64],) */
}

def @func_4885() -> Tensor[(12, 4, 8), float64] {
  @func_4883() /* ty=Tensor[(12, 4, 8), float64] */
}

def @func_2767(%var_2765: Tensor[(78), float64]) -> (Tensor[(12, 4, 8), float64], Tensor[(78), float64], Tensor[(12, 4, 8), float64], Tensor[(?, 468), bool]) {
  @func_2764(%var_2765) /* ty=(Tensor[(12, 4, 8), float64], Tensor[(78), float64], Tensor[(12, 4, 8), float64], Tensor[(?, 468), bool]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen404/build/output.py:3661: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen404/build/output.py", line 3666, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(1024) tvmgen_default_fused_cos_kernel0(float* __restrict__ T_cos, float* __restrict__ placeholder) {
  if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 1040) {
    T_cos[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] = __cosf(placeholder[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))]);
  }
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

