==========mod==========
#[version = "0.0.5"]
def @func_9744() -> Tensor[(70, 6), float64] {
  %0 = @func_5328() /* ty=(Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */;
  %1 = %0.0;
  %2 = cast(%1, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  sqrt(%2) /* ty=Tensor[(70, 6), float64] */
}

def @func_4617() -> (Tensor[(7, 5, 12), float64],) {
  %3 = @func_3651() /* ty=Tensor[(7, 5, 12), uint16] */;
  %4 = cast(%3, dtype="float64") /* ty=Tensor[(7, 5, 12), float64] */;
  %5 = asin(%4) /* ty=Tensor[(7, 5, 12), float64] */;
  (%5,)
}

def @func_10140() -> (Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), bool], Tensor[(5, 14, 16), bool]) {
  %6 = @func_4891() /* ty=(Tensor[(56, 20), int8], Tensor[(7, 5, 12), uint16]) */;
  %7 = @func_3216() /* ty=(Tensor[(7, 5, 12), uint16],) */;
  %8 = @func_1810() /* ty=(Tensor[(1120), uint64], Tensor[(5, 14, 16), bool], Tensor[(70, 6), bool]) */;
  %9 = %6.1;
  %10 = %7.0;
  %11 = @func_4336() /* ty=Tensor[(70, 6), bool] */;
  %12 = %8.1;
  (%9, %10, %11, %12)
}

def @func_5789() -> (Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float32], Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), uint16]) {
  %13 = @func_4109() /* ty=Tensor[(7, 5, 12), float32] */;
  %14 = cast(%13, dtype="uint16") /* ty=Tensor[(7, 5, 12), uint16] */;
  %15 = reshape(%14, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %16 = @func_4586(%15) /* ty=(Tensor[(7, 5, 12), float64], Tensor[(7, 5, 12), float32]) */;
  %17 = @func_3731() /* ty=(Tensor[(5, 14, 16), float32], Tensor[(1120), uint64]) */;
  %18 = @func_4857() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float32]) */;
  %19 = %16.1;
  %20 = %17.0;
  %21 = %18.0;
  (%13, %19, %20, %21)
}

def @func_2157() -> (Tensor[(7, 5, 12), float32],) {
  %22 = @func_1718() /* ty=(Tensor[(7, 5, 12), uint16],) */;
  %23 = %22.0;
  %24 = cast(%23, dtype="float32") /* ty=Tensor[(7, 5, 12), float32] */;
  %25 = asinh(%24) /* ty=Tensor[(7, 5, 12), float32] */;
  (%25,)
}

def @func_8670() -> (Tensor[(7, 5, 12), float32], Tensor[(70, 6), uint16], Tensor[(1120), uint64], Tensor[(7, 5, 12), float32]) {
  %26 = @func_5328() /* ty=(Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */;
  %27 = @func_3731() /* ty=(Tensor[(5, 14, 16), float32], Tensor[(1120), uint64]) */;
  %28 = %26.0;
  %29 = cast(%28, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %30 = reshape(%29, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %31 = @func_4586(%30) /* ty=(Tensor[(7, 5, 12), float64], Tensor[(7, 5, 12), float32]) */;
  %32 = @func_6342() /* ty=Tensor[(7, 5, 12), float32] */;
  %33 = %27.1;
  %34 = %31.1;
  (%32, %28, %33, %34)
}

def @func_7169() -> Tensor[(70, 6), uint16] {
  %35 = @func_1664() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %35.2
}

def @func_8736() -> (Tensor[(70, 6), bool], Tensor[(12, 7, ?), bool]) {
  %36 = @func_1912() /* ty=(Tensor[(70, 6), bool], Tensor[(1120), uint64], Tensor[(70, 6), float64], Tensor[(70, 6), float32]) */;
  %37 = %36.0;
  %38 = @func_5526() /* ty=Tensor[(12, 7, ?), bool] */;
  (%37, %38)
}

def @func_6987(%var_6972: Tensor[(13, 13, 7), float32]) -> (Tensor[(13, 13, 7), float32], Tensor[(7, 5, 12), uint16]) {
  %39 = cast(%var_6972, dtype="float32") /* ty=Tensor[(13, 13, 7), float32] */;
  %40 = rsqrt(%39) /* ty=Tensor[(13, 13, 7), float32] */;
  %41 = @func_3651() /* ty=Tensor[(7, 5, 12), uint16] */;
  (%40, %41)
}

def @func_10429(%var_10410: Tensor[(2, 560), bool]) -> (Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float32], Tensor[(2, 560), float64], Tensor[(70, 6), float64], Tensor[(7, 5, 12), float32]) {
  %42 = @func_9424() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float64], Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float64]) */;
  %43 = @func_4994() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(2, 560), bool]) */;
  %44 = %43.1;
  %45 = cast(%var_10410, dtype="float64") /* ty=Tensor[(2, 560), float64] */;
  %46 = shape_of(%44, dtype="int32") /* ty=Tensor[(2), int32] */;
  %47 = cast(%44, dtype="float64") /* ty=Tensor[(2, 560), float64] */;
  %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %49 = @func_6078() /* ty=(Tensor[(70, 6), float64],) */;
  %50 = %49.0;
  %51 = cast(%50, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %52 = @func_4857() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float32]) */;
  %53 = %42.3;
  %54 = @func_2728() /* ty=Tensor[(7, 5, 12), float32] */;
  %55 = @func_3041() /* ty=Tensor[(7, 5, 12), float32] */;
  %56 = mod(%47, %48) /* ty=Tensor[(2, 560), float64] */;
  %57 = acos(%51) /* ty=Tensor[(70, 6), float64] */;
  %58 = %52.1;
  (%53, %54, %55, %56, %57, %58)
}

def @func_5066() -> Tensor[(12, 7, ?), uint64] {
  %59 = @func_4296() /* ty=(Tensor[(12, 7, ?), uint64],) */;
  %59.0
}

def @func_2666() -> Tensor[(7, 5, 12), uint16] {
  %60 = @func_2033() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(420), float32], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64]) */;
  %60.0
}

def @func_11274() -> (Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16], Tensor[(7, 9, 10), uint8], Tensor[(630), int64], Tensor[(5, 14, 16), float32], Tensor[(70, 6), float32]) {
  %61 = @func_3906() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), float32]) */;
  %62 = @func_10140() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), bool], Tensor[(5, 14, 16), bool]) */;
  %63 = @func_7169() /* ty=Tensor[(70, 6), uint16] */;
  %64 = cast(%63, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %65 = cast(meta[relay.Constant][0] /* ty=Tensor[(630), int64] */, dtype="int64") /* ty=Tensor[(630), int64] */;
  %66 = reshape(%64, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), float64] */;
  %67 = reshape(%65, newshape=[10, 63]) /* ty=Tensor[(10, 63), int64] */;
  %68 = @func_6703(%66, %67) /* ty=(Tensor[(7, 5, 12), bool], Tensor[(7, 5, 12), uint16], Tensor[(7, 9, 10), uint8], Tensor[(10), int64], Tensor[(10, 63), int64]) */;
  %69 = cast(meta[relay.Constant][1] /* ty=Tensor[(1120), uint64] */, dtype="uint64") /* ty=Tensor[(1120), uint64] */;
  %70 = reshape(%69, newshape=[5, 14, 16]) /* ty=Tensor[(5, 14, 16), uint64] */;
  %71 = @func_1033(%70) /* ty=Tensor[(5, 14, 16), bool] */;
  %72 = cast(meta[relay.Constant][1] /* ty=Tensor[(1120), uint64] */, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %73 = shape_of(%71, dtype="int32") /* ty=Tensor[(3), int32] */;
  %74 = cast(%71, dtype="float32") /* ty=Tensor[(5, 14, 16), float32] */;
  %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %76 = cast(%63, dtype="float32") /* ty=Tensor[(70, 6), float32] */;
  %77 = %61.1;
  %78 = %62.1;
  %79 = %68.2;
  %80 = power(%74, %75) /* ty=Tensor[(5, 14, 16), float32] */;
  %81 = atanh(%76) /* ty=Tensor[(70, 6), float32] */;
  (%77, %78, %79, meta[relay.Constant][0] /* ty=Tensor[(630), int64] */, %80, %81)
}

def @func_3407() -> (Tensor[(70, 6), bool], Tensor[(70, 6), float64], Tensor[(7, 5, 12), float32]) {
  %82 = @func_1912() /* ty=(Tensor[(70, 6), bool], Tensor[(1120), uint64], Tensor[(70, 6), float64], Tensor[(70, 6), float32]) */;
  %83 = %82.2;
  %84 = cast(meta[relay.Constant][2] /* ty=Tensor[(70, 6), float64] */, dtype="bool") /* ty=Tensor[(70, 6), bool] */;
  %85 = shape_of(%83, dtype="int32") /* ty=Tensor[(2), int32] */;
  %86 = cast(%83, dtype="bool") /* ty=Tensor[(70, 6), bool] */;
  %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %88 = cast(meta[relay.Constant][2] /* ty=Tensor[(70, 6), float64] */, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %89 = @func_3352() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float32]) */;
  %90 = equal(%86, %87) /* ty=Tensor[(70, 6), bool] */;
  %91 = sigmoid(%88) /* ty=Tensor[(70, 6), float64] */;
  %92 = %89.1;
  (%90, %91, %92)
}

def @func_1943() -> (Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), uint16], Tensor[(420), float32]) {
  %93 = @func_1664() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %94 = cast(meta[relay.Constant][3] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %95 = reshape(%94, newshape=[70, 6]) /* ty=Tensor[(70, 6), float32] */;
  %96 = @func_1467(%95) /* ty=(Tensor[(7, 5, 12), int64], Tensor[(70, 6), float64], Tensor[(7, 5, 12), uint16], Tensor[(2, 560), bool], Tensor[(5, 14, 16), bool], Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), float32], Tensor[(70, 6), float64], Tensor[(7, 5, 12), uint16], Tensor[(5, 14, 16), bool], Tensor[(5, 14, 16), bool], Tensor[(70, 6), float32], Tensor[(7, 5, 12), uint16]) */;
  %97 = %93.4;
  %98 = %96.10;
  (%97, %98, meta[relay.Constant][3] /* ty=Tensor[(420), float32] */)
}

def @func_7819() -> (Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float64]) {
  %99 = @func_5201() /* ty=(Tensor[(7, 5, 12), float64],) */;
  %100 = @func_3041() /* ty=Tensor[(7, 5, 12), float32] */;
  %101 = %99.0;
  (%100, %101)
}

def @func_4891() -> (Tensor[(56, 20), int8], Tensor[(7, 5, 12), uint16]) {
  %102 = @func_3924() /* ty=Tensor[(56, 20), int8] */;
  %103 = @func_2666() /* ty=Tensor[(7, 5, 12), uint16] */;
  (%102, %103)
}

def @func_10189() -> Tensor[(7, 5, 12), uint16] {
  %104 = @func_5292() /* ty=(Tensor[(7, 5, 12), uint16],) */;
  %104.0
}

def @func_4586(%var_4581: Tensor[(7, 5, 12), uint16]) -> (Tensor[(7, 5, 12), float64], Tensor[(7, 5, 12), float32]) {
  %105 = @func_3651() /* ty=Tensor[(7, 5, 12), uint16] */;
  %106 = cast(%var_4581, dtype="float32") /* ty=Tensor[(7, 5, 12), float32] */;
  %107 = shape_of(%105, dtype="int32") /* ty=Tensor[(3), int32] */;
  %108 = cast(%105, dtype="float32") /* ty=Tensor[(7, 5, 12), float32] */;
  %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %110 = @func_3836() /* ty=Tensor[(7, 5, 12), float64] */;
  %111 = mod(%108, %109) /* ty=Tensor[(7, 5, 12), float32] */;
  (%110, %111)
}

def @func_5574() -> (Tensor[(7, 5, 12), float64],) {
  %112 = @func_5201() /* ty=(Tensor[(7, 5, 12), float64],) */;
  %113 = %112.0;
  (%113,)
}

def @func_11603() -> (Tensor[(7, 5, 12), float32],) {
  %114 = @func_10948() /* ty=(Tensor[(7, 5, 12), float32],) */;
  %115 = %114.0;
  (%115,)
}

def @func_2277(%var_2223: Tensor[(1120), uint64], %var_2255: Tensor[(70, 6), bool]) -> (Tensor[(70, 6), bool], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), float32], Tensor[(12, 7, ?), uint64], Tensor[(70, 6), int32]) {
  %116 = @func_1766() /* ty=(Tensor[(70, 6), bool],) */;
  %117 = cast(%var_2223, dtype="uint64") /* ty=Tensor[(1120), uint64] */;
  %118 = reshape(%117, newshape=[5, 14, 16]) /* ty=Tensor[(5, 14, 16), uint64] */;
  %119 = @func_1105() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */;
  %120 = @func_1175() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %121 = @func_1912() /* ty=(Tensor[(70, 6), bool], Tensor[(1120), uint64], Tensor[(70, 6), float64], Tensor[(70, 6), float32]) */;
  %122 = @func_1105() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */;
  %123 = @func_1766() /* ty=(Tensor[(70, 6), bool],) */;
  %124 = %123.0;
  %125 = cast(%124, dtype="float32") /* ty=Tensor[(70, 6), float32] */;
  %126 = log10(%125) /* ty=Tensor[(70, 6), float32] */;
  %127 = cast(%124, dtype="bool") /* ty=Tensor[(70, 6), bool] */;
  %128 = shape_of(%126, dtype="int32") /* ty=Tensor[(2), int32] */;
  %129 = cast(%126, dtype="bool") /* ty=Tensor[(70, 6), bool] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %131 = logical_or(%129, %130) /* ty=Tensor[(70, 6), bool] */;
  %132 = cast(%var_2255, dtype="int32") /* ty=Tensor[(70, 6), int32] */;
  %133 = shape_of(%131, dtype="int32") /* ty=Tensor[(2), int32] */;
  %134 = cast(%131, dtype="int32") /* ty=Tensor[(70, 6), int32] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %136 = %116.0;
  %137 = @func_1033(%118) /* ty=Tensor[(5, 14, 16), bool] */;
  %138 = %119.2;
  %139 = %120.0;
  %140 = %121.3;
  %141 = %122.4;
  %142 = subtract(%134, %135) /* ty=Tensor[(70, 6), int32] */;
  (%136, %137, %var_2223, %138, %139, %140, %141, %142)
}

def @func_1480() -> Tensor[(70, 6), uint16] {
  %143 = @func_1175() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %143.0
}

def @func_1467(%var_1368: Tensor[(70, 6), float32]) -> (Tensor[(7, 5, 12), int64], Tensor[(70, 6), float64], Tensor[(7, 5, 12), uint16], Tensor[(2, 560), bool], Tensor[(5, 14, 16), bool], Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), float32], Tensor[(70, 6), float64], Tensor[(7, 5, 12), uint16], Tensor[(5, 14, 16), bool], Tensor[(5, 14, 16), bool], Tensor[(70, 6), float32], Tensor[(7, 5, 12), uint16]) {
  %144 = cast(meta[relay.Constant][4] /* ty=Tensor[(2, 560), uint64] */, dtype="uint64") /* ty=Tensor[(2, 560), uint64] */;
  %145 = reshape(%144, newshape=[5, 14, 16]) /* ty=Tensor[(5, 14, 16), uint64] */;
  %146 = @func_1033(%145) /* ty=Tensor[(5, 14, 16), bool] */;
  %147 = cast(%146, dtype="uint64") /* ty=Tensor[(5, 14, 16), uint64] */;
  %148 = reshape(%147, newshape=[1120]) /* ty=Tensor[(1120), uint64] */;
  %149 = @func_1265(%148) /* ty=(Tensor[(7, 5, 12), float64], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(12, 7, ?), uint64], Tensor[(7, 5, 12), int64]) */;
  %150 = @func_1105() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */;
  %151 = %150.3;
  %152 = cast(%151, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %153 = reshape(%152, newshape=[70, 6]) /* ty=Tensor[(70, 6), uint16] */;
  %154 = @func_1298(%153) /* ty=(Tensor[(70, 6), float64], Tensor[(70, 6), uint16]) */;
  %155 = @func_1105() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */;
  %156 = cast(%146, dtype="bool") /* ty=Tensor[(5, 14, 16), bool] */;
  %157 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(2, 560), uint64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %158 = cast(meta[relay.Constant][4] /* ty=Tensor[(2, 560), uint64] */, dtype="bool") /* ty=Tensor[(2, 560), bool] */;
  %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %160 = cast(meta[relay.Constant][4] /* ty=Tensor[(2, 560), uint64] */, dtype="uint64") /* ty=Tensor[(2, 560), uint64] */;
  %161 = reshape(%160, newshape=[5, 14, 16]) /* ty=Tensor[(5, 14, 16), uint64] */;
  %162 = cast(meta[relay.Constant][4] /* ty=Tensor[(2, 560), uint64] */, dtype="uint64") /* ty=Tensor[(2, 560), uint64] */;
  %163 = reshape(%162, newshape=[5, 14, 16]) /* ty=Tensor[(5, 14, 16), uint64] */;
  %164 = cast(%151, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %165 = cast(%151, dtype="float32") /* ty=Tensor[(70, 6), float32] */;
  %166 = sin(%165) /* ty=Tensor[(70, 6), float32] */;
  %167 = cast(%166, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %168 = reshape(%164, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %169 = reshape(%167, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %170 = %154.0;
  %171 = cast(%170, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %172 = reshape(%171, newshape=[70, 6]) /* ty=Tensor[(70, 6), uint16] */;
  %173 = @func_1298(%172) /* ty=(Tensor[(70, 6), float64], Tensor[(70, 6), uint16]) */;
  %174 = cast(%166, dtype="float32") /* ty=Tensor[(70, 6), float32] */;
  %175 = @func_380(%168, %169) /* ty=Tensor[(7, 5, 12), uint16] */;
  %176 = cast(%175, dtype="uint16") /* ty=Tensor[(7, 5, 12), uint16] */;
  %177 = reshape(%176, newshape=[70, 6]) /* ty=Tensor[(70, 6), uint16] */;
  %178 = @func_1298(%177) /* ty=(Tensor[(70, 6), float64], Tensor[(70, 6), uint16]) */;
  %179 = cast(%var_1368, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %180 = shape_of(%166, dtype="int32") /* ty=Tensor[(2), int32] */;
  %181 = cast(%166, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %183 = mod(%181, %182) /* ty=Tensor[(70, 6), float64] */;
  %184 = cast(%183, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %185 = cast(%170, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %186 = reshape(%184, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %187 = reshape(%185, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %188 = cast(%146, dtype="uint64") /* ty=Tensor[(5, 14, 16), uint64] */;
  %189 = reshape(%188, newshape=[5, 14, 16]) /* ty=Tensor[(5, 14, 16), uint64] */;
  %190 = @func_1033(%161) /* ty=Tensor[(5, 14, 16), bool] */;
  %191 = cast(%190, dtype="uint64") /* ty=Tensor[(5, 14, 16), uint64] */;
  %192 = reshape(%191, newshape=[5, 14, 16]) /* ty=Tensor[(5, 14, 16), uint64] */;
  %193 = cast(%183, dtype="float32") /* ty=Tensor[(70, 6), float32] */;
  %194 = %173.1;
  %195 = cast(%194, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %196 = cast(%var_1368, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %197 = reshape(%195, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %198 = reshape(%196, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %199 = %149.4;
  %200 = %155.2;
  %201 = logical_and(%158, %159) /* ty=Tensor[(2, 560), bool] */;
  %202 = @func_1033(%163) /* ty=Tensor[(5, 14, 16), bool] */;
  %203 = log2(%174) /* ty=Tensor[(70, 6), float32] */;
  %204 = %178.0;
  %205 = @func_380(%186, %187) /* ty=Tensor[(7, 5, 12), uint16] */;
  %206 = @func_1033(%189) /* ty=Tensor[(5, 14, 16), bool] */;
  %207 = @func_1033(%192) /* ty=Tensor[(5, 14, 16), bool] */;
  %208 = erf(%193) /* ty=Tensor[(70, 6), float32] */;
  %209 = @func_380(%197, %198) /* ty=Tensor[(7, 5, 12), uint16] */;
  (%199, %170, %200, %201, %190, %202, %175, %194, %203, %204, %205, %206, %207, %208, %209)
}

def @func_9573() -> (Tensor[(7, 5, 12), float64],) {
  %210 = @func_3836() /* ty=Tensor[(7, 5, 12), float64] */;
  (%210,)
}

def @func_9872() -> Tensor[(7, 5, 12), float64] {
  %211 = @func_3966() /* ty=(Tensor[(7, 5, 12), float64],) */;
  %211.0
}

def @func_3642() -> (Tensor[(70, 6), uint16],) {
  %212 = @func_1664() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %213 = %212.3;
  (%213,)
}

def @func_3689(%var_3683: Tensor[(7, 5, 12), uint16]) -> (Tensor[(70, 6), uint16], Tensor[(7, 5, 12), float64]) {
  %214 = @func_1105() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */;
  %215 = @func_2880() /* ty=(Tensor[(7, 5, 12), uint16],) */;
  %216 = %215.0;
  %217 = cast(%var_3683, dtype="float64") /* ty=Tensor[(7, 5, 12), float64] */;
  %218 = shape_of(%216, dtype="int32") /* ty=Tensor[(3), int32] */;
  %219 = cast(%216, dtype="float64") /* ty=Tensor[(7, 5, 12), float64] */;
  %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %221 = %214.3;
  %222 = power(%219, %220) /* ty=Tensor[(7, 5, 12), float64] */;
  (%221, %222)
}

def @func_9081() -> (Tensor[(70, 6), float64], Tensor[(70, 6), float32], Tensor[(12, 7, ?), uint64], Tensor[(7, 5, 12), uint16]) {
  %223 = @func_5682() /* ty=(Tensor[(70, 6), float64],) */;
  %224 = @func_2464() /* ty=(Tensor[(70, 6), float32], Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16]) */;
  %225 = @func_3457() /* ty=(Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64]) */;
  %226 = %223.0;
  %227 = cast(%226, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %228 = cast(%226, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %229 = reshape(%227, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %230 = reshape(%228, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %231 = %224.0;
  %232 = %225.1;
  %233 = @func_380(%229, %230) /* ty=Tensor[(7, 5, 12), uint16] */;
  (%226, %231, %232, %233)
}

def @func_3731() -> (Tensor[(5, 14, 16), float32], Tensor[(1120), uint64]) {
  %234 = @func_1943() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), uint16], Tensor[(420), float32]) */;
  %235 = %234.0;
  %236 = cast(%235, dtype="float32") /* ty=Tensor[(5, 14, 16), float32] */;
  %237 = @func_1664() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %238 = tan(%236) /* ty=Tensor[(5, 14, 16), float32] */;
  %239 = %237.5;
  (%238, %239)
}

def @func_11069() -> (Tensor[(70, 6), bool],) {
  %240 = @func_1766() /* ty=(Tensor[(70, 6), bool],) */;
  %241 = %240.0;
  (%241,)
}

def @func_10457() -> (Tensor[(70, 6), uint16],) {
  %242 = @func_9155() /* ty=(Tensor[(70, 6), uint16],) */;
  %243 = %242.0;
  (%243,)
}

def @func_3836() -> Tensor[(7, 5, 12), float64] {
  %244 = @func_3191() /* ty=(Tensor[(7, 5, 12), float32],) */;
  %245 = %244.0;
  %246 = cast(%245, dtype="float64") /* ty=Tensor[(7, 5, 12), float64] */;
  tan(%246) /* ty=Tensor[(7, 5, 12), float64] */
}

def @func_1553() -> (Tensor[(70, 6), bool], Tensor[(56, 20), uint8]) {
  %247 = @func_1105() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */;
  %248 = %247.3;
  %249 = @func_1105() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */;
  %250 = %249.2;
  %251 = cast(%250, dtype="uint16") /* ty=Tensor[(7, 5, 12), uint16] */;
  %252 = shape_of(%248, dtype="int32") /* ty=Tensor[(2), int32] */;
  %253 = cast(%248, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %255 = left_shift(%253, %254) /* ty=Tensor[(70, 6), uint16] */;
  %256 = cast(%255, dtype="bool") /* ty=Tensor[(70, 6), bool] */;
  %257 = shape_of(%248, dtype="int32") /* ty=Tensor[(2), int32] */;
  %258 = cast(%248, dtype="bool") /* ty=Tensor[(70, 6), bool] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %260 = cast(meta[relay.Constant][5] /* ty=Tensor[(56, 20), uint64] */, dtype="uint64") /* ty=Tensor[(56, 20), uint64] */;
  %261 = reshape(%260, newshape=[5, 14, 16]) /* ty=Tensor[(5, 14, 16), uint64] */;
  %262 = @func_1033(%261) /* ty=Tensor[(5, 14, 16), bool] */;
  %263 = cast(%262, dtype="uint8") /* ty=Tensor[(5, 14, 16), uint8] */;
  %264 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(56, 20), uint64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %265 = cast(meta[relay.Constant][5] /* ty=Tensor[(56, 20), uint64] */, dtype="uint8") /* ty=Tensor[(56, 20), uint8] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %267 = less_equal(%258, %259) /* ty=Tensor[(70, 6), bool] */;
  %268 = maximum(%265, %266) /* ty=Tensor[(56, 20), uint8] */;
  (%267, %268)
}

def @func_2495() -> Tensor[(70, 6), float64] {
  %269 = @func_1912() /* ty=(Tensor[(70, 6), bool], Tensor[(1120), uint64], Tensor[(70, 6), float64], Tensor[(70, 6), float32]) */;
  %269.2
}

def @func_9615() -> Tensor[(5, 14, 16), float32] {
  %270 = @func_3731() /* ty=(Tensor[(5, 14, 16), float32], Tensor[(1120), uint64]) */;
  %270.0
}

def @func_9825(%var_9787: Tensor[(12, 1, 13), int8], %var_9813: Tensor[(1120), float32]) -> (Tensor[(12, 3, 13), int8], Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16], Tensor[(1120), float32]) {
  %271 = cast(%var_9787, dtype="int8") /* ty=Tensor[(12, 1, 13), int8] */;
  %272 = cast(meta[relay.Constant][6] /* ty=Tensor[(12, 3, 13), int8] */, dtype="int8") /* ty=Tensor[(12, 3, 13), int8] */;
  %273 = @func_7604() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(70, 6), bool]) */;
  %274 = cast(%var_9813, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %275 = reshape(%274, newshape=[56, 20]) /* ty=Tensor[(56, 20), float32] */;
  %276 = @func_4693(%275) /* ty=(Tensor[(7, 5, 12), float32], Tensor[(56, 20), uint16], Tensor[(7, 5, 12), uint16], Tensor[(5, 14, 16), bool]) */;
  %277 = bitwise_or(%271, %272) /* ty=Tensor[(12, 3, 13), int8] */;
  %278 = %273.0;
  %279 = %276.2;
  (%277, %278, %279, %var_9813)
}

def @func_11159() -> (Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), uint16]) {
  %280 = @func_5600() /* ty=Tensor[(7, 5, 12), uint16] */;
  %281 = @func_5600() /* ty=Tensor[(7, 5, 12), uint16] */;
  (%280, %281)
}

def @func_11196() -> (Tensor[(70, 6), float64],) {
  %282 = @func_3407() /* ty=(Tensor[(70, 6), bool], Tensor[(70, 6), float64], Tensor[(7, 5, 12), float32]) */;
  %283 = %282.1;
  (%283,)
}

def @func_8124(%var_8044: Tensor[(11, 1, 8), uint8], %var_8077: Tensor[(1260), float32]) -> (Tensor[(11, 6, 8), uint8], Tensor[(56, 20), int8], Tensor[(7, 5, 12), float64], Tensor[(7, 5, 12), uint16], Tensor[(1260), float32], Tensor[(7, 5, 12), uint16], Tensor[(1120), uint64]) {
  %284 = cast(%var_8044, dtype="uint8") /* ty=Tensor[(11, 1, 8), uint8] */;
  %285 = cast(meta[relay.Constant][7] /* ty=Tensor[(11, 6, 8), uint8] */, dtype="uint8") /* ty=Tensor[(11, 6, 8), uint8] */;
  %286 = @func_6918() /* ty=(Tensor[(7, 5, 12), float64],) */;
  %287 = %286.0;
  %288 = cast(%287, dtype="bool") /* ty=Tensor[(7, 5, 12), bool] */;
  %289 = cast(%var_8077, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %290 = reshape(%288, newshape=[420]) /* ty=Tensor[(420), bool] */;
  %291 = reshape(%289, newshape=[12, 7, 15]) /* ty=Tensor[(12, 7, 15), float32] */;
  %292 = @func_2844(%290, %291) /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(1120), uint64], Tensor[(7, 5, 12), float32], Tensor[(12, 7, 15), int16], Tensor[(56, 20), uint8], Tensor[(12, 7, 420), uint32]) */;
  %293 = @func_3731() /* ty=(Tensor[(5, 14, 16), float32], Tensor[(1120), uint64]) */;
  %294 = minimum(%284, %285) /* ty=Tensor[(11, 6, 8), uint8] */;
  %295 = @func_3924() /* ty=Tensor[(56, 20), int8] */;
  %296 = %292.0;
  %297 = @func_6636() /* ty=Tensor[(7, 5, 12), uint16] */;
  %298 = %293.1;
  (%294, %295, %287, %296, %var_8077, %297, %298)
}

def @func_10660() -> (Tensor[(7, 5, 12), uint16], Tensor[(70, 6), bool], Tensor[(7, 5, 12), float32]) {
  %299 = @func_3407() /* ty=(Tensor[(70, 6), bool], Tensor[(70, 6), float64], Tensor[(7, 5, 12), float32]) */;
  %300 = @func_3906() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), float32]) */;
  %301 = @func_5600() /* ty=Tensor[(7, 5, 12), uint16] */;
  %302 = %299.0;
  %303 = %300.1;
  (%301, %302, %303)
}

def @func_7931() -> (Tensor[(5, 14, 16), float64], Tensor[(9, 6, 10), bool], Tensor[(540), uint8], Tensor[(11, 8, 14), float64], Tensor[(88), float64], Tensor[(1232), float64]) {
  %304 = @func_7353() /* ty=(Tensor[(7, 5, 12), float64], Tensor[(70, 6), float64], Tensor[(7, 5, 12), float64], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), float32], Tensor[(5, 14, 16), float32], Tensor[(5, 14, 16), float64]) */;
  %305 = %304.5;
  %306 = cast(%305, dtype="float64") /* ty=Tensor[(5, 14, 16), float64] */;
  %307 = cast(meta[relay.Constant][8] /* ty=Tensor[(540), uint8] */, dtype="uint8") /* ty=Tensor[(540), uint8] */;
  %308 = reshape(%307, newshape=[9, 6, 10]) /* ty=Tensor[(9, 6, 10), uint8] */;
  %309 = cast(meta[relay.Constant][9] /* ty=Tensor[(88), float64] */, dtype="float64") /* ty=Tensor[(88), float64] */;
  %310 = cast(meta[relay.Constant][10] /* ty=Tensor[(1232), float64] */, dtype="float64") /* ty=Tensor[(1232), float64] */;
  %311 = reshape(%309, newshape=[11, 8, 1]) /* ty=Tensor[(11, 8, 1), float64] */;
  %312 = reshape(%310, newshape=[11, 8, 14]) /* ty=Tensor[(11, 8, 14), float64] */;
  %313 = log10(%306) /* ty=Tensor[(5, 14, 16), float64] */;
  %314 = @func_6164(%308) /* ty=Tensor[(9, 6, 10), bool] */;
  %315 = @func_4930(%311, %312) /* ty=Tensor[(11, 8, 14), float64] */;
  (%313, %314, meta[relay.Constant][8] /* ty=Tensor[(540), uint8] */, %315, meta[relay.Constant][9] /* ty=Tensor[(88), float64] */, meta[relay.Constant][10] /* ty=Tensor[(1232), float64] */)
}

def @func_10721() -> (Tensor[(7, 5, 12), float64], Tensor[(12, 7, ?), uint64], Tensor[(70, 6), bool], Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), uint64], Tensor[(12, 7, ?), uint64]) {
  %316 = @func_2107() /* ty=(Tensor[(56, 20), float32], Tensor[(70, 6), bool], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16]) */;
  %317 = @func_2464() /* ty=(Tensor[(70, 6), float32], Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16]) */;
  %318 = %317.2;
  %319 = cast(%318, dtype="float32") /* ty=Tensor[(7, 5, 12), float32] */;
  %320 = reshape(%319, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), float32] */;
  %321 = @func_3526(%320) /* ty=(Tensor[(7, 5, 12), uint64], Tensor[(7, 5, 12), float32]) */;
  %322 = @func_5181() /* ty=(Tensor[(12, 7, ?), uint64],) */;
  %323 = @func_7745() /* ty=Tensor[(7, 5, 12), float64] */;
  %324 = @func_3478() /* ty=Tensor[(12, 7, ?), uint64] */;
  %325 = %316.1;
  %326 = %321.0;
  %327 = %322.0;
  (%323, %324, %325, %318, %326, %327)
}

def @func_9111() -> (Tensor[(70, 6), uint16],) {
  %328 = @func_7169() /* ty=Tensor[(70, 6), uint16] */;
  (%328,)
}

def @func_2464() -> (Tensor[(70, 6), float32], Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16]) {
  %329 = @func_1912() /* ty=(Tensor[(70, 6), bool], Tensor[(1120), uint64], Tensor[(70, 6), float64], Tensor[(70, 6), float32]) */;
  %330 = @func_2157() /* ty=(Tensor[(7, 5, 12), float32],) */;
  %331 = @func_1175() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %332 = %329.3;
  %333 = %330.0;
  %334 = %331.1;
  (%332, %333, %334)
}

def @func_3352() -> (Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float32]) {
  %335 = @func_2157() /* ty=(Tensor[(7, 5, 12), float32],) */;
  %336 = @func_2666() /* ty=Tensor[(7, 5, 12), uint16] */;
  %337 = %335.0;
  (%336, %337)
}

def @func_5328() -> (Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) {
  %338 = @func_5222() /* ty=(Tensor[(70, 6), bool], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16]) */;
  %339 = @func_3457() /* ty=(Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64]) */;
  %340 = %338.2;
  %341 = %339.1;
  (%340, %341)
}

def @func_6766() -> Tensor[(70, 6), float64] {
  %342 = @func_5682() /* ty=(Tensor[(70, 6), float64],) */;
  %342.0
}

def @func_2844(%var_2785: Tensor[(420), bool], %var_2808: Tensor[(12, 7, 15), float32]) -> (Tensor[(7, 5, 12), uint16], Tensor[(1120), uint64], Tensor[(7, 5, 12), float32], Tensor[(12, 7, 15), int16], Tensor[(56, 20), uint8], Tensor[(12, 7, 420), uint32]) {
  %343 = cast(meta[relay.Constant][11] /* ty=Tensor[(1120), uint64] */, dtype="uint64") /* ty=Tensor[(1120), uint64] */;
  %344 = cast(%var_2785, dtype="bool") /* ty=Tensor[(420), bool] */;
  %345 = reshape(%343, newshape=[1120]) /* ty=Tensor[(1120), uint64] */;
  %346 = reshape(%344, newshape=[70, 6]) /* ty=Tensor[(70, 6), bool] */;
  %347 = @func_2277(%345, %346) /* ty=(Tensor[(70, 6), bool], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), float32], Tensor[(12, 7, ?), uint64], Tensor[(70, 6), int32]) */;
  %348 = @func_2157() /* ty=(Tensor[(7, 5, 12), float32],) */;
  %349 = @func_2513() /* ty=Tensor[(12, 7, ?), uint64] */;
  %350 = cast(%349, dtype="float32") /* ty=Tensor[(12, 7, ?), float32] */;
  %351 = atan(%350) /* ty=Tensor[(12, 7, ?), float32] */;
  %352 = cast(%351, dtype="int16") /* ty=Tensor[(12, 7, ?), int16] */;
  %353 = cast(%var_2808, dtype="int16") /* ty=Tensor[(12, 7, 15), int16] */;
  %354 = @func_1553() /* ty=(Tensor[(70, 6), bool], Tensor[(56, 20), uint8]) */;
  %355 = cast(%351, dtype="uint32") /* ty=Tensor[(12, 7, ?), uint32] */;
  %356 = cast(%var_2785, dtype="uint32") /* ty=Tensor[(420), uint32] */;
  %357 = %347.3;
  %358 = %348.0;
  %359 = multiply(%352, %353) /* ty=Tensor[(12, 7, 15), int16] */;
  %360 = %354.1;
  %361 = right_shift(%355, %356) /* ty=Tensor[(12, 7, 420), uint32] */;
  (%357, meta[relay.Constant][11] /* ty=Tensor[(1120), uint64] */, %358, %359, %360, %361)
}

def @func_8256() -> (Tensor[(56, 20), float64],) {
  %362 = @func_4891() /* ty=(Tensor[(56, 20), int8], Tensor[(7, 5, 12), uint16]) */;
  %363 = %362.0;
  %364 = cast(%363, dtype="float32") /* ty=Tensor[(56, 20), float32] */;
  %365 = log10(%364) /* ty=Tensor[(56, 20), float32] */;
  %366 = cast(%365, dtype="float64") /* ty=Tensor[(56, 20), float64] */;
  %367 = acosh(%366) /* ty=Tensor[(56, 20), float64] */;
  %368 = cast(%367, dtype="float64") /* ty=Tensor[(56, 20), float64] */;
  %369 = sqrt(%368) /* ty=Tensor[(56, 20), float64] */;
  (%369,)
}

def @func_8771() -> Tensor[(7, 5, 12), float32] {
  %370 = @func_3352() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float32]) */;
  %370.1
}

def @func_8555(%var_8540: Tensor[(56, 20), int8], %var_8549: Tensor[(56, 20), int8]) -> (Tensor[(56, 20), float32], Tensor[(56, 20), float64]) {
  %371 = @func_5594() /* ty=Tensor[(56, 20), int8] */;
  %372 = cast(%var_8540, dtype="float32") /* ty=Tensor[(56, 20), float32] */;
  %373 = shape_of(%371, dtype="int32") /* ty=Tensor[(2), int32] */;
  %374 = cast(%371, dtype="float32") /* ty=Tensor[(56, 20), float32] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %376 = cast(%var_8549, dtype="float64") /* ty=Tensor[(56, 20), float64] */;
  %377 = shape_of(%var_8540, dtype="int32") /* ty=Tensor[(2), int32] */;
  %378 = cast(%var_8540, dtype="float64") /* ty=Tensor[(56, 20), float64] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %380 = floor_mod(%374, %375) /* ty=Tensor[(56, 20), float32] */;
  %381 = minimum(%378, %379) /* ty=Tensor[(56, 20), float64] */;
  (%380, %381)
}

def @func_9864() -> (Tensor[(5, 14, 16), bool],) {
  %382 = @func_1943() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), uint16], Tensor[(420), float32]) */;
  %383 = %382.0;
  (%383,)
}

def @func_3216() -> (Tensor[(7, 5, 12), uint16],) {
  %384 = @func_2970() /* ty=Tensor[(7, 5, 12), uint16] */;
  (%384,)
}

def @func_10759() -> Tensor[(70, 6), uint16] {
  %385 = @func_7464() /* ty=(Tensor[(70, 6), uint16], Tensor[(15, 8, 13), int16], Tensor[(1, 1560), int16]) */;
  %385.0
}

def @func_11383() -> Tensor[(5, 14, 16), float32] {
  %386 = @func_11274() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16], Tensor[(7, 9, 10), uint8], Tensor[(630), int64], Tensor[(5, 14, 16), float32], Tensor[(70, 6), float32]) */;
  %386.4
}

def @func_11046(%var_10981: uint64, %var_10982: Tensor[(4, 15, 3), uint64]) -> (Tensor[(4, 15, 3), uint64], Tensor[(4, 15, 3), float32], Tensor[(7, 5, 12), float32], Tensor[(12, 7, ?), bool], Tensor[(70, 6), float32]) {
  %387 = cast(%var_10981, dtype="uint64") /* ty=uint64 */;
  %388 = cast(%var_10982, dtype="uint64") /* ty=Tensor[(4, 15, 3), uint64] */;
  %389 = cast(%var_10982, dtype="float32") /* ty=Tensor[(4, 15, 3), float32] */;
  %390 = @func_8736() /* ty=(Tensor[(70, 6), bool], Tensor[(12, 7, ?), bool]) */;
  %391 = @func_1912() /* ty=(Tensor[(70, 6), bool], Tensor[(1120), uint64], Tensor[(70, 6), float64], Tensor[(70, 6), float32]) */;
  %392 = maximum(%387, %388) /* ty=Tensor[(4, 15, 3), uint64] */;
  %393 = asinh(%389) /* ty=Tensor[(4, 15, 3), float32] */;
  %394 = @func_10154() /* ty=Tensor[(7, 5, 12), float32] */;
  %395 = %390.1;
  %396 = %391.3;
  (%392, %393, %394, %395, %396)
}

def @func_10766() -> Tensor[(7, 5, 12), int32] {
  %397 = @func_4794() /* ty=(Tensor[(7, 5, 12), int32], Tensor[(7, 5, 12), float64], Tensor[(70, 6), uint64]) */;
  %397.0
}

def @func_3526(%var_3513: Tensor[(7, 5, 12), float32]) -> (Tensor[(7, 5, 12), uint64], Tensor[(7, 5, 12), float32]) {
  %398 = @func_2157() /* ty=(Tensor[(7, 5, 12), float32],) */;
  %399 = %398.0;
  %400 = cast(%var_3513, dtype="uint64") /* ty=Tensor[(7, 5, 12), uint64] */;
  %401 = shape_of(%399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %402 = cast(%399, dtype="uint64") /* ty=Tensor[(7, 5, 12), uint64] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %404 = @func_2157() /* ty=(Tensor[(7, 5, 12), float32],) */;
  %405 = bitwise_xor(%402, %403) /* ty=Tensor[(7, 5, 12), uint64] */;
  %406 = %404.0;
  (%405, %406)
}

def @func_10810() -> Tensor[(70, 6), float64] {
  @func_2495() /* ty=Tensor[(70, 6), float64] */
}

def @func_7353() -> (Tensor[(7, 5, 12), float64], Tensor[(70, 6), float64], Tensor[(7, 5, 12), float64], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), float32], Tensor[(5, 14, 16), float32], Tensor[(5, 14, 16), float64]) {
  %407 = @func_3191() /* ty=(Tensor[(7, 5, 12), float32],) */;
  %408 = %407.0;
  %409 = cast(%408, dtype="float64") /* ty=Tensor[(7, 5, 12), float64] */;
  %410 = @func_3731() /* ty=(Tensor[(5, 14, 16), float32], Tensor[(1120), uint64]) */;
  %411 = %410.0;
  %412 = cast(%411, dtype="uint64") /* ty=Tensor[(5, 14, 16), uint64] */;
  %413 = reshape(%412, newshape=[1120]) /* ty=Tensor[(1120), uint64] */;
  %414 = @func_1265(%413) /* ty=(Tensor[(7, 5, 12), float64], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(12, 7, ?), uint64], Tensor[(7, 5, 12), int64]) */;
  %415 = @func_4531() /* ty=(Tensor[(1120), uint64], Tensor[(1176), int32], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), float64]) */;
  %416 = @func_5789() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float32], Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), uint16]) */;
  %417 = cast(%411, dtype="float32") /* ty=Tensor[(5, 14, 16), float32] */;
  %418 = cast(%411, dtype="float64") /* ty=Tensor[(5, 14, 16), float64] */;
  %419 = sqrt(%409) /* ty=Tensor[(7, 5, 12), float64] */;
  %420 = @func_2495() /* ty=Tensor[(70, 6), float64] */;
  %421 = %414.0;
  %422 = @func_2722() /* ty=Tensor[(70, 6), uint16] */;
  %423 = %415.2;
  %424 = %416.2;
  %425 = asin(%417) /* ty=Tensor[(5, 14, 16), float32] */;
  %426 = log(%418) /* ty=Tensor[(5, 14, 16), float64] */;
  (%419, %420, %421, %422, %423, %424, %425, %426)
}

def @func_2107() -> (Tensor[(56, 20), float32], Tensor[(70, 6), bool], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16]) {
  %427 = @func_1553() /* ty=(Tensor[(70, 6), bool], Tensor[(56, 20), uint8]) */;
  %428 = %427.1;
  %429 = cast(%428, dtype="float32") /* ty=Tensor[(56, 20), float32] */;
  %430 = @func_1766() /* ty=(Tensor[(70, 6), bool],) */;
  %431 = %430.0;
  %432 = cast(%431, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %433 = reshape(%432, newshape=[70, 6]) /* ty=Tensor[(70, 6), uint16] */;
  %434 = @func_1298(%433) /* ty=(Tensor[(70, 6), float64], Tensor[(70, 6), uint16]) */;
  %435 = erf(%429) /* ty=Tensor[(56, 20), float32] */;
  %436 = %434.1;
  %437 = @func_1480() /* ty=Tensor[(70, 6), uint16] */;
  (%435, %431, %436, %437)
}

def @func_6219(%var_6183: Tensor[(15, 15, 9), float64]) -> (Tensor[(15, 15, 9), float64],) {
  %438 = cast(%var_6183, dtype="float64") /* ty=Tensor[(15, 15, 9), float64] */;
  %439 = erf(%438) /* ty=Tensor[(15, 15, 9), float64] */;
  (%439,)
}

def @func_8338(%var_8315: Tensor[(12, 7, 8), uint64], %var_8316: Tensor[(12, 7, 8), uint64]) -> (Tensor[(12, 7, 8), bool], Tensor[(1120), uint64], Tensor[(88), uint8], Tensor[(1260), float32]) {
  %440 = cast(%var_8316, dtype="bool") /* ty=Tensor[(12, 7, 8), bool] */;
  %441 = shape_of(%var_8315, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%var_8315, dtype="bool") /* ty=Tensor[(12, 7, 8), bool] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %444 = cast(meta[relay.Constant][12] /* ty=Tensor[(88), uint8] */, dtype="uint8") /* ty=Tensor[(88), uint8] */;
  %445 = cast(meta[relay.Constant][13] /* ty=Tensor[(1260), float32] */, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %446 = reshape(%444, newshape=[11, 1, 8]) /* ty=Tensor[(11, 1, 8), uint8] */;
  %447 = reshape(%445, newshape=[1260]) /* ty=Tensor[(1260), float32] */;
  %448 = @func_8124(%446, %447) /* ty=(Tensor[(11, 6, 8), uint8], Tensor[(56, 20), int8], Tensor[(7, 5, 12), float64], Tensor[(7, 5, 12), uint16], Tensor[(1260), float32], Tensor[(7, 5, 12), uint16], Tensor[(1120), uint64]) */;
  %449 = greater(%442, %443) /* ty=Tensor[(12, 7, 8), bool] */;
  %450 = %448.6;
  (%449, %450, meta[relay.Constant][12] /* ty=Tensor[(88), uint8] */, meta[relay.Constant][13] /* ty=Tensor[(1260), float32] */)
}

def @func_4432() -> (Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float64]) {
  %451 = @func_3249() /* ty=(Tensor[(7, 5, 12), uint16],) */;
  %452 = @func_3966() /* ty=(Tensor[(7, 5, 12), float64],) */;
  %453 = %451.0;
  %454 = %452.0;
  (%453, %454)
}

def @func_3966() -> (Tensor[(7, 5, 12), float64],) {
  %455 = @func_3836() /* ty=Tensor[(7, 5, 12), float64] */;
  (%455,)
}

def @func_4000() -> (Tensor[(12, 7, ?), float64], Tensor[(56, 20), int8]) {
  %456 = @func_2513() /* ty=Tensor[(12, 7, ?), uint64] */;
  %457 = cast(%456, dtype="float64") /* ty=Tensor[(12, 7, ?), float64] */;
  %458 = acosh(%457) /* ty=Tensor[(12, 7, ?), float64] */;
  %459 = @func_3924() /* ty=Tensor[(56, 20), int8] */;
  (%458, %459)
}

def @func_5201() -> (Tensor[(7, 5, 12), float64],) {
  %460 = @func_3966() /* ty=(Tensor[(7, 5, 12), float64],) */;
  %461 = %460.0;
  (%461,)
}

def @func_8419() -> (Tensor[(70, 6), float64], Tensor[(7, 5, 12), uint16]) {
  %462 = @func_5866() /* ty=(Tensor[(70, 6), float64], Tensor[(12, 7, ?), bool]) */;
  %463 = @func_4891() /* ty=(Tensor[(56, 20), int8], Tensor[(7, 5, 12), uint16]) */;
  %464 = %462.0;
  %465 = %463.1;
  (%464, %465)
}

def @func_8512() -> (Tensor[(7, 5, 12), float64], Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), uint16], Tensor[(56, 20), int8]) {
  %466 = @func_3216() /* ty=(Tensor[(7, 5, 12), uint16],) */;
  %467 = @func_3216() /* ty=(Tensor[(7, 5, 12), uint16],) */;
  %468 = @func_4000() /* ty=(Tensor[(12, 7, ?), float64], Tensor[(56, 20), int8]) */;
  %469 = @func_3836() /* ty=Tensor[(7, 5, 12), float64] */;
  %470 = %466.0;
  %471 = %467.0;
  %472 = %468.1;
  (%469, %470, %471, %472)
}

def @func_3924() -> Tensor[(56, 20), int8] {
  %473 = @func_1553() /* ty=(Tensor[(70, 6), bool], Tensor[(56, 20), uint8]) */;
  %474 = %473.1;
  %475 = cast(meta[relay.Constant][14] /* ty=Tensor[(56, 20), uint8] */, dtype="int8") /* ty=Tensor[(56, 20), int8] */;
  %476 = shape_of(%474, dtype="int32") /* ty=Tensor[(2), int32] */;
  %477 = cast(%474, dtype="int8") /* ty=Tensor[(56, 20), int8] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  subtract(%477, %478) /* ty=Tensor[(56, 20), int8] */
}

def @func_5649(%var_5615: Tensor[(1, 1, 10), int64], %var_5616: Tensor[(7, 9, 10), int64]) -> Tensor[(7, 9, 10), uint8] {
  %479 = cast(%var_5615, dtype="bool") /* ty=Tensor[(1, 1, 10), bool] */;
  %480 = cast(%var_5616, dtype="bool") /* ty=Tensor[(7, 9, 10), bool] */;
  %481 = equal(%479, %480) /* ty=Tensor[(7, 9, 10), bool] */;
  %482 = cast(%var_5615, dtype="uint8") /* ty=Tensor[(1, 1, 10), uint8] */;
  %483 = cast(%481, dtype="uint8") /* ty=Tensor[(7, 9, 10), uint8] */;
  right_shift(%482, %483) /* ty=Tensor[(7, 9, 10), uint8] */
}

def @func_5397(%var_5388: Tensor[(13, 15, 16), float32], %var_5389: Tensor[(13, 15, 16), float32]) -> Tensor[(13, 15, 16), float32] {
  %484 = cast(%var_5389, dtype="float32") /* ty=Tensor[(13, 15, 16), float32] */;
  %485 = shape_of(%var_5388, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(%var_5388, dtype="float32") /* ty=Tensor[(13, 15, 16), float32] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%486, %487) /* ty=Tensor[(13, 15, 16), float32] */
}

def @func_2880() -> (Tensor[(7, 5, 12), uint16],) {
  %488 = @func_1664() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %489 = %488.1;
  (%489,)
}

def @func_8155() -> (Tensor[(7, 5, 12), float64],) {
  %490 = @func_5986() /* ty=(Tensor[(7, 5, 12), float64],) */;
  %491 = %490.0;
  (%491,)
}

def @func_9710() -> Tensor[(70, 6), float64] {
  %492 = @func_1766() /* ty=(Tensor[(70, 6), bool],) */;
  %493 = %492.0;
  %494 = cast(%493, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  rsqrt(%494) /* ty=Tensor[(70, 6), float64] */
}

def @func_6636() -> Tensor[(7, 5, 12), uint16] {
  %495 = @func_5170() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16]) */;
  %495.1
}

def @func_9155() -> (Tensor[(70, 6), uint16],) {
  %496 = @func_2722() /* ty=Tensor[(70, 6), uint16] */;
  (%496,)
}

def @func_3024(%var_2985: Tensor[(15, 8, 13), int16], %var_2986: Tensor[(15, 8, 13), int16], %var_3012: Tensor[(420, 1), uint16]) -> (Tensor[(15, 8, 13), int16], Tensor[(70, 6), float64], Tensor[(420, 1), uint16], Tensor[(70, 6), uint16]) {
  %497 = cast(%var_2986, dtype="int16") /* ty=Tensor[(15, 8, 13), int16] */;
  %498 = shape_of(%var_2985, dtype="int32") /* ty=Tensor[(3), int32] */;
  %499 = cast(%var_2985, dtype="int16") /* ty=Tensor[(15, 8, 13), int16] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %501 = cast(%var_3012, dtype="uint16") /* ty=Tensor[(420, 1), uint16] */;
  %502 = reshape(%501, newshape=[70, 6]) /* ty=Tensor[(70, 6), uint16] */;
  %503 = @func_1298(%502) /* ty=(Tensor[(70, 6), float64], Tensor[(70, 6), uint16]) */;
  %504 = subtract(%499, %500) /* ty=Tensor[(15, 8, 13), int16] */;
  %505 = %503.0;
  %506 = @func_2722() /* ty=Tensor[(70, 6), uint16] */;
  (%504, %505, %var_3012, %506)
}

def @func_9781() -> (Tensor[(7, 5, 12), uint16],) {
  %507 = @func_7615() /* ty=(Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16]) */;
  %508 = %507.1;
  (%508,)
}

def @func_8941() -> (Tensor[(7, 5, 12), uint16], Tensor[(5, 14, 16), float32], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), float64], Tensor[(7, 5, 12), float32], Tensor[(70, 6), float64]) {
  %509 = @func_4891() /* ty=(Tensor[(56, 20), int8], Tensor[(7, 5, 12), uint16]) */;
  %510 = @func_5789() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float32], Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), uint16]) */;
  %511 = %510.2;
  %512 = cast(%511, dtype="float32") /* ty=Tensor[(5, 14, 16), float32] */;
  %513 = reshape(%512, newshape=[56, 20]) /* ty=Tensor[(56, 20), float32] */;
  %514 = @func_4693(%513) /* ty=(Tensor[(7, 5, 12), float32], Tensor[(56, 20), uint16], Tensor[(7, 5, 12), uint16], Tensor[(5, 14, 16), bool]) */;
  %515 = @func_3966() /* ty=(Tensor[(7, 5, 12), float64],) */;
  %516 = @func_3352() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float32]) */;
  %517 = %509.1;
  %518 = @func_3872() /* ty=Tensor[(70, 6), uint16] */;
  %519 = %514.3;
  %520 = %515.0;
  %521 = %516.1;
  %522 = @func_2495() /* ty=Tensor[(70, 6), float64] */;
  (%517, %511, %518, %519, %520, %521, %522)
}

def @func_10004(%var_9996: Tensor[(70, 6), float64]) -> (Tensor[(70, 6), int16],) {
  %523 = @func_2495() /* ty=Tensor[(70, 6), float64] */;
  %524 = cast(%var_9996, dtype="int16") /* ty=Tensor[(70, 6), int16] */;
  %525 = shape_of(%523, dtype="int32") /* ty=Tensor[(2), int32] */;
  %526 = cast(%523, dtype="int16") /* ty=Tensor[(70, 6), int16] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %528 = minimum(%526, %527) /* ty=Tensor[(70, 6), int16] */;
  (%528,)
}

def @func_3906() -> (Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), float32]) {
  %529 = @func_1664() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %530 = @func_3191() /* ty=(Tensor[(7, 5, 12), float32],) */;
  %531 = %529.4;
  %532 = %530.0;
  (%531, %532)
}

def @func_4531() -> (Tensor[(1120), uint64], Tensor[(1176), int32], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), float64]) {
  %533 = @func_3731() /* ty=(Tensor[(5, 14, 16), float32], Tensor[(1120), uint64]) */;
  %534 = @func_3574() /* ty=(Tensor[(70, 6), uint16],) */;
  %535 = %534.0;
  %536 = cast(%535, dtype="float32") /* ty=Tensor[(70, 6), float32] */;
  %537 = reshape(%536, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), float32] */;
  %538 = @func_3526(%537) /* ty=(Tensor[(7, 5, 12), uint64], Tensor[(7, 5, 12), float32]) */;
  %539 = %538.0;
  %540 = cast(meta[relay.Constant][15] /* ty=Tensor[(1176), int32] */, dtype="int32") /* ty=Tensor[(1176), int32] */;
  %541 = reshape(%540, newshape=[7, 14, 12]) /* ty=Tensor[(7, 14, 12), int32] */;
  %542 = @func_3780(%541) /* ty=(Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), uint16], Tensor[(5, 14, 16), bool], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(7, 14, 12), float32]) */;
  %543 = %542.4;
  %544 = cast(%543, dtype="int64") /* ty=Tensor[(70, 6), int64] */;
  %545 = shape_of(%539, dtype="int32") /* ty=Tensor[(3), int32] */;
  %546 = cast(%539, dtype="int64") /* ty=Tensor[(7, 5, 12), int64] */;
  %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %548 = bitwise_or(%546, %547) /* ty=Tensor[(7, 5, 12), int64] */;
  %549 = cast(%548, dtype="float32") /* ty=Tensor[(7, 5, 12), float32] */;
  %550 = rsqrt(%549) /* ty=Tensor[(7, 5, 12), float32] */;
  %551 = cast(%550, dtype="float64") /* ty=Tensor[(7, 5, 12), float64] */;
  %552 = %533.1;
  %553 = sin(%551) /* ty=Tensor[(7, 5, 12), float64] */;
  (%552, meta[relay.Constant][15] /* ty=Tensor[(1176), int32] */, %535, %553)
}

def @func_5600() -> Tensor[(7, 5, 12), uint16] {
  @func_2970() /* ty=Tensor[(7, 5, 12), uint16] */
}

def @func_6078() -> (Tensor[(70, 6), float64],) {
  %554 = @func_5866() /* ty=(Tensor[(70, 6), float64], Tensor[(12, 7, ?), bool]) */;
  %555 = %554.0;
  (%555,)
}

def @func_9424() -> (Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float64], Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float64]) {
  %556 = @func_5789() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float32], Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), uint16]) */;
  %557 = @func_5574() /* ty=(Tensor[(7, 5, 12), float64],) */;
  %558 = @func_7267() /* ty=(Tensor[(7, 5, 12), uint64], Tensor[(7, 5, 12), float64], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), float64], Tensor[(70, 6), bool]) */;
  %559 = @func_5201() /* ty=(Tensor[(7, 5, 12), float64],) */;
  %560 = %559.0;
  %561 = cast(%560, dtype="float64") /* ty=Tensor[(7, 5, 12), float64] */;
  %562 = %556.0;
  %563 = %557.0;
  %564 = %558.3;
  %565 = @func_5360() /* ty=Tensor[(7, 5, 12), uint16] */;
  %566 = log(%561) /* ty=Tensor[(7, 5, 12), float64] */;
  (%562, %563, %564, %565, %566)
}

def @func_11532() -> (Tensor[(7, 5, 12), float32],) {
  %567 = @func_7819() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float64]) */;
  %568 = %567.0;
  (%568,)
}

def @func_1718() -> (Tensor[(7, 5, 12), uint16],) {
  %569 = @func_1175() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %570 = %569.1;
  (%570,)
}

def @func_5181() -> (Tensor[(12, 7, ?), uint64],) {
  %571 = @func_2033() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(420), float32], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64]) */;
  %572 = %571.2;
  (%572,)
}

def @func_3181() -> Tensor[(70, 6), float32] {
  %573 = @func_1912() /* ty=(Tensor[(70, 6), bool], Tensor[(1120), uint64], Tensor[(70, 6), float64], Tensor[(70, 6), float32]) */;
  %573.3
}

def @func_9500(%var_9485: Tensor[(1, 4, 8), float32], %var_9492: Tensor[(7, 4, 8), float32]) -> (Tensor[(8, 4, 8), float32], Tensor[(7, 4, 8), uint64]) {
  %574 = cast(%var_9485, dtype="float32") /* ty=Tensor[(1, 4, 8), float32] */;
  %575 = cast(meta[relay.Constant][16] /* ty=Tensor[(8, 4, 8), float32] */, dtype="float32") /* ty=Tensor[(8, 4, 8), float32] */;
  %576 = cast(%var_9485, dtype="uint64") /* ty=Tensor[(1, 4, 8), uint64] */;
  %577 = cast(%var_9492, dtype="uint64") /* ty=Tensor[(7, 4, 8), uint64] */;
  %578 = mod(%574, %575) /* ty=Tensor[(8, 4, 8), float32] */;
  %579 = multiply(%576, %577) /* ty=Tensor[(7, 4, 8), uint64] */;
  (%578, %579)
}

def @func_7727() -> Tensor[(5, 14, 16), bool] {
  %580 = @func_3906() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), float32]) */;
  %580.0
}

def @func_1175() -> (Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) {
  %581 = @func_1105() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */;
  %582 = %581.3;
  %583 = cast(%582, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %584 = cast(%582, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %585 = reshape(%583, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %586 = reshape(%584, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %587 = @func_380(%585, %586) /* ty=Tensor[(7, 5, 12), uint16] */;
  (%582, %587)
}

def @func_8965() -> (Tensor[(7, 5, 12), uint16],) {
  %588 = @func_5360() /* ty=Tensor[(7, 5, 12), uint16] */;
  (%588,)
}

def @func_5526() -> Tensor[(12, 7, ?), bool] {
  %589 = @func_4000() /* ty=(Tensor[(12, 7, ?), float64], Tensor[(56, 20), int8]) */;
  %590 = %589.0;
  %591 = cast(%590, dtype="float64") /* ty=Tensor[(12, 7, ?), float64] */;
  %592 = tan(%591) /* ty=Tensor[(12, 7, ?), float64] */;
  %593 = cast(%592, dtype="bool") /* ty=Tensor[(12, 7, ?), bool] */;
  %594 = shape_of(%590, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(%590, dtype="bool") /* ty=Tensor[(12, 7, ?), bool] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%595, %596) /* ty=Tensor[(12, 7, ?), bool] */
}

def @func_7512(%var_7500: Tensor[(1183), float32]) -> (Tensor[(7, 5, 12), float64], Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), uint16], Tensor[(13, 13, 7), float32], Tensor[(1183), float32], Tensor[(7, 5, 12), uint16]) {
  %597 = @func_7353() /* ty=(Tensor[(7, 5, 12), float64], Tensor[(70, 6), float64], Tensor[(7, 5, 12), float64], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), float32], Tensor[(5, 14, 16), float32], Tensor[(5, 14, 16), float64]) */;
  %598 = %597.2;
  %599 = cast(%598, dtype="uint16") /* ty=Tensor[(7, 5, 12), uint16] */;
  %600 = cast(%598, dtype="uint16") /* ty=Tensor[(7, 5, 12), uint16] */;
  %601 = reshape(%599, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %602 = reshape(%600, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %603 = @func_3249() /* ty=(Tensor[(7, 5, 12), uint16],) */;
  %604 = cast(%var_7500, dtype="float32") /* ty=Tensor[(1183), float32] */;
  %605 = reshape(%604, newshape=[13, 13, 7]) /* ty=Tensor[(13, 13, 7), float32] */;
  %606 = @func_6987(%605) /* ty=(Tensor[(13, 13, 7), float32], Tensor[(7, 5, 12), uint16]) */;
  %607 = @func_4994() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(2, 560), bool]) */;
  %608 = @func_380(%601, %602) /* ty=Tensor[(7, 5, 12), uint16] */;
  %609 = %603.0;
  %610 = %606.0;
  %611 = %607.0;
  (%598, %608, %609, %610, %var_7500, %611)
}

def @func_8228() -> Tensor[(7, 5, 12), float32] {
  %612 = @func_5170() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16]) */;
  %612.0
}

def @func_4930(%var_4913: Tensor[(11, 8, 1), float64], %var_4914: Tensor[(11, 8, 14), float64]) -> Tensor[(11, 8, 14), float64] {
  %613 = cast(%var_4913, dtype="float64") /* ty=Tensor[(11, 8, 1), float64] */;
  %614 = cast(%var_4914, dtype="float64") /* ty=Tensor[(11, 8, 14), float64] */;
  floor_mod(%613, %614) /* ty=Tensor[(11, 8, 14), float64] */
}

def @func_2722() -> Tensor[(70, 6), uint16] {
  %615 = @func_1664() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %615.6
}

def @func_11774() -> (Tensor[(5, 14, 16), float32], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64], Tensor[(12, 7, ?), uint64]) {
  %616 = @func_7267() /* ty=(Tensor[(7, 5, 12), uint64], Tensor[(7, 5, 12), float64], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), float64], Tensor[(70, 6), bool]) */;
  %617 = @func_5328() /* ty=(Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */;
  %618 = @func_1912() /* ty=(Tensor[(70, 6), bool], Tensor[(1120), uint64], Tensor[(70, 6), float64], Tensor[(70, 6), float32]) */;
  %619 = @func_6807() /* ty=(Tensor[(12, 7, ?), uint64],) */;
  %620 = %616.3;
  %621 = %617.1;
  %622 = %618.1;
  %623 = %619.0;
  (%620, %621, %622, %623)
}

def @func_10794(%var_10784: Tensor[(10), uint64], %var_10791: Tensor[(8), float32]) -> (Tensor[(7, 5, 12), float64], Tensor[(7, 10, 7), uint64], Tensor[(10), uint64], Tensor[(1, 4, 2), float32], Tensor[(8), float32]) {
  %624 = @func_5574() /* ty=(Tensor[(7, 5, 12), float64],) */;
  %625 = cast(%var_10784, dtype="uint64") /* ty=Tensor[(10), uint64] */;
  %626 = reshape(%625, newshape=[1, 10, 1]) /* ty=Tensor[(1, 10, 1), uint64] */;
  %627 = @func_5942(%626) /* ty=(Tensor[(7, 10, 7), uint64],) */;
  %628 = cast(%var_10791, dtype="float32") /* ty=Tensor[(8), float32] */;
  %629 = reshape(%628, newshape=[1, 4, 2]) /* ty=Tensor[(1, 4, 2), float32] */;
  %630 = @func_2888(%629) /* ty=(Tensor[(1, 4, 2), float32],) */;
  %631 = %624.0;
  %632 = %627.0;
  %633 = %630.0;
  (%631, %632, %var_10784, %633, %var_10791)
}

def @func_6164(%var_6140: Tensor[(9, 6, 10), uint8]) -> Tensor[(9, 6, 10), bool] {
  %634 = cast(meta[relay.Constant][17] /* ty=Tensor[(9, 6, 10), uint8] */, dtype="bool") /* ty=Tensor[(9, 6, 10), bool] */;
  %635 = shape_of(%var_6140, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%var_6140, dtype="bool") /* ty=Tensor[(9, 6, 10), bool] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%636, %637) /* ty=Tensor[(9, 6, 10), bool] */
}

def @func_11125() -> Tensor[(540), uint8] {
  %638 = @func_7931() /* ty=(Tensor[(5, 14, 16), float64], Tensor[(9, 6, 10), bool], Tensor[(540), uint8], Tensor[(11, 8, 14), float64], Tensor[(88), float64], Tensor[(1232), float64]) */;
  %638.2
}

def @func_2970() -> Tensor[(7, 5, 12), uint16] {
  %639 = @func_1175() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %639.1
}

def @func_4336() -> Tensor[(70, 6), bool] {
  %640 = @func_1553() /* ty=(Tensor[(70, 6), bool], Tensor[(56, 20), uint8]) */;
  %640.0
}

def @func_1298(%var_1274: Tensor[(70, 6), uint16]) -> (Tensor[(70, 6), float64], Tensor[(70, 6), uint16]) {
  %641 = @func_1175() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %642 = %641.0;
  %643 = cast(%var_1274, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %644 = shape_of(%642, dtype="int32") /* ty=Tensor[(2), int32] */;
  %645 = cast(%642, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %647 = @func_1175() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %648 = divide(%645, %646) /* ty=Tensor[(70, 6), float64] */;
  %649 = %647.0;
  (%648, %649)
}

def @func_1664() -> (Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) {
  %650 = @func_1105() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */;
  %651 = %650.3;
  %652 = cast(%651, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %653 = cast(%651, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %654 = reshape(%652, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %655 = reshape(%653, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %656 = @func_380(%654, %655) /* ty=Tensor[(7, 5, 12), uint16] */;
  %657 = cast(%656, dtype="uint16") /* ty=Tensor[(7, 5, 12), uint16] */;
  %658 = reshape(%657, newshape=[70, 6]) /* ty=Tensor[(70, 6), uint16] */;
  %659 = @func_1298(%658) /* ty=(Tensor[(70, 6), float64], Tensor[(70, 6), uint16]) */;
  %660 = cast(meta[relay.Constant][18] /* ty=Tensor[(1120), uint64] */, dtype="uint64") /* ty=Tensor[(1120), uint64] */;
  %661 = reshape(%660, newshape=[5, 14, 16]) /* ty=Tensor[(5, 14, 16), uint64] */;
  %662 = cast(%656, dtype="float32") /* ty=Tensor[(7, 5, 12), float32] */;
  %663 = reshape(%662, newshape=[70, 6]) /* ty=Tensor[(70, 6), float32] */;
  %664 = @func_1467(%663) /* ty=(Tensor[(7, 5, 12), int64], Tensor[(70, 6), float64], Tensor[(7, 5, 12), uint16], Tensor[(2, 560), bool], Tensor[(5, 14, 16), bool], Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), float32], Tensor[(70, 6), float64], Tensor[(7, 5, 12), uint16], Tensor[(5, 14, 16), bool], Tensor[(5, 14, 16), bool], Tensor[(70, 6), float32], Tensor[(7, 5, 12), uint16]) */;
  %665 = @func_1175() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %666 = @func_1480() /* ty=Tensor[(70, 6), uint16] */;
  %667 = %659.1;
  %668 = @func_1033(%661) /* ty=Tensor[(5, 14, 16), bool] */;
  %669 = %664.7;
  %670 = %665.1;
  (%651, %656, %666, %667, %668, meta[relay.Constant][18] /* ty=Tensor[(1120), uint64] */, %669, %670)
}

def @func_1912() -> (Tensor[(70, 6), bool], Tensor[(1120), uint64], Tensor[(70, 6), float64], Tensor[(70, 6), float32]) {
  %671 = @func_1766() /* ty=(Tensor[(70, 6), bool],) */;
  %672 = @func_1810() /* ty=(Tensor[(1120), uint64], Tensor[(5, 14, 16), bool], Tensor[(70, 6), bool]) */;
  %673 = %671.0;
  %674 = cast(%673, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %675 = reshape(%674, newshape=[70, 6]) /* ty=Tensor[(70, 6), uint16] */;
  %676 = @func_1298(%675) /* ty=(Tensor[(70, 6), float64], Tensor[(70, 6), uint16]) */;
  %677 = cast(%673, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %678 = reshape(%677, newshape=[70, 6]) /* ty=Tensor[(70, 6), uint16] */;
  %679 = @func_1298(%678) /* ty=(Tensor[(70, 6), float64], Tensor[(70, 6), uint16]) */;
  %680 = %679.1;
  %681 = cast(%680, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %682 = log(%681) /* ty=Tensor[(70, 6), float64] */;
  %683 = @func_1175() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %684 = %683.1;
  %685 = cast(%684, dtype="float32") /* ty=Tensor[(7, 5, 12), float32] */;
  %686 = shape_of(%682, dtype="int32") /* ty=Tensor[(2), int32] */;
  %687 = cast(%682, dtype="float32") /* ty=Tensor[(70, 6), float32] */;
  %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %689 = %672.0;
  %690 = %676.0;
  %691 = floor_divide(%687, %688) /* ty=Tensor[(70, 6), float32] */;
  (%673, %689, %690, %691)
}

def @func_5594() -> Tensor[(56, 20), int8] {
  @func_3924() /* ty=Tensor[(56, 20), int8] */
}

def @func_11724() -> (Tensor[(7, 5, 12), float64], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float64]) {
  %692 = @func_10660() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(70, 6), bool], Tensor[(7, 5, 12), float32]) */;
  %693 = @func_5986() /* ty=(Tensor[(7, 5, 12), float64],) */;
  %694 = @func_7745() /* ty=Tensor[(7, 5, 12), float64] */;
  %695 = @func_9834() /* ty=Tensor[(70, 6), uint16] */;
  %696 = %692.2;
  %697 = %693.0;
  (%694, %695, %696, %697)
}

def @func_7615() -> (Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16]) {
  %698 = @func_1810() /* ty=(Tensor[(1120), uint64], Tensor[(5, 14, 16), bool], Tensor[(70, 6), bool]) */;
  %699 = @func_2033() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(420), float32], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64]) */;
  %700 = %698.0;
  %701 = %699.0;
  (%700, %701)
}

def @func_2728() -> Tensor[(7, 5, 12), float32] {
  %702 = @func_2157() /* ty=(Tensor[(7, 5, 12), float32],) */;
  %702.0
}

def @func_9683() -> (Tensor[(5, 14, 16), float32], Tensor[(12, 7, ?), uint64], Tensor[(7, 5, 12), float64]) {
  %703 = @func_7267() /* ty=(Tensor[(7, 5, 12), uint64], Tensor[(7, 5, 12), float64], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), float64], Tensor[(70, 6), bool]) */;
  %704 = @func_9424() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float64], Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float64]) */;
  %705 = %703.3;
  %706 = @func_3478() /* ty=Tensor[(12, 7, ?), uint64] */;
  %707 = %704.4;
  (%705, %706, %707)
}

def @func_11440(%var_11426: Tensor[(3, 1, 10), float64]) -> (Tensor[(3, 1, 10), float64], Tensor[(70, 6), uint16]) {
  %708 = cast(%var_11426, dtype="float64") /* ty=Tensor[(3, 1, 10), float64] */;
  %709 = @func_3642() /* ty=(Tensor[(70, 6), uint16],) */;
  %710 = sqrt(%708) /* ty=Tensor[(3, 1, 10), float64] */;
  %711 = %709.0;
  (%710, %711)
}

def @func_3041() -> Tensor[(7, 5, 12), float32] {
  @func_2728() /* ty=Tensor[(7, 5, 12), float32] */
}

def @func_7267() -> (Tensor[(7, 5, 12), uint64], Tensor[(7, 5, 12), float64], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), float64], Tensor[(70, 6), bool]) {
  %712 = @func_3249() /* ty=(Tensor[(7, 5, 12), uint16],) */;
  %713 = %712.0;
  %714 = @func_4336() /* ty=Tensor[(70, 6), bool] */;
  %715 = cast(%714, dtype="uint64") /* ty=Tensor[(70, 6), uint64] */;
  %716 = shape_of(%713, dtype="int32") /* ty=Tensor[(3), int32] */;
  %717 = cast(%713, dtype="uint64") /* ty=Tensor[(7, 5, 12), uint64] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %719 = cast(%713, dtype="float64") /* ty=Tensor[(7, 5, 12), float64] */;
  %720 = @func_1105() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */;
  %721 = %720.0;
  %722 = cast(%721, dtype="float32") /* ty=Tensor[(5, 14, 16), float32] */;
  %723 = @func_6918() /* ty=(Tensor[(7, 5, 12), float64],) */;
  %724 = @func_3407() /* ty=(Tensor[(70, 6), bool], Tensor[(70, 6), float64], Tensor[(7, 5, 12), float32]) */;
  %725 = minimum(%717, %718) /* ty=Tensor[(7, 5, 12), uint64] */;
  %726 = erf(%719) /* ty=Tensor[(7, 5, 12), float64] */;
  %727 = @func_1480() /* ty=Tensor[(70, 6), uint16] */;
  %728 = asinh(%722) /* ty=Tensor[(5, 14, 16), float32] */;
  %729 = %723.0;
  %730 = %724.0;
  (%725, %726, %727, %728, %729, %730)
}

def @func_7745() -> Tensor[(7, 5, 12), float64] {
  %731 = @func_5201() /* ty=(Tensor[(7, 5, 12), float64],) */;
  %731.0
}

def @func_10233() -> (Tensor[(70, 6), bool], Tensor[(70, 6), uint16], Tensor[(1560), int16]) {
  %732 = cast(meta[relay.Constant][19] /* ty=Tensor[(1560), int16] */, dtype="int16") /* ty=Tensor[(1560), int16] */;
  %733 = cast(meta[relay.Constant][19] /* ty=Tensor[(1560), int16] */, dtype="int16") /* ty=Tensor[(1560), int16] */;
  %734 = @func_4336() /* ty=Tensor[(70, 6), bool] */;
  %735 = cast(%734, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %736 = reshape(%732, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), int16] */;
  %737 = reshape(%733, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), int16] */;
  %738 = reshape(%735, newshape=[420, 1]) /* ty=Tensor[(420, 1), uint16] */;
  %739 = @func_3024(%736, %737, %738) /* ty=(Tensor[(15, 8, 13), int16], Tensor[(70, 6), float64], Tensor[(420, 1), uint16], Tensor[(70, 6), uint16]) */;
  %740 = %739.3;
  (%734, %740, meta[relay.Constant][19] /* ty=Tensor[(1560), int16] */)
}

def @func_3249() -> (Tensor[(7, 5, 12), uint16],) {
  %741 = @func_2666() /* ty=Tensor[(7, 5, 12), uint16] */;
  (%741,)
}

def @func_10917() -> (Tensor[(56, 20), float64], Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16]) {
  %742 = @func_8256() /* ty=(Tensor[(56, 20), float64],) */;
  %743 = @func_3906() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), float32]) */;
  %744 = %743.1;
  %745 = cast(%744, dtype="float32") /* ty=Tensor[(7, 5, 12), float32] */;
  %746 = reshape(%745, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), float32] */;
  %747 = @func_7971(%746) /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(10), int64], Tensor[(630), int64]) */;
  %748 = %742.0;
  %749 = %747.0;
  (%748, %744, %749)
}

def @func_3780(%var_3738: Tensor[(7, 14, 12), int32]) -> (Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), uint16], Tensor[(5, 14, 16), bool], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(7, 14, 12), float32]) {
  %750 = @func_3216() /* ty=(Tensor[(7, 5, 12), uint16],) */;
  %751 = @func_3309() /* ty=Tensor[(5, 14, 16), bool] */;
  %752 = cast(%751, dtype="uint64") /* ty=Tensor[(5, 14, 16), uint64] */;
  %753 = reshape(%752, newshape=[5, 14, 16]) /* ty=Tensor[(5, 14, 16), uint64] */;
  %754 = @func_3457() /* ty=(Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64]) */;
  %755 = %754.0;
  %756 = cast(%755, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %757 = reshape(%756, newshape=[70, 6]) /* ty=Tensor[(70, 6), uint16] */;
  %758 = @func_1298(%757) /* ty=(Tensor[(70, 6), float64], Tensor[(70, 6), uint16]) */;
  %759 = cast(%var_3738, dtype="bool") /* ty=Tensor[(7, 14, 12), bool] */;
  %760 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(7, 14, 12), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %761 = cast(meta[relay.Constant][20] /* ty=Tensor[(7, 14, 12), int32] */, dtype="bool") /* ty=Tensor[(7, 14, 12), bool] */;
  %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %763 = equal(%761, %762) /* ty=Tensor[(7, 14, 12), bool] */;
  %764 = cast(%763, dtype="float32") /* ty=Tensor[(7, 14, 12), float32] */;
  %765 = %750.0;
  %766 = @func_1033(%753) /* ty=Tensor[(5, 14, 16), bool] */;
  %767 = %758.1;
  %768 = sqrt(%764) /* ty=Tensor[(7, 14, 12), float32] */;
  (%751, %765, %766, %755, %767, %768)
}

def @func_9013() -> (Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16]) {
  %769 = @func_2880() /* ty=(Tensor[(7, 5, 12), uint16],) */;
  %770 = @func_8370() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(70, 6), uint16]) */;
  %771 = %769.0;
  %772 = %770.1;
  (%771, %772)
}

def @func_7093(%var_7063: Tensor[(1183), float32]) -> (Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), uint16], Tensor[(1183), float32], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), float32], Tensor[(70, 6), float32]) {
  %773 = @func_3731() /* ty=(Tensor[(5, 14, 16), float32], Tensor[(1120), uint64]) */;
  %774 = cast(%var_7063, dtype="float32") /* ty=Tensor[(1183), float32] */;
  %775 = reshape(%774, newshape=[13, 13, 7]) /* ty=Tensor[(13, 13, 7), float32] */;
  %776 = @func_6987(%775) /* ty=(Tensor[(13, 13, 7), float32], Tensor[(7, 5, 12), uint16]) */;
  %777 = @func_1175() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %778 = %773.0;
  %779 = %776.1;
  %780 = %777.0;
  %781 = @func_6342() /* ty=Tensor[(7, 5, 12), float32] */;
  %782 = @func_3181() /* ty=Tensor[(70, 6), float32] */;
  (%778, %779, %var_7063, %780, %781, %782)
}

def @func_7738() -> (Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), uint16]) {
  %783 = @func_3216() /* ty=(Tensor[(7, 5, 12), uint16],) */;
  %784 = @func_7727() /* ty=Tensor[(5, 14, 16), bool] */;
  %785 = %783.0;
  (%784, %785)
}

def @func_4794() -> (Tensor[(7, 5, 12), int32], Tensor[(7, 5, 12), float64], Tensor[(70, 6), uint64]) {
  %786 = @func_2157() /* ty=(Tensor[(7, 5, 12), float32],) */;
  %787 = %786.0;
  %788 = @func_3457() /* ty=(Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64]) */;
  %789 = %788.0;
  %790 = cast(%789, dtype="int32") /* ty=Tensor[(70, 6), int32] */;
  %791 = shape_of(%787, dtype="int32") /* ty=Tensor[(3), int32] */;
  %792 = cast(%787, dtype="int32") /* ty=Tensor[(7, 5, 12), int32] */;
  %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %794 = subtract(%792, %793) /* ty=Tensor[(7, 5, 12), int32] */;
  %795 = cast(%794, dtype="uint16") /* ty=Tensor[(7, 5, 12), uint16] */;
  %796 = reshape(%795, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %797 = @func_3689(%796) /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), float64]) */;
  %798 = cast(%789, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %799 = reshape(%798, newshape=[70, 6]) /* ty=Tensor[(70, 6), uint16] */;
  %800 = @func_1298(%799) /* ty=(Tensor[(70, 6), float64], Tensor[(70, 6), uint16]) */;
  %801 = %800.0;
  %802 = cast(%789, dtype="uint64") /* ty=Tensor[(70, 6), uint64] */;
  %803 = shape_of(%801, dtype="int32") /* ty=Tensor[(2), int32] */;
  %804 = cast(%801, dtype="uint64") /* ty=Tensor[(70, 6), uint64] */;
  %805 = dyn.reshape(%802, %803, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %806 = %797.1;
  %807 = right_shift(%804, %805) /* ty=Tensor[(70, 6), uint64] */;
  (%794, %806, %807)
}

def @func_3478() -> Tensor[(12, 7, ?), uint64] {
  %808 = @func_3457() /* ty=(Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64]) */;
  %808.1
}

def @func_3191() -> (Tensor[(7, 5, 12), float32],) {
  %809 = @func_2157() /* ty=(Tensor[(7, 5, 12), float32],) */;
  %810 = %809.0;
  (%810,)
}

def @func_1810() -> (Tensor[(1120), uint64], Tensor[(5, 14, 16), bool], Tensor[(70, 6), bool]) {
  %811 = @func_1105() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */;
  %812 = %811.1;
  %813 = cast(%812, dtype="uint64") /* ty=Tensor[(1120), uint64] */;
  %814 = reshape(%813, newshape=[5, 14, 16]) /* ty=Tensor[(5, 14, 16), uint64] */;
  %815 = @func_1766() /* ty=(Tensor[(70, 6), bool],) */;
  %816 = @func_1033(%814) /* ty=Tensor[(5, 14, 16), bool] */;
  %817 = %815.0;
  (%812, %816, %817)
}

def @func_4296() -> (Tensor[(12, 7, ?), uint64],) {
  %818 = @func_2033() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(420), float32], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64]) */;
  %819 = %818.2;
  (%819,)
}

def @func_7971(%var_7959: Tensor[(7, 5, 12), float32]) -> (Tensor[(7, 5, 12), uint16], Tensor[(10), int64], Tensor[(630), int64]) {
  %820 = @func_2464() /* ty=(Tensor[(70, 6), float32], Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16]) */;
  %821 = %820.1;
  %822 = cast(%var_7959, dtype="uint16") /* ty=Tensor[(7, 5, 12), uint16] */;
  %823 = shape_of(%821, dtype="int32") /* ty=Tensor[(3), int32] */;
  %824 = cast(%821, dtype="uint16") /* ty=Tensor[(7, 5, 12), uint16] */;
  %825 = dyn.reshape(%822, %823, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %826 = cast(%821, dtype="float64") /* ty=Tensor[(7, 5, 12), float64] */;
  %827 = cast(meta[relay.Constant][21] /* ty=Tensor[(630), int64] */, dtype="int64") /* ty=Tensor[(630), int64] */;
  %828 = reshape(%826, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), float64] */;
  %829 = reshape(%827, newshape=[10, 63]) /* ty=Tensor[(10, 63), int64] */;
  %830 = @func_6703(%828, %829) /* ty=(Tensor[(7, 5, 12), bool], Tensor[(7, 5, 12), uint16], Tensor[(7, 9, 10), uint8], Tensor[(10), int64], Tensor[(10, 63), int64]) */;
  %831 = maximum(%824, %825) /* ty=Tensor[(7, 5, 12), uint16] */;
  %832 = %830.3;
  (%831, %832, meta[relay.Constant][21] /* ty=Tensor[(630), int64] */)
}

def @func_5866() -> (Tensor[(70, 6), float64], Tensor[(12, 7, ?), bool]) {
  %833 = @func_5181() /* ty=(Tensor[(12, 7, ?), uint64],) */;
  %834 = %833.0;
  %835 = cast(%834, dtype="float32") /* ty=Tensor[(12, 7, ?), float32] */;
  %836 = erf(%835) /* ty=Tensor[(12, 7, ?), float32] */;
  %837 = cast(%834, dtype="bool") /* ty=Tensor[(12, 7, ?), bool] */;
  %838 = shape_of(%836, dtype="int32") /* ty=Tensor[(3), int32] */;
  %839 = cast(%836, dtype="bool") /* ty=Tensor[(12, 7, ?), bool] */;
  %840 = dyn.reshape(%837, %838, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %841 = @func_2495() /* ty=Tensor[(70, 6), float64] */;
  %842 = less(%839, %840) /* ty=Tensor[(12, 7, ?), bool] */;
  (%841, %842)
}

def @func_5360() -> Tensor[(7, 5, 12), uint16] {
  %843 = @func_5170() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16]) */;
  %843.1
}

def @func_3851() -> Tensor[(12, 7, ?), uint64] {
  @func_2513() /* ty=Tensor[(12, 7, ?), uint64] */
}

def @func_4994() -> (Tensor[(7, 5, 12), uint16], Tensor[(2, 560), bool]) {
  %844 = @func_1175() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %845 = %844.1;
  %846 = cast(%845, dtype="float32") /* ty=Tensor[(7, 5, 12), float32] */;
  %847 = reshape(%846, newshape=[70, 6]) /* ty=Tensor[(70, 6), float32] */;
  %848 = @func_1467(%847) /* ty=(Tensor[(7, 5, 12), int64], Tensor[(70, 6), float64], Tensor[(7, 5, 12), uint16], Tensor[(2, 560), bool], Tensor[(5, 14, 16), bool], Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), float32], Tensor[(70, 6), float64], Tensor[(7, 5, 12), uint16], Tensor[(5, 14, 16), bool], Tensor[(5, 14, 16), bool], Tensor[(70, 6), float32], Tensor[(7, 5, 12), uint16]) */;
  %849 = %848.3;
  (%845, %849)
}

def @func_9963() -> Tensor[(7, 5, 12), float32] {
  %850 = @func_4857() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float32]) */;
  %850.1
}

def @func_8035() -> (Tensor[(7, 5, 12), float32],) {
  %851 = @func_6111() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), float32]) */;
  %852 = %851.1;
  (%852,)
}

def @func_9834() -> Tensor[(70, 6), uint16] {
  @func_4085() /* ty=Tensor[(70, 6), uint16] */
}

def @func_6703(%var_6686: Tensor[(7, 5, 12), float64], %var_6701: Tensor[(10, 63), int64]) -> (Tensor[(7, 5, 12), bool], Tensor[(7, 5, 12), uint16], Tensor[(7, 9, 10), uint8], Tensor[(10), int64], Tensor[(10, 63), int64]) {
  %853 = @func_5201() /* ty=(Tensor[(7, 5, 12), float64],) */;
  %854 = %853.0;
  %855 = cast(%var_6686, dtype="bool") /* ty=Tensor[(7, 5, 12), bool] */;
  %856 = shape_of(%854, dtype="int32") /* ty=Tensor[(3), int32] */;
  %857 = cast(%854, dtype="bool") /* ty=Tensor[(7, 5, 12), bool] */;
  %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %859 = cast(meta[relay.Constant][22] /* ty=Tensor[(10), int64] */, dtype="int64") /* ty=Tensor[(10), int64] */;
  %860 = cast(%var_6701, dtype="int64") /* ty=Tensor[(10, 63), int64] */;
  %861 = reshape(%859, newshape=[1, 1, 10]) /* ty=Tensor[(1, 1, 10), int64] */;
  %862 = reshape(%860, newshape=[7, 9, 10]) /* ty=Tensor[(7, 9, 10), int64] */;
  %863 = not_equal(%857, %858) /* ty=Tensor[(7, 5, 12), bool] */;
  %864 = @func_5360() /* ty=Tensor[(7, 5, 12), uint16] */;
  %865 = @func_5649(%861, %862) /* ty=Tensor[(7, 9, 10), uint8] */;
  (%863, %864, %865, meta[relay.Constant][22] /* ty=Tensor[(10), int64] */, %var_6701)
}

def @func_2033() -> (Tensor[(7, 5, 12), uint16], Tensor[(420), float32], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64]) {
  %866 = @func_1175() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %867 = @func_1943() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), uint16], Tensor[(420), float32]) */;
  %868 = cast(meta[relay.Constant][23] /* ty=Tensor[(1120), uint64] */, dtype="uint64") /* ty=Tensor[(1120), uint64] */;
  %869 = reshape(%868, newshape=[1120]) /* ty=Tensor[(1120), uint64] */;
  %870 = @func_1265(%869) /* ty=(Tensor[(7, 5, 12), float64], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(12, 7, ?), uint64], Tensor[(7, 5, 12), int64]) */;
  %871 = %866.1;
  %872 = %867.2;
  %873 = %870.3;
  (%871, %872, %873, meta[relay.Constant][23] /* ty=Tensor[(1120), uint64] */)
}

def @func_1033(%var_1024: Tensor[(5, 14, 16), uint64]) -> Tensor[(5, 14, 16), bool] {
  %874 = cast(meta[relay.Constant][24] /* ty=Tensor[(5, 14, 16), uint64] */, dtype="bool") /* ty=Tensor[(5, 14, 16), bool] */;
  %875 = shape_of(%var_1024, dtype="int32") /* ty=Tensor[(3), int32] */;
  %876 = cast(%var_1024, dtype="bool") /* ty=Tensor[(5, 14, 16), bool] */;
  %877 = dyn.reshape(%874, %875, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%876, %877) /* ty=Tensor[(5, 14, 16), bool] */
}

def @func_10154() -> Tensor[(7, 5, 12), float32] {
  %878 = @func_5170() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16]) */;
  %878.0
}

def @func_2888(%var_2885: Tensor[(1, 4, 2), float32]) -> (Tensor[(1, 4, 2), float32],) {
  %879 = cast(%var_2885, dtype="float32") /* ty=Tensor[(1, 4, 2), float32] */;
  %880 = atan(%879) /* ty=Tensor[(1, 4, 2), float32] */;
  (%880,)
}

def @func_3651() -> Tensor[(7, 5, 12), uint16] {
  @func_2970() /* ty=Tensor[(7, 5, 12), uint16] */
}

def @func_1265(%var_1201: Tensor[(1120), uint64]) -> (Tensor[(7, 5, 12), float64], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(12, 7, ?), uint64], Tensor[(7, 5, 12), int64]) {
  %881 = @func_1175() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %882 = %881.1;
  %883 = cast(%882, dtype="float64") /* ty=Tensor[(7, 5, 12), float64] */;
  %884 = cast(%var_1201, dtype="uint64") /* ty=Tensor[(1120), uint64] */;
  %885 = reshape(%884, newshape=[5, 14, 16]) /* ty=Tensor[(5, 14, 16), uint64] */;
  %886 = @func_1105() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */;
  %887 = cast(%882, dtype="float32") /* ty=Tensor[(7, 5, 12), float32] */;
  %888 = atanh(%887) /* ty=Tensor[(7, 5, 12), float32] */;
  %889 = cast(%888, dtype="float32") /* ty=Tensor[(7, 5, 12), float32] */;
  %890 = sinh(%889) /* ty=Tensor[(7, 5, 12), float32] */;
  %891 = cast(%888, dtype="int64") /* ty=Tensor[(7, 5, 12), int64] */;
  %892 = shape_of(%890, dtype="int32") /* ty=Tensor[(3), int32] */;
  %893 = cast(%890, dtype="int64") /* ty=Tensor[(7, 5, 12), int64] */;
  %894 = dyn.reshape(%891, %892, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %895 = log2(%883) /* ty=Tensor[(7, 5, 12), float64] */;
  %896 = @func_1033(%885) /* ty=Tensor[(5, 14, 16), bool] */;
  %897 = %886.4;
  %898 = left_shift(%893, %894) /* ty=Tensor[(7, 5, 12), int64] */;
  (%895, %896, %var_1201, %897, %898)
}

def @func_3309() -> Tensor[(5, 14, 16), bool] {
  %899 = @func_1664() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %899.4
}

def @func_5682() -> (Tensor[(70, 6), float64],) {
  %900 = @func_1664() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %901 = %900.0;
  %902 = cast(meta[relay.Constant][25] /* ty=Tensor[(70, 6), uint16] */, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %903 = shape_of(%901, dtype="int32") /* ty=Tensor[(2), int32] */;
  %904 = cast(%901, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %905 = dyn.reshape(%902, %903, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %906 = power(%904, %905) /* ty=Tensor[(70, 6), float64] */;
  (%906,)
}

def @func_3574() -> (Tensor[(70, 6), uint16],) {
  %907 = @func_1175() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %908 = %907.0;
  (%908,)
}

def @func_5292() -> (Tensor[(7, 5, 12), uint16],) {
  %909 = @func_4432() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float64]) */;
  %910 = %909.0;
  (%910,)
}

def @func_7017() -> (Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16]) {
  %911 = @func_6342() /* ty=Tensor[(7, 5, 12), float32] */;
  %912 = cast(%911, dtype="uint16") /* ty=Tensor[(7, 5, 12), uint16] */;
  %913 = cast(%911, dtype="uint16") /* ty=Tensor[(7, 5, 12), uint16] */;
  %914 = reshape(%912, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %915 = reshape(%913, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %916 = @func_380(%914, %915) /* ty=Tensor[(7, 5, 12), uint16] */;
  (%911, %916)
}

def @func_380(%var_375: Tensor[(7, 5, 12), uint16], %var_376: Tensor[(7, 5, 12), uint16]) -> Tensor[(7, 5, 12), uint16] {
  %917 = cast(%var_376, dtype="uint16") /* ty=Tensor[(7, 5, 12), uint16] */;
  %918 = shape_of(%var_375, dtype="int32") /* ty=Tensor[(3), int32] */;
  %919 = cast(%var_375, dtype="uint16") /* ty=Tensor[(7, 5, 12), uint16] */;
  %920 = dyn.reshape(%917, %918, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  logical_xor(%919, %920) /* ty=Tensor[(7, 5, 12), uint16] */
}

def @main(%var_11843: Tensor[(1120), bool]) -> (Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float32], Tensor[(1120), bool], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), float32], Tensor[(7, 4, 8), bool]) {
  %921 = @func_5222() /* ty=(Tensor[(70, 6), bool], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16]) */;
  %922 = cast(%var_11843, dtype="bool") /* ty=Tensor[(1120), bool] */;
  %923 = reshape(%922, newshape=[2, 560]) /* ty=Tensor[(2, 560), bool] */;
  %924 = @func_10429(%923) /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float32], Tensor[(2, 560), float64], Tensor[(70, 6), float64], Tensor[(7, 5, 12), float32]) */;
  %925 = @func_9155() /* ty=(Tensor[(70, 6), uint16],) */;
  %926 = @func_10948() /* ty=(Tensor[(7, 5, 12), float32],) */;
  %927 = cast(meta[relay.Constant][26] /* ty=Tensor[(7, 4, 8), float64] */, dtype="float64") /* ty=Tensor[(7, 4, 8), float64] */;
  %928 = cos(%927) /* ty=Tensor[(7, 4, 8), float64] */;
  %929 = cast(meta[relay.Constant][26] /* ty=Tensor[(7, 4, 8), float64] */, dtype="float32") /* ty=Tensor[(7, 4, 8), float32] */;
  %930 = shape_of(%928, dtype="int32") /* ty=Tensor[(3), int32] */;
  %931 = cast(%928, dtype="float32") /* ty=Tensor[(7, 4, 8), float32] */;
  %932 = dyn.reshape(%929, %930, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %933 = divide(%931, %932) /* ty=Tensor[(7, 4, 8), float32] */;
  %934 = cast(%933, dtype="int16") /* ty=Tensor[(7, 4, 8), int16] */;
  %935 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(7, 4, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %936 = cast(meta[relay.Constant][26] /* ty=Tensor[(7, 4, 8), float64] */, dtype="int16") /* ty=Tensor[(7, 4, 8), int16] */;
  %937 = dyn.reshape(%934, %935, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %938 = bitwise_and(%936, %937) /* ty=Tensor[(7, 4, 8), int16] */;
  %939 = cast(%938, dtype="bool") /* ty=Tensor[(7, 4, 8), bool] */;
  %940 = shape_of(%933, dtype="int32") /* ty=Tensor[(3), int32] */;
  %941 = cast(%933, dtype="bool") /* ty=Tensor[(7, 4, 8), bool] */;
  %942 = dyn.reshape(%939, %940, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %943 = %921.1;
  %944 = %924.1;
  %945 = %925.0;
  %946 = %926.0;
  %947 = greater_equal(%941, %942) /* ty=Tensor[(7, 4, 8), bool] */;
  (%943, %944, %var_11843, %945, %946, %947)
}

def @func_9229() -> (Tensor[(2, 1560), float32], Tensor[(2, 1560), float32]) {
  %948 = @func_7464() /* ty=(Tensor[(70, 6), uint16], Tensor[(15, 8, 13), int16], Tensor[(1, 1560), int16]) */;
  %949 = %948.2;
  %950 = cast(%949, dtype="float32") /* ty=Tensor[(1, 1560), float32] */;
  %951 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 1560), int16] */, dtype="float32") /* ty=Tensor[(2, 1560), float32] */;
  %952 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 1560), int16] */, dtype="float64") /* ty=Tensor[(2, 1560), float64] */;
  %953 = erf(%952) /* ty=Tensor[(2, 1560), float64] */;
  %954 = cast(%953, dtype="float32") /* ty=Tensor[(2, 1560), float32] */;
  %955 = floor_divide(%950, %951) /* ty=Tensor[(2, 1560), float32] */;
  %956 = cosh(%954) /* ty=Tensor[(2, 1560), float32] */;
  (%955, %956)
}

def @func_11345(%var_11338: Tensor[(1050), uint8]) -> (Tensor[(70, 6), uint16], Tensor[(15, 10, 7), uint8], Tensor[(1050), uint8], Tensor[(70, 6), bool]) {
  %957 = @func_3457() /* ty=(Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64]) */;
  %958 = cast(%var_11338, dtype="uint8") /* ty=Tensor[(1050), uint8] */;
  %959 = cast(%var_11338, dtype="uint8") /* ty=Tensor[(1050), uint8] */;
  %960 = reshape(%958, newshape=[15, 10, 7]) /* ty=Tensor[(15, 10, 7), uint8] */;
  %961 = reshape(%959, newshape=[15, 10, 7]) /* ty=Tensor[(15, 10, 7), uint8] */;
  %962 = @func_7604() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(70, 6), bool]) */;
  %963 = %957.0;
  %964 = @func_7638(%960, %961) /* ty=Tensor[(15, 10, 7), uint8] */;
  %965 = %962.1;
  (%963, %964, %var_11338, %965)
}

def @func_6918() -> (Tensor[(7, 5, 12), float64],) {
  %966 = @func_5574() /* ty=(Tensor[(7, 5, 12), float64],) */;
  %967 = %966.0;
  (%967,)
}

def @func_8370() -> (Tensor[(7, 5, 12), float32], Tensor[(70, 6), uint16]) {
  %968 = @func_3642() /* ty=(Tensor[(70, 6), uint16],) */;
  %969 = @func_3041() /* ty=Tensor[(7, 5, 12), float32] */;
  %970 = %968.0;
  (%969, %970)
}

def @func_2513() -> Tensor[(12, 7, ?), uint64] {
  %971 = @func_2033() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(420), float32], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64]) */;
  %971.2
}

def @func_10441() -> (Tensor[(7, 5, 12), uint16], Tensor[(70, 6), bool]) {
  %972 = @func_4857() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float32]) */;
  %973 = @func_3407() /* ty=(Tensor[(70, 6), bool], Tensor[(70, 6), float64], Tensor[(7, 5, 12), float32]) */;
  %974 = %972.0;
  %975 = %973.0;
  (%974, %975)
}

def @func_6111() -> (Tensor[(70, 6), uint16], Tensor[(7, 5, 12), float32]) {
  %976 = @func_5789() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float32], Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), uint16]) */;
  %977 = @func_4085() /* ty=Tensor[(70, 6), uint16] */;
  %978 = %976.1;
  (%977, %978)
}

def @func_5222() -> (Tensor[(70, 6), bool], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16]) {
  %979 = @func_1766() /* ty=(Tensor[(70, 6), bool],) */;
  %980 = %979.0;
  %981 = cast(%980, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %982 = cast(%980, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %983 = reshape(%981, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %984 = reshape(%982, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %985 = @func_380(%983, %984) /* ty=Tensor[(7, 5, 12), uint16] */;
  %986 = @func_4085() /* ty=Tensor[(70, 6), uint16] */;
  (%980, %985, %986)
}

def @func_11618() -> Tensor[(70, 6), uint16] {
  @func_7169() /* ty=Tensor[(70, 6), uint16] */
}

def @func_10948() -> (Tensor[(7, 5, 12), float32],) {
  %987 = @func_8370() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(70, 6), uint16]) */;
  %988 = %987.0;
  (%988,)
}

def @func_6380() -> (Tensor[(1120), uint64],) {
  %989 = @func_1810() /* ty=(Tensor[(1120), uint64], Tensor[(5, 14, 16), bool], Tensor[(70, 6), bool]) */;
  %990 = %989.0;
  (%990,)
}

def @func_4693(%var_4655: Tensor[(56, 20), float32]) -> (Tensor[(7, 5, 12), float32], Tensor[(56, 20), uint16], Tensor[(7, 5, 12), uint16], Tensor[(5, 14, 16), bool]) {
  %991 = @func_3906() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), float32]) */;
  %992 = @func_2107() /* ty=(Tensor[(56, 20), float32], Tensor[(70, 6), bool], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16]) */;
  %993 = %992.0;
  %994 = cast(%var_4655, dtype="uint16") /* ty=Tensor[(56, 20), uint16] */;
  %995 = shape_of(%993, dtype="int32") /* ty=Tensor[(2), int32] */;
  %996 = cast(%993, dtype="uint16") /* ty=Tensor[(56, 20), uint16] */;
  %997 = dyn.reshape(%994, %995, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %998 = @func_3249() /* ty=(Tensor[(7, 5, 12), uint16],) */;
  %999 = @func_1943() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), uint16], Tensor[(420), float32]) */;
  %1000 = %991.1;
  %1001 = multiply(%996, %997) /* ty=Tensor[(56, 20), uint16] */;
  %1002 = %998.0;
  %1003 = %999.0;
  (%1000, %1001, %1002, %1003)
}

def @func_5986() -> (Tensor[(7, 5, 12), float64],) {
  %1004 = @func_5201() /* ty=(Tensor[(7, 5, 12), float64],) */;
  %1005 = %1004.0;
  (%1005,)
}

def @func_5942(%var_5935: Tensor[(1, 10, 1), uint64]) -> (Tensor[(7, 10, 7), uint64],) {
  %1006 = cast(%var_5935, dtype="uint64") /* ty=Tensor[(1, 10, 1), uint64] */;
  %1007 = cast(meta[relay.Constant][28] /* ty=Tensor[(7, 10, 7), uint64] */, dtype="uint64") /* ty=Tensor[(7, 10, 7), uint64] */;
  %1008 = multiply(%1006, %1007) /* ty=Tensor[(7, 10, 7), uint64] */;
  (%1008,)
}

def @func_6342() -> Tensor[(7, 5, 12), float32] {
  %1009 = @func_3352() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float32]) */;
  %1009.1
}

def @func_7604() -> (Tensor[(7, 5, 12), float32], Tensor[(70, 6), bool]) {
  %1010 = @func_6111() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), float32]) */;
  %1011 = @func_3407() /* ty=(Tensor[(70, 6), bool], Tensor[(70, 6), float64], Tensor[(7, 5, 12), float32]) */;
  %1012 = %1010.1;
  %1013 = %1011.0;
  (%1012, %1013)
}

def @func_7464() -> (Tensor[(70, 6), uint16], Tensor[(15, 8, 13), int16], Tensor[(1, 1560), int16]) {
  %1014 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 1560), int16] */, dtype="int16") /* ty=Tensor[(1, 1560), int16] */;
  %1015 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 1560), int16] */, dtype="int16") /* ty=Tensor[(1, 1560), int16] */;
  %1016 = @func_3872() /* ty=Tensor[(70, 6), uint16] */;
  %1017 = cast(%1016, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %1018 = reshape(%1014, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), int16] */;
  %1019 = reshape(%1015, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), int16] */;
  %1020 = reshape(%1017, newshape=[420, 1]) /* ty=Tensor[(420, 1), uint16] */;
  %1021 = @func_3024(%1018, %1019, %1020) /* ty=(Tensor[(15, 8, 13), int16], Tensor[(70, 6), float64], Tensor[(420, 1), uint16], Tensor[(70, 6), uint16]) */;
  %1022 = %1021.0;
  (%1016, %1022, meta[relay.Constant][29] /* ty=Tensor[(1, 1560), int16] */)
}

def @func_7638(%var_7629: Tensor[(15, 10, 7), uint8], %var_7630: Tensor[(15, 10, 7), uint8]) -> Tensor[(15, 10, 7), uint8] {
  %1023 = cast(%var_7630, dtype="uint8") /* ty=Tensor[(15, 10, 7), uint8] */;
  %1024 = shape_of(%var_7629, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1025 = cast(%var_7629, dtype="uint8") /* ty=Tensor[(15, 10, 7), uint8] */;
  %1026 = dyn.reshape(%1023, %1024, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  logical_xor(%1025, %1026) /* ty=Tensor[(15, 10, 7), uint8] */
}

def @func_8185() -> (Tensor[(7, 5, 12), float32], Tensor[(70, 6), uint16]) {
  %1027 = @func_5789() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float32], Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), uint16]) */;
  %1028 = @func_1105() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */;
  %1029 = %1027.1;
  %1030 = %1028.3;
  (%1029, %1030)
}

def @func_1766() -> (Tensor[(70, 6), bool],) {
  %1031 = @func_1553() /* ty=(Tensor[(70, 6), bool], Tensor[(56, 20), uint8]) */;
  %1032 = %1031.0;
  (%1032,)
}

def @func_6807() -> (Tensor[(12, 7, ?), uint64],) {
  %1033 = @func_5181() /* ty=(Tensor[(12, 7, ?), uint64],) */;
  %1034 = %1033.0;
  (%1034,)
}

def @func_4109() -> Tensor[(7, 5, 12), float32] {
  @func_3041() /* ty=Tensor[(7, 5, 12), float32] */
}

def @func_4857() -> (Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float32]) {
  %1035 = @func_2464() /* ty=(Tensor[(70, 6), float32], Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16]) */;
  %1036 = @func_2157() /* ty=(Tensor[(7, 5, 12), float32],) */;
  %1037 = %1035.2;
  %1038 = %1036.0;
  (%1037, %1038)
}

def @func_4085() -> Tensor[(70, 6), uint16] {
  @func_2722() /* ty=Tensor[(70, 6), uint16] */
}

def @func_5805(%var_5796: Tensor[(70, 6), uint16]) -> Tensor[(70, 6), bool] {
  %1039 = @func_3642() /* ty=(Tensor[(70, 6), uint16],) */;
  %1040 = %1039.0;
  %1041 = cast(%var_5796, dtype="bool") /* ty=Tensor[(70, 6), bool] */;
  %1042 = shape_of(%1040, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1043 = cast(%1040, dtype="bool") /* ty=Tensor[(70, 6), bool] */;
  %1044 = dyn.reshape(%1041, %1042, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  not_equal(%1043, %1044) /* ty=Tensor[(70, 6), bool] */
}

def @func_3872() -> Tensor[(70, 6), uint16] {
  %1045 = @func_3457() /* ty=(Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64]) */;
  %1045.0
}

def @func_3457() -> (Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64]) {
  %1046 = @func_1105() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */;
  %1047 = cast(meta[relay.Constant][30] /* ty=Tensor[(1120), uint64] */, dtype="uint64") /* ty=Tensor[(1120), uint64] */;
  %1048 = reshape(%1047, newshape=[1120]) /* ty=Tensor[(1120), uint64] */;
  %1049 = @func_1265(%1048) /* ty=(Tensor[(7, 5, 12), float64], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(12, 7, ?), uint64], Tensor[(7, 5, 12), int64]) */;
  %1050 = %1046.3;
  %1051 = %1049.3;
  (%1050, %1051, meta[relay.Constant][30] /* ty=Tensor[(1120), uint64] */)
}

def @func_5170() -> (Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16]) {
  %1052 = @func_3906() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), float32]) */;
  %1053 = %1052.1;
  %1054 = @func_2666() /* ty=Tensor[(7, 5, 12), uint16] */;
  (%1053, %1054)
}

def @func_1105() -> (Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) {
  %1055 = cast(meta[relay.Constant][31] /* ty=Tensor[(1120), uint64] */, dtype="uint64") /* ty=Tensor[(1120), uint64] */;
  %1056 = reshape(%1055, newshape=[5, 14, 16]) /* ty=Tensor[(5, 14, 16), uint64] */;
  %1057 = cast(meta[relay.Constant][32] /* ty=Tensor[(70, 6), uint16] */, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %1058 = cast(meta[relay.Constant][32] /* ty=Tensor[(70, 6), uint16] */, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %1059 = reshape(%1057, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %1060 = reshape(%1058, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %1061 = cast(meta[relay.Constant][33] /* ty=Tensor[(12, 7, 1), float64] */, dtype="float64") /* ty=Tensor[(12, 7, 1), float64] */;
  %1062 = log10(%1061) /* ty=Tensor[(12, 7, 1), float64] */;
  %1063 = cast(%1062, dtype="float32") /* ty=Tensor[(12, 7, 1), float32] */;
  %1064 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(12, 7, 1), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1065 = cast(meta[relay.Constant][33] /* ty=Tensor[(12, 7, 1), float64] */, dtype="float32") /* ty=Tensor[(12, 7, 1), float32] */;
  %1066 = dyn.reshape(%1063, %1064, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1067 = divide(%1065, %1066) /* ty=Tensor[(12, 7, ?), float32] */;
  %1068 = cast(%1062, dtype="uint64") /* ty=Tensor[(12, 7, 1), uint64] */;
  %1069 = shape_of(%1067, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1070 = cast(%1067, dtype="uint64") /* ty=Tensor[(12, 7, ?), uint64] */;
  %1071 = dyn.reshape(%1068, %1069, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %1072 = @func_1033(%1056) /* ty=Tensor[(5, 14, 16), bool] */;
  %1073 = @func_380(%1059, %1060) /* ty=Tensor[(7, 5, 12), uint16] */;
  %1074 = bitwise_or(%1070, %1071) /* ty=Tensor[(12, 7, ?), uint64] */;
  (%1072, meta[relay.Constant][31] /* ty=Tensor[(1120), uint64] */, %1073, meta[relay.Constant][32] /* ty=Tensor[(70, 6), uint16] */, %1074)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4795() -> (Tensor[(7, 5, 12), int32], Tensor[(7, 5, 12), float64], Tensor[(70, 6), uint64]) {
  %22 = fn () -> (Tensor[(7, 5, 12), int32], Tensor[(7, 5, 12), float64], Tensor[(70, 6), uint64]) {
    %0 = @func_2157() /* ty=(Tensor[(7, 5, 12), float32],) */;
    %1 = %0.0;
    %2 = @func_3457() /* ty=(Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64]) */;
    %3 = %2.0;
    %4 = cast(%3, dtype="int32") /* ty=Tensor[(70, 6), int32] */;
    %5 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
    %6 = cast(%1, dtype="int32") /* ty=Tensor[(7, 5, 12), int32] */;
    %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %8 = subtract(%6, %7) /* ty=Tensor[(7, 5, 12), int32] */;
    %9 = cast(%8, dtype="uint16") /* ty=Tensor[(7, 5, 12), uint16] */;
    %10 = reshape(%9, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
    %11 = @func_3689(%10) /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), float64]) */;
    %12 = cast(%3, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
    %13 = reshape(%12, newshape=[70, 6]) /* ty=Tensor[(70, 6), uint16] */;
    %14 = @func_1298(%13) /* ty=(Tensor[(70, 6), float64], Tensor[(70, 6), uint16]) */;
    %15 = %14.0;
    %16 = cast(%3, dtype="uint64") /* ty=Tensor[(70, 6), uint64] */;
    %17 = shape_of(%15, dtype="int32") /* ty=Tensor[(2), int32] */;
    %18 = cast(%15, dtype="uint64") /* ty=Tensor[(70, 6), uint64] */;
    %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %20 = %11.1;
    %21 = right_shift(%18, %19) /* ty=Tensor[(70, 6), uint64] */;
    (%8, %20, %21)
  };
  %22() /* ty=(Tensor[(7, 5, 12), int32], Tensor[(7, 5, 12), float64], Tensor[(70, 6), uint64]) */
}

def @func_5987() -> (Tensor[(7, 5, 12), float64],) {
  %25 = fn () -> (Tensor[(7, 5, 12), float64],) {
    %23 = @func_5201() /* ty=(Tensor[(7, 5, 12), float64],) */;
    %24 = %23.0;
    (%24,)
  };
  %25() /* ty=(Tensor[(7, 5, 12), float64],) */
}

def @func_9112() -> (Tensor[(70, 6), uint16],) {
  %27 = fn () -> (Tensor[(70, 6), uint16],) {
    %26 = @func_7169() /* ty=Tensor[(70, 6), uint16] */;
    (%26,)
  };
  %27() /* ty=(Tensor[(70, 6), uint16],) */
}

def @func_11196() -> (Tensor[(70, 6), float64],) {
  %28 = @func_3407() /* ty=(Tensor[(70, 6), bool], Tensor[(70, 6), float64], Tensor[(7, 5, 12), float32]) */;
  %29 = %28.1;
  (%29,)
}

def @func_6768() -> Tensor[(70, 6), float64] {
  @func_6766() /* ty=Tensor[(70, 6), float64] */
}

def @func_6919() -> (Tensor[(7, 5, 12), float64],) {
  %32 = fn () -> (Tensor[(7, 5, 12), float64],) {
    %30 = @func_5574() /* ty=(Tensor[(7, 5, 12), float64],) */;
    %31 = %30.0;
    (%31,)
  };
  %32() /* ty=(Tensor[(7, 5, 12), float64],) */
}

def @func_8771() -> Tensor[(7, 5, 12), float32] {
  %33 = @func_3352() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float32]) */;
  %33.1
}

def @func_11347(%var_11346: Tensor[(1050), uint8]) -> (Tensor[(70, 6), uint16], Tensor[(15, 10, 7), uint8], Tensor[(1050), uint8], Tensor[(70, 6), bool]) {
  %43 = fn (%var_11338: Tensor[(1050), uint8]) -> (Tensor[(70, 6), uint16], Tensor[(15, 10, 7), uint8], Tensor[(1050), uint8], Tensor[(70, 6), bool]) {
    %34 = @func_3457() /* ty=(Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64]) */;
    %35 = cast(%var_11338, dtype="uint8") /* ty=Tensor[(1050), uint8] */;
    %36 = cast(%var_11338, dtype="uint8") /* ty=Tensor[(1050), uint8] */;
    %37 = reshape(%35, newshape=[15, 10, 7]) /* ty=Tensor[(15, 10, 7), uint8] */;
    %38 = reshape(%36, newshape=[15, 10, 7]) /* ty=Tensor[(15, 10, 7), uint8] */;
    %39 = @func_7604() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(70, 6), bool]) */;
    %40 = %34.0;
    %41 = @func_7638(%37, %38) /* ty=Tensor[(15, 10, 7), uint8] */;
    %42 = %39.1;
    (%40, %41, %var_11338, %42)
  };
  %43(%var_11346) /* ty=(Tensor[(70, 6), uint16], Tensor[(15, 10, 7), uint8], Tensor[(1050), uint8], Tensor[(70, 6), bool]) */
}

def @func_5595() -> Tensor[(56, 20), int8] {
  %44 = fn () -> Tensor[(56, 20), int8] {
    @func_3924() /* ty=Tensor[(56, 20), int8] */
  };
  %44() /* ty=Tensor[(56, 20), int8] */
}

def @func_7466() -> (Tensor[(70, 6), uint16], Tensor[(15, 8, 13), int16], Tensor[(1, 1560), int16]) {
  @func_7464() /* ty=(Tensor[(70, 6), uint16], Tensor[(15, 8, 13), int16], Tensor[(1, 1560), int16]) */
}

def @func_10661() -> (Tensor[(7, 5, 12), uint16], Tensor[(70, 6), bool], Tensor[(7, 5, 12), float32]) {
  %50 = fn () -> (Tensor[(7, 5, 12), uint16], Tensor[(70, 6), bool], Tensor[(7, 5, 12), float32]) {
    %45 = @func_3407() /* ty=(Tensor[(70, 6), bool], Tensor[(70, 6), float64], Tensor[(7, 5, 12), float32]) */;
    %46 = @func_3906() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), float32]) */;
    %47 = @func_5600() /* ty=Tensor[(7, 5, 12), uint16] */;
    %48 = %45.0;
    %49 = %46.1;
    (%47, %48, %49)
  };
  %50() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(70, 6), bool], Tensor[(7, 5, 12), float32]) */
}

def @func_5067() -> Tensor[(12, 7, ?), uint64] {
  %52 = fn () -> Tensor[(12, 7, ?), uint64] {
    %51 = @func_4296() /* ty=(Tensor[(12, 7, ?), uint64],) */;
    %51.0
  };
  %52() /* ty=Tensor[(12, 7, ?), uint64] */
}

def @func_8512() -> (Tensor[(7, 5, 12), float64], Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), uint16], Tensor[(56, 20), int8]) {
  %53 = @func_3216() /* ty=(Tensor[(7, 5, 12), uint16],) */;
  %54 = @func_3216() /* ty=(Tensor[(7, 5, 12), uint16],) */;
  %55 = @func_4000() /* ty=(Tensor[(12, 7, ?), float64], Tensor[(56, 20), int8]) */;
  %56 = @func_3836() /* ty=Tensor[(7, 5, 12), float64] */;
  %57 = %53.0;
  %58 = %54.0;
  %59 = %55.1;
  (%56, %57, %58, %59)
}

def @func_11126() -> Tensor[(540), uint8] {
  %61 = fn () -> Tensor[(540), uint8] {
    %60 = @func_7931() /* ty=(Tensor[(5, 14, 16), float64], Tensor[(9, 6, 10), bool], Tensor[(540), uint8], Tensor[(11, 8, 14), float64], Tensor[(88), float64], Tensor[(1232), float64]) */;
    %60.2
  };
  %61() /* ty=Tensor[(540), uint8] */
}

def @func_6167(%var_6165: Tensor[(9, 6, 10), uint8]) -> Tensor[(9, 6, 10), bool] {
  @func_6164(%var_6165) /* ty=Tensor[(9, 6, 10), bool] */
}

def @func_9965() -> Tensor[(7, 5, 12), float32] {
  @func_9963() /* ty=Tensor[(7, 5, 12), float32] */
}

def @func_8419() -> (Tensor[(70, 6), float64], Tensor[(7, 5, 12), uint16]) {
  %62 = @func_5866() /* ty=(Tensor[(70, 6), float64], Tensor[(12, 7, ?), bool]) */;
  %63 = @func_4891() /* ty=(Tensor[(56, 20), int8], Tensor[(7, 5, 12), uint16]) */;
  %64 = %62.0;
  %65 = %63.1;
  (%64, %65)
}

def @func_7933() -> (Tensor[(5, 14, 16), float64], Tensor[(9, 6, 10), bool], Tensor[(540), uint8], Tensor[(11, 8, 14), float64], Tensor[(88), float64], Tensor[(1232), float64]) {
  @func_7931() /* ty=(Tensor[(5, 14, 16), float64], Tensor[(9, 6, 10), bool], Tensor[(540), uint8], Tensor[(11, 8, 14), float64], Tensor[(88), float64], Tensor[(1232), float64]) */
}

def @func_11159() -> (Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), uint16]) {
  %66 = @func_5600() /* ty=Tensor[(7, 5, 12), uint16] */;
  %67 = @func_5600() /* ty=Tensor[(7, 5, 12), uint16] */;
  (%66, %67)
}

def @func_9683() -> (Tensor[(5, 14, 16), float32], Tensor[(12, 7, ?), uint64], Tensor[(7, 5, 12), float64]) {
  %68 = @func_7267() /* ty=(Tensor[(7, 5, 12), uint64], Tensor[(7, 5, 12), float64], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), float64], Tensor[(70, 6), bool]) */;
  %69 = @func_9424() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float64], Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float64]) */;
  %70 = %68.3;
  %71 = @func_3478() /* ty=Tensor[(12, 7, ?), uint64] */;
  %72 = %69.4;
  (%70, %71, %72)
}

def @func_11532() -> (Tensor[(7, 5, 12), float32],) {
  %73 = @func_7819() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float64]) */;
  %74 = %73.0;
  (%74,)
}

def @func_3782(%var_3781: Tensor[(7, 14, 12), int32]) -> (Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), uint16], Tensor[(5, 14, 16), bool], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(7, 14, 12), float32]) {
  %94 = fn (%var_3738: Tensor[(7, 14, 12), int32]) -> (Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), uint16], Tensor[(5, 14, 16), bool], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(7, 14, 12), float32]) {
    %75 = @func_3216() /* ty=(Tensor[(7, 5, 12), uint16],) */;
    %76 = @func_3309() /* ty=Tensor[(5, 14, 16), bool] */;
    %77 = cast(%76, dtype="uint64") /* ty=Tensor[(5, 14, 16), uint64] */;
    %78 = reshape(%77, newshape=[5, 14, 16]) /* ty=Tensor[(5, 14, 16), uint64] */;
    %79 = @func_3457() /* ty=(Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64]) */;
    %80 = %79.0;
    %81 = cast(%80, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
    %82 = reshape(%81, newshape=[70, 6]) /* ty=Tensor[(70, 6), uint16] */;
    %83 = @func_1298(%82) /* ty=(Tensor[(70, 6), float64], Tensor[(70, 6), uint16]) */;
    %84 = cast(%var_3738, dtype="bool") /* ty=Tensor[(7, 14, 12), bool] */;
    %85 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(7, 14, 12), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %86 = cast(meta[relay.Constant][0] /* ty=Tensor[(7, 14, 12), int32] */, dtype="bool") /* ty=Tensor[(7, 14, 12), bool] */;
    %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %88 = equal(%86, %87) /* ty=Tensor[(7, 14, 12), bool] */;
    %89 = cast(%88, dtype="float32") /* ty=Tensor[(7, 14, 12), float32] */;
    %90 = %75.0;
    %91 = @func_1033(%78) /* ty=Tensor[(5, 14, 16), bool] */;
    %92 = %83.1;
    %93 = sqrt(%89) /* ty=Tensor[(7, 14, 12), float32] */;
    (%76, %90, %91, %80, %92, %93)
  };
  %94(%var_3781) /* ty=(Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), uint16], Tensor[(5, 14, 16), bool], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(7, 14, 12), float32]) */
}

def @func_7169() -> Tensor[(70, 6), uint16] {
  %95 = @func_1664() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %95.2
}

def @func_8037() -> (Tensor[(7, 5, 12), float32],) {
  @func_8035() /* ty=(Tensor[(7, 5, 12), float32],) */
}

def @func_11442(%var_11441: Tensor[(3, 1, 10), float64]) -> (Tensor[(3, 1, 10), float64], Tensor[(70, 6), uint16]) {
  %100 = fn (%var_11426: Tensor[(3, 1, 10), float64]) -> (Tensor[(3, 1, 10), float64], Tensor[(70, 6), uint16]) {
    %96 = cast(%var_11426, dtype="float64") /* ty=Tensor[(3, 1, 10), float64] */;
    %97 = @func_3642() /* ty=(Tensor[(70, 6), uint16],) */;
    %98 = sqrt(%96) /* ty=Tensor[(3, 1, 10), float64] */;
    %99 = %97.0;
    (%98, %99)
  };
  %100(%var_11441) /* ty=(Tensor[(3, 1, 10), float64], Tensor[(70, 6), uint16]) */
}

def @func_3733() -> (Tensor[(5, 14, 16), float32], Tensor[(1120), uint64]) {
  @func_3731() /* ty=(Tensor[(5, 14, 16), float32], Tensor[(1120), uint64]) */
}

def @func_4858() -> (Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float32]) {
  %105 = fn () -> (Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float32]) {
    %101 = @func_2464() /* ty=(Tensor[(70, 6), float32], Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16]) */;
    %102 = @func_2157() /* ty=(Tensor[(7, 5, 12), float32],) */;
    %103 = %101.2;
    %104 = %102.0;
    (%103, %104)
  };
  %105() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float32]) */
}

def @func_5789() -> (Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float32], Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), uint16]) {
  %106 = @func_4109() /* ty=Tensor[(7, 5, 12), float32] */;
  %107 = cast(%106, dtype="uint16") /* ty=Tensor[(7, 5, 12), uint16] */;
  %108 = reshape(%107, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %109 = @func_4586(%108) /* ty=(Tensor[(7, 5, 12), float64], Tensor[(7, 5, 12), float32]) */;
  %110 = @func_3731() /* ty=(Tensor[(5, 14, 16), float32], Tensor[(1120), uint64]) */;
  %111 = @func_4857() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float32]) */;
  %112 = %109.1;
  %113 = %110.0;
  %114 = %111.0;
  (%106, %112, %113, %114)
}

def @func_10459() -> (Tensor[(70, 6), uint16],) {
  @func_10457() /* ty=(Tensor[(70, 6), uint16],) */
}

def @func_8514() -> (Tensor[(7, 5, 12), float64], Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), uint16], Tensor[(56, 20), int8]) {
  @func_8512() /* ty=(Tensor[(7, 5, 12), float64], Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), uint16], Tensor[(56, 20), int8]) */
}

def @func_5602() -> Tensor[(7, 5, 12), uint16] {
  @func_5600() /* ty=Tensor[(7, 5, 12), uint16] */
}

def @func_11050(%var_11048: uint64, %var_11049: Tensor[(4, 15, 3), uint64]) -> (Tensor[(4, 15, 3), uint64], Tensor[(4, 15, 3), float32], Tensor[(7, 5, 12), float32], Tensor[(12, 7, ?), bool], Tensor[(70, 6), float32]) {
  @func_11046(%var_11048, %var_11049) /* ty=(Tensor[(4, 15, 3), uint64], Tensor[(4, 15, 3), float32], Tensor[(7, 5, 12), float32], Tensor[(12, 7, ?), bool], Tensor[(70, 6), float32]) */
}

def @func_3528(%var_3527: Tensor[(7, 5, 12), float32]) -> (Tensor[(7, 5, 12), uint64], Tensor[(7, 5, 12), float32]) {
  %124 = fn (%var_3513: Tensor[(7, 5, 12), float32]) -> (Tensor[(7, 5, 12), uint64], Tensor[(7, 5, 12), float32]) {
    %115 = @func_2157() /* ty=(Tensor[(7, 5, 12), float32],) */;
    %116 = %115.0;
    %117 = cast(%var_3513, dtype="uint64") /* ty=Tensor[(7, 5, 12), uint64] */;
    %118 = shape_of(%116, dtype="int32") /* ty=Tensor[(3), int32] */;
    %119 = cast(%116, dtype="uint64") /* ty=Tensor[(7, 5, 12), uint64] */;
    %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %121 = @func_2157() /* ty=(Tensor[(7, 5, 12), float32],) */;
    %122 = bitwise_xor(%119, %120) /* ty=Tensor[(7, 5, 12), uint64] */;
    %123 = %121.0;
    (%122, %123)
  };
  %124(%var_3527) /* ty=(Tensor[(7, 5, 12), uint64], Tensor[(7, 5, 12), float32]) */
}

def @func_6222(%var_6220: Tensor[(15, 15, 9), float64]) -> (Tensor[(15, 15, 9), float64],) {
  @func_6219(%var_6220) /* ty=(Tensor[(15, 15, 9), float64],) */
}

def @func_8256() -> (Tensor[(56, 20), float64],) {
  %125 = @func_4891() /* ty=(Tensor[(56, 20), int8], Tensor[(7, 5, 12), uint16]) */;
  %126 = %125.0;
  %127 = cast(%126, dtype="float32") /* ty=Tensor[(56, 20), float32] */;
  %128 = log10(%127) /* ty=Tensor[(56, 20), float32] */;
  %129 = cast(%128, dtype="float64") /* ty=Tensor[(56, 20), float64] */;
  %130 = acosh(%129) /* ty=Tensor[(56, 20), float64] */;
  %131 = cast(%130, dtype="float64") /* ty=Tensor[(56, 20), float64] */;
  %132 = sqrt(%131) /* ty=Tensor[(56, 20), float64] */;
  (%132,)
}

def @func_6380() -> (Tensor[(1120), uint64],) {
  %133 = @func_1810() /* ty=(Tensor[(1120), uint64], Tensor[(5, 14, 16), bool], Tensor[(70, 6), bool]) */;
  %134 = %133.0;
  (%134,)
}

def @func_9503(%var_9501: Tensor[(1, 4, 8), float32], %var_9502: Tensor[(7, 4, 8), float32]) -> (Tensor[(8, 4, 8), float32], Tensor[(7, 4, 8), uint64]) {
  %141 = fn (%var_9485: Tensor[(1, 4, 8), float32], %var_9492: Tensor[(7, 4, 8), float32]) -> (Tensor[(8, 4, 8), float32], Tensor[(7, 4, 8), uint64]) {
    %135 = cast(%var_9485, dtype="float32") /* ty=Tensor[(1, 4, 8), float32] */;
    %136 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 4, 8), float32] */, dtype="float32") /* ty=Tensor[(8, 4, 8), float32] */;
    %137 = cast(%var_9485, dtype="uint64") /* ty=Tensor[(1, 4, 8), uint64] */;
    %138 = cast(%var_9492, dtype="uint64") /* ty=Tensor[(7, 4, 8), uint64] */;
    %139 = mod(%135, %136) /* ty=Tensor[(8, 4, 8), float32] */;
    %140 = multiply(%137, %138) /* ty=Tensor[(7, 4, 8), uint64] */;
    (%139, %140)
  };
  %141(%var_9501, %var_9502) /* ty=(Tensor[(8, 4, 8), float32], Tensor[(7, 4, 8), uint64]) */
}

def @func_7515(%var_7513: Tensor[(1183), float32]) -> (Tensor[(7, 5, 12), float64], Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), uint16], Tensor[(13, 13, 7), float32], Tensor[(1183), float32], Tensor[(7, 5, 12), uint16]) {
  @func_7512(%var_7513) /* ty=(Tensor[(7, 5, 12), float64], Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), uint16], Tensor[(13, 13, 7), float32], Tensor[(1183), float32], Tensor[(7, 5, 12), uint16]) */
}

def @func_10429(%var_10410: Tensor[(2, 560), bool]) -> (Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float32], Tensor[(2, 560), float64], Tensor[(70, 6), float64], Tensor[(7, 5, 12), float32]) {
  %142 = @func_9424() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float64], Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float64]) */;
  %143 = @func_4994() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(2, 560), bool]) */;
  %144 = %143.1;
  %145 = cast(%var_10410, dtype="float64") /* ty=Tensor[(2, 560), float64] */;
  %146 = shape_of(%144, dtype="int32") /* ty=Tensor[(2), int32] */;
  %147 = cast(%144, dtype="float64") /* ty=Tensor[(2, 560), float64] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %149 = @func_6078() /* ty=(Tensor[(70, 6), float64],) */;
  %150 = %149.0;
  %151 = cast(%150, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %152 = @func_4857() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float32]) */;
  %153 = %142.3;
  %154 = @func_2728() /* ty=Tensor[(7, 5, 12), float32] */;
  %155 = @func_3041() /* ty=Tensor[(7, 5, 12), float32] */;
  %156 = mod(%147, %148) /* ty=Tensor[(2, 560), float64] */;
  %157 = acos(%151) /* ty=Tensor[(70, 6), float64] */;
  %158 = %152.1;
  (%153, %154, %155, %156, %157, %158)
}

def @func_1175() -> (Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) {
  %159 = @func_1105() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */;
  %160 = %159.3;
  %161 = cast(%160, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %162 = cast(%160, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %163 = reshape(%161, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %164 = reshape(%162, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %165 = @func_380(%163, %164) /* ty=Tensor[(7, 5, 12), uint16] */;
  (%160, %165)
}

def @func_9575() -> (Tensor[(7, 5, 12), float64],) {
  @func_9573() /* ty=(Tensor[(7, 5, 12), float64],) */
}

def @func_5575() -> (Tensor[(7, 5, 12), float64],) {
  %168 = fn () -> (Tensor[(7, 5, 12), float64],) {
    %166 = @func_5201() /* ty=(Tensor[(7, 5, 12), float64],) */;
    %167 = %166.0;
    (%167,)
  };
  %168() /* ty=(Tensor[(7, 5, 12), float64],) */
}

def @func_1268(%var_1266: Tensor[(1120), uint64]) -> (Tensor[(7, 5, 12), float64], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(12, 7, ?), uint64], Tensor[(7, 5, 12), int64]) {
  @func_1265(%var_1266) /* ty=(Tensor[(7, 5, 12), float64], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(12, 7, ?), uint64], Tensor[(7, 5, 12), int64]) */
}

def @func_3218() -> (Tensor[(7, 5, 12), uint16],) {
  @func_3216() /* ty=(Tensor[(7, 5, 12), uint16],) */
}

def @func_9573() -> (Tensor[(7, 5, 12), float64],) {
  %169 = @func_3836() /* ty=Tensor[(7, 5, 12), float64] */;
  (%169,)
}

def @func_2277(%var_2223: Tensor[(1120), uint64], %var_2255: Tensor[(70, 6), bool]) -> (Tensor[(70, 6), bool], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), float32], Tensor[(12, 7, ?), uint64], Tensor[(70, 6), int32]) {
  %170 = @func_1766() /* ty=(Tensor[(70, 6), bool],) */;
  %171 = cast(%var_2223, dtype="uint64") /* ty=Tensor[(1120), uint64] */;
  %172 = reshape(%171, newshape=[5, 14, 16]) /* ty=Tensor[(5, 14, 16), uint64] */;
  %173 = @func_1105() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */;
  %174 = @func_1175() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %175 = @func_1912() /* ty=(Tensor[(70, 6), bool], Tensor[(1120), uint64], Tensor[(70, 6), float64], Tensor[(70, 6), float32]) */;
  %176 = @func_1105() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */;
  %177 = @func_1766() /* ty=(Tensor[(70, 6), bool],) */;
  %178 = %177.0;
  %179 = cast(%178, dtype="float32") /* ty=Tensor[(70, 6), float32] */;
  %180 = log10(%179) /* ty=Tensor[(70, 6), float32] */;
  %181 = cast(%178, dtype="bool") /* ty=Tensor[(70, 6), bool] */;
  %182 = shape_of(%180, dtype="int32") /* ty=Tensor[(2), int32] */;
  %183 = cast(%180, dtype="bool") /* ty=Tensor[(70, 6), bool] */;
  %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %185 = logical_or(%183, %184) /* ty=Tensor[(70, 6), bool] */;
  %186 = cast(%var_2255, dtype="int32") /* ty=Tensor[(70, 6), int32] */;
  %187 = shape_of(%185, dtype="int32") /* ty=Tensor[(2), int32] */;
  %188 = cast(%185, dtype="int32") /* ty=Tensor[(70, 6), int32] */;
  %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %190 = %170.0;
  %191 = @func_1033(%172) /* ty=Tensor[(5, 14, 16), bool] */;
  %192 = %173.2;
  %193 = %174.0;
  %194 = %175.3;
  %195 = %176.4;
  %196 = subtract(%188, %189) /* ty=Tensor[(70, 6), int32] */;
  (%190, %191, %var_2223, %192, %193, %194, %195, %196)
}

def @func_2034() -> (Tensor[(7, 5, 12), uint16], Tensor[(420), float32], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64]) {
  %205 = fn () -> (Tensor[(7, 5, 12), uint16], Tensor[(420), float32], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64]) {
    %197 = @func_1175() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
    %198 = @func_1943() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), uint16], Tensor[(420), float32]) */;
    %199 = cast(meta[relay.Constant][2] /* ty=Tensor[(1120), uint64] */, dtype="uint64") /* ty=Tensor[(1120), uint64] */;
    %200 = reshape(%199, newshape=[1120]) /* ty=Tensor[(1120), uint64] */;
    %201 = @func_1265(%200) /* ty=(Tensor[(7, 5, 12), float64], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(12, 7, ?), uint64], Tensor[(7, 5, 12), int64]) */;
    %202 = %197.1;
    %203 = %198.2;
    %204 = %201.3;
    (%202, %203, %204, meta[relay.Constant][2] /* ty=Tensor[(1120), uint64] */)
  };
  %205() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(420), float32], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64]) */
}

def @func_8558(%var_8556: Tensor[(56, 20), int8], %var_8557: Tensor[(56, 20), int8]) -> (Tensor[(56, 20), float32], Tensor[(56, 20), float64]) {
  %217 = fn (%var_8540: Tensor[(56, 20), int8], %var_8549: Tensor[(56, 20), int8]) -> (Tensor[(56, 20), float32], Tensor[(56, 20), float64]) {
    %206 = @func_5594() /* ty=Tensor[(56, 20), int8] */;
    %207 = cast(%var_8540, dtype="float32") /* ty=Tensor[(56, 20), float32] */;
    %208 = shape_of(%206, dtype="int32") /* ty=Tensor[(2), int32] */;
    %209 = cast(%206, dtype="float32") /* ty=Tensor[(56, 20), float32] */;
    %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %211 = cast(%var_8549, dtype="float64") /* ty=Tensor[(56, 20), float64] */;
    %212 = shape_of(%var_8540, dtype="int32") /* ty=Tensor[(2), int32] */;
    %213 = cast(%var_8540, dtype="float64") /* ty=Tensor[(56, 20), float64] */;
    %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %215 = floor_mod(%209, %210) /* ty=Tensor[(56, 20), float32] */;
    %216 = minimum(%213, %214) /* ty=Tensor[(56, 20), float64] */;
    (%215, %216)
  };
  %217(%var_8556, %var_8557) /* ty=(Tensor[(56, 20), float32], Tensor[(56, 20), float64]) */
}

def @func_3851() -> Tensor[(12, 7, ?), uint64] {
  @func_2513() /* ty=Tensor[(12, 7, ?), uint64] */
}

def @func_11603() -> (Tensor[(7, 5, 12), float32],) {
  %218 = @func_10948() /* ty=(Tensor[(7, 5, 12), float32],) */;
  %219 = %218.0;
  (%219,)
}

def @func_9231() -> (Tensor[(2, 1560), float32], Tensor[(2, 1560), float32]) {
  @func_9229() /* ty=(Tensor[(2, 1560), float32], Tensor[(2, 1560), float32]) */
}

def @func_10918() -> (Tensor[(56, 20), float64], Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16]) {
  %228 = fn () -> (Tensor[(56, 20), float64], Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16]) {
    %220 = @func_8256() /* ty=(Tensor[(56, 20), float64],) */;
    %221 = @func_3906() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), float32]) */;
    %222 = %221.1;
    %223 = cast(%222, dtype="float32") /* ty=Tensor[(7, 5, 12), float32] */;
    %224 = reshape(%223, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), float32] */;
    %225 = @func_7971(%224) /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(10), int64], Tensor[(630), int64]) */;
    %226 = %220.0;
    %227 = %225.0;
    (%226, %222, %227)
  };
  %228() /* ty=(Tensor[(56, 20), float64], Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16]) */
}

def @func_2159() -> (Tensor[(7, 5, 12), float32],) {
  @func_2157() /* ty=(Tensor[(7, 5, 12), float32],) */
}

def @func_5293() -> (Tensor[(7, 5, 12), uint16],) {
  %231 = fn () -> (Tensor[(7, 5, 12), uint16],) {
    %229 = @func_4432() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float64]) */;
    %230 = %229.0;
    (%230,)
  };
  %231() /* ty=(Tensor[(7, 5, 12), uint16],) */
}

def @func_3853() -> Tensor[(12, 7, ?), uint64] {
  @func_3851() /* ty=Tensor[(12, 7, ?), uint64] */
}

def @func_5203() -> (Tensor[(7, 5, 12), float64],) {
  @func_5201() /* ty=(Tensor[(7, 5, 12), float64],) */
}

def @func_7971(%var_7959: Tensor[(7, 5, 12), float32]) -> (Tensor[(7, 5, 12), uint16], Tensor[(10), int64], Tensor[(630), int64]) {
  %232 = @func_2464() /* ty=(Tensor[(70, 6), float32], Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16]) */;
  %233 = %232.1;
  %234 = cast(%var_7959, dtype="uint16") /* ty=Tensor[(7, 5, 12), uint16] */;
  %235 = shape_of(%233, dtype="int32") /* ty=Tensor[(3), int32] */;
  %236 = cast(%233, dtype="uint16") /* ty=Tensor[(7, 5, 12), uint16] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %238 = cast(%233, dtype="float64") /* ty=Tensor[(7, 5, 12), float64] */;
  %239 = cast(meta[relay.Constant][3] /* ty=Tensor[(630), int64] */, dtype="int64") /* ty=Tensor[(630), int64] */;
  %240 = reshape(%238, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), float64] */;
  %241 = reshape(%239, newshape=[10, 63]) /* ty=Tensor[(10, 63), int64] */;
  %242 = @func_6703(%240, %241) /* ty=(Tensor[(7, 5, 12), bool], Tensor[(7, 5, 12), uint16], Tensor[(7, 9, 10), uint8], Tensor[(10), int64], Tensor[(10, 63), int64]) */;
  %243 = maximum(%236, %237) /* ty=Tensor[(7, 5, 12), uint16] */;
  %244 = %242.3;
  (%243, %244, meta[relay.Constant][3] /* ty=Tensor[(630), int64] */)
}

def @func_9156() -> (Tensor[(70, 6), uint16],) {
  %246 = fn () -> (Tensor[(70, 6), uint16],) {
    %245 = @func_2722() /* ty=Tensor[(70, 6), uint16] */;
    (%245,)
  };
  %246() /* ty=(Tensor[(70, 6), uint16],) */
}

def @func_4695(%var_4694: Tensor[(56, 20), float32]) -> (Tensor[(7, 5, 12), float32], Tensor[(56, 20), uint16], Tensor[(7, 5, 12), uint16], Tensor[(5, 14, 16), bool]) {
  %260 = fn (%var_4655: Tensor[(56, 20), float32]) -> (Tensor[(7, 5, 12), float32], Tensor[(56, 20), uint16], Tensor[(7, 5, 12), uint16], Tensor[(5, 14, 16), bool]) {
    %247 = @func_3906() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), float32]) */;
    %248 = @func_2107() /* ty=(Tensor[(56, 20), float32], Tensor[(70, 6), bool], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16]) */;
    %249 = %248.0;
    %250 = cast(%var_4655, dtype="uint16") /* ty=Tensor[(56, 20), uint16] */;
    %251 = shape_of(%249, dtype="int32") /* ty=Tensor[(2), int32] */;
    %252 = cast(%249, dtype="uint16") /* ty=Tensor[(56, 20), uint16] */;
    %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %254 = @func_3249() /* ty=(Tensor[(7, 5, 12), uint16],) */;
    %255 = @func_1943() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), uint16], Tensor[(420), float32]) */;
    %256 = %247.1;
    %257 = multiply(%252, %253) /* ty=Tensor[(56, 20), uint16] */;
    %258 = %254.0;
    %259 = %255.0;
    (%256, %257, %258, %259)
  };
  %260(%var_4694) /* ty=(Tensor[(7, 5, 12), float32], Tensor[(56, 20), uint16], Tensor[(7, 5, 12), uint16], Tensor[(5, 14, 16), bool]) */
}

def @func_11724() -> (Tensor[(7, 5, 12), float64], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float64]) {
  %261 = @func_10660() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(70, 6), bool], Tensor[(7, 5, 12), float32]) */;
  %262 = @func_5986() /* ty=(Tensor[(7, 5, 12), float64],) */;
  %263 = @func_7745() /* ty=Tensor[(7, 5, 12), float64] */;
  %264 = @func_9834() /* ty=Tensor[(70, 6), uint16] */;
  %265 = %261.2;
  %266 = %262.0;
  (%263, %264, %265, %266)
}

def @func_4933(%var_4931: Tensor[(11, 8, 1), float64], %var_4932: Tensor[(11, 8, 14), float64]) -> Tensor[(11, 8, 14), float64] {
  %269 = fn (%var_4913: Tensor[(11, 8, 1), float64], %var_4914: Tensor[(11, 8, 14), float64]) -> Tensor[(11, 8, 14), float64] {
    %267 = cast(%var_4913, dtype="float64") /* ty=Tensor[(11, 8, 1), float64] */;
    %268 = cast(%var_4914, dtype="float64") /* ty=Tensor[(11, 8, 14), float64] */;
    floor_mod(%267, %268) /* ty=Tensor[(11, 8, 14), float64] */
  };
  %269(%var_4931, %var_4932) /* ty=Tensor[(11, 8, 14), float64] */
}

def @func_6809() -> (Tensor[(12, 7, ?), uint64],) {
  @func_6807() /* ty=(Tensor[(12, 7, ?), uint64],) */
}

def @func_384(%var_382: Tensor[(7, 5, 12), uint16], %var_383: Tensor[(7, 5, 12), uint16]) -> Tensor[(7, 5, 12), uint16] {
  @func_380(%var_382, %var_383) /* ty=Tensor[(7, 5, 12), uint16] */
}

def @func_7739() -> (Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), uint16]) {
  %273 = fn () -> (Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), uint16]) {
    %270 = @func_3216() /* ty=(Tensor[(7, 5, 12), uint16],) */;
    %271 = @func_7727() /* ty=Tensor[(5, 14, 16), bool] */;
    %272 = %270.0;
    (%271, %272)
  };
  %273() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), uint16]) */
}

def @func_8421() -> (Tensor[(70, 6), float64], Tensor[(7, 5, 12), uint16]) {
  @func_8419() /* ty=(Tensor[(70, 6), float64], Tensor[(7, 5, 12), uint16]) */
}

def @func_11534() -> (Tensor[(7, 5, 12), float32],) {
  @func_11532() /* ty=(Tensor[(7, 5, 12), float32],) */
}

def @func_3309() -> Tensor[(5, 14, 16), bool] {
  %274 = @func_1664() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %274.4
}

def @func_2667() -> Tensor[(7, 5, 12), uint16] {
  %276 = fn () -> Tensor[(7, 5, 12), uint16] {
    %275 = @func_2033() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(420), float32], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64]) */;
    %275.0
  };
  %276() /* ty=Tensor[(7, 5, 12), uint16] */
}

def @func_6382() -> (Tensor[(1120), uint64],) {
  @func_6380() /* ty=(Tensor[(1120), uint64],) */
}

def @func_8258() -> (Tensor[(56, 20), float64],) {
  @func_8256() /* ty=(Tensor[(56, 20), float64],) */
}

def @func_5652(%var_5650: Tensor[(1, 1, 10), int64], %var_5651: Tensor[(7, 9, 10), int64]) -> Tensor[(7, 9, 10), uint8] {
  %282 = fn (%var_5615: Tensor[(1, 1, 10), int64], %var_5616: Tensor[(7, 9, 10), int64]) -> Tensor[(7, 9, 10), uint8] {
    %277 = cast(%var_5615, dtype="bool") /* ty=Tensor[(1, 1, 10), bool] */;
    %278 = cast(%var_5616, dtype="bool") /* ty=Tensor[(7, 9, 10), bool] */;
    %279 = equal(%277, %278) /* ty=Tensor[(7, 9, 10), bool] */;
    %280 = cast(%var_5615, dtype="uint8") /* ty=Tensor[(1, 1, 10), uint8] */;
    %281 = cast(%279, dtype="uint8") /* ty=Tensor[(7, 9, 10), uint8] */;
    right_shift(%280, %281) /* ty=Tensor[(7, 9, 10), uint8] */
  };
  %282(%var_5650, %var_5651) /* ty=Tensor[(7, 9, 10), uint8] */
}

def @func_3908() -> (Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), float32]) {
  @func_3906() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), float32]) */
}

def @func_9865() -> (Tensor[(5, 14, 16), bool],) {
  %285 = fn () -> (Tensor[(5, 14, 16), bool],) {
    %283 = @func_1943() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), uint16], Tensor[(420), float32]) */;
    %284 = %283.0;
    (%284,)
  };
  %285() /* ty=(Tensor[(5, 14, 16), bool],) */
}

def @func_3311() -> Tensor[(5, 14, 16), bool] {
  @func_3309() /* ty=Tensor[(5, 14, 16), bool] */
}

def @func_11275() -> (Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16], Tensor[(7, 9, 10), uint8], Tensor[(630), int64], Tensor[(5, 14, 16), float32], Tensor[(70, 6), float32]) {
  %307 = fn () -> (Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16], Tensor[(7, 9, 10), uint8], Tensor[(630), int64], Tensor[(5, 14, 16), float32], Tensor[(70, 6), float32]) {
    %286 = @func_3906() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), float32]) */;
    %287 = @func_10140() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), bool], Tensor[(5, 14, 16), bool]) */;
    %288 = @func_7169() /* ty=Tensor[(70, 6), uint16] */;
    %289 = cast(%288, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
    %290 = cast(meta[relay.Constant][4] /* ty=Tensor[(630), int64] */, dtype="int64") /* ty=Tensor[(630), int64] */;
    %291 = reshape(%289, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), float64] */;
    %292 = reshape(%290, newshape=[10, 63]) /* ty=Tensor[(10, 63), int64] */;
    %293 = @func_6703(%291, %292) /* ty=(Tensor[(7, 5, 12), bool], Tensor[(7, 5, 12), uint16], Tensor[(7, 9, 10), uint8], Tensor[(10), int64], Tensor[(10, 63), int64]) */;
    %294 = cast(meta[relay.Constant][5] /* ty=Tensor[(1120), uint64] */, dtype="uint64") /* ty=Tensor[(1120), uint64] */;
    %295 = reshape(%294, newshape=[5, 14, 16]) /* ty=Tensor[(5, 14, 16), uint64] */;
    %296 = @func_1033(%295) /* ty=Tensor[(5, 14, 16), bool] */;
    %297 = cast(meta[relay.Constant][5] /* ty=Tensor[(1120), uint64] */, dtype="float32") /* ty=Tensor[(1120), float32] */;
    %298 = shape_of(%296, dtype="int32") /* ty=Tensor[(3), int32] */;
    %299 = cast(%296, dtype="float32") /* ty=Tensor[(5, 14, 16), float32] */;
    %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %301 = cast(%288, dtype="float32") /* ty=Tensor[(70, 6), float32] */;
    %302 = %286.1;
    %303 = %287.1;
    %304 = %293.2;
    %305 = power(%299, %300) /* ty=Tensor[(5, 14, 16), float32] */;
    %306 = atanh(%301) /* ty=Tensor[(70, 6), float32] */;
    (%302, %303, %304, meta[relay.Constant][4] /* ty=Tensor[(630), int64] */, %305, %306)
  };
  %307() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16], Tensor[(7, 9, 10), uint8], Tensor[(630), int64], Tensor[(5, 14, 16), float32], Tensor[(70, 6), float32]) */
}

def @func_2466() -> (Tensor[(70, 6), float32], Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16]) {
  @func_2464() /* ty=(Tensor[(70, 6), float32], Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16]) */
}

def @func_9229() -> (Tensor[(2, 1560), float32], Tensor[(2, 1560), float32]) {
  %308 = @func_7464() /* ty=(Tensor[(70, 6), uint16], Tensor[(15, 8, 13), int16], Tensor[(1, 1560), int16]) */;
  %309 = %308.2;
  %310 = cast(%309, dtype="float32") /* ty=Tensor[(1, 1560), float32] */;
  %311 = cast(meta[relay.Constant][6] /* ty=Tensor[(2, 1560), int16] */, dtype="float32") /* ty=Tensor[(2, 1560), float32] */;
  %312 = cast(meta[relay.Constant][6] /* ty=Tensor[(2, 1560), int16] */, dtype="float64") /* ty=Tensor[(2, 1560), float64] */;
  %313 = erf(%312) /* ty=Tensor[(2, 1560), float64] */;
  %314 = cast(%313, dtype="float32") /* ty=Tensor[(2, 1560), float32] */;
  %315 = floor_divide(%310, %311) /* ty=Tensor[(2, 1560), float32] */;
  %316 = cosh(%314) /* ty=Tensor[(2, 1560), float32] */;
  (%315, %316)
}

def @func_1177() -> (Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) {
  @func_1175() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */
}

def @func_11726() -> (Tensor[(7, 5, 12), float64], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float64]) {
  @func_11724() /* ty=(Tensor[(7, 5, 12), float64], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float64]) */
}

def @func_8187() -> (Tensor[(7, 5, 12), float32], Tensor[(70, 6), uint16]) {
  @func_8185() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(70, 6), uint16]) */
}

def @func_3216() -> (Tensor[(7, 5, 12), uint16],) {
  %317 = @func_2970() /* ty=Tensor[(7, 5, 12), uint16] */;
  (%317,)
}

def @func_3042() -> Tensor[(7, 5, 12), float32] {
  %318 = fn () -> Tensor[(7, 5, 12), float32] {
    @func_2728() /* ty=Tensor[(7, 5, 12), float32] */
  };
  %318() /* ty=Tensor[(7, 5, 12), float32] */
}

def @func_8965() -> (Tensor[(7, 5, 12), uint16],) {
  %319 = @func_5360() /* ty=Tensor[(7, 5, 12), uint16] */;
  (%319,)
}

def @func_8230() -> Tensor[(7, 5, 12), float32] {
  @func_8228() /* ty=Tensor[(7, 5, 12), float32] */
}

def @func_3653() -> Tensor[(7, 5, 12), uint16] {
  @func_3651() /* ty=Tensor[(7, 5, 12), uint16] */
}

def @func_9834() -> Tensor[(70, 6), uint16] {
  @func_4085() /* ty=Tensor[(70, 6), uint16] */
}

def @func_1664() -> (Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) {
  %320 = @func_1105() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */;
  %321 = %320.3;
  %322 = cast(%321, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %323 = cast(%321, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %324 = reshape(%322, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %325 = reshape(%323, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %326 = @func_380(%324, %325) /* ty=Tensor[(7, 5, 12), uint16] */;
  %327 = cast(%326, dtype="uint16") /* ty=Tensor[(7, 5, 12), uint16] */;
  %328 = reshape(%327, newshape=[70, 6]) /* ty=Tensor[(70, 6), uint16] */;
  %329 = @func_1298(%328) /* ty=(Tensor[(70, 6), float64], Tensor[(70, 6), uint16]) */;
  %330 = cast(meta[relay.Constant][7] /* ty=Tensor[(1120), uint64] */, dtype="uint64") /* ty=Tensor[(1120), uint64] */;
  %331 = reshape(%330, newshape=[5, 14, 16]) /* ty=Tensor[(5, 14, 16), uint64] */;
  %332 = cast(%326, dtype="float32") /* ty=Tensor[(7, 5, 12), float32] */;
  %333 = reshape(%332, newshape=[70, 6]) /* ty=Tensor[(70, 6), float32] */;
  %334 = @func_1467(%333) /* ty=(Tensor[(7, 5, 12), int64], Tensor[(70, 6), float64], Tensor[(7, 5, 12), uint16], Tensor[(2, 560), bool], Tensor[(5, 14, 16), bool], Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), float32], Tensor[(70, 6), float64], Tensor[(7, 5, 12), uint16], Tensor[(5, 14, 16), bool], Tensor[(5, 14, 16), bool], Tensor[(70, 6), float32], Tensor[(7, 5, 12), uint16]) */;
  %335 = @func_1175() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %336 = @func_1480() /* ty=Tensor[(70, 6), uint16] */;
  %337 = %329.1;
  %338 = @func_1033(%331) /* ty=Tensor[(5, 14, 16), bool] */;
  %339 = %334.7;
  %340 = %335.1;
  (%321, %326, %336, %337, %338, meta[relay.Constant][7] /* ty=Tensor[(1120), uint64] */, %339, %340)
}

def @func_3354() -> (Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float32]) {
  @func_3352() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float32]) */
}

def @func_10760() -> Tensor[(70, 6), uint16] {
  %342 = fn () -> Tensor[(70, 6), uint16] {
    %341 = @func_7464() /* ty=(Tensor[(70, 6), uint16], Tensor[(15, 8, 13), int16], Tensor[(1, 1560), int16]) */;
    %341.0
  };
  %342() /* ty=Tensor[(70, 6), uint16] */
}

def @func_7017() -> (Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16]) {
  %343 = @func_6342() /* ty=Tensor[(7, 5, 12), float32] */;
  %344 = cast(%343, dtype="uint16") /* ty=Tensor[(7, 5, 12), uint16] */;
  %345 = cast(%343, dtype="uint16") /* ty=Tensor[(7, 5, 12), uint16] */;
  %346 = reshape(%344, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %347 = reshape(%345, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %348 = @func_380(%346, %347) /* ty=Tensor[(7, 5, 12), uint16] */;
  (%343, %348)
}

def @func_1470(%var_1468: Tensor[(70, 6), float32]) -> (Tensor[(7, 5, 12), int64], Tensor[(70, 6), float64], Tensor[(7, 5, 12), uint16], Tensor[(2, 560), bool], Tensor[(5, 14, 16), bool], Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), float32], Tensor[(70, 6), float64], Tensor[(7, 5, 12), uint16], Tensor[(5, 14, 16), bool], Tensor[(5, 14, 16), bool], Tensor[(70, 6), float32], Tensor[(7, 5, 12), uint16]) {
  @func_1467(%var_1468) /* ty=(Tensor[(7, 5, 12), int64], Tensor[(70, 6), float64], Tensor[(7, 5, 12), uint16], Tensor[(2, 560), bool], Tensor[(5, 14, 16), bool], Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), float32], Tensor[(70, 6), float64], Tensor[(7, 5, 12), uint16], Tensor[(5, 14, 16), bool], Tensor[(5, 14, 16), bool], Tensor[(70, 6), float32], Tensor[(7, 5, 12), uint16]) */
}

def @func_11383() -> Tensor[(5, 14, 16), float32] {
  %349 = @func_11274() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16], Tensor[(7, 9, 10), uint8], Tensor[(630), int64], Tensor[(5, 14, 16), float32], Tensor[(70, 6), float32]) */;
  %349.4
}

def @func_1913() -> (Tensor[(70, 6), bool], Tensor[(1120), uint64], Tensor[(70, 6), float64], Tensor[(70, 6), float32]) {
  %371 = fn () -> (Tensor[(70, 6), bool], Tensor[(1120), uint64], Tensor[(70, 6), float64], Tensor[(70, 6), float32]) {
    %350 = @func_1766() /* ty=(Tensor[(70, 6), bool],) */;
    %351 = @func_1810() /* ty=(Tensor[(1120), uint64], Tensor[(5, 14, 16), bool], Tensor[(70, 6), bool]) */;
    %352 = %350.0;
    %353 = cast(%352, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
    %354 = reshape(%353, newshape=[70, 6]) /* ty=Tensor[(70, 6), uint16] */;
    %355 = @func_1298(%354) /* ty=(Tensor[(70, 6), float64], Tensor[(70, 6), uint16]) */;
    %356 = cast(%352, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
    %357 = reshape(%356, newshape=[70, 6]) /* ty=Tensor[(70, 6), uint16] */;
    %358 = @func_1298(%357) /* ty=(Tensor[(70, 6), float64], Tensor[(70, 6), uint16]) */;
    %359 = %358.1;
    %360 = cast(%359, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
    %361 = log(%360) /* ty=Tensor[(70, 6), float64] */;
    %362 = @func_1175() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
    %363 = %362.1;
    %364 = cast(%363, dtype="float32") /* ty=Tensor[(7, 5, 12), float32] */;
    %365 = shape_of(%361, dtype="int32") /* ty=Tensor[(2), int32] */;
    %366 = cast(%361, dtype="float32") /* ty=Tensor[(70, 6), float32] */;
    %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %368 = %351.0;
    %369 = %355.0;
    %370 = floor_divide(%366, %367) /* ty=Tensor[(70, 6), float32] */;
    (%352, %368, %369, %370)
  };
  %371() /* ty=(Tensor[(70, 6), bool], Tensor[(1120), uint64], Tensor[(70, 6), float64], Tensor[(70, 6), float32]) */
}

def @func_8738() -> (Tensor[(70, 6), bool], Tensor[(12, 7, ?), bool]) {
  @func_8736() /* ty=(Tensor[(70, 6), bool], Tensor[(12, 7, ?), bool]) */
}

def @func_10457() -> (Tensor[(70, 6), uint16],) {
  %372 = @func_9155() /* ty=(Tensor[(70, 6), uint16],) */;
  %373 = %372.0;
  (%373,)
}

def @func_3407() -> (Tensor[(70, 6), bool], Tensor[(70, 6), float64], Tensor[(7, 5, 12), float32]) {
  %374 = @func_1912() /* ty=(Tensor[(70, 6), bool], Tensor[(1120), uint64], Tensor[(70, 6), float64], Tensor[(70, 6), float32]) */;
  %375 = %374.2;
  %376 = cast(meta[relay.Constant][8] /* ty=Tensor[(70, 6), float64] */, dtype="bool") /* ty=Tensor[(70, 6), bool] */;
  %377 = shape_of(%375, dtype="int32") /* ty=Tensor[(2), int32] */;
  %378 = cast(%375, dtype="bool") /* ty=Tensor[(70, 6), bool] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %380 = cast(meta[relay.Constant][8] /* ty=Tensor[(70, 6), float64] */, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %381 = @func_3352() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float32]) */;
  %382 = equal(%378, %379) /* ty=Tensor[(70, 6), bool] */;
  %383 = sigmoid(%380) /* ty=Tensor[(70, 6), float64] */;
  %384 = %381.1;
  (%382, %383, %384)
}

def @func_9873() -> Tensor[(7, 5, 12), float64] {
  %386 = fn () -> Tensor[(7, 5, 12), float64] {
    %385 = @func_3966() /* ty=(Tensor[(7, 5, 12), float64],) */;
    %385.0
  };
  %386() /* ty=Tensor[(7, 5, 12), float64] */
}

def @func_6638() -> Tensor[(7, 5, 12), uint16] {
  @func_6636() /* ty=Tensor[(7, 5, 12), uint16] */
}

def @func_9781() -> (Tensor[(7, 5, 12), uint16],) {
  %387 = @func_7615() /* ty=(Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16]) */;
  %388 = %387.1;
  (%388,)
}

def @func_10432(%var_10430: Tensor[(2, 560), bool]) -> (Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float32], Tensor[(2, 560), float64], Tensor[(70, 6), float64], Tensor[(7, 5, 12), float32]) {
  @func_10429(%var_10430) /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float32], Tensor[(2, 560), float64], Tensor[(70, 6), float64], Tensor[(7, 5, 12), float32]) */
}

def @func_7096(%var_7094: Tensor[(1183), float32]) -> (Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), uint16], Tensor[(1183), float32], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), float32], Tensor[(70, 6), float32]) {
  @func_7093(%var_7094) /* ty=(Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), uint16], Tensor[(1183), float32], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), float32], Tensor[(70, 6), float32]) */
}

def @func_3028(%var_3025: Tensor[(15, 8, 13), int16], %var_3026: Tensor[(15, 8, 13), int16], %var_3027: Tensor[(420, 1), uint16]) -> (Tensor[(15, 8, 13), int16], Tensor[(70, 6), float64], Tensor[(420, 1), uint16], Tensor[(70, 6), uint16]) {
  %399 = fn (%var_2985: Tensor[(15, 8, 13), int16], %var_2986: Tensor[(15, 8, 13), int16], %var_3012: Tensor[(420, 1), uint16]) -> (Tensor[(15, 8, 13), int16], Tensor[(70, 6), float64], Tensor[(420, 1), uint16], Tensor[(70, 6), uint16]) {
    %389 = cast(%var_2986, dtype="int16") /* ty=Tensor[(15, 8, 13), int16] */;
    %390 = shape_of(%var_2985, dtype="int32") /* ty=Tensor[(3), int32] */;
    %391 = cast(%var_2985, dtype="int16") /* ty=Tensor[(15, 8, 13), int16] */;
    %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %393 = cast(%var_3012, dtype="uint16") /* ty=Tensor[(420, 1), uint16] */;
    %394 = reshape(%393, newshape=[70, 6]) /* ty=Tensor[(70, 6), uint16] */;
    %395 = @func_1298(%394) /* ty=(Tensor[(70, 6), float64], Tensor[(70, 6), uint16]) */;
    %396 = subtract(%391, %392) /* ty=Tensor[(15, 8, 13), int16] */;
    %397 = %395.0;
    %398 = @func_2722() /* ty=Tensor[(70, 6), uint16] */;
    (%396, %397, %var_3012, %398)
  };
  %399(%var_3025, %var_3026, %var_3027) /* ty=(Tensor[(15, 8, 13), int16], Tensor[(70, 6), float64], Tensor[(420, 1), uint16], Tensor[(70, 6), uint16]) */
}

def @func_8185() -> (Tensor[(7, 5, 12), float32], Tensor[(70, 6), uint16]) {
  %400 = @func_5789() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float32], Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), uint16]) */;
  %401 = @func_1105() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */;
  %402 = %400.1;
  %403 = %401.3;
  (%402, %403)
}

def @func_10442() -> (Tensor[(7, 5, 12), uint16], Tensor[(70, 6), bool]) {
  %408 = fn () -> (Tensor[(7, 5, 12), uint16], Tensor[(70, 6), bool]) {
    %404 = @func_4857() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float32]) */;
    %405 = @func_3407() /* ty=(Tensor[(70, 6), bool], Tensor[(70, 6), float64], Tensor[(7, 5, 12), float32]) */;
    %406 = %404.0;
    %407 = %405.0;
    (%406, %407)
  };
  %408() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(70, 6), bool]) */
}

def @func_11605() -> (Tensor[(7, 5, 12), float32],) {
  @func_11603() /* ty=(Tensor[(7, 5, 12), float32],) */
}

def @func_1480() -> Tensor[(70, 6), uint16] {
  %409 = @func_1175() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %409.0
}

def @func_9711() -> Tensor[(70, 6), float64] {
  %413 = fn () -> Tensor[(70, 6), float64] {
    %410 = @func_1766() /* ty=(Tensor[(70, 6), bool],) */;
    %411 = %410.0;
    %412 = cast(%411, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
    rsqrt(%412) /* ty=Tensor[(70, 6), float64] */
  };
  %413() /* ty=Tensor[(70, 6), float64] */
}

def @func_3409() -> (Tensor[(70, 6), bool], Tensor[(70, 6), float64], Tensor[(7, 5, 12), float32]) {
  @func_3407() /* ty=(Tensor[(70, 6), bool], Tensor[(70, 6), float64], Tensor[(7, 5, 12), float32]) */
}

def @func_9836() -> Tensor[(70, 6), uint16] {
  @func_9834() /* ty=Tensor[(70, 6), uint16] */
}

def @func_4432() -> (Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float64]) {
  %414 = @func_3249() /* ty=(Tensor[(7, 5, 12), uint16],) */;
  %415 = @func_3966() /* ty=(Tensor[(7, 5, 12), float64],) */;
  %416 = %414.0;
  %417 = %415.0;
  (%416, %417)
}

def @func_8670() -> (Tensor[(7, 5, 12), float32], Tensor[(70, 6), uint16], Tensor[(1120), uint64], Tensor[(7, 5, 12), float32]) {
  %418 = @func_5328() /* ty=(Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */;
  %419 = @func_3731() /* ty=(Tensor[(5, 14, 16), float32], Tensor[(1120), uint64]) */;
  %420 = %418.0;
  %421 = cast(%420, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %422 = reshape(%421, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %423 = @func_4586(%422) /* ty=(Tensor[(7, 5, 12), float64], Tensor[(7, 5, 12), float32]) */;
  %424 = @func_6342() /* ty=Tensor[(7, 5, 12), float32] */;
  %425 = %419.1;
  %426 = %423.1;
  (%424, %420, %425, %426)
}

def @func_3576() -> (Tensor[(70, 6), uint16],) {
  @func_3574() /* ty=(Tensor[(70, 6), uint16],) */
}

def @func_3925() -> Tensor[(56, 20), int8] {
  %433 = fn () -> Tensor[(56, 20), int8] {
    %427 = @func_1553() /* ty=(Tensor[(70, 6), bool], Tensor[(56, 20), uint8]) */;
    %428 = %427.1;
    %429 = cast(meta[relay.Constant][9] /* ty=Tensor[(56, 20), uint8] */, dtype="int8") /* ty=Tensor[(56, 20), int8] */;
    %430 = shape_of(%428, dtype="int32") /* ty=Tensor[(2), int32] */;
    %431 = cast(%428, dtype="int8") /* ty=Tensor[(56, 20), int8] */;
    %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    subtract(%431, %432) /* ty=Tensor[(56, 20), int8] */
  };
  %433() /* ty=Tensor[(56, 20), int8] */
}

def @func_4337() -> Tensor[(70, 6), bool] {
  %435 = fn () -> Tensor[(70, 6), bool] {
    %434 = @func_1553() /* ty=(Tensor[(70, 6), bool], Tensor[(56, 20), uint8]) */;
    %434.0
  };
  %435() /* ty=Tensor[(70, 6), bool] */
}

def @func_5600() -> Tensor[(7, 5, 12), uint16] {
  @func_2970() /* ty=Tensor[(7, 5, 12), uint16] */
}

def @func_7019() -> (Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16]) {
  @func_7017() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16]) */
}

def @func_5791() -> (Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float32], Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), uint16]) {
  @func_5789() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float32], Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), uint16]) */
}

def @func_1666() -> (Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) {
  @func_1664() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */
}

def @func_3478() -> Tensor[(12, 7, ?), uint64] {
  %436 = @func_3457() /* ty=(Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64]) */;
  %436.1
}

def @func_4892() -> (Tensor[(56, 20), int8], Tensor[(7, 5, 12), uint16]) {
  %439 = fn () -> (Tensor[(56, 20), int8], Tensor[(7, 5, 12), uint16]) {
    %437 = @func_3924() /* ty=Tensor[(56, 20), int8] */;
    %438 = @func_2666() /* ty=Tensor[(7, 5, 12), uint16] */;
    (%437, %438)
  };
  %439() /* ty=(Tensor[(56, 20), int8], Tensor[(7, 5, 12), uint16]) */
}

def @func_8967() -> (Tensor[(7, 5, 12), uint16],) {
  @func_8965() /* ty=(Tensor[(7, 5, 12), uint16],) */
}

def @func_4586(%var_4581: Tensor[(7, 5, 12), uint16]) -> (Tensor[(7, 5, 12), float64], Tensor[(7, 5, 12), float32]) {
  %440 = @func_3651() /* ty=Tensor[(7, 5, 12), uint16] */;
  %441 = cast(%var_4581, dtype="float32") /* ty=Tensor[(7, 5, 12), float32] */;
  %442 = shape_of(%440, dtype="int32") /* ty=Tensor[(3), int32] */;
  %443 = cast(%440, dtype="float32") /* ty=Tensor[(7, 5, 12), float32] */;
  %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %445 = @func_3836() /* ty=Tensor[(7, 5, 12), float64] */;
  %446 = mod(%443, %444) /* ty=Tensor[(7, 5, 12), float32] */;
  (%445, %446)
}

def @func_1810() -> (Tensor[(1120), uint64], Tensor[(5, 14, 16), bool], Tensor[(70, 6), bool]) {
  %447 = @func_1105() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */;
  %448 = %447.1;
  %449 = cast(%448, dtype="uint64") /* ty=Tensor[(1120), uint64] */;
  %450 = reshape(%449, newshape=[5, 14, 16]) /* ty=Tensor[(5, 14, 16), uint64] */;
  %451 = @func_1766() /* ty=(Tensor[(70, 6), bool],) */;
  %452 = @func_1033(%450) /* ty=Tensor[(5, 14, 16), bool] */;
  %453 = %451.0;
  (%448, %452, %453)
}

def @func_3191() -> (Tensor[(7, 5, 12), float32],) {
  %454 = @func_2157() /* ty=(Tensor[(7, 5, 12), float32],) */;
  %455 = %454.0;
  (%455,)
}

def @func_4434() -> (Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float64]) {
  @func_4432() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float64]) */
}

def @func_6636() -> Tensor[(7, 5, 12), uint16] {
  %456 = @func_5170() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16]) */;
  %456.1
}

def @func_3906() -> (Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), float32]) {
  %457 = @func_1664() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %458 = @func_3191() /* ty=(Tensor[(7, 5, 12), float32],) */;
  %459 = %457.4;
  %460 = %458.0;
  (%459, %460)
}

def @func_9426() -> (Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float64], Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float64]) {
  @func_9424() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float64], Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float64]) */
}

def @func_3250() -> (Tensor[(7, 5, 12), uint16],) {
  %462 = fn () -> (Tensor[(7, 5, 12), uint16],) {
    %461 = @func_2666() /* ty=Tensor[(7, 5, 12), uint16] */;
    (%461,)
  };
  %462() /* ty=(Tensor[(7, 5, 12), uint16],) */
}

def @func_6766() -> Tensor[(70, 6), float64] {
  %463 = @func_5682() /* ty=(Tensor[(70, 6), float64],) */;
  %463.0
}

def @func_1555() -> (Tensor[(70, 6), bool], Tensor[(56, 20), uint8]) {
  @func_1553() /* ty=(Tensor[(70, 6), bool], Tensor[(56, 20), uint8]) */
}

def @func_11385() -> Tensor[(5, 14, 16), float32] {
  @func_11383() /* ty=Tensor[(5, 14, 16), float32] */
}

def @func_7093(%var_7063: Tensor[(1183), float32]) -> (Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), uint16], Tensor[(1183), float32], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), float32], Tensor[(70, 6), float32]) {
  %464 = @func_3731() /* ty=(Tensor[(5, 14, 16), float32], Tensor[(1120), uint64]) */;
  %465 = cast(%var_7063, dtype="float32") /* ty=Tensor[(1183), float32] */;
  %466 = reshape(%465, newshape=[13, 13, 7]) /* ty=Tensor[(13, 13, 7), float32] */;
  %467 = @func_6987(%466) /* ty=(Tensor[(13, 13, 7), float32], Tensor[(7, 5, 12), uint16]) */;
  %468 = @func_1175() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %469 = %464.0;
  %470 = %467.1;
  %471 = %468.0;
  %472 = @func_6342() /* ty=Tensor[(7, 5, 12), float32] */;
  %473 = @func_3181() /* ty=Tensor[(70, 6), float32] */;
  (%469, %470, %var_7063, %471, %472, %473)
}

def @func_11776() -> (Tensor[(5, 14, 16), float32], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64], Tensor[(12, 7, ?), uint64]) {
  @func_11774() /* ty=(Tensor[(5, 14, 16), float32], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64], Tensor[(12, 7, ?), uint64]) */
}

def @func_11198() -> (Tensor[(70, 6), float64],) {
  @func_11196() /* ty=(Tensor[(70, 6), float64],) */
}

def @func_4618() -> (Tensor[(7, 5, 12), float64],) {
  %477 = fn () -> (Tensor[(7, 5, 12), float64],) {
    %474 = @func_3651() /* ty=Tensor[(7, 5, 12), uint16] */;
    %475 = cast(%474, dtype="float64") /* ty=Tensor[(7, 5, 12), float64] */;
    %476 = asin(%475) /* ty=Tensor[(7, 5, 12), float64] */;
    (%476,)
  };
  %477() /* ty=(Tensor[(7, 5, 12), float64],) */
}

def @func_6343() -> Tensor[(7, 5, 12), float32] {
  %479 = fn () -> Tensor[(7, 5, 12), float32] {
    %478 = @func_3352() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float32]) */;
    %478.1
  };
  %479() /* ty=Tensor[(7, 5, 12), float32] */
}

def @func_8941() -> (Tensor[(7, 5, 12), uint16], Tensor[(5, 14, 16), float32], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), float64], Tensor[(7, 5, 12), float32], Tensor[(70, 6), float64]) {
  %480 = @func_4891() /* ty=(Tensor[(56, 20), int8], Tensor[(7, 5, 12), uint16]) */;
  %481 = @func_5789() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float32], Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), uint16]) */;
  %482 = %481.2;
  %483 = cast(%482, dtype="float32") /* ty=Tensor[(5, 14, 16), float32] */;
  %484 = reshape(%483, newshape=[56, 20]) /* ty=Tensor[(56, 20), float32] */;
  %485 = @func_4693(%484) /* ty=(Tensor[(7, 5, 12), float32], Tensor[(56, 20), uint16], Tensor[(7, 5, 12), uint16], Tensor[(5, 14, 16), bool]) */;
  %486 = @func_3966() /* ty=(Tensor[(7, 5, 12), float64],) */;
  %487 = @func_3352() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float32]) */;
  %488 = %480.1;
  %489 = @func_3872() /* ty=Tensor[(70, 6), uint16] */;
  %490 = %485.3;
  %491 = %486.0;
  %492 = %487.1;
  %493 = @func_2495() /* ty=Tensor[(70, 6), float64] */;
  (%488, %482, %489, %490, %491, %492, %493)
}

def @func_8155() -> (Tensor[(7, 5, 12), float64],) {
  %494 = @func_5986() /* ty=(Tensor[(7, 5, 12), float64],) */;
  %495 = %494.0;
  (%495,)
}

def @func_11618() -> Tensor[(70, 6), uint16] {
  @func_7169() /* ty=Tensor[(70, 6), uint16] */
}

def @func_2730() -> Tensor[(7, 5, 12), float32] {
  @func_2728() /* ty=Tensor[(7, 5, 12), float32] */
}

def @func_1035(%var_1034: Tensor[(5, 14, 16), uint64]) -> Tensor[(5, 14, 16), bool] {
  %500 = fn (%var_1024: Tensor[(5, 14, 16), uint64]) -> Tensor[(5, 14, 16), bool] {
    %496 = cast(meta[relay.Constant][10] /* ty=Tensor[(5, 14, 16), uint64] */, dtype="bool") /* ty=Tensor[(5, 14, 16), bool] */;
    %497 = shape_of(%var_1024, dtype="int32") /* ty=Tensor[(3), int32] */;
    %498 = cast(%var_1024, dtype="bool") /* ty=Tensor[(5, 14, 16), bool] */;
    %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%498, %499) /* ty=Tensor[(5, 14, 16), bool] */
  };
  %500(%var_1034) /* ty=Tensor[(5, 14, 16), bool] */
}

def @func_5181() -> (Tensor[(12, 7, ?), uint64],) {
  %501 = @func_2033() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(420), float32], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64]) */;
  %502 = %501.2;
  (%502,)
}

def @func_10810() -> Tensor[(70, 6), float64] {
  @func_2495() /* ty=Tensor[(70, 6), float64] */
}

def @func_5808(%var_5806: Tensor[(70, 6), uint16]) -> Tensor[(70, 6), bool] {
  @func_5805(%var_5806) /* ty=Tensor[(70, 6), bool] */
}

def @func_10142() -> (Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), bool], Tensor[(5, 14, 16), bool]) {
  @func_10140() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), bool], Tensor[(5, 14, 16), bool]) */
}

def @func_4087() -> Tensor[(70, 6), uint16] {
  @func_4085() /* ty=Tensor[(70, 6), uint16] */
}

def @func_2495() -> Tensor[(70, 6), float64] {
  %503 = @func_1912() /* ty=(Tensor[(70, 6), bool], Tensor[(1120), uint64], Tensor[(70, 6), float64], Tensor[(70, 6), float32]) */;
  %503.2
}

def @func_5329() -> (Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) {
  %508 = fn () -> (Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) {
    %504 = @func_5222() /* ty=(Tensor[(70, 6), bool], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16]) */;
    %505 = @func_3457() /* ty=(Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64]) */;
    %506 = %504.2;
    %507 = %505.1;
    (%506, %507)
  };
  %508() /* ty=(Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */
}

def @func_2281(%var_2279: Tensor[(1120), uint64], %var_2280: Tensor[(70, 6), bool]) -> (Tensor[(70, 6), bool], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), float32], Tensor[(12, 7, ?), uint64], Tensor[(70, 6), int32]) {
  @func_2277(%var_2279, %var_2280) /* ty=(Tensor[(70, 6), bool], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), float32], Tensor[(12, 7, ?), uint64], Tensor[(70, 6), int32]) */
}

def @func_5526() -> Tensor[(12, 7, ?), bool] {
  %509 = @func_4000() /* ty=(Tensor[(12, 7, ?), float64], Tensor[(56, 20), int8]) */;
  %510 = %509.0;
  %511 = cast(%510, dtype="float64") /* ty=Tensor[(12, 7, ?), float64] */;
  %512 = tan(%511) /* ty=Tensor[(12, 7, ?), float64] */;
  %513 = cast(%512, dtype="bool") /* ty=Tensor[(12, 7, ?), bool] */;
  %514 = shape_of(%510, dtype="int32") /* ty=Tensor[(3), int32] */;
  %515 = cast(%510, dtype="bool") /* ty=Tensor[(12, 7, ?), bool] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%515, %516) /* ty=Tensor[(12, 7, ?), bool] */
}

def @func_1944() -> (Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), uint16], Tensor[(420), float32]) {
  %523 = fn () -> (Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), uint16], Tensor[(420), float32]) {
    %517 = @func_1664() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
    %518 = cast(meta[relay.Constant][11] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
    %519 = reshape(%518, newshape=[70, 6]) /* ty=Tensor[(70, 6), float32] */;
    %520 = @func_1467(%519) /* ty=(Tensor[(7, 5, 12), int64], Tensor[(70, 6), float64], Tensor[(7, 5, 12), uint16], Tensor[(2, 560), bool], Tensor[(5, 14, 16), bool], Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), float32], Tensor[(70, 6), float64], Tensor[(7, 5, 12), uint16], Tensor[(5, 14, 16), bool], Tensor[(5, 14, 16), bool], Tensor[(70, 6), float32], Tensor[(7, 5, 12), uint16]) */;
    %521 = %517.4;
    %522 = %520.10;
    (%521, %522, meta[relay.Constant][11] /* ty=Tensor[(420), float32] */)
  };
  %523() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), uint16], Tensor[(420), float32]) */
}

def @func_4110() -> Tensor[(7, 5, 12), float32] {
  %524 = fn () -> Tensor[(7, 5, 12), float32] {
    @func_3041() /* ty=Tensor[(7, 5, 12), float32] */
  };
  %524() /* ty=Tensor[(7, 5, 12), float32] */
}

def @func_11046(%var_10981: uint64, %var_10982: Tensor[(4, 15, 3), uint64]) -> (Tensor[(4, 15, 3), uint64], Tensor[(4, 15, 3), float32], Tensor[(7, 5, 12), float32], Tensor[(12, 7, ?), bool], Tensor[(70, 6), float32]) {
  %525 = cast(%var_10981, dtype="uint64") /* ty=uint64 */;
  %526 = cast(%var_10982, dtype="uint64") /* ty=Tensor[(4, 15, 3), uint64] */;
  %527 = cast(%var_10982, dtype="float32") /* ty=Tensor[(4, 15, 3), float32] */;
  %528 = @func_8736() /* ty=(Tensor[(70, 6), bool], Tensor[(12, 7, ?), bool]) */;
  %529 = @func_1912() /* ty=(Tensor[(70, 6), bool], Tensor[(1120), uint64], Tensor[(70, 6), float64], Tensor[(70, 6), float32]) */;
  %530 = maximum(%525, %526) /* ty=Tensor[(4, 15, 3), uint64] */;
  %531 = asinh(%527) /* ty=Tensor[(4, 15, 3), float32] */;
  %532 = @func_10154() /* ty=Tensor[(7, 5, 12), float32] */;
  %533 = %528.1;
  %534 = %529.3;
  (%530, %531, %532, %533, %534)
}

def @func_7641(%var_7639: Tensor[(15, 10, 7), uint8], %var_7640: Tensor[(15, 10, 7), uint8]) -> Tensor[(15, 10, 7), uint8] {
  %539 = fn (%var_7629: Tensor[(15, 10, 7), uint8], %var_7630: Tensor[(15, 10, 7), uint8]) -> Tensor[(15, 10, 7), uint8] {
    %535 = cast(%var_7630, dtype="uint8") /* ty=Tensor[(15, 10, 7), uint8] */;
    %536 = shape_of(%var_7629, dtype="int32") /* ty=Tensor[(3), int32] */;
    %537 = cast(%var_7629, dtype="uint8") /* ty=Tensor[(15, 10, 7), uint8] */;
    %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    logical_xor(%537, %538) /* ty=Tensor[(15, 10, 7), uint8] */
  };
  %539(%var_7639, %var_7640) /* ty=Tensor[(15, 10, 7), uint8] */
}

def @func_8035() -> (Tensor[(7, 5, 12), float32],) {
  %540 = @func_6111() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), float32]) */;
  %541 = %540.1;
  (%541,)
}

def @func_6807() -> (Tensor[(12, 7, ?), uint64],) {
  %542 = @func_5181() /* ty=(Tensor[(12, 7, ?), uint64],) */;
  %543 = %542.0;
  (%543,)
}

def @func_7820() -> (Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float64]) {
  %547 = fn () -> (Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float64]) {
    %544 = @func_5201() /* ty=(Tensor[(7, 5, 12), float64],) */;
    %545 = @func_3041() /* ty=Tensor[(7, 5, 12), float32] */;
    %546 = %544.0;
    (%545, %546)
  };
  %547() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float64]) */
}

def @func_10140() -> (Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), bool], Tensor[(5, 14, 16), bool]) {
  %548 = @func_4891() /* ty=(Tensor[(56, 20), int8], Tensor[(7, 5, 12), uint16]) */;
  %549 = @func_3216() /* ty=(Tensor[(7, 5, 12), uint16],) */;
  %550 = @func_1810() /* ty=(Tensor[(1120), uint64], Tensor[(5, 14, 16), bool], Tensor[(70, 6), bool]) */;
  %551 = %548.1;
  %552 = %549.0;
  %553 = @func_4336() /* ty=Tensor[(70, 6), bool] */;
  %554 = %550.1;
  (%551, %552, %553, %554)
}

def @func_5805(%var_5796: Tensor[(70, 6), uint16]) -> Tensor[(70, 6), bool] {
  %555 = @func_3642() /* ty=(Tensor[(70, 6), uint16],) */;
  %556 = %555.0;
  %557 = cast(%var_5796, dtype="bool") /* ty=Tensor[(70, 6), bool] */;
  %558 = shape_of(%556, dtype="int32") /* ty=Tensor[(2), int32] */;
  %559 = cast(%556, dtype="bool") /* ty=Tensor[(70, 6), bool] */;
  %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  not_equal(%559, %560) /* ty=Tensor[(70, 6), bool] */
}

def @func_3731() -> (Tensor[(5, 14, 16), float32], Tensor[(1120), uint64]) {
  %561 = @func_1943() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), uint16], Tensor[(420), float32]) */;
  %562 = %561.0;
  %563 = cast(%562, dtype="float32") /* ty=Tensor[(5, 14, 16), float32] */;
  %564 = @func_1664() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %565 = tan(%563) /* ty=Tensor[(5, 14, 16), float32] */;
  %566 = %564.5;
  (%565, %566)
}

def @func_6164(%var_6140: Tensor[(9, 6, 10), uint8]) -> Tensor[(9, 6, 10), bool] {
  %567 = cast(meta[relay.Constant][12] /* ty=Tensor[(9, 6, 10), uint8] */, dtype="bool") /* ty=Tensor[(9, 6, 10), bool] */;
  %568 = shape_of(%var_6140, dtype="int32") /* ty=Tensor[(3), int32] */;
  %569 = cast(%var_6140, dtype="bool") /* ty=Tensor[(9, 6, 10), bool] */;
  %570 = dyn.reshape(%567, %568, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%569, %570) /* ty=Tensor[(9, 6, 10), bool] */
}

def @func_4531() -> (Tensor[(1120), uint64], Tensor[(1176), int32], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), float64]) {
  %571 = @func_3731() /* ty=(Tensor[(5, 14, 16), float32], Tensor[(1120), uint64]) */;
  %572 = @func_3574() /* ty=(Tensor[(70, 6), uint16],) */;
  %573 = %572.0;
  %574 = cast(%573, dtype="float32") /* ty=Tensor[(70, 6), float32] */;
  %575 = reshape(%574, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), float32] */;
  %576 = @func_3526(%575) /* ty=(Tensor[(7, 5, 12), uint64], Tensor[(7, 5, 12), float32]) */;
  %577 = %576.0;
  %578 = cast(meta[relay.Constant][13] /* ty=Tensor[(1176), int32] */, dtype="int32") /* ty=Tensor[(1176), int32] */;
  %579 = reshape(%578, newshape=[7, 14, 12]) /* ty=Tensor[(7, 14, 12), int32] */;
  %580 = @func_3780(%579) /* ty=(Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), uint16], Tensor[(5, 14, 16), bool], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(7, 14, 12), float32]) */;
  %581 = %580.4;
  %582 = cast(%581, dtype="int64") /* ty=Tensor[(70, 6), int64] */;
  %583 = shape_of(%577, dtype="int32") /* ty=Tensor[(3), int32] */;
  %584 = cast(%577, dtype="int64") /* ty=Tensor[(7, 5, 12), int64] */;
  %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %586 = bitwise_or(%584, %585) /* ty=Tensor[(7, 5, 12), int64] */;
  %587 = cast(%586, dtype="float32") /* ty=Tensor[(7, 5, 12), float32] */;
  %588 = rsqrt(%587) /* ty=Tensor[(7, 5, 12), float32] */;
  %589 = cast(%588, dtype="float64") /* ty=Tensor[(7, 5, 12), float64] */;
  %590 = %571.1;
  %591 = sin(%589) /* ty=Tensor[(7, 5, 12), float64] */;
  (%590, meta[relay.Constant][13] /* ty=Tensor[(1176), int32] */, %573, %591)
}

def @func_5682() -> (Tensor[(70, 6), float64],) {
  %592 = @func_1664() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %593 = %592.0;
  %594 = cast(meta[relay.Constant][14] /* ty=Tensor[(70, 6), uint16] */, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %595 = shape_of(%593, dtype="int32") /* ty=Tensor[(2), int32] */;
  %596 = cast(%593, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %597 = dyn.reshape(%594, %595, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %598 = power(%596, %597) /* ty=Tensor[(70, 6), float64] */;
  (%598,)
}

def @func_4296() -> (Tensor[(12, 7, ?), uint64],) {
  %599 = @func_2033() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(420), float32], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64]) */;
  %600 = %599.2;
  (%600,)
}

def @func_5361() -> Tensor[(7, 5, 12), uint16] {
  %602 = fn () -> Tensor[(7, 5, 12), uint16] {
    %601 = @func_5170() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16]) */;
    %601.1
  };
  %602() /* ty=Tensor[(7, 5, 12), uint16] */
}

def @func_6219(%var_6183: Tensor[(15, 15, 9), float64]) -> (Tensor[(15, 15, 9), float64],) {
  %603 = cast(%var_6183, dtype="float64") /* ty=Tensor[(15, 15, 9), float64] */;
  %604 = erf(%603) /* ty=Tensor[(15, 15, 9), float64] */;
  (%604,)
}

def @func_5867() -> (Tensor[(70, 6), float64], Tensor[(12, 7, ?), bool]) {
  %615 = fn () -> (Tensor[(70, 6), float64], Tensor[(12, 7, ?), bool]) {
    %605 = @func_5181() /* ty=(Tensor[(12, 7, ?), uint64],) */;
    %606 = %605.0;
    %607 = cast(%606, dtype="float32") /* ty=Tensor[(12, 7, ?), float32] */;
    %608 = erf(%607) /* ty=Tensor[(12, 7, ?), float32] */;
    %609 = cast(%606, dtype="bool") /* ty=Tensor[(12, 7, ?), bool] */;
    %610 = shape_of(%608, dtype="int32") /* ty=Tensor[(3), int32] */;
    %611 = cast(%608, dtype="bool") /* ty=Tensor[(12, 7, ?), bool] */;
    %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %613 = @func_2495() /* ty=Tensor[(70, 6), float64] */;
    %614 = less(%611, %612) /* ty=Tensor[(12, 7, ?), bool] */;
    (%613, %614)
  };
  %615() /* ty=(Tensor[(70, 6), float64], Tensor[(12, 7, ?), bool]) */
}

def @func_10155() -> Tensor[(7, 5, 12), float32] {
  %617 = fn () -> Tensor[(7, 5, 12), float32] {
    %616 = @func_5170() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16]) */;
    %616.0
  };
  %617() /* ty=Tensor[(7, 5, 12), float32] */
}

def @func_2728() -> Tensor[(7, 5, 12), float32] {
  %618 = @func_2157() /* ty=(Tensor[(7, 5, 12), float32],) */;
  %618.0
}

def @func_3874() -> Tensor[(70, 6), uint16] {
  @func_3872() /* ty=Tensor[(70, 6), uint16] */
}

def @func_5397(%var_5388: Tensor[(13, 15, 16), float32], %var_5389: Tensor[(13, 15, 16), float32]) -> Tensor[(13, 15, 16), float32] {
  %619 = cast(%var_5389, dtype="float32") /* ty=Tensor[(13, 15, 16), float32] */;
  %620 = shape_of(%var_5388, dtype="int32") /* ty=Tensor[(3), int32] */;
  %621 = cast(%var_5388, dtype="float32") /* ty=Tensor[(13, 15, 16), float32] */;
  %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%621, %622) /* ty=Tensor[(13, 15, 16), float32] */
}

def @func_10767() -> Tensor[(7, 5, 12), int32] {
  %624 = fn () -> Tensor[(7, 5, 12), int32] {
    %623 = @func_4794() /* ty=(Tensor[(7, 5, 12), int32], Tensor[(7, 5, 12), float64], Tensor[(70, 6), uint64]) */;
    %623.0
  };
  %624() /* ty=Tensor[(7, 5, 12), int32] */
}

def @func_5944(%var_5943: Tensor[(1, 10, 1), uint64]) -> (Tensor[(7, 10, 7), uint64],) {
  %628 = fn (%var_5935: Tensor[(1, 10, 1), uint64]) -> (Tensor[(7, 10, 7), uint64],) {
    %625 = cast(%var_5935, dtype="uint64") /* ty=Tensor[(1, 10, 1), uint64] */;
    %626 = cast(meta[relay.Constant][15] /* ty=Tensor[(7, 10, 7), uint64] */, dtype="uint64") /* ty=Tensor[(7, 10, 7), uint64] */;
    %627 = multiply(%625, %626) /* ty=Tensor[(7, 10, 7), uint64] */;
    (%627,)
  };
  %628(%var_5943) /* ty=(Tensor[(7, 10, 7), uint64],) */
}

def @func_8342(%var_8340: Tensor[(12, 7, 8), uint64], %var_8341: Tensor[(12, 7, 8), uint64]) -> (Tensor[(12, 7, 8), bool], Tensor[(1120), uint64], Tensor[(88), uint8], Tensor[(1260), float32]) {
  @func_8338(%var_8340, %var_8341) /* ty=(Tensor[(12, 7, 8), bool], Tensor[(1120), uint64], Tensor[(88), uint8], Tensor[(1260), float32]) */
}

def @func_7171() -> Tensor[(70, 6), uint16] {
  @func_7169() /* ty=Tensor[(70, 6), uint16] */
}

def @func_10812() -> Tensor[(70, 6), float64] {
  @func_10810() /* ty=Tensor[(70, 6), float64] */
}

def @func_1300(%var_1299: Tensor[(70, 6), uint16]) -> (Tensor[(70, 6), float64], Tensor[(70, 6), uint16]) {
  %638 = fn (%var_1274: Tensor[(70, 6), uint16]) -> (Tensor[(70, 6), float64], Tensor[(70, 6), uint16]) {
    %629 = @func_1175() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
    %630 = %629.0;
    %631 = cast(%var_1274, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
    %632 = shape_of(%630, dtype="int32") /* ty=Tensor[(2), int32] */;
    %633 = cast(%630, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
    %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %635 = @func_1175() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
    %636 = divide(%633, %634) /* ty=Tensor[(70, 6), float64] */;
    %637 = %635.0;
    (%636, %637)
  };
  %638(%var_1299) /* ty=(Tensor[(70, 6), float64], Tensor[(70, 6), uint16]) */
}

def @func_4001() -> (Tensor[(12, 7, ?), float64], Tensor[(56, 20), int8]) {
  %643 = fn () -> (Tensor[(12, 7, ?), float64], Tensor[(56, 20), int8]) {
    %639 = @func_2513() /* ty=Tensor[(12, 7, ?), uint64] */;
    %640 = cast(%639, dtype="float64") /* ty=Tensor[(12, 7, ?), float64] */;
    %641 = acosh(%640) /* ty=Tensor[(12, 7, ?), float64] */;
    %642 = @func_3924() /* ty=Tensor[(56, 20), int8] */;
    (%641, %642)
  };
  %643() /* ty=(Tensor[(12, 7, ?), float64], Tensor[(56, 20), int8]) */
}

def @func_9082() -> (Tensor[(70, 6), float64], Tensor[(70, 6), float32], Tensor[(12, 7, ?), uint64], Tensor[(7, 5, 12), uint16]) {
  %655 = fn () -> (Tensor[(70, 6), float64], Tensor[(70, 6), float32], Tensor[(12, 7, ?), uint64], Tensor[(7, 5, 12), uint16]) {
    %644 = @func_5682() /* ty=(Tensor[(70, 6), float64],) */;
    %645 = @func_2464() /* ty=(Tensor[(70, 6), float32], Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16]) */;
    %646 = @func_3457() /* ty=(Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64]) */;
    %647 = %644.0;
    %648 = cast(%647, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
    %649 = cast(%647, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
    %650 = reshape(%648, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
    %651 = reshape(%649, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
    %652 = %645.0;
    %653 = %646.1;
    %654 = @func_380(%650, %651) /* ty=Tensor[(7, 5, 12), uint16] */;
    (%647, %652, %653, %654)
  };
  %655() /* ty=(Tensor[(70, 6), float64], Tensor[(70, 6), float32], Tensor[(12, 7, ?), uint64], Tensor[(7, 5, 12), uint16]) */
}

def @func_4589(%var_4587: Tensor[(7, 5, 12), uint16]) -> (Tensor[(7, 5, 12), float64], Tensor[(7, 5, 12), float32]) {
  @func_4586(%var_4587) /* ty=(Tensor[(7, 5, 12), float64], Tensor[(7, 5, 12), float32]) */
}

def @func_7605() -> (Tensor[(7, 5, 12), float32], Tensor[(70, 6), bool]) {
  %660 = fn () -> (Tensor[(7, 5, 12), float32], Tensor[(70, 6), bool]) {
    %656 = @func_6111() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), float32]) */;
    %657 = @func_3407() /* ty=(Tensor[(70, 6), bool], Tensor[(70, 6), float64], Tensor[(7, 5, 12), float32]) */;
    %658 = %656.1;
    %659 = %657.0;
    (%658, %659)
  };
  %660() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(70, 6), bool]) */
}

def @func_2464() -> (Tensor[(70, 6), float32], Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16]) {
  %661 = @func_1912() /* ty=(Tensor[(70, 6), bool], Tensor[(1120), uint64], Tensor[(70, 6), float64], Tensor[(70, 6), float32]) */;
  %662 = @func_2157() /* ty=(Tensor[(7, 5, 12), float32],) */;
  %663 = @func_1175() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %664 = %661.3;
  %665 = %662.0;
  %666 = %663.1;
  (%664, %665, %666)
}

def @func_3193() -> (Tensor[(7, 5, 12), float32],) {
  @func_3191() /* ty=(Tensor[(7, 5, 12), float32],) */
}

def @func_7616() -> (Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16]) {
  %671 = fn () -> (Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16]) {
    %667 = @func_1810() /* ty=(Tensor[(1120), uint64], Tensor[(5, 14, 16), bool], Tensor[(70, 6), bool]) */;
    %668 = @func_2033() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(420), float32], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64]) */;
    %669 = %667.0;
    %670 = %668.0;
    (%669, %670)
  };
  %671() /* ty=(Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16]) */
}

def @func_8672() -> (Tensor[(7, 5, 12), float32], Tensor[(70, 6), uint16], Tensor[(1120), uint64], Tensor[(7, 5, 12), float32]) {
  @func_8670() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(70, 6), uint16], Tensor[(1120), uint64], Tensor[(7, 5, 12), float32]) */
}

def @func_7728() -> Tensor[(5, 14, 16), bool] {
  %673 = fn () -> Tensor[(5, 14, 16), bool] {
    %672 = @func_3906() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), float32]) */;
    %672.0
  };
  %673() /* ty=Tensor[(5, 14, 16), bool] */
}

def @func_8157() -> (Tensor[(7, 5, 12), float64],) {
  @func_8155() /* ty=(Tensor[(7, 5, 12), float64],) */
}

def @func_7354() -> (Tensor[(7, 5, 12), float64], Tensor[(70, 6), float64], Tensor[(7, 5, 12), float64], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), float32], Tensor[(5, 14, 16), float32], Tensor[(5, 14, 16), float64]) {
  %694 = fn () -> (Tensor[(7, 5, 12), float64], Tensor[(70, 6), float64], Tensor[(7, 5, 12), float64], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), float32], Tensor[(5, 14, 16), float32], Tensor[(5, 14, 16), float64]) {
    %674 = @func_3191() /* ty=(Tensor[(7, 5, 12), float32],) */;
    %675 = %674.0;
    %676 = cast(%675, dtype="float64") /* ty=Tensor[(7, 5, 12), float64] */;
    %677 = @func_3731() /* ty=(Tensor[(5, 14, 16), float32], Tensor[(1120), uint64]) */;
    %678 = %677.0;
    %679 = cast(%678, dtype="uint64") /* ty=Tensor[(5, 14, 16), uint64] */;
    %680 = reshape(%679, newshape=[1120]) /* ty=Tensor[(1120), uint64] */;
    %681 = @func_1265(%680) /* ty=(Tensor[(7, 5, 12), float64], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(12, 7, ?), uint64], Tensor[(7, 5, 12), int64]) */;
    %682 = @func_4531() /* ty=(Tensor[(1120), uint64], Tensor[(1176), int32], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), float64]) */;
    %683 = @func_5789() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float32], Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), uint16]) */;
    %684 = cast(%678, dtype="float32") /* ty=Tensor[(5, 14, 16), float32] */;
    %685 = cast(%678, dtype="float64") /* ty=Tensor[(5, 14, 16), float64] */;
    %686 = sqrt(%676) /* ty=Tensor[(7, 5, 12), float64] */;
    %687 = @func_2495() /* ty=Tensor[(70, 6), float64] */;
    %688 = %681.0;
    %689 = @func_2722() /* ty=Tensor[(70, 6), uint16] */;
    %690 = %682.2;
    %691 = %683.2;
    %692 = asin(%684) /* ty=Tensor[(5, 14, 16), float32] */;
    %693 = log(%685) /* ty=Tensor[(5, 14, 16), float64] */;
    (%686, %687, %688, %689, %690, %691, %692, %693)
  };
  %694() /* ty=(Tensor[(7, 5, 12), float64], Tensor[(70, 6), float64], Tensor[(7, 5, 12), float64], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), float32], Tensor[(5, 14, 16), float32], Tensor[(5, 14, 16), float64]) */
}

def @func_3643() -> (Tensor[(70, 6), uint16],) {
  %697 = fn () -> (Tensor[(70, 6), uint16],) {
    %695 = @func_1664() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
    %696 = %695.3;
    (%696,)
  };
  %697() /* ty=(Tensor[(70, 6), uint16],) */
}

def @func_8127(%var_8125: Tensor[(11, 1, 8), uint8], %var_8126: Tensor[(1260), float32]) -> (Tensor[(11, 6, 8), uint8], Tensor[(56, 20), int8], Tensor[(7, 5, 12), float64], Tensor[(7, 5, 12), uint16], Tensor[(1260), float32], Tensor[(7, 5, 12), uint16], Tensor[(1120), uint64]) {
  %713 = fn (%var_8044: Tensor[(11, 1, 8), uint8], %var_8077: Tensor[(1260), float32]) -> (Tensor[(11, 6, 8), uint8], Tensor[(56, 20), int8], Tensor[(7, 5, 12), float64], Tensor[(7, 5, 12), uint16], Tensor[(1260), float32], Tensor[(7, 5, 12), uint16], Tensor[(1120), uint64]) {
    %698 = cast(%var_8044, dtype="uint8") /* ty=Tensor[(11, 1, 8), uint8] */;
    %699 = cast(meta[relay.Constant][16] /* ty=Tensor[(11, 6, 8), uint8] */, dtype="uint8") /* ty=Tensor[(11, 6, 8), uint8] */;
    %700 = @func_6918() /* ty=(Tensor[(7, 5, 12), float64],) */;
    %701 = %700.0;
    %702 = cast(%701, dtype="bool") /* ty=Tensor[(7, 5, 12), bool] */;
    %703 = cast(%var_8077, dtype="float32") /* ty=Tensor[(1260), float32] */;
    %704 = reshape(%702, newshape=[420]) /* ty=Tensor[(420), bool] */;
    %705 = reshape(%703, newshape=[12, 7, 15]) /* ty=Tensor[(12, 7, 15), float32] */;
    %706 = @func_2844(%704, %705) /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(1120), uint64], Tensor[(7, 5, 12), float32], Tensor[(12, 7, 15), int16], Tensor[(56, 20), uint8], Tensor[(12, 7, 420), uint32]) */;
    %707 = @func_3731() /* ty=(Tensor[(5, 14, 16), float32], Tensor[(1120), uint64]) */;
    %708 = minimum(%698, %699) /* ty=Tensor[(11, 6, 8), uint8] */;
    %709 = @func_3924() /* ty=Tensor[(56, 20), int8] */;
    %710 = %706.0;
    %711 = @func_6636() /* ty=Tensor[(7, 5, 12), uint16] */;
    %712 = %707.1;
    (%708, %709, %701, %710, %var_8077, %711, %712)
  };
  %713(%var_8125, %var_8126) /* ty=(Tensor[(11, 6, 8), uint8], Tensor[(56, 20), int8], Tensor[(7, 5, 12), float64], Tensor[(7, 5, 12), uint16], Tensor[(1260), float32], Tensor[(7, 5, 12), uint16], Tensor[(1120), uint64]) */
}

def @func_5528() -> Tensor[(12, 7, ?), bool] {
  @func_5526() /* ty=Tensor[(12, 7, ?), bool] */
}

def @func_1482() -> Tensor[(70, 6), uint16] {
  @func_1480() /* ty=Tensor[(70, 6), uint16] */
}

def @func_2847(%var_2845: Tensor[(420), bool], %var_2846: Tensor[(12, 7, 15), float32]) -> (Tensor[(7, 5, 12), uint16], Tensor[(1120), uint64], Tensor[(7, 5, 12), float32], Tensor[(12, 7, 15), int16], Tensor[(56, 20), uint8], Tensor[(12, 7, 420), uint32]) {
  %733 = fn (%var_2785: Tensor[(420), bool], %var_2808: Tensor[(12, 7, 15), float32]) -> (Tensor[(7, 5, 12), uint16], Tensor[(1120), uint64], Tensor[(7, 5, 12), float32], Tensor[(12, 7, 15), int16], Tensor[(56, 20), uint8], Tensor[(12, 7, 420), uint32]) {
    %714 = cast(meta[relay.Constant][17] /* ty=Tensor[(1120), uint64] */, dtype="uint64") /* ty=Tensor[(1120), uint64] */;
    %715 = cast(%var_2785, dtype="bool") /* ty=Tensor[(420), bool] */;
    %716 = reshape(%714, newshape=[1120]) /* ty=Tensor[(1120), uint64] */;
    %717 = reshape(%715, newshape=[70, 6]) /* ty=Tensor[(70, 6), bool] */;
    %718 = @func_2277(%716, %717) /* ty=(Tensor[(70, 6), bool], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), float32], Tensor[(12, 7, ?), uint64], Tensor[(70, 6), int32]) */;
    %719 = @func_2157() /* ty=(Tensor[(7, 5, 12), float32],) */;
    %720 = @func_2513() /* ty=Tensor[(12, 7, ?), uint64] */;
    %721 = cast(%720, dtype="float32") /* ty=Tensor[(12, 7, ?), float32] */;
    %722 = atan(%721) /* ty=Tensor[(12, 7, ?), float32] */;
    %723 = cast(%722, dtype="int16") /* ty=Tensor[(12, 7, ?), int16] */;
    %724 = cast(%var_2808, dtype="int16") /* ty=Tensor[(12, 7, 15), int16] */;
    %725 = @func_1553() /* ty=(Tensor[(70, 6), bool], Tensor[(56, 20), uint8]) */;
    %726 = cast(%722, dtype="uint32") /* ty=Tensor[(12, 7, ?), uint32] */;
    %727 = cast(%var_2785, dtype="uint32") /* ty=Tensor[(420), uint32] */;
    %728 = %718.3;
    %729 = %719.0;
    %730 = multiply(%723, %724) /* ty=Tensor[(12, 7, 15), int16] */;
    %731 = %725.1;
    %732 = right_shift(%726, %727) /* ty=Tensor[(12, 7, 420), uint32] */;
    (%728, meta[relay.Constant][17] /* ty=Tensor[(1120), uint64] */, %729, %730, %731, %732)
  };
  %733(%var_2845, %var_2846) /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(1120), uint64], Tensor[(7, 5, 12), float32], Tensor[(12, 7, 15), int16], Tensor[(56, 20), uint8], Tensor[(12, 7, 420), uint32]) */
}

def @func_9963() -> Tensor[(7, 5, 12), float32] {
  %734 = @func_4857() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float32]) */;
  %734.1
}

def @func_10234() -> (Tensor[(70, 6), bool], Tensor[(70, 6), uint16], Tensor[(1560), int16]) {
  %744 = fn () -> (Tensor[(70, 6), bool], Tensor[(70, 6), uint16], Tensor[(1560), int16]) {
    %735 = cast(meta[relay.Constant][18] /* ty=Tensor[(1560), int16] */, dtype="int16") /* ty=Tensor[(1560), int16] */;
    %736 = cast(meta[relay.Constant][18] /* ty=Tensor[(1560), int16] */, dtype="int16") /* ty=Tensor[(1560), int16] */;
    %737 = @func_4336() /* ty=Tensor[(70, 6), bool] */;
    %738 = cast(%737, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
    %739 = reshape(%735, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), int16] */;
    %740 = reshape(%736, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), int16] */;
    %741 = reshape(%738, newshape=[420, 1]) /* ty=Tensor[(420, 1), uint16] */;
    %742 = @func_3024(%739, %740, %741) /* ty=(Tensor[(15, 8, 13), int16], Tensor[(70, 6), float64], Tensor[(420, 1), uint16], Tensor[(70, 6), uint16]) */;
    %743 = %742.3;
    (%737, %743, meta[relay.Constant][18] /* ty=Tensor[(1560), int16] */)
  };
  %744() /* ty=(Tensor[(70, 6), bool], Tensor[(70, 6), uint16], Tensor[(1560), int16]) */
}

def @func_5183() -> (Tensor[(12, 7, ?), uint64],) {
  @func_5181() /* ty=(Tensor[(12, 7, ?), uint64],) */
}

def @func_11620() -> Tensor[(70, 6), uint16] {
  @func_11618() /* ty=Tensor[(70, 6), uint16] */
}

def @func_2497() -> Tensor[(70, 6), float64] {
  @func_2495() /* ty=Tensor[(70, 6), float64] */
}

def @func_10189() -> Tensor[(7, 5, 12), uint16] {
  %745 = @func_5292() /* ty=(Tensor[(7, 5, 12), uint16],) */;
  %745.0
}

def @func_2514() -> Tensor[(12, 7, ?), uint64] {
  %747 = fn () -> Tensor[(12, 7, ?), uint64] {
    %746 = @func_2033() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(420), float32], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64]) */;
    %746.2
  };
  %747() /* ty=Tensor[(12, 7, ?), uint64] */
}

def @func_1265(%var_1201: Tensor[(1120), uint64]) -> (Tensor[(7, 5, 12), float64], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(12, 7, ?), uint64], Tensor[(7, 5, 12), int64]) {
  %748 = @func_1175() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %749 = %748.1;
  %750 = cast(%749, dtype="float64") /* ty=Tensor[(7, 5, 12), float64] */;
  %751 = cast(%var_1201, dtype="uint64") /* ty=Tensor[(1120), uint64] */;
  %752 = reshape(%751, newshape=[5, 14, 16]) /* ty=Tensor[(5, 14, 16), uint64] */;
  %753 = @func_1105() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */;
  %754 = cast(%749, dtype="float32") /* ty=Tensor[(7, 5, 12), float32] */;
  %755 = atanh(%754) /* ty=Tensor[(7, 5, 12), float32] */;
  %756 = cast(%755, dtype="float32") /* ty=Tensor[(7, 5, 12), float32] */;
  %757 = sinh(%756) /* ty=Tensor[(7, 5, 12), float32] */;
  %758 = cast(%755, dtype="int64") /* ty=Tensor[(7, 5, 12), int64] */;
  %759 = shape_of(%757, dtype="int32") /* ty=Tensor[(3), int32] */;
  %760 = cast(%757, dtype="int64") /* ty=Tensor[(7, 5, 12), int64] */;
  %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %762 = log2(%750) /* ty=Tensor[(7, 5, 12), float64] */;
  %763 = @func_1033(%752) /* ty=Tensor[(5, 14, 16), bool] */;
  %764 = %753.4;
  %765 = left_shift(%760, %761) /* ty=Tensor[(7, 5, 12), int64] */;
  (%762, %763, %var_1201, %764, %765)
}

def @func_5401(%var_5399: Tensor[(13, 15, 16), float32], %var_5400: Tensor[(13, 15, 16), float32]) -> Tensor[(13, 15, 16), float32] {
  @func_5397(%var_5399, %var_5400) /* ty=Tensor[(13, 15, 16), float32] */
}

def @func_11071() -> (Tensor[(70, 6), bool],) {
  @func_11069() /* ty=(Tensor[(70, 6), bool],) */
}

def @func_8338(%var_8315: Tensor[(12, 7, 8), uint64], %var_8316: Tensor[(12, 7, 8), uint64]) -> (Tensor[(12, 7, 8), bool], Tensor[(1120), uint64], Tensor[(88), uint8], Tensor[(1260), float32]) {
  %766 = cast(%var_8316, dtype="bool") /* ty=Tensor[(12, 7, 8), bool] */;
  %767 = shape_of(%var_8315, dtype="int32") /* ty=Tensor[(3), int32] */;
  %768 = cast(%var_8315, dtype="bool") /* ty=Tensor[(12, 7, 8), bool] */;
  %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %770 = cast(meta[relay.Constant][19] /* ty=Tensor[(88), uint8] */, dtype="uint8") /* ty=Tensor[(88), uint8] */;
  %771 = cast(meta[relay.Constant][20] /* ty=Tensor[(1260), float32] */, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %772 = reshape(%770, newshape=[11, 1, 8]) /* ty=Tensor[(11, 1, 8), uint8] */;
  %773 = reshape(%771, newshape=[1260]) /* ty=Tensor[(1260), float32] */;
  %774 = @func_8124(%772, %773) /* ty=(Tensor[(11, 6, 8), uint8], Tensor[(56, 20), int8], Tensor[(7, 5, 12), float64], Tensor[(7, 5, 12), uint16], Tensor[(1260), float32], Tensor[(7, 5, 12), uint16], Tensor[(1120), uint64]) */;
  %775 = greater(%768, %769) /* ty=Tensor[(12, 7, 8), bool] */;
  %776 = %774.6;
  (%775, %776, meta[relay.Constant][19] /* ty=Tensor[(88), uint8] */, meta[relay.Constant][20] /* ty=Tensor[(1260), float32] */)
}

def @func_10949() -> (Tensor[(7, 5, 12), float32],) {
  %779 = fn () -> (Tensor[(7, 5, 12), float32],) {
    %777 = @func_8370() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(70, 6), uint16]) */;
    %778 = %777.0;
    (%778,)
  };
  %779() /* ty=(Tensor[(7, 5, 12), float32],) */
}

def @func_3182() -> Tensor[(70, 6), float32] {
  %781 = fn () -> Tensor[(70, 6), float32] {
    %780 = @func_1912() /* ty=(Tensor[(70, 6), bool], Tensor[(1120), uint64], Tensor[(70, 6), float64], Tensor[(70, 6), float32]) */;
    %780.3
  };
  %781() /* ty=Tensor[(70, 6), float32] */
}

def @func_11069() -> (Tensor[(70, 6), bool],) {
  %782 = @func_1766() /* ty=(Tensor[(70, 6), bool],) */;
  %783 = %782.0;
  (%783,)
}

def @func_7267() -> (Tensor[(7, 5, 12), uint64], Tensor[(7, 5, 12), float64], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), float64], Tensor[(70, 6), bool]) {
  %784 = @func_3249() /* ty=(Tensor[(7, 5, 12), uint16],) */;
  %785 = %784.0;
  %786 = @func_4336() /* ty=Tensor[(70, 6), bool] */;
  %787 = cast(%786, dtype="uint64") /* ty=Tensor[(70, 6), uint64] */;
  %788 = shape_of(%785, dtype="int32") /* ty=Tensor[(3), int32] */;
  %789 = cast(%785, dtype="uint64") /* ty=Tensor[(7, 5, 12), uint64] */;
  %790 = dyn.reshape(%787, %788, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %791 = cast(%785, dtype="float64") /* ty=Tensor[(7, 5, 12), float64] */;
  %792 = @func_1105() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */;
  %793 = %792.0;
  %794 = cast(%793, dtype="float32") /* ty=Tensor[(5, 14, 16), float32] */;
  %795 = @func_6918() /* ty=(Tensor[(7, 5, 12), float64],) */;
  %796 = @func_3407() /* ty=(Tensor[(70, 6), bool], Tensor[(70, 6), float64], Tensor[(7, 5, 12), float32]) */;
  %797 = minimum(%789, %790) /* ty=Tensor[(7, 5, 12), uint64] */;
  %798 = erf(%791) /* ty=Tensor[(7, 5, 12), float64] */;
  %799 = @func_1480() /* ty=Tensor[(70, 6), uint16] */;
  %800 = asinh(%794) /* ty=Tensor[(5, 14, 16), float32] */;
  %801 = %795.0;
  %802 = %796.0;
  (%797, %798, %799, %800, %801, %802)
}

def @func_10722() -> (Tensor[(7, 5, 12), float64], Tensor[(12, 7, ?), uint64], Tensor[(70, 6), bool], Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), uint64], Tensor[(12, 7, ?), uint64]) {
  %815 = fn () -> (Tensor[(7, 5, 12), float64], Tensor[(12, 7, ?), uint64], Tensor[(70, 6), bool], Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), uint64], Tensor[(12, 7, ?), uint64]) {
    %803 = @func_2107() /* ty=(Tensor[(56, 20), float32], Tensor[(70, 6), bool], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16]) */;
    %804 = @func_2464() /* ty=(Tensor[(70, 6), float32], Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16]) */;
    %805 = %804.2;
    %806 = cast(%805, dtype="float32") /* ty=Tensor[(7, 5, 12), float32] */;
    %807 = reshape(%806, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), float32] */;
    %808 = @func_3526(%807) /* ty=(Tensor[(7, 5, 12), uint64], Tensor[(7, 5, 12), float32]) */;
    %809 = @func_5181() /* ty=(Tensor[(12, 7, ?), uint64],) */;
    %810 = @func_7745() /* ty=Tensor[(7, 5, 12), float64] */;
    %811 = @func_3478() /* ty=Tensor[(12, 7, ?), uint64] */;
    %812 = %803.1;
    %813 = %808.0;
    %814 = %809.0;
    (%810, %811, %812, %805, %813, %814)
  };
  %815() /* ty=(Tensor[(7, 5, 12), float64], Tensor[(12, 7, ?), uint64], Tensor[(70, 6), bool], Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), uint64], Tensor[(12, 7, ?), uint64]) */
}

def @func_2882() -> (Tensor[(7, 5, 12), uint16],) {
  @func_2880() /* ty=(Tensor[(7, 5, 12), uint16],) */
}

def @func_2890(%var_2889: Tensor[(1, 4, 2), float32]) -> (Tensor[(1, 4, 2), float32],) {
  %818 = fn (%var_2885: Tensor[(1, 4, 2), float32]) -> (Tensor[(1, 4, 2), float32],) {
    %816 = cast(%var_2885, dtype="float32") /* ty=Tensor[(1, 4, 2), float32] */;
    %817 = atan(%816) /* ty=Tensor[(1, 4, 2), float32] */;
    (%817,)
  };
  %818(%var_2889) /* ty=(Tensor[(1, 4, 2), float32],) */
}

def @func_3837() -> Tensor[(7, 5, 12), float64] {
  %822 = fn () -> Tensor[(7, 5, 12), float64] {
    %819 = @func_3191() /* ty=(Tensor[(7, 5, 12), float32],) */;
    %820 = %819.0;
    %821 = cast(%820, dtype="float64") /* ty=Tensor[(7, 5, 12), float64] */;
    tan(%821) /* ty=Tensor[(7, 5, 12), float64] */
  };
  %822() /* ty=Tensor[(7, 5, 12), float64] */
}

def @func_3458() -> (Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64]) {
  %829 = fn () -> (Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64]) {
    %823 = @func_1105() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */;
    %824 = cast(meta[relay.Constant][21] /* ty=Tensor[(1120), uint64] */, dtype="uint64") /* ty=Tensor[(1120), uint64] */;
    %825 = reshape(%824, newshape=[1120]) /* ty=Tensor[(1120), uint64] */;
    %826 = @func_1265(%825) /* ty=(Tensor[(7, 5, 12), float64], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(12, 7, ?), uint64], Tensor[(7, 5, 12), int64]) */;
    %827 = %823.3;
    %828 = %826.3;
    (%827, %828, meta[relay.Constant][21] /* ty=Tensor[(1120), uint64] */)
  };
  %829() /* ty=(Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64]) */
}

def @func_6112() -> (Tensor[(70, 6), uint16], Tensor[(7, 5, 12), float32]) {
  %833 = fn () -> (Tensor[(70, 6), uint16], Tensor[(7, 5, 12), float32]) {
    %830 = @func_5789() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float32], Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), uint16]) */;
    %831 = @func_4085() /* ty=Tensor[(70, 6), uint16] */;
    %832 = %830.1;
    (%831, %832)
  };
  %833() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), float32]) */
}

def @func_9685() -> (Tensor[(5, 14, 16), float32], Tensor[(12, 7, ?), uint64], Tensor[(7, 5, 12), float64]) {
  @func_9683() /* ty=(Tensor[(5, 14, 16), float32], Tensor[(12, 7, ?), uint64], Tensor[(7, 5, 12), float64]) */
}

def @func_1767() -> (Tensor[(70, 6), bool],) {
  %836 = fn () -> (Tensor[(70, 6), bool],) {
    %834 = @func_1553() /* ty=(Tensor[(70, 6), bool], Tensor[(56, 20), uint8]) */;
    %835 = %834.0;
    (%835,)
  };
  %836() /* ty=(Tensor[(70, 6), bool],) */
}

def @func_10797(%var_10795: Tensor[(10), uint64], %var_10796: Tensor[(8), float32]) -> (Tensor[(7, 5, 12), float64], Tensor[(7, 10, 7), uint64], Tensor[(10), uint64], Tensor[(1, 4, 2), float32], Tensor[(8), float32]) {
  %847 = fn (%var_10784: Tensor[(10), uint64], %var_10791: Tensor[(8), float32]) -> (Tensor[(7, 5, 12), float64], Tensor[(7, 10, 7), uint64], Tensor[(10), uint64], Tensor[(1, 4, 2), float32], Tensor[(8), float32]) {
    %837 = @func_5574() /* ty=(Tensor[(7, 5, 12), float64],) */;
    %838 = cast(%var_10784, dtype="uint64") /* ty=Tensor[(10), uint64] */;
    %839 = reshape(%838, newshape=[1, 10, 1]) /* ty=Tensor[(1, 10, 1), uint64] */;
    %840 = @func_5942(%839) /* ty=(Tensor[(7, 10, 7), uint64],) */;
    %841 = cast(%var_10791, dtype="float32") /* ty=Tensor[(8), float32] */;
    %842 = reshape(%841, newshape=[1, 4, 2]) /* ty=Tensor[(1, 4, 2), float32] */;
    %843 = @func_2888(%842) /* ty=(Tensor[(1, 4, 2), float32],) */;
    %844 = %837.0;
    %845 = %840.0;
    %846 = %843.0;
    (%844, %845, %var_10784, %846, %var_10791)
  };
  %847(%var_10795, %var_10796) /* ty=(Tensor[(7, 5, 12), float64], Tensor[(7, 10, 7), uint64], Tensor[(10), uint64], Tensor[(1, 4, 2), float32], Tensor[(8), float32]) */
}

def @func_8371() -> (Tensor[(7, 5, 12), float32], Tensor[(70, 6), uint16]) {
  %851 = fn () -> (Tensor[(7, 5, 12), float32], Tensor[(70, 6), uint16]) {
    %848 = @func_3642() /* ty=(Tensor[(70, 6), uint16],) */;
    %849 = @func_3041() /* ty=Tensor[(7, 5, 12), float32] */;
    %850 = %848.0;
    (%849, %850)
  };
  %851() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(70, 6), uint16]) */
}

def @main(%var_11843: Tensor[(1120), bool]) -> (Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float32], Tensor[(1120), bool], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), float32], Tensor[(7, 4, 8), bool]) {
  %852 = @func_5223() /* ty=(Tensor[(70, 6), bool], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16]) */;
  %853 = cast(%var_11843, dtype="bool") /* ty=Tensor[(1120), bool] */;
  %854 = reshape(%853, newshape=[2, 560]) /* ty=Tensor[(2, 560), bool] */;
  %855 = @func_10432(%854) /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float32], Tensor[(2, 560), float64], Tensor[(70, 6), float64], Tensor[(7, 5, 12), float32]) */;
  %856 = @func_9156() /* ty=(Tensor[(70, 6), uint16],) */;
  %857 = @func_10949() /* ty=(Tensor[(7, 5, 12), float32],) */;
  %858 = cast(meta[relay.Constant][22] /* ty=Tensor[(7, 4, 8), float64] */, dtype="float64") /* ty=Tensor[(7, 4, 8), float64] */;
  %859 = cos(%858) /* ty=Tensor[(7, 4, 8), float64] */;
  %860 = cast(meta[relay.Constant][22] /* ty=Tensor[(7, 4, 8), float64] */, dtype="float32") /* ty=Tensor[(7, 4, 8), float32] */;
  %861 = shape_of(%859, dtype="int32") /* ty=Tensor[(3), int32] */;
  %862 = cast(%859, dtype="float32") /* ty=Tensor[(7, 4, 8), float32] */;
  %863 = dyn.reshape(%860, %861, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %864 = divide(%862, %863) /* ty=Tensor[(7, 4, 8), float32] */;
  %865 = cast(%864, dtype="int16") /* ty=Tensor[(7, 4, 8), int16] */;
  %866 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(7, 4, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %867 = cast(meta[relay.Constant][22] /* ty=Tensor[(7, 4, 8), float64] */, dtype="int16") /* ty=Tensor[(7, 4, 8), int16] */;
  %868 = dyn.reshape(%865, %866, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %869 = bitwise_and(%867, %868) /* ty=Tensor[(7, 4, 8), int16] */;
  %870 = cast(%869, dtype="bool") /* ty=Tensor[(7, 4, 8), bool] */;
  %871 = shape_of(%864, dtype="int32") /* ty=Tensor[(3), int32] */;
  %872 = cast(%864, dtype="bool") /* ty=Tensor[(7, 4, 8), bool] */;
  %873 = dyn.reshape(%870, %871, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %874 = %852.1;
  %875 = %855.1;
  %876 = %856.0;
  %877 = %857.0;
  %878 = greater_equal(%872, %873) /* ty=Tensor[(7, 4, 8), bool] */;
  (%874, %875, %var_11843, %876, %877, %878)
}

def @func_8943() -> (Tensor[(7, 5, 12), uint16], Tensor[(5, 14, 16), float32], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), float64], Tensor[(7, 5, 12), float32], Tensor[(70, 6), float64]) {
  @func_8941() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(5, 14, 16), float32], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), float64], Tensor[(7, 5, 12), float32], Tensor[(70, 6), float64]) */
}

def @func_7512(%var_7500: Tensor[(1183), float32]) -> (Tensor[(7, 5, 12), float64], Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), uint16], Tensor[(13, 13, 7), float32], Tensor[(1183), float32], Tensor[(7, 5, 12), uint16]) {
  %879 = @func_7353() /* ty=(Tensor[(7, 5, 12), float64], Tensor[(70, 6), float64], Tensor[(7, 5, 12), float64], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), float32], Tensor[(5, 14, 16), float32], Tensor[(5, 14, 16), float64]) */;
  %880 = %879.2;
  %881 = cast(%880, dtype="uint16") /* ty=Tensor[(7, 5, 12), uint16] */;
  %882 = cast(%880, dtype="uint16") /* ty=Tensor[(7, 5, 12), uint16] */;
  %883 = reshape(%881, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %884 = reshape(%882, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %885 = @func_3249() /* ty=(Tensor[(7, 5, 12), uint16],) */;
  %886 = cast(%var_7500, dtype="float32") /* ty=Tensor[(1183), float32] */;
  %887 = reshape(%886, newshape=[13, 13, 7]) /* ty=Tensor[(13, 13, 7), float32] */;
  %888 = @func_6987(%887) /* ty=(Tensor[(13, 13, 7), float32], Tensor[(7, 5, 12), uint16]) */;
  %889 = @func_4994() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(2, 560), bool]) */;
  %890 = @func_380(%883, %884) /* ty=Tensor[(7, 5, 12), uint16] */;
  %891 = %885.0;
  %892 = %888.0;
  %893 = %889.0;
  (%880, %890, %891, %892, %var_7500, %893)
}

def @func_2157() -> (Tensor[(7, 5, 12), float32],) {
  %894 = @func_1718() /* ty=(Tensor[(7, 5, 12), uint16],) */;
  %895 = %894.0;
  %896 = cast(%895, dtype="float32") /* ty=Tensor[(7, 5, 12), float32] */;
  %897 = asinh(%896) /* ty=Tensor[(7, 5, 12), float32] */;
  (%897,)
}

def @func_5171() -> (Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16]) {
  %901 = fn () -> (Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16]) {
    %898 = @func_3906() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), float32]) */;
    %899 = %898.1;
    %900 = @func_2666() /* ty=Tensor[(7, 5, 12), uint16] */;
    (%899, %900)
  };
  %901() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16]) */
}

def @func_11774() -> (Tensor[(5, 14, 16), float32], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64], Tensor[(12, 7, ?), uint64]) {
  %902 = @func_7267() /* ty=(Tensor[(7, 5, 12), uint64], Tensor[(7, 5, 12), float64], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), float64], Tensor[(70, 6), bool]) */;
  %903 = @func_5328() /* ty=(Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */;
  %904 = @func_1912() /* ty=(Tensor[(70, 6), bool], Tensor[(1120), uint64], Tensor[(70, 6), float64], Tensor[(70, 6), float32]) */;
  %905 = @func_6807() /* ty=(Tensor[(12, 7, ?), uint64],) */;
  %906 = %902.3;
  %907 = %903.1;
  %908 = %904.1;
  %909 = %905.0;
  (%906, %907, %908, %909)
}

def @func_6989(%var_6988: Tensor[(13, 13, 7), float32]) -> (Tensor[(13, 13, 7), float32], Tensor[(7, 5, 12), uint16]) {
  %913 = fn (%var_6972: Tensor[(13, 13, 7), float32]) -> (Tensor[(13, 13, 7), float32], Tensor[(7, 5, 12), uint16]) {
    %910 = cast(%var_6972, dtype="float32") /* ty=Tensor[(13, 13, 7), float32] */;
    %911 = rsqrt(%910) /* ty=Tensor[(13, 13, 7), float32] */;
    %912 = @func_3651() /* ty=Tensor[(7, 5, 12), uint16] */;
    (%911, %912)
  };
  %913(%var_6988) /* ty=(Tensor[(13, 13, 7), float32], Tensor[(7, 5, 12), uint16]) */
}

def @func_9745() -> Tensor[(70, 6), float64] {
  %917 = fn () -> Tensor[(70, 6), float64] {
    %914 = @func_5328() /* ty=(Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */;
    %915 = %914.0;
    %916 = cast(%915, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
    sqrt(%916) /* ty=Tensor[(70, 6), float64] */
  };
  %917() /* ty=Tensor[(70, 6), float64] */
}

def @func_4085() -> Tensor[(70, 6), uint16] {
  @func_2722() /* ty=Tensor[(70, 6), uint16] */
}

def @func_7269() -> (Tensor[(7, 5, 12), uint64], Tensor[(7, 5, 12), float64], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), float64], Tensor[(70, 6), bool]) {
  @func_7267() /* ty=(Tensor[(7, 5, 12), uint64], Tensor[(7, 5, 12), float64], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), float64], Tensor[(70, 6), bool]) */
}

def @func_1553() -> (Tensor[(70, 6), bool], Tensor[(56, 20), uint8]) {
  %918 = @func_1105() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */;
  %919 = %918.3;
  %920 = @func_1105() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */;
  %921 = %920.2;
  %922 = cast(%921, dtype="uint16") /* ty=Tensor[(7, 5, 12), uint16] */;
  %923 = shape_of(%919, dtype="int32") /* ty=Tensor[(2), int32] */;
  %924 = cast(%919, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %925 = dyn.reshape(%922, %923, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %926 = left_shift(%924, %925) /* ty=Tensor[(70, 6), uint16] */;
  %927 = cast(%926, dtype="bool") /* ty=Tensor[(70, 6), bool] */;
  %928 = shape_of(%919, dtype="int32") /* ty=Tensor[(2), int32] */;
  %929 = cast(%919, dtype="bool") /* ty=Tensor[(70, 6), bool] */;
  %930 = dyn.reshape(%927, %928, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %931 = cast(meta[relay.Constant][23] /* ty=Tensor[(56, 20), uint64] */, dtype="uint64") /* ty=Tensor[(56, 20), uint64] */;
  %932 = reshape(%931, newshape=[5, 14, 16]) /* ty=Tensor[(5, 14, 16), uint64] */;
  %933 = @func_1033(%932) /* ty=Tensor[(5, 14, 16), bool] */;
  %934 = cast(%933, dtype="uint8") /* ty=Tensor[(5, 14, 16), uint8] */;
  %935 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(56, 20), uint64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %936 = cast(meta[relay.Constant][23] /* ty=Tensor[(56, 20), uint64] */, dtype="uint8") /* ty=Tensor[(56, 20), uint8] */;
  %937 = dyn.reshape(%934, %935, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %938 = less_equal(%929, %930) /* ty=Tensor[(70, 6), bool] */;
  %939 = maximum(%936, %937) /* ty=Tensor[(56, 20), uint8] */;
  (%938, %939)
}

def @func_3689(%var_3683: Tensor[(7, 5, 12), uint16]) -> (Tensor[(70, 6), uint16], Tensor[(7, 5, 12), float64]) {
  %940 = @func_1105() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */;
  %941 = @func_2880() /* ty=(Tensor[(7, 5, 12), uint16],) */;
  %942 = %941.0;
  %943 = cast(%var_3683, dtype="float64") /* ty=Tensor[(7, 5, 12), float64] */;
  %944 = shape_of(%942, dtype="int32") /* ty=Tensor[(3), int32] */;
  %945 = cast(%942, dtype="float64") /* ty=Tensor[(7, 5, 12), float64] */;
  %946 = dyn.reshape(%943, %944, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %947 = %940.3;
  %948 = power(%945, %946) /* ty=Tensor[(7, 5, 12), float64] */;
  (%947, %948)
}

def @func_5201() -> (Tensor[(7, 5, 12), float64],) {
  %949 = @func_3966() /* ty=(Tensor[(7, 5, 12), float64],) */;
  %950 = %949.0;
  (%950,)
}

def @func_4994() -> (Tensor[(7, 5, 12), uint16], Tensor[(2, 560), bool]) {
  %951 = @func_1175() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %952 = %951.1;
  %953 = cast(%952, dtype="float32") /* ty=Tensor[(7, 5, 12), float32] */;
  %954 = reshape(%953, newshape=[70, 6]) /* ty=Tensor[(70, 6), float32] */;
  %955 = @func_1467(%954) /* ty=(Tensor[(7, 5, 12), int64], Tensor[(70, 6), float64], Tensor[(7, 5, 12), uint16], Tensor[(2, 560), bool], Tensor[(5, 14, 16), bool], Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), float32], Tensor[(70, 6), float64], Tensor[(7, 5, 12), uint16], Tensor[(5, 14, 16), bool], Tensor[(5, 14, 16), bool], Tensor[(70, 6), float32], Tensor[(7, 5, 12), uint16]) */;
  %956 = %955.3;
  (%952, %956)
}

def @func_6706(%var_6704: Tensor[(7, 5, 12), float64], %var_6705: Tensor[(10, 63), int64]) -> (Tensor[(7, 5, 12), bool], Tensor[(7, 5, 12), uint16], Tensor[(7, 9, 10), uint8], Tensor[(10), int64], Tensor[(10, 63), int64]) {
  %970 = fn (%var_6686: Tensor[(7, 5, 12), float64], %var_6701: Tensor[(10, 63), int64]) -> (Tensor[(7, 5, 12), bool], Tensor[(7, 5, 12), uint16], Tensor[(7, 9, 10), uint8], Tensor[(10), int64], Tensor[(10, 63), int64]) {
    %957 = @func_5201() /* ty=(Tensor[(7, 5, 12), float64],) */;
    %958 = %957.0;
    %959 = cast(%var_6686, dtype="bool") /* ty=Tensor[(7, 5, 12), bool] */;
    %960 = shape_of(%958, dtype="int32") /* ty=Tensor[(3), int32] */;
    %961 = cast(%958, dtype="bool") /* ty=Tensor[(7, 5, 12), bool] */;
    %962 = dyn.reshape(%959, %960, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %963 = cast(meta[relay.Constant][24] /* ty=Tensor[(10), int64] */, dtype="int64") /* ty=Tensor[(10), int64] */;
    %964 = cast(%var_6701, dtype="int64") /* ty=Tensor[(10, 63), int64] */;
    %965 = reshape(%963, newshape=[1, 1, 10]) /* ty=Tensor[(1, 1, 10), int64] */;
    %966 = reshape(%964, newshape=[7, 9, 10]) /* ty=Tensor[(7, 9, 10), int64] */;
    %967 = not_equal(%961, %962) /* ty=Tensor[(7, 5, 12), bool] */;
    %968 = @func_5360() /* ty=Tensor[(7, 5, 12), uint16] */;
    %969 = @func_5649(%965, %966) /* ty=Tensor[(7, 9, 10), uint8] */;
    (%967, %968, %969, meta[relay.Constant][24] /* ty=Tensor[(10), int64] */, %var_6701)
  };
  %970(%var_6704, %var_6705) /* ty=(Tensor[(7, 5, 12), bool], Tensor[(7, 5, 12), uint16], Tensor[(7, 9, 10), uint8], Tensor[(10), int64], Tensor[(10, 63), int64]) */
}

def @func_2108() -> (Tensor[(56, 20), float32], Tensor[(70, 6), bool], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16]) {
  %982 = fn () -> (Tensor[(56, 20), float32], Tensor[(70, 6), bool], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16]) {
    %971 = @func_1553() /* ty=(Tensor[(70, 6), bool], Tensor[(56, 20), uint8]) */;
    %972 = %971.1;
    %973 = cast(%972, dtype="float32") /* ty=Tensor[(56, 20), float32] */;
    %974 = @func_1766() /* ty=(Tensor[(70, 6), bool],) */;
    %975 = %974.0;
    %976 = cast(%975, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
    %977 = reshape(%976, newshape=[70, 6]) /* ty=Tensor[(70, 6), uint16] */;
    %978 = @func_1298(%977) /* ty=(Tensor[(70, 6), float64], Tensor[(70, 6), uint16]) */;
    %979 = erf(%973) /* ty=Tensor[(56, 20), float32] */;
    %980 = %978.1;
    %981 = @func_1480() /* ty=Tensor[(70, 6), uint16] */;
    (%979, %975, %980, %981)
  };
  %982() /* ty=(Tensor[(56, 20), float32], Tensor[(70, 6), bool], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16]) */
}

def @func_9616() -> Tensor[(5, 14, 16), float32] {
  %984 = fn () -> Tensor[(5, 14, 16), float32] {
    %983 = @func_3731() /* ty=(Tensor[(5, 14, 16), float32], Tensor[(1120), uint64]) */;
    %983.0
  };
  %984() /* ty=Tensor[(5, 14, 16), float32] */
}

def @func_3574() -> (Tensor[(70, 6), uint16],) {
  %985 = @func_1175() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %986 = %985.0;
  (%986,)
}

def @func_380(%var_375: Tensor[(7, 5, 12), uint16], %var_376: Tensor[(7, 5, 12), uint16]) -> Tensor[(7, 5, 12), uint16] {
  %987 = cast(%var_376, dtype="uint16") /* ty=Tensor[(7, 5, 12), uint16] */;
  %988 = shape_of(%var_375, dtype="int32") /* ty=Tensor[(3), int32] */;
  %989 = cast(%var_375, dtype="uint16") /* ty=Tensor[(7, 5, 12), uint16] */;
  %990 = dyn.reshape(%987, %988, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  logical_xor(%989, %990) /* ty=Tensor[(7, 5, 12), uint16] */
}

def @func_9783() -> (Tensor[(7, 5, 12), uint16],) {
  @func_9781() /* ty=(Tensor[(7, 5, 12), uint16],) */
}

def @func_10191() -> Tensor[(7, 5, 12), uint16] {
  @func_10189() /* ty=Tensor[(7, 5, 12), uint16] */
}

def @func_4298() -> (Tensor[(12, 7, ?), uint64],) {
  @func_4296() /* ty=(Tensor[(12, 7, ?), uint64],) */
}

def @func_7464() -> (Tensor[(70, 6), uint16], Tensor[(15, 8, 13), int16], Tensor[(1, 1560), int16]) {
  %991 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 1560), int16] */, dtype="int16") /* ty=Tensor[(1, 1560), int16] */;
  %992 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 1560), int16] */, dtype="int16") /* ty=Tensor[(1, 1560), int16] */;
  %993 = @func_3872() /* ty=Tensor[(70, 6), uint16] */;
  %994 = cast(%993, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %995 = reshape(%991, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), int16] */;
  %996 = reshape(%992, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), int16] */;
  %997 = reshape(%994, newshape=[420, 1]) /* ty=Tensor[(420, 1), uint16] */;
  %998 = @func_3024(%995, %996, %997) /* ty=(Tensor[(15, 8, 13), int16], Tensor[(70, 6), float64], Tensor[(420, 1), uint16], Tensor[(70, 6), uint16]) */;
  %999 = %998.0;
  (%993, %999, meta[relay.Constant][25] /* ty=Tensor[(1, 1560), int16] */)
}

def @func_4996() -> (Tensor[(7, 5, 12), uint16], Tensor[(2, 560), bool]) {
  @func_4994() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(2, 560), bool]) */
}

def @func_7746() -> Tensor[(7, 5, 12), float64] {
  %1001 = fn () -> Tensor[(7, 5, 12), float64] {
    %1000 = @func_5201() /* ty=(Tensor[(7, 5, 12), float64],) */;
    %1000.0
  };
  %1001() /* ty=Tensor[(7, 5, 12), float64] */
}

def @func_1467(%var_1368: Tensor[(70, 6), float32]) -> (Tensor[(7, 5, 12), int64], Tensor[(70, 6), float64], Tensor[(7, 5, 12), uint16], Tensor[(2, 560), bool], Tensor[(5, 14, 16), bool], Tensor[(5, 14, 16), bool], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), float32], Tensor[(70, 6), float64], Tensor[(7, 5, 12), uint16], Tensor[(5, 14, 16), bool], Tensor[(5, 14, 16), bool], Tensor[(70, 6), float32], Tensor[(7, 5, 12), uint16]) {
  %1002 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 560), uint64] */, dtype="uint64") /* ty=Tensor[(2, 560), uint64] */;
  %1003 = reshape(%1002, newshape=[5, 14, 16]) /* ty=Tensor[(5, 14, 16), uint64] */;
  %1004 = @func_1033(%1003) /* ty=Tensor[(5, 14, 16), bool] */;
  %1005 = cast(%1004, dtype="uint64") /* ty=Tensor[(5, 14, 16), uint64] */;
  %1006 = reshape(%1005, newshape=[1120]) /* ty=Tensor[(1120), uint64] */;
  %1007 = @func_1265(%1006) /* ty=(Tensor[(7, 5, 12), float64], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(12, 7, ?), uint64], Tensor[(7, 5, 12), int64]) */;
  %1008 = @func_1105() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */;
  %1009 = %1008.3;
  %1010 = cast(%1009, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %1011 = reshape(%1010, newshape=[70, 6]) /* ty=Tensor[(70, 6), uint16] */;
  %1012 = @func_1298(%1011) /* ty=(Tensor[(70, 6), float64], Tensor[(70, 6), uint16]) */;
  %1013 = @func_1105() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */;
  %1014 = cast(%1004, dtype="bool") /* ty=Tensor[(5, 14, 16), bool] */;
  %1015 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(2, 560), uint64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1016 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 560), uint64] */, dtype="bool") /* ty=Tensor[(2, 560), bool] */;
  %1017 = dyn.reshape(%1014, %1015, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1018 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 560), uint64] */, dtype="uint64") /* ty=Tensor[(2, 560), uint64] */;
  %1019 = reshape(%1018, newshape=[5, 14, 16]) /* ty=Tensor[(5, 14, 16), uint64] */;
  %1020 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 560), uint64] */, dtype="uint64") /* ty=Tensor[(2, 560), uint64] */;
  %1021 = reshape(%1020, newshape=[5, 14, 16]) /* ty=Tensor[(5, 14, 16), uint64] */;
  %1022 = cast(%1009, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %1023 = cast(%1009, dtype="float32") /* ty=Tensor[(70, 6), float32] */;
  %1024 = sin(%1023) /* ty=Tensor[(70, 6), float32] */;
  %1025 = cast(%1024, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %1026 = reshape(%1022, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %1027 = reshape(%1025, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %1028 = %1012.0;
  %1029 = cast(%1028, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %1030 = reshape(%1029, newshape=[70, 6]) /* ty=Tensor[(70, 6), uint16] */;
  %1031 = @func_1298(%1030) /* ty=(Tensor[(70, 6), float64], Tensor[(70, 6), uint16]) */;
  %1032 = cast(%1024, dtype="float32") /* ty=Tensor[(70, 6), float32] */;
  %1033 = @func_380(%1026, %1027) /* ty=Tensor[(7, 5, 12), uint16] */;
  %1034 = cast(%1033, dtype="uint16") /* ty=Tensor[(7, 5, 12), uint16] */;
  %1035 = reshape(%1034, newshape=[70, 6]) /* ty=Tensor[(70, 6), uint16] */;
  %1036 = @func_1298(%1035) /* ty=(Tensor[(70, 6), float64], Tensor[(70, 6), uint16]) */;
  %1037 = cast(%var_1368, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %1038 = shape_of(%1024, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1039 = cast(%1024, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %1040 = dyn.reshape(%1037, %1038, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %1041 = mod(%1039, %1040) /* ty=Tensor[(70, 6), float64] */;
  %1042 = cast(%1041, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %1043 = cast(%1028, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %1044 = reshape(%1042, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %1045 = reshape(%1043, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %1046 = cast(%1004, dtype="uint64") /* ty=Tensor[(5, 14, 16), uint64] */;
  %1047 = reshape(%1046, newshape=[5, 14, 16]) /* ty=Tensor[(5, 14, 16), uint64] */;
  %1048 = @func_1033(%1019) /* ty=Tensor[(5, 14, 16), bool] */;
  %1049 = cast(%1048, dtype="uint64") /* ty=Tensor[(5, 14, 16), uint64] */;
  %1050 = reshape(%1049, newshape=[5, 14, 16]) /* ty=Tensor[(5, 14, 16), uint64] */;
  %1051 = cast(%1041, dtype="float32") /* ty=Tensor[(70, 6), float32] */;
  %1052 = %1031.1;
  %1053 = cast(%1052, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %1054 = cast(%var_1368, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
  %1055 = reshape(%1053, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %1056 = reshape(%1054, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
  %1057 = %1007.4;
  %1058 = %1013.2;
  %1059 = logical_and(%1016, %1017) /* ty=Tensor[(2, 560), bool] */;
  %1060 = @func_1033(%1021) /* ty=Tensor[(5, 14, 16), bool] */;
  %1061 = log2(%1032) /* ty=Tensor[(70, 6), float32] */;
  %1062 = %1036.0;
  %1063 = @func_380(%1044, %1045) /* ty=Tensor[(7, 5, 12), uint16] */;
  %1064 = @func_1033(%1047) /* ty=Tensor[(5, 14, 16), bool] */;
  %1065 = @func_1033(%1050) /* ty=Tensor[(5, 14, 16), bool] */;
  %1066 = erf(%1051) /* ty=Tensor[(70, 6), float32] */;
  %1067 = @func_380(%1055, %1056) /* ty=Tensor[(7, 5, 12), uint16] */;
  (%1057, %1028, %1058, %1059, %1048, %1060, %1033, %1052, %1061, %1062, %1063, %1064, %1065, %1066, %1067)
}

def @func_2723() -> Tensor[(70, 6), uint16] {
  %1069 = fn () -> Tensor[(70, 6), uint16] {
    %1068 = @func_1664() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
    %1068.6
  };
  %1069() /* ty=Tensor[(70, 6), uint16] */
}

def @func_7931() -> (Tensor[(5, 14, 16), float64], Tensor[(9, 6, 10), bool], Tensor[(540), uint8], Tensor[(11, 8, 14), float64], Tensor[(88), float64], Tensor[(1232), float64]) {
  %1070 = @func_7353() /* ty=(Tensor[(7, 5, 12), float64], Tensor[(70, 6), float64], Tensor[(7, 5, 12), float64], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), float32], Tensor[(5, 14, 16), float32], Tensor[(5, 14, 16), float64]) */;
  %1071 = %1070.5;
  %1072 = cast(%1071, dtype="float64") /* ty=Tensor[(5, 14, 16), float64] */;
  %1073 = cast(meta[relay.Constant][27] /* ty=Tensor[(540), uint8] */, dtype="uint8") /* ty=Tensor[(540), uint8] */;
  %1074 = reshape(%1073, newshape=[9, 6, 10]) /* ty=Tensor[(9, 6, 10), uint8] */;
  %1075 = cast(meta[relay.Constant][28] /* ty=Tensor[(88), float64] */, dtype="float64") /* ty=Tensor[(88), float64] */;
  %1076 = cast(meta[relay.Constant][29] /* ty=Tensor[(1232), float64] */, dtype="float64") /* ty=Tensor[(1232), float64] */;
  %1077 = reshape(%1075, newshape=[11, 8, 1]) /* ty=Tensor[(11, 8, 1), float64] */;
  %1078 = reshape(%1076, newshape=[11, 8, 14]) /* ty=Tensor[(11, 8, 14), float64] */;
  %1079 = log10(%1072) /* ty=Tensor[(5, 14, 16), float64] */;
  %1080 = @func_6164(%1074) /* ty=Tensor[(9, 6, 10), bool] */;
  %1081 = @func_4930(%1077, %1078) /* ty=Tensor[(11, 8, 14), float64] */;
  (%1079, %1080, meta[relay.Constant][27] /* ty=Tensor[(540), uint8] */, %1081, meta[relay.Constant][28] /* ty=Tensor[(88), float64] */, meta[relay.Constant][29] /* ty=Tensor[(1232), float64] */)
}

def @func_8773() -> Tensor[(7, 5, 12), float32] {
  @func_8771() /* ty=Tensor[(7, 5, 12), float32] */
}

def @func_5223() -> (Tensor[(70, 6), bool], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16]) {
  %1090 = fn () -> (Tensor[(70, 6), bool], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16]) {
    %1082 = @func_1766() /* ty=(Tensor[(70, 6), bool],) */;
    %1083 = %1082.0;
    %1084 = cast(%1083, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
    %1085 = cast(%1083, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
    %1086 = reshape(%1084, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
    %1087 = reshape(%1085, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
    %1088 = @func_380(%1086, %1087) /* ty=Tensor[(7, 5, 12), uint16] */;
    %1089 = @func_4085() /* ty=Tensor[(70, 6), uint16] */;
    (%1083, %1088, %1089)
  };
  %1090() /* ty=(Tensor[(70, 6), bool], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16]) */
}

def @func_2971() -> Tensor[(7, 5, 12), uint16] {
  %1092 = fn () -> Tensor[(7, 5, 12), uint16] {
    %1091 = @func_1175() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
    %1091.1
  };
  %1092() /* ty=Tensor[(7, 5, 12), uint16] */
}

def @func_3352() -> (Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float32]) {
  %1093 = @func_2157() /* ty=(Tensor[(7, 5, 12), float32],) */;
  %1094 = @func_2666() /* ty=Tensor[(7, 5, 12), uint16] */;
  %1095 = %1093.0;
  (%1094, %1095)
}

def @func_9828(%var_9826: Tensor[(12, 1, 13), int8], %var_9827: Tensor[(1120), float32]) -> (Tensor[(12, 3, 13), int8], Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16], Tensor[(1120), float32]) {
  %1105 = fn (%var_9787: Tensor[(12, 1, 13), int8], %var_9813: Tensor[(1120), float32]) -> (Tensor[(12, 3, 13), int8], Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16], Tensor[(1120), float32]) {
    %1096 = cast(%var_9787, dtype="int8") /* ty=Tensor[(12, 1, 13), int8] */;
    %1097 = cast(meta[relay.Constant][30] /* ty=Tensor[(12, 3, 13), int8] */, dtype="int8") /* ty=Tensor[(12, 3, 13), int8] */;
    %1098 = @func_7604() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(70, 6), bool]) */;
    %1099 = cast(%var_9813, dtype="float32") /* ty=Tensor[(1120), float32] */;
    %1100 = reshape(%1099, newshape=[56, 20]) /* ty=Tensor[(56, 20), float32] */;
    %1101 = @func_4693(%1100) /* ty=(Tensor[(7, 5, 12), float32], Tensor[(56, 20), uint16], Tensor[(7, 5, 12), uint16], Tensor[(5, 14, 16), bool]) */;
    %1102 = bitwise_or(%1096, %1097) /* ty=Tensor[(12, 3, 13), int8] */;
    %1103 = %1098.0;
    %1104 = %1101.2;
    (%1102, %1103, %1104, %var_9813)
  };
  %1105(%var_9826, %var_9827) /* ty=(Tensor[(12, 3, 13), int8], Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16], Tensor[(1120), float32]) */
}

def @func_6079() -> (Tensor[(70, 6), float64],) {
  %1108 = fn () -> (Tensor[(70, 6), float64],) {
    %1106 = @func_5866() /* ty=(Tensor[(70, 6), float64], Tensor[(12, 7, ?), bool]) */;
    %1107 = %1106.0;
    (%1107,)
  };
  %1108() /* ty=(Tensor[(70, 6), float64],) */
}

def @func_8736() -> (Tensor[(70, 6), bool], Tensor[(12, 7, ?), bool]) {
  %1109 = @func_1912() /* ty=(Tensor[(70, 6), bool], Tensor[(1120), uint64], Tensor[(70, 6), float64], Tensor[(70, 6), float32]) */;
  %1110 = %1109.0;
  %1111 = @func_5526() /* ty=Tensor[(12, 7, ?), bool] */;
  (%1110, %1111)
}

def @func_11161() -> (Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), uint16]) {
  @func_11159() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), uint16]) */
}

def @func_3872() -> Tensor[(70, 6), uint16] {
  %1112 = @func_3457() /* ty=(Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64], Tensor[(1120), uint64]) */;
  %1112.0
}

def @func_1720() -> (Tensor[(7, 5, 12), uint16],) {
  @func_1718() /* ty=(Tensor[(7, 5, 12), uint16],) */
}

def @func_7974(%var_7972: Tensor[(7, 5, 12), float32]) -> (Tensor[(7, 5, 12), uint16], Tensor[(10), int64], Tensor[(630), int64]) {
  @func_7971(%var_7972) /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(10), int64], Tensor[(630), int64]) */
}

def @func_3967() -> (Tensor[(7, 5, 12), float64],) {
  %1114 = fn () -> (Tensor[(7, 5, 12), float64],) {
    %1113 = @func_3836() /* ty=Tensor[(7, 5, 12), float64] */;
    (%1113,)
  };
  %1114() /* ty=(Tensor[(7, 5, 12), float64],) */
}

def @func_1106() -> (Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) {
  %1135 = fn () -> (Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) {
    %1115 = cast(meta[relay.Constant][31] /* ty=Tensor[(1120), uint64] */, dtype="uint64") /* ty=Tensor[(1120), uint64] */;
    %1116 = reshape(%1115, newshape=[5, 14, 16]) /* ty=Tensor[(5, 14, 16), uint64] */;
    %1117 = cast(meta[relay.Constant][32] /* ty=Tensor[(70, 6), uint16] */, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
    %1118 = cast(meta[relay.Constant][32] /* ty=Tensor[(70, 6), uint16] */, dtype="uint16") /* ty=Tensor[(70, 6), uint16] */;
    %1119 = reshape(%1117, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
    %1120 = reshape(%1118, newshape=[7, 5, 12]) /* ty=Tensor[(7, 5, 12), uint16] */;
    %1121 = cast(meta[relay.Constant][33] /* ty=Tensor[(12, 7, 1), float64] */, dtype="float64") /* ty=Tensor[(12, 7, 1), float64] */;
    %1122 = log10(%1121) /* ty=Tensor[(12, 7, 1), float64] */;
    %1123 = cast(%1122, dtype="float32") /* ty=Tensor[(12, 7, 1), float32] */;
    %1124 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(12, 7, 1), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1125 = cast(meta[relay.Constant][33] /* ty=Tensor[(12, 7, 1), float64] */, dtype="float32") /* ty=Tensor[(12, 7, 1), float32] */;
    %1126 = dyn.reshape(%1123, %1124, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1127 = divide(%1125, %1126) /* ty=Tensor[(12, 7, ?), float32] */;
    %1128 = cast(%1122, dtype="uint64") /* ty=Tensor[(12, 7, 1), uint64] */;
    %1129 = shape_of(%1127, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1130 = cast(%1127, dtype="uint64") /* ty=Tensor[(12, 7, ?), uint64] */;
    %1131 = dyn.reshape(%1128, %1129, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %1132 = @func_1033(%1116) /* ty=Tensor[(5, 14, 16), bool] */;
    %1133 = @func_380(%1119, %1120) /* ty=Tensor[(7, 5, 12), uint16] */;
    %1134 = bitwise_or(%1130, %1131) /* ty=Tensor[(12, 7, ?), uint64] */;
    (%1132, meta[relay.Constant][31] /* ty=Tensor[(1120), uint64] */, %1133, meta[relay.Constant][32] /* ty=Tensor[(70, 6), uint16] */, %1134)
  };
  %1135() /* ty=(Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(12, 7, ?), uint64]) */
}

def @func_10004(%var_9996: Tensor[(70, 6), float64]) -> (Tensor[(70, 6), int16],) {
  %1136 = @func_2495() /* ty=Tensor[(70, 6), float64] */;
  %1137 = cast(%var_9996, dtype="int16") /* ty=Tensor[(70, 6), int16] */;
  %1138 = shape_of(%1136, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1139 = cast(%1136, dtype="int16") /* ty=Tensor[(70, 6), int16] */;
  %1140 = dyn.reshape(%1137, %1138, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %1141 = minimum(%1139, %1140) /* ty=Tensor[(70, 6), int16] */;
  (%1141,)
}

def @func_3692(%var_3690: Tensor[(7, 5, 12), uint16]) -> (Tensor[(70, 6), uint16], Tensor[(7, 5, 12), float64]) {
  @func_3689(%var_3690) /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), float64]) */
}

def @func_4533() -> (Tensor[(1120), uint64], Tensor[(1176), int32], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), float64]) {
  @func_4531() /* ty=(Tensor[(1120), uint64], Tensor[(1176), int32], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), float64]) */
}

def @func_10007(%var_10005: Tensor[(70, 6), float64]) -> (Tensor[(70, 6), int16],) {
  @func_10004(%var_10005) /* ty=(Tensor[(70, 6), int16],) */
}

def @func_3651() -> Tensor[(7, 5, 12), uint16] {
  @func_2970() /* ty=Tensor[(7, 5, 12), uint16] */
}

def @func_1812() -> (Tensor[(1120), uint64], Tensor[(5, 14, 16), bool], Tensor[(70, 6), bool]) {
  @func_1810() /* ty=(Tensor[(1120), uint64], Tensor[(5, 14, 16), bool], Tensor[(70, 6), bool]) */
}

def @func_1718() -> (Tensor[(7, 5, 12), uint16],) {
  %1142 = @func_1175() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %1143 = %1142.1;
  (%1143,)
}

def @func_9424() -> (Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float64], Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), uint16], Tensor[(7, 5, 12), float64]) {
  %1144 = @func_5789() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), float32], Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), uint16]) */;
  %1145 = @func_5574() /* ty=(Tensor[(7, 5, 12), float64],) */;
  %1146 = @func_7267() /* ty=(Tensor[(7, 5, 12), uint64], Tensor[(7, 5, 12), float64], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), float32], Tensor[(7, 5, 12), float64], Tensor[(70, 6), bool]) */;
  %1147 = @func_5201() /* ty=(Tensor[(7, 5, 12), float64],) */;
  %1148 = %1147.0;
  %1149 = cast(%1148, dtype="float64") /* ty=Tensor[(7, 5, 12), float64] */;
  %1150 = %1144.0;
  %1151 = %1145.0;
  %1152 = %1146.3;
  %1153 = @func_5360() /* ty=Tensor[(7, 5, 12), uint16] */;
  %1154 = log(%1149) /* ty=Tensor[(7, 5, 12), float64] */;
  (%1150, %1151, %1152, %1153, %1154)
}

def @func_5684() -> (Tensor[(70, 6), float64],) {
  @func_5682() /* ty=(Tensor[(70, 6), float64],) */
}

def @func_9014() -> (Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16]) {
  %1159 = fn () -> (Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16]) {
    %1155 = @func_2880() /* ty=(Tensor[(7, 5, 12), uint16],) */;
    %1156 = @func_8370() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(70, 6), uint16]) */;
    %1157 = %1155.0;
    %1158 = %1156.1;
    (%1157, %1158)
  };
  %1159() /* ty=(Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16]) */
}

def @func_8228() -> Tensor[(7, 5, 12), float32] {
  %1160 = @func_5170() /* ty=(Tensor[(7, 5, 12), float32], Tensor[(7, 5, 12), uint16]) */;
  %1160.0
}

def @func_3480() -> Tensor[(12, 7, ?), uint64] {
  @func_3478() /* ty=Tensor[(12, 7, ?), uint64] */
}

def @func_2880() -> (Tensor[(7, 5, 12), uint16],) {
  %1161 = @func_1664() /* ty=(Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16], Tensor[(70, 6), uint16], Tensor[(70, 6), uint16], Tensor[(5, 14, 16), bool], Tensor[(1120), uint64], Tensor[(70, 6), uint16], Tensor[(7, 5, 12), uint16]) */;
  %1162 = %1161.1;
  (%1162,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen737/build/output.py", line 3741, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:02:30] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

