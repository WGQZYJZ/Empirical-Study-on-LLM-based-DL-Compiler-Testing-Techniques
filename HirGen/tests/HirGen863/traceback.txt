==========mod==========
#[version = "0.0.5"]
def @func_3993() -> (Tensor[(13, 1, 10), float32], Tensor[(300, 1), float32], Tensor[(126, 2), uint8], Tensor[(360), float32]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(13, 1, 10), float32] */, dtype="float32") /* ty=Tensor[(13, 1, 10), float32] */;
  %1 = cast(meta[relay.Constant][1] /* ty=Tensor[(126, 2), uint8] */, dtype="uint8") /* ty=Tensor[(126, 2), uint8] */;
  %2 = cast(meta[relay.Constant][1] /* ty=Tensor[(126, 2), uint8] */, dtype="uint8") /* ty=Tensor[(126, 2), uint8] */;
  %3 = cast(meta[relay.Constant][2] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %4 = reshape(%1, newshape=[6, 3, 14]) /* ty=Tensor[(6, 3, 14), uint8] */;
  %5 = reshape(%2, newshape=[6, 3, 14]) /* ty=Tensor[(6, 3, 14), uint8] */;
  %6 = reshape(%3, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %7 = @func_2918(%4, %5, %6) /* ty=(Tensor[(6, 3, 14), uint8], Tensor[(15, 2, 10), bool], int8, Tensor[(52), int8], Tensor[(1092), float32], Tensor[(300, 1), float32], Tensor[(120, 1), float32], Tensor[(360), float32]) */;
  %8 = cos(%0) /* ty=Tensor[(13, 1, 10), float32] */;
  %9 = %7.5;
  (%8, %9, meta[relay.Constant][1] /* ty=Tensor[(126, 2), uint8] */, meta[relay.Constant][2] /* ty=Tensor[(360), float32] */)
}

def @func_4592(%var_4581: Tensor[(30), int16]) -> (Tensor[(1092), float32], Tensor[(?, 10, 3), float64], Tensor[(30), int16]) {
  %10 = @func_4540() /* ty=(Tensor[(1092), float32],) */;
  %11 = cast(%var_4581, dtype="int16") /* ty=Tensor[(30), int16] */;
  %12 = cast(%var_4581, dtype="int16") /* ty=Tensor[(30), int16] */;
  %13 = reshape(%11, newshape=[1, 10, 3]) /* ty=Tensor[(1, 10, 3), int16] */;
  %14 = reshape(%12, newshape=[1, 10, 3]) /* ty=Tensor[(1, 10, 3), int16] */;
  %15 = @func_3285(%13, %14) /* ty=(Tensor[(8, 5, 8), float32], Tensor[(320), float32], Tensor[(?, 10, 3), float64]) */;
  %16 = %10.0;
  %17 = %15.2;
  (%16, %17, %var_4581)
}

def @func_5555() -> Tensor[(252), uint8] {
  @func_4784() /* ty=Tensor[(252), uint8] */
}

def @func_10344() -> (Tensor[(252), uint8], Tensor[(300, 1092), float64], Tensor[(300, 1), float64], Tensor[(300, 1), float32]) {
  %18 = @func_9399() /* ty=(Tensor[(300, 10), int64], Tensor[(252), uint8]) */;
  %19 = %18.1;
  %20 = @func_9172() /* ty=Tensor[(300, 1092), float64] */;
  %21 = @func_4949() /* ty=Tensor[(300, 1), float64] */;
  %22 = @func_5322() /* ty=Tensor[(300, 1), float32] */;
  (%19, %20, %21, %22)
}

def @func_314(%var_300: Tensor[(7, 12, 13), float32]) -> Tensor[(7, 12, 13), float32] {
  %23 = cast(%var_300, dtype="float32") /* ty=Tensor[(7, 12, 13), float32] */;
  %24 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(7, 12, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %25 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 12, 13), float32] */, dtype="float32") /* ty=Tensor[(7, 12, 13), float32] */;
  %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%25, %26) /* ty=Tensor[(7, 12, 13), float32] */
}

def @func_4235() -> (Tensor[(2, 180), float64], Tensor[(2, 180), float64]) {
  %27 = @func_4181() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(2, 180), float32]) */;
  %28 = %27.3;
  %29 = cast(%28, dtype="float64") /* ty=Tensor[(2, 180), float64] */;
  %30 = cast(%28, dtype="float64") /* ty=Tensor[(2, 180), float64] */;
  %31 = cosh(%29) /* ty=Tensor[(2, 180), float64] */;
  %32 = exp(%30) /* ty=Tensor[(2, 180), float64] */;
  (%31, %32)
}

def @func_2511(%var_2481: Tensor[(8, 5, 8), float32]) -> Tensor[(8, 5, 8), float32] {
  %33 = cast(%var_2481, dtype="float32") /* ty=Tensor[(8, 5, 8), float32] */;
  sinh(%33) /* ty=Tensor[(8, 5, 8), float32] */
}

def @func_7189(%var_7169: Tensor[(2310), uint32]) -> (Tensor[(2, 180), float32], Tensor[(15, 14, 11), uint32], Tensor[(2310), uint32]) {
  %34 = @func_4181() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(2, 180), float32]) */;
  %35 = %34.3;
  %36 = cast(%35, dtype="float32") /* ty=Tensor[(2, 180), float32] */;
  %37 = cast(%var_7169, dtype="uint32") /* ty=Tensor[(2310), uint32] */;
  %38 = cast(%var_7169, dtype="uint32") /* ty=Tensor[(2310), uint32] */;
  %39 = reshape(%37, newshape=[15, 14, 11]) /* ty=Tensor[(15, 14, 11), uint32] */;
  %40 = reshape(%38, newshape=[15, 14, 11]) /* ty=Tensor[(15, 14, 11), uint32] */;
  %41 = rsqrt(%36) /* ty=Tensor[(2, 180), float32] */;
  %42 = @func_3365(%39, %40) /* ty=Tensor[(15, 14, 11), uint32] */;
  (%41, %42, %var_7169)
}

def @func_8267(%var_8213: Tensor[(2, 1800), float64], %var_8228: Tensor[(126, 2), float32]) -> (Tensor[(126, 2), float64], Tensor[(2, 1800), int64], Tensor[(360), float32]) {
  %43 = @func_5113() /* ty=Tensor[(126, 2), float32] */;
  %44 = cast(%var_8228, dtype="float64") /* ty=Tensor[(126, 2), float64] */;
  %45 = shape_of(%43, dtype="int32") /* ty=Tensor[(2), int32] */;
  %46 = cast(%43, dtype="float64") /* ty=Tensor[(126, 2), float64] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %48 = cast(%var_8213, dtype="float64") /* ty=Tensor[(2, 1800), float64] */;
  %49 = cast(%var_8213, dtype="float64") /* ty=Tensor[(2, 1800), float64] */;
  %50 = reshape(%48, newshape=[300, 12]) /* ty=Tensor[(300, 12), float64] */;
  %51 = reshape(%49, newshape=[300, 12]) /* ty=Tensor[(300, 12), float64] */;
  %52 = @func_5283(%50, %51) /* ty=(Tensor[(300, 12), float32], Tensor[(300, 12), int64], Tensor[(2, 180), float64]) */;
  %53 = %52.0;
  %54 = cast(%53, dtype="float32") /* ty=Tensor[(300, 12), float32] */;
  %55 = shape_of(%var_8213, dtype="int32") /* ty=Tensor[(2), int32] */;
  %56 = cast(%var_8213, dtype="float32") /* ty=Tensor[(2, 1800), float32] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %58 = mod(%56, %57) /* ty=Tensor[(2, 1800), float32] */;
  %59 = cast(%53, dtype="int64") /* ty=Tensor[(300, 12), int64] */;
  %60 = shape_of(%58, dtype="int32") /* ty=Tensor[(2), int32] */;
  %61 = cast(%58, dtype="int64") /* ty=Tensor[(2, 1800), int64] */;
  %62 = dyn.reshape(%59, %60, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %63 = divide(%46, %47) /* ty=Tensor[(126, 2), float64] */;
  %64 = bitwise_or(%61, %62) /* ty=Tensor[(2, 1800), int64] */;
  %65 = @func_5857() /* ty=Tensor[(360), float32] */;
  (%63, %64, %65)
}

def @func_6609() -> (Tensor[(300, 1), float64], Tensor[(300, 10), float32]) {
  %66 = @func_6418() /* ty=(Tensor[(300, 10), int64],) */;
  %67 = %66.0;
  %68 = cast(%67, dtype="float32") /* ty=Tensor[(300, 10), float32] */;
  %69 = @func_4021() /* ty=Tensor[(300, 1), float64] */;
  %70 = erf(%68) /* ty=Tensor[(300, 10), float32] */;
  (%69, %70)
}

def @func_4540() -> (Tensor[(1092), float32],) {
  %71 = @func_4181() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(2, 180), float32]) */;
  %72 = %71.1;
  (%72,)
}

def @func_4021() -> Tensor[(300, 1), float64] {
  %73 = @func_3993() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(300, 1), float32], Tensor[(126, 2), uint8], Tensor[(360), float32]) */;
  %74 = %73.1;
  %75 = cast(%74, dtype="float64") /* ty=Tensor[(300, 1), float64] */;
  erf(%75) /* ty=Tensor[(300, 1), float64] */
}

def @func_7568(%var_7524: Tensor[(1152), uint8], %var_7526: Tensor[(64), float32], %var_7561: Tensor[(1, 1260), int64]) -> (Tensor[(8, 5, 8), float32], Tensor[(1152), uint8], Tensor[(182, 6), float32], Tensor[(2, 180), float64], Tensor[(300, 64), uint64], Tensor[(2310), float64], Tensor[(1, 1260), int64]) {
  %76 = cast(%var_7524, dtype="uint8") /* ty=Tensor[(1152), uint8] */;
  %77 = cast(%var_7524, dtype="uint8") /* ty=Tensor[(1152), uint8] */;
  %78 = cast(meta[relay.Constant][4] /* ty=Tensor[(182, 6), float32] */, dtype="float32") /* ty=Tensor[(182, 6), float32] */;
  %79 = cast(%var_7526, dtype="float32") /* ty=Tensor[(64), float32] */;
  %80 = reshape(%76, newshape=[16, 8, 9]) /* ty=Tensor[(16, 8, 9), uint8] */;
  %81 = reshape(%77, newshape=[16, 8, 9]) /* ty=Tensor[(16, 8, 9), uint8] */;
  %82 = reshape(%78, newshape=[1092]) /* ty=Tensor[(1092), float32] */;
  %83 = reshape(%79, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %84 = @func_4446(%80, %81, %82, %83) /* ty=(Tensor[(16, 8, 9), uint8], Tensor[(1092), float32], Tensor[(360), float32], Tensor[(360), float32], Tensor[(7, 12, 13), float32], Tensor[(2, 180), float64], Tensor[(6, 6, 10), float32], Tensor[(64), float32], Tensor[(8, 5, 8), float32], Tensor[(320), float32], Tensor[(7, 12, 13), float64]) */;
  %85 = @func_4235() /* ty=(Tensor[(2, 180), float64], Tensor[(2, 180), float64]) */;
  %86 = @func_5044() /* ty=(Tensor[(300, 1), float64],) */;
  %87 = %86.0;
  %88 = cast(%var_7526, dtype="uint64") /* ty=Tensor[(64), uint64] */;
  %89 = cast(%87, dtype="uint64") /* ty=Tensor[(300, 1), uint64] */;
  %90 = cast(%var_7561, dtype="int64") /* ty=Tensor[(1, 1260), int64] */;
  %91 = reshape(%90, newshape=[9, 10, 14]) /* ty=Tensor[(9, 10, 14), int64] */;
  %92 = @func_5183(%91) /* ty=(Tensor[(9, 10, 14), int64], Tensor[(9, 10, 14), float32], Tensor[(9, 10, 14), float64], Tensor[(15, 14, 11), uint32], Tensor[(2310), float64]) */;
  %93 = %84.8;
  %94 = %85.0;
  %95 = left_shift(%88, %89) /* ty=Tensor[(300, 64), uint64] */;
  %96 = %92.4;
  (%93, %var_7524, meta[relay.Constant][4] /* ty=Tensor[(182, 6), float32] */, %94, %95, %96, %var_7561)
}

def @func_7228(%var_7217: Tensor[(360), float32], %var_7222: Tensor[(1, 2310), uint32]) -> (Tensor[(300, 1), float64], Tensor[(360), float32], Tensor[(252), uint8], Tensor[(360), float32], Tensor[(15, 14, 11), uint32], Tensor[(1, 2310), uint32], Tensor[(252), uint8]) {
  %97 = cast(meta[relay.Constant][5] /* ty=Tensor[(252), uint8] */, dtype="uint8") /* ty=Tensor[(252), uint8] */;
  %98 = cast(meta[relay.Constant][5] /* ty=Tensor[(252), uint8] */, dtype="uint8") /* ty=Tensor[(252), uint8] */;
  %99 = cast(%var_7217, dtype="float32") /* ty=Tensor[(360), float32] */;
  %100 = reshape(%97, newshape=[6, 3, 14]) /* ty=Tensor[(6, 3, 14), uint8] */;
  %101 = reshape(%98, newshape=[6, 3, 14]) /* ty=Tensor[(6, 3, 14), uint8] */;
  %102 = reshape(%99, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %103 = @func_2918(%100, %101, %102) /* ty=(Tensor[(6, 3, 14), uint8], Tensor[(15, 2, 10), bool], int8, Tensor[(52), int8], Tensor[(1092), float32], Tensor[(300, 1), float32], Tensor[(120, 1), float32], Tensor[(360), float32]) */;
  %104 = cast(%var_7222, dtype="uint32") /* ty=Tensor[(1, 2310), uint32] */;
  %105 = cast(%var_7222, dtype="uint32") /* ty=Tensor[(1, 2310), uint32] */;
  %106 = reshape(%104, newshape=[15, 14, 11]) /* ty=Tensor[(15, 14, 11), uint32] */;
  %107 = reshape(%105, newshape=[15, 14, 11]) /* ty=Tensor[(15, 14, 11), uint32] */;
  %108 = @func_6917() /* ty=(Tensor[(252), uint8],) */;
  %109 = @func_4021() /* ty=Tensor[(300, 1), float64] */;
  %110 = %103.7;
  %111 = @func_3365(%106, %107) /* ty=Tensor[(15, 14, 11), uint32] */;
  %112 = %108.0;
  (%109, %110, meta[relay.Constant][5] /* ty=Tensor[(252), uint8] */, %var_7217, %111, %var_7222, %112)
}

def @func_10806() -> Tensor[(300, 1092), float64] {
  @func_9172() /* ty=Tensor[(300, 1092), float64] */
}

def @func_2772(%var_2685: int8, %var_2686: Tensor[(13, 1, 4), int8], %var_2729: Tensor[(1092), float32], %var_2730: Tensor[(300), float32], %var_2731: Tensor[(120), float32], %var_2732: Tensor[(360), float32]) -> (Tensor[(15, 2, 10), bool], Tensor[(1092), float32], Tensor[(300), float32], Tensor[(120), float32], Tensor[(360), float32], Tensor[(7, 12, 13), float32], Tensor[(13, ?, 4), int64]) {
  %113 = cast(%var_2729, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %114 = cast(%var_2730, dtype="float32") /* ty=Tensor[(300), float32] */;
  %115 = cast(%var_2731, dtype="float32") /* ty=Tensor[(120), float32] */;
  %116 = cast(%var_2732, dtype="float32") /* ty=Tensor[(360), float32] */;
  %117 = reshape(%113, newshape=[1092]) /* ty=Tensor[(1092), float32] */;
  %118 = reshape(%114, newshape=[15, 2, 10]) /* ty=Tensor[(15, 2, 10), float32] */;
  %119 = reshape(%115, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %120 = reshape(%116, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %121 = @func_1657(%117, %118, %119, %120) /* ty=(Tensor[(1092), float32], Tensor[(15, 2, 10), bool], Tensor[(7, 12, 13), float32], Tensor[(120), float32], Tensor[(6, 6, 10), float32], Tensor[(360), float32]) */;
  %122 = cast(%var_2729, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %123 = reshape(%122, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float32] */;
  %124 = cast(%var_2685, dtype="bool") /* ty=bool */;
  %125 = cast(%var_2686, dtype="bool") /* ty=Tensor[(13, 1, 4), bool] */;
  %126 = less_equal(%124, %125) /* ty=Tensor[(13, 1, 4), bool] */;
  %127 = cast(%var_2686, dtype="bool") /* ty=Tensor[(13, 1, 4), bool] */;
  %128 = shape_of(%126, dtype="int32") /* ty=Tensor[(3), int32] */;
  %129 = cast(%126, dtype="bool") /* ty=Tensor[(13, 1, 4), bool] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %131 = not_equal(%129, %130) /* ty=Tensor[(13, ?, 4), bool] */;
  %132 = cast(%var_2685, dtype="int64") /* ty=int64 */;
  %133 = cast(%131, dtype="int64") /* ty=Tensor[(13, ?, 4), int64] */;
  %134 = %121.1;
  %135 = @func_314(%123) /* ty=Tensor[(7, 12, 13), float32] */;
  %136 = subtract(%132, %133) /* ty=Tensor[(13, ?, 4), int64] */;
  (%134, %var_2729, %var_2730, %var_2731, %var_2732, %135, %136)
}

def @func_8897() -> (Tensor[(2, 180), float64],) {
  %137 = @func_4235() /* ty=(Tensor[(2, 180), float64], Tensor[(2, 180), float64]) */;
  %138 = %137.0;
  (%138,)
}

def @func_7390(%var_7364: int64) -> Tensor[(1, 8), int64] {
  %139 = cast(%var_7364, dtype="int64") /* ty=int64 */;
  %140 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 8), int64] */, dtype="int64") /* ty=Tensor[(1, 8), int64] */;
  subtract(%139, %140) /* ty=Tensor[(1, 8), int64] */
}

def @func_10797() -> (Tensor[(1092), float32],) {
  %141 = @func_6113() /* ty=(Tensor[(1092), float32], Tensor[(252), uint8]) */;
  %142 = %141.0;
  (%142,)
}

def @func_7082() -> (Tensor[(300, 10), int64], Tensor[(2, 180), float64]) {
  %143 = @func_6418() /* ty=(Tensor[(300, 10), int64],) */;
  %144 = @func_4181() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(2, 180), float32]) */;
  %145 = %144.3;
  %146 = cast(%145, dtype="float64") /* ty=Tensor[(2, 180), float64] */;
  %147 = %143.0;
  %148 = sinh(%146) /* ty=Tensor[(2, 180), float64] */;
  (%147, %148)
}

def @func_9139() -> (Tensor[(2, 180), float32], Tensor[(8, 5, 8), float32], Tensor[(320), float32]) {
  %149 = @func_8574() /* ty=(Tensor[(2, 180), float32],) */;
  %150 = cast(meta[relay.Constant][7] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %151 = reshape(%150, newshape=[8, 5, 8]) /* ty=Tensor[(8, 5, 8), float32] */;
  %152 = %149.0;
  %153 = @func_2511(%151) /* ty=Tensor[(8, 5, 8), float32] */;
  (%152, %153, meta[relay.Constant][7] /* ty=Tensor[(320), float32] */)
}

def @func_9257() -> (Tensor[(12, 8, 12), float64],) {
  %154 = @func_8592() /* ty=Tensor[(12, 8, 12), float64] */;
  (%154,)
}

def @func_8943() -> (Tensor[(1092), float32],) {
  %155 = @func_8079() /* ty=(Tensor[(1092), float32],) */;
  %156 = %155.0;
  %157 = cast(%156, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %158 = cosh(%157) /* ty=Tensor[(1092), float32] */;
  (%158,)
}

def @func_9100() -> (Tensor[(300, 10), float64],) {
  %159 = @func_6071() /* ty=(Tensor[(300, 10), int64],) */;
  %160 = %159.0;
  %161 = cast(%160, dtype="float64") /* ty=Tensor[(300, 10), float64] */;
  %162 = acosh(%161) /* ty=Tensor[(300, 10), float64] */;
  (%162,)
}

def @func_782(%var_777: Tensor[(6, 6, 10), float32]) -> Tensor[(6, 6, 10), float32] {
  %163 = cast(%var_777, dtype="float32") /* ty=Tensor[(6, 6, 10), float32] */;
  acosh(%163) /* ty=Tensor[(6, 6, 10), float32] */
}

def @func_9903() -> (Tensor[(300, 16), float32], Tensor[(1092), float32]) {
  %164 = @func_5937() /* ty=(Tensor[(300, 16), bool], Tensor[(300, 16), float32]) */;
  %165 = @func_8943() /* ty=(Tensor[(1092), float32],) */;
  %166 = %164.1;
  %167 = %165.0;
  (%166, %167)
}

def @func_6917() -> (Tensor[(252), uint8],) {
  %168 = @func_5673() /* ty=(Tensor[(252), uint8],) */;
  %169 = %168.0;
  (%169,)
}

def @main(%var_11397: Tensor[(300, 10), int64]) -> (Tensor[(252), uint8], Tensor[(2, 180), float64], Tensor[(360), float32], Tensor[(300, 10), bool]) {
  %170 = @func_8823() /* ty=(Tensor[(252), uint8],) */;
  %171 = @func_6629() /* ty=(Tensor[(300, 10), int64],) */;
  %172 = %171.0;
  %173 = cast(%var_11397, dtype="bool") /* ty=Tensor[(300, 10), bool] */;
  %174 = shape_of(%172, dtype="int32") /* ty=Tensor[(2), int32] */;
  %175 = cast(%172, dtype="bool") /* ty=Tensor[(300, 10), bool] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %177 = %170.0;
  %178 = @func_9511() /* ty=Tensor[(2, 180), float64] */;
  %179 = @func_10135() /* ty=Tensor[(360), float32] */;
  %180 = logical_or(%175, %176) /* ty=Tensor[(300, 10), bool] */;
  (%177, %178, %179, %180)
}

def @func_7756() -> (Tensor[(4, 12, 10), float32],) {
  %181 = cast(meta[relay.Constant][8] /* ty=Tensor[(4, 12, 10), float32] */, dtype="float32") /* ty=Tensor[(4, 12, 10), float32] */;
  %182 = exp(%181) /* ty=Tensor[(4, 12, 10), float32] */;
  (%182,)
}

def @func_9295() -> Tensor[(252), uint8] {
  @func_5555() /* ty=Tensor[(252), uint8] */
}

def @func_4181() -> (Tensor[(13, 1, 10), float32], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(2, 180), float32]) {
  %183 = @func_3993() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(300, 1), float32], Tensor[(126, 2), uint8], Tensor[(360), float32]) */;
  %184 = cast(meta[relay.Constant][9] /* ty=Tensor[(252), uint8] */, dtype="uint8") /* ty=Tensor[(252), uint8] */;
  %185 = cast(meta[relay.Constant][9] /* ty=Tensor[(252), uint8] */, dtype="uint8") /* ty=Tensor[(252), uint8] */;
  %186 = cast(meta[relay.Constant][10] /* ty=Tensor[(2, 180), float32] */, dtype="float32") /* ty=Tensor[(2, 180), float32] */;
  %187 = reshape(%184, newshape=[6, 3, 14]) /* ty=Tensor[(6, 3, 14), uint8] */;
  %188 = reshape(%185, newshape=[6, 3, 14]) /* ty=Tensor[(6, 3, 14), uint8] */;
  %189 = reshape(%186, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %190 = @func_2918(%187, %188, %189) /* ty=(Tensor[(6, 3, 14), uint8], Tensor[(15, 2, 10), bool], int8, Tensor[(52), int8], Tensor[(1092), float32], Tensor[(300, 1), float32], Tensor[(120, 1), float32], Tensor[(360), float32]) */;
  %191 = %183.0;
  %192 = %190.4;
  (%191, %192, meta[relay.Constant][9] /* ty=Tensor[(252), uint8] */, meta[relay.Constant][10] /* ty=Tensor[(2, 180), float32] */)
}

def @func_10135() -> Tensor[(360), float32] {
  @func_5857() /* ty=Tensor[(360), float32] */
}

def @func_8772(%var_8755: float64, %var_8756: Tensor[(15, 15, 12), float64]) -> Tensor[(15, 15, 12), float64] {
  %193 = cast(%var_8755, dtype="float64") /* ty=float64 */;
  %194 = cast(%var_8756, dtype="float64") /* ty=Tensor[(15, 15, 12), float64] */;
  floor_divide(%193, %194) /* ty=Tensor[(15, 15, 12), float64] */
}

def @func_9831(%var_9740: int64, %var_9741: Tensor[(1, 8, 5), int64], %var_9804: Tensor[(1152), uint8]) -> (Tensor[(1, 8, 5), int64], Tensor[(1092), float32], Tensor[(8, 5, 8), float32], Tensor[(1, 8, 5), float64], Tensor[(1, 1260), int64], Tensor[(1152), uint8], Tensor[(64), float32], Tensor[(1260), int64], Tensor[(300, 1), float64]) {
  %195 = cast(%var_9740, dtype="int64") /* ty=int64 */;
  %196 = cast(%var_9741, dtype="int64") /* ty=Tensor[(1, 8, 5), int64] */;
  %197 = @func_8943() /* ty=(Tensor[(1092), float32],) */;
  %198 = @func_9139() /* ty=(Tensor[(2, 180), float32], Tensor[(8, 5, 8), float32], Tensor[(320), float32]) */;
  %199 = cast(%var_9741, dtype="float64") /* ty=Tensor[(1, 8, 5), float64] */;
  %200 = cast(%var_9804, dtype="uint8") /* ty=Tensor[(1152), uint8] */;
  %201 = cast(meta[relay.Constant][11] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %202 = cast(meta[relay.Constant][12] /* ty=Tensor[(1260), int64] */, dtype="int64") /* ty=Tensor[(1260), int64] */;
  %203 = reshape(%200, newshape=[1152]) /* ty=Tensor[(1152), uint8] */;
  %204 = reshape(%201, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %205 = reshape(%202, newshape=[1, 1260]) /* ty=Tensor[(1, 1260), int64] */;
  %206 = @func_7568(%203, %204, %205) /* ty=(Tensor[(8, 5, 8), float32], Tensor[(1152), uint8], Tensor[(182, 6), float32], Tensor[(2, 180), float64], Tensor[(300, 64), uint64], Tensor[(2310), float64], Tensor[(1, 1260), int64]) */;
  %207 = bitwise_and(%195, %196) /* ty=Tensor[(1, 8, 5), int64] */;
  %208 = %197.0;
  %209 = %198.1;
  %210 = asin(%199) /* ty=Tensor[(1, 8, 5), float64] */;
  %211 = %206.6;
  %212 = @func_4949() /* ty=Tensor[(300, 1), float64] */;
  (%207, %208, %209, %210, %211, %var_9804, meta[relay.Constant][11] /* ty=Tensor[(64), float32] */, meta[relay.Constant][12] /* ty=Tensor[(1260), int64] */, %212)
}

def @func_9941(%var_9930: Tensor[(1092), float32]) -> Tensor[(1092), int64] {
  %213 = @func_5890() /* ty=Tensor[(1092), float32] */;
  %214 = cast(%var_9930, dtype="int64") /* ty=Tensor[(1092), int64] */;
  %215 = shape_of(%213, dtype="int32") /* ty=Tensor[(1), int32] */;
  %216 = cast(%213, dtype="int64") /* ty=Tensor[(1092), int64] */;
  %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?), int64] */;
  add(%216, %217) /* ty=Tensor[(1092), int64] */
}

def @func_7761() -> (Tensor[(1092), float32],) {
  %218 = @func_5968() /* ty=(Tensor[(1092), float32],) */;
  %219 = %218.0;
  (%219,)
}

def @func_7999(%var_7976: Tensor[(24), float64]) -> (Tensor[(6, 2, 2), float32], Tensor[(24), float64], Tensor[(300, 252), float64]) {
  %220 = cast(%var_7976, dtype="float64") /* ty=Tensor[(24), float64] */;
  %221 = reshape(%220, newshape=[24]) /* ty=Tensor[(24), float64] */;
  %222 = @func_5842(%221) /* ty=(Tensor[(252), uint8], Tensor[(6, 2, 2), float32], Tensor[(24), float64], Tensor[(252), uint8]) */;
  %223 = @func_5322() /* ty=Tensor[(300, 1), float32] */;
  %224 = @func_6113() /* ty=(Tensor[(1092), float32], Tensor[(252), uint8]) */;
  %225 = %224.1;
  %226 = cast(%223, dtype="float64") /* ty=Tensor[(300, 1), float64] */;
  %227 = cast(%225, dtype="float64") /* ty=Tensor[(252), float64] */;
  %228 = %222.1;
  %229 = power(%226, %227) /* ty=Tensor[(300, 252), float64] */;
  (%228, %var_7976, %229)
}

def @func_7684(%var_7650: Tensor[(858), float64], %var_7665: Tensor[(3600), float64]) -> (Tensor[(1092), float32], Tensor[(11, 6, 13), float64], Tensor[(858), float64], Tensor[(2, 180), float64], Tensor[(3600), float64], Tensor[(300, 1), float64], Tensor[(300, ?), int16]) {
  %230 = @func_5968() /* ty=(Tensor[(1092), float32],) */;
  %231 = cast(%var_7650, dtype="float64") /* ty=Tensor[(858), float64] */;
  %232 = reshape(%231, newshape=[11, 6, 13]) /* ty=Tensor[(11, 6, 13), float64] */;
  %233 = @func_6309(%232) /* ty=(Tensor[(11, 6, 13), float64],) */;
  %234 = cast(%var_7665, dtype="float64") /* ty=Tensor[(3600), float64] */;
  %235 = cast(%var_7665, dtype="float64") /* ty=Tensor[(3600), float64] */;
  %236 = reshape(%234, newshape=[300, 12]) /* ty=Tensor[(300, 12), float64] */;
  %237 = reshape(%235, newshape=[300, 12]) /* ty=Tensor[(300, 12), float64] */;
  %238 = @func_5283(%236, %237) /* ty=(Tensor[(300, 12), float32], Tensor[(300, 12), int64], Tensor[(2, 180), float64]) */;
  %239 = @func_4932() /* ty=(Tensor[(300, 1), float64], Tensor[(300, 1), float64]) */;
  %240 = @func_7313() /* ty=(Tensor[(300, 1), float64],) */;
  %241 = %240.0;
  %242 = cast(%241, dtype="float32") /* ty=Tensor[(300, 1), float32] */;
  %243 = acosh(%242) /* ty=Tensor[(300, 1), float32] */;
  %244 = cast(%243, dtype="int16") /* ty=Tensor[(300, 1), int16] */;
  %245 = shape_of(%241, dtype="int32") /* ty=Tensor[(2), int32] */;
  %246 = cast(%241, dtype="int16") /* ty=Tensor[(300, 1), int16] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %248 = %230.0;
  %249 = %233.0;
  %250 = %238.2;
  %251 = %239.1;
  %252 = add(%246, %247) /* ty=Tensor[(300, ?), int16] */;
  (%248, %249, %var_7650, %250, %var_7665, %251, %252)
}

def @func_5283(%var_5269: Tensor[(300, 12), float64], %var_5277: Tensor[(300, 12), float64]) -> (Tensor[(300, 12), float32], Tensor[(300, 12), int64], Tensor[(2, 180), float64]) {
  %253 = @func_4021() /* ty=Tensor[(300, 1), float64] */;
  %254 = cast(%253, dtype="float32") /* ty=Tensor[(300, 1), float32] */;
  %255 = cast(%var_5269, dtype="float32") /* ty=Tensor[(300, 12), float32] */;
  %256 = cast(%var_5277, dtype="int64") /* ty=Tensor[(300, 12), int64] */;
  %257 = shape_of(%var_5269, dtype="int32") /* ty=Tensor[(2), int32] */;
  %258 = cast(%var_5269, dtype="int64") /* ty=Tensor[(300, 12), int64] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %260 = @func_4235() /* ty=(Tensor[(2, 180), float64], Tensor[(2, 180), float64]) */;
  %261 = mod(%254, %255) /* ty=Tensor[(300, 12), float32] */;
  %262 = bitwise_xor(%258, %259) /* ty=Tensor[(300, 12), int64] */;
  %263 = %260.0;
  (%261, %262, %263)
}

def @func_4115() -> (Tensor[(360), float32],) {
  %264 = @func_3993() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(300, 1), float32], Tensor[(126, 2), uint8], Tensor[(360), float32]) */;
  %265 = %264.3;
  (%265,)
}

def @func_5890() -> Tensor[(1092), float32] {
  %266 = @func_4540() /* ty=(Tensor[(1092), float32],) */;
  %266.0
}

def @func_6113() -> (Tensor[(1092), float32], Tensor[(252), uint8]) {
  %267 = @func_5647() /* ty=(Tensor[(1092), float32],) */;
  %268 = @func_4181() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(2, 180), float32]) */;
  %269 = %267.0;
  %270 = %268.2;
  (%269, %270)
}

def @func_10719() -> (Tensor[(12, 8, 12), float64],) {
  %271 = @func_10640() /* ty=Tensor[(12, 8, 12), float64] */;
  (%271,)
}

def @func_7313() -> (Tensor[(300, 1), float64],) {
  %272 = @func_4932() /* ty=(Tensor[(300, 1), float64], Tensor[(300, 1), float64]) */;
  %273 = %272.0;
  (%273,)
}

def @func_5647() -> (Tensor[(1092), float32],) {
  %274 = @func_4540() /* ty=(Tensor[(1092), float32],) */;
  %275 = %274.0;
  (%275,)
}

def @func_8477(%var_8469: Tensor[(16, 16, 4), float64]) -> Tensor[(16, 16, 4), float64] {
  %276 = cast(%var_8469, dtype="float64") /* ty=Tensor[(16, 16, 4), float64] */;
  acos(%276) /* ty=Tensor[(16, 16, 4), float64] */
}

def @func_11143(%var_11127: Tensor[(3000), float32]) -> (Tensor[(300, 1092), float64], Tensor[(2, 180), float64], Tensor[(3000), uint32], Tensor[(3000), float32], Tensor[(3000), int64]) {
  %277 = cast(meta[relay.Constant][13] /* ty=Tensor[(3000), int64] */, dtype="float32") /* ty=Tensor[(3000), float32] */;
  %278 = acos(%277) /* ty=Tensor[(3000), float32] */;
  %279 = cast(%var_11127, dtype="float32") /* ty=Tensor[(3000), float32] */;
  %280 = shape_of(%278, dtype="int32") /* ty=Tensor[(1), int32] */;
  %281 = cast(%278, dtype="float32") /* ty=Tensor[(3000), float32] */;
  %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?), float32] */;
  %283 = power(%281, %282) /* ty=Tensor[(3000), float32] */;
  %284 = cast(meta[relay.Constant][13] /* ty=Tensor[(3000), int64] */, dtype="int64") /* ty=Tensor[(3000), int64] */;
  %285 = reshape(%284, newshape=[300, 10]) /* ty=Tensor[(300, 10), int64] */;
  %286 = @func_6934(%285) /* ty=(Tensor[(300, 10), bool],) */;
  %287 = %286.0;
  %288 = cast(%287, dtype="uint32") /* ty=Tensor[(300, 10), uint32] */;
  %289 = shape_of(%283, dtype="int32") /* ty=Tensor[(1), int32] */;
  %290 = cast(%283, dtype="uint32") /* ty=Tensor[(3000), uint32] */;
  %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %292 = cast(%278, dtype="float32") /* ty=Tensor[(3000), float32] */;
  %293 = cast(%var_11127, dtype="int64") /* ty=Tensor[(3000), int64] */;
  %294 = shape_of(%283, dtype="int32") /* ty=Tensor[(1), int32] */;
  %295 = cast(%283, dtype="int64") /* ty=Tensor[(3000), int64] */;
  %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?), int64] */;
  %297 = @func_9172() /* ty=Tensor[(300, 1092), float64] */;
  %298 = @func_9511() /* ty=Tensor[(2, 180), float64] */;
  %299 = multiply(%290, %291) /* ty=Tensor[(3000), uint32] */;
  %300 = sinh(%292) /* ty=Tensor[(3000), float32] */;
  %301 = bitwise_and(%295, %296) /* ty=Tensor[(3000), int64] */;
  (%297, %298, %299, %300, %301)
}

def @func_4532(%var_4497: Tensor[(15, 16, 5), float64], %var_4516: Tensor[(320), float32], %var_4528: Tensor[(6, 60), float32]) -> (Tensor[(15, 16, 5), float64], Tensor[(7, 12, 13), float32], Tensor[(1092, 1), float32], Tensor[(8, 5, 8), float32], Tensor[(320), float32], Tensor[(6, 6, 10), float32], Tensor[(6, 60), float32], Tensor[(6, 6, 10), float32]) {
  %302 = cast(%var_4497, dtype="float64") /* ty=Tensor[(15, 16, 5), float64] */;
  %303 = cast(meta[relay.Constant][14] /* ty=Tensor[(1092, 1), float32] */, dtype="float32") /* ty=Tensor[(1092, 1), float32] */;
  %304 = reshape(%303, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float32] */;
  %305 = cast(%var_4516, dtype="float32") /* ty=Tensor[(320), float32] */;
  %306 = reshape(%305, newshape=[8, 5, 8]) /* ty=Tensor[(8, 5, 8), float32] */;
  %307 = cast(%var_4528, dtype="float32") /* ty=Tensor[(6, 60), float32] */;
  %308 = reshape(%307, newshape=[6, 6, 10]) /* ty=Tensor[(6, 6, 10), float32] */;
  %309 = @func_782(%308) /* ty=Tensor[(6, 6, 10), float32] */;
  %310 = cast(%309, dtype="float32") /* ty=Tensor[(6, 6, 10), float32] */;
  %311 = reshape(%310, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %312 = @func_4379(%311) /* ty=(Tensor[(6, 6, 10), float32], Tensor[(360), float32], Tensor[(6, 6, 10), float32], Tensor[(8, 2, 7), int8]) */;
  %313 = atanh(%302) /* ty=Tensor[(15, 16, 5), float64] */;
  %314 = @func_314(%304) /* ty=Tensor[(7, 12, 13), float32] */;
  %315 = @func_2511(%306) /* ty=Tensor[(8, 5, 8), float32] */;
  %316 = %312.2;
  (%313, %314, meta[relay.Constant][14] /* ty=Tensor[(1092, 1), float32] */, %315, %var_4516, %309, %var_4528, %316)
}

def @func_11296(%var_11278: Tensor[(2700), float64], %var_11284: Tensor[(14, 78), float32]) -> (Tensor[(360), float32], Tensor[(360), float32], Tensor[(2700), float64], Tensor[(126, 2), uint64], Tensor[(14, 78), float32], Tensor[(6, 42), uint8]) {
  %317 = @func_4115() /* ty=(Tensor[(360), float32],) */;
  %318 = cast(%var_11278, dtype="float64") /* ty=Tensor[(2700), float64] */;
  %319 = reshape(%318, newshape=[2700]) /* ty=Tensor[(2700), float64] */;
  %320 = @func_10302(%319) /* ty=(Tensor[(1092), float32], Tensor[(15, 15, 12), float64], float64, Tensor[(2700), float64], Tensor[(360), float32]) */;
  %321 = cast(%var_11284, dtype="float32") /* ty=Tensor[(14, 78), float32] */;
  %322 = cast(meta[relay.Constant][15] /* ty=Tensor[(6, 42), uint8] */, dtype="uint8") /* ty=Tensor[(6, 42), uint8] */;
  %323 = reshape(%321, newshape=[1092]) /* ty=Tensor[(1092), float32] */;
  %324 = reshape(%322, newshape=[252]) /* ty=Tensor[(252), uint8] */;
  %325 = @func_9660(%323, %324) /* ty=(Tensor[(1092), float64], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(126, 2), uint64], Tensor[(24), float64], Tensor[(24), float64]) */;
  %326 = %317.0;
  %327 = %320.4;
  %328 = %325.3;
  (%326, %327, %var_11278, %328, %var_11284, meta[relay.Constant][15] /* ty=Tensor[(6, 42), uint8] */)
}

def @func_10071(%var_10022: Tensor[(300, 1092), float64], %var_10058: Tensor[(30), int16]) -> (Tensor[(8, 5, 8), float32], Tensor[(30), int16], Tensor[(13, 1, 10), float32], Tensor[(300, 1092), float32]) {
  %329 = cast(%var_10058, dtype="int16") /* ty=Tensor[(30), int16] */;
  %330 = cast(%var_10058, dtype="int16") /* ty=Tensor[(30), int16] */;
  %331 = reshape(%329, newshape=[1, 10, 3]) /* ty=Tensor[(1, 10, 3), int16] */;
  %332 = reshape(%330, newshape=[1, 10, 3]) /* ty=Tensor[(1, 10, 3), int16] */;
  %333 = @func_3285(%331, %332) /* ty=(Tensor[(8, 5, 8), float32], Tensor[(320), float32], Tensor[(?, 10, 3), float64]) */;
  %334 = @func_4181() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(2, 180), float32]) */;
  %335 = @func_9172() /* ty=Tensor[(300, 1092), float64] */;
  %336 = cast(%var_10022, dtype="int16") /* ty=Tensor[(300, 1092), int16] */;
  %337 = shape_of(%335, dtype="int32") /* ty=Tensor[(2), int32] */;
  %338 = cast(%335, dtype="int16") /* ty=Tensor[(300, 1092), int16] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %340 = subtract(%338, %339) /* ty=Tensor[(300, 1092), int16] */;
  %341 = cast(%340, dtype="float64") /* ty=Tensor[(300, 1092), float64] */;
  %342 = log10(%341) /* ty=Tensor[(300, 1092), float64] */;
  %343 = cast(%340, dtype="uint64") /* ty=Tensor[(300, 1092), uint64] */;
  %344 = shape_of(%342, dtype="int32") /* ty=Tensor[(2), int32] */;
  %345 = cast(%342, dtype="uint64") /* ty=Tensor[(300, 1092), uint64] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %347 = right_shift(%345, %346) /* ty=Tensor[(300, 1092), uint64] */;
  %348 = cast(%347, dtype="float32") /* ty=Tensor[(300, 1092), float32] */;
  %349 = %333.0;
  %350 = %334.0;
  %351 = rsqrt(%348) /* ty=Tensor[(300, 1092), float32] */;
  (%349, %var_10058, %350, %351)
}

def @func_10542(%var_10535: Tensor[(1092), float32], %var_10536: Tensor[(252), uint8]) -> (Tensor[(300, 10), float64], Tensor[(6, 4), float64], Tensor[(300, ?), float32], Tensor[(1092), float64], Tensor[(1092), float32], Tensor[(252), uint8]) {
  %352 = @func_9304() /* ty=(Tensor[(300, 10), float64],) */;
  %353 = cast(meta[relay.Constant][16] /* ty=Tensor[(6, 4), float64] */, dtype="float64") /* ty=Tensor[(6, 4), float64] */;
  %354 = reshape(%353, newshape=[6, 2, 2]) /* ty=Tensor[(6, 2, 2), float64] */;
  %355 = @func_4687(%354) /* ty=(Tensor[(6, 2, 2), float64], Tensor[(6, 2, 2), float32], Tensor[(300, 1), float64]) */;
  %356 = %355.2;
  %357 = cast(%356, dtype="float32") /* ty=Tensor[(300, 1), float32] */;
  %358 = log2(%357) /* ty=Tensor[(300, 1), float32] */;
  %359 = cast(%356, dtype="float32") /* ty=Tensor[(300, 1), float32] */;
  %360 = shape_of(%358, dtype="int32") /* ty=Tensor[(2), int32] */;
  %361 = cast(%358, dtype="float32") /* ty=Tensor[(300, 1), float32] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %363 = cast(%var_10535, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %364 = cast(%var_10536, dtype="uint8") /* ty=Tensor[(252), uint8] */;
  %365 = reshape(%363, newshape=[1092]) /* ty=Tensor[(1092), float32] */;
  %366 = reshape(%364, newshape=[252]) /* ty=Tensor[(252), uint8] */;
  %367 = @func_9660(%365, %366) /* ty=(Tensor[(1092), float64], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(126, 2), uint64], Tensor[(24), float64], Tensor[(24), float64]) */;
  %368 = %352.0;
  %369 = power(%361, %362) /* ty=Tensor[(300, ?), float32] */;
  %370 = %367.0;
  (%368, meta[relay.Constant][16] /* ty=Tensor[(6, 4), float64] */, %369, %370, %var_10535, %var_10536)
}

def @func_1403(%var_1315: Tensor[(10, 12, 1), float32]) -> (Tensor[(10, 12, 6), float32], Tensor[(7, 12, 13), float32], Tensor[(7, 12, 13), float32], Tensor[(6, 6, 10), float32], Tensor[(360), float32], Tensor[(7, 12, 13), bool], Tensor[(7, 12, 13), float32], Tensor[(6, 6, 10), float32]) {
  %371 = cast(%var_1315, dtype="float32") /* ty=Tensor[(10, 12, 1), float32] */;
  %372 = cast(meta[relay.Constant][17] /* ty=Tensor[(10, 12, 6), float32] */, dtype="float32") /* ty=Tensor[(10, 12, 6), float32] */;
  %373 = cast(meta[relay.Constant][18] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %374 = reshape(%373, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float32] */;
  %375 = cast(meta[relay.Constant][18] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %376 = reshape(%375, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float32] */;
  %377 = @func_314(%376) /* ty=Tensor[(7, 12, 13), float32] */;
  %378 = cast(%377, dtype="float32") /* ty=Tensor[(7, 12, 13), float32] */;
  %379 = reshape(%378, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float32] */;
  %380 = cast(meta[relay.Constant][19] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %381 = reshape(%380, newshape=[6, 6, 10]) /* ty=Tensor[(6, 6, 10), float32] */;
  %382 = cast(meta[relay.Constant][18] /* ty=Tensor[(1092), float32] */, dtype="bool") /* ty=Tensor[(1092), bool] */;
  %383 = shape_of(%377, dtype="int32") /* ty=Tensor[(3), int32] */;
  %384 = cast(%377, dtype="bool") /* ty=Tensor[(7, 12, 13), bool] */;
  %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %386 = cast(%377, dtype="float32") /* ty=Tensor[(7, 12, 13), float32] */;
  %387 = reshape(%386, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float32] */;
  %388 = cast(meta[relay.Constant][19] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %389 = reshape(%388, newshape=[6, 6, 10]) /* ty=Tensor[(6, 6, 10), float32] */;
  %390 = floor_divide(%371, %372) /* ty=Tensor[(10, 12, 6), float32] */;
  %391 = @func_314(%374) /* ty=Tensor[(7, 12, 13), float32] */;
  %392 = @func_314(%379) /* ty=Tensor[(7, 12, 13), float32] */;
  %393 = @func_782(%381) /* ty=Tensor[(6, 6, 10), float32] */;
  %394 = less(%384, %385) /* ty=Tensor[(7, 12, 13), bool] */;
  %395 = @func_314(%387) /* ty=Tensor[(7, 12, 13), float32] */;
  %396 = @func_782(%389) /* ty=Tensor[(6, 6, 10), float32] */;
  (%390, %391, %392, %393, meta[relay.Constant][19] /* ty=Tensor[(360), float32] */, %394, %395, %396)
}

def @func_8391() -> (Tensor[(252), uint8], Tensor[(300, 10), int64]) {
  %397 = @func_6418() /* ty=(Tensor[(300, 10), int64],) */;
  %398 = @func_4977() /* ty=Tensor[(252), uint8] */;
  %399 = %397.0;
  (%398, %399)
}

def @func_3285(%var_3258: Tensor[(1, 10, 3), int16], %var_3259: Tensor[(1, 10, 3), int16]) -> (Tensor[(8, 5, 8), float32], Tensor[(320), float32], Tensor[(?, 10, 3), float64]) {
  %400 = cast(meta[relay.Constant][20] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %401 = reshape(%400, newshape=[8, 5, 8]) /* ty=Tensor[(8, 5, 8), float32] */;
  %402 = cast(%var_3259, dtype="int16") /* ty=Tensor[(1, 10, 3), int16] */;
  %403 = shape_of(%var_3258, dtype="int32") /* ty=Tensor[(3), int32] */;
  %404 = cast(%var_3258, dtype="int16") /* ty=Tensor[(1, 10, 3), int16] */;
  %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %406 = maximum(%404, %405) /* ty=Tensor[(?, 10, 3), int16] */;
  %407 = cast(%406, dtype="float64") /* ty=Tensor[(?, 10, 3), float64] */;
  %408 = sin(%407) /* ty=Tensor[(?, 10, 3), float64] */;
  %409 = cast(%408, dtype="float64") /* ty=Tensor[(?, 10, 3), float64] */;
  %410 = @func_2511(%401) /* ty=Tensor[(8, 5, 8), float32] */;
  %411 = acosh(%409) /* ty=Tensor[(?, 10, 3), float64] */;
  (%410, meta[relay.Constant][20] /* ty=Tensor[(320), float32] */, %411)
}

def @func_8079() -> (Tensor[(1092), float32],) {
  %412 = @func_5968() /* ty=(Tensor[(1092), float32],) */;
  %413 = %412.0;
  (%413,)
}

def @func_11341() -> (Tensor[(2, 180), float32], Tensor[(12, 8, 12), float64]) {
  %414 = @func_8574() /* ty=(Tensor[(2, 180), float32],) */;
  %415 = %414.0;
  %416 = @func_8592() /* ty=Tensor[(12, 8, 12), float64] */;
  (%415, %416)
}

def @func_10968() -> (Tensor[(1092), float32], Tensor[(300, 10), int64]) {
  %417 = @func_4540() /* ty=(Tensor[(1092), float32],) */;
  %418 = @func_6418() /* ty=(Tensor[(300, 10), int64],) */;
  %419 = %417.0;
  %420 = %418.0;
  (%419, %420)
}

def @func_6736(%var_6731: Tensor[(126, 2), float32]) -> (Tensor[(126, 2), uint64],) {
  %421 = @func_5113() /* ty=Tensor[(126, 2), float32] */;
  %422 = cast(%421, dtype="float32") /* ty=Tensor[(126, 2), float32] */;
  %423 = sigmoid(%422) /* ty=Tensor[(126, 2), float32] */;
  %424 = cast(%var_6731, dtype="uint64") /* ty=Tensor[(126, 2), uint64] */;
  %425 = shape_of(%423, dtype="int32") /* ty=Tensor[(2), int32] */;
  %426 = cast(%423, dtype="uint64") /* ty=Tensor[(126, 2), uint64] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %428 = left_shift(%426, %427) /* ty=Tensor[(126, 2), uint64] */;
  (%428,)
}

def @func_8592() -> Tensor[(12, 8, 12), float64] {
  %429 = cast(meta[relay.Constant][21] /* ty=Tensor[(12, 8, 12), float64] */, dtype="float64") /* ty=Tensor[(12, 8, 12), float64] */;
  asin(%429) /* ty=Tensor[(12, 8, 12), float64] */
}

def @func_9511() -> Tensor[(2, 180), float64] {
  %430 = @func_4235() /* ty=(Tensor[(2, 180), float64], Tensor[(2, 180), float64]) */;
  %430.1
}

def @func_10640() -> Tensor[(12, 8, 12), float64] {
  @func_8592() /* ty=Tensor[(12, 8, 12), float64] */
}

def @func_9660(%var_9615: Tensor[(1092), float32], %var_9636: Tensor[(252), uint8]) -> (Tensor[(1092), float64], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(126, 2), uint64], Tensor[(24), float64], Tensor[(24), float64]) {
  %431 = @func_5647() /* ty=(Tensor[(1092), float32],) */;
  %432 = %431.0;
  %433 = cast(%var_9615, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %434 = shape_of(%432, dtype="int32") /* ty=Tensor[(1), int32] */;
  %435 = cast(%432, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?), float64] */;
  %437 = cast(%var_9636, dtype="uint8") /* ty=Tensor[(252), uint8] */;
  %438 = reshape(%437, newshape=[126, 2]) /* ty=Tensor[(126, 2), uint8] */;
  %439 = @func_6249(%438) /* ty=(Tensor[(126, 2), uint64], Tensor[(252), uint8], Tensor[(1092), float32]) */;
  %440 = cast(%var_9636, dtype="float32") /* ty=Tensor[(252), float32] */;
  %441 = reshape(%440, newshape=[126, 2]) /* ty=Tensor[(126, 2), float32] */;
  %442 = @func_6736(%441) /* ty=(Tensor[(126, 2), uint64],) */;
  %443 = cast(meta[relay.Constant][22] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %444 = reshape(%443, newshape=[24]) /* ty=Tensor[(24), float64] */;
  %445 = @func_5842(%444) /* ty=(Tensor[(252), uint8], Tensor[(6, 2, 2), float32], Tensor[(24), float64], Tensor[(252), uint8]) */;
  %446 = power(%435, %436) /* ty=Tensor[(1092), float64] */;
  %447 = %439.2;
  %448 = %442.0;
  %449 = %445.2;
  (%446, %447, %var_9636, %448, %449, meta[relay.Constant][22] /* ty=Tensor[(24), float64] */)
}

def @func_9845() -> Tensor[(300, 10), int64] {
  %450 = @func_7082() /* ty=(Tensor[(300, 10), int64], Tensor[(2, 180), float64]) */;
  %450.0
}

def @func_5044() -> (Tensor[(300, 1), float64],) {
  %451 = @func_4949() /* ty=Tensor[(300, 1), float64] */;
  (%451,)
}

def @func_5485(%var_5467: Tensor[(858), uint32]) -> (Tensor[(126, 2), float32], Tensor[(11, 13, 6), bool], Tensor[(858), uint32]) {
  %452 = @func_5113() /* ty=Tensor[(126, 2), float32] */;
  %453 = cast(%452, dtype="float32") /* ty=Tensor[(126, 2), float32] */;
  %454 = cast(%var_5467, dtype="uint32") /* ty=Tensor[(858), uint32] */;
  %455 = cast(%var_5467, dtype="uint32") /* ty=Tensor[(858), uint32] */;
  %456 = reshape(%454, newshape=[11, 13, 6]) /* ty=Tensor[(11, 13, 6), uint32] */;
  %457 = reshape(%455, newshape=[11, 13, 6]) /* ty=Tensor[(11, 13, 6), uint32] */;
  %458 = @func_2444(%456, %457) /* ty=(Tensor[(11, 13, 6), bool],) */;
  %459 = atanh(%453) /* ty=Tensor[(126, 2), float32] */;
  %460 = %458.0;
  (%459, %460, %var_5467)
}

def @func_5322() -> Tensor[(300, 1), float32] {
  %461 = @func_3993() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(300, 1), float32], Tensor[(126, 2), uint8], Tensor[(360), float32]) */;
  %461.1
}

def @func_6629() -> (Tensor[(300, 10), int64],) {
  %462 = @func_6025() /* ty=Tensor[(300, 10), int64] */;
  (%462,)
}

def @func_4932() -> (Tensor[(300, 1), float64], Tensor[(300, 1), float64]) {
  %463 = @func_4021() /* ty=Tensor[(300, 1), float64] */;
  %464 = @func_4021() /* ty=Tensor[(300, 1), float64] */;
  (%463, %464)
}

def @func_8973() -> (Tensor[(300, 1), float64],) {
  %465 = @func_4949() /* ty=Tensor[(300, 1), float64] */;
  (%465,)
}

def @func_2444(%var_2433: Tensor[(11, 13, 6), uint32], %var_2434: Tensor[(11, 13, 6), uint32]) -> (Tensor[(11, 13, 6), bool],) {
  %466 = cast(%var_2434, dtype="bool") /* ty=Tensor[(11, 13, 6), bool] */;
  %467 = shape_of(%var_2433, dtype="int32") /* ty=Tensor[(3), int32] */;
  %468 = cast(%var_2433, dtype="bool") /* ty=Tensor[(11, 13, 6), bool] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %470 = equal(%468, %469) /* ty=Tensor[(11, 13, 6), bool] */;
  (%470,)
}

def @func_9718(%var_9701: Tensor[(1, 6, 11), float32]) -> (Tensor[(1, 6, 11), float32],) {
  %471 = cast(%var_9701, dtype="float32") /* ty=Tensor[(1, 6, 11), float32] */;
  %472 = log2(%471) /* ty=Tensor[(1, 6, 11), float32] */;
  (%472,)
}

def @func_6934(%var_6929: Tensor[(300, 10), int64]) -> (Tensor[(300, 10), bool],) {
  %473 = @func_6418() /* ty=(Tensor[(300, 10), int64],) */;
  %474 = %473.0;
  %475 = cast(%var_6929, dtype="bool") /* ty=Tensor[(300, 10), bool] */;
  %476 = shape_of(%474, dtype="int32") /* ty=Tensor[(2), int32] */;
  %477 = cast(%474, dtype="bool") /* ty=Tensor[(300, 10), bool] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %479 = less_equal(%477, %478) /* ty=Tensor[(300, 10), bool] */;
  (%479,)
}

def @func_4949() -> Tensor[(300, 1), float64] {
  @func_4021() /* ty=Tensor[(300, 1), float64] */
}

def @func_10458(%var_10440: Tensor[(66), float32]) -> (Tensor[(300, 10), float32], Tensor[(1, 6, 11), float32], Tensor[(66), float32], Tensor[(300, 1), float64]) {
  %480 = @func_9399() /* ty=(Tensor[(300, 10), int64], Tensor[(252), uint8]) */;
  %481 = %480.0;
  %482 = @func_8740() /* ty=(Tensor[(300, 10), float32], Tensor[(1260), int64], Tensor[(300, 1092), float64], Tensor[(9, 10, 14), bool], Tensor[(300, 10), int64], Tensor[(360), float32], Tensor[(6, 60), float32]) */;
  %483 = %482.4;
  %484 = cast(%483, dtype="float32") /* ty=Tensor[(300, 10), float32] */;
  %485 = sigmoid(%484) /* ty=Tensor[(300, 10), float32] */;
  %486 = cast(%485, dtype="float32") /* ty=Tensor[(300, 10), float32] */;
  %487 = shape_of(%481, dtype="int32") /* ty=Tensor[(2), int32] */;
  %488 = cast(%481, dtype="float32") /* ty=Tensor[(300, 10), float32] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %490 = cast(%var_10440, dtype="float32") /* ty=Tensor[(66), float32] */;
  %491 = reshape(%490, newshape=[1, 6, 11]) /* ty=Tensor[(1, 6, 11), float32] */;
  %492 = @func_9718(%491) /* ty=(Tensor[(1, 6, 11), float32],) */;
  %493 = @func_7313() /* ty=(Tensor[(300, 1), float64],) */;
  %494 = divide(%488, %489) /* ty=Tensor[(300, 10), float32] */;
  %495 = %492.0;
  %496 = %493.0;
  (%494, %495, %var_10440, %496)
}

def @func_9172() -> Tensor[(300, 1092), float64] {
  %497 = @func_8740() /* ty=(Tensor[(300, 10), float32], Tensor[(1260), int64], Tensor[(300, 1092), float64], Tensor[(9, 10, 14), bool], Tensor[(300, 10), int64], Tensor[(360), float32], Tensor[(6, 60), float32]) */;
  %497.2
}

def @func_7852() -> Tensor[(1092), float32] {
  %498 = @func_4181() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(2, 180), float32]) */;
  %498.1
}

def @func_4977() -> Tensor[(252), uint8] {
  %499 = @func_4181() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(2, 180), float32]) */;
  %499.2
}

def @func_6341() -> (Tensor[(1092), float32],) {
  %500 = @func_4540() /* ty=(Tensor[(1092), float32],) */;
  %501 = %500.0;
  (%501,)
}

def @func_10855() -> Tensor[(300, 10), int64] {
  %502 = @func_6991() /* ty=(Tensor[(1092), float32], Tensor[(300, 10), int64]) */;
  %502.1
}

def @func_5968() -> (Tensor[(1092), float32],) {
  %503 = @func_5647() /* ty=(Tensor[(1092), float32],) */;
  %504 = %503.0;
  (%504,)
}

def @func_5440(%var_5398: Tensor[(546, 2), float32], %var_5400: Tensor[(120), float32], %var_5410: Tensor[(546, 2), float32], %var_5432: Tensor[(30), int16]) -> (Tensor[(360), float32], Tensor[(360), float32], Tensor[(10, 30), float32], Tensor[(120), float32], Tensor[(546, 2), float64], Tensor[(546, 2), bool], Tensor[(7, 12, 13), float32], Tensor[(?, 10, 3), float64], Tensor[(30), int16]) {
  %505 = @func_4339() /* ty=(Tensor[(360), float32],) */;
  %506 = cast(%var_5398, dtype="float32") /* ty=Tensor[(546, 2), float32] */;
  %507 = cast(meta[relay.Constant][23] /* ty=Tensor[(10, 30), float32] */, dtype="float32") /* ty=Tensor[(10, 30), float32] */;
  %508 = cast(%var_5400, dtype="float32") /* ty=Tensor[(120), float32] */;
  %509 = %505.0;
  %510 = cast(%509, dtype="float32") /* ty=Tensor[(360), float32] */;
  %511 = reshape(%506, newshape=[1092]) /* ty=Tensor[(1092), float32] */;
  %512 = reshape(%507, newshape=[15, 2, 10]) /* ty=Tensor[(15, 2, 10), float32] */;
  %513 = reshape(%508, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %514 = reshape(%510, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %515 = @func_1657(%511, %512, %513, %514) /* ty=(Tensor[(1092), float32], Tensor[(15, 2, 10), bool], Tensor[(7, 12, 13), float32], Tensor[(120), float32], Tensor[(6, 6, 10), float32], Tensor[(360), float32]) */;
  %516 = cast(%var_5410, dtype="float64") /* ty=Tensor[(546, 2), float64] */;
  %517 = shape_of(%var_5398, dtype="int32") /* ty=Tensor[(2), int32] */;
  %518 = cast(%var_5398, dtype="float64") /* ty=Tensor[(546, 2), float64] */;
  %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %520 = cast(%var_5410, dtype="bool") /* ty=Tensor[(546, 2), bool] */;
  %521 = shape_of(%var_5398, dtype="int32") /* ty=Tensor[(2), int32] */;
  %522 = cast(%var_5398, dtype="bool") /* ty=Tensor[(546, 2), bool] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %524 = cast(%var_5410, dtype="float32") /* ty=Tensor[(546, 2), float32] */;
  %525 = reshape(%524, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float32] */;
  %526 = cast(%var_5432, dtype="int16") /* ty=Tensor[(30), int16] */;
  %527 = cast(%var_5432, dtype="int16") /* ty=Tensor[(30), int16] */;
  %528 = reshape(%526, newshape=[1, 10, 3]) /* ty=Tensor[(1, 10, 3), int16] */;
  %529 = reshape(%527, newshape=[1, 10, 3]) /* ty=Tensor[(1, 10, 3), int16] */;
  %530 = @func_3285(%528, %529) /* ty=(Tensor[(8, 5, 8), float32], Tensor[(320), float32], Tensor[(?, 10, 3), float64]) */;
  %531 = %515.5;
  %532 = mod(%518, %519) /* ty=Tensor[(546, 2), float64] */;
  %533 = logical_or(%522, %523) /* ty=Tensor[(546, 2), bool] */;
  %534 = @func_314(%525) /* ty=Tensor[(7, 12, 13), float32] */;
  %535 = %530.2;
  (%509, %531, meta[relay.Constant][23] /* ty=Tensor[(10, 30), float32] */, %var_5400, %532, %533, %534, %535, %var_5432)
}

def @func_6309(%var_6289: Tensor[(11, 6, 13), float64]) -> (Tensor[(11, 6, 13), float64],) {
  %536 = cast(%var_6289, dtype="float64") /* ty=Tensor[(11, 6, 13), float64] */;
  %537 = atan(%536) /* ty=Tensor[(11, 6, 13), float64] */;
  (%537,)
}

def @func_3365(%var_3333: Tensor[(15, 14, 11), uint32], %var_3334: Tensor[(15, 14, 11), uint32]) -> Tensor[(15, 14, 11), uint32] {
  %538 = cast(%var_3334, dtype="uint32") /* ty=Tensor[(15, 14, 11), uint32] */;
  %539 = shape_of(%var_3333, dtype="int32") /* ty=Tensor[(3), int32] */;
  %540 = cast(%var_3333, dtype="uint32") /* ty=Tensor[(15, 14, 11), uint32] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  right_shift(%540, %541) /* ty=Tensor[(15, 14, 11), uint32] */
}

def @func_8197() -> (Tensor[(126, 2), uint64], Tensor[(300, 1), float64], Tensor[(300, 16), float32], Tensor[(300, 252), float32]) {
  %542 = cast(meta[relay.Constant][24] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
  %543 = reshape(%542, newshape=[126, 2]) /* ty=Tensor[(126, 2), float32] */;
  %544 = @func_6736(%543) /* ty=(Tensor[(126, 2), uint64],) */;
  %545 = @func_4949() /* ty=Tensor[(300, 1), float64] */;
  %546 = cast(%545, dtype="float64") /* ty=Tensor[(300, 1), float64] */;
  %547 = @func_5937() /* ty=(Tensor[(300, 16), bool], Tensor[(300, 16), float32]) */;
  %548 = cast(meta[relay.Constant][24] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
  %549 = cast(%545, dtype="float32") /* ty=Tensor[(300, 1), float32] */;
  %550 = %544.0;
  %551 = cosh(%546) /* ty=Tensor[(300, 1), float64] */;
  %552 = %547.1;
  %553 = mod(%548, %549) /* ty=Tensor[(300, 252), float32] */;
  (%550, %551, %552, %553)
}

def @func_6418() -> (Tensor[(300, 10), int64],) {
  %554 = @func_6025() /* ty=Tensor[(300, 10), int64] */;
  (%554,)
}

def @func_9072(%var_9067: Tensor[(252), uint8]) -> (Tensor[(1092), float32], Tensor[(252), int16]) {
  %555 = @func_6177() /* ty=(Tensor[(1092), float32], Tensor[(9, 10, 14), float64], Tensor[(1260), int64], Tensor[(1092), float32], Tensor[(1092), float32], Tensor[(360), float32], Tensor[(120), float32], Tensor[(30), int16], Tensor[(360), float32]) */;
  %556 = @func_5673() /* ty=(Tensor[(252), uint8],) */;
  %557 = %556.0;
  %558 = cast(%var_9067, dtype="int16") /* ty=Tensor[(252), int16] */;
  %559 = shape_of(%557, dtype="int32") /* ty=Tensor[(1), int32] */;
  %560 = cast(%557, dtype="int16") /* ty=Tensor[(252), int16] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?), int16] */;
  %562 = %555.4;
  %563 = right_shift(%560, %561) /* ty=Tensor[(252), int16] */;
  (%562, %563)
}

def @func_8574() -> (Tensor[(2, 180), float32],) {
  %564 = @func_4181() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(2, 180), float32]) */;
  %565 = %564.3;
  (%565,)
}

def @func_9304() -> (Tensor[(300, 10), float64],) {
  %566 = @func_9100() /* ty=(Tensor[(300, 10), float64],) */;
  %567 = %566.0;
  (%567,)
}

def @func_10653() -> Tensor[(300, 10), float64] {
  %568 = @func_9304() /* ty=(Tensor[(300, 10), float64],) */;
  %568.0
}

def @func_8740() -> (Tensor[(300, 10), float32], Tensor[(1260), int64], Tensor[(300, 1092), float64], Tensor[(9, 10, 14), bool], Tensor[(300, 10), int64], Tensor[(360), float32], Tensor[(6, 60), float32]) {
  %569 = @func_6609() /* ty=(Tensor[(300, 1), float64], Tensor[(300, 10), float32]) */;
  %570 = @func_7611() /* ty=Tensor[(1092), float32] */;
  %571 = @func_4932() /* ty=(Tensor[(300, 1), float64], Tensor[(300, 1), float64]) */;
  %572 = %571.0;
  %573 = cast(%570, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %574 = cast(%572, dtype="float64") /* ty=Tensor[(300, 1), float64] */;
  %575 = cast(meta[relay.Constant][25] /* ty=Tensor[(1260), int64] */, dtype="int64") /* ty=Tensor[(1260), int64] */;
  %576 = reshape(%575, newshape=[1260]) /* ty=Tensor[(1260), int64] */;
  %577 = @func_7440(%576) /* ty=(Tensor[(300, 10), uint8], Tensor[(9, 10, 14), float32], Tensor[(1260), int64]) */;
  %578 = %577.1;
  %579 = cast(%578, dtype="float32") /* ty=Tensor[(9, 10, 14), float32] */;
  %580 = sigmoid(%579) /* ty=Tensor[(9, 10, 14), float32] */;
  %581 = cast(%578, dtype="bool") /* ty=Tensor[(9, 10, 14), bool] */;
  %582 = shape_of(%580, dtype="int32") /* ty=Tensor[(3), int32] */;
  %583 = cast(%580, dtype="bool") /* ty=Tensor[(9, 10, 14), bool] */;
  %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %585 = @func_6629() /* ty=(Tensor[(300, 10), int64],) */;
  %586 = cast(meta[relay.Constant][26] /* ty=Tensor[(6, 60), float32] */, dtype="float32") /* ty=Tensor[(6, 60), float32] */;
  %587 = reshape(%586, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %588 = @func_4379(%587) /* ty=(Tensor[(6, 6, 10), float32], Tensor[(360), float32], Tensor[(6, 6, 10), float32], Tensor[(8, 2, 7), int8]) */;
  %589 = %569.1;
  %590 = floor_mod(%573, %574) /* ty=Tensor[(300, 1092), float64] */;
  %591 = less_equal(%583, %584) /* ty=Tensor[(9, 10, 14), bool] */;
  %592 = %585.0;
  %593 = %588.1;
  (%589, meta[relay.Constant][25] /* ty=Tensor[(1260), int64] */, %590, %591, %592, %593, meta[relay.Constant][26] /* ty=Tensor[(6, 60), float32] */)
}

def @func_5673() -> (Tensor[(252), uint8],) {
  %594 = @func_4977() /* ty=Tensor[(252), uint8] */;
  (%594,)
}

def @func_9345(%var_9326: Tensor[(9, 16, 6), float64]) -> Tensor[(9, 16, 6), float64] {
  %595 = cast(%var_9326, dtype="float64") /* ty=Tensor[(9, 16, 6), float64] */;
  log(%595) /* ty=Tensor[(9, 16, 6), float64] */
}

def @func_6991() -> (Tensor[(1092), float32], Tensor[(300, 10), int64]) {
  %596 = @func_6341() /* ty=(Tensor[(1092), float32],) */;
  %597 = @func_6418() /* ty=(Tensor[(300, 10), int64],) */;
  %598 = %596.0;
  %599 = %597.0;
  (%598, %599)
}

def @func_5937() -> (Tensor[(300, 16), bool], Tensor[(300, 16), float32]) {
  %600 = @func_4949() /* ty=Tensor[(300, 1), float64] */;
  %601 = cast(%600, dtype="bool") /* ty=Tensor[(300, 1), bool] */;
  %602 = cast(meta[relay.Constant][27] /* ty=Tensor[(300, 16), float64] */, dtype="bool") /* ty=Tensor[(300, 16), bool] */;
  %603 = cast(meta[relay.Constant][27] /* ty=Tensor[(300, 16), float64] */, dtype="float32") /* ty=Tensor[(300, 16), float32] */;
  %604 = cast(%600, dtype="float32") /* ty=Tensor[(300, 1), float32] */;
  %605 = not_equal(%601, %602) /* ty=Tensor[(300, 16), bool] */;
  %606 = floor_mod(%603, %604) /* ty=Tensor[(300, 16), float32] */;
  (%605, %606)
}

def @func_7722() -> Tensor[(300, 10), int64] {
  @func_6025() /* ty=Tensor[(300, 10), int64] */
}

def @func_7353() -> (Tensor[(1092), float32], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(300, 1), float64]) {
  %607 = @func_6113() /* ty=(Tensor[(1092), float32], Tensor[(252), uint8]) */;
  %608 = cast(meta[relay.Constant][28] /* ty=Tensor[(252), uint8] */, dtype="uint8") /* ty=Tensor[(252), uint8] */;
  %609 = reshape(%608, newshape=[126, 2]) /* ty=Tensor[(126, 2), uint8] */;
  %610 = @func_6249(%609) /* ty=(Tensor[(126, 2), uint64], Tensor[(252), uint8], Tensor[(1092), float32]) */;
  %611 = @func_4932() /* ty=(Tensor[(300, 1), float64], Tensor[(300, 1), float64]) */;
  %612 = %607.0;
  %613 = %610.2;
  %614 = %611.0;
  (%612, %613, meta[relay.Constant][28] /* ty=Tensor[(252), uint8] */, %614)
}

def @func_6583() -> Tensor[(1092), float32] {
  %615 = @func_5647() /* ty=(Tensor[(1092), float32],) */;
  %615.0
}

def @func_2846(%var_2837: Tensor[(4, 8, 2), float32], %var_2838: Tensor[(4, 8, 2), float32], %var_2843: Tensor[(360), float32]) -> (Tensor[(4, 8, 2), float32], Tensor[(6, 6, 10), float32], Tensor[(360), float32]) {
  %616 = cast(%var_2838, dtype="float32") /* ty=Tensor[(4, 8, 2), float32] */;
  %617 = shape_of(%var_2837, dtype="int32") /* ty=Tensor[(3), int32] */;
  %618 = cast(%var_2837, dtype="float32") /* ty=Tensor[(4, 8, 2), float32] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %620 = cast(%var_2843, dtype="float32") /* ty=Tensor[(360), float32] */;
  %621 = reshape(%620, newshape=[6, 6, 10]) /* ty=Tensor[(6, 6, 10), float32] */;
  %622 = power(%618, %619) /* ty=Tensor[(4, 8, 2), float32] */;
  %623 = @func_782(%621) /* ty=Tensor[(6, 6, 10), float32] */;
  (%622, %623, %var_2843)
}

def @func_9587() -> (Tensor[(1092), float32],) {
  %624 = @func_7761() /* ty=(Tensor[(1092), float32],) */;
  %625 = %624.0;
  (%625,)
}

def @func_5857() -> Tensor[(360), float32] {
  %626 = @func_4115() /* ty=(Tensor[(360), float32],) */;
  %626.0
}

def @func_6807() -> (Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(11, 13, 6), bool], Tensor[(858), uint32], Tensor[(300, 10), int64], Tensor[(1092), float32], Tensor[(11, 13, 6), bool]) {
  %627 = @func_5647() /* ty=(Tensor[(1092), float32],) */;
  %628 = %627.0;
  %629 = cast(%628, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %630 = cast(meta[relay.Constant][29] /* ty=Tensor[(858), uint32] */, dtype="uint32") /* ty=Tensor[(858), uint32] */;
  %631 = cast(meta[relay.Constant][29] /* ty=Tensor[(858), uint32] */, dtype="uint32") /* ty=Tensor[(858), uint32] */;
  %632 = reshape(%630, newshape=[11, 13, 6]) /* ty=Tensor[(11, 13, 6), uint32] */;
  %633 = reshape(%631, newshape=[11, 13, 6]) /* ty=Tensor[(11, 13, 6), uint32] */;
  %634 = @func_2444(%632, %633) /* ty=(Tensor[(11, 13, 6), bool],) */;
  %635 = @func_6177() /* ty=(Tensor[(1092), float32], Tensor[(9, 10, 14), float64], Tensor[(1260), int64], Tensor[(1092), float32], Tensor[(1092), float32], Tensor[(360), float32], Tensor[(120), float32], Tensor[(30), int16], Tensor[(360), float32]) */;
  %636 = cast(meta[relay.Constant][29] /* ty=Tensor[(858), uint32] */, dtype="uint32") /* ty=Tensor[(858), uint32] */;
  %637 = %634.0;
  %638 = cast(%637, dtype="uint32") /* ty=Tensor[(11, 13, 6), uint32] */;
  %639 = reshape(%636, newshape=[11, 13, 6]) /* ty=Tensor[(11, 13, 6), uint32] */;
  %640 = reshape(%638, newshape=[11, 13, 6]) /* ty=Tensor[(11, 13, 6), uint32] */;
  %641 = @func_2444(%639, %640) /* ty=(Tensor[(11, 13, 6), bool],) */;
  %642 = asinh(%629) /* ty=Tensor[(1092), float32] */;
  %643 = @func_4977() /* ty=Tensor[(252), uint8] */;
  %644 = @func_6025() /* ty=Tensor[(300, 10), int64] */;
  %645 = %635.3;
  %646 = %641.0;
  (%642, %643, %637, meta[relay.Constant][29] /* ty=Tensor[(858), uint32] */, %644, %645, %646)
}

def @func_8485() -> Tensor[(252), uint8] {
  %647 = @func_6113() /* ty=(Tensor[(1092), float32], Tensor[(252), uint8]) */;
  %647.1
}

def @func_9489(%var_9463: Tensor[(14, 12, 9), float32]) -> (Tensor[(14, 12, 9), bool], Tensor[(300, 1), float64], Tensor[(6, 60), float32]) {
  %648 = cast(meta[relay.Constant][30] /* ty=Tensor[(14, 12, 1), float32] */, dtype="bool") /* ty=Tensor[(14, 12, 1), bool] */;
  %649 = cast(%var_9463, dtype="bool") /* ty=Tensor[(14, 12, 9), bool] */;
  %650 = @func_8973() /* ty=(Tensor[(300, 1), float64],) */;
  %651 = @func_8740() /* ty=(Tensor[(300, 10), float32], Tensor[(1260), int64], Tensor[(300, 1092), float64], Tensor[(9, 10, 14), bool], Tensor[(300, 10), int64], Tensor[(360), float32], Tensor[(6, 60), float32]) */;
  %652 = greater(%648, %649) /* ty=Tensor[(14, 12, 9), bool] */;
  %653 = %650.0;
  %654 = %651.6;
  (%652, %653, %654)
}

def @func_8447() -> (Tensor[(300, 16), bool], Tensor[(300, 10), int64], Tensor[(360), float32]) {
  %655 = @func_5937() /* ty=(Tensor[(300, 16), bool], Tensor[(300, 16), float32]) */;
  %656 = @func_6071() /* ty=(Tensor[(300, 10), int64],) */;
  %657 = %655.0;
  %658 = %656.0;
  %659 = @func_5857() /* ty=Tensor[(360), float32] */;
  (%657, %658, %659)
}

def @func_8823() -> (Tensor[(252), uint8],) {
  %660 = @func_4977() /* ty=Tensor[(252), uint8] */;
  (%660,)
}

def @func_6071() -> (Tensor[(300, 10), int64],) {
  %661 = @func_6025() /* ty=Tensor[(300, 10), int64] */;
  (%661,)
}

def @func_5113() -> Tensor[(126, 2), float32] {
  %662 = @func_3993() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(300, 1), float32], Tensor[(126, 2), uint8], Tensor[(360), float32]) */;
  %663 = %662.2;
  %664 = cast(%663, dtype="float32") /* ty=Tensor[(126, 2), float32] */;
  asin(%664) /* ty=Tensor[(126, 2), float32] */
}

def @func_10302(%var_10269: Tensor[(2700), float64]) -> (Tensor[(1092), float32], Tensor[(15, 15, 12), float64], float64, Tensor[(2700), float64], Tensor[(360), float32]) {
  %665 = @func_8943() /* ty=(Tensor[(1092), float32],) */;
  %666 = cast(1.32466f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %667 = cast(%var_10269, dtype="float64") /* ty=Tensor[(2700), float64] */;
  %668 = reshape(%666, newshape=[]) /* ty=float64 */;
  %669 = reshape(%667, newshape=[15, 15, 12]) /* ty=Tensor[(15, 15, 12), float64] */;
  %670 = @func_4570() /* ty=(Tensor[(1092), float32], int8, Tensor[(252), uint8], Tensor[(360), float32]) */;
  %671 = %665.0;
  %672 = @func_8772(%668, %669) /* ty=Tensor[(15, 15, 12), float64] */;
  %673 = %670.3;
  (%671, %672, 1.32466f64 /* ty=float64 */, %var_10269, %673)
}

def @func_2918(%var_2885: Tensor[(6, 3, 14), uint8], %var_2886: Tensor[(6, 3, 14), uint8], %var_2907: Tensor[(360), float32]) -> (Tensor[(6, 3, 14), uint8], Tensor[(15, 2, 10), bool], int8, Tensor[(52), int8], Tensor[(1092), float32], Tensor[(300, 1), float32], Tensor[(120, 1), float32], Tensor[(360), float32]) {
  %674 = cast(%var_2886, dtype="uint8") /* ty=Tensor[(6, 3, 14), uint8] */;
  %675 = shape_of(%var_2885, dtype="int32") /* ty=Tensor[(3), int32] */;
  %676 = cast(%var_2885, dtype="uint8") /* ty=Tensor[(6, 3, 14), uint8] */;
  %677 = dyn.reshape(%674, %675, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %678 = cast(meta[relay.Constant][31] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %679 = cast(meta[relay.Constant][32] /* ty=Tensor[(52), int8] */, dtype="int8") /* ty=Tensor[(52), int8] */;
  %680 = cast(meta[relay.Constant][33] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %681 = cast(meta[relay.Constant][34] /* ty=Tensor[(300, 1), float32] */, dtype="float32") /* ty=Tensor[(300, 1), float32] */;
  %682 = cast(meta[relay.Constant][35] /* ty=Tensor[(120, 1), float32] */, dtype="float32") /* ty=Tensor[(120, 1), float32] */;
  %683 = cast(%var_2907, dtype="float32") /* ty=Tensor[(360), float32] */;
  %684 = reshape(%678, newshape=[]) /* ty=int8 */;
  %685 = reshape(%679, newshape=[13, 1, 4]) /* ty=Tensor[(13, 1, 4), int8] */;
  %686 = reshape(%680, newshape=[1092]) /* ty=Tensor[(1092), float32] */;
  %687 = reshape(%681, newshape=[300]) /* ty=Tensor[(300), float32] */;
  %688 = reshape(%682, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %689 = reshape(%683, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %690 = @func_2772(%684, %685, %686, %687, %688, %689) /* ty=(Tensor[(15, 2, 10), bool], Tensor[(1092), float32], Tensor[(300), float32], Tensor[(120), float32], Tensor[(360), float32], Tensor[(7, 12, 13), float32], Tensor[(13, ?, 4), int64]) */;
  %691 = multiply(%676, %677) /* ty=Tensor[(6, 3, 14), uint8] */;
  %692 = %690.0;
  (%691, %692, meta[relay.Constant][31] /* ty=int8 */, meta[relay.Constant][32] /* ty=Tensor[(52), int8] */, meta[relay.Constant][33] /* ty=Tensor[(1092), float32] */, meta[relay.Constant][34] /* ty=Tensor[(300, 1), float32] */, meta[relay.Constant][35] /* ty=Tensor[(120, 1), float32] */, %var_2907)
}

def @func_5842(%var_5804: Tensor[(24), float64]) -> (Tensor[(252), uint8], Tensor[(6, 2, 2), float32], Tensor[(24), float64], Tensor[(252), uint8]) {
  %693 = @func_5673() /* ty=(Tensor[(252), uint8],) */;
  %694 = cast(%var_5804, dtype="float64") /* ty=Tensor[(24), float64] */;
  %695 = reshape(%694, newshape=[6, 2, 2]) /* ty=Tensor[(6, 2, 2), float64] */;
  %696 = @func_4687(%695) /* ty=(Tensor[(6, 2, 2), float64], Tensor[(6, 2, 2), float32], Tensor[(300, 1), float64]) */;
  %697 = %693.0;
  %698 = %696.1;
  %699 = @func_4977() /* ty=Tensor[(252), uint8] */;
  (%697, %698, %var_5804, %699)
}

def @func_6177() -> (Tensor[(1092), float32], Tensor[(9, 10, 14), float64], Tensor[(1260), int64], Tensor[(1092), float32], Tensor[(1092), float32], Tensor[(360), float32], Tensor[(120), float32], Tensor[(30), int16], Tensor[(360), float32]) {
  %700 = @func_6113() /* ty=(Tensor[(1092), float32], Tensor[(252), uint8]) */;
  %701 = cast(meta[relay.Constant][36] /* ty=Tensor[(1260), int64] */, dtype="int64") /* ty=Tensor[(1260), int64] */;
  %702 = reshape(%701, newshape=[9, 10, 14]) /* ty=Tensor[(9, 10, 14), int64] */;
  %703 = @func_5183(%702) /* ty=(Tensor[(9, 10, 14), int64], Tensor[(9, 10, 14), float32], Tensor[(9, 10, 14), float64], Tensor[(15, 14, 11), uint32], Tensor[(2310), float64]) */;
  %704 = @func_4540() /* ty=(Tensor[(1092), float32],) */;
  %705 = @func_4540() /* ty=(Tensor[(1092), float32],) */;
  %706 = %700.0;
  %707 = cast(%706, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %708 = cast(meta[relay.Constant][37] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %709 = cast(%706, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %710 = cast(meta[relay.Constant][38] /* ty=Tensor[(30), int16] */, dtype="int16") /* ty=Tensor[(30), int16] */;
  %711 = reshape(%707, newshape=[546, 2]) /* ty=Tensor[(546, 2), float32] */;
  %712 = reshape(%708, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %713 = reshape(%709, newshape=[546, 2]) /* ty=Tensor[(546, 2), float32] */;
  %714 = reshape(%710, newshape=[30]) /* ty=Tensor[(30), int16] */;
  %715 = @func_5440(%711, %712, %713, %714) /* ty=(Tensor[(360), float32], Tensor[(360), float32], Tensor[(10, 30), float32], Tensor[(120), float32], Tensor[(546, 2), float64], Tensor[(546, 2), bool], Tensor[(7, 12, 13), float32], Tensor[(?, 10, 3), float64], Tensor[(30), int16]) */;
  %716 = @func_4115() /* ty=(Tensor[(360), float32],) */;
  %717 = %703.2;
  %718 = %704.0;
  %719 = %705.0;
  %720 = %715.0;
  %721 = %716.0;
  (%706, %717, meta[relay.Constant][36] /* ty=Tensor[(1260), int64] */, %718, %719, %720, meta[relay.Constant][37] /* ty=Tensor[(120), float32] */, meta[relay.Constant][38] /* ty=Tensor[(30), int16] */, %721)
}

def @func_8119() -> Tensor[(2, 180), float64] {
  %722 = @func_7082() /* ty=(Tensor[(300, 10), int64], Tensor[(2, 180), float64]) */;
  %722.1
}

def @func_10604() -> Tensor[(300, 1), float32] {
  %723 = @func_3993() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(300, 1), float32], Tensor[(126, 2), uint8], Tensor[(360), float32]) */;
  %723.1
}

def @func_7440(%var_7420: Tensor[(1260), int64]) -> (Tensor[(300, 10), uint8], Tensor[(9, 10, 14), float32], Tensor[(1260), int64]) {
  %724 = @func_6025() /* ty=Tensor[(300, 10), int64] */;
  %725 = cast(meta[relay.Constant][39] /* ty=Tensor[(300, 10), int64] */, dtype="uint8") /* ty=Tensor[(300, 10), uint8] */;
  %726 = shape_of(%724, dtype="int32") /* ty=Tensor[(2), int32] */;
  %727 = cast(%724, dtype="uint8") /* ty=Tensor[(300, 10), uint8] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %729 = cast(%var_7420, dtype="int64") /* ty=Tensor[(1260), int64] */;
  %730 = reshape(%729, newshape=[9, 10, 14]) /* ty=Tensor[(9, 10, 14), int64] */;
  %731 = @func_5183(%730) /* ty=(Tensor[(9, 10, 14), int64], Tensor[(9, 10, 14), float32], Tensor[(9, 10, 14), float64], Tensor[(15, 14, 11), uint32], Tensor[(2310), float64]) */;
  %732 = logical_xor(%727, %728) /* ty=Tensor[(300, 10), uint8] */;
  %733 = %731.1;
  (%732, %733, %var_7420)
}

def @func_8089() -> (Tensor[(360), float32], Tensor[(1092), float32]) {
  %734 = @func_6177() /* ty=(Tensor[(1092), float32], Tensor[(9, 10, 14), float64], Tensor[(1260), int64], Tensor[(1092), float32], Tensor[(1092), float32], Tensor[(360), float32], Tensor[(120), float32], Tensor[(30), int16], Tensor[(360), float32]) */;
  %735 = @func_5857() /* ty=Tensor[(360), float32] */;
  %736 = %734.0;
  (%735, %736)
}

def @func_4446(%var_4384: Tensor[(16, 8, 9), uint8], %var_4385: Tensor[(16, 8, 9), uint8], %var_4394: Tensor[(1092), float32], %var_4431: Tensor[(64), float32]) -> (Tensor[(16, 8, 9), uint8], Tensor[(1092), float32], Tensor[(360), float32], Tensor[(360), float32], Tensor[(7, 12, 13), float32], Tensor[(2, 180), float64], Tensor[(6, 6, 10), float32], Tensor[(64), float32], Tensor[(8, 5, 8), float32], Tensor[(320), float32], Tensor[(7, 12, 13), float64]) {
  %737 = cast(%var_4385, dtype="uint8") /* ty=Tensor[(16, 8, 9), uint8] */;
  %738 = shape_of(%var_4384, dtype="int32") /* ty=Tensor[(3), int32] */;
  %739 = cast(%var_4384, dtype="uint8") /* ty=Tensor[(16, 8, 9), uint8] */;
  %740 = dyn.reshape(%737, %738, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %741 = @func_4339() /* ty=(Tensor[(360), float32],) */;
  %742 = @func_4115() /* ty=(Tensor[(360), float32],) */;
  %743 = cast(%var_4394, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %744 = reshape(%743, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float32] */;
  %745 = @func_314(%744) /* ty=Tensor[(7, 12, 13), float32] */;
  %746 = cast(%745, dtype="float32") /* ty=Tensor[(7, 12, 13), float32] */;
  %747 = reshape(%746, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float32] */;
  %748 = @func_4235() /* ty=(Tensor[(2, 180), float64], Tensor[(2, 180), float64]) */;
  %749 = cast(%var_4431, dtype="float32") /* ty=Tensor[(64), float32] */;
  %750 = cast(%var_4431, dtype="float32") /* ty=Tensor[(64), float32] */;
  %751 = %742.0;
  %752 = cast(%751, dtype="float32") /* ty=Tensor[(360), float32] */;
  %753 = reshape(%749, newshape=[4, 8, 2]) /* ty=Tensor[(4, 8, 2), float32] */;
  %754 = reshape(%750, newshape=[4, 8, 2]) /* ty=Tensor[(4, 8, 2), float32] */;
  %755 = reshape(%752, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %756 = @func_2846(%753, %754, %755) /* ty=(Tensor[(4, 8, 2), float32], Tensor[(6, 6, 10), float32], Tensor[(360), float32]) */;
  %757 = cast(meta[relay.Constant][40] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %758 = reshape(%757, newshape=[8, 5, 8]) /* ty=Tensor[(8, 5, 8), float32] */;
  %759 = cast(%745, dtype="float64") /* ty=Tensor[(7, 12, 13), float64] */;
  %760 = left_shift(%739, %740) /* ty=Tensor[(16, 8, 9), uint8] */;
  %761 = %741.0;
  %762 = @func_314(%747) /* ty=Tensor[(7, 12, 13), float32] */;
  %763 = %748.0;
  %764 = %756.1;
  %765 = @func_2511(%758) /* ty=Tensor[(8, 5, 8), float32] */;
  %766 = acosh(%759) /* ty=Tensor[(7, 12, 13), float64] */;
  (%760, %var_4394, %761, %751, %762, %763, %764, %var_4431, %765, meta[relay.Constant][40] /* ty=Tensor[(320), float32] */, %766)
}

def @func_5183(%var_5116: Tensor[(9, 10, 14), int64]) -> (Tensor[(9, 10, 14), int64], Tensor[(9, 10, 14), float32], Tensor[(9, 10, 14), float64], Tensor[(15, 14, 11), uint32], Tensor[(2310), float64]) {
  %767 = cast(meta[relay.Constant][41] /* ty=Tensor[(9, 10, 14), int64] */, dtype="int64") /* ty=Tensor[(9, 10, 14), int64] */;
  %768 = shape_of(%var_5116, dtype="int32") /* ty=Tensor[(3), int32] */;
  %769 = cast(%var_5116, dtype="int64") /* ty=Tensor[(9, 10, 14), int64] */;
  %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %771 = cast(%var_5116, dtype="float32") /* ty=Tensor[(9, 10, 14), float32] */;
  %772 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(9, 10, 14), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %773 = cast(meta[relay.Constant][41] /* ty=Tensor[(9, 10, 14), int64] */, dtype="float32") /* ty=Tensor[(9, 10, 14), float32] */;
  %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %775 = cast(meta[relay.Constant][41] /* ty=Tensor[(9, 10, 14), int64] */, dtype="float64") /* ty=Tensor[(9, 10, 14), float64] */;
  %776 = cast(meta[relay.Constant][42] /* ty=Tensor[(2310), uint32] */, dtype="uint32") /* ty=Tensor[(2310), uint32] */;
  %777 = cast(meta[relay.Constant][42] /* ty=Tensor[(2310), uint32] */, dtype="uint32") /* ty=Tensor[(2310), uint32] */;
  %778 = reshape(%776, newshape=[15, 14, 11]) /* ty=Tensor[(15, 14, 11), uint32] */;
  %779 = reshape(%777, newshape=[15, 14, 11]) /* ty=Tensor[(15, 14, 11), uint32] */;
  %780 = cast(meta[relay.Constant][42] /* ty=Tensor[(2310), uint32] */, dtype="float64") /* ty=Tensor[(2310), float64] */;
  %781 = minimum(%769, %770) /* ty=Tensor[(9, 10, 14), int64] */;
  %782 = floor_mod(%773, %774) /* ty=Tensor[(9, 10, 14), float32] */;
  %783 = rsqrt(%775) /* ty=Tensor[(9, 10, 14), float64] */;
  %784 = @func_3365(%778, %779) /* ty=Tensor[(15, 14, 11), uint32] */;
  %785 = acos(%780) /* ty=Tensor[(2310), float64] */;
  (%781, %782, %783, %784, %785)
}

def @func_11028() -> Tensor[(300, 10), int64] {
  %786 = @func_6418() /* ty=(Tensor[(300, 10), int64],) */;
  %786.0
}

def @func_6249(%var_6219: Tensor[(126, 2), uint8]) -> (Tensor[(126, 2), uint64], Tensor[(252), uint8], Tensor[(1092), float32]) {
  %787 = @func_3993() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(300, 1), float32], Tensor[(126, 2), uint8], Tensor[(360), float32]) */;
  %788 = %787.2;
  %789 = cast(%var_6219, dtype="uint64") /* ty=Tensor[(126, 2), uint64] */;
  %790 = shape_of(%788, dtype="int32") /* ty=Tensor[(2), int32] */;
  %791 = cast(%788, dtype="uint64") /* ty=Tensor[(126, 2), uint64] */;
  %792 = dyn.reshape(%789, %790, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %793 = @func_4570() /* ty=(Tensor[(1092), float32], int8, Tensor[(252), uint8], Tensor[(360), float32]) */;
  %794 = @func_6177() /* ty=(Tensor[(1092), float32], Tensor[(9, 10, 14), float64], Tensor[(1260), int64], Tensor[(1092), float32], Tensor[(1092), float32], Tensor[(360), float32], Tensor[(120), float32], Tensor[(30), int16], Tensor[(360), float32]) */;
  %795 = subtract(%791, %792) /* ty=Tensor[(126, 2), uint64] */;
  %796 = %793.2;
  %797 = %794.3;
  (%795, %796, %797)
}

def @func_7611() -> Tensor[(1092), float32] {
  %798 = @func_6113() /* ty=(Tensor[(1092), float32], Tensor[(252), uint8]) */;
  %798.0
}

def @func_8417() -> (Tensor[(1092), float32], Tensor[(2, 180), float64]) {
  %799 = @func_4540() /* ty=(Tensor[(1092), float32],) */;
  %800 = @func_4235() /* ty=(Tensor[(2, 180), float64], Tensor[(2, 180), float64]) */;
  %801 = %799.0;
  %802 = %800.0;
  (%801, %802)
}

def @func_10915() -> (Tensor[(252), uint8], Tensor[(1092), float32]) {
  %803 = @func_10344() /* ty=(Tensor[(252), uint8], Tensor[(300, 1092), float64], Tensor[(300, 1), float64], Tensor[(300, 1), float32]) */;
  %804 = @func_5968() /* ty=(Tensor[(1092), float32],) */;
  %805 = %803.0;
  %806 = %804.0;
  (%805, %806)
}

def @func_8870() -> (Tensor[(1092), float32],) {
  %807 = @func_8079() /* ty=(Tensor[(1092), float32],) */;
  %808 = %807.0;
  (%808,)
}

def @func_10575() -> (Tensor[(300, 10), float32],) {
  %809 = @func_9845() /* ty=Tensor[(300, 10), int64] */;
  %810 = cast(%809, dtype="float32") /* ty=Tensor[(300, 10), float32] */;
  %811 = log10(%810) /* ty=Tensor[(300, 10), float32] */;
  (%811,)
}

def @func_1657(%var_1625: Tensor[(1092), float32], %var_1636: Tensor[(15, 2, 10), float32], %var_1642: Tensor[(120), float32], %var_1646: Tensor[(360), float32]) -> (Tensor[(1092), float32], Tensor[(15, 2, 10), bool], Tensor[(7, 12, 13), float32], Tensor[(120), float32], Tensor[(6, 6, 10), float32], Tensor[(360), float32]) {
  %812 = cast(%var_1625, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %813 = reshape(%812, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float32] */;
  %814 = @func_314(%813) /* ty=Tensor[(7, 12, 13), float32] */;
  %815 = cast(%814, dtype="float32") /* ty=Tensor[(7, 12, 13), float32] */;
  %816 = shape_of(%var_1625, dtype="int32") /* ty=Tensor[(1), int32] */;
  %817 = cast(%var_1625, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %818 = dyn.reshape(%815, %816, newshape=[]) /* ty=Tensor[(?), float32] */;
  %819 = cast(meta[relay.Constant][43] /* ty=Tensor[(15, 2, 10), float32] */, dtype="float32") /* ty=Tensor[(15, 2, 10), float32] */;
  %820 = log10(%819) /* ty=Tensor[(15, 2, 10), float32] */;
  %821 = cast(%var_1636, dtype="bool") /* ty=Tensor[(15, 2, 10), bool] */;
  %822 = shape_of(%820, dtype="int32") /* ty=Tensor[(3), int32] */;
  %823 = cast(%820, dtype="bool") /* ty=Tensor[(15, 2, 10), bool] */;
  %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %825 = cast(%var_1642, dtype="float32") /* ty=Tensor[(120), float32] */;
  %826 = reshape(%825, newshape=[10, 12, 1]) /* ty=Tensor[(10, 12, 1), float32] */;
  %827 = @func_1403(%826) /* ty=(Tensor[(10, 12, 6), float32], Tensor[(7, 12, 13), float32], Tensor[(7, 12, 13), float32], Tensor[(6, 6, 10), float32], Tensor[(360), float32], Tensor[(7, 12, 13), bool], Tensor[(7, 12, 13), float32], Tensor[(6, 6, 10), float32]) */;
  %828 = cast(%var_1646, dtype="float32") /* ty=Tensor[(360), float32] */;
  %829 = reshape(%828, newshape=[6, 6, 10]) /* ty=Tensor[(6, 6, 10), float32] */;
  %830 = divide(%817, %818) /* ty=Tensor[(1092), float32] */;
  %831 = not_equal(%823, %824) /* ty=Tensor[(15, 2, 10), bool] */;
  %832 = %827.6;
  %833 = @func_782(%829) /* ty=Tensor[(6, 6, 10), float32] */;
  (%830, %831, %832, %var_1642, %833, %var_1646)
}

def @func_7904() -> (Tensor[(1092), float32], Tensor[(4, 12, 10), float32]) {
  %834 = @func_7756() /* ty=(Tensor[(4, 12, 10), float32],) */;
  %835 = @func_5890() /* ty=Tensor[(1092), float32] */;
  %836 = %834.0;
  (%835, %836)
}

def @func_9399() -> (Tensor[(300, 10), int64], Tensor[(252), uint8]) {
  %837 = @func_8391() /* ty=(Tensor[(252), uint8], Tensor[(300, 10), int64]) */;
  %838 = %837.1;
  %839 = @func_5555() /* ty=Tensor[(252), uint8] */;
  (%838, %839)
}

def @func_11245(%var_11207: Tensor[(300, 1092), float64]) -> (Tensor[(300, 1092), int16], Tensor[(1092), float32], Tensor[(1092), float32]) {
  %840 = @func_10806() /* ty=Tensor[(300, 1092), float64] */;
  %841 = cast(%var_11207, dtype="int16") /* ty=Tensor[(300, 1092), int16] */;
  %842 = shape_of(%840, dtype="int32") /* ty=Tensor[(2), int32] */;
  %843 = cast(%840, dtype="int16") /* ty=Tensor[(300, 1092), int16] */;
  %844 = dyn.reshape(%841, %842, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %845 = @func_6177() /* ty=(Tensor[(1092), float32], Tensor[(9, 10, 14), float64], Tensor[(1260), int64], Tensor[(1092), float32], Tensor[(1092), float32], Tensor[(360), float32], Tensor[(120), float32], Tensor[(30), int16], Tensor[(360), float32]) */;
  %846 = @func_6991() /* ty=(Tensor[(1092), float32], Tensor[(300, 10), int64]) */;
  %847 = logical_xor(%843, %844) /* ty=Tensor[(300, 1092), int16] */;
  %848 = %845.0;
  %849 = %846.0;
  (%847, %848, %849)
}

def @func_7026(%var_7013: Tensor[(2, 15, 15), float64]) -> (Tensor[(2, 15, 15), float64],) {
  %850 = cast(%var_7013, dtype="float64") /* ty=Tensor[(2, 15, 15), float64] */;
  %851 = sin(%850) /* ty=Tensor[(2, 15, 15), float64] */;
  (%851,)
}

def @func_6025() -> Tensor[(300, 10), int64] {
  %852 = @func_3993() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(300, 1), float32], Tensor[(126, 2), uint8], Tensor[(360), float32]) */;
  %853 = %852.1;
  %854 = cast(%853, dtype="int64") /* ty=Tensor[(300, 1), int64] */;
  %855 = cast(meta[relay.Constant][44] /* ty=Tensor[(300, 10), float32] */, dtype="int64") /* ty=Tensor[(300, 10), int64] */;
  right_shift(%854, %855) /* ty=Tensor[(300, 10), int64] */
}

def @func_11179(%var_11169: Tensor[(1, 9, 5), int64], %var_11170: Tensor[(7, 9, 5), int64]) -> (Tensor[(7, 9, 5), int64],) {
  %856 = cast(%var_11169, dtype="int64") /* ty=Tensor[(1, 9, 5), int64] */;
  %857 = cast(%var_11170, dtype="int64") /* ty=Tensor[(7, 9, 5), int64] */;
  %858 = bitwise_and(%856, %857) /* ty=Tensor[(7, 9, 5), int64] */;
  (%858,)
}

def @func_10683() -> Tensor[(300, 16), bool] {
  %859 = @func_5937() /* ty=(Tensor[(300, 16), bool], Tensor[(300, 16), float32]) */;
  %859.0
}

def @func_4339() -> (Tensor[(360), float32],) {
  %860 = @func_3993() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(300, 1), float32], Tensor[(126, 2), uint8], Tensor[(360), float32]) */;
  %861 = %860.3;
  (%861,)
}

def @func_4687(%var_4661: Tensor[(6, 2, 2), float64]) -> (Tensor[(6, 2, 2), float64], Tensor[(6, 2, 2), float32], Tensor[(300, 1), float64]) {
  %862 = cast(%var_4661, dtype="float64") /* ty=Tensor[(6, 2, 2), float64] */;
  %863 = cast(%var_4661, dtype="float32") /* ty=Tensor[(6, 2, 2), float32] */;
  %864 = @func_4021() /* ty=Tensor[(300, 1), float64] */;
  %865 = cast(%864, dtype="float64") /* ty=Tensor[(300, 1), float64] */;
  %866 = sinh(%862) /* ty=Tensor[(6, 2, 2), float64] */;
  %867 = rsqrt(%863) /* ty=Tensor[(6, 2, 2), float32] */;
  %868 = sigmoid(%865) /* ty=Tensor[(300, 1), float64] */;
  (%866, %867, %868)
}

def @func_10847() -> (Tensor[(2, 180), float64],) {
  %869 = @func_4235() /* ty=(Tensor[(2, 180), float64], Tensor[(2, 180), float64]) */;
  %870 = %869.1;
  (%870,)
}

def @func_7122(%var_7092: Tensor[(8, 2, 7), int8]) -> (Tensor[(360, 1), float32], Tensor[(8, 2, 7), float32], Tensor[(2, 180), float32], Tensor[(120, 252), float64]) {
  %871 = cast(meta[relay.Constant][45] /* ty=Tensor[(360, 1), float32] */, dtype="float32") /* ty=Tensor[(360, 1), float32] */;
  %872 = reshape(%871, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %873 = @func_4379(%872) /* ty=(Tensor[(6, 6, 10), float32], Tensor[(360), float32], Tensor[(6, 6, 10), float32], Tensor[(8, 2, 7), int8]) */;
  %874 = %873.3;
  %875 = cast(%var_7092, dtype="float32") /* ty=Tensor[(8, 2, 7), float32] */;
  %876 = shape_of(%874, dtype="int32") /* ty=Tensor[(3), int32] */;
  %877 = cast(%874, dtype="float32") /* ty=Tensor[(8, 2, 7), float32] */;
  %878 = dyn.reshape(%875, %876, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %879 = @func_4181() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(2, 180), float32]) */;
  %880 = @func_6917() /* ty=(Tensor[(252), uint8],) */;
  %881 = %880.0;
  %882 = cast(%881, dtype="uint8") /* ty=Tensor[(252), uint8] */;
  %883 = cast(%881, dtype="uint8") /* ty=Tensor[(252), uint8] */;
  %884 = cast(meta[relay.Constant][45] /* ty=Tensor[(360, 1), float32] */, dtype="float32") /* ty=Tensor[(360, 1), float32] */;
  %885 = reshape(%882, newshape=[6, 3, 14]) /* ty=Tensor[(6, 3, 14), uint8] */;
  %886 = reshape(%883, newshape=[6, 3, 14]) /* ty=Tensor[(6, 3, 14), uint8] */;
  %887 = reshape(%884, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %888 = @func_2918(%885, %886, %887) /* ty=(Tensor[(6, 3, 14), uint8], Tensor[(15, 2, 10), bool], int8, Tensor[(52), int8], Tensor[(1092), float32], Tensor[(300, 1), float32], Tensor[(120, 1), float32], Tensor[(360), float32]) */;
  %889 = %888.6;
  %890 = cast(%889, dtype="float64") /* ty=Tensor[(120, 1), float64] */;
  %891 = cast(%881, dtype="float64") /* ty=Tensor[(252), float64] */;
  %892 = divide(%877, %878) /* ty=Tensor[(8, 2, 7), float32] */;
  %893 = %879.3;
  %894 = floor_mod(%890, %891) /* ty=Tensor[(120, 252), float64] */;
  (meta[relay.Constant][45] /* ty=Tensor[(360, 1), float32] */, %892, %893, %894)
}

def @func_4379(%var_4360: Tensor[(360), float32]) -> (Tensor[(6, 6, 10), float32], Tensor[(360), float32], Tensor[(6, 6, 10), float32], Tensor[(8, 2, 7), int8]) {
  %895 = cast(%var_4360, dtype="float32") /* ty=Tensor[(360), float32] */;
  %896 = reshape(%895, newshape=[6, 6, 10]) /* ty=Tensor[(6, 6, 10), float32] */;
  %897 = @func_782(%896) /* ty=Tensor[(6, 6, 10), float32] */;
  %898 = cast(%897, dtype="float32") /* ty=Tensor[(6, 6, 10), float32] */;
  %899 = reshape(%898, newshape=[6, 6, 10]) /* ty=Tensor[(6, 6, 10), float32] */;
  %900 = cast(meta[relay.Constant][46] /* ty=Tensor[(8, 2, 7), float64] */, dtype="float64") /* ty=Tensor[(8, 2, 7), float64] */;
  %901 = asin(%900) /* ty=Tensor[(8, 2, 7), float64] */;
  %902 = cast(meta[relay.Constant][46] /* ty=Tensor[(8, 2, 7), float64] */, dtype="int8") /* ty=Tensor[(8, 2, 7), int8] */;
  %903 = shape_of(%901, dtype="int32") /* ty=Tensor[(3), int32] */;
  %904 = cast(%901, dtype="int8") /* ty=Tensor[(8, 2, 7), int8] */;
  %905 = dyn.reshape(%902, %903, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %906 = @func_782(%899) /* ty=Tensor[(6, 6, 10), float32] */;
  %907 = logical_xor(%904, %905) /* ty=Tensor[(8, 2, 7), int8] */;
  (%897, %var_4360, %906, %907)
}

def @func_11258() -> (Tensor[(2, 180), float64],) {
  %908 = @func_8119() /* ty=Tensor[(2, 180), float64] */;
  (%908,)
}

def @func_4784() -> Tensor[(252), uint8] {
  %909 = @func_4181() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(2, 180), float32]) */;
  %909.2
}

def @func_10772(%var_10761: Tensor[(1024), float64]) -> (Tensor[(1092), float32], Tensor[(16, 16, 4), float64], Tensor[(1024), float64]) {
  %910 = cast(%var_10761, dtype="float64") /* ty=Tensor[(1024), float64] */;
  %911 = reshape(%910, newshape=[16, 16, 4]) /* ty=Tensor[(16, 16, 4), float64] */;
  %912 = @func_7852() /* ty=Tensor[(1092), float32] */;
  %913 = @func_8477(%911) /* ty=Tensor[(16, 16, 4), float64] */;
  (%912, %913, %var_10761)
}

def @func_9549() -> (Tensor[(252), uint8],) {
  %914 = @func_4977() /* ty=Tensor[(252), uint8] */;
  (%914,)
}

def @func_4570() -> (Tensor[(1092), float32], int8, Tensor[(252), uint8], Tensor[(360), float32]) {
  %915 = @func_4540() /* ty=(Tensor[(1092), float32],) */;
  %916 = cast(meta[relay.Constant][47] /* ty=Tensor[(252), uint8] */, dtype="uint8") /* ty=Tensor[(252), uint8] */;
  %917 = cast(meta[relay.Constant][47] /* ty=Tensor[(252), uint8] */, dtype="uint8") /* ty=Tensor[(252), uint8] */;
  %918 = cast(meta[relay.Constant][48] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %919 = reshape(%916, newshape=[6, 3, 14]) /* ty=Tensor[(6, 3, 14), uint8] */;
  %920 = reshape(%917, newshape=[6, 3, 14]) /* ty=Tensor[(6, 3, 14), uint8] */;
  %921 = reshape(%918, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %922 = @func_2918(%919, %920, %921) /* ty=(Tensor[(6, 3, 14), uint8], Tensor[(15, 2, 10), bool], int8, Tensor[(52), int8], Tensor[(1092), float32], Tensor[(300, 1), float32], Tensor[(120, 1), float32], Tensor[(360), float32]) */;
  %923 = %915.0;
  %924 = %922.2;
  (%923, %924, meta[relay.Constant][47] /* ty=Tensor[(252), uint8] */, meta[relay.Constant][48] /* ty=Tensor[(360), float32] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_8898() -> (Tensor[(2, 180), float64],) {
  %2 = fn () -> (Tensor[(2, 180), float64],) {
    %0 = @func_4235() /* ty=(Tensor[(2, 180), float64], Tensor[(2, 180), float64]) */;
    %1 = %0.0;
    (%1,)
  };
  %2() /* ty=(Tensor[(2, 180), float64],) */
}

def @func_10655() -> Tensor[(300, 10), float64] {
  @func_10653() /* ty=Tensor[(300, 10), float64] */
}

def @func_7191(%var_7190: Tensor[(2310), uint32]) -> (Tensor[(2, 180), float32], Tensor[(15, 14, 11), uint32], Tensor[(2310), uint32]) {
  %12 = fn (%var_7169: Tensor[(2310), uint32]) -> (Tensor[(2, 180), float32], Tensor[(15, 14, 11), uint32], Tensor[(2310), uint32]) {
    %3 = @func_4181() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(2, 180), float32]) */;
    %4 = %3.3;
    %5 = cast(%4, dtype="float32") /* ty=Tensor[(2, 180), float32] */;
    %6 = cast(%var_7169, dtype="uint32") /* ty=Tensor[(2310), uint32] */;
    %7 = cast(%var_7169, dtype="uint32") /* ty=Tensor[(2310), uint32] */;
    %8 = reshape(%6, newshape=[15, 14, 11]) /* ty=Tensor[(15, 14, 11), uint32] */;
    %9 = reshape(%7, newshape=[15, 14, 11]) /* ty=Tensor[(15, 14, 11), uint32] */;
    %10 = rsqrt(%5) /* ty=Tensor[(2, 180), float32] */;
    %11 = @func_3365(%8, %9) /* ty=Tensor[(15, 14, 11), uint32] */;
    (%10, %11, %var_7169)
  };
  %12(%var_7190) /* ty=(Tensor[(2, 180), float32], Tensor[(15, 14, 11), uint32], Tensor[(2310), uint32]) */
}

def @func_11248(%var_11246: Tensor[(300, 1092), float64]) -> (Tensor[(300, 1092), int16], Tensor[(1092), float32], Tensor[(1092), float32]) {
  @func_11245(%var_11246) /* ty=(Tensor[(300, 1092), int16], Tensor[(1092), float32], Tensor[(1092), float32]) */
}

def @func_6072() -> (Tensor[(300, 10), int64],) {
  %14 = fn () -> (Tensor[(300, 10), int64],) {
    %13 = @func_6025() /* ty=Tensor[(300, 10), int64] */;
    (%13,)
  };
  %14() /* ty=(Tensor[(300, 10), int64],) */
}

def @func_4934() -> (Tensor[(300, 1), float64], Tensor[(300, 1), float64]) {
  @func_4932() /* ty=(Tensor[(300, 1), float64], Tensor[(300, 1), float64]) */
}

def @func_7443(%var_7441: Tensor[(1260), int64]) -> (Tensor[(300, 10), uint8], Tensor[(9, 10, 14), float32], Tensor[(1260), int64]) {
  @func_7440(%var_7441) /* ty=(Tensor[(300, 10), uint8], Tensor[(9, 10, 14), float32], Tensor[(1260), int64]) */
}

def @func_9663(%var_9661: Tensor[(1092), float32], %var_9662: Tensor[(252), uint8]) -> (Tensor[(1092), float64], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(126, 2), uint64], Tensor[(24), float64], Tensor[(24), float64]) {
  %34 = fn (%var_9615: Tensor[(1092), float32], %var_9636: Tensor[(252), uint8]) -> (Tensor[(1092), float64], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(126, 2), uint64], Tensor[(24), float64], Tensor[(24), float64]) {
    %15 = @func_5647() /* ty=(Tensor[(1092), float32],) */;
    %16 = %15.0;
    %17 = cast(%var_9615, dtype="float64") /* ty=Tensor[(1092), float64] */;
    %18 = shape_of(%16, dtype="int32") /* ty=Tensor[(1), int32] */;
    %19 = cast(%16, dtype="float64") /* ty=Tensor[(1092), float64] */;
    %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?), float64] */;
    %21 = cast(%var_9636, dtype="uint8") /* ty=Tensor[(252), uint8] */;
    %22 = reshape(%21, newshape=[126, 2]) /* ty=Tensor[(126, 2), uint8] */;
    %23 = @func_6249(%22) /* ty=(Tensor[(126, 2), uint64], Tensor[(252), uint8], Tensor[(1092), float32]) */;
    %24 = cast(%var_9636, dtype="float32") /* ty=Tensor[(252), float32] */;
    %25 = reshape(%24, newshape=[126, 2]) /* ty=Tensor[(126, 2), float32] */;
    %26 = @func_6736(%25) /* ty=(Tensor[(126, 2), uint64],) */;
    %27 = cast(meta[relay.Constant][0] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
    %28 = reshape(%27, newshape=[24]) /* ty=Tensor[(24), float64] */;
    %29 = @func_5842(%28) /* ty=(Tensor[(252), uint8], Tensor[(6, 2, 2), float32], Tensor[(24), float64], Tensor[(252), uint8]) */;
    %30 = power(%19, %20) /* ty=Tensor[(1092), float64] */;
    %31 = %23.2;
    %32 = %26.0;
    %33 = %29.2;
    (%30, %31, %var_9636, %32, %33, meta[relay.Constant][0] /* ty=Tensor[(24), float64] */)
  };
  %34(%var_9661, %var_9662) /* ty=(Tensor[(1092), float64], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(126, 2), uint64], Tensor[(24), float64], Tensor[(24), float64]) */
}

def @func_10969() -> (Tensor[(1092), float32], Tensor[(300, 10), int64]) {
  %39 = fn () -> (Tensor[(1092), float32], Tensor[(300, 10), int64]) {
    %35 = @func_4540() /* ty=(Tensor[(1092), float32],) */;
    %36 = @func_6418() /* ty=(Tensor[(300, 10), int64],) */;
    %37 = %35.0;
    %38 = %36.0;
    (%37, %38)
  };
  %39() /* ty=(Tensor[(1092), float32], Tensor[(300, 10), int64]) */
}

def @func_9904() -> (Tensor[(300, 16), float32], Tensor[(1092), float32]) {
  %44 = fn () -> (Tensor[(300, 16), float32], Tensor[(1092), float32]) {
    %40 = @func_5937() /* ty=(Tensor[(300, 16), bool], Tensor[(300, 16), float32]) */;
    %41 = @func_8943() /* ty=(Tensor[(1092), float32],) */;
    %42 = %40.1;
    %43 = %41.0;
    (%42, %43)
  };
  %44() /* ty=(Tensor[(300, 16), float32], Tensor[(1092), float32]) */
}

def @func_9845() -> Tensor[(300, 10), int64] {
  %45 = @func_7082() /* ty=(Tensor[(300, 10), int64], Tensor[(2, 180), float64]) */;
  %45.0
}

def @func_8593() -> Tensor[(12, 8, 12), float64] {
  %47 = fn () -> Tensor[(12, 8, 12), float64] {
    %46 = cast(meta[relay.Constant][1] /* ty=Tensor[(12, 8, 12), float64] */, dtype="float64") /* ty=Tensor[(12, 8, 12), float64] */;
    asin(%46) /* ty=Tensor[(12, 8, 12), float64] */
  };
  %47() /* ty=Tensor[(12, 8, 12), float64] */
}

def @func_7905() -> (Tensor[(1092), float32], Tensor[(4, 12, 10), float32]) {
  %51 = fn () -> (Tensor[(1092), float32], Tensor[(4, 12, 10), float32]) {
    %48 = @func_7756() /* ty=(Tensor[(4, 12, 10), float32],) */;
    %49 = @func_5890() /* ty=Tensor[(1092), float32] */;
    %50 = %48.0;
    (%49, %50)
  };
  %51() /* ty=(Tensor[(1092), float32], Tensor[(4, 12, 10), float32]) */
}

def @func_9072(%var_9067: Tensor[(252), uint8]) -> (Tensor[(1092), float32], Tensor[(252), int16]) {
  %52 = @func_6177() /* ty=(Tensor[(1092), float32], Tensor[(9, 10, 14), float64], Tensor[(1260), int64], Tensor[(1092), float32], Tensor[(1092), float32], Tensor[(360), float32], Tensor[(120), float32], Tensor[(30), int16], Tensor[(360), float32]) */;
  %53 = @func_5673() /* ty=(Tensor[(252), uint8],) */;
  %54 = %53.0;
  %55 = cast(%var_9067, dtype="int16") /* ty=Tensor[(252), int16] */;
  %56 = shape_of(%54, dtype="int32") /* ty=Tensor[(1), int32] */;
  %57 = cast(%54, dtype="int16") /* ty=Tensor[(252), int16] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?), int16] */;
  %59 = %52.4;
  %60 = right_shift(%57, %58) /* ty=Tensor[(252), int16] */;
  (%59, %60)
}

def @func_7723() -> Tensor[(300, 10), int64] {
  %61 = fn () -> Tensor[(300, 10), int64] {
    @func_6025() /* ty=Tensor[(300, 10), int64] */
  };
  %61() /* ty=Tensor[(300, 10), int64] */
}

def @func_6418() -> (Tensor[(300, 10), int64],) {
  %62 = @func_6025() /* ty=Tensor[(300, 10), int64] */;
  (%62,)
}

def @func_6809() -> (Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(11, 13, 6), bool], Tensor[(858), uint32], Tensor[(300, 10), int64], Tensor[(1092), float32], Tensor[(11, 13, 6), bool]) {
  @func_6807() /* ty=(Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(11, 13, 6), bool], Tensor[(858), uint32], Tensor[(300, 10), int64], Tensor[(1092), float32], Tensor[(11, 13, 6), bool]) */
}

def @func_5969() -> (Tensor[(1092), float32],) {
  %65 = fn () -> (Tensor[(1092), float32],) {
    %63 = @func_5647() /* ty=(Tensor[(1092), float32],) */;
    %64 = %63.0;
    (%64,)
  };
  %65() /* ty=(Tensor[(1092), float32],) */
}

def @func_4022() -> Tensor[(300, 1), float64] {
  %69 = fn () -> Tensor[(300, 1), float64] {
    %66 = @func_3993() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(300, 1), float32], Tensor[(126, 2), uint8], Tensor[(360), float32]) */;
    %67 = %66.1;
    %68 = cast(%67, dtype="float64") /* ty=Tensor[(300, 1), float64] */;
    erf(%68) /* ty=Tensor[(300, 1), float64] */
  };
  %69() /* ty=Tensor[(300, 1), float64] */
}

def @func_7763() -> (Tensor[(1092), float32],) {
  @func_7761() /* ty=(Tensor[(1092), float32],) */
}

def @func_8267(%var_8213: Tensor[(2, 1800), float64], %var_8228: Tensor[(126, 2), float32]) -> (Tensor[(126, 2), float64], Tensor[(2, 1800), int64], Tensor[(360), float32]) {
  %70 = @func_5113() /* ty=Tensor[(126, 2), float32] */;
  %71 = cast(%var_8228, dtype="float64") /* ty=Tensor[(126, 2), float64] */;
  %72 = shape_of(%70, dtype="int32") /* ty=Tensor[(2), int32] */;
  %73 = cast(%70, dtype="float64") /* ty=Tensor[(126, 2), float64] */;
  %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %75 = cast(%var_8213, dtype="float64") /* ty=Tensor[(2, 1800), float64] */;
  %76 = cast(%var_8213, dtype="float64") /* ty=Tensor[(2, 1800), float64] */;
  %77 = reshape(%75, newshape=[300, 12]) /* ty=Tensor[(300, 12), float64] */;
  %78 = reshape(%76, newshape=[300, 12]) /* ty=Tensor[(300, 12), float64] */;
  %79 = @func_5283(%77, %78) /* ty=(Tensor[(300, 12), float32], Tensor[(300, 12), int64], Tensor[(2, 180), float64]) */;
  %80 = %79.0;
  %81 = cast(%80, dtype="float32") /* ty=Tensor[(300, 12), float32] */;
  %82 = shape_of(%var_8213, dtype="int32") /* ty=Tensor[(2), int32] */;
  %83 = cast(%var_8213, dtype="float32") /* ty=Tensor[(2, 1800), float32] */;
  %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %85 = mod(%83, %84) /* ty=Tensor[(2, 1800), float32] */;
  %86 = cast(%80, dtype="int64") /* ty=Tensor[(300, 12), int64] */;
  %87 = shape_of(%85, dtype="int32") /* ty=Tensor[(2), int32] */;
  %88 = cast(%85, dtype="int64") /* ty=Tensor[(2, 1800), int64] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %90 = divide(%73, %74) /* ty=Tensor[(126, 2), float64] */;
  %91 = bitwise_or(%88, %89) /* ty=Tensor[(2, 1800), int64] */;
  %92 = @func_5857() /* ty=Tensor[(360), float32] */;
  (%90, %91, %92)
}

def @func_8776(%var_8774: float64, %var_8775: Tensor[(15, 15, 12), float64]) -> Tensor[(15, 15, 12), float64] {
  @func_8772(%var_8774, %var_8775) /* ty=Tensor[(15, 15, 12), float64] */
}

def @func_5485(%var_5467: Tensor[(858), uint32]) -> (Tensor[(126, 2), float32], Tensor[(11, 13, 6), bool], Tensor[(858), uint32]) {
  %93 = @func_5113() /* ty=Tensor[(126, 2), float32] */;
  %94 = cast(%93, dtype="float32") /* ty=Tensor[(126, 2), float32] */;
  %95 = cast(%var_5467, dtype="uint32") /* ty=Tensor[(858), uint32] */;
  %96 = cast(%var_5467, dtype="uint32") /* ty=Tensor[(858), uint32] */;
  %97 = reshape(%95, newshape=[11, 13, 6]) /* ty=Tensor[(11, 13, 6), uint32] */;
  %98 = reshape(%96, newshape=[11, 13, 6]) /* ty=Tensor[(11, 13, 6), uint32] */;
  %99 = @func_2444(%97, %98) /* ty=(Tensor[(11, 13, 6), bool],) */;
  %100 = atanh(%94) /* ty=Tensor[(126, 2), float32] */;
  %101 = %99.0;
  (%100, %101, %var_5467)
}

def @func_8973() -> (Tensor[(300, 1), float64],) {
  %102 = @func_4949() /* ty=Tensor[(300, 1), float64] */;
  (%102,)
}

def @func_8576() -> (Tensor[(2, 180), float32],) {
  @func_8574() /* ty=(Tensor[(2, 180), float32],) */
}

def @func_8943() -> (Tensor[(1092), float32],) {
  %103 = @func_8079() /* ty=(Tensor[(1092), float32],) */;
  %104 = %103.0;
  %105 = cast(%104, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %106 = cosh(%105) /* ty=Tensor[(1092), float32] */;
  (%106,)
}

def @func_9102() -> (Tensor[(300, 10), float64],) {
  @func_9100() /* ty=(Tensor[(300, 10), float64],) */
}

def @func_10576() -> (Tensor[(300, 10), float32],) {
  %110 = fn () -> (Tensor[(300, 10), float32],) {
    %107 = @func_9845() /* ty=Tensor[(300, 10), int64] */;
    %108 = cast(%107, dtype="float32") /* ty=Tensor[(300, 10), float32] */;
    %109 = log10(%108) /* ty=Tensor[(300, 10), float32] */;
    (%109,)
  };
  %110() /* ty=(Tensor[(300, 10), float32],) */
}

def @func_7687(%var_7685: Tensor[(858), float64], %var_7686: Tensor[(3600), float64]) -> (Tensor[(1092), float32], Tensor[(11, 6, 13), float64], Tensor[(858), float64], Tensor[(2, 180), float64], Tensor[(3600), float64], Tensor[(300, 1), float64], Tensor[(300, ?), int16]) {
  %134 = fn (%var_7650: Tensor[(858), float64], %var_7665: Tensor[(3600), float64]) -> (Tensor[(1092), float32], Tensor[(11, 6, 13), float64], Tensor[(858), float64], Tensor[(2, 180), float64], Tensor[(3600), float64], Tensor[(300, 1), float64], Tensor[(300, ?), int16]) {
    %111 = @func_5968() /* ty=(Tensor[(1092), float32],) */;
    %112 = cast(%var_7650, dtype="float64") /* ty=Tensor[(858), float64] */;
    %113 = reshape(%112, newshape=[11, 6, 13]) /* ty=Tensor[(11, 6, 13), float64] */;
    %114 = @func_6309(%113) /* ty=(Tensor[(11, 6, 13), float64],) */;
    %115 = cast(%var_7665, dtype="float64") /* ty=Tensor[(3600), float64] */;
    %116 = cast(%var_7665, dtype="float64") /* ty=Tensor[(3600), float64] */;
    %117 = reshape(%115, newshape=[300, 12]) /* ty=Tensor[(300, 12), float64] */;
    %118 = reshape(%116, newshape=[300, 12]) /* ty=Tensor[(300, 12), float64] */;
    %119 = @func_5283(%117, %118) /* ty=(Tensor[(300, 12), float32], Tensor[(300, 12), int64], Tensor[(2, 180), float64]) */;
    %120 = @func_4932() /* ty=(Tensor[(300, 1), float64], Tensor[(300, 1), float64]) */;
    %121 = @func_7313() /* ty=(Tensor[(300, 1), float64],) */;
    %122 = %121.0;
    %123 = cast(%122, dtype="float32") /* ty=Tensor[(300, 1), float32] */;
    %124 = acosh(%123) /* ty=Tensor[(300, 1), float32] */;
    %125 = cast(%124, dtype="int16") /* ty=Tensor[(300, 1), int16] */;
    %126 = shape_of(%122, dtype="int32") /* ty=Tensor[(2), int32] */;
    %127 = cast(%122, dtype="int16") /* ty=Tensor[(300, 1), int16] */;
    %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %129 = %111.0;
    %130 = %114.0;
    %131 = %119.2;
    %132 = %120.1;
    %133 = add(%127, %128) /* ty=Tensor[(300, ?), int16] */;
    (%129, %130, %var_7650, %131, %var_7665, %132, %133)
  };
  %134(%var_7685, %var_7686) /* ty=(Tensor[(1092), float32], Tensor[(11, 6, 13), float64], Tensor[(858), float64], Tensor[(2, 180), float64], Tensor[(3600), float64], Tensor[(300, 1), float64], Tensor[(300, ?), int16]) */
}

def @func_5286(%var_5284: Tensor[(300, 12), float64], %var_5285: Tensor[(300, 12), float64]) -> (Tensor[(300, 12), float32], Tensor[(300, 12), int64], Tensor[(2, 180), float64]) {
  %146 = fn (%var_5269: Tensor[(300, 12), float64], %var_5277: Tensor[(300, 12), float64]) -> (Tensor[(300, 12), float32], Tensor[(300, 12), int64], Tensor[(2, 180), float64]) {
    %135 = @func_4021() /* ty=Tensor[(300, 1), float64] */;
    %136 = cast(%135, dtype="float32") /* ty=Tensor[(300, 1), float32] */;
    %137 = cast(%var_5269, dtype="float32") /* ty=Tensor[(300, 12), float32] */;
    %138 = cast(%var_5277, dtype="int64") /* ty=Tensor[(300, 12), int64] */;
    %139 = shape_of(%var_5269, dtype="int32") /* ty=Tensor[(2), int32] */;
    %140 = cast(%var_5269, dtype="int64") /* ty=Tensor[(300, 12), int64] */;
    %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %142 = @func_4235() /* ty=(Tensor[(2, 180), float64], Tensor[(2, 180), float64]) */;
    %143 = mod(%136, %137) /* ty=Tensor[(300, 12), float32] */;
    %144 = bitwise_xor(%140, %141) /* ty=Tensor[(300, 12), int64] */;
    %145 = %142.0;
    (%143, %144, %145)
  };
  %146(%var_5284, %var_5285) /* ty=(Tensor[(300, 12), float32], Tensor[(300, 12), int64], Tensor[(2, 180), float64]) */
}

def @func_5557() -> Tensor[(252), uint8] {
  @func_5555() /* ty=Tensor[(252), uint8] */
}

def @func_11245(%var_11207: Tensor[(300, 1092), float64]) -> (Tensor[(300, 1092), int16], Tensor[(1092), float32], Tensor[(1092), float32]) {
  %147 = @func_10806() /* ty=Tensor[(300, 1092), float64] */;
  %148 = cast(%var_11207, dtype="int16") /* ty=Tensor[(300, 1092), int16] */;
  %149 = shape_of(%147, dtype="int32") /* ty=Tensor[(2), int32] */;
  %150 = cast(%147, dtype="int16") /* ty=Tensor[(300, 1092), int16] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %152 = @func_6177() /* ty=(Tensor[(1092), float32], Tensor[(9, 10, 14), float64], Tensor[(1260), int64], Tensor[(1092), float32], Tensor[(1092), float32], Tensor[(360), float32], Tensor[(120), float32], Tensor[(30), int16], Tensor[(360), float32]) */;
  %153 = @func_6991() /* ty=(Tensor[(1092), float32], Tensor[(300, 10), int64]) */;
  %154 = logical_xor(%150, %151) /* ty=Tensor[(300, 1092), int16] */;
  %155 = %152.0;
  %156 = %153.0;
  (%154, %155, %156)
}

def @func_4542() -> (Tensor[(1092), float32],) {
  @func_4540() /* ty=(Tensor[(1092), float32],) */
}

def @func_5324() -> Tensor[(300, 1), float32] {
  @func_5322() /* ty=Tensor[(300, 1), float32] */
}

def @func_10772(%var_10761: Tensor[(1024), float64]) -> (Tensor[(1092), float32], Tensor[(16, 16, 4), float64], Tensor[(1024), float64]) {
  %157 = cast(%var_10761, dtype="float64") /* ty=Tensor[(1024), float64] */;
  %158 = reshape(%157, newshape=[16, 16, 4]) /* ty=Tensor[(16, 16, 4), float64] */;
  %159 = @func_7852() /* ty=Tensor[(1092), float32] */;
  %160 = @func_8477(%158) /* ty=Tensor[(16, 16, 4), float64] */;
  (%159, %160, %var_10761)
}

def @func_2780(%var_2774: int8, %var_2775: Tensor[(13, 1, 4), int8], %var_2776: Tensor[(1092), float32], %var_2777: Tensor[(300), float32], %var_2778: Tensor[(120), float32], %var_2779: Tensor[(360), float32]) -> (Tensor[(15, 2, 10), bool], Tensor[(1092), float32], Tensor[(300), float32], Tensor[(120), float32], Tensor[(360), float32], Tensor[(7, 12, 13), float32], Tensor[(13, ?, 4), int64]) {
  @func_2772(%var_2774, %var_2775, %var_2776, %var_2777, %var_2778, %var_2779) /* ty=(Tensor[(15, 2, 10), bool], Tensor[(1092), float32], Tensor[(300), float32], Tensor[(120), float32], Tensor[(360), float32], Tensor[(7, 12, 13), float32], Tensor[(13, ?, 4), int64]) */
}

def @func_4687(%var_4661: Tensor[(6, 2, 2), float64]) -> (Tensor[(6, 2, 2), float64], Tensor[(6, 2, 2), float32], Tensor[(300, 1), float64]) {
  %161 = cast(%var_4661, dtype="float64") /* ty=Tensor[(6, 2, 2), float64] */;
  %162 = cast(%var_4661, dtype="float32") /* ty=Tensor[(6, 2, 2), float32] */;
  %163 = @func_4021() /* ty=Tensor[(300, 1), float64] */;
  %164 = cast(%163, dtype="float64") /* ty=Tensor[(300, 1), float64] */;
  %165 = sinh(%161) /* ty=Tensor[(6, 2, 2), float64] */;
  %166 = rsqrt(%162) /* ty=Tensor[(6, 2, 2), float32] */;
  %167 = sigmoid(%164) /* ty=Tensor[(300, 1), float64] */;
  (%165, %166, %167)
}

def @func_6610() -> (Tensor[(300, 1), float64], Tensor[(300, 10), float32]) {
  %173 = fn () -> (Tensor[(300, 1), float64], Tensor[(300, 10), float32]) {
    %168 = @func_6418() /* ty=(Tensor[(300, 10), int64],) */;
    %169 = %168.0;
    %170 = cast(%169, dtype="float32") /* ty=Tensor[(300, 10), float32] */;
    %171 = @func_4021() /* ty=Tensor[(300, 1), float64] */;
    %172 = erf(%170) /* ty=Tensor[(300, 10), float32] */;
    (%171, %172)
  };
  %173() /* ty=(Tensor[(300, 1), float64], Tensor[(300, 10), float32]) */
}

def @func_2851(%var_2848: Tensor[(4, 8, 2), float32], %var_2849: Tensor[(4, 8, 2), float32], %var_2850: Tensor[(360), float32]) -> (Tensor[(4, 8, 2), float32], Tensor[(6, 6, 10), float32], Tensor[(360), float32]) {
  @func_2846(%var_2848, %var_2849, %var_2850) /* ty=(Tensor[(4, 8, 2), float32], Tensor[(6, 6, 10), float32], Tensor[(360), float32]) */
}

def @func_10720() -> (Tensor[(12, 8, 12), float64],) {
  %175 = fn () -> (Tensor[(12, 8, 12), float64],) {
    %174 = @func_10640() /* ty=Tensor[(12, 8, 12), float64] */;
    (%174,)
  };
  %175() /* ty=(Tensor[(12, 8, 12), float64],) */
}

def @func_9941(%var_9930: Tensor[(1092), float32]) -> Tensor[(1092), int64] {
  %176 = @func_5890() /* ty=Tensor[(1092), float32] */;
  %177 = cast(%var_9930, dtype="int64") /* ty=Tensor[(1092), int64] */;
  %178 = shape_of(%176, dtype="int32") /* ty=Tensor[(1), int32] */;
  %179 = cast(%176, dtype="int64") /* ty=Tensor[(1092), int64] */;
  %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?), int64] */;
  add(%179, %180) /* ty=Tensor[(1092), int64] */
}

def @func_11182(%var_11180: Tensor[(1, 9, 5), int64], %var_11181: Tensor[(7, 9, 5), int64]) -> (Tensor[(7, 9, 5), int64],) {
  %184 = fn (%var_11169: Tensor[(1, 9, 5), int64], %var_11170: Tensor[(7, 9, 5), int64]) -> (Tensor[(7, 9, 5), int64],) {
    %181 = cast(%var_11169, dtype="int64") /* ty=Tensor[(1, 9, 5), int64] */;
    %182 = cast(%var_11170, dtype="int64") /* ty=Tensor[(7, 9, 5), int64] */;
    %183 = bitwise_and(%181, %182) /* ty=Tensor[(7, 9, 5), int64] */;
    (%183,)
  };
  %184(%var_11180, %var_11181) /* ty=(Tensor[(7, 9, 5), int64],) */
}

def @func_6918() -> (Tensor[(252), uint8],) {
  %187 = fn () -> (Tensor[(252), uint8],) {
    %185 = @func_5673() /* ty=(Tensor[(252), uint8],) */;
    %186 = %185.0;
    (%186,)
  };
  %187() /* ty=(Tensor[(252), uint8],) */
}

def @func_6934(%var_6929: Tensor[(300, 10), int64]) -> (Tensor[(300, 10), bool],) {
  %188 = @func_6418() /* ty=(Tensor[(300, 10), int64],) */;
  %189 = %188.0;
  %190 = cast(%var_6929, dtype="bool") /* ty=Tensor[(300, 10), bool] */;
  %191 = shape_of(%189, dtype="int32") /* ty=Tensor[(2), int32] */;
  %192 = cast(%189, dtype="bool") /* ty=Tensor[(300, 10), bool] */;
  %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %194 = less_equal(%192, %193) /* ty=Tensor[(300, 10), bool] */;
  (%194,)
}

def @func_9174() -> Tensor[(300, 1092), float64] {
  @func_9172() /* ty=Tensor[(300, 1092), float64] */
}

def @func_5859() -> Tensor[(360), float32] {
  @func_5857() /* ty=Tensor[(360), float32] */
}

def @func_4536(%var_4533: Tensor[(15, 16, 5), float64], %var_4534: Tensor[(320), float32], %var_4535: Tensor[(6, 60), float32]) -> (Tensor[(15, 16, 5), float64], Tensor[(7, 12, 13), float32], Tensor[(1092, 1), float32], Tensor[(8, 5, 8), float32], Tensor[(320), float32], Tensor[(6, 6, 10), float32], Tensor[(6, 60), float32], Tensor[(6, 6, 10), float32]) {
  %210 = fn (%var_4497: Tensor[(15, 16, 5), float64], %var_4516: Tensor[(320), float32], %var_4528: Tensor[(6, 60), float32]) -> (Tensor[(15, 16, 5), float64], Tensor[(7, 12, 13), float32], Tensor[(1092, 1), float32], Tensor[(8, 5, 8), float32], Tensor[(320), float32], Tensor[(6, 6, 10), float32], Tensor[(6, 60), float32], Tensor[(6, 6, 10), float32]) {
    %195 = cast(%var_4497, dtype="float64") /* ty=Tensor[(15, 16, 5), float64] */;
    %196 = cast(meta[relay.Constant][2] /* ty=Tensor[(1092, 1), float32] */, dtype="float32") /* ty=Tensor[(1092, 1), float32] */;
    %197 = reshape(%196, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float32] */;
    %198 = cast(%var_4516, dtype="float32") /* ty=Tensor[(320), float32] */;
    %199 = reshape(%198, newshape=[8, 5, 8]) /* ty=Tensor[(8, 5, 8), float32] */;
    %200 = cast(%var_4528, dtype="float32") /* ty=Tensor[(6, 60), float32] */;
    %201 = reshape(%200, newshape=[6, 6, 10]) /* ty=Tensor[(6, 6, 10), float32] */;
    %202 = @func_782(%201) /* ty=Tensor[(6, 6, 10), float32] */;
    %203 = cast(%202, dtype="float32") /* ty=Tensor[(6, 6, 10), float32] */;
    %204 = reshape(%203, newshape=[360]) /* ty=Tensor[(360), float32] */;
    %205 = @func_4379(%204) /* ty=(Tensor[(6, 6, 10), float32], Tensor[(360), float32], Tensor[(6, 6, 10), float32], Tensor[(8, 2, 7), int8]) */;
    %206 = atanh(%195) /* ty=Tensor[(15, 16, 5), float64] */;
    %207 = @func_314(%197) /* ty=Tensor[(7, 12, 13), float32] */;
    %208 = @func_2511(%199) /* ty=Tensor[(8, 5, 8), float32] */;
    %209 = %205.2;
    (%206, %207, meta[relay.Constant][2] /* ty=Tensor[(1092, 1), float32] */, %208, %var_4516, %202, %var_4528, %209)
  };
  %210(%var_4533, %var_4534, %var_4535) /* ty=(Tensor[(15, 16, 5), float64], Tensor[(7, 12, 13), float32], Tensor[(1092, 1), float32], Tensor[(8, 5, 8), float32], Tensor[(320), float32], Tensor[(6, 6, 10), float32], Tensor[(6, 60), float32], Tensor[(6, 6, 10), float32]) */
}

def @func_10915() -> (Tensor[(252), uint8], Tensor[(1092), float32]) {
  %211 = @func_10344() /* ty=(Tensor[(252), uint8], Tensor[(300, 1092), float64], Tensor[(300, 1), float64], Tensor[(300, 1), float32]) */;
  %212 = @func_5968() /* ty=(Tensor[(1092), float32],) */;
  %213 = %211.0;
  %214 = %212.0;
  (%213, %214)
}

def @func_11258() -> (Tensor[(2, 180), float64],) {
  %215 = @func_8119() /* ty=Tensor[(2, 180), float64] */;
  (%215,)
}

def @func_5113() -> Tensor[(126, 2), float32] {
  %216 = @func_3993() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(300, 1), float32], Tensor[(126, 2), uint8], Tensor[(360), float32]) */;
  %217 = %216.2;
  %218 = cast(%217, dtype="float32") /* ty=Tensor[(126, 2), float32] */;
  asin(%218) /* ty=Tensor[(126, 2), float32] */
}

def @func_4570() -> (Tensor[(1092), float32], int8, Tensor[(252), uint8], Tensor[(360), float32]) {
  %219 = @func_4540() /* ty=(Tensor[(1092), float32],) */;
  %220 = cast(meta[relay.Constant][3] /* ty=Tensor[(252), uint8] */, dtype="uint8") /* ty=Tensor[(252), uint8] */;
  %221 = cast(meta[relay.Constant][3] /* ty=Tensor[(252), uint8] */, dtype="uint8") /* ty=Tensor[(252), uint8] */;
  %222 = cast(meta[relay.Constant][4] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %223 = reshape(%220, newshape=[6, 3, 14]) /* ty=Tensor[(6, 3, 14), uint8] */;
  %224 = reshape(%221, newshape=[6, 3, 14]) /* ty=Tensor[(6, 3, 14), uint8] */;
  %225 = reshape(%222, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %226 = @func_2918(%223, %224, %225) /* ty=(Tensor[(6, 3, 14), uint8], Tensor[(15, 2, 10), bool], int8, Tensor[(52), int8], Tensor[(1092), float32], Tensor[(300, 1), float32], Tensor[(120, 1), float32], Tensor[(360), float32]) */;
  %227 = %219.0;
  %228 = %226.2;
  (%227, %228, meta[relay.Constant][3] /* ty=Tensor[(252), uint8] */, meta[relay.Constant][4] /* ty=Tensor[(360), float32] */)
}

def @func_8080() -> (Tensor[(1092), float32],) {
  %231 = fn () -> (Tensor[(1092), float32],) {
    %229 = @func_5968() /* ty=(Tensor[(1092), float32],) */;
    %230 = %229.0;
    (%230,)
  };
  %231() /* ty=(Tensor[(1092), float32],) */
}

def @func_10605() -> Tensor[(300, 1), float32] {
  %233 = fn () -> Tensor[(300, 1), float32] {
    %232 = @func_3993() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(300, 1), float32], Tensor[(126, 2), uint8], Tensor[(360), float32]) */;
    %232.1
  };
  %233() /* ty=Tensor[(300, 1), float32] */
}

def @func_9588() -> (Tensor[(1092), float32],) {
  %236 = fn () -> (Tensor[(1092), float32],) {
    %234 = @func_7761() /* ty=(Tensor[(1092), float32],) */;
    %235 = %234.0;
    (%235,)
  };
  %236() /* ty=(Tensor[(1092), float32],) */
}

def @func_11342() -> (Tensor[(2, 180), float32], Tensor[(12, 8, 12), float64]) {
  %240 = fn () -> (Tensor[(2, 180), float32], Tensor[(12, 8, 12), float64]) {
    %237 = @func_8574() /* ty=(Tensor[(2, 180), float32],) */;
    %238 = %237.0;
    %239 = @func_8592() /* ty=Tensor[(12, 8, 12), float64] */;
    (%238, %239)
  };
  %240() /* ty=(Tensor[(2, 180), float32], Tensor[(12, 8, 12), float64]) */
}

def @func_4382(%var_4380: Tensor[(360), float32]) -> (Tensor[(6, 6, 10), float32], Tensor[(360), float32], Tensor[(6, 6, 10), float32], Tensor[(8, 2, 7), int8]) {
  @func_4379(%var_4380) /* ty=(Tensor[(6, 6, 10), float32], Tensor[(360), float32], Tensor[(6, 6, 10), float32], Tensor[(8, 2, 7), int8]) */
}

def @func_10546(%var_10544: Tensor[(1092), float32], %var_10545: Tensor[(252), uint8]) -> (Tensor[(300, 10), float64], Tensor[(6, 4), float64], Tensor[(300, ?), float32], Tensor[(1092), float64], Tensor[(1092), float32], Tensor[(252), uint8]) {
  @func_10542(%var_10544, %var_10545) /* ty=(Tensor[(300, 10), float64], Tensor[(6, 4), float64], Tensor[(300, ?), float32], Tensor[(1092), float64], Tensor[(1092), float32], Tensor[(252), uint8]) */
}

def @func_2846(%var_2837: Tensor[(4, 8, 2), float32], %var_2838: Tensor[(4, 8, 2), float32], %var_2843: Tensor[(360), float32]) -> (Tensor[(4, 8, 2), float32], Tensor[(6, 6, 10), float32], Tensor[(360), float32]) {
  %241 = cast(%var_2838, dtype="float32") /* ty=Tensor[(4, 8, 2), float32] */;
  %242 = shape_of(%var_2837, dtype="int32") /* ty=Tensor[(3), int32] */;
  %243 = cast(%var_2837, dtype="float32") /* ty=Tensor[(4, 8, 2), float32] */;
  %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %245 = cast(%var_2843, dtype="float32") /* ty=Tensor[(360), float32] */;
  %246 = reshape(%245, newshape=[6, 6, 10]) /* ty=Tensor[(6, 6, 10), float32] */;
  %247 = power(%243, %244) /* ty=Tensor[(4, 8, 2), float32] */;
  %248 = @func_782(%246) /* ty=Tensor[(6, 6, 10), float32] */;
  (%247, %248, %var_2843)
}

def @func_7028(%var_7027: Tensor[(2, 15, 15), float64]) -> (Tensor[(2, 15, 15), float64],) {
  %251 = fn (%var_7013: Tensor[(2, 15, 15), float64]) -> (Tensor[(2, 15, 15), float64],) {
    %249 = cast(%var_7013, dtype="float64") /* ty=Tensor[(2, 15, 15), float64] */;
    %250 = sin(%249) /* ty=Tensor[(2, 15, 15), float64] */;
    (%250,)
  };
  %251(%var_7027) /* ty=(Tensor[(2, 15, 15), float64],) */
}

def @func_2922(%var_2919: Tensor[(6, 3, 14), uint8], %var_2920: Tensor[(6, 3, 14), uint8], %var_2921: Tensor[(360), float32]) -> (Tensor[(6, 3, 14), uint8], Tensor[(15, 2, 10), bool], int8, Tensor[(52), int8], Tensor[(1092), float32], Tensor[(300, 1), float32], Tensor[(120, 1), float32], Tensor[(360), float32]) {
  %271 = fn (%var_2885: Tensor[(6, 3, 14), uint8], %var_2886: Tensor[(6, 3, 14), uint8], %var_2907: Tensor[(360), float32]) -> (Tensor[(6, 3, 14), uint8], Tensor[(15, 2, 10), bool], int8, Tensor[(52), int8], Tensor[(1092), float32], Tensor[(300, 1), float32], Tensor[(120, 1), float32], Tensor[(360), float32]) {
    %252 = cast(%var_2886, dtype="uint8") /* ty=Tensor[(6, 3, 14), uint8] */;
    %253 = shape_of(%var_2885, dtype="int32") /* ty=Tensor[(3), int32] */;
    %254 = cast(%var_2885, dtype="uint8") /* ty=Tensor[(6, 3, 14), uint8] */;
    %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %256 = cast(meta[relay.Constant][5] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %257 = cast(meta[relay.Constant][6] /* ty=Tensor[(52), int8] */, dtype="int8") /* ty=Tensor[(52), int8] */;
    %258 = cast(meta[relay.Constant][7] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
    %259 = cast(meta[relay.Constant][8] /* ty=Tensor[(300, 1), float32] */, dtype="float32") /* ty=Tensor[(300, 1), float32] */;
    %260 = cast(meta[relay.Constant][9] /* ty=Tensor[(120, 1), float32] */, dtype="float32") /* ty=Tensor[(120, 1), float32] */;
    %261 = cast(%var_2907, dtype="float32") /* ty=Tensor[(360), float32] */;
    %262 = reshape(%256, newshape=[]) /* ty=int8 */;
    %263 = reshape(%257, newshape=[13, 1, 4]) /* ty=Tensor[(13, 1, 4), int8] */;
    %264 = reshape(%258, newshape=[1092]) /* ty=Tensor[(1092), float32] */;
    %265 = reshape(%259, newshape=[300]) /* ty=Tensor[(300), float32] */;
    %266 = reshape(%260, newshape=[120]) /* ty=Tensor[(120), float32] */;
    %267 = reshape(%261, newshape=[360]) /* ty=Tensor[(360), float32] */;
    %268 = @func_2772(%262, %263, %264, %265, %266, %267) /* ty=(Tensor[(15, 2, 10), bool], Tensor[(1092), float32], Tensor[(300), float32], Tensor[(120), float32], Tensor[(360), float32], Tensor[(7, 12, 13), float32], Tensor[(13, ?, 4), int64]) */;
    %269 = multiply(%254, %255) /* ty=Tensor[(6, 3, 14), uint8] */;
    %270 = %268.0;
    (%269, %270, meta[relay.Constant][5] /* ty=int8 */, meta[relay.Constant][6] /* ty=Tensor[(52), int8] */, meta[relay.Constant][7] /* ty=Tensor[(1092), float32] */, meta[relay.Constant][8] /* ty=Tensor[(300, 1), float32] */, meta[relay.Constant][9] /* ty=Tensor[(120, 1), float32] */, %var_2907)
  };
  %271(%var_2919, %var_2920, %var_2921) /* ty=(Tensor[(6, 3, 14), uint8], Tensor[(15, 2, 10), bool], int8, Tensor[(52), int8], Tensor[(1092), float32], Tensor[(300, 1), float32], Tensor[(120, 1), float32], Tensor[(360), float32]) */
}

def @func_10917() -> (Tensor[(252), uint8], Tensor[(1092), float32]) {
  @func_10915() /* ty=(Tensor[(252), uint8], Tensor[(1092), float32]) */
}

def @func_4594(%var_4593: Tensor[(30), int16]) -> (Tensor[(1092), float32], Tensor[(?, 10, 3), float64], Tensor[(30), int16]) {
  %280 = fn (%var_4581: Tensor[(30), int16]) -> (Tensor[(1092), float32], Tensor[(?, 10, 3), float64], Tensor[(30), int16]) {
    %272 = @func_4540() /* ty=(Tensor[(1092), float32],) */;
    %273 = cast(%var_4581, dtype="int16") /* ty=Tensor[(30), int16] */;
    %274 = cast(%var_4581, dtype="int16") /* ty=Tensor[(30), int16] */;
    %275 = reshape(%273, newshape=[1, 10, 3]) /* ty=Tensor[(1, 10, 3), int16] */;
    %276 = reshape(%274, newshape=[1, 10, 3]) /* ty=Tensor[(1, 10, 3), int16] */;
    %277 = @func_3285(%275, %276) /* ty=(Tensor[(8, 5, 8), float32], Tensor[(320), float32], Tensor[(?, 10, 3), float64]) */;
    %278 = %272.0;
    %279 = %277.2;
    (%278, %279, %var_4581)
  };
  %280(%var_4593) /* ty=(Tensor[(1092), float32], Tensor[(?, 10, 3), float64], Tensor[(30), int16]) */
}

def @func_10460(%var_10459: Tensor[(66), float32]) -> (Tensor[(300, 10), float32], Tensor[(1, 6, 11), float32], Tensor[(66), float32], Tensor[(300, 1), float64]) {
  %298 = fn (%var_10440: Tensor[(66), float32]) -> (Tensor[(300, 10), float32], Tensor[(1, 6, 11), float32], Tensor[(66), float32], Tensor[(300, 1), float64]) {
    %281 = @func_9399() /* ty=(Tensor[(300, 10), int64], Tensor[(252), uint8]) */;
    %282 = %281.0;
    %283 = @func_8740() /* ty=(Tensor[(300, 10), float32], Tensor[(1260), int64], Tensor[(300, 1092), float64], Tensor[(9, 10, 14), bool], Tensor[(300, 10), int64], Tensor[(360), float32], Tensor[(6, 60), float32]) */;
    %284 = %283.4;
    %285 = cast(%284, dtype="float32") /* ty=Tensor[(300, 10), float32] */;
    %286 = sigmoid(%285) /* ty=Tensor[(300, 10), float32] */;
    %287 = cast(%286, dtype="float32") /* ty=Tensor[(300, 10), float32] */;
    %288 = shape_of(%282, dtype="int32") /* ty=Tensor[(2), int32] */;
    %289 = cast(%282, dtype="float32") /* ty=Tensor[(300, 10), float32] */;
    %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %291 = cast(%var_10440, dtype="float32") /* ty=Tensor[(66), float32] */;
    %292 = reshape(%291, newshape=[1, 6, 11]) /* ty=Tensor[(1, 6, 11), float32] */;
    %293 = @func_9718(%292) /* ty=(Tensor[(1, 6, 11), float32],) */;
    %294 = @func_7313() /* ty=(Tensor[(300, 1), float64],) */;
    %295 = divide(%289, %290) /* ty=Tensor[(300, 10), float32] */;
    %296 = %293.0;
    %297 = %294.0;
    (%295, %296, %var_10440, %297)
  };
  %298(%var_10459) /* ty=(Tensor[(300, 10), float32], Tensor[(1, 6, 11), float32], Tensor[(66), float32], Tensor[(300, 1), float64]) */
}

def @func_10806() -> Tensor[(300, 1092), float64] {
  @func_9172() /* ty=Tensor[(300, 1092), float64] */
}

def @func_5891() -> Tensor[(1092), float32] {
  %300 = fn () -> Tensor[(1092), float32] {
    %299 = @func_4540() /* ty=(Tensor[(1092), float32],) */;
    %299.0
  };
  %300() /* ty=Tensor[(1092), float32] */
}

def @func_9491(%var_9490: Tensor[(14, 12, 9), float32]) -> (Tensor[(14, 12, 9), bool], Tensor[(300, 1), float64], Tensor[(6, 60), float32]) {
  %308 = fn (%var_9463: Tensor[(14, 12, 9), float32]) -> (Tensor[(14, 12, 9), bool], Tensor[(300, 1), float64], Tensor[(6, 60), float32]) {
    %301 = cast(meta[relay.Constant][10] /* ty=Tensor[(14, 12, 1), float32] */, dtype="bool") /* ty=Tensor[(14, 12, 1), bool] */;
    %302 = cast(%var_9463, dtype="bool") /* ty=Tensor[(14, 12, 9), bool] */;
    %303 = @func_8973() /* ty=(Tensor[(300, 1), float64],) */;
    %304 = @func_8740() /* ty=(Tensor[(300, 10), float32], Tensor[(1260), int64], Tensor[(300, 1092), float64], Tensor[(9, 10, 14), bool], Tensor[(300, 10), int64], Tensor[(360), float32], Tensor[(6, 60), float32]) */;
    %305 = greater(%301, %302) /* ty=Tensor[(14, 12, 9), bool] */;
    %306 = %303.0;
    %307 = %304.6;
    (%305, %306, %307)
  };
  %308(%var_9490) /* ty=(Tensor[(14, 12, 9), bool], Tensor[(300, 1), float64], Tensor[(6, 60), float32]) */
}

def @func_6738(%var_6737: Tensor[(126, 2), float32]) -> (Tensor[(126, 2), uint64],) {
  %317 = fn (%var_6731: Tensor[(126, 2), float32]) -> (Tensor[(126, 2), uint64],) {
    %309 = @func_5113() /* ty=Tensor[(126, 2), float32] */;
    %310 = cast(%309, dtype="float32") /* ty=Tensor[(126, 2), float32] */;
    %311 = sigmoid(%310) /* ty=Tensor[(126, 2), float32] */;
    %312 = cast(%var_6731, dtype="uint64") /* ty=Tensor[(126, 2), uint64] */;
    %313 = shape_of(%311, dtype="int32") /* ty=Tensor[(2), int32] */;
    %314 = cast(%311, dtype="uint64") /* ty=Tensor[(126, 2), uint64] */;
    %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %316 = left_shift(%314, %315) /* ty=Tensor[(126, 2), uint64] */;
    (%316,)
  };
  %317(%var_6737) /* ty=(Tensor[(126, 2), uint64],) */
}

def @func_7758() -> (Tensor[(4, 12, 10), float32],) {
  @func_7756() /* ty=(Tensor[(4, 12, 10), float32],) */
}

def @func_5445(%var_5441: Tensor[(546, 2), float32], %var_5442: Tensor[(120), float32], %var_5443: Tensor[(546, 2), float32], %var_5444: Tensor[(30), int16]) -> (Tensor[(360), float32], Tensor[(360), float32], Tensor[(10, 30), float32], Tensor[(120), float32], Tensor[(546, 2), float64], Tensor[(546, 2), bool], Tensor[(7, 12, 13), float32], Tensor[(?, 10, 3), float64], Tensor[(30), int16]) {
  %349 = fn (%var_5398: Tensor[(546, 2), float32], %var_5400: Tensor[(120), float32], %var_5410: Tensor[(546, 2), float32], %var_5432: Tensor[(30), int16]) -> (Tensor[(360), float32], Tensor[(360), float32], Tensor[(10, 30), float32], Tensor[(120), float32], Tensor[(546, 2), float64], Tensor[(546, 2), bool], Tensor[(7, 12, 13), float32], Tensor[(?, 10, 3), float64], Tensor[(30), int16]) {
    %318 = @func_4339() /* ty=(Tensor[(360), float32],) */;
    %319 = cast(%var_5398, dtype="float32") /* ty=Tensor[(546, 2), float32] */;
    %320 = cast(meta[relay.Constant][11] /* ty=Tensor[(10, 30), float32] */, dtype="float32") /* ty=Tensor[(10, 30), float32] */;
    %321 = cast(%var_5400, dtype="float32") /* ty=Tensor[(120), float32] */;
    %322 = %318.0;
    %323 = cast(%322, dtype="float32") /* ty=Tensor[(360), float32] */;
    %324 = reshape(%319, newshape=[1092]) /* ty=Tensor[(1092), float32] */;
    %325 = reshape(%320, newshape=[15, 2, 10]) /* ty=Tensor[(15, 2, 10), float32] */;
    %326 = reshape(%321, newshape=[120]) /* ty=Tensor[(120), float32] */;
    %327 = reshape(%323, newshape=[360]) /* ty=Tensor[(360), float32] */;
    %328 = @func_1657(%324, %325, %326, %327) /* ty=(Tensor[(1092), float32], Tensor[(15, 2, 10), bool], Tensor[(7, 12, 13), float32], Tensor[(120), float32], Tensor[(6, 6, 10), float32], Tensor[(360), float32]) */;
    %329 = cast(%var_5410, dtype="float64") /* ty=Tensor[(546, 2), float64] */;
    %330 = shape_of(%var_5398, dtype="int32") /* ty=Tensor[(2), int32] */;
    %331 = cast(%var_5398, dtype="float64") /* ty=Tensor[(546, 2), float64] */;
    %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %333 = cast(%var_5410, dtype="bool") /* ty=Tensor[(546, 2), bool] */;
    %334 = shape_of(%var_5398, dtype="int32") /* ty=Tensor[(2), int32] */;
    %335 = cast(%var_5398, dtype="bool") /* ty=Tensor[(546, 2), bool] */;
    %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %337 = cast(%var_5410, dtype="float32") /* ty=Tensor[(546, 2), float32] */;
    %338 = reshape(%337, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float32] */;
    %339 = cast(%var_5432, dtype="int16") /* ty=Tensor[(30), int16] */;
    %340 = cast(%var_5432, dtype="int16") /* ty=Tensor[(30), int16] */;
    %341 = reshape(%339, newshape=[1, 10, 3]) /* ty=Tensor[(1, 10, 3), int16] */;
    %342 = reshape(%340, newshape=[1, 10, 3]) /* ty=Tensor[(1, 10, 3), int16] */;
    %343 = @func_3285(%341, %342) /* ty=(Tensor[(8, 5, 8), float32], Tensor[(320), float32], Tensor[(?, 10, 3), float64]) */;
    %344 = %328.5;
    %345 = mod(%331, %332) /* ty=Tensor[(546, 2), float64] */;
    %346 = logical_or(%335, %336) /* ty=Tensor[(546, 2), bool] */;
    %347 = @func_314(%338) /* ty=Tensor[(7, 12, 13), float32] */;
    %348 = %343.2;
    (%322, %344, meta[relay.Constant][11] /* ty=Tensor[(10, 30), float32] */, %var_5400, %345, %346, %347, %348, %var_5432)
  };
  %349(%var_5441, %var_5442, %var_5443, %var_5444) /* ty=(Tensor[(360), float32], Tensor[(360), float32], Tensor[(10, 30), float32], Tensor[(120), float32], Tensor[(546, 2), float64], Tensor[(546, 2), bool], Tensor[(7, 12, 13), float32], Tensor[(?, 10, 3), float64], Tensor[(30), int16]) */
}

def @func_5186(%var_5184: Tensor[(9, 10, 14), int64]) -> (Tensor[(9, 10, 14), int64], Tensor[(9, 10, 14), float32], Tensor[(9, 10, 14), float64], Tensor[(15, 14, 11), uint32], Tensor[(2310), float64]) {
  @func_5183(%var_5184) /* ty=(Tensor[(9, 10, 14), int64], Tensor[(9, 10, 14), float32], Tensor[(9, 10, 14), float64], Tensor[(15, 14, 11), uint32], Tensor[(2310), float64]) */
}

def @func_8089() -> (Tensor[(360), float32], Tensor[(1092), float32]) {
  %350 = @func_6177() /* ty=(Tensor[(1092), float32], Tensor[(9, 10, 14), float64], Tensor[(1260), int64], Tensor[(1092), float32], Tensor[(1092), float32], Tensor[(360), float32], Tensor[(120), float32], Tensor[(30), int16], Tensor[(360), float32]) */;
  %351 = @func_5857() /* ty=Tensor[(360), float32] */;
  %352 = %350.0;
  (%351, %352)
}

def @func_3994() -> (Tensor[(13, 1, 10), float32], Tensor[(300, 1), float32], Tensor[(126, 2), uint8], Tensor[(360), float32]) {
  %363 = fn () -> (Tensor[(13, 1, 10), float32], Tensor[(300, 1), float32], Tensor[(126, 2), uint8], Tensor[(360), float32]) {
    %353 = cast(meta[relay.Constant][12] /* ty=Tensor[(13, 1, 10), float32] */, dtype="float32") /* ty=Tensor[(13, 1, 10), float32] */;
    %354 = cast(meta[relay.Constant][13] /* ty=Tensor[(126, 2), uint8] */, dtype="uint8") /* ty=Tensor[(126, 2), uint8] */;
    %355 = cast(meta[relay.Constant][13] /* ty=Tensor[(126, 2), uint8] */, dtype="uint8") /* ty=Tensor[(126, 2), uint8] */;
    %356 = cast(meta[relay.Constant][14] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
    %357 = reshape(%354, newshape=[6, 3, 14]) /* ty=Tensor[(6, 3, 14), uint8] */;
    %358 = reshape(%355, newshape=[6, 3, 14]) /* ty=Tensor[(6, 3, 14), uint8] */;
    %359 = reshape(%356, newshape=[360]) /* ty=Tensor[(360), float32] */;
    %360 = @func_2918(%357, %358, %359) /* ty=(Tensor[(6, 3, 14), uint8], Tensor[(15, 2, 10), bool], int8, Tensor[(52), int8], Tensor[(1092), float32], Tensor[(300, 1), float32], Tensor[(120, 1), float32], Tensor[(360), float32]) */;
    %361 = cos(%353) /* ty=Tensor[(13, 1, 10), float32] */;
    %362 = %360.5;
    (%361, %362, meta[relay.Constant][13] /* ty=Tensor[(126, 2), uint8] */, meta[relay.Constant][14] /* ty=Tensor[(360), float32] */)
  };
  %363() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(300, 1), float32], Tensor[(126, 2), uint8], Tensor[(360), float32]) */
}

def @func_9172() -> Tensor[(300, 1092), float64] {
  %364 = @func_8740() /* ty=(Tensor[(300, 10), float32], Tensor[(1260), int64], Tensor[(300, 1092), float64], Tensor[(9, 10, 14), bool], Tensor[(300, 10), int64], Tensor[(360), float32], Tensor[(6, 60), float32]) */;
  %364.2
}

def @func_4572() -> (Tensor[(1092), float32], int8, Tensor[(252), uint8], Tensor[(360), float32]) {
  @func_4570() /* ty=(Tensor[(1092), float32], int8, Tensor[(252), uint8], Tensor[(360), float32]) */
}

def @func_9075(%var_9073: Tensor[(252), uint8]) -> (Tensor[(1092), float32], Tensor[(252), int16]) {
  @func_9072(%var_9073) /* ty=(Tensor[(1092), float32], Tensor[(252), int16]) */
}

def @func_7440(%var_7420: Tensor[(1260), int64]) -> (Tensor[(300, 10), uint8], Tensor[(9, 10, 14), float32], Tensor[(1260), int64]) {
  %365 = @func_6025() /* ty=Tensor[(300, 10), int64] */;
  %366 = cast(meta[relay.Constant][15] /* ty=Tensor[(300, 10), int64] */, dtype="uint8") /* ty=Tensor[(300, 10), uint8] */;
  %367 = shape_of(%365, dtype="int32") /* ty=Tensor[(2), int32] */;
  %368 = cast(%365, dtype="uint8") /* ty=Tensor[(300, 10), uint8] */;
  %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %370 = cast(%var_7420, dtype="int64") /* ty=Tensor[(1260), int64] */;
  %371 = reshape(%370, newshape=[9, 10, 14]) /* ty=Tensor[(9, 10, 14), int64] */;
  %372 = @func_5183(%371) /* ty=(Tensor[(9, 10, 14), int64], Tensor[(9, 10, 14), float32], Tensor[(9, 10, 14), float64], Tensor[(15, 14, 11), uint32], Tensor[(2310), float64]) */;
  %373 = logical_xor(%368, %369) /* ty=Tensor[(300, 10), uint8] */;
  %374 = %372.1;
  (%373, %374, %var_7420)
}

def @func_7125(%var_7123: Tensor[(8, 2, 7), int8]) -> (Tensor[(360, 1), float32], Tensor[(8, 2, 7), float32], Tensor[(2, 180), float32], Tensor[(120, 252), float64]) {
  @func_7122(%var_7123) /* ty=(Tensor[(360, 1), float32], Tensor[(8, 2, 7), float32], Tensor[(2, 180), float32], Tensor[(120, 252), float64]) */
}

def @func_8417() -> (Tensor[(1092), float32], Tensor[(2, 180), float64]) {
  %375 = @func_4540() /* ty=(Tensor[(1092), float32],) */;
  %376 = @func_4235() /* ty=(Tensor[(2, 180), float64], Tensor[(2, 180), float64]) */;
  %377 = %375.0;
  %378 = %376.0;
  (%377, %378)
}

def @func_5937() -> (Tensor[(300, 16), bool], Tensor[(300, 16), float32]) {
  %379 = @func_4949() /* ty=Tensor[(300, 1), float64] */;
  %380 = cast(%379, dtype="bool") /* ty=Tensor[(300, 1), bool] */;
  %381 = cast(meta[relay.Constant][16] /* ty=Tensor[(300, 16), float64] */, dtype="bool") /* ty=Tensor[(300, 16), bool] */;
  %382 = cast(meta[relay.Constant][16] /* ty=Tensor[(300, 16), float64] */, dtype="float32") /* ty=Tensor[(300, 16), float32] */;
  %383 = cast(%379, dtype="float32") /* ty=Tensor[(300, 1), float32] */;
  %384 = not_equal(%380, %381) /* ty=Tensor[(300, 16), bool] */;
  %385 = floor_mod(%382, %383) /* ty=Tensor[(300, 16), float32] */;
  (%384, %385)
}

def @func_10797() -> (Tensor[(1092), float32],) {
  %386 = @func_6113() /* ty=(Tensor[(1092), float32], Tensor[(252), uint8]) */;
  %387 = %386.0;
  (%387,)
}

def @func_8419() -> (Tensor[(1092), float32], Tensor[(2, 180), float64]) {
  @func_8417() /* ty=(Tensor[(1092), float32], Tensor[(2, 180), float64]) */
}

def @func_7231(%var_7229: Tensor[(360), float32], %var_7230: Tensor[(1, 2310), uint32]) -> (Tensor[(300, 1), float64], Tensor[(360), float32], Tensor[(252), uint8], Tensor[(360), float32], Tensor[(15, 14, 11), uint32], Tensor[(1, 2310), uint32], Tensor[(252), uint8]) {
  %404 = fn (%var_7217: Tensor[(360), float32], %var_7222: Tensor[(1, 2310), uint32]) -> (Tensor[(300, 1), float64], Tensor[(360), float32], Tensor[(252), uint8], Tensor[(360), float32], Tensor[(15, 14, 11), uint32], Tensor[(1, 2310), uint32], Tensor[(252), uint8]) {
    %388 = cast(meta[relay.Constant][17] /* ty=Tensor[(252), uint8] */, dtype="uint8") /* ty=Tensor[(252), uint8] */;
    %389 = cast(meta[relay.Constant][17] /* ty=Tensor[(252), uint8] */, dtype="uint8") /* ty=Tensor[(252), uint8] */;
    %390 = cast(%var_7217, dtype="float32") /* ty=Tensor[(360), float32] */;
    %391 = reshape(%388, newshape=[6, 3, 14]) /* ty=Tensor[(6, 3, 14), uint8] */;
    %392 = reshape(%389, newshape=[6, 3, 14]) /* ty=Tensor[(6, 3, 14), uint8] */;
    %393 = reshape(%390, newshape=[360]) /* ty=Tensor[(360), float32] */;
    %394 = @func_2918(%391, %392, %393) /* ty=(Tensor[(6, 3, 14), uint8], Tensor[(15, 2, 10), bool], int8, Tensor[(52), int8], Tensor[(1092), float32], Tensor[(300, 1), float32], Tensor[(120, 1), float32], Tensor[(360), float32]) */;
    %395 = cast(%var_7222, dtype="uint32") /* ty=Tensor[(1, 2310), uint32] */;
    %396 = cast(%var_7222, dtype="uint32") /* ty=Tensor[(1, 2310), uint32] */;
    %397 = reshape(%395, newshape=[15, 14, 11]) /* ty=Tensor[(15, 14, 11), uint32] */;
    %398 = reshape(%396, newshape=[15, 14, 11]) /* ty=Tensor[(15, 14, 11), uint32] */;
    %399 = @func_6917() /* ty=(Tensor[(252), uint8],) */;
    %400 = @func_4021() /* ty=Tensor[(300, 1), float64] */;
    %401 = %394.7;
    %402 = @func_3365(%397, %398) /* ty=Tensor[(15, 14, 11), uint32] */;
    %403 = %399.0;
    (%400, %401, meta[relay.Constant][17] /* ty=Tensor[(252), uint8] */, %var_7217, %402, %var_7222, %403)
  };
  %404(%var_7229, %var_7230) /* ty=(Tensor[(300, 1), float64], Tensor[(360), float32], Tensor[(252), uint8], Tensor[(360), float32], Tensor[(15, 14, 11), uint32], Tensor[(1, 2310), uint32], Tensor[(252), uint8]) */
}

def @func_4690(%var_4688: Tensor[(6, 2, 2), float64]) -> (Tensor[(6, 2, 2), float64], Tensor[(6, 2, 2), float32], Tensor[(300, 1), float64]) {
  @func_4687(%var_4688) /* ty=(Tensor[(6, 2, 2), float64], Tensor[(6, 2, 2), float32], Tensor[(300, 1), float64]) */
}

def @func_8871() -> (Tensor[(1092), float32],) {
  %407 = fn () -> (Tensor[(1092), float32],) {
    %405 = @func_8079() /* ty=(Tensor[(1092), float32],) */;
    %406 = %405.0;
    (%406,)
  };
  %407() /* ty=(Tensor[(1092), float32],) */
}

def @func_4451(%var_4447: Tensor[(16, 8, 9), uint8], %var_4448: Tensor[(16, 8, 9), uint8], %var_4449: Tensor[(1092), float32], %var_4450: Tensor[(64), float32]) -> (Tensor[(16, 8, 9), uint8], Tensor[(1092), float32], Tensor[(360), float32], Tensor[(360), float32], Tensor[(7, 12, 13), float32], Tensor[(2, 180), float64], Tensor[(6, 6, 10), float32], Tensor[(64), float32], Tensor[(8, 5, 8), float32], Tensor[(320), float32], Tensor[(7, 12, 13), float64]) {
  %438 = fn (%var_4384: Tensor[(16, 8, 9), uint8], %var_4385: Tensor[(16, 8, 9), uint8], %var_4394: Tensor[(1092), float32], %var_4431: Tensor[(64), float32]) -> (Tensor[(16, 8, 9), uint8], Tensor[(1092), float32], Tensor[(360), float32], Tensor[(360), float32], Tensor[(7, 12, 13), float32], Tensor[(2, 180), float64], Tensor[(6, 6, 10), float32], Tensor[(64), float32], Tensor[(8, 5, 8), float32], Tensor[(320), float32], Tensor[(7, 12, 13), float64]) {
    %408 = cast(%var_4385, dtype="uint8") /* ty=Tensor[(16, 8, 9), uint8] */;
    %409 = shape_of(%var_4384, dtype="int32") /* ty=Tensor[(3), int32] */;
    %410 = cast(%var_4384, dtype="uint8") /* ty=Tensor[(16, 8, 9), uint8] */;
    %411 = dyn.reshape(%408, %409, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %412 = @func_4339() /* ty=(Tensor[(360), float32],) */;
    %413 = @func_4115() /* ty=(Tensor[(360), float32],) */;
    %414 = cast(%var_4394, dtype="float32") /* ty=Tensor[(1092), float32] */;
    %415 = reshape(%414, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float32] */;
    %416 = @func_314(%415) /* ty=Tensor[(7, 12, 13), float32] */;
    %417 = cast(%416, dtype="float32") /* ty=Tensor[(7, 12, 13), float32] */;
    %418 = reshape(%417, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float32] */;
    %419 = @func_4235() /* ty=(Tensor[(2, 180), float64], Tensor[(2, 180), float64]) */;
    %420 = cast(%var_4431, dtype="float32") /* ty=Tensor[(64), float32] */;
    %421 = cast(%var_4431, dtype="float32") /* ty=Tensor[(64), float32] */;
    %422 = %413.0;
    %423 = cast(%422, dtype="float32") /* ty=Tensor[(360), float32] */;
    %424 = reshape(%420, newshape=[4, 8, 2]) /* ty=Tensor[(4, 8, 2), float32] */;
    %425 = reshape(%421, newshape=[4, 8, 2]) /* ty=Tensor[(4, 8, 2), float32] */;
    %426 = reshape(%423, newshape=[360]) /* ty=Tensor[(360), float32] */;
    %427 = @func_2846(%424, %425, %426) /* ty=(Tensor[(4, 8, 2), float32], Tensor[(6, 6, 10), float32], Tensor[(360), float32]) */;
    %428 = cast(meta[relay.Constant][18] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
    %429 = reshape(%428, newshape=[8, 5, 8]) /* ty=Tensor[(8, 5, 8), float32] */;
    %430 = cast(%416, dtype="float64") /* ty=Tensor[(7, 12, 13), float64] */;
    %431 = left_shift(%410, %411) /* ty=Tensor[(16, 8, 9), uint8] */;
    %432 = %412.0;
    %433 = @func_314(%418) /* ty=Tensor[(7, 12, 13), float32] */;
    %434 = %419.0;
    %435 = %427.1;
    %436 = @func_2511(%429) /* ty=Tensor[(8, 5, 8), float32] */;
    %437 = acosh(%430) /* ty=Tensor[(7, 12, 13), float64] */;
    (%431, %var_4394, %432, %422, %433, %434, %435, %var_4431, %436, meta[relay.Constant][18] /* ty=Tensor[(320), float32] */, %437)
  };
  %438(%var_4447, %var_4448, %var_4449, %var_4450) /* ty=(Tensor[(16, 8, 9), uint8], Tensor[(1092), float32], Tensor[(360), float32], Tensor[(360), float32], Tensor[(7, 12, 13), float32], Tensor[(2, 180), float64], Tensor[(6, 6, 10), float32], Tensor[(64), float32], Tensor[(8, 5, 8), float32], Tensor[(320), float32], Tensor[(7, 12, 13), float64]) */
}

def @func_4117() -> (Tensor[(360), float32],) {
  @func_4115() /* ty=(Tensor[(360), float32],) */
}

def @func_9347(%var_9346: Tensor[(9, 16, 6), float64]) -> Tensor[(9, 16, 6), float64] {
  %440 = fn (%var_9326: Tensor[(9, 16, 6), float64]) -> Tensor[(9, 16, 6), float64] {
    %439 = cast(%var_9326, dtype="float64") /* ty=Tensor[(9, 16, 6), float64] */;
    log(%439) /* ty=Tensor[(9, 16, 6), float64] */
  };
  %440(%var_9346) /* ty=Tensor[(9, 16, 6), float64] */
}

def @func_9835(%var_9832: int64, %var_9833: Tensor[(1, 8, 5), int64], %var_9834: Tensor[(1152), uint8]) -> (Tensor[(1, 8, 5), int64], Tensor[(1092), float32], Tensor[(8, 5, 8), float32], Tensor[(1, 8, 5), float64], Tensor[(1, 1260), int64], Tensor[(1152), uint8], Tensor[(64), float32], Tensor[(1260), int64], Tensor[(300, 1), float64]) {
  %459 = fn (%var_9740: int64, %var_9741: Tensor[(1, 8, 5), int64], %var_9804: Tensor[(1152), uint8]) -> (Tensor[(1, 8, 5), int64], Tensor[(1092), float32], Tensor[(8, 5, 8), float32], Tensor[(1, 8, 5), float64], Tensor[(1, 1260), int64], Tensor[(1152), uint8], Tensor[(64), float32], Tensor[(1260), int64], Tensor[(300, 1), float64]) {
    %441 = cast(%var_9740, dtype="int64") /* ty=int64 */;
    %442 = cast(%var_9741, dtype="int64") /* ty=Tensor[(1, 8, 5), int64] */;
    %443 = @func_8943() /* ty=(Tensor[(1092), float32],) */;
    %444 = @func_9139() /* ty=(Tensor[(2, 180), float32], Tensor[(8, 5, 8), float32], Tensor[(320), float32]) */;
    %445 = cast(%var_9741, dtype="float64") /* ty=Tensor[(1, 8, 5), float64] */;
    %446 = cast(%var_9804, dtype="uint8") /* ty=Tensor[(1152), uint8] */;
    %447 = cast(meta[relay.Constant][19] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
    %448 = cast(meta[relay.Constant][20] /* ty=Tensor[(1260), int64] */, dtype="int64") /* ty=Tensor[(1260), int64] */;
    %449 = reshape(%446, newshape=[1152]) /* ty=Tensor[(1152), uint8] */;
    %450 = reshape(%447, newshape=[64]) /* ty=Tensor[(64), float32] */;
    %451 = reshape(%448, newshape=[1, 1260]) /* ty=Tensor[(1, 1260), int64] */;
    %452 = @func_7568(%449, %450, %451) /* ty=(Tensor[(8, 5, 8), float32], Tensor[(1152), uint8], Tensor[(182, 6), float32], Tensor[(2, 180), float64], Tensor[(300, 64), uint64], Tensor[(2310), float64], Tensor[(1, 1260), int64]) */;
    %453 = bitwise_and(%441, %442) /* ty=Tensor[(1, 8, 5), int64] */;
    %454 = %443.0;
    %455 = %444.1;
    %456 = asin(%445) /* ty=Tensor[(1, 8, 5), float64] */;
    %457 = %452.6;
    %458 = @func_4949() /* ty=Tensor[(300, 1), float64] */;
    (%453, %454, %455, %456, %457, %var_9804, meta[relay.Constant][19] /* ty=Tensor[(64), float32] */, meta[relay.Constant][20] /* ty=Tensor[(1260), int64] */, %458)
  };
  %459(%var_9832, %var_9833, %var_9834) /* ty=(Tensor[(1, 8, 5), int64], Tensor[(1092), float32], Tensor[(8, 5, 8), float32], Tensor[(1, 8, 5), float64], Tensor[(1, 1260), int64], Tensor[(1152), uint8], Tensor[(64), float32], Tensor[(1260), int64], Tensor[(300, 1), float64]) */
}

def @func_7573(%var_7570: Tensor[(1152), uint8], %var_7571: Tensor[(64), float32], %var_7572: Tensor[(1, 1260), int64]) -> (Tensor[(8, 5, 8), float32], Tensor[(1152), uint8], Tensor[(182, 6), float32], Tensor[(2, 180), float64], Tensor[(300, 64), uint64], Tensor[(2310), float64], Tensor[(1, 1260), int64]) {
  @func_7568(%var_7570, %var_7571, %var_7572) /* ty=(Tensor[(8, 5, 8), float32], Tensor[(1152), uint8], Tensor[(182, 6), float32], Tensor[(2, 180), float64], Tensor[(300, 64), uint64], Tensor[(2310), float64], Tensor[(1, 1260), int64]) */
}

def @func_4341() -> (Tensor[(360), float32],) {
  @func_4339() /* ty=(Tensor[(360), float32],) */
}

def @func_784(%var_783: Tensor[(6, 6, 10), float32]) -> Tensor[(6, 6, 10), float32] {
  %461 = fn (%var_777: Tensor[(6, 6, 10), float32]) -> Tensor[(6, 6, 10), float32] {
    %460 = cast(%var_777, dtype="float32") /* ty=Tensor[(6, 6, 10), float32] */;
    acosh(%460) /* ty=Tensor[(6, 6, 10), float32] */
  };
  %461(%var_783) /* ty=Tensor[(6, 6, 10), float32] */
}

def @func_8392() -> (Tensor[(252), uint8], Tensor[(300, 10), int64]) {
  %465 = fn () -> (Tensor[(252), uint8], Tensor[(300, 10), int64]) {
    %462 = @func_6418() /* ty=(Tensor[(300, 10), int64],) */;
    %463 = @func_4977() /* ty=Tensor[(252), uint8] */;
    %464 = %462.0;
    (%463, %464)
  };
  %465() /* ty=(Tensor[(252), uint8], Tensor[(300, 10), int64]) */
}

def @func_7756() -> (Tensor[(4, 12, 10), float32],) {
  %466 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 12, 10), float32] */, dtype="float32") /* ty=Tensor[(4, 12, 10), float32] */;
  %467 = exp(%466) /* ty=Tensor[(4, 12, 10), float32] */;
  (%467,)
}

def @func_6629() -> (Tensor[(300, 10), int64],) {
  %468 = @func_6025() /* ty=Tensor[(300, 10), int64] */;
  (%468,)
}

def @func_2511(%var_2481: Tensor[(8, 5, 8), float32]) -> Tensor[(8, 5, 8), float32] {
  %469 = cast(%var_2481, dtype="float32") /* ty=Tensor[(8, 5, 8), float32] */;
  sinh(%469) /* ty=Tensor[(8, 5, 8), float32] */
}

def @func_8486() -> Tensor[(252), uint8] {
  %471 = fn () -> Tensor[(252), uint8] {
    %470 = @func_6113() /* ty=(Tensor[(1092), float32], Tensor[(252), uint8]) */;
    %470.1
  };
  %471() /* ty=Tensor[(252), uint8] */
}

def @func_10071(%var_10022: Tensor[(300, 1092), float64], %var_10058: Tensor[(30), int16]) -> (Tensor[(8, 5, 8), float32], Tensor[(30), int16], Tensor[(13, 1, 10), float32], Tensor[(300, 1092), float32]) {
  %472 = cast(%var_10058, dtype="int16") /* ty=Tensor[(30), int16] */;
  %473 = cast(%var_10058, dtype="int16") /* ty=Tensor[(30), int16] */;
  %474 = reshape(%472, newshape=[1, 10, 3]) /* ty=Tensor[(1, 10, 3), int16] */;
  %475 = reshape(%473, newshape=[1, 10, 3]) /* ty=Tensor[(1, 10, 3), int16] */;
  %476 = @func_3285(%474, %475) /* ty=(Tensor[(8, 5, 8), float32], Tensor[(320), float32], Tensor[(?, 10, 3), float64]) */;
  %477 = @func_4181() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(2, 180), float32]) */;
  %478 = @func_9172() /* ty=Tensor[(300, 1092), float64] */;
  %479 = cast(%var_10022, dtype="int16") /* ty=Tensor[(300, 1092), int16] */;
  %480 = shape_of(%478, dtype="int32") /* ty=Tensor[(2), int32] */;
  %481 = cast(%478, dtype="int16") /* ty=Tensor[(300, 1092), int16] */;
  %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %483 = subtract(%481, %482) /* ty=Tensor[(300, 1092), int16] */;
  %484 = cast(%483, dtype="float64") /* ty=Tensor[(300, 1092), float64] */;
  %485 = log10(%484) /* ty=Tensor[(300, 1092), float64] */;
  %486 = cast(%483, dtype="uint64") /* ty=Tensor[(300, 1092), uint64] */;
  %487 = shape_of(%485, dtype="int32") /* ty=Tensor[(2), int32] */;
  %488 = cast(%485, dtype="uint64") /* ty=Tensor[(300, 1092), uint64] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %490 = right_shift(%488, %489) /* ty=Tensor[(300, 1092), uint64] */;
  %491 = cast(%490, dtype="float32") /* ty=Tensor[(300, 1092), float32] */;
  %492 = %476.0;
  %493 = %477.0;
  %494 = rsqrt(%491) /* ty=Tensor[(300, 1092), float32] */;
  (%492, %var_10058, %493, %494)
}

def @func_10808() -> Tensor[(300, 1092), float64] {
  @func_10806() /* ty=Tensor[(300, 1092), float64] */
}

def @func_5322() -> Tensor[(300, 1), float32] {
  %495 = @func_3993() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(300, 1), float32], Tensor[(126, 2), uint8], Tensor[(360), float32]) */;
  %495.1
}

def @func_9139() -> (Tensor[(2, 180), float32], Tensor[(8, 5, 8), float32], Tensor[(320), float32]) {
  %496 = @func_8574() /* ty=(Tensor[(2, 180), float32],) */;
  %497 = cast(meta[relay.Constant][22] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %498 = reshape(%497, newshape=[8, 5, 8]) /* ty=Tensor[(8, 5, 8), float32] */;
  %499 = %496.0;
  %500 = @func_2511(%498) /* ty=Tensor[(8, 5, 8), float32] */;
  (%499, %500, meta[relay.Constant][22] /* ty=Tensor[(320), float32] */)
}

def @func_4236() -> (Tensor[(2, 180), float64], Tensor[(2, 180), float64]) {
  %507 = fn () -> (Tensor[(2, 180), float64], Tensor[(2, 180), float64]) {
    %501 = @func_4181() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(2, 180), float32]) */;
    %502 = %501.3;
    %503 = cast(%502, dtype="float64") /* ty=Tensor[(2, 180), float64] */;
    %504 = cast(%502, dtype="float64") /* ty=Tensor[(2, 180), float64] */;
    %505 = cosh(%503) /* ty=Tensor[(2, 180), float64] */;
    %506 = exp(%504) /* ty=Tensor[(2, 180), float64] */;
    (%505, %506)
  };
  %507() /* ty=(Tensor[(2, 180), float64], Tensor[(2, 180), float64]) */
}

def @func_6114() -> (Tensor[(1092), float32], Tensor[(252), uint8]) {
  %512 = fn () -> (Tensor[(1092), float32], Tensor[(252), uint8]) {
    %508 = @func_5647() /* ty=(Tensor[(1092), float32],) */;
    %509 = @func_4181() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(2, 180), float32]) */;
    %510 = %508.0;
    %511 = %509.2;
    (%510, %511)
  };
  %512() /* ty=(Tensor[(1092), float32], Tensor[(252), uint8]) */
}

def @func_5183(%var_5116: Tensor[(9, 10, 14), int64]) -> (Tensor[(9, 10, 14), int64], Tensor[(9, 10, 14), float32], Tensor[(9, 10, 14), float64], Tensor[(15, 14, 11), uint32], Tensor[(2310), float64]) {
  %513 = cast(meta[relay.Constant][23] /* ty=Tensor[(9, 10, 14), int64] */, dtype="int64") /* ty=Tensor[(9, 10, 14), int64] */;
  %514 = shape_of(%var_5116, dtype="int32") /* ty=Tensor[(3), int32] */;
  %515 = cast(%var_5116, dtype="int64") /* ty=Tensor[(9, 10, 14), int64] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %517 = cast(%var_5116, dtype="float32") /* ty=Tensor[(9, 10, 14), float32] */;
  %518 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(9, 10, 14), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %519 = cast(meta[relay.Constant][23] /* ty=Tensor[(9, 10, 14), int64] */, dtype="float32") /* ty=Tensor[(9, 10, 14), float32] */;
  %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %521 = cast(meta[relay.Constant][23] /* ty=Tensor[(9, 10, 14), int64] */, dtype="float64") /* ty=Tensor[(9, 10, 14), float64] */;
  %522 = cast(meta[relay.Constant][24] /* ty=Tensor[(2310), uint32] */, dtype="uint32") /* ty=Tensor[(2310), uint32] */;
  %523 = cast(meta[relay.Constant][24] /* ty=Tensor[(2310), uint32] */, dtype="uint32") /* ty=Tensor[(2310), uint32] */;
  %524 = reshape(%522, newshape=[15, 14, 11]) /* ty=Tensor[(15, 14, 11), uint32] */;
  %525 = reshape(%523, newshape=[15, 14, 11]) /* ty=Tensor[(15, 14, 11), uint32] */;
  %526 = cast(meta[relay.Constant][24] /* ty=Tensor[(2310), uint32] */, dtype="float64") /* ty=Tensor[(2310), float64] */;
  %527 = minimum(%515, %516) /* ty=Tensor[(9, 10, 14), int64] */;
  %528 = floor_mod(%519, %520) /* ty=Tensor[(9, 10, 14), float32] */;
  %529 = rsqrt(%521) /* ty=Tensor[(9, 10, 14), float64] */;
  %530 = @func_3365(%524, %525) /* ty=Tensor[(15, 14, 11), uint32] */;
  %531 = acos(%526) /* ty=Tensor[(2310), float64] */;
  (%527, %528, %529, %530, %531)
}

def @func_6251(%var_6250: Tensor[(126, 2), uint8]) -> (Tensor[(126, 2), uint64], Tensor[(252), uint8], Tensor[(1092), float32]) {
  %543 = fn (%var_6219: Tensor[(126, 2), uint8]) -> (Tensor[(126, 2), uint64], Tensor[(252), uint8], Tensor[(1092), float32]) {
    %532 = @func_3993() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(300, 1), float32], Tensor[(126, 2), uint8], Tensor[(360), float32]) */;
    %533 = %532.2;
    %534 = cast(%var_6219, dtype="uint64") /* ty=Tensor[(126, 2), uint64] */;
    %535 = shape_of(%533, dtype="int32") /* ty=Tensor[(2), int32] */;
    %536 = cast(%533, dtype="uint64") /* ty=Tensor[(126, 2), uint64] */;
    %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %538 = @func_4570() /* ty=(Tensor[(1092), float32], int8, Tensor[(252), uint8], Tensor[(360), float32]) */;
    %539 = @func_6177() /* ty=(Tensor[(1092), float32], Tensor[(9, 10, 14), float64], Tensor[(1260), int64], Tensor[(1092), float32], Tensor[(1092), float32], Tensor[(360), float32], Tensor[(120), float32], Tensor[(30), int16], Tensor[(360), float32]) */;
    %540 = subtract(%536, %537) /* ty=Tensor[(126, 2), uint64] */;
    %541 = %538.2;
    %542 = %539.3;
    (%540, %541, %542)
  };
  %543(%var_6250) /* ty=(Tensor[(126, 2), uint64], Tensor[(252), uint8], Tensor[(1092), float32]) */
}

def @func_6027() -> Tensor[(300, 10), int64] {
  @func_6025() /* ty=Tensor[(300, 10), int64] */
}

def @func_8091() -> (Tensor[(360), float32], Tensor[(1092), float32]) {
  @func_8089() /* ty=(Tensor[(360), float32], Tensor[(1092), float32]) */
}

def @func_2448(%var_2446: Tensor[(11, 13, 6), uint32], %var_2447: Tensor[(11, 13, 6), uint32]) -> (Tensor[(11, 13, 6), bool],) {
  @func_2444(%var_2446, %var_2447) /* ty=(Tensor[(11, 13, 6), bool],) */
}

def @func_5115() -> Tensor[(126, 2), float32] {
  @func_5113() /* ty=Tensor[(126, 2), float32] */
}

def @func_6631() -> (Tensor[(300, 10), int64],) {
  @func_6629() /* ty=(Tensor[(300, 10), int64],) */
}

def @func_9305() -> (Tensor[(300, 10), float64],) {
  %546 = fn () -> (Tensor[(300, 10), float64],) {
    %544 = @func_9100() /* ty=(Tensor[(300, 10), float64],) */;
    %545 = %544.0;
    (%545,)
  };
  %546() /* ty=(Tensor[(300, 10), float64],) */
}

def @func_8772(%var_8755: float64, %var_8756: Tensor[(15, 15, 12), float64]) -> Tensor[(15, 15, 12), float64] {
  %547 = cast(%var_8755, dtype="float64") /* ty=float64 */;
  %548 = cast(%var_8756, dtype="float64") /* ty=Tensor[(15, 15, 12), float64] */;
  floor_divide(%547, %548) /* ty=Tensor[(15, 15, 12), float64] */
}

def @func_10305(%var_10303: Tensor[(2700), float64]) -> (Tensor[(1092), float32], Tensor[(15, 15, 12), float64], float64, Tensor[(2700), float64], Tensor[(360), float32]) {
  @func_10302(%var_10303) /* ty=(Tensor[(1092), float32], Tensor[(15, 15, 12), float64], float64, Tensor[(2700), float64], Tensor[(360), float32]) */
}

def @func_4183() -> (Tensor[(13, 1, 10), float32], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(2, 180), float32]) {
  @func_4181() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(2, 180), float32]) */
}

def @func_7854() -> Tensor[(1092), float32] {
  @func_7852() /* ty=Tensor[(1092), float32] */
}

def @func_4978() -> Tensor[(252), uint8] {
  %550 = fn () -> Tensor[(252), uint8] {
    %549 = @func_4181() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(2, 180), float32]) */;
    %549.2
  };
  %550() /* ty=Tensor[(252), uint8] */
}

def @func_9550() -> (Tensor[(252), uint8],) {
  %552 = fn () -> (Tensor[(252), uint8],) {
    %551 = @func_4977() /* ty=Tensor[(252), uint8] */;
    (%551,)
  };
  %552() /* ty=(Tensor[(252), uint8],) */
}

def @func_6420() -> (Tensor[(300, 10), int64],) {
  @func_6418() /* ty=(Tensor[(300, 10), int64],) */
}

def @func_2444(%var_2433: Tensor[(11, 13, 6), uint32], %var_2434: Tensor[(11, 13, 6), uint32]) -> (Tensor[(11, 13, 6), bool],) {
  %553 = cast(%var_2434, dtype="bool") /* ty=Tensor[(11, 13, 6), bool] */;
  %554 = shape_of(%var_2433, dtype="int32") /* ty=Tensor[(3), int32] */;
  %555 = cast(%var_2433, dtype="bool") /* ty=Tensor[(11, 13, 6), bool] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %557 = equal(%555, %556) /* ty=Tensor[(11, 13, 6), bool] */;
  (%557,)
}

def @func_7761() -> (Tensor[(1092), float32],) {
  %558 = @func_5968() /* ty=(Tensor[(1092), float32],) */;
  %559 = %558.0;
  (%559,)
}

def @func_10344() -> (Tensor[(252), uint8], Tensor[(300, 1092), float64], Tensor[(300, 1), float64], Tensor[(300, 1), float32]) {
  %560 = @func_9399() /* ty=(Tensor[(300, 10), int64], Tensor[(252), uint8]) */;
  %561 = %560.1;
  %562 = @func_9172() /* ty=Tensor[(300, 1092), float64] */;
  %563 = @func_4949() /* ty=Tensor[(300, 1), float64] */;
  %564 = @func_5322() /* ty=Tensor[(300, 1), float32] */;
  (%561, %562, %563, %564)
}

def @func_4379(%var_4360: Tensor[(360), float32]) -> (Tensor[(6, 6, 10), float32], Tensor[(360), float32], Tensor[(6, 6, 10), float32], Tensor[(8, 2, 7), int8]) {
  %565 = cast(%var_4360, dtype="float32") /* ty=Tensor[(360), float32] */;
  %566 = reshape(%565, newshape=[6, 6, 10]) /* ty=Tensor[(6, 6, 10), float32] */;
  %567 = @func_782(%566) /* ty=Tensor[(6, 6, 10), float32] */;
  %568 = cast(%567, dtype="float32") /* ty=Tensor[(6, 6, 10), float32] */;
  %569 = reshape(%568, newshape=[6, 6, 10]) /* ty=Tensor[(6, 6, 10), float32] */;
  %570 = cast(meta[relay.Constant][25] /* ty=Tensor[(8, 2, 7), float64] */, dtype="float64") /* ty=Tensor[(8, 2, 7), float64] */;
  %571 = asin(%570) /* ty=Tensor[(8, 2, 7), float64] */;
  %572 = cast(meta[relay.Constant][25] /* ty=Tensor[(8, 2, 7), float64] */, dtype="int8") /* ty=Tensor[(8, 2, 7), int8] */;
  %573 = shape_of(%571, dtype="int32") /* ty=Tensor[(3), int32] */;
  %574 = cast(%571, dtype="int8") /* ty=Tensor[(8, 2, 7), int8] */;
  %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %576 = @func_782(%569) /* ty=Tensor[(6, 6, 10), float32] */;
  %577 = logical_xor(%574, %575) /* ty=Tensor[(8, 2, 7), int8] */;
  (%567, %var_4360, %576, %577)
}

def @func_7314() -> (Tensor[(300, 1), float64],) {
  %580 = fn () -> (Tensor[(300, 1), float64],) {
    %578 = @func_4932() /* ty=(Tensor[(300, 1), float64], Tensor[(300, 1), float64]) */;
    %579 = %578.0;
    (%579,)
  };
  %580() /* ty=(Tensor[(300, 1), float64],) */
}

def @func_6992() -> (Tensor[(1092), float32], Tensor[(300, 10), int64]) {
  %585 = fn () -> (Tensor[(1092), float32], Tensor[(300, 10), int64]) {
    %581 = @func_6341() /* ty=(Tensor[(1092), float32],) */;
    %582 = @func_6418() /* ty=(Tensor[(300, 10), int64],) */;
    %583 = %581.0;
    %584 = %582.0;
    (%583, %584)
  };
  %585() /* ty=(Tensor[(1092), float32], Tensor[(300, 10), int64]) */
}

def @func_5674() -> (Tensor[(252), uint8],) {
  %587 = fn () -> (Tensor[(252), uint8],) {
    %586 = @func_4977() /* ty=Tensor[(252), uint8] */;
    (%586,)
  };
  %587() /* ty=(Tensor[(252), uint8],) */
}

def @func_8002(%var_8000: Tensor[(24), float64]) -> (Tensor[(6, 2, 2), float32], Tensor[(24), float64], Tensor[(300, 252), float64]) {
  @func_7999(%var_8000) /* ty=(Tensor[(6, 2, 2), float32], Tensor[(24), float64], Tensor[(300, 252), float64]) */
}

def @func_4339() -> (Tensor[(360), float32],) {
  %588 = @func_3993() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(300, 1), float32], Tensor[(126, 2), uint8], Tensor[(360), float32]) */;
  %589 = %588.3;
  (%589,)
}

def @func_8945() -> (Tensor[(1092), float32],) {
  @func_8943() /* ty=(Tensor[(1092), float32],) */
}

def @func_10346() -> (Tensor[(252), uint8], Tensor[(300, 1092), float64], Tensor[(300, 1), float64], Tensor[(300, 1), float32]) {
  @func_10344() /* ty=(Tensor[(252), uint8], Tensor[(300, 1092), float64], Tensor[(300, 1), float64], Tensor[(300, 1), float32]) */
}

def @func_10542(%var_10535: Tensor[(1092), float32], %var_10536: Tensor[(252), uint8]) -> (Tensor[(300, 10), float64], Tensor[(6, 4), float64], Tensor[(300, ?), float32], Tensor[(1092), float64], Tensor[(1092), float32], Tensor[(252), uint8]) {
  %590 = @func_9304() /* ty=(Tensor[(300, 10), float64],) */;
  %591 = cast(meta[relay.Constant][26] /* ty=Tensor[(6, 4), float64] */, dtype="float64") /* ty=Tensor[(6, 4), float64] */;
  %592 = reshape(%591, newshape=[6, 2, 2]) /* ty=Tensor[(6, 2, 2), float64] */;
  %593 = @func_4687(%592) /* ty=(Tensor[(6, 2, 2), float64], Tensor[(6, 2, 2), float32], Tensor[(300, 1), float64]) */;
  %594 = %593.2;
  %595 = cast(%594, dtype="float32") /* ty=Tensor[(300, 1), float32] */;
  %596 = log2(%595) /* ty=Tensor[(300, 1), float32] */;
  %597 = cast(%594, dtype="float32") /* ty=Tensor[(300, 1), float32] */;
  %598 = shape_of(%596, dtype="int32") /* ty=Tensor[(2), int32] */;
  %599 = cast(%596, dtype="float32") /* ty=Tensor[(300, 1), float32] */;
  %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %601 = cast(%var_10535, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %602 = cast(%var_10536, dtype="uint8") /* ty=Tensor[(252), uint8] */;
  %603 = reshape(%601, newshape=[1092]) /* ty=Tensor[(1092), float32] */;
  %604 = reshape(%602, newshape=[252]) /* ty=Tensor[(252), uint8] */;
  %605 = @func_9660(%603, %604) /* ty=(Tensor[(1092), float64], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(126, 2), uint64], Tensor[(24), float64], Tensor[(24), float64]) */;
  %606 = %590.0;
  %607 = power(%599, %600) /* ty=Tensor[(300, ?), float32] */;
  %608 = %605.0;
  (%606, meta[relay.Constant][26] /* ty=Tensor[(6, 4), float64] */, %607, %608, %var_10535, %var_10536)
}

def @func_9100() -> (Tensor[(300, 10), float64],) {
  %609 = @func_6071() /* ty=(Tensor[(300, 10), int64],) */;
  %610 = %609.0;
  %611 = cast(%610, dtype="float64") /* ty=Tensor[(300, 10), float64] */;
  %612 = acosh(%611) /* ty=Tensor[(300, 10), float64] */;
  (%612,)
}

def @func_8742() -> (Tensor[(300, 10), float32], Tensor[(1260), int64], Tensor[(300, 1092), float64], Tensor[(9, 10, 14), bool], Tensor[(300, 10), int64], Tensor[(360), float32], Tensor[(6, 60), float32]) {
  @func_8740() /* ty=(Tensor[(300, 10), float32], Tensor[(1260), int64], Tensor[(300, 1092), float64], Tensor[(9, 10, 14), bool], Tensor[(300, 10), int64], Tensor[(360), float32], Tensor[(6, 60), float32]) */
}

def @func_10683() -> Tensor[(300, 16), bool] {
  %613 = @func_5937() /* ty=(Tensor[(300, 16), bool], Tensor[(300, 16), float32]) */;
  %613.0
}

def @func_8119() -> Tensor[(2, 180), float64] {
  %614 = @func_7082() /* ty=(Tensor[(300, 10), int64], Tensor[(2, 180), float64]) */;
  %614.1
}

def @func_9296() -> Tensor[(252), uint8] {
  %615 = fn () -> Tensor[(252), uint8] {
    @func_5555() /* ty=Tensor[(252), uint8] */
  };
  %615() /* ty=Tensor[(252), uint8] */
}

def @func_8448() -> (Tensor[(300, 16), bool], Tensor[(300, 10), int64], Tensor[(360), float32]) {
  %621 = fn () -> (Tensor[(300, 16), bool], Tensor[(300, 10), int64], Tensor[(360), float32]) {
    %616 = @func_5937() /* ty=(Tensor[(300, 16), bool], Tensor[(300, 16), float32]) */;
    %617 = @func_6071() /* ty=(Tensor[(300, 10), int64],) */;
    %618 = %616.0;
    %619 = %617.0;
    %620 = @func_5857() /* ty=Tensor[(360), float32] */;
    (%618, %619, %620)
  };
  %621() /* ty=(Tensor[(300, 16), bool], Tensor[(300, 10), int64], Tensor[(360), float32]) */
}

def @func_3288(%var_3286: Tensor[(1, 10, 3), int16], %var_3287: Tensor[(1, 10, 3), int16]) -> (Tensor[(8, 5, 8), float32], Tensor[(320), float32], Tensor[(?, 10, 3), float64]) {
  %634 = fn (%var_3258: Tensor[(1, 10, 3), int16], %var_3259: Tensor[(1, 10, 3), int16]) -> (Tensor[(8, 5, 8), float32], Tensor[(320), float32], Tensor[(?, 10, 3), float64]) {
    %622 = cast(meta[relay.Constant][27] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
    %623 = reshape(%622, newshape=[8, 5, 8]) /* ty=Tensor[(8, 5, 8), float32] */;
    %624 = cast(%var_3259, dtype="int16") /* ty=Tensor[(1, 10, 3), int16] */;
    %625 = shape_of(%var_3258, dtype="int32") /* ty=Tensor[(3), int32] */;
    %626 = cast(%var_3258, dtype="int16") /* ty=Tensor[(1, 10, 3), int16] */;
    %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %628 = maximum(%626, %627) /* ty=Tensor[(?, 10, 3), int16] */;
    %629 = cast(%628, dtype="float64") /* ty=Tensor[(?, 10, 3), float64] */;
    %630 = sin(%629) /* ty=Tensor[(?, 10, 3), float64] */;
    %631 = cast(%630, dtype="float64") /* ty=Tensor[(?, 10, 3), float64] */;
    %632 = @func_2511(%623) /* ty=Tensor[(8, 5, 8), float32] */;
    %633 = acosh(%631) /* ty=Tensor[(?, 10, 3), float64] */;
    (%632, meta[relay.Constant][27] /* ty=Tensor[(320), float32] */, %633)
  };
  %634(%var_3286, %var_3287) /* ty=(Tensor[(8, 5, 8), float32], Tensor[(320), float32], Tensor[(?, 10, 3), float64]) */
}

def @func_9141() -> (Tensor[(2, 180), float32], Tensor[(8, 5, 8), float32], Tensor[(320), float32]) {
  @func_9139() /* ty=(Tensor[(2, 180), float32], Tensor[(8, 5, 8), float32], Tensor[(320), float32]) */
}

def @func_6311(%var_6310: Tensor[(11, 6, 13), float64]) -> (Tensor[(11, 6, 13), float64],) {
  %637 = fn (%var_6289: Tensor[(11, 6, 13), float64]) -> (Tensor[(11, 6, 13), float64],) {
    %635 = cast(%var_6289, dtype="float64") /* ty=Tensor[(11, 6, 13), float64] */;
    %636 = atan(%635) /* ty=Tensor[(11, 6, 13), float64] */;
    (%636,)
  };
  %637(%var_6310) /* ty=(Tensor[(11, 6, 13), float64],) */
}

def @func_5857() -> Tensor[(360), float32] {
  %638 = @func_4115() /* ty=(Tensor[(360), float32],) */;
  %638.0
}

def @func_4932() -> (Tensor[(300, 1), float64], Tensor[(300, 1), float64]) {
  %639 = @func_4021() /* ty=Tensor[(300, 1), float64] */;
  %640 = @func_4021() /* ty=Tensor[(300, 1), float64] */;
  (%639, %640)
}

def @func_3368(%var_3366: Tensor[(15, 14, 11), uint32], %var_3367: Tensor[(15, 14, 11), uint32]) -> Tensor[(15, 14, 11), uint32] {
  %645 = fn (%var_3333: Tensor[(15, 14, 11), uint32], %var_3334: Tensor[(15, 14, 11), uint32]) -> Tensor[(15, 14, 11), uint32] {
    %641 = cast(%var_3334, dtype="uint32") /* ty=Tensor[(15, 14, 11), uint32] */;
    %642 = shape_of(%var_3333, dtype="int32") /* ty=Tensor[(3), int32] */;
    %643 = cast(%var_3333, dtype="uint32") /* ty=Tensor[(15, 14, 11), uint32] */;
    %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    right_shift(%643, %644) /* ty=Tensor[(15, 14, 11), uint32] */
  };
  %645(%var_3366, %var_3367) /* ty=Tensor[(15, 14, 11), uint32] */
}

def @func_4951() -> Tensor[(300, 1), float64] {
  @func_4949() /* ty=Tensor[(300, 1), float64] */
}

def @func_10685() -> Tensor[(300, 16), bool] {
  @func_10683() /* ty=Tensor[(300, 16), bool] */
}

def @func_9258() -> (Tensor[(12, 8, 12), float64],) {
  %647 = fn () -> (Tensor[(12, 8, 12), float64],) {
    %646 = @func_8592() /* ty=Tensor[(12, 8, 12), float64] */;
    (%646,)
  };
  %647() /* ty=(Tensor[(12, 8, 12), float64],) */
}

def @func_7083() -> (Tensor[(300, 10), int64], Tensor[(2, 180), float64]) {
  %654 = fn () -> (Tensor[(300, 10), int64], Tensor[(2, 180), float64]) {
    %648 = @func_6418() /* ty=(Tensor[(300, 10), int64],) */;
    %649 = @func_4181() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(2, 180), float32]) */;
    %650 = %649.3;
    %651 = cast(%650, dtype="float64") /* ty=Tensor[(2, 180), float64] */;
    %652 = %648.0;
    %653 = sinh(%651) /* ty=Tensor[(2, 180), float64] */;
    (%652, %653)
  };
  %654() /* ty=(Tensor[(300, 10), int64], Tensor[(2, 180), float64]) */
}

def @func_6342() -> (Tensor[(1092), float32],) {
  %657 = fn () -> (Tensor[(1092), float32],) {
    %655 = @func_4540() /* ty=(Tensor[(1092), float32],) */;
    %656 = %655.0;
    (%656,)
  };
  %657() /* ty=(Tensor[(1092), float32],) */
}

def @func_6177() -> (Tensor[(1092), float32], Tensor[(9, 10, 14), float64], Tensor[(1260), int64], Tensor[(1092), float32], Tensor[(1092), float32], Tensor[(360), float32], Tensor[(120), float32], Tensor[(30), int16], Tensor[(360), float32]) {
  %658 = @func_6113() /* ty=(Tensor[(1092), float32], Tensor[(252), uint8]) */;
  %659 = cast(meta[relay.Constant][28] /* ty=Tensor[(1260), int64] */, dtype="int64") /* ty=Tensor[(1260), int64] */;
  %660 = reshape(%659, newshape=[9, 10, 14]) /* ty=Tensor[(9, 10, 14), int64] */;
  %661 = @func_5183(%660) /* ty=(Tensor[(9, 10, 14), int64], Tensor[(9, 10, 14), float32], Tensor[(9, 10, 14), float64], Tensor[(15, 14, 11), uint32], Tensor[(2310), float64]) */;
  %662 = @func_4540() /* ty=(Tensor[(1092), float32],) */;
  %663 = @func_4540() /* ty=(Tensor[(1092), float32],) */;
  %664 = %658.0;
  %665 = cast(%664, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %666 = cast(meta[relay.Constant][29] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %667 = cast(%664, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %668 = cast(meta[relay.Constant][30] /* ty=Tensor[(30), int16] */, dtype="int16") /* ty=Tensor[(30), int16] */;
  %669 = reshape(%665, newshape=[546, 2]) /* ty=Tensor[(546, 2), float32] */;
  %670 = reshape(%666, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %671 = reshape(%667, newshape=[546, 2]) /* ty=Tensor[(546, 2), float32] */;
  %672 = reshape(%668, newshape=[30]) /* ty=Tensor[(30), int16] */;
  %673 = @func_5440(%669, %670, %671, %672) /* ty=(Tensor[(360), float32], Tensor[(360), float32], Tensor[(10, 30), float32], Tensor[(120), float32], Tensor[(546, 2), float64], Tensor[(546, 2), bool], Tensor[(7, 12, 13), float32], Tensor[(?, 10, 3), float64], Tensor[(30), int16]) */;
  %674 = @func_4115() /* ty=(Tensor[(360), float32],) */;
  %675 = %661.2;
  %676 = %662.0;
  %677 = %663.0;
  %678 = %673.0;
  %679 = %674.0;
  (%664, %675, meta[relay.Constant][28] /* ty=Tensor[(1260), int64] */, %676, %677, %678, meta[relay.Constant][29] /* ty=Tensor[(120), float32] */, meta[relay.Constant][30] /* ty=Tensor[(30), int16] */, %679)
}

def @func_8824() -> (Tensor[(252), uint8],) {
  %681 = fn () -> (Tensor[(252), uint8],) {
    %680 = @func_4977() /* ty=Tensor[(252), uint8] */;
    (%680,)
  };
  %681() /* ty=(Tensor[(252), uint8],) */
}

def @func_5045() -> (Tensor[(300, 1), float64],) {
  %683 = fn () -> (Tensor[(300, 1), float64],) {
    %682 = @func_4949() /* ty=Tensor[(300, 1), float64] */;
    (%682,)
  };
  %683() /* ty=(Tensor[(300, 1), float64],) */
}

def @func_4786() -> Tensor[(252), uint8] {
  @func_4784() /* ty=Tensor[(252), uint8] */
}

def @func_2514(%var_2512: Tensor[(8, 5, 8), float32]) -> Tensor[(8, 5, 8), float32] {
  @func_2511(%var_2512) /* ty=Tensor[(8, 5, 8), float32] */
}

def @func_7852() -> Tensor[(1092), float32] {
  %684 = @func_4181() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(2, 180), float32]) */;
  %684.1
}

def @func_4784() -> Tensor[(252), uint8] {
  %685 = @func_4181() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(2, 180), float32]) */;
  %685.2
}

def @func_8479(%var_8478: Tensor[(16, 16, 4), float64]) -> Tensor[(16, 16, 4), float64] {
  %687 = fn (%var_8469: Tensor[(16, 16, 4), float64]) -> Tensor[(16, 16, 4), float64] {
    %686 = cast(%var_8469, dtype="float64") /* ty=Tensor[(16, 16, 4), float64] */;
    acos(%686) /* ty=Tensor[(16, 16, 4), float64] */
  };
  %687(%var_8478) /* ty=Tensor[(16, 16, 4), float64] */
}

def @func_8121() -> Tensor[(2, 180), float64] {
  @func_8119() /* ty=Tensor[(2, 180), float64] */
}

def @func_4115() -> (Tensor[(360), float32],) {
  %688 = @func_3993() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(300, 1), float32], Tensor[(126, 2), uint8], Tensor[(360), float32]) */;
  %689 = %688.3;
  (%689,)
}

def @func_1662(%var_1658: Tensor[(1092), float32], %var_1659: Tensor[(15, 2, 10), float32], %var_1660: Tensor[(120), float32], %var_1661: Tensor[(360), float32]) -> (Tensor[(1092), float32], Tensor[(15, 2, 10), bool], Tensor[(7, 12, 13), float32], Tensor[(120), float32], Tensor[(6, 6, 10), float32], Tensor[(360), float32]) {
  %712 = fn (%var_1625: Tensor[(1092), float32], %var_1636: Tensor[(15, 2, 10), float32], %var_1642: Tensor[(120), float32], %var_1646: Tensor[(360), float32]) -> (Tensor[(1092), float32], Tensor[(15, 2, 10), bool], Tensor[(7, 12, 13), float32], Tensor[(120), float32], Tensor[(6, 6, 10), float32], Tensor[(360), float32]) {
    %690 = cast(%var_1625, dtype="float32") /* ty=Tensor[(1092), float32] */;
    %691 = reshape(%690, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float32] */;
    %692 = @func_314(%691) /* ty=Tensor[(7, 12, 13), float32] */;
    %693 = cast(%692, dtype="float32") /* ty=Tensor[(7, 12, 13), float32] */;
    %694 = shape_of(%var_1625, dtype="int32") /* ty=Tensor[(1), int32] */;
    %695 = cast(%var_1625, dtype="float32") /* ty=Tensor[(1092), float32] */;
    %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?), float32] */;
    %697 = cast(meta[relay.Constant][31] /* ty=Tensor[(15, 2, 10), float32] */, dtype="float32") /* ty=Tensor[(15, 2, 10), float32] */;
    %698 = log10(%697) /* ty=Tensor[(15, 2, 10), float32] */;
    %699 = cast(%var_1636, dtype="bool") /* ty=Tensor[(15, 2, 10), bool] */;
    %700 = shape_of(%698, dtype="int32") /* ty=Tensor[(3), int32] */;
    %701 = cast(%698, dtype="bool") /* ty=Tensor[(15, 2, 10), bool] */;
    %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %703 = cast(%var_1642, dtype="float32") /* ty=Tensor[(120), float32] */;
    %704 = reshape(%703, newshape=[10, 12, 1]) /* ty=Tensor[(10, 12, 1), float32] */;
    %705 = @func_1403(%704) /* ty=(Tensor[(10, 12, 6), float32], Tensor[(7, 12, 13), float32], Tensor[(7, 12, 13), float32], Tensor[(6, 6, 10), float32], Tensor[(360), float32], Tensor[(7, 12, 13), bool], Tensor[(7, 12, 13), float32], Tensor[(6, 6, 10), float32]) */;
    %706 = cast(%var_1646, dtype="float32") /* ty=Tensor[(360), float32] */;
    %707 = reshape(%706, newshape=[6, 6, 10]) /* ty=Tensor[(6, 6, 10), float32] */;
    %708 = divide(%695, %696) /* ty=Tensor[(1092), float32] */;
    %709 = not_equal(%701, %702) /* ty=Tensor[(15, 2, 10), bool] */;
    %710 = %705.6;
    %711 = @func_782(%707) /* ty=Tensor[(6, 6, 10), float32] */;
    (%708, %709, %710, %var_1642, %711, %var_1646)
  };
  %712(%var_1658, %var_1659, %var_1660, %var_1661) /* ty=(Tensor[(1092), float32], Tensor[(15, 2, 10), bool], Tensor[(7, 12, 13), float32], Tensor[(120), float32], Tensor[(6, 6, 10), float32], Tensor[(360), float32]) */
}

def @func_7122(%var_7092: Tensor[(8, 2, 7), int8]) -> (Tensor[(360, 1), float32], Tensor[(8, 2, 7), float32], Tensor[(2, 180), float32], Tensor[(120, 252), float64]) {
  %713 = cast(meta[relay.Constant][32] /* ty=Tensor[(360, 1), float32] */, dtype="float32") /* ty=Tensor[(360, 1), float32] */;
  %714 = reshape(%713, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %715 = @func_4379(%714) /* ty=(Tensor[(6, 6, 10), float32], Tensor[(360), float32], Tensor[(6, 6, 10), float32], Tensor[(8, 2, 7), int8]) */;
  %716 = %715.3;
  %717 = cast(%var_7092, dtype="float32") /* ty=Tensor[(8, 2, 7), float32] */;
  %718 = shape_of(%716, dtype="int32") /* ty=Tensor[(3), int32] */;
  %719 = cast(%716, dtype="float32") /* ty=Tensor[(8, 2, 7), float32] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %721 = @func_4181() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(2, 180), float32]) */;
  %722 = @func_6917() /* ty=(Tensor[(252), uint8],) */;
  %723 = %722.0;
  %724 = cast(%723, dtype="uint8") /* ty=Tensor[(252), uint8] */;
  %725 = cast(%723, dtype="uint8") /* ty=Tensor[(252), uint8] */;
  %726 = cast(meta[relay.Constant][32] /* ty=Tensor[(360, 1), float32] */, dtype="float32") /* ty=Tensor[(360, 1), float32] */;
  %727 = reshape(%724, newshape=[6, 3, 14]) /* ty=Tensor[(6, 3, 14), uint8] */;
  %728 = reshape(%725, newshape=[6, 3, 14]) /* ty=Tensor[(6, 3, 14), uint8] */;
  %729 = reshape(%726, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %730 = @func_2918(%727, %728, %729) /* ty=(Tensor[(6, 3, 14), uint8], Tensor[(15, 2, 10), bool], int8, Tensor[(52), int8], Tensor[(1092), float32], Tensor[(300, 1), float32], Tensor[(120, 1), float32], Tensor[(360), float32]) */;
  %731 = %730.6;
  %732 = cast(%731, dtype="float64") /* ty=Tensor[(120, 1), float64] */;
  %733 = cast(%723, dtype="float64") /* ty=Tensor[(252), float64] */;
  %734 = divide(%719, %720) /* ty=Tensor[(8, 2, 7), float32] */;
  %735 = %721.3;
  %736 = floor_mod(%732, %733) /* ty=Tensor[(120, 252), float64] */;
  (meta[relay.Constant][32] /* ty=Tensor[(360, 1), float32] */, %734, %735, %736)
}

def @func_7999(%var_7976: Tensor[(24), float64]) -> (Tensor[(6, 2, 2), float32], Tensor[(24), float64], Tensor[(300, 252), float64]) {
  %737 = cast(%var_7976, dtype="float64") /* ty=Tensor[(24), float64] */;
  %738 = reshape(%737, newshape=[24]) /* ty=Tensor[(24), float64] */;
  %739 = @func_5842(%738) /* ty=(Tensor[(252), uint8], Tensor[(6, 2, 2), float32], Tensor[(24), float64], Tensor[(252), uint8]) */;
  %740 = @func_5322() /* ty=Tensor[(300, 1), float32] */;
  %741 = @func_6113() /* ty=(Tensor[(1092), float32], Tensor[(252), uint8]) */;
  %742 = %741.1;
  %743 = cast(%740, dtype="float64") /* ty=Tensor[(300, 1), float64] */;
  %744 = cast(%742, dtype="float64") /* ty=Tensor[(252), float64] */;
  %745 = %739.1;
  %746 = power(%743, %744) /* ty=Tensor[(300, 252), float64] */;
  (%745, %var_7976, %746)
}

def @func_8198() -> (Tensor[(126, 2), uint64], Tensor[(300, 1), float64], Tensor[(300, 16), float32], Tensor[(300, 252), float32]) {
  %759 = fn () -> (Tensor[(126, 2), uint64], Tensor[(300, 1), float64], Tensor[(300, 16), float32], Tensor[(300, 252), float32]) {
    %747 = cast(meta[relay.Constant][33] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
    %748 = reshape(%747, newshape=[126, 2]) /* ty=Tensor[(126, 2), float32] */;
    %749 = @func_6736(%748) /* ty=(Tensor[(126, 2), uint64],) */;
    %750 = @func_4949() /* ty=Tensor[(300, 1), float64] */;
    %751 = cast(%750, dtype="float64") /* ty=Tensor[(300, 1), float64] */;
    %752 = @func_5937() /* ty=(Tensor[(300, 16), bool], Tensor[(300, 16), float32]) */;
    %753 = cast(meta[relay.Constant][33] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
    %754 = cast(%750, dtype="float32") /* ty=Tensor[(300, 1), float32] */;
    %755 = %749.0;
    %756 = cosh(%751) /* ty=Tensor[(300, 1), float64] */;
    %757 = %752.1;
    %758 = mod(%753, %754) /* ty=Tensor[(300, 252), float32] */;
    (%755, %756, %757, %758)
  };
  %759() /* ty=(Tensor[(126, 2), uint64], Tensor[(300, 1), float64], Tensor[(300, 16), float32], Tensor[(300, 252), float32]) */
}

def @func_4181() -> (Tensor[(13, 1, 10), float32], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(2, 180), float32]) {
  %760 = @func_3993() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(300, 1), float32], Tensor[(126, 2), uint8], Tensor[(360), float32]) */;
  %761 = cast(meta[relay.Constant][34] /* ty=Tensor[(252), uint8] */, dtype="uint8") /* ty=Tensor[(252), uint8] */;
  %762 = cast(meta[relay.Constant][34] /* ty=Tensor[(252), uint8] */, dtype="uint8") /* ty=Tensor[(252), uint8] */;
  %763 = cast(meta[relay.Constant][35] /* ty=Tensor[(2, 180), float32] */, dtype="float32") /* ty=Tensor[(2, 180), float32] */;
  %764 = reshape(%761, newshape=[6, 3, 14]) /* ty=Tensor[(6, 3, 14), uint8] */;
  %765 = reshape(%762, newshape=[6, 3, 14]) /* ty=Tensor[(6, 3, 14), uint8] */;
  %766 = reshape(%763, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %767 = @func_2918(%764, %765, %766) /* ty=(Tensor[(6, 3, 14), uint8], Tensor[(15, 2, 10), bool], int8, Tensor[(52), int8], Tensor[(1092), float32], Tensor[(300, 1), float32], Tensor[(120, 1), float32], Tensor[(360), float32]) */;
  %768 = %760.0;
  %769 = %767.4;
  (%768, %769, meta[relay.Constant][34] /* ty=Tensor[(252), uint8] */, meta[relay.Constant][35] /* ty=Tensor[(2, 180), float32] */)
}

def @func_6179() -> (Tensor[(1092), float32], Tensor[(9, 10, 14), float64], Tensor[(1260), int64], Tensor[(1092), float32], Tensor[(1092), float32], Tensor[(360), float32], Tensor[(120), float32], Tensor[(30), int16], Tensor[(360), float32]) {
  @func_6177() /* ty=(Tensor[(1092), float32], Tensor[(9, 10, 14), float64], Tensor[(1260), int64], Tensor[(1092), float32], Tensor[(1092), float32], Tensor[(360), float32], Tensor[(120), float32], Tensor[(30), int16], Tensor[(360), float32]) */
}

def @func_8740() -> (Tensor[(300, 10), float32], Tensor[(1260), int64], Tensor[(300, 1092), float64], Tensor[(9, 10, 14), bool], Tensor[(300, 10), int64], Tensor[(360), float32], Tensor[(6, 60), float32]) {
  %770 = @func_6609() /* ty=(Tensor[(300, 1), float64], Tensor[(300, 10), float32]) */;
  %771 = @func_7611() /* ty=Tensor[(1092), float32] */;
  %772 = @func_4932() /* ty=(Tensor[(300, 1), float64], Tensor[(300, 1), float64]) */;
  %773 = %772.0;
  %774 = cast(%771, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %775 = cast(%773, dtype="float64") /* ty=Tensor[(300, 1), float64] */;
  %776 = cast(meta[relay.Constant][36] /* ty=Tensor[(1260), int64] */, dtype="int64") /* ty=Tensor[(1260), int64] */;
  %777 = reshape(%776, newshape=[1260]) /* ty=Tensor[(1260), int64] */;
  %778 = @func_7440(%777) /* ty=(Tensor[(300, 10), uint8], Tensor[(9, 10, 14), float32], Tensor[(1260), int64]) */;
  %779 = %778.1;
  %780 = cast(%779, dtype="float32") /* ty=Tensor[(9, 10, 14), float32] */;
  %781 = sigmoid(%780) /* ty=Tensor[(9, 10, 14), float32] */;
  %782 = cast(%779, dtype="bool") /* ty=Tensor[(9, 10, 14), bool] */;
  %783 = shape_of(%781, dtype="int32") /* ty=Tensor[(3), int32] */;
  %784 = cast(%781, dtype="bool") /* ty=Tensor[(9, 10, 14), bool] */;
  %785 = dyn.reshape(%782, %783, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %786 = @func_6629() /* ty=(Tensor[(300, 10), int64],) */;
  %787 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 60), float32] */, dtype="float32") /* ty=Tensor[(6, 60), float32] */;
  %788 = reshape(%787, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %789 = @func_4379(%788) /* ty=(Tensor[(6, 6, 10), float32], Tensor[(360), float32], Tensor[(6, 6, 10), float32], Tensor[(8, 2, 7), int8]) */;
  %790 = %770.1;
  %791 = floor_mod(%774, %775) /* ty=Tensor[(300, 1092), float64] */;
  %792 = less_equal(%784, %785) /* ty=Tensor[(9, 10, 14), bool] */;
  %793 = %786.0;
  %794 = %789.1;
  (%790, meta[relay.Constant][36] /* ty=Tensor[(1260), int64] */, %791, %792, %793, %794, meta[relay.Constant][37] /* ty=Tensor[(6, 60), float32] */)
}

def @func_10136() -> Tensor[(360), float32] {
  %795 = fn () -> Tensor[(360), float32] {
    @func_5857() /* ty=Tensor[(360), float32] */
  };
  %795() /* ty=Tensor[(360), float32] */
}

def @func_10075(%var_10073: Tensor[(300, 1092), float64], %var_10074: Tensor[(30), int16]) -> (Tensor[(8, 5, 8), float32], Tensor[(30), int16], Tensor[(13, 1, 10), float32], Tensor[(300, 1092), float32]) {
  @func_10071(%var_10073, %var_10074) /* ty=(Tensor[(8, 5, 8), float32], Tensor[(30), int16], Tensor[(13, 1, 10), float32], Tensor[(300, 1092), float32]) */
}

def @func_5555() -> Tensor[(252), uint8] {
  @func_4784() /* ty=Tensor[(252), uint8] */
}

def @func_5845(%var_5843: Tensor[(24), float64]) -> (Tensor[(252), uint8], Tensor[(6, 2, 2), float32], Tensor[(24), float64], Tensor[(252), uint8]) {
  @func_5842(%var_5843) /* ty=(Tensor[(252), uint8], Tensor[(6, 2, 2), float32], Tensor[(24), float64], Tensor[(252), uint8]) */
}

def @func_7568(%var_7524: Tensor[(1152), uint8], %var_7526: Tensor[(64), float32], %var_7561: Tensor[(1, 1260), int64]) -> (Tensor[(8, 5, 8), float32], Tensor[(1152), uint8], Tensor[(182, 6), float32], Tensor[(2, 180), float64], Tensor[(300, 64), uint64], Tensor[(2310), float64], Tensor[(1, 1260), int64]) {
  %796 = cast(%var_7524, dtype="uint8") /* ty=Tensor[(1152), uint8] */;
  %797 = cast(%var_7524, dtype="uint8") /* ty=Tensor[(1152), uint8] */;
  %798 = cast(meta[relay.Constant][38] /* ty=Tensor[(182, 6), float32] */, dtype="float32") /* ty=Tensor[(182, 6), float32] */;
  %799 = cast(%var_7526, dtype="float32") /* ty=Tensor[(64), float32] */;
  %800 = reshape(%796, newshape=[16, 8, 9]) /* ty=Tensor[(16, 8, 9), uint8] */;
  %801 = reshape(%797, newshape=[16, 8, 9]) /* ty=Tensor[(16, 8, 9), uint8] */;
  %802 = reshape(%798, newshape=[1092]) /* ty=Tensor[(1092), float32] */;
  %803 = reshape(%799, newshape=[64]) /* ty=Tensor[(64), float32] */;
  %804 = @func_4446(%800, %801, %802, %803) /* ty=(Tensor[(16, 8, 9), uint8], Tensor[(1092), float32], Tensor[(360), float32], Tensor[(360), float32], Tensor[(7, 12, 13), float32], Tensor[(2, 180), float64], Tensor[(6, 6, 10), float32], Tensor[(64), float32], Tensor[(8, 5, 8), float32], Tensor[(320), float32], Tensor[(7, 12, 13), float64]) */;
  %805 = @func_4235() /* ty=(Tensor[(2, 180), float64], Tensor[(2, 180), float64]) */;
  %806 = @func_5044() /* ty=(Tensor[(300, 1), float64],) */;
  %807 = %806.0;
  %808 = cast(%var_7526, dtype="uint64") /* ty=Tensor[(64), uint64] */;
  %809 = cast(%807, dtype="uint64") /* ty=Tensor[(300, 1), uint64] */;
  %810 = cast(%var_7561, dtype="int64") /* ty=Tensor[(1, 1260), int64] */;
  %811 = reshape(%810, newshape=[9, 10, 14]) /* ty=Tensor[(9, 10, 14), int64] */;
  %812 = @func_5183(%811) /* ty=(Tensor[(9, 10, 14), int64], Tensor[(9, 10, 14), float32], Tensor[(9, 10, 14), float64], Tensor[(15, 14, 11), uint32], Tensor[(2310), float64]) */;
  %813 = %804.8;
  %814 = %805.0;
  %815 = left_shift(%808, %809) /* ty=Tensor[(300, 64), uint64] */;
  %816 = %812.4;
  (%813, %var_7524, meta[relay.Constant][38] /* ty=Tensor[(182, 6), float32] */, %814, %815, %816, %var_7561)
}

def @func_8975() -> (Tensor[(300, 1), float64],) {
  @func_8973() /* ty=(Tensor[(300, 1), float64],) */
}

def @func_9944(%var_9942: Tensor[(1092), float32]) -> Tensor[(1092), int64] {
  @func_9941(%var_9942) /* ty=Tensor[(1092), int64] */
}

def @func_11260() -> (Tensor[(2, 180), float64],) {
  @func_11258() /* ty=(Tensor[(2, 180), float64],) */
}

def @func_7354() -> (Tensor[(1092), float32], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(300, 1), float64]) {
  %825 = fn () -> (Tensor[(1092), float32], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(300, 1), float64]) {
    %817 = @func_6113() /* ty=(Tensor[(1092), float32], Tensor[(252), uint8]) */;
    %818 = cast(meta[relay.Constant][39] /* ty=Tensor[(252), uint8] */, dtype="uint8") /* ty=Tensor[(252), uint8] */;
    %819 = reshape(%818, newshape=[126, 2]) /* ty=Tensor[(126, 2), uint8] */;
    %820 = @func_6249(%819) /* ty=(Tensor[(126, 2), uint64], Tensor[(252), uint8], Tensor[(1092), float32]) */;
    %821 = @func_4932() /* ty=(Tensor[(300, 1), float64], Tensor[(300, 1), float64]) */;
    %822 = %817.0;
    %823 = %820.2;
    %824 = %821.0;
    (%822, %823, meta[relay.Constant][39] /* ty=Tensor[(252), uint8] */, %824)
  };
  %825() /* ty=(Tensor[(1092), float32], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(300, 1), float64]) */
}

def @func_5648() -> (Tensor[(1092), float32],) {
  %828 = fn () -> (Tensor[(1092), float32],) {
    %826 = @func_4540() /* ty=(Tensor[(1092), float32],) */;
    %827 = %826.0;
    (%827,)
  };
  %828() /* ty=(Tensor[(1092), float32],) */
}

def @func_6584() -> Tensor[(1092), float32] {
  %830 = fn () -> Tensor[(1092), float32] {
    %829 = @func_5647() /* ty=(Tensor[(1092), float32],) */;
    %829.0
  };
  %830() /* ty=Tensor[(1092), float32] */
}

def @func_6025() -> Tensor[(300, 10), int64] {
  %831 = @func_3993() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(300, 1), float32], Tensor[(126, 2), uint8], Tensor[(360), float32]) */;
  %832 = %831.1;
  %833 = cast(%832, dtype="int64") /* ty=Tensor[(300, 1), int64] */;
  %834 = cast(meta[relay.Constant][40] /* ty=Tensor[(300, 10), float32] */, dtype="int64") /* ty=Tensor[(300, 10), int64] */;
  right_shift(%833, %834) /* ty=Tensor[(300, 10), int64] */
}

def @func_8574() -> (Tensor[(2, 180), float32],) {
  %835 = @func_4181() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(2, 180), float32]) */;
  %836 = %835.3;
  (%836,)
}

def @func_10653() -> Tensor[(300, 10), float64] {
  %837 = @func_9304() /* ty=(Tensor[(300, 10), float64],) */;
  %837.0
}

def @func_11299(%var_11297: Tensor[(2700), float64], %var_11298: Tensor[(14, 78), float32]) -> (Tensor[(360), float32], Tensor[(360), float32], Tensor[(2700), float64], Tensor[(126, 2), uint64], Tensor[(14, 78), float32], Tensor[(6, 42), uint8]) {
  %850 = fn (%var_11278: Tensor[(2700), float64], %var_11284: Tensor[(14, 78), float32]) -> (Tensor[(360), float32], Tensor[(360), float32], Tensor[(2700), float64], Tensor[(126, 2), uint64], Tensor[(14, 78), float32], Tensor[(6, 42), uint8]) {
    %838 = @func_4115() /* ty=(Tensor[(360), float32],) */;
    %839 = cast(%var_11278, dtype="float64") /* ty=Tensor[(2700), float64] */;
    %840 = reshape(%839, newshape=[2700]) /* ty=Tensor[(2700), float64] */;
    %841 = @func_10302(%840) /* ty=(Tensor[(1092), float32], Tensor[(15, 15, 12), float64], float64, Tensor[(2700), float64], Tensor[(360), float32]) */;
    %842 = cast(%var_11284, dtype="float32") /* ty=Tensor[(14, 78), float32] */;
    %843 = cast(meta[relay.Constant][41] /* ty=Tensor[(6, 42), uint8] */, dtype="uint8") /* ty=Tensor[(6, 42), uint8] */;
    %844 = reshape(%842, newshape=[1092]) /* ty=Tensor[(1092), float32] */;
    %845 = reshape(%843, newshape=[252]) /* ty=Tensor[(252), uint8] */;
    %846 = @func_9660(%844, %845) /* ty=(Tensor[(1092), float64], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(126, 2), uint64], Tensor[(24), float64], Tensor[(24), float64]) */;
    %847 = %838.0;
    %848 = %841.4;
    %849 = %846.3;
    (%847, %848, %var_11278, %849, %var_11284, meta[relay.Constant][41] /* ty=Tensor[(6, 42), uint8] */)
  };
  %850(%var_11297, %var_11298) /* ty=(Tensor[(360), float32], Tensor[(360), float32], Tensor[(2700), float64], Tensor[(126, 2), uint64], Tensor[(14, 78), float32], Tensor[(6, 42), uint8]) */
}

def @func_8271(%var_8269: Tensor[(2, 1800), float64], %var_8270: Tensor[(126, 2), float32]) -> (Tensor[(126, 2), float64], Tensor[(2, 1800), int64], Tensor[(360), float32]) {
  @func_8267(%var_8269, %var_8270) /* ty=(Tensor[(126, 2), float64], Tensor[(2, 1800), int64], Tensor[(360), float32]) */
}

def @func_9720(%var_9719: Tensor[(1, 6, 11), float32]) -> (Tensor[(1, 6, 11), float32],) {
  %853 = fn (%var_9701: Tensor[(1, 6, 11), float32]) -> (Tensor[(1, 6, 11), float32],) {
    %851 = cast(%var_9701, dtype="float32") /* ty=Tensor[(1, 6, 11), float32] */;
    %852 = log2(%851) /* ty=Tensor[(1, 6, 11), float32] */;
    (%852,)
  };
  %853(%var_9719) /* ty=(Tensor[(1, 6, 11), float32],) */
}

def @func_10775(%var_10773: Tensor[(1024), float64]) -> (Tensor[(1092), float32], Tensor[(16, 16, 4), float64], Tensor[(1024), float64]) {
  @func_10772(%var_10773) /* ty=(Tensor[(1092), float32], Tensor[(16, 16, 4), float64], Tensor[(1024), float64]) */
}

def @func_10302(%var_10269: Tensor[(2700), float64]) -> (Tensor[(1092), float32], Tensor[(15, 15, 12), float64], float64, Tensor[(2700), float64], Tensor[(360), float32]) {
  %854 = @func_8943() /* ty=(Tensor[(1092), float32],) */;
  %855 = cast(1.32466f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %856 = cast(%var_10269, dtype="float64") /* ty=Tensor[(2700), float64] */;
  %857 = reshape(%855, newshape=[]) /* ty=float64 */;
  %858 = reshape(%856, newshape=[15, 15, 12]) /* ty=Tensor[(15, 15, 12), float64] */;
  %859 = @func_4570() /* ty=(Tensor[(1092), float32], int8, Tensor[(252), uint8], Tensor[(360), float32]) */;
  %860 = %854.0;
  %861 = @func_8772(%857, %858) /* ty=Tensor[(15, 15, 12), float64] */;
  %862 = %859.3;
  (%860, %861, 1.32466f64 /* ty=float64 */, %var_10269, %862)
}

def @func_5939() -> (Tensor[(300, 16), bool], Tensor[(300, 16), float32]) {
  @func_5937() /* ty=(Tensor[(300, 16), bool], Tensor[(300, 16), float32]) */
}

def @func_10848() -> (Tensor[(2, 180), float64],) {
  %865 = fn () -> (Tensor[(2, 180), float64],) {
    %863 = @func_4235() /* ty=(Tensor[(2, 180), float64], Tensor[(2, 180), float64]) */;
    %864 = %863.1;
    (%864,)
  };
  %865() /* ty=(Tensor[(2, 180), float64],) */
}

def @func_10799() -> (Tensor[(1092), float32],) {
  @func_10797() /* ty=(Tensor[(1092), float32],) */
}

def @main(%var_11397: Tensor[(300, 10), int64]) -> (Tensor[(252), uint8], Tensor[(2, 180), float64], Tensor[(360), float32], Tensor[(300, 10), bool]) {
  %866 = @func_8824() /* ty=(Tensor[(252), uint8],) */;
  %867 = @func_6631() /* ty=(Tensor[(300, 10), int64],) */;
  %868 = %867.0;
  %869 = cast(%var_11397, dtype="bool") /* ty=Tensor[(300, 10), bool] */;
  %870 = shape_of(%868, dtype="int32") /* ty=Tensor[(2), int32] */;
  %871 = cast(%868, dtype="bool") /* ty=Tensor[(300, 10), bool] */;
  %872 = dyn.reshape(%869, %870, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %873 = %866.0;
  %874 = @func_9511() /* ty=Tensor[(2, 180), float64] */;
  %875 = @func_10135() /* ty=Tensor[(360), float32] */;
  %876 = logical_or(%871, %872) /* ty=Tensor[(300, 10), bool] */;
  (%873, %874, %875, %876)
}

def @func_5488(%var_5486: Tensor[(858), uint32]) -> (Tensor[(126, 2), float32], Tensor[(11, 13, 6), bool], Tensor[(858), uint32]) {
  @func_5485(%var_5486) /* ty=(Tensor[(126, 2), float32], Tensor[(11, 13, 6), bool], Tensor[(858), uint32]) */
}

def @func_9512() -> Tensor[(2, 180), float64] {
  %878 = fn () -> Tensor[(2, 180), float64] {
    %877 = @func_4235() /* ty=(Tensor[(2, 180), float64], Tensor[(2, 180), float64]) */;
    %877.1
  };
  %878() /* ty=Tensor[(2, 180), float64] */
}

def @func_5842(%var_5804: Tensor[(24), float64]) -> (Tensor[(252), uint8], Tensor[(6, 2, 2), float32], Tensor[(24), float64], Tensor[(252), uint8]) {
  %879 = @func_5673() /* ty=(Tensor[(252), uint8],) */;
  %880 = cast(%var_5804, dtype="float64") /* ty=Tensor[(24), float64] */;
  %881 = reshape(%880, newshape=[6, 2, 2]) /* ty=Tensor[(6, 2, 2), float64] */;
  %882 = @func_4687(%881) /* ty=(Tensor[(6, 2, 2), float64], Tensor[(6, 2, 2), float32], Tensor[(300, 1), float64]) */;
  %883 = %879.0;
  %884 = %882.1;
  %885 = @func_4977() /* ty=Tensor[(252), uint8] */;
  (%883, %884, %var_5804, %885)
}

def @func_4540() -> (Tensor[(1092), float32],) {
  %886 = @func_4181() /* ty=(Tensor[(13, 1, 10), float32], Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(2, 180), float32]) */;
  %887 = %886.1;
  (%887,)
}

def @func_9400() -> (Tensor[(300, 10), int64], Tensor[(252), uint8]) {
  %891 = fn () -> (Tensor[(300, 10), int64], Tensor[(252), uint8]) {
    %888 = @func_8391() /* ty=(Tensor[(252), uint8], Tensor[(300, 10), int64]) */;
    %889 = %888.1;
    %890 = @func_5555() /* ty=Tensor[(252), uint8] */;
    (%889, %890)
  };
  %891() /* ty=(Tensor[(300, 10), int64], Tensor[(252), uint8]) */
}

def @func_316(%var_315: Tensor[(7, 12, 13), float32]) -> Tensor[(7, 12, 13), float32] {
  %896 = fn (%var_300: Tensor[(7, 12, 13), float32]) -> Tensor[(7, 12, 13), float32] {
    %892 = cast(%var_300, dtype="float32") /* ty=Tensor[(7, 12, 13), float32] */;
    %893 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(7, 12, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %894 = cast(meta[relay.Constant][42] /* ty=Tensor[(7, 12, 13), float32] */, dtype="float32") /* ty=Tensor[(7, 12, 13), float32] */;
    %895 = dyn.reshape(%892, %893, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_mod(%894, %895) /* ty=Tensor[(7, 12, 13), float32] */
  };
  %896(%var_315) /* ty=Tensor[(7, 12, 13), float32] */
}

def @func_6937(%var_6935: Tensor[(300, 10), int64]) -> (Tensor[(300, 10), bool],) {
  @func_6934(%var_6935) /* ty=(Tensor[(300, 10), bool],) */
}

def @func_9847() -> Tensor[(300, 10), int64] {
  @func_9845() /* ty=Tensor[(300, 10), int64] */
}

def @func_7392(%var_7391: int64) -> Tensor[(1, 8), int64] {
  %899 = fn (%var_7364: int64) -> Tensor[(1, 8), int64] {
    %897 = cast(%var_7364, dtype="int64") /* ty=int64 */;
    %898 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 8), int64] */, dtype="int64") /* ty=Tensor[(1, 8), int64] */;
    subtract(%897, %898) /* ty=Tensor[(1, 8), int64] */
  };
  %899(%var_7391) /* ty=Tensor[(1, 8), int64] */
}

def @func_10856() -> Tensor[(300, 10), int64] {
  %901 = fn () -> Tensor[(300, 10), int64] {
    %900 = @func_6991() /* ty=(Tensor[(1092), float32], Tensor[(300, 10), int64]) */;
    %900.1
  };
  %901() /* ty=Tensor[(300, 10), int64] */
}

def @func_11028() -> Tensor[(300, 10), int64] {
  %902 = @func_6418() /* ty=(Tensor[(300, 10), int64],) */;
  %902.0
}

def @func_2772(%var_2685: int8, %var_2686: Tensor[(13, 1, 4), int8], %var_2729: Tensor[(1092), float32], %var_2730: Tensor[(300), float32], %var_2731: Tensor[(120), float32], %var_2732: Tensor[(360), float32]) -> (Tensor[(15, 2, 10), bool], Tensor[(1092), float32], Tensor[(300), float32], Tensor[(120), float32], Tensor[(360), float32], Tensor[(7, 12, 13), float32], Tensor[(13, ?, 4), int64]) {
  %903 = cast(%var_2729, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %904 = cast(%var_2730, dtype="float32") /* ty=Tensor[(300), float32] */;
  %905 = cast(%var_2731, dtype="float32") /* ty=Tensor[(120), float32] */;
  %906 = cast(%var_2732, dtype="float32") /* ty=Tensor[(360), float32] */;
  %907 = reshape(%903, newshape=[1092]) /* ty=Tensor[(1092), float32] */;
  %908 = reshape(%904, newshape=[15, 2, 10]) /* ty=Tensor[(15, 2, 10), float32] */;
  %909 = reshape(%905, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %910 = reshape(%906, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %911 = @func_1657(%907, %908, %909, %910) /* ty=(Tensor[(1092), float32], Tensor[(15, 2, 10), bool], Tensor[(7, 12, 13), float32], Tensor[(120), float32], Tensor[(6, 6, 10), float32], Tensor[(360), float32]) */;
  %912 = cast(%var_2729, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %913 = reshape(%912, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float32] */;
  %914 = cast(%var_2685, dtype="bool") /* ty=bool */;
  %915 = cast(%var_2686, dtype="bool") /* ty=Tensor[(13, 1, 4), bool] */;
  %916 = less_equal(%914, %915) /* ty=Tensor[(13, 1, 4), bool] */;
  %917 = cast(%var_2686, dtype="bool") /* ty=Tensor[(13, 1, 4), bool] */;
  %918 = shape_of(%916, dtype="int32") /* ty=Tensor[(3), int32] */;
  %919 = cast(%916, dtype="bool") /* ty=Tensor[(13, 1, 4), bool] */;
  %920 = dyn.reshape(%917, %918, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %921 = not_equal(%919, %920) /* ty=Tensor[(13, ?, 4), bool] */;
  %922 = cast(%var_2685, dtype="int64") /* ty=int64 */;
  %923 = cast(%921, dtype="int64") /* ty=Tensor[(13, ?, 4), int64] */;
  %924 = %911.1;
  %925 = @func_314(%913) /* ty=Tensor[(7, 12, 13), float32] */;
  %926 = subtract(%922, %923) /* ty=Tensor[(13, ?, 4), int64] */;
  (%924, %var_2729, %var_2730, %var_2731, %var_2732, %925, %926)
}

def @func_11030() -> Tensor[(300, 10), int64] {
  @func_11028() /* ty=Tensor[(300, 10), int64] */
}

def @func_10641() -> Tensor[(12, 8, 12), float64] {
  %927 = fn () -> Tensor[(12, 8, 12), float64] {
    @func_8592() /* ty=Tensor[(12, 8, 12), float64] */
  };
  %927() /* ty=Tensor[(12, 8, 12), float64] */
}

def @func_1405(%var_1404: Tensor[(10, 12, 1), float32]) -> (Tensor[(10, 12, 6), float32], Tensor[(7, 12, 13), float32], Tensor[(7, 12, 13), float32], Tensor[(6, 6, 10), float32], Tensor[(360), float32], Tensor[(7, 12, 13), bool], Tensor[(7, 12, 13), float32], Tensor[(6, 6, 10), float32]) {
  %954 = fn (%var_1315: Tensor[(10, 12, 1), float32]) -> (Tensor[(10, 12, 6), float32], Tensor[(7, 12, 13), float32], Tensor[(7, 12, 13), float32], Tensor[(6, 6, 10), float32], Tensor[(360), float32], Tensor[(7, 12, 13), bool], Tensor[(7, 12, 13), float32], Tensor[(6, 6, 10), float32]) {
    %928 = cast(%var_1315, dtype="float32") /* ty=Tensor[(10, 12, 1), float32] */;
    %929 = cast(meta[relay.Constant][44] /* ty=Tensor[(10, 12, 6), float32] */, dtype="float32") /* ty=Tensor[(10, 12, 6), float32] */;
    %930 = cast(meta[relay.Constant][45] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
    %931 = reshape(%930, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float32] */;
    %932 = cast(meta[relay.Constant][45] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
    %933 = reshape(%932, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float32] */;
    %934 = @func_314(%933) /* ty=Tensor[(7, 12, 13), float32] */;
    %935 = cast(%934, dtype="float32") /* ty=Tensor[(7, 12, 13), float32] */;
    %936 = reshape(%935, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float32] */;
    %937 = cast(meta[relay.Constant][46] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
    %938 = reshape(%937, newshape=[6, 6, 10]) /* ty=Tensor[(6, 6, 10), float32] */;
    %939 = cast(meta[relay.Constant][45] /* ty=Tensor[(1092), float32] */, dtype="bool") /* ty=Tensor[(1092), bool] */;
    %940 = shape_of(%934, dtype="int32") /* ty=Tensor[(3), int32] */;
    %941 = cast(%934, dtype="bool") /* ty=Tensor[(7, 12, 13), bool] */;
    %942 = dyn.reshape(%939, %940, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %943 = cast(%934, dtype="float32") /* ty=Tensor[(7, 12, 13), float32] */;
    %944 = reshape(%943, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float32] */;
    %945 = cast(meta[relay.Constant][46] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
    %946 = reshape(%945, newshape=[6, 6, 10]) /* ty=Tensor[(6, 6, 10), float32] */;
    %947 = floor_divide(%928, %929) /* ty=Tensor[(10, 12, 6), float32] */;
    %948 = @func_314(%931) /* ty=Tensor[(7, 12, 13), float32] */;
    %949 = @func_314(%936) /* ty=Tensor[(7, 12, 13), float32] */;
    %950 = @func_782(%938) /* ty=Tensor[(6, 6, 10), float32] */;
    %951 = less(%941, %942) /* ty=Tensor[(7, 12, 13), bool] */;
    %952 = @func_314(%944) /* ty=Tensor[(7, 12, 13), float32] */;
    %953 = @func_782(%946) /* ty=Tensor[(6, 6, 10), float32] */;
    (%947, %948, %949, %950, meta[relay.Constant][46] /* ty=Tensor[(360), float32] */, %951, %952, %953)
  };
  %954(%var_1404) /* ty=(Tensor[(10, 12, 6), float32], Tensor[(7, 12, 13), float32], Tensor[(7, 12, 13), float32], Tensor[(6, 6, 10), float32], Tensor[(360), float32], Tensor[(7, 12, 13), bool], Tensor[(7, 12, 13), float32], Tensor[(6, 6, 10), float32]) */
}

def @func_4949() -> Tensor[(300, 1), float64] {
  @func_4021() /* ty=Tensor[(300, 1), float64] */
}

def @func_6807() -> (Tensor[(1092), float32], Tensor[(252), uint8], Tensor[(11, 13, 6), bool], Tensor[(858), uint32], Tensor[(300, 10), int64], Tensor[(1092), float32], Tensor[(11, 13, 6), bool]) {
  %955 = @func_5647() /* ty=(Tensor[(1092), float32],) */;
  %956 = %955.0;
  %957 = cast(%956, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %958 = cast(meta[relay.Constant][47] /* ty=Tensor[(858), uint32] */, dtype="uint32") /* ty=Tensor[(858), uint32] */;
  %959 = cast(meta[relay.Constant][47] /* ty=Tensor[(858), uint32] */, dtype="uint32") /* ty=Tensor[(858), uint32] */;
  %960 = reshape(%958, newshape=[11, 13, 6]) /* ty=Tensor[(11, 13, 6), uint32] */;
  %961 = reshape(%959, newshape=[11, 13, 6]) /* ty=Tensor[(11, 13, 6), uint32] */;
  %962 = @func_2444(%960, %961) /* ty=(Tensor[(11, 13, 6), bool],) */;
  %963 = @func_6177() /* ty=(Tensor[(1092), float32], Tensor[(9, 10, 14), float64], Tensor[(1260), int64], Tensor[(1092), float32], Tensor[(1092), float32], Tensor[(360), float32], Tensor[(120), float32], Tensor[(30), int16], Tensor[(360), float32]) */;
  %964 = cast(meta[relay.Constant][47] /* ty=Tensor[(858), uint32] */, dtype="uint32") /* ty=Tensor[(858), uint32] */;
  %965 = %962.0;
  %966 = cast(%965, dtype="uint32") /* ty=Tensor[(11, 13, 6), uint32] */;
  %967 = reshape(%964, newshape=[11, 13, 6]) /* ty=Tensor[(11, 13, 6), uint32] */;
  %968 = reshape(%966, newshape=[11, 13, 6]) /* ty=Tensor[(11, 13, 6), uint32] */;
  %969 = @func_2444(%967, %968) /* ty=(Tensor[(11, 13, 6), bool],) */;
  %970 = asinh(%957) /* ty=Tensor[(1092), float32] */;
  %971 = @func_4977() /* ty=Tensor[(252), uint8] */;
  %972 = @func_6025() /* ty=Tensor[(300, 10), int64] */;
  %973 = %963.3;
  %974 = %969.0;
  (%970, %971, %965, meta[relay.Constant][47] /* ty=Tensor[(858), uint32] */, %972, %973, %974)
}

def @func_7612() -> Tensor[(1092), float32] {
  %976 = fn () -> Tensor[(1092), float32] {
    %975 = @func_6113() /* ty=(Tensor[(1092), float32], Tensor[(252), uint8]) */;
    %975.0
  };
  %976() /* ty=Tensor[(1092), float32] */
}

def @func_11145(%var_11144: Tensor[(3000), float32]) -> (Tensor[(300, 1092), float64], Tensor[(2, 180), float64], Tensor[(3000), uint32], Tensor[(3000), float32], Tensor[(3000), int64]) {
  %1002 = fn (%var_11127: Tensor[(3000), float32]) -> (Tensor[(300, 1092), float64], Tensor[(2, 180), float64], Tensor[(3000), uint32], Tensor[(3000), float32], Tensor[(3000), int64]) {
    %977 = cast(meta[relay.Constant][48] /* ty=Tensor[(3000), int64] */, dtype="float32") /* ty=Tensor[(3000), float32] */;
    %978 = acos(%977) /* ty=Tensor[(3000), float32] */;
    %979 = cast(%var_11127, dtype="float32") /* ty=Tensor[(3000), float32] */;
    %980 = shape_of(%978, dtype="int32") /* ty=Tensor[(1), int32] */;
    %981 = cast(%978, dtype="float32") /* ty=Tensor[(3000), float32] */;
    %982 = dyn.reshape(%979, %980, newshape=[]) /* ty=Tensor[(?), float32] */;
    %983 = power(%981, %982) /* ty=Tensor[(3000), float32] */;
    %984 = cast(meta[relay.Constant][48] /* ty=Tensor[(3000), int64] */, dtype="int64") /* ty=Tensor[(3000), int64] */;
    %985 = reshape(%984, newshape=[300, 10]) /* ty=Tensor[(300, 10), int64] */;
    %986 = @func_6934(%985) /* ty=(Tensor[(300, 10), bool],) */;
    %987 = %986.0;
    %988 = cast(%987, dtype="uint32") /* ty=Tensor[(300, 10), uint32] */;
    %989 = shape_of(%983, dtype="int32") /* ty=Tensor[(1), int32] */;
    %990 = cast(%983, dtype="uint32") /* ty=Tensor[(3000), uint32] */;
    %991 = dyn.reshape(%988, %989, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %992 = cast(%978, dtype="float32") /* ty=Tensor[(3000), float32] */;
    %993 = cast(%var_11127, dtype="int64") /* ty=Tensor[(3000), int64] */;
    %994 = shape_of(%983, dtype="int32") /* ty=Tensor[(1), int32] */;
    %995 = cast(%983, dtype="int64") /* ty=Tensor[(3000), int64] */;
    %996 = dyn.reshape(%993, %994, newshape=[]) /* ty=Tensor[(?), int64] */;
    %997 = @func_9172() /* ty=Tensor[(300, 1092), float64] */;
    %998 = @func_9511() /* ty=Tensor[(2, 180), float64] */;
    %999 = multiply(%990, %991) /* ty=Tensor[(3000), uint32] */;
    %1000 = sinh(%992) /* ty=Tensor[(3000), float32] */;
    %1001 = bitwise_and(%995, %996) /* ty=Tensor[(3000), int64] */;
    (%997, %998, %999, %1000, %1001)
  };
  %1002(%var_11144) /* ty=(Tensor[(300, 1092), float64], Tensor[(2, 180), float64], Tensor[(3000), uint32], Tensor[(3000), float32], Tensor[(3000), int64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen863/build/output.py", line 2895, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:31:16] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

