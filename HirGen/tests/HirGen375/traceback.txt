==========mod==========
#[version = "0.0.5"]
def @func_9955() -> Tensor[(9, 9, 12), float32] {
  %0 = @func_8796() /* ty=(Tensor[(9, 9, 12), float64], Tensor[(3, 13, 12), float64], float64, Tensor[(78, 6), float64]) */;
  %1 = %0.0;
  %2 = cast(%1, dtype="float32") /* ty=Tensor[(9, 9, 12), float32] */;
  sin(%2) /* ty=Tensor[(9, 9, 12), float32] */
}

def @func_6586(%var_6579: Tensor[(3, 9, 2), float32]) -> (Tensor[(3, 9, 2), float32],) {
  %3 = cast(%var_6579, dtype="float32") /* ty=Tensor[(3, 9, 2), float32] */;
  %4 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(3, 9, 2), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(3, 9, 2), float32] */, dtype="float32") /* ty=Tensor[(3, 9, 2), float32] */;
  %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %7 = floor_mod(%5, %6) /* ty=Tensor[(3, 9, 2), float32] */;
  (%7,)
}

def @func_8538() -> (Tensor[(9, 9, 12), uint8],) {
  %8 = @func_7880() /* ty=(Tensor[(9, 9, 12), uint8],) */;
  %9 = %8.0;
  (%9,)
}

def @func_10247() -> Tensor[(9, 9, 12), bool] {
  @func_8545() /* ty=Tensor[(9, 9, 12), bool] */
}

def @func_6747() -> (Tensor[(9, 9, 12), float32],) {
  %10 = cast(meta[relay.Constant][1] /* ty=int8 */, dtype="bool") /* ty=bool */;
  %11 = cast(meta[relay.Constant][2] /* ty=Tensor[(9, 9, 12), int8] */, dtype="bool") /* ty=Tensor[(9, 9, 12), bool] */;
  %12 = less(%10, %11) /* ty=Tensor[(9, 9, 12), bool] */;
  %13 = cast(%12, dtype="float32") /* ty=Tensor[(9, 9, 12), float32] */;
  %14 = rsqrt(%13) /* ty=Tensor[(9, 9, 12), float32] */;
  (%14,)
}

def @func_3311(%var_3304: Tensor[(13, 11, 6), uint8]) -> Tensor[(13, 11, 6), bool] {
  %15 = cast(%var_3304, dtype="bool") /* ty=Tensor[(13, 11, 6), bool] */;
  %16 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(13, 11, 6), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %17 = cast(meta[relay.Constant][3] /* ty=Tensor[(13, 11, 6), uint8] */, dtype="bool") /* ty=Tensor[(13, 11, 6), bool] */;
  %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%17, %18) /* ty=Tensor[(13, 11, 6), bool] */
}

def @func_8500() -> (Tensor[(9, 9, 12), float64], Tensor[(14, 11, 12), float32], Tensor[(1, 1848), float32]) {
  %19 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 1848), float32] */, dtype="float32") /* ty=Tensor[(1, 1848), float32] */;
  %20 = reshape(%19, newshape=[14, 11, 12]) /* ty=Tensor[(14, 11, 12), float32] */;
  %21 = @func_4326(%20) /* ty=(Tensor[(14, 11, 12), float32],) */;
  %22 = @func_8161() /* ty=Tensor[(9, 9, 12), float64] */;
  %23 = %21.0;
  (%22, %23, meta[relay.Constant][4] /* ty=Tensor[(1, 1848), float32] */)
}

def @func_8971(%var_8967: Tensor[(6, 3, 15), bool]) -> Tensor[(6, 3, 15), bool] {
  %24 = cast(%var_8967, dtype="bool") /* ty=Tensor[(6, 3, 15), bool] */;
  %25 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(6, 3, 15), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 3, 15), bool] */, dtype="bool") /* ty=Tensor[(6, 3, 15), bool] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%26, %27) /* ty=Tensor[(6, 3, 15), bool] */
}

def @func_6966(%var_6919: Tensor[(3, 30), float64]) -> (Tensor[(9, 9, 12), float32], Tensor[(9, 9, 12), float64], Tensor[(3, 30), float32], Tensor[(14, 9, 3), int8], Tensor[(1, 378), int8]) {
  %28 = @func_6747() /* ty=(Tensor[(9, 9, 12), float32],) */;
  %29 = cast(%var_6919, dtype="float64") /* ty=Tensor[(3, 30), float64] */;
  %30 = rsqrt(%29) /* ty=Tensor[(3, 30), float64] */;
  %31 = cast(%var_6919, dtype="float64") /* ty=Tensor[(3, 30), float64] */;
  %32 = reshape(%31, newshape=[15, 2, 3]) /* ty=Tensor[(15, 2, 3), float64] */;
  %33 = @func_4016(%32) /* ty=Tensor[(15, 2, 3), float64] */;
  %34 = cast(%33, dtype="float32") /* ty=Tensor[(15, 2, 3), float32] */;
  %35 = shape_of(%30, dtype="int32") /* ty=Tensor[(2), int32] */;
  %36 = cast(%30, dtype="float32") /* ty=Tensor[(3, 30), float32] */;
  %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %38 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 378), int8] */, dtype="int8") /* ty=Tensor[(1, 378), int8] */;
  %39 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 378), int8] */, dtype="int8") /* ty=Tensor[(1, 378), int8] */;
  %40 = reshape(%38, newshape=[14, 9, 3]) /* ty=Tensor[(14, 9, 3), int8] */;
  %41 = reshape(%39, newshape=[14, 9, 3]) /* ty=Tensor[(14, 9, 3), int8] */;
  %42 = @func_2683(%40, %41) /* ty=(Tensor[(14, 9, 3), int8],) */;
  %43 = %28.0;
  %44 = @func_6807() /* ty=Tensor[(9, 9, 12), float64] */;
  %45 = power(%36, %37) /* ty=Tensor[(3, 30), float32] */;
  %46 = %42.0;
  (%43, %44, %45, %46, meta[relay.Constant][6] /* ty=Tensor[(1, 378), int8] */)
}

def @func_7567() -> Tensor[(9, 9, 12), float64] {
  @func_6891() /* ty=Tensor[(9, 9, 12), float64] */
}

def @func_6059(%var_6041: Tensor[(3, 5, 14), float64], %var_6047: Tensor[(15, 45), int64]) -> (Tensor[(3, 5, 14), float64], Tensor[(5, 9, 15), bool], Tensor[(15, 45), int64], Tensor[(14, 9, 3), int8], Tensor[(378), int8]) {
  %47 = cast(%var_6041, dtype="float64") /* ty=Tensor[(3, 5, 14), float64] */;
  %48 = cast(%var_6047, dtype="int64") /* ty=Tensor[(15, 45), int64] */;
  %49 = reshape(%48, newshape=[5, 9, 15]) /* ty=Tensor[(5, 9, 15), int64] */;
  %50 = cast(meta[relay.Constant][7] /* ty=Tensor[(378), int8] */, dtype="int8") /* ty=Tensor[(378), int8] */;
  %51 = cast(meta[relay.Constant][7] /* ty=Tensor[(378), int8] */, dtype="int8") /* ty=Tensor[(378), int8] */;
  %52 = reshape(%50, newshape=[14, 9, 3]) /* ty=Tensor[(14, 9, 3), int8] */;
  %53 = reshape(%51, newshape=[14, 9, 3]) /* ty=Tensor[(14, 9, 3), int8] */;
  %54 = @func_2683(%52, %53) /* ty=(Tensor[(14, 9, 3), int8],) */;
  %55 = cos(%47) /* ty=Tensor[(3, 5, 14), float64] */;
  %56 = @func_5486(%49) /* ty=Tensor[(5, 9, 15), bool] */;
  %57 = %54.0;
  (%55, %56, %var_6047, %57, meta[relay.Constant][7] /* ty=Tensor[(378), int8] */)
}

def @func_7110(%var_7088: Tensor[(6, 15, 2), uint64]) -> Tensor[(6, 15, 2), uint64] {
  %58 = cast(meta[relay.Constant][8] /* ty=Tensor[(6, 15, 2), uint64] */, dtype="uint64") /* ty=Tensor[(6, 15, 2), uint64] */;
  %59 = shape_of(%var_7088, dtype="int32") /* ty=Tensor[(3), int32] */;
  %60 = cast(%var_7088, dtype="uint64") /* ty=Tensor[(6, 15, 2), uint64] */;
  %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  add(%60, %61) /* ty=Tensor[(6, 15, 2), uint64] */
}

def @func_6573(%var_6567: Tensor[(9, 15, 3), int8], %var_6568: Tensor[(9, 15, 3), int8]) -> Tensor[(9, 15, 3), int8] {
  %62 = cast(%var_6568, dtype="int8") /* ty=Tensor[(9, 15, 3), int8] */;
  %63 = shape_of(%var_6567, dtype="int32") /* ty=Tensor[(3), int32] */;
  %64 = cast(%var_6567, dtype="int8") /* ty=Tensor[(9, 15, 3), int8] */;
  %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_or(%64, %65) /* ty=Tensor[(9, 15, 3), int8] */
}

def @func_7362(%var_7332: Tensor[(16, 15, 8), float64], %var_7335: Tensor[(16, 15, 8), float64]) -> (Tensor[(16, 15, 8), int32], Tensor[(5, 9, 15), bool], Tensor[(675), int64], Tensor[(9, 9, 12), float64]) {
  %66 = cast(%var_7332, dtype="float64") /* ty=Tensor[(16, 15, 8), float64] */;
  %67 = log2(%66) /* ty=Tensor[(16, 15, 8), float64] */;
  %68 = cast(%var_7335, dtype="int32") /* ty=Tensor[(16, 15, 8), int32] */;
  %69 = shape_of(%67, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(%67, dtype="int32") /* ty=Tensor[(16, 15, 8), int32] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %72 = cast(meta[relay.Constant][9] /* ty=Tensor[(675), int64] */, dtype="int64") /* ty=Tensor[(675), int64] */;
  %73 = reshape(%72, newshape=[5, 9, 15]) /* ty=Tensor[(5, 9, 15), int64] */;
  %74 = left_shift(%70, %71) /* ty=Tensor[(16, 15, 8), int32] */;
  %75 = @func_5486(%73) /* ty=Tensor[(5, 9, 15), bool] */;
  %76 = @func_6807() /* ty=Tensor[(9, 9, 12), float64] */;
  (%74, %75, meta[relay.Constant][9] /* ty=Tensor[(675), int64] */, %76)
}

def @func_8401() -> (Tensor[(9, 9, 12), float64],) {
  %77 = @func_7048() /* ty=Tensor[(9, 9, 12), float64] */;
  (%77,)
}

def @func_8614() -> (Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64]) {
  %78 = @func_8401() /* ty=(Tensor[(9, 9, 12), float64],) */;
  %79 = @func_8500() /* ty=(Tensor[(9, 9, 12), float64], Tensor[(14, 11, 12), float32], Tensor[(1, 1848), float32]) */;
  %80 = %78.0;
  %81 = %79.0;
  (%80, %81)
}

def @func_9369(%var_9352: Tensor[(9, 9, 12), bool]) -> (Tensor[(6, 3, 9), float32], Tensor[(162), int32], Tensor[(9, 9, 12), uint16]) {
  %82 = cast(meta[relay.Constant][10] /* ty=Tensor[(162), int32] */, dtype="int32") /* ty=Tensor[(162), int32] */;
  %83 = cast(meta[relay.Constant][10] /* ty=Tensor[(162), int32] */, dtype="int32") /* ty=Tensor[(162), int32] */;
  %84 = reshape(%82, newshape=[6, 3, 9]) /* ty=Tensor[(6, 3, 9), int32] */;
  %85 = reshape(%83, newshape=[6, 3, 9]) /* ty=Tensor[(6, 3, 9), int32] */;
  %86 = @func_8545() /* ty=Tensor[(9, 9, 12), bool] */;
  %87 = cast(%var_9352, dtype="uint16") /* ty=Tensor[(9, 9, 12), uint16] */;
  %88 = shape_of(%86, dtype="int32") /* ty=Tensor[(3), int32] */;
  %89 = cast(%86, dtype="uint16") /* ty=Tensor[(9, 9, 12), uint16] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %91 = @func_9135(%84, %85) /* ty=Tensor[(6, 3, 9), float32] */;
  %92 = add(%89, %90) /* ty=Tensor[(9, 9, 12), uint16] */;
  (%91, meta[relay.Constant][10] /* ty=Tensor[(162), int32] */, %92)
}

def @func_5486(%var_5469: Tensor[(5, 9, 15), int64]) -> Tensor[(5, 9, 15), bool] {
  %93 = cast(4 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %94 = cast(%var_5469, dtype="bool") /* ty=Tensor[(5, 9, 15), bool] */;
  greater(%93, %94) /* ty=Tensor[(5, 9, 15), bool] */
}

def @func_1931(%var_1925: Tensor[(11, 11, 15), float64]) -> Tensor[(11, 11, 15), float64] {
  %95 = cast(%var_1925, dtype="float64") /* ty=Tensor[(11, 11, 15), float64] */;
  log2(%95) /* ty=Tensor[(11, 11, 15), float64] */
}

def @func_9434(%var_9408: Tensor[(9, 9, 12), float64]) -> (Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float32]) {
  %96 = @func_8663() /* ty=(Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64]) */;
  %97 = %96.0;
  %98 = cast(%var_9408, dtype="bool") /* ty=Tensor[(9, 9, 12), bool] */;
  %99 = shape_of(%97, dtype="int32") /* ty=Tensor[(3), int32] */;
  %100 = cast(%97, dtype="bool") /* ty=Tensor[(9, 9, 12), bool] */;
  %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %102 = greater_equal(%100, %101) /* ty=Tensor[(9, 9, 12), bool] */;
  %103 = cast(%102, dtype="float64") /* ty=Tensor[(9, 9, 12), float64] */;
  %104 = log(%103) /* ty=Tensor[(9, 9, 12), float64] */;
  %105 = cast(%104, dtype="float64") /* ty=Tensor[(9, 9, 12), float64] */;
  %106 = @func_8092() /* ty=(Tensor[(9, 9, 12), float32],) */;
  %107 = sinh(%105) /* ty=Tensor[(9, 9, 12), float64] */;
  %108 = %106.0;
  (%107, %108)
}

def @func_9305(%var_9287: Tensor[(7, 1, 4), float32], %var_9288: Tensor[(7, 10, 4), float32]) -> (Tensor[(7, 10, 4), float32],) {
  %109 = cast(%var_9287, dtype="float32") /* ty=Tensor[(7, 1, 4), float32] */;
  %110 = cast(%var_9288, dtype="float32") /* ty=Tensor[(7, 10, 4), float32] */;
  %111 = power(%109, %110) /* ty=Tensor[(7, 10, 4), float32] */;
  (%111,)
}

def @func_7413(%var_7402: Tensor[(1680), float32]) -> (Tensor[(9, 9, 12), float64], Tensor[(7, 8, 13), float32], Tensor[(728), float32], Tensor[(1680), float32], Tensor[(352), float64], Tensor[(234), float64], Tensor[(9, 9, 12), float64]) {
  %112 = @func_6830() /* ty=Tensor[(9, 9, 12), float64] */;
  %113 = cast(%112, dtype="float32") /* ty=Tensor[(9, 9, 12), float32] */;
  %114 = asinh(%113) /* ty=Tensor[(9, 9, 12), float32] */;
  %115 = cast(%114, dtype="float64") /* ty=Tensor[(9, 9, 12), float64] */;
  %116 = cast(meta[relay.Constant][11] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
  %117 = cast(%var_7402, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %118 = cast(meta[relay.Constant][12] /* ty=Tensor[(352), float64] */, dtype="float64") /* ty=Tensor[(352), float64] */;
  %119 = cast(%var_7402, dtype="int32") /* ty=Tensor[(1680), int32] */;
  %120 = cast(meta[relay.Constant][13] /* ty=Tensor[(234), float64] */, dtype="float64") /* ty=Tensor[(234), float64] */;
  %121 = reshape(%116, newshape=[7, 8, 13]) /* ty=Tensor[(7, 8, 13), float32] */;
  %122 = reshape(%117, newshape=[1680]) /* ty=Tensor[(1680), float32] */;
  %123 = reshape(%118, newshape=[352]) /* ty=Tensor[(352), float64] */;
  %124 = reshape(%119, newshape=[8, 15, 14]) /* ty=Tensor[(8, 15, 14), int32] */;
  %125 = reshape(%120, newshape=[3, 78]) /* ty=Tensor[(3, 78), float64] */;
  %126 = @func_2414(%121, %122, %123, %124, %125) /* ty=(Tensor[(7, 8, 13), float32], Tensor[(1680), float32], Tensor[(160, 1), uint16], Tensor[(352), float64], Tensor[(2, 7, 1), float64], Tensor[(14), float64], Tensor[(2, 7, 1), float64], Tensor[(8, 15, 14), float32], Tensor[(9, 2, 13), uint64], Tensor[(3, 78), float64]) */;
  %127 = @func_7029() /* ty=(Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64]) */;
  %128 = acosh(%115) /* ty=Tensor[(9, 9, 12), float64] */;
  %129 = %126.0;
  %130 = %127.1;
  (%128, %129, meta[relay.Constant][11] /* ty=Tensor[(728), float32] */, %var_7402, meta[relay.Constant][12] /* ty=Tensor[(352), float64] */, meta[relay.Constant][13] /* ty=Tensor[(234), float64] */, %130)
}

def @func_9029(%var_9001: Tensor[(378), int8], %var_9012: Tensor[(1815), float64], %var_9019: Tensor[(180), uint64], %var_9020: Tensor[(352), float64]) -> (float64, Tensor[(14, 9, 3), int8], Tensor[(378), int8], Tensor[(11, 11, 15), float64], Tensor[(1815), float64], Tensor[(6, 15, 2), uint64], Tensor[(180), uint64], Tensor[(352), float64]) {
  %131 = @func_8962() /* ty=(float64, Tensor[(11, 13, 4), bool], Tensor[(572), bool]) */;
  %132 = cast(%var_9001, dtype="int8") /* ty=Tensor[(378), int8] */;
  %133 = cast(%var_9001, dtype="int8") /* ty=Tensor[(378), int8] */;
  %134 = reshape(%132, newshape=[14, 9, 3]) /* ty=Tensor[(14, 9, 3), int8] */;
  %135 = reshape(%133, newshape=[14, 9, 3]) /* ty=Tensor[(14, 9, 3), int8] */;
  %136 = @func_2683(%134, %135) /* ty=(Tensor[(14, 9, 3), int8],) */;
  %137 = cast(%var_9012, dtype="float64") /* ty=Tensor[(1815), float64] */;
  %138 = reshape(%137, newshape=[11, 11, 15]) /* ty=Tensor[(11, 11, 15), float64] */;
  %139 = cast(%var_9019, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %140 = cast(%var_9020, dtype="float64") /* ty=Tensor[(352), float64] */;
  %141 = reshape(%139, newshape=[180]) /* ty=Tensor[(180), uint64] */;
  %142 = reshape(%140, newshape=[176, 2]) /* ty=Tensor[(176, 2), float64] */;
  %143 = @func_7756(%141, %142) /* ty=(Tensor[(9, 9, 12), float64], Tensor[(6, 15, 2), uint64], Tensor[(180), uint64], Tensor[(9, 9, 12), bool], Tensor[(16, 2, 5), uint16], Tensor[(176, 2), float64]) */;
  %144 = %131.0;
  %145 = %136.0;
  %146 = @func_1931(%138) /* ty=Tensor[(11, 11, 15), float64] */;
  %147 = %143.1;
  (%144, %145, %var_9001, %146, %var_9012, %147, %var_9019, %var_9020)
}

def @func_9135(%var_9088: Tensor[(6, 3, 9), int32], %var_9089: Tensor[(6, 3, 9), int32]) -> Tensor[(6, 3, 9), float32] {
  %148 = cast(%var_9089, dtype="int32") /* ty=Tensor[(6, 3, 9), int32] */;
  %149 = shape_of(%var_9088, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%var_9088, dtype="int32") /* ty=Tensor[(6, 3, 9), int32] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %152 = bitwise_and(%150, %151) /* ty=Tensor[(6, 3, 9), int32] */;
  %153 = cast(%152, dtype="float32") /* ty=Tensor[(6, 3, 9), float32] */;
  atanh(%153) /* ty=Tensor[(6, 3, 9), float32] */
}

def @func_8092() -> (Tensor[(9, 9, 12), float32],) {
  %154 = @func_7848() /* ty=(Tensor[(9, 9, 12), float32],) */;
  %155 = %154.0;
  (%155,)
}

def @func_412(%var_334: Tensor[(8, 15, 14), float32]) -> Tensor[(8, 15, 14), int32] {
  %156 = cast(%var_334, dtype="float32") /* ty=Tensor[(8, 15, 14), float32] */;
  %157 = atanh(%156) /* ty=Tensor[(8, 15, 14), float32] */;
  %158 = cast(%157, dtype="float32") /* ty=Tensor[(8, 15, 14), float32] */;
  %159 = asinh(%158) /* ty=Tensor[(8, 15, 14), float32] */;
  %160 = cast(%159, dtype="int32") /* ty=Tensor[(8, 15, 14), int32] */;
  %161 = shape_of(%157, dtype="int32") /* ty=Tensor[(3), int32] */;
  %162 = cast(%157, dtype="int32") /* ty=Tensor[(8, 15, 14), int32] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_xor(%162, %163) /* ty=Tensor[(8, 15, 14), int32] */
}

def @func_9702() -> (Tensor[(9, 9, 12), uint8], Tensor[(9, 9, 12), float64]) {
  %164 = @func_8538() /* ty=(Tensor[(9, 9, 12), uint8],) */;
  %165 = %164.0;
  %166 = cast(meta[relay.Constant][14] /* ty=Tensor[(9, 9, 12), uint8] */, dtype="uint8") /* ty=Tensor[(9, 9, 12), uint8] */;
  %167 = shape_of(%165, dtype="int32") /* ty=Tensor[(3), int32] */;
  %168 = cast(%165, dtype="uint8") /* ty=Tensor[(9, 9, 12), uint8] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %170 = subtract(%168, %169) /* ty=Tensor[(9, 9, 12), uint8] */;
  %171 = @func_7567() /* ty=Tensor[(9, 9, 12), float64] */;
  (%170, %171)
}

def @func_5936(%var_5909: float64, %var_5910: Tensor[(3, 13, 12), float64]) -> Tensor[(3, 13, 12), float64] {
  %172 = cast(%var_5909, dtype="float64") /* ty=float64 */;
  %173 = cast(%var_5910, dtype="float64") /* ty=Tensor[(3, 13, 12), float64] */;
  power(%172, %173) /* ty=Tensor[(3, 13, 12), float64] */
}

def @func_6830() -> Tensor[(9, 9, 12), float64] {
  @func_6807() /* ty=Tensor[(9, 9, 12), float64] */
}

def @func_8125() -> Tensor[(9, 9, 12), float64] {
  @func_7048() /* ty=Tensor[(9, 9, 12), float64] */
}

def @func_4326(%var_4318: Tensor[(14, 11, 12), float32]) -> (Tensor[(14, 11, 12), float32],) {
  %174 = cast(%var_4318, dtype="float32") /* ty=Tensor[(14, 11, 12), float32] */;
  %175 = sqrt(%174) /* ty=Tensor[(14, 11, 12), float32] */;
  (%175,)
}

def @func_6891() -> Tensor[(9, 9, 12), float64] {
  @func_6830() /* ty=Tensor[(9, 9, 12), float64] */
}

def @main(%var_10726: Tensor[(10, 5, 6), uint64], %var_10727: Tensor[(10, 5, 6), uint64], %var_10750: Tensor[(234), float64], %var_10753: Tensor[(13, 378), int8]) -> (Tensor[(10, 5, 6), uint64], Tensor[(9, 9, 12), float64], Tensor[(15, 1), bool], Tensor[(234), float64], Tensor[(1680), float32], Tensor[(13, 378), bool]) {
  %176 = cast(%var_10727, dtype="uint64") /* ty=Tensor[(10, 5, 6), uint64] */;
  %177 = shape_of(%var_10726, dtype="int32") /* ty=Tensor[(3), int32] */;
  %178 = cast(%var_10726, dtype="uint64") /* ty=Tensor[(10, 5, 6), uint64] */;
  %179 = dyn.reshape(%176, %177, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %180 = @func_8663() /* ty=(Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64]) */;
  %181 = cast(meta[relay.Constant][15] /* ty=Tensor[(15, 1), bool] */, dtype="bool") /* ty=Tensor[(15, 1), bool] */;
  %182 = cast(%var_10750, dtype="float64") /* ty=Tensor[(234), float64] */;
  %183 = cast(meta[relay.Constant][16] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %184 = reshape(%181, newshape=[15]) /* ty=Tensor[(15), bool] */;
  %185 = reshape(%182, newshape=[234]) /* ty=Tensor[(234), float64] */;
  %186 = reshape(%183, newshape=[1680]) /* ty=Tensor[(1680), float32] */;
  %187 = @func_9508(%184, %185, %186) /* ty=(Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64], Tensor[(126, 3), int8], Tensor[(15), bool], Tensor[(234), float64], Tensor[(1, 378), int8], Tensor[(675), int64], Tensor[(2, 960), float64], Tensor[(8, 15, 14), int32], Tensor[(1680), float32]) */;
  %188 = %187.6;
  %189 = cast(%188, dtype="bool") /* ty=Tensor[(1, 378), bool] */;
  %190 = cast(%var_10753, dtype="bool") /* ty=Tensor[(13, 378), bool] */;
  %191 = add(%178, %179) /* ty=Tensor[(10, 5, 6), uint64] */;
  %192 = %180.0;
  %193 = greater_equal(%189, %190) /* ty=Tensor[(13, 378), bool] */;
  (%191, %192, meta[relay.Constant][15] /* ty=Tensor[(15, 1), bool] */, %var_10750, meta[relay.Constant][16] /* ty=Tensor[(1680), float32] */, %193)
}

def @func_8817() -> Tensor[(9, 9, 12), float64] {
  %194 = @func_8401() /* ty=(Tensor[(9, 9, 12), float64],) */;
  %194.0
}

def @func_9851(%var_9787: Tensor[(7, 9), float32]) -> (Tensor[(9, 9, 12), float32], Tensor[(7, 9, ?), bool], Tensor[(2, 7, 1), float64], Tensor[(728), float32], Tensor[(1680), float32], Tensor[(176, 2), float64], Tensor[(234), float64]) {
  %195 = @func_8614() /* ty=(Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64]) */;
  %196 = %195.0;
  %197 = cast(%196, dtype="float32") /* ty=Tensor[(9, 9, 12), float32] */;
  %198 = cast(%var_9787, dtype="float32") /* ty=Tensor[(7, 9), float32] */;
  %199 = reshape(%198, newshape=[7, 9, 1]) /* ty=Tensor[(7, 9, 1), float32] */;
  %200 = @func_5627(%199) /* ty=Tensor[(7, 9, 1), float32] */;
  %201 = cast(%var_9787, dtype="bool") /* ty=Tensor[(7, 9), bool] */;
  %202 = shape_of(%200, dtype="int32") /* ty=Tensor[(3), int32] */;
  %203 = cast(%200, dtype="bool") /* ty=Tensor[(7, 9, 1), bool] */;
  %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %205 = cast(meta[relay.Constant][17] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
  %206 = cast(meta[relay.Constant][18] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %207 = cast(meta[relay.Constant][19] /* ty=Tensor[(176, 2), float64] */, dtype="float64") /* ty=Tensor[(176, 2), float64] */;
  %208 = cast(meta[relay.Constant][18] /* ty=Tensor[(1680), float32] */, dtype="int32") /* ty=Tensor[(1680), int32] */;
  %209 = cast(meta[relay.Constant][20] /* ty=Tensor[(234), float64] */, dtype="float64") /* ty=Tensor[(234), float64] */;
  %210 = reshape(%205, newshape=[7, 8, 13]) /* ty=Tensor[(7, 8, 13), float32] */;
  %211 = reshape(%206, newshape=[1680]) /* ty=Tensor[(1680), float32] */;
  %212 = reshape(%207, newshape=[352]) /* ty=Tensor[(352), float64] */;
  %213 = reshape(%208, newshape=[8, 15, 14]) /* ty=Tensor[(8, 15, 14), int32] */;
  %214 = reshape(%209, newshape=[3, 78]) /* ty=Tensor[(3, 78), float64] */;
  %215 = @func_2414(%210, %211, %212, %213, %214) /* ty=(Tensor[(7, 8, 13), float32], Tensor[(1680), float32], Tensor[(160, 1), uint16], Tensor[(352), float64], Tensor[(2, 7, 1), float64], Tensor[(14), float64], Tensor[(2, 7, 1), float64], Tensor[(8, 15, 14), float32], Tensor[(9, 2, 13), uint64], Tensor[(3, 78), float64]) */;
  %216 = erf(%197) /* ty=Tensor[(9, 9, 12), float32] */;
  %217 = less(%203, %204) /* ty=Tensor[(7, 9, ?), bool] */;
  %218 = %215.6;
  (%216, %217, %218, meta[relay.Constant][17] /* ty=Tensor[(728), float32] */, meta[relay.Constant][18] /* ty=Tensor[(1680), float32] */, meta[relay.Constant][19] /* ty=Tensor[(176, 2), float64] */, meta[relay.Constant][20] /* ty=Tensor[(234), float64] */)
}

def @func_8873(%var_8868: float32) -> (Tensor[(6, 15, 15), bool],) {
  %219 = cast(%var_8868, dtype="bool") /* ty=bool */;
  %220 = cast(meta[relay.Constant][21] /* ty=Tensor[(6, 15, 15), float32] */, dtype="bool") /* ty=Tensor[(6, 15, 15), bool] */;
  %221 = less_equal(%219, %220) /* ty=Tensor[(6, 15, 15), bool] */;
  (%221,)
}

def @func_8545() -> Tensor[(9, 9, 12), bool] {
  @func_7818() /* ty=Tensor[(9, 9, 12), bool] */
}

def @func_9216(%var_9177: Tensor[(14, 9, 2), float32]) -> (Tensor[(9, 9, 12), float64], Tensor[(14, 9, 2), bool], Tensor[(9, 9, 12), uint32]) {
  %222 = @func_9067() /* ty=(Tensor[(9, 9, 12), float64],) */;
  %223 = cast(%var_9177, dtype="float32") /* ty=Tensor[(14, 9, 2), float32] */;
  %224 = acosh(%223) /* ty=Tensor[(14, 9, 2), float32] */;
  %225 = cast(%224, dtype="float64") /* ty=Tensor[(14, 9, 2), float64] */;
  %226 = atan(%225) /* ty=Tensor[(14, 9, 2), float64] */;
  %227 = cast(%var_9177, dtype="bool") /* ty=Tensor[(14, 9, 2), bool] */;
  %228 = shape_of(%226, dtype="int32") /* ty=Tensor[(3), int32] */;
  %229 = cast(%226, dtype="bool") /* ty=Tensor[(14, 9, 2), bool] */;
  %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %231 = %222.0;
  %232 = cast(%231, dtype="float64") /* ty=Tensor[(9, 9, 12), float64] */;
  %233 = reshape(%232, newshape=[9, 9, 12]) /* ty=Tensor[(9, 9, 12), float64] */;
  %234 = logical_and(%229, %230) /* ty=Tensor[(14, 9, 2), bool] */;
  %235 = @func_8686(%233) /* ty=Tensor[(9, 9, 12), uint32] */;
  (%231, %234, %235)
}

def @func_8686(%var_8680: Tensor[(9, 9, 12), float64]) -> Tensor[(9, 9, 12), uint32] {
  %236 = @func_8161() /* ty=Tensor[(9, 9, 12), float64] */;
  %237 = cast(%var_8680, dtype="uint32") /* ty=Tensor[(9, 9, 12), uint32] */;
  %238 = shape_of(%236, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(%236, dtype="uint32") /* ty=Tensor[(9, 9, 12), uint32] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  logical_xor(%239, %240) /* ty=Tensor[(9, 9, 12), uint32] */
}

def @func_10372(%var_10352: Tensor[(675, 1), int64]) -> (Tensor[(9, 9, 12), uint8], Tensor[(9, 9, 12), float64], Tensor[(5, 9, 15), bool], Tensor[(675, 1), int64]) {
  %241 = @func_9920() /* ty=(Tensor[(9, 9, 12), uint8],) */;
  %242 = @func_10336() /* ty=(float64, Tensor[(16, 2, 5), uint16], Tensor[(320), uint16], Tensor[(11, 11, 15), float64], Tensor[(1815), float64], Tensor[(9, 9, 12), float32], Tensor[(143, 6), float32]) */;
  %243 = %242.5;
  %244 = cast(%243, dtype="float64") /* ty=Tensor[(9, 9, 12), float64] */;
  %245 = cast(%var_10352, dtype="int64") /* ty=Tensor[(675, 1), int64] */;
  %246 = reshape(%245, newshape=[5, 9, 15]) /* ty=Tensor[(5, 9, 15), int64] */;
  %247 = %241.0;
  %248 = cosh(%244) /* ty=Tensor[(9, 9, 12), float64] */;
  %249 = @func_5486(%246) /* ty=Tensor[(5, 9, 15), bool] */;
  (%247, %248, %249, %var_10352)
}

def @func_10490(%var_10475: Tensor[(8, 14, 14), int32]) -> (Tensor[(8, 14, 14), int32], Tensor[(9, 9, 12), uint16], Tensor[(972), bool]) {
  %250 = cast(%var_10475, dtype="int32") /* ty=Tensor[(8, 14, 14), int32] */;
  %251 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(8, 14, 14), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %252 = cast(meta[relay.Constant][22] /* ty=Tensor[(8, 14, 14), int32] */, dtype="int32") /* ty=Tensor[(8, 14, 14), int32] */;
  %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %254 = cast(meta[relay.Constant][23] /* ty=Tensor[(972), bool] */, dtype="bool") /* ty=Tensor[(972), bool] */;
  %255 = reshape(%254, newshape=[9, 9, 12]) /* ty=Tensor[(9, 9, 12), bool] */;
  %256 = @func_9369(%255) /* ty=(Tensor[(6, 3, 9), float32], Tensor[(162), int32], Tensor[(9, 9, 12), uint16]) */;
  %257 = right_shift(%252, %253) /* ty=Tensor[(8, 14, 14), int32] */;
  %258 = %256.2;
  (%257, %258, meta[relay.Constant][23] /* ty=Tensor[(972), bool] */)
}

def @func_10107() -> Tensor[(9, 9, 12), float64] {
  %259 = @func_9067() /* ty=(Tensor[(9, 9, 12), float64],) */;
  %259.0
}

def @func_2276(%var_2261: Tensor[(2, 11, 16), float64]) -> (Tensor[(2, 11, 16), float32], Tensor[(16, 2, 5), uint16], Tensor[(160, 1), uint16]) {
  %260 = cast(%var_2261, dtype="float64") /* ty=Tensor[(2, 11, 16), float64] */;
  %261 = log(%260) /* ty=Tensor[(2, 11, 16), float64] */;
  %262 = cast(%var_2261, dtype="float32") /* ty=Tensor[(2, 11, 16), float32] */;
  %263 = shape_of(%261, dtype="int32") /* ty=Tensor[(3), int32] */;
  %264 = cast(%261, dtype="float32") /* ty=Tensor[(2, 11, 16), float32] */;
  %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %266 = cast(meta[relay.Constant][24] /* ty=Tensor[(160, 1), uint16] */, dtype="uint16") /* ty=Tensor[(160, 1), uint16] */;
  %267 = cast(meta[relay.Constant][24] /* ty=Tensor[(160, 1), uint16] */, dtype="uint16") /* ty=Tensor[(160, 1), uint16] */;
  %268 = reshape(%266, newshape=[16, 2, 5]) /* ty=Tensor[(16, 2, 5), uint16] */;
  %269 = reshape(%267, newshape=[16, 2, 5]) /* ty=Tensor[(16, 2, 5), uint16] */;
  %270 = @func_708(%268, %269) /* ty=(Tensor[(16, 2, 5), uint16],) */;
  %271 = divide(%264, %265) /* ty=Tensor[(2, 11, 16), float32] */;
  %272 = %270.0;
  (%271, %272, meta[relay.Constant][24] /* ty=Tensor[(160, 1), uint16] */)
}

def @func_8340(%var_8327: Tensor[(9, 8, 16), float64]) -> (Tensor[(9, 8, 16), float64], int8, int8) {
  %273 = cast(%var_8327, dtype="float64") /* ty=Tensor[(9, 8, 16), float64] */;
  %274 = cast(meta[relay.Constant][25] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %275 = reshape(%274, newshape=[]) /* ty=int8 */;
  %276 = @func_6871(%275) /* ty=(Tensor[(9, 9, 12), float64], Tensor[(9, 2, 13), uint64], Tensor[(234), float64], Tensor[(15, 9, 15), int8], int8) */;
  %277 = asinh(%273) /* ty=Tensor[(9, 8, 16), float64] */;
  %278 = %276.4;
  (%277, %278, meta[relay.Constant][25] /* ty=int8 */)
}

def @func_8663() -> (Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64]) {
  %279 = @func_6891() /* ty=Tensor[(9, 9, 12), float64] */;
  %280 = @func_6891() /* ty=Tensor[(9, 9, 12), float64] */;
  (%279, %280)
}

def @func_9508(%var_9474: Tensor[(15), bool], %var_9475: Tensor[(234), float64], %var_9499: Tensor[(1680), float32]) -> (Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64], Tensor[(126, 3), int8], Tensor[(15), bool], Tensor[(234), float64], Tensor[(1, 378), int8], Tensor[(675), int64], Tensor[(2, 960), float64], Tensor[(8, 15, 14), int32], Tensor[(1680), float32]) {
  %281 = @func_8500() /* ty=(Tensor[(9, 9, 12), float64], Tensor[(14, 11, 12), float32], Tensor[(1, 1848), float32]) */;
  %282 = %281.0;
  %283 = cast(%282, dtype="float64") /* ty=Tensor[(9, 9, 12), float64] */;
  %284 = cast(%var_9474, dtype="bool") /* ty=Tensor[(15), bool] */;
  %285 = cast(%var_9475, dtype="float64") /* ty=Tensor[(234), float64] */;
  %286 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 378), int8] */, dtype="int8") /* ty=Tensor[(1, 378), int8] */;
  %287 = reshape(%284, newshape=[15]) /* ty=Tensor[(15), bool] */;
  %288 = reshape(%285, newshape=[234]) /* ty=Tensor[(234), float64] */;
  %289 = reshape(%286, newshape=[126, 3]) /* ty=Tensor[(126, 3), int8] */;
  %290 = @func_6492(%287, %288, %289) /* ty=(Tensor[(12, 13, 2), float64], Tensor[(2, 7, 1), float64], Tensor[(15), bool], Tensor[(225), bool], Tensor[(234), float64], Tensor[(1680), float32], Tensor[(352), float64], Tensor[(126, 3), int8]) */;
  %291 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 960), float64] */, dtype="float64") /* ty=Tensor[(2, 960), float64] */;
  %292 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 960), float64] */, dtype="float64") /* ty=Tensor[(2, 960), float64] */;
  %293 = reshape(%291, newshape=[16, 15, 8]) /* ty=Tensor[(16, 15, 8), float64] */;
  %294 = reshape(%292, newshape=[16, 15, 8]) /* ty=Tensor[(16, 15, 8), float64] */;
  %295 = @func_7362(%293, %294) /* ty=(Tensor[(16, 15, 8), int32], Tensor[(5, 9, 15), bool], Tensor[(675), int64], Tensor[(9, 9, 12), float64]) */;
  %296 = cast(%var_9499, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %297 = reshape(%296, newshape=[8, 15, 14]) /* ty=Tensor[(8, 15, 14), float32] */;
  %298 = @func_6807() /* ty=Tensor[(9, 9, 12), float64] */;
  %299 = @func_7567() /* ty=Tensor[(9, 9, 12), float64] */;
  %300 = atan(%283) /* ty=Tensor[(9, 9, 12), float64] */;
  %301 = %290.7;
  %302 = %295.2;
  %303 = @func_412(%297) /* ty=Tensor[(8, 15, 14), int32] */;
  (%298, %299, %300, %301, %var_9474, %var_9475, meta[relay.Constant][26] /* ty=Tensor[(1, 378), int8] */, %302, meta[relay.Constant][27] /* ty=Tensor[(2, 960), float64] */, %303, %var_9499)
}

def @func_7029() -> (Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64]) {
  %304 = @func_6830() /* ty=Tensor[(9, 9, 12), float64] */;
  %305 = @func_6830() /* ty=Tensor[(9, 9, 12), float64] */;
  (%304, %305)
}

def @func_10602() -> (Tensor[(9, 9, 12), bool], Tensor[(14, 9, 3), int8], Tensor[(90), float64], Tensor[(9, 9, 12), bool], Tensor[(9, 9, 12), float64]) {
  %306 = @func_10261() /* ty=(Tensor[(9, 9, 12), bool],) */;
  %307 = cast(meta[relay.Constant][28] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %308 = reshape(%307, newshape=[3, 30]) /* ty=Tensor[(3, 30), float64] */;
  %309 = @func_6966(%308) /* ty=(Tensor[(9, 9, 12), float32], Tensor[(9, 9, 12), float64], Tensor[(3, 30), float32], Tensor[(14, 9, 3), int8], Tensor[(1, 378), int8]) */;
  %310 = %306.0;
  %311 = %309.3;
  %312 = @func_7818() /* ty=Tensor[(9, 9, 12), bool] */;
  %313 = @func_6807() /* ty=Tensor[(9, 9, 12), float64] */;
  (%310, %311, meta[relay.Constant][28] /* ty=Tensor[(90), float64] */, %312, %313)
}

def @func_1620(%var_1600: Tensor[(6, 8, 5), uint8], %var_1601: Tensor[(6, 8, 5), uint8], %var_1610: Tensor[(6, 8, 5), bool]) -> (Tensor[(6, 8, 5), uint64],) {
  %314 = cast(%var_1601, dtype="bool") /* ty=Tensor[(6, 8, 5), bool] */;
  %315 = shape_of(%var_1600, dtype="int32") /* ty=Tensor[(3), int32] */;
  %316 = cast(%var_1600, dtype="bool") /* ty=Tensor[(6, 8, 5), bool] */;
  %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %318 = greater_equal(%316, %317) /* ty=Tensor[(6, 8, 5), bool] */;
  %319 = cast(%var_1610, dtype="uint64") /* ty=Tensor[(6, 8, 5), uint64] */;
  %320 = shape_of(%318, dtype="int32") /* ty=Tensor[(3), int32] */;
  %321 = cast(%318, dtype="uint64") /* ty=Tensor[(6, 8, 5), uint64] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %323 = bitwise_and(%321, %322) /* ty=Tensor[(6, 8, 5), uint64] */;
  (%323,)
}

def @func_10029() -> (Tensor[(9, 9, 12), float64],) {
  %324 = @func_10000() /* ty=Tensor[(9, 9, 12), float64] */;
  (%324,)
}

def @func_6107(%var_6078: Tensor[(9, 1, 12), float32]) -> Tensor[(9, 1, 12), float32] {
  %325 = cast(%var_6078, dtype="float32") /* ty=Tensor[(9, 1, 12), float32] */;
  %326 = cos(%325) /* ty=Tensor[(9, 1, 12), float32] */;
  %327 = cast(%326, dtype="float64") /* ty=Tensor[(9, 1, 12), float64] */;
  %328 = exp(%327) /* ty=Tensor[(9, 1, 12), float64] */;
  %329 = cast(%328, dtype="float32") /* ty=Tensor[(9, 1, 12), float32] */;
  sigmoid(%329) /* ty=Tensor[(9, 1, 12), float32] */
}

def @func_8796() -> (Tensor[(9, 9, 12), float64], Tensor[(3, 13, 12), float64], float64, Tensor[(78, 6), float64]) {
  %330 = cast(1.20324f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %331 = cast(meta[relay.Constant][29] /* ty=Tensor[(78, 6), float64] */, dtype="float64") /* ty=Tensor[(78, 6), float64] */;
  %332 = reshape(%330, newshape=[]) /* ty=float64 */;
  %333 = reshape(%331, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %334 = @func_7472(%332, %333) /* ty=(Tensor[(9, 9, 12), float64], Tensor[(3, 13, 12), float64], float64, Tensor[(468), float64]) */;
  %335 = @func_6807() /* ty=Tensor[(9, 9, 12), float64] */;
  %336 = %334.1;
  (%335, %336, 1.20324f64 /* ty=float64 */, meta[relay.Constant][29] /* ty=Tensor[(78, 6), float64] */)
}

def @func_9528(%var_9518: Tensor[(9, 9, 12), float32]) -> (Tensor[(9, 9, 12), bool],) {
  %337 = @func_7848() /* ty=(Tensor[(9, 9, 12), float32],) */;
  %338 = %337.0;
  %339 = cast(%var_9518, dtype="bool") /* ty=Tensor[(9, 9, 12), bool] */;
  %340 = shape_of(%338, dtype="int32") /* ty=Tensor[(3), int32] */;
  %341 = cast(%338, dtype="bool") /* ty=Tensor[(9, 9, 12), bool] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %343 = logical_or(%341, %342) /* ty=Tensor[(9, 9, 12), bool] */;
  (%343,)
}

def @func_8721() -> (Tensor[(9, 9, 12), float64],) {
  %344 = @func_8663() /* ty=(Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64]) */;
  %345 = %344.1;
  (%345,)
}

def @func_10233(%var_10208: Tensor[(9, 5, 1), float32]) -> (Tensor[(9, 5, ?), bool], Tensor[(9, 9, 12), bool]) {
  %346 = cast(%var_10208, dtype="float32") /* ty=Tensor[(9, 5, 1), float32] */;
  %347 = sigmoid(%346) /* ty=Tensor[(9, 5, 1), float32] */;
  %348 = cast(%var_10208, dtype="bool") /* ty=Tensor[(9, 5, 1), bool] */;
  %349 = shape_of(%347, dtype="int32") /* ty=Tensor[(3), int32] */;
  %350 = cast(%347, dtype="bool") /* ty=Tensor[(9, 5, 1), bool] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %352 = equal(%350, %351) /* ty=Tensor[(9, 5, ?), bool] */;
  %353 = @func_8545() /* ty=Tensor[(9, 9, 12), bool] */;
  (%352, %353)
}

def @func_8962() -> (float64, Tensor[(11, 13, 4), bool], Tensor[(572), bool]) {
  %354 = @func_8796() /* ty=(Tensor[(9, 9, 12), float64], Tensor[(3, 13, 12), float64], float64, Tensor[(78, 6), float64]) */;
  %355 = cast(meta[relay.Constant][30] /* ty=Tensor[(572), bool] */, dtype="bool") /* ty=Tensor[(572), bool] */;
  %356 = reshape(%355, newshape=[11, 13, 4]) /* ty=Tensor[(11, 13, 4), bool] */;
  %357 = %354.2;
  %358 = @func_5682(%356) /* ty=Tensor[(11, 13, 4), bool] */;
  (%357, %358, meta[relay.Constant][30] /* ty=Tensor[(572), bool] */)
}

def @func_2683(%var_2676: Tensor[(14, 9, 3), int8], %var_2677: Tensor[(14, 9, 3), int8]) -> (Tensor[(14, 9, 3), int8],) {
  %359 = cast(%var_2677, dtype="int8") /* ty=Tensor[(14, 9, 3), int8] */;
  %360 = shape_of(%var_2676, dtype="int32") /* ty=Tensor[(3), int32] */;
  %361 = cast(%var_2676, dtype="int8") /* ty=Tensor[(14, 9, 3), int8] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %363 = bitwise_xor(%361, %362) /* ty=Tensor[(14, 9, 3), int8] */;
  (%363,)
}

def @func_7510(%var_7502: Tensor[(9, 9, 12), float64]) -> Tensor[(9, 9, 12), bool] {
  %364 = @func_6830() /* ty=Tensor[(9, 9, 12), float64] */;
  %365 = cast(%var_7502, dtype="bool") /* ty=Tensor[(9, 9, 12), bool] */;
  %366 = shape_of(%364, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(%364, dtype="bool") /* ty=Tensor[(9, 9, 12), bool] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%367, %368) /* ty=Tensor[(9, 9, 12), bool] */
}

def @func_10498() -> Tensor[(9, 9, 12), float32] {
  %369 = @func_6747() /* ty=(Tensor[(9, 9, 12), float32],) */;
  %369.0
}

def @func_7880() -> (Tensor[(9, 9, 12), uint8],) {
  %370 = @func_7610() /* ty=(Tensor[(9, 9, 12), uint8],) */;
  %371 = %370.0;
  (%371,)
}

def @func_8161() -> Tensor[(9, 9, 12), float64] {
  %372 = @func_7048() /* ty=Tensor[(9, 9, 12), float64] */;
  %373 = cast(%372, dtype="float64") /* ty=Tensor[(9, 9, 12), float64] */;
  log2(%373) /* ty=Tensor[(9, 9, 12), float64] */
}

def @func_10690(%var_10637: Tensor[(2, 3, 6), float32], %var_10653: Tensor[(858, 1), uint8], %var_10667: Tensor[(4, 420), float32]) -> (Tensor[(2, 3, 6), float32], Tensor[(13, 16, 2), float32], Tensor[(416), float32], Tensor[(13, 11, 6), bool], Tensor[(858, 1), uint8], Tensor[(8, 15, 14), int32], Tensor[(4, 420), float32]) {
  %374 = cast(%var_10637, dtype="float32") /* ty=Tensor[(2, 3, 6), float32] */;
  %375 = cast(meta[relay.Constant][31] /* ty=Tensor[(416), float32] */, dtype="float32") /* ty=Tensor[(416), float32] */;
  %376 = reshape(%375, newshape=[13, 16, 2]) /* ty=Tensor[(13, 16, 2), float32] */;
  %377 = cast(%var_10653, dtype="uint8") /* ty=Tensor[(858, 1), uint8] */;
  %378 = reshape(%377, newshape=[13, 11, 6]) /* ty=Tensor[(13, 11, 6), uint8] */;
  %379 = cast(%var_10667, dtype="float32") /* ty=Tensor[(4, 420), float32] */;
  %380 = reshape(%379, newshape=[8, 15, 14]) /* ty=Tensor[(8, 15, 14), float32] */;
  %381 = cosh(%374) /* ty=Tensor[(2, 3, 6), float32] */;
  %382 = @func_7536(%376) /* ty=Tensor[(13, 16, 2), float32] */;
  %383 = @func_3311(%378) /* ty=Tensor[(13, 11, 6), bool] */;
  %384 = @func_412(%380) /* ty=Tensor[(8, 15, 14), int32] */;
  (%381, %382, meta[relay.Constant][31] /* ty=Tensor[(416), float32] */, %383, %var_10653, %384, %var_10667)
}

def @func_7311(%var_7279: Tensor[(1, 10, 8), float64], %var_7292: Tensor[(858, 1), uint8]) -> (Tensor[(1, 10, 8), float64], Tensor[(13, 11, 6), bool], Tensor[(858, 1), uint8], Tensor[(3, 9, 2), float32], Tensor[(54), float32]) {
  %385 = cast(%var_7279, dtype="float64") /* ty=Tensor[(1, 10, 8), float64] */;
  %386 = cast(%var_7292, dtype="uint8") /* ty=Tensor[(858, 1), uint8] */;
  %387 = reshape(%386, newshape=[13, 11, 6]) /* ty=Tensor[(13, 11, 6), uint8] */;
  %388 = cast(meta[relay.Constant][32] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
  %389 = reshape(%388, newshape=[3, 9, 2]) /* ty=Tensor[(3, 9, 2), float32] */;
  %390 = @func_6586(%389) /* ty=(Tensor[(3, 9, 2), float32],) */;
  %391 = log2(%385) /* ty=Tensor[(1, 10, 8), float64] */;
  %392 = @func_3311(%387) /* ty=Tensor[(13, 11, 6), bool] */;
  %393 = %390.0;
  (%391, %392, %var_7292, %393, meta[relay.Constant][32] /* ty=Tensor[(54), float32] */)
}

def @func_4016(%var_4005: Tensor[(15, 2, 3), float64]) -> Tensor[(15, 2, 3), float64] {
  %394 = cast(%var_4005, dtype="float64") /* ty=Tensor[(15, 2, 3), float64] */;
  %395 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(15, 2, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %396 = cast(meta[relay.Constant][33] /* ty=Tensor[(15, 2, 3), float64] */, dtype="float64") /* ty=Tensor[(15, 2, 3), float64] */;
  %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%396, %397) /* ty=Tensor[(15, 2, 3), float64] */
}

def @func_9067() -> (Tensor[(9, 9, 12), float64],) {
  %398 = @func_8125() /* ty=Tensor[(9, 9, 12), float64] */;
  (%398,)
}

def @func_4220(%var_4189: Tensor[(10, 8, 4), uint16], %var_4190: Tensor[(10, 8, 4), uint16], %var_4200: Tensor[(10, 8, 4), bool], %var_4205: Tensor[(858), uint8]) -> (Tensor[(10, 8, 4), int32], Tensor[(16, 2, 5), uint16], Tensor[(160), uint16], Tensor[(10, 8, 4), float32], Tensor[(13, 11, 6), bool], Tensor[(858), uint8], Tensor[(13, 11, 6), bool]) {
  %399 = cast(%var_4190, dtype="bool") /* ty=Tensor[(10, 8, 4), bool] */;
  %400 = shape_of(%var_4189, dtype="int32") /* ty=Tensor[(3), int32] */;
  %401 = cast(%var_4189, dtype="bool") /* ty=Tensor[(10, 8, 4), bool] */;
  %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %403 = less_equal(%401, %402) /* ty=Tensor[(10, 8, 4), bool] */;
  %404 = cast(%403, dtype="int32") /* ty=Tensor[(10, 8, 4), int32] */;
  %405 = shape_of(%var_4189, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%var_4189, dtype="int32") /* ty=Tensor[(10, 8, 4), int32] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %408 = cast(meta[relay.Constant][34] /* ty=Tensor[(160), uint16] */, dtype="uint16") /* ty=Tensor[(160), uint16] */;
  %409 = cast(meta[relay.Constant][34] /* ty=Tensor[(160), uint16] */, dtype="uint16") /* ty=Tensor[(160), uint16] */;
  %410 = reshape(%408, newshape=[16, 2, 5]) /* ty=Tensor[(16, 2, 5), uint16] */;
  %411 = reshape(%409, newshape=[16, 2, 5]) /* ty=Tensor[(16, 2, 5), uint16] */;
  %412 = @func_708(%410, %411) /* ty=(Tensor[(16, 2, 5), uint16],) */;
  %413 = cast(%var_4200, dtype="float32") /* ty=Tensor[(10, 8, 4), float32] */;
  %414 = shape_of(%403, dtype="int32") /* ty=Tensor[(3), int32] */;
  %415 = cast(%403, dtype="float32") /* ty=Tensor[(10, 8, 4), float32] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %417 = cast(%var_4205, dtype="uint8") /* ty=Tensor[(858), uint8] */;
  %418 = reshape(%417, newshape=[13, 11, 6]) /* ty=Tensor[(13, 11, 6), uint8] */;
  %419 = @func_3311(%418) /* ty=Tensor[(13, 11, 6), bool] */;
  %420 = cast(%419, dtype="uint8") /* ty=Tensor[(13, 11, 6), uint8] */;
  %421 = reshape(%420, newshape=[13, 11, 6]) /* ty=Tensor[(13, 11, 6), uint8] */;
  %422 = right_shift(%406, %407) /* ty=Tensor[(10, 8, 4), int32] */;
  %423 = %412.0;
  %424 = floor_divide(%415, %416) /* ty=Tensor[(10, 8, 4), float32] */;
  %425 = @func_3311(%421) /* ty=Tensor[(13, 11, 6), bool] */;
  (%422, %423, meta[relay.Constant][34] /* ty=Tensor[(160), uint16] */, %424, %419, %var_4205, %425)
}

def @func_664(%var_653: Tensor[(2, 7, 1), float64]) -> (Tensor[(2, 7, 1), float64],) {
  %426 = cast(%var_653, dtype="float64") /* ty=Tensor[(2, 7, 1), float64] */;
  %427 = exp(%426) /* ty=Tensor[(2, 7, 1), float64] */;
  (%427,)
}

def @func_10171() -> (Tensor[(9, 9, 12), uint8],) {
  %428 = @func_9920() /* ty=(Tensor[(9, 9, 12), uint8],) */;
  %429 = %428.0;
  (%429,)
}

def @func_6807() -> Tensor[(9, 9, 12), float64] {
  %430 = @func_6747() /* ty=(Tensor[(9, 9, 12), float32],) */;
  %431 = %430.0;
  %432 = cast(%431, dtype="float64") /* ty=Tensor[(9, 9, 12), float64] */;
  acos(%432) /* ty=Tensor[(9, 9, 12), float64] */
}

def @func_9992(%var_9985: Tensor[(1, 4, 5), float32], %var_9986: Tensor[(9, 4, 5), float32]) -> Tensor[(9, 4, 5), float32] {
  %433 = cast(%var_9985, dtype="float32") /* ty=Tensor[(1, 4, 5), float32] */;
  %434 = cast(%var_9986, dtype="float32") /* ty=Tensor[(9, 4, 5), float32] */;
  maximum(%433, %434) /* ty=Tensor[(9, 4, 5), float32] */
}

def @func_1079(%var_1031: Tensor[(9, 2, 13), float64], %var_1040: Tensor[(9, 2, 13), float64]) -> (Tensor[(9, 2, 13), uint64], Tensor[(2, 7, 1), float64], Tensor[(1, 14), float64], Tensor[(9, 2, 13), float64]) {
  %435 = cast(meta[relay.Constant][35] /* ty=Tensor[(9, 2, 13), float64] */, dtype="float64") /* ty=Tensor[(9, 2, 13), float64] */;
  %436 = shape_of(%var_1031, dtype="int32") /* ty=Tensor[(3), int32] */;
  %437 = cast(%var_1031, dtype="float64") /* ty=Tensor[(9, 2, 13), float64] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %439 = multiply(%437, %438) /* ty=Tensor[(9, 2, 13), float64] */;
  %440 = cast(%var_1040, dtype="uint64") /* ty=Tensor[(9, 2, 13), uint64] */;
  %441 = shape_of(%439, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%439, dtype="uint64") /* ty=Tensor[(9, 2, 13), uint64] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %444 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 14), float64] */, dtype="float64") /* ty=Tensor[(1, 14), float64] */;
  %445 = reshape(%444, newshape=[2, 7, 1]) /* ty=Tensor[(2, 7, 1), float64] */;
  %446 = @func_664(%445) /* ty=(Tensor[(2, 7, 1), float64],) */;
  %447 = cast(meta[relay.Constant][37] /* ty=Tensor[(9, 2, 13), float64] */, dtype="float32") /* ty=Tensor[(9, 2, 13), float32] */;
  %448 = shape_of(%439, dtype="int32") /* ty=Tensor[(3), int32] */;
  %449 = cast(%439, dtype="float32") /* ty=Tensor[(9, 2, 13), float32] */;
  %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %451 = divide(%449, %450) /* ty=Tensor[(9, 2, 13), float32] */;
  %452 = cast(%451, dtype="float64") /* ty=Tensor[(9, 2, 13), float64] */;
  %453 = bitwise_xor(%442, %443) /* ty=Tensor[(9, 2, 13), uint64] */;
  %454 = %446.0;
  %455 = sqrt(%452) /* ty=Tensor[(9, 2, 13), float64] */;
  (%453, %454, meta[relay.Constant][36] /* ty=Tensor[(1, 14), float64] */, %455)
}

def @func_8199(%var_8174: Tensor[(1920), float64]) -> (Tensor[(5, 9, 15), bool], Tensor[(1920), float64], Tensor[(9, 9, 12), float64], Tensor[(9, 13, 16), float64]) {
  %456 = cast(%var_8174, dtype="float64") /* ty=Tensor[(1920), float64] */;
  %457 = cast(%var_8174, dtype="float64") /* ty=Tensor[(1920), float64] */;
  %458 = reshape(%456, newshape=[16, 15, 8]) /* ty=Tensor[(16, 15, 8), float64] */;
  %459 = reshape(%457, newshape=[16, 15, 8]) /* ty=Tensor[(16, 15, 8), float64] */;
  %460 = @func_7362(%458, %459) /* ty=(Tensor[(16, 15, 8), int32], Tensor[(5, 9, 15), bool], Tensor[(675), int64], Tensor[(9, 9, 12), float64]) */;
  %461 = cast(meta[relay.Constant][39] /* ty=Tensor[(9, 13, 16), uint16] */, dtype="uint16") /* ty=Tensor[(9, 13, 16), uint16] */;
  %462 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(9, 13, 16), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %463 = cast(meta[relay.Constant][38] /* ty=Tensor[(9, 13, 16), uint16] */, dtype="uint16") /* ty=Tensor[(9, 13, 16), uint16] */;
  %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %465 = maximum(%463, %464) /* ty=Tensor[(9, 13, 16), uint16] */;
  %466 = cast(%465, dtype="float64") /* ty=Tensor[(9, 13, 16), float64] */;
  %467 = %460.1;
  %468 = @func_6830() /* ty=Tensor[(9, 9, 12), float64] */;
  %469 = erf(%466) /* ty=Tensor[(9, 13, 16), float64] */;
  (%467, %var_8174, %468, %469)
}

def @func_7968(%var_7931: Tensor[(6, 11, 7), float64], %var_7943: Tensor[(1680), float32], %var_7961: Tensor[(210), float64], %var_7962: Tensor[(15, 45), int64]) -> (Tensor[(6, 11, 7), float64], Tensor[(352), float64], Tensor[(15), bool], Tensor[(1, 225), bool], Tensor[(1, 234), float64], Tensor[(1680), float32], Tensor[(352), float64], Tensor[(378), int8], Tensor[(5, 9, 15), bool], Tensor[(210), float64], Tensor[(15, 45), int64]) {
  %470 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 11, 7), float64] */, dtype="float64") /* ty=Tensor[(1, 11, 7), float64] */;
  %471 = cast(%var_7931, dtype="float64") /* ty=Tensor[(6, 11, 7), float64] */;
  %472 = cast(meta[relay.Constant][41] /* ty=Tensor[(15), bool] */, dtype="bool") /* ty=Tensor[(15), bool] */;
  %473 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 225), bool] */, dtype="bool") /* ty=Tensor[(1, 225), bool] */;
  %474 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 234), float64] */, dtype="float64") /* ty=Tensor[(1, 234), float64] */;
  %475 = cast(%var_7943, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %476 = cast(meta[relay.Constant][44] /* ty=Tensor[(352), float64] */, dtype="float64") /* ty=Tensor[(352), float64] */;
  %477 = cast(meta[relay.Constant][45] /* ty=Tensor[(378), int8] */, dtype="int8") /* ty=Tensor[(378), int8] */;
  %478 = reshape(%472, newshape=[1, 3, 5]) /* ty=Tensor[(1, 3, 5), bool] */;
  %479 = reshape(%473, newshape=[15, 3, 5]) /* ty=Tensor[(15, 3, 5), bool] */;
  %480 = reshape(%474, newshape=[234]) /* ty=Tensor[(234), float64] */;
  %481 = reshape(%475, newshape=[1680, 1]) /* ty=Tensor[(1680, 1), float32] */;
  %482 = reshape(%476, newshape=[352]) /* ty=Tensor[(352), float64] */;
  %483 = reshape(%477, newshape=[42, 9]) /* ty=Tensor[(42, 9), int8] */;
  %484 = @func_2759(%478, %479, %480, %481, %482, %483) /* ty=(Tensor[(15, 3, 5), bool], Tensor[(1, 14), float64], Tensor[(234), float64], Tensor[(1, 14), float64], Tensor[(3, 78), float64], Tensor[(728), float32], Tensor[(1680, 1), float32], Tensor[(352), float64], Tensor[(2, 11, 16), float32], Tensor[(14, 9, 3), int8], Tensor[(42, 9), int8], Tensor[(1, 14), float64], Tensor[(2, 7, 1), float64], Tensor[(2, 11, 16), float32]) */;
  %485 = cast(%var_7961, dtype="float64") /* ty=Tensor[(210), float64] */;
  %486 = cast(%var_7962, dtype="int64") /* ty=Tensor[(15, 45), int64] */;
  %487 = reshape(%485, newshape=[3, 5, 14]) /* ty=Tensor[(3, 5, 14), float64] */;
  %488 = reshape(%486, newshape=[15, 45]) /* ty=Tensor[(15, 45), int64] */;
  %489 = @func_6059(%487, %488) /* ty=(Tensor[(3, 5, 14), float64], Tensor[(5, 9, 15), bool], Tensor[(15, 45), int64], Tensor[(14, 9, 3), int8], Tensor[(378), int8]) */;
  %490 = floor_divide(%470, %471) /* ty=Tensor[(6, 11, 7), float64] */;
  %491 = %484.7;
  %492 = %489.1;
  (%490, %491, meta[relay.Constant][41] /* ty=Tensor[(15), bool] */, meta[relay.Constant][42] /* ty=Tensor[(1, 225), bool] */, meta[relay.Constant][43] /* ty=Tensor[(1, 234), float64] */, %var_7943, meta[relay.Constant][44] /* ty=Tensor[(352), float64] */, meta[relay.Constant][45] /* ty=Tensor[(378), int8] */, %492, %var_7961, %var_7962)
}

def @func_3961(%var_3958: Tensor[(6, 14, 5), float64]) -> Tensor[(6, 14, 5), float64] {
  %493 = cast(%var_3958, dtype="float64") /* ty=Tensor[(6, 14, 5), float64] */;
  log(%493) /* ty=Tensor[(6, 14, 5), float64] */
}

def @func_10000() -> Tensor[(9, 9, 12), float64] {
  @func_6891() /* ty=Tensor[(9, 9, 12), float64] */
}

def @func_6871(%var_6865: int8) -> (Tensor[(9, 9, 12), float64], Tensor[(9, 2, 13), uint64], Tensor[(234), float64], Tensor[(15, 9, 15), int8], int8) {
  %494 = cast(meta[relay.Constant][46] /* ty=Tensor[(234), float64] */, dtype="float64") /* ty=Tensor[(234), float64] */;
  %495 = cast(meta[relay.Constant][46] /* ty=Tensor[(234), float64] */, dtype="float64") /* ty=Tensor[(234), float64] */;
  %496 = reshape(%494, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), float64] */;
  %497 = reshape(%495, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), float64] */;
  %498 = @func_1079(%496, %497) /* ty=(Tensor[(9, 2, 13), uint64], Tensor[(2, 7, 1), float64], Tensor[(1, 14), float64], Tensor[(9, 2, 13), float64]) */;
  %499 = cast(%var_6865, dtype="int8") /* ty=int8 */;
  %500 = reshape(%499, newshape=[]) /* ty=int8 */;
  %501 = @func_4244(%500) /* ty=(Tensor[(15, 9, 15), int8],) */;
  %502 = @func_6807() /* ty=Tensor[(9, 9, 12), float64] */;
  %503 = %498.0;
  %504 = %501.0;
  (%502, %503, meta[relay.Constant][46] /* ty=Tensor[(234), float64] */, %504, %var_6865)
}

def @func_3126(%var_3091: Tensor[(10, 5, 11), uint8], %var_3104: Tensor[(240), uint8], %var_3110: Tensor[(352), float64]) -> (Tensor[(10, 5, 11), uint8], Tensor[(6, 8, 5), uint64], Tensor[(240), uint8], Tensor[(352), int8], Tensor[(2, 11, 16), float64]) {
  %505 = cast(meta[relay.Constant][47] /* ty=Tensor[(10, 5, 11), uint8] */, dtype="uint8") /* ty=Tensor[(10, 5, 11), uint8] */;
  %506 = shape_of(%var_3091, dtype="int32") /* ty=Tensor[(3), int32] */;
  %507 = cast(%var_3091, dtype="uint8") /* ty=Tensor[(10, 5, 11), uint8] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %509 = cast(%var_3104, dtype="uint8") /* ty=Tensor[(240), uint8] */;
  %510 = cast(%var_3104, dtype="uint8") /* ty=Tensor[(240), uint8] */;
  %511 = cast(%var_3104, dtype="bool") /* ty=Tensor[(240), bool] */;
  %512 = reshape(%509, newshape=[6, 8, 5]) /* ty=Tensor[(6, 8, 5), uint8] */;
  %513 = reshape(%510, newshape=[6, 8, 5]) /* ty=Tensor[(6, 8, 5), uint8] */;
  %514 = reshape(%511, newshape=[6, 8, 5]) /* ty=Tensor[(6, 8, 5), bool] */;
  %515 = @func_1620(%512, %513, %514) /* ty=(Tensor[(6, 8, 5), uint64],) */;
  %516 = cast(meta[relay.Constant][48] /* ty=Tensor[(352), float64] */, dtype="int8") /* ty=Tensor[(352), int8] */;
  %517 = shape_of(%var_3110, dtype="int32") /* ty=Tensor[(1), int32] */;
  %518 = cast(%var_3110, dtype="int8") /* ty=Tensor[(352), int8] */;
  %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?), int8] */;
  %520 = cast(%var_3110, dtype="float64") /* ty=Tensor[(352), float64] */;
  %521 = reshape(%520, newshape=[2, 11, 16]) /* ty=Tensor[(2, 11, 16), float64] */;
  %522 = @func_2276(%521) /* ty=(Tensor[(2, 11, 16), float32], Tensor[(16, 2, 5), uint16], Tensor[(160, 1), uint16]) */;
  %523 = %522.0;
  %524 = cast(%var_3110, dtype="float64") /* ty=Tensor[(352), float64] */;
  %525 = shape_of(%523, dtype="int32") /* ty=Tensor[(3), int32] */;
  %526 = cast(%523, dtype="float64") /* ty=Tensor[(2, 11, 16), float64] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %528 = bitwise_or(%507, %508) /* ty=Tensor[(10, 5, 11), uint8] */;
  %529 = %515.0;
  %530 = subtract(%518, %519) /* ty=Tensor[(352), int8] */;
  %531 = floor_divide(%526, %527) /* ty=Tensor[(2, 11, 16), float64] */;
  (%528, %529, %var_3104, %530, %531)
}

def @func_708(%var_684: Tensor[(16, 2, 5), uint16], %var_685: Tensor[(16, 2, 5), uint16]) -> (Tensor[(16, 2, 5), uint16],) {
  %532 = cast(%var_685, dtype="uint16") /* ty=Tensor[(16, 2, 5), uint16] */;
  %533 = shape_of(%var_684, dtype="int32") /* ty=Tensor[(3), int32] */;
  %534 = cast(%var_684, dtype="uint16") /* ty=Tensor[(16, 2, 5), uint16] */;
  %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %536 = left_shift(%534, %535) /* ty=Tensor[(16, 2, 5), uint16] */;
  (%536,)
}

def @func_7048() -> Tensor[(9, 9, 12), float64] {
  @func_6807() /* ty=Tensor[(9, 9, 12), float64] */
}

def @func_7818() -> Tensor[(9, 9, 12), bool] {
  %537 = @func_6807() /* ty=Tensor[(9, 9, 12), float64] */;
  %538 = cast(meta[relay.Constant][49] /* ty=Tensor[(9, 9, 12), float64] */, dtype="bool") /* ty=Tensor[(9, 9, 12), bool] */;
  %539 = shape_of(%537, dtype="int32") /* ty=Tensor[(3), int32] */;
  %540 = cast(%537, dtype="bool") /* ty=Tensor[(9, 9, 12), bool] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%540, %541) /* ty=Tensor[(9, 9, 12), bool] */
}

def @func_7590(%var_7581: int8, %var_7582: Tensor[(4, 5, 15), int8]) -> (Tensor[(4, 5, 15), int8],) {
  %542 = cast(%var_7581, dtype="int8") /* ty=int8 */;
  %543 = cast(%var_7582, dtype="int8") /* ty=Tensor[(4, 5, 15), int8] */;
  %544 = bitwise_xor(%542, %543) /* ty=Tensor[(4, 5, 15), int8] */;
  (%544,)
}

def @func_7756(%var_7742: Tensor[(180), uint64], %var_7751: Tensor[(176, 2), float64]) -> (Tensor[(9, 9, 12), float64], Tensor[(6, 15, 2), uint64], Tensor[(180), uint64], Tensor[(9, 9, 12), bool], Tensor[(16, 2, 5), uint16], Tensor[(176, 2), float64]) {
  %545 = cast(%var_7742, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %546 = reshape(%545, newshape=[6, 15, 2]) /* ty=Tensor[(6, 15, 2), uint64] */;
  %547 = @func_6891() /* ty=Tensor[(9, 9, 12), float64] */;
  %548 = cast(%547, dtype="float64") /* ty=Tensor[(9, 9, 12), float64] */;
  %549 = reshape(%548, newshape=[9, 9, 12]) /* ty=Tensor[(9, 9, 12), float64] */;
  %550 = @func_7141(%549) /* ty=(Tensor[(9, 9, 12), bool],) */;
  %551 = cast(%var_7751, dtype="float64") /* ty=Tensor[(176, 2), float64] */;
  %552 = reshape(%551, newshape=[2, 11, 16]) /* ty=Tensor[(2, 11, 16), float64] */;
  %553 = @func_2276(%552) /* ty=(Tensor[(2, 11, 16), float32], Tensor[(16, 2, 5), uint16], Tensor[(160, 1), uint16]) */;
  %554 = @func_7110(%546) /* ty=Tensor[(6, 15, 2), uint64] */;
  %555 = %550.0;
  %556 = %553.1;
  (%547, %554, %var_7742, %555, %556, %var_7751)
}

def @func_9611(%var_9600: Tensor[(1, 234), float64], %var_9601: Tensor[(1680), float32], %var_9602: Tensor[(352), float64]) -> (Tensor[(9, 9, 12), float64], Tensor[(352), float64], Tensor[(15), bool], Tensor[(225), bool], Tensor[(1, 234), float64], Tensor[(1680), float32], Tensor[(352), float64], Tensor[(378), int8]) {
  %557 = @func_8614() /* ty=(Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64]) */;
  %558 = cast(meta[relay.Constant][50] /* ty=Tensor[(15), bool] */, dtype="bool") /* ty=Tensor[(15), bool] */;
  %559 = cast(meta[relay.Constant][51] /* ty=Tensor[(225), bool] */, dtype="bool") /* ty=Tensor[(225), bool] */;
  %560 = cast(%var_9600, dtype="float64") /* ty=Tensor[(1, 234), float64] */;
  %561 = cast(%var_9601, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %562 = cast(%var_9602, dtype="float64") /* ty=Tensor[(352), float64] */;
  %563 = cast(meta[relay.Constant][52] /* ty=Tensor[(378), int8] */, dtype="int8") /* ty=Tensor[(378), int8] */;
  %564 = reshape(%558, newshape=[1, 3, 5]) /* ty=Tensor[(1, 3, 5), bool] */;
  %565 = reshape(%559, newshape=[15, 3, 5]) /* ty=Tensor[(15, 3, 5), bool] */;
  %566 = reshape(%560, newshape=[234]) /* ty=Tensor[(234), float64] */;
  %567 = reshape(%561, newshape=[1680, 1]) /* ty=Tensor[(1680, 1), float32] */;
  %568 = reshape(%562, newshape=[352]) /* ty=Tensor[(352), float64] */;
  %569 = reshape(%563, newshape=[42, 9]) /* ty=Tensor[(42, 9), int8] */;
  %570 = @func_2759(%564, %565, %566, %567, %568, %569) /* ty=(Tensor[(15, 3, 5), bool], Tensor[(1, 14), float64], Tensor[(234), float64], Tensor[(1, 14), float64], Tensor[(3, 78), float64], Tensor[(728), float32], Tensor[(1680, 1), float32], Tensor[(352), float64], Tensor[(2, 11, 16), float32], Tensor[(14, 9, 3), int8], Tensor[(42, 9), int8], Tensor[(1, 14), float64], Tensor[(2, 7, 1), float64], Tensor[(2, 11, 16), float32]) */;
  %571 = %557.1;
  %572 = %570.7;
  (%571, %572, meta[relay.Constant][50] /* ty=Tensor[(15), bool] */, meta[relay.Constant][51] /* ty=Tensor[(225), bool] */, %var_9600, %var_9601, %var_9602, meta[relay.Constant][52] /* ty=Tensor[(378), int8] */)
}

def @func_6451(%var_6414: Tensor[(1, 2, 4), float64], %var_6415: Tensor[(2, 2, 4), float64], %var_6437: Tensor[(14), float64]) -> (Tensor[(2, 2, 4), float64], Tensor[(14), float64], Tensor[(2, 7, 1), float32]) {
  %573 = cast(%var_6414, dtype="float64") /* ty=Tensor[(1, 2, 4), float64] */;
  %574 = cast(%var_6415, dtype="float64") /* ty=Tensor[(2, 2, 4), float64] */;
  %575 = cast(%var_6437, dtype="float64") /* ty=Tensor[(14), float64] */;
  %576 = reshape(%575, newshape=[2, 7, 1]) /* ty=Tensor[(2, 7, 1), float64] */;
  %577 = @func_664(%576) /* ty=(Tensor[(2, 7, 1), float64],) */;
  %578 = %577.0;
  %579 = cast(%578, dtype="float32") /* ty=Tensor[(2, 7, 1), float32] */;
  %580 = divide(%573, %574) /* ty=Tensor[(2, 2, 4), float64] */;
  %581 = rsqrt(%579) /* ty=Tensor[(2, 7, 1), float32] */;
  (%580, %var_6437, %581)
}

def @func_10019() -> (Tensor[(9, 9, 12), bool],) {
  %582 = @func_8545() /* ty=Tensor[(9, 9, 12), bool] */;
  (%582,)
}

def @func_5037(%var_5031: Tensor[(15, 8, 13), int8]) -> Tensor[(15, 8, 13), int8] {
  %583 = cast(meta[relay.Constant][53] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %584 = cast(%var_5031, dtype="int8") /* ty=Tensor[(15, 8, 13), int8] */;
  minimum(%583, %584) /* ty=Tensor[(15, 8, 13), int8] */
}

def @func_9920() -> (Tensor[(9, 9, 12), uint8],) {
  %585 = @func_7880() /* ty=(Tensor[(9, 9, 12), uint8],) */;
  %586 = %585.0;
  (%586,)
}

def @func_10336() -> (float64, Tensor[(16, 2, 5), uint16], Tensor[(320), uint16], Tensor[(11, 11, 15), float64], Tensor[(1815), float64], Tensor[(9, 9, 12), float32], Tensor[(143, 6), float32]) {
  %587 = @func_8962() /* ty=(float64, Tensor[(11, 13, 4), bool], Tensor[(572), bool]) */;
  %588 = cast(meta[relay.Constant][54] /* ty=Tensor[(320), uint16] */, dtype="uint16") /* ty=Tensor[(320), uint16] */;
  %589 = cast(meta[relay.Constant][54] /* ty=Tensor[(320), uint16] */, dtype="uint16") /* ty=Tensor[(320), uint16] */;
  %590 = cast(meta[relay.Constant][54] /* ty=Tensor[(320), uint16] */, dtype="bool") /* ty=Tensor[(320), bool] */;
  %591 = cast(meta[relay.Constant][55] /* ty=Tensor[(143, 6), uint8] */, dtype="uint8") /* ty=Tensor[(143, 6), uint8] */;
  %592 = reshape(%588, newshape=[10, 8, 4]) /* ty=Tensor[(10, 8, 4), uint16] */;
  %593 = reshape(%589, newshape=[10, 8, 4]) /* ty=Tensor[(10, 8, 4), uint16] */;
  %594 = reshape(%590, newshape=[10, 8, 4]) /* ty=Tensor[(10, 8, 4), bool] */;
  %595 = reshape(%591, newshape=[858]) /* ty=Tensor[(858), uint8] */;
  %596 = @func_4220(%592, %593, %594, %595) /* ty=(Tensor[(10, 8, 4), int32], Tensor[(16, 2, 5), uint16], Tensor[(160), uint16], Tensor[(10, 8, 4), float32], Tensor[(13, 11, 6), bool], Tensor[(858), uint8], Tensor[(13, 11, 6), bool]) */;
  %597 = cast(meta[relay.Constant][56] /* ty=Tensor[(1815), float64] */, dtype="float64") /* ty=Tensor[(1815), float64] */;
  %598 = reshape(%597, newshape=[11, 11, 15]) /* ty=Tensor[(11, 11, 15), float64] */;
  %599 = cast(meta[relay.Constant][55] /* ty=Tensor[(143, 6), uint8] */, dtype="float32") /* ty=Tensor[(143, 6), float32] */;
  %600 = %587.0;
  %601 = %596.1;
  %602 = @func_1931(%598) /* ty=Tensor[(11, 11, 15), float64] */;
  %603 = @func_9955() /* ty=Tensor[(9, 9, 12), float32] */;
  %604 = log10(%599) /* ty=Tensor[(143, 6), float32] */;
  (%600, %601, meta[relay.Constant][54] /* ty=Tensor[(320), uint16] */, %602, meta[relay.Constant][56] /* ty=Tensor[(1815), float64] */, %603, %604)
}

def @func_2759(%var_2698: Tensor[(1, 3, 5), bool], %var_2699: Tensor[(15, 3, 5), bool], %var_2706: Tensor[(234), float64], %var_2712: Tensor[(1680, 1), float32], %var_2713: Tensor[(352), float64], %var_2727: Tensor[(42, 9), int8]) -> (Tensor[(15, 3, 5), bool], Tensor[(1, 14), float64], Tensor[(234), float64], Tensor[(1, 14), float64], Tensor[(3, 78), float64], Tensor[(728), float32], Tensor[(1680, 1), float32], Tensor[(352), float64], Tensor[(2, 11, 16), float32], Tensor[(14, 9, 3), int8], Tensor[(42, 9), int8], Tensor[(1, 14), float64], Tensor[(2, 7, 1), float64], Tensor[(2, 11, 16), float32]) {
  %605 = cast(%var_2698, dtype="bool") /* ty=Tensor[(1, 3, 5), bool] */;
  %606 = cast(%var_2699, dtype="bool") /* ty=Tensor[(15, 3, 5), bool] */;
  %607 = cast(%var_2706, dtype="float64") /* ty=Tensor[(234), float64] */;
  %608 = cast(%var_2706, dtype="float64") /* ty=Tensor[(234), float64] */;
  %609 = reshape(%607, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), float64] */;
  %610 = reshape(%608, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), float64] */;
  %611 = @func_1079(%609, %610) /* ty=(Tensor[(9, 2, 13), uint64], Tensor[(2, 7, 1), float64], Tensor[(1, 14), float64], Tensor[(9, 2, 13), float64]) */;
  %612 = cast(%var_2706, dtype="float64") /* ty=Tensor[(234), float64] */;
  %613 = cast(%var_2706, dtype="float64") /* ty=Tensor[(234), float64] */;
  %614 = reshape(%612, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), float64] */;
  %615 = reshape(%613, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), float64] */;
  %616 = @func_1079(%614, %615) /* ty=(Tensor[(9, 2, 13), uint64], Tensor[(2, 7, 1), float64], Tensor[(1, 14), float64], Tensor[(9, 2, 13), float64]) */;
  %617 = cast(meta[relay.Constant][57] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
  %618 = cast(%var_2712, dtype="float32") /* ty=Tensor[(1680, 1), float32] */;
  %619 = cast(%var_2713, dtype="float64") /* ty=Tensor[(352), float64] */;
  %620 = cast(%var_2712, dtype="int32") /* ty=Tensor[(1680, 1), int32] */;
  %621 = cast(%var_2706, dtype="float64") /* ty=Tensor[(234), float64] */;
  %622 = reshape(%617, newshape=[7, 8, 13]) /* ty=Tensor[(7, 8, 13), float32] */;
  %623 = reshape(%618, newshape=[1680]) /* ty=Tensor[(1680), float32] */;
  %624 = reshape(%619, newshape=[352]) /* ty=Tensor[(352), float64] */;
  %625 = reshape(%620, newshape=[8, 15, 14]) /* ty=Tensor[(8, 15, 14), int32] */;
  %626 = reshape(%621, newshape=[3, 78]) /* ty=Tensor[(3, 78), float64] */;
  %627 = @func_2414(%622, %623, %624, %625, %626) /* ty=(Tensor[(7, 8, 13), float32], Tensor[(1680), float32], Tensor[(160, 1), uint16], Tensor[(352), float64], Tensor[(2, 7, 1), float64], Tensor[(14), float64], Tensor[(2, 7, 1), float64], Tensor[(8, 15, 14), float32], Tensor[(9, 2, 13), uint64], Tensor[(3, 78), float64]) */;
  %628 = cast(%var_2713, dtype="float64") /* ty=Tensor[(352), float64] */;
  %629 = reshape(%628, newshape=[2, 11, 16]) /* ty=Tensor[(2, 11, 16), float64] */;
  %630 = @func_2276(%629) /* ty=(Tensor[(2, 11, 16), float32], Tensor[(16, 2, 5), uint16], Tensor[(160, 1), uint16]) */;
  %631 = cast(%var_2727, dtype="int8") /* ty=Tensor[(42, 9), int8] */;
  %632 = cast(%var_2727, dtype="int8") /* ty=Tensor[(42, 9), int8] */;
  %633 = reshape(%631, newshape=[14, 9, 3]) /* ty=Tensor[(14, 9, 3), int8] */;
  %634 = reshape(%632, newshape=[14, 9, 3]) /* ty=Tensor[(14, 9, 3), int8] */;
  %635 = @func_2683(%633, %634) /* ty=(Tensor[(14, 9, 3), int8],) */;
  %636 = cast(%var_2706, dtype="float64") /* ty=Tensor[(234), float64] */;
  %637 = %627.9;
  %638 = cast(%637, dtype="float64") /* ty=Tensor[(3, 78), float64] */;
  %639 = reshape(%636, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), float64] */;
  %640 = reshape(%638, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), float64] */;
  %641 = @func_1079(%639, %640) /* ty=(Tensor[(9, 2, 13), uint64], Tensor[(2, 7, 1), float64], Tensor[(1, 14), float64], Tensor[(9, 2, 13), float64]) */;
  %642 = %611.2;
  %643 = cast(%642, dtype="float64") /* ty=Tensor[(1, 14), float64] */;
  %644 = reshape(%643, newshape=[2, 7, 1]) /* ty=Tensor[(2, 7, 1), float64] */;
  %645 = @func_664(%644) /* ty=(Tensor[(2, 7, 1), float64],) */;
  %646 = %630.0;
  %647 = cast(%646, dtype="float64") /* ty=Tensor[(2, 11, 16), float64] */;
  %648 = reshape(%647, newshape=[2, 11, 16]) /* ty=Tensor[(2, 11, 16), float64] */;
  %649 = @func_2276(%648) /* ty=(Tensor[(2, 11, 16), float32], Tensor[(16, 2, 5), uint16], Tensor[(160, 1), uint16]) */;
  %650 = logical_or(%605, %606) /* ty=Tensor[(15, 3, 5), bool] */;
  %651 = %616.2;
  %652 = %635.0;
  %653 = %641.2;
  %654 = %645.0;
  %655 = %649.0;
  (%650, %642, %var_2706, %651, %637, meta[relay.Constant][57] /* ty=Tensor[(728), float32] */, %var_2712, %var_2713, %646, %652, %var_2727, %653, %654, %655)
}

def @func_9645() -> (Tensor[(1, 1848), float32], Tensor[(3, 13, 12), float64]) {
  %656 = @func_8500() /* ty=(Tensor[(9, 9, 12), float64], Tensor[(14, 11, 12), float32], Tensor[(1, 1848), float32]) */;
  %657 = @func_8796() /* ty=(Tensor[(9, 9, 12), float64], Tensor[(3, 13, 12), float64], float64, Tensor[(78, 6), float64]) */;
  %658 = %656.2;
  %659 = %657.1;
  (%658, %659)
}

def @func_8361() -> (Tensor[(9, 9, 12), float32],) {
  %660 = @func_8092() /* ty=(Tensor[(9, 9, 12), float32],) */;
  %661 = %660.0;
  (%661,)
}

def @func_7536(%var_7528: Tensor[(13, 16, 2), float32]) -> Tensor[(13, 16, 2), float32] {
  %662 = cast(%var_7528, dtype="float32") /* ty=Tensor[(13, 16, 2), float32] */;
  log2(%662) /* ty=Tensor[(13, 16, 2), float32] */
}

def @func_10261() -> (Tensor[(9, 9, 12), bool],) {
  %663 = @func_7818() /* ty=Tensor[(9, 9, 12), bool] */;
  (%663,)
}

def @func_5627(%var_5619: Tensor[(7, 9, 1), float32]) -> Tensor[(7, 9, 1), float32] {
  %664 = cast(-3.71573f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %665 = cast(%var_5619, dtype="float32") /* ty=Tensor[(7, 9, 1), float32] */;
  subtract(%664, %665) /* ty=Tensor[(7, 9, 1), float32] */
}

def @func_2414(%var_2330: Tensor[(7, 8, 13), float32], %var_2341: Tensor[(1680), float32], %var_2352: Tensor[(352), float64], %var_2373: Tensor[(8, 15, 14), int32], %var_2408: Tensor[(3, 78), float64]) -> (Tensor[(7, 8, 13), float32], Tensor[(1680), float32], Tensor[(160, 1), uint16], Tensor[(352), float64], Tensor[(2, 7, 1), float64], Tensor[(14), float64], Tensor[(2, 7, 1), float64], Tensor[(8, 15, 14), float32], Tensor[(9, 2, 13), uint64], Tensor[(3, 78), float64]) {
  %666 = cast(%var_2330, dtype="float32") /* ty=Tensor[(7, 8, 13), float32] */;
  %667 = cast(%var_2352, dtype="float64") /* ty=Tensor[(352), float64] */;
  %668 = reshape(%667, newshape=[2, 11, 16]) /* ty=Tensor[(2, 11, 16), float64] */;
  %669 = @func_2276(%668) /* ty=(Tensor[(2, 11, 16), float32], Tensor[(16, 2, 5), uint16], Tensor[(160, 1), uint16]) */;
  %670 = cast(meta[relay.Constant][58] /* ty=Tensor[(14), float64] */, dtype="float64") /* ty=Tensor[(14), float64] */;
  %671 = reshape(%670, newshape=[2, 7, 1]) /* ty=Tensor[(2, 7, 1), float64] */;
  %672 = @func_664(%671) /* ty=(Tensor[(2, 7, 1), float64],) */;
  %673 = %672.0;
  %674 = cast(%673, dtype="float64") /* ty=Tensor[(2, 7, 1), float64] */;
  %675 = reshape(%674, newshape=[2, 7, 1]) /* ty=Tensor[(2, 7, 1), float64] */;
  %676 = @func_664(%675) /* ty=(Tensor[(2, 7, 1), float64],) */;
  %677 = cast(%var_2341, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %678 = reshape(%677, newshape=[8, 15, 14]) /* ty=Tensor[(8, 15, 14), float32] */;
  %679 = @func_412(%678) /* ty=Tensor[(8, 15, 14), int32] */;
  %680 = cast(%var_2373, dtype="float32") /* ty=Tensor[(8, 15, 14), float32] */;
  %681 = shape_of(%679, dtype="int32") /* ty=Tensor[(3), int32] */;
  %682 = cast(%679, dtype="float32") /* ty=Tensor[(8, 15, 14), float32] */;
  %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %684 = cast(%var_2408, dtype="float64") /* ty=Tensor[(3, 78), float64] */;
  %685 = cast(%var_2408, dtype="float64") /* ty=Tensor[(3, 78), float64] */;
  %686 = reshape(%684, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), float64] */;
  %687 = reshape(%685, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), float64] */;
  %688 = @func_1079(%686, %687) /* ty=(Tensor[(9, 2, 13), uint64], Tensor[(2, 7, 1), float64], Tensor[(1, 14), float64], Tensor[(9, 2, 13), float64]) */;
  %689 = exp(%666) /* ty=Tensor[(7, 8, 13), float32] */;
  %690 = %669.2;
  %691 = %676.0;
  %692 = divide(%682, %683) /* ty=Tensor[(8, 15, 14), float32] */;
  %693 = %688.0;
  (%689, %var_2341, %690, %var_2352, %673, meta[relay.Constant][58] /* ty=Tensor[(14), float64] */, %691, %692, %693, %var_2408)
}

def @func_9912(%var_9861: Tensor[(2, 9, 7), float32], %var_9862: Tensor[(2, 9, 7), float32]) -> (Tensor[(2, 9, 7), int64], Tensor[(9, 9, 12), float32]) {
  %694 = cast(%var_9862, dtype="float32") /* ty=Tensor[(2, 9, 7), float32] */;
  %695 = shape_of(%var_9861, dtype="int32") /* ty=Tensor[(3), int32] */;
  %696 = cast(%var_9861, dtype="float32") /* ty=Tensor[(2, 9, 7), float32] */;
  %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %698 = power(%696, %697) /* ty=Tensor[(2, 9, 7), float32] */;
  %699 = cast(%var_9861, dtype="int64") /* ty=Tensor[(2, 9, 7), int64] */;
  %700 = shape_of(%698, dtype="int32") /* ty=Tensor[(3), int32] */;
  %701 = cast(%698, dtype="int64") /* ty=Tensor[(2, 9, 7), int64] */;
  %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %703 = @func_8361() /* ty=(Tensor[(9, 9, 12), float32],) */;
  %704 = bitwise_xor(%701, %702) /* ty=Tensor[(2, 9, 7), int64] */;
  %705 = %703.0;
  (%704, %705)
}

def @func_7141(%var_7127: Tensor[(9, 9, 12), float64]) -> (Tensor[(9, 9, 12), bool],) {
  %706 = @func_6807() /* ty=Tensor[(9, 9, 12), float64] */;
  %707 = cast(%var_7127, dtype="bool") /* ty=Tensor[(9, 9, 12), bool] */;
  %708 = shape_of(%706, dtype="int32") /* ty=Tensor[(3), int32] */;
  %709 = cast(%706, dtype="bool") /* ty=Tensor[(9, 9, 12), bool] */;
  %710 = dyn.reshape(%707, %708, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %711 = less_equal(%709, %710) /* ty=Tensor[(9, 9, 12), bool] */;
  (%711,)
}

def @func_7610() -> (Tensor[(9, 9, 12), uint8],) {
  %712 = @func_6747() /* ty=(Tensor[(9, 9, 12), float32],) */;
  %713 = %712.0;
  %714 = cast(meta[relay.Constant][59] /* ty=Tensor[(9, 9, 12), float32] */, dtype="uint8") /* ty=Tensor[(9, 9, 12), uint8] */;
  %715 = shape_of(%713, dtype="int32") /* ty=Tensor[(3), int32] */;
  %716 = cast(%713, dtype="uint8") /* ty=Tensor[(9, 9, 12), uint8] */;
  %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %718 = bitwise_and(%716, %717) /* ty=Tensor[(9, 9, 12), uint8] */;
  (%718,)
}

def @func_7472(%var_7467: float64, %var_7468: Tensor[(468), float64]) -> (Tensor[(9, 9, 12), float64], Tensor[(3, 13, 12), float64], float64, Tensor[(468), float64]) {
  %719 = cast(%var_7467, dtype="float64") /* ty=float64 */;
  %720 = cast(%var_7468, dtype="float64") /* ty=Tensor[(468), float64] */;
  %721 = reshape(%719, newshape=[]) /* ty=float64 */;
  %722 = reshape(%720, newshape=[3, 13, 12]) /* ty=Tensor[(3, 13, 12), float64] */;
  %723 = @func_6807() /* ty=Tensor[(9, 9, 12), float64] */;
  %724 = @func_5936(%721, %722) /* ty=Tensor[(3, 13, 12), float64] */;
  (%723, %724, %var_7467, %var_7468)
}

def @func_4845(%var_4808: uint64, %var_4809: Tensor[(6, 1, 12), uint64]) -> (Tensor[(6, 1, 12), float32], Tensor[(6, ?, 12), float64], Tensor[(1, 14), float64], Tensor[(234), float64]) {
  %725 = cast(%var_4808, dtype="uint64") /* ty=uint64 */;
  %726 = cast(%var_4809, dtype="uint64") /* ty=Tensor[(6, 1, 12), uint64] */;
  %727 = maximum(%725, %726) /* ty=Tensor[(6, 1, 12), uint64] */;
  %728 = cast(%727, dtype="float32") /* ty=Tensor[(6, 1, 12), float32] */;
  %729 = exp(%728) /* ty=Tensor[(6, 1, 12), float32] */;
  %730 = cast(%729, dtype="float32") /* ty=Tensor[(6, 1, 12), float32] */;
  %731 = cast(%727, dtype="float64") /* ty=Tensor[(6, 1, 12), float64] */;
  %732 = shape_of(%729, dtype="int32") /* ty=Tensor[(3), int32] */;
  %733 = cast(%729, dtype="float64") /* ty=Tensor[(6, 1, 12), float64] */;
  %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %735 = cast(meta[relay.Constant][60] /* ty=Tensor[(234), float64] */, dtype="float64") /* ty=Tensor[(234), float64] */;
  %736 = cast(meta[relay.Constant][60] /* ty=Tensor[(234), float64] */, dtype="float64") /* ty=Tensor[(234), float64] */;
  %737 = reshape(%735, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), float64] */;
  %738 = reshape(%736, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), float64] */;
  %739 = @func_1079(%737, %738) /* ty=(Tensor[(9, 2, 13), uint64], Tensor[(2, 7, 1), float64], Tensor[(1, 14), float64], Tensor[(9, 2, 13), float64]) */;
  %740 = sinh(%730) /* ty=Tensor[(6, 1, 12), float32] */;
  %741 = minimum(%733, %734) /* ty=Tensor[(6, ?, 12), float64] */;
  %742 = %739.2;
  (%740, %741, %742, meta[relay.Constant][60] /* ty=Tensor[(234), float64] */)
}

def @func_4244(%var_4236: int8) -> (Tensor[(15, 9, 15), int8],) {
  %743 = cast(%var_4236, dtype="int8") /* ty=int8 */;
  %744 = cast(meta[relay.Constant][61] /* ty=Tensor[(15, 9, 15), int8] */, dtype="int8") /* ty=Tensor[(15, 9, 15), int8] */;
  %745 = right_shift(%743, %744) /* ty=Tensor[(15, 9, 15), int8] */;
  (%745,)
}

def @func_5682(%var_5669: Tensor[(11, 13, 4), bool]) -> Tensor[(11, 13, 4), bool] {
  %746 = cast(%var_5669, dtype="bool") /* ty=Tensor[(11, 13, 4), bool] */;
  %747 = shape_of(meta[relay.Constant][62] /* ty=Tensor[(11, 13, 4), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %748 = cast(meta[relay.Constant][62] /* ty=Tensor[(11, 13, 4), bool] */, dtype="bool") /* ty=Tensor[(11, 13, 4), bool] */;
  %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%748, %749) /* ty=Tensor[(11, 13, 4), bool] */
}

def @func_10133() -> Tensor[(9, 9, 12), bool] {
  @func_8545() /* ty=Tensor[(9, 9, 12), bool] */
}

def @func_7848() -> (Tensor[(9, 9, 12), float32],) {
  %750 = @func_7610() /* ty=(Tensor[(9, 9, 12), uint8],) */;
  %751 = %750.0;
  %752 = cast(%751, dtype="float32") /* ty=Tensor[(9, 9, 12), float32] */;
  %753 = log10(%752) /* ty=Tensor[(9, 9, 12), float32] */;
  (%753,)
}

def @func_6492(%var_6483: Tensor[(15), bool], %var_6485: Tensor[(234), float64], %var_6488: Tensor[(126, 3), int8]) -> (Tensor[(12, 13, 2), float64], Tensor[(2, 7, 1), float64], Tensor[(15), bool], Tensor[(225), bool], Tensor[(234), float64], Tensor[(1680), float32], Tensor[(352), float64], Tensor[(126, 3), int8]) {
  %754 = cast(meta[relay.Constant][63] /* ty=Tensor[(12, 13, 2), float64] */, dtype="float64") /* ty=Tensor[(12, 13, 2), float64] */;
  %755 = cast(%var_6483, dtype="bool") /* ty=Tensor[(15), bool] */;
  %756 = cast(meta[relay.Constant][64] /* ty=Tensor[(225), bool] */, dtype="bool") /* ty=Tensor[(225), bool] */;
  %757 = cast(%var_6485, dtype="float64") /* ty=Tensor[(234), float64] */;
  %758 = cast(meta[relay.Constant][65] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %759 = cast(meta[relay.Constant][66] /* ty=Tensor[(352), float64] */, dtype="float64") /* ty=Tensor[(352), float64] */;
  %760 = cast(%var_6488, dtype="int8") /* ty=Tensor[(126, 3), int8] */;
  %761 = reshape(%755, newshape=[1, 3, 5]) /* ty=Tensor[(1, 3, 5), bool] */;
  %762 = reshape(%756, newshape=[15, 3, 5]) /* ty=Tensor[(15, 3, 5), bool] */;
  %763 = reshape(%757, newshape=[234]) /* ty=Tensor[(234), float64] */;
  %764 = reshape(%758, newshape=[1680, 1]) /* ty=Tensor[(1680, 1), float32] */;
  %765 = reshape(%759, newshape=[352]) /* ty=Tensor[(352), float64] */;
  %766 = reshape(%760, newshape=[42, 9]) /* ty=Tensor[(42, 9), int8] */;
  %767 = @func_2759(%761, %762, %763, %764, %765, %766) /* ty=(Tensor[(15, 3, 5), bool], Tensor[(1, 14), float64], Tensor[(234), float64], Tensor[(1, 14), float64], Tensor[(3, 78), float64], Tensor[(728), float32], Tensor[(1680, 1), float32], Tensor[(352), float64], Tensor[(2, 11, 16), float32], Tensor[(14, 9, 3), int8], Tensor[(42, 9), int8], Tensor[(1, 14), float64], Tensor[(2, 7, 1), float64], Tensor[(2, 11, 16), float32]) */;
  %768 = sinh(%754) /* ty=Tensor[(12, 13, 2), float64] */;
  %769 = %767.12;
  (%768, %769, %var_6483, meta[relay.Constant][64] /* ty=Tensor[(225), bool] */, %var_6485, meta[relay.Constant][65] /* ty=Tensor[(1680), float32] */, meta[relay.Constant][66] /* ty=Tensor[(352), float64] */, %var_6488)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_7029() -> (Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64]) {
  %0 = @func_6830() /* ty=Tensor[(9, 9, 12), float64] */;
  %1 = @func_6830() /* ty=Tensor[(9, 9, 12), float64] */;
  (%0, %1)
}

def @func_8363() -> (Tensor[(9, 9, 12), float32],) {
  @func_8361() /* ty=(Tensor[(9, 9, 12), float32],) */
}

def @func_9992(%var_9985: Tensor[(1, 4, 5), float32], %var_9986: Tensor[(9, 4, 5), float32]) -> Tensor[(9, 4, 5), float32] {
  %2 = cast(%var_9985, dtype="float32") /* ty=Tensor[(1, 4, 5), float32] */;
  %3 = cast(%var_9986, dtype="float32") /* ty=Tensor[(9, 4, 5), float32] */;
  maximum(%2, %3) /* ty=Tensor[(9, 4, 5), float32] */
}

def @func_8971(%var_8967: Tensor[(6, 3, 15), bool]) -> Tensor[(6, 3, 15), bool] {
  %4 = cast(%var_8967, dtype="bool") /* ty=Tensor[(6, 3, 15), bool] */;
  %5 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(6, 3, 15), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 3, 15), bool] */, dtype="bool") /* ty=Tensor[(6, 3, 15), bool] */;
  %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%6, %7) /* ty=Tensor[(6, 3, 15), bool] */
}

def @func_4016(%var_4005: Tensor[(15, 2, 3), float64]) -> Tensor[(15, 2, 3), float64] {
  %8 = cast(%var_4005, dtype="float64") /* ty=Tensor[(15, 2, 3), float64] */;
  %9 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(15, 2, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %10 = cast(meta[relay.Constant][1] /* ty=Tensor[(15, 2, 3), float64] */, dtype="float64") /* ty=Tensor[(15, 2, 3), float64] */;
  %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%10, %11) /* ty=Tensor[(15, 2, 3), float64] */
}

def @func_10235(%var_10234: Tensor[(9, 5, 1), float32]) -> (Tensor[(9, 5, ?), bool], Tensor[(9, 9, 12), bool]) {
  %20 = fn (%var_10208: Tensor[(9, 5, 1), float32]) -> (Tensor[(9, 5, ?), bool], Tensor[(9, 9, 12), bool]) {
    %12 = cast(%var_10208, dtype="float32") /* ty=Tensor[(9, 5, 1), float32] */;
    %13 = sigmoid(%12) /* ty=Tensor[(9, 5, 1), float32] */;
    %14 = cast(%var_10208, dtype="bool") /* ty=Tensor[(9, 5, 1), bool] */;
    %15 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
    %16 = cast(%13, dtype="bool") /* ty=Tensor[(9, 5, 1), bool] */;
    %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %18 = equal(%16, %17) /* ty=Tensor[(9, 5, ?), bool] */;
    %19 = @func_8545() /* ty=Tensor[(9, 9, 12), bool] */;
    (%18, %19)
  };
  %20(%var_10234) /* ty=(Tensor[(9, 5, ?), bool], Tensor[(9, 9, 12), bool]) */
}

def @func_10604() -> (Tensor[(9, 9, 12), bool], Tensor[(14, 9, 3), int8], Tensor[(90), float64], Tensor[(9, 9, 12), bool], Tensor[(9, 9, 12), float64]) {
  @func_10602() /* ty=(Tensor[(9, 9, 12), bool], Tensor[(14, 9, 3), int8], Tensor[(90), float64], Tensor[(9, 9, 12), bool], Tensor[(9, 9, 12), float64]) */
}

def @func_8162() -> Tensor[(9, 9, 12), float64] {
  %23 = fn () -> Tensor[(9, 9, 12), float64] {
    %21 = @func_7048() /* ty=Tensor[(9, 9, 12), float64] */;
    %22 = cast(%21, dtype="float64") /* ty=Tensor[(9, 9, 12), float64] */;
    log2(%22) /* ty=Tensor[(9, 9, 12), float64] */
  };
  %23() /* ty=Tensor[(9, 9, 12), float64] */
}

def @func_9436(%var_9435: Tensor[(9, 9, 12), float64]) -> (Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float32]) {
  %37 = fn (%var_9408: Tensor[(9, 9, 12), float64]) -> (Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float32]) {
    %24 = @func_8663() /* ty=(Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64]) */;
    %25 = %24.0;
    %26 = cast(%var_9408, dtype="bool") /* ty=Tensor[(9, 9, 12), bool] */;
    %27 = shape_of(%25, dtype="int32") /* ty=Tensor[(3), int32] */;
    %28 = cast(%25, dtype="bool") /* ty=Tensor[(9, 9, 12), bool] */;
    %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %30 = greater_equal(%28, %29) /* ty=Tensor[(9, 9, 12), bool] */;
    %31 = cast(%30, dtype="float64") /* ty=Tensor[(9, 9, 12), float64] */;
    %32 = log(%31) /* ty=Tensor[(9, 9, 12), float64] */;
    %33 = cast(%32, dtype="float64") /* ty=Tensor[(9, 9, 12), float64] */;
    %34 = @func_8092() /* ty=(Tensor[(9, 9, 12), float32],) */;
    %35 = sinh(%33) /* ty=Tensor[(9, 9, 12), float64] */;
    %36 = %34.0;
    (%35, %36)
  };
  %37(%var_9435) /* ty=(Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float32]) */
}

def @func_7031() -> (Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64]) {
  @func_7029() /* ty=(Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64]) */
}

def @func_9067() -> (Tensor[(9, 9, 12), float64],) {
  %38 = @func_8125() /* ty=Tensor[(9, 9, 12), float64] */;
  (%38,)
}

def @func_7611() -> (Tensor[(9, 9, 12), uint8],) {
  %46 = fn () -> (Tensor[(9, 9, 12), uint8],) {
    %39 = @func_6747() /* ty=(Tensor[(9, 9, 12), float32],) */;
    %40 = %39.0;
    %41 = cast(meta[relay.Constant][2] /* ty=Tensor[(9, 9, 12), float32] */, dtype="uint8") /* ty=Tensor[(9, 9, 12), uint8] */;
    %42 = shape_of(%40, dtype="int32") /* ty=Tensor[(3), int32] */;
    %43 = cast(%40, dtype="uint8") /* ty=Tensor[(9, 9, 12), uint8] */;
    %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %45 = bitwise_and(%43, %44) /* ty=Tensor[(9, 9, 12), uint8] */;
    (%45,)
  };
  %46() /* ty=(Tensor[(9, 9, 12), uint8],) */
}

def @func_1933(%var_1932: Tensor[(11, 11, 15), float64]) -> Tensor[(11, 11, 15), float64] {
  %48 = fn (%var_1925: Tensor[(11, 11, 15), float64]) -> Tensor[(11, 11, 15), float64] {
    %47 = cast(%var_1925, dtype="float64") /* ty=Tensor[(11, 11, 15), float64] */;
    log2(%47) /* ty=Tensor[(11, 11, 15), float64] */
  };
  %48(%var_1932) /* ty=Tensor[(11, 11, 15), float64] */
}

def @func_7315(%var_7313: Tensor[(1, 10, 8), float64], %var_7314: Tensor[(858, 1), uint8]) -> (Tensor[(1, 10, 8), float64], Tensor[(13, 11, 6), bool], Tensor[(858, 1), uint8], Tensor[(3, 9, 2), float32], Tensor[(54), float32]) {
  @func_7311(%var_7313, %var_7314) /* ty=(Tensor[(1, 10, 8), float64], Tensor[(13, 11, 6), bool], Tensor[(858, 1), uint8], Tensor[(3, 9, 2), float32], Tensor[(54), float32]) */
}

def @func_8502() -> (Tensor[(9, 9, 12), float64], Tensor[(14, 11, 12), float32], Tensor[(1, 1848), float32]) {
  @func_8500() /* ty=(Tensor[(9, 9, 12), float64], Tensor[(14, 11, 12), float32], Tensor[(1, 1848), float32]) */
}

def @func_9512(%var_9509: Tensor[(15), bool], %var_9510: Tensor[(234), float64], %var_9511: Tensor[(1680), float32]) -> (Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64], Tensor[(126, 3), int8], Tensor[(15), bool], Tensor[(234), float64], Tensor[(1, 378), int8], Tensor[(675), int64], Tensor[(2, 960), float64], Tensor[(8, 15, 14), int32], Tensor[(1680), float32]) {
  %72 = fn (%var_9474: Tensor[(15), bool], %var_9475: Tensor[(234), float64], %var_9499: Tensor[(1680), float32]) -> (Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64], Tensor[(126, 3), int8], Tensor[(15), bool], Tensor[(234), float64], Tensor[(1, 378), int8], Tensor[(675), int64], Tensor[(2, 960), float64], Tensor[(8, 15, 14), int32], Tensor[(1680), float32]) {
    %49 = @func_8500() /* ty=(Tensor[(9, 9, 12), float64], Tensor[(14, 11, 12), float32], Tensor[(1, 1848), float32]) */;
    %50 = %49.0;
    %51 = cast(%50, dtype="float64") /* ty=Tensor[(9, 9, 12), float64] */;
    %52 = cast(%var_9474, dtype="bool") /* ty=Tensor[(15), bool] */;
    %53 = cast(%var_9475, dtype="float64") /* ty=Tensor[(234), float64] */;
    %54 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 378), int8] */, dtype="int8") /* ty=Tensor[(1, 378), int8] */;
    %55 = reshape(%52, newshape=[15]) /* ty=Tensor[(15), bool] */;
    %56 = reshape(%53, newshape=[234]) /* ty=Tensor[(234), float64] */;
    %57 = reshape(%54, newshape=[126, 3]) /* ty=Tensor[(126, 3), int8] */;
    %58 = @func_6492(%55, %56, %57) /* ty=(Tensor[(12, 13, 2), float64], Tensor[(2, 7, 1), float64], Tensor[(15), bool], Tensor[(225), bool], Tensor[(234), float64], Tensor[(1680), float32], Tensor[(352), float64], Tensor[(126, 3), int8]) */;
    %59 = cast(meta[relay.Constant][4] /* ty=Tensor[(2, 960), float64] */, dtype="float64") /* ty=Tensor[(2, 960), float64] */;
    %60 = cast(meta[relay.Constant][4] /* ty=Tensor[(2, 960), float64] */, dtype="float64") /* ty=Tensor[(2, 960), float64] */;
    %61 = reshape(%59, newshape=[16, 15, 8]) /* ty=Tensor[(16, 15, 8), float64] */;
    %62 = reshape(%60, newshape=[16, 15, 8]) /* ty=Tensor[(16, 15, 8), float64] */;
    %63 = @func_7362(%61, %62) /* ty=(Tensor[(16, 15, 8), int32], Tensor[(5, 9, 15), bool], Tensor[(675), int64], Tensor[(9, 9, 12), float64]) */;
    %64 = cast(%var_9499, dtype="float32") /* ty=Tensor[(1680), float32] */;
    %65 = reshape(%64, newshape=[8, 15, 14]) /* ty=Tensor[(8, 15, 14), float32] */;
    %66 = @func_6807() /* ty=Tensor[(9, 9, 12), float64] */;
    %67 = @func_7567() /* ty=Tensor[(9, 9, 12), float64] */;
    %68 = atan(%51) /* ty=Tensor[(9, 9, 12), float64] */;
    %69 = %58.7;
    %70 = %63.2;
    %71 = @func_412(%65) /* ty=Tensor[(8, 15, 14), int32] */;
    (%66, %67, %68, %69, %var_9474, %var_9475, meta[relay.Constant][3] /* ty=Tensor[(1, 378), int8] */, %70, meta[relay.Constant][4] /* ty=Tensor[(2, 960), float64] */, %71, %var_9499)
  };
  %72(%var_9509, %var_9510, %var_9511) /* ty=(Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64], Tensor[(126, 3), int8], Tensor[(15), bool], Tensor[(234), float64], Tensor[(1, 378), int8], Tensor[(675), int64], Tensor[(2, 960), float64], Tensor[(8, 15, 14), int32], Tensor[(1680), float32]) */
}

def @func_6892() -> Tensor[(9, 9, 12), float64] {
  %73 = fn () -> Tensor[(9, 9, 12), float64] {
    @func_6830() /* ty=Tensor[(9, 9, 12), float64] */
  };
  %73() /* ty=Tensor[(9, 9, 12), float64] */
}

def @func_4244(%var_4236: int8) -> (Tensor[(15, 9, 15), int8],) {
  %74 = cast(%var_4236, dtype="int8") /* ty=int8 */;
  %75 = cast(meta[relay.Constant][5] /* ty=Tensor[(15, 9, 15), int8] */, dtype="int8") /* ty=Tensor[(15, 9, 15), int8] */;
  %76 = right_shift(%74, %75) /* ty=Tensor[(15, 9, 15), int8] */;
  (%76,)
}

def @func_10171() -> (Tensor[(9, 9, 12), uint8],) {
  %77 = @func_9920() /* ty=(Tensor[(9, 9, 12), uint8],) */;
  %78 = %77.0;
  (%78,)
}

def @func_10499() -> Tensor[(9, 9, 12), float32] {
  %80 = fn () -> Tensor[(9, 9, 12), float32] {
    %79 = @func_6747() /* ty=(Tensor[(9, 9, 12), float32],) */;
    %79.0
  };
  %80() /* ty=Tensor[(9, 9, 12), float32] */
}

def @func_10019() -> (Tensor[(9, 9, 12), bool],) {
  %81 = @func_8545() /* ty=Tensor[(9, 9, 12), bool] */;
  (%81,)
}

def @func_7818() -> Tensor[(9, 9, 12), bool] {
  %82 = @func_6807() /* ty=Tensor[(9, 9, 12), float64] */;
  %83 = cast(meta[relay.Constant][6] /* ty=Tensor[(9, 9, 12), float64] */, dtype="bool") /* ty=Tensor[(9, 9, 12), bool] */;
  %84 = shape_of(%82, dtype="int32") /* ty=Tensor[(3), int32] */;
  %85 = cast(%82, dtype="bool") /* ty=Tensor[(9, 9, 12), bool] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%85, %86) /* ty=Tensor[(9, 9, 12), bool] */
}

def @func_9371(%var_9370: Tensor[(9, 9, 12), bool]) -> (Tensor[(6, 3, 9), float32], Tensor[(162), int32], Tensor[(9, 9, 12), uint16]) {
  %98 = fn (%var_9352: Tensor[(9, 9, 12), bool]) -> (Tensor[(6, 3, 9), float32], Tensor[(162), int32], Tensor[(9, 9, 12), uint16]) {
    %87 = cast(meta[relay.Constant][7] /* ty=Tensor[(162), int32] */, dtype="int32") /* ty=Tensor[(162), int32] */;
    %88 = cast(meta[relay.Constant][7] /* ty=Tensor[(162), int32] */, dtype="int32") /* ty=Tensor[(162), int32] */;
    %89 = reshape(%87, newshape=[6, 3, 9]) /* ty=Tensor[(6, 3, 9), int32] */;
    %90 = reshape(%88, newshape=[6, 3, 9]) /* ty=Tensor[(6, 3, 9), int32] */;
    %91 = @func_8545() /* ty=Tensor[(9, 9, 12), bool] */;
    %92 = cast(%var_9352, dtype="uint16") /* ty=Tensor[(9, 9, 12), uint16] */;
    %93 = shape_of(%91, dtype="int32") /* ty=Tensor[(3), int32] */;
    %94 = cast(%91, dtype="uint16") /* ty=Tensor[(9, 9, 12), uint16] */;
    %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %96 = @func_9135(%89, %90) /* ty=Tensor[(6, 3, 9), float32] */;
    %97 = add(%94, %95) /* ty=Tensor[(9, 9, 12), uint16] */;
    (%96, meta[relay.Constant][7] /* ty=Tensor[(162), int32] */, %97)
  };
  %98(%var_9370) /* ty=(Tensor[(6, 3, 9), float32], Tensor[(162), int32], Tensor[(9, 9, 12), uint16]) */
}

def @func_8663() -> (Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64]) {
  %99 = @func_6891() /* ty=Tensor[(9, 9, 12), float64] */;
  %100 = @func_6891() /* ty=Tensor[(9, 9, 12), float64] */;
  (%99, %100)
}

def @func_5489(%var_5487: Tensor[(5, 9, 15), int64]) -> Tensor[(5, 9, 15), bool] {
  @func_5486(%var_5487) /* ty=Tensor[(5, 9, 15), bool] */
}

def @func_6456(%var_6453: Tensor[(1, 2, 4), float64], %var_6454: Tensor[(2, 2, 4), float64], %var_6455: Tensor[(14), float64]) -> (Tensor[(2, 2, 4), float64], Tensor[(14), float64], Tensor[(2, 7, 1), float32]) {
  @func_6451(%var_6453, %var_6454, %var_6455) /* ty=(Tensor[(2, 2, 4), float64], Tensor[(14), float64], Tensor[(2, 7, 1), float32]) */
}

def @func_7048() -> Tensor[(9, 9, 12), float64] {
  @func_6807() /* ty=Tensor[(9, 9, 12), float64] */
}

def @func_6451(%var_6414: Tensor[(1, 2, 4), float64], %var_6415: Tensor[(2, 2, 4), float64], %var_6437: Tensor[(14), float64]) -> (Tensor[(2, 2, 4), float64], Tensor[(14), float64], Tensor[(2, 7, 1), float32]) {
  %101 = cast(%var_6414, dtype="float64") /* ty=Tensor[(1, 2, 4), float64] */;
  %102 = cast(%var_6415, dtype="float64") /* ty=Tensor[(2, 2, 4), float64] */;
  %103 = cast(%var_6437, dtype="float64") /* ty=Tensor[(14), float64] */;
  %104 = reshape(%103, newshape=[2, 7, 1]) /* ty=Tensor[(2, 7, 1), float64] */;
  %105 = @func_664(%104) /* ty=(Tensor[(2, 7, 1), float64],) */;
  %106 = %105.0;
  %107 = cast(%106, dtype="float32") /* ty=Tensor[(2, 7, 1), float32] */;
  %108 = divide(%101, %102) /* ty=Tensor[(2, 2, 4), float64] */;
  %109 = rsqrt(%107) /* ty=Tensor[(2, 7, 1), float32] */;
  (%108, %var_6437, %109)
}

def @func_7050() -> Tensor[(9, 9, 12), float64] {
  @func_7048() /* ty=Tensor[(9, 9, 12), float64] */
}

def @func_8546() -> Tensor[(9, 9, 12), bool] {
  %110 = fn () -> Tensor[(9, 9, 12), bool] {
    @func_7818() /* ty=Tensor[(9, 9, 12), bool] */
  };
  %110() /* ty=Tensor[(9, 9, 12), bool] */
}

def @func_9069() -> (Tensor[(9, 9, 12), float64],) {
  @func_9067() /* ty=(Tensor[(9, 9, 12), float64],) */
}

def @func_6830() -> Tensor[(9, 9, 12), float64] {
  @func_6807() /* ty=Tensor[(9, 9, 12), float64] */
}

def @func_3313(%var_3312: Tensor[(13, 11, 6), uint8]) -> Tensor[(13, 11, 6), bool] {
  %115 = fn (%var_3304: Tensor[(13, 11, 6), uint8]) -> Tensor[(13, 11, 6), bool] {
    %111 = cast(%var_3304, dtype="bool") /* ty=Tensor[(13, 11, 6), bool] */;
    %112 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(13, 11, 6), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %113 = cast(meta[relay.Constant][8] /* ty=Tensor[(13, 11, 6), uint8] */, dtype="bool") /* ty=Tensor[(13, 11, 6), bool] */;
    %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%113, %114) /* ty=Tensor[(13, 11, 6), bool] */
  };
  %115(%var_3312) /* ty=Tensor[(13, 11, 6), bool] */
}

def @func_10375(%var_10373: Tensor[(675, 1), int64]) -> (Tensor[(9, 9, 12), uint8], Tensor[(9, 9, 12), float64], Tensor[(5, 9, 15), bool], Tensor[(675, 1), int64]) {
  @func_10372(%var_10373) /* ty=(Tensor[(9, 9, 12), uint8], Tensor[(9, 9, 12), float64], Tensor[(5, 9, 15), bool], Tensor[(675, 1), int64]) */
}

def @func_9645() -> (Tensor[(1, 1848), float32], Tensor[(3, 13, 12), float64]) {
  %116 = @func_8500() /* ty=(Tensor[(9, 9, 12), float64], Tensor[(14, 11, 12), float32], Tensor[(1, 1848), float32]) */;
  %117 = @func_8796() /* ty=(Tensor[(9, 9, 12), float64], Tensor[(3, 13, 12), float64], float64, Tensor[(78, 6), float64]) */;
  %118 = %116.2;
  %119 = %117.1;
  (%118, %119)
}

def @func_9309(%var_9307: Tensor[(7, 1, 4), float32], %var_9308: Tensor[(7, 10, 4), float32]) -> (Tensor[(7, 10, 4), float32],) {
  @func_9305(%var_9307, %var_9308) /* ty=(Tensor[(7, 10, 4), float32],) */
}

def @func_8818() -> Tensor[(9, 9, 12), float64] {
  %121 = fn () -> Tensor[(9, 9, 12), float64] {
    %120 = @func_8401() /* ty=(Tensor[(9, 9, 12), float64],) */;
    %120.0
  };
  %121() /* ty=Tensor[(9, 9, 12), float64] */
}

def @func_10602() -> (Tensor[(9, 9, 12), bool], Tensor[(14, 9, 3), int8], Tensor[(90), float64], Tensor[(9, 9, 12), bool], Tensor[(9, 9, 12), float64]) {
  %122 = @func_10261() /* ty=(Tensor[(9, 9, 12), bool],) */;
  %123 = cast(meta[relay.Constant][9] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %124 = reshape(%123, newshape=[3, 30]) /* ty=Tensor[(3, 30), float64] */;
  %125 = @func_6966(%124) /* ty=(Tensor[(9, 9, 12), float32], Tensor[(9, 9, 12), float64], Tensor[(3, 30), float32], Tensor[(14, 9, 3), int8], Tensor[(1, 378), int8]) */;
  %126 = %122.0;
  %127 = %125.3;
  %128 = @func_7818() /* ty=Tensor[(9, 9, 12), bool] */;
  %129 = @func_6807() /* ty=Tensor[(9, 9, 12), float64] */;
  (%126, %127, meta[relay.Constant][9] /* ty=Tensor[(90), float64] */, %128, %129)
}

def @func_7849() -> (Tensor[(9, 9, 12), float32],) {
  %134 = fn () -> (Tensor[(9, 9, 12), float32],) {
    %130 = @func_7610() /* ty=(Tensor[(9, 9, 12), uint8],) */;
    %131 = %130.0;
    %132 = cast(%131, dtype="float32") /* ty=Tensor[(9, 9, 12), float32] */;
    %133 = log10(%132) /* ty=Tensor[(9, 9, 12), float32] */;
    (%133,)
  };
  %134() /* ty=(Tensor[(9, 9, 12), float32],) */
}

def @func_7760(%var_7758: Tensor[(180), uint64], %var_7759: Tensor[(176, 2), float64]) -> (Tensor[(9, 9, 12), float64], Tensor[(6, 15, 2), uint64], Tensor[(180), uint64], Tensor[(9, 9, 12), bool], Tensor[(16, 2, 5), uint16], Tensor[(176, 2), float64]) {
  @func_7756(%var_7758, %var_7759) /* ty=(Tensor[(9, 9, 12), float64], Tensor[(6, 15, 2), uint64], Tensor[(180), uint64], Tensor[(9, 9, 12), bool], Tensor[(16, 2, 5), uint16], Tensor[(176, 2), float64]) */
}

def @func_5684(%var_5683: Tensor[(11, 13, 4), bool]) -> Tensor[(11, 13, 4), bool] {
  %139 = fn (%var_5669: Tensor[(11, 13, 4), bool]) -> Tensor[(11, 13, 4), bool] {
    %135 = cast(%var_5669, dtype="bool") /* ty=Tensor[(11, 13, 4), bool] */;
    %136 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(11, 13, 4), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %137 = cast(meta[relay.Constant][10] /* ty=Tensor[(11, 13, 4), bool] */, dtype="bool") /* ty=Tensor[(11, 13, 4), bool] */;
    %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%137, %138) /* ty=Tensor[(11, 13, 4), bool] */
  };
  %139(%var_5683) /* ty=Tensor[(11, 13, 4), bool] */
}

def @func_3131(%var_3128: Tensor[(10, 5, 11), uint8], %var_3129: Tensor[(240), uint8], %var_3130: Tensor[(352), float64]) -> (Tensor[(10, 5, 11), uint8], Tensor[(6, 8, 5), uint64], Tensor[(240), uint8], Tensor[(352), int8], Tensor[(2, 11, 16), float64]) {
  @func_3126(%var_3128, %var_3129, %var_3130) /* ty=(Tensor[(10, 5, 11), uint8], Tensor[(6, 8, 5), uint64], Tensor[(240), uint8], Tensor[(352), int8], Tensor[(2, 11, 16), float64]) */
}

def @func_6589(%var_6587: Tensor[(3, 9, 2), float32]) -> (Tensor[(3, 9, 2), float32],) {
  @func_6586(%var_6587) /* ty=(Tensor[(3, 9, 2), float32],) */
}

def @func_8126() -> Tensor[(9, 9, 12), float64] {
  %140 = fn () -> Tensor[(9, 9, 12), float64] {
    @func_7048() /* ty=Tensor[(9, 9, 12), float64] */
  };
  %140() /* ty=Tensor[(9, 9, 12), float64] */
}

def @func_8093() -> (Tensor[(9, 9, 12), float32],) {
  %143 = fn () -> (Tensor[(9, 9, 12), float32],) {
    %141 = @func_7848() /* ty=(Tensor[(9, 9, 12), float32],) */;
    %142 = %141.0;
    (%142,)
  };
  %143() /* ty=(Tensor[(9, 9, 12), float32],) */
}

def @func_9029(%var_9001: Tensor[(378), int8], %var_9012: Tensor[(1815), float64], %var_9019: Tensor[(180), uint64], %var_9020: Tensor[(352), float64]) -> (float64, Tensor[(14, 9, 3), int8], Tensor[(378), int8], Tensor[(11, 11, 15), float64], Tensor[(1815), float64], Tensor[(6, 15, 2), uint64], Tensor[(180), uint64], Tensor[(352), float64]) {
  %144 = @func_8962() /* ty=(float64, Tensor[(11, 13, 4), bool], Tensor[(572), bool]) */;
  %145 = cast(%var_9001, dtype="int8") /* ty=Tensor[(378), int8] */;
  %146 = cast(%var_9001, dtype="int8") /* ty=Tensor[(378), int8] */;
  %147 = reshape(%145, newshape=[14, 9, 3]) /* ty=Tensor[(14, 9, 3), int8] */;
  %148 = reshape(%146, newshape=[14, 9, 3]) /* ty=Tensor[(14, 9, 3), int8] */;
  %149 = @func_2683(%147, %148) /* ty=(Tensor[(14, 9, 3), int8],) */;
  %150 = cast(%var_9012, dtype="float64") /* ty=Tensor[(1815), float64] */;
  %151 = reshape(%150, newshape=[11, 11, 15]) /* ty=Tensor[(11, 11, 15), float64] */;
  %152 = cast(%var_9019, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %153 = cast(%var_9020, dtype="float64") /* ty=Tensor[(352), float64] */;
  %154 = reshape(%152, newshape=[180]) /* ty=Tensor[(180), uint64] */;
  %155 = reshape(%153, newshape=[176, 2]) /* ty=Tensor[(176, 2), float64] */;
  %156 = @func_7756(%154, %155) /* ty=(Tensor[(9, 9, 12), float64], Tensor[(6, 15, 2), uint64], Tensor[(180), uint64], Tensor[(9, 9, 12), bool], Tensor[(16, 2, 5), uint16], Tensor[(176, 2), float64]) */;
  %157 = %144.0;
  %158 = %149.0;
  %159 = @func_1931(%151) /* ty=Tensor[(11, 11, 15), float64] */;
  %160 = %156.1;
  (%157, %158, %var_9001, %159, %var_9012, %160, %var_9019, %var_9020)
}

def @func_8974(%var_8972: Tensor[(6, 3, 15), bool]) -> Tensor[(6, 3, 15), bool] {
  @func_8971(%var_8972) /* ty=Tensor[(6, 3, 15), bool] */
}

def @func_7141(%var_7127: Tensor[(9, 9, 12), float64]) -> (Tensor[(9, 9, 12), bool],) {
  %161 = @func_6807() /* ty=Tensor[(9, 9, 12), float64] */;
  %162 = cast(%var_7127, dtype="bool") /* ty=Tensor[(9, 9, 12), bool] */;
  %163 = shape_of(%161, dtype="int32") /* ty=Tensor[(3), int32] */;
  %164 = cast(%161, dtype="bool") /* ty=Tensor[(9, 9, 12), bool] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %166 = less_equal(%164, %165) /* ty=Tensor[(9, 9, 12), bool] */;
  (%166,)
}

def @func_8540() -> (Tensor[(9, 9, 12), uint8],) {
  @func_8538() /* ty=(Tensor[(9, 9, 12), uint8],) */
}

def @func_2420(%var_2415: Tensor[(7, 8, 13), float32], %var_2416: Tensor[(1680), float32], %var_2417: Tensor[(352), float64], %var_2418: Tensor[(8, 15, 14), int32], %var_2419: Tensor[(3, 78), float64]) -> (Tensor[(7, 8, 13), float32], Tensor[(1680), float32], Tensor[(160, 1), uint16], Tensor[(352), float64], Tensor[(2, 7, 1), float64], Tensor[(14), float64], Tensor[(2, 7, 1), float64], Tensor[(8, 15, 14), float32], Tensor[(9, 2, 13), uint64], Tensor[(3, 78), float64]) {
  %195 = fn (%var_2330: Tensor[(7, 8, 13), float32], %var_2341: Tensor[(1680), float32], %var_2352: Tensor[(352), float64], %var_2373: Tensor[(8, 15, 14), int32], %var_2408: Tensor[(3, 78), float64]) -> (Tensor[(7, 8, 13), float32], Tensor[(1680), float32], Tensor[(160, 1), uint16], Tensor[(352), float64], Tensor[(2, 7, 1), float64], Tensor[(14), float64], Tensor[(2, 7, 1), float64], Tensor[(8, 15, 14), float32], Tensor[(9, 2, 13), uint64], Tensor[(3, 78), float64]) {
    %167 = cast(%var_2330, dtype="float32") /* ty=Tensor[(7, 8, 13), float32] */;
    %168 = cast(%var_2352, dtype="float64") /* ty=Tensor[(352), float64] */;
    %169 = reshape(%168, newshape=[2, 11, 16]) /* ty=Tensor[(2, 11, 16), float64] */;
    %170 = @func_2276(%169) /* ty=(Tensor[(2, 11, 16), float32], Tensor[(16, 2, 5), uint16], Tensor[(160, 1), uint16]) */;
    %171 = cast(meta[relay.Constant][11] /* ty=Tensor[(14), float64] */, dtype="float64") /* ty=Tensor[(14), float64] */;
    %172 = reshape(%171, newshape=[2, 7, 1]) /* ty=Tensor[(2, 7, 1), float64] */;
    %173 = @func_664(%172) /* ty=(Tensor[(2, 7, 1), float64],) */;
    %174 = %173.0;
    %175 = cast(%174, dtype="float64") /* ty=Tensor[(2, 7, 1), float64] */;
    %176 = reshape(%175, newshape=[2, 7, 1]) /* ty=Tensor[(2, 7, 1), float64] */;
    %177 = @func_664(%176) /* ty=(Tensor[(2, 7, 1), float64],) */;
    %178 = cast(%var_2341, dtype="float32") /* ty=Tensor[(1680), float32] */;
    %179 = reshape(%178, newshape=[8, 15, 14]) /* ty=Tensor[(8, 15, 14), float32] */;
    %180 = @func_412(%179) /* ty=Tensor[(8, 15, 14), int32] */;
    %181 = cast(%var_2373, dtype="float32") /* ty=Tensor[(8, 15, 14), float32] */;
    %182 = shape_of(%180, dtype="int32") /* ty=Tensor[(3), int32] */;
    %183 = cast(%180, dtype="float32") /* ty=Tensor[(8, 15, 14), float32] */;
    %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %185 = cast(%var_2408, dtype="float64") /* ty=Tensor[(3, 78), float64] */;
    %186 = cast(%var_2408, dtype="float64") /* ty=Tensor[(3, 78), float64] */;
    %187 = reshape(%185, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), float64] */;
    %188 = reshape(%186, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), float64] */;
    %189 = @func_1079(%187, %188) /* ty=(Tensor[(9, 2, 13), uint64], Tensor[(2, 7, 1), float64], Tensor[(1, 14), float64], Tensor[(9, 2, 13), float64]) */;
    %190 = exp(%167) /* ty=Tensor[(7, 8, 13), float32] */;
    %191 = %170.2;
    %192 = %177.0;
    %193 = divide(%183, %184) /* ty=Tensor[(8, 15, 14), float32] */;
    %194 = %189.0;
    (%190, %var_2341, %191, %var_2352, %174, meta[relay.Constant][11] /* ty=Tensor[(14), float64] */, %192, %193, %194, %var_2408)
  };
  %195(%var_2415, %var_2416, %var_2417, %var_2418, %var_2419) /* ty=(Tensor[(7, 8, 13), float32], Tensor[(1680), float32], Tensor[(160, 1), uint16], Tensor[(352), float64], Tensor[(2, 7, 1), float64], Tensor[(14), float64], Tensor[(2, 7, 1), float64], Tensor[(8, 15, 14), float32], Tensor[(9, 2, 13), uint64], Tensor[(3, 78), float64]) */
}

def @func_9528(%var_9518: Tensor[(9, 9, 12), float32]) -> (Tensor[(9, 9, 12), bool],) {
  %196 = @func_7848() /* ty=(Tensor[(9, 9, 12), float32],) */;
  %197 = %196.0;
  %198 = cast(%var_9518, dtype="bool") /* ty=Tensor[(9, 9, 12), bool] */;
  %199 = shape_of(%197, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(%197, dtype="bool") /* ty=Tensor[(9, 9, 12), bool] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %202 = logical_or(%200, %201) /* ty=Tensor[(9, 9, 12), bool] */;
  (%202,)
}

def @func_2279(%var_2277: Tensor[(2, 11, 16), float64]) -> (Tensor[(2, 11, 16), float32], Tensor[(16, 2, 5), uint16], Tensor[(160, 1), uint16]) {
  @func_2276(%var_2277) /* ty=(Tensor[(2, 11, 16), float32], Tensor[(16, 2, 5), uint16], Tensor[(160, 1), uint16]) */
}

def @func_8723() -> (Tensor[(9, 9, 12), float64],) {
  @func_8721() /* ty=(Tensor[(9, 9, 12), float64],) */
}

def @func_10492(%var_10491: Tensor[(8, 14, 14), int32]) -> (Tensor[(8, 14, 14), int32], Tensor[(9, 9, 12), uint16], Tensor[(972), bool]) {
  %212 = fn (%var_10475: Tensor[(8, 14, 14), int32]) -> (Tensor[(8, 14, 14), int32], Tensor[(9, 9, 12), uint16], Tensor[(972), bool]) {
    %203 = cast(%var_10475, dtype="int32") /* ty=Tensor[(8, 14, 14), int32] */;
    %204 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(8, 14, 14), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %205 = cast(meta[relay.Constant][12] /* ty=Tensor[(8, 14, 14), int32] */, dtype="int32") /* ty=Tensor[(8, 14, 14), int32] */;
    %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %207 = cast(meta[relay.Constant][13] /* ty=Tensor[(972), bool] */, dtype="bool") /* ty=Tensor[(972), bool] */;
    %208 = reshape(%207, newshape=[9, 9, 12]) /* ty=Tensor[(9, 9, 12), bool] */;
    %209 = @func_9369(%208) /* ty=(Tensor[(6, 3, 9), float32], Tensor[(162), int32], Tensor[(9, 9, 12), uint16]) */;
    %210 = right_shift(%205, %206) /* ty=Tensor[(8, 14, 14), int32] */;
    %211 = %209.2;
    (%210, %211, meta[relay.Constant][13] /* ty=Tensor[(972), bool] */)
  };
  %212(%var_10491) /* ty=(Tensor[(8, 14, 14), int32], Tensor[(9, 9, 12), uint16], Tensor[(972), bool]) */
}

def @func_2759(%var_2698: Tensor[(1, 3, 5), bool], %var_2699: Tensor[(15, 3, 5), bool], %var_2706: Tensor[(234), float64], %var_2712: Tensor[(1680, 1), float32], %var_2713: Tensor[(352), float64], %var_2727: Tensor[(42, 9), int8]) -> (Tensor[(15, 3, 5), bool], Tensor[(1, 14), float64], Tensor[(234), float64], Tensor[(1, 14), float64], Tensor[(3, 78), float64], Tensor[(728), float32], Tensor[(1680, 1), float32], Tensor[(352), float64], Tensor[(2, 11, 16), float32], Tensor[(14, 9, 3), int8], Tensor[(42, 9), int8], Tensor[(1, 14), float64], Tensor[(2, 7, 1), float64], Tensor[(2, 11, 16), float32]) {
  %213 = cast(%var_2698, dtype="bool") /* ty=Tensor[(1, 3, 5), bool] */;
  %214 = cast(%var_2699, dtype="bool") /* ty=Tensor[(15, 3, 5), bool] */;
  %215 = cast(%var_2706, dtype="float64") /* ty=Tensor[(234), float64] */;
  %216 = cast(%var_2706, dtype="float64") /* ty=Tensor[(234), float64] */;
  %217 = reshape(%215, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), float64] */;
  %218 = reshape(%216, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), float64] */;
  %219 = @func_1079(%217, %218) /* ty=(Tensor[(9, 2, 13), uint64], Tensor[(2, 7, 1), float64], Tensor[(1, 14), float64], Tensor[(9, 2, 13), float64]) */;
  %220 = cast(%var_2706, dtype="float64") /* ty=Tensor[(234), float64] */;
  %221 = cast(%var_2706, dtype="float64") /* ty=Tensor[(234), float64] */;
  %222 = reshape(%220, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), float64] */;
  %223 = reshape(%221, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), float64] */;
  %224 = @func_1079(%222, %223) /* ty=(Tensor[(9, 2, 13), uint64], Tensor[(2, 7, 1), float64], Tensor[(1, 14), float64], Tensor[(9, 2, 13), float64]) */;
  %225 = cast(meta[relay.Constant][14] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
  %226 = cast(%var_2712, dtype="float32") /* ty=Tensor[(1680, 1), float32] */;
  %227 = cast(%var_2713, dtype="float64") /* ty=Tensor[(352), float64] */;
  %228 = cast(%var_2712, dtype="int32") /* ty=Tensor[(1680, 1), int32] */;
  %229 = cast(%var_2706, dtype="float64") /* ty=Tensor[(234), float64] */;
  %230 = reshape(%225, newshape=[7, 8, 13]) /* ty=Tensor[(7, 8, 13), float32] */;
  %231 = reshape(%226, newshape=[1680]) /* ty=Tensor[(1680), float32] */;
  %232 = reshape(%227, newshape=[352]) /* ty=Tensor[(352), float64] */;
  %233 = reshape(%228, newshape=[8, 15, 14]) /* ty=Tensor[(8, 15, 14), int32] */;
  %234 = reshape(%229, newshape=[3, 78]) /* ty=Tensor[(3, 78), float64] */;
  %235 = @func_2414(%230, %231, %232, %233, %234) /* ty=(Tensor[(7, 8, 13), float32], Tensor[(1680), float32], Tensor[(160, 1), uint16], Tensor[(352), float64], Tensor[(2, 7, 1), float64], Tensor[(14), float64], Tensor[(2, 7, 1), float64], Tensor[(8, 15, 14), float32], Tensor[(9, 2, 13), uint64], Tensor[(3, 78), float64]) */;
  %236 = cast(%var_2713, dtype="float64") /* ty=Tensor[(352), float64] */;
  %237 = reshape(%236, newshape=[2, 11, 16]) /* ty=Tensor[(2, 11, 16), float64] */;
  %238 = @func_2276(%237) /* ty=(Tensor[(2, 11, 16), float32], Tensor[(16, 2, 5), uint16], Tensor[(160, 1), uint16]) */;
  %239 = cast(%var_2727, dtype="int8") /* ty=Tensor[(42, 9), int8] */;
  %240 = cast(%var_2727, dtype="int8") /* ty=Tensor[(42, 9), int8] */;
  %241 = reshape(%239, newshape=[14, 9, 3]) /* ty=Tensor[(14, 9, 3), int8] */;
  %242 = reshape(%240, newshape=[14, 9, 3]) /* ty=Tensor[(14, 9, 3), int8] */;
  %243 = @func_2683(%241, %242) /* ty=(Tensor[(14, 9, 3), int8],) */;
  %244 = cast(%var_2706, dtype="float64") /* ty=Tensor[(234), float64] */;
  %245 = %235.9;
  %246 = cast(%245, dtype="float64") /* ty=Tensor[(3, 78), float64] */;
  %247 = reshape(%244, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), float64] */;
  %248 = reshape(%246, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), float64] */;
  %249 = @func_1079(%247, %248) /* ty=(Tensor[(9, 2, 13), uint64], Tensor[(2, 7, 1), float64], Tensor[(1, 14), float64], Tensor[(9, 2, 13), float64]) */;
  %250 = %219.2;
  %251 = cast(%250, dtype="float64") /* ty=Tensor[(1, 14), float64] */;
  %252 = reshape(%251, newshape=[2, 7, 1]) /* ty=Tensor[(2, 7, 1), float64] */;
  %253 = @func_664(%252) /* ty=(Tensor[(2, 7, 1), float64],) */;
  %254 = %238.0;
  %255 = cast(%254, dtype="float64") /* ty=Tensor[(2, 11, 16), float64] */;
  %256 = reshape(%255, newshape=[2, 11, 16]) /* ty=Tensor[(2, 11, 16), float64] */;
  %257 = @func_2276(%256) /* ty=(Tensor[(2, 11, 16), float32], Tensor[(16, 2, 5), uint16], Tensor[(160, 1), uint16]) */;
  %258 = logical_or(%213, %214) /* ty=Tensor[(15, 3, 5), bool] */;
  %259 = %224.2;
  %260 = %243.0;
  %261 = %249.2;
  %262 = %253.0;
  %263 = %257.0;
  (%258, %250, %var_2706, %259, %245, meta[relay.Constant][14] /* ty=Tensor[(728), float32] */, %var_2712, %var_2713, %254, %260, %var_2727, %261, %262, %263)
}

def @func_6062(%var_6060: Tensor[(3, 5, 14), float64], %var_6061: Tensor[(15, 45), int64]) -> (Tensor[(3, 5, 14), float64], Tensor[(5, 9, 15), bool], Tensor[(15, 45), int64], Tensor[(14, 9, 3), int8], Tensor[(378), int8]) {
  %275 = fn (%var_6041: Tensor[(3, 5, 14), float64], %var_6047: Tensor[(15, 45), int64]) -> (Tensor[(3, 5, 14), float64], Tensor[(5, 9, 15), bool], Tensor[(15, 45), int64], Tensor[(14, 9, 3), int8], Tensor[(378), int8]) {
    %264 = cast(%var_6041, dtype="float64") /* ty=Tensor[(3, 5, 14), float64] */;
    %265 = cast(%var_6047, dtype="int64") /* ty=Tensor[(15, 45), int64] */;
    %266 = reshape(%265, newshape=[5, 9, 15]) /* ty=Tensor[(5, 9, 15), int64] */;
    %267 = cast(meta[relay.Constant][15] /* ty=Tensor[(378), int8] */, dtype="int8") /* ty=Tensor[(378), int8] */;
    %268 = cast(meta[relay.Constant][15] /* ty=Tensor[(378), int8] */, dtype="int8") /* ty=Tensor[(378), int8] */;
    %269 = reshape(%267, newshape=[14, 9, 3]) /* ty=Tensor[(14, 9, 3), int8] */;
    %270 = reshape(%268, newshape=[14, 9, 3]) /* ty=Tensor[(14, 9, 3), int8] */;
    %271 = @func_2683(%269, %270) /* ty=(Tensor[(14, 9, 3), int8],) */;
    %272 = cos(%264) /* ty=Tensor[(3, 5, 14), float64] */;
    %273 = @func_5486(%266) /* ty=Tensor[(5, 9, 15), bool] */;
    %274 = %271.0;
    (%272, %273, %var_6047, %274, meta[relay.Constant][15] /* ty=Tensor[(378), int8] */)
  };
  %275(%var_6060, %var_6061) /* ty=(Tensor[(3, 5, 14), float64], Tensor[(5, 9, 15), bool], Tensor[(15, 45), int64], Tensor[(14, 9, 3), int8], Tensor[(378), int8]) */
}

def @func_7413(%var_7402: Tensor[(1680), float32]) -> (Tensor[(9, 9, 12), float64], Tensor[(7, 8, 13), float32], Tensor[(728), float32], Tensor[(1680), float32], Tensor[(352), float64], Tensor[(234), float64], Tensor[(9, 9, 12), float64]) {
  %276 = @func_6830() /* ty=Tensor[(9, 9, 12), float64] */;
  %277 = cast(%276, dtype="float32") /* ty=Tensor[(9, 9, 12), float32] */;
  %278 = asinh(%277) /* ty=Tensor[(9, 9, 12), float32] */;
  %279 = cast(%278, dtype="float64") /* ty=Tensor[(9, 9, 12), float64] */;
  %280 = cast(meta[relay.Constant][16] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
  %281 = cast(%var_7402, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %282 = cast(meta[relay.Constant][17] /* ty=Tensor[(352), float64] */, dtype="float64") /* ty=Tensor[(352), float64] */;
  %283 = cast(%var_7402, dtype="int32") /* ty=Tensor[(1680), int32] */;
  %284 = cast(meta[relay.Constant][18] /* ty=Tensor[(234), float64] */, dtype="float64") /* ty=Tensor[(234), float64] */;
  %285 = reshape(%280, newshape=[7, 8, 13]) /* ty=Tensor[(7, 8, 13), float32] */;
  %286 = reshape(%281, newshape=[1680]) /* ty=Tensor[(1680), float32] */;
  %287 = reshape(%282, newshape=[352]) /* ty=Tensor[(352), float64] */;
  %288 = reshape(%283, newshape=[8, 15, 14]) /* ty=Tensor[(8, 15, 14), int32] */;
  %289 = reshape(%284, newshape=[3, 78]) /* ty=Tensor[(3, 78), float64] */;
  %290 = @func_2414(%285, %286, %287, %288, %289) /* ty=(Tensor[(7, 8, 13), float32], Tensor[(1680), float32], Tensor[(160, 1), uint16], Tensor[(352), float64], Tensor[(2, 7, 1), float64], Tensor[(14), float64], Tensor[(2, 7, 1), float64], Tensor[(8, 15, 14), float32], Tensor[(9, 2, 13), uint64], Tensor[(3, 78), float64]) */;
  %291 = @func_7029() /* ty=(Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64]) */;
  %292 = acosh(%279) /* ty=Tensor[(9, 9, 12), float64] */;
  %293 = %290.0;
  %294 = %291.1;
  (%292, %293, meta[relay.Constant][16] /* ty=Tensor[(728), float32] */, %var_7402, meta[relay.Constant][17] /* ty=Tensor[(352), float64] */, meta[relay.Constant][18] /* ty=Tensor[(234), float64] */, %294)
}

def @func_7880() -> (Tensor[(9, 9, 12), uint8],) {
  %295 = @func_7610() /* ty=(Tensor[(9, 9, 12), uint8],) */;
  %296 = %295.0;
  (%296,)
}

def @func_2767(%var_2761: Tensor[(1, 3, 5), bool], %var_2762: Tensor[(15, 3, 5), bool], %var_2763: Tensor[(234), float64], %var_2764: Tensor[(1680, 1), float32], %var_2765: Tensor[(352), float64], %var_2766: Tensor[(42, 9), int8]) -> (Tensor[(15, 3, 5), bool], Tensor[(1, 14), float64], Tensor[(234), float64], Tensor[(1, 14), float64], Tensor[(3, 78), float64], Tensor[(728), float32], Tensor[(1680, 1), float32], Tensor[(352), float64], Tensor[(2, 11, 16), float32], Tensor[(14, 9, 3), int8], Tensor[(42, 9), int8], Tensor[(1, 14), float64], Tensor[(2, 7, 1), float64], Tensor[(2, 11, 16), float32]) {
  @func_2759(%var_2761, %var_2762, %var_2763, %var_2764, %var_2765, %var_2766) /* ty=(Tensor[(15, 3, 5), bool], Tensor[(1, 14), float64], Tensor[(234), float64], Tensor[(1, 14), float64], Tensor[(3, 78), float64], Tensor[(728), float32], Tensor[(1680, 1), float32], Tensor[(352), float64], Tensor[(2, 11, 16), float32], Tensor[(14, 9, 3), int8], Tensor[(42, 9), int8], Tensor[(1, 14), float64], Tensor[(2, 7, 1), float64], Tensor[(2, 11, 16), float32]) */
}

def @func_5037(%var_5031: Tensor[(15, 8, 13), int8]) -> Tensor[(15, 8, 13), int8] {
  %297 = cast(meta[relay.Constant][19] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %298 = cast(%var_5031, dtype="int8") /* ty=Tensor[(15, 8, 13), int8] */;
  minimum(%297, %298) /* ty=Tensor[(15, 8, 13), int8] */
}

def @func_7973(%var_7969: Tensor[(6, 11, 7), float64], %var_7970: Tensor[(1680), float32], %var_7971: Tensor[(210), float64], %var_7972: Tensor[(15, 45), int64]) -> (Tensor[(6, 11, 7), float64], Tensor[(352), float64], Tensor[(15), bool], Tensor[(1, 225), bool], Tensor[(1, 234), float64], Tensor[(1680), float32], Tensor[(352), float64], Tensor[(378), int8], Tensor[(5, 9, 15), bool], Tensor[(210), float64], Tensor[(15, 45), int64]) {
  %322 = fn (%var_7931: Tensor[(6, 11, 7), float64], %var_7943: Tensor[(1680), float32], %var_7961: Tensor[(210), float64], %var_7962: Tensor[(15, 45), int64]) -> (Tensor[(6, 11, 7), float64], Tensor[(352), float64], Tensor[(15), bool], Tensor[(1, 225), bool], Tensor[(1, 234), float64], Tensor[(1680), float32], Tensor[(352), float64], Tensor[(378), int8], Tensor[(5, 9, 15), bool], Tensor[(210), float64], Tensor[(15, 45), int64]) {
    %299 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 11, 7), float64] */, dtype="float64") /* ty=Tensor[(1, 11, 7), float64] */;
    %300 = cast(%var_7931, dtype="float64") /* ty=Tensor[(6, 11, 7), float64] */;
    %301 = cast(meta[relay.Constant][21] /* ty=Tensor[(15), bool] */, dtype="bool") /* ty=Tensor[(15), bool] */;
    %302 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 225), bool] */, dtype="bool") /* ty=Tensor[(1, 225), bool] */;
    %303 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 234), float64] */, dtype="float64") /* ty=Tensor[(1, 234), float64] */;
    %304 = cast(%var_7943, dtype="float32") /* ty=Tensor[(1680), float32] */;
    %305 = cast(meta[relay.Constant][24] /* ty=Tensor[(352), float64] */, dtype="float64") /* ty=Tensor[(352), float64] */;
    %306 = cast(meta[relay.Constant][25] /* ty=Tensor[(378), int8] */, dtype="int8") /* ty=Tensor[(378), int8] */;
    %307 = reshape(%301, newshape=[1, 3, 5]) /* ty=Tensor[(1, 3, 5), bool] */;
    %308 = reshape(%302, newshape=[15, 3, 5]) /* ty=Tensor[(15, 3, 5), bool] */;
    %309 = reshape(%303, newshape=[234]) /* ty=Tensor[(234), float64] */;
    %310 = reshape(%304, newshape=[1680, 1]) /* ty=Tensor[(1680, 1), float32] */;
    %311 = reshape(%305, newshape=[352]) /* ty=Tensor[(352), float64] */;
    %312 = reshape(%306, newshape=[42, 9]) /* ty=Tensor[(42, 9), int8] */;
    %313 = @func_2759(%307, %308, %309, %310, %311, %312) /* ty=(Tensor[(15, 3, 5), bool], Tensor[(1, 14), float64], Tensor[(234), float64], Tensor[(1, 14), float64], Tensor[(3, 78), float64], Tensor[(728), float32], Tensor[(1680, 1), float32], Tensor[(352), float64], Tensor[(2, 11, 16), float32], Tensor[(14, 9, 3), int8], Tensor[(42, 9), int8], Tensor[(1, 14), float64], Tensor[(2, 7, 1), float64], Tensor[(2, 11, 16), float32]) */;
    %314 = cast(%var_7961, dtype="float64") /* ty=Tensor[(210), float64] */;
    %315 = cast(%var_7962, dtype="int64") /* ty=Tensor[(15, 45), int64] */;
    %316 = reshape(%314, newshape=[3, 5, 14]) /* ty=Tensor[(3, 5, 14), float64] */;
    %317 = reshape(%315, newshape=[15, 45]) /* ty=Tensor[(15, 45), int64] */;
    %318 = @func_6059(%316, %317) /* ty=(Tensor[(3, 5, 14), float64], Tensor[(5, 9, 15), bool], Tensor[(15, 45), int64], Tensor[(14, 9, 3), int8], Tensor[(378), int8]) */;
    %319 = floor_divide(%299, %300) /* ty=Tensor[(6, 11, 7), float64] */;
    %320 = %313.7;
    %321 = %318.1;
    (%319, %320, meta[relay.Constant][21] /* ty=Tensor[(15), bool] */, meta[relay.Constant][22] /* ty=Tensor[(1, 225), bool] */, meta[relay.Constant][23] /* ty=Tensor[(1, 234), float64] */, %var_7943, meta[relay.Constant][24] /* ty=Tensor[(352), float64] */, meta[relay.Constant][25] /* ty=Tensor[(378), int8] */, %321, %var_7961, %var_7962)
  };
  %322(%var_7969, %var_7970, %var_7971, %var_7972) /* ty=(Tensor[(6, 11, 7), float64], Tensor[(352), float64], Tensor[(15), bool], Tensor[(1, 225), bool], Tensor[(1, 234), float64], Tensor[(1680), float32], Tensor[(352), float64], Tensor[(378), int8], Tensor[(5, 9, 15), bool], Tensor[(210), float64], Tensor[(15, 45), int64]) */
}

def @func_5040(%var_5038: Tensor[(15, 8, 13), int8]) -> Tensor[(15, 8, 13), int8] {
  @func_5037(%var_5038) /* ty=Tensor[(15, 8, 13), int8] */
}

def @func_6107(%var_6078: Tensor[(9, 1, 12), float32]) -> Tensor[(9, 1, 12), float32] {
  %323 = cast(%var_6078, dtype="float32") /* ty=Tensor[(9, 1, 12), float32] */;
  %324 = cos(%323) /* ty=Tensor[(9, 1, 12), float32] */;
  %325 = cast(%324, dtype="float64") /* ty=Tensor[(9, 1, 12), float64] */;
  %326 = exp(%325) /* ty=Tensor[(9, 1, 12), float64] */;
  %327 = cast(%326, dtype="float32") /* ty=Tensor[(9, 1, 12), float32] */;
  sigmoid(%327) /* ty=Tensor[(9, 1, 12), float32] */
}

def @func_8402() -> (Tensor[(9, 9, 12), float64],) {
  %329 = fn () -> (Tensor[(9, 9, 12), float64],) {
    %328 = @func_7048() /* ty=Tensor[(9, 9, 12), float64] */;
    (%328,)
  };
  %329() /* ty=(Tensor[(9, 9, 12), float64],) */
}

def @func_9135(%var_9088: Tensor[(6, 3, 9), int32], %var_9089: Tensor[(6, 3, 9), int32]) -> Tensor[(6, 3, 9), float32] {
  %330 = cast(%var_9089, dtype="int32") /* ty=Tensor[(6, 3, 9), int32] */;
  %331 = shape_of(%var_9088, dtype="int32") /* ty=Tensor[(3), int32] */;
  %332 = cast(%var_9088, dtype="int32") /* ty=Tensor[(6, 3, 9), int32] */;
  %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %334 = bitwise_and(%332, %333) /* ty=Tensor[(6, 3, 9), int32] */;
  %335 = cast(%334, dtype="float32") /* ty=Tensor[(6, 3, 9), float32] */;
  atanh(%335) /* ty=Tensor[(6, 3, 9), float32] */
}

def @func_8538() -> (Tensor[(9, 9, 12), uint8],) {
  %336 = @func_7880() /* ty=(Tensor[(9, 9, 12), uint8],) */;
  %337 = %336.0;
  (%337,)
}

def @func_10134() -> Tensor[(9, 9, 12), bool] {
  %338 = fn () -> Tensor[(9, 9, 12), bool] {
    @func_8545() /* ty=Tensor[(9, 9, 12), bool] */
  };
  %338() /* ty=Tensor[(9, 9, 12), bool] */
}

def @main(%var_10726: Tensor[(10, 5, 6), uint64], %var_10727: Tensor[(10, 5, 6), uint64], %var_10750: Tensor[(234), float64], %var_10753: Tensor[(13, 378), int8]) -> (Tensor[(10, 5, 6), uint64], Tensor[(9, 9, 12), float64], Tensor[(15, 1), bool], Tensor[(234), float64], Tensor[(1680), float32], Tensor[(13, 378), bool]) {
  %339 = cast(%var_10727, dtype="uint64") /* ty=Tensor[(10, 5, 6), uint64] */;
  %340 = shape_of(%var_10726, dtype="int32") /* ty=Tensor[(3), int32] */;
  %341 = cast(%var_10726, dtype="uint64") /* ty=Tensor[(10, 5, 6), uint64] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %343 = @func_8665() /* ty=(Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64]) */;
  %344 = cast(meta[relay.Constant][26] /* ty=Tensor[(15, 1), bool] */, dtype="bool") /* ty=Tensor[(15, 1), bool] */;
  %345 = cast(%var_10750, dtype="float64") /* ty=Tensor[(234), float64] */;
  %346 = cast(meta[relay.Constant][27] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %347 = reshape(%344, newshape=[15]) /* ty=Tensor[(15), bool] */;
  %348 = reshape(%345, newshape=[234]) /* ty=Tensor[(234), float64] */;
  %349 = reshape(%346, newshape=[1680]) /* ty=Tensor[(1680), float32] */;
  %350 = @func_9512(%347, %348, %349) /* ty=(Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64], Tensor[(126, 3), int8], Tensor[(15), bool], Tensor[(234), float64], Tensor[(1, 378), int8], Tensor[(675), int64], Tensor[(2, 960), float64], Tensor[(8, 15, 14), int32], Tensor[(1680), float32]) */;
  %351 = %350.6;
  %352 = cast(%351, dtype="bool") /* ty=Tensor[(1, 378), bool] */;
  %353 = cast(%var_10753, dtype="bool") /* ty=Tensor[(13, 378), bool] */;
  %354 = add(%341, %342) /* ty=Tensor[(10, 5, 6), uint64] */;
  %355 = %343.0;
  %356 = greater_equal(%352, %353) /* ty=Tensor[(13, 378), bool] */;
  (%354, %355, meta[relay.Constant][26] /* ty=Tensor[(15, 1), bool] */, %var_10750, meta[relay.Constant][27] /* ty=Tensor[(1680), float32] */, %356)
}

def @func_6874(%var_6872: int8) -> (Tensor[(9, 9, 12), float64], Tensor[(9, 2, 13), uint64], Tensor[(234), float64], Tensor[(15, 9, 15), int8], int8) {
  @func_6871(%var_6872) /* ty=(Tensor[(9, 9, 12), float64], Tensor[(9, 2, 13), uint64], Tensor[(234), float64], Tensor[(15, 9, 15), int8], int8) */
}

def @func_8342(%var_8341: Tensor[(9, 8, 16), float64]) -> (Tensor[(9, 8, 16), float64], int8, int8) {
  %363 = fn (%var_8327: Tensor[(9, 8, 16), float64]) -> (Tensor[(9, 8, 16), float64], int8, int8) {
    %357 = cast(%var_8327, dtype="float64") /* ty=Tensor[(9, 8, 16), float64] */;
    %358 = cast(meta[relay.Constant][28] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %359 = reshape(%358, newshape=[]) /* ty=int8 */;
    %360 = @func_6871(%359) /* ty=(Tensor[(9, 9, 12), float64], Tensor[(9, 2, 13), uint64], Tensor[(234), float64], Tensor[(15, 9, 15), int8], int8) */;
    %361 = asinh(%357) /* ty=Tensor[(9, 8, 16), float64] */;
    %362 = %360.4;
    (%361, %362, meta[relay.Constant][28] /* ty=int8 */)
  };
  %363(%var_8341) /* ty=(Tensor[(9, 8, 16), float64], int8, int8) */
}

def @func_9920() -> (Tensor[(9, 9, 12), uint8],) {
  %364 = @func_7880() /* ty=(Tensor[(9, 9, 12), uint8],) */;
  %365 = %364.0;
  (%365,)
}

def @func_5629(%var_5628: Tensor[(7, 9, 1), float32]) -> Tensor[(7, 9, 1), float32] {
  %368 = fn (%var_5619: Tensor[(7, 9, 1), float32]) -> Tensor[(7, 9, 1), float32] {
    %366 = cast(-3.71573f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %367 = cast(%var_5619, dtype="float32") /* ty=Tensor[(7, 9, 1), float32] */;
    subtract(%366, %367) /* ty=Tensor[(7, 9, 1), float32] */
  };
  %368(%var_5628) /* ty=Tensor[(7, 9, 1), float32] */
}

def @func_2276(%var_2261: Tensor[(2, 11, 16), float64]) -> (Tensor[(2, 11, 16), float32], Tensor[(16, 2, 5), uint16], Tensor[(160, 1), uint16]) {
  %369 = cast(%var_2261, dtype="float64") /* ty=Tensor[(2, 11, 16), float64] */;
  %370 = log(%369) /* ty=Tensor[(2, 11, 16), float64] */;
  %371 = cast(%var_2261, dtype="float32") /* ty=Tensor[(2, 11, 16), float32] */;
  %372 = shape_of(%370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%370, dtype="float32") /* ty=Tensor[(2, 11, 16), float32] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %375 = cast(meta[relay.Constant][29] /* ty=Tensor[(160, 1), uint16] */, dtype="uint16") /* ty=Tensor[(160, 1), uint16] */;
  %376 = cast(meta[relay.Constant][29] /* ty=Tensor[(160, 1), uint16] */, dtype="uint16") /* ty=Tensor[(160, 1), uint16] */;
  %377 = reshape(%375, newshape=[16, 2, 5]) /* ty=Tensor[(16, 2, 5), uint16] */;
  %378 = reshape(%376, newshape=[16, 2, 5]) /* ty=Tensor[(16, 2, 5), uint16] */;
  %379 = @func_708(%377, %378) /* ty=(Tensor[(16, 2, 5), uint16],) */;
  %380 = divide(%373, %374) /* ty=Tensor[(2, 11, 16), float32] */;
  %381 = %379.0;
  (%380, %381, meta[relay.Constant][29] /* ty=Tensor[(160, 1), uint16] */)
}

def @func_2686(%var_2684: Tensor[(14, 9, 3), int8], %var_2685: Tensor[(14, 9, 3), int8]) -> (Tensor[(14, 9, 3), int8],) {
  %387 = fn (%var_2676: Tensor[(14, 9, 3), int8], %var_2677: Tensor[(14, 9, 3), int8]) -> (Tensor[(14, 9, 3), int8],) {
    %382 = cast(%var_2677, dtype="int8") /* ty=Tensor[(14, 9, 3), int8] */;
    %383 = shape_of(%var_2676, dtype="int32") /* ty=Tensor[(3), int32] */;
    %384 = cast(%var_2676, dtype="int8") /* ty=Tensor[(14, 9, 3), int8] */;
    %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %386 = bitwise_xor(%384, %385) /* ty=Tensor[(14, 9, 3), int8] */;
    (%386,)
  };
  %387(%var_2684, %var_2685) /* ty=(Tensor[(14, 9, 3), int8],) */
}

def @func_8721() -> (Tensor[(9, 9, 12), float64],) {
  %388 = @func_8663() /* ty=(Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64]) */;
  %389 = %388.1;
  (%389,)
}

def @func_711(%var_709: Tensor[(16, 2, 5), uint16], %var_710: Tensor[(16, 2, 5), uint16]) -> (Tensor[(16, 2, 5), uint16],) {
  %395 = fn (%var_684: Tensor[(16, 2, 5), uint16], %var_685: Tensor[(16, 2, 5), uint16]) -> (Tensor[(16, 2, 5), uint16],) {
    %390 = cast(%var_685, dtype="uint16") /* ty=Tensor[(16, 2, 5), uint16] */;
    %391 = shape_of(%var_684, dtype="int32") /* ty=Tensor[(3), int32] */;
    %392 = cast(%var_684, dtype="uint16") /* ty=Tensor[(16, 2, 5), uint16] */;
    %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %394 = left_shift(%392, %393) /* ty=Tensor[(16, 2, 5), uint16] */;
    (%394,)
  };
  %395(%var_709, %var_710) /* ty=(Tensor[(16, 2, 5), uint16],) */
}

def @func_4326(%var_4318: Tensor[(14, 11, 12), float32]) -> (Tensor[(14, 11, 12), float32],) {
  %396 = cast(%var_4318, dtype="float32") /* ty=Tensor[(14, 11, 12), float32] */;
  %397 = sqrt(%396) /* ty=Tensor[(14, 11, 12), float32] */;
  (%397,)
}

def @func_6747() -> (Tensor[(9, 9, 12), float32],) {
  %398 = cast(meta[relay.Constant][30] /* ty=int8 */, dtype="bool") /* ty=bool */;
  %399 = cast(meta[relay.Constant][31] /* ty=Tensor[(9, 9, 12), int8] */, dtype="bool") /* ty=Tensor[(9, 9, 12), bool] */;
  %400 = less(%398, %399) /* ty=Tensor[(9, 9, 12), bool] */;
  %401 = cast(%400, dtype="float32") /* ty=Tensor[(9, 9, 12), float32] */;
  %402 = rsqrt(%401) /* ty=Tensor[(9, 9, 12), float32] */;
  (%402,)
}

def @func_10690(%var_10637: Tensor[(2, 3, 6), float32], %var_10653: Tensor[(858, 1), uint8], %var_10667: Tensor[(4, 420), float32]) -> (Tensor[(2, 3, 6), float32], Tensor[(13, 16, 2), float32], Tensor[(416), float32], Tensor[(13, 11, 6), bool], Tensor[(858, 1), uint8], Tensor[(8, 15, 14), int32], Tensor[(4, 420), float32]) {
  %403 = cast(%var_10637, dtype="float32") /* ty=Tensor[(2, 3, 6), float32] */;
  %404 = cast(meta[relay.Constant][32] /* ty=Tensor[(416), float32] */, dtype="float32") /* ty=Tensor[(416), float32] */;
  %405 = reshape(%404, newshape=[13, 16, 2]) /* ty=Tensor[(13, 16, 2), float32] */;
  %406 = cast(%var_10653, dtype="uint8") /* ty=Tensor[(858, 1), uint8] */;
  %407 = reshape(%406, newshape=[13, 11, 6]) /* ty=Tensor[(13, 11, 6), uint8] */;
  %408 = cast(%var_10667, dtype="float32") /* ty=Tensor[(4, 420), float32] */;
  %409 = reshape(%408, newshape=[8, 15, 14]) /* ty=Tensor[(8, 15, 14), float32] */;
  %410 = cosh(%403) /* ty=Tensor[(2, 3, 6), float32] */;
  %411 = @func_7536(%405) /* ty=Tensor[(13, 16, 2), float32] */;
  %412 = @func_3311(%407) /* ty=Tensor[(13, 11, 6), bool] */;
  %413 = @func_412(%409) /* ty=Tensor[(8, 15, 14), int32] */;
  (%410, %411, meta[relay.Constant][32] /* ty=Tensor[(416), float32] */, %412, %var_10653, %413, %var_10667)
}

def @func_6871(%var_6865: int8) -> (Tensor[(9, 9, 12), float64], Tensor[(9, 2, 13), uint64], Tensor[(234), float64], Tensor[(15, 9, 15), int8], int8) {
  %414 = cast(meta[relay.Constant][33] /* ty=Tensor[(234), float64] */, dtype="float64") /* ty=Tensor[(234), float64] */;
  %415 = cast(meta[relay.Constant][33] /* ty=Tensor[(234), float64] */, dtype="float64") /* ty=Tensor[(234), float64] */;
  %416 = reshape(%414, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), float64] */;
  %417 = reshape(%415, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), float64] */;
  %418 = @func_1079(%416, %417) /* ty=(Tensor[(9, 2, 13), uint64], Tensor[(2, 7, 1), float64], Tensor[(1, 14), float64], Tensor[(9, 2, 13), float64]) */;
  %419 = cast(%var_6865, dtype="int8") /* ty=int8 */;
  %420 = reshape(%419, newshape=[]) /* ty=int8 */;
  %421 = @func_4244(%420) /* ty=(Tensor[(15, 9, 15), int8],) */;
  %422 = @func_6807() /* ty=Tensor[(9, 9, 12), float64] */;
  %423 = %418.0;
  %424 = %421.0;
  (%422, %423, meta[relay.Constant][33] /* ty=Tensor[(234), float64] */, %424, %var_6865)
}

def @func_8875(%var_8874: float32) -> (Tensor[(6, 15, 15), bool],) {
  %428 = fn (%var_8868: float32) -> (Tensor[(6, 15, 15), bool],) {
    %425 = cast(%var_8868, dtype="bool") /* ty=bool */;
    %426 = cast(meta[relay.Constant][34] /* ty=Tensor[(6, 15, 15), float32] */, dtype="bool") /* ty=Tensor[(6, 15, 15), bool] */;
    %427 = less_equal(%425, %426) /* ty=Tensor[(6, 15, 15), bool] */;
    (%427,)
  };
  %428(%var_8874) /* ty=(Tensor[(6, 15, 15), bool],) */
}

def @func_9703() -> (Tensor[(9, 9, 12), uint8], Tensor[(9, 9, 12), float64]) {
  %437 = fn () -> (Tensor[(9, 9, 12), uint8], Tensor[(9, 9, 12), float64]) {
    %429 = @func_8538() /* ty=(Tensor[(9, 9, 12), uint8],) */;
    %430 = %429.0;
    %431 = cast(meta[relay.Constant][35] /* ty=Tensor[(9, 9, 12), uint8] */, dtype="uint8") /* ty=Tensor[(9, 9, 12), uint8] */;
    %432 = shape_of(%430, dtype="int32") /* ty=Tensor[(3), int32] */;
    %433 = cast(%430, dtype="uint8") /* ty=Tensor[(9, 9, 12), uint8] */;
    %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %435 = subtract(%433, %434) /* ty=Tensor[(9, 9, 12), uint8] */;
    %436 = @func_7567() /* ty=Tensor[(9, 9, 12), float64] */;
    (%435, %436)
  };
  %437() /* ty=(Tensor[(9, 9, 12), uint8], Tensor[(9, 9, 12), float64]) */
}

def @func_10249() -> Tensor[(9, 9, 12), bool] {
  @func_10247() /* ty=Tensor[(9, 9, 12), bool] */
}

def @func_9956() -> Tensor[(9, 9, 12), float32] {
  %441 = fn () -> Tensor[(9, 9, 12), float32] {
    %438 = @func_8796() /* ty=(Tensor[(9, 9, 12), float64], Tensor[(3, 13, 12), float64], float64, Tensor[(78, 6), float64]) */;
    %439 = %438.0;
    %440 = cast(%439, dtype="float32") /* ty=Tensor[(9, 9, 12), float32] */;
    sin(%440) /* ty=Tensor[(9, 9, 12), float32] */
  };
  %441() /* ty=Tensor[(9, 9, 12), float32] */
}

def @func_7311(%var_7279: Tensor[(1, 10, 8), float64], %var_7292: Tensor[(858, 1), uint8]) -> (Tensor[(1, 10, 8), float64], Tensor[(13, 11, 6), bool], Tensor[(858, 1), uint8], Tensor[(3, 9, 2), float32], Tensor[(54), float32]) {
  %442 = cast(%var_7279, dtype="float64") /* ty=Tensor[(1, 10, 8), float64] */;
  %443 = cast(%var_7292, dtype="uint8") /* ty=Tensor[(858, 1), uint8] */;
  %444 = reshape(%443, newshape=[13, 11, 6]) /* ty=Tensor[(13, 11, 6), uint8] */;
  %445 = cast(meta[relay.Constant][36] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
  %446 = reshape(%445, newshape=[3, 9, 2]) /* ty=Tensor[(3, 9, 2), float32] */;
  %447 = @func_6586(%446) /* ty=(Tensor[(3, 9, 2), float32],) */;
  %448 = log2(%442) /* ty=Tensor[(1, 10, 8), float64] */;
  %449 = @func_3311(%444) /* ty=Tensor[(13, 11, 6), bool] */;
  %450 = %447.0;
  (%448, %449, %var_7292, %450, meta[relay.Constant][36] /* ty=Tensor[(54), float32] */)
}

def @func_7538(%var_7537: Tensor[(13, 16, 2), float32]) -> Tensor[(13, 16, 2), float32] {
  %452 = fn (%var_7528: Tensor[(13, 16, 2), float32]) -> Tensor[(13, 16, 2), float32] {
    %451 = cast(%var_7528, dtype="float32") /* ty=Tensor[(13, 16, 2), float32] */;
    log2(%451) /* ty=Tensor[(13, 16, 2), float32] */
  };
  %452(%var_7537) /* ty=Tensor[(13, 16, 2), float32] */
}

def @func_8665() -> (Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64]) {
  @func_8663() /* ty=(Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64]) */
}

def @func_7820() -> Tensor[(9, 9, 12), bool] {
  @func_7818() /* ty=Tensor[(9, 9, 12), bool] */
}

def @func_4848(%var_4846: uint64, %var_4847: Tensor[(6, 1, 12), uint64]) -> (Tensor[(6, 1, 12), float32], Tensor[(6, ?, 12), float64], Tensor[(1, 14), float64], Tensor[(234), float64]) {
  %471 = fn (%var_4808: uint64, %var_4809: Tensor[(6, 1, 12), uint64]) -> (Tensor[(6, 1, 12), float32], Tensor[(6, ?, 12), float64], Tensor[(1, 14), float64], Tensor[(234), float64]) {
    %453 = cast(%var_4808, dtype="uint64") /* ty=uint64 */;
    %454 = cast(%var_4809, dtype="uint64") /* ty=Tensor[(6, 1, 12), uint64] */;
    %455 = maximum(%453, %454) /* ty=Tensor[(6, 1, 12), uint64] */;
    %456 = cast(%455, dtype="float32") /* ty=Tensor[(6, 1, 12), float32] */;
    %457 = exp(%456) /* ty=Tensor[(6, 1, 12), float32] */;
    %458 = cast(%457, dtype="float32") /* ty=Tensor[(6, 1, 12), float32] */;
    %459 = cast(%455, dtype="float64") /* ty=Tensor[(6, 1, 12), float64] */;
    %460 = shape_of(%457, dtype="int32") /* ty=Tensor[(3), int32] */;
    %461 = cast(%457, dtype="float64") /* ty=Tensor[(6, 1, 12), float64] */;
    %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %463 = cast(meta[relay.Constant][37] /* ty=Tensor[(234), float64] */, dtype="float64") /* ty=Tensor[(234), float64] */;
    %464 = cast(meta[relay.Constant][37] /* ty=Tensor[(234), float64] */, dtype="float64") /* ty=Tensor[(234), float64] */;
    %465 = reshape(%463, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), float64] */;
    %466 = reshape(%464, newshape=[9, 2, 13]) /* ty=Tensor[(9, 2, 13), float64] */;
    %467 = @func_1079(%465, %466) /* ty=(Tensor[(9, 2, 13), uint64], Tensor[(2, 7, 1), float64], Tensor[(1, 14), float64], Tensor[(9, 2, 13), float64]) */;
    %468 = sinh(%458) /* ty=Tensor[(6, 1, 12), float32] */;
    %469 = minimum(%461, %462) /* ty=Tensor[(6, ?, 12), float64] */;
    %470 = %467.2;
    (%468, %469, %470, meta[relay.Constant][37] /* ty=Tensor[(234), float64] */)
  };
  %471(%var_4846, %var_4847) /* ty=(Tensor[(6, 1, 12), float32], Tensor[(6, ?, 12), float64], Tensor[(1, 14), float64], Tensor[(234), float64]) */
}

def @func_7882() -> (Tensor[(9, 9, 12), uint8],) {
  @func_7880() /* ty=(Tensor[(9, 9, 12), uint8],) */
}

def @func_10695(%var_10692: Tensor[(2, 3, 6), float32], %var_10693: Tensor[(858, 1), uint8], %var_10694: Tensor[(4, 420), float32]) -> (Tensor[(2, 3, 6), float32], Tensor[(13, 16, 2), float32], Tensor[(416), float32], Tensor[(13, 11, 6), bool], Tensor[(858, 1), uint8], Tensor[(8, 15, 14), int32], Tensor[(4, 420), float32]) {
  @func_10690(%var_10692, %var_10693, %var_10694) /* ty=(Tensor[(2, 3, 6), float32], Tensor[(13, 16, 2), float32], Tensor[(416), float32], Tensor[(13, 11, 6), bool], Tensor[(858, 1), uint8], Tensor[(8, 15, 14), int32], Tensor[(4, 420), float32]) */
}

def @func_8688(%var_8687: Tensor[(9, 9, 12), float64]) -> Tensor[(9, 9, 12), uint32] {
  %477 = fn (%var_8680: Tensor[(9, 9, 12), float64]) -> Tensor[(9, 9, 12), uint32] {
    %472 = @func_8161() /* ty=Tensor[(9, 9, 12), float64] */;
    %473 = cast(%var_8680, dtype="uint32") /* ty=Tensor[(9, 9, 12), uint32] */;
    %474 = shape_of(%472, dtype="int32") /* ty=Tensor[(3), int32] */;
    %475 = cast(%472, dtype="uint32") /* ty=Tensor[(9, 9, 12), uint32] */;
    %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    logical_xor(%475, %476) /* ty=Tensor[(9, 9, 12), uint32] */
  };
  %477(%var_8687) /* ty=Tensor[(9, 9, 12), uint32] */
}

def @func_4329(%var_4327: Tensor[(14, 11, 12), float32]) -> (Tensor[(14, 11, 12), float32],) {
  @func_4326(%var_4327) /* ty=(Tensor[(14, 11, 12), float32],) */
}

def @func_8500() -> (Tensor[(9, 9, 12), float64], Tensor[(14, 11, 12), float32], Tensor[(1, 1848), float32]) {
  %478 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 1848), float32] */, dtype="float32") /* ty=Tensor[(1, 1848), float32] */;
  %479 = reshape(%478, newshape=[14, 11, 12]) /* ty=Tensor[(14, 11, 12), float32] */;
  %480 = @func_4326(%479) /* ty=(Tensor[(14, 11, 12), float32],) */;
  %481 = @func_8161() /* ty=Tensor[(9, 9, 12), float64] */;
  %482 = %480.0;
  (%481, %482, meta[relay.Constant][38] /* ty=Tensor[(1, 1848), float32] */)
}

def @func_4019(%var_4017: Tensor[(15, 2, 3), float64]) -> Tensor[(15, 2, 3), float64] {
  @func_4016(%var_4017) /* ty=Tensor[(15, 2, 3), float64] */
}

def @func_4226(%var_4222: Tensor[(10, 8, 4), uint16], %var_4223: Tensor[(10, 8, 4), uint16], %var_4224: Tensor[(10, 8, 4), bool], %var_4225: Tensor[(858), uint8]) -> (Tensor[(10, 8, 4), int32], Tensor[(16, 2, 5), uint16], Tensor[(160), uint16], Tensor[(10, 8, 4), float32], Tensor[(13, 11, 6), bool], Tensor[(858), uint8], Tensor[(13, 11, 6), bool]) {
  @func_4220(%var_4222, %var_4223, %var_4224, %var_4225) /* ty=(Tensor[(10, 8, 4), int32], Tensor[(16, 2, 5), uint16], Tensor[(160), uint16], Tensor[(10, 8, 4), float32], Tensor[(13, 11, 6), bool], Tensor[(858), uint8], Tensor[(13, 11, 6), bool]) */
}

def @func_8201(%var_8200: Tensor[(1920), float64]) -> (Tensor[(5, 9, 15), bool], Tensor[(1920), float64], Tensor[(9, 9, 12), float64], Tensor[(9, 13, 16), float64]) {
  %497 = fn (%var_8174: Tensor[(1920), float64]) -> (Tensor[(5, 9, 15), bool], Tensor[(1920), float64], Tensor[(9, 9, 12), float64], Tensor[(9, 13, 16), float64]) {
    %483 = cast(%var_8174, dtype="float64") /* ty=Tensor[(1920), float64] */;
    %484 = cast(%var_8174, dtype="float64") /* ty=Tensor[(1920), float64] */;
    %485 = reshape(%483, newshape=[16, 15, 8]) /* ty=Tensor[(16, 15, 8), float64] */;
    %486 = reshape(%484, newshape=[16, 15, 8]) /* ty=Tensor[(16, 15, 8), float64] */;
    %487 = @func_7362(%485, %486) /* ty=(Tensor[(16, 15, 8), int32], Tensor[(5, 9, 15), bool], Tensor[(675), int64], Tensor[(9, 9, 12), float64]) */;
    %488 = cast(meta[relay.Constant][40] /* ty=Tensor[(9, 13, 16), uint16] */, dtype="uint16") /* ty=Tensor[(9, 13, 16), uint16] */;
    %489 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(9, 13, 16), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %490 = cast(meta[relay.Constant][39] /* ty=Tensor[(9, 13, 16), uint16] */, dtype="uint16") /* ty=Tensor[(9, 13, 16), uint16] */;
    %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %492 = maximum(%490, %491) /* ty=Tensor[(9, 13, 16), uint16] */;
    %493 = cast(%492, dtype="float64") /* ty=Tensor[(9, 13, 16), float64] */;
    %494 = %487.1;
    %495 = @func_6830() /* ty=Tensor[(9, 9, 12), float64] */;
    %496 = erf(%493) /* ty=Tensor[(9, 13, 16), float64] */;
    (%494, %var_8174, %495, %496)
  };
  %497(%var_8200) /* ty=(Tensor[(5, 9, 15), bool], Tensor[(1920), float64], Tensor[(9, 9, 12), float64], Tensor[(9, 13, 16), float64]) */
}

def @func_10108() -> Tensor[(9, 9, 12), float64] {
  %499 = fn () -> Tensor[(9, 9, 12), float64] {
    %498 = @func_9067() /* ty=(Tensor[(9, 9, 12), float64],) */;
    %498.0
  };
  %499() /* ty=Tensor[(9, 9, 12), float64] */
}

def @func_664(%var_653: Tensor[(2, 7, 1), float64]) -> (Tensor[(2, 7, 1), float64],) {
  %500 = cast(%var_653, dtype="float64") /* ty=Tensor[(2, 7, 1), float64] */;
  %501 = exp(%500) /* ty=Tensor[(2, 7, 1), float64] */;
  (%501,)
}

def @func_10262() -> (Tensor[(9, 9, 12), bool],) {
  %503 = fn () -> (Tensor[(9, 9, 12), bool],) {
    %502 = @func_7818() /* ty=Tensor[(9, 9, 12), bool] */;
    (%502,)
  };
  %503() /* ty=(Tensor[(9, 9, 12), bool],) */
}

def @func_10247() -> Tensor[(9, 9, 12), bool] {
  @func_8545() /* ty=Tensor[(9, 9, 12), bool] */
}

def @func_7144(%var_7142: Tensor[(9, 9, 12), float64]) -> (Tensor[(9, 9, 12), bool],) {
  @func_7141(%var_7142) /* ty=(Tensor[(9, 9, 12), bool],) */
}

def @func_7510(%var_7502: Tensor[(9, 9, 12), float64]) -> Tensor[(9, 9, 12), bool] {
  %504 = @func_6830() /* ty=Tensor[(9, 9, 12), float64] */;
  %505 = cast(%var_7502, dtype="bool") /* ty=Tensor[(9, 9, 12), bool] */;
  %506 = shape_of(%504, dtype="int32") /* ty=Tensor[(3), int32] */;
  %507 = cast(%504, dtype="bool") /* ty=Tensor[(9, 9, 12), bool] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%507, %508) /* ty=Tensor[(9, 9, 12), bool] */
}

def @func_6586(%var_6579: Tensor[(3, 9, 2), float32]) -> (Tensor[(3, 9, 2), float32],) {
  %509 = cast(%var_6579, dtype="float32") /* ty=Tensor[(3, 9, 2), float32] */;
  %510 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(3, 9, 2), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %511 = cast(meta[relay.Constant][41] /* ty=Tensor[(3, 9, 2), float32] */, dtype="float32") /* ty=Tensor[(3, 9, 2), float32] */;
  %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %513 = floor_mod(%511, %512) /* ty=Tensor[(3, 9, 2), float32] */;
  (%513,)
}

def @func_7593(%var_7591: int8, %var_7592: Tensor[(4, 5, 15), int8]) -> (Tensor[(4, 5, 15), int8],) {
  %517 = fn (%var_7581: int8, %var_7582: Tensor[(4, 5, 15), int8]) -> (Tensor[(4, 5, 15), int8],) {
    %514 = cast(%var_7581, dtype="int8") /* ty=int8 */;
    %515 = cast(%var_7582, dtype="int8") /* ty=Tensor[(4, 5, 15), int8] */;
    %516 = bitwise_xor(%514, %515) /* ty=Tensor[(4, 5, 15), int8] */;
    (%516,)
  };
  %517(%var_7591, %var_7592) /* ty=(Tensor[(4, 5, 15), int8],) */
}

def @func_10372(%var_10352: Tensor[(675, 1), int64]) -> (Tensor[(9, 9, 12), uint8], Tensor[(9, 9, 12), float64], Tensor[(5, 9, 15), bool], Tensor[(675, 1), int64]) {
  %518 = @func_9920() /* ty=(Tensor[(9, 9, 12), uint8],) */;
  %519 = @func_10336() /* ty=(float64, Tensor[(16, 2, 5), uint16], Tensor[(320), uint16], Tensor[(11, 11, 15), float64], Tensor[(1815), float64], Tensor[(9, 9, 12), float32], Tensor[(143, 6), float32]) */;
  %520 = %519.5;
  %521 = cast(%520, dtype="float64") /* ty=Tensor[(9, 9, 12), float64] */;
  %522 = cast(%var_10352, dtype="int64") /* ty=Tensor[(675, 1), int64] */;
  %523 = reshape(%522, newshape=[5, 9, 15]) /* ty=Tensor[(5, 9, 15), int64] */;
  %524 = %518.0;
  %525 = cosh(%521) /* ty=Tensor[(9, 9, 12), float64] */;
  %526 = @func_5486(%523) /* ty=Tensor[(5, 9, 15), bool] */;
  (%524, %525, %526, %var_10352)
}

def @func_414(%var_413: Tensor[(8, 15, 14), float32]) -> Tensor[(8, 15, 14), int32] {
  %535 = fn (%var_334: Tensor[(8, 15, 14), float32]) -> Tensor[(8, 15, 14), int32] {
    %527 = cast(%var_334, dtype="float32") /* ty=Tensor[(8, 15, 14), float32] */;
    %528 = atanh(%527) /* ty=Tensor[(8, 15, 14), float32] */;
    %529 = cast(%528, dtype="float32") /* ty=Tensor[(8, 15, 14), float32] */;
    %530 = asinh(%529) /* ty=Tensor[(8, 15, 14), float32] */;
    %531 = cast(%530, dtype="int32") /* ty=Tensor[(8, 15, 14), int32] */;
    %532 = shape_of(%528, dtype="int32") /* ty=Tensor[(3), int32] */;
    %533 = cast(%528, dtype="int32") /* ty=Tensor[(8, 15, 14), int32] */;
    %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    bitwise_xor(%533, %534) /* ty=Tensor[(8, 15, 14), int32] */
  };
  %535(%var_413) /* ty=Tensor[(8, 15, 14), int32] */
}

def @func_9035(%var_9031: Tensor[(378), int8], %var_9032: Tensor[(1815), float64], %var_9033: Tensor[(180), uint64], %var_9034: Tensor[(352), float64]) -> (float64, Tensor[(14, 9, 3), int8], Tensor[(378), int8], Tensor[(11, 11, 15), float64], Tensor[(1815), float64], Tensor[(6, 15, 2), uint64], Tensor[(180), uint64], Tensor[(352), float64]) {
  @func_9029(%var_9031, %var_9032, %var_9033, %var_9034) /* ty=(float64, Tensor[(14, 9, 3), int8], Tensor[(378), int8], Tensor[(11, 11, 15), float64], Tensor[(1815), float64], Tensor[(6, 15, 2), uint64], Tensor[(180), uint64], Tensor[(352), float64]) */
}

def @func_10030() -> (Tensor[(9, 9, 12), float64],) {
  %537 = fn () -> (Tensor[(9, 9, 12), float64],) {
    %536 = @func_10000() /* ty=Tensor[(9, 9, 12), float64] */;
    (%536,)
  };
  %537() /* ty=(Tensor[(9, 9, 12), float64],) */
}

def @func_9218(%var_9217: Tensor[(14, 9, 2), float32]) -> (Tensor[(9, 9, 12), float64], Tensor[(14, 9, 2), bool], Tensor[(9, 9, 12), uint32]) {
  %552 = fn (%var_9177: Tensor[(14, 9, 2), float32]) -> (Tensor[(9, 9, 12), float64], Tensor[(14, 9, 2), bool], Tensor[(9, 9, 12), uint32]) {
    %538 = @func_9067() /* ty=(Tensor[(9, 9, 12), float64],) */;
    %539 = cast(%var_9177, dtype="float32") /* ty=Tensor[(14, 9, 2), float32] */;
    %540 = acosh(%539) /* ty=Tensor[(14, 9, 2), float32] */;
    %541 = cast(%540, dtype="float64") /* ty=Tensor[(14, 9, 2), float64] */;
    %542 = atan(%541) /* ty=Tensor[(14, 9, 2), float64] */;
    %543 = cast(%var_9177, dtype="bool") /* ty=Tensor[(14, 9, 2), bool] */;
    %544 = shape_of(%542, dtype="int32") /* ty=Tensor[(3), int32] */;
    %545 = cast(%542, dtype="bool") /* ty=Tensor[(14, 9, 2), bool] */;
    %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %547 = %538.0;
    %548 = cast(%547, dtype="float64") /* ty=Tensor[(9, 9, 12), float64] */;
    %549 = reshape(%548, newshape=[9, 9, 12]) /* ty=Tensor[(9, 9, 12), float64] */;
    %550 = logical_and(%545, %546) /* ty=Tensor[(14, 9, 2), bool] */;
    %551 = @func_8686(%549) /* ty=Tensor[(9, 9, 12), uint32] */;
    (%547, %550, %551)
  };
  %552(%var_9217) /* ty=(Tensor[(9, 9, 12), float64], Tensor[(14, 9, 2), bool], Tensor[(9, 9, 12), uint32]) */
}

def @func_9616(%var_9613: Tensor[(1, 234), float64], %var_9614: Tensor[(1680), float32], %var_9615: Tensor[(352), float64]) -> (Tensor[(9, 9, 12), float64], Tensor[(352), float64], Tensor[(15), bool], Tensor[(225), bool], Tensor[(1, 234), float64], Tensor[(1680), float32], Tensor[(352), float64], Tensor[(378), int8]) {
  @func_9611(%var_9613, %var_9614, %var_9615) /* ty=(Tensor[(9, 9, 12), float64], Tensor[(352), float64], Tensor[(15), bool], Tensor[(225), bool], Tensor[(1, 234), float64], Tensor[(1680), float32], Tensor[(352), float64], Tensor[(378), int8]) */
}

def @func_7513(%var_7511: Tensor[(9, 9, 12), float64]) -> Tensor[(9, 9, 12), bool] {
  @func_7510(%var_7511) /* ty=Tensor[(9, 9, 12), bool] */
}

def @func_9922() -> (Tensor[(9, 9, 12), uint8],) {
  @func_9920() /* ty=(Tensor[(9, 9, 12), uint8],) */
}

def @func_9139(%var_9137: Tensor[(6, 3, 9), int32], %var_9138: Tensor[(6, 3, 9), int32]) -> Tensor[(6, 3, 9), float32] {
  @func_9135(%var_9137, %var_9138) /* ty=Tensor[(6, 3, 9), float32] */
}

def @func_3963(%var_3962: Tensor[(6, 14, 5), float64]) -> Tensor[(6, 14, 5), float64] {
  %554 = fn (%var_3958: Tensor[(6, 14, 5), float64]) -> Tensor[(6, 14, 5), float64] {
    %553 = cast(%var_3958, dtype="float64") /* ty=Tensor[(6, 14, 5), float64] */;
    log(%553) /* ty=Tensor[(6, 14, 5), float64] */
  };
  %554(%var_3962) /* ty=Tensor[(6, 14, 5), float64] */
}

def @func_6832() -> Tensor[(9, 9, 12), float64] {
  @func_6830() /* ty=Tensor[(9, 9, 12), float64] */
}

def @func_4220(%var_4189: Tensor[(10, 8, 4), uint16], %var_4190: Tensor[(10, 8, 4), uint16], %var_4200: Tensor[(10, 8, 4), bool], %var_4205: Tensor[(858), uint8]) -> (Tensor[(10, 8, 4), int32], Tensor[(16, 2, 5), uint16], Tensor[(160), uint16], Tensor[(10, 8, 4), float32], Tensor[(13, 11, 6), bool], Tensor[(858), uint8], Tensor[(13, 11, 6), bool]) {
  %555 = cast(%var_4190, dtype="bool") /* ty=Tensor[(10, 8, 4), bool] */;
  %556 = shape_of(%var_4189, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(%var_4189, dtype="bool") /* ty=Tensor[(10, 8, 4), bool] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %559 = less_equal(%557, %558) /* ty=Tensor[(10, 8, 4), bool] */;
  %560 = cast(%559, dtype="int32") /* ty=Tensor[(10, 8, 4), int32] */;
  %561 = shape_of(%var_4189, dtype="int32") /* ty=Tensor[(3), int32] */;
  %562 = cast(%var_4189, dtype="int32") /* ty=Tensor[(10, 8, 4), int32] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %564 = cast(meta[relay.Constant][42] /* ty=Tensor[(160), uint16] */, dtype="uint16") /* ty=Tensor[(160), uint16] */;
  %565 = cast(meta[relay.Constant][42] /* ty=Tensor[(160), uint16] */, dtype="uint16") /* ty=Tensor[(160), uint16] */;
  %566 = reshape(%564, newshape=[16, 2, 5]) /* ty=Tensor[(16, 2, 5), uint16] */;
  %567 = reshape(%565, newshape=[16, 2, 5]) /* ty=Tensor[(16, 2, 5), uint16] */;
  %568 = @func_708(%566, %567) /* ty=(Tensor[(16, 2, 5), uint16],) */;
  %569 = cast(%var_4200, dtype="float32") /* ty=Tensor[(10, 8, 4), float32] */;
  %570 = shape_of(%559, dtype="int32") /* ty=Tensor[(3), int32] */;
  %571 = cast(%559, dtype="float32") /* ty=Tensor[(10, 8, 4), float32] */;
  %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %573 = cast(%var_4205, dtype="uint8") /* ty=Tensor[(858), uint8] */;
  %574 = reshape(%573, newshape=[13, 11, 6]) /* ty=Tensor[(13, 11, 6), uint8] */;
  %575 = @func_3311(%574) /* ty=Tensor[(13, 11, 6), bool] */;
  %576 = cast(%575, dtype="uint8") /* ty=Tensor[(13, 11, 6), uint8] */;
  %577 = reshape(%576, newshape=[13, 11, 6]) /* ty=Tensor[(13, 11, 6), uint8] */;
  %578 = right_shift(%562, %563) /* ty=Tensor[(10, 8, 4), int32] */;
  %579 = %568.0;
  %580 = floor_divide(%571, %572) /* ty=Tensor[(10, 8, 4), float32] */;
  %581 = @func_3311(%577) /* ty=Tensor[(13, 11, 6), bool] */;
  (%578, %579, meta[relay.Constant][42] /* ty=Tensor[(160), uint16] */, %580, %575, %var_4205, %581)
}

def @func_6110(%var_6108: Tensor[(9, 1, 12), float32]) -> Tensor[(9, 1, 12), float32] {
  @func_6107(%var_6108) /* ty=Tensor[(9, 1, 12), float32] */
}

def @func_4247(%var_4245: int8) -> (Tensor[(15, 9, 15), int8],) {
  @func_4244(%var_4245) /* ty=(Tensor[(15, 9, 15), int8],) */
}

def @func_7476(%var_7474: float64, %var_7475: Tensor[(468), float64]) -> (Tensor[(9, 9, 12), float64], Tensor[(3, 13, 12), float64], float64, Tensor[(468), float64]) {
  @func_7472(%var_7474, %var_7475) /* ty=(Tensor[(9, 9, 12), float64], Tensor[(3, 13, 12), float64], float64, Tensor[(468), float64]) */
}

def @func_3126(%var_3091: Tensor[(10, 5, 11), uint8], %var_3104: Tensor[(240), uint8], %var_3110: Tensor[(352), float64]) -> (Tensor[(10, 5, 11), uint8], Tensor[(6, 8, 5), uint64], Tensor[(240), uint8], Tensor[(352), int8], Tensor[(2, 11, 16), float64]) {
  %582 = cast(meta[relay.Constant][43] /* ty=Tensor[(10, 5, 11), uint8] */, dtype="uint8") /* ty=Tensor[(10, 5, 11), uint8] */;
  %583 = shape_of(%var_3091, dtype="int32") /* ty=Tensor[(3), int32] */;
  %584 = cast(%var_3091, dtype="uint8") /* ty=Tensor[(10, 5, 11), uint8] */;
  %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %586 = cast(%var_3104, dtype="uint8") /* ty=Tensor[(240), uint8] */;
  %587 = cast(%var_3104, dtype="uint8") /* ty=Tensor[(240), uint8] */;
  %588 = cast(%var_3104, dtype="bool") /* ty=Tensor[(240), bool] */;
  %589 = reshape(%586, newshape=[6, 8, 5]) /* ty=Tensor[(6, 8, 5), uint8] */;
  %590 = reshape(%587, newshape=[6, 8, 5]) /* ty=Tensor[(6, 8, 5), uint8] */;
  %591 = reshape(%588, newshape=[6, 8, 5]) /* ty=Tensor[(6, 8, 5), bool] */;
  %592 = @func_1620(%589, %590, %591) /* ty=(Tensor[(6, 8, 5), uint64],) */;
  %593 = cast(meta[relay.Constant][44] /* ty=Tensor[(352), float64] */, dtype="int8") /* ty=Tensor[(352), int8] */;
  %594 = shape_of(%var_3110, dtype="int32") /* ty=Tensor[(1), int32] */;
  %595 = cast(%var_3110, dtype="int8") /* ty=Tensor[(352), int8] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?), int8] */;
  %597 = cast(%var_3110, dtype="float64") /* ty=Tensor[(352), float64] */;
  %598 = reshape(%597, newshape=[2, 11, 16]) /* ty=Tensor[(2, 11, 16), float64] */;
  %599 = @func_2276(%598) /* ty=(Tensor[(2, 11, 16), float32], Tensor[(16, 2, 5), uint16], Tensor[(160, 1), uint16]) */;
  %600 = %599.0;
  %601 = cast(%var_3110, dtype="float64") /* ty=Tensor[(352), float64] */;
  %602 = shape_of(%600, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%600, dtype="float64") /* ty=Tensor[(2, 11, 16), float64] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %605 = bitwise_or(%584, %585) /* ty=Tensor[(10, 5, 11), uint8] */;
  %606 = %592.0;
  %607 = subtract(%595, %596) /* ty=Tensor[(352), int8] */;
  %608 = floor_divide(%603, %604) /* ty=Tensor[(2, 11, 16), float64] */;
  (%605, %606, %var_3104, %607, %608)
}

def @func_8797() -> (Tensor[(9, 9, 12), float64], Tensor[(3, 13, 12), float64], float64, Tensor[(78, 6), float64]) {
  %616 = fn () -> (Tensor[(9, 9, 12), float64], Tensor[(3, 13, 12), float64], float64, Tensor[(78, 6), float64]) {
    %609 = cast(1.20324f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %610 = cast(meta[relay.Constant][45] /* ty=Tensor[(78, 6), float64] */, dtype="float64") /* ty=Tensor[(78, 6), float64] */;
    %611 = reshape(%609, newshape=[]) /* ty=float64 */;
    %612 = reshape(%610, newshape=[468]) /* ty=Tensor[(468), float64] */;
    %613 = @func_7472(%611, %612) /* ty=(Tensor[(9, 9, 12), float64], Tensor[(3, 13, 12), float64], float64, Tensor[(468), float64]) */;
    %614 = @func_6807() /* ty=Tensor[(9, 9, 12), float64] */;
    %615 = %613.1;
    (%614, %615, 1.20324f64 /* ty=float64 */, meta[relay.Constant][45] /* ty=Tensor[(78, 6), float64] */)
  };
  %616() /* ty=(Tensor[(9, 9, 12), float64], Tensor[(3, 13, 12), float64], float64, Tensor[(78, 6), float64]) */
}

def @func_9916(%var_9914: Tensor[(2, 9, 7), float32], %var_9915: Tensor[(2, 9, 7), float32]) -> (Tensor[(2, 9, 7), int64], Tensor[(9, 9, 12), float32]) {
  @func_9912(%var_9914, %var_9915) /* ty=(Tensor[(2, 9, 7), int64], Tensor[(9, 9, 12), float32]) */
}

def @func_7365(%var_7363: Tensor[(16, 15, 8), float64], %var_7364: Tensor[(16, 15, 8), float64]) -> (Tensor[(16, 15, 8), int32], Tensor[(5, 9, 15), bool], Tensor[(675), int64], Tensor[(9, 9, 12), float64]) {
  %628 = fn (%var_7332: Tensor[(16, 15, 8), float64], %var_7335: Tensor[(16, 15, 8), float64]) -> (Tensor[(16, 15, 8), int32], Tensor[(5, 9, 15), bool], Tensor[(675), int64], Tensor[(9, 9, 12), float64]) {
    %617 = cast(%var_7332, dtype="float64") /* ty=Tensor[(16, 15, 8), float64] */;
    %618 = log2(%617) /* ty=Tensor[(16, 15, 8), float64] */;
    %619 = cast(%var_7335, dtype="int32") /* ty=Tensor[(16, 15, 8), int32] */;
    %620 = shape_of(%618, dtype="int32") /* ty=Tensor[(3), int32] */;
    %621 = cast(%618, dtype="int32") /* ty=Tensor[(16, 15, 8), int32] */;
    %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %623 = cast(meta[relay.Constant][46] /* ty=Tensor[(675), int64] */, dtype="int64") /* ty=Tensor[(675), int64] */;
    %624 = reshape(%623, newshape=[5, 9, 15]) /* ty=Tensor[(5, 9, 15), int64] */;
    %625 = left_shift(%621, %622) /* ty=Tensor[(16, 15, 8), int32] */;
    %626 = @func_5486(%624) /* ty=Tensor[(5, 9, 15), bool] */;
    %627 = @func_6807() /* ty=Tensor[(9, 9, 12), float64] */;
    (%625, %626, meta[relay.Constant][46] /* ty=Tensor[(675), int64] */, %627)
  };
  %628(%var_7363, %var_7364) /* ty=(Tensor[(16, 15, 8), int32], Tensor[(5, 9, 15), bool], Tensor[(675), int64], Tensor[(9, 9, 12), float64]) */
}

def @func_7472(%var_7467: float64, %var_7468: Tensor[(468), float64]) -> (Tensor[(9, 9, 12), float64], Tensor[(3, 13, 12), float64], float64, Tensor[(468), float64]) {
  %629 = cast(%var_7467, dtype="float64") /* ty=float64 */;
  %630 = cast(%var_7468, dtype="float64") /* ty=Tensor[(468), float64] */;
  %631 = reshape(%629, newshape=[]) /* ty=float64 */;
  %632 = reshape(%630, newshape=[3, 13, 12]) /* ty=Tensor[(3, 13, 12), float64] */;
  %633 = @func_6807() /* ty=Tensor[(9, 9, 12), float64] */;
  %634 = @func_5936(%631, %632) /* ty=Tensor[(3, 13, 12), float64] */;
  (%633, %634, %var_7467, %var_7468)
}

def @func_10002() -> Tensor[(9, 9, 12), float64] {
  @func_10000() /* ty=Tensor[(9, 9, 12), float64] */
}

def @func_6969(%var_6967: Tensor[(3, 30), float64]) -> (Tensor[(9, 9, 12), float32], Tensor[(9, 9, 12), float64], Tensor[(3, 30), float32], Tensor[(14, 9, 3), int8], Tensor[(1, 378), int8]) {
  @func_6966(%var_6967) /* ty=(Tensor[(9, 9, 12), float32], Tensor[(9, 9, 12), float64], Tensor[(3, 30), float32], Tensor[(14, 9, 3), int8], Tensor[(1, 378), int8]) */
}

def @func_8361() -> (Tensor[(9, 9, 12), float32],) {
  %635 = @func_8092() /* ty=(Tensor[(9, 9, 12), float32],) */;
  %636 = %635.0;
  (%636,)
}

def @func_9996(%var_9994: Tensor[(1, 4, 5), float32], %var_9995: Tensor[(9, 4, 5), float32]) -> Tensor[(9, 4, 5), float32] {
  @func_9992(%var_9994, %var_9995) /* ty=Tensor[(9, 4, 5), float32] */
}

def @func_667(%var_665: Tensor[(2, 7, 1), float64]) -> (Tensor[(2, 7, 1), float64],) {
  @func_664(%var_665) /* ty=(Tensor[(2, 7, 1), float64],) */
}

def @func_6749() -> (Tensor[(9, 9, 12), float32],) {
  @func_6747() /* ty=(Tensor[(9, 9, 12), float32],) */
}

def @func_10021() -> (Tensor[(9, 9, 12), bool],) {
  @func_10019() /* ty=(Tensor[(9, 9, 12), bool],) */
}

def @func_6808() -> Tensor[(9, 9, 12), float64] {
  %640 = fn () -> Tensor[(9, 9, 12), float64] {
    %637 = @func_6747() /* ty=(Tensor[(9, 9, 12), float32],) */;
    %638 = %637.0;
    %639 = cast(%638, dtype="float64") /* ty=Tensor[(9, 9, 12), float64] */;
    acos(%639) /* ty=Tensor[(9, 9, 12), float64] */
  };
  %640() /* ty=Tensor[(9, 9, 12), float64] */
}

def @func_6966(%var_6919: Tensor[(3, 30), float64]) -> (Tensor[(9, 9, 12), float32], Tensor[(9, 9, 12), float64], Tensor[(3, 30), float32], Tensor[(14, 9, 3), int8], Tensor[(1, 378), int8]) {
  %641 = @func_6747() /* ty=(Tensor[(9, 9, 12), float32],) */;
  %642 = cast(%var_6919, dtype="float64") /* ty=Tensor[(3, 30), float64] */;
  %643 = rsqrt(%642) /* ty=Tensor[(3, 30), float64] */;
  %644 = cast(%var_6919, dtype="float64") /* ty=Tensor[(3, 30), float64] */;
  %645 = reshape(%644, newshape=[15, 2, 3]) /* ty=Tensor[(15, 2, 3), float64] */;
  %646 = @func_4016(%645) /* ty=Tensor[(15, 2, 3), float64] */;
  %647 = cast(%646, dtype="float32") /* ty=Tensor[(15, 2, 3), float32] */;
  %648 = shape_of(%643, dtype="int32") /* ty=Tensor[(2), int32] */;
  %649 = cast(%643, dtype="float32") /* ty=Tensor[(3, 30), float32] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %651 = cast(meta[relay.Constant][47] /* ty=Tensor[(1, 378), int8] */, dtype="int8") /* ty=Tensor[(1, 378), int8] */;
  %652 = cast(meta[relay.Constant][47] /* ty=Tensor[(1, 378), int8] */, dtype="int8") /* ty=Tensor[(1, 378), int8] */;
  %653 = reshape(%651, newshape=[14, 9, 3]) /* ty=Tensor[(14, 9, 3), int8] */;
  %654 = reshape(%652, newshape=[14, 9, 3]) /* ty=Tensor[(14, 9, 3), int8] */;
  %655 = @func_2683(%653, %654) /* ty=(Tensor[(14, 9, 3), int8],) */;
  %656 = %641.0;
  %657 = @func_6807() /* ty=Tensor[(9, 9, 12), float64] */;
  %658 = power(%649, %650) /* ty=Tensor[(3, 30), float32] */;
  %659 = %655.0;
  (%656, %657, %658, %659, meta[relay.Constant][47] /* ty=Tensor[(1, 378), int8] */)
}

def @func_5940(%var_5938: float64, %var_5939: Tensor[(3, 13, 12), float64]) -> Tensor[(3, 13, 12), float64] {
  @func_5936(%var_5938, %var_5939) /* ty=Tensor[(3, 13, 12), float64] */
}

def @func_8615() -> (Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64]) {
  %664 = fn () -> (Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64]) {
    %660 = @func_8401() /* ty=(Tensor[(9, 9, 12), float64],) */;
    %661 = @func_8500() /* ty=(Tensor[(9, 9, 12), float64], Tensor[(14, 11, 12), float32], Tensor[(1, 1848), float32]) */;
    %662 = %660.0;
    %663 = %661.0;
    (%662, %663)
  };
  %664() /* ty=(Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64]) */
}

def @func_8963() -> (float64, Tensor[(11, 13, 4), bool], Tensor[(572), bool]) {
  %670 = fn () -> (float64, Tensor[(11, 13, 4), bool], Tensor[(572), bool]) {
    %665 = @func_8796() /* ty=(Tensor[(9, 9, 12), float64], Tensor[(3, 13, 12), float64], float64, Tensor[(78, 6), float64]) */;
    %666 = cast(meta[relay.Constant][48] /* ty=Tensor[(572), bool] */, dtype="bool") /* ty=Tensor[(572), bool] */;
    %667 = reshape(%666, newshape=[11, 13, 4]) /* ty=Tensor[(11, 13, 4), bool] */;
    %668 = %665.2;
    %669 = @func_5682(%667) /* ty=Tensor[(11, 13, 4), bool] */;
    (%668, %669, meta[relay.Constant][48] /* ty=Tensor[(572), bool] */)
  };
  %670() /* ty=(float64, Tensor[(11, 13, 4), bool], Tensor[(572), bool]) */
}

def @func_5936(%var_5909: float64, %var_5910: Tensor[(3, 13, 12), float64]) -> Tensor[(3, 13, 12), float64] {
  %671 = cast(%var_5909, dtype="float64") /* ty=float64 */;
  %672 = cast(%var_5910, dtype="float64") /* ty=Tensor[(3, 13, 12), float64] */;
  power(%671, %672) /* ty=Tensor[(3, 13, 12), float64] */
}

def @func_10000() -> Tensor[(9, 9, 12), float64] {
  @func_6891() /* ty=Tensor[(9, 9, 12), float64] */
}

def @func_9305(%var_9287: Tensor[(7, 1, 4), float32], %var_9288: Tensor[(7, 10, 4), float32]) -> (Tensor[(7, 10, 4), float32],) {
  %673 = cast(%var_9287, dtype="float32") /* ty=Tensor[(7, 1, 4), float32] */;
  %674 = cast(%var_9288, dtype="float32") /* ty=Tensor[(7, 10, 4), float32] */;
  %675 = power(%673, %674) /* ty=Tensor[(7, 10, 4), float32] */;
  (%675,)
}

def @func_9851(%var_9787: Tensor[(7, 9), float32]) -> (Tensor[(9, 9, 12), float32], Tensor[(7, 9, ?), bool], Tensor[(2, 7, 1), float64], Tensor[(728), float32], Tensor[(1680), float32], Tensor[(176, 2), float64], Tensor[(234), float64]) {
  %676 = @func_8614() /* ty=(Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64]) */;
  %677 = %676.0;
  %678 = cast(%677, dtype="float32") /* ty=Tensor[(9, 9, 12), float32] */;
  %679 = cast(%var_9787, dtype="float32") /* ty=Tensor[(7, 9), float32] */;
  %680 = reshape(%679, newshape=[7, 9, 1]) /* ty=Tensor[(7, 9, 1), float32] */;
  %681 = @func_5627(%680) /* ty=Tensor[(7, 9, 1), float32] */;
  %682 = cast(%var_9787, dtype="bool") /* ty=Tensor[(7, 9), bool] */;
  %683 = shape_of(%681, dtype="int32") /* ty=Tensor[(3), int32] */;
  %684 = cast(%681, dtype="bool") /* ty=Tensor[(7, 9, 1), bool] */;
  %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %686 = cast(meta[relay.Constant][49] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
  %687 = cast(meta[relay.Constant][50] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %688 = cast(meta[relay.Constant][51] /* ty=Tensor[(176, 2), float64] */, dtype="float64") /* ty=Tensor[(176, 2), float64] */;
  %689 = cast(meta[relay.Constant][50] /* ty=Tensor[(1680), float32] */, dtype="int32") /* ty=Tensor[(1680), int32] */;
  %690 = cast(meta[relay.Constant][52] /* ty=Tensor[(234), float64] */, dtype="float64") /* ty=Tensor[(234), float64] */;
  %691 = reshape(%686, newshape=[7, 8, 13]) /* ty=Tensor[(7, 8, 13), float32] */;
  %692 = reshape(%687, newshape=[1680]) /* ty=Tensor[(1680), float32] */;
  %693 = reshape(%688, newshape=[352]) /* ty=Tensor[(352), float64] */;
  %694 = reshape(%689, newshape=[8, 15, 14]) /* ty=Tensor[(8, 15, 14), int32] */;
  %695 = reshape(%690, newshape=[3, 78]) /* ty=Tensor[(3, 78), float64] */;
  %696 = @func_2414(%691, %692, %693, %694, %695) /* ty=(Tensor[(7, 8, 13), float32], Tensor[(1680), float32], Tensor[(160, 1), uint16], Tensor[(352), float64], Tensor[(2, 7, 1), float64], Tensor[(14), float64], Tensor[(2, 7, 1), float64], Tensor[(8, 15, 14), float32], Tensor[(9, 2, 13), uint64], Tensor[(3, 78), float64]) */;
  %697 = erf(%678) /* ty=Tensor[(9, 9, 12), float32] */;
  %698 = less(%684, %685) /* ty=Tensor[(7, 9, ?), bool] */;
  %699 = %696.6;
  (%697, %698, %699, meta[relay.Constant][49] /* ty=Tensor[(728), float32] */, meta[relay.Constant][50] /* ty=Tensor[(1680), float32] */, meta[relay.Constant][51] /* ty=Tensor[(176, 2), float64] */, meta[relay.Constant][52] /* ty=Tensor[(234), float64] */)
}

def @func_10337() -> (float64, Tensor[(16, 2, 5), uint16], Tensor[(320), uint16], Tensor[(11, 11, 15), float64], Tensor[(1815), float64], Tensor[(9, 9, 12), float32], Tensor[(143, 6), float32]) {
  %718 = fn () -> (float64, Tensor[(16, 2, 5), uint16], Tensor[(320), uint16], Tensor[(11, 11, 15), float64], Tensor[(1815), float64], Tensor[(9, 9, 12), float32], Tensor[(143, 6), float32]) {
    %700 = @func_8962() /* ty=(float64, Tensor[(11, 13, 4), bool], Tensor[(572), bool]) */;
    %701 = cast(meta[relay.Constant][53] /* ty=Tensor[(320), uint16] */, dtype="uint16") /* ty=Tensor[(320), uint16] */;
    %702 = cast(meta[relay.Constant][53] /* ty=Tensor[(320), uint16] */, dtype="uint16") /* ty=Tensor[(320), uint16] */;
    %703 = cast(meta[relay.Constant][53] /* ty=Tensor[(320), uint16] */, dtype="bool") /* ty=Tensor[(320), bool] */;
    %704 = cast(meta[relay.Constant][54] /* ty=Tensor[(143, 6), uint8] */, dtype="uint8") /* ty=Tensor[(143, 6), uint8] */;
    %705 = reshape(%701, newshape=[10, 8, 4]) /* ty=Tensor[(10, 8, 4), uint16] */;
    %706 = reshape(%702, newshape=[10, 8, 4]) /* ty=Tensor[(10, 8, 4), uint16] */;
    %707 = reshape(%703, newshape=[10, 8, 4]) /* ty=Tensor[(10, 8, 4), bool] */;
    %708 = reshape(%704, newshape=[858]) /* ty=Tensor[(858), uint8] */;
    %709 = @func_4220(%705, %706, %707, %708) /* ty=(Tensor[(10, 8, 4), int32], Tensor[(16, 2, 5), uint16], Tensor[(160), uint16], Tensor[(10, 8, 4), float32], Tensor[(13, 11, 6), bool], Tensor[(858), uint8], Tensor[(13, 11, 6), bool]) */;
    %710 = cast(meta[relay.Constant][55] /* ty=Tensor[(1815), float64] */, dtype="float64") /* ty=Tensor[(1815), float64] */;
    %711 = reshape(%710, newshape=[11, 11, 15]) /* ty=Tensor[(11, 11, 15), float64] */;
    %712 = cast(meta[relay.Constant][54] /* ty=Tensor[(143, 6), uint8] */, dtype="float32") /* ty=Tensor[(143, 6), float32] */;
    %713 = %700.0;
    %714 = %709.1;
    %715 = @func_1931(%711) /* ty=Tensor[(11, 11, 15), float64] */;
    %716 = @func_9955() /* ty=Tensor[(9, 9, 12), float32] */;
    %717 = log10(%712) /* ty=Tensor[(143, 6), float32] */;
    (%713, %714, meta[relay.Constant][53] /* ty=Tensor[(320), uint16] */, %715, meta[relay.Constant][55] /* ty=Tensor[(1815), float64] */, %716, %717)
  };
  %718() /* ty=(float64, Tensor[(16, 2, 5), uint16], Tensor[(320), uint16], Tensor[(11, 11, 15), float64], Tensor[(1815), float64], Tensor[(9, 9, 12), float32], Tensor[(143, 6), float32]) */
}

def @func_10173() -> (Tensor[(9, 9, 12), uint8],) {
  @func_10171() /* ty=(Tensor[(9, 9, 12), uint8],) */
}

def @func_1620(%var_1600: Tensor[(6, 8, 5), uint8], %var_1601: Tensor[(6, 8, 5), uint8], %var_1610: Tensor[(6, 8, 5), bool]) -> (Tensor[(6, 8, 5), uint64],) {
  %719 = cast(%var_1601, dtype="bool") /* ty=Tensor[(6, 8, 5), bool] */;
  %720 = shape_of(%var_1600, dtype="int32") /* ty=Tensor[(3), int32] */;
  %721 = cast(%var_1600, dtype="bool") /* ty=Tensor[(6, 8, 5), bool] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %723 = greater_equal(%721, %722) /* ty=Tensor[(6, 8, 5), bool] */;
  %724 = cast(%var_1610, dtype="uint64") /* ty=Tensor[(6, 8, 5), uint64] */;
  %725 = shape_of(%723, dtype="int32") /* ty=Tensor[(3), int32] */;
  %726 = cast(%723, dtype="uint64") /* ty=Tensor[(6, 8, 5), uint64] */;
  %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %728 = bitwise_and(%726, %727) /* ty=Tensor[(6, 8, 5), uint64] */;
  (%728,)
}

def @func_6496(%var_6493: Tensor[(15), bool], %var_6494: Tensor[(234), float64], %var_6495: Tensor[(126, 3), int8]) -> (Tensor[(12, 13, 2), float64], Tensor[(2, 7, 1), float64], Tensor[(15), bool], Tensor[(225), bool], Tensor[(234), float64], Tensor[(1680), float32], Tensor[(352), float64], Tensor[(126, 3), int8]) {
  %745 = fn (%var_6483: Tensor[(15), bool], %var_6485: Tensor[(234), float64], %var_6488: Tensor[(126, 3), int8]) -> (Tensor[(12, 13, 2), float64], Tensor[(2, 7, 1), float64], Tensor[(15), bool], Tensor[(225), bool], Tensor[(234), float64], Tensor[(1680), float32], Tensor[(352), float64], Tensor[(126, 3), int8]) {
    %729 = cast(meta[relay.Constant][56] /* ty=Tensor[(12, 13, 2), float64] */, dtype="float64") /* ty=Tensor[(12, 13, 2), float64] */;
    %730 = cast(%var_6483, dtype="bool") /* ty=Tensor[(15), bool] */;
    %731 = cast(meta[relay.Constant][57] /* ty=Tensor[(225), bool] */, dtype="bool") /* ty=Tensor[(225), bool] */;
    %732 = cast(%var_6485, dtype="float64") /* ty=Tensor[(234), float64] */;
    %733 = cast(meta[relay.Constant][58] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
    %734 = cast(meta[relay.Constant][59] /* ty=Tensor[(352), float64] */, dtype="float64") /* ty=Tensor[(352), float64] */;
    %735 = cast(%var_6488, dtype="int8") /* ty=Tensor[(126, 3), int8] */;
    %736 = reshape(%730, newshape=[1, 3, 5]) /* ty=Tensor[(1, 3, 5), bool] */;
    %737 = reshape(%731, newshape=[15, 3, 5]) /* ty=Tensor[(15, 3, 5), bool] */;
    %738 = reshape(%732, newshape=[234]) /* ty=Tensor[(234), float64] */;
    %739 = reshape(%733, newshape=[1680, 1]) /* ty=Tensor[(1680, 1), float32] */;
    %740 = reshape(%734, newshape=[352]) /* ty=Tensor[(352), float64] */;
    %741 = reshape(%735, newshape=[42, 9]) /* ty=Tensor[(42, 9), int8] */;
    %742 = @func_2759(%736, %737, %738, %739, %740, %741) /* ty=(Tensor[(15, 3, 5), bool], Tensor[(1, 14), float64], Tensor[(234), float64], Tensor[(1, 14), float64], Tensor[(3, 78), float64], Tensor[(728), float32], Tensor[(1680, 1), float32], Tensor[(352), float64], Tensor[(2, 11, 16), float32], Tensor[(14, 9, 3), int8], Tensor[(42, 9), int8], Tensor[(1, 14), float64], Tensor[(2, 7, 1), float64], Tensor[(2, 11, 16), float32]) */;
    %743 = sinh(%729) /* ty=Tensor[(12, 13, 2), float64] */;
    %744 = %742.12;
    (%743, %744, %var_6483, meta[relay.Constant][57] /* ty=Tensor[(225), bool] */, %var_6485, meta[relay.Constant][58] /* ty=Tensor[(1680), float32] */, meta[relay.Constant][59] /* ty=Tensor[(352), float64] */, %var_6488)
  };
  %745(%var_6493, %var_6494, %var_6495) /* ty=(Tensor[(12, 13, 2), float64], Tensor[(2, 7, 1), float64], Tensor[(15), bool], Tensor[(225), bool], Tensor[(234), float64], Tensor[(1680), float32], Tensor[(352), float64], Tensor[(126, 3), int8]) */
}

def @func_7756(%var_7742: Tensor[(180), uint64], %var_7751: Tensor[(176, 2), float64]) -> (Tensor[(9, 9, 12), float64], Tensor[(6, 15, 2), uint64], Tensor[(180), uint64], Tensor[(9, 9, 12), bool], Tensor[(16, 2, 5), uint16], Tensor[(176, 2), float64]) {
  %746 = cast(%var_7742, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %747 = reshape(%746, newshape=[6, 15, 2]) /* ty=Tensor[(6, 15, 2), uint64] */;
  %748 = @func_6891() /* ty=Tensor[(9, 9, 12), float64] */;
  %749 = cast(%748, dtype="float64") /* ty=Tensor[(9, 9, 12), float64] */;
  %750 = reshape(%749, newshape=[9, 9, 12]) /* ty=Tensor[(9, 9, 12), float64] */;
  %751 = @func_7141(%750) /* ty=(Tensor[(9, 9, 12), bool],) */;
  %752 = cast(%var_7751, dtype="float64") /* ty=Tensor[(176, 2), float64] */;
  %753 = reshape(%752, newshape=[2, 11, 16]) /* ty=Tensor[(2, 11, 16), float64] */;
  %754 = @func_2276(%753) /* ty=(Tensor[(2, 11, 16), float32], Tensor[(16, 2, 5), uint16], Tensor[(160, 1), uint16]) */;
  %755 = @func_7110(%747) /* ty=Tensor[(6, 15, 2), uint64] */;
  %756 = %751.0;
  %757 = %754.1;
  (%748, %755, %var_7742, %756, %757, %var_7751)
}

def @func_1082(%var_1080: Tensor[(9, 2, 13), float64], %var_1081: Tensor[(9, 2, 13), float64]) -> (Tensor[(9, 2, 13), uint64], Tensor[(2, 7, 1), float64], Tensor[(1, 14), float64], Tensor[(9, 2, 13), float64]) {
  %779 = fn (%var_1031: Tensor[(9, 2, 13), float64], %var_1040: Tensor[(9, 2, 13), float64]) -> (Tensor[(9, 2, 13), uint64], Tensor[(2, 7, 1), float64], Tensor[(1, 14), float64], Tensor[(9, 2, 13), float64]) {
    %758 = cast(meta[relay.Constant][60] /* ty=Tensor[(9, 2, 13), float64] */, dtype="float64") /* ty=Tensor[(9, 2, 13), float64] */;
    %759 = shape_of(%var_1031, dtype="int32") /* ty=Tensor[(3), int32] */;
    %760 = cast(%var_1031, dtype="float64") /* ty=Tensor[(9, 2, 13), float64] */;
    %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %762 = multiply(%760, %761) /* ty=Tensor[(9, 2, 13), float64] */;
    %763 = cast(%var_1040, dtype="uint64") /* ty=Tensor[(9, 2, 13), uint64] */;
    %764 = shape_of(%762, dtype="int32") /* ty=Tensor[(3), int32] */;
    %765 = cast(%762, dtype="uint64") /* ty=Tensor[(9, 2, 13), uint64] */;
    %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %767 = cast(meta[relay.Constant][61] /* ty=Tensor[(1, 14), float64] */, dtype="float64") /* ty=Tensor[(1, 14), float64] */;
    %768 = reshape(%767, newshape=[2, 7, 1]) /* ty=Tensor[(2, 7, 1), float64] */;
    %769 = @func_664(%768) /* ty=(Tensor[(2, 7, 1), float64],) */;
    %770 = cast(meta[relay.Constant][62] /* ty=Tensor[(9, 2, 13), float64] */, dtype="float32") /* ty=Tensor[(9, 2, 13), float32] */;
    %771 = shape_of(%762, dtype="int32") /* ty=Tensor[(3), int32] */;
    %772 = cast(%762, dtype="float32") /* ty=Tensor[(9, 2, 13), float32] */;
    %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %774 = divide(%772, %773) /* ty=Tensor[(9, 2, 13), float32] */;
    %775 = cast(%774, dtype="float64") /* ty=Tensor[(9, 2, 13), float64] */;
    %776 = bitwise_xor(%765, %766) /* ty=Tensor[(9, 2, 13), uint64] */;
    %777 = %769.0;
    %778 = sqrt(%775) /* ty=Tensor[(9, 2, 13), float64] */;
    (%776, %777, meta[relay.Constant][61] /* ty=Tensor[(1, 14), float64] */, %778)
  };
  %779(%var_1080, %var_1081) /* ty=(Tensor[(9, 2, 13), uint64], Tensor[(2, 7, 1), float64], Tensor[(1, 14), float64], Tensor[(9, 2, 13), float64]) */
}

def @func_5486(%var_5469: Tensor[(5, 9, 15), int64]) -> Tensor[(5, 9, 15), bool] {
  %780 = cast(4 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %781 = cast(%var_5469, dtype="bool") /* ty=Tensor[(5, 9, 15), bool] */;
  greater(%780, %781) /* ty=Tensor[(5, 9, 15), bool] */
}

def @func_9531(%var_9529: Tensor[(9, 9, 12), float32]) -> (Tensor[(9, 9, 12), bool],) {
  @func_9528(%var_9529) /* ty=(Tensor[(9, 9, 12), bool],) */
}

def @func_9647() -> (Tensor[(1, 1848), float32], Tensor[(3, 13, 12), float64]) {
  @func_9645() /* ty=(Tensor[(1, 1848), float32], Tensor[(3, 13, 12), float64]) */
}

def @func_9611(%var_9600: Tensor[(1, 234), float64], %var_9601: Tensor[(1680), float32], %var_9602: Tensor[(352), float64]) -> (Tensor[(9, 9, 12), float64], Tensor[(352), float64], Tensor[(15), bool], Tensor[(225), bool], Tensor[(1, 234), float64], Tensor[(1680), float32], Tensor[(352), float64], Tensor[(378), int8]) {
  %782 = @func_8614() /* ty=(Tensor[(9, 9, 12), float64], Tensor[(9, 9, 12), float64]) */;
  %783 = cast(meta[relay.Constant][63] /* ty=Tensor[(15), bool] */, dtype="bool") /* ty=Tensor[(15), bool] */;
  %784 = cast(meta[relay.Constant][64] /* ty=Tensor[(225), bool] */, dtype="bool") /* ty=Tensor[(225), bool] */;
  %785 = cast(%var_9600, dtype="float64") /* ty=Tensor[(1, 234), float64] */;
  %786 = cast(%var_9601, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %787 = cast(%var_9602, dtype="float64") /* ty=Tensor[(352), float64] */;
  %788 = cast(meta[relay.Constant][65] /* ty=Tensor[(378), int8] */, dtype="int8") /* ty=Tensor[(378), int8] */;
  %789 = reshape(%783, newshape=[1, 3, 5]) /* ty=Tensor[(1, 3, 5), bool] */;
  %790 = reshape(%784, newshape=[15, 3, 5]) /* ty=Tensor[(15, 3, 5), bool] */;
  %791 = reshape(%785, newshape=[234]) /* ty=Tensor[(234), float64] */;
  %792 = reshape(%786, newshape=[1680, 1]) /* ty=Tensor[(1680, 1), float32] */;
  %793 = reshape(%787, newshape=[352]) /* ty=Tensor[(352), float64] */;
  %794 = reshape(%788, newshape=[42, 9]) /* ty=Tensor[(42, 9), int8] */;
  %795 = @func_2759(%789, %790, %791, %792, %793, %794) /* ty=(Tensor[(15, 3, 5), bool], Tensor[(1, 14), float64], Tensor[(234), float64], Tensor[(1, 14), float64], Tensor[(3, 78), float64], Tensor[(728), float32], Tensor[(1680, 1), float32], Tensor[(352), float64], Tensor[(2, 11, 16), float32], Tensor[(14, 9, 3), int8], Tensor[(42, 9), int8], Tensor[(1, 14), float64], Tensor[(2, 7, 1), float64], Tensor[(2, 11, 16), float32]) */;
  %796 = %782.1;
  %797 = %795.7;
  (%796, %797, meta[relay.Constant][63] /* ty=Tensor[(15), bool] */, meta[relay.Constant][64] /* ty=Tensor[(225), bool] */, %var_9600, %var_9601, %var_9602, meta[relay.Constant][65] /* ty=Tensor[(378), int8] */)
}

def @func_7416(%var_7414: Tensor[(1680), float32]) -> (Tensor[(9, 9, 12), float64], Tensor[(7, 8, 13), float32], Tensor[(728), float32], Tensor[(1680), float32], Tensor[(352), float64], Tensor[(234), float64], Tensor[(9, 9, 12), float64]) {
  @func_7413(%var_7414) /* ty=(Tensor[(9, 9, 12), float64], Tensor[(7, 8, 13), float32], Tensor[(728), float32], Tensor[(1680), float32], Tensor[(352), float64], Tensor[(234), float64], Tensor[(9, 9, 12), float64]) */
}

def @func_6576(%var_6574: Tensor[(9, 15, 3), int8], %var_6575: Tensor[(9, 15, 3), int8]) -> Tensor[(9, 15, 3), int8] {
  %802 = fn (%var_6567: Tensor[(9, 15, 3), int8], %var_6568: Tensor[(9, 15, 3), int8]) -> Tensor[(9, 15, 3), int8] {
    %798 = cast(%var_6568, dtype="int8") /* ty=Tensor[(9, 15, 3), int8] */;
    %799 = shape_of(%var_6567, dtype="int32") /* ty=Tensor[(3), int32] */;
    %800 = cast(%var_6567, dtype="int8") /* ty=Tensor[(9, 15, 3), int8] */;
    %801 = dyn.reshape(%798, %799, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    bitwise_or(%800, %801) /* ty=Tensor[(9, 15, 3), int8] */
  };
  %802(%var_6574, %var_6575) /* ty=Tensor[(9, 15, 3), int8] */
}

def @func_7112(%var_7111: Tensor[(6, 15, 2), uint64]) -> Tensor[(6, 15, 2), uint64] {
  %807 = fn (%var_7088: Tensor[(6, 15, 2), uint64]) -> Tensor[(6, 15, 2), uint64] {
    %803 = cast(meta[relay.Constant][66] /* ty=Tensor[(6, 15, 2), uint64] */, dtype="uint64") /* ty=Tensor[(6, 15, 2), uint64] */;
    %804 = shape_of(%var_7088, dtype="int32") /* ty=Tensor[(3), int32] */;
    %805 = cast(%var_7088, dtype="uint64") /* ty=Tensor[(6, 15, 2), uint64] */;
    %806 = dyn.reshape(%803, %804, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    add(%805, %806) /* ty=Tensor[(6, 15, 2), uint64] */
  };
  %807(%var_7111) /* ty=Tensor[(6, 15, 2), uint64] */
}

def @func_1625(%var_1622: Tensor[(6, 8, 5), uint8], %var_1623: Tensor[(6, 8, 5), uint8], %var_1624: Tensor[(6, 8, 5), bool]) -> (Tensor[(6, 8, 5), uint64],) {
  @func_1620(%var_1622, %var_1623, %var_1624) /* ty=(Tensor[(6, 8, 5), uint64],) */
}

def @func_7568() -> Tensor[(9, 9, 12), float64] {
  %808 = fn () -> Tensor[(9, 9, 12), float64] {
    @func_6891() /* ty=Tensor[(9, 9, 12), float64] */
  };
  %808() /* ty=Tensor[(9, 9, 12), float64] */
}

def @func_9854(%var_9852: Tensor[(7, 9), float32]) -> (Tensor[(9, 9, 12), float32], Tensor[(7, 9, ?), bool], Tensor[(2, 7, 1), float64], Tensor[(728), float32], Tensor[(1680), float32], Tensor[(176, 2), float64], Tensor[(234), float64]) {
  @func_9851(%var_9852) /* ty=(Tensor[(9, 9, 12), float32], Tensor[(7, 9, ?), bool], Tensor[(2, 7, 1), float64], Tensor[(728), float32], Tensor[(1680), float32], Tensor[(176, 2), float64], Tensor[(234), float64]) */
}

def @func_9912(%var_9861: Tensor[(2, 9, 7), float32], %var_9862: Tensor[(2, 9, 7), float32]) -> (Tensor[(2, 9, 7), int64], Tensor[(9, 9, 12), float32]) {
  %809 = cast(%var_9862, dtype="float32") /* ty=Tensor[(2, 9, 7), float32] */;
  %810 = shape_of(%var_9861, dtype="int32") /* ty=Tensor[(3), int32] */;
  %811 = cast(%var_9861, dtype="float32") /* ty=Tensor[(2, 9, 7), float32] */;
  %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %813 = power(%811, %812) /* ty=Tensor[(2, 9, 7), float32] */;
  %814 = cast(%var_9861, dtype="int64") /* ty=Tensor[(2, 9, 7), int64] */;
  %815 = shape_of(%813, dtype="int32") /* ty=Tensor[(3), int32] */;
  %816 = cast(%813, dtype="int64") /* ty=Tensor[(2, 9, 7), int64] */;
  %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %818 = @func_8361() /* ty=(Tensor[(9, 9, 12), float32],) */;
  %819 = bitwise_xor(%816, %817) /* ty=Tensor[(2, 9, 7), int64] */;
  %820 = %818.0;
  (%819, %820)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen375/build/output.py", line 2152, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:11:38] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

